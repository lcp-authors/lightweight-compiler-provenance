
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012d70 <.init>:
   12d70:	push	{r3, lr}
   12d74:	bl	12eb4 <_start@@Base+0x3c>
   12d78:	pop	{r3, pc}

Disassembly of section .plt:

00012d7c <strcmp@plt-0x14>:
   12d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   12d80:	ldr	lr, [pc, #4]	; 12d8c <strcmp@plt-0x4>
   12d84:	add	lr, pc, lr
   12d88:	ldr	pc, [lr, #8]!
   12d8c:	andeq	r6, r3, r4, ror r2

00012d90 <strcmp@plt>:
   12d90:	add	ip, pc, #0, 12
   12d94:	add	ip, ip, #221184	; 0x36000
   12d98:	ldr	pc, [ip, #628]!	; 0x274

00012d9c <printf@plt>:
   12d9c:	add	ip, pc, #0, 12
   12da0:	add	ip, ip, #221184	; 0x36000
   12da4:	ldr	pc, [ip, #620]!	; 0x26c

00012da8 <free@plt>:
   12da8:	add	ip, pc, #0, 12
   12dac:	add	ip, ip, #221184	; 0x36000
   12db0:	ldr	pc, [ip, #612]!	; 0x264

00012db4 <memcpy@plt>:
   12db4:	add	ip, pc, #0, 12
   12db8:	add	ip, ip, #221184	; 0x36000
   12dbc:	ldr	pc, [ip, #604]!	; 0x25c

00012dc0 <memcmp@plt>:
   12dc0:	add	ip, pc, #0, 12
   12dc4:	add	ip, ip, #221184	; 0x36000
   12dc8:	ldr	pc, [ip, #596]!	; 0x254

00012dcc <realloc@plt>:
   12dcc:	add	ip, pc, #0, 12
   12dd0:	add	ip, ip, #221184	; 0x36000
   12dd4:	ldr	pc, [ip, #588]!	; 0x24c

00012dd8 <gettimeofday@plt>:
   12dd8:	add	ip, pc, #0, 12
   12ddc:	add	ip, ip, #221184	; 0x36000
   12de0:	ldr	pc, [ip, #580]!	; 0x244

00012de4 <malloc@plt>:
   12de4:	add	ip, pc, #0, 12
   12de8:	add	ip, ip, #221184	; 0x36000
   12dec:	ldr	pc, [ip, #572]!	; 0x23c

00012df0 <__libc_start_main@plt>:
   12df0:	add	ip, pc, #0, 12
   12df4:	add	ip, ip, #221184	; 0x36000
   12df8:	ldr	pc, [ip, #564]!	; 0x234

00012dfc <__gmon_start__@plt>:
   12dfc:	add	ip, pc, #0, 12
   12e00:	add	ip, ip, #221184	; 0x36000
   12e04:	ldr	pc, [ip, #556]!	; 0x22c

00012e08 <strlen@plt>:
   12e08:	add	ip, pc, #0, 12
   12e0c:	add	ip, ip, #221184	; 0x36000
   12e10:	ldr	pc, [ip, #548]!	; 0x224

00012e14 <fprintf@plt>:
   12e14:	add	ip, pc, #0, 12
   12e18:	add	ip, ip, #221184	; 0x36000
   12e1c:	ldr	pc, [ip, #540]!	; 0x21c

00012e20 <posix_memalign@plt>:
   12e20:	add	ip, pc, #0, 12
   12e24:	add	ip, ip, #221184	; 0x36000
   12e28:	ldr	pc, [ip, #532]!	; 0x214

00012e2c <memset@plt>:
   12e2c:	add	ip, pc, #0, 12
   12e30:	add	ip, ip, #221184	; 0x36000
   12e34:	ldr	pc, [ip, #524]!	; 0x20c

00012e38 <strncpy@plt>:
   12e38:	add	ip, pc, #0, 12
   12e3c:	add	ip, ip, #221184	; 0x36000
   12e40:	ldr	pc, [ip, #516]!	; 0x204

00012e44 <memchr@plt>:
   12e44:	add	ip, pc, #0, 12
   12e48:	add	ip, ip, #221184	; 0x36000
   12e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00012e50 <strncmp@plt>:
   12e50:	add	ip, pc, #0, 12
   12e54:	add	ip, ip, #221184	; 0x36000
   12e58:	ldr	pc, [ip, #500]!	; 0x1f4

00012e5c <abort@plt>:
   12e5c:	add	ip, pc, #0, 12
   12e60:	add	ip, ip, #221184	; 0x36000
   12e64:	ldr	pc, [ip, #492]!	; 0x1ec

00012e68 <__assert_fail@plt>:
   12e68:	add	ip, pc, #0, 12
   12e6c:	add	ip, ip, #221184	; 0x36000
   12e70:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00012e78 <_start@@Base>:
   12e78:	mov	fp, #0
   12e7c:	mov	lr, #0
   12e80:	pop	{r1}		; (ldr r1, [sp], #4)
   12e84:	mov	r2, sp
   12e88:	push	{r2}		; (str r2, [sp, #-4]!)
   12e8c:	push	{r0}		; (str r0, [sp, #-4]!)
   12e90:	ldr	ip, [pc, #16]	; 12ea8 <_start@@Base+0x30>
   12e94:	push	{ip}		; (str ip, [sp, #-4]!)
   12e98:	ldr	r0, [pc, #12]	; 12eac <_start@@Base+0x34>
   12e9c:	ldr	r3, [pc, #12]	; 12eb0 <_start@@Base+0x38>
   12ea0:	bl	12df0 <__libc_start_main@plt>
   12ea4:	bl	12e5c <abort@plt>
   12ea8:	andeq	r1, r3, ip, asr #23
   12eac:			; <UNDEFINED> instruction: 0x000233b4
   12eb0:	andeq	r1, r3, ip, ror #22
   12eb4:	ldr	r3, [pc, #20]	; 12ed0 <_start@@Base+0x58>
   12eb8:	ldr	r2, [pc, #20]	; 12ed4 <_start@@Base+0x5c>
   12ebc:	add	r3, pc, r3
   12ec0:	ldr	r2, [r3, r2]
   12ec4:	cmp	r2, #0
   12ec8:	bxeq	lr
   12ecc:	b	12dfc <__gmon_start__@plt>
   12ed0:	andeq	r6, r3, ip, lsr r1
   12ed4:	andeq	r0, r0, r0, rrx
   12ed8:	ldr	r0, [pc, #24]	; 12ef8 <_start@@Base+0x80>
   12edc:	ldr	r3, [pc, #24]	; 12efc <_start@@Base+0x84>
   12ee0:	cmp	r3, r0
   12ee4:	bxeq	lr
   12ee8:	ldr	r3, [pc, #16]	; 12f00 <_start@@Base+0x88>
   12eec:	cmp	r3, #0
   12ef0:	bxeq	lr
   12ef4:	bx	r3
   12ef8:	andeq	r9, r4, ip, ror r0
   12efc:	andeq	r9, r4, ip, ror r0
   12f00:	andeq	r0, r0, r0
   12f04:	ldr	r0, [pc, #36]	; 12f30 <_start@@Base+0xb8>
   12f08:	ldr	r1, [pc, #36]	; 12f34 <_start@@Base+0xbc>
   12f0c:	sub	r1, r1, r0
   12f10:	asr	r1, r1, #2
   12f14:	add	r1, r1, r1, lsr #31
   12f18:	asrs	r1, r1, #1
   12f1c:	bxeq	lr
   12f20:	ldr	r3, [pc, #16]	; 12f38 <_start@@Base+0xc0>
   12f24:	cmp	r3, #0
   12f28:	bxeq	lr
   12f2c:	bx	r3
   12f30:	andeq	r9, r4, ip, ror r0
   12f34:	andeq	r9, r4, ip, ror r0
   12f38:	andeq	r0, r0, r0
   12f3c:	push	{r4, lr}
   12f40:	ldr	r4, [pc, #24]	; 12f60 <_start@@Base+0xe8>
   12f44:	ldrb	r3, [r4]
   12f48:	cmp	r3, #0
   12f4c:	popne	{r4, pc}
   12f50:	bl	12ed8 <_start@@Base+0x60>
   12f54:	mov	r3, #1
   12f58:	strb	r3, [r4]
   12f5c:	pop	{r4, pc}
   12f60:	andeq	r9, r4, ip, ror r0
   12f64:	b	12f04 <_start@@Base+0x8c>

00012f68 <verify_empty_monster@@Base>:
   12f68:	push	{fp, lr}
   12f6c:	mov	fp, sp
   12f70:	sub	sp, sp, #64	; 0x40
   12f74:	ldr	r1, [pc, #516]	; 13180 <verify_empty_monster@@Base+0x218>
   12f78:	add	r1, pc, r1
   12f7c:	str	r0, [fp, #-8]
   12f80:	ldr	r0, [fp, #-8]
   12f84:	bl	131a8 <verify_empty_monster@@Base+0x240>
   12f88:	ldr	r1, [pc, #492]	; 1317c <verify_empty_monster@@Base+0x214>
   12f8c:	add	r1, pc, r1
   12f90:	str	r0, [fp, #-12]
   12f94:	ldr	r0, [fp, #-8]
   12f98:	bl	131a8 <verify_empty_monster@@Base+0x240>
   12f9c:	str	r0, [fp, #-16]
   12fa0:	ldr	r0, [fp, #-8]
   12fa4:	movw	r1, #0
   12fa8:	bl	131a8 <verify_empty_monster@@Base+0x240>
   12fac:	ldr	r1, [pc, #452]	; 13178 <verify_empty_monster@@Base+0x210>
   12fb0:	add	r1, pc, r1
   12fb4:	str	r0, [fp, #-20]	; 0xffffffec
   12fb8:	ldr	r0, [fp, #-8]
   12fbc:	bl	131a8 <verify_empty_monster@@Base+0x240>
   12fc0:	str	r0, [fp, #-24]	; 0xffffffe8
   12fc4:	ldr	r0, [fp, #-8]
   12fc8:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   12fcc:	str	r0, [fp, #-28]	; 0xffffffe4
   12fd0:	ldr	r0, [fp, #-12]
   12fd4:	movw	r1, #0
   12fd8:	cmp	r0, r1
   12fdc:	bne	12ffc <verify_empty_monster@@Base+0x94>
   12fe0:	ldr	r0, [pc, #412]	; 13184 <verify_empty_monster@@Base+0x21c>
   12fe4:	add	r0, pc, r0
   12fe8:	bl	12d9c <printf@plt>
   12fec:	mvn	lr, #0
   12ff0:	str	lr, [fp, #-4]
   12ff4:	str	r0, [sp, #32]
   12ff8:	b	1316c <verify_empty_monster@@Base+0x204>
   12ffc:	ldr	r0, [fp, #-16]
   13000:	movw	r1, #0
   13004:	cmp	r0, r1
   13008:	beq	13028 <verify_empty_monster@@Base+0xc0>
   1300c:	ldr	r0, [pc, #400]	; 131a4 <verify_empty_monster@@Base+0x23c>
   13010:	add	r0, pc, r0
   13014:	bl	12d9c <printf@plt>
   13018:	mvn	lr, #0
   1301c:	str	lr, [fp, #-4]
   13020:	str	r0, [sp, #28]
   13024:	b	1316c <verify_empty_monster@@Base+0x204>
   13028:	ldr	r0, [fp, #-20]	; 0xffffffec
   1302c:	ldr	r1, [fp, #-12]
   13030:	cmp	r0, r1
   13034:	beq	13054 <verify_empty_monster@@Base+0xec>
   13038:	ldr	r0, [pc, #352]	; 131a0 <verify_empty_monster@@Base+0x238>
   1303c:	add	r0, pc, r0
   13040:	bl	12d9c <printf@plt>
   13044:	mvn	lr, #0
   13048:	str	lr, [fp, #-4]
   1304c:	str	r0, [sp, #24]
   13050:	b	1316c <verify_empty_monster@@Base+0x204>
   13054:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13058:	ldr	r1, [fp, #-12]
   1305c:	cmp	r0, r1
   13060:	beq	13080 <verify_empty_monster@@Base+0x118>
   13064:	ldr	r0, [pc, #304]	; 1319c <verify_empty_monster@@Base+0x234>
   13068:	add	r0, pc, r0
   1306c:	bl	12d9c <printf@plt>
   13070:	mvn	lr, #0
   13074:	str	lr, [fp, #-4]
   13078:	str	r0, [sp, #20]
   1307c:	b	1316c <verify_empty_monster@@Base+0x204>
   13080:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13084:	ldr	r1, [fp, #-12]
   13088:	cmp	r0, r1
   1308c:	beq	130ac <verify_empty_monster@@Base+0x144>
   13090:	ldr	r0, [pc, #256]	; 13198 <verify_empty_monster@@Base+0x230>
   13094:	add	r0, pc, r0
   13098:	bl	12d9c <printf@plt>
   1309c:	mvn	lr, #0
   130a0:	str	lr, [fp, #-4]
   130a4:	str	r0, [sp, #16]
   130a8:	b	1316c <verify_empty_monster@@Base+0x204>
   130ac:	ldr	r0, [fp, #-12]
   130b0:	bl	13294 <verify_empty_monster@@Base+0x32c>
   130b4:	sxth	r0, r0
   130b8:	cmp	r0, #100	; 0x64
   130bc:	beq	130dc <verify_empty_monster@@Base+0x174>
   130c0:	ldr	r0, [pc, #204]	; 13194 <verify_empty_monster@@Base+0x22c>
   130c4:	add	r0, pc, r0
   130c8:	bl	12d9c <printf@plt>
   130cc:	mvn	lr, #0
   130d0:	str	lr, [fp, #-4]
   130d4:	str	r0, [sp, #12]
   130d8:	b	1316c <verify_empty_monster@@Base+0x204>
   130dc:	ldr	r0, [fp, #-12]
   130e0:	bl	13388 <verify_empty_monster@@Base+0x420>
   130e4:	cmp	r0, #0
   130e8:	beq	13108 <verify_empty_monster@@Base+0x1a0>
   130ec:	ldr	r0, [pc, #156]	; 13190 <verify_empty_monster@@Base+0x228>
   130f0:	add	r0, pc, r0
   130f4:	bl	12d9c <printf@plt>
   130f8:	mvn	lr, #0
   130fc:	str	lr, [fp, #-4]
   13100:	str	r0, [sp, #8]
   13104:	b	1316c <verify_empty_monster@@Base+0x204>
   13108:	ldr	r0, [fp, #-12]
   1310c:	bl	13454 <verify_empty_monster@@Base+0x4ec>
   13110:	cmp	r0, #0
   13114:	beq	13134 <verify_empty_monster@@Base+0x1cc>
   13118:	ldr	r0, [pc, #108]	; 1318c <verify_empty_monster@@Base+0x224>
   1311c:	add	r0, pc, r0
   13120:	bl	12d9c <printf@plt>
   13124:	mvn	lr, #0
   13128:	str	lr, [fp, #-4]
   1312c:	str	r0, [sp, #4]
   13130:	b	1316c <verify_empty_monster@@Base+0x204>
   13134:	ldr	r0, [fp, #-12]
   13138:	bl	13520 <verify_empty_monster@@Base+0x5b8>
   1313c:	movw	lr, #0
   13140:	cmp	r0, lr
   13144:	beq	13164 <verify_empty_monster@@Base+0x1fc>
   13148:	ldr	r0, [pc, #56]	; 13188 <verify_empty_monster@@Base+0x220>
   1314c:	add	r0, pc, r0
   13150:	bl	12d9c <printf@plt>
   13154:	mvn	lr, #0
   13158:	str	lr, [fp, #-4]
   1315c:	str	r0, [sp]
   13160:	b	1316c <verify_empty_monster@@Base+0x204>
   13164:	movw	r0, #0
   13168:	str	r0, [fp, #-4]
   1316c:	ldr	r0, [fp, #-4]
   13170:	mov	sp, fp
   13174:	pop	{fp, pc}
   13178:	andeq	lr, r1, lr, lsr #24
   1317c:	andeq	lr, r1, sp, asr #24
   13180:	andeq	lr, r1, ip, asr ip
   13184:	andeq	lr, r1, r0, lsl #24
   13188:	andeq	lr, r1, pc, asr #23
   1318c:	andeq	lr, r1, r3, ror #23
   13190:	strdeq	lr, [r1], -r1
   13194:	strdeq	lr, [r1], -sl
   13198:	strdeq	lr, [r1], -pc	; <UNPREDICTABLE>
   1319c:	strdeq	lr, [r1], -r8
   131a0:	andeq	lr, r1, sp, ror #23
   131a4:	andeq	lr, r1, fp, ror #23
   131a8:	push	{fp, lr}
   131ac:	mov	fp, sp
   131b0:	sub	sp, sp, #16
   131b4:	str	r0, [fp, #-4]
   131b8:	str	r1, [sp, #8]
   131bc:	ldr	r0, [fp, #-4]
   131c0:	movw	r1, #0
   131c4:	cmp	r0, r1
   131c8:	beq	131e0 <verify_empty_monster@@Base+0x278>
   131cc:	ldr	r0, [fp, #-4]
   131d0:	ldr	r1, [sp, #8]
   131d4:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   131d8:	cmp	r0, #0
   131dc:	bne	131ec <verify_empty_monster@@Base+0x284>
   131e0:	movw	r0, #0
   131e4:	str	r0, [sp, #4]
   131e8:	b	1320c <verify_empty_monster@@Base+0x2a4>
   131ec:	ldr	r0, [fp, #-4]
   131f0:	ldr	r1, [fp, #-4]
   131f4:	str	r0, [sp]
   131f8:	mov	r0, r1
   131fc:	bl	2386c <main@@Base+0x4b8>
   13200:	ldr	r1, [sp]
   13204:	add	r0, r1, r0
   13208:	str	r0, [sp, #4]
   1320c:	ldr	r0, [sp, #4]
   13210:	mov	sp, fp
   13214:	pop	{fp, pc}
   13218:	push	{fp, lr}
   1321c:	mov	fp, sp
   13220:	sub	sp, sp, #16
   13224:	ldr	r1, [pc, #100]	; 13290 <verify_empty_monster@@Base+0x328>
   13228:	add	r1, pc, r1
   1322c:	str	r0, [fp, #-4]
   13230:	str	r1, [sp, #8]
   13234:	ldr	r0, [fp, #-4]
   13238:	movw	r1, #0
   1323c:	cmp	r0, r1
   13240:	beq	13258 <verify_empty_monster@@Base+0x2f0>
   13244:	ldr	r0, [fp, #-4]
   13248:	ldr	r1, [sp, #8]
   1324c:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   13250:	cmp	r0, #0
   13254:	bne	13264 <verify_empty_monster@@Base+0x2fc>
   13258:	movw	r0, #0
   1325c:	str	r0, [sp, #4]
   13260:	b	13284 <verify_empty_monster@@Base+0x31c>
   13264:	ldr	r0, [fp, #-4]
   13268:	ldr	r1, [fp, #-4]
   1326c:	str	r0, [sp]
   13270:	mov	r0, r1
   13274:	bl	2386c <main@@Base+0x4b8>
   13278:	ldr	r1, [sp]
   1327c:	add	r0, r1, r0
   13280:	str	r0, [sp, #4]
   13284:	ldr	r0, [sp, #4]
   13288:	mov	sp, fp
   1328c:	pop	{fp, pc}
   13290:	andeq	lr, r1, ip, lsr #19
   13294:	push	{fp, lr}
   13298:	mov	fp, sp
   1329c:	sub	sp, sp, #24
   132a0:	str	r0, [fp, #-4]
   132a4:	movw	r0, #0
   132a8:	strh	r0, [fp, #-6]
   132ac:	ldr	r0, [fp, #-4]
   132b0:	movw	r1, #0
   132b4:	cmp	r0, r1
   132b8:	beq	132c4 <verify_empty_monster@@Base+0x35c>
   132bc:	b	132c0 <verify_empty_monster@@Base+0x358>
   132c0:	b	132e4 <verify_empty_monster@@Base+0x37c>
   132c4:	ldr	r0, [pc, #176]	; 1337c <verify_empty_monster@@Base+0x414>
   132c8:	add	r0, pc, r0
   132cc:	ldr	r1, [pc, #172]	; 13380 <verify_empty_monster@@Base+0x418>
   132d0:	add	r1, pc, r1
   132d4:	ldr	r2, [pc, #168]	; 13384 <verify_empty_monster@@Base+0x41c>
   132d8:	add	r3, pc, r2
   132dc:	movw	r2, #697	; 0x2b9
   132e0:	bl	12e68 <__assert_fail@plt>
   132e4:	mov	r0, #2
   132e8:	strh	r0, [fp, #-8]
   132ec:	ldr	r0, [fp, #-4]
   132f0:	str	r0, [sp, #8]
   132f4:	bl	238a4 <main@@Base+0x4f0>
   132f8:	ldr	lr, [sp, #8]
   132fc:	sub	r0, lr, r0
   13300:	str	r0, [sp, #12]
   13304:	ldr	r0, [sp, #12]
   13308:	bl	238c8 <main@@Base+0x514>
   1330c:	ldrh	lr, [fp, #-8]
   13310:	add	lr, lr, #3
   13314:	lsl	lr, lr, #1
   13318:	cmp	r0, lr
   1331c:	bcc	13338 <verify_empty_monster@@Base+0x3d0>
   13320:	ldr	r0, [sp, #12]
   13324:	ldrh	r1, [fp, #-8]
   13328:	add	r0, r0, r1, lsl #1
   1332c:	add	r0, r0, #4
   13330:	bl	238c8 <main@@Base+0x514>
   13334:	strh	r0, [fp, #-6]
   13338:	ldrh	r0, [fp, #-6]
   1333c:	cmp	r0, #0
   13340:	beq	13360 <verify_empty_monster@@Base+0x3f8>
   13344:	ldr	r0, [fp, #-4]
   13348:	ldrh	r1, [fp, #-6]
   1334c:	add	r0, r0, r1
   13350:	bl	238f0 <main@@Base+0x53c>
   13354:	sxth	r0, r0
   13358:	str	r0, [sp, #4]
   1335c:	b	1336c <verify_empty_monster@@Base+0x404>
   13360:	movw	r0, #100	; 0x64
   13364:	str	r0, [sp, #4]
   13368:	b	1336c <verify_empty_monster@@Base+0x404>
   1336c:	ldr	r0, [sp, #4]
   13370:	sxth	r0, r0
   13374:	mov	sp, fp
   13378:	pop	{fp, pc}
   1337c:	andeq	r1, r2, r1, lsr #4
   13380:	andeq	r1, r2, pc, lsr r2
   13384:			; <UNDEFINED> instruction: 0x000212b0
   13388:	push	{fp, lr}
   1338c:	mov	fp, sp
   13390:	sub	sp, sp, #16
   13394:	str	r0, [fp, #-4]
   13398:	movw	r0, #0
   1339c:	strh	r0, [fp, #-6]
   133a0:	ldr	r0, [fp, #-4]
   133a4:	movw	r1, #0
   133a8:	cmp	r0, r1
   133ac:	beq	133b8 <verify_empty_monster@@Base+0x450>
   133b0:	b	133b4 <verify_empty_monster@@Base+0x44c>
   133b4:	b	133d8 <verify_empty_monster@@Base+0x470>
   133b8:	ldr	r0, [pc, #136]	; 13448 <verify_empty_monster@@Base+0x4e0>
   133bc:	add	r0, pc, r0
   133c0:	ldr	r1, [pc, #132]	; 1344c <verify_empty_monster@@Base+0x4e4>
   133c4:	add	r1, pc, r1
   133c8:	ldr	r2, [pc, #128]	; 13450 <verify_empty_monster@@Base+0x4e8>
   133cc:	add	r3, pc, r2
   133d0:	movw	r2, #697	; 0x2b9
   133d4:	bl	12e68 <__assert_fail@plt>
   133d8:	mov	r0, #2
   133dc:	strh	r0, [sp, #8]
   133e0:	ldr	r0, [fp, #-4]
   133e4:	str	r0, [sp]
   133e8:	bl	238a4 <main@@Base+0x4f0>
   133ec:	ldr	lr, [sp]
   133f0:	sub	r0, lr, r0
   133f4:	str	r0, [sp, #4]
   133f8:	ldr	r0, [sp, #4]
   133fc:	bl	238c8 <main@@Base+0x514>
   13400:	ldrh	lr, [sp, #8]
   13404:	add	lr, lr, #3
   13408:	lsl	lr, lr, #1
   1340c:	cmp	r0, lr
   13410:	bcc	1342c <verify_empty_monster@@Base+0x4c4>
   13414:	ldr	r0, [sp, #4]
   13418:	ldrh	r1, [sp, #8]
   1341c:	add	r0, r0, r1, lsl #1
   13420:	add	r0, r0, #4
   13424:	bl	238c8 <main@@Base+0x514>
   13428:	strh	r0, [fp, #-6]
   1342c:	ldrh	r0, [fp, #-6]
   13430:	cmp	r0, #0
   13434:	movw	r0, #0
   13438:	movne	r0, #1
   1343c:	and	r0, r0, #1
   13440:	mov	sp, fp
   13444:	pop	{fp, pc}
   13448:	andeq	r1, r2, sp, lsr #2
   1344c:	andeq	r1, r2, fp, asr #2
   13450:	strdeq	r1, [r2], -lr
   13454:	push	{fp, lr}
   13458:	mov	fp, sp
   1345c:	sub	sp, sp, #16
   13460:	str	r0, [fp, #-4]
   13464:	movw	r0, #0
   13468:	strh	r0, [fp, #-6]
   1346c:	ldr	r0, [fp, #-4]
   13470:	movw	r1, #0
   13474:	cmp	r0, r1
   13478:	beq	13484 <verify_empty_monster@@Base+0x51c>
   1347c:	b	13480 <verify_empty_monster@@Base+0x518>
   13480:	b	134a4 <verify_empty_monster@@Base+0x53c>
   13484:	ldr	r0, [pc, #136]	; 13514 <verify_empty_monster@@Base+0x5ac>
   13488:	add	r0, pc, r0
   1348c:	ldr	r1, [pc, #132]	; 13518 <verify_empty_monster@@Base+0x5b0>
   13490:	add	r1, pc, r1
   13494:	ldr	r2, [pc, #128]	; 1351c <verify_empty_monster@@Base+0x5b4>
   13498:	add	r3, pc, r2
   1349c:	movw	r2, #696	; 0x2b8
   134a0:	bl	12e68 <__assert_fail@plt>
   134a4:	mov	r0, #0
   134a8:	strh	r0, [sp, #8]
   134ac:	ldr	r0, [fp, #-4]
   134b0:	str	r0, [sp]
   134b4:	bl	238a4 <main@@Base+0x4f0>
   134b8:	ldr	lr, [sp]
   134bc:	sub	r0, lr, r0
   134c0:	str	r0, [sp, #4]
   134c4:	ldr	r0, [sp, #4]
   134c8:	bl	238c8 <main@@Base+0x514>
   134cc:	ldrh	lr, [sp, #8]
   134d0:	add	lr, lr, #3
   134d4:	lsl	lr, lr, #1
   134d8:	cmp	r0, lr
   134dc:	bcc	134f8 <verify_empty_monster@@Base+0x590>
   134e0:	ldr	r0, [sp, #4]
   134e4:	ldrh	r1, [sp, #8]
   134e8:	add	r0, r0, r1, lsl #1
   134ec:	add	r0, r0, #4
   134f0:	bl	238c8 <main@@Base+0x514>
   134f4:	strh	r0, [fp, #-6]
   134f8:	ldrh	r0, [fp, #-6]
   134fc:	cmp	r0, #0
   13500:	movw	r0, #0
   13504:	movne	r0, #1
   13508:	and	r0, r0, #1
   1350c:	mov	sp, fp
   13510:	pop	{fp, pc}
   13514:	andeq	r1, r2, r1, rrx
   13518:	andeq	r1, r2, pc, ror r0
   1351c:	andeq	r1, r2, fp, ror r1
   13520:	push	{fp, lr}
   13524:	mov	fp, sp
   13528:	sub	sp, sp, #24
   1352c:	str	r0, [fp, #-8]
   13530:	movw	r0, #0
   13534:	strh	r0, [fp, #-10]
   13538:	ldr	r0, [fp, #-8]
   1353c:	movw	r1, #0
   13540:	cmp	r0, r1
   13544:	beq	13550 <verify_empty_monster@@Base+0x5e8>
   13548:	b	1354c <verify_empty_monster@@Base+0x5e4>
   1354c:	b	13570 <verify_empty_monster@@Base+0x608>
   13550:	ldr	r0, [pc, #160]	; 135f8 <verify_empty_monster@@Base+0x690>
   13554:	add	r0, pc, r0
   13558:	ldr	r1, [pc, #156]	; 135fc <verify_empty_monster@@Base+0x694>
   1355c:	add	r1, pc, r1
   13560:	ldr	r2, [pc, #152]	; 13600 <verify_empty_monster@@Base+0x698>
   13564:	add	r3, pc, r2
   13568:	movw	r2, #696	; 0x2b8
   1356c:	bl	12e68 <__assert_fail@plt>
   13570:	mov	r0, #0
   13574:	strh	r0, [sp, #12]
   13578:	ldr	r0, [fp, #-8]
   1357c:	str	r0, [sp, #4]
   13580:	bl	238a4 <main@@Base+0x4f0>
   13584:	ldr	lr, [sp, #4]
   13588:	sub	r0, lr, r0
   1358c:	str	r0, [sp, #8]
   13590:	ldr	r0, [sp, #8]
   13594:	bl	238c8 <main@@Base+0x514>
   13598:	ldrh	lr, [sp, #12]
   1359c:	add	lr, lr, #3
   135a0:	lsl	lr, lr, #1
   135a4:	cmp	r0, lr
   135a8:	bcc	135c4 <verify_empty_monster@@Base+0x65c>
   135ac:	ldr	r0, [sp, #8]
   135b0:	ldrh	r1, [sp, #12]
   135b4:	add	r0, r0, r1, lsl #1
   135b8:	add	r0, r0, #4
   135bc:	bl	238c8 <main@@Base+0x514>
   135c0:	strh	r0, [fp, #-10]
   135c4:	ldrsh	r0, [fp, #-10]
   135c8:	cmp	r0, #0
   135cc:	beq	135e4 <verify_empty_monster@@Base+0x67c>
   135d0:	ldr	r0, [fp, #-8]
   135d4:	ldrh	r1, [fp, #-10]
   135d8:	add	r0, r0, r1
   135dc:	str	r0, [fp, #-4]
   135e0:	b	135ec <verify_empty_monster@@Base+0x684>
   135e4:	movw	r0, #0
   135e8:	str	r0, [fp, #-4]
   135ec:	ldr	r0, [fp, #-4]
   135f0:	mov	sp, fp
   135f4:	pop	{fp, pc}
   135f8:	muleq	r2, r5, pc	; <UNPREDICTABLE>
   135fc:			; <UNDEFINED> instruction: 0x00020fb3
   13600:	strdeq	r1, [r2], -r9

00013604 <test_enums@@Base>:
   13604:	sub	sp, sp, #4
   13608:	str	r0, [sp]
   1360c:	movw	r0, #0
   13610:	add	sp, sp, #4
   13614:	bx	lr

00013618 <test_type_aliases@@Base>:
   13618:	push	{fp, lr}
   1361c:	mov	fp, sp
   13620:	sub	sp, sp, #104	; 0x68
   13624:	str	r0, [fp, #-4]
   13628:	movw	r0, #0
   1362c:	str	r0, [fp, #-8]
   13630:	str	r0, [fp, #-12]
   13634:	ldr	r0, [fp, #-4]
   13638:	bl	28b78 <flatcc_builder_reset@@Base>
   1363c:	ldr	lr, [fp, #-4]
   13640:	str	r0, [fp, #-32]	; 0xffffffe0
   13644:	mov	r0, lr
   13648:	movw	lr, #0
   1364c:	mov	r1, lr
   13650:	mov	r2, lr
   13654:	bl	138d0 <test_type_aliases@@Base+0x2b8>
   13658:	str	r0, [fp, #-24]	; 0xffffffe8
   1365c:	ldr	r0, [fp, #-4]
   13660:	movw	r1, #0
   13664:	str	r1, [fp, #-36]	; 0xffffffdc
   13668:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1366c:	bl	13918 <test_type_aliases@@Base+0x300>
   13670:	ldr	r1, [pc, #576]	; 138b8 <test_type_aliases@@Base+0x2a0>
   13674:	str	r0, [fp, #-28]	; 0xffffffe4
   13678:	ldr	r0, [fp, #-4]
   1367c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13680:	ldr	lr, [fp, #-28]	; 0xffffffe4
   13684:	mov	r3, sp
   13688:	str	lr, [r3, #36]	; 0x24
   1368c:	str	r2, [r3, #32]
   13690:	mvn	r2, #0
   13694:	str	r2, [r3, #28]
   13698:	str	r2, [r3, #24]
   1369c:	mov	lr, #-2147483648	; 0x80000000
   136a0:	str	lr, [r3, #20]
   136a4:	mov	ip, #0
   136a8:	str	ip, [r3, #16]
   136ac:	str	r2, [r3, #8]
   136b0:	str	lr, [r3, #4]
   136b4:	movw	r2, #65535	; 0xffff
   136b8:	str	r2, [r3]
   136bc:	mvn	r2, #127	; 0x7f
   136c0:	mov	r3, #255	; 0xff
   136c4:	movw	ip, #32768	; 0x8000
   136c8:	movt	ip, #65535	; 0xffff
   136cc:	vldr	s0, [pc, #488]	; 138bc <test_type_aliases@@Base+0x2a4>
   136d0:	vldr	d1, [pc, #472]	; 138b0 <test_type_aliases@@Base+0x298>
   136d4:	str	r1, [fp, #-40]	; 0xffffffd8
   136d8:	mov	r1, r2
   136dc:	mov	r2, r3
   136e0:	mov	r3, ip
   136e4:	bl	13970 <test_type_aliases@@Base+0x358>
   136e8:	ldr	r1, [fp, #-4]
   136ec:	str	r0, [fp, #-44]	; 0xffffffd4
   136f0:	mov	r0, r1
   136f4:	sub	r1, fp, #16
   136f8:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   136fc:	str	r0, [fp, #-12]
   13700:	ldr	r0, [fp, #-12]
   13704:	ldr	r1, [fp, #-16]
   13708:	bl	13ad0 <test_type_aliases@@Base+0x4b8>
   1370c:	str	r0, [fp, #-8]
   13710:	cmp	r0, #0
   13714:	beq	13770 <test_type_aliases@@Base+0x158>
   13718:	ldr	r0, [pc, #424]	; 138c8 <test_type_aliases@@Base+0x2b0>
   1371c:	add	r0, pc, r0
   13720:	ldr	r1, [pc, #420]	; 138cc <test_type_aliases@@Base+0x2b4>
   13724:	ldr	r1, [pc, r1]
   13728:	ldr	r2, [fp, #-12]
   1372c:	ldr	r3, [fp, #-16]
   13730:	ldr	r1, [r1]
   13734:	str	r1, [fp, #-48]	; 0xffffffd0
   13738:	mov	r1, r2
   1373c:	mov	r2, r3
   13740:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13744:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   13748:	ldr	r0, [fp, #-8]
   1374c:	bl	2f084 <flatcc_verify_error_string@@Base>
   13750:	ldr	r1, [pc, #364]	; 138c4 <test_type_aliases@@Base+0x2ac>
   13754:	add	r1, pc, r1
   13758:	str	r0, [sp, #52]	; 0x34
   1375c:	mov	r0, r1
   13760:	ldr	r1, [sp, #52]	; 0x34
   13764:	bl	12d9c <printf@plt>
   13768:	str	r0, [sp, #48]	; 0x30
   1376c:	b	13880 <test_type_aliases@@Base+0x268>
   13770:	ldr	r0, [fp, #-12]
   13774:	bl	13d20 <test_type_aliases@@Base+0x708>
   13778:	str	r0, [fp, #-20]	; 0xffffffec
   1377c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13780:	bl	13d9c <test_type_aliases@@Base+0x784>
   13784:	sxtb	r0, r0
   13788:	cmn	r0, #128	; 0x80
   1378c:	beq	13794 <test_type_aliases@@Base+0x17c>
   13790:	b	13894 <test_type_aliases@@Base+0x27c>
   13794:	ldr	r0, [fp, #-20]	; 0xffffffec
   13798:	bl	13e90 <test_type_aliases@@Base+0x878>
   1379c:	sxth	r0, r0
   137a0:	cmn	r0, #32768	; 0x8000
   137a4:	beq	137ac <test_type_aliases@@Base+0x194>
   137a8:	b	13894 <test_type_aliases@@Base+0x27c>
   137ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   137b0:	bl	13f84 <test_type_aliases@@Base+0x96c>
   137b4:	cmp	r0, #-2147483648	; 0x80000000
   137b8:	beq	137c0 <test_type_aliases@@Base+0x1a8>
   137bc:	b	13894 <test_type_aliases@@Base+0x27c>
   137c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   137c4:	bl	14070 <test_type_aliases@@Base+0xa58>
   137c8:	eor	r1, r1, #-2147483648	; 0x80000000
   137cc:	orr	r0, r0, r1
   137d0:	cmp	r0, #0
   137d4:	beq	137e0 <test_type_aliases@@Base+0x1c8>
   137d8:	b	137dc <test_type_aliases@@Base+0x1c4>
   137dc:	b	13894 <test_type_aliases@@Base+0x27c>
   137e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   137e4:	bl	14178 <test_type_aliases@@Base+0xb60>
   137e8:	and	r0, r0, #255	; 0xff
   137ec:	cmp	r0, #255	; 0xff
   137f0:	beq	137f8 <test_type_aliases@@Base+0x1e0>
   137f4:	b	13894 <test_type_aliases@@Base+0x27c>
   137f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   137fc:	bl	1426c <test_type_aliases@@Base+0xc54>
   13800:	uxth	r0, r0
   13804:	movw	lr, #65535	; 0xffff
   13808:	cmp	r0, lr
   1380c:	beq	13814 <test_type_aliases@@Base+0x1fc>
   13810:	b	13894 <test_type_aliases@@Base+0x27c>
   13814:	ldr	r0, [fp, #-20]	; 0xffffffec
   13818:	bl	14360 <test_type_aliases@@Base+0xd48>
   1381c:	cmn	r0, #1
   13820:	beq	13828 <test_type_aliases@@Base+0x210>
   13824:	b	13894 <test_type_aliases@@Base+0x27c>
   13828:	ldr	r0, [fp, #-20]	; 0xffffffec
   1382c:	bl	1444c <test_type_aliases@@Base+0xe34>
   13830:	and	r0, r0, r1
   13834:	cmn	r0, #1
   13838:	beq	13844 <test_type_aliases@@Base+0x22c>
   1383c:	b	13840 <test_type_aliases@@Base+0x228>
   13840:	b	13894 <test_type_aliases@@Base+0x27c>
   13844:	ldr	r0, [fp, #-20]	; 0xffffffec
   13848:	bl	14554 <test_type_aliases@@Base+0xf3c>
   1384c:	vldr	s2, [pc, #104]	; 138bc <test_type_aliases@@Base+0x2a4>
   13850:	vcmp.f32	s0, s2
   13854:	vmrs	APSR_nzcv, fpscr
   13858:	beq	13860 <test_type_aliases@@Base+0x248>
   1385c:	b	13894 <test_type_aliases@@Base+0x27c>
   13860:	ldr	r0, [fp, #-20]	; 0xffffffec
   13864:	bl	14648 <test_type_aliases@@Base+0x1030>
   13868:	vldr	d16, [pc, #64]	; 138b0 <test_type_aliases@@Base+0x298>
   1386c:	vcmp.f64	d0, d16
   13870:	vmrs	APSR_nzcv, fpscr
   13874:	beq	1387c <test_type_aliases@@Base+0x264>
   13878:	b	13894 <test_type_aliases@@Base+0x27c>
   1387c:	b	13880 <test_type_aliases@@Base+0x268>
   13880:	ldr	r0, [fp, #-12]
   13884:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   13888:	ldr	r0, [fp, #-8]
   1388c:	mov	sp, fp
   13890:	pop	{fp, pc}
   13894:	ldr	r0, [pc, #36]	; 138c0 <test_type_aliases@@Base+0x2a8>
   13898:	add	r0, pc, r0
   1389c:	mvn	r1, #0
   138a0:	str	r1, [fp, #-8]
   138a4:	bl	12d9c <printf@plt>
   138a8:	str	r0, [sp, #44]	; 0x2c
   138ac:	b	13880 <test_type_aliases@@Base+0x268>
   138b0:	strbtvs	r6, [r6], -r6, ror #12
   138b4:	andmi	r6, r2, r6, ror #12
   138b8:	andhi	r0, r0, r0
   138bc:	andsmi	r3, r3, r3, lsr r3
   138c0:	andeq	lr, r1, r3, ror #9
   138c4:	strdeq	lr, [r1], -fp
   138c8:	andeq	lr, r1, r0, lsr #12
   138cc:	andeq	r5, r3, r0, lsr r9
   138d0:	push	{fp, lr}
   138d4:	mov	fp, sp
   138d8:	sub	sp, sp, #24
   138dc:	str	r0, [fp, #-4]
   138e0:	str	r1, [fp, #-8]
   138e4:	str	r2, [sp, #12]
   138e8:	ldr	r0, [fp, #-4]
   138ec:	ldr	r1, [fp, #-8]
   138f0:	ldr	r2, [sp, #12]
   138f4:	movw	r3, #1
   138f8:	movw	ip, #1
   138fc:	uxth	ip, ip
   13900:	str	ip, [sp]
   13904:	mvn	ip, #0
   13908:	str	ip, [sp, #4]
   1390c:	bl	2c01c <flatcc_builder_create_vector@@Base>
   13910:	mov	sp, fp
   13914:	pop	{fp, pc}
   13918:	push	{fp, lr}
   1391c:	mov	fp, sp
   13920:	sub	sp, sp, #24
   13924:	ldr	r3, [pc, #64]	; 1396c <test_type_aliases@@Base+0x354>
   13928:	str	r0, [fp, #-4]
   1392c:	str	r1, [fp, #-8]
   13930:	str	r2, [sp, #12]
   13934:	ldr	r0, [fp, #-4]
   13938:	ldr	r1, [fp, #-8]
   1393c:	ldr	r2, [sp, #12]
   13940:	movw	ip, #8
   13944:	str	r3, [sp, #8]
   13948:	mov	r3, ip
   1394c:	movw	ip, #8
   13950:	uxth	ip, ip
   13954:	str	ip, [sp]
   13958:	ldr	ip, [sp, #8]
   1395c:	str	ip, [sp, #4]
   13960:	bl	2c01c <flatcc_builder_create_vector@@Base>
   13964:	mov	sp, fp
   13968:	pop	{fp, pc}
   1396c:	svcne	0x00ffffff
   13970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13974:	add	fp, sp, #28
   13978:	sub	sp, sp, #140	; 0x8c
   1397c:	ldr	ip, [fp, #36]	; 0x24
   13980:	ldr	lr, [fp, #32]
   13984:	ldr	r4, [fp, #28]
   13988:	ldr	r5, [fp, #24]
   1398c:	ldr	r6, [fp, #44]	; 0x2c
   13990:	ldr	r7, [fp, #40]	; 0x28
   13994:	ldr	r8, [fp, #16]
   13998:	ldr	r9, [fp, #12]
   1399c:	ldr	sl, [fp, #8]
   139a0:	str	r0, [sp, #84]	; 0x54
   139a4:	ldr	r0, [pc, #288]	; 13acc <test_type_aliases@@Base+0x4b4>
   139a8:	add	r0, pc, r0
   139ac:	str	r0, [sp, #80]	; 0x50
   139b0:	ldr	r0, [sp, #84]	; 0x54
   139b4:	str	r0, [fp, #-36]	; 0xffffffdc
   139b8:	strb	r1, [fp, #-37]	; 0xffffffdb
   139bc:	strb	r2, [fp, #-38]	; 0xffffffda
   139c0:	strh	r3, [fp, #-40]	; 0xffffffd8
   139c4:	strh	sl, [fp, #-42]	; 0xffffffd6
   139c8:	str	r4, [fp, #-52]	; 0xffffffcc
   139cc:	str	r5, [fp, #-56]	; 0xffffffc8
   139d0:	str	ip, [fp, #-60]	; 0xffffffc4
   139d4:	str	lr, [fp, #-64]	; 0xffffffc0
   139d8:	vstr	s0, [fp, #-68]	; 0xffffffbc
   139dc:	vstr	d1, [fp, #-80]	; 0xffffffb0
   139e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   139e4:	ldr	r1, [sp, #80]	; 0x50
   139e8:	str	r7, [sp, #76]	; 0x4c
   139ec:	str	r9, [sp, #72]	; 0x48
   139f0:	str	r6, [sp, #68]	; 0x44
   139f4:	str	r8, [sp, #64]	; 0x40
   139f8:	bl	148dc <test_empty_monster@@Base+0x198>
   139fc:	cmp	r0, #0
   13a00:	beq	13a10 <test_type_aliases@@Base+0x3f8>
   13a04:	movw	r0, #0
   13a08:	str	r0, [fp, #-32]	; 0xffffffe0
   13a0c:	b	13ac0 <test_type_aliases@@Base+0x4a8>
   13a10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13a14:	mov	r1, r0
   13a18:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   13a1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13a20:	ldrh	ip, [fp, #-40]	; 0xffffffd8
   13a24:	ldrh	lr, [fp, #-42]	; 0xffffffd6
   13a28:	ldr	r4, [fp, #12]
   13a2c:	ldr	r5, [fp, #16]
   13a30:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13a34:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13a38:	ldr	r8, [fp, #-64]	; 0xffffffc0
   13a3c:	ldr	r9, [fp, #-60]	; 0xffffffc4
   13a40:	vldr	s0, [fp, #-68]	; 0xffffffbc
   13a44:	vldr	d1, [fp, #-80]	; 0xffffffb0
   13a48:	ldr	sl, [fp, #40]	; 0x28
   13a4c:	str	r0, [sp, #60]	; 0x3c
   13a50:	ldr	r0, [fp, #44]	; 0x2c
   13a54:	str	r0, [sp, #56]	; 0x38
   13a58:	mov	r0, sp
   13a5c:	str	r0, [sp, #52]	; 0x34
   13a60:	ldr	r0, [sp, #56]	; 0x38
   13a64:	str	r1, [sp, #48]	; 0x30
   13a68:	ldr	r1, [sp, #52]	; 0x34
   13a6c:	str	r0, [r1, #36]	; 0x24
   13a70:	str	sl, [r1, #32]
   13a74:	str	r9, [r1, #28]
   13a78:	str	r8, [r1, #24]
   13a7c:	str	r7, [r1, #20]
   13a80:	str	r6, [r1, #16]
   13a84:	str	r5, [r1, #8]
   13a88:	str	r4, [r1, #4]
   13a8c:	uxth	lr, lr
   13a90:	str	lr, [r1]
   13a94:	sxtb	r1, r2
   13a98:	uxtb	r2, r3
   13a9c:	sxth	r3, ip
   13aa0:	ldr	r0, [sp, #60]	; 0x3c
   13aa4:	bl	23954 <main@@Base+0x5a0>
   13aa8:	ldr	r1, [sp, #48]	; 0x30
   13aac:	str	r0, [sp, #44]	; 0x2c
   13ab0:	mov	r0, r1
   13ab4:	ldr	r1, [sp, #44]	; 0x2c
   13ab8:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   13abc:	str	r0, [fp, #-32]	; 0xffffffe0
   13ac0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ac4:	sub	sp, fp, #28
   13ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13acc:	andeq	lr, r1, ip, lsr #4
   13ad0:	push	{fp, lr}
   13ad4:	mov	fp, sp
   13ad8:	sub	sp, sp, #8
   13adc:	ldr	r2, [pc, #36]	; 13b08 <test_type_aliases@@Base+0x4f0>
   13ae0:	add	r2, pc, r2
   13ae4:	ldr	r3, [pc, #32]	; 13b0c <test_type_aliases@@Base+0x4f4>
   13ae8:	add	r3, pc, r3
   13aec:	str	r0, [sp, #4]
   13af0:	str	r1, [sp]
   13af4:	ldr	r0, [sp, #4]
   13af8:	ldr	r1, [sp]
   13afc:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   13b00:	mov	sp, fp
   13b04:	pop	{fp, pc}
   13b08:	strdeq	lr, [r1], -r4
   13b0c:			; <UNDEFINED> instruction: 0x000109b4
   13b10:	push	{fp, lr}
   13b14:	mov	fp, sp
   13b18:	sub	sp, sp, #72	; 0x48
   13b1c:	str	r0, [fp, #-4]
   13b20:	str	r1, [fp, #-8]
   13b24:	str	r2, [fp, #-12]
   13b28:	str	r3, [fp, #-16]
   13b2c:	ldr	r0, [fp, #-8]
   13b30:	str	r0, [sp, #28]
   13b34:	ldr	r0, [fp, #-4]
   13b38:	movw	r1, #0
   13b3c:	cmp	r0, r1
   13b40:	beq	13b5c <test_type_aliases@@Base+0x544>
   13b44:	ldr	r0, [pc, #440]	; 13d04 <test_type_aliases@@Base+0x6ec>
   13b48:	add	r1, pc, r0
   13b4c:	ldr	r0, [fp, #-16]
   13b50:	ldr	r2, [fp, #-4]
   13b54:	bl	12e14 <fprintf@plt>
   13b58:	str	r0, [sp, #24]
   13b5c:	movw	r0, #0
   13b60:	str	r0, [fp, #-20]	; 0xffffffec
   13b64:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b68:	ldr	r1, [fp, #-12]
   13b6c:	cmp	r0, r1
   13b70:	bcs	13cac <test_type_aliases@@Base+0x694>
   13b74:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b78:	and	r0, r0, #15
   13b7c:	cmp	r0, #0
   13b80:	bne	13bc4 <test_type_aliases@@Base+0x5ac>
   13b84:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b88:	cmp	r0, #0
   13b8c:	beq	13ba8 <test_type_aliases@@Base+0x590>
   13b90:	ldr	r0, [pc, #380]	; 13d14 <test_type_aliases@@Base+0x6fc>
   13b94:	add	r1, pc, r0
   13b98:	add	r2, sp, #35	; 0x23
   13b9c:	ldr	r0, [fp, #-16]
   13ba0:	bl	12e14 <fprintf@plt>
   13ba4:	str	r0, [sp, #20]
   13ba8:	ldr	r0, [pc, #360]	; 13d18 <test_type_aliases@@Base+0x700>
   13bac:	add	r1, pc, r0
   13bb0:	ldr	r0, [fp, #-16]
   13bb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bb8:	bl	12e14 <fprintf@plt>
   13bbc:	str	r0, [sp, #16]
   13bc0:	b	13bec <test_type_aliases@@Base+0x5d4>
   13bc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   13bc8:	and	r0, r0, #7
   13bcc:	cmp	r0, #0
   13bd0:	bne	13be8 <test_type_aliases@@Base+0x5d0>
   13bd4:	ldr	r0, [pc, #308]	; 13d10 <test_type_aliases@@Base+0x6f8>
   13bd8:	add	r1, pc, r0
   13bdc:	ldr	r0, [fp, #-16]
   13be0:	bl	12e14 <fprintf@plt>
   13be4:	str	r0, [sp, #12]
   13be8:	b	13bec <test_type_aliases@@Base+0x5d4>
   13bec:	ldr	r0, [pc, #296]	; 13d1c <test_type_aliases@@Base+0x704>
   13bf0:	add	r1, pc, r0
   13bf4:	ldr	r0, [fp, #-16]
   13bf8:	ldr	r2, [sp, #28]
   13bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c00:	add	r2, r2, r3
   13c04:	ldrb	r2, [r2]
   13c08:	bl	12e14 <fprintf@plt>
   13c0c:	ldr	r1, [sp, #28]
   13c10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c14:	add	r1, r1, r2
   13c18:	ldrb	r1, [r1]
   13c1c:	cmp	r1, #32
   13c20:	str	r0, [sp, #8]
   13c24:	blt	13c40 <test_type_aliases@@Base+0x628>
   13c28:	ldr	r0, [sp, #28]
   13c2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c30:	add	r0, r0, r1
   13c34:	ldrb	r0, [r0]
   13c38:	cmp	r0, #126	; 0x7e
   13c3c:	ble	13c5c <test_type_aliases@@Base+0x644>
   13c40:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c44:	and	r0, r0, #15
   13c48:	add	r1, sp, #35	; 0x23
   13c4c:	add	r0, r1, r0
   13c50:	movw	r1, #46	; 0x2e
   13c54:	strb	r1, [r0]
   13c58:	b	13c80 <test_type_aliases@@Base+0x668>
   13c5c:	ldr	r0, [sp, #28]
   13c60:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c64:	add	r0, r0, r1
   13c68:	ldrb	r0, [r0]
   13c6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c70:	and	r1, r1, #15
   13c74:	add	r2, sp, #35	; 0x23
   13c78:	add	r1, r2, r1
   13c7c:	strb	r0, [r1]
   13c80:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c84:	and	r0, r0, #15
   13c88:	add	r0, r0, #1
   13c8c:	add	r1, sp, #35	; 0x23
   13c90:	add	r0, r1, r0
   13c94:	movw	r1, #0
   13c98:	strb	r1, [r0]
   13c9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ca0:	add	r0, r0, #1
   13ca4:	str	r0, [fp, #-20]	; 0xffffffec
   13ca8:	b	13b64 <test_type_aliases@@Base+0x54c>
   13cac:	b	13cb0 <test_type_aliases@@Base+0x698>
   13cb0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13cb4:	and	r0, r0, #15
   13cb8:	cmp	r0, #0
   13cbc:	beq	13ce4 <test_type_aliases@@Base+0x6cc>
   13cc0:	ldr	r0, [pc, #68]	; 13d0c <test_type_aliases@@Base+0x6f4>
   13cc4:	add	r1, pc, r0
   13cc8:	ldr	r0, [fp, #-16]
   13ccc:	bl	12e14 <fprintf@plt>
   13cd0:	ldr	r1, [fp, #-20]	; 0xffffffec
   13cd4:	add	r1, r1, #1
   13cd8:	str	r1, [fp, #-20]	; 0xffffffec
   13cdc:	str	r0, [sp, #4]
   13ce0:	b	13cb0 <test_type_aliases@@Base+0x698>
   13ce4:	ldr	r0, [pc, #28]	; 13d08 <test_type_aliases@@Base+0x6f0>
   13ce8:	add	r1, pc, r0
   13cec:	add	r2, sp, #35	; 0x23
   13cf0:	ldr	r0, [fp, #-16]
   13cf4:	bl	12e14 <fprintf@plt>
   13cf8:	str	r0, [sp]
   13cfc:	mov	sp, fp
   13d00:	pop	{fp, pc}
   13d04:	andeq	r0, r2, lr, ror #25
   13d08:	andeq	r0, r2, r3, asr fp
   13d0c:	andeq	r0, r2, fp, lsl #23
   13d10:	andeq	r0, r2, r9, ror ip
   13d14:	andeq	r0, r2, r7, lsr #25
   13d18:	muleq	r2, r5, ip
   13d1c:	andeq	r0, r2, r9, asr ip
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	sub	sp, sp, #16
   13d2c:	ldr	r1, [pc, #100]	; 13d98 <test_type_aliases@@Base+0x780>
   13d30:	add	r1, pc, r1
   13d34:	str	r0, [fp, #-4]
   13d38:	str	r1, [sp, #8]
   13d3c:	ldr	r0, [fp, #-4]
   13d40:	movw	r1, #0
   13d44:	cmp	r0, r1
   13d48:	beq	13d60 <test_type_aliases@@Base+0x748>
   13d4c:	ldr	r0, [fp, #-4]
   13d50:	ldr	r1, [sp, #8]
   13d54:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   13d58:	cmp	r0, #0
   13d5c:	bne	13d6c <test_type_aliases@@Base+0x754>
   13d60:	movw	r0, #0
   13d64:	str	r0, [sp, #4]
   13d68:	b	13d8c <test_type_aliases@@Base+0x774>
   13d6c:	ldr	r0, [fp, #-4]
   13d70:	ldr	r1, [fp, #-4]
   13d74:	str	r0, [sp]
   13d78:	mov	r0, r1
   13d7c:	bl	2386c <main@@Base+0x4b8>
   13d80:	ldr	r1, [sp]
   13d84:	add	r0, r1, r0
   13d88:	str	r0, [sp, #4]
   13d8c:	ldr	r0, [sp, #4]
   13d90:	mov	sp, fp
   13d94:	pop	{fp, pc}
   13d98:	andeq	sp, r1, r4, lsr #29
   13d9c:	push	{fp, lr}
   13da0:	mov	fp, sp
   13da4:	sub	sp, sp, #24
   13da8:	str	r0, [fp, #-4]
   13dac:	movw	r0, #0
   13db0:	strh	r0, [fp, #-6]
   13db4:	ldr	r0, [fp, #-4]
   13db8:	movw	r1, #0
   13dbc:	cmp	r0, r1
   13dc0:	beq	13dcc <test_type_aliases@@Base+0x7b4>
   13dc4:	b	13dc8 <test_type_aliases@@Base+0x7b0>
   13dc8:	b	13dec <test_type_aliases@@Base+0x7d4>
   13dcc:	ldr	r0, [pc, #176]	; 13e84 <test_type_aliases@@Base+0x86c>
   13dd0:	add	r0, pc, r0
   13dd4:	ldr	r1, [pc, #172]	; 13e88 <test_type_aliases@@Base+0x870>
   13dd8:	add	r1, pc, r1
   13ddc:	ldr	r2, [pc, #168]	; 13e8c <test_type_aliases@@Base+0x874>
   13de0:	add	r3, pc, r2
   13de4:	movw	r2, #749	; 0x2ed
   13de8:	bl	12e68 <__assert_fail@plt>
   13dec:	mov	r0, #0
   13df0:	strh	r0, [fp, #-8]
   13df4:	ldr	r0, [fp, #-4]
   13df8:	str	r0, [sp, #8]
   13dfc:	bl	238a4 <main@@Base+0x4f0>
   13e00:	ldr	lr, [sp, #8]
   13e04:	sub	r0, lr, r0
   13e08:	str	r0, [sp, #12]
   13e0c:	ldr	r0, [sp, #12]
   13e10:	bl	238c8 <main@@Base+0x514>
   13e14:	ldrh	lr, [fp, #-8]
   13e18:	add	lr, lr, #3
   13e1c:	lsl	lr, lr, #1
   13e20:	cmp	r0, lr
   13e24:	bcc	13e40 <test_type_aliases@@Base+0x828>
   13e28:	ldr	r0, [sp, #12]
   13e2c:	ldrh	r1, [fp, #-8]
   13e30:	add	r0, r0, r1, lsl #1
   13e34:	add	r0, r0, #4
   13e38:	bl	238c8 <main@@Base+0x514>
   13e3c:	strh	r0, [fp, #-6]
   13e40:	ldrh	r0, [fp, #-6]
   13e44:	cmp	r0, #0
   13e48:	beq	13e68 <test_type_aliases@@Base+0x850>
   13e4c:	ldr	r0, [fp, #-4]
   13e50:	ldrh	r1, [fp, #-6]
   13e54:	add	r0, r0, r1
   13e58:	bl	24780 <main@@Base+0x13cc>
   13e5c:	sxtb	r0, r0
   13e60:	str	r0, [sp, #4]
   13e64:	b	13e74 <test_type_aliases@@Base+0x85c>
   13e68:	movw	r0, #0
   13e6c:	str	r0, [sp, #4]
   13e70:	b	13e74 <test_type_aliases@@Base+0x85c>
   13e74:	ldr	r0, [sp, #4]
   13e78:	sxtb	r0, r0
   13e7c:	mov	sp, fp
   13e80:	pop	{fp, pc}
   13e84:	andeq	r0, r2, r9, lsl r7
   13e88:	andeq	r0, r2, r7, lsr r7
   13e8c:	andeq	r0, r2, r3, ror sl
   13e90:	push	{fp, lr}
   13e94:	mov	fp, sp
   13e98:	sub	sp, sp, #24
   13e9c:	str	r0, [fp, #-4]
   13ea0:	movw	r0, #0
   13ea4:	strh	r0, [fp, #-6]
   13ea8:	ldr	r0, [fp, #-4]
   13eac:	movw	r1, #0
   13eb0:	cmp	r0, r1
   13eb4:	beq	13ec0 <test_type_aliases@@Base+0x8a8>
   13eb8:	b	13ebc <test_type_aliases@@Base+0x8a4>
   13ebc:	b	13ee0 <test_type_aliases@@Base+0x8c8>
   13ec0:	ldr	r0, [pc, #176]	; 13f78 <test_type_aliases@@Base+0x960>
   13ec4:	add	r0, pc, r0
   13ec8:	ldr	r1, [pc, #172]	; 13f7c <test_type_aliases@@Base+0x964>
   13ecc:	add	r1, pc, r1
   13ed0:	ldr	r2, [pc, #168]	; 13f80 <test_type_aliases@@Base+0x968>
   13ed4:	add	r3, pc, r2
   13ed8:	movw	r2, #751	; 0x2ef
   13edc:	bl	12e68 <__assert_fail@plt>
   13ee0:	mov	r0, #2
   13ee4:	strh	r0, [fp, #-8]
   13ee8:	ldr	r0, [fp, #-4]
   13eec:	str	r0, [sp, #8]
   13ef0:	bl	238a4 <main@@Base+0x4f0>
   13ef4:	ldr	lr, [sp, #8]
   13ef8:	sub	r0, lr, r0
   13efc:	str	r0, [sp, #12]
   13f00:	ldr	r0, [sp, #12]
   13f04:	bl	238c8 <main@@Base+0x514>
   13f08:	ldrh	lr, [fp, #-8]
   13f0c:	add	lr, lr, #3
   13f10:	lsl	lr, lr, #1
   13f14:	cmp	r0, lr
   13f18:	bcc	13f34 <test_type_aliases@@Base+0x91c>
   13f1c:	ldr	r0, [sp, #12]
   13f20:	ldrh	r1, [fp, #-8]
   13f24:	add	r0, r0, r1, lsl #1
   13f28:	add	r0, r0, #4
   13f2c:	bl	238c8 <main@@Base+0x514>
   13f30:	strh	r0, [fp, #-6]
   13f34:	ldrh	r0, [fp, #-6]
   13f38:	cmp	r0, #0
   13f3c:	beq	13f5c <test_type_aliases@@Base+0x944>
   13f40:	ldr	r0, [fp, #-4]
   13f44:	ldrh	r1, [fp, #-6]
   13f48:	add	r0, r0, r1
   13f4c:	bl	238f0 <main@@Base+0x53c>
   13f50:	sxth	r0, r0
   13f54:	str	r0, [sp, #4]
   13f58:	b	13f68 <test_type_aliases@@Base+0x950>
   13f5c:	movw	r0, #0
   13f60:	str	r0, [sp, #4]
   13f64:	b	13f68 <test_type_aliases@@Base+0x950>
   13f68:	ldr	r0, [sp, #4]
   13f6c:	sxth	r0, r0
   13f70:	mov	sp, fp
   13f74:	pop	{fp, pc}
   13f78:	andeq	r0, r2, r5, lsr #12
   13f7c:	andeq	r0, r2, r3, asr #12
   13f80:	andeq	r0, r2, r8, asr #19
   13f84:	push	{fp, lr}
   13f88:	mov	fp, sp
   13f8c:	sub	sp, sp, #24
   13f90:	str	r0, [fp, #-4]
   13f94:	movw	r0, #0
   13f98:	strh	r0, [fp, #-6]
   13f9c:	ldr	r0, [fp, #-4]
   13fa0:	movw	r1, #0
   13fa4:	cmp	r0, r1
   13fa8:	beq	13fb4 <test_type_aliases@@Base+0x99c>
   13fac:	b	13fb0 <test_type_aliases@@Base+0x998>
   13fb0:	b	13fd4 <test_type_aliases@@Base+0x9bc>
   13fb4:	ldr	r0, [pc, #168]	; 14064 <test_type_aliases@@Base+0xa4c>
   13fb8:	add	r0, pc, r0
   13fbc:	ldr	r1, [pc, #164]	; 14068 <test_type_aliases@@Base+0xa50>
   13fc0:	add	r1, pc, r1
   13fc4:	ldr	r2, [pc, #160]	; 1406c <test_type_aliases@@Base+0xa54>
   13fc8:	add	r3, pc, r2
   13fcc:	movw	r2, #753	; 0x2f1
   13fd0:	bl	12e68 <__assert_fail@plt>
   13fd4:	mov	r0, #4
   13fd8:	strh	r0, [fp, #-8]
   13fdc:	ldr	r0, [fp, #-4]
   13fe0:	str	r0, [sp, #8]
   13fe4:	bl	238a4 <main@@Base+0x4f0>
   13fe8:	ldr	lr, [sp, #8]
   13fec:	sub	r0, lr, r0
   13ff0:	str	r0, [sp, #12]
   13ff4:	ldr	r0, [sp, #12]
   13ff8:	bl	238c8 <main@@Base+0x514>
   13ffc:	ldrh	lr, [fp, #-8]
   14000:	add	lr, lr, #3
   14004:	lsl	lr, lr, #1
   14008:	cmp	r0, lr
   1400c:	bcc	14028 <test_type_aliases@@Base+0xa10>
   14010:	ldr	r0, [sp, #12]
   14014:	ldrh	r1, [fp, #-8]
   14018:	add	r0, r0, r1, lsl #1
   1401c:	add	r0, r0, #4
   14020:	bl	238c8 <main@@Base+0x514>
   14024:	strh	r0, [fp, #-6]
   14028:	ldrh	r0, [fp, #-6]
   1402c:	cmp	r0, #0
   14030:	beq	1404c <test_type_aliases@@Base+0xa34>
   14034:	ldr	r0, [fp, #-4]
   14038:	ldrh	r1, [fp, #-6]
   1403c:	add	r0, r0, r1
   14040:	bl	247bc <main@@Base+0x1408>
   14044:	str	r0, [sp, #4]
   14048:	b	14058 <test_type_aliases@@Base+0xa40>
   1404c:	movw	r0, #0
   14050:	str	r0, [sp, #4]
   14054:	b	14058 <test_type_aliases@@Base+0xa40>
   14058:	ldr	r0, [sp, #4]
   1405c:	mov	sp, fp
   14060:	pop	{fp, pc}
   14064:	andeq	r0, r2, r1, lsr r5
   14068:	andeq	r0, r2, pc, asr #10
   1406c:	andeq	r0, r2, pc, lsl r9
   14070:	push	{fp, lr}
   14074:	mov	fp, sp
   14078:	sub	sp, sp, #32
   1407c:	str	r0, [fp, #-4]
   14080:	movw	r0, #0
   14084:	strh	r0, [fp, #-6]
   14088:	ldr	r0, [fp, #-4]
   1408c:	movw	r1, #0
   14090:	cmp	r0, r1
   14094:	beq	140a0 <test_type_aliases@@Base+0xa88>
   14098:	b	1409c <test_type_aliases@@Base+0xa84>
   1409c:	b	140c0 <test_type_aliases@@Base+0xaa8>
   140a0:	ldr	r0, [pc, #196]	; 1416c <test_type_aliases@@Base+0xb54>
   140a4:	add	r0, pc, r0
   140a8:	ldr	r1, [pc, #192]	; 14170 <test_type_aliases@@Base+0xb58>
   140ac:	add	r1, pc, r1
   140b0:	ldr	r2, [pc, #188]	; 14174 <test_type_aliases@@Base+0xb5c>
   140b4:	add	r3, pc, r2
   140b8:	movw	r2, #755	; 0x2f3
   140bc:	bl	12e68 <__assert_fail@plt>
   140c0:	mov	r0, #6
   140c4:	strh	r0, [fp, #-8]
   140c8:	ldr	r0, [fp, #-4]
   140cc:	str	r0, [sp, #16]
   140d0:	bl	238a4 <main@@Base+0x4f0>
   140d4:	ldr	lr, [sp, #16]
   140d8:	sub	r0, lr, r0
   140dc:	str	r0, [fp, #-12]
   140e0:	ldr	r0, [fp, #-12]
   140e4:	bl	238c8 <main@@Base+0x514>
   140e8:	ldrh	lr, [fp, #-8]
   140ec:	add	lr, lr, #3
   140f0:	lsl	lr, lr, #1
   140f4:	cmp	r0, lr
   140f8:	bcc	14114 <test_type_aliases@@Base+0xafc>
   140fc:	ldr	r0, [fp, #-12]
   14100:	ldrh	r1, [fp, #-8]
   14104:	add	r0, r0, r1, lsl #1
   14108:	add	r0, r0, #4
   1410c:	bl	238c8 <main@@Base+0x514>
   14110:	strh	r0, [fp, #-6]
   14114:	ldrh	r0, [fp, #-6]
   14118:	cmp	r0, #0
   1411c:	beq	1413c <test_type_aliases@@Base+0xb24>
   14120:	ldr	r0, [fp, #-4]
   14124:	ldrh	r1, [fp, #-6]
   14128:	add	r0, r0, r1
   1412c:	bl	247f4 <main@@Base+0x1440>
   14130:	str	r0, [sp, #12]
   14134:	str	r1, [sp, #8]
   14138:	b	14150 <test_type_aliases@@Base+0xb38>
   1413c:	mov	r0, #0
   14140:	mov	r1, r0
   14144:	str	r1, [sp, #12]
   14148:	str	r0, [sp, #8]
   1414c:	b	14150 <test_type_aliases@@Base+0xb38>
   14150:	ldr	r0, [sp, #8]
   14154:	ldr	r1, [sp, #12]
   14158:	str	r0, [sp, #4]
   1415c:	mov	r0, r1
   14160:	ldr	r1, [sp, #4]
   14164:	mov	sp, fp
   14168:	pop	{fp, pc}
   1416c:	andeq	r0, r2, r5, asr #8
   14170:	andeq	r0, r2, r3, ror #8
   14174:	andeq	r0, r2, lr, ror r8
   14178:	push	{fp, lr}
   1417c:	mov	fp, sp
   14180:	sub	sp, sp, #24
   14184:	str	r0, [fp, #-4]
   14188:	movw	r0, #0
   1418c:	strh	r0, [fp, #-6]
   14190:	ldr	r0, [fp, #-4]
   14194:	movw	r1, #0
   14198:	cmp	r0, r1
   1419c:	beq	141a8 <test_type_aliases@@Base+0xb90>
   141a0:	b	141a4 <test_type_aliases@@Base+0xb8c>
   141a4:	b	141c8 <test_type_aliases@@Base+0xbb0>
   141a8:	ldr	r0, [pc, #176]	; 14260 <test_type_aliases@@Base+0xc48>
   141ac:	add	r0, pc, r0
   141b0:	ldr	r1, [pc, #172]	; 14264 <test_type_aliases@@Base+0xc4c>
   141b4:	add	r1, pc, r1
   141b8:	ldr	r2, [pc, #168]	; 14268 <test_type_aliases@@Base+0xc50>
   141bc:	add	r3, pc, r2
   141c0:	movw	r2, #750	; 0x2ee
   141c4:	bl	12e68 <__assert_fail@plt>
   141c8:	mov	r0, #1
   141cc:	strh	r0, [fp, #-8]
   141d0:	ldr	r0, [fp, #-4]
   141d4:	str	r0, [sp, #8]
   141d8:	bl	238a4 <main@@Base+0x4f0>
   141dc:	ldr	lr, [sp, #8]
   141e0:	sub	r0, lr, r0
   141e4:	str	r0, [sp, #12]
   141e8:	ldr	r0, [sp, #12]
   141ec:	bl	238c8 <main@@Base+0x514>
   141f0:	ldrh	lr, [fp, #-8]
   141f4:	add	lr, lr, #3
   141f8:	lsl	lr, lr, #1
   141fc:	cmp	r0, lr
   14200:	bcc	1421c <test_type_aliases@@Base+0xc04>
   14204:	ldr	r0, [sp, #12]
   14208:	ldrh	r1, [fp, #-8]
   1420c:	add	r0, r0, r1, lsl #1
   14210:	add	r0, r0, #4
   14214:	bl	238c8 <main@@Base+0x514>
   14218:	strh	r0, [fp, #-6]
   1421c:	ldrh	r0, [fp, #-6]
   14220:	cmp	r0, #0
   14224:	beq	14244 <test_type_aliases@@Base+0xc2c>
   14228:	ldr	r0, [fp, #-4]
   1422c:	ldrh	r1, [fp, #-6]
   14230:	add	r0, r0, r1
   14234:	bl	24844 <main@@Base+0x1490>
   14238:	and	r0, r0, #255	; 0xff
   1423c:	str	r0, [sp, #4]
   14240:	b	14250 <test_type_aliases@@Base+0xc38>
   14244:	movw	r0, #0
   14248:	str	r0, [sp, #4]
   1424c:	b	14250 <test_type_aliases@@Base+0xc38>
   14250:	ldr	r0, [sp, #4]
   14254:	and	r0, r0, #255	; 0xff
   14258:	mov	sp, fp
   1425c:	pop	{fp, pc}
   14260:	andeq	r0, r2, sp, lsr r3
   14264:	andeq	r0, r2, fp, asr r3
   14268:	andeq	r0, r2, r1, asr #15
   1426c:	push	{fp, lr}
   14270:	mov	fp, sp
   14274:	sub	sp, sp, #24
   14278:	str	r0, [fp, #-4]
   1427c:	movw	r0, #0
   14280:	strh	r0, [fp, #-6]
   14284:	ldr	r0, [fp, #-4]
   14288:	movw	r1, #0
   1428c:	cmp	r0, r1
   14290:	beq	1429c <test_type_aliases@@Base+0xc84>
   14294:	b	14298 <test_type_aliases@@Base+0xc80>
   14298:	b	142bc <test_type_aliases@@Base+0xca4>
   1429c:	ldr	r0, [pc, #176]	; 14354 <test_type_aliases@@Base+0xd3c>
   142a0:	add	r0, pc, r0
   142a4:	ldr	r1, [pc, #172]	; 14358 <test_type_aliases@@Base+0xd40>
   142a8:	add	r1, pc, r1
   142ac:	ldr	r2, [pc, #168]	; 1435c <test_type_aliases@@Base+0xd44>
   142b0:	add	r3, pc, r2
   142b4:	movw	r2, #752	; 0x2f0
   142b8:	bl	12e68 <__assert_fail@plt>
   142bc:	mov	r0, #3
   142c0:	strh	r0, [fp, #-8]
   142c4:	ldr	r0, [fp, #-4]
   142c8:	str	r0, [sp, #8]
   142cc:	bl	238a4 <main@@Base+0x4f0>
   142d0:	ldr	lr, [sp, #8]
   142d4:	sub	r0, lr, r0
   142d8:	str	r0, [sp, #12]
   142dc:	ldr	r0, [sp, #12]
   142e0:	bl	238c8 <main@@Base+0x514>
   142e4:	ldrh	lr, [fp, #-8]
   142e8:	add	lr, lr, #3
   142ec:	lsl	lr, lr, #1
   142f0:	cmp	r0, lr
   142f4:	bcc	14310 <test_type_aliases@@Base+0xcf8>
   142f8:	ldr	r0, [sp, #12]
   142fc:	ldrh	r1, [fp, #-8]
   14300:	add	r0, r0, r1, lsl #1
   14304:	add	r0, r0, #4
   14308:	bl	238c8 <main@@Base+0x514>
   1430c:	strh	r0, [fp, #-6]
   14310:	ldrh	r0, [fp, #-6]
   14314:	cmp	r0, #0
   14318:	beq	14338 <test_type_aliases@@Base+0xd20>
   1431c:	ldr	r0, [fp, #-4]
   14320:	ldrh	r1, [fp, #-6]
   14324:	add	r0, r0, r1
   14328:	bl	24880 <main@@Base+0x14cc>
   1432c:	uxth	r0, r0
   14330:	str	r0, [sp, #4]
   14334:	b	14344 <test_type_aliases@@Base+0xd2c>
   14338:	movw	r0, #0
   1433c:	str	r0, [sp, #4]
   14340:	b	14344 <test_type_aliases@@Base+0xd2c>
   14344:	ldr	r0, [sp, #4]
   14348:	uxth	r0, r0
   1434c:	mov	sp, fp
   14350:	pop	{fp, pc}
   14354:	andeq	r0, r2, r9, asr #4
   14358:	andeq	r0, r2, r7, ror #4
   1435c:	andeq	r0, r2, r7, lsl r7
   14360:	push	{fp, lr}
   14364:	mov	fp, sp
   14368:	sub	sp, sp, #24
   1436c:	str	r0, [fp, #-4]
   14370:	movw	r0, #0
   14374:	strh	r0, [fp, #-6]
   14378:	ldr	r0, [fp, #-4]
   1437c:	movw	r1, #0
   14380:	cmp	r0, r1
   14384:	beq	14390 <test_type_aliases@@Base+0xd78>
   14388:	b	1438c <test_type_aliases@@Base+0xd74>
   1438c:	b	143b0 <test_type_aliases@@Base+0xd98>
   14390:	ldr	r0, [pc, #168]	; 14440 <test_type_aliases@@Base+0xe28>
   14394:	add	r0, pc, r0
   14398:	ldr	r1, [pc, #164]	; 14444 <test_type_aliases@@Base+0xe2c>
   1439c:	add	r1, pc, r1
   143a0:	ldr	r2, [pc, #160]	; 14448 <test_type_aliases@@Base+0xe30>
   143a4:	add	r3, pc, r2
   143a8:	movw	r2, #754	; 0x2f2
   143ac:	bl	12e68 <__assert_fail@plt>
   143b0:	mov	r0, #5
   143b4:	strh	r0, [fp, #-8]
   143b8:	ldr	r0, [fp, #-4]
   143bc:	str	r0, [sp, #8]
   143c0:	bl	238a4 <main@@Base+0x4f0>
   143c4:	ldr	lr, [sp, #8]
   143c8:	sub	r0, lr, r0
   143cc:	str	r0, [sp, #12]
   143d0:	ldr	r0, [sp, #12]
   143d4:	bl	238c8 <main@@Base+0x514>
   143d8:	ldrh	lr, [fp, #-8]
   143dc:	add	lr, lr, #3
   143e0:	lsl	lr, lr, #1
   143e4:	cmp	r0, lr
   143e8:	bcc	14404 <test_type_aliases@@Base+0xdec>
   143ec:	ldr	r0, [sp, #12]
   143f0:	ldrh	r1, [fp, #-8]
   143f4:	add	r0, r0, r1, lsl #1
   143f8:	add	r0, r0, #4
   143fc:	bl	238c8 <main@@Base+0x514>
   14400:	strh	r0, [fp, #-6]
   14404:	ldrh	r0, [fp, #-6]
   14408:	cmp	r0, #0
   1440c:	beq	14428 <test_type_aliases@@Base+0xe10>
   14410:	ldr	r0, [fp, #-4]
   14414:	ldrh	r1, [fp, #-6]
   14418:	add	r0, r0, r1
   1441c:	bl	248bc <main@@Base+0x1508>
   14420:	str	r0, [sp, #4]
   14424:	b	14434 <test_type_aliases@@Base+0xe1c>
   14428:	movw	r0, #0
   1442c:	str	r0, [sp, #4]
   14430:	b	14434 <test_type_aliases@@Base+0xe1c>
   14434:	ldr	r0, [sp, #4]
   14438:	mov	sp, fp
   1443c:	pop	{fp, pc}
   14440:	andeq	r0, r2, r5, asr r1
   14444:	andeq	r0, r2, r3, ror r1
   14448:	andeq	r0, r2, pc, ror #12
   1444c:	push	{fp, lr}
   14450:	mov	fp, sp
   14454:	sub	sp, sp, #32
   14458:	str	r0, [fp, #-4]
   1445c:	movw	r0, #0
   14460:	strh	r0, [fp, #-6]
   14464:	ldr	r0, [fp, #-4]
   14468:	movw	r1, #0
   1446c:	cmp	r0, r1
   14470:	beq	1447c <test_type_aliases@@Base+0xe64>
   14474:	b	14478 <test_type_aliases@@Base+0xe60>
   14478:	b	1449c <test_type_aliases@@Base+0xe84>
   1447c:	ldr	r0, [pc, #196]	; 14548 <test_type_aliases@@Base+0xf30>
   14480:	add	r0, pc, r0
   14484:	ldr	r1, [pc, #192]	; 1454c <test_type_aliases@@Base+0xf34>
   14488:	add	r1, pc, r1
   1448c:	ldr	r2, [pc, #188]	; 14550 <test_type_aliases@@Base+0xf38>
   14490:	add	r3, pc, r2
   14494:	movw	r2, #756	; 0x2f4
   14498:	bl	12e68 <__assert_fail@plt>
   1449c:	mov	r0, #7
   144a0:	strh	r0, [fp, #-8]
   144a4:	ldr	r0, [fp, #-4]
   144a8:	str	r0, [sp, #16]
   144ac:	bl	238a4 <main@@Base+0x4f0>
   144b0:	ldr	lr, [sp, #16]
   144b4:	sub	r0, lr, r0
   144b8:	str	r0, [fp, #-12]
   144bc:	ldr	r0, [fp, #-12]
   144c0:	bl	238c8 <main@@Base+0x514>
   144c4:	ldrh	lr, [fp, #-8]
   144c8:	add	lr, lr, #3
   144cc:	lsl	lr, lr, #1
   144d0:	cmp	r0, lr
   144d4:	bcc	144f0 <test_type_aliases@@Base+0xed8>
   144d8:	ldr	r0, [fp, #-12]
   144dc:	ldrh	r1, [fp, #-8]
   144e0:	add	r0, r0, r1, lsl #1
   144e4:	add	r0, r0, #4
   144e8:	bl	238c8 <main@@Base+0x514>
   144ec:	strh	r0, [fp, #-6]
   144f0:	ldrh	r0, [fp, #-6]
   144f4:	cmp	r0, #0
   144f8:	beq	14518 <test_type_aliases@@Base+0xf00>
   144fc:	ldr	r0, [fp, #-4]
   14500:	ldrh	r1, [fp, #-6]
   14504:	add	r0, r0, r1
   14508:	bl	248f4 <main@@Base+0x1540>
   1450c:	str	r0, [sp, #12]
   14510:	str	r1, [sp, #8]
   14514:	b	1452c <test_type_aliases@@Base+0xf14>
   14518:	mov	r0, #0
   1451c:	mov	r1, r0
   14520:	str	r1, [sp, #12]
   14524:	str	r0, [sp, #8]
   14528:	b	1452c <test_type_aliases@@Base+0xf14>
   1452c:	ldr	r0, [sp, #8]
   14530:	ldr	r1, [sp, #12]
   14534:	str	r0, [sp, #4]
   14538:	mov	r0, r1
   1453c:	ldr	r1, [sp, #4]
   14540:	mov	sp, fp
   14544:	pop	{fp, pc}
   14548:	andeq	r0, r2, r9, rrx
   1454c:	andeq	r0, r2, r7, lsl #1
   14550:	andeq	r0, r2, pc, asr #11
   14554:	push	{fp, lr}
   14558:	mov	fp, sp
   1455c:	sub	sp, sp, #24
   14560:	str	r0, [fp, #-4]
   14564:	movw	r0, #0
   14568:	strh	r0, [fp, #-6]
   1456c:	ldr	r0, [fp, #-4]
   14570:	movw	r1, #0
   14574:	cmp	r0, r1
   14578:	beq	14584 <test_type_aliases@@Base+0xf6c>
   1457c:	b	14580 <test_type_aliases@@Base+0xf68>
   14580:	b	145a4 <test_type_aliases@@Base+0xf8c>
   14584:	ldr	r0, [pc, #168]	; 14634 <test_type_aliases@@Base+0x101c>
   14588:	add	r0, pc, r0
   1458c:	ldr	r1, [pc, #164]	; 14638 <test_type_aliases@@Base+0x1020>
   14590:	add	r1, pc, r1
   14594:	ldr	r2, [pc, #160]	; 1463c <test_type_aliases@@Base+0x1024>
   14598:	add	r3, pc, r2
   1459c:	movw	r2, #757	; 0x2f5
   145a0:	bl	12e68 <__assert_fail@plt>
   145a4:	mov	r0, #8
   145a8:	strh	r0, [fp, #-8]
   145ac:	ldr	r0, [fp, #-4]
   145b0:	str	r0, [sp, #8]
   145b4:	bl	238a4 <main@@Base+0x4f0>
   145b8:	ldr	lr, [sp, #8]
   145bc:	sub	r0, lr, r0
   145c0:	str	r0, [sp, #12]
   145c4:	ldr	r0, [sp, #12]
   145c8:	bl	238c8 <main@@Base+0x514>
   145cc:	ldrh	lr, [fp, #-8]
   145d0:	add	lr, lr, #3
   145d4:	lsl	lr, lr, #1
   145d8:	cmp	r0, lr
   145dc:	bcc	145f8 <test_type_aliases@@Base+0xfe0>
   145e0:	ldr	r0, [sp, #12]
   145e4:	ldrh	r1, [fp, #-8]
   145e8:	add	r0, r0, r1, lsl #1
   145ec:	add	r0, r0, #4
   145f0:	bl	238c8 <main@@Base+0x514>
   145f4:	strh	r0, [fp, #-6]
   145f8:	ldrh	r0, [fp, #-6]
   145fc:	cmp	r0, #0
   14600:	beq	1461c <test_type_aliases@@Base+0x1004>
   14604:	ldr	r0, [fp, #-4]
   14608:	ldrh	r1, [fp, #-6]
   1460c:	add	r0, r0, r1
   14610:	bl	24944 <main@@Base+0x1590>
   14614:	vstr	s0, [sp, #4]
   14618:	b	14628 <test_type_aliases@@Base+0x1010>
   1461c:	vldr	s0, [pc, #28]	; 14640 <test_type_aliases@@Base+0x1028>
   14620:	vstr	s0, [sp, #4]
   14624:	b	14628 <test_type_aliases@@Base+0x1010>
   14628:	vldr	s0, [sp, #4]
   1462c:	mov	sp, fp
   14630:	pop	{fp, pc}
   14634:	andeq	pc, r1, r1, ror #30
   14638:	andeq	pc, r1, pc, ror pc	; <UNPREDICTABLE>
   1463c:	andeq	r0, r2, r3, lsl r5
   14640:	andeq	r0, r0, r0
   14644:	nop	{0}
   14648:	push	{fp, lr}
   1464c:	mov	fp, sp
   14650:	sub	sp, sp, #24
   14654:	str	r0, [fp, #-4]
   14658:	movw	r0, #0
   1465c:	strh	r0, [fp, #-6]
   14660:	ldr	r0, [fp, #-4]
   14664:	movw	r1, #0
   14668:	cmp	r0, r1
   1466c:	beq	14678 <test_type_aliases@@Base+0x1060>
   14670:	b	14674 <test_type_aliases@@Base+0x105c>
   14674:	b	14698 <test_type_aliases@@Base+0x1080>
   14678:	ldr	r0, [pc, #184]	; 14738 <test_type_aliases@@Base+0x1120>
   1467c:	add	r0, pc, r0
   14680:	ldr	r1, [pc, #180]	; 1473c <test_type_aliases@@Base+0x1124>
   14684:	add	r1, pc, r1
   14688:	ldr	r2, [pc, #176]	; 14740 <test_type_aliases@@Base+0x1128>
   1468c:	add	r3, pc, r2
   14690:	movw	r2, #758	; 0x2f6
   14694:	bl	12e68 <__assert_fail@plt>
   14698:	mov	r0, #9
   1469c:	strh	r0, [fp, #-8]
   146a0:	ldr	r0, [fp, #-4]
   146a4:	str	r0, [sp, #8]
   146a8:	bl	238a4 <main@@Base+0x4f0>
   146ac:	ldr	lr, [sp, #8]
   146b0:	sub	r0, lr, r0
   146b4:	str	r0, [sp, #12]
   146b8:	ldr	r0, [sp, #12]
   146bc:	bl	238c8 <main@@Base+0x514>
   146c0:	ldrh	lr, [fp, #-8]
   146c4:	add	lr, lr, #3
   146c8:	lsl	lr, lr, #1
   146cc:	cmp	r0, lr
   146d0:	bcc	146ec <test_type_aliases@@Base+0x10d4>
   146d4:	ldr	r0, [sp, #12]
   146d8:	ldrh	r1, [fp, #-8]
   146dc:	add	r0, r0, r1, lsl #1
   146e0:	add	r0, r0, #4
   146e4:	bl	238c8 <main@@Base+0x514>
   146e8:	strh	r0, [fp, #-6]
   146ec:	ldrh	r0, [fp, #-6]
   146f0:	cmp	r0, #0
   146f4:	beq	14710 <test_type_aliases@@Base+0x10f8>
   146f8:	ldr	r0, [fp, #-4]
   146fc:	ldrh	r1, [fp, #-6]
   14700:	add	r0, r0, r1
   14704:	bl	2498c <main@@Base+0x15d8>
   14708:	vstr	d0, [sp]
   1470c:	b	1471c <test_type_aliases@@Base+0x1104>
   14710:	vldr	d16, [pc, #24]	; 14730 <test_type_aliases@@Base+0x1118>
   14714:	vstr	d16, [sp]
   14718:	b	1471c <test_type_aliases@@Base+0x1104>
   1471c:	vldr	d16, [sp]
   14720:	vmov.f64	d0, d16
   14724:	mov	sp, fp
   14728:	pop	{fp, pc}
   1472c:	nop	{0}
	...
   14738:	andeq	pc, r1, sp, ror #28
   1473c:	andeq	pc, r1, fp, lsl #29
   14740:	andeq	r0, r2, r8, ror #8

00014744 <test_empty_monster@@Base>:
   14744:	push	{fp, lr}
   14748:	mov	fp, sp
   1474c:	sub	sp, sp, #64	; 0x40
   14750:	str	r0, [fp, #-8]
   14754:	ldr	r0, [fp, #-8]
   14758:	bl	28b78 <flatcc_builder_reset@@Base>
   1475c:	ldr	lr, [pc, #360]	; 148cc <test_empty_monster@@Base+0x188>
   14760:	add	r1, pc, lr
   14764:	ldr	lr, [fp, #-8]
   14768:	str	r0, [fp, #-28]	; 0xffffffe4
   1476c:	mov	r0, lr
   14770:	bl	148dc <test_empty_monster@@Base+0x198>
   14774:	ldr	r1, [fp, #-8]
   14778:	str	r0, [sp, #32]
   1477c:	mov	r0, r1
   14780:	bl	14910 <test_empty_monster@@Base+0x1cc>
   14784:	ldr	r1, [pc, #316]	; 148c8 <test_empty_monster@@Base+0x184>
   14788:	add	r1, pc, r1
   1478c:	ldr	lr, [fp, #-8]
   14790:	str	r0, [sp, #28]
   14794:	mov	r0, lr
   14798:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1479c:	ldr	r1, [fp, #-8]
   147a0:	str	r0, [sp, #24]
   147a4:	mov	r0, r1
   147a8:	bl	14980 <test_empty_monster@@Base+0x23c>
   147ac:	str	r0, [fp, #-16]
   147b0:	ldr	r0, [fp, #-8]
   147b4:	ldr	r1, [fp, #-16]
   147b8:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   147bc:	ldr	r1, [fp, #-8]
   147c0:	str	r0, [sp, #20]
   147c4:	mov	r0, r1
   147c8:	sub	r1, fp, #24
   147cc:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   147d0:	ldr	r1, [pc, #232]	; 148c0 <test_empty_monster@@Base+0x17c>
   147d4:	add	r1, pc, r1
   147d8:	ldr	lr, [pc, #228]	; 148c4 <test_empty_monster@@Base+0x180>
   147dc:	ldr	lr, [pc, lr]
   147e0:	str	r0, [fp, #-20]	; 0xffffffec
   147e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   147e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   147ec:	ldr	r3, [lr]
   147f0:	str	r0, [sp, #16]
   147f4:	mov	r0, r1
   147f8:	ldr	r1, [sp, #16]
   147fc:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   14800:	ldr	r0, [fp, #-20]	; 0xffffffec
   14804:	bl	12f68 <verify_empty_monster@@Base>
   14808:	str	r0, [fp, #-12]
   1480c:	cmp	r0, #0
   14810:	beq	14818 <test_empty_monster@@Base+0xd4>
   14814:	b	148a4 <test_empty_monster@@Base+0x160>
   14818:	ldr	r0, [pc, #176]	; 148d0 <test_empty_monster@@Base+0x18c>
   1481c:	add	r2, pc, r0
   14820:	ldr	r0, [fp, #-20]	; 0xffffffec
   14824:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14828:	bl	14a18 <test_empty_monster@@Base+0x2d4>
   1482c:	str	r0, [fp, #-12]
   14830:	cmp	r0, #0
   14834:	beq	14868 <test_empty_monster@@Base+0x124>
   14838:	ldr	r0, [fp, #-12]
   1483c:	bl	2f084 <flatcc_verify_error_string@@Base>
   14840:	ldr	lr, [pc, #144]	; 148d8 <test_empty_monster@@Base+0x194>
   14844:	add	lr, pc, lr
   14848:	str	r0, [sp, #12]
   1484c:	mov	r0, lr
   14850:	ldr	r1, [sp, #12]
   14854:	bl	12d9c <printf@plt>
   14858:	mvn	r1, #0
   1485c:	str	r1, [fp, #-4]
   14860:	str	r0, [sp, #8]
   14864:	b	148b4 <test_empty_monster@@Base+0x170>
   14868:	ldr	r0, [fp, #-20]	; 0xffffffec
   1486c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14870:	sub	r1, r1, #1
   14874:	bl	14a54 <test_empty_monster@@Base+0x310>
   14878:	movw	r1, #0
   1487c:	cmp	r1, r0
   14880:	bne	148a0 <test_empty_monster@@Base+0x15c>
   14884:	ldr	r0, [pc, #72]	; 148d4 <test_empty_monster@@Base+0x190>
   14888:	add	r0, pc, r0
   1488c:	bl	12d9c <printf@plt>
   14890:	mvn	lr, #0
   14894:	str	lr, [fp, #-4]
   14898:	str	r0, [sp, #4]
   1489c:	b	148b4 <test_empty_monster@@Base+0x170>
   148a0:	b	148a4 <test_empty_monster@@Base+0x160>
   148a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   148a8:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   148ac:	ldr	r0, [fp, #-12]
   148b0:	str	r0, [fp, #-4]
   148b4:	ldr	r0, [fp, #-4]
   148b8:	mov	sp, fp
   148bc:	pop	{fp, pc}
   148c0:	andeq	sp, r1, r1, ror #11
   148c4:	andeq	r4, r3, r8, ror r8
   148c8:	andeq	sp, r1, r3, lsr #12
   148cc:	andeq	sp, r1, r4, ror r4
   148d0:			; <UNDEFINED> instruction: 0x0001d3b8
   148d4:	andeq	sp, r1, r9, ror #10
   148d8:	andeq	sp, r1, r5, lsl #11
   148dc:	push	{fp, lr}
   148e0:	mov	fp, sp
   148e4:	sub	sp, sp, #8
   148e8:	str	r0, [sp, #4]
   148ec:	str	r1, [sp]
   148f0:	ldr	r0, [sp, #4]
   148f4:	ldr	r1, [sp]
   148f8:	movw	r2, #0
   148fc:	uxth	r2, r2
   14900:	movw	r3, #0
   14904:	bl	29a3c <flatcc_builder_start_buffer@@Base>
   14908:	mov	sp, fp
   1490c:	pop	{fp, pc}
   14910:	push	{fp, lr}
   14914:	mov	fp, sp
   14918:	sub	sp, sp, #8
   1491c:	str	r0, [sp, #4]
   14920:	ldr	r0, [sp, #4]
   14924:	movw	r1, #36	; 0x24
   14928:	bl	2b170 <flatcc_builder_start_table@@Base>
   1492c:	mov	sp, fp
   14930:	pop	{fp, pc}
   14934:	push	{fp, lr}
   14938:	mov	fp, sp
   1493c:	sub	sp, sp, #16
   14940:	str	r0, [fp, #-4]
   14944:	str	r1, [sp, #8]
   14948:	ldr	r0, [fp, #-4]
   1494c:	ldr	r1, [fp, #-4]
   14950:	ldr	r2, [sp, #8]
   14954:	str	r0, [sp, #4]
   14958:	mov	r0, r1
   1495c:	mov	r1, r2
   14960:	bl	2d604 <flatcc_builder_create_string_str@@Base>
   14964:	ldr	r1, [sp, #4]
   14968:	str	r0, [sp]
   1496c:	mov	r0, r1
   14970:	ldr	r1, [sp]
   14974:	bl	192f4 <gen_monster@@Base+0xd10>
   14978:	mov	sp, fp
   1497c:	pop	{fp, pc}
   14980:	push	{fp, lr}
   14984:	mov	fp, sp
   14988:	sub	sp, sp, #8
   1498c:	ldr	r1, [pc, #76]	; 149e0 <test_empty_monster@@Base+0x29c>
   14990:	add	r1, pc, r1
   14994:	str	r0, [sp, #4]
   14998:	ldr	r0, [sp, #4]
   1499c:	movw	r2, #1
   149a0:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   149a4:	cmp	r0, #0
   149a8:	beq	149b0 <test_empty_monster@@Base+0x26c>
   149ac:	b	149d0 <test_empty_monster@@Base+0x28c>
   149b0:	ldr	r0, [pc, #44]	; 149e4 <test_empty_monster@@Base+0x2a0>
   149b4:	add	r0, pc, r0
   149b8:	ldr	r1, [pc, #40]	; 149e8 <test_empty_monster@@Base+0x2a4>
   149bc:	add	r1, pc, r1
   149c0:	ldr	r2, [pc, #36]	; 149ec <test_empty_monster@@Base+0x2a8>
   149c4:	add	r3, pc, r2
   149c8:	movw	r2, #235	; 0xeb
   149cc:	bl	12e68 <__assert_fail@plt>
   149d0:	ldr	r0, [sp, #4]
   149d4:	bl	2bde8 <flatcc_builder_end_table@@Base>
   149d8:	mov	sp, fp
   149dc:	pop	{fp, pc}
   149e0:	andeq	r1, r2, r8, ror #25
   149e4:	andeq	r0, r2, sl, lsl #3
   149e8:	andeq	pc, r1, r7, lsr #27
   149ec:	andeq	r0, r2, ip, lsl r2
   149f0:	push	{fp, lr}
   149f4:	mov	fp, sp
   149f8:	sub	sp, sp, #8
   149fc:	str	r0, [sp, #4]
   14a00:	str	r1, [sp]
   14a04:	ldr	r0, [sp, #4]
   14a08:	ldr	r1, [sp]
   14a0c:	bl	29d80 <flatcc_builder_end_buffer@@Base>
   14a10:	mov	sp, fp
   14a14:	pop	{fp, pc}
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	sub	sp, sp, #16
   14a24:	ldr	r3, [pc, #36]	; 14a50 <test_empty_monster@@Base+0x30c>
   14a28:	add	r3, pc, r3
   14a2c:	str	r0, [fp, #-4]
   14a30:	str	r1, [sp, #8]
   14a34:	str	r2, [sp, #4]
   14a38:	ldr	r0, [fp, #-4]
   14a3c:	ldr	r1, [sp, #8]
   14a40:	ldr	r2, [sp, #4]
   14a44:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   14a48:	mov	sp, fp
   14a4c:	pop	{fp, pc}
   14a50:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	sub	sp, sp, #8
   14a60:	ldr	r2, [pc, #36]	; 14a8c <test_empty_monster@@Base+0x348>
   14a64:	add	r2, pc, r2
   14a68:	ldr	r3, [pc, #32]	; 14a90 <test_empty_monster@@Base+0x34c>
   14a6c:	add	r3, pc, r3
   14a70:	str	r0, [sp, #4]
   14a74:	str	r1, [sp]
   14a78:	ldr	r0, [sp, #4]
   14a7c:	ldr	r1, [sp]
   14a80:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   14a84:	mov	sp, fp
   14a88:	pop	{fp, pc}
   14a8c:	andeq	sp, r1, r0, ror r1
   14a90:	andeq	pc, r0, r8, asr pc	; <UNPREDICTABLE>

00014a94 <test_typed_empty_monster@@Base>:
   14a94:	push	{fp, lr}
   14a98:	mov	fp, sp
   14a9c:	sub	sp, sp, #128	; 0x80
   14aa0:	str	r0, [fp, #-4]
   14aa4:	mvn	r0, #0
   14aa8:	str	r0, [fp, #-8]
   14aac:	sub	r0, fp, #24
   14ab0:	movw	r1, #0
   14ab4:	and	r1, r1, #255	; 0xff
   14ab8:	movw	r2, #4
   14abc:	bl	12e2c <memset@plt>
   14ac0:	ldr	r0, [fp, #-4]
   14ac4:	bl	28b78 <flatcc_builder_reset@@Base>
   14ac8:	ldr	r1, [pc, #828]	; 14e0c <test_typed_empty_monster@@Base+0x378>
   14acc:	add	r1, pc, r1
   14ad0:	ldr	r2, [fp, #-4]
   14ad4:	str	r0, [fp, #-28]	; 0xffffffe4
   14ad8:	mov	r0, r2
   14adc:	bl	148dc <test_empty_monster@@Base+0x198>
   14ae0:	ldr	r1, [fp, #-4]
   14ae4:	str	r0, [fp, #-32]	; 0xffffffe0
   14ae8:	mov	r0, r1
   14aec:	bl	14910 <test_empty_monster@@Base+0x1cc>
   14af0:	ldr	r1, [pc, #784]	; 14e08 <test_typed_empty_monster@@Base+0x374>
   14af4:	add	r1, pc, r1
   14af8:	ldr	r2, [fp, #-4]
   14afc:	str	r0, [fp, #-36]	; 0xffffffdc
   14b00:	mov	r0, r2
   14b04:	bl	14934 <test_empty_monster@@Base+0x1f0>
   14b08:	ldr	r1, [fp, #-4]
   14b0c:	str	r0, [fp, #-40]	; 0xffffffd8
   14b10:	mov	r0, r1
   14b14:	bl	14980 <test_empty_monster@@Base+0x23c>
   14b18:	str	r0, [fp, #-12]
   14b1c:	ldr	r0, [fp, #-4]
   14b20:	ldr	r1, [fp, #-12]
   14b24:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   14b28:	ldr	r1, [fp, #-4]
   14b2c:	str	r0, [fp, #-44]	; 0xffffffd4
   14b30:	mov	r0, r1
   14b34:	sub	r1, fp, #20
   14b38:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   14b3c:	ldr	r1, [pc, #700]	; 14e00 <test_typed_empty_monster@@Base+0x36c>
   14b40:	add	r1, pc, r1
   14b44:	ldr	r2, [pc, #696]	; 14e04 <test_typed_empty_monster@@Base+0x370>
   14b48:	ldr	r2, [pc, r2]
   14b4c:	str	r0, [fp, #-16]
   14b50:	ldr	r0, [fp, #-16]
   14b54:	ldr	lr, [fp, #-20]	; 0xffffffec
   14b58:	ldr	r3, [r2]
   14b5c:	str	r0, [fp, #-48]	; 0xffffffd0
   14b60:	mov	r0, r1
   14b64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14b68:	mov	r2, lr
   14b6c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   14b70:	ldr	r0, [fp, #-16]
   14b74:	bl	14e44 <test_typed_empty_monster@@Base+0x3b0>
   14b78:	ldr	r1, [pc, #636]	; 14dfc <test_typed_empty_monster@@Base+0x368>
   14b7c:	add	r1, pc, r1
   14b80:	str	r0, [fp, #-52]	; 0xffffffcc
   14b84:	mov	r0, r1
   14b88:	bl	14e68 <test_typed_empty_monster@@Base+0x3d4>
   14b8c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14b90:	cmp	r1, r0
   14b94:	beq	14bc0 <test_typed_empty_monster@@Base+0x12c>
   14b98:	ldr	r0, [fp, #-16]
   14b9c:	bl	14e44 <test_typed_empty_monster@@Base+0x3b0>
   14ba0:	ldr	lr, [pc, #664]	; 14e40 <test_typed_empty_monster@@Base+0x3ac>
   14ba4:	add	lr, pc, lr
   14ba8:	str	r0, [fp, #-56]	; 0xffffffc8
   14bac:	mov	r0, lr
   14bb0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14bb4:	bl	12d9c <printf@plt>
   14bb8:	str	r0, [fp, #-60]	; 0xffffffc4
   14bbc:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14bc0:	ldr	r1, [pc, #584]	; 14e10 <test_typed_empty_monster@@Base+0x37c>
   14bc4:	ldr	r0, [fp, #-16]
   14bc8:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   14bcc:	cmp	r0, #0
   14bd0:	bne	14be8 <test_typed_empty_monster@@Base+0x154>
   14bd4:	ldr	r0, [pc, #568]	; 14e14 <test_typed_empty_monster@@Base+0x380>
   14bd8:	add	r0, pc, r0
   14bdc:	bl	12d9c <printf@plt>
   14be0:	str	r0, [sp, #64]	; 0x40
   14be4:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14be8:	ldr	r1, [pc, #544]	; 14e10 <test_typed_empty_monster@@Base+0x37c>
   14bec:	ldr	r0, [fp, #-16]
   14bf0:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14c10 <test_typed_empty_monster@@Base+0x17c>
   14bfc:	ldr	r0, [pc, #532]	; 14e18 <test_typed_empty_monster@@Base+0x384>
   14c00:	add	r0, pc, r0
   14c04:	bl	12d9c <printf@plt>
   14c08:	str	r0, [sp, #60]	; 0x3c
   14c0c:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14c10:	ldr	r0, [fp, #-16]
   14c14:	bl	12f68 <verify_empty_monster@@Base>
   14c18:	cmp	r0, #0
   14c1c:	bne	14c34 <test_typed_empty_monster@@Base+0x1a0>
   14c20:	ldr	r0, [pc, #500]	; 14e1c <test_typed_empty_monster@@Base+0x388>
   14c24:	add	r0, pc, r0
   14c28:	bl	12d9c <printf@plt>
   14c2c:	str	r0, [sp, #56]	; 0x38
   14c30:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14c34:	ldr	r0, [pc, #484]	; 14e20 <test_typed_empty_monster@@Base+0x38c>
   14c38:	add	r2, pc, r0
   14c3c:	ldr	r0, [fp, #-16]
   14c40:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c44:	bl	14a18 <test_empty_monster@@Base+0x2d4>
   14c48:	str	r0, [fp, #-8]
   14c4c:	cmp	r0, #0
   14c50:	beq	14c7c <test_typed_empty_monster@@Base+0x1e8>
   14c54:	ldr	r0, [fp, #-8]
   14c58:	bl	2f084 <flatcc_verify_error_string@@Base>
   14c5c:	ldr	lr, [pc, #472]	; 14e3c <test_typed_empty_monster@@Base+0x3a8>
   14c60:	add	lr, pc, lr
   14c64:	str	r0, [sp, #52]	; 0x34
   14c68:	mov	r0, lr
   14c6c:	ldr	r1, [sp, #52]	; 0x34
   14c70:	bl	12d9c <printf@plt>
   14c74:	str	r0, [sp, #48]	; 0x30
   14c78:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14c7c:	ldr	r0, [fp, #-16]
   14c80:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c84:	bl	14f3c <test_typed_empty_monster@@Base+0x4a8>
   14c88:	str	r0, [fp, #-8]
   14c8c:	cmp	r0, #0
   14c90:	beq	14cbc <test_typed_empty_monster@@Base+0x228>
   14c94:	ldr	r0, [fp, #-8]
   14c98:	bl	2f084 <flatcc_verify_error_string@@Base>
   14c9c:	ldr	lr, [pc, #404]	; 14e38 <test_typed_empty_monster@@Base+0x3a4>
   14ca0:	add	lr, pc, lr
   14ca4:	str	r0, [sp, #44]	; 0x2c
   14ca8:	mov	r0, lr
   14cac:	ldr	r1, [sp, #44]	; 0x2c
   14cb0:	bl	12d9c <printf@plt>
   14cb4:	str	r0, [sp, #40]	; 0x28
   14cb8:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14cbc:	ldr	r2, [pc, #332]	; 14e10 <test_typed_empty_monster@@Base+0x37c>
   14cc0:	ldr	r0, [fp, #-16]
   14cc4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14cc8:	bl	14f7c <test_typed_empty_monster@@Base+0x4e8>
   14ccc:	str	r0, [fp, #-8]
   14cd0:	cmp	r0, #0
   14cd4:	beq	14d00 <test_typed_empty_monster@@Base+0x26c>
   14cd8:	ldr	r0, [fp, #-8]
   14cdc:	bl	2f084 <flatcc_verify_error_string@@Base>
   14ce0:	ldr	lr, [pc, #332]	; 14e34 <test_typed_empty_monster@@Base+0x3a0>
   14ce4:	add	lr, pc, lr
   14ce8:	str	r0, [sp, #36]	; 0x24
   14cec:	mov	r0, lr
   14cf0:	ldr	r1, [sp, #36]	; 0x24
   14cf4:	bl	12d9c <printf@plt>
   14cf8:	str	r0, [sp, #32]
   14cfc:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14d00:	ldr	r0, [pc, #284]	; 14e24 <test_typed_empty_monster@@Base+0x390>
   14d04:	add	r0, pc, r0
   14d08:	ldr	r1, [fp, #-16]
   14d0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d10:	str	r2, [sp, #28]
   14d14:	str	r1, [sp, #24]
   14d18:	bl	14e68 <test_typed_empty_monster@@Base+0x3d4>
   14d1c:	ldr	r1, [sp, #24]
   14d20:	str	r0, [sp, #20]
   14d24:	mov	r0, r1
   14d28:	ldr	r1, [sp, #28]
   14d2c:	ldr	r2, [sp, #20]
   14d30:	bl	14f7c <test_typed_empty_monster@@Base+0x4e8>
   14d34:	str	r0, [fp, #-8]
   14d38:	cmp	r0, #0
   14d3c:	beq	14d68 <test_typed_empty_monster@@Base+0x2d4>
   14d40:	ldr	r0, [fp, #-8]
   14d44:	bl	2f084 <flatcc_verify_error_string@@Base>
   14d48:	ldr	lr, [pc, #224]	; 14e30 <test_typed_empty_monster@@Base+0x39c>
   14d4c:	add	lr, pc, lr
   14d50:	str	r0, [sp, #16]
   14d54:	mov	r0, lr
   14d58:	ldr	r1, [sp, #16]
   14d5c:	bl	12d9c <printf@plt>
   14d60:	str	r0, [sp, #12]
   14d64:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14d68:	ldr	r0, [pc, #160]	; 14e10 <test_typed_empty_monster@@Base+0x37c>
   14d6c:	sub	r1, fp, #24
   14d70:	bl	14fb8 <test_typed_empty_monster@@Base+0x524>
   14d74:	sub	r2, fp, #24
   14d78:	ldr	r0, [fp, #-16]
   14d7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d80:	bl	14a18 <test_empty_monster@@Base+0x2d4>
   14d84:	str	r0, [fp, #-8]
   14d88:	cmp	r0, #0
   14d8c:	beq	14db8 <test_typed_empty_monster@@Base+0x324>
   14d90:	ldr	r0, [fp, #-8]
   14d94:	bl	2f084 <flatcc_verify_error_string@@Base>
   14d98:	ldr	lr, [pc, #140]	; 14e2c <test_typed_empty_monster@@Base+0x398>
   14d9c:	add	lr, pc, lr
   14da0:	str	r0, [sp, #8]
   14da4:	mov	r0, lr
   14da8:	ldr	r1, [sp, #8]
   14dac:	bl	12d9c <printf@plt>
   14db0:	str	r0, [sp, #4]
   14db4:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14db8:	ldr	r0, [fp, #-16]
   14dbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   14dc0:	bl	14a54 <test_empty_monster@@Base+0x310>
   14dc4:	cmp	r0, #0
   14dc8:	bne	14de0 <test_typed_empty_monster@@Base+0x34c>
   14dcc:	ldr	r0, [pc, #84]	; 14e28 <test_typed_empty_monster@@Base+0x394>
   14dd0:	add	r0, pc, r0
   14dd4:	bl	12d9c <printf@plt>
   14dd8:	str	r0, [sp]
   14ddc:	b	14de8 <test_typed_empty_monster@@Base+0x354>
   14de0:	movw	r0, #0
   14de4:	str	r0, [fp, #-8]
   14de8:	ldr	r0, [fp, #-16]
   14dec:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   14df0:	ldr	r0, [fp, #-8]
   14df4:	mov	sp, fp
   14df8:	pop	{fp, pc}
   14dfc:	andeq	sp, r1, r2, asr #5
   14e00:	andeq	sp, r1, r4, ror #5
   14e04:	andeq	r4, r3, ip, lsl #10
   14e08:			; <UNDEFINED> instruction: 0x0001d2b7
   14e0c:	andeq	sp, r1, r3, asr r3
   14e10:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   14e14:	andeq	sp, r1, pc, lsr #5
   14e18:	andeq	sp, r1, r7, lsl #5
   14e1c:	andeq	sp, r1, ip, lsl #5
   14e20:	andeq	sp, r1, r7, ror #3
   14e24:	andeq	sp, r1, sl, lsr r1
   14e28:	andeq	sp, r1, r4, asr #3
   14e2c:	andeq	sp, r1, r3, asr r1
   14e30:	andeq	sp, r1, r8, lsl #4
   14e34:	andeq	sp, r1, r9, lsr r2
   14e38:	andeq	sp, r1, pc, asr #4
   14e3c:	andeq	sp, r1, pc, lsl #5
   14e40:			; <UNDEFINED> instruction: 0x0001d2b1
   14e44:	push	{fp, lr}
   14e48:	mov	fp, sp
   14e4c:	sub	sp, sp, #8
   14e50:	str	r0, [sp, #4]
   14e54:	ldr	r0, [sp, #4]
   14e58:	add	r0, r0, #4
   14e5c:	bl	25cd0 <main@@Base+0x291c>
   14e60:	mov	sp, fp
   14e64:	pop	{fp, pc}
   14e68:	sub	sp, sp, #8
   14e6c:	ldr	r1, [pc, #104]	; 14edc <test_typed_empty_monster@@Base+0x448>
   14e70:	str	r0, [sp, #4]
   14e74:	str	r1, [sp]
   14e78:	ldr	r0, [sp, #4]
   14e7c:	ldrsb	r0, [r0]
   14e80:	cmp	r0, #0
   14e84:	beq	14ebc <test_typed_empty_monster@@Base+0x428>
   14e88:	ldr	r0, [pc, #80]	; 14ee0 <test_typed_empty_monster@@Base+0x44c>
   14e8c:	ldr	r1, [sp, #4]
   14e90:	ldrb	r1, [r1]
   14e94:	ldr	r2, [sp]
   14e98:	eor	r1, r2, r1
   14e9c:	str	r1, [sp]
   14ea0:	ldr	r1, [sp]
   14ea4:	mul	r0, r1, r0
   14ea8:	str	r0, [sp]
   14eac:	ldr	r0, [sp, #4]
   14eb0:	add	r0, r0, #1
   14eb4:	str	r0, [sp, #4]
   14eb8:	b	14e78 <test_typed_empty_monster@@Base+0x3e4>
   14ebc:	ldr	r0, [sp]
   14ec0:	cmp	r0, #0
   14ec4:	bne	14ed0 <test_typed_empty_monster@@Base+0x43c>
   14ec8:	ldr	r0, [pc, #12]	; 14edc <test_typed_empty_monster@@Base+0x448>
   14ecc:	str	r0, [sp]
   14ed0:	ldr	r0, [sp]
   14ed4:	add	sp, sp, #8
   14ed8:	bx	lr
   14edc:	tsthi	ip, r5, asr #27
   14ee0:			; <UNDEFINED> instruction: 0x01000193
   14ee4:	push	{fp, lr}
   14ee8:	mov	fp, sp
   14eec:	sub	sp, sp, #16
   14ef0:	str	r0, [fp, #-4]
   14ef4:	str	r1, [sp, #8]
   14ef8:	ldr	r0, [sp, #8]
   14efc:	cmp	r0, #0
   14f00:	movw	r0, #1
   14f04:	str	r0, [sp, #4]
   14f08:	beq	14f2c <test_typed_empty_monster@@Base+0x498>
   14f0c:	ldr	r0, [fp, #-4]
   14f10:	add	r0, r0, #4
   14f14:	bl	25cd0 <main@@Base+0x291c>
   14f18:	ldr	lr, [sp, #8]
   14f1c:	cmp	r0, lr
   14f20:	movw	r0, #0
   14f24:	moveq	r0, #1
   14f28:	str	r0, [sp, #4]
   14f2c:	ldr	r0, [sp, #4]
   14f30:	and	r0, r0, #1
   14f34:	mov	sp, fp
   14f38:	pop	{fp, pc}
   14f3c:	push	{fp, lr}
   14f40:	mov	fp, sp
   14f44:	sub	sp, sp, #8
   14f48:	ldr	r2, [pc, #36]	; 14f74 <test_typed_empty_monster@@Base+0x4e0>
   14f4c:	add	r2, pc, r2
   14f50:	ldr	r3, [pc, #32]	; 14f78 <test_typed_empty_monster@@Base+0x4e4>
   14f54:	add	r3, pc, r3
   14f58:	str	r0, [sp, #4]
   14f5c:	str	r1, [sp]
   14f60:	ldr	r0, [sp, #4]
   14f64:	ldr	r1, [sp]
   14f68:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   14f6c:	mov	sp, fp
   14f70:	pop	{fp, pc}
   14f74:	ldrdeq	ip, [r1], -r3
   14f78:	andeq	pc, r0, r0, ror sl	; <UNPREDICTABLE>
   14f7c:	push	{fp, lr}
   14f80:	mov	fp, sp
   14f84:	sub	sp, sp, #16
   14f88:	ldr	r3, [pc, #36]	; 14fb4 <test_typed_empty_monster@@Base+0x520>
   14f8c:	add	r3, pc, r3
   14f90:	str	r0, [fp, #-4]
   14f94:	str	r1, [sp, #8]
   14f98:	str	r2, [sp, #4]
   14f9c:	ldr	r0, [fp, #-4]
   14fa0:	ldr	r1, [sp, #8]
   14fa4:	ldr	r2, [sp, #4]
   14fa8:	bl	30cd0 <flatcc_verify_table_as_typed_root@@Base>
   14fac:	mov	sp, fp
   14fb0:	pop	{fp, pc}
   14fb4:	andeq	pc, r0, r8, lsr sl	; <UNPREDICTABLE>
   14fb8:	sub	sp, sp, #8
   14fbc:	str	r0, [sp, #4]
   14fc0:	str	r1, [sp]
   14fc4:	ldr	r0, [sp, #4]
   14fc8:	and	r0, r0, #255	; 0xff
   14fcc:	ldr	r1, [sp]
   14fd0:	strb	r0, [r1]
   14fd4:	ldr	r0, [sp, #4]
   14fd8:	lsr	r0, r0, #8
   14fdc:	str	r0, [sp, #4]
   14fe0:	ldr	r0, [sp, #4]
   14fe4:	and	r0, r0, #255	; 0xff
   14fe8:	ldr	r1, [sp]
   14fec:	strb	r0, [r1, #1]
   14ff0:	ldr	r0, [sp, #4]
   14ff4:	lsr	r0, r0, #8
   14ff8:	str	r0, [sp, #4]
   14ffc:	ldr	r0, [sp, #4]
   15000:	and	r0, r0, #255	; 0xff
   15004:	ldr	r1, [sp]
   15008:	strb	r0, [r1, #2]
   1500c:	ldr	r0, [sp, #4]
   15010:	lsr	r0, r0, #8
   15014:	str	r0, [sp, #4]
   15018:	ldr	r0, [sp, #4]
   1501c:	and	r0, r0, #255	; 0xff
   15020:	ldr	r1, [sp]
   15024:	strb	r0, [r1, #3]
   15028:	add	sp, sp, #8
   1502c:	bx	lr

00015030 <verify_table_with_emptystruct@@Base>:
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	sub	sp, sp, #32
   1503c:	str	r0, [fp, #-8]
   15040:	ldr	r0, [fp, #-8]
   15044:	bl	150f8 <verify_table_with_emptystruct@@Base+0xc8>
   15048:	str	r0, [fp, #-12]
   1504c:	ldr	r0, [fp, #-12]
   15050:	movw	lr, #0
   15054:	cmp	r0, lr
   15058:	bne	15078 <verify_table_with_emptystruct@@Base+0x48>
   1505c:	ldr	r0, [pc, #136]	; 150ec <verify_table_with_emptystruct@@Base+0xbc>
   15060:	add	r0, pc, r0
   15064:	bl	12d9c <printf@plt>
   15068:	mvn	lr, #0
   1506c:	str	lr, [fp, #-4]
   15070:	str	r0, [sp, #12]
   15074:	b	150e0 <verify_table_with_emptystruct@@Base+0xb0>
   15078:	ldr	r0, [fp, #-12]
   1507c:	bl	15174 <verify_table_with_emptystruct@@Base+0x144>
   15080:	str	r0, [sp, #16]
   15084:	ldr	r0, [sp, #16]
   15088:	movw	lr, #0
   1508c:	cmp	r0, lr
   15090:	bne	150b0 <verify_table_with_emptystruct@@Base+0x80>
   15094:	ldr	r0, [pc, #84]	; 150f0 <verify_table_with_emptystruct@@Base+0xc0>
   15098:	add	r0, pc, r0
   1509c:	bl	12d9c <printf@plt>
   150a0:	mvn	lr, #0
   150a4:	str	lr, [fp, #-4]
   150a8:	str	r0, [sp, #8]
   150ac:	b	150e0 <verify_table_with_emptystruct@@Base+0xb0>
   150b0:	bl	25d08 <main@@Base+0x2954>
   150b4:	cmp	r0, #0
   150b8:	beq	150d8 <verify_table_with_emptystruct@@Base+0xa8>
   150bc:	ldr	r0, [pc, #48]	; 150f4 <verify_table_with_emptystruct@@Base+0xc4>
   150c0:	add	r0, pc, r0
   150c4:	bl	12d9c <printf@plt>
   150c8:	mvn	lr, #0
   150cc:	str	lr, [fp, #-4]
   150d0:	str	r0, [sp, #4]
   150d4:	b	150e0 <verify_table_with_emptystruct@@Base+0xb0>
   150d8:	movw	r0, #0
   150dc:	str	r0, [fp, #-4]
   150e0:	ldr	r0, [fp, #-4]
   150e4:	mov	sp, fp
   150e8:	pop	{fp, pc}
   150ec:	andeq	ip, r1, lr, ror pc
   150f0:	andeq	ip, r1, ip, ror #30
   150f4:	andeq	ip, r1, r0, ror #30
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	sub	sp, sp, #16
   15104:	ldr	r1, [pc, #100]	; 15170 <verify_table_with_emptystruct@@Base+0x140>
   15108:	add	r1, pc, r1
   1510c:	str	r0, [fp, #-4]
   15110:	str	r1, [sp, #8]
   15114:	ldr	r0, [fp, #-4]
   15118:	movw	r1, #0
   1511c:	cmp	r0, r1
   15120:	beq	15138 <verify_table_with_emptystruct@@Base+0x108>
   15124:	ldr	r0, [fp, #-4]
   15128:	ldr	r1, [sp, #8]
   1512c:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15130:	cmp	r0, #0
   15134:	bne	15144 <verify_table_with_emptystruct@@Base+0x114>
   15138:	movw	r0, #0
   1513c:	str	r0, [sp, #4]
   15140:	b	15164 <verify_table_with_emptystruct@@Base+0x134>
   15144:	ldr	r0, [fp, #-4]
   15148:	ldr	r1, [fp, #-4]
   1514c:	str	r0, [sp]
   15150:	mov	r0, r1
   15154:	bl	2386c <main@@Base+0x4b8>
   15158:	ldr	r1, [sp]
   1515c:	add	r0, r1, r0
   15160:	str	r0, [sp, #4]
   15164:	ldr	r0, [sp, #4]
   15168:	mov	sp, fp
   1516c:	pop	{fp, pc}
   15170:	andeq	ip, r1, ip, asr #21
   15174:	push	{fp, lr}
   15178:	mov	fp, sp
   1517c:	sub	sp, sp, #24
   15180:	str	r0, [fp, #-8]
   15184:	movw	r0, #0
   15188:	strh	r0, [fp, #-10]
   1518c:	ldr	r0, [fp, #-8]
   15190:	movw	r1, #0
   15194:	cmp	r0, r1
   15198:	beq	151a4 <verify_table_with_emptystruct@@Base+0x174>
   1519c:	b	151a0 <verify_table_with_emptystruct@@Base+0x170>
   151a0:	b	151c4 <verify_table_with_emptystruct@@Base+0x194>
   151a4:	ldr	r0, [pc, #160]	; 1524c <verify_table_with_emptystruct@@Base+0x21c>
   151a8:	add	r0, pc, r0
   151ac:	ldr	r1, [pc, #156]	; 15250 <verify_table_with_emptystruct@@Base+0x220>
   151b0:	add	r1, pc, r1
   151b4:	ldr	r2, [pc, #152]	; 15254 <verify_table_with_emptystruct@@Base+0x224>
   151b8:	add	r3, pc, r2
   151bc:	movw	r2, #569	; 0x239
   151c0:	bl	12e68 <__assert_fail@plt>
   151c4:	mov	r0, #0
   151c8:	strh	r0, [sp, #12]
   151cc:	ldr	r0, [fp, #-8]
   151d0:	str	r0, [sp, #4]
   151d4:	bl	238a4 <main@@Base+0x4f0>
   151d8:	ldr	lr, [sp, #4]
   151dc:	sub	r0, lr, r0
   151e0:	str	r0, [sp, #8]
   151e4:	ldr	r0, [sp, #8]
   151e8:	bl	238c8 <main@@Base+0x514>
   151ec:	ldrh	lr, [sp, #12]
   151f0:	add	lr, lr, #3
   151f4:	lsl	lr, lr, #1
   151f8:	cmp	r0, lr
   151fc:	bcc	15218 <verify_table_with_emptystruct@@Base+0x1e8>
   15200:	ldr	r0, [sp, #8]
   15204:	ldrh	r1, [sp, #12]
   15208:	add	r0, r0, r1, lsl #1
   1520c:	add	r0, r0, #4
   15210:	bl	238c8 <main@@Base+0x514>
   15214:	strh	r0, [fp, #-10]
   15218:	ldrsh	r0, [fp, #-10]
   1521c:	cmp	r0, #0
   15220:	beq	15238 <verify_table_with_emptystruct@@Base+0x208>
   15224:	ldr	r0, [fp, #-8]
   15228:	ldrh	r1, [fp, #-10]
   1522c:	add	r0, r0, r1
   15230:	str	r0, [fp, #-4]
   15234:	b	15240 <verify_table_with_emptystruct@@Base+0x210>
   15238:	movw	r0, #0
   1523c:	str	r0, [fp, #-4]
   15240:	ldr	r0, [fp, #-4]
   15244:	mov	sp, fp
   15248:	pop	{fp, pc}
   1524c:	andeq	pc, r1, r1, asr #6
   15250:	andeq	pc, r1, pc, asr r3	; <UNPREDICTABLE>
   15254:	andeq	pc, r1, r9, ror sl	; <UNPREDICTABLE>

00015258 <test_table_with_emptystruct@@Base>:
   15258:	push	{fp, lr}
   1525c:	mov	fp, sp
   15260:	sub	sp, sp, #32
   15264:	str	r0, [fp, #-4]
   15268:	movw	r0, #0
   1526c:	str	r0, [fp, #-12]
   15270:	ldr	r0, [fp, #-4]
   15274:	bl	28b78 <flatcc_builder_reset@@Base>
   15278:	ldr	lr, [fp, #-4]
   1527c:	ldr	r1, [fp, #-12]
   15280:	str	r0, [sp, #8]
   15284:	mov	r0, lr
   15288:	bl	152f8 <test_table_with_emptystruct@@Base+0xa0>
   1528c:	ldr	r1, [fp, #-4]
   15290:	str	r0, [sp, #4]
   15294:	mov	r0, r1
   15298:	add	r1, sp, #12
   1529c:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   152a0:	ldr	r1, [pc, #72]	; 152f0 <test_table_with_emptystruct@@Base+0x98>
   152a4:	add	r1, pc, r1
   152a8:	ldr	lr, [pc, #68]	; 152f4 <test_table_with_emptystruct@@Base+0x9c>
   152ac:	ldr	lr, [pc, lr]
   152b0:	str	r0, [sp, #16]
   152b4:	ldr	r0, [sp, #16]
   152b8:	ldr	r2, [sp, #12]
   152bc:	ldr	r3, [lr]
   152c0:	str	r0, [sp]
   152c4:	mov	r0, r1
   152c8:	ldr	r1, [sp]
   152cc:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   152d0:	ldr	r0, [sp, #16]
   152d4:	bl	15030 <verify_table_with_emptystruct@@Base>
   152d8:	str	r0, [fp, #-8]
   152dc:	ldr	r0, [sp, #16]
   152e0:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   152e4:	ldr	r0, [fp, #-8]
   152e8:	mov	sp, fp
   152ec:	pop	{fp, pc}
   152f0:	muleq	r1, ip, sp
   152f4:	andeq	r3, r3, r8, lsr #27
   152f8:	push	{fp, lr}
   152fc:	mov	fp, sp
   15300:	sub	sp, sp, #24
   15304:	ldr	r2, [pc, #104]	; 15374 <test_table_with_emptystruct@@Base+0x11c>
   15308:	add	r2, pc, r2
   1530c:	str	r0, [fp, #-8]
   15310:	str	r1, [sp, #12]
   15314:	ldr	r0, [fp, #-8]
   15318:	mov	r1, r2
   1531c:	bl	148dc <test_empty_monster@@Base+0x198>
   15320:	cmp	r0, #0
   15324:	beq	15334 <test_table_with_emptystruct@@Base+0xdc>
   15328:	movw	r0, #0
   1532c:	str	r0, [fp, #-4]
   15330:	b	15368 <test_table_with_emptystruct@@Base+0x110>
   15334:	ldr	r0, [fp, #-8]
   15338:	ldr	r1, [fp, #-8]
   1533c:	ldr	r2, [sp, #12]
   15340:	str	r0, [sp, #8]
   15344:	mov	r0, r1
   15348:	mov	r1, r2
   1534c:	bl	25d10 <main@@Base+0x295c>
   15350:	ldr	r1, [sp, #8]
   15354:	str	r0, [sp, #4]
   15358:	mov	r0, r1
   1535c:	ldr	r1, [sp, #4]
   15360:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   15364:	str	r0, [fp, #-4]
   15368:	ldr	r0, [fp, #-4]
   1536c:	mov	sp, fp
   15370:	pop	{fp, pc}
   15374:	andeq	ip, r1, ip, asr #17

00015378 <test_typed_table_with_emptystruct@@Base>:
   15378:	push	{fp, lr}
   1537c:	mov	fp, sp
   15380:	sub	sp, sp, #96	; 0x60
   15384:	str	r0, [fp, #-8]
   15388:	movw	r0, #0
   1538c:	str	r0, [fp, #-12]
   15390:	str	r0, [fp, #-16]
   15394:	ldr	r0, [fp, #-8]
   15398:	bl	28b78 <flatcc_builder_reset@@Base>
   1539c:	ldr	lr, [fp, #-8]
   153a0:	ldr	r1, [fp, #-16]
   153a4:	str	r0, [fp, #-28]	; 0xffffffe4
   153a8:	mov	r0, lr
   153ac:	bl	15720 <test_typed_table_with_emptystruct@@Base+0x3a8>
   153b0:	ldr	r1, [fp, #-8]
   153b4:	str	r0, [fp, #-32]	; 0xffffffe0
   153b8:	mov	r0, r1
   153bc:	sub	r1, fp, #24
   153c0:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   153c4:	ldr	r1, [pc, #776]	; 156d4 <test_typed_table_with_emptystruct@@Base+0x35c>
   153c8:	add	r1, pc, r1
   153cc:	ldr	lr, [pc, #772]	; 156d8 <test_typed_table_with_emptystruct@@Base+0x360>
   153d0:	ldr	lr, [pc, lr]
   153d4:	str	r0, [fp, #-20]	; 0xffffffec
   153d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   153dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   153e0:	ldr	r3, [lr]
   153e4:	str	r0, [fp, #-36]	; 0xffffffdc
   153e8:	mov	r0, r1
   153ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   153f0:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   153f4:	ldr	r0, [pc, #724]	; 156d0 <test_typed_table_with_emptystruct@@Base+0x358>
   153f8:	add	r2, pc, r0
   153fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   15400:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15404:	bl	157a0 <test_typed_table_with_emptystruct@@Base+0x428>
   15408:	movw	r1, #0
   1540c:	cmp	r1, r0
   15410:	beq	15430 <test_typed_table_with_emptystruct@@Base+0xb8>
   15414:	ldr	r0, [pc, #768]	; 1571c <test_typed_table_with_emptystruct@@Base+0x3a4>
   15418:	add	r0, pc, r0
   1541c:	bl	12d9c <printf@plt>
   15420:	mvn	lr, #0
   15424:	str	lr, [fp, #-4]
   15428:	str	r0, [fp, #-40]	; 0xffffffd8
   1542c:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15430:	ldr	r0, [fp, #-20]	; 0xffffffec
   15434:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15438:	bl	157dc <test_typed_table_with_emptystruct@@Base+0x464>
   1543c:	movw	r1, #0
   15440:	cmp	r1, r0
   15444:	beq	15464 <test_typed_table_with_emptystruct@@Base+0xec>
   15448:	ldr	r0, [pc, #712]	; 15718 <test_typed_table_with_emptystruct@@Base+0x3a0>
   1544c:	add	r0, pc, r0
   15450:	bl	12d9c <printf@plt>
   15454:	mvn	lr, #0
   15458:	str	lr, [fp, #-4]
   1545c:	str	r0, [fp, #-44]	; 0xffffffd4
   15460:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15464:	ldr	r2, [pc, #624]	; 156dc <test_typed_table_with_emptystruct@@Base+0x364>
   15468:	ldr	r0, [fp, #-20]	; 0xffffffec
   1546c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15470:	bl	1581c <test_typed_table_with_emptystruct@@Base+0x4a4>
   15474:	movw	r1, #0
   15478:	cmp	r1, r0
   1547c:	beq	1549c <test_typed_table_with_emptystruct@@Base+0x124>
   15480:	ldr	r0, [pc, #652]	; 15714 <test_typed_table_with_emptystruct@@Base+0x39c>
   15484:	add	r0, pc, r0
   15488:	bl	12d9c <printf@plt>
   1548c:	mvn	lr, #0
   15490:	str	lr, [fp, #-4]
   15494:	str	r0, [sp, #48]	; 0x30
   15498:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   1549c:	ldr	r0, [fp, #-20]	; 0xffffffec
   154a0:	movw	r1, #0
   154a4:	cmp	r0, r1
   154a8:	bne	154c8 <test_typed_table_with_emptystruct@@Base+0x150>
   154ac:	ldr	r0, [pc, #556]	; 156e0 <test_typed_table_with_emptystruct@@Base+0x368>
   154b0:	add	r0, pc, r0
   154b4:	bl	12d9c <printf@plt>
   154b8:	mvn	lr, #0
   154bc:	str	lr, [fp, #-4]
   154c0:	str	r0, [sp, #44]	; 0x2c
   154c4:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   154c8:	ldr	r1, [pc, #524]	; 156dc <test_typed_table_with_emptystruct@@Base+0x364>
   154cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   154d0:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   154d4:	cmp	r0, #0
   154d8:	bne	154f8 <test_typed_table_with_emptystruct@@Base+0x180>
   154dc:	ldr	r0, [pc, #512]	; 156e4 <test_typed_table_with_emptystruct@@Base+0x36c>
   154e0:	add	r0, pc, r0
   154e4:	bl	12d9c <printf@plt>
   154e8:	mvn	lr, #0
   154ec:	str	lr, [fp, #-4]
   154f0:	str	r0, [sp, #40]	; 0x28
   154f4:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   154f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   154fc:	movw	r1, #0
   15500:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   15504:	cmp	r0, #0
   15508:	bne	15528 <test_typed_table_with_emptystruct@@Base+0x1b0>
   1550c:	ldr	r0, [pc, #468]	; 156e8 <test_typed_table_with_emptystruct@@Base+0x370>
   15510:	add	r0, pc, r0
   15514:	bl	12d9c <printf@plt>
   15518:	mvn	lr, #0
   1551c:	str	lr, [fp, #-4]
   15520:	str	r0, [sp, #36]	; 0x24
   15524:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15528:	ldr	r0, [fp, #-20]	; 0xffffffec
   1552c:	movw	r1, #1
   15530:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   15534:	cmp	r0, #0
   15538:	beq	15558 <test_typed_table_with_emptystruct@@Base+0x1e0>
   1553c:	ldr	r0, [pc, #460]	; 15710 <test_typed_table_with_emptystruct@@Base+0x398>
   15540:	add	r0, pc, r0
   15544:	bl	12d9c <printf@plt>
   15548:	mvn	lr, #0
   1554c:	str	lr, [fp, #-4]
   15550:	str	r0, [sp, #32]
   15554:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15558:	ldr	r0, [fp, #-20]	; 0xffffffec
   1555c:	movw	r1, #0
   15560:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15564:	cmp	r0, #0
   15568:	bne	15588 <test_typed_table_with_emptystruct@@Base+0x210>
   1556c:	ldr	r0, [pc, #376]	; 156ec <test_typed_table_with_emptystruct@@Base+0x374>
   15570:	add	r0, pc, r0
   15574:	bl	12d9c <printf@plt>
   15578:	mvn	lr, #0
   1557c:	str	lr, [fp, #-4]
   15580:	str	r0, [sp, #28]
   15584:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15588:	ldr	r0, [pc, #352]	; 156f0 <test_typed_table_with_emptystruct@@Base+0x378>
   1558c:	add	r1, pc, r0
   15590:	ldr	r0, [fp, #-20]	; 0xffffffec
   15594:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15598:	cmp	r0, #0
   1559c:	bne	155bc <test_typed_table_with_emptystruct@@Base+0x244>
   155a0:	ldr	r0, [pc, #332]	; 156f4 <test_typed_table_with_emptystruct@@Base+0x37c>
   155a4:	add	r0, pc, r0
   155a8:	bl	12d9c <printf@plt>
   155ac:	mvn	lr, #0
   155b0:	str	lr, [fp, #-4]
   155b4:	str	r0, [sp, #24]
   155b8:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   155bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   155c0:	bl	150f8 <verify_table_with_emptystruct@@Base+0xc8>
   155c4:	movw	lr, #0
   155c8:	cmp	r0, lr
   155cc:	beq	155ec <test_typed_table_with_emptystruct@@Base+0x274>
   155d0:	ldr	r0, [pc, #308]	; 1570c <test_typed_table_with_emptystruct@@Base+0x394>
   155d4:	add	r0, pc, r0
   155d8:	bl	12d9c <printf@plt>
   155dc:	mvn	lr, #0
   155e0:	str	lr, [fp, #-4]
   155e4:	str	r0, [sp, #20]
   155e8:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   155ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   155f0:	movw	r1, #1
   155f4:	bl	15904 <test_typed_table_with_emptystruct@@Base+0x58c>
   155f8:	movw	r1, #0
   155fc:	cmp	r0, r1
   15600:	beq	15620 <test_typed_table_with_emptystruct@@Base+0x2a8>
   15604:	ldr	r0, [pc, #252]	; 15708 <test_typed_table_with_emptystruct@@Base+0x390>
   15608:	add	r0, pc, r0
   1560c:	bl	12d9c <printf@plt>
   15610:	mvn	lr, #0
   15614:	str	lr, [fp, #-4]
   15618:	str	r0, [sp, #16]
   1561c:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15620:	ldr	r0, [pc, #208]	; 156f8 <test_typed_table_with_emptystruct@@Base+0x380>
   15624:	add	r1, pc, r0
   15628:	ldr	r0, [fp, #-20]	; 0xffffffec
   1562c:	bl	15974 <test_typed_table_with_emptystruct@@Base+0x5fc>
   15630:	movw	r1, #0
   15634:	cmp	r0, r1
   15638:	bne	15658 <test_typed_table_with_emptystruct@@Base+0x2e0>
   1563c:	ldr	r0, [pc, #184]	; 156fc <test_typed_table_with_emptystruct@@Base+0x384>
   15640:	add	r0, pc, r0
   15644:	bl	12d9c <printf@plt>
   15648:	mvn	lr, #0
   1564c:	str	lr, [fp, #-4]
   15650:	str	r0, [sp, #12]
   15654:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15658:	ldr	r0, [fp, #-20]	; 0xffffffec
   1565c:	bl	159e4 <test_typed_table_with_emptystruct@@Base+0x66c>
   15660:	movw	lr, #0
   15664:	cmp	r0, lr
   15668:	bne	15688 <test_typed_table_with_emptystruct@@Base+0x310>
   1566c:	ldr	r0, [pc, #140]	; 15700 <test_typed_table_with_emptystruct@@Base+0x388>
   15670:	add	r0, pc, r0
   15674:	bl	12d9c <printf@plt>
   15678:	mvn	lr, #0
   1567c:	str	lr, [fp, #-4]
   15680:	str	r0, [sp, #8]
   15684:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   15688:	ldr	r0, [fp, #-20]	; 0xffffffec
   1568c:	movw	r1, #0
   15690:	bl	15904 <test_typed_table_with_emptystruct@@Base+0x58c>
   15694:	movw	r1, #0
   15698:	cmp	r0, r1
   1569c:	bne	156bc <test_typed_table_with_emptystruct@@Base+0x344>
   156a0:	ldr	r0, [pc, #92]	; 15704 <test_typed_table_with_emptystruct@@Base+0x38c>
   156a4:	add	r0, pc, r0
   156a8:	bl	12d9c <printf@plt>
   156ac:	mvn	lr, #0
   156b0:	str	lr, [fp, #-4]
   156b4:	str	r0, [sp, #4]
   156b8:	b	156c4 <test_typed_table_with_emptystruct@@Base+0x34c>
   156bc:	ldr	r0, [fp, #-12]
   156c0:	str	r0, [fp, #-4]
   156c4:	ldr	r0, [fp, #-4]
   156c8:	mov	sp, fp
   156cc:	pop	{fp, pc}
   156d0:	andeq	ip, r1, r0, ror #24
   156d4:	andeq	ip, r1, r2, ror ip
   156d8:	andeq	r3, r3, r4, lsl #25
   156dc:	ldrhlt	r3, [sp], #118	; 0x76
   156e0:	andeq	ip, r1, r0, lsl ip
   156e4:	strdeq	ip, [r1], -r9
   156e8:	ldrdeq	ip, [r1], -sl
   156ec:			; <UNDEFINED> instruction: 0x0001cbb0
   156f0:	andeq	ip, r1, ip, asr #21
   156f4:	muleq	r1, pc, fp	; <UNPREDICTABLE>
   156f8:	andeq	ip, r1, r4, lsr sl
   156fc:	andeq	ip, r1, r3, ror fp
   15700:	andeq	ip, r1, ip, ror fp
   15704:	andeq	ip, r1, lr, asr fp
   15708:	andeq	ip, r1, r5, lsl #23
   1570c:	muleq	r1, sl, fp
   15710:			; <UNDEFINED> instruction: 0x0001cbbc
   15714:	andeq	ip, r1, r6, lsl ip
   15718:	andeq	ip, r1, r1, lsr ip
   1571c:	andeq	ip, r1, r5, asr #24
   15720:	push	{fp, lr}
   15724:	mov	fp, sp
   15728:	sub	sp, sp, #24
   1572c:	ldr	r2, [pc, #104]	; 1579c <test_typed_table_with_emptystruct@@Base+0x424>
   15730:	add	r2, pc, r2
   15734:	str	r0, [fp, #-8]
   15738:	str	r1, [sp, #12]
   1573c:	ldr	r0, [fp, #-8]
   15740:	mov	r1, r2
   15744:	bl	148dc <test_empty_monster@@Base+0x198>
   15748:	cmp	r0, #0
   1574c:	beq	1575c <test_typed_table_with_emptystruct@@Base+0x3e4>
   15750:	movw	r0, #0
   15754:	str	r0, [fp, #-4]
   15758:	b	15790 <test_typed_table_with_emptystruct@@Base+0x418>
   1575c:	ldr	r0, [fp, #-8]
   15760:	ldr	r1, [fp, #-8]
   15764:	ldr	r2, [sp, #12]
   15768:	str	r0, [sp, #8]
   1576c:	mov	r0, r1
   15770:	mov	r1, r2
   15774:	bl	25d10 <main@@Base+0x295c>
   15778:	ldr	r1, [sp, #8]
   1577c:	str	r0, [sp, #4]
   15780:	mov	r0, r1
   15784:	ldr	r1, [sp, #4]
   15788:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   1578c:	str	r0, [fp, #-4]
   15790:	ldr	r0, [fp, #-4]
   15794:	mov	sp, fp
   15798:	pop	{fp, pc}
   1579c:	andeq	ip, r1, r8, lsr #18
   157a0:	push	{fp, lr}
   157a4:	mov	fp, sp
   157a8:	sub	sp, sp, #16
   157ac:	ldr	r3, [pc, #36]	; 157d8 <test_typed_table_with_emptystruct@@Base+0x460>
   157b0:	add	r3, pc, r3
   157b4:	str	r0, [fp, #-4]
   157b8:	str	r1, [sp, #8]
   157bc:	str	r2, [sp, #4]
   157c0:	ldr	r0, [fp, #-4]
   157c4:	ldr	r1, [sp, #8]
   157c8:	ldr	r2, [sp, #4]
   157cc:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   157d0:	mov	sp, fp
   157d4:	pop	{fp, pc}
   157d8:	strdeq	r0, [r1], -r4
   157dc:	push	{fp, lr}
   157e0:	mov	fp, sp
   157e4:	sub	sp, sp, #8
   157e8:	ldr	r2, [pc, #36]	; 15814 <test_typed_table_with_emptystruct@@Base+0x49c>
   157ec:	add	r2, pc, r2
   157f0:	ldr	r3, [pc, #32]	; 15818 <test_typed_table_with_emptystruct@@Base+0x4a0>
   157f4:	add	r3, pc, r3
   157f8:	str	r0, [sp, #4]
   157fc:	str	r1, [sp]
   15800:	ldr	r0, [sp, #4]
   15804:	ldr	r1, [sp]
   15808:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   1580c:	mov	sp, fp
   15810:	pop	{fp, pc}
   15814:	andeq	ip, r1, ip, ror #16
   15818:			; <UNDEFINED> instruction: 0x000106b0
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	sub	sp, sp, #16
   15828:	ldr	r3, [pc, #36]	; 15854 <test_typed_table_with_emptystruct@@Base+0x4dc>
   1582c:	add	r3, pc, r3
   15830:	str	r0, [fp, #-4]
   15834:	str	r1, [sp, #8]
   15838:	str	r2, [sp, #4]
   1583c:	ldr	r0, [fp, #-4]
   15840:	ldr	r1, [sp, #8]
   15844:	ldr	r2, [sp, #4]
   15848:	bl	30cd0 <flatcc_verify_table_as_typed_root@@Base>
   1584c:	mov	sp, fp
   15850:	pop	{fp, pc}
   15854:	andeq	r0, r1, r8, ror r6
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	sub	sp, sp, #32
   15864:	str	r0, [fp, #-8]
   15868:	str	r1, [fp, #-12]
   1586c:	movw	r0, #0
   15870:	str	r0, [sp, #12]
   15874:	ldr	r1, [fp, #-12]
   15878:	cmp	r1, r0
   1587c:	bne	1588c <test_typed_table_with_emptystruct@@Base+0x514>
   15880:	movw	r0, #1
   15884:	str	r0, [fp, #-4]
   15888:	b	158f8 <test_typed_table_with_emptystruct@@Base+0x580>
   1588c:	add	r0, sp, #12
   15890:	ldr	r1, [fp, #-12]
   15894:	movw	r2, #4
   15898:	bl	12e38 <strncpy@plt>
   1589c:	ldr	r1, [sp, #12]
   158a0:	str	r0, [sp, #8]
   158a4:	mov	r0, r1
   158a8:	bl	25f04 <main@@Base+0x2b50>
   158ac:	str	r0, [sp, #12]
   158b0:	ldr	r0, [fp, #-8]
   158b4:	add	r0, r0, #4
   158b8:	bl	25cd0 <main@@Base+0x291c>
   158bc:	str	r0, [sp, #16]
   158c0:	ldr	r0, [sp, #12]
   158c4:	cmp	r0, #0
   158c8:	movw	r0, #1
   158cc:	str	r0, [sp, #4]
   158d0:	beq	158ec <test_typed_table_with_emptystruct@@Base+0x574>
   158d4:	ldr	r0, [sp, #16]
   158d8:	ldr	r1, [sp, #12]
   158dc:	cmp	r0, r1
   158e0:	movw	r0, #0
   158e4:	moveq	r0, #1
   158e8:	str	r0, [sp, #4]
   158ec:	ldr	r0, [sp, #4]
   158f0:	and	r0, r0, #1
   158f4:	str	r0, [fp, #-4]
   158f8:	ldr	r0, [fp, #-4]
   158fc:	mov	sp, fp
   15900:	pop	{fp, pc}
   15904:	push	{fp, lr}
   15908:	mov	fp, sp
   1590c:	sub	sp, sp, #16
   15910:	str	r0, [fp, #-4]
   15914:	str	r1, [sp, #8]
   15918:	ldr	r0, [fp, #-4]
   1591c:	movw	r1, #0
   15920:	cmp	r0, r1
   15924:	beq	1593c <test_typed_table_with_emptystruct@@Base+0x5c4>
   15928:	ldr	r0, [fp, #-4]
   1592c:	ldr	r1, [sp, #8]
   15930:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   15934:	cmp	r0, #0
   15938:	bne	15948 <test_typed_table_with_emptystruct@@Base+0x5d0>
   1593c:	movw	r0, #0
   15940:	str	r0, [sp, #4]
   15944:	b	15968 <test_typed_table_with_emptystruct@@Base+0x5f0>
   15948:	ldr	r0, [fp, #-4]
   1594c:	ldr	r1, [fp, #-4]
   15950:	str	r0, [sp]
   15954:	mov	r0, r1
   15958:	bl	2386c <main@@Base+0x4b8>
   1595c:	ldr	r1, [sp]
   15960:	add	r0, r1, r0
   15964:	str	r0, [sp, #4]
   15968:	ldr	r0, [sp, #4]
   1596c:	mov	sp, fp
   15970:	pop	{fp, pc}
   15974:	push	{fp, lr}
   15978:	mov	fp, sp
   1597c:	sub	sp, sp, #16
   15980:	str	r0, [fp, #-4]
   15984:	str	r1, [sp, #8]
   15988:	ldr	r0, [fp, #-4]
   1598c:	movw	r1, #0
   15990:	cmp	r0, r1
   15994:	beq	159ac <test_typed_table_with_emptystruct@@Base+0x634>
   15998:	ldr	r0, [fp, #-4]
   1599c:	ldr	r1, [sp, #8]
   159a0:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   159a4:	cmp	r0, #0
   159a8:	bne	159b8 <test_typed_table_with_emptystruct@@Base+0x640>
   159ac:	movw	r0, #0
   159b0:	str	r0, [sp, #4]
   159b4:	b	159d8 <test_typed_table_with_emptystruct@@Base+0x660>
   159b8:	ldr	r0, [fp, #-4]
   159bc:	ldr	r1, [fp, #-4]
   159c0:	str	r0, [sp]
   159c4:	mov	r0, r1
   159c8:	bl	2386c <main@@Base+0x4b8>
   159cc:	ldr	r1, [sp]
   159d0:	add	r0, r1, r0
   159d4:	str	r0, [sp, #4]
   159d8:	ldr	r0, [sp, #4]
   159dc:	mov	sp, fp
   159e0:	pop	{fp, pc}
   159e4:	push	{fp, lr}
   159e8:	mov	fp, sp
   159ec:	sub	sp, sp, #16
   159f0:	str	r0, [fp, #-4]
   159f4:	ldr	r0, [fp, #-4]
   159f8:	movw	r1, #0
   159fc:	cmp	r0, r1
   15a00:	beq	15a18 <test_typed_table_with_emptystruct@@Base+0x6a0>
   15a04:	ldr	r1, [pc, #68]	; 15a50 <test_typed_table_with_emptystruct@@Base+0x6d8>
   15a08:	ldr	r0, [fp, #-4]
   15a0c:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   15a10:	cmp	r0, #0
   15a14:	bne	15a24 <test_typed_table_with_emptystruct@@Base+0x6ac>
   15a18:	movw	r0, #0
   15a1c:	str	r0, [sp, #8]
   15a20:	b	15a44 <test_typed_table_with_emptystruct@@Base+0x6cc>
   15a24:	ldr	r0, [fp, #-4]
   15a28:	ldr	r1, [fp, #-4]
   15a2c:	str	r0, [sp, #4]
   15a30:	mov	r0, r1
   15a34:	bl	2386c <main@@Base+0x4b8>
   15a38:	ldr	r1, [sp, #4]
   15a3c:	add	r0, r1, r0
   15a40:	str	r0, [sp, #8]
   15a44:	ldr	r0, [sp, #8]
   15a48:	mov	sp, fp
   15a4c:	pop	{fp, pc}
   15a50:	ldrhlt	r3, [sp], #118	; 0x76

00015a54 <verify_monster@@Base>:
   15a54:	push	{r4, r5, fp, lr}
   15a58:	add	fp, sp, #8
   15a5c:	sub	sp, sp, #432	; 0x1b0
   15a60:	bfc	sp, #0, #4
   15a64:	ldr	r1, [pc, #4044]	; 16a38 <verify_monster@@Base+0xfe4>
   15a68:	add	r1, pc, r1
   15a6c:	ldr	r2, [pc, #4040]	; 16a3c <verify_monster@@Base+0xfe8>
   15a70:	add	r2, pc, r2
   15a74:	str	r0, [sp, #424]	; 0x1a8
   15a78:	add	r0, sp, #328	; 0x148
   15a7c:	str	r1, [sp, #272]	; 0x110
   15a80:	mov	r1, r2
   15a84:	movw	r2, #20
   15a88:	bl	12db4 <memcpy@plt>
   15a8c:	ldr	r0, [sp, #272]	; 0x110
   15a90:	ldr	r1, [r0]
   15a94:	str	r1, [sp, #292]	; 0x124
   15a98:	ldr	r1, [r0, #4]
   15a9c:	str	r1, [sp, #296]	; 0x128
   15aa0:	ldr	r1, [r0, #8]
   15aa4:	str	r1, [sp, #300]	; 0x12c
   15aa8:	ldr	r1, [r0, #12]
   15aac:	str	r1, [sp, #304]	; 0x130
   15ab0:	ldr	r0, [sp, #424]	; 0x1a8
   15ab4:	movw	r1, #0
   15ab8:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15abc:	cmp	r0, #0
   15ac0:	bne	15ae0 <verify_monster@@Base+0x8c>
   15ac4:	ldr	r0, [pc, #4068]	; 16ab0 <verify_monster@@Base+0x105c>
   15ac8:	add	r0, pc, r0
   15acc:	bl	12d9c <printf@plt>
   15ad0:	mvn	lr, #0
   15ad4:	str	lr, [sp, #428]	; 0x1ac
   15ad8:	str	r0, [sp, #268]	; 0x10c
   15adc:	b	16aa0 <verify_monster@@Base+0x104c>
   15ae0:	ldr	r0, [pc, #4044]	; 16ab4 <verify_monster@@Base+0x1060>
   15ae4:	add	r1, pc, r0
   15ae8:	ldr	r0, [sp, #424]	; 0x1a8
   15aec:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15af0:	cmp	r0, #0
   15af4:	bne	15b14 <verify_monster@@Base+0xc0>
   15af8:	ldr	r0, [pc, #4024]	; 16ab8 <verify_monster@@Base+0x1064>
   15afc:	add	r0, pc, r0
   15b00:	bl	12d9c <printf@plt>
   15b04:	mvn	lr, #0
   15b08:	str	lr, [sp, #428]	; 0x1ac
   15b0c:	str	r0, [sp, #264]	; 0x108
   15b10:	b	16aa0 <verify_monster@@Base+0x104c>
   15b14:	ldr	r0, [pc, #4000]	; 16abc <verify_monster@@Base+0x1068>
   15b18:	add	r1, pc, r0
   15b1c:	ldr	r0, [sp, #424]	; 0x1a8
   15b20:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15b24:	cmp	r0, #0
   15b28:	bne	15b48 <verify_monster@@Base+0xf4>
   15b2c:	ldr	r0, [pc, #3980]	; 16ac0 <verify_monster@@Base+0x106c>
   15b30:	add	r0, pc, r0
   15b34:	bl	12d9c <printf@plt>
   15b38:	mvn	lr, #0
   15b3c:	str	lr, [sp, #428]	; 0x1ac
   15b40:	str	r0, [sp, #260]	; 0x104
   15b44:	b	16aa0 <verify_monster@@Base+0x104c>
   15b48:	ldr	r0, [pc, #3956]	; 16ac4 <verify_monster@@Base+0x1070>
   15b4c:	add	r1, pc, r0
   15b50:	ldr	r0, [sp, #424]	; 0x1a8
   15b54:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15b58:	cmp	r0, #0
   15b5c:	beq	15b7c <verify_monster@@Base+0x128>
   15b60:	ldr	r0, [pc, #3908]	; 16aac <verify_monster@@Base+0x1058>
   15b64:	add	r0, pc, r0
   15b68:	bl	12d9c <printf@plt>
   15b6c:	mvn	lr, #0
   15b70:	str	lr, [sp, #428]	; 0x1ac
   15b74:	str	r0, [sp, #256]	; 0x100
   15b78:	b	16aa0 <verify_monster@@Base+0x104c>
   15b7c:	ldr	r0, [pc, #3908]	; 16ac8 <verify_monster@@Base+0x1074>
   15b80:	add	r1, pc, r0
   15b84:	ldr	r0, [sp, #424]	; 0x1a8
   15b88:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   15b8c:	cmp	r0, #0
   15b90:	bne	15bb0 <verify_monster@@Base+0x15c>
   15b94:	ldr	r0, [pc, #3888]	; 16acc <verify_monster@@Base+0x1078>
   15b98:	add	r0, pc, r0
   15b9c:	bl	12d9c <printf@plt>
   15ba0:	mvn	lr, #0
   15ba4:	str	lr, [sp, #428]	; 0x1ac
   15ba8:	str	r0, [sp, #252]	; 0xfc
   15bac:	b	16aa0 <verify_monster@@Base+0x104c>
   15bb0:	ldr	r0, [sp, #424]	; 0x1a8
   15bb4:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   15bb8:	str	r0, [sp, #420]	; 0x1a4
   15bbc:	movw	lr, #0
   15bc0:	cmp	r0, lr
   15bc4:	bne	15be4 <verify_monster@@Base+0x190>
   15bc8:	ldr	r0, [pc, #3840]	; 16ad0 <verify_monster@@Base+0x107c>
   15bcc:	add	r0, pc, r0
   15bd0:	bl	12d9c <printf@plt>
   15bd4:	mvn	lr, #0
   15bd8:	str	lr, [sp, #428]	; 0x1ac
   15bdc:	str	r0, [sp, #248]	; 0xf8
   15be0:	b	16aa0 <verify_monster@@Base+0x104c>
   15be4:	ldr	r0, [sp, #420]	; 0x1a4
   15be8:	bl	13294 <verify_empty_monster@@Base+0x32c>
   15bec:	sxth	r0, r0
   15bf0:	cmp	r0, #80	; 0x50
   15bf4:	beq	15c14 <verify_monster@@Base+0x1c0>
   15bf8:	ldr	r0, [pc, #4028]	; 16bbc <verify_monster@@Base+0x1168>
   15bfc:	add	r0, pc, r0
   15c00:	bl	12d9c <printf@plt>
   15c04:	mvn	lr, #0
   15c08:	str	lr, [sp, #428]	; 0x1ac
   15c0c:	str	r0, [sp, #244]	; 0xf4
   15c10:	b	16aa0 <verify_monster@@Base+0x104c>
   15c14:	ldr	r0, [sp, #420]	; 0x1a4
   15c18:	bl	13520 <verify_empty_monster@@Base+0x5b8>
   15c1c:	str	r0, [sp, #392]	; 0x188
   15c20:	movw	lr, #0
   15c24:	cmp	r0, lr
   15c28:	bne	15c48 <verify_monster@@Base+0x1f4>
   15c2c:	ldr	r0, [pc, #3744]	; 16ad4 <verify_monster@@Base+0x1080>
   15c30:	add	r0, pc, r0
   15c34:	bl	12d9c <printf@plt>
   15c38:	mvn	lr, #0
   15c3c:	str	lr, [sp, #428]	; 0x1ac
   15c40:	str	r0, [sp, #240]	; 0xf0
   15c44:	b	16aa0 <verify_monster@@Base+0x104c>
   15c48:	ldr	r0, [sp, #392]	; 0x188
   15c4c:	and	r0, r0, #15
   15c50:	cmp	r0, #0
   15c54:	beq	15c68 <verify_monster@@Base+0x214>
   15c58:	ldr	r0, [pc, #3704]	; 16ad8 <verify_monster@@Base+0x1084>
   15c5c:	add	r0, pc, r0
   15c60:	bl	12d9c <printf@plt>
   15c64:	str	r0, [sp, #236]	; 0xec
   15c68:	ldr	r0, [sp, #392]	; 0x188
   15c6c:	bl	16bfc <verify_monster@@Base+0x11a8>
   15c70:	vldr	s2, [pc, #1004]	; 16064 <verify_monster@@Base+0x610>
   15c74:	vcmp.f32	s0, s2
   15c78:	vmrs	APSR_nzcv, fpscr
   15c7c:	beq	15c9c <verify_monster@@Base+0x248>
   15c80:	ldr	r0, [pc, #3888]	; 16bb8 <verify_monster@@Base+0x1164>
   15c84:	add	r0, pc, r0
   15c88:	bl	12d9c <printf@plt>
   15c8c:	mvn	lr, #0
   15c90:	str	lr, [sp, #428]	; 0x1ac
   15c94:	str	r0, [sp, #232]	; 0xe8
   15c98:	b	16aa0 <verify_monster@@Base+0x104c>
   15c9c:	ldr	r0, [sp, #392]	; 0x188
   15ca0:	vldr	s0, [r0]
   15ca4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15ca8:	vcmp.f32	s0, s2
   15cac:	vmrs	APSR_nzcv, fpscr
   15cb0:	bne	15ce4 <verify_monster@@Base+0x290>
   15cb4:	ldr	r0, [sp, #392]	; 0x188
   15cb8:	vldr	s0, [r0, #4]
   15cbc:	vmov.f32	s2, #0	; 0x40000000  2.0
   15cc0:	vcmp.f32	s0, s2
   15cc4:	vmrs	APSR_nzcv, fpscr
   15cc8:	bne	15ce4 <verify_monster@@Base+0x290>
   15ccc:	vldr	s0, [pc, #912]	; 16064 <verify_monster@@Base+0x610>
   15cd0:	ldr	r0, [sp, #392]	; 0x188
   15cd4:	vldr	s2, [r0, #8]
   15cd8:	vcmp.f32	s2, s0
   15cdc:	vmrs	APSR_nzcv, fpscr
   15ce0:	beq	15d00 <verify_monster@@Base+0x2ac>
   15ce4:	ldr	r0, [pc, #3784]	; 16bb4 <verify_monster@@Base+0x1160>
   15ce8:	add	r0, pc, r0
   15cec:	bl	12d9c <printf@plt>
   15cf0:	mvn	lr, #0
   15cf4:	str	lr, [sp, #428]	; 0x1ac
   15cf8:	str	r0, [sp, #228]	; 0xe4
   15cfc:	b	16aa0 <verify_monster@@Base+0x104c>
   15d00:	add	r0, sp, #352	; 0x160
   15d04:	bl	16c4c <verify_monster@@Base+0x11f8>
   15d08:	ldr	r1, [sp, #392]	; 0x188
   15d0c:	add	lr, sp, #352	; 0x160
   15d10:	str	r0, [sp, #224]	; 0xe0
   15d14:	mov	r0, lr
   15d18:	bl	16c90 <verify_monster@@Base+0x123c>
   15d1c:	vldr	s0, [sp, #352]	; 0x160
   15d20:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15d24:	vcmp.f32	s0, s2
   15d28:	vmrs	APSR_nzcv, fpscr
   15d2c:	str	r0, [sp, #220]	; 0xdc
   15d30:	bne	15d5c <verify_monster@@Base+0x308>
   15d34:	vldr	s0, [sp, #356]	; 0x164
   15d38:	vmov.f32	s2, #0	; 0x40000000  2.0
   15d3c:	vcmp.f32	s0, s2
   15d40:	vmrs	APSR_nzcv, fpscr
   15d44:	bne	15d5c <verify_monster@@Base+0x308>
   15d48:	vldr	s0, [pc, #788]	; 16064 <verify_monster@@Base+0x610>
   15d4c:	vldr	s2, [sp, #360]	; 0x168
   15d50:	vcmp.f32	s2, s0
   15d54:	vmrs	APSR_nzcv, fpscr
   15d58:	beq	15d78 <verify_monster@@Base+0x324>
   15d5c:	ldr	r0, [pc, #3660]	; 16bb0 <verify_monster@@Base+0x115c>
   15d60:	add	r0, pc, r0
   15d64:	bl	12d9c <printf@plt>
   15d68:	mvn	lr, #0
   15d6c:	str	lr, [sp, #428]	; 0x1ac
   15d70:	str	r0, [sp, #216]	; 0xd8
   15d74:	b	16aa0 <verify_monster@@Base+0x104c>
   15d78:	ldr	r0, [sp, #392]	; 0x188
   15d7c:	vldr	d16, [r0, #16]
   15d80:	vcmp.f64	d16, #0.0
   15d84:	vmrs	APSR_nzcv, fpscr
   15d88:	bne	15dbc <verify_monster@@Base+0x368>
   15d8c:	ldr	r0, [sp, #392]	; 0x188
   15d90:	vldr	d16, [r0, #16]
   15d94:	vcmp.f64	d16, #0.0
   15d98:	vmrs	APSR_nzcv, fpscr
   15d9c:	bne	15dbc <verify_monster@@Base+0x368>
   15da0:	ldr	r0, [sp, #392]	; 0x188
   15da4:	add	r0, r0, #26
   15da8:	ldr	r0, [r0]
   15dac:	cmp	r0, #0
   15db0:	movwne	r0, #1
   15db4:	cmp	r0, #0
   15db8:	beq	15dd8 <verify_monster@@Base+0x384>
   15dbc:	ldr	r0, [pc, #3560]	; 16bac <verify_monster@@Base+0x1158>
   15dc0:	add	r0, pc, r0
   15dc4:	bl	12d9c <printf@plt>
   15dc8:	mvn	lr, #0
   15dcc:	str	lr, [sp, #428]	; 0x1ac
   15dd0:	str	r0, [sp, #212]	; 0xd4
   15dd4:	b	16aa0 <verify_monster@@Base+0x104c>
   15dd8:	ldr	r0, [sp, #420]	; 0x1a4
   15ddc:	bl	16d54 <verify_monster@@Base+0x1300>
   15de0:	str	r0, [sp, #388]	; 0x184
   15de4:	ldr	r0, [sp, #388]	; 0x184
   15de8:	movw	lr, #0
   15dec:	cmp	r0, lr
   15df0:	beq	15e0c <verify_monster@@Base+0x3b8>
   15df4:	ldr	r0, [sp, #388]	; 0x184
   15df8:	ldr	r1, [pc, #3520]	; 16bc0 <verify_monster@@Base+0x116c>
   15dfc:	add	r1, pc, r1
   15e00:	bl	12d90 <strcmp@plt>
   15e04:	cmp	r0, #0
   15e08:	beq	15e28 <verify_monster@@Base+0x3d4>
   15e0c:	ldr	r0, [pc, #3476]	; 16ba8 <verify_monster@@Base+0x1154>
   15e10:	add	r0, pc, r0
   15e14:	bl	12d9c <printf@plt>
   15e18:	mvn	lr, #0
   15e1c:	str	lr, [sp, #428]	; 0x1ac
   15e20:	str	r0, [sp, #208]	; 0xd0
   15e24:	b	16aa0 <verify_monster@@Base+0x104c>
   15e28:	ldr	r0, [sp, #420]	; 0x1a4
   15e2c:	bl	16d54 <verify_monster@@Base+0x1300>
   15e30:	str	r0, [sp, #384]	; 0x180
   15e34:	ldr	r0, [sp, #388]	; 0x184
   15e38:	bl	16e74 <verify_monster@@Base+0x1420>
   15e3c:	cmp	r0, #9
   15e40:	bne	15e54 <verify_monster@@Base+0x400>
   15e44:	ldr	r0, [sp, #384]	; 0x180
   15e48:	bl	16e74 <verify_monster@@Base+0x1420>
   15e4c:	cmp	r0, #9
   15e50:	beq	15e70 <verify_monster@@Base+0x41c>
   15e54:	ldr	r0, [pc, #3400]	; 16ba4 <verify_monster@@Base+0x1150>
   15e58:	add	r0, pc, r0
   15e5c:	bl	12d9c <printf@plt>
   15e60:	mvn	lr, #0
   15e64:	str	lr, [sp, #428]	; 0x1ac
   15e68:	str	r0, [sp, #204]	; 0xcc
   15e6c:	b	16aa0 <verify_monster@@Base+0x104c>
   15e70:	ldr	r0, [sp, #420]	; 0x1a4
   15e74:	bl	16ec4 <verify_monster@@Base+0x1470>
   15e78:	sxtb	r0, r0
   15e7c:	cmp	r0, #2
   15e80:	beq	15ea0 <verify_monster@@Base+0x44c>
   15e84:	ldr	r0, [pc, #3348]	; 16ba0 <verify_monster@@Base+0x114c>
   15e88:	add	r0, pc, r0
   15e8c:	bl	12d9c <printf@plt>
   15e90:	mvn	lr, #0
   15e94:	str	lr, [sp, #428]	; 0x1ac
   15e98:	str	r0, [sp, #200]	; 0xc8
   15e9c:	b	16aa0 <verify_monster@@Base+0x104c>
   15ea0:	movw	r0, #2
   15ea4:	sxtb	r0, r0
   15ea8:	bl	16fb8 <verify_monster@@Base+0x1564>
   15eac:	ldr	r1, [pc, #3344]	; 16bc4 <verify_monster@@Base+0x1170>
   15eb0:	add	r1, pc, r1
   15eb4:	bl	12d90 <strcmp@plt>
   15eb8:	cmp	r0, #0
   15ebc:	beq	15edc <verify_monster@@Base+0x488>
   15ec0:	ldr	r0, [pc, #3284]	; 16b9c <verify_monster@@Base+0x1148>
   15ec4:	add	r0, pc, r0
   15ec8:	bl	12d9c <printf@plt>
   15ecc:	mvn	lr, #0
   15ed0:	str	lr, [sp, #428]	; 0x1ac
   15ed4:	str	r0, [sp, #196]	; 0xc4
   15ed8:	b	16aa0 <verify_monster@@Base+0x104c>
   15edc:	movw	r0, #2
   15ee0:	sxtb	r0, r0
   15ee4:	bl	1704c <verify_monster@@Base+0x15f8>
   15ee8:	cmp	r0, #0
   15eec:	bne	15f0c <verify_monster@@Base+0x4b8>
   15ef0:	ldr	r0, [pc, #3044]	; 16adc <verify_monster@@Base+0x1088>
   15ef4:	add	r0, pc, r0
   15ef8:	bl	12d9c <printf@plt>
   15efc:	mvn	lr, #0
   15f00:	str	lr, [sp, #428]	; 0x1ac
   15f04:	str	r0, [sp, #192]	; 0xc0
   15f08:	b	16aa0 <verify_monster@@Base+0x104c>
   15f0c:	movw	r0, #1
   15f10:	sxtb	r0, r0
   15f14:	bl	1704c <verify_monster@@Base+0x15f8>
   15f18:	cmp	r0, #0
   15f1c:	bne	15f3c <verify_monster@@Base+0x4e8>
   15f20:	ldr	r0, [pc, #3000]	; 16ae0 <verify_monster@@Base+0x108c>
   15f24:	add	r0, pc, r0
   15f28:	bl	12d9c <printf@plt>
   15f2c:	mvn	lr, #0
   15f30:	str	lr, [sp, #428]	; 0x1ac
   15f34:	str	r0, [sp, #188]	; 0xbc
   15f38:	b	16aa0 <verify_monster@@Base+0x104c>
   15f3c:	movw	r0, #4
   15f40:	sxtb	r0, r0
   15f44:	bl	1704c <verify_monster@@Base+0x15f8>
   15f48:	cmp	r0, #0
   15f4c:	beq	15f6c <verify_monster@@Base+0x518>
   15f50:	ldr	r0, [pc, #3136]	; 16b98 <verify_monster@@Base+0x1144>
   15f54:	add	r0, pc, r0
   15f58:	bl	12d9c <printf@plt>
   15f5c:	mvn	lr, #0
   15f60:	str	lr, [sp, #428]	; 0x1ac
   15f64:	str	r0, [sp, #184]	; 0xb8
   15f68:	b	16aa0 <verify_monster@@Base+0x104c>
   15f6c:	movw	r0, #8
   15f70:	sxtb	r0, r0
   15f74:	bl	1704c <verify_monster@@Base+0x15f8>
   15f78:	cmp	r0, #0
   15f7c:	bne	15f9c <verify_monster@@Base+0x548>
   15f80:	ldr	r0, [pc, #2908]	; 16ae4 <verify_monster@@Base+0x1090>
   15f84:	add	r0, pc, r0
   15f88:	bl	12d9c <printf@plt>
   15f8c:	mvn	lr, #0
   15f90:	str	lr, [sp, #428]	; 0x1ac
   15f94:	str	r0, [sp, #180]	; 0xb4
   15f98:	b	16aa0 <verify_monster@@Base+0x104c>
   15f9c:	movw	r0, #9
   15fa0:	sxtb	r0, r0
   15fa4:	bl	1704c <verify_monster@@Base+0x15f8>
   15fa8:	cmp	r0, #0
   15fac:	beq	15fcc <verify_monster@@Base+0x578>
   15fb0:	ldr	r0, [pc, #3036]	; 16b94 <verify_monster@@Base+0x1140>
   15fb4:	add	r0, pc, r0
   15fb8:	bl	12d9c <printf@plt>
   15fbc:	mvn	lr, #0
   15fc0:	str	lr, [sp, #428]	; 0x1ac
   15fc4:	str	r0, [sp, #176]	; 0xb0
   15fc8:	b	16aa0 <verify_monster@@Base+0x104c>
   15fcc:	movw	r0, #1
   15fd0:	and	r0, r0, #255	; 0xff
   15fd4:	bl	170c0 <verify_monster@@Base+0x166c>
   15fd8:	cmp	r0, #0
   15fdc:	bne	15ffc <verify_monster@@Base+0x5a8>
   15fe0:	ldr	r0, [pc, #2816]	; 16ae8 <verify_monster@@Base+0x1094>
   15fe4:	add	r0, pc, r0
   15fe8:	bl	12d9c <printf@plt>
   15fec:	mvn	lr, #0
   15ff0:	str	lr, [sp, #428]	; 0x1ac
   15ff4:	str	r0, [sp, #172]	; 0xac
   15ff8:	b	16aa0 <verify_monster@@Base+0x104c>
   15ffc:	movw	r0, #42	; 0x2a
   16000:	and	r0, r0, #255	; 0xff
   16004:	bl	170c0 <verify_monster@@Base+0x166c>
   16008:	cmp	r0, #0
   1600c:	beq	1602c <verify_monster@@Base+0x5d8>
   16010:	ldr	r0, [pc, #2936]	; 16b90 <verify_monster@@Base+0x113c>
   16014:	add	r0, pc, r0
   16018:	bl	12d9c <printf@plt>
   1601c:	mvn	lr, #0
   16020:	str	lr, [sp, #428]	; 0x1ac
   16024:	str	r0, [sp, #168]	; 0xa8
   16028:	b	16aa0 <verify_monster@@Base+0x104c>
   1602c:	ldr	r0, [sp, #420]	; 0x1a4
   16030:	bl	17150 <verify_monster@@Base+0x16fc>
   16034:	str	r0, [sp, #288]	; 0x120
   16038:	ldr	r0, [sp, #288]	; 0x120
   1603c:	bl	17258 <verify_monster@@Base+0x1804>
   16040:	cmp	r0, #10
   16044:	beq	16068 <verify_monster@@Base+0x614>
   16048:	ldr	r0, [pc, #2876]	; 16b8c <verify_monster@@Base+0x1138>
   1604c:	add	r0, pc, r0
   16050:	bl	12d9c <printf@plt>
   16054:	mvn	lr, #0
   16058:	str	lr, [sp, #428]	; 0x1ac
   1605c:	str	r0, [sp, #164]	; 0xa4
   16060:	b	16aa0 <verify_monster@@Base+0x104c>
   16064:	subgt	ip, ip, sp, asr #25
   16068:	movw	r0, #0
   1606c:	str	r0, [sp, #284]	; 0x11c
   16070:	ldr	r0, [sp, #284]	; 0x11c
   16074:	ldr	r1, [sp, #288]	; 0x120
   16078:	str	r0, [sp, #160]	; 0xa0
   1607c:	mov	r0, r1
   16080:	bl	17258 <verify_monster@@Base+0x1804>
   16084:	ldr	r1, [sp, #160]	; 0xa0
   16088:	cmp	r1, r0
   1608c:	bcs	160e0 <verify_monster@@Base+0x68c>
   16090:	ldr	r0, [sp, #288]	; 0x120
   16094:	ldr	r1, [sp, #284]	; 0x11c
   16098:	bl	17278 <verify_monster@@Base+0x1824>
   1609c:	and	r0, r0, #255	; 0xff
   160a0:	ldr	r1, [sp, #284]	; 0x11c
   160a4:	cmp	r0, r1
   160a8:	beq	160cc <verify_monster@@Base+0x678>
   160ac:	ldr	r0, [pc, #2772]	; 16b88 <verify_monster@@Base+0x1134>
   160b0:	add	r0, pc, r0
   160b4:	ldr	r1, [sp, #284]	; 0x11c
   160b8:	bl	12d9c <printf@plt>
   160bc:	mvn	r1, #0
   160c0:	str	r1, [sp, #428]	; 0x1ac
   160c4:	str	r0, [sp, #156]	; 0x9c
   160c8:	b	16aa0 <verify_monster@@Base+0x104c>
   160cc:	b	160d0 <verify_monster@@Base+0x67c>
   160d0:	ldr	r0, [sp, #284]	; 0x11c
   160d4:	add	r0, r0, #1
   160d8:	str	r0, [sp, #284]	; 0x11c
   160dc:	b	16070 <verify_monster@@Base+0x61c>
   160e0:	ldr	r0, [sp, #420]	; 0x1a4
   160e4:	bl	172f0 <verify_monster@@Base+0x189c>
   160e8:	sxth	r0, r0
   160ec:	cmp	r0, #150	; 0x96
   160f0:	beq	16110 <verify_monster@@Base+0x6bc>
   160f4:	ldr	r0, [pc, #2696]	; 16b84 <verify_monster@@Base+0x1130>
   160f8:	add	r0, pc, r0
   160fc:	bl	12d9c <printf@plt>
   16100:	mvn	lr, #0
   16104:	str	lr, [sp, #428]	; 0x1ac
   16108:	str	r0, [sp, #152]	; 0x98
   1610c:	b	16aa0 <verify_monster@@Base+0x104c>
   16110:	ldr	r0, [sp, #420]	; 0x1a4
   16114:	bl	173e4 <verify_monster@@Base+0x1990>
   16118:	cmp	r0, #0
   1611c:	beq	1613c <verify_monster@@Base+0x6e8>
   16120:	ldr	r0, [pc, #2648]	; 16b80 <verify_monster@@Base+0x112c>
   16124:	add	r0, pc, r0
   16128:	bl	12d9c <printf@plt>
   1612c:	mvn	lr, #0
   16130:	str	lr, [sp, #428]	; 0x1ac
   16134:	str	r0, [sp, #148]	; 0x94
   16138:	b	16aa0 <verify_monster@@Base+0x104c>
   1613c:	ldr	r0, [sp, #420]	; 0x1a4
   16140:	bl	13388 <verify_empty_monster@@Base+0x420>
   16144:	cmp	r0, #0
   16148:	bne	16168 <verify_monster@@Base+0x714>
   1614c:	ldr	r0, [pc, #2456]	; 16aec <verify_monster@@Base+0x1098>
   16150:	add	r0, pc, r0
   16154:	bl	12d9c <printf@plt>
   16158:	mvn	lr, #0
   1615c:	str	lr, [sp, #428]	; 0x1ac
   16160:	str	r0, [sp, #144]	; 0x90
   16164:	b	16aa0 <verify_monster@@Base+0x104c>
   16168:	ldr	r0, [sp, #420]	; 0x1a4
   1616c:	bl	13454 <verify_empty_monster@@Base+0x4ec>
   16170:	cmp	r0, #0
   16174:	bne	16194 <verify_monster@@Base+0x740>
   16178:	ldr	r0, [pc, #2416]	; 16af0 <verify_monster@@Base+0x109c>
   1617c:	add	r0, pc, r0
   16180:	bl	12d9c <printf@plt>
   16184:	mvn	lr, #0
   16188:	str	lr, [sp, #428]	; 0x1ac
   1618c:	str	r0, [sp, #140]	; 0x8c
   16190:	b	16aa0 <verify_monster@@Base+0x104c>
   16194:	ldr	r0, [sp, #420]	; 0x1a4
   16198:	bl	174b0 <verify_monster@@Base+0x1a5c>
   1619c:	str	r0, [sp, #348]	; 0x15c
   161a0:	ldr	r0, [sp, #348]	; 0x15c
   161a4:	bl	175b8 <verify_monster@@Base+0x1b64>
   161a8:	cmp	r0, #5
   161ac:	beq	161cc <verify_monster@@Base+0x778>
   161b0:	ldr	r0, [pc, #2500]	; 16b7c <verify_monster@@Base+0x1128>
   161b4:	add	r0, pc, r0
   161b8:	bl	12d9c <printf@plt>
   161bc:	mvn	lr, #0
   161c0:	str	lr, [sp, #428]	; 0x1ac
   161c4:	str	r0, [sp, #136]	; 0x88
   161c8:	b	16aa0 <verify_monster@@Base+0x104c>
   161cc:	movw	r0, #0
   161d0:	str	r0, [sp, #284]	; 0x11c
   161d4:	ldr	r0, [sp, #284]	; 0x11c
   161d8:	cmp	r0, #5
   161dc:	bcs	162a4 <verify_monster@@Base+0x850>
   161e0:	ldr	r0, [sp, #348]	; 0x15c
   161e4:	ldr	r1, [sp, #284]	; 0x11c
   161e8:	bl	17608 <verify_monster@@Base+0x1bb4>
   161ec:	str	r0, [sp, #324]	; 0x144
   161f0:	ldr	r0, [sp, #284]	; 0x11c
   161f4:	add	r1, sp, #328	; 0x148
   161f8:	add	r0, r1, r0, lsl #2
   161fc:	ldrsh	r0, [r0]
   16200:	ldr	r1, [sp, #324]	; 0x144
   16204:	str	r0, [sp, #132]	; 0x84
   16208:	mov	r0, r1
   1620c:	bl	17678 <verify_monster@@Base+0x1c24>
   16210:	sxth	r0, r0
   16214:	ldr	r1, [sp, #132]	; 0x84
   16218:	cmp	r1, r0
   1621c:	beq	16240 <verify_monster@@Base+0x7ec>
   16220:	ldr	r0, [pc, #2384]	; 16b78 <verify_monster@@Base+0x1124>
   16224:	add	r0, pc, r0
   16228:	ldr	r1, [sp, #284]	; 0x11c
   1622c:	bl	12d9c <printf@plt>
   16230:	mvn	r1, #0
   16234:	str	r1, [sp, #428]	; 0x1ac
   16238:	str	r0, [sp, #128]	; 0x80
   1623c:	b	16aa0 <verify_monster@@Base+0x104c>
   16240:	ldr	r0, [sp, #284]	; 0x11c
   16244:	add	r1, sp, #328	; 0x148
   16248:	add	r0, r1, r0, lsl #2
   1624c:	ldrsb	r0, [r0, #2]
   16250:	ldr	r1, [sp, #324]	; 0x144
   16254:	str	r0, [sp, #124]	; 0x7c
   16258:	mov	r0, r1
   1625c:	bl	176c8 <verify_monster@@Base+0x1c74>
   16260:	sxtb	r0, r0
   16264:	ldr	r1, [sp, #124]	; 0x7c
   16268:	cmp	r1, r0
   1626c:	beq	16290 <verify_monster@@Base+0x83c>
   16270:	ldr	r0, [pc, #2300]	; 16b74 <verify_monster@@Base+0x1120>
   16274:	add	r0, pc, r0
   16278:	ldr	r1, [sp, #284]	; 0x11c
   1627c:	bl	12d9c <printf@plt>
   16280:	mvn	r1, #0
   16284:	str	r1, [sp, #428]	; 0x1ac
   16288:	str	r0, [sp, #120]	; 0x78
   1628c:	b	16aa0 <verify_monster@@Base+0x104c>
   16290:	b	16294 <verify_monster@@Base+0x840>
   16294:	ldr	r0, [sp, #284]	; 0x11c
   16298:	add	r0, r0, #1
   1629c:	str	r0, [sp, #284]	; 0x11c
   162a0:	b	161d4 <verify_monster@@Base+0x780>
   162a4:	ldr	r0, [sp, #420]	; 0x1a4
   162a8:	bl	1771c <verify_monster@@Base+0x1cc8>
   162ac:	str	r0, [sp, #408]	; 0x198
   162b0:	ldr	r0, [sp, #408]	; 0x198
   162b4:	bl	17824 <verify_monster@@Base+0x1dd0>
   162b8:	cmp	r0, #8
   162bc:	beq	162dc <verify_monster@@Base+0x888>
   162c0:	ldr	r0, [pc, #2216]	; 16b70 <verify_monster@@Base+0x111c>
   162c4:	add	r0, pc, r0
   162c8:	bl	12d9c <printf@plt>
   162cc:	mvn	lr, #0
   162d0:	str	lr, [sp, #428]	; 0x1ac
   162d4:	str	r0, [sp, #116]	; 0x74
   162d8:	b	16aa0 <verify_monster@@Base+0x104c>
   162dc:	ldr	r0, [sp, #408]	; 0x198
   162e0:	movw	r1, #5
   162e4:	bl	17874 <verify_monster@@Base+0x1e20>
   162e8:	str	r0, [sp, #416]	; 0x1a0
   162ec:	ldr	r0, [sp, #416]	; 0x1a0
   162f0:	movw	r1, #0
   162f4:	cmp	r0, r1
   162f8:	beq	16300 <verify_monster@@Base+0x8ac>
   162fc:	b	16320 <verify_monster@@Base+0x8cc>
   16300:	ldr	r0, [pc, #2028]	; 16af4 <verify_monster@@Base+0x10a0>
   16304:	add	r0, pc, r0
   16308:	ldr	r1, [pc, #2024]	; 16af8 <verify_monster@@Base+0x10a4>
   1630c:	add	r1, pc, r1
   16310:	ldr	r2, [pc, #2020]	; 16afc <verify_monster@@Base+0x10a8>
   16314:	add	r3, pc, r2
   16318:	movw	r2, #662	; 0x296
   1631c:	bl	12e68 <__assert_fail@plt>
   16320:	ldr	r0, [sp, #416]	; 0x1a0
   16324:	bl	16d54 <verify_monster@@Base+0x1300>
   16328:	str	r0, [sp, #388]	; 0x184
   1632c:	ldr	r0, [sp, #388]	; 0x184
   16330:	ldr	r1, [pc, #2192]	; 16bc8 <verify_monster@@Base+0x1174>
   16334:	add	r1, pc, r1
   16338:	bl	12d90 <strcmp@plt>
   1633c:	cmp	r0, #0
   16340:	beq	16360 <verify_monster@@Base+0x90c>
   16344:	ldr	r0, [pc, #2080]	; 16b6c <verify_monster@@Base+0x1118>
   16348:	add	r0, pc, r0
   1634c:	bl	12d9c <printf@plt>
   16350:	mvn	lr, #0
   16354:	str	lr, [sp, #428]	; 0x1ac
   16358:	str	r0, [sp, #112]	; 0x70
   1635c:	b	16aa0 <verify_monster@@Base+0x104c>
   16360:	ldr	r0, [sp, #408]	; 0x198
   16364:	movw	r1, #1
   16368:	bl	17874 <verify_monster@@Base+0x1e20>
   1636c:	str	r0, [sp, #412]	; 0x19c
   16370:	ldr	r0, [sp, #412]	; 0x19c
   16374:	ldr	r1, [sp, #416]	; 0x1a0
   16378:	cmp	r0, r1
   1637c:	beq	1639c <verify_monster@@Base+0x948>
   16380:	ldr	r0, [pc, #2016]	; 16b68 <verify_monster@@Base+0x1114>
   16384:	add	r0, pc, r0
   16388:	bl	12d9c <printf@plt>
   1638c:	mvn	lr, #0
   16390:	str	lr, [sp, #428]	; 0x1ac
   16394:	str	r0, [sp, #108]	; 0x6c
   16398:	b	16aa0 <verify_monster@@Base+0x104c>
   1639c:	ldr	r0, [sp, #412]	; 0x19c
   163a0:	bl	16d54 <verify_monster@@Base+0x1300>
   163a4:	str	r0, [sp, #388]	; 0x184
   163a8:	ldr	r0, [sp, #388]	; 0x184
   163ac:	ldr	r1, [pc, #2072]	; 16bcc <verify_monster@@Base+0x1178>
   163b0:	add	r1, pc, r1
   163b4:	bl	12d90 <strcmp@plt>
   163b8:	cmp	r0, #0
   163bc:	beq	163e0 <verify_monster@@Base+0x98c>
   163c0:	ldr	r0, [pc, #1948]	; 16b64 <verify_monster@@Base+0x1110>
   163c4:	add	r0, pc, r0
   163c8:	ldr	r1, [sp, #388]	; 0x184
   163cc:	bl	12d9c <printf@plt>
   163d0:	mvn	r1, #0
   163d4:	str	r1, [sp, #428]	; 0x1ac
   163d8:	str	r0, [sp, #104]	; 0x68
   163dc:	b	16aa0 <verify_monster@@Base+0x104c>
   163e0:	ldr	r0, [sp, #408]	; 0x198
   163e4:	movw	r1, #2
   163e8:	bl	17874 <verify_monster@@Base+0x1e20>
   163ec:	str	r0, [sp, #416]	; 0x1a0
   163f0:	ldr	r0, [sp, #416]	; 0x1a0
   163f4:	bl	16d54 <verify_monster@@Base+0x1300>
   163f8:	str	r0, [sp, #388]	; 0x184
   163fc:	ldr	r0, [sp, #388]	; 0x184
   16400:	ldr	r1, [pc, #1992]	; 16bd0 <verify_monster@@Base+0x117c>
   16404:	add	r1, pc, r1
   16408:	bl	12d90 <strcmp@plt>
   1640c:	cmp	r0, #0
   16410:	beq	16434 <verify_monster@@Base+0x9e0>
   16414:	ldr	r0, [pc, #1860]	; 16b60 <verify_monster@@Base+0x110c>
   16418:	add	r0, pc, r0
   1641c:	ldr	r1, [sp, #388]	; 0x184
   16420:	bl	12d9c <printf@plt>
   16424:	mvn	r1, #0
   16428:	str	r1, [sp, #428]	; 0x1ac
   1642c:	str	r0, [sp, #100]	; 0x64
   16430:	b	16aa0 <verify_monster@@Base+0x104c>
   16434:	ldr	r0, [sp, #408]	; 0x198
   16438:	movw	r1, #0
   1643c:	bl	17874 <verify_monster@@Base+0x1e20>
   16440:	str	r0, [sp, #416]	; 0x1a0
   16444:	ldr	r0, [sp, #416]	; 0x1a0
   16448:	bl	16d54 <verify_monster@@Base+0x1300>
   1644c:	str	r0, [sp, #388]	; 0x184
   16450:	ldr	r0, [sp, #388]	; 0x184
   16454:	ldr	r1, [pc, #1912]	; 16bd4 <verify_monster@@Base+0x1180>
   16458:	add	r1, pc, r1
   1645c:	bl	12d90 <strcmp@plt>
   16460:	cmp	r0, #0
   16464:	beq	16488 <verify_monster@@Base+0xa34>
   16468:	ldr	r0, [pc, #1772]	; 16b5c <verify_monster@@Base+0x1108>
   1646c:	add	r0, pc, r0
   16470:	ldr	r1, [sp, #388]	; 0x184
   16474:	bl	12d9c <printf@plt>
   16478:	mvn	r1, #0
   1647c:	str	r1, [sp, #428]	; 0x1ac
   16480:	str	r0, [sp, #96]	; 0x60
   16484:	b	16aa0 <verify_monster@@Base+0x104c>
   16488:	ldr	r0, [sp, #408]	; 0x198
   1648c:	movw	r1, #3
   16490:	bl	17874 <verify_monster@@Base+0x1e20>
   16494:	str	r0, [sp, #416]	; 0x1a0
   16498:	ldr	r0, [sp, #416]	; 0x1a0
   1649c:	bl	16d54 <verify_monster@@Base+0x1300>
   164a0:	str	r0, [sp, #388]	; 0x184
   164a4:	ldr	r0, [sp, #388]	; 0x184
   164a8:	ldr	r1, [pc, #1832]	; 16bd8 <verify_monster@@Base+0x1184>
   164ac:	add	r1, pc, r1
   164b0:	bl	12d90 <strcmp@plt>
   164b4:	cmp	r0, #0
   164b8:	beq	164dc <verify_monster@@Base+0xa88>
   164bc:	ldr	r0, [pc, #1684]	; 16b58 <verify_monster@@Base+0x1104>
   164c0:	add	r0, pc, r0
   164c4:	ldr	r1, [sp, #388]	; 0x184
   164c8:	bl	12d9c <printf@plt>
   164cc:	mvn	r1, #0
   164d0:	str	r1, [sp, #428]	; 0x1ac
   164d4:	str	r0, [sp, #92]	; 0x5c
   164d8:	b	16aa0 <verify_monster@@Base+0x104c>
   164dc:	ldr	r0, [sp, #408]	; 0x198
   164e0:	movw	r1, #4
   164e4:	bl	17874 <verify_monster@@Base+0x1e20>
   164e8:	str	r0, [sp, #416]	; 0x1a0
   164ec:	ldr	r0, [sp, #416]	; 0x1a0
   164f0:	bl	16d54 <verify_monster@@Base+0x1300>
   164f4:	str	r0, [sp, #388]	; 0x184
   164f8:	ldr	r0, [sp, #388]	; 0x184
   164fc:	ldr	r1, [pc, #1752]	; 16bdc <verify_monster@@Base+0x1188>
   16500:	add	r1, pc, r1
   16504:	bl	12d90 <strcmp@plt>
   16508:	cmp	r0, #0
   1650c:	beq	16530 <verify_monster@@Base+0xadc>
   16510:	ldr	r0, [pc, #1596]	; 16b54 <verify_monster@@Base+0x1100>
   16514:	add	r0, pc, r0
   16518:	ldr	r1, [sp, #388]	; 0x184
   1651c:	bl	12d9c <printf@plt>
   16520:	mvn	r1, #0
   16524:	str	r1, [sp, #428]	; 0x1ac
   16528:	str	r0, [sp, #88]	; 0x58
   1652c:	b	16aa0 <verify_monster@@Base+0x104c>
   16530:	ldr	r0, [sp, #408]	; 0x198
   16534:	movw	r1, #6
   16538:	bl	17874 <verify_monster@@Base+0x1e20>
   1653c:	str	r0, [sp, #416]	; 0x1a0
   16540:	ldr	r0, [sp, #416]	; 0x1a0
   16544:	bl	16d54 <verify_monster@@Base+0x1300>
   16548:	str	r0, [sp, #388]	; 0x184
   1654c:	ldr	r0, [sp, #388]	; 0x184
   16550:	ldr	r1, [pc, #1672]	; 16be0 <verify_monster@@Base+0x118c>
   16554:	add	r1, pc, r1
   16558:	bl	12d90 <strcmp@plt>
   1655c:	cmp	r0, #0
   16560:	beq	16584 <verify_monster@@Base+0xb30>
   16564:	ldr	r0, [pc, #1508]	; 16b50 <verify_monster@@Base+0x10fc>
   16568:	add	r0, pc, r0
   1656c:	ldr	r1, [sp, #388]	; 0x184
   16570:	bl	12d9c <printf@plt>
   16574:	mvn	r1, #0
   16578:	str	r1, [sp, #428]	; 0x1ac
   1657c:	str	r0, [sp, #84]	; 0x54
   16580:	b	16aa0 <verify_monster@@Base+0x104c>
   16584:	ldr	r0, [sp, #408]	; 0x198
   16588:	movw	r1, #7
   1658c:	bl	17874 <verify_monster@@Base+0x1e20>
   16590:	str	r0, [sp, #416]	; 0x1a0
   16594:	ldr	r0, [sp, #416]	; 0x1a0
   16598:	bl	16d54 <verify_monster@@Base+0x1300>
   1659c:	str	r0, [sp, #388]	; 0x184
   165a0:	ldr	r0, [sp, #388]	; 0x184
   165a4:	ldr	r1, [pc, #1592]	; 16be4 <verify_monster@@Base+0x1190>
   165a8:	add	r1, pc, r1
   165ac:	bl	12d90 <strcmp@plt>
   165b0:	cmp	r0, #0
   165b4:	beq	165d8 <verify_monster@@Base+0xb84>
   165b8:	ldr	r0, [pc, #1420]	; 16b4c <verify_monster@@Base+0x10f8>
   165bc:	add	r0, pc, r0
   165c0:	ldr	r1, [sp, #388]	; 0x184
   165c4:	bl	12d9c <printf@plt>
   165c8:	mvn	r1, #0
   165cc:	str	r1, [sp, #428]	; 0x1ac
   165d0:	str	r0, [sp, #80]	; 0x50
   165d4:	b	16aa0 <verify_monster@@Base+0x104c>
   165d8:	ldr	r0, [sp, #420]	; 0x1a4
   165dc:	bl	17904 <verify_monster@@Base+0x1eb0>
   165e0:	str	r0, [sp, #320]	; 0x140
   165e4:	ldr	r0, [sp, #320]	; 0x140
   165e8:	bl	17a0c <verify_monster@@Base+0x1fb8>
   165ec:	cmp	r0, #3
   165f0:	beq	16610 <verify_monster@@Base+0xbbc>
   165f4:	ldr	r0, [pc, #1356]	; 16b48 <verify_monster@@Base+0x10f4>
   165f8:	add	r0, pc, r0
   165fc:	bl	12d9c <printf@plt>
   16600:	mvn	lr, #0
   16604:	str	lr, [sp, #428]	; 0x1ac
   16608:	str	r0, [sp, #76]	; 0x4c
   1660c:	b	16aa0 <verify_monster@@Base+0x104c>
   16610:	ldr	r0, [sp, #320]	; 0x140
   16614:	movw	r1, #0
   16618:	bl	17a5c <verify_monster@@Base+0x2008>
   1661c:	ldr	r1, [pc, #1476]	; 16be8 <verify_monster@@Base+0x1194>
   16620:	add	r1, pc, r1
   16624:	bl	12d90 <strcmp@plt>
   16628:	cmp	r0, #0
   1662c:	beq	1664c <verify_monster@@Base+0xbf8>
   16630:	ldr	r0, [pc, #1292]	; 16b44 <verify_monster@@Base+0x10f0>
   16634:	add	r0, pc, r0
   16638:	bl	12d9c <printf@plt>
   1663c:	mvn	lr, #0
   16640:	str	lr, [sp, #428]	; 0x1ac
   16644:	str	r0, [sp, #72]	; 0x48
   16648:	b	16aa0 <verify_monster@@Base+0x104c>
   1664c:	ldr	r0, [sp, #320]	; 0x140
   16650:	movw	r1, #1
   16654:	bl	17a5c <verify_monster@@Base+0x2008>
   16658:	str	r0, [sp, #316]	; 0x13c
   1665c:	ldr	r0, [sp, #316]	; 0x13c
   16660:	bl	16e74 <verify_monster@@Base+0x1420>
   16664:	cmp	r0, #2
   16668:	beq	16688 <verify_monster@@Base+0xc34>
   1666c:	ldr	r0, [pc, #1228]	; 16b40 <verify_monster@@Base+0x10ec>
   16670:	add	r0, pc, r0
   16674:	bl	12d9c <printf@plt>
   16678:	mvn	lr, #0
   1667c:	str	lr, [sp, #428]	; 0x1ac
   16680:	str	r0, [sp, #68]	; 0x44
   16684:	b	16aa0 <verify_monster@@Base+0x104c>
   16688:	ldr	r0, [sp, #316]	; 0x13c
   1668c:	ldrh	r0, [r0]
   16690:	sub	r1, r0, #44	; 0x2c
   16694:	cmp	r0, #44	; 0x2c
   16698:	movwne	r1, #1
   1669c:	cmp	r1, #0
   166a0:	beq	166c0 <verify_monster@@Base+0xc6c>
   166a4:	ldr	r0, [pc, #1168]	; 16b3c <verify_monster@@Base+0x10e8>
   166a8:	add	r0, pc, r0
   166ac:	bl	12d9c <printf@plt>
   166b0:	mvn	lr, #0
   166b4:	str	lr, [sp, #428]	; 0x1ac
   166b8:	str	r0, [sp, #64]	; 0x40
   166bc:	b	16aa0 <verify_monster@@Base+0x104c>
   166c0:	ldr	r0, [sp, #320]	; 0x140
   166c4:	movw	r1, #2
   166c8:	bl	17a5c <verify_monster@@Base+0x2008>
   166cc:	ldr	r1, [pc, #1304]	; 16bec <verify_monster@@Base+0x1198>
   166d0:	add	r1, pc, r1
   166d4:	bl	12d90 <strcmp@plt>
   166d8:	cmp	r0, #0
   166dc:	beq	166fc <verify_monster@@Base+0xca8>
   166e0:	ldr	r0, [pc, #1104]	; 16b38 <verify_monster@@Base+0x10e4>
   166e4:	add	r0, pc, r0
   166e8:	bl	12d9c <printf@plt>
   166ec:	mvn	lr, #0
   166f0:	str	lr, [sp, #428]	; 0x1ac
   166f4:	str	r0, [sp, #60]	; 0x3c
   166f8:	b	16aa0 <verify_monster@@Base+0x104c>
   166fc:	ldr	r0, [sp, #420]	; 0x1a4
   16700:	bl	17af0 <verify_monster@@Base+0x209c>
   16704:	cmp	r0, #0
   16708:	bne	16728 <verify_monster@@Base+0xcd4>
   1670c:	ldr	r0, [pc, #1004]	; 16b00 <verify_monster@@Base+0x10ac>
   16710:	add	r0, pc, r0
   16714:	bl	12d9c <printf@plt>
   16718:	mvn	lr, #0
   1671c:	str	lr, [sp, #428]	; 0x1ac
   16720:	str	r0, [sp, #56]	; 0x38
   16724:	b	16aa0 <verify_monster@@Base+0x104c>
   16728:	ldr	r0, [sp, #420]	; 0x1a4
   1672c:	bl	17bbc <verify_monster@@Base+0x2168>
   16730:	str	r0, [sp, #312]	; 0x138
   16734:	ldr	r0, [sp, #312]	; 0x138
   16738:	bl	17cc4 <verify_monster@@Base+0x2270>
   1673c:	cmp	r0, #4
   16740:	beq	16760 <verify_monster@@Base+0xd0c>
   16744:	ldr	r0, [pc, #1000]	; 16b34 <verify_monster@@Base+0x10e0>
   16748:	add	r0, pc, r0
   1674c:	bl	12d9c <printf@plt>
   16750:	mvn	lr, #0
   16754:	str	lr, [sp, #428]	; 0x1ac
   16758:	str	r0, [sp, #52]	; 0x34
   1675c:	b	16aa0 <verify_monster@@Base+0x104c>
   16760:	movw	r0, #0
   16764:	str	r0, [sp, #284]	; 0x11c
   16768:	ldr	r0, [sp, #284]	; 0x11c
   1676c:	cmp	r0, #4
   16770:	bcs	167cc <verify_monster@@Base+0xd78>
   16774:	ldr	r0, [sp, #312]	; 0x138
   16778:	ldr	r1, [sp, #284]	; 0x11c
   1677c:	bl	17ce4 <verify_monster@@Base+0x2290>
   16780:	ldr	r1, [sp, #284]	; 0x11c
   16784:	add	lr, sp, #292	; 0x124
   16788:	add	r1, lr, r1, lsl #2
   1678c:	ldr	r1, [r1]
   16790:	cmp	r0, r1
   16794:	beq	167b8 <verify_monster@@Base+0xd64>
   16798:	ldr	r0, [pc, #912]	; 16b30 <verify_monster@@Base+0x10dc>
   1679c:	add	r0, pc, r0
   167a0:	ldr	r1, [sp, #284]	; 0x11c
   167a4:	bl	12d9c <printf@plt>
   167a8:	mvn	r1, #0
   167ac:	str	r1, [sp, #428]	; 0x1ac
   167b0:	str	r0, [sp, #48]	; 0x30
   167b4:	b	16aa0 <verify_monster@@Base+0x104c>
   167b8:	b	167bc <verify_monster@@Base+0xd68>
   167bc:	ldr	r0, [sp, #284]	; 0x11c
   167c0:	add	r0, r0, #1
   167c4:	str	r0, [sp, #284]	; 0x11c
   167c8:	b	16768 <verify_monster@@Base+0xd14>
   167cc:	ldr	r0, [sp, #420]	; 0x1a4
   167d0:	bl	17d5c <verify_monster@@Base+0x2308>
   167d4:	strb	r0, [sp, #407]	; 0x197
   167d8:	ldrb	r0, [sp, #407]	; 0x197
   167dc:	cmp	r0, #1
   167e0:	beq	16800 <verify_monster@@Base+0xdac>
   167e4:	ldr	r0, [pc, #832]	; 16b2c <verify_monster@@Base+0x10d8>
   167e8:	add	r0, pc, r0
   167ec:	bl	12d9c <printf@plt>
   167f0:	mvn	lr, #0
   167f4:	str	lr, [sp, #428]	; 0x1ac
   167f8:	str	r0, [sp, #44]	; 0x2c
   167fc:	b	16aa0 <verify_monster@@Base+0x104c>
   16800:	ldr	r0, [sp, #420]	; 0x1a4
   16804:	bl	17e50 <verify_monster@@Base+0x23fc>
   16808:	str	r0, [sp, #416]	; 0x1a0
   1680c:	ldr	r0, [sp, #416]	; 0x1a0
   16810:	bl	16d54 <verify_monster@@Base+0x1300>
   16814:	ldr	r1, [pc, #980]	; 16bf0 <verify_monster@@Base+0x119c>
   16818:	add	r1, pc, r1
   1681c:	bl	12d90 <strcmp@plt>
   16820:	cmp	r0, #0
   16824:	beq	16844 <verify_monster@@Base+0xdf0>
   16828:	ldr	r0, [pc, #760]	; 16b28 <verify_monster@@Base+0x10d4>
   1682c:	add	r0, pc, r0
   16830:	bl	12d9c <printf@plt>
   16834:	mvn	lr, #0
   16838:	str	lr, [sp, #428]	; 0x1ac
   1683c:	str	r0, [sp, #40]	; 0x28
   16840:	b	16aa0 <verify_monster@@Base+0x104c>
   16844:	ldr	r0, [sp, #420]	; 0x1a4
   16848:	bl	17f54 <verify_monster@@Base+0x2500>
   1684c:	str	r0, [sp, #416]	; 0x1a0
   16850:	ldr	r0, [sp, #416]	; 0x1a0
   16854:	bl	16d54 <verify_monster@@Base+0x1300>
   16858:	ldr	r1, [pc, #916]	; 16bf4 <verify_monster@@Base+0x11a0>
   1685c:	add	r1, pc, r1
   16860:	bl	12d90 <strcmp@plt>
   16864:	cmp	r0, #0
   16868:	beq	16888 <verify_monster@@Base+0xe34>
   1686c:	ldr	r0, [pc, #688]	; 16b24 <verify_monster@@Base+0x10d0>
   16870:	add	r0, pc, r0
   16874:	bl	12d9c <printf@plt>
   16878:	mvn	lr, #0
   1687c:	str	lr, [sp, #428]	; 0x1ac
   16880:	str	r0, [sp, #36]	; 0x24
   16884:	b	16aa0 <verify_monster@@Base+0x104c>
   16888:	ldr	r0, [sp, #416]	; 0x1a0
   1688c:	bl	17d5c <verify_monster@@Base+0x2308>
   16890:	and	r0, r0, #255	; 0xff
   16894:	cmp	r0, #0
   16898:	beq	168b8 <verify_monster@@Base+0xe64>
   1689c:	ldr	r0, [pc, #636]	; 16b20 <verify_monster@@Base+0x10cc>
   168a0:	add	r0, pc, r0
   168a4:	bl	12d9c <printf@plt>
   168a8:	mvn	lr, #0
   168ac:	str	lr, [sp, #428]	; 0x1ac
   168b0:	str	r0, [sp, #32]
   168b4:	b	16aa0 <verify_monster@@Base+0x104c>
   168b8:	ldr	r1, [sp, #420]	; 0x1a4
   168bc:	add	r0, sp, #276	; 0x114
   168c0:	bl	18058 <verify_monster@@Base+0x2604>
   168c4:	ldr	r0, [sp, #276]	; 0x114
   168c8:	str	r0, [sp, #396]	; 0x18c
   168cc:	ldr	r0, [sp, #280]	; 0x118
   168d0:	str	r0, [sp, #400]	; 0x190
   168d4:	ldrb	r0, [sp, #396]	; 0x18c
   168d8:	ldrb	r1, [sp, #407]	; 0x197
   168dc:	cmp	r0, r1
   168e0:	beq	16900 <verify_monster@@Base+0xeac>
   168e4:	ldr	r0, [pc, #560]	; 16b1c <verify_monster@@Base+0x10c8>
   168e8:	add	r0, pc, r0
   168ec:	bl	12d9c <printf@plt>
   168f0:	mvn	lr, #0
   168f4:	str	lr, [sp, #428]	; 0x1ac
   168f8:	str	r0, [sp, #28]
   168fc:	b	16aa0 <verify_monster@@Base+0x104c>
   16900:	ldr	r0, [sp, #400]	; 0x190
   16904:	ldr	r1, [sp, #420]	; 0x1a4
   16908:	str	r0, [sp, #24]
   1690c:	mov	r0, r1
   16910:	bl	17e50 <verify_monster@@Base+0x23fc>
   16914:	ldr	r1, [sp, #24]
   16918:	cmp	r1, r0
   1691c:	beq	1693c <verify_monster@@Base+0xee8>
   16920:	ldr	r0, [pc, #496]	; 16b18 <verify_monster@@Base+0x10c4>
   16924:	add	r0, pc, r0
   16928:	bl	12d9c <printf@plt>
   1692c:	mvn	lr, #0
   16930:	str	lr, [sp, #428]	; 0x1ac
   16934:	str	r0, [sp, #20]
   16938:	b	16aa0 <verify_monster@@Base+0x104c>
   1693c:	ldr	r0, [sp, #416]	; 0x1a0
   16940:	bl	1771c <verify_monster@@Base+0x1cc8>
   16944:	str	r0, [sp, #408]	; 0x198
   16948:	ldr	r0, [sp, #408]	; 0x198
   1694c:	bl	17824 <verify_monster@@Base+0x1dd0>
   16950:	str	r0, [sp, #284]	; 0x11c
   16954:	ldr	r0, [sp, #408]	; 0x198
   16958:	ldr	lr, [sp, #284]	; 0x11c
   1695c:	sub	r1, lr, #1
   16960:	bl	17874 <verify_monster@@Base+0x1e20>
   16964:	str	r0, [sp, #416]	; 0x1a0
   16968:	ldr	r0, [sp, #416]	; 0x1a0
   1696c:	bl	17d5c <verify_monster@@Base+0x2308>
   16970:	and	r0, r0, #255	; 0xff
   16974:	cmp	r0, #1
   16978:	beq	16998 <verify_monster@@Base+0xf44>
   1697c:	ldr	r0, [pc, #400]	; 16b14 <verify_monster@@Base+0x10c0>
   16980:	add	r0, pc, r0
   16984:	bl	12d9c <printf@plt>
   16988:	mvn	lr, #0
   1698c:	str	lr, [sp, #428]	; 0x1ac
   16990:	str	r0, [sp, #16]
   16994:	b	16aa0 <verify_monster@@Base+0x104c>
   16998:	ldr	r0, [sp, #416]	; 0x1a0
   1699c:	bl	17e50 <verify_monster@@Base+0x23fc>
   169a0:	str	r0, [sp, #416]	; 0x1a0
   169a4:	ldr	r0, [sp, #416]	; 0x1a0
   169a8:	bl	16d54 <verify_monster@@Base+0x1300>
   169ac:	ldr	r1, [pc, #580]	; 16bf8 <verify_monster@@Base+0x11a4>
   169b0:	add	r1, pc, r1
   169b4:	bl	12d90 <strcmp@plt>
   169b8:	cmp	r0, #0
   169bc:	beq	169dc <verify_monster@@Base+0xf88>
   169c0:	ldr	r0, [pc, #328]	; 16b10 <verify_monster@@Base+0x10bc>
   169c4:	add	r0, pc, r0
   169c8:	bl	12d9c <printf@plt>
   169cc:	mvn	lr, #0
   169d0:	str	lr, [sp, #428]	; 0x1ac
   169d4:	str	r0, [sp, #12]
   169d8:	b	16aa0 <verify_monster@@Base+0x104c>
   169dc:	ldr	r0, [sp, #420]	; 0x1a4
   169e0:	bl	180bc <verify_monster@@Base+0x2668>
   169e4:	sxtb	r0, r0
   169e8:	cmp	r0, #0
   169ec:	beq	16a0c <verify_monster@@Base+0xfb8>
   169f0:	ldr	r0, [pc, #276]	; 16b0c <verify_monster@@Base+0x10b8>
   169f4:	add	r0, pc, r0
   169f8:	bl	12d9c <printf@plt>
   169fc:	mvn	lr, #0
   16a00:	str	lr, [sp, #428]	; 0x1ac
   16a04:	str	r0, [sp, #8]
   16a08:	b	16aa0 <verify_monster@@Base+0x104c>
   16a0c:	ldr	r0, [sp, #420]	; 0x1a4
   16a10:	bl	181b0 <verify_monster@@Base+0x275c>
   16a14:	cmp	r0, #0
   16a18:	bne	16a40 <verify_monster@@Base+0xfec>
   16a1c:	ldr	r0, [pc, #224]	; 16b04 <verify_monster@@Base+0x10b0>
   16a20:	add	r0, pc, r0
   16a24:	bl	12d9c <printf@plt>
   16a28:	mvn	lr, #0
   16a2c:	str	lr, [sp, #428]	; 0x1ac
   16a30:	str	r0, [sp, #4]
   16a34:	b	16aa0 <verify_monster@@Base+0x104c>
   16a38:	andeq	r0, r2, r0, lsr #24
   16a3c:	andeq	r0, r2, sl, asr fp
   16a40:	ldr	r0, [sp, #420]	; 0x1a4
   16a44:	bl	1827c <verify_monster@@Base+0x2828>
   16a48:	str	r0, [sp, #308]	; 0x134
   16a4c:	ldr	r0, [sp, #308]	; 0x134
   16a50:	bl	18380 <verify_monster@@Base+0x292c>
   16a54:	cmp	r0, #0
   16a58:	bne	16a7c <verify_monster@@Base+0x1028>
   16a5c:	ldr	r0, [sp, #308]	; 0x134
   16a60:	bl	1844c <verify_monster@@Base+0x29f8>
   16a64:	cmp	r0, #0
   16a68:	bne	16a7c <verify_monster@@Base+0x1028>
   16a6c:	ldr	r0, [sp, #308]	; 0x134
   16a70:	bl	18518 <verify_monster@@Base+0x2ac4>
   16a74:	cmp	r0, #0
   16a78:	beq	16a98 <verify_monster@@Base+0x1044>
   16a7c:	ldr	r0, [pc, #132]	; 16b08 <verify_monster@@Base+0x10b4>
   16a80:	add	r0, pc, r0
   16a84:	bl	12d9c <printf@plt>
   16a88:	mvn	lr, #0
   16a8c:	str	lr, [sp, #428]	; 0x1ac
   16a90:	str	r0, [sp]
   16a94:	b	16aa0 <verify_monster@@Base+0x104c>
   16a98:	movw	r0, #0
   16a9c:	str	r0, [sp, #428]	; 0x1ac
   16aa0:	ldr	r0, [sp, #428]	; 0x1ac
   16aa4:	sub	sp, fp, #8
   16aa8:	pop	{r4, r5, fp, pc}
   16aac:	andeq	ip, r1, r1, lsr #14
   16ab0:	andeq	ip, r1, r4, asr r7
   16ab4:	strdeq	ip, [r1], -r0
   16ab8:	muleq	r1, r2, r7
   16abc:	andeq	ip, r1, lr, lsr #14
   16ac0:	andeq	ip, r1, lr, lsl r7
   16ac4:	andeq	ip, r1, r4, lsr r7
   16ac8:	andeq	ip, r1, r4, asr r0
   16acc:	andeq	ip, r1, r0, lsr #14
   16ad0:	andeq	ip, r1, r8, lsl r0
   16ad4:			; <UNDEFINED> instruction: 0x0001c6bb
   16ad8:	andeq	ip, r1, r3, lsr #13
   16adc:	andeq	ip, r1, r7, lsr r5
   16ae0:	andeq	ip, r1, r2, asr #10
   16ae4:	andeq	ip, r1, r7, asr #10
   16ae8:	andeq	ip, r1, r1, lsr #10
   16aec:	andeq	ip, r1, sp, asr r4
   16af0:	andeq	fp, r1, r3, lsl #23
   16af4:	andeq	ip, r1, fp, lsr r3
   16af8:	andeq	ip, r1, r7, lsr r3
   16afc:	muleq	r1, r7, r3
   16b00:	andeq	ip, r1, pc, lsr #3
   16b04:	andeq	ip, r1, r4, ror r0
   16b08:	andeq	ip, r1, r3, lsr r0
   16b0c:	andeq	ip, r1, fp, lsl #1
   16b10:	andeq	ip, r1, r1, lsl #1
   16b14:	andeq	ip, r1, r2, lsl #1
   16b18:	strheq	ip, [r1], -sp
   16b1c:	andeq	ip, r1, r9, asr #1
   16b20:	andeq	ip, r1, ip, ror #1
   16b24:	strdeq	ip, [r1], -lr
   16b28:	andeq	ip, r1, r7, lsl r1
   16b2c:	andeq	ip, r1, r1, lsr r1
   16b30:	andeq	ip, r1, lr, asr r1
   16b34:	muleq	r1, r2, r1
   16b38:	andeq	ip, r1, r3, asr #3
   16b3c:	ldrdeq	ip, [r1], -r7
   16b40:	strdeq	ip, [r1], -r5
   16b44:	andeq	ip, r1, r9, lsl r2
   16b48:	andeq	ip, r1, r4, lsr #4
   16b4c:	andeq	ip, r1, fp, lsr r2
   16b50:	andeq	ip, r1, sl, ror #4
   16b54:	muleq	r1, ip, r2
   16b58:	andeq	ip, r1, ip, asr #5
   16b5c:	strdeq	ip, [r1], -fp
   16b60:	andeq	ip, r1, r4, lsr #6
   16b64:	andeq	ip, r1, r0, asr r3
   16b68:	andeq	ip, r1, sl, asr r3
   16b6c:	andeq	ip, r1, lr, ror r3
   16b70:	andeq	ip, r1, r9, asr r3
   16b74:	andeq	ip, r1, r1, lsl #7
   16b78:	ldrdeq	ip, [r1], -r1
   16b7c:	andeq	ip, r1, sl, lsl r4
   16b80:	andeq	ip, r1, r4, ror r4
   16b84:	andeq	ip, r1, lr, lsl #9
   16b88:			; <UNDEFINED> instruction: 0x0001c4b9
   16b8c:	andeq	ip, r1, r0, lsl #10
   16b90:	andeq	ip, r1, r3, lsl r5
   16b94:	andeq	ip, r1, fp, ror #9
   16b98:	andeq	ip, r1, fp, asr #10
   16b9c:	andeq	ip, r1, r9, lsr r5
   16ba0:	andeq	ip, r1, r0, asr r5
   16ba4:	andeq	ip, r1, r4, ror #10
   16ba8:	muleq	r1, r7, r5
   16bac:	andeq	ip, r1, r2, asr #11
   16bb0:	andeq	ip, r1, r0, lsl #12
   16bb4:	andeq	ip, r1, r1, ror #12
   16bb8:	andeq	ip, r1, r3, lsr #13
   16bbc:	andeq	ip, r1, r2, asr #1
   16bc0:	andeq	fp, r1, pc, lsr #31
   16bc4:	andeq	ip, r1, r7, asr #10
   16bc8:	andeq	ip, r1, r2, lsr #7
   16bcc:	andeq	ip, r1, r6, lsr #6
   16bd0:	andeq	ip, r1, r2, lsr r3
   16bd4:	andeq	ip, r1, r6, lsl #6
   16bd8:	andeq	ip, r1, sl, lsr #4
   16bdc:	andeq	ip, r1, r6, lsr r2
   16be0:	andeq	ip, r1, sl, lsl #4
   16be4:	andeq	ip, r1, lr, lsl #3
   16be8:	andeq	ip, r1, r7, lsr #4
   16bec:	ldrdeq	ip, [r1], -r0
   16bf0:			; <UNDEFINED> instruction: 0x0001bebe
   16bf4:	andeq	ip, r1, r8, lsl #2
   16bf8:	andeq	fp, r1, r6, lsr #26
   16bfc:	push	{fp, lr}
   16c00:	mov	fp, sp
   16c04:	sub	sp, sp, #8
   16c08:	str	r0, [sp, #4]
   16c0c:	ldr	r0, [sp, #4]
   16c10:	movw	r1, #0
   16c14:	cmp	r0, r1
   16c18:	beq	16c30 <verify_monster@@Base+0x11dc>
   16c1c:	ldr	r0, [sp, #4]
   16c20:	add	r0, r0, #8
   16c24:	bl	24944 <main@@Base+0x1590>
   16c28:	vstr	s0, [sp]
   16c2c:	b	16c3c <verify_monster@@Base+0x11e8>
   16c30:	vldr	s0, [pc, #16]	; 16c48 <verify_monster@@Base+0x11f4>
   16c34:	vstr	s0, [sp]
   16c38:	b	16c3c <verify_monster@@Base+0x11e8>
   16c3c:	vldr	s0, [sp]
   16c40:	mov	sp, fp
   16c44:	pop	{fp, pc}
   16c48:	andeq	r0, r0, r0
   16c4c:	push	{fp, lr}
   16c50:	mov	fp, sp
   16c54:	sub	sp, sp, #16
   16c58:	str	r0, [fp, #-4]
   16c5c:	ldr	r0, [fp, #-4]
   16c60:	str	r0, [sp, #8]
   16c64:	bl	25f18 <main@@Base+0x2b64>
   16c68:	ldr	lr, [sp, #8]
   16c6c:	str	r0, [sp, #4]
   16c70:	mov	r0, lr
   16c74:	movw	r1, #0
   16c78:	and	r1, r1, #255	; 0xff
   16c7c:	ldr	r2, [sp, #4]
   16c80:	bl	12e2c <memset@plt>
   16c84:	ldr	r0, [sp, #8]
   16c88:	mov	sp, fp
   16c8c:	pop	{fp, pc}
   16c90:	push	{fp, lr}
   16c94:	mov	fp, sp
   16c98:	sub	sp, sp, #32
   16c9c:	str	r0, [fp, #-4]
   16ca0:	str	r1, [fp, #-8]
   16ca4:	ldr	r0, [fp, #-4]
   16ca8:	ldr	r1, [fp, #-8]
   16cac:	bl	25f20 <main@@Base+0x2b6c>
   16cb0:	ldr	r1, [fp, #-4]
   16cb4:	add	r1, r1, #4
   16cb8:	ldr	lr, [fp, #-8]
   16cbc:	add	lr, lr, #4
   16cc0:	str	r0, [fp, #-12]
   16cc4:	mov	r0, r1
   16cc8:	mov	r1, lr
   16ccc:	bl	25f20 <main@@Base+0x2b6c>
   16cd0:	ldr	r1, [fp, #-4]
   16cd4:	add	r1, r1, #8
   16cd8:	ldr	lr, [fp, #-8]
   16cdc:	add	lr, lr, #8
   16ce0:	str	r0, [sp, #16]
   16ce4:	mov	r0, r1
   16ce8:	mov	r1, lr
   16cec:	bl	25f20 <main@@Base+0x2b6c>
   16cf0:	ldr	r1, [fp, #-4]
   16cf4:	add	r1, r1, #16
   16cf8:	ldr	lr, [fp, #-8]
   16cfc:	add	lr, lr, #16
   16d00:	str	r0, [sp, #12]
   16d04:	mov	r0, r1
   16d08:	mov	r1, lr
   16d0c:	bl	25f54 <main@@Base+0x2ba0>
   16d10:	ldr	r1, [fp, #-8]
   16d14:	ldrb	r1, [r1, #24]
   16d18:	ldr	lr, [fp, #-4]
   16d1c:	strb	r1, [lr, #24]
   16d20:	ldr	r1, [fp, #-4]
   16d24:	add	r1, r1, #26
   16d28:	ldr	lr, [fp, #-8]
   16d2c:	add	lr, lr, #26
   16d30:	str	r0, [sp, #8]
   16d34:	mov	r0, r1
   16d38:	mov	r1, lr
   16d3c:	bl	25f88 <main@@Base+0x2bd4>
   16d40:	ldr	r1, [fp, #-4]
   16d44:	str	r0, [sp, #4]
   16d48:	mov	r0, r1
   16d4c:	mov	sp, fp
   16d50:	pop	{fp, pc}
   16d54:	push	{fp, lr}
   16d58:	mov	fp, sp
   16d5c:	sub	sp, sp, #24
   16d60:	str	r0, [fp, #-4]
   16d64:	movw	r0, #0
   16d68:	strh	r0, [fp, #-10]
   16d6c:	ldr	r0, [fp, #-4]
   16d70:	movw	r1, #0
   16d74:	cmp	r0, r1
   16d78:	beq	16d84 <verify_monster@@Base+0x1330>
   16d7c:	b	16d80 <verify_monster@@Base+0x132c>
   16d80:	b	16da4 <verify_monster@@Base+0x1350>
   16d84:	ldr	r0, [pc, #208]	; 16e5c <verify_monster@@Base+0x1408>
   16d88:	add	r0, pc, r0
   16d8c:	ldr	r1, [pc, #204]	; 16e60 <verify_monster@@Base+0x140c>
   16d90:	add	r1, pc, r1
   16d94:	ldr	r2, [pc, #200]	; 16e64 <verify_monster@@Base+0x1410>
   16d98:	add	r3, pc, r2
   16d9c:	movw	r2, #699	; 0x2bb
   16da0:	bl	12e68 <__assert_fail@plt>
   16da4:	mov	r0, #3
   16da8:	strh	r0, [sp, #12]
   16dac:	ldr	r0, [fp, #-4]
   16db0:	str	r0, [sp, #4]
   16db4:	bl	238a4 <main@@Base+0x4f0>
   16db8:	ldr	lr, [sp, #4]
   16dbc:	sub	r0, lr, r0
   16dc0:	str	r0, [sp, #8]
   16dc4:	ldr	r0, [sp, #8]
   16dc8:	bl	238c8 <main@@Base+0x514>
   16dcc:	ldrh	lr, [sp, #12]
   16dd0:	add	lr, lr, #3
   16dd4:	lsl	lr, lr, #1
   16dd8:	cmp	r0, lr
   16ddc:	bcc	16df8 <verify_monster@@Base+0x13a4>
   16de0:	ldr	r0, [sp, #8]
   16de4:	ldrh	r1, [sp, #12]
   16de8:	add	r0, r0, r1, lsl #1
   16dec:	add	r0, r0, #4
   16df0:	bl	238c8 <main@@Base+0x514>
   16df4:	strh	r0, [fp, #-10]
   16df8:	ldrsh	r0, [fp, #-10]
   16dfc:	cmp	r0, #0
   16e00:	beq	16e3c <verify_monster@@Base+0x13e8>
   16e04:	ldr	r0, [fp, #-4]
   16e08:	ldrh	r1, [fp, #-10]
   16e0c:	add	r0, r0, r1
   16e10:	str	r0, [fp, #-8]
   16e14:	ldr	r0, [fp, #-8]
   16e18:	add	r0, r0, #4
   16e1c:	ldr	r1, [fp, #-8]
   16e20:	str	r0, [sp]
   16e24:	mov	r0, r1
   16e28:	bl	2386c <main@@Base+0x4b8>
   16e2c:	ldr	r1, [sp]
   16e30:	add	r0, r1, r0
   16e34:	mov	sp, fp
   16e38:	pop	{fp, pc}
   16e3c:	ldr	r0, [pc, #36]	; 16e68 <verify_monster@@Base+0x1414>
   16e40:	add	r0, pc, r0
   16e44:	ldr	r1, [pc, #32]	; 16e6c <verify_monster@@Base+0x1418>
   16e48:	add	r1, pc, r1
   16e4c:	ldr	r2, [pc, #28]	; 16e70 <verify_monster@@Base+0x141c>
   16e50:	add	r3, pc, r2
   16e54:	movw	r2, #699	; 0x2bb
   16e58:	bl	12e68 <__assert_fail@plt>
   16e5c:	andeq	sp, r1, r1, ror #14
   16e60:	andeq	sp, r1, pc, ror r7
   16e64:	andeq	lr, r1, ip, lsr #32
   16e68:	ldrdeq	sp, [r1], -r5
   16e6c:	andeq	sp, r1, r7, asr #13
   16e70:	andeq	sp, r1, r4, ror pc
   16e74:	push	{fp, lr}
   16e78:	mov	fp, sp
   16e7c:	sub	sp, sp, #8
   16e80:	str	r0, [sp, #4]
   16e84:	ldr	r0, [sp, #4]
   16e88:	movw	r1, #0
   16e8c:	cmp	r0, r1
   16e90:	beq	16eac <verify_monster@@Base+0x1458>
   16e94:	ldr	r0, [sp, #4]
   16e98:	mvn	r1, #3
   16e9c:	add	r0, r0, r1
   16ea0:	bl	2386c <main@@Base+0x4b8>
   16ea4:	str	r0, [sp]
   16ea8:	b	16eb8 <verify_monster@@Base+0x1464>
   16eac:	movw	r0, #0
   16eb0:	str	r0, [sp]
   16eb4:	b	16eb8 <verify_monster@@Base+0x1464>
   16eb8:	ldr	r0, [sp]
   16ebc:	mov	sp, fp
   16ec0:	pop	{fp, pc}
   16ec4:	push	{fp, lr}
   16ec8:	mov	fp, sp
   16ecc:	sub	sp, sp, #24
   16ed0:	str	r0, [fp, #-4]
   16ed4:	movw	r0, #0
   16ed8:	strh	r0, [fp, #-6]
   16edc:	ldr	r0, [fp, #-4]
   16ee0:	movw	r1, #0
   16ee4:	cmp	r0, r1
   16ee8:	beq	16ef4 <verify_monster@@Base+0x14a0>
   16eec:	b	16ef0 <verify_monster@@Base+0x149c>
   16ef0:	b	16f14 <verify_monster@@Base+0x14c0>
   16ef4:	ldr	r0, [pc, #176]	; 16fac <verify_monster@@Base+0x1558>
   16ef8:	add	r0, pc, r0
   16efc:	ldr	r1, [pc, #172]	; 16fb0 <verify_monster@@Base+0x155c>
   16f00:	add	r1, pc, r1
   16f04:	ldr	r2, [pc, #168]	; 16fb4 <verify_monster@@Base+0x1560>
   16f08:	add	r3, pc, r2
   16f0c:	movw	r2, #705	; 0x2c1
   16f10:	bl	12e68 <__assert_fail@plt>
   16f14:	mov	r0, #6
   16f18:	strh	r0, [fp, #-8]
   16f1c:	ldr	r0, [fp, #-4]
   16f20:	str	r0, [sp, #8]
   16f24:	bl	238a4 <main@@Base+0x4f0>
   16f28:	ldr	lr, [sp, #8]
   16f2c:	sub	r0, lr, r0
   16f30:	str	r0, [sp, #12]
   16f34:	ldr	r0, [sp, #12]
   16f38:	bl	238c8 <main@@Base+0x514>
   16f3c:	ldrh	lr, [fp, #-8]
   16f40:	add	lr, lr, #3
   16f44:	lsl	lr, lr, #1
   16f48:	cmp	r0, lr
   16f4c:	bcc	16f68 <verify_monster@@Base+0x1514>
   16f50:	ldr	r0, [sp, #12]
   16f54:	ldrh	r1, [fp, #-8]
   16f58:	add	r0, r0, r1, lsl #1
   16f5c:	add	r0, r0, #4
   16f60:	bl	238c8 <main@@Base+0x514>
   16f64:	strh	r0, [fp, #-6]
   16f68:	ldrh	r0, [fp, #-6]
   16f6c:	cmp	r0, #0
   16f70:	beq	16f90 <verify_monster@@Base+0x153c>
   16f74:	ldr	r0, [fp, #-4]
   16f78:	ldrh	r1, [fp, #-6]
   16f7c:	add	r0, r0, r1
   16f80:	bl	26000 <main@@Base+0x2c4c>
   16f84:	sxtb	r0, r0
   16f88:	str	r0, [sp, #4]
   16f8c:	b	16f9c <verify_monster@@Base+0x1548>
   16f90:	movw	r0, #8
   16f94:	str	r0, [sp, #4]
   16f98:	b	16f9c <verify_monster@@Base+0x1548>
   16f9c:	ldr	r0, [sp, #4]
   16fa0:	sxtb	r0, r0
   16fa4:	mov	sp, fp
   16fa8:	pop	{fp, pc}
   16fac:	strdeq	sp, [r1], -r1
   16fb0:	andeq	sp, r1, pc, lsl #12
   16fb4:	andeq	sp, r1, lr, lsr #30
   16fb8:	sub	sp, sp, #12
   16fbc:	strb	r0, [sp, #7]
   16fc0:	ldrsb	r0, [sp, #7]
   16fc4:	cmp	r0, #1
   16fc8:	str	r0, [sp]
   16fcc:	beq	16ff4 <verify_monster@@Base+0x15a0>
   16fd0:	b	16fd4 <verify_monster@@Base+0x1580>
   16fd4:	ldr	r0, [sp]
   16fd8:	cmp	r0, #2
   16fdc:	beq	17004 <verify_monster@@Base+0x15b0>
   16fe0:	b	16fe4 <verify_monster@@Base+0x1590>
   16fe4:	ldr	r0, [sp]
   16fe8:	cmp	r0, #8
   16fec:	beq	17014 <verify_monster@@Base+0x15c0>
   16ff0:	b	17024 <verify_monster@@Base+0x15d0>
   16ff4:	ldr	r0, [pc, #72]	; 17044 <verify_monster@@Base+0x15f0>
   16ff8:	add	r0, pc, r0
   16ffc:	str	r0, [sp, #8]
   17000:	b	17030 <verify_monster@@Base+0x15dc>
   17004:	ldr	r0, [pc, #52]	; 17040 <verify_monster@@Base+0x15ec>
   17008:	add	r0, pc, r0
   1700c:	str	r0, [sp, #8]
   17010:	b	17030 <verify_monster@@Base+0x15dc>
   17014:	ldr	r0, [pc, #32]	; 1703c <verify_monster@@Base+0x15e8>
   17018:	add	r0, pc, r0
   1701c:	str	r0, [sp, #8]
   17020:	b	17030 <verify_monster@@Base+0x15dc>
   17024:	ldr	r0, [pc, #28]	; 17048 <verify_monster@@Base+0x15f4>
   17028:	add	r0, pc, r0
   1702c:	str	r0, [sp, #8]
   17030:	ldr	r0, [sp, #8]
   17034:	add	sp, sp, #12
   17038:	bx	lr
   1703c:	andeq	sp, r1, fp, ror lr
   17040:	andeq	fp, r1, pc, ror #7
   17044:	muleq	r1, r7, lr
   17048:	andeq	ip, r1, ip, asr #27
   1704c:	sub	sp, sp, #12
   17050:	strb	r0, [sp, #7]
   17054:	ldrsb	r0, [sp, #7]
   17058:	cmp	r0, #1
   1705c:	str	r0, [sp]
   17060:	beq	17088 <verify_monster@@Base+0x1634>
   17064:	b	17068 <verify_monster@@Base+0x1614>
   17068:	ldr	r0, [sp]
   1706c:	cmp	r0, #2
   17070:	beq	17094 <verify_monster@@Base+0x1640>
   17074:	b	17078 <verify_monster@@Base+0x1624>
   17078:	ldr	r0, [sp]
   1707c:	cmp	r0, #8
   17080:	beq	170a0 <verify_monster@@Base+0x164c>
   17084:	b	170ac <verify_monster@@Base+0x1658>
   17088:	movw	r0, #1
   1708c:	str	r0, [sp, #8]
   17090:	b	170b4 <verify_monster@@Base+0x1660>
   17094:	movw	r0, #1
   17098:	str	r0, [sp, #8]
   1709c:	b	170b4 <verify_monster@@Base+0x1660>
   170a0:	movw	r0, #1
   170a4:	str	r0, [sp, #8]
   170a8:	b	170b4 <verify_monster@@Base+0x1660>
   170ac:	movw	r0, #0
   170b0:	str	r0, [sp, #8]
   170b4:	ldr	r0, [sp, #8]
   170b8:	add	sp, sp, #12
   170bc:	bx	lr
   170c0:	sub	sp, sp, #12
   170c4:	strb	r0, [sp, #7]
   170c8:	ldrb	r0, [sp, #7]
   170cc:	mov	r1, r0
   170d0:	cmp	r0, #4
   170d4:	str	r1, [sp]
   170d8:	bhi	1713c <verify_monster@@Base+0x16e8>
   170dc:	add	r0, pc, #8
   170e0:	ldr	r1, [sp]
   170e4:	ldr	r2, [r0, r1, lsl #2]
   170e8:	add	pc, r0, r2
   170ec:	andeq	r0, r0, r4, lsl r0
   170f0:	andeq	r0, r0, r0, lsr #32
   170f4:	andeq	r0, r0, ip, lsr #32
   170f8:	andeq	r0, r0, r8, lsr r0
   170fc:	andeq	r0, r0, r4, asr #32
   17100:	movw	r0, #1
   17104:	str	r0, [sp, #8]
   17108:	b	17144 <verify_monster@@Base+0x16f0>
   1710c:	movw	r0, #1
   17110:	str	r0, [sp, #8]
   17114:	b	17144 <verify_monster@@Base+0x16f0>
   17118:	movw	r0, #1
   1711c:	str	r0, [sp, #8]
   17120:	b	17144 <verify_monster@@Base+0x16f0>
   17124:	movw	r0, #1
   17128:	str	r0, [sp, #8]
   1712c:	b	17144 <verify_monster@@Base+0x16f0>
   17130:	movw	r0, #1
   17134:	str	r0, [sp, #8]
   17138:	b	17144 <verify_monster@@Base+0x16f0>
   1713c:	movw	r0, #0
   17140:	str	r0, [sp, #8]
   17144:	ldr	r0, [sp, #8]
   17148:	add	sp, sp, #12
   1714c:	bx	lr
   17150:	push	{fp, lr}
   17154:	mov	fp, sp
   17158:	sub	sp, sp, #32
   1715c:	str	r0, [fp, #-8]
   17160:	movw	r0, #0
   17164:	strh	r0, [fp, #-14]
   17168:	ldr	r0, [fp, #-8]
   1716c:	movw	r1, #0
   17170:	cmp	r0, r1
   17174:	beq	17180 <verify_monster@@Base+0x172c>
   17178:	b	1717c <verify_monster@@Base+0x1728>
   1717c:	b	171a0 <verify_monster@@Base+0x174c>
   17180:	ldr	r0, [pc, #196]	; 1724c <verify_monster@@Base+0x17f8>
   17184:	add	r0, pc, r0
   17188:	ldr	r1, [pc, #192]	; 17250 <verify_monster@@Base+0x17fc>
   1718c:	add	r1, pc, r1
   17190:	ldr	r2, [pc, #188]	; 17254 <verify_monster@@Base+0x1800>
   17194:	add	r3, pc, r2
   17198:	movw	r2, #706	; 0x2c2
   1719c:	bl	12e68 <__assert_fail@plt>
   171a0:	mov	r0, #5
   171a4:	strh	r0, [sp, #16]
   171a8:	ldr	r0, [fp, #-8]
   171ac:	str	r0, [sp, #8]
   171b0:	bl	238a4 <main@@Base+0x4f0>
   171b4:	ldr	lr, [sp, #8]
   171b8:	sub	r0, lr, r0
   171bc:	str	r0, [sp, #12]
   171c0:	ldr	r0, [sp, #12]
   171c4:	bl	238c8 <main@@Base+0x514>
   171c8:	ldrh	lr, [sp, #16]
   171cc:	add	lr, lr, #3
   171d0:	lsl	lr, lr, #1
   171d4:	cmp	r0, lr
   171d8:	bcc	171f4 <verify_monster@@Base+0x17a0>
   171dc:	ldr	r0, [sp, #12]
   171e0:	ldrh	r1, [sp, #16]
   171e4:	add	r0, r0, r1, lsl #1
   171e8:	add	r0, r0, #4
   171ec:	bl	238c8 <main@@Base+0x514>
   171f0:	strh	r0, [fp, #-14]
   171f4:	ldrsh	r0, [fp, #-14]
   171f8:	cmp	r0, #0
   171fc:	beq	17238 <verify_monster@@Base+0x17e4>
   17200:	ldr	r0, [fp, #-8]
   17204:	ldrh	r1, [fp, #-14]
   17208:	add	r0, r0, r1
   1720c:	str	r0, [fp, #-12]
   17210:	ldr	r0, [fp, #-12]
   17214:	add	r0, r0, #4
   17218:	ldr	r1, [fp, #-12]
   1721c:	str	r0, [sp, #4]
   17220:	mov	r0, r1
   17224:	bl	2386c <main@@Base+0x4b8>
   17228:	ldr	r1, [sp, #4]
   1722c:	add	r0, r1, r0
   17230:	str	r0, [fp, #-4]
   17234:	b	17240 <verify_monster@@Base+0x17ec>
   17238:	movw	r0, #0
   1723c:	str	r0, [fp, #-4]
   17240:	ldr	r0, [fp, #-4]
   17244:	mov	sp, fp
   17248:	pop	{fp, pc}
   1724c:	andeq	sp, r1, r5, ror #6
   17250:	andeq	sp, r1, r3, lsl #7
   17254:	andeq	sp, r1, r4, lsl #26
   17258:	push	{fp, lr}
   1725c:	mov	fp, sp
   17260:	sub	sp, sp, #8
   17264:	str	r0, [sp, #4]
   17268:	ldr	r0, [sp, #4]
   1726c:	bl	2603c <main@@Base+0x2c88>
   17270:	mov	sp, fp
   17274:	pop	{fp, pc}
   17278:	push	{fp, lr}
   1727c:	mov	fp, sp
   17280:	sub	sp, sp, #8
   17284:	str	r0, [sp, #4]
   17288:	str	r1, [sp]
   1728c:	ldr	r0, [sp, #4]
   17290:	bl	2603c <main@@Base+0x2c88>
   17294:	ldr	r1, [sp]
   17298:	cmp	r0, r1
   1729c:	bls	172a8 <verify_monster@@Base+0x1854>
   172a0:	b	172a4 <verify_monster@@Base+0x1850>
   172a4:	b	172c8 <verify_monster@@Base+0x1874>
   172a8:	ldr	r0, [pc, #52]	; 172e4 <verify_monster@@Base+0x1890>
   172ac:	add	r0, pc, r0
   172b0:	ldr	r1, [pc, #48]	; 172e8 <verify_monster@@Base+0x1894>
   172b4:	add	r1, pc, r1
   172b8:	ldr	r2, [pc, #44]	; 172ec <verify_monster@@Base+0x1898>
   172bc:	add	r3, pc, r2
   172c0:	movw	r2, #395	; 0x18b
   172c4:	bl	12e68 <__assert_fail@plt>
   172c8:	ldr	r0, [sp, #4]
   172cc:	ldr	r1, [sp]
   172d0:	add	r0, r0, r1
   172d4:	bl	24844 <main@@Base+0x1490>
   172d8:	and	r0, r0, #255	; 0xff
   172dc:	mov	sp, fp
   172e0:	pop	{fp, pc}
   172e4:	andeq	sp, r1, r8, asr ip
   172e8:	andeq	sp, r1, r7, lsl #25
   172ec:	strdeq	sp, [r1], -lr
   172f0:	push	{fp, lr}
   172f4:	mov	fp, sp
   172f8:	sub	sp, sp, #24
   172fc:	str	r0, [fp, #-4]
   17300:	movw	r0, #0
   17304:	strh	r0, [fp, #-6]
   17308:	ldr	r0, [fp, #-4]
   1730c:	movw	r1, #0
   17310:	cmp	r0, r1
   17314:	beq	17320 <verify_monster@@Base+0x18cc>
   17318:	b	1731c <verify_monster@@Base+0x18c8>
   1731c:	b	17340 <verify_monster@@Base+0x18ec>
   17320:	ldr	r0, [pc, #176]	; 173d8 <verify_monster@@Base+0x1984>
   17324:	add	r0, pc, r0
   17328:	ldr	r1, [pc, #172]	; 173dc <verify_monster@@Base+0x1988>
   1732c:	add	r1, pc, r1
   17330:	ldr	r2, [pc, #168]	; 173e0 <verify_monster@@Base+0x198c>
   17334:	add	r3, pc, r2
   17338:	movw	r2, #698	; 0x2ba
   1733c:	bl	12e68 <__assert_fail@plt>
   17340:	mov	r0, #1
   17344:	strh	r0, [fp, #-8]
   17348:	ldr	r0, [fp, #-4]
   1734c:	str	r0, [sp, #8]
   17350:	bl	238a4 <main@@Base+0x4f0>
   17354:	ldr	lr, [sp, #8]
   17358:	sub	r0, lr, r0
   1735c:	str	r0, [sp, #12]
   17360:	ldr	r0, [sp, #12]
   17364:	bl	238c8 <main@@Base+0x514>
   17368:	ldrh	lr, [fp, #-8]
   1736c:	add	lr, lr, #3
   17370:	lsl	lr, lr, #1
   17374:	cmp	r0, lr
   17378:	bcc	17394 <verify_monster@@Base+0x1940>
   1737c:	ldr	r0, [sp, #12]
   17380:	ldrh	r1, [fp, #-8]
   17384:	add	r0, r0, r1, lsl #1
   17388:	add	r0, r0, #4
   1738c:	bl	238c8 <main@@Base+0x514>
   17390:	strh	r0, [fp, #-6]
   17394:	ldrh	r0, [fp, #-6]
   17398:	cmp	r0, #0
   1739c:	beq	173bc <verify_monster@@Base+0x1968>
   173a0:	ldr	r0, [fp, #-4]
   173a4:	ldrh	r1, [fp, #-6]
   173a8:	add	r0, r0, r1
   173ac:	bl	238f0 <main@@Base+0x53c>
   173b0:	sxth	r0, r0
   173b4:	str	r0, [sp, #4]
   173b8:	b	173c8 <verify_monster@@Base+0x1974>
   173bc:	movw	r0, #150	; 0x96
   173c0:	str	r0, [sp, #4]
   173c4:	b	173c8 <verify_monster@@Base+0x1974>
   173c8:	ldr	r0, [sp, #4]
   173cc:	sxth	r0, r0
   173d0:	mov	sp, fp
   173d4:	pop	{fp, pc}
   173d8:	andeq	sp, r1, r5, asr #3
   173dc:	andeq	sp, r1, r3, ror #3
   173e0:	andeq	sp, r1, r8, asr #25
   173e4:	push	{fp, lr}
   173e8:	mov	fp, sp
   173ec:	sub	sp, sp, #16
   173f0:	str	r0, [fp, #-4]
   173f4:	movw	r0, #0
   173f8:	strh	r0, [fp, #-6]
   173fc:	ldr	r0, [fp, #-4]
   17400:	movw	r1, #0
   17404:	cmp	r0, r1
   17408:	beq	17414 <verify_monster@@Base+0x19c0>
   1740c:	b	17410 <verify_monster@@Base+0x19bc>
   17410:	b	17434 <verify_monster@@Base+0x19e0>
   17414:	ldr	r0, [pc, #136]	; 174a4 <verify_monster@@Base+0x1a50>
   17418:	add	r0, pc, r0
   1741c:	ldr	r1, [pc, #132]	; 174a8 <verify_monster@@Base+0x1a54>
   17420:	add	r1, pc, r1
   17424:	ldr	r2, [pc, #128]	; 174ac <verify_monster@@Base+0x1a58>
   17428:	add	r3, pc, r2
   1742c:	movw	r2, #698	; 0x2ba
   17430:	bl	12e68 <__assert_fail@plt>
   17434:	mov	r0, #1
   17438:	strh	r0, [sp, #8]
   1743c:	ldr	r0, [fp, #-4]
   17440:	str	r0, [sp]
   17444:	bl	238a4 <main@@Base+0x4f0>
   17448:	ldr	lr, [sp]
   1744c:	sub	r0, lr, r0
   17450:	str	r0, [sp, #4]
   17454:	ldr	r0, [sp, #4]
   17458:	bl	238c8 <main@@Base+0x514>
   1745c:	ldrh	lr, [sp, #8]
   17460:	add	lr, lr, #3
   17464:	lsl	lr, lr, #1
   17468:	cmp	r0, lr
   1746c:	bcc	17488 <verify_monster@@Base+0x1a34>
   17470:	ldr	r0, [sp, #4]
   17474:	ldrh	r1, [sp, #8]
   17478:	add	r0, r0, r1, lsl #1
   1747c:	add	r0, r0, #4
   17480:	bl	238c8 <main@@Base+0x514>
   17484:	strh	r0, [fp, #-6]
   17488:	ldrh	r0, [fp, #-6]
   1748c:	cmp	r0, #0
   17490:	movw	r0, #0
   17494:	movne	r0, #1
   17498:	and	r0, r0, #1
   1749c:	mov	sp, fp
   174a0:	pop	{fp, pc}
   174a4:	ldrdeq	sp, [r1], -r1
   174a8:	andeq	sp, r1, pc, ror #1
   174ac:	andeq	sp, r1, r8, lsl ip
   174b0:	push	{fp, lr}
   174b4:	mov	fp, sp
   174b8:	sub	sp, sp, #32
   174bc:	str	r0, [fp, #-8]
   174c0:	movw	r0, #0
   174c4:	strh	r0, [fp, #-14]
   174c8:	ldr	r0, [fp, #-8]
   174cc:	movw	r1, #0
   174d0:	cmp	r0, r1
   174d4:	beq	174e0 <verify_monster@@Base+0x1a8c>
   174d8:	b	174dc <verify_monster@@Base+0x1a88>
   174dc:	b	17500 <verify_monster@@Base+0x1aac>
   174e0:	ldr	r0, [pc, #196]	; 175ac <verify_monster@@Base+0x1b58>
   174e4:	add	r0, pc, r0
   174e8:	ldr	r1, [pc, #192]	; 175b0 <verify_monster@@Base+0x1b5c>
   174ec:	add	r1, pc, r1
   174f0:	ldr	r2, [pc, #188]	; 175b4 <verify_monster@@Base+0x1b60>
   174f4:	add	r3, pc, r2
   174f8:	movw	r2, #718	; 0x2ce
   174fc:	bl	12e68 <__assert_fail@plt>
   17500:	mov	r0, #9
   17504:	strh	r0, [sp, #16]
   17508:	ldr	r0, [fp, #-8]
   1750c:	str	r0, [sp, #8]
   17510:	bl	238a4 <main@@Base+0x4f0>
   17514:	ldr	lr, [sp, #8]
   17518:	sub	r0, lr, r0
   1751c:	str	r0, [sp, #12]
   17520:	ldr	r0, [sp, #12]
   17524:	bl	238c8 <main@@Base+0x514>
   17528:	ldrh	lr, [sp, #16]
   1752c:	add	lr, lr, #3
   17530:	lsl	lr, lr, #1
   17534:	cmp	r0, lr
   17538:	bcc	17554 <verify_monster@@Base+0x1b00>
   1753c:	ldr	r0, [sp, #12]
   17540:	ldrh	r1, [sp, #16]
   17544:	add	r0, r0, r1, lsl #1
   17548:	add	r0, r0, #4
   1754c:	bl	238c8 <main@@Base+0x514>
   17550:	strh	r0, [fp, #-14]
   17554:	ldrsh	r0, [fp, #-14]
   17558:	cmp	r0, #0
   1755c:	beq	17598 <verify_monster@@Base+0x1b44>
   17560:	ldr	r0, [fp, #-8]
   17564:	ldrh	r1, [fp, #-14]
   17568:	add	r0, r0, r1
   1756c:	str	r0, [fp, #-12]
   17570:	ldr	r0, [fp, #-12]
   17574:	add	r0, r0, #4
   17578:	ldr	r1, [fp, #-12]
   1757c:	str	r0, [sp, #4]
   17580:	mov	r0, r1
   17584:	bl	2386c <main@@Base+0x4b8>
   17588:	ldr	r1, [sp, #4]
   1758c:	add	r0, r1, r0
   17590:	str	r0, [fp, #-4]
   17594:	b	175a0 <verify_monster@@Base+0x1b4c>
   17598:	movw	r0, #0
   1759c:	str	r0, [fp, #-4]
   175a0:	ldr	r0, [fp, #-4]
   175a4:	mov	sp, fp
   175a8:	pop	{fp, pc}
   175ac:	andeq	sp, r1, r5
   175b0:	andeq	sp, r1, r3, lsr #32
   175b4:	muleq	r1, r7, fp
   175b8:	push	{fp, lr}
   175bc:	mov	fp, sp
   175c0:	sub	sp, sp, #8
   175c4:	str	r0, [sp, #4]
   175c8:	ldr	r0, [sp, #4]
   175cc:	movw	r1, #0
   175d0:	cmp	r0, r1
   175d4:	beq	175f0 <verify_monster@@Base+0x1b9c>
   175d8:	ldr	r0, [sp, #4]
   175dc:	mvn	r1, #3
   175e0:	add	r0, r0, r1
   175e4:	bl	2386c <main@@Base+0x4b8>
   175e8:	str	r0, [sp]
   175ec:	b	175fc <verify_monster@@Base+0x1ba8>
   175f0:	movw	r0, #0
   175f4:	str	r0, [sp]
   175f8:	b	175fc <verify_monster@@Base+0x1ba8>
   175fc:	ldr	r0, [sp]
   17600:	mov	sp, fp
   17604:	pop	{fp, pc}
   17608:	push	{fp, lr}
   1760c:	mov	fp, sp
   17610:	sub	sp, sp, #8
   17614:	str	r0, [sp, #4]
   17618:	str	r1, [sp]
   1761c:	ldr	r0, [sp, #4]
   17620:	bl	2603c <main@@Base+0x2c88>
   17624:	ldr	r1, [sp]
   17628:	cmp	r0, r1
   1762c:	bls	17638 <verify_monster@@Base+0x1be4>
   17630:	b	17634 <verify_monster@@Base+0x1be0>
   17634:	b	17658 <verify_monster@@Base+0x1c04>
   17638:	ldr	r0, [pc, #44]	; 1766c <verify_monster@@Base+0x1c18>
   1763c:	add	r0, pc, r0
   17640:	ldr	r1, [pc, #40]	; 17670 <verify_monster@@Base+0x1c1c>
   17644:	add	r1, pc, r1
   17648:	ldr	r2, [pc, #36]	; 17674 <verify_monster@@Base+0x1c20>
   1764c:	add	r3, pc, r2
   17650:	movw	r2, #380	; 0x17c
   17654:	bl	12e68 <__assert_fail@plt>
   17658:	ldr	r0, [sp, #4]
   1765c:	ldr	r1, [sp]
   17660:	add	r0, r0, r1, lsl #2
   17664:	mov	sp, fp
   17668:	pop	{fp, pc}
   1766c:	andeq	sp, r1, r8, asr #17
   17670:	andeq	ip, r1, fp, asr #29
   17674:	muleq	r1, r6, sl
   17678:	push	{fp, lr}
   1767c:	mov	fp, sp
   17680:	sub	sp, sp, #8
   17684:	str	r0, [sp, #4]
   17688:	ldr	r0, [sp, #4]
   1768c:	movw	r1, #0
   17690:	cmp	r0, r1
   17694:	beq	176ac <verify_monster@@Base+0x1c58>
   17698:	ldr	r0, [sp, #4]
   1769c:	bl	238f0 <main@@Base+0x53c>
   176a0:	sxth	r0, r0
   176a4:	str	r0, [sp]
   176a8:	b	176b8 <verify_monster@@Base+0x1c64>
   176ac:	movw	r0, #0
   176b0:	str	r0, [sp]
   176b4:	b	176b8 <verify_monster@@Base+0x1c64>
   176b8:	ldr	r0, [sp]
   176bc:	sxth	r0, r0
   176c0:	mov	sp, fp
   176c4:	pop	{fp, pc}
   176c8:	push	{fp, lr}
   176cc:	mov	fp, sp
   176d0:	sub	sp, sp, #8
   176d4:	str	r0, [sp, #4]
   176d8:	ldr	r0, [sp, #4]
   176dc:	movw	r1, #0
   176e0:	cmp	r0, r1
   176e4:	beq	17700 <verify_monster@@Base+0x1cac>
   176e8:	ldr	r0, [sp, #4]
   176ec:	add	r0, r0, #2
   176f0:	bl	24780 <main@@Base+0x13cc>
   176f4:	sxtb	r0, r0
   176f8:	str	r0, [sp]
   176fc:	b	1770c <verify_monster@@Base+0x1cb8>
   17700:	movw	r0, #0
   17704:	str	r0, [sp]
   17708:	b	1770c <verify_monster@@Base+0x1cb8>
   1770c:	ldr	r0, [sp]
   17710:	sxtb	r0, r0
   17714:	mov	sp, fp
   17718:	pop	{fp, pc}
   1771c:	push	{fp, lr}
   17720:	mov	fp, sp
   17724:	sub	sp, sp, #32
   17728:	str	r0, [fp, #-8]
   1772c:	movw	r0, #0
   17730:	strh	r0, [fp, #-14]
   17734:	ldr	r0, [fp, #-8]
   17738:	movw	r1, #0
   1773c:	cmp	r0, r1
   17740:	beq	1774c <verify_monster@@Base+0x1cf8>
   17744:	b	17748 <verify_monster@@Base+0x1cf4>
   17748:	b	1776c <verify_monster@@Base+0x1d18>
   1774c:	ldr	r0, [pc, #196]	; 17818 <verify_monster@@Base+0x1dc4>
   17750:	add	r0, pc, r0
   17754:	ldr	r1, [pc, #192]	; 1781c <verify_monster@@Base+0x1dc8>
   17758:	add	r1, pc, r1
   1775c:	ldr	r2, [pc, #188]	; 17820 <verify_monster@@Base+0x1dcc>
   17760:	add	r3, pc, r2
   17764:	movw	r2, #711	; 0x2c7
   17768:	bl	12e68 <__assert_fail@plt>
   1776c:	mov	r0, #11
   17770:	strh	r0, [sp, #16]
   17774:	ldr	r0, [fp, #-8]
   17778:	str	r0, [sp, #8]
   1777c:	bl	238a4 <main@@Base+0x4f0>
   17780:	ldr	lr, [sp, #8]
   17784:	sub	r0, lr, r0
   17788:	str	r0, [sp, #12]
   1778c:	ldr	r0, [sp, #12]
   17790:	bl	238c8 <main@@Base+0x514>
   17794:	ldrh	lr, [sp, #16]
   17798:	add	lr, lr, #3
   1779c:	lsl	lr, lr, #1
   177a0:	cmp	r0, lr
   177a4:	bcc	177c0 <verify_monster@@Base+0x1d6c>
   177a8:	ldr	r0, [sp, #12]
   177ac:	ldrh	r1, [sp, #16]
   177b0:	add	r0, r0, r1, lsl #1
   177b4:	add	r0, r0, #4
   177b8:	bl	238c8 <main@@Base+0x514>
   177bc:	strh	r0, [fp, #-14]
   177c0:	ldrsh	r0, [fp, #-14]
   177c4:	cmp	r0, #0
   177c8:	beq	17804 <verify_monster@@Base+0x1db0>
   177cc:	ldr	r0, [fp, #-8]
   177d0:	ldrh	r1, [fp, #-14]
   177d4:	add	r0, r0, r1
   177d8:	str	r0, [fp, #-12]
   177dc:	ldr	r0, [fp, #-12]
   177e0:	add	r0, r0, #4
   177e4:	ldr	r1, [fp, #-12]
   177e8:	str	r0, [sp, #4]
   177ec:	mov	r0, r1
   177f0:	bl	2386c <main@@Base+0x4b8>
   177f4:	ldr	r1, [sp, #4]
   177f8:	add	r0, r1, r0
   177fc:	str	r0, [fp, #-4]
   17800:	b	1780c <verify_monster@@Base+0x1db8>
   17804:	movw	r0, #0
   17808:	str	r0, [fp, #-4]
   1780c:	ldr	r0, [fp, #-4]
   17810:	mov	sp, fp
   17814:	pop	{fp, pc}
   17818:	muleq	r1, r9, sp
   1781c:			; <UNDEFINED> instruction: 0x0001cdb7
   17820:	ldrdeq	sp, [r1], -sp	; <UNPREDICTABLE>
   17824:	push	{fp, lr}
   17828:	mov	fp, sp
   1782c:	sub	sp, sp, #8
   17830:	str	r0, [sp, #4]
   17834:	ldr	r0, [sp, #4]
   17838:	movw	r1, #0
   1783c:	cmp	r0, r1
   17840:	beq	1785c <verify_monster@@Base+0x1e08>
   17844:	ldr	r0, [sp, #4]
   17848:	mvn	r1, #3
   1784c:	add	r0, r0, r1
   17850:	bl	2386c <main@@Base+0x4b8>
   17854:	str	r0, [sp]
   17858:	b	17868 <verify_monster@@Base+0x1e14>
   1785c:	movw	r0, #0
   17860:	str	r0, [sp]
   17864:	b	17868 <verify_monster@@Base+0x1e14>
   17868:	ldr	r0, [sp]
   1786c:	mov	sp, fp
   17870:	pop	{fp, pc}
   17874:	push	{fp, lr}
   17878:	mov	fp, sp
   1787c:	sub	sp, sp, #16
   17880:	str	r0, [fp, #-4]
   17884:	str	r1, [sp, #8]
   17888:	ldr	r0, [fp, #-4]
   1788c:	ldr	r1, [sp, #8]
   17890:	add	r0, r0, r1, lsl #2
   17894:	str	r0, [sp, #4]
   17898:	ldr	r0, [fp, #-4]
   1789c:	bl	2603c <main@@Base+0x2c88>
   178a0:	ldr	r1, [sp, #8]
   178a4:	cmp	r0, r1
   178a8:	bls	178b4 <verify_monster@@Base+0x1e60>
   178ac:	b	178b0 <verify_monster@@Base+0x1e5c>
   178b0:	b	178d4 <verify_monster@@Base+0x1e80>
   178b4:	ldr	r0, [pc, #60]	; 178f8 <verify_monster@@Base+0x1ea4>
   178b8:	add	r0, pc, r0
   178bc:	ldr	r1, [pc, #56]	; 178fc <verify_monster@@Base+0x1ea8>
   178c0:	add	r1, pc, r1
   178c4:	ldr	r2, [pc, #52]	; 17900 <verify_monster@@Base+0x1eac>
   178c8:	add	r3, pc, r2
   178cc:	movw	r2, #693	; 0x2b5
   178d0:	bl	12e68 <__assert_fail@plt>
   178d4:	ldr	r0, [sp, #4]
   178d8:	ldr	r1, [sp, #4]
   178dc:	str	r0, [sp]
   178e0:	mov	r0, r1
   178e4:	bl	2386c <main@@Base+0x4b8>
   178e8:	ldr	r1, [sp]
   178ec:	add	r0, r1, r0
   178f0:	mov	sp, fp
   178f4:	pop	{fp, pc}
   178f8:	andeq	sp, r1, ip, asr #12
   178fc:	andeq	ip, r1, pc, asr #24
   17900:	ldrdeq	sp, [r1], -fp
   17904:	push	{fp, lr}
   17908:	mov	fp, sp
   1790c:	sub	sp, sp, #32
   17910:	str	r0, [fp, #-8]
   17914:	movw	r0, #0
   17918:	strh	r0, [fp, #-14]
   1791c:	ldr	r0, [fp, #-8]
   17920:	movw	r1, #0
   17924:	cmp	r0, r1
   17928:	beq	17934 <verify_monster@@Base+0x1ee0>
   1792c:	b	17930 <verify_monster@@Base+0x1edc>
   17930:	b	17954 <verify_monster@@Base+0x1f00>
   17934:	ldr	r0, [pc, #196]	; 17a00 <verify_monster@@Base+0x1fac>
   17938:	add	r0, pc, r0
   1793c:	ldr	r1, [pc, #192]	; 17a04 <verify_monster@@Base+0x1fb0>
   17940:	add	r1, pc, r1
   17944:	ldr	r2, [pc, #188]	; 17a08 <verify_monster@@Base+0x1fb4>
   17948:	add	r3, pc, r2
   1794c:	movw	r2, #712	; 0x2c8
   17950:	bl	12e68 <__assert_fail@plt>
   17954:	mov	r0, #10
   17958:	strh	r0, [sp, #16]
   1795c:	ldr	r0, [fp, #-8]
   17960:	str	r0, [sp, #8]
   17964:	bl	238a4 <main@@Base+0x4f0>
   17968:	ldr	lr, [sp, #8]
   1796c:	sub	r0, lr, r0
   17970:	str	r0, [sp, #12]
   17974:	ldr	r0, [sp, #12]
   17978:	bl	238c8 <main@@Base+0x514>
   1797c:	ldrh	lr, [sp, #16]
   17980:	add	lr, lr, #3
   17984:	lsl	lr, lr, #1
   17988:	cmp	r0, lr
   1798c:	bcc	179a8 <verify_monster@@Base+0x1f54>
   17990:	ldr	r0, [sp, #12]
   17994:	ldrh	r1, [sp, #16]
   17998:	add	r0, r0, r1, lsl #1
   1799c:	add	r0, r0, #4
   179a0:	bl	238c8 <main@@Base+0x514>
   179a4:	strh	r0, [fp, #-14]
   179a8:	ldrsh	r0, [fp, #-14]
   179ac:	cmp	r0, #0
   179b0:	beq	179ec <verify_monster@@Base+0x1f98>
   179b4:	ldr	r0, [fp, #-8]
   179b8:	ldrh	r1, [fp, #-14]
   179bc:	add	r0, r0, r1
   179c0:	str	r0, [fp, #-12]
   179c4:	ldr	r0, [fp, #-12]
   179c8:	add	r0, r0, #4
   179cc:	ldr	r1, [fp, #-12]
   179d0:	str	r0, [sp, #4]
   179d4:	mov	r0, r1
   179d8:	bl	2386c <main@@Base+0x4b8>
   179dc:	ldr	r1, [sp, #4]
   179e0:	add	r0, r1, r0
   179e4:	str	r0, [fp, #-4]
   179e8:	b	179f4 <verify_monster@@Base+0x1fa0>
   179ec:	movw	r0, #0
   179f0:	str	r0, [fp, #-4]
   179f4:	ldr	r0, [fp, #-4]
   179f8:	mov	sp, fp
   179fc:	pop	{fp, pc}
   17a00:			; <UNDEFINED> instruction: 0x0001cbb1
   17a04:	andeq	ip, r1, pc, asr #23
   17a08:			; <UNDEFINED> instruction: 0x0001d8be
   17a0c:	push	{fp, lr}
   17a10:	mov	fp, sp
   17a14:	sub	sp, sp, #8
   17a18:	str	r0, [sp, #4]
   17a1c:	ldr	r0, [sp, #4]
   17a20:	movw	r1, #0
   17a24:	cmp	r0, r1
   17a28:	beq	17a44 <verify_monster@@Base+0x1ff0>
   17a2c:	ldr	r0, [sp, #4]
   17a30:	mvn	r1, #3
   17a34:	add	r0, r0, r1
   17a38:	bl	2386c <main@@Base+0x4b8>
   17a3c:	str	r0, [sp]
   17a40:	b	17a50 <verify_monster@@Base+0x1ffc>
   17a44:	movw	r0, #0
   17a48:	str	r0, [sp]
   17a4c:	b	17a50 <verify_monster@@Base+0x1ffc>
   17a50:	ldr	r0, [sp]
   17a54:	mov	sp, fp
   17a58:	pop	{fp, pc}
   17a5c:	push	{fp, lr}
   17a60:	mov	fp, sp
   17a64:	sub	sp, sp, #16
   17a68:	str	r0, [fp, #-4]
   17a6c:	str	r1, [sp, #8]
   17a70:	ldr	r0, [fp, #-4]
   17a74:	ldr	r1, [sp, #8]
   17a78:	add	r0, r0, r1, lsl #2
   17a7c:	str	r0, [sp, #4]
   17a80:	ldr	r0, [fp, #-4]
   17a84:	bl	2603c <main@@Base+0x2c88>
   17a88:	ldr	r1, [sp, #8]
   17a8c:	cmp	r0, r1
   17a90:	bls	17a9c <verify_monster@@Base+0x2048>
   17a94:	b	17a98 <verify_monster@@Base+0x2044>
   17a98:	b	17abc <verify_monster@@Base+0x2068>
   17a9c:	ldr	r0, [pc, #64]	; 17ae4 <verify_monster@@Base+0x2090>
   17aa0:	add	r0, pc, r0
   17aa4:	ldr	r1, [pc, #60]	; 17ae8 <verify_monster@@Base+0x2094>
   17aa8:	add	r1, pc, r1
   17aac:	ldr	r2, [pc, #56]	; 17aec <verify_monster@@Base+0x2098>
   17ab0:	add	r3, pc, r2
   17ab4:	movw	r2, #108	; 0x6c
   17ab8:	bl	12e68 <__assert_fail@plt>
   17abc:	ldr	r0, [sp, #4]
   17ac0:	ldr	r1, [sp, #4]
   17ac4:	str	r0, [sp]
   17ac8:	mov	r0, r1
   17acc:	bl	2386c <main@@Base+0x4b8>
   17ad0:	ldr	r1, [sp]
   17ad4:	add	r0, r1, r0
   17ad8:	add	r0, r0, #4
   17adc:	mov	sp, fp
   17ae0:	pop	{fp, pc}
   17ae4:	andeq	sp, r1, r4, ror #8
   17ae8:	muleq	r1, r3, r4
   17aec:			; <UNDEFINED> instruction: 0x0001d7b8
   17af0:	push	{fp, lr}
   17af4:	mov	fp, sp
   17af8:	sub	sp, sp, #16
   17afc:	str	r0, [fp, #-4]
   17b00:	movw	r0, #0
   17b04:	strh	r0, [fp, #-6]
   17b08:	ldr	r0, [fp, #-4]
   17b0c:	movw	r1, #0
   17b10:	cmp	r0, r1
   17b14:	beq	17b20 <verify_monster@@Base+0x20cc>
   17b18:	b	17b1c <verify_monster@@Base+0x20c8>
   17b1c:	b	17b40 <verify_monster@@Base+0x20ec>
   17b20:	ldr	r0, [pc, #136]	; 17bb0 <verify_monster@@Base+0x215c>
   17b24:	add	r0, pc, r0
   17b28:	ldr	r1, [pc, #132]	; 17bb4 <verify_monster@@Base+0x2160>
   17b2c:	add	r1, pc, r1
   17b30:	ldr	r2, [pc, #128]	; 17bb8 <verify_monster@@Base+0x2164>
   17b34:	add	r3, pc, r2
   17b38:	movw	r2, #714	; 0x2ca
   17b3c:	bl	12e68 <__assert_fail@plt>
   17b40:	mov	r0, #24
   17b44:	strh	r0, [sp, #8]
   17b48:	ldr	r0, [fp, #-4]
   17b4c:	str	r0, [sp]
   17b50:	bl	238a4 <main@@Base+0x4f0>
   17b54:	ldr	lr, [sp]
   17b58:	sub	r0, lr, r0
   17b5c:	str	r0, [sp, #4]
   17b60:	ldr	r0, [sp, #4]
   17b64:	bl	238c8 <main@@Base+0x514>
   17b68:	ldrh	lr, [sp, #8]
   17b6c:	add	lr, lr, #3
   17b70:	lsl	lr, lr, #1
   17b74:	cmp	r0, lr
   17b78:	bcc	17b94 <verify_monster@@Base+0x2140>
   17b7c:	ldr	r0, [sp, #4]
   17b80:	ldrh	r1, [sp, #8]
   17b84:	add	r0, r0, r1, lsl #1
   17b88:	add	r0, r0, #4
   17b8c:	bl	238c8 <main@@Base+0x514>
   17b90:	strh	r0, [fp, #-6]
   17b94:	ldrh	r0, [fp, #-6]
   17b98:	cmp	r0, #0
   17b9c:	movw	r0, #0
   17ba0:	movne	r0, #1
   17ba4:	and	r0, r0, #1
   17ba8:	mov	sp, fp
   17bac:	pop	{fp, pc}
   17bb0:	andeq	ip, r1, r5, asr #19
   17bb4:	andeq	ip, r1, r3, ror #19
   17bb8:	andeq	sp, r1, r5, lsl #15
   17bbc:	push	{fp, lr}
   17bc0:	mov	fp, sp
   17bc4:	sub	sp, sp, #32
   17bc8:	str	r0, [fp, #-8]
   17bcc:	movw	r0, #0
   17bd0:	strh	r0, [fp, #-14]
   17bd4:	ldr	r0, [fp, #-8]
   17bd8:	movw	r1, #0
   17bdc:	cmp	r0, r1
   17be0:	beq	17bec <verify_monster@@Base+0x2198>
   17be4:	b	17be8 <verify_monster@@Base+0x2194>
   17be8:	b	17c0c <verify_monster@@Base+0x21b8>
   17bec:	ldr	r0, [pc, #196]	; 17cb8 <verify_monster@@Base+0x2264>
   17bf0:	add	r0, pc, r0
   17bf4:	ldr	r1, [pc, #192]	; 17cbc <verify_monster@@Base+0x2268>
   17bf8:	add	r1, pc, r1
   17bfc:	ldr	r2, [pc, #188]	; 17cc0 <verify_monster@@Base+0x226c>
   17c00:	add	r3, pc, r2
   17c04:	movw	r2, #714	; 0x2ca
   17c08:	bl	12e68 <__assert_fail@plt>
   17c0c:	mov	r0, #24
   17c10:	strh	r0, [sp, #16]
   17c14:	ldr	r0, [fp, #-8]
   17c18:	str	r0, [sp, #8]
   17c1c:	bl	238a4 <main@@Base+0x4f0>
   17c20:	ldr	lr, [sp, #8]
   17c24:	sub	r0, lr, r0
   17c28:	str	r0, [sp, #12]
   17c2c:	ldr	r0, [sp, #12]
   17c30:	bl	238c8 <main@@Base+0x514>
   17c34:	ldrh	lr, [sp, #16]
   17c38:	add	lr, lr, #3
   17c3c:	lsl	lr, lr, #1
   17c40:	cmp	r0, lr
   17c44:	bcc	17c60 <verify_monster@@Base+0x220c>
   17c48:	ldr	r0, [sp, #12]
   17c4c:	ldrh	r1, [sp, #16]
   17c50:	add	r0, r0, r1, lsl #1
   17c54:	add	r0, r0, #4
   17c58:	bl	238c8 <main@@Base+0x514>
   17c5c:	strh	r0, [fp, #-14]
   17c60:	ldrsh	r0, [fp, #-14]
   17c64:	cmp	r0, #0
   17c68:	beq	17ca4 <verify_monster@@Base+0x2250>
   17c6c:	ldr	r0, [fp, #-8]
   17c70:	ldrh	r1, [fp, #-14]
   17c74:	add	r0, r0, r1
   17c78:	str	r0, [fp, #-12]
   17c7c:	ldr	r0, [fp, #-12]
   17c80:	add	r0, r0, #4
   17c84:	ldr	r1, [fp, #-12]
   17c88:	str	r0, [sp, #4]
   17c8c:	mov	r0, r1
   17c90:	bl	2386c <main@@Base+0x4b8>
   17c94:	ldr	r1, [sp, #4]
   17c98:	add	r0, r1, r0
   17c9c:	str	r0, [fp, #-4]
   17ca0:	b	17cac <verify_monster@@Base+0x2258>
   17ca4:	movw	r0, #0
   17ca8:	str	r0, [fp, #-4]
   17cac:	ldr	r0, [fp, #-4]
   17cb0:	mov	sp, fp
   17cb4:	pop	{fp, pc}
   17cb8:	strdeq	ip, [r1], -r9
   17cbc:	andeq	ip, r1, r7, lsl r9
   17cc0:	andeq	sp, r1, r0, lsl r7
   17cc4:	push	{fp, lr}
   17cc8:	mov	fp, sp
   17ccc:	sub	sp, sp, #8
   17cd0:	str	r0, [sp, #4]
   17cd4:	ldr	r0, [sp, #4]
   17cd8:	bl	2603c <main@@Base+0x2c88>
   17cdc:	mov	sp, fp
   17ce0:	pop	{fp, pc}
   17ce4:	push	{fp, lr}
   17ce8:	mov	fp, sp
   17cec:	sub	sp, sp, #8
   17cf0:	str	r0, [sp, #4]
   17cf4:	str	r1, [sp]
   17cf8:	ldr	r0, [sp, #4]
   17cfc:	bl	2603c <main@@Base+0x2c88>
   17d00:	ldr	r1, [sp]
   17d04:	cmp	r0, r1
   17d08:	bls	17d14 <verify_monster@@Base+0x22c0>
   17d0c:	b	17d10 <verify_monster@@Base+0x22bc>
   17d10:	b	17d34 <verify_monster@@Base+0x22e0>
   17d14:	ldr	r0, [pc, #52]	; 17d50 <verify_monster@@Base+0x22fc>
   17d18:	add	r0, pc, r0
   17d1c:	ldr	r1, [pc, #48]	; 17d54 <verify_monster@@Base+0x2300>
   17d20:	add	r1, pc, r1
   17d24:	ldr	r2, [pc, #44]	; 17d58 <verify_monster@@Base+0x2304>
   17d28:	add	r3, pc, r2
   17d2c:	movw	r2, #394	; 0x18a
   17d30:	bl	12e68 <__assert_fail@plt>
   17d34:	ldr	r0, [sp, #4]
   17d38:	ldr	r1, [sp]
   17d3c:	add	r0, r0, r1
   17d40:	bl	2608c <main@@Base+0x2cd8>
   17d44:	and	r0, r0, #255	; 0xff
   17d48:	mov	sp, fp
   17d4c:	pop	{fp, pc}
   17d50:	andeq	sp, r1, ip, ror #3
   17d54:	andeq	sp, r1, fp, lsl r2
   17d58:	andeq	sp, r1, r8, asr #12
   17d5c:	push	{fp, lr}
   17d60:	mov	fp, sp
   17d64:	sub	sp, sp, #24
   17d68:	str	r0, [fp, #-4]
   17d6c:	movw	r0, #0
   17d70:	strh	r0, [fp, #-6]
   17d74:	ldr	r0, [fp, #-4]
   17d78:	movw	r1, #0
   17d7c:	cmp	r0, r1
   17d80:	beq	17d8c <verify_monster@@Base+0x2338>
   17d84:	b	17d88 <verify_monster@@Base+0x2334>
   17d88:	b	17dac <verify_monster@@Base+0x2358>
   17d8c:	ldr	r0, [pc, #176]	; 17e44 <verify_monster@@Base+0x23f0>
   17d90:	add	r0, pc, r0
   17d94:	ldr	r1, [pc, #172]	; 17e48 <verify_monster@@Base+0x23f4>
   17d98:	add	r1, pc, r1
   17d9c:	ldr	r2, [pc, #168]	; 17e4c <verify_monster@@Base+0x23f8>
   17da0:	add	r3, pc, r2
   17da4:	movw	r2, #717	; 0x2cd
   17da8:	bl	12e68 <__assert_fail@plt>
   17dac:	mov	r0, #7
   17db0:	strh	r0, [fp, #-8]
   17db4:	ldr	r0, [fp, #-4]
   17db8:	str	r0, [sp, #8]
   17dbc:	bl	238a4 <main@@Base+0x4f0>
   17dc0:	ldr	lr, [sp, #8]
   17dc4:	sub	r0, lr, r0
   17dc8:	str	r0, [sp, #12]
   17dcc:	ldr	r0, [sp, #12]
   17dd0:	bl	238c8 <main@@Base+0x514>
   17dd4:	ldrh	lr, [fp, #-8]
   17dd8:	add	lr, lr, #3
   17ddc:	lsl	lr, lr, #1
   17de0:	cmp	r0, lr
   17de4:	bcc	17e00 <verify_monster@@Base+0x23ac>
   17de8:	ldr	r0, [sp, #12]
   17dec:	ldrh	r1, [fp, #-8]
   17df0:	add	r0, r0, r1, lsl #1
   17df4:	add	r0, r0, #4
   17df8:	bl	238c8 <main@@Base+0x514>
   17dfc:	strh	r0, [fp, #-6]
   17e00:	ldrh	r0, [fp, #-6]
   17e04:	cmp	r0, #0
   17e08:	beq	17e28 <verify_monster@@Base+0x23d4>
   17e0c:	ldr	r0, [fp, #-4]
   17e10:	ldrh	r1, [fp, #-6]
   17e14:	add	r0, r0, r1
   17e18:	bl	260c8 <main@@Base+0x2d14>
   17e1c:	and	r0, r0, #255	; 0xff
   17e20:	str	r0, [sp, #4]
   17e24:	b	17e34 <verify_monster@@Base+0x23e0>
   17e28:	movw	r0, #0
   17e2c:	str	r0, [sp, #4]
   17e30:	b	17e34 <verify_monster@@Base+0x23e0>
   17e34:	ldr	r0, [sp, #4]
   17e38:	and	r0, r0, #255	; 0xff
   17e3c:	mov	sp, fp
   17e40:	pop	{fp, pc}
   17e44:	andeq	ip, r1, r9, asr r7
   17e48:	andeq	ip, r1, r7, ror r7
   17e4c:	andeq	sp, r1, fp, lsl r6
   17e50:	push	{fp, lr}
   17e54:	mov	fp, sp
   17e58:	sub	sp, sp, #32
   17e5c:	str	r0, [fp, #-8]
   17e60:	movw	r0, #0
   17e64:	strh	r0, [fp, #-14]
   17e68:	ldr	r0, [fp, #-8]
   17e6c:	movw	r1, #0
   17e70:	cmp	r0, r1
   17e74:	beq	17e80 <verify_monster@@Base+0x242c>
   17e78:	b	17e7c <verify_monster@@Base+0x2428>
   17e7c:	b	17ea0 <verify_monster@@Base+0x244c>
   17e80:	ldr	r0, [pc, #192]	; 17f48 <verify_monster@@Base+0x24f4>
   17e84:	add	r0, pc, r0
   17e88:	ldr	r1, [pc, #188]	; 17f4c <verify_monster@@Base+0x24f8>
   17e8c:	add	r1, pc, r1
   17e90:	ldr	r2, [pc, #184]	; 17f50 <verify_monster@@Base+0x24fc>
   17e94:	add	r3, pc, r2
   17e98:	movw	r2, #717	; 0x2cd
   17e9c:	bl	12e68 <__assert_fail@plt>
   17ea0:	mov	r0, #8
   17ea4:	strh	r0, [sp, #16]
   17ea8:	ldr	r0, [fp, #-8]
   17eac:	str	r0, [sp, #8]
   17eb0:	bl	238a4 <main@@Base+0x4f0>
   17eb4:	ldr	lr, [sp, #8]
   17eb8:	sub	r0, lr, r0
   17ebc:	str	r0, [sp, #12]
   17ec0:	ldr	r0, [sp, #12]
   17ec4:	bl	238c8 <main@@Base+0x514>
   17ec8:	ldrh	lr, [sp, #16]
   17ecc:	add	lr, lr, #3
   17ed0:	lsl	lr, lr, #1
   17ed4:	cmp	r0, lr
   17ed8:	bcc	17ef4 <verify_monster@@Base+0x24a0>
   17edc:	ldr	r0, [sp, #12]
   17ee0:	ldrh	r1, [sp, #16]
   17ee4:	add	r0, r0, r1, lsl #1
   17ee8:	add	r0, r0, #4
   17eec:	bl	238c8 <main@@Base+0x514>
   17ef0:	strh	r0, [fp, #-14]
   17ef4:	ldrsh	r0, [fp, #-14]
   17ef8:	cmp	r0, #0
   17efc:	beq	17f34 <verify_monster@@Base+0x24e0>
   17f00:	ldr	r0, [fp, #-8]
   17f04:	ldrh	r1, [fp, #-14]
   17f08:	add	r0, r0, r1
   17f0c:	str	r0, [fp, #-12]
   17f10:	ldr	r0, [fp, #-12]
   17f14:	ldr	r1, [fp, #-12]
   17f18:	str	r0, [sp, #4]
   17f1c:	mov	r0, r1
   17f20:	bl	2386c <main@@Base+0x4b8>
   17f24:	ldr	r1, [sp, #4]
   17f28:	add	r0, r1, r0
   17f2c:	str	r0, [fp, #-4]
   17f30:	b	17f3c <verify_monster@@Base+0x24e8>
   17f34:	movw	r0, #0
   17f38:	str	r0, [fp, #-4]
   17f3c:	ldr	r0, [fp, #-4]
   17f40:	mov	sp, fp
   17f44:	pop	{fp, pc}
   17f48:	andeq	ip, r1, r5, ror #12
   17f4c:	andeq	ip, r1, r3, lsl #13
   17f50:	andeq	sp, r1, r8, lsl #11
   17f54:	push	{fp, lr}
   17f58:	mov	fp, sp
   17f5c:	sub	sp, sp, #32
   17f60:	str	r0, [fp, #-8]
   17f64:	movw	r0, #0
   17f68:	strh	r0, [fp, #-14]
   17f6c:	ldr	r0, [fp, #-8]
   17f70:	movw	r1, #0
   17f74:	cmp	r0, r1
   17f78:	beq	17f84 <verify_monster@@Base+0x2530>
   17f7c:	b	17f80 <verify_monster@@Base+0x252c>
   17f80:	b	17fa4 <verify_monster@@Base+0x2550>
   17f84:	ldr	r0, [pc, #192]	; 1804c <verify_monster@@Base+0x25f8>
   17f88:	add	r0, pc, r0
   17f8c:	ldr	r1, [pc, #188]	; 18050 <verify_monster@@Base+0x25fc>
   17f90:	add	r1, pc, r1
   17f94:	ldr	r2, [pc, #184]	; 18054 <verify_monster@@Base+0x2600>
   17f98:	add	r3, pc, r2
   17f9c:	movw	r2, #716	; 0x2cc
   17fa0:	bl	12e68 <__assert_fail@plt>
   17fa4:	mov	r0, #12
   17fa8:	strh	r0, [sp, #16]
   17fac:	ldr	r0, [fp, #-8]
   17fb0:	str	r0, [sp, #8]
   17fb4:	bl	238a4 <main@@Base+0x4f0>
   17fb8:	ldr	lr, [sp, #8]
   17fbc:	sub	r0, lr, r0
   17fc0:	str	r0, [sp, #12]
   17fc4:	ldr	r0, [sp, #12]
   17fc8:	bl	238c8 <main@@Base+0x514>
   17fcc:	ldrh	lr, [sp, #16]
   17fd0:	add	lr, lr, #3
   17fd4:	lsl	lr, lr, #1
   17fd8:	cmp	r0, lr
   17fdc:	bcc	17ff8 <verify_monster@@Base+0x25a4>
   17fe0:	ldr	r0, [sp, #12]
   17fe4:	ldrh	r1, [sp, #16]
   17fe8:	add	r0, r0, r1, lsl #1
   17fec:	add	r0, r0, #4
   17ff0:	bl	238c8 <main@@Base+0x514>
   17ff4:	strh	r0, [fp, #-14]
   17ff8:	ldrsh	r0, [fp, #-14]
   17ffc:	cmp	r0, #0
   18000:	beq	18038 <verify_monster@@Base+0x25e4>
   18004:	ldr	r0, [fp, #-8]
   18008:	ldrh	r1, [fp, #-14]
   1800c:	add	r0, r0, r1
   18010:	str	r0, [fp, #-12]
   18014:	ldr	r0, [fp, #-12]
   18018:	ldr	r1, [fp, #-12]
   1801c:	str	r0, [sp, #4]
   18020:	mov	r0, r1
   18024:	bl	2386c <main@@Base+0x4b8>
   18028:	ldr	r1, [sp, #4]
   1802c:	add	r0, r1, r0
   18030:	str	r0, [fp, #-4]
   18034:	b	18040 <verify_monster@@Base+0x25ec>
   18038:	movw	r0, #0
   1803c:	str	r0, [fp, #-4]
   18040:	ldr	r0, [fp, #-4]
   18044:	mov	sp, fp
   18048:	pop	{fp, pc}
   1804c:	andeq	ip, r1, r1, ror #10
   18050:	andeq	ip, r1, pc, ror r5
   18054:	ldrdeq	sp, [r1], -r6
   18058:	push	{fp, lr}
   1805c:	mov	fp, sp
   18060:	sub	sp, sp, #8
   18064:	str	r1, [sp, #4]
   18068:	mov	r1, r0
   1806c:	str	r0, [sp]
   18070:	mov	r0, r1
   18074:	movw	r1, #0
   18078:	and	r1, r1, #255	; 0xff
   1807c:	movw	r2, #8
   18080:	bl	12e2c <memset@plt>
   18084:	ldr	r0, [sp, #4]
   18088:	bl	17d5c <verify_monster@@Base+0x2308>
   1808c:	ldr	r1, [sp]
   18090:	strb	r0, [r1]
   18094:	ldrb	r0, [r1]
   18098:	cmp	r0, #0
   1809c:	bne	180a4 <verify_monster@@Base+0x2650>
   180a0:	b	180b4 <verify_monster@@Base+0x2660>
   180a4:	ldr	r0, [sp, #4]
   180a8:	bl	17e50 <verify_monster@@Base+0x23fc>
   180ac:	ldr	lr, [sp]
   180b0:	str	r0, [lr, #4]
   180b4:	mov	sp, fp
   180b8:	pop	{fp, pc}
   180bc:	push	{fp, lr}
   180c0:	mov	fp, sp
   180c4:	sub	sp, sp, #24
   180c8:	str	r0, [fp, #-4]
   180cc:	movw	r0, #0
   180d0:	strh	r0, [fp, #-6]
   180d4:	ldr	r0, [fp, #-4]
   180d8:	movw	r1, #0
   180dc:	cmp	r0, r1
   180e0:	beq	180ec <verify_monster@@Base+0x2698>
   180e4:	b	180e8 <verify_monster@@Base+0x2694>
   180e8:	b	1810c <verify_monster@@Base+0x26b8>
   180ec:	ldr	r0, [pc, #176]	; 181a4 <verify_monster@@Base+0x2750>
   180f0:	add	r0, pc, r0
   180f4:	ldr	r1, [pc, #172]	; 181a8 <verify_monster@@Base+0x2754>
   180f8:	add	r1, pc, r1
   180fc:	ldr	r2, [pc, #168]	; 181ac <verify_monster@@Base+0x2758>
   18100:	add	r3, pc, r2
   18104:	movw	r2, #723	; 0x2d3
   18108:	bl	12e68 <__assert_fail@plt>
   1810c:	mov	r0, #15
   18110:	strh	r0, [fp, #-8]
   18114:	ldr	r0, [fp, #-4]
   18118:	str	r0, [sp, #8]
   1811c:	bl	238a4 <main@@Base+0x4f0>
   18120:	ldr	lr, [sp, #8]
   18124:	sub	r0, lr, r0
   18128:	str	r0, [sp, #12]
   1812c:	ldr	r0, [sp, #12]
   18130:	bl	238c8 <main@@Base+0x514>
   18134:	ldrh	lr, [fp, #-8]
   18138:	add	lr, lr, #3
   1813c:	lsl	lr, lr, #1
   18140:	cmp	r0, lr
   18144:	bcc	18160 <verify_monster@@Base+0x270c>
   18148:	ldr	r0, [sp, #12]
   1814c:	ldrh	r1, [fp, #-8]
   18150:	add	r0, r0, r1, lsl #1
   18154:	add	r0, r0, #4
   18158:	bl	238c8 <main@@Base+0x514>
   1815c:	strh	r0, [fp, #-6]
   18160:	ldrh	r0, [fp, #-6]
   18164:	cmp	r0, #0
   18168:	beq	18188 <verify_monster@@Base+0x2734>
   1816c:	ldr	r0, [fp, #-4]
   18170:	ldrh	r1, [fp, #-6]
   18174:	add	r0, r0, r1
   18178:	bl	2608c <main@@Base+0x2cd8>
   1817c:	and	r0, r0, #255	; 0xff
   18180:	str	r0, [sp, #4]
   18184:	b	18194 <verify_monster@@Base+0x2740>
   18188:	movw	r0, #1
   1818c:	str	r0, [sp, #4]
   18190:	b	18194 <verify_monster@@Base+0x2740>
   18194:	ldr	r0, [sp, #4]
   18198:	and	r0, r0, #255	; 0xff
   1819c:	mov	sp, fp
   181a0:	pop	{fp, pc}
   181a4:	strdeq	ip, [r1], -r9
   181a8:	andeq	ip, r1, r7, lsl r4
   181ac:	andeq	sp, r1, sl, asr #7
   181b0:	push	{fp, lr}
   181b4:	mov	fp, sp
   181b8:	sub	sp, sp, #16
   181bc:	str	r0, [fp, #-4]
   181c0:	movw	r0, #0
   181c4:	strh	r0, [fp, #-6]
   181c8:	ldr	r0, [fp, #-4]
   181cc:	movw	r1, #0
   181d0:	cmp	r0, r1
   181d4:	beq	181e0 <verify_monster@@Base+0x278c>
   181d8:	b	181dc <verify_monster@@Base+0x2788>
   181dc:	b	18200 <verify_monster@@Base+0x27ac>
   181e0:	ldr	r0, [pc, #136]	; 18270 <verify_monster@@Base+0x281c>
   181e4:	add	r0, pc, r0
   181e8:	ldr	r1, [pc, #132]	; 18274 <verify_monster@@Base+0x2820>
   181ec:	add	r1, pc, r1
   181f0:	ldr	r2, [pc, #128]	; 18278 <verify_monster@@Base+0x2824>
   181f4:	add	r3, pc, r2
   181f8:	movw	r2, #722	; 0x2d2
   181fc:	bl	12e68 <__assert_fail@plt>
   18200:	mov	r0, #14
   18204:	strh	r0, [sp, #8]
   18208:	ldr	r0, [fp, #-4]
   1820c:	str	r0, [sp]
   18210:	bl	238a4 <main@@Base+0x4f0>
   18214:	ldr	lr, [sp]
   18218:	sub	r0, lr, r0
   1821c:	str	r0, [sp, #4]
   18220:	ldr	r0, [sp, #4]
   18224:	bl	238c8 <main@@Base+0x514>
   18228:	ldrh	lr, [sp, #8]
   1822c:	add	lr, lr, #3
   18230:	lsl	lr, lr, #1
   18234:	cmp	r0, lr
   18238:	bcc	18254 <verify_monster@@Base+0x2800>
   1823c:	ldr	r0, [sp, #4]
   18240:	ldrh	r1, [sp, #8]
   18244:	add	r0, r0, r1, lsl #1
   18248:	add	r0, r0, #4
   1824c:	bl	238c8 <main@@Base+0x514>
   18250:	strh	r0, [fp, #-6]
   18254:	ldrh	r0, [fp, #-6]
   18258:	cmp	r0, #0
   1825c:	movw	r0, #0
   18260:	movne	r0, #1
   18264:	and	r0, r0, #1
   18268:	mov	sp, fp
   1826c:	pop	{fp, pc}
   18270:	andeq	ip, r1, r5, lsl #6
   18274:	andeq	ip, r1, r3, lsr #6
   18278:	andeq	sp, r1, r9, lsr #6
   1827c:	push	{fp, lr}
   18280:	mov	fp, sp
   18284:	sub	sp, sp, #32
   18288:	str	r0, [fp, #-8]
   1828c:	movw	r0, #0
   18290:	strh	r0, [fp, #-14]
   18294:	ldr	r0, [fp, #-8]
   18298:	movw	r1, #0
   1829c:	cmp	r0, r1
   182a0:	beq	182ac <verify_monster@@Base+0x2858>
   182a4:	b	182a8 <verify_monster@@Base+0x2854>
   182a8:	b	182cc <verify_monster@@Base+0x2878>
   182ac:	ldr	r0, [pc, #192]	; 18374 <verify_monster@@Base+0x2920>
   182b0:	add	r0, pc, r0
   182b4:	ldr	r1, [pc, #188]	; 18378 <verify_monster@@Base+0x2924>
   182b8:	add	r1, pc, r1
   182bc:	ldr	r2, [pc, #184]	; 1837c <verify_monster@@Base+0x2928>
   182c0:	add	r3, pc, r2
   182c4:	movw	r2, #722	; 0x2d2
   182c8:	bl	12e68 <__assert_fail@plt>
   182cc:	mov	r0, #14
   182d0:	strh	r0, [sp, #16]
   182d4:	ldr	r0, [fp, #-8]
   182d8:	str	r0, [sp, #8]
   182dc:	bl	238a4 <main@@Base+0x4f0>
   182e0:	ldr	lr, [sp, #8]
   182e4:	sub	r0, lr, r0
   182e8:	str	r0, [sp, #12]
   182ec:	ldr	r0, [sp, #12]
   182f0:	bl	238c8 <main@@Base+0x514>
   182f4:	ldrh	lr, [sp, #16]
   182f8:	add	lr, lr, #3
   182fc:	lsl	lr, lr, #1
   18300:	cmp	r0, lr
   18304:	bcc	18320 <verify_monster@@Base+0x28cc>
   18308:	ldr	r0, [sp, #12]
   1830c:	ldrh	r1, [sp, #16]
   18310:	add	r0, r0, r1, lsl #1
   18314:	add	r0, r0, #4
   18318:	bl	238c8 <main@@Base+0x514>
   1831c:	strh	r0, [fp, #-14]
   18320:	ldrsh	r0, [fp, #-14]
   18324:	cmp	r0, #0
   18328:	beq	18360 <verify_monster@@Base+0x290c>
   1832c:	ldr	r0, [fp, #-8]
   18330:	ldrh	r1, [fp, #-14]
   18334:	add	r0, r0, r1
   18338:	str	r0, [fp, #-12]
   1833c:	ldr	r0, [fp, #-12]
   18340:	ldr	r1, [fp, #-12]
   18344:	str	r0, [sp, #4]
   18348:	mov	r0, r1
   1834c:	bl	2386c <main@@Base+0x4b8>
   18350:	ldr	r1, [sp, #4]
   18354:	add	r0, r1, r0
   18358:	str	r0, [fp, #-4]
   1835c:	b	18368 <verify_monster@@Base+0x2914>
   18360:	movw	r0, #0
   18364:	str	r0, [fp, #-4]
   18368:	ldr	r0, [fp, #-4]
   1836c:	mov	sp, fp
   18370:	pop	{fp, pc}
   18374:	andeq	ip, r1, r9, lsr r2
   18378:	andeq	ip, r1, r7, asr r2
   1837c:	andeq	sp, r1, sp, lsr #5
   18380:	push	{fp, lr}
   18384:	mov	fp, sp
   18388:	sub	sp, sp, #16
   1838c:	str	r0, [fp, #-4]
   18390:	movw	r0, #0
   18394:	strh	r0, [fp, #-6]
   18398:	ldr	r0, [fp, #-4]
   1839c:	movw	r1, #0
   183a0:	cmp	r0, r1
   183a4:	beq	183b0 <verify_monster@@Base+0x295c>
   183a8:	b	183ac <verify_monster@@Base+0x2958>
   183ac:	b	183d0 <verify_monster@@Base+0x297c>
   183b0:	ldr	r0, [pc, #136]	; 18440 <verify_monster@@Base+0x29ec>
   183b4:	add	r0, pc, r0
   183b8:	ldr	r1, [pc, #132]	; 18444 <verify_monster@@Base+0x29f0>
   183bc:	add	r1, pc, r1
   183c0:	ldr	r2, [pc, #128]	; 18448 <verify_monster@@Base+0x29f4>
   183c4:	add	r3, pc, r2
   183c8:	movw	r2, #607	; 0x25f
   183cc:	bl	12e68 <__assert_fail@plt>
   183d0:	mov	r0, #0
   183d4:	strh	r0, [sp, #8]
   183d8:	ldr	r0, [fp, #-4]
   183dc:	str	r0, [sp]
   183e0:	bl	238a4 <main@@Base+0x4f0>
   183e4:	ldr	lr, [sp]
   183e8:	sub	r0, lr, r0
   183ec:	str	r0, [sp, #4]
   183f0:	ldr	r0, [sp, #4]
   183f4:	bl	238c8 <main@@Base+0x514>
   183f8:	ldrh	lr, [sp, #8]
   183fc:	add	lr, lr, #3
   18400:	lsl	lr, lr, #1
   18404:	cmp	r0, lr
   18408:	bcc	18424 <verify_monster@@Base+0x29d0>
   1840c:	ldr	r0, [sp, #4]
   18410:	ldrh	r1, [sp, #8]
   18414:	add	r0, r0, r1, lsl #1
   18418:	add	r0, r0, #4
   1841c:	bl	238c8 <main@@Base+0x514>
   18420:	strh	r0, [fp, #-6]
   18424:	ldrh	r0, [fp, #-6]
   18428:	cmp	r0, #0
   1842c:	movw	r0, #0
   18430:	movne	r0, #1
   18434:	and	r0, r0, #1
   18438:	mov	sp, fp
   1843c:	pop	{fp, pc}
   18440:	andeq	ip, r1, r5, lsr r1
   18444:	andeq	ip, r1, r3, asr r1
   18448:	andeq	sp, r1, r6, lsl #4
   1844c:	push	{fp, lr}
   18450:	mov	fp, sp
   18454:	sub	sp, sp, #16
   18458:	str	r0, [fp, #-4]
   1845c:	movw	r0, #0
   18460:	strh	r0, [fp, #-6]
   18464:	ldr	r0, [fp, #-4]
   18468:	movw	r1, #0
   1846c:	cmp	r0, r1
   18470:	beq	1847c <verify_monster@@Base+0x2a28>
   18474:	b	18478 <verify_monster@@Base+0x2a24>
   18478:	b	1849c <verify_monster@@Base+0x2a48>
   1847c:	ldr	r0, [pc, #136]	; 1850c <verify_monster@@Base+0x2ab8>
   18480:	add	r0, pc, r0
   18484:	ldr	r1, [pc, #132]	; 18510 <verify_monster@@Base+0x2abc>
   18488:	add	r1, pc, r1
   1848c:	ldr	r2, [pc, #128]	; 18514 <verify_monster@@Base+0x2ac0>
   18490:	add	r3, pc, r2
   18494:	movw	r2, #608	; 0x260
   18498:	bl	12e68 <__assert_fail@plt>
   1849c:	mov	r0, #1
   184a0:	strh	r0, [sp, #8]
   184a4:	ldr	r0, [fp, #-4]
   184a8:	str	r0, [sp]
   184ac:	bl	238a4 <main@@Base+0x4f0>
   184b0:	ldr	lr, [sp]
   184b4:	sub	r0, lr, r0
   184b8:	str	r0, [sp, #4]
   184bc:	ldr	r0, [sp, #4]
   184c0:	bl	238c8 <main@@Base+0x514>
   184c4:	ldrh	lr, [sp, #8]
   184c8:	add	lr, lr, #3
   184cc:	lsl	lr, lr, #1
   184d0:	cmp	r0, lr
   184d4:	bcc	184f0 <verify_monster@@Base+0x2a9c>
   184d8:	ldr	r0, [sp, #4]
   184dc:	ldrh	r1, [sp, #8]
   184e0:	add	r0, r0, r1, lsl #1
   184e4:	add	r0, r0, #4
   184e8:	bl	238c8 <main@@Base+0x514>
   184ec:	strh	r0, [fp, #-6]
   184f0:	ldrh	r0, [fp, #-6]
   184f4:	cmp	r0, #0
   184f8:	movw	r0, #0
   184fc:	movne	r0, #1
   18500:	and	r0, r0, #1
   18504:	mov	sp, fp
   18508:	pop	{fp, pc}
   1850c:	andeq	ip, r1, r9, rrx
   18510:	andeq	ip, r1, r7, lsl #1
   18514:	andeq	sp, r1, sp, ror r1
   18518:	push	{fp, lr}
   1851c:	mov	fp, sp
   18520:	sub	sp, sp, #16
   18524:	str	r0, [fp, #-4]
   18528:	movw	r0, #0
   1852c:	strh	r0, [fp, #-6]
   18530:	ldr	r0, [fp, #-4]
   18534:	movw	r1, #0
   18538:	cmp	r0, r1
   1853c:	beq	18548 <verify_monster@@Base+0x2af4>
   18540:	b	18544 <verify_monster@@Base+0x2af0>
   18544:	b	18568 <verify_monster@@Base+0x2b14>
   18548:	ldr	r0, [pc, #136]	; 185d8 <verify_monster@@Base+0x2b84>
   1854c:	add	r0, pc, r0
   18550:	ldr	r1, [pc, #132]	; 185dc <verify_monster@@Base+0x2b88>
   18554:	add	r1, pc, r1
   18558:	ldr	r2, [pc, #128]	; 185e0 <verify_monster@@Base+0x2b8c>
   1855c:	add	r3, pc, r2
   18560:	movw	r2, #609	; 0x261
   18564:	bl	12e68 <__assert_fail@plt>
   18568:	mov	r0, #2
   1856c:	strh	r0, [sp, #8]
   18570:	ldr	r0, [fp, #-4]
   18574:	str	r0, [sp]
   18578:	bl	238a4 <main@@Base+0x4f0>
   1857c:	ldr	lr, [sp]
   18580:	sub	r0, lr, r0
   18584:	str	r0, [sp, #4]
   18588:	ldr	r0, [sp, #4]
   1858c:	bl	238c8 <main@@Base+0x514>
   18590:	ldrh	lr, [sp, #8]
   18594:	add	lr, lr, #3
   18598:	lsl	lr, lr, #1
   1859c:	cmp	r0, lr
   185a0:	bcc	185bc <verify_monster@@Base+0x2b68>
   185a4:	ldr	r0, [sp, #4]
   185a8:	ldrh	r1, [sp, #8]
   185ac:	add	r0, r0, r1, lsl #1
   185b0:	add	r0, r0, #4
   185b4:	bl	238c8 <main@@Base+0x514>
   185b8:	strh	r0, [fp, #-6]
   185bc:	ldrh	r0, [fp, #-6]
   185c0:	cmp	r0, #0
   185c4:	movw	r0, #0
   185c8:	movne	r0, #1
   185cc:	and	r0, r0, #1
   185d0:	mov	sp, fp
   185d4:	pop	{fp, pc}
   185d8:	muleq	r1, sp, pc	; <UNPREDICTABLE>
   185dc:			; <UNDEFINED> instruction: 0x0001bfbb
   185e0:	strdeq	sp, [r1], -r5

000185e4 <gen_monster@@Base>:
   185e4:	push	{r4, r5, fp, lr}
   185e8:	add	fp, sp, #8
   185ec:	sub	sp, sp, #336	; 0x150
   185f0:	ldr	r2, [pc, #1996]	; 18dc4 <gen_monster@@Base+0x7e0>
   185f4:	add	r2, pc, r2
   185f8:	ldr	r3, [pc, #1992]	; 18dc8 <gen_monster@@Base+0x7e4>
   185fc:	add	r3, pc, r3
   18600:	str	r0, [fp, #-12]
   18604:	str	r1, [fp, #-16]
   18608:	ldrb	r0, [r3]
   1860c:	strb	r0, [fp, #-26]	; 0xffffffe6
   18610:	ldrb	r0, [r3, #1]
   18614:	strb	r0, [fp, #-25]	; 0xffffffe7
   18618:	ldrb	r0, [r3, #2]
   1861c:	strb	r0, [fp, #-24]	; 0xffffffe8
   18620:	ldrb	r0, [r3, #3]
   18624:	strb	r0, [fp, #-23]	; 0xffffffe9
   18628:	ldrb	r0, [r3, #4]
   1862c:	strb	r0, [fp, #-22]	; 0xffffffea
   18630:	ldrb	r0, [r3, #5]
   18634:	strb	r0, [fp, #-21]	; 0xffffffeb
   18638:	ldrb	r0, [r3, #6]
   1863c:	strb	r0, [fp, #-20]	; 0xffffffec
   18640:	ldrb	r0, [r3, #7]
   18644:	strb	r0, [fp, #-19]	; 0xffffffed
   18648:	ldrb	r0, [r3, #8]
   1864c:	strb	r0, [fp, #-18]	; 0xffffffee
   18650:	ldrb	r0, [r3, #9]
   18654:	strb	r0, [fp, #-17]	; 0xffffffef
   18658:	ldrb	r0, [r2]
   1865c:	strb	r0, [fp, #-80]	; 0xffffffb0
   18660:	ldrb	r0, [r2, #1]
   18664:	strb	r0, [fp, #-79]	; 0xffffffb1
   18668:	ldrb	r0, [r2, #2]
   1866c:	strb	r0, [fp, #-78]	; 0xffffffb2
   18670:	ldrb	r0, [r2, #3]
   18674:	strb	r0, [fp, #-77]	; 0xffffffb3
   18678:	ldr	r0, [fp, #-12]
   1867c:	bl	28b78 <flatcc_builder_reset@@Base>
   18680:	ldr	r1, [fp, #-16]
   18684:	cmp	r1, #0
   18688:	str	r0, [fp, #-108]	; 0xffffff94
   1868c:	beq	186a0 <gen_monster@@Base+0xbc>
   18690:	ldr	r0, [fp, #-12]
   18694:	bl	18e24 <gen_monster@@Base+0x840>
   18698:	str	r0, [fp, #-112]	; 0xffffff90
   1869c:	b	186ac <gen_monster@@Base+0xc8>
   186a0:	ldr	r0, [fp, #-12]
   186a4:	bl	18e74 <gen_monster@@Base+0x890>
   186a8:	str	r0, [fp, #-116]	; 0xffffff8c
   186ac:	ldr	r0, [fp, #-12]
   186b0:	movw	r1, #80	; 0x50
   186b4:	sxth	r1, r1
   186b8:	bl	18ec4 <gen_monster@@Base+0x8e0>
   186bc:	ldr	r1, [fp, #-12]
   186c0:	str	r0, [fp, #-120]	; 0xffffff88
   186c4:	mov	r0, r1
   186c8:	bl	18f4c <gen_monster@@Base+0x968>
   186cc:	vldr	s0, [pc, #928]	; 18a74 <gen_monster@@Base+0x490>
   186d0:	str	r0, [fp, #-32]	; 0xffffffe0
   186d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   186d8:	vmov.f32	s2, #112	; 0x3f800000  1.0
   186dc:	vstr	s2, [r0]
   186e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   186e4:	vmov.f32	s2, #0	; 0x40000000  2.0
   186e8:	vstr	s2, [r0, #4]
   186ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   186f0:	vstr	s0, [r0, #8]
   186f4:	ldr	r0, [fp, #-12]
   186f8:	bl	18f7c <gen_monster@@Base+0x998>
   186fc:	ldr	r1, [pc, #1736]	; 18dcc <gen_monster@@Base+0x7e8>
   18700:	add	r1, pc, r1
   18704:	ldr	lr, [fp, #-12]
   18708:	str	r0, [fp, #-124]	; 0xffffff84
   1870c:	mov	r0, lr
   18710:	bl	14934 <test_empty_monster@@Base+0x1f0>
   18714:	ldr	r1, [fp, #-12]
   18718:	str	r0, [fp, #-128]	; 0xffffff80
   1871c:	mov	r0, r1
   18720:	movw	r1, #2
   18724:	sxtb	r1, r1
   18728:	bl	18f90 <gen_monster@@Base+0x9ac>
   1872c:	sub	r1, fp, #26
   18730:	ldr	lr, [fp, #-12]
   18734:	str	r0, [fp, #-132]	; 0xffffff7c
   18738:	mov	r0, lr
   1873c:	movw	r2, #10
   18740:	bl	19014 <gen_monster@@Base+0xa30>
   18744:	ldr	r1, [fp, #-12]
   18748:	str	r0, [fp, #-136]	; 0xffffff78
   1874c:	mov	r0, r1
   18750:	bl	1906c <gen_monster@@Base+0xa88>
   18754:	ldr	r1, [fp, #-12]
   18758:	str	r0, [fp, #-140]	; 0xffffff74
   1875c:	mov	r0, r1
   18760:	movw	r1, #1
   18764:	bl	1908c <gen_monster@@Base+0xaa8>
   18768:	str	r0, [fp, #-36]	; 0xffffffdc
   1876c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18770:	movw	r1, #16
   18774:	strh	r1, [r0]
   18778:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1877c:	movw	r1, #32
   18780:	strb	r1, [r0, #2]
   18784:	ldr	r0, [fp, #-12]
   18788:	movw	r1, #2
   1878c:	bl	1908c <gen_monster@@Base+0xaa8>
   18790:	str	r0, [fp, #-36]	; 0xffffffdc
   18794:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18798:	movw	r1, #48	; 0x30
   1879c:	strh	r1, [r0]
   187a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   187a4:	movw	r1, #64	; 0x40
   187a8:	strb	r1, [r0, #2]
   187ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   187b0:	movw	r1, #80	; 0x50
   187b4:	strh	r1, [r0, #4]
   187b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   187bc:	movw	r1, #96	; 0x60
   187c0:	strb	r1, [r0, #6]
   187c4:	ldr	r0, [fp, #-12]
   187c8:	movw	r1, #112	; 0x70
   187cc:	sxth	r1, r1
   187d0:	movw	r2, #128	; 0x80
   187d4:	sxtb	r2, r2
   187d8:	bl	190b4 <gen_monster@@Base+0xad0>
   187dc:	movw	r1, #400	; 0x190
   187e0:	strh	r1, [fp, #-40]	; 0xffffffd8
   187e4:	movw	r1, #145	; 0x91
   187e8:	strb	r1, [fp, #-38]	; 0xffffffda
   187ec:	ldr	r1, [fp, #-12]
   187f0:	str	r0, [fp, #-144]	; 0xffffff70
   187f4:	mov	r0, r1
   187f8:	sub	r1, fp, #40	; 0x28
   187fc:	bl	1911c <gen_monster@@Base+0xb38>
   18800:	ldr	r1, [fp, #-12]
   18804:	str	r0, [fp, #-148]	; 0xffffff6c
   18808:	mov	r0, r1
   1880c:	sub	r1, fp, #40	; 0x28
   18810:	bl	1911c <gen_monster@@Base+0xb38>
   18814:	ldr	r1, [fp, #-12]
   18818:	str	r0, [fp, #-152]	; 0xffffff68
   1881c:	mov	r0, r1
   18820:	sub	r1, fp, #40	; 0x28
   18824:	bl	1919c <gen_monster@@Base+0xbb8>
   18828:	ldr	r1, [fp, #-12]
   1882c:	str	r0, [fp, #-156]	; 0xffffff64
   18830:	mov	r0, r1
   18834:	bl	1921c <gen_monster@@Base+0xc38>
   18838:	cmp	r0, #7
   1883c:	bne	18844 <gen_monster@@Base+0x260>
   18840:	b	18864 <gen_monster@@Base+0x280>
   18844:	ldr	r0, [pc, #1412]	; 18dd0 <gen_monster@@Base+0x7ec>
   18848:	add	r0, pc, r0
   1884c:	ldr	r1, [pc, #1408]	; 18dd4 <gen_monster@@Base+0x7f0>
   18850:	add	r1, pc, r1
   18854:	ldr	r2, [pc, #1404]	; 18dd8 <gen_monster@@Base+0x7f4>
   18858:	add	r3, pc, r2
   1885c:	movw	r2, #881	; 0x371
   18860:	bl	12e68 <__assert_fail@plt>
   18864:	ldr	r0, [fp, #-12]
   18868:	movw	r1, #2
   1886c:	bl	1923c <gen_monster@@Base+0xc58>
   18870:	ldr	r1, [fp, #-12]
   18874:	str	r0, [fp, #-160]	; 0xffffff60
   18878:	mov	r0, r1
   1887c:	bl	1921c <gen_monster@@Base+0xc38>
   18880:	cmp	r0, #5
   18884:	bne	1888c <gen_monster@@Base+0x2a8>
   18888:	b	188ac <gen_monster@@Base+0x2c8>
   1888c:	ldr	r0, [pc, #1352]	; 18ddc <gen_monster@@Base+0x7f8>
   18890:	add	r0, pc, r0
   18894:	ldr	r1, [pc, #1348]	; 18de0 <gen_monster@@Base+0x7fc>
   18898:	add	r1, pc, r1
   1889c:	ldr	r2, [pc, #1344]	; 18de4 <gen_monster@@Base+0x800>
   188a0:	add	r3, pc, r2
   188a4:	movw	r2, #883	; 0x373
   188a8:	bl	12e68 <__assert_fail@plt>
   188ac:	ldr	r0, [fp, #-12]
   188b0:	bl	19264 <gen_monster@@Base+0xc80>
   188b4:	str	r0, [fp, #-36]	; 0xffffffdc
   188b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   188bc:	ldrsh	lr, [r0, #16]
   188c0:	add	lr, lr, #1
   188c4:	strh	lr, [r0, #16]
   188c8:	ldr	r0, [fp, #-12]
   188cc:	bl	19284 <gen_monster@@Base+0xca0>
   188d0:	ldr	lr, [fp, #-12]
   188d4:	str	r0, [fp, #-164]	; 0xffffff5c
   188d8:	mov	r0, lr
   188dc:	bl	14910 <test_empty_monster@@Base+0x1cc>
   188e0:	ldr	lr, [pc, #1284]	; 18dec <gen_monster@@Base+0x808>
   188e4:	add	r1, pc, lr
   188e8:	ldr	lr, [fp, #-12]
   188ec:	str	r0, [fp, #-168]	; 0xffffff58
   188f0:	mov	r0, lr
   188f4:	movw	r2, #7
   188f8:	bl	192c4 <gen_monster@@Base+0xce0>
   188fc:	str	r0, [fp, #-64]	; 0xffffffc0
   18900:	ldr	r0, [fp, #-12]
   18904:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18908:	bl	192f4 <gen_monster@@Base+0xd10>
   1890c:	ldr	r1, [fp, #-12]
   18910:	str	r0, [sp, #172]	; 0xac
   18914:	mov	r0, r1
   18918:	bl	14980 <test_empty_monster@@Base+0x23c>
   1891c:	str	r0, [fp, #-44]	; 0xffffffd4
   18920:	ldr	r0, [fp, #-12]
   18924:	bl	19360 <gen_monster@@Base+0xd7c>
   18928:	ldr	r1, [fp, #-12]
   1892c:	str	r0, [sp, #168]	; 0xa8
   18930:	mov	r0, r1
   18934:	movw	r1, #2
   18938:	bl	19380 <gen_monster@@Base+0xd9c>
   1893c:	str	r0, [fp, #-60]	; 0xffffffc4
   18940:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18944:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18948:	str	r0, [r1]
   1894c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18950:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18954:	str	r0, [r1, #4]
   18958:	ldr	r0, [fp, #-12]
   1895c:	bl	193a8 <gen_monster@@Base+0xdc4>
   18960:	ldr	r1, [pc, #1152]	; 18de8 <gen_monster@@Base+0x804>
   18964:	add	r1, pc, r1
   18968:	ldr	r2, [fp, #-12]
   1896c:	str	r0, [sp, #164]	; 0xa4
   18970:	mov	r0, r2
   18974:	movw	r2, #30
   18978:	bl	193c8 <gen_monster@@Base+0xde4>
   1897c:	ldr	r1, [fp, #-12]
   18980:	str	r0, [sp, #160]	; 0xa0
   18984:	mov	r0, r1
   18988:	bl	19420 <gen_monster@@Base+0xe3c>
   1898c:	ldr	r0, [r0]
   18990:	str	r0, [fp, #-48]	; 0xffffffd0
   18994:	ldr	r0, [fp, #-12]
   18998:	movw	r1, #3
   1899c:	bl	19380 <gen_monster@@Base+0xd9c>
   189a0:	str	r0, [fp, #-60]	; 0xffffffc4
   189a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   189a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   189ac:	str	r0, [r1]
   189b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   189b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   189b8:	str	r0, [r1, #4]
   189bc:	ldr	r0, [fp, #-12]
   189c0:	movw	r1, #1
   189c4:	bl	19460 <gen_monster@@Base+0xe7c>
   189c8:	ldr	r1, [fp, #-12]
   189cc:	str	r0, [sp, #156]	; 0x9c
   189d0:	mov	r0, r1
   189d4:	bl	19488 <gen_monster@@Base+0xea4>
   189d8:	cmp	r0, #5
   189dc:	bne	189e4 <gen_monster@@Base+0x400>
   189e0:	b	18a04 <gen_monster@@Base+0x420>
   189e4:	ldr	r0, [pc, #1028]	; 18df0 <gen_monster@@Base+0x80c>
   189e8:	add	r0, pc, r0
   189ec:	ldr	r1, [pc, #1024]	; 18df4 <gen_monster@@Base+0x810>
   189f0:	add	r1, pc, r1
   189f4:	ldr	r2, [pc, #1020]	; 18df8 <gen_monster@@Base+0x814>
   189f8:	add	r3, pc, r2
   189fc:	movw	r2, #923	; 0x39b
   18a00:	bl	12e68 <__assert_fail@plt>
   18a04:	ldr	r0, [fp, #-12]
   18a08:	bl	193a8 <gen_monster@@Base+0xdc4>
   18a0c:	ldr	lr, [pc, #1000]	; 18dfc <gen_monster@@Base+0x818>
   18a10:	add	r1, pc, lr
   18a14:	ldr	lr, [fp, #-12]
   18a18:	str	r0, [sp, #152]	; 0x98
   18a1c:	mov	r0, lr
   18a20:	movw	r2, #8
   18a24:	bl	193c8 <gen_monster@@Base+0xde4>
   18a28:	ldr	r1, [fp, #-12]
   18a2c:	str	r0, [sp, #148]	; 0x94
   18a30:	mov	r0, r1
   18a34:	bl	19420 <gen_monster@@Base+0xe3c>
   18a38:	ldr	r0, [r0]
   18a3c:	str	r0, [fp, #-56]	; 0xffffffc8
   18a40:	ldr	r0, [fp, #-12]
   18a44:	bl	19488 <gen_monster@@Base+0xea4>
   18a48:	cmp	r0, #6
   18a4c:	bne	18a54 <gen_monster@@Base+0x470>
   18a50:	b	18a78 <gen_monster@@Base+0x494>
   18a54:	ldr	r0, [pc, #932]	; 18e00 <gen_monster@@Base+0x81c>
   18a58:	add	r0, pc, r0
   18a5c:	ldr	r1, [pc, #928]	; 18e04 <gen_monster@@Base+0x820>
   18a60:	add	r1, pc, r1
   18a64:	ldr	r2, [pc, #924]	; 18e08 <gen_monster@@Base+0x824>
   18a68:	add	r3, pc, r2
   18a6c:	movw	r2, #929	; 0x3a1
   18a70:	bl	12e68 <__assert_fail@plt>
   18a74:	subgt	ip, ip, sp, asr #25
   18a78:	ldr	r0, [fp, #-12]
   18a7c:	bl	194a8 <gen_monster@@Base+0xec4>
   18a80:	str	r0, [fp, #-60]	; 0xffffffc4
   18a84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18a88:	ldr	r0, [r0, #20]
   18a8c:	str	r0, [fp, #-48]	; 0xffffffd0
   18a90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18a94:	ldr	r0, [r0, #8]
   18a98:	str	r0, [fp, #-52]	; 0xffffffcc
   18a9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18aa0:	ldr	lr, [fp, #-60]	; 0xffffffc4
   18aa4:	str	r0, [lr, #20]
   18aa8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18aac:	ldr	lr, [fp, #-60]	; 0xffffffc4
   18ab0:	str	r0, [lr]
   18ab4:	ldr	r0, [fp, #-12]
   18ab8:	sub	r1, fp, #56	; 0x38
   18abc:	mov	lr, #2
   18ac0:	mov	r2, lr
   18ac4:	str	lr, [sp, #144]	; 0x90
   18ac8:	bl	194c8 <gen_monster@@Base+0xee4>
   18acc:	ldr	r1, [fp, #-12]
   18ad0:	str	r0, [sp, #140]	; 0x8c
   18ad4:	mov	r0, r1
   18ad8:	bl	194f8 <gen_monster@@Base+0xf14>
   18adc:	ldr	r1, [fp, #-12]
   18ae0:	ldr	r2, [pc, #808]	; 18e10 <gen_monster@@Base+0x82c>
   18ae4:	add	r2, pc, r2
   18ae8:	str	r0, [sp, #136]	; 0x88
   18aec:	mov	r0, r1
   18af0:	mov	r1, r2
   18af4:	bl	19538 <gen_monster@@Base+0xf54>
   18af8:	str	r0, [fp, #-76]	; 0xffffffb4
   18afc:	ldr	r0, [fp, #-12]
   18b00:	ldr	r1, [pc, #780]	; 18e14 <gen_monster@@Base+0x830>
   18b04:	add	r1, pc, r1
   18b08:	ldr	r2, [sp, #144]	; 0x90
   18b0c:	bl	192c4 <gen_monster@@Base+0xce0>
   18b10:	str	r0, [fp, #-72]	; 0xffffffb8
   18b14:	ldr	r0, [fp, #-12]
   18b18:	ldr	r1, [pc, #760]	; 18e18 <gen_monster@@Base+0x834>
   18b1c:	add	r1, pc, r1
   18b20:	bl	19538 <gen_monster@@Base+0xf54>
   18b24:	str	r0, [fp, #-68]	; 0xffffffbc
   18b28:	ldr	r0, [fp, #-12]
   18b2c:	sub	r1, fp, #76	; 0x4c
   18b30:	mov	r2, #3
   18b34:	str	r2, [sp, #132]	; 0x84
   18b38:	bl	19560 <gen_monster@@Base+0xf7c>
   18b3c:	ldr	r1, [fp, #-12]
   18b40:	str	r0, [sp, #128]	; 0x80
   18b44:	mov	r0, r1
   18b48:	bl	195b8 <gen_monster@@Base+0xfd4>
   18b4c:	ldr	r1, [fp, #-12]
   18b50:	sub	r2, fp, #80	; 0x50
   18b54:	mov	lr, #1
   18b58:	str	r0, [sp, #124]	; 0x7c
   18b5c:	mov	r0, r1
   18b60:	mov	r1, r2
   18b64:	str	r2, [sp, #120]	; 0x78
   18b68:	mov	r2, lr
   18b6c:	bl	195d8 <gen_monster@@Base+0xff4>
   18b70:	ldr	r1, [fp, #-12]
   18b74:	ldr	r2, [sp, #120]	; 0x78
   18b78:	add	lr, r2, #1
   18b7c:	str	r0, [sp, #116]	; 0x74
   18b80:	mov	r0, r1
   18b84:	mov	r1, lr
   18b88:	ldr	r2, [sp, #132]	; 0x84
   18b8c:	bl	195d8 <gen_monster@@Base+0xff4>
   18b90:	ldr	r1, [fp, #-12]
   18b94:	str	r0, [sp, #112]	; 0x70
   18b98:	mov	r0, r1
   18b9c:	bl	19608 <gen_monster@@Base+0x1024>
   18ba0:	ldr	r1, [fp, #-12]
   18ba4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18ba8:	sub	lr, fp, #88	; 0x58
   18bac:	str	r0, [sp, #108]	; 0x6c
   18bb0:	mov	r0, lr
   18bb4:	str	r1, [sp, #104]	; 0x68
   18bb8:	mov	r1, r2
   18bbc:	bl	1970c <gen_monster@@Base+0x1128>
   18bc0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18bc4:	ldr	r2, [fp, #-84]	; 0xffffffac
   18bc8:	ldr	r0, [sp, #104]	; 0x68
   18bcc:	bl	19648 <gen_monster@@Base+0x1064>
   18bd0:	ldr	r1, [fp, #-12]
   18bd4:	str	r0, [sp, #100]	; 0x64
   18bd8:	mov	r0, r1
   18bdc:	bl	1972c <gen_monster@@Base+0x1148>
   18be0:	ldr	r1, [fp, #-12]
   18be4:	ldr	r2, [pc, #560]	; 18e1c <gen_monster@@Base+0x838>
   18be8:	add	r2, pc, r2
   18bec:	str	r0, [sp, #96]	; 0x60
   18bf0:	mov	r0, r1
   18bf4:	mov	r1, r2
   18bf8:	bl	14934 <test_empty_monster@@Base+0x1f0>
   18bfc:	ldr	r1, [fp, #-12]
   18c00:	str	r0, [sp, #92]	; 0x5c
   18c04:	mov	r0, r1
   18c08:	bl	19360 <gen_monster@@Base+0xd7c>
   18c0c:	ldr	r1, [fp, #-12]
   18c10:	str	r0, [sp, #88]	; 0x58
   18c14:	mov	r0, r1
   18c18:	bl	1974c <gen_monster@@Base+0x1168>
   18c1c:	ldr	r1, [fp, #-12]
   18c20:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18c24:	sub	lr, fp, #96	; 0x60
   18c28:	str	r0, [sp, #84]	; 0x54
   18c2c:	mov	r0, lr
   18c30:	str	r1, [sp, #80]	; 0x50
   18c34:	mov	r1, r2
   18c38:	bl	1970c <gen_monster@@Base+0x1128>
   18c3c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   18c40:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18c44:	ldr	r0, [sp, #80]	; 0x50
   18c48:	bl	19648 <gen_monster@@Base+0x1064>
   18c4c:	ldr	r1, [fp, #-12]
   18c50:	ldr	r2, [pc, #456]	; 18e20 <gen_monster@@Base+0x83c>
   18c54:	add	r2, pc, r2
   18c58:	str	r0, [sp, #76]	; 0x4c
   18c5c:	mov	r0, r1
   18c60:	mov	r1, r2
   18c64:	str	r2, [sp, #72]	; 0x48
   18c68:	bl	14934 <test_empty_monster@@Base+0x1f0>
   18c6c:	ldr	r1, [fp, #-12]
   18c70:	str	r0, [sp, #68]	; 0x44
   18c74:	mov	r0, r1
   18c78:	bl	19420 <gen_monster@@Base+0xe3c>
   18c7c:	ldr	r1, [fp, #-12]
   18c80:	str	r0, [sp, #64]	; 0x40
   18c84:	mov	r0, r1
   18c88:	bl	193a8 <gen_monster@@Base+0xdc4>
   18c8c:	ldr	r1, [fp, #-12]
   18c90:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18c94:	str	r0, [sp, #60]	; 0x3c
   18c98:	mov	r0, r1
   18c9c:	mov	r1, r2
   18ca0:	bl	1976c <gen_monster@@Base+0x1188>
   18ca4:	ldr	r1, [fp, #-12]
   18ca8:	str	r0, [sp, #56]	; 0x38
   18cac:	mov	r0, r1
   18cb0:	ldr	r1, [sp, #72]	; 0x48
   18cb4:	bl	14934 <test_empty_monster@@Base+0x1f0>
   18cb8:	ldr	r1, [fp, #-12]
   18cbc:	str	r0, [sp, #52]	; 0x34
   18cc0:	mov	r0, r1
   18cc4:	bl	197b0 <gen_monster@@Base+0x11cc>
   18cc8:	ldr	r1, [fp, #-12]
   18ccc:	str	r0, [sp, #48]	; 0x30
   18cd0:	mov	r0, r1
   18cd4:	bl	193a8 <gen_monster@@Base+0xdc4>
   18cd8:	ldr	r1, [fp, #-12]
   18cdc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18ce0:	sub	lr, fp, #104	; 0x68
   18ce4:	str	r0, [sp, #44]	; 0x2c
   18ce8:	mov	r0, lr
   18cec:	str	r1, [sp, #40]	; 0x28
   18cf0:	mov	r1, r2
   18cf4:	bl	1970c <gen_monster@@Base+0x1128>
   18cf8:	ldr	r1, [fp, #-104]	; 0xffffff98
   18cfc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18d00:	ldr	r0, [sp, #40]	; 0x28
   18d04:	bl	197f0 <gen_monster@@Base+0x120c>
   18d08:	ldr	r1, [pc, #252]	; 18e0c <gen_monster@@Base+0x828>
   18d0c:	add	r1, pc, r1
   18d10:	ldr	r2, [fp, #-12]
   18d14:	str	r0, [sp, #36]	; 0x24
   18d18:	mov	r0, r2
   18d1c:	bl	14934 <test_empty_monster@@Base+0x1f0>
   18d20:	ldr	r1, [fp, #-12]
   18d24:	str	r0, [sp, #32]
   18d28:	mov	r0, r1
   18d2c:	movw	r1, #1
   18d30:	and	r1, r1, #255	; 0xff
   18d34:	bl	19874 <gen_monster@@Base+0x1290>
   18d38:	ldr	r1, [fp, #-12]
   18d3c:	str	r0, [sp, #28]
   18d40:	mov	r0, r1
   18d44:	bl	19420 <gen_monster@@Base+0xe3c>
   18d48:	ldr	r1, [fp, #-12]
   18d4c:	str	r0, [sp, #24]
   18d50:	mov	r0, r1
   18d54:	bl	194f8 <gen_monster@@Base+0xf14>
   18d58:	ldr	r1, [fp, #-12]
   18d5c:	str	r0, [sp, #20]
   18d60:	mov	r0, r1
   18d64:	bl	19900 <gen_monster@@Base+0x131c>
   18d68:	ldr	r1, [fp, #-12]
   18d6c:	str	r0, [sp, #16]
   18d70:	mov	r0, r1
   18d74:	movw	r1, #0
   18d78:	and	r1, r1, #255	; 0xff
   18d7c:	bl	19940 <gen_monster@@Base+0x135c>
   18d80:	ldr	r1, [fp, #-12]
   18d84:	str	r0, [sp, #12]
   18d88:	mov	r0, r1
   18d8c:	bl	199c4 <gen_monster@@Base+0x13e0>
   18d90:	ldr	r1, [fp, #-12]
   18d94:	str	r0, [sp, #8]
   18d98:	mov	r0, r1
   18d9c:	bl	199e4 <gen_monster@@Base+0x1400>
   18da0:	ldr	r1, [fp, #-12]
   18da4:	str	r0, [sp, #4]
   18da8:	mov	r0, r1
   18dac:	bl	19a24 <gen_monster@@Base+0x1440>
   18db0:	movw	r1, #0
   18db4:	str	r0, [sp]
   18db8:	mov	r0, r1
   18dbc:	sub	sp, fp, #8
   18dc0:	pop	{r4, r5, fp, pc}
   18dc4:	andeq	lr, r1, r4, lsr #1
   18dc8:	andeq	lr, r1, r9, asr #32
   18dcc:	andeq	r9, r1, fp, lsr #13
   18dd0:	andeq	sl, r1, r4, lsl #5
   18dd4:	strdeq	r9, [r1], -r3
   18dd8:	muleq	r1, fp, r2
   18ddc:	andeq	sl, r1, ip, lsl #5
   18de0:	andeq	r9, r1, fp, lsr #27
   18de4:	andeq	sl, r1, r3, asr r2
   18de8:	ldrdeq	r9, [r1], -r2
   18dec:	strdeq	r9, [r1], -r2
   18df0:	andeq	sl, r1, fp, asr r1
   18df4:	andeq	r9, r1, r3, asr ip
   18df8:	strdeq	sl, [r1], -fp
   18dfc:	andeq	sl, r1, r6, ror #2
   18e00:	andeq	sl, r1, sl, lsr r1
   18e04:	andeq	r9, r1, r3, ror #23
   18e08:	andeq	sl, r1, fp, lsl #1
   18e0c:			; <UNDEFINED> instruction: 0x00019eb9
   18e10:	andeq	r9, r1, r3, ror #26
   18e14:	andeq	sp, r1, lr, lsr fp
   18e18:	andeq	r9, r1, r4, lsl #27
   18e1c:	andeq	r9, r1, ip, ror sp
   18e20:	andeq	r9, r1, r1, ror pc
   18e24:	push	{fp, lr}
   18e28:	mov	fp, sp
   18e2c:	sub	sp, sp, #8
   18e30:	ldr	r1, [pc, #56]	; 18e70 <gen_monster@@Base+0x88c>
   18e34:	add	r1, pc, r1
   18e38:	str	r0, [sp, #4]
   18e3c:	ldr	r0, [sp, #4]
   18e40:	bl	26104 <main@@Base+0x2d50>
   18e44:	cmp	r0, #0
   18e48:	beq	18e58 <gen_monster@@Base+0x874>
   18e4c:	mvn	r0, #0
   18e50:	str	r0, [sp]
   18e54:	b	18e64 <gen_monster@@Base+0x880>
   18e58:	ldr	r0, [sp, #4]
   18e5c:	bl	14910 <test_empty_monster@@Base+0x1cc>
   18e60:	str	r0, [sp]
   18e64:	ldr	r0, [sp]
   18e68:	mov	sp, fp
   18e6c:	pop	{fp, pc}
   18e70:	andeq	r8, r1, r0, lsr #27
   18e74:	push	{fp, lr}
   18e78:	mov	fp, sp
   18e7c:	sub	sp, sp, #8
   18e80:	ldr	r1, [pc, #56]	; 18ec0 <gen_monster@@Base+0x8dc>
   18e84:	add	r1, pc, r1
   18e88:	str	r0, [sp, #4]
   18e8c:	ldr	r0, [sp, #4]
   18e90:	bl	148dc <test_empty_monster@@Base+0x198>
   18e94:	cmp	r0, #0
   18e98:	beq	18ea8 <gen_monster@@Base+0x8c4>
   18e9c:	mvn	r0, #0
   18ea0:	str	r0, [sp]
   18ea4:	b	18eb4 <gen_monster@@Base+0x8d0>
   18ea8:	ldr	r0, [sp, #4]
   18eac:	bl	14910 <test_empty_monster@@Base+0x1cc>
   18eb0:	str	r0, [sp]
   18eb4:	ldr	r0, [sp]
   18eb8:	mov	sp, fp
   18ebc:	pop	{fp, pc}
   18ec0:	andeq	r8, r1, r0, asr sp
   18ec4:	push	{fp, lr}
   18ec8:	mov	fp, sp
   18ecc:	sub	sp, sp, #24
   18ed0:	str	r0, [fp, #-8]
   18ed4:	strh	r1, [fp, #-10]
   18ed8:	ldrsh	r0, [fp, #-10]
   18edc:	cmp	r0, #100	; 0x64
   18ee0:	bne	18ef0 <gen_monster@@Base+0x90c>
   18ee4:	movw	r0, #0
   18ee8:	str	r0, [fp, #-4]
   18eec:	b	18f40 <gen_monster@@Base+0x95c>
   18ef0:	ldr	r0, [fp, #-8]
   18ef4:	movw	r1, #2
   18ef8:	str	r1, [sp, #4]
   18efc:	ldr	r2, [sp, #4]
   18f00:	movw	r3, #2
   18f04:	uxth	r3, r3
   18f08:	bl	2ca28 <flatcc_builder_table_add@@Base>
   18f0c:	str	r0, [sp, #8]
   18f10:	movw	r1, #0
   18f14:	cmp	r0, r1
   18f18:	bne	18f28 <gen_monster@@Base+0x944>
   18f1c:	mvn	r0, #0
   18f20:	str	r0, [fp, #-4]
   18f24:	b	18f40 <gen_monster@@Base+0x95c>
   18f28:	ldr	r0, [sp, #8]
   18f2c:	ldrsh	r1, [fp, #-10]
   18f30:	bl	24394 <main@@Base+0xfe0>
   18f34:	movw	r1, #0
   18f38:	str	r1, [fp, #-4]
   18f3c:	str	r0, [sp]
   18f40:	ldr	r0, [fp, #-4]
   18f44:	mov	sp, fp
   18f48:	pop	{fp, pc}
   18f4c:	push	{fp, lr}
   18f50:	mov	fp, sp
   18f54:	sub	sp, sp, #8
   18f58:	str	r0, [sp, #4]
   18f5c:	ldr	r0, [sp, #4]
   18f60:	movw	r1, #0
   18f64:	movw	r2, #32
   18f68:	movw	r3, #16
   18f6c:	uxth	r3, r3
   18f70:	bl	2ca28 <flatcc_builder_table_add@@Base>
   18f74:	mov	sp, fp
   18f78:	pop	{fp, pc}
   18f7c:	sub	sp, sp, #4
   18f80:	str	r0, [sp]
   18f84:	movw	r0, #0
   18f88:	add	sp, sp, #4
   18f8c:	bx	lr
   18f90:	push	{fp, lr}
   18f94:	mov	fp, sp
   18f98:	sub	sp, sp, #24
   18f9c:	str	r0, [fp, #-8]
   18fa0:	strb	r1, [fp, #-9]
   18fa4:	ldrsb	r0, [fp, #-9]
   18fa8:	cmp	r0, #8
   18fac:	bne	18fbc <gen_monster@@Base+0x9d8>
   18fb0:	movw	r0, #0
   18fb4:	str	r0, [fp, #-4]
   18fb8:	b	19008 <gen_monster@@Base+0xa24>
   18fbc:	ldr	r0, [fp, #-8]
   18fc0:	movw	r1, #6
   18fc4:	movw	r2, #1
   18fc8:	movw	r3, #1
   18fcc:	uxth	r3, r3
   18fd0:	bl	2ca28 <flatcc_builder_table_add@@Base>
   18fd4:	str	r0, [sp, #8]
   18fd8:	movw	r1, #0
   18fdc:	cmp	r0, r1
   18fe0:	bne	18ff0 <gen_monster@@Base+0xa0c>
   18fe4:	mvn	r0, #0
   18fe8:	str	r0, [fp, #-4]
   18fec:	b	19008 <gen_monster@@Base+0xa24>
   18ff0:	ldr	r0, [sp, #8]
   18ff4:	ldrsb	r1, [fp, #-9]
   18ff8:	bl	26138 <main@@Base+0x2d84>
   18ffc:	movw	r1, #0
   19000:	str	r1, [fp, #-4]
   19004:	str	r0, [sp, #4]
   19008:	ldr	r0, [fp, #-4]
   1900c:	mov	sp, fp
   19010:	pop	{fp, pc}
   19014:	push	{fp, lr}
   19018:	mov	fp, sp
   1901c:	sub	sp, sp, #24
   19020:	str	r0, [fp, #-4]
   19024:	str	r1, [fp, #-8]
   19028:	str	r2, [sp, #12]
   1902c:	ldr	r0, [fp, #-4]
   19030:	ldr	r1, [fp, #-4]
   19034:	ldr	r2, [fp, #-8]
   19038:	ldr	r3, [sp, #12]
   1903c:	str	r0, [sp, #8]
   19040:	mov	r0, r1
   19044:	mov	r1, r2
   19048:	mov	r2, r3
   1904c:	bl	138d0 <test_type_aliases@@Base+0x2b8>
   19050:	ldr	r1, [sp, #8]
   19054:	str	r0, [sp, #4]
   19058:	mov	r0, r1
   1905c:	ldr	r1, [sp, #4]
   19060:	bl	2617c <main@@Base+0x2dc8>
   19064:	mov	sp, fp
   19068:	pop	{fp, pc}
   1906c:	push	{fp, lr}
   19070:	mov	fp, sp
   19074:	sub	sp, sp, #8
   19078:	str	r0, [sp, #4]
   1907c:	ldr	r0, [sp, #4]
   19080:	bl	261e8 <main@@Base+0x2e34>
   19084:	mov	sp, fp
   19088:	pop	{fp, pc}
   1908c:	push	{fp, lr}
   19090:	mov	fp, sp
   19094:	sub	sp, sp, #8
   19098:	str	r0, [sp, #4]
   1909c:	str	r1, [sp]
   190a0:	ldr	r0, [sp, #4]
   190a4:	ldr	r1, [sp]
   190a8:	bl	2a200 <flatcc_builder_extend_vector@@Base>
   190ac:	mov	sp, fp
   190b0:	pop	{fp, pc}
   190b4:	push	{fp, lr}
   190b8:	mov	fp, sp
   190bc:	sub	sp, sp, #16
   190c0:	str	r0, [fp, #-4]
   190c4:	strh	r1, [fp, #-6]
   190c8:	strb	r2, [fp, #-7]
   190cc:	ldr	r0, [fp, #-4]
   190d0:	movw	r1, #1
   190d4:	bl	2a200 <flatcc_builder_extend_vector@@Base>
   190d8:	str	r0, [sp, #4]
   190dc:	movw	r1, #0
   190e0:	cmp	r0, r1
   190e4:	beq	19104 <gen_monster@@Base+0xb20>
   190e8:	ldr	r0, [sp, #4]
   190ec:	ldrh	r1, [fp, #-6]
   190f0:	sxth	r1, r1
   190f4:	ldrsb	r2, [fp, #-7]
   190f8:	bl	2621c <main@@Base+0x2e68>
   190fc:	str	r0, [sp]
   19100:	b	19110 <gen_monster@@Base+0xb2c>
   19104:	movw	r0, #0
   19108:	str	r0, [sp]
   1910c:	b	19110 <gen_monster@@Base+0xb2c>
   19110:	ldr	r0, [sp]
   19114:	mov	sp, fp
   19118:	pop	{fp, pc}
   1911c:	push	{fp, lr}
   19120:	mov	fp, sp
   19124:	sub	sp, sp, #32
   19128:	str	r0, [fp, #-4]
   1912c:	str	r1, [fp, #-8]
   19130:	ldr	r0, [fp, #-4]
   19134:	movw	r1, #1
   19138:	bl	2a200 <flatcc_builder_extend_vector@@Base>
   1913c:	str	r0, [fp, #-12]
   19140:	movw	r1, #0
   19144:	cmp	r0, r1
   19148:	beq	19184 <gen_monster@@Base+0xba0>
   1914c:	ldr	r0, [fp, #-12]
   19150:	ldr	r1, [fp, #-8]
   19154:	str	r0, [sp, #16]
   19158:	str	r1, [sp, #12]
   1915c:	bl	26250 <main@@Base+0x2e9c>
   19160:	ldr	r1, [sp, #16]
   19164:	str	r0, [sp, #8]
   19168:	mov	r0, r1
   1916c:	ldr	r1, [sp, #12]
   19170:	ldr	r2, [sp, #8]
   19174:	bl	12db4 <memcpy@plt>
   19178:	ldr	r0, [fp, #-12]
   1917c:	str	r0, [sp, #4]
   19180:	b	19190 <gen_monster@@Base+0xbac>
   19184:	movw	r0, #0
   19188:	str	r0, [sp, #4]
   1918c:	b	19190 <gen_monster@@Base+0xbac>
   19190:	ldr	r0, [sp, #4]
   19194:	mov	sp, fp
   19198:	pop	{fp, pc}
   1919c:	push	{fp, lr}
   191a0:	mov	fp, sp
   191a4:	sub	sp, sp, #32
   191a8:	str	r0, [fp, #-4]
   191ac:	str	r1, [fp, #-8]
   191b0:	ldr	r0, [fp, #-4]
   191b4:	movw	r1, #1
   191b8:	bl	2a200 <flatcc_builder_extend_vector@@Base>
   191bc:	str	r0, [fp, #-12]
   191c0:	movw	r1, #0
   191c4:	cmp	r0, r1
   191c8:	beq	19204 <gen_monster@@Base+0xc20>
   191cc:	ldr	r0, [fp, #-12]
   191d0:	ldr	r1, [fp, #-8]
   191d4:	str	r0, [sp, #16]
   191d8:	str	r1, [sp, #12]
   191dc:	bl	26250 <main@@Base+0x2e9c>
   191e0:	ldr	r1, [sp, #16]
   191e4:	str	r0, [sp, #8]
   191e8:	mov	r0, r1
   191ec:	ldr	r1, [sp, #12]
   191f0:	ldr	r2, [sp, #8]
   191f4:	bl	12db4 <memcpy@plt>
   191f8:	ldr	r0, [fp, #-12]
   191fc:	str	r0, [sp, #4]
   19200:	b	19210 <gen_monster@@Base+0xc2c>
   19204:	movw	r0, #0
   19208:	str	r0, [sp, #4]
   1920c:	b	19210 <gen_monster@@Base+0xc2c>
   19210:	ldr	r0, [sp, #4]
   19214:	mov	sp, fp
   19218:	pop	{fp, pc}
   1921c:	push	{fp, lr}
   19220:	mov	fp, sp
   19224:	sub	sp, sp, #8
   19228:	str	r0, [sp, #4]
   1922c:	ldr	r0, [sp, #4]
   19230:	bl	2c2c4 <flatcc_builder_vector_count@@Base>
   19234:	mov	sp, fp
   19238:	pop	{fp, pc}
   1923c:	push	{fp, lr}
   19240:	mov	fp, sp
   19244:	sub	sp, sp, #8
   19248:	str	r0, [sp, #4]
   1924c:	str	r1, [sp]
   19250:	ldr	r0, [sp, #4]
   19254:	ldr	r1, [sp]
   19258:	bl	2a994 <flatcc_builder_truncate_vector@@Base>
   1925c:	mov	sp, fp
   19260:	pop	{fp, pc}
   19264:	push	{fp, lr}
   19268:	mov	fp, sp
   1926c:	sub	sp, sp, #8
   19270:	str	r0, [sp, #4]
   19274:	ldr	r0, [sp, #4]
   19278:	bl	2c2e0 <flatcc_builder_vector_edit@@Base>
   1927c:	mov	sp, fp
   19280:	pop	{fp, pc}
   19284:	push	{fp, lr}
   19288:	mov	fp, sp
   1928c:	sub	sp, sp, #16
   19290:	str	r0, [fp, #-4]
   19294:	ldr	r0, [fp, #-4]
   19298:	ldr	r1, [fp, #-4]
   1929c:	str	r0, [sp, #8]
   192a0:	mov	r0, r1
   192a4:	bl	262c4 <main@@Base+0x2f10>
   192a8:	ldr	r1, [sp, #8]
   192ac:	str	r0, [sp, #4]
   192b0:	mov	r0, r1
   192b4:	ldr	r1, [sp, #4]
   192b8:	bl	26258 <main@@Base+0x2ea4>
   192bc:	mov	sp, fp
   192c0:	pop	{fp, pc}
   192c4:	push	{fp, lr}
   192c8:	mov	fp, sp
   192cc:	sub	sp, sp, #16
   192d0:	str	r0, [fp, #-4]
   192d4:	str	r1, [sp, #8]
   192d8:	str	r2, [sp, #4]
   192dc:	ldr	r0, [fp, #-4]
   192e0:	ldr	r1, [sp, #8]
   192e4:	ldr	r2, [sp, #4]
   192e8:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   192ec:	mov	sp, fp
   192f0:	pop	{fp, pc}
   192f4:	push	{fp, lr}
   192f8:	mov	fp, sp
   192fc:	sub	sp, sp, #16
   19300:	str	r0, [fp, #-4]
   19304:	str	r1, [sp, #8]
   19308:	ldr	r0, [sp, #8]
   1930c:	cmp	r0, #0
   19310:	beq	19348 <gen_monster@@Base+0xd64>
   19314:	ldr	r0, [fp, #-4]
   19318:	movw	r1, #3
   1931c:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   19320:	str	r0, [sp, #4]
   19324:	movw	r1, #0
   19328:	cmp	r0, r1
   1932c:	beq	19348 <gen_monster@@Base+0xd64>
   19330:	ldr	r0, [sp, #8]
   19334:	ldr	r1, [sp, #4]
   19338:	str	r0, [r1]
   1933c:	movw	r0, #0
   19340:	str	r0, [sp]
   19344:	b	19354 <gen_monster@@Base+0xd70>
   19348:	mvn	r0, #0
   1934c:	str	r0, [sp]
   19350:	b	19354 <gen_monster@@Base+0xd70>
   19354:	ldr	r0, [sp]
   19358:	mov	sp, fp
   1935c:	pop	{fp, pc}
   19360:	push	{fp, lr}
   19364:	mov	fp, sp
   19368:	sub	sp, sp, #8
   1936c:	str	r0, [sp, #4]
   19370:	ldr	r0, [sp, #4]
   19374:	bl	2addc <flatcc_builder_start_offset_vector@@Base>
   19378:	mov	sp, fp
   1937c:	pop	{fp, pc}
   19380:	push	{fp, lr}
   19384:	mov	fp, sp
   19388:	sub	sp, sp, #8
   1938c:	str	r0, [sp, #4]
   19390:	str	r1, [sp]
   19394:	ldr	r0, [sp, #4]
   19398:	ldr	r1, [sp]
   1939c:	bl	2a570 <flatcc_builder_extend_offset_vector@@Base>
   193a0:	mov	sp, fp
   193a4:	pop	{fp, pc}
   193a8:	push	{fp, lr}
   193ac:	mov	fp, sp
   193b0:	sub	sp, sp, #8
   193b4:	str	r0, [sp, #4]
   193b8:	ldr	r0, [sp, #4]
   193bc:	bl	14910 <test_empty_monster@@Base+0x1cc>
   193c0:	mov	sp, fp
   193c4:	pop	{fp, pc}
   193c8:	push	{fp, lr}
   193cc:	mov	fp, sp
   193d0:	sub	sp, sp, #24
   193d4:	str	r0, [fp, #-4]
   193d8:	str	r1, [fp, #-8]
   193dc:	str	r2, [sp, #12]
   193e0:	ldr	r0, [fp, #-4]
   193e4:	ldr	r1, [fp, #-4]
   193e8:	ldr	r2, [fp, #-8]
   193ec:	ldr	r3, [sp, #12]
   193f0:	str	r0, [sp, #8]
   193f4:	mov	r0, r1
   193f8:	mov	r1, r2
   193fc:	mov	r2, r3
   19400:	bl	2d654 <flatcc_builder_create_string_strn@@Base>
   19404:	ldr	r1, [sp, #8]
   19408:	str	r0, [sp, #4]
   1940c:	mov	r0, r1
   19410:	ldr	r1, [sp, #4]
   19414:	bl	192f4 <gen_monster@@Base+0xd10>
   19418:	mov	sp, fp
   1941c:	pop	{fp, pc}
   19420:	push	{fp, lr}
   19424:	mov	fp, sp
   19428:	sub	sp, sp, #16
   1942c:	str	r0, [fp, #-4]
   19430:	ldr	r0, [fp, #-4]
   19434:	ldr	r1, [fp, #-4]
   19438:	str	r0, [sp, #8]
   1943c:	mov	r0, r1
   19440:	bl	14980 <test_empty_monster@@Base+0x23c>
   19444:	ldr	r1, [sp, #8]
   19448:	str	r0, [sp, #4]
   1944c:	mov	r0, r1
   19450:	ldr	r1, [sp, #4]
   19454:	bl	262e4 <main@@Base+0x2f30>
   19458:	mov	sp, fp
   1945c:	pop	{fp, pc}
   19460:	push	{fp, lr}
   19464:	mov	fp, sp
   19468:	sub	sp, sp, #8
   1946c:	str	r0, [sp, #4]
   19470:	str	r1, [sp]
   19474:	ldr	r0, [sp, #4]
   19478:	ldr	r1, [sp]
   1947c:	bl	2aaf4 <flatcc_builder_truncate_offset_vector@@Base>
   19480:	mov	sp, fp
   19484:	pop	{fp, pc}
   19488:	push	{fp, lr}
   1948c:	mov	fp, sp
   19490:	sub	sp, sp, #8
   19494:	str	r0, [sp, #4]
   19498:	ldr	r0, [sp, #4]
   1949c:	bl	2c6ec <flatcc_builder_offset_vector_count@@Base>
   194a0:	mov	sp, fp
   194a4:	pop	{fp, pc}
   194a8:	push	{fp, lr}
   194ac:	mov	fp, sp
   194b0:	sub	sp, sp, #8
   194b4:	str	r0, [sp, #4]
   194b8:	ldr	r0, [sp, #4]
   194bc:	bl	2c6d4 <flatcc_builder_offset_vector_edit@@Base>
   194c0:	mov	sp, fp
   194c4:	pop	{fp, pc}
   194c8:	push	{fp, lr}
   194cc:	mov	fp, sp
   194d0:	sub	sp, sp, #16
   194d4:	str	r0, [fp, #-4]
   194d8:	str	r1, [sp, #8]
   194dc:	str	r2, [sp, #4]
   194e0:	ldr	r0, [fp, #-4]
   194e4:	ldr	r1, [sp, #8]
   194e8:	ldr	r2, [sp, #4]
   194ec:	bl	2a6a8 <flatcc_builder_append_offset_vector@@Base>
   194f0:	mov	sp, fp
   194f4:	pop	{fp, pc}
   194f8:	push	{fp, lr}
   194fc:	mov	fp, sp
   19500:	sub	sp, sp, #16
   19504:	str	r0, [fp, #-4]
   19508:	ldr	r0, [fp, #-4]
   1950c:	ldr	r1, [fp, #-4]
   19510:	str	r0, [sp, #8]
   19514:	mov	r0, r1
   19518:	bl	2aee8 <flatcc_builder_end_offset_vector@@Base>
   1951c:	ldr	r1, [sp, #8]
   19520:	str	r0, [sp, #4]
   19524:	mov	r0, r1
   19528:	ldr	r1, [sp, #4]
   1952c:	bl	26330 <main@@Base+0x2f7c>
   19530:	mov	sp, fp
   19534:	pop	{fp, pc}
   19538:	push	{fp, lr}
   1953c:	mov	fp, sp
   19540:	sub	sp, sp, #8
   19544:	str	r0, [sp, #4]
   19548:	str	r1, [sp]
   1954c:	ldr	r0, [sp, #4]
   19550:	ldr	r1, [sp]
   19554:	bl	2d604 <flatcc_builder_create_string_str@@Base>
   19558:	mov	sp, fp
   1955c:	pop	{fp, pc}
   19560:	push	{fp, lr}
   19564:	mov	fp, sp
   19568:	sub	sp, sp, #24
   1956c:	str	r0, [fp, #-4]
   19570:	str	r1, [fp, #-8]
   19574:	str	r2, [sp, #12]
   19578:	ldr	r0, [fp, #-4]
   1957c:	ldr	r1, [fp, #-4]
   19580:	ldr	r2, [fp, #-8]
   19584:	ldr	r3, [sp, #12]
   19588:	str	r0, [sp, #8]
   1958c:	mov	r0, r1
   19590:	mov	r1, r2
   19594:	mov	r2, r3
   19598:	bl	2ae60 <flatcc_builder_create_offset_vector@@Base>
   1959c:	ldr	r1, [sp, #8]
   195a0:	str	r0, [sp, #4]
   195a4:	mov	r0, r1
   195a8:	ldr	r1, [sp, #4]
   195ac:	bl	2639c <main@@Base+0x2fe8>
   195b0:	mov	sp, fp
   195b4:	pop	{fp, pc}
   195b8:	push	{fp, lr}
   195bc:	mov	fp, sp
   195c0:	sub	sp, sp, #8
   195c4:	str	r0, [sp, #4]
   195c8:	ldr	r0, [sp, #4]
   195cc:	bl	26408 <main@@Base+0x3054>
   195d0:	mov	sp, fp
   195d4:	pop	{fp, pc}
   195d8:	push	{fp, lr}
   195dc:	mov	fp, sp
   195e0:	sub	sp, sp, #16
   195e4:	str	r0, [fp, #-4]
   195e8:	str	r1, [sp, #8]
   195ec:	str	r2, [sp, #4]
   195f0:	ldr	r0, [fp, #-4]
   195f4:	ldr	r1, [sp, #8]
   195f8:	ldr	r2, [sp, #4]
   195fc:	bl	2a4b8 <flatcc_builder_append_vector@@Base>
   19600:	mov	sp, fp
   19604:	pop	{fp, pc}
   19608:	push	{fp, lr}
   1960c:	mov	fp, sp
   19610:	sub	sp, sp, #16
   19614:	str	r0, [fp, #-4]
   19618:	ldr	r0, [fp, #-4]
   1961c:	ldr	r1, [fp, #-4]
   19620:	str	r0, [sp, #8]
   19624:	mov	r0, r1
   19628:	bl	264a4 <main@@Base+0x30f0>
   1962c:	ldr	r1, [sp, #8]
   19630:	str	r0, [sp, #4]
   19634:	mov	r0, r1
   19638:	ldr	r1, [sp, #4]
   1963c:	bl	26438 <main@@Base+0x3084>
   19640:	mov	sp, fp
   19644:	pop	{fp, pc}
   19648:	push	{fp, lr}
   1964c:	mov	fp, sp
   19650:	sub	sp, sp, #24
   19654:	str	r1, [sp, #12]
   19658:	str	r2, [sp, #16]
   1965c:	str	r0, [sp, #8]
   19660:	ldrb	r0, [sp, #12]
   19664:	cmp	r0, #0
   19668:	bne	19678 <gen_monster@@Base+0x1094>
   1966c:	movw	r0, #0
   19670:	str	r0, [fp, #-4]
   19674:	b	19700 <gen_monster@@Base+0x111c>
   19678:	ldr	r0, [sp, #16]
   1967c:	cmp	r0, #0
   19680:	bne	19690 <gen_monster@@Base+0x10ac>
   19684:	mvn	r0, #0
   19688:	str	r0, [fp, #-4]
   1968c:	b	19700 <gen_monster@@Base+0x111c>
   19690:	ldr	r0, [sp, #8]
   19694:	movw	r1, #7
   19698:	movw	r2, #1
   1969c:	movw	r3, #1
   196a0:	uxth	r3, r3
   196a4:	bl	2ca28 <flatcc_builder_table_add@@Base>
   196a8:	str	r0, [sp]
   196ac:	movw	r1, #0
   196b0:	cmp	r0, r1
   196b4:	beq	196d4 <gen_monster@@Base+0x10f0>
   196b8:	ldr	r0, [sp, #8]
   196bc:	movw	r1, #8
   196c0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   196c4:	str	r0, [sp, #4]
   196c8:	movw	r1, #0
   196cc:	cmp	r0, r1
   196d0:	bne	196e0 <gen_monster@@Base+0x10fc>
   196d4:	mvn	r0, #0
   196d8:	str	r0, [fp, #-4]
   196dc:	b	19700 <gen_monster@@Base+0x111c>
   196e0:	ldrb	r0, [sp, #12]
   196e4:	ldr	r1, [sp]
   196e8:	strb	r0, [r1]
   196ec:	ldr	r0, [sp, #16]
   196f0:	ldr	r1, [sp, #4]
   196f4:	str	r0, [r1]
   196f8:	movw	r0, #0
   196fc:	str	r0, [fp, #-4]
   19700:	ldr	r0, [fp, #-4]
   19704:	mov	sp, fp
   19708:	pop	{fp, pc}
   1970c:	sub	sp, sp, #4
   19710:	str	r1, [sp]
   19714:	movw	r1, #1
   19718:	strb	r1, [r0]
   1971c:	ldr	r1, [sp]
   19720:	str	r1, [r0, #4]
   19724:	add	sp, sp, #4
   19728:	bx	lr
   1972c:	push	{fp, lr}
   19730:	mov	fp, sp
   19734:	sub	sp, sp, #8
   19738:	str	r0, [sp, #4]
   1973c:	ldr	r0, [sp, #4]
   19740:	bl	14910 <test_empty_monster@@Base+0x1cc>
   19744:	mov	sp, fp
   19748:	pop	{fp, pc}
   1974c:	push	{fp, lr}
   19750:	mov	fp, sp
   19754:	sub	sp, sp, #8
   19758:	str	r0, [sp, #4]
   1975c:	ldr	r0, [sp, #4]
   19760:	bl	14910 <test_empty_monster@@Base+0x1cc>
   19764:	mov	sp, fp
   19768:	pop	{fp, pc}
   1976c:	push	{fp, lr}
   19770:	mov	fp, sp
   19774:	sub	sp, sp, #24
   19778:	str	r0, [fp, #-4]
   1977c:	str	r1, [fp, #-8]
   19780:	ldr	r0, [fp, #-4]
   19784:	ldr	r1, [fp, #-8]
   19788:	add	r2, sp, #8
   1978c:	str	r0, [sp, #4]
   19790:	mov	r0, r2
   19794:	bl	1970c <gen_monster@@Base+0x1128>
   19798:	ldr	r1, [sp, #8]
   1979c:	ldr	r2, [sp, #12]
   197a0:	ldr	r0, [sp, #4]
   197a4:	bl	19648 <gen_monster@@Base+0x1064>
   197a8:	mov	sp, fp
   197ac:	pop	{fp, pc}
   197b0:	push	{fp, lr}
   197b4:	mov	fp, sp
   197b8:	sub	sp, sp, #16
   197bc:	str	r0, [fp, #-4]
   197c0:	ldr	r0, [fp, #-4]
   197c4:	ldr	r1, [fp, #-4]
   197c8:	str	r0, [sp, #8]
   197cc:	mov	r0, r1
   197d0:	bl	14980 <test_empty_monster@@Base+0x23c>
   197d4:	ldr	r1, [sp, #8]
   197d8:	str	r0, [sp, #4]
   197dc:	mov	r0, r1
   197e0:	ldr	r1, [sp, #4]
   197e4:	bl	264c4 <main@@Base+0x3110>
   197e8:	mov	sp, fp
   197ec:	pop	{fp, pc}
   197f0:	push	{fp, lr}
   197f4:	mov	fp, sp
   197f8:	sub	sp, sp, #24
   197fc:	str	r1, [sp, #12]
   19800:	str	r2, [sp, #16]
   19804:	str	r0, [sp, #8]
   19808:	ldrb	r0, [sp, #12]
   1980c:	cmp	r0, #0
   19810:	bne	19820 <gen_monster@@Base+0x123c>
   19814:	movw	r0, #0
   19818:	str	r0, [fp, #-4]
   1981c:	b	19868 <gen_monster@@Base+0x1284>
   19820:	ldr	r0, [sp, #8]
   19824:	movw	r1, #8
   19828:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   1982c:	str	r0, [sp, #4]
   19830:	movw	r1, #0
   19834:	cmp	r0, r1
   19838:	beq	19854 <gen_monster@@Base+0x1270>
   1983c:	ldr	r0, [sp, #16]
   19840:	ldr	r1, [sp, #4]
   19844:	str	r0, [r1]
   19848:	movw	r0, #0
   1984c:	str	r0, [sp]
   19850:	b	19860 <gen_monster@@Base+0x127c>
   19854:	mvn	r0, #0
   19858:	str	r0, [sp]
   1985c:	b	19860 <gen_monster@@Base+0x127c>
   19860:	ldr	r0, [sp]
   19864:	str	r0, [fp, #-4]
   19868:	ldr	r0, [fp, #-4]
   1986c:	mov	sp, fp
   19870:	pop	{fp, pc}
   19874:	push	{fp, lr}
   19878:	mov	fp, sp
   1987c:	sub	sp, sp, #24
   19880:	str	r0, [fp, #-8]
   19884:	strb	r1, [fp, #-9]
   19888:	ldrb	r0, [fp, #-9]
   1988c:	cmp	r0, #0
   19890:	bne	198a0 <gen_monster@@Base+0x12bc>
   19894:	movw	r0, #0
   19898:	str	r0, [fp, #-4]
   1989c:	b	198f4 <gen_monster@@Base+0x1310>
   198a0:	ldr	r0, [fp, #-8]
   198a4:	movw	r1, #7
   198a8:	movw	r2, #1
   198ac:	movw	r3, #1
   198b0:	uxth	r3, r3
   198b4:	bl	2ca28 <flatcc_builder_table_add@@Base>
   198b8:	str	r0, [sp, #8]
   198bc:	movw	r1, #0
   198c0:	cmp	r0, r1
   198c4:	beq	198e0 <gen_monster@@Base+0x12fc>
   198c8:	ldrb	r0, [fp, #-9]
   198cc:	ldr	r1, [sp, #8]
   198d0:	strb	r0, [r1]
   198d4:	movw	r0, #0
   198d8:	str	r0, [sp, #4]
   198dc:	b	198ec <gen_monster@@Base+0x1308>
   198e0:	mvn	r0, #0
   198e4:	str	r0, [sp, #4]
   198e8:	b	198ec <gen_monster@@Base+0x1308>
   198ec:	ldr	r0, [sp, #4]
   198f0:	str	r0, [fp, #-4]
   198f4:	ldr	r0, [fp, #-4]
   198f8:	mov	sp, fp
   198fc:	pop	{fp, pc}
   19900:	push	{fp, lr}
   19904:	mov	fp, sp
   19908:	sub	sp, sp, #16
   1990c:	str	r0, [fp, #-4]
   19910:	ldr	r0, [fp, #-4]
   19914:	ldr	r1, [fp, #-4]
   19918:	str	r0, [sp, #8]
   1991c:	mov	r0, r1
   19920:	bl	14980 <test_empty_monster@@Base+0x23c>
   19924:	ldr	r1, [sp, #8]
   19928:	str	r0, [sp, #4]
   1992c:	mov	r0, r1
   19930:	ldr	r1, [sp, #4]
   19934:	bl	1e440 <test_create_add_field@@Base+0x1e4>
   19938:	mov	sp, fp
   1993c:	pop	{fp, pc}
   19940:	push	{fp, lr}
   19944:	mov	fp, sp
   19948:	sub	sp, sp, #24
   1994c:	str	r0, [fp, #-8]
   19950:	strb	r1, [fp, #-9]
   19954:	ldrb	r0, [fp, #-9]
   19958:	cmp	r0, #1
   1995c:	bne	1996c <gen_monster@@Base+0x1388>
   19960:	movw	r0, #0
   19964:	str	r0, [fp, #-4]
   19968:	b	199b8 <gen_monster@@Base+0x13d4>
   1996c:	ldr	r0, [fp, #-8]
   19970:	movw	r1, #15
   19974:	movw	r2, #1
   19978:	movw	r3, #1
   1997c:	uxth	r3, r3
   19980:	bl	2ca28 <flatcc_builder_table_add@@Base>
   19984:	str	r0, [sp, #8]
   19988:	movw	r1, #0
   1998c:	cmp	r0, r1
   19990:	bne	199a0 <gen_monster@@Base+0x13bc>
   19994:	mvn	r0, #0
   19998:	str	r0, [fp, #-4]
   1999c:	b	199b8 <gen_monster@@Base+0x13d4>
   199a0:	ldr	r0, [sp, #8]
   199a4:	ldrb	r1, [fp, #-9]
   199a8:	bl	26510 <main@@Base+0x315c>
   199ac:	movw	r1, #0
   199b0:	str	r1, [fp, #-4]
   199b4:	str	r0, [sp, #4]
   199b8:	ldr	r0, [fp, #-4]
   199bc:	mov	sp, fp
   199c0:	pop	{fp, pc}
   199c4:	push	{fp, lr}
   199c8:	mov	fp, sp
   199cc:	sub	sp, sp, #8
   199d0:	str	r0, [sp, #4]
   199d4:	ldr	r0, [sp, #4]
   199d8:	bl	26554 <main@@Base+0x31a0>
   199dc:	mov	sp, fp
   199e0:	pop	{fp, pc}
   199e4:	push	{fp, lr}
   199e8:	mov	fp, sp
   199ec:	sub	sp, sp, #16
   199f0:	str	r0, [fp, #-4]
   199f4:	ldr	r0, [fp, #-4]
   199f8:	ldr	r1, [fp, #-4]
   199fc:	str	r0, [sp, #8]
   19a00:	mov	r0, r1
   19a04:	bl	265e4 <main@@Base+0x3230>
   19a08:	ldr	r1, [sp, #8]
   19a0c:	str	r0, [sp, #4]
   19a10:	mov	r0, r1
   19a14:	ldr	r1, [sp, #4]
   19a18:	bl	26578 <main@@Base+0x31c4>
   19a1c:	mov	sp, fp
   19a20:	pop	{fp, pc}
   19a24:	push	{fp, lr}
   19a28:	mov	fp, sp
   19a2c:	sub	sp, sp, #16
   19a30:	str	r0, [fp, #-4]
   19a34:	ldr	r0, [fp, #-4]
   19a38:	ldr	r1, [fp, #-4]
   19a3c:	str	r0, [sp, #8]
   19a40:	mov	r0, r1
   19a44:	bl	14980 <test_empty_monster@@Base+0x23c>
   19a48:	ldr	r1, [sp, #8]
   19a4c:	str	r0, [sp, #4]
   19a50:	mov	r0, r1
   19a54:	ldr	r1, [sp, #4]
   19a58:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   19a5c:	mov	sp, fp
   19a60:	pop	{fp, pc}

00019a64 <test_monster@@Base>:
   19a64:	push	{fp, lr}
   19a68:	mov	fp, sp
   19a6c:	sub	sp, sp, #40	; 0x28
   19a70:	str	r0, [fp, #-8]
   19a74:	ldr	r0, [fp, #-8]
   19a78:	movw	r1, #0
   19a7c:	bl	185e4 <gen_monster@@Base>
   19a80:	ldr	r1, [fp, #-8]
   19a84:	str	r0, [sp, #16]
   19a88:	mov	r0, r1
   19a8c:	sub	r1, fp, #16
   19a90:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   19a94:	ldr	r1, [pc, #152]	; 19b34 <test_monster@@Base+0xd0>
   19a98:	add	r1, pc, r1
   19a9c:	ldr	lr, [pc, #148]	; 19b38 <test_monster@@Base+0xd4>
   19aa0:	ldr	lr, [pc, lr]
   19aa4:	str	r0, [fp, #-12]
   19aa8:	ldr	r0, [fp, #-12]
   19aac:	ldr	r2, [fp, #-16]
   19ab0:	ldr	r3, [lr]
   19ab4:	str	r0, [sp, #12]
   19ab8:	mov	r0, r1
   19abc:	ldr	r1, [sp, #12]
   19ac0:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   19ac4:	ldr	r0, [fp, #-12]
   19ac8:	ldr	r1, [fp, #-16]
   19acc:	bl	14a54 <test_empty_monster@@Base+0x310>
   19ad0:	str	r0, [sp, #20]
   19ad4:	cmp	r0, #0
   19ad8:	beq	19b0c <test_monster@@Base+0xa8>
   19adc:	ldr	r0, [sp, #20]
   19ae0:	bl	2f084 <flatcc_verify_error_string@@Base>
   19ae4:	ldr	lr, [pc, #80]	; 19b3c <test_monster@@Base+0xd8>
   19ae8:	add	lr, pc, lr
   19aec:	str	r0, [sp, #8]
   19af0:	mov	r0, lr
   19af4:	ldr	r1, [sp, #8]
   19af8:	bl	12d9c <printf@plt>
   19afc:	mvn	r1, #0
   19b00:	str	r1, [fp, #-4]
   19b04:	str	r0, [sp, #4]
   19b08:	b	19b28 <test_monster@@Base+0xc4>
   19b0c:	ldr	r0, [fp, #-12]
   19b10:	bl	15a54 <verify_monster@@Base>
   19b14:	str	r0, [sp, #20]
   19b18:	ldr	r0, [fp, #-12]
   19b1c:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   19b20:	ldr	r0, [sp, #20]
   19b24:	str	r0, [fp, #-4]
   19b28:	ldr	r0, [fp, #-4]
   19b2c:	mov	sp, fp
   19b30:	pop	{fp, pc}
   19b34:	muleq	r1, r8, r3
   19b38:			; <UNDEFINED> instruction: 0x0002f5b4
   19b3c:	andeq	r9, r1, r6, ror #1

00019b40 <test_monster_with_size@@Base>:
   19b40:	push	{fp, lr}
   19b44:	mov	fp, sp
   19b48:	sub	sp, sp, #64	; 0x40
   19b4c:	str	r0, [fp, #-8]
   19b50:	ldr	r0, [fp, #-8]
   19b54:	movw	r1, #1
   19b58:	bl	185e4 <gen_monster@@Base>
   19b5c:	ldr	r1, [fp, #-8]
   19b60:	str	r0, [sp, #28]
   19b64:	mov	r0, r1
   19b68:	sub	r1, fp, #20
   19b6c:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   19b70:	ldr	r1, [pc, #300]	; 19ca4 <test_monster_with_size@@Base+0x164>
   19b74:	add	r1, pc, r1
   19b78:	ldr	lr, [pc, #296]	; 19ca8 <test_monster_with_size@@Base+0x168>
   19b7c:	ldr	lr, [pc, lr]
   19b80:	str	r0, [fp, #-16]
   19b84:	ldr	r0, [fp, #-16]
   19b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b8c:	ldr	r3, [lr]
   19b90:	str	r0, [sp, #24]
   19b94:	mov	r0, r1
   19b98:	ldr	r1, [sp, #24]
   19b9c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   19ba0:	ldr	r0, [fp, #-16]
   19ba4:	and	r0, r0, #15
   19ba8:	cmp	r0, #0
   19bac:	beq	19be4 <test_monster_with_size@@Base+0xa4>
   19bb0:	ldr	r0, [pc, #256]	; 19cb8 <test_monster_with_size@@Base+0x178>
   19bb4:	add	r0, pc, r0
   19bb8:	bl	12d9c <printf@plt>
   19bbc:	ldr	lr, [pc, #240]	; 19cb4 <test_monster_with_size@@Base+0x174>
   19bc0:	add	lr, pc, lr
   19bc4:	ldr	r1, [fp, #-16]
   19bc8:	str	r0, [sp, #20]
   19bcc:	mov	r0, lr
   19bd0:	bl	12d9c <printf@plt>
   19bd4:	mvn	r1, #0
   19bd8:	str	r1, [fp, #-4]
   19bdc:	str	r0, [sp, #16]
   19be0:	b	19c98 <test_monster_with_size@@Base+0x158>
   19be4:	ldr	r0, [fp, #-16]
   19be8:	sub	r1, fp, #24
   19bec:	bl	19cbc <test_monster_with_size@@Base+0x17c>
   19bf0:	str	r0, [fp, #-12]
   19bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   19bf8:	sub	r0, r0, #4
   19bfc:	str	r0, [fp, #-28]	; 0xffffffe4
   19c00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19c08:	cmp	r0, r1
   19c0c:	beq	19c34 <test_monster_with_size@@Base+0xf4>
   19c10:	ldr	r0, [pc, #152]	; 19cb0 <test_monster_with_size@@Base+0x170>
   19c14:	add	r0, pc, r0
   19c18:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19c1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19c20:	bl	12d9c <printf@plt>
   19c24:	mvn	r1, #0
   19c28:	str	r1, [fp, #-4]
   19c2c:	str	r0, [sp, #12]
   19c30:	b	19c98 <test_monster_with_size@@Base+0x158>
   19c34:	ldr	r0, [fp, #-12]
   19c38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19c3c:	bl	14a54 <test_empty_monster@@Base+0x310>
   19c40:	str	r0, [sp, #32]
   19c44:	cmp	r0, #0
   19c48:	beq	19c7c <test_monster_with_size@@Base+0x13c>
   19c4c:	ldr	r0, [sp, #32]
   19c50:	bl	2f084 <flatcc_verify_error_string@@Base>
   19c54:	ldr	lr, [pc, #80]	; 19cac <test_monster_with_size@@Base+0x16c>
   19c58:	add	lr, pc, lr
   19c5c:	str	r0, [sp, #8]
   19c60:	mov	r0, lr
   19c64:	ldr	r1, [sp, #8]
   19c68:	bl	12d9c <printf@plt>
   19c6c:	mvn	r1, #0
   19c70:	str	r1, [fp, #-4]
   19c74:	str	r0, [sp, #4]
   19c78:	b	19c98 <test_monster_with_size@@Base+0x158>
   19c7c:	ldr	r0, [fp, #-12]
   19c80:	bl	15a54 <verify_monster@@Base>
   19c84:	str	r0, [sp, #32]
   19c88:	ldr	r0, [fp, #-16]
   19c8c:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   19c90:	ldr	r0, [sp, #32]
   19c94:	str	r0, [fp, #-4]
   19c98:	ldr	r0, [fp, #-4]
   19c9c:	mov	sp, fp
   19ca0:	pop	{fp, pc}
   19ca4:	andeq	r9, r1, r4, lsl #1
   19ca8:	ldrdeq	pc, [r2], -r8
   19cac:	andeq	r9, r1, r3, asr r0
   19cb0:	andeq	r9, r1, r1, rrx
   19cb4:	andeq	r9, r1, r1, lsr #1
   19cb8:	andeq	r9, r1, ip, asr r0
   19cbc:	push	{fp, lr}
   19cc0:	mov	fp, sp
   19cc4:	sub	sp, sp, #8
   19cc8:	str	r0, [sp, #4]
   19ccc:	str	r1, [sp]
   19cd0:	ldr	r0, [sp]
   19cd4:	movw	r1, #0
   19cd8:	cmp	r0, r1
   19cdc:	beq	19cf0 <test_monster_with_size@@Base+0x1b0>
   19ce0:	ldr	r0, [sp, #4]
   19ce4:	bl	2386c <main@@Base+0x4b8>
   19ce8:	ldr	lr, [sp]
   19cec:	str	r0, [lr]
   19cf0:	ldr	r0, [sp, #4]
   19cf4:	add	r0, r0, #4
   19cf8:	mov	sp, fp
   19cfc:	pop	{fp, pc}

00019d00 <test_string@@Base>:
   19d00:	push	{fp, lr}
   19d04:	mov	fp, sp
   19d08:	sub	sp, sp, #64	; 0x40
   19d0c:	str	r0, [fp, #-8]
   19d10:	ldr	r0, [fp, #-8]
   19d14:	bl	28b78 <flatcc_builder_reset@@Base>
   19d18:	ldr	lr, [fp, #-8]
   19d1c:	str	r0, [fp, #-24]	; 0xffffffe8
   19d20:	mov	r0, lr
   19d24:	bl	18e74 <gen_monster@@Base+0x890>
   19d28:	ldr	lr, [fp, #-8]
   19d2c:	str	r0, [fp, #-28]	; 0xffffffe4
   19d30:	mov	r0, lr
   19d34:	bl	19fcc <test_string@@Base+0x2cc>
   19d38:	ldr	lr, [fp, #-8]
   19d3c:	str	r0, [sp, #32]
   19d40:	mov	r0, lr
   19d44:	movw	r1, #3
   19d48:	bl	19fec <test_string@@Base+0x2ec>
   19d4c:	ldr	r1, [pc, #552]	; 19f7c <test_string@@Base+0x27c>
   19d50:	add	r1, pc, r1
   19d54:	str	r0, [fp, #-20]	; 0xffffffec
   19d58:	ldr	r0, [fp, #-20]	; 0xffffffec
   19d5c:	movw	lr, #49	; 0x31
   19d60:	strb	lr, [r0]
   19d64:	ldr	r0, [fp, #-20]	; 0xffffffec
   19d68:	movw	lr, #50	; 0x32
   19d6c:	strb	lr, [r0, #1]
   19d70:	ldr	r0, [fp, #-20]	; 0xffffffec
   19d74:	movw	lr, #51	; 0x33
   19d78:	strb	lr, [r0, #2]
   19d7c:	ldr	r0, [fp, #-8]
   19d80:	bl	1a014 <test_string@@Base+0x314>
   19d84:	ldr	r1, [fp, #-8]
   19d88:	str	r0, [sp, #28]
   19d8c:	mov	r0, r1
   19d90:	bl	1a03c <test_string@@Base+0x33c>
   19d94:	cmp	r0, #4
   19d98:	bne	19da0 <test_string@@Base+0xa0>
   19d9c:	b	19dc0 <test_string@@Base+0xc0>
   19da0:	ldr	r0, [pc, #472]	; 19f80 <test_string@@Base+0x280>
   19da4:	add	r0, pc, r0
   19da8:	ldr	r1, [pc, #468]	; 19f84 <test_string@@Base+0x284>
   19dac:	add	r1, pc, r1
   19db0:	ldr	r2, [pc, #464]	; 19f88 <test_string@@Base+0x288>
   19db4:	add	r3, pc, r2
   19db8:	movw	r2, #1080	; 0x438
   19dbc:	bl	12e68 <__assert_fail@plt>
   19dc0:	ldr	r0, [pc, #452]	; 19f8c <test_string@@Base+0x28c>
   19dc4:	add	r1, pc, r0
   19dc8:	ldr	r0, [fp, #-8]
   19dcc:	movw	r2, #30
   19dd0:	bl	1a05c <test_string@@Base+0x35c>
   19dd4:	ldr	r1, [fp, #-8]
   19dd8:	str	r0, [sp, #24]
   19ddc:	mov	r0, r1
   19de0:	bl	1a03c <test_string@@Base+0x33c>
   19de4:	cmp	r0, #8
   19de8:	bne	19df0 <test_string@@Base+0xf0>
   19dec:	b	19e10 <test_string@@Base+0x110>
   19df0:	ldr	r0, [pc, #408]	; 19f90 <test_string@@Base+0x290>
   19df4:	add	r0, pc, r0
   19df8:	ldr	r1, [pc, #404]	; 19f94 <test_string@@Base+0x294>
   19dfc:	add	r1, pc, r1
   19e00:	ldr	r2, [pc, #400]	; 19f98 <test_string@@Base+0x298>
   19e04:	add	r3, pc, r2
   19e08:	movw	r2, #1082	; 0x43a
   19e0c:	bl	12e68 <__assert_fail@plt>
   19e10:	ldr	r0, [pc, #388]	; 19f9c <test_string@@Base+0x29c>
   19e14:	add	r1, pc, r0
   19e18:	ldr	r0, [fp, #-8]
   19e1c:	movw	r2, #2
   19e20:	bl	1a08c <test_string@@Base+0x38c>
   19e24:	ldr	r1, [fp, #-8]
   19e28:	str	r0, [sp, #20]
   19e2c:	mov	r0, r1
   19e30:	bl	1a03c <test_string@@Base+0x33c>
   19e34:	cmp	r0, #10
   19e38:	bne	19e40 <test_string@@Base+0x140>
   19e3c:	b	19e60 <test_string@@Base+0x160>
   19e40:	ldr	r0, [pc, #344]	; 19fa0 <test_string@@Base+0x2a0>
   19e44:	add	r0, pc, r0
   19e48:	ldr	r1, [pc, #340]	; 19fa4 <test_string@@Base+0x2a4>
   19e4c:	add	r1, pc, r1
   19e50:	ldr	r2, [pc, #336]	; 19fa8 <test_string@@Base+0x2a8>
   19e54:	add	r3, pc, r2
   19e58:	movw	r2, #1084	; 0x43c
   19e5c:	bl	12e68 <__assert_fail@plt>
   19e60:	ldr	r0, [fp, #-8]
   19e64:	movw	r1, #3
   19e68:	bl	1a0bc <test_string@@Base+0x3bc>
   19e6c:	ldr	r1, [fp, #-8]
   19e70:	str	r0, [sp, #16]
   19e74:	mov	r0, r1
   19e78:	bl	1a03c <test_string@@Base+0x33c>
   19e7c:	cmp	r0, #7
   19e80:	bne	19e88 <test_string@@Base+0x188>
   19e84:	b	19ea8 <test_string@@Base+0x1a8>
   19e88:	ldr	r0, [pc, #284]	; 19fac <test_string@@Base+0x2ac>
   19e8c:	add	r0, pc, r0
   19e90:	ldr	r1, [pc, #280]	; 19fb0 <test_string@@Base+0x2b0>
   19e94:	add	r1, pc, r1
   19e98:	ldr	r2, [pc, #276]	; 19fb4 <test_string@@Base+0x2b4>
   19e9c:	add	r3, pc, r2
   19ea0:	movw	r2, #1086	; 0x43e
   19ea4:	bl	12e68 <__assert_fail@plt>
   19ea8:	ldr	r0, [fp, #-8]
   19eac:	bl	1a0e4 <test_string@@Base+0x3e4>
   19eb0:	str	r0, [fp, #-20]	; 0xffffffec
   19eb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   19eb8:	movw	lr, #46	; 0x2e
   19ebc:	strb	lr, [r0, #4]
   19ec0:	ldr	r0, [fp, #-8]
   19ec4:	bl	1a104 <test_string@@Base+0x404>
   19ec8:	ldr	lr, [fp, #-8]
   19ecc:	str	r0, [sp, #12]
   19ed0:	mov	r0, lr
   19ed4:	bl	19a24 <gen_monster@@Base+0x1440>
   19ed8:	ldr	lr, [fp, #-8]
   19edc:	str	r0, [sp, #8]
   19ee0:	mov	r0, lr
   19ee4:	movw	r1, #0
   19ee8:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   19eec:	str	r0, [fp, #-16]
   19ef0:	ldr	r0, [fp, #-16]
   19ef4:	movw	r1, #0
   19ef8:	cmp	r0, r1
   19efc:	beq	19f04 <test_string@@Base+0x204>
   19f00:	b	19f24 <test_string@@Base+0x224>
   19f04:	ldr	r0, [pc, #172]	; 19fb8 <test_string@@Base+0x2b8>
   19f08:	add	r0, pc, r0
   19f0c:	ldr	r1, [pc, #168]	; 19fbc <test_string@@Base+0x2bc>
   19f10:	add	r1, pc, r1
   19f14:	ldr	r2, [pc, #164]	; 19fc0 <test_string@@Base+0x2c0>
   19f18:	add	r3, pc, r2
   19f1c:	movw	r2, #1093	; 0x445
   19f20:	bl	12e68 <__assert_fail@plt>
   19f24:	ldr	r0, [fp, #-16]
   19f28:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   19f2c:	str	r0, [fp, #-12]
   19f30:	ldr	r0, [fp, #-12]
   19f34:	bl	16d54 <verify_monster@@Base+0x1300>
   19f38:	ldr	r1, [pc, #136]	; 19fc8 <test_string@@Base+0x2c8>
   19f3c:	add	r1, pc, r1
   19f40:	bl	12d90 <strcmp@plt>
   19f44:	cmp	r0, #0
   19f48:	beq	19f68 <test_string@@Base+0x268>
   19f4c:	ldr	r0, [pc, #112]	; 19fc4 <test_string@@Base+0x2c4>
   19f50:	add	r0, pc, r0
   19f54:	bl	12d9c <printf@plt>
   19f58:	mvn	lr, #0
   19f5c:	str	lr, [fp, #-4]
   19f60:	str	r0, [sp, #4]
   19f64:	b	19f70 <test_string@@Base+0x270>
   19f68:	movw	r0, #0
   19f6c:	str	r0, [fp, #-4]
   19f70:	ldr	r0, [fp, #-4]
   19f74:	mov	sp, fp
   19f78:	pop	{fp, pc}
   19f7c:			; <UNDEFINED> instruction: 0x00018fba
   19f80:	andeq	r8, r1, r2, asr #30
   19f84:	muleq	r1, r7, r8
   19f88:	andeq	r8, r1, r8, asr pc
   19f8c:	andeq	r8, r1, ip, ror #30
   19f90:	andeq	r8, r1, r1, asr #30
   19f94:	andeq	r8, r1, r7, asr #16
   19f98:	andeq	r8, r1, r8, lsl #30
   19f9c:	andeq	r8, r1, r7, asr #30
   19fa0:	andeq	r8, r1, sl, lsl pc
   19fa4:	strdeq	r8, [r1], -r7
   19fa8:			; <UNDEFINED> instruction: 0x00018eb8
   19fac:	strdeq	r8, [r1], -r9
   19fb0:	andeq	r8, r1, pc, lsr #15
   19fb4:	andeq	r8, r1, r0, ror lr
   19fb8:			; <UNDEFINED> instruction: 0x000196b0
   19fbc:	andeq	r8, r1, r3, lsr r7
   19fc0:	strdeq	r8, [r1], -r4
   19fc4:	andeq	r8, r1, r3, ror #28
   19fc8:	andeq	r8, r1, pc, ror #28
   19fcc:	push	{fp, lr}
   19fd0:	mov	fp, sp
   19fd4:	sub	sp, sp, #8
   19fd8:	str	r0, [sp, #4]
   19fdc:	ldr	r0, [sp, #4]
   19fe0:	bl	2af90 <flatcc_builder_start_string@@Base>
   19fe4:	mov	sp, fp
   19fe8:	pop	{fp, pc}
   19fec:	push	{fp, lr}
   19ff0:	mov	fp, sp
   19ff4:	sub	sp, sp, #8
   19ff8:	str	r0, [sp, #4]
   19ffc:	str	r1, [sp]
   1a000:	ldr	r0, [sp, #4]
   1a004:	ldr	r1, [sp]
   1a008:	bl	2a750 <flatcc_builder_extend_string@@Base>
   1a00c:	mov	sp, fp
   1a010:	pop	{fp, pc}
   1a014:	push	{fp, lr}
   1a018:	mov	fp, sp
   1a01c:	sub	sp, sp, #8
   1a020:	str	r0, [sp, #4]
   1a024:	str	r1, [sp]
   1a028:	ldr	r0, [sp, #4]
   1a02c:	ldr	r1, [sp]
   1a030:	bl	2a888 <flatcc_builder_append_string_str@@Base>
   1a034:	mov	sp, fp
   1a038:	pop	{fp, pc}
   1a03c:	push	{fp, lr}
   1a040:	mov	fp, sp
   1a044:	sub	sp, sp, #8
   1a048:	str	r0, [sp, #4]
   1a04c:	ldr	r0, [sp, #4]
   1a050:	bl	2d7b8 <flatcc_builder_string_len@@Base>
   1a054:	mov	sp, fp
   1a058:	pop	{fp, pc}
   1a05c:	push	{fp, lr}
   1a060:	mov	fp, sp
   1a064:	sub	sp, sp, #16
   1a068:	str	r0, [fp, #-4]
   1a06c:	str	r1, [sp, #8]
   1a070:	str	r2, [sp, #4]
   1a074:	ldr	r0, [fp, #-4]
   1a078:	ldr	r1, [sp, #8]
   1a07c:	ldr	r2, [sp, #4]
   1a080:	bl	2a8d8 <flatcc_builder_append_string_strn@@Base>
   1a084:	mov	sp, fp
   1a088:	pop	{fp, pc}
   1a08c:	push	{fp, lr}
   1a090:	mov	fp, sp
   1a094:	sub	sp, sp, #16
   1a098:	str	r0, [fp, #-4]
   1a09c:	str	r1, [sp, #8]
   1a0a0:	str	r2, [sp, #4]
   1a0a4:	ldr	r0, [fp, #-4]
   1a0a8:	ldr	r1, [sp, #8]
   1a0ac:	ldr	r2, [sp, #4]
   1a0b0:	bl	2a7e8 <flatcc_builder_append_string@@Base>
   1a0b4:	mov	sp, fp
   1a0b8:	pop	{fp, pc}
   1a0bc:	push	{fp, lr}
   1a0c0:	mov	fp, sp
   1a0c4:	sub	sp, sp, #8
   1a0c8:	str	r0, [sp, #4]
   1a0cc:	str	r1, [sp]
   1a0d0:	ldr	r0, [sp, #4]
   1a0d4:	ldr	r1, [sp]
   1a0d8:	bl	2ac00 <flatcc_builder_truncate_string@@Base>
   1a0dc:	mov	sp, fp
   1a0e0:	pop	{fp, pc}
   1a0e4:	push	{fp, lr}
   1a0e8:	mov	fp, sp
   1a0ec:	sub	sp, sp, #8
   1a0f0:	str	r0, [sp, #4]
   1a0f4:	ldr	r0, [sp, #4]
   1a0f8:	bl	2d7a0 <flatcc_builder_string_edit@@Base>
   1a0fc:	mov	sp, fp
   1a100:	pop	{fp, pc}
   1a104:	push	{fp, lr}
   1a108:	mov	fp, sp
   1a10c:	sub	sp, sp, #16
   1a110:	str	r0, [fp, #-4]
   1a114:	ldr	r0, [fp, #-4]
   1a118:	ldr	r1, [fp, #-4]
   1a11c:	str	r0, [sp, #8]
   1a120:	mov	r0, r1
   1a124:	bl	2d6b0 <flatcc_builder_end_string@@Base>
   1a128:	ldr	r1, [sp, #8]
   1a12c:	str	r0, [sp, #4]
   1a130:	mov	r0, r1
   1a134:	ldr	r1, [sp, #4]
   1a138:	bl	192f4 <gen_monster@@Base+0xd10>
   1a13c:	mov	sp, fp
   1a140:	pop	{fp, pc}

0001a144 <test_sort_find@@Base>:
   1a144:	push	{fp, lr}
   1a148:	mov	fp, sp
   1a14c:	sub	sp, sp, #200	; 0xc8
   1a150:	str	r0, [fp, #-4]
   1a154:	mvn	r0, #0
   1a158:	str	r0, [fp, #-32]	; 0xffffffe0
   1a15c:	ldr	r0, [fp, #-4]
   1a160:	bl	28b78 <flatcc_builder_reset@@Base>
   1a164:	ldr	lr, [fp, #-4]
   1a168:	str	r0, [fp, #-36]	; 0xffffffdc
   1a16c:	mov	r0, lr
   1a170:	bl	18e74 <gen_monster@@Base+0x890>
   1a174:	ldr	lr, [pc, #1448]	; 1a724 <test_sort_find@@Base+0x5e0>
   1a178:	add	r1, pc, lr
   1a17c:	ldr	lr, [fp, #-4]
   1a180:	str	r0, [fp, #-40]	; 0xffffffd8
   1a184:	mov	r0, lr
   1a188:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a18c:	ldr	r1, [fp, #-4]
   1a190:	str	r0, [fp, #-44]	; 0xffffffd4
   1a194:	mov	r0, r1
   1a198:	bl	19360 <gen_monster@@Base+0xd7c>
   1a19c:	ldr	r1, [fp, #-4]
   1a1a0:	str	r0, [fp, #-48]	; 0xffffffd0
   1a1a4:	mov	r0, r1
   1a1a8:	bl	193a8 <gen_monster@@Base+0xdc4>
   1a1ac:	ldr	r1, [pc, #1388]	; 1a720 <test_sort_find@@Base+0x5dc>
   1a1b0:	add	r1, pc, r1
   1a1b4:	ldr	lr, [fp, #-4]
   1a1b8:	str	r0, [fp, #-52]	; 0xffffffcc
   1a1bc:	mov	r0, lr
   1a1c0:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a1c4:	ldr	r1, [fp, #-4]
   1a1c8:	str	r0, [fp, #-56]	; 0xffffffc8
   1a1cc:	mov	r0, r1
   1a1d0:	bl	19420 <gen_monster@@Base+0xe3c>
   1a1d4:	ldr	r1, [fp, #-4]
   1a1d8:	str	r0, [fp, #-60]	; 0xffffffc4
   1a1dc:	mov	r0, r1
   1a1e0:	bl	193a8 <gen_monster@@Base+0xdc4>
   1a1e4:	ldr	r1, [pc, #1328]	; 1a71c <test_sort_find@@Base+0x5d8>
   1a1e8:	add	r1, pc, r1
   1a1ec:	ldr	lr, [fp, #-4]
   1a1f0:	str	r0, [fp, #-64]	; 0xffffffc0
   1a1f4:	mov	r0, lr
   1a1f8:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a1fc:	ldr	r1, [fp, #-4]
   1a200:	str	r0, [fp, #-68]	; 0xffffffbc
   1a204:	mov	r0, r1
   1a208:	bl	19420 <gen_monster@@Base+0xe3c>
   1a20c:	ldr	r1, [fp, #-4]
   1a210:	str	r0, [fp, #-72]	; 0xffffffb8
   1a214:	mov	r0, r1
   1a218:	bl	193a8 <gen_monster@@Base+0xdc4>
   1a21c:	ldr	r1, [pc, #1268]	; 1a718 <test_sort_find@@Base+0x5d4>
   1a220:	add	r1, pc, r1
   1a224:	ldr	lr, [fp, #-4]
   1a228:	str	r0, [fp, #-76]	; 0xffffffb4
   1a22c:	mov	r0, lr
   1a230:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a234:	ldr	r1, [fp, #-4]
   1a238:	str	r0, [fp, #-80]	; 0xffffffb0
   1a23c:	mov	r0, r1
   1a240:	bl	19420 <gen_monster@@Base+0xe3c>
   1a244:	ldr	r1, [fp, #-4]
   1a248:	str	r0, [fp, #-84]	; 0xffffffac
   1a24c:	mov	r0, r1
   1a250:	bl	193a8 <gen_monster@@Base+0xdc4>
   1a254:	ldr	r1, [pc, #1208]	; 1a714 <test_sort_find@@Base+0x5d0>
   1a258:	add	r1, pc, r1
   1a25c:	ldr	lr, [fp, #-4]
   1a260:	str	r0, [fp, #-88]	; 0xffffffa8
   1a264:	mov	r0, lr
   1a268:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a26c:	ldr	r1, [fp, #-4]
   1a270:	str	r0, [fp, #-92]	; 0xffffffa4
   1a274:	mov	r0, r1
   1a278:	bl	19420 <gen_monster@@Base+0xe3c>
   1a27c:	ldr	r1, [fp, #-4]
   1a280:	str	r0, [fp, #-96]	; 0xffffffa0
   1a284:	mov	r0, r1
   1a288:	bl	193a8 <gen_monster@@Base+0xdc4>
   1a28c:	ldr	r1, [pc, #1148]	; 1a710 <test_sort_find@@Base+0x5cc>
   1a290:	add	r1, pc, r1
   1a294:	ldr	lr, [fp, #-4]
   1a298:	str	r0, [sp, #100]	; 0x64
   1a29c:	mov	r0, lr
   1a2a0:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1a2a4:	ldr	r1, [fp, #-4]
   1a2a8:	str	r0, [sp, #96]	; 0x60
   1a2ac:	mov	r0, r1
   1a2b0:	bl	19420 <gen_monster@@Base+0xe3c>
   1a2b4:	ldr	r1, [fp, #-4]
   1a2b8:	str	r0, [sp, #92]	; 0x5c
   1a2bc:	mov	r0, r1
   1a2c0:	bl	194f8 <gen_monster@@Base+0xf14>
   1a2c4:	ldr	r1, [fp, #-4]
   1a2c8:	str	r0, [sp, #88]	; 0x58
   1a2cc:	mov	r0, r1
   1a2d0:	bl	19a24 <gen_monster@@Base+0x1440>
   1a2d4:	ldr	r1, [fp, #-4]
   1a2d8:	str	r0, [sp, #84]	; 0x54
   1a2dc:	mov	r0, r1
   1a2e0:	sub	r1, fp, #28
   1a2e4:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a2e8:	ldr	r1, [pc, #1048]	; 1a708 <test_sort_find@@Base+0x5c4>
   1a2ec:	add	r1, pc, r1
   1a2f0:	ldr	lr, [pc, #1044]	; 1a70c <test_sort_find@@Base+0x5c8>
   1a2f4:	ldr	lr, [pc, lr]
   1a2f8:	str	r0, [fp, #-24]	; 0xffffffe8
   1a2fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a300:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a304:	ldr	r3, [lr]
   1a308:	str	r0, [sp, #80]	; 0x50
   1a30c:	mov	r0, r1
   1a310:	ldr	r1, [sp, #80]	; 0x50
   1a314:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   1a318:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a31c:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1a320:	str	r0, [fp, #-12]
   1a324:	ldr	r0, [fp, #-12]
   1a328:	bl	1771c <verify_monster@@Base+0x1cc8>
   1a32c:	str	r0, [fp, #-16]
   1a330:	ldr	r0, [fp, #-16]
   1a334:	movw	r1, #0
   1a338:	cmp	r0, r1
   1a33c:	beq	1a344 <test_sort_find@@Base+0x200>
   1a340:	b	1a364 <test_sort_find@@Base+0x220>
   1a344:	ldr	r0, [pc, #988]	; 1a728 <test_sort_find@@Base+0x5e4>
   1a348:	add	r0, pc, r0
   1a34c:	ldr	r1, [pc, #984]	; 1a72c <test_sort_find@@Base+0x5e8>
   1a350:	add	r1, pc, r1
   1a354:	ldr	r2, [pc, #980]	; 1a730 <test_sort_find@@Base+0x5ec>
   1a358:	add	r3, pc, r2
   1a35c:	movw	r2, #1147	; 0x47b
   1a360:	bl	12e68 <__assert_fail@plt>
   1a364:	ldr	r0, [fp, #-16]
   1a368:	str	r0, [fp, #-20]	; 0xffffffec
   1a36c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a370:	bl	1a7b8 <test_sort_find@@Base+0x674>
   1a374:	ldr	r0, [pc, #952]	; 1a734 <test_sort_find@@Base+0x5f0>
   1a378:	add	r0, pc, r0
   1a37c:	ldr	lr, [pc, #948]	; 1a738 <test_sort_find@@Base+0x5f4>
   1a380:	ldr	lr, [pc, lr]
   1a384:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a388:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a38c:	ldr	r3, [lr]
   1a390:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   1a394:	ldr	r0, [fp, #-16]
   1a398:	bl	17824 <verify_monster@@Base+0x1dd0>
   1a39c:	cmp	r0, #5
   1a3a0:	beq	1a3b8 <test_sort_find@@Base+0x274>
   1a3a4:	ldr	r0, [pc, #1012]	; 1a7a0 <test_sort_find@@Base+0x65c>
   1a3a8:	add	r0, pc, r0
   1a3ac:	bl	12d9c <printf@plt>
   1a3b0:	str	r0, [sp, #76]	; 0x4c
   1a3b4:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a3b8:	ldr	r0, [fp, #-16]
   1a3bc:	movw	r1, #0
   1a3c0:	bl	17874 <verify_monster@@Base+0x1e20>
   1a3c4:	bl	16d54 <verify_monster@@Base+0x1300>
   1a3c8:	ldr	r1, [pc, #980]	; 1a7a4 <test_sort_find@@Base+0x660>
   1a3cc:	add	r1, pc, r1
   1a3d0:	bl	12d90 <strcmp@plt>
   1a3d4:	cmp	r0, #0
   1a3d8:	beq	1a3f0 <test_sort_find@@Base+0x2ac>
   1a3dc:	ldr	r0, [pc, #952]	; 1a79c <test_sort_find@@Base+0x658>
   1a3e0:	add	r0, pc, r0
   1a3e4:	bl	12d9c <printf@plt>
   1a3e8:	str	r0, [sp, #72]	; 0x48
   1a3ec:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a3f0:	ldr	r0, [fp, #-16]
   1a3f4:	movw	r1, #1
   1a3f8:	bl	17874 <verify_monster@@Base+0x1e20>
   1a3fc:	bl	16d54 <verify_monster@@Base+0x1300>
   1a400:	ldr	r1, [pc, #928]	; 1a7a8 <test_sort_find@@Base+0x664>
   1a404:	add	r1, pc, r1
   1a408:	bl	12d90 <strcmp@plt>
   1a40c:	cmp	r0, #0
   1a410:	beq	1a428 <test_sort_find@@Base+0x2e4>
   1a414:	ldr	r0, [pc, #892]	; 1a798 <test_sort_find@@Base+0x654>
   1a418:	add	r0, pc, r0
   1a41c:	bl	12d9c <printf@plt>
   1a420:	str	r0, [sp, #68]	; 0x44
   1a424:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a428:	ldr	r0, [fp, #-16]
   1a42c:	movw	r1, #2
   1a430:	bl	17874 <verify_monster@@Base+0x1e20>
   1a434:	bl	16d54 <verify_monster@@Base+0x1300>
   1a438:	ldr	r1, [pc, #876]	; 1a7ac <test_sort_find@@Base+0x668>
   1a43c:	add	r1, pc, r1
   1a440:	bl	12d90 <strcmp@plt>
   1a444:	cmp	r0, #0
   1a448:	beq	1a460 <test_sort_find@@Base+0x31c>
   1a44c:	ldr	r0, [pc, #832]	; 1a794 <test_sort_find@@Base+0x650>
   1a450:	add	r0, pc, r0
   1a454:	bl	12d9c <printf@plt>
   1a458:	str	r0, [sp, #64]	; 0x40
   1a45c:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a460:	ldr	r0, [fp, #-16]
   1a464:	movw	r1, #3
   1a468:	bl	17874 <verify_monster@@Base+0x1e20>
   1a46c:	bl	16d54 <verify_monster@@Base+0x1300>
   1a470:	ldr	r1, [pc, #824]	; 1a7b0 <test_sort_find@@Base+0x66c>
   1a474:	add	r1, pc, r1
   1a478:	bl	12d90 <strcmp@plt>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a498 <test_sort_find@@Base+0x354>
   1a484:	ldr	r0, [pc, #772]	; 1a790 <test_sort_find@@Base+0x64c>
   1a488:	add	r0, pc, r0
   1a48c:	bl	12d9c <printf@plt>
   1a490:	str	r0, [sp, #60]	; 0x3c
   1a494:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a498:	ldr	r0, [fp, #-16]
   1a49c:	movw	r1, #4
   1a4a0:	bl	17874 <verify_monster@@Base+0x1e20>
   1a4a4:	bl	16d54 <verify_monster@@Base+0x1300>
   1a4a8:	ldr	r1, [pc, #772]	; 1a7b4 <test_sort_find@@Base+0x670>
   1a4ac:	add	r1, pc, r1
   1a4b0:	bl	12d90 <strcmp@plt>
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a4d0 <test_sort_find@@Base+0x38c>
   1a4bc:	ldr	r0, [pc, #712]	; 1a78c <test_sort_find@@Base+0x648>
   1a4c0:	add	r0, pc, r0
   1a4c4:	bl	12d9c <printf@plt>
   1a4c8:	str	r0, [sp, #56]	; 0x38
   1a4cc:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a4d0:	ldr	r0, [fp, #-16]
   1a4d4:	movw	r1, #1
   1a4d8:	bl	17874 <verify_monster@@Base+0x1e20>
   1a4dc:	ldr	r1, [fp, #-16]
   1a4e0:	str	r0, [sp, #52]	; 0x34
   1a4e4:	mov	r0, r1
   1a4e8:	movw	r1, #2
   1a4ec:	bl	17874 <verify_monster@@Base+0x1e20>
   1a4f0:	ldr	r1, [sp, #52]	; 0x34
   1a4f4:	cmp	r1, r0
   1a4f8:	bne	1a510 <test_sort_find@@Base+0x3cc>
   1a4fc:	ldr	r0, [pc, #644]	; 1a788 <test_sort_find@@Base+0x644>
   1a500:	add	r0, pc, r0
   1a504:	bl	12d9c <printf@plt>
   1a508:	str	r0, [sp, #48]	; 0x30
   1a50c:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a510:	ldr	r0, [pc, #548]	; 1a73c <test_sort_find@@Base+0x5f8>
   1a514:	add	r1, pc, r0
   1a518:	ldr	r0, [fp, #-16]
   1a51c:	bl	1a7d8 <test_sort_find@@Base+0x694>
   1a520:	movw	r1, #3
   1a524:	cmp	r1, r0
   1a528:	beq	1a540 <test_sort_find@@Base+0x3fc>
   1a52c:	ldr	r0, [pc, #592]	; 1a784 <test_sort_find@@Base+0x640>
   1a530:	add	r0, pc, r0
   1a534:	bl	12d9c <printf@plt>
   1a538:	str	r0, [sp, #44]	; 0x2c
   1a53c:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a540:	ldr	r0, [pc, #504]	; 1a740 <test_sort_find@@Base+0x5fc>
   1a544:	add	r1, pc, r0
   1a548:	ldr	r0, [fp, #-16]
   1a54c:	movw	r2, #5
   1a550:	bl	1a800 <test_sort_find@@Base+0x6bc>
   1a554:	movw	r1, #3
   1a558:	cmp	r1, r0
   1a55c:	beq	1a574 <test_sort_find@@Base+0x430>
   1a560:	ldr	r0, [pc, #536]	; 1a780 <test_sort_find@@Base+0x63c>
   1a564:	add	r0, pc, r0
   1a568:	bl	12d9c <printf@plt>
   1a56c:	str	r0, [sp, #40]	; 0x28
   1a570:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a574:	ldr	r0, [pc, #456]	; 1a744 <test_sort_find@@Base+0x600>
   1a578:	add	r1, pc, r0
   1a57c:	ldr	r0, [fp, #-16]
   1a580:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a584:	movw	r1, #3
   1a588:	cmp	r1, r0
   1a58c:	beq	1a5a4 <test_sort_find@@Base+0x460>
   1a590:	ldr	r0, [pc, #484]	; 1a77c <test_sort_find@@Base+0x638>
   1a594:	add	r0, pc, r0
   1a598:	bl	12d9c <printf@plt>
   1a59c:	str	r0, [sp, #36]	; 0x24
   1a5a0:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a5a4:	ldr	r0, [pc, #412]	; 1a748 <test_sort_find@@Base+0x604>
   1a5a8:	add	r1, pc, r0
   1a5ac:	ldr	r0, [fp, #-16]
   1a5b0:	movw	r2, #5
   1a5b4:	bl	1a968 <test_sort_find@@Base+0x824>
   1a5b8:	movw	r1, #3
   1a5bc:	cmp	r1, r0
   1a5c0:	beq	1a5d8 <test_sort_find@@Base+0x494>
   1a5c4:	ldr	r0, [pc, #428]	; 1a778 <test_sort_find@@Base+0x634>
   1a5c8:	add	r0, pc, r0
   1a5cc:	bl	12d9c <printf@plt>
   1a5d0:	str	r0, [sp, #32]
   1a5d4:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a5d8:	ldr	r0, [pc, #364]	; 1a74c <test_sort_find@@Base+0x608>
   1a5dc:	add	r1, pc, r0
   1a5e0:	ldr	r0, [pc, #360]	; 1a750 <test_sort_find@@Base+0x60c>
   1a5e4:	add	r0, pc, r0
   1a5e8:	ldr	r0, [r0]
   1a5ec:	ldr	r2, [fp, #-16]
   1a5f0:	str	r0, [sp, #28]
   1a5f4:	mov	r0, r2
   1a5f8:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a5fc:	ldr	r1, [sp, #28]
   1a600:	cmp	r1, r0
   1a604:	beq	1a61c <test_sort_find@@Base+0x4d8>
   1a608:	ldr	r0, [pc, #356]	; 1a774 <test_sort_find@@Base+0x630>
   1a60c:	add	r0, pc, r0
   1a610:	bl	12d9c <printf@plt>
   1a614:	str	r0, [sp, #24]
   1a618:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a61c:	ldr	r0, [pc, #304]	; 1a754 <test_sort_find@@Base+0x610>
   1a620:	add	r1, pc, r0
   1a624:	ldr	r0, [fp, #-16]
   1a628:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a62c:	movw	r1, #0
   1a630:	cmp	r1, r0
   1a634:	beq	1a64c <test_sort_find@@Base+0x508>
   1a638:	ldr	r0, [pc, #304]	; 1a770 <test_sort_find@@Base+0x62c>
   1a63c:	add	r0, pc, r0
   1a640:	bl	12d9c <printf@plt>
   1a644:	str	r0, [sp, #20]
   1a648:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a64c:	ldr	r0, [pc, #260]	; 1a758 <test_sort_find@@Base+0x614>
   1a650:	add	r1, pc, r0
   1a654:	ldr	r0, [fp, #-16]
   1a658:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a65c:	str	r0, [fp, #-8]
   1a660:	movw	r1, #1
   1a664:	cmp	r1, r0
   1a668:	beq	1a698 <test_sort_find@@Base+0x554>
   1a66c:	ldr	r0, [pc, #248]	; 1a76c <test_sort_find@@Base+0x628>
   1a670:	add	r0, pc, r0
   1a674:	bl	12d9c <printf@plt>
   1a678:	ldr	lr, [pc, #232]	; 1a768 <test_sort_find@@Base+0x624>
   1a67c:	add	lr, pc, lr
   1a680:	ldr	r1, [fp, #-8]
   1a684:	str	r0, [sp, #16]
   1a688:	mov	r0, lr
   1a68c:	bl	12d9c <printf@plt>
   1a690:	str	r0, [sp, #12]
   1a694:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a698:	ldr	r0, [pc, #188]	; 1a75c <test_sort_find@@Base+0x618>
   1a69c:	add	r1, pc, r0
   1a6a0:	ldr	r0, [fp, #-16]
   1a6a4:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a6a8:	str	r0, [fp, #-8]
   1a6ac:	movw	r1, #4
   1a6b0:	cmp	r1, r0
   1a6b4:	beq	1a6e4 <test_sort_find@@Base+0x5a0>
   1a6b8:	ldr	r0, [pc, #164]	; 1a764 <test_sort_find@@Base+0x620>
   1a6bc:	add	r0, pc, r0
   1a6c0:	bl	12d9c <printf@plt>
   1a6c4:	ldr	lr, [pc, #148]	; 1a760 <test_sort_find@@Base+0x61c>
   1a6c8:	add	lr, pc, lr
   1a6cc:	ldr	r1, [fp, #-8]
   1a6d0:	str	r0, [sp, #8]
   1a6d4:	mov	r0, lr
   1a6d8:	bl	12d9c <printf@plt>
   1a6dc:	str	r0, [sp, #4]
   1a6e0:	b	1a6f4 <test_sort_find@@Base+0x5b0>
   1a6e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a6e8:	bl	1a7b8 <test_sort_find@@Base+0x674>
   1a6ec:	movw	r0, #0
   1a6f0:	str	r0, [fp, #-32]	; 0xffffffe0
   1a6f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a6f8:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1a6fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a700:	mov	sp, fp
   1a704:	pop	{fp, pc}
   1a708:	andeq	r8, r1, r1, ror #21
   1a70c:	andeq	lr, r2, r0, ror #26
   1a710:	andeq	r8, r1, lr, asr #9
   1a714:	andeq	r8, r1, pc, ror #22
   1a718:	andeq	r8, r1, lr, lsr r5
   1a71c:	andeq	r8, r1, lr, asr #10
   1a720:	andeq	r8, r1, r6, lsr #10
   1a724:	andeq	r7, r1, r3, lsr ip
   1a728:	muleq	r1, sp, sl
   1a72c:	strdeq	r8, [r1], -r3
   1a730:	muleq	r1, r6, sl
   1a734:	andeq	r8, r1, r7, asr sl
   1a738:	ldrdeq	lr, [r2], -r4
   1a73c:	andeq	r8, r1, r2, lsr #4
   1a740:	andeq	r8, r1, r3, lsl #20
   1a744:			; <UNDEFINED> instruction: 0x000181be
   1a748:	strdeq	r8, [r1], -r6
   1a74c:	andeq	r8, r1, sp, ror #19
   1a750:	andeq	lr, r2, r8, lsl #21
   1a754:	andeq	r8, r1, r7, lsr #15
   1a758:	andeq	r8, r1, lr, lsl #2
   1a75c:	andeq	r8, r1, sl, lsr r0
   1a760:	andeq	r8, r1, r0, lsr r9
   1a764:	andeq	r8, r1, r4, asr #18
   1a768:	andeq	r8, r1, ip, ror r9
   1a76c:	muleq	r1, lr, sl
   1a770:	andeq	r8, r1, fp, lsr #19
   1a774:	andeq	r8, r1, r4, asr #19
   1a778:	ldrdeq	r8, [r1], -sp
   1a77c:	andeq	r8, r1, sp, ror #19
   1a780:	andeq	r8, r1, sl, ror #19
   1a784:	andeq	r8, r1, fp, ror #19
   1a788:	ldrdeq	r8, [r1], -r3
   1a78c:	strdeq	r8, [r1], -r5
   1a790:	andeq	r8, r1, pc, lsl #20
   1a794:	andeq	r8, r1, r9, lsr #20
   1a798:	andeq	r8, r1, r3, asr #20
   1a79c:	andeq	r8, r1, sp, asr sl
   1a7a0:	andeq	r8, r1, sp, ror #20
   1a7a4:	strdeq	r8, [r1], -fp
   1a7a8:	andeq	r8, r1, sl, asr r3
   1a7ac:	andeq	r8, r1, r2, lsr #6
   1a7b0:	andeq	r8, r1, r2, asr #5
   1a7b4:	andeq	r8, r1, sl, lsr #4
   1a7b8:	push	{fp, lr}
   1a7bc:	mov	fp, sp
   1a7c0:	sub	sp, sp, #8
   1a7c4:	str	r0, [sp, #4]
   1a7c8:	ldr	r0, [sp, #4]
   1a7cc:	bl	26654 <main@@Base+0x32a0>
   1a7d0:	mov	sp, fp
   1a7d4:	pop	{fp, pc}
   1a7d8:	push	{fp, lr}
   1a7dc:	mov	fp, sp
   1a7e0:	sub	sp, sp, #8
   1a7e4:	str	r0, [sp, #4]
   1a7e8:	str	r1, [sp]
   1a7ec:	ldr	r0, [sp, #4]
   1a7f0:	ldr	r1, [sp]
   1a7f4:	bl	1a830 <test_sort_find@@Base+0x6ec>
   1a7f8:	mov	sp, fp
   1a7fc:	pop	{fp, pc}
   1a800:	push	{fp, lr}
   1a804:	mov	fp, sp
   1a808:	sub	sp, sp, #16
   1a80c:	str	r0, [fp, #-4]
   1a810:	str	r1, [sp, #8]
   1a814:	str	r2, [sp, #4]
   1a818:	ldr	r0, [fp, #-4]
   1a81c:	ldr	r1, [sp, #8]
   1a820:	ldr	r2, [sp, #4]
   1a824:	bl	1a968 <test_sort_find@@Base+0x824>
   1a828:	mov	sp, fp
   1a82c:	pop	{fp, pc}
   1a830:	push	{fp, lr}
   1a834:	mov	fp, sp
   1a838:	sub	sp, sp, #32
   1a83c:	str	r0, [fp, #-8]
   1a840:	str	r1, [fp, #-12]
   1a844:	movw	r0, #0
   1a848:	str	r0, [sp, #12]
   1a84c:	ldr	r0, [fp, #-8]
   1a850:	bl	17824 <verify_monster@@Base+0x1dd0>
   1a854:	str	r0, [sp, #8]
   1a858:	cmp	r0, #0
   1a85c:	bne	1a874 <test_sort_find@@Base+0x730>
   1a860:	ldr	r0, [pc, #248]	; 1a960 <test_sort_find@@Base+0x81c>
   1a864:	add	r0, pc, r0
   1a868:	ldr	r0, [r0]
   1a86c:	str	r0, [fp, #-4]
   1a870:	b	1a954 <test_sort_find@@Base+0x810>
   1a874:	ldr	r0, [sp, #8]
   1a878:	mvn	r1, #0
   1a87c:	add	r0, r0, r1
   1a880:	str	r0, [sp, #8]
   1a884:	ldr	r0, [sp, #12]
   1a888:	ldr	r1, [sp, #8]
   1a88c:	cmp	r0, r1
   1a890:	bcs	1a8f8 <test_sort_find@@Base+0x7b4>
   1a894:	ldr	r0, [sp, #12]
   1a898:	ldr	r1, [sp, #8]
   1a89c:	ldr	r2, [sp, #12]
   1a8a0:	sub	r1, r1, r2
   1a8a4:	lsr	r1, r1, #1
   1a8a8:	add	r0, r0, r1
   1a8ac:	str	r0, [sp, #4]
   1a8b0:	ldr	r0, [fp, #-8]
   1a8b4:	ldr	r1, [sp, #4]
   1a8b8:	bl	17874 <verify_monster@@Base+0x1e20>
   1a8bc:	bl	16d54 <verify_monster@@Base+0x1300>
   1a8c0:	str	r0, [sp, #16]
   1a8c4:	ldr	r0, [sp, #16]
   1a8c8:	ldr	r1, [fp, #-12]
   1a8cc:	movw	r2, #0
   1a8d0:	bl	26a3c <main@@Base+0x3688>
   1a8d4:	cmp	r0, #0
   1a8d8:	bge	1a8ec <test_sort_find@@Base+0x7a8>
   1a8dc:	ldr	r0, [sp, #4]
   1a8e0:	add	r0, r0, #1
   1a8e4:	str	r0, [sp, #12]
   1a8e8:	b	1a8f4 <test_sort_find@@Base+0x7b0>
   1a8ec:	ldr	r0, [sp, #4]
   1a8f0:	str	r0, [sp, #8]
   1a8f4:	b	1a884 <test_sort_find@@Base+0x740>
   1a8f8:	ldr	r0, [sp, #12]
   1a8fc:	ldr	r1, [sp, #8]
   1a900:	cmp	r0, r1
   1a904:	bne	1a944 <test_sort_find@@Base+0x800>
   1a908:	ldr	r0, [fp, #-8]
   1a90c:	ldr	r1, [sp, #12]
   1a910:	bl	17874 <verify_monster@@Base+0x1e20>
   1a914:	bl	16d54 <verify_monster@@Base+0x1300>
   1a918:	str	r0, [sp, #16]
   1a91c:	ldr	r0, [sp, #16]
   1a920:	ldr	r1, [fp, #-12]
   1a924:	movw	r2, #0
   1a928:	bl	26a3c <main@@Base+0x3688>
   1a92c:	cmp	r0, #0
   1a930:	bne	1a940 <test_sort_find@@Base+0x7fc>
   1a934:	ldr	r0, [sp, #12]
   1a938:	str	r0, [fp, #-4]
   1a93c:	b	1a954 <test_sort_find@@Base+0x810>
   1a940:	b	1a944 <test_sort_find@@Base+0x800>
   1a944:	ldr	r0, [pc, #24]	; 1a964 <test_sort_find@@Base+0x820>
   1a948:	add	r0, pc, r0
   1a94c:	ldr	r0, [r0]
   1a950:	str	r0, [fp, #-4]
   1a954:	ldr	r0, [fp, #-4]
   1a958:	mov	sp, fp
   1a95c:	pop	{fp, pc}
   1a960:	andeq	lr, r2, r8, lsl #16
   1a964:	andeq	lr, r2, r4, lsr #14
   1a968:	push	{fp, lr}
   1a96c:	mov	fp, sp
   1a970:	sub	sp, sp, #32
   1a974:	str	r0, [fp, #-8]
   1a978:	str	r1, [fp, #-12]
   1a97c:	str	r2, [sp, #16]
   1a980:	movw	r0, #0
   1a984:	str	r0, [sp, #8]
   1a988:	ldr	r0, [fp, #-8]
   1a98c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1a990:	str	r0, [sp, #4]
   1a994:	cmp	r0, #0
   1a998:	bne	1a9b0 <test_sort_find@@Base+0x86c>
   1a99c:	ldr	r0, [pc, #248]	; 1aa9c <test_sort_find@@Base+0x958>
   1a9a0:	add	r0, pc, r0
   1a9a4:	ldr	r0, [r0]
   1a9a8:	str	r0, [fp, #-4]
   1a9ac:	b	1aa90 <test_sort_find@@Base+0x94c>
   1a9b0:	ldr	r0, [sp, #4]
   1a9b4:	mvn	r1, #0
   1a9b8:	add	r0, r0, r1
   1a9bc:	str	r0, [sp, #4]
   1a9c0:	ldr	r0, [sp, #8]
   1a9c4:	ldr	r1, [sp, #4]
   1a9c8:	cmp	r0, r1
   1a9cc:	bcs	1aa34 <test_sort_find@@Base+0x8f0>
   1a9d0:	ldr	r0, [sp, #8]
   1a9d4:	ldr	r1, [sp, #4]
   1a9d8:	ldr	r2, [sp, #8]
   1a9dc:	sub	r1, r1, r2
   1a9e0:	lsr	r1, r1, #1
   1a9e4:	add	r0, r0, r1
   1a9e8:	str	r0, [sp]
   1a9ec:	ldr	r0, [fp, #-8]
   1a9f0:	ldr	r1, [sp]
   1a9f4:	bl	17874 <verify_monster@@Base+0x1e20>
   1a9f8:	bl	16d54 <verify_monster@@Base+0x1300>
   1a9fc:	str	r0, [sp, #12]
   1aa00:	ldr	r0, [sp, #12]
   1aa04:	ldr	r1, [fp, #-12]
   1aa08:	ldr	r2, [sp, #16]
   1aa0c:	bl	2694c <main@@Base+0x3598>
   1aa10:	cmp	r0, #0
   1aa14:	bge	1aa28 <test_sort_find@@Base+0x8e4>
   1aa18:	ldr	r0, [sp]
   1aa1c:	add	r0, r0, #1
   1aa20:	str	r0, [sp, #8]
   1aa24:	b	1aa30 <test_sort_find@@Base+0x8ec>
   1aa28:	ldr	r0, [sp]
   1aa2c:	str	r0, [sp, #4]
   1aa30:	b	1a9c0 <test_sort_find@@Base+0x87c>
   1aa34:	ldr	r0, [sp, #8]
   1aa38:	ldr	r1, [sp, #4]
   1aa3c:	cmp	r0, r1
   1aa40:	bne	1aa80 <test_sort_find@@Base+0x93c>
   1aa44:	ldr	r0, [fp, #-8]
   1aa48:	ldr	r1, [sp, #8]
   1aa4c:	bl	17874 <verify_monster@@Base+0x1e20>
   1aa50:	bl	16d54 <verify_monster@@Base+0x1300>
   1aa54:	str	r0, [sp, #12]
   1aa58:	ldr	r0, [sp, #12]
   1aa5c:	ldr	r1, [fp, #-12]
   1aa60:	ldr	r2, [sp, #16]
   1aa64:	bl	2694c <main@@Base+0x3598>
   1aa68:	cmp	r0, #0
   1aa6c:	bne	1aa7c <test_sort_find@@Base+0x938>
   1aa70:	ldr	r0, [sp, #8]
   1aa74:	str	r0, [fp, #-4]
   1aa78:	b	1aa90 <test_sort_find@@Base+0x94c>
   1aa7c:	b	1aa80 <test_sort_find@@Base+0x93c>
   1aa80:	ldr	r0, [pc, #24]	; 1aaa0 <test_sort_find@@Base+0x95c>
   1aa84:	add	r0, pc, r0
   1aa88:	ldr	r0, [r0]
   1aa8c:	str	r0, [fp, #-4]
   1aa90:	ldr	r0, [fp, #-4]
   1aa94:	mov	sp, fp
   1aa98:	pop	{fp, pc}
   1aa9c:	andeq	lr, r2, ip, asr #13
   1aaa0:	andeq	lr, r2, r8, ror #11

0001aaa4 <test_scan@@Base>:
   1aaa4:	push	{r4, r5, fp, lr}
   1aaa8:	add	fp, sp, #8
   1aaac:	sub	sp, sp, #512	; 0x200
   1aab0:	ldr	r1, [pc, #3768]	; 1b970 <test_scan@@Base+0xecc>
   1aab4:	add	r1, pc, r1
   1aab8:	str	r0, [fp, #-12]
   1aabc:	ldrb	r0, [r1]
   1aac0:	strb	r0, [fp, #-47]	; 0xffffffd1
   1aac4:	ldrb	r0, [r1, #1]
   1aac8:	strb	r0, [fp, #-46]	; 0xffffffd2
   1aacc:	ldrb	r0, [r1, #2]
   1aad0:	strb	r0, [fp, #-45]	; 0xffffffd3
   1aad4:	ldrb	r0, [r1, #3]
   1aad8:	strb	r0, [fp, #-44]	; 0xffffffd4
   1aadc:	ldrb	r0, [r1, #4]
   1aae0:	strb	r0, [fp, #-43]	; 0xffffffd5
   1aae4:	ldrb	r0, [r1, #5]
   1aae8:	strb	r0, [fp, #-42]	; 0xffffffd6
   1aaec:	ldrb	r0, [r1, #6]
   1aaf0:	strb	r0, [fp, #-41]	; 0xffffffd7
   1aaf4:	mvn	r0, #0
   1aaf8:	str	r0, [fp, #-52]	; 0xffffffcc
   1aafc:	ldr	r0, [fp, #-12]
   1ab00:	bl	28b78 <flatcc_builder_reset@@Base>
   1ab04:	ldr	r1, [fp, #-12]
   1ab08:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab0c:	mov	r0, r1
   1ab10:	bl	18e74 <gen_monster@@Base+0x890>
   1ab14:	ldr	r1, [pc, #3672]	; 1b974 <test_scan@@Base+0xed0>
   1ab18:	add	r1, pc, r1
   1ab1c:	ldr	lr, [fp, #-12]
   1ab20:	str	r0, [fp, #-60]	; 0xffffffc4
   1ab24:	mov	r0, lr
   1ab28:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1ab2c:	sub	r1, fp, #47	; 0x2f
   1ab30:	ldr	lr, [fp, #-12]
   1ab34:	str	r0, [fp, #-64]	; 0xffffffc0
   1ab38:	mov	r0, lr
   1ab3c:	movw	r2, #7
   1ab40:	bl	19014 <gen_monster@@Base+0xa30>
   1ab44:	ldr	r1, [fp, #-12]
   1ab48:	str	r0, [fp, #-68]	; 0xffffffbc
   1ab4c:	mov	r0, r1
   1ab50:	bl	1bd70 <test_scan@@Base+0x12cc>
   1ab54:	ldr	r1, [fp, #-12]
   1ab58:	str	r0, [fp, #-72]	; 0xffffffb8
   1ab5c:	mov	r0, r1
   1ab60:	bl	1bd90 <test_scan@@Base+0x12ec>
   1ab64:	ldr	r1, [fp, #-12]
   1ab68:	str	r0, [fp, #-76]	; 0xffffffb4
   1ab6c:	mov	r0, r1
   1ab70:	bl	19360 <gen_monster@@Base+0xd7c>
   1ab74:	ldr	r1, [fp, #-12]
   1ab78:	str	r0, [fp, #-80]	; 0xffffffb0
   1ab7c:	mov	r0, r1
   1ab80:	bl	193a8 <gen_monster@@Base+0xdc4>
   1ab84:	ldr	r1, [pc, #4052]	; 1bb60 <test_scan@@Base+0x10bc>
   1ab88:	add	r1, pc, r1
   1ab8c:	ldr	r2, [fp, #-12]
   1ab90:	str	r0, [fp, #-84]	; 0xffffffac
   1ab94:	mov	r0, r2
   1ab98:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1ab9c:	ldr	r1, [fp, #-12]
   1aba0:	str	r0, [fp, #-88]	; 0xffffffa8
   1aba4:	mov	r0, r1
   1aba8:	bl	19420 <gen_monster@@Base+0xe3c>
   1abac:	ldr	r1, [fp, #-12]
   1abb0:	str	r0, [fp, #-92]	; 0xffffffa4
   1abb4:	mov	r0, r1
   1abb8:	bl	193a8 <gen_monster@@Base+0xdc4>
   1abbc:	ldr	r1, [pc, #3992]	; 1bb5c <test_scan@@Base+0x10b8>
   1abc0:	add	r1, pc, r1
   1abc4:	ldr	r2, [fp, #-12]
   1abc8:	str	r0, [fp, #-96]	; 0xffffffa0
   1abcc:	mov	r0, r2
   1abd0:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1abd4:	ldr	r1, [fp, #-12]
   1abd8:	str	r0, [fp, #-100]	; 0xffffff9c
   1abdc:	mov	r0, r1
   1abe0:	bl	19420 <gen_monster@@Base+0xe3c>
   1abe4:	ldr	r1, [fp, #-12]
   1abe8:	str	r0, [fp, #-104]	; 0xffffff98
   1abec:	mov	r0, r1
   1abf0:	bl	193a8 <gen_monster@@Base+0xdc4>
   1abf4:	ldr	r1, [pc, #3932]	; 1bb58 <test_scan@@Base+0x10b4>
   1abf8:	add	r1, pc, r1
   1abfc:	ldr	r2, [fp, #-12]
   1ac00:	str	r0, [fp, #-108]	; 0xffffff94
   1ac04:	mov	r0, r2
   1ac08:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1ac0c:	ldr	r1, [fp, #-12]
   1ac10:	str	r0, [fp, #-112]	; 0xffffff90
   1ac14:	mov	r0, r1
   1ac18:	bl	19420 <gen_monster@@Base+0xe3c>
   1ac1c:	ldr	r1, [fp, #-12]
   1ac20:	str	r0, [fp, #-116]	; 0xffffff8c
   1ac24:	mov	r0, r1
   1ac28:	bl	193a8 <gen_monster@@Base+0xdc4>
   1ac2c:	ldr	r1, [pc, #3872]	; 1bb54 <test_scan@@Base+0x10b0>
   1ac30:	add	r1, pc, r1
   1ac34:	ldr	r2, [fp, #-12]
   1ac38:	str	r0, [fp, #-120]	; 0xffffff88
   1ac3c:	mov	r0, r2
   1ac40:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1ac44:	ldr	r1, [fp, #-12]
   1ac48:	str	r0, [fp, #-124]	; 0xffffff84
   1ac4c:	mov	r0, r1
   1ac50:	bl	19420 <gen_monster@@Base+0xe3c>
   1ac54:	ldr	r1, [fp, #-12]
   1ac58:	str	r0, [fp, #-128]	; 0xffffff80
   1ac5c:	mov	r0, r1
   1ac60:	bl	193a8 <gen_monster@@Base+0xdc4>
   1ac64:	ldr	r1, [pc, #3812]	; 1bb50 <test_scan@@Base+0x10ac>
   1ac68:	add	r1, pc, r1
   1ac6c:	ldr	r2, [fp, #-12]
   1ac70:	str	r0, [fp, #-132]	; 0xffffff7c
   1ac74:	mov	r0, r2
   1ac78:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1ac7c:	ldr	r1, [fp, #-12]
   1ac80:	str	r0, [fp, #-136]	; 0xffffff78
   1ac84:	mov	r0, r1
   1ac88:	bl	19420 <gen_monster@@Base+0xe3c>
   1ac8c:	ldr	r1, [fp, #-12]
   1ac90:	str	r0, [fp, #-140]	; 0xffffff74
   1ac94:	mov	r0, r1
   1ac98:	bl	194f8 <gen_monster@@Base+0xf14>
   1ac9c:	ldr	r1, [fp, #-12]
   1aca0:	str	r0, [fp, #-144]	; 0xffffff70
   1aca4:	mov	r0, r1
   1aca8:	bl	19a24 <gen_monster@@Base+0x1440>
   1acac:	ldr	r1, [fp, #-12]
   1acb0:	str	r0, [fp, #-148]	; 0xffffff6c
   1acb4:	mov	r0, r1
   1acb8:	sub	r1, fp, #40	; 0x28
   1acbc:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1acc0:	str	r0, [fp, #-36]	; 0xffffffdc
   1acc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1acc8:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1accc:	str	r0, [fp, #-20]	; 0xffffffec
   1acd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1acd4:	bl	1771c <verify_monster@@Base+0x1cc8>
   1acd8:	str	r0, [fp, #-24]	; 0xffffffe8
   1acdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ace0:	movw	r1, #0
   1ace4:	cmp	r0, r1
   1ace8:	beq	1acf0 <test_scan@@Base+0x24c>
   1acec:	b	1ad10 <test_scan@@Base+0x26c>
   1acf0:	ldr	r0, [pc, #3692]	; 1bb64 <test_scan@@Base+0x10c0>
   1acf4:	add	r0, pc, r0
   1acf8:	ldr	r1, [pc, #3688]	; 1bb68 <test_scan@@Base+0x10c4>
   1acfc:	add	r1, pc, r1
   1ad00:	ldr	r2, [pc, #3684]	; 1bb6c <test_scan@@Base+0x10c8>
   1ad04:	add	r3, pc, r2
   1ad08:	movw	r2, #1305	; 0x519
   1ad0c:	bl	12e68 <__assert_fail@plt>
   1ad10:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ad14:	bl	17150 <verify_monster@@Base+0x16fc>
   1ad18:	str	r0, [fp, #-28]	; 0xffffffe4
   1ad1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ad20:	movw	lr, #0
   1ad24:	cmp	r0, lr
   1ad28:	beq	1ad30 <test_scan@@Base+0x28c>
   1ad2c:	b	1ad50 <test_scan@@Base+0x2ac>
   1ad30:	ldr	r0, [pc, #3640]	; 1bb70 <test_scan@@Base+0x10cc>
   1ad34:	add	r0, pc, r0
   1ad38:	ldr	r1, [pc, #3636]	; 1bb74 <test_scan@@Base+0x10d0>
   1ad3c:	add	r1, pc, r1
   1ad40:	ldr	r2, [pc, #3632]	; 1bb78 <test_scan@@Base+0x10d4>
   1ad44:	add	r3, pc, r2
   1ad48:	movw	r2, #1307	; 0x51b
   1ad4c:	bl	12e68 <__assert_fail@plt>
   1ad50:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ad54:	bl	17904 <verify_monster@@Base+0x1eb0>
   1ad58:	str	r0, [fp, #-32]	; 0xffffffe0
   1ad5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ad60:	movw	lr, #0
   1ad64:	cmp	r0, lr
   1ad68:	beq	1ad70 <test_scan@@Base+0x2cc>
   1ad6c:	b	1ad90 <test_scan@@Base+0x2ec>
   1ad70:	ldr	r0, [pc, #3588]	; 1bb7c <test_scan@@Base+0x10d8>
   1ad74:	add	r0, pc, r0
   1ad78:	ldr	r1, [pc, #3584]	; 1bb80 <test_scan@@Base+0x10dc>
   1ad7c:	add	r1, pc, r1
   1ad80:	ldr	r2, [pc, #3580]	; 1bb84 <test_scan@@Base+0x10e0>
   1ad84:	add	r3, pc, r2
   1ad88:	movw	r2, #1309	; 0x51d
   1ad8c:	bl	12e68 <__assert_fail@plt>
   1ad90:	ldr	r0, [pc, #3568]	; 1bb88 <test_scan@@Base+0x10e4>
   1ad94:	add	r1, pc, r0
   1ad98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ad9c:	bl	1bdd0 <test_scan@@Base+0x132c>
   1ada0:	movw	r1, #1
   1ada4:	cmp	r1, r0
   1ada8:	beq	1adc0 <test_scan@@Base+0x31c>
   1adac:	ldr	r0, [pc, #4024]	; 1bd6c <test_scan@@Base+0x12c8>
   1adb0:	add	r0, pc, r0
   1adb4:	bl	12d9c <printf@plt>
   1adb8:	str	r0, [fp, #-152]	; 0xffffff68
   1adbc:	b	1bb3c <test_scan@@Base+0x1098>
   1adc0:	ldr	r0, [pc, #3524]	; 1bb8c <test_scan@@Base+0x10e8>
   1adc4:	add	r1, pc, r0
   1adc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1adcc:	bl	1bdf8 <test_scan@@Base+0x1354>
   1add0:	movw	r1, #1
   1add4:	cmp	r1, r0
   1add8:	beq	1adf0 <test_scan@@Base+0x34c>
   1addc:	ldr	r0, [pc, #3972]	; 1bd68 <test_scan@@Base+0x12c4>
   1ade0:	add	r0, pc, r0
   1ade4:	bl	12d9c <printf@plt>
   1ade8:	str	r0, [fp, #-156]	; 0xffffff64
   1adec:	b	1bb3c <test_scan@@Base+0x1098>
   1adf0:	ldr	r0, [pc, #3480]	; 1bb90 <test_scan@@Base+0x10ec>
   1adf4:	add	r1, pc, r0
   1adf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1adfc:	movw	r2, #5
   1ae00:	bl	1be20 <test_scan@@Base+0x137c>
   1ae04:	movw	r1, #1
   1ae08:	cmp	r1, r0
   1ae0c:	beq	1ae24 <test_scan@@Base+0x380>
   1ae10:	ldr	r0, [pc, #3916]	; 1bd64 <test_scan@@Base+0x12c0>
   1ae14:	add	r0, pc, r0
   1ae18:	bl	12d9c <printf@plt>
   1ae1c:	str	r0, [fp, #-160]	; 0xffffff60
   1ae20:	b	1bb3c <test_scan@@Base+0x1098>
   1ae24:	ldr	r0, [pc, #3432]	; 1bb94 <test_scan@@Base+0x10f0>
   1ae28:	add	r1, pc, r0
   1ae2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ae30:	movw	r2, #5
   1ae34:	bl	1be50 <test_scan@@Base+0x13ac>
   1ae38:	movw	r1, #1
   1ae3c:	cmp	r1, r0
   1ae40:	beq	1ae58 <test_scan@@Base+0x3b4>
   1ae44:	ldr	r0, [pc, #3860]	; 1bd60 <test_scan@@Base+0x12bc>
   1ae48:	add	r0, pc, r0
   1ae4c:	bl	12d9c <printf@plt>
   1ae50:	str	r0, [fp, #-164]	; 0xffffff5c
   1ae54:	b	1bb3c <test_scan@@Base+0x1098>
   1ae58:	ldr	r0, [pc, #3384]	; 1bb98 <test_scan@@Base+0x10f4>
   1ae5c:	add	r3, pc, r0
   1ae60:	ldr	r0, [pc, #3380]	; 1bb9c <test_scan@@Base+0x10f8>
   1ae64:	add	r0, pc, r0
   1ae68:	ldr	r1, [pc, #3376]	; 1bba0 <test_scan@@Base+0x10fc>
   1ae6c:	add	r1, pc, r1
   1ae70:	ldr	r1, [r1]
   1ae74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae78:	ldr	r0, [r0]
   1ae7c:	str	r0, [fp, #-168]	; 0xffffff58
   1ae80:	mov	r0, r2
   1ae84:	movw	r2, #2
   1ae88:	str	r1, [fp, #-172]	; 0xffffff54
   1ae8c:	mov	r1, r2
   1ae90:	ldr	r2, [fp, #-168]	; 0xffffff58
   1ae94:	bl	1be80 <test_scan@@Base+0x13dc>
   1ae98:	ldr	r1, [fp, #-172]	; 0xffffff54
   1ae9c:	cmp	r1, r0
   1aea0:	beq	1aeb8 <test_scan@@Base+0x414>
   1aea4:	ldr	r0, [pc, #3760]	; 1bd5c <test_scan@@Base+0x12b8>
   1aea8:	add	r0, pc, r0
   1aeac:	bl	12d9c <printf@plt>
   1aeb0:	str	r0, [fp, #-176]	; 0xffffff50
   1aeb4:	b	1bb3c <test_scan@@Base+0x1098>
   1aeb8:	ldr	r0, [pc, #3300]	; 1bba4 <test_scan@@Base+0x1100>
   1aebc:	add	r1, pc, r0
   1aec0:	ldr	r0, [pc, #3296]	; 1bba8 <test_scan@@Base+0x1104>
   1aec4:	add	r0, pc, r0
   1aec8:	ldr	r0, [r0]
   1aecc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1aed0:	str	r0, [fp, #-180]	; 0xffffff4c
   1aed4:	mov	r0, r2
   1aed8:	bl	1bdd0 <test_scan@@Base+0x132c>
   1aedc:	ldr	r1, [fp, #-180]	; 0xffffff4c
   1aee0:	cmp	r1, r0
   1aee4:	beq	1aefc <test_scan@@Base+0x458>
   1aee8:	ldr	r0, [pc, #3688]	; 1bd58 <test_scan@@Base+0x12b4>
   1aeec:	add	r0, pc, r0
   1aef0:	bl	12d9c <printf@plt>
   1aef4:	str	r0, [fp, #-184]	; 0xffffff48
   1aef8:	b	1bb3c <test_scan@@Base+0x1098>
   1aefc:	ldr	r0, [pc, #3240]	; 1bbac <test_scan@@Base+0x1108>
   1af00:	add	r1, pc, r0
   1af04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af08:	bl	1bdd0 <test_scan@@Base+0x132c>
   1af0c:	movw	r1, #0
   1af10:	cmp	r1, r0
   1af14:	beq	1af2c <test_scan@@Base+0x488>
   1af18:	ldr	r0, [pc, #3636]	; 1bd54 <test_scan@@Base+0x12b0>
   1af1c:	add	r0, pc, r0
   1af20:	bl	12d9c <printf@plt>
   1af24:	str	r0, [fp, #-188]	; 0xffffff44
   1af28:	b	1bb3c <test_scan@@Base+0x1098>
   1af2c:	ldr	r0, [pc, #3196]	; 1bbb0 <test_scan@@Base+0x110c>
   1af30:	add	r1, pc, r0
   1af34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af38:	bl	1beb8 <test_scan@@Base+0x1414>
   1af3c:	movw	r1, #2
   1af40:	cmp	r1, r0
   1af44:	beq	1af5c <test_scan@@Base+0x4b8>
   1af48:	ldr	r0, [pc, #3584]	; 1bd50 <test_scan@@Base+0x12ac>
   1af4c:	add	r0, pc, r0
   1af50:	bl	12d9c <printf@plt>
   1af54:	str	r0, [fp, #-192]	; 0xffffff40
   1af58:	b	1bb3c <test_scan@@Base+0x1098>
   1af5c:	ldr	r0, [pc, #3152]	; 1bbb4 <test_scan@@Base+0x1110>
   1af60:	add	r1, pc, r0
   1af64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af68:	bl	1bf60 <test_scan@@Base+0x14bc>
   1af6c:	movw	r1, #4
   1af70:	cmp	r1, r0
   1af74:	beq	1af8c <test_scan@@Base+0x4e8>
   1af78:	ldr	r0, [pc, #3532]	; 1bd4c <test_scan@@Base+0x12a8>
   1af7c:	add	r0, pc, r0
   1af80:	bl	12d9c <printf@plt>
   1af84:	str	r0, [fp, #-196]	; 0xffffff3c
   1af88:	b	1bb3c <test_scan@@Base+0x1098>
   1af8c:	ldr	r0, [pc, #3108]	; 1bbb8 <test_scan@@Base+0x1114>
   1af90:	add	r1, pc, r0
   1af94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1af98:	movw	r2, #8
   1af9c:	bl	1bff4 <test_scan@@Base+0x1550>
   1afa0:	movw	r1, #4
   1afa4:	cmp	r1, r0
   1afa8:	beq	1afc0 <test_scan@@Base+0x51c>
   1afac:	ldr	r0, [pc, #3476]	; 1bd48 <test_scan@@Base+0x12a4>
   1afb0:	add	r0, pc, r0
   1afb4:	bl	12d9c <printf@plt>
   1afb8:	str	r0, [fp, #-200]	; 0xffffff38
   1afbc:	b	1bb3c <test_scan@@Base+0x1098>
   1afc0:	ldr	r0, [pc, #3060]	; 1bbbc <test_scan@@Base+0x1118>
   1afc4:	add	r3, pc, r0
   1afc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1afcc:	movw	r1, #1
   1afd0:	movw	r2, #3
   1afd4:	movw	ip, #8
   1afd8:	str	ip, [sp]
   1afdc:	bl	1c08c <test_scan@@Base+0x15e8>
   1afe0:	movw	r1, #2
   1afe4:	cmp	r1, r0
   1afe8:	beq	1b000 <test_scan@@Base+0x55c>
   1afec:	ldr	r0, [pc, #3408]	; 1bd44 <test_scan@@Base+0x12a0>
   1aff0:	add	r0, pc, r0
   1aff4:	bl	12d9c <printf@plt>
   1aff8:	str	r0, [fp, #-204]	; 0xffffff34
   1affc:	b	1bb3c <test_scan@@Base+0x1098>
   1b000:	ldr	r0, [pc, #3000]	; 1bbc0 <test_scan@@Base+0x111c>
   1b004:	add	r3, pc, r0
   1b008:	ldr	r0, [pc, #2996]	; 1bbc4 <test_scan@@Base+0x1120>
   1b00c:	add	r0, pc, r0
   1b010:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b014:	ldr	r2, [r0]
   1b018:	mov	r0, r1
   1b01c:	movw	r1, #2
   1b020:	bl	1c168 <test_scan@@Base+0x16c4>
   1b024:	movw	r1, #2
   1b028:	cmp	r1, r0
   1b02c:	beq	1b044 <test_scan@@Base+0x5a0>
   1b030:	ldr	r0, [pc, #3336]	; 1bd40 <test_scan@@Base+0x129c>
   1b034:	add	r0, pc, r0
   1b038:	bl	12d9c <printf@plt>
   1b03c:	str	r0, [fp, #-208]	; 0xffffff30
   1b040:	b	1bb3c <test_scan@@Base+0x1098>
   1b044:	ldr	r0, [pc, #2940]	; 1bbc8 <test_scan@@Base+0x1124>
   1b048:	add	r3, pc, r0
   1b04c:	ldr	r0, [pc, #2936]	; 1bbcc <test_scan@@Base+0x1128>
   1b050:	add	r0, pc, r0
   1b054:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b058:	ldr	r2, [r0]
   1b05c:	mov	r0, r1
   1b060:	movw	r1, #2
   1b064:	movw	ip, #8
   1b068:	str	ip, [sp]
   1b06c:	bl	1c248 <test_scan@@Base+0x17a4>
   1b070:	movw	r1, #2
   1b074:	cmp	r1, r0
   1b078:	beq	1b090 <test_scan@@Base+0x5ec>
   1b07c:	ldr	r0, [pc, #3256]	; 1bd3c <test_scan@@Base+0x1298>
   1b080:	add	r0, pc, r0
   1b084:	bl	12d9c <printf@plt>
   1b088:	str	r0, [fp, #-212]	; 0xffffff2c
   1b08c:	b	1bb3c <test_scan@@Base+0x1098>
   1b090:	ldr	r0, [pc, #2872]	; 1bbd0 <test_scan@@Base+0x112c>
   1b094:	add	r3, pc, r0
   1b098:	ldr	r0, [pc, #2868]	; 1bbd4 <test_scan@@Base+0x1130>
   1b09c:	add	r0, pc, r0
   1b0a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b0a4:	ldr	r2, [r0]
   1b0a8:	mov	r0, r1
   1b0ac:	movw	r1, #3
   1b0b0:	bl	1c168 <test_scan@@Base+0x16c4>
   1b0b4:	movw	r1, #4
   1b0b8:	cmp	r1, r0
   1b0bc:	beq	1b0d4 <test_scan@@Base+0x630>
   1b0c0:	ldr	r0, [pc, #3184]	; 1bd38 <test_scan@@Base+0x1294>
   1b0c4:	add	r0, pc, r0
   1b0c8:	bl	12d9c <printf@plt>
   1b0cc:	str	r0, [fp, #-216]	; 0xffffff28
   1b0d0:	b	1bb3c <test_scan@@Base+0x1098>
   1b0d4:	ldr	r0, [pc, #2812]	; 1bbd8 <test_scan@@Base+0x1134>
   1b0d8:	add	r3, pc, r0
   1b0dc:	ldr	r0, [pc, #2808]	; 1bbdc <test_scan@@Base+0x1138>
   1b0e0:	add	r0, pc, r0
   1b0e4:	ldr	r0, [r0]
   1b0e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b0ec:	str	r0, [fp, #-220]	; 0xffffff24
   1b0f0:	mov	r0, r1
   1b0f4:	movw	r1, #1
   1b0f8:	movw	r2, #3
   1b0fc:	bl	1be80 <test_scan@@Base+0x13dc>
   1b100:	ldr	r1, [fp, #-220]	; 0xffffff24
   1b104:	cmp	r1, r0
   1b108:	beq	1b120 <test_scan@@Base+0x67c>
   1b10c:	ldr	r0, [pc, #3104]	; 1bd34 <test_scan@@Base+0x1290>
   1b110:	add	r0, pc, r0
   1b114:	bl	12d9c <printf@plt>
   1b118:	str	r0, [fp, #-224]	; 0xffffff20
   1b11c:	b	1bb3c <test_scan@@Base+0x1098>
   1b120:	ldr	r0, [pc, #2744]	; 1bbe0 <test_scan@@Base+0x113c>
   1b124:	add	r3, pc, r0
   1b128:	ldr	r0, [pc, #2740]	; 1bbe4 <test_scan@@Base+0x1140>
   1b12c:	add	r0, pc, r0
   1b130:	ldr	r0, [r0]
   1b134:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b138:	str	r0, [fp, #-228]	; 0xffffff1c
   1b13c:	mov	r0, r1
   1b140:	movw	r1, #1
   1b144:	movw	r2, #3
   1b148:	bl	1be80 <test_scan@@Base+0x13dc>
   1b14c:	ldr	r1, [fp, #-228]	; 0xffffff1c
   1b150:	cmp	r1, r0
   1b154:	beq	1b16c <test_scan@@Base+0x6c8>
   1b158:	ldr	r0, [pc, #3024]	; 1bd30 <test_scan@@Base+0x128c>
   1b15c:	add	r0, pc, r0
   1b160:	bl	12d9c <printf@plt>
   1b164:	str	r0, [fp, #-232]	; 0xffffff18
   1b168:	b	1bb3c <test_scan@@Base+0x1098>
   1b16c:	ldr	r0, [pc, #2676]	; 1bbe8 <test_scan@@Base+0x1144>
   1b170:	add	r3, pc, r0
   1b174:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b178:	movw	r1, #1
   1b17c:	movw	r2, #3
   1b180:	bl	1be80 <test_scan@@Base+0x13dc>
   1b184:	movw	r1, #1
   1b188:	cmp	r1, r0
   1b18c:	beq	1b1a4 <test_scan@@Base+0x700>
   1b190:	ldr	r0, [pc, #2964]	; 1bd2c <test_scan@@Base+0x1288>
   1b194:	add	r0, pc, r0
   1b198:	bl	12d9c <printf@plt>
   1b19c:	str	r0, [fp, #-236]	; 0xffffff14
   1b1a0:	b	1bb3c <test_scan@@Base+0x1098>
   1b1a4:	ldr	r0, [pc, #2624]	; 1bbec <test_scan@@Base+0x1148>
   1b1a8:	add	r3, pc, r0
   1b1ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1b0:	movw	r1, #1
   1b1b4:	movw	r2, #3
   1b1b8:	bl	1c168 <test_scan@@Base+0x16c4>
   1b1bc:	movw	r1, #2
   1b1c0:	cmp	r1, r0
   1b1c4:	beq	1b1dc <test_scan@@Base+0x738>
   1b1c8:	ldr	r0, [pc, #2904]	; 1bd28 <test_scan@@Base+0x1284>
   1b1cc:	add	r0, pc, r0
   1b1d0:	bl	12d9c <printf@plt>
   1b1d4:	str	r0, [fp, #-240]	; 0xffffff10
   1b1d8:	b	1bb3c <test_scan@@Base+0x1098>
   1b1dc:	ldr	r0, [pc, #2572]	; 1bbf0 <test_scan@@Base+0x114c>
   1b1e0:	add	r3, pc, r0
   1b1e4:	ldr	r0, [pc, #2568]	; 1bbf4 <test_scan@@Base+0x1150>
   1b1e8:	add	r0, pc, r0
   1b1ec:	ldr	r0, [r0]
   1b1f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b1f4:	str	r0, [fp, #-244]	; 0xffffff0c
   1b1f8:	mov	r0, r1
   1b1fc:	movw	r1, #1
   1b200:	movw	r2, #3
   1b204:	bl	1c168 <test_scan@@Base+0x16c4>
   1b208:	ldr	r1, [fp, #-244]	; 0xffffff0c
   1b20c:	cmp	r1, r0
   1b210:	beq	1b228 <test_scan@@Base+0x784>
   1b214:	ldr	r0, [pc, #2824]	; 1bd24 <test_scan@@Base+0x1280>
   1b218:	add	r0, pc, r0
   1b21c:	bl	12d9c <printf@plt>
   1b220:	str	r0, [fp, #-248]	; 0xffffff08
   1b224:	b	1bb3c <test_scan@@Base+0x1098>
   1b228:	ldr	r0, [pc, #2504]	; 1bbf8 <test_scan@@Base+0x1154>
   1b22c:	add	r3, pc, r0
   1b230:	ldr	r0, [pc, #2500]	; 1bbfc <test_scan@@Base+0x1158>
   1b234:	add	r0, pc, r0
   1b238:	ldr	r0, [r0]
   1b23c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b240:	str	r0, [fp, #-252]	; 0xffffff04
   1b244:	mov	r0, r1
   1b248:	movw	r1, #1
   1b24c:	movw	r2, #3
   1b250:	bl	1c330 <test_scan@@Base+0x188c>
   1b254:	ldr	r1, [fp, #-252]	; 0xffffff04
   1b258:	cmp	r1, r0
   1b25c:	beq	1b274 <test_scan@@Base+0x7d0>
   1b260:	ldr	r0, [pc, #2744]	; 1bd20 <test_scan@@Base+0x127c>
   1b264:	add	r0, pc, r0
   1b268:	bl	12d9c <printf@plt>
   1b26c:	str	r0, [fp, #-256]	; 0xffffff00
   1b270:	b	1bb3c <test_scan@@Base+0x1098>
   1b274:	ldr	r0, [pc, #2436]	; 1bc00 <test_scan@@Base+0x115c>
   1b278:	add	r3, pc, r0
   1b27c:	ldr	r0, [pc, #2432]	; 1bc04 <test_scan@@Base+0x1160>
   1b280:	add	r0, pc, r0
   1b284:	ldr	r0, [r0]
   1b288:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b28c:	str	r0, [sp, #260]	; 0x104
   1b290:	mov	r0, r1
   1b294:	movw	r1, #1
   1b298:	movw	r2, #3
   1b29c:	bl	1c330 <test_scan@@Base+0x188c>
   1b2a0:	ldr	r1, [sp, #260]	; 0x104
   1b2a4:	cmp	r1, r0
   1b2a8:	beq	1b2c0 <test_scan@@Base+0x81c>
   1b2ac:	ldr	r0, [pc, #2664]	; 1bd1c <test_scan@@Base+0x1278>
   1b2b0:	add	r0, pc, r0
   1b2b4:	bl	12d9c <printf@plt>
   1b2b8:	str	r0, [sp, #256]	; 0x100
   1b2bc:	b	1bb3c <test_scan@@Base+0x1098>
   1b2c0:	ldr	r0, [pc, #2368]	; 1bc08 <test_scan@@Base+0x1164>
   1b2c4:	add	r3, pc, r0
   1b2c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2cc:	movw	r1, #1
   1b2d0:	movw	r2, #3
   1b2d4:	bl	1c330 <test_scan@@Base+0x188c>
   1b2d8:	movw	r1, #1
   1b2dc:	cmp	r1, r0
   1b2e0:	beq	1b2f8 <test_scan@@Base+0x854>
   1b2e4:	ldr	r0, [pc, #2604]	; 1bd18 <test_scan@@Base+0x1274>
   1b2e8:	add	r0, pc, r0
   1b2ec:	bl	12d9c <printf@plt>
   1b2f0:	str	r0, [sp, #252]	; 0xfc
   1b2f4:	b	1bb3c <test_scan@@Base+0x1098>
   1b2f8:	ldr	r0, [pc, #2316]	; 1bc0c <test_scan@@Base+0x1168>
   1b2fc:	add	r3, pc, r0
   1b300:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b304:	movw	r1, #1
   1b308:	movw	r2, #3
   1b30c:	bl	1c368 <test_scan@@Base+0x18c4>
   1b310:	movw	r1, #2
   1b314:	cmp	r1, r0
   1b318:	beq	1b330 <test_scan@@Base+0x88c>
   1b31c:	ldr	r0, [pc, #2544]	; 1bd14 <test_scan@@Base+0x1270>
   1b320:	add	r0, pc, r0
   1b324:	bl	12d9c <printf@plt>
   1b328:	str	r0, [sp, #248]	; 0xf8
   1b32c:	b	1bb3c <test_scan@@Base+0x1098>
   1b330:	ldr	r0, [pc, #2264]	; 1bc10 <test_scan@@Base+0x116c>
   1b334:	add	r3, pc, r0
   1b338:	ldr	r0, [pc, #2260]	; 1bc14 <test_scan@@Base+0x1170>
   1b33c:	add	r0, pc, r0
   1b340:	ldr	r0, [r0]
   1b344:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b348:	str	r0, [sp, #244]	; 0xf4
   1b34c:	mov	r0, r1
   1b350:	movw	r1, #1
   1b354:	movw	r2, #3
   1b358:	bl	1c368 <test_scan@@Base+0x18c4>
   1b35c:	ldr	r1, [sp, #244]	; 0xf4
   1b360:	cmp	r1, r0
   1b364:	beq	1b37c <test_scan@@Base+0x8d8>
   1b368:	ldr	r0, [pc, #2464]	; 1bd10 <test_scan@@Base+0x126c>
   1b36c:	add	r0, pc, r0
   1b370:	bl	12d9c <printf@plt>
   1b374:	str	r0, [sp, #240]	; 0xf0
   1b378:	b	1bb3c <test_scan@@Base+0x1098>
   1b37c:	ldr	r0, [pc, #2196]	; 1bc18 <test_scan@@Base+0x1174>
   1b380:	add	r3, pc, r0
   1b384:	ldr	r0, [pc, #2192]	; 1bc1c <test_scan@@Base+0x1178>
   1b388:	add	r0, pc, r0
   1b38c:	ldr	r0, [r0]
   1b390:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b394:	str	r0, [sp, #236]	; 0xec
   1b398:	mov	r0, r1
   1b39c:	movw	r1, #0
   1b3a0:	str	r1, [sp, #232]	; 0xe8
   1b3a4:	ldr	r2, [sp, #232]	; 0xe8
   1b3a8:	bl	1be80 <test_scan@@Base+0x13dc>
   1b3ac:	ldr	r1, [sp, #236]	; 0xec
   1b3b0:	cmp	r1, r0
   1b3b4:	beq	1b3cc <test_scan@@Base+0x928>
   1b3b8:	ldr	r0, [pc, #2380]	; 1bd0c <test_scan@@Base+0x1268>
   1b3bc:	add	r0, pc, r0
   1b3c0:	bl	12d9c <printf@plt>
   1b3c4:	str	r0, [sp, #228]	; 0xe4
   1b3c8:	b	1bb3c <test_scan@@Base+0x1098>
   1b3cc:	ldr	r0, [pc, #2124]	; 1bc20 <test_scan@@Base+0x117c>
   1b3d0:	add	r3, pc, r0
   1b3d4:	ldr	r0, [pc, #2120]	; 1bc24 <test_scan@@Base+0x1180>
   1b3d8:	add	r0, pc, r0
   1b3dc:	ldr	r0, [r0]
   1b3e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b3e4:	str	r0, [sp, #224]	; 0xe0
   1b3e8:	mov	r0, r1
   1b3ec:	movw	r1, #0
   1b3f0:	str	r1, [sp, #220]	; 0xdc
   1b3f4:	ldr	r2, [sp, #220]	; 0xdc
   1b3f8:	bl	1be80 <test_scan@@Base+0x13dc>
   1b3fc:	ldr	r1, [sp, #224]	; 0xe0
   1b400:	cmp	r1, r0
   1b404:	beq	1b41c <test_scan@@Base+0x978>
   1b408:	ldr	r0, [pc, #2296]	; 1bd08 <test_scan@@Base+0x1264>
   1b40c:	add	r0, pc, r0
   1b410:	bl	12d9c <printf@plt>
   1b414:	str	r0, [sp, #216]	; 0xd8
   1b418:	b	1bb3c <test_scan@@Base+0x1098>
   1b41c:	ldr	r0, [pc, #2052]	; 1bc28 <test_scan@@Base+0x1184>
   1b420:	add	r3, pc, r0
   1b424:	ldr	r0, [pc, #2048]	; 1bc2c <test_scan@@Base+0x1188>
   1b428:	add	r0, pc, r0
   1b42c:	ldr	r0, [r0]
   1b430:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b434:	str	r0, [sp, #212]	; 0xd4
   1b438:	mov	r0, r1
   1b43c:	movw	r1, #1
   1b440:	str	r1, [sp, #208]	; 0xd0
   1b444:	ldr	r2, [sp, #208]	; 0xd0
   1b448:	bl	1be80 <test_scan@@Base+0x13dc>
   1b44c:	ldr	r1, [sp, #212]	; 0xd4
   1b450:	cmp	r1, r0
   1b454:	beq	1b46c <test_scan@@Base+0x9c8>
   1b458:	ldr	r0, [pc, #2212]	; 1bd04 <test_scan@@Base+0x1260>
   1b45c:	add	r0, pc, r0
   1b460:	bl	12d9c <printf@plt>
   1b464:	str	r0, [sp, #204]	; 0xcc
   1b468:	b	1bb3c <test_scan@@Base+0x1098>
   1b46c:	ldr	r0, [pc, #1988]	; 1bc38 <test_scan@@Base+0x1194>
   1b470:	add	r0, pc, r0
   1b474:	ldr	r0, [r0]
   1b478:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b47c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b480:	str	r0, [sp, #200]	; 0xc8
   1b484:	mov	r0, r2
   1b488:	str	r1, [sp, #196]	; 0xc4
   1b48c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1b490:	ldr	r1, [pc, #1944]	; 1bc30 <test_scan@@Base+0x118c>
   1b494:	add	r3, pc, r1
   1b498:	ldr	r1, [pc, #1940]	; 1bc34 <test_scan@@Base+0x1190>
   1b49c:	add	r1, pc, r1
   1b4a0:	ldr	r2, [r1]
   1b4a4:	ldr	r1, [sp, #196]	; 0xc4
   1b4a8:	str	r0, [sp, #192]	; 0xc0
   1b4ac:	mov	r0, r1
   1b4b0:	ldr	r1, [sp, #192]	; 0xc0
   1b4b4:	bl	1be80 <test_scan@@Base+0x13dc>
   1b4b8:	ldr	r1, [sp, #200]	; 0xc8
   1b4bc:	cmp	r1, r0
   1b4c0:	beq	1b4d8 <test_scan@@Base+0xa34>
   1b4c4:	ldr	r0, [pc, #2100]	; 1bd00 <test_scan@@Base+0x125c>
   1b4c8:	add	r0, pc, r0
   1b4cc:	bl	12d9c <printf@plt>
   1b4d0:	str	r0, [sp, #188]	; 0xbc
   1b4d4:	b	1bb3c <test_scan@@Base+0x1098>
   1b4d8:	ldr	r0, [pc, #1884]	; 1bc3c <test_scan@@Base+0x1198>
   1b4dc:	add	r3, pc, r0
   1b4e0:	ldr	r0, [pc, #1880]	; 1bc40 <test_scan@@Base+0x119c>
   1b4e4:	add	r0, pc, r0
   1b4e8:	ldr	r0, [r0]
   1b4ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b4f0:	str	r0, [sp, #184]	; 0xb8
   1b4f4:	mov	r0, r1
   1b4f8:	movw	r1, #0
   1b4fc:	str	r1, [sp, #180]	; 0xb4
   1b500:	ldr	r2, [sp, #180]	; 0xb4
   1b504:	bl	1c330 <test_scan@@Base+0x188c>
   1b508:	ldr	r1, [sp, #184]	; 0xb8
   1b50c:	cmp	r1, r0
   1b510:	beq	1b528 <test_scan@@Base+0xa84>
   1b514:	ldr	r0, [pc, #2016]	; 1bcfc <test_scan@@Base+0x1258>
   1b518:	add	r0, pc, r0
   1b51c:	bl	12d9c <printf@plt>
   1b520:	str	r0, [sp, #176]	; 0xb0
   1b524:	b	1bb3c <test_scan@@Base+0x1098>
   1b528:	ldr	r0, [pc, #1812]	; 1bc44 <test_scan@@Base+0x11a0>
   1b52c:	add	r3, pc, r0
   1b530:	ldr	r0, [pc, #1808]	; 1bc48 <test_scan@@Base+0x11a4>
   1b534:	add	r0, pc, r0
   1b538:	ldr	r0, [r0]
   1b53c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b540:	str	r0, [sp, #172]	; 0xac
   1b544:	mov	r0, r1
   1b548:	movw	r1, #0
   1b54c:	str	r1, [sp, #168]	; 0xa8
   1b550:	ldr	r2, [sp, #168]	; 0xa8
   1b554:	bl	1c330 <test_scan@@Base+0x188c>
   1b558:	ldr	r1, [sp, #172]	; 0xac
   1b55c:	cmp	r1, r0
   1b560:	beq	1b578 <test_scan@@Base+0xad4>
   1b564:	ldr	r0, [pc, #1932]	; 1bcf8 <test_scan@@Base+0x1254>
   1b568:	add	r0, pc, r0
   1b56c:	bl	12d9c <printf@plt>
   1b570:	str	r0, [sp, #164]	; 0xa4
   1b574:	b	1bb3c <test_scan@@Base+0x1098>
   1b578:	ldr	r0, [pc, #1740]	; 1bc4c <test_scan@@Base+0x11a8>
   1b57c:	add	r3, pc, r0
   1b580:	ldr	r0, [pc, #1736]	; 1bc50 <test_scan@@Base+0x11ac>
   1b584:	add	r0, pc, r0
   1b588:	ldr	r0, [r0]
   1b58c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b590:	str	r0, [sp, #160]	; 0xa0
   1b594:	mov	r0, r1
   1b598:	movw	r1, #1
   1b59c:	str	r1, [sp, #156]	; 0x9c
   1b5a0:	ldr	r2, [sp, #156]	; 0x9c
   1b5a4:	bl	1c330 <test_scan@@Base+0x188c>
   1b5a8:	ldr	r1, [sp, #160]	; 0xa0
   1b5ac:	cmp	r1, r0
   1b5b0:	beq	1b5c8 <test_scan@@Base+0xb24>
   1b5b4:	ldr	r0, [pc, #1848]	; 1bcf4 <test_scan@@Base+0x1250>
   1b5b8:	add	r0, pc, r0
   1b5bc:	bl	12d9c <printf@plt>
   1b5c0:	str	r0, [sp, #152]	; 0x98
   1b5c4:	b	1bb3c <test_scan@@Base+0x1098>
   1b5c8:	ldr	r0, [pc, #1676]	; 1bc5c <test_scan@@Base+0x11b8>
   1b5cc:	add	r0, pc, r0
   1b5d0:	ldr	r0, [r0]
   1b5d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b5d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b5dc:	str	r0, [sp, #148]	; 0x94
   1b5e0:	mov	r0, r2
   1b5e4:	str	r1, [sp, #144]	; 0x90
   1b5e8:	bl	17824 <verify_monster@@Base+0x1dd0>
   1b5ec:	ldr	r1, [pc, #1632]	; 1bc54 <test_scan@@Base+0x11b0>
   1b5f0:	add	r3, pc, r1
   1b5f4:	ldr	r1, [pc, #1628]	; 1bc58 <test_scan@@Base+0x11b4>
   1b5f8:	add	r1, pc, r1
   1b5fc:	ldr	r2, [r1]
   1b600:	ldr	r1, [sp, #144]	; 0x90
   1b604:	str	r0, [sp, #140]	; 0x8c
   1b608:	mov	r0, r1
   1b60c:	ldr	r1, [sp, #140]	; 0x8c
   1b610:	bl	1c330 <test_scan@@Base+0x188c>
   1b614:	ldr	r1, [sp, #148]	; 0x94
   1b618:	cmp	r1, r0
   1b61c:	beq	1b634 <test_scan@@Base+0xb90>
   1b620:	ldr	r0, [pc, #1736]	; 1bcf0 <test_scan@@Base+0x124c>
   1b624:	add	r0, pc, r0
   1b628:	bl	12d9c <printf@plt>
   1b62c:	str	r0, [sp, #136]	; 0x88
   1b630:	b	1bb3c <test_scan@@Base+0x1098>
   1b634:	ldr	r0, [pc, #1572]	; 1bc60 <test_scan@@Base+0x11bc>
   1b638:	add	r1, pc, r0
   1b63c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b640:	bl	1c43c <test_scan@@Base+0x1998>
   1b644:	movw	r1, #1
   1b648:	cmp	r1, r0
   1b64c:	beq	1b664 <test_scan@@Base+0xbc0>
   1b650:	ldr	r0, [pc, #1684]	; 1bcec <test_scan@@Base+0x1248>
   1b654:	add	r0, pc, r0
   1b658:	bl	12d9c <printf@plt>
   1b65c:	str	r0, [sp, #132]	; 0x84
   1b660:	b	1bb3c <test_scan@@Base+0x1098>
   1b664:	ldr	r0, [pc, #1528]	; 1bc64 <test_scan@@Base+0x11c0>
   1b668:	add	r1, pc, r0
   1b66c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b670:	bl	1c43c <test_scan@@Base+0x1998>
   1b674:	movw	r1, #0
   1b678:	cmp	r1, r0
   1b67c:	beq	1b694 <test_scan@@Base+0xbf0>
   1b680:	ldr	r0, [pc, #1632]	; 1bce8 <test_scan@@Base+0x1244>
   1b684:	add	r0, pc, r0
   1b688:	bl	12d9c <printf@plt>
   1b68c:	str	r0, [sp, #128]	; 0x80
   1b690:	b	1bb3c <test_scan@@Base+0x1098>
   1b694:	ldr	r0, [pc, #1484]	; 1bc68 <test_scan@@Base+0x11c4>
   1b698:	add	r1, pc, r0
   1b69c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6a0:	bl	1c43c <test_scan@@Base+0x1998>
   1b6a4:	movw	r1, #1
   1b6a8:	cmp	r1, r0
   1b6ac:	beq	1b6c4 <test_scan@@Base+0xc20>
   1b6b0:	ldr	r0, [pc, #1580]	; 1bce4 <test_scan@@Base+0x1240>
   1b6b4:	add	r0, pc, r0
   1b6b8:	bl	12d9c <printf@plt>
   1b6bc:	str	r0, [sp, #124]	; 0x7c
   1b6c0:	b	1bb3c <test_scan@@Base+0x1098>
   1b6c4:	ldr	r0, [pc, #1440]	; 1bc6c <test_scan@@Base+0x11c8>
   1b6c8:	add	r1, pc, r0
   1b6cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6d0:	bl	1c43c <test_scan@@Base+0x1998>
   1b6d4:	movw	r1, #2
   1b6d8:	cmp	r1, r0
   1b6dc:	beq	1b6f4 <test_scan@@Base+0xc50>
   1b6e0:	ldr	r0, [pc, #1528]	; 1bce0 <test_scan@@Base+0x123c>
   1b6e4:	add	r0, pc, r0
   1b6e8:	bl	12d9c <printf@plt>
   1b6ec:	str	r0, [sp, #120]	; 0x78
   1b6f0:	b	1bb3c <test_scan@@Base+0x1098>
   1b6f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b6f8:	movw	r1, #6
   1b6fc:	and	r1, r1, #255	; 0xff
   1b700:	bl	1c4d8 <test_scan@@Base+0x1a34>
   1b704:	str	r0, [fp, #-16]
   1b708:	movw	r1, #0
   1b70c:	cmp	r1, r0
   1b710:	beq	1b728 <test_scan@@Base+0xc84>
   1b714:	ldr	r0, [pc, #1472]	; 1bcdc <test_scan@@Base+0x1238>
   1b718:	add	r0, pc, r0
   1b71c:	bl	12d9c <printf@plt>
   1b720:	str	r0, [sp, #116]	; 0x74
   1b724:	b	1bb3c <test_scan@@Base+0x1098>
   1b728:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b72c:	movw	r1, #1
   1b730:	and	r1, r1, #255	; 0xff
   1b734:	bl	1c4d8 <test_scan@@Base+0x1a34>
   1b738:	str	r0, [fp, #-16]
   1b73c:	movw	r1, #2
   1b740:	cmp	r1, r0
   1b744:	beq	1b75c <test_scan@@Base+0xcb8>
   1b748:	ldr	r0, [pc, #1416]	; 1bcd8 <test_scan@@Base+0x1234>
   1b74c:	add	r0, pc, r0
   1b750:	bl	12d9c <printf@plt>
   1b754:	str	r0, [sp, #112]	; 0x70
   1b758:	b	1bb3c <test_scan@@Base+0x1098>
   1b75c:	ldr	r0, [pc, #1292]	; 1bc70 <test_scan@@Base+0x11cc>
   1b760:	add	r0, pc, r0
   1b764:	ldr	r1, [pc, #1288]	; 1bc74 <test_scan@@Base+0x11d0>
   1b768:	add	r1, pc, r1
   1b76c:	ldr	r1, [r1]
   1b770:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b774:	ldr	r0, [r0]
   1b778:	str	r0, [sp, #108]	; 0x6c
   1b77c:	mov	r0, r2
   1b780:	movw	r2, #3
   1b784:	str	r1, [sp, #104]	; 0x68
   1b788:	mov	r1, r2
   1b78c:	ldr	r2, [sp, #108]	; 0x6c
   1b790:	movw	r3, #1
   1b794:	and	r3, r3, #255	; 0xff
   1b798:	bl	1c5a8 <test_scan@@Base+0x1b04>
   1b79c:	str	r0, [fp, #-16]
   1b7a0:	ldr	r1, [sp, #104]	; 0x68
   1b7a4:	cmp	r1, r0
   1b7a8:	beq	1b7c0 <test_scan@@Base+0xd1c>
   1b7ac:	ldr	r0, [pc, #1312]	; 1bcd4 <test_scan@@Base+0x1230>
   1b7b0:	add	r0, pc, r0
   1b7b4:	bl	12d9c <printf@plt>
   1b7b8:	str	r0, [sp, #100]	; 0x64
   1b7bc:	b	1bb3c <test_scan@@Base+0x1098>
   1b7c0:	ldr	r0, [pc, #1200]	; 1bc78 <test_scan@@Base+0x11d4>
   1b7c4:	add	r0, pc, r0
   1b7c8:	ldr	r0, [r0]
   1b7cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b7d0:	str	r0, [sp, #96]	; 0x60
   1b7d4:	mov	r0, r1
   1b7d8:	movw	r1, #5
   1b7dc:	and	r1, r1, #255	; 0xff
   1b7e0:	bl	1c4d8 <test_scan@@Base+0x1a34>
   1b7e4:	str	r0, [fp, #-16]
   1b7e8:	ldr	r1, [sp, #96]	; 0x60
   1b7ec:	cmp	r1, r0
   1b7f0:	beq	1b808 <test_scan@@Base+0xd64>
   1b7f4:	ldr	r0, [pc, #1236]	; 1bcd0 <test_scan@@Base+0x122c>
   1b7f8:	add	r0, pc, r0
   1b7fc:	bl	12d9c <printf@plt>
   1b800:	str	r0, [sp, #92]	; 0x5c
   1b804:	b	1bb3c <test_scan@@Base+0x1098>
   1b808:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b80c:	movw	r1, #2
   1b810:	and	r1, r1, #255	; 0xff
   1b814:	bl	1c4d8 <test_scan@@Base+0x1a34>
   1b818:	str	r0, [fp, #-16]
   1b81c:	movw	r1, #6
   1b820:	cmp	r1, r0
   1b824:	beq	1b83c <test_scan@@Base+0xd98>
   1b828:	ldr	r0, [pc, #1180]	; 1bccc <test_scan@@Base+0x1228>
   1b82c:	add	r0, pc, r0
   1b830:	bl	12d9c <printf@plt>
   1b834:	str	r0, [sp, #88]	; 0x58
   1b838:	b	1bb3c <test_scan@@Base+0x1098>
   1b83c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b840:	movw	r1, #3
   1b844:	and	r1, r1, #255	; 0xff
   1b848:	bl	1c4d8 <test_scan@@Base+0x1a34>
   1b84c:	str	r0, [fp, #-16]
   1b850:	movw	r1, #3
   1b854:	cmp	r1, r0
   1b858:	beq	1b870 <test_scan@@Base+0xdcc>
   1b85c:	ldr	r0, [pc, #1124]	; 1bcc8 <test_scan@@Base+0x1224>
   1b860:	add	r0, pc, r0
   1b864:	bl	12d9c <printf@plt>
   1b868:	str	r0, [sp, #84]	; 0x54
   1b86c:	b	1bb3c <test_scan@@Base+0x1098>
   1b870:	ldr	r0, [pc, #1028]	; 1bc7c <test_scan@@Base+0x11d8>
   1b874:	add	r0, pc, r0
   1b878:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b87c:	ldr	r2, [r0]
   1b880:	mov	r0, r1
   1b884:	movw	r1, #3
   1b888:	movw	r3, #3
   1b88c:	and	r3, r3, #255	; 0xff
   1b890:	bl	1c5a8 <test_scan@@Base+0x1b04>
   1b894:	str	r0, [fp, #-16]
   1b898:	movw	r1, #3
   1b89c:	cmp	r1, r0
   1b8a0:	beq	1b8b8 <test_scan@@Base+0xe14>
   1b8a4:	ldr	r0, [pc, #1048]	; 1bcc4 <test_scan@@Base+0x1220>
   1b8a8:	add	r0, pc, r0
   1b8ac:	bl	12d9c <printf@plt>
   1b8b0:	str	r0, [sp, #80]	; 0x50
   1b8b4:	b	1bb3c <test_scan@@Base+0x1098>
   1b8b8:	ldr	r0, [pc, #960]	; 1bc80 <test_scan@@Base+0x11dc>
   1b8bc:	add	r0, pc, r0
   1b8c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b8c4:	ldr	r2, [r0]
   1b8c8:	mov	r0, r1
   1b8cc:	movw	r1, #4
   1b8d0:	movw	r3, #3
   1b8d4:	and	r3, r3, #255	; 0xff
   1b8d8:	bl	1c5a8 <test_scan@@Base+0x1b04>
   1b8dc:	str	r0, [fp, #-16]
   1b8e0:	movw	r1, #5
   1b8e4:	cmp	r1, r0
   1b8e8:	beq	1b900 <test_scan@@Base+0xe5c>
   1b8ec:	ldr	r0, [pc, #972]	; 1bcc0 <test_scan@@Base+0x121c>
   1b8f0:	add	r0, pc, r0
   1b8f4:	bl	12d9c <printf@plt>
   1b8f8:	str	r0, [sp, #76]	; 0x4c
   1b8fc:	b	1bb3c <test_scan@@Base+0x1098>
   1b900:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b904:	movw	r1, #3
   1b908:	and	r1, r1, #255	; 0xff
   1b90c:	bl	1c6b0 <test_scan@@Base+0x1c0c>
   1b910:	str	r0, [fp, #-16]
   1b914:	movw	r1, #5
   1b918:	cmp	r1, r0
   1b91c:	beq	1b934 <test_scan@@Base+0xe90>
   1b920:	ldr	r0, [pc, #916]	; 1bcbc <test_scan@@Base+0x1218>
   1b924:	add	r0, pc, r0
   1b928:	bl	12d9c <printf@plt>
   1b92c:	str	r0, [sp, #72]	; 0x48
   1b930:	b	1bb3c <test_scan@@Base+0x1098>
   1b934:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b938:	movw	r1, #1
   1b93c:	movw	r2, #4
   1b940:	movw	r3, #3
   1b944:	and	r3, r3, #255	; 0xff
   1b948:	bl	1c76c <test_scan@@Base+0x1cc8>
   1b94c:	str	r0, [fp, #-16]
   1b950:	movw	r1, #3
   1b954:	cmp	r1, r0
   1b958:	beq	1b978 <test_scan@@Base+0xed4>
   1b95c:	ldr	r0, [pc, #852]	; 1bcb8 <test_scan@@Base+0x1214>
   1b960:	add	r0, pc, r0
   1b964:	bl	12d9c <printf@plt>
   1b968:	str	r0, [sp, #68]	; 0x44
   1b96c:	b	1bb3c <test_scan@@Base+0x1098>
   1b970:	muleq	r1, fp, fp
   1b974:	muleq	r1, r3, r2
   1b978:	ldr	r0, [pc, #820]	; 1bcb4 <test_scan@@Base+0x1210>
   1b97c:	add	r1, pc, r0
   1b980:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b984:	bl	1c868 <test_scan@@Base+0x1dc4>
   1b988:	ldr	r1, [pc, #796]	; 1bcac <test_scan@@Base+0x1208>
   1b98c:	add	r3, pc, r1
   1b990:	ldr	r1, [pc, #792]	; 1bcb0 <test_scan@@Base+0x120c>
   1b994:	add	r1, pc, r1
   1b998:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1b99c:	ldr	r2, [r1]
   1b9a0:	str	r0, [sp, #64]	; 0x40
   1b9a4:	mov	r0, lr
   1b9a8:	movw	r1, #0
   1b9ac:	bl	1c90c <test_scan@@Base+0x1e68>
   1b9b0:	ldr	r1, [pc, #752]	; 1bca8 <test_scan@@Base+0x1204>
   1b9b4:	add	r1, pc, r1
   1b9b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b9bc:	str	r0, [sp, #60]	; 0x3c
   1b9c0:	mov	r0, r2
   1b9c4:	movw	r2, #4
   1b9c8:	bl	1c9e8 <test_scan@@Base+0x1f44>
   1b9cc:	ldr	r1, [pc, #716]	; 1bca0 <test_scan@@Base+0x11fc>
   1b9d0:	add	r3, pc, r1
   1b9d4:	ldr	r1, [pc, #712]	; 1bca4 <test_scan@@Base+0x1200>
   1b9d8:	add	r1, pc, r1
   1b9dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b9e0:	ldr	r1, [r1]
   1b9e4:	str	r0, [sp, #56]	; 0x38
   1b9e8:	mov	r0, r2
   1b9ec:	movw	r2, #0
   1b9f0:	str	r1, [sp, #52]	; 0x34
   1b9f4:	mov	r1, r2
   1b9f8:	ldr	r2, [sp, #52]	; 0x34
   1b9fc:	movw	lr, #4
   1ba00:	str	lr, [sp]
   1ba04:	bl	1ca90 <test_scan@@Base+0x1fec>
   1ba08:	ldr	r1, [pc, #652]	; 1bc9c <test_scan@@Base+0x11f8>
   1ba0c:	add	r1, pc, r1
   1ba10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ba14:	str	r0, [sp, #48]	; 0x30
   1ba18:	mov	r0, r2
   1ba1c:	bl	1cb74 <test_scan@@Base+0x20d0>
   1ba20:	ldr	r1, [pc, #620]	; 1bc94 <test_scan@@Base+0x11f0>
   1ba24:	add	r3, pc, r1
   1ba28:	ldr	r1, [pc, #616]	; 1bc98 <test_scan@@Base+0x11f4>
   1ba2c:	add	r1, pc, r1
   1ba30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ba34:	ldr	r1, [r1]
   1ba38:	str	r0, [sp, #44]	; 0x2c
   1ba3c:	mov	r0, r2
   1ba40:	movw	r2, #0
   1ba44:	str	r1, [sp, #40]	; 0x28
   1ba48:	mov	r1, r2
   1ba4c:	ldr	r2, [sp, #40]	; 0x28
   1ba50:	bl	1cc04 <test_scan@@Base+0x2160>
   1ba54:	ldr	r1, [pc, #564]	; 1bc90 <test_scan@@Base+0x11ec>
   1ba58:	add	r1, pc, r1
   1ba5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ba60:	str	r0, [sp, #36]	; 0x24
   1ba64:	mov	r0, r2
   1ba68:	movw	r2, #4
   1ba6c:	bl	1ccd4 <test_scan@@Base+0x2230>
   1ba70:	ldr	r1, [pc, #528]	; 1bc88 <test_scan@@Base+0x11e4>
   1ba74:	add	r3, pc, r1
   1ba78:	ldr	r1, [pc, #524]	; 1bc8c <test_scan@@Base+0x11e8>
   1ba7c:	add	r1, pc, r1
   1ba80:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ba84:	ldr	r1, [r1]
   1ba88:	str	r0, [sp, #32]
   1ba8c:	mov	r0, r2
   1ba90:	movw	r2, #0
   1ba94:	str	r1, [sp, #28]
   1ba98:	mov	r1, r2
   1ba9c:	ldr	r2, [sp, #28]
   1baa0:	movw	lr, #4
   1baa4:	str	lr, [sp]
   1baa8:	bl	1cd68 <test_scan@@Base+0x22c4>
   1baac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bab0:	str	r0, [sp, #24]
   1bab4:	mov	r0, r1
   1bab8:	movw	r1, #13
   1babc:	sxth	r1, r1
   1bac0:	bl	1ce40 <test_scan@@Base+0x239c>
   1bac4:	ldr	r1, [pc, #440]	; 1bc84 <test_scan@@Base+0x11e0>
   1bac8:	add	r1, pc, r1
   1bacc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bad0:	ldr	r1, [r1]
   1bad4:	str	r0, [sp, #20]
   1bad8:	mov	r0, r2
   1badc:	movw	r2, #1
   1bae0:	str	r1, [sp, #16]
   1bae4:	mov	r1, r2
   1bae8:	ldr	r2, [sp, #16]
   1baec:	movw	r3, #42	; 0x2a
   1baf0:	sxth	r3, r3
   1baf4:	bl	1cf14 <test_scan@@Base+0x2470>
   1baf8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bafc:	str	r0, [sp, #12]
   1bb00:	mov	r0, r1
   1bb04:	movw	r1, #1
   1bb08:	sxth	r1, r1
   1bb0c:	bl	1d020 <test_scan@@Base+0x257c>
   1bb10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bb14:	str	r0, [sp, #8]
   1bb18:	mov	r0, r1
   1bb1c:	movw	r1, #0
   1bb20:	movw	r2, #2
   1bb24:	movw	r3, #42	; 0x2a
   1bb28:	sxth	r3, r3
   1bb2c:	bl	1d0e0 <test_scan@@Base+0x263c>
   1bb30:	movw	r1, #0
   1bb34:	str	r1, [fp, #-52]	; 0xffffffcc
   1bb38:	str	r0, [sp, #4]
   1bb3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1bb40:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1bb44:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1bb48:	sub	sp, fp, #8
   1bb4c:	pop	{r4, r5, fp, pc}
   1bb50:	strdeq	r7, [r1], -r6
   1bb54:	muleq	r1, r7, r1
   1bb58:	andeq	r7, r1, r6, ror #22
   1bb5c:	andeq	r7, r1, r6, ror fp
   1bb60:	andeq	r7, r1, lr, asr #22
   1bb64:	strdeq	r8, [r1], -r1
   1bb68:	andeq	r7, r1, r7, asr #18
   1bb6c:	andeq	r8, r1, pc, lsl #6
   1bb70:	andeq	r8, r1, r1, lsl #6
   1bb74:	andeq	r7, r1, r7, lsl #18
   1bb78:	andeq	r8, r1, pc, asr #5
   1bb7c:	andeq	r8, r1, r5, asr #5
   1bb80:	andeq	r7, r1, r7, asr #17
   1bb84:	andeq	r8, r1, pc, lsl #5
   1bb88:	andeq	r7, r1, r2, lsr #19
   1bb8c:	andeq	r7, r1, r2, ror r9
   1bb90:	andeq	r8, r1, sl, lsr #3
   1bb94:	andeq	r8, r1, r6, ror r1
   1bb98:	ldrdeq	r7, [r1], -sl
   1bb9c:	andeq	lr, r2, ip, lsl #4
   1bba0:	andeq	lr, r2, r0, lsl #4
   1bba4:	andeq	r8, r1, sp, lsl #2
   1bba8:	andeq	lr, r2, r8, lsr #3
   1bbac:	ldrdeq	r7, [r1], -r6
   1bbb0:	andeq	r7, r1, lr, lsr #16
   1bbb4:	strdeq	r7, [r1], -lr
   1bbb8:	andeq	r8, r1, r5, lsr #2
   1bbbc:	strdeq	r8, [r1], -r1
   1bbc0:	andeq	r7, r1, sl, asr r7
   1bbc4:	andeq	lr, r2, r4, rrx
   1bbc8:	andeq	r8, r1, sp, rrx
   1bbcc:	andeq	lr, r2, r0, lsr #32
   1bbd0:	andeq	r7, r1, sl, asr #13
   1bbd4:	ldrdeq	sp, [r2], -r4
   1bbd8:	strdeq	r7, [r1], -r1
   1bbdc:	andeq	sp, r2, ip, lsl #31
   1bbe0:			; <UNDEFINED> instruction: 0x000175b2
   1bbe4:	andeq	sp, r2, r0, asr #30
   1bbe8:	andeq	r7, r1, r6, asr #11
   1bbec:			; <UNDEFINED> instruction: 0x000175b6
   1bbf0:	andeq	r7, r1, r7, ror #23
   1bbf4:	andeq	sp, r2, r4, lsl #29
   1bbf8:	muleq	r1, sp, sp
   1bbfc:	andeq	sp, r2, r8, lsr lr
   1bc00:	andeq	r7, r1, lr, asr r4
   1bc04:	andeq	sp, r2, ip, ror #27
   1bc08:	andeq	r7, r1, r2, ror r4
   1bc0c:	andeq	r7, r1, r2, ror #8
   1bc10:	muleq	r1, r3, sl
   1bc14:	andeq	sp, r2, r0, lsr sp
   1bc18:	andeq	r7, r1, r6, asr r3
   1bc1c:	andeq	sp, r2, r4, ror #25
   1bc20:	andeq	r7, r1, r6, ror #6
   1bc24:	muleq	r2, r4, ip
   1bc28:	andeq	r7, r1, r6, lsl r3
   1bc2c:	andeq	sp, r2, r4, asr #24
   1bc30:	andeq	r7, r1, r2, asr #4
   1bc34:	ldrdeq	sp, [r2], -r4
   1bc38:	strdeq	sp, [r2], -ip
   1bc3c:	strdeq	r7, [r1], -sl
   1bc40:	andeq	sp, r2, r8, lsl #23
   1bc44:	andeq	r7, r1, sl, lsl #4
   1bc48:	andeq	sp, r2, r8, lsr fp
   1bc4c:			; <UNDEFINED> instruction: 0x000171ba
   1bc50:	andeq	sp, r2, r8, ror #21
   1bc54:	andeq	r7, r1, r6, ror #1
   1bc58:	andeq	sp, r2, r8, ror sl
   1bc5c:	andeq	sp, r2, r0, lsr #21
   1bc60:	strdeq	r7, [r1], -lr
   1bc64:	andeq	r7, r1, r1, ror #18
   1bc68:	andeq	r7, r1, lr, lsr r0
   1bc6c:	muleq	r1, r6, r0
   1bc70:	andeq	sp, r2, r0, lsl r9
   1bc74:	andeq	sp, r2, r4, lsl #18
   1bc78:	andeq	sp, r2, r8, lsr #17
   1bc7c:	strdeq	sp, [r2], -ip
   1bc80:			; <UNDEFINED> instruction: 0x0002d7b4
   1bc84:	andeq	sp, r2, r8, lsr #11
   1bc88:	ldrdeq	r6, [r1], -r3
   1bc8c:	strdeq	sp, [r2], -r4
   1bc90:	andeq	r6, r1, pc, ror #27
   1bc94:	andeq	r6, r1, r3, lsr #28
   1bc98:	andeq	sp, r2, r4, asr #12
   1bc9c:	andeq	r6, r1, fp, lsr lr
   1bca0:	andeq	r6, r1, r7, ror lr
   1bca4:	muleq	r2, r8, r6
   1bca8:	muleq	r1, r3, lr
   1bcac:			; <UNDEFINED> instruction: 0x00016ebb
   1bcb0:	ldrdeq	sp, [r2], -ip
   1bcb4:	andeq	r6, r1, fp, asr #29
   1bcb8:	andeq	r7, r1, r9, ror fp
   1bcbc:	andeq	r7, r1, r2, lsl #23
   1bcc0:	andeq	r7, r1, r9, ror fp
   1bcc4:	andeq	r7, r1, r6, lsl #23
   1bcc8:	andeq	r7, r1, r7, asr #24
   1bccc:	ldrdeq	r7, [r1], -r6
   1bcd0:	andeq	r7, r1, pc, lsr #25
   1bcd4:	andeq	r7, r1, r9, lsl ip
   1bcd8:	andeq	r7, r1, pc, asr #24
   1bcdc:	andeq	r7, r1, r6, asr ip
   1bce0:	andeq	r7, r1, ip, ror #24
   1bce4:	andeq	r7, r1, r0, lsl #25
   1bce8:	muleq	r1, r4, ip
   1bcec:	andeq	r7, r1, r9, lsr #25
   1bcf0:	andeq	r7, r1, sp, lsr #25
   1bcf4:	strdeq	r7, [r1], -r2
   1bcf8:	andeq	r7, r1, r3, lsr #26
   1bcfc:	andeq	r7, r1, r2, asr sp
   1bd00:	andeq	r7, r1, r9, lsl #28
   1bd04:	andeq	r7, r1, lr, asr #28
   1bd08:	andeq	r7, r1, pc, ror lr
   1bd0c:	andeq	r7, r1, lr, lsr #29
   1bd10:	ldrdeq	r7, [r1], -r1
   1bd14:	strdeq	r7, [r1], -r4
   1bd18:	andeq	r7, r1, r6, lsl #30
   1bd1c:	andeq	r7, r1, r1, lsl pc
   1bd20:	andeq	r7, r1, pc, lsr #30
   1bd24:	andeq	r7, r1, pc, asr #30
   1bd28:	andeq	r8, r1, r9, asr #32
   1bd2c:	andeq	r8, r1, fp, asr r0
   1bd30:	andeq	r7, r1, r9, ror #31
   1bd34:	andeq	r8, r1, r2, lsl r0
   1bd38:	andeq	r8, r1, r2, asr #32
   1bd3c:	andeq	r8, r1, fp, asr r0
   1bd40:	andeq	r8, r1, r7, lsr #1
   1bd44:	ldrdeq	r8, [r1], -r0
   1bd48:	andeq	r8, r1, r0, lsl r1
   1bd4c:	muleq	r1, r2, r1
   1bd50:	andeq	r8, r1, r2, asr #3
   1bd54:	andeq	r8, r1, r4, ror #1
   1bd58:	andeq	r8, r1, r4, ror #1
   1bd5c:	andeq	r8, r1, r1, ror #3
   1bd60:	andeq	r8, r1, sl, lsl r2
   1bd64:	andeq	r8, r1, lr, asr #4
   1bd68:	andeq	r8, r1, r1, ror #4
   1bd6c:	muleq	r1, r2, r2
   1bd70:	push	{fp, lr}
   1bd74:	mov	fp, sp
   1bd78:	sub	sp, sp, #8
   1bd7c:	str	r0, [sp, #4]
   1bd80:	ldr	r0, [sp, #4]
   1bd84:	bl	2addc <flatcc_builder_start_offset_vector@@Base>
   1bd88:	mov	sp, fp
   1bd8c:	pop	{fp, pc}
   1bd90:	push	{fp, lr}
   1bd94:	mov	fp, sp
   1bd98:	sub	sp, sp, #16
   1bd9c:	str	r0, [fp, #-4]
   1bda0:	ldr	r0, [fp, #-4]
   1bda4:	ldr	r1, [fp, #-4]
   1bda8:	str	r0, [sp, #8]
   1bdac:	mov	r0, r1
   1bdb0:	bl	2aee8 <flatcc_builder_end_offset_vector@@Base>
   1bdb4:	ldr	r1, [sp, #8]
   1bdb8:	str	r0, [sp, #4]
   1bdbc:	mov	r0, r1
   1bdc0:	ldr	r1, [sp, #4]
   1bdc4:	bl	2639c <main@@Base+0x2fe8>
   1bdc8:	mov	sp, fp
   1bdcc:	pop	{fp, pc}
   1bdd0:	push	{fp, lr}
   1bdd4:	mov	fp, sp
   1bdd8:	sub	sp, sp, #8
   1bddc:	str	r0, [sp, #4]
   1bde0:	str	r1, [sp]
   1bde4:	ldr	r0, [sp, #4]
   1bde8:	ldr	r1, [sp]
   1bdec:	bl	1beb8 <test_scan@@Base+0x1414>
   1bdf0:	mov	sp, fp
   1bdf4:	pop	{fp, pc}
   1bdf8:	push	{fp, lr}
   1bdfc:	mov	fp, sp
   1be00:	sub	sp, sp, #8
   1be04:	str	r0, [sp, #4]
   1be08:	str	r1, [sp]
   1be0c:	ldr	r0, [sp, #4]
   1be10:	ldr	r1, [sp]
   1be14:	bl	1bf60 <test_scan@@Base+0x14bc>
   1be18:	mov	sp, fp
   1be1c:	pop	{fp, pc}
   1be20:	push	{fp, lr}
   1be24:	mov	fp, sp
   1be28:	sub	sp, sp, #16
   1be2c:	str	r0, [fp, #-4]
   1be30:	str	r1, [sp, #8]
   1be34:	str	r2, [sp, #4]
   1be38:	ldr	r0, [fp, #-4]
   1be3c:	ldr	r1, [sp, #8]
   1be40:	ldr	r2, [sp, #4]
   1be44:	bl	26a68 <main@@Base+0x36b4>
   1be48:	mov	sp, fp
   1be4c:	pop	{fp, pc}
   1be50:	push	{fp, lr}
   1be54:	mov	fp, sp
   1be58:	sub	sp, sp, #16
   1be5c:	str	r0, [fp, #-4]
   1be60:	str	r1, [sp, #8]
   1be64:	str	r2, [sp, #4]
   1be68:	ldr	r0, [fp, #-4]
   1be6c:	ldr	r1, [sp, #8]
   1be70:	ldr	r2, [sp, #4]
   1be74:	bl	1bff4 <test_scan@@Base+0x1550>
   1be78:	mov	sp, fp
   1be7c:	pop	{fp, pc}
   1be80:	push	{fp, lr}
   1be84:	mov	fp, sp
   1be88:	sub	sp, sp, #16
   1be8c:	str	r0, [fp, #-4]
   1be90:	str	r1, [sp, #8]
   1be94:	str	r2, [sp, #4]
   1be98:	str	r3, [sp]
   1be9c:	ldr	r0, [fp, #-4]
   1bea0:	ldr	r1, [sp, #8]
   1bea4:	ldr	r2, [sp, #4]
   1bea8:	ldr	r3, [sp]
   1beac:	bl	1c168 <test_scan@@Base+0x16c4>
   1beb0:	mov	sp, fp
   1beb4:	pop	{fp, pc}
   1beb8:	push	{fp, lr}
   1bebc:	mov	fp, sp
   1bec0:	sub	sp, sp, #24
   1bec4:	str	r0, [fp, #-8]
   1bec8:	str	r1, [sp, #12]
   1becc:	movw	r0, #0
   1bed0:	str	r0, [sp, #4]
   1bed4:	ldr	r0, [sp, #4]
   1bed8:	ldr	r1, [fp, #-8]
   1bedc:	str	r0, [sp]
   1bee0:	mov	r0, r1
   1bee4:	bl	17824 <verify_monster@@Base+0x1dd0>
   1bee8:	ldr	r1, [sp]
   1beec:	cmp	r1, r0
   1bef0:	bcs	1bf40 <test_scan@@Base+0x149c>
   1bef4:	ldr	r0, [fp, #-8]
   1bef8:	ldr	r1, [sp, #4]
   1befc:	bl	17874 <verify_monster@@Base+0x1e20>
   1bf00:	bl	16d54 <verify_monster@@Base+0x1300>
   1bf04:	str	r0, [sp, #8]
   1bf08:	ldr	r0, [sp, #8]
   1bf0c:	ldr	r1, [sp, #12]
   1bf10:	movw	r2, #0
   1bf14:	bl	26a3c <main@@Base+0x3688>
   1bf18:	cmp	r0, #0
   1bf1c:	bne	1bf2c <test_scan@@Base+0x1488>
   1bf20:	ldr	r0, [sp, #4]
   1bf24:	str	r0, [fp, #-4]
   1bf28:	b	1bf50 <test_scan@@Base+0x14ac>
   1bf2c:	b	1bf30 <test_scan@@Base+0x148c>
   1bf30:	ldr	r0, [sp, #4]
   1bf34:	add	r0, r0, #1
   1bf38:	str	r0, [sp, #4]
   1bf3c:	b	1bed4 <test_scan@@Base+0x1430>
   1bf40:	ldr	r0, [pc, #20]	; 1bf5c <test_scan@@Base+0x14b8>
   1bf44:	add	r0, pc, r0
   1bf48:	ldr	r0, [r0]
   1bf4c:	str	r0, [fp, #-4]
   1bf50:	ldr	r0, [fp, #-4]
   1bf54:	mov	sp, fp
   1bf58:	pop	{fp, pc}
   1bf5c:	andeq	sp, r2, r8, lsr #2
   1bf60:	push	{fp, lr}
   1bf64:	mov	fp, sp
   1bf68:	sub	sp, sp, #24
   1bf6c:	str	r0, [fp, #-8]
   1bf70:	str	r1, [sp, #12]
   1bf74:	ldr	r0, [fp, #-8]
   1bf78:	bl	17824 <verify_monster@@Base+0x1dd0>
   1bf7c:	str	r0, [sp, #4]
   1bf80:	ldr	r0, [sp, #4]
   1bf84:	mvn	r1, #0
   1bf88:	add	r1, r0, r1
   1bf8c:	str	r1, [sp, #4]
   1bf90:	cmp	r0, #0
   1bf94:	bls	1bfd4 <test_scan@@Base+0x1530>
   1bf98:	ldr	r0, [fp, #-8]
   1bf9c:	ldr	r1, [sp, #4]
   1bfa0:	bl	17874 <verify_monster@@Base+0x1e20>
   1bfa4:	bl	16d54 <verify_monster@@Base+0x1300>
   1bfa8:	str	r0, [sp, #8]
   1bfac:	ldr	r0, [sp, #8]
   1bfb0:	ldr	r1, [sp, #12]
   1bfb4:	movw	r2, #0
   1bfb8:	bl	26a3c <main@@Base+0x3688>
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1bfd0 <test_scan@@Base+0x152c>
   1bfc4:	ldr	r0, [sp, #4]
   1bfc8:	str	r0, [fp, #-4]
   1bfcc:	b	1bfe4 <test_scan@@Base+0x1540>
   1bfd0:	b	1bf80 <test_scan@@Base+0x14dc>
   1bfd4:	ldr	r0, [pc, #20]	; 1bff0 <test_scan@@Base+0x154c>
   1bfd8:	add	r0, pc, r0
   1bfdc:	ldr	r0, [r0]
   1bfe0:	str	r0, [fp, #-4]
   1bfe4:	ldr	r0, [fp, #-4]
   1bfe8:	mov	sp, fp
   1bfec:	pop	{fp, pc}
   1bff0:	muleq	r2, r4, r0
   1bff4:	push	{fp, lr}
   1bff8:	mov	fp, sp
   1bffc:	sub	sp, sp, #24
   1c000:	str	r0, [fp, #-8]
   1c004:	str	r1, [sp, #12]
   1c008:	str	r2, [sp, #8]
   1c00c:	ldr	r0, [fp, #-8]
   1c010:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c014:	str	r0, [sp]
   1c018:	ldr	r0, [sp]
   1c01c:	mvn	r1, #0
   1c020:	add	r1, r0, r1
   1c024:	str	r1, [sp]
   1c028:	cmp	r0, #0
   1c02c:	bls	1c06c <test_scan@@Base+0x15c8>
   1c030:	ldr	r0, [fp, #-8]
   1c034:	ldr	r1, [sp]
   1c038:	bl	17874 <verify_monster@@Base+0x1e20>
   1c03c:	bl	16d54 <verify_monster@@Base+0x1300>
   1c040:	str	r0, [sp, #4]
   1c044:	ldr	r0, [sp, #4]
   1c048:	ldr	r1, [sp, #12]
   1c04c:	ldr	r2, [sp, #8]
   1c050:	bl	2694c <main@@Base+0x3598>
   1c054:	cmp	r0, #0
   1c058:	bne	1c068 <test_scan@@Base+0x15c4>
   1c05c:	ldr	r0, [sp]
   1c060:	str	r0, [fp, #-4]
   1c064:	b	1c07c <test_scan@@Base+0x15d8>
   1c068:	b	1c018 <test_scan@@Base+0x1574>
   1c06c:	ldr	r0, [pc, #20]	; 1c088 <test_scan@@Base+0x15e4>
   1c070:	add	r0, pc, r0
   1c074:	ldr	r0, [r0]
   1c078:	str	r0, [fp, #-4]
   1c07c:	ldr	r0, [fp, #-4]
   1c080:	mov	sp, fp
   1c084:	pop	{fp, pc}
   1c088:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1c08c:	push	{fp, lr}
   1c090:	mov	fp, sp
   1c094:	sub	sp, sp, #40	; 0x28
   1c098:	ldr	ip, [fp, #8]
   1c09c:	str	r0, [fp, #-8]
   1c0a0:	str	r1, [fp, #-12]
   1c0a4:	str	r2, [fp, #-16]
   1c0a8:	str	r3, [sp, #20]
   1c0ac:	ldr	r0, [fp, #-16]
   1c0b0:	ldr	r1, [fp, #-8]
   1c0b4:	str	r0, [sp, #8]
   1c0b8:	mov	r0, r1
   1c0bc:	str	ip, [sp, #4]
   1c0c0:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c0c4:	ldr	r1, [sp, #8]
   1c0c8:	cmp	r1, r0
   1c0cc:	bcs	1c0dc <test_scan@@Base+0x1638>
   1c0d0:	ldr	r0, [fp, #-16]
   1c0d4:	str	r0, [sp]
   1c0d8:	b	1c0e8 <test_scan@@Base+0x1644>
   1c0dc:	ldr	r0, [fp, #-8]
   1c0e0:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c0e4:	str	r0, [sp]
   1c0e8:	ldr	r0, [sp]
   1c0ec:	str	r0, [sp, #12]
   1c0f0:	ldr	r0, [sp, #12]
   1c0f4:	mvn	r1, #0
   1c0f8:	add	r1, r0, r1
   1c0fc:	str	r1, [sp, #12]
   1c100:	ldr	r1, [fp, #-12]
   1c104:	cmp	r0, r1
   1c108:	bls	1c148 <test_scan@@Base+0x16a4>
   1c10c:	ldr	r0, [fp, #-8]
   1c110:	ldr	r1, [sp, #12]
   1c114:	bl	17874 <verify_monster@@Base+0x1e20>
   1c118:	bl	16d54 <verify_monster@@Base+0x1300>
   1c11c:	str	r0, [sp, #16]
   1c120:	ldr	r0, [sp, #16]
   1c124:	ldr	r1, [sp, #20]
   1c128:	ldr	r2, [fp, #8]
   1c12c:	bl	2694c <main@@Base+0x3598>
   1c130:	cmp	r0, #0
   1c134:	bne	1c144 <test_scan@@Base+0x16a0>
   1c138:	ldr	r0, [sp, #12]
   1c13c:	str	r0, [fp, #-4]
   1c140:	b	1c158 <test_scan@@Base+0x16b4>
   1c144:	b	1c0f0 <test_scan@@Base+0x164c>
   1c148:	ldr	r0, [pc, #20]	; 1c164 <test_scan@@Base+0x16c0>
   1c14c:	add	r0, pc, r0
   1c150:	ldr	r0, [r0]
   1c154:	str	r0, [fp, #-4]
   1c158:	ldr	r0, [fp, #-4]
   1c15c:	mov	sp, fp
   1c160:	pop	{fp, pc}
   1c164:	andeq	ip, r2, r0, lsr #30
   1c168:	push	{fp, lr}
   1c16c:	mov	fp, sp
   1c170:	sub	sp, sp, #40	; 0x28
   1c174:	str	r0, [fp, #-8]
   1c178:	str	r1, [fp, #-12]
   1c17c:	str	r2, [fp, #-16]
   1c180:	str	r3, [sp, #20]
   1c184:	ldr	r0, [fp, #-12]
   1c188:	str	r0, [sp, #12]
   1c18c:	ldr	r0, [sp, #12]
   1c190:	ldr	r1, [fp, #-16]
   1c194:	ldr	r2, [fp, #-8]
   1c198:	str	r0, [sp, #8]
   1c19c:	mov	r0, r2
   1c1a0:	str	r1, [sp, #4]
   1c1a4:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c1a8:	ldr	r1, [sp, #4]
   1c1ac:	cmp	r1, r0
   1c1b0:	bcs	1c1c0 <test_scan@@Base+0x171c>
   1c1b4:	ldr	r0, [fp, #-16]
   1c1b8:	str	r0, [sp]
   1c1bc:	b	1c1cc <test_scan@@Base+0x1728>
   1c1c0:	ldr	r0, [fp, #-8]
   1c1c4:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c1c8:	str	r0, [sp]
   1c1cc:	ldr	r0, [sp]
   1c1d0:	ldr	r1, [sp, #8]
   1c1d4:	cmp	r1, r0
   1c1d8:	bcs	1c228 <test_scan@@Base+0x1784>
   1c1dc:	ldr	r0, [fp, #-8]
   1c1e0:	ldr	r1, [sp, #12]
   1c1e4:	bl	17874 <verify_monster@@Base+0x1e20>
   1c1e8:	bl	16d54 <verify_monster@@Base+0x1300>
   1c1ec:	str	r0, [sp, #16]
   1c1f0:	ldr	r0, [sp, #16]
   1c1f4:	ldr	r1, [sp, #20]
   1c1f8:	movw	r2, #0
   1c1fc:	bl	26a3c <main@@Base+0x3688>
   1c200:	cmp	r0, #0
   1c204:	bne	1c214 <test_scan@@Base+0x1770>
   1c208:	ldr	r0, [sp, #12]
   1c20c:	str	r0, [fp, #-4]
   1c210:	b	1c238 <test_scan@@Base+0x1794>
   1c214:	b	1c218 <test_scan@@Base+0x1774>
   1c218:	ldr	r0, [sp, #12]
   1c21c:	add	r0, r0, #1
   1c220:	str	r0, [sp, #12]
   1c224:	b	1c18c <test_scan@@Base+0x16e8>
   1c228:	ldr	r0, [pc, #20]	; 1c244 <test_scan@@Base+0x17a0>
   1c22c:	add	r0, pc, r0
   1c230:	ldr	r0, [r0]
   1c234:	str	r0, [fp, #-4]
   1c238:	ldr	r0, [fp, #-4]
   1c23c:	mov	sp, fp
   1c240:	pop	{fp, pc}
   1c244:	andeq	ip, r2, r0, asr #28
   1c248:	push	{fp, lr}
   1c24c:	mov	fp, sp
   1c250:	sub	sp, sp, #48	; 0x30
   1c254:	ldr	ip, [fp, #8]
   1c258:	str	r0, [fp, #-8]
   1c25c:	str	r1, [fp, #-12]
   1c260:	str	r2, [fp, #-16]
   1c264:	str	r3, [fp, #-20]	; 0xffffffec
   1c268:	ldr	r0, [fp, #-12]
   1c26c:	str	r0, [sp, #20]
   1c270:	str	ip, [sp, #16]
   1c274:	ldr	r0, [sp, #20]
   1c278:	ldr	r1, [fp, #-16]
   1c27c:	ldr	r2, [fp, #-8]
   1c280:	str	r0, [sp, #12]
   1c284:	mov	r0, r2
   1c288:	str	r1, [sp, #8]
   1c28c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c290:	ldr	r1, [sp, #8]
   1c294:	cmp	r1, r0
   1c298:	bcs	1c2a8 <test_scan@@Base+0x1804>
   1c29c:	ldr	r0, [fp, #-16]
   1c2a0:	str	r0, [sp, #4]
   1c2a4:	b	1c2b4 <test_scan@@Base+0x1810>
   1c2a8:	ldr	r0, [fp, #-8]
   1c2ac:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c2b0:	str	r0, [sp, #4]
   1c2b4:	ldr	r0, [sp, #4]
   1c2b8:	ldr	r1, [sp, #12]
   1c2bc:	cmp	r1, r0
   1c2c0:	bcs	1c310 <test_scan@@Base+0x186c>
   1c2c4:	ldr	r0, [fp, #-8]
   1c2c8:	ldr	r1, [sp, #20]
   1c2cc:	bl	17874 <verify_monster@@Base+0x1e20>
   1c2d0:	bl	16d54 <verify_monster@@Base+0x1300>
   1c2d4:	str	r0, [sp, #24]
   1c2d8:	ldr	r0, [sp, #24]
   1c2dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c2e0:	ldr	r2, [fp, #8]
   1c2e4:	bl	2694c <main@@Base+0x3598>
   1c2e8:	cmp	r0, #0
   1c2ec:	bne	1c2fc <test_scan@@Base+0x1858>
   1c2f0:	ldr	r0, [sp, #20]
   1c2f4:	str	r0, [fp, #-4]
   1c2f8:	b	1c320 <test_scan@@Base+0x187c>
   1c2fc:	b	1c300 <test_scan@@Base+0x185c>
   1c300:	ldr	r0, [sp, #20]
   1c304:	add	r0, r0, #1
   1c308:	str	r0, [sp, #20]
   1c30c:	b	1c274 <test_scan@@Base+0x17d0>
   1c310:	ldr	r0, [pc, #20]	; 1c32c <test_scan@@Base+0x1888>
   1c314:	add	r0, pc, r0
   1c318:	ldr	r0, [r0]
   1c31c:	str	r0, [fp, #-4]
   1c320:	ldr	r0, [fp, #-4]
   1c324:	mov	sp, fp
   1c328:	pop	{fp, pc}
   1c32c:	andeq	ip, r2, r8, asr sp
   1c330:	push	{fp, lr}
   1c334:	mov	fp, sp
   1c338:	sub	sp, sp, #16
   1c33c:	str	r0, [fp, #-4]
   1c340:	str	r1, [sp, #8]
   1c344:	str	r2, [sp, #4]
   1c348:	str	r3, [sp]
   1c34c:	ldr	r0, [fp, #-4]
   1c350:	ldr	r1, [sp, #8]
   1c354:	ldr	r2, [sp, #4]
   1c358:	ldr	r3, [sp]
   1c35c:	bl	1c368 <test_scan@@Base+0x18c4>
   1c360:	mov	sp, fp
   1c364:	pop	{fp, pc}
   1c368:	push	{fp, lr}
   1c36c:	mov	fp, sp
   1c370:	sub	sp, sp, #40	; 0x28
   1c374:	str	r0, [fp, #-8]
   1c378:	str	r1, [fp, #-12]
   1c37c:	str	r2, [fp, #-16]
   1c380:	str	r3, [sp, #20]
   1c384:	ldr	r0, [fp, #-16]
   1c388:	ldr	r1, [fp, #-8]
   1c38c:	str	r0, [sp, #8]
   1c390:	mov	r0, r1
   1c394:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c398:	ldr	r1, [sp, #8]
   1c39c:	cmp	r1, r0
   1c3a0:	bcs	1c3b0 <test_scan@@Base+0x190c>
   1c3a4:	ldr	r0, [fp, #-16]
   1c3a8:	str	r0, [sp, #4]
   1c3ac:	b	1c3bc <test_scan@@Base+0x1918>
   1c3b0:	ldr	r0, [fp, #-8]
   1c3b4:	bl	17824 <verify_monster@@Base+0x1dd0>
   1c3b8:	str	r0, [sp, #4]
   1c3bc:	ldr	r0, [sp, #4]
   1c3c0:	str	r0, [sp, #12]
   1c3c4:	ldr	r0, [sp, #12]
   1c3c8:	mvn	r1, #0
   1c3cc:	add	r1, r0, r1
   1c3d0:	str	r1, [sp, #12]
   1c3d4:	ldr	r1, [fp, #-12]
   1c3d8:	cmp	r0, r1
   1c3dc:	bls	1c41c <test_scan@@Base+0x1978>
   1c3e0:	ldr	r0, [fp, #-8]
   1c3e4:	ldr	r1, [sp, #12]
   1c3e8:	bl	17874 <verify_monster@@Base+0x1e20>
   1c3ec:	bl	16d54 <verify_monster@@Base+0x1300>
   1c3f0:	str	r0, [sp, #16]
   1c3f4:	ldr	r0, [sp, #16]
   1c3f8:	ldr	r1, [sp, #20]
   1c3fc:	movw	r2, #0
   1c400:	bl	26a3c <main@@Base+0x3688>
   1c404:	cmp	r0, #0
   1c408:	bne	1c418 <test_scan@@Base+0x1974>
   1c40c:	ldr	r0, [sp, #12]
   1c410:	str	r0, [fp, #-4]
   1c414:	b	1c42c <test_scan@@Base+0x1988>
   1c418:	b	1c3c4 <test_scan@@Base+0x1920>
   1c41c:	ldr	r0, [pc, #20]	; 1c438 <test_scan@@Base+0x1994>
   1c420:	add	r0, pc, r0
   1c424:	ldr	r0, [r0]
   1c428:	str	r0, [fp, #-4]
   1c42c:	ldr	r0, [fp, #-4]
   1c430:	mov	sp, fp
   1c434:	pop	{fp, pc}
   1c438:	andeq	ip, r2, ip, asr #24
   1c43c:	push	{fp, lr}
   1c440:	mov	fp, sp
   1c444:	sub	sp, sp, #24
   1c448:	str	r0, [fp, #-4]
   1c44c:	str	r1, [fp, #-8]
   1c450:	movw	r0, #0
   1c454:	str	r0, [sp, #8]
   1c458:	ldr	r0, [fp, #-4]
   1c45c:	ldr	r1, [fp, #-8]
   1c460:	bl	1bdd0 <test_scan@@Base+0x132c>
   1c464:	str	r0, [sp, #12]
   1c468:	ldr	r0, [pc, #96]	; 1c4d0 <test_scan@@Base+0x1a2c>
   1c46c:	add	r0, pc, r0
   1c470:	ldr	r1, [sp, #12]
   1c474:	ldr	r0, [r0]
   1c478:	cmp	r1, r0
   1c47c:	beq	1c4c4 <test_scan@@Base+0x1a20>
   1c480:	ldr	r0, [sp, #8]
   1c484:	add	r0, r0, #1
   1c488:	str	r0, [sp, #8]
   1c48c:	ldr	r0, [pc, #64]	; 1c4d4 <test_scan@@Base+0x1a30>
   1c490:	add	r0, pc, r0
   1c494:	ldr	r1, [fp, #-4]
   1c498:	ldr	r2, [sp, #12]
   1c49c:	add	r2, r2, #1
   1c4a0:	ldr	r0, [r0]
   1c4a4:	ldr	r3, [fp, #-8]
   1c4a8:	str	r0, [sp, #4]
   1c4ac:	mov	r0, r1
   1c4b0:	mov	r1, r2
   1c4b4:	ldr	r2, [sp, #4]
   1c4b8:	bl	1be80 <test_scan@@Base+0x13dc>
   1c4bc:	str	r0, [sp, #12]
   1c4c0:	b	1c468 <test_scan@@Base+0x19c4>
   1c4c4:	ldr	r0, [sp, #8]
   1c4c8:	mov	sp, fp
   1c4cc:	pop	{fp, pc}
   1c4d0:	andeq	ip, r2, r0, lsl #24
   1c4d4:	andeq	ip, r2, r0, ror #23
   1c4d8:	push	{fp, lr}
   1c4dc:	mov	fp, sp
   1c4e0:	sub	sp, sp, #24
   1c4e4:	str	r0, [fp, #-8]
   1c4e8:	strb	r1, [fp, #-9]
   1c4ec:	movw	r0, #0
   1c4f0:	str	r0, [sp, #8]
   1c4f4:	ldr	r0, [sp, #8]
   1c4f8:	ldr	r1, [fp, #-8]
   1c4fc:	str	r0, [sp, #4]
   1c500:	mov	r0, r1
   1c504:	bl	17258 <verify_monster@@Base+0x1804>
   1c508:	ldr	r1, [sp, #4]
   1c50c:	cmp	r1, r0
   1c510:	bcs	1c588 <test_scan@@Base+0x1ae4>
   1c514:	ldr	r0, [fp, #-8]
   1c518:	ldr	r1, [sp, #8]
   1c51c:	bl	17278 <verify_monster@@Base+0x1824>
   1c520:	strb	r0, [fp, #-10]
   1c524:	ldrb	r0, [fp, #-10]
   1c528:	ldrb	r1, [fp, #-9]
   1c52c:	cmp	r0, r1
   1c530:	bge	1c540 <test_scan@@Base+0x1a9c>
   1c534:	mvn	r0, #0
   1c538:	str	r0, [sp]
   1c53c:	b	1c55c <test_scan@@Base+0x1ab8>
   1c540:	ldrb	r0, [fp, #-10]
   1c544:	ldrb	r1, [fp, #-9]
   1c548:	cmp	r0, r1
   1c54c:	movw	r0, #0
   1c550:	movgt	r0, #1
   1c554:	and	r0, r0, #1
   1c558:	str	r0, [sp]
   1c55c:	ldr	r0, [sp]
   1c560:	cmp	r0, #0
   1c564:	bne	1c574 <test_scan@@Base+0x1ad0>
   1c568:	ldr	r0, [sp, #8]
   1c56c:	str	r0, [fp, #-4]
   1c570:	b	1c598 <test_scan@@Base+0x1af4>
   1c574:	b	1c578 <test_scan@@Base+0x1ad4>
   1c578:	ldr	r0, [sp, #8]
   1c57c:	add	r0, r0, #1
   1c580:	str	r0, [sp, #8]
   1c584:	b	1c4f4 <test_scan@@Base+0x1a50>
   1c588:	ldr	r0, [pc, #20]	; 1c5a4 <test_scan@@Base+0x1b00>
   1c58c:	add	r0, pc, r0
   1c590:	ldr	r0, [r0]
   1c594:	str	r0, [fp, #-4]
   1c598:	ldr	r0, [fp, #-4]
   1c59c:	mov	sp, fp
   1c5a0:	pop	{fp, pc}
   1c5a4:	andeq	ip, r2, r0, ror #21
   1c5a8:	push	{fp, lr}
   1c5ac:	mov	fp, sp
   1c5b0:	sub	sp, sp, #40	; 0x28
   1c5b4:	str	r0, [fp, #-8]
   1c5b8:	str	r1, [fp, #-12]
   1c5bc:	str	r2, [fp, #-16]
   1c5c0:	strb	r3, [fp, #-17]	; 0xffffffef
   1c5c4:	ldr	r0, [fp, #-12]
   1c5c8:	str	r0, [sp, #16]
   1c5cc:	ldr	r0, [sp, #16]
   1c5d0:	ldr	r1, [fp, #-16]
   1c5d4:	ldr	r2, [fp, #-8]
   1c5d8:	str	r0, [sp, #12]
   1c5dc:	mov	r0, r2
   1c5e0:	str	r1, [sp, #8]
   1c5e4:	bl	17258 <verify_monster@@Base+0x1804>
   1c5e8:	ldr	r1, [sp, #8]
   1c5ec:	cmp	r1, r0
   1c5f0:	bcs	1c600 <test_scan@@Base+0x1b5c>
   1c5f4:	ldr	r0, [fp, #-16]
   1c5f8:	str	r0, [sp, #4]
   1c5fc:	b	1c60c <test_scan@@Base+0x1b68>
   1c600:	ldr	r0, [fp, #-8]
   1c604:	bl	17258 <verify_monster@@Base+0x1804>
   1c608:	str	r0, [sp, #4]
   1c60c:	ldr	r0, [sp, #4]
   1c610:	ldr	r1, [sp, #12]
   1c614:	cmp	r1, r0
   1c618:	bcs	1c690 <test_scan@@Base+0x1bec>
   1c61c:	ldr	r0, [fp, #-8]
   1c620:	ldr	r1, [sp, #16]
   1c624:	bl	17278 <verify_monster@@Base+0x1824>
   1c628:	strb	r0, [fp, #-18]	; 0xffffffee
   1c62c:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c630:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c634:	cmp	r0, r1
   1c638:	bge	1c648 <test_scan@@Base+0x1ba4>
   1c63c:	mvn	r0, #0
   1c640:	str	r0, [sp]
   1c644:	b	1c664 <test_scan@@Base+0x1bc0>
   1c648:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c64c:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c650:	cmp	r0, r1
   1c654:	movw	r0, #0
   1c658:	movgt	r0, #1
   1c65c:	and	r0, r0, #1
   1c660:	str	r0, [sp]
   1c664:	ldr	r0, [sp]
   1c668:	cmp	r0, #0
   1c66c:	bne	1c67c <test_scan@@Base+0x1bd8>
   1c670:	ldr	r0, [sp, #16]
   1c674:	str	r0, [fp, #-4]
   1c678:	b	1c6a0 <test_scan@@Base+0x1bfc>
   1c67c:	b	1c680 <test_scan@@Base+0x1bdc>
   1c680:	ldr	r0, [sp, #16]
   1c684:	add	r0, r0, #1
   1c688:	str	r0, [sp, #16]
   1c68c:	b	1c5cc <test_scan@@Base+0x1b28>
   1c690:	ldr	r0, [pc, #20]	; 1c6ac <test_scan@@Base+0x1c08>
   1c694:	add	r0, pc, r0
   1c698:	ldr	r0, [r0]
   1c69c:	str	r0, [fp, #-4]
   1c6a0:	ldr	r0, [fp, #-4]
   1c6a4:	mov	sp, fp
   1c6a8:	pop	{fp, pc}
   1c6ac:	ldrdeq	ip, [r2], -r8
   1c6b0:	push	{fp, lr}
   1c6b4:	mov	fp, sp
   1c6b8:	sub	sp, sp, #24
   1c6bc:	str	r0, [fp, #-8]
   1c6c0:	strb	r1, [fp, #-9]
   1c6c4:	ldr	r0, [fp, #-8]
   1c6c8:	bl	17258 <verify_monster@@Base+0x1804>
   1c6cc:	str	r0, [sp, #8]
   1c6d0:	ldr	r0, [sp, #8]
   1c6d4:	mvn	r1, #0
   1c6d8:	add	r1, r0, r1
   1c6dc:	str	r1, [sp, #8]
   1c6e0:	cmp	r0, #0
   1c6e4:	bls	1c74c <test_scan@@Base+0x1ca8>
   1c6e8:	ldr	r0, [fp, #-8]
   1c6ec:	ldr	r1, [sp, #8]
   1c6f0:	bl	17278 <verify_monster@@Base+0x1824>
   1c6f4:	strb	r0, [fp, #-10]
   1c6f8:	ldrb	r0, [fp, #-10]
   1c6fc:	ldrb	r1, [fp, #-9]
   1c700:	cmp	r0, r1
   1c704:	bge	1c714 <test_scan@@Base+0x1c70>
   1c708:	mvn	r0, #0
   1c70c:	str	r0, [sp, #4]
   1c710:	b	1c730 <test_scan@@Base+0x1c8c>
   1c714:	ldrb	r0, [fp, #-10]
   1c718:	ldrb	r1, [fp, #-9]
   1c71c:	cmp	r0, r1
   1c720:	movw	r0, #0
   1c724:	movgt	r0, #1
   1c728:	and	r0, r0, #1
   1c72c:	str	r0, [sp, #4]
   1c730:	ldr	r0, [sp, #4]
   1c734:	cmp	r0, #0
   1c738:	bne	1c748 <test_scan@@Base+0x1ca4>
   1c73c:	ldr	r0, [sp, #8]
   1c740:	str	r0, [fp, #-4]
   1c744:	b	1c75c <test_scan@@Base+0x1cb8>
   1c748:	b	1c6d0 <test_scan@@Base+0x1c2c>
   1c74c:	ldr	r0, [pc, #20]	; 1c768 <test_scan@@Base+0x1cc4>
   1c750:	add	r0, pc, r0
   1c754:	ldr	r0, [r0]
   1c758:	str	r0, [fp, #-4]
   1c75c:	ldr	r0, [fp, #-4]
   1c760:	mov	sp, fp
   1c764:	pop	{fp, pc}
   1c768:	andeq	ip, r2, ip, lsl r9
   1c76c:	push	{fp, lr}
   1c770:	mov	fp, sp
   1c774:	sub	sp, sp, #40	; 0x28
   1c778:	str	r0, [fp, #-8]
   1c77c:	str	r1, [fp, #-12]
   1c780:	str	r2, [fp, #-16]
   1c784:	strb	r3, [fp, #-17]	; 0xffffffef
   1c788:	ldr	r0, [fp, #-16]
   1c78c:	ldr	r1, [fp, #-8]
   1c790:	str	r0, [sp, #12]
   1c794:	mov	r0, r1
   1c798:	bl	17258 <verify_monster@@Base+0x1804>
   1c79c:	ldr	r1, [sp, #12]
   1c7a0:	cmp	r1, r0
   1c7a4:	bcs	1c7b4 <test_scan@@Base+0x1d10>
   1c7a8:	ldr	r0, [fp, #-16]
   1c7ac:	str	r0, [sp, #8]
   1c7b0:	b	1c7c0 <test_scan@@Base+0x1d1c>
   1c7b4:	ldr	r0, [fp, #-8]
   1c7b8:	bl	17258 <verify_monster@@Base+0x1804>
   1c7bc:	str	r0, [sp, #8]
   1c7c0:	ldr	r0, [sp, #8]
   1c7c4:	str	r0, [sp, #16]
   1c7c8:	ldr	r0, [sp, #16]
   1c7cc:	mvn	r1, #0
   1c7d0:	add	r1, r0, r1
   1c7d4:	str	r1, [sp, #16]
   1c7d8:	ldr	r1, [fp, #-12]
   1c7dc:	cmp	r0, r1
   1c7e0:	bls	1c848 <test_scan@@Base+0x1da4>
   1c7e4:	ldr	r0, [fp, #-8]
   1c7e8:	ldr	r1, [sp, #16]
   1c7ec:	bl	17278 <verify_monster@@Base+0x1824>
   1c7f0:	strb	r0, [fp, #-18]	; 0xffffffee
   1c7f4:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c7f8:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c7fc:	cmp	r0, r1
   1c800:	bge	1c810 <test_scan@@Base+0x1d6c>
   1c804:	mvn	r0, #0
   1c808:	str	r0, [sp, #4]
   1c80c:	b	1c82c <test_scan@@Base+0x1d88>
   1c810:	ldrb	r0, [fp, #-18]	; 0xffffffee
   1c814:	ldrb	r1, [fp, #-17]	; 0xffffffef
   1c818:	cmp	r0, r1
   1c81c:	movw	r0, #0
   1c820:	movgt	r0, #1
   1c824:	and	r0, r0, #1
   1c828:	str	r0, [sp, #4]
   1c82c:	ldr	r0, [sp, #4]
   1c830:	cmp	r0, #0
   1c834:	bne	1c844 <test_scan@@Base+0x1da0>
   1c838:	ldr	r0, [sp, #16]
   1c83c:	str	r0, [fp, #-4]
   1c840:	b	1c858 <test_scan@@Base+0x1db4>
   1c844:	b	1c7c8 <test_scan@@Base+0x1d24>
   1c848:	ldr	r0, [pc, #20]	; 1c864 <test_scan@@Base+0x1dc0>
   1c84c:	add	r0, pc, r0
   1c850:	ldr	r0, [r0]
   1c854:	str	r0, [fp, #-4]
   1c858:	ldr	r0, [fp, #-4]
   1c85c:	mov	sp, fp
   1c860:	pop	{fp, pc}
   1c864:	andeq	ip, r2, r0, lsr #16
   1c868:	push	{fp, lr}
   1c86c:	mov	fp, sp
   1c870:	sub	sp, sp, #24
   1c874:	str	r0, [fp, #-8]
   1c878:	str	r1, [sp, #12]
   1c87c:	movw	r0, #0
   1c880:	str	r0, [sp, #4]
   1c884:	ldr	r0, [sp, #4]
   1c888:	ldr	r1, [fp, #-8]
   1c88c:	str	r0, [sp]
   1c890:	mov	r0, r1
   1c894:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1c898:	ldr	r1, [sp]
   1c89c:	cmp	r1, r0
   1c8a0:	bcs	1c8ec <test_scan@@Base+0x1e48>
   1c8a4:	ldr	r0, [fp, #-8]
   1c8a8:	ldr	r1, [sp, #4]
   1c8ac:	bl	17a5c <verify_monster@@Base+0x2008>
   1c8b0:	str	r0, [sp, #8]
   1c8b4:	ldr	r0, [sp, #8]
   1c8b8:	ldr	r1, [sp, #12]
   1c8bc:	movw	r2, #0
   1c8c0:	bl	26a3c <main@@Base+0x3688>
   1c8c4:	cmp	r0, #0
   1c8c8:	bne	1c8d8 <test_scan@@Base+0x1e34>
   1c8cc:	ldr	r0, [sp, #4]
   1c8d0:	str	r0, [fp, #-4]
   1c8d4:	b	1c8fc <test_scan@@Base+0x1e58>
   1c8d8:	b	1c8dc <test_scan@@Base+0x1e38>
   1c8dc:	ldr	r0, [sp, #4]
   1c8e0:	add	r0, r0, #1
   1c8e4:	str	r0, [sp, #4]
   1c8e8:	b	1c884 <test_scan@@Base+0x1de0>
   1c8ec:	ldr	r0, [pc, #20]	; 1c908 <test_scan@@Base+0x1e64>
   1c8f0:	add	r0, pc, r0
   1c8f4:	ldr	r0, [r0]
   1c8f8:	str	r0, [fp, #-4]
   1c8fc:	ldr	r0, [fp, #-4]
   1c900:	mov	sp, fp
   1c904:	pop	{fp, pc}
   1c908:	andeq	ip, r2, ip, ror r7
   1c90c:	push	{fp, lr}
   1c910:	mov	fp, sp
   1c914:	sub	sp, sp, #40	; 0x28
   1c918:	str	r0, [fp, #-8]
   1c91c:	str	r1, [fp, #-12]
   1c920:	str	r2, [fp, #-16]
   1c924:	str	r3, [sp, #20]
   1c928:	ldr	r0, [fp, #-12]
   1c92c:	str	r0, [sp, #12]
   1c930:	ldr	r0, [sp, #12]
   1c934:	ldr	r1, [fp, #-16]
   1c938:	ldr	r2, [fp, #-8]
   1c93c:	str	r0, [sp, #8]
   1c940:	mov	r0, r2
   1c944:	str	r1, [sp, #4]
   1c948:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1c94c:	ldr	r1, [sp, #4]
   1c950:	cmp	r1, r0
   1c954:	bcs	1c964 <test_scan@@Base+0x1ec0>
   1c958:	ldr	r0, [fp, #-16]
   1c95c:	str	r0, [sp]
   1c960:	b	1c970 <test_scan@@Base+0x1ecc>
   1c964:	ldr	r0, [fp, #-8]
   1c968:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1c96c:	str	r0, [sp]
   1c970:	ldr	r0, [sp]
   1c974:	ldr	r1, [sp, #8]
   1c978:	cmp	r1, r0
   1c97c:	bcs	1c9c8 <test_scan@@Base+0x1f24>
   1c980:	ldr	r0, [fp, #-8]
   1c984:	ldr	r1, [sp, #12]
   1c988:	bl	17a5c <verify_monster@@Base+0x2008>
   1c98c:	str	r0, [sp, #16]
   1c990:	ldr	r0, [sp, #16]
   1c994:	ldr	r1, [sp, #20]
   1c998:	movw	r2, #0
   1c99c:	bl	26a3c <main@@Base+0x3688>
   1c9a0:	cmp	r0, #0
   1c9a4:	bne	1c9b4 <test_scan@@Base+0x1f10>
   1c9a8:	ldr	r0, [sp, #12]
   1c9ac:	str	r0, [fp, #-4]
   1c9b0:	b	1c9d8 <test_scan@@Base+0x1f34>
   1c9b4:	b	1c9b8 <test_scan@@Base+0x1f14>
   1c9b8:	ldr	r0, [sp, #12]
   1c9bc:	add	r0, r0, #1
   1c9c0:	str	r0, [sp, #12]
   1c9c4:	b	1c930 <test_scan@@Base+0x1e8c>
   1c9c8:	ldr	r0, [pc, #20]	; 1c9e4 <test_scan@@Base+0x1f40>
   1c9cc:	add	r0, pc, r0
   1c9d0:	ldr	r0, [r0]
   1c9d4:	str	r0, [fp, #-4]
   1c9d8:	ldr	r0, [fp, #-4]
   1c9dc:	mov	sp, fp
   1c9e0:	pop	{fp, pc}
   1c9e4:	andeq	ip, r2, r0, lsr #13
   1c9e8:	push	{fp, lr}
   1c9ec:	mov	fp, sp
   1c9f0:	sub	sp, sp, #32
   1c9f4:	str	r0, [fp, #-8]
   1c9f8:	str	r1, [fp, #-12]
   1c9fc:	str	r2, [sp, #16]
   1ca00:	movw	r0, #0
   1ca04:	str	r0, [sp, #8]
   1ca08:	ldr	r0, [sp, #8]
   1ca0c:	ldr	r1, [fp, #-8]
   1ca10:	str	r0, [sp, #4]
   1ca14:	mov	r0, r1
   1ca18:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1ca1c:	ldr	r1, [sp, #4]
   1ca20:	cmp	r1, r0
   1ca24:	bcs	1ca70 <test_scan@@Base+0x1fcc>
   1ca28:	ldr	r0, [fp, #-8]
   1ca2c:	ldr	r1, [sp, #8]
   1ca30:	bl	17a5c <verify_monster@@Base+0x2008>
   1ca34:	str	r0, [sp, #12]
   1ca38:	ldr	r0, [sp, #12]
   1ca3c:	ldr	r1, [fp, #-12]
   1ca40:	ldr	r2, [sp, #16]
   1ca44:	bl	2694c <main@@Base+0x3598>
   1ca48:	cmp	r0, #0
   1ca4c:	bne	1ca5c <test_scan@@Base+0x1fb8>
   1ca50:	ldr	r0, [sp, #8]
   1ca54:	str	r0, [fp, #-4]
   1ca58:	b	1ca80 <test_scan@@Base+0x1fdc>
   1ca5c:	b	1ca60 <test_scan@@Base+0x1fbc>
   1ca60:	ldr	r0, [sp, #8]
   1ca64:	add	r0, r0, #1
   1ca68:	str	r0, [sp, #8]
   1ca6c:	b	1ca08 <test_scan@@Base+0x1f64>
   1ca70:	ldr	r0, [pc, #20]	; 1ca8c <test_scan@@Base+0x1fe8>
   1ca74:	add	r0, pc, r0
   1ca78:	ldr	r0, [r0]
   1ca7c:	str	r0, [fp, #-4]
   1ca80:	ldr	r0, [fp, #-4]
   1ca84:	mov	sp, fp
   1ca88:	pop	{fp, pc}
   1ca8c:	strdeq	ip, [r2], -r8
   1ca90:	push	{fp, lr}
   1ca94:	mov	fp, sp
   1ca98:	sub	sp, sp, #48	; 0x30
   1ca9c:	ldr	ip, [fp, #8]
   1caa0:	str	r0, [fp, #-8]
   1caa4:	str	r1, [fp, #-12]
   1caa8:	str	r2, [fp, #-16]
   1caac:	str	r3, [fp, #-20]	; 0xffffffec
   1cab0:	ldr	r0, [fp, #-12]
   1cab4:	str	r0, [sp, #20]
   1cab8:	str	ip, [sp, #16]
   1cabc:	ldr	r0, [sp, #20]
   1cac0:	ldr	r1, [fp, #-16]
   1cac4:	ldr	r2, [fp, #-8]
   1cac8:	str	r0, [sp, #12]
   1cacc:	mov	r0, r2
   1cad0:	str	r1, [sp, #8]
   1cad4:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cad8:	ldr	r1, [sp, #8]
   1cadc:	cmp	r1, r0
   1cae0:	bcs	1caf0 <test_scan@@Base+0x204c>
   1cae4:	ldr	r0, [fp, #-16]
   1cae8:	str	r0, [sp, #4]
   1caec:	b	1cafc <test_scan@@Base+0x2058>
   1caf0:	ldr	r0, [fp, #-8]
   1caf4:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1caf8:	str	r0, [sp, #4]
   1cafc:	ldr	r0, [sp, #4]
   1cb00:	ldr	r1, [sp, #12]
   1cb04:	cmp	r1, r0
   1cb08:	bcs	1cb54 <test_scan@@Base+0x20b0>
   1cb0c:	ldr	r0, [fp, #-8]
   1cb10:	ldr	r1, [sp, #20]
   1cb14:	bl	17a5c <verify_monster@@Base+0x2008>
   1cb18:	str	r0, [sp, #24]
   1cb1c:	ldr	r0, [sp, #24]
   1cb20:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cb24:	ldr	r2, [fp, #8]
   1cb28:	bl	2694c <main@@Base+0x3598>
   1cb2c:	cmp	r0, #0
   1cb30:	bne	1cb40 <test_scan@@Base+0x209c>
   1cb34:	ldr	r0, [sp, #20]
   1cb38:	str	r0, [fp, #-4]
   1cb3c:	b	1cb64 <test_scan@@Base+0x20c0>
   1cb40:	b	1cb44 <test_scan@@Base+0x20a0>
   1cb44:	ldr	r0, [sp, #20]
   1cb48:	add	r0, r0, #1
   1cb4c:	str	r0, [sp, #20]
   1cb50:	b	1cabc <test_scan@@Base+0x2018>
   1cb54:	ldr	r0, [pc, #20]	; 1cb70 <test_scan@@Base+0x20cc>
   1cb58:	add	r0, pc, r0
   1cb5c:	ldr	r0, [r0]
   1cb60:	str	r0, [fp, #-4]
   1cb64:	ldr	r0, [fp, #-4]
   1cb68:	mov	sp, fp
   1cb6c:	pop	{fp, pc}
   1cb70:	andeq	ip, r2, r4, lsl r5
   1cb74:	push	{fp, lr}
   1cb78:	mov	fp, sp
   1cb7c:	sub	sp, sp, #24
   1cb80:	str	r0, [fp, #-8]
   1cb84:	str	r1, [sp, #12]
   1cb88:	ldr	r0, [fp, #-8]
   1cb8c:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cb90:	str	r0, [sp, #4]
   1cb94:	ldr	r0, [sp, #4]
   1cb98:	mvn	r1, #0
   1cb9c:	add	r1, r0, r1
   1cba0:	str	r1, [sp, #4]
   1cba4:	cmp	r0, #0
   1cba8:	bls	1cbe4 <test_scan@@Base+0x2140>
   1cbac:	ldr	r0, [fp, #-8]
   1cbb0:	ldr	r1, [sp, #4]
   1cbb4:	bl	17a5c <verify_monster@@Base+0x2008>
   1cbb8:	str	r0, [sp, #8]
   1cbbc:	ldr	r0, [sp, #8]
   1cbc0:	ldr	r1, [sp, #12]
   1cbc4:	movw	r2, #0
   1cbc8:	bl	26a3c <main@@Base+0x3688>
   1cbcc:	cmp	r0, #0
   1cbd0:	bne	1cbe0 <test_scan@@Base+0x213c>
   1cbd4:	ldr	r0, [sp, #4]
   1cbd8:	str	r0, [fp, #-4]
   1cbdc:	b	1cbf4 <test_scan@@Base+0x2150>
   1cbe0:	b	1cb94 <test_scan@@Base+0x20f0>
   1cbe4:	ldr	r0, [pc, #20]	; 1cc00 <test_scan@@Base+0x215c>
   1cbe8:	add	r0, pc, r0
   1cbec:	ldr	r0, [r0]
   1cbf0:	str	r0, [fp, #-4]
   1cbf4:	ldr	r0, [fp, #-4]
   1cbf8:	mov	sp, fp
   1cbfc:	pop	{fp, pc}
   1cc00:	andeq	ip, r2, r4, lsl #9
   1cc04:	push	{fp, lr}
   1cc08:	mov	fp, sp
   1cc0c:	sub	sp, sp, #40	; 0x28
   1cc10:	str	r0, [fp, #-8]
   1cc14:	str	r1, [fp, #-12]
   1cc18:	str	r2, [fp, #-16]
   1cc1c:	str	r3, [sp, #20]
   1cc20:	ldr	r0, [fp, #-16]
   1cc24:	ldr	r1, [fp, #-8]
   1cc28:	str	r0, [sp, #8]
   1cc2c:	mov	r0, r1
   1cc30:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cc34:	ldr	r1, [sp, #8]
   1cc38:	cmp	r1, r0
   1cc3c:	bcs	1cc4c <test_scan@@Base+0x21a8>
   1cc40:	ldr	r0, [fp, #-16]
   1cc44:	str	r0, [sp, #4]
   1cc48:	b	1cc58 <test_scan@@Base+0x21b4>
   1cc4c:	ldr	r0, [fp, #-8]
   1cc50:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cc54:	str	r0, [sp, #4]
   1cc58:	ldr	r0, [sp, #4]
   1cc5c:	str	r0, [sp, #12]
   1cc60:	ldr	r0, [sp, #12]
   1cc64:	mvn	r1, #0
   1cc68:	add	r1, r0, r1
   1cc6c:	str	r1, [sp, #12]
   1cc70:	ldr	r1, [fp, #-12]
   1cc74:	cmp	r0, r1
   1cc78:	bls	1ccb4 <test_scan@@Base+0x2210>
   1cc7c:	ldr	r0, [fp, #-8]
   1cc80:	ldr	r1, [sp, #12]
   1cc84:	bl	17a5c <verify_monster@@Base+0x2008>
   1cc88:	str	r0, [sp, #16]
   1cc8c:	ldr	r0, [sp, #16]
   1cc90:	ldr	r1, [sp, #20]
   1cc94:	movw	r2, #0
   1cc98:	bl	26a3c <main@@Base+0x3688>
   1cc9c:	cmp	r0, #0
   1cca0:	bne	1ccb0 <test_scan@@Base+0x220c>
   1cca4:	ldr	r0, [sp, #12]
   1cca8:	str	r0, [fp, #-4]
   1ccac:	b	1ccc4 <test_scan@@Base+0x2220>
   1ccb0:	b	1cc60 <test_scan@@Base+0x21bc>
   1ccb4:	ldr	r0, [pc, #20]	; 1ccd0 <test_scan@@Base+0x222c>
   1ccb8:	add	r0, pc, r0
   1ccbc:	ldr	r0, [r0]
   1ccc0:	str	r0, [fp, #-4]
   1ccc4:	ldr	r0, [fp, #-4]
   1ccc8:	mov	sp, fp
   1cccc:	pop	{fp, pc}
   1ccd0:			; <UNDEFINED> instruction: 0x0002c3b4
   1ccd4:	push	{fp, lr}
   1ccd8:	mov	fp, sp
   1ccdc:	sub	sp, sp, #24
   1cce0:	str	r0, [fp, #-8]
   1cce4:	str	r1, [sp, #12]
   1cce8:	str	r2, [sp, #8]
   1ccec:	ldr	r0, [fp, #-8]
   1ccf0:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1ccf4:	str	r0, [sp]
   1ccf8:	ldr	r0, [sp]
   1ccfc:	mvn	r1, #0
   1cd00:	add	r1, r0, r1
   1cd04:	str	r1, [sp]
   1cd08:	cmp	r0, #0
   1cd0c:	bls	1cd48 <test_scan@@Base+0x22a4>
   1cd10:	ldr	r0, [fp, #-8]
   1cd14:	ldr	r1, [sp]
   1cd18:	bl	17a5c <verify_monster@@Base+0x2008>
   1cd1c:	str	r0, [sp, #4]
   1cd20:	ldr	r0, [sp, #4]
   1cd24:	ldr	r1, [sp, #12]
   1cd28:	ldr	r2, [sp, #8]
   1cd2c:	bl	2694c <main@@Base+0x3598>
   1cd30:	cmp	r0, #0
   1cd34:	bne	1cd44 <test_scan@@Base+0x22a0>
   1cd38:	ldr	r0, [sp]
   1cd3c:	str	r0, [fp, #-4]
   1cd40:	b	1cd58 <test_scan@@Base+0x22b4>
   1cd44:	b	1ccf8 <test_scan@@Base+0x2254>
   1cd48:	ldr	r0, [pc, #20]	; 1cd64 <test_scan@@Base+0x22c0>
   1cd4c:	add	r0, pc, r0
   1cd50:	ldr	r0, [r0]
   1cd54:	str	r0, [fp, #-4]
   1cd58:	ldr	r0, [fp, #-4]
   1cd5c:	mov	sp, fp
   1cd60:	pop	{fp, pc}
   1cd64:	andeq	ip, r2, r0, lsr #6
   1cd68:	push	{fp, lr}
   1cd6c:	mov	fp, sp
   1cd70:	sub	sp, sp, #40	; 0x28
   1cd74:	ldr	ip, [fp, #8]
   1cd78:	str	r0, [fp, #-8]
   1cd7c:	str	r1, [fp, #-12]
   1cd80:	str	r2, [fp, #-16]
   1cd84:	str	r3, [sp, #20]
   1cd88:	ldr	r0, [fp, #-16]
   1cd8c:	ldr	r1, [fp, #-8]
   1cd90:	str	r0, [sp, #8]
   1cd94:	mov	r0, r1
   1cd98:	str	ip, [sp, #4]
   1cd9c:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cda0:	ldr	r1, [sp, #8]
   1cda4:	cmp	r1, r0
   1cda8:	bcs	1cdb8 <test_scan@@Base+0x2314>
   1cdac:	ldr	r0, [fp, #-16]
   1cdb0:	str	r0, [sp]
   1cdb4:	b	1cdc4 <test_scan@@Base+0x2320>
   1cdb8:	ldr	r0, [fp, #-8]
   1cdbc:	bl	17a0c <verify_monster@@Base+0x1fb8>
   1cdc0:	str	r0, [sp]
   1cdc4:	ldr	r0, [sp]
   1cdc8:	str	r0, [sp, #12]
   1cdcc:	ldr	r0, [sp, #12]
   1cdd0:	mvn	r1, #0
   1cdd4:	add	r1, r0, r1
   1cdd8:	str	r1, [sp, #12]
   1cddc:	ldr	r1, [fp, #-12]
   1cde0:	cmp	r0, r1
   1cde4:	bls	1ce20 <test_scan@@Base+0x237c>
   1cde8:	ldr	r0, [fp, #-8]
   1cdec:	ldr	r1, [sp, #12]
   1cdf0:	bl	17a5c <verify_monster@@Base+0x2008>
   1cdf4:	str	r0, [sp, #16]
   1cdf8:	ldr	r0, [sp, #16]
   1cdfc:	ldr	r1, [sp, #20]
   1ce00:	ldr	r2, [fp, #8]
   1ce04:	bl	2694c <main@@Base+0x3598>
   1ce08:	cmp	r0, #0
   1ce0c:	bne	1ce1c <test_scan@@Base+0x2378>
   1ce10:	ldr	r0, [sp, #12]
   1ce14:	str	r0, [fp, #-4]
   1ce18:	b	1ce30 <test_scan@@Base+0x238c>
   1ce1c:	b	1cdcc <test_scan@@Base+0x2328>
   1ce20:	ldr	r0, [pc, #20]	; 1ce3c <test_scan@@Base+0x2398>
   1ce24:	add	r0, pc, r0
   1ce28:	ldr	r0, [r0]
   1ce2c:	str	r0, [fp, #-4]
   1ce30:	ldr	r0, [fp, #-4]
   1ce34:	mov	sp, fp
   1ce38:	pop	{fp, pc}
   1ce3c:	andeq	ip, r2, r8, asr #4
   1ce40:	push	{fp, lr}
   1ce44:	mov	fp, sp
   1ce48:	sub	sp, sp, #24
   1ce4c:	str	r0, [fp, #-8]
   1ce50:	strh	r1, [fp, #-10]
   1ce54:	movw	r0, #0
   1ce58:	str	r0, [sp, #8]
   1ce5c:	ldr	r0, [sp, #8]
   1ce60:	ldr	r1, [fp, #-8]
   1ce64:	str	r0, [sp, #4]
   1ce68:	mov	r0, r1
   1ce6c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1ce70:	ldr	r1, [sp, #4]
   1ce74:	cmp	r1, r0
   1ce78:	bcs	1cef4 <test_scan@@Base+0x2450>
   1ce7c:	ldr	r0, [fp, #-8]
   1ce80:	ldr	r1, [sp, #8]
   1ce84:	bl	17874 <verify_monster@@Base+0x1e20>
   1ce88:	bl	13294 <verify_empty_monster@@Base+0x32c>
   1ce8c:	strh	r0, [sp, #12]
   1ce90:	ldrsh	r0, [sp, #12]
   1ce94:	ldrsh	r1, [fp, #-10]
   1ce98:	cmp	r0, r1
   1ce9c:	bge	1ceac <test_scan@@Base+0x2408>
   1cea0:	mvn	r0, #0
   1cea4:	str	r0, [sp]
   1cea8:	b	1cec8 <test_scan@@Base+0x2424>
   1ceac:	ldrsh	r0, [sp, #12]
   1ceb0:	ldrsh	r1, [fp, #-10]
   1ceb4:	cmp	r0, r1
   1ceb8:	movw	r0, #0
   1cebc:	movgt	r0, #1
   1cec0:	and	r0, r0, #1
   1cec4:	str	r0, [sp]
   1cec8:	ldr	r0, [sp]
   1cecc:	cmp	r0, #0
   1ced0:	bne	1cee0 <test_scan@@Base+0x243c>
   1ced4:	ldr	r0, [sp, #8]
   1ced8:	str	r0, [fp, #-4]
   1cedc:	b	1cf04 <test_scan@@Base+0x2460>
   1cee0:	b	1cee4 <test_scan@@Base+0x2440>
   1cee4:	ldr	r0, [sp, #8]
   1cee8:	add	r0, r0, #1
   1ceec:	str	r0, [sp, #8]
   1cef0:	b	1ce5c <test_scan@@Base+0x23b8>
   1cef4:	ldr	r0, [pc, #20]	; 1cf10 <test_scan@@Base+0x246c>
   1cef8:	add	r0, pc, r0
   1cefc:	ldr	r0, [r0]
   1cf00:	str	r0, [fp, #-4]
   1cf04:	ldr	r0, [fp, #-4]
   1cf08:	mov	sp, fp
   1cf0c:	pop	{fp, pc}
   1cf10:	andeq	ip, r2, r4, ror r1
   1cf14:	push	{fp, lr}
   1cf18:	mov	fp, sp
   1cf1c:	sub	sp, sp, #40	; 0x28
   1cf20:	str	r0, [fp, #-8]
   1cf24:	str	r1, [fp, #-12]
   1cf28:	str	r2, [fp, #-16]
   1cf2c:	strh	r3, [fp, #-18]	; 0xffffffee
   1cf30:	ldr	r0, [fp, #-12]
   1cf34:	str	r0, [sp, #16]
   1cf38:	ldr	r0, [sp, #16]
   1cf3c:	ldr	r1, [fp, #-16]
   1cf40:	ldr	r2, [fp, #-8]
   1cf44:	str	r0, [sp, #12]
   1cf48:	mov	r0, r2
   1cf4c:	str	r1, [sp, #8]
   1cf50:	bl	17824 <verify_monster@@Base+0x1dd0>
   1cf54:	ldr	r1, [sp, #8]
   1cf58:	cmp	r1, r0
   1cf5c:	bcs	1cf6c <test_scan@@Base+0x24c8>
   1cf60:	ldr	r0, [fp, #-16]
   1cf64:	str	r0, [sp, #4]
   1cf68:	b	1cf78 <test_scan@@Base+0x24d4>
   1cf6c:	ldr	r0, [fp, #-8]
   1cf70:	bl	17824 <verify_monster@@Base+0x1dd0>
   1cf74:	str	r0, [sp, #4]
   1cf78:	ldr	r0, [sp, #4]
   1cf7c:	ldr	r1, [sp, #12]
   1cf80:	cmp	r1, r0
   1cf84:	bcs	1d000 <test_scan@@Base+0x255c>
   1cf88:	ldr	r0, [fp, #-8]
   1cf8c:	ldr	r1, [sp, #16]
   1cf90:	bl	17874 <verify_monster@@Base+0x1e20>
   1cf94:	bl	13294 <verify_empty_monster@@Base+0x32c>
   1cf98:	strh	r0, [sp, #20]
   1cf9c:	ldrsh	r0, [sp, #20]
   1cfa0:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cfa4:	cmp	r0, r1
   1cfa8:	bge	1cfb8 <test_scan@@Base+0x2514>
   1cfac:	mvn	r0, #0
   1cfb0:	str	r0, [sp]
   1cfb4:	b	1cfd4 <test_scan@@Base+0x2530>
   1cfb8:	ldrsh	r0, [sp, #20]
   1cfbc:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1cfc0:	cmp	r0, r1
   1cfc4:	movw	r0, #0
   1cfc8:	movgt	r0, #1
   1cfcc:	and	r0, r0, #1
   1cfd0:	str	r0, [sp]
   1cfd4:	ldr	r0, [sp]
   1cfd8:	cmp	r0, #0
   1cfdc:	bne	1cfec <test_scan@@Base+0x2548>
   1cfe0:	ldr	r0, [sp, #16]
   1cfe4:	str	r0, [fp, #-4]
   1cfe8:	b	1d010 <test_scan@@Base+0x256c>
   1cfec:	b	1cff0 <test_scan@@Base+0x254c>
   1cff0:	ldr	r0, [sp, #16]
   1cff4:	add	r0, r0, #1
   1cff8:	str	r0, [sp, #16]
   1cffc:	b	1cf38 <test_scan@@Base+0x2494>
   1d000:	ldr	r0, [pc, #20]	; 1d01c <test_scan@@Base+0x2578>
   1d004:	add	r0, pc, r0
   1d008:	ldr	r0, [r0]
   1d00c:	str	r0, [fp, #-4]
   1d010:	ldr	r0, [fp, #-4]
   1d014:	mov	sp, fp
   1d018:	pop	{fp, pc}
   1d01c:	andeq	ip, r2, r8, rrx
   1d020:	push	{fp, lr}
   1d024:	mov	fp, sp
   1d028:	sub	sp, sp, #24
   1d02c:	str	r0, [fp, #-8]
   1d030:	strh	r1, [fp, #-10]
   1d034:	ldr	r0, [fp, #-8]
   1d038:	bl	17824 <verify_monster@@Base+0x1dd0>
   1d03c:	str	r0, [sp, #8]
   1d040:	ldr	r0, [sp, #8]
   1d044:	mvn	r1, #0
   1d048:	add	r1, r0, r1
   1d04c:	str	r1, [sp, #8]
   1d050:	cmp	r0, #0
   1d054:	bls	1d0c0 <test_scan@@Base+0x261c>
   1d058:	ldr	r0, [fp, #-8]
   1d05c:	ldr	r1, [sp, #8]
   1d060:	bl	17874 <verify_monster@@Base+0x1e20>
   1d064:	bl	13294 <verify_empty_monster@@Base+0x32c>
   1d068:	strh	r0, [sp, #12]
   1d06c:	ldrsh	r0, [sp, #12]
   1d070:	ldrsh	r1, [fp, #-10]
   1d074:	cmp	r0, r1
   1d078:	bge	1d088 <test_scan@@Base+0x25e4>
   1d07c:	mvn	r0, #0
   1d080:	str	r0, [sp, #4]
   1d084:	b	1d0a4 <test_scan@@Base+0x2600>
   1d088:	ldrsh	r0, [sp, #12]
   1d08c:	ldrsh	r1, [fp, #-10]
   1d090:	cmp	r0, r1
   1d094:	movw	r0, #0
   1d098:	movgt	r0, #1
   1d09c:	and	r0, r0, #1
   1d0a0:	str	r0, [sp, #4]
   1d0a4:	ldr	r0, [sp, #4]
   1d0a8:	cmp	r0, #0
   1d0ac:	bne	1d0bc <test_scan@@Base+0x2618>
   1d0b0:	ldr	r0, [sp, #8]
   1d0b4:	str	r0, [fp, #-4]
   1d0b8:	b	1d0d0 <test_scan@@Base+0x262c>
   1d0bc:	b	1d040 <test_scan@@Base+0x259c>
   1d0c0:	ldr	r0, [pc, #20]	; 1d0dc <test_scan@@Base+0x2638>
   1d0c4:	add	r0, pc, r0
   1d0c8:	ldr	r0, [r0]
   1d0cc:	str	r0, [fp, #-4]
   1d0d0:	ldr	r0, [fp, #-4]
   1d0d4:	mov	sp, fp
   1d0d8:	pop	{fp, pc}
   1d0dc:	andeq	fp, r2, r8, lsr #31
   1d0e0:	push	{fp, lr}
   1d0e4:	mov	fp, sp
   1d0e8:	sub	sp, sp, #40	; 0x28
   1d0ec:	str	r0, [fp, #-8]
   1d0f0:	str	r1, [fp, #-12]
   1d0f4:	str	r2, [fp, #-16]
   1d0f8:	strh	r3, [fp, #-18]	; 0xffffffee
   1d0fc:	ldr	r0, [fp, #-16]
   1d100:	ldr	r1, [fp, #-8]
   1d104:	str	r0, [sp, #12]
   1d108:	mov	r0, r1
   1d10c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1d110:	ldr	r1, [sp, #12]
   1d114:	cmp	r1, r0
   1d118:	bcs	1d128 <test_scan@@Base+0x2684>
   1d11c:	ldr	r0, [fp, #-16]
   1d120:	str	r0, [sp, #8]
   1d124:	b	1d134 <test_scan@@Base+0x2690>
   1d128:	ldr	r0, [fp, #-8]
   1d12c:	bl	17824 <verify_monster@@Base+0x1dd0>
   1d130:	str	r0, [sp, #8]
   1d134:	ldr	r0, [sp, #8]
   1d138:	str	r0, [sp, #16]
   1d13c:	ldr	r0, [sp, #16]
   1d140:	mvn	r1, #0
   1d144:	add	r1, r0, r1
   1d148:	str	r1, [sp, #16]
   1d14c:	ldr	r1, [fp, #-12]
   1d150:	cmp	r0, r1
   1d154:	bls	1d1c0 <test_scan@@Base+0x271c>
   1d158:	ldr	r0, [fp, #-8]
   1d15c:	ldr	r1, [sp, #16]
   1d160:	bl	17874 <verify_monster@@Base+0x1e20>
   1d164:	bl	13294 <verify_empty_monster@@Base+0x32c>
   1d168:	strh	r0, [sp, #20]
   1d16c:	ldrsh	r0, [sp, #20]
   1d170:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1d174:	cmp	r0, r1
   1d178:	bge	1d188 <test_scan@@Base+0x26e4>
   1d17c:	mvn	r0, #0
   1d180:	str	r0, [sp, #4]
   1d184:	b	1d1a4 <test_scan@@Base+0x2700>
   1d188:	ldrsh	r0, [sp, #20]
   1d18c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1d190:	cmp	r0, r1
   1d194:	movw	r0, #0
   1d198:	movgt	r0, #1
   1d19c:	and	r0, r0, #1
   1d1a0:	str	r0, [sp, #4]
   1d1a4:	ldr	r0, [sp, #4]
   1d1a8:	cmp	r0, #0
   1d1ac:	bne	1d1bc <test_scan@@Base+0x2718>
   1d1b0:	ldr	r0, [sp, #16]
   1d1b4:	str	r0, [fp, #-4]
   1d1b8:	b	1d1d0 <test_scan@@Base+0x272c>
   1d1bc:	b	1d13c <test_scan@@Base+0x2698>
   1d1c0:	ldr	r0, [pc, #20]	; 1d1dc <test_scan@@Base+0x2738>
   1d1c4:	add	r0, pc, r0
   1d1c8:	ldr	r0, [r0]
   1d1cc:	str	r0, [fp, #-4]
   1d1d0:	ldr	r0, [fp, #-4]
   1d1d4:	mov	sp, fp
   1d1d8:	pop	{fp, pc}
   1d1dc:	andeq	fp, r2, r8, lsr #29

0001d1e0 <test_basic_sort@@Base>:
   1d1e0:	push	{fp, lr}
   1d1e4:	mov	fp, sp
   1d1e8:	sub	sp, sp, #88	; 0x58
   1d1ec:	ldr	r1, [pc, #580]	; 1d438 <test_basic_sort@@Base+0x258>
   1d1f0:	add	r1, pc, r1
   1d1f4:	ldr	r2, [pc, #576]	; 1d43c <test_basic_sort@@Base+0x25c>
   1d1f8:	add	r2, pc, r2
   1d1fc:	str	r0, [fp, #-8]
   1d200:	ldrb	r0, [r2]
   1d204:	strb	r0, [fp, #-35]	; 0xffffffdd
   1d208:	ldrb	r0, [r2, #1]
   1d20c:	strb	r0, [fp, #-34]	; 0xffffffde
   1d210:	ldrb	r0, [r2, #2]
   1d214:	strb	r0, [fp, #-33]	; 0xffffffdf
   1d218:	ldrb	r0, [r2, #3]
   1d21c:	strb	r0, [fp, #-32]	; 0xffffffe0
   1d220:	ldrb	r0, [r2, #4]
   1d224:	strb	r0, [fp, #-31]	; 0xffffffe1
   1d228:	ldrb	r0, [r2, #5]
   1d22c:	strb	r0, [fp, #-30]	; 0xffffffe2
   1d230:	ldrb	r0, [r2, #6]
   1d234:	strb	r0, [fp, #-29]	; 0xffffffe3
   1d238:	ldrb	r0, [r1]
   1d23c:	strb	r0, [fp, #-42]	; 0xffffffd6
   1d240:	ldrb	r0, [r1, #1]
   1d244:	strb	r0, [fp, #-41]	; 0xffffffd7
   1d248:	ldrb	r0, [r1, #2]
   1d24c:	strb	r0, [fp, #-40]	; 0xffffffd8
   1d250:	ldrb	r0, [r1, #3]
   1d254:	strb	r0, [fp, #-39]	; 0xffffffd9
   1d258:	ldrb	r0, [r1, #4]
   1d25c:	strb	r0, [fp, #-38]	; 0xffffffda
   1d260:	ldrb	r0, [r1, #5]
   1d264:	strb	r0, [fp, #-37]	; 0xffffffdb
   1d268:	ldrb	r0, [r1, #6]
   1d26c:	strb	r0, [fp, #-36]	; 0xffffffdc
   1d270:	ldr	r0, [fp, #-8]
   1d274:	bl	28b78 <flatcc_builder_reset@@Base>
   1d278:	ldr	r1, [fp, #-8]
   1d27c:	str	r0, [sp, #40]	; 0x28
   1d280:	mov	r0, r1
   1d284:	bl	18e74 <gen_monster@@Base+0x890>
   1d288:	ldr	r1, [pc, #420]	; 1d434 <test_basic_sort@@Base+0x254>
   1d28c:	add	r1, pc, r1
   1d290:	ldr	r2, [fp, #-8]
   1d294:	str	r0, [sp, #36]	; 0x24
   1d298:	mov	r0, r2
   1d29c:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1d2a0:	sub	r1, fp, #35	; 0x23
   1d2a4:	ldr	r2, [fp, #-8]
   1d2a8:	str	r0, [sp, #32]
   1d2ac:	mov	r0, r2
   1d2b0:	movw	r2, #7
   1d2b4:	bl	19014 <gen_monster@@Base+0xa30>
   1d2b8:	ldr	r1, [fp, #-8]
   1d2bc:	str	r0, [sp, #28]
   1d2c0:	mov	r0, r1
   1d2c4:	bl	19a24 <gen_monster@@Base+0x1440>
   1d2c8:	ldr	r1, [fp, #-8]
   1d2cc:	str	r0, [sp, #24]
   1d2d0:	mov	r0, r1
   1d2d4:	sub	r1, fp, #28
   1d2d8:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   1d2dc:	str	r0, [fp, #-24]	; 0xffffffe8
   1d2e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d2e4:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1d2e8:	str	r0, [fp, #-12]
   1d2ec:	ldr	r0, [fp, #-12]
   1d2f0:	bl	17150 <verify_monster@@Base+0x16fc>
   1d2f4:	str	r0, [fp, #-16]
   1d2f8:	ldr	r0, [fp, #-16]
   1d2fc:	str	r0, [fp, #-20]	; 0xffffffec
   1d300:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d304:	bl	1d454 <test_basic_sort@@Base+0x274>
   1d308:	ldr	r0, [fp, #-16]
   1d30c:	bl	17258 <verify_monster@@Base+0x1804>
   1d310:	cmp	r0, #7
   1d314:	bne	1d31c <test_basic_sort@@Base+0x13c>
   1d318:	b	1d33c <test_basic_sort@@Base+0x15c>
   1d31c:	ldr	r0, [pc, #284]	; 1d440 <test_basic_sort@@Base+0x260>
   1d320:	add	r0, pc, r0
   1d324:	ldr	r1, [pc, #280]	; 1d444 <test_basic_sort@@Base+0x264>
   1d328:	add	r1, pc, r1
   1d32c:	ldr	r2, [pc, #276]	; 1d448 <test_basic_sort@@Base+0x268>
   1d330:	add	r3, pc, r2
   1d334:	movw	r2, #1552	; 0x610
   1d338:	bl	12e68 <__assert_fail@plt>
   1d33c:	movw	r0, #0
   1d340:	strb	r0, [sp, #44]	; 0x2c
   1d344:	ldrb	r0, [sp, #44]	; 0x2c
   1d348:	ldr	r1, [fp, #-16]
   1d34c:	str	r0, [sp, #20]
   1d350:	mov	r0, r1
   1d354:	bl	17258 <verify_monster@@Base+0x1804>
   1d358:	ldr	r1, [sp, #20]
   1d35c:	cmp	r1, r0
   1d360:	bcs	1d420 <test_basic_sort@@Base+0x240>
   1d364:	ldr	r0, [fp, #-16]
   1d368:	ldrb	r1, [sp, #44]	; 0x2c
   1d36c:	bl	17278 <verify_monster@@Base+0x1824>
   1d370:	strb	r0, [fp, #-43]	; 0xffffffd5
   1d374:	ldrb	r0, [fp, #-43]	; 0xffffffd5
   1d378:	ldrb	r1, [sp, #44]	; 0x2c
   1d37c:	sub	lr, fp, #42	; 0x2a
   1d380:	add	r1, lr, r1
   1d384:	ldrb	r1, [r1]
   1d388:	cmp	r0, r1
   1d38c:	beq	1d3ac <test_basic_sort@@Base+0x1cc>
   1d390:	ldr	r0, [pc, #184]	; 1d450 <test_basic_sort@@Base+0x270>
   1d394:	add	r0, pc, r0
   1d398:	bl	12d9c <printf@plt>
   1d39c:	mvn	lr, #0
   1d3a0:	str	lr, [fp, #-4]
   1d3a4:	str	r0, [sp, #16]
   1d3a8:	b	1d428 <test_basic_sort@@Base+0x248>
   1d3ac:	ldr	r0, [fp, #-16]
   1d3b0:	ldrb	r1, [fp, #-43]	; 0xffffffd5
   1d3b4:	bl	1d474 <test_basic_sort@@Base+0x294>
   1d3b8:	ldrb	r1, [sp, #44]	; 0x2c
   1d3bc:	cmp	r1, #3
   1d3c0:	str	r0, [sp, #12]
   1d3c4:	bne	1d3d4 <test_basic_sort@@Base+0x1f4>
   1d3c8:	movw	r0, #2
   1d3cc:	str	r0, [sp, #8]
   1d3d0:	b	1d3dc <test_basic_sort@@Base+0x1fc>
   1d3d4:	ldrb	r0, [sp, #44]	; 0x2c
   1d3d8:	str	r0, [sp, #8]
   1d3dc:	ldr	r0, [sp, #8]
   1d3e0:	ldr	r1, [sp, #12]
   1d3e4:	cmp	r1, r0
   1d3e8:	beq	1d408 <test_basic_sort@@Base+0x228>
   1d3ec:	ldr	r0, [pc, #88]	; 1d44c <test_basic_sort@@Base+0x26c>
   1d3f0:	add	r0, pc, r0
   1d3f4:	bl	12d9c <printf@plt>
   1d3f8:	mvn	lr, #0
   1d3fc:	str	lr, [fp, #-4]
   1d400:	str	r0, [sp, #4]
   1d404:	b	1d428 <test_basic_sort@@Base+0x248>
   1d408:	b	1d40c <test_basic_sort@@Base+0x22c>
   1d40c:	ldrb	r0, [sp, #44]	; 0x2c
   1d410:	movw	r1, #1
   1d414:	add	r0, r0, r1
   1d418:	strb	r0, [sp, #44]	; 0x2c
   1d41c:	b	1d344 <test_basic_sort@@Base+0x164>
   1d420:	movw	r0, #0
   1d424:	str	r0, [fp, #-4]
   1d428:	ldr	r0, [fp, #-4]
   1d42c:	mov	sp, fp
   1d430:	pop	{fp, pc}
   1d434:	andeq	r4, r1, pc, lsl fp
   1d438:	andeq	r9, r1, sp, ror #8
   1d43c:	andeq	r9, r1, lr, asr r4
   1d440:	andeq	r6, r1, pc, ror #3
   1d444:	andeq	r5, r1, fp, lsl r3
   1d448:	andeq	r6, r1, sp, lsl #4
   1d44c:	andeq	r6, r1, fp, lsl #3
   1d450:	ldrdeq	r6, [r1], -r1
   1d454:	push	{fp, lr}
   1d458:	mov	fp, sp
   1d45c:	sub	sp, sp, #8
   1d460:	str	r0, [sp, #4]
   1d464:	ldr	r0, [sp, #4]
   1d468:	bl	26b14 <main@@Base+0x3760>
   1d46c:	mov	sp, fp
   1d470:	pop	{fp, pc}
   1d474:	push	{fp, lr}
   1d478:	mov	fp, sp
   1d47c:	sub	sp, sp, #32
   1d480:	str	r0, [fp, #-8]
   1d484:	strb	r1, [fp, #-9]
   1d488:	movw	r0, #0
   1d48c:	str	r0, [sp, #16]
   1d490:	ldr	r0, [fp, #-8]
   1d494:	bl	17258 <verify_monster@@Base+0x1804>
   1d498:	str	r0, [sp, #12]
   1d49c:	cmp	r0, #0
   1d4a0:	bne	1d4b8 <test_basic_sort@@Base+0x2d8>
   1d4a4:	ldr	r0, [pc, #328]	; 1d5f4 <test_basic_sort@@Base+0x414>
   1d4a8:	add	r0, pc, r0
   1d4ac:	ldr	r0, [r0]
   1d4b0:	str	r0, [fp, #-4]
   1d4b4:	b	1d5e8 <test_basic_sort@@Base+0x408>
   1d4b8:	ldr	r0, [sp, #12]
   1d4bc:	mvn	r1, #0
   1d4c0:	add	r0, r0, r1
   1d4c4:	str	r0, [sp, #12]
   1d4c8:	ldr	r0, [sp, #16]
   1d4cc:	ldr	r1, [sp, #12]
   1d4d0:	cmp	r0, r1
   1d4d4:	bcs	1d564 <test_basic_sort@@Base+0x384>
   1d4d8:	ldr	r0, [sp, #16]
   1d4dc:	ldr	r1, [sp, #12]
   1d4e0:	ldr	r2, [sp, #16]
   1d4e4:	sub	r1, r1, r2
   1d4e8:	lsr	r1, r1, #1
   1d4ec:	add	r0, r0, r1
   1d4f0:	str	r0, [sp, #8]
   1d4f4:	ldr	r0, [fp, #-8]
   1d4f8:	ldr	r1, [sp, #8]
   1d4fc:	bl	17278 <verify_monster@@Base+0x1824>
   1d500:	strb	r0, [fp, #-10]
   1d504:	ldrb	r0, [fp, #-10]
   1d508:	ldrb	r1, [fp, #-9]
   1d50c:	cmp	r0, r1
   1d510:	bge	1d520 <test_basic_sort@@Base+0x340>
   1d514:	mvn	r0, #0
   1d518:	str	r0, [sp, #4]
   1d51c:	b	1d53c <test_basic_sort@@Base+0x35c>
   1d520:	ldrb	r0, [fp, #-10]
   1d524:	ldrb	r1, [fp, #-9]
   1d528:	cmp	r0, r1
   1d52c:	movw	r0, #0
   1d530:	movgt	r0, #1
   1d534:	and	r0, r0, #1
   1d538:	str	r0, [sp, #4]
   1d53c:	ldr	r0, [sp, #4]
   1d540:	cmp	r0, #0
   1d544:	bge	1d558 <test_basic_sort@@Base+0x378>
   1d548:	ldr	r0, [sp, #8]
   1d54c:	add	r0, r0, #1
   1d550:	str	r0, [sp, #16]
   1d554:	b	1d560 <test_basic_sort@@Base+0x380>
   1d558:	ldr	r0, [sp, #8]
   1d55c:	str	r0, [sp, #12]
   1d560:	b	1d4c8 <test_basic_sort@@Base+0x2e8>
   1d564:	ldr	r0, [sp, #16]
   1d568:	ldr	r1, [sp, #12]
   1d56c:	cmp	r0, r1
   1d570:	bne	1d5d8 <test_basic_sort@@Base+0x3f8>
   1d574:	ldr	r0, [fp, #-8]
   1d578:	ldr	r1, [sp, #16]
   1d57c:	bl	17278 <verify_monster@@Base+0x1824>
   1d580:	strb	r0, [fp, #-10]
   1d584:	ldrb	r0, [fp, #-10]
   1d588:	ldrb	r1, [fp, #-9]
   1d58c:	cmp	r0, r1
   1d590:	bge	1d5a0 <test_basic_sort@@Base+0x3c0>
   1d594:	mvn	r0, #0
   1d598:	str	r0, [sp]
   1d59c:	b	1d5bc <test_basic_sort@@Base+0x3dc>
   1d5a0:	ldrb	r0, [fp, #-10]
   1d5a4:	ldrb	r1, [fp, #-9]
   1d5a8:	cmp	r0, r1
   1d5ac:	movw	r0, #0
   1d5b0:	movgt	r0, #1
   1d5b4:	and	r0, r0, #1
   1d5b8:	str	r0, [sp]
   1d5bc:	ldr	r0, [sp]
   1d5c0:	cmp	r0, #0
   1d5c4:	bne	1d5d4 <test_basic_sort@@Base+0x3f4>
   1d5c8:	ldr	r0, [sp, #16]
   1d5cc:	str	r0, [fp, #-4]
   1d5d0:	b	1d5e8 <test_basic_sort@@Base+0x408>
   1d5d4:	b	1d5d8 <test_basic_sort@@Base+0x3f8>
   1d5d8:	ldr	r0, [pc, #24]	; 1d5f8 <test_basic_sort@@Base+0x418>
   1d5dc:	add	r0, pc, r0
   1d5e0:	ldr	r0, [r0]
   1d5e4:	str	r0, [fp, #-4]
   1d5e8:	ldr	r0, [fp, #-4]
   1d5ec:	mov	sp, fp
   1d5f0:	pop	{fp, pc}
   1d5f4:	andeq	fp, r2, r4, asr #23
   1d5f8:	muleq	r2, r0, sl

0001d5fc <test_clone_slice@@Base>:
   1d5fc:	push	{r4, r5, fp, lr}
   1d600:	add	fp, sp, #8
   1d604:	sub	sp, sp, #272	; 0x110
   1d608:	ldr	r1, [pc, #2104]	; 1de48 <test_clone_slice@@Base+0x84c>
   1d60c:	add	r1, pc, r1
   1d610:	str	r0, [fp, #-12]
   1d614:	mvn	r0, #0
   1d618:	str	r0, [fp, #-64]	; 0xffffffc0
   1d61c:	ldrb	r0, [r1]
   1d620:	strb	r0, [fp, #-71]	; 0xffffffb9
   1d624:	ldrb	r0, [r1, #1]
   1d628:	strb	r0, [fp, #-70]	; 0xffffffba
   1d62c:	ldrb	r0, [r1, #2]
   1d630:	strb	r0, [fp, #-69]	; 0xffffffbb
   1d634:	ldrb	r0, [r1, #3]
   1d638:	strb	r0, [fp, #-68]	; 0xffffffbc
   1d63c:	ldrb	r0, [r1, #4]
   1d640:	strb	r0, [fp, #-67]	; 0xffffffbd
   1d644:	ldrb	r0, [r1, #5]
   1d648:	strb	r0, [fp, #-66]	; 0xffffffbe
   1d64c:	ldrb	r0, [r1, #6]
   1d650:	strb	r0, [fp, #-65]	; 0xffffffbf
   1d654:	ldr	r0, [fp, #-12]
   1d658:	bl	28b78 <flatcc_builder_reset@@Base>
   1d65c:	ldr	r1, [fp, #-12]
   1d660:	str	r0, [fp, #-84]	; 0xffffffac
   1d664:	mov	r0, r1
   1d668:	bl	18e74 <gen_monster@@Base+0x890>
   1d66c:	ldr	r1, [pc, #2000]	; 1de44 <test_clone_slice@@Base+0x848>
   1d670:	add	r1, pc, r1
   1d674:	ldr	lr, [fp, #-12]
   1d678:	str	r0, [fp, #-88]	; 0xffffffa8
   1d67c:	mov	r0, lr
   1d680:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1d684:	sub	r1, fp, #71	; 0x47
   1d688:	ldr	lr, [fp, #-12]
   1d68c:	str	r0, [fp, #-92]	; 0xffffffa4
   1d690:	mov	r0, lr
   1d694:	movw	r2, #7
   1d698:	bl	1dee0 <test_clone_slice@@Base+0x8e4>
   1d69c:	ldr	r1, [fp, #-12]
   1d6a0:	str	r0, [fp, #-96]	; 0xffffffa0
   1d6a4:	mov	r0, r1
   1d6a8:	bl	1906c <gen_monster@@Base+0xa88>
   1d6ac:	ldr	r1, [fp, #-12]
   1d6b0:	str	r0, [fp, #-100]	; 0xffffff9c
   1d6b4:	mov	r0, r1
   1d6b8:	movw	r1, #2
   1d6bc:	bl	1908c <gen_monster@@Base+0xaa8>
   1d6c0:	str	r0, [fp, #-40]	; 0xffffffd8
   1d6c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6c8:	movw	r1, #22
   1d6cc:	strh	r1, [r0]
   1d6d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d6d4:	movw	r1, #44	; 0x2c
   1d6d8:	strh	r1, [r0, #4]
   1d6dc:	ldr	r0, [fp, #-12]
   1d6e0:	bl	19284 <gen_monster@@Base+0xca0>
   1d6e4:	ldr	r1, [fp, #-12]
   1d6e8:	str	r0, [fp, #-104]	; 0xffffff98
   1d6ec:	mov	r0, r1
   1d6f0:	bl	18f4c <gen_monster@@Base+0x968>
   1d6f4:	vldr	s0, [pc, #1004]	; 1dae8 <test_clone_slice@@Base+0x4ec>
   1d6f8:	vstr	s0, [r0]
   1d6fc:	ldr	r0, [fp, #-12]
   1d700:	bl	19a24 <gen_monster@@Base+0x1440>
   1d704:	ldr	r1, [fp, #-12]
   1d708:	str	r0, [fp, #-108]	; 0xffffff94
   1d70c:	mov	r0, r1
   1d710:	sub	r1, fp, #60	; 0x3c
   1d714:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1d718:	ldr	r1, [pc, #1816]	; 1de38 <test_clone_slice@@Base+0x83c>
   1d71c:	add	r1, pc, r1
   1d720:	ldr	r2, [pc, #1812]	; 1de3c <test_clone_slice@@Base+0x840>
   1d724:	ldr	r2, [pc, r2]
   1d728:	str	r0, [fp, #-52]	; 0xffffffcc
   1d72c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d730:	ldr	lr, [fp, #-60]	; 0xffffffc4
   1d734:	ldr	r3, [r2]
   1d738:	str	r0, [fp, #-112]	; 0xffffff90
   1d73c:	mov	r0, r1
   1d740:	ldr	r1, [fp, #-112]	; 0xffffff90
   1d744:	mov	r2, lr
   1d748:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   1d74c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d750:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1d754:	str	r0, [fp, #-16]
   1d758:	ldr	r0, [fp, #-12]
   1d75c:	bl	28b78 <flatcc_builder_reset@@Base>
   1d760:	ldr	r1, [fp, #-12]
   1d764:	str	r0, [fp, #-116]	; 0xffffff8c
   1d768:	mov	r0, r1
   1d76c:	bl	18e74 <gen_monster@@Base+0x890>
   1d770:	ldr	r1, [fp, #-16]
   1d774:	str	r0, [fp, #-120]	; 0xffffff88
   1d778:	mov	r0, r1
   1d77c:	bl	16d54 <verify_monster@@Base+0x1300>
   1d780:	str	r0, [fp, #-32]	; 0xffffffe0
   1d784:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d788:	movw	r1, #0
   1d78c:	cmp	r0, r1
   1d790:	beq	1d798 <test_clone_slice@@Base+0x19c>
   1d794:	b	1d7b8 <test_clone_slice@@Base+0x1bc>
   1d798:	ldr	r0, [pc, #1708]	; 1de4c <test_clone_slice@@Base+0x850>
   1d79c:	add	r0, pc, r0
   1d7a0:	ldr	r1, [pc, #1704]	; 1de50 <test_clone_slice@@Base+0x854>
   1d7a4:	add	r1, pc, r1
   1d7a8:	ldr	r2, [pc, #1700]	; 1de54 <test_clone_slice@@Base+0x858>
   1d7ac:	add	r3, pc, r2
   1d7b0:	movw	r2, #1604	; 0x644
   1d7b4:	bl	12e68 <__assert_fail@plt>
   1d7b8:	ldr	r0, [fp, #-16]
   1d7bc:	bl	17bbc <verify_monster@@Base+0x2168>
   1d7c0:	str	r0, [fp, #-28]	; 0xffffffe4
   1d7c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1d7c8:	movw	lr, #0
   1d7cc:	cmp	r0, lr
   1d7d0:	beq	1d7d8 <test_clone_slice@@Base+0x1dc>
   1d7d4:	b	1d7f8 <test_clone_slice@@Base+0x1fc>
   1d7d8:	ldr	r0, [pc, #1656]	; 1de58 <test_clone_slice@@Base+0x85c>
   1d7dc:	add	r0, pc, r0
   1d7e0:	ldr	r1, [pc, #1652]	; 1de5c <test_clone_slice@@Base+0x860>
   1d7e4:	add	r1, pc, r1
   1d7e8:	ldr	r2, [pc, #1648]	; 1de60 <test_clone_slice@@Base+0x864>
   1d7ec:	add	r3, pc, r2
   1d7f0:	movw	r2, #1606	; 0x646
   1d7f4:	bl	12e68 <__assert_fail@plt>
   1d7f8:	ldr	r0, [fp, #-16]
   1d7fc:	bl	174b0 <verify_monster@@Base+0x1a5c>
   1d800:	str	r0, [fp, #-44]	; 0xffffffd4
   1d804:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d808:	movw	lr, #0
   1d80c:	cmp	r0, lr
   1d810:	beq	1d818 <test_clone_slice@@Base+0x21c>
   1d814:	b	1d838 <test_clone_slice@@Base+0x23c>
   1d818:	ldr	r0, [pc, #1604]	; 1de64 <test_clone_slice@@Base+0x868>
   1d81c:	add	r0, pc, r0
   1d820:	ldr	r1, [pc, #1600]	; 1de68 <test_clone_slice@@Base+0x86c>
   1d824:	add	r1, pc, r1
   1d828:	ldr	r2, [pc, #1596]	; 1de6c <test_clone_slice@@Base+0x870>
   1d82c:	add	r3, pc, r2
   1d830:	movw	r2, #1608	; 0x648
   1d834:	bl	12e68 <__assert_fail@plt>
   1d838:	ldr	r0, [fp, #-12]
   1d83c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d840:	bl	1df38 <test_clone_slice@@Base+0x93c>
   1d844:	ldr	r1, [fp, #-12]
   1d848:	str	r0, [fp, #-124]	; 0xffffff84
   1d84c:	mov	r0, r1
   1d850:	bl	1bd70 <test_scan@@Base+0x12cc>
   1d854:	ldr	r1, [fp, #-12]
   1d858:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1d85c:	str	r0, [fp, #-128]	; 0xffffff80
   1d860:	mov	r0, r1
   1d864:	mov	r1, lr
   1d868:	bl	1df84 <test_clone_slice@@Base+0x988>
   1d86c:	ldr	r1, [fp, #-12]
   1d870:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1d874:	mov	r2, #4
   1d878:	mov	r3, #20
   1d87c:	str	r0, [fp, #-132]	; 0xffffff7c
   1d880:	mov	r0, r1
   1d884:	mov	r1, lr
   1d888:	str	r3, [fp, #-136]	; 0xffffff78
   1d88c:	bl	1dfd0 <test_clone_slice@@Base+0x9d4>
   1d890:	ldr	r1, [fp, #-12]
   1d894:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d898:	mov	r3, #0
   1d89c:	mov	lr, #3
   1d8a0:	str	r0, [sp, #140]	; 0x8c
   1d8a4:	mov	r0, r1
   1d8a8:	mov	r1, r2
   1d8ac:	mov	r2, r3
   1d8b0:	mov	r3, lr
   1d8b4:	bl	1dfd0 <test_clone_slice@@Base+0x9d4>
   1d8b8:	ldr	r1, [fp, #-12]
   1d8bc:	str	r0, [sp, #136]	; 0x88
   1d8c0:	mov	r0, r1
   1d8c4:	bl	1bd90 <test_scan@@Base+0x12ec>
   1d8c8:	ldr	r1, [fp, #-12]
   1d8cc:	str	r0, [sp, #132]	; 0x84
   1d8d0:	mov	r0, r1
   1d8d4:	bl	14910 <test_empty_monster@@Base+0x1cc>
   1d8d8:	ldr	r1, [fp, #-12]
   1d8dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d8e0:	mov	r3, #2
   1d8e4:	str	r0, [sp, #128]	; 0x80
   1d8e8:	mov	r0, r1
   1d8ec:	mov	r1, r2
   1d8f0:	mov	r2, r3
   1d8f4:	ldr	lr, [fp, #-136]	; 0xffffff78
   1d8f8:	str	r3, [sp, #124]	; 0x7c
   1d8fc:	mov	r3, lr
   1d900:	bl	1e034 <test_clone_slice@@Base+0xa38>
   1d904:	ldr	r1, [fp, #-12]
   1d908:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d90c:	str	r0, [sp, #120]	; 0x78
   1d910:	mov	r0, r1
   1d914:	mov	r1, r2
   1d918:	bl	1e098 <test_clone_slice@@Base+0xa9c>
   1d91c:	ldr	r1, [fp, #-12]
   1d920:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1d924:	mov	r3, #1
   1d928:	str	r0, [sp, #116]	; 0x74
   1d92c:	mov	r0, r1
   1d930:	mov	r1, r2
   1d934:	mov	r2, r3
   1d938:	ldr	r3, [sp, #124]	; 0x7c
   1d93c:	bl	1e0e4 <test_clone_slice@@Base+0xae8>
   1d940:	ldr	r1, [fp, #-12]
   1d944:	str	r0, [sp, #112]	; 0x70
   1d948:	mov	r0, r1
   1d94c:	bl	14980 <test_empty_monster@@Base+0x23c>
   1d950:	str	r0, [fp, #-36]	; 0xffffffdc
   1d954:	ldr	r0, [fp, #-12]
   1d958:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d95c:	sub	r2, fp, #80	; 0x50
   1d960:	str	r0, [sp, #108]	; 0x6c
   1d964:	mov	r0, r2
   1d968:	bl	1970c <gen_monster@@Base+0x1128>
   1d96c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1d970:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1d974:	ldr	r0, [sp, #108]	; 0x6c
   1d978:	bl	19648 <gen_monster@@Base+0x1064>
   1d97c:	ldr	r1, [fp, #-12]
   1d980:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d984:	str	r0, [sp, #104]	; 0x68
   1d988:	mov	r0, r1
   1d98c:	mov	r1, r2
   1d990:	movw	r2, #3
   1d994:	mvn	r3, #0
   1d998:	bl	1e148 <test_clone_slice@@Base+0xb4c>
   1d99c:	ldr	r1, [fp, #-12]
   1d9a0:	ldr	r2, [fp, #-16]
   1d9a4:	str	r0, [sp, #100]	; 0x64
   1d9a8:	mov	r0, r2
   1d9ac:	str	r1, [sp, #96]	; 0x60
   1d9b0:	bl	13520 <verify_empty_monster@@Base+0x5b8>
   1d9b4:	ldr	r1, [sp, #96]	; 0x60
   1d9b8:	str	r0, [sp, #92]	; 0x5c
   1d9bc:	mov	r0, r1
   1d9c0:	ldr	r1, [sp, #92]	; 0x5c
   1d9c4:	bl	1e1ac <test_clone_slice@@Base+0xbb0>
   1d9c8:	ldr	r1, [fp, #-12]
   1d9cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1d9d0:	str	r0, [sp, #88]	; 0x58
   1d9d4:	mov	r0, r1
   1d9d8:	mov	r1, r2
   1d9dc:	bl	1e210 <test_clone_slice@@Base+0xc14>
   1d9e0:	ldr	r1, [fp, #-12]
   1d9e4:	str	r0, [sp, #84]	; 0x54
   1d9e8:	mov	r0, r1
   1d9ec:	bl	19a24 <gen_monster@@Base+0x1440>
   1d9f0:	ldr	r1, [fp, #-12]
   1d9f4:	str	r0, [sp, #80]	; 0x50
   1d9f8:	mov	r0, r1
   1d9fc:	sub	r1, fp, #60	; 0x3c
   1da00:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   1da04:	ldr	r1, [pc, #1124]	; 1de70 <test_clone_slice@@Base+0x874>
   1da08:	add	r1, pc, r1
   1da0c:	ldr	r2, [pc, #1120]	; 1de74 <test_clone_slice@@Base+0x878>
   1da10:	ldr	r2, [pc, r2]
   1da14:	str	r0, [fp, #-56]	; 0xffffffc8
   1da18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1da1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1da20:	ldr	r2, [r2]
   1da24:	str	r0, [sp, #76]	; 0x4c
   1da28:	mov	r0, r1
   1da2c:	ldr	r1, [sp, #76]	; 0x4c
   1da30:	str	r2, [sp, #72]	; 0x48
   1da34:	mov	r2, r3
   1da38:	ldr	r3, [sp, #72]	; 0x48
   1da3c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   1da40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1da44:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1da48:	str	r0, [fp, #-20]	; 0xffffffec
   1da4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1da50:	bl	16d54 <verify_monster@@Base+0x1300>
   1da54:	ldr	r1, [pc, #1136]	; 1decc <test_clone_slice@@Base+0x8d0>
   1da58:	add	r1, pc, r1
   1da5c:	bl	12d90 <strcmp@plt>
   1da60:	cmp	r0, #0
   1da64:	beq	1da7c <test_clone_slice@@Base+0x480>
   1da68:	ldr	r0, [pc, #1112]	; 1dec8 <test_clone_slice@@Base+0x8cc>
   1da6c:	add	r0, pc, r0
   1da70:	bl	12d9c <printf@plt>
   1da74:	str	r0, [sp, #68]	; 0x44
   1da78:	b	1de24 <test_clone_slice@@Base+0x828>
   1da7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1da80:	bl	17904 <verify_monster@@Base+0x1eb0>
   1da84:	str	r0, [fp, #-24]	; 0xffffffe8
   1da88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1da8c:	movw	r1, #0
   1da90:	bl	17a5c <verify_monster@@Base+0x2008>
   1da94:	ldr	r1, [pc, #1076]	; 1ded0 <test_clone_slice@@Base+0x8d4>
   1da98:	add	r1, pc, r1
   1da9c:	bl	12d90 <strcmp@plt>
   1daa0:	cmp	r0, #0
   1daa4:	beq	1dabc <test_clone_slice@@Base+0x4c0>
   1daa8:	ldr	r0, [pc, #1044]	; 1dec4 <test_clone_slice@@Base+0x8c8>
   1daac:	add	r0, pc, r0
   1dab0:	bl	12d9c <printf@plt>
   1dab4:	str	r0, [sp, #64]	; 0x40
   1dab8:	b	1de24 <test_clone_slice@@Base+0x828>
   1dabc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dac0:	movw	r1, #1
   1dac4:	bl	17a5c <verify_monster@@Base+0x2008>
   1dac8:	bl	16e74 <verify_monster@@Base+0x1420>
   1dacc:	cmp	r0, #6
   1dad0:	beq	1daec <test_clone_slice@@Base+0x4f0>
   1dad4:	ldr	r0, [pc, #996]	; 1dec0 <test_clone_slice@@Base+0x8c4>
   1dad8:	add	r0, pc, r0
   1dadc:	bl	12d9c <printf@plt>
   1dae0:	str	r0, [sp, #60]	; 0x3c
   1dae4:	b	1de24 <test_clone_slice@@Base+0x828>
   1dae8:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1daec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1daf0:	movw	r1, #1
   1daf4:	bl	17a5c <verify_monster@@Base+0x2008>
   1daf8:	ldr	r1, [pc, #980]	; 1ded4 <test_clone_slice@@Base+0x8d8>
   1dafc:	add	r1, pc, r1
   1db00:	bl	12d90 <strcmp@plt>
   1db04:	cmp	r0, #0
   1db08:	beq	1db20 <test_clone_slice@@Base+0x524>
   1db0c:	ldr	r0, [pc, #936]	; 1debc <test_clone_slice@@Base+0x8c0>
   1db10:	add	r0, pc, r0
   1db14:	bl	12d9c <printf@plt>
   1db18:	str	r0, [sp, #56]	; 0x38
   1db1c:	b	1de24 <test_clone_slice@@Base+0x828>
   1db20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1db24:	movw	r1, #2
   1db28:	bl	17a5c <verify_monster@@Base+0x2008>
   1db2c:	bl	16e74 <verify_monster@@Base+0x1420>
   1db30:	cmp	r0, #3
   1db34:	beq	1db4c <test_clone_slice@@Base+0x550>
   1db38:	ldr	r0, [pc, #888]	; 1deb8 <test_clone_slice@@Base+0x8bc>
   1db3c:	add	r0, pc, r0
   1db40:	bl	12d9c <printf@plt>
   1db44:	str	r0, [sp, #52]	; 0x34
   1db48:	b	1de24 <test_clone_slice@@Base+0x828>
   1db4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1db50:	movw	r1, #2
   1db54:	bl	17a5c <verify_monster@@Base+0x2008>
   1db58:	ldr	r1, [pc, #888]	; 1ded8 <test_clone_slice@@Base+0x8dc>
   1db5c:	add	r1, pc, r1
   1db60:	bl	12d90 <strcmp@plt>
   1db64:	cmp	r0, #0
   1db68:	beq	1db80 <test_clone_slice@@Base+0x584>
   1db6c:	ldr	r0, [pc, #832]	; 1deb4 <test_clone_slice@@Base+0x8b8>
   1db70:	add	r0, pc, r0
   1db74:	bl	12d9c <printf@plt>
   1db78:	str	r0, [sp, #48]	; 0x30
   1db7c:	b	1de24 <test_clone_slice@@Base+0x828>
   1db80:	ldr	r0, [fp, #-20]	; 0xffffffec
   1db84:	bl	17e50 <verify_monster@@Base+0x23fc>
   1db88:	str	r0, [fp, #-16]
   1db8c:	ldr	r0, [fp, #-16]
   1db90:	movw	lr, #0
   1db94:	cmp	r0, lr
   1db98:	beq	1dba0 <test_clone_slice@@Base+0x5a4>
   1db9c:	b	1dbc0 <test_clone_slice@@Base+0x5c4>
   1dba0:	ldr	r0, [pc, #720]	; 1de78 <test_clone_slice@@Base+0x87c>
   1dba4:	add	r0, pc, r0
   1dba8:	ldr	r1, [pc, #716]	; 1de7c <test_clone_slice@@Base+0x880>
   1dbac:	add	r1, pc, r1
   1dbb0:	ldr	r2, [pc, #712]	; 1de80 <test_clone_slice@@Base+0x884>
   1dbb4:	add	r3, pc, r2
   1dbb8:	movw	r2, #1664	; 0x680
   1dbbc:	bl	12e68 <__assert_fail@plt>
   1dbc0:	ldr	r0, [fp, #-16]
   1dbc4:	bl	16d54 <verify_monster@@Base+0x1300>
   1dbc8:	ldr	r1, [pc, #780]	; 1dedc <test_clone_slice@@Base+0x8e0>
   1dbcc:	add	r1, pc, r1
   1dbd0:	bl	12d90 <strcmp@plt>
   1dbd4:	cmp	r0, #0
   1dbd8:	beq	1dbf0 <test_clone_slice@@Base+0x5f4>
   1dbdc:	ldr	r0, [pc, #716]	; 1deb0 <test_clone_slice@@Base+0x8b4>
   1dbe0:	add	r0, pc, r0
   1dbe4:	bl	12d9c <printf@plt>
   1dbe8:	str	r0, [sp, #44]	; 0x2c
   1dbec:	b	1de24 <test_clone_slice@@Base+0x828>
   1dbf0:	ldr	r0, [fp, #-16]
   1dbf4:	bl	17bbc <verify_monster@@Base+0x2168>
   1dbf8:	str	r0, [fp, #-28]	; 0xffffffe4
   1dbfc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1dc00:	bl	17cc4 <verify_monster@@Base+0x2270>
   1dc04:	cmp	r0, #7
   1dc08:	beq	1dc20 <test_clone_slice@@Base+0x624>
   1dc0c:	ldr	r0, [pc, #664]	; 1deac <test_clone_slice@@Base+0x8b0>
   1dc10:	add	r0, pc, r0
   1dc14:	bl	12d9c <printf@plt>
   1dc18:	str	r0, [sp, #40]	; 0x28
   1dc1c:	b	1de24 <test_clone_slice@@Base+0x828>
   1dc20:	sub	r1, fp, #71	; 0x47
   1dc24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1dc28:	mov	r2, #7
   1dc2c:	bl	12dc0 <memcmp@plt>
   1dc30:	cmp	r0, #0
   1dc34:	beq	1dc4c <test_clone_slice@@Base+0x650>
   1dc38:	ldr	r0, [pc, #616]	; 1dea8 <test_clone_slice@@Base+0x8ac>
   1dc3c:	add	r0, pc, r0
   1dc40:	bl	12d9c <printf@plt>
   1dc44:	str	r0, [sp, #36]	; 0x24
   1dc48:	b	1de24 <test_clone_slice@@Base+0x828>
   1dc4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dc50:	bl	17bbc <verify_monster@@Base+0x2168>
   1dc54:	str	r0, [fp, #-28]	; 0xffffffe4
   1dc58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1dc5c:	bl	17cc4 <verify_monster@@Base+0x2270>
   1dc60:	cmp	r0, #4
   1dc64:	beq	1dc7c <test_clone_slice@@Base+0x680>
   1dc68:	ldr	r0, [pc, #564]	; 1dea4 <test_clone_slice@@Base+0x8a8>
   1dc6c:	add	r0, pc, r0
   1dc70:	bl	12d9c <printf@plt>
   1dc74:	str	r0, [sp, #32]
   1dc78:	b	1de24 <test_clone_slice@@Base+0x828>
   1dc7c:	sub	r0, fp, #71	; 0x47
   1dc80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dc84:	add	r0, r0, #3
   1dc88:	ldr	r0, [r0]
   1dc8c:	ldr	r1, [r1]
   1dc90:	sub	r2, r1, r0
   1dc94:	cmp	r1, r0
   1dc98:	movwne	r2, #1
   1dc9c:	cmp	r2, #0
   1dca0:	beq	1dcb8 <test_clone_slice@@Base+0x6bc>
   1dca4:	ldr	r0, [pc, #500]	; 1dea0 <test_clone_slice@@Base+0x8a4>
   1dca8:	add	r0, pc, r0
   1dcac:	bl	12d9c <printf@plt>
   1dcb0:	str	r0, [sp, #28]
   1dcb4:	b	1de24 <test_clone_slice@@Base+0x828>
   1dcb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dcbc:	bl	13520 <verify_empty_monster@@Base+0x5b8>
   1dcc0:	vldr	s0, [pc, #376]	; 1de40 <test_clone_slice@@Base+0x844>
   1dcc4:	vldr	s2, [r0]
   1dcc8:	vcmp.f32	s2, s0
   1dccc:	vmrs	APSR_nzcv, fpscr
   1dcd0:	beq	1dce8 <test_clone_slice@@Base+0x6ec>
   1dcd4:	ldr	r0, [pc, #448]	; 1de9c <test_clone_slice@@Base+0x8a0>
   1dcd8:	add	r0, pc, r0
   1dcdc:	bl	12d9c <printf@plt>
   1dce0:	str	r0, [sp, #24]
   1dce4:	b	1de24 <test_clone_slice@@Base+0x828>
   1dce8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dcec:	bl	174b0 <verify_monster@@Base+0x1a5c>
   1dcf0:	str	r0, [fp, #-44]	; 0xffffffd4
   1dcf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dcf8:	bl	175b8 <verify_monster@@Base+0x1b64>
   1dcfc:	cmp	r0, #2
   1dd00:	beq	1dd18 <test_clone_slice@@Base+0x71c>
   1dd04:	ldr	r0, [pc, #396]	; 1de98 <test_clone_slice@@Base+0x89c>
   1dd08:	add	r0, pc, r0
   1dd0c:	bl	12d9c <printf@plt>
   1dd10:	str	r0, [sp, #20]
   1dd14:	b	1de24 <test_clone_slice@@Base+0x828>
   1dd18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dd1c:	movw	r1, #0
   1dd20:	bl	17608 <verify_monster@@Base+0x1bb4>
   1dd24:	str	r0, [fp, #-48]	; 0xffffffd0
   1dd28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1dd2c:	bl	17678 <verify_monster@@Base+0x1c24>
   1dd30:	sxth	r0, r0
   1dd34:	cmp	r0, #22
   1dd38:	beq	1dd50 <test_clone_slice@@Base+0x754>
   1dd3c:	ldr	r0, [pc, #336]	; 1de94 <test_clone_slice@@Base+0x898>
   1dd40:	add	r0, pc, r0
   1dd44:	bl	12d9c <printf@plt>
   1dd48:	str	r0, [sp, #16]
   1dd4c:	b	1de24 <test_clone_slice@@Base+0x828>
   1dd50:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dd54:	movw	r1, #0
   1dd58:	bl	17608 <verify_monster@@Base+0x1bb4>
   1dd5c:	ldrsh	r0, [r0]
   1dd60:	cmp	r0, #22
   1dd64:	beq	1dd7c <test_clone_slice@@Base+0x780>
   1dd68:	ldr	r0, [pc, #288]	; 1de90 <test_clone_slice@@Base+0x894>
   1dd6c:	add	r0, pc, r0
   1dd70:	bl	12d9c <printf@plt>
   1dd74:	str	r0, [sp, #12]
   1dd78:	b	1de24 <test_clone_slice@@Base+0x828>
   1dd7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dd80:	movw	r1, #1
   1dd84:	bl	17608 <verify_monster@@Base+0x1bb4>
   1dd88:	str	r0, [fp, #-48]	; 0xffffffd0
   1dd8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1dd90:	bl	17678 <verify_monster@@Base+0x1c24>
   1dd94:	sxth	r0, r0
   1dd98:	cmp	r0, #44	; 0x2c
   1dd9c:	beq	1ddb4 <test_clone_slice@@Base+0x7b8>
   1dda0:	ldr	r0, [pc, #228]	; 1de8c <test_clone_slice@@Base+0x890>
   1dda4:	add	r0, pc, r0
   1dda8:	bl	12d9c <printf@plt>
   1ddac:	str	r0, [sp, #8]
   1ddb0:	b	1de24 <test_clone_slice@@Base+0x828>
   1ddb4:	ldr	r0, [fp, #-16]
   1ddb8:	bl	174b0 <verify_monster@@Base+0x1a5c>
   1ddbc:	str	r0, [fp, #-44]	; 0xffffffd4
   1ddc0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ddc4:	bl	175b8 <verify_monster@@Base+0x1b64>
   1ddc8:	cmp	r0, #1
   1ddcc:	beq	1dde4 <test_clone_slice@@Base+0x7e8>
   1ddd0:	ldr	r0, [pc, #176]	; 1de88 <test_clone_slice@@Base+0x88c>
   1ddd4:	add	r0, pc, r0
   1ddd8:	bl	12d9c <printf@plt>
   1dddc:	str	r0, [sp, #4]
   1dde0:	b	1de24 <test_clone_slice@@Base+0x828>
   1dde4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1dde8:	movw	r1, #0
   1ddec:	bl	17608 <verify_monster@@Base+0x1bb4>
   1ddf0:	str	r0, [fp, #-48]	; 0xffffffd0
   1ddf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ddf8:	bl	17678 <verify_monster@@Base+0x1c24>
   1ddfc:	sxth	r0, r0
   1de00:	cmp	r0, #44	; 0x2c
   1de04:	beq	1de1c <test_clone_slice@@Base+0x820>
   1de08:	ldr	r0, [pc, #116]	; 1de84 <test_clone_slice@@Base+0x888>
   1de0c:	add	r0, pc, r0
   1de10:	bl	12d9c <printf@plt>
   1de14:	str	r0, [sp]
   1de18:	b	1de24 <test_clone_slice@@Base+0x828>
   1de1c:	movw	r0, #0
   1de20:	str	r0, [fp, #-64]	; 0xffffffc0
   1de24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1de28:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1de2c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1de30:	sub	sp, fp, #8
   1de34:	pop	{r4, r5, fp, pc}
   1de38:	andeq	r5, r1, r9, lsl #29
   1de3c:	andeq	fp, r2, r0, lsr r9
   1de40:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1de44:	andeq	r5, r1, sl, lsr #30
   1de48:	andeq	r9, r1, r8, asr r0
   1de4c:	andeq	r5, r1, sp, lsr #8
   1de50:	muleq	r1, pc, lr	; <UNPREDICTABLE>
   1de54:	andeq	r5, r1, r3, lsl lr
   1de58:	andeq	r5, r1, ip, lsl #28
   1de5c:	andeq	r4, r1, pc, asr lr
   1de60:	ldrdeq	r5, [r1], -r3
   1de64:	ldrdeq	r5, [r1], -r2
   1de68:	andeq	r4, r1, pc, lsl lr
   1de6c:	muleq	r1, r3, sp
   1de70:	andeq	r5, r1, ip, ror #23
   1de74:	andeq	fp, r2, r4, asr #12
   1de78:	muleq	r1, fp, sl
   1de7c:	muleq	r1, r7, sl
   1de80:	andeq	r5, r1, fp, lsl #20
   1de84:	andeq	r5, r1, sl, lsr #20
   1de88:	andeq	r5, r1, r4, asr #20
   1de8c:	andeq	r5, r1, r8, asr sl
   1de90:	andeq	r5, r1, r5, ror #20
   1de94:	andeq	r5, r1, r5, ror sl
   1de98:	andeq	r5, r1, r9, ror sl
   1de9c:	andeq	r5, r1, pc, lsl #21
   1dea0:	andeq	r5, r1, r0, lsr #21
   1dea4:			; <UNDEFINED> instruction: 0x00015abf
   1dea8:	ldrdeq	r5, [r1], -r0
   1deac:	ldrdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   1deb0:	ldrdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   1deb4:	andeq	r5, r1, r8, lsr fp
   1deb8:	andeq	r5, r1, r7, asr #22
   1debc:	andeq	r5, r1, r9, asr fp
   1dec0:	andeq	r5, r1, ip, ror #22
   1dec4:	andeq	r5, r1, sl, ror fp
   1dec8:	muleq	r1, pc, fp	; <UNPREDICTABLE>
   1decc:	andeq	r5, r1, r2, asr #22
   1ded0:	andeq	r5, r1, r2, lsl #22
   1ded4:	andeq	r5, r1, r2, lsr #21
   1ded8:	andeq	r5, r1, r8, asr #22
   1dedc:	ldrdeq	r5, [r1], -r0
   1dee0:	push	{fp, lr}
   1dee4:	mov	fp, sp
   1dee8:	sub	sp, sp, #24
   1deec:	str	r0, [fp, #-4]
   1def0:	str	r1, [fp, #-8]
   1def4:	str	r2, [sp, #12]
   1def8:	ldr	r0, [fp, #-4]
   1defc:	ldr	r1, [fp, #-4]
   1df00:	ldr	r2, [fp, #-8]
   1df04:	ldr	r3, [sp, #12]
   1df08:	str	r0, [sp, #8]
   1df0c:	mov	r0, r1
   1df10:	mov	r1, r2
   1df14:	mov	r2, r3
   1df18:	bl	26d8c <main@@Base+0x39d8>
   1df1c:	ldr	r1, [sp, #8]
   1df20:	str	r0, [sp, #4]
   1df24:	mov	r0, r1
   1df28:	ldr	r1, [sp, #4]
   1df2c:	bl	26438 <main@@Base+0x3084>
   1df30:	mov	sp, fp
   1df34:	pop	{fp, pc}
   1df38:	push	{fp, lr}
   1df3c:	mov	fp, sp
   1df40:	sub	sp, sp, #16
   1df44:	str	r0, [fp, #-4]
   1df48:	str	r1, [sp, #8]
   1df4c:	ldr	r0, [fp, #-4]
   1df50:	ldr	r1, [fp, #-4]
   1df54:	ldr	r2, [sp, #8]
   1df58:	str	r0, [sp, #4]
   1df5c:	mov	r0, r1
   1df60:	mov	r1, r2
   1df64:	bl	26dd4 <main@@Base+0x3a20>
   1df68:	ldr	r1, [sp, #4]
   1df6c:	str	r0, [sp]
   1df70:	mov	r0, r1
   1df74:	ldr	r1, [sp]
   1df78:	bl	192f4 <gen_monster@@Base+0xd10>
   1df7c:	mov	sp, fp
   1df80:	pop	{fp, pc}
   1df84:	push	{fp, lr}
   1df88:	mov	fp, sp
   1df8c:	sub	sp, sp, #16
   1df90:	str	r0, [fp, #-4]
   1df94:	str	r1, [sp, #8]
   1df98:	ldr	r0, [fp, #-4]
   1df9c:	ldr	r1, [fp, #-4]
   1dfa0:	ldr	r2, [sp, #8]
   1dfa4:	str	r0, [sp, #4]
   1dfa8:	mov	r0, r1
   1dfac:	mov	r1, r2
   1dfb0:	bl	26dd4 <main@@Base+0x3a20>
   1dfb4:	ldr	r1, [sp, #4]
   1dfb8:	str	r0, [sp]
   1dfbc:	mov	r0, r1
   1dfc0:	ldr	r1, [sp]
   1dfc4:	bl	26e24 <main@@Base+0x3a70>
   1dfc8:	mov	sp, fp
   1dfcc:	pop	{fp, pc}
   1dfd0:	push	{fp, lr}
   1dfd4:	mov	fp, sp
   1dfd8:	sub	sp, sp, #24
   1dfdc:	str	r0, [fp, #-4]
   1dfe0:	str	r1, [fp, #-8]
   1dfe4:	str	r2, [sp, #12]
   1dfe8:	str	r3, [sp, #8]
   1dfec:	ldr	r0, [fp, #-4]
   1dff0:	ldr	r1, [fp, #-4]
   1dff4:	ldr	r2, [fp, #-8]
   1dff8:	ldr	r3, [sp, #12]
   1dffc:	ldr	ip, [sp, #8]
   1e000:	str	r0, [sp, #4]
   1e004:	mov	r0, r1
   1e008:	mov	r1, r2
   1e00c:	mov	r2, r3
   1e010:	mov	r3, ip
   1e014:	bl	26e70 <main@@Base+0x3abc>
   1e018:	ldr	r1, [sp, #4]
   1e01c:	str	r0, [sp]
   1e020:	mov	r0, r1
   1e024:	ldr	r1, [sp]
   1e028:	bl	26e24 <main@@Base+0x3a70>
   1e02c:	mov	sp, fp
   1e030:	pop	{fp, pc}
   1e034:	push	{fp, lr}
   1e038:	mov	fp, sp
   1e03c:	sub	sp, sp, #24
   1e040:	str	r0, [fp, #-4]
   1e044:	str	r1, [fp, #-8]
   1e048:	str	r2, [sp, #12]
   1e04c:	str	r3, [sp, #8]
   1e050:	ldr	r0, [fp, #-4]
   1e054:	ldr	r1, [fp, #-4]
   1e058:	ldr	r2, [fp, #-8]
   1e05c:	ldr	r3, [sp, #12]
   1e060:	ldr	ip, [sp, #8]
   1e064:	str	r0, [sp, #4]
   1e068:	mov	r0, r1
   1e06c:	mov	r1, r2
   1e070:	mov	r2, r3
   1e074:	mov	r3, ip
   1e078:	bl	26e70 <main@@Base+0x3abc>
   1e07c:	ldr	r1, [sp, #4]
   1e080:	str	r0, [sp]
   1e084:	mov	r0, r1
   1e088:	ldr	r1, [sp]
   1e08c:	bl	192f4 <gen_monster@@Base+0xd10>
   1e090:	mov	sp, fp
   1e094:	pop	{fp, pc}
   1e098:	push	{fp, lr}
   1e09c:	mov	fp, sp
   1e0a0:	sub	sp, sp, #16
   1e0a4:	str	r0, [fp, #-4]
   1e0a8:	str	r1, [sp, #8]
   1e0ac:	ldr	r0, [fp, #-4]
   1e0b0:	ldr	r1, [fp, #-4]
   1e0b4:	ldr	r2, [sp, #8]
   1e0b8:	str	r0, [sp, #4]
   1e0bc:	mov	r0, r1
   1e0c0:	mov	r1, r2
   1e0c4:	bl	26ef8 <main@@Base+0x3b44>
   1e0c8:	ldr	r1, [sp, #4]
   1e0cc:	str	r0, [sp]
   1e0d0:	mov	r0, r1
   1e0d4:	ldr	r1, [sp]
   1e0d8:	bl	26438 <main@@Base+0x3084>
   1e0dc:	mov	sp, fp
   1e0e0:	pop	{fp, pc}
   1e0e4:	push	{fp, lr}
   1e0e8:	mov	fp, sp
   1e0ec:	sub	sp, sp, #24
   1e0f0:	str	r0, [fp, #-4]
   1e0f4:	str	r1, [fp, #-8]
   1e0f8:	str	r2, [sp, #12]
   1e0fc:	str	r3, [sp, #8]
   1e100:	ldr	r0, [fp, #-4]
   1e104:	ldr	r1, [fp, #-4]
   1e108:	ldr	r2, [fp, #-8]
   1e10c:	ldr	r3, [sp, #12]
   1e110:	ldr	ip, [sp, #8]
   1e114:	str	r0, [sp, #4]
   1e118:	mov	r0, r1
   1e11c:	mov	r1, r2
   1e120:	mov	r2, r3
   1e124:	mov	r3, ip
   1e128:	bl	26f60 <main@@Base+0x3bac>
   1e12c:	ldr	r1, [sp, #4]
   1e130:	str	r0, [sp]
   1e134:	mov	r0, r1
   1e138:	ldr	r1, [sp]
   1e13c:	bl	26258 <main@@Base+0x2ea4>
   1e140:	mov	sp, fp
   1e144:	pop	{fp, pc}
   1e148:	push	{fp, lr}
   1e14c:	mov	fp, sp
   1e150:	sub	sp, sp, #24
   1e154:	str	r0, [fp, #-4]
   1e158:	str	r1, [fp, #-8]
   1e15c:	str	r2, [sp, #12]
   1e160:	str	r3, [sp, #8]
   1e164:	ldr	r0, [fp, #-4]
   1e168:	ldr	r1, [fp, #-4]
   1e16c:	ldr	r2, [fp, #-8]
   1e170:	ldr	r3, [sp, #12]
   1e174:	ldr	ip, [sp, #8]
   1e178:	str	r0, [sp, #4]
   1e17c:	mov	r0, r1
   1e180:	mov	r1, r2
   1e184:	mov	r2, r3
   1e188:	mov	r3, ip
   1e18c:	bl	2704c <main@@Base+0x3c98>
   1e190:	ldr	r1, [sp, #4]
   1e194:	str	r0, [sp]
   1e198:	mov	r0, r1
   1e19c:	ldr	r1, [sp]
   1e1a0:	bl	26438 <main@@Base+0x3084>
   1e1a4:	mov	sp, fp
   1e1a8:	pop	{fp, pc}
   1e1ac:	push	{fp, lr}
   1e1b0:	mov	fp, sp
   1e1b4:	sub	sp, sp, #16
   1e1b8:	str	r0, [fp, #-4]
   1e1bc:	str	r1, [sp, #8]
   1e1c0:	ldr	r0, [fp, #-4]
   1e1c4:	ldr	r1, [sp, #8]
   1e1c8:	movw	r2, #0
   1e1cc:	str	r1, [sp, #4]
   1e1d0:	mov	r1, r2
   1e1d4:	ldr	r2, [sp, #4]
   1e1d8:	movw	r3, #32
   1e1dc:	movw	ip, #16
   1e1e0:	uxth	ip, ip
   1e1e4:	str	ip, [sp]
   1e1e8:	bl	2d954 <flatcc_builder_table_add_copy@@Base>
   1e1ec:	movw	r1, #0
   1e1f0:	cmp	r1, r0
   1e1f4:	movw	r0, #0
   1e1f8:	moveq	r0, #1
   1e1fc:	tst	r0, #1
   1e200:	mvn	r0, #0
   1e204:	moveq	r0, #0
   1e208:	mov	sp, fp
   1e20c:	pop	{fp, pc}
   1e210:	push	{fp, lr}
   1e214:	mov	fp, sp
   1e218:	sub	sp, sp, #16
   1e21c:	str	r0, [fp, #-4]
   1e220:	str	r1, [sp, #8]
   1e224:	ldr	r0, [fp, #-4]
   1e228:	ldr	r1, [fp, #-4]
   1e22c:	ldr	r2, [sp, #8]
   1e230:	str	r0, [sp, #4]
   1e234:	mov	r0, r1
   1e238:	mov	r1, r2
   1e23c:	bl	27128 <main@@Base+0x3d74>
   1e240:	ldr	r1, [sp, #4]
   1e244:	str	r0, [sp]
   1e248:	mov	r0, r1
   1e24c:	ldr	r1, [sp]
   1e250:	bl	26258 <main@@Base+0x2ea4>
   1e254:	mov	sp, fp
   1e258:	pop	{fp, pc}

0001e25c <test_create_add_field@@Base>:
   1e25c:	push	{fp, lr}
   1e260:	mov	fp, sp
   1e264:	sub	sp, sp, #72	; 0x48
   1e268:	str	r0, [fp, #-4]
   1e26c:	mvn	r0, #0
   1e270:	str	r0, [fp, #-16]
   1e274:	ldr	r0, [fp, #-4]
   1e278:	bl	28b78 <flatcc_builder_reset@@Base>
   1e27c:	ldr	lr, [fp, #-4]
   1e280:	str	r0, [fp, #-28]	; 0xffffffe4
   1e284:	mov	r0, lr
   1e288:	bl	18e74 <gen_monster@@Base+0x890>
   1e28c:	ldr	lr, [pc, #296]	; 1e3bc <test_create_add_field@@Base+0x160>
   1e290:	add	r1, pc, lr
   1e294:	ldr	lr, [fp, #-4]
   1e298:	str	r0, [fp, #-32]	; 0xffffffe0
   1e29c:	mov	r0, lr
   1e2a0:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1e2a4:	ldr	r1, [pc, #268]	; 1e3b8 <test_create_add_field@@Base+0x15c>
   1e2a8:	add	r1, pc, r1
   1e2ac:	ldr	lr, [fp, #-4]
   1e2b0:	ldr	r2, [fp, #-4]
   1e2b4:	str	r0, [sp, #36]	; 0x24
   1e2b8:	mov	r0, r2
   1e2bc:	str	lr, [sp, #32]
   1e2c0:	bl	19538 <gen_monster@@Base+0xf54>
   1e2c4:	mov	r1, sp
   1e2c8:	mov	r2, #2
   1e2cc:	str	r2, [r1]
   1e2d0:	mvn	r2, #99	; 0x63
   1e2d4:	mvn	r3, #0
   1e2d8:	ldr	r1, [sp, #32]
   1e2dc:	str	r0, [sp, #28]
   1e2e0:	mov	r0, r1
   1e2e4:	ldr	r1, [sp, #28]
   1e2e8:	bl	1e3c8 <test_create_add_field@@Base+0x16c>
   1e2ec:	ldr	r1, [fp, #-4]
   1e2f0:	str	r0, [sp, #24]
   1e2f4:	mov	r0, r1
   1e2f8:	movw	r1, #0
   1e2fc:	bl	1e440 <test_create_add_field@@Base+0x1e4>
   1e300:	ldr	r1, [fp, #-4]
   1e304:	str	r0, [sp, #20]
   1e308:	mov	r0, r1
   1e30c:	bl	19a24 <gen_monster@@Base+0x1440>
   1e310:	ldr	r1, [fp, #-4]
   1e314:	str	r0, [sp, #16]
   1e318:	mov	r0, r1
   1e31c:	sub	r1, fp, #12
   1e320:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1e324:	str	r0, [fp, #-8]
   1e328:	ldr	r0, [fp, #-8]
   1e32c:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1e330:	str	r0, [fp, #-20]	; 0xffffffec
   1e334:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e338:	bl	1e4ac <test_create_add_field@@Base+0x250>
   1e33c:	cmp	r0, #0
   1e340:	beq	1e358 <test_create_add_field@@Base+0xfc>
   1e344:	ldr	r0, [pc, #120]	; 1e3c4 <test_create_add_field@@Base+0x168>
   1e348:	add	r0, pc, r0
   1e34c:	bl	12d9c <printf@plt>
   1e350:	str	r0, [sp, #12]
   1e354:	b	1e3a4 <test_create_add_field@@Base+0x148>
   1e358:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e35c:	bl	1827c <verify_monster@@Base+0x2828>
   1e360:	str	r0, [fp, #-24]	; 0xffffffe8
   1e364:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e368:	bl	1e578 <test_create_add_field@@Base+0x31c>
   1e36c:	mvn	lr, #99	; 0x63
   1e370:	eor	r0, r0, lr
   1e374:	mvn	r1, r1
   1e378:	orr	r0, r0, r1
   1e37c:	cmp	r0, #0
   1e380:	beq	1e39c <test_create_add_field@@Base+0x140>
   1e384:	b	1e388 <test_create_add_field@@Base+0x12c>
   1e388:	ldr	r0, [pc, #48]	; 1e3c0 <test_create_add_field@@Base+0x164>
   1e38c:	add	r0, pc, r0
   1e390:	bl	12d9c <printf@plt>
   1e394:	str	r0, [sp, #8]
   1e398:	b	1e3a4 <test_create_add_field@@Base+0x148>
   1e39c:	movw	r0, #0
   1e3a0:	str	r0, [fp, #-16]
   1e3a4:	ldr	r0, [fp, #-8]
   1e3a8:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1e3ac:	ldr	r0, [fp, #-16]
   1e3b0:	mov	sp, fp
   1e3b4:	pop	{fp, pc}
   1e3b8:			; <UNDEFINED> instruction: 0x000155b3
   1e3bc:	andeq	r3, r1, fp, lsl fp
   1e3c0:	andeq	r5, r1, r3, lsl #10
   1e3c4:	andeq	r5, r1, r9, lsl r5
   1e3c8:	push	{r4, sl, fp, lr}
   1e3cc:	add	fp, sp, #8
   1e3d0:	sub	sp, sp, #32
   1e3d4:	ldr	ip, [fp, #8]
   1e3d8:	str	r0, [fp, #-12]
   1e3dc:	str	r1, [fp, #-16]
   1e3e0:	str	r3, [sp, #20]
   1e3e4:	str	r2, [sp, #16]
   1e3e8:	strh	ip, [sp, #14]
   1e3ec:	ldr	r0, [fp, #-12]
   1e3f0:	mov	r1, r0
   1e3f4:	ldr	r2, [fp, #-16]
   1e3f8:	ldr	r3, [sp, #16]
   1e3fc:	ldr	ip, [sp, #20]
   1e400:	ldrh	lr, [sp, #14]
   1e404:	uxth	lr, lr
   1e408:	mov	r4, sp
   1e40c:	str	lr, [r4]
   1e410:	str	r1, [sp, #8]
   1e414:	mov	r1, r2
   1e418:	mov	r2, r3
   1e41c:	mov	r3, ip
   1e420:	bl	271a0 <main@@Base+0x3dec>
   1e424:	ldr	r1, [sp, #8]
   1e428:	str	r0, [sp, #4]
   1e42c:	mov	r0, r1
   1e430:	ldr	r1, [sp, #4]
   1e434:	bl	26578 <main@@Base+0x31c4>
   1e438:	sub	sp, fp, #8
   1e43c:	pop	{r4, sl, fp, pc}
   1e440:	push	{fp, lr}
   1e444:	mov	fp, sp
   1e448:	sub	sp, sp, #16
   1e44c:	str	r0, [fp, #-4]
   1e450:	str	r1, [sp, #8]
   1e454:	ldr	r0, [sp, #8]
   1e458:	cmp	r0, #0
   1e45c:	beq	1e494 <test_create_add_field@@Base+0x238>
   1e460:	ldr	r0, [fp, #-4]
   1e464:	movw	r1, #12
   1e468:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   1e46c:	str	r0, [sp, #4]
   1e470:	movw	r1, #0
   1e474:	cmp	r0, r1
   1e478:	beq	1e494 <test_create_add_field@@Base+0x238>
   1e47c:	ldr	r0, [sp, #8]
   1e480:	ldr	r1, [sp, #4]
   1e484:	str	r0, [r1]
   1e488:	movw	r0, #0
   1e48c:	str	r0, [sp]
   1e490:	b	1e4a0 <test_create_add_field@@Base+0x244>
   1e494:	mvn	r0, #0
   1e498:	str	r0, [sp]
   1e49c:	b	1e4a0 <test_create_add_field@@Base+0x244>
   1e4a0:	ldr	r0, [sp]
   1e4a4:	mov	sp, fp
   1e4a8:	pop	{fp, pc}
   1e4ac:	push	{fp, lr}
   1e4b0:	mov	fp, sp
   1e4b4:	sub	sp, sp, #16
   1e4b8:	str	r0, [fp, #-4]
   1e4bc:	movw	r0, #0
   1e4c0:	strh	r0, [fp, #-6]
   1e4c4:	ldr	r0, [fp, #-4]
   1e4c8:	movw	r1, #0
   1e4cc:	cmp	r0, r1
   1e4d0:	beq	1e4dc <test_create_add_field@@Base+0x280>
   1e4d4:	b	1e4d8 <test_create_add_field@@Base+0x27c>
   1e4d8:	b	1e4fc <test_create_add_field@@Base+0x2a0>
   1e4dc:	ldr	r0, [pc, #136]	; 1e56c <test_create_add_field@@Base+0x310>
   1e4e0:	add	r0, pc, r0
   1e4e4:	ldr	r1, [pc, #132]	; 1e570 <test_create_add_field@@Base+0x314>
   1e4e8:	add	r1, pc, r1
   1e4ec:	ldr	r2, [pc, #128]	; 1e574 <test_create_add_field@@Base+0x318>
   1e4f0:	add	r3, pc, r2
   1e4f4:	movw	r2, #716	; 0x2cc
   1e4f8:	bl	12e68 <__assert_fail@plt>
   1e4fc:	mov	r0, #12
   1e500:	strh	r0, [sp, #8]
   1e504:	ldr	r0, [fp, #-4]
   1e508:	str	r0, [sp]
   1e50c:	bl	238a4 <main@@Base+0x4f0>
   1e510:	ldr	lr, [sp]
   1e514:	sub	r0, lr, r0
   1e518:	str	r0, [sp, #4]
   1e51c:	ldr	r0, [sp, #4]
   1e520:	bl	238c8 <main@@Base+0x514>
   1e524:	ldrh	lr, [sp, #8]
   1e528:	add	lr, lr, #3
   1e52c:	lsl	lr, lr, #1
   1e530:	cmp	r0, lr
   1e534:	bcc	1e550 <test_create_add_field@@Base+0x2f4>
   1e538:	ldr	r0, [sp, #4]
   1e53c:	ldrh	r1, [sp, #8]
   1e540:	add	r0, r0, r1, lsl #1
   1e544:	add	r0, r0, #4
   1e548:	bl	238c8 <main@@Base+0x514>
   1e54c:	strh	r0, [fp, #-6]
   1e550:	ldrh	r0, [fp, #-6]
   1e554:	cmp	r0, #0
   1e558:	movw	r0, #0
   1e55c:	movne	r0, #1
   1e560:	and	r0, r0, #1
   1e564:	mov	sp, fp
   1e568:	pop	{fp, pc}
   1e56c:	andeq	r6, r1, r9
   1e570:	andeq	r6, r1, r7, lsr #32
   1e574:	andeq	r7, r1, fp, lsl #5
   1e578:	push	{fp, lr}
   1e57c:	mov	fp, sp
   1e580:	sub	sp, sp, #32
   1e584:	str	r0, [fp, #-4]
   1e588:	movw	r0, #0
   1e58c:	strh	r0, [fp, #-6]
   1e590:	ldr	r0, [fp, #-4]
   1e594:	movw	r1, #0
   1e598:	cmp	r0, r1
   1e59c:	beq	1e5a8 <test_create_add_field@@Base+0x34c>
   1e5a0:	b	1e5a4 <test_create_add_field@@Base+0x348>
   1e5a4:	b	1e5c8 <test_create_add_field@@Base+0x36c>
   1e5a8:	ldr	r0, [pc, #196]	; 1e674 <test_create_add_field@@Base+0x418>
   1e5ac:	add	r0, pc, r0
   1e5b0:	ldr	r1, [pc, #192]	; 1e678 <test_create_add_field@@Base+0x41c>
   1e5b4:	add	r1, pc, r1
   1e5b8:	ldr	r2, [pc, #188]	; 1e67c <test_create_add_field@@Base+0x420>
   1e5bc:	add	r3, pc, r2
   1e5c0:	movw	r2, #608	; 0x260
   1e5c4:	bl	12e68 <__assert_fail@plt>
   1e5c8:	mov	r0, #1
   1e5cc:	strh	r0, [fp, #-8]
   1e5d0:	ldr	r0, [fp, #-4]
   1e5d4:	str	r0, [sp, #16]
   1e5d8:	bl	238a4 <main@@Base+0x4f0>
   1e5dc:	ldr	lr, [sp, #16]
   1e5e0:	sub	r0, lr, r0
   1e5e4:	str	r0, [fp, #-12]
   1e5e8:	ldr	r0, [fp, #-12]
   1e5ec:	bl	238c8 <main@@Base+0x514>
   1e5f0:	ldrh	lr, [fp, #-8]
   1e5f4:	add	lr, lr, #3
   1e5f8:	lsl	lr, lr, #1
   1e5fc:	cmp	r0, lr
   1e600:	bcc	1e61c <test_create_add_field@@Base+0x3c0>
   1e604:	ldr	r0, [fp, #-12]
   1e608:	ldrh	r1, [fp, #-8]
   1e60c:	add	r0, r0, r1, lsl #1
   1e610:	add	r0, r0, #4
   1e614:	bl	238c8 <main@@Base+0x514>
   1e618:	strh	r0, [fp, #-6]
   1e61c:	ldrh	r0, [fp, #-6]
   1e620:	cmp	r0, #0
   1e624:	beq	1e644 <test_create_add_field@@Base+0x3e8>
   1e628:	ldr	r0, [fp, #-4]
   1e62c:	ldrh	r1, [fp, #-6]
   1e630:	add	r0, r0, r1
   1e634:	bl	247f4 <main@@Base+0x1440>
   1e638:	str	r0, [sp, #12]
   1e63c:	str	r1, [sp, #8]
   1e640:	b	1e658 <test_create_add_field@@Base+0x3fc>
   1e644:	mov	r0, #0
   1e648:	mov	r1, r0
   1e64c:	str	r1, [sp, #12]
   1e650:	str	r0, [sp, #8]
   1e654:	b	1e658 <test_create_add_field@@Base+0x3fc>
   1e658:	ldr	r0, [sp, #8]
   1e65c:	ldr	r1, [sp, #12]
   1e660:	str	r0, [sp, #4]
   1e664:	mov	r0, r1
   1e668:	ldr	r1, [sp, #4]
   1e66c:	mov	sp, fp
   1e670:	pop	{fp, pc}
   1e674:	andeq	r5, r1, sp, lsr pc
   1e678:	andeq	r5, r1, fp, asr pc
   1e67c:	andeq	r7, r1, fp, lsl #4

0001e680 <test_union_vector@@Base>:
   1e680:	push	{fp, lr}
   1e684:	mov	fp, sp
   1e688:	sub	sp, sp, #216	; 0xd8
   1e68c:	str	r0, [fp, #-8]
   1e690:	mvn	r0, #0
   1e694:	str	r0, [fp, #-28]	; 0xffffffe4
   1e698:	ldr	r0, [fp, #-8]
   1e69c:	bl	28b78 <flatcc_builder_reset@@Base>
   1e6a0:	ldr	lr, [fp, #-8]
   1e6a4:	str	r0, [sp, #96]	; 0x60
   1e6a8:	mov	r0, lr
   1e6ac:	bl	18e74 <gen_monster@@Base+0x890>
   1e6b0:	ldr	lr, [fp, #-8]
   1e6b4:	ldr	r1, [pc, #908]	; 1ea48 <test_union_vector@@Base+0x3c8>
   1e6b8:	add	r1, pc, r1
   1e6bc:	str	r0, [sp, #92]	; 0x5c
   1e6c0:	mov	r0, lr
   1e6c4:	bl	14934 <test_empty_monster@@Base+0x1f0>
   1e6c8:	ldr	r1, [fp, #-8]
   1e6cc:	mov	lr, sp
   1e6d0:	mov	r2, #2
   1e6d4:	str	r2, [lr]
   1e6d8:	str	r0, [sp, #88]	; 0x58
   1e6dc:	mov	r0, r1
   1e6e0:	mov	r1, r2
   1e6e4:	str	r2, [sp, #84]	; 0x54
   1e6e8:	ldr	r3, [sp, #84]	; 0x54
   1e6ec:	bl	1ea4c <test_union_vector@@Base+0x3cc>
   1e6f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1e6f4:	ldr	r0, [fp, #-8]
   1e6f8:	bl	1eaf4 <test_union_vector@@Base+0x474>
   1e6fc:	ldr	r1, [fp, #-8]
   1e700:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e704:	sub	r3, fp, #92	; 0x5c
   1e708:	str	r0, [sp, #80]	; 0x50
   1e70c:	mov	r0, r3
   1e710:	str	r1, [sp, #76]	; 0x4c
   1e714:	mov	r1, r2
   1e718:	bl	1eb44 <test_union_vector@@Base+0x4c4>
   1e71c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1e720:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1e724:	ldr	r0, [sp, #76]	; 0x4c
   1e728:	bl	1eb14 <test_union_vector@@Base+0x494>
   1e72c:	ldr	r1, [fp, #-8]
   1e730:	sub	r2, fp, #100	; 0x64
   1e734:	str	r0, [sp, #72]	; 0x48
   1e738:	mov	r0, r2
   1e73c:	bl	1eb64 <test_union_vector@@Base+0x4e4>
   1e740:	vldr	d16, [fp, #-100]	; 0xffffff9c
   1e744:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1e748:	ldr	r0, [fp, #-8]
   1e74c:	bl	1eb84 <test_union_vector@@Base+0x504>
   1e750:	ldr	r1, [fp, #-8]
   1e754:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e758:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e75c:	str	r0, [sp, #68]	; 0x44
   1e760:	mov	r0, r1
   1e764:	mov	r1, r2
   1e768:	mov	r2, r3
   1e76c:	bl	1eba4 <test_union_vector@@Base+0x524>
   1e770:	ldr	r1, [fp, #-8]
   1e774:	str	r0, [sp, #64]	; 0x40
   1e778:	mov	r0, r1
   1e77c:	bl	1ec78 <test_union_vector@@Base+0x5f8>
   1e780:	ldr	r1, [fp, #-8]
   1e784:	str	r0, [sp, #60]	; 0x3c
   1e788:	mov	r0, r1
   1e78c:	bl	19a24 <gen_monster@@Base+0x1440>
   1e790:	ldr	r1, [fp, #-8]
   1e794:	str	r0, [sp, #56]	; 0x38
   1e798:	mov	r0, r1
   1e79c:	sub	r1, fp, #16
   1e7a0:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1e7a4:	str	r0, [fp, #-12]
   1e7a8:	ldr	r0, [fp, #-12]
   1e7ac:	ldr	r1, [fp, #-16]
   1e7b0:	bl	14a54 <test_empty_monster@@Base+0x310>
   1e7b4:	str	r0, [fp, #-28]	; 0xffffffe4
   1e7b8:	cmp	r0, #0
   1e7bc:	beq	1e7f0 <test_union_vector@@Base+0x170>
   1e7c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1e7c4:	bl	2f084 <flatcc_verify_error_string@@Base>
   1e7c8:	ldr	lr, [pc, #628]	; 1ea44 <test_union_vector@@Base+0x3c4>
   1e7cc:	add	lr, pc, lr
   1e7d0:	str	r0, [sp, #52]	; 0x34
   1e7d4:	mov	r0, lr
   1e7d8:	ldr	r1, [sp, #52]	; 0x34
   1e7dc:	bl	12d9c <printf@plt>
   1e7e0:	mvn	r1, #0
   1e7e4:	str	r1, [fp, #-4]
   1e7e8:	str	r0, [sp, #48]	; 0x30
   1e7ec:	b	1ea14 <test_union_vector@@Base+0x394>
   1e7f0:	ldr	r0, [fp, #-12]
   1e7f4:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   1e7f8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e7fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e800:	bl	17d5c <verify_monster@@Base+0x2308>
   1e804:	and	r0, r0, #255	; 0xff
   1e808:	cmp	r0, #4
   1e80c:	beq	1e824 <test_union_vector@@Base+0x1a4>
   1e810:	ldr	r0, [pc, #552]	; 1ea40 <test_union_vector@@Base+0x3c0>
   1e814:	add	r0, pc, r0
   1e818:	bl	12d9c <printf@plt>
   1e81c:	str	r0, [sp, #44]	; 0x2c
   1e820:	b	1ea04 <test_union_vector@@Base+0x384>
   1e824:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e828:	bl	17e50 <verify_monster@@Base+0x23fc>
   1e82c:	str	r0, [fp, #-84]	; 0xffffffac
   1e830:	ldr	r0, [fp, #-84]	; 0xffffffac
   1e834:	movw	lr, #0
   1e838:	cmp	r0, lr
   1e83c:	beq	1e850 <test_union_vector@@Base+0x1d0>
   1e840:	ldr	r0, [fp, #-84]	; 0xffffffac
   1e844:	bl	1eccc <test_union_vector@@Base+0x64c>
   1e848:	cmp	r0, #0
   1e84c:	beq	1e864 <test_union_vector@@Base+0x1e4>
   1e850:	ldr	r0, [pc, #484]	; 1ea3c <test_union_vector@@Base+0x3bc>
   1e854:	add	r0, pc, r0
   1e858:	bl	12d9c <printf@plt>
   1e85c:	str	r0, [sp, #40]	; 0x28
   1e860:	b	1ea04 <test_union_vector@@Base+0x384>
   1e864:	ldr	r0, [fp, #-84]	; 0xffffffac
   1e868:	bl	1ed98 <test_union_vector@@Base+0x718>
   1e86c:	str	r0, [fp, #-64]	; 0xffffffc0
   1e870:	ldr	r0, [fp, #-84]	; 0xffffffac
   1e874:	bl	1eea0 <test_union_vector@@Base+0x820>
   1e878:	str	r0, [fp, #-60]	; 0xffffffc4
   1e87c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e880:	bl	1efa8 <test_union_vector@@Base+0x928>
   1e884:	str	r0, [fp, #-20]	; 0xffffffec
   1e888:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e88c:	cmp	r0, #1
   1e890:	beq	1e8a8 <test_union_vector@@Base+0x228>
   1e894:	ldr	r0, [pc, #412]	; 1ea38 <test_union_vector@@Base+0x3b8>
   1e898:	add	r0, pc, r0
   1e89c:	bl	12d9c <printf@plt>
   1e8a0:	str	r0, [sp, #36]	; 0x24
   1e8a4:	b	1ea04 <test_union_vector@@Base+0x384>
   1e8a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e8ac:	movw	r1, #0
   1e8b0:	bl	1efc8 <test_union_vector@@Base+0x948>
   1e8b4:	and	r0, r0, #255	; 0xff
   1e8b8:	cmp	r0, #2
   1e8bc:	beq	1e8d4 <test_union_vector@@Base+0x254>
   1e8c0:	ldr	r0, [pc, #364]	; 1ea34 <test_union_vector@@Base+0x3b4>
   1e8c4:	add	r0, pc, r0
   1e8c8:	bl	12d9c <printf@plt>
   1e8cc:	str	r0, [sp, #32]
   1e8d0:	b	1ea04 <test_union_vector@@Base+0x384>
   1e8d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1e8d8:	movw	r1, #0
   1e8dc:	bl	1f040 <test_union_vector@@Base+0x9c0>
   1e8e0:	str	r0, [fp, #-56]	; 0xffffffc8
   1e8e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e8e8:	movw	r1, #0
   1e8ec:	cmp	r0, r1
   1e8f0:	bne	1e908 <test_union_vector@@Base+0x288>
   1e8f4:	ldr	r0, [pc, #292]	; 1ea20 <test_union_vector@@Base+0x3a0>
   1e8f8:	add	r0, pc, r0
   1e8fc:	bl	12d9c <printf@plt>
   1e900:	str	r0, [sp, #28]
   1e904:	b	1ea04 <test_union_vector@@Base+0x384>
   1e908:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e90c:	bl	1f0d0 <test_union_vector@@Base+0xa50>
   1e910:	sxtb	r0, r0
   1e914:	str	r0, [fp, #-24]	; 0xffffffe8
   1e918:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e91c:	cmp	r0, #2
   1e920:	beq	1e93c <test_union_vector@@Base+0x2bc>
   1e924:	ldr	r0, [pc, #260]	; 1ea30 <test_union_vector@@Base+0x3b0>
   1e928:	add	r0, pc, r0
   1e92c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e930:	bl	12d9c <printf@plt>
   1e934:	str	r0, [sp, #24]
   1e938:	b	1ea04 <test_union_vector@@Base+0x384>
   1e93c:	ldr	r1, [fp, #-84]	; 0xffffffac
   1e940:	add	r0, sp, #108	; 0x6c
   1e944:	bl	1f1c4 <test_union_vector@@Base+0xb44>
   1e948:	vldr	d16, [sp, #108]	; 0x6c
   1e94c:	vstr	d16, [fp, #-72]	; 0xffffffb8
   1e950:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e954:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e958:	bl	1f260 <test_union_vector@@Base+0xbe0>
   1e95c:	cmp	r0, #1
   1e960:	beq	1e978 <test_union_vector@@Base+0x2f8>
   1e964:	ldr	r0, [pc, #192]	; 1ea2c <test_union_vector@@Base+0x3ac>
   1e968:	add	r0, pc, r0
   1e96c:	bl	12d9c <printf@plt>
   1e970:	str	r0, [sp, #20]
   1e974:	b	1ea04 <test_union_vector@@Base+0x384>
   1e978:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1e97c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e980:	add	r0, sp, #100	; 0x64
   1e984:	mov	r3, #0
   1e988:	bl	1f284 <test_union_vector@@Base+0xc04>
   1e98c:	ldr	r0, [sp, #100]	; 0x64
   1e990:	str	r0, [fp, #-80]	; 0xffffffb0
   1e994:	ldr	r0, [sp, #104]	; 0x68
   1e998:	str	r0, [fp, #-76]	; 0xffffffb4
   1e99c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1e9a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e9a4:	str	r0, [sp, #16]
   1e9a8:	mov	r0, r1
   1e9ac:	movw	r1, #0
   1e9b0:	bl	1efc8 <test_union_vector@@Base+0x948>
   1e9b4:	and	r0, r0, #255	; 0xff
   1e9b8:	ldr	r1, [sp, #16]
   1e9bc:	cmp	r1, r0
   1e9c0:	beq	1e9d8 <test_union_vector@@Base+0x358>
   1e9c4:	ldr	r0, [pc, #92]	; 1ea28 <test_union_vector@@Base+0x3a8>
   1e9c8:	add	r0, pc, r0
   1e9cc:	bl	12d9c <printf@plt>
   1e9d0:	str	r0, [sp, #12]
   1e9d4:	b	1ea04 <test_union_vector@@Base+0x384>
   1e9d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e9dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1e9e0:	cmp	r0, r1
   1e9e4:	beq	1e9fc <test_union_vector@@Base+0x37c>
   1e9e8:	ldr	r0, [pc, #52]	; 1ea24 <test_union_vector@@Base+0x3a4>
   1e9ec:	add	r0, pc, r0
   1e9f0:	bl	12d9c <printf@plt>
   1e9f4:	str	r0, [sp, #8]
   1e9f8:	b	1ea04 <test_union_vector@@Base+0x384>
   1e9fc:	movw	r0, #0
   1ea00:	str	r0, [fp, #-28]	; 0xffffffe4
   1ea04:	ldr	r0, [fp, #-12]
   1ea08:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1ea0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ea10:	str	r0, [fp, #-4]
   1ea14:	ldr	r0, [fp, #-4]
   1ea18:	mov	sp, fp
   1ea1c:	pop	{fp, pc}
   1ea20:	andeq	r5, r1, pc, lsl #1
   1ea24:	andeq	r5, r1, r8, lsr #32
   1ea28:	andeq	r5, r1, r2, lsr r0
   1ea2c:	andeq	r5, r1, sp, asr #32
   1ea30:	andeq	r5, r1, r0, ror r0
   1ea34:	muleq	r1, r5, r0
   1ea38:	muleq	r1, r9, r0
   1ea3c:	strheq	r5, [r1], -r4
   1ea40:	ldrdeq	r5, [r1], -r2
   1ea44:	ldrdeq	r5, [r1], -lr
   1ea48:	andeq	r5, r1, fp, ror #3
   1ea4c:	push	{fp, lr}
   1ea50:	mov	fp, sp
   1ea54:	sub	sp, sp, #16
   1ea58:	ldr	ip, [fp, #8]
   1ea5c:	str	r0, [sp, #8]
   1ea60:	strb	r1, [sp, #7]
   1ea64:	strb	r2, [sp, #6]
   1ea68:	strb	r3, [sp, #5]
   1ea6c:	strb	ip, [sp, #4]
   1ea70:	ldr	r0, [sp, #8]
   1ea74:	bl	273c4 <main@@Base+0x4010>
   1ea78:	cmp	r0, #0
   1ea7c:	bne	1ead0 <test_union_vector@@Base+0x450>
   1ea80:	ldr	r0, [sp, #8]
   1ea84:	ldrsb	r1, [sp, #7]
   1ea88:	bl	273e8 <main@@Base+0x4034>
   1ea8c:	cmp	r0, #0
   1ea90:	bne	1ead0 <test_union_vector@@Base+0x450>
   1ea94:	ldr	r0, [sp, #8]
   1ea98:	ldrsb	r1, [sp, #6]
   1ea9c:	bl	2746c <main@@Base+0x40b8>
   1eaa0:	cmp	r0, #0
   1eaa4:	bne	1ead0 <test_union_vector@@Base+0x450>
   1eaa8:	ldr	r0, [sp, #8]
   1eaac:	ldrb	r1, [sp, #5]
   1eab0:	bl	274f4 <main@@Base+0x4140>
   1eab4:	cmp	r0, #0
   1eab8:	bne	1ead0 <test_union_vector@@Base+0x450>
   1eabc:	ldr	r0, [sp, #8]
   1eac0:	ldrb	r1, [sp, #4]
   1eac4:	bl	27578 <main@@Base+0x41c4>
   1eac8:	cmp	r0, #0
   1eacc:	beq	1eadc <test_union_vector@@Base+0x45c>
   1ead0:	movw	r0, #0
   1ead4:	str	r0, [fp, #-4]
   1ead8:	b	1eae8 <test_union_vector@@Base+0x468>
   1eadc:	ldr	r0, [sp, #8]
   1eae0:	bl	275fc <main@@Base+0x4248>
   1eae4:	str	r0, [fp, #-4]
   1eae8:	ldr	r0, [fp, #-4]
   1eaec:	mov	sp, fp
   1eaf0:	pop	{fp, pc}
   1eaf4:	push	{fp, lr}
   1eaf8:	mov	fp, sp
   1eafc:	sub	sp, sp, #8
   1eb00:	str	r0, [sp, #4]
   1eb04:	ldr	r0, [sp, #4]
   1eb08:	bl	2cf9c <flatcc_builder_start_union_vector@@Base>
   1eb0c:	mov	sp, fp
   1eb10:	pop	{fp, pc}
   1eb14:	push	{fp, lr}
   1eb18:	mov	fp, sp
   1eb1c:	sub	sp, sp, #16
   1eb20:	str	r1, [sp, #8]
   1eb24:	str	r2, [sp, #12]
   1eb28:	str	r0, [sp, #4]
   1eb2c:	ldr	r0, [sp, #4]
   1eb30:	ldr	r1, [sp, #8]
   1eb34:	ldr	r2, [sp, #12]
   1eb38:	bl	2d318 <flatcc_builder_union_vector_push@@Base>
   1eb3c:	mov	sp, fp
   1eb40:	pop	{fp, pc}
   1eb44:	sub	sp, sp, #4
   1eb48:	str	r1, [sp]
   1eb4c:	movw	r1, #2
   1eb50:	strb	r1, [r0]
   1eb54:	ldr	r1, [sp]
   1eb58:	str	r1, [r0, #4]
   1eb5c:	add	sp, sp, #4
   1eb60:	bx	lr
   1eb64:	push	{fp, lr}
   1eb68:	mov	fp, sp
   1eb6c:	sub	sp, sp, #8
   1eb70:	str	r1, [sp, #4]
   1eb74:	ldr	r1, [sp, #4]
   1eb78:	bl	2d020 <flatcc_builder_end_union_vector@@Base>
   1eb7c:	mov	sp, fp
   1eb80:	pop	{fp, pc}
   1eb84:	push	{fp, lr}
   1eb88:	mov	fp, sp
   1eb8c:	sub	sp, sp, #8
   1eb90:	str	r0, [sp, #4]
   1eb94:	ldr	r0, [sp, #4]
   1eb98:	bl	2766c <main@@Base+0x42b8>
   1eb9c:	mov	sp, fp
   1eba0:	pop	{fp, pc}
   1eba4:	push	{fp, lr}
   1eba8:	mov	fp, sp
   1ebac:	sub	sp, sp, #24
   1ebb0:	str	r1, [sp, #12]
   1ebb4:	str	r2, [sp, #16]
   1ebb8:	str	r0, [sp, #8]
   1ebbc:	ldr	r0, [sp, #12]
   1ebc0:	cmp	r0, #0
   1ebc4:	beq	1ebd4 <test_union_vector@@Base+0x554>
   1ebc8:	ldr	r0, [sp, #16]
   1ebcc:	cmp	r0, #0
   1ebd0:	bne	1ebfc <test_union_vector@@Base+0x57c>
   1ebd4:	ldr	r0, [sp, #12]
   1ebd8:	ldr	r1, [sp, #16]
   1ebdc:	cmp	r0, r1
   1ebe0:	movw	r0, #0
   1ebe4:	moveq	r0, #1
   1ebe8:	tst	r0, #1
   1ebec:	movw	r0, #0
   1ebf0:	mvneq	r0, #0
   1ebf4:	str	r0, [fp, #-4]
   1ebf8:	b	1ec6c <test_union_vector@@Base+0x5ec>
   1ebfc:	ldr	r0, [sp, #8]
   1ec00:	movw	r1, #2
   1ec04:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   1ec08:	str	r0, [sp, #4]
   1ec0c:	movw	r1, #0
   1ec10:	cmp	r0, r1
   1ec14:	bne	1ec24 <test_union_vector@@Base+0x5a4>
   1ec18:	mvn	r0, #0
   1ec1c:	str	r0, [fp, #-4]
   1ec20:	b	1ec6c <test_union_vector@@Base+0x5ec>
   1ec24:	ldr	r0, [sp, #12]
   1ec28:	ldr	r1, [sp, #4]
   1ec2c:	str	r0, [r1]
   1ec30:	ldr	r0, [sp, #8]
   1ec34:	movw	r1, #3
   1ec38:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   1ec3c:	str	r0, [sp, #4]
   1ec40:	movw	r1, #0
   1ec44:	cmp	r0, r1
   1ec48:	bne	1ec58 <test_union_vector@@Base+0x5d8>
   1ec4c:	mvn	r0, #0
   1ec50:	str	r0, [fp, #-4]
   1ec54:	b	1ec6c <test_union_vector@@Base+0x5ec>
   1ec58:	ldr	r0, [sp, #16]
   1ec5c:	ldr	r1, [sp, #4]
   1ec60:	str	r0, [r1]
   1ec64:	movw	r0, #0
   1ec68:	str	r0, [fp, #-4]
   1ec6c:	ldr	r0, [fp, #-4]
   1ec70:	mov	sp, fp
   1ec74:	pop	{fp, pc}
   1ec78:	push	{fp, lr}
   1ec7c:	mov	fp, sp
   1ec80:	sub	sp, sp, #16
   1ec84:	str	r0, [fp, #-4]
   1ec88:	ldr	r0, [fp, #-4]
   1ec8c:	bl	27690 <main@@Base+0x42dc>
   1ec90:	str	r0, [sp, #8]
   1ec94:	ldr	r0, [sp, #8]
   1ec98:	cmp	r0, #0
   1ec9c:	beq	1ecb4 <test_union_vector@@Base+0x634>
   1eca0:	ldr	r0, [fp, #-4]
   1eca4:	ldr	r1, [sp, #8]
   1eca8:	bl	27700 <main@@Base+0x434c>
   1ecac:	str	r0, [sp, #4]
   1ecb0:	b	1ecc0 <test_union_vector@@Base+0x640>
   1ecb4:	mvn	r0, #0
   1ecb8:	str	r0, [sp, #4]
   1ecbc:	b	1ecc0 <test_union_vector@@Base+0x640>
   1ecc0:	ldr	r0, [sp, #4]
   1ecc4:	mov	sp, fp
   1ecc8:	pop	{fp, pc}
   1eccc:	push	{fp, lr}
   1ecd0:	mov	fp, sp
   1ecd4:	sub	sp, sp, #16
   1ecd8:	str	r0, [fp, #-4]
   1ecdc:	movw	r0, #0
   1ece0:	strh	r0, [fp, #-6]
   1ece4:	ldr	r0, [fp, #-4]
   1ece8:	movw	r1, #0
   1ecec:	cmp	r0, r1
   1ecf0:	beq	1ecfc <test_union_vector@@Base+0x67c>
   1ecf4:	b	1ecf8 <test_union_vector@@Base+0x678>
   1ecf8:	b	1ed1c <test_union_vector@@Base+0x69c>
   1ecfc:	ldr	r0, [pc, #136]	; 1ed8c <test_union_vector@@Base+0x70c>
   1ed00:	add	r0, pc, r0
   1ed04:	ldr	r1, [pc, #132]	; 1ed90 <test_union_vector@@Base+0x710>
   1ed08:	add	r1, pc, r1
   1ed0c:	ldr	r2, [pc, #128]	; 1ed94 <test_union_vector@@Base+0x714>
   1ed10:	add	r3, pc, r2
   1ed14:	movw	r2, #621	; 0x26d
   1ed18:	bl	12e68 <__assert_fail@plt>
   1ed1c:	mov	r0, #3
   1ed20:	strh	r0, [sp, #8]
   1ed24:	ldr	r0, [fp, #-4]
   1ed28:	str	r0, [sp]
   1ed2c:	bl	238a4 <main@@Base+0x4f0>
   1ed30:	ldr	lr, [sp]
   1ed34:	sub	r0, lr, r0
   1ed38:	str	r0, [sp, #4]
   1ed3c:	ldr	r0, [sp, #4]
   1ed40:	bl	238c8 <main@@Base+0x514>
   1ed44:	ldrh	lr, [sp, #8]
   1ed48:	add	lr, lr, #3
   1ed4c:	lsl	lr, lr, #1
   1ed50:	cmp	r0, lr
   1ed54:	bcc	1ed70 <test_union_vector@@Base+0x6f0>
   1ed58:	ldr	r0, [sp, #4]
   1ed5c:	ldrh	r1, [sp, #8]
   1ed60:	add	r0, r0, r1, lsl #1
   1ed64:	add	r0, r0, #4
   1ed68:	bl	238c8 <main@@Base+0x514>
   1ed6c:	strh	r0, [fp, #-6]
   1ed70:	ldrh	r0, [fp, #-6]
   1ed74:	cmp	r0, #0
   1ed78:	movw	r0, #0
   1ed7c:	movne	r0, #1
   1ed80:	and	r0, r0, #1
   1ed84:	mov	sp, fp
   1ed88:	pop	{fp, pc}
   1ed8c:	andeq	r5, r1, r9, ror #15
   1ed90:	andeq	r5, r1, r7, lsl #16
   1ed94:	andeq	r6, r1, r6, lsl sp
   1ed98:	push	{fp, lr}
   1ed9c:	mov	fp, sp
   1eda0:	sub	sp, sp, #32
   1eda4:	str	r0, [fp, #-8]
   1eda8:	movw	r0, #0
   1edac:	strh	r0, [fp, #-14]
   1edb0:	ldr	r0, [fp, #-8]
   1edb4:	movw	r1, #0
   1edb8:	cmp	r0, r1
   1edbc:	beq	1edc8 <test_union_vector@@Base+0x748>
   1edc0:	b	1edc4 <test_union_vector@@Base+0x744>
   1edc4:	b	1ede8 <test_union_vector@@Base+0x768>
   1edc8:	ldr	r0, [pc, #196]	; 1ee94 <test_union_vector@@Base+0x814>
   1edcc:	add	r0, pc, r0
   1edd0:	ldr	r1, [pc, #192]	; 1ee98 <test_union_vector@@Base+0x818>
   1edd4:	add	r1, pc, r1
   1edd8:	ldr	r2, [pc, #188]	; 1ee9c <test_union_vector@@Base+0x81c>
   1eddc:	add	r3, pc, r2
   1ede0:	movw	r2, #621	; 0x26d
   1ede4:	bl	12e68 <__assert_fail@plt>
   1ede8:	mov	r0, #2
   1edec:	strh	r0, [sp, #16]
   1edf0:	ldr	r0, [fp, #-8]
   1edf4:	str	r0, [sp, #8]
   1edf8:	bl	238a4 <main@@Base+0x4f0>
   1edfc:	ldr	lr, [sp, #8]
   1ee00:	sub	r0, lr, r0
   1ee04:	str	r0, [sp, #12]
   1ee08:	ldr	r0, [sp, #12]
   1ee0c:	bl	238c8 <main@@Base+0x514>
   1ee10:	ldrh	lr, [sp, #16]
   1ee14:	add	lr, lr, #3
   1ee18:	lsl	lr, lr, #1
   1ee1c:	cmp	r0, lr
   1ee20:	bcc	1ee3c <test_union_vector@@Base+0x7bc>
   1ee24:	ldr	r0, [sp, #12]
   1ee28:	ldrh	r1, [sp, #16]
   1ee2c:	add	r0, r0, r1, lsl #1
   1ee30:	add	r0, r0, #4
   1ee34:	bl	238c8 <main@@Base+0x514>
   1ee38:	strh	r0, [fp, #-14]
   1ee3c:	ldrsh	r0, [fp, #-14]
   1ee40:	cmp	r0, #0
   1ee44:	beq	1ee80 <test_union_vector@@Base+0x800>
   1ee48:	ldr	r0, [fp, #-8]
   1ee4c:	ldrh	r1, [fp, #-14]
   1ee50:	add	r0, r0, r1
   1ee54:	str	r0, [fp, #-12]
   1ee58:	ldr	r0, [fp, #-12]
   1ee5c:	add	r0, r0, #4
   1ee60:	ldr	r1, [fp, #-12]
   1ee64:	str	r0, [sp, #4]
   1ee68:	mov	r0, r1
   1ee6c:	bl	2386c <main@@Base+0x4b8>
   1ee70:	ldr	r1, [sp, #4]
   1ee74:	add	r0, r1, r0
   1ee78:	str	r0, [fp, #-4]
   1ee7c:	b	1ee88 <test_union_vector@@Base+0x808>
   1ee80:	movw	r0, #0
   1ee84:	str	r0, [fp, #-4]
   1ee88:	ldr	r0, [fp, #-4]
   1ee8c:	mov	sp, fp
   1ee90:	pop	{fp, pc}
   1ee94:	andeq	r5, r1, sp, lsl r7
   1ee98:	andeq	r5, r1, fp, lsr r7
   1ee9c:	muleq	r1, r0, ip
   1eea0:	push	{fp, lr}
   1eea4:	mov	fp, sp
   1eea8:	sub	sp, sp, #32
   1eeac:	str	r0, [fp, #-8]
   1eeb0:	movw	r0, #0
   1eeb4:	strh	r0, [fp, #-14]
   1eeb8:	ldr	r0, [fp, #-8]
   1eebc:	movw	r1, #0
   1eec0:	cmp	r0, r1
   1eec4:	beq	1eed0 <test_union_vector@@Base+0x850>
   1eec8:	b	1eecc <test_union_vector@@Base+0x84c>
   1eecc:	b	1eef0 <test_union_vector@@Base+0x870>
   1eed0:	ldr	r0, [pc, #196]	; 1ef9c <test_union_vector@@Base+0x91c>
   1eed4:	add	r0, pc, r0
   1eed8:	ldr	r1, [pc, #192]	; 1efa0 <test_union_vector@@Base+0x920>
   1eedc:	add	r1, pc, r1
   1eee0:	ldr	r2, [pc, #188]	; 1efa4 <test_union_vector@@Base+0x924>
   1eee4:	add	r3, pc, r2
   1eee8:	movw	r2, #621	; 0x26d
   1eeec:	bl	12e68 <__assert_fail@plt>
   1eef0:	mov	r0, #3
   1eef4:	strh	r0, [sp, #16]
   1eef8:	ldr	r0, [fp, #-8]
   1eefc:	str	r0, [sp, #8]
   1ef00:	bl	238a4 <main@@Base+0x4f0>
   1ef04:	ldr	lr, [sp, #8]
   1ef08:	sub	r0, lr, r0
   1ef0c:	str	r0, [sp, #12]
   1ef10:	ldr	r0, [sp, #12]
   1ef14:	bl	238c8 <main@@Base+0x514>
   1ef18:	ldrh	lr, [sp, #16]
   1ef1c:	add	lr, lr, #3
   1ef20:	lsl	lr, lr, #1
   1ef24:	cmp	r0, lr
   1ef28:	bcc	1ef44 <test_union_vector@@Base+0x8c4>
   1ef2c:	ldr	r0, [sp, #12]
   1ef30:	ldrh	r1, [sp, #16]
   1ef34:	add	r0, r0, r1, lsl #1
   1ef38:	add	r0, r0, #4
   1ef3c:	bl	238c8 <main@@Base+0x514>
   1ef40:	strh	r0, [fp, #-14]
   1ef44:	ldrsh	r0, [fp, #-14]
   1ef48:	cmp	r0, #0
   1ef4c:	beq	1ef88 <test_union_vector@@Base+0x908>
   1ef50:	ldr	r0, [fp, #-8]
   1ef54:	ldrh	r1, [fp, #-14]
   1ef58:	add	r0, r0, r1
   1ef5c:	str	r0, [fp, #-12]
   1ef60:	ldr	r0, [fp, #-12]
   1ef64:	add	r0, r0, #4
   1ef68:	ldr	r1, [fp, #-12]
   1ef6c:	str	r0, [sp, #4]
   1ef70:	mov	r0, r1
   1ef74:	bl	2386c <main@@Base+0x4b8>
   1ef78:	ldr	r1, [sp, #4]
   1ef7c:	add	r0, r1, r0
   1ef80:	str	r0, [fp, #-4]
   1ef84:	b	1ef90 <test_union_vector@@Base+0x910>
   1ef88:	movw	r0, #0
   1ef8c:	str	r0, [fp, #-4]
   1ef90:	ldr	r0, [fp, #-4]
   1ef94:	mov	sp, fp
   1ef98:	pop	{fp, pc}
   1ef9c:	andeq	r5, r1, r5, lsl r6
   1efa0:	andeq	r5, r1, r3, lsr r6
   1efa4:	ldrdeq	r6, [r1], -sp
   1efa8:	push	{fp, lr}
   1efac:	mov	fp, sp
   1efb0:	sub	sp, sp, #8
   1efb4:	str	r0, [sp, #4]
   1efb8:	ldr	r0, [sp, #4]
   1efbc:	bl	2603c <main@@Base+0x2c88>
   1efc0:	mov	sp, fp
   1efc4:	pop	{fp, pc}
   1efc8:	push	{fp, lr}
   1efcc:	mov	fp, sp
   1efd0:	sub	sp, sp, #8
   1efd4:	str	r0, [sp, #4]
   1efd8:	str	r1, [sp]
   1efdc:	ldr	r0, [sp, #4]
   1efe0:	bl	2603c <main@@Base+0x2c88>
   1efe4:	ldr	r1, [sp]
   1efe8:	cmp	r0, r1
   1efec:	bls	1eff8 <test_union_vector@@Base+0x978>
   1eff0:	b	1eff4 <test_union_vector@@Base+0x974>
   1eff4:	b	1f018 <test_union_vector@@Base+0x998>
   1eff8:	ldr	r0, [pc, #52]	; 1f034 <test_union_vector@@Base+0x9b4>
   1effc:	add	r0, pc, r0
   1f000:	ldr	r1, [pc, #48]	; 1f038 <test_union_vector@@Base+0x9b8>
   1f004:	add	r1, pc, r1
   1f008:	ldr	r2, [pc, #44]	; 1f03c <test_union_vector@@Base+0x9bc>
   1f00c:	add	r3, pc, r2
   1f010:	movw	r2, #405	; 0x195
   1f014:	bl	12e68 <__assert_fail@plt>
   1f018:	ldr	r0, [sp, #4]
   1f01c:	ldr	r1, [sp]
   1f020:	add	r0, r0, r1
   1f024:	bl	27764 <main@@Base+0x43b0>
   1f028:	and	r0, r0, #255	; 0xff
   1f02c:	mov	sp, fp
   1f030:	pop	{fp, pc}
   1f034:	andeq	r5, r1, r8, lsl #30
   1f038:	andeq	r5, r1, r7, lsr pc
   1f03c:	andeq	r6, r1, r6, lsl #22
   1f040:	push	{fp, lr}
   1f044:	mov	fp, sp
   1f048:	sub	sp, sp, #16
   1f04c:	str	r0, [fp, #-4]
   1f050:	str	r1, [sp, #8]
   1f054:	ldr	r0, [fp, #-4]
   1f058:	ldr	r1, [sp, #8]
   1f05c:	add	r0, r0, r1, lsl #2
   1f060:	str	r0, [sp, #4]
   1f064:	ldr	r0, [fp, #-4]
   1f068:	bl	2603c <main@@Base+0x2c88>
   1f06c:	ldr	r1, [sp, #8]
   1f070:	cmp	r0, r1
   1f074:	bls	1f080 <test_union_vector@@Base+0xa00>
   1f078:	b	1f07c <test_union_vector@@Base+0x9fc>
   1f07c:	b	1f0a0 <test_union_vector@@Base+0xa20>
   1f080:	ldr	r0, [pc, #60]	; 1f0c4 <test_union_vector@@Base+0xa44>
   1f084:	add	r0, pc, r0
   1f088:	ldr	r1, [pc, #56]	; 1f0c8 <test_union_vector@@Base+0xa48>
   1f08c:	add	r1, pc, r1
   1f090:	ldr	r2, [pc, #52]	; 1f0cc <test_union_vector@@Base+0xa4c>
   1f094:	add	r3, pc, r2
   1f098:	movw	r2, #117	; 0x75
   1f09c:	bl	12e68 <__assert_fail@plt>
   1f0a0:	ldr	r0, [sp, #4]
   1f0a4:	ldr	r1, [sp, #4]
   1f0a8:	str	r0, [sp]
   1f0ac:	mov	r0, r1
   1f0b0:	bl	2386c <main@@Base+0x4b8>
   1f0b4:	ldr	r1, [sp]
   1f0b8:	add	r0, r1, r0
   1f0bc:	mov	sp, fp
   1f0c0:	pop	{fp, pc}
   1f0c4:	andeq	r5, r1, r0, lsl #29
   1f0c8:	andeq	r5, r1, pc, lsr #29
   1f0cc:	ldrdeq	r6, [r1], -fp
   1f0d0:	push	{fp, lr}
   1f0d4:	mov	fp, sp
   1f0d8:	sub	sp, sp, #24
   1f0dc:	str	r0, [fp, #-4]
   1f0e0:	movw	r0, #0
   1f0e4:	strh	r0, [fp, #-6]
   1f0e8:	ldr	r0, [fp, #-4]
   1f0ec:	movw	r1, #0
   1f0f0:	cmp	r0, r1
   1f0f4:	beq	1f100 <test_union_vector@@Base+0xa80>
   1f0f8:	b	1f0fc <test_union_vector@@Base+0xa7c>
   1f0fc:	b	1f120 <test_union_vector@@Base+0xaa0>
   1f100:	ldr	r0, [pc, #176]	; 1f1b8 <test_union_vector@@Base+0xb38>
   1f104:	add	r0, pc, r0
   1f108:	ldr	r1, [pc, #172]	; 1f1bc <test_union_vector@@Base+0xb3c>
   1f10c:	add	r1, pc, r1
   1f110:	ldr	r2, [pc, #168]	; 1f1c0 <test_union_vector@@Base+0xb40>
   1f114:	add	r3, pc, r2
   1f118:	movw	r2, #579	; 0x243
   1f11c:	bl	12e68 <__assert_fail@plt>
   1f120:	mov	r0, #0
   1f124:	strh	r0, [fp, #-8]
   1f128:	ldr	r0, [fp, #-4]
   1f12c:	str	r0, [sp, #8]
   1f130:	bl	238a4 <main@@Base+0x4f0>
   1f134:	ldr	lr, [sp, #8]
   1f138:	sub	r0, lr, r0
   1f13c:	str	r0, [sp, #12]
   1f140:	ldr	r0, [sp, #12]
   1f144:	bl	238c8 <main@@Base+0x514>
   1f148:	ldrh	lr, [fp, #-8]
   1f14c:	add	lr, lr, #3
   1f150:	lsl	lr, lr, #1
   1f154:	cmp	r0, lr
   1f158:	bcc	1f174 <test_union_vector@@Base+0xaf4>
   1f15c:	ldr	r0, [sp, #12]
   1f160:	ldrh	r1, [fp, #-8]
   1f164:	add	r0, r0, r1, lsl #1
   1f168:	add	r0, r0, #4
   1f16c:	bl	238c8 <main@@Base+0x514>
   1f170:	strh	r0, [fp, #-6]
   1f174:	ldrh	r0, [fp, #-6]
   1f178:	cmp	r0, #0
   1f17c:	beq	1f19c <test_union_vector@@Base+0xb1c>
   1f180:	ldr	r0, [fp, #-4]
   1f184:	ldrh	r1, [fp, #-6]
   1f188:	add	r0, r0, r1
   1f18c:	bl	26000 <main@@Base+0x2c4c>
   1f190:	sxtb	r0, r0
   1f194:	str	r0, [sp, #4]
   1f198:	b	1f1a8 <test_union_vector@@Base+0xb28>
   1f19c:	movw	r0, #2
   1f1a0:	str	r0, [sp, #4]
   1f1a4:	b	1f1a8 <test_union_vector@@Base+0xb28>
   1f1a8:	ldr	r0, [sp, #4]
   1f1ac:	sxtb	r0, r0
   1f1b0:	mov	sp, fp
   1f1b4:	pop	{fp, pc}
   1f1b8:	andeq	r5, r1, r5, ror #7
   1f1bc:	andeq	r5, r1, r3, lsl #8
   1f1c0:	andeq	r6, r1, pc, lsr #21
   1f1c4:	push	{fp, lr}
   1f1c8:	mov	fp, sp
   1f1cc:	sub	sp, sp, #16
   1f1d0:	str	r1, [fp, #-4]
   1f1d4:	ldr	r1, [fp, #-4]
   1f1d8:	str	r0, [sp, #8]
   1f1dc:	mov	r0, r1
   1f1e0:	bl	1ed98 <test_union_vector@@Base+0x718>
   1f1e4:	ldr	r1, [sp, #8]
   1f1e8:	str	r0, [r1]
   1f1ec:	ldr	r0, [fp, #-4]
   1f1f0:	bl	1eea0 <test_union_vector@@Base+0x820>
   1f1f4:	ldr	r1, [sp, #8]
   1f1f8:	str	r0, [r1, #4]
   1f1fc:	ldr	r0, [r1]
   1f200:	bl	2603c <main@@Base+0x2c88>
   1f204:	ldr	r1, [sp, #8]
   1f208:	ldr	lr, [r1, #4]
   1f20c:	str	r0, [sp, #4]
   1f210:	mov	r0, lr
   1f214:	bl	2603c <main@@Base+0x2c88>
   1f218:	ldr	r1, [sp, #4]
   1f21c:	cmp	r1, r0
   1f220:	bne	1f22c <test_union_vector@@Base+0xbac>
   1f224:	b	1f228 <test_union_vector@@Base+0xba8>
   1f228:	b	1f24c <test_union_vector@@Base+0xbcc>
   1f22c:	ldr	r0, [pc, #32]	; 1f254 <test_union_vector@@Base+0xbd4>
   1f230:	add	r0, pc, r0
   1f234:	ldr	r1, [pc, #28]	; 1f258 <test_union_vector@@Base+0xbd8>
   1f238:	add	r1, pc, r1
   1f23c:	ldr	r2, [pc, #24]	; 1f25c <test_union_vector@@Base+0xbdc>
   1f240:	add	r3, pc, r2
   1f244:	movw	r2, #621	; 0x26d
   1f248:	bl	12e68 <__assert_fail@plt>
   1f24c:	mov	sp, fp
   1f250:	pop	{fp, pc}
   1f254:	andeq	r6, r1, lr, lsr #20
   1f258:	ldrdeq	r5, [r1], -r7
   1f25c:	andeq	r6, r1, r3, lsl #21
   1f260:	push	{fp, lr}
   1f264:	mov	fp, sp
   1f268:	sub	sp, sp, #8
   1f26c:	str	r0, [sp]
   1f270:	str	r1, [sp, #4]
   1f274:	ldr	r0, [sp]
   1f278:	bl	2603c <main@@Base+0x2c88>
   1f27c:	mov	sp, fp
   1f280:	pop	{fp, pc}
   1f284:	push	{fp, lr}
   1f288:	mov	fp, sp
   1f28c:	sub	sp, sp, #24
   1f290:	str	r1, [fp, #-8]
   1f294:	str	r2, [fp, #-4]
   1f298:	str	r3, [sp, #12]
   1f29c:	mov	r1, r0
   1f2a0:	str	r0, [sp, #4]
   1f2a4:	mov	r0, r1
   1f2a8:	movw	r1, #0
   1f2ac:	and	r1, r1, #255	; 0xff
   1f2b0:	movw	r2, #8
   1f2b4:	bl	12e2c <memset@plt>
   1f2b8:	ldr	r0, [fp, #-8]
   1f2bc:	bl	2603c <main@@Base+0x2c88>
   1f2c0:	str	r0, [sp, #8]
   1f2c4:	ldr	r0, [sp, #8]
   1f2c8:	ldr	r1, [sp, #12]
   1f2cc:	cmp	r0, r1
   1f2d0:	bls	1f2dc <test_union_vector@@Base+0xc5c>
   1f2d4:	b	1f2d8 <test_union_vector@@Base+0xc58>
   1f2d8:	b	1f2fc <test_union_vector@@Base+0xc7c>
   1f2dc:	ldr	r0, [pc, #92]	; 1f340 <test_union_vector@@Base+0xcc0>
   1f2e0:	add	r0, pc, r0
   1f2e4:	ldr	r1, [pc, #88]	; 1f344 <test_union_vector@@Base+0xcc4>
   1f2e8:	add	r1, pc, r1
   1f2ec:	ldr	r2, [pc, #84]	; 1f348 <test_union_vector@@Base+0xcc8>
   1f2f0:	add	r3, pc, r2
   1f2f4:	movw	r2, #520	; 0x208
   1f2f8:	bl	12e68 <__assert_fail@plt>
   1f2fc:	ldr	r0, [fp, #-8]
   1f300:	ldr	r1, [sp, #12]
   1f304:	add	r0, r0, r1
   1f308:	ldrb	r0, [r0]
   1f30c:	ldr	r1, [sp, #4]
   1f310:	strb	r0, [r1]
   1f314:	ldrb	r0, [r1]
   1f318:	cmp	r0, #0
   1f31c:	bne	1f324 <test_union_vector@@Base+0xca4>
   1f320:	b	1f338 <test_union_vector@@Base+0xcb8>
   1f324:	ldr	r0, [fp, #-4]
   1f328:	ldr	r1, [sp, #12]
   1f32c:	bl	1f040 <test_union_vector@@Base+0x9c0>
   1f330:	ldr	r1, [sp, #4]
   1f334:	str	r0, [r1, #4]
   1f338:	mov	sp, fp
   1f33c:	pop	{fp, pc}
   1f340:	andeq	r6, r1, pc, lsr sl
   1f344:	andeq	r5, r1, r7, lsr #4
   1f348:	andeq	r6, r1, pc, asr #20

0001f34c <test_mixed_type_union@@Base>:
   1f34c:	push	{r4, r5, fp, lr}
   1f350:	add	fp, sp, #8
   1f354:	sub	sp, sp, #448	; 0x1c0
   1f358:	str	r0, [fp, #-16]
   1f35c:	mvn	r0, #0
   1f360:	str	r0, [fp, #-32]	; 0xffffffe0
   1f364:	ldr	r0, [fp, #-16]
   1f368:	bl	28b78 <flatcc_builder_reset@@Base>
   1f36c:	ldr	lr, [fp, #-16]
   1f370:	str	r0, [fp, #-216]	; 0xffffff28
   1f374:	mov	r0, lr
   1f378:	bl	1fe5c <test_mixed_type_union@@Base+0xb10>
   1f37c:	ldr	lr, [fp, #-16]
   1f380:	mov	r1, #10
   1f384:	str	r0, [fp, #-220]	; 0xffffff24
   1f388:	mov	r0, lr
   1f38c:	bl	1feac <test_mixed_type_union@@Base+0xb60>
   1f390:	str	r0, [fp, #-52]	; 0xffffffcc
   1f394:	ldr	r0, [fp, #-16]
   1f398:	mov	r1, #22
   1f39c:	bl	1ff14 <test_mixed_type_union@@Base+0xbc8>
   1f3a0:	str	r0, [fp, #-44]	; 0xffffffd4
   1f3a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1f3a8:	sub	r0, fp, #100	; 0x64
   1f3ac:	bl	1ff7c <test_mixed_type_union@@Base+0xc30>
   1f3b0:	vldr	d16, [fp, #-100]	; 0xffffff9c
   1f3b4:	vstr	d16, [fp, #-40]	; 0xffffffd8
   1f3b8:	ldr	r0, [fp, #-16]
   1f3bc:	mov	r1, #19
   1f3c0:	bl	1ff9c <test_mixed_type_union@@Base+0xc50>
   1f3c4:	ldr	r1, [fp, #-16]
   1f3c8:	ldr	lr, [fp, #-44]	; 0xffffffd4
   1f3cc:	str	r0, [fp, #-224]	; 0xffffff20
   1f3d0:	mov	r0, r1
   1f3d4:	mov	r1, lr
   1f3d8:	bl	20014 <test_mixed_type_union@@Base+0xcc8>
   1f3dc:	ldr	r1, [fp, #-16]
   1f3e0:	mov	lr, #42	; 0x2a
   1f3e4:	str	r0, [sp, #228]	; 0xe4
   1f3e8:	mov	r0, r1
   1f3ec:	mov	r1, lr
   1f3f0:	bl	20058 <test_mixed_type_union@@Base+0xd0c>
   1f3f4:	str	r0, [fp, #-48]	; 0xffffffd0
   1f3f8:	ldr	r0, [fp, #-16]
   1f3fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1f400:	bl	200b4 <test_mixed_type_union@@Base+0xd68>
   1f404:	ldr	r1, [fp, #-16]
   1f408:	ldr	lr, [pc, #2608]	; 1fe40 <test_mixed_type_union@@Base+0xaf4>
   1f40c:	add	lr, pc, lr
   1f410:	str	r0, [sp, #224]	; 0xe0
   1f414:	mov	r0, r1
   1f418:	mov	r1, lr
   1f41c:	bl	200f8 <test_mixed_type_union@@Base+0xdac>
   1f420:	ldr	r1, [fp, #-16]
   1f424:	str	r0, [sp, #220]	; 0xdc
   1f428:	mov	r0, r1
   1f42c:	bl	20144 <test_mixed_type_union@@Base+0xdf8>
   1f430:	ldr	r1, [fp, #-16]
   1f434:	ldr	lr, [fp, #-40]	; 0xffffffd8
   1f438:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1f43c:	str	r0, [sp, #216]	; 0xd8
   1f440:	mov	r0, r1
   1f444:	mov	r1, lr
   1f448:	bl	20164 <test_mixed_type_union@@Base+0xe18>
   1f44c:	ldr	r1, [fp, #-16]
   1f450:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1f454:	str	r0, [sp, #212]	; 0xd4
   1f458:	mov	r0, r1
   1f45c:	mov	r1, r2
   1f460:	bl	20194 <test_mixed_type_union@@Base+0xe48>
   1f464:	ldr	r1, [fp, #-16]
   1f468:	mov	r2, #1
   1f46c:	str	r0, [sp, #208]	; 0xd0
   1f470:	mov	r0, r1
   1f474:	mov	r1, r2
   1f478:	bl	201d8 <test_mixed_type_union@@Base+0xe8c>
   1f47c:	ldr	r1, [fp, #-16]
   1f480:	ldr	r2, [pc, #2492]	; 1fe44 <test_mixed_type_union@@Base+0xaf8>
   1f484:	add	r2, pc, r2
   1f488:	str	r0, [sp, #204]	; 0xcc
   1f48c:	mov	r0, r1
   1f490:	str	r1, [sp, #200]	; 0xc8
   1f494:	mov	r1, r2
   1f498:	bl	19538 <gen_monster@@Base+0xf54>
   1f49c:	sub	r1, fp, #108	; 0x6c
   1f4a0:	str	r0, [sp, #196]	; 0xc4
   1f4a4:	mov	r0, r1
   1f4a8:	ldr	r1, [sp, #196]	; 0xc4
   1f4ac:	bl	20258 <test_mixed_type_union@@Base+0xf0c>
   1f4b0:	ldr	r1, [fp, #-108]	; 0xffffff94
   1f4b4:	ldr	r2, [fp, #-104]	; 0xffffff98
   1f4b8:	ldr	r0, [sp, #200]	; 0xc8
   1f4bc:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   1f4c0:	ldr	r1, [fp, #-16]
   1f4c4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f4c8:	str	r0, [sp, #192]	; 0xc0
   1f4cc:	mov	r0, r1
   1f4d0:	mov	r1, r2
   1f4d4:	bl	20278 <test_mixed_type_union@@Base+0xf2c>
   1f4d8:	ldr	r1, [fp, #-16]
   1f4dc:	str	r0, [sp, #188]	; 0xbc
   1f4e0:	mov	r0, r1
   1f4e4:	bl	202bc <test_mixed_type_union@@Base+0xf70>
   1f4e8:	str	r0, [fp, #-56]	; 0xffffffc8
   1f4ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f4f0:	movw	r1, #3
   1f4f4:	str	r1, [r0]
   1f4f8:	ldr	r0, [fp, #-16]
   1f4fc:	bl	202dc <test_mixed_type_union@@Base+0xf90>
   1f500:	ldr	r1, [fp, #-16]
   1f504:	ldr	r2, [fp, #-16]
   1f508:	str	r0, [sp, #184]	; 0xb8
   1f50c:	mov	r0, r2
   1f510:	movw	r2, #1
   1f514:	str	r1, [sp, #180]	; 0xb4
   1f518:	mov	r1, r2
   1f51c:	bl	1feac <test_mixed_type_union@@Base+0xb60>
   1f520:	ldr	r1, [sp, #180]	; 0xb4
   1f524:	str	r0, [sp, #176]	; 0xb0
   1f528:	mov	r0, r1
   1f52c:	ldr	r1, [sp, #176]	; 0xb0
   1f530:	bl	20278 <test_mixed_type_union@@Base+0xf2c>
   1f534:	ldr	r1, [fp, #-16]
   1f538:	str	r0, [sp, #172]	; 0xac
   1f53c:	mov	r0, r1
   1f540:	movw	r1, #2
   1f544:	bl	20324 <test_mixed_type_union@@Base+0xfd8>
   1f548:	ldr	r1, [pc, #2148]	; 1fdb4 <test_mixed_type_union@@Base+0xa68>
   1f54c:	add	r1, pc, r1
   1f550:	ldr	r2, [fp, #-16]
   1f554:	ldr	lr, [fp, #-16]
   1f558:	str	r0, [sp, #168]	; 0xa8
   1f55c:	mov	r0, lr
   1f560:	str	r2, [sp, #164]	; 0xa4
   1f564:	bl	19538 <gen_monster@@Base+0xf54>
   1f568:	ldr	r1, [sp, #164]	; 0xa4
   1f56c:	str	r0, [sp, #160]	; 0xa0
   1f570:	mov	r0, r1
   1f574:	ldr	r1, [sp, #160]	; 0xa0
   1f578:	bl	20374 <test_mixed_type_union@@Base+0x1028>
   1f57c:	ldr	r1, [pc, #2092]	; 1fdb0 <test_mixed_type_union@@Base+0xa64>
   1f580:	add	r1, pc, r1
   1f584:	ldr	r2, [fp, #-16]
   1f588:	str	r0, [sp, #156]	; 0x9c
   1f58c:	mov	r0, r2
   1f590:	bl	203b8 <test_mixed_type_union@@Base+0x106c>
   1f594:	ldr	r1, [fp, #-16]
   1f598:	str	r0, [sp, #152]	; 0x98
   1f59c:	mov	r0, r1
   1f5a0:	bl	20408 <test_mixed_type_union@@Base+0x10bc>
   1f5a4:	ldr	r1, [fp, #-16]
   1f5a8:	str	r0, [sp, #148]	; 0x94
   1f5ac:	mov	r0, r1
   1f5b0:	bl	20448 <test_mixed_type_union@@Base+0x10fc>
   1f5b4:	ldr	r1, [fp, #-16]
   1f5b8:	str	r0, [sp, #144]	; 0x90
   1f5bc:	mov	r0, r1
   1f5c0:	sub	r1, fp, #24
   1f5c4:	bl	2e010 <flatcc_builder_finalize_aligned_buffer@@Base>
   1f5c8:	ldr	r1, [pc, #2008]	; 1fda8 <test_mixed_type_union@@Base+0xa5c>
   1f5cc:	add	r1, pc, r1
   1f5d0:	ldr	r2, [pc, #2004]	; 1fdac <test_mixed_type_union@@Base+0xa60>
   1f5d4:	ldr	r2, [pc, r2]
   1f5d8:	str	r0, [fp, #-20]	; 0xffffffec
   1f5dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f5e0:	ldr	lr, [fp, #-24]	; 0xffffffe8
   1f5e4:	ldr	r3, [r2]
   1f5e8:	str	r0, [sp, #140]	; 0x8c
   1f5ec:	mov	r0, r1
   1f5f0:	ldr	r1, [sp, #140]	; 0x8c
   1f5f4:	mov	r2, lr
   1f5f8:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   1f5fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f600:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f604:	bl	20488 <test_mixed_type_union@@Base+0x113c>
   1f608:	str	r0, [fp, #-32]	; 0xffffffe0
   1f60c:	cmp	r0, #0
   1f610:	beq	1f644 <test_mixed_type_union@@Base+0x2f8>
   1f614:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f618:	bl	2f084 <flatcc_verify_error_string@@Base>
   1f61c:	ldr	lr, [pc, #2072]	; 1fe3c <test_mixed_type_union@@Base+0xaf0>
   1f620:	add	lr, pc, lr
   1f624:	str	r0, [sp, #136]	; 0x88
   1f628:	mov	r0, lr
   1f62c:	ldr	r1, [sp, #136]	; 0x88
   1f630:	bl	12d9c <printf@plt>
   1f634:	mvn	r1, #0
   1f638:	str	r1, [fp, #-12]
   1f63c:	str	r0, [sp, #132]	; 0x84
   1f640:	b	1fd9c <test_mixed_type_union@@Base+0xa50>
   1f644:	mvn	r0, #0
   1f648:	str	r0, [fp, #-32]	; 0xffffffe0
   1f64c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f650:	bl	204c8 <test_mixed_type_union@@Base+0x117c>
   1f654:	str	r0, [fp, #-60]	; 0xffffffc4
   1f658:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f65c:	bl	20544 <test_mixed_type_union@@Base+0x11f8>
   1f660:	cmp	r0, #0
   1f664:	bne	1f67c <test_mixed_type_union@@Base+0x330>
   1f668:	ldr	r0, [pc, #1864]	; 1fdb8 <test_mixed_type_union@@Base+0xa6c>
   1f66c:	add	r0, pc, r0
   1f670:	bl	12d9c <printf@plt>
   1f674:	str	r0, [sp, #128]	; 0x80
   1f678:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f67c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f680:	bl	20610 <test_mixed_type_union@@Base+0x12c4>
   1f684:	cmp	r0, #0
   1f688:	bne	1f6a0 <test_mixed_type_union@@Base+0x354>
   1f68c:	ldr	r0, [pc, #1832]	; 1fdbc <test_mixed_type_union@@Base+0xa70>
   1f690:	add	r0, pc, r0
   1f694:	bl	12d9c <printf@plt>
   1f698:	str	r0, [sp, #124]	; 0x7c
   1f69c:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f6a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f6a4:	sub	r0, fp, #116	; 0x74
   1f6a8:	bl	206dc <test_mixed_type_union@@Base+0x1390>
   1f6ac:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f6b0:	str	r0, [fp, #-80]	; 0xffffffb0
   1f6b4:	ldr	r0, [fp, #-112]	; 0xffffff90
   1f6b8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f6bc:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f6c0:	cmp	r0, #8
   1f6c4:	beq	1f6dc <test_mixed_type_union@@Base+0x390>
   1f6c8:	ldr	r0, [pc, #1896]	; 1fe38 <test_mixed_type_union@@Base+0xaec>
   1f6cc:	add	r0, pc, r0
   1f6d0:	bl	12d9c <printf@plt>
   1f6d4:	str	r0, [sp, #120]	; 0x78
   1f6d8:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f6dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1f6e0:	str	r0, [fp, #-84]	; 0xffffffac
   1f6e4:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f6e8:	movw	r1, #0
   1f6ec:	cmp	r0, r1
   1f6f0:	bne	1f704 <test_mixed_type_union@@Base+0x3b8>
   1f6f4:	ldr	r0, [pc, #1732]	; 1fdc0 <test_mixed_type_union@@Base+0xa74>
   1f6f8:	add	r0, pc, r0
   1f6fc:	bl	12d9c <printf@plt>
   1f700:	str	r0, [sp, #116]	; 0x74
   1f704:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f708:	bl	20740 <test_mixed_type_union@@Base+0x13f4>
   1f70c:	uxth	r0, r0
   1f710:	cmp	r0, #19
   1f714:	ble	1f72c <test_mixed_type_union@@Base+0x3e0>
   1f718:	ldr	r0, [pc, #1812]	; 1fe34 <test_mixed_type_union@@Base+0xae8>
   1f71c:	add	r0, pc, r0
   1f720:	bl	12d9c <printf@plt>
   1f724:	str	r0, [sp, #112]	; 0x70
   1f728:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f72c:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f730:	bl	20740 <test_mixed_type_union@@Base+0x13f4>
   1f734:	uxth	r0, r0
   1f738:	cmp	r0, #19
   1f73c:	bge	1f754 <test_mixed_type_union@@Base+0x408>
   1f740:	ldr	r0, [pc, #1768]	; 1fe30 <test_mixed_type_union@@Base+0xae4>
   1f744:	add	r0, pc, r0
   1f748:	bl	12d9c <printf@plt>
   1f74c:	str	r0, [sp, #108]	; 0x6c
   1f750:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f754:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f758:	bl	20790 <test_mixed_type_union@@Base+0x1444>
   1f75c:	and	r0, r0, #255	; 0xff
   1f760:	cmp	r0, #8
   1f764:	beq	1f77c <test_mixed_type_union@@Base+0x430>
   1f768:	ldr	r0, [pc, #1724]	; 1fe2c <test_mixed_type_union@@Base+0xae0>
   1f76c:	add	r0, pc, r0
   1f770:	bl	12d9c <printf@plt>
   1f774:	str	r0, [sp, #104]	; 0x68
   1f778:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f77c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f780:	bl	20884 <test_mixed_type_union@@Base+0x1538>
   1f784:	str	r0, [fp, #-84]	; 0xffffffac
   1f788:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f78c:	movw	lr, #0
   1f790:	cmp	r0, lr
   1f794:	bne	1f7ac <test_mixed_type_union@@Base+0x460>
   1f798:	ldr	r0, [pc, #1572]	; 1fdc4 <test_mixed_type_union@@Base+0xa78>
   1f79c:	add	r0, pc, r0
   1f7a0:	bl	12d9c <printf@plt>
   1f7a4:	str	r0, [sp, #100]	; 0x64
   1f7a8:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f7ac:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f7b0:	bl	20740 <test_mixed_type_union@@Base+0x13f4>
   1f7b4:	uxth	r0, r0
   1f7b8:	cmp	r0, #22
   1f7bc:	beq	1f7d4 <test_mixed_type_union@@Base+0x488>
   1f7c0:	ldr	r0, [pc, #1632]	; 1fe28 <test_mixed_type_union@@Base+0xadc>
   1f7c4:	add	r0, pc, r0
   1f7c8:	bl	12d9c <printf@plt>
   1f7cc:	str	r0, [sp, #96]	; 0x60
   1f7d0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f7d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f7d8:	bl	20988 <test_mixed_type_union@@Base+0x163c>
   1f7dc:	and	r0, r0, #255	; 0xff
   1f7e0:	cmp	r0, #2
   1f7e4:	beq	1f7fc <test_mixed_type_union@@Base+0x4b0>
   1f7e8:	ldr	r0, [pc, #1588]	; 1fe24 <test_mixed_type_union@@Base+0xad8>
   1f7ec:	add	r0, pc, r0
   1f7f0:	bl	12d9c <printf@plt>
   1f7f4:	str	r0, [sp, #92]	; 0x5c
   1f7f8:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f7fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f800:	bl	20a7c <test_mixed_type_union@@Base+0x1730>
   1f804:	str	r0, [fp, #-88]	; 0xffffffa8
   1f808:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f80c:	movw	lr, #0
   1f810:	cmp	r0, lr
   1f814:	beq	1f828 <test_mixed_type_union@@Base+0x4dc>
   1f818:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1f81c:	bl	20b80 <test_mixed_type_union@@Base+0x1834>
   1f820:	cmp	r0, #42	; 0x2a
   1f824:	beq	1f83c <test_mixed_type_union@@Base+0x4f0>
   1f828:	ldr	r0, [pc, #1520]	; 1fe20 <test_mixed_type_union@@Base+0xad4>
   1f82c:	add	r0, pc, r0
   1f830:	bl	12d9c <printf@plt>
   1f834:	str	r0, [sp, #88]	; 0x58
   1f838:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f83c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f840:	bl	20c6c <test_mixed_type_union@@Base+0x1920>
   1f844:	and	r0, r0, #255	; 0xff
   1f848:	cmp	r0, #11
   1f84c:	beq	1f864 <test_mixed_type_union@@Base+0x518>
   1f850:	ldr	r0, [pc, #1476]	; 1fe1c <test_mixed_type_union@@Base+0xad0>
   1f854:	add	r0, pc, r0
   1f858:	bl	12d9c <printf@plt>
   1f85c:	str	r0, [sp, #84]	; 0x54
   1f860:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f864:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f868:	bl	20db4 <test_mixed_type_union@@Base+0x1a68>
   1f86c:	bl	20d60 <test_mixed_type_union@@Base+0x1a14>
   1f870:	str	r0, [fp, #-92]	; 0xffffffa4
   1f874:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f878:	movw	lr, #0
   1f87c:	cmp	r0, lr
   1f880:	bne	1f898 <test_mixed_type_union@@Base+0x54c>
   1f884:	ldr	r0, [pc, #1340]	; 1fdc8 <test_mixed_type_union@@Base+0xa7c>
   1f888:	add	r0, pc, r0
   1f88c:	bl	12d9c <printf@plt>
   1f890:	str	r0, [sp, #80]	; 0x50
   1f894:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f898:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f89c:	ldr	r1, [pc, #1444]	; 1fe48 <test_mixed_type_union@@Base+0xafc>
   1f8a0:	add	r1, pc, r1
   1f8a4:	bl	12d90 <strcmp@plt>
   1f8a8:	cmp	r0, #0
   1f8ac:	beq	1f8c8 <test_mixed_type_union@@Base+0x57c>
   1f8b0:	ldr	r0, [pc, #1376]	; 1fe18 <test_mixed_type_union@@Base+0xacc>
   1f8b4:	add	r0, pc, r0
   1f8b8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f8bc:	bl	12d9c <printf@plt>
   1f8c0:	str	r0, [sp, #76]	; 0x4c
   1f8c4:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f8c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f8cc:	bl	20eb8 <test_mixed_type_union@@Base+0x1b6c>
   1f8d0:	str	r0, [fp, #-92]	; 0xffffffa4
   1f8d4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f8d8:	movw	lr, #0
   1f8dc:	cmp	r0, lr
   1f8e0:	bne	1f8f8 <test_mixed_type_union@@Base+0x5ac>
   1f8e4:	ldr	r0, [pc, #1248]	; 1fdcc <test_mixed_type_union@@Base+0xa80>
   1f8e8:	add	r0, pc, r0
   1f8ec:	bl	12d9c <printf@plt>
   1f8f0:	str	r0, [sp, #72]	; 0x48
   1f8f4:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f8f8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f8fc:	ldr	r1, [pc, #1352]	; 1fe4c <test_mixed_type_union@@Base+0xb00>
   1f900:	add	r1, pc, r1
   1f904:	bl	12d90 <strcmp@plt>
   1f908:	cmp	r0, #0
   1f90c:	beq	1f928 <test_mixed_type_union@@Base+0x5dc>
   1f910:	ldr	r0, [pc, #1276]	; 1fe14 <test_mixed_type_union@@Base+0xac8>
   1f914:	add	r0, pc, r0
   1f918:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f91c:	bl	12d9c <printf@plt>
   1f920:	str	r0, [sp, #68]	; 0x44
   1f924:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f928:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f92c:	sub	r0, fp, #124	; 0x7c
   1f930:	bl	20edc <test_mixed_type_union@@Base+0x1b90>
   1f934:	vldr	d16, [fp, #-124]	; 0xffffff84
   1f938:	vstr	d16, [fp, #-80]	; 0xffffffb0
   1f93c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1f940:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1f944:	bl	20f40 <test_mixed_type_union@@Base+0x1bf4>
   1f948:	str	r0, [fp, #-92]	; 0xffffffa4
   1f94c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1f950:	ldr	r1, [pc, #1272]	; 1fe50 <test_mixed_type_union@@Base+0xb04>
   1f954:	add	r1, pc, r1
   1f958:	bl	12d90 <strcmp@plt>
   1f95c:	cmp	r0, #0
   1f960:	beq	1f97c <test_mixed_type_union@@Base+0x630>
   1f964:	ldr	r0, [pc, #1188]	; 1fe10 <test_mixed_type_union@@Base+0xac4>
   1f968:	add	r0, pc, r0
   1f96c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1f970:	bl	12d9c <printf@plt>
   1f974:	str	r0, [sp, #64]	; 0x40
   1f978:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f97c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f980:	sub	r0, fp, #132	; 0x84
   1f984:	bl	20f64 <test_mixed_type_union@@Base+0x1c18>
   1f988:	vldr	d16, [fp, #-132]	; 0xffffff7c
   1f98c:	vstr	d16, [fp, #-72]	; 0xffffffb8
   1f990:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f994:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f998:	sub	r0, fp, #140	; 0x8c
   1f99c:	mov	r3, #0
   1f9a0:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1f9a4:	ldr	r0, [fp, #-140]	; 0xffffff74
   1f9a8:	str	r0, [fp, #-80]	; 0xffffffb0
   1f9ac:	ldr	r0, [fp, #-136]	; 0xffffff78
   1f9b0:	str	r0, [fp, #-76]	; 0xffffffb4
   1f9b4:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f9b8:	cmp	r0, #8
   1f9bc:	beq	1f9d4 <test_mixed_type_union@@Base+0x688>
   1f9c0:	ldr	r0, [pc, #1092]	; 1fe0c <test_mixed_type_union@@Base+0xac0>
   1f9c4:	add	r0, pc, r0
   1f9c8:	bl	12d9c <printf@plt>
   1f9cc:	str	r0, [sp, #60]	; 0x3c
   1f9d0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1f9d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f9d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f9dc:	sub	r0, fp, #148	; 0x94
   1f9e0:	mov	r3, #1
   1f9e4:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1f9e8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1f9ec:	str	r0, [fp, #-80]	; 0xffffffb0
   1f9f0:	ldr	r0, [fp, #-144]	; 0xffffff70
   1f9f4:	str	r0, [fp, #-76]	; 0xffffffb4
   1f9f8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1f9fc:	cmp	r0, #2
   1fa00:	beq	1fa18 <test_mixed_type_union@@Base+0x6cc>
   1fa04:	ldr	r0, [pc, #1020]	; 1fe08 <test_mixed_type_union@@Base+0xabc>
   1fa08:	add	r0, pc, r0
   1fa0c:	bl	12d9c <printf@plt>
   1fa10:	str	r0, [sp, #56]	; 0x38
   1fa14:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fa18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fa1c:	str	r0, [fp, #-88]	; 0xffffffa8
   1fa20:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1fa24:	bl	20b80 <test_mixed_type_union@@Base+0x1834>
   1fa28:	cmp	r0, #42	; 0x2a
   1fa2c:	beq	1fa44 <test_mixed_type_union@@Base+0x6f8>
   1fa30:	ldr	r0, [pc, #972]	; 1fe04 <test_mixed_type_union@@Base+0xab8>
   1fa34:	add	r0, pc, r0
   1fa38:	bl	12d9c <printf@plt>
   1fa3c:	str	r0, [sp, #52]	; 0x34
   1fa40:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fa44:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fa48:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fa4c:	sub	r0, fp, #156	; 0x9c
   1fa50:	mov	r3, #2
   1fa54:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fa58:	ldr	r0, [fp, #-156]	; 0xffffff64
   1fa5c:	str	r0, [fp, #-80]	; 0xffffffb0
   1fa60:	ldr	r0, [fp, #-152]	; 0xffffff68
   1fa64:	str	r0, [fp, #-76]	; 0xffffffb4
   1fa68:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fa6c:	cmp	r0, #2
   1fa70:	beq	1fa88 <test_mixed_type_union@@Base+0x73c>
   1fa74:	ldr	r0, [pc, #900]	; 1fe00 <test_mixed_type_union@@Base+0xab4>
   1fa78:	add	r0, pc, r0
   1fa7c:	bl	12d9c <printf@plt>
   1fa80:	str	r0, [sp, #48]	; 0x30
   1fa84:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fa88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fa8c:	str	r0, [fp, #-88]	; 0xffffffa8
   1fa90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1fa94:	bl	20b80 <test_mixed_type_union@@Base+0x1834>
   1fa98:	cmp	r0, #1
   1fa9c:	beq	1fab4 <test_mixed_type_union@@Base+0x768>
   1faa0:	ldr	r0, [pc, #852]	; 1fdfc <test_mixed_type_union@@Base+0xab0>
   1faa4:	add	r0, pc, r0
   1faa8:	bl	12d9c <printf@plt>
   1faac:	str	r0, [sp, #44]	; 0x2c
   1fab0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fab4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1fab8:	bl	210c8 <test_mixed_type_union@@Base+0x1d7c>
   1fabc:	movw	r1, #3
   1fac0:	bl	1efc8 <test_union_vector@@Base+0x948>
   1fac4:	and	r0, r0, #255	; 0xff
   1fac8:	cmp	r0, #11
   1facc:	beq	1fae4 <test_mixed_type_union@@Base+0x798>
   1fad0:	ldr	r0, [pc, #800]	; 1fdf8 <test_mixed_type_union@@Base+0xaac>
   1fad4:	add	r0, pc, r0
   1fad8:	bl	12d9c <printf@plt>
   1fadc:	str	r0, [sp, #40]	; 0x28
   1fae0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fae4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1fae8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1faec:	mov	r2, #3
   1faf0:	bl	211d0 <test_mixed_type_union@@Base+0x1e84>
   1faf4:	str	r0, [fp, #-92]	; 0xffffffa4
   1faf8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1fafc:	movw	r1, #0
   1fb00:	cmp	r0, r1
   1fb04:	beq	1fb20 <test_mixed_type_union@@Base+0x7d4>
   1fb08:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1fb0c:	ldr	r1, [pc, #832]	; 1fe54 <test_mixed_type_union@@Base+0xb08>
   1fb10:	add	r1, pc, r1
   1fb14:	bl	12d90 <strcmp@plt>
   1fb18:	cmp	r0, #0
   1fb1c:	beq	1fb34 <test_mixed_type_union@@Base+0x7e8>
   1fb20:	ldr	r0, [pc, #716]	; 1fdf4 <test_mixed_type_union@@Base+0xaa8>
   1fb24:	add	r0, pc, r0
   1fb28:	bl	12d9c <printf@plt>
   1fb2c:	str	r0, [sp, #36]	; 0x24
   1fb30:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fb34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fb38:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fb3c:	sub	r0, fp, #164	; 0xa4
   1fb40:	mov	r3, #3
   1fb44:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fb48:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1fb4c:	str	r0, [fp, #-80]	; 0xffffffb0
   1fb50:	ldr	r0, [fp, #-160]	; 0xffffff60
   1fb54:	str	r0, [fp, #-76]	; 0xffffffb4
   1fb58:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fb5c:	cmp	r0, #11
   1fb60:	beq	1fb78 <test_mixed_type_union@@Base+0x82c>
   1fb64:	ldr	r0, [pc, #644]	; 1fdf0 <test_mixed_type_union@@Base+0xaa4>
   1fb68:	add	r0, pc, r0
   1fb6c:	bl	12d9c <printf@plt>
   1fb70:	str	r0, [sp, #32]
   1fb74:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fb78:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1fb7c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1fb80:	bl	20f40 <test_mixed_type_union@@Base+0x1bf4>
   1fb84:	str	r0, [fp, #-92]	; 0xffffffa4
   1fb88:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1fb8c:	movw	r1, #0
   1fb90:	cmp	r0, r1
   1fb94:	beq	1fbb0 <test_mixed_type_union@@Base+0x864>
   1fb98:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1fb9c:	ldr	r1, [pc, #692]	; 1fe58 <test_mixed_type_union@@Base+0xb0c>
   1fba0:	add	r1, pc, r1
   1fba4:	bl	12d90 <strcmp@plt>
   1fba8:	cmp	r0, #0
   1fbac:	beq	1fbc4 <test_mixed_type_union@@Base+0x878>
   1fbb0:	ldr	r0, [pc, #564]	; 1fdec <test_mixed_type_union@@Base+0xaa0>
   1fbb4:	add	r0, pc, r0
   1fbb8:	bl	12d9c <printf@plt>
   1fbbc:	str	r0, [sp, #28]
   1fbc0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fbc4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fbc8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fbcc:	sub	r0, fp, #172	; 0xac
   1fbd0:	mov	r3, #4
   1fbd4:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fbd8:	ldr	r0, [fp, #-172]	; 0xffffff54
   1fbdc:	str	r0, [fp, #-80]	; 0xffffffb0
   1fbe0:	ldr	r0, [fp, #-168]	; 0xffffff58
   1fbe4:	str	r0, [fp, #-76]	; 0xffffffb4
   1fbe8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fbec:	cmp	r0, #9
   1fbf0:	beq	1fc08 <test_mixed_type_union@@Base+0x8bc>
   1fbf4:	ldr	r0, [pc, #492]	; 1fde8 <test_mixed_type_union@@Base+0xa9c>
   1fbf8:	add	r0, pc, r0
   1fbfc:	bl	12d9c <printf@plt>
   1fc00:	str	r0, [sp, #24]
   1fc04:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fc08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fc0c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc10:	sub	r0, fp, #180	; 0xb4
   1fc14:	mov	r3, #5
   1fc18:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fc1c:	ldr	r0, [fp, #-180]	; 0xffffff4c
   1fc20:	str	r0, [fp, #-80]	; 0xffffffb0
   1fc24:	ldr	r0, [fp, #-176]	; 0xffffff50
   1fc28:	str	r0, [fp, #-76]	; 0xffffffb4
   1fc2c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fc30:	cmp	r0, #9
   1fc34:	beq	1fc4c <test_mixed_type_union@@Base+0x900>
   1fc38:	ldr	r0, [pc, #420]	; 1fde4 <test_mixed_type_union@@Base+0xa98>
   1fc3c:	add	r0, pc, r0
   1fc40:	bl	12d9c <printf@plt>
   1fc44:	str	r0, [sp, #20]
   1fc48:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fc4c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fc50:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc54:	sub	r0, fp, #188	; 0xbc
   1fc58:	mov	r3, #6
   1fc5c:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fc60:	ldr	r0, [fp, #-188]	; 0xffffff44
   1fc64:	str	r0, [fp, #-80]	; 0xffffffb0
   1fc68:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fc6c:	str	r0, [fp, #-76]	; 0xffffffb4
   1fc70:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fc74:	cmp	r0, #9
   1fc78:	beq	1fc90 <test_mixed_type_union@@Base+0x944>
   1fc7c:	ldr	r0, [pc, #348]	; 1fde0 <test_mixed_type_union@@Base+0xa94>
   1fc80:	add	r0, pc, r0
   1fc84:	bl	12d9c <printf@plt>
   1fc88:	str	r0, [sp, #16]
   1fc8c:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fc90:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fc94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc98:	sub	r0, fp, #196	; 0xc4
   1fc9c:	mov	r3, #7
   1fca0:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fca4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1fca8:	str	r0, [fp, #-80]	; 0xffffffb0
   1fcac:	ldr	r0, [fp, #-192]	; 0xffffff40
   1fcb0:	str	r0, [fp, #-76]	; 0xffffffb4
   1fcb4:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fcb8:	cmp	r0, #9
   1fcbc:	beq	1fcd4 <test_mixed_type_union@@Base+0x988>
   1fcc0:	ldr	r0, [pc, #276]	; 1fddc <test_mixed_type_union@@Base+0xa90>
   1fcc4:	add	r0, pc, r0
   1fcc8:	bl	12d9c <printf@plt>
   1fccc:	str	r0, [sp, #12]
   1fcd0:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fcd4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fcd8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fcdc:	sub	r0, fp, #204	; 0xcc
   1fce0:	mov	r3, #8
   1fce4:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fce8:	ldr	r0, [fp, #-204]	; 0xffffff34
   1fcec:	str	r0, [fp, #-80]	; 0xffffffb0
   1fcf0:	ldr	r0, [fp, #-200]	; 0xffffff38
   1fcf4:	str	r0, [fp, #-76]	; 0xffffffb4
   1fcf8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fcfc:	cmp	r0, #11
   1fd00:	beq	1fd18 <test_mixed_type_union@@Base+0x9cc>
   1fd04:	ldr	r0, [pc, #204]	; 1fdd8 <test_mixed_type_union@@Base+0xa8c>
   1fd08:	add	r0, pc, r0
   1fd0c:	bl	12d9c <printf@plt>
   1fd10:	str	r0, [sp, #8]
   1fd14:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fd18:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1fd1c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fd20:	sub	r0, fp, #212	; 0xd4
   1fd24:	mov	r3, #9
   1fd28:	bl	21000 <test_mixed_type_union@@Base+0x1cb4>
   1fd2c:	ldr	r0, [fp, #-212]	; 0xffffff2c
   1fd30:	str	r0, [fp, #-80]	; 0xffffffb0
   1fd34:	ldr	r0, [fp, #-208]	; 0xffffff30
   1fd38:	str	r0, [fp, #-76]	; 0xffffffb4
   1fd3c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
   1fd40:	cmp	r0, #11
   1fd44:	beq	1fd5c <test_mixed_type_union@@Base+0xa10>
   1fd48:	ldr	r0, [pc, #132]	; 1fdd4 <test_mixed_type_union@@Base+0xa88>
   1fd4c:	add	r0, pc, r0
   1fd50:	bl	12d9c <printf@plt>
   1fd54:	str	r0, [sp, #4]
   1fd58:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fd5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1fd60:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1fd64:	bl	211fc <test_mixed_type_union@@Base+0x1eb0>
   1fd68:	cmp	r0, #10
   1fd6c:	beq	1fd84 <test_mixed_type_union@@Base+0xa38>
   1fd70:	ldr	r0, [pc, #88]	; 1fdd0 <test_mixed_type_union@@Base+0xa84>
   1fd74:	add	r0, pc, r0
   1fd78:	bl	12d9c <printf@plt>
   1fd7c:	str	r0, [sp]
   1fd80:	b	1fd8c <test_mixed_type_union@@Base+0xa40>
   1fd84:	movw	r0, #0
   1fd88:	str	r0, [fp, #-32]	; 0xffffffe0
   1fd8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fd90:	bl	2e1b8 <flatcc_builder_aligned_free@@Base>
   1fd94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fd98:	str	r0, [fp, #-12]
   1fd9c:	ldr	r0, [fp, #-12]
   1fda0:	sub	sp, fp, #8
   1fda4:	pop	{r4, r5, fp, pc}
   1fda8:	andeq	r4, r1, r0, ror r4
   1fdac:	andeq	r9, r2, r0, lsl #21
   1fdb0:			; <UNDEFINED> instruction: 0x000144b0
   1fdb4:	andeq	r4, r1, r8, ror #9
   1fdb8:	andeq	r4, r1, ip, lsr #8
   1fdbc:	andeq	r4, r1, r2, lsr r4
   1fdc0:	andeq	r4, r1, r2, lsl r4
   1fdc4:	andeq	r4, r1, r2, lsl r4
   1fdc8:	ldrdeq	r4, [r1], -r8
   1fdcc:	andeq	r4, r1, r8, ror r3
   1fdd0:	andeq	r4, r1, r3, ror #3
   1fdd4:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   1fdd8:	andeq	r4, r1, r3, lsr #4
   1fddc:	andeq	r4, r1, r4, asr #4
   1fde0:	andeq	r4, r1, r4, ror #4
   1fde4:	andeq	r4, r1, r6, lsl #5
   1fde8:	andeq	r4, r1, r8, lsr #5
   1fdec:	andeq	r4, r1, sp, lsr #5
   1fdf0:	andeq	r4, r1, r1, asr #5
   1fdf4:	ldrdeq	r4, [r1], -r1
   1fdf8:	strdeq	r4, [r1], -r2
   1fdfc:	strdeq	r4, [r1], -r1
   1fe00:	strdeq	r4, [r1], -fp
   1fe04:	andeq	r4, r1, sp, lsl #6
   1fe08:	andeq	r4, r1, r6, lsl r3
   1fe0c:	andeq	r4, r1, r5, lsr r3
   1fe10:	andeq	r4, r1, r4, ror #6
   1fe14:	andeq	r4, r1, fp, lsl #7
   1fe18:	andeq	r4, r1, r7, asr #7
   1fe1c:	strdeq	r4, [r1], -r5
   1fe20:	strdeq	r4, [r1], -sl
   1fe24:	andeq	r4, r1, r2, lsr #8
   1fe28:	andeq	r4, r1, sl, lsl r4
   1fe2c:	andeq	r4, r1, sp, lsl #8
   1fe30:	andeq	r4, r1, r6, lsl #8
   1fe34:	andeq	r4, r1, r6, lsl #8
   1fe38:	andeq	r4, r1, r2, lsr #8
   1fe3c:	andeq	r4, r1, r9, lsr #8
   1fe40:	andeq	r4, r1, pc, lsl r6
   1fe44:			; <UNDEFINED> instruction: 0x000145b2
   1fe48:	andeq	r4, r1, fp, lsl #3
   1fe4c:	andeq	r4, r1, fp, lsr #2
   1fe50:	ldrdeq	r4, [r1], -r7
   1fe54:	andeq	r3, r1, r6, lsr #30
   1fe58:	muleq	r1, r6, lr
   1fe5c:	push	{fp, lr}
   1fe60:	mov	fp, sp
   1fe64:	sub	sp, sp, #8
   1fe68:	ldr	r1, [pc, #56]	; 1fea8 <test_mixed_type_union@@Base+0xb5c>
   1fe6c:	add	r1, pc, r1
   1fe70:	str	r0, [sp, #4]
   1fe74:	ldr	r0, [sp, #4]
   1fe78:	bl	148dc <test_empty_monster@@Base+0x198>
   1fe7c:	cmp	r0, #0
   1fe80:	beq	1fe90 <test_mixed_type_union@@Base+0xb44>
   1fe84:	mvn	r0, #0
   1fe88:	str	r0, [sp]
   1fe8c:	b	1fe9c <test_mixed_type_union@@Base+0xb50>
   1fe90:	ldr	r0, [sp, #4]
   1fe94:	bl	277a0 <main@@Base+0x43ec>
   1fe98:	str	r0, [sp]
   1fe9c:	ldr	r0, [sp]
   1fea0:	mov	sp, fp
   1fea4:	pop	{fp, pc}
   1fea8:	andeq	r1, r1, r8, ror #26
   1feac:	push	{fp, lr}
   1feb0:	mov	fp, sp
   1feb4:	sub	sp, sp, #24
   1feb8:	str	r0, [fp, #-8]
   1febc:	str	r1, [sp, #12]
   1fec0:	ldr	r0, [fp, #-8]
   1fec4:	bl	277c4 <main@@Base+0x4410>
   1fec8:	str	r0, [sp, #8]
   1fecc:	ldr	r0, [sp, #8]
   1fed0:	movw	r1, #0
   1fed4:	cmp	r0, r1
   1fed8:	bne	1fee8 <test_mixed_type_union@@Base+0xb9c>
   1fedc:	movw	r0, #0
   1fee0:	str	r0, [fp, #-4]
   1fee4:	b	1ff08 <test_mixed_type_union@@Base+0xbbc>
   1fee8:	ldr	r0, [sp, #8]
   1feec:	ldr	r1, [sp, #12]
   1fef0:	bl	277f0 <main@@Base+0x443c>
   1fef4:	ldr	r1, [fp, #-8]
   1fef8:	str	r0, [sp, #4]
   1fefc:	mov	r0, r1
   1ff00:	bl	27824 <main@@Base+0x4470>
   1ff04:	str	r0, [fp, #-4]
   1ff08:	ldr	r0, [fp, #-4]
   1ff0c:	mov	sp, fp
   1ff10:	pop	{fp, pc}
   1ff14:	push	{fp, lr}
   1ff18:	mov	fp, sp
   1ff1c:	sub	sp, sp, #24
   1ff20:	str	r0, [fp, #-8]
   1ff24:	strh	r1, [fp, #-10]
   1ff28:	ldr	r0, [fp, #-8]
   1ff2c:	bl	27844 <main@@Base+0x4490>
   1ff30:	str	r0, [sp, #8]
   1ff34:	ldr	r0, [sp, #8]
   1ff38:	movw	r1, #0
   1ff3c:	cmp	r0, r1
   1ff40:	bne	1ff50 <test_mixed_type_union@@Base+0xc04>
   1ff44:	movw	r0, #0
   1ff48:	str	r0, [fp, #-4]
   1ff4c:	b	1ff70 <test_mixed_type_union@@Base+0xc24>
   1ff50:	ldr	r0, [sp, #8]
   1ff54:	ldrh	r1, [fp, #-10]
   1ff58:	bl	27870 <main@@Base+0x44bc>
   1ff5c:	ldr	r1, [fp, #-8]
   1ff60:	str	r0, [sp, #4]
   1ff64:	mov	r0, r1
   1ff68:	bl	278a4 <main@@Base+0x44f0>
   1ff6c:	str	r0, [fp, #-4]
   1ff70:	ldr	r0, [fp, #-4]
   1ff74:	mov	sp, fp
   1ff78:	pop	{fp, pc}
   1ff7c:	sub	sp, sp, #4
   1ff80:	str	r1, [sp]
   1ff84:	movw	r1, #8
   1ff88:	strb	r1, [r0]
   1ff8c:	ldr	r1, [sp]
   1ff90:	str	r1, [r0, #4]
   1ff94:	add	sp, sp, #4
   1ff98:	bx	lr
   1ff9c:	push	{fp, lr}
   1ffa0:	mov	fp, sp
   1ffa4:	sub	sp, sp, #32
   1ffa8:	str	r0, [fp, #-4]
   1ffac:	strh	r1, [fp, #-6]
   1ffb0:	ldr	r0, [fp, #-4]
   1ffb4:	ldrh	r1, [fp, #-6]
   1ffb8:	bl	1ff14 <test_mixed_type_union@@Base+0xbc8>
   1ffbc:	str	r0, [fp, #-12]
   1ffc0:	ldr	r0, [fp, #-12]
   1ffc4:	cmp	r0, #0
   1ffc8:	beq	1fffc <test_mixed_type_union@@Base+0xcb0>
   1ffcc:	ldr	r0, [fp, #-4]
   1ffd0:	ldr	r1, [fp, #-12]
   1ffd4:	add	r2, sp, #12
   1ffd8:	str	r0, [sp, #8]
   1ffdc:	mov	r0, r2
   1ffe0:	bl	1ff7c <test_mixed_type_union@@Base+0xc30>
   1ffe4:	ldr	r1, [sp, #12]
   1ffe8:	ldr	r2, [sp, #16]
   1ffec:	ldr	r0, [sp, #8]
   1fff0:	bl	278c4 <main@@Base+0x4510>
   1fff4:	str	r0, [sp, #4]
   1fff8:	b	20008 <test_mixed_type_union@@Base+0xcbc>
   1fffc:	mvn	r0, #0
   20000:	str	r0, [sp, #4]
   20004:	b	20008 <test_mixed_type_union@@Base+0xcbc>
   20008:	ldr	r0, [sp, #4]
   2000c:	mov	sp, fp
   20010:	pop	{fp, pc}
   20014:	push	{fp, lr}
   20018:	mov	fp, sp
   2001c:	sub	sp, sp, #24
   20020:	str	r0, [fp, #-4]
   20024:	str	r1, [fp, #-8]
   20028:	ldr	r0, [fp, #-4]
   2002c:	ldr	r1, [fp, #-8]
   20030:	add	r2, sp, #8
   20034:	str	r0, [sp, #4]
   20038:	mov	r0, r2
   2003c:	bl	1ff7c <test_mixed_type_union@@Base+0xc30>
   20040:	ldr	r1, [sp, #8]
   20044:	ldr	r2, [sp, #12]
   20048:	ldr	r0, [sp, #4]
   2004c:	bl	27988 <main@@Base+0x45d4>
   20050:	mov	sp, fp
   20054:	pop	{fp, pc}
   20058:	push	{fp, lr}
   2005c:	mov	fp, sp
   20060:	sub	sp, sp, #16
   20064:	str	r0, [sp, #8]
   20068:	str	r1, [sp, #4]
   2006c:	ldr	r0, [sp, #8]
   20070:	bl	27a4c <main@@Base+0x4698>
   20074:	cmp	r0, #0
   20078:	bne	20090 <test_mixed_type_union@@Base+0xd44>
   2007c:	ldr	r0, [sp, #8]
   20080:	ldr	r1, [sp, #4]
   20084:	bl	27a70 <main@@Base+0x46bc>
   20088:	cmp	r0, #0
   2008c:	beq	2009c <test_mixed_type_union@@Base+0xd50>
   20090:	movw	r0, #0
   20094:	str	r0, [fp, #-4]
   20098:	b	200a8 <test_mixed_type_union@@Base+0xd5c>
   2009c:	ldr	r0, [sp, #8]
   200a0:	bl	27af4 <main@@Base+0x4740>
   200a4:	str	r0, [fp, #-4]
   200a8:	ldr	r0, [fp, #-4]
   200ac:	mov	sp, fp
   200b0:	pop	{fp, pc}
   200b4:	push	{fp, lr}
   200b8:	mov	fp, sp
   200bc:	sub	sp, sp, #24
   200c0:	str	r0, [fp, #-4]
   200c4:	str	r1, [fp, #-8]
   200c8:	ldr	r0, [fp, #-4]
   200cc:	ldr	r1, [fp, #-8]
   200d0:	add	r2, sp, #8
   200d4:	str	r0, [sp, #4]
   200d8:	mov	r0, r2
   200dc:	bl	27c28 <main@@Base+0x4874>
   200e0:	ldr	r1, [sp, #8]
   200e4:	ldr	r2, [sp, #12]
   200e8:	ldr	r0, [sp, #4]
   200ec:	bl	27b64 <main@@Base+0x47b0>
   200f0:	mov	sp, fp
   200f4:	pop	{fp, pc}
   200f8:	push	{fp, lr}
   200fc:	mov	fp, sp
   20100:	sub	sp, sp, #16
   20104:	str	r0, [fp, #-4]
   20108:	str	r1, [sp, #8]
   2010c:	ldr	r0, [fp, #-4]
   20110:	ldr	r1, [fp, #-4]
   20114:	ldr	r2, [sp, #8]
   20118:	str	r0, [sp, #4]
   2011c:	mov	r0, r1
   20120:	mov	r1, r2
   20124:	bl	2d604 <flatcc_builder_create_string_str@@Base>
   20128:	ldr	r1, [sp, #4]
   2012c:	str	r0, [sp]
   20130:	mov	r0, r1
   20134:	ldr	r1, [sp]
   20138:	bl	27c48 <main@@Base+0x4894>
   2013c:	mov	sp, fp
   20140:	pop	{fp, pc}
   20144:	push	{fp, lr}
   20148:	mov	fp, sp
   2014c:	sub	sp, sp, #8
   20150:	str	r0, [sp, #4]
   20154:	ldr	r0, [sp, #4]
   20158:	bl	2cf9c <flatcc_builder_start_union_vector@@Base>
   2015c:	mov	sp, fp
   20160:	pop	{fp, pc}
   20164:	push	{fp, lr}
   20168:	mov	fp, sp
   2016c:	sub	sp, sp, #16
   20170:	str	r1, [sp, #8]
   20174:	str	r2, [sp, #12]
   20178:	str	r0, [sp, #4]
   2017c:	ldr	r0, [sp, #4]
   20180:	ldr	r1, [sp, #8]
   20184:	ldr	r2, [sp, #12]
   20188:	bl	2d318 <flatcc_builder_union_vector_push@@Base>
   2018c:	mov	sp, fp
   20190:	pop	{fp, pc}
   20194:	push	{fp, lr}
   20198:	mov	fp, sp
   2019c:	sub	sp, sp, #24
   201a0:	str	r0, [fp, #-4]
   201a4:	str	r1, [fp, #-8]
   201a8:	ldr	r0, [fp, #-4]
   201ac:	ldr	r1, [fp, #-8]
   201b0:	add	r2, sp, #8
   201b4:	str	r0, [sp, #4]
   201b8:	mov	r0, r2
   201bc:	bl	27c28 <main@@Base+0x4874>
   201c0:	ldr	r1, [sp, #8]
   201c4:	ldr	r2, [sp, #12]
   201c8:	ldr	r0, [sp, #4]
   201cc:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   201d0:	mov	sp, fp
   201d4:	pop	{fp, pc}
   201d8:	push	{fp, lr}
   201dc:	mov	fp, sp
   201e0:	sub	sp, sp, #24
   201e4:	str	r0, [fp, #-4]
   201e8:	str	r1, [fp, #-8]
   201ec:	ldr	r0, [fp, #-4]
   201f0:	ldr	r1, [fp, #-8]
   201f4:	str	r0, [sp, #4]
   201f8:	bl	20058 <test_mixed_type_union@@Base+0xd0c>
   201fc:	add	r1, sp, #8
   20200:	str	r0, [sp]
   20204:	mov	r0, r1
   20208:	ldr	r1, [sp]
   2020c:	bl	27c28 <main@@Base+0x4874>
   20210:	ldr	r1, [sp, #8]
   20214:	ldr	r2, [sp, #12]
   20218:	ldr	r0, [sp, #4]
   2021c:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   20220:	mov	sp, fp
   20224:	pop	{fp, pc}
   20228:	push	{fp, lr}
   2022c:	mov	fp, sp
   20230:	sub	sp, sp, #16
   20234:	str	r1, [sp, #8]
   20238:	str	r2, [sp, #12]
   2023c:	str	r0, [sp, #4]
   20240:	ldr	r0, [sp, #4]
   20244:	ldr	r1, [sp, #8]
   20248:	ldr	r2, [sp, #12]
   2024c:	bl	2d318 <flatcc_builder_union_vector_push@@Base>
   20250:	mov	sp, fp
   20254:	pop	{fp, pc}
   20258:	sub	sp, sp, #4
   2025c:	str	r1, [sp]
   20260:	movw	r1, #11
   20264:	strb	r1, [r0]
   20268:	ldr	r1, [sp]
   2026c:	str	r1, [r0, #4]
   20270:	add	sp, sp, #4
   20274:	bx	lr
   20278:	push	{fp, lr}
   2027c:	mov	fp, sp
   20280:	sub	sp, sp, #24
   20284:	str	r0, [fp, #-4]
   20288:	str	r1, [fp, #-8]
   2028c:	ldr	r0, [fp, #-4]
   20290:	ldr	r1, [fp, #-8]
   20294:	add	r2, sp, #8
   20298:	str	r0, [sp, #4]
   2029c:	mov	r0, r2
   202a0:	bl	27d50 <main@@Base+0x499c>
   202a4:	ldr	r1, [sp, #8]
   202a8:	ldr	r2, [sp, #12]
   202ac:	ldr	r0, [sp, #4]
   202b0:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   202b4:	mov	sp, fp
   202b8:	pop	{fp, pc}
   202bc:	push	{fp, lr}
   202c0:	mov	fp, sp
   202c4:	sub	sp, sp, #8
   202c8:	str	r0, [sp, #4]
   202cc:	ldr	r0, [sp, #4]
   202d0:	bl	277c4 <main@@Base+0x4410>
   202d4:	mov	sp, fp
   202d8:	pop	{fp, pc}
   202dc:	push	{fp, lr}
   202e0:	mov	fp, sp
   202e4:	sub	sp, sp, #24
   202e8:	str	r0, [fp, #-4]
   202ec:	ldr	r0, [fp, #-4]
   202f0:	str	r0, [sp, #8]
   202f4:	bl	27d70 <main@@Base+0x49bc>
   202f8:	add	lr, sp, #12
   202fc:	str	r0, [sp, #4]
   20300:	mov	r0, lr
   20304:	ldr	r1, [sp, #4]
   20308:	bl	27d50 <main@@Base+0x499c>
   2030c:	ldr	r1, [sp, #12]
   20310:	ldr	r2, [sp, #16]
   20314:	ldr	r0, [sp, #8]
   20318:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   2031c:	mov	sp, fp
   20320:	pop	{fp, pc}
   20324:	push	{fp, lr}
   20328:	mov	fp, sp
   2032c:	sub	sp, sp, #24
   20330:	str	r0, [fp, #-4]
   20334:	str	r1, [fp, #-8]
   20338:	ldr	r0, [fp, #-4]
   2033c:	ldr	r1, [fp, #-8]
   20340:	str	r0, [sp, #4]
   20344:	bl	1feac <test_mixed_type_union@@Base+0xb60>
   20348:	add	r1, sp, #8
   2034c:	str	r0, [sp]
   20350:	mov	r0, r1
   20354:	ldr	r1, [sp]
   20358:	bl	27d50 <main@@Base+0x499c>
   2035c:	ldr	r1, [sp, #8]
   20360:	ldr	r2, [sp, #12]
   20364:	ldr	r0, [sp, #4]
   20368:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   2036c:	mov	sp, fp
   20370:	pop	{fp, pc}
   20374:	push	{fp, lr}
   20378:	mov	fp, sp
   2037c:	sub	sp, sp, #24
   20380:	str	r0, [fp, #-4]
   20384:	str	r1, [fp, #-8]
   20388:	ldr	r0, [fp, #-4]
   2038c:	ldr	r1, [fp, #-8]
   20390:	add	r2, sp, #8
   20394:	str	r0, [sp, #4]
   20398:	mov	r0, r2
   2039c:	bl	20258 <test_mixed_type_union@@Base+0xf0c>
   203a0:	ldr	r1, [sp, #8]
   203a4:	ldr	r2, [sp, #12]
   203a8:	ldr	r0, [sp, #4]
   203ac:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   203b0:	mov	sp, fp
   203b4:	pop	{fp, pc}
   203b8:	push	{fp, lr}
   203bc:	mov	fp, sp
   203c0:	sub	sp, sp, #24
   203c4:	str	r0, [fp, #-4]
   203c8:	str	r1, [fp, #-8]
   203cc:	ldr	r0, [fp, #-4]
   203d0:	ldr	r1, [fp, #-8]
   203d4:	str	r0, [sp, #4]
   203d8:	bl	19538 <gen_monster@@Base+0xf54>
   203dc:	add	r1, sp, #8
   203e0:	str	r0, [sp]
   203e4:	mov	r0, r1
   203e8:	ldr	r1, [sp]
   203ec:	bl	20258 <test_mixed_type_union@@Base+0xf0c>
   203f0:	ldr	r1, [sp, #8]
   203f4:	ldr	r2, [sp, #12]
   203f8:	ldr	r0, [sp, #4]
   203fc:	bl	20228 <test_mixed_type_union@@Base+0xedc>
   20400:	mov	sp, fp
   20404:	pop	{fp, pc}
   20408:	push	{fp, lr}
   2040c:	mov	fp, sp
   20410:	sub	sp, sp, #16
   20414:	str	r0, [fp, #-4]
   20418:	ldr	r0, [fp, #-4]
   2041c:	add	r1, sp, #4
   20420:	str	r0, [sp]
   20424:	mov	r0, r1
   20428:	ldr	r1, [sp]
   2042c:	bl	2d020 <flatcc_builder_end_union_vector@@Base>
   20430:	ldr	r1, [sp, #4]
   20434:	ldr	r2, [sp, #8]
   20438:	ldr	r0, [sp]
   2043c:	bl	27d90 <main@@Base+0x49dc>
   20440:	mov	sp, fp
   20444:	pop	{fp, pc}
   20448:	push	{fp, lr}
   2044c:	mov	fp, sp
   20450:	sub	sp, sp, #16
   20454:	str	r0, [fp, #-4]
   20458:	ldr	r0, [fp, #-4]
   2045c:	ldr	r1, [fp, #-4]
   20460:	str	r0, [sp, #8]
   20464:	mov	r0, r1
   20468:	bl	27e64 <main@@Base+0x4ab0>
   2046c:	ldr	r1, [sp, #8]
   20470:	str	r0, [sp, #4]
   20474:	mov	r0, r1
   20478:	ldr	r1, [sp, #4]
   2047c:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   20480:	mov	sp, fp
   20484:	pop	{fp, pc}
   20488:	push	{fp, lr}
   2048c:	mov	fp, sp
   20490:	sub	sp, sp, #8
   20494:	ldr	r2, [pc, #36]	; 204c0 <test_mixed_type_union@@Base+0x1174>
   20498:	add	r2, pc, r2
   2049c:	ldr	r3, [pc, #32]	; 204c4 <test_mixed_type_union@@Base+0x1178>
   204a0:	add	r3, pc, r3
   204a4:	str	r0, [sp, #4]
   204a8:	str	r1, [sp]
   204ac:	ldr	r0, [sp, #4]
   204b0:	ldr	r1, [sp]
   204b4:	bl	30c18 <flatcc_verify_table_as_root@@Base>
   204b8:	mov	sp, fp
   204bc:	pop	{fp, pc}
   204c0:	andeq	r1, r1, ip, lsr r7
   204c4:	andeq	r5, r0, ip, ror r2
   204c8:	push	{fp, lr}
   204cc:	mov	fp, sp
   204d0:	sub	sp, sp, #16
   204d4:	ldr	r1, [pc, #100]	; 20540 <test_mixed_type_union@@Base+0x11f4>
   204d8:	add	r1, pc, r1
   204dc:	str	r0, [fp, #-4]
   204e0:	str	r1, [sp, #8]
   204e4:	ldr	r0, [fp, #-4]
   204e8:	movw	r1, #0
   204ec:	cmp	r0, r1
   204f0:	beq	20508 <test_mixed_type_union@@Base+0x11bc>
   204f4:	ldr	r0, [fp, #-4]
   204f8:	ldr	r1, [sp, #8]
   204fc:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   20500:	cmp	r0, #0
   20504:	bne	20514 <test_mixed_type_union@@Base+0x11c8>
   20508:	movw	r0, #0
   2050c:	str	r0, [sp, #4]
   20510:	b	20534 <test_mixed_type_union@@Base+0x11e8>
   20514:	ldr	r0, [fp, #-4]
   20518:	ldr	r1, [fp, #-4]
   2051c:	str	r0, [sp]
   20520:	mov	r0, r1
   20524:	bl	2386c <main@@Base+0x4b8>
   20528:	ldr	r1, [sp]
   2052c:	add	r0, r1, r0
   20530:	str	r0, [sp, #4]
   20534:	ldr	r0, [sp, #4]
   20538:	mov	sp, fp
   2053c:	pop	{fp, pc}
   20540:	strdeq	r1, [r1], -ip
   20544:	push	{fp, lr}
   20548:	mov	fp, sp
   2054c:	sub	sp, sp, #16
   20550:	str	r0, [fp, #-4]
   20554:	movw	r0, #0
   20558:	strh	r0, [fp, #-6]
   2055c:	ldr	r0, [fp, #-4]
   20560:	movw	r1, #0
   20564:	cmp	r0, r1
   20568:	beq	20574 <test_mixed_type_union@@Base+0x1228>
   2056c:	b	20570 <test_mixed_type_union@@Base+0x1224>
   20570:	b	20594 <test_mixed_type_union@@Base+0x1248>
   20574:	ldr	r0, [pc, #136]	; 20604 <test_mixed_type_union@@Base+0x12b8>
   20578:	add	r0, pc, r0
   2057c:	ldr	r1, [pc, #132]	; 20608 <test_mixed_type_union@@Base+0x12bc>
   20580:	add	r1, pc, r1
   20584:	ldr	r2, [pc, #128]	; 2060c <test_mixed_type_union@@Base+0x12c0>
   20588:	add	r3, pc, r2
   2058c:	movw	r2, #819	; 0x333
   20590:	bl	12e68 <__assert_fail@plt>
   20594:	mov	r0, #1
   20598:	strh	r0, [sp, #8]
   2059c:	ldr	r0, [fp, #-4]
   205a0:	str	r0, [sp]
   205a4:	bl	238a4 <main@@Base+0x4f0>
   205a8:	ldr	lr, [sp]
   205ac:	sub	r0, lr, r0
   205b0:	str	r0, [sp, #4]
   205b4:	ldr	r0, [sp, #4]
   205b8:	bl	238c8 <main@@Base+0x514>
   205bc:	ldrh	lr, [sp, #8]
   205c0:	add	lr, lr, #3
   205c4:	lsl	lr, lr, #1
   205c8:	cmp	r0, lr
   205cc:	bcc	205e8 <test_mixed_type_union@@Base+0x129c>
   205d0:	ldr	r0, [sp, #4]
   205d4:	ldrh	r1, [sp, #8]
   205d8:	add	r0, r0, r1, lsl #1
   205dc:	add	r0, r0, #4
   205e0:	bl	238c8 <main@@Base+0x514>
   205e4:	strh	r0, [fp, #-6]
   205e8:	ldrh	r0, [fp, #-6]
   205ec:	cmp	r0, #0
   205f0:	movw	r0, #0
   205f4:	movne	r0, #1
   205f8:	and	r0, r0, #1
   205fc:	mov	sp, fp
   20600:	pop	{fp, pc}
   20604:	andeq	r3, r1, r1, ror pc
   20608:	andeq	r3, r1, pc, lsl #31
   2060c:			; <UNDEFINED> instruction: 0x000159b5
   20610:	push	{fp, lr}
   20614:	mov	fp, sp
   20618:	sub	sp, sp, #16
   2061c:	str	r0, [fp, #-4]
   20620:	movw	r0, #0
   20624:	strh	r0, [fp, #-6]
   20628:	ldr	r0, [fp, #-4]
   2062c:	movw	r1, #0
   20630:	cmp	r0, r1
   20634:	beq	20640 <test_mixed_type_union@@Base+0x12f4>
   20638:	b	2063c <test_mixed_type_union@@Base+0x12f0>
   2063c:	b	20660 <test_mixed_type_union@@Base+0x1314>
   20640:	ldr	r0, [pc, #136]	; 206d0 <test_mixed_type_union@@Base+0x1384>
   20644:	add	r0, pc, r0
   20648:	ldr	r1, [pc, #132]	; 206d4 <test_mixed_type_union@@Base+0x1388>
   2064c:	add	r1, pc, r1
   20650:	ldr	r2, [pc, #128]	; 206d8 <test_mixed_type_union@@Base+0x138c>
   20654:	add	r3, pc, r2
   20658:	movw	r2, #823	; 0x337
   2065c:	bl	12e68 <__assert_fail@plt>
   20660:	mov	r0, #9
   20664:	strh	r0, [sp, #8]
   20668:	ldr	r0, [fp, #-4]
   2066c:	str	r0, [sp]
   20670:	bl	238a4 <main@@Base+0x4f0>
   20674:	ldr	lr, [sp]
   20678:	sub	r0, lr, r0
   2067c:	str	r0, [sp, #4]
   20680:	ldr	r0, [sp, #4]
   20684:	bl	238c8 <main@@Base+0x514>
   20688:	ldrh	lr, [sp, #8]
   2068c:	add	lr, lr, #3
   20690:	lsl	lr, lr, #1
   20694:	cmp	r0, lr
   20698:	bcc	206b4 <test_mixed_type_union@@Base+0x1368>
   2069c:	ldr	r0, [sp, #4]
   206a0:	ldrh	r1, [sp, #8]
   206a4:	add	r0, r0, r1, lsl #1
   206a8:	add	r0, r0, #4
   206ac:	bl	238c8 <main@@Base+0x514>
   206b0:	strh	r0, [fp, #-6]
   206b4:	ldrh	r0, [fp, #-6]
   206b8:	cmp	r0, #0
   206bc:	movw	r0, #0
   206c0:	movne	r0, #1
   206c4:	and	r0, r0, #1
   206c8:	mov	sp, fp
   206cc:	pop	{fp, pc}
   206d0:	andeq	r3, r1, r5, lsr #29
   206d4:	andeq	r3, r1, r3, asr #29
   206d8:	andeq	r5, r1, ip, lsr #18
   206dc:	push	{fp, lr}
   206e0:	mov	fp, sp
   206e4:	sub	sp, sp, #8
   206e8:	str	r1, [sp, #4]
   206ec:	mov	r1, r0
   206f0:	str	r0, [sp]
   206f4:	mov	r0, r1
   206f8:	movw	r1, #0
   206fc:	and	r1, r1, #255	; 0xff
   20700:	movw	r2, #8
   20704:	bl	12e2c <memset@plt>
   20708:	ldr	r0, [sp, #4]
   2070c:	bl	27ed4 <main@@Base+0x4b20>
   20710:	ldr	r1, [sp]
   20714:	strb	r0, [r1]
   20718:	ldrb	r0, [r1]
   2071c:	cmp	r0, #0
   20720:	bne	20728 <test_mixed_type_union@@Base+0x13dc>
   20724:	b	20738 <test_mixed_type_union@@Base+0x13ec>
   20728:	ldr	r0, [sp, #4]
   2072c:	bl	27fc8 <main@@Base+0x4c14>
   20730:	ldr	lr, [sp]
   20734:	str	r0, [lr, #4]
   20738:	mov	sp, fp
   2073c:	pop	{fp, pc}
   20740:	push	{fp, lr}
   20744:	mov	fp, sp
   20748:	sub	sp, sp, #8
   2074c:	str	r0, [sp, #4]
   20750:	ldr	r0, [sp, #4]
   20754:	movw	r1, #0
   20758:	cmp	r0, r1
   2075c:	beq	20774 <test_mixed_type_union@@Base+0x1428>
   20760:	ldr	r0, [sp, #4]
   20764:	bl	24880 <main@@Base+0x14cc>
   20768:	uxth	r0, r0
   2076c:	str	r0, [sp]
   20770:	b	20780 <test_mixed_type_union@@Base+0x1434>
   20774:	movw	r0, #0
   20778:	str	r0, [sp]
   2077c:	b	20780 <test_mixed_type_union@@Base+0x1434>
   20780:	ldr	r0, [sp]
   20784:	uxth	r0, r0
   20788:	mov	sp, fp
   2078c:	pop	{fp, pc}
   20790:	push	{fp, lr}
   20794:	mov	fp, sp
   20798:	sub	sp, sp, #24
   2079c:	str	r0, [fp, #-4]
   207a0:	movw	r0, #0
   207a4:	strh	r0, [fp, #-6]
   207a8:	ldr	r0, [fp, #-4]
   207ac:	movw	r1, #0
   207b0:	cmp	r0, r1
   207b4:	beq	207c0 <test_mixed_type_union@@Base+0x1474>
   207b8:	b	207bc <test_mixed_type_union@@Base+0x1470>
   207bc:	b	207e0 <test_mixed_type_union@@Base+0x1494>
   207c0:	ldr	r0, [pc, #176]	; 20878 <test_mixed_type_union@@Base+0x152c>
   207c4:	add	r0, pc, r0
   207c8:	ldr	r1, [pc, #172]	; 2087c <test_mixed_type_union@@Base+0x1530>
   207cc:	add	r1, pc, r1
   207d0:	ldr	r2, [pc, #168]	; 20880 <test_mixed_type_union@@Base+0x1534>
   207d4:	add	r3, pc, r2
   207d8:	movw	r2, #822	; 0x336
   207dc:	bl	12e68 <__assert_fail@plt>
   207e0:	mov	r0, #6
   207e4:	strh	r0, [fp, #-8]
   207e8:	ldr	r0, [fp, #-4]
   207ec:	str	r0, [sp, #8]
   207f0:	bl	238a4 <main@@Base+0x4f0>
   207f4:	ldr	lr, [sp, #8]
   207f8:	sub	r0, lr, r0
   207fc:	str	r0, [sp, #12]
   20800:	ldr	r0, [sp, #12]
   20804:	bl	238c8 <main@@Base+0x514>
   20808:	ldrh	lr, [fp, #-8]
   2080c:	add	lr, lr, #3
   20810:	lsl	lr, lr, #1
   20814:	cmp	r0, lr
   20818:	bcc	20834 <test_mixed_type_union@@Base+0x14e8>
   2081c:	ldr	r0, [sp, #12]
   20820:	ldrh	r1, [fp, #-8]
   20824:	add	r0, r0, r1, lsl #1
   20828:	add	r0, r0, #4
   2082c:	bl	238c8 <main@@Base+0x514>
   20830:	strh	r0, [fp, #-6]
   20834:	ldrh	r0, [fp, #-6]
   20838:	cmp	r0, #0
   2083c:	beq	2085c <test_mixed_type_union@@Base+0x1510>
   20840:	ldr	r0, [fp, #-4]
   20844:	ldrh	r1, [fp, #-6]
   20848:	add	r0, r0, r1
   2084c:	bl	260c8 <main@@Base+0x2d14>
   20850:	and	r0, r0, #255	; 0xff
   20854:	str	r0, [sp, #4]
   20858:	b	20868 <test_mixed_type_union@@Base+0x151c>
   2085c:	movw	r0, #0
   20860:	str	r0, [sp, #4]
   20864:	b	20868 <test_mixed_type_union@@Base+0x151c>
   20868:	ldr	r0, [sp, #4]
   2086c:	and	r0, r0, #255	; 0xff
   20870:	mov	sp, fp
   20874:	pop	{fp, pc}
   20878:	andeq	r3, r1, r5, lsr #26
   2087c:	andeq	r3, r1, r3, asr #26
   20880:	andeq	r5, r1, sp, lsl #17
   20884:	push	{fp, lr}
   20888:	mov	fp, sp
   2088c:	sub	sp, sp, #32
   20890:	str	r0, [fp, #-8]
   20894:	movw	r0, #0
   20898:	strh	r0, [fp, #-14]
   2089c:	ldr	r0, [fp, #-8]
   208a0:	movw	r1, #0
   208a4:	cmp	r0, r1
   208a8:	beq	208b4 <test_mixed_type_union@@Base+0x1568>
   208ac:	b	208b0 <test_mixed_type_union@@Base+0x1564>
   208b0:	b	208d4 <test_mixed_type_union@@Base+0x1588>
   208b4:	ldr	r0, [pc, #192]	; 2097c <test_mixed_type_union@@Base+0x1630>
   208b8:	add	r0, pc, r0
   208bc:	ldr	r1, [pc, #188]	; 20980 <test_mixed_type_union@@Base+0x1634>
   208c0:	add	r1, pc, r1
   208c4:	ldr	r2, [pc, #184]	; 20984 <test_mixed_type_union@@Base+0x1638>
   208c8:	add	r3, pc, r2
   208cc:	movw	r2, #822	; 0x336
   208d0:	bl	12e68 <__assert_fail@plt>
   208d4:	mov	r0, #7
   208d8:	strh	r0, [sp, #16]
   208dc:	ldr	r0, [fp, #-8]
   208e0:	str	r0, [sp, #8]
   208e4:	bl	238a4 <main@@Base+0x4f0>
   208e8:	ldr	lr, [sp, #8]
   208ec:	sub	r0, lr, r0
   208f0:	str	r0, [sp, #12]
   208f4:	ldr	r0, [sp, #12]
   208f8:	bl	238c8 <main@@Base+0x514>
   208fc:	ldrh	lr, [sp, #16]
   20900:	add	lr, lr, #3
   20904:	lsl	lr, lr, #1
   20908:	cmp	r0, lr
   2090c:	bcc	20928 <test_mixed_type_union@@Base+0x15dc>
   20910:	ldr	r0, [sp, #12]
   20914:	ldrh	r1, [sp, #16]
   20918:	add	r0, r0, r1, lsl #1
   2091c:	add	r0, r0, #4
   20920:	bl	238c8 <main@@Base+0x514>
   20924:	strh	r0, [fp, #-14]
   20928:	ldrsh	r0, [fp, #-14]
   2092c:	cmp	r0, #0
   20930:	beq	20968 <test_mixed_type_union@@Base+0x161c>
   20934:	ldr	r0, [fp, #-8]
   20938:	ldrh	r1, [fp, #-14]
   2093c:	add	r0, r0, r1
   20940:	str	r0, [fp, #-12]
   20944:	ldr	r0, [fp, #-12]
   20948:	ldr	r1, [fp, #-12]
   2094c:	str	r0, [sp, #4]
   20950:	mov	r0, r1
   20954:	bl	2386c <main@@Base+0x4b8>
   20958:	ldr	r1, [sp, #4]
   2095c:	add	r0, r1, r0
   20960:	str	r0, [fp, #-4]
   20964:	b	20970 <test_mixed_type_union@@Base+0x1624>
   20968:	movw	r0, #0
   2096c:	str	r0, [fp, #-4]
   20970:	ldr	r0, [fp, #-4]
   20974:	mov	sp, fp
   20978:	pop	{fp, pc}
   2097c:	andeq	r3, r1, r1, lsr ip
   20980:	andeq	r3, r1, pc, asr #24
   20984:	andeq	r5, r1, r8, ror #15
   20988:	push	{fp, lr}
   2098c:	mov	fp, sp
   20990:	sub	sp, sp, #24
   20994:	str	r0, [fp, #-4]
   20998:	movw	r0, #0
   2099c:	strh	r0, [fp, #-6]
   209a0:	ldr	r0, [fp, #-4]
   209a4:	movw	r1, #0
   209a8:	cmp	r0, r1
   209ac:	beq	209b8 <test_mixed_type_union@@Base+0x166c>
   209b0:	b	209b4 <test_mixed_type_union@@Base+0x1668>
   209b4:	b	209d8 <test_mixed_type_union@@Base+0x168c>
   209b8:	ldr	r0, [pc, #176]	; 20a70 <test_mixed_type_union@@Base+0x1724>
   209bc:	add	r0, pc, r0
   209c0:	ldr	r1, [pc, #172]	; 20a74 <test_mixed_type_union@@Base+0x1728>
   209c4:	add	r1, pc, r1
   209c8:	ldr	r2, [pc, #168]	; 20a78 <test_mixed_type_union@@Base+0x172c>
   209cc:	add	r3, pc, r2
   209d0:	movw	r2, #820	; 0x334
   209d4:	bl	12e68 <__assert_fail@plt>
   209d8:	mov	r0, #2
   209dc:	strh	r0, [fp, #-8]
   209e0:	ldr	r0, [fp, #-4]
   209e4:	str	r0, [sp, #8]
   209e8:	bl	238a4 <main@@Base+0x4f0>
   209ec:	ldr	lr, [sp, #8]
   209f0:	sub	r0, lr, r0
   209f4:	str	r0, [sp, #12]
   209f8:	ldr	r0, [sp, #12]
   209fc:	bl	238c8 <main@@Base+0x514>
   20a00:	ldrh	lr, [fp, #-8]
   20a04:	add	lr, lr, #3
   20a08:	lsl	lr, lr, #1
   20a0c:	cmp	r0, lr
   20a10:	bcc	20a2c <test_mixed_type_union@@Base+0x16e0>
   20a14:	ldr	r0, [sp, #12]
   20a18:	ldrh	r1, [fp, #-8]
   20a1c:	add	r0, r0, r1, lsl #1
   20a20:	add	r0, r0, #4
   20a24:	bl	238c8 <main@@Base+0x514>
   20a28:	strh	r0, [fp, #-6]
   20a2c:	ldrh	r0, [fp, #-6]
   20a30:	cmp	r0, #0
   20a34:	beq	20a54 <test_mixed_type_union@@Base+0x1708>
   20a38:	ldr	r0, [fp, #-4]
   20a3c:	ldrh	r1, [fp, #-6]
   20a40:	add	r0, r0, r1
   20a44:	bl	260c8 <main@@Base+0x2d14>
   20a48:	and	r0, r0, #255	; 0xff
   20a4c:	str	r0, [sp, #4]
   20a50:	b	20a60 <test_mixed_type_union@@Base+0x1714>
   20a54:	movw	r0, #0
   20a58:	str	r0, [sp, #4]
   20a5c:	b	20a60 <test_mixed_type_union@@Base+0x1714>
   20a60:	ldr	r0, [sp, #4]
   20a64:	and	r0, r0, #255	; 0xff
   20a68:	mov	sp, fp
   20a6c:	pop	{fp, pc}
   20a70:	andeq	r3, r1, sp, lsr #22
   20a74:	andeq	r3, r1, fp, asr #22
   20a78:	andeq	r5, r1, r5, lsr #14
   20a7c:	push	{fp, lr}
   20a80:	mov	fp, sp
   20a84:	sub	sp, sp, #32
   20a88:	str	r0, [fp, #-8]
   20a8c:	movw	r0, #0
   20a90:	strh	r0, [fp, #-14]
   20a94:	ldr	r0, [fp, #-8]
   20a98:	movw	r1, #0
   20a9c:	cmp	r0, r1
   20aa0:	beq	20aac <test_mixed_type_union@@Base+0x1760>
   20aa4:	b	20aa8 <test_mixed_type_union@@Base+0x175c>
   20aa8:	b	20acc <test_mixed_type_union@@Base+0x1780>
   20aac:	ldr	r0, [pc, #192]	; 20b74 <test_mixed_type_union@@Base+0x1828>
   20ab0:	add	r0, pc, r0
   20ab4:	ldr	r1, [pc, #188]	; 20b78 <test_mixed_type_union@@Base+0x182c>
   20ab8:	add	r1, pc, r1
   20abc:	ldr	r2, [pc, #184]	; 20b7c <test_mixed_type_union@@Base+0x1830>
   20ac0:	add	r3, pc, r2
   20ac4:	movw	r2, #820	; 0x334
   20ac8:	bl	12e68 <__assert_fail@plt>
   20acc:	mov	r0, #3
   20ad0:	strh	r0, [sp, #16]
   20ad4:	ldr	r0, [fp, #-8]
   20ad8:	str	r0, [sp, #8]
   20adc:	bl	238a4 <main@@Base+0x4f0>
   20ae0:	ldr	lr, [sp, #8]
   20ae4:	sub	r0, lr, r0
   20ae8:	str	r0, [sp, #12]
   20aec:	ldr	r0, [sp, #12]
   20af0:	bl	238c8 <main@@Base+0x514>
   20af4:	ldrh	lr, [sp, #16]
   20af8:	add	lr, lr, #3
   20afc:	lsl	lr, lr, #1
   20b00:	cmp	r0, lr
   20b04:	bcc	20b20 <test_mixed_type_union@@Base+0x17d4>
   20b08:	ldr	r0, [sp, #12]
   20b0c:	ldrh	r1, [sp, #16]
   20b10:	add	r0, r0, r1, lsl #1
   20b14:	add	r0, r0, #4
   20b18:	bl	238c8 <main@@Base+0x514>
   20b1c:	strh	r0, [fp, #-14]
   20b20:	ldrsh	r0, [fp, #-14]
   20b24:	cmp	r0, #0
   20b28:	beq	20b60 <test_mixed_type_union@@Base+0x1814>
   20b2c:	ldr	r0, [fp, #-8]
   20b30:	ldrh	r1, [fp, #-14]
   20b34:	add	r0, r0, r1
   20b38:	str	r0, [fp, #-12]
   20b3c:	ldr	r0, [fp, #-12]
   20b40:	ldr	r1, [fp, #-12]
   20b44:	str	r0, [sp, #4]
   20b48:	mov	r0, r1
   20b4c:	bl	2386c <main@@Base+0x4b8>
   20b50:	ldr	r1, [sp, #4]
   20b54:	add	r0, r1, r0
   20b58:	str	r0, [fp, #-4]
   20b5c:	b	20b68 <test_mixed_type_union@@Base+0x181c>
   20b60:	movw	r0, #0
   20b64:	str	r0, [fp, #-4]
   20b68:	ldr	r0, [fp, #-4]
   20b6c:	mov	sp, fp
   20b70:	pop	{fp, pc}
   20b74:	andeq	r3, r1, r9, lsr sl
   20b78:	andeq	r3, r1, r7, asr sl
   20b7c:	andeq	r5, r1, r5, lsl #13
   20b80:	push	{fp, lr}
   20b84:	mov	fp, sp
   20b88:	sub	sp, sp, #24
   20b8c:	str	r0, [fp, #-4]
   20b90:	movw	r0, #0
   20b94:	strh	r0, [fp, #-6]
   20b98:	ldr	r0, [fp, #-4]
   20b9c:	movw	r1, #0
   20ba0:	cmp	r0, r1
   20ba4:	beq	20bb0 <test_mixed_type_union@@Base+0x1864>
   20ba8:	b	20bac <test_mixed_type_union@@Base+0x1860>
   20bac:	b	20bd0 <test_mixed_type_union@@Base+0x1884>
   20bb0:	ldr	r0, [pc, #168]	; 20c60 <test_mixed_type_union@@Base+0x1914>
   20bb4:	add	r0, pc, r0
   20bb8:	ldr	r1, [pc, #164]	; 20c64 <test_mixed_type_union@@Base+0x1918>
   20bbc:	add	r1, pc, r1
   20bc0:	ldr	r2, [pc, #160]	; 20c68 <test_mixed_type_union@@Base+0x191c>
   20bc4:	add	r3, pc, r2
   20bc8:	movw	r2, #770	; 0x302
   20bcc:	bl	12e68 <__assert_fail@plt>
   20bd0:	mov	r0, #0
   20bd4:	strh	r0, [fp, #-8]
   20bd8:	ldr	r0, [fp, #-4]
   20bdc:	str	r0, [sp, #8]
   20be0:	bl	238a4 <main@@Base+0x4f0>
   20be4:	ldr	lr, [sp, #8]
   20be8:	sub	r0, lr, r0
   20bec:	str	r0, [sp, #12]
   20bf0:	ldr	r0, [sp, #12]
   20bf4:	bl	238c8 <main@@Base+0x514>
   20bf8:	ldrh	lr, [fp, #-8]
   20bfc:	add	lr, lr, #3
   20c00:	lsl	lr, lr, #1
   20c04:	cmp	r0, lr
   20c08:	bcc	20c24 <test_mixed_type_union@@Base+0x18d8>
   20c0c:	ldr	r0, [sp, #12]
   20c10:	ldrh	r1, [fp, #-8]
   20c14:	add	r0, r0, r1, lsl #1
   20c18:	add	r0, r0, #4
   20c1c:	bl	238c8 <main@@Base+0x514>
   20c20:	strh	r0, [fp, #-6]
   20c24:	ldrh	r0, [fp, #-6]
   20c28:	cmp	r0, #0
   20c2c:	beq	20c48 <test_mixed_type_union@@Base+0x18fc>
   20c30:	ldr	r0, [fp, #-4]
   20c34:	ldrh	r1, [fp, #-6]
   20c38:	add	r0, r0, r1
   20c3c:	bl	247bc <main@@Base+0x1408>
   20c40:	str	r0, [sp, #4]
   20c44:	b	20c54 <test_mixed_type_union@@Base+0x1908>
   20c48:	movw	r0, #0
   20c4c:	str	r0, [sp, #4]
   20c50:	b	20c54 <test_mixed_type_union@@Base+0x1908>
   20c54:	ldr	r0, [sp, #4]
   20c58:	mov	sp, fp
   20c5c:	pop	{fp, pc}
   20c60:	andeq	r3, r1, r5, lsr r9
   20c64:	andeq	r3, r1, r3, asr r9
   20c68:	andeq	r5, r1, r7, asr #11
   20c6c:	push	{fp, lr}
   20c70:	mov	fp, sp
   20c74:	sub	sp, sp, #24
   20c78:	str	r0, [fp, #-4]
   20c7c:	movw	r0, #0
   20c80:	strh	r0, [fp, #-6]
   20c84:	ldr	r0, [fp, #-4]
   20c88:	movw	r1, #0
   20c8c:	cmp	r0, r1
   20c90:	beq	20c9c <test_mixed_type_union@@Base+0x1950>
   20c94:	b	20c98 <test_mixed_type_union@@Base+0x194c>
   20c98:	b	20cbc <test_mixed_type_union@@Base+0x1970>
   20c9c:	ldr	r0, [pc, #176]	; 20d54 <test_mixed_type_union@@Base+0x1a08>
   20ca0:	add	r0, pc, r0
   20ca4:	ldr	r1, [pc, #172]	; 20d58 <test_mixed_type_union@@Base+0x1a0c>
   20ca8:	add	r1, pc, r1
   20cac:	ldr	r2, [pc, #168]	; 20d5c <test_mixed_type_union@@Base+0x1a10>
   20cb0:	add	r3, pc, r2
   20cb4:	movw	r2, #821	; 0x335
   20cb8:	bl	12e68 <__assert_fail@plt>
   20cbc:	mov	r0, #4
   20cc0:	strh	r0, [fp, #-8]
   20cc4:	ldr	r0, [fp, #-4]
   20cc8:	str	r0, [sp, #8]
   20ccc:	bl	238a4 <main@@Base+0x4f0>
   20cd0:	ldr	lr, [sp, #8]
   20cd4:	sub	r0, lr, r0
   20cd8:	str	r0, [sp, #12]
   20cdc:	ldr	r0, [sp, #12]
   20ce0:	bl	238c8 <main@@Base+0x514>
   20ce4:	ldrh	lr, [fp, #-8]
   20ce8:	add	lr, lr, #3
   20cec:	lsl	lr, lr, #1
   20cf0:	cmp	r0, lr
   20cf4:	bcc	20d10 <test_mixed_type_union@@Base+0x19c4>
   20cf8:	ldr	r0, [sp, #12]
   20cfc:	ldrh	r1, [fp, #-8]
   20d00:	add	r0, r0, r1, lsl #1
   20d04:	add	r0, r0, #4
   20d08:	bl	238c8 <main@@Base+0x514>
   20d0c:	strh	r0, [fp, #-6]
   20d10:	ldrh	r0, [fp, #-6]
   20d14:	cmp	r0, #0
   20d18:	beq	20d38 <test_mixed_type_union@@Base+0x19ec>
   20d1c:	ldr	r0, [fp, #-4]
   20d20:	ldrh	r1, [fp, #-6]
   20d24:	add	r0, r0, r1
   20d28:	bl	260c8 <main@@Base+0x2d14>
   20d2c:	and	r0, r0, #255	; 0xff
   20d30:	str	r0, [sp, #4]
   20d34:	b	20d44 <test_mixed_type_union@@Base+0x19f8>
   20d38:	movw	r0, #0
   20d3c:	str	r0, [sp, #4]
   20d40:	b	20d44 <test_mixed_type_union@@Base+0x19f8>
   20d44:	ldr	r0, [sp, #4]
   20d48:	and	r0, r0, #255	; 0xff
   20d4c:	mov	sp, fp
   20d50:	pop	{fp, pc}
   20d54:	andeq	r3, r1, r9, asr #16
   20d58:	andeq	r3, r1, r7, ror #16
   20d5c:	andeq	r5, r1, r2, lsr #10
   20d60:	push	{fp, lr}
   20d64:	mov	fp, sp
   20d68:	sub	sp, sp, #16
   20d6c:	str	r0, [fp, #-4]
   20d70:	ldr	r0, [fp, #-4]
   20d74:	movw	r1, #0
   20d78:	cmp	r0, r1
   20d7c:	beq	20d9c <test_mixed_type_union@@Base+0x1a50>
   20d80:	ldr	r0, [fp, #-4]
   20d84:	str	r0, [sp, #8]
   20d88:	bl	280cc <main@@Base+0x4d18>
   20d8c:	ldr	lr, [sp, #8]
   20d90:	add	r0, lr, r0
   20d94:	str	r0, [sp, #4]
   20d98:	b	20da8 <test_mixed_type_union@@Base+0x1a5c>
   20d9c:	movw	r0, #0
   20da0:	str	r0, [sp, #4]
   20da4:	b	20da8 <test_mixed_type_union@@Base+0x1a5c>
   20da8:	ldr	r0, [sp, #4]
   20dac:	mov	sp, fp
   20db0:	pop	{fp, pc}
   20db4:	push	{fp, lr}
   20db8:	mov	fp, sp
   20dbc:	sub	sp, sp, #32
   20dc0:	str	r0, [fp, #-8]
   20dc4:	movw	r0, #0
   20dc8:	strh	r0, [fp, #-14]
   20dcc:	ldr	r0, [fp, #-8]
   20dd0:	movw	r1, #0
   20dd4:	cmp	r0, r1
   20dd8:	beq	20de4 <test_mixed_type_union@@Base+0x1a98>
   20ddc:	b	20de0 <test_mixed_type_union@@Base+0x1a94>
   20de0:	b	20e04 <test_mixed_type_union@@Base+0x1ab8>
   20de4:	ldr	r0, [pc, #192]	; 20eac <test_mixed_type_union@@Base+0x1b60>
   20de8:	add	r0, pc, r0
   20dec:	ldr	r1, [pc, #188]	; 20eb0 <test_mixed_type_union@@Base+0x1b64>
   20df0:	add	r1, pc, r1
   20df4:	ldr	r2, [pc, #184]	; 20eb4 <test_mixed_type_union@@Base+0x1b68>
   20df8:	add	r3, pc, r2
   20dfc:	movw	r2, #821	; 0x335
   20e00:	bl	12e68 <__assert_fail@plt>
   20e04:	mov	r0, #5
   20e08:	strh	r0, [sp, #16]
   20e0c:	ldr	r0, [fp, #-8]
   20e10:	str	r0, [sp, #8]
   20e14:	bl	238a4 <main@@Base+0x4f0>
   20e18:	ldr	lr, [sp, #8]
   20e1c:	sub	r0, lr, r0
   20e20:	str	r0, [sp, #12]
   20e24:	ldr	r0, [sp, #12]
   20e28:	bl	238c8 <main@@Base+0x514>
   20e2c:	ldrh	lr, [sp, #16]
   20e30:	add	lr, lr, #3
   20e34:	lsl	lr, lr, #1
   20e38:	cmp	r0, lr
   20e3c:	bcc	20e58 <test_mixed_type_union@@Base+0x1b0c>
   20e40:	ldr	r0, [sp, #12]
   20e44:	ldrh	r1, [sp, #16]
   20e48:	add	r0, r0, r1, lsl #1
   20e4c:	add	r0, r0, #4
   20e50:	bl	238c8 <main@@Base+0x514>
   20e54:	strh	r0, [fp, #-14]
   20e58:	ldrsh	r0, [fp, #-14]
   20e5c:	cmp	r0, #0
   20e60:	beq	20e98 <test_mixed_type_union@@Base+0x1b4c>
   20e64:	ldr	r0, [fp, #-8]
   20e68:	ldrh	r1, [fp, #-14]
   20e6c:	add	r0, r0, r1
   20e70:	str	r0, [fp, #-12]
   20e74:	ldr	r0, [fp, #-12]
   20e78:	ldr	r1, [fp, #-12]
   20e7c:	str	r0, [sp, #4]
   20e80:	mov	r0, r1
   20e84:	bl	2386c <main@@Base+0x4b8>
   20e88:	ldr	r1, [sp, #4]
   20e8c:	add	r0, r1, r0
   20e90:	str	r0, [fp, #-4]
   20e94:	b	20ea0 <test_mixed_type_union@@Base+0x1b54>
   20e98:	movw	r0, #0
   20e9c:	str	r0, [fp, #-4]
   20ea0:	ldr	r0, [fp, #-4]
   20ea4:	mov	sp, fp
   20ea8:	pop	{fp, pc}
   20eac:	andeq	r3, r1, r1, lsl #14
   20eb0:	andeq	r3, r1, pc, lsl r7
   20eb4:	andeq	r5, r1, sp, lsr #8
   20eb8:	push	{fp, lr}
   20ebc:	mov	fp, sp
   20ec0:	sub	sp, sp, #8
   20ec4:	str	r0, [sp, #4]
   20ec8:	ldr	r0, [sp, #4]
   20ecc:	bl	20db4 <test_mixed_type_union@@Base+0x1a68>
   20ed0:	bl	20d60 <test_mixed_type_union@@Base+0x1a14>
   20ed4:	mov	sp, fp
   20ed8:	pop	{fp, pc}
   20edc:	push	{fp, lr}
   20ee0:	mov	fp, sp
   20ee4:	sub	sp, sp, #8
   20ee8:	str	r1, [sp, #4]
   20eec:	mov	r1, r0
   20ef0:	str	r0, [sp]
   20ef4:	mov	r0, r1
   20ef8:	movw	r1, #0
   20efc:	and	r1, r1, #255	; 0xff
   20f00:	movw	r2, #8
   20f04:	bl	12e2c <memset@plt>
   20f08:	ldr	r0, [sp, #4]
   20f0c:	bl	20c6c <test_mixed_type_union@@Base+0x1920>
   20f10:	ldr	r1, [sp]
   20f14:	strb	r0, [r1]
   20f18:	ldrb	r0, [r1]
   20f1c:	cmp	r0, #0
   20f20:	bne	20f28 <test_mixed_type_union@@Base+0x1bdc>
   20f24:	b	20f38 <test_mixed_type_union@@Base+0x1bec>
   20f28:	ldr	r0, [sp, #4]
   20f2c:	bl	20db4 <test_mixed_type_union@@Base+0x1a68>
   20f30:	ldr	lr, [sp]
   20f34:	str	r0, [lr, #4]
   20f38:	mov	sp, fp
   20f3c:	pop	{fp, pc}
   20f40:	push	{fp, lr}
   20f44:	mov	fp, sp
   20f48:	sub	sp, sp, #8
   20f4c:	str	r0, [sp]
   20f50:	str	r1, [sp, #4]
   20f54:	ldr	r0, [sp, #4]
   20f58:	bl	20d60 <test_mixed_type_union@@Base+0x1a14>
   20f5c:	mov	sp, fp
   20f60:	pop	{fp, pc}
   20f64:	push	{fp, lr}
   20f68:	mov	fp, sp
   20f6c:	sub	sp, sp, #16
   20f70:	str	r1, [fp, #-4]
   20f74:	ldr	r1, [fp, #-4]
   20f78:	str	r0, [sp, #8]
   20f7c:	mov	r0, r1
   20f80:	bl	210c8 <test_mixed_type_union@@Base+0x1d7c>
   20f84:	ldr	r1, [sp, #8]
   20f88:	str	r0, [r1]
   20f8c:	ldr	r0, [fp, #-4]
   20f90:	bl	280d4 <main@@Base+0x4d20>
   20f94:	ldr	r1, [sp, #8]
   20f98:	str	r0, [r1, #4]
   20f9c:	ldr	r0, [r1]
   20fa0:	bl	2603c <main@@Base+0x2c88>
   20fa4:	ldr	r1, [sp, #8]
   20fa8:	ldr	lr, [r1, #4]
   20fac:	str	r0, [sp, #4]
   20fb0:	mov	r0, lr
   20fb4:	bl	2603c <main@@Base+0x2c88>
   20fb8:	ldr	r1, [sp, #4]
   20fbc:	cmp	r1, r0
   20fc0:	bne	20fcc <test_mixed_type_union@@Base+0x1c80>
   20fc4:	b	20fc8 <test_mixed_type_union@@Base+0x1c7c>
   20fc8:	b	20fec <test_mixed_type_union@@Base+0x1ca0>
   20fcc:	ldr	r0, [pc, #32]	; 20ff4 <test_mixed_type_union@@Base+0x1ca8>
   20fd0:	add	r0, pc, r0
   20fd4:	ldr	r1, [pc, #28]	; 20ff8 <test_mixed_type_union@@Base+0x1cac>
   20fd8:	add	r1, pc, r1
   20fdc:	ldr	r2, [pc, #24]	; 20ffc <test_mixed_type_union@@Base+0x1cb0>
   20fe0:	add	r3, pc, r2
   20fe4:	movw	r2, #823	; 0x337
   20fe8:	bl	12e68 <__assert_fail@plt>
   20fec:	mov	sp, fp
   20ff0:	pop	{fp, pc}
   20ff4:	andeq	r4, r1, lr, lsl #25
   20ff8:	andeq	r3, r1, r7, lsr r5
   20ffc:	andeq	r5, r1, sl, lsl #5
   21000:	push	{fp, lr}
   21004:	mov	fp, sp
   21008:	sub	sp, sp, #24
   2100c:	str	r1, [fp, #-8]
   21010:	str	r2, [fp, #-4]
   21014:	str	r3, [sp, #12]
   21018:	mov	r1, r0
   2101c:	str	r0, [sp, #4]
   21020:	mov	r0, r1
   21024:	movw	r1, #0
   21028:	and	r1, r1, #255	; 0xff
   2102c:	movw	r2, #8
   21030:	bl	12e2c <memset@plt>
   21034:	ldr	r0, [fp, #-8]
   21038:	bl	2603c <main@@Base+0x2c88>
   2103c:	str	r0, [sp, #8]
   21040:	ldr	r0, [sp, #8]
   21044:	ldr	r1, [sp, #12]
   21048:	cmp	r0, r1
   2104c:	bls	21058 <test_mixed_type_union@@Base+0x1d0c>
   21050:	b	21054 <test_mixed_type_union@@Base+0x1d08>
   21054:	b	21078 <test_mixed_type_union@@Base+0x1d2c>
   21058:	ldr	r0, [pc, #92]	; 210bc <test_mixed_type_union@@Base+0x1d70>
   2105c:	add	r0, pc, r0
   21060:	ldr	r1, [pc, #88]	; 210c0 <test_mixed_type_union@@Base+0x1d74>
   21064:	add	r1, pc, r1
   21068:	ldr	r2, [pc, #84]	; 210c4 <test_mixed_type_union@@Base+0x1d78>
   2106c:	add	r3, pc, r2
   21070:	movw	r2, #773	; 0x305
   21074:	bl	12e68 <__assert_fail@plt>
   21078:	ldr	r0, [fp, #-8]
   2107c:	ldr	r1, [sp, #12]
   21080:	add	r0, r0, r1
   21084:	ldrb	r0, [r0]
   21088:	ldr	r1, [sp, #4]
   2108c:	strb	r0, [r1]
   21090:	ldrb	r0, [r1]
   21094:	cmp	r0, #0
   21098:	bne	210a0 <test_mixed_type_union@@Base+0x1d54>
   2109c:	b	210b4 <test_mixed_type_union@@Base+0x1d68>
   210a0:	ldr	r0, [fp, #-4]
   210a4:	ldr	r1, [sp, #12]
   210a8:	bl	1f040 <test_union_vector@@Base+0x9c0>
   210ac:	ldr	r1, [sp, #4]
   210b0:	str	r0, [r1, #4]
   210b4:	mov	sp, fp
   210b8:	pop	{fp, pc}
   210bc:	andeq	r4, r1, r3, asr #25
   210c0:	andeq	r3, r1, fp, lsr #9
   210c4:	muleq	r1, ip, r2
   210c8:	push	{fp, lr}
   210cc:	mov	fp, sp
   210d0:	sub	sp, sp, #32
   210d4:	str	r0, [fp, #-8]
   210d8:	movw	r0, #0
   210dc:	strh	r0, [fp, #-14]
   210e0:	ldr	r0, [fp, #-8]
   210e4:	movw	r1, #0
   210e8:	cmp	r0, r1
   210ec:	beq	210f8 <test_mixed_type_union@@Base+0x1dac>
   210f0:	b	210f4 <test_mixed_type_union@@Base+0x1da8>
   210f4:	b	21118 <test_mixed_type_union@@Base+0x1dcc>
   210f8:	ldr	r0, [pc, #196]	; 211c4 <test_mixed_type_union@@Base+0x1e78>
   210fc:	add	r0, pc, r0
   21100:	ldr	r1, [pc, #192]	; 211c8 <test_mixed_type_union@@Base+0x1e7c>
   21104:	add	r1, pc, r1
   21108:	ldr	r2, [pc, #188]	; 211cc <test_mixed_type_union@@Base+0x1e80>
   2110c:	add	r3, pc, r2
   21110:	movw	r2, #823	; 0x337
   21114:	bl	12e68 <__assert_fail@plt>
   21118:	mov	r0, #8
   2111c:	strh	r0, [sp, #16]
   21120:	ldr	r0, [fp, #-8]
   21124:	str	r0, [sp, #8]
   21128:	bl	238a4 <main@@Base+0x4f0>
   2112c:	ldr	lr, [sp, #8]
   21130:	sub	r0, lr, r0
   21134:	str	r0, [sp, #12]
   21138:	ldr	r0, [sp, #12]
   2113c:	bl	238c8 <main@@Base+0x514>
   21140:	ldrh	lr, [sp, #16]
   21144:	add	lr, lr, #3
   21148:	lsl	lr, lr, #1
   2114c:	cmp	r0, lr
   21150:	bcc	2116c <test_mixed_type_union@@Base+0x1e20>
   21154:	ldr	r0, [sp, #12]
   21158:	ldrh	r1, [sp, #16]
   2115c:	add	r0, r0, r1, lsl #1
   21160:	add	r0, r0, #4
   21164:	bl	238c8 <main@@Base+0x514>
   21168:	strh	r0, [fp, #-14]
   2116c:	ldrsh	r0, [fp, #-14]
   21170:	cmp	r0, #0
   21174:	beq	211b0 <test_mixed_type_union@@Base+0x1e64>
   21178:	ldr	r0, [fp, #-8]
   2117c:	ldrh	r1, [fp, #-14]
   21180:	add	r0, r0, r1
   21184:	str	r0, [fp, #-12]
   21188:	ldr	r0, [fp, #-12]
   2118c:	add	r0, r0, #4
   21190:	ldr	r1, [fp, #-12]
   21194:	str	r0, [sp, #4]
   21198:	mov	r0, r1
   2119c:	bl	2386c <main@@Base+0x4b8>
   211a0:	ldr	r1, [sp, #4]
   211a4:	add	r0, r1, r0
   211a8:	str	r0, [fp, #-4]
   211ac:	b	211b8 <test_mixed_type_union@@Base+0x1e6c>
   211b0:	movw	r0, #0
   211b4:	str	r0, [fp, #-4]
   211b8:	ldr	r0, [fp, #-4]
   211bc:	mov	sp, fp
   211c0:	pop	{fp, pc}
   211c4:	andeq	r3, r1, sp, ror #7
   211c8:	andeq	r3, r1, fp, lsl #8
   211cc:	andeq	r5, r1, ip, asr r2
   211d0:	push	{fp, lr}
   211d4:	mov	fp, sp
   211d8:	sub	sp, sp, #16
   211dc:	str	r0, [sp, #8]
   211e0:	str	r1, [sp, #12]
   211e4:	str	r2, [sp, #4]
   211e8:	ldr	r0, [sp, #12]
   211ec:	ldr	r1, [sp, #4]
   211f0:	bl	281dc <main@@Base+0x4e28>
   211f4:	mov	sp, fp
   211f8:	pop	{fp, pc}
   211fc:	push	{fp, lr}
   21200:	mov	fp, sp
   21204:	sub	sp, sp, #8
   21208:	str	r0, [sp]
   2120c:	str	r1, [sp, #4]
   21210:	ldr	r0, [sp]
   21214:	bl	2603c <main@@Base+0x2c88>
   21218:	mov	sp, fp
   2121c:	pop	{fp, pc}

00021220 <test_add_set_defaults@@Base>:
   21220:	push	{fp, lr}
   21224:	mov	fp, sp
   21228:	sub	sp, sp, #104	; 0x68
   2122c:	str	r0, [fp, #-8]
   21230:	ldr	r0, [fp, #-8]
   21234:	bl	28b78 <flatcc_builder_reset@@Base>
   21238:	ldr	lr, [fp, #-8]
   2123c:	str	r0, [fp, #-24]	; 0xffffffe8
   21240:	mov	r0, lr
   21244:	bl	18e74 <gen_monster@@Base+0x890>
   21248:	ldr	lr, [pc, #596]	; 214a4 <test_add_set_defaults@@Base+0x284>
   2124c:	add	r1, pc, lr
   21250:	ldr	lr, [fp, #-8]
   21254:	str	r0, [fp, #-28]	; 0xffffffe4
   21258:	mov	r0, lr
   2125c:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21260:	ldr	r1, [fp, #-8]
   21264:	str	r0, [fp, #-32]	; 0xffffffe0
   21268:	mov	r0, r1
   2126c:	movw	r1, #100	; 0x64
   21270:	sxth	r1, r1
   21274:	bl	18ec4 <gen_monster@@Base+0x8e0>
   21278:	ldr	r1, [fp, #-8]
   2127c:	str	r0, [fp, #-36]	; 0xffffffdc
   21280:	mov	r0, r1
   21284:	movw	r1, #100	; 0x64
   21288:	sxth	r1, r1
   2128c:	bl	214c4 <test_add_set_defaults@@Base+0x2a4>
   21290:	ldr	r1, [fp, #-8]
   21294:	str	r0, [fp, #-40]	; 0xffffffd8
   21298:	mov	r0, r1
   2129c:	movw	r1, #8
   212a0:	sxtb	r1, r1
   212a4:	bl	18f90 <gen_monster@@Base+0x9ac>
   212a8:	ldr	r1, [fp, #-8]
   212ac:	str	r0, [fp, #-44]	; 0xffffffd4
   212b0:	mov	r0, r1
   212b4:	bl	19a24 <gen_monster@@Base+0x1440>
   212b8:	ldr	r1, [fp, #-8]
   212bc:	str	r0, [fp, #-48]	; 0xffffffd0
   212c0:	mov	r0, r1
   212c4:	sub	r1, fp, #16
   212c8:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   212cc:	str	r0, [fp, #-12]
   212d0:	ldr	r0, [fp, #-12]
   212d4:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   212d8:	str	r0, [fp, #-20]	; 0xffffffec
   212dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   212e0:	bl	13388 <verify_empty_monster@@Base+0x420>
   212e4:	cmp	r0, #0
   212e8:	beq	21308 <test_add_set_defaults@@Base+0xe8>
   212ec:	ldr	r0, [pc, #460]	; 214c0 <test_add_set_defaults@@Base+0x2a0>
   212f0:	add	r0, pc, r0
   212f4:	bl	12d9c <printf@plt>
   212f8:	mvn	lr, #0
   212fc:	str	lr, [fp, #-4]
   21300:	str	r0, [sp, #52]	; 0x34
   21304:	b	21498 <test_add_set_defaults@@Base+0x278>
   21308:	ldr	r0, [fp, #-20]	; 0xffffffec
   2130c:	bl	173e4 <verify_monster@@Base+0x1990>
   21310:	cmp	r0, #0
   21314:	bne	21334 <test_add_set_defaults@@Base+0x114>
   21318:	ldr	r0, [pc, #392]	; 214a8 <test_add_set_defaults@@Base+0x288>
   2131c:	add	r0, pc, r0
   21320:	bl	12d9c <printf@plt>
   21324:	mvn	lr, #0
   21328:	str	lr, [fp, #-4]
   2132c:	str	r0, [sp, #48]	; 0x30
   21330:	b	21498 <test_add_set_defaults@@Base+0x278>
   21334:	ldr	r0, [fp, #-20]	; 0xffffffec
   21338:	bl	21548 <test_add_set_defaults@@Base+0x328>
   2133c:	cmp	r0, #0
   21340:	beq	21360 <test_add_set_defaults@@Base+0x140>
   21344:	ldr	r0, [pc, #368]	; 214bc <test_add_set_defaults@@Base+0x29c>
   21348:	add	r0, pc, r0
   2134c:	bl	12d9c <printf@plt>
   21350:	mvn	lr, #0
   21354:	str	lr, [fp, #-4]
   21358:	str	r0, [sp, #44]	; 0x2c
   2135c:	b	21498 <test_add_set_defaults@@Base+0x278>
   21360:	ldr	r0, [fp, #-8]
   21364:	bl	28b78 <flatcc_builder_reset@@Base>
   21368:	ldr	lr, [fp, #-8]
   2136c:	str	r0, [sp, #40]	; 0x28
   21370:	mov	r0, lr
   21374:	bl	18e74 <gen_monster@@Base+0x890>
   21378:	ldr	lr, [pc, #300]	; 214ac <test_add_set_defaults@@Base+0x28c>
   2137c:	add	r1, pc, lr
   21380:	ldr	lr, [fp, #-8]
   21384:	str	r0, [sp, #36]	; 0x24
   21388:	mov	r0, lr
   2138c:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21390:	ldr	r1, [fp, #-8]
   21394:	str	r0, [sp, #32]
   21398:	mov	r0, r1
   2139c:	movw	r1, #100	; 0x64
   213a0:	sxth	r1, r1
   213a4:	bl	21614 <test_add_set_defaults@@Base+0x3f4>
   213a8:	ldr	r1, [fp, #-8]
   213ac:	str	r0, [sp, #28]
   213b0:	mov	r0, r1
   213b4:	movw	r1, #100	; 0x64
   213b8:	sxth	r1, r1
   213bc:	bl	21684 <test_add_set_defaults@@Base+0x464>
   213c0:	ldr	r1, [fp, #-8]
   213c4:	str	r0, [sp, #24]
   213c8:	mov	r0, r1
   213cc:	movw	r1, #8
   213d0:	sxtb	r1, r1
   213d4:	bl	216f0 <test_add_set_defaults@@Base+0x4d0>
   213d8:	ldr	r1, [fp, #-8]
   213dc:	str	r0, [sp, #20]
   213e0:	mov	r0, r1
   213e4:	bl	19a24 <gen_monster@@Base+0x1440>
   213e8:	ldr	r1, [fp, #-8]
   213ec:	str	r0, [sp, #16]
   213f0:	mov	r0, r1
   213f4:	sub	r1, fp, #16
   213f8:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   213fc:	str	r0, [fp, #-12]
   21400:	ldr	r0, [fp, #-12]
   21404:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   21408:	str	r0, [fp, #-20]	; 0xffffffec
   2140c:	ldr	r0, [fp, #-20]	; 0xffffffec
   21410:	bl	13388 <verify_empty_monster@@Base+0x420>
   21414:	cmp	r0, #0
   21418:	bne	21438 <test_add_set_defaults@@Base+0x218>
   2141c:	ldr	r0, [pc, #140]	; 214b0 <test_add_set_defaults@@Base+0x290>
   21420:	add	r0, pc, r0
   21424:	bl	12d9c <printf@plt>
   21428:	mvn	lr, #0
   2142c:	str	lr, [fp, #-4]
   21430:	str	r0, [sp, #12]
   21434:	b	21498 <test_add_set_defaults@@Base+0x278>
   21438:	ldr	r0, [fp, #-20]	; 0xffffffec
   2143c:	bl	173e4 <verify_monster@@Base+0x1990>
   21440:	cmp	r0, #0
   21444:	bne	21464 <test_add_set_defaults@@Base+0x244>
   21448:	ldr	r0, [pc, #100]	; 214b4 <test_add_set_defaults@@Base+0x294>
   2144c:	add	r0, pc, r0
   21450:	bl	12d9c <printf@plt>
   21454:	mvn	lr, #0
   21458:	str	lr, [fp, #-4]
   2145c:	str	r0, [sp, #8]
   21460:	b	21498 <test_add_set_defaults@@Base+0x278>
   21464:	ldr	r0, [fp, #-20]	; 0xffffffec
   21468:	bl	21548 <test_add_set_defaults@@Base+0x328>
   2146c:	cmp	r0, #0
   21470:	bne	21490 <test_add_set_defaults@@Base+0x270>
   21474:	ldr	r0, [pc, #60]	; 214b8 <test_add_set_defaults@@Base+0x298>
   21478:	add	r0, pc, r0
   2147c:	bl	12d9c <printf@plt>
   21480:	mvn	lr, #0
   21484:	str	lr, [fp, #-4]
   21488:	str	r0, [sp, #4]
   2148c:	b	21498 <test_add_set_defaults@@Base+0x278>
   21490:	movw	r0, #0
   21494:	str	r0, [fp, #-4]
   21498:	ldr	r0, [fp, #-4]
   2149c:	mov	sp, fp
   214a0:	pop	{fp, pc}
   214a4:	andeq	r0, r1, pc, asr fp
   214a8:	andeq	r2, r1, sp, lsl #25
   214ac:	andeq	r0, r1, pc, lsr #20
   214b0:	andeq	r2, r1, r6, ror #23
   214b4:	andeq	r2, r1, lr, ror #23
   214b8:	andeq	r2, r1, r2, lsl #24
   214bc:	andeq	r2, r1, pc, lsl #25
   214c0:	andeq	r2, r1, sp, lsl #25
   214c4:	push	{fp, lr}
   214c8:	mov	fp, sp
   214cc:	sub	sp, sp, #24
   214d0:	str	r0, [fp, #-8]
   214d4:	strh	r1, [fp, #-10]
   214d8:	ldrsh	r0, [fp, #-10]
   214dc:	cmp	r0, #150	; 0x96
   214e0:	bne	214f0 <test_add_set_defaults@@Base+0x2d0>
   214e4:	movw	r0, #0
   214e8:	str	r0, [fp, #-4]
   214ec:	b	2153c <test_add_set_defaults@@Base+0x31c>
   214f0:	ldr	r0, [fp, #-8]
   214f4:	movw	r1, #1
   214f8:	movw	r2, #2
   214fc:	movw	r3, #2
   21500:	uxth	r3, r3
   21504:	bl	2ca28 <flatcc_builder_table_add@@Base>
   21508:	str	r0, [sp, #8]
   2150c:	movw	r1, #0
   21510:	cmp	r0, r1
   21514:	bne	21524 <test_add_set_defaults@@Base+0x304>
   21518:	mvn	r0, #0
   2151c:	str	r0, [fp, #-4]
   21520:	b	2153c <test_add_set_defaults@@Base+0x31c>
   21524:	ldr	r0, [sp, #8]
   21528:	ldrsh	r1, [fp, #-10]
   2152c:	bl	24394 <main@@Base+0xfe0>
   21530:	movw	r1, #0
   21534:	str	r1, [fp, #-4]
   21538:	str	r0, [sp, #4]
   2153c:	ldr	r0, [fp, #-4]
   21540:	mov	sp, fp
   21544:	pop	{fp, pc}
   21548:	push	{fp, lr}
   2154c:	mov	fp, sp
   21550:	sub	sp, sp, #16
   21554:	str	r0, [fp, #-4]
   21558:	movw	r0, #0
   2155c:	strh	r0, [fp, #-6]
   21560:	ldr	r0, [fp, #-4]
   21564:	movw	r1, #0
   21568:	cmp	r0, r1
   2156c:	beq	21578 <test_add_set_defaults@@Base+0x358>
   21570:	b	21574 <test_add_set_defaults@@Base+0x354>
   21574:	b	21598 <test_add_set_defaults@@Base+0x378>
   21578:	ldr	r0, [pc, #136]	; 21608 <test_add_set_defaults@@Base+0x3e8>
   2157c:	add	r0, pc, r0
   21580:	ldr	r1, [pc, #132]	; 2160c <test_add_set_defaults@@Base+0x3ec>
   21584:	add	r1, pc, r1
   21588:	ldr	r2, [pc, #128]	; 21610 <test_add_set_defaults@@Base+0x3f0>
   2158c:	add	r3, pc, r2
   21590:	movw	r2, #705	; 0x2c1
   21594:	bl	12e68 <__assert_fail@plt>
   21598:	mov	r0, #6
   2159c:	strh	r0, [sp, #8]
   215a0:	ldr	r0, [fp, #-4]
   215a4:	str	r0, [sp]
   215a8:	bl	238a4 <main@@Base+0x4f0>
   215ac:	ldr	lr, [sp]
   215b0:	sub	r0, lr, r0
   215b4:	str	r0, [sp, #4]
   215b8:	ldr	r0, [sp, #4]
   215bc:	bl	238c8 <main@@Base+0x514>
   215c0:	ldrh	lr, [sp, #8]
   215c4:	add	lr, lr, #3
   215c8:	lsl	lr, lr, #1
   215cc:	cmp	r0, lr
   215d0:	bcc	215ec <test_add_set_defaults@@Base+0x3cc>
   215d4:	ldr	r0, [sp, #4]
   215d8:	ldrh	r1, [sp, #8]
   215dc:	add	r0, r0, r1, lsl #1
   215e0:	add	r0, r0, #4
   215e4:	bl	238c8 <main@@Base+0x514>
   215e8:	strh	r0, [fp, #-6]
   215ec:	ldrh	r0, [fp, #-6]
   215f0:	cmp	r0, #0
   215f4:	movw	r0, #0
   215f8:	movne	r0, #1
   215fc:	and	r0, r0, #1
   21600:	mov	sp, fp
   21604:	pop	{fp, pc}
   21608:	andeq	r2, r1, sp, ror #30
   2160c:	andeq	r2, r1, fp, lsl #31
   21610:	andeq	r4, r1, r7, lsl #29
   21614:	push	{fp, lr}
   21618:	mov	fp, sp
   2161c:	sub	sp, sp, #24
   21620:	str	r0, [fp, #-8]
   21624:	strh	r1, [fp, #-10]
   21628:	ldr	r0, [fp, #-8]
   2162c:	movw	r1, #2
   21630:	str	r1, [sp, #4]
   21634:	ldr	r2, [sp, #4]
   21638:	movw	r3, #2
   2163c:	uxth	r3, r3
   21640:	bl	2ca28 <flatcc_builder_table_add@@Base>
   21644:	str	r0, [sp, #8]
   21648:	movw	r1, #0
   2164c:	cmp	r0, r1
   21650:	bne	21660 <test_add_set_defaults@@Base+0x440>
   21654:	mvn	r0, #0
   21658:	str	r0, [fp, #-4]
   2165c:	b	21678 <test_add_set_defaults@@Base+0x458>
   21660:	ldr	r0, [sp, #8]
   21664:	ldrsh	r1, [fp, #-10]
   21668:	bl	24394 <main@@Base+0xfe0>
   2166c:	movw	r1, #0
   21670:	str	r1, [fp, #-4]
   21674:	str	r0, [sp]
   21678:	ldr	r0, [fp, #-4]
   2167c:	mov	sp, fp
   21680:	pop	{fp, pc}
   21684:	push	{fp, lr}
   21688:	mov	fp, sp
   2168c:	sub	sp, sp, #24
   21690:	str	r0, [fp, #-8]
   21694:	strh	r1, [fp, #-10]
   21698:	ldr	r0, [fp, #-8]
   2169c:	movw	r1, #1
   216a0:	movw	r2, #2
   216a4:	movw	r3, #2
   216a8:	uxth	r3, r3
   216ac:	bl	2ca28 <flatcc_builder_table_add@@Base>
   216b0:	str	r0, [sp, #8]
   216b4:	movw	r1, #0
   216b8:	cmp	r0, r1
   216bc:	bne	216cc <test_add_set_defaults@@Base+0x4ac>
   216c0:	mvn	r0, #0
   216c4:	str	r0, [fp, #-4]
   216c8:	b	216e4 <test_add_set_defaults@@Base+0x4c4>
   216cc:	ldr	r0, [sp, #8]
   216d0:	ldrsh	r1, [fp, #-10]
   216d4:	bl	24394 <main@@Base+0xfe0>
   216d8:	movw	r1, #0
   216dc:	str	r1, [fp, #-4]
   216e0:	str	r0, [sp, #4]
   216e4:	ldr	r0, [fp, #-4]
   216e8:	mov	sp, fp
   216ec:	pop	{fp, pc}
   216f0:	push	{fp, lr}
   216f4:	mov	fp, sp
   216f8:	sub	sp, sp, #24
   216fc:	str	r0, [fp, #-8]
   21700:	strb	r1, [fp, #-9]
   21704:	ldr	r0, [fp, #-8]
   21708:	movw	r1, #6
   2170c:	movw	r2, #1
   21710:	movw	r3, #1
   21714:	uxth	r3, r3
   21718:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2171c:	str	r0, [sp, #8]
   21720:	movw	r1, #0
   21724:	cmp	r0, r1
   21728:	bne	21738 <test_add_set_defaults@@Base+0x518>
   2172c:	mvn	r0, #0
   21730:	str	r0, [fp, #-4]
   21734:	b	21750 <test_add_set_defaults@@Base+0x530>
   21738:	ldr	r0, [sp, #8]
   2173c:	ldrsb	r1, [fp, #-9]
   21740:	bl	26138 <main@@Base+0x2d84>
   21744:	movw	r1, #0
   21748:	str	r1, [fp, #-4]
   2174c:	str	r0, [sp, #4]
   21750:	ldr	r0, [fp, #-4]
   21754:	mov	sp, fp
   21758:	pop	{fp, pc}

0002175c <test_nested_buffer@@Base>:
   2175c:	push	{fp, lr}
   21760:	mov	fp, sp
   21764:	sub	sp, sp, #72	; 0x48
   21768:	str	r0, [fp, #-8]
   2176c:	ldr	r0, [fp, #-8]
   21770:	bl	28b78 <flatcc_builder_reset@@Base>
   21774:	ldr	lr, [fp, #-8]
   21778:	str	r0, [fp, #-28]	; 0xffffffe4
   2177c:	mov	r0, lr
   21780:	bl	18e74 <gen_monster@@Base+0x890>
   21784:	ldr	lr, [pc, #452]	; 21950 <test_nested_buffer@@Base+0x1f4>
   21788:	add	r1, pc, lr
   2178c:	ldr	lr, [fp, #-8]
   21790:	str	r0, [fp, #-32]	; 0xffffffe0
   21794:	mov	r0, lr
   21798:	bl	14934 <test_empty_monster@@Base+0x1f0>
   2179c:	ldr	r1, [fp, #-8]
   217a0:	str	r0, [sp, #36]	; 0x24
   217a4:	mov	r0, r1
   217a8:	bl	21974 <test_nested_buffer@@Base+0x218>
   217ac:	ldr	r1, [pc, #408]	; 2194c <test_nested_buffer@@Base+0x1f0>
   217b0:	add	r1, pc, r1
   217b4:	ldr	lr, [fp, #-8]
   217b8:	str	r0, [sp, #32]
   217bc:	mov	r0, lr
   217c0:	bl	14934 <test_empty_monster@@Base+0x1f0>
   217c4:	ldr	r1, [fp, #-8]
   217c8:	str	r0, [sp, #28]
   217cc:	mov	r0, r1
   217d0:	bl	219c4 <test_nested_buffer@@Base+0x268>
   217d4:	ldr	r1, [fp, #-8]
   217d8:	str	r0, [sp, #24]
   217dc:	mov	r0, r1
   217e0:	movw	r1, #10
   217e4:	sxth	r1, r1
   217e8:	bl	18ec4 <gen_monster@@Base+0x8e0>
   217ec:	ldr	r1, [fp, #-8]
   217f0:	str	r0, [sp, #20]
   217f4:	mov	r0, r1
   217f8:	bl	19a24 <gen_monster@@Base+0x1440>
   217fc:	ldr	r1, [fp, #-8]
   21800:	str	r0, [sp, #16]
   21804:	mov	r0, r1
   21808:	sub	r1, fp, #16
   2180c:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   21810:	ldr	r1, [pc, #300]	; 21944 <test_nested_buffer@@Base+0x1e8>
   21814:	add	r1, pc, r1
   21818:	ldr	lr, [pc, #296]	; 21948 <test_nested_buffer@@Base+0x1ec>
   2181c:	ldr	lr, [pc, lr]
   21820:	str	r0, [fp, #-12]
   21824:	ldr	r0, [fp, #-12]
   21828:	ldr	r2, [fp, #-16]
   2182c:	ldr	r3, [lr]
   21830:	str	r0, [sp, #12]
   21834:	mov	r0, r1
   21838:	ldr	r1, [sp, #12]
   2183c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   21840:	ldr	r0, [fp, #-12]
   21844:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   21848:	str	r0, [fp, #-20]	; 0xffffffec
   2184c:	ldr	r0, [fp, #-20]	; 0xffffffec
   21850:	bl	16d54 <verify_monster@@Base+0x1300>
   21854:	ldr	r1, [pc, #272]	; 2196c <test_nested_buffer@@Base+0x210>
   21858:	add	r1, pc, r1
   2185c:	bl	12d90 <strcmp@plt>
   21860:	cmp	r0, #0
   21864:	beq	21884 <test_nested_buffer@@Base+0x128>
   21868:	ldr	r0, [pc, #248]	; 21968 <test_nested_buffer@@Base+0x20c>
   2186c:	add	r0, pc, r0
   21870:	bl	12d9c <printf@plt>
   21874:	mvn	lr, #0
   21878:	str	lr, [fp, #-4]
   2187c:	str	r0, [sp, #8]
   21880:	b	21938 <test_nested_buffer@@Base+0x1dc>
   21884:	ldr	r0, [fp, #-20]	; 0xffffffec
   21888:	bl	21a20 <test_nested_buffer@@Base+0x2c4>
   2188c:	str	r0, [fp, #-24]	; 0xffffffe8
   21890:	ldr	r0, [fp, #-20]	; 0xffffffec
   21894:	bl	13294 <verify_empty_monster@@Base+0x32c>
   21898:	sxth	r0, r0
   2189c:	cmp	r0, #10
   218a0:	beq	218c0 <test_nested_buffer@@Base+0x164>
   218a4:	ldr	r0, [pc, #184]	; 21964 <test_nested_buffer@@Base+0x208>
   218a8:	add	r0, pc, r0
   218ac:	bl	12d9c <printf@plt>
   218b0:	mvn	lr, #0
   218b4:	str	lr, [fp, #-4]
   218b8:	str	r0, [sp, #4]
   218bc:	b	21938 <test_nested_buffer@@Base+0x1dc>
   218c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   218c4:	bl	16d54 <verify_monster@@Base+0x1300>
   218c8:	movw	lr, #0
   218cc:	cmp	r0, lr
   218d0:	beq	218d8 <test_nested_buffer@@Base+0x17c>
   218d4:	b	218f8 <test_nested_buffer@@Base+0x19c>
   218d8:	ldr	r0, [pc, #116]	; 21954 <test_nested_buffer@@Base+0x1f8>
   218dc:	add	r0, pc, r0
   218e0:	ldr	r1, [pc, #112]	; 21958 <test_nested_buffer@@Base+0x1fc>
   218e4:	add	r1, pc, r1
   218e8:	ldr	r2, [pc, #108]	; 2195c <test_nested_buffer@@Base+0x200>
   218ec:	add	r3, pc, r2
   218f0:	movw	r2, #2188	; 0x88c
   218f4:	bl	12e68 <__assert_fail@plt>
   218f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   218fc:	bl	16d54 <verify_monster@@Base+0x1300>
   21900:	ldr	r1, [pc, #104]	; 21970 <test_nested_buffer@@Base+0x214>
   21904:	add	r1, pc, r1
   21908:	bl	12d90 <strcmp@plt>
   2190c:	cmp	r0, #0
   21910:	beq	21930 <test_nested_buffer@@Base+0x1d4>
   21914:	ldr	r0, [pc, #68]	; 21960 <test_nested_buffer@@Base+0x204>
   21918:	add	r0, pc, r0
   2191c:	bl	12d9c <printf@plt>
   21920:	mvn	lr, #0
   21924:	str	lr, [fp, #-4]
   21928:	str	r0, [sp]
   2192c:	b	21938 <test_nested_buffer@@Base+0x1dc>
   21930:	movw	r0, #0
   21934:	str	r0, [fp, #-4]
   21938:	ldr	r0, [fp, #-4]
   2193c:	mov	sp, fp
   21940:	pop	{fp, pc}
   21944:	andeq	r2, r1, sp, lsr #17
   21948:	andeq	r7, r2, r8, lsr r8
   2194c:	andeq	r2, r1, r1, lsl #18
   21950:	andeq	r0, r1, r3, lsr #12
   21954:	andeq	r2, r1, r8, lsr r8
   21958:	andeq	r0, r1, pc, asr sp
   2195c:	andeq	r2, r1, r1, asr #16
   21960:	andeq	r2, r1, r0, asr #16
   21964:	andeq	r2, r1, r7, asr #16
   21968:	andeq	r2, r1, r7, ror #16
   2196c:	andeq	r0, r1, r3, asr r5
   21970:	andeq	r2, r1, sp, lsr #15
   21974:	push	{fp, lr}
   21978:	mov	fp, sp
   2197c:	sub	sp, sp, #8
   21980:	ldr	r1, [pc, #56]	; 219c0 <test_nested_buffer@@Base+0x264>
   21984:	add	r1, pc, r1
   21988:	str	r0, [sp, #4]
   2198c:	ldr	r0, [sp, #4]
   21990:	bl	148dc <test_empty_monster@@Base+0x198>
   21994:	cmp	r0, #0
   21998:	beq	219a8 <test_nested_buffer@@Base+0x24c>
   2199c:	mvn	r0, #0
   219a0:	str	r0, [sp]
   219a4:	b	219b4 <test_nested_buffer@@Base+0x258>
   219a8:	ldr	r0, [sp, #4]
   219ac:	bl	14910 <test_empty_monster@@Base+0x1cc>
   219b0:	str	r0, [sp]
   219b4:	ldr	r0, [sp]
   219b8:	mov	sp, fp
   219bc:	pop	{fp, pc}
   219c0:	andeq	r0, r1, r0, asr r2
   219c4:	push	{fp, lr}
   219c8:	mov	fp, sp
   219cc:	sub	sp, sp, #24
   219d0:	str	r0, [fp, #-4]
   219d4:	ldr	r0, [fp, #-4]
   219d8:	ldr	r1, [fp, #-4]
   219dc:	ldr	r2, [fp, #-4]
   219e0:	str	r0, [fp, #-8]
   219e4:	mov	r0, r2
   219e8:	str	r1, [sp, #12]
   219ec:	bl	14980 <test_empty_monster@@Base+0x23c>
   219f0:	ldr	r1, [sp, #12]
   219f4:	str	r0, [sp, #8]
   219f8:	mov	r0, r1
   219fc:	ldr	r1, [sp, #8]
   21a00:	bl	149f0 <test_empty_monster@@Base+0x2ac>
   21a04:	ldr	r1, [fp, #-8]
   21a08:	str	r0, [sp, #4]
   21a0c:	mov	r0, r1
   21a10:	ldr	r1, [sp, #4]
   21a14:	bl	28270 <main@@Base+0x4ebc>
   21a18:	mov	sp, fp
   21a1c:	pop	{fp, pc}
   21a20:	push	{fp, lr}
   21a24:	mov	fp, sp
   21a28:	sub	sp, sp, #24
   21a2c:	ldr	r1, [pc, #112]	; 21aa4 <test_nested_buffer@@Base+0x348>
   21a30:	add	r1, pc, r1
   21a34:	str	r0, [fp, #-4]
   21a38:	str	r1, [fp, #-8]
   21a3c:	ldr	r0, [fp, #-4]
   21a40:	bl	282dc <main@@Base+0x4f28>
   21a44:	str	r0, [sp, #12]
   21a48:	ldr	r0, [sp, #12]
   21a4c:	movw	r1, #0
   21a50:	cmp	r0, r1
   21a54:	beq	21a6c <test_nested_buffer@@Base+0x310>
   21a58:	ldr	r0, [sp, #12]
   21a5c:	ldr	r1, [fp, #-8]
   21a60:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   21a64:	cmp	r0, #0
   21a68:	bne	21a78 <test_nested_buffer@@Base+0x31c>
   21a6c:	movw	r0, #0
   21a70:	str	r0, [sp, #8]
   21a74:	b	21a98 <test_nested_buffer@@Base+0x33c>
   21a78:	ldr	r0, [sp, #12]
   21a7c:	ldr	r1, [sp, #12]
   21a80:	str	r0, [sp, #4]
   21a84:	mov	r0, r1
   21a88:	bl	2386c <main@@Base+0x4b8>
   21a8c:	ldr	r1, [sp, #4]
   21a90:	add	r0, r1, r0
   21a94:	str	r0, [sp, #8]
   21a98:	ldr	r0, [sp, #8]
   21a9c:	mov	sp, fp
   21aa0:	pop	{fp, pc}
   21aa4:	andeq	r0, r1, r4, lsr #3

00021aa8 <test_nested_buffer_first@@Base>:
   21aa8:	push	{fp, lr}
   21aac:	mov	fp, sp
   21ab0:	sub	sp, sp, #72	; 0x48
   21ab4:	str	r0, [fp, #-8]
   21ab8:	ldr	r0, [fp, #-8]
   21abc:	bl	28b78 <flatcc_builder_reset@@Base>
   21ac0:	ldr	lr, [fp, #-8]
   21ac4:	str	r0, [fp, #-28]	; 0xffffffe4
   21ac8:	mov	r0, lr
   21acc:	bl	18e74 <gen_monster@@Base+0x890>
   21ad0:	ldr	lr, [fp, #-8]
   21ad4:	str	r0, [fp, #-32]	; 0xffffffe0
   21ad8:	mov	r0, lr
   21adc:	bl	21974 <test_nested_buffer@@Base+0x218>
   21ae0:	ldr	lr, [pc, #436]	; 21c9c <test_nested_buffer_first@@Base+0x1f4>
   21ae4:	add	r1, pc, lr
   21ae8:	ldr	lr, [fp, #-8]
   21aec:	str	r0, [sp, #36]	; 0x24
   21af0:	mov	r0, lr
   21af4:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21af8:	ldr	r1, [fp, #-8]
   21afc:	str	r0, [sp, #32]
   21b00:	mov	r0, r1
   21b04:	bl	219c4 <test_nested_buffer@@Base+0x268>
   21b08:	ldr	r1, [fp, #-8]
   21b0c:	str	r0, [sp, #28]
   21b10:	mov	r0, r1
   21b14:	movw	r1, #10
   21b18:	sxth	r1, r1
   21b1c:	bl	18ec4 <gen_monster@@Base+0x8e0>
   21b20:	ldr	r1, [pc, #368]	; 21c98 <test_nested_buffer_first@@Base+0x1f0>
   21b24:	add	r1, pc, r1
   21b28:	ldr	lr, [fp, #-8]
   21b2c:	str	r0, [sp, #24]
   21b30:	mov	r0, lr
   21b34:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21b38:	ldr	r1, [fp, #-8]
   21b3c:	str	r0, [sp, #20]
   21b40:	mov	r0, r1
   21b44:	bl	19a24 <gen_monster@@Base+0x1440>
   21b48:	ldr	r1, [fp, #-8]
   21b4c:	str	r0, [sp, #16]
   21b50:	mov	r0, r1
   21b54:	sub	r1, fp, #16
   21b58:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   21b5c:	ldr	r1, [pc, #300]	; 21c90 <test_nested_buffer_first@@Base+0x1e8>
   21b60:	add	r1, pc, r1
   21b64:	ldr	lr, [pc, #296]	; 21c94 <test_nested_buffer_first@@Base+0x1ec>
   21b68:	ldr	lr, [pc, lr]
   21b6c:	str	r0, [fp, #-12]
   21b70:	ldr	r0, [fp, #-12]
   21b74:	ldr	r2, [fp, #-16]
   21b78:	ldr	r3, [lr]
   21b7c:	str	r0, [sp, #12]
   21b80:	mov	r0, r1
   21b84:	ldr	r1, [sp, #12]
   21b88:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   21b8c:	ldr	r0, [fp, #-12]
   21b90:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   21b94:	str	r0, [fp, #-20]	; 0xffffffec
   21b98:	ldr	r0, [fp, #-20]	; 0xffffffec
   21b9c:	bl	16d54 <verify_monster@@Base+0x1300>
   21ba0:	ldr	r1, [pc, #272]	; 21cb8 <test_nested_buffer_first@@Base+0x210>
   21ba4:	add	r1, pc, r1
   21ba8:	bl	12d90 <strcmp@plt>
   21bac:	cmp	r0, #0
   21bb0:	beq	21bd0 <test_nested_buffer_first@@Base+0x128>
   21bb4:	ldr	r0, [pc, #248]	; 21cb4 <test_nested_buffer_first@@Base+0x20c>
   21bb8:	add	r0, pc, r0
   21bbc:	bl	12d9c <printf@plt>
   21bc0:	mvn	lr, #0
   21bc4:	str	lr, [fp, #-4]
   21bc8:	str	r0, [sp, #8]
   21bcc:	b	21c84 <test_nested_buffer_first@@Base+0x1dc>
   21bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   21bd4:	bl	21a20 <test_nested_buffer@@Base+0x2c4>
   21bd8:	str	r0, [fp, #-24]	; 0xffffffe8
   21bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
   21be0:	bl	13294 <verify_empty_monster@@Base+0x32c>
   21be4:	sxth	r0, r0
   21be8:	cmp	r0, #10
   21bec:	beq	21c0c <test_nested_buffer_first@@Base+0x164>
   21bf0:	ldr	r0, [pc, #184]	; 21cb0 <test_nested_buffer_first@@Base+0x208>
   21bf4:	add	r0, pc, r0
   21bf8:	bl	12d9c <printf@plt>
   21bfc:	mvn	lr, #0
   21c00:	str	lr, [fp, #-4]
   21c04:	str	r0, [sp, #4]
   21c08:	b	21c84 <test_nested_buffer_first@@Base+0x1dc>
   21c0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21c10:	bl	16d54 <verify_monster@@Base+0x1300>
   21c14:	movw	lr, #0
   21c18:	cmp	r0, lr
   21c1c:	beq	21c24 <test_nested_buffer_first@@Base+0x17c>
   21c20:	b	21c44 <test_nested_buffer_first@@Base+0x19c>
   21c24:	ldr	r0, [pc, #116]	; 21ca0 <test_nested_buffer_first@@Base+0x1f8>
   21c28:	add	r0, pc, r0
   21c2c:	ldr	r1, [pc, #112]	; 21ca4 <test_nested_buffer_first@@Base+0x1fc>
   21c30:	add	r1, pc, r1
   21c34:	ldr	r2, [pc, #108]	; 21ca8 <test_nested_buffer_first@@Base+0x200>
   21c38:	add	r3, pc, r2
   21c3c:	movw	r2, #2241	; 0x8c1
   21c40:	bl	12e68 <__assert_fail@plt>
   21c44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21c48:	bl	16d54 <verify_monster@@Base+0x1300>
   21c4c:	ldr	r1, [pc, #104]	; 21cbc <test_nested_buffer_first@@Base+0x214>
   21c50:	add	r1, pc, r1
   21c54:	bl	12d90 <strcmp@plt>
   21c58:	cmp	r0, #0
   21c5c:	beq	21c7c <test_nested_buffer_first@@Base+0x1d4>
   21c60:	ldr	r0, [pc, #68]	; 21cac <test_nested_buffer_first@@Base+0x204>
   21c64:	add	r0, pc, r0
   21c68:	bl	12d9c <printf@plt>
   21c6c:	mvn	lr, #0
   21c70:	str	lr, [fp, #-4]
   21c74:	str	r0, [sp]
   21c78:	b	21c84 <test_nested_buffer_first@@Base+0x1dc>
   21c7c:	movw	r0, #0
   21c80:	str	r0, [fp, #-4]
   21c84:	ldr	r0, [fp, #-4]
   21c88:	mov	sp, fp
   21c8c:	pop	{fp, pc}
   21c90:	andeq	r2, r1, r1, ror #10
   21c94:	andeq	r7, r2, ip, ror #9
   21c98:	andeq	r0, r1, r7, lsl #5
   21c9c:	andeq	r2, r1, sp, asr #11
   21ca0:	andeq	r2, r1, ip, ror #9
   21ca4:	andeq	r0, r1, r3, lsl sl
   21ca8:	andeq	r2, r1, lr, lsr r5
   21cac:	strdeq	r2, [r1], -r4
   21cb0:	strdeq	r2, [r1], -fp
   21cb4:	andeq	r2, r1, fp, lsl r5
   21cb8:	andeq	r0, r1, r7, lsl #4
   21cbc:	andeq	r2, r1, r1, ror #8

00021cc0 <test_nested_buffer_using_nest@@Base>:
   21cc0:	push	{r4, r5, fp, lr}
   21cc4:	add	fp, sp, #8
   21cc8:	sub	sp, sp, #104	; 0x68
   21ccc:	sub	sp, sp, #1024	; 0x400
   21cd0:	str	r0, [fp, #-16]
   21cd4:	ldr	r0, [fp, #-16]
   21cd8:	bl	28b78 <flatcc_builder_reset@@Base>
   21cdc:	ldr	lr, [fp, #-16]
   21ce0:	str	r0, [sp, #72]	; 0x48
   21ce4:	mov	r0, lr
   21ce8:	bl	18e74 <gen_monster@@Base+0x890>
   21cec:	ldr	lr, [pc, #640]	; 21f74 <test_nested_buffer_using_nest@@Base+0x2b4>
   21cf0:	add	r1, pc, lr
   21cf4:	ldr	lr, [fp, #-16]
   21cf8:	str	r0, [sp, #68]	; 0x44
   21cfc:	mov	r0, lr
   21d00:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21d04:	ldr	r1, [fp, #-16]
   21d08:	str	r0, [sp, #64]	; 0x40
   21d0c:	mov	r0, r1
   21d10:	movw	r1, #42	; 0x2a
   21d14:	sxth	r1, r1
   21d18:	bl	214c4 <test_add_set_defaults@@Base+0x2a4>
   21d1c:	ldr	r1, [fp, #-16]
   21d20:	str	r0, [sp, #60]	; 0x3c
   21d24:	mov	r0, r1
   21d28:	bl	19a24 <gen_monster@@Base+0x1440>
   21d2c:	ldr	r1, [fp, #-16]
   21d30:	str	r0, [sp, #56]	; 0x38
   21d34:	mov	r0, r1
   21d38:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   21d3c:	add	r1, sp, #92	; 0x5c
   21d40:	str	r0, [sp, #84]	; 0x54
   21d44:	ldr	r0, [fp, #-16]
   21d48:	movw	r2, #1024	; 0x400
   21d4c:	bl	2de68 <flatcc_builder_copy_buffer@@Base>
   21d50:	movw	r1, #0
   21d54:	cmp	r0, r1
   21d58:	bne	21d78 <test_nested_buffer_using_nest@@Base+0xb8>
   21d5c:	ldr	r0, [pc, #532]	; 21f78 <test_nested_buffer_using_nest@@Base+0x2b8>
   21d60:	add	r0, pc, r0
   21d64:	bl	12d9c <printf@plt>
   21d68:	mvn	lr, #0
   21d6c:	str	lr, [fp, #-12]
   21d70:	str	r0, [sp, #52]	; 0x34
   21d74:	b	21f68 <test_nested_buffer_using_nest@@Base+0x2a8>
   21d78:	ldr	r0, [fp, #-16]
   21d7c:	bl	28b78 <flatcc_builder_reset@@Base>
   21d80:	ldr	lr, [fp, #-16]
   21d84:	str	r0, [sp, #48]	; 0x30
   21d88:	mov	r0, lr
   21d8c:	bl	18e74 <gen_monster@@Base+0x890>
   21d90:	add	r1, sp, #92	; 0x5c
   21d94:	ldr	lr, [fp, #-16]
   21d98:	ldr	r2, [sp, #84]	; 0x54
   21d9c:	str	r0, [sp, #44]	; 0x2c
   21da0:	mov	r0, lr
   21da4:	movw	lr, #0
   21da8:	uxth	r3, lr
   21dac:	bl	21fac <test_nested_buffer_using_nest@@Base+0x2ec>
   21db0:	ldr	r1, [fp, #-16]
   21db4:	str	r0, [sp, #40]	; 0x28
   21db8:	mov	r0, r1
   21dbc:	movw	r1, #10
   21dc0:	sxth	r1, r1
   21dc4:	bl	18ec4 <gen_monster@@Base+0x8e0>
   21dc8:	ldr	r1, [pc, #436]	; 21f84 <test_nested_buffer_using_nest@@Base+0x2c4>
   21dcc:	add	r1, pc, r1
   21dd0:	ldr	r2, [fp, #-16]
   21dd4:	str	r0, [sp, #36]	; 0x24
   21dd8:	mov	r0, r2
   21ddc:	bl	14934 <test_empty_monster@@Base+0x1f0>
   21de0:	ldr	r1, [fp, #-16]
   21de4:	str	r0, [sp, #32]
   21de8:	mov	r0, r1
   21dec:	bl	19a24 <gen_monster@@Base+0x1440>
   21df0:	ldr	r1, [fp, #-16]
   21df4:	str	r0, [sp, #28]
   21df8:	mov	r0, r1
   21dfc:	add	r1, sp, #88	; 0x58
   21e00:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   21e04:	ldr	r1, [pc, #368]	; 21f7c <test_nested_buffer_using_nest@@Base+0x2bc>
   21e08:	add	r1, pc, r1
   21e0c:	ldr	r2, [pc, #364]	; 21f80 <test_nested_buffer_using_nest@@Base+0x2c0>
   21e10:	ldr	r2, [pc, r2]
   21e14:	str	r0, [fp, #-20]	; 0xffffffec
   21e18:	ldr	r0, [fp, #-20]	; 0xffffffec
   21e1c:	ldr	r3, [sp, #88]	; 0x58
   21e20:	ldr	r2, [r2]
   21e24:	str	r0, [sp, #24]
   21e28:	mov	r0, r1
   21e2c:	ldr	r1, [sp, #24]
   21e30:	str	r2, [sp, #20]
   21e34:	mov	r2, r3
   21e38:	ldr	r3, [sp, #20]
   21e3c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   21e40:	ldr	r0, [fp, #-20]	; 0xffffffec
   21e44:	bl	13218 <verify_empty_monster@@Base+0x2b0>
   21e48:	str	r0, [sp, #80]	; 0x50
   21e4c:	ldr	r0, [sp, #80]	; 0x50
   21e50:	bl	16d54 <verify_monster@@Base+0x1300>
   21e54:	ldr	r1, [pc, #328]	; 21fa4 <test_nested_buffer_using_nest@@Base+0x2e4>
   21e58:	add	r1, pc, r1
   21e5c:	bl	12d90 <strcmp@plt>
   21e60:	cmp	r0, #0
   21e64:	beq	21e84 <test_nested_buffer_using_nest@@Base+0x1c4>
   21e68:	ldr	r0, [pc, #304]	; 21fa0 <test_nested_buffer_using_nest@@Base+0x2e0>
   21e6c:	add	r0, pc, r0
   21e70:	bl	12d9c <printf@plt>
   21e74:	mvn	lr, #0
   21e78:	str	lr, [fp, #-12]
   21e7c:	str	r0, [sp, #16]
   21e80:	b	21f68 <test_nested_buffer_using_nest@@Base+0x2a8>
   21e84:	ldr	r0, [sp, #80]	; 0x50
   21e88:	bl	21a20 <test_nested_buffer@@Base+0x2c4>
   21e8c:	str	r0, [sp, #76]	; 0x4c
   21e90:	ldr	r0, [sp, #80]	; 0x50
   21e94:	bl	13294 <verify_empty_monster@@Base+0x32c>
   21e98:	sxth	r0, r0
   21e9c:	cmp	r0, #10
   21ea0:	beq	21ec0 <test_nested_buffer_using_nest@@Base+0x200>
   21ea4:	ldr	r0, [pc, #240]	; 21f9c <test_nested_buffer_using_nest@@Base+0x2dc>
   21ea8:	add	r0, pc, r0
   21eac:	bl	12d9c <printf@plt>
   21eb0:	mvn	lr, #0
   21eb4:	str	lr, [fp, #-12]
   21eb8:	str	r0, [sp, #12]
   21ebc:	b	21f68 <test_nested_buffer_using_nest@@Base+0x2a8>
   21ec0:	ldr	r0, [sp, #76]	; 0x4c
   21ec4:	bl	16d54 <verify_monster@@Base+0x1300>
   21ec8:	movw	lr, #0
   21ecc:	cmp	r0, lr
   21ed0:	beq	21ed8 <test_nested_buffer_using_nest@@Base+0x218>
   21ed4:	b	21ef8 <test_nested_buffer_using_nest@@Base+0x238>
   21ed8:	ldr	r0, [pc, #168]	; 21f88 <test_nested_buffer_using_nest@@Base+0x2c8>
   21edc:	add	r0, pc, r0
   21ee0:	ldr	r1, [pc, #164]	; 21f8c <test_nested_buffer_using_nest@@Base+0x2cc>
   21ee4:	add	r1, pc, r1
   21ee8:	ldr	r2, [pc, #160]	; 21f90 <test_nested_buffer_using_nest@@Base+0x2d0>
   21eec:	add	r3, pc, r2
   21ef0:	movw	r2, #2298	; 0x8fa
   21ef4:	bl	12e68 <__assert_fail@plt>
   21ef8:	ldr	r0, [sp, #76]	; 0x4c
   21efc:	bl	16d54 <verify_monster@@Base+0x1300>
   21f00:	ldr	r1, [pc, #160]	; 21fa8 <test_nested_buffer_using_nest@@Base+0x2e8>
   21f04:	add	r1, pc, r1
   21f08:	bl	12d90 <strcmp@plt>
   21f0c:	cmp	r0, #0
   21f10:	beq	21f30 <test_nested_buffer_using_nest@@Base+0x270>
   21f14:	ldr	r0, [pc, #124]	; 21f98 <test_nested_buffer_using_nest@@Base+0x2d8>
   21f18:	add	r0, pc, r0
   21f1c:	bl	12d9c <printf@plt>
   21f20:	mvn	lr, #0
   21f24:	str	lr, [fp, #-12]
   21f28:	str	r0, [sp, #8]
   21f2c:	b	21f68 <test_nested_buffer_using_nest@@Base+0x2a8>
   21f30:	ldr	r0, [sp, #76]	; 0x4c
   21f34:	bl	172f0 <verify_monster@@Base+0x189c>
   21f38:	sxth	r0, r0
   21f3c:	cmp	r0, #42	; 0x2a
   21f40:	beq	21f60 <test_nested_buffer_using_nest@@Base+0x2a0>
   21f44:	ldr	r0, [pc, #72]	; 21f94 <test_nested_buffer_using_nest@@Base+0x2d4>
   21f48:	add	r0, pc, r0
   21f4c:	bl	12d9c <printf@plt>
   21f50:	mvn	lr, #0
   21f54:	str	lr, [fp, #-12]
   21f58:	str	r0, [sp, #4]
   21f5c:	b	21f68 <test_nested_buffer_using_nest@@Base+0x2a8>
   21f60:	movw	r0, #0
   21f64:	str	r0, [fp, #-12]
   21f68:	ldr	r0, [fp, #-12]
   21f6c:	sub	sp, fp, #8
   21f70:	pop	{r4, r5, fp, pc}
   21f74:	andeq	r2, r1, r1, asr #7
   21f78:	andeq	r2, r1, r7, asr #8
   21f7c:			; <UNDEFINED> instruction: 0x000123ba
   21f80:	andeq	r7, r2, r4, asr #4
   21f84:	ldrdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   21f88:	andeq	r2, r1, r8, lsr r2
   21f8c:	andeq	r0, r1, pc, asr r7
   21f90:	strdeq	r2, [r1], -r8
   21f94:	ldrdeq	r2, [r1], -r2	; <UNPREDICTABLE>
   21f98:	andeq	r2, r1, r0, asr #4
   21f9c:	andeq	r2, r1, r7, asr #4
   21fa0:	andeq	r2, r1, r7, ror #4
   21fa4:	andeq	pc, r0, r3, asr pc	; <UNPREDICTABLE>
   21fa8:	andeq	r2, r1, sp, lsr #3
   21fac:	push	{fp, lr}
   21fb0:	mov	fp, sp
   21fb4:	sub	sp, sp, #56	; 0x38
   21fb8:	str	r0, [fp, #-4]
   21fbc:	str	r1, [fp, #-8]
   21fc0:	str	r2, [fp, #-12]
   21fc4:	strh	r3, [fp, #-14]
   21fc8:	ldr	r0, [fp, #-4]
   21fcc:	ldr	r1, [fp, #-4]
   21fd0:	ldr	r2, [fp, #-8]
   21fd4:	ldr	r3, [fp, #-12]
   21fd8:	ldrh	ip, [fp, #-14]
   21fdc:	cmp	ip, #0
   21fe0:	str	r0, [fp, #-20]	; 0xffffffec
   21fe4:	str	r1, [fp, #-24]	; 0xffffffe8
   21fe8:	str	r2, [sp, #28]
   21fec:	str	r3, [sp, #24]
   21ff0:	beq	22000 <test_nested_buffer_using_nest@@Base+0x340>
   21ff4:	ldrh	r0, [fp, #-14]
   21ff8:	str	r0, [sp, #20]
   21ffc:	b	2200c <test_nested_buffer_using_nest@@Base+0x34c>
   22000:	movw	r0, #8
   22004:	str	r0, [sp, #20]
   22008:	b	2200c <test_nested_buffer_using_nest@@Base+0x34c>
   2200c:	ldr	r0, [sp, #20]
   22010:	ldr	r1, [fp, #-24]	; 0xffffffe8
   22014:	str	r0, [sp, #16]
   22018:	mov	r0, r1
   2201c:	ldr	r1, [sp, #28]
   22020:	ldr	r2, [sp, #24]
   22024:	movw	r3, #1
   22028:	ldr	ip, [sp, #16]
   2202c:	uxth	lr, ip
   22030:	str	lr, [sp]
   22034:	mvn	lr, #0
   22038:	str	lr, [sp, #4]
   2203c:	bl	2c01c <flatcc_builder_create_vector@@Base>
   22040:	ldr	r1, [fp, #-20]	; 0xffffffec
   22044:	str	r0, [sp, #12]
   22048:	mov	r0, r1
   2204c:	ldr	r1, [sp, #12]
   22050:	bl	28270 <main@@Base+0x4ebc>
   22054:	mov	sp, fp
   22058:	pop	{fp, pc}

0002205c <verify_include@@Base>:
   2205c:	sub	sp, sp, #4
   22060:	str	r0, [sp]
   22064:	movw	r0, #0
   22068:	add	sp, sp, #4
   2206c:	bx	lr

00022070 <test_struct_buffer@@Base>:
   22070:	push	{fp, lr}
   22074:	mov	fp, sp
   22078:	sub	sp, sp, #160	; 0xa0
   2207c:	str	r0, [fp, #-8]
   22080:	ldr	r0, [fp, #-8]
   22084:	bl	28b78 <flatcc_builder_reset@@Base>
   22088:	vldr	d2, [pc, #688]	; 22340 <test_struct_buffer@@Base+0x2d0>
   2208c:	ldr	lr, [fp, #-8]
   22090:	str	r0, [sp, #36]	; 0x24
   22094:	mov	r0, lr
   22098:	vmov.f32	s0, #112	; 0x3f800000  1.0
   2209c:	vmov.f32	s1, #0	; 0x40000000  2.0
   220a0:	vmov.f32	s2, #8	; 0x40400000  3.0
   220a4:	movw	lr, #8
   220a8:	sxtb	r1, lr
   220ac:	movw	lr, #2730	; 0xaaa
   220b0:	sxth	r2, lr
   220b4:	movw	lr, #239	; 0xef
   220b8:	sxtb	r3, lr
   220bc:	bl	2238c <test_struct_buffer@@Base+0x31c>
   220c0:	ldr	r1, [fp, #-8]
   220c4:	str	r0, [sp, #32]
   220c8:	mov	r0, r1
   220cc:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   220d0:	str	r0, [sp, #48]	; 0x30
   220d4:	ldr	r0, [sp, #48]	; 0x30
   220d8:	cmp	r0, #48	; 0x30
   220dc:	bne	220e4 <test_struct_buffer@@Base+0x74>
   220e0:	b	22104 <test_struct_buffer@@Base+0x94>
   220e4:	ldr	r0, [pc, #604]	; 22348 <test_struct_buffer@@Base+0x2d8>
   220e8:	add	r0, pc, r0
   220ec:	ldr	r1, [pc, #600]	; 2234c <test_struct_buffer@@Base+0x2dc>
   220f0:	add	r1, pc, r1
   220f4:	ldr	r2, [pc, #596]	; 22350 <test_struct_buffer@@Base+0x2e0>
   220f8:	add	r3, pc, r2
   220fc:	movw	r2, #2339	; 0x923
   22100:	bl	12e68 <__assert_fail@plt>
   22104:	ldr	r0, [pc, #584]	; 22354 <test_struct_buffer@@Base+0x2e4>
   22108:	add	r0, pc, r0
   2210c:	ldr	r1, [sp, #48]	; 0x30
   22110:	bl	12d9c <printf@plt>
   22114:	ldr	r1, [fp, #-8]
   22118:	str	r0, [sp, #28]
   2211c:	mov	r0, r1
   22120:	bl	2e1d8 <flatcc_builder_get_emit_context@@Base>
   22124:	bl	22434 <test_struct_buffer@@Base+0x3c4>
   22128:	ldr	r1, [sp, #48]	; 0x30
   2212c:	cmp	r0, r1
   22130:	bne	22138 <test_struct_buffer@@Base+0xc8>
   22134:	b	22158 <test_struct_buffer@@Base+0xe8>
   22138:	ldr	r0, [pc, #536]	; 22358 <test_struct_buffer@@Base+0x2e8>
   2213c:	add	r0, pc, r0
   22140:	ldr	r1, [pc, #532]	; 2235c <test_struct_buffer@@Base+0x2ec>
   22144:	add	r1, pc, r1
   22148:	ldr	r2, [pc, #528]	; 22360 <test_struct_buffer@@Base+0x2f0>
   2214c:	add	r3, pc, r2
   22150:	movw	r2, #2341	; 0x925
   22154:	bl	12e68 <__assert_fail@plt>
   22158:	add	r1, sp, #52	; 0x34
   2215c:	ldr	r0, [fp, #-8]
   22160:	movw	r2, #100	; 0x64
   22164:	bl	2de68 <flatcc_builder_copy_buffer@@Base>
   22168:	movw	r1, #0
   2216c:	cmp	r0, r1
   22170:	bne	22190 <test_struct_buffer@@Base+0x120>
   22174:	ldr	r0, [pc, #488]	; 22364 <test_struct_buffer@@Base+0x2f4>
   22178:	add	r0, pc, r0
   2217c:	bl	12d9c <printf@plt>
   22180:	mvn	lr, #0
   22184:	str	lr, [fp, #-4]
   22188:	str	r0, [sp, #24]
   2218c:	b	22334 <test_struct_buffer@@Base+0x2c4>
   22190:	ldr	r0, [pc, #468]	; 2236c <test_struct_buffer@@Base+0x2fc>
   22194:	add	r0, pc, r0
   22198:	ldr	r1, [pc, #464]	; 22370 <test_struct_buffer@@Base+0x300>
   2219c:	ldr	r1, [pc, r1]
   221a0:	add	r2, sp, #52	; 0x34
   221a4:	ldr	r3, [sp, #48]	; 0x30
   221a8:	ldr	r1, [r1]
   221ac:	str	r1, [sp, #20]
   221b0:	mov	r1, r2
   221b4:	mov	r2, r3
   221b8:	ldr	r3, [sp, #20]
   221bc:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   221c0:	ldr	r0, [pc, #416]	; 22368 <test_struct_buffer@@Base+0x2f8>
   221c4:	add	r1, pc, r0
   221c8:	add	r0, sp, #52	; 0x34
   221cc:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   221d0:	cmp	r0, #0
   221d4:	bne	221f4 <test_struct_buffer@@Base+0x184>
   221d8:	ldr	r0, [pc, #404]	; 22374 <test_struct_buffer@@Base+0x304>
   221dc:	add	r0, pc, r0
   221e0:	bl	12d9c <printf@plt>
   221e4:	mvn	lr, #0
   221e8:	str	lr, [fp, #-4]
   221ec:	str	r0, [sp, #16]
   221f0:	b	22334 <test_struct_buffer@@Base+0x2c4>
   221f4:	ldr	r0, [pc, #380]	; 22378 <test_struct_buffer@@Base+0x308>
   221f8:	add	r1, pc, r0
   221fc:	add	r0, sp, #52	; 0x34
   22200:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   22204:	cmp	r0, #0
   22208:	beq	22228 <test_struct_buffer@@Base+0x1b8>
   2220c:	ldr	r0, [pc, #372]	; 22388 <test_struct_buffer@@Base+0x318>
   22210:	add	r0, pc, r0
   22214:	bl	12d9c <printf@plt>
   22218:	mvn	lr, #0
   2221c:	str	lr, [fp, #-4]
   22220:	str	r0, [sp, #12]
   22224:	b	22334 <test_struct_buffer@@Base+0x2c4>
   22228:	ldr	r0, [pc, #332]	; 2237c <test_struct_buffer@@Base+0x30c>
   2222c:	add	r1, pc, r0
   22230:	add	r0, sp, #52	; 0x34
   22234:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   22238:	cmp	r0, #0
   2223c:	bne	2225c <test_struct_buffer@@Base+0x1ec>
   22240:	ldr	r0, [pc, #312]	; 22380 <test_struct_buffer@@Base+0x310>
   22244:	add	r0, pc, r0
   22248:	bl	12d9c <printf@plt>
   2224c:	mvn	lr, #0
   22250:	str	lr, [fp, #-4]
   22254:	str	r0, [sp, #8]
   22258:	b	22334 <test_struct_buffer@@Base+0x2c4>
   2225c:	add	r0, sp, #52	; 0x34
   22260:	bl	2244c <test_struct_buffer@@Base+0x3dc>
   22264:	str	r0, [sp, #40]	; 0x28
   22268:	ldr	r0, [sp, #40]	; 0x28
   2226c:	str	r0, [sp, #44]	; 0x2c
   22270:	ldr	r0, [sp, #44]	; 0x2c
   22274:	bl	224c8 <test_struct_buffer@@Base+0x458>
   22278:	ldr	lr, [sp, #44]	; 0x2c
   2227c:	vldr	s0, [lr]
   22280:	vmov.f32	s2, #112	; 0x3f800000  1.0
   22284:	vcmp.f32	s0, s2
   22288:	vmrs	APSR_nzcv, fpscr
   2228c:	str	r0, [sp, #4]
   22290:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   22294:	ldr	r0, [sp, #44]	; 0x2c
   22298:	vldr	s0, [r0, #4]
   2229c:	vmov.f32	s2, #0	; 0x40000000  2.0
   222a0:	vcmp.f32	s0, s2
   222a4:	vmrs	APSR_nzcv, fpscr
   222a8:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   222ac:	ldr	r0, [sp, #44]	; 0x2c
   222b0:	vldr	s0, [r0, #8]
   222b4:	vmov.f32	s2, #8	; 0x40400000  3.0
   222b8:	vcmp.f32	s0, s2
   222bc:	vmrs	APSR_nzcv, fpscr
   222c0:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   222c4:	vldr	d16, [pc, #116]	; 22340 <test_struct_buffer@@Base+0x2d0>
   222c8:	ldr	r0, [sp, #44]	; 0x2c
   222cc:	vldr	d17, [r0, #16]
   222d0:	vcmp.f64	d17, d16
   222d4:	vmrs	APSR_nzcv, fpscr
   222d8:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   222dc:	ldr	r0, [sp, #44]	; 0x2c
   222e0:	ldrsb	r0, [r0, #24]
   222e4:	cmp	r0, #8
   222e8:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   222ec:	ldr	r0, [sp, #44]	; 0x2c
   222f0:	ldrsh	r0, [r0, #26]
   222f4:	movw	r1, #2730	; 0xaaa
   222f8:	cmp	r0, r1
   222fc:	bne	22310 <test_struct_buffer@@Base+0x2a0>
   22300:	ldr	r0, [sp, #44]	; 0x2c
   22304:	ldrsb	r0, [r0, #28]
   22308:	cmn	r0, #17
   2230c:	beq	2232c <test_struct_buffer@@Base+0x2bc>
   22310:	ldr	r0, [pc, #108]	; 22384 <test_struct_buffer@@Base+0x314>
   22314:	add	r0, pc, r0
   22318:	bl	12d9c <printf@plt>
   2231c:	mvn	lr, #0
   22320:	str	lr, [fp, #-4]
   22324:	str	r0, [sp]
   22328:	b	22334 <test_struct_buffer@@Base+0x2c4>
   2232c:	movw	r0, #0
   22330:	str	r0, [fp, #-4]
   22334:	ldr	r0, [fp, #-4]
   22338:	mov	sp, fp
   2233c:	pop	{fp, pc}
   22340:	stclgt	12, cr12, [ip], {205}	; 0xcd
   22344:	andsmi	ip, r0, ip, asr #25
   22348:	andeq	r2, r1, r7, asr r1
   2234c:	andeq	r0, r1, r3, asr r5
   22350:	andeq	r2, r1, r2, asr r1
   22354:	andeq	r2, r1, sp, ror #2
   22358:	andeq	r2, r1, r6, asr r1
   2235c:	strdeq	r0, [r1], -pc	; <UNPREDICTABLE>
   22360:	strdeq	r2, [r1], -lr
   22364:	andeq	r2, r1, r5, ror #2
   22368:	andeq	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
   2236c:	strdeq	r2, [r1], -sl
   22370:			; <UNDEFINED> instruction: 0x00026eb8
   22374:	andeq	r2, r1, ip, lsl r1
   22378:	strdeq	r2, [r1], -r2	; <UNPREDICTABLE>
   2237c:	andeq	pc, r0, r8, lsr #19
   22380:	ldrdeq	r2, [r1], -r6
   22384:	andeq	r2, r1, sl, lsr #32
   22388:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   2238c:	push	{fp, lr}
   22390:	mov	fp, sp
   22394:	sub	sp, sp, #48	; 0x30
   22398:	str	r0, [fp, #-4]
   2239c:	vstr	s0, [fp, #-8]
   223a0:	vstr	s1, [fp, #-12]
   223a4:	vstr	s2, [fp, #-16]
   223a8:	vstr	d2, [sp, #24]
   223ac:	strb	r1, [sp, #23]
   223b0:	strh	r2, [sp, #20]
   223b4:	strb	r3, [sp, #19]
   223b8:	ldr	r0, [fp, #-4]
   223bc:	ldr	r1, [fp, #-4]
   223c0:	vldr	s0, [fp, #-8]
   223c4:	vldr	s1, [fp, #-12]
   223c8:	vldr	s2, [fp, #-16]
   223cc:	vldr	d2, [sp, #24]
   223d0:	ldrb	r2, [sp, #23]
   223d4:	ldrh	r3, [sp, #20]
   223d8:	str	r0, [sp, #12]
   223dc:	mov	r0, r1
   223e0:	sxtb	r1, r2
   223e4:	sxth	r2, r3
   223e8:	ldrsb	r3, [sp, #19]
   223ec:	bl	283e4 <main@@Base+0x5030>
   223f0:	ldr	r1, [pc, #56]	; 22430 <test_struct_buffer@@Base+0x3c0>
   223f4:	add	r1, pc, r1
   223f8:	ldr	r2, [sp, #12]
   223fc:	str	r0, [sp, #8]
   22400:	mov	r0, r2
   22404:	movw	r3, #0
   22408:	uxth	r2, r3
   2240c:	ldr	r3, [sp, #8]
   22410:	movw	lr, #16
   22414:	uxth	lr, lr
   22418:	str	lr, [sp]
   2241c:	movw	lr, #0
   22420:	str	lr, [sp, #4]
   22424:	bl	29514 <flatcc_builder_create_buffer@@Base>
   22428:	mov	sp, fp
   2242c:	pop	{fp, pc}
   22430:	andeq	pc, r0, r0, ror #15
   22434:	sub	sp, sp, #4
   22438:	str	r0, [sp]
   2243c:	ldr	r0, [sp]
   22440:	ldr	r0, [r0, #24]
   22444:	add	sp, sp, #4
   22448:	bx	lr
   2244c:	push	{fp, lr}
   22450:	mov	fp, sp
   22454:	sub	sp, sp, #16
   22458:	ldr	r1, [pc, #100]	; 224c4 <test_struct_buffer@@Base+0x454>
   2245c:	add	r1, pc, r1
   22460:	str	r0, [fp, #-4]
   22464:	str	r1, [sp, #8]
   22468:	ldr	r0, [fp, #-4]
   2246c:	movw	r1, #0
   22470:	cmp	r0, r1
   22474:	beq	2248c <test_struct_buffer@@Base+0x41c>
   22478:	ldr	r0, [fp, #-4]
   2247c:	ldr	r1, [sp, #8]
   22480:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   22484:	cmp	r0, #0
   22488:	bne	22498 <test_struct_buffer@@Base+0x428>
   2248c:	movw	r0, #0
   22490:	str	r0, [sp, #4]
   22494:	b	224b8 <test_struct_buffer@@Base+0x448>
   22498:	ldr	r0, [fp, #-4]
   2249c:	ldr	r1, [fp, #-4]
   224a0:	str	r0, [sp]
   224a4:	mov	r0, r1
   224a8:	bl	2386c <main@@Base+0x4b8>
   224ac:	ldr	r1, [sp]
   224b0:	add	r0, r1, r0
   224b4:	str	r0, [sp, #4]
   224b8:	ldr	r0, [sp, #4]
   224bc:	mov	sp, fp
   224c0:	pop	{fp, pc}
   224c4:	andeq	pc, r0, r8, ror r7	; <UNPREDICTABLE>
   224c8:	sub	sp, sp, #4
   224cc:	str	r0, [sp]
   224d0:	ldr	r0, [sp]
   224d4:	add	sp, sp, #4
   224d8:	bx	lr
   224dc:	nop	{0}

000224e0 <test_typed_struct_buffer@@Base>:
   224e0:	push	{fp, lr}
   224e4:	mov	fp, sp
   224e8:	sub	sp, sp, #176	; 0xb0
   224ec:	str	r0, [fp, #-8]
   224f0:	ldr	r0, [fp, #-8]
   224f4:	bl	28b78 <flatcc_builder_reset@@Base>
   224f8:	vldr	d2, [pc, #896]	; 22880 <test_typed_struct_buffer@@Base+0x3a0>
   224fc:	ldr	lr, [fp, #-8]
   22500:	str	r0, [sp, #52]	; 0x34
   22504:	mov	r0, lr
   22508:	vmov.f32	s0, #112	; 0x3f800000  1.0
   2250c:	vmov.f32	s1, #0	; 0x40000000  2.0
   22510:	vmov.f32	s2, #8	; 0x40400000  3.0
   22514:	movw	lr, #8
   22518:	sxtb	r1, lr
   2251c:	movw	lr, #2730	; 0xaaa
   22520:	sxth	r2, lr
   22524:	movw	lr, #239	; 0xef
   22528:	sxtb	r3, lr
   2252c:	bl	228e0 <test_typed_struct_buffer@@Base+0x400>
   22530:	ldr	r1, [fp, #-8]
   22534:	str	r0, [sp, #48]	; 0x30
   22538:	mov	r0, r1
   2253c:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   22540:	str	r0, [sp, #64]	; 0x40
   22544:	ldr	r0, [sp, #64]	; 0x40
   22548:	cmp	r0, #48	; 0x30
   2254c:	bne	22554 <test_typed_struct_buffer@@Base+0x74>
   22550:	b	22574 <test_typed_struct_buffer@@Base+0x94>
   22554:	ldr	r0, [pc, #812]	; 22888 <test_typed_struct_buffer@@Base+0x3a8>
   22558:	add	r0, pc, r0
   2255c:	ldr	r1, [pc, #808]	; 2288c <test_typed_struct_buffer@@Base+0x3ac>
   22560:	add	r1, pc, r1
   22564:	ldr	r2, [pc, #804]	; 22890 <test_typed_struct_buffer@@Base+0x3b0>
   22568:	add	r3, pc, r2
   2256c:	movw	r2, #2388	; 0x954
   22570:	bl	12e68 <__assert_fail@plt>
   22574:	ldr	r0, [pc, #792]	; 22894 <test_typed_struct_buffer@@Base+0x3b4>
   22578:	add	r0, pc, r0
   2257c:	ldr	r1, [sp, #64]	; 0x40
   22580:	bl	12d9c <printf@plt>
   22584:	ldr	r1, [fp, #-8]
   22588:	str	r0, [sp, #44]	; 0x2c
   2258c:	mov	r0, r1
   22590:	bl	2e1d8 <flatcc_builder_get_emit_context@@Base>
   22594:	bl	22434 <test_struct_buffer@@Base+0x3c4>
   22598:	ldr	r1, [sp, #64]	; 0x40
   2259c:	cmp	r0, r1
   225a0:	bne	225a8 <test_typed_struct_buffer@@Base+0xc8>
   225a4:	b	225c8 <test_typed_struct_buffer@@Base+0xe8>
   225a8:	ldr	r0, [pc, #744]	; 22898 <test_typed_struct_buffer@@Base+0x3b8>
   225ac:	add	r0, pc, r0
   225b0:	ldr	r1, [pc, #740]	; 2289c <test_typed_struct_buffer@@Base+0x3bc>
   225b4:	add	r1, pc, r1
   225b8:	ldr	r2, [pc, #736]	; 228a0 <test_typed_struct_buffer@@Base+0x3c0>
   225bc:	add	r3, pc, r2
   225c0:	movw	r2, #2390	; 0x956
   225c4:	bl	12e68 <__assert_fail@plt>
   225c8:	add	r1, sp, #68	; 0x44
   225cc:	ldr	r0, [fp, #-8]
   225d0:	movw	r2, #100	; 0x64
   225d4:	bl	2de68 <flatcc_builder_copy_buffer@@Base>
   225d8:	movw	r1, #0
   225dc:	cmp	r0, r1
   225e0:	bne	22600 <test_typed_struct_buffer@@Base+0x120>
   225e4:	ldr	r0, [pc, #696]	; 228a4 <test_typed_struct_buffer@@Base+0x3c4>
   225e8:	add	r0, pc, r0
   225ec:	bl	12d9c <printf@plt>
   225f0:	mvn	lr, #0
   225f4:	str	lr, [fp, #-4]
   225f8:	str	r0, [sp, #40]	; 0x28
   225fc:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22600:	ldr	r0, [pc, #676]	; 228ac <test_typed_struct_buffer@@Base+0x3cc>
   22604:	add	r0, pc, r0
   22608:	ldr	r1, [pc, #672]	; 228b0 <test_typed_struct_buffer@@Base+0x3d0>
   2260c:	ldr	r1, [pc, r1]
   22610:	add	r2, sp, #68	; 0x44
   22614:	ldr	r3, [sp, #64]	; 0x40
   22618:	ldr	r1, [r1]
   2261c:	str	r1, [sp, #36]	; 0x24
   22620:	mov	r1, r2
   22624:	mov	r2, r3
   22628:	ldr	r3, [sp, #36]	; 0x24
   2262c:	bl	13b10 <test_type_aliases@@Base+0x4f8>
   22630:	ldr	r0, [pc, #624]	; 228a8 <test_typed_struct_buffer@@Base+0x3c8>
   22634:	add	r1, pc, r0
   22638:	add	r0, sp, #68	; 0x44
   2263c:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   22640:	cmp	r0, #0
   22644:	bne	22664 <test_typed_struct_buffer@@Base+0x184>
   22648:	ldr	r0, [pc, #612]	; 228b4 <test_typed_struct_buffer@@Base+0x3d4>
   2264c:	add	r0, pc, r0
   22650:	bl	12d9c <printf@plt>
   22654:	mvn	lr, #0
   22658:	str	lr, [fp, #-4]
   2265c:	str	r0, [sp, #32]
   22660:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22664:	ldr	r0, [pc, #588]	; 228b8 <test_typed_struct_buffer@@Base+0x3d8>
   22668:	add	r1, pc, r0
   2266c:	add	r0, sp, #68	; 0x44
   22670:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   22674:	cmp	r0, #0
   22678:	beq	22698 <test_typed_struct_buffer@@Base+0x1b8>
   2267c:	ldr	r0, [pc, #600]	; 228dc <test_typed_struct_buffer@@Base+0x3fc>
   22680:	add	r0, pc, r0
   22684:	bl	12d9c <printf@plt>
   22688:	mvn	lr, #0
   2268c:	str	lr, [fp, #-4]
   22690:	str	r0, [sp, #28]
   22694:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22698:	ldr	r0, [pc, #540]	; 228bc <test_typed_struct_buffer@@Base+0x3dc>
   2269c:	add	r1, pc, r0
   226a0:	add	r0, sp, #68	; 0x44
   226a4:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   226a8:	cmp	r0, #0
   226ac:	bne	226cc <test_typed_struct_buffer@@Base+0x1ec>
   226b0:	ldr	r0, [pc, #520]	; 228c0 <test_typed_struct_buffer@@Base+0x3e0>
   226b4:	add	r0, pc, r0
   226b8:	bl	12d9c <printf@plt>
   226bc:	mvn	lr, #0
   226c0:	str	lr, [fp, #-4]
   226c4:	str	r0, [sp, #24]
   226c8:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   226cc:	ldr	r1, [pc, #496]	; 228c4 <test_typed_struct_buffer@@Base+0x3e4>
   226d0:	add	r0, sp, #68	; 0x44
   226d4:	bl	22988 <test_typed_struct_buffer@@Base+0x4a8>
   226d8:	movw	r1, #0
   226dc:	cmp	r0, r1
   226e0:	bne	22700 <test_typed_struct_buffer@@Base+0x220>
   226e4:	ldr	r0, [pc, #476]	; 228c8 <test_typed_struct_buffer@@Base+0x3e8>
   226e8:	add	r0, pc, r0
   226ec:	bl	12d9c <printf@plt>
   226f0:	mvn	lr, #0
   226f4:	str	lr, [fp, #-4]
   226f8:	str	r0, [sp, #20]
   226fc:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22700:	ldr	r2, [pc, #444]	; 228c4 <test_typed_struct_buffer@@Base+0x3e4>
   22704:	add	r0, sp, #68	; 0x44
   22708:	ldr	r1, [sp, #64]	; 0x40
   2270c:	bl	229f8 <test_typed_struct_buffer@@Base+0x518>
   22710:	movw	r1, #0
   22714:	cmp	r1, r0
   22718:	beq	22738 <test_typed_struct_buffer@@Base+0x258>
   2271c:	ldr	r0, [pc, #436]	; 228d8 <test_typed_struct_buffer@@Base+0x3f8>
   22720:	add	r0, pc, r0
   22724:	bl	12d9c <printf@plt>
   22728:	mvn	lr, #0
   2272c:	str	lr, [fp, #-4]
   22730:	str	r0, [sp, #16]
   22734:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22738:	add	r0, sp, #68	; 0x44
   2273c:	bl	22a38 <test_typed_struct_buffer@@Base+0x558>
   22740:	str	r0, [sp, #56]	; 0x38
   22744:	ldr	r0, [sp, #56]	; 0x38
   22748:	movw	lr, #0
   2274c:	cmp	r0, lr
   22750:	bne	22770 <test_typed_struct_buffer@@Base+0x290>
   22754:	ldr	r0, [pc, #368]	; 228cc <test_typed_struct_buffer@@Base+0x3ec>
   22758:	add	r0, pc, r0
   2275c:	bl	12d9c <printf@plt>
   22760:	mvn	lr, #0
   22764:	str	lr, [fp, #-4]
   22768:	str	r0, [sp, #12]
   2276c:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22770:	add	r0, sp, #68	; 0x44
   22774:	ldr	r1, [sp, #64]	; 0x40
   22778:	bl	22aa8 <test_typed_struct_buffer@@Base+0x5c8>
   2277c:	movw	r1, #0
   22780:	cmp	r1, r0
   22784:	beq	227a4 <test_typed_struct_buffer@@Base+0x2c4>
   22788:	ldr	r0, [pc, #324]	; 228d4 <test_typed_struct_buffer@@Base+0x3f4>
   2278c:	add	r0, pc, r0
   22790:	bl	12d9c <printf@plt>
   22794:	mvn	lr, #0
   22798:	str	lr, [fp, #-4]
   2279c:	str	r0, [sp, #8]
   227a0:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   227a4:	ldr	r0, [sp, #56]	; 0x38
   227a8:	str	r0, [sp, #60]	; 0x3c
   227ac:	ldr	r0, [sp, #60]	; 0x3c
   227b0:	bl	224c8 <test_struct_buffer@@Base+0x458>
   227b4:	ldr	lr, [sp, #60]	; 0x3c
   227b8:	vldr	s0, [lr]
   227bc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   227c0:	vcmp.f32	s0, s2
   227c4:	vmrs	APSR_nzcv, fpscr
   227c8:	str	r0, [sp, #4]
   227cc:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   227d0:	ldr	r0, [sp, #60]	; 0x3c
   227d4:	vldr	s0, [r0, #4]
   227d8:	vmov.f32	s2, #0	; 0x40000000  2.0
   227dc:	vcmp.f32	s0, s2
   227e0:	vmrs	APSR_nzcv, fpscr
   227e4:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   227e8:	ldr	r0, [sp, #60]	; 0x3c
   227ec:	vldr	s0, [r0, #8]
   227f0:	vmov.f32	s2, #8	; 0x40400000  3.0
   227f4:	vcmp.f32	s0, s2
   227f8:	vmrs	APSR_nzcv, fpscr
   227fc:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   22800:	vldr	d16, [pc, #120]	; 22880 <test_typed_struct_buffer@@Base+0x3a0>
   22804:	ldr	r0, [sp, #60]	; 0x3c
   22808:	vldr	d17, [r0, #16]
   2280c:	vcmp.f64	d17, d16
   22810:	vmrs	APSR_nzcv, fpscr
   22814:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   22818:	ldr	r0, [sp, #60]	; 0x3c
   2281c:	ldrsb	r0, [r0, #24]
   22820:	cmp	r0, #8
   22824:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   22828:	ldr	r0, [sp, #60]	; 0x3c
   2282c:	ldrsh	r0, [r0, #26]
   22830:	movw	r1, #2730	; 0xaaa
   22834:	cmp	r0, r1
   22838:	bne	2284c <test_typed_struct_buffer@@Base+0x36c>
   2283c:	ldr	r0, [sp, #60]	; 0x3c
   22840:	ldrsb	r0, [r0, #28]
   22844:	cmn	r0, #17
   22848:	beq	22868 <test_typed_struct_buffer@@Base+0x388>
   2284c:	ldr	r0, [pc, #124]	; 228d0 <test_typed_struct_buffer@@Base+0x3f0>
   22850:	add	r0, pc, r0
   22854:	bl	12d9c <printf@plt>
   22858:	mvn	lr, #0
   2285c:	str	lr, [fp, #-4]
   22860:	str	r0, [sp]
   22864:	b	22870 <test_typed_struct_buffer@@Base+0x390>
   22868:	movw	r0, #0
   2286c:	str	r0, [fp, #-4]
   22870:	ldr	r0, [fp, #-4]
   22874:	mov	sp, fp
   22878:	pop	{fp, pc}
   2287c:	nop	{0}
   22880:	stclgt	12, cr12, [ip], {205}	; 0xcd
   22884:	andsmi	ip, r0, ip, asr #25
   22888:	andeq	r1, r1, r7, ror #25
   2288c:	andeq	r0, r1, r3, ror #1
   22890:	andeq	r1, r1, pc, ror #27
   22894:	strdeq	r1, [r1], -sp
   22898:	andeq	r1, r1, r6, ror #25
   2289c:	andeq	r0, r1, pc, lsl #1
   228a0:	muleq	r1, fp, sp
   228a4:	strdeq	r1, [r1], -r5
   228a8:	andeq	r1, r1, sp, ror #26
   228ac:	andeq	r1, r1, r4, lsl #27
   228b0:	andeq	r6, r2, r8, asr #20
   228b4:	andeq	r1, r1, ip, lsr #25
   228b8:	andeq	r1, r1, r2, lsl #25
   228bc:	andeq	r1, r1, r5, lsl #26
   228c0:	andeq	r1, r1, r6, ror #24
   228c4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   228c8:			; <UNDEFINED> instruction: 0x00011cbe
   228cc:	muleq	r1, sl, ip
   228d0:	andeq	r1, r1, lr, ror #21
   228d4:	andeq	r1, r1, r4, lsl #25
   228d8:	andeq	r1, r1, pc, lsr #25
   228dc:	andeq	r1, r1, pc, ror #24
   228e0:	push	{fp, lr}
   228e4:	mov	fp, sp
   228e8:	sub	sp, sp, #48	; 0x30
   228ec:	str	r0, [fp, #-4]
   228f0:	vstr	s0, [fp, #-8]
   228f4:	vstr	s1, [fp, #-12]
   228f8:	vstr	s2, [fp, #-16]
   228fc:	vstr	d2, [sp, #24]
   22900:	strb	r1, [sp, #23]
   22904:	strh	r2, [sp, #20]
   22908:	strb	r3, [sp, #19]
   2290c:	ldr	r0, [fp, #-4]
   22910:	ldr	r1, [fp, #-4]
   22914:	vldr	s0, [fp, #-8]
   22918:	vldr	s1, [fp, #-12]
   2291c:	vldr	s2, [fp, #-16]
   22920:	vldr	d2, [sp, #24]
   22924:	ldrb	r2, [sp, #23]
   22928:	ldrh	r3, [sp, #20]
   2292c:	str	r0, [sp, #12]
   22930:	mov	r0, r1
   22934:	sxtb	r1, r2
   22938:	sxth	r2, r3
   2293c:	ldrsb	r3, [sp, #19]
   22940:	bl	283e4 <main@@Base+0x5030>
   22944:	ldr	r1, [pc, #56]	; 22984 <test_typed_struct_buffer@@Base+0x4a4>
   22948:	add	r1, pc, r1
   2294c:	ldr	r2, [sp, #12]
   22950:	str	r0, [sp, #8]
   22954:	mov	r0, r2
   22958:	movw	r3, #0
   2295c:	uxth	r2, r3
   22960:	ldr	r3, [sp, #8]
   22964:	movw	lr, #16
   22968:	uxth	lr, lr
   2296c:	str	lr, [sp]
   22970:	movw	lr, #0
   22974:	str	lr, [sp, #4]
   22978:	bl	29514 <flatcc_builder_create_buffer@@Base>
   2297c:	mov	sp, fp
   22980:	pop	{fp, pc}
   22984:	andeq	r1, r1, r9, asr sl
   22988:	push	{fp, lr}
   2298c:	mov	fp, sp
   22990:	sub	sp, sp, #16
   22994:	str	r0, [fp, #-4]
   22998:	str	r1, [sp, #8]
   2299c:	ldr	r0, [fp, #-4]
   229a0:	movw	r1, #0
   229a4:	cmp	r0, r1
   229a8:	beq	229c0 <test_typed_struct_buffer@@Base+0x4e0>
   229ac:	ldr	r0, [fp, #-4]
   229b0:	ldr	r1, [sp, #8]
   229b4:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   229b8:	cmp	r0, #0
   229bc:	bne	229cc <test_typed_struct_buffer@@Base+0x4ec>
   229c0:	movw	r0, #0
   229c4:	str	r0, [sp, #4]
   229c8:	b	229ec <test_typed_struct_buffer@@Base+0x50c>
   229cc:	ldr	r0, [fp, #-4]
   229d0:	ldr	r1, [fp, #-4]
   229d4:	str	r0, [sp]
   229d8:	mov	r0, r1
   229dc:	bl	2386c <main@@Base+0x4b8>
   229e0:	ldr	r1, [sp]
   229e4:	add	r0, r1, r0
   229e8:	str	r0, [sp, #4]
   229ec:	ldr	r0, [sp, #4]
   229f0:	mov	sp, fp
   229f4:	pop	{fp, pc}
   229f8:	push	{fp, lr}
   229fc:	mov	fp, sp
   22a00:	sub	sp, sp, #16
   22a04:	str	r0, [fp, #-4]
   22a08:	str	r1, [sp, #8]
   22a0c:	str	r2, [sp, #4]
   22a10:	ldr	r0, [fp, #-4]
   22a14:	ldr	r1, [sp, #8]
   22a18:	ldr	r2, [sp, #4]
   22a1c:	movw	r3, #32
   22a20:	movw	ip, #16
   22a24:	uxth	ip, ip
   22a28:	str	ip, [sp]
   22a2c:	bl	30b78 <flatcc_verify_struct_as_typed_root@@Base>
   22a30:	mov	sp, fp
   22a34:	pop	{fp, pc}
   22a38:	push	{fp, lr}
   22a3c:	mov	fp, sp
   22a40:	sub	sp, sp, #16
   22a44:	str	r0, [fp, #-4]
   22a48:	ldr	r0, [fp, #-4]
   22a4c:	movw	r1, #0
   22a50:	cmp	r0, r1
   22a54:	beq	22a6c <test_typed_struct_buffer@@Base+0x58c>
   22a58:	ldr	r1, [pc, #68]	; 22aa4 <test_typed_struct_buffer@@Base+0x5c4>
   22a5c:	ldr	r0, [fp, #-4]
   22a60:	bl	14ee4 <test_typed_empty_monster@@Base+0x450>
   22a64:	cmp	r0, #0
   22a68:	bne	22a78 <test_typed_struct_buffer@@Base+0x598>
   22a6c:	movw	r0, #0
   22a70:	str	r0, [sp, #8]
   22a74:	b	22a98 <test_typed_struct_buffer@@Base+0x5b8>
   22a78:	ldr	r0, [fp, #-4]
   22a7c:	ldr	r1, [fp, #-4]
   22a80:	str	r0, [sp, #4]
   22a84:	mov	r0, r1
   22a88:	bl	2386c <main@@Base+0x4b8>
   22a8c:	ldr	r1, [sp, #4]
   22a90:	add	r0, r1, r0
   22a94:	str	r0, [sp, #8]
   22a98:	ldr	r0, [sp, #8]
   22a9c:	mov	sp, fp
   22aa0:	pop	{fp, pc}
   22aa4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   22aa8:	push	{fp, lr}
   22aac:	mov	fp, sp
   22ab0:	sub	sp, sp, #16
   22ab4:	ldr	r2, [pc, #40]	; 22ae4 <test_typed_struct_buffer@@Base+0x604>
   22ab8:	str	r0, [fp, #-4]
   22abc:	str	r1, [sp, #8]
   22ac0:	ldr	r0, [fp, #-4]
   22ac4:	ldr	r1, [sp, #8]
   22ac8:	movw	r3, #32
   22acc:	movw	ip, #16
   22ad0:	uxth	ip, ip
   22ad4:	str	ip, [sp]
   22ad8:	bl	30b78 <flatcc_verify_struct_as_typed_root@@Base>
   22adc:	mov	sp, fp
   22ae0:	pop	{fp, pc}
   22ae4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^

00022ae8 <gen_monster_benchmark@@Base>:
   22ae8:	push	{fp, lr}
   22aec:	mov	fp, sp
   22af0:	sub	sp, sp, #72	; 0x48
   22af4:	ldr	r1, [pc, #492]	; 22ce8 <gen_monster_benchmark@@Base+0x200>
   22af8:	add	r1, pc, r1
   22afc:	str	r0, [fp, #-4]
   22b00:	ldrb	r0, [r1]
   22b04:	strb	r0, [fp, #-14]
   22b08:	ldrb	r0, [r1, #1]
   22b0c:	strb	r0, [fp, #-13]
   22b10:	ldrb	r0, [r1, #2]
   22b14:	strb	r0, [fp, #-12]
   22b18:	ldrb	r0, [r1, #3]
   22b1c:	strb	r0, [fp, #-11]
   22b20:	ldrb	r0, [r1, #4]
   22b24:	strb	r0, [fp, #-10]
   22b28:	ldrb	r0, [r1, #5]
   22b2c:	strb	r0, [fp, #-9]
   22b30:	ldrb	r0, [r1, #6]
   22b34:	strb	r0, [fp, #-8]
   22b38:	ldrb	r0, [r1, #7]
   22b3c:	strb	r0, [fp, #-7]
   22b40:	ldrb	r0, [r1, #8]
   22b44:	strb	r0, [fp, #-6]
   22b48:	ldrb	r0, [r1, #9]
   22b4c:	strb	r0, [fp, #-5]
   22b50:	ldr	r0, [fp, #-4]
   22b54:	bl	28b78 <flatcc_builder_reset@@Base>
   22b58:	ldr	r1, [fp, #-4]
   22b5c:	str	r0, [fp, #-32]	; 0xffffffe0
   22b60:	mov	r0, r1
   22b64:	bl	18e74 <gen_monster@@Base+0x890>
   22b68:	ldr	r1, [fp, #-4]
   22b6c:	str	r0, [sp, #36]	; 0x24
   22b70:	mov	r0, r1
   22b74:	movw	r1, #80	; 0x50
   22b78:	sxth	r1, r1
   22b7c:	bl	18ec4 <gen_monster@@Base+0x8e0>
   22b80:	ldr	r1, [fp, #-4]
   22b84:	str	r0, [sp, #32]
   22b88:	mov	r0, r1
   22b8c:	bl	18f4c <gen_monster@@Base+0x968>
   22b90:	vldr	s0, [pc, #332]	; 22ce4 <gen_monster_benchmark@@Base+0x1fc>
   22b94:	str	r0, [fp, #-20]	; 0xffffffec
   22b98:	ldr	r0, [fp, #-20]	; 0xffffffec
   22b9c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   22ba0:	vstr	s2, [r0]
   22ba4:	ldr	r0, [fp, #-20]	; 0xffffffec
   22ba8:	vmov.f32	s2, #0	; 0x40000000  2.0
   22bac:	vstr	s2, [r0, #4]
   22bb0:	ldr	r0, [fp, #-20]	; 0xffffffec
   22bb4:	vstr	s0, [r0, #8]
   22bb8:	ldr	r0, [fp, #-4]
   22bbc:	bl	18f7c <gen_monster@@Base+0x998>
   22bc0:	ldr	r1, [pc, #280]	; 22ce0 <gen_monster_benchmark@@Base+0x1f8>
   22bc4:	add	r1, pc, r1
   22bc8:	ldr	lr, [fp, #-4]
   22bcc:	str	r0, [sp, #28]
   22bd0:	mov	r0, lr
   22bd4:	bl	14934 <test_empty_monster@@Base+0x1f0>
   22bd8:	sub	r1, fp, #14
   22bdc:	ldr	lr, [fp, #-4]
   22be0:	str	r0, [sp, #24]
   22be4:	mov	r0, lr
   22be8:	movw	r2, #10
   22bec:	bl	19014 <gen_monster@@Base+0xa30>
   22bf0:	ldr	r1, [fp, #-4]
   22bf4:	str	r0, [sp, #20]
   22bf8:	mov	r0, r1
   22bfc:	bl	1906c <gen_monster@@Base+0xa88>
   22c00:	ldr	r1, [fp, #-4]
   22c04:	str	r0, [sp, #16]
   22c08:	mov	r0, r1
   22c0c:	movw	r1, #1
   22c10:	bl	1908c <gen_monster@@Base+0xaa8>
   22c14:	str	r0, [fp, #-24]	; 0xffffffe8
   22c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c1c:	movw	r1, #16
   22c20:	strh	r1, [r0]
   22c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c28:	movw	r1, #32
   22c2c:	strb	r1, [r0, #2]
   22c30:	ldr	r0, [fp, #-4]
   22c34:	movw	r1, #2
   22c38:	bl	1908c <gen_monster@@Base+0xaa8>
   22c3c:	str	r0, [fp, #-24]	; 0xffffffe8
   22c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c44:	movw	r1, #48	; 0x30
   22c48:	strh	r1, [r0]
   22c4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c50:	movw	r1, #64	; 0x40
   22c54:	strb	r1, [r0, #2]
   22c58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c5c:	movw	r1, #80	; 0x50
   22c60:	strh	r1, [r0, #4]
   22c64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c68:	movw	r1, #96	; 0x60
   22c6c:	strb	r1, [r0, #6]
   22c70:	ldr	r0, [fp, #-4]
   22c74:	movw	r1, #112	; 0x70
   22c78:	sxth	r1, r1
   22c7c:	movw	r2, #128	; 0x80
   22c80:	sxtb	r2, r2
   22c84:	bl	190b4 <gen_monster@@Base+0xad0>
   22c88:	movw	r1, #401	; 0x191
   22c8c:	strh	r1, [fp, #-28]	; 0xffffffe4
   22c90:	movw	r1, #145	; 0x91
   22c94:	strb	r1, [fp, #-26]	; 0xffffffe6
   22c98:	ldr	r1, [fp, #-4]
   22c9c:	str	r0, [sp, #12]
   22ca0:	mov	r0, r1
   22ca4:	sub	r1, fp, #28
   22ca8:	bl	1911c <gen_monster@@Base+0xb38>
   22cac:	ldr	r1, [fp, #-4]
   22cb0:	str	r0, [sp, #8]
   22cb4:	mov	r0, r1
   22cb8:	bl	19284 <gen_monster@@Base+0xca0>
   22cbc:	ldr	r1, [fp, #-4]
   22cc0:	str	r0, [sp, #4]
   22cc4:	mov	r0, r1
   22cc8:	bl	19a24 <gen_monster@@Base+0x1440>
   22ccc:	movw	r1, #0
   22cd0:	str	r0, [sp]
   22cd4:	mov	r0, r1
   22cd8:	mov	sp, fp
   22cdc:	pop	{fp, pc}
   22ce0:	andeq	pc, r0, r7, ror #3
   22ce4:	subgt	ip, ip, sp, asr #25
   22ce8:	andeq	r3, r1, r3, ror fp

00022cec <time_monster@@Base>:
   22cec:	push	{fp, lr}
   22cf0:	mov	fp, sp
   22cf4:	sub	sp, sp, #48	; 0x30
   22cf8:	ldr	r1, [pc, #160]	; 22da0 <time_monster@@Base+0xb4>
   22cfc:	add	r1, pc, r1
   22d00:	ldr	r2, [pc, #156]	; 22da4 <time_monster@@Base+0xb8>
   22d04:	str	r0, [fp, #-4]
   22d08:	str	r2, [sp, #20]
   22d0c:	mov	r0, r1
   22d10:	bl	12d9c <printf@plt>
   22d14:	str	r0, [sp, #8]
   22d18:	bl	22db0 <time_monster@@Base+0xc4>
   22d1c:	vstr	d0, [fp, #-16]
   22d20:	movw	r0, #0
   22d24:	str	r0, [sp, #12]
   22d28:	ldr	r0, [pc, #116]	; 22da4 <time_monster@@Base+0xb8>
   22d2c:	ldr	r1, [sp, #12]
   22d30:	cmp	r1, r0
   22d34:	bge	22d54 <time_monster@@Base+0x68>
   22d38:	ldr	r0, [fp, #-4]
   22d3c:	bl	22ae8 <gen_monster_benchmark@@Base>
   22d40:	str	r0, [sp, #4]
   22d44:	ldr	r0, [sp, #12]
   22d48:	add	r0, r0, #1
   22d4c:	str	r0, [sp, #12]
   22d50:	b	22d28 <time_monster@@Base+0x3c>
   22d54:	ldr	r0, [fp, #-4]
   22d58:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   22d5c:	str	r0, [sp, #16]
   22d60:	bl	22db0 <time_monster@@Base+0xc4>
   22d64:	ldr	r0, [pc, #60]	; 22da8 <time_monster@@Base+0xbc>
   22d68:	add	r0, pc, r0
   22d6c:	ldr	r2, [pc, #48]	; 22da4 <time_monster@@Base+0xb8>
   22d70:	ldr	lr, [pc, #52]	; 22dac <time_monster@@Base+0xc0>
   22d74:	add	r3, pc, lr
   22d78:	vstr	d0, [sp, #24]
   22d7c:	vldr	d0, [fp, #-16]
   22d80:	vldr	d1, [sp, #24]
   22d84:	ldr	r1, [sp, #16]
   22d88:	bl	22e58 <time_monster@@Base+0x16c>
   22d8c:	movw	r1, #0
   22d90:	str	r0, [sp]
   22d94:	mov	r0, r1
   22d98:	mov	sp, fp
   22d9c:	pop	{fp, pc}
   22da0:	andeq	r1, r1, fp, lsr r7
   22da4:	andeq	r4, pc, r0, asr #4
   22da8:	andeq	r1, r1, r1, ror #13
   22dac:	andeq	r1, r1, fp, ror #13
   22db0:	push	{fp, lr}
   22db4:	mov	fp, sp
   22db8:	sub	sp, sp, #16
   22dbc:	add	r0, sp, #8
   22dc0:	movw	r1, #0
   22dc4:	bl	12dd8 <gettimeofday@plt>
   22dc8:	ldr	r1, [pc, #120]	; 22e48 <time_monster@@Base+0x15c>
   22dcc:	add	r1, pc, r1
   22dd0:	ldr	r1, [r1]
   22dd4:	cmp	r1, #0
   22dd8:	str	r0, [sp, #4]
   22ddc:	bne	22df8 <time_monster@@Base+0x10c>
   22de0:	ldr	r0, [pc, #100]	; 22e4c <time_monster@@Base+0x160>
   22de4:	add	r0, pc, r0
   22de8:	ldr	r1, [sp, #8]
   22dec:	str	r1, [r0]
   22df0:	ldr	r1, [sp, #12]
   22df4:	str	r1, [r0, #4]
   22df8:	vldr	d16, [pc, #64]	; 22e40 <time_monster@@Base+0x154>
   22dfc:	ldr	r0, [pc, #76]	; 22e50 <time_monster@@Base+0x164>
   22e00:	add	r0, pc, r0
   22e04:	ldr	r1, [sp, #8]
   22e08:	ldr	r2, [r0]
   22e0c:	sub	r1, r1, r2
   22e10:	vmov	s0, r1
   22e14:	vcvt.f64.s32	d17, s0
   22e18:	ldr	r1, [sp, #12]
   22e1c:	ldr	r0, [r0, #4]
   22e20:	sub	r0, r1, r0
   22e24:	vmov	s0, r0
   22e28:	vcvt.f64.s32	d18, s0
   22e2c:	vdiv.f64	d16, d18, d16
   22e30:	vadd.f64	d0, d17, d16
   22e34:	mov	sp, fp
   22e38:	pop	{fp, pc}
   22e3c:	nop	{0}
   22e40:	andeq	r0, r0, r0
   22e44:	smlawbmi	lr, r0, r4, r8
   22e48:	andeq	r6, r2, ip, lsr #5
   22e4c:	muleq	r2, r4, r2
   22e50:	andeq	r6, r2, r8, ror r2
   22e54:	nop	{0}
   22e58:	push	{fp, lr}
   22e5c:	mov	fp, sp
   22e60:	sub	sp, sp, #104	; 0x68
   22e64:	ldr	ip, [pc, #608]	; 230cc <time_monster@@Base+0x3e0>
   22e68:	add	ip, pc, ip
   22e6c:	str	r0, [fp, #-4]
   22e70:	vstr	d0, [fp, #-16]
   22e74:	vstr	d1, [fp, #-24]	; 0xffffffe8
   22e78:	str	r1, [fp, #-28]	; 0xffffffe4
   22e7c:	str	r2, [fp, #-32]	; 0xffffffe0
   22e80:	str	r3, [fp, #-36]	; 0xffffffdc
   22e84:	vldr	d0, [fp, #-24]	; 0xffffffe8
   22e88:	vldr	d1, [fp, #-16]
   22e8c:	vsub.f64	d0, d0, d1
   22e90:	vstr	d0, [fp, #-48]	; 0xffffffd0
   22e94:	ldr	r1, [fp, #-4]
   22e98:	mov	r0, ip
   22e9c:	bl	12d9c <printf@plt>
   22ea0:	ldr	r1, [pc, #544]	; 230c8 <time_monster@@Base+0x3dc>
   22ea4:	add	r1, pc, r1
   22ea8:	vldr	d0, [fp, #-48]	; 0xffffffd0
   22eac:	str	r0, [sp, #44]	; 0x2c
   22eb0:	mov	r0, r1
   22eb4:	vmov	r2, r3, d0
   22eb8:	bl	12d9c <printf@plt>
   22ebc:	ldr	r1, [pc, #512]	; 230c4 <time_monster@@Base+0x3d8>
   22ec0:	add	r1, pc, r1
   22ec4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22ec8:	str	r0, [sp, #40]	; 0x28
   22ecc:	mov	r0, r1
   22ed0:	mov	r1, r2
   22ed4:	bl	12d9c <printf@plt>
   22ed8:	ldr	r1, [pc, #480]	; 230c0 <time_monster@@Base+0x3d4>
   22edc:	add	r1, pc, r1
   22ee0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   22ee4:	str	r0, [sp, #36]	; 0x24
   22ee8:	mov	r0, r1
   22eec:	mov	r1, r2
   22ef0:	bl	12d9c <printf@plt>
   22ef4:	ldr	r1, [pc, #448]	; 230bc <time_monster@@Base+0x3d0>
   22ef8:	add	r1, pc, r1
   22efc:	vldr	d0, [pc, #412]	; 230a0 <time_monster@@Base+0x3b4>
   22f00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22f04:	vmov	s4, r2
   22f08:	vcvt.f64.s32	d1, s4
   22f0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   22f10:	vmov	s4, r2
   22f14:	vcvt.f64.u32	d16, s4
   22f18:	vmul.f64	d16, d1, d16
   22f1c:	vdiv.f64	d16, d16, d0
   22f20:	vldr	d0, [fp, #-48]	; 0xffffffd0
   22f24:	vdiv.f64	d16, d16, d0
   22f28:	str	r0, [sp, #32]
   22f2c:	mov	r0, r1
   22f30:	vmov	r2, r3, d16
   22f34:	bl	12d9c <printf@plt>
   22f38:	ldr	r1, [pc, #376]	; 230b8 <time_monster@@Base+0x3cc>
   22f3c:	add	r1, pc, r1
   22f40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   22f44:	vmov	s4, r2
   22f48:	vcvt.f64.s32	d16, s4
   22f4c:	vldr	d0, [fp, #-48]	; 0xffffffd0
   22f50:	vdiv.f64	d16, d16, d0
   22f54:	str	r0, [sp, #28]
   22f58:	mov	r0, r1
   22f5c:	vmov	r2, r3, d16
   22f60:	bl	12d9c <printf@plt>
   22f64:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22f68:	movw	r2, #0
   22f6c:	cmp	r1, r2
   22f70:	str	r0, [sp, #24]
   22f74:	beq	22fa8 <time_monster@@Base+0x2bc>
   22f78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22f7c:	cmp	r0, #1
   22f80:	beq	22fa8 <time_monster@@Base+0x2bc>
   22f84:	ldr	r0, [pc, #324]	; 230d0 <time_monster@@Base+0x3e4>
   22f88:	add	r0, pc, r0
   22f8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22f90:	vldr	d16, [fp, #-48]	; 0xffffffd0
   22f94:	vmov.f64	d17, #112	; 0x3f800000  1.0
   22f98:	vdiv.f64	d16, d17, d16
   22f9c:	vmov	r2, r3, d16
   22fa0:	bl	12d9c <printf@plt>
   22fa4:	str	r0, [sp, #20]
   22fa8:	vldr	d16, [pc, #248]	; 230a8 <time_monster@@Base+0x3bc>
   22fac:	vldr	d17, [pc, #252]	; 230b0 <time_monster@@Base+0x3c4>
   22fb0:	vldr	d18, [fp, #-48]	; 0xffffffd0
   22fb4:	vmul.f64	d17, d18, d17
   22fb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22fbc:	vmov	s0, r0
   22fc0:	vcvt.f64.s32	d18, s0
   22fc4:	vdiv.f64	d17, d17, d18
   22fc8:	vstr	d17, [sp, #48]	; 0x30
   22fcc:	vldr	d17, [sp, #48]	; 0x30
   22fd0:	vcmpe.f64	d17, d16
   22fd4:	vmrs	APSR_nzcv, fpscr
   22fd8:	bpl	22ff8 <time_monster@@Base+0x30c>
   22fdc:	ldr	r0, [pc, #252]	; 230e0 <time_monster@@Base+0x3f4>
   22fe0:	add	r0, pc, r0
   22fe4:	vldr	d16, [sp, #48]	; 0x30
   22fe8:	vmov	r2, r3, d16
   22fec:	bl	12d9c <printf@plt>
   22ff0:	str	r0, [sp, #16]
   22ff4:	b	23090 <time_monster@@Base+0x3a4>
   22ff8:	vldr	d16, [pc, #160]	; 230a0 <time_monster@@Base+0x3b4>
   22ffc:	vldr	d17, [sp, #48]	; 0x30
   23000:	vcmpe.f64	d17, d16
   23004:	vmrs	APSR_nzcv, fpscr
   23008:	bpl	23030 <time_monster@@Base+0x344>
   2300c:	ldr	r0, [pc, #200]	; 230dc <time_monster@@Base+0x3f0>
   23010:	add	r0, pc, r0
   23014:	vldr	d16, [pc, #140]	; 230a8 <time_monster@@Base+0x3bc>
   23018:	vldr	d17, [sp, #48]	; 0x30
   2301c:	vdiv.f64	d16, d17, d16
   23020:	vmov	r2, r3, d16
   23024:	bl	12d9c <printf@plt>
   23028:	str	r0, [sp, #12]
   2302c:	b	2308c <time_monster@@Base+0x3a0>
   23030:	vldr	d16, [pc, #120]	; 230b0 <time_monster@@Base+0x3c4>
   23034:	vldr	d17, [sp, #48]	; 0x30
   23038:	vcmpe.f64	d17, d16
   2303c:	vmrs	APSR_nzcv, fpscr
   23040:	bpl	23068 <time_monster@@Base+0x37c>
   23044:	ldr	r0, [pc, #140]	; 230d8 <time_monster@@Base+0x3ec>
   23048:	add	r0, pc, r0
   2304c:	vldr	d16, [pc, #76]	; 230a0 <time_monster@@Base+0x3b4>
   23050:	vldr	d17, [sp, #48]	; 0x30
   23054:	vdiv.f64	d16, d17, d16
   23058:	vmov	r2, r3, d16
   2305c:	bl	12d9c <printf@plt>
   23060:	str	r0, [sp, #8]
   23064:	b	23088 <time_monster@@Base+0x39c>
   23068:	ldr	r0, [pc, #100]	; 230d4 <time_monster@@Base+0x3e8>
   2306c:	add	r0, pc, r0
   23070:	vldr	d16, [pc, #56]	; 230b0 <time_monster@@Base+0x3c4>
   23074:	vldr	d17, [sp, #48]	; 0x30
   23078:	vdiv.f64	d16, d17, d16
   2307c:	vmov	r2, r3, d16
   23080:	bl	12d9c <printf@plt>
   23084:	str	r0, [sp, #4]
   23088:	b	2308c <time_monster@@Base+0x3a0>
   2308c:	b	23090 <time_monster@@Base+0x3a4>
   23090:	movw	r0, #0
   23094:	mov	sp, fp
   23098:	pop	{fp, pc}
   2309c:	nop	{0}
   230a0:	andeq	r0, r0, r0
   230a4:	smlawbmi	lr, r0, r4, r8
   230a8:	andeq	r0, r0, r0
   230ac:	addmi	r4, pc, r0
   230b0:	andeq	r0, r0, r0
   230b4:	bicmi	ip, sp, r5, ror #26
   230b8:	andeq	r3, r1, r9, ror #11
   230bc:	andeq	r3, r1, r5, lsl r6
   230c0:	andeq	r3, r1, lr, lsl r6
   230c4:	andeq	r3, r1, sl, lsr #12
   230c8:	andeq	r3, r1, lr, lsr #12
   230cc:	andeq	r3, r1, fp, asr r6
   230d0:			; <UNDEFINED> instruction: 0x000135be
   230d4:	andeq	r3, r1, r6, asr #10
   230d8:	andeq	r3, r1, r2, asr r5
   230dc:	andeq	r3, r1, r2, ror r5
   230e0:	andeq	r3, r1, sl, lsl #11
   230e4:	nop	{0}

000230e8 <gen_struct_buffer_benchmark@@Base>:
   230e8:	push	{fp, lr}
   230ec:	mov	fp, sp
   230f0:	sub	sp, sp, #32
   230f4:	str	r0, [fp, #-8]
   230f8:	ldr	r0, [fp, #-8]
   230fc:	bl	28b78 <flatcc_builder_reset@@Base>
   23100:	vldr	d2, [pc, #320]	; 23248 <gen_struct_buffer_benchmark@@Base+0x160>
   23104:	ldr	lr, [fp, #-8]
   23108:	str	r0, [sp, #8]
   2310c:	mov	r0, lr
   23110:	vmov.f32	s0, #112	; 0x3f800000  1.0
   23114:	vmov.f32	s1, #0	; 0x40000000  2.0
   23118:	vmov.f32	s2, #8	; 0x40400000  3.0
   2311c:	movw	lr, #8
   23120:	sxtb	r1, lr
   23124:	movw	lr, #2730	; 0xaaa
   23128:	sxth	r2, lr
   2312c:	movw	lr, #239	; 0xef
   23130:	sxtb	r3, lr
   23134:	bl	2238c <test_struct_buffer@@Base+0x31c>
   23138:	ldr	r1, [fp, #-8]
   2313c:	str	r0, [sp, #4]
   23140:	mov	r0, r1
   23144:	movw	r1, #0
   23148:	bl	2dd74 <flatcc_builder_get_direct_buffer@@Base>
   2314c:	str	r0, [fp, #-12]
   23150:	ldr	r0, [fp, #-12]
   23154:	movw	r1, #0
   23158:	cmp	r0, r1
   2315c:	bne	2316c <gen_struct_buffer_benchmark@@Base+0x84>
   23160:	mvn	r0, #0
   23164:	str	r0, [fp, #-4]
   23168:	b	23238 <gen_struct_buffer_benchmark@@Base+0x150>
   2316c:	ldr	r0, [fp, #-12]
   23170:	movw	r1, #0
   23174:	bl	23250 <gen_struct_buffer_benchmark@@Base+0x168>
   23178:	str	r0, [sp, #12]
   2317c:	ldr	r0, [sp, #12]
   23180:	str	r0, [sp, #16]
   23184:	ldr	r0, [sp, #16]
   23188:	bl	224c8 <test_struct_buffer@@Base+0x458>
   2318c:	ldr	r1, [sp, #16]
   23190:	vldr	s0, [r1]
   23194:	vmov.f32	s2, #112	; 0x3f800000  1.0
   23198:	vcmp.f32	s0, s2
   2319c:	vmrs	APSR_nzcv, fpscr
   231a0:	str	r0, [sp]
   231a4:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   231a8:	ldr	r0, [sp, #16]
   231ac:	vldr	s0, [r0, #4]
   231b0:	vmov.f32	s2, #0	; 0x40000000  2.0
   231b4:	vcmp.f32	s0, s2
   231b8:	vmrs	APSR_nzcv, fpscr
   231bc:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   231c0:	ldr	r0, [sp, #16]
   231c4:	vldr	s0, [r0, #8]
   231c8:	vmov.f32	s2, #8	; 0x40400000  3.0
   231cc:	vcmp.f32	s0, s2
   231d0:	vmrs	APSR_nzcv, fpscr
   231d4:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   231d8:	vldr	d16, [pc, #104]	; 23248 <gen_struct_buffer_benchmark@@Base+0x160>
   231dc:	ldr	r0, [sp, #16]
   231e0:	vldr	d17, [r0, #16]
   231e4:	vcmp.f64	d17, d16
   231e8:	vmrs	APSR_nzcv, fpscr
   231ec:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   231f0:	ldr	r0, [sp, #16]
   231f4:	ldrsb	r0, [r0, #24]
   231f8:	cmp	r0, #8
   231fc:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   23200:	ldr	r0, [sp, #16]
   23204:	ldrsh	r0, [r0, #26]
   23208:	movw	r1, #2730	; 0xaaa
   2320c:	cmp	r0, r1
   23210:	bne	23224 <gen_struct_buffer_benchmark@@Base+0x13c>
   23214:	ldr	r0, [sp, #16]
   23218:	ldrsb	r0, [r0, #28]
   2321c:	cmn	r0, #17
   23220:	beq	23230 <gen_struct_buffer_benchmark@@Base+0x148>
   23224:	mvn	r0, #0
   23228:	str	r0, [fp, #-4]
   2322c:	b	23238 <gen_struct_buffer_benchmark@@Base+0x150>
   23230:	movw	r0, #0
   23234:	str	r0, [fp, #-4]
   23238:	ldr	r0, [fp, #-4]
   2323c:	mov	sp, fp
   23240:	pop	{fp, pc}
   23244:	nop	{0}
   23248:	stclgt	12, cr12, [ip], {205}	; 0xcd
   2324c:	andsmi	ip, r0, ip, asr #25
   23250:	push	{fp, lr}
   23254:	mov	fp, sp
   23258:	sub	sp, sp, #16
   2325c:	str	r0, [fp, #-4]
   23260:	str	r1, [sp, #8]
   23264:	ldr	r0, [fp, #-4]
   23268:	movw	r1, #0
   2326c:	cmp	r0, r1
   23270:	beq	23288 <gen_struct_buffer_benchmark@@Base+0x1a0>
   23274:	ldr	r0, [fp, #-4]
   23278:	ldr	r1, [sp, #8]
   2327c:	bl	15858 <test_typed_table_with_emptystruct@@Base+0x4e0>
   23280:	cmp	r0, #0
   23284:	bne	23294 <gen_struct_buffer_benchmark@@Base+0x1ac>
   23288:	movw	r0, #0
   2328c:	str	r0, [sp, #4]
   23290:	b	232b4 <gen_struct_buffer_benchmark@@Base+0x1cc>
   23294:	ldr	r0, [fp, #-4]
   23298:	ldr	r1, [fp, #-4]
   2329c:	str	r0, [sp]
   232a0:	mov	r0, r1
   232a4:	bl	2386c <main@@Base+0x4b8>
   232a8:	ldr	r1, [sp]
   232ac:	add	r0, r1, r0
   232b0:	str	r0, [sp, #4]
   232b4:	ldr	r0, [sp, #4]
   232b8:	mov	sp, fp
   232bc:	pop	{fp, pc}

000232c0 <time_struct_buffer@@Base>:
   232c0:	push	{fp, lr}
   232c4:	mov	fp, sp
   232c8:	sub	sp, sp, #56	; 0x38
   232cc:	ldr	r1, [pc, #204]	; 233a0 <time_struct_buffer@@Base+0xe0>
   232d0:	add	r1, pc, r1
   232d4:	ldr	r2, [pc, #200]	; 233a4 <time_struct_buffer@@Base+0xe4>
   232d8:	str	r0, [fp, #-4]
   232dc:	str	r2, [sp, #28]
   232e0:	movw	r0, #0
   232e4:	str	r0, [sp, #16]
   232e8:	mov	r0, r1
   232ec:	bl	12d9c <printf@plt>
   232f0:	str	r0, [sp, #12]
   232f4:	bl	22db0 <time_monster@@Base+0xc4>
   232f8:	vstr	d0, [fp, #-16]
   232fc:	movw	r0, #0
   23300:	str	r0, [sp, #20]
   23304:	ldr	r0, [pc, #152]	; 233a4 <time_struct_buffer@@Base+0xe4>
   23308:	ldr	r1, [sp, #20]
   2330c:	cmp	r1, r0
   23310:	bge	23338 <time_struct_buffer@@Base+0x78>
   23314:	ldr	r0, [fp, #-4]
   23318:	bl	230e8 <gen_struct_buffer_benchmark@@Base>
   2331c:	ldr	lr, [sp, #16]
   23320:	orr	r0, lr, r0
   23324:	str	r0, [sp, #16]
   23328:	ldr	r0, [sp, #20]
   2332c:	add	r0, r0, #1
   23330:	str	r0, [sp, #20]
   23334:	b	23304 <time_struct_buffer@@Base+0x44>
   23338:	bl	22db0 <time_monster@@Base+0xc4>
   2333c:	vstr	d0, [fp, #-24]	; 0xffffffe8
   23340:	ldr	r0, [fp, #-4]
   23344:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   23348:	str	r0, [sp, #24]
   2334c:	ldr	r0, [sp, #16]
   23350:	cmp	r0, #0
   23354:	beq	23368 <time_struct_buffer@@Base+0xa8>
   23358:	ldr	r0, [pc, #72]	; 233a8 <time_struct_buffer@@Base+0xe8>
   2335c:	add	r0, pc, r0
   23360:	bl	12d9c <printf@plt>
   23364:	str	r0, [sp, #8]
   23368:	ldr	r0, [pc, #60]	; 233ac <time_struct_buffer@@Base+0xec>
   2336c:	add	r0, pc, r0
   23370:	ldr	r2, [pc, #44]	; 233a4 <time_struct_buffer@@Base+0xe4>
   23374:	ldr	r1, [pc, #52]	; 233b0 <time_struct_buffer@@Base+0xf0>
   23378:	add	r3, pc, r1
   2337c:	vldr	d0, [fp, #-16]
   23380:	vldr	d1, [fp, #-24]	; 0xffffffe8
   23384:	ldr	r1, [sp, #24]
   23388:	bl	22e58 <time_monster@@Base+0x16c>
   2338c:	ldr	r1, [sp, #16]
   23390:	str	r0, [sp, #4]
   23394:	mov	r0, r1
   23398:	mov	sp, fp
   2339c:	pop	{fp, pc}
   233a0:	andeq	r1, r1, r7, ror #2
   233a4:	andeq	r4, pc, r0, asr #4
   233a8:	andeq	r1, r1, fp, lsl #2
   233ac:	andeq	r1, r1, sp, lsl #2
   233b0:	andeq	r1, r1, r7, ror #1

000233b4 <main@@Base>:
   233b4:	push	{r4, r5, fp, lr}
   233b8:	add	fp, sp, #8
   233bc:	sub	sp, sp, #352	; 0x160
   233c0:	movw	r2, #0
   233c4:	str	r2, [fp, #-12]
   233c8:	str	r0, [fp, #-16]
   233cc:	str	r1, [fp, #-20]	; 0xffffffec
   233d0:	add	r0, sp, #108	; 0x6c
   233d4:	str	r0, [sp, #104]	; 0x68
   233d8:	ldr	r0, [sp, #104]	; 0x68
   233dc:	bl	288f8 <flatcc_builder_init@@Base>
   233e0:	ldr	r1, [pc, #1060]	; 2380c <main@@Base+0x458>
   233e4:	add	r1, pc, r1
   233e8:	str	r0, [sp, #100]	; 0x64
   233ec:	mov	r0, r1
   233f0:	bl	12d9c <printf@plt>
   233f4:	ldr	r1, [sp, #104]	; 0x68
   233f8:	str	r0, [sp, #96]	; 0x60
   233fc:	mov	r0, r1
   23400:	bl	15258 <test_table_with_emptystruct@@Base>
   23404:	cmp	r0, #0
   23408:	beq	23428 <main@@Base+0x74>
   2340c:	ldr	r0, [pc, #1108]	; 23868 <main@@Base+0x4b4>
   23410:	add	r0, pc, r0
   23414:	bl	12d9c <printf@plt>
   23418:	mvn	lr, #0
   2341c:	str	lr, [fp, #-12]
   23420:	str	r0, [sp, #92]	; 0x5c
   23424:	b	23800 <main@@Base+0x44c>
   23428:	ldr	r0, [sp, #104]	; 0x68
   2342c:	bl	13604 <test_enums@@Base>
   23430:	cmp	r0, #0
   23434:	beq	23454 <main@@Base+0xa0>
   23438:	ldr	r0, [pc, #1060]	; 23864 <main@@Base+0x4b0>
   2343c:	add	r0, pc, r0
   23440:	bl	12d9c <printf@plt>
   23444:	mvn	lr, #0
   23448:	str	lr, [fp, #-12]
   2344c:	str	r0, [sp, #88]	; 0x58
   23450:	b	23800 <main@@Base+0x44c>
   23454:	ldr	r0, [sp, #104]	; 0x68
   23458:	bl	14744 <test_empty_monster@@Base>
   2345c:	cmp	r0, #0
   23460:	beq	23480 <main@@Base+0xcc>
   23464:	ldr	r0, [pc, #1012]	; 23860 <main@@Base+0x4ac>
   23468:	add	r0, pc, r0
   2346c:	bl	12d9c <printf@plt>
   23470:	mvn	lr, #0
   23474:	str	lr, [fp, #-12]
   23478:	str	r0, [sp, #84]	; 0x54
   2347c:	b	23800 <main@@Base+0x44c>
   23480:	ldr	r0, [sp, #104]	; 0x68
   23484:	bl	19a64 <test_monster@@Base>
   23488:	cmp	r0, #0
   2348c:	beq	234ac <main@@Base+0xf8>
   23490:	ldr	r0, [pc, #964]	; 2385c <main@@Base+0x4a8>
   23494:	add	r0, pc, r0
   23498:	bl	12d9c <printf@plt>
   2349c:	mvn	lr, #0
   234a0:	str	lr, [fp, #-12]
   234a4:	str	r0, [sp, #80]	; 0x50
   234a8:	b	23800 <main@@Base+0x44c>
   234ac:	ldr	r0, [sp, #104]	; 0x68
   234b0:	bl	19b40 <test_monster_with_size@@Base>
   234b4:	cmp	r0, #0
   234b8:	beq	234d8 <main@@Base+0x124>
   234bc:	ldr	r0, [pc, #916]	; 23858 <main@@Base+0x4a4>
   234c0:	add	r0, pc, r0
   234c4:	bl	12d9c <printf@plt>
   234c8:	mvn	lr, #0
   234cc:	str	lr, [fp, #-12]
   234d0:	str	r0, [sp, #76]	; 0x4c
   234d4:	b	23800 <main@@Base+0x44c>
   234d8:	ldr	r0, [sp, #104]	; 0x68
   234dc:	bl	19d00 <test_string@@Base>
   234e0:	cmp	r0, #0
   234e4:	beq	23504 <main@@Base+0x150>
   234e8:	ldr	r0, [pc, #868]	; 23854 <main@@Base+0x4a0>
   234ec:	add	r0, pc, r0
   234f0:	bl	12d9c <printf@plt>
   234f4:	mvn	lr, #0
   234f8:	str	lr, [fp, #-12]
   234fc:	str	r0, [sp, #72]	; 0x48
   23500:	b	23800 <main@@Base+0x44c>
   23504:	ldr	r0, [sp, #104]	; 0x68
   23508:	bl	22070 <test_struct_buffer@@Base>
   2350c:	cmp	r0, #0
   23510:	beq	23530 <main@@Base+0x17c>
   23514:	ldr	r0, [pc, #820]	; 23850 <main@@Base+0x49c>
   23518:	add	r0, pc, r0
   2351c:	bl	12d9c <printf@plt>
   23520:	mvn	lr, #0
   23524:	str	lr, [fp, #-12]
   23528:	str	r0, [sp, #68]	; 0x44
   2352c:	b	23800 <main@@Base+0x44c>
   23530:	ldr	r0, [sp, #104]	; 0x68
   23534:	bl	14a94 <test_typed_empty_monster@@Base>
   23538:	cmp	r0, #0
   2353c:	beq	2355c <main@@Base+0x1a8>
   23540:	ldr	r0, [pc, #772]	; 2384c <main@@Base+0x498>
   23544:	add	r0, pc, r0
   23548:	bl	12d9c <printf@plt>
   2354c:	mvn	lr, #0
   23550:	str	lr, [fp, #-12]
   23554:	str	r0, [sp, #64]	; 0x40
   23558:	b	23800 <main@@Base+0x44c>
   2355c:	ldr	r0, [sp, #104]	; 0x68
   23560:	bl	15378 <test_typed_table_with_emptystruct@@Base>
   23564:	cmp	r0, #0
   23568:	beq	23588 <main@@Base+0x1d4>
   2356c:	ldr	r0, [pc, #724]	; 23848 <main@@Base+0x494>
   23570:	add	r0, pc, r0
   23574:	bl	12d9c <printf@plt>
   23578:	mvn	lr, #0
   2357c:	str	lr, [fp, #-12]
   23580:	str	r0, [sp, #60]	; 0x3c
   23584:	b	23800 <main@@Base+0x44c>
   23588:	ldr	r0, [sp, #104]	; 0x68
   2358c:	bl	224e0 <test_typed_struct_buffer@@Base>
   23590:	cmp	r0, #0
   23594:	beq	235b4 <main@@Base+0x200>
   23598:	ldr	r0, [pc, #676]	; 23844 <main@@Base+0x490>
   2359c:	add	r0, pc, r0
   235a0:	bl	12d9c <printf@plt>
   235a4:	mvn	lr, #0
   235a8:	str	lr, [fp, #-12]
   235ac:	str	r0, [sp, #56]	; 0x38
   235b0:	b	23800 <main@@Base+0x44c>
   235b4:	ldr	r0, [sp, #104]	; 0x68
   235b8:	bl	1d5fc <test_clone_slice@@Base>
   235bc:	cmp	r0, #0
   235c0:	beq	235e0 <main@@Base+0x22c>
   235c4:	ldr	r0, [pc, #628]	; 23840 <main@@Base+0x48c>
   235c8:	add	r0, pc, r0
   235cc:	bl	12d9c <printf@plt>
   235d0:	mvn	lr, #0
   235d4:	str	lr, [fp, #-12]
   235d8:	str	r0, [sp, #52]	; 0x34
   235dc:	b	23800 <main@@Base+0x44c>
   235e0:	ldr	r0, [sp, #104]	; 0x68
   235e4:	bl	21220 <test_add_set_defaults@@Base>
   235e8:	cmp	r0, #0
   235ec:	beq	2360c <main@@Base+0x258>
   235f0:	ldr	r0, [pc, #580]	; 2383c <main@@Base+0x488>
   235f4:	add	r0, pc, r0
   235f8:	bl	12d9c <printf@plt>
   235fc:	mvn	lr, #0
   23600:	str	lr, [fp, #-12]
   23604:	str	r0, [sp, #48]	; 0x30
   23608:	b	23800 <main@@Base+0x44c>
   2360c:	ldr	r0, [sp, #104]	; 0x68
   23610:	bl	1e25c <test_create_add_field@@Base>
   23614:	cmp	r0, #0
   23618:	beq	23638 <main@@Base+0x284>
   2361c:	ldr	r0, [pc, #532]	; 23838 <main@@Base+0x484>
   23620:	add	r0, pc, r0
   23624:	bl	12d9c <printf@plt>
   23628:	mvn	lr, #0
   2362c:	str	lr, [fp, #-12]
   23630:	str	r0, [sp, #44]	; 0x2c
   23634:	b	23800 <main@@Base+0x44c>
   23638:	ldr	r0, [sp, #104]	; 0x68
   2363c:	bl	1e680 <test_union_vector@@Base>
   23640:	cmp	r0, #0
   23644:	beq	23664 <main@@Base+0x2b0>
   23648:	ldr	r0, [pc, #484]	; 23834 <main@@Base+0x480>
   2364c:	add	r0, pc, r0
   23650:	bl	12d9c <printf@plt>
   23654:	mvn	lr, #0
   23658:	str	lr, [fp, #-12]
   2365c:	str	r0, [sp, #40]	; 0x28
   23660:	b	23800 <main@@Base+0x44c>
   23664:	ldr	r0, [sp, #104]	; 0x68
   23668:	bl	1d1e0 <test_basic_sort@@Base>
   2366c:	cmp	r0, #0
   23670:	beq	23690 <main@@Base+0x2dc>
   23674:	ldr	r0, [pc, #436]	; 23830 <main@@Base+0x47c>
   23678:	add	r0, pc, r0
   2367c:	bl	12d9c <printf@plt>
   23680:	mvn	lr, #0
   23684:	str	lr, [fp, #-12]
   23688:	str	r0, [sp, #36]	; 0x24
   2368c:	b	23800 <main@@Base+0x44c>
   23690:	ldr	r0, [sp, #104]	; 0x68
   23694:	bl	1a144 <test_sort_find@@Base>
   23698:	cmp	r0, #0
   2369c:	beq	236bc <main@@Base+0x308>
   236a0:	ldr	r0, [pc, #388]	; 2382c <main@@Base+0x478>
   236a4:	add	r0, pc, r0
   236a8:	bl	12d9c <printf@plt>
   236ac:	mvn	lr, #0
   236b0:	str	lr, [fp, #-12]
   236b4:	str	r0, [sp, #32]
   236b8:	b	23800 <main@@Base+0x44c>
   236bc:	ldr	r0, [sp, #104]	; 0x68
   236c0:	bl	1aaa4 <test_scan@@Base>
   236c4:	cmp	r0, #0
   236c8:	beq	236e8 <main@@Base+0x334>
   236cc:	ldr	r0, [pc, #340]	; 23828 <main@@Base+0x474>
   236d0:	add	r0, pc, r0
   236d4:	bl	12d9c <printf@plt>
   236d8:	mvn	lr, #0
   236dc:	str	lr, [fp, #-12]
   236e0:	str	r0, [sp, #28]
   236e4:	b	23800 <main@@Base+0x44c>
   236e8:	ldr	r0, [sp, #104]	; 0x68
   236ec:	bl	2175c <test_nested_buffer@@Base>
   236f0:	cmp	r0, #0
   236f4:	beq	23714 <main@@Base+0x360>
   236f8:	ldr	r0, [pc, #292]	; 23824 <main@@Base+0x470>
   236fc:	add	r0, pc, r0
   23700:	bl	12d9c <printf@plt>
   23704:	mvn	lr, #0
   23708:	str	lr, [fp, #-12]
   2370c:	str	r0, [sp, #24]
   23710:	b	23800 <main@@Base+0x44c>
   23714:	ldr	r0, [sp, #104]	; 0x68
   23718:	bl	21aa8 <test_nested_buffer_first@@Base>
   2371c:	cmp	r0, #0
   23720:	beq	23740 <main@@Base+0x38c>
   23724:	ldr	r0, [pc, #244]	; 23820 <main@@Base+0x46c>
   23728:	add	r0, pc, r0
   2372c:	bl	12d9c <printf@plt>
   23730:	mvn	lr, #0
   23734:	str	lr, [fp, #-12]
   23738:	str	r0, [sp, #20]
   2373c:	b	23800 <main@@Base+0x44c>
   23740:	ldr	r0, [sp, #104]	; 0x68
   23744:	bl	21cc0 <test_nested_buffer_using_nest@@Base>
   23748:	cmp	r0, #0
   2374c:	beq	2376c <main@@Base+0x3b8>
   23750:	ldr	r0, [pc, #196]	; 2381c <main@@Base+0x468>
   23754:	add	r0, pc, r0
   23758:	bl	12d9c <printf@plt>
   2375c:	mvn	lr, #0
   23760:	str	lr, [fp, #-12]
   23764:	str	r0, [sp, #16]
   23768:	b	23800 <main@@Base+0x44c>
   2376c:	ldr	r0, [sp, #104]	; 0x68
   23770:	bl	2205c <verify_include@@Base>
   23774:	cmp	r0, #0
   23778:	beq	23798 <main@@Base+0x3e4>
   2377c:	ldr	r0, [pc, #148]	; 23818 <main@@Base+0x464>
   23780:	add	r0, pc, r0
   23784:	bl	12d9c <printf@plt>
   23788:	mvn	lr, #0
   2378c:	str	lr, [fp, #-12]
   23790:	str	r0, [sp, #12]
   23794:	b	23800 <main@@Base+0x44c>
   23798:	ldr	r0, [sp, #104]	; 0x68
   2379c:	bl	13618 <test_type_aliases@@Base>
   237a0:	cmp	r0, #0
   237a4:	beq	237c4 <main@@Base+0x410>
   237a8:	ldr	r0, [pc, #100]	; 23814 <main@@Base+0x460>
   237ac:	add	r0, pc, r0
   237b0:	bl	12d9c <printf@plt>
   237b4:	mvn	lr, #0
   237b8:	str	lr, [fp, #-12]
   237bc:	str	r0, [sp, #8]
   237c0:	b	23800 <main@@Base+0x44c>
   237c4:	ldr	r0, [sp, #104]	; 0x68
   237c8:	bl	1f34c <test_mixed_type_union@@Base>
   237cc:	cmp	r0, #0
   237d0:	beq	237f0 <main@@Base+0x43c>
   237d4:	ldr	r0, [pc, #52]	; 23810 <main@@Base+0x45c>
   237d8:	add	r0, pc, r0
   237dc:	bl	12d9c <printf@plt>
   237e0:	mvn	lr, #0
   237e4:	str	lr, [fp, #-12]
   237e8:	str	r0, [sp, #4]
   237ec:	b	23800 <main@@Base+0x44c>
   237f0:	ldr	r0, [sp, #104]	; 0x68
   237f4:	bl	28ba4 <flatcc_builder_clear@@Base>
   237f8:	movw	r0, #0
   237fc:	str	r0, [fp, #-12]
   23800:	ldr	r0, [fp, #-12]
   23804:	sub	sp, fp, #8
   23808:	pop	{r4, r5, fp, pc}
   2380c:	andeq	r1, r1, r2, asr #1
   23810:	andeq	r0, r1, sl, ror #25
   23814:	andeq	r0, r1, r6, lsl sp
   23818:	andeq	r0, r1, r2, asr #26
   2381c:	andeq	r0, r1, lr, ror #26
   23820:	muleq	r1, sl, sp
   23824:	andeq	r0, r1, r6, asr #27
   23828:	strdeq	r0, [r1], -r2
   2382c:	andeq	r0, r1, lr, lsl lr
   23830:	andeq	r0, r1, sl, asr #28
   23834:	andeq	r0, r1, r6, ror lr
   23838:	andeq	r0, r1, r2, lsr #29
   2383c:	andeq	r0, r1, lr, asr #29
   23840:	strdeq	r0, [r1], -sl
   23844:	andeq	r0, r1, r6, lsr #30
   23848:	andeq	r0, r1, r2, asr pc
   2384c:	andeq	r0, r1, lr, ror pc
   23850:	andeq	r0, r1, sl, lsr #31
   23854:	ldrdeq	r0, [r1], -r6
   23858:	andeq	r1, r1, r2
   2385c:	andeq	r1, r1, lr, lsr #32
   23860:	andeq	r1, r1, sl, asr r0
   23864:	andeq	r1, r1, r6, lsl #1
   23868:	strheq	r1, [r1], -r2
   2386c:	push	{fp, lr}
   23870:	mov	fp, sp
   23874:	sub	sp, sp, #8
   23878:	str	r0, [sp, #4]
   2387c:	ldr	r0, [sp, #4]
   23880:	ldr	r0, [r0]
   23884:	bl	23890 <main@@Base+0x4dc>
   23888:	mov	sp, fp
   2388c:	pop	{fp, pc}
   23890:	sub	sp, sp, #4
   23894:	str	r0, [sp]
   23898:	ldr	r0, [sp]
   2389c:	add	sp, sp, #4
   238a0:	bx	lr
   238a4:	push	{fp, lr}
   238a8:	mov	fp, sp
   238ac:	sub	sp, sp, #8
   238b0:	str	r0, [sp, #4]
   238b4:	ldr	r0, [sp, #4]
   238b8:	ldr	r0, [r0]
   238bc:	bl	23918 <main@@Base+0x564>
   238c0:	mov	sp, fp
   238c4:	pop	{fp, pc}
   238c8:	push	{fp, lr}
   238cc:	mov	fp, sp
   238d0:	sub	sp, sp, #8
   238d4:	str	r0, [sp, #4]
   238d8:	ldr	r0, [sp, #4]
   238dc:	ldrh	r0, [r0]
   238e0:	bl	2392c <main@@Base+0x578>
   238e4:	uxth	r0, r0
   238e8:	mov	sp, fp
   238ec:	pop	{fp, pc}
   238f0:	push	{fp, lr}
   238f4:	mov	fp, sp
   238f8:	sub	sp, sp, #8
   238fc:	str	r0, [sp, #4]
   23900:	ldr	r0, [sp, #4]
   23904:	ldrsh	r0, [r0]
   23908:	bl	23940 <main@@Base+0x58c>
   2390c:	sxth	r0, r0
   23910:	mov	sp, fp
   23914:	pop	{fp, pc}
   23918:	sub	sp, sp, #4
   2391c:	str	r0, [sp]
   23920:	ldr	r0, [sp]
   23924:	add	sp, sp, #4
   23928:	bx	lr
   2392c:	sub	sp, sp, #4
   23930:	strh	r0, [sp, #2]
   23934:	ldrh	r0, [sp, #2]
   23938:	add	sp, sp, #4
   2393c:	bx	lr
   23940:	sub	sp, sp, #4
   23944:	strh	r0, [sp, #2]
   23948:	ldrsh	r0, [sp, #2]
   2394c:	add	sp, sp, #4
   23950:	bx	lr
   23954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23958:	add	fp, sp, #28
   2395c:	sub	sp, sp, #68	; 0x44
   23960:	ldr	ip, [fp, #36]	; 0x24
   23964:	ldr	lr, [fp, #32]
   23968:	ldr	r4, [fp, #28]
   2396c:	ldr	r5, [fp, #24]
   23970:	ldr	r6, [fp, #44]	; 0x2c
   23974:	ldr	r7, [fp, #40]	; 0x28
   23978:	ldr	r8, [fp, #16]
   2397c:	ldr	r9, [fp, #12]
   23980:	ldr	sl, [fp, #8]
   23984:	str	r0, [fp, #-36]	; 0xffffffdc
   23988:	strb	r1, [fp, #-37]	; 0xffffffdb
   2398c:	strb	r2, [fp, #-38]	; 0xffffffda
   23990:	strh	r3, [fp, #-40]	; 0xffffffd8
   23994:	strh	sl, [fp, #-42]	; 0xffffffd6
   23998:	str	r4, [sp, #44]	; 0x2c
   2399c:	str	r5, [sp, #40]	; 0x28
   239a0:	str	ip, [sp, #36]	; 0x24
   239a4:	str	lr, [sp, #32]
   239a8:	vstr	s0, [sp, #28]
   239ac:	vstr	d1, [sp, #16]
   239b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   239b4:	str	r7, [sp, #12]
   239b8:	str	r8, [sp, #8]
   239bc:	str	r6, [sp, #4]
   239c0:	str	r9, [sp]
   239c4:	bl	23aec <main@@Base+0x738>
   239c8:	cmp	r0, #0
   239cc:	bne	23ac8 <main@@Base+0x714>
   239d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   239d4:	ldr	r2, [sp, #40]	; 0x28
   239d8:	ldr	r3, [sp, #44]	; 0x2c
   239dc:	bl	23b10 <main@@Base+0x75c>
   239e0:	cmp	r0, #0
   239e4:	bne	23ac8 <main@@Base+0x714>
   239e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   239ec:	ldr	r2, [sp, #32]
   239f0:	ldr	r3, [sp, #36]	; 0x24
   239f4:	bl	23ba8 <main@@Base+0x7f4>
   239f8:	cmp	r0, #0
   239fc:	bne	23ac8 <main@@Base+0x714>
   23a00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a04:	vldr	d0, [sp, #16]
   23a08:	bl	23c40 <main@@Base+0x88c>
   23a0c:	cmp	r0, #0
   23a10:	bne	23ac8 <main@@Base+0x714>
   23a14:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a18:	ldr	r1, [fp, #12]
   23a1c:	bl	23cc8 <main@@Base+0x914>
   23a20:	cmp	r0, #0
   23a24:	bne	23ac8 <main@@Base+0x714>
   23a28:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a2c:	ldr	r1, [fp, #16]
   23a30:	bl	23d50 <main@@Base+0x99c>
   23a34:	cmp	r0, #0
   23a38:	bne	23ac8 <main@@Base+0x714>
   23a3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a40:	vldr	s0, [sp, #28]
   23a44:	bl	23dd4 <main@@Base+0xa20>
   23a48:	cmp	r0, #0
   23a4c:	bne	23ac8 <main@@Base+0x714>
   23a50:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a54:	ldr	r1, [fp, #40]	; 0x28
   23a58:	bl	23e5c <main@@Base+0xaa8>
   23a5c:	cmp	r0, #0
   23a60:	bne	23ac8 <main@@Base+0x714>
   23a64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a68:	ldr	r1, [fp, #44]	; 0x2c
   23a6c:	bl	23ec8 <main@@Base+0xb14>
   23a70:	cmp	r0, #0
   23a74:	bne	23ac8 <main@@Base+0x714>
   23a78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a7c:	ldrsh	r1, [fp, #-40]	; 0xffffffd8
   23a80:	bl	23f34 <main@@Base+0xb80>
   23a84:	cmp	r0, #0
   23a88:	bne	23ac8 <main@@Base+0x714>
   23a8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a90:	ldrh	r1, [fp, #-42]	; 0xffffffd6
   23a94:	bl	23fbc <main@@Base+0xc08>
   23a98:	cmp	r0, #0
   23a9c:	bne	23ac8 <main@@Base+0x714>
   23aa0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23aa4:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
   23aa8:	bl	24040 <main@@Base+0xc8c>
   23aac:	cmp	r0, #0
   23ab0:	bne	23ac8 <main@@Base+0x714>
   23ab4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23ab8:	ldrb	r1, [fp, #-38]	; 0xffffffda
   23abc:	bl	240c4 <main@@Base+0xd10>
   23ac0:	cmp	r0, #0
   23ac4:	beq	23ad4 <main@@Base+0x720>
   23ac8:	movw	r0, #0
   23acc:	str	r0, [fp, #-32]	; 0xffffffe0
   23ad0:	b	23ae0 <main@@Base+0x72c>
   23ad4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23ad8:	bl	2414c <main@@Base+0xd98>
   23adc:	str	r0, [fp, #-32]	; 0xffffffe0
   23ae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23ae4:	sub	sp, fp, #28
   23ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23aec:	push	{fp, lr}
   23af0:	mov	fp, sp
   23af4:	sub	sp, sp, #8
   23af8:	str	r0, [sp, #4]
   23afc:	ldr	r0, [sp, #4]
   23b00:	movw	r1, #12
   23b04:	bl	2b170 <flatcc_builder_start_table@@Base>
   23b08:	mov	sp, fp
   23b0c:	pop	{fp, pc}
   23b10:	push	{fp, lr}
   23b14:	mov	fp, sp
   23b18:	sub	sp, sp, #24
   23b1c:	str	r0, [fp, #-8]
   23b20:	str	r3, [sp, #12]
   23b24:	str	r2, [sp, #8]
   23b28:	ldr	r0, [sp, #8]
   23b2c:	ldr	r2, [sp, #12]
   23b30:	orr	r0, r0, r2
   23b34:	cmp	r0, #0
   23b38:	bne	23b4c <main@@Base+0x798>
   23b3c:	b	23b40 <main@@Base+0x78c>
   23b40:	movw	r0, #0
   23b44:	str	r0, [fp, #-4]
   23b48:	b	23b9c <main@@Base+0x7e8>
   23b4c:	ldr	r0, [fp, #-8]
   23b50:	movw	r1, #6
   23b54:	movw	r2, #8
   23b58:	movw	r3, #8
   23b5c:	uxth	r3, r3
   23b60:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23b64:	str	r0, [sp, #4]
   23b68:	movw	r1, #0
   23b6c:	cmp	r0, r1
   23b70:	bne	23b80 <main@@Base+0x7cc>
   23b74:	mvn	r0, #0
   23b78:	str	r0, [fp, #-4]
   23b7c:	b	23b9c <main@@Base+0x7e8>
   23b80:	ldr	r0, [sp, #4]
   23b84:	ldr	r2, [sp, #8]
   23b88:	ldr	r3, [sp, #12]
   23b8c:	bl	241bc <main@@Base+0xe08>
   23b90:	movw	r2, #0
   23b94:	str	r2, [fp, #-4]
   23b98:	str	r0, [sp]
   23b9c:	ldr	r0, [fp, #-4]
   23ba0:	mov	sp, fp
   23ba4:	pop	{fp, pc}
   23ba8:	push	{fp, lr}
   23bac:	mov	fp, sp
   23bb0:	sub	sp, sp, #24
   23bb4:	str	r0, [fp, #-8]
   23bb8:	str	r3, [sp, #12]
   23bbc:	str	r2, [sp, #8]
   23bc0:	ldr	r0, [sp, #8]
   23bc4:	ldr	r2, [sp, #12]
   23bc8:	orr	r0, r0, r2
   23bcc:	cmp	r0, #0
   23bd0:	bne	23be4 <main@@Base+0x830>
   23bd4:	b	23bd8 <main@@Base+0x824>
   23bd8:	movw	r0, #0
   23bdc:	str	r0, [fp, #-4]
   23be0:	b	23c34 <main@@Base+0x880>
   23be4:	ldr	r0, [fp, #-8]
   23be8:	movw	r1, #7
   23bec:	movw	r2, #8
   23bf0:	movw	r3, #8
   23bf4:	uxth	r3, r3
   23bf8:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23bfc:	str	r0, [sp, #4]
   23c00:	movw	r1, #0
   23c04:	cmp	r0, r1
   23c08:	bne	23c18 <main@@Base+0x864>
   23c0c:	mvn	r0, #0
   23c10:	str	r0, [fp, #-4]
   23c14:	b	23c34 <main@@Base+0x880>
   23c18:	ldr	r0, [sp, #4]
   23c1c:	ldr	r2, [sp, #8]
   23c20:	ldr	r3, [sp, #12]
   23c24:	bl	24214 <main@@Base+0xe60>
   23c28:	movw	r2, #0
   23c2c:	str	r2, [fp, #-4]
   23c30:	str	r0, [sp]
   23c34:	ldr	r0, [fp, #-4]
   23c38:	mov	sp, fp
   23c3c:	pop	{fp, pc}
   23c40:	push	{fp, lr}
   23c44:	mov	fp, sp
   23c48:	sub	sp, sp, #24
   23c4c:	str	r0, [fp, #-8]
   23c50:	vstr	d0, [sp, #8]
   23c54:	vldr	d0, [sp, #8]
   23c58:	vcmp.f64	d0, #0.0
   23c5c:	vmrs	APSR_nzcv, fpscr
   23c60:	bne	23c70 <main@@Base+0x8bc>
   23c64:	movw	r0, #0
   23c68:	str	r0, [fp, #-4]
   23c6c:	b	23cbc <main@@Base+0x908>
   23c70:	ldr	r0, [fp, #-8]
   23c74:	movw	r1, #9
   23c78:	movw	r2, #8
   23c7c:	movw	r3, #8
   23c80:	uxth	r3, r3
   23c84:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23c88:	str	r0, [sp, #4]
   23c8c:	movw	r1, #0
   23c90:	cmp	r0, r1
   23c94:	bne	23ca4 <main@@Base+0x8f0>
   23c98:	mvn	r0, #0
   23c9c:	str	r0, [fp, #-4]
   23ca0:	b	23cbc <main@@Base+0x908>
   23ca4:	ldr	r0, [sp, #4]
   23ca8:	vldr	d0, [sp, #8]
   23cac:	bl	2426c <main@@Base+0xeb8>
   23cb0:	movw	lr, #0
   23cb4:	str	lr, [fp, #-4]
   23cb8:	str	r0, [sp]
   23cbc:	ldr	r0, [fp, #-4]
   23cc0:	mov	sp, fp
   23cc4:	pop	{fp, pc}
   23cc8:	push	{fp, lr}
   23ccc:	mov	fp, sp
   23cd0:	sub	sp, sp, #24
   23cd4:	str	r0, [fp, #-8]
   23cd8:	str	r1, [sp, #12]
   23cdc:	ldr	r0, [sp, #12]
   23ce0:	cmp	r0, #0
   23ce4:	bne	23cf4 <main@@Base+0x940>
   23ce8:	movw	r0, #0
   23cec:	str	r0, [fp, #-4]
   23cf0:	b	23d44 <main@@Base+0x990>
   23cf4:	ldr	r0, [fp, #-8]
   23cf8:	movw	r1, #4
   23cfc:	str	r1, [sp, #4]
   23d00:	ldr	r2, [sp, #4]
   23d04:	movw	r3, #4
   23d08:	uxth	r3, r3
   23d0c:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23d10:	str	r0, [sp, #8]
   23d14:	movw	r1, #0
   23d18:	cmp	r0, r1
   23d1c:	bne	23d2c <main@@Base+0x978>
   23d20:	mvn	r0, #0
   23d24:	str	r0, [fp, #-4]
   23d28:	b	23d44 <main@@Base+0x990>
   23d2c:	ldr	r0, [sp, #8]
   23d30:	ldr	r1, [sp, #12]
   23d34:	bl	242b8 <main@@Base+0xf04>
   23d38:	movw	r1, #0
   23d3c:	str	r1, [fp, #-4]
   23d40:	str	r0, [sp]
   23d44:	ldr	r0, [fp, #-4]
   23d48:	mov	sp, fp
   23d4c:	pop	{fp, pc}
   23d50:	push	{fp, lr}
   23d54:	mov	fp, sp
   23d58:	sub	sp, sp, #24
   23d5c:	str	r0, [fp, #-8]
   23d60:	str	r1, [sp, #12]
   23d64:	ldr	r0, [sp, #12]
   23d68:	cmp	r0, #0
   23d6c:	bne	23d7c <main@@Base+0x9c8>
   23d70:	movw	r0, #0
   23d74:	str	r0, [fp, #-4]
   23d78:	b	23dc8 <main@@Base+0xa14>
   23d7c:	ldr	r0, [fp, #-8]
   23d80:	movw	r1, #5
   23d84:	movw	r2, #4
   23d88:	movw	r3, #4
   23d8c:	uxth	r3, r3
   23d90:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23d94:	str	r0, [sp, #8]
   23d98:	movw	r1, #0
   23d9c:	cmp	r0, r1
   23da0:	bne	23db0 <main@@Base+0x9fc>
   23da4:	mvn	r0, #0
   23da8:	str	r0, [fp, #-4]
   23dac:	b	23dc8 <main@@Base+0xa14>
   23db0:	ldr	r0, [sp, #8]
   23db4:	ldr	r1, [sp, #12]
   23db8:	bl	242fc <main@@Base+0xf48>
   23dbc:	movw	r1, #0
   23dc0:	str	r1, [fp, #-4]
   23dc4:	str	r0, [sp, #4]
   23dc8:	ldr	r0, [fp, #-4]
   23dcc:	mov	sp, fp
   23dd0:	pop	{fp, pc}
   23dd4:	push	{fp, lr}
   23dd8:	mov	fp, sp
   23ddc:	sub	sp, sp, #24
   23de0:	str	r0, [fp, #-8]
   23de4:	vstr	s0, [sp, #12]
   23de8:	vldr	s0, [sp, #12]
   23dec:	vcmp.f32	s0, #0.0
   23df0:	vmrs	APSR_nzcv, fpscr
   23df4:	bne	23e04 <main@@Base+0xa50>
   23df8:	movw	r0, #0
   23dfc:	str	r0, [fp, #-4]
   23e00:	b	23e50 <main@@Base+0xa9c>
   23e04:	ldr	r0, [fp, #-8]
   23e08:	movw	r1, #8
   23e0c:	movw	r2, #4
   23e10:	movw	r3, #4
   23e14:	uxth	r3, r3
   23e18:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23e1c:	str	r0, [sp, #8]
   23e20:	movw	r1, #0
   23e24:	cmp	r0, r1
   23e28:	bne	23e38 <main@@Base+0xa84>
   23e2c:	mvn	r0, #0
   23e30:	str	r0, [fp, #-4]
   23e34:	b	23e50 <main@@Base+0xa9c>
   23e38:	ldr	r0, [sp, #8]
   23e3c:	vldr	s0, [sp, #12]
   23e40:	bl	24340 <main@@Base+0xf8c>
   23e44:	movw	lr, #0
   23e48:	str	lr, [fp, #-4]
   23e4c:	str	r0, [sp, #4]
   23e50:	ldr	r0, [fp, #-4]
   23e54:	mov	sp, fp
   23e58:	pop	{fp, pc}
   23e5c:	push	{fp, lr}
   23e60:	mov	fp, sp
   23e64:	sub	sp, sp, #16
   23e68:	str	r0, [fp, #-4]
   23e6c:	str	r1, [sp, #8]
   23e70:	ldr	r0, [sp, #8]
   23e74:	cmp	r0, #0
   23e78:	beq	23eb0 <main@@Base+0xafc>
   23e7c:	ldr	r0, [fp, #-4]
   23e80:	movw	r1, #10
   23e84:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   23e88:	str	r0, [sp, #4]
   23e8c:	movw	r1, #0
   23e90:	cmp	r0, r1
   23e94:	beq	23eb0 <main@@Base+0xafc>
   23e98:	ldr	r0, [sp, #8]
   23e9c:	ldr	r1, [sp, #4]
   23ea0:	str	r0, [r1]
   23ea4:	movw	r0, #0
   23ea8:	str	r0, [sp]
   23eac:	b	23ebc <main@@Base+0xb08>
   23eb0:	mvn	r0, #0
   23eb4:	str	r0, [sp]
   23eb8:	b	23ebc <main@@Base+0xb08>
   23ebc:	ldr	r0, [sp]
   23ec0:	mov	sp, fp
   23ec4:	pop	{fp, pc}
   23ec8:	push	{fp, lr}
   23ecc:	mov	fp, sp
   23ed0:	sub	sp, sp, #16
   23ed4:	str	r0, [fp, #-4]
   23ed8:	str	r1, [sp, #8]
   23edc:	ldr	r0, [sp, #8]
   23ee0:	cmp	r0, #0
   23ee4:	beq	23f1c <main@@Base+0xb68>
   23ee8:	ldr	r0, [fp, #-4]
   23eec:	movw	r1, #11
   23ef0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   23ef4:	str	r0, [sp, #4]
   23ef8:	movw	r1, #0
   23efc:	cmp	r0, r1
   23f00:	beq	23f1c <main@@Base+0xb68>
   23f04:	ldr	r0, [sp, #8]
   23f08:	ldr	r1, [sp, #4]
   23f0c:	str	r0, [r1]
   23f10:	movw	r0, #0
   23f14:	str	r0, [sp]
   23f18:	b	23f28 <main@@Base+0xb74>
   23f1c:	mvn	r0, #0
   23f20:	str	r0, [sp]
   23f24:	b	23f28 <main@@Base+0xb74>
   23f28:	ldr	r0, [sp]
   23f2c:	mov	sp, fp
   23f30:	pop	{fp, pc}
   23f34:	push	{fp, lr}
   23f38:	mov	fp, sp
   23f3c:	sub	sp, sp, #24
   23f40:	str	r0, [fp, #-8]
   23f44:	strh	r1, [fp, #-10]
   23f48:	ldrsh	r0, [fp, #-10]
   23f4c:	cmp	r0, #0
   23f50:	bne	23f60 <main@@Base+0xbac>
   23f54:	movw	r0, #0
   23f58:	str	r0, [fp, #-4]
   23f5c:	b	23fb0 <main@@Base+0xbfc>
   23f60:	ldr	r0, [fp, #-8]
   23f64:	movw	r1, #2
   23f68:	str	r1, [sp, #4]
   23f6c:	ldr	r2, [sp, #4]
   23f70:	movw	r3, #2
   23f74:	uxth	r3, r3
   23f78:	bl	2ca28 <flatcc_builder_table_add@@Base>
   23f7c:	str	r0, [sp, #8]
   23f80:	movw	r1, #0
   23f84:	cmp	r0, r1
   23f88:	bne	23f98 <main@@Base+0xbe4>
   23f8c:	mvn	r0, #0
   23f90:	str	r0, [fp, #-4]
   23f94:	b	23fb0 <main@@Base+0xbfc>
   23f98:	ldr	r0, [sp, #8]
   23f9c:	ldrsh	r1, [fp, #-10]
   23fa0:	bl	24394 <main@@Base+0xfe0>
   23fa4:	movw	r1, #0
   23fa8:	str	r1, [fp, #-4]
   23fac:	str	r0, [sp]
   23fb0:	ldr	r0, [fp, #-4]
   23fb4:	mov	sp, fp
   23fb8:	pop	{fp, pc}
   23fbc:	push	{fp, lr}
   23fc0:	mov	fp, sp
   23fc4:	sub	sp, sp, #24
   23fc8:	str	r0, [fp, #-8]
   23fcc:	strh	r1, [fp, #-10]
   23fd0:	ldrh	r0, [fp, #-10]
   23fd4:	cmp	r0, #0
   23fd8:	bne	23fe8 <main@@Base+0xc34>
   23fdc:	movw	r0, #0
   23fe0:	str	r0, [fp, #-4]
   23fe4:	b	24034 <main@@Base+0xc80>
   23fe8:	ldr	r0, [fp, #-8]
   23fec:	movw	r1, #3
   23ff0:	movw	r2, #2
   23ff4:	movw	r3, #2
   23ff8:	uxth	r3, r3
   23ffc:	bl	2ca28 <flatcc_builder_table_add@@Base>
   24000:	str	r0, [sp, #8]
   24004:	movw	r1, #0
   24008:	cmp	r0, r1
   2400c:	bne	2401c <main@@Base+0xc68>
   24010:	mvn	r0, #0
   24014:	str	r0, [fp, #-4]
   24018:	b	24034 <main@@Base+0xc80>
   2401c:	ldr	r0, [sp, #8]
   24020:	ldrh	r1, [fp, #-10]
   24024:	bl	243d8 <main@@Base+0x1024>
   24028:	movw	r1, #0
   2402c:	str	r1, [fp, #-4]
   24030:	str	r0, [sp, #4]
   24034:	ldr	r0, [fp, #-4]
   24038:	mov	sp, fp
   2403c:	pop	{fp, pc}
   24040:	push	{fp, lr}
   24044:	mov	fp, sp
   24048:	sub	sp, sp, #24
   2404c:	str	r0, [fp, #-8]
   24050:	strb	r1, [fp, #-9]
   24054:	ldrsb	r0, [fp, #-9]
   24058:	cmp	r0, #0
   2405c:	bne	2406c <main@@Base+0xcb8>
   24060:	movw	r0, #0
   24064:	str	r0, [fp, #-4]
   24068:	b	240b8 <main@@Base+0xd04>
   2406c:	ldr	r0, [fp, #-8]
   24070:	movw	r1, #0
   24074:	movw	r2, #1
   24078:	movw	r3, #1
   2407c:	uxth	r3, r3
   24080:	bl	2ca28 <flatcc_builder_table_add@@Base>
   24084:	str	r0, [sp, #8]
   24088:	movw	r1, #0
   2408c:	cmp	r0, r1
   24090:	bne	240a0 <main@@Base+0xcec>
   24094:	mvn	r0, #0
   24098:	str	r0, [fp, #-4]
   2409c:	b	240b8 <main@@Base+0xd04>
   240a0:	ldr	r0, [sp, #8]
   240a4:	ldrsb	r1, [fp, #-9]
   240a8:	bl	2441c <main@@Base+0x1068>
   240ac:	movw	r1, #0
   240b0:	str	r1, [fp, #-4]
   240b4:	str	r0, [sp, #4]
   240b8:	ldr	r0, [fp, #-4]
   240bc:	mov	sp, fp
   240c0:	pop	{fp, pc}
   240c4:	push	{fp, lr}
   240c8:	mov	fp, sp
   240cc:	sub	sp, sp, #24
   240d0:	str	r0, [fp, #-8]
   240d4:	strb	r1, [fp, #-9]
   240d8:	ldrb	r0, [fp, #-9]
   240dc:	cmp	r0, #0
   240e0:	bne	240f0 <main@@Base+0xd3c>
   240e4:	movw	r0, #0
   240e8:	str	r0, [fp, #-4]
   240ec:	b	24140 <main@@Base+0xd8c>
   240f0:	ldr	r0, [fp, #-8]
   240f4:	movw	r1, #1
   240f8:	str	r1, [sp, #4]
   240fc:	ldr	r2, [sp, #4]
   24100:	movw	r3, #1
   24104:	uxth	r3, r3
   24108:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2410c:	str	r0, [sp, #8]
   24110:	movw	r1, #0
   24114:	cmp	r0, r1
   24118:	bne	24128 <main@@Base+0xd74>
   2411c:	mvn	r0, #0
   24120:	str	r0, [fp, #-4]
   24124:	b	24140 <main@@Base+0xd8c>
   24128:	ldr	r0, [sp, #8]
   2412c:	ldrb	r1, [fp, #-9]
   24130:	bl	24460 <main@@Base+0x10ac>
   24134:	movw	r1, #0
   24138:	str	r1, [fp, #-4]
   2413c:	str	r0, [sp]
   24140:	ldr	r0, [fp, #-4]
   24144:	mov	sp, fp
   24148:	pop	{fp, pc}
   2414c:	push	{fp, lr}
   24150:	mov	fp, sp
   24154:	sub	sp, sp, #8
   24158:	ldr	r1, [pc, #76]	; 241ac <main@@Base+0xdf8>
   2415c:	add	r1, pc, r1
   24160:	str	r0, [sp, #4]
   24164:	ldr	r0, [sp, #4]
   24168:	movw	r2, #0
   2416c:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   24170:	cmp	r0, #0
   24174:	beq	2417c <main@@Base+0xdc8>
   24178:	b	2419c <main@@Base+0xde8>
   2417c:	ldr	r0, [pc, #44]	; 241b0 <main@@Base+0xdfc>
   24180:	add	r0, pc, r0
   24184:	ldr	r1, [pc, #40]	; 241b4 <main@@Base+0xe00>
   24188:	add	r1, pc, r1
   2418c:	ldr	r2, [pc, #36]	; 241b8 <main@@Base+0xe04>
   24190:	add	r3, pc, r2
   24194:	movw	r2, #237	; 0xed
   24198:	bl	12e68 <__assert_fail@plt>
   2419c:	ldr	r0, [sp, #4]
   241a0:	bl	2bde8 <flatcc_builder_end_table@@Base>
   241a4:	mov	sp, fp
   241a8:	pop	{fp, pc}
   241ac:	andeq	r2, r1, sl, lsl r5
   241b0:	andeq	r0, r1, r5, lsr r5
   241b4:	ldrdeq	r0, [r1], -fp
   241b8:	andeq	r0, r1, sp, asr #12
   241bc:	push	{fp, lr}
   241c0:	mov	fp, sp
   241c4:	sub	sp, sp, #16
   241c8:	str	r0, [fp, #-4]
   241cc:	str	r3, [sp, #4]
   241d0:	str	r2, [sp]
   241d4:	ldr	r0, [sp]
   241d8:	ldr	r1, [sp, #4]
   241dc:	bl	241f8 <main@@Base+0xe44>
   241e0:	ldr	r2, [fp, #-4]
   241e4:	str	r1, [r2, #4]
   241e8:	str	r0, [r2]
   241ec:	ldr	r0, [fp, #-4]
   241f0:	mov	sp, fp
   241f4:	pop	{fp, pc}
   241f8:	sub	sp, sp, #8
   241fc:	str	r0, [sp]
   24200:	str	r1, [sp, #4]
   24204:	ldr	r0, [sp]
   24208:	ldr	r1, [sp, #4]
   2420c:	add	sp, sp, #8
   24210:	bx	lr
   24214:	push	{fp, lr}
   24218:	mov	fp, sp
   2421c:	sub	sp, sp, #16
   24220:	str	r0, [fp, #-4]
   24224:	str	r3, [sp, #4]
   24228:	str	r2, [sp]
   2422c:	ldr	r0, [sp]
   24230:	ldr	r1, [sp, #4]
   24234:	bl	24250 <main@@Base+0xe9c>
   24238:	ldr	r2, [fp, #-4]
   2423c:	str	r1, [r2, #4]
   24240:	str	r0, [r2]
   24244:	ldr	r0, [fp, #-4]
   24248:	mov	sp, fp
   2424c:	pop	{fp, pc}
   24250:	sub	sp, sp, #8
   24254:	str	r0, [sp]
   24258:	str	r1, [sp, #4]
   2425c:	ldr	r0, [sp]
   24260:	ldr	r1, [sp, #4]
   24264:	add	sp, sp, #8
   24268:	bx	lr
   2426c:	push	{fp, lr}
   24270:	mov	fp, sp
   24274:	sub	sp, sp, #16
   24278:	str	r0, [fp, #-4]
   2427c:	vstr	d0, [sp]
   24280:	vldr	d0, [sp]
   24284:	bl	2429c <main@@Base+0xee8>
   24288:	ldr	r0, [fp, #-4]
   2428c:	vstr	d0, [r0]
   24290:	ldr	r0, [fp, #-4]
   24294:	mov	sp, fp
   24298:	pop	{fp, pc}
   2429c:	sub	sp, sp, #16
   242a0:	vstr	d0, [sp, #8]
   242a4:	vldr	d0, [sp, #8]
   242a8:	vstr	d0, [sp]
   242ac:	vldr	d0, [sp]
   242b0:	add	sp, sp, #16
   242b4:	bx	lr
   242b8:	push	{fp, lr}
   242bc:	mov	fp, sp
   242c0:	sub	sp, sp, #8
   242c4:	str	r0, [sp, #4]
   242c8:	str	r1, [sp]
   242cc:	ldr	r0, [sp]
   242d0:	bl	242e8 <main@@Base+0xf34>
   242d4:	ldr	r1, [sp, #4]
   242d8:	str	r0, [r1]
   242dc:	ldr	r0, [sp, #4]
   242e0:	mov	sp, fp
   242e4:	pop	{fp, pc}
   242e8:	sub	sp, sp, #4
   242ec:	str	r0, [sp]
   242f0:	ldr	r0, [sp]
   242f4:	add	sp, sp, #4
   242f8:	bx	lr
   242fc:	push	{fp, lr}
   24300:	mov	fp, sp
   24304:	sub	sp, sp, #8
   24308:	str	r0, [sp, #4]
   2430c:	str	r1, [sp]
   24310:	ldr	r0, [sp]
   24314:	bl	2432c <main@@Base+0xf78>
   24318:	ldr	r1, [sp, #4]
   2431c:	str	r0, [r1]
   24320:	ldr	r0, [sp, #4]
   24324:	mov	sp, fp
   24328:	pop	{fp, pc}
   2432c:	sub	sp, sp, #4
   24330:	str	r0, [sp]
   24334:	ldr	r0, [sp]
   24338:	add	sp, sp, #4
   2433c:	bx	lr
   24340:	push	{fp, lr}
   24344:	mov	fp, sp
   24348:	sub	sp, sp, #8
   2434c:	str	r0, [sp, #4]
   24350:	vstr	s0, [sp]
   24354:	vldr	s0, [sp]
   24358:	bl	24370 <main@@Base+0xfbc>
   2435c:	ldr	r0, [sp, #4]
   24360:	vstr	s0, [r0]
   24364:	ldr	r0, [sp, #4]
   24368:	mov	sp, fp
   2436c:	pop	{fp, pc}
   24370:	sub	sp, sp, #8
   24374:	vstr	s0, [sp, #4]
   24378:	vldr	s0, [sp, #4]
   2437c:	vstr	s0, [sp]
   24380:	ldr	r0, [sp]
   24384:	str	r0, [sp]
   24388:	vldr	s0, [sp]
   2438c:	add	sp, sp, #8
   24390:	bx	lr
   24394:	push	{fp, lr}
   24398:	mov	fp, sp
   2439c:	sub	sp, sp, #8
   243a0:	str	r0, [sp, #4]
   243a4:	strh	r1, [sp, #2]
   243a8:	ldrsh	r0, [sp, #2]
   243ac:	bl	243c4 <main@@Base+0x1010>
   243b0:	ldr	r1, [sp, #4]
   243b4:	strh	r0, [r1]
   243b8:	ldr	r0, [sp, #4]
   243bc:	mov	sp, fp
   243c0:	pop	{fp, pc}
   243c4:	sub	sp, sp, #4
   243c8:	strh	r0, [sp, #2]
   243cc:	ldrsh	r0, [sp, #2]
   243d0:	add	sp, sp, #4
   243d4:	bx	lr
   243d8:	push	{fp, lr}
   243dc:	mov	fp, sp
   243e0:	sub	sp, sp, #8
   243e4:	str	r0, [sp, #4]
   243e8:	strh	r1, [sp, #2]
   243ec:	ldrh	r0, [sp, #2]
   243f0:	bl	24408 <main@@Base+0x1054>
   243f4:	ldr	r1, [sp, #4]
   243f8:	strh	r0, [r1]
   243fc:	ldr	r0, [sp, #4]
   24400:	mov	sp, fp
   24404:	pop	{fp, pc}
   24408:	sub	sp, sp, #4
   2440c:	strh	r0, [sp, #2]
   24410:	ldrh	r0, [sp, #2]
   24414:	add	sp, sp, #4
   24418:	bx	lr
   2441c:	push	{fp, lr}
   24420:	mov	fp, sp
   24424:	sub	sp, sp, #8
   24428:	str	r0, [sp, #4]
   2442c:	strb	r1, [sp, #3]
   24430:	ldrsb	r0, [sp, #3]
   24434:	bl	2444c <main@@Base+0x1098>
   24438:	ldr	r1, [sp, #4]
   2443c:	strb	r0, [r1]
   24440:	ldr	r0, [sp, #4]
   24444:	mov	sp, fp
   24448:	pop	{fp, pc}
   2444c:	sub	sp, sp, #4
   24450:	strb	r0, [sp, #3]
   24454:	ldrsb	r0, [sp, #3]
   24458:	add	sp, sp, #4
   2445c:	bx	lr
   24460:	push	{fp, lr}
   24464:	mov	fp, sp
   24468:	sub	sp, sp, #8
   2446c:	str	r0, [sp, #4]
   24470:	strb	r1, [sp, #3]
   24474:	ldrb	r0, [sp, #3]
   24478:	bl	24490 <main@@Base+0x10dc>
   2447c:	ldr	r1, [sp, #4]
   24480:	strb	r0, [r1]
   24484:	ldr	r0, [sp, #4]
   24488:	mov	sp, fp
   2448c:	pop	{fp, pc}
   24490:	sub	sp, sp, #4
   24494:	strb	r0, [sp, #3]
   24498:	ldrb	r0, [sp, #3]
   2449c:	add	sp, sp, #4
   244a0:	bx	lr
   244a4:	push	{fp, lr}
   244a8:	mov	fp, sp
   244ac:	sub	sp, sp, #40	; 0x28
   244b0:	str	r0, [fp, #-8]
   244b4:	ldr	r0, [fp, #-8]
   244b8:	movw	r1, #0
   244bc:	uxth	r1, r1
   244c0:	movw	r2, #1
   244c4:	movw	r3, #1
   244c8:	uxth	r3, r3
   244cc:	bl	2f440 <flatcc_verify_field@@Base>
   244d0:	str	r0, [fp, #-12]
   244d4:	cmp	r0, #0
   244d8:	beq	244e8 <main@@Base+0x1134>
   244dc:	ldr	r0, [fp, #-12]
   244e0:	str	r0, [fp, #-4]
   244e4:	b	24770 <main@@Base+0x13bc>
   244e8:	ldr	r0, [fp, #-8]
   244ec:	movw	r1, #1
   244f0:	uxth	r2, r1
   244f4:	str	r1, [fp, #-16]
   244f8:	mov	r1, r2
   244fc:	movw	r2, #1
   24500:	ldr	r3, [fp, #-16]
   24504:	uxth	r3, r3
   24508:	bl	2f440 <flatcc_verify_field@@Base>
   2450c:	str	r0, [fp, #-12]
   24510:	cmp	r0, #0
   24514:	beq	24524 <main@@Base+0x1170>
   24518:	ldr	r0, [fp, #-12]
   2451c:	str	r0, [fp, #-4]
   24520:	b	24770 <main@@Base+0x13bc>
   24524:	ldr	r0, [fp, #-8]
   24528:	movw	r1, #2
   2452c:	uxth	r2, r1
   24530:	str	r1, [sp, #20]
   24534:	mov	r1, r2
   24538:	movw	r2, #2
   2453c:	ldr	r3, [sp, #20]
   24540:	uxth	r3, r3
   24544:	bl	2f440 <flatcc_verify_field@@Base>
   24548:	str	r0, [fp, #-12]
   2454c:	cmp	r0, #0
   24550:	beq	24560 <main@@Base+0x11ac>
   24554:	ldr	r0, [fp, #-12]
   24558:	str	r0, [fp, #-4]
   2455c:	b	24770 <main@@Base+0x13bc>
   24560:	ldr	r0, [fp, #-8]
   24564:	movw	r1, #3
   24568:	uxth	r1, r1
   2456c:	movw	r2, #2
   24570:	movw	r3, #2
   24574:	uxth	r3, r3
   24578:	bl	2f440 <flatcc_verify_field@@Base>
   2457c:	str	r0, [fp, #-12]
   24580:	cmp	r0, #0
   24584:	beq	24594 <main@@Base+0x11e0>
   24588:	ldr	r0, [fp, #-12]
   2458c:	str	r0, [fp, #-4]
   24590:	b	24770 <main@@Base+0x13bc>
   24594:	ldr	r0, [fp, #-8]
   24598:	movw	r1, #4
   2459c:	uxth	r2, r1
   245a0:	str	r1, [sp, #16]
   245a4:	mov	r1, r2
   245a8:	movw	r2, #4
   245ac:	ldr	r3, [sp, #16]
   245b0:	uxth	r3, r3
   245b4:	bl	2f440 <flatcc_verify_field@@Base>
   245b8:	str	r0, [fp, #-12]
   245bc:	cmp	r0, #0
   245c0:	beq	245d0 <main@@Base+0x121c>
   245c4:	ldr	r0, [fp, #-12]
   245c8:	str	r0, [fp, #-4]
   245cc:	b	24770 <main@@Base+0x13bc>
   245d0:	ldr	r0, [fp, #-8]
   245d4:	movw	r1, #5
   245d8:	uxth	r1, r1
   245dc:	movw	r2, #4
   245e0:	movw	r3, #4
   245e4:	uxth	r3, r3
   245e8:	bl	2f440 <flatcc_verify_field@@Base>
   245ec:	str	r0, [fp, #-12]
   245f0:	cmp	r0, #0
   245f4:	beq	24604 <main@@Base+0x1250>
   245f8:	ldr	r0, [fp, #-12]
   245fc:	str	r0, [fp, #-4]
   24600:	b	24770 <main@@Base+0x13bc>
   24604:	ldr	r0, [fp, #-8]
   24608:	movw	r1, #6
   2460c:	uxth	r1, r1
   24610:	movw	r2, #8
   24614:	movw	r3, #8
   24618:	uxth	r3, r3
   2461c:	bl	2f440 <flatcc_verify_field@@Base>
   24620:	str	r0, [fp, #-12]
   24624:	cmp	r0, #0
   24628:	beq	24638 <main@@Base+0x1284>
   2462c:	ldr	r0, [fp, #-12]
   24630:	str	r0, [fp, #-4]
   24634:	b	24770 <main@@Base+0x13bc>
   24638:	ldr	r0, [fp, #-8]
   2463c:	movw	r1, #7
   24640:	uxth	r1, r1
   24644:	movw	r2, #8
   24648:	movw	r3, #8
   2464c:	uxth	r3, r3
   24650:	bl	2f440 <flatcc_verify_field@@Base>
   24654:	str	r0, [fp, #-12]
   24658:	cmp	r0, #0
   2465c:	beq	2466c <main@@Base+0x12b8>
   24660:	ldr	r0, [fp, #-12]
   24664:	str	r0, [fp, #-4]
   24668:	b	24770 <main@@Base+0x13bc>
   2466c:	ldr	r0, [fp, #-8]
   24670:	movw	r1, #8
   24674:	uxth	r1, r1
   24678:	movw	r2, #4
   2467c:	movw	r3, #4
   24680:	uxth	r3, r3
   24684:	bl	2f440 <flatcc_verify_field@@Base>
   24688:	str	r0, [fp, #-12]
   2468c:	cmp	r0, #0
   24690:	beq	246a0 <main@@Base+0x12ec>
   24694:	ldr	r0, [fp, #-12]
   24698:	str	r0, [fp, #-4]
   2469c:	b	24770 <main@@Base+0x13bc>
   246a0:	ldr	r0, [fp, #-8]
   246a4:	movw	r1, #9
   246a8:	uxth	r1, r1
   246ac:	movw	r2, #8
   246b0:	movw	r3, #8
   246b4:	uxth	r3, r3
   246b8:	bl	2f440 <flatcc_verify_field@@Base>
   246bc:	str	r0, [fp, #-12]
   246c0:	cmp	r0, #0
   246c4:	beq	246d4 <main@@Base+0x1320>
   246c8:	ldr	r0, [fp, #-12]
   246cc:	str	r0, [fp, #-4]
   246d0:	b	24770 <main@@Base+0x13bc>
   246d4:	ldr	r0, [fp, #-8]
   246d8:	movw	r1, #10
   246dc:	uxth	r1, r1
   246e0:	movw	r2, #0
   246e4:	movw	r3, #1
   246e8:	movw	ip, #1
   246ec:	uxth	ip, ip
   246f0:	str	ip, [sp]
   246f4:	mvn	ip, #0
   246f8:	str	ip, [sp, #4]
   246fc:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24700:	str	r0, [fp, #-12]
   24704:	cmp	r0, #0
   24708:	beq	24718 <main@@Base+0x1364>
   2470c:	ldr	r0, [fp, #-12]
   24710:	str	r0, [fp, #-4]
   24714:	b	24770 <main@@Base+0x13bc>
   24718:	ldr	r0, [pc, #92]	; 2477c <main@@Base+0x13c8>
   2471c:	ldr	r1, [fp, #-8]
   24720:	str	r0, [sp, #12]
   24724:	mov	r0, r1
   24728:	movw	r1, #11
   2472c:	uxth	r1, r1
   24730:	movw	r2, #0
   24734:	movw	r3, #8
   24738:	movw	ip, #8
   2473c:	uxth	ip, ip
   24740:	str	ip, [sp]
   24744:	ldr	ip, [sp, #12]
   24748:	str	ip, [sp, #4]
   2474c:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24750:	str	r0, [fp, #-12]
   24754:	cmp	r0, #0
   24758:	beq	24768 <main@@Base+0x13b4>
   2475c:	ldr	r0, [fp, #-12]
   24760:	str	r0, [fp, #-4]
   24764:	b	24770 <main@@Base+0x13bc>
   24768:	movw	r0, #0
   2476c:	str	r0, [fp, #-4]
   24770:	ldr	r0, [fp, #-4]
   24774:	mov	sp, fp
   24778:	pop	{fp, pc}
   2477c:	svcne	0x00ffffff
   24780:	push	{fp, lr}
   24784:	mov	fp, sp
   24788:	sub	sp, sp, #8
   2478c:	str	r0, [sp, #4]
   24790:	ldr	r0, [sp, #4]
   24794:	ldrsb	r0, [r0]
   24798:	bl	247a8 <main@@Base+0x13f4>
   2479c:	sxtb	r0, r0
   247a0:	mov	sp, fp
   247a4:	pop	{fp, pc}
   247a8:	sub	sp, sp, #4
   247ac:	strb	r0, [sp, #3]
   247b0:	ldrsb	r0, [sp, #3]
   247b4:	add	sp, sp, #4
   247b8:	bx	lr
   247bc:	push	{fp, lr}
   247c0:	mov	fp, sp
   247c4:	sub	sp, sp, #8
   247c8:	str	r0, [sp, #4]
   247cc:	ldr	r0, [sp, #4]
   247d0:	ldr	r0, [r0]
   247d4:	bl	247e0 <main@@Base+0x142c>
   247d8:	mov	sp, fp
   247dc:	pop	{fp, pc}
   247e0:	sub	sp, sp, #4
   247e4:	str	r0, [sp]
   247e8:	ldr	r0, [sp]
   247ec:	add	sp, sp, #4
   247f0:	bx	lr
   247f4:	push	{fp, lr}
   247f8:	mov	fp, sp
   247fc:	sub	sp, sp, #8
   24800:	str	r0, [sp, #4]
   24804:	ldr	r0, [sp, #4]
   24808:	ldr	r1, [r0]
   2480c:	ldr	r0, [r0, #4]
   24810:	str	r0, [sp]
   24814:	mov	r0, r1
   24818:	ldr	r1, [sp]
   2481c:	bl	24828 <main@@Base+0x1474>
   24820:	mov	sp, fp
   24824:	pop	{fp, pc}
   24828:	sub	sp, sp, #8
   2482c:	str	r0, [sp]
   24830:	str	r1, [sp, #4]
   24834:	ldr	r0, [sp]
   24838:	ldr	r1, [sp, #4]
   2483c:	add	sp, sp, #8
   24840:	bx	lr
   24844:	push	{fp, lr}
   24848:	mov	fp, sp
   2484c:	sub	sp, sp, #8
   24850:	str	r0, [sp, #4]
   24854:	ldr	r0, [sp, #4]
   24858:	ldrb	r0, [r0]
   2485c:	bl	2486c <main@@Base+0x14b8>
   24860:	and	r0, r0, #255	; 0xff
   24864:	mov	sp, fp
   24868:	pop	{fp, pc}
   2486c:	sub	sp, sp, #4
   24870:	strb	r0, [sp, #3]
   24874:	ldrb	r0, [sp, #3]
   24878:	add	sp, sp, #4
   2487c:	bx	lr
   24880:	push	{fp, lr}
   24884:	mov	fp, sp
   24888:	sub	sp, sp, #8
   2488c:	str	r0, [sp, #4]
   24890:	ldr	r0, [sp, #4]
   24894:	ldrh	r0, [r0]
   24898:	bl	248a8 <main@@Base+0x14f4>
   2489c:	uxth	r0, r0
   248a0:	mov	sp, fp
   248a4:	pop	{fp, pc}
   248a8:	sub	sp, sp, #4
   248ac:	strh	r0, [sp, #2]
   248b0:	ldrh	r0, [sp, #2]
   248b4:	add	sp, sp, #4
   248b8:	bx	lr
   248bc:	push	{fp, lr}
   248c0:	mov	fp, sp
   248c4:	sub	sp, sp, #8
   248c8:	str	r0, [sp, #4]
   248cc:	ldr	r0, [sp, #4]
   248d0:	ldr	r0, [r0]
   248d4:	bl	248e0 <main@@Base+0x152c>
   248d8:	mov	sp, fp
   248dc:	pop	{fp, pc}
   248e0:	sub	sp, sp, #4
   248e4:	str	r0, [sp]
   248e8:	ldr	r0, [sp]
   248ec:	add	sp, sp, #4
   248f0:	bx	lr
   248f4:	push	{fp, lr}
   248f8:	mov	fp, sp
   248fc:	sub	sp, sp, #8
   24900:	str	r0, [sp, #4]
   24904:	ldr	r0, [sp, #4]
   24908:	ldr	r1, [r0]
   2490c:	ldr	r0, [r0, #4]
   24910:	str	r0, [sp]
   24914:	mov	r0, r1
   24918:	ldr	r1, [sp]
   2491c:	bl	24928 <main@@Base+0x1574>
   24920:	mov	sp, fp
   24924:	pop	{fp, pc}
   24928:	sub	sp, sp, #8
   2492c:	str	r0, [sp]
   24930:	str	r1, [sp, #4]
   24934:	ldr	r0, [sp]
   24938:	ldr	r1, [sp, #4]
   2493c:	add	sp, sp, #8
   24940:	bx	lr
   24944:	push	{fp, lr}
   24948:	mov	fp, sp
   2494c:	sub	sp, sp, #8
   24950:	str	r0, [sp, #4]
   24954:	ldr	r0, [sp, #4]
   24958:	vldr	s0, [r0]
   2495c:	bl	24968 <main@@Base+0x15b4>
   24960:	mov	sp, fp
   24964:	pop	{fp, pc}
   24968:	sub	sp, sp, #8
   2496c:	vstr	s0, [sp, #4]
   24970:	vldr	s0, [sp, #4]
   24974:	vstr	s0, [sp]
   24978:	ldr	r0, [sp]
   2497c:	str	r0, [sp]
   24980:	vldr	s0, [sp]
   24984:	add	sp, sp, #8
   24988:	bx	lr
   2498c:	push	{fp, lr}
   24990:	mov	fp, sp
   24994:	sub	sp, sp, #8
   24998:	str	r0, [sp, #4]
   2499c:	ldr	r0, [sp, #4]
   249a0:	vldr	d0, [r0]
   249a4:	bl	249b0 <main@@Base+0x15fc>
   249a8:	mov	sp, fp
   249ac:	pop	{fp, pc}
   249b0:	sub	sp, sp, #16
   249b4:	vstr	d0, [sp, #8]
   249b8:	vldr	d0, [sp, #8]
   249bc:	vstr	d0, [sp]
   249c0:	vldr	d0, [sp]
   249c4:	add	sp, sp, #16
   249c8:	bx	lr
   249cc:	push	{fp, lr}
   249d0:	mov	fp, sp
   249d4:	sub	sp, sp, #56	; 0x38
   249d8:	str	r0, [fp, #-8]
   249dc:	ldr	r0, [fp, #-8]
   249e0:	movw	r1, #0
   249e4:	uxth	r1, r1
   249e8:	movw	r2, #32
   249ec:	movw	r3, #16
   249f0:	uxth	r3, r3
   249f4:	bl	2f440 <flatcc_verify_field@@Base>
   249f8:	str	r0, [fp, #-12]
   249fc:	cmp	r0, #0
   24a00:	beq	24a10 <main@@Base+0x165c>
   24a04:	ldr	r0, [fp, #-12]
   24a08:	str	r0, [fp, #-4]
   24a0c:	b	2519c <main@@Base+0x1de8>
   24a10:	ldr	r0, [fp, #-8]
   24a14:	movw	r1, #2
   24a18:	uxth	r2, r1
   24a1c:	str	r1, [fp, #-16]
   24a20:	mov	r1, r2
   24a24:	movw	r2, #2
   24a28:	ldr	r3, [fp, #-16]
   24a2c:	uxth	r3, r3
   24a30:	bl	2f440 <flatcc_verify_field@@Base>
   24a34:	str	r0, [fp, #-12]
   24a38:	cmp	r0, #0
   24a3c:	beq	24a4c <main@@Base+0x1698>
   24a40:	ldr	r0, [fp, #-12]
   24a44:	str	r0, [fp, #-4]
   24a48:	b	2519c <main@@Base+0x1de8>
   24a4c:	ldr	r0, [fp, #-8]
   24a50:	movw	r1, #1
   24a54:	uxth	r1, r1
   24a58:	movw	r2, #2
   24a5c:	movw	r3, #2
   24a60:	uxth	r3, r3
   24a64:	bl	2f440 <flatcc_verify_field@@Base>
   24a68:	str	r0, [fp, #-12]
   24a6c:	cmp	r0, #0
   24a70:	beq	24a80 <main@@Base+0x16cc>
   24a74:	ldr	r0, [fp, #-12]
   24a78:	str	r0, [fp, #-4]
   24a7c:	b	2519c <main@@Base+0x1de8>
   24a80:	ldr	r0, [fp, #-8]
   24a84:	movw	r1, #3
   24a88:	uxth	r1, r1
   24a8c:	movw	r2, #1
   24a90:	bl	2f64c <flatcc_verify_string_field@@Base>
   24a94:	str	r0, [fp, #-12]
   24a98:	cmp	r0, #0
   24a9c:	beq	24aac <main@@Base+0x16f8>
   24aa0:	ldr	r0, [fp, #-12]
   24aa4:	str	r0, [fp, #-4]
   24aa8:	b	2519c <main@@Base+0x1de8>
   24aac:	ldr	r0, [fp, #-8]
   24ab0:	movw	r1, #6
   24ab4:	uxth	r1, r1
   24ab8:	movw	r2, #1
   24abc:	movw	r3, #1
   24ac0:	uxth	r3, r3
   24ac4:	bl	2f440 <flatcc_verify_field@@Base>
   24ac8:	str	r0, [fp, #-12]
   24acc:	cmp	r0, #0
   24ad0:	beq	24ae0 <main@@Base+0x172c>
   24ad4:	ldr	r0, [fp, #-12]
   24ad8:	str	r0, [fp, #-4]
   24adc:	b	2519c <main@@Base+0x1de8>
   24ae0:	ldr	r0, [fp, #-8]
   24ae4:	movw	r1, #5
   24ae8:	uxth	r1, r1
   24aec:	movw	r2, #0
   24af0:	movw	r3, #1
   24af4:	movw	ip, #1
   24af8:	uxth	ip, ip
   24afc:	str	ip, [sp]
   24b00:	mvn	ip, #0
   24b04:	str	ip, [sp, #4]
   24b08:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24b0c:	str	r0, [fp, #-12]
   24b10:	cmp	r0, #0
   24b14:	beq	24b24 <main@@Base+0x1770>
   24b18:	ldr	r0, [fp, #-12]
   24b1c:	str	r0, [fp, #-4]
   24b20:	b	2519c <main@@Base+0x1de8>
   24b24:	ldr	r0, [pc, #1660]	; 251a8 <main@@Base+0x1df4>
   24b28:	add	r3, pc, r0
   24b2c:	ldr	r0, [fp, #-8]
   24b30:	movw	r1, #11
   24b34:	uxth	r1, r1
   24b38:	movw	r2, #0
   24b3c:	bl	30234 <flatcc_verify_table_vector_field@@Base>
   24b40:	str	r0, [fp, #-12]
   24b44:	cmp	r0, #0
   24b48:	beq	24b58 <main@@Base+0x17a4>
   24b4c:	ldr	r0, [fp, #-12]
   24b50:	str	r0, [fp, #-4]
   24b54:	b	2519c <main@@Base+0x1de8>
   24b58:	ldr	r0, [fp, #-8]
   24b5c:	movw	r1, #10
   24b60:	uxth	r1, r1
   24b64:	movw	r2, #0
   24b68:	bl	2fbe8 <flatcc_verify_string_vector_field@@Base>
   24b6c:	str	r0, [fp, #-12]
   24b70:	cmp	r0, #0
   24b74:	beq	24b84 <main@@Base+0x17d0>
   24b78:	ldr	r0, [fp, #-12]
   24b7c:	str	r0, [fp, #-4]
   24b80:	b	2519c <main@@Base+0x1de8>
   24b84:	ldr	r0, [fp, #-8]
   24b88:	movw	r1, #28
   24b8c:	uxth	r1, r1
   24b90:	movw	r2, #0
   24b94:	bl	2fbe8 <flatcc_verify_string_vector_field@@Base>
   24b98:	str	r0, [fp, #-12]
   24b9c:	cmp	r0, #0
   24ba0:	beq	24bb0 <main@@Base+0x17fc>
   24ba4:	ldr	r0, [fp, #-12]
   24ba8:	str	r0, [fp, #-4]
   24bac:	b	2519c <main@@Base+0x1de8>
   24bb0:	ldr	r0, [fp, #-8]
   24bb4:	movw	r1, #24
   24bb8:	uxth	r1, r1
   24bbc:	movw	r2, #0
   24bc0:	movw	r3, #1
   24bc4:	movw	ip, #1
   24bc8:	uxth	ip, ip
   24bcc:	str	ip, [sp]
   24bd0:	mvn	ip, #0
   24bd4:	str	ip, [sp, #4]
   24bd8:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24bdc:	str	r0, [fp, #-12]
   24be0:	cmp	r0, #0
   24be4:	beq	24bf4 <main@@Base+0x1840>
   24be8:	ldr	r0, [fp, #-12]
   24bec:	str	r0, [fp, #-4]
   24bf0:	b	2519c <main@@Base+0x1de8>
   24bf4:	ldr	r0, [pc, #1456]	; 251ac <main@@Base+0x1df8>
   24bf8:	ldr	r1, [fp, #-8]
   24bfc:	str	r0, [fp, #-20]	; 0xffffffec
   24c00:	mov	r0, r1
   24c04:	movw	r1, #29
   24c08:	uxth	r1, r1
   24c0c:	movw	r2, #0
   24c10:	movw	r3, #8
   24c14:	movw	ip, #4
   24c18:	uxth	ip, ip
   24c1c:	str	ip, [sp]
   24c20:	ldr	ip, [fp, #-20]	; 0xffffffec
   24c24:	str	ip, [sp, #4]
   24c28:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24c2c:	str	r0, [fp, #-12]
   24c30:	cmp	r0, #0
   24c34:	beq	24c44 <main@@Base+0x1890>
   24c38:	ldr	r0, [fp, #-12]
   24c3c:	str	r0, [fp, #-4]
   24c40:	b	2519c <main@@Base+0x1de8>
   24c44:	ldr	r0, [pc, #1380]	; 251b0 <main@@Base+0x1dfc>
   24c48:	add	r3, pc, r0
   24c4c:	ldr	r0, [fp, #-8]
   24c50:	movw	r1, #12
   24c54:	uxth	r1, r1
   24c58:	movw	r2, #0
   24c5c:	bl	2fe68 <flatcc_verify_table_field@@Base>
   24c60:	str	r0, [fp, #-12]
   24c64:	cmp	r0, #0
   24c68:	beq	24c78 <main@@Base+0x18c4>
   24c6c:	ldr	r0, [fp, #-12]
   24c70:	str	r0, [fp, #-4]
   24c74:	b	2519c <main@@Base+0x1de8>
   24c78:	ldr	r0, [pc, #1332]	; 251b4 <main@@Base+0x1e00>
   24c7c:	add	r3, pc, r0
   24c80:	ldr	r0, [fp, #-8]
   24c84:	movw	r1, #8
   24c88:	uxth	r1, r1
   24c8c:	movw	r2, #0
   24c90:	bl	310c4 <flatcc_verify_union_field@@Base>
   24c94:	str	r0, [fp, #-12]
   24c98:	cmp	r0, #0
   24c9c:	beq	24cac <main@@Base+0x18f8>
   24ca0:	ldr	r0, [fp, #-12]
   24ca4:	str	r0, [fp, #-4]
   24ca8:	b	2519c <main@@Base+0x1de8>
   24cac:	ldr	r0, [pc, #1284]	; 251b8 <main@@Base+0x1e04>
   24cb0:	ldr	r1, [fp, #-8]
   24cb4:	str	r0, [fp, #-24]	; 0xffffffe8
   24cb8:	mov	r0, r1
   24cbc:	movw	r1, #9
   24cc0:	uxth	r1, r1
   24cc4:	movw	r2, #0
   24cc8:	movw	r3, #4
   24ccc:	movw	ip, #2
   24cd0:	uxth	ip, ip
   24cd4:	str	ip, [sp]
   24cd8:	ldr	ip, [fp, #-24]	; 0xffffffe8
   24cdc:	str	ip, [sp, #4]
   24ce0:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24ce4:	str	r0, [fp, #-12]
   24ce8:	cmp	r0, #0
   24cec:	beq	24cfc <main@@Base+0x1948>
   24cf0:	ldr	r0, [fp, #-12]
   24cf4:	str	r0, [fp, #-4]
   24cf8:	b	2519c <main@@Base+0x1de8>
   24cfc:	ldr	r0, [pc, #1204]	; 251b8 <main@@Base+0x1e04>
   24d00:	ldr	r1, [fp, #-8]
   24d04:	str	r0, [sp, #28]
   24d08:	mov	r0, r1
   24d0c:	movw	r1, #31
   24d10:	uxth	r1, r1
   24d14:	movw	r2, #0
   24d18:	movw	r3, #4
   24d1c:	movw	ip, #2
   24d20:	uxth	ip, ip
   24d24:	str	ip, [sp]
   24d28:	ldr	ip, [sp, #28]
   24d2c:	str	ip, [sp, #4]
   24d30:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   24d34:	str	r0, [fp, #-12]
   24d38:	cmp	r0, #0
   24d3c:	beq	24d4c <main@@Base+0x1998>
   24d40:	ldr	r0, [fp, #-12]
   24d44:	str	r0, [fp, #-4]
   24d48:	b	2519c <main@@Base+0x1de8>
   24d4c:	ldr	r0, [pc, #1128]	; 251bc <main@@Base+0x1e08>
   24d50:	add	r0, pc, r0
   24d54:	ldr	r1, [fp, #-8]
   24d58:	str	r0, [sp, #24]
   24d5c:	mov	r0, r1
   24d60:	movw	r1, #13
   24d64:	uxth	r1, r1
   24d68:	movw	r2, #0
   24d6c:	str	r2, [sp, #20]
   24d70:	ldr	r3, [sp, #20]
   24d74:	movw	ip, #1
   24d78:	uxth	ip, ip
   24d7c:	str	ip, [sp]
   24d80:	ldr	ip, [sp, #24]
   24d84:	str	ip, [sp, #4]
   24d88:	bl	30f1c <flatcc_verify_table_as_nested_root@@Base>
   24d8c:	str	r0, [fp, #-12]
   24d90:	cmp	r0, #0
   24d94:	beq	24da4 <main@@Base+0x19f0>
   24d98:	ldr	r0, [fp, #-12]
   24d9c:	str	r0, [fp, #-4]
   24da0:	b	2519c <main@@Base+0x1de8>
   24da4:	ldr	r0, [pc, #1044]	; 251c0 <main@@Base+0x1e0c>
   24da8:	add	r3, pc, r0
   24dac:	ldr	r0, [fp, #-8]
   24db0:	movw	r1, #14
   24db4:	uxth	r1, r1
   24db8:	movw	r2, #0
   24dbc:	bl	2fe68 <flatcc_verify_table_field@@Base>
   24dc0:	str	r0, [fp, #-12]
   24dc4:	cmp	r0, #0
   24dc8:	beq	24dd8 <main@@Base+0x1a24>
   24dcc:	ldr	r0, [fp, #-12]
   24dd0:	str	r0, [fp, #-4]
   24dd4:	b	2519c <main@@Base+0x1de8>
   24dd8:	ldr	r0, [fp, #-8]
   24ddc:	movw	r1, #15
   24de0:	uxth	r1, r1
   24de4:	movw	r2, #1
   24de8:	movw	r3, #1
   24dec:	uxth	r3, r3
   24df0:	bl	2f440 <flatcc_verify_field@@Base>
   24df4:	str	r0, [fp, #-12]
   24df8:	cmp	r0, #0
   24dfc:	beq	24e0c <main@@Base+0x1a58>
   24e00:	ldr	r0, [fp, #-12]
   24e04:	str	r0, [fp, #-4]
   24e08:	b	2519c <main@@Base+0x1de8>
   24e0c:	ldr	r0, [fp, #-8]
   24e10:	movw	r1, #16
   24e14:	uxth	r1, r1
   24e18:	movw	r2, #4
   24e1c:	movw	r3, #4
   24e20:	uxth	r3, r3
   24e24:	bl	2f440 <flatcc_verify_field@@Base>
   24e28:	str	r0, [fp, #-12]
   24e2c:	cmp	r0, #0
   24e30:	beq	24e40 <main@@Base+0x1a8c>
   24e34:	ldr	r0, [fp, #-12]
   24e38:	str	r0, [fp, #-4]
   24e3c:	b	2519c <main@@Base+0x1de8>
   24e40:	ldr	r0, [fp, #-8]
   24e44:	movw	r1, #17
   24e48:	uxth	r1, r1
   24e4c:	movw	r2, #4
   24e50:	movw	r3, #4
   24e54:	uxth	r3, r3
   24e58:	bl	2f440 <flatcc_verify_field@@Base>
   24e5c:	str	r0, [fp, #-12]
   24e60:	cmp	r0, #0
   24e64:	beq	24e74 <main@@Base+0x1ac0>
   24e68:	ldr	r0, [fp, #-12]
   24e6c:	str	r0, [fp, #-4]
   24e70:	b	2519c <main@@Base+0x1de8>
   24e74:	ldr	r0, [fp, #-8]
   24e78:	movw	r1, #18
   24e7c:	uxth	r1, r1
   24e80:	movw	r2, #8
   24e84:	movw	r3, #8
   24e88:	uxth	r3, r3
   24e8c:	bl	2f440 <flatcc_verify_field@@Base>
   24e90:	str	r0, [fp, #-12]
   24e94:	cmp	r0, #0
   24e98:	beq	24ea8 <main@@Base+0x1af4>
   24e9c:	ldr	r0, [fp, #-12]
   24ea0:	str	r0, [fp, #-4]
   24ea4:	b	2519c <main@@Base+0x1de8>
   24ea8:	ldr	r0, [fp, #-8]
   24eac:	movw	r1, #19
   24eb0:	uxth	r1, r1
   24eb4:	movw	r2, #8
   24eb8:	movw	r3, #8
   24ebc:	uxth	r3, r3
   24ec0:	bl	2f440 <flatcc_verify_field@@Base>
   24ec4:	str	r0, [fp, #-12]
   24ec8:	cmp	r0, #0
   24ecc:	beq	24edc <main@@Base+0x1b28>
   24ed0:	ldr	r0, [fp, #-12]
   24ed4:	str	r0, [fp, #-4]
   24ed8:	b	2519c <main@@Base+0x1de8>
   24edc:	ldr	r0, [fp, #-8]
   24ee0:	movw	r1, #20
   24ee4:	uxth	r1, r1
   24ee8:	movw	r2, #4
   24eec:	movw	r3, #4
   24ef0:	uxth	r3, r3
   24ef4:	bl	2f440 <flatcc_verify_field@@Base>
   24ef8:	str	r0, [fp, #-12]
   24efc:	cmp	r0, #0
   24f00:	beq	24f10 <main@@Base+0x1b5c>
   24f04:	ldr	r0, [fp, #-12]
   24f08:	str	r0, [fp, #-4]
   24f0c:	b	2519c <main@@Base+0x1de8>
   24f10:	ldr	r0, [fp, #-8]
   24f14:	movw	r1, #21
   24f18:	uxth	r1, r1
   24f1c:	movw	r2, #4
   24f20:	movw	r3, #4
   24f24:	uxth	r3, r3
   24f28:	bl	2f440 <flatcc_verify_field@@Base>
   24f2c:	str	r0, [fp, #-12]
   24f30:	cmp	r0, #0
   24f34:	beq	24f44 <main@@Base+0x1b90>
   24f38:	ldr	r0, [fp, #-12]
   24f3c:	str	r0, [fp, #-4]
   24f40:	b	2519c <main@@Base+0x1de8>
   24f44:	ldr	r0, [fp, #-8]
   24f48:	movw	r1, #22
   24f4c:	uxth	r1, r1
   24f50:	movw	r2, #8
   24f54:	movw	r3, #8
   24f58:	uxth	r3, r3
   24f5c:	bl	2f440 <flatcc_verify_field@@Base>
   24f60:	str	r0, [fp, #-12]
   24f64:	cmp	r0, #0
   24f68:	beq	24f78 <main@@Base+0x1bc4>
   24f6c:	ldr	r0, [fp, #-12]
   24f70:	str	r0, [fp, #-4]
   24f74:	b	2519c <main@@Base+0x1de8>
   24f78:	ldr	r0, [fp, #-8]
   24f7c:	movw	r1, #23
   24f80:	uxth	r1, r1
   24f84:	movw	r2, #8
   24f88:	movw	r3, #8
   24f8c:	uxth	r3, r3
   24f90:	bl	2f440 <flatcc_verify_field@@Base>
   24f94:	str	r0, [fp, #-12]
   24f98:	cmp	r0, #0
   24f9c:	beq	24fac <main@@Base+0x1bf8>
   24fa0:	ldr	r0, [fp, #-12]
   24fa4:	str	r0, [fp, #-4]
   24fa8:	b	2519c <main@@Base+0x1de8>
   24fac:	ldr	r0, [fp, #-8]
   24fb0:	movw	r1, #25
   24fb4:	uxth	r1, r1
   24fb8:	movw	r2, #4
   24fbc:	movw	r3, #4
   24fc0:	uxth	r3, r3
   24fc4:	bl	2f440 <flatcc_verify_field@@Base>
   24fc8:	str	r0, [fp, #-12]
   24fcc:	cmp	r0, #0
   24fd0:	beq	24fe0 <main@@Base+0x1c2c>
   24fd4:	ldr	r0, [fp, #-12]
   24fd8:	str	r0, [fp, #-4]
   24fdc:	b	2519c <main@@Base+0x1de8>
   24fe0:	ldr	r0, [fp, #-8]
   24fe4:	movw	r1, #26
   24fe8:	uxth	r1, r1
   24fec:	movw	r2, #4
   24ff0:	movw	r3, #4
   24ff4:	uxth	r3, r3
   24ff8:	bl	2f440 <flatcc_verify_field@@Base>
   24ffc:	str	r0, [fp, #-12]
   25000:	cmp	r0, #0
   25004:	beq	25014 <main@@Base+0x1c60>
   25008:	ldr	r0, [fp, #-12]
   2500c:	str	r0, [fp, #-4]
   25010:	b	2519c <main@@Base+0x1de8>
   25014:	ldr	r0, [fp, #-8]
   25018:	movw	r1, #27
   2501c:	uxth	r1, r1
   25020:	movw	r2, #4
   25024:	movw	r3, #4
   25028:	uxth	r3, r3
   2502c:	bl	2f440 <flatcc_verify_field@@Base>
   25030:	str	r0, [fp, #-12]
   25034:	cmp	r0, #0
   25038:	beq	25048 <main@@Base+0x1c94>
   2503c:	ldr	r0, [fp, #-12]
   25040:	str	r0, [fp, #-4]
   25044:	b	2519c <main@@Base+0x1de8>
   25048:	ldr	r0, [fp, #-8]
   2504c:	movw	r1, #30
   25050:	uxth	r1, r1
   25054:	movw	r2, #0
   25058:	movw	r3, #1
   2505c:	movw	ip, #1
   25060:	uxth	ip, ip
   25064:	str	ip, [sp]
   25068:	mvn	ip, #0
   2506c:	str	ip, [sp, #4]
   25070:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   25074:	str	r0, [fp, #-12]
   25078:	cmp	r0, #0
   2507c:	beq	2508c <main@@Base+0x1cd8>
   25080:	ldr	r0, [fp, #-12]
   25084:	str	r0, [fp, #-4]
   25088:	b	2519c <main@@Base+0x1de8>
   2508c:	ldr	r0, [pc, #280]	; 251ac <main@@Base+0x1df8>
   25090:	ldr	r1, [fp, #-8]
   25094:	str	r0, [sp, #16]
   25098:	mov	r0, r1
   2509c:	movw	r1, #32
   250a0:	uxth	r1, r1
   250a4:	movw	r2, #0
   250a8:	movw	r3, #8
   250ac:	movw	ip, #8
   250b0:	uxth	ip, ip
   250b4:	str	ip, [sp]
   250b8:	ldr	ip, [sp, #16]
   250bc:	str	ip, [sp, #4]
   250c0:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   250c4:	str	r0, [fp, #-12]
   250c8:	cmp	r0, #0
   250cc:	beq	250dc <main@@Base+0x1d28>
   250d0:	ldr	r0, [fp, #-12]
   250d4:	str	r0, [fp, #-4]
   250d8:	b	2519c <main@@Base+0x1de8>
   250dc:	ldr	r0, [pc, #200]	; 251ac <main@@Base+0x1df8>
   250e0:	ldr	r1, [fp, #-8]
   250e4:	str	r0, [sp, #12]
   250e8:	mov	r0, r1
   250ec:	movw	r1, #33	; 0x21
   250f0:	uxth	r1, r1
   250f4:	movw	r2, #0
   250f8:	movw	r3, #8
   250fc:	movw	ip, #8
   25100:	uxth	ip, ip
   25104:	str	ip, [sp]
   25108:	ldr	ip, [sp, #12]
   2510c:	str	ip, [sp, #4]
   25110:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   25114:	str	r0, [fp, #-12]
   25118:	cmp	r0, #0
   2511c:	beq	2512c <main@@Base+0x1d78>
   25120:	ldr	r0, [fp, #-12]
   25124:	str	r0, [fp, #-4]
   25128:	b	2519c <main@@Base+0x1de8>
   2512c:	ldr	r0, [pc, #144]	; 251c4 <main@@Base+0x1e10>
   25130:	add	r3, pc, r0
   25134:	ldr	r0, [fp, #-8]
   25138:	movw	r1, #34	; 0x22
   2513c:	uxth	r1, r1
   25140:	movw	r2, #0
   25144:	bl	2fe68 <flatcc_verify_table_field@@Base>
   25148:	str	r0, [fp, #-12]
   2514c:	cmp	r0, #0
   25150:	beq	25160 <main@@Base+0x1dac>
   25154:	ldr	r0, [fp, #-12]
   25158:	str	r0, [fp, #-4]
   2515c:	b	2519c <main@@Base+0x1de8>
   25160:	ldr	r0, [pc, #96]	; 251c8 <main@@Base+0x1e14>
   25164:	add	r3, pc, r0
   25168:	ldr	r0, [fp, #-8]
   2516c:	movw	r1, #35	; 0x23
   25170:	uxth	r1, r1
   25174:	movw	r2, #0
   25178:	bl	2fe68 <flatcc_verify_table_field@@Base>
   2517c:	str	r0, [fp, #-12]
   25180:	cmp	r0, #0
   25184:	beq	25194 <main@@Base+0x1de0>
   25188:	ldr	r0, [fp, #-12]
   2518c:	str	r0, [fp, #-4]
   25190:	b	2519c <main@@Base+0x1de8>
   25194:	movw	r0, #0
   25198:	str	r0, [fp, #-4]
   2519c:	ldr	r0, [fp, #-4]
   251a0:	mov	sp, fp
   251a4:	pop	{fp, pc}
   251a8:			; <UNDEFINED> instruction: 0xfffffe9c
   251ac:	svcne	0x00ffffff
   251b0:			; <UNDEFINED> instruction: 0xfffffd7c
   251b4:	andeq	r0, r0, r8, asr #10
   251b8:	svccc	0x00ffffff
   251bc:			; <UNDEFINED> instruction: 0xfffffc74
   251c0:	andeq	r0, r0, r8, ror #9
   251c4:	andeq	r0, r0, r0, lsr #4
   251c8:	andeq	r0, r0, r0, lsl #4
   251cc:	push	{fp, lr}
   251d0:	mov	fp, sp
   251d4:	sub	sp, sp, #16
   251d8:	str	r0, [sp, #8]
   251dc:	ldr	r0, [sp, #8]
   251e0:	ldrb	r0, [r0, #12]
   251e4:	sub	r0, r0, #1
   251e8:	cmp	r0, #3
   251ec:	str	r0, [sp, #4]
   251f0:	bhi	25274 <main@@Base+0x1ec0>
   251f4:	add	r0, pc, #8
   251f8:	ldr	r1, [sp, #4]
   251fc:	ldr	r2, [r0, r1, lsl #2]
   25200:	add	pc, r0, r2
   25204:	andeq	r0, r0, r0, lsl r0
   25208:	andeq	r0, r0, r8, lsr #32
   2520c:	andeq	r0, r0, r0, asr #32
   25210:	andeq	r0, r0, r8, asr r0
   25214:	ldr	r0, [pc, #120]	; 25294 <main@@Base+0x1ee0>
   25218:	add	r1, pc, r0
   2521c:	ldr	r0, [sp, #8]
   25220:	bl	3059c <flatcc_verify_union_table@@Base>
   25224:	str	r0, [fp, #-4]
   25228:	b	2527c <main@@Base+0x1ec8>
   2522c:	ldr	r0, [pc, #92]	; 25290 <main@@Base+0x1edc>
   25230:	add	r1, pc, r0
   25234:	ldr	r0, [sp, #8]
   25238:	bl	3059c <flatcc_verify_union_table@@Base>
   2523c:	str	r0, [fp, #-4]
   25240:	b	2527c <main@@Base+0x1ec8>
   25244:	ldr	r0, [pc, #64]	; 2528c <main@@Base+0x1ed8>
   25248:	add	r1, pc, r0
   2524c:	ldr	r0, [sp, #8]
   25250:	bl	3059c <flatcc_verify_union_table@@Base>
   25254:	str	r0, [fp, #-4]
   25258:	b	2527c <main@@Base+0x1ec8>
   2525c:	ldr	r0, [pc, #36]	; 25288 <main@@Base+0x1ed4>
   25260:	add	r1, pc, r0
   25264:	ldr	r0, [sp, #8]
   25268:	bl	3059c <flatcc_verify_union_table@@Base>
   2526c:	str	r0, [fp, #-4]
   25270:	b	2527c <main@@Base+0x1ec8>
   25274:	movw	r0, #0
   25278:	str	r0, [fp, #-4]
   2527c:	ldr	r0, [fp, #-4]
   25280:	mov	sp, fp
   25284:	pop	{fp, pc}
   25288:	andeq	r0, r0, r4, lsr #6
   2528c:	andeq	r0, r0, r8, lsr #6
   25290:	andeq	r0, r0, r4, asr #4
   25294:			; <UNDEFINED> instruction: 0xfffff7ac
   25298:	push	{fp, lr}
   2529c:	mov	fp, sp
   252a0:	sub	sp, sp, #16
   252a4:	str	r0, [sp, #8]
   252a8:	ldr	r0, [sp, #8]
   252ac:	movw	r1, #0
   252b0:	uxth	r1, r1
   252b4:	movw	r2, #0
   252b8:	bl	2f64c <flatcc_verify_string_field@@Base>
   252bc:	str	r0, [sp, #4]
   252c0:	cmp	r0, #0
   252c4:	beq	252d4 <main@@Base+0x1f20>
   252c8:	ldr	r0, [sp, #4]
   252cc:	str	r0, [fp, #-4]
   252d0:	b	2534c <main@@Base+0x1f98>
   252d4:	ldr	r0, [sp, #8]
   252d8:	movw	r1, #1
   252dc:	uxth	r1, r1
   252e0:	movw	r2, #8
   252e4:	movw	r3, #8
   252e8:	uxth	r3, r3
   252ec:	bl	2f440 <flatcc_verify_field@@Base>
   252f0:	str	r0, [sp, #4]
   252f4:	cmp	r0, #0
   252f8:	beq	25308 <main@@Base+0x1f54>
   252fc:	ldr	r0, [sp, #4]
   25300:	str	r0, [fp, #-4]
   25304:	b	2534c <main@@Base+0x1f98>
   25308:	ldr	r0, [sp, #8]
   2530c:	movw	r1, #2
   25310:	uxth	r2, r1
   25314:	str	r1, [sp]
   25318:	mov	r1, r2
   2531c:	movw	r2, #2
   25320:	ldr	r3, [sp]
   25324:	uxth	r3, r3
   25328:	bl	2f440 <flatcc_verify_field@@Base>
   2532c:	str	r0, [sp, #4]
   25330:	cmp	r0, #0
   25334:	beq	25344 <main@@Base+0x1f90>
   25338:	ldr	r0, [sp, #4]
   2533c:	str	r0, [fp, #-4]
   25340:	b	2534c <main@@Base+0x1f98>
   25344:	movw	r0, #0
   25348:	str	r0, [fp, #-4]
   2534c:	ldr	r0, [fp, #-4]
   25350:	mov	sp, fp
   25354:	pop	{fp, pc}
   25358:	sub	sp, sp, #4
   2535c:	str	r0, [sp]
   25360:	movw	r0, #0
   25364:	add	sp, sp, #4
   25368:	bx	lr
   2536c:	push	{fp, lr}
   25370:	mov	fp, sp
   25374:	sub	sp, sp, #32
   25378:	str	r0, [fp, #-8]
   2537c:	ldr	r0, [fp, #-8]
   25380:	movw	r1, #0
   25384:	uxth	r1, r1
   25388:	movw	r2, #0
   2538c:	movw	r3, #1
   25390:	movw	ip, #1
   25394:	uxth	ip, ip
   25398:	str	ip, [sp]
   2539c:	mvn	ip, #0
   253a0:	str	ip, [sp, #4]
   253a4:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   253a8:	str	r0, [fp, #-12]
   253ac:	cmp	r0, #0
   253b0:	beq	253c0 <main@@Base+0x200c>
   253b4:	ldr	r0, [fp, #-12]
   253b8:	str	r0, [fp, #-4]
   253bc:	b	2546c <main@@Base+0x20b8>
   253c0:	ldr	r0, [fp, #-8]
   253c4:	movw	r1, #1
   253c8:	uxth	r2, r1
   253cc:	str	r1, [sp, #16]
   253d0:	mov	r1, r2
   253d4:	movw	r2, #0
   253d8:	movw	r3, #1
   253dc:	ldr	ip, [sp, #16]
   253e0:	uxth	lr, ip
   253e4:	str	lr, [sp]
   253e8:	mvn	lr, #0
   253ec:	str	lr, [sp, #4]
   253f0:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   253f4:	str	r0, [fp, #-12]
   253f8:	cmp	r0, #0
   253fc:	beq	2540c <main@@Base+0x2058>
   25400:	ldr	r0, [fp, #-12]
   25404:	str	r0, [fp, #-4]
   25408:	b	2546c <main@@Base+0x20b8>
   2540c:	ldr	r0, [pc, #100]	; 25478 <main@@Base+0x20c4>
   25410:	add	r0, pc, r0
   25414:	ldr	r1, [fp, #-8]
   25418:	str	r0, [sp, #12]
   2541c:	mov	r0, r1
   25420:	movw	r1, #2
   25424:	uxth	r1, r1
   25428:	movw	r2, #0
   2542c:	str	r2, [sp, #8]
   25430:	ldr	r3, [sp, #8]
   25434:	movw	ip, #1
   25438:	uxth	ip, ip
   2543c:	str	ip, [sp]
   25440:	ldr	ip, [sp, #12]
   25444:	str	ip, [sp, #4]
   25448:	bl	30f1c <flatcc_verify_table_as_nested_root@@Base>
   2544c:	str	r0, [fp, #-12]
   25450:	cmp	r0, #0
   25454:	beq	25464 <main@@Base+0x20b0>
   25458:	ldr	r0, [fp, #-12]
   2545c:	str	r0, [fp, #-4]
   25460:	b	2546c <main@@Base+0x20b8>
   25464:	movw	r0, #0
   25468:	str	r0, [fp, #-4]
   2546c:	ldr	r0, [fp, #-4]
   25470:	mov	sp, fp
   25474:	pop	{fp, pc}
   25478:			; <UNDEFINED> instruction: 0xfffff5b4
   2547c:	push	{fp, lr}
   25480:	mov	fp, sp
   25484:	sub	sp, sp, #16
   25488:	str	r0, [sp, #8]
   2548c:	ldr	r0, [sp, #8]
   25490:	movw	r1, #0
   25494:	uxth	r1, r1
   25498:	movw	r2, #1
   2549c:	movw	r3, #1
   254a0:	uxth	r3, r3
   254a4:	bl	2f440 <flatcc_verify_field@@Base>
   254a8:	str	r0, [sp, #4]
   254ac:	cmp	r0, #0
   254b0:	beq	254c0 <main@@Base+0x210c>
   254b4:	ldr	r0, [sp, #4]
   254b8:	str	r0, [fp, #-4]
   254bc:	b	2556c <main@@Base+0x21b8>
   254c0:	ldr	r0, [sp, #8]
   254c4:	movw	r1, #1
   254c8:	uxth	r2, r1
   254cc:	str	r1, [sp]
   254d0:	mov	r1, r2
   254d4:	movw	r2, #1
   254d8:	ldr	r3, [sp]
   254dc:	uxth	r3, r3
   254e0:	bl	2f440 <flatcc_verify_field@@Base>
   254e4:	str	r0, [sp, #4]
   254e8:	cmp	r0, #0
   254ec:	beq	254fc <main@@Base+0x2148>
   254f0:	ldr	r0, [sp, #4]
   254f4:	str	r0, [fp, #-4]
   254f8:	b	2556c <main@@Base+0x21b8>
   254fc:	ldr	r0, [sp, #8]
   25500:	movw	r1, #2
   25504:	uxth	r1, r1
   25508:	movw	r2, #1
   2550c:	movw	r3, #1
   25510:	uxth	r3, r3
   25514:	bl	2f440 <flatcc_verify_field@@Base>
   25518:	str	r0, [sp, #4]
   2551c:	cmp	r0, #0
   25520:	beq	25530 <main@@Base+0x217c>
   25524:	ldr	r0, [sp, #4]
   25528:	str	r0, [fp, #-4]
   2552c:	b	2556c <main@@Base+0x21b8>
   25530:	ldr	r0, [sp, #8]
   25534:	movw	r1, #3
   25538:	uxth	r1, r1
   2553c:	movw	r2, #1
   25540:	movw	r3, #1
   25544:	uxth	r3, r3
   25548:	bl	2f440 <flatcc_verify_field@@Base>
   2554c:	str	r0, [sp, #4]
   25550:	cmp	r0, #0
   25554:	beq	25564 <main@@Base+0x21b0>
   25558:	ldr	r0, [sp, #4]
   2555c:	str	r0, [fp, #-4]
   25560:	b	2556c <main@@Base+0x21b8>
   25564:	movw	r0, #0
   25568:	str	r0, [fp, #-4]
   2556c:	ldr	r0, [fp, #-4]
   25570:	mov	sp, fp
   25574:	pop	{fp, pc}
   25578:	sub	sp, sp, #4
   2557c:	str	r0, [sp]
   25580:	movw	r0, #0
   25584:	add	sp, sp, #4
   25588:	bx	lr
   2558c:	push	{fp, lr}
   25590:	mov	fp, sp
   25594:	sub	sp, sp, #16
   25598:	ldr	r1, [pc, #172]	; 2564c <main@@Base+0x2298>
   2559c:	add	r3, pc, r1
   255a0:	str	r0, [sp, #8]
   255a4:	ldr	r0, [sp, #8]
   255a8:	movw	r1, #0
   255ac:	uxth	r1, r1
   255b0:	movw	r2, #0
   255b4:	bl	2fe68 <flatcc_verify_table_field@@Base>
   255b8:	str	r0, [sp, #4]
   255bc:	cmp	r0, #0
   255c0:	beq	255d0 <main@@Base+0x221c>
   255c4:	ldr	r0, [sp, #4]
   255c8:	str	r0, [fp, #-4]
   255cc:	b	25640 <main@@Base+0x228c>
   255d0:	ldr	r0, [pc, #120]	; 25650 <main@@Base+0x229c>
   255d4:	add	r3, pc, r0
   255d8:	ldr	r0, [sp, #8]
   255dc:	movw	r1, #1
   255e0:	uxth	r1, r1
   255e4:	movw	r2, #0
   255e8:	bl	2fe68 <flatcc_verify_table_field@@Base>
   255ec:	str	r0, [sp, #4]
   255f0:	cmp	r0, #0
   255f4:	beq	25604 <main@@Base+0x2250>
   255f8:	ldr	r0, [sp, #4]
   255fc:	str	r0, [fp, #-4]
   25600:	b	25640 <main@@Base+0x228c>
   25604:	ldr	r0, [pc, #72]	; 25654 <main@@Base+0x22a0>
   25608:	add	r3, pc, r0
   2560c:	ldr	r0, [sp, #8]
   25610:	movw	r1, #3
   25614:	uxth	r1, r1
   25618:	movw	r2, #0
   2561c:	bl	313bc <flatcc_verify_union_vector_field@@Base>
   25620:	str	r0, [sp, #4]
   25624:	cmp	r0, #0
   25628:	beq	25638 <main@@Base+0x2284>
   2562c:	ldr	r0, [sp, #4]
   25630:	str	r0, [fp, #-4]
   25634:	b	25640 <main@@Base+0x228c>
   25638:	movw	r0, #0
   2563c:	str	r0, [fp, #-4]
   25640:	ldr	r0, [fp, #-4]
   25644:	mov	sp, fp
   25648:	pop	{fp, pc}
   2564c:	strheq	r0, [r0], -r4
   25650:	andeq	r0, r0, r8, asr #2
   25654:			; <UNDEFINED> instruction: 0xfffffbbc
   25658:	push	{fp, lr}
   2565c:	mov	fp, sp
   25660:	sub	sp, sp, #16
   25664:	ldr	r1, [pc, #172]	; 25718 <main@@Base+0x2364>
   25668:	add	r3, pc, r1
   2566c:	str	r0, [sp, #8]
   25670:	ldr	r0, [sp, #8]
   25674:	movw	r1, #0
   25678:	uxth	r1, r1
   2567c:	movw	r2, #0
   25680:	bl	2fe68 <flatcc_verify_table_field@@Base>
   25684:	str	r0, [sp, #4]
   25688:	cmp	r0, #0
   2568c:	beq	2569c <main@@Base+0x22e8>
   25690:	ldr	r0, [sp, #4]
   25694:	str	r0, [fp, #-4]
   25698:	b	2570c <main@@Base+0x2358>
   2569c:	ldr	r0, [pc, #120]	; 2571c <main@@Base+0x2368>
   256a0:	add	r3, pc, r0
   256a4:	ldr	r0, [sp, #8]
   256a8:	movw	r1, #1
   256ac:	uxth	r1, r1
   256b0:	movw	r2, #0
   256b4:	bl	2fe68 <flatcc_verify_table_field@@Base>
   256b8:	str	r0, [sp, #4]
   256bc:	cmp	r0, #0
   256c0:	beq	256d0 <main@@Base+0x231c>
   256c4:	ldr	r0, [sp, #4]
   256c8:	str	r0, [fp, #-4]
   256cc:	b	2570c <main@@Base+0x2358>
   256d0:	ldr	r0, [pc, #72]	; 25720 <main@@Base+0x236c>
   256d4:	add	r3, pc, r0
   256d8:	ldr	r0, [sp, #8]
   256dc:	movw	r1, #2
   256e0:	uxth	r1, r1
   256e4:	movw	r2, #0
   256e8:	bl	2fe68 <flatcc_verify_table_field@@Base>
   256ec:	str	r0, [sp, #4]
   256f0:	cmp	r0, #0
   256f4:	beq	25704 <main@@Base+0x2350>
   256f8:	ldr	r0, [sp, #4]
   256fc:	str	r0, [fp, #-4]
   25700:	b	2570c <main@@Base+0x2358>
   25704:	movw	r0, #0
   25708:	str	r0, [fp, #-4]
   2570c:	ldr	r0, [fp, #-4]
   25710:	mov	sp, fp
   25714:	pop	{fp, pc}
   25718:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   2571c:	muleq	r0, r8, r3
   25720:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   25724:	push	{fp, lr}
   25728:	mov	fp, sp
   2572c:	sub	sp, sp, #16
   25730:	ldr	r1, [pc, #276]	; 2584c <main@@Base+0x2498>
   25734:	add	r3, pc, r1
   25738:	str	r0, [sp, #8]
   2573c:	ldr	r0, [sp, #8]
   25740:	movw	r1, #1
   25744:	uxth	r1, r1
   25748:	movw	r2, #0
   2574c:	bl	310c4 <flatcc_verify_union_field@@Base>
   25750:	str	r0, [sp, #4]
   25754:	cmp	r0, #0
   25758:	beq	25768 <main@@Base+0x23b4>
   2575c:	ldr	r0, [sp, #4]
   25760:	str	r0, [fp, #-4]
   25764:	b	25840 <main@@Base+0x248c>
   25768:	ldr	r0, [pc, #224]	; 25850 <main@@Base+0x249c>
   2576c:	add	r3, pc, r0
   25770:	ldr	r0, [sp, #8]
   25774:	movw	r1, #3
   25778:	uxth	r1, r1
   2577c:	movw	r2, #0
   25780:	bl	310c4 <flatcc_verify_union_field@@Base>
   25784:	str	r0, [sp, #4]
   25788:	cmp	r0, #0
   2578c:	beq	2579c <main@@Base+0x23e8>
   25790:	ldr	r0, [sp, #4]
   25794:	str	r0, [fp, #-4]
   25798:	b	25840 <main@@Base+0x248c>
   2579c:	ldr	r0, [pc, #176]	; 25854 <main@@Base+0x24a0>
   257a0:	add	r3, pc, r0
   257a4:	ldr	r0, [sp, #8]
   257a8:	movw	r1, #5
   257ac:	uxth	r1, r1
   257b0:	movw	r2, #0
   257b4:	bl	310c4 <flatcc_verify_union_field@@Base>
   257b8:	str	r0, [sp, #4]
   257bc:	cmp	r0, #0
   257c0:	beq	257d0 <main@@Base+0x241c>
   257c4:	ldr	r0, [sp, #4]
   257c8:	str	r0, [fp, #-4]
   257cc:	b	25840 <main@@Base+0x248c>
   257d0:	ldr	r0, [pc, #128]	; 25858 <main@@Base+0x24a4>
   257d4:	add	r3, pc, r0
   257d8:	ldr	r0, [sp, #8]
   257dc:	movw	r1, #7
   257e0:	uxth	r1, r1
   257e4:	movw	r2, #0
   257e8:	bl	310c4 <flatcc_verify_union_field@@Base>
   257ec:	str	r0, [sp, #4]
   257f0:	cmp	r0, #0
   257f4:	beq	25804 <main@@Base+0x2450>
   257f8:	ldr	r0, [sp, #4]
   257fc:	str	r0, [fp, #-4]
   25800:	b	25840 <main@@Base+0x248c>
   25804:	ldr	r0, [pc, #80]	; 2585c <main@@Base+0x24a8>
   25808:	add	r3, pc, r0
   2580c:	ldr	r0, [sp, #8]
   25810:	movw	r1, #9
   25814:	uxth	r1, r1
   25818:	movw	r2, #0
   2581c:	bl	313bc <flatcc_verify_union_vector_field@@Base>
   25820:	str	r0, [sp, #4]
   25824:	cmp	r0, #0
   25828:	beq	25838 <main@@Base+0x2484>
   2582c:	ldr	r0, [sp, #4]
   25830:	str	r0, [fp, #-4]
   25834:	b	25840 <main@@Base+0x248c>
   25838:	movw	r0, #0
   2583c:	str	r0, [fp, #-4]
   25840:	ldr	r0, [fp, #-4]
   25844:	mov	sp, fp
   25848:	pop	{fp, pc}
   2584c:	andeq	r0, r0, ip, lsl r4
   25850:	andeq	r0, r0, r4, ror #7
   25854:			; <UNDEFINED> instruction: 0x000003b0
   25858:	andeq	r0, r0, ip, ror r3
   2585c:	andeq	r0, r0, r8, asr #6
   25860:	push	{fp, lr}
   25864:	mov	fp, sp
   25868:	sub	sp, sp, #16
   2586c:	str	r0, [sp, #8]
   25870:	ldr	r0, [sp, #8]
   25874:	movw	r1, #0
   25878:	uxth	r1, r1
   2587c:	movw	r2, #0
   25880:	bl	2f64c <flatcc_verify_string_field@@Base>
   25884:	str	r0, [sp, #4]
   25888:	cmp	r0, #0
   2588c:	beq	2589c <main@@Base+0x24e8>
   25890:	ldr	r0, [sp, #4]
   25894:	str	r0, [fp, #-4]
   25898:	b	25a34 <main@@Base+0x2680>
   2589c:	ldr	r0, [sp, #8]
   258a0:	movw	r1, #1
   258a4:	uxth	r1, r1
   258a8:	movw	r2, #4
   258ac:	movw	r3, #4
   258b0:	uxth	r3, r3
   258b4:	bl	2f440 <flatcc_verify_field@@Base>
   258b8:	str	r0, [sp, #4]
   258bc:	cmp	r0, #0
   258c0:	beq	258d0 <main@@Base+0x251c>
   258c4:	ldr	r0, [sp, #4]
   258c8:	str	r0, [fp, #-4]
   258cc:	b	25a34 <main@@Base+0x2680>
   258d0:	ldr	r0, [sp, #8]
   258d4:	movw	r1, #2
   258d8:	uxth	r1, r1
   258dc:	movw	r2, #0
   258e0:	bl	2f64c <flatcc_verify_string_field@@Base>
   258e4:	str	r0, [sp, #4]
   258e8:	cmp	r0, #0
   258ec:	beq	258fc <main@@Base+0x2548>
   258f0:	ldr	r0, [sp, #4]
   258f4:	str	r0, [fp, #-4]
   258f8:	b	25a34 <main@@Base+0x2680>
   258fc:	ldr	r0, [sp, #8]
   25900:	movw	r1, #3
   25904:	uxth	r1, r1
   25908:	movw	r2, #8
   2590c:	movw	r3, #8
   25910:	uxth	r3, r3
   25914:	bl	2f440 <flatcc_verify_field@@Base>
   25918:	str	r0, [sp, #4]
   2591c:	cmp	r0, #0
   25920:	beq	25930 <main@@Base+0x257c>
   25924:	ldr	r0, [sp, #4]
   25928:	str	r0, [fp, #-4]
   2592c:	b	25a34 <main@@Base+0x2680>
   25930:	ldr	r0, [sp, #8]
   25934:	movw	r1, #4
   25938:	uxth	r1, r1
   2593c:	movw	r2, #0
   25940:	bl	2f64c <flatcc_verify_string_field@@Base>
   25944:	str	r0, [sp, #4]
   25948:	cmp	r0, #0
   2594c:	beq	2595c <main@@Base+0x25a8>
   25950:	ldr	r0, [sp, #4]
   25954:	str	r0, [fp, #-4]
   25958:	b	25a34 <main@@Base+0x2680>
   2595c:	ldr	r0, [sp, #8]
   25960:	movw	r1, #5
   25964:	uxth	r1, r1
   25968:	movw	r2, #8
   2596c:	movw	r3, #8
   25970:	uxth	r3, r3
   25974:	bl	2f440 <flatcc_verify_field@@Base>
   25978:	str	r0, [sp, #4]
   2597c:	cmp	r0, #0
   25980:	beq	25990 <main@@Base+0x25dc>
   25984:	ldr	r0, [sp, #4]
   25988:	str	r0, [fp, #-4]
   2598c:	b	25a34 <main@@Base+0x2680>
   25990:	ldr	r0, [sp, #8]
   25994:	movw	r1, #6
   25998:	uxth	r1, r1
   2599c:	movw	r2, #4
   259a0:	movw	r3, #4
   259a4:	uxth	r3, r3
   259a8:	bl	2f440 <flatcc_verify_field@@Base>
   259ac:	str	r0, [sp, #4]
   259b0:	cmp	r0, #0
   259b4:	beq	259c4 <main@@Base+0x2610>
   259b8:	ldr	r0, [sp, #4]
   259bc:	str	r0, [fp, #-4]
   259c0:	b	25a34 <main@@Base+0x2680>
   259c4:	ldr	r0, [sp, #8]
   259c8:	movw	r1, #7
   259cc:	uxth	r1, r1
   259d0:	movw	r2, #8
   259d4:	movw	r3, #8
   259d8:	uxth	r3, r3
   259dc:	bl	2f440 <flatcc_verify_field@@Base>
   259e0:	str	r0, [sp, #4]
   259e4:	cmp	r0, #0
   259e8:	beq	259f8 <main@@Base+0x2644>
   259ec:	ldr	r0, [sp, #4]
   259f0:	str	r0, [fp, #-4]
   259f4:	b	25a34 <main@@Base+0x2680>
   259f8:	ldr	r0, [sp, #8]
   259fc:	movw	r1, #8
   25a00:	uxth	r1, r1
   25a04:	movw	r2, #4
   25a08:	movw	r3, #4
   25a0c:	uxth	r3, r3
   25a10:	bl	2f440 <flatcc_verify_field@@Base>
   25a14:	str	r0, [sp, #4]
   25a18:	cmp	r0, #0
   25a1c:	beq	25a2c <main@@Base+0x2678>
   25a20:	ldr	r0, [sp, #4]
   25a24:	str	r0, [fp, #-4]
   25a28:	b	25a34 <main@@Base+0x2680>
   25a2c:	movw	r0, #0
   25a30:	str	r0, [fp, #-4]
   25a34:	ldr	r0, [fp, #-4]
   25a38:	mov	sp, fp
   25a3c:	pop	{fp, pc}
   25a40:	push	{fp, lr}
   25a44:	mov	fp, sp
   25a48:	sub	sp, sp, #16
   25a4c:	str	r0, [sp, #8]
   25a50:	ldr	r0, [sp, #8]
   25a54:	movw	r1, #0
   25a58:	uxth	r1, r1
   25a5c:	movw	r2, #8
   25a60:	movw	r3, #8
   25a64:	uxth	r3, r3
   25a68:	bl	2f440 <flatcc_verify_field@@Base>
   25a6c:	str	r0, [sp, #4]
   25a70:	cmp	r0, #0
   25a74:	beq	25a84 <main@@Base+0x26d0>
   25a78:	ldr	r0, [sp, #4]
   25a7c:	str	r0, [fp, #-4]
   25a80:	b	25ac0 <main@@Base+0x270c>
   25a84:	ldr	r0, [sp, #8]
   25a88:	movw	r1, #1
   25a8c:	uxth	r1, r1
   25a90:	movw	r2, #4
   25a94:	movw	r3, #4
   25a98:	uxth	r3, r3
   25a9c:	bl	2f440 <flatcc_verify_field@@Base>
   25aa0:	str	r0, [sp, #4]
   25aa4:	cmp	r0, #0
   25aa8:	beq	25ab8 <main@@Base+0x2704>
   25aac:	ldr	r0, [sp, #4]
   25ab0:	str	r0, [fp, #-4]
   25ab4:	b	25ac0 <main@@Base+0x270c>
   25ab8:	movw	r0, #0
   25abc:	str	r0, [fp, #-4]
   25ac0:	ldr	r0, [fp, #-4]
   25ac4:	mov	sp, fp
   25ac8:	pop	{fp, pc}
   25acc:	push	{fp, lr}
   25ad0:	mov	fp, sp
   25ad4:	sub	sp, sp, #16
   25ad8:	str	r0, [sp, #8]
   25adc:	ldr	r0, [sp, #8]
   25ae0:	movw	r1, #0
   25ae4:	uxth	r1, r1
   25ae8:	movw	r2, #8
   25aec:	movw	r3, #8
   25af0:	uxth	r3, r3
   25af4:	bl	2f440 <flatcc_verify_field@@Base>
   25af8:	str	r0, [sp, #4]
   25afc:	cmp	r0, #0
   25b00:	beq	25b10 <main@@Base+0x275c>
   25b04:	ldr	r0, [sp, #4]
   25b08:	str	r0, [fp, #-4]
   25b0c:	b	25b4c <main@@Base+0x2798>
   25b10:	ldr	r0, [sp, #8]
   25b14:	movw	r1, #1
   25b18:	uxth	r1, r1
   25b1c:	movw	r2, #4
   25b20:	movw	r3, #4
   25b24:	uxth	r3, r3
   25b28:	bl	2f440 <flatcc_verify_field@@Base>
   25b2c:	str	r0, [sp, #4]
   25b30:	cmp	r0, #0
   25b34:	beq	25b44 <main@@Base+0x2790>
   25b38:	ldr	r0, [sp, #4]
   25b3c:	str	r0, [fp, #-4]
   25b40:	b	25b4c <main@@Base+0x2798>
   25b44:	movw	r0, #0
   25b48:	str	r0, [fp, #-4]
   25b4c:	ldr	r0, [fp, #-4]
   25b50:	mov	sp, fp
   25b54:	pop	{fp, pc}
   25b58:	push	{fp, lr}
   25b5c:	mov	fp, sp
   25b60:	sub	sp, sp, #16
   25b64:	str	r0, [sp, #8]
   25b68:	ldr	r0, [sp, #8]
   25b6c:	ldrb	r0, [r0, #12]
   25b70:	mov	r1, r0
   25b74:	cmp	r0, #2
   25b78:	str	r1, [sp, #4]
   25b7c:	beq	25bd4 <main@@Base+0x2820>
   25b80:	b	25b84 <main@@Base+0x27d0>
   25b84:	ldr	r0, [sp, #4]
   25b88:	cmp	r0, #8
   25b8c:	beq	25bec <main@@Base+0x2838>
   25b90:	b	25b94 <main@@Base+0x27e0>
   25b94:	ldr	r0, [sp, #4]
   25b98:	cmp	r0, #9
   25b9c:	beq	25c08 <main@@Base+0x2854>
   25ba0:	b	25ba4 <main@@Base+0x27f0>
   25ba4:	ldr	r0, [sp, #4]
   25ba8:	cmp	r0, #10
   25bac:	beq	25c24 <main@@Base+0x2870>
   25bb0:	b	25bb4 <main@@Base+0x2800>
   25bb4:	ldr	r0, [sp, #4]
   25bb8:	cmp	r0, #11
   25bbc:	beq	25c40 <main@@Base+0x288c>
   25bc0:	b	25bc4 <main@@Base+0x2810>
   25bc4:	ldr	r0, [sp, #4]
   25bc8:	cmp	r0, #255	; 0xff
   25bcc:	beq	25c50 <main@@Base+0x289c>
   25bd0:	b	25c60 <main@@Base+0x28ac>
   25bd4:	ldr	r0, [pc, #152]	; 25c74 <main@@Base+0x28c0>
   25bd8:	add	r1, pc, r0
   25bdc:	ldr	r0, [sp, #8]
   25be0:	bl	3059c <flatcc_verify_union_table@@Base>
   25be4:	str	r0, [fp, #-4]
   25be8:	b	25c68 <main@@Base+0x28b4>
   25bec:	ldr	r0, [sp, #8]
   25bf0:	movw	r1, #2
   25bf4:	movw	r2, #2
   25bf8:	uxth	r2, r2
   25bfc:	bl	305f0 <flatcc_verify_union_struct@@Base>
   25c00:	str	r0, [fp, #-4]
   25c04:	b	25c68 <main@@Base+0x28b4>
   25c08:	ldr	r0, [sp, #8]
   25c0c:	movw	r1, #4
   25c10:	movw	r2, #4
   25c14:	uxth	r2, r2
   25c18:	bl	305f0 <flatcc_verify_union_struct@@Base>
   25c1c:	str	r0, [fp, #-4]
   25c20:	b	25c68 <main@@Base+0x28b4>
   25c24:	ldr	r0, [sp, #8]
   25c28:	movw	r1, #4
   25c2c:	movw	r2, #4
   25c30:	uxth	r2, r2
   25c34:	bl	305f0 <flatcc_verify_union_struct@@Base>
   25c38:	str	r0, [fp, #-4]
   25c3c:	b	25c68 <main@@Base+0x28b4>
   25c40:	ldr	r0, [sp, #8]
   25c44:	bl	30778 <flatcc_verify_union_string@@Base>
   25c48:	str	r0, [fp, #-4]
   25c4c:	b	25c68 <main@@Base+0x28b4>
   25c50:	ldr	r0, [sp, #8]
   25c54:	bl	30778 <flatcc_verify_union_string@@Base>
   25c58:	str	r0, [fp, #-4]
   25c5c:	b	25c68 <main@@Base+0x28b4>
   25c60:	movw	r0, #0
   25c64:	str	r0, [fp, #-4]
   25c68:	ldr	r0, [fp, #-4]
   25c6c:	mov	sp, fp
   25c70:	pop	{fp, pc}
   25c74:	muleq	r0, r8, r0
   25c78:	push	{fp, lr}
   25c7c:	mov	fp, sp
   25c80:	sub	sp, sp, #16
   25c84:	str	r0, [sp, #8]
   25c88:	ldr	r0, [sp, #8]
   25c8c:	movw	r1, #0
   25c90:	uxth	r1, r1
   25c94:	movw	r2, #4
   25c98:	movw	r3, #4
   25c9c:	uxth	r3, r3
   25ca0:	bl	2f440 <flatcc_verify_field@@Base>
   25ca4:	str	r0, [sp, #4]
   25ca8:	cmp	r0, #0
   25cac:	beq	25cbc <main@@Base+0x2908>
   25cb0:	ldr	r0, [sp, #4]
   25cb4:	str	r0, [fp, #-4]
   25cb8:	b	25cc4 <main@@Base+0x2910>
   25cbc:	movw	r0, #0
   25cc0:	str	r0, [fp, #-4]
   25cc4:	ldr	r0, [fp, #-4]
   25cc8:	mov	sp, fp
   25ccc:	pop	{fp, pc}
   25cd0:	push	{fp, lr}
   25cd4:	mov	fp, sp
   25cd8:	sub	sp, sp, #8
   25cdc:	str	r0, [sp, #4]
   25ce0:	ldr	r0, [sp, #4]
   25ce4:	ldr	r0, [r0]
   25ce8:	bl	25cf4 <main@@Base+0x2940>
   25cec:	mov	sp, fp
   25cf0:	pop	{fp, pc}
   25cf4:	sub	sp, sp, #4
   25cf8:	str	r0, [sp]
   25cfc:	ldr	r0, [sp]
   25d00:	add	sp, sp, #4
   25d04:	bx	lr
   25d08:	movw	r0, #0
   25d0c:	bx	lr
   25d10:	push	{fp, lr}
   25d14:	mov	fp, sp
   25d18:	sub	sp, sp, #16
   25d1c:	str	r0, [sp, #8]
   25d20:	str	r1, [sp, #4]
   25d24:	ldr	r0, [sp, #8]
   25d28:	bl	25d6c <main@@Base+0x29b8>
   25d2c:	cmp	r0, #0
   25d30:	bne	25d48 <main@@Base+0x2994>
   25d34:	ldr	r0, [sp, #8]
   25d38:	ldr	r1, [sp, #4]
   25d3c:	bl	25d90 <main@@Base+0x29dc>
   25d40:	cmp	r0, #0
   25d44:	beq	25d54 <main@@Base+0x29a0>
   25d48:	movw	r0, #0
   25d4c:	str	r0, [fp, #-4]
   25d50:	b	25d60 <main@@Base+0x29ac>
   25d54:	ldr	r0, [sp, #8]
   25d58:	bl	25df0 <main@@Base+0x2a3c>
   25d5c:	str	r0, [fp, #-4]
   25d60:	ldr	r0, [fp, #-4]
   25d64:	mov	sp, fp
   25d68:	pop	{fp, pc}
   25d6c:	push	{fp, lr}
   25d70:	mov	fp, sp
   25d74:	sub	sp, sp, #8
   25d78:	str	r0, [sp, #4]
   25d7c:	ldr	r0, [sp, #4]
   25d80:	movw	r1, #1
   25d84:	bl	2b170 <flatcc_builder_start_table@@Base>
   25d88:	mov	sp, fp
   25d8c:	pop	{fp, pc}
   25d90:	push	{fp, lr}
   25d94:	mov	fp, sp
   25d98:	sub	sp, sp, #24
   25d9c:	str	r0, [fp, #-8]
   25da0:	str	r1, [sp, #12]
   25da4:	ldr	r0, [fp, #-8]
   25da8:	bl	25e60 <main@@Base+0x2aac>
   25dac:	str	r0, [sp, #8]
   25db0:	ldr	r0, [sp, #8]
   25db4:	movw	r1, #0
   25db8:	cmp	r0, r1
   25dbc:	bne	25dcc <main@@Base+0x2a18>
   25dc0:	mvn	r0, #0
   25dc4:	str	r0, [fp, #-4]
   25dc8:	b	25de4 <main@@Base+0x2a30>
   25dcc:	ldr	r0, [sp, #8]
   25dd0:	ldr	r1, [sp, #12]
   25dd4:	bl	25e94 <main@@Base+0x2ae0>
   25dd8:	movw	r1, #0
   25ddc:	str	r1, [fp, #-4]
   25de0:	str	r0, [sp, #4]
   25de4:	ldr	r0, [fp, #-4]
   25de8:	mov	sp, fp
   25dec:	pop	{fp, pc}
   25df0:	push	{fp, lr}
   25df4:	mov	fp, sp
   25df8:	sub	sp, sp, #8
   25dfc:	ldr	r1, [pc, #76]	; 25e50 <main@@Base+0x2a9c>
   25e00:	add	r1, pc, r1
   25e04:	str	r0, [sp, #4]
   25e08:	ldr	r0, [sp, #4]
   25e0c:	movw	r2, #0
   25e10:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   25e14:	cmp	r0, #0
   25e18:	beq	25e20 <main@@Base+0x2a6c>
   25e1c:	b	25e40 <main@@Base+0x2a8c>
   25e20:	ldr	r0, [pc, #44]	; 25e54 <main@@Base+0x2aa0>
   25e24:	add	r0, pc, r0
   25e28:	ldr	r1, [pc, #40]	; 25e58 <main@@Base+0x2aa4>
   25e2c:	add	r1, pc, r1
   25e30:	ldr	r2, [pc, #36]	; 25e5c <main@@Base+0x2aa8>
   25e34:	add	r3, pc, r2
   25e38:	movw	r2, #215	; 0xd7
   25e3c:	bl	12e68 <__assert_fail@plt>
   25e40:	ldr	r0, [sp, #4]
   25e44:	bl	2bde8 <flatcc_builder_end_table@@Base>
   25e48:	mov	sp, fp
   25e4c:	pop	{fp, pc}
   25e50:	andeq	r0, r1, ip, ror r8
   25e54:	andeq	lr, r0, r0, lsl #29
   25e58:	andeq	lr, r0, r7, lsr r9
   25e5c:	andeq	lr, r0, sp, lsr #30
   25e60:	push	{fp, lr}
   25e64:	mov	fp, sp
   25e68:	sub	sp, sp, #8
   25e6c:	str	r0, [sp, #4]
   25e70:	ldr	r0, [sp, #4]
   25e74:	movw	r1, #0
   25e78:	str	r1, [sp]
   25e7c:	ldr	r2, [sp]
   25e80:	movw	r3, #1
   25e84:	uxth	r3, r3
   25e88:	bl	2ca28 <flatcc_builder_table_add@@Base>
   25e8c:	mov	sp, fp
   25e90:	pop	{fp, pc}
   25e94:	sub	sp, sp, #8
   25e98:	str	r0, [sp, #4]
   25e9c:	str	r1, [sp]
   25ea0:	ldr	r0, [sp, #4]
   25ea4:	add	sp, sp, #8
   25ea8:	bx	lr
   25eac:	push	{fp, lr}
   25eb0:	mov	fp, sp
   25eb4:	sub	sp, sp, #16
   25eb8:	str	r0, [sp, #8]
   25ebc:	ldr	r0, [sp, #8]
   25ec0:	movw	r1, #0
   25ec4:	uxth	r1, r1
   25ec8:	movw	r2, #0
   25ecc:	movw	r3, #1
   25ed0:	uxth	r3, r3
   25ed4:	bl	2f440 <flatcc_verify_field@@Base>
   25ed8:	str	r0, [sp, #4]
   25edc:	cmp	r0, #0
   25ee0:	beq	25ef0 <main@@Base+0x2b3c>
   25ee4:	ldr	r0, [sp, #4]
   25ee8:	str	r0, [fp, #-4]
   25eec:	b	25ef8 <main@@Base+0x2b44>
   25ef0:	movw	r0, #0
   25ef4:	str	r0, [fp, #-4]
   25ef8:	ldr	r0, [fp, #-4]
   25efc:	mov	sp, fp
   25f00:	pop	{fp, pc}
   25f04:	sub	sp, sp, #4
   25f08:	str	r0, [sp]
   25f0c:	ldr	r0, [sp]
   25f10:	add	sp, sp, #4
   25f14:	bx	lr
   25f18:	movw	r0, #32
   25f1c:	bx	lr
   25f20:	push	{fp, lr}
   25f24:	mov	fp, sp
   25f28:	sub	sp, sp, #8
   25f2c:	str	r0, [sp, #4]
   25f30:	str	r1, [sp]
   25f34:	ldr	r0, [sp]
   25f38:	vldr	s0, [r0]
   25f3c:	bl	24968 <main@@Base+0x15b4>
   25f40:	ldr	r0, [sp, #4]
   25f44:	vstr	s0, [r0]
   25f48:	ldr	r0, [sp, #4]
   25f4c:	mov	sp, fp
   25f50:	pop	{fp, pc}
   25f54:	push	{fp, lr}
   25f58:	mov	fp, sp
   25f5c:	sub	sp, sp, #8
   25f60:	str	r0, [sp, #4]
   25f64:	str	r1, [sp]
   25f68:	ldr	r0, [sp]
   25f6c:	vldr	d0, [r0]
   25f70:	bl	249b0 <main@@Base+0x15fc>
   25f74:	ldr	r0, [sp, #4]
   25f78:	vstr	d0, [r0]
   25f7c:	ldr	r0, [sp, #4]
   25f80:	mov	sp, fp
   25f84:	pop	{fp, pc}
   25f88:	push	{fp, lr}
   25f8c:	mov	fp, sp
   25f90:	sub	sp, sp, #16
   25f94:	str	r0, [fp, #-4]
   25f98:	str	r1, [sp, #8]
   25f9c:	ldr	r0, [fp, #-4]
   25fa0:	ldr	r1, [sp, #8]
   25fa4:	bl	25fcc <main@@Base+0x2c18>
   25fa8:	ldr	r1, [sp, #8]
   25fac:	ldrb	r1, [r1, #2]
   25fb0:	ldr	lr, [fp, #-4]
   25fb4:	strb	r1, [lr, #2]
   25fb8:	ldr	r1, [fp, #-4]
   25fbc:	str	r0, [sp, #4]
   25fc0:	mov	r0, r1
   25fc4:	mov	sp, fp
   25fc8:	pop	{fp, pc}
   25fcc:	push	{fp, lr}
   25fd0:	mov	fp, sp
   25fd4:	sub	sp, sp, #8
   25fd8:	str	r0, [sp, #4]
   25fdc:	str	r1, [sp]
   25fe0:	ldr	r0, [sp]
   25fe4:	ldrsh	r0, [r0]
   25fe8:	bl	23940 <main@@Base+0x58c>
   25fec:	ldr	r1, [sp, #4]
   25ff0:	strh	r0, [r1]
   25ff4:	ldr	r0, [sp, #4]
   25ff8:	mov	sp, fp
   25ffc:	pop	{fp, pc}
   26000:	push	{fp, lr}
   26004:	mov	fp, sp
   26008:	sub	sp, sp, #8
   2600c:	str	r0, [sp, #4]
   26010:	ldr	r0, [sp, #4]
   26014:	ldrsb	r0, [r0]
   26018:	bl	26028 <main@@Base+0x2c74>
   2601c:	sxtb	r0, r0
   26020:	mov	sp, fp
   26024:	pop	{fp, pc}
   26028:	sub	sp, sp, #4
   2602c:	strb	r0, [sp, #3]
   26030:	ldrsb	r0, [sp, #3]
   26034:	add	sp, sp, #4
   26038:	bx	lr
   2603c:	push	{fp, lr}
   26040:	mov	fp, sp
   26044:	sub	sp, sp, #8
   26048:	str	r0, [sp, #4]
   2604c:	ldr	r0, [sp, #4]
   26050:	movw	r1, #0
   26054:	cmp	r0, r1
   26058:	beq	26074 <main@@Base+0x2cc0>
   2605c:	ldr	r0, [sp, #4]
   26060:	mvn	r1, #3
   26064:	add	r0, r0, r1
   26068:	bl	2386c <main@@Base+0x4b8>
   2606c:	str	r0, [sp]
   26070:	b	26080 <main@@Base+0x2ccc>
   26074:	movw	r0, #0
   26078:	str	r0, [sp]
   2607c:	b	26080 <main@@Base+0x2ccc>
   26080:	ldr	r0, [sp]
   26084:	mov	sp, fp
   26088:	pop	{fp, pc}
   2608c:	push	{fp, lr}
   26090:	mov	fp, sp
   26094:	sub	sp, sp, #8
   26098:	str	r0, [sp, #4]
   2609c:	ldr	r0, [sp, #4]
   260a0:	ldrb	r0, [r0]
   260a4:	bl	260b4 <main@@Base+0x2d00>
   260a8:	and	r0, r0, #255	; 0xff
   260ac:	mov	sp, fp
   260b0:	pop	{fp, pc}
   260b4:	sub	sp, sp, #4
   260b8:	strb	r0, [sp, #3]
   260bc:	ldrb	r0, [sp, #3]
   260c0:	add	sp, sp, #4
   260c4:	bx	lr
   260c8:	push	{fp, lr}
   260cc:	mov	fp, sp
   260d0:	sub	sp, sp, #8
   260d4:	str	r0, [sp, #4]
   260d8:	ldr	r0, [sp, #4]
   260dc:	ldrb	r0, [r0]
   260e0:	bl	260f0 <main@@Base+0x2d3c>
   260e4:	and	r0, r0, #255	; 0xff
   260e8:	mov	sp, fp
   260ec:	pop	{fp, pc}
   260f0:	sub	sp, sp, #4
   260f4:	strb	r0, [sp, #3]
   260f8:	ldrb	r0, [sp, #3]
   260fc:	add	sp, sp, #4
   26100:	bx	lr
   26104:	push	{fp, lr}
   26108:	mov	fp, sp
   2610c:	sub	sp, sp, #8
   26110:	str	r0, [sp, #4]
   26114:	str	r1, [sp]
   26118:	ldr	r0, [sp, #4]
   2611c:	ldr	r1, [sp]
   26120:	movw	r2, #0
   26124:	uxth	r2, r2
   26128:	movw	r3, #2
   2612c:	bl	29a3c <flatcc_builder_start_buffer@@Base>
   26130:	mov	sp, fp
   26134:	pop	{fp, pc}
   26138:	push	{fp, lr}
   2613c:	mov	fp, sp
   26140:	sub	sp, sp, #8
   26144:	str	r0, [sp, #4]
   26148:	strb	r1, [sp, #3]
   2614c:	ldrsb	r0, [sp, #3]
   26150:	bl	26168 <main@@Base+0x2db4>
   26154:	ldr	r1, [sp, #4]
   26158:	strb	r0, [r1]
   2615c:	ldr	r0, [sp, #4]
   26160:	mov	sp, fp
   26164:	pop	{fp, pc}
   26168:	sub	sp, sp, #4
   2616c:	strb	r0, [sp, #3]
   26170:	ldrsb	r0, [sp, #3]
   26174:	add	sp, sp, #4
   26178:	bx	lr
   2617c:	push	{fp, lr}
   26180:	mov	fp, sp
   26184:	sub	sp, sp, #16
   26188:	str	r0, [fp, #-4]
   2618c:	str	r1, [sp, #8]
   26190:	ldr	r0, [sp, #8]
   26194:	cmp	r0, #0
   26198:	beq	261d0 <main@@Base+0x2e1c>
   2619c:	ldr	r0, [fp, #-4]
   261a0:	movw	r1, #5
   261a4:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   261a8:	str	r0, [sp, #4]
   261ac:	movw	r1, #0
   261b0:	cmp	r0, r1
   261b4:	beq	261d0 <main@@Base+0x2e1c>
   261b8:	ldr	r0, [sp, #8]
   261bc:	ldr	r1, [sp, #4]
   261c0:	str	r0, [r1]
   261c4:	movw	r0, #0
   261c8:	str	r0, [sp]
   261cc:	b	261dc <main@@Base+0x2e28>
   261d0:	mvn	r0, #0
   261d4:	str	r0, [sp]
   261d8:	b	261dc <main@@Base+0x2e28>
   261dc:	ldr	r0, [sp]
   261e0:	mov	sp, fp
   261e4:	pop	{fp, pc}
   261e8:	push	{fp, lr}
   261ec:	mov	fp, sp
   261f0:	sub	sp, sp, #8
   261f4:	ldr	r3, [pc, #28]	; 26218 <main@@Base+0x2e64>
   261f8:	str	r0, [sp, #4]
   261fc:	ldr	r0, [sp, #4]
   26200:	movw	r1, #4
   26204:	movw	r2, #2
   26208:	uxth	r2, r2
   2620c:	bl	2acfc <flatcc_builder_start_vector@@Base>
   26210:	mov	sp, fp
   26214:	pop	{fp, pc}
   26218:	svccc	0x00ffffff
   2621c:	sub	sp, sp, #8
   26220:	str	r0, [sp, #4]
   26224:	strh	r1, [sp, #2]
   26228:	strb	r2, [sp, #1]
   2622c:	ldrh	r0, [sp, #2]
   26230:	ldr	r1, [sp, #4]
   26234:	strh	r0, [r1]
   26238:	ldrb	r0, [sp, #1]
   2623c:	ldr	r1, [sp, #4]
   26240:	strb	r0, [r1, #2]
   26244:	ldr	r0, [sp, #4]
   26248:	add	sp, sp, #8
   2624c:	bx	lr
   26250:	movw	r0, #4
   26254:	bx	lr
   26258:	push	{fp, lr}
   2625c:	mov	fp, sp
   26260:	sub	sp, sp, #16
   26264:	str	r0, [fp, #-4]
   26268:	str	r1, [sp, #8]
   2626c:	ldr	r0, [sp, #8]
   26270:	cmp	r0, #0
   26274:	beq	262ac <main@@Base+0x2ef8>
   26278:	ldr	r0, [fp, #-4]
   2627c:	movw	r1, #9
   26280:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   26284:	str	r0, [sp, #4]
   26288:	movw	r1, #0
   2628c:	cmp	r0, r1
   26290:	beq	262ac <main@@Base+0x2ef8>
   26294:	ldr	r0, [sp, #8]
   26298:	ldr	r1, [sp, #4]
   2629c:	str	r0, [r1]
   262a0:	movw	r0, #0
   262a4:	str	r0, [sp]
   262a8:	b	262b8 <main@@Base+0x2f04>
   262ac:	mvn	r0, #0
   262b0:	str	r0, [sp]
   262b4:	b	262b8 <main@@Base+0x2f04>
   262b8:	ldr	r0, [sp]
   262bc:	mov	sp, fp
   262c0:	pop	{fp, pc}
   262c4:	push	{fp, lr}
   262c8:	mov	fp, sp
   262cc:	sub	sp, sp, #8
   262d0:	str	r0, [sp, #4]
   262d4:	ldr	r0, [sp, #4]
   262d8:	bl	2c1f0 <flatcc_builder_end_vector@@Base>
   262dc:	mov	sp, fp
   262e0:	pop	{fp, pc}
   262e4:	push	{fp, lr}
   262e8:	mov	fp, sp
   262ec:	sub	sp, sp, #16
   262f0:	str	r0, [fp, #-4]
   262f4:	str	r1, [sp, #8]
   262f8:	ldr	r0, [sp, #8]
   262fc:	cmp	r0, #0
   26300:	beq	26318 <main@@Base+0x2f64>
   26304:	ldr	r0, [fp, #-4]
   26308:	ldr	r1, [sp, #8]
   2630c:	bl	2a5cc <flatcc_builder_offset_vector_push@@Base>
   26310:	str	r0, [sp, #4]
   26314:	b	26324 <main@@Base+0x2f70>
   26318:	movw	r0, #0
   2631c:	str	r0, [sp, #4]
   26320:	b	26324 <main@@Base+0x2f70>
   26324:	ldr	r0, [sp, #4]
   26328:	mov	sp, fp
   2632c:	pop	{fp, pc}
   26330:	push	{fp, lr}
   26334:	mov	fp, sp
   26338:	sub	sp, sp, #16
   2633c:	str	r0, [fp, #-4]
   26340:	str	r1, [sp, #8]
   26344:	ldr	r0, [sp, #8]
   26348:	cmp	r0, #0
   2634c:	beq	26384 <main@@Base+0x2fd0>
   26350:	ldr	r0, [fp, #-4]
   26354:	movw	r1, #11
   26358:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   2635c:	str	r0, [sp, #4]
   26360:	movw	r1, #0
   26364:	cmp	r0, r1
   26368:	beq	26384 <main@@Base+0x2fd0>
   2636c:	ldr	r0, [sp, #8]
   26370:	ldr	r1, [sp, #4]
   26374:	str	r0, [r1]
   26378:	movw	r0, #0
   2637c:	str	r0, [sp]
   26380:	b	26390 <main@@Base+0x2fdc>
   26384:	mvn	r0, #0
   26388:	str	r0, [sp]
   2638c:	b	26390 <main@@Base+0x2fdc>
   26390:	ldr	r0, [sp]
   26394:	mov	sp, fp
   26398:	pop	{fp, pc}
   2639c:	push	{fp, lr}
   263a0:	mov	fp, sp
   263a4:	sub	sp, sp, #16
   263a8:	str	r0, [fp, #-4]
   263ac:	str	r1, [sp, #8]
   263b0:	ldr	r0, [sp, #8]
   263b4:	cmp	r0, #0
   263b8:	beq	263f0 <main@@Base+0x303c>
   263bc:	ldr	r0, [fp, #-4]
   263c0:	movw	r1, #10
   263c4:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   263c8:	str	r0, [sp, #4]
   263cc:	movw	r1, #0
   263d0:	cmp	r0, r1
   263d4:	beq	263f0 <main@@Base+0x303c>
   263d8:	ldr	r0, [sp, #8]
   263dc:	ldr	r1, [sp, #4]
   263e0:	str	r0, [r1]
   263e4:	movw	r0, #0
   263e8:	str	r0, [sp]
   263ec:	b	263fc <main@@Base+0x3048>
   263f0:	mvn	r0, #0
   263f4:	str	r0, [sp]
   263f8:	b	263fc <main@@Base+0x3048>
   263fc:	ldr	r0, [sp]
   26400:	mov	sp, fp
   26404:	pop	{fp, pc}
   26408:	push	{fp, lr}
   2640c:	mov	fp, sp
   26410:	sub	sp, sp, #8
   26414:	str	r0, [sp, #4]
   26418:	ldr	r0, [sp, #4]
   2641c:	movw	r1, #1
   26420:	movw	r2, #1
   26424:	uxth	r2, r2
   26428:	mvn	r3, #0
   2642c:	bl	2acfc <flatcc_builder_start_vector@@Base>
   26430:	mov	sp, fp
   26434:	pop	{fp, pc}
   26438:	push	{fp, lr}
   2643c:	mov	fp, sp
   26440:	sub	sp, sp, #16
   26444:	str	r0, [fp, #-4]
   26448:	str	r1, [sp, #8]
   2644c:	ldr	r0, [sp, #8]
   26450:	cmp	r0, #0
   26454:	beq	2648c <main@@Base+0x30d8>
   26458:	ldr	r0, [fp, #-4]
   2645c:	movw	r1, #24
   26460:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   26464:	str	r0, [sp, #4]
   26468:	movw	r1, #0
   2646c:	cmp	r0, r1
   26470:	beq	2648c <main@@Base+0x30d8>
   26474:	ldr	r0, [sp, #8]
   26478:	ldr	r1, [sp, #4]
   2647c:	str	r0, [r1]
   26480:	movw	r0, #0
   26484:	str	r0, [sp]
   26488:	b	26498 <main@@Base+0x30e4>
   2648c:	mvn	r0, #0
   26490:	str	r0, [sp]
   26494:	b	26498 <main@@Base+0x30e4>
   26498:	ldr	r0, [sp]
   2649c:	mov	sp, fp
   264a0:	pop	{fp, pc}
   264a4:	push	{fp, lr}
   264a8:	mov	fp, sp
   264ac:	sub	sp, sp, #8
   264b0:	str	r0, [sp, #4]
   264b4:	ldr	r0, [sp, #4]
   264b8:	bl	2c1f0 <flatcc_builder_end_vector@@Base>
   264bc:	mov	sp, fp
   264c0:	pop	{fp, pc}
   264c4:	push	{fp, lr}
   264c8:	mov	fp, sp
   264cc:	sub	sp, sp, #16
   264d0:	str	r0, [fp, #-4]
   264d4:	str	r1, [sp, #8]
   264d8:	ldr	r0, [sp, #8]
   264dc:	cmp	r0, #0
   264e0:	beq	264f8 <main@@Base+0x3144>
   264e4:	ldr	r0, [fp, #-4]
   264e8:	ldr	r1, [sp, #8]
   264ec:	bl	2a5cc <flatcc_builder_offset_vector_push@@Base>
   264f0:	str	r0, [sp, #4]
   264f4:	b	26504 <main@@Base+0x3150>
   264f8:	movw	r0, #0
   264fc:	str	r0, [sp, #4]
   26500:	b	26504 <main@@Base+0x3150>
   26504:	ldr	r0, [sp, #4]
   26508:	mov	sp, fp
   2650c:	pop	{fp, pc}
   26510:	push	{fp, lr}
   26514:	mov	fp, sp
   26518:	sub	sp, sp, #8
   2651c:	str	r0, [sp, #4]
   26520:	strb	r1, [sp, #3]
   26524:	ldrb	r0, [sp, #3]
   26528:	bl	26540 <main@@Base+0x318c>
   2652c:	ldr	r1, [sp, #4]
   26530:	strb	r0, [r1]
   26534:	ldr	r0, [sp, #4]
   26538:	mov	sp, fp
   2653c:	pop	{fp, pc}
   26540:	sub	sp, sp, #4
   26544:	strb	r0, [sp, #3]
   26548:	ldrb	r0, [sp, #3]
   2654c:	add	sp, sp, #4
   26550:	bx	lr
   26554:	push	{fp, lr}
   26558:	mov	fp, sp
   2655c:	sub	sp, sp, #8
   26560:	str	r0, [sp, #4]
   26564:	ldr	r0, [sp, #4]
   26568:	movw	r1, #3
   2656c:	bl	2b170 <flatcc_builder_start_table@@Base>
   26570:	mov	sp, fp
   26574:	pop	{fp, pc}
   26578:	push	{fp, lr}
   2657c:	mov	fp, sp
   26580:	sub	sp, sp, #16
   26584:	str	r0, [fp, #-4]
   26588:	str	r1, [sp, #8]
   2658c:	ldr	r0, [sp, #8]
   26590:	cmp	r0, #0
   26594:	beq	265cc <main@@Base+0x3218>
   26598:	ldr	r0, [fp, #-4]
   2659c:	movw	r1, #14
   265a0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   265a4:	str	r0, [sp, #4]
   265a8:	movw	r1, #0
   265ac:	cmp	r0, r1
   265b0:	beq	265cc <main@@Base+0x3218>
   265b4:	ldr	r0, [sp, #8]
   265b8:	ldr	r1, [sp, #4]
   265bc:	str	r0, [r1]
   265c0:	movw	r0, #0
   265c4:	str	r0, [sp]
   265c8:	b	265d8 <main@@Base+0x3224>
   265cc:	mvn	r0, #0
   265d0:	str	r0, [sp]
   265d4:	b	265d8 <main@@Base+0x3224>
   265d8:	ldr	r0, [sp]
   265dc:	mov	sp, fp
   265e0:	pop	{fp, pc}
   265e4:	push	{fp, lr}
   265e8:	mov	fp, sp
   265ec:	sub	sp, sp, #8
   265f0:	ldr	r1, [pc, #76]	; 26644 <main@@Base+0x3290>
   265f4:	add	r1, pc, r1
   265f8:	str	r0, [sp, #4]
   265fc:	ldr	r0, [sp, #4]
   26600:	movw	r2, #0
   26604:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   26608:	cmp	r0, #0
   2660c:	beq	26614 <main@@Base+0x3260>
   26610:	b	26634 <main@@Base+0x3280>
   26614:	ldr	r0, [pc, #44]	; 26648 <main@@Base+0x3294>
   26618:	add	r0, pc, r0
   2661c:	ldr	r1, [pc, #40]	; 2664c <main@@Base+0x3298>
   26620:	add	r1, pc, r1
   26624:	ldr	r2, [pc, #36]	; 26650 <main@@Base+0x329c>
   26628:	add	r3, pc, r2
   2662c:	movw	r2, #221	; 0xdd
   26630:	bl	12e68 <__assert_fail@plt>
   26634:	ldr	r0, [sp, #4]
   26638:	bl	2bde8 <flatcc_builder_end_table@@Base>
   2663c:	mov	sp, fp
   26640:	pop	{fp, pc}
   26644:	andeq	r0, r1, sl, lsl #1
   26648:	andeq	pc, r0, pc, ror r0	; <UNPREDICTABLE>
   2664c:	andeq	lr, r0, r3, asr #2
   26650:	andeq	pc, r0, r8, lsl #2
   26654:	push	{fp, lr}
   26658:	mov	fp, sp
   2665c:	sub	sp, sp, #32
   26660:	str	r0, [fp, #-4]
   26664:	ldr	r0, [fp, #-4]
   26668:	bl	17824 <verify_monster@@Base+0x1dd0>
   2666c:	str	r0, [sp, #16]
   26670:	ldr	r0, [sp, #16]
   26674:	cmp	r0, #0
   26678:	bne	26680 <main@@Base+0x32cc>
   2667c:	b	2675c <main@@Base+0x33a8>
   26680:	ldr	r0, [sp, #16]
   26684:	sub	r0, r0, #1
   26688:	str	r0, [fp, #-12]
   2668c:	ldr	r0, [sp, #16]
   26690:	lsr	r0, r0, #1
   26694:	str	r0, [fp, #-8]
   26698:	ldr	r0, [fp, #-4]
   2669c:	ldr	r1, [fp, #-8]
   266a0:	ldr	r2, [fp, #-12]
   266a4:	bl	26764 <main@@Base+0x33b0>
   266a8:	ldr	r0, [fp, #-8]
   266ac:	mvn	r1, #0
   266b0:	add	r1, r0, r1
   266b4:	str	r1, [fp, #-8]
   266b8:	cmp	r0, #0
   266bc:	bne	26698 <main@@Base+0x32e4>
   266c0:	b	266c4 <main@@Base+0x3310>
   266c4:	ldr	r0, [fp, #-12]
   266c8:	cmp	r0, #0
   266cc:	bls	2675c <main@@Base+0x33a8>
   266d0:	ldr	r0, [fp, #-12]
   266d4:	rsb	r0, r0, #0
   266d8:	lsl	r0, r0, #2
   266dc:	str	r0, [sp, #4]
   266e0:	ldr	r0, [fp, #-4]
   266e4:	ldr	r1, [fp, #-12]
   266e8:	add	r0, r0, r1, lsl #2
   266ec:	bl	2386c <main@@Base+0x4b8>
   266f0:	ldr	r1, [sp, #4]
   266f4:	sub	r0, r0, r1
   266f8:	str	r0, [sp, #12]
   266fc:	ldr	r0, [fp, #-4]
   26700:	bl	2386c <main@@Base+0x4b8>
   26704:	ldr	r1, [sp, #4]
   26708:	add	r0, r0, r1
   2670c:	str	r0, [sp, #8]
   26710:	ldr	r0, [fp, #-4]
   26714:	ldr	r1, [sp, #12]
   26718:	bl	26920 <main@@Base+0x356c>
   2671c:	ldr	r0, [fp, #-4]
   26720:	ldr	r1, [fp, #-12]
   26724:	add	r0, r0, r1, lsl #2
   26728:	ldr	r1, [sp, #8]
   2672c:	bl	26920 <main@@Base+0x356c>
   26730:	ldr	r0, [fp, #-4]
   26734:	ldr	r1, [fp, #-12]
   26738:	mvn	lr, #0
   2673c:	add	r1, r1, lr
   26740:	str	r1, [fp, #-12]
   26744:	movw	lr, #0
   26748:	str	r1, [sp]
   2674c:	mov	r1, lr
   26750:	ldr	r2, [sp]
   26754:	bl	26764 <main@@Base+0x33b0>
   26758:	b	266c4 <main@@Base+0x3310>
   2675c:	mov	sp, fp
   26760:	pop	{fp, pc}
   26764:	push	{fp, lr}
   26768:	mov	fp, sp
   2676c:	sub	sp, sp, #72	; 0x48
   26770:	str	r0, [fp, #-4]
   26774:	str	r1, [fp, #-8]
   26778:	str	r2, [fp, #-12]
   2677c:	ldr	r0, [fp, #-8]
   26780:	str	r0, [fp, #-20]	; 0xffffffec
   26784:	ldr	r0, [fp, #-20]	; 0xffffffec
   26788:	lsl	r0, r0, #1
   2678c:	ldr	r1, [fp, #-12]
   26790:	cmp	r0, r1
   26794:	bhi	26918 <main@@Base+0x3564>
   26798:	ldr	r0, [fp, #-20]	; 0xffffffec
   2679c:	lsl	r0, r0, #1
   267a0:	str	r0, [fp, #-16]
   267a4:	ldr	r0, [fp, #-16]
   267a8:	ldr	r1, [fp, #-12]
   267ac:	cmp	r0, r1
   267b0:	bcs	2682c <main@@Base+0x3478>
   267b4:	ldr	r0, [fp, #-4]
   267b8:	ldr	r1, [fp, #-16]
   267bc:	bl	17874 <verify_monster@@Base+0x1e20>
   267c0:	bl	16d54 <verify_monster@@Base+0x1300>
   267c4:	str	r0, [fp, #-24]	; 0xffffffe8
   267c8:	ldr	r0, [fp, #-4]
   267cc:	ldr	r1, [fp, #-16]
   267d0:	add	r1, r1, #1
   267d4:	bl	17874 <verify_monster@@Base+0x1e20>
   267d8:	bl	16d54 <verify_monster@@Base+0x1300>
   267dc:	str	r0, [fp, #-28]	; 0xffffffe4
   267e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   267e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   267e8:	ldr	lr, [fp, #-28]	; 0xffffffe4
   267ec:	str	r0, [sp, #24]
   267f0:	mov	r0, lr
   267f4:	str	r1, [sp, #20]
   267f8:	bl	16e74 <verify_monster@@Base+0x1420>
   267fc:	ldr	r1, [sp, #24]
   26800:	str	r0, [sp, #16]
   26804:	mov	r0, r1
   26808:	ldr	r1, [sp, #20]
   2680c:	ldr	r2, [sp, #16]
   26810:	bl	2694c <main@@Base+0x3598>
   26814:	cmp	r0, #0
   26818:	bge	26828 <main@@Base+0x3474>
   2681c:	ldr	r0, [fp, #-16]
   26820:	add	r0, r0, #1
   26824:	str	r0, [fp, #-16]
   26828:	b	2682c <main@@Base+0x3478>
   2682c:	ldr	r0, [fp, #-4]
   26830:	ldr	r1, [fp, #-20]	; 0xffffffec
   26834:	bl	17874 <verify_monster@@Base+0x1e20>
   26838:	bl	16d54 <verify_monster@@Base+0x1300>
   2683c:	str	r0, [fp, #-32]	; 0xffffffe0
   26840:	ldr	r0, [fp, #-4]
   26844:	ldr	r1, [fp, #-16]
   26848:	bl	17874 <verify_monster@@Base+0x1e20>
   2684c:	bl	16d54 <verify_monster@@Base+0x1300>
   26850:	str	r0, [fp, #-24]	; 0xffffffe8
   26854:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26858:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2685c:	ldr	lr, [fp, #-24]	; 0xffffffe8
   26860:	str	r0, [sp, #12]
   26864:	mov	r0, lr
   26868:	str	r1, [sp, #8]
   2686c:	bl	16e74 <verify_monster@@Base+0x1420>
   26870:	ldr	r1, [sp, #12]
   26874:	str	r0, [sp, #4]
   26878:	mov	r0, r1
   2687c:	ldr	r1, [sp, #8]
   26880:	ldr	r2, [sp, #4]
   26884:	bl	2694c <main@@Base+0x3598>
   26888:	cmp	r0, #0
   2688c:	bge	26910 <main@@Base+0x355c>
   26890:	ldr	r0, [fp, #-20]	; 0xffffffec
   26894:	ldr	r1, [fp, #-16]
   26898:	sub	r0, r0, r1
   2689c:	lsl	r0, r0, #2
   268a0:	str	r0, [sp, #28]
   268a4:	ldr	r0, [fp, #-4]
   268a8:	ldr	r1, [fp, #-16]
   268ac:	add	r0, r0, r1, lsl #2
   268b0:	bl	2386c <main@@Base+0x4b8>
   268b4:	ldr	r1, [sp, #28]
   268b8:	sub	r0, r0, r1
   268bc:	str	r0, [sp, #36]	; 0x24
   268c0:	ldr	r0, [fp, #-4]
   268c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   268c8:	add	r0, r0, r1, lsl #2
   268cc:	bl	2386c <main@@Base+0x4b8>
   268d0:	ldr	r1, [sp, #28]
   268d4:	add	r0, r0, r1
   268d8:	str	r0, [sp, #32]
   268dc:	ldr	r0, [fp, #-4]
   268e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   268e4:	add	r0, r0, r1, lsl #2
   268e8:	ldr	r1, [sp, #36]	; 0x24
   268ec:	bl	26920 <main@@Base+0x356c>
   268f0:	ldr	r0, [fp, #-4]
   268f4:	ldr	r1, [fp, #-16]
   268f8:	add	r0, r0, r1, lsl #2
   268fc:	ldr	r1, [sp, #32]
   26900:	bl	26920 <main@@Base+0x356c>
   26904:	ldr	r0, [fp, #-16]
   26908:	str	r0, [fp, #-20]	; 0xffffffec
   2690c:	b	26914 <main@@Base+0x3560>
   26910:	b	26918 <main@@Base+0x3564>
   26914:	b	26784 <main@@Base+0x33d0>
   26918:	mov	sp, fp
   2691c:	pop	{fp, pc}
   26920:	push	{fp, lr}
   26924:	mov	fp, sp
   26928:	sub	sp, sp, #8
   2692c:	str	r0, [sp, #4]
   26930:	str	r1, [sp]
   26934:	ldr	r0, [sp]
   26938:	bl	26a28 <main@@Base+0x3674>
   2693c:	ldr	r1, [sp, #4]
   26940:	str	r0, [r1]
   26944:	mov	sp, fp
   26948:	pop	{fp, pc}
   2694c:	push	{fp, lr}
   26950:	mov	fp, sp
   26954:	sub	sp, sp, #48	; 0x30
   26958:	str	r0, [fp, #-4]
   2695c:	str	r1, [fp, #-8]
   26960:	str	r2, [fp, #-12]
   26964:	ldr	r0, [fp, #-4]
   26968:	bl	16e74 <verify_monster@@Base+0x1420>
   2696c:	str	r0, [fp, #-16]
   26970:	ldr	r0, [fp, #-4]
   26974:	ldr	r1, [fp, #-8]
   26978:	ldr	r2, [fp, #-16]
   2697c:	ldr	lr, [fp, #-12]
   26980:	cmp	r2, lr
   26984:	str	r0, [sp, #24]
   26988:	str	r1, [sp, #20]
   2698c:	bcs	2699c <main@@Base+0x35e8>
   26990:	ldr	r0, [fp, #-16]
   26994:	str	r0, [sp, #16]
   26998:	b	269a4 <main@@Base+0x35f0>
   2699c:	ldr	r0, [fp, #-12]
   269a0:	str	r0, [sp, #16]
   269a4:	ldr	r0, [sp, #16]
   269a8:	ldr	r1, [sp, #24]
   269ac:	str	r0, [sp, #12]
   269b0:	mov	r0, r1
   269b4:	ldr	r1, [sp, #20]
   269b8:	ldr	r2, [sp, #12]
   269bc:	bl	12e50 <strncmp@plt>
   269c0:	str	r0, [fp, #-20]	; 0xffffffec
   269c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   269c8:	cmp	r0, #0
   269cc:	beq	269dc <main@@Base+0x3628>
   269d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   269d4:	str	r0, [sp, #8]
   269d8:	b	26a1c <main@@Base+0x3668>
   269dc:	ldr	r0, [fp, #-16]
   269e0:	ldr	r1, [fp, #-12]
   269e4:	cmp	r0, r1
   269e8:	bcs	269f8 <main@@Base+0x3644>
   269ec:	mvn	r0, #0
   269f0:	str	r0, [sp, #4]
   269f4:	b	26a14 <main@@Base+0x3660>
   269f8:	ldr	r0, [fp, #-16]
   269fc:	ldr	r1, [fp, #-12]
   26a00:	cmp	r0, r1
   26a04:	movw	r0, #0
   26a08:	movhi	r0, #1
   26a0c:	and	r0, r0, #1
   26a10:	str	r0, [sp, #4]
   26a14:	ldr	r0, [sp, #4]
   26a18:	str	r0, [sp, #8]
   26a1c:	ldr	r0, [sp, #8]
   26a20:	mov	sp, fp
   26a24:	pop	{fp, pc}
   26a28:	sub	sp, sp, #4
   26a2c:	str	r0, [sp]
   26a30:	ldr	r0, [sp]
   26a34:	add	sp, sp, #4
   26a38:	bx	lr
   26a3c:	push	{fp, lr}
   26a40:	mov	fp, sp
   26a44:	sub	sp, sp, #16
   26a48:	str	r0, [fp, #-4]
   26a4c:	str	r1, [sp, #8]
   26a50:	str	r2, [sp, #4]
   26a54:	ldr	r0, [fp, #-4]
   26a58:	ldr	r1, [sp, #8]
   26a5c:	bl	12d90 <strcmp@plt>
   26a60:	mov	sp, fp
   26a64:	pop	{fp, pc}
   26a68:	push	{fp, lr}
   26a6c:	mov	fp, sp
   26a70:	sub	sp, sp, #32
   26a74:	str	r0, [fp, #-8]
   26a78:	str	r1, [fp, #-12]
   26a7c:	str	r2, [sp, #16]
   26a80:	movw	r0, #0
   26a84:	str	r0, [sp, #8]
   26a88:	ldr	r0, [sp, #8]
   26a8c:	ldr	r1, [fp, #-8]
   26a90:	str	r0, [sp, #4]
   26a94:	mov	r0, r1
   26a98:	bl	17824 <verify_monster@@Base+0x1dd0>
   26a9c:	ldr	r1, [sp, #4]
   26aa0:	cmp	r1, r0
   26aa4:	bcs	26af4 <main@@Base+0x3740>
   26aa8:	ldr	r0, [fp, #-8]
   26aac:	ldr	r1, [sp, #8]
   26ab0:	bl	17874 <verify_monster@@Base+0x1e20>
   26ab4:	bl	16d54 <verify_monster@@Base+0x1300>
   26ab8:	str	r0, [sp, #12]
   26abc:	ldr	r0, [sp, #12]
   26ac0:	ldr	r1, [fp, #-12]
   26ac4:	ldr	r2, [sp, #16]
   26ac8:	bl	2694c <main@@Base+0x3598>
   26acc:	cmp	r0, #0
   26ad0:	bne	26ae0 <main@@Base+0x372c>
   26ad4:	ldr	r0, [sp, #8]
   26ad8:	str	r0, [fp, #-4]
   26adc:	b	26b04 <main@@Base+0x3750>
   26ae0:	b	26ae4 <main@@Base+0x3730>
   26ae4:	ldr	r0, [sp, #8]
   26ae8:	add	r0, r0, #1
   26aec:	str	r0, [sp, #8]
   26af0:	b	26a88 <main@@Base+0x36d4>
   26af4:	ldr	r0, [pc, #20]	; 26b10 <main@@Base+0x375c>
   26af8:	add	r0, pc, r0
   26afc:	ldr	r0, [r0]
   26b00:	str	r0, [fp, #-4]
   26b04:	ldr	r0, [fp, #-4]
   26b08:	mov	sp, fp
   26b0c:	pop	{fp, pc}
   26b10:	andeq	r2, r2, r4, ror r5
   26b14:	push	{fp, lr}
   26b18:	mov	fp, sp
   26b1c:	sub	sp, sp, #24
   26b20:	str	r0, [fp, #-4]
   26b24:	ldr	r0, [fp, #-4]
   26b28:	bl	17258 <verify_monster@@Base+0x1804>
   26b2c:	str	r0, [sp, #8]
   26b30:	ldr	r0, [sp, #8]
   26b34:	cmp	r0, #0
   26b38:	bne	26b40 <main@@Base+0x378c>
   26b3c:	b	26bf4 <main@@Base+0x3840>
   26b40:	ldr	r0, [sp, #8]
   26b44:	sub	r0, r0, #1
   26b48:	str	r0, [sp, #12]
   26b4c:	ldr	r0, [sp, #8]
   26b50:	lsr	r0, r0, #1
   26b54:	str	r0, [fp, #-8]
   26b58:	ldr	r0, [fp, #-4]
   26b5c:	ldr	r1, [fp, #-8]
   26b60:	ldr	r2, [sp, #12]
   26b64:	bl	26bfc <main@@Base+0x3848>
   26b68:	ldr	r0, [fp, #-8]
   26b6c:	mvn	r1, #0
   26b70:	add	r1, r0, r1
   26b74:	str	r1, [fp, #-8]
   26b78:	cmp	r0, #0
   26b7c:	bne	26b58 <main@@Base+0x37a4>
   26b80:	b	26b84 <main@@Base+0x37d0>
   26b84:	ldr	r0, [sp, #12]
   26b88:	cmp	r0, #0
   26b8c:	bls	26bf4 <main@@Base+0x3840>
   26b90:	ldr	r0, [fp, #-4]
   26b94:	ldr	r1, [sp, #12]
   26b98:	add	r0, r0, r1
   26b9c:	ldrb	r0, [r0]
   26ba0:	strb	r0, [sp, #7]
   26ba4:	ldr	r0, [fp, #-4]
   26ba8:	ldrb	r0, [r0]
   26bac:	ldr	r1, [fp, #-4]
   26bb0:	ldr	r2, [sp, #12]
   26bb4:	add	r1, r1, r2
   26bb8:	strb	r0, [r1]
   26bbc:	ldrb	r0, [sp, #7]
   26bc0:	ldr	r1, [fp, #-4]
   26bc4:	strb	r0, [r1]
   26bc8:	ldr	r0, [fp, #-4]
   26bcc:	ldr	r1, [sp, #12]
   26bd0:	mvn	r2, #0
   26bd4:	add	r1, r1, r2
   26bd8:	str	r1, [sp, #12]
   26bdc:	movw	r2, #0
   26be0:	str	r1, [sp]
   26be4:	mov	r1, r2
   26be8:	ldr	r2, [sp]
   26bec:	bl	26bfc <main@@Base+0x3848>
   26bf0:	b	26b84 <main@@Base+0x37d0>
   26bf4:	mov	sp, fp
   26bf8:	pop	{fp, pc}
   26bfc:	push	{fp, lr}
   26c00:	mov	fp, sp
   26c04:	sub	sp, sp, #32
   26c08:	str	r0, [fp, #-4]
   26c0c:	str	r1, [fp, #-8]
   26c10:	str	r2, [fp, #-12]
   26c14:	ldr	r0, [fp, #-8]
   26c18:	str	r0, [sp, #12]
   26c1c:	ldr	r0, [sp, #12]
   26c20:	lsl	r0, r0, #1
   26c24:	ldr	r1, [fp, #-12]
   26c28:	cmp	r0, r1
   26c2c:	bhi	26d84 <main@@Base+0x39d0>
   26c30:	ldr	r0, [sp, #12]
   26c34:	lsl	r0, r0, #1
   26c38:	str	r0, [sp, #16]
   26c3c:	ldr	r0, [sp, #16]
   26c40:	ldr	r1, [fp, #-12]
   26c44:	cmp	r0, r1
   26c48:	bcs	26cc4 <main@@Base+0x3910>
   26c4c:	ldr	r0, [fp, #-4]
   26c50:	ldr	r1, [sp, #16]
   26c54:	bl	17278 <verify_monster@@Base+0x1824>
   26c58:	strb	r0, [sp, #11]
   26c5c:	ldr	r0, [fp, #-4]
   26c60:	ldr	r1, [sp, #16]
   26c64:	add	r1, r1, #1
   26c68:	bl	17278 <verify_monster@@Base+0x1824>
   26c6c:	strb	r0, [sp, #10]
   26c70:	ldrb	r0, [sp, #11]
   26c74:	ldrb	r1, [sp, #10]
   26c78:	cmp	r0, r1
   26c7c:	bge	26c8c <main@@Base+0x38d8>
   26c80:	mvn	r0, #0
   26c84:	str	r0, [sp, #4]
   26c88:	b	26ca8 <main@@Base+0x38f4>
   26c8c:	ldrb	r0, [sp, #11]
   26c90:	ldrb	r1, [sp, #10]
   26c94:	cmp	r0, r1
   26c98:	movw	r0, #0
   26c9c:	movgt	r0, #1
   26ca0:	and	r0, r0, #1
   26ca4:	str	r0, [sp, #4]
   26ca8:	ldr	r0, [sp, #4]
   26cac:	cmp	r0, #0
   26cb0:	bge	26cc0 <main@@Base+0x390c>
   26cb4:	ldr	r0, [sp, #16]
   26cb8:	add	r0, r0, #1
   26cbc:	str	r0, [sp, #16]
   26cc0:	b	26cc4 <main@@Base+0x3910>
   26cc4:	ldr	r0, [fp, #-4]
   26cc8:	ldr	r1, [sp, #12]
   26ccc:	bl	17278 <verify_monster@@Base+0x1824>
   26cd0:	strb	r0, [sp, #9]
   26cd4:	ldr	r0, [fp, #-4]
   26cd8:	ldr	r1, [sp, #16]
   26cdc:	bl	17278 <verify_monster@@Base+0x1824>
   26ce0:	strb	r0, [sp, #11]
   26ce4:	ldrb	r0, [sp, #9]
   26ce8:	ldrb	r1, [sp, #11]
   26cec:	cmp	r0, r1
   26cf0:	bge	26d00 <main@@Base+0x394c>
   26cf4:	mvn	r0, #0
   26cf8:	str	r0, [sp]
   26cfc:	b	26d1c <main@@Base+0x3968>
   26d00:	ldrb	r0, [sp, #9]
   26d04:	ldrb	r1, [sp, #11]
   26d08:	cmp	r0, r1
   26d0c:	movw	r0, #0
   26d10:	movgt	r0, #1
   26d14:	and	r0, r0, #1
   26d18:	str	r0, [sp]
   26d1c:	ldr	r0, [sp]
   26d20:	cmp	r0, #0
   26d24:	bge	26d7c <main@@Base+0x39c8>
   26d28:	ldr	r0, [fp, #-4]
   26d2c:	ldr	r1, [sp, #16]
   26d30:	add	r0, r0, r1
   26d34:	ldrb	r0, [r0]
   26d38:	strb	r0, [sp, #8]
   26d3c:	ldr	r0, [fp, #-4]
   26d40:	ldr	r1, [sp, #12]
   26d44:	add	r0, r0, r1
   26d48:	ldrb	r0, [r0]
   26d4c:	ldr	r1, [fp, #-4]
   26d50:	ldr	r2, [sp, #16]
   26d54:	add	r1, r1, r2
   26d58:	strb	r0, [r1]
   26d5c:	ldrb	r0, [sp, #8]
   26d60:	ldr	r1, [fp, #-4]
   26d64:	ldr	r2, [sp, #12]
   26d68:	add	r1, r1, r2
   26d6c:	strb	r0, [r1]
   26d70:	ldr	r0, [sp, #16]
   26d74:	str	r0, [sp, #12]
   26d78:	b	26d80 <main@@Base+0x39cc>
   26d7c:	b	26d84 <main@@Base+0x39d0>
   26d80:	b	26c1c <main@@Base+0x3868>
   26d84:	mov	sp, fp
   26d88:	pop	{fp, pc}
   26d8c:	push	{fp, lr}
   26d90:	mov	fp, sp
   26d94:	sub	sp, sp, #24
   26d98:	str	r0, [fp, #-4]
   26d9c:	str	r1, [fp, #-8]
   26da0:	str	r2, [sp, #12]
   26da4:	ldr	r0, [fp, #-4]
   26da8:	ldr	r1, [fp, #-8]
   26dac:	ldr	r2, [sp, #12]
   26db0:	movw	r3, #1
   26db4:	movw	ip, #1
   26db8:	uxth	ip, ip
   26dbc:	str	ip, [sp]
   26dc0:	mvn	ip, #0
   26dc4:	str	ip, [sp, #4]
   26dc8:	bl	2c01c <flatcc_builder_create_vector@@Base>
   26dcc:	mov	sp, fp
   26dd0:	pop	{fp, pc}
   26dd4:	push	{fp, lr}
   26dd8:	mov	fp, sp
   26ddc:	sub	sp, sp, #24
   26de0:	str	r0, [fp, #-4]
   26de4:	str	r1, [fp, #-8]
   26de8:	ldr	r0, [fp, #-4]
   26dec:	ldr	r1, [fp, #-8]
   26df0:	ldr	r2, [fp, #-8]
   26df4:	str	r0, [sp, #12]
   26df8:	mov	r0, r2
   26dfc:	str	r1, [sp, #8]
   26e00:	bl	16e74 <verify_monster@@Base+0x1420>
   26e04:	ldr	r1, [sp, #12]
   26e08:	str	r0, [sp, #4]
   26e0c:	mov	r0, r1
   26e10:	ldr	r1, [sp, #8]
   26e14:	ldr	r2, [sp, #4]
   26e18:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   26e1c:	mov	sp, fp
   26e20:	pop	{fp, pc}
   26e24:	push	{fp, lr}
   26e28:	mov	fp, sp
   26e2c:	sub	sp, sp, #16
   26e30:	str	r0, [fp, #-4]
   26e34:	str	r1, [sp, #8]
   26e38:	ldr	r0, [sp, #8]
   26e3c:	cmp	r0, #0
   26e40:	beq	26e58 <main@@Base+0x3aa4>
   26e44:	ldr	r0, [fp, #-4]
   26e48:	ldr	r1, [sp, #8]
   26e4c:	bl	2a5cc <flatcc_builder_offset_vector_push@@Base>
   26e50:	str	r0, [sp, #4]
   26e54:	b	26e64 <main@@Base+0x3ab0>
   26e58:	movw	r0, #0
   26e5c:	str	r0, [sp, #4]
   26e60:	b	26e64 <main@@Base+0x3ab0>
   26e64:	ldr	r0, [sp, #4]
   26e68:	mov	sp, fp
   26e6c:	pop	{fp, pc}
   26e70:	push	{fp, lr}
   26e74:	mov	fp, sp
   26e78:	sub	sp, sp, #24
   26e7c:	str	r0, [fp, #-4]
   26e80:	str	r1, [fp, #-8]
   26e84:	str	r2, [sp, #12]
   26e88:	str	r3, [sp, #8]
   26e8c:	ldr	r0, [fp, #-8]
   26e90:	bl	16e74 <verify_monster@@Base+0x1420>
   26e94:	str	r0, [sp, #4]
   26e98:	ldr	r0, [sp, #12]
   26e9c:	ldr	r1, [sp, #4]
   26ea0:	cmp	r0, r1
   26ea4:	bcc	26eb0 <main@@Base+0x3afc>
   26ea8:	ldr	r0, [sp, #4]
   26eac:	str	r0, [sp, #12]
   26eb0:	ldr	r0, [sp, #12]
   26eb4:	ldr	r1, [sp, #4]
   26eb8:	sub	r0, r1, r0
   26ebc:	str	r0, [sp, #4]
   26ec0:	ldr	r0, [sp, #8]
   26ec4:	ldr	r1, [sp, #4]
   26ec8:	cmp	r0, r1
   26ecc:	bls	26ed8 <main@@Base+0x3b24>
   26ed0:	ldr	r0, [sp, #4]
   26ed4:	str	r0, [sp, #8]
   26ed8:	ldr	r0, [fp, #-4]
   26edc:	ldr	r1, [fp, #-8]
   26ee0:	ldr	r2, [sp, #12]
   26ee4:	add	r1, r1, r2
   26ee8:	ldr	r2, [sp, #8]
   26eec:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   26ef0:	mov	sp, fp
   26ef4:	pop	{fp, pc}
   26ef8:	push	{fp, lr}
   26efc:	mov	fp, sp
   26f00:	sub	sp, sp, #32
   26f04:	str	r0, [fp, #-4]
   26f08:	str	r1, [fp, #-8]
   26f0c:	ldr	r0, [fp, #-4]
   26f10:	ldr	r1, [fp, #-8]
   26f14:	ldr	r2, [fp, #-8]
   26f18:	str	r0, [fp, #-12]
   26f1c:	mov	r0, r2
   26f20:	str	r1, [sp, #16]
   26f24:	bl	17cc4 <verify_monster@@Base+0x2270>
   26f28:	ldr	r1, [fp, #-12]
   26f2c:	str	r0, [sp, #12]
   26f30:	mov	r0, r1
   26f34:	ldr	r1, [sp, #16]
   26f38:	ldr	r2, [sp, #12]
   26f3c:	movw	r3, #1
   26f40:	movw	lr, #1
   26f44:	uxth	lr, lr
   26f48:	str	lr, [sp]
   26f4c:	mvn	lr, #0
   26f50:	str	lr, [sp, #4]
   26f54:	bl	2c01c <flatcc_builder_create_vector@@Base>
   26f58:	mov	sp, fp
   26f5c:	pop	{fp, pc}
   26f60:	push	{fp, lr}
   26f64:	mov	fp, sp
   26f68:	sub	sp, sp, #40	; 0x28
   26f6c:	str	r0, [fp, #-4]
   26f70:	str	r1, [fp, #-8]
   26f74:	str	r2, [fp, #-12]
   26f78:	str	r3, [fp, #-16]
   26f7c:	ldr	r0, [fp, #-8]
   26f80:	bl	175b8 <verify_monster@@Base+0x1b64>
   26f84:	str	r0, [sp, #20]
   26f88:	ldr	r0, [fp, #-12]
   26f8c:	ldr	r1, [sp, #20]
   26f90:	cmp	r0, r1
   26f94:	bcc	26fa0 <main@@Base+0x3bec>
   26f98:	ldr	r0, [sp, #20]
   26f9c:	str	r0, [fp, #-12]
   26fa0:	ldr	r0, [fp, #-12]
   26fa4:	ldr	r1, [sp, #20]
   26fa8:	sub	r0, r1, r0
   26fac:	str	r0, [sp, #20]
   26fb0:	ldr	r0, [fp, #-16]
   26fb4:	ldr	r1, [sp, #20]
   26fb8:	cmp	r0, r1
   26fbc:	bls	26fc8 <main@@Base+0x3c14>
   26fc0:	ldr	r0, [sp, #20]
   26fc4:	str	r0, [fp, #-16]
   26fc8:	ldr	r0, [fp, #-4]
   26fcc:	ldr	r1, [fp, #-8]
   26fd0:	ldr	r2, [fp, #-12]
   26fd4:	str	r0, [sp, #16]
   26fd8:	mov	r0, r1
   26fdc:	mov	r1, r2
   26fe0:	bl	2702c <main@@Base+0x3c78>
   26fe4:	ldr	r1, [pc, #60]	; 27028 <main@@Base+0x3c74>
   26fe8:	ldr	r2, [fp, #-16]
   26fec:	ldr	lr, [sp, #16]
   26ff0:	str	r0, [sp, #12]
   26ff4:	mov	r0, lr
   26ff8:	ldr	r3, [sp, #12]
   26ffc:	str	r1, [sp, #8]
   27000:	mov	r1, r3
   27004:	movw	r3, #4
   27008:	movw	ip, #2
   2700c:	uxth	ip, ip
   27010:	str	ip, [sp]
   27014:	ldr	ip, [sp, #8]
   27018:	str	ip, [sp, #4]
   2701c:	bl	2c01c <flatcc_builder_create_vector@@Base>
   27020:	mov	sp, fp
   27024:	pop	{fp, pc}
   27028:	svccc	0x00ffffff
   2702c:	sub	sp, sp, #8
   27030:	str	r0, [sp, #4]
   27034:	str	r1, [sp]
   27038:	ldr	r0, [sp, #4]
   2703c:	ldr	r1, [sp]
   27040:	add	r0, r0, r1, lsl #2
   27044:	add	sp, sp, #8
   27048:	bx	lr
   2704c:	push	{fp, lr}
   27050:	mov	fp, sp
   27054:	sub	sp, sp, #40	; 0x28
   27058:	str	r0, [fp, #-4]
   2705c:	str	r1, [fp, #-8]
   27060:	str	r2, [fp, #-12]
   27064:	str	r3, [fp, #-16]
   27068:	ldr	r0, [fp, #-8]
   2706c:	bl	17cc4 <verify_monster@@Base+0x2270>
   27070:	str	r0, [sp, #20]
   27074:	ldr	r0, [fp, #-12]
   27078:	ldr	r1, [sp, #20]
   2707c:	cmp	r0, r1
   27080:	bcc	2708c <main@@Base+0x3cd8>
   27084:	ldr	r0, [sp, #20]
   27088:	str	r0, [fp, #-12]
   2708c:	ldr	r0, [fp, #-12]
   27090:	ldr	r1, [sp, #20]
   27094:	sub	r0, r1, r0
   27098:	str	r0, [sp, #20]
   2709c:	ldr	r0, [fp, #-16]
   270a0:	ldr	r1, [sp, #20]
   270a4:	cmp	r0, r1
   270a8:	bls	270b4 <main@@Base+0x3d00>
   270ac:	ldr	r0, [sp, #20]
   270b0:	str	r0, [fp, #-16]
   270b4:	ldr	r0, [fp, #-4]
   270b8:	ldr	r1, [fp, #-8]
   270bc:	ldr	r2, [fp, #-12]
   270c0:	str	r0, [sp, #16]
   270c4:	mov	r0, r1
   270c8:	mov	r1, r2
   270cc:	bl	27108 <main@@Base+0x3d54>
   270d0:	ldr	r2, [fp, #-16]
   270d4:	ldr	r1, [sp, #16]
   270d8:	str	r0, [sp, #12]
   270dc:	mov	r0, r1
   270e0:	ldr	r1, [sp, #12]
   270e4:	movw	r3, #1
   270e8:	movw	lr, #1
   270ec:	uxth	lr, lr
   270f0:	str	lr, [sp]
   270f4:	mvn	lr, #0
   270f8:	str	lr, [sp, #4]
   270fc:	bl	2c01c <flatcc_builder_create_vector@@Base>
   27100:	mov	sp, fp
   27104:	pop	{fp, pc}
   27108:	sub	sp, sp, #8
   2710c:	str	r0, [sp, #4]
   27110:	str	r1, [sp]
   27114:	ldr	r0, [sp, #4]
   27118:	ldr	r1, [sp]
   2711c:	add	r0, r0, r1
   27120:	add	sp, sp, #8
   27124:	bx	lr
   27128:	push	{fp, lr}
   2712c:	mov	fp, sp
   27130:	sub	sp, sp, #32
   27134:	str	r0, [fp, #-4]
   27138:	str	r1, [fp, #-8]
   2713c:	ldr	r0, [fp, #-4]
   27140:	ldr	r1, [fp, #-8]
   27144:	ldr	r2, [fp, #-8]
   27148:	str	r0, [fp, #-12]
   2714c:	mov	r0, r2
   27150:	str	r1, [sp, #16]
   27154:	bl	175b8 <verify_monster@@Base+0x1b64>
   27158:	ldr	r1, [pc, #60]	; 2719c <main@@Base+0x3de8>
   2715c:	ldr	r2, [fp, #-12]
   27160:	str	r0, [sp, #12]
   27164:	mov	r0, r2
   27168:	ldr	lr, [sp, #16]
   2716c:	str	r1, [sp, #8]
   27170:	mov	r1, lr
   27174:	ldr	r2, [sp, #12]
   27178:	movw	r3, #4
   2717c:	movw	ip, #2
   27180:	uxth	ip, ip
   27184:	str	ip, [sp]
   27188:	ldr	ip, [sp, #8]
   2718c:	str	ip, [sp, #4]
   27190:	bl	2c01c <flatcc_builder_create_vector@@Base>
   27194:	mov	sp, fp
   27198:	pop	{fp, pc}
   2719c:	svccc	0x00ffffff
   271a0:	push	{fp, lr}
   271a4:	mov	fp, sp
   271a8:	sub	sp, sp, #32
   271ac:	ldr	ip, [fp, #8]
   271b0:	str	r0, [fp, #-8]
   271b4:	str	r1, [fp, #-12]
   271b8:	str	r3, [sp, #12]
   271bc:	str	r2, [sp, #8]
   271c0:	strh	ip, [sp, #6]
   271c4:	ldr	r0, [fp, #-8]
   271c8:	bl	26554 <main@@Base+0x31a0>
   271cc:	cmp	r0, #0
   271d0:	bne	27214 <main@@Base+0x3e60>
   271d4:	ldr	r0, [fp, #-8]
   271d8:	ldr	r2, [sp, #8]
   271dc:	ldr	r3, [sp, #12]
   271e0:	bl	27238 <main@@Base+0x3e84>
   271e4:	cmp	r0, #0
   271e8:	bne	27214 <main@@Base+0x3e60>
   271ec:	ldr	r0, [fp, #-8]
   271f0:	ldr	r1, [fp, #-12]
   271f4:	bl	272d0 <main@@Base+0x3f1c>
   271f8:	cmp	r0, #0
   271fc:	bne	27214 <main@@Base+0x3e60>
   27200:	ldr	r0, [fp, #-8]
   27204:	ldrh	r1, [sp, #6]
   27208:	bl	2733c <main@@Base+0x3f88>
   2720c:	cmp	r0, #0
   27210:	beq	27220 <main@@Base+0x3e6c>
   27214:	movw	r0, #0
   27218:	str	r0, [fp, #-4]
   2721c:	b	2722c <main@@Base+0x3e78>
   27220:	ldr	r0, [fp, #-8]
   27224:	bl	265e4 <main@@Base+0x3230>
   27228:	str	r0, [fp, #-4]
   2722c:	ldr	r0, [fp, #-4]
   27230:	mov	sp, fp
   27234:	pop	{fp, pc}
   27238:	push	{fp, lr}
   2723c:	mov	fp, sp
   27240:	sub	sp, sp, #24
   27244:	str	r0, [fp, #-8]
   27248:	str	r3, [sp, #12]
   2724c:	str	r2, [sp, #8]
   27250:	ldr	r0, [sp, #8]
   27254:	ldr	r2, [sp, #12]
   27258:	orr	r0, r0, r2
   2725c:	cmp	r0, #0
   27260:	bne	27274 <main@@Base+0x3ec0>
   27264:	b	27268 <main@@Base+0x3eb4>
   27268:	movw	r0, #0
   2726c:	str	r0, [fp, #-4]
   27270:	b	272c4 <main@@Base+0x3f10>
   27274:	ldr	r0, [fp, #-8]
   27278:	movw	r1, #1
   2727c:	movw	r2, #8
   27280:	movw	r3, #8
   27284:	uxth	r3, r3
   27288:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2728c:	str	r0, [sp, #4]
   27290:	movw	r1, #0
   27294:	cmp	r0, r1
   27298:	bne	272a8 <main@@Base+0x3ef4>
   2729c:	mvn	r0, #0
   272a0:	str	r0, [fp, #-4]
   272a4:	b	272c4 <main@@Base+0x3f10>
   272a8:	ldr	r0, [sp, #4]
   272ac:	ldr	r2, [sp, #8]
   272b0:	ldr	r3, [sp, #12]
   272b4:	bl	241bc <main@@Base+0xe08>
   272b8:	movw	r2, #0
   272bc:	str	r2, [fp, #-4]
   272c0:	str	r0, [sp]
   272c4:	ldr	r0, [fp, #-4]
   272c8:	mov	sp, fp
   272cc:	pop	{fp, pc}
   272d0:	push	{fp, lr}
   272d4:	mov	fp, sp
   272d8:	sub	sp, sp, #16
   272dc:	str	r0, [fp, #-4]
   272e0:	str	r1, [sp, #8]
   272e4:	ldr	r0, [sp, #8]
   272e8:	cmp	r0, #0
   272ec:	beq	27324 <main@@Base+0x3f70>
   272f0:	ldr	r0, [fp, #-4]
   272f4:	movw	r1, #0
   272f8:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   272fc:	str	r0, [sp, #4]
   27300:	movw	r1, #0
   27304:	cmp	r0, r1
   27308:	beq	27324 <main@@Base+0x3f70>
   2730c:	ldr	r0, [sp, #8]
   27310:	ldr	r1, [sp, #4]
   27314:	str	r0, [r1]
   27318:	movw	r0, #0
   2731c:	str	r0, [sp]
   27320:	b	27330 <main@@Base+0x3f7c>
   27324:	mvn	r0, #0
   27328:	str	r0, [sp]
   2732c:	b	27330 <main@@Base+0x3f7c>
   27330:	ldr	r0, [sp]
   27334:	mov	sp, fp
   27338:	pop	{fp, pc}
   2733c:	push	{fp, lr}
   27340:	mov	fp, sp
   27344:	sub	sp, sp, #24
   27348:	str	r0, [fp, #-8]
   2734c:	strh	r1, [fp, #-10]
   27350:	ldrh	r0, [fp, #-10]
   27354:	cmp	r0, #0
   27358:	bne	27368 <main@@Base+0x3fb4>
   2735c:	movw	r0, #0
   27360:	str	r0, [fp, #-4]
   27364:	b	273b8 <main@@Base+0x4004>
   27368:	ldr	r0, [fp, #-8]
   2736c:	movw	r1, #2
   27370:	str	r1, [sp, #4]
   27374:	ldr	r2, [sp, #4]
   27378:	movw	r3, #2
   2737c:	uxth	r3, r3
   27380:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27384:	str	r0, [sp, #8]
   27388:	movw	r1, #0
   2738c:	cmp	r0, r1
   27390:	bne	273a0 <main@@Base+0x3fec>
   27394:	mvn	r0, #0
   27398:	str	r0, [fp, #-4]
   2739c:	b	273b8 <main@@Base+0x4004>
   273a0:	ldr	r0, [sp, #8]
   273a4:	ldrh	r1, [fp, #-10]
   273a8:	bl	243d8 <main@@Base+0x1024>
   273ac:	movw	r1, #0
   273b0:	str	r1, [fp, #-4]
   273b4:	str	r0, [sp]
   273b8:	ldr	r0, [fp, #-4]
   273bc:	mov	sp, fp
   273c0:	pop	{fp, pc}
   273c4:	push	{fp, lr}
   273c8:	mov	fp, sp
   273cc:	sub	sp, sp, #8
   273d0:	str	r0, [sp, #4]
   273d4:	ldr	r0, [sp, #4]
   273d8:	movw	r1, #4
   273dc:	bl	2b170 <flatcc_builder_start_table@@Base>
   273e0:	mov	sp, fp
   273e4:	pop	{fp, pc}
   273e8:	push	{fp, lr}
   273ec:	mov	fp, sp
   273f0:	sub	sp, sp, #24
   273f4:	str	r0, [fp, #-8]
   273f8:	strb	r1, [fp, #-9]
   273fc:	ldrsb	r0, [fp, #-9]
   27400:	cmp	r0, #2
   27404:	bne	27414 <main@@Base+0x4060>
   27408:	movw	r0, #0
   2740c:	str	r0, [fp, #-4]
   27410:	b	27460 <main@@Base+0x40ac>
   27414:	ldr	r0, [fp, #-8]
   27418:	movw	r1, #0
   2741c:	movw	r2, #1
   27420:	movw	r3, #1
   27424:	uxth	r3, r3
   27428:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2742c:	str	r0, [sp, #8]
   27430:	movw	r1, #0
   27434:	cmp	r0, r1
   27438:	bne	27448 <main@@Base+0x4094>
   2743c:	mvn	r0, #0
   27440:	str	r0, [fp, #-4]
   27444:	b	27460 <main@@Base+0x40ac>
   27448:	ldr	r0, [sp, #8]
   2744c:	ldrsb	r1, [fp, #-9]
   27450:	bl	26138 <main@@Base+0x2d84>
   27454:	movw	r1, #0
   27458:	str	r1, [fp, #-4]
   2745c:	str	r0, [sp, #4]
   27460:	ldr	r0, [fp, #-4]
   27464:	mov	sp, fp
   27468:	pop	{fp, pc}
   2746c:	push	{fp, lr}
   27470:	mov	fp, sp
   27474:	sub	sp, sp, #24
   27478:	str	r0, [fp, #-8]
   2747c:	strb	r1, [fp, #-9]
   27480:	ldrsb	r0, [fp, #-9]
   27484:	cmp	r0, #2
   27488:	bne	27498 <main@@Base+0x40e4>
   2748c:	movw	r0, #0
   27490:	str	r0, [fp, #-4]
   27494:	b	274e8 <main@@Base+0x4134>
   27498:	ldr	r0, [fp, #-8]
   2749c:	movw	r1, #1
   274a0:	str	r1, [sp, #4]
   274a4:	ldr	r2, [sp, #4]
   274a8:	movw	r3, #1
   274ac:	uxth	r3, r3
   274b0:	bl	2ca28 <flatcc_builder_table_add@@Base>
   274b4:	str	r0, [sp, #8]
   274b8:	movw	r1, #0
   274bc:	cmp	r0, r1
   274c0:	bne	274d0 <main@@Base+0x411c>
   274c4:	mvn	r0, #0
   274c8:	str	r0, [fp, #-4]
   274cc:	b	274e8 <main@@Base+0x4134>
   274d0:	ldr	r0, [sp, #8]
   274d4:	ldrsb	r1, [fp, #-9]
   274d8:	bl	26138 <main@@Base+0x2d84>
   274dc:	movw	r1, #0
   274e0:	str	r1, [fp, #-4]
   274e4:	str	r0, [sp]
   274e8:	ldr	r0, [fp, #-4]
   274ec:	mov	sp, fp
   274f0:	pop	{fp, pc}
   274f4:	push	{fp, lr}
   274f8:	mov	fp, sp
   274fc:	sub	sp, sp, #24
   27500:	str	r0, [fp, #-8]
   27504:	strb	r1, [fp, #-9]
   27508:	ldrb	r0, [fp, #-9]
   2750c:	cmp	r0, #2
   27510:	bne	27520 <main@@Base+0x416c>
   27514:	movw	r0, #0
   27518:	str	r0, [fp, #-4]
   2751c:	b	2756c <main@@Base+0x41b8>
   27520:	ldr	r0, [fp, #-8]
   27524:	movw	r1, #2
   27528:	movw	r2, #1
   2752c:	movw	r3, #1
   27530:	uxth	r3, r3
   27534:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27538:	str	r0, [sp, #8]
   2753c:	movw	r1, #0
   27540:	cmp	r0, r1
   27544:	bne	27554 <main@@Base+0x41a0>
   27548:	mvn	r0, #0
   2754c:	str	r0, [fp, #-4]
   27550:	b	2756c <main@@Base+0x41b8>
   27554:	ldr	r0, [sp, #8]
   27558:	ldrb	r1, [fp, #-9]
   2755c:	bl	24460 <main@@Base+0x10ac>
   27560:	movw	r1, #0
   27564:	str	r1, [fp, #-4]
   27568:	str	r0, [sp, #4]
   2756c:	ldr	r0, [fp, #-4]
   27570:	mov	sp, fp
   27574:	pop	{fp, pc}
   27578:	push	{fp, lr}
   2757c:	mov	fp, sp
   27580:	sub	sp, sp, #24
   27584:	str	r0, [fp, #-8]
   27588:	strb	r1, [fp, #-9]
   2758c:	ldrb	r0, [fp, #-9]
   27590:	cmp	r0, #2
   27594:	bne	275a4 <main@@Base+0x41f0>
   27598:	movw	r0, #0
   2759c:	str	r0, [fp, #-4]
   275a0:	b	275f0 <main@@Base+0x423c>
   275a4:	ldr	r0, [fp, #-8]
   275a8:	movw	r1, #3
   275ac:	movw	r2, #1
   275b0:	movw	r3, #1
   275b4:	uxth	r3, r3
   275b8:	bl	2ca28 <flatcc_builder_table_add@@Base>
   275bc:	str	r0, [sp, #8]
   275c0:	movw	r1, #0
   275c4:	cmp	r0, r1
   275c8:	bne	275d8 <main@@Base+0x4224>
   275cc:	mvn	r0, #0
   275d0:	str	r0, [fp, #-4]
   275d4:	b	275f0 <main@@Base+0x423c>
   275d8:	ldr	r0, [sp, #8]
   275dc:	ldrb	r1, [fp, #-9]
   275e0:	bl	24460 <main@@Base+0x10ac>
   275e4:	movw	r1, #0
   275e8:	str	r1, [fp, #-4]
   275ec:	str	r0, [sp, #4]
   275f0:	ldr	r0, [fp, #-4]
   275f4:	mov	sp, fp
   275f8:	pop	{fp, pc}
   275fc:	push	{fp, lr}
   27600:	mov	fp, sp
   27604:	sub	sp, sp, #8
   27608:	ldr	r1, [pc, #76]	; 2765c <main@@Base+0x42a8>
   2760c:	add	r1, pc, r1
   27610:	str	r0, [sp, #4]
   27614:	ldr	r0, [sp, #4]
   27618:	movw	r2, #0
   2761c:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   27620:	cmp	r0, #0
   27624:	beq	2762c <main@@Base+0x4278>
   27628:	b	2764c <main@@Base+0x4298>
   2762c:	ldr	r0, [pc, #44]	; 27660 <main@@Base+0x42ac>
   27630:	add	r0, pc, r0
   27634:	ldr	r1, [pc, #40]	; 27664 <main@@Base+0x42b0>
   27638:	add	r1, pc, r1
   2763c:	ldr	r2, [pc, #36]	; 27668 <main@@Base+0x42b4>
   27640:	add	r3, pc, r2
   27644:	movw	r2, #217	; 0xd9
   27648:	bl	12e68 <__assert_fail@plt>
   2764c:	ldr	r0, [sp, #4]
   27650:	bl	2bde8 <flatcc_builder_end_table@@Base>
   27654:	mov	sp, fp
   27658:	pop	{fp, pc}
   2765c:	andeq	pc, r0, r4, ror r0	; <UNPREDICTABLE>
   27660:	ldrdeq	lr, [r0], -r4
   27664:	andeq	sp, r0, fp, lsr #2
   27668:	muleq	r0, r6, r2
   2766c:	push	{fp, lr}
   27670:	mov	fp, sp
   27674:	sub	sp, sp, #8
   27678:	str	r0, [sp, #4]
   2767c:	ldr	r0, [sp, #4]
   27680:	movw	r1, #4
   27684:	bl	2b170 <flatcc_builder_start_table@@Base>
   27688:	mov	sp, fp
   2768c:	pop	{fp, pc}
   27690:	push	{fp, lr}
   27694:	mov	fp, sp
   27698:	sub	sp, sp, #8
   2769c:	ldr	r1, [pc, #76]	; 276f0 <main@@Base+0x433c>
   276a0:	add	r1, pc, r1
   276a4:	str	r0, [sp, #4]
   276a8:	ldr	r0, [sp, #4]
   276ac:	movw	r2, #0
   276b0:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   276b4:	cmp	r0, #0
   276b8:	beq	276c0 <main@@Base+0x430c>
   276bc:	b	276e0 <main@@Base+0x432c>
   276c0:	ldr	r0, [pc, #44]	; 276f4 <main@@Base+0x4340>
   276c4:	add	r0, pc, r0
   276c8:	ldr	r1, [pc, #40]	; 276f8 <main@@Base+0x4344>
   276cc:	add	r1, pc, r1
   276d0:	ldr	r2, [pc, #36]	; 276fc <main@@Base+0x4348>
   276d4:	add	r3, pc, r2
   276d8:	movw	r2, #223	; 0xdf
   276dc:	bl	12e68 <__assert_fail@plt>
   276e0:	ldr	r0, [sp, #4]
   276e4:	bl	2bde8 <flatcc_builder_end_table@@Base>
   276e8:	mov	sp, fp
   276ec:	pop	{fp, pc}
   276f0:	andeq	lr, r0, r2, ror #31
   276f4:	andeq	lr, r0, r3, lsl #5
   276f8:	muleq	r0, r7, r0
   276fc:	andeq	lr, r0, r9, lsl #6
   27700:	push	{fp, lr}
   27704:	mov	fp, sp
   27708:	sub	sp, sp, #24
   2770c:	str	r0, [fp, #-4]
   27710:	str	r1, [fp, #-8]
   27714:	ldr	r0, [fp, #-4]
   27718:	ldr	r1, [fp, #-8]
   2771c:	add	r2, sp, #8
   27720:	str	r0, [sp, #4]
   27724:	mov	r0, r2
   27728:	bl	27744 <main@@Base+0x4390>
   2772c:	ldr	r1, [sp, #8]
   27730:	ldr	r2, [sp, #12]
   27734:	ldr	r0, [sp, #4]
   27738:	bl	19648 <gen_monster@@Base+0x1064>
   2773c:	mov	sp, fp
   27740:	pop	{fp, pc}
   27744:	sub	sp, sp, #4
   27748:	str	r1, [sp]
   2774c:	movw	r1, #4
   27750:	strb	r1, [r0]
   27754:	ldr	r1, [sp]
   27758:	str	r1, [r0, #4]
   2775c:	add	sp, sp, #4
   27760:	bx	lr
   27764:	push	{fp, lr}
   27768:	mov	fp, sp
   2776c:	sub	sp, sp, #8
   27770:	str	r0, [sp, #4]
   27774:	ldr	r0, [sp, #4]
   27778:	ldrb	r0, [r0]
   2777c:	bl	2778c <main@@Base+0x43d8>
   27780:	and	r0, r0, #255	; 0xff
   27784:	mov	sp, fp
   27788:	pop	{fp, pc}
   2778c:	sub	sp, sp, #4
   27790:	strb	r0, [sp, #3]
   27794:	ldrb	r0, [sp, #3]
   27798:	add	sp, sp, #4
   2779c:	bx	lr
   277a0:	push	{fp, lr}
   277a4:	mov	fp, sp
   277a8:	sub	sp, sp, #8
   277ac:	str	r0, [sp, #4]
   277b0:	ldr	r0, [sp, #4]
   277b4:	movw	r1, #10
   277b8:	bl	2b170 <flatcc_builder_start_table@@Base>
   277bc:	mov	sp, fp
   277c0:	pop	{fp, pc}
   277c4:	push	{fp, lr}
   277c8:	mov	fp, sp
   277cc:	sub	sp, sp, #8
   277d0:	str	r0, [sp, #4]
   277d4:	ldr	r0, [sp, #4]
   277d8:	movw	r1, #4
   277dc:	movw	r2, #4
   277e0:	uxth	r2, r2
   277e4:	bl	29fac <flatcc_builder_start_struct@@Base>
   277e8:	mov	sp, fp
   277ec:	pop	{fp, pc}
   277f0:	push	{fp, lr}
   277f4:	mov	fp, sp
   277f8:	sub	sp, sp, #16
   277fc:	str	r0, [fp, #-4]
   27800:	str	r1, [sp, #8]
   27804:	ldr	r0, [fp, #-4]
   27808:	ldr	r1, [sp, #8]
   2780c:	bl	242b8 <main@@Base+0xf04>
   27810:	ldr	r1, [fp, #-4]
   27814:	str	r0, [sp, #4]
   27818:	mov	r0, r1
   2781c:	mov	sp, fp
   27820:	pop	{fp, pc}
   27824:	push	{fp, lr}
   27828:	mov	fp, sp
   2782c:	sub	sp, sp, #8
   27830:	str	r0, [sp, #4]
   27834:	ldr	r0, [sp, #4]
   27838:	bl	2a154 <flatcc_builder_end_struct@@Base>
   2783c:	mov	sp, fp
   27840:	pop	{fp, pc}
   27844:	push	{fp, lr}
   27848:	mov	fp, sp
   2784c:	sub	sp, sp, #8
   27850:	str	r0, [sp, #4]
   27854:	ldr	r0, [sp, #4]
   27858:	movw	r1, #2
   2785c:	movw	r2, #2
   27860:	uxth	r2, r2
   27864:	bl	29fac <flatcc_builder_start_struct@@Base>
   27868:	mov	sp, fp
   2786c:	pop	{fp, pc}
   27870:	push	{fp, lr}
   27874:	mov	fp, sp
   27878:	sub	sp, sp, #16
   2787c:	str	r0, [fp, #-4]
   27880:	strh	r1, [fp, #-6]
   27884:	ldr	r0, [fp, #-4]
   27888:	ldrh	r1, [fp, #-6]
   2788c:	bl	243d8 <main@@Base+0x1024>
   27890:	ldr	r1, [fp, #-4]
   27894:	str	r0, [sp, #4]
   27898:	mov	r0, r1
   2789c:	mov	sp, fp
   278a0:	pop	{fp, pc}
   278a4:	push	{fp, lr}
   278a8:	mov	fp, sp
   278ac:	sub	sp, sp, #8
   278b0:	str	r0, [sp, #4]
   278b4:	ldr	r0, [sp, #4]
   278b8:	bl	2a154 <flatcc_builder_end_struct@@Base>
   278bc:	mov	sp, fp
   278c0:	pop	{fp, pc}
   278c4:	push	{fp, lr}
   278c8:	mov	fp, sp
   278cc:	sub	sp, sp, #24
   278d0:	str	r1, [sp, #12]
   278d4:	str	r2, [sp, #16]
   278d8:	str	r0, [sp, #8]
   278dc:	ldrb	r0, [sp, #12]
   278e0:	cmp	r0, #0
   278e4:	bne	278f4 <main@@Base+0x4540>
   278e8:	movw	r0, #0
   278ec:	str	r0, [fp, #-4]
   278f0:	b	2797c <main@@Base+0x45c8>
   278f4:	ldr	r0, [sp, #16]
   278f8:	cmp	r0, #0
   278fc:	bne	2790c <main@@Base+0x4558>
   27900:	mvn	r0, #0
   27904:	str	r0, [fp, #-4]
   27908:	b	2797c <main@@Base+0x45c8>
   2790c:	ldr	r0, [sp, #8]
   27910:	movw	r1, #0
   27914:	movw	r2, #1
   27918:	movw	r3, #1
   2791c:	uxth	r3, r3
   27920:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27924:	str	r0, [sp]
   27928:	movw	r1, #0
   2792c:	cmp	r0, r1
   27930:	beq	27950 <main@@Base+0x459c>
   27934:	ldr	r0, [sp, #8]
   27938:	movw	r1, #1
   2793c:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27940:	str	r0, [sp, #4]
   27944:	movw	r1, #0
   27948:	cmp	r0, r1
   2794c:	bne	2795c <main@@Base+0x45a8>
   27950:	mvn	r0, #0
   27954:	str	r0, [fp, #-4]
   27958:	b	2797c <main@@Base+0x45c8>
   2795c:	ldrb	r0, [sp, #12]
   27960:	ldr	r1, [sp]
   27964:	strb	r0, [r1]
   27968:	ldr	r0, [sp, #16]
   2796c:	ldr	r1, [sp, #4]
   27970:	str	r0, [r1]
   27974:	movw	r0, #0
   27978:	str	r0, [fp, #-4]
   2797c:	ldr	r0, [fp, #-4]
   27980:	mov	sp, fp
   27984:	pop	{fp, pc}
   27988:	push	{fp, lr}
   2798c:	mov	fp, sp
   27990:	sub	sp, sp, #24
   27994:	str	r1, [sp, #12]
   27998:	str	r2, [sp, #16]
   2799c:	str	r0, [sp, #8]
   279a0:	ldrb	r0, [sp, #12]
   279a4:	cmp	r0, #0
   279a8:	bne	279b8 <main@@Base+0x4604>
   279ac:	movw	r0, #0
   279b0:	str	r0, [fp, #-4]
   279b4:	b	27a40 <main@@Base+0x468c>
   279b8:	ldr	r0, [sp, #16]
   279bc:	cmp	r0, #0
   279c0:	bne	279d0 <main@@Base+0x461c>
   279c4:	mvn	r0, #0
   279c8:	str	r0, [fp, #-4]
   279cc:	b	27a40 <main@@Base+0x468c>
   279d0:	ldr	r0, [sp, #8]
   279d4:	movw	r1, #6
   279d8:	movw	r2, #1
   279dc:	movw	r3, #1
   279e0:	uxth	r3, r3
   279e4:	bl	2ca28 <flatcc_builder_table_add@@Base>
   279e8:	str	r0, [sp]
   279ec:	movw	r1, #0
   279f0:	cmp	r0, r1
   279f4:	beq	27a14 <main@@Base+0x4660>
   279f8:	ldr	r0, [sp, #8]
   279fc:	movw	r1, #7
   27a00:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27a04:	str	r0, [sp, #4]
   27a08:	movw	r1, #0
   27a0c:	cmp	r0, r1
   27a10:	bne	27a20 <main@@Base+0x466c>
   27a14:	mvn	r0, #0
   27a18:	str	r0, [fp, #-4]
   27a1c:	b	27a40 <main@@Base+0x468c>
   27a20:	ldrb	r0, [sp, #12]
   27a24:	ldr	r1, [sp]
   27a28:	strb	r0, [r1]
   27a2c:	ldr	r0, [sp, #16]
   27a30:	ldr	r1, [sp, #4]
   27a34:	str	r0, [r1]
   27a38:	movw	r0, #0
   27a3c:	str	r0, [fp, #-4]
   27a40:	ldr	r0, [fp, #-4]
   27a44:	mov	sp, fp
   27a48:	pop	{fp, pc}
   27a4c:	push	{fp, lr}
   27a50:	mov	fp, sp
   27a54:	sub	sp, sp, #8
   27a58:	str	r0, [sp, #4]
   27a5c:	ldr	r0, [sp, #4]
   27a60:	movw	r1, #1
   27a64:	bl	2b170 <flatcc_builder_start_table@@Base>
   27a68:	mov	sp, fp
   27a6c:	pop	{fp, pc}
   27a70:	push	{fp, lr}
   27a74:	mov	fp, sp
   27a78:	sub	sp, sp, #24
   27a7c:	str	r0, [fp, #-8]
   27a80:	str	r1, [sp, #12]
   27a84:	ldr	r0, [sp, #12]
   27a88:	cmp	r0, #0
   27a8c:	bne	27a9c <main@@Base+0x46e8>
   27a90:	movw	r0, #0
   27a94:	str	r0, [fp, #-4]
   27a98:	b	27ae8 <main@@Base+0x4734>
   27a9c:	ldr	r0, [fp, #-8]
   27aa0:	movw	r1, #0
   27aa4:	movw	r2, #4
   27aa8:	movw	r3, #4
   27aac:	uxth	r3, r3
   27ab0:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27ab4:	str	r0, [sp, #8]
   27ab8:	movw	r1, #0
   27abc:	cmp	r0, r1
   27ac0:	bne	27ad0 <main@@Base+0x471c>
   27ac4:	mvn	r0, #0
   27ac8:	str	r0, [fp, #-4]
   27acc:	b	27ae8 <main@@Base+0x4734>
   27ad0:	ldr	r0, [sp, #8]
   27ad4:	ldr	r1, [sp, #12]
   27ad8:	bl	242b8 <main@@Base+0xf04>
   27adc:	movw	r1, #0
   27ae0:	str	r1, [fp, #-4]
   27ae4:	str	r0, [sp, #4]
   27ae8:	ldr	r0, [fp, #-4]
   27aec:	mov	sp, fp
   27af0:	pop	{fp, pc}
   27af4:	push	{fp, lr}
   27af8:	mov	fp, sp
   27afc:	sub	sp, sp, #8
   27b00:	ldr	r1, [pc, #76]	; 27b54 <main@@Base+0x47a0>
   27b04:	add	r1, pc, r1
   27b08:	str	r0, [sp, #4]
   27b0c:	ldr	r0, [sp, #4]
   27b10:	movw	r2, #0
   27b14:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   27b18:	cmp	r0, #0
   27b1c:	beq	27b24 <main@@Base+0x4770>
   27b20:	b	27b44 <main@@Base+0x4790>
   27b24:	ldr	r0, [pc, #44]	; 27b58 <main@@Base+0x47a4>
   27b28:	add	r0, pc, r0
   27b2c:	ldr	r1, [pc, #40]	; 27b5c <main@@Base+0x47a8>
   27b30:	add	r1, pc, r1
   27b34:	ldr	r2, [pc, #36]	; 27b60 <main@@Base+0x47ac>
   27b38:	add	r3, pc, r2
   27b3c:	movw	r2, #239	; 0xef
   27b40:	bl	12e68 <__assert_fail@plt>
   27b44:	ldr	r0, [sp, #4]
   27b48:	bl	2bde8 <flatcc_builder_end_table@@Base>
   27b4c:	mov	sp, fp
   27b50:	pop	{fp, pc}
   27b54:	andeq	lr, r0, r0, lsl #23
   27b58:	andeq	lr, r0, sl, ror r2
   27b5c:	andeq	ip, r0, r3, lsr ip
   27b60:	strdeq	lr, [r0], -sl
   27b64:	push	{fp, lr}
   27b68:	mov	fp, sp
   27b6c:	sub	sp, sp, #24
   27b70:	str	r1, [sp, #12]
   27b74:	str	r2, [sp, #16]
   27b78:	str	r0, [sp, #8]
   27b7c:	ldrb	r0, [sp, #12]
   27b80:	cmp	r0, #0
   27b84:	bne	27b94 <main@@Base+0x47e0>
   27b88:	movw	r0, #0
   27b8c:	str	r0, [fp, #-4]
   27b90:	b	27c1c <main@@Base+0x4868>
   27b94:	ldr	r0, [sp, #16]
   27b98:	cmp	r0, #0
   27b9c:	bne	27bac <main@@Base+0x47f8>
   27ba0:	mvn	r0, #0
   27ba4:	str	r0, [fp, #-4]
   27ba8:	b	27c1c <main@@Base+0x4868>
   27bac:	ldr	r0, [sp, #8]
   27bb0:	movw	r1, #2
   27bb4:	movw	r2, #1
   27bb8:	movw	r3, #1
   27bbc:	uxth	r3, r3
   27bc0:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27bc4:	str	r0, [sp]
   27bc8:	movw	r1, #0
   27bcc:	cmp	r0, r1
   27bd0:	beq	27bf0 <main@@Base+0x483c>
   27bd4:	ldr	r0, [sp, #8]
   27bd8:	movw	r1, #3
   27bdc:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27be0:	str	r0, [sp, #4]
   27be4:	movw	r1, #0
   27be8:	cmp	r0, r1
   27bec:	bne	27bfc <main@@Base+0x4848>
   27bf0:	mvn	r0, #0
   27bf4:	str	r0, [fp, #-4]
   27bf8:	b	27c1c <main@@Base+0x4868>
   27bfc:	ldrb	r0, [sp, #12]
   27c00:	ldr	r1, [sp]
   27c04:	strb	r0, [r1]
   27c08:	ldr	r0, [sp, #16]
   27c0c:	ldr	r1, [sp, #4]
   27c10:	str	r0, [r1]
   27c14:	movw	r0, #0
   27c18:	str	r0, [fp, #-4]
   27c1c:	ldr	r0, [fp, #-4]
   27c20:	mov	sp, fp
   27c24:	pop	{fp, pc}
   27c28:	sub	sp, sp, #4
   27c2c:	str	r1, [sp]
   27c30:	movw	r1, #2
   27c34:	strb	r1, [r0]
   27c38:	ldr	r1, [sp]
   27c3c:	str	r1, [r0, #4]
   27c40:	add	sp, sp, #4
   27c44:	bx	lr
   27c48:	push	{fp, lr}
   27c4c:	mov	fp, sp
   27c50:	sub	sp, sp, #24
   27c54:	str	r0, [fp, #-4]
   27c58:	str	r1, [fp, #-8]
   27c5c:	ldr	r0, [fp, #-4]
   27c60:	ldr	r1, [fp, #-8]
   27c64:	add	r2, sp, #8
   27c68:	str	r0, [sp, #4]
   27c6c:	mov	r0, r2
   27c70:	bl	20258 <test_mixed_type_union@@Base+0xf0c>
   27c74:	ldr	r1, [sp, #8]
   27c78:	ldr	r2, [sp, #12]
   27c7c:	ldr	r0, [sp, #4]
   27c80:	bl	27c8c <main@@Base+0x48d8>
   27c84:	mov	sp, fp
   27c88:	pop	{fp, pc}
   27c8c:	push	{fp, lr}
   27c90:	mov	fp, sp
   27c94:	sub	sp, sp, #24
   27c98:	str	r1, [sp, #12]
   27c9c:	str	r2, [sp, #16]
   27ca0:	str	r0, [sp, #8]
   27ca4:	ldrb	r0, [sp, #12]
   27ca8:	cmp	r0, #0
   27cac:	bne	27cbc <main@@Base+0x4908>
   27cb0:	movw	r0, #0
   27cb4:	str	r0, [fp, #-4]
   27cb8:	b	27d44 <main@@Base+0x4990>
   27cbc:	ldr	r0, [sp, #16]
   27cc0:	cmp	r0, #0
   27cc4:	bne	27cd4 <main@@Base+0x4920>
   27cc8:	mvn	r0, #0
   27ccc:	str	r0, [fp, #-4]
   27cd0:	b	27d44 <main@@Base+0x4990>
   27cd4:	ldr	r0, [sp, #8]
   27cd8:	movw	r1, #4
   27cdc:	movw	r2, #1
   27ce0:	movw	r3, #1
   27ce4:	uxth	r3, r3
   27ce8:	bl	2ca28 <flatcc_builder_table_add@@Base>
   27cec:	str	r0, [sp]
   27cf0:	movw	r1, #0
   27cf4:	cmp	r0, r1
   27cf8:	beq	27d18 <main@@Base+0x4964>
   27cfc:	ldr	r0, [sp, #8]
   27d00:	movw	r1, #5
   27d04:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27d08:	str	r0, [sp, #4]
   27d0c:	movw	r1, #0
   27d10:	cmp	r0, r1
   27d14:	bne	27d24 <main@@Base+0x4970>
   27d18:	mvn	r0, #0
   27d1c:	str	r0, [fp, #-4]
   27d20:	b	27d44 <main@@Base+0x4990>
   27d24:	ldrb	r0, [sp, #12]
   27d28:	ldr	r1, [sp]
   27d2c:	strb	r0, [r1]
   27d30:	ldr	r0, [sp, #16]
   27d34:	ldr	r1, [sp, #4]
   27d38:	str	r0, [r1]
   27d3c:	movw	r0, #0
   27d40:	str	r0, [fp, #-4]
   27d44:	ldr	r0, [fp, #-4]
   27d48:	mov	sp, fp
   27d4c:	pop	{fp, pc}
   27d50:	sub	sp, sp, #4
   27d54:	str	r1, [sp]
   27d58:	movw	r1, #9
   27d5c:	strb	r1, [r0]
   27d60:	ldr	r1, [sp]
   27d64:	str	r1, [r0, #4]
   27d68:	add	sp, sp, #4
   27d6c:	bx	lr
   27d70:	push	{fp, lr}
   27d74:	mov	fp, sp
   27d78:	sub	sp, sp, #8
   27d7c:	str	r0, [sp, #4]
   27d80:	ldr	r0, [sp, #4]
   27d84:	bl	2a154 <flatcc_builder_end_struct@@Base>
   27d88:	mov	sp, fp
   27d8c:	pop	{fp, pc}
   27d90:	push	{fp, lr}
   27d94:	mov	fp, sp
   27d98:	sub	sp, sp, #24
   27d9c:	str	r1, [sp, #12]
   27da0:	str	r2, [sp, #16]
   27da4:	str	r0, [sp, #8]
   27da8:	ldr	r0, [sp, #12]
   27dac:	cmp	r0, #0
   27db0:	beq	27dc0 <main@@Base+0x4a0c>
   27db4:	ldr	r0, [sp, #16]
   27db8:	cmp	r0, #0
   27dbc:	bne	27de8 <main@@Base+0x4a34>
   27dc0:	ldr	r0, [sp, #12]
   27dc4:	ldr	r1, [sp, #16]
   27dc8:	cmp	r0, r1
   27dcc:	movw	r0, #0
   27dd0:	moveq	r0, #1
   27dd4:	tst	r0, #1
   27dd8:	movw	r0, #0
   27ddc:	mvneq	r0, #0
   27de0:	str	r0, [fp, #-4]
   27de4:	b	27e58 <main@@Base+0x4aa4>
   27de8:	ldr	r0, [sp, #8]
   27dec:	movw	r1, #8
   27df0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27df4:	str	r0, [sp, #4]
   27df8:	movw	r1, #0
   27dfc:	cmp	r0, r1
   27e00:	bne	27e10 <main@@Base+0x4a5c>
   27e04:	mvn	r0, #0
   27e08:	str	r0, [fp, #-4]
   27e0c:	b	27e58 <main@@Base+0x4aa4>
   27e10:	ldr	r0, [sp, #12]
   27e14:	ldr	r1, [sp, #4]
   27e18:	str	r0, [r1]
   27e1c:	ldr	r0, [sp, #8]
   27e20:	movw	r1, #9
   27e24:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   27e28:	str	r0, [sp, #4]
   27e2c:	movw	r1, #0
   27e30:	cmp	r0, r1
   27e34:	bne	27e44 <main@@Base+0x4a90>
   27e38:	mvn	r0, #0
   27e3c:	str	r0, [fp, #-4]
   27e40:	b	27e58 <main@@Base+0x4aa4>
   27e44:	ldr	r0, [sp, #16]
   27e48:	ldr	r1, [sp, #4]
   27e4c:	str	r0, [r1]
   27e50:	movw	r0, #0
   27e54:	str	r0, [fp, #-4]
   27e58:	ldr	r0, [fp, #-4]
   27e5c:	mov	sp, fp
   27e60:	pop	{fp, pc}
   27e64:	push	{fp, lr}
   27e68:	mov	fp, sp
   27e6c:	sub	sp, sp, #8
   27e70:	ldr	r1, [pc, #76]	; 27ec4 <main@@Base+0x4b10>
   27e74:	add	r1, pc, r1
   27e78:	str	r0, [sp, #4]
   27e7c:	ldr	r0, [sp, #4]
   27e80:	movw	r2, #0
   27e84:	bl	2bcf8 <flatcc_builder_check_required@@Base>
   27e88:	cmp	r0, #0
   27e8c:	beq	27e94 <main@@Base+0x4ae0>
   27e90:	b	27eb4 <main@@Base+0x4b00>
   27e94:	ldr	r0, [pc, #44]	; 27ec8 <main@@Base+0x4b14>
   27e98:	add	r0, pc, r0
   27e9c:	ldr	r1, [pc, #40]	; 27ecc <main@@Base+0x4b18>
   27ea0:	add	r1, pc, r1
   27ea4:	ldr	r2, [pc, #36]	; 27ed0 <main@@Base+0x4b1c>
   27ea8:	add	r3, pc, r2
   27eac:	movw	r2, #241	; 0xf1
   27eb0:	bl	12e68 <__assert_fail@plt>
   27eb4:	ldr	r0, [sp, #4]
   27eb8:	bl	2bde8 <flatcc_builder_end_table@@Base>
   27ebc:	mov	sp, fp
   27ec0:	pop	{fp, pc}
   27ec4:	andeq	lr, r0, r2, lsl r8
   27ec8:	ldrdeq	sp, [r0], -pc	; <UNPREDICTABLE>
   27ecc:	andeq	ip, r0, r3, asr #17
   27ed0:	andeq	lr, r0, r6, asr r0
   27ed4:	push	{fp, lr}
   27ed8:	mov	fp, sp
   27edc:	sub	sp, sp, #24
   27ee0:	str	r0, [fp, #-4]
   27ee4:	movw	r0, #0
   27ee8:	strh	r0, [fp, #-6]
   27eec:	ldr	r0, [fp, #-4]
   27ef0:	movw	r1, #0
   27ef4:	cmp	r0, r1
   27ef8:	beq	27f04 <main@@Base+0x4b50>
   27efc:	b	27f00 <main@@Base+0x4b4c>
   27f00:	b	27f24 <main@@Base+0x4b70>
   27f04:	ldr	r0, [pc, #176]	; 27fbc <main@@Base+0x4c08>
   27f08:	add	r0, pc, r0
   27f0c:	ldr	r1, [pc, #172]	; 27fc0 <main@@Base+0x4c0c>
   27f10:	add	r1, pc, r1
   27f14:	ldr	r2, [pc, #168]	; 27fc4 <main@@Base+0x4c10>
   27f18:	add	r3, pc, r2
   27f1c:	movw	r2, #819	; 0x333
   27f20:	bl	12e68 <__assert_fail@plt>
   27f24:	mov	r0, #0
   27f28:	strh	r0, [fp, #-8]
   27f2c:	ldr	r0, [fp, #-4]
   27f30:	str	r0, [sp, #8]
   27f34:	bl	238a4 <main@@Base+0x4f0>
   27f38:	ldr	lr, [sp, #8]
   27f3c:	sub	r0, lr, r0
   27f40:	str	r0, [sp, #12]
   27f44:	ldr	r0, [sp, #12]
   27f48:	bl	238c8 <main@@Base+0x514>
   27f4c:	ldrh	lr, [fp, #-8]
   27f50:	add	lr, lr, #3
   27f54:	lsl	lr, lr, #1
   27f58:	cmp	r0, lr
   27f5c:	bcc	27f78 <main@@Base+0x4bc4>
   27f60:	ldr	r0, [sp, #12]
   27f64:	ldrh	r1, [fp, #-8]
   27f68:	add	r0, r0, r1, lsl #1
   27f6c:	add	r0, r0, #4
   27f70:	bl	238c8 <main@@Base+0x514>
   27f74:	strh	r0, [fp, #-6]
   27f78:	ldrh	r0, [fp, #-6]
   27f7c:	cmp	r0, #0
   27f80:	beq	27fa0 <main@@Base+0x4bec>
   27f84:	ldr	r0, [fp, #-4]
   27f88:	ldrh	r1, [fp, #-6]
   27f8c:	add	r0, r0, r1
   27f90:	bl	260c8 <main@@Base+0x2d14>
   27f94:	and	r0, r0, #255	; 0xff
   27f98:	str	r0, [sp, #4]
   27f9c:	b	27fac <main@@Base+0x4bf8>
   27fa0:	movw	r0, #0
   27fa4:	str	r0, [sp, #4]
   27fa8:	b	27fac <main@@Base+0x4bf8>
   27fac:	ldr	r0, [sp, #4]
   27fb0:	and	r0, r0, #255	; 0xff
   27fb4:	mov	sp, fp
   27fb8:	pop	{fp, pc}
   27fbc:	andeq	ip, r0, r1, ror #11
   27fc0:	strdeq	ip, [r0], -pc	; <UNPREDICTABLE>
   27fc4:	andeq	lr, r0, r7, lsr #1
   27fc8:	push	{fp, lr}
   27fcc:	mov	fp, sp
   27fd0:	sub	sp, sp, #32
   27fd4:	str	r0, [fp, #-8]
   27fd8:	movw	r0, #0
   27fdc:	strh	r0, [fp, #-14]
   27fe0:	ldr	r0, [fp, #-8]
   27fe4:	movw	r1, #0
   27fe8:	cmp	r0, r1
   27fec:	beq	27ff8 <main@@Base+0x4c44>
   27ff0:	b	27ff4 <main@@Base+0x4c40>
   27ff4:	b	28018 <main@@Base+0x4c64>
   27ff8:	ldr	r0, [pc, #192]	; 280c0 <main@@Base+0x4d0c>
   27ffc:	add	r0, pc, r0
   28000:	ldr	r1, [pc, #188]	; 280c4 <main@@Base+0x4d10>
   28004:	add	r1, pc, r1
   28008:	ldr	r2, [pc, #184]	; 280c8 <main@@Base+0x4d14>
   2800c:	add	r3, pc, r2
   28010:	movw	r2, #819	; 0x333
   28014:	bl	12e68 <__assert_fail@plt>
   28018:	mov	r0, #1
   2801c:	strh	r0, [sp, #16]
   28020:	ldr	r0, [fp, #-8]
   28024:	str	r0, [sp, #8]
   28028:	bl	238a4 <main@@Base+0x4f0>
   2802c:	ldr	lr, [sp, #8]
   28030:	sub	r0, lr, r0
   28034:	str	r0, [sp, #12]
   28038:	ldr	r0, [sp, #12]
   2803c:	bl	238c8 <main@@Base+0x514>
   28040:	ldrh	lr, [sp, #16]
   28044:	add	lr, lr, #3
   28048:	lsl	lr, lr, #1
   2804c:	cmp	r0, lr
   28050:	bcc	2806c <main@@Base+0x4cb8>
   28054:	ldr	r0, [sp, #12]
   28058:	ldrh	r1, [sp, #16]
   2805c:	add	r0, r0, r1, lsl #1
   28060:	add	r0, r0, #4
   28064:	bl	238c8 <main@@Base+0x514>
   28068:	strh	r0, [fp, #-14]
   2806c:	ldrsh	r0, [fp, #-14]
   28070:	cmp	r0, #0
   28074:	beq	280ac <main@@Base+0x4cf8>
   28078:	ldr	r0, [fp, #-8]
   2807c:	ldrh	r1, [fp, #-14]
   28080:	add	r0, r0, r1
   28084:	str	r0, [fp, #-12]
   28088:	ldr	r0, [fp, #-12]
   2808c:	ldr	r1, [fp, #-12]
   28090:	str	r0, [sp, #4]
   28094:	mov	r0, r1
   28098:	bl	2386c <main@@Base+0x4b8>
   2809c:	ldr	r1, [sp, #4]
   280a0:	add	r0, r1, r0
   280a4:	str	r0, [fp, #-4]
   280a8:	b	280b4 <main@@Base+0x4d00>
   280ac:	movw	r0, #0
   280b0:	str	r0, [fp, #-4]
   280b4:	ldr	r0, [fp, #-4]
   280b8:	mov	sp, fp
   280bc:	pop	{fp, pc}
   280c0:	andeq	ip, r0, sp, ror #9
   280c4:	andeq	ip, r0, fp, lsl #10
   280c8:	andeq	lr, r0, fp
   280cc:	movw	r0, #4
   280d0:	bx	lr
   280d4:	push	{fp, lr}
   280d8:	mov	fp, sp
   280dc:	sub	sp, sp, #32
   280e0:	str	r0, [fp, #-8]
   280e4:	movw	r0, #0
   280e8:	strh	r0, [fp, #-14]
   280ec:	ldr	r0, [fp, #-8]
   280f0:	movw	r1, #0
   280f4:	cmp	r0, r1
   280f8:	beq	28104 <main@@Base+0x4d50>
   280fc:	b	28100 <main@@Base+0x4d4c>
   28100:	b	28124 <main@@Base+0x4d70>
   28104:	ldr	r0, [pc, #196]	; 281d0 <main@@Base+0x4e1c>
   28108:	add	r0, pc, r0
   2810c:	ldr	r1, [pc, #192]	; 281d4 <main@@Base+0x4e20>
   28110:	add	r1, pc, r1
   28114:	ldr	r2, [pc, #188]	; 281d8 <main@@Base+0x4e24>
   28118:	add	r3, pc, r2
   2811c:	movw	r2, #823	; 0x337
   28120:	bl	12e68 <__assert_fail@plt>
   28124:	mov	r0, #9
   28128:	strh	r0, [sp, #16]
   2812c:	ldr	r0, [fp, #-8]
   28130:	str	r0, [sp, #8]
   28134:	bl	238a4 <main@@Base+0x4f0>
   28138:	ldr	lr, [sp, #8]
   2813c:	sub	r0, lr, r0
   28140:	str	r0, [sp, #12]
   28144:	ldr	r0, [sp, #12]
   28148:	bl	238c8 <main@@Base+0x514>
   2814c:	ldrh	lr, [sp, #16]
   28150:	add	lr, lr, #3
   28154:	lsl	lr, lr, #1
   28158:	cmp	r0, lr
   2815c:	bcc	28178 <main@@Base+0x4dc4>
   28160:	ldr	r0, [sp, #12]
   28164:	ldrh	r1, [sp, #16]
   28168:	add	r0, r0, r1, lsl #1
   2816c:	add	r0, r0, #4
   28170:	bl	238c8 <main@@Base+0x514>
   28174:	strh	r0, [fp, #-14]
   28178:	ldrsh	r0, [fp, #-14]
   2817c:	cmp	r0, #0
   28180:	beq	281bc <main@@Base+0x4e08>
   28184:	ldr	r0, [fp, #-8]
   28188:	ldrh	r1, [fp, #-14]
   2818c:	add	r0, r0, r1
   28190:	str	r0, [fp, #-12]
   28194:	ldr	r0, [fp, #-12]
   28198:	add	r0, r0, #4
   2819c:	ldr	r1, [fp, #-12]
   281a0:	str	r0, [sp, #4]
   281a4:	mov	r0, r1
   281a8:	bl	2386c <main@@Base+0x4b8>
   281ac:	ldr	r1, [sp, #4]
   281b0:	add	r0, r1, r0
   281b4:	str	r0, [fp, #-4]
   281b8:	b	281c4 <main@@Base+0x4e10>
   281bc:	movw	r0, #0
   281c0:	str	r0, [fp, #-4]
   281c4:	ldr	r0, [fp, #-4]
   281c8:	mov	sp, fp
   281cc:	pop	{fp, pc}
   281d0:	andeq	ip, r0, r1, ror #7
   281d4:	strdeq	ip, [r0], -pc	; <UNPREDICTABLE>
   281d8:	andeq	lr, r0, r6, lsr #3
   281dc:	push	{fp, lr}
   281e0:	mov	fp, sp
   281e4:	sub	sp, sp, #16
   281e8:	str	r0, [fp, #-4]
   281ec:	str	r1, [sp, #8]
   281f0:	ldr	r0, [fp, #-4]
   281f4:	ldr	r1, [sp, #8]
   281f8:	add	r0, r0, r1, lsl #2
   281fc:	str	r0, [sp, #4]
   28200:	ldr	r0, [fp, #-4]
   28204:	bl	2603c <main@@Base+0x2c88>
   28208:	ldr	r1, [sp, #8]
   2820c:	cmp	r0, r1
   28210:	bls	2821c <main@@Base+0x4e68>
   28214:	b	28218 <main@@Base+0x4e64>
   28218:	b	2823c <main@@Base+0x4e88>
   2821c:	ldr	r0, [pc, #64]	; 28264 <main@@Base+0x4eb0>
   28220:	add	r0, pc, r0
   28224:	ldr	r1, [pc, #60]	; 28268 <main@@Base+0x4eb4>
   28228:	add	r1, pc, r1
   2822c:	ldr	r2, [pc, #56]	; 2826c <main@@Base+0x4eb8>
   28230:	add	r3, pc, r2
   28234:	movw	r2, #119	; 0x77
   28238:	bl	12e68 <__assert_fail@plt>
   2823c:	ldr	r0, [sp, #4]
   28240:	ldr	r1, [sp, #4]
   28244:	str	r0, [sp]
   28248:	mov	r0, r1
   2824c:	bl	2386c <main@@Base+0x4b8>
   28250:	ldr	r1, [sp]
   28254:	add	r0, r1, r0
   28258:	add	r0, r0, #4
   2825c:	mov	sp, fp
   28260:	pop	{fp, pc}
   28264:	andeq	ip, r0, r4, ror #25
   28268:	andeq	ip, r0, r3, lsl sp
   2826c:	andeq	lr, r0, r5, lsl #3
   28270:	push	{fp, lr}
   28274:	mov	fp, sp
   28278:	sub	sp, sp, #16
   2827c:	str	r0, [fp, #-4]
   28280:	str	r1, [sp, #8]
   28284:	ldr	r0, [sp, #8]
   28288:	cmp	r0, #0
   2828c:	beq	282c4 <main@@Base+0x4f10>
   28290:	ldr	r0, [fp, #-4]
   28294:	movw	r1, #13
   28298:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   2829c:	str	r0, [sp, #4]
   282a0:	movw	r1, #0
   282a4:	cmp	r0, r1
   282a8:	beq	282c4 <main@@Base+0x4f10>
   282ac:	ldr	r0, [sp, #8]
   282b0:	ldr	r1, [sp, #4]
   282b4:	str	r0, [r1]
   282b8:	movw	r0, #0
   282bc:	str	r0, [sp]
   282c0:	b	282d0 <main@@Base+0x4f1c>
   282c4:	mvn	r0, #0
   282c8:	str	r0, [sp]
   282cc:	b	282d0 <main@@Base+0x4f1c>
   282d0:	ldr	r0, [sp]
   282d4:	mov	sp, fp
   282d8:	pop	{fp, pc}
   282dc:	push	{fp, lr}
   282e0:	mov	fp, sp
   282e4:	sub	sp, sp, #32
   282e8:	str	r0, [fp, #-8]
   282ec:	movw	r0, #0
   282f0:	strh	r0, [fp, #-14]
   282f4:	ldr	r0, [fp, #-8]
   282f8:	movw	r1, #0
   282fc:	cmp	r0, r1
   28300:	beq	2830c <main@@Base+0x4f58>
   28304:	b	28308 <main@@Base+0x4f54>
   28308:	b	2832c <main@@Base+0x4f78>
   2830c:	ldr	r0, [pc, #196]	; 283d8 <main@@Base+0x5024>
   28310:	add	r0, pc, r0
   28314:	ldr	r1, [pc, #192]	; 283dc <main@@Base+0x5028>
   28318:	add	r1, pc, r1
   2831c:	ldr	r2, [pc, #188]	; 283e0 <main@@Base+0x502c>
   28320:	add	r3, pc, r2
   28324:	movw	r2, #720	; 0x2d0
   28328:	bl	12e68 <__assert_fail@plt>
   2832c:	mov	r0, #13
   28330:	strh	r0, [sp, #16]
   28334:	ldr	r0, [fp, #-8]
   28338:	str	r0, [sp, #8]
   2833c:	bl	238a4 <main@@Base+0x4f0>
   28340:	ldr	lr, [sp, #8]
   28344:	sub	r0, lr, r0
   28348:	str	r0, [sp, #12]
   2834c:	ldr	r0, [sp, #12]
   28350:	bl	238c8 <main@@Base+0x514>
   28354:	ldrh	lr, [sp, #16]
   28358:	add	lr, lr, #3
   2835c:	lsl	lr, lr, #1
   28360:	cmp	r0, lr
   28364:	bcc	28380 <main@@Base+0x4fcc>
   28368:	ldr	r0, [sp, #12]
   2836c:	ldrh	r1, [sp, #16]
   28370:	add	r0, r0, r1, lsl #1
   28374:	add	r0, r0, #4
   28378:	bl	238c8 <main@@Base+0x514>
   2837c:	strh	r0, [fp, #-14]
   28380:	ldrsh	r0, [fp, #-14]
   28384:	cmp	r0, #0
   28388:	beq	283c4 <main@@Base+0x5010>
   2838c:	ldr	r0, [fp, #-8]
   28390:	ldrh	r1, [fp, #-14]
   28394:	add	r0, r0, r1
   28398:	str	r0, [fp, #-12]
   2839c:	ldr	r0, [fp, #-12]
   283a0:	add	r0, r0, #4
   283a4:	ldr	r1, [fp, #-12]
   283a8:	str	r0, [sp, #4]
   283ac:	mov	r0, r1
   283b0:	bl	2386c <main@@Base+0x4b8>
   283b4:	ldr	r1, [sp, #4]
   283b8:	add	r0, r1, r0
   283bc:	str	r0, [fp, #-4]
   283c0:	b	283cc <main@@Base+0x5018>
   283c4:	movw	r0, #0
   283c8:	str	r0, [fp, #-4]
   283cc:	ldr	r0, [fp, #-4]
   283d0:	mov	sp, fp
   283d4:	pop	{fp, pc}
   283d8:	ldrdeq	ip, [r0], -r9
   283dc:	strdeq	ip, [r0], -r7
   283e0:	andeq	lr, r0, pc, lsr r1
   283e4:	push	{fp, lr}
   283e8:	mov	fp, sp
   283ec:	sub	sp, sp, #48	; 0x30
   283f0:	str	r0, [fp, #-8]
   283f4:	vstr	s0, [fp, #-12]
   283f8:	vstr	s1, [fp, #-16]
   283fc:	vstr	s2, [fp, #-20]	; 0xffffffec
   28400:	vstr	d2, [sp, #16]
   28404:	strb	r1, [sp, #15]
   28408:	strh	r2, [sp, #12]
   2840c:	strb	r3, [sp, #11]
   28410:	ldr	r0, [fp, #-8]
   28414:	bl	28484 <main@@Base+0x50d0>
   28418:	str	r0, [sp, #4]
   2841c:	ldr	r0, [sp, #4]
   28420:	movw	r1, #0
   28424:	cmp	r0, r1
   28428:	bne	28438 <main@@Base+0x5084>
   2842c:	movw	r0, #0
   28430:	str	r0, [fp, #-4]
   28434:	b	28478 <main@@Base+0x50c4>
   28438:	ldr	r0, [sp, #4]
   2843c:	vldr	s0, [fp, #-12]
   28440:	vldr	s1, [fp, #-16]
   28444:	vldr	s2, [fp, #-20]	; 0xffffffec
   28448:	vldr	d2, [sp, #16]
   2844c:	ldrb	r1, [sp, #15]
   28450:	ldrh	r2, [sp, #12]
   28454:	sxtb	r1, r1
   28458:	sxth	r2, r2
   2845c:	ldrsb	r3, [sp, #11]
   28460:	bl	284b0 <main@@Base+0x50fc>
   28464:	ldr	r1, [fp, #-8]
   28468:	str	r0, [sp]
   2846c:	mov	r0, r1
   28470:	bl	28570 <main@@Base+0x51bc>
   28474:	str	r0, [fp, #-4]
   28478:	ldr	r0, [fp, #-4]
   2847c:	mov	sp, fp
   28480:	pop	{fp, pc}
   28484:	push	{fp, lr}
   28488:	mov	fp, sp
   2848c:	sub	sp, sp, #8
   28490:	str	r0, [sp, #4]
   28494:	ldr	r0, [sp, #4]
   28498:	movw	r1, #32
   2849c:	movw	r2, #16
   284a0:	uxth	r2, r2
   284a4:	bl	29fac <flatcc_builder_start_struct@@Base>
   284a8:	mov	sp, fp
   284ac:	pop	{fp, pc}
   284b0:	push	{fp, lr}
   284b4:	mov	fp, sp
   284b8:	sub	sp, sp, #56	; 0x38
   284bc:	str	r0, [fp, #-4]
   284c0:	vstr	s0, [fp, #-8]
   284c4:	vstr	s1, [fp, #-12]
   284c8:	vstr	s2, [fp, #-16]
   284cc:	vstr	d2, [fp, #-24]	; 0xffffffe8
   284d0:	strb	r1, [fp, #-25]	; 0xffffffe7
   284d4:	strh	r2, [sp, #28]
   284d8:	strb	r3, [sp, #27]
   284dc:	ldr	r0, [fp, #-4]
   284e0:	vldr	s0, [fp, #-8]
   284e4:	bl	24340 <main@@Base+0xf8c>
   284e8:	ldr	r1, [fp, #-4]
   284ec:	add	r1, r1, #4
   284f0:	vldr	s0, [fp, #-12]
   284f4:	str	r0, [sp, #20]
   284f8:	mov	r0, r1
   284fc:	bl	24340 <main@@Base+0xf8c>
   28500:	ldr	r1, [fp, #-4]
   28504:	add	r1, r1, #8
   28508:	vldr	s0, [fp, #-16]
   2850c:	str	r0, [sp, #16]
   28510:	mov	r0, r1
   28514:	bl	24340 <main@@Base+0xf8c>
   28518:	ldr	r1, [fp, #-4]
   2851c:	add	r1, r1, #16
   28520:	vldr	d0, [fp, #-24]	; 0xffffffe8
   28524:	str	r0, [sp, #12]
   28528:	mov	r0, r1
   2852c:	bl	2426c <main@@Base+0xeb8>
   28530:	ldrb	r1, [fp, #-25]	; 0xffffffe7
   28534:	ldr	r2, [fp, #-4]
   28538:	strb	r1, [r2, #24]
   2853c:	ldr	r1, [fp, #-4]
   28540:	add	r1, r1, #26
   28544:	ldrh	r2, [sp, #28]
   28548:	str	r0, [sp, #8]
   2854c:	mov	r0, r1
   28550:	sxth	r1, r2
   28554:	ldrsb	r2, [sp, #27]
   28558:	bl	28590 <main@@Base+0x51dc>
   2855c:	ldr	r1, [fp, #-4]
   28560:	str	r0, [sp, #4]
   28564:	mov	r0, r1
   28568:	mov	sp, fp
   2856c:	pop	{fp, pc}
   28570:	push	{fp, lr}
   28574:	mov	fp, sp
   28578:	sub	sp, sp, #8
   2857c:	str	r0, [sp, #4]
   28580:	ldr	r0, [sp, #4]
   28584:	bl	2a154 <flatcc_builder_end_struct@@Base>
   28588:	mov	sp, fp
   2858c:	pop	{fp, pc}
   28590:	push	{fp, lr}
   28594:	mov	fp, sp
   28598:	sub	sp, sp, #16
   2859c:	str	r0, [fp, #-4]
   285a0:	strh	r1, [fp, #-6]
   285a4:	strb	r2, [fp, #-7]
   285a8:	ldr	r0, [fp, #-4]
   285ac:	ldrsh	r1, [fp, #-6]
   285b0:	bl	24394 <main@@Base+0xfe0>
   285b4:	ldrb	r1, [fp, #-7]
   285b8:	ldr	r2, [fp, #-4]
   285bc:	strb	r1, [r2, #2]
   285c0:	ldr	r1, [fp, #-4]
   285c4:	str	r0, [sp, #4]
   285c8:	mov	r0, r1
   285cc:	mov	sp, fp
   285d0:	pop	{fp, pc}

000285d4 <flatcc_builder_default_alloc@@Base>:
   285d4:	push	{fp, lr}
   285d8:	mov	fp, sp
   285dc:	sub	sp, sp, #40	; 0x28
   285e0:	ldr	ip, [fp, #8]
   285e4:	str	r0, [fp, #-8]
   285e8:	str	r1, [fp, #-12]
   285ec:	str	r2, [fp, #-16]
   285f0:	str	r3, [sp, #20]
   285f4:	ldr	r0, [fp, #-16]
   285f8:	cmp	r0, #0
   285fc:	str	ip, [sp, #8]
   28600:	bne	28644 <flatcc_builder_default_alloc@@Base+0x70>
   28604:	ldr	r0, [fp, #-12]
   28608:	ldr	r0, [r0]
   2860c:	movw	r1, #0
   28610:	cmp	r0, r1
   28614:	beq	28638 <flatcc_builder_default_alloc@@Base+0x64>
   28618:	ldr	r0, [fp, #-12]
   2861c:	ldr	r0, [r0]
   28620:	bl	12da8 <free@plt>
   28624:	ldr	r0, [fp, #-12]
   28628:	movw	lr, #0
   2862c:	str	lr, [r0]
   28630:	ldr	r0, [fp, #-12]
   28634:	str	lr, [r0, #4]
   28638:	movw	r0, #0
   2863c:	str	r0, [fp, #-4]
   28640:	b	287b0 <flatcc_builder_default_alloc@@Base+0x1dc>
   28644:	ldr	r0, [fp, #8]
   28648:	sub	r0, r0, #1
   2864c:	cmp	r0, #6
   28650:	str	r0, [sp, #4]
   28654:	bhi	286b4 <flatcc_builder_default_alloc@@Base+0xe0>
   28658:	add	r0, pc, #8
   2865c:	ldr	r1, [sp, #4]
   28660:	ldr	r2, [r0, r1, lsl #2]
   28664:	add	pc, r0, r2
   28668:	andeq	r0, r0, ip, lsl r0
   2866c:	andeq	r0, r0, ip, asr #32
   28670:	andeq	r0, r0, ip, asr #32
   28674:	andeq	r0, r0, r4, lsr r0
   28678:	andeq	r0, r0, r8, lsr #32
   2867c:	andeq	r0, r0, ip, asr #32
   28680:	andeq	r0, r0, r0, asr #32
   28684:	movw	r0, #256	; 0x100
   28688:	str	r0, [sp, #12]
   2868c:	b	286bc <flatcc_builder_default_alloc@@Base+0xe8>
   28690:	ldr	r0, [fp, #-16]
   28694:	str	r0, [sp, #12]
   28698:	b	286bc <flatcc_builder_default_alloc@@Base+0xe8>
   2869c:	movw	r0, #288	; 0x120
   286a0:	str	r0, [sp, #12]
   286a4:	b	286bc <flatcc_builder_default_alloc@@Base+0xe8>
   286a8:	movw	r0, #64	; 0x40
   286ac:	str	r0, [sp, #12]
   286b0:	b	286bc <flatcc_builder_default_alloc@@Base+0xe8>
   286b4:	movw	r0, #32
   286b8:	str	r0, [sp, #12]
   286bc:	b	286c0 <flatcc_builder_default_alloc@@Base+0xec>
   286c0:	ldr	r0, [sp, #12]
   286c4:	ldr	r1, [fp, #-16]
   286c8:	cmp	r0, r1
   286cc:	bcs	286e0 <flatcc_builder_default_alloc@@Base+0x10c>
   286d0:	ldr	r0, [sp, #12]
   286d4:	lsl	r0, r0, #1
   286d8:	str	r0, [sp, #12]
   286dc:	b	286c0 <flatcc_builder_default_alloc@@Base+0xec>
   286e0:	ldr	r0, [fp, #-16]
   286e4:	ldr	r1, [fp, #-12]
   286e8:	ldr	r1, [r1, #4]
   286ec:	cmp	r0, r1
   286f0:	bhi	28718 <flatcc_builder_default_alloc@@Base+0x144>
   286f4:	ldr	r0, [fp, #-12]
   286f8:	ldr	r0, [r0, #4]
   286fc:	lsr	r0, r0, #1
   28700:	ldr	r1, [sp, #12]
   28704:	cmp	r0, r1
   28708:	bcc	28718 <flatcc_builder_default_alloc@@Base+0x144>
   2870c:	movw	r0, #0
   28710:	str	r0, [fp, #-4]
   28714:	b	287b0 <flatcc_builder_default_alloc@@Base+0x1dc>
   28718:	ldr	r0, [fp, #-12]
   2871c:	ldr	r0, [r0]
   28720:	ldr	r1, [sp, #12]
   28724:	bl	12dcc <realloc@plt>
   28728:	str	r0, [sp, #16]
   2872c:	movw	r1, #0
   28730:	cmp	r0, r1
   28734:	bne	28744 <flatcc_builder_default_alloc@@Base+0x170>
   28738:	mvn	r0, #0
   2873c:	str	r0, [fp, #-4]
   28740:	b	287b0 <flatcc_builder_default_alloc@@Base+0x1dc>
   28744:	ldr	r0, [sp, #20]
   28748:	cmp	r0, #0
   2874c:	beq	28790 <flatcc_builder_default_alloc@@Base+0x1bc>
   28750:	ldr	r0, [fp, #-12]
   28754:	ldr	r0, [r0, #4]
   28758:	ldr	r1, [sp, #12]
   2875c:	cmp	r0, r1
   28760:	bcs	28790 <flatcc_builder_default_alloc@@Base+0x1bc>
   28764:	ldr	r0, [sp, #16]
   28768:	ldr	r1, [fp, #-12]
   2876c:	ldr	r1, [r1, #4]
   28770:	add	r0, r0, r1
   28774:	ldr	r1, [sp, #12]
   28778:	ldr	r2, [fp, #-12]
   2877c:	ldr	r2, [r2, #4]
   28780:	sub	r2, r1, r2
   28784:	movw	r1, #0
   28788:	and	r1, r1, #255	; 0xff
   2878c:	bl	12e2c <memset@plt>
   28790:	ldr	r0, [sp, #16]
   28794:	ldr	r1, [fp, #-12]
   28798:	str	r0, [r1]
   2879c:	ldr	r0, [sp, #12]
   287a0:	ldr	r1, [fp, #-12]
   287a4:	str	r0, [r1, #4]
   287a8:	movw	r0, #0
   287ac:	str	r0, [fp, #-4]
   287b0:	ldr	r0, [fp, #-4]
   287b4:	mov	sp, fp
   287b8:	pop	{fp, pc}

000287bc <flatcc_builder_flush_vtable_cache@@Base>:
   287bc:	push	{fp, lr}
   287c0:	mov	fp, sp
   287c4:	sub	sp, sp, #8
   287c8:	str	r0, [sp, #4]
   287cc:	ldr	r0, [sp, #4]
   287d0:	add	r0, r0, #52	; 0x34
   287d4:	add	r0, r0, #40	; 0x28
   287d8:	str	r0, [sp]
   287dc:	ldr	r0, [sp, #4]
   287e0:	ldr	r0, [r0, #116]	; 0x74
   287e4:	cmp	r0, #0
   287e8:	bne	287f0 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   287ec:	b	28824 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   287f0:	ldr	r0, [sp]
   287f4:	ldr	r0, [r0]
   287f8:	ldr	r1, [sp]
   287fc:	ldr	r2, [r1, #4]
   28800:	movw	r1, #0
   28804:	and	r1, r1, #255	; 0xff
   28808:	bl	12e2c <memset@plt>
   2880c:	ldr	r0, [sp, #4]
   28810:	movw	r1, #16
   28814:	str	r1, [r0, #124]	; 0x7c
   28818:	ldr	r0, [sp, #4]
   2881c:	movw	r1, #0
   28820:	str	r1, [r0, #120]	; 0x78
   28824:	mov	sp, fp
   28828:	pop	{fp, pc}

0002882c <flatcc_builder_custom_init@@Base>:
   2882c:	push	{fp, lr}
   28830:	mov	fp, sp
   28834:	sub	sp, sp, #24
   28838:	ldr	ip, [fp, #8]
   2883c:	str	r0, [fp, #-4]
   28840:	str	r1, [fp, #-8]
   28844:	str	r2, [sp, #12]
   28848:	str	r3, [sp, #8]
   2884c:	ldr	r0, [fp, #-4]
   28850:	movw	r1, #0
   28854:	and	r1, r1, #255	; 0xff
   28858:	movw	r2, #232	; 0xe8
   2885c:	str	ip, [sp, #4]
   28860:	bl	12e2c <memset@plt>
   28864:	ldr	r0, [fp, #-8]
   28868:	movw	r1, #0
   2886c:	cmp	r0, r1
   28870:	bne	28898 <flatcc_builder_custom_init@@Base+0x6c>
   28874:	ldr	r0, [pc, #116]	; 288f0 <flatcc_builder_custom_init@@Base+0xc4>
   28878:	ldr	r0, [pc, r0]
   2887c:	ldr	r1, [fp, #-4]
   28880:	movw	r2, #1
   28884:	str	r2, [r1, #184]	; 0xb8
   28888:	str	r0, [fp, #-8]
   2888c:	ldr	r0, [fp, #-4]
   28890:	add	r0, r0, #188	; 0xbc
   28894:	str	r0, [sp, #12]
   28898:	ldr	r0, [sp, #8]
   2889c:	movw	r1, #0
   288a0:	cmp	r0, r1
   288a4:	bne	288b4 <flatcc_builder_custom_init@@Base+0x88>
   288a8:	ldr	r0, [pc, #68]	; 288f4 <flatcc_builder_custom_init@@Base+0xc8>
   288ac:	ldr	r0, [pc, r0]
   288b0:	str	r0, [sp, #8]
   288b4:	ldr	r0, [fp, #8]
   288b8:	ldr	r1, [fp, #-4]
   288bc:	str	r0, [r1, #40]	; 0x28
   288c0:	ldr	r0, [sp, #8]
   288c4:	ldr	r1, [fp, #-4]
   288c8:	str	r0, [r1, #48]	; 0x30
   288cc:	ldr	r0, [sp, #12]
   288d0:	ldr	r1, [fp, #-4]
   288d4:	str	r0, [r1, #36]	; 0x24
   288d8:	ldr	r0, [fp, #-8]
   288dc:	ldr	r1, [fp, #-4]
   288e0:	str	r0, [r1, #44]	; 0x2c
   288e4:	movw	r0, #0
   288e8:	mov	sp, fp
   288ec:	pop	{fp, pc}
   288f0:	andeq	r0, r2, r8, ror #15
   288f4:			; <UNDEFINED> instruction: 0x000207b0

000288f8 <flatcc_builder_init@@Base>:
   288f8:	push	{fp, lr}
   288fc:	mov	fp, sp
   28900:	sub	sp, sp, #16
   28904:	str	r0, [fp, #-4]
   28908:	ldr	r0, [fp, #-4]
   2890c:	movw	r1, #0
   28910:	str	r1, [sp, #8]
   28914:	ldr	r2, [sp, #8]
   28918:	ldr	r3, [sp, #8]
   2891c:	ldr	ip, [sp, #8]
   28920:	str	ip, [sp]
   28924:	bl	2882c <flatcc_builder_custom_init@@Base>
   28928:	mov	sp, fp
   2892c:	pop	{fp, pc}

00028930 <flatcc_builder_custom_reset@@Base>:
   28930:	push	{r4, sl, fp, lr}
   28934:	add	fp, sp, #8
   28938:	sub	sp, sp, #40	; 0x28
   2893c:	str	r0, [fp, #-16]
   28940:	str	r1, [fp, #-20]	; 0xffffffec
   28944:	str	r2, [sp, #24]
   28948:	movw	r0, #0
   2894c:	str	r0, [sp, #16]
   28950:	ldr	r0, [sp, #16]
   28954:	cmp	r0, #8
   28958:	bge	28a64 <flatcc_builder_custom_reset@@Base+0x134>
   2895c:	ldr	r0, [fp, #-16]
   28960:	add	r0, r0, #52	; 0x34
   28964:	ldr	r1, [sp, #16]
   28968:	add	r0, r0, r1, lsl #3
   2896c:	str	r0, [sp, #20]
   28970:	ldr	r0, [sp, #20]
   28974:	ldr	r0, [r0]
   28978:	movw	r1, #0
   2897c:	cmp	r0, r1
   28980:	beq	28a18 <flatcc_builder_custom_reset@@Base+0xe8>
   28984:	ldr	r0, [sp, #16]
   28988:	cmp	r0, #5
   2898c:	beq	289f8 <flatcc_builder_custom_reset@@Base+0xc8>
   28990:	ldr	r0, [sp, #24]
   28994:	cmp	r0, #0
   28998:	beq	289f8 <flatcc_builder_custom_reset@@Base+0xc8>
   2899c:	ldr	r0, [fp, #-16]
   289a0:	ldr	r0, [r0, #48]	; 0x30
   289a4:	ldr	r1, [fp, #-16]
   289a8:	ldr	r1, [r1, #40]	; 0x28
   289ac:	ldr	r2, [sp, #20]
   289b0:	ldr	r3, [sp, #16]
   289b4:	str	r0, [sp, #12]
   289b8:	mov	r0, r1
   289bc:	mov	r1, r2
   289c0:	movw	r2, #1
   289c4:	str	r2, [sp, #8]
   289c8:	ldr	ip, [sp, #8]
   289cc:	str	r3, [sp, #4]
   289d0:	mov	r3, ip
   289d4:	ldr	lr, [sp, #4]
   289d8:	str	lr, [sp]
   289dc:	ldr	r4, [sp, #12]
   289e0:	blx	r4
   289e4:	cmp	r0, #0
   289e8:	beq	289f8 <flatcc_builder_custom_reset@@Base+0xc8>
   289ec:	mvn	r0, #0
   289f0:	str	r0, [fp, #-12]
   289f4:	b	28b60 <flatcc_builder_custom_reset@@Base+0x230>
   289f8:	ldr	r0, [sp, #20]
   289fc:	ldr	r0, [r0]
   28a00:	ldr	r1, [sp, #20]
   28a04:	ldr	r2, [r1, #4]
   28a08:	movw	r1, #0
   28a0c:	and	r1, r1, #255	; 0xff
   28a10:	bl	12e2c <memset@plt>
   28a14:	b	28a50 <flatcc_builder_custom_reset@@Base+0x120>
   28a18:	ldr	r0, [sp, #20]
   28a1c:	ldr	r0, [r0, #4]
   28a20:	cmp	r0, #0
   28a24:	bne	28a2c <flatcc_builder_custom_reset@@Base+0xfc>
   28a28:	b	28a4c <flatcc_builder_custom_reset@@Base+0x11c>
   28a2c:	ldr	r0, [pc, #312]	; 28b6c <flatcc_builder_custom_reset@@Base+0x23c>
   28a30:	add	r0, pc, r0
   28a34:	ldr	r1, [pc, #308]	; 28b70 <flatcc_builder_custom_reset@@Base+0x240>
   28a38:	add	r1, pc, r1
   28a3c:	ldr	r2, [pc, #304]	; 28b74 <flatcc_builder_custom_reset@@Base+0x244>
   28a40:	add	r3, pc, r2
   28a44:	movw	r2, #434	; 0x1b2
   28a48:	bl	12e68 <__assert_fail@plt>
   28a4c:	b	28a50 <flatcc_builder_custom_reset@@Base+0x120>
   28a50:	b	28a54 <flatcc_builder_custom_reset@@Base+0x124>
   28a54:	ldr	r0, [sp, #16]
   28a58:	add	r0, r0, #1
   28a5c:	str	r0, [sp, #16]
   28a60:	b	28950 <flatcc_builder_custom_reset@@Base+0x20>
   28a64:	ldr	r0, [fp, #-16]
   28a68:	movw	r1, #0
   28a6c:	str	r1, [r0, #120]	; 0x78
   28a70:	ldr	r0, [fp, #-16]
   28a74:	ldr	r0, [r0, #124]	; 0x7c
   28a78:	cmp	r0, #0
   28a7c:	bls	28a8c <flatcc_builder_custom_reset@@Base+0x15c>
   28a80:	ldr	r0, [fp, #-16]
   28a84:	movw	r1, #16
   28a88:	str	r1, [r0, #124]	; 0x7c
   28a8c:	ldr	r0, [fp, #-16]
   28a90:	movw	r1, #0
   28a94:	strh	r1, [r0, #128]	; 0x80
   28a98:	ldr	r0, [fp, #-16]
   28a9c:	movw	r1, #0
   28aa0:	str	r1, [r0, #136]	; 0x88
   28aa4:	ldr	r0, [fp, #-16]
   28aa8:	str	r1, [r0, #140]	; 0x8c
   28aac:	ldr	r0, [fp, #-16]
   28ab0:	str	r1, [r0, #156]	; 0x9c
   28ab4:	ldr	r0, [fp, #-16]
   28ab8:	str	r1, [r0, #160]	; 0xa0
   28abc:	ldr	r0, [fp, #-16]
   28ac0:	str	r1, [r0, #20]
   28ac4:	ldr	r0, [fp, #-16]
   28ac8:	str	r1, [r0, #24]
   28acc:	ldr	r0, [fp, #-16]
   28ad0:	str	r1, [r0, #148]	; 0x94
   28ad4:	ldr	r0, [fp, #-16]
   28ad8:	str	r1, [r0, #152]	; 0x98
   28adc:	ldr	r0, [fp, #-16]
   28ae0:	ldr	r0, [r0, #60]	; 0x3c
   28ae4:	ldr	r2, [fp, #-16]
   28ae8:	str	r0, [r2, #16]
   28aec:	ldr	r0, [fp, #-16]
   28af0:	ldr	r0, [r0, #76]	; 0x4c
   28af4:	ldr	r2, [fp, #-16]
   28af8:	str	r0, [r2]
   28afc:	ldr	r0, [fp, #-16]
   28b00:	ldr	r0, [r0, #52]	; 0x34
   28b04:	ldr	r2, [fp, #-16]
   28b08:	str	r0, [r2, #4]
   28b0c:	ldr	r0, [fp, #-16]
   28b10:	str	r1, [r0, #32]
   28b14:	ldr	r0, [fp, #-20]	; 0xffffffec
   28b18:	cmp	r0, #0
   28b1c:	beq	28b3c <flatcc_builder_custom_reset@@Base+0x20c>
   28b20:	ldr	r0, [fp, #-16]
   28b24:	movw	r1, #0
   28b28:	str	r1, [r0, #172]	; 0xac
   28b2c:	ldr	r0, [fp, #-16]
   28b30:	str	r1, [r0, #176]	; 0xb0
   28b34:	ldr	r0, [fp, #-16]
   28b38:	str	r1, [r0, #180]	; 0xb4
   28b3c:	ldr	r0, [fp, #-16]
   28b40:	ldr	r0, [r0, #184]	; 0xb8
   28b44:	cmp	r0, #0
   28b48:	beq	28b58 <flatcc_builder_custom_reset@@Base+0x228>
   28b4c:	ldr	r0, [fp, #-16]
   28b50:	add	r0, r0, #188	; 0xbc
   28b54:	bl	2e508 <flatcc_emitter_reset@@Base>
   28b58:	movw	r0, #0
   28b5c:	str	r0, [fp, #-12]
   28b60:	ldr	r0, [fp, #-12]
   28b64:	sub	sp, fp, #8
   28b68:	pop	{r4, sl, fp, pc}
   28b6c:	andeq	sp, r0, ip, ror #28
   28b70:	andeq	sp, r0, r6, ror lr
   28b74:	andeq	sp, r0, fp, asr #29

00028b78 <flatcc_builder_reset@@Base>:
   28b78:	push	{fp, lr}
   28b7c:	mov	fp, sp
   28b80:	sub	sp, sp, #8
   28b84:	str	r0, [sp, #4]
   28b88:	ldr	r0, [sp, #4]
   28b8c:	movw	r1, #0
   28b90:	str	r1, [sp]
   28b94:	ldr	r2, [sp]
   28b98:	bl	28930 <flatcc_builder_custom_reset@@Base>
   28b9c:	mov	sp, fp
   28ba0:	pop	{fp, pc}

00028ba4 <flatcc_builder_clear@@Base>:
   28ba4:	push	{r4, sl, fp, lr}
   28ba8:	add	fp, sp, #8
   28bac:	sub	sp, sp, #32
   28bb0:	str	r0, [fp, #-12]
   28bb4:	movw	r0, #0
   28bb8:	str	r0, [sp, #20]
   28bbc:	ldr	r0, [sp, #20]
   28bc0:	cmp	r0, #8
   28bc4:	bge	28c38 <flatcc_builder_clear@@Base+0x94>
   28bc8:	ldr	r0, [fp, #-12]
   28bcc:	add	r0, r0, #52	; 0x34
   28bd0:	ldr	r1, [sp, #20]
   28bd4:	add	r0, r0, r1, lsl #3
   28bd8:	str	r0, [fp, #-16]
   28bdc:	ldr	r0, [fp, #-12]
   28be0:	ldr	r0, [r0, #48]	; 0x30
   28be4:	ldr	r1, [fp, #-12]
   28be8:	ldr	r1, [r1, #40]	; 0x28
   28bec:	ldr	r2, [fp, #-16]
   28bf0:	ldr	r3, [sp, #20]
   28bf4:	str	r0, [sp, #16]
   28bf8:	mov	r0, r1
   28bfc:	mov	r1, r2
   28c00:	movw	r2, #0
   28c04:	str	r2, [sp, #12]
   28c08:	ldr	ip, [sp, #12]
   28c0c:	str	r3, [sp, #8]
   28c10:	mov	r3, ip
   28c14:	ldr	lr, [sp, #8]
   28c18:	str	lr, [sp]
   28c1c:	ldr	r4, [sp, #16]
   28c20:	blx	r4
   28c24:	str	r0, [sp, #4]
   28c28:	ldr	r0, [sp, #20]
   28c2c:	add	r0, r0, #1
   28c30:	str	r0, [sp, #20]
   28c34:	b	28bbc <flatcc_builder_clear@@Base+0x18>
   28c38:	ldr	r0, [fp, #-12]
   28c3c:	ldr	r0, [r0, #184]	; 0xb8
   28c40:	cmp	r0, #0
   28c44:	beq	28c54 <flatcc_builder_clear@@Base+0xb0>
   28c48:	ldr	r0, [fp, #-12]
   28c4c:	add	r0, r0, #188	; 0xbc
   28c50:	bl	2e6a0 <flatcc_emitter_clear@@Base>
   28c54:	ldr	r0, [fp, #-12]
   28c58:	movw	r1, #0
   28c5c:	and	r1, r1, #255	; 0xff
   28c60:	movw	r2, #232	; 0xe8
   28c64:	bl	12e2c <memset@plt>
   28c68:	sub	sp, fp, #8
   28c6c:	pop	{r4, sl, fp, pc}

00028c70 <flatcc_builder_enter_user_frame_ptr@@Base>:
   28c70:	push	{fp, lr}
   28c74:	mov	fp, sp
   28c78:	sub	sp, sp, #24
   28c7c:	str	r0, [fp, #-8]
   28c80:	str	r1, [sp, #12]
   28c84:	ldr	r0, [sp, #12]
   28c88:	add	r0, r0, #4
   28c8c:	sub	r0, r0, #1
   28c90:	mvn	r1, #3
   28c94:	and	r0, r0, r1
   28c98:	add	r0, r0, #4
   28c9c:	str	r0, [sp, #12]
   28ca0:	ldr	r0, [fp, #-8]
   28ca4:	ldr	r1, [fp, #-8]
   28ca8:	ldr	r2, [r1, #228]	; 0xe4
   28cac:	ldr	r3, [sp, #12]
   28cb0:	movw	r1, #7
   28cb4:	movw	ip, #0
   28cb8:	str	ip, [sp]
   28cbc:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   28cc0:	str	r0, [sp, #8]
   28cc4:	movw	r1, #0
   28cc8:	cmp	r0, r1
   28ccc:	bne	28cdc <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   28cd0:	movw	r0, #0
   28cd4:	str	r0, [fp, #-4]
   28cd8:	b	28d38 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   28cdc:	ldr	r0, [sp, #8]
   28ce0:	ldr	r2, [sp, #12]
   28ce4:	movw	r1, #0
   28ce8:	and	r1, r1, #255	; 0xff
   28cec:	bl	12e2c <memset@plt>
   28cf0:	ldr	r0, [fp, #-8]
   28cf4:	ldr	r0, [r0, #224]	; 0xe0
   28cf8:	ldr	r1, [sp, #8]
   28cfc:	add	r2, r1, #4
   28d00:	str	r2, [sp, #8]
   28d04:	str	r0, [r1]
   28d08:	ldr	r0, [fp, #-8]
   28d0c:	ldr	r0, [r0, #228]	; 0xe4
   28d10:	add	r0, r0, #4
   28d14:	ldr	r1, [fp, #-8]
   28d18:	str	r0, [r1, #224]	; 0xe0
   28d1c:	ldr	r0, [sp, #12]
   28d20:	ldr	r1, [fp, #-8]
   28d24:	ldr	r2, [r1, #228]	; 0xe4
   28d28:	add	r0, r2, r0
   28d2c:	str	r0, [r1, #228]	; 0xe4
   28d30:	ldr	r0, [sp, #8]
   28d34:	str	r0, [fp, #-4]
   28d38:	ldr	r0, [fp, #-4]
   28d3c:	mov	sp, fp
   28d40:	pop	{fp, pc}
   28d44:	push	{fp, lr}
   28d48:	mov	fp, sp
   28d4c:	sub	sp, sp, #32
   28d50:	ldr	ip, [fp, #8]
   28d54:	str	r0, [fp, #-4]
   28d58:	str	r1, [fp, #-8]
   28d5c:	str	r2, [fp, #-12]
   28d60:	str	r3, [sp, #16]
   28d64:	ldr	r0, [fp, #-4]
   28d68:	add	r0, r0, #52	; 0x34
   28d6c:	ldr	r1, [fp, #-8]
   28d70:	add	r0, r0, r1, lsl #3
   28d74:	str	r0, [sp, #12]
   28d78:	ldr	r0, [fp, #-12]
   28d7c:	ldr	r1, [sp, #16]
   28d80:	add	r0, r0, r1
   28d84:	ldr	r1, [sp, #12]
   28d88:	ldr	r1, [r1, #4]
   28d8c:	cmp	r0, r1
   28d90:	str	ip, [sp, #8]
   28d94:	bls	28e0c <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   28d98:	ldr	r0, [fp, #-4]
   28d9c:	ldr	r0, [r0, #48]	; 0x30
   28da0:	ldr	r1, [fp, #-4]
   28da4:	ldr	r1, [r1, #40]	; 0x28
   28da8:	ldr	r2, [sp, #12]
   28dac:	ldr	r3, [fp, #-12]
   28db0:	ldr	ip, [sp, #16]
   28db4:	add	r3, r3, ip
   28db8:	ldr	ip, [fp, #8]
   28dbc:	ldr	lr, [fp, #-8]
   28dc0:	str	r0, [sp, #4]
   28dc4:	mov	r0, r1
   28dc8:	mov	r1, r2
   28dcc:	mov	r2, r3
   28dd0:	mov	r3, ip
   28dd4:	str	lr, [sp]
   28dd8:	ldr	ip, [sp, #4]
   28ddc:	blx	ip
   28de0:	cmp	r0, #0
   28de4:	beq	28e08 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   28de8:	ldr	r0, [pc, #52]	; 28e24 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   28dec:	add	r0, pc, r0
   28df0:	ldr	r1, [pc, #48]	; 28e28 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   28df4:	add	r1, pc, r1
   28df8:	ldr	r2, [pc, #44]	; 28e2c <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   28dfc:	add	r3, pc, r2
   28e00:	movw	r2, #308	; 0x134
   28e04:	bl	12e68 <__assert_fail@plt>
   28e08:	b	28e0c <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   28e0c:	ldr	r0, [sp, #12]
   28e10:	ldr	r0, [r0]
   28e14:	ldr	r1, [fp, #-12]
   28e18:	add	r0, r0, r1
   28e1c:	mov	sp, fp
   28e20:	pop	{fp, pc}
   28e24:	andeq	lr, r0, pc, ror ip
   28e28:			; <UNDEFINED> instruction: 0x0000daba
   28e2c:	andeq	lr, r0, r9, lsr #21

00028e30 <flatcc_builder_enter_user_frame@@Base>:
   28e30:	push	{fp, lr}
   28e34:	mov	fp, sp
   28e38:	sub	sp, sp, #24
   28e3c:	str	r0, [fp, #-8]
   28e40:	str	r1, [sp, #12]
   28e44:	ldr	r0, [sp, #12]
   28e48:	add	r0, r0, #4
   28e4c:	sub	r0, r0, #1
   28e50:	mvn	r1, #3
   28e54:	and	r0, r0, r1
   28e58:	add	r0, r0, #4
   28e5c:	str	r0, [sp, #12]
   28e60:	ldr	r0, [fp, #-8]
   28e64:	ldr	r1, [fp, #-8]
   28e68:	ldr	r2, [r1, #228]	; 0xe4
   28e6c:	ldr	r3, [sp, #12]
   28e70:	movw	r1, #7
   28e74:	movw	ip, #0
   28e78:	str	ip, [sp]
   28e7c:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   28e80:	str	r0, [sp, #8]
   28e84:	movw	r1, #0
   28e88:	cmp	r0, r1
   28e8c:	bne	28e9c <flatcc_builder_enter_user_frame@@Base+0x6c>
   28e90:	movw	r0, #0
   28e94:	str	r0, [fp, #-4]
   28e98:	b	28efc <flatcc_builder_enter_user_frame@@Base+0xcc>
   28e9c:	ldr	r0, [sp, #8]
   28ea0:	ldr	r2, [sp, #12]
   28ea4:	movw	r1, #0
   28ea8:	and	r1, r1, #255	; 0xff
   28eac:	bl	12e2c <memset@plt>
   28eb0:	ldr	r0, [fp, #-8]
   28eb4:	ldr	r0, [r0, #224]	; 0xe0
   28eb8:	ldr	r1, [sp, #8]
   28ebc:	add	r2, r1, #4
   28ec0:	str	r2, [sp, #8]
   28ec4:	str	r0, [r1]
   28ec8:	ldr	r0, [fp, #-8]
   28ecc:	ldr	r0, [r0, #228]	; 0xe4
   28ed0:	add	r0, r0, #4
   28ed4:	ldr	r1, [fp, #-8]
   28ed8:	str	r0, [r1, #224]	; 0xe0
   28edc:	ldr	r0, [sp, #12]
   28ee0:	ldr	r1, [fp, #-8]
   28ee4:	ldr	r2, [r1, #228]	; 0xe4
   28ee8:	add	r0, r2, r0
   28eec:	str	r0, [r1, #228]	; 0xe4
   28ef0:	ldr	r0, [fp, #-8]
   28ef4:	ldr	r0, [r0, #224]	; 0xe0
   28ef8:	str	r0, [fp, #-4]
   28efc:	ldr	r0, [fp, #-4]
   28f00:	mov	sp, fp
   28f04:	pop	{fp, pc}

00028f08 <flatcc_builder_exit_user_frame@@Base>:
   28f08:	push	{fp, lr}
   28f0c:	mov	fp, sp
   28f10:	sub	sp, sp, #8
   28f14:	str	r0, [sp, #4]
   28f18:	ldr	r0, [sp, #4]
   28f1c:	ldr	r0, [r0, #224]	; 0xe0
   28f20:	cmp	r0, #0
   28f24:	bls	28f2c <flatcc_builder_exit_user_frame@@Base+0x24>
   28f28:	b	28f4c <flatcc_builder_exit_user_frame@@Base+0x44>
   28f2c:	ldr	r0, [pc, #100]	; 28f98 <flatcc_builder_exit_user_frame@@Base+0x90>
   28f30:	add	r0, pc, r0
   28f34:	ldr	r1, [pc, #96]	; 28f9c <flatcc_builder_exit_user_frame@@Base+0x94>
   28f38:	add	r1, pc, r1
   28f3c:	ldr	r2, [pc, #92]	; 28fa0 <flatcc_builder_exit_user_frame@@Base+0x98>
   28f40:	add	r3, pc, r2
   28f44:	movw	r2, #542	; 0x21e
   28f48:	bl	12e68 <__assert_fail@plt>
   28f4c:	ldr	r0, [sp, #4]
   28f50:	ldr	r0, [r0, #108]	; 0x6c
   28f54:	ldr	r1, [sp, #4]
   28f58:	ldr	r1, [r1, #224]	; 0xe0
   28f5c:	add	r0, r0, r1
   28f60:	str	r0, [sp]
   28f64:	ldr	r0, [sp, #4]
   28f68:	ldr	r0, [r0, #224]	; 0xe0
   28f6c:	sub	r0, r0, #4
   28f70:	ldr	r1, [sp, #4]
   28f74:	str	r0, [r1, #228]	; 0xe4
   28f78:	ldr	r0, [sp]
   28f7c:	mvn	r1, #3
   28f80:	add	r0, r0, r1
   28f84:	ldr	r0, [r0]
   28f88:	ldr	r1, [sp, #4]
   28f8c:	str	r0, [r1, #224]	; 0xe0
   28f90:	mov	sp, fp
   28f94:	pop	{fp, pc}
   28f98:	andeq	sp, r0, r9, lsl sl
   28f9c:	andeq	sp, r0, r6, ror r9
   28fa0:	andeq	sp, r0, r2, lsr #20

00028fa4 <flatcc_builder_exit_user_frame_at@@Base>:
   28fa4:	push	{fp, lr}
   28fa8:	mov	fp, sp
   28fac:	sub	sp, sp, #8
   28fb0:	str	r0, [sp, #4]
   28fb4:	str	r1, [sp]
   28fb8:	ldr	r0, [sp, #4]
   28fbc:	ldr	r0, [r0, #224]	; 0xe0
   28fc0:	ldr	r1, [sp]
   28fc4:	cmp	r0, r1
   28fc8:	bcc	28fd0 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   28fcc:	b	28ff0 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   28fd0:	ldr	r0, [pc, #52]	; 2900c <flatcc_builder_exit_user_frame_at@@Base+0x68>
   28fd4:	add	r0, pc, r0
   28fd8:	ldr	r1, [pc, #48]	; 29010 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   28fdc:	add	r1, pc, r1
   28fe0:	ldr	r2, [pc, #44]	; 29014 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   28fe4:	add	r3, pc, r2
   28fe8:	movw	r2, #551	; 0x227
   28fec:	bl	12e68 <__assert_fail@plt>
   28ff0:	ldr	r0, [sp]
   28ff4:	ldr	r1, [sp, #4]
   28ff8:	str	r0, [r1, #224]	; 0xe0
   28ffc:	ldr	r0, [sp, #4]
   29000:	bl	28f08 <flatcc_builder_exit_user_frame@@Base>
   29004:	mov	sp, fp
   29008:	pop	{fp, pc}
   2900c:	andeq	sp, r0, r8, asr #19
   29010:	ldrdeq	sp, [r0], -r2
   29014:	ldrdeq	sp, [r0], -r7

00029018 <flatcc_builder_get_current_user_frame@@Base>:
   29018:	sub	sp, sp, #4
   2901c:	str	r0, [sp]
   29020:	ldr	r0, [sp]
   29024:	ldr	r0, [r0, #224]	; 0xe0
   29028:	add	sp, sp, #4
   2902c:	bx	lr

00029030 <flatcc_builder_get_user_frame_ptr@@Base>:
   29030:	sub	sp, sp, #8
   29034:	str	r0, [sp, #4]
   29038:	str	r1, [sp]
   2903c:	ldr	r0, [sp, #4]
   29040:	ldr	r0, [r0, #108]	; 0x6c
   29044:	ldr	r1, [sp]
   29048:	add	r0, r0, r1
   2904c:	add	sp, sp, #8
   29050:	bx	lr

00029054 <flatcc_builder_embed_buffer@@Base>:
   29054:	push	{fp, lr}
   29058:	mov	fp, sp
   2905c:	sub	sp, sp, #120	; 0x78
   29060:	ldr	ip, [fp, #12]
   29064:	ldr	lr, [fp, #8]
   29068:	str	r0, [fp, #-8]
   2906c:	strh	r1, [fp, #-10]
   29070:	str	r2, [fp, #-16]
   29074:	str	r3, [fp, #-20]	; 0xffffffec
   29078:	strh	lr, [fp, #-22]	; 0xffffffea
   2907c:	ldr	r0, [fp, #12]
   29080:	and	r0, r0, #2
   29084:	str	r0, [sp, #12]
   29088:	ldr	r0, [fp, #-8]
   2908c:	ldrh	r1, [fp, #-10]
   29090:	ldr	r2, [fp, #-8]
   29094:	ldr	r2, [r2, #152]	; 0x98
   29098:	cmp	r2, #0
   2909c:	movw	r2, #0
   290a0:	moveq	r2, #1
   290a4:	mvn	r3, #0
   290a8:	eor	r2, r2, r3
   290ac:	and	r3, r2, #1
   290b0:	sub	r2, fp, #22
   290b4:	str	r1, [sp, #8]
   290b8:	mov	r1, r2
   290bc:	ldr	r2, [sp, #8]
   290c0:	uxth	r2, r2
   290c4:	str	ip, [sp, #4]
   290c8:	bl	2923c <flatcc_builder_embed_buffer@@Base+0x1e8>
   290cc:	cmp	r0, #0
   290d0:	beq	290e0 <flatcc_builder_embed_buffer@@Base+0x8c>
   290d4:	movw	r0, #0
   290d8:	str	r0, [fp, #-4]
   290dc:	b	2922c <flatcc_builder_embed_buffer@@Base+0x1d8>
   290e0:	ldr	r0, [fp, #-8]
   290e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   290e8:	ldr	r2, [sp, #12]
   290ec:	cmp	r2, #0
   290f0:	movw	r2, #0
   290f4:	movne	r2, #1
   290f8:	tst	r2, #1
   290fc:	movw	r2, #4
   29100:	moveq	r2, #0
   29104:	add	r1, r1, r2
   29108:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2910c:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   29110:	str	r0, [fp, #-32]	; 0xffffffe0
   29114:	ldr	r0, [fp, #-20]	; 0xffffffec
   29118:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2911c:	add	r0, r0, r1
   29120:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   29124:	str	r0, [fp, #-28]	; 0xffffffe4
   29128:	movw	r0, #0
   2912c:	str	r0, [sp, #16]
   29130:	str	r0, [sp, #20]
   29134:	ldr	r0, [fp, #-8]
   29138:	ldr	r0, [r0, #152]	; 0x98
   2913c:	cmp	r0, #0
   29140:	beq	29180 <flatcc_builder_embed_buffer@@Base+0x12c>
   29144:	ldr	r0, [sp, #16]
   29148:	add	r0, r0, #4
   2914c:	str	r0, [sp, #16]
   29150:	add	r0, sp, #16
   29154:	add	r0, r0, #8
   29158:	ldr	r1, [sp, #20]
   2915c:	sub	r2, fp, #28
   29160:	str	r2, [r0, r1, lsl #3]
   29164:	ldr	r1, [sp, #20]
   29168:	add	r0, r0, r1, lsl #3
   2916c:	movw	r1, #4
   29170:	str	r1, [r0, #4]
   29174:	ldr	r0, [sp, #20]
   29178:	add	r0, r0, #1
   2917c:	str	r0, [sp, #20]
   29180:	ldr	r0, [fp, #-20]	; 0xffffffec
   29184:	cmp	r0, #0
   29188:	bls	291cc <flatcc_builder_embed_buffer@@Base+0x178>
   2918c:	ldr	r0, [fp, #-20]	; 0xffffffec
   29190:	ldr	r1, [sp, #16]
   29194:	add	r0, r1, r0
   29198:	str	r0, [sp, #16]
   2919c:	ldr	r0, [fp, #-16]
   291a0:	add	r1, sp, #16
   291a4:	add	r1, r1, #8
   291a8:	ldr	r2, [sp, #20]
   291ac:	str	r0, [r1, r2, lsl #3]
   291b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   291b4:	ldr	r2, [sp, #20]
   291b8:	add	r1, r1, r2, lsl #3
   291bc:	str	r0, [r1, #4]
   291c0:	ldr	r0, [sp, #20]
   291c4:	add	r0, r0, #1
   291c8:	str	r0, [sp, #20]
   291cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   291d0:	cmp	r0, #0
   291d4:	bls	2921c <flatcc_builder_embed_buffer@@Base+0x1c8>
   291d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   291dc:	ldr	r1, [sp, #16]
   291e0:	add	r0, r1, r0
   291e4:	str	r0, [sp, #16]
   291e8:	add	r0, sp, #16
   291ec:	add	r0, r0, #8
   291f0:	ldr	r1, [sp, #20]
   291f4:	ldr	r2, [pc, #60]	; 29238 <flatcc_builder_embed_buffer@@Base+0x1e4>
   291f8:	ldr	r2, [pc, r2]
   291fc:	str	r2, [r0, r1, lsl #3]
   29200:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29204:	ldr	r2, [sp, #20]
   29208:	add	r0, r0, r2, lsl #3
   2920c:	str	r1, [r0, #4]
   29210:	ldr	r0, [sp, #20]
   29214:	add	r0, r0, #1
   29218:	str	r0, [sp, #20]
   2921c:	ldr	r0, [fp, #-8]
   29220:	add	r1, sp, #16
   29224:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   29228:	str	r0, [fp, #-4]
   2922c:	ldr	r0, [fp, #-4]
   29230:	mov	sp, fp
   29234:	pop	{fp, pc}
   29238:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   2923c:	push	{fp, lr}
   29240:	mov	fp, sp
   29244:	sub	sp, sp, #104	; 0x68
   29248:	str	r0, [fp, #-4]
   2924c:	str	r1, [fp, #-8]
   29250:	strh	r2, [fp, #-10]
   29254:	str	r3, [fp, #-16]
   29258:	ldrh	r0, [fp, #-10]
   2925c:	cmp	r0, #0
   29260:	beq	29270 <flatcc_builder_embed_buffer@@Base+0x21c>
   29264:	ldrh	r0, [fp, #-10]
   29268:	str	r0, [sp, #8]
   2926c:	b	292a4 <flatcc_builder_embed_buffer@@Base+0x250>
   29270:	ldr	r0, [fp, #-4]
   29274:	ldrh	r0, [r0, #132]	; 0x84
   29278:	cmp	r0, #0
   2927c:	beq	29290 <flatcc_builder_embed_buffer@@Base+0x23c>
   29280:	ldr	r0, [fp, #-4]
   29284:	ldrh	r0, [r0, #132]	; 0x84
   29288:	str	r0, [sp, #4]
   2928c:	b	2929c <flatcc_builder_embed_buffer@@Base+0x248>
   29290:	movw	r0, #1
   29294:	str	r0, [sp, #4]
   29298:	b	2929c <flatcc_builder_embed_buffer@@Base+0x248>
   2929c:	ldr	r0, [sp, #4]
   292a0:	str	r0, [sp, #8]
   292a4:	ldr	r0, [sp, #8]
   292a8:	strh	r0, [fp, #-10]
   292ac:	ldr	r0, [fp, #-8]
   292b0:	movw	r1, #4
   292b4:	uxth	r1, r1
   292b8:	bl	2ada8 <flatcc_builder_start_vector@@Base+0xac>
   292bc:	ldr	r0, [fp, #-8]
   292c0:	ldrh	r1, [fp, #-10]
   292c4:	bl	2ada8 <flatcc_builder_start_vector@@Base+0xac>
   292c8:	ldr	r0, [fp, #-16]
   292cc:	cmp	r0, #0
   292d0:	bne	2938c <flatcc_builder_embed_buffer@@Base+0x338>
   292d4:	ldr	r0, [fp, #-4]
   292d8:	ldrh	r1, [fp, #-10]
   292dc:	bl	2e1f0 <flatcc_builder_get_emit_context@@Base+0x18>
   292e0:	str	r0, [fp, #-20]	; 0xffffffec
   292e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   292e8:	cmp	r0, #0
   292ec:	beq	29388 <flatcc_builder_embed_buffer@@Base+0x334>
   292f0:	movw	r0, #0
   292f4:	str	r0, [sp, #12]
   292f8:	str	r0, [sp, #16]
   292fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   29300:	cmp	r0, #0
   29304:	bls	2934c <flatcc_builder_embed_buffer@@Base+0x2f8>
   29308:	ldr	r0, [fp, #-20]	; 0xffffffec
   2930c:	ldr	r1, [sp, #12]
   29310:	add	r0, r1, r0
   29314:	str	r0, [sp, #12]
   29318:	add	r0, sp, #12
   2931c:	add	r0, r0, #8
   29320:	ldr	r1, [sp, #16]
   29324:	ldr	r2, [pc, #120]	; 293a4 <flatcc_builder_embed_buffer@@Base+0x350>
   29328:	ldr	r2, [pc, r2]
   2932c:	str	r2, [r0, r1, lsl #3]
   29330:	ldr	r1, [fp, #-20]	; 0xffffffec
   29334:	ldr	r2, [sp, #16]
   29338:	add	r0, r0, r2, lsl #3
   2933c:	str	r1, [r0, #4]
   29340:	ldr	r0, [sp, #16]
   29344:	add	r0, r0, #1
   29348:	str	r0, [sp, #16]
   2934c:	ldr	r0, [fp, #-4]
   29350:	add	r1, sp, #12
   29354:	bl	2b38c <flatcc_builder_create_vtable@@Base+0x104>
   29358:	movw	r1, #0
   2935c:	cmp	r1, r0
   29360:	bne	29384 <flatcc_builder_embed_buffer@@Base+0x330>
   29364:	ldr	r0, [pc, #44]	; 29398 <flatcc_builder_embed_buffer@@Base+0x344>
   29368:	add	r0, pc, r0
   2936c:	ldr	r1, [pc, #40]	; 2939c <flatcc_builder_embed_buffer@@Base+0x348>
   29370:	add	r1, pc, r1
   29374:	ldr	r2, [pc, #36]	; 293a0 <flatcc_builder_embed_buffer@@Base+0x34c>
   29378:	add	r3, pc, r2
   2937c:	movw	r2, #702	; 0x2be
   29380:	bl	12e68 <__assert_fail@plt>
   29384:	b	29388 <flatcc_builder_embed_buffer@@Base+0x334>
   29388:	b	2938c <flatcc_builder_embed_buffer@@Base+0x338>
   2938c:	movw	r0, #0
   29390:	mov	sp, fp
   29394:	pop	{fp, pc}
   29398:	andeq	lr, r0, r3, lsl #14
   2939c:	andeq	sp, r0, lr, lsr r5
   293a0:	andeq	lr, r0, r0, ror r5
   293a4:	andeq	pc, r1, r8, lsr #26
   293a8:	sub	sp, sp, #12
   293ac:	str	r0, [sp, #8]
   293b0:	str	r1, [sp, #4]
   293b4:	strh	r2, [sp, #2]
   293b8:	ldr	r0, [sp, #8]
   293bc:	ldr	r0, [r0, #136]	; 0x88
   293c0:	ldr	r1, [sp, #4]
   293c4:	sub	r0, r0, r1
   293c8:	ldrh	r1, [sp, #2]
   293cc:	sub	r1, r1, #1
   293d0:	and	r0, r0, r1
   293d4:	add	sp, sp, #12
   293d8:	bx	lr
   293dc:	sub	sp, sp, #4
   293e0:	str	r0, [sp]
   293e4:	ldr	r0, [sp]
   293e8:	add	sp, sp, #4
   293ec:	bx	lr
   293f0:	push	{fp, lr}
   293f4:	mov	fp, sp
   293f8:	sub	sp, sp, #24
   293fc:	str	r0, [fp, #-4]
   29400:	str	r1, [fp, #-8]
   29404:	ldr	r0, [fp, #-4]
   29408:	ldr	r0, [r0, #136]	; 0x88
   2940c:	ldr	r1, [fp, #-8]
   29410:	ldr	r1, [r1]
   29414:	sub	r0, r0, r1
   29418:	str	r0, [sp, #12]
   2941c:	ldr	r0, [fp, #-8]
   29420:	ldr	r0, [r0]
   29424:	cmp	r0, #16
   29428:	bls	29440 <flatcc_builder_embed_buffer@@Base+0x3ec>
   2942c:	ldr	r0, [fp, #-8]
   29430:	ldr	r0, [r0]
   29434:	sub	r0, r0, #16
   29438:	cmn	r0, #1
   2943c:	bhi	29454 <flatcc_builder_embed_buffer@@Base+0x400>
   29440:	ldr	r0, [sp, #12]
   29444:	ldr	r1, [fp, #-4]
   29448:	ldr	r1, [r1, #136]	; 0x88
   2944c:	cmp	r0, r1
   29450:	blt	29474 <flatcc_builder_embed_buffer@@Base+0x420>
   29454:	ldr	r0, [pc, #172]	; 29508 <flatcc_builder_embed_buffer@@Base+0x4b4>
   29458:	add	r0, pc, r0
   2945c:	ldr	r1, [pc, #168]	; 2950c <flatcc_builder_embed_buffer@@Base+0x4b8>
   29460:	add	r1, pc, r1
   29464:	ldr	r2, [pc, #164]	; 29510 <flatcc_builder_embed_buffer@@Base+0x4bc>
   29468:	add	r3, pc, r2
   2946c:	movw	r2, #647	; 0x287
   29470:	bl	12e68 <__assert_fail@plt>
   29474:	ldr	r0, [fp, #-4]
   29478:	ldr	r0, [r0, #44]	; 0x2c
   2947c:	ldr	r1, [fp, #-4]
   29480:	ldr	r1, [r1, #36]	; 0x24
   29484:	ldr	r2, [fp, #-8]
   29488:	add	r2, r2, #8
   2948c:	ldr	r3, [fp, #-8]
   29490:	ldr	r3, [r3, #4]
   29494:	ldr	ip, [sp, #12]
   29498:	ldr	lr, [fp, #-8]
   2949c:	ldr	lr, [lr]
   294a0:	str	r0, [sp, #8]
   294a4:	mov	r0, r1
   294a8:	mov	r1, r2
   294ac:	mov	r2, r3
   294b0:	mov	r3, ip
   294b4:	str	lr, [sp]
   294b8:	ldr	ip, [sp, #8]
   294bc:	blx	ip
   294c0:	cmp	r0, #0
   294c4:	beq	294e8 <flatcc_builder_embed_buffer@@Base+0x494>
   294c8:	ldr	r0, [pc, #44]	; 294fc <flatcc_builder_embed_buffer@@Base+0x4a8>
   294cc:	add	r0, pc, r0
   294d0:	ldr	r1, [pc, #40]	; 29500 <flatcc_builder_embed_buffer@@Base+0x4ac>
   294d4:	add	r1, pc, r1
   294d8:	ldr	r2, [pc, #36]	; 29504 <flatcc_builder_embed_buffer@@Base+0x4b0>
   294dc:	add	r3, pc, r2
   294e0:	movw	r2, #651	; 0x28b
   294e4:	bl	12e68 <__assert_fail@plt>
   294e8:	ldr	r0, [sp, #12]
   294ec:	ldr	r1, [fp, #-4]
   294f0:	str	r0, [r1, #136]	; 0x88
   294f4:	mov	sp, fp
   294f8:	pop	{fp, pc}
   294fc:	muleq	r0, pc, r5	; <UNPREDICTABLE>
   29500:	ldrdeq	sp, [r0], -sl
   29504:	andeq	lr, r0, lr, asr #8
   29508:	andeq	lr, r0, r3, lsl r6
   2950c:	andeq	sp, r0, lr, asr #8
   29510:	andeq	lr, r0, r2, asr #9

00029514 <flatcc_builder_create_buffer@@Base>:
   29514:	push	{fp, lr}
   29518:	mov	fp, sp
   2951c:	sub	sp, sp, #152	; 0x98
   29520:	ldr	ip, [fp, #12]
   29524:	ldr	lr, [fp, #8]
   29528:	str	r0, [fp, #-8]
   2952c:	str	r1, [fp, #-12]
   29530:	strh	r2, [fp, #-14]
   29534:	str	r3, [fp, #-20]	; 0xffffffec
   29538:	strh	lr, [fp, #-22]	; 0xffffffea
   2953c:	movw	r0, #0
   29540:	str	r0, [fp, #-36]	; 0xffffffdc
   29544:	str	r0, [sp, #28]
   29548:	ldr	r0, [fp, #12]
   2954c:	and	r0, r0, #1
   29550:	cmp	r0, #0
   29554:	movw	r0, #0
   29558:	movne	r0, #1
   2955c:	and	r0, r0, #1
   29560:	str	r0, [sp, #24]
   29564:	ldr	r0, [fp, #12]
   29568:	and	r0, r0, #2
   2956c:	cmp	r0, #0
   29570:	movw	r0, #0
   29574:	movne	r0, #1
   29578:	and	r0, r0, #1
   2957c:	str	r0, [sp, #20]
   29580:	ldr	r0, [fp, #-8]
   29584:	ldrh	r1, [fp, #-14]
   29588:	ldr	r3, [sp, #24]
   2958c:	sub	r2, fp, #22
   29590:	str	r1, [sp, #16]
   29594:	mov	r1, r2
   29598:	ldr	r2, [sp, #16]
   2959c:	uxth	r2, r2
   295a0:	str	ip, [sp, #12]
   295a4:	bl	2923c <flatcc_builder_embed_buffer@@Base+0x1e8>
   295a8:	cmp	r0, #0
   295ac:	beq	295bc <flatcc_builder_create_buffer@@Base+0xa8>
   295b0:	movw	r0, #0
   295b4:	str	r0, [fp, #-4]
   295b8:	b	298a0 <flatcc_builder_create_buffer@@Base+0x38c>
   295bc:	ldr	r0, [fp, #-8]
   295c0:	ldrh	r1, [fp, #-22]	; 0xffffffea
   295c4:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   295c8:	ldr	r0, [fp, #-12]
   295cc:	movw	r1, #0
   295d0:	cmp	r0, r1
   295d4:	beq	29614 <flatcc_builder_create_buffer@@Base+0x100>
   295d8:	ldr	r0, [fp, #-12]
   295dc:	ldrb	r1, [r0]
   295e0:	strb	r1, [sp, #28]
   295e4:	ldrb	r1, [r0, #1]
   295e8:	strb	r1, [sp, #29]
   295ec:	ldrb	r1, [r0, #2]
   295f0:	strb	r1, [sp, #30]
   295f4:	ldrb	r0, [r0, #3]
   295f8:	strb	r0, [sp, #31]
   295fc:	ldr	r0, [sp, #28]
   29600:	bl	298f0 <flatcc_builder_create_buffer@@Base+0x3dc>
   29604:	str	r0, [sp, #28]
   29608:	ldr	r0, [sp, #28]
   2960c:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   29610:	str	r0, [sp, #28]
   29614:	ldr	r0, [sp, #28]
   29618:	cmp	r0, #0
   2961c:	movw	r0, #0
   29620:	movne	r0, #1
   29624:	tst	r0, #1
   29628:	movw	r0, #4
   2962c:	mov	r1, r0
   29630:	moveq	r1, #0
   29634:	str	r1, [fp, #-36]	; 0xffffffdc
   29638:	ldr	r1, [fp, #-8]
   2963c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   29640:	add	r2, r2, #4
   29644:	ldr	r3, [sp, #20]
   29648:	cmp	r3, #0
   2964c:	movw	r3, #0
   29650:	movne	r3, #1
   29654:	tst	r3, #1
   29658:	moveq	r0, #0
   2965c:	add	r0, r2, r0
   29660:	str	r0, [sp, #8]
   29664:	mov	r0, r1
   29668:	ldr	r1, [sp, #8]
   2966c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   29670:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   29674:	str	r0, [fp, #-32]	; 0xffffffe0
   29678:	movw	r0, #0
   2967c:	str	r0, [sp, #32]
   29680:	str	r0, [sp, #36]	; 0x24
   29684:	ldr	r0, [sp, #24]
   29688:	cmp	r0, #0
   2968c:	bne	2969c <flatcc_builder_create_buffer@@Base+0x188>
   29690:	ldr	r0, [sp, #20]
   29694:	cmp	r0, #0
   29698:	beq	296d8 <flatcc_builder_create_buffer@@Base+0x1c4>
   2969c:	ldr	r0, [sp, #32]
   296a0:	add	r0, r0, #4
   296a4:	str	r0, [sp, #32]
   296a8:	add	r0, sp, #32
   296ac:	add	r0, r0, #8
   296b0:	ldr	r1, [sp, #36]	; 0x24
   296b4:	sub	r2, fp, #44	; 0x2c
   296b8:	str	r2, [r0, r1, lsl #3]
   296bc:	ldr	r1, [sp, #36]	; 0x24
   296c0:	add	r0, r0, r1, lsl #3
   296c4:	movw	r1, #4
   296c8:	str	r1, [r0, #4]
   296cc:	ldr	r0, [sp, #36]	; 0x24
   296d0:	add	r0, r0, #1
   296d4:	str	r0, [sp, #36]	; 0x24
   296d8:	ldr	r0, [sp, #32]
   296dc:	add	r0, r0, #4
   296e0:	str	r0, [sp, #32]
   296e4:	add	r0, sp, #32
   296e8:	add	r0, r0, #8
   296ec:	ldr	r1, [sp, #36]	; 0x24
   296f0:	sub	r2, fp, #40	; 0x28
   296f4:	str	r2, [r0, r1, lsl #3]
   296f8:	ldr	r1, [sp, #36]	; 0x24
   296fc:	add	r0, r0, r1, lsl #3
   29700:	movw	r1, #4
   29704:	str	r1, [r0, #4]
   29708:	ldr	r0, [sp, #36]	; 0x24
   2970c:	add	r0, r0, #1
   29710:	str	r0, [sp, #36]	; 0x24
   29714:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29718:	cmp	r0, #0
   2971c:	bls	29760 <flatcc_builder_create_buffer@@Base+0x24c>
   29720:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29724:	ldr	r1, [sp, #32]
   29728:	add	r0, r1, r0
   2972c:	str	r0, [sp, #32]
   29730:	add	r0, sp, #32
   29734:	add	r0, r0, #8
   29738:	ldr	r1, [sp, #36]	; 0x24
   2973c:	add	r2, sp, #28
   29740:	str	r2, [r0, r1, lsl #3]
   29744:	ldr	r1, [fp, #-36]	; 0xffffffdc
   29748:	ldr	r2, [sp, #36]	; 0x24
   2974c:	add	r0, r0, r2, lsl #3
   29750:	str	r1, [r0, #4]
   29754:	ldr	r0, [sp, #36]	; 0x24
   29758:	add	r0, r0, #1
   2975c:	str	r0, [sp, #36]	; 0x24
   29760:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29764:	cmp	r0, #0
   29768:	bls	297b0 <flatcc_builder_create_buffer@@Base+0x29c>
   2976c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29770:	ldr	r1, [sp, #32]
   29774:	add	r0, r1, r0
   29778:	str	r0, [sp, #32]
   2977c:	add	r0, sp, #32
   29780:	add	r0, r0, #8
   29784:	ldr	r1, [sp, #36]	; 0x24
   29788:	ldr	r2, [pc, #296]	; 298b8 <flatcc_builder_create_buffer@@Base+0x3a4>
   2978c:	ldr	r2, [pc, r2]
   29790:	str	r2, [r0, r1, lsl #3]
   29794:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29798:	ldr	r2, [sp, #36]	; 0x24
   2979c:	add	r0, r0, r2, lsl #3
   297a0:	str	r1, [r0, #4]
   297a4:	ldr	r0, [sp, #36]	; 0x24
   297a8:	add	r0, r0, #1
   297ac:	str	r0, [sp, #36]	; 0x24
   297b0:	ldr	r0, [fp, #-8]
   297b4:	ldr	r0, [r0, #136]	; 0x88
   297b8:	ldr	r1, [sp, #32]
   297bc:	sub	r0, r0, r1
   297c0:	ldr	r1, [sp, #24]
   297c4:	cmp	r1, #0
   297c8:	movw	r1, #1
   297cc:	str	r0, [sp, #4]
   297d0:	str	r1, [sp]
   297d4:	bne	297ec <flatcc_builder_create_buffer@@Base+0x2d8>
   297d8:	ldr	r0, [sp, #20]
   297dc:	cmp	r0, #0
   297e0:	movw	r0, #0
   297e4:	movne	r0, #1
   297e8:	str	r0, [sp]
   297ec:	ldr	r0, [sp]
   297f0:	tst	r0, #1
   297f4:	movw	r0, #4
   297f8:	moveq	r0, #0
   297fc:	ldr	r1, [sp, #4]
   29800:	add	r0, r1, r0
   29804:	str	r0, [fp, #-48]	; 0xffffffd0
   29808:	ldr	r0, [sp, #24]
   2980c:	cmp	r0, #0
   29810:	beq	29830 <flatcc_builder_create_buffer@@Base+0x31c>
   29814:	ldr	r0, [fp, #-8]
   29818:	ldr	r0, [r0, #144]	; 0x90
   2981c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   29820:	sub	r0, r0, r1
   29824:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   29828:	str	r0, [fp, #-44]	; 0xffffffd4
   2982c:	b	29848 <flatcc_builder_create_buffer@@Base+0x334>
   29830:	ldr	r0, [fp, #-8]
   29834:	ldr	r0, [r0, #140]	; 0x8c
   29838:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2983c:	sub	r0, r0, r1
   29840:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   29844:	str	r0, [fp, #-44]	; 0xffffffd4
   29848:	ldr	r0, [fp, #-20]	; 0xffffffec
   2984c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   29850:	sub	r0, r0, r1
   29854:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   29858:	str	r0, [fp, #-40]	; 0xffffffd8
   2985c:	ldr	r0, [fp, #-8]
   29860:	add	r1, sp, #32
   29864:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   29868:	str	r0, [fp, #-28]	; 0xffffffe4
   2986c:	movw	r1, #0
   29870:	cmp	r1, r0
   29874:	bne	29898 <flatcc_builder_create_buffer@@Base+0x384>
   29878:	ldr	r0, [pc, #44]	; 298ac <flatcc_builder_create_buffer@@Base+0x398>
   2987c:	add	r0, pc, r0
   29880:	ldr	r1, [pc, #40]	; 298b0 <flatcc_builder_create_buffer@@Base+0x39c>
   29884:	add	r1, pc, r1
   29888:	ldr	r2, [pc, #36]	; 298b4 <flatcc_builder_create_buffer@@Base+0x3a0>
   2988c:	add	r3, pc, r2
   29890:	movw	r2, #772	; 0x304
   29894:	bl	12e68 <__assert_fail@plt>
   29898:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2989c:	str	r0, [fp, #-4]
   298a0:	ldr	r0, [fp, #-4]
   298a4:	mov	sp, fp
   298a8:	pop	{fp, pc}
   298ac:	andeq	lr, r0, pc, ror #3
   298b0:	andeq	sp, r0, sl, lsr #32
   298b4:	andeq	sp, r0, r4, ror r1
   298b8:	andeq	pc, r1, r4, asr #17
   298bc:	sub	sp, sp, #8
   298c0:	str	r0, [sp, #4]
   298c4:	strh	r1, [sp, #2]
   298c8:	ldr	r0, [sp, #4]
   298cc:	ldrh	r0, [r0, #128]	; 0x80
   298d0:	ldrh	r1, [sp, #2]
   298d4:	cmp	r0, r1
   298d8:	bge	298e8 <flatcc_builder_create_buffer@@Base+0x3d4>
   298dc:	ldrh	r0, [sp, #2]
   298e0:	ldr	r1, [sp, #4]
   298e4:	strh	r0, [r1, #128]	; 0x80
   298e8:	add	sp, sp, #8
   298ec:	bx	lr
   298f0:	sub	sp, sp, #4
   298f4:	str	r0, [sp]
   298f8:	ldr	r0, [sp]
   298fc:	add	sp, sp, #4
   29900:	bx	lr

00029904 <flatcc_builder_create_struct@@Base>:
   29904:	push	{fp, lr}
   29908:	mov	fp, sp
   2990c:	sub	sp, sp, #96	; 0x60
   29910:	str	r0, [fp, #-4]
   29914:	str	r1, [fp, #-8]
   29918:	str	r2, [fp, #-12]
   2991c:	strh	r3, [fp, #-14]
   29920:	ldrh	r0, [fp, #-14]
   29924:	cmp	r0, #1
   29928:	blt	29930 <flatcc_builder_create_struct@@Base+0x2c>
   2992c:	b	29950 <flatcc_builder_create_struct@@Base+0x4c>
   29930:	ldr	r0, [pc, #244]	; 29a2c <flatcc_builder_create_struct@@Base+0x128>
   29934:	add	r0, pc, r0
   29938:	ldr	r1, [pc, #240]	; 29a30 <flatcc_builder_create_struct@@Base+0x12c>
   2993c:	add	r1, pc, r1
   29940:	ldr	r2, [pc, #236]	; 29a34 <flatcc_builder_create_struct@@Base+0x130>
   29944:	add	r3, pc, r2
   29948:	movw	r2, #783	; 0x30f
   2994c:	bl	12e68 <__assert_fail@plt>
   29950:	ldr	r0, [fp, #-4]
   29954:	ldrh	r1, [fp, #-14]
   29958:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   2995c:	ldr	r0, [fp, #-4]
   29960:	ldr	r1, [fp, #-12]
   29964:	ldrh	r2, [fp, #-14]
   29968:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   2996c:	str	r0, [fp, #-20]	; 0xffffffec
   29970:	movw	r0, #0
   29974:	str	r0, [sp, #4]
   29978:	str	r0, [sp, #8]
   2997c:	ldr	r0, [fp, #-12]
   29980:	cmp	r0, #0
   29984:	bls	299c8 <flatcc_builder_create_struct@@Base+0xc4>
   29988:	ldr	r0, [fp, #-12]
   2998c:	ldr	r1, [sp, #4]
   29990:	add	r0, r1, r0
   29994:	str	r0, [sp, #4]
   29998:	ldr	r0, [fp, #-8]
   2999c:	add	r1, sp, #4
   299a0:	add	r1, r1, #8
   299a4:	ldr	r2, [sp, #8]
   299a8:	str	r0, [r1, r2, lsl #3]
   299ac:	ldr	r0, [fp, #-12]
   299b0:	ldr	r2, [sp, #8]
   299b4:	add	r1, r1, r2, lsl #3
   299b8:	str	r0, [r1, #4]
   299bc:	ldr	r0, [sp, #8]
   299c0:	add	r0, r0, #1
   299c4:	str	r0, [sp, #8]
   299c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   299cc:	cmp	r0, #0
   299d0:	bls	29a18 <flatcc_builder_create_struct@@Base+0x114>
   299d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   299d8:	ldr	r1, [sp, #4]
   299dc:	add	r0, r1, r0
   299e0:	str	r0, [sp, #4]
   299e4:	add	r0, sp, #4
   299e8:	add	r0, r0, #8
   299ec:	ldr	r1, [sp, #8]
   299f0:	ldr	r2, [pc, #64]	; 29a38 <flatcc_builder_create_struct@@Base+0x134>
   299f4:	ldr	r2, [pc, r2]
   299f8:	str	r2, [r0, r1, lsl #3]
   299fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   29a00:	ldr	r2, [sp, #8]
   29a04:	add	r0, r0, r2, lsl #3
   29a08:	str	r1, [r0, #4]
   29a0c:	ldr	r0, [sp, #8]
   29a10:	add	r0, r0, #1
   29a14:	str	r0, [sp, #8]
   29a18:	ldr	r0, [fp, #-4]
   29a1c:	add	r1, sp, #4
   29a20:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   29a24:	mov	sp, fp
   29a28:	pop	{fp, pc}
   29a2c:	andeq	sp, r0, pc, asr #2
   29a30:	andeq	ip, r0, r2, ror pc
   29a34:	andeq	sp, r0, sl, asr #2
   29a38:	andeq	pc, r1, ip, asr r6	; <UNPREDICTABLE>

00029a3c <flatcc_builder_start_buffer@@Base>:
   29a3c:	push	{fp, lr}
   29a40:	mov	fp, sp
   29a44:	sub	sp, sp, #32
   29a48:	str	r0, [fp, #-8]
   29a4c:	str	r1, [fp, #-12]
   29a50:	strh	r2, [fp, #-14]
   29a54:	str	r3, [sp, #12]
   29a58:	ldr	r0, [fp, #-8]
   29a5c:	ldr	r1, [fp, #-8]
   29a60:	ldrh	r1, [r1, #128]	; 0x80
   29a64:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   29a68:	cmp	r0, #0
   29a6c:	beq	29a7c <flatcc_builder_start_buffer@@Base+0x40>
   29a70:	mvn	r0, #0
   29a74:	str	r0, [fp, #-4]
   29a78:	b	29ba4 <flatcc_builder_start_buffer@@Base+0x168>
   29a7c:	ldr	r0, [fp, #-8]
   29a80:	movw	r1, #1
   29a84:	strh	r1, [r0, #128]	; 0x80
   29a88:	ldr	r0, [fp, #-8]
   29a8c:	ldrh	r0, [r0, #132]	; 0x84
   29a90:	ldr	r1, [fp, #-8]
   29a94:	ldr	r1, [r1, #32]
   29a98:	strh	r0, [r1, #34]	; 0x22
   29a9c:	ldrh	r0, [fp, #-14]
   29aa0:	ldr	r1, [fp, #-8]
   29aa4:	strh	r0, [r1, #132]	; 0x84
   29aa8:	ldr	r0, [fp, #-8]
   29aac:	ldrh	r0, [r0, #164]	; 0xa4
   29ab0:	ldr	r1, [fp, #-8]
   29ab4:	ldr	r1, [r1, #32]
   29ab8:	strh	r0, [r1, #32]
   29abc:	ldr	r0, [sp, #12]
   29ac0:	ldr	r1, [fp, #-8]
   29ac4:	strh	r0, [r1, #164]	; 0xa4
   29ac8:	ldr	r0, [fp, #-8]
   29acc:	ldr	r0, [r0, #144]	; 0x90
   29ad0:	ldr	r1, [fp, #-8]
   29ad4:	ldr	r1, [r1, #32]
   29ad8:	str	r0, [r1, #20]
   29adc:	ldr	r0, [fp, #-8]
   29ae0:	ldr	r0, [r0, #152]	; 0x98
   29ae4:	ldr	r1, [fp, #-8]
   29ae8:	ldr	r1, [r1, #32]
   29aec:	str	r0, [r1, #28]
   29af0:	ldr	r0, [fp, #-8]
   29af4:	ldr	r0, [r0, #136]	; 0x88
   29af8:	ldr	r1, [fp, #-8]
   29afc:	str	r0, [r1, #144]	; 0x90
   29b00:	ldr	r0, [fp, #-8]
   29b04:	ldr	r1, [r0, #148]	; 0x94
   29b08:	add	r2, r1, #1
   29b0c:	str	r2, [r0, #148]	; 0x94
   29b10:	ldr	r0, [fp, #-8]
   29b14:	str	r1, [r0, #152]	; 0x98
   29b18:	ldr	r0, [fp, #-8]
   29b1c:	ldr	r0, [r0, #168]	; 0xa8
   29b20:	ldr	r1, [fp, #-8]
   29b24:	ldr	r1, [r1, #32]
   29b28:	str	r0, [r1, #16]
   29b2c:	ldr	r0, [fp, #-8]
   29b30:	add	r0, r0, #168	; 0xa8
   29b34:	ldr	r1, [fp, #-12]
   29b38:	movw	r2, #0
   29b3c:	cmp	r1, r2
   29b40:	str	r0, [sp, #8]
   29b44:	beq	29b54 <flatcc_builder_start_buffer@@Base+0x118>
   29b48:	ldr	r0, [fp, #-12]
   29b4c:	str	r0, [sp, #4]
   29b50:	b	29b64 <flatcc_builder_start_buffer@@Base+0x128>
   29b54:	ldr	r0, [pc, #84]	; 29bb0 <flatcc_builder_start_buffer@@Base+0x174>
   29b58:	ldr	r0, [pc, r0]
   29b5c:	str	r0, [sp, #4]
   29b60:	b	29b64 <flatcc_builder_start_buffer@@Base+0x128>
   29b64:	ldr	r0, [sp, #4]
   29b68:	ldrb	r1, [r0]
   29b6c:	ldr	r2, [sp, #8]
   29b70:	strb	r1, [r2]
   29b74:	ldrb	r1, [r0, #1]
   29b78:	strb	r1, [r2, #1]
   29b7c:	ldrb	r1, [r0, #2]
   29b80:	strb	r1, [r2, #2]
   29b84:	ldrb	r0, [r0, #3]
   29b88:	strb	r0, [r2, #3]
   29b8c:	ldr	r0, [fp, #-8]
   29b90:	ldr	r0, [r0, #32]
   29b94:	movw	r1, #1
   29b98:	strh	r1, [r0, #14]
   29b9c:	movw	r0, #0
   29ba0:	str	r0, [fp, #-4]
   29ba4:	ldr	r0, [fp, #-4]
   29ba8:	mov	sp, fp
   29bac:	pop	{fp, pc}
   29bb0:	strdeq	pc, [r1], -r8
   29bb4:	push	{fp, lr}
   29bb8:	mov	fp, sp
   29bbc:	sub	sp, sp, #24
   29bc0:	str	r0, [fp, #-8]
   29bc4:	strh	r1, [fp, #-10]
   29bc8:	ldr	r0, [fp, #-8]
   29bcc:	ldr	r1, [r0, #156]	; 0x9c
   29bd0:	add	r1, r1, #1
   29bd4:	str	r1, [r0, #156]	; 0x9c
   29bd8:	ldr	r0, [fp, #-8]
   29bdc:	ldr	r0, [r0, #160]	; 0xa0
   29be0:	cmp	r1, r0
   29be4:	ble	29cd0 <flatcc_builder_start_buffer@@Base+0x294>
   29be8:	ldr	r0, [fp, #-8]
   29bec:	ldr	r0, [r0, #176]	; 0xb0
   29bf0:	cmp	r0, #0
   29bf4:	ble	29c1c <flatcc_builder_start_buffer@@Base+0x1e0>
   29bf8:	ldr	r0, [fp, #-8]
   29bfc:	ldr	r0, [r0, #156]	; 0x9c
   29c00:	ldr	r1, [fp, #-8]
   29c04:	ldr	r1, [r1, #176]	; 0xb0
   29c08:	cmp	r0, r1
   29c0c:	ble	29c1c <flatcc_builder_start_buffer@@Base+0x1e0>
   29c10:	mvn	r0, #0
   29c14:	str	r0, [fp, #-4]
   29c18:	b	29d74 <flatcc_builder_start_buffer@@Base+0x338>
   29c1c:	ldr	r0, [fp, #-8]
   29c20:	ldr	r1, [fp, #-8]
   29c24:	ldr	r1, [r1, #156]	; 0x9c
   29c28:	sub	r1, r1, #1
   29c2c:	movw	r2, #36	; 0x24
   29c30:	mul	r1, r1, r2
   29c34:	movw	r3, #4
   29c38:	str	r1, [sp, #8]
   29c3c:	mov	r1, r3
   29c40:	ldr	r3, [sp, #8]
   29c44:	str	r2, [sp, #4]
   29c48:	mov	r2, r3
   29c4c:	ldr	r3, [sp, #4]
   29c50:	movw	ip, #0
   29c54:	str	ip, [sp]
   29c58:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   29c5c:	ldr	r1, [fp, #-8]
   29c60:	str	r0, [r1, #32]
   29c64:	movw	r1, #0
   29c68:	cmp	r0, r1
   29c6c:	bne	29c7c <flatcc_builder_start_buffer@@Base+0x240>
   29c70:	mvn	r0, #0
   29c74:	str	r0, [fp, #-4]
   29c78:	b	29d74 <flatcc_builder_start_buffer@@Base+0x338>
   29c7c:	ldr	r0, [fp, #-8]
   29c80:	ldr	r0, [r0, #88]	; 0x58
   29c84:	movw	r1, #36	; 0x24
   29c88:	udiv	r0, r0, r1
   29c8c:	ldr	r1, [fp, #-8]
   29c90:	str	r0, [r1, #160]	; 0xa0
   29c94:	ldr	r0, [fp, #-8]
   29c98:	ldr	r0, [r0, #176]	; 0xb0
   29c9c:	cmp	r0, #0
   29ca0:	ble	29ccc <flatcc_builder_start_buffer@@Base+0x290>
   29ca4:	ldr	r0, [fp, #-8]
   29ca8:	ldr	r0, [r0, #176]	; 0xb0
   29cac:	ldr	r1, [fp, #-8]
   29cb0:	ldr	r1, [r1, #160]	; 0xa0
   29cb4:	cmp	r0, r1
   29cb8:	bge	29ccc <flatcc_builder_start_buffer@@Base+0x290>
   29cbc:	ldr	r0, [fp, #-8]
   29cc0:	ldr	r0, [r0, #176]	; 0xb0
   29cc4:	ldr	r1, [fp, #-8]
   29cc8:	str	r0, [r1, #160]	; 0xa0
   29ccc:	b	29ce0 <flatcc_builder_start_buffer@@Base+0x2a4>
   29cd0:	ldr	r0, [fp, #-8]
   29cd4:	ldr	r1, [r0, #32]
   29cd8:	add	r1, r1, #36	; 0x24
   29cdc:	str	r1, [r0, #32]
   29ce0:	ldr	r0, [fp, #-8]
   29ce4:	ldr	r0, [r0, #20]
   29ce8:	ldr	r1, [fp, #-8]
   29cec:	ldr	r1, [r1, #32]
   29cf0:	str	r0, [r1, #8]
   29cf4:	ldr	r0, [fp, #-8]
   29cf8:	ldrh	r0, [r0, #130]	; 0x82
   29cfc:	ldr	r1, [fp, #-8]
   29d00:	ldr	r1, [r1, #32]
   29d04:	strh	r0, [r1, #12]
   29d08:	ldrh	r0, [fp, #-10]
   29d0c:	ldr	r1, [fp, #-8]
   29d10:	strh	r0, [r1, #130]	; 0x82
   29d14:	ldr	r0, [fp, #-8]
   29d18:	ldr	r0, [r0, #28]
   29d1c:	ldr	r1, [fp, #-8]
   29d20:	ldr	r1, [r1, #32]
   29d24:	str	r0, [r1]
   29d28:	ldr	r0, [fp, #-8]
   29d2c:	ldr	r0, [r0, #32]
   29d30:	mvn	r1, #3
   29d34:	str	r1, [r0, #4]
   29d38:	ldr	r0, [fp, #-8]
   29d3c:	ldr	r0, [r0, #28]
   29d40:	ldr	r1, [fp, #-8]
   29d44:	ldr	r1, [r1, #20]
   29d48:	add	r0, r0, r1
   29d4c:	add	r0, r0, #8
   29d50:	sub	r0, r0, #1
   29d54:	mvn	r1, #7
   29d58:	and	r0, r0, r1
   29d5c:	ldr	r1, [fp, #-8]
   29d60:	str	r0, [r1, #28]
   29d64:	ldr	r0, [fp, #-8]
   29d68:	movw	r1, #0
   29d6c:	str	r1, [r0, #20]
   29d70:	str	r1, [fp, #-4]
   29d74:	ldr	r0, [fp, #-4]
   29d78:	mov	sp, fp
   29d7c:	pop	{fp, pc}

00029d80 <flatcc_builder_end_buffer@@Base>:
   29d80:	push	{r4, sl, fp, lr}
   29d84:	add	fp, sp, #8
   29d88:	sub	sp, sp, #32
   29d8c:	str	r0, [fp, #-16]
   29d90:	str	r1, [sp, #20]
   29d94:	ldr	r0, [fp, #-16]
   29d98:	ldrh	r0, [r0, #164]	; 0xa4
   29d9c:	and	r0, r0, #2
   29da0:	str	r0, [sp, #12]
   29da4:	ldr	r0, [fp, #-16]
   29da8:	ldr	r0, [r0, #152]	; 0x98
   29dac:	cmp	r0, #0
   29db0:	movw	r0, #0
   29db4:	moveq	r0, #1
   29db8:	tst	r0, #1
   29dbc:	movw	r0, #0
   29dc0:	moveq	r0, #1
   29dc4:	ldr	r1, [sp, #12]
   29dc8:	orr	r0, r1, r0
   29dcc:	str	r0, [sp, #12]
   29dd0:	ldr	r0, [fp, #-16]
   29dd4:	ldr	r0, [r0, #32]
   29dd8:	ldrh	r0, [r0, #14]
   29ddc:	cmp	r0, #1
   29de0:	bne	29de8 <flatcc_builder_end_buffer@@Base+0x68>
   29de4:	b	29e08 <flatcc_builder_end_buffer@@Base+0x88>
   29de8:	ldr	r0, [pc, #244]	; 29ee4 <flatcc_builder_end_buffer@@Base+0x164>
   29dec:	add	r0, pc, r0
   29df0:	ldr	r1, [pc, #240]	; 29ee8 <flatcc_builder_end_buffer@@Base+0x168>
   29df4:	add	r1, pc, r1
   29df8:	ldr	r2, [pc, #236]	; 29eec <flatcc_builder_end_buffer@@Base+0x16c>
   29dfc:	add	r3, pc, r2
   29e00:	movw	r2, #838	; 0x346
   29e04:	bl	12e68 <__assert_fail@plt>
   29e08:	ldr	r0, [fp, #-16]
   29e0c:	ldr	r1, [fp, #-16]
   29e10:	ldrh	r1, [r1, #132]	; 0x84
   29e14:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   29e18:	ldr	r0, [fp, #-16]
   29e1c:	ldr	r1, [fp, #-16]
   29e20:	add	r1, r1, #168	; 0xa8
   29e24:	ldr	lr, [fp, #-16]
   29e28:	ldrh	lr, [lr, #132]	; 0x84
   29e2c:	ldr	r3, [sp, #20]
   29e30:	ldr	r2, [fp, #-16]
   29e34:	ldrh	r2, [r2, #128]	; 0x80
   29e38:	ldr	ip, [sp, #12]
   29e3c:	uxth	lr, lr
   29e40:	str	r2, [sp, #8]
   29e44:	mov	r2, lr
   29e48:	ldr	lr, [sp, #8]
   29e4c:	uxth	r4, lr
   29e50:	str	r4, [sp]
   29e54:	str	ip, [sp, #4]
   29e58:	bl	29514 <flatcc_builder_create_buffer@@Base>
   29e5c:	str	r0, [sp, #16]
   29e60:	movw	r1, #0
   29e64:	cmp	r1, r0
   29e68:	bne	29e78 <flatcc_builder_end_buffer@@Base+0xf8>
   29e6c:	movw	r0, #0
   29e70:	str	r0, [fp, #-12]
   29e74:	b	29ed8 <flatcc_builder_end_buffer@@Base+0x158>
   29e78:	ldr	r0, [fp, #-16]
   29e7c:	ldr	r0, [r0, #32]
   29e80:	ldr	r0, [r0, #20]
   29e84:	ldr	r1, [fp, #-16]
   29e88:	str	r0, [r1, #144]	; 0x90
   29e8c:	ldr	r0, [fp, #-16]
   29e90:	ldr	r0, [r0, #32]
   29e94:	ldr	r0, [r0, #28]
   29e98:	ldr	r1, [fp, #-16]
   29e9c:	str	r0, [r1, #152]	; 0x98
   29ea0:	ldr	r0, [fp, #-16]
   29ea4:	ldr	r0, [r0, #32]
   29ea8:	ldr	r0, [r0, #16]
   29eac:	ldr	r1, [fp, #-16]
   29eb0:	str	r0, [r1, #168]	; 0xa8
   29eb4:	ldr	r0, [fp, #-16]
   29eb8:	ldr	r0, [r0, #32]
   29ebc:	ldrh	r0, [r0, #32]
   29ec0:	ldr	r1, [fp, #-16]
   29ec4:	strh	r0, [r1, #164]	; 0xa4
   29ec8:	ldr	r0, [fp, #-16]
   29ecc:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   29ed0:	ldr	r0, [sp, #16]
   29ed4:	str	r0, [fp, #-12]
   29ed8:	ldr	r0, [fp, #-12]
   29edc:	sub	sp, fp, #8
   29ee0:	pop	{r4, sl, fp, pc}
   29ee4:	andeq	ip, r0, r8, lsl #26
   29ee8:			; <UNDEFINED> instruction: 0x0000caba
   29eec:	andeq	ip, r0, r4, lsr #26
   29ef0:	push	{fp, lr}
   29ef4:	mov	fp, sp
   29ef8:	sub	sp, sp, #8
   29efc:	str	r0, [sp, #4]
   29f00:	ldr	r0, [sp, #4]
   29f04:	ldr	r0, [r0, #16]
   29f08:	ldr	r1, [sp, #4]
   29f0c:	ldr	r2, [r1, #20]
   29f10:	movw	r1, #0
   29f14:	and	r1, r1, #255	; 0xff
   29f18:	bl	12e2c <memset@plt>
   29f1c:	ldr	r0, [sp, #4]
   29f20:	ldr	r0, [r0, #32]
   29f24:	ldr	r0, [r0, #8]
   29f28:	ldr	r1, [sp, #4]
   29f2c:	str	r0, [r1, #20]
   29f30:	ldr	r0, [sp, #4]
   29f34:	ldr	r0, [r0, #32]
   29f38:	ldr	r0, [r0]
   29f3c:	ldr	r1, [sp, #4]
   29f40:	str	r0, [r1, #28]
   29f44:	ldr	r0, [sp, #4]
   29f48:	ldr	r1, [sp, #4]
   29f4c:	ldr	r1, [r1, #32]
   29f50:	ldr	r1, [r1, #4]
   29f54:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   29f58:	ldr	r0, [sp, #4]
   29f5c:	ldr	r1, [sp, #4]
   29f60:	ldrh	r1, [r1, #130]	; 0x82
   29f64:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   29f68:	ldr	r0, [sp, #4]
   29f6c:	ldr	r0, [r0, #32]
   29f70:	ldrh	r0, [r0, #12]
   29f74:	ldr	r1, [sp, #4]
   29f78:	strh	r0, [r1, #130]	; 0x82
   29f7c:	ldr	r0, [sp, #4]
   29f80:	ldr	r1, [r0, #32]
   29f84:	mvn	r2, #35	; 0x23
   29f88:	add	r1, r1, r2
   29f8c:	str	r1, [r0, #32]
   29f90:	ldr	r0, [sp, #4]
   29f94:	ldr	r1, [r0, #156]	; 0x9c
   29f98:	mvn	r2, #0
   29f9c:	add	r1, r1, r2
   29fa0:	str	r1, [r0, #156]	; 0x9c
   29fa4:	mov	sp, fp
   29fa8:	pop	{fp, pc}

00029fac <flatcc_builder_start_struct@@Base>:
   29fac:	push	{fp, lr}
   29fb0:	mov	fp, sp
   29fb4:	sub	sp, sp, #16
   29fb8:	str	r0, [sp, #8]
   29fbc:	str	r1, [sp, #4]
   29fc0:	strh	r2, [sp, #2]
   29fc4:	ldr	r0, [sp, #8]
   29fc8:	ldrh	r1, [sp, #2]
   29fcc:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   29fd0:	cmp	r0, #0
   29fd4:	beq	29fe4 <flatcc_builder_start_struct@@Base+0x38>
   29fd8:	movw	r0, #0
   29fdc:	str	r0, [fp, #-4]
   29fe0:	b	2a010 <flatcc_builder_start_struct@@Base+0x64>
   29fe4:	ldr	r0, [sp, #8]
   29fe8:	ldr	r0, [r0, #32]
   29fec:	movw	r1, #2
   29ff0:	strh	r1, [r0, #14]
   29ff4:	ldr	r0, [sp, #8]
   29ff8:	mvn	r1, #3
   29ffc:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2a000:	ldr	r0, [sp, #8]
   2a004:	ldr	r1, [sp, #4]
   2a008:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a00c:	str	r0, [fp, #-4]
   2a010:	ldr	r0, [fp, #-4]
   2a014:	mov	sp, fp
   2a018:	pop	{fp, pc}
   2a01c:	sub	sp, sp, #12
   2a020:	str	r0, [sp, #8]
   2a024:	str	r1, [sp, #4]
   2a028:	ldr	r0, [sp, #8]
   2a02c:	add	r0, r0, #52	; 0x34
   2a030:	add	r0, r0, #8
   2a034:	str	r0, [sp]
   2a038:	ldr	r0, [sp, #8]
   2a03c:	ldr	r0, [r0, #60]	; 0x3c
   2a040:	ldr	r1, [sp, #8]
   2a044:	ldr	r1, [r1, #28]
   2a048:	add	r0, r0, r1
   2a04c:	ldr	r1, [sp, #8]
   2a050:	str	r0, [r1, #16]
   2a054:	ldr	r0, [sp]
   2a058:	ldr	r0, [r0, #4]
   2a05c:	ldr	r1, [sp, #8]
   2a060:	ldr	r1, [r1, #28]
   2a064:	sub	r0, r0, r1
   2a068:	ldr	r1, [sp, #8]
   2a06c:	str	r0, [r1, #24]
   2a070:	ldr	r0, [sp, #8]
   2a074:	ldr	r0, [r0, #24]
   2a078:	ldr	r1, [sp, #4]
   2a07c:	cmp	r0, r1
   2a080:	bls	2a090 <flatcc_builder_start_struct@@Base+0xe4>
   2a084:	ldr	r0, [sp, #4]
   2a088:	ldr	r1, [sp, #8]
   2a08c:	str	r0, [r1, #24]
   2a090:	ldr	r0, [sp, #4]
   2a094:	ldr	r1, [sp, #8]
   2a098:	ldr	r1, [r1, #32]
   2a09c:	str	r0, [r1, #4]
   2a0a0:	add	sp, sp, #12
   2a0a4:	bx	lr
   2a0a8:	push	{fp, lr}
   2a0ac:	mov	fp, sp
   2a0b0:	sub	sp, sp, #16
   2a0b4:	str	r0, [sp, #8]
   2a0b8:	str	r1, [sp, #4]
   2a0bc:	ldr	r0, [sp, #8]
   2a0c0:	ldr	r0, [r0, #20]
   2a0c4:	str	r0, [sp]
   2a0c8:	ldr	r0, [sp, #4]
   2a0cc:	ldr	r1, [sp, #8]
   2a0d0:	ldr	r2, [r1, #20]
   2a0d4:	add	r0, r2, r0
   2a0d8:	str	r0, [r1, #20]
   2a0dc:	ldr	r1, [sp, #8]
   2a0e0:	ldr	r1, [r1, #24]
   2a0e4:	cmp	r0, r1
   2a0e8:	bcc	2a11c <flatcc_builder_start_struct@@Base+0x170>
   2a0ec:	ldr	r0, [sp, #8]
   2a0f0:	ldr	r1, [sp, #8]
   2a0f4:	ldr	r1, [r1, #20]
   2a0f8:	add	r1, r1, #1
   2a0fc:	mvn	r2, #3
   2a100:	bl	2e218 <flatcc_builder_get_emit_context@@Base+0x40>
   2a104:	cmp	r0, #0
   2a108:	beq	2a118 <flatcc_builder_start_struct@@Base+0x16c>
   2a10c:	movw	r0, #0
   2a110:	str	r0, [fp, #-4]
   2a114:	b	2a130 <flatcc_builder_start_struct@@Base+0x184>
   2a118:	b	2a11c <flatcc_builder_start_struct@@Base+0x170>
   2a11c:	ldr	r0, [sp, #8]
   2a120:	ldr	r0, [r0, #16]
   2a124:	ldr	r1, [sp]
   2a128:	add	r0, r0, r1
   2a12c:	str	r0, [fp, #-4]
   2a130:	ldr	r0, [fp, #-4]
   2a134:	mov	sp, fp
   2a138:	pop	{fp, pc}

0002a13c <flatcc_builder_struct_edit@@Base>:
   2a13c:	sub	sp, sp, #4
   2a140:	str	r0, [sp]
   2a144:	ldr	r0, [sp]
   2a148:	ldr	r0, [r0, #16]
   2a14c:	add	sp, sp, #4
   2a150:	bx	lr

0002a154 <flatcc_builder_end_struct@@Base>:
   2a154:	push	{fp, lr}
   2a158:	mov	fp, sp
   2a15c:	sub	sp, sp, #16
   2a160:	str	r0, [sp, #8]
   2a164:	ldr	r0, [sp, #8]
   2a168:	ldr	r0, [r0, #32]
   2a16c:	ldrh	r0, [r0, #14]
   2a170:	cmp	r0, #2
   2a174:	bne	2a17c <flatcc_builder_end_struct@@Base+0x28>
   2a178:	b	2a19c <flatcc_builder_end_struct@@Base+0x48>
   2a17c:	ldr	r0, [pc, #112]	; 2a1f4 <flatcc_builder_end_struct@@Base+0xa0>
   2a180:	add	r0, pc, r0
   2a184:	ldr	r1, [pc, #108]	; 2a1f8 <flatcc_builder_end_struct@@Base+0xa4>
   2a188:	add	r1, pc, r1
   2a18c:	ldr	r2, [pc, #104]	; 2a1fc <flatcc_builder_end_struct@@Base+0xa8>
   2a190:	add	r3, pc, r2
   2a194:	movw	r2, #872	; 0x368
   2a198:	bl	12e68 <__assert_fail@plt>
   2a19c:	ldr	r0, [sp, #8]
   2a1a0:	ldr	r1, [sp, #8]
   2a1a4:	ldr	r1, [r1, #16]
   2a1a8:	ldr	r2, [sp, #8]
   2a1ac:	ldr	r2, [r2, #20]
   2a1b0:	ldr	r3, [sp, #8]
   2a1b4:	ldrh	r3, [r3, #130]	; 0x82
   2a1b8:	bl	29904 <flatcc_builder_create_struct@@Base>
   2a1bc:	str	r0, [sp, #4]
   2a1c0:	movw	r1, #0
   2a1c4:	cmp	r1, r0
   2a1c8:	bne	2a1d8 <flatcc_builder_end_struct@@Base+0x84>
   2a1cc:	movw	r0, #0
   2a1d0:	str	r0, [fp, #-4]
   2a1d4:	b	2a1e8 <flatcc_builder_end_struct@@Base+0x94>
   2a1d8:	ldr	r0, [sp, #8]
   2a1dc:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2a1e0:	ldr	r0, [sp, #4]
   2a1e4:	str	r0, [fp, #-4]
   2a1e8:	ldr	r0, [fp, #-4]
   2a1ec:	mov	sp, fp
   2a1f0:	pop	{fp, pc}
   2a1f4:	strdeq	ip, [r0], -r9
   2a1f8:	andeq	ip, r0, r6, lsr #14
   2a1fc:	andeq	ip, r0, r5, lsl sl

0002a200 <flatcc_builder_extend_vector@@Base>:
   2a200:	push	{fp, lr}
   2a204:	mov	fp, sp
   2a208:	sub	sp, sp, #16
   2a20c:	str	r0, [sp, #8]
   2a210:	str	r1, [sp, #4]
   2a214:	ldr	r0, [sp, #8]
   2a218:	ldr	r1, [sp, #4]
   2a21c:	ldr	r2, [sp, #8]
   2a220:	ldr	r2, [r2, #32]
   2a224:	ldr	r2, [r2, #24]
   2a228:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a22c:	cmp	r0, #0
   2a230:	beq	2a240 <flatcc_builder_extend_vector@@Base+0x40>
   2a234:	movw	r0, #0
   2a238:	str	r0, [fp, #-4]
   2a23c:	b	2a260 <flatcc_builder_extend_vector@@Base+0x60>
   2a240:	ldr	r0, [sp, #8]
   2a244:	ldr	r1, [sp, #8]
   2a248:	ldr	r1, [r1, #32]
   2a24c:	ldr	r1, [r1, #16]
   2a250:	ldr	r2, [sp, #4]
   2a254:	mul	r1, r1, r2
   2a258:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a25c:	str	r0, [fp, #-4]
   2a260:	ldr	r0, [fp, #-4]
   2a264:	mov	sp, fp
   2a268:	pop	{fp, pc}
   2a26c:	push	{fp, lr}
   2a270:	mov	fp, sp
   2a274:	sub	sp, sp, #24
   2a278:	str	r0, [fp, #-8]
   2a27c:	str	r1, [sp, #12]
   2a280:	str	r2, [sp, #8]
   2a284:	ldr	r0, [fp, #-8]
   2a288:	ldr	r0, [r0, #32]
   2a28c:	ldr	r0, [r0, #20]
   2a290:	str	r0, [sp, #4]
   2a294:	ldr	r0, [sp, #4]
   2a298:	ldr	r1, [sp, #12]
   2a29c:	add	r0, r0, r1
   2a2a0:	str	r0, [sp]
   2a2a4:	ldr	r0, [sp, #4]
   2a2a8:	ldr	r1, [sp]
   2a2ac:	cmp	r0, r1
   2a2b0:	bhi	2a2c4 <flatcc_builder_extend_vector@@Base+0xc4>
   2a2b4:	ldr	r0, [sp]
   2a2b8:	ldr	r1, [sp, #8]
   2a2bc:	cmp	r0, r1
   2a2c0:	bls	2a314 <flatcc_builder_extend_vector@@Base+0x114>
   2a2c4:	ldr	r0, [sp, #4]
   2a2c8:	ldr	r1, [sp]
   2a2cc:	cmp	r0, r1
   2a2d0:	bhi	2a2e8 <flatcc_builder_extend_vector@@Base+0xe8>
   2a2d4:	ldr	r0, [sp]
   2a2d8:	ldr	r1, [sp, #8]
   2a2dc:	cmp	r0, r1
   2a2e0:	bhi	2a2e8 <flatcc_builder_extend_vector@@Base+0xe8>
   2a2e4:	b	2a308 <flatcc_builder_extend_vector@@Base+0x108>
   2a2e8:	ldr	r0, [pc, #72]	; 2a338 <flatcc_builder_extend_vector@@Base+0x138>
   2a2ec:	add	r0, pc, r0
   2a2f0:	ldr	r1, [pc, #68]	; 2a33c <flatcc_builder_extend_vector@@Base+0x13c>
   2a2f4:	add	r1, pc, r1
   2a2f8:	ldr	r2, [pc, #64]	; 2a340 <flatcc_builder_extend_vector@@Base+0x140>
   2a2fc:	add	r3, pc, r2
   2a300:	movw	r2, #892	; 0x37c
   2a304:	bl	12e68 <__assert_fail@plt>
   2a308:	mvn	r0, #0
   2a30c:	str	r0, [fp, #-4]
   2a310:	b	2a32c <flatcc_builder_extend_vector@@Base+0x12c>
   2a314:	ldr	r0, [sp]
   2a318:	ldr	r1, [fp, #-8]
   2a31c:	ldr	r1, [r1, #32]
   2a320:	str	r0, [r1, #20]
   2a324:	movw	r0, #0
   2a328:	str	r0, [fp, #-4]
   2a32c:	ldr	r0, [fp, #-4]
   2a330:	mov	sp, fp
   2a334:	pop	{fp, pc}
   2a338:	andeq	sp, r0, r8, lsl #13
   2a33c:			; <UNDEFINED> instruction: 0x0000c5ba
   2a340:	muleq	r0, r3, r6

0002a344 <flatcc_builder_vector_push@@Base>:
   2a344:	push	{fp, lr}
   2a348:	mov	fp, sp
   2a34c:	sub	sp, sp, #16
   2a350:	str	r0, [sp, #8]
   2a354:	str	r1, [sp, #4]
   2a358:	ldr	r0, [sp, #8]
   2a35c:	ldr	r0, [r0, #32]
   2a360:	ldrh	r0, [r0, #14]
   2a364:	cmp	r0, #4
   2a368:	bne	2a370 <flatcc_builder_vector_push@@Base+0x2c>
   2a36c:	b	2a390 <flatcc_builder_vector_push@@Base+0x4c>
   2a370:	ldr	r0, [pc, #196]	; 2a43c <flatcc_builder_vector_push@@Base+0xf8>
   2a374:	add	r0, pc, r0
   2a378:	ldr	r1, [pc, #192]	; 2a440 <flatcc_builder_vector_push@@Base+0xfc>
   2a37c:	add	r1, pc, r1
   2a380:	ldr	r2, [pc, #188]	; 2a444 <flatcc_builder_vector_push@@Base+0x100>
   2a384:	add	r3, pc, r2
   2a388:	movw	r2, #907	; 0x38b
   2a38c:	bl	12e68 <__assert_fail@plt>
   2a390:	ldr	r0, [sp, #8]
   2a394:	ldr	r0, [r0, #32]
   2a398:	ldr	r0, [r0, #20]
   2a39c:	ldr	r1, [sp, #8]
   2a3a0:	ldr	r1, [r1, #32]
   2a3a4:	ldr	r1, [r1, #24]
   2a3a8:	cmp	r0, r1
   2a3ac:	bls	2a400 <flatcc_builder_vector_push@@Base+0xbc>
   2a3b0:	ldr	r0, [sp, #8]
   2a3b4:	ldr	r0, [r0, #32]
   2a3b8:	ldr	r0, [r0, #20]
   2a3bc:	ldr	r1, [sp, #8]
   2a3c0:	ldr	r1, [r1, #32]
   2a3c4:	ldr	r1, [r1, #24]
   2a3c8:	cmp	r0, r1
   2a3cc:	bhi	2a3d4 <flatcc_builder_vector_push@@Base+0x90>
   2a3d0:	b	2a3f4 <flatcc_builder_vector_push@@Base+0xb0>
   2a3d4:	ldr	r0, [pc, #108]	; 2a448 <flatcc_builder_vector_push@@Base+0x104>
   2a3d8:	add	r0, pc, r0
   2a3dc:	ldr	r1, [pc, #104]	; 2a44c <flatcc_builder_vector_push@@Base+0x108>
   2a3e0:	add	r1, pc, r1
   2a3e4:	ldr	r2, [pc, #100]	; 2a450 <flatcc_builder_vector_push@@Base+0x10c>
   2a3e8:	add	r3, pc, r2
   2a3ec:	movw	r2, #908	; 0x38c
   2a3f0:	bl	12e68 <__assert_fail@plt>
   2a3f4:	movw	r0, #0
   2a3f8:	str	r0, [fp, #-4]
   2a3fc:	b	2a430 <flatcc_builder_vector_push@@Base+0xec>
   2a400:	ldr	r0, [sp, #8]
   2a404:	ldr	r0, [r0, #32]
   2a408:	ldr	r1, [r0, #20]
   2a40c:	add	r1, r1, #1
   2a410:	str	r1, [r0, #20]
   2a414:	ldr	r0, [sp, #8]
   2a418:	ldr	r1, [sp, #4]
   2a41c:	ldr	r2, [sp, #8]
   2a420:	ldr	r2, [r2, #32]
   2a424:	ldr	r2, [r2, #16]
   2a428:	bl	2a454 <flatcc_builder_vector_push@@Base+0x110>
   2a42c:	str	r0, [fp, #-4]
   2a430:	ldr	r0, [fp, #-4]
   2a434:	mov	sp, fp
   2a438:	pop	{fp, pc}
   2a43c:	andeq	ip, r0, r4, ror r8
   2a440:	andeq	ip, r0, r2, lsr r5
   2a444:	muleq	r0, r0, r8
   2a448:	andeq	ip, r0, pc, ror r8
   2a44c:	andeq	ip, r0, lr, asr #9
   2a450:	andeq	ip, r0, ip, lsr #16
   2a454:	push	{fp, lr}
   2a458:	mov	fp, sp
   2a45c:	sub	sp, sp, #24
   2a460:	str	r0, [fp, #-8]
   2a464:	str	r1, [sp, #12]
   2a468:	str	r2, [sp, #8]
   2a46c:	ldr	r0, [fp, #-8]
   2a470:	ldr	r1, [sp, #8]
   2a474:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a478:	str	r0, [sp, #4]
   2a47c:	movw	r1, #0
   2a480:	cmp	r0, r1
   2a484:	bne	2a494 <flatcc_builder_vector_push@@Base+0x150>
   2a488:	movw	r0, #0
   2a48c:	str	r0, [fp, #-4]
   2a490:	b	2a4ac <flatcc_builder_vector_push@@Base+0x168>
   2a494:	ldr	r0, [sp, #4]
   2a498:	ldr	r1, [sp, #12]
   2a49c:	ldr	r2, [sp, #8]
   2a4a0:	bl	12db4 <memcpy@plt>
   2a4a4:	ldr	r0, [sp, #4]
   2a4a8:	str	r0, [fp, #-4]
   2a4ac:	ldr	r0, [fp, #-4]
   2a4b0:	mov	sp, fp
   2a4b4:	pop	{fp, pc}

0002a4b8 <flatcc_builder_append_vector@@Base>:
   2a4b8:	push	{fp, lr}
   2a4bc:	mov	fp, sp
   2a4c0:	sub	sp, sp, #16
   2a4c4:	str	r0, [sp, #8]
   2a4c8:	str	r1, [sp, #4]
   2a4cc:	str	r2, [sp]
   2a4d0:	ldr	r0, [sp, #8]
   2a4d4:	ldr	r0, [r0, #32]
   2a4d8:	ldrh	r0, [r0, #14]
   2a4dc:	cmp	r0, #4
   2a4e0:	bne	2a4e8 <flatcc_builder_append_vector@@Base+0x30>
   2a4e4:	b	2a508 <flatcc_builder_append_vector@@Base+0x50>
   2a4e8:	ldr	r0, [pc, #116]	; 2a564 <flatcc_builder_append_vector@@Base+0xac>
   2a4ec:	add	r0, pc, r0
   2a4f0:	ldr	r1, [pc, #112]	; 2a568 <flatcc_builder_append_vector@@Base+0xb0>
   2a4f4:	add	r1, pc, r1
   2a4f8:	ldr	r2, [pc, #108]	; 2a56c <flatcc_builder_append_vector@@Base+0xb4>
   2a4fc:	add	r3, pc, r2
   2a500:	movw	r2, #915	; 0x393
   2a504:	bl	12e68 <__assert_fail@plt>
   2a508:	ldr	r0, [sp, #8]
   2a50c:	ldr	r1, [sp]
   2a510:	ldr	r2, [sp, #8]
   2a514:	ldr	r2, [r2, #32]
   2a518:	ldr	r2, [r2, #24]
   2a51c:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a520:	cmp	r0, #0
   2a524:	beq	2a534 <flatcc_builder_append_vector@@Base+0x7c>
   2a528:	movw	r0, #0
   2a52c:	str	r0, [fp, #-4]
   2a530:	b	2a558 <flatcc_builder_append_vector@@Base+0xa0>
   2a534:	ldr	r0, [sp, #8]
   2a538:	ldr	r1, [sp, #4]
   2a53c:	ldr	r2, [sp, #8]
   2a540:	ldr	r2, [r2, #32]
   2a544:	ldr	r2, [r2, #16]
   2a548:	ldr	r3, [sp]
   2a54c:	mul	r2, r2, r3
   2a550:	bl	2a454 <flatcc_builder_vector_push@@Base+0x110>
   2a554:	str	r0, [fp, #-4]
   2a558:	ldr	r0, [fp, #-4]
   2a55c:	mov	sp, fp
   2a560:	pop	{fp, pc}
   2a564:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   2a568:			; <UNDEFINED> instruction: 0x0000c3ba
   2a56c:	muleq	r0, r8, r7

0002a570 <flatcc_builder_extend_offset_vector@@Base>:
   2a570:	push	{fp, lr}
   2a574:	mov	fp, sp
   2a578:	sub	sp, sp, #16
   2a57c:	ldr	r2, [pc, #68]	; 2a5c8 <flatcc_builder_extend_offset_vector@@Base+0x58>
   2a580:	str	r0, [sp, #8]
   2a584:	str	r1, [sp, #4]
   2a588:	ldr	r0, [sp, #8]
   2a58c:	ldr	r1, [sp, #4]
   2a590:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a594:	cmp	r0, #0
   2a598:	beq	2a5a8 <flatcc_builder_extend_offset_vector@@Base+0x38>
   2a59c:	movw	r0, #0
   2a5a0:	str	r0, [fp, #-4]
   2a5a4:	b	2a5bc <flatcc_builder_extend_offset_vector@@Base+0x4c>
   2a5a8:	ldr	r0, [sp, #8]
   2a5ac:	ldr	r1, [sp, #4]
   2a5b0:	lsl	r1, r1, #2
   2a5b4:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a5b8:	str	r0, [fp, #-4]
   2a5bc:	ldr	r0, [fp, #-4]
   2a5c0:	mov	sp, fp
   2a5c4:	pop	{fp, pc}
   2a5c8:	svccc	0x00ffffff

0002a5cc <flatcc_builder_offset_vector_push@@Base>:
   2a5cc:	push	{fp, lr}
   2a5d0:	mov	fp, sp
   2a5d4:	sub	sp, sp, #16
   2a5d8:	str	r0, [sp, #8]
   2a5dc:	str	r1, [sp, #4]
   2a5e0:	ldr	r0, [sp, #8]
   2a5e4:	ldr	r0, [r0, #32]
   2a5e8:	ldrh	r0, [r0, #14]
   2a5ec:	cmp	r0, #5
   2a5f0:	bne	2a5f8 <flatcc_builder_offset_vector_push@@Base+0x2c>
   2a5f4:	b	2a618 <flatcc_builder_offset_vector_push@@Base+0x4c>
   2a5f8:	ldr	r0, [pc, #152]	; 2a698 <flatcc_builder_offset_vector_push@@Base+0xcc>
   2a5fc:	add	r0, pc, r0
   2a600:	ldr	r1, [pc, #148]	; 2a69c <flatcc_builder_offset_vector_push@@Base+0xd0>
   2a604:	add	r1, pc, r1
   2a608:	ldr	r2, [pc, #144]	; 2a6a0 <flatcc_builder_offset_vector_push@@Base+0xd4>
   2a60c:	add	r3, pc, r2
   2a610:	movw	r2, #934	; 0x3a6
   2a614:	bl	12e68 <__assert_fail@plt>
   2a618:	ldr	r0, [pc, #132]	; 2a6a4 <flatcc_builder_offset_vector_push@@Base+0xd8>
   2a61c:	ldr	r1, [sp, #8]
   2a620:	ldr	r1, [r1, #32]
   2a624:	ldr	r1, [r1, #20]
   2a628:	cmp	r1, r0
   2a62c:	bne	2a63c <flatcc_builder_offset_vector_push@@Base+0x70>
   2a630:	movw	r0, #0
   2a634:	str	r0, [fp, #-4]
   2a638:	b	2a68c <flatcc_builder_offset_vector_push@@Base+0xc0>
   2a63c:	ldr	r0, [sp, #8]
   2a640:	ldr	r0, [r0, #32]
   2a644:	ldr	r1, [r0, #20]
   2a648:	add	r1, r1, #1
   2a64c:	str	r1, [r0, #20]
   2a650:	ldr	r0, [sp, #8]
   2a654:	movw	r1, #4
   2a658:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a65c:	str	r0, [sp]
   2a660:	movw	r1, #0
   2a664:	cmp	r1, r0
   2a668:	bne	2a678 <flatcc_builder_offset_vector_push@@Base+0xac>
   2a66c:	movw	r0, #0
   2a670:	str	r0, [fp, #-4]
   2a674:	b	2a68c <flatcc_builder_offset_vector_push@@Base+0xc0>
   2a678:	ldr	r0, [sp, #4]
   2a67c:	ldr	r1, [sp]
   2a680:	str	r0, [r1]
   2a684:	ldr	r0, [sp]
   2a688:	str	r0, [fp, #-4]
   2a68c:	ldr	r0, [fp, #-4]
   2a690:	mov	sp, fp
   2a694:	pop	{fp, pc}
   2a698:	andeq	ip, r0, r5, ror #13
   2a69c:	andeq	ip, r0, sl, lsr #5
   2a6a0:	andeq	ip, r0, r8, lsl #14
   2a6a4:	svccc	0x00ffffff

0002a6a8 <flatcc_builder_append_offset_vector@@Base>:
   2a6a8:	push	{fp, lr}
   2a6ac:	mov	fp, sp
   2a6b0:	sub	sp, sp, #16
   2a6b4:	str	r0, [sp, #8]
   2a6b8:	str	r1, [sp, #4]
   2a6bc:	str	r2, [sp]
   2a6c0:	ldr	r0, [sp, #8]
   2a6c4:	ldr	r0, [r0, #32]
   2a6c8:	ldrh	r0, [r0, #14]
   2a6cc:	cmp	r0, #5
   2a6d0:	bne	2a6d8 <flatcc_builder_append_offset_vector@@Base+0x30>
   2a6d4:	b	2a6f8 <flatcc_builder_append_offset_vector@@Base+0x50>
   2a6d8:	ldr	r0, [pc, #96]	; 2a740 <flatcc_builder_append_offset_vector@@Base+0x98>
   2a6dc:	add	r0, pc, r0
   2a6e0:	ldr	r1, [pc, #92]	; 2a744 <flatcc_builder_append_offset_vector@@Base+0x9c>
   2a6e4:	add	r1, pc, r1
   2a6e8:	ldr	r2, [pc, #88]	; 2a748 <flatcc_builder_append_offset_vector@@Base+0xa0>
   2a6ec:	add	r3, pc, r2
   2a6f0:	movw	r2, #948	; 0x3b4
   2a6f4:	bl	12e68 <__assert_fail@plt>
   2a6f8:	ldr	r2, [pc, #76]	; 2a74c <flatcc_builder_append_offset_vector@@Base+0xa4>
   2a6fc:	ldr	r0, [sp, #8]
   2a700:	ldr	r1, [sp]
   2a704:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a708:	cmp	r0, #0
   2a70c:	beq	2a71c <flatcc_builder_append_offset_vector@@Base+0x74>
   2a710:	movw	r0, #0
   2a714:	str	r0, [fp, #-4]
   2a718:	b	2a734 <flatcc_builder_append_offset_vector@@Base+0x8c>
   2a71c:	ldr	r0, [sp, #8]
   2a720:	ldr	r1, [sp, #4]
   2a724:	ldr	r2, [sp]
   2a728:	lsl	r2, r2, #2
   2a72c:	bl	2a454 <flatcc_builder_vector_push@@Base+0x110>
   2a730:	str	r0, [fp, #-4]
   2a734:	ldr	r0, [fp, #-4]
   2a738:	mov	sp, fp
   2a73c:	pop	{fp, pc}
   2a740:	andeq	ip, r0, r5, lsl #12
   2a744:	andeq	ip, r0, sl, asr #3
   2a748:	andeq	ip, r0, sl, lsl #13
   2a74c:	svccc	0x00ffffff

0002a750 <flatcc_builder_extend_string@@Base>:
   2a750:	push	{fp, lr}
   2a754:	mov	fp, sp
   2a758:	sub	sp, sp, #16
   2a75c:	str	r0, [sp, #8]
   2a760:	str	r1, [sp, #4]
   2a764:	ldr	r0, [sp, #8]
   2a768:	ldr	r0, [r0, #32]
   2a76c:	ldrh	r0, [r0, #14]
   2a770:	cmp	r0, #6
   2a774:	bne	2a77c <flatcc_builder_extend_string@@Base+0x2c>
   2a778:	b	2a79c <flatcc_builder_extend_string@@Base+0x4c>
   2a77c:	ldr	r0, [pc, #88]	; 2a7dc <flatcc_builder_extend_string@@Base+0x8c>
   2a780:	add	r0, pc, r0
   2a784:	ldr	r1, [pc, #84]	; 2a7e0 <flatcc_builder_extend_string@@Base+0x90>
   2a788:	add	r1, pc, r1
   2a78c:	ldr	r2, [pc, #80]	; 2a7e4 <flatcc_builder_extend_string@@Base+0x94>
   2a790:	add	r3, pc, r2
   2a794:	movw	r2, #957	; 0x3bd
   2a798:	bl	12e68 <__assert_fail@plt>
   2a79c:	ldr	r0, [sp, #8]
   2a7a0:	ldr	r1, [sp, #4]
   2a7a4:	mvn	r2, #0
   2a7a8:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a7ac:	cmp	r0, #0
   2a7b0:	beq	2a7c0 <flatcc_builder_extend_string@@Base+0x70>
   2a7b4:	movw	r0, #0
   2a7b8:	str	r0, [fp, #-4]
   2a7bc:	b	2a7d0 <flatcc_builder_extend_string@@Base+0x80>
   2a7c0:	ldr	r0, [sp, #8]
   2a7c4:	ldr	r1, [sp, #4]
   2a7c8:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2a7cc:	str	r0, [fp, #-4]
   2a7d0:	ldr	r0, [fp, #-4]
   2a7d4:	mov	sp, fp
   2a7d8:	pop	{fp, pc}
   2a7dc:	andeq	ip, r0, sl, ror #12
   2a7e0:	andeq	ip, r0, r6, lsr #2
   2a7e4:	andeq	ip, r0, r6, lsl #13

0002a7e8 <flatcc_builder_append_string@@Base>:
   2a7e8:	push	{fp, lr}
   2a7ec:	mov	fp, sp
   2a7f0:	sub	sp, sp, #16
   2a7f4:	str	r0, [sp, #8]
   2a7f8:	str	r1, [sp, #4]
   2a7fc:	str	r2, [sp]
   2a800:	ldr	r0, [sp, #8]
   2a804:	ldr	r0, [r0, #32]
   2a808:	ldrh	r0, [r0, #14]
   2a80c:	cmp	r0, #6
   2a810:	bne	2a818 <flatcc_builder_append_string@@Base+0x30>
   2a814:	b	2a838 <flatcc_builder_append_string@@Base+0x50>
   2a818:	ldr	r0, [pc, #92]	; 2a87c <flatcc_builder_append_string@@Base+0x94>
   2a81c:	add	r0, pc, r0
   2a820:	ldr	r1, [pc, #88]	; 2a880 <flatcc_builder_append_string@@Base+0x98>
   2a824:	add	r1, pc, r1
   2a828:	ldr	r2, [pc, #84]	; 2a884 <flatcc_builder_append_string@@Base+0x9c>
   2a82c:	add	r3, pc, r2
   2a830:	movw	r2, #966	; 0x3c6
   2a834:	bl	12e68 <__assert_fail@plt>
   2a838:	ldr	r0, [sp, #8]
   2a83c:	ldr	r1, [sp]
   2a840:	mvn	r2, #0
   2a844:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2a848:	cmp	r0, #0
   2a84c:	beq	2a85c <flatcc_builder_append_string@@Base+0x74>
   2a850:	movw	r0, #0
   2a854:	str	r0, [fp, #-4]
   2a858:	b	2a870 <flatcc_builder_append_string@@Base+0x88>
   2a85c:	ldr	r0, [sp, #8]
   2a860:	ldr	r1, [sp, #4]
   2a864:	ldr	r2, [sp]
   2a868:	bl	2a454 <flatcc_builder_vector_push@@Base+0x110>
   2a86c:	str	r0, [fp, #-4]
   2a870:	ldr	r0, [fp, #-4]
   2a874:	mov	sp, fp
   2a878:	pop	{fp, pc}
   2a87c:	andeq	ip, r0, lr, asr #11
   2a880:	andeq	ip, r0, sl, lsl #1
   2a884:	andeq	ip, r0, r9, lsr #12

0002a888 <flatcc_builder_append_string_str@@Base>:
   2a888:	push	{fp, lr}
   2a88c:	mov	fp, sp
   2a890:	sub	sp, sp, #24
   2a894:	str	r0, [fp, #-4]
   2a898:	str	r1, [fp, #-8]
   2a89c:	ldr	r0, [fp, #-4]
   2a8a0:	ldr	r1, [fp, #-8]
   2a8a4:	ldr	r2, [fp, #-8]
   2a8a8:	str	r0, [sp, #12]
   2a8ac:	mov	r0, r2
   2a8b0:	str	r1, [sp, #8]
   2a8b4:	bl	12e08 <strlen@plt>
   2a8b8:	ldr	r1, [sp, #12]
   2a8bc:	str	r0, [sp, #4]
   2a8c0:	mov	r0, r1
   2a8c4:	ldr	r1, [sp, #8]
   2a8c8:	ldr	r2, [sp, #4]
   2a8cc:	bl	2a7e8 <flatcc_builder_append_string@@Base>
   2a8d0:	mov	sp, fp
   2a8d4:	pop	{fp, pc}

0002a8d8 <flatcc_builder_append_string_strn@@Base>:
   2a8d8:	push	{fp, lr}
   2a8dc:	mov	fp, sp
   2a8e0:	sub	sp, sp, #24
   2a8e4:	str	r0, [fp, #-4]
   2a8e8:	str	r1, [fp, #-8]
   2a8ec:	str	r2, [sp, #12]
   2a8f0:	ldr	r0, [fp, #-4]
   2a8f4:	ldr	r1, [fp, #-8]
   2a8f8:	ldr	r2, [fp, #-8]
   2a8fc:	ldr	r3, [sp, #12]
   2a900:	str	r0, [sp, #8]
   2a904:	mov	r0, r2
   2a908:	str	r1, [sp, #4]
   2a90c:	mov	r1, r3
   2a910:	bl	2a934 <flatcc_builder_append_string_strn@@Base+0x5c>
   2a914:	ldr	r1, [sp, #8]
   2a918:	str	r0, [sp]
   2a91c:	mov	r0, r1
   2a920:	ldr	r1, [sp, #4]
   2a924:	ldr	r2, [sp]
   2a928:	bl	2a7e8 <flatcc_builder_append_string@@Base>
   2a92c:	mov	sp, fp
   2a930:	pop	{fp, pc}
   2a934:	push	{fp, lr}
   2a938:	mov	fp, sp
   2a93c:	sub	sp, sp, #16
   2a940:	str	r0, [fp, #-4]
   2a944:	str	r1, [sp, #8]
   2a948:	ldr	r0, [fp, #-4]
   2a94c:	ldr	r2, [sp, #8]
   2a950:	mov	r1, #0
   2a954:	bl	12e44 <memchr@plt>
   2a958:	str	r0, [sp, #4]
   2a95c:	ldr	r0, [sp, #4]
   2a960:	movw	r1, #0
   2a964:	cmp	r0, r1
   2a968:	beq	2a980 <flatcc_builder_append_string_strn@@Base+0xa8>
   2a96c:	ldr	r0, [sp, #4]
   2a970:	ldr	r1, [fp, #-4]
   2a974:	sub	r0, r0, r1
   2a978:	str	r0, [sp]
   2a97c:	b	2a988 <flatcc_builder_append_string_strn@@Base+0xb0>
   2a980:	ldr	r0, [sp, #8]
   2a984:	str	r0, [sp]
   2a988:	ldr	r0, [sp]
   2a98c:	mov	sp, fp
   2a990:	pop	{fp, pc}

0002a994 <flatcc_builder_truncate_vector@@Base>:
   2a994:	push	{fp, lr}
   2a998:	mov	fp, sp
   2a99c:	sub	sp, sp, #16
   2a9a0:	str	r0, [sp, #8]
   2a9a4:	str	r1, [sp, #4]
   2a9a8:	ldr	r0, [sp, #8]
   2a9ac:	ldr	r0, [r0, #32]
   2a9b0:	ldrh	r0, [r0, #14]
   2a9b4:	cmp	r0, #4
   2a9b8:	bne	2a9c0 <flatcc_builder_truncate_vector@@Base+0x2c>
   2a9bc:	b	2a9e0 <flatcc_builder_truncate_vector@@Base+0x4c>
   2a9c0:	ldr	r0, [pc, #192]	; 2aa88 <flatcc_builder_truncate_vector@@Base+0xf4>
   2a9c4:	add	r0, pc, r0
   2a9c8:	ldr	r1, [pc, #188]	; 2aa8c <flatcc_builder_truncate_vector@@Base+0xf8>
   2a9cc:	add	r1, pc, r1
   2a9d0:	ldr	r2, [pc, #184]	; 2aa90 <flatcc_builder_truncate_vector@@Base+0xfc>
   2a9d4:	add	r3, pc, r2
   2a9d8:	movw	r2, #985	; 0x3d9
   2a9dc:	bl	12e68 <__assert_fail@plt>
   2a9e0:	ldr	r0, [sp, #8]
   2a9e4:	ldr	r0, [r0, #32]
   2a9e8:	ldr	r0, [r0, #20]
   2a9ec:	ldr	r1, [sp, #4]
   2a9f0:	cmp	r0, r1
   2a9f4:	bcs	2aa40 <flatcc_builder_truncate_vector@@Base+0xac>
   2a9f8:	ldr	r0, [sp, #8]
   2a9fc:	ldr	r0, [r0, #32]
   2aa00:	ldr	r0, [r0, #20]
   2aa04:	ldr	r1, [sp, #4]
   2aa08:	cmp	r0, r1
   2aa0c:	bcc	2aa14 <flatcc_builder_truncate_vector@@Base+0x80>
   2aa10:	b	2aa34 <flatcc_builder_truncate_vector@@Base+0xa0>
   2aa14:	ldr	r0, [pc, #120]	; 2aa94 <flatcc_builder_truncate_vector@@Base+0x100>
   2aa18:	add	r0, pc, r0
   2aa1c:	ldr	r1, [pc, #116]	; 2aa98 <flatcc_builder_truncate_vector@@Base+0x104>
   2aa20:	add	r1, pc, r1
   2aa24:	ldr	r2, [pc, #112]	; 2aa9c <flatcc_builder_truncate_vector@@Base+0x108>
   2aa28:	add	r3, pc, r2
   2aa2c:	movw	r2, #986	; 0x3da
   2aa30:	bl	12e68 <__assert_fail@plt>
   2aa34:	mvn	r0, #0
   2aa38:	str	r0, [fp, #-4]
   2aa3c:	b	2aa7c <flatcc_builder_truncate_vector@@Base+0xe8>
   2aa40:	ldr	r0, [sp, #4]
   2aa44:	ldr	r1, [sp, #8]
   2aa48:	ldr	r1, [r1, #32]
   2aa4c:	ldr	r2, [r1, #20]
   2aa50:	sub	r0, r2, r0
   2aa54:	str	r0, [r1, #20]
   2aa58:	ldr	r0, [sp, #8]
   2aa5c:	ldr	r1, [sp, #8]
   2aa60:	ldr	r1, [r1, #32]
   2aa64:	ldr	r1, [r1, #16]
   2aa68:	ldr	r2, [sp, #4]
   2aa6c:	mul	r1, r1, r2
   2aa70:	bl	2aaa0 <flatcc_builder_truncate_vector@@Base+0x10c>
   2aa74:	movw	r0, #0
   2aa78:	str	r0, [fp, #-4]
   2aa7c:	ldr	r0, [fp, #-4]
   2aa80:	mov	sp, fp
   2aa84:	pop	{fp, pc}
   2aa88:	andeq	ip, r0, r4, lsr #4
   2aa8c:	andeq	fp, r0, r2, ror #29
   2aa90:	andeq	ip, r0, lr, asr #9
   2aa94:	andeq	ip, r0, r9, asr #9
   2aa98:	andeq	fp, r0, lr, lsl #29
   2aa9c:	andeq	ip, r0, sl, ror r4
   2aaa0:	push	{fp, lr}
   2aaa4:	mov	fp, sp
   2aaa8:	sub	sp, sp, #8
   2aaac:	str	r0, [sp, #4]
   2aab0:	str	r1, [sp]
   2aab4:	ldr	r0, [sp]
   2aab8:	ldr	r1, [sp, #4]
   2aabc:	ldr	r2, [r1, #20]
   2aac0:	sub	r0, r2, r0
   2aac4:	str	r0, [r1, #20]
   2aac8:	ldr	r0, [sp, #4]
   2aacc:	ldr	r0, [r0, #16]
   2aad0:	ldr	r1, [sp, #4]
   2aad4:	ldr	r1, [r1, #20]
   2aad8:	add	r0, r0, r1
   2aadc:	ldr	r2, [sp]
   2aae0:	movw	r1, #0
   2aae4:	and	r1, r1, #255	; 0xff
   2aae8:	bl	12e2c <memset@plt>
   2aaec:	mov	sp, fp
   2aaf0:	pop	{fp, pc}

0002aaf4 <flatcc_builder_truncate_offset_vector@@Base>:
   2aaf4:	push	{fp, lr}
   2aaf8:	mov	fp, sp
   2aafc:	sub	sp, sp, #16
   2ab00:	str	r0, [sp, #8]
   2ab04:	str	r1, [sp, #4]
   2ab08:	ldr	r0, [sp, #8]
   2ab0c:	ldr	r0, [r0, #32]
   2ab10:	ldrh	r0, [r0, #14]
   2ab14:	cmp	r0, #5
   2ab18:	bne	2ab20 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   2ab1c:	b	2ab40 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   2ab20:	ldr	r0, [pc, #192]	; 2abe8 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   2ab24:	add	r0, pc, r0
   2ab28:	ldr	r1, [pc, #188]	; 2abec <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   2ab2c:	add	r1, pc, r1
   2ab30:	ldr	r2, [pc, #184]	; 2abf0 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   2ab34:	add	r3, pc, r2
   2ab38:	movw	r2, #994	; 0x3e2
   2ab3c:	bl	12e68 <__assert_fail@plt>
   2ab40:	ldr	r0, [sp, #8]
   2ab44:	ldr	r0, [r0, #32]
   2ab48:	ldr	r0, [r0, #20]
   2ab4c:	ldr	r1, [sp, #4]
   2ab50:	cmp	r0, r1
   2ab54:	bcs	2aba0 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   2ab58:	ldr	r0, [sp, #8]
   2ab5c:	ldr	r0, [r0, #32]
   2ab60:	ldr	r0, [r0, #20]
   2ab64:	ldr	r1, [sp, #4]
   2ab68:	cmp	r0, r1
   2ab6c:	bcc	2ab74 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   2ab70:	b	2ab94 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   2ab74:	ldr	r0, [pc, #120]	; 2abf4 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   2ab78:	add	r0, pc, r0
   2ab7c:	ldr	r1, [pc, #116]	; 2abf8 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   2ab80:	add	r1, pc, r1
   2ab84:	ldr	r2, [pc, #112]	; 2abfc <flatcc_builder_truncate_offset_vector@@Base+0x108>
   2ab88:	add	r3, pc, r2
   2ab8c:	movw	r2, #995	; 0x3e3
   2ab90:	bl	12e68 <__assert_fail@plt>
   2ab94:	mvn	r0, #0
   2ab98:	str	r0, [fp, #-4]
   2ab9c:	b	2abdc <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   2aba0:	ldr	r0, [sp, #4]
   2aba4:	ldr	r1, [sp, #8]
   2aba8:	ldr	r1, [r1, #32]
   2abac:	ldr	r2, [r1, #20]
   2abb0:	sub	r0, r2, r0
   2abb4:	str	r0, [r1, #20]
   2abb8:	ldr	r0, [sp, #8]
   2abbc:	ldr	r1, [sp, #8]
   2abc0:	ldr	r1, [r1, #32]
   2abc4:	ldr	r1, [r1, #16]
   2abc8:	ldr	r2, [sp, #4]
   2abcc:	mul	r1, r1, r2
   2abd0:	bl	2aaa0 <flatcc_builder_truncate_vector@@Base+0x10c>
   2abd4:	movw	r0, #0
   2abd8:	str	r0, [fp, #-4]
   2abdc:	ldr	r0, [fp, #-4]
   2abe0:	mov	sp, fp
   2abe4:	pop	{fp, pc}
   2abe8:			; <UNDEFINED> instruction: 0x0000c1bd
   2abec:	andeq	fp, r0, r2, lsl #27
   2abf0:	ldrdeq	ip, [r0], -r1
   2abf4:	ldrdeq	ip, [r0], -r3
   2abf8:	andeq	fp, r0, lr, lsr #26
   2abfc:	andeq	ip, r0, sp, ror r3

0002ac00 <flatcc_builder_truncate_string@@Base>:
   2ac00:	push	{fp, lr}
   2ac04:	mov	fp, sp
   2ac08:	sub	sp, sp, #16
   2ac0c:	str	r0, [sp, #8]
   2ac10:	str	r1, [sp, #4]
   2ac14:	ldr	r0, [sp, #8]
   2ac18:	ldr	r0, [r0, #32]
   2ac1c:	ldrh	r0, [r0, #14]
   2ac20:	cmp	r0, #6
   2ac24:	bne	2ac2c <flatcc_builder_truncate_string@@Base+0x2c>
   2ac28:	b	2ac4c <flatcc_builder_truncate_string@@Base+0x4c>
   2ac2c:	ldr	r0, [pc, #176]	; 2ace4 <flatcc_builder_truncate_string@@Base+0xe4>
   2ac30:	add	r0, pc, r0
   2ac34:	ldr	r1, [pc, #172]	; 2ace8 <flatcc_builder_truncate_string@@Base+0xe8>
   2ac38:	add	r1, pc, r1
   2ac3c:	ldr	r2, [pc, #168]	; 2acec <flatcc_builder_truncate_string@@Base+0xec>
   2ac40:	add	r3, pc, r2
   2ac44:	movw	r2, #1003	; 0x3eb
   2ac48:	bl	12e68 <__assert_fail@plt>
   2ac4c:	ldr	r0, [sp, #8]
   2ac50:	ldr	r0, [r0, #32]
   2ac54:	ldr	r0, [r0, #20]
   2ac58:	ldr	r1, [sp, #4]
   2ac5c:	cmp	r0, r1
   2ac60:	bcs	2acac <flatcc_builder_truncate_string@@Base+0xac>
   2ac64:	ldr	r0, [sp, #8]
   2ac68:	ldr	r0, [r0, #32]
   2ac6c:	ldr	r0, [r0, #20]
   2ac70:	ldr	r1, [sp, #4]
   2ac74:	cmp	r0, r1
   2ac78:	bcc	2ac80 <flatcc_builder_truncate_string@@Base+0x80>
   2ac7c:	b	2aca0 <flatcc_builder_truncate_string@@Base+0xa0>
   2ac80:	ldr	r0, [pc, #104]	; 2acf0 <flatcc_builder_truncate_string@@Base+0xf0>
   2ac84:	add	r0, pc, r0
   2ac88:	ldr	r1, [pc, #100]	; 2acf4 <flatcc_builder_truncate_string@@Base+0xf4>
   2ac8c:	add	r1, pc, r1
   2ac90:	ldr	r2, [pc, #96]	; 2acf8 <flatcc_builder_truncate_string@@Base+0xf8>
   2ac94:	add	r3, pc, r2
   2ac98:	movw	r2, #1004	; 0x3ec
   2ac9c:	bl	12e68 <__assert_fail@plt>
   2aca0:	mvn	r0, #0
   2aca4:	str	r0, [fp, #-4]
   2aca8:	b	2acd8 <flatcc_builder_truncate_string@@Base+0xd8>
   2acac:	ldr	r0, [sp, #4]
   2acb0:	ldr	r1, [sp, #8]
   2acb4:	ldr	r1, [r1, #32]
   2acb8:	ldr	r2, [r1, #20]
   2acbc:	sub	r0, r2, r0
   2acc0:	str	r0, [r1, #20]
   2acc4:	ldr	r0, [sp, #8]
   2acc8:	ldr	r1, [sp, #4]
   2accc:	bl	2aaa0 <flatcc_builder_truncate_vector@@Base+0x10c>
   2acd0:	movw	r0, #0
   2acd4:	str	r0, [fp, #-4]
   2acd8:	ldr	r0, [fp, #-4]
   2acdc:	mov	sp, fp
   2ace0:	pop	{fp, pc}
   2ace4:			; <UNDEFINED> instruction: 0x0000c1ba
   2ace8:	andeq	fp, r0, r6, ror ip
   2acec:	andeq	ip, r0, r6, asr #6
   2acf0:	andeq	ip, r0, r1, asr #6
   2acf4:	andeq	fp, r0, r2, lsr #24
   2acf8:	strdeq	ip, [r0], -r2

0002acfc <flatcc_builder_start_vector@@Base>:
   2acfc:	push	{fp, lr}
   2ad00:	mov	fp, sp
   2ad04:	sub	sp, sp, #24
   2ad08:	str	r0, [fp, #-8]
   2ad0c:	str	r1, [sp, #12]
   2ad10:	strh	r2, [sp, #10]
   2ad14:	str	r3, [sp, #4]
   2ad18:	add	r0, sp, #10
   2ad1c:	movw	r1, #4
   2ad20:	uxth	r1, r1
   2ad24:	bl	2ada8 <flatcc_builder_start_vector@@Base+0xac>
   2ad28:	ldr	r0, [fp, #-8]
   2ad2c:	ldrh	r1, [sp, #10]
   2ad30:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   2ad34:	cmp	r0, #0
   2ad38:	beq	2ad48 <flatcc_builder_start_vector@@Base+0x4c>
   2ad3c:	mvn	r0, #0
   2ad40:	str	r0, [fp, #-4]
   2ad44:	b	2ad9c <flatcc_builder_start_vector@@Base+0xa0>
   2ad48:	ldr	r0, [sp, #12]
   2ad4c:	ldr	r1, [fp, #-8]
   2ad50:	ldr	r1, [r1, #32]
   2ad54:	str	r0, [r1, #16]
   2ad58:	ldr	r0, [fp, #-8]
   2ad5c:	ldr	r0, [r0, #32]
   2ad60:	movw	r1, #0
   2ad64:	str	r1, [r0, #20]
   2ad68:	ldr	r0, [sp, #4]
   2ad6c:	ldr	r1, [fp, #-8]
   2ad70:	ldr	r1, [r1, #32]
   2ad74:	str	r0, [r1, #24]
   2ad78:	ldr	r0, [fp, #-8]
   2ad7c:	ldr	r0, [r0, #32]
   2ad80:	movw	r1, #4
   2ad84:	strh	r1, [r0, #14]
   2ad88:	ldr	r0, [fp, #-8]
   2ad8c:	mvn	r1, #3
   2ad90:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2ad94:	movw	r0, #0
   2ad98:	str	r0, [fp, #-4]
   2ad9c:	ldr	r0, [fp, #-4]
   2ada0:	mov	sp, fp
   2ada4:	pop	{fp, pc}
   2ada8:	sub	sp, sp, #8
   2adac:	str	r0, [sp, #4]
   2adb0:	strh	r1, [sp, #2]
   2adb4:	ldr	r0, [sp, #4]
   2adb8:	ldrh	r0, [r0]
   2adbc:	ldrh	r1, [sp, #2]
   2adc0:	cmp	r0, r1
   2adc4:	bge	2add4 <flatcc_builder_start_vector@@Base+0xd8>
   2adc8:	ldrh	r0, [sp, #2]
   2adcc:	ldr	r1, [sp, #4]
   2add0:	strh	r0, [r1]
   2add4:	add	sp, sp, #8
   2add8:	bx	lr

0002addc <flatcc_builder_start_offset_vector@@Base>:
   2addc:	push	{fp, lr}
   2ade0:	mov	fp, sp
   2ade4:	sub	sp, sp, #8
   2ade8:	str	r0, [sp]
   2adec:	ldr	r0, [sp]
   2adf0:	movw	r1, #4
   2adf4:	uxth	r1, r1
   2adf8:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   2adfc:	cmp	r0, #0
   2ae00:	beq	2ae10 <flatcc_builder_start_offset_vector@@Base+0x34>
   2ae04:	mvn	r0, #0
   2ae08:	str	r0, [sp, #4]
   2ae0c:	b	2ae54 <flatcc_builder_start_offset_vector@@Base+0x78>
   2ae10:	ldr	r0, [sp]
   2ae14:	ldr	r0, [r0, #32]
   2ae18:	movw	r1, #4
   2ae1c:	str	r1, [r0, #16]
   2ae20:	ldr	r0, [sp]
   2ae24:	ldr	r0, [r0, #32]
   2ae28:	movw	r1, #0
   2ae2c:	str	r1, [r0, #20]
   2ae30:	ldr	r0, [sp]
   2ae34:	ldr	r0, [r0, #32]
   2ae38:	movw	r1, #5
   2ae3c:	strh	r1, [r0, #14]
   2ae40:	ldr	r0, [sp]
   2ae44:	mvn	r1, #3
   2ae48:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2ae4c:	movw	r0, #0
   2ae50:	str	r0, [sp, #4]
   2ae54:	ldr	r0, [sp, #4]
   2ae58:	mov	sp, fp
   2ae5c:	pop	{fp, pc}

0002ae60 <flatcc_builder_create_offset_vector@@Base>:
   2ae60:	push	{fp, lr}
   2ae64:	mov	fp, sp
   2ae68:	sub	sp, sp, #24
   2ae6c:	str	r0, [fp, #-8]
   2ae70:	str	r1, [sp, #12]
   2ae74:	str	r2, [sp, #8]
   2ae78:	ldr	r0, [fp, #-8]
   2ae7c:	bl	2addc <flatcc_builder_start_offset_vector@@Base>
   2ae80:	cmp	r0, #0
   2ae84:	beq	2ae94 <flatcc_builder_create_offset_vector@@Base+0x34>
   2ae88:	movw	r0, #0
   2ae8c:	str	r0, [fp, #-4]
   2ae90:	b	2aedc <flatcc_builder_create_offset_vector@@Base+0x7c>
   2ae94:	ldr	r0, [fp, #-8]
   2ae98:	ldr	r1, [sp, #8]
   2ae9c:	bl	2a570 <flatcc_builder_extend_offset_vector@@Base>
   2aea0:	str	r0, [sp, #4]
   2aea4:	movw	r1, #0
   2aea8:	cmp	r0, r1
   2aeac:	bne	2aebc <flatcc_builder_create_offset_vector@@Base+0x5c>
   2aeb0:	movw	r0, #0
   2aeb4:	str	r0, [fp, #-4]
   2aeb8:	b	2aedc <flatcc_builder_create_offset_vector@@Base+0x7c>
   2aebc:	ldr	r0, [sp, #4]
   2aec0:	ldr	r1, [sp, #12]
   2aec4:	ldr	r2, [sp, #8]
   2aec8:	lsl	r2, r2, #2
   2aecc:	bl	12db4 <memcpy@plt>
   2aed0:	ldr	r0, [fp, #-8]
   2aed4:	bl	2aee8 <flatcc_builder_end_offset_vector@@Base>
   2aed8:	str	r0, [fp, #-4]
   2aedc:	ldr	r0, [fp, #-4]
   2aee0:	mov	sp, fp
   2aee4:	pop	{fp, pc}

0002aee8 <flatcc_builder_end_offset_vector@@Base>:
   2aee8:	push	{fp, lr}
   2aeec:	mov	fp, sp
   2aef0:	sub	sp, sp, #16
   2aef4:	str	r0, [sp, #8]
   2aef8:	ldr	r0, [sp, #8]
   2aefc:	ldr	r0, [r0, #32]
   2af00:	ldrh	r0, [r0, #14]
   2af04:	cmp	r0, #5
   2af08:	bne	2af10 <flatcc_builder_end_offset_vector@@Base+0x28>
   2af0c:	b	2af30 <flatcc_builder_end_offset_vector@@Base+0x48>
   2af10:	ldr	r0, [pc, #108]	; 2af84 <flatcc_builder_end_offset_vector@@Base+0x9c>
   2af14:	add	r0, pc, r0
   2af18:	ldr	r1, [pc, #104]	; 2af88 <flatcc_builder_end_offset_vector@@Base+0xa0>
   2af1c:	add	r1, pc, r1
   2af20:	ldr	r2, [pc, #100]	; 2af8c <flatcc_builder_end_offset_vector@@Base+0xa4>
   2af24:	add	r3, pc, r2
   2af28:	movw	r2, #1480	; 0x5c8
   2af2c:	bl	12e68 <__assert_fail@plt>
   2af30:	ldr	r0, [sp, #8]
   2af34:	ldr	r1, [sp, #8]
   2af38:	ldr	r1, [r1, #16]
   2af3c:	ldr	r2, [sp, #8]
   2af40:	ldr	r2, [r2, #32]
   2af44:	ldr	r2, [r2, #20]
   2af48:	bl	2c2f8 <flatcc_builder_create_offset_vector_direct@@Base>
   2af4c:	str	r0, [sp, #4]
   2af50:	movw	r1, #0
   2af54:	cmp	r1, r0
   2af58:	bne	2af68 <flatcc_builder_end_offset_vector@@Base+0x80>
   2af5c:	movw	r0, #0
   2af60:	str	r0, [fp, #-4]
   2af64:	b	2af78 <flatcc_builder_end_offset_vector@@Base+0x90>
   2af68:	ldr	r0, [sp, #8]
   2af6c:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2af70:	ldr	r0, [sp, #4]
   2af74:	str	r0, [fp, #-4]
   2af78:	ldr	r0, [fp, #-4]
   2af7c:	mov	sp, fp
   2af80:	pop	{fp, pc}
   2af84:	andeq	fp, r0, sp, asr #27
   2af88:	muleq	r0, r2, r9
   2af8c:	andeq	ip, r0, ip, ror #7

0002af90 <flatcc_builder_start_string@@Base>:
   2af90:	push	{fp, lr}
   2af94:	mov	fp, sp
   2af98:	sub	sp, sp, #8
   2af9c:	str	r0, [sp]
   2afa0:	ldr	r0, [sp]
   2afa4:	movw	r1, #1
   2afa8:	uxth	r1, r1
   2afac:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   2afb0:	cmp	r0, #0
   2afb4:	beq	2afc4 <flatcc_builder_start_string@@Base+0x34>
   2afb8:	mvn	r0, #0
   2afbc:	str	r0, [sp, #4]
   2afc0:	b	2b008 <flatcc_builder_start_string@@Base+0x78>
   2afc4:	ldr	r0, [sp]
   2afc8:	ldr	r0, [r0, #32]
   2afcc:	movw	r1, #1
   2afd0:	str	r1, [r0, #16]
   2afd4:	ldr	r0, [sp]
   2afd8:	ldr	r0, [r0, #32]
   2afdc:	movw	r1, #0
   2afe0:	str	r1, [r0, #20]
   2afe4:	ldr	r0, [sp]
   2afe8:	ldr	r0, [r0, #32]
   2afec:	movw	r1, #6
   2aff0:	strh	r1, [r0, #14]
   2aff4:	ldr	r0, [sp]
   2aff8:	mvn	r1, #3
   2affc:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2b000:	movw	r0, #0
   2b004:	str	r0, [sp, #4]
   2b008:	ldr	r0, [sp, #4]
   2b00c:	mov	sp, fp
   2b010:	pop	{fp, pc}

0002b014 <flatcc_builder_reserve_table@@Base>:
   2b014:	push	{fp, lr}
   2b018:	mov	fp, sp
   2b01c:	sub	sp, sp, #8
   2b020:	str	r0, [sp, #4]
   2b024:	str	r1, [sp]
   2b028:	ldr	r0, [sp]
   2b02c:	cmp	r0, #0
   2b030:	blt	2b038 <flatcc_builder_reserve_table@@Base+0x24>
   2b034:	b	2b058 <flatcc_builder_reserve_table@@Base+0x44>
   2b038:	ldr	r0, [pc, #44]	; 2b06c <flatcc_builder_reserve_table@@Base+0x58>
   2b03c:	add	r0, pc, r0
   2b040:	ldr	r1, [pc, #40]	; 2b070 <flatcc_builder_reserve_table@@Base+0x5c>
   2b044:	add	r1, pc, r1
   2b048:	ldr	r2, [pc, #36]	; 2b074 <flatcc_builder_reserve_table@@Base+0x60>
   2b04c:	add	r3, pc, r2
   2b050:	movw	r2, #1065	; 0x429
   2b054:	bl	12e68 <__assert_fail@plt>
   2b058:	ldr	r0, [sp, #4]
   2b05c:	ldr	r1, [sp]
   2b060:	bl	2b078 <flatcc_builder_reserve_table@@Base+0x64>
   2b064:	mov	sp, fp
   2b068:	pop	{fp, pc}
   2b06c:	andeq	fp, r0, ip, ror #31
   2b070:	andeq	fp, r0, sl, ror #16
   2b074:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   2b078:	push	{fp, lr}
   2b07c:	mov	fp, sp
   2b080:	sub	sp, sp, #24
   2b084:	str	r0, [fp, #-8]
   2b088:	str	r1, [sp, #12]
   2b08c:	ldr	r0, [fp, #-8]
   2b090:	ldr	r0, [r0, #32]
   2b094:	ldr	r1, [r0, #16]
   2b098:	ldrh	r0, [r0, #28]
   2b09c:	add	r0, r1, r0, lsl #1
   2b0a0:	str	r0, [sp, #8]
   2b0a4:	ldr	r0, [sp, #12]
   2b0a8:	add	r0, r0, #2
   2b0ac:	lsl	r0, r0, #1
   2b0b0:	str	r0, [sp, #4]
   2b0b4:	ldr	r0, [fp, #-8]
   2b0b8:	ldr	r2, [sp, #8]
   2b0bc:	ldr	r3, [sp, #4]
   2b0c0:	movw	r1, #0
   2b0c4:	movw	ip, #1
   2b0c8:	str	ip, [sp]
   2b0cc:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b0d0:	ldr	r1, [fp, #-8]
   2b0d4:	str	r0, [r1, #4]
   2b0d8:	movw	r1, #0
   2b0dc:	cmp	r0, r1
   2b0e0:	bne	2b0f0 <flatcc_builder_reserve_table@@Base+0xdc>
   2b0e4:	mvn	r0, #0
   2b0e8:	str	r0, [fp, #-4]
   2b0ec:	b	2b164 <flatcc_builder_reserve_table@@Base+0x150>
   2b0f0:	ldr	r0, [fp, #-8]
   2b0f4:	ldr	r1, [r0, #4]
   2b0f8:	add	r1, r1, #4
   2b0fc:	str	r1, [r0, #4]
   2b100:	ldr	r0, [fp, #-8]
   2b104:	ldr	r0, [r0, #32]
   2b108:	ldr	r0, [r0, #20]
   2b10c:	str	r0, [sp, #8]
   2b110:	ldr	r0, [sp, #12]
   2b114:	lsl	r0, r0, #1
   2b118:	add	r0, r0, #1
   2b11c:	str	r0, [sp, #4]
   2b120:	ldr	r0, [fp, #-8]
   2b124:	ldr	r2, [sp, #8]
   2b128:	ldr	r3, [sp, #4]
   2b12c:	movw	r1, #3
   2b130:	movw	ip, #0
   2b134:	str	ip, [sp]
   2b138:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b13c:	ldr	r1, [fp, #-8]
   2b140:	str	r0, [r1]
   2b144:	movw	r1, #0
   2b148:	cmp	r0, r1
   2b14c:	bne	2b15c <flatcc_builder_reserve_table@@Base+0x148>
   2b150:	mvn	r0, #0
   2b154:	str	r0, [fp, #-4]
   2b158:	b	2b164 <flatcc_builder_reserve_table@@Base+0x150>
   2b15c:	movw	r0, #0
   2b160:	str	r0, [fp, #-4]
   2b164:	ldr	r0, [fp, #-4]
   2b168:	mov	sp, fp
   2b16c:	pop	{fp, pc}

0002b170 <flatcc_builder_start_table@@Base>:
   2b170:	push	{fp, lr}
   2b174:	mov	fp, sp
   2b178:	sub	sp, sp, #16
   2b17c:	str	r0, [sp, #8]
   2b180:	str	r1, [sp, #4]
   2b184:	ldr	r0, [sp, #8]
   2b188:	movw	r1, #4
   2b18c:	uxth	r1, r1
   2b190:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   2b194:	cmp	r0, #0
   2b198:	beq	2b1a8 <flatcc_builder_start_table@@Base+0x38>
   2b19c:	mvn	r0, #0
   2b1a0:	str	r0, [fp, #-4]
   2b1a4:	b	2b278 <flatcc_builder_start_table@@Base+0x108>
   2b1a8:	ldr	r0, [pc, #212]	; 2b284 <flatcc_builder_start_table@@Base+0x114>
   2b1ac:	ldr	r1, [sp, #8]
   2b1b0:	ldr	r1, [r1, #4]
   2b1b4:	ldr	r2, [sp, #8]
   2b1b8:	ldr	r2, [r2, #52]	; 0x34
   2b1bc:	sub	r1, r1, r2
   2b1c0:	ldr	r2, [sp, #8]
   2b1c4:	ldr	r2, [r2, #32]
   2b1c8:	str	r1, [r2, #16]
   2b1cc:	ldr	r1, [sp, #8]
   2b1d0:	ldr	r1, [r1]
   2b1d4:	ldr	r2, [sp, #8]
   2b1d8:	ldr	r2, [r2, #76]	; 0x4c
   2b1dc:	sub	r1, r1, r2
   2b1e0:	ldr	r2, [sp, #8]
   2b1e4:	ldr	r2, [r2, #32]
   2b1e8:	str	r1, [r2, #20]
   2b1ec:	ldr	r1, [sp, #8]
   2b1f0:	ldr	r1, [r1, #12]
   2b1f4:	ldr	r2, [sp, #8]
   2b1f8:	ldr	r2, [r2, #32]
   2b1fc:	str	r1, [r2, #24]
   2b200:	ldr	r1, [sp, #8]
   2b204:	ldrh	r1, [r1, #8]
   2b208:	ldr	r2, [sp, #8]
   2b20c:	ldr	r2, [r2, #32]
   2b210:	strh	r1, [r2, #28]
   2b214:	ldr	r1, [sp, #8]
   2b218:	movw	r2, #0
   2b21c:	str	r2, [r1, #12]
   2b220:	ldr	r1, [sp, #8]
   2b224:	str	r0, [r1, #12]
   2b228:	ldr	r0, [sp, #8]
   2b22c:	movw	r1, #0
   2b230:	strh	r1, [r0, #8]
   2b234:	ldr	r0, [sp, #8]
   2b238:	ldr	r0, [r0, #32]
   2b23c:	movw	r1, #3
   2b240:	strh	r1, [r0, #14]
   2b244:	ldr	r0, [sp, #8]
   2b248:	ldr	r1, [sp, #4]
   2b24c:	bl	2b078 <flatcc_builder_reserve_table@@Base+0x64>
   2b250:	cmp	r0, #0
   2b254:	beq	2b264 <flatcc_builder_start_table@@Base+0xf4>
   2b258:	mvn	r0, #0
   2b25c:	str	r0, [fp, #-4]
   2b260:	b	2b278 <flatcc_builder_start_table@@Base+0x108>
   2b264:	ldr	r0, [sp, #8]
   2b268:	movw	r1, #65532	; 0xfffc
   2b26c:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2b270:	movw	r0, #0
   2b274:	str	r0, [fp, #-4]
   2b278:	ldr	r0, [fp, #-4]
   2b27c:	mov	sp, fp
   2b280:	pop	{fp, pc}
   2b284:	svccs	0x00693b52

0002b288 <flatcc_builder_create_vtable@@Base>:
   2b288:	push	{fp, lr}
   2b28c:	mov	fp, sp
   2b290:	sub	sp, sp, #104	; 0x68
   2b294:	str	r0, [fp, #-8]
   2b298:	str	r1, [fp, #-12]
   2b29c:	strh	r2, [fp, #-14]
   2b2a0:	movw	r0, #0
   2b2a4:	str	r0, [sp, #12]
   2b2a8:	str	r0, [sp, #16]
   2b2ac:	ldrh	r0, [fp, #-14]
   2b2b0:	cmp	r0, #0
   2b2b4:	ble	2b2f8 <flatcc_builder_create_vtable@@Base+0x70>
   2b2b8:	ldrh	r0, [fp, #-14]
   2b2bc:	ldr	r1, [sp, #12]
   2b2c0:	add	r0, r1, r0
   2b2c4:	str	r0, [sp, #12]
   2b2c8:	ldr	r0, [fp, #-12]
   2b2cc:	add	r1, sp, #12
   2b2d0:	add	r1, r1, #8
   2b2d4:	ldr	r2, [sp, #16]
   2b2d8:	str	r0, [r1, r2, lsl #3]
   2b2dc:	ldrh	r0, [fp, #-14]
   2b2e0:	ldr	r2, [sp, #16]
   2b2e4:	add	r1, r1, r2, lsl #3
   2b2e8:	str	r0, [r1, #4]
   2b2ec:	ldr	r0, [sp, #16]
   2b2f0:	add	r0, r0, #1
   2b2f4:	str	r0, [sp, #16]
   2b2f8:	ldr	r0, [fp, #-8]
   2b2fc:	ldr	r0, [r0, #152]	; 0x98
   2b300:	cmp	r0, #0
   2b304:	bne	2b344 <flatcc_builder_create_vtable@@Base+0xbc>
   2b308:	ldr	r0, [fp, #-8]
   2b30c:	ldr	r0, [r0, #180]	; 0xb4
   2b310:	cmp	r0, #0
   2b314:	bne	2b344 <flatcc_builder_create_vtable@@Base+0xbc>
   2b318:	ldr	r0, [fp, #-8]
   2b31c:	add	r1, sp, #12
   2b320:	bl	2b38c <flatcc_builder_create_vtable@@Base+0x104>
   2b324:	str	r0, [fp, #-20]	; 0xffffffec
   2b328:	movw	r1, #0
   2b32c:	cmp	r1, r0
   2b330:	bne	2b340 <flatcc_builder_create_vtable@@Base+0xb8>
   2b334:	movw	r0, #0
   2b338:	str	r0, [fp, #-4]
   2b33c:	b	2b380 <flatcc_builder_create_vtable@@Base+0xf8>
   2b340:	b	2b378 <flatcc_builder_create_vtable@@Base+0xf0>
   2b344:	ldr	r0, [fp, #-8]
   2b348:	add	r1, sp, #12
   2b34c:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   2b350:	str	r0, [fp, #-20]	; 0xffffffec
   2b354:	movw	r1, #0
   2b358:	cmp	r1, r0
   2b35c:	bne	2b36c <flatcc_builder_create_vtable@@Base+0xe4>
   2b360:	movw	r0, #0
   2b364:	str	r0, [fp, #-4]
   2b368:	b	2b380 <flatcc_builder_create_vtable@@Base+0xf8>
   2b36c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2b370:	add	r0, r0, #1
   2b374:	str	r0, [fp, #-20]	; 0xffffffec
   2b378:	ldr	r0, [fp, #-20]	; 0xffffffec
   2b37c:	str	r0, [fp, #-4]
   2b380:	ldr	r0, [fp, #-4]
   2b384:	mov	sp, fp
   2b388:	pop	{fp, pc}
   2b38c:	push	{fp, lr}
   2b390:	mov	fp, sp
   2b394:	sub	sp, sp, #24
   2b398:	str	r0, [fp, #-4]
   2b39c:	str	r1, [fp, #-8]
   2b3a0:	ldr	r0, [fp, #-4]
   2b3a4:	ldr	r0, [r0, #140]	; 0x8c
   2b3a8:	str	r0, [sp, #12]
   2b3ac:	ldr	r0, [sp, #12]
   2b3b0:	ldr	r1, [fp, #-8]
   2b3b4:	ldr	r1, [r1]
   2b3b8:	add	r0, r0, r1
   2b3bc:	ldr	r1, [fp, #-4]
   2b3c0:	str	r0, [r1, #140]	; 0x8c
   2b3c4:	ldr	r0, [fp, #-4]
   2b3c8:	ldr	r0, [r0, #140]	; 0x8c
   2b3cc:	ldr	r1, [sp, #12]
   2b3d0:	cmp	r0, r1
   2b3d4:	bge	2b3f8 <flatcc_builder_create_vtable@@Base+0x170>
   2b3d8:	ldr	r0, [pc, #168]	; 2b488 <flatcc_builder_create_vtable@@Base+0x200>
   2b3dc:	add	r0, pc, r0
   2b3e0:	ldr	r1, [pc, #164]	; 2b48c <flatcc_builder_create_vtable@@Base+0x204>
   2b3e4:	add	r1, pc, r1
   2b3e8:	ldr	r2, [pc, #160]	; 2b490 <flatcc_builder_create_vtable@@Base+0x208>
   2b3ec:	add	r3, pc, r2
   2b3f0:	movw	r2, #673	; 0x2a1
   2b3f4:	bl	12e68 <__assert_fail@plt>
   2b3f8:	ldr	r0, [fp, #-4]
   2b3fc:	ldr	r0, [r0, #44]	; 0x2c
   2b400:	ldr	r1, [fp, #-4]
   2b404:	ldr	r1, [r1, #36]	; 0x24
   2b408:	ldr	r2, [fp, #-8]
   2b40c:	add	r2, r2, #8
   2b410:	ldr	r3, [fp, #-8]
   2b414:	ldr	r3, [r3, #4]
   2b418:	ldr	ip, [sp, #12]
   2b41c:	ldr	lr, [fp, #-8]
   2b420:	ldr	lr, [lr]
   2b424:	str	r0, [sp, #8]
   2b428:	mov	r0, r1
   2b42c:	mov	r1, r2
   2b430:	mov	r2, r3
   2b434:	mov	r3, ip
   2b438:	str	lr, [sp]
   2b43c:	ldr	ip, [sp, #8]
   2b440:	blx	ip
   2b444:	cmp	r0, #0
   2b448:	beq	2b46c <flatcc_builder_create_vtable@@Base+0x1e4>
   2b44c:	ldr	r0, [pc, #40]	; 2b47c <flatcc_builder_create_vtable@@Base+0x1f4>
   2b450:	add	r0, pc, r0
   2b454:	ldr	r1, [pc, #36]	; 2b480 <flatcc_builder_create_vtable@@Base+0x1f8>
   2b458:	add	r1, pc, r1
   2b45c:	ldr	r2, [pc, #32]	; 2b484 <flatcc_builder_create_vtable@@Base+0x1fc>
   2b460:	add	r3, pc, r2
   2b464:	movw	r2, #677	; 0x2a5
   2b468:	bl	12e68 <__assert_fail@plt>
   2b46c:	ldr	r0, [sp, #12]
   2b470:	add	r0, r0, #1
   2b474:	mov	sp, fp
   2b478:	pop	{fp, pc}
   2b47c:	andeq	ip, r0, fp, lsl r6
   2b480:	andeq	fp, r0, r6, asr r4
   2b484:	andeq	ip, r0, r6, lsl #11
   2b488:	andeq	ip, r0, pc, lsl #13
   2b48c:	andeq	fp, r0, sl, asr #9
   2b490:	strdeq	ip, [r0], -sl

0002b494 <flatcc_builder_create_cached_vtable@@Base>:
   2b494:	push	{fp, lr}
   2b498:	mov	fp, sp
   2b49c:	sub	sp, sp, #48	; 0x30
   2b4a0:	str	r0, [fp, #-8]
   2b4a4:	str	r1, [fp, #-12]
   2b4a8:	strh	r2, [fp, #-14]
   2b4ac:	str	r3, [fp, #-20]	; 0xffffffec
   2b4b0:	ldr	r0, [fp, #-8]
   2b4b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2b4b8:	bl	2b7a0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2b4bc:	str	r0, [sp, #12]
   2b4c0:	movw	r1, #0
   2b4c4:	cmp	r0, r1
   2b4c8:	bne	2b4d8 <flatcc_builder_create_cached_vtable@@Base+0x44>
   2b4cc:	movw	r0, #0
   2b4d0:	str	r0, [fp, #-4]
   2b4d4:	b	2b794 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b4d8:	ldr	r0, [sp, #12]
   2b4dc:	str	r0, [sp, #16]
   2b4e0:	ldr	r0, [sp, #16]
   2b4e4:	ldr	r0, [r0]
   2b4e8:	str	r0, [sp, #8]
   2b4ec:	movw	r0, #0
   2b4f0:	str	r0, [sp, #20]
   2b4f4:	ldr	r0, [sp, #8]
   2b4f8:	cmp	r0, #0
   2b4fc:	beq	2b600 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   2b500:	ldr	r0, [fp, #-8]
   2b504:	ldr	r0, [r0, #100]	; 0x64
   2b508:	ldr	r1, [sp, #8]
   2b50c:	add	r0, r0, r1
   2b510:	str	r0, [sp, #24]
   2b514:	ldr	r0, [fp, #-8]
   2b518:	ldr	r0, [r0, #68]	; 0x44
   2b51c:	ldr	r1, [sp, #24]
   2b520:	ldr	r1, [r1, #8]
   2b524:	add	r0, r0, r1
   2b528:	str	r0, [sp, #4]
   2b52c:	ldr	r0, [sp, #4]
   2b530:	ldrh	r0, [r0]
   2b534:	ldrh	r1, [fp, #-14]
   2b538:	cmp	r0, r1
   2b53c:	bne	2b55c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   2b540:	ldr	r0, [fp, #-12]
   2b544:	ldr	r1, [sp, #4]
   2b548:	ldrh	r2, [fp, #-14]
   2b54c:	bl	12dc0 <memcmp@plt>
   2b550:	movw	r1, #0
   2b554:	cmp	r1, r0
   2b558:	beq	2b578 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   2b55c:	ldr	r0, [sp, #24]
   2b560:	add	r0, r0, #12
   2b564:	str	r0, [sp, #16]
   2b568:	ldr	r0, [sp, #24]
   2b56c:	ldr	r0, [r0, #12]
   2b570:	str	r0, [sp, #8]
   2b574:	b	2b4f4 <flatcc_builder_create_cached_vtable@@Base+0x60>
   2b578:	ldr	r0, [sp, #24]
   2b57c:	ldr	r0, [r0, #4]
   2b580:	ldr	r1, [fp, #-8]
   2b584:	ldr	r1, [r1, #152]	; 0x98
   2b588:	cmp	r0, r1
   2b58c:	beq	2b5b4 <flatcc_builder_create_cached_vtable@@Base+0x120>
   2b590:	ldr	r0, [sp, #24]
   2b594:	str	r0, [sp, #20]
   2b598:	ldr	r0, [sp, #24]
   2b59c:	add	r0, r0, #12
   2b5a0:	str	r0, [sp, #16]
   2b5a4:	ldr	r0, [sp, #24]
   2b5a8:	ldr	r0, [r0, #12]
   2b5ac:	str	r0, [sp, #8]
   2b5b0:	b	2b4f4 <flatcc_builder_create_cached_vtable@@Base+0x60>
   2b5b4:	ldr	r0, [sp, #16]
   2b5b8:	ldr	r1, [sp, #12]
   2b5bc:	cmp	r0, r1
   2b5c0:	beq	2b5f0 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   2b5c4:	ldr	r0, [sp, #24]
   2b5c8:	ldr	r0, [r0, #12]
   2b5cc:	ldr	r1, [sp, #16]
   2b5d0:	str	r0, [r1]
   2b5d4:	ldr	r0, [sp, #12]
   2b5d8:	ldr	r0, [r0]
   2b5dc:	ldr	r1, [sp, #24]
   2b5e0:	str	r0, [r1, #12]
   2b5e4:	ldr	r0, [sp, #8]
   2b5e8:	ldr	r1, [sp, #12]
   2b5ec:	str	r0, [r1]
   2b5f0:	ldr	r0, [sp, #24]
   2b5f4:	ldr	r0, [r0]
   2b5f8:	str	r0, [fp, #-4]
   2b5fc:	b	2b794 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b600:	ldr	r0, [fp, #-8]
   2b604:	ldr	r1, [fp, #-8]
   2b608:	ldr	r2, [r1, #124]	; 0x7c
   2b60c:	movw	r1, #6
   2b610:	movw	r3, #16
   2b614:	movw	ip, #0
   2b618:	str	ip, [sp]
   2b61c:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b620:	str	r0, [sp, #24]
   2b624:	movw	r1, #0
   2b628:	cmp	r0, r1
   2b62c:	bne	2b63c <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   2b630:	movw	r0, #0
   2b634:	str	r0, [fp, #-4]
   2b638:	b	2b794 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b63c:	ldr	r0, [fp, #-8]
   2b640:	ldr	r0, [r0, #124]	; 0x7c
   2b644:	str	r0, [sp, #8]
   2b648:	ldr	r0, [fp, #-8]
   2b64c:	ldr	r1, [r0, #124]	; 0x7c
   2b650:	add	r1, r1, #16
   2b654:	str	r1, [r0, #124]	; 0x7c
   2b658:	ldr	r0, [fp, #-8]
   2b65c:	ldr	r0, [r0, #152]	; 0x98
   2b660:	ldr	r1, [sp, #24]
   2b664:	str	r0, [r1, #4]
   2b668:	ldr	r0, [sp, #12]
   2b66c:	ldr	r0, [r0]
   2b670:	ldr	r1, [sp, #24]
   2b674:	str	r0, [r1, #12]
   2b678:	ldr	r0, [sp, #8]
   2b67c:	ldr	r1, [sp, #12]
   2b680:	str	r0, [r1]
   2b684:	ldr	r0, [fp, #-8]
   2b688:	ldr	r1, [fp, #-12]
   2b68c:	ldrh	r2, [fp, #-14]
   2b690:	bl	2b288 <flatcc_builder_create_vtable@@Base>
   2b694:	ldr	r1, [sp, #24]
   2b698:	str	r0, [r1]
   2b69c:	movw	r1, #0
   2b6a0:	cmp	r1, r0
   2b6a4:	bne	2b6b4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   2b6a8:	movw	r0, #0
   2b6ac:	str	r0, [fp, #-4]
   2b6b0:	b	2b794 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b6b4:	ldr	r0, [sp, #20]
   2b6b8:	movw	r1, #0
   2b6bc:	cmp	r0, r1
   2b6c0:	beq	2b6d8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   2b6c4:	ldr	r0, [sp, #20]
   2b6c8:	ldr	r0, [r0, #8]
   2b6cc:	ldr	r1, [sp, #24]
   2b6d0:	str	r0, [r1, #8]
   2b6d4:	b	2b788 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   2b6d8:	ldr	r0, [fp, #-8]
   2b6dc:	ldr	r0, [r0, #172]	; 0xac
   2b6e0:	cmp	r0, #0
   2b6e4:	beq	2b714 <flatcc_builder_create_cached_vtable@@Base+0x280>
   2b6e8:	ldr	r0, [fp, #-8]
   2b6ec:	ldr	r0, [r0, #172]	; 0xac
   2b6f0:	ldr	r1, [fp, #-8]
   2b6f4:	ldr	r1, [r1, #120]	; 0x78
   2b6f8:	ldrh	r2, [fp, #-14]
   2b6fc:	add	r1, r1, r2
   2b700:	cmp	r0, r1
   2b704:	bcs	2b714 <flatcc_builder_create_cached_vtable@@Base+0x280>
   2b708:	ldr	r0, [fp, #-8]
   2b70c:	bl	287bc <flatcc_builder_flush_vtable_cache@@Base>
   2b710:	b	2b784 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   2b714:	ldr	r0, [fp, #-8]
   2b718:	ldr	r1, [fp, #-8]
   2b71c:	ldr	r2, [r1, #120]	; 0x78
   2b720:	ldrh	r3, [fp, #-14]
   2b724:	movw	r1, #2
   2b728:	movw	ip, #0
   2b72c:	str	ip, [sp]
   2b730:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2b734:	str	r0, [sp, #4]
   2b738:	movw	r1, #0
   2b73c:	cmp	r0, r1
   2b740:	bne	2b750 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   2b744:	mvn	r0, #0
   2b748:	str	r0, [fp, #-4]
   2b74c:	b	2b794 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2b750:	ldr	r0, [fp, #-8]
   2b754:	ldr	r0, [r0, #120]	; 0x78
   2b758:	ldr	r1, [sp, #24]
   2b75c:	str	r0, [r1, #8]
   2b760:	ldrh	r0, [fp, #-14]
   2b764:	ldr	r1, [fp, #-8]
   2b768:	ldr	r2, [r1, #120]	; 0x78
   2b76c:	add	r0, r2, r0
   2b770:	str	r0, [r1, #120]	; 0x78
   2b774:	ldr	r0, [sp, #4]
   2b778:	ldr	r1, [fp, #-12]
   2b77c:	ldrh	r2, [fp, #-14]
   2b780:	bl	12db4 <memcpy@plt>
   2b784:	b	2b788 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   2b788:	ldr	r0, [sp, #24]
   2b78c:	ldr	r0, [r0]
   2b790:	str	r0, [fp, #-4]
   2b794:	ldr	r0, [fp, #-4]
   2b798:	mov	sp, fp
   2b79c:	pop	{fp, pc}
   2b7a0:	push	{fp, lr}
   2b7a4:	mov	fp, sp
   2b7a8:	sub	sp, sp, #24
   2b7ac:	str	r0, [fp, #-8]
   2b7b0:	str	r1, [sp, #12]
   2b7b4:	ldr	r0, [fp, #-8]
   2b7b8:	ldr	r0, [r0, #116]	; 0x74
   2b7bc:	cmp	r0, #0
   2b7c0:	bne	2b7e4 <flatcc_builder_create_cached_vtable@@Base+0x350>
   2b7c4:	ldr	r0, [fp, #-8]
   2b7c8:	bl	2e2c0 <flatcc_builder_get_emit_context@@Base+0xe8>
   2b7cc:	cmp	r0, #0
   2b7d0:	beq	2b7e0 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   2b7d4:	movw	r0, #0
   2b7d8:	str	r0, [fp, #-4]
   2b7dc:	b	2b818 <flatcc_builder_create_cached_vtable@@Base+0x384>
   2b7e0:	b	2b7e4 <flatcc_builder_create_cached_vtable@@Base+0x350>
   2b7e4:	ldr	r0, [fp, #-8]
   2b7e8:	ldr	r0, [r0, #92]	; 0x5c
   2b7ec:	str	r0, [sp, #8]
   2b7f0:	ldr	r0, [sp, #8]
   2b7f4:	ldr	r1, [sp, #12]
   2b7f8:	ldr	r2, [fp, #-8]
   2b7fc:	ldr	r2, [r2, #116]	; 0x74
   2b800:	rsb	r2, r2, #32
   2b804:	lsr	r1, r1, r2
   2b808:	mov	r2, r1
   2b80c:	add	r0, r0, r1, lsl #2
   2b810:	str	r0, [fp, #-4]
   2b814:	str	r2, [sp, #4]
   2b818:	ldr	r0, [fp, #-4]
   2b81c:	mov	sp, fp
   2b820:	pop	{fp, pc}

0002b824 <flatcc_builder_create_table@@Base>:
   2b824:	push	{r4, sl, fp, lr}
   2b828:	add	fp, sp, #8
   2b82c:	sub	sp, sp, #136	; 0x88
   2b830:	ldr	ip, [fp, #16]
   2b834:	ldr	lr, [fp, #12]
   2b838:	ldr	r4, [fp, #8]
   2b83c:	str	r0, [fp, #-16]
   2b840:	str	r1, [fp, #-20]	; 0xffffffec
   2b844:	str	r2, [fp, #-24]	; 0xffffffe8
   2b848:	strh	r3, [fp, #-26]	; 0xffffffe6
   2b84c:	ldr	r0, [fp, #12]
   2b850:	cmp	r0, #0
   2b854:	str	r4, [sp, #8]
   2b858:	str	lr, [sp, #4]
   2b85c:	str	ip, [sp]
   2b860:	blt	2b868 <flatcc_builder_create_table@@Base+0x44>
   2b864:	b	2b888 <flatcc_builder_create_table@@Base+0x64>
   2b868:	ldr	r0, [pc, #616]	; 2bad8 <flatcc_builder_create_table@@Base+0x2b4>
   2b86c:	add	r0, pc, r0
   2b870:	ldr	r1, [pc, #612]	; 2badc <flatcc_builder_create_table@@Base+0x2b8>
   2b874:	add	r1, pc, r1
   2b878:	ldr	r2, [pc, #608]	; 2bae0 <flatcc_builder_create_table@@Base+0x2bc>
   2b87c:	add	r3, pc, r2
   2b880:	movw	r2, #1237	; 0x4d5
   2b884:	bl	12e68 <__assert_fail@plt>
   2b888:	ldr	r0, [fp, #16]
   2b88c:	and	r0, r0, #1
   2b890:	cmp	r0, #0
   2b894:	beq	2b89c <flatcc_builder_create_table@@Base+0x78>
   2b898:	b	2b8bc <flatcc_builder_create_table@@Base+0x98>
   2b89c:	ldr	r0, [pc, #576]	; 2bae4 <flatcc_builder_create_table@@Base+0x2c0>
   2b8a0:	add	r0, pc, r0
   2b8a4:	ldr	r1, [pc, #572]	; 2bae8 <flatcc_builder_create_table@@Base+0x2c4>
   2b8a8:	add	r1, pc, r1
   2b8ac:	ldr	r2, [pc, #568]	; 2baec <flatcc_builder_create_table@@Base+0x2c8>
   2b8b0:	add	r3, pc, r2
   2b8b4:	movw	r2, #1243	; 0x4db
   2b8b8:	bl	12e68 <__assert_fail@plt>
   2b8bc:	sub	r0, fp, #26
   2b8c0:	movw	r1, #4
   2b8c4:	uxth	r1, r1
   2b8c8:	bl	2ada8 <flatcc_builder_start_vector@@Base+0xac>
   2b8cc:	ldr	r0, [fp, #-16]
   2b8d0:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   2b8d4:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   2b8d8:	ldr	r0, [fp, #-16]
   2b8dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2b8e0:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   2b8e4:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   2b8e8:	str	r0, [fp, #-36]	; 0xffffffdc
   2b8ec:	ldr	r0, [fp, #-16]
   2b8f0:	ldr	r0, [r0, #136]	; 0x88
   2b8f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2b8f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b8fc:	add	r1, r1, r2
   2b900:	add	r1, r1, #4
   2b904:	sub	r0, r0, r1
   2b908:	str	r0, [fp, #-52]	; 0xffffffcc
   2b90c:	ldr	r0, [fp, #16]
   2b910:	sub	r0, r0, #1
   2b914:	str	r0, [fp, #-48]	; 0xffffffd0
   2b918:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b91c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b920:	sub	r0, r0, r1
   2b924:	str	r0, [fp, #-40]	; 0xffffffd8
   2b928:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2b92c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2b930:	sub	r0, r0, r1
   2b934:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2b938:	cmp	r0, r1
   2b93c:	beq	2b94c <flatcc_builder_create_table@@Base+0x128>
   2b940:	mvn	r0, #0
   2b944:	str	r0, [fp, #-12]
   2b948:	b	2bacc <flatcc_builder_create_table@@Base+0x2a8>
   2b94c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b950:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2b954:	str	r0, [fp, #-44]	; 0xffffffd4
   2b958:	movw	r0, #0
   2b95c:	str	r0, [fp, #-32]	; 0xffffffe0
   2b960:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b964:	ldr	r1, [fp, #12]
   2b968:	cmp	r0, r1
   2b96c:	bge	2b9d8 <flatcc_builder_create_table@@Base+0x1b4>
   2b970:	ldr	r0, [fp, #-20]	; 0xffffffec
   2b974:	ldr	r1, [fp, #8]
   2b978:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b97c:	add	r1, r1, r2, lsl #1
   2b980:	ldrh	r1, [r1]
   2b984:	add	r0, r0, r1
   2b988:	str	r0, [fp, #-60]	; 0xffffffc4
   2b98c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b990:	ldr	r0, [r0]
   2b994:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2b998:	sub	r0, r0, r1
   2b99c:	ldr	r1, [fp, #8]
   2b9a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b9a4:	add	r1, r1, r2, lsl #1
   2b9a8:	ldrh	r1, [r1]
   2b9ac:	sub	r0, r0, r1
   2b9b0:	sub	r0, r0, #4
   2b9b4:	str	r0, [fp, #-56]	; 0xffffffc8
   2b9b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2b9bc:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2b9c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2b9c4:	str	r0, [r1]
   2b9c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b9cc:	add	r0, r0, #1
   2b9d0:	str	r0, [fp, #-32]	; 0xffffffe0
   2b9d4:	b	2b960 <flatcc_builder_create_table@@Base+0x13c>
   2b9d8:	mov	r0, #0
   2b9dc:	str	r0, [sp, #12]
   2b9e0:	str	r0, [sp, #16]
   2b9e4:	ldr	r0, [sp, #12]
   2b9e8:	add	r0, r0, #4
   2b9ec:	str	r0, [sp, #12]
   2b9f0:	add	r0, sp, #12
   2b9f4:	add	r0, r0, #8
   2b9f8:	ldr	r1, [sp, #16]
   2b9fc:	sub	r2, fp, #44	; 0x2c
   2ba00:	str	r2, [r0, r1, lsl #3]
   2ba04:	ldr	r1, [sp, #16]
   2ba08:	add	r0, r0, r1, lsl #3
   2ba0c:	movw	r1, #4
   2ba10:	str	r1, [r0, #4]
   2ba14:	ldr	r0, [sp, #16]
   2ba18:	add	r0, r0, #1
   2ba1c:	str	r0, [sp, #16]
   2ba20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ba24:	cmp	r0, #0
   2ba28:	bls	2ba6c <flatcc_builder_create_table@@Base+0x248>
   2ba2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ba30:	ldr	r1, [sp, #12]
   2ba34:	add	r0, r1, r0
   2ba38:	str	r0, [sp, #12]
   2ba3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2ba40:	add	r1, sp, #12
   2ba44:	add	r1, r1, #8
   2ba48:	ldr	r2, [sp, #16]
   2ba4c:	str	r0, [r1, r2, lsl #3]
   2ba50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ba54:	ldr	r2, [sp, #16]
   2ba58:	add	r1, r1, r2, lsl #3
   2ba5c:	str	r0, [r1, #4]
   2ba60:	ldr	r0, [sp, #16]
   2ba64:	add	r0, r0, #1
   2ba68:	str	r0, [sp, #16]
   2ba6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2ba70:	cmp	r0, #0
   2ba74:	bls	2babc <flatcc_builder_create_table@@Base+0x298>
   2ba78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2ba7c:	ldr	r1, [sp, #12]
   2ba80:	add	r0, r1, r0
   2ba84:	str	r0, [sp, #12]
   2ba88:	add	r0, sp, #12
   2ba8c:	add	r0, r0, #8
   2ba90:	ldr	r1, [sp, #16]
   2ba94:	ldr	r2, [pc, #84]	; 2baf0 <flatcc_builder_create_table@@Base+0x2cc>
   2ba98:	ldr	r2, [pc, r2]
   2ba9c:	str	r2, [r0, r1, lsl #3]
   2baa0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2baa4:	ldr	r2, [sp, #16]
   2baa8:	add	r0, r0, r2, lsl #3
   2baac:	str	r1, [r0, #4]
   2bab0:	ldr	r0, [sp, #16]
   2bab4:	add	r0, r0, #1
   2bab8:	str	r0, [sp, #16]
   2babc:	ldr	r0, [fp, #-16]
   2bac0:	add	r1, sp, #12
   2bac4:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   2bac8:	str	r0, [fp, #-12]
   2bacc:	ldr	r0, [fp, #-12]
   2bad0:	sub	sp, fp, #8
   2bad4:	pop	{r4, sl, fp, pc}
   2bad8:			; <UNDEFINED> instruction: 0x0000b7b5
   2badc:	andeq	fp, r0, sl, lsr r0
   2bae0:			; <UNDEFINED> instruction: 0x0000b7b7
   2bae4:	andeq	fp, r0, pc, lsr #16
   2bae8:	andeq	fp, r0, r6
   2baec:	andeq	fp, r0, r3, lsl #15
   2baf0:			; <UNDEFINED> instruction: 0x0001d5b8

0002baf4 <flatcc_builder_check_required_field@@Base>:
   2baf4:	push	{fp, lr}
   2baf8:	mov	fp, sp
   2bafc:	sub	sp, sp, #16
   2bb00:	str	r0, [fp, #-4]
   2bb04:	strh	r1, [fp, #-6]
   2bb08:	ldr	r0, [fp, #-4]
   2bb0c:	ldr	r0, [r0, #32]
   2bb10:	ldrh	r0, [r0, #14]
   2bb14:	cmp	r0, #3
   2bb18:	bne	2bb20 <flatcc_builder_check_required_field@@Base+0x2c>
   2bb1c:	b	2bb40 <flatcc_builder_check_required_field@@Base+0x4c>
   2bb20:	ldr	r0, [pc, #104]	; 2bb90 <flatcc_builder_check_required_field@@Base+0x9c>
   2bb24:	add	r0, pc, r0
   2bb28:	ldr	r1, [pc, #100]	; 2bb94 <flatcc_builder_check_required_field@@Base+0xa0>
   2bb2c:	add	r1, pc, r1
   2bb30:	ldr	r2, [pc, #96]	; 2bb98 <flatcc_builder_check_required_field@@Base+0xa4>
   2bb34:	add	r3, pc, r2
   2bb38:	movw	r2, #1272	; 0x4f8
   2bb3c:	bl	12e68 <__assert_fail@plt>
   2bb40:	ldrh	r0, [fp, #-6]
   2bb44:	ldr	r1, [fp, #-4]
   2bb48:	ldrh	r1, [r1, #8]
   2bb4c:	cmp	r0, r1
   2bb50:	movw	r0, #0
   2bb54:	str	r0, [sp, #4]
   2bb58:	bge	2bb80 <flatcc_builder_check_required_field@@Base+0x8c>
   2bb5c:	ldr	r0, [fp, #-4]
   2bb60:	ldr	r0, [r0, #4]
   2bb64:	ldrh	r1, [fp, #-6]
   2bb68:	add	r0, r0, r1, lsl #1
   2bb6c:	ldrh	r0, [r0]
   2bb70:	cmp	r0, #0
   2bb74:	movw	r0, #0
   2bb78:	movne	r0, #1
   2bb7c:	str	r0, [sp, #4]
   2bb80:	ldr	r0, [sp, #4]
   2bb84:	and	r0, r0, #1
   2bb88:	mov	sp, fp
   2bb8c:	pop	{fp, pc}
   2bb90:			; <UNDEFINED> instruction: 0x0000b5b6
   2bb94:	andeq	sl, r0, r2, lsl #27
   2bb98:	ldrdeq	fp, [r0], -r1

0002bb9c <flatcc_builder_check_union_field@@Base>:
   2bb9c:	push	{fp, lr}
   2bba0:	mov	fp, sp
   2bba4:	sub	sp, sp, #16
   2bba8:	str	r0, [sp, #8]
   2bbac:	strh	r1, [sp, #6]
   2bbb0:	ldr	r0, [sp, #8]
   2bbb4:	ldr	r0, [r0, #32]
   2bbb8:	ldrh	r0, [r0, #14]
   2bbbc:	cmp	r0, #3
   2bbc0:	bne	2bbc8 <flatcc_builder_check_union_field@@Base+0x2c>
   2bbc4:	b	2bbe8 <flatcc_builder_check_union_field@@Base+0x4c>
   2bbc8:	ldr	r0, [pc, #284]	; 2bcec <flatcc_builder_check_union_field@@Base+0x150>
   2bbcc:	add	r0, pc, r0
   2bbd0:	ldr	r1, [pc, #280]	; 2bcf0 <flatcc_builder_check_union_field@@Base+0x154>
   2bbd4:	add	r1, pc, r1
   2bbd8:	ldr	r2, [pc, #276]	; 2bcf4 <flatcc_builder_check_union_field@@Base+0x158>
   2bbdc:	add	r3, pc, r2
   2bbe0:	movw	r2, #1279	; 0x4ff
   2bbe4:	bl	12e68 <__assert_fail@plt>
   2bbe8:	ldrh	r0, [sp, #6]
   2bbec:	cmp	r0, #0
   2bbf0:	beq	2bc08 <flatcc_builder_check_union_field@@Base+0x6c>
   2bbf4:	ldrh	r0, [sp, #6]
   2bbf8:	ldr	r1, [sp, #8]
   2bbfc:	ldrh	r1, [r1, #8]
   2bc00:	cmp	r0, r1
   2bc04:	blt	2bc14 <flatcc_builder_check_union_field@@Base+0x78>
   2bc08:	movw	r0, #0
   2bc0c:	str	r0, [fp, #-4]
   2bc10:	b	2bce0 <flatcc_builder_check_union_field@@Base+0x144>
   2bc14:	ldr	r0, [sp, #8]
   2bc18:	ldr	r0, [r0, #4]
   2bc1c:	ldrh	r1, [sp, #6]
   2bc20:	sub	r1, r1, #1
   2bc24:	add	r0, r0, r1, lsl #1
   2bc28:	ldrh	r0, [r0]
   2bc2c:	cmp	r0, #0
   2bc30:	bne	2bc60 <flatcc_builder_check_union_field@@Base+0xc4>
   2bc34:	ldr	r0, [sp, #8]
   2bc38:	ldr	r0, [r0, #4]
   2bc3c:	ldrh	r1, [sp, #6]
   2bc40:	add	r0, r0, r1, lsl #1
   2bc44:	ldrh	r0, [r0]
   2bc48:	cmp	r0, #0
   2bc4c:	movw	r0, #0
   2bc50:	moveq	r0, #1
   2bc54:	and	r0, r0, #1
   2bc58:	str	r0, [fp, #-4]
   2bc5c:	b	2bce0 <flatcc_builder_check_union_field@@Base+0x144>
   2bc60:	ldr	r0, [sp, #8]
   2bc64:	ldr	r1, [r0, #4]
   2bc68:	ldr	r0, [r0, #16]
   2bc6c:	ldrh	r2, [sp, #6]
   2bc70:	sub	r2, r2, #1
   2bc74:	add	r1, r1, r2, lsl #1
   2bc78:	ldrh	r1, [r1]
   2bc7c:	add	r0, r0, r1
   2bc80:	ldrsb	r0, [r0]
   2bc84:	cmp	r0, #0
   2bc88:	beq	2bcb8 <flatcc_builder_check_union_field@@Base+0x11c>
   2bc8c:	ldr	r0, [sp, #8]
   2bc90:	ldr	r0, [r0, #4]
   2bc94:	ldrh	r1, [sp, #6]
   2bc98:	add	r0, r0, r1, lsl #1
   2bc9c:	ldrh	r0, [r0]
   2bca0:	cmp	r0, #0
   2bca4:	movw	r0, #0
   2bca8:	movne	r0, #1
   2bcac:	and	r0, r0, #1
   2bcb0:	str	r0, [fp, #-4]
   2bcb4:	b	2bce0 <flatcc_builder_check_union_field@@Base+0x144>
   2bcb8:	ldr	r0, [sp, #8]
   2bcbc:	ldr	r0, [r0, #4]
   2bcc0:	ldrh	r1, [sp, #6]
   2bcc4:	add	r0, r0, r1, lsl #1
   2bcc8:	ldrh	r0, [r0]
   2bccc:	cmp	r0, #0
   2bcd0:	movw	r0, #0
   2bcd4:	moveq	r0, #1
   2bcd8:	and	r0, r0, #1
   2bcdc:	str	r0, [fp, #-4]
   2bce0:	ldr	r0, [fp, #-4]
   2bce4:	mov	sp, fp
   2bce8:	pop	{fp, pc}
   2bcec:	andeq	fp, r0, lr, lsl #10
   2bcf0:	ldrdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   2bcf4:	andeq	fp, r0, ip, ror r5

0002bcf8 <flatcc_builder_check_required@@Base>:
   2bcf8:	push	{fp, lr}
   2bcfc:	mov	fp, sp
   2bd00:	sub	sp, sp, #24
   2bd04:	str	r0, [fp, #-8]
   2bd08:	str	r1, [sp, #12]
   2bd0c:	str	r2, [sp, #8]
   2bd10:	ldr	r0, [fp, #-8]
   2bd14:	ldr	r0, [r0, #32]
   2bd18:	ldrh	r0, [r0, #14]
   2bd1c:	cmp	r0, #3
   2bd20:	bne	2bd28 <flatcc_builder_check_required@@Base+0x30>
   2bd24:	b	2bd48 <flatcc_builder_check_required@@Base+0x50>
   2bd28:	ldr	r0, [pc, #172]	; 2bddc <flatcc_builder_check_required@@Base+0xe4>
   2bd2c:	add	r0, pc, r0
   2bd30:	ldr	r1, [pc, #168]	; 2bde0 <flatcc_builder_check_required@@Base+0xe8>
   2bd34:	add	r1, pc, r1
   2bd38:	ldr	r2, [pc, #164]	; 2bde4 <flatcc_builder_check_required@@Base+0xec>
   2bd3c:	add	r3, pc, r2
   2bd40:	movw	r2, #1297	; 0x511
   2bd44:	bl	12e68 <__assert_fail@plt>
   2bd48:	ldr	r0, [fp, #-8]
   2bd4c:	ldrh	r0, [r0, #8]
   2bd50:	ldr	r1, [sp, #8]
   2bd54:	cmp	r0, r1
   2bd58:	bge	2bd68 <flatcc_builder_check_required@@Base+0x70>
   2bd5c:	movw	r0, #0
   2bd60:	str	r0, [fp, #-4]
   2bd64:	b	2bdd0 <flatcc_builder_check_required@@Base+0xd8>
   2bd68:	movw	r0, #0
   2bd6c:	str	r0, [sp, #4]
   2bd70:	ldr	r0, [sp, #4]
   2bd74:	ldr	r1, [sp, #8]
   2bd78:	cmp	r0, r1
   2bd7c:	bge	2bdc8 <flatcc_builder_check_required@@Base+0xd0>
   2bd80:	ldr	r0, [fp, #-8]
   2bd84:	ldr	r0, [r0, #4]
   2bd88:	ldr	r1, [sp, #12]
   2bd8c:	ldr	r2, [sp, #4]
   2bd90:	add	r1, r1, r2, lsl #1
   2bd94:	ldrh	r1, [r1]
   2bd98:	add	r0, r0, r1, lsl #1
   2bd9c:	ldrh	r0, [r0]
   2bda0:	cmp	r0, #0
   2bda4:	bne	2bdb4 <flatcc_builder_check_required@@Base+0xbc>
   2bda8:	movw	r0, #0
   2bdac:	str	r0, [fp, #-4]
   2bdb0:	b	2bdd0 <flatcc_builder_check_required@@Base+0xd8>
   2bdb4:	b	2bdb8 <flatcc_builder_check_required@@Base+0xc0>
   2bdb8:	ldr	r0, [sp, #4]
   2bdbc:	add	r0, r0, #1
   2bdc0:	str	r0, [sp, #4]
   2bdc4:	b	2bd70 <flatcc_builder_check_required@@Base+0x78>
   2bdc8:	movw	r0, #1
   2bdcc:	str	r0, [fp, #-4]
   2bdd0:	ldr	r0, [fp, #-4]
   2bdd4:	mov	sp, fp
   2bdd8:	pop	{fp, pc}
   2bddc:	andeq	fp, r0, lr, lsr #7
   2bde0:	andeq	sl, r0, sl, ror fp
   2bde4:	andeq	fp, r0, ip, ror #8

0002bde8 <flatcc_builder_end_table@@Base>:
   2bde8:	push	{r4, r5, fp, lr}
   2bdec:	add	fp, sp, #8
   2bdf0:	sub	sp, sp, #48	; 0x30
   2bdf4:	str	r0, [fp, #-16]
   2bdf8:	ldr	r0, [fp, #-16]
   2bdfc:	ldr	r0, [r0, #32]
   2be00:	ldrh	r0, [r0, #14]
   2be04:	cmp	r0, #3
   2be08:	bne	2be10 <flatcc_builder_end_table@@Base+0x28>
   2be0c:	b	2be30 <flatcc_builder_end_table@@Base+0x48>
   2be10:	ldr	r0, [pc, #500]	; 2c00c <flatcc_builder_end_table@@Base+0x224>
   2be14:	add	r0, pc, r0
   2be18:	ldr	r1, [pc, #496]	; 2c010 <flatcc_builder_end_table@@Base+0x228>
   2be1c:	add	r1, pc, r1
   2be20:	ldr	r2, [pc, #492]	; 2c014 <flatcc_builder_end_table@@Base+0x22c>
   2be24:	add	r3, pc, r2
   2be28:	movw	r2, #1317	; 0x525
   2be2c:	bl	12e68 <__assert_fail@plt>
   2be30:	ldr	r0, [pc, #480]	; 2c018 <flatcc_builder_end_table@@Base+0x230>
   2be34:	ldr	r1, [fp, #-16]
   2be38:	ldr	r1, [r1, #4]
   2be3c:	sub	r1, r1, #4
   2be40:	str	r1, [fp, #-20]	; 0xffffffec
   2be44:	ldr	r1, [fp, #-16]
   2be48:	ldrh	r1, [r1, #8]
   2be4c:	add	r1, r1, #2
   2be50:	lsl	r1, r1, #1
   2be54:	strh	r1, [fp, #-22]	; 0xffffffea
   2be58:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2be5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   2be60:	strh	r1, [r2]
   2be64:	ldr	r1, [fp, #-16]
   2be68:	ldr	r1, [r1, #20]
   2be6c:	uxth	r1, r1
   2be70:	add	r1, r1, #4
   2be74:	ldr	r2, [fp, #-20]	; 0xffffffec
   2be78:	strh	r1, [r2, #2]
   2be7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   2be80:	ldrh	r1, [r1]
   2be84:	ldr	r2, [fp, #-16]
   2be88:	ldr	r2, [r2, #12]
   2be8c:	eor	r1, r1, r2
   2be90:	mul	r1, r1, r0
   2be94:	ldr	r2, [fp, #-20]	; 0xffffffec
   2be98:	ldrh	r2, [r2, #2]
   2be9c:	eor	r1, r1, r2
   2bea0:	mul	r0, r1, r0
   2bea4:	ldr	r1, [fp, #-16]
   2bea8:	str	r0, [r1, #12]
   2beac:	ldr	r0, [fp, #-16]
   2beb0:	ldr	r1, [fp, #-20]	; 0xffffffec
   2beb4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2beb8:	ldr	r3, [fp, #-16]
   2bebc:	ldr	r3, [r3, #12]
   2bec0:	uxth	r2, r2
   2bec4:	bl	2b494 <flatcc_builder_create_cached_vtable@@Base>
   2bec8:	str	r0, [sp, #24]
   2becc:	cmp	r0, #0
   2bed0:	bne	2bee0 <flatcc_builder_end_table@@Base+0xf8>
   2bed4:	movw	r0, #0
   2bed8:	str	r0, [fp, #-12]
   2bedc:	b	2c000 <flatcc_builder_end_table@@Base+0x218>
   2bee0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2bee4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2bee8:	mov	r1, #0
   2beec:	bl	12e2c <memset@plt>
   2bef0:	ldr	r1, [fp, #-16]
   2bef4:	ldr	r2, [r1, #32]
   2bef8:	ldr	r1, [r1, #76]	; 0x4c
   2befc:	ldr	r2, [r2, #20]
   2bf00:	add	r1, r1, r2
   2bf04:	str	r1, [sp, #16]
   2bf08:	ldr	r1, [fp, #-16]
   2bf0c:	ldr	r1, [r1]
   2bf10:	ldr	r2, [sp, #16]
   2bf14:	sub	r1, r1, r2
   2bf18:	asr	r1, r1, #1
   2bf1c:	str	r1, [sp, #20]
   2bf20:	ldr	r1, [fp, #-16]
   2bf24:	ldr	r2, [fp, #-16]
   2bf28:	ldr	r2, [r2, #16]
   2bf2c:	ldr	lr, [fp, #-16]
   2bf30:	ldr	lr, [lr, #20]
   2bf34:	ldr	r3, [fp, #-16]
   2bf38:	ldrh	r3, [r3, #130]	; 0x82
   2bf3c:	ldr	ip, [sp, #16]
   2bf40:	ldr	r4, [sp, #20]
   2bf44:	ldr	r5, [sp, #24]
   2bf48:	str	r0, [sp, #12]
   2bf4c:	mov	r0, r1
   2bf50:	mov	r1, r2
   2bf54:	mov	r2, lr
   2bf58:	uxth	r3, r3
   2bf5c:	str	ip, [sp]
   2bf60:	str	r4, [sp, #4]
   2bf64:	str	r5, [sp, #8]
   2bf68:	bl	2b824 <flatcc_builder_create_table@@Base>
   2bf6c:	str	r0, [sp, #28]
   2bf70:	movw	r1, #0
   2bf74:	cmp	r1, r0
   2bf78:	bne	2bf88 <flatcc_builder_end_table@@Base+0x1a0>
   2bf7c:	movw	r0, #0
   2bf80:	str	r0, [fp, #-12]
   2bf84:	b	2c000 <flatcc_builder_end_table@@Base+0x218>
   2bf88:	ldr	r0, [fp, #-16]
   2bf8c:	ldr	r0, [r0, #32]
   2bf90:	ldr	r0, [r0, #24]
   2bf94:	ldr	r1, [fp, #-16]
   2bf98:	str	r0, [r1, #12]
   2bf9c:	ldr	r0, [fp, #-16]
   2bfa0:	ldr	r0, [r0, #32]
   2bfa4:	ldrh	r0, [r0, #28]
   2bfa8:	ldr	r1, [fp, #-16]
   2bfac:	strh	r0, [r1, #8]
   2bfb0:	ldr	r0, [fp, #-16]
   2bfb4:	ldr	r0, [r0, #52]	; 0x34
   2bfb8:	ldr	r1, [fp, #-16]
   2bfbc:	ldr	r1, [r1, #32]
   2bfc0:	ldr	r1, [r1, #16]
   2bfc4:	add	r0, r0, r1
   2bfc8:	ldr	r1, [fp, #-16]
   2bfcc:	str	r0, [r1, #4]
   2bfd0:	ldr	r0, [fp, #-16]
   2bfd4:	ldr	r0, [r0, #76]	; 0x4c
   2bfd8:	ldr	r1, [fp, #-16]
   2bfdc:	ldr	r1, [r1, #32]
   2bfe0:	ldr	r1, [r1, #20]
   2bfe4:	add	r0, r0, r1
   2bfe8:	ldr	r1, [fp, #-16]
   2bfec:	str	r0, [r1]
   2bff0:	ldr	r0, [fp, #-16]
   2bff4:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2bff8:	ldr	r0, [sp, #28]
   2bffc:	str	r0, [fp, #-12]
   2c000:	ldr	r0, [fp, #-12]
   2c004:	sub	sp, fp, #8
   2c008:	pop	{r4, r5, fp, pc}
   2c00c:	andeq	fp, r0, r6, asr #5
   2c010:	muleq	r0, r2, sl
   2c014:	ldrdeq	fp, [r0], -lr
   2c018:			; <UNDEFINED> instruction: 0x9e3779b1

0002c01c <flatcc_builder_create_vector@@Base>:
   2c01c:	push	{fp, lr}
   2c020:	mov	fp, sp
   2c024:	sub	sp, sp, #112	; 0x70
   2c028:	ldr	ip, [fp, #12]
   2c02c:	ldr	lr, [fp, #8]
   2c030:	str	r0, [fp, #-8]
   2c034:	str	r1, [fp, #-12]
   2c038:	str	r2, [fp, #-16]
   2c03c:	str	r3, [fp, #-20]	; 0xffffffec
   2c040:	strh	lr, [fp, #-22]	; 0xffffffea
   2c044:	ldr	r0, [fp, #-16]
   2c048:	ldr	r1, [fp, #12]
   2c04c:	cmp	r0, r1
   2c050:	str	ip, [sp]
   2c054:	bls	2c098 <flatcc_builder_create_vector@@Base+0x7c>
   2c058:	ldr	r0, [fp, #-16]
   2c05c:	ldr	r1, [fp, #12]
   2c060:	cmp	r0, r1
   2c064:	bhi	2c06c <flatcc_builder_create_vector@@Base+0x50>
   2c068:	b	2c08c <flatcc_builder_create_vector@@Base+0x70>
   2c06c:	ldr	r0, [pc, #364]	; 2c1e0 <flatcc_builder_create_vector@@Base+0x1c4>
   2c070:	add	r0, pc, r0
   2c074:	ldr	r1, [pc, #360]	; 2c1e4 <flatcc_builder_create_vector@@Base+0x1c8>
   2c078:	add	r1, pc, r1
   2c07c:	ldr	r2, [pc, #356]	; 2c1e8 <flatcc_builder_create_vector@@Base+0x1cc>
   2c080:	add	r3, pc, r2
   2c084:	movw	r2, #1365	; 0x555
   2c088:	bl	12e68 <__assert_fail@plt>
   2c08c:	movw	r0, #0
   2c090:	str	r0, [fp, #-4]
   2c094:	b	2c1d4 <flatcc_builder_create_vector@@Base+0x1b8>
   2c098:	sub	r0, fp, #22
   2c09c:	mov	r1, #4
   2c0a0:	bl	2ada8 <flatcc_builder_start_vector@@Base+0xac>
   2c0a4:	ldr	r0, [fp, #-8]
   2c0a8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2c0ac:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   2c0b0:	ldr	r0, [fp, #-16]
   2c0b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2c0b8:	mul	r0, r0, r1
   2c0bc:	str	r0, [fp, #-28]	; 0xffffffe4
   2c0c0:	ldr	r0, [fp, #-16]
   2c0c4:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2c0c8:	str	r0, [fp, #-36]	; 0xffffffdc
   2c0cc:	ldr	r0, [fp, #-8]
   2c0d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2c0d4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2c0d8:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   2c0dc:	str	r0, [fp, #-32]	; 0xffffffe0
   2c0e0:	mov	r0, #0
   2c0e4:	str	r0, [sp, #4]
   2c0e8:	str	r0, [sp, #8]
   2c0ec:	ldr	r0, [sp, #4]
   2c0f0:	add	r0, r0, #4
   2c0f4:	str	r0, [sp, #4]
   2c0f8:	add	r0, sp, #4
   2c0fc:	add	r0, r0, #8
   2c100:	ldr	r1, [sp, #8]
   2c104:	sub	r2, fp, #36	; 0x24
   2c108:	str	r2, [r0, r1, lsl #3]
   2c10c:	ldr	r1, [sp, #8]
   2c110:	add	r0, r0, r1, lsl #3
   2c114:	movw	r1, #4
   2c118:	str	r1, [r0, #4]
   2c11c:	ldr	r0, [sp, #8]
   2c120:	add	r0, r0, #1
   2c124:	str	r0, [sp, #8]
   2c128:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c12c:	cmp	r0, #0
   2c130:	bls	2c174 <flatcc_builder_create_vector@@Base+0x158>
   2c134:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c138:	ldr	r1, [sp, #4]
   2c13c:	add	r0, r1, r0
   2c140:	str	r0, [sp, #4]
   2c144:	ldr	r0, [fp, #-12]
   2c148:	add	r1, sp, #4
   2c14c:	add	r1, r1, #8
   2c150:	ldr	r2, [sp, #8]
   2c154:	str	r0, [r1, r2, lsl #3]
   2c158:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c15c:	ldr	r2, [sp, #8]
   2c160:	add	r1, r1, r2, lsl #3
   2c164:	str	r0, [r1, #4]
   2c168:	ldr	r0, [sp, #8]
   2c16c:	add	r0, r0, #1
   2c170:	str	r0, [sp, #8]
   2c174:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c178:	cmp	r0, #0
   2c17c:	bls	2c1c4 <flatcc_builder_create_vector@@Base+0x1a8>
   2c180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c184:	ldr	r1, [sp, #4]
   2c188:	add	r0, r1, r0
   2c18c:	str	r0, [sp, #4]
   2c190:	add	r0, sp, #4
   2c194:	add	r0, r0, #8
   2c198:	ldr	r1, [sp, #8]
   2c19c:	ldr	r2, [pc, #72]	; 2c1ec <flatcc_builder_create_vector@@Base+0x1d0>
   2c1a0:	ldr	r2, [pc, r2]
   2c1a4:	str	r2, [r0, r1, lsl #3]
   2c1a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2c1ac:	ldr	r2, [sp, #8]
   2c1b0:	add	r0, r0, r2, lsl #3
   2c1b4:	str	r1, [r0, #4]
   2c1b8:	ldr	r0, [sp, #8]
   2c1bc:	add	r0, r0, #1
   2c1c0:	str	r0, [sp, #8]
   2c1c4:	ldr	r0, [fp, #-8]
   2c1c8:	add	r1, sp, #4
   2c1cc:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   2c1d0:	str	r0, [fp, #-4]
   2c1d4:	ldr	r0, [fp, #-4]
   2c1d8:	mov	sp, fp
   2c1dc:	pop	{fp, pc}
   2c1e0:	ldrdeq	fp, [r0], -r4
   2c1e4:	andeq	sl, r0, r6, lsr r8
   2c1e8:	ldrdeq	fp, [r0], -r7
   2c1ec:			; <UNDEFINED> instruction: 0x0001ceb0

0002c1f0 <flatcc_builder_end_vector@@Base>:
   2c1f0:	push	{fp, lr}
   2c1f4:	mov	fp, sp
   2c1f8:	sub	sp, sp, #24
   2c1fc:	str	r0, [fp, #-8]
   2c200:	ldr	r0, [fp, #-8]
   2c204:	ldr	r0, [r0, #32]
   2c208:	ldrh	r0, [r0, #14]
   2c20c:	cmp	r0, #4
   2c210:	bne	2c218 <flatcc_builder_end_vector@@Base+0x28>
   2c214:	b	2c238 <flatcc_builder_end_vector@@Base+0x48>
   2c218:	ldr	r0, [pc, #152]	; 2c2b8 <flatcc_builder_end_vector@@Base+0xc8>
   2c21c:	add	r0, pc, r0
   2c220:	ldr	r1, [pc, #148]	; 2c2bc <flatcc_builder_end_vector@@Base+0xcc>
   2c224:	add	r1, pc, r1
   2c228:	ldr	r2, [pc, #144]	; 2c2c0 <flatcc_builder_end_vector@@Base+0xd0>
   2c22c:	add	r3, pc, r2
   2c230:	movw	r2, #1400	; 0x578
   2c234:	bl	12e68 <__assert_fail@plt>
   2c238:	ldr	r0, [fp, #-8]
   2c23c:	ldr	r1, [fp, #-8]
   2c240:	ldr	r1, [r1, #16]
   2c244:	ldr	r2, [fp, #-8]
   2c248:	ldr	r2, [r2, #32]
   2c24c:	ldr	r2, [r2, #20]
   2c250:	ldr	r3, [fp, #-8]
   2c254:	ldr	r3, [r3, #32]
   2c258:	ldr	r3, [r3, #16]
   2c25c:	ldr	ip, [fp, #-8]
   2c260:	ldrh	ip, [ip, #130]	; 0x82
   2c264:	ldr	lr, [fp, #-8]
   2c268:	ldr	lr, [lr, #32]
   2c26c:	ldr	lr, [lr, #24]
   2c270:	uxth	ip, ip
   2c274:	str	ip, [sp]
   2c278:	str	lr, [sp, #4]
   2c27c:	bl	2c01c <flatcc_builder_create_vector@@Base>
   2c280:	str	r0, [sp, #12]
   2c284:	movw	r1, #0
   2c288:	cmp	r1, r0
   2c28c:	bne	2c29c <flatcc_builder_end_vector@@Base+0xac>
   2c290:	movw	r0, #0
   2c294:	str	r0, [fp, #-4]
   2c298:	b	2c2ac <flatcc_builder_end_vector@@Base+0xbc>
   2c29c:	ldr	r0, [fp, #-8]
   2c2a0:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2c2a4:	ldr	r0, [sp, #12]
   2c2a8:	str	r0, [fp, #-4]
   2c2ac:	ldr	r0, [fp, #-4]
   2c2b0:	mov	sp, fp
   2c2b4:	pop	{fp, pc}
   2c2b8:	andeq	sl, r0, ip, asr #19
   2c2bc:	andeq	sl, r0, sl, lsl #13
   2c2c0:	andeq	fp, r0, r1, lsr #1

0002c2c4 <flatcc_builder_vector_count@@Base>:
   2c2c4:	sub	sp, sp, #4
   2c2c8:	str	r0, [sp]
   2c2cc:	ldr	r0, [sp]
   2c2d0:	ldr	r0, [r0, #32]
   2c2d4:	ldr	r0, [r0, #20]
   2c2d8:	add	sp, sp, #4
   2c2dc:	bx	lr

0002c2e0 <flatcc_builder_vector_edit@@Base>:
   2c2e0:	sub	sp, sp, #4
   2c2e4:	str	r0, [sp]
   2c2e8:	ldr	r0, [sp]
   2c2ec:	ldr	r0, [r0, #16]
   2c2f0:	add	sp, sp, #4
   2c2f4:	bx	lr

0002c2f8 <flatcc_builder_create_offset_vector_direct@@Base>:
   2c2f8:	push	{fp, lr}
   2c2fc:	mov	fp, sp
   2c300:	sub	sp, sp, #16
   2c304:	str	r0, [fp, #-4]
   2c308:	str	r1, [sp, #8]
   2c30c:	str	r2, [sp, #4]
   2c310:	ldr	r0, [fp, #-4]
   2c314:	ldr	r1, [sp, #8]
   2c318:	ldr	r2, [sp, #4]
   2c31c:	movw	r3, #0
   2c320:	bl	2c32c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2c324:	mov	sp, fp
   2c328:	pop	{fp, pc}
   2c32c:	push	{fp, lr}
   2c330:	mov	fp, sp
   2c334:	sub	sp, sp, #120	; 0x78
   2c338:	ldr	ip, [pc, #696]	; 2c5f8 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   2c33c:	str	r0, [fp, #-8]
   2c340:	str	r1, [fp, #-12]
   2c344:	str	r2, [fp, #-16]
   2c348:	str	r3, [fp, #-20]	; 0xffffffec
   2c34c:	ldr	r0, [fp, #-16]
   2c350:	cmp	r0, ip
   2c354:	bls	2c364 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   2c358:	movw	r0, #0
   2c35c:	str	r0, [fp, #-4]
   2c360:	b	2c5ec <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   2c364:	ldr	r0, [fp, #-8]
   2c368:	mov	r1, #4
   2c36c:	str	r1, [sp]
   2c370:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   2c374:	ldr	r0, [fp, #-16]
   2c378:	lsl	r0, r0, #2
   2c37c:	str	r0, [fp, #-24]	; 0xffffffe8
   2c380:	ldr	r0, [fp, #-16]
   2c384:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2c388:	str	r0, [fp, #-32]	; 0xffffffe0
   2c38c:	ldr	r0, [fp, #-8]
   2c390:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2c394:	ldr	r2, [sp]
   2c398:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   2c39c:	str	r0, [fp, #-28]	; 0xffffffe4
   2c3a0:	mov	r0, #0
   2c3a4:	str	r0, [sp, #4]
   2c3a8:	str	r0, [sp, #8]
   2c3ac:	ldr	r0, [sp, #4]
   2c3b0:	add	r0, r0, #4
   2c3b4:	str	r0, [sp, #4]
   2c3b8:	add	r0, sp, #4
   2c3bc:	add	r0, r0, #8
   2c3c0:	ldr	r1, [sp, #8]
   2c3c4:	sub	r2, fp, #32
   2c3c8:	str	r2, [r0, r1, lsl #3]
   2c3cc:	ldr	r1, [sp, #8]
   2c3d0:	add	r0, r0, r1, lsl #3
   2c3d4:	movw	r1, #4
   2c3d8:	str	r1, [r0, #4]
   2c3dc:	ldr	r0, [sp, #8]
   2c3e0:	add	r0, r0, #1
   2c3e4:	str	r0, [sp, #8]
   2c3e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c3ec:	cmp	r0, #0
   2c3f0:	bls	2c434 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   2c3f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c3f8:	ldr	r1, [sp, #4]
   2c3fc:	add	r0, r1, r0
   2c400:	str	r0, [sp, #4]
   2c404:	ldr	r0, [fp, #-12]
   2c408:	add	r1, sp, #4
   2c40c:	add	r1, r1, #8
   2c410:	ldr	r2, [sp, #8]
   2c414:	str	r0, [r1, r2, lsl #3]
   2c418:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c41c:	ldr	r2, [sp, #8]
   2c420:	add	r1, r1, r2, lsl #3
   2c424:	str	r0, [r1, #4]
   2c428:	ldr	r0, [sp, #8]
   2c42c:	add	r0, r0, #1
   2c430:	str	r0, [sp, #8]
   2c434:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c438:	cmp	r0, #0
   2c43c:	bls	2c484 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   2c440:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c444:	ldr	r1, [sp, #4]
   2c448:	add	r0, r1, r0
   2c44c:	str	r0, [sp, #4]
   2c450:	add	r0, sp, #4
   2c454:	add	r0, r0, #8
   2c458:	ldr	r1, [sp, #8]
   2c45c:	ldr	r2, [pc, #444]	; 2c620 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   2c460:	ldr	r2, [pc, r2]
   2c464:	str	r2, [r0, r1, lsl #3]
   2c468:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2c46c:	ldr	r2, [sp, #8]
   2c470:	add	r0, r0, r2, lsl #3
   2c474:	str	r1, [r0, #4]
   2c478:	ldr	r0, [sp, #8]
   2c47c:	add	r0, r0, #1
   2c480:	str	r0, [sp, #8]
   2c484:	ldr	r0, [fp, #-8]
   2c488:	ldr	r0, [r0, #136]	; 0x88
   2c48c:	ldr	r1, [sp, #4]
   2c490:	sub	r0, r0, r1
   2c494:	str	r0, [fp, #-36]	; 0xffffffdc
   2c498:	movw	r0, #0
   2c49c:	str	r0, [fp, #-44]	; 0xffffffd4
   2c4a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c4a4:	ldr	r1, [fp, #-16]
   2c4a8:	cmp	r0, r1
   2c4ac:	bcs	2c5dc <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   2c4b0:	ldr	r0, [fp, #-12]
   2c4b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c4b8:	add	r0, r0, r1, lsl #2
   2c4bc:	ldr	r0, [r0]
   2c4c0:	cmp	r0, #0
   2c4c4:	beq	2c554 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   2c4c8:	ldr	r0, [fp, #-12]
   2c4cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c4d0:	ldr	r0, [r0, r1, lsl #2]
   2c4d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2c4d8:	sub	r0, r0, r2
   2c4dc:	sub	r0, r0, r1, lsl #2
   2c4e0:	sub	r0, r0, #4
   2c4e4:	str	r0, [fp, #-40]	; 0xffffffd8
   2c4e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c4ec:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2c4f0:	ldr	r1, [fp, #-12]
   2c4f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2c4f8:	add	r1, r1, r2, lsl #2
   2c4fc:	str	r0, [r1]
   2c500:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c504:	movw	r1, #0
   2c508:	cmp	r0, r1
   2c50c:	beq	2c550 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   2c510:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c514:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c518:	add	r0, r0, r1
   2c51c:	ldrb	r0, [r0]
   2c520:	cmp	r0, #0
   2c524:	beq	2c52c <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   2c528:	b	2c54c <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   2c52c:	ldr	r0, [pc, #224]	; 2c614 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   2c530:	add	r0, pc, r0
   2c534:	ldr	r1, [pc, #220]	; 2c618 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   2c538:	add	r1, pc, r1
   2c53c:	ldr	r2, [pc, #216]	; 2c61c <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   2c540:	add	r3, pc, r2
   2c544:	movw	r2, #1457	; 0x5b1
   2c548:	bl	12e68 <__assert_fail@plt>
   2c54c:	b	2c550 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   2c550:	b	2c5c8 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   2c554:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c558:	movw	r1, #0
   2c55c:	cmp	r0, r1
   2c560:	beq	2c5a4 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   2c564:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c568:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c56c:	add	r0, r0, r1
   2c570:	ldrb	r0, [r0]
   2c574:	cmp	r0, #0
   2c578:	bne	2c580 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   2c57c:	b	2c5a0 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   2c580:	ldr	r0, [pc, #128]	; 2c608 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   2c584:	add	r0, pc, r0
   2c588:	ldr	r1, [pc, #124]	; 2c60c <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   2c58c:	add	r1, pc, r1
   2c590:	ldr	r2, [pc, #120]	; 2c610 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   2c594:	add	r3, pc, r2
   2c598:	movw	r2, #1461	; 0x5b5
   2c59c:	bl	12e68 <__assert_fail@plt>
   2c5a0:	b	2c5c4 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   2c5a4:	ldr	r0, [pc, #80]	; 2c5fc <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   2c5a8:	add	r0, pc, r0
   2c5ac:	ldr	r1, [pc, #76]	; 2c600 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   2c5b0:	add	r1, pc, r1
   2c5b4:	ldr	r2, [pc, #72]	; 2c604 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   2c5b8:	add	r3, pc, r2
   2c5bc:	movw	r2, #1463	; 0x5b7
   2c5c0:	bl	12e68 <__assert_fail@plt>
   2c5c4:	b	2c5c8 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   2c5c8:	b	2c5cc <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   2c5cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c5d0:	add	r0, r0, #1
   2c5d4:	str	r0, [fp, #-44]	; 0xffffffd4
   2c5d8:	b	2c4a0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   2c5dc:	ldr	r0, [fp, #-8]
   2c5e0:	add	r1, sp, #4
   2c5e4:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   2c5e8:	str	r0, [fp, #-4]
   2c5ec:	ldr	r0, [fp, #-4]
   2c5f0:	mov	sp, fp
   2c5f4:	pop	{fp, pc}
   2c5f8:	svccc	0x00ffffff
   2c5fc:	andeq	fp, r0, r3, asr #9
   2c600:	strdeq	sl, [r0], -lr
   2c604:			; <UNDEFINED> instruction: 0x0000b4b5
   2c608:	andeq	fp, r0, ip, ror #10
   2c60c:	andeq	sl, r0, r2, lsr #6
   2c610:	ldrdeq	fp, [r0], -r9
   2c614:	andeq	fp, r0, pc, lsr #10
   2c618:	andeq	sl, r0, r6, ror r3
   2c61c:	andeq	fp, r0, sp, lsr #10
   2c620:	strdeq	ip, [r1], -r0

0002c624 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2c624:	push	{fp, lr}
   2c628:	mov	fp, sp
   2c62c:	sub	sp, sp, #16
   2c630:	str	r0, [sp, #8]
   2c634:	str	r1, [sp, #4]
   2c638:	ldr	r0, [sp, #8]
   2c63c:	ldr	r0, [r0, #32]
   2c640:	ldrh	r0, [r0, #14]
   2c644:	cmp	r0, #5
   2c648:	bne	2c650 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   2c64c:	b	2c670 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   2c650:	ldr	r0, [pc, #112]	; 2c6c8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   2c654:	add	r0, pc, r0
   2c658:	ldr	r1, [pc, #108]	; 2c6cc <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   2c65c:	add	r1, pc, r1
   2c660:	ldr	r2, [pc, #104]	; 2c6d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   2c664:	add	r3, pc, r2
   2c668:	movw	r2, #1493	; 0x5d5
   2c66c:	bl	12e68 <__assert_fail@plt>
   2c670:	ldr	r0, [sp, #8]
   2c674:	ldr	r1, [sp, #8]
   2c678:	ldr	r1, [r1, #16]
   2c67c:	ldr	r2, [sp, #8]
   2c680:	ldr	r2, [r2, #32]
   2c684:	ldr	r2, [r2, #20]
   2c688:	ldr	r3, [sp, #4]
   2c68c:	bl	2c32c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2c690:	str	r0, [sp]
   2c694:	movw	r1, #0
   2c698:	cmp	r1, r0
   2c69c:	bne	2c6ac <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   2c6a0:	movw	r0, #0
   2c6a4:	str	r0, [fp, #-4]
   2c6a8:	b	2c6bc <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   2c6ac:	ldr	r0, [sp, #8]
   2c6b0:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2c6b4:	ldr	r0, [sp]
   2c6b8:	str	r0, [fp, #-4]
   2c6bc:	ldr	r0, [fp, #-4]
   2c6c0:	mov	sp, fp
   2c6c4:	pop	{fp, pc}
   2c6c8:	andeq	sl, r0, sp, lsl #13
   2c6cc:	andeq	sl, r0, r2, asr r2
   2c6d0:	strdeq	sl, [r0], -r6

0002c6d4 <flatcc_builder_offset_vector_edit@@Base>:
   2c6d4:	sub	sp, sp, #4
   2c6d8:	str	r0, [sp]
   2c6dc:	ldr	r0, [sp]
   2c6e0:	ldr	r0, [r0, #16]
   2c6e4:	add	sp, sp, #4
   2c6e8:	bx	lr

0002c6ec <flatcc_builder_offset_vector_count@@Base>:
   2c6ec:	sub	sp, sp, #4
   2c6f0:	str	r0, [sp]
   2c6f4:	ldr	r0, [sp]
   2c6f8:	ldr	r0, [r0, #32]
   2c6fc:	ldr	r0, [r0, #20]
   2c700:	add	sp, sp, #4
   2c704:	bx	lr

0002c708 <flatcc_builder_table_add_union@@Base>:
   2c708:	push	{fp, lr}
   2c70c:	mov	fp, sp
   2c710:	sub	sp, sp, #32
   2c714:	str	r2, [fp, #-12]
   2c718:	str	r3, [fp, #-8]
   2c71c:	str	r0, [sp, #16]
   2c720:	str	r1, [sp, #12]
   2c724:	ldr	r0, [sp, #16]
   2c728:	ldr	r0, [r0, #32]
   2c72c:	ldrh	r0, [r0, #14]
   2c730:	cmp	r0, #3
   2c734:	bne	2c73c <flatcc_builder_table_add_union@@Base+0x34>
   2c738:	b	2c75c <flatcc_builder_table_add_union@@Base+0x54>
   2c73c:	ldr	r0, [pc, #388]	; 2c8c8 <flatcc_builder_table_add_union@@Base+0x1c0>
   2c740:	add	r0, pc, r0
   2c744:	ldr	r1, [pc, #384]	; 2c8cc <flatcc_builder_table_add_union@@Base+0x1c4>
   2c748:	add	r1, pc, r1
   2c74c:	ldr	r2, [pc, #380]	; 2c8d0 <flatcc_builder_table_add_union@@Base+0x1c8>
   2c750:	add	r3, pc, r2
   2c754:	movw	r2, #1518	; 0x5ee
   2c758:	bl	12e68 <__assert_fail@plt>
   2c75c:	ldrb	r0, [fp, #-12]
   2c760:	cmp	r0, #0
   2c764:	bne	2c7bc <flatcc_builder_table_add_union@@Base+0xb4>
   2c768:	ldr	r0, [fp, #-8]
   2c76c:	cmp	r0, #0
   2c770:	beq	2c7bc <flatcc_builder_table_add_union@@Base+0xb4>
   2c774:	ldrb	r0, [fp, #-12]
   2c778:	cmp	r0, #0
   2c77c:	bne	2c78c <flatcc_builder_table_add_union@@Base+0x84>
   2c780:	ldr	r0, [fp, #-8]
   2c784:	cmp	r0, #0
   2c788:	bne	2c790 <flatcc_builder_table_add_union@@Base+0x88>
   2c78c:	b	2c7b0 <flatcc_builder_table_add_union@@Base+0xa8>
   2c790:	ldr	r0, [pc, #316]	; 2c8d4 <flatcc_builder_table_add_union@@Base+0x1cc>
   2c794:	add	r0, pc, r0
   2c798:	ldr	r1, [pc, #312]	; 2c8d8 <flatcc_builder_table_add_union@@Base+0x1d0>
   2c79c:	add	r1, pc, r1
   2c7a0:	ldr	r2, [pc, #308]	; 2c8dc <flatcc_builder_table_add_union@@Base+0x1d4>
   2c7a4:	add	r3, pc, r2
   2c7a8:	movw	r2, #1519	; 0x5ef
   2c7ac:	bl	12e68 <__assert_fail@plt>
   2c7b0:	mvn	r0, #0
   2c7b4:	str	r0, [fp, #-4]
   2c7b8:	b	2c8bc <flatcc_builder_table_add_union@@Base+0x1b4>
   2c7bc:	ldr	r0, [fp, #-8]
   2c7c0:	cmp	r0, #0
   2c7c4:	beq	2c834 <flatcc_builder_table_add_union@@Base+0x12c>
   2c7c8:	ldr	r0, [sp, #16]
   2c7cc:	ldr	r1, [sp, #12]
   2c7d0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   2c7d4:	str	r0, [sp, #8]
   2c7d8:	ldr	r0, [sp, #8]
   2c7dc:	movw	r1, #0
   2c7e0:	cmp	r0, r1
   2c7e4:	bne	2c828 <flatcc_builder_table_add_union@@Base+0x120>
   2c7e8:	ldr	r0, [sp, #8]
   2c7ec:	movw	r1, #0
   2c7f0:	cmp	r0, r1
   2c7f4:	beq	2c7fc <flatcc_builder_table_add_union@@Base+0xf4>
   2c7f8:	b	2c81c <flatcc_builder_table_add_union@@Base+0x114>
   2c7fc:	ldr	r0, [pc, #220]	; 2c8e0 <flatcc_builder_table_add_union@@Base+0x1d8>
   2c800:	add	r0, pc, r0
   2c804:	ldr	r1, [pc, #216]	; 2c8e4 <flatcc_builder_table_add_union@@Base+0x1dc>
   2c808:	add	r1, pc, r1
   2c80c:	ldr	r2, [pc, #212]	; 2c8e8 <flatcc_builder_table_add_union@@Base+0x1e0>
   2c810:	add	r3, pc, r2
   2c814:	movw	r2, #1522	; 0x5f2
   2c818:	bl	12e68 <__assert_fail@plt>
   2c81c:	mvn	r0, #0
   2c820:	str	r0, [fp, #-4]
   2c824:	b	2c8bc <flatcc_builder_table_add_union@@Base+0x1b4>
   2c828:	ldr	r0, [fp, #-8]
   2c82c:	ldr	r1, [sp, #8]
   2c830:	str	r0, [r1]
   2c834:	ldr	r0, [sp, #16]
   2c838:	ldr	r1, [sp, #12]
   2c83c:	sub	r1, r1, #1
   2c840:	movw	r2, #1
   2c844:	movw	r3, #1
   2c848:	uxth	r3, r3
   2c84c:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2c850:	str	r0, [sp, #4]
   2c854:	ldr	r0, [sp, #4]
   2c858:	movw	r1, #0
   2c85c:	cmp	r0, r1
   2c860:	bne	2c8a4 <flatcc_builder_table_add_union@@Base+0x19c>
   2c864:	ldr	r0, [sp, #4]
   2c868:	movw	r1, #0
   2c86c:	cmp	r0, r1
   2c870:	beq	2c878 <flatcc_builder_table_add_union@@Base+0x170>
   2c874:	b	2c898 <flatcc_builder_table_add_union@@Base+0x190>
   2c878:	ldr	r0, [pc, #108]	; 2c8ec <flatcc_builder_table_add_union@@Base+0x1e4>
   2c87c:	add	r0, pc, r0
   2c880:	ldr	r1, [pc, #104]	; 2c8f0 <flatcc_builder_table_add_union@@Base+0x1e8>
   2c884:	add	r1, pc, r1
   2c888:	ldr	r2, [pc, #100]	; 2c8f4 <flatcc_builder_table_add_union@@Base+0x1ec>
   2c88c:	add	r3, pc, r2
   2c890:	movw	r2, #1526	; 0x5f6
   2c894:	bl	12e68 <__assert_fail@plt>
   2c898:	mvn	r0, #0
   2c89c:	str	r0, [fp, #-4]
   2c8a0:	b	2c8bc <flatcc_builder_table_add_union@@Base+0x1b4>
   2c8a4:	ldrb	r0, [fp, #-12]
   2c8a8:	bl	2cb90 <flatcc_builder_table_add@@Base+0x168>
   2c8ac:	ldr	lr, [sp, #4]
   2c8b0:	strb	r0, [lr]
   2c8b4:	movw	r0, #0
   2c8b8:	str	r0, [fp, #-4]
   2c8bc:	ldr	r0, [fp, #-4]
   2c8c0:	mov	sp, fp
   2c8c4:	pop	{fp, pc}
   2c8c8:	muleq	r0, sl, r9
   2c8cc:	andeq	sl, r0, r6, ror #2
   2c8d0:	andeq	sl, r0, ip, ror ip
   2c8d4:	muleq	r0, r0, ip
   2c8d8:	andeq	sl, r0, r2, lsl r1
   2c8dc:	andeq	sl, r0, r8, lsr #24
   2c8e0:	andeq	sl, r0, r6, asr #24
   2c8e4:	andeq	sl, r0, r6, lsr #1
   2c8e8:			; <UNDEFINED> instruction: 0x0000abbc
   2c8ec:	ldrdeq	sl, [r0], -r4
   2c8f0:	andeq	sl, r0, sl, lsr #32
   2c8f4:	andeq	sl, r0, r0, asr #22

0002c8f8 <flatcc_builder_table_add_offset@@Base>:
   2c8f8:	push	{fp, lr}
   2c8fc:	mov	fp, sp
   2c900:	sub	sp, sp, #8
   2c904:	str	r0, [sp, #4]
   2c908:	str	r1, [sp]
   2c90c:	ldr	r0, [sp, #4]
   2c910:	ldr	r0, [r0, #32]
   2c914:	ldrh	r0, [r0, #14]
   2c918:	cmp	r0, #3
   2c91c:	bne	2c924 <flatcc_builder_table_add_offset@@Base+0x2c>
   2c920:	b	2c944 <flatcc_builder_table_add_offset@@Base+0x4c>
   2c924:	ldr	r0, [pc, #212]	; 2ca00 <flatcc_builder_table_add_offset@@Base+0x108>
   2c928:	add	r0, pc, r0
   2c92c:	ldr	r1, [pc, #208]	; 2ca04 <flatcc_builder_table_add_offset@@Base+0x10c>
   2c930:	add	r1, pc, r1
   2c934:	ldr	r2, [pc, #204]	; 2ca08 <flatcc_builder_table_add_offset@@Base+0x110>
   2c938:	add	r3, pc, r2
   2c93c:	movw	r2, #1811	; 0x713
   2c940:	bl	12e68 <__assert_fail@plt>
   2c944:	ldr	r0, [sp]
   2c948:	cmp	r0, #0
   2c94c:	blt	2c964 <flatcc_builder_table_add_offset@@Base+0x6c>
   2c950:	ldr	r0, [sp]
   2c954:	movw	r1, #32764	; 0x7ffc
   2c958:	cmp	r0, r1
   2c95c:	bgt	2c964 <flatcc_builder_table_add_offset@@Base+0x6c>
   2c960:	b	2c984 <flatcc_builder_table_add_offset@@Base+0x8c>
   2c964:	ldr	r0, [pc, #160]	; 2ca0c <flatcc_builder_table_add_offset@@Base+0x114>
   2c968:	add	r0, pc, r0
   2c96c:	ldr	r1, [pc, #156]	; 2ca10 <flatcc_builder_table_add_offset@@Base+0x118>
   2c970:	add	r1, pc, r1
   2c974:	ldr	r2, [pc, #152]	; 2ca14 <flatcc_builder_table_add_offset@@Base+0x11c>
   2c978:	add	r3, pc, r2
   2c97c:	movw	r2, #1812	; 0x714
   2c980:	bl	12e68 <__assert_fail@plt>
   2c984:	ldr	r0, [sp, #4]
   2c988:	ldr	r0, [r0, #4]
   2c98c:	ldr	r1, [sp]
   2c990:	add	r0, r0, r1, lsl #1
   2c994:	ldrh	r0, [r0]
   2c998:	cmp	r0, #0
   2c99c:	beq	2c9c0 <flatcc_builder_table_add_offset@@Base+0xc8>
   2c9a0:	ldr	r0, [pc, #116]	; 2ca1c <flatcc_builder_table_add_offset@@Base+0x124>
   2c9a4:	add	r0, pc, r0
   2c9a8:	ldr	r1, [pc, #112]	; 2ca20 <flatcc_builder_table_add_offset@@Base+0x128>
   2c9ac:	add	r1, pc, r1
   2c9b0:	ldr	r2, [pc, #108]	; 2ca24 <flatcc_builder_table_add_offset@@Base+0x12c>
   2c9b4:	add	r3, pc, r2
   2c9b8:	movw	r2, #1819	; 0x71b
   2c9bc:	bl	12e68 <__assert_fail@plt>
   2c9c0:	ldr	r0, [pc, #80]	; 2ca18 <flatcc_builder_table_add_offset@@Base+0x120>
   2c9c4:	ldr	r1, [sp]
   2c9c8:	ldr	r2, [sp, #4]
   2c9cc:	ldr	r2, [r2, #12]
   2c9d0:	eor	r1, r1, r2
   2c9d4:	mul	r1, r1, r0
   2c9d8:	eor	r1, r1, #4
   2c9dc:	mul	r0, r1, r0
   2c9e0:	ldr	r1, [sp, #4]
   2c9e4:	str	r0, [r1, #12]
   2c9e8:	ldr	r0, [sp, #4]
   2c9ec:	ldr	r1, [sp]
   2c9f0:	uxth	r1, r1
   2c9f4:	bl	2d9b8 <flatcc_builder_table_add_copy@@Base+0x64>
   2c9f8:	mov	sp, fp
   2c9fc:	pop	{fp, pc}
   2ca00:			; <UNDEFINED> instruction: 0x0000a7b2
   2ca04:	andeq	r9, r0, lr, ror pc
   2ca08:	muleq	r0, r6, lr
   2ca0c:	andeq	sl, r0, r6, ror #27
   2ca10:	andeq	r9, r0, lr, lsr pc
   2ca14:	andeq	sl, r0, r6, asr lr
   2ca18:			; <UNDEFINED> instruction: 0x9e3779b1
   2ca1c:	andeq	fp, r0, r7, asr #1
   2ca20:	andeq	r9, r0, r2, lsl #30
   2ca24:	andeq	sl, r0, sl, lsl lr

0002ca28 <flatcc_builder_table_add@@Base>:
   2ca28:	push	{fp, lr}
   2ca2c:	mov	fp, sp
   2ca30:	sub	sp, sp, #16
   2ca34:	str	r0, [fp, #-4]
   2ca38:	str	r1, [sp, #8]
   2ca3c:	str	r2, [sp, #4]
   2ca40:	strh	r3, [sp, #2]
   2ca44:	ldr	r0, [fp, #-4]
   2ca48:	ldr	r0, [r0, #32]
   2ca4c:	ldrh	r0, [r0, #14]
   2ca50:	cmp	r0, #3
   2ca54:	bne	2ca5c <flatcc_builder_table_add@@Base+0x34>
   2ca58:	b	2ca7c <flatcc_builder_table_add@@Base+0x54>
   2ca5c:	ldr	r0, [pc, #260]	; 2cb68 <flatcc_builder_table_add@@Base+0x140>
   2ca60:	add	r0, pc, r0
   2ca64:	ldr	r1, [pc, #256]	; 2cb6c <flatcc_builder_table_add@@Base+0x144>
   2ca68:	add	r1, pc, r1
   2ca6c:	ldr	r2, [pc, #252]	; 2cb70 <flatcc_builder_table_add@@Base+0x148>
   2ca70:	add	r3, pc, r2
   2ca74:	movw	r2, #1773	; 0x6ed
   2ca78:	bl	12e68 <__assert_fail@plt>
   2ca7c:	ldr	r0, [sp, #8]
   2ca80:	cmp	r0, #0
   2ca84:	blt	2ca9c <flatcc_builder_table_add@@Base+0x74>
   2ca88:	ldr	r0, [sp, #8]
   2ca8c:	movw	r1, #32764	; 0x7ffc
   2ca90:	cmp	r0, r1
   2ca94:	bgt	2ca9c <flatcc_builder_table_add@@Base+0x74>
   2ca98:	b	2cabc <flatcc_builder_table_add@@Base+0x94>
   2ca9c:	ldr	r0, [pc, #208]	; 2cb74 <flatcc_builder_table_add@@Base+0x14c>
   2caa0:	add	r0, pc, r0
   2caa4:	ldr	r1, [pc, #204]	; 2cb78 <flatcc_builder_table_add@@Base+0x150>
   2caa8:	add	r1, pc, r1
   2caac:	ldr	r2, [pc, #200]	; 2cb7c <flatcc_builder_table_add@@Base+0x154>
   2cab0:	add	r3, pc, r2
   2cab4:	movw	r2, #1774	; 0x6ee
   2cab8:	bl	12e68 <__assert_fail@plt>
   2cabc:	ldrh	r0, [sp, #2]
   2cac0:	ldr	r1, [fp, #-4]
   2cac4:	ldrh	r1, [r1, #130]	; 0x82
   2cac8:	cmp	r0, r1
   2cacc:	ble	2cadc <flatcc_builder_table_add@@Base+0xb4>
   2cad0:	ldrh	r0, [sp, #2]
   2cad4:	ldr	r1, [fp, #-4]
   2cad8:	strh	r0, [r1, #130]	; 0x82
   2cadc:	ldr	r0, [fp, #-4]
   2cae0:	ldr	r0, [r0, #4]
   2cae4:	ldr	r1, [sp, #8]
   2cae8:	add	r0, r0, r1, lsl #1
   2caec:	ldrh	r0, [r0]
   2caf0:	cmp	r0, #0
   2caf4:	beq	2cb18 <flatcc_builder_table_add@@Base+0xf0>
   2caf8:	ldr	r0, [pc, #132]	; 2cb84 <flatcc_builder_table_add@@Base+0x15c>
   2cafc:	add	r0, pc, r0
   2cb00:	ldr	r1, [pc, #128]	; 2cb88 <flatcc_builder_table_add@@Base+0x160>
   2cb04:	add	r1, pc, r1
   2cb08:	ldr	r2, [pc, #124]	; 2cb8c <flatcc_builder_table_add@@Base+0x164>
   2cb0c:	add	r3, pc, r2
   2cb10:	movw	r2, #1784	; 0x6f8
   2cb14:	bl	12e68 <__assert_fail@plt>
   2cb18:	ldr	r0, [pc, #96]	; 2cb80 <flatcc_builder_table_add@@Base+0x158>
   2cb1c:	ldr	r1, [sp, #8]
   2cb20:	ldr	r2, [fp, #-4]
   2cb24:	ldr	r2, [r2, #12]
   2cb28:	eor	r1, r1, r2
   2cb2c:	mul	r1, r1, r0
   2cb30:	ldr	r2, [sp, #4]
   2cb34:	eor	r1, r1, r2
   2cb38:	mul	r0, r1, r0
   2cb3c:	ldr	r1, [fp, #-4]
   2cb40:	str	r0, [r1, #12]
   2cb44:	ldr	r0, [fp, #-4]
   2cb48:	ldr	r1, [sp, #4]
   2cb4c:	ldrh	r2, [sp, #2]
   2cb50:	ldr	r3, [sp, #8]
   2cb54:	uxth	r2, r2
   2cb58:	uxth	r3, r3
   2cb5c:	bl	2d7d4 <flatcc_builder_string_len@@Base+0x1c>
   2cb60:	mov	sp, fp
   2cb64:	pop	{fp, pc}
   2cb68:	andeq	sl, r0, sl, ror r6
   2cb6c:	andeq	r9, r0, r6, asr #28
   2cb70:	muleq	r0, r4, ip
   2cb74:	andeq	sl, r0, lr, lsr #25
   2cb78:	andeq	r9, r0, r6, lsl #28
   2cb7c:	andeq	sl, r0, r4, asr ip
   2cb80:			; <UNDEFINED> instruction: 0x9e3779b1
   2cb84:	andeq	sl, r0, pc, ror #30
   2cb88:	andeq	r9, r0, sl, lsr #27
   2cb8c:	strdeq	sl, [r0], -r8
   2cb90:	sub	sp, sp, #4
   2cb94:	strb	r0, [sp, #3]
   2cb98:	ldrb	r0, [sp, #3]
   2cb9c:	add	sp, sp, #4
   2cba0:	bx	lr

0002cba4 <flatcc_builder_table_add_union_vector@@Base>:
   2cba4:	push	{fp, lr}
   2cba8:	mov	fp, sp
   2cbac:	sub	sp, sp, #24
   2cbb0:	str	r2, [sp, #12]
   2cbb4:	str	r3, [sp, #16]
   2cbb8:	str	r0, [sp, #8]
   2cbbc:	str	r1, [sp, #4]
   2cbc0:	ldr	r0, [sp, #8]
   2cbc4:	ldr	r0, [r0, #32]
   2cbc8:	ldrh	r0, [r0, #14]
   2cbcc:	cmp	r0, #3
   2cbd0:	bne	2cbd8 <flatcc_builder_table_add_union_vector@@Base+0x34>
   2cbd4:	b	2cbf8 <flatcc_builder_table_add_union_vector@@Base+0x54>
   2cbd8:	ldr	r0, [pc, #420]	; 2cd84 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   2cbdc:	add	r0, pc, r0
   2cbe0:	ldr	r1, [pc, #416]	; 2cd88 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   2cbe4:	add	r1, pc, r1
   2cbe8:	ldr	r2, [pc, #412]	; 2cd8c <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   2cbec:	add	r3, pc, r2
   2cbf0:	movw	r2, #1536	; 0x600
   2cbf4:	bl	12e68 <__assert_fail@plt>
   2cbf8:	ldr	r0, [sp, #12]
   2cbfc:	cmp	r0, #0
   2cc00:	movw	r0, #0
   2cc04:	moveq	r0, #1
   2cc08:	and	r0, r0, #1
   2cc0c:	ldr	r1, [sp, #16]
   2cc10:	cmp	r1, #0
   2cc14:	movw	r1, #0
   2cc18:	moveq	r1, #1
   2cc1c:	and	r1, r1, #1
   2cc20:	cmp	r0, r1
   2cc24:	beq	2cc88 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   2cc28:	ldr	r0, [sp, #12]
   2cc2c:	cmp	r0, #0
   2cc30:	movw	r0, #0
   2cc34:	moveq	r0, #1
   2cc38:	and	r0, r0, #1
   2cc3c:	ldr	r1, [sp, #16]
   2cc40:	cmp	r1, #0
   2cc44:	movw	r1, #0
   2cc48:	moveq	r1, #1
   2cc4c:	and	r1, r1, #1
   2cc50:	cmp	r0, r1
   2cc54:	bne	2cc5c <flatcc_builder_table_add_union_vector@@Base+0xb8>
   2cc58:	b	2cc7c <flatcc_builder_table_add_union_vector@@Base+0xd8>
   2cc5c:	ldr	r0, [pc, #300]	; 2cd90 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   2cc60:	add	r0, pc, r0
   2cc64:	ldr	r1, [pc, #296]	; 2cd94 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   2cc68:	add	r1, pc, r1
   2cc6c:	ldr	r2, [pc, #292]	; 2cd98 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   2cc70:	add	r3, pc, r2
   2cc74:	movw	r2, #1537	; 0x601
   2cc78:	bl	12e68 <__assert_fail@plt>
   2cc7c:	mvn	r0, #0
   2cc80:	str	r0, [fp, #-4]
   2cc84:	b	2cd78 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2cc88:	ldr	r0, [sp, #12]
   2cc8c:	cmp	r0, #0
   2cc90:	beq	2cd70 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   2cc94:	ldr	r0, [sp, #8]
   2cc98:	ldr	r1, [sp, #4]
   2cc9c:	sub	r1, r1, #1
   2cca0:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   2cca4:	str	r0, [sp]
   2cca8:	ldr	r0, [sp]
   2ccac:	movw	r1, #0
   2ccb0:	cmp	r0, r1
   2ccb4:	bne	2ccf8 <flatcc_builder_table_add_union_vector@@Base+0x154>
   2ccb8:	ldr	r0, [sp]
   2ccbc:	movw	r1, #0
   2ccc0:	cmp	r0, r1
   2ccc4:	beq	2cccc <flatcc_builder_table_add_union_vector@@Base+0x128>
   2ccc8:	b	2ccec <flatcc_builder_table_add_union_vector@@Base+0x148>
   2cccc:	ldr	r0, [pc, #200]	; 2cd9c <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   2ccd0:	add	r0, pc, r0
   2ccd4:	ldr	r1, [pc, #196]	; 2cda0 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   2ccd8:	add	r1, pc, r1
   2ccdc:	ldr	r2, [pc, #192]	; 2cda4 <flatcc_builder_table_add_union_vector@@Base+0x200>
   2cce0:	add	r3, pc, r2
   2cce4:	movw	r2, #1540	; 0x604
   2cce8:	bl	12e68 <__assert_fail@plt>
   2ccec:	mvn	r0, #0
   2ccf0:	str	r0, [fp, #-4]
   2ccf4:	b	2cd78 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2ccf8:	ldr	r0, [sp, #12]
   2ccfc:	ldr	r1, [sp]
   2cd00:	str	r0, [r1]
   2cd04:	ldr	r0, [sp, #8]
   2cd08:	ldr	r1, [sp, #4]
   2cd0c:	bl	2c8f8 <flatcc_builder_table_add_offset@@Base>
   2cd10:	str	r0, [sp]
   2cd14:	ldr	r0, [sp]
   2cd18:	movw	r1, #0
   2cd1c:	cmp	r0, r1
   2cd20:	bne	2cd64 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   2cd24:	ldr	r0, [sp]
   2cd28:	movw	r1, #0
   2cd2c:	cmp	r0, r1
   2cd30:	beq	2cd38 <flatcc_builder_table_add_union_vector@@Base+0x194>
   2cd34:	b	2cd58 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   2cd38:	ldr	r0, [pc, #104]	; 2cda8 <flatcc_builder_table_add_union_vector@@Base+0x204>
   2cd3c:	add	r0, pc, r0
   2cd40:	ldr	r1, [pc, #100]	; 2cdac <flatcc_builder_table_add_union_vector@@Base+0x208>
   2cd44:	add	r1, pc, r1
   2cd48:	ldr	r2, [pc, #96]	; 2cdb0 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   2cd4c:	add	r3, pc, r2
   2cd50:	movw	r2, #1544	; 0x608
   2cd54:	bl	12e68 <__assert_fail@plt>
   2cd58:	mvn	r0, #0
   2cd5c:	str	r0, [fp, #-4]
   2cd60:	b	2cd78 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2cd64:	ldr	r0, [sp, #16]
   2cd68:	ldr	r1, [sp]
   2cd6c:	str	r0, [r1]
   2cd70:	movw	r0, #0
   2cd74:	str	r0, [fp, #-4]
   2cd78:	ldr	r0, [fp, #-4]
   2cd7c:	mov	sp, fp
   2cd80:	pop	{fp, pc}
   2cd84:	strdeq	sl, [r0], -lr
   2cd88:	andeq	r9, r0, sl, asr #25
   2cd8c:	andeq	sl, r0, r0, ror r8
   2cd90:	andeq	sl, r0, pc, asr r8
   2cd94:	andeq	r9, r0, r6, asr #24
   2cd98:	andeq	sl, r0, ip, ror #15
   2cd9c:	andeq	sl, r0, r6, ror r7
   2cda0:	ldrdeq	r9, [r0], -r6
   2cda4:	andeq	sl, r0, ip, ror r7
   2cda8:	andeq	sl, r0, sl, lsl #14
   2cdac:	andeq	r9, r0, sl, ror #22
   2cdb0:	andeq	sl, r0, r0, lsl r7

0002cdb4 <flatcc_builder_create_union_vector@@Base>:
   2cdb4:	push	{fp, lr}
   2cdb8:	mov	fp, sp
   2cdbc:	sub	sp, sp, #48	; 0x30
   2cdc0:	str	r1, [fp, #-4]
   2cdc4:	str	r2, [fp, #-8]
   2cdc8:	str	r3, [fp, #-12]
   2cdcc:	mov	r1, r0
   2cdd0:	str	r0, [sp, #12]
   2cdd4:	mov	r0, r1
   2cdd8:	movw	r1, #0
   2cddc:	and	r1, r1, #255	; 0xff
   2cde0:	movw	r2, #8
   2cde4:	bl	12e2c <memset@plt>
   2cde8:	ldr	r0, [fp, #-4]
   2cdec:	bl	2addc <flatcc_builder_start_offset_vector@@Base>
   2cdf0:	cmp	r0, #0
   2cdf4:	beq	2cdfc <flatcc_builder_create_union_vector@@Base+0x48>
   2cdf8:	b	2cee0 <flatcc_builder_create_union_vector@@Base+0x12c>
   2cdfc:	ldr	r0, [fp, #-4]
   2ce00:	ldr	r1, [fp, #-12]
   2ce04:	bl	2a570 <flatcc_builder_extend_offset_vector@@Base>
   2ce08:	movw	r1, #0
   2ce0c:	cmp	r1, r0
   2ce10:	bne	2ce18 <flatcc_builder_create_union_vector@@Base+0x64>
   2ce14:	b	2cee0 <flatcc_builder_create_union_vector@@Base+0x12c>
   2ce18:	ldr	r0, [fp, #-4]
   2ce1c:	ldr	r1, [fp, #-12]
   2ce20:	mov	r2, r1
   2ce24:	str	r2, [sp, #8]
   2ce28:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2ce2c:	str	r0, [fp, #-16]
   2ce30:	movw	r1, #0
   2ce34:	cmp	r1, r0
   2ce38:	bne	2ce40 <flatcc_builder_create_union_vector@@Base+0x8c>
   2ce3c:	b	2cee0 <flatcc_builder_create_union_vector@@Base+0x12c>
   2ce40:	ldr	r0, [fp, #-4]
   2ce44:	bl	2c6d4 <flatcc_builder_offset_vector_edit@@Base>
   2ce48:	str	r0, [fp, #-20]	; 0xffffffec
   2ce4c:	movw	r0, #0
   2ce50:	str	r0, [sp, #24]
   2ce54:	ldr	r0, [sp, #24]
   2ce58:	ldr	r1, [fp, #-12]
   2ce5c:	cmp	r0, r1
   2ce60:	bcs	2cea4 <flatcc_builder_create_union_vector@@Base+0xf0>
   2ce64:	ldr	r0, [fp, #-8]
   2ce68:	ldr	r1, [sp, #24]
   2ce6c:	ldrb	r0, [r0, r1, lsl #3]
   2ce70:	ldr	r2, [fp, #-16]
   2ce74:	strb	r0, [r2, r1]
   2ce78:	ldr	r0, [fp, #-8]
   2ce7c:	ldr	r1, [sp, #24]
   2ce80:	add	r0, r0, r1, lsl #3
   2ce84:	ldr	r0, [r0, #4]
   2ce88:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ce8c:	add	r1, r2, r1, lsl #2
   2ce90:	str	r0, [r1]
   2ce94:	ldr	r0, [sp, #24]
   2ce98:	add	r0, r0, #1
   2ce9c:	str	r0, [sp, #24]
   2cea0:	b	2ce54 <flatcc_builder_create_union_vector@@Base+0xa0>
   2cea4:	ldr	r1, [fp, #-4]
   2cea8:	ldr	r2, [fp, #-16]
   2ceac:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ceb0:	ldr	r0, [fp, #-12]
   2ceb4:	mov	ip, sp
   2ceb8:	str	r0, [ip]
   2cebc:	add	r0, sp, #16
   2cec0:	bl	2cee8 <flatcc_builder_create_union_vector_direct@@Base>
   2cec4:	ldr	r0, [sp, #16]
   2cec8:	ldr	r1, [sp, #12]
   2cecc:	str	r0, [r1]
   2ced0:	ldr	r0, [sp, #20]
   2ced4:	str	r0, [r1, #4]
   2ced8:	ldr	r0, [fp, #-4]
   2cedc:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2cee0:	mov	sp, fp
   2cee4:	pop	{fp, pc}

0002cee8 <flatcc_builder_create_union_vector_direct@@Base>:
   2cee8:	push	{fp, lr}
   2ceec:	mov	fp, sp
   2cef0:	sub	sp, sp, #32
   2cef4:	ldr	ip, [fp, #8]
   2cef8:	str	r1, [fp, #-4]
   2cefc:	str	r2, [fp, #-8]
   2cf00:	str	r3, [fp, #-12]
   2cf04:	mov	r1, r0
   2cf08:	str	r0, [sp, #16]
   2cf0c:	mov	r0, r1
   2cf10:	movw	r1, #0
   2cf14:	and	r1, r1, #255	; 0xff
   2cf18:	movw	r2, #8
   2cf1c:	str	ip, [sp, #12]
   2cf20:	bl	12e2c <memset@plt>
   2cf24:	ldr	r0, [fp, #-4]
   2cf28:	ldr	r1, [fp, #-12]
   2cf2c:	ldr	r2, [fp, #8]
   2cf30:	ldr	r3, [fp, #-8]
   2cf34:	bl	2c32c <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   2cf38:	ldr	r1, [sp, #16]
   2cf3c:	str	r0, [r1, #4]
   2cf40:	movw	r2, #0
   2cf44:	cmp	r2, r0
   2cf48:	bne	2cf50 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   2cf4c:	b	2cf94 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2cf50:	ldr	r0, [fp, #-4]
   2cf54:	ldr	r1, [fp, #-8]
   2cf58:	ldr	r2, [fp, #8]
   2cf5c:	movw	r3, #1
   2cf60:	movw	ip, #1
   2cf64:	uxth	ip, ip
   2cf68:	str	ip, [sp]
   2cf6c:	mvn	ip, #0
   2cf70:	str	ip, [sp, #4]
   2cf74:	bl	2c01c <flatcc_builder_create_vector@@Base>
   2cf78:	ldr	r1, [sp, #16]
   2cf7c:	str	r0, [r1]
   2cf80:	movw	r2, #0
   2cf84:	cmp	r2, r0
   2cf88:	bne	2cf90 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   2cf8c:	b	2cf94 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2cf90:	b	2cf94 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   2cf94:	mov	sp, fp
   2cf98:	pop	{fp, pc}

0002cf9c <flatcc_builder_start_union_vector@@Base>:
   2cf9c:	push	{fp, lr}
   2cfa0:	mov	fp, sp
   2cfa4:	sub	sp, sp, #8
   2cfa8:	str	r0, [sp]
   2cfac:	ldr	r0, [sp]
   2cfb0:	movw	r1, #4
   2cfb4:	uxth	r1, r1
   2cfb8:	bl	29bb4 <flatcc_builder_start_buffer@@Base+0x178>
   2cfbc:	cmp	r0, #0
   2cfc0:	beq	2cfd0 <flatcc_builder_start_union_vector@@Base+0x34>
   2cfc4:	mvn	r0, #0
   2cfc8:	str	r0, [sp, #4]
   2cfcc:	b	2d014 <flatcc_builder_start_union_vector@@Base+0x78>
   2cfd0:	ldr	r0, [sp]
   2cfd4:	ldr	r0, [r0, #32]
   2cfd8:	movw	r1, #8
   2cfdc:	str	r1, [r0, #16]
   2cfe0:	ldr	r0, [sp]
   2cfe4:	ldr	r0, [r0, #32]
   2cfe8:	movw	r1, #0
   2cfec:	str	r1, [r0, #20]
   2cff0:	ldr	r0, [sp]
   2cff4:	ldr	r0, [r0, #32]
   2cff8:	movw	r1, #7
   2cffc:	strh	r1, [r0, #14]
   2d000:	ldr	r0, [sp]
   2d004:	mvn	r1, #3
   2d008:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2d00c:	movw	r0, #0
   2d010:	str	r0, [sp, #4]
   2d014:	ldr	r0, [sp, #4]
   2d018:	mov	sp, fp
   2d01c:	pop	{fp, pc}

0002d020 <flatcc_builder_end_union_vector@@Base>:
   2d020:	push	{fp, lr}
   2d024:	mov	fp, sp
   2d028:	sub	sp, sp, #40	; 0x28
   2d02c:	str	r1, [fp, #-4]
   2d030:	mov	r1, r0
   2d034:	str	r0, [sp, #4]
   2d038:	mov	r0, r1
   2d03c:	movw	r1, #0
   2d040:	and	r1, r1, #255	; 0xff
   2d044:	movw	r2, #8
   2d048:	bl	12e2c <memset@plt>
   2d04c:	ldr	r0, [fp, #-4]
   2d050:	ldr	r0, [r0, #32]
   2d054:	ldrh	r0, [r0, #14]
   2d058:	cmp	r0, #7
   2d05c:	bne	2d064 <flatcc_builder_end_union_vector@@Base+0x44>
   2d060:	b	2d084 <flatcc_builder_end_union_vector@@Base+0x64>
   2d064:	ldr	r0, [pc, #260]	; 2d170 <flatcc_builder_end_union_vector@@Base+0x150>
   2d068:	add	r0, pc, r0
   2d06c:	ldr	r1, [pc, #256]	; 2d174 <flatcc_builder_end_union_vector@@Base+0x154>
   2d070:	add	r1, pc, r1
   2d074:	ldr	r2, [pc, #252]	; 2d178 <flatcc_builder_end_union_vector@@Base+0x158>
   2d078:	add	r3, pc, r2
   2d07c:	movw	r2, #1617	; 0x651
   2d080:	bl	12e68 <__assert_fail@plt>
   2d084:	ldr	r0, [fp, #-4]
   2d088:	bl	2d17c <flatcc_builder_union_vector_count@@Base>
   2d08c:	str	r0, [sp, #16]
   2d090:	ldr	r0, [fp, #-4]
   2d094:	ldr	lr, [sp, #16]
   2d098:	movw	r1, #5
   2d09c:	mul	r1, lr, r1
   2d0a0:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2d0a4:	str	r0, [fp, #-16]
   2d0a8:	movw	r1, #0
   2d0ac:	cmp	r1, r0
   2d0b0:	bne	2d0b8 <flatcc_builder_end_union_vector@@Base+0x98>
   2d0b4:	b	2d168 <flatcc_builder_end_union_vector@@Base+0x148>
   2d0b8:	ldr	r0, [fp, #-16]
   2d0bc:	ldr	r1, [sp, #16]
   2d0c0:	add	r0, r0, r1, lsl #2
   2d0c4:	str	r0, [fp, #-8]
   2d0c8:	ldr	r0, [fp, #-4]
   2d0cc:	bl	2d198 <flatcc_builder_union_vector_edit@@Base>
   2d0d0:	str	r0, [fp, #-12]
   2d0d4:	movw	r0, #0
   2d0d8:	str	r0, [sp, #20]
   2d0dc:	ldr	r0, [sp, #20]
   2d0e0:	ldr	r1, [sp, #16]
   2d0e4:	cmp	r0, r1
   2d0e8:	bcs	2d12c <flatcc_builder_end_union_vector@@Base+0x10c>
   2d0ec:	ldr	r0, [fp, #-12]
   2d0f0:	ldr	r1, [sp, #20]
   2d0f4:	ldrb	r0, [r0, r1, lsl #3]
   2d0f8:	ldr	r2, [fp, #-8]
   2d0fc:	strb	r0, [r2, r1]
   2d100:	ldr	r0, [fp, #-12]
   2d104:	ldr	r1, [sp, #20]
   2d108:	add	r0, r0, r1, lsl #3
   2d10c:	ldr	r0, [r0, #4]
   2d110:	ldr	r2, [fp, #-16]
   2d114:	add	r1, r2, r1, lsl #2
   2d118:	str	r0, [r1]
   2d11c:	ldr	r0, [sp, #20]
   2d120:	add	r0, r0, #1
   2d124:	str	r0, [sp, #20]
   2d128:	b	2d0dc <flatcc_builder_end_union_vector@@Base+0xbc>
   2d12c:	ldr	r1, [fp, #-4]
   2d130:	ldr	r2, [fp, #-8]
   2d134:	ldr	r3, [fp, #-16]
   2d138:	ldr	r0, [sp, #16]
   2d13c:	mov	ip, sp
   2d140:	str	r0, [ip]
   2d144:	add	r0, sp, #8
   2d148:	bl	2cee8 <flatcc_builder_create_union_vector_direct@@Base>
   2d14c:	ldr	r0, [sp, #8]
   2d150:	ldr	r1, [sp, #4]
   2d154:	str	r0, [r1]
   2d158:	ldr	r0, [sp, #12]
   2d15c:	str	r0, [r1, #4]
   2d160:	ldr	r0, [fp, #-4]
   2d164:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2d168:	mov	sp, fp
   2d16c:	pop	{fp, pc}
   2d170:	andeq	sl, r0, pc, ror r4
   2d174:	andeq	r9, r0, lr, lsr r8
   2d178:	andeq	sl, r0, r1, lsr #9

0002d17c <flatcc_builder_union_vector_count@@Base>:
   2d17c:	sub	sp, sp, #4
   2d180:	str	r0, [sp]
   2d184:	ldr	r0, [sp]
   2d188:	ldr	r0, [r0, #32]
   2d18c:	ldr	r0, [r0, #20]
   2d190:	add	sp, sp, #4
   2d194:	bx	lr

0002d198 <flatcc_builder_union_vector_edit@@Base>:
   2d198:	sub	sp, sp, #4
   2d19c:	str	r0, [sp]
   2d1a0:	ldr	r0, [sp]
   2d1a4:	ldr	r0, [r0, #16]
   2d1a8:	add	sp, sp, #4
   2d1ac:	bx	lr

0002d1b0 <flatcc_builder_extend_union_vector@@Base>:
   2d1b0:	push	{fp, lr}
   2d1b4:	mov	fp, sp
   2d1b8:	sub	sp, sp, #16
   2d1bc:	ldr	r2, [pc, #68]	; 2d208 <flatcc_builder_extend_union_vector@@Base+0x58>
   2d1c0:	str	r0, [sp, #8]
   2d1c4:	str	r1, [sp, #4]
   2d1c8:	ldr	r0, [sp, #8]
   2d1cc:	ldr	r1, [sp, #4]
   2d1d0:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2d1d4:	cmp	r0, #0
   2d1d8:	beq	2d1e8 <flatcc_builder_extend_union_vector@@Base+0x38>
   2d1dc:	movw	r0, #0
   2d1e0:	str	r0, [fp, #-4]
   2d1e4:	b	2d1fc <flatcc_builder_extend_union_vector@@Base+0x4c>
   2d1e8:	ldr	r0, [sp, #8]
   2d1ec:	ldr	r1, [sp, #4]
   2d1f0:	lsl	r1, r1, #3
   2d1f4:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2d1f8:	str	r0, [fp, #-4]
   2d1fc:	ldr	r0, [fp, #-4]
   2d200:	mov	sp, fp
   2d204:	pop	{fp, pc}
   2d208:	svcne	0x00ffffff

0002d20c <flatcc_builder_truncate_union_vector@@Base>:
   2d20c:	push	{fp, lr}
   2d210:	mov	fp, sp
   2d214:	sub	sp, sp, #16
   2d218:	str	r0, [sp, #8]
   2d21c:	str	r1, [sp, #4]
   2d220:	ldr	r0, [sp, #8]
   2d224:	ldr	r0, [r0, #32]
   2d228:	ldrh	r0, [r0, #14]
   2d22c:	cmp	r0, #7
   2d230:	bne	2d238 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   2d234:	b	2d258 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   2d238:	ldr	r0, [pc, #192]	; 2d300 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   2d23c:	add	r0, pc, r0
   2d240:	ldr	r1, [pc, #188]	; 2d304 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   2d244:	add	r1, pc, r1
   2d248:	ldr	r2, [pc, #184]	; 2d308 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   2d24c:	add	r3, pc, r2
   2d250:	movw	r2, #1665	; 0x681
   2d254:	bl	12e68 <__assert_fail@plt>
   2d258:	ldr	r0, [sp, #8]
   2d25c:	ldr	r0, [r0, #32]
   2d260:	ldr	r0, [r0, #20]
   2d264:	ldr	r1, [sp, #4]
   2d268:	cmp	r0, r1
   2d26c:	bcs	2d2b8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   2d270:	ldr	r0, [sp, #8]
   2d274:	ldr	r0, [r0, #32]
   2d278:	ldr	r0, [r0, #20]
   2d27c:	ldr	r1, [sp, #4]
   2d280:	cmp	r0, r1
   2d284:	bcc	2d28c <flatcc_builder_truncate_union_vector@@Base+0x80>
   2d288:	b	2d2ac <flatcc_builder_truncate_union_vector@@Base+0xa0>
   2d28c:	ldr	r0, [pc, #120]	; 2d30c <flatcc_builder_truncate_union_vector@@Base+0x100>
   2d290:	add	r0, pc, r0
   2d294:	ldr	r1, [pc, #116]	; 2d310 <flatcc_builder_truncate_union_vector@@Base+0x104>
   2d298:	add	r1, pc, r1
   2d29c:	ldr	r2, [pc, #112]	; 2d314 <flatcc_builder_truncate_union_vector@@Base+0x108>
   2d2a0:	add	r3, pc, r2
   2d2a4:	movw	r2, #1666	; 0x682
   2d2a8:	bl	12e68 <__assert_fail@plt>
   2d2ac:	mvn	r0, #0
   2d2b0:	str	r0, [fp, #-4]
   2d2b4:	b	2d2f4 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   2d2b8:	ldr	r0, [sp, #4]
   2d2bc:	ldr	r1, [sp, #8]
   2d2c0:	ldr	r1, [r1, #32]
   2d2c4:	ldr	r2, [r1, #20]
   2d2c8:	sub	r0, r2, r0
   2d2cc:	str	r0, [r1, #20]
   2d2d0:	ldr	r0, [sp, #8]
   2d2d4:	ldr	r1, [sp, #8]
   2d2d8:	ldr	r1, [r1, #32]
   2d2dc:	ldr	r1, [r1, #16]
   2d2e0:	ldr	r2, [sp, #4]
   2d2e4:	mul	r1, r1, r2
   2d2e8:	bl	2aaa0 <flatcc_builder_truncate_vector@@Base+0x10c>
   2d2ec:	movw	r0, #0
   2d2f0:	str	r0, [fp, #-4]
   2d2f4:	ldr	r0, [fp, #-4]
   2d2f8:	mov	sp, fp
   2d2fc:	pop	{fp, pc}
   2d300:	andeq	sl, r0, fp, lsr #5
   2d304:	andeq	r9, r0, sl, ror #12
   2d308:	andeq	sl, r0, r0, lsr #6
   2d30c:			; <UNDEFINED> instruction: 0x00009cbb
   2d310:	andeq	r9, r0, r6, lsl r6
   2d314:	andeq	sl, r0, ip, asr #5

0002d318 <flatcc_builder_union_vector_push@@Base>:
   2d318:	push	{fp, lr}
   2d31c:	mov	fp, sp
   2d320:	sub	sp, sp, #24
   2d324:	str	r1, [sp, #12]
   2d328:	str	r2, [sp, #16]
   2d32c:	str	r0, [sp, #8]
   2d330:	ldr	r0, [sp, #8]
   2d334:	ldr	r0, [r0, #32]
   2d338:	ldrh	r0, [r0, #14]
   2d33c:	cmp	r0, #7
   2d340:	bne	2d348 <flatcc_builder_union_vector_push@@Base+0x30>
   2d344:	b	2d368 <flatcc_builder_union_vector_push@@Base+0x50>
   2d348:	ldr	r0, [pc, #160]	; 2d3f0 <flatcc_builder_union_vector_push@@Base+0xd8>
   2d34c:	add	r0, pc, r0
   2d350:	ldr	r1, [pc, #156]	; 2d3f4 <flatcc_builder_union_vector_push@@Base+0xdc>
   2d354:	add	r1, pc, r1
   2d358:	ldr	r2, [pc, #152]	; 2d3f8 <flatcc_builder_union_vector_push@@Base+0xe0>
   2d35c:	add	r3, pc, r2
   2d360:	movw	r2, #1677	; 0x68d
   2d364:	bl	12e68 <__assert_fail@plt>
   2d368:	ldr	r0, [pc, #140]	; 2d3fc <flatcc_builder_union_vector_push@@Base+0xe4>
   2d36c:	ldr	r1, [sp, #8]
   2d370:	ldr	r1, [r1, #32]
   2d374:	ldr	r1, [r1, #20]
   2d378:	cmp	r1, r0
   2d37c:	bne	2d38c <flatcc_builder_union_vector_push@@Base+0x74>
   2d380:	movw	r0, #0
   2d384:	str	r0, [fp, #-4]
   2d388:	b	2d3e4 <flatcc_builder_union_vector_push@@Base+0xcc>
   2d38c:	ldr	r0, [sp, #8]
   2d390:	ldr	r0, [r0, #32]
   2d394:	ldr	r1, [r0, #20]
   2d398:	add	r1, r1, #1
   2d39c:	str	r1, [r0, #20]
   2d3a0:	ldr	r0, [sp, #8]
   2d3a4:	movw	r1, #8
   2d3a8:	bl	2a0a8 <flatcc_builder_start_struct@@Base+0xfc>
   2d3ac:	str	r0, [sp, #4]
   2d3b0:	movw	r1, #0
   2d3b4:	cmp	r1, r0
   2d3b8:	bne	2d3c8 <flatcc_builder_union_vector_push@@Base+0xb0>
   2d3bc:	movw	r0, #0
   2d3c0:	str	r0, [fp, #-4]
   2d3c4:	b	2d3e4 <flatcc_builder_union_vector_push@@Base+0xcc>
   2d3c8:	ldr	r0, [sp, #4]
   2d3cc:	ldr	r1, [sp, #12]
   2d3d0:	str	r1, [r0]
   2d3d4:	ldr	r1, [sp, #16]
   2d3d8:	str	r1, [r0, #4]
   2d3dc:	ldr	r0, [sp, #4]
   2d3e0:	str	r0, [fp, #-4]
   2d3e4:	ldr	r0, [fp, #-4]
   2d3e8:	mov	sp, fp
   2d3ec:	pop	{fp, pc}
   2d3f0:	muleq	r0, fp, r1
   2d3f4:	andeq	r9, r0, sl, asr r5
   2d3f8:	andeq	sl, r0, r5, asr r2
   2d3fc:	svcne	0x00ffffff

0002d400 <flatcc_builder_append_union_vector@@Base>:
   2d400:	push	{fp, lr}
   2d404:	mov	fp, sp
   2d408:	sub	sp, sp, #16
   2d40c:	str	r0, [sp, #8]
   2d410:	str	r1, [sp, #4]
   2d414:	str	r2, [sp]
   2d418:	ldr	r0, [sp, #8]
   2d41c:	ldr	r0, [r0, #32]
   2d420:	ldrh	r0, [r0, #14]
   2d424:	cmp	r0, #7
   2d428:	bne	2d430 <flatcc_builder_append_union_vector@@Base+0x30>
   2d42c:	b	2d450 <flatcc_builder_append_union_vector@@Base+0x50>
   2d430:	ldr	r0, [pc, #96]	; 2d498 <flatcc_builder_append_union_vector@@Base+0x98>
   2d434:	add	r0, pc, r0
   2d438:	ldr	r1, [pc, #92]	; 2d49c <flatcc_builder_append_union_vector@@Base+0x9c>
   2d43c:	add	r1, pc, r1
   2d440:	ldr	r2, [pc, #88]	; 2d4a0 <flatcc_builder_append_union_vector@@Base+0xa0>
   2d444:	add	r3, pc, r2
   2d448:	movw	r2, #1692	; 0x69c
   2d44c:	bl	12e68 <__assert_fail@plt>
   2d450:	ldr	r2, [pc, #76]	; 2d4a4 <flatcc_builder_append_union_vector@@Base+0xa4>
   2d454:	ldr	r0, [sp, #8]
   2d458:	ldr	r1, [sp]
   2d45c:	bl	2a26c <flatcc_builder_extend_vector@@Base+0x6c>
   2d460:	cmp	r0, #0
   2d464:	beq	2d474 <flatcc_builder_append_union_vector@@Base+0x74>
   2d468:	movw	r0, #0
   2d46c:	str	r0, [fp, #-4]
   2d470:	b	2d48c <flatcc_builder_append_union_vector@@Base+0x8c>
   2d474:	ldr	r0, [sp, #8]
   2d478:	ldr	r1, [sp, #4]
   2d47c:	ldr	r2, [sp]
   2d480:	lsl	r2, r2, #3
   2d484:	bl	2a454 <flatcc_builder_vector_push@@Base+0x110>
   2d488:	str	r0, [fp, #-4]
   2d48c:	ldr	r0, [fp, #-4]
   2d490:	mov	sp, fp
   2d494:	pop	{fp, pc}
   2d498:	strheq	sl, [r0], -r3
   2d49c:	andeq	r9, r0, r2, ror r4
   2d4a0:	ldrdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   2d4a4:	svcne	0x00ffffff

0002d4a8 <flatcc_builder_create_string@@Base>:
   2d4a8:	push	{fp, lr}
   2d4ac:	mov	fp, sp
   2d4b0:	sub	sp, sp, #96	; 0x60
   2d4b4:	str	r0, [fp, #-8]
   2d4b8:	str	r1, [fp, #-12]
   2d4bc:	str	r2, [fp, #-16]
   2d4c0:	ldr	r0, [fp, #-16]
   2d4c4:	cmn	r0, #1
   2d4c8:	bls	2d4d8 <flatcc_builder_create_string@@Base+0x30>
   2d4cc:	movw	r0, #0
   2d4d0:	str	r0, [fp, #-4]
   2d4d4:	b	2d5f4 <flatcc_builder_create_string@@Base+0x14c>
   2d4d8:	ldr	r0, [fp, #-16]
   2d4dc:	bl	293dc <flatcc_builder_embed_buffer@@Base+0x388>
   2d4e0:	str	r0, [fp, #-24]	; 0xffffffe8
   2d4e4:	ldr	r0, [fp, #-8]
   2d4e8:	ldr	lr, [fp, #-16]
   2d4ec:	add	r1, lr, #1
   2d4f0:	mov	r2, #4
   2d4f4:	bl	293a8 <flatcc_builder_embed_buffer@@Base+0x354>
   2d4f8:	add	r0, r0, #1
   2d4fc:	str	r0, [fp, #-20]	; 0xffffffec
   2d500:	mov	r0, #0
   2d504:	str	r0, [sp]
   2d508:	str	r0, [sp, #4]
   2d50c:	ldr	r0, [sp]
   2d510:	add	r0, r0, #4
   2d514:	str	r0, [sp]
   2d518:	mov	r0, sp
   2d51c:	add	r0, r0, #8
   2d520:	ldr	r1, [sp, #4]
   2d524:	sub	r2, fp, #24
   2d528:	str	r2, [r0, r1, lsl #3]
   2d52c:	ldr	r1, [sp, #4]
   2d530:	add	r0, r0, r1, lsl #3
   2d534:	movw	r1, #4
   2d538:	str	r1, [r0, #4]
   2d53c:	ldr	r0, [sp, #4]
   2d540:	add	r0, r0, #1
   2d544:	str	r0, [sp, #4]
   2d548:	ldr	r0, [fp, #-16]
   2d54c:	cmp	r0, #0
   2d550:	bls	2d594 <flatcc_builder_create_string@@Base+0xec>
   2d554:	ldr	r0, [fp, #-16]
   2d558:	ldr	r1, [sp]
   2d55c:	add	r0, r1, r0
   2d560:	str	r0, [sp]
   2d564:	ldr	r0, [fp, #-12]
   2d568:	mov	r1, sp
   2d56c:	add	r1, r1, #8
   2d570:	ldr	r2, [sp, #4]
   2d574:	str	r0, [r1, r2, lsl #3]
   2d578:	ldr	r0, [fp, #-16]
   2d57c:	ldr	r2, [sp, #4]
   2d580:	add	r1, r1, r2, lsl #3
   2d584:	str	r0, [r1, #4]
   2d588:	ldr	r0, [sp, #4]
   2d58c:	add	r0, r0, #1
   2d590:	str	r0, [sp, #4]
   2d594:	ldr	r0, [fp, #-20]	; 0xffffffec
   2d598:	cmp	r0, #0
   2d59c:	bls	2d5e4 <flatcc_builder_create_string@@Base+0x13c>
   2d5a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2d5a4:	ldr	r1, [sp]
   2d5a8:	add	r0, r1, r0
   2d5ac:	str	r0, [sp]
   2d5b0:	mov	r0, sp
   2d5b4:	add	r0, r0, #8
   2d5b8:	ldr	r1, [sp, #4]
   2d5bc:	ldr	r2, [pc, #60]	; 2d600 <flatcc_builder_create_string@@Base+0x158>
   2d5c0:	ldr	r2, [pc, r2]
   2d5c4:	str	r2, [r0, r1, lsl #3]
   2d5c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2d5cc:	ldr	r2, [sp, #4]
   2d5d0:	add	r0, r0, r2, lsl #3
   2d5d4:	str	r1, [r0, #4]
   2d5d8:	ldr	r0, [sp, #4]
   2d5dc:	add	r0, r0, #1
   2d5e0:	str	r0, [sp, #4]
   2d5e4:	ldr	r0, [fp, #-8]
   2d5e8:	mov	r1, sp
   2d5ec:	bl	293f0 <flatcc_builder_embed_buffer@@Base+0x39c>
   2d5f0:	str	r0, [fp, #-4]
   2d5f4:	ldr	r0, [fp, #-4]
   2d5f8:	mov	sp, fp
   2d5fc:	pop	{fp, pc}
   2d600:	muleq	r1, r0, sl

0002d604 <flatcc_builder_create_string_str@@Base>:
   2d604:	push	{fp, lr}
   2d608:	mov	fp, sp
   2d60c:	sub	sp, sp, #24
   2d610:	str	r0, [fp, #-4]
   2d614:	str	r1, [fp, #-8]
   2d618:	ldr	r0, [fp, #-4]
   2d61c:	ldr	r1, [fp, #-8]
   2d620:	ldr	r2, [fp, #-8]
   2d624:	str	r0, [sp, #12]
   2d628:	mov	r0, r2
   2d62c:	str	r1, [sp, #8]
   2d630:	bl	12e08 <strlen@plt>
   2d634:	ldr	r1, [sp, #12]
   2d638:	str	r0, [sp, #4]
   2d63c:	mov	r0, r1
   2d640:	ldr	r1, [sp, #8]
   2d644:	ldr	r2, [sp, #4]
   2d648:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   2d64c:	mov	sp, fp
   2d650:	pop	{fp, pc}

0002d654 <flatcc_builder_create_string_strn@@Base>:
   2d654:	push	{fp, lr}
   2d658:	mov	fp, sp
   2d65c:	sub	sp, sp, #24
   2d660:	str	r0, [fp, #-4]
   2d664:	str	r1, [fp, #-8]
   2d668:	str	r2, [sp, #12]
   2d66c:	ldr	r0, [fp, #-4]
   2d670:	ldr	r1, [fp, #-8]
   2d674:	ldr	r2, [fp, #-8]
   2d678:	ldr	r3, [sp, #12]
   2d67c:	str	r0, [sp, #8]
   2d680:	mov	r0, r2
   2d684:	str	r1, [sp, #4]
   2d688:	mov	r1, r3
   2d68c:	bl	2a934 <flatcc_builder_append_string_strn@@Base+0x5c>
   2d690:	ldr	r1, [sp, #8]
   2d694:	str	r0, [sp]
   2d698:	mov	r0, r1
   2d69c:	ldr	r1, [sp, #4]
   2d6a0:	ldr	r2, [sp]
   2d6a4:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   2d6a8:	mov	sp, fp
   2d6ac:	pop	{fp, pc}

0002d6b0 <flatcc_builder_end_string@@Base>:
   2d6b0:	push	{fp, lr}
   2d6b4:	mov	fp, sp
   2d6b8:	sub	sp, sp, #16
   2d6bc:	str	r0, [sp, #8]
   2d6c0:	ldr	r0, [sp, #8]
   2d6c4:	ldr	r0, [r0, #32]
   2d6c8:	ldrh	r0, [r0, #14]
   2d6cc:	cmp	r0, #6
   2d6d0:	bne	2d6d8 <flatcc_builder_end_string@@Base+0x28>
   2d6d4:	b	2d6f8 <flatcc_builder_end_string@@Base+0x48>
   2d6d8:	ldr	r0, [pc, #168]	; 2d788 <flatcc_builder_end_string@@Base+0xd8>
   2d6dc:	add	r0, pc, r0
   2d6e0:	ldr	r1, [pc, #164]	; 2d78c <flatcc_builder_end_string@@Base+0xdc>
   2d6e4:	add	r1, pc, r1
   2d6e8:	ldr	r2, [pc, #160]	; 2d790 <flatcc_builder_end_string@@Base+0xe0>
   2d6ec:	add	r3, pc, r2
   2d6f0:	movw	r2, #1732	; 0x6c4
   2d6f4:	bl	12e68 <__assert_fail@plt>
   2d6f8:	ldr	r0, [sp, #8]
   2d6fc:	ldr	r0, [r0, #32]
   2d700:	ldr	r0, [r0, #20]
   2d704:	ldr	r1, [sp, #8]
   2d708:	ldr	r1, [r1, #20]
   2d70c:	cmp	r0, r1
   2d710:	bne	2d718 <flatcc_builder_end_string@@Base+0x68>
   2d714:	b	2d738 <flatcc_builder_end_string@@Base+0x88>
   2d718:	ldr	r0, [pc, #116]	; 2d794 <flatcc_builder_end_string@@Base+0xe4>
   2d71c:	add	r0, pc, r0
   2d720:	ldr	r1, [pc, #112]	; 2d798 <flatcc_builder_end_string@@Base+0xe8>
   2d724:	add	r1, pc, r1
   2d728:	ldr	r2, [pc, #108]	; 2d79c <flatcc_builder_end_string@@Base+0xec>
   2d72c:	add	r3, pc, r2
   2d730:	movw	r2, #1733	; 0x6c5
   2d734:	bl	12e68 <__assert_fail@plt>
   2d738:	ldr	r0, [sp, #8]
   2d73c:	ldr	r1, [sp, #8]
   2d740:	ldr	r1, [r1, #16]
   2d744:	ldr	r2, [sp, #8]
   2d748:	ldr	r2, [r2, #20]
   2d74c:	bl	2d4a8 <flatcc_builder_create_string@@Base>
   2d750:	str	r0, [sp, #4]
   2d754:	movw	r1, #0
   2d758:	cmp	r1, r0
   2d75c:	bne	2d76c <flatcc_builder_end_string@@Base+0xbc>
   2d760:	movw	r0, #0
   2d764:	str	r0, [fp, #-4]
   2d768:	b	2d77c <flatcc_builder_end_string@@Base+0xcc>
   2d76c:	ldr	r0, [sp, #8]
   2d770:	bl	29ef0 <flatcc_builder_end_buffer@@Base+0x170>
   2d774:	ldr	r0, [sp, #4]
   2d778:	str	r0, [fp, #-4]
   2d77c:	ldr	r0, [fp, #-4]
   2d780:	mov	sp, fp
   2d784:	pop	{fp, pc}
   2d788:	andeq	r9, r0, lr, lsl #14
   2d78c:	andeq	r9, r0, sl, asr #3
   2d790:			; <UNDEFINED> instruction: 0x00009fb1
   2d794:	andeq	r9, r0, r4, asr #31
   2d798:	andeq	r9, r0, sl, lsl #3
   2d79c:	andeq	r9, r0, r1, ror pc

0002d7a0 <flatcc_builder_string_edit@@Base>:
   2d7a0:	sub	sp, sp, #4
   2d7a4:	str	r0, [sp]
   2d7a8:	ldr	r0, [sp]
   2d7ac:	ldr	r0, [r0, #16]
   2d7b0:	add	sp, sp, #4
   2d7b4:	bx	lr

0002d7b8 <flatcc_builder_string_len@@Base>:
   2d7b8:	sub	sp, sp, #4
   2d7bc:	str	r0, [sp]
   2d7c0:	ldr	r0, [sp]
   2d7c4:	ldr	r0, [r0, #32]
   2d7c8:	ldr	r0, [r0, #20]
   2d7cc:	add	sp, sp, #4
   2d7d0:	bx	lr
   2d7d4:	push	{fp, lr}
   2d7d8:	mov	fp, sp
   2d7dc:	sub	sp, sp, #24
   2d7e0:	str	r0, [fp, #-8]
   2d7e4:	str	r1, [sp, #12]
   2d7e8:	strh	r2, [sp, #10]
   2d7ec:	strh	r3, [sp, #8]
   2d7f0:	ldr	r0, [fp, #-8]
   2d7f4:	ldr	r0, [r0, #20]
   2d7f8:	ldrh	r1, [sp, #10]
   2d7fc:	add	r0, r0, r1
   2d800:	sub	r0, r0, #1
   2d804:	ldrh	r1, [sp, #10]
   2d808:	sub	r1, r1, #1
   2d80c:	mvn	r2, #0
   2d810:	eor	r1, r1, r2
   2d814:	and	r0, r0, r1
   2d818:	str	r0, [sp, #4]
   2d81c:	ldr	r0, [sp, #4]
   2d820:	ldr	r1, [sp, #12]
   2d824:	add	r0, r0, r1
   2d828:	ldr	r1, [fp, #-8]
   2d82c:	str	r0, [r1, #20]
   2d830:	ldr	r1, [fp, #-8]
   2d834:	ldr	r1, [r1, #24]
   2d838:	cmp	r0, r1
   2d83c:	bcc	2d870 <flatcc_builder_string_len@@Base+0xb8>
   2d840:	ldr	r0, [fp, #-8]
   2d844:	ldr	r1, [fp, #-8]
   2d848:	ldr	r1, [r1, #20]
   2d84c:	add	r1, r1, #1
   2d850:	movw	r2, #65532	; 0xfffc
   2d854:	bl	2e218 <flatcc_builder_get_emit_context@@Base+0x40>
   2d858:	cmp	r0, #0
   2d85c:	beq	2d86c <flatcc_builder_string_len@@Base+0xb4>
   2d860:	movw	r0, #0
   2d864:	str	r0, [fp, #-4]
   2d868:	b	2d8c4 <flatcc_builder_string_len@@Base+0x10c>
   2d86c:	b	2d870 <flatcc_builder_string_len@@Base+0xb8>
   2d870:	ldr	r0, [sp, #4]
   2d874:	add	r0, r0, #4
   2d878:	ldr	r1, [fp, #-8]
   2d87c:	ldr	r1, [r1, #4]
   2d880:	ldrh	r2, [sp, #8]
   2d884:	add	r1, r1, r2, lsl #1
   2d888:	strh	r0, [r1]
   2d88c:	ldrh	r0, [sp, #8]
   2d890:	ldr	r1, [fp, #-8]
   2d894:	ldrh	r1, [r1, #8]
   2d898:	cmp	r0, r1
   2d89c:	blt	2d8b0 <flatcc_builder_string_len@@Base+0xf8>
   2d8a0:	ldrh	r0, [sp, #8]
   2d8a4:	add	r0, r0, #1
   2d8a8:	ldr	r1, [fp, #-8]
   2d8ac:	strh	r0, [r1, #8]
   2d8b0:	ldr	r0, [fp, #-8]
   2d8b4:	ldr	r0, [r0, #16]
   2d8b8:	ldr	r1, [sp, #4]
   2d8bc:	add	r0, r0, r1
   2d8c0:	str	r0, [fp, #-4]
   2d8c4:	ldr	r0, [fp, #-4]
   2d8c8:	mov	sp, fp
   2d8cc:	pop	{fp, pc}

0002d8d0 <flatcc_builder_table_edit@@Base>:
   2d8d0:	push	{fp, lr}
   2d8d4:	mov	fp, sp
   2d8d8:	sub	sp, sp, #8
   2d8dc:	str	r0, [sp, #4]
   2d8e0:	str	r1, [sp]
   2d8e4:	ldr	r0, [sp, #4]
   2d8e8:	ldr	r0, [r0, #32]
   2d8ec:	ldrh	r0, [r0, #14]
   2d8f0:	cmp	r0, #3
   2d8f4:	bne	2d8fc <flatcc_builder_table_edit@@Base+0x2c>
   2d8f8:	b	2d91c <flatcc_builder_table_edit@@Base+0x4c>
   2d8fc:	ldr	r0, [pc, #68]	; 2d948 <flatcc_builder_table_edit@@Base+0x78>
   2d900:	add	r0, pc, r0
   2d904:	ldr	r1, [pc, #64]	; 2d94c <flatcc_builder_table_edit@@Base+0x7c>
   2d908:	add	r1, pc, r1
   2d90c:	ldr	r2, [pc, #60]	; 2d950 <flatcc_builder_table_edit@@Base+0x80>
   2d910:	add	r3, pc, r2
   2d914:	movw	r2, #1794	; 0x702
   2d918:	bl	12e68 <__assert_fail@plt>
   2d91c:	ldr	r0, [sp, #4]
   2d920:	ldr	r0, [r0, #16]
   2d924:	ldr	r1, [sp, #4]
   2d928:	ldr	r1, [r1, #20]
   2d92c:	add	r0, r0, r1
   2d930:	ldr	r1, [sp]
   2d934:	movw	r2, #0
   2d938:	sub	r1, r2, r1
   2d93c:	add	r0, r0, r1
   2d940:	mov	sp, fp
   2d944:	pop	{fp, pc}
   2d948:	ldrdeq	r9, [r0], -sl
   2d94c:	andeq	r8, r0, r6, lsr #31
   2d950:	andeq	r9, r0, r2, lsl #29

0002d954 <flatcc_builder_table_add_copy@@Base>:
   2d954:	push	{fp, lr}
   2d958:	mov	fp, sp
   2d95c:	sub	sp, sp, #24
   2d960:	ldr	ip, [fp, #8]
   2d964:	str	r0, [fp, #-4]
   2d968:	str	r1, [fp, #-8]
   2d96c:	str	r2, [sp, #12]
   2d970:	str	r3, [sp, #8]
   2d974:	strh	ip, [sp, #6]
   2d978:	ldr	r0, [fp, #-4]
   2d97c:	ldr	r1, [fp, #-8]
   2d980:	ldr	r2, [sp, #8]
   2d984:	ldrh	r3, [sp, #6]
   2d988:	bl	2ca28 <flatcc_builder_table_add@@Base>
   2d98c:	str	r0, [sp]
   2d990:	movw	r1, #0
   2d994:	cmp	r0, r1
   2d998:	beq	2d9ac <flatcc_builder_table_add_copy@@Base+0x58>
   2d99c:	ldr	r0, [sp]
   2d9a0:	ldr	r1, [sp, #12]
   2d9a4:	ldr	r2, [sp, #8]
   2d9a8:	bl	12db4 <memcpy@plt>
   2d9ac:	ldr	r0, [sp]
   2d9b0:	mov	sp, fp
   2d9b4:	pop	{fp, pc}
   2d9b8:	push	{fp, lr}
   2d9bc:	mov	fp, sp
   2d9c0:	sub	sp, sp, #16
   2d9c4:	str	r0, [sp, #8]
   2d9c8:	strh	r1, [sp, #6]
   2d9cc:	ldr	r0, [sp, #8]
   2d9d0:	ldr	r0, [r0, #20]
   2d9d4:	add	r0, r0, #4
   2d9d8:	sub	r0, r0, #1
   2d9dc:	mvn	r1, #3
   2d9e0:	and	r0, r0, r1
   2d9e4:	str	r0, [sp]
   2d9e8:	ldr	r0, [sp]
   2d9ec:	add	r0, r0, #4
   2d9f0:	ldr	r1, [sp, #8]
   2d9f4:	str	r0, [r1, #20]
   2d9f8:	ldr	r1, [sp, #8]
   2d9fc:	ldr	r1, [r1, #24]
   2da00:	cmp	r0, r1
   2da04:	bls	2da34 <flatcc_builder_table_add_copy@@Base+0xe0>
   2da08:	ldr	r0, [sp, #8]
   2da0c:	ldr	r1, [sp, #8]
   2da10:	ldr	r1, [r1, #20]
   2da14:	movw	r2, #65532	; 0xfffc
   2da18:	bl	2e218 <flatcc_builder_get_emit_context@@Base+0x40>
   2da1c:	cmp	r0, #0
   2da20:	beq	2da30 <flatcc_builder_table_add_copy@@Base+0xdc>
   2da24:	movw	r0, #0
   2da28:	str	r0, [fp, #-4]
   2da2c:	b	2daa0 <flatcc_builder_table_add_copy@@Base+0x14c>
   2da30:	b	2da34 <flatcc_builder_table_add_copy@@Base+0xe0>
   2da34:	ldr	r0, [sp]
   2da38:	add	r0, r0, #4
   2da3c:	ldr	r1, [sp, #8]
   2da40:	ldr	r1, [r1, #4]
   2da44:	ldrh	r2, [sp, #6]
   2da48:	add	r1, r1, r2, lsl #1
   2da4c:	strh	r0, [r1]
   2da50:	ldrh	r0, [sp, #6]
   2da54:	ldr	r1, [sp, #8]
   2da58:	ldrh	r1, [r1, #8]
   2da5c:	cmp	r0, r1
   2da60:	blt	2da74 <flatcc_builder_table_add_copy@@Base+0x120>
   2da64:	ldrh	r0, [sp, #6]
   2da68:	add	r0, r0, #1
   2da6c:	ldr	r1, [sp, #8]
   2da70:	strh	r0, [r1, #8]
   2da74:	ldr	r0, [sp]
   2da78:	ldr	r1, [sp, #8]
   2da7c:	ldr	r2, [r1]
   2da80:	add	r3, r2, #2
   2da84:	str	r3, [r1]
   2da88:	strh	r0, [r2]
   2da8c:	ldr	r0, [sp, #8]
   2da90:	ldr	r0, [r0, #16]
   2da94:	ldr	r1, [sp]
   2da98:	add	r0, r0, r1
   2da9c:	str	r0, [fp, #-4]
   2daa0:	ldr	r0, [fp, #-4]
   2daa4:	mov	sp, fp
   2daa8:	pop	{fp, pc}

0002daac <flatcc_builder_push_buffer_alignment@@Base>:
   2daac:	sub	sp, sp, #8
   2dab0:	str	r0, [sp, #4]
   2dab4:	ldr	r0, [sp, #4]
   2dab8:	ldrh	r0, [r0, #128]	; 0x80
   2dabc:	strh	r0, [sp, #2]
   2dac0:	ldr	r0, [sp, #4]
   2dac4:	movw	r1, #4
   2dac8:	strh	r1, [r0, #128]	; 0x80
   2dacc:	ldrh	r0, [sp, #2]
   2dad0:	add	sp, sp, #8
   2dad4:	bx	lr

0002dad8 <flatcc_builder_pop_buffer_alignment@@Base>:
   2dad8:	push	{fp, lr}
   2dadc:	mov	fp, sp
   2dae0:	sub	sp, sp, #8
   2dae4:	str	r0, [sp, #4]
   2dae8:	strh	r1, [sp, #2]
   2daec:	ldr	r0, [sp, #4]
   2daf0:	ldrh	r1, [sp, #2]
   2daf4:	bl	298bc <flatcc_builder_create_buffer@@Base+0x3a8>
   2daf8:	mov	sp, fp
   2dafc:	pop	{fp, pc}

0002db00 <flatcc_builder_get_buffer_alignment@@Base>:
   2db00:	sub	sp, sp, #4
   2db04:	str	r0, [sp]
   2db08:	ldr	r0, [sp]
   2db0c:	ldrh	r0, [r0, #128]	; 0x80
   2db10:	add	sp, sp, #4
   2db14:	bx	lr

0002db18 <flatcc_builder_set_vtable_clustering@@Base>:
   2db18:	sub	sp, sp, #8
   2db1c:	str	r0, [sp, #4]
   2db20:	str	r1, [sp]
   2db24:	ldr	r0, [sp]
   2db28:	cmp	r0, #0
   2db2c:	movw	r0, #0
   2db30:	movne	r0, #1
   2db34:	mvn	r1, #0
   2db38:	eor	r0, r0, r1
   2db3c:	and	r0, r0, #1
   2db40:	ldr	r1, [sp, #4]
   2db44:	str	r0, [r1, #180]	; 0xb4
   2db48:	add	sp, sp, #8
   2db4c:	bx	lr

0002db50 <flatcc_builder_set_block_align@@Base>:
   2db50:	sub	sp, sp, #8
   2db54:	str	r0, [sp, #4]
   2db58:	strh	r1, [sp, #2]
   2db5c:	ldrh	r0, [sp, #2]
   2db60:	ldr	r1, [sp, #4]
   2db64:	strh	r0, [r1, #132]	; 0x84
   2db68:	add	sp, sp, #8
   2db6c:	bx	lr

0002db70 <flatcc_builder_get_level@@Base>:
   2db70:	sub	sp, sp, #4
   2db74:	str	r0, [sp]
   2db78:	ldr	r0, [sp]
   2db7c:	ldr	r0, [r0, #156]	; 0x9c
   2db80:	add	sp, sp, #4
   2db84:	bx	lr

0002db88 <flatcc_builder_set_max_level@@Base>:
   2db88:	sub	sp, sp, #8
   2db8c:	str	r0, [sp, #4]
   2db90:	str	r1, [sp]
   2db94:	ldr	r0, [sp]
   2db98:	ldr	r1, [sp, #4]
   2db9c:	str	r0, [r1, #176]	; 0xb0
   2dba0:	ldr	r0, [sp, #4]
   2dba4:	ldr	r0, [r0, #160]	; 0xa0
   2dba8:	ldr	r1, [sp, #4]
   2dbac:	ldr	r1, [r1, #176]	; 0xb0
   2dbb0:	cmp	r0, r1
   2dbb4:	bge	2dbc8 <flatcc_builder_set_max_level@@Base+0x40>
   2dbb8:	ldr	r0, [sp, #4]
   2dbbc:	ldr	r0, [r0, #176]	; 0xb0
   2dbc0:	ldr	r1, [sp, #4]
   2dbc4:	str	r0, [r1, #160]	; 0xa0
   2dbc8:	add	sp, sp, #8
   2dbcc:	bx	lr

0002dbd0 <flatcc_builder_get_buffer_size@@Base>:
   2dbd0:	sub	sp, sp, #4
   2dbd4:	str	r0, [sp]
   2dbd8:	ldr	r0, [sp]
   2dbdc:	ldr	r0, [r0, #140]	; 0x8c
   2dbe0:	ldr	r1, [sp]
   2dbe4:	ldr	r1, [r1, #136]	; 0x88
   2dbe8:	sub	r0, r0, r1
   2dbec:	add	sp, sp, #4
   2dbf0:	bx	lr

0002dbf4 <flatcc_builder_get_buffer_start@@Base>:
   2dbf4:	sub	sp, sp, #4
   2dbf8:	str	r0, [sp]
   2dbfc:	ldr	r0, [sp]
   2dc00:	ldr	r0, [r0, #136]	; 0x88
   2dc04:	add	sp, sp, #4
   2dc08:	bx	lr

0002dc0c <flatcc_builder_get_buffer_end@@Base>:
   2dc0c:	sub	sp, sp, #4
   2dc10:	str	r0, [sp]
   2dc14:	ldr	r0, [sp]
   2dc18:	ldr	r0, [r0, #140]	; 0x8c
   2dc1c:	add	sp, sp, #4
   2dc20:	bx	lr

0002dc24 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2dc24:	sub	sp, sp, #8
   2dc28:	str	r0, [sp, #4]
   2dc2c:	str	r1, [sp]
   2dc30:	ldr	r0, [sp]
   2dc34:	ldr	r1, [sp, #4]
   2dc38:	str	r0, [r1, #172]	; 0xac
   2dc3c:	add	sp, sp, #8
   2dc40:	bx	lr

0002dc44 <flatcc_builder_set_identifier@@Base>:
   2dc44:	sub	sp, sp, #16
   2dc48:	str	r0, [sp, #12]
   2dc4c:	str	r1, [sp, #8]
   2dc50:	ldr	r0, [sp, #12]
   2dc54:	add	r0, r0, #168	; 0xa8
   2dc58:	ldr	r1, [sp, #8]
   2dc5c:	movw	r2, #0
   2dc60:	cmp	r1, r2
   2dc64:	str	r0, [sp, #4]
   2dc68:	beq	2dc78 <flatcc_builder_set_identifier@@Base+0x34>
   2dc6c:	ldr	r0, [sp, #8]
   2dc70:	str	r0, [sp]
   2dc74:	b	2dc88 <flatcc_builder_set_identifier@@Base+0x44>
   2dc78:	ldr	r0, [pc, #56]	; 2dcb8 <flatcc_builder_set_identifier@@Base+0x74>
   2dc7c:	ldr	r0, [pc, r0]
   2dc80:	str	r0, [sp]
   2dc84:	b	2dc88 <flatcc_builder_set_identifier@@Base+0x44>
   2dc88:	ldr	r0, [sp]
   2dc8c:	ldrb	r1, [r0]
   2dc90:	ldr	r2, [sp, #4]
   2dc94:	strb	r1, [r2]
   2dc98:	ldrb	r1, [r0, #1]
   2dc9c:	strb	r1, [r2, #1]
   2dca0:	ldrb	r1, [r0, #2]
   2dca4:	strb	r1, [r2, #2]
   2dca8:	ldrb	r0, [r0, #3]
   2dcac:	strb	r0, [r2, #3]
   2dcb0:	add	sp, sp, #16
   2dcb4:	bx	lr
   2dcb8:	ldrdeq	fp, [r1], -r4

0002dcbc <flatcc_builder_get_type@@Base>:
   2dcbc:	sub	sp, sp, #8
   2dcc0:	str	r0, [sp, #4]
   2dcc4:	ldr	r0, [sp, #4]
   2dcc8:	ldr	r0, [r0, #32]
   2dccc:	movw	r1, #0
   2dcd0:	cmp	r0, r1
   2dcd4:	beq	2dcec <flatcc_builder_get_type@@Base+0x30>
   2dcd8:	ldr	r0, [sp, #4]
   2dcdc:	ldr	r0, [r0, #32]
   2dce0:	ldrh	r0, [r0, #14]
   2dce4:	str	r0, [sp]
   2dce8:	b	2dcf8 <flatcc_builder_get_type@@Base+0x3c>
   2dcec:	movw	r0, #0
   2dcf0:	str	r0, [sp]
   2dcf4:	b	2dcf8 <flatcc_builder_get_type@@Base+0x3c>
   2dcf8:	ldr	r0, [sp]
   2dcfc:	add	sp, sp, #8
   2dd00:	bx	lr

0002dd04 <flatcc_builder_get_type_at@@Base>:
   2dd04:	sub	sp, sp, #12
   2dd08:	str	r0, [sp, #4]
   2dd0c:	str	r1, [sp]
   2dd10:	ldr	r0, [sp]
   2dd14:	cmp	r0, #1
   2dd18:	blt	2dd30 <flatcc_builder_get_type_at@@Base+0x2c>
   2dd1c:	ldr	r0, [sp]
   2dd20:	ldr	r1, [sp, #4]
   2dd24:	ldr	r1, [r1, #156]	; 0x9c
   2dd28:	cmp	r0, r1
   2dd2c:	ble	2dd3c <flatcc_builder_get_type_at@@Base+0x38>
   2dd30:	movw	r0, #0
   2dd34:	str	r0, [sp, #8]
   2dd38:	b	2dd68 <flatcc_builder_get_type_at@@Base+0x64>
   2dd3c:	ldr	r0, [sp, #4]
   2dd40:	ldr	r0, [r0, #32]
   2dd44:	ldr	r1, [sp]
   2dd48:	ldr	r2, [sp, #4]
   2dd4c:	ldr	r2, [r2, #156]	; 0x9c
   2dd50:	sub	r1, r1, r2
   2dd54:	movw	r2, #36	; 0x24
   2dd58:	mul	r1, r1, r2
   2dd5c:	add	r0, r0, r1
   2dd60:	ldrh	r0, [r0, #14]
   2dd64:	str	r0, [sp, #8]
   2dd68:	ldr	r0, [sp, #8]
   2dd6c:	add	sp, sp, #12
   2dd70:	bx	lr

0002dd74 <flatcc_builder_get_direct_buffer@@Base>:
   2dd74:	push	{fp, lr}
   2dd78:	mov	fp, sp
   2dd7c:	sub	sp, sp, #16
   2dd80:	str	r0, [sp, #8]
   2dd84:	str	r1, [sp, #4]
   2dd88:	ldr	r0, [sp, #8]
   2dd8c:	ldr	r0, [r0, #184]	; 0xb8
   2dd90:	cmp	r0, #0
   2dd94:	beq	2ddb0 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   2dd98:	ldr	r0, [sp, #8]
   2dd9c:	add	r0, r0, #188	; 0xbc
   2dda0:	ldr	r1, [sp, #4]
   2dda4:	bl	2dde4 <flatcc_builder_get_direct_buffer@@Base+0x70>
   2dda8:	str	r0, [fp, #-4]
   2ddac:	b	2ddd8 <flatcc_builder_get_direct_buffer@@Base+0x64>
   2ddb0:	ldr	r0, [sp, #4]
   2ddb4:	movw	r1, #0
   2ddb8:	cmp	r0, r1
   2ddbc:	beq	2ddcc <flatcc_builder_get_direct_buffer@@Base+0x58>
   2ddc0:	ldr	r0, [sp, #4]
   2ddc4:	movw	r1, #0
   2ddc8:	str	r1, [r0]
   2ddcc:	b	2ddd0 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   2ddd0:	movw	r0, #0
   2ddd4:	str	r0, [fp, #-4]
   2ddd8:	ldr	r0, [fp, #-4]
   2dddc:	mov	sp, fp
   2dde0:	pop	{fp, pc}
   2dde4:	sub	sp, sp, #12
   2dde8:	str	r0, [sp, #4]
   2ddec:	str	r1, [sp]
   2ddf0:	ldr	r0, [sp, #4]
   2ddf4:	ldr	r0, [r0]
   2ddf8:	ldr	r1, [sp, #4]
   2ddfc:	ldr	r1, [r1, #4]
   2de00:	cmp	r0, r1
   2de04:	bne	2de38 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   2de08:	ldr	r0, [sp]
   2de0c:	movw	r1, #0
   2de10:	cmp	r0, r1
   2de14:	beq	2de28 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   2de18:	ldr	r0, [sp, #4]
   2de1c:	ldr	r0, [r0, #24]
   2de20:	ldr	r1, [sp]
   2de24:	str	r0, [r1]
   2de28:	ldr	r0, [sp, #4]
   2de2c:	ldr	r0, [r0, #8]
   2de30:	str	r0, [sp, #8]
   2de34:	b	2de5c <flatcc_builder_get_direct_buffer@@Base+0xe8>
   2de38:	ldr	r0, [sp]
   2de3c:	movw	r1, #0
   2de40:	cmp	r0, r1
   2de44:	beq	2de54 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   2de48:	ldr	r0, [sp]
   2de4c:	movw	r1, #0
   2de50:	str	r1, [r0]
   2de54:	movw	r0, #0
   2de58:	str	r0, [sp, #8]
   2de5c:	ldr	r0, [sp, #8]
   2de60:	add	sp, sp, #12
   2de64:	bx	lr

0002de68 <flatcc_builder_copy_buffer@@Base>:
   2de68:	push	{fp, lr}
   2de6c:	mov	fp, sp
   2de70:	sub	sp, sp, #16
   2de74:	str	r0, [sp, #8]
   2de78:	str	r1, [sp, #4]
   2de7c:	str	r2, [sp]
   2de80:	ldr	r0, [sp, #8]
   2de84:	ldr	r0, [r0, #184]	; 0xb8
   2de88:	cmp	r0, #0
   2de8c:	bne	2de9c <flatcc_builder_copy_buffer@@Base+0x34>
   2de90:	movw	r0, #0
   2de94:	str	r0, [fp, #-4]
   2de98:	b	2def0 <flatcc_builder_copy_buffer@@Base+0x88>
   2de9c:	ldr	r0, [sp, #8]
   2dea0:	add	r0, r0, #188	; 0xbc
   2dea4:	ldr	r1, [sp, #4]
   2dea8:	ldr	r2, [sp]
   2deac:	bl	2eb5c <flatcc_emitter_copy_buffer@@Base>
   2deb0:	str	r0, [sp, #4]
   2deb4:	ldr	r0, [sp, #4]
   2deb8:	movw	r1, #0
   2debc:	cmp	r0, r1
   2dec0:	beq	2dec8 <flatcc_builder_copy_buffer@@Base+0x60>
   2dec4:	b	2dee8 <flatcc_builder_copy_buffer@@Base+0x80>
   2dec8:	ldr	r0, [pc, #44]	; 2defc <flatcc_builder_copy_buffer@@Base+0x94>
   2decc:	add	r0, pc, r0
   2ded0:	ldr	r1, [pc, #40]	; 2df00 <flatcc_builder_copy_buffer@@Base+0x98>
   2ded4:	add	r1, pc, r1
   2ded8:	ldr	r2, [pc, #36]	; 2df04 <flatcc_builder_copy_buffer@@Base+0x9c>
   2dedc:	add	r3, pc, r2
   2dee0:	movw	r2, #1926	; 0x786
   2dee4:	bl	12e68 <__assert_fail@plt>
   2dee8:	ldr	r0, [sp, #4]
   2deec:	str	r0, [fp, #-4]
   2def0:	ldr	r0, [fp, #-4]
   2def4:	mov	sp, fp
   2def8:	pop	{fp, pc}
   2defc:	andeq	r5, r0, ip, ror #13
   2df00:	ldrdeq	r8, [r0], -sl
   2df04:	andeq	r9, r0, r1, asr #18

0002df08 <flatcc_builder_finalize_buffer@@Base>:
   2df08:	push	{fp, lr}
   2df0c:	mov	fp, sp
   2df10:	sub	sp, sp, #16
   2df14:	str	r0, [fp, #-4]
   2df18:	str	r1, [sp, #8]
   2df1c:	ldr	r0, [fp, #-4]
   2df20:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   2df24:	str	r0, [sp]
   2df28:	ldr	r0, [sp, #8]
   2df2c:	movw	r1, #0
   2df30:	cmp	r0, r1
   2df34:	beq	2df44 <flatcc_builder_finalize_buffer@@Base+0x3c>
   2df38:	ldr	r0, [sp]
   2df3c:	ldr	r1, [sp, #8]
   2df40:	str	r0, [r1]
   2df44:	ldr	r0, [sp]
   2df48:	bl	12de4 <malloc@plt>
   2df4c:	str	r0, [sp, #4]
   2df50:	ldr	r0, [sp, #4]
   2df54:	movw	lr, #0
   2df58:	cmp	r0, lr
   2df5c:	bne	2df80 <flatcc_builder_finalize_buffer@@Base+0x78>
   2df60:	ldr	r0, [pc, #144]	; 2dff8 <flatcc_builder_finalize_buffer@@Base+0xf0>
   2df64:	add	r0, pc, r0
   2df68:	ldr	r1, [pc, #140]	; 2dffc <flatcc_builder_finalize_buffer@@Base+0xf4>
   2df6c:	add	r1, pc, r1
   2df70:	ldr	r2, [pc, #136]	; 2e000 <flatcc_builder_finalize_buffer@@Base+0xf8>
   2df74:	add	r3, pc, r2
   2df78:	movw	r2, #1944	; 0x798
   2df7c:	bl	12e68 <__assert_fail@plt>
   2df80:	ldr	r0, [fp, #-4]
   2df84:	ldr	r1, [sp, #4]
   2df88:	ldr	r2, [sp]
   2df8c:	bl	2de68 <flatcc_builder_copy_buffer@@Base>
   2df90:	movw	r1, #0
   2df94:	cmp	r0, r1
   2df98:	bne	2dfbc <flatcc_builder_finalize_buffer@@Base+0xb4>
   2df9c:	ldr	r0, [pc, #96]	; 2e004 <flatcc_builder_finalize_buffer@@Base+0xfc>
   2dfa0:	add	r0, pc, r0
   2dfa4:	ldr	r1, [pc, #92]	; 2e008 <flatcc_builder_finalize_buffer@@Base+0x100>
   2dfa8:	add	r1, pc, r1
   2dfac:	ldr	r2, [pc, #88]	; 2e00c <flatcc_builder_finalize_buffer@@Base+0x104>
   2dfb0:	add	r3, pc, r2
   2dfb4:	movw	r2, #1948	; 0x79c
   2dfb8:	bl	12e68 <__assert_fail@plt>
   2dfbc:	b	2dfc0 <flatcc_builder_finalize_buffer@@Base+0xb8>
   2dfc0:	ldr	r0, [sp, #4]
   2dfc4:	movw	r1, #0
   2dfc8:	cmp	r0, r1
   2dfcc:	bne	2dfec <flatcc_builder_finalize_buffer@@Base+0xe4>
   2dfd0:	ldr	r0, [sp, #8]
   2dfd4:	movw	r1, #0
   2dfd8:	cmp	r0, r1
   2dfdc:	beq	2dfec <flatcc_builder_finalize_buffer@@Base+0xe4>
   2dfe0:	ldr	r0, [sp, #8]
   2dfe4:	movw	r1, #0
   2dfe8:	str	r1, [r0]
   2dfec:	ldr	r0, [sp, #4]
   2dff0:	mov	sp, fp
   2dff4:	pop	{fp, pc}
   2dff8:	andeq	r9, r0, r7, lsl #22
   2dffc:	andeq	r8, r0, r2, asr #18
   2e000:	andeq	r9, r0, lr, ror #17
   2e004:	andeq	r9, r0, fp, asr #21
   2e008:	andeq	r8, r0, r6, lsl #18
   2e00c:			; <UNDEFINED> instruction: 0x000098b2

0002e010 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2e010:	push	{fp, lr}
   2e014:	mov	fp, sp
   2e018:	sub	sp, sp, #24
   2e01c:	str	r0, [fp, #-4]
   2e020:	str	r1, [fp, #-8]
   2e024:	ldr	r0, [fp, #-4]
   2e028:	bl	2dbd0 <flatcc_builder_get_buffer_size@@Base>
   2e02c:	str	r0, [sp, #4]
   2e030:	ldr	r0, [fp, #-8]
   2e034:	movw	r1, #0
   2e038:	cmp	r0, r1
   2e03c:	beq	2e04c <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   2e040:	ldr	r0, [sp, #4]
   2e044:	ldr	r1, [fp, #-8]
   2e048:	str	r0, [r1]
   2e04c:	ldr	r0, [fp, #-4]
   2e050:	bl	2db00 <flatcc_builder_get_buffer_alignment@@Base>
   2e054:	uxth	r0, r0
   2e058:	str	r0, [sp, #8]
   2e05c:	ldr	r0, [sp, #4]
   2e060:	ldr	lr, [sp, #8]
   2e064:	add	r0, r0, lr
   2e068:	sub	r0, r0, #1
   2e06c:	ldr	lr, [sp, #8]
   2e070:	sub	lr, lr, #1
   2e074:	mvn	r1, #0
   2e078:	eor	r1, lr, r1
   2e07c:	and	r0, r0, r1
   2e080:	str	r0, [sp, #4]
   2e084:	ldr	r0, [sp, #8]
   2e088:	ldr	r1, [sp, #4]
   2e08c:	bl	2e114 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   2e090:	str	r0, [sp, #12]
   2e094:	ldr	r0, [sp, #12]
   2e098:	movw	r1, #0
   2e09c:	cmp	r0, r1
   2e0a0:	bne	2e0a8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   2e0a4:	b	2e0dc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2e0a8:	ldr	r0, [fp, #-4]
   2e0ac:	ldr	r1, [sp, #12]
   2e0b0:	ldr	r2, [sp, #4]
   2e0b4:	bl	2de68 <flatcc_builder_copy_buffer@@Base>
   2e0b8:	movw	r1, #0
   2e0bc:	cmp	r0, r1
   2e0c0:	bne	2e0d8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   2e0c4:	ldr	r0, [sp, #12]
   2e0c8:	bl	12da8 <free@plt>
   2e0cc:	movw	r0, #0
   2e0d0:	str	r0, [sp, #12]
   2e0d4:	b	2e0dc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2e0d8:	b	2e0dc <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   2e0dc:	ldr	r0, [sp, #12]
   2e0e0:	movw	r1, #0
   2e0e4:	cmp	r0, r1
   2e0e8:	bne	2e108 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   2e0ec:	ldr	r0, [fp, #-8]
   2e0f0:	movw	r1, #0
   2e0f4:	cmp	r0, r1
   2e0f8:	beq	2e108 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   2e0fc:	ldr	r0, [fp, #-8]
   2e100:	movw	r1, #0
   2e104:	str	r1, [r0]
   2e108:	ldr	r0, [sp, #12]
   2e10c:	mov	sp, fp
   2e110:	pop	{fp, pc}
   2e114:	push	{fp, lr}
   2e118:	mov	fp, sp
   2e11c:	sub	sp, sp, #16
   2e120:	str	r0, [fp, #-4]
   2e124:	str	r1, [sp, #8]
   2e128:	movw	r0, #0
   2e12c:	str	r0, [sp]
   2e130:	ldr	r0, [fp, #-4]
   2e134:	cmp	r0, #4
   2e138:	bcs	2e144 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   2e13c:	movw	r0, #4
   2e140:	str	r0, [fp, #-4]
   2e144:	ldr	r1, [fp, #-4]
   2e148:	ldr	r2, [sp, #8]
   2e14c:	mov	r0, sp
   2e150:	bl	12e20 <posix_memalign@plt>
   2e154:	str	r0, [sp, #4]
   2e158:	ldr	r0, [sp, #4]
   2e15c:	cmp	r0, #0
   2e160:	beq	2e184 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   2e164:	ldr	r0, [sp]
   2e168:	movw	r1, #0
   2e16c:	cmp	r0, r1
   2e170:	beq	2e184 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   2e174:	ldr	r0, [sp]
   2e178:	bl	12da8 <free@plt>
   2e17c:	movw	r0, #0
   2e180:	str	r0, [sp]
   2e184:	ldr	r0, [sp]
   2e188:	mov	sp, fp
   2e18c:	pop	{fp, pc}

0002e190 <flatcc_builder_aligned_alloc@@Base>:
   2e190:	push	{fp, lr}
   2e194:	mov	fp, sp
   2e198:	sub	sp, sp, #8
   2e19c:	str	r0, [sp, #4]
   2e1a0:	str	r1, [sp]
   2e1a4:	ldr	r0, [sp, #4]
   2e1a8:	ldr	r1, [sp]
   2e1ac:	bl	2e114 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   2e1b0:	mov	sp, fp
   2e1b4:	pop	{fp, pc}

0002e1b8 <flatcc_builder_aligned_free@@Base>:
   2e1b8:	push	{fp, lr}
   2e1bc:	mov	fp, sp
   2e1c0:	sub	sp, sp, #8
   2e1c4:	str	r0, [sp, #4]
   2e1c8:	ldr	r0, [sp, #4]
   2e1cc:	bl	12da8 <free@plt>
   2e1d0:	mov	sp, fp
   2e1d4:	pop	{fp, pc}

0002e1d8 <flatcc_builder_get_emit_context@@Base>:
   2e1d8:	sub	sp, sp, #4
   2e1dc:	str	r0, [sp]
   2e1e0:	ldr	r0, [sp]
   2e1e4:	ldr	r0, [r0, #36]	; 0x24
   2e1e8:	add	sp, sp, #4
   2e1ec:	bx	lr
   2e1f0:	sub	sp, sp, #8
   2e1f4:	str	r0, [sp, #4]
   2e1f8:	strh	r1, [sp, #2]
   2e1fc:	ldr	r0, [sp, #4]
   2e200:	ldr	r0, [r0, #140]	; 0x8c
   2e204:	ldrh	r1, [sp, #2]
   2e208:	sub	r1, r1, #1
   2e20c:	and	r0, r0, r1
   2e210:	add	sp, sp, #8
   2e214:	bx	lr
   2e218:	push	{fp, lr}
   2e21c:	mov	fp, sp
   2e220:	sub	sp, sp, #32
   2e224:	str	r0, [fp, #-8]
   2e228:	str	r1, [fp, #-12]
   2e22c:	str	r2, [sp, #16]
   2e230:	ldr	r0, [fp, #-8]
   2e234:	add	r0, r0, #52	; 0x34
   2e238:	add	r0, r0, #8
   2e23c:	str	r0, [sp, #12]
   2e240:	ldr	r0, [fp, #-8]
   2e244:	ldr	r0, [r0, #48]	; 0x30
   2e248:	ldr	r1, [fp, #-8]
   2e24c:	ldr	r1, [r1, #40]	; 0x28
   2e250:	ldr	r2, [sp, #12]
   2e254:	ldr	r3, [fp, #-8]
   2e258:	ldr	r3, [r3, #28]
   2e25c:	ldr	ip, [fp, #-12]
   2e260:	add	r3, r3, ip
   2e264:	str	r0, [sp, #8]
   2e268:	mov	r0, r1
   2e26c:	mov	r1, r2
   2e270:	mov	r2, r3
   2e274:	movw	r3, #1
   2e278:	str	r3, [sp, #4]
   2e27c:	ldr	ip, [sp, #4]
   2e280:	str	ip, [sp]
   2e284:	ldr	lr, [sp, #8]
   2e288:	blx	lr
   2e28c:	cmp	r0, #0
   2e290:	beq	2e2a0 <flatcc_builder_get_emit_context@@Base+0xc8>
   2e294:	mvn	r0, #0
   2e298:	str	r0, [fp, #-4]
   2e29c:	b	2e2b4 <flatcc_builder_get_emit_context@@Base+0xdc>
   2e2a0:	ldr	r0, [fp, #-8]
   2e2a4:	ldr	r1, [sp, #16]
   2e2a8:	bl	2a01c <flatcc_builder_start_struct@@Base+0x70>
   2e2ac:	movw	r0, #0
   2e2b0:	str	r0, [fp, #-4]
   2e2b4:	ldr	r0, [fp, #-4]
   2e2b8:	mov	sp, fp
   2e2bc:	pop	{fp, pc}
   2e2c0:	push	{fp, lr}
   2e2c4:	mov	fp, sp
   2e2c8:	sub	sp, sp, #32
   2e2cc:	str	r0, [fp, #-8]
   2e2d0:	ldr	r0, [fp, #-8]
   2e2d4:	add	r0, r0, #52	; 0x34
   2e2d8:	add	r0, r0, #40	; 0x28
   2e2dc:	str	r0, [fp, #-12]
   2e2e0:	ldr	r0, [fp, #-8]
   2e2e4:	ldr	r0, [r0, #124]	; 0x7c
   2e2e8:	cmp	r0, #0
   2e2ec:	bne	2e2f4 <flatcc_builder_get_emit_context@@Base+0x11c>
   2e2f0:	b	2e314 <flatcc_builder_get_emit_context@@Base+0x13c>
   2e2f4:	ldr	r0, [pc, #320]	; 2e43c <flatcc_builder_get_emit_context@@Base+0x264>
   2e2f8:	add	r0, pc, r0
   2e2fc:	ldr	r1, [pc, #316]	; 2e440 <flatcc_builder_get_emit_context@@Base+0x268>
   2e300:	add	r1, pc, r1
   2e304:	ldr	r2, [pc, #312]	; 2e444 <flatcc_builder_get_emit_context@@Base+0x26c>
   2e308:	add	r3, pc, r2
   2e30c:	movw	r2, #342	; 0x156
   2e310:	bl	12e68 <__assert_fail@plt>
   2e314:	ldr	r0, [fp, #-8]
   2e318:	ldr	r1, [fp, #-8]
   2e31c:	ldr	r2, [r1, #124]	; 0x7c
   2e320:	movw	r1, #6
   2e324:	movw	r3, #16
   2e328:	movw	ip, #0
   2e32c:	str	ip, [sp]
   2e330:	bl	28d44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2e334:	movw	r1, #0
   2e338:	cmp	r0, r1
   2e33c:	bne	2e34c <flatcc_builder_get_emit_context@@Base+0x174>
   2e340:	mvn	r0, #0
   2e344:	str	r0, [fp, #-4]
   2e348:	b	2e430 <flatcc_builder_get_emit_context@@Base+0x258>
   2e34c:	ldr	r0, [fp, #-8]
   2e350:	movw	r1, #16
   2e354:	str	r1, [r0, #124]	; 0x7c
   2e358:	movw	r0, #256	; 0x100
   2e35c:	str	r0, [sp, #16]
   2e360:	ldr	r0, [fp, #-8]
   2e364:	ldr	r0, [r0, #48]	; 0x30
   2e368:	ldr	r1, [fp, #-8]
   2e36c:	ldr	r1, [r1, #40]	; 0x28
   2e370:	ldr	r2, [fp, #-12]
   2e374:	ldr	r3, [sp, #16]
   2e378:	str	r0, [sp, #8]
   2e37c:	mov	r0, r1
   2e380:	mov	r1, r2
   2e384:	mov	r2, r3
   2e388:	movw	r3, #1
   2e38c:	movw	ip, #5
   2e390:	str	ip, [sp]
   2e394:	ldr	ip, [sp, #8]
   2e398:	blx	ip
   2e39c:	cmp	r0, #0
   2e3a0:	beq	2e3b0 <flatcc_builder_get_emit_context@@Base+0x1d8>
   2e3a4:	mvn	r0, #0
   2e3a8:	str	r0, [fp, #-4]
   2e3ac:	b	2e430 <flatcc_builder_get_emit_context@@Base+0x258>
   2e3b0:	b	2e3b4 <flatcc_builder_get_emit_context@@Base+0x1dc>
   2e3b4:	ldr	r0, [sp, #16]
   2e3b8:	lsl	r0, r0, #1
   2e3bc:	ldr	r1, [fp, #-12]
   2e3c0:	ldr	r1, [r1, #4]
   2e3c4:	cmp	r0, r1
   2e3c8:	bhi	2e3dc <flatcc_builder_get_emit_context@@Base+0x204>
   2e3cc:	ldr	r0, [sp, #16]
   2e3d0:	lsl	r0, r0, #1
   2e3d4:	str	r0, [sp, #16]
   2e3d8:	b	2e3b4 <flatcc_builder_get_emit_context@@Base+0x1dc>
   2e3dc:	ldr	r0, [sp, #16]
   2e3e0:	lsr	r0, r0, #2
   2e3e4:	str	r0, [sp, #16]
   2e3e8:	movw	r0, #0
   2e3ec:	str	r0, [sp, #12]
   2e3f0:	ldr	r0, [sp, #12]
   2e3f4:	movw	r1, #1
   2e3f8:	lsl	r0, r1, r0
   2e3fc:	ldr	r1, [sp, #16]
   2e400:	cmp	r0, r1
   2e404:	bcs	2e41c <flatcc_builder_get_emit_context@@Base+0x244>
   2e408:	b	2e40c <flatcc_builder_get_emit_context@@Base+0x234>
   2e40c:	ldr	r0, [sp, #12]
   2e410:	add	r0, r0, #1
   2e414:	str	r0, [sp, #12]
   2e418:	b	2e3f0 <flatcc_builder_get_emit_context@@Base+0x218>
   2e41c:	ldr	r0, [sp, #12]
   2e420:	ldr	r1, [fp, #-8]
   2e424:	str	r0, [r1, #116]	; 0x74
   2e428:	movw	r0, #0
   2e42c:	str	r0, [fp, #-4]
   2e430:	ldr	r0, [fp, #-4]
   2e434:	mov	sp, fp
   2e438:	pop	{fp, pc}
   2e43c:	andeq	r9, r0, r7, lsr r7
   2e440:	andeq	r8, r0, lr, lsr #11
   2e444:	andeq	r9, r0, r6, lsr r7

0002e448 <flatcc_emitter_recycle_page@@Base>:
   2e448:	sub	sp, sp, #12
   2e44c:	str	r0, [sp, #4]
   2e450:	str	r1, [sp]
   2e454:	ldr	r0, [sp]
   2e458:	ldr	r1, [sp, #4]
   2e45c:	ldr	r1, [r1]
   2e460:	cmp	r0, r1
   2e464:	beq	2e47c <flatcc_emitter_recycle_page@@Base+0x34>
   2e468:	ldr	r0, [sp]
   2e46c:	ldr	r1, [sp, #4]
   2e470:	ldr	r1, [r1, #4]
   2e474:	cmp	r0, r1
   2e478:	bne	2e488 <flatcc_emitter_recycle_page@@Base+0x40>
   2e47c:	mvn	r0, #0
   2e480:	str	r0, [sp, #8]
   2e484:	b	2e4fc <flatcc_emitter_recycle_page@@Base+0xb4>
   2e488:	ldr	r0, [sp]
   2e48c:	ldr	r0, [r0, #2948]	; 0xb84
   2e490:	ldr	r1, [sp]
   2e494:	ldr	r1, [r1, #2944]	; 0xb80
   2e498:	str	r0, [r1, #2948]	; 0xb84
   2e49c:	ldr	r0, [sp]
   2e4a0:	ldr	r0, [r0, #2944]	; 0xb80
   2e4a4:	ldr	r1, [sp]
   2e4a8:	ldr	r1, [r1, #2948]	; 0xb84
   2e4ac:	str	r0, [r1, #2944]	; 0xb80
   2e4b0:	ldr	r0, [sp, #4]
   2e4b4:	ldr	r0, [r0]
   2e4b8:	ldr	r0, [r0, #2948]	; 0xb84
   2e4bc:	ldr	r1, [sp]
   2e4c0:	str	r0, [r1, #2948]	; 0xb84
   2e4c4:	ldr	r0, [sp, #4]
   2e4c8:	ldr	r0, [r0]
   2e4cc:	ldr	r1, [sp]
   2e4d0:	str	r0, [r1, #2944]	; 0xb80
   2e4d4:	ldr	r0, [sp]
   2e4d8:	ldr	r1, [sp]
   2e4dc:	ldr	r1, [r1, #2948]	; 0xb84
   2e4e0:	str	r0, [r1, #2944]	; 0xb80
   2e4e4:	ldr	r0, [sp]
   2e4e8:	ldr	r1, [sp]
   2e4ec:	ldr	r1, [r1, #2944]	; 0xb80
   2e4f0:	str	r0, [r1, #2948]	; 0xb84
   2e4f4:	movw	r0, #0
   2e4f8:	str	r0, [sp, #8]
   2e4fc:	ldr	r0, [sp, #8]
   2e500:	add	sp, sp, #12
   2e504:	bx	lr

0002e508 <flatcc_emitter_reset@@Base>:
   2e508:	push	{fp, lr}
   2e50c:	mov	fp, sp
   2e510:	sub	sp, sp, #16
   2e514:	str	r0, [fp, #-4]
   2e518:	ldr	r0, [fp, #-4]
   2e51c:	ldr	r0, [r0]
   2e520:	str	r0, [sp, #8]
   2e524:	ldr	r0, [fp, #-4]
   2e528:	ldr	r0, [r0]
   2e52c:	movw	r1, #0
   2e530:	cmp	r0, r1
   2e534:	bne	2e53c <flatcc_emitter_reset@@Base+0x34>
   2e538:	b	2e698 <flatcc_emitter_reset@@Base+0x190>
   2e53c:	ldr	r0, [fp, #-4]
   2e540:	ldr	r0, [r0]
   2e544:	ldr	r1, [fp, #-4]
   2e548:	str	r0, [r1, #4]
   2e54c:	ldr	r0, [fp, #-4]
   2e550:	ldr	r0, [r0]
   2e554:	add	r0, r0, #1472	; 0x5c0
   2e558:	ldr	r1, [fp, #-4]
   2e55c:	str	r0, [r1, #8]
   2e560:	ldr	r0, [fp, #-4]
   2e564:	ldr	r0, [r0, #8]
   2e568:	ldr	r1, [fp, #-4]
   2e56c:	str	r0, [r1, #16]
   2e570:	ldr	r0, [fp, #-4]
   2e574:	movw	r1, #1472	; 0x5c0
   2e578:	str	r1, [r0, #12]
   2e57c:	ldr	r0, [fp, #-4]
   2e580:	str	r1, [r0, #20]
   2e584:	ldr	r0, [fp, #-4]
   2e588:	ldr	r0, [r0, #12]
   2e58c:	movw	r1, #0
   2e590:	sub	r0, r1, r0
   2e594:	ldr	r1, [fp, #-4]
   2e598:	ldr	r1, [r1]
   2e59c:	str	r0, [r1, #2952]	; 0xb88
   2e5a0:	ldr	r0, [fp, #-4]
   2e5a4:	ldr	r0, [r0, #32]
   2e5a8:	cmp	r0, #0
   2e5ac:	bne	2e5c0 <flatcc_emitter_reset@@Base+0xb8>
   2e5b0:	ldr	r0, [fp, #-4]
   2e5b4:	ldr	r0, [r0, #24]
   2e5b8:	ldr	r1, [fp, #-4]
   2e5bc:	str	r0, [r1, #32]
   2e5c0:	ldr	r0, [fp, #-4]
   2e5c4:	ldr	r1, [r0, #24]
   2e5c8:	ldr	r0, [r0, #32]
   2e5cc:	add	r0, r0, r0, lsl #1
   2e5d0:	lsr	r0, r0, #2
   2e5d4:	lsr	r1, r1, #2
   2e5d8:	add	r0, r0, r1
   2e5dc:	ldr	r1, [fp, #-4]
   2e5e0:	str	r0, [r1, #32]
   2e5e4:	ldr	r0, [fp, #-4]
   2e5e8:	movw	r1, #0
   2e5ec:	str	r1, [r0, #24]
   2e5f0:	ldr	r0, [fp, #-4]
   2e5f4:	ldr	r0, [r0, #32]
   2e5f8:	lsl	r0, r0, #1
   2e5fc:	ldr	r1, [fp, #-4]
   2e600:	ldr	r1, [r1, #28]
   2e604:	cmp	r0, r1
   2e608:	movw	r0, #0
   2e60c:	str	r0, [sp, #4]
   2e610:	bcs	2e638 <flatcc_emitter_reset@@Base+0x130>
   2e614:	ldr	r0, [fp, #-4]
   2e618:	ldr	r0, [r0, #4]
   2e61c:	ldr	r0, [r0, #2944]	; 0xb80
   2e620:	ldr	r1, [fp, #-4]
   2e624:	ldr	r1, [r1]
   2e628:	cmp	r0, r1
   2e62c:	movw	r0, #0
   2e630:	movne	r0, #1
   2e634:	str	r0, [sp, #4]
   2e638:	ldr	r0, [sp, #4]
   2e63c:	tst	r0, #1
   2e640:	beq	2e698 <flatcc_emitter_reset@@Base+0x190>
   2e644:	ldr	r0, [fp, #-4]
   2e648:	ldr	r0, [r0, #4]
   2e64c:	ldr	r0, [r0, #2944]	; 0xb80
   2e650:	str	r0, [sp, #8]
   2e654:	ldr	r0, [sp, #8]
   2e658:	ldr	r0, [r0, #2944]	; 0xb80
   2e65c:	ldr	r1, [fp, #-4]
   2e660:	ldr	r1, [r1, #4]
   2e664:	str	r0, [r1, #2944]	; 0xb80
   2e668:	ldr	r0, [fp, #-4]
   2e66c:	ldr	r0, [r0, #4]
   2e670:	ldr	r1, [sp, #8]
   2e674:	ldr	r1, [r1, #2944]	; 0xb80
   2e678:	str	r0, [r1, #2948]	; 0xb84
   2e67c:	ldr	r0, [sp, #8]
   2e680:	bl	12da8 <free@plt>
   2e684:	ldr	r0, [fp, #-4]
   2e688:	ldr	r1, [r0, #28]
   2e68c:	sub	r1, r1, #2944	; 0xb80
   2e690:	str	r1, [r0, #28]
   2e694:	b	2e5f0 <flatcc_emitter_reset@@Base+0xe8>
   2e698:	mov	sp, fp
   2e69c:	pop	{fp, pc}

0002e6a0 <flatcc_emitter_clear@@Base>:
   2e6a0:	push	{fp, lr}
   2e6a4:	mov	fp, sp
   2e6a8:	sub	sp, sp, #8
   2e6ac:	str	r0, [sp, #4]
   2e6b0:	ldr	r0, [sp, #4]
   2e6b4:	ldr	r0, [r0]
   2e6b8:	str	r0, [sp]
   2e6bc:	ldr	r0, [sp]
   2e6c0:	movw	r1, #0
   2e6c4:	cmp	r0, r1
   2e6c8:	bne	2e6d0 <flatcc_emitter_clear@@Base+0x30>
   2e6cc:	b	2e72c <flatcc_emitter_clear@@Base+0x8c>
   2e6d0:	ldr	r0, [sp]
   2e6d4:	ldr	r0, [r0, #2948]	; 0xb84
   2e6d8:	movw	r1, #0
   2e6dc:	str	r1, [r0, #2944]	; 0xb80
   2e6e0:	ldr	r0, [sp]
   2e6e4:	ldr	r0, [r0, #2944]	; 0xb80
   2e6e8:	movw	r1, #0
   2e6ec:	cmp	r0, r1
   2e6f0:	beq	2e710 <flatcc_emitter_clear@@Base+0x70>
   2e6f4:	ldr	r0, [sp]
   2e6f8:	ldr	r0, [r0, #2944]	; 0xb80
   2e6fc:	str	r0, [sp]
   2e700:	ldr	r0, [sp]
   2e704:	ldr	r0, [r0, #2948]	; 0xb84
   2e708:	bl	12da8 <free@plt>
   2e70c:	b	2e6e0 <flatcc_emitter_clear@@Base+0x40>
   2e710:	ldr	r0, [sp]
   2e714:	bl	12da8 <free@plt>
   2e718:	ldr	r0, [sp, #4]
   2e71c:	movw	lr, #0
   2e720:	and	r1, lr, #255	; 0xff
   2e724:	movw	r2, #36	; 0x24
   2e728:	bl	12e2c <memset@plt>
   2e72c:	mov	sp, fp
   2e730:	pop	{fp, pc}

0002e734 <flatcc_emitter@@Base>:
   2e734:	push	{fp, lr}
   2e738:	mov	fp, sp
   2e73c:	sub	sp, sp, #32
   2e740:	ldr	ip, [fp, #8]
   2e744:	str	r0, [fp, #-8]
   2e748:	str	r1, [fp, #-12]
   2e74c:	str	r2, [sp, #16]
   2e750:	str	r3, [sp, #12]
   2e754:	ldr	r0, [fp, #-8]
   2e758:	str	r0, [sp, #8]
   2e75c:	ldr	r0, [fp, #8]
   2e760:	ldr	r1, [sp, #8]
   2e764:	ldr	r2, [r1, #24]
   2e768:	add	r0, r2, r0
   2e76c:	str	r0, [r1, #24]
   2e770:	ldr	r0, [sp, #12]
   2e774:	cmp	r0, #0
   2e778:	str	ip, [sp]
   2e77c:	bge	2e840 <flatcc_emitter@@Base+0x10c>
   2e780:	ldr	r0, [fp, #8]
   2e784:	ldr	r1, [sp, #8]
   2e788:	ldr	r1, [r1, #12]
   2e78c:	cmp	r0, r1
   2e790:	bhi	2e7d4 <flatcc_emitter@@Base+0xa0>
   2e794:	ldr	r0, [fp, #8]
   2e798:	ldr	r1, [sp, #8]
   2e79c:	ldr	r2, [r1, #8]
   2e7a0:	movw	r3, #0
   2e7a4:	sub	r0, r3, r0
   2e7a8:	add	r0, r2, r0
   2e7ac:	str	r0, [r1, #8]
   2e7b0:	ldr	r0, [fp, #8]
   2e7b4:	ldr	r1, [sp, #8]
   2e7b8:	ldr	r2, [r1, #12]
   2e7bc:	sub	r0, r2, r0
   2e7c0:	str	r0, [r1, #12]
   2e7c4:	ldr	r0, [sp, #8]
   2e7c8:	ldr	r0, [r0, #8]
   2e7cc:	str	r0, [sp, #4]
   2e7d0:	b	2e8f4 <flatcc_emitter@@Base+0x1c0>
   2e7d4:	ldr	r0, [sp, #16]
   2e7d8:	ldr	r1, [fp, #-12]
   2e7dc:	add	r0, r1, r0, lsl #3
   2e7e0:	str	r0, [fp, #-12]
   2e7e4:	ldr	r0, [sp, #16]
   2e7e8:	mvn	r1, #0
   2e7ec:	add	r1, r0, r1
   2e7f0:	str	r1, [sp, #16]
   2e7f4:	cmp	r0, #0
   2e7f8:	beq	2e83c <flatcc_emitter@@Base+0x108>
   2e7fc:	ldr	r0, [fp, #-12]
   2e800:	mvn	r1, #7
   2e804:	add	r0, r0, r1
   2e808:	str	r0, [fp, #-12]
   2e80c:	ldr	r0, [sp, #8]
   2e810:	ldr	r1, [fp, #-12]
   2e814:	ldr	r1, [r1]
   2e818:	ldr	r2, [fp, #-12]
   2e81c:	ldr	r2, [r2, #4]
   2e820:	bl	2e960 <flatcc_emitter@@Base+0x22c>
   2e824:	cmp	r0, #0
   2e828:	beq	2e838 <flatcc_emitter@@Base+0x104>
   2e82c:	mvn	r0, #0
   2e830:	str	r0, [fp, #-4]
   2e834:	b	2e954 <flatcc_emitter@@Base+0x220>
   2e838:	b	2e7e4 <flatcc_emitter@@Base+0xb0>
   2e83c:	b	2e8e8 <flatcc_emitter@@Base+0x1b4>
   2e840:	ldr	r0, [fp, #8]
   2e844:	ldr	r1, [sp, #8]
   2e848:	ldr	r1, [r1, #20]
   2e84c:	cmp	r0, r1
   2e850:	bhi	2e88c <flatcc_emitter@@Base+0x158>
   2e854:	ldr	r0, [sp, #8]
   2e858:	ldr	r0, [r0, #16]
   2e85c:	str	r0, [sp, #4]
   2e860:	ldr	r0, [fp, #8]
   2e864:	ldr	r1, [sp, #8]
   2e868:	ldr	r2, [r1, #16]
   2e86c:	add	r0, r2, r0
   2e870:	str	r0, [r1, #16]
   2e874:	ldr	r0, [fp, #8]
   2e878:	ldr	r1, [sp, #8]
   2e87c:	ldr	r2, [r1, #20]
   2e880:	sub	r0, r2, r0
   2e884:	str	r0, [r1, #20]
   2e888:	b	2e8f4 <flatcc_emitter@@Base+0x1c0>
   2e88c:	b	2e890 <flatcc_emitter@@Base+0x15c>
   2e890:	ldr	r0, [sp, #16]
   2e894:	mvn	r1, #0
   2e898:	add	r1, r0, r1
   2e89c:	str	r1, [sp, #16]
   2e8a0:	cmp	r0, #0
   2e8a4:	beq	2e8e4 <flatcc_emitter@@Base+0x1b0>
   2e8a8:	ldr	r0, [sp, #8]
   2e8ac:	ldr	r1, [fp, #-12]
   2e8b0:	ldr	r1, [r1]
   2e8b4:	ldr	r2, [fp, #-12]
   2e8b8:	ldr	r2, [r2, #4]
   2e8bc:	bl	2ea6c <flatcc_emitter@@Base+0x338>
   2e8c0:	cmp	r0, #0
   2e8c4:	beq	2e8d4 <flatcc_emitter@@Base+0x1a0>
   2e8c8:	mvn	r0, #0
   2e8cc:	str	r0, [fp, #-4]
   2e8d0:	b	2e954 <flatcc_emitter@@Base+0x220>
   2e8d4:	ldr	r0, [fp, #-12]
   2e8d8:	add	r0, r0, #8
   2e8dc:	str	r0, [fp, #-12]
   2e8e0:	b	2e890 <flatcc_emitter@@Base+0x15c>
   2e8e4:	b	2e8e8 <flatcc_emitter@@Base+0x1b4>
   2e8e8:	movw	r0, #0
   2e8ec:	str	r0, [fp, #-4]
   2e8f0:	b	2e954 <flatcc_emitter@@Base+0x220>
   2e8f4:	b	2e8f8 <flatcc_emitter@@Base+0x1c4>
   2e8f8:	ldr	r0, [sp, #16]
   2e8fc:	mvn	r1, #0
   2e900:	add	r1, r0, r1
   2e904:	str	r1, [sp, #16]
   2e908:	cmp	r0, #0
   2e90c:	beq	2e94c <flatcc_emitter@@Base+0x218>
   2e910:	ldr	r0, [sp, #4]
   2e914:	ldr	r1, [fp, #-12]
   2e918:	ldr	r1, [r1]
   2e91c:	ldr	r2, [fp, #-12]
   2e920:	ldr	r2, [r2, #4]
   2e924:	bl	12db4 <memcpy@plt>
   2e928:	ldr	r0, [fp, #-12]
   2e92c:	ldr	r0, [r0, #4]
   2e930:	ldr	r1, [sp, #4]
   2e934:	add	r0, r1, r0
   2e938:	str	r0, [sp, #4]
   2e93c:	ldr	r0, [fp, #-12]
   2e940:	add	r0, r0, #8
   2e944:	str	r0, [fp, #-12]
   2e948:	b	2e8f8 <flatcc_emitter@@Base+0x1c4>
   2e94c:	movw	r0, #0
   2e950:	str	r0, [fp, #-4]
   2e954:	ldr	r0, [fp, #-4]
   2e958:	mov	sp, fp
   2e95c:	pop	{fp, pc}
   2e960:	push	{fp, lr}
   2e964:	mov	fp, sp
   2e968:	sub	sp, sp, #24
   2e96c:	str	r0, [fp, #-8]
   2e970:	str	r1, [sp, #12]
   2e974:	str	r2, [sp, #8]
   2e978:	ldr	r0, [sp, #8]
   2e97c:	ldr	r1, [sp, #12]
   2e980:	add	r0, r1, r0
   2e984:	str	r0, [sp, #12]
   2e988:	ldr	r0, [sp, #8]
   2e98c:	cmp	r0, #0
   2e990:	beq	2ea58 <flatcc_emitter@@Base+0x324>
   2e994:	ldr	r0, [sp, #8]
   2e998:	str	r0, [sp, #4]
   2e99c:	ldr	r0, [sp, #4]
   2e9a0:	ldr	r1, [fp, #-8]
   2e9a4:	ldr	r1, [r1, #12]
   2e9a8:	cmp	r0, r1
   2e9ac:	bls	2e9ec <flatcc_emitter@@Base+0x2b8>
   2e9b0:	ldr	r0, [fp, #-8]
   2e9b4:	ldr	r0, [r0, #12]
   2e9b8:	str	r0, [sp, #4]
   2e9bc:	ldr	r0, [sp, #4]
   2e9c0:	cmp	r0, #0
   2e9c4:	bne	2e9e8 <flatcc_emitter@@Base+0x2b4>
   2e9c8:	ldr	r0, [fp, #-8]
   2e9cc:	bl	2eca8 <flatcc_emitter_copy_buffer@@Base+0x14c>
   2e9d0:	cmp	r0, #0
   2e9d4:	beq	2e9e4 <flatcc_emitter@@Base+0x2b0>
   2e9d8:	mvn	r0, #0
   2e9dc:	str	r0, [fp, #-4]
   2e9e0:	b	2ea60 <flatcc_emitter@@Base+0x32c>
   2e9e4:	b	2e988 <flatcc_emitter@@Base+0x254>
   2e9e8:	b	2e9ec <flatcc_emitter@@Base+0x2b8>
   2e9ec:	ldr	r0, [sp, #4]
   2e9f0:	ldr	r1, [fp, #-8]
   2e9f4:	ldr	r2, [r1, #8]
   2e9f8:	movw	r3, #0
   2e9fc:	sub	r0, r3, r0
   2ea00:	add	r0, r2, r0
   2ea04:	str	r0, [r1, #8]
   2ea08:	ldr	r0, [sp, #4]
   2ea0c:	ldr	r1, [fp, #-8]
   2ea10:	ldr	r2, [r1, #12]
   2ea14:	sub	r0, r2, r0
   2ea18:	str	r0, [r1, #12]
   2ea1c:	ldr	r0, [sp, #4]
   2ea20:	ldr	r1, [sp, #12]
   2ea24:	sub	r0, r3, r0
   2ea28:	add	r0, r1, r0
   2ea2c:	str	r0, [sp, #12]
   2ea30:	ldr	r0, [sp, #4]
   2ea34:	ldr	r1, [sp, #8]
   2ea38:	sub	r0, r1, r0
   2ea3c:	str	r0, [sp, #8]
   2ea40:	ldr	r0, [fp, #-8]
   2ea44:	ldr	r0, [r0, #8]
   2ea48:	ldr	r1, [sp, #12]
   2ea4c:	ldr	r2, [sp, #4]
   2ea50:	bl	12db4 <memcpy@plt>
   2ea54:	b	2e988 <flatcc_emitter@@Base+0x254>
   2ea58:	movw	r0, #0
   2ea5c:	str	r0, [fp, #-4]
   2ea60:	ldr	r0, [fp, #-4]
   2ea64:	mov	sp, fp
   2ea68:	pop	{fp, pc}
   2ea6c:	push	{fp, lr}
   2ea70:	mov	fp, sp
   2ea74:	sub	sp, sp, #24
   2ea78:	str	r0, [fp, #-8]
   2ea7c:	str	r1, [sp, #12]
   2ea80:	str	r2, [sp, #8]
   2ea84:	ldr	r0, [sp, #8]
   2ea88:	cmp	r0, #0
   2ea8c:	beq	2eb48 <flatcc_emitter@@Base+0x414>
   2ea90:	ldr	r0, [sp, #8]
   2ea94:	str	r0, [sp, #4]
   2ea98:	ldr	r0, [sp, #4]
   2ea9c:	ldr	r1, [fp, #-8]
   2eaa0:	ldr	r1, [r1, #20]
   2eaa4:	cmp	r0, r1
   2eaa8:	bls	2eae8 <flatcc_emitter@@Base+0x3b4>
   2eaac:	ldr	r0, [fp, #-8]
   2eab0:	ldr	r0, [r0, #20]
   2eab4:	str	r0, [sp, #4]
   2eab8:	ldr	r0, [sp, #4]
   2eabc:	cmp	r0, #0
   2eac0:	bne	2eae4 <flatcc_emitter@@Base+0x3b0>
   2eac4:	ldr	r0, [fp, #-8]
   2eac8:	bl	2eea8 <flatcc_emitter_copy_buffer@@Base+0x34c>
   2eacc:	cmp	r0, #0
   2ead0:	beq	2eae0 <flatcc_emitter@@Base+0x3ac>
   2ead4:	mvn	r0, #0
   2ead8:	str	r0, [fp, #-4]
   2eadc:	b	2eb50 <flatcc_emitter@@Base+0x41c>
   2eae0:	b	2ea84 <flatcc_emitter@@Base+0x350>
   2eae4:	b	2eae8 <flatcc_emitter@@Base+0x3b4>
   2eae8:	ldr	r0, [fp, #-8]
   2eaec:	ldr	r0, [r0, #16]
   2eaf0:	ldr	r1, [sp, #12]
   2eaf4:	ldr	r2, [sp, #4]
   2eaf8:	bl	12db4 <memcpy@plt>
   2eafc:	ldr	r0, [sp, #4]
   2eb00:	ldr	r1, [sp, #8]
   2eb04:	sub	r0, r1, r0
   2eb08:	str	r0, [sp, #8]
   2eb0c:	ldr	r0, [sp, #4]
   2eb10:	ldr	r1, [sp, #12]
   2eb14:	add	r0, r1, r0
   2eb18:	str	r0, [sp, #12]
   2eb1c:	ldr	r0, [sp, #4]
   2eb20:	ldr	r1, [fp, #-8]
   2eb24:	ldr	r2, [r1, #16]
   2eb28:	add	r0, r2, r0
   2eb2c:	str	r0, [r1, #16]
   2eb30:	ldr	r0, [sp, #4]
   2eb34:	ldr	r1, [fp, #-8]
   2eb38:	ldr	r2, [r1, #20]
   2eb3c:	sub	r0, r2, r0
   2eb40:	str	r0, [r1, #20]
   2eb44:	b	2ea84 <flatcc_emitter@@Base+0x350>
   2eb48:	movw	r0, #0
   2eb4c:	str	r0, [fp, #-4]
   2eb50:	ldr	r0, [fp, #-4]
   2eb54:	mov	sp, fp
   2eb58:	pop	{fp, pc}

0002eb5c <flatcc_emitter_copy_buffer@@Base>:
   2eb5c:	push	{fp, lr}
   2eb60:	mov	fp, sp
   2eb64:	sub	sp, sp, #24
   2eb68:	str	r0, [fp, #-8]
   2eb6c:	str	r1, [sp, #12]
   2eb70:	str	r2, [sp, #8]
   2eb74:	ldr	r0, [sp, #8]
   2eb78:	ldr	r1, [fp, #-8]
   2eb7c:	ldr	r1, [r1, #24]
   2eb80:	cmp	r0, r1
   2eb84:	bcs	2eb94 <flatcc_emitter_copy_buffer@@Base+0x38>
   2eb88:	movw	r0, #0
   2eb8c:	str	r0, [fp, #-4]
   2eb90:	b	2ec9c <flatcc_emitter_copy_buffer@@Base+0x140>
   2eb94:	ldr	r0, [fp, #-8]
   2eb98:	ldr	r0, [r0]
   2eb9c:	movw	r1, #0
   2eba0:	cmp	r0, r1
   2eba4:	bne	2ebb4 <flatcc_emitter_copy_buffer@@Base+0x58>
   2eba8:	movw	r0, #0
   2ebac:	str	r0, [fp, #-4]
   2ebb0:	b	2ec9c <flatcc_emitter_copy_buffer@@Base+0x140>
   2ebb4:	ldr	r0, [fp, #-8]
   2ebb8:	ldr	r0, [r0]
   2ebbc:	ldr	r1, [fp, #-8]
   2ebc0:	ldr	r1, [r1, #4]
   2ebc4:	cmp	r0, r1
   2ebc8:	bne	2ebf0 <flatcc_emitter_copy_buffer@@Base+0x94>
   2ebcc:	ldr	r0, [sp, #12]
   2ebd0:	ldr	r1, [fp, #-8]
   2ebd4:	ldr	r1, [r1, #8]
   2ebd8:	ldr	r2, [fp, #-8]
   2ebdc:	ldr	r2, [r2, #24]
   2ebe0:	bl	12db4 <memcpy@plt>
   2ebe4:	ldr	r0, [sp, #12]
   2ebe8:	str	r0, [fp, #-4]
   2ebec:	b	2ec9c <flatcc_emitter_copy_buffer@@Base+0x140>
   2ebf0:	ldr	r0, [fp, #-8]
   2ebf4:	ldr	r0, [r0, #12]
   2ebf8:	movw	r1, #2944	; 0xb80
   2ebfc:	sub	r0, r1, r0
   2ec00:	str	r0, [sp]
   2ec04:	ldr	r0, [sp, #12]
   2ec08:	ldr	r1, [fp, #-8]
   2ec0c:	ldr	r1, [r1, #8]
   2ec10:	ldr	r2, [sp]
   2ec14:	bl	12db4 <memcpy@plt>
   2ec18:	ldr	r0, [sp, #12]
   2ec1c:	ldr	r1, [sp]
   2ec20:	add	r0, r0, r1
   2ec24:	str	r0, [sp, #12]
   2ec28:	ldr	r0, [fp, #-8]
   2ec2c:	ldr	r0, [r0]
   2ec30:	ldr	r0, [r0, #2944]	; 0xb80
   2ec34:	str	r0, [sp, #4]
   2ec38:	ldr	r0, [sp, #4]
   2ec3c:	ldr	r1, [fp, #-8]
   2ec40:	ldr	r1, [r1, #4]
   2ec44:	cmp	r0, r1
   2ec48:	beq	2ec78 <flatcc_emitter_copy_buffer@@Base+0x11c>
   2ec4c:	ldr	r0, [sp, #12]
   2ec50:	ldr	r1, [sp, #4]
   2ec54:	movw	r2, #2944	; 0xb80
   2ec58:	bl	12db4 <memcpy@plt>
   2ec5c:	ldr	r0, [sp, #12]
   2ec60:	add	r0, r0, #2944	; 0xb80
   2ec64:	str	r0, [sp, #12]
   2ec68:	ldr	r0, [sp, #4]
   2ec6c:	ldr	r0, [r0, #2944]	; 0xb80
   2ec70:	str	r0, [sp, #4]
   2ec74:	b	2ec38 <flatcc_emitter_copy_buffer@@Base+0xdc>
   2ec78:	ldr	r0, [sp, #12]
   2ec7c:	ldr	r1, [sp, #4]
   2ec80:	ldr	r2, [fp, #-8]
   2ec84:	ldr	r2, [r2, #20]
   2ec88:	movw	r3, #2944	; 0xb80
   2ec8c:	sub	r2, r3, r2
   2ec90:	bl	12db4 <memcpy@plt>
   2ec94:	ldr	r0, [sp, #12]
   2ec98:	str	r0, [fp, #-4]
   2ec9c:	ldr	r0, [fp, #-4]
   2eca0:	mov	sp, fp
   2eca4:	pop	{fp, pc}
   2eca8:	push	{fp, lr}
   2ecac:	mov	fp, sp
   2ecb0:	sub	sp, sp, #16
   2ecb4:	str	r0, [sp, #8]
   2ecb8:	movw	r0, #0
   2ecbc:	str	r0, [sp, #4]
   2ecc0:	ldr	r1, [sp, #8]
   2ecc4:	ldr	r1, [r1]
   2ecc8:	cmp	r1, r0
   2eccc:	beq	2ed24 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   2ecd0:	ldr	r0, [sp, #8]
   2ecd4:	ldr	r0, [r0]
   2ecd8:	ldr	r0, [r0, #2948]	; 0xb84
   2ecdc:	ldr	r1, [sp, #8]
   2ece0:	ldr	r1, [r1, #4]
   2ece4:	cmp	r0, r1
   2ece8:	beq	2ed24 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   2ecec:	ldr	r0, [sp, #8]
   2ecf0:	ldr	r0, [r0]
   2ecf4:	ldr	r0, [r0, #2952]	; 0xb88
   2ecf8:	sub	r0, r0, #2944	; 0xb80
   2ecfc:	ldr	r1, [sp, #8]
   2ed00:	ldr	r1, [r1]
   2ed04:	ldr	r1, [r1, #2948]	; 0xb84
   2ed08:	str	r0, [r1, #2952]	; 0xb88
   2ed0c:	ldr	r0, [sp, #8]
   2ed10:	ldr	r0, [r0]
   2ed14:	ldr	r0, [r0, #2948]	; 0xb84
   2ed18:	ldr	r1, [sp, #8]
   2ed1c:	str	r0, [r1]
   2ed20:	b	2ee54 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   2ed24:	movw	r0, #2956	; 0xb8c
   2ed28:	bl	12de4 <malloc@plt>
   2ed2c:	str	r0, [sp, #4]
   2ed30:	movw	lr, #0
   2ed34:	cmp	r0, lr
   2ed38:	bne	2ed48 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   2ed3c:	mvn	r0, #0
   2ed40:	str	r0, [fp, #-4]
   2ed44:	b	2ee9c <flatcc_emitter_copy_buffer@@Base+0x340>
   2ed48:	ldr	r0, [sp, #8]
   2ed4c:	ldr	r1, [r0, #28]
   2ed50:	add	r1, r1, #2944	; 0xb80
   2ed54:	str	r1, [r0, #28]
   2ed58:	ldr	r0, [sp, #8]
   2ed5c:	ldr	r0, [r0]
   2ed60:	movw	r1, #0
   2ed64:	cmp	r0, r1
   2ed68:	beq	2edbc <flatcc_emitter_copy_buffer@@Base+0x260>
   2ed6c:	ldr	r0, [sp, #8]
   2ed70:	ldr	r0, [r0, #4]
   2ed74:	ldr	r1, [sp, #4]
   2ed78:	str	r0, [r1, #2948]	; 0xb84
   2ed7c:	ldr	r0, [sp, #8]
   2ed80:	ldr	r0, [r0]
   2ed84:	ldr	r1, [sp, #4]
   2ed88:	str	r0, [r1, #2944]	; 0xb80
   2ed8c:	ldr	r0, [sp, #4]
   2ed90:	ldr	r1, [sp, #8]
   2ed94:	ldr	r1, [r1]
   2ed98:	str	r0, [r1, #2948]	; 0xb84
   2ed9c:	ldr	r0, [sp, #4]
   2eda0:	ldr	r1, [sp, #8]
   2eda4:	ldr	r1, [r1, #4]
   2eda8:	str	r0, [r1, #2944]	; 0xb80
   2edac:	ldr	r0, [sp, #4]
   2edb0:	ldr	r1, [sp, #8]
   2edb4:	str	r0, [r1]
   2edb8:	b	2ee54 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   2edbc:	ldr	r0, [sp, #4]
   2edc0:	ldr	r1, [sp, #8]
   2edc4:	str	r0, [r1]
   2edc8:	ldr	r0, [sp, #4]
   2edcc:	ldr	r1, [sp, #8]
   2edd0:	str	r0, [r1, #4]
   2edd4:	ldr	r0, [sp, #4]
   2edd8:	ldr	r1, [sp, #4]
   2eddc:	str	r0, [r1, #2944]	; 0xb80
   2ede0:	ldr	r0, [sp, #4]
   2ede4:	ldr	r1, [sp, #4]
   2ede8:	str	r0, [r1, #2948]	; 0xb84
   2edec:	ldr	r0, [sp, #8]
   2edf0:	ldr	r0, [r0]
   2edf4:	add	r0, r0, #1472	; 0x5c0
   2edf8:	ldr	r1, [sp, #8]
   2edfc:	str	r0, [r1, #8]
   2ee00:	ldr	r0, [sp, #8]
   2ee04:	ldr	r0, [r0, #8]
   2ee08:	ldr	r1, [sp, #8]
   2ee0c:	str	r0, [r1, #16]
   2ee10:	ldr	r0, [sp, #8]
   2ee14:	movw	r1, #1472	; 0x5c0
   2ee18:	str	r1, [r0, #12]
   2ee1c:	ldr	r0, [sp, #8]
   2ee20:	ldr	r0, [r0, #12]
   2ee24:	movw	r1, #2944	; 0xb80
   2ee28:	sub	r0, r1, r0
   2ee2c:	ldr	r1, [sp, #8]
   2ee30:	str	r0, [r1, #20]
   2ee34:	ldr	r0, [sp, #8]
   2ee38:	ldr	r0, [r0, #12]
   2ee3c:	movw	r1, #0
   2ee40:	sub	r0, r1, r0
   2ee44:	ldr	r2, [sp, #4]
   2ee48:	str	r0, [r2, #2952]	; 0xb88
   2ee4c:	str	r1, [fp, #-4]
   2ee50:	b	2ee9c <flatcc_emitter_copy_buffer@@Base+0x340>
   2ee54:	ldr	r0, [sp, #8]
   2ee58:	ldr	r0, [r0]
   2ee5c:	add	r0, r0, #2944	; 0xb80
   2ee60:	ldr	r1, [sp, #8]
   2ee64:	str	r0, [r1, #8]
   2ee68:	ldr	r0, [sp, #8]
   2ee6c:	movw	r1, #2944	; 0xb80
   2ee70:	str	r1, [r0, #12]
   2ee74:	ldr	r0, [sp, #8]
   2ee78:	ldr	r0, [r0]
   2ee7c:	ldr	r0, [r0, #2944]	; 0xb80
   2ee80:	ldr	r0, [r0, #2952]	; 0xb88
   2ee84:	sub	r0, r0, #2944	; 0xb80
   2ee88:	ldr	r1, [sp, #8]
   2ee8c:	ldr	r1, [r1]
   2ee90:	str	r0, [r1, #2952]	; 0xb88
   2ee94:	movw	r0, #0
   2ee98:	str	r0, [fp, #-4]
   2ee9c:	ldr	r0, [fp, #-4]
   2eea0:	mov	sp, fp
   2eea4:	pop	{fp, pc}
   2eea8:	push	{fp, lr}
   2eeac:	mov	fp, sp
   2eeb0:	sub	sp, sp, #16
   2eeb4:	str	r0, [sp, #8]
   2eeb8:	movw	r0, #0
   2eebc:	str	r0, [sp, #4]
   2eec0:	ldr	r1, [sp, #8]
   2eec4:	ldr	r1, [r1, #4]
   2eec8:	cmp	r1, r0
   2eecc:	beq	2ef04 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   2eed0:	ldr	r0, [sp, #8]
   2eed4:	ldr	r0, [r0, #4]
   2eed8:	ldr	r0, [r0, #2944]	; 0xb80
   2eedc:	ldr	r1, [sp, #8]
   2eee0:	ldr	r1, [r1]
   2eee4:	cmp	r0, r1
   2eee8:	beq	2ef04 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   2eeec:	ldr	r0, [sp, #8]
   2eef0:	ldr	r0, [r0, #4]
   2eef4:	ldr	r0, [r0, #2944]	; 0xb80
   2eef8:	ldr	r1, [sp, #8]
   2eefc:	str	r0, [r1, #4]
   2ef00:	b	2f034 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   2ef04:	movw	r0, #2956	; 0xb8c
   2ef08:	bl	12de4 <malloc@plt>
   2ef0c:	str	r0, [sp, #4]
   2ef10:	movw	lr, #0
   2ef14:	cmp	r0, lr
   2ef18:	bne	2ef28 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   2ef1c:	mvn	r0, #0
   2ef20:	str	r0, [fp, #-4]
   2ef24:	b	2f078 <flatcc_emitter_copy_buffer@@Base+0x51c>
   2ef28:	ldr	r0, [sp, #8]
   2ef2c:	ldr	r1, [r0, #28]
   2ef30:	add	r1, r1, #2944	; 0xb80
   2ef34:	str	r1, [r0, #28]
   2ef38:	ldr	r0, [sp, #8]
   2ef3c:	ldr	r0, [r0, #4]
   2ef40:	movw	r1, #0
   2ef44:	cmp	r0, r1
   2ef48:	beq	2ef9c <flatcc_emitter_copy_buffer@@Base+0x440>
   2ef4c:	ldr	r0, [sp, #8]
   2ef50:	ldr	r0, [r0, #4]
   2ef54:	ldr	r1, [sp, #4]
   2ef58:	str	r0, [r1, #2948]	; 0xb84
   2ef5c:	ldr	r0, [sp, #8]
   2ef60:	ldr	r0, [r0]
   2ef64:	ldr	r1, [sp, #4]
   2ef68:	str	r0, [r1, #2944]	; 0xb80
   2ef6c:	ldr	r0, [sp, #4]
   2ef70:	ldr	r1, [sp, #8]
   2ef74:	ldr	r1, [r1]
   2ef78:	str	r0, [r1, #2948]	; 0xb84
   2ef7c:	ldr	r0, [sp, #4]
   2ef80:	ldr	r1, [sp, #8]
   2ef84:	ldr	r1, [r1, #4]
   2ef88:	str	r0, [r1, #2944]	; 0xb80
   2ef8c:	ldr	r0, [sp, #4]
   2ef90:	ldr	r1, [sp, #8]
   2ef94:	str	r0, [r1, #4]
   2ef98:	b	2f034 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   2ef9c:	ldr	r0, [sp, #4]
   2efa0:	ldr	r1, [sp, #8]
   2efa4:	str	r0, [r1]
   2efa8:	ldr	r0, [sp, #4]
   2efac:	ldr	r1, [sp, #8]
   2efb0:	str	r0, [r1, #4]
   2efb4:	ldr	r0, [sp, #4]
   2efb8:	ldr	r1, [sp, #4]
   2efbc:	str	r0, [r1, #2944]	; 0xb80
   2efc0:	ldr	r0, [sp, #4]
   2efc4:	ldr	r1, [sp, #4]
   2efc8:	str	r0, [r1, #2948]	; 0xb84
   2efcc:	ldr	r0, [sp, #8]
   2efd0:	ldr	r0, [r0]
   2efd4:	add	r0, r0, #1472	; 0x5c0
   2efd8:	ldr	r1, [sp, #8]
   2efdc:	str	r0, [r1, #8]
   2efe0:	ldr	r0, [sp, #8]
   2efe4:	ldr	r0, [r0, #8]
   2efe8:	ldr	r1, [sp, #8]
   2efec:	str	r0, [r1, #16]
   2eff0:	ldr	r0, [sp, #8]
   2eff4:	movw	r1, #1472	; 0x5c0
   2eff8:	str	r1, [r0, #12]
   2effc:	ldr	r0, [sp, #8]
   2f000:	ldr	r0, [r0, #12]
   2f004:	movw	r1, #2944	; 0xb80
   2f008:	sub	r0, r1, r0
   2f00c:	ldr	r1, [sp, #8]
   2f010:	str	r0, [r1, #20]
   2f014:	ldr	r0, [sp, #8]
   2f018:	ldr	r0, [r0, #12]
   2f01c:	movw	r1, #0
   2f020:	sub	r0, r1, r0
   2f024:	ldr	r2, [sp, #4]
   2f028:	str	r0, [r2, #2952]	; 0xb88
   2f02c:	str	r1, [fp, #-4]
   2f030:	b	2f078 <flatcc_emitter_copy_buffer@@Base+0x51c>
   2f034:	ldr	r0, [sp, #8]
   2f038:	ldr	r0, [r0, #4]
   2f03c:	ldr	r1, [sp, #8]
   2f040:	str	r0, [r1, #16]
   2f044:	ldr	r0, [sp, #8]
   2f048:	movw	r1, #2944	; 0xb80
   2f04c:	str	r1, [r0, #20]
   2f050:	ldr	r0, [sp, #8]
   2f054:	ldr	r0, [r0, #4]
   2f058:	ldr	r0, [r0, #2948]	; 0xb84
   2f05c:	ldr	r0, [r0, #2952]	; 0xb88
   2f060:	add	r0, r0, #2944	; 0xb80
   2f064:	ldr	r1, [sp, #8]
   2f068:	ldr	r1, [r1, #4]
   2f06c:	str	r0, [r1, #2952]	; 0xb88
   2f070:	movw	r0, #0
   2f074:	str	r0, [fp, #-4]
   2f078:	ldr	r0, [fp, #-4]
   2f07c:	mov	sp, fp
   2f080:	pop	{fp, pc}

0002f084 <flatcc_verify_error_string@@Base>:
   2f084:	sub	sp, sp, #12
   2f088:	str	r0, [sp, #4]
   2f08c:	ldr	r0, [sp, #4]
   2f090:	cmp	r0, #36	; 0x24
   2f094:	str	r0, [sp]
   2f098:	bhi	2f390 <flatcc_verify_error_string@@Base+0x30c>
   2f09c:	add	r0, pc, #8
   2f0a0:	ldr	r1, [sp]
   2f0a4:	ldr	r2, [r0, r1, lsl #2]
   2f0a8:	add	pc, r0, r2
   2f0ac:	muleq	r0, r4, r0
   2f0b0:	andeq	r0, r0, r4, lsr #1
   2f0b4:	strheq	r0, [r0], -r4
   2f0b8:	andeq	r0, r0, r4, asr #1
   2f0bc:	ldrdeq	r0, [r0], -r4
   2f0c0:	andeq	r0, r0, r4, ror #1
   2f0c4:	strdeq	r0, [r0], -r4
   2f0c8:	andeq	r0, r0, r4, lsl #2
   2f0cc:	andeq	r0, r0, r4, lsl r1
   2f0d0:	andeq	r0, r0, r4, lsr #2
   2f0d4:	andeq	r0, r0, r4, lsr r1
   2f0d8:	andeq	r0, r0, r4, asr #2
   2f0dc:	andeq	r0, r0, r4, asr r1
   2f0e0:	andeq	r0, r0, r4, ror #2
   2f0e4:	andeq	r0, r0, r4, ror r1
   2f0e8:	andeq	r0, r0, r4, lsl #3
   2f0ec:	muleq	r0, r4, r1
   2f0f0:	andeq	r0, r0, r4, lsr #3
   2f0f4:			; <UNDEFINED> instruction: 0x000001b4
   2f0f8:	andeq	r0, r0, r4, asr #3
   2f0fc:	ldrdeq	r0, [r0], -r4
   2f100:	andeq	r0, r0, r4, ror #3
   2f104:	strdeq	r0, [r0], -r4
   2f108:	andeq	r0, r0, r4, lsl #4
   2f10c:	andeq	r0, r0, r4, lsl r2
   2f110:	andeq	r0, r0, r4, lsr #4
   2f114:	andeq	r0, r0, r4, lsr r2
   2f118:	andeq	r0, r0, r4, asr #4
   2f11c:	andeq	r0, r0, r4, asr r2
   2f120:	andeq	r0, r0, r4, ror #4
   2f124:	andeq	r0, r0, r4, ror r2
   2f128:	andeq	r0, r0, r4, lsl #5
   2f12c:	muleq	r0, r4, r2
   2f130:	andeq	r0, r0, r4, lsr #5
   2f134:			; <UNDEFINED> instruction: 0x000002b4
   2f138:	andeq	r0, r0, r4, asr #5
   2f13c:	ldrdeq	r0, [r0], -r4
   2f140:	ldr	r0, [pc, #752]	; 2f438 <flatcc_verify_error_string@@Base+0x3b4>
   2f144:	add	r0, pc, r0
   2f148:	str	r0, [sp, #8]
   2f14c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f150:	ldr	r0, [pc, #732]	; 2f434 <flatcc_verify_error_string@@Base+0x3b0>
   2f154:	add	r0, pc, r0
   2f158:	str	r0, [sp, #8]
   2f15c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f160:	ldr	r0, [pc, #712]	; 2f430 <flatcc_verify_error_string@@Base+0x3ac>
   2f164:	add	r0, pc, r0
   2f168:	str	r0, [sp, #8]
   2f16c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f170:	ldr	r0, [pc, #692]	; 2f42c <flatcc_verify_error_string@@Base+0x3a8>
   2f174:	add	r0, pc, r0
   2f178:	str	r0, [sp, #8]
   2f17c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f180:	ldr	r0, [pc, #672]	; 2f428 <flatcc_verify_error_string@@Base+0x3a4>
   2f184:	add	r0, pc, r0
   2f188:	str	r0, [sp, #8]
   2f18c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f190:	ldr	r0, [pc, #652]	; 2f424 <flatcc_verify_error_string@@Base+0x3a0>
   2f194:	add	r0, pc, r0
   2f198:	str	r0, [sp, #8]
   2f19c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1a0:	ldr	r0, [pc, #632]	; 2f420 <flatcc_verify_error_string@@Base+0x39c>
   2f1a4:	add	r0, pc, r0
   2f1a8:	str	r0, [sp, #8]
   2f1ac:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1b0:	ldr	r0, [pc, #612]	; 2f41c <flatcc_verify_error_string@@Base+0x398>
   2f1b4:	add	r0, pc, r0
   2f1b8:	str	r0, [sp, #8]
   2f1bc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1c0:	ldr	r0, [pc, #592]	; 2f418 <flatcc_verify_error_string@@Base+0x394>
   2f1c4:	add	r0, pc, r0
   2f1c8:	str	r0, [sp, #8]
   2f1cc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1d0:	ldr	r0, [pc, #572]	; 2f414 <flatcc_verify_error_string@@Base+0x390>
   2f1d4:	add	r0, pc, r0
   2f1d8:	str	r0, [sp, #8]
   2f1dc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1e0:	ldr	r0, [pc, #552]	; 2f410 <flatcc_verify_error_string@@Base+0x38c>
   2f1e4:	add	r0, pc, r0
   2f1e8:	str	r0, [sp, #8]
   2f1ec:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f1f0:	ldr	r0, [pc, #532]	; 2f40c <flatcc_verify_error_string@@Base+0x388>
   2f1f4:	add	r0, pc, r0
   2f1f8:	str	r0, [sp, #8]
   2f1fc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f200:	ldr	r0, [pc, #512]	; 2f408 <flatcc_verify_error_string@@Base+0x384>
   2f204:	add	r0, pc, r0
   2f208:	str	r0, [sp, #8]
   2f20c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f210:	ldr	r0, [pc, #492]	; 2f404 <flatcc_verify_error_string@@Base+0x380>
   2f214:	add	r0, pc, r0
   2f218:	str	r0, [sp, #8]
   2f21c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f220:	ldr	r0, [pc, #472]	; 2f400 <flatcc_verify_error_string@@Base+0x37c>
   2f224:	add	r0, pc, r0
   2f228:	str	r0, [sp, #8]
   2f22c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f230:	ldr	r0, [pc, #452]	; 2f3fc <flatcc_verify_error_string@@Base+0x378>
   2f234:	add	r0, pc, r0
   2f238:	str	r0, [sp, #8]
   2f23c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f240:	ldr	r0, [pc, #432]	; 2f3f8 <flatcc_verify_error_string@@Base+0x374>
   2f244:	add	r0, pc, r0
   2f248:	str	r0, [sp, #8]
   2f24c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f250:	ldr	r0, [pc, #412]	; 2f3f4 <flatcc_verify_error_string@@Base+0x370>
   2f254:	add	r0, pc, r0
   2f258:	str	r0, [sp, #8]
   2f25c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f260:	ldr	r0, [pc, #392]	; 2f3f0 <flatcc_verify_error_string@@Base+0x36c>
   2f264:	add	r0, pc, r0
   2f268:	str	r0, [sp, #8]
   2f26c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f270:	ldr	r0, [pc, #372]	; 2f3ec <flatcc_verify_error_string@@Base+0x368>
   2f274:	add	r0, pc, r0
   2f278:	str	r0, [sp, #8]
   2f27c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f280:	ldr	r0, [pc, #352]	; 2f3e8 <flatcc_verify_error_string@@Base+0x364>
   2f284:	add	r0, pc, r0
   2f288:	str	r0, [sp, #8]
   2f28c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f290:	ldr	r0, [pc, #332]	; 2f3e4 <flatcc_verify_error_string@@Base+0x360>
   2f294:	add	r0, pc, r0
   2f298:	str	r0, [sp, #8]
   2f29c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2a0:	ldr	r0, [pc, #312]	; 2f3e0 <flatcc_verify_error_string@@Base+0x35c>
   2f2a4:	add	r0, pc, r0
   2f2a8:	str	r0, [sp, #8]
   2f2ac:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2b0:	ldr	r0, [pc, #292]	; 2f3dc <flatcc_verify_error_string@@Base+0x358>
   2f2b4:	add	r0, pc, r0
   2f2b8:	str	r0, [sp, #8]
   2f2bc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2c0:	ldr	r0, [pc, #272]	; 2f3d8 <flatcc_verify_error_string@@Base+0x354>
   2f2c4:	add	r0, pc, r0
   2f2c8:	str	r0, [sp, #8]
   2f2cc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2d0:	ldr	r0, [pc, #252]	; 2f3d4 <flatcc_verify_error_string@@Base+0x350>
   2f2d4:	add	r0, pc, r0
   2f2d8:	str	r0, [sp, #8]
   2f2dc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2e0:	ldr	r0, [pc, #232]	; 2f3d0 <flatcc_verify_error_string@@Base+0x34c>
   2f2e4:	add	r0, pc, r0
   2f2e8:	str	r0, [sp, #8]
   2f2ec:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f2f0:	ldr	r0, [pc, #212]	; 2f3cc <flatcc_verify_error_string@@Base+0x348>
   2f2f4:	add	r0, pc, r0
   2f2f8:	str	r0, [sp, #8]
   2f2fc:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f300:	ldr	r0, [pc, #192]	; 2f3c8 <flatcc_verify_error_string@@Base+0x344>
   2f304:	add	r0, pc, r0
   2f308:	str	r0, [sp, #8]
   2f30c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f310:	ldr	r0, [pc, #172]	; 2f3c4 <flatcc_verify_error_string@@Base+0x340>
   2f314:	add	r0, pc, r0
   2f318:	str	r0, [sp, #8]
   2f31c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f320:	ldr	r0, [pc, #152]	; 2f3c0 <flatcc_verify_error_string@@Base+0x33c>
   2f324:	add	r0, pc, r0
   2f328:	str	r0, [sp, #8]
   2f32c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f330:	ldr	r0, [pc, #132]	; 2f3bc <flatcc_verify_error_string@@Base+0x338>
   2f334:	add	r0, pc, r0
   2f338:	str	r0, [sp, #8]
   2f33c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f340:	ldr	r0, [pc, #112]	; 2f3b8 <flatcc_verify_error_string@@Base+0x334>
   2f344:	add	r0, pc, r0
   2f348:	str	r0, [sp, #8]
   2f34c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f350:	ldr	r0, [pc, #92]	; 2f3b4 <flatcc_verify_error_string@@Base+0x330>
   2f354:	add	r0, pc, r0
   2f358:	str	r0, [sp, #8]
   2f35c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f360:	ldr	r0, [pc, #72]	; 2f3b0 <flatcc_verify_error_string@@Base+0x32c>
   2f364:	add	r0, pc, r0
   2f368:	str	r0, [sp, #8]
   2f36c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f370:	ldr	r0, [pc, #52]	; 2f3ac <flatcc_verify_error_string@@Base+0x328>
   2f374:	add	r0, pc, r0
   2f378:	str	r0, [sp, #8]
   2f37c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f380:	ldr	r0, [pc, #32]	; 2f3a8 <flatcc_verify_error_string@@Base+0x324>
   2f384:	add	r0, pc, r0
   2f388:	str	r0, [sp, #8]
   2f38c:	b	2f39c <flatcc_verify_error_string@@Base+0x318>
   2f390:	ldr	r0, [pc, #164]	; 2f43c <flatcc_verify_error_string@@Base+0x3b8>
   2f394:	add	r0, pc, r0
   2f398:	str	r0, [sp, #8]
   2f39c:	ldr	r0, [sp, #8]
   2f3a0:	add	sp, sp, #12
   2f3a4:	bx	lr
   2f3a8:	muleq	r0, r7, fp
   2f3ac:	andeq	r8, r0, sp, lsl #23
   2f3b0:	andeq	r8, r0, r9, ror #22
   2f3b4:	andeq	r8, r0, r4, asr fp
   2f3b8:	andeq	r8, r0, sp, lsr fp
   2f3bc:	andeq	r8, r0, r8, lsr fp
   2f3c0:	andeq	r8, r0, r2, lsr #22
   2f3c4:	andeq	r8, r0, sl, lsl #22
   2f3c8:	andeq	r8, r0, r2, lsl #22
   2f3cc:	strdeq	r8, [r0], -r7
   2f3d0:	strdeq	r8, [r0], -r3
   2f3d4:	ldrdeq	r8, [r0], -r4
   2f3d8:			; <UNDEFINED> instruction: 0x00008abb
   2f3dc:	andeq	r8, r0, r2, lsr #21
   2f3e0:	andeq	r8, r0, pc, ror sl
   2f3e4:	andeq	r8, r0, r3, ror #20
   2f3e8:	andeq	r8, r0, fp, asr sl
   2f3ec:	andeq	r8, r0, fp, lsr #23
   2f3f0:	andeq	r8, r0, r7, ror #20
   2f3f4:	andeq	r8, r0, pc, asr #20
   2f3f8:	andeq	r8, r0, r7, lsr sl
   2f3fc:	andeq	r8, r0, r0, lsr #20
   2f400:	andeq	r8, r0, r6, lsl sl
   2f404:	andeq	r8, r0, sp, lsl #20
   2f408:	andeq	r8, r0, r5, lsl #20
   2f40c:	andeq	r8, r0, r4, lsl #20
   2f410:	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   2f414:	strdeq	r8, [r0], -fp
   2f418:	strdeq	r8, [r0], -r7
   2f41c:	andeq	r8, r0, ip, ror #19
   2f420:	ldrdeq	r8, [r0], -sp
   2f424:	andeq	r8, r0, sl, asr #19
   2f428:	andeq	r8, r0, r3, asr #19
   2f42c:			; <UNDEFINED> instruction: 0x000089b9
   2f430:			; <UNDEFINED> instruction: 0x000089b5
   2f434:	andeq	r8, r0, sp, lsr #19
   2f438:			; <UNDEFINED> instruction: 0x000089ba
   2f43c:	muleq	r0, r5, fp

0002f440 <flatcc_verify_field@@Base>:
   2f440:	push	{fp, lr}
   2f444:	mov	fp, sp
   2f448:	sub	sp, sp, #24
   2f44c:	str	r0, [fp, #-8]
   2f450:	strh	r1, [fp, #-10]
   2f454:	str	r2, [sp, #8]
   2f458:	strh	r3, [sp, #6]
   2f45c:	ldr	r0, [fp, #-8]
   2f460:	ldrh	r1, [fp, #-10]
   2f464:	ldr	r3, [sp, #8]
   2f468:	uxth	r1, r1
   2f46c:	movw	r2, #0
   2f470:	ldrh	ip, [sp, #6]
   2f474:	str	ip, [sp]
   2f478:	bl	2f4c0 <flatcc_verify_field@@Base+0x80>
   2f47c:	cmp	r0, #0
   2f480:	beq	2f4ac <flatcc_verify_field@@Base+0x6c>
   2f484:	ldr	r0, [fp, #-8]
   2f488:	ldrh	r1, [fp, #-10]
   2f48c:	ldr	r3, [sp, #8]
   2f490:	uxth	r1, r1
   2f494:	movw	r2, #0
   2f498:	ldrh	ip, [sp, #6]
   2f49c:	str	ip, [sp]
   2f4a0:	bl	2f4c0 <flatcc_verify_field@@Base+0x80>
   2f4a4:	str	r0, [fp, #-4]
   2f4a8:	b	2f4b4 <flatcc_verify_field@@Base+0x74>
   2f4ac:	movw	r0, #0
   2f4b0:	str	r0, [fp, #-4]
   2f4b4:	ldr	r0, [fp, #-4]
   2f4b8:	mov	sp, fp
   2f4bc:	pop	{fp, pc}
   2f4c0:	push	{fp, lr}
   2f4c4:	mov	fp, sp
   2f4c8:	sub	sp, sp, #56	; 0x38
   2f4cc:	ldr	ip, [fp, #8]
   2f4d0:	str	r0, [fp, #-8]
   2f4d4:	strh	r1, [fp, #-10]
   2f4d8:	str	r2, [fp, #-16]
   2f4dc:	str	r3, [fp, #-20]	; 0xffffffec
   2f4e0:	strh	ip, [fp, #-22]	; 0xffffffea
   2f4e4:	ldr	r0, [fp, #-8]
   2f4e8:	ldr	r0, [r0]
   2f4ec:	str	r0, [sp, #16]
   2f4f0:	ldr	r0, [fp, #-8]
   2f4f4:	ldrh	r1, [fp, #-10]
   2f4f8:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   2f4fc:	strh	r0, [sp, #22]
   2f500:	ldrsh	r0, [sp, #22]
   2f504:	cmp	r0, #0
   2f508:	bne	2f558 <flatcc_verify_field@@Base+0x118>
   2f50c:	b	2f510 <flatcc_verify_field@@Base+0xd0>
   2f510:	ldr	r0, [fp, #-16]
   2f514:	cmp	r0, #0
   2f518:	movw	r0, #0
   2f51c:	movne	r0, #1
   2f520:	mvn	r1, #0
   2f524:	eor	r0, r0, r1
   2f528:	and	r0, r0, #1
   2f52c:	str	r0, [sp, #12]
   2f530:	ldr	r0, [sp, #12]
   2f534:	cmp	r0, #0
   2f538:	bne	2f548 <flatcc_verify_field@@Base+0x108>
   2f53c:	movw	r0, #4
   2f540:	str	r0, [fp, #-4]
   2f544:	b	2f640 <flatcc_verify_field@@Base+0x200>
   2f548:	b	2f54c <flatcc_verify_field@@Base+0x10c>
   2f54c:	movw	r0, #0
   2f550:	str	r0, [fp, #-4]
   2f554:	b	2f640 <flatcc_verify_field@@Base+0x200>
   2f558:	ldrh	r0, [sp, #22]
   2f55c:	str	r0, [sp, #28]
   2f560:	ldr	r0, [sp, #28]
   2f564:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f568:	add	r0, r0, r1
   2f56c:	str	r0, [sp, #24]
   2f570:	ldr	r0, [sp, #24]
   2f574:	ldr	r1, [fp, #-8]
   2f578:	ldrh	r1, [r1, #20]
   2f57c:	cmp	r0, r1
   2f580:	movw	r0, #0
   2f584:	movls	r0, #1
   2f588:	and	r0, r0, #1
   2f58c:	str	r0, [sp, #8]
   2f590:	ldr	r0, [sp, #8]
   2f594:	cmp	r0, #0
   2f598:	bne	2f5a8 <flatcc_verify_field@@Base+0x168>
   2f59c:	movw	r0, #13
   2f5a0:	str	r0, [fp, #-4]
   2f5a4:	b	2f640 <flatcc_verify_field@@Base+0x200>
   2f5a8:	b	2f5ac <flatcc_verify_field@@Base+0x16c>
   2f5ac:	b	2f5b0 <flatcc_verify_field@@Base+0x170>
   2f5b0:	movw	r0, #1
   2f5b4:	str	r0, [sp, #4]
   2f5b8:	ldr	r0, [sp, #4]
   2f5bc:	cmp	r0, #0
   2f5c0:	bne	2f5d0 <flatcc_verify_field@@Base+0x190>
   2f5c4:	movw	r0, #14
   2f5c8:	str	r0, [fp, #-4]
   2f5cc:	b	2f640 <flatcc_verify_field@@Base+0x200>
   2f5d0:	b	2f5d4 <flatcc_verify_field@@Base+0x194>
   2f5d4:	ldr	r0, [fp, #-8]
   2f5d8:	ldr	r0, [r0, #16]
   2f5dc:	ldr	r1, [sp, #16]
   2f5e0:	add	r0, r0, r1
   2f5e4:	ldr	r1, [sp, #28]
   2f5e8:	add	r0, r1, r0
   2f5ec:	str	r0, [sp, #28]
   2f5f0:	ldr	r0, [sp, #28]
   2f5f4:	ldrh	r1, [fp, #-22]	; 0xffffffea
   2f5f8:	sub	r1, r1, #1
   2f5fc:	and	r0, r0, r1
   2f600:	cmp	r0, #0
   2f604:	movw	r0, #0
   2f608:	movne	r0, #1
   2f60c:	mvn	r1, #0
   2f610:	eor	r0, r0, r1
   2f614:	and	r0, r0, #1
   2f618:	str	r0, [sp]
   2f61c:	ldr	r0, [sp]
   2f620:	cmp	r0, #0
   2f624:	bne	2f634 <flatcc_verify_field@@Base+0x1f4>
   2f628:	movw	r0, #12
   2f62c:	str	r0, [fp, #-4]
   2f630:	b	2f640 <flatcc_verify_field@@Base+0x200>
   2f634:	b	2f638 <flatcc_verify_field@@Base+0x1f8>
   2f638:	movw	r0, #0
   2f63c:	str	r0, [fp, #-4]
   2f640:	ldr	r0, [fp, #-4]
   2f644:	mov	sp, fp
   2f648:	pop	{fp, pc}

0002f64c <flatcc_verify_string_field@@Base>:
   2f64c:	push	{fp, lr}
   2f650:	mov	fp, sp
   2f654:	sub	sp, sp, #40	; 0x28
   2f658:	str	r0, [fp, #-8]
   2f65c:	strh	r1, [fp, #-10]
   2f660:	str	r2, [fp, #-16]
   2f664:	ldr	r0, [fp, #-8]
   2f668:	ldrh	r1, [fp, #-10]
   2f66c:	ldr	r2, [fp, #-16]
   2f670:	uxth	r1, r1
   2f674:	add	r3, sp, #20
   2f678:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   2f67c:	str	r0, [sp, #16]
   2f680:	ldr	r0, [sp, #16]
   2f684:	cmp	r0, #0
   2f688:	bne	2f698 <flatcc_verify_string_field@@Base+0x4c>
   2f68c:	ldr	r0, [sp, #20]
   2f690:	cmp	r0, #0
   2f694:	bne	2f6a4 <flatcc_verify_string_field@@Base+0x58>
   2f698:	ldr	r0, [sp, #16]
   2f69c:	str	r0, [fp, #-4]
   2f6a0:	b	2f700 <flatcc_verify_string_field@@Base+0xb4>
   2f6a4:	b	2f6a8 <flatcc_verify_string_field@@Base+0x5c>
   2f6a8:	ldr	r0, [fp, #-8]
   2f6ac:	ldr	r0, [r0]
   2f6b0:	ldr	r1, [fp, #-8]
   2f6b4:	ldr	r1, [r1, #4]
   2f6b8:	ldr	r2, [sp, #20]
   2f6bc:	ldr	r3, [fp, #-8]
   2f6c0:	ldr	r3, [r3]
   2f6c4:	ldr	ip, [sp, #20]
   2f6c8:	str	r0, [sp, #12]
   2f6cc:	mov	r0, r3
   2f6d0:	str	r1, [sp, #8]
   2f6d4:	mov	r1, ip
   2f6d8:	str	r2, [sp, #4]
   2f6dc:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2f6e0:	ldr	r1, [sp, #12]
   2f6e4:	str	r0, [sp]
   2f6e8:	mov	r0, r1
   2f6ec:	ldr	r1, [sp, #8]
   2f6f0:	ldr	r2, [sp, #4]
   2f6f4:	ldr	r3, [sp]
   2f6f8:	bl	2f860 <flatcc_verify_string_field@@Base+0x214>
   2f6fc:	str	r0, [fp, #-4]
   2f700:	ldr	r0, [fp, #-4]
   2f704:	mov	sp, fp
   2f708:	pop	{fp, pc}
   2f70c:	push	{fp, lr}
   2f710:	mov	fp, sp
   2f714:	sub	sp, sp, #48	; 0x30
   2f718:	str	r0, [fp, #-8]
   2f71c:	strh	r1, [fp, #-10]
   2f720:	str	r2, [fp, #-16]
   2f724:	str	r3, [fp, #-20]	; 0xffffffec
   2f728:	ldr	r0, [fp, #-8]
   2f72c:	ldrh	r1, [fp, #-10]
   2f730:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   2f734:	strh	r0, [sp, #18]
   2f738:	ldrsh	r0, [sp, #18]
   2f73c:	cmp	r0, #0
   2f740:	bne	2f774 <flatcc_verify_string_field@@Base+0x128>
   2f744:	ldr	r0, [fp, #-20]	; 0xffffffec
   2f748:	movw	r1, #0
   2f74c:	str	r1, [r0]
   2f750:	ldr	r0, [fp, #-16]
   2f754:	cmp	r0, #0
   2f758:	beq	2f768 <flatcc_verify_string_field@@Base+0x11c>
   2f75c:	movw	r0, #4
   2f760:	str	r0, [fp, #-4]
   2f764:	b	2f854 <flatcc_verify_string_field@@Base+0x208>
   2f768:	movw	r0, #0
   2f76c:	str	r0, [fp, #-4]
   2f770:	b	2f854 <flatcc_verify_string_field@@Base+0x208>
   2f774:	ldrh	r0, [sp, #18]
   2f778:	str	r0, [sp, #24]
   2f77c:	ldr	r0, [sp, #24]
   2f780:	add	r0, r0, #4
   2f784:	str	r0, [sp, #20]
   2f788:	ldr	r0, [sp, #20]
   2f78c:	ldr	r1, [fp, #-8]
   2f790:	ldrh	r1, [r1, #20]
   2f794:	cmp	r0, r1
   2f798:	movw	r0, #0
   2f79c:	movls	r0, #1
   2f7a0:	and	r0, r0, #1
   2f7a4:	str	r0, [sp, #12]
   2f7a8:	ldr	r0, [sp, #12]
   2f7ac:	cmp	r0, #0
   2f7b0:	bne	2f7c0 <flatcc_verify_string_field@@Base+0x174>
   2f7b4:	movw	r0, #13
   2f7b8:	str	r0, [fp, #-4]
   2f7bc:	b	2f854 <flatcc_verify_string_field@@Base+0x208>
   2f7c0:	b	2f7c4 <flatcc_verify_string_field@@Base+0x178>
   2f7c4:	b	2f7c8 <flatcc_verify_string_field@@Base+0x17c>
   2f7c8:	movw	r0, #1
   2f7cc:	str	r0, [sp, #8]
   2f7d0:	ldr	r0, [sp, #8]
   2f7d4:	cmp	r0, #0
   2f7d8:	bne	2f7e8 <flatcc_verify_string_field@@Base+0x19c>
   2f7dc:	movw	r0, #14
   2f7e0:	str	r0, [fp, #-4]
   2f7e4:	b	2f854 <flatcc_verify_string_field@@Base+0x208>
   2f7e8:	b	2f7ec <flatcc_verify_string_field@@Base+0x1a0>
   2f7ec:	ldr	r0, [fp, #-8]
   2f7f0:	ldr	r0, [r0, #16]
   2f7f4:	ldr	r1, [sp, #24]
   2f7f8:	add	r0, r1, r0
   2f7fc:	str	r0, [sp, #24]
   2f800:	ldr	r0, [sp, #24]
   2f804:	and	r0, r0, #3
   2f808:	cmp	r0, #0
   2f80c:	movw	r0, #0
   2f810:	movne	r0, #1
   2f814:	mvn	r1, #0
   2f818:	eor	r0, r0, r1
   2f81c:	and	r0, r0, #1
   2f820:	str	r0, [sp, #4]
   2f824:	ldr	r0, [sp, #4]
   2f828:	cmp	r0, #0
   2f82c:	bne	2f83c <flatcc_verify_string_field@@Base+0x1f0>
   2f830:	movw	r0, #12
   2f834:	str	r0, [fp, #-4]
   2f838:	b	2f854 <flatcc_verify_string_field@@Base+0x208>
   2f83c:	b	2f840 <flatcc_verify_string_field@@Base+0x1f4>
   2f840:	ldr	r0, [sp, #24]
   2f844:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f848:	str	r0, [r1]
   2f84c:	movw	r0, #0
   2f850:	str	r0, [fp, #-4]
   2f854:	ldr	r0, [fp, #-4]
   2f858:	mov	sp, fp
   2f85c:	pop	{fp, pc}
   2f860:	push	{fp, lr}
   2f864:	mov	fp, sp
   2f868:	sub	sp, sp, #40	; 0x28
   2f86c:	str	r0, [fp, #-8]
   2f870:	str	r1, [fp, #-12]
   2f874:	str	r2, [fp, #-16]
   2f878:	str	r3, [sp, #20]
   2f87c:	ldr	r0, [fp, #-12]
   2f880:	ldr	r1, [fp, #-16]
   2f884:	ldr	r2, [sp, #20]
   2f888:	bl	31938 <flatcc_verify_union_vector_field@@Base+0x57c>
   2f88c:	str	r0, [sp, #12]
   2f890:	ldr	r0, [sp, #12]
   2f894:	cmp	r0, #0
   2f898:	bne	2f8a8 <flatcc_verify_string_field@@Base+0x25c>
   2f89c:	movw	r0, #17
   2f8a0:	str	r0, [fp, #-4]
   2f8a4:	b	2f970 <flatcc_verify_string_field@@Base+0x324>
   2f8a8:	b	2f8ac <flatcc_verify_string_field@@Base+0x260>
   2f8ac:	ldr	r0, [sp, #20]
   2f8b0:	ldr	r1, [fp, #-16]
   2f8b4:	add	r0, r1, r0
   2f8b8:	str	r0, [fp, #-16]
   2f8bc:	ldr	r0, [fp, #-8]
   2f8c0:	ldr	r1, [fp, #-16]
   2f8c4:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2f8c8:	str	r0, [sp, #16]
   2f8cc:	ldr	r0, [fp, #-16]
   2f8d0:	add	r0, r0, #4
   2f8d4:	str	r0, [fp, #-16]
   2f8d8:	ldr	r0, [fp, #-12]
   2f8dc:	ldr	r1, [fp, #-16]
   2f8e0:	sub	r0, r0, r1
   2f8e4:	ldr	r1, [sp, #16]
   2f8e8:	add	r1, r1, #1
   2f8ec:	cmp	r0, r1
   2f8f0:	movw	r0, #0
   2f8f4:	movcs	r0, #1
   2f8f8:	and	r0, r0, #1
   2f8fc:	str	r0, [sp, #8]
   2f900:	ldr	r0, [sp, #8]
   2f904:	cmp	r0, #0
   2f908:	bne	2f918 <flatcc_verify_string_field@@Base+0x2cc>
   2f90c:	movw	r0, #8
   2f910:	str	r0, [fp, #-4]
   2f914:	b	2f970 <flatcc_verify_string_field@@Base+0x324>
   2f918:	b	2f91c <flatcc_verify_string_field@@Base+0x2d0>
   2f91c:	b	2f920 <flatcc_verify_string_field@@Base+0x2d4>
   2f920:	ldr	r0, [fp, #-8]
   2f924:	ldr	r1, [fp, #-16]
   2f928:	add	r0, r0, r1
   2f92c:	ldr	r1, [sp, #16]
   2f930:	add	r0, r0, r1
   2f934:	ldrb	r0, [r0]
   2f938:	cmp	r0, #0
   2f93c:	movw	r0, #0
   2f940:	moveq	r0, #1
   2f944:	and	r0, r0, #1
   2f948:	str	r0, [sp, #4]
   2f94c:	ldr	r0, [sp, #4]
   2f950:	cmp	r0, #0
   2f954:	bne	2f964 <flatcc_verify_string_field@@Base+0x318>
   2f958:	movw	r0, #7
   2f95c:	str	r0, [fp, #-4]
   2f960:	b	2f970 <flatcc_verify_string_field@@Base+0x324>
   2f964:	b	2f968 <flatcc_verify_string_field@@Base+0x31c>
   2f968:	movw	r0, #0
   2f96c:	str	r0, [fp, #-4]
   2f970:	ldr	r0, [fp, #-4]
   2f974:	mov	sp, fp
   2f978:	pop	{fp, pc}
   2f97c:	push	{fp, lr}
   2f980:	mov	fp, sp
   2f984:	sub	sp, sp, #8
   2f988:	str	r0, [sp, #4]
   2f98c:	str	r1, [sp]
   2f990:	ldr	r0, [sp, #4]
   2f994:	ldr	r1, [sp]
   2f998:	add	r0, r0, r1
   2f99c:	bl	319bc <flatcc_verify_union_vector_field@@Base+0x600>
   2f9a0:	mov	sp, fp
   2f9a4:	pop	{fp, pc}

0002f9a8 <flatcc_verify_vector_field@@Base>:
   2f9a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f9ac:	add	fp, sp, #24
   2f9b0:	sub	sp, sp, #80	; 0x50
   2f9b4:	ldr	ip, [fp, #12]
   2f9b8:	ldr	lr, [fp, #8]
   2f9bc:	str	r0, [fp, #-32]	; 0xffffffe0
   2f9c0:	strh	r1, [fp, #-34]	; 0xffffffde
   2f9c4:	str	r2, [fp, #-40]	; 0xffffffd8
   2f9c8:	str	r3, [fp, #-44]	; 0xffffffd4
   2f9cc:	strh	lr, [fp, #-46]	; 0xffffffd2
   2f9d0:	str	ip, [sp, #44]	; 0x2c
   2f9d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f9d8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2f9dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2f9e0:	uxth	r1, r1
   2f9e4:	add	r3, sp, #52	; 0x34
   2f9e8:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   2f9ec:	str	r0, [sp, #48]	; 0x30
   2f9f0:	ldr	r0, [sp, #48]	; 0x30
   2f9f4:	cmp	r0, #0
   2f9f8:	bne	2fa08 <flatcc_verify_vector_field@@Base+0x60>
   2f9fc:	ldr	r0, [sp, #52]	; 0x34
   2fa00:	cmp	r0, #0
   2fa04:	bne	2fa14 <flatcc_verify_vector_field@@Base+0x6c>
   2fa08:	ldr	r0, [sp, #48]	; 0x30
   2fa0c:	str	r0, [fp, #-28]	; 0xffffffe4
   2fa10:	b	2fab0 <flatcc_verify_vector_field@@Base+0x108>
   2fa14:	b	2fa18 <flatcc_verify_vector_field@@Base+0x70>
   2fa18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fa1c:	ldr	r0, [r0]
   2fa20:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2fa24:	ldr	r1, [r1, #4]
   2fa28:	ldr	r2, [sp, #52]	; 0x34
   2fa2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fa30:	ldr	r3, [r3]
   2fa34:	ldr	ip, [sp, #52]	; 0x34
   2fa38:	str	r0, [sp, #40]	; 0x28
   2fa3c:	mov	r0, r3
   2fa40:	str	r1, [sp, #36]	; 0x24
   2fa44:	mov	r1, ip
   2fa48:	str	r2, [sp, #32]
   2fa4c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fa50:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2fa54:	ldrh	r2, [fp, #-46]	; 0xffffffd2
   2fa58:	ldr	r3, [fp, #12]
   2fa5c:	ldr	ip, [sp, #40]	; 0x28
   2fa60:	str	r0, [sp, #28]
   2fa64:	mov	r0, ip
   2fa68:	ldr	lr, [sp, #36]	; 0x24
   2fa6c:	str	r1, [sp, #24]
   2fa70:	mov	r1, lr
   2fa74:	ldr	r4, [sp, #32]
   2fa78:	str	r2, [sp, #20]
   2fa7c:	mov	r2, r4
   2fa80:	ldr	r5, [sp, #28]
   2fa84:	str	r3, [sp, #16]
   2fa88:	mov	r3, r5
   2fa8c:	ldr	r6, [sp, #24]
   2fa90:	str	r6, [sp]
   2fa94:	ldr	r7, [sp, #20]
   2fa98:	uxth	r8, r7
   2fa9c:	str	r8, [sp, #4]
   2faa0:	ldr	r8, [sp, #16]
   2faa4:	str	r8, [sp, #8]
   2faa8:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   2faac:	str	r0, [fp, #-28]	; 0xffffffe4
   2fab0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fab4:	sub	sp, fp, #24
   2fab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2fabc:	push	{r4, sl, fp, lr}
   2fac0:	add	fp, sp, #8
   2fac4:	sub	sp, sp, #48	; 0x30
   2fac8:	ldr	ip, [fp, #16]
   2facc:	ldr	lr, [fp, #12]
   2fad0:	ldr	r4, [fp, #8]
   2fad4:	str	r0, [fp, #-16]
   2fad8:	str	r1, [fp, #-20]	; 0xffffffec
   2fadc:	str	r2, [fp, #-24]	; 0xffffffe8
   2fae0:	str	r3, [sp, #28]
   2fae4:	strh	lr, [sp, #26]
   2fae8:	str	r4, [sp, #4]
   2faec:	str	ip, [sp]
   2faf0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2faf4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2faf8:	ldr	r2, [sp, #28]
   2fafc:	ldrh	r3, [sp, #26]
   2fb00:	bl	319f4 <flatcc_verify_union_vector_field@@Base+0x638>
   2fb04:	str	r0, [sp, #16]
   2fb08:	ldr	r0, [sp, #16]
   2fb0c:	cmp	r0, #0
   2fb10:	bne	2fb20 <flatcc_verify_vector_field@@Base+0x178>
   2fb14:	movw	r0, #16
   2fb18:	str	r0, [fp, #-12]
   2fb1c:	b	2fbdc <flatcc_verify_vector_field@@Base+0x234>
   2fb20:	b	2fb24 <flatcc_verify_vector_field@@Base+0x17c>
   2fb24:	ldr	r0, [sp, #28]
   2fb28:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fb2c:	add	r0, r1, r0
   2fb30:	str	r0, [fp, #-24]	; 0xffffffe8
   2fb34:	ldr	r0, [fp, #-16]
   2fb38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fb3c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fb40:	str	r0, [sp, #20]
   2fb44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fb48:	add	r0, r0, #4
   2fb4c:	str	r0, [fp, #-24]	; 0xffffffe8
   2fb50:	ldr	r0, [sp, #20]
   2fb54:	ldr	r1, [fp, #16]
   2fb58:	cmp	r0, r1
   2fb5c:	movw	r0, #0
   2fb60:	movls	r0, #1
   2fb64:	and	r0, r0, #1
   2fb68:	str	r0, [sp, #12]
   2fb6c:	ldr	r0, [sp, #12]
   2fb70:	cmp	r0, #0
   2fb74:	bne	2fb84 <flatcc_verify_vector_field@@Base+0x1dc>
   2fb78:	movw	r0, #25
   2fb7c:	str	r0, [fp, #-12]
   2fb80:	b	2fbdc <flatcc_verify_vector_field@@Base+0x234>
   2fb84:	b	2fb88 <flatcc_verify_vector_field@@Base+0x1e0>
   2fb88:	b	2fb8c <flatcc_verify_vector_field@@Base+0x1e4>
   2fb8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fb90:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fb94:	sub	r0, r0, r1
   2fb98:	ldr	r1, [sp, #20]
   2fb9c:	ldr	r2, [fp, #8]
   2fba0:	mul	r1, r1, r2
   2fba4:	cmp	r0, r1
   2fba8:	movw	r0, #0
   2fbac:	movcs	r0, #1
   2fbb0:	and	r0, r0, #1
   2fbb4:	str	r0, [sp, #8]
   2fbb8:	ldr	r0, [sp, #8]
   2fbbc:	cmp	r0, #0
   2fbc0:	bne	2fbd0 <flatcc_verify_vector_field@@Base+0x228>
   2fbc4:	movw	r0, #26
   2fbc8:	str	r0, [fp, #-12]
   2fbcc:	b	2fbdc <flatcc_verify_vector_field@@Base+0x234>
   2fbd0:	b	2fbd4 <flatcc_verify_vector_field@@Base+0x22c>
   2fbd4:	movw	r0, #0
   2fbd8:	str	r0, [fp, #-12]
   2fbdc:	ldr	r0, [fp, #-12]
   2fbe0:	sub	sp, fp, #8
   2fbe4:	pop	{r4, sl, fp, pc}

0002fbe8 <flatcc_verify_string_vector_field@@Base>:
   2fbe8:	push	{fp, lr}
   2fbec:	mov	fp, sp
   2fbf0:	sub	sp, sp, #40	; 0x28
   2fbf4:	str	r0, [fp, #-8]
   2fbf8:	strh	r1, [fp, #-10]
   2fbfc:	str	r2, [fp, #-16]
   2fc00:	ldr	r0, [fp, #-8]
   2fc04:	ldrh	r1, [fp, #-10]
   2fc08:	ldr	r2, [fp, #-16]
   2fc0c:	uxth	r1, r1
   2fc10:	add	r3, sp, #20
   2fc14:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   2fc18:	str	r0, [sp, #16]
   2fc1c:	ldr	r0, [sp, #16]
   2fc20:	cmp	r0, #0
   2fc24:	bne	2fc34 <flatcc_verify_string_vector_field@@Base+0x4c>
   2fc28:	ldr	r0, [sp, #20]
   2fc2c:	cmp	r0, #0
   2fc30:	bne	2fc40 <flatcc_verify_string_vector_field@@Base+0x58>
   2fc34:	ldr	r0, [sp, #16]
   2fc38:	str	r0, [fp, #-4]
   2fc3c:	b	2fc9c <flatcc_verify_string_vector_field@@Base+0xb4>
   2fc40:	b	2fc44 <flatcc_verify_string_vector_field@@Base+0x5c>
   2fc44:	ldr	r0, [fp, #-8]
   2fc48:	ldr	r0, [r0]
   2fc4c:	ldr	r1, [fp, #-8]
   2fc50:	ldr	r1, [r1, #4]
   2fc54:	ldr	r2, [sp, #20]
   2fc58:	ldr	r3, [fp, #-8]
   2fc5c:	ldr	r3, [r3]
   2fc60:	ldr	ip, [sp, #20]
   2fc64:	str	r0, [sp, #12]
   2fc68:	mov	r0, r3
   2fc6c:	str	r1, [sp, #8]
   2fc70:	mov	r1, ip
   2fc74:	str	r2, [sp, #4]
   2fc78:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fc7c:	ldr	r1, [sp, #12]
   2fc80:	str	r0, [sp]
   2fc84:	mov	r0, r1
   2fc88:	ldr	r1, [sp, #8]
   2fc8c:	ldr	r2, [sp, #4]
   2fc90:	ldr	r3, [sp]
   2fc94:	bl	2fca8 <flatcc_verify_string_vector_field@@Base+0xc0>
   2fc98:	str	r0, [fp, #-4]
   2fc9c:	ldr	r0, [fp, #-4]
   2fca0:	mov	sp, fp
   2fca4:	pop	{fp, pc}
   2fca8:	push	{fp, lr}
   2fcac:	mov	fp, sp
   2fcb0:	sub	sp, sp, #80	; 0x50
   2fcb4:	ldr	ip, [pc, #424]	; 2fe64 <flatcc_verify_string_vector_field@@Base+0x27c>
   2fcb8:	str	r0, [fp, #-8]
   2fcbc:	str	r1, [fp, #-12]
   2fcc0:	str	r2, [fp, #-16]
   2fcc4:	str	r3, [fp, #-20]	; 0xffffffec
   2fcc8:	ldr	r0, [fp, #-8]
   2fccc:	ldr	r1, [fp, #-12]
   2fcd0:	ldr	r2, [fp, #-16]
   2fcd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fcd8:	movw	lr, #4
   2fcdc:	str	lr, [sp]
   2fce0:	movw	lr, #4
   2fce4:	uxth	lr, lr
   2fce8:	str	lr, [sp, #4]
   2fcec:	str	ip, [sp, #8]
   2fcf0:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   2fcf4:	cmp	r0, #0
   2fcf8:	beq	2fd4c <flatcc_verify_string_vector_field@@Base+0x164>
   2fcfc:	ldr	r0, [pc, #352]	; 2fe64 <flatcc_verify_string_vector_field@@Base+0x27c>
   2fd00:	ldr	r1, [fp, #-8]
   2fd04:	ldr	r2, [fp, #-12]
   2fd08:	ldr	r3, [fp, #-16]
   2fd0c:	ldr	ip, [fp, #-20]	; 0xffffffec
   2fd10:	str	r0, [fp, #-32]	; 0xffffffe0
   2fd14:	mov	r0, r1
   2fd18:	mov	r1, r2
   2fd1c:	mov	r2, r3
   2fd20:	mov	r3, ip
   2fd24:	movw	ip, #4
   2fd28:	str	ip, [sp]
   2fd2c:	movw	ip, #4
   2fd30:	uxth	ip, ip
   2fd34:	str	ip, [sp, #4]
   2fd38:	ldr	ip, [fp, #-32]	; 0xffffffe0
   2fd3c:	str	ip, [sp, #8]
   2fd40:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   2fd44:	str	r0, [fp, #-4]
   2fd48:	b	2fe58 <flatcc_verify_string_vector_field@@Base+0x270>
   2fd4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fd50:	ldr	r1, [fp, #-16]
   2fd54:	add	r0, r1, r0
   2fd58:	str	r0, [fp, #-16]
   2fd5c:	ldr	r0, [fp, #-8]
   2fd60:	ldr	r1, [fp, #-16]
   2fd64:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fd68:	str	r0, [fp, #-28]	; 0xffffffe4
   2fd6c:	ldr	r0, [fp, #-16]
   2fd70:	add	r0, r0, #4
   2fd74:	str	r0, [fp, #-16]
   2fd78:	movw	r0, #0
   2fd7c:	str	r0, [fp, #-24]	; 0xffffffe8
   2fd80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fd84:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2fd88:	cmp	r0, r1
   2fd8c:	bcs	2fe50 <flatcc_verify_string_vector_field@@Base+0x268>
   2fd90:	ldr	r0, [fp, #-8]
   2fd94:	ldr	r1, [fp, #-12]
   2fd98:	ldr	r2, [fp, #-16]
   2fd9c:	ldr	r3, [fp, #-8]
   2fda0:	ldr	ip, [fp, #-16]
   2fda4:	str	r0, [fp, #-36]	; 0xffffffdc
   2fda8:	mov	r0, r3
   2fdac:	str	r1, [sp, #40]	; 0x28
   2fdb0:	mov	r1, ip
   2fdb4:	str	r2, [sp, #36]	; 0x24
   2fdb8:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fdbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2fdc0:	str	r0, [sp, #32]
   2fdc4:	mov	r0, r1
   2fdc8:	ldr	r1, [sp, #40]	; 0x28
   2fdcc:	ldr	r2, [sp, #36]	; 0x24
   2fdd0:	ldr	r3, [sp, #32]
   2fdd4:	bl	2f860 <flatcc_verify_string_field@@Base+0x214>
   2fdd8:	cmp	r0, #0
   2fddc:	beq	2fe30 <flatcc_verify_string_vector_field@@Base+0x248>
   2fde0:	ldr	r0, [fp, #-8]
   2fde4:	ldr	r1, [fp, #-12]
   2fde8:	ldr	r2, [fp, #-16]
   2fdec:	ldr	r3, [fp, #-8]
   2fdf0:	ldr	ip, [fp, #-16]
   2fdf4:	str	r0, [sp, #28]
   2fdf8:	mov	r0, r3
   2fdfc:	str	r1, [sp, #24]
   2fe00:	mov	r1, ip
   2fe04:	str	r2, [sp, #20]
   2fe08:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2fe0c:	ldr	r1, [sp, #28]
   2fe10:	str	r0, [sp, #16]
   2fe14:	mov	r0, r1
   2fe18:	ldr	r1, [sp, #24]
   2fe1c:	ldr	r2, [sp, #20]
   2fe20:	ldr	r3, [sp, #16]
   2fe24:	bl	2f860 <flatcc_verify_string_field@@Base+0x214>
   2fe28:	str	r0, [fp, #-4]
   2fe2c:	b	2fe58 <flatcc_verify_string_vector_field@@Base+0x270>
   2fe30:	b	2fe34 <flatcc_verify_string_vector_field@@Base+0x24c>
   2fe34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2fe38:	add	r0, r0, #1
   2fe3c:	str	r0, [fp, #-24]	; 0xffffffe8
   2fe40:	ldr	r0, [fp, #-16]
   2fe44:	add	r0, r0, #4
   2fe48:	str	r0, [fp, #-16]
   2fe4c:	b	2fd80 <flatcc_verify_string_vector_field@@Base+0x198>
   2fe50:	movw	r0, #0
   2fe54:	str	r0, [fp, #-4]
   2fe58:	ldr	r0, [fp, #-4]
   2fe5c:	mov	sp, fp
   2fe60:	pop	{fp, pc}
   2fe64:	svccc	0x00ffffff

0002fe68 <flatcc_verify_table_field@@Base>:
   2fe68:	push	{r4, r5, fp, lr}
   2fe6c:	add	fp, sp, #8
   2fe70:	sub	sp, sp, #64	; 0x40
   2fe74:	str	r0, [fp, #-16]
   2fe78:	strh	r1, [fp, #-18]	; 0xffffffee
   2fe7c:	str	r2, [fp, #-24]	; 0xffffffe8
   2fe80:	str	r3, [fp, #-28]	; 0xffffffe4
   2fe84:	ldr	r0, [fp, #-16]
   2fe88:	ldrh	r1, [fp, #-18]	; 0xffffffee
   2fe8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2fe90:	uxth	r1, r1
   2fe94:	sub	r3, fp, #32
   2fe98:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   2fe9c:	str	r0, [sp, #36]	; 0x24
   2fea0:	ldr	r0, [sp, #36]	; 0x24
   2fea4:	cmp	r0, #0
   2fea8:	bne	2feb8 <flatcc_verify_table_field@@Base+0x50>
   2feac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2feb0:	cmp	r0, #0
   2feb4:	bne	2fec4 <flatcc_verify_table_field@@Base+0x5c>
   2feb8:	ldr	r0, [sp, #36]	; 0x24
   2febc:	str	r0, [fp, #-12]
   2fec0:	b	2ff4c <flatcc_verify_table_field@@Base+0xe4>
   2fec4:	b	2fec8 <flatcc_verify_table_field@@Base+0x60>
   2fec8:	ldr	r0, [fp, #-16]
   2fecc:	ldr	r0, [r0]
   2fed0:	ldr	r1, [fp, #-16]
   2fed4:	ldr	r1, [r1, #4]
   2fed8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2fedc:	ldr	r3, [fp, #-16]
   2fee0:	ldr	r3, [r3]
   2fee4:	ldr	ip, [fp, #-32]	; 0xffffffe0
   2fee8:	str	r0, [sp, #32]
   2feec:	mov	r0, r3
   2fef0:	str	r1, [sp, #28]
   2fef4:	mov	r1, ip
   2fef8:	str	r2, [sp, #24]
   2fefc:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   2ff00:	ldr	r1, [fp, #-16]
   2ff04:	ldr	r1, [r1, #8]
   2ff08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ff0c:	ldr	r3, [sp, #32]
   2ff10:	str	r0, [sp, #20]
   2ff14:	mov	r0, r3
   2ff18:	ldr	ip, [sp, #28]
   2ff1c:	str	r1, [sp, #16]
   2ff20:	mov	r1, ip
   2ff24:	ldr	lr, [sp, #24]
   2ff28:	str	r2, [sp, #12]
   2ff2c:	mov	r2, lr
   2ff30:	ldr	r3, [sp, #20]
   2ff34:	ldr	r4, [sp, #16]
   2ff38:	str	r4, [sp]
   2ff3c:	ldr	r5, [sp, #12]
   2ff40:	str	r5, [sp, #4]
   2ff44:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   2ff48:	str	r0, [fp, #-12]
   2ff4c:	ldr	r0, [fp, #-12]
   2ff50:	sub	sp, fp, #8
   2ff54:	pop	{r4, r5, fp, pc}
   2ff58:	push	{fp, lr}
   2ff5c:	mov	fp, sp
   2ff60:	sub	sp, sp, #112	; 0x70
   2ff64:	ldr	ip, [fp, #12]
   2ff68:	ldr	lr, [fp, #8]
   2ff6c:	str	r0, [fp, #-8]
   2ff70:	str	r1, [fp, #-12]
   2ff74:	str	r2, [fp, #-16]
   2ff78:	str	r3, [fp, #-20]	; 0xffffffec
   2ff7c:	str	lr, [sp, #24]
   2ff80:	str	ip, [sp, #20]
   2ff84:	ldr	r0, [fp, #8]
   2ff88:	sub	r0, r0, #1
   2ff8c:	str	r0, [fp, #-44]	; 0xffffffd4
   2ff90:	str	r0, [sp, #56]	; 0x38
   2ff94:	ldr	r0, [sp, #56]	; 0x38
   2ff98:	cmp	r0, #0
   2ff9c:	bne	2ffac <flatcc_verify_table_field@@Base+0x144>
   2ffa0:	movw	r0, #3
   2ffa4:	str	r0, [fp, #-4]
   2ffa8:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   2ffac:	b	2ffb0 <flatcc_verify_table_field@@Base+0x148>
   2ffb0:	b	2ffb4 <flatcc_verify_table_field@@Base+0x14c>
   2ffb4:	ldr	r0, [fp, #-12]
   2ffb8:	ldr	r1, [fp, #-16]
   2ffbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ffc0:	bl	31938 <flatcc_verify_union_vector_field@@Base+0x57c>
   2ffc4:	str	r0, [sp, #52]	; 0x34
   2ffc8:	ldr	r0, [sp, #52]	; 0x34
   2ffcc:	cmp	r0, #0
   2ffd0:	bne	2ffe0 <flatcc_verify_table_field@@Base+0x178>
   2ffd4:	movw	r0, #15
   2ffd8:	str	r0, [fp, #-4]
   2ffdc:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   2ffe0:	b	2ffe4 <flatcc_verify_table_field@@Base+0x17c>
   2ffe4:	ldr	r0, [fp, #-16]
   2ffe8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2ffec:	add	r0, r0, r1
   2fff0:	str	r0, [fp, #-36]	; 0xffffffdc
   2fff4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2fff8:	ldr	r1, [fp, #-8]
   2fffc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   30000:	str	r0, [sp, #16]
   30004:	mov	r0, r1
   30008:	mov	r1, r2
   3000c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30010:	ldr	r1, [sp, #16]
   30014:	sub	r0, r1, r0
   30018:	str	r0, [fp, #-24]	; 0xffffffe8
   3001c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30020:	cmp	r0, #0
   30024:	movw	r0, #0
   30028:	str	r0, [sp, #12]
   3002c:	blt	30050 <flatcc_verify_table_field@@Base+0x1e8>
   30030:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30034:	and	r0, r0, #1
   30038:	cmp	r0, #0
   3003c:	movw	r0, #0
   30040:	movne	r0, #1
   30044:	mvn	r1, #0
   30048:	eor	r0, r0, r1
   3004c:	str	r0, [sp, #12]
   30050:	ldr	r0, [sp, #12]
   30054:	and	r0, r0, #1
   30058:	str	r0, [sp, #48]	; 0x30
   3005c:	ldr	r0, [sp, #48]	; 0x30
   30060:	cmp	r0, #0
   30064:	bne	30074 <flatcc_verify_table_field@@Base+0x20c>
   30068:	movw	r0, #29
   3006c:	str	r0, [fp, #-4]
   30070:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   30074:	b	30078 <flatcc_verify_table_field@@Base+0x210>
   30078:	b	3007c <flatcc_verify_table_field@@Base+0x214>
   3007c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30080:	add	r0, r0, #2
   30084:	ldr	r1, [fp, #-12]
   30088:	cmp	r0, r1
   3008c:	movw	r0, #0
   30090:	movls	r0, #1
   30094:	and	r0, r0, #1
   30098:	str	r0, [sp, #44]	; 0x2c
   3009c:	ldr	r0, [sp, #44]	; 0x2c
   300a0:	cmp	r0, #0
   300a4:	bne	300b4 <flatcc_verify_table_field@@Base+0x24c>
   300a8:	movw	r0, #27
   300ac:	str	r0, [fp, #-4]
   300b0:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   300b4:	b	300b8 <flatcc_verify_table_field@@Base+0x250>
   300b8:	ldr	r0, [fp, #-8]
   300bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   300c0:	bl	31ab4 <flatcc_verify_union_vector_field@@Base+0x6f8>
   300c4:	strh	r0, [fp, #-30]	; 0xffffffe2
   300c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   300cc:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   300d0:	add	r0, r0, r1
   300d4:	str	r0, [fp, #-28]	; 0xffffffe4
   300d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   300dc:	ldr	r1, [fp, #-12]
   300e0:	cmp	r0, r1
   300e4:	movw	r0, #0
   300e8:	str	r0, [sp, #8]
   300ec:	bhi	30110 <flatcc_verify_table_field@@Base+0x2a8>
   300f0:	ldrh	r0, [fp, #-30]	; 0xffffffe2
   300f4:	and	r0, r0, #1
   300f8:	cmp	r0, #0
   300fc:	movw	r0, #0
   30100:	movne	r0, #1
   30104:	mvn	r1, #0
   30108:	eor	r0, r0, r1
   3010c:	str	r0, [sp, #8]
   30110:	ldr	r0, [sp, #8]
   30114:	and	r0, r0, #1
   30118:	str	r0, [sp, #40]	; 0x28
   3011c:	ldr	r0, [sp, #40]	; 0x28
   30120:	cmp	r0, #0
   30124:	bne	30134 <flatcc_verify_table_field@@Base+0x2cc>
   30128:	movw	r0, #30
   3012c:	str	r0, [fp, #-4]
   30130:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   30134:	b	30138 <flatcc_verify_table_field@@Base+0x2d0>
   30138:	b	3013c <flatcc_verify_table_field@@Base+0x2d4>
   3013c:	movw	r0, #1
   30140:	str	r0, [sp, #36]	; 0x24
   30144:	ldr	r0, [sp, #36]	; 0x24
   30148:	cmp	r0, #0
   3014c:	bne	3015c <flatcc_verify_table_field@@Base+0x2f4>
   30150:	movw	r0, #31
   30154:	str	r0, [fp, #-4]
   30158:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   3015c:	b	30160 <flatcc_verify_table_field@@Base+0x2f8>
   30160:	b	30164 <flatcc_verify_table_field@@Base+0x2fc>
   30164:	ldrh	r0, [fp, #-30]	; 0xffffffe2
   30168:	cmp	r0, #4
   3016c:	movw	r0, #0
   30170:	movcs	r0, #1
   30174:	and	r0, r0, #1
   30178:	str	r0, [sp, #32]
   3017c:	ldr	r0, [sp, #32]
   30180:	cmp	r0, #0
   30184:	bne	30194 <flatcc_verify_table_field@@Base+0x32c>
   30188:	movw	r0, #28
   3018c:	str	r0, [fp, #-4]
   30190:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   30194:	b	30198 <flatcc_verify_table_field@@Base+0x330>
   30198:	ldr	r0, [fp, #-8]
   3019c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   301a0:	add	r1, r1, #2
   301a4:	bl	31ab4 <flatcc_verify_union_vector_field@@Base+0x6f8>
   301a8:	strh	r0, [fp, #-32]	; 0xffffffe0
   301ac:	ldr	r0, [fp, #-12]
   301b0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   301b4:	sub	r0, r0, r1
   301b8:	ldrh	r1, [fp, #-32]	; 0xffffffe0
   301bc:	cmp	r0, r1
   301c0:	movw	r0, #0
   301c4:	movcs	r0, #1
   301c8:	and	r0, r0, #1
   301cc:	str	r0, [sp, #28]
   301d0:	ldr	r0, [sp, #28]
   301d4:	cmp	r0, #0
   301d8:	bne	301e8 <flatcc_verify_table_field@@Base+0x380>
   301dc:	movw	r0, #20
   301e0:	str	r0, [fp, #-4]
   301e4:	b	30228 <flatcc_verify_table_field@@Base+0x3c0>
   301e8:	b	301ec <flatcc_verify_table_field@@Base+0x384>
   301ec:	ldr	r0, [fp, #-8]
   301f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   301f4:	add	r0, r0, r1
   301f8:	str	r0, [fp, #-40]	; 0xffffffd8
   301fc:	ldr	r0, [fp, #-8]
   30200:	str	r0, [fp, #-52]	; 0xffffffcc
   30204:	ldr	r0, [fp, #-12]
   30208:	str	r0, [fp, #-48]	; 0xffffffd0
   3020c:	ldr	r0, [fp, #12]
   30210:	sub	r1, fp, #52	; 0x34
   30214:	str	r0, [sp, #4]
   30218:	mov	r0, r1
   3021c:	ldr	r1, [sp, #4]
   30220:	blx	r1
   30224:	str	r0, [fp, #-4]
   30228:	ldr	r0, [fp, #-4]
   3022c:	mov	sp, fp
   30230:	pop	{fp, pc}

00030234 <flatcc_verify_table_vector_field@@Base>:
   30234:	push	{r4, r5, fp, lr}
   30238:	add	fp, sp, #8
   3023c:	sub	sp, sp, #64	; 0x40
   30240:	str	r0, [fp, #-16]
   30244:	strh	r1, [fp, #-18]	; 0xffffffee
   30248:	str	r2, [fp, #-24]	; 0xffffffe8
   3024c:	str	r3, [fp, #-28]	; 0xffffffe4
   30250:	ldr	r0, [fp, #-16]
   30254:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30258:	ldr	r2, [fp, #-24]	; 0xffffffe8
   3025c:	uxth	r1, r1
   30260:	sub	r3, fp, #32
   30264:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   30268:	str	r0, [sp, #36]	; 0x24
   3026c:	ldr	r0, [sp, #36]	; 0x24
   30270:	cmp	r0, #0
   30274:	bne	30284 <flatcc_verify_table_vector_field@@Base+0x50>
   30278:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3027c:	cmp	r0, #0
   30280:	bne	30290 <flatcc_verify_table_vector_field@@Base+0x5c>
   30284:	ldr	r0, [sp, #36]	; 0x24
   30288:	str	r0, [fp, #-12]
   3028c:	b	30318 <flatcc_verify_table_vector_field@@Base+0xe4>
   30290:	b	30294 <flatcc_verify_table_vector_field@@Base+0x60>
   30294:	ldr	r0, [fp, #-16]
   30298:	ldr	r0, [r0]
   3029c:	ldr	r1, [fp, #-16]
   302a0:	ldr	r1, [r1, #4]
   302a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   302a8:	ldr	r3, [fp, #-16]
   302ac:	ldr	r3, [r3]
   302b0:	ldr	ip, [fp, #-32]	; 0xffffffe0
   302b4:	str	r0, [sp, #32]
   302b8:	mov	r0, r3
   302bc:	str	r1, [sp, #28]
   302c0:	mov	r1, ip
   302c4:	str	r2, [sp, #24]
   302c8:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   302cc:	ldr	r1, [fp, #-16]
   302d0:	ldr	r1, [r1, #8]
   302d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   302d8:	ldr	r3, [sp, #32]
   302dc:	str	r0, [sp, #20]
   302e0:	mov	r0, r3
   302e4:	ldr	ip, [sp, #28]
   302e8:	str	r1, [sp, #16]
   302ec:	mov	r1, ip
   302f0:	ldr	lr, [sp, #24]
   302f4:	str	r2, [sp, #12]
   302f8:	mov	r2, lr
   302fc:	ldr	r3, [sp, #20]
   30300:	ldr	r4, [sp, #16]
   30304:	str	r4, [sp]
   30308:	ldr	r5, [sp, #12]
   3030c:	str	r5, [sp, #4]
   30310:	bl	30324 <flatcc_verify_table_vector_field@@Base+0xf0>
   30314:	str	r0, [fp, #-12]
   30318:	ldr	r0, [fp, #-12]
   3031c:	sub	sp, fp, #8
   30320:	pop	{r4, r5, fp, pc}
   30324:	push	{r4, r5, fp, lr}
   30328:	add	fp, sp, #8
   3032c:	sub	sp, sp, #112	; 0x70
   30330:	ldr	ip, [fp, #12]
   30334:	ldr	lr, [fp, #8]
   30338:	str	r0, [fp, #-16]
   3033c:	str	r1, [fp, #-20]	; 0xffffffec
   30340:	str	r2, [fp, #-24]	; 0xffffffe8
   30344:	str	r3, [fp, #-28]	; 0xffffffe4
   30348:	str	lr, [fp, #-44]	; 0xffffffd4
   3034c:	str	ip, [fp, #-48]	; 0xffffffd0
   30350:	ldr	r0, [fp, #8]
   30354:	mvn	r1, #0
   30358:	add	r1, r0, r1
   3035c:	str	r1, [fp, #8]
   30360:	cmp	r0, #0
   30364:	movw	r0, #0
   30368:	movgt	r0, #1
   3036c:	and	r0, r0, #1
   30370:	str	r0, [fp, #-40]	; 0xffffffd8
   30374:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30378:	cmp	r0, #0
   3037c:	bne	3038c <flatcc_verify_table_vector_field@@Base+0x158>
   30380:	movw	r0, #3
   30384:	str	r0, [fp, #-12]
   30388:	b	3058c <flatcc_verify_table_vector_field@@Base+0x358>
   3038c:	b	30390 <flatcc_verify_table_vector_field@@Base+0x15c>
   30390:	ldr	r0, [pc, #512]	; 30598 <flatcc_verify_table_vector_field@@Base+0x364>
   30394:	ldr	r1, [fp, #-16]
   30398:	ldr	r2, [fp, #-20]	; 0xffffffec
   3039c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   303a0:	ldr	ip, [fp, #-28]	; 0xffffffe4
   303a4:	str	r0, [fp, #-52]	; 0xffffffcc
   303a8:	mov	r0, r1
   303ac:	mov	r1, r2
   303b0:	mov	r2, r3
   303b4:	mov	r3, ip
   303b8:	movw	ip, #4
   303bc:	str	ip, [sp]
   303c0:	movw	ip, #4
   303c4:	uxth	ip, ip
   303c8:	str	ip, [sp, #4]
   303cc:	ldr	ip, [fp, #-52]	; 0xffffffcc
   303d0:	str	ip, [sp, #8]
   303d4:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   303d8:	cmp	r0, #0
   303dc:	beq	30430 <flatcc_verify_table_vector_field@@Base+0x1fc>
   303e0:	ldr	r0, [pc, #432]	; 30598 <flatcc_verify_table_vector_field@@Base+0x364>
   303e4:	ldr	r1, [fp, #-16]
   303e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   303ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   303f0:	ldr	ip, [fp, #-28]	; 0xffffffe4
   303f4:	str	r0, [fp, #-56]	; 0xffffffc8
   303f8:	mov	r0, r1
   303fc:	mov	r1, r2
   30400:	mov	r2, r3
   30404:	mov	r3, ip
   30408:	movw	ip, #4
   3040c:	str	ip, [sp]
   30410:	movw	ip, #4
   30414:	uxth	ip, ip
   30418:	str	ip, [sp, #4]
   3041c:	ldr	ip, [fp, #-56]	; 0xffffffc8
   30420:	str	ip, [sp, #8]
   30424:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   30428:	str	r0, [fp, #-12]
   3042c:	b	3058c <flatcc_verify_table_vector_field@@Base+0x358>
   30430:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30434:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30438:	add	r0, r1, r0
   3043c:	str	r0, [fp, #-24]	; 0xffffffe8
   30440:	ldr	r0, [fp, #-16]
   30444:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30448:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   3044c:	str	r0, [fp, #-36]	; 0xffffffdc
   30450:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30454:	add	r0, r0, #4
   30458:	str	r0, [fp, #-24]	; 0xffffffe8
   3045c:	movw	r0, #0
   30460:	str	r0, [fp, #-32]	; 0xffffffe0
   30464:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30468:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3046c:	cmp	r0, r1
   30470:	bcs	30584 <flatcc_verify_table_vector_field@@Base+0x350>
   30474:	ldr	r0, [fp, #-16]
   30478:	ldr	r1, [fp, #-20]	; 0xffffffec
   3047c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30480:	ldr	r3, [fp, #-16]
   30484:	ldr	ip, [fp, #-24]	; 0xffffffe8
   30488:	str	r0, [sp, #60]	; 0x3c
   3048c:	mov	r0, r3
   30490:	str	r1, [sp, #56]	; 0x38
   30494:	mov	r1, ip
   30498:	str	r2, [sp, #52]	; 0x34
   3049c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   304a0:	ldr	r1, [fp, #8]
   304a4:	ldr	r2, [fp, #12]
   304a8:	ldr	r3, [sp, #60]	; 0x3c
   304ac:	str	r0, [sp, #48]	; 0x30
   304b0:	mov	r0, r3
   304b4:	ldr	ip, [sp, #56]	; 0x38
   304b8:	str	r1, [sp, #44]	; 0x2c
   304bc:	mov	r1, ip
   304c0:	ldr	lr, [sp, #52]	; 0x34
   304c4:	str	r2, [sp, #40]	; 0x28
   304c8:	mov	r2, lr
   304cc:	ldr	r3, [sp, #48]	; 0x30
   304d0:	ldr	r4, [sp, #44]	; 0x2c
   304d4:	str	r4, [sp]
   304d8:	ldr	r5, [sp, #40]	; 0x28
   304dc:	str	r5, [sp, #4]
   304e0:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   304e4:	cmp	r0, #0
   304e8:	beq	30564 <flatcc_verify_table_vector_field@@Base+0x330>
   304ec:	ldr	r0, [fp, #-16]
   304f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   304f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   304f8:	ldr	r3, [fp, #-16]
   304fc:	ldr	ip, [fp, #-24]	; 0xffffffe8
   30500:	str	r0, [sp, #36]	; 0x24
   30504:	mov	r0, r3
   30508:	str	r1, [sp, #32]
   3050c:	mov	r1, ip
   30510:	str	r2, [sp, #28]
   30514:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30518:	ldr	r1, [fp, #8]
   3051c:	ldr	r2, [fp, #12]
   30520:	ldr	r3, [sp, #36]	; 0x24
   30524:	str	r0, [sp, #24]
   30528:	mov	r0, r3
   3052c:	ldr	ip, [sp, #32]
   30530:	str	r1, [sp, #20]
   30534:	mov	r1, ip
   30538:	ldr	lr, [sp, #28]
   3053c:	str	r2, [sp, #16]
   30540:	mov	r2, lr
   30544:	ldr	r3, [sp, #24]
   30548:	ldr	r4, [sp, #20]
   3054c:	str	r4, [sp]
   30550:	ldr	r5, [sp, #16]
   30554:	str	r5, [sp, #4]
   30558:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   3055c:	str	r0, [fp, #-12]
   30560:	b	3058c <flatcc_verify_table_vector_field@@Base+0x358>
   30564:	b	30568 <flatcc_verify_table_vector_field@@Base+0x334>
   30568:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3056c:	add	r0, r0, #1
   30570:	str	r0, [fp, #-32]	; 0xffffffe0
   30574:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30578:	add	r0, r0, #4
   3057c:	str	r0, [fp, #-24]	; 0xffffffe8
   30580:	b	30464 <flatcc_verify_table_vector_field@@Base+0x230>
   30584:	movw	r0, #0
   30588:	str	r0, [fp, #-12]
   3058c:	ldr	r0, [fp, #-12]
   30590:	sub	sp, fp, #8
   30594:	pop	{r4, r5, fp, pc}
   30598:	svccc	0x00ffffff

0003059c <flatcc_verify_union_table@@Base>:
   3059c:	push	{fp, lr}
   305a0:	mov	fp, sp
   305a4:	sub	sp, sp, #16
   305a8:	str	r0, [fp, #-4]
   305ac:	str	r1, [sp, #8]
   305b0:	ldr	r0, [fp, #-4]
   305b4:	ldr	r0, [r0]
   305b8:	ldr	r1, [fp, #-4]
   305bc:	ldr	r1, [r1, #4]
   305c0:	ldr	r2, [fp, #-4]
   305c4:	ldr	r2, [r2, #16]
   305c8:	ldr	r3, [fp, #-4]
   305cc:	ldr	r3, [r3, #20]
   305d0:	ldr	ip, [fp, #-4]
   305d4:	ldr	ip, [ip, #8]
   305d8:	ldr	lr, [sp, #8]
   305dc:	str	ip, [sp]
   305e0:	str	lr, [sp, #4]
   305e4:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   305e8:	mov	sp, fp
   305ec:	pop	{fp, pc}

000305f0 <flatcc_verify_union_struct@@Base>:
   305f0:	push	{fp, lr}
   305f4:	mov	fp, sp
   305f8:	sub	sp, sp, #16
   305fc:	str	r0, [fp, #-4]
   30600:	str	r1, [sp, #8]
   30604:	strh	r2, [sp, #6]
   30608:	ldr	r0, [fp, #-4]
   3060c:	ldr	r0, [r0, #4]
   30610:	ldr	r1, [fp, #-4]
   30614:	ldr	r1, [r1, #16]
   30618:	ldr	r2, [fp, #-4]
   3061c:	ldr	r2, [r2, #20]
   30620:	ldr	r3, [sp, #8]
   30624:	ldrh	ip, [sp, #6]
   30628:	str	ip, [sp]
   3062c:	bl	30638 <flatcc_verify_union_struct@@Base+0x48>
   30630:	mov	sp, fp
   30634:	pop	{fp, pc}
   30638:	sub	sp, sp, #36	; 0x24
   3063c:	ldr	ip, [sp, #36]	; 0x24
   30640:	str	r0, [sp, #28]
   30644:	str	r1, [sp, #24]
   30648:	str	r2, [sp, #20]
   3064c:	str	r3, [sp, #16]
   30650:	strh	ip, [sp, #14]
   30654:	ldr	r0, [sp, #20]
   30658:	cmp	r0, #0
   3065c:	beq	30678 <flatcc_verify_union_struct@@Base+0x88>
   30660:	ldr	r0, [sp, #24]
   30664:	ldr	r1, [sp, #20]
   30668:	add	r0, r0, r1
   3066c:	ldr	r1, [sp, #28]
   30670:	cmp	r0, r1
   30674:	bls	30684 <flatcc_verify_union_struct@@Base+0x94>
   30678:	movw	r0, #18
   3067c:	str	r0, [sp, #32]
   30680:	b	3076c <flatcc_verify_union_struct@@Base+0x17c>
   30684:	ldr	r0, [sp, #20]
   30688:	ldr	r1, [sp, #24]
   3068c:	add	r0, r1, r0
   30690:	str	r0, [sp, #24]
   30694:	ldr	r0, [sp, #24]
   30698:	ldr	r1, [sp, #16]
   3069c:	add	r0, r0, r1
   306a0:	ldr	r1, [sp, #24]
   306a4:	cmp	r0, r1
   306a8:	movw	r0, #0
   306ac:	movcs	r0, #1
   306b0:	and	r0, r0, #1
   306b4:	str	r0, [sp, #8]
   306b8:	ldr	r0, [sp, #8]
   306bc:	cmp	r0, #0
   306c0:	bne	306d0 <flatcc_verify_union_struct@@Base+0xe0>
   306c4:	movw	r0, #10
   306c8:	str	r0, [sp, #32]
   306cc:	b	3076c <flatcc_verify_union_struct@@Base+0x17c>
   306d0:	b	306d4 <flatcc_verify_union_struct@@Base+0xe4>
   306d4:	b	306d8 <flatcc_verify_union_struct@@Base+0xe8>
   306d8:	ldr	r0, [sp, #24]
   306dc:	ldr	r1, [sp, #16]
   306e0:	add	r0, r0, r1
   306e4:	ldr	r1, [sp, #28]
   306e8:	cmp	r0, r1
   306ec:	movw	r0, #0
   306f0:	movls	r0, #1
   306f4:	and	r0, r0, #1
   306f8:	str	r0, [sp, #4]
   306fc:	ldr	r0, [sp, #4]
   30700:	cmp	r0, #0
   30704:	bne	30714 <flatcc_verify_union_struct@@Base+0x124>
   30708:	movw	r0, #9
   3070c:	str	r0, [sp, #32]
   30710:	b	3076c <flatcc_verify_union_struct@@Base+0x17c>
   30714:	b	30718 <flatcc_verify_union_struct@@Base+0x128>
   30718:	b	3071c <flatcc_verify_union_struct@@Base+0x12c>
   3071c:	ldr	r0, [sp, #24]
   30720:	ldrh	r1, [sp, #14]
   30724:	sub	r1, r1, #1
   30728:	and	r0, r0, r1
   3072c:	cmp	r0, #0
   30730:	movw	r0, #0
   30734:	movne	r0, #1
   30738:	mvn	r1, #0
   3073c:	eor	r0, r0, r1
   30740:	and	r0, r0, #1
   30744:	str	r0, [sp]
   30748:	ldr	r0, [sp]
   3074c:	cmp	r0, #0
   30750:	bne	30760 <flatcc_verify_union_struct@@Base+0x170>
   30754:	movw	r0, #11
   30758:	str	r0, [sp, #32]
   3075c:	b	3076c <flatcc_verify_union_struct@@Base+0x17c>
   30760:	b	30764 <flatcc_verify_union_struct@@Base+0x174>
   30764:	movw	r0, #0
   30768:	str	r0, [sp, #32]
   3076c:	ldr	r0, [sp, #32]
   30770:	add	sp, sp, #36	; 0x24
   30774:	bx	lr

00030778 <flatcc_verify_union_string@@Base>:
   30778:	push	{fp, lr}
   3077c:	mov	fp, sp
   30780:	sub	sp, sp, #8
   30784:	str	r0, [sp, #4]
   30788:	ldr	r0, [sp, #4]
   3078c:	ldr	r0, [r0]
   30790:	ldr	r1, [sp, #4]
   30794:	ldr	r1, [r1, #4]
   30798:	ldr	r2, [sp, #4]
   3079c:	ldr	r2, [r2, #16]
   307a0:	ldr	r3, [sp, #4]
   307a4:	ldr	r3, [r3, #20]
   307a8:	bl	2f860 <flatcc_verify_string_field@@Base+0x214>
   307ac:	mov	sp, fp
   307b0:	pop	{fp, pc}

000307b4 <flatcc_verify_buffer_header@@Base>:
   307b4:	push	{fp, lr}
   307b8:	mov	fp, sp
   307bc:	sub	sp, sp, #48	; 0x30
   307c0:	str	r0, [fp, #-8]
   307c4:	str	r1, [fp, #-12]
   307c8:	str	r2, [fp, #-16]
   307cc:	ldr	r0, [fp, #-8]
   307d0:	and	r0, r0, #3
   307d4:	cmp	r0, #0
   307d8:	movw	r0, #0
   307dc:	movne	r0, #1
   307e0:	mvn	r1, #0
   307e4:	eor	r0, r0, r1
   307e8:	and	r0, r0, #1
   307ec:	str	r0, [sp, #20]
   307f0:	ldr	r0, [sp, #20]
   307f4:	cmp	r0, #0
   307f8:	bne	30808 <flatcc_verify_buffer_header@@Base+0x54>
   307fc:	movw	r0, #5
   30800:	str	r0, [fp, #-4]
   30804:	b	30908 <flatcc_verify_buffer_header@@Base+0x154>
   30808:	b	3080c <flatcc_verify_buffer_header@@Base+0x58>
   3080c:	b	30810 <flatcc_verify_buffer_header@@Base+0x5c>
   30810:	ldr	r0, [fp, #-12]
   30814:	cmn	r0, #9
   30818:	movw	r0, #0
   3081c:	movls	r0, #1
   30820:	and	r0, r0, #1
   30824:	str	r0, [sp, #16]
   30828:	ldr	r0, [sp, #16]
   3082c:	cmp	r0, #0
   30830:	bne	30840 <flatcc_verify_buffer_header@@Base+0x8c>
   30834:	movw	r0, #6
   30838:	str	r0, [fp, #-4]
   3083c:	b	30908 <flatcc_verify_buffer_header@@Base+0x154>
   30840:	b	30844 <flatcc_verify_buffer_header@@Base+0x90>
   30844:	b	30848 <flatcc_verify_buffer_header@@Base+0x94>
   30848:	ldr	r0, [fp, #-12]
   3084c:	cmp	r0, #8
   30850:	movw	r0, #0
   30854:	movcs	r0, #1
   30858:	and	r0, r0, #1
   3085c:	str	r0, [sp, #12]
   30860:	ldr	r0, [sp, #12]
   30864:	cmp	r0, #0
   30868:	bne	30878 <flatcc_verify_buffer_header@@Base+0xc4>
   3086c:	movw	r0, #1
   30870:	str	r0, [fp, #-4]
   30874:	b	30908 <flatcc_verify_buffer_header@@Base+0x154>
   30878:	b	3087c <flatcc_verify_buffer_header@@Base+0xc8>
   3087c:	ldr	r0, [fp, #-16]
   30880:	movw	r1, #0
   30884:	cmp	r0, r1
   30888:	beq	30900 <flatcc_verify_buffer_header@@Base+0x14c>
   3088c:	ldr	r0, [fp, #-16]
   30890:	bl	30914 <flatcc_verify_buffer_header@@Base+0x160>
   30894:	str	r0, [sp, #24]
   30898:	ldr	r0, [fp, #-8]
   3089c:	movw	r1, #4
   308a0:	bl	30954 <flatcc_verify_buffer_header@@Base+0x1a0>
   308a4:	str	r0, [fp, #-20]	; 0xffffffec
   308a8:	ldr	r0, [sp, #24]
   308ac:	cmp	r0, #0
   308b0:	movw	r0, #1
   308b4:	str	r0, [sp, #4]
   308b8:	beq	308d4 <flatcc_verify_buffer_header@@Base+0x120>
   308bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   308c0:	ldr	r1, [sp, #24]
   308c4:	cmp	r0, r1
   308c8:	movw	r0, #0
   308cc:	moveq	r0, #1
   308d0:	str	r0, [sp, #4]
   308d4:	ldr	r0, [sp, #4]
   308d8:	and	r0, r0, #1
   308dc:	str	r0, [sp, #8]
   308e0:	ldr	r0, [sp, #8]
   308e4:	cmp	r0, #0
   308e8:	bne	308f8 <flatcc_verify_buffer_header@@Base+0x144>
   308ec:	movw	r0, #2
   308f0:	str	r0, [fp, #-4]
   308f4:	b	30908 <flatcc_verify_buffer_header@@Base+0x154>
   308f8:	b	308fc <flatcc_verify_buffer_header@@Base+0x148>
   308fc:	b	30900 <flatcc_verify_buffer_header@@Base+0x14c>
   30900:	movw	r0, #0
   30904:	str	r0, [fp, #-4]
   30908:	ldr	r0, [fp, #-4]
   3090c:	mov	sp, fp
   30910:	pop	{fp, pc}
   30914:	push	{fp, lr}
   30918:	mov	fp, sp
   3091c:	sub	sp, sp, #16
   30920:	str	r0, [fp, #-4]
   30924:	movw	r0, #0
   30928:	str	r0, [sp, #8]
   3092c:	add	r0, sp, #8
   30930:	ldr	r1, [fp, #-4]
   30934:	movw	r2, #4
   30938:	bl	12e38 <strncpy@plt>
   3093c:	ldr	r1, [sp, #8]
   30940:	str	r0, [sp, #4]
   30944:	mov	r0, r1
   30948:	bl	31b20 <flatcc_verify_union_vector_field@@Base+0x764>
   3094c:	mov	sp, fp
   30950:	pop	{fp, pc}
   30954:	push	{fp, lr}
   30958:	mov	fp, sp
   3095c:	sub	sp, sp, #8
   30960:	str	r0, [sp, #4]
   30964:	str	r1, [sp]
   30968:	ldr	r0, [sp, #4]
   3096c:	ldr	r1, [sp]
   30970:	add	r0, r0, r1
   30974:	bl	31b34 <flatcc_verify_union_vector_field@@Base+0x778>
   30978:	mov	sp, fp
   3097c:	pop	{fp, pc}

00030980 <flatcc_verify_typed_buffer_header@@Base>:
   30980:	push	{fp, lr}
   30984:	mov	fp, sp
   30988:	sub	sp, sp, #48	; 0x30
   3098c:	str	r0, [fp, #-8]
   30990:	str	r1, [fp, #-12]
   30994:	str	r2, [fp, #-16]
   30998:	ldr	r0, [fp, #-8]
   3099c:	and	r0, r0, #3
   309a0:	cmp	r0, #0
   309a4:	movw	r0, #0
   309a8:	movne	r0, #1
   309ac:	mvn	r1, #0
   309b0:	eor	r0, r0, r1
   309b4:	and	r0, r0, #1
   309b8:	str	r0, [sp, #20]
   309bc:	ldr	r0, [sp, #20]
   309c0:	cmp	r0, #0
   309c4:	bne	309d4 <flatcc_verify_typed_buffer_header@@Base+0x54>
   309c8:	movw	r0, #5
   309cc:	str	r0, [fp, #-4]
   309d0:	b	30acc <flatcc_verify_typed_buffer_header@@Base+0x14c>
   309d4:	b	309d8 <flatcc_verify_typed_buffer_header@@Base+0x58>
   309d8:	b	309dc <flatcc_verify_typed_buffer_header@@Base+0x5c>
   309dc:	ldr	r0, [fp, #-12]
   309e0:	cmn	r0, #9
   309e4:	movw	r0, #0
   309e8:	movls	r0, #1
   309ec:	and	r0, r0, #1
   309f0:	str	r0, [sp, #16]
   309f4:	ldr	r0, [sp, #16]
   309f8:	cmp	r0, #0
   309fc:	bne	30a0c <flatcc_verify_typed_buffer_header@@Base+0x8c>
   30a00:	movw	r0, #6
   30a04:	str	r0, [fp, #-4]
   30a08:	b	30acc <flatcc_verify_typed_buffer_header@@Base+0x14c>
   30a0c:	b	30a10 <flatcc_verify_typed_buffer_header@@Base+0x90>
   30a10:	b	30a14 <flatcc_verify_typed_buffer_header@@Base+0x94>
   30a14:	ldr	r0, [fp, #-12]
   30a18:	cmp	r0, #8
   30a1c:	movw	r0, #0
   30a20:	movcs	r0, #1
   30a24:	and	r0, r0, #1
   30a28:	str	r0, [sp, #12]
   30a2c:	ldr	r0, [sp, #12]
   30a30:	cmp	r0, #0
   30a34:	bne	30a44 <flatcc_verify_typed_buffer_header@@Base+0xc4>
   30a38:	movw	r0, #1
   30a3c:	str	r0, [fp, #-4]
   30a40:	b	30acc <flatcc_verify_typed_buffer_header@@Base+0x14c>
   30a44:	b	30a48 <flatcc_verify_typed_buffer_header@@Base+0xc8>
   30a48:	ldr	r0, [fp, #-16]
   30a4c:	cmp	r0, #0
   30a50:	beq	30ac4 <flatcc_verify_typed_buffer_header@@Base+0x144>
   30a54:	ldr	r0, [fp, #-16]
   30a58:	str	r0, [sp, #24]
   30a5c:	ldr	r0, [fp, #-8]
   30a60:	movw	r1, #4
   30a64:	bl	30954 <flatcc_verify_buffer_header@@Base+0x1a0>
   30a68:	str	r0, [fp, #-20]	; 0xffffffec
   30a6c:	ldr	r0, [sp, #24]
   30a70:	cmp	r0, #0
   30a74:	movw	r0, #1
   30a78:	str	r0, [sp, #4]
   30a7c:	beq	30a98 <flatcc_verify_typed_buffer_header@@Base+0x118>
   30a80:	ldr	r0, [fp, #-20]	; 0xffffffec
   30a84:	ldr	r1, [sp, #24]
   30a88:	cmp	r0, r1
   30a8c:	movw	r0, #0
   30a90:	moveq	r0, #1
   30a94:	str	r0, [sp, #4]
   30a98:	ldr	r0, [sp, #4]
   30a9c:	and	r0, r0, #1
   30aa0:	str	r0, [sp, #8]
   30aa4:	ldr	r0, [sp, #8]
   30aa8:	cmp	r0, #0
   30aac:	bne	30abc <flatcc_verify_typed_buffer_header@@Base+0x13c>
   30ab0:	movw	r0, #2
   30ab4:	str	r0, [fp, #-4]
   30ab8:	b	30acc <flatcc_verify_typed_buffer_header@@Base+0x14c>
   30abc:	b	30ac0 <flatcc_verify_typed_buffer_header@@Base+0x140>
   30ac0:	b	30ac4 <flatcc_verify_typed_buffer_header@@Base+0x144>
   30ac4:	movw	r0, #0
   30ac8:	str	r0, [fp, #-4]
   30acc:	ldr	r0, [fp, #-4]
   30ad0:	mov	sp, fp
   30ad4:	pop	{fp, pc}

00030ad8 <flatcc_verify_struct_as_root@@Base>:
   30ad8:	push	{fp, lr}
   30adc:	mov	fp, sp
   30ae0:	sub	sp, sp, #40	; 0x28
   30ae4:	ldr	ip, [fp, #8]
   30ae8:	str	r0, [fp, #-8]
   30aec:	str	r1, [fp, #-12]
   30af0:	str	r2, [fp, #-16]
   30af4:	str	r3, [sp, #20]
   30af8:	strh	ip, [sp, #18]
   30afc:	ldr	r0, [fp, #-8]
   30b00:	ldr	r1, [fp, #-12]
   30b04:	ldr	r2, [fp, #-16]
   30b08:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   30b0c:	cmp	r0, #0
   30b10:	beq	30b2c <flatcc_verify_struct_as_root@@Base+0x54>
   30b14:	ldr	r0, [fp, #-8]
   30b18:	ldr	r1, [fp, #-12]
   30b1c:	ldr	r2, [fp, #-16]
   30b20:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   30b24:	str	r0, [fp, #-4]
   30b28:	b	30b6c <flatcc_verify_struct_as_root@@Base+0x94>
   30b2c:	ldr	r0, [fp, #-12]
   30b30:	ldr	r1, [fp, #-8]
   30b34:	str	r0, [sp, #12]
   30b38:	mov	r0, r1
   30b3c:	movw	r1, #0
   30b40:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30b44:	ldr	r3, [sp, #20]
   30b48:	ldr	r1, [sp, #12]
   30b4c:	str	r0, [sp, #8]
   30b50:	mov	r0, r1
   30b54:	movw	r1, #0
   30b58:	ldr	r2, [sp, #8]
   30b5c:	ldrh	lr, [sp, #18]
   30b60:	str	lr, [sp]
   30b64:	bl	30638 <flatcc_verify_union_struct@@Base+0x48>
   30b68:	str	r0, [fp, #-4]
   30b6c:	ldr	r0, [fp, #-4]
   30b70:	mov	sp, fp
   30b74:	pop	{fp, pc}

00030b78 <flatcc_verify_struct_as_typed_root@@Base>:
   30b78:	push	{fp, lr}
   30b7c:	mov	fp, sp
   30b80:	sub	sp, sp, #40	; 0x28
   30b84:	ldr	ip, [fp, #8]
   30b88:	str	r0, [fp, #-8]
   30b8c:	str	r1, [fp, #-12]
   30b90:	str	r2, [fp, #-16]
   30b94:	str	r3, [sp, #20]
   30b98:	strh	ip, [sp, #18]
   30b9c:	ldr	r0, [fp, #-8]
   30ba0:	ldr	r1, [fp, #-12]
   30ba4:	ldr	r2, [fp, #-16]
   30ba8:	bl	30980 <flatcc_verify_typed_buffer_header@@Base>
   30bac:	cmp	r0, #0
   30bb0:	beq	30bcc <flatcc_verify_struct_as_typed_root@@Base+0x54>
   30bb4:	ldr	r0, [fp, #-8]
   30bb8:	ldr	r1, [fp, #-12]
   30bbc:	ldr	r2, [fp, #-16]
   30bc0:	bl	30980 <flatcc_verify_typed_buffer_header@@Base>
   30bc4:	str	r0, [fp, #-4]
   30bc8:	b	30c0c <flatcc_verify_struct_as_typed_root@@Base+0x94>
   30bcc:	ldr	r0, [fp, #-12]
   30bd0:	ldr	r1, [fp, #-8]
   30bd4:	str	r0, [sp, #12]
   30bd8:	mov	r0, r1
   30bdc:	movw	r1, #0
   30be0:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30be4:	ldr	r3, [sp, #20]
   30be8:	ldr	r1, [sp, #12]
   30bec:	str	r0, [sp, #8]
   30bf0:	mov	r0, r1
   30bf4:	movw	r1, #0
   30bf8:	ldr	r2, [sp, #8]
   30bfc:	ldrh	lr, [sp, #18]
   30c00:	str	lr, [sp]
   30c04:	bl	30638 <flatcc_verify_union_struct@@Base+0x48>
   30c08:	str	r0, [fp, #-4]
   30c0c:	ldr	r0, [fp, #-4]
   30c10:	mov	sp, fp
   30c14:	pop	{fp, pc}

00030c18 <flatcc_verify_table_as_root@@Base>:
   30c18:	push	{fp, lr}
   30c1c:	mov	fp, sp
   30c20:	sub	sp, sp, #48	; 0x30
   30c24:	str	r0, [fp, #-8]
   30c28:	str	r1, [fp, #-12]
   30c2c:	str	r2, [fp, #-16]
   30c30:	str	r3, [fp, #-20]	; 0xffffffec
   30c34:	ldr	r0, [fp, #-8]
   30c38:	ldr	r1, [fp, #-12]
   30c3c:	ldr	r2, [fp, #-16]
   30c40:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   30c44:	cmp	r0, #0
   30c48:	beq	30c64 <flatcc_verify_table_as_root@@Base+0x4c>
   30c4c:	ldr	r0, [fp, #-8]
   30c50:	ldr	r1, [fp, #-12]
   30c54:	ldr	r2, [fp, #-16]
   30c58:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   30c5c:	str	r0, [fp, #-4]
   30c60:	b	30cc4 <flatcc_verify_table_as_root@@Base+0xac>
   30c64:	ldr	r0, [fp, #-8]
   30c68:	ldr	r1, [fp, #-12]
   30c6c:	ldr	r2, [fp, #-8]
   30c70:	str	r0, [sp, #24]
   30c74:	mov	r0, r2
   30c78:	movw	r2, #0
   30c7c:	str	r1, [sp, #20]
   30c80:	mov	r1, r2
   30c84:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30c88:	ldr	r1, [fp, #-20]	; 0xffffffec
   30c8c:	ldr	r2, [sp, #24]
   30c90:	str	r0, [sp, #16]
   30c94:	mov	r0, r2
   30c98:	ldr	lr, [sp, #20]
   30c9c:	str	r1, [sp, #12]
   30ca0:	mov	r1, lr
   30ca4:	movw	r2, #0
   30ca8:	ldr	r3, [sp, #16]
   30cac:	movw	ip, #100	; 0x64
   30cb0:	str	ip, [sp]
   30cb4:	ldr	ip, [sp, #12]
   30cb8:	str	ip, [sp, #4]
   30cbc:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   30cc0:	str	r0, [fp, #-4]
   30cc4:	ldr	r0, [fp, #-4]
   30cc8:	mov	sp, fp
   30ccc:	pop	{fp, pc}

00030cd0 <flatcc_verify_table_as_typed_root@@Base>:
   30cd0:	push	{fp, lr}
   30cd4:	mov	fp, sp
   30cd8:	sub	sp, sp, #48	; 0x30
   30cdc:	str	r0, [fp, #-8]
   30ce0:	str	r1, [fp, #-12]
   30ce4:	str	r2, [fp, #-16]
   30ce8:	str	r3, [fp, #-20]	; 0xffffffec
   30cec:	ldr	r0, [fp, #-8]
   30cf0:	ldr	r1, [fp, #-12]
   30cf4:	ldr	r2, [fp, #-16]
   30cf8:	bl	30980 <flatcc_verify_typed_buffer_header@@Base>
   30cfc:	cmp	r0, #0
   30d00:	beq	30d1c <flatcc_verify_table_as_typed_root@@Base+0x4c>
   30d04:	ldr	r0, [fp, #-8]
   30d08:	ldr	r1, [fp, #-12]
   30d0c:	ldr	r2, [fp, #-16]
   30d10:	bl	30980 <flatcc_verify_typed_buffer_header@@Base>
   30d14:	str	r0, [fp, #-4]
   30d18:	b	30d7c <flatcc_verify_table_as_typed_root@@Base+0xac>
   30d1c:	ldr	r0, [fp, #-8]
   30d20:	ldr	r1, [fp, #-12]
   30d24:	ldr	r2, [fp, #-8]
   30d28:	str	r0, [sp, #24]
   30d2c:	mov	r0, r2
   30d30:	movw	r2, #0
   30d34:	str	r1, [sp, #20]
   30d38:	mov	r1, r2
   30d3c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30d40:	ldr	r1, [fp, #-20]	; 0xffffffec
   30d44:	ldr	r2, [sp, #24]
   30d48:	str	r0, [sp, #16]
   30d4c:	mov	r0, r2
   30d50:	ldr	lr, [sp, #20]
   30d54:	str	r1, [sp, #12]
   30d58:	mov	r1, lr
   30d5c:	movw	r2, #0
   30d60:	ldr	r3, [sp, #16]
   30d64:	movw	ip, #100	; 0x64
   30d68:	str	ip, [sp]
   30d6c:	ldr	ip, [sp, #12]
   30d70:	str	ip, [sp, #4]
   30d74:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   30d78:	str	r0, [fp, #-4]
   30d7c:	ldr	r0, [fp, #-4]
   30d80:	mov	sp, fp
   30d84:	pop	{fp, pc}

00030d88 <flatcc_verify_struct_as_nested_root@@Base>:
   30d88:	push	{fp, lr}
   30d8c:	mov	fp, sp
   30d90:	sub	sp, sp, #48	; 0x30
   30d94:	ldr	ip, [fp, #12]
   30d98:	ldr	lr, [fp, #8]
   30d9c:	str	r0, [fp, #-8]
   30da0:	strh	r1, [fp, #-10]
   30da4:	str	r2, [fp, #-16]
   30da8:	str	r3, [fp, #-20]	; 0xffffffec
   30dac:	strh	ip, [fp, #-22]	; 0xffffffea
   30db0:	ldr	r0, [fp, #-8]
   30db4:	ldrh	r1, [fp, #-10]
   30db8:	ldr	r2, [fp, #-16]
   30dbc:	ldrh	r3, [fp, #-22]	; 0xffffffea
   30dc0:	uxth	r1, r1
   30dc4:	movw	ip, #1
   30dc8:	uxth	ip, ip
   30dcc:	str	ip, [sp]
   30dd0:	mvn	ip, #0
   30dd4:	str	ip, [sp, #4]
   30dd8:	str	lr, [sp, #12]
   30ddc:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   30de0:	cmp	r0, #0
   30de4:	beq	30e1c <flatcc_verify_struct_as_nested_root@@Base+0x94>
   30de8:	ldr	r0, [fp, #-8]
   30dec:	ldrh	r1, [fp, #-10]
   30df0:	ldr	r2, [fp, #-16]
   30df4:	ldrh	r3, [fp, #-22]	; 0xffffffea
   30df8:	uxth	r1, r1
   30dfc:	movw	ip, #1
   30e00:	uxth	ip, ip
   30e04:	str	ip, [sp]
   30e08:	mvn	ip, #0
   30e0c:	str	ip, [sp, #4]
   30e10:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   30e14:	str	r0, [fp, #-4]
   30e18:	b	30ea4 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   30e1c:	ldr	r0, [fp, #-8]
   30e20:	ldrh	r1, [fp, #-10]
   30e24:	bl	30eb0 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   30e28:	str	r0, [sp, #20]
   30e2c:	movw	r1, #0
   30e30:	cmp	r1, r0
   30e34:	bne	30e44 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   30e38:	movw	r0, #0
   30e3c:	str	r0, [fp, #-4]
   30e40:	b	30ea4 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   30e44:	ldr	r0, [sp, #20]
   30e48:	ldr	r1, [sp, #20]
   30e4c:	str	r0, [sp, #8]
   30e50:	mov	r0, r1
   30e54:	movw	r1, #0
   30e58:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30e5c:	ldr	r1, [sp, #8]
   30e60:	add	r0, r1, r0
   30e64:	str	r0, [sp, #20]
   30e68:	ldr	r0, [sp, #20]
   30e6c:	movw	r1, #0
   30e70:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30e74:	str	r0, [sp, #16]
   30e78:	ldr	r0, [sp, #20]
   30e7c:	add	r0, r0, #4
   30e80:	str	r0, [sp, #20]
   30e84:	ldr	r0, [sp, #20]
   30e88:	ldr	r1, [sp, #16]
   30e8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   30e90:	ldr	r3, [fp, #8]
   30e94:	ldrh	lr, [fp, #-22]	; 0xffffffea
   30e98:	str	lr, [sp]
   30e9c:	bl	30ad8 <flatcc_verify_struct_as_root@@Base>
   30ea0:	str	r0, [fp, #-4]
   30ea4:	ldr	r0, [fp, #-4]
   30ea8:	mov	sp, fp
   30eac:	pop	{fp, pc}
   30eb0:	push	{fp, lr}
   30eb4:	mov	fp, sp
   30eb8:	sub	sp, sp, #16
   30ebc:	str	r0, [fp, #-4]
   30ec0:	strh	r1, [fp, #-6]
   30ec4:	ldr	r0, [fp, #-4]
   30ec8:	ldrh	r1, [fp, #-6]
   30ecc:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   30ed0:	strh	r0, [sp, #8]
   30ed4:	ldrh	r0, [sp, #8]
   30ed8:	cmp	r0, #0
   30edc:	beq	30f04 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   30ee0:	ldr	r0, [fp, #-4]
   30ee4:	ldr	r0, [r0]
   30ee8:	ldr	r1, [fp, #-4]
   30eec:	ldr	r1, [r1, #16]
   30ef0:	add	r0, r0, r1
   30ef4:	ldrh	r1, [sp, #8]
   30ef8:	add	r0, r0, r1
   30efc:	str	r0, [sp, #4]
   30f00:	b	30f10 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   30f04:	movw	r0, #0
   30f08:	str	r0, [sp, #4]
   30f0c:	b	30f10 <flatcc_verify_struct_as_nested_root@@Base+0x188>
   30f10:	ldr	r0, [sp, #4]
   30f14:	mov	sp, fp
   30f18:	pop	{fp, pc}

00030f1c <flatcc_verify_table_as_nested_root@@Base>:
   30f1c:	push	{r4, sl, fp, lr}
   30f20:	add	fp, sp, #8
   30f24:	sub	sp, sp, #72	; 0x48
   30f28:	ldr	ip, [fp, #12]
   30f2c:	ldr	lr, [fp, #8]
   30f30:	str	r0, [fp, #-16]
   30f34:	strh	r1, [fp, #-18]	; 0xffffffee
   30f38:	str	r2, [fp, #-24]	; 0xffffffe8
   30f3c:	str	r3, [fp, #-28]	; 0xffffffe4
   30f40:	strh	lr, [fp, #-30]	; 0xffffffe2
   30f44:	ldr	r0, [fp, #-16]
   30f48:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30f4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30f50:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   30f54:	uxth	r1, r1
   30f58:	movw	lr, #1
   30f5c:	uxth	lr, lr
   30f60:	str	lr, [sp]
   30f64:	mvn	lr, #0
   30f68:	str	lr, [sp, #4]
   30f6c:	str	ip, [sp, #36]	; 0x24
   30f70:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   30f74:	cmp	r0, #0
   30f78:	beq	30fb0 <flatcc_verify_table_as_nested_root@@Base+0x94>
   30f7c:	ldr	r0, [fp, #-16]
   30f80:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30f88:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   30f8c:	uxth	r1, r1
   30f90:	movw	ip, #1
   30f94:	uxth	ip, ip
   30f98:	str	ip, [sp]
   30f9c:	mvn	ip, #0
   30fa0:	str	ip, [sp, #4]
   30fa4:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   30fa8:	str	r0, [fp, #-12]
   30fac:	b	310b8 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   30fb0:	ldr	r0, [fp, #-16]
   30fb4:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30fb8:	bl	30eb0 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   30fbc:	str	r0, [fp, #-36]	; 0xffffffdc
   30fc0:	movw	r1, #0
   30fc4:	cmp	r1, r0
   30fc8:	bne	30fd8 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   30fcc:	movw	r0, #0
   30fd0:	str	r0, [fp, #-12]
   30fd4:	b	310b8 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   30fd8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   30fdc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   30fe0:	str	r0, [sp, #32]
   30fe4:	mov	r0, r1
   30fe8:	movw	r1, #0
   30fec:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   30ff0:	ldr	r1, [sp, #32]
   30ff4:	add	r0, r1, r0
   30ff8:	str	r0, [fp, #-36]	; 0xffffffdc
   30ffc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31000:	movw	r1, #0
   31004:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   31008:	str	r0, [sp, #40]	; 0x28
   3100c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31010:	add	r0, r0, #4
   31014:	str	r0, [fp, #-36]	; 0xffffffdc
   31018:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3101c:	ldr	r1, [sp, #40]	; 0x28
   31020:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31024:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   31028:	cmp	r0, #0
   3102c:	beq	31048 <flatcc_verify_table_as_nested_root@@Base+0x12c>
   31030:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31034:	ldr	r1, [sp, #40]	; 0x28
   31038:	ldr	r2, [fp, #-28]	; 0xffffffe4
   3103c:	bl	307b4 <flatcc_verify_buffer_header@@Base>
   31040:	str	r0, [fp, #-12]
   31044:	b	310b8 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   31048:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3104c:	ldr	r1, [sp, #40]	; 0x28
   31050:	ldr	r2, [fp, #-36]	; 0xffffffdc
   31054:	str	r0, [sp, #28]
   31058:	mov	r0, r2
   3105c:	movw	r2, #0
   31060:	str	r1, [sp, #24]
   31064:	mov	r1, r2
   31068:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   3106c:	ldr	r1, [fp, #-16]
   31070:	ldr	r1, [r1, #8]
   31074:	ldr	r2, [fp, #12]
   31078:	ldr	lr, [sp, #28]
   3107c:	str	r0, [sp, #20]
   31080:	mov	r0, lr
   31084:	ldr	r3, [sp, #24]
   31088:	str	r1, [sp, #16]
   3108c:	mov	r1, r3
   31090:	movw	ip, #0
   31094:	str	r2, [sp, #12]
   31098:	mov	r2, ip
   3109c:	ldr	r3, [sp, #20]
   310a0:	ldr	ip, [sp, #16]
   310a4:	str	ip, [sp]
   310a8:	ldr	r4, [sp, #12]
   310ac:	str	r4, [sp, #4]
   310b0:	bl	2ff58 <flatcc_verify_table_field@@Base+0xf0>
   310b4:	str	r0, [fp, #-12]
   310b8:	ldr	r0, [fp, #-12]
   310bc:	sub	sp, fp, #8
   310c0:	pop	{r4, sl, fp, pc}

000310c4 <flatcc_verify_union_field@@Base>:
   310c4:	push	{fp, lr}
   310c8:	mov	fp, sp
   310cc:	sub	sp, sp, #88	; 0x58
   310d0:	str	r0, [fp, #-8]
   310d4:	strh	r1, [fp, #-10]
   310d8:	str	r2, [fp, #-16]
   310dc:	str	r3, [fp, #-20]	; 0xffffffec
   310e0:	ldr	r0, [fp, #-8]
   310e4:	ldrh	r1, [fp, #-10]
   310e8:	sub	r1, r1, #1
   310ec:	uxth	r1, r1
   310f0:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   310f4:	strh	r0, [fp, #-22]	; 0xffffffea
   310f8:	uxth	r0, r0
   310fc:	movw	r1, #0
   31100:	cmp	r1, r0
   31104:	bne	31198 <flatcc_verify_union_field@@Base+0xd4>
   31108:	ldr	r0, [fp, #-8]
   3110c:	ldrh	r1, [fp, #-10]
   31110:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   31114:	strh	r0, [fp, #-24]	; 0xffffffe8
   31118:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   3111c:	cmp	r0, #0
   31120:	movw	r0, #0
   31124:	moveq	r0, #1
   31128:	and	r0, r0, #1
   3112c:	str	r0, [sp, #28]
   31130:	ldr	r0, [sp, #28]
   31134:	cmp	r0, #0
   31138:	bne	31148 <flatcc_verify_union_field@@Base+0x84>
   3113c:	movw	r0, #23
   31140:	str	r0, [fp, #-4]
   31144:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   31148:	b	3114c <flatcc_verify_union_field@@Base+0x88>
   3114c:	b	31150 <flatcc_verify_union_field@@Base+0x8c>
   31150:	ldr	r0, [fp, #-16]
   31154:	cmp	r0, #0
   31158:	movw	r0, #0
   3115c:	movne	r0, #1
   31160:	mvn	r1, #0
   31164:	eor	r0, r0, r1
   31168:	and	r0, r0, #1
   3116c:	str	r0, [sp, #24]
   31170:	ldr	r0, [sp, #24]
   31174:	cmp	r0, #0
   31178:	bne	31188 <flatcc_verify_union_field@@Base+0xc4>
   3117c:	movw	r0, #21
   31180:	str	r0, [fp, #-4]
   31184:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   31188:	b	3118c <flatcc_verify_union_field@@Base+0xc8>
   3118c:	movw	r0, #0
   31190:	str	r0, [fp, #-4]
   31194:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   31198:	ldr	r0, [fp, #-8]
   3119c:	ldrh	r1, [fp, #-10]
   311a0:	sub	r1, r1, #1
   311a4:	uxth	r1, r1
   311a8:	movw	r2, #0
   311ac:	movw	r3, #1
   311b0:	movw	ip, #1
   311b4:	uxth	ip, ip
   311b8:	str	ip, [sp]
   311bc:	bl	2f4c0 <flatcc_verify_field@@Base+0x80>
   311c0:	cmp	r0, #0
   311c4:	beq	311f8 <flatcc_verify_union_field@@Base+0x134>
   311c8:	ldr	r0, [fp, #-8]
   311cc:	ldrh	r1, [fp, #-10]
   311d0:	sub	r1, r1, #1
   311d4:	uxth	r1, r1
   311d8:	movw	r2, #0
   311dc:	movw	r3, #1
   311e0:	movw	ip, #1
   311e4:	uxth	ip, ip
   311e8:	str	ip, [sp]
   311ec:	bl	2f4c0 <flatcc_verify_field@@Base+0x80>
   311f0:	str	r0, [fp, #-4]
   311f4:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   311f8:	ldr	r0, [fp, #-8]
   311fc:	ldrh	r1, [fp, #-10]
   31200:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   31204:	strh	r0, [fp, #-24]	; 0xffffffe8
   31208:	ldr	r0, [fp, #-8]
   3120c:	ldr	r0, [r0]
   31210:	ldr	r1, [fp, #-8]
   31214:	ldr	r1, [r1, #16]
   31218:	add	r0, r0, r1
   3121c:	ldrh	r1, [fp, #-22]	; 0xffffffea
   31220:	add	r0, r0, r1
   31224:	str	r0, [fp, #-28]	; 0xffffffe4
   31228:	ldr	r0, [fp, #-28]	; 0xffffffe4
   3122c:	ldrb	r0, [r0]
   31230:	cmp	r0, #0
   31234:	movw	r0, #1
   31238:	str	r0, [sp, #12]
   3123c:	bne	31254 <flatcc_verify_union_field@@Base+0x190>
   31240:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   31244:	cmp	r0, #0
   31248:	movw	r0, #0
   3124c:	moveq	r0, #1
   31250:	str	r0, [sp, #12]
   31254:	ldr	r0, [sp, #12]
   31258:	and	r0, r0, #1
   3125c:	str	r0, [sp, #20]
   31260:	ldr	r0, [sp, #20]
   31264:	cmp	r0, #0
   31268:	bne	31278 <flatcc_verify_union_field@@Base+0x1b4>
   3126c:	movw	r0, #24
   31270:	str	r0, [fp, #-4]
   31274:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   31278:	b	3127c <flatcc_verify_union_field@@Base+0x1b8>
   3127c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   31280:	ldrb	r0, [r0]
   31284:	cmp	r0, #0
   31288:	bne	31298 <flatcc_verify_union_field@@Base+0x1d4>
   3128c:	movw	r0, #0
   31290:	str	r0, [fp, #-4]
   31294:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   31298:	b	3129c <flatcc_verify_union_field@@Base+0x1d8>
   3129c:	ldr	r0, [fp, #-8]
   312a0:	ldrh	r1, [fp, #-10]
   312a4:	ldr	r2, [fp, #-16]
   312a8:	uxth	r1, r1
   312ac:	sub	r3, fp, #32
   312b0:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   312b4:	str	r0, [sp, #16]
   312b8:	ldr	r0, [sp, #16]
   312bc:	cmp	r0, #0
   312c0:	bne	312d0 <flatcc_verify_union_field@@Base+0x20c>
   312c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   312c8:	cmp	r0, #0
   312cc:	bne	312dc <flatcc_verify_union_field@@Base+0x218>
   312d0:	ldr	r0, [sp, #16]
   312d4:	str	r0, [fp, #-4]
   312d8:	b	31348 <flatcc_verify_union_field@@Base+0x284>
   312dc:	b	312e0 <flatcc_verify_union_field@@Base+0x21c>
   312e0:	ldr	r0, [fp, #-8]
   312e4:	ldr	r0, [r0]
   312e8:	str	r0, [sp, #32]
   312ec:	ldr	r0, [fp, #-8]
   312f0:	ldr	r0, [r0, #4]
   312f4:	str	r0, [sp, #36]	; 0x24
   312f8:	ldr	r0, [fp, #-8]
   312fc:	ldr	r0, [r0, #8]
   31300:	str	r0, [sp, #40]	; 0x28
   31304:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31308:	str	r0, [sp, #48]	; 0x30
   3130c:	ldr	r0, [fp, #-8]
   31310:	ldr	r0, [r0]
   31314:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31318:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   3131c:	str	r0, [sp, #52]	; 0x34
   31320:	ldr	r0, [fp, #-28]	; 0xffffffe4
   31324:	ldrb	r0, [r0]
   31328:	strb	r0, [sp, #44]	; 0x2c
   3132c:	ldr	r0, [fp, #-20]	; 0xffffffec
   31330:	add	r1, sp, #32
   31334:	str	r0, [sp, #8]
   31338:	mov	r0, r1
   3133c:	ldr	r1, [sp, #8]
   31340:	blx	r1
   31344:	str	r0, [fp, #-4]
   31348:	ldr	r0, [fp, #-4]
   3134c:	mov	sp, fp
   31350:	pop	{fp, pc}
   31354:	push	{fp, lr}
   31358:	mov	fp, sp
   3135c:	sub	sp, sp, #16
   31360:	str	r0, [sp, #8]
   31364:	strh	r1, [sp, #6]
   31368:	ldrh	r0, [sp, #6]
   3136c:	add	r0, r0, #2
   31370:	lsl	r0, r0, #1
   31374:	strh	r0, [sp, #4]
   31378:	ldrh	r0, [sp, #4]
   3137c:	ldr	r1, [sp, #8]
   31380:	ldrh	r1, [r1, #22]
   31384:	cmp	r0, r1
   31388:	blt	31398 <flatcc_verify_union_field@@Base+0x2d4>
   3138c:	movw	r0, #0
   31390:	str	r0, [fp, #-4]
   31394:	b	313b0 <flatcc_verify_union_field@@Base+0x2ec>
   31398:	ldr	r0, [sp, #8]
   3139c:	ldr	r0, [r0, #12]
   313a0:	ldrh	r1, [sp, #4]
   313a4:	bl	31ab4 <flatcc_verify_union_vector_field@@Base+0x6f8>
   313a8:	uxth	r0, r0
   313ac:	str	r0, [fp, #-4]
   313b0:	ldr	r0, [fp, #-4]
   313b4:	mov	sp, fp
   313b8:	pop	{fp, pc}

000313bc <flatcc_verify_union_vector_field@@Base>:
   313bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   313c0:	add	fp, sp, #24
   313c4:	sub	sp, sp, #96	; 0x60
   313c8:	str	r0, [fp, #-32]	; 0xffffffe0
   313cc:	strh	r1, [fp, #-34]	; 0xffffffde
   313d0:	str	r2, [fp, #-40]	; 0xffffffd8
   313d4:	str	r3, [fp, #-44]	; 0xffffffd4
   313d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   313dc:	ldrh	r1, [fp, #-34]	; 0xffffffde
   313e0:	sub	r1, r1, #1
   313e4:	uxth	r1, r1
   313e8:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   313ec:	strh	r0, [fp, #-46]	; 0xffffffd2
   313f0:	uxth	r0, r0
   313f4:	movw	r1, #0
   313f8:	cmp	r1, r0
   313fc:	bne	31468 <flatcc_verify_union_vector_field@@Base+0xac>
   31400:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31404:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31408:	bl	31354 <flatcc_verify_union_field@@Base+0x290>
   3140c:	strh	r0, [fp, #-48]	; 0xffffffd0
   31410:	uxth	r0, r0
   31414:	movw	r1, #0
   31418:	cmp	r1, r0
   3141c:	bne	31464 <flatcc_verify_union_vector_field@@Base+0xa8>
   31420:	b	31424 <flatcc_verify_union_vector_field@@Base+0x68>
   31424:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31428:	cmp	r0, #0
   3142c:	movw	r0, #0
   31430:	movne	r0, #1
   31434:	mvn	r1, #0
   31438:	eor	r0, r0, r1
   3143c:	and	r0, r0, #1
   31440:	str	r0, [sp, #52]	; 0x34
   31444:	ldr	r0, [sp, #52]	; 0x34
   31448:	cmp	r0, #0
   3144c:	bne	3145c <flatcc_verify_union_vector_field@@Base+0xa0>
   31450:	movw	r0, #22
   31454:	str	r0, [fp, #-28]	; 0xffffffe4
   31458:	b	31634 <flatcc_verify_union_vector_field@@Base+0x278>
   3145c:	b	31460 <flatcc_verify_union_vector_field@@Base+0xa4>
   31460:	b	31464 <flatcc_verify_union_vector_field@@Base+0xa8>
   31464:	b	31468 <flatcc_verify_union_vector_field@@Base+0xac>
   31468:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3146c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31470:	sub	r1, r1, #1
   31474:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31478:	uxth	r1, r1
   3147c:	movw	r3, #1
   31480:	movw	ip, #1
   31484:	uxth	ip, ip
   31488:	str	ip, [sp]
   3148c:	mvn	ip, #0
   31490:	str	ip, [sp, #4]
   31494:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   31498:	cmp	r0, #0
   3149c:	beq	314d8 <flatcc_verify_union_vector_field@@Base+0x11c>
   314a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   314a4:	ldrh	r1, [fp, #-34]	; 0xffffffde
   314a8:	sub	r1, r1, #1
   314ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   314b0:	uxth	r1, r1
   314b4:	movw	r3, #1
   314b8:	movw	ip, #1
   314bc:	uxth	ip, ip
   314c0:	str	ip, [sp]
   314c4:	mvn	ip, #0
   314c8:	str	ip, [sp, #4]
   314cc:	bl	2f9a8 <flatcc_verify_vector_field@@Base>
   314d0:	str	r0, [fp, #-28]	; 0xffffffe4
   314d4:	b	31634 <flatcc_verify_union_vector_field@@Base+0x278>
   314d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   314dc:	ldrh	r1, [fp, #-34]	; 0xffffffde
   314e0:	sub	r1, r1, #1
   314e4:	uxth	r1, r1
   314e8:	bl	30eb0 <flatcc_verify_struct_as_nested_root@@Base+0x128>
   314ec:	str	r0, [fp, #-52]	; 0xffffffcc
   314f0:	movw	r1, #0
   314f4:	cmp	r1, r0
   314f8:	bne	31508 <flatcc_verify_union_vector_field@@Base+0x14c>
   314fc:	movw	r0, #0
   31500:	str	r0, [fp, #-28]	; 0xffffffe4
   31504:	b	31634 <flatcc_verify_union_vector_field@@Base+0x278>
   31508:	ldr	r0, [fp, #-52]	; 0xffffffcc
   3150c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   31510:	str	r0, [sp, #44]	; 0x2c
   31514:	mov	r0, r1
   31518:	movw	r1, #0
   3151c:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   31520:	ldr	r1, [sp, #44]	; 0x2c
   31524:	add	r0, r1, r0
   31528:	str	r0, [fp, #-52]	; 0xffffffcc
   3152c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31530:	movw	r1, #0
   31534:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   31538:	str	r0, [sp, #60]	; 0x3c
   3153c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   31540:	add	r0, r0, #4
   31544:	str	r0, [fp, #-52]	; 0xffffffcc
   31548:	ldr	r0, [fp, #-52]	; 0xffffffcc
   3154c:	str	r0, [fp, #-56]	; 0xffffffc8
   31550:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31554:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31558:	ldr	r2, [fp, #-40]	; 0xffffffd8
   3155c:	uxth	r1, r1
   31560:	add	r3, sp, #56	; 0x38
   31564:	bl	2f70c <flatcc_verify_string_field@@Base+0xc0>
   31568:	str	r0, [sp, #48]	; 0x30
   3156c:	ldr	r0, [sp, #48]	; 0x30
   31570:	cmp	r0, #0
   31574:	bne	31584 <flatcc_verify_union_vector_field@@Base+0x1c8>
   31578:	ldr	r0, [sp, #56]	; 0x38
   3157c:	cmp	r0, #0
   31580:	bne	31590 <flatcc_verify_union_vector_field@@Base+0x1d4>
   31584:	ldr	r0, [sp, #48]	; 0x30
   31588:	str	r0, [fp, #-28]	; 0xffffffe4
   3158c:	b	31634 <flatcc_verify_union_vector_field@@Base+0x278>
   31590:	b	31594 <flatcc_verify_union_vector_field@@Base+0x1d8>
   31594:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31598:	ldr	r0, [r0]
   3159c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   315a0:	ldr	r1, [r1, #4]
   315a4:	ldr	r2, [sp, #56]	; 0x38
   315a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   315ac:	ldr	r3, [r3]
   315b0:	ldr	ip, [sp, #56]	; 0x38
   315b4:	str	r0, [sp, #40]	; 0x28
   315b8:	mov	r0, r3
   315bc:	str	r1, [sp, #36]	; 0x24
   315c0:	mov	r1, ip
   315c4:	str	r2, [sp, #32]
   315c8:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   315cc:	ldr	r1, [sp, #60]	; 0x3c
   315d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   315d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   315d8:	ldr	r3, [r3, #8]
   315dc:	ldr	ip, [fp, #-44]	; 0xffffffd4
   315e0:	ldr	lr, [sp, #40]	; 0x28
   315e4:	str	r0, [sp, #28]
   315e8:	mov	r0, lr
   315ec:	ldr	r4, [sp, #36]	; 0x24
   315f0:	str	r1, [sp, #24]
   315f4:	mov	r1, r4
   315f8:	ldr	r5, [sp, #32]
   315fc:	str	r2, [sp, #20]
   31600:	mov	r2, r5
   31604:	ldr	r6, [sp, #28]
   31608:	str	r3, [sp, #16]
   3160c:	mov	r3, r6
   31610:	ldr	r7, [sp, #24]
   31614:	str	r7, [sp]
   31618:	ldr	r8, [sp, #20]
   3161c:	str	r8, [sp, #4]
   31620:	ldr	r9, [sp, #16]
   31624:	str	r9, [sp, #8]
   31628:	str	ip, [sp, #12]
   3162c:	bl	31640 <flatcc_verify_union_vector_field@@Base+0x284>
   31630:	str	r0, [fp, #-28]	; 0xffffffe4
   31634:	ldr	r0, [fp, #-28]	; 0xffffffe4
   31638:	sub	sp, fp, #24
   3163c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31640:	push	{r4, r5, fp, lr}
   31644:	add	fp, sp, #8
   31648:	sub	sp, sp, #120	; 0x78
   3164c:	ldr	ip, [fp, #20]
   31650:	ldr	lr, [fp, #16]
   31654:	ldr	r4, [fp, #12]
   31658:	ldr	r5, [fp, #8]
   3165c:	str	r0, [fp, #-16]
   31660:	str	r1, [fp, #-20]	; 0xffffffec
   31664:	str	r2, [fp, #-24]	; 0xffffffe8
   31668:	str	r3, [fp, #-28]	; 0xffffffe4
   3166c:	str	r5, [sp, #44]	; 0x2c
   31670:	str	ip, [sp, #40]	; 0x28
   31674:	str	lr, [sp, #36]	; 0x24
   31678:	str	r4, [sp, #32]
   3167c:	ldr	r0, [fp, #16]
   31680:	mvn	r1, #0
   31684:	add	r1, r0, r1
   31688:	str	r1, [fp, #16]
   3168c:	cmp	r0, #0
   31690:	movw	r0, #0
   31694:	movgt	r0, #1
   31698:	and	r0, r0, #1
   3169c:	str	r0, [sp, #60]	; 0x3c
   316a0:	ldr	r0, [sp, #60]	; 0x3c
   316a4:	cmp	r0, #0
   316a8:	bne	316b8 <flatcc_verify_union_vector_field@@Base+0x2fc>
   316ac:	movw	r0, #3
   316b0:	str	r0, [fp, #-12]
   316b4:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   316b8:	b	316bc <flatcc_verify_union_vector_field@@Base+0x300>
   316bc:	ldr	r0, [pc, #624]	; 31934 <flatcc_verify_union_vector_field@@Base+0x578>
   316c0:	ldr	r1, [fp, #-16]
   316c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   316c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   316cc:	ldr	ip, [fp, #-28]	; 0xffffffe4
   316d0:	str	r0, [sp, #28]
   316d4:	mov	r0, r1
   316d8:	mov	r1, r2
   316dc:	mov	r2, r3
   316e0:	mov	r3, ip
   316e4:	movw	ip, #4
   316e8:	str	ip, [sp]
   316ec:	movw	ip, #4
   316f0:	uxth	ip, ip
   316f4:	str	ip, [sp, #4]
   316f8:	ldr	ip, [sp, #28]
   316fc:	str	ip, [sp, #8]
   31700:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   31704:	cmp	r0, #0
   31708:	beq	3175c <flatcc_verify_union_vector_field@@Base+0x3a0>
   3170c:	ldr	r0, [pc, #544]	; 31934 <flatcc_verify_union_vector_field@@Base+0x578>
   31710:	ldr	r1, [fp, #-16]
   31714:	ldr	r2, [fp, #-20]	; 0xffffffec
   31718:	ldr	r3, [fp, #-24]	; 0xffffffe8
   3171c:	ldr	ip, [fp, #-28]	; 0xffffffe4
   31720:	str	r0, [sp, #24]
   31724:	mov	r0, r1
   31728:	mov	r1, r2
   3172c:	mov	r2, r3
   31730:	mov	r3, ip
   31734:	movw	ip, #4
   31738:	str	ip, [sp]
   3173c:	movw	ip, #4
   31740:	uxth	ip, ip
   31744:	str	ip, [sp, #4]
   31748:	ldr	ip, [sp, #24]
   3174c:	str	ip, [sp, #8]
   31750:	bl	2fabc <flatcc_verify_vector_field@@Base+0x114>
   31754:	str	r0, [fp, #-12]
   31758:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   3175c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   31760:	ldr	r1, [fp, #-24]	; 0xffffffe8
   31764:	add	r0, r1, r0
   31768:	str	r0, [fp, #-24]	; 0xffffffe8
   3176c:	ldr	r0, [fp, #-16]
   31770:	ldr	r1, [fp, #-24]	; 0xffffffe8
   31774:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   31778:	str	r0, [fp, #-36]	; 0xffffffdc
   3177c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31780:	ldr	r1, [fp, #8]
   31784:	cmp	r0, r1
   31788:	movw	r0, #0
   3178c:	moveq	r0, #1
   31790:	and	r0, r0, #1
   31794:	str	r0, [sp, #56]	; 0x38
   31798:	ldr	r0, [sp, #56]	; 0x38
   3179c:	cmp	r0, #0
   317a0:	bne	317b0 <flatcc_verify_union_vector_field@@Base+0x3f4>
   317a4:	movw	r0, #34	; 0x22
   317a8:	str	r0, [fp, #-12]
   317ac:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   317b0:	b	317b4 <flatcc_verify_union_vector_field@@Base+0x3f8>
   317b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   317b8:	add	r0, r0, #4
   317bc:	str	r0, [fp, #-24]	; 0xffffffe8
   317c0:	ldr	r0, [fp, #-16]
   317c4:	str	r0, [sp, #64]	; 0x40
   317c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   317cc:	str	r0, [sp, #68]	; 0x44
   317d0:	ldr	r0, [fp, #16]
   317d4:	str	r0, [sp, #72]	; 0x48
   317d8:	movw	r0, #0
   317dc:	str	r0, [fp, #-32]	; 0xffffffe0
   317e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   317e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   317e8:	cmp	r0, r1
   317ec:	bcs	31920 <flatcc_verify_union_vector_field@@Base+0x564>
   317f0:	ldr	r0, [fp, #-16]
   317f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   317f8:	bl	2f97c <flatcc_verify_string_field@@Base+0x330>
   317fc:	str	r0, [fp, #-40]	; 0xffffffd8
   31800:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31804:	cmp	r0, #0
   31808:	bne	31854 <flatcc_verify_union_vector_field@@Base+0x498>
   3180c:	b	31810 <flatcc_verify_union_vector_field@@Base+0x454>
   31810:	ldr	r0, [fp, #12]
   31814:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31818:	add	r0, r0, r1
   3181c:	ldrb	r0, [r0]
   31820:	cmp	r0, #0
   31824:	movw	r0, #0
   31828:	moveq	r0, #1
   3182c:	and	r0, r0, #1
   31830:	str	r0, [sp, #52]	; 0x34
   31834:	ldr	r0, [sp, #52]	; 0x34
   31838:	cmp	r0, #0
   3183c:	bne	3184c <flatcc_verify_union_vector_field@@Base+0x490>
   31840:	movw	r0, #32
   31844:	str	r0, [fp, #-12]
   31848:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   3184c:	b	31850 <flatcc_verify_union_vector_field@@Base+0x494>
   31850:	b	31900 <flatcc_verify_union_vector_field@@Base+0x544>
   31854:	b	31858 <flatcc_verify_union_vector_field@@Base+0x49c>
   31858:	ldr	r0, [fp, #12]
   3185c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31860:	add	r0, r0, r1
   31864:	ldrb	r0, [r0]
   31868:	cmp	r0, #0
   3186c:	movw	r0, #0
   31870:	movne	r0, #1
   31874:	and	r0, r0, #1
   31878:	str	r0, [sp, #48]	; 0x30
   3187c:	ldr	r0, [sp, #48]	; 0x30
   31880:	cmp	r0, #0
   31884:	bne	31894 <flatcc_verify_union_vector_field@@Base+0x4d8>
   31888:	movw	r0, #33	; 0x21
   3188c:	str	r0, [fp, #-12]
   31890:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   31894:	b	31898 <flatcc_verify_union_vector_field@@Base+0x4dc>
   31898:	ldr	r0, [fp, #12]
   3189c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   318a0:	add	r0, r0, r1
   318a4:	ldrb	r0, [r0]
   318a8:	strb	r0, [sp, #76]	; 0x4c
   318ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   318b0:	str	r0, [sp, #80]	; 0x50
   318b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   318b8:	str	r0, [sp, #84]	; 0x54
   318bc:	ldr	r0, [fp, #20]
   318c0:	add	r1, sp, #64	; 0x40
   318c4:	str	r0, [sp, #20]
   318c8:	mov	r0, r1
   318cc:	ldr	r1, [sp, #20]
   318d0:	blx	r1
   318d4:	cmp	r0, #0
   318d8:	beq	318fc <flatcc_verify_union_vector_field@@Base+0x540>
   318dc:	ldr	r0, [fp, #20]
   318e0:	add	r1, sp, #64	; 0x40
   318e4:	str	r0, [sp, #16]
   318e8:	mov	r0, r1
   318ec:	ldr	r1, [sp, #16]
   318f0:	blx	r1
   318f4:	str	r0, [fp, #-12]
   318f8:	b	31928 <flatcc_verify_union_vector_field@@Base+0x56c>
   318fc:	b	31900 <flatcc_verify_union_vector_field@@Base+0x544>
   31900:	b	31904 <flatcc_verify_union_vector_field@@Base+0x548>
   31904:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31908:	add	r0, r0, #1
   3190c:	str	r0, [fp, #-32]	; 0xffffffe0
   31910:	ldr	r0, [fp, #-24]	; 0xffffffe8
   31914:	add	r0, r0, #4
   31918:	str	r0, [fp, #-24]	; 0xffffffe8
   3191c:	b	317e0 <flatcc_verify_union_vector_field@@Base+0x424>
   31920:	movw	r0, #0
   31924:	str	r0, [fp, #-12]
   31928:	ldr	r0, [fp, #-12]
   3192c:	sub	sp, fp, #8
   31930:	pop	{r4, r5, fp, pc}
   31934:	svccc	0x00ffffff
   31938:	sub	sp, sp, #20
   3193c:	str	r0, [sp, #16]
   31940:	str	r1, [sp, #12]
   31944:	str	r2, [sp, #8]
   31948:	ldr	r0, [sp, #12]
   3194c:	ldr	r1, [sp, #8]
   31950:	add	r0, r0, r1
   31954:	str	r0, [sp, #4]
   31958:	ldr	r0, [sp, #4]
   3195c:	ldr	r1, [sp, #12]
   31960:	cmp	r0, r1
   31964:	movw	r0, #0
   31968:	str	r0, [sp]
   3196c:	bls	319ac <flatcc_verify_union_vector_field@@Base+0x5f0>
   31970:	ldr	r0, [sp, #4]
   31974:	add	r0, r0, #4
   31978:	ldr	r1, [sp, #16]
   3197c:	cmp	r0, r1
   31980:	movw	r0, #0
   31984:	str	r0, [sp]
   31988:	bhi	319ac <flatcc_verify_union_vector_field@@Base+0x5f0>
   3198c:	ldr	r0, [sp, #4]
   31990:	and	r0, r0, #3
   31994:	cmp	r0, #0
   31998:	movw	r0, #0
   3199c:	movne	r0, #1
   319a0:	mvn	r1, #0
   319a4:	eor	r0, r0, r1
   319a8:	str	r0, [sp]
   319ac:	ldr	r0, [sp]
   319b0:	and	r0, r0, #1
   319b4:	add	sp, sp, #20
   319b8:	bx	lr
   319bc:	push	{fp, lr}
   319c0:	mov	fp, sp
   319c4:	sub	sp, sp, #8
   319c8:	str	r0, [sp, #4]
   319cc:	ldr	r0, [sp, #4]
   319d0:	ldr	r0, [r0]
   319d4:	bl	319e0 <flatcc_verify_union_vector_field@@Base+0x624>
   319d8:	mov	sp, fp
   319dc:	pop	{fp, pc}
   319e0:	sub	sp, sp, #4
   319e4:	str	r0, [sp]
   319e8:	ldr	r0, [sp]
   319ec:	add	sp, sp, #4
   319f0:	bx	lr
   319f4:	sub	sp, sp, #28
   319f8:	str	r0, [sp, #24]
   319fc:	str	r1, [sp, #20]
   31a00:	str	r2, [sp, #16]
   31a04:	strh	r3, [sp, #14]
   31a08:	ldr	r0, [sp, #20]
   31a0c:	ldr	r1, [sp, #16]
   31a10:	add	r0, r0, r1
   31a14:	str	r0, [sp, #8]
   31a18:	ldrh	r0, [sp, #14]
   31a1c:	cmp	r0, #4
   31a20:	bcs	31a30 <flatcc_verify_union_vector_field@@Base+0x674>
   31a24:	movw	r0, #4
   31a28:	str	r0, [sp, #4]
   31a2c:	b	31a38 <flatcc_verify_union_vector_field@@Base+0x67c>
   31a30:	ldrh	r0, [sp, #14]
   31a34:	str	r0, [sp, #4]
   31a38:	ldr	r0, [sp, #4]
   31a3c:	strh	r0, [sp, #14]
   31a40:	ldr	r0, [sp, #8]
   31a44:	ldr	r1, [sp, #20]
   31a48:	cmp	r0, r1
   31a4c:	movw	r0, #0
   31a50:	str	r0, [sp]
   31a54:	bls	31aa4 <flatcc_verify_union_vector_field@@Base+0x6e8>
   31a58:	ldr	r0, [sp, #8]
   31a5c:	add	r0, r0, #4
   31a60:	ldr	r1, [sp, #24]
   31a64:	cmp	r0, r1
   31a68:	movw	r0, #0
   31a6c:	str	r0, [sp]
   31a70:	bhi	31aa4 <flatcc_verify_union_vector_field@@Base+0x6e8>
   31a74:	ldr	r0, [sp, #8]
   31a78:	add	r0, r0, #4
   31a7c:	ldrh	r1, [sp, #14]
   31a80:	sub	r1, r1, #1
   31a84:	orr	r1, r1, #3
   31a88:	and	r0, r0, r1
   31a8c:	cmp	r0, #0
   31a90:	movw	r0, #0
   31a94:	movne	r0, #1
   31a98:	mvn	r1, #0
   31a9c:	eor	r0, r0, r1
   31aa0:	str	r0, [sp]
   31aa4:	ldr	r0, [sp]
   31aa8:	and	r0, r0, #1
   31aac:	add	sp, sp, #28
   31ab0:	bx	lr
   31ab4:	push	{fp, lr}
   31ab8:	mov	fp, sp
   31abc:	sub	sp, sp, #8
   31ac0:	str	r0, [sp, #4]
   31ac4:	str	r1, [sp]
   31ac8:	ldr	r0, [sp, #4]
   31acc:	ldr	r1, [sp]
   31ad0:	add	r0, r0, r1
   31ad4:	bl	31ae4 <flatcc_verify_union_vector_field@@Base+0x728>
   31ad8:	uxth	r0, r0
   31adc:	mov	sp, fp
   31ae0:	pop	{fp, pc}
   31ae4:	push	{fp, lr}
   31ae8:	mov	fp, sp
   31aec:	sub	sp, sp, #8
   31af0:	str	r0, [sp, #4]
   31af4:	ldr	r0, [sp, #4]
   31af8:	ldrh	r0, [r0]
   31afc:	bl	31b0c <flatcc_verify_union_vector_field@@Base+0x750>
   31b00:	uxth	r0, r0
   31b04:	mov	sp, fp
   31b08:	pop	{fp, pc}
   31b0c:	sub	sp, sp, #4
   31b10:	strh	r0, [sp, #2]
   31b14:	ldrh	r0, [sp, #2]
   31b18:	add	sp, sp, #4
   31b1c:	bx	lr
   31b20:	sub	sp, sp, #4
   31b24:	str	r0, [sp]
   31b28:	ldr	r0, [sp]
   31b2c:	add	sp, sp, #4
   31b30:	bx	lr
   31b34:	push	{fp, lr}
   31b38:	mov	fp, sp
   31b3c:	sub	sp, sp, #8
   31b40:	str	r0, [sp, #4]
   31b44:	ldr	r0, [sp, #4]
   31b48:	ldr	r0, [r0]
   31b4c:	bl	31b58 <flatcc_verify_union_vector_field@@Base+0x79c>
   31b50:	mov	sp, fp
   31b54:	pop	{fp, pc}
   31b58:	sub	sp, sp, #4
   31b5c:	str	r0, [sp]
   31b60:	ldr	r0, [sp]
   31b64:	add	sp, sp, #4
   31b68:	bx	lr

00031b6c <__libc_csu_init@@Base>:
   31b6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31b70:	mov	r7, r0
   31b74:	ldr	r6, [pc, #72]	; 31bc4 <__libc_csu_init@@Base+0x58>
   31b78:	ldr	r5, [pc, #72]	; 31bc8 <__libc_csu_init@@Base+0x5c>
   31b7c:	add	r6, pc, r6
   31b80:	add	r5, pc, r5
   31b84:	sub	r6, r6, r5
   31b88:	mov	r8, r1
   31b8c:	mov	r9, r2
   31b90:	bl	12d70 <strcmp@plt-0x20>
   31b94:	asrs	r6, r6, #2
   31b98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31b9c:	mov	r4, #0
   31ba0:	add	r4, r4, #1
   31ba4:	ldr	r3, [r5], #4
   31ba8:	mov	r2, r9
   31bac:	mov	r1, r8
   31bb0:	mov	r0, r7
   31bb4:	blx	r3
   31bb8:	cmp	r6, r4
   31bbc:	bne	31ba0 <__libc_csu_init@@Base+0x34>
   31bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31bc4:	andeq	r7, r1, r8, lsl #7
   31bc8:	andeq	r7, r1, r0, lsl #7

00031bcc <__libc_csu_fini@@Base>:
   31bcc:	bx	lr

Disassembly of section .fini:

00031bd0 <.fini>:
   31bd0:	push	{r3, lr}
   31bd4:	pop	{r3, pc}
