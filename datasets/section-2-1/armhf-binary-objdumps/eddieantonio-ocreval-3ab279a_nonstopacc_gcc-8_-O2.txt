
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109bc <.init>:
   109bc:	push	{r3, lr}
   109c0:	bl	10c80 <__assert_fail@plt+0xf4>
   109c4:	pop	{r3, pc}

Disassembly of section .plt:

000109c8 <calloc@plt-0x14>:
   109c8:	push	{lr}		; (str lr, [sp, #-4]!)
   109cc:	ldr	lr, [pc, #4]	; 109d8 <calloc@plt-0x4>
   109d0:	add	lr, pc, lr
   109d4:	ldr	pc, [lr, #8]!
   109d8:	andeq	r7, r1, r8, lsr #12

000109dc <calloc@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #94208	; 0x17000
   109e4:	ldr	pc, [ip, #1576]!	; 0x628

000109e8 <strcmp@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #94208	; 0x17000
   109f0:	ldr	pc, [ip, #1568]!	; 0x620

000109f4 <strtol@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #94208	; 0x17000
   109fc:	ldr	pc, [ip, #1560]!	; 0x618

00010a00 <printf@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #94208	; 0x17000
   10a08:	ldr	pc, [ip, #1552]!	; 0x610

00010a0c <fopen@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #94208	; 0x17000
   10a14:	ldr	pc, [ip, #1544]!	; 0x608

00010a18 <free@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #94208	; 0x17000
   10a20:	ldr	pc, [ip, #1536]!	; 0x600

00010a24 <utf8proc_get_property@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #94208	; 0x17000
   10a2c:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a30 <fgets@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #94208	; 0x17000
   10a38:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a3c <utf8proc_encode_char@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #94208	; 0x17000
   10a44:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a48 <strdup@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #94208	; 0x17000
   10a50:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a54 <rewind@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #94208	; 0x17000
   10a5c:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a60 <unlink@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #94208	; 0x17000
   10a68:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a6c <utf8proc_tolower@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #94208	; 0x17000
   10a74:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a78 <__xstat@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #94208	; 0x17000
   10a80:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a84 <fwrite@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #94208	; 0x17000
   10a8c:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a90 <fread@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #94208	; 0x17000
   10a98:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a9c <utf8proc_iterate@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #94208	; 0x17000
   10aa4:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa8 <malloc@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #94208	; 0x17000
   10ab0:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab4 <__libc_start_main@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #94208	; 0x17000
   10abc:	ldr	pc, [ip, #1432]!	; 0x598

00010ac0 <__sysv_signal@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #94208	; 0x17000
   10ac8:	ldr	pc, [ip, #1424]!	; 0x590

00010acc <__gmon_start__@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #94208	; 0x17000
   10ad4:	ldr	pc, [ip, #1416]!	; 0x588

00010ad8 <getpid@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1408]!	; 0x580

00010ae4 <exit@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1400]!	; 0x578

00010af0 <utf8proc_category@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1392]!	; 0x570

00010afc <strlen@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1384]!	; 0x568

00010b08 <fprintf@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1376]!	; 0x560

00010b14 <__isoc99_sscanf@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1368]!	; 0x558

00010b20 <fclose@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1360]!	; 0x550

00010b2c <utf8proc_NFC@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1352]!	; 0x548

00010b38 <fputc@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1344]!	; 0x540

00010b44 <sprintf@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1336]!	; 0x538

00010b50 <utf8proc_errmsg@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1328]!	; 0x530

00010b5c <fputs@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1320]!	; 0x528

00010b68 <strncmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1312]!	; 0x520

00010b74 <abort@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1304]!	; 0x518

00010b80 <getc@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1296]!	; 0x510

00010b8c <__assert_fail@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1288]!	; 0x508

Disassembly of section .text:

00010b98 <error@@Base-0x940>:
   10b98:	ldr	r2, [pc, #136]	; 10c28 <__assert_fail@plt+0x9c>
   10b9c:	mov	r3, #0
   10ba0:	strd	r4, [sp, #-16]!
   10ba4:	mov	r5, r1
   10ba8:	str	r6, [sp, #8]
   10bac:	str	lr, [sp, #12]
   10bb0:	sub	sp, sp, #8
   10bb4:	ldr	r4, [pc, #112]	; 10c2c <__assert_fail@plt+0xa0>
   10bb8:	add	r2, pc, r2
   10bbc:	str	r0, [sp, #4]
   10bc0:	add	r0, sp, #4
   10bc4:	bl	116bc <error@@Base+0x1e4>
   10bc8:	ldr	r3, [sp, #4]
   10bcc:	add	r4, pc, r4
   10bd0:	cmp	r3, #2
   10bd4:	beq	10be4 <__assert_fail@plt+0x58>
   10bd8:	ldr	r0, [pc, #80]	; 10c30 <__assert_fail@plt+0xa4>
   10bdc:	add	r0, pc, r0
   10be0:	bl	114d8 <error@@Base>
   10be4:	ldr	r3, [pc, #72]	; 10c34 <__assert_fail@plt+0xa8>
   10be8:	ldr	r2, [pc, #72]	; 10c38 <__assert_fail@plt+0xac>
   10bec:	ldr	r1, [r5]
   10bf0:	ldr	r6, [r4, r3]
   10bf4:	ldr	r2, [r4, r2]
   10bf8:	mov	r0, r6
   10bfc:	bl	12dc8 <error@@Base+0x18f0>
   10c00:	ldr	r3, [pc, #52]	; 10c3c <__assert_fail@plt+0xb0>
   10c04:	mov	r1, r6
   10c08:	ldr	r0, [r4, r3]
   10c0c:	bl	1250c <error@@Base+0x1034>
   10c10:	ldr	r3, [pc, #40]	; 10c40 <__assert_fail@plt+0xb4>
   10c14:	ldr	r1, [r5, #4]
   10c18:	ldr	r0, [r4, r3]
   10c1c:	bl	12050 <error@@Base+0xb78>
   10c20:	bl	10e24 <__assert_fail@plt+0x298>
   10c24:	bl	1145c <__assert_fail@plt+0x8d0>
   10c28:	andeq	r2, r0, r4, asr #27
   10c2c:	andeq	r7, r1, ip, lsr #8
   10c30:	andeq	r2, r0, r4, asr #27
   10c34:	andeq	r0, r0, r4, lsr #1
   10c38:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10c3c:	strheq	r0, [r0], -r4
   10c40:	andeq	r0, r0, r4, asr #1
   10c44:	mov	fp, #0
   10c48:	mov	lr, #0
   10c4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10c50:	mov	r2, sp
   10c54:	push	{r2}		; (str r2, [sp, #-4]!)
   10c58:	push	{r0}		; (str r0, [sp, #-4]!)
   10c5c:	ldr	ip, [pc, #16]	; 10c74 <__assert_fail@plt+0xe8>
   10c60:	push	{ip}		; (str ip, [sp, #-4]!)
   10c64:	ldr	r0, [pc, #12]	; 10c78 <__assert_fail@plt+0xec>
   10c68:	ldr	r3, [pc, #12]	; 10c7c <__assert_fail@plt+0xf0>
   10c6c:	bl	10ab4 <__libc_start_main@plt>
   10c70:	bl	10b74 <abort@plt>
   10c74:	andeq	r3, r1, r8, ror #18
   10c78:	muleq	r1, r8, fp
   10c7c:	andeq	r3, r1, r8, lsl #18
   10c80:	ldr	r3, [pc, #20]	; 10c9c <__assert_fail@plt+0x110>
   10c84:	ldr	r2, [pc, #20]	; 10ca0 <__assert_fail@plt+0x114>
   10c88:	add	r3, pc, r3
   10c8c:	ldr	r2, [r3, r2]
   10c90:	cmp	r2, #0
   10c94:	bxeq	lr
   10c98:	b	10acc <__gmon_start__@plt>
   10c9c:	andeq	r7, r1, r0, ror r3
   10ca0:	strheq	r0, [r0], -ip
   10ca4:	ldr	r0, [pc, #24]	; 10cc4 <__assert_fail@plt+0x138>
   10ca8:	ldr	r3, [pc, #24]	; 10cc8 <__assert_fail@plt+0x13c>
   10cac:	cmp	r3, r0
   10cb0:	bxeq	lr
   10cb4:	ldr	r3, [pc, #16]	; 10ccc <__assert_fail@plt+0x140>
   10cb8:	cmp	r3, #0
   10cbc:	bxeq	lr
   10cc0:	bx	r3
   10cc4:	strdeq	r8, [r2], -ip
   10cc8:	strdeq	r8, [r2], -ip
   10ccc:	andeq	r0, r0, r0
   10cd0:	ldr	r0, [pc, #36]	; 10cfc <__assert_fail@plt+0x170>
   10cd4:	ldr	r1, [pc, #36]	; 10d00 <__assert_fail@plt+0x174>
   10cd8:	sub	r1, r1, r0
   10cdc:	asr	r1, r1, #2
   10ce0:	add	r1, r1, r1, lsr #31
   10ce4:	asrs	r1, r1, #1
   10ce8:	bxeq	lr
   10cec:	ldr	r3, [pc, #16]	; 10d04 <__assert_fail@plt+0x178>
   10cf0:	cmp	r3, #0
   10cf4:	bxeq	lr
   10cf8:	bx	r3
   10cfc:	strdeq	r8, [r2], -ip
   10d00:	strdeq	r8, [r2], -ip
   10d04:	andeq	r0, r0, r0
   10d08:	push	{r4, lr}
   10d0c:	ldr	r4, [pc, #24]	; 10d2c <__assert_fail@plt+0x1a0>
   10d10:	ldrb	r3, [r4]
   10d14:	cmp	r3, #0
   10d18:	popne	{r4, pc}
   10d1c:	bl	10ca4 <__assert_fail@plt+0x118>
   10d20:	mov	r3, #1
   10d24:	strb	r3, [r4]
   10d28:	pop	{r4, pc}
   10d2c:	strdeq	r8, [r2], -ip
   10d30:	b	10cd0 <__assert_fail@plt+0x144>
   10d34:	andeq	r0, r0, r0
   10d38:	str	r4, [sp, #-8]!
   10d3c:	str	lr, [sp, #4]
   10d40:	bl	10f44 <__assert_fail@plt+0x3b8>
   10d44:	ldr	r3, [pc, #68]	; 10d90 <__assert_fail@plt+0x204>
   10d48:	cmp	r0, #0
   10d4c:	add	r3, pc, r3
   10d50:	beq	10d84 <__assert_fail@plt+0x1f8>
   10d54:	ldr	r2, [pc, #56]	; 10d94 <__assert_fail@plt+0x208>
   10d58:	ldr	lr, [r0, #12]
   10d5c:	ldr	ip, [r0, #16]
   10d60:	ldr	r0, [r3, r2]
   10d64:	ldr	r2, [pc, #44]	; 10d98 <__assert_fail@plt+0x20c>
   10d68:	ldr	r1, [r0]
   10d6c:	sub	r1, r1, lr
   10d70:	str	r1, [r0]
   10d74:	ldr	r2, [r3, r2]
   10d78:	ldr	r3, [r2]
   10d7c:	sub	r3, r3, ip
   10d80:	str	r3, [r2]
   10d84:	ldr	r4, [sp]
   10d88:	add	sp, sp, #4
   10d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   10d90:	andeq	r7, r1, ip, lsr #5
   10d94:	andeq	r0, r0, r0, lsr #1
   10d98:	ldrdeq	r0, [r0], -r8
   10d9c:	ldr	ip, [pc, #108]	; 10e10 <__assert_fail@plt+0x284>
   10da0:	push	{lr}		; (str lr, [sp, #-4]!)
   10da4:	ldr	r2, [pc, #104]	; 10e14 <__assert_fail@plt+0x288>
   10da8:	ldr	r0, [pc, #104]	; 10e18 <__assert_fail@plt+0x28c>
   10dac:	add	ip, pc, ip
   10db0:	ldr	r1, [ip]
   10db4:	add	r2, pc, r2
   10db8:	ldr	r3, [pc, #92]	; 10e1c <__assert_fail@plt+0x290>
   10dbc:	vldr	d5, [pc, #68]	; 10e08 <__assert_fail@plt+0x27c>
   10dc0:	add	lr, r1, #1
   10dc4:	str	lr, [ip]
   10dc8:	ldr	ip, [r2, r0]
   10dcc:	ldr	r2, [r2, r3]
   10dd0:	ldr	r0, [pc, #72]	; 10e20 <__assert_fail@plt+0x294>
   10dd4:	ldr	r3, [ip]
   10dd8:	ldr	r2, [r2]
   10ddc:	add	r0, pc, r0
   10de0:	pop	{lr}		; (ldr lr, [sp], #4)
   10de4:	vmov	s15, r3
   10de8:	sub	r3, r3, r2
   10dec:	vmov	s14, r3
   10df0:	vcvt.f64.s32	d6, s15
   10df4:	vcvt.f64.s32	d7, s14
   10df8:	vmul.f64	d7, d7, d5
   10dfc:	vdiv.f64	d7, d7, d6
   10e00:	vmov	r2, r3, d7
   10e04:	b	10a00 <printf@plt>
   10e08:	andeq	r0, r0, r0
   10e0c:	subsmi	r0, r9, r0
   10e10:	andeq	r7, r1, ip, asr #6
   10e14:	andeq	r7, r1, r4, asr #4
   10e18:	andeq	r0, r0, r0, lsr #1
   10e1c:	ldrdeq	r0, [r0], -r8
   10e20:	muleq	r0, r4, fp
   10e24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10e28:	ldr	r4, [pc, #176]	; 10ee0 <__assert_fail@plt+0x354>
   10e2c:	strd	r6, [sp, #8]
   10e30:	ldr	r1, [pc, #172]	; 10ee4 <__assert_fail@plt+0x358>
   10e34:	str	r8, [sp, #16]
   10e38:	ldr	r2, [pc, #168]	; 10ee8 <__assert_fail@plt+0x35c>
   10e3c:	add	r4, pc, r4
   10e40:	str	lr, [sp, #20]
   10e44:	ldr	r3, [pc, #160]	; 10eec <__assert_fail@plt+0x360>
   10e48:	ldr	r5, [r4, r1]
   10e4c:	ldr	r6, [r4, r2]
   10e50:	ldr	r2, [r5]
   10e54:	ldr	r1, [r5, #4]
   10e58:	str	r2, [r6]
   10e5c:	cmp	r2, #0
   10e60:	ldr	r3, [r4, r3]
   10e64:	str	r1, [r3]
   10e68:	bne	10e80 <__assert_fail@plt+0x2f4>
   10e6c:	ldrd	r4, [sp]
   10e70:	ldrd	r6, [sp, #8]
   10e74:	ldr	r8, [sp, #16]
   10e78:	add	sp, sp, #20
   10e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   10e80:	bl	10d9c <__assert_fail@plt+0x210>
   10e84:	ldr	r3, [pc, #100]	; 10ef0 <__assert_fail@plt+0x364>
   10e88:	ldr	r3, [r4, r3]
   10e8c:	ldr	r4, [r3]
   10e90:	cmp	r4, #0
   10e94:	beq	10e6c <__assert_fail@plt+0x2e0>
   10e98:	add	r7, r5, #9024	; 0x2340
   10e9c:	add	r5, r5, #992	; 0x3e0
   10ea0:	add	r7, r7, #24
   10ea4:	b	10eb8 <__assert_fail@plt+0x32c>
   10ea8:	bl	10d9c <__assert_fail@plt+0x210>
   10eac:	ldr	r4, [r4, #4]
   10eb0:	cmp	r4, #0
   10eb4:	beq	10e6c <__assert_fail@plt+0x2e0>
   10eb8:	mov	r0, r5
   10ebc:	ldr	r1, [r4, #8]
   10ec0:	bl	10d38 <__assert_fail@plt+0x1ac>
   10ec4:	mov	r0, r7
   10ec8:	ldr	r1, [r4, #8]
   10ecc:	bl	10d38 <__assert_fail@plt+0x1ac>
   10ed0:	ldr	r3, [r6]
   10ed4:	cmp	r3, #0
   10ed8:	bne	10ea8 <__assert_fail@plt+0x31c>
   10edc:	b	10e6c <__assert_fail@plt+0x2e0>
   10ee0:			; <UNDEFINED> instruction: 0x000171bc
   10ee4:	andeq	r0, r0, r4, asr #1
   10ee8:	andeq	r0, r0, r0, lsr #1
   10eec:	ldrdeq	r0, [r0], -r8
   10ef0:	strheq	r0, [r0], -r4
   10ef4:	strd	r4, [sp, #-16]!
   10ef8:	add	r5, r0, #8000	; 0x1f40
   10efc:	mov	r4, r0
   10f00:	add	r5, r5, #48	; 0x30
   10f04:	str	r6, [sp, #8]
   10f08:	mov	r6, r0
   10f0c:	str	lr, [sp, #12]
   10f10:	mov	r0, r4
   10f14:	add	r4, r4, #16
   10f18:	bl	134a0 <error@@Base+0x1fc8>
   10f1c:	cmp	r4, r5
   10f20:	bne	10f10 <__assert_fail@plt+0x384>
   10f24:	add	r6, r6, #4096	; 0x1000
   10f28:	mov	r3, #0
   10f2c:	ldrd	r4, [sp]
   10f30:	str	r3, [r6, #3952]	; 0xf70
   10f34:	str	r3, [r6, #3956]	; 0xf74
   10f38:	ldr	r6, [sp, #8]
   10f3c:	add	sp, sp, #12
   10f40:	pop	{pc}		; (ldr pc, [sp], #4)
   10f44:	strd	r4, [sp, #-16]!
   10f48:	mov	r5, r1
   10f4c:	str	r6, [sp, #8]
   10f50:	str	lr, [sp, #12]
   10f54:	ldrb	r3, [r1]
   10f58:	cmp	r3, #0
   10f5c:	beq	10f8c <__assert_fail@plt+0x400>
   10f60:	mov	r2, #0
   10f64:	add	r2, r2, r3
   10f68:	ldrb	r3, [r1, #1]!
   10f6c:	cmp	r3, #0
   10f70:	bne	10f64 <__assert_fail@plt+0x3d8>
   10f74:	movw	r3, #20065	; 0x4e61
   10f78:	movt	r3, #33354	; 0x824a
   10f7c:	movw	r1, #503	; 0x1f7
   10f80:	umull	ip, r3, r3, r2
   10f84:	lsr	r3, r3, #8
   10f88:	mls	r3, r1, r3, r2
   10f8c:	ldr	r4, [r0, r3, lsl #4]
   10f90:	cmp	r4, #0
   10f94:	bne	10fa8 <__assert_fail@plt+0x41c>
   10f98:	b	10fbc <__assert_fail@plt+0x430>
   10f9c:	ldr	r4, [r4, #4]
   10fa0:	cmp	r4, #0
   10fa4:	beq	10fbc <__assert_fail@plt+0x430>
   10fa8:	mov	r0, r5
   10fac:	ldr	r1, [r4, #8]
   10fb0:	bl	109e8 <strcmp@plt>
   10fb4:	cmp	r0, #0
   10fb8:	bne	10f9c <__assert_fail@plt+0x410>
   10fbc:	mov	r0, r4
   10fc0:	ldrd	r4, [sp]
   10fc4:	ldr	r6, [sp, #8]
   10fc8:	add	sp, sp, #12
   10fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   10fd0:	ldr	r2, [r1, #8]
   10fd4:	str	r4, [sp, #-8]!
   10fd8:	mov	r4, r0
   10fdc:	str	lr, [sp, #4]
   10fe0:	ldrb	r3, [r2]
   10fe4:	cmp	r3, #0
   10fe8:	beq	1101c <__assert_fail@plt+0x490>
   10fec:	mov	r0, #0
   10ff0:	add	r0, r0, r3
   10ff4:	ldrb	r3, [r2, #1]!
   10ff8:	cmp	r3, #0
   10ffc:	bne	10ff0 <__assert_fail@plt+0x464>
   11000:	movw	r3, #20065	; 0x4e61
   11004:	movt	r3, #33354	; 0x824a
   11008:	movw	r2, #503	; 0x1f7
   1100c:	umull	ip, r3, r3, r0
   11010:	lsr	r3, r3, #8
   11014:	mls	r0, r2, r3, r0
   11018:	add	r0, r4, r0, lsl #4
   1101c:	add	r4, r4, #4096	; 0x1000
   11020:	bl	134b8 <error@@Base+0x1fe0>
   11024:	ldr	r0, [r4, #3952]	; 0xf70
   11028:	cmp	r0, #0
   1102c:	beq	1103c <__assert_fail@plt+0x4b0>
   11030:	bl	10a18 <free@plt>
   11034:	mov	r3, #0
   11038:	str	r3, [r4, #3952]	; 0xf70
   1103c:	ldr	r3, [r4, #3956]	; 0xf74
   11040:	add	r3, r3, #1
   11044:	str	r3, [r4, #3956]	; 0xf74
   11048:	ldr	r4, [sp]
   1104c:	add	sp, sp, #4
   11050:	pop	{pc}		; (ldr pc, [sp], #4)
   11054:	ldr	r2, [r1, #8]
   11058:	str	r4, [sp, #-8]!
   1105c:	mov	r4, r0
   11060:	str	lr, [sp, #4]
   11064:	ldrb	r3, [r2]
   11068:	cmp	r3, #0
   1106c:	beq	110a0 <__assert_fail@plt+0x514>
   11070:	mov	r0, #0
   11074:	add	r0, r0, r3
   11078:	ldrb	r3, [r2, #1]!
   1107c:	cmp	r3, #0
   11080:	bne	11074 <__assert_fail@plt+0x4e8>
   11084:	movw	r3, #20065	; 0x4e61
   11088:	movt	r3, #33354	; 0x824a
   1108c:	movw	r2, #503	; 0x1f7
   11090:	umull	ip, r3, r3, r0
   11094:	lsr	r3, r3, #8
   11098:	mls	r0, r2, r3, r0
   1109c:	add	r0, r4, r0, lsl #4
   110a0:	add	r4, r4, #4096	; 0x1000
   110a4:	bl	13618 <error@@Base+0x2140>
   110a8:	ldr	r0, [r4, #3952]	; 0xf70
   110ac:	cmp	r0, #0
   110b0:	beq	110c0 <__assert_fail@plt+0x534>
   110b4:	bl	10a18 <free@plt>
   110b8:	mov	r3, #0
   110bc:	str	r3, [r4, #3952]	; 0xf70
   110c0:	ldr	r3, [r4, #3956]	; 0xf74
   110c4:	sub	r3, r3, #1
   110c8:	str	r3, [r4, #3956]	; 0xf74
   110cc:	ldr	r4, [sp]
   110d0:	add	sp, sp, #4
   110d4:	pop	{pc}		; (ldr pc, [sp], #4)
   110d8:	strd	r4, [sp, #-16]!
   110dc:	str	r6, [sp, #8]
   110e0:	add	r6, r0, #4096	; 0x1000
   110e4:	ldr	r4, [r6, #3952]	; 0xf70
   110e8:	str	lr, [sp, #12]
   110ec:	cmp	r4, #0
   110f0:	beq	11104 <__assert_fail@plt+0x578>
   110f4:	ldrd	r4, [sp]
   110f8:	ldr	r6, [sp, #8]
   110fc:	add	sp, sp, #12
   11100:	pop	{pc}		; (ldr pc, [sp], #4)
   11104:	ldr	r3, [r6, #3956]	; 0xf74
   11108:	cmp	r3, #0
   1110c:	beq	110f4 <__assert_fail@plt+0x568>
   11110:	mov	r5, r0
   11114:	mov	r1, #4
   11118:	mov	r0, r3
   1111c:	bl	11534 <error@@Base+0x5c>
   11120:	mov	r2, r4
   11124:	mov	ip, r4
   11128:	str	r0, [r6, #3952]	; 0xf70
   1112c:	movw	lr, #503	; 0x1f7
   11130:	ldr	r3, [r5, ip, lsl #4]
   11134:	cmp	r3, #0
   11138:	beq	11154 <__assert_fail@plt+0x5c8>
   1113c:	add	r1, r0, r2, lsl #2
   11140:	str	r3, [r1], #4
   11144:	add	r2, r2, #1
   11148:	ldr	r3, [r3, #4]
   1114c:	cmp	r3, #0
   11150:	bne	11140 <__assert_fail@plt+0x5b4>
   11154:	add	ip, ip, #1
   11158:	cmp	ip, lr
   1115c:	bne	11130 <__assert_fail@plt+0x5a4>
   11160:	ldrd	r4, [sp]
   11164:	ldr	r6, [sp, #8]
   11168:	add	sp, sp, #12
   1116c:	pop	{pc}		; (ldr pc, [sp], #4)
   11170:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11174:	add	r5, r0, #8000	; 0x1f40
   11178:	mov	r4, r0
   1117c:	add	r5, r5, #48	; 0x30
   11180:	strd	r6, [sp, #8]
   11184:	mov	r7, r0
   11188:	mov	r6, r1
   1118c:	str	r8, [sp, #16]
   11190:	str	lr, [sp, #20]
   11194:	mov	r0, r4
   11198:	mov	r1, r6
   1119c:	add	r4, r4, #16
   111a0:	bl	136e4 <error@@Base+0x220c>
   111a4:	cmp	r4, r5
   111a8:	bne	11194 <__assert_fail@plt+0x608>
   111ac:	add	r7, r7, #4096	; 0x1000
   111b0:	ldr	r0, [r7, #3952]	; 0xf70
   111b4:	cmp	r0, #0
   111b8:	beq	111c8 <__assert_fail@plt+0x63c>
   111bc:	bl	10a18 <free@plt>
   111c0:	mov	r3, #0
   111c4:	str	r3, [r7, #3952]	; 0xf70
   111c8:	mov	r3, #0
   111cc:	ldrd	r4, [sp]
   111d0:	ldr	r8, [sp, #16]
   111d4:	str	r3, [r7, #3956]	; 0xf74
   111d8:	ldrd	r6, [sp, #8]
   111dc:	add	sp, sp, #20
   111e0:	pop	{pc}		; (ldr pc, [sp], #4)
   111e4:	ldr	r3, [pc, #96]	; 1124c <__assert_fail@plt+0x6c0>
   111e8:	strd	r4, [sp, #-16]!
   111ec:	ldr	r2, [pc, #92]	; 11250 <__assert_fail@plt+0x6c4>
   111f0:	str	r6, [sp, #8]
   111f4:	mov	r6, r0
   111f8:	str	lr, [sp, #12]
   111fc:	sub	sp, sp, #112	; 0x70
   11200:	add	r3, pc, r3
   11204:	add	r4, sp, #12
   11208:	ldr	r3, [r3, r2]
   1120c:	ldr	r5, [r3]
   11210:	bl	10ad8 <getpid@plt>
   11214:	ldr	r1, [pc, #56]	; 11254 <__assert_fail@plt+0x6c8>
   11218:	mov	r3, r0
   1121c:	mov	r0, r4
   11220:	str	r6, [sp]
   11224:	mov	r2, r5
   11228:	add	r1, pc, r1
   1122c:	bl	10b44 <sprintf@plt>
   11230:	mov	r0, r4
   11234:	bl	10a48 <strdup@plt>
   11238:	add	sp, sp, #112	; 0x70
   1123c:	ldrd	r4, [sp]
   11240:	ldr	r6, [sp, #8]
   11244:	add	sp, sp, #12
   11248:	pop	{pc}		; (ldr pc, [sp], #4)
   1124c:	strdeq	r6, [r1], -r8
   11250:	andeq	r0, r0, r0, asr #1
   11254:	muleq	r0, r0, r7
   11258:	ldr	r3, [pc, #116]	; 112d4 <__assert_fail@plt+0x748>
   1125c:	mov	r6, r0
   11260:	str	r7, [sp, #-8]!
   11264:	ldr	r2, [pc, #108]	; 112d8 <__assert_fail@plt+0x74c>
   11268:	str	lr, [sp, #4]
   1126c:	add	r3, pc, r3
   11270:	ldr	r3, [r3, r2]
   11274:	ldr	r3, [r3]
   11278:	cmp	r3, #0
   1127c:	beq	11284 <__assert_fail@plt+0x6f8>
   11280:	blx	r3
   11284:	ldr	r3, [pc, #80]	; 112dc <__assert_fail@plt+0x750>
   11288:	add	r3, pc, r3
   1128c:	ldrsh	r2, [r3]
   11290:	cmp	r2, #0
   11294:	ble	112cc <__assert_fail@plt+0x740>
   11298:	mov	r5, r3
   1129c:	mov	r4, #1
   112a0:	mov	r0, r4
   112a4:	add	r4, r4, #1
   112a8:	bl	111e4 <__assert_fail@plt+0x658>
   112ac:	mov	r7, r0
   112b0:	sxth	r4, r4
   112b4:	bl	10a60 <unlink@plt>
   112b8:	mov	r0, r7
   112bc:	bl	10a18 <free@plt>
   112c0:	ldrsh	r3, [r5]
   112c4:	cmp	r3, r4
   112c8:	bge	112a0 <__assert_fail@plt+0x714>
   112cc:	mov	r0, r6
   112d0:	bl	10ae4 <exit@plt>
   112d4:	andeq	r6, r1, ip, lsl #27
   112d8:	andeq	r0, r0, r8, asr #1
   112dc:	andeq	r6, r1, r4, ror lr
   112e0:	ldrb	r3, [r0]
   112e4:	ldrb	r2, [r1]
   112e8:	cmp	r3, #0
   112ec:	beq	11314 <__assert_fail@plt+0x788>
   112f0:	cmp	r2, r3
   112f4:	beq	11304 <__assert_fail@plt+0x778>
   112f8:	b	11320 <__assert_fail@plt+0x794>
   112fc:	cmp	r3, r2
   11300:	bne	11320 <__assert_fail@plt+0x794>
   11304:	ldrb	r3, [r0, #1]!
   11308:	ldrb	r2, [r1, #1]!
   1130c:	cmp	r3, #0
   11310:	bne	112fc <__assert_fail@plt+0x770>
   11314:	cmp	r2, #0
   11318:	beq	11330 <__assert_fail@plt+0x7a4>
   1131c:	mov	r3, #0
   11320:	cmp	r3, r2
   11324:	mvncc	r0, #0
   11328:	movcs	r0, #1
   1132c:	bx	lr
   11330:	mov	r0, r2
   11334:	bx	lr
   11338:	ldr	r3, [pc, #48]	; 11370 <__assert_fail@plt+0x7e4>
   1133c:	ldr	r1, [pc, #48]	; 11374 <__assert_fail@plt+0x7e8>
   11340:	add	r3, pc, r3
   11344:	ldr	r1, [r3, r1]
   11348:	ldr	r1, [r1]
   1134c:	cmp	r1, r0
   11350:	beq	1136c <__assert_fail@plt+0x7e0>
   11354:	ldr	r1, [pc, #28]	; 11378 <__assert_fail@plt+0x7ec>
   11358:	ldr	r3, [r3, r1]
   1135c:	ldr	r3, [r3]
   11360:	cmp	r3, r0
   11364:	beq	1136c <__assert_fail@plt+0x7e0>
   11368:	b	10b20 <fclose@plt>
   1136c:	bx	lr
   11370:			; <UNDEFINED> instruction: 0x00016cb8
   11374:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11378:	ldrdeq	r0, [r0], -r4
   1137c:	push	{lr}		; (str lr, [sp, #-4]!)
   11380:	sub	sp, sp, #92	; 0x5c
   11384:	mov	r1, r0
   11388:	mov	r2, sp
   1138c:	mov	r0, #3
   11390:	bl	10a78 <__xstat@plt>
   11394:	clz	r0, r0
   11398:	lsr	r0, r0, #5
   1139c:	add	sp, sp, #92	; 0x5c
   113a0:	pop	{pc}		; (ldr pc, [sp], #4)
   113a4:	ldr	r2, [pc, #56]	; 113e4 <__assert_fail@plt+0x858>
   113a8:	str	r4, [sp, #-8]!
   113ac:	add	r2, pc, r2
   113b0:	ldrh	r3, [r2]
   113b4:	str	lr, [sp, #4]
   113b8:	add	r3, r3, #1
   113bc:	sxth	r3, r3
   113c0:	mov	r0, r3
   113c4:	strh	r3, [r2]
   113c8:	bl	111e4 <__assert_fail@plt+0x658>
   113cc:	mov	r4, r0
   113d0:	bl	10a60 <unlink@plt>
   113d4:	mov	r0, r4
   113d8:	ldr	r4, [sp]
   113dc:	add	sp, sp, #4
   113e0:	pop	{pc}		; (ldr pc, [sp], #4)
   113e4:	andeq	r6, r1, r0, asr sp
   113e8:	str	r4, [sp, #-8]!
   113ec:	mov	r4, r0
   113f0:	str	lr, [sp, #4]
   113f4:	bl	10afc <strlen@plt>
   113f8:	uxth	r0, r0
   113fc:	sub	r3, r0, #1
   11400:	sxth	r3, r3
   11404:	cmp	r3, #0
   11408:	blt	11448 <__assert_fail@plt+0x8bc>
   1140c:	ldrb	r2, [r4, r3]
   11410:	cmp	r2, #47	; 0x2f
   11414:	beq	11448 <__assert_fail@plt+0x8bc>
   11418:	sub	r0, r0, #2
   1141c:	sxth	r3, r0
   11420:	add	r2, r3, #1
   11424:	add	r2, r4, r2
   11428:	b	1143c <__assert_fail@plt+0x8b0>
   1142c:	ldrb	r0, [r2, #-1]!
   11430:	cmp	r0, #47	; 0x2f
   11434:	beq	11448 <__assert_fail@plt+0x8bc>
   11438:	mov	r3, r1
   1143c:	tst	r3, #32768	; 0x8000
   11440:	sub	r1, r3, #1
   11444:	beq	1142c <__assert_fail@plt+0x8a0>
   11448:	add	r0, r3, #1
   1144c:	add	r0, r4, r0
   11450:	ldr	r4, [sp]
   11454:	add	sp, sp, #4
   11458:	pop	{pc}		; (ldr pc, [sp], #4)
   1145c:	mov	r0, #0
   11460:	str	r4, [sp, #-8]!
   11464:	str	lr, [sp, #4]
   11468:	bl	11258 <__assert_fail@plt+0x6cc>
   1146c:	ldr	r2, [pc, #80]	; 114c4 <__assert_fail@plt+0x938>
   11470:	str	r4, [sp, #-8]!
   11474:	ldr	r1, [pc, #76]	; 114c8 <__assert_fail@plt+0x93c>
   11478:	str	lr, [sp, #4]
   1147c:	add	r2, pc, r2
   11480:	ldr	r1, [r2, r1]
   11484:	ldr	r1, [r1]
   11488:	cmp	r1, #0
   1148c:	beq	11498 <__assert_fail@plt+0x90c>
   11490:	blx	r1
   11494:	bl	1145c <__assert_fail@plt+0x8d0>
   11498:	mov	r3, r0
   1149c:	ldr	ip, [pc, #40]	; 114cc <__assert_fail@plt+0x940>
   114a0:	ldr	r0, [pc, #40]	; 114d0 <__assert_fail@plt+0x944>
   114a4:	ldr	r1, [pc, #40]	; 114d4 <__assert_fail@plt+0x948>
   114a8:	ldr	ip, [r2, ip]
   114ac:	ldr	r0, [r2, r0]
   114b0:	add	r1, pc, r1
   114b4:	ldr	r2, [ip]
   114b8:	ldr	r0, [r0]
   114bc:	bl	10b08 <fprintf@plt>
   114c0:	b	11494 <__assert_fail@plt+0x908>
   114c4:	andeq	r6, r1, ip, ror fp
   114c8:	andeq	r0, r0, ip, lsr #1
   114cc:	andeq	r0, r0, r0, asr #1
   114d0:	strheq	r0, [r0], -r8
   114d4:	andeq	r2, r0, r8, lsl r5

000114d8 <error@@Base>:
   114d8:	str	r4, [sp, #-8]!
   114dc:	mov	r3, r0
   114e0:	ldr	r4, [pc, #56]	; 11520 <error@@Base+0x48>
   114e4:	str	lr, [sp, #4]
   114e8:	ldr	r0, [pc, #52]	; 11524 <error@@Base+0x4c>
   114ec:	ldr	r2, [pc, #52]	; 11528 <error@@Base+0x50>
   114f0:	add	r4, pc, r4
   114f4:	ldr	r1, [pc, #48]	; 1152c <error@@Base+0x54>
   114f8:	ldr	ip, [r4, r0]
   114fc:	ldr	r0, [r4, r2]
   11500:	add	r1, pc, r1
   11504:	ldr	r2, [ip]
   11508:	ldr	r0, [r0]
   1150c:	bl	10b08 <fprintf@plt>
   11510:	ldr	r3, [pc, #24]	; 11530 <error@@Base+0x58>
   11514:	ldr	r3, [r4, r3]
   11518:	ldr	r0, [r3]
   1151c:	bl	11258 <__assert_fail@plt+0x6cc>
   11520:	andeq	r6, r1, r8, lsl #22
   11524:	andeq	r0, r0, r0, asr #1
   11528:	strheq	r0, [r0], -r8
   1152c:	ldrdeq	r2, [r0], -r8
   11530:	ldrdeq	r0, [r0], -ip
   11534:	str	r4, [sp, #-8]!
   11538:	str	lr, [sp, #4]
   1153c:	bl	109dc <calloc@plt>
   11540:	cmp	r0, #0
   11544:	beq	11554 <error@@Base+0x7c>
   11548:	ldr	r4, [sp]
   1154c:	add	sp, sp, #4
   11550:	pop	{pc}		; (ldr pc, [sp], #4)
   11554:	ldr	r0, [pc, #4]	; 11560 <error@@Base+0x88>
   11558:	add	r0, pc, r0
   1155c:	bl	114d8 <error@@Base>
   11560:	andeq	r2, r0, r8, lsl #9
   11564:	ldr	r3, [pc, #40]	; 11594 <error@@Base+0xbc>
   11568:	add	r3, pc, r3
   1156c:	ldrb	r2, [r3, #2]
   11570:	cmp	r2, #0
   11574:	bxne	lr
   11578:	ldr	r0, [pc, #24]	; 11598 <error@@Base+0xc0>
   1157c:	mov	r2, #1
   11580:	str	r4, [sp, #-8]!
   11584:	str	lr, [sp, #4]
   11588:	strb	r2, [r3, #2]
   1158c:	add	r0, pc, r0
   11590:	bl	114d8 <error@@Base>
   11594:	muleq	r1, r4, fp
   11598:	andeq	r2, r0, r0, ror r4
   1159c:	ldr	r4, [pc, #68]	; 115e8 <error@@Base+0x110>
   115a0:	mov	r3, r0
   115a4:	push	{lr}		; (str lr, [sp, #-4]!)
   115a8:	sub	sp, sp, #12
   115ac:	ldr	r0, [pc, #56]	; 115ec <error@@Base+0x114>
   115b0:	ldr	r2, [pc, #56]	; 115f0 <error@@Base+0x118>
   115b4:	add	r4, pc, r4
   115b8:	ldr	ip, [r4, r0]
   115bc:	ldr	r0, [r4, r2]
   115c0:	str	r1, [sp]
   115c4:	ldr	r1, [pc, #40]	; 115f4 <error@@Base+0x11c>
   115c8:	ldr	r2, [ip]
   115cc:	ldr	r0, [r0]
   115d0:	add	r1, pc, r1
   115d4:	bl	10b08 <fprintf@plt>
   115d8:	ldr	r3, [pc, #24]	; 115f8 <error@@Base+0x120>
   115dc:	ldr	r3, [r4, r3]
   115e0:	ldr	r0, [r3]
   115e4:	bl	11258 <__assert_fail@plt+0x6cc>
   115e8:	andeq	r6, r1, r4, asr #20
   115ec:	andeq	r0, r0, r0, asr #1
   115f0:	strheq	r0, [r0], -r8
   115f4:	andeq	r2, r0, ip, lsr r4
   115f8:	ldrdeq	r0, [r0], -ip
   115fc:	ldr	ip, [pc, #164]	; 116a8 <error@@Base+0x1d0>
   11600:	subs	r2, r0, #0
   11604:	strd	r4, [sp, #-16]!
   11608:	mov	r4, r1
   1160c:	str	r6, [sp, #8]
   11610:	str	lr, [sp, #12]
   11614:	add	ip, pc, ip
   11618:	beq	11658 <error@@Base+0x180>
   1161c:	mov	r5, r2
   11620:	bl	10a0c <fopen@plt>
   11624:	cmp	r0, #0
   11628:	beq	1163c <error@@Base+0x164>
   1162c:	ldrd	r4, [sp]
   11630:	ldr	r6, [sp, #8]
   11634:	add	sp, sp, #12
   11638:	pop	{pc}		; (ldr pc, [sp], #4)
   1163c:	ldrb	r3, [r4]
   11640:	mov	r1, r5
   11644:	cmp	r3, #119	; 0x77
   11648:	beq	11680 <error@@Base+0x1a8>
   1164c:	ldr	r0, [pc, #88]	; 116ac <error@@Base+0x1d4>
   11650:	add	r0, pc, r0
   11654:	bl	1159c <error@@Base+0xc4>
   11658:	ldrb	r3, [r1]
   1165c:	cmp	r3, #114	; 0x72
   11660:	beq	1168c <error@@Base+0x1b4>
   11664:	ldr	r3, [pc, #68]	; 116b0 <error@@Base+0x1d8>
   11668:	ldrd	r4, [sp]
   1166c:	ldr	r6, [sp, #8]
   11670:	add	sp, sp, #12
   11674:	ldr	r3, [ip, r3]
   11678:	ldr	r0, [r3]
   1167c:	pop	{pc}		; (ldr pc, [sp], #4)
   11680:	ldr	r0, [pc, #44]	; 116b4 <error@@Base+0x1dc>
   11684:	add	r0, pc, r0
   11688:	bl	1159c <error@@Base+0xc4>
   1168c:	ldr	r3, [pc, #36]	; 116b8 <error@@Base+0x1e0>
   11690:	ldrd	r4, [sp]
   11694:	ldr	r6, [sp, #8]
   11698:	add	sp, sp, #12
   1169c:	ldr	r3, [ip, r3]
   116a0:	ldr	r0, [r3]
   116a4:	pop	{pc}		; (ldr pc, [sp], #4)
   116a8:	andeq	r6, r1, r4, ror #19
   116ac:	andeq	r2, r0, r4, ror #7
   116b0:	ldrdeq	r0, [r0], -r4
   116b4:	muleq	r0, r8, r3
   116b8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   116bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   116c0:	strd	r6, [sp, #8]
   116c4:	mov	r6, r0
   116c8:	strd	r8, [sp, #16]
   116cc:	mov	r9, r1
   116d0:	mov	r8, r3
   116d4:	strd	sl, [sp, #24]
   116d8:	str	lr, [sp, #32]
   116dc:	sub	sp, sp, #20
   116e0:	ldr	r5, [pc, #600]	; 11940 <error@@Base+0x468>
   116e4:	str	r0, [sp]
   116e8:	ldr	r0, [r1]
   116ec:	str	r2, [sp, #12]
   116f0:	bl	113e8 <__assert_fail@plt+0x85c>
   116f4:	ldr	r3, [pc, #584]	; 11944 <error@@Base+0x46c>
   116f8:	add	r5, pc, r5
   116fc:	ldr	r4, [pc, #580]	; 11948 <error@@Base+0x470>
   11700:	ldr	r3, [r5, r3]
   11704:	add	r4, pc, r4
   11708:	mov	r1, r4
   1170c:	str	r0, [r3]
   11710:	mov	r0, #2
   11714:	bl	10ac0 <__sysv_signal@plt>
   11718:	mov	r1, r4
   1171c:	mov	r0, #15
   11720:	bl	10ac0 <__sysv_signal@plt>
   11724:	ldr	sl, [r6]
   11728:	cmp	sl, #1
   1172c:	beq	11904 <error@@Base+0x42c>
   11730:	movle	r6, #0
   11734:	ble	1188c <error@@Base+0x3b4>
   11738:	ldr	r3, [pc, #524]	; 1194c <error@@Base+0x474>
   1173c:	mov	r7, #1
   11740:	mov	r6, #0
   11744:	mov	r4, r7
   11748:	add	r3, pc, r3
   1174c:	str	r3, [sp, #8]
   11750:	mov	r3, sl
   11754:	mov	sl, r9
   11758:	b	1177c <error@@Base+0x2a4>
   1175c:	add	r4, r4, #1
   11760:	add	r2, r6, #1
   11764:	str	r5, [sl, r6, lsl #2]
   11768:	sxth	r4, r4
   1176c:	sxth	r6, r2
   11770:	cmp	r4, r3
   11774:	mov	r7, r4
   11778:	bge	1188c <error@@Base+0x3b4>
   1177c:	ldr	r5, [sl, r4, lsl #2]
   11780:	lsl	r9, r4, #2
   11784:	ldrb	r2, [r5]
   11788:	cmp	r2, #45	; 0x2d
   1178c:	bne	1175c <error@@Base+0x284>
   11790:	ldrb	fp, [r5, #1]
   11794:	cmp	fp, #0
   11798:	beq	1175c <error@@Base+0x284>
   1179c:	mov	r0, r5
   117a0:	str	r3, [sp, #4]
   117a4:	bl	10afc <strlen@plt>
   117a8:	mov	r2, r0
   117ac:	mov	r1, r5
   117b0:	ldr	r0, [sp, #8]
   117b4:	bl	10b68 <strncmp@plt>
   117b8:	cmp	r0, #0
   117bc:	beq	11918 <error@@Base+0x440>
   117c0:	ldr	r3, [sp, #4]
   117c4:	add	r7, r7, #1
   117c8:	cmp	r7, r3
   117cc:	addlt	r9, sl, r9
   117d0:	movge	r0, #0
   117d4:	ldrlt	r0, [r9, #4]
   117d8:	cmp	r8, #0
   117dc:	beq	11820 <error@@Base+0x348>
   117e0:	ldrb	r2, [r8]
   117e4:	cmp	r2, #0
   117e8:	beq	11820 <error@@Base+0x348>
   117ec:	cmp	fp, r2
   117f0:	beq	11830 <error@@Base+0x358>
   117f4:	mov	r2, #0
   117f8:	b	11804 <error@@Base+0x32c>
   117fc:	cmp	fp, ip
   11800:	beq	11834 <error@@Base+0x35c>
   11804:	add	r2, r2, #1
   11808:	sxth	r2, r2
   1180c:	add	r1, r2, r2, lsl #1
   11810:	ldrb	ip, [r8, r1, lsl #2]
   11814:	add	r1, r8, r1, lsl #2
   11818:	cmp	ip, #0
   1181c:	bne	117fc <error@@Base+0x324>
   11820:	ldr	r0, [pc, #296]	; 11950 <error@@Base+0x478>
   11824:	mov	r1, r5
   11828:	add	r0, pc, r0
   1182c:	bl	1159c <error@@Base+0xc4>
   11830:	mov	r1, r8
   11834:	ldr	r2, [r1, #4]
   11838:	cmp	r2, #0
   1183c:	beq	118c4 <error@@Base+0x3ec>
   11840:	ldrb	ip, [r5, #2]
   11844:	cmp	ip, #0
   11848:	bne	118b0 <error@@Base+0x3d8>
   1184c:	cmp	r0, #0
   11850:	beq	11920 <error@@Base+0x448>
   11854:	ldr	r1, [r2]
   11858:	cmp	r1, #0
   1185c:	bne	11930 <error@@Base+0x458>
   11860:	str	r0, [r2]
   11864:	uxth	r2, r4
   11868:	ldrb	r1, [r5, #2]
   1186c:	add	r4, r2, #1
   11870:	sxth	r4, r4
   11874:	cmp	r1, #0
   11878:	addeq	r4, r2, #2
   1187c:	sxtheq	r4, r4
   11880:	cmp	r4, r3
   11884:	mov	r7, r4
   11888:	blt	1177c <error@@Base+0x2a4>
   1188c:	ldr	r3, [sp]
   11890:	str	r6, [r3]
   11894:	add	sp, sp, #20
   11898:	ldrd	r4, [sp]
   1189c:	ldrd	r6, [sp, #8]
   118a0:	ldrd	r8, [sp, #16]
   118a4:	ldrd	sl, [sp, #24]
   118a8:	add	sp, sp, #32
   118ac:	pop	{pc}		; (ldr pc, [sp], #4)
   118b0:	ldr	r1, [r2]
   118b4:	cmp	r1, #0
   118b8:	bne	11930 <error@@Base+0x458>
   118bc:	add	r0, r5, #2
   118c0:	b	11860 <error@@Base+0x388>
   118c4:	ldr	r3, [r1, #8]
   118c8:	cmp	r3, #0
   118cc:	beq	11820 <error@@Base+0x348>
   118d0:	ldrb	r2, [r5, #2]
   118d4:	cmp	r2, #0
   118d8:	bne	11820 <error@@Base+0x348>
   118dc:	ldrb	r2, [r3]
   118e0:	cmp	r2, #0
   118e4:	bne	11930 <error@@Base+0x458>
   118e8:	mov	r2, #1
   118ec:	add	r4, r4, #1
   118f0:	sxth	r4, r4
   118f4:	strb	r2, [r3]
   118f8:	ldr	r3, [sp]
   118fc:	ldr	r3, [r3]
   11900:	b	11770 <error@@Base+0x298>
   11904:	ldr	r3, [pc, #72]	; 11954 <error@@Base+0x47c>
   11908:	ldr	r3, [r5, r3]
   1190c:	ldrb	r6, [r3]
   11910:	cmp	r6, #0
   11914:	beq	1188c <error@@Base+0x3b4>
   11918:	ldr	r0, [sp, #12]
   1191c:	bl	1146c <__assert_fail@plt+0x8e0>
   11920:	ldr	r3, [r1, #8]
   11924:	cmp	r3, #0
   11928:	bne	118dc <error@@Base+0x404>
   1192c:	b	11820 <error@@Base+0x348>
   11930:	ldr	r0, [pc, #32]	; 11958 <error@@Base+0x480>
   11934:	mov	r1, r5
   11938:	add	r0, pc, r0
   1193c:	bl	1159c <error@@Base+0xc4>
   11940:	andeq	r6, r1, r0, lsl #18
   11944:	andeq	r0, r0, r0, asr #1
   11948:			; <UNDEFINED> instruction: 0xfffffe58
   1194c:	andeq	r2, r0, r0, lsl #6
   11950:	andeq	r2, r0, r8, lsr #4
   11954:	andeq	r0, r0, r8, lsr #1
   11958:	andeq	r2, r0, r8, lsr #2
   1195c:	ldr	r2, [pc, #60]	; 119a0 <error@@Base+0x4c8>
   11960:	mov	r3, r0
   11964:	push	{lr}		; (str lr, [sp, #-4]!)
   11968:	sub	sp, sp, #12
   1196c:	ldr	ip, [pc, #48]	; 119a4 <error@@Base+0x4cc>
   11970:	ldr	r0, [pc, #48]	; 119a8 <error@@Base+0x4d0>
   11974:	add	r2, pc, r2
   11978:	ldr	ip, [r2, ip]
   1197c:	ldr	r0, [r2, r0]
   11980:	str	r1, [sp]
   11984:	ldr	r1, [pc, #32]	; 119ac <error@@Base+0x4d4>
   11988:	ldr	r2, [ip]
   1198c:	ldr	r0, [r0]
   11990:	add	r1, pc, r1
   11994:	bl	10b08 <fprintf@plt>
   11998:	add	sp, sp, #12
   1199c:	pop	{pc}		; (ldr pc, [sp], #4)
   119a0:	andeq	r6, r1, r4, lsl #13
   119a4:	andeq	r0, r0, r0, asr #1
   119a8:	strheq	r0, [r0], -r8
   119ac:	andeq	r2, r0, ip, ror r0
   119b0:	strd	r4, [sp, #-16]!
   119b4:	mov	r2, r0
   119b8:	mov	r5, r1
   119bc:	ldr	r4, [pc, #76]	; 11a10 <error@@Base+0x538>
   119c0:	mov	r1, #99	; 0x63
   119c4:	str	r6, [sp, #8]
   119c8:	str	lr, [sp, #12]
   119cc:	add	r4, pc, r4
   119d0:	mov	r0, r4
   119d4:	bl	10a30 <fgets@plt>
   119d8:	cmp	r0, #0
   119dc:	beq	11a00 <error@@Base+0x528>
   119e0:	ldr	r1, [pc, #44]	; 11a14 <error@@Base+0x53c>
   119e4:	mov	r2, r5
   119e8:	mov	r0, r4
   119ec:	add	r1, pc, r1
   119f0:	bl	10b14 <__isoc99_sscanf@plt>
   119f4:	sub	r0, r0, #1
   119f8:	clz	r0, r0
   119fc:	lsr	r0, r0, #5
   11a00:	ldrd	r4, [sp]
   11a04:	ldr	r6, [sp, #8]
   11a08:	add	sp, sp, #12
   11a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a10:	andeq	r6, r1, r4, lsr r7
   11a14:	andeq	r2, r0, ip, lsl #1
   11a18:	strd	r4, [sp, #-16]!
   11a1c:	mov	r5, r1
   11a20:	mov	r1, #99	; 0x63
   11a24:	ldr	r4, [pc, #84]	; 11a80 <error@@Base+0x5a8>
   11a28:	str	r6, [sp, #8]
   11a2c:	mov	r6, r2
   11a30:	mov	r2, r0
   11a34:	str	lr, [sp, #12]
   11a38:	add	r4, pc, r4
   11a3c:	mov	r0, r4
   11a40:	bl	10a30 <fgets@plt>
   11a44:	cmp	r0, #0
   11a48:	beq	11a70 <error@@Base+0x598>
   11a4c:	ldr	r1, [pc, #48]	; 11a84 <error@@Base+0x5ac>
   11a50:	mov	r3, r6
   11a54:	mov	r2, r5
   11a58:	mov	r0, r4
   11a5c:	add	r1, pc, r1
   11a60:	bl	10b14 <__isoc99_sscanf@plt>
   11a64:	sub	r0, r0, #2
   11a68:	clz	r0, r0
   11a6c:	lsr	r0, r0, #5
   11a70:	ldrd	r4, [sp]
   11a74:	ldr	r6, [sp, #8]
   11a78:	add	sp, sp, #12
   11a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a80:	andeq	r6, r1, r8, asr #13
   11a84:	andeq	r2, r0, r8, lsl r0
   11a88:	ldr	r0, [r0, #8]
   11a8c:	ldr	r1, [r1, #8]
   11a90:	b	112e0 <__assert_fail@plt+0x754>
   11a94:	subs	ip, r1, #0
   11a98:	mov	r3, r0
   11a9c:	bne	11ab4 <error@@Base+0x5dc>
   11aa0:	ldr	r0, [pc, #72]	; 11af0 <error@@Base+0x618>
   11aa4:	mov	r2, #8
   11aa8:	mov	r1, #1
   11aac:	add	r0, pc, r0
   11ab0:	b	10a84 <fwrite@plt>
   11ab4:	ldr	r3, [r2]
   11ab8:	vmov	s15, ip
   11abc:	vldr	d5, [pc, #36]	; 11ae8 <error@@Base+0x610>
   11ac0:	ldr	r1, [pc, #44]	; 11af4 <error@@Base+0x61c>
   11ac4:	sub	r3, ip, r3
   11ac8:	vmov	s14, r3
   11acc:	add	r1, pc, r1
   11ad0:	vcvt.f64.s32	d6, s15
   11ad4:	vcvt.f64.s32	d7, s14
   11ad8:	vmul.f64	d7, d7, d5
   11adc:	vdiv.f64	d7, d7, d6
   11ae0:	vmov	r2, r3, d7
   11ae4:	b	10b08 <fprintf@plt>
   11ae8:	andeq	r0, r0, r0
   11aec:	subsmi	r0, r9, r0
   11af0:	ldrdeq	r1, [r0], -r0
   11af4:			; <UNDEFINED> instruction: 0x00001fbc
   11af8:	strd	r4, [sp, #-16]!
   11afc:	subs	r4, r1, #0
   11b00:	mov	r5, r0
   11b04:	str	r6, [sp, #8]
   11b08:	str	lr, [sp, #12]
   11b0c:	beq	11b58 <error@@Base+0x680>
   11b10:	ldr	r1, [pc, #92]	; 11b74 <error@@Base+0x69c>
   11b14:	ldrd	r2, [r4]
   11b18:	add	r1, pc, r1
   11b1c:	bl	10b08 <fprintf@plt>
   11b20:	mov	r2, r4
   11b24:	mov	r0, r5
   11b28:	ldr	r1, [r2], #4
   11b2c:	bl	11a94 <error@@Base+0x5bc>
   11b30:	ldr	r0, [pc, #64]	; 11b78 <error@@Base+0x6a0>
   11b34:	mov	r3, r5
   11b38:	mov	r2, #3
   11b3c:	mov	r1, #1
   11b40:	ldrd	r4, [sp]
   11b44:	ldr	r6, [sp, #8]
   11b48:	add	r0, pc, r0
   11b4c:	ldr	lr, [sp, #12]
   11b50:	add	sp, sp, #16
   11b54:	b	10a84 <fwrite@plt>
   11b58:	mov	r3, r0
   11b5c:	ldr	r0, [pc, #24]	; 11b7c <error@@Base+0x6a4>
   11b60:	mov	r2, #26
   11b64:	mov	r1, #1
   11b68:	add	r0, pc, r0
   11b6c:	bl	10a84 <fwrite@plt>
   11b70:	b	11b30 <error@@Base+0x658>
   11b74:	andeq	r1, r0, r8, ror pc
   11b78:	andeq	r1, r0, r0, ror pc
   11b7c:	andeq	r1, r0, r4, lsr pc
   11b80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b84:	mov	r5, r1
   11b88:	ldr	r1, [pc, #340]	; 11ce4 <error@@Base+0x80c>
   11b8c:	strd	r6, [sp, #8]
   11b90:	mov	r6, r0
   11b94:	strd	r8, [sp, #16]
   11b98:	mov	r9, r2
   11b9c:	mov	r2, r3
   11ba0:	strd	sl, [sp, #24]
   11ba4:	str	lr, [sp, #32]
   11ba8:	sub	sp, sp, #4
   11bac:	ldrb	r8, [sp, #40]	; 0x28
   11bb0:	add	r1, pc, r1
   11bb4:	ldrb	sl, [sp, #44]	; 0x2c
   11bb8:	bl	10b08 <fprintf@plt>
   11bbc:	mov	r0, r6
   11bc0:	mov	r1, #0
   11bc4:	bl	11af8 <error@@Base+0x620>
   11bc8:	cmp	r8, #0
   11bcc:	bne	11c74 <error@@Base+0x79c>
   11bd0:	ldr	r2, [pc, #272]	; 11ce8 <error@@Base+0x810>
   11bd4:	add	r2, pc, r2
   11bd8:	ldr	r1, [pc, #268]	; 11cec <error@@Base+0x814>
   11bdc:	sub	fp, r9, #1
   11be0:	mov	r0, r6
   11be4:	uxth	fp, fp
   11be8:	mov	r4, #1
   11bec:	ldr	r7, [pc, #252]	; 11cf0 <error@@Base+0x818>
   11bf0:	add	fp, fp, #2
   11bf4:	add	r1, pc, r1
   11bf8:	bl	10b08 <fprintf@plt>
   11bfc:	add	r7, pc, r7
   11c00:	ldr	r3, [r5, r4, lsl #3]
   11c04:	mov	r0, r6
   11c08:	add	r1, r5, r4, lsl #3
   11c0c:	cmp	r3, #0
   11c10:	ble	11c28 <error@@Base+0x750>
   11c14:	bl	11af8 <error@@Base+0x620>
   11c18:	mov	r2, r4
   11c1c:	mov	r1, r7
   11c20:	mov	r0, r6
   11c24:	bl	10b08 <fprintf@plt>
   11c28:	add	r4, r4, #1
   11c2c:	cmp	fp, r4
   11c30:	bne	11c00 <error@@Base+0x728>
   11c34:	cmp	r8, #0
   11c38:	beq	11c50 <error@@Base+0x778>
   11c3c:	add	r1, r9, #1
   11c40:	ldr	r3, [r5, r1, lsl #3]
   11c44:	add	r1, r5, r1, lsl #3
   11c48:	cmp	r3, #0
   11c4c:	bgt	11c80 <error@@Base+0x7a8>
   11c50:	cmp	sl, #0
   11c54:	bne	11ca4 <error@@Base+0x7cc>
   11c58:	add	sp, sp, #4
   11c5c:	ldrd	r4, [sp]
   11c60:	ldrd	r6, [sp, #8]
   11c64:	ldrd	r8, [sp, #16]
   11c68:	ldrd	sl, [sp, #24]
   11c6c:	add	sp, sp, #32
   11c70:	pop	{pc}		; (ldr pc, [sp], #4)
   11c74:	ldr	r2, [pc, #120]	; 11cf4 <error@@Base+0x81c>
   11c78:	add	r2, pc, r2
   11c7c:	b	11bd8 <error@@Base+0x700>
   11c80:	mov	r0, r6
   11c84:	bl	11af8 <error@@Base+0x620>
   11c88:	ldr	r1, [pc, #104]	; 11cf8 <error@@Base+0x820>
   11c8c:	mov	r2, r9
   11c90:	mov	r0, r6
   11c94:	add	r1, pc, r1
   11c98:	bl	10b08 <fprintf@plt>
   11c9c:	cmp	sl, #0
   11ca0:	beq	11c58 <error@@Base+0x780>
   11ca4:	mov	r1, r5
   11ca8:	mov	r0, r6
   11cac:	bl	11af8 <error@@Base+0x620>
   11cb0:	ldr	r0, [pc, #68]	; 11cfc <error@@Base+0x824>
   11cb4:	mov	r3, r6
   11cb8:	mov	r2, #7
   11cbc:	mov	r1, #1
   11cc0:	add	r0, pc, r0
   11cc4:	add	sp, sp, #4
   11cc8:	ldrd	r4, [sp]
   11ccc:	ldrd	r6, [sp, #8]
   11cd0:	ldrd	r8, [sp, #16]
   11cd4:	ldrd	sl, [sp, #24]
   11cd8:	ldr	lr, [sp, #32]
   11cdc:	add	sp, sp, #36	; 0x24
   11ce0:	b	10a84 <fwrite@plt>
   11ce4:	andeq	r1, r0, ip, lsl pc
   11ce8:	strdeq	r1, [r0], -r0
   11cec:	andeq	r1, r0, r8, ror #27
   11cf0:	ldrdeq	r1, [r0], -r8
   11cf4:	andeq	r1, r0, r4, asr #28
   11cf8:	andeq	r1, r0, ip, asr #28
   11cfc:	andeq	r1, r0, ip, lsr #28
   11d00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11d04:	add	r5, r1, #4096	; 0x1000
   11d08:	mov	r4, r2
   11d0c:	strd	r6, [sp, #8]
   11d10:	mov	r6, r0
   11d14:	mov	r0, r1
   11d18:	str	r8, [sp, #16]
   11d1c:	str	lr, [sp, #20]
   11d20:	bl	110d8 <__assert_fail@plt+0x54c>
   11d24:	ldr	r2, [pc, #160]	; 11dcc <error@@Base+0x8f4>
   11d28:	ldr	r1, [r5, #3952]	; 0xf70
   11d2c:	ldr	r0, [r5, #3956]	; 0xf74
   11d30:	add	r2, pc, r2
   11d34:	bl	138d8 <error@@Base+0x2400>
   11d38:	ldr	r1, [pc, #144]	; 11dd0 <error@@Base+0x8f8>
   11d3c:	mov	r2, r4
   11d40:	mov	r0, r6
   11d44:	add	r1, pc, r1
   11d48:	bl	10b08 <fprintf@plt>
   11d4c:	mov	r0, r6
   11d50:	mov	r1, #0
   11d54:	bl	11af8 <error@@Base+0x620>
   11d58:	mov	r1, r6
   11d5c:	mov	r0, #10
   11d60:	bl	10b38 <fputc@plt>
   11d64:	ldr	r3, [r5, #3956]	; 0xf74
   11d68:	cmp	r3, #0
   11d6c:	ble	11db8 <error@@Base+0x8e0>
   11d70:	ldr	r7, [pc, #92]	; 11dd4 <error@@Base+0x8fc>
   11d74:	mov	r4, #0
   11d78:	add	r7, pc, r7
   11d7c:	ldr	r3, [r5, #3952]	; 0xf70
   11d80:	mov	r0, r6
   11d84:	ldr	r1, [r3, r4, lsl #2]
   11d88:	add	r1, r1, #12
   11d8c:	bl	11af8 <error@@Base+0x620>
   11d90:	ldr	r3, [r5, #3952]	; 0xf70
   11d94:	mov	r1, r7
   11d98:	mov	r0, r6
   11d9c:	ldr	r3, [r3, r4, lsl #2]
   11da0:	add	r4, r4, #1
   11da4:	ldr	r2, [r3, #8]
   11da8:	bl	10b08 <fprintf@plt>
   11dac:	ldr	r3, [r5, #3956]	; 0xf74
   11db0:	cmp	r3, r4
   11db4:	bgt	11d7c <error@@Base+0x8a4>
   11db8:	ldrd	r4, [sp]
   11dbc:	ldrd	r6, [sp, #8]
   11dc0:	ldr	r8, [sp, #16]
   11dc4:	add	sp, sp, #20
   11dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dcc:			; <UNDEFINED> instruction: 0xfffffd50
   11dd0:	andeq	r1, r0, r8, lsl #27
   11dd4:	andeq	r1, r0, r4, ror #24
   11dd8:	ldr	ip, [r0]
   11ddc:	ldr	r3, [r0, #4]
   11de0:	add	r1, ip, r1
   11de4:	add	r2, r3, r2
   11de8:	stm	r0, {r1, r2}
   11dec:	bx	lr
   11df0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11df4:	mov	r2, r0
   11df8:	mov	r5, r0
   11dfc:	ldr	r4, [pc, #244]	; 11ef8 <error@@Base+0xa20>
   11e00:	strd	r6, [sp, #8]
   11e04:	mov	r6, r1
   11e08:	mov	r1, #99	; 0x63
   11e0c:	strd	r8, [sp, #16]
   11e10:	str	sl, [sp, #24]
   11e14:	str	lr, [sp, #28]
   11e18:	sub	sp, sp, #8
   11e1c:	add	r4, pc, r4
   11e20:	mov	r0, r4
   11e24:	bl	10a30 <fgets@plt>
   11e28:	cmp	r0, #0
   11e2c:	beq	11ed4 <error@@Base+0x9fc>
   11e30:	mov	r0, r4
   11e34:	mov	r2, r5
   11e38:	mov	r1, #99	; 0x63
   11e3c:	bl	10a30 <fgets@plt>
   11e40:	cmp	r0, #0
   11e44:	beq	11ed4 <error@@Base+0x9fc>
   11e48:	ldr	r4, [pc, #172]	; 11efc <error@@Base+0xa24>
   11e4c:	mov	sl, #0
   11e50:	add	r8, sp, #4
   11e54:	mov	r7, sp
   11e58:	ldr	r9, [pc, #160]	; 11f00 <error@@Base+0xa28>
   11e5c:	add	r4, pc, r4
   11e60:	add	r4, r4, #29
   11e64:	add	r9, pc, r9
   11e68:	b	11e80 <error@@Base+0x9a8>
   11e6c:	ldr	r1, [sp]
   11e70:	add	r3, r6, r3, lsl #3
   11e74:	mov	r0, r3
   11e78:	ldr	r2, [sp, #4]
   11e7c:	bl	11dd8 <error@@Base+0x900>
   11e80:	mov	r2, r8
   11e84:	mov	r1, r7
   11e88:	mov	r0, r5
   11e8c:	bl	11a18 <error@@Base+0x540>
   11e90:	mov	r1, #0
   11e94:	mov	r2, #10
   11e98:	cmp	r0, r1
   11e9c:	mov	r0, r4
   11ea0:	beq	11ed8 <error@@Base+0xa00>
   11ea4:	bl	109f4 <strtol@plt>
   11ea8:	subs	r3, r0, #0
   11eac:	mov	r1, r9
   11eb0:	mov	r0, r4
   11eb4:	bne	11e6c <error@@Base+0x994>
   11eb8:	bl	109e8 <strcmp@plt>
   11ebc:	ldr	r1, [sp]
   11ec0:	cmp	r0, #0
   11ec4:	mov	r3, r6
   11ec8:	addne	r3, r6, #88	; 0x58
   11ecc:	moveq	sl, r1
   11ed0:	b	11e74 <error@@Base+0x99c>
   11ed4:	mov	sl, #0
   11ed8:	mov	r0, sl
   11edc:	add	sp, sp, #8
   11ee0:	ldrd	r4, [sp]
   11ee4:	ldrd	r6, [sp, #8]
   11ee8:	ldrd	r8, [sp, #16]
   11eec:	ldr	sl, [sp, #24]
   11ef0:	add	sp, sp, #28
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	andeq	r6, r1, r4, ror #5
   11efc:	andeq	r6, r1, r4, lsr #5
   11f00:	andeq	r1, r0, r8, lsl #25
   11f04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f08:	mov	r5, r2
   11f0c:	strd	r6, [sp, #8]
   11f10:	mov	r6, r3
   11f14:	mov	r7, r0
   11f18:	str	r8, [sp, #16]
   11f1c:	mov	r8, r1
   11f20:	str	lr, [sp, #20]
   11f24:	bl	10f44 <__assert_fail@plt+0x3b8>
   11f28:	subs	r4, r0, #0
   11f2c:	beq	11f54 <error@@Base+0xa7c>
   11f30:	mov	r2, r6
   11f34:	mov	r1, r5
   11f38:	ldrd	r6, [sp, #8]
   11f3c:	add	r0, r4, #12
   11f40:	ldrd	r4, [sp]
   11f44:	ldr	r8, [sp, #16]
   11f48:	ldr	lr, [sp, #20]
   11f4c:	add	sp, sp, #24
   11f50:	b	11dd8 <error@@Base+0x900>
   11f54:	mov	r1, #20
   11f58:	mov	r0, #1
   11f5c:	bl	11534 <error@@Base+0x5c>
   11f60:	mov	r4, r0
   11f64:	mov	r0, r8
   11f68:	bl	10a48 <strdup@plt>
   11f6c:	mov	r1, r4
   11f70:	str	r0, [r4, #8]
   11f74:	mov	r0, r7
   11f78:	bl	10fd0 <__assert_fail@plt+0x444>
   11f7c:	b	11f30 <error@@Base+0xa58>
   11f80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11f84:	mov	r2, r0
   11f88:	mov	r5, r0
   11f8c:	ldr	r4, [pc, #180]	; 12048 <error@@Base+0xb70>
   11f90:	strd	r6, [sp, #8]
   11f94:	mov	r6, r1
   11f98:	mov	r1, #99	; 0x63
   11f9c:	strd	r8, [sp, #16]
   11fa0:	str	sl, [sp, #24]
   11fa4:	str	lr, [sp, #28]
   11fa8:	sub	sp, sp, #8
   11fac:	add	r4, pc, r4
   11fb0:	mov	r0, r4
   11fb4:	bl	10a30 <fgets@plt>
   11fb8:	cmp	r0, #0
   11fbc:	beq	1202c <error@@Base+0xb54>
   11fc0:	mov	r0, r4
   11fc4:	mov	r2, r5
   11fc8:	mov	r1, #99	; 0x63
   11fcc:	bl	10a30 <fgets@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	1202c <error@@Base+0xb54>
   11fd8:	ldr	r4, [pc, #108]	; 1204c <error@@Base+0xb74>
   11fdc:	add	r8, sp, #4
   11fe0:	mov	r7, sp
   11fe4:	mov	sl, #0
   11fe8:	add	r4, pc, r4
   11fec:	add	r9, r4, #29
   11ff0:	b	12010 <error@@Base+0xb38>
   11ff4:	bl	10afc <strlen@plt>
   11ff8:	add	ip, r4, r0
   11ffc:	mov	r1, r9
   12000:	ldrd	r2, [sp]
   12004:	mov	r0, r6
   12008:	strb	sl, [ip, #-1]
   1200c:	bl	11f04 <error@@Base+0xa2c>
   12010:	mov	r2, r8
   12014:	mov	r1, r7
   12018:	mov	r0, r5
   1201c:	bl	11a18 <error@@Base+0x540>
   12020:	cmp	r0, #0
   12024:	mov	r0, r4
   12028:	bne	11ff4 <error@@Base+0xb1c>
   1202c:	add	sp, sp, #8
   12030:	ldrd	r4, [sp]
   12034:	ldrd	r6, [sp, #8]
   12038:	ldrd	r8, [sp, #16]
   1203c:	ldr	sl, [sp, #24]
   12040:	add	sp, sp, #28
   12044:	pop	{pc}		; (ldr pc, [sp], #4)
   12048:	andeq	r6, r1, r4, asr r1
   1204c:	andeq	r6, r1, r8, lsl r1
   12050:	strd	r4, [sp, #-20]!	; 0xffffffec
   12054:	strd	r6, [sp, #8]
   12058:	mov	r7, r1
   1205c:	mov	r6, r0
   12060:	mov	r0, r1
   12064:	ldr	r1, [pc, #404]	; 12200 <error@@Base+0xd28>
   12068:	str	lr, [sp, #16]
   1206c:	sub	sp, sp, #12
   12070:	ldr	r5, [pc, #396]	; 12204 <error@@Base+0xd2c>
   12074:	add	r1, pc, r1
   12078:	bl	115fc <error@@Base+0x124>
   1207c:	add	r5, pc, r5
   12080:	mov	r2, r0
   12084:	mov	r4, r0
   12088:	mov	r1, #99	; 0x63
   1208c:	mov	r0, r5
   12090:	bl	10a30 <fgets@plt>
   12094:	cmp	r0, #0
   12098:	beq	121dc <error@@Base+0xd04>
   1209c:	ldr	r1, [pc, #356]	; 12208 <error@@Base+0xd30>
   120a0:	mov	r2, #45	; 0x2d
   120a4:	mov	r0, r5
   120a8:	add	r1, pc, r1
   120ac:	bl	10b68 <strncmp@plt>
   120b0:	cmp	r0, #0
   120b4:	bne	121dc <error@@Base+0xd04>
   120b8:	mov	r2, r4
   120bc:	mov	r1, #99	; 0x63
   120c0:	mov	r0, r5
   120c4:	bl	10a30 <fgets@plt>
   120c8:	cmp	r0, #0
   120cc:	beq	121dc <error@@Base+0xd04>
   120d0:	ldr	r1, [pc, #308]	; 1220c <error@@Base+0xd34>
   120d4:	mov	r0, r5
   120d8:	add	r1, pc, r1
   120dc:	bl	109e8 <strcmp@plt>
   120e0:	cmp	r0, #0
   120e4:	bne	121dc <error@@Base+0xd04>
   120e8:	mov	r1, sp
   120ec:	mov	r0, r4
   120f0:	bl	119b0 <error@@Base+0x4d8>
   120f4:	cmp	r0, #0
   120f8:	beq	121dc <error@@Base+0xd04>
   120fc:	add	r1, sp, #4
   12100:	mov	r0, r4
   12104:	bl	119b0 <error@@Base+0x4d8>
   12108:	cmp	r0, #0
   1210c:	beq	121dc <error@@Base+0xd04>
   12110:	mov	r2, r4
   12114:	mov	r1, #99	; 0x63
   12118:	mov	r0, r5
   1211c:	bl	10a30 <fgets@plt>
   12120:	cmp	r0, #0
   12124:	beq	121dc <error@@Base+0xd04>
   12128:	mov	r0, r5
   1212c:	mov	r2, r4
   12130:	mov	r1, #99	; 0x63
   12134:	bl	10a30 <fgets@plt>
   12138:	cmp	r0, #0
   1213c:	beq	121dc <error@@Base+0xd04>
   12140:	mov	r0, r6
   12144:	ldm	sp, {r1, r2}
   12148:	bl	11dd8 <error@@Base+0x900>
   1214c:	add	r1, r6, #8
   12150:	mov	r0, r4
   12154:	bl	11df0 <error@@Base+0x918>
   12158:	mov	r7, r0
   1215c:	add	r1, r6, #416	; 0x1a0
   12160:	mov	r0, r4
   12164:	bl	11df0 <error@@Base+0x918>
   12168:	mov	r5, r0
   1216c:	add	r1, r6, #824	; 0x338
   12170:	mov	r0, r4
   12174:	bl	11df0 <error@@Base+0x918>
   12178:	ldr	r3, [sp]
   1217c:	cmp	r3, #0
   12180:	bgt	121a0 <error@@Base+0xcc8>
   12184:	mov	r0, r4
   12188:	bl	11338 <__assert_fail@plt+0x7ac>
   1218c:	add	sp, sp, #12
   12190:	ldrd	r4, [sp]
   12194:	ldrd	r6, [sp, #8]
   12198:	add	sp, sp, #16
   1219c:	pop	{pc}		; (ldr pc, [sp], #4)
   121a0:	add	r1, r6, #920	; 0x398
   121a4:	mov	r0, r4
   121a8:	bl	11df0 <error@@Base+0x918>
   121ac:	cmp	r7, #0
   121b0:	ble	121c0 <error@@Base+0xce8>
   121b4:	add	r1, r6, #992	; 0x3e0
   121b8:	mov	r0, r4
   121bc:	bl	11f80 <error@@Base+0xaa8>
   121c0:	cmp	r5, #0
   121c4:	ble	12184 <error@@Base+0xcac>
   121c8:	add	r1, r6, #9024	; 0x2340
   121cc:	mov	r0, r4
   121d0:	add	r1, r1, #24
   121d4:	bl	11f80 <error@@Base+0xaa8>
   121d8:	b	12184 <error@@Base+0xcac>
   121dc:	cmp	r7, #0
   121e0:	beq	121f4 <error@@Base+0xd1c>
   121e4:	ldr	r0, [pc, #36]	; 12210 <error@@Base+0xd38>
   121e8:	mov	r1, r7
   121ec:	add	r0, pc, r0
   121f0:	bl	1159c <error@@Base+0xc4>
   121f4:	ldr	r7, [pc, #24]	; 12214 <error@@Base+0xd3c>
   121f8:	add	r7, pc, r7
   121fc:	b	121e4 <error@@Base+0xd0c>
   12200:	andeq	r1, r0, r8, lsl #21
   12204:	andeq	r6, r1, r4, lsl #1
   12208:	andeq	r1, r0, r8, asr sl
   1220c:	ldrdeq	r4, [r0], -r8
   12210:	andeq	r1, r0, r4, asr #18
   12214:	strdeq	r1, [r0], -ip
   12218:	mov	r3, r1
   1221c:	ldr	r1, [pc, #404]	; 123b8 <error@@Base+0xee0>
   12220:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12224:	mov	r5, r0
   12228:	mov	r0, r3
   1222c:	strd	r6, [sp, #8]
   12230:	mov	r7, r5
   12234:	mov	r6, #1
   12238:	strd	r8, [sp, #16]
   1223c:	mov	r8, r5
   12240:	mov	r9, #0
   12244:	str	lr, [sp, #24]
   12248:	sub	sp, sp, #12
   1224c:	add	r1, pc, r1
   12250:	bl	115fc <error@@Base+0x124>
   12254:	ldr	r3, [pc, #352]	; 123bc <error@@Base+0xee4>
   12258:	mov	r4, r0
   1225c:	ldr	r2, [pc, #348]	; 123c0 <error@@Base+0xee8>
   12260:	ldr	r1, [pc, #348]	; 123c4 <error@@Base+0xeec>
   12264:	add	r3, pc, r3
   12268:	add	r2, pc, r2
   1226c:	add	r1, pc, r1
   12270:	bl	10b08 <fprintf@plt>
   12274:	ldr	r1, [pc, #332]	; 123c8 <error@@Base+0xef0>
   12278:	mov	r0, r4
   1227c:	ldr	r2, [r5]
   12280:	add	r1, pc, r1
   12284:	bl	10b08 <fprintf@plt>
   12288:	ldr	r1, [pc, #316]	; 123cc <error@@Base+0xef4>
   1228c:	mov	r0, r4
   12290:	ldr	r2, [r8, #4]!
   12294:	add	r1, pc, r1
   12298:	bl	10b08 <fprintf@plt>
   1229c:	mov	r2, r8
   122a0:	mov	r0, r4
   122a4:	ldr	r1, [r7], #8
   122a8:	bl	11a94 <error@@Base+0x5bc>
   122ac:	ldr	r8, [pc, #284]	; 123d0 <error@@Base+0xef8>
   122b0:	mov	r3, r4
   122b4:	mov	r2, #12
   122b8:	mov	r1, r6
   122bc:	ldr	r0, [pc, #272]	; 123d4 <error@@Base+0xefc>
   122c0:	add	r8, pc, r8
   122c4:	add	r0, pc, r0
   122c8:	bl	10a84 <fwrite@plt>
   122cc:	mov	r1, r7
   122d0:	mov	r0, r4
   122d4:	str	r9, [sp]
   122d8:	mov	r3, r8
   122dc:	mov	r2, #50	; 0x32
   122e0:	str	r6, [sp, #4]
   122e4:	bl	11b80 <error@@Base+0x6a8>
   122e8:	ldr	r3, [pc, #232]	; 123d8 <error@@Base+0xf00>
   122ec:	add	r1, r5, #416	; 0x1a0
   122f0:	mov	r0, r4
   122f4:	mov	r2, #50	; 0x32
   122f8:	str	r9, [sp]
   122fc:	str	r6, [sp, #4]
   12300:	add	r3, pc, r3
   12304:	bl	11b80 <error@@Base+0x6a8>
   12308:	ldr	r3, [pc, #204]	; 123dc <error@@Base+0xf04>
   1230c:	add	r1, r5, #824	; 0x338
   12310:	mov	r0, r4
   12314:	mov	r2, #10
   12318:	str	r6, [sp]
   1231c:	str	r6, [sp, #4]
   12320:	add	r3, pc, r3
   12324:	bl	11b80 <error@@Base+0x6a8>
   12328:	ldr	r3, [r5]
   1232c:	cmp	r3, r9
   12330:	bgt	12354 <error@@Base+0xe7c>
   12334:	mov	r0, r4
   12338:	add	sp, sp, #12
   1233c:	ldrd	r4, [sp]
   12340:	ldrd	r6, [sp, #8]
   12344:	ldrd	r8, [sp, #16]
   12348:	ldr	lr, [sp, #24]
   1234c:	add	sp, sp, #28
   12350:	b	11338 <__assert_fail@plt+0x7ac>
   12354:	ldr	r3, [pc, #132]	; 123e0 <error@@Base+0xf08>
   12358:	mov	r2, #8
   1235c:	add	r1, r5, #920	; 0x398
   12360:	mov	r0, r4
   12364:	str	r9, [sp]
   12368:	str	r9, [sp, #4]
   1236c:	add	r3, pc, r3
   12370:	bl	11b80 <error@@Base+0x6a8>
   12374:	ldr	r3, [r5, #8]
   12378:	cmp	r3, r9
   1237c:	ble	12390 <error@@Base+0xeb8>
   12380:	mov	r2, r8
   12384:	add	r1, r5, #992	; 0x3e0
   12388:	mov	r0, r4
   1238c:	bl	11d00 <error@@Base+0x828>
   12390:	ldr	r3, [r5, #416]	; 0x1a0
   12394:	cmp	r3, #0
   12398:	ble	12334 <error@@Base+0xe5c>
   1239c:	ldr	r2, [pc, #64]	; 123e4 <error@@Base+0xf0c>
   123a0:	add	r1, r5, #9024	; 0x2340
   123a4:	mov	r0, r4
   123a8:	add	r1, r1, #24
   123ac:	add	r2, pc, r2
   123b0:	bl	11d00 <error@@Base+0x828>
   123b4:	b	12334 <error@@Base+0xe5c>
   123b8:	strdeq	r1, [r0], -r8
   123bc:	andeq	r4, r0, ip, asr #26
   123c0:	muleq	r0, r8, r8
   123c4:	ldrdeq	r1, [r0], -ip
   123c8:	ldrdeq	r1, [r0], -r0
   123cc:	andeq	r1, r0, ip, asr #17
   123d0:	andeq	r1, r0, r8, asr #17
   123d4:			; <UNDEFINED> instruction: 0x000018b4
   123d8:	muleq	r0, r4, r8
   123dc:	andeq	r1, r0, r4, lsl #17
   123e0:	andeq	r1, r0, r0, asr r8
   123e4:	andeq	r1, r0, r8, ror #15
   123e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   123ec:	ldr	r5, [pc, #264]	; 124fc <error@@Base+0x1024>
   123f0:	strd	r6, [sp, #8]
   123f4:	ldr	r4, [pc, #260]	; 12500 <error@@Base+0x1028>
   123f8:	str	lr, [sp, #16]
   123fc:	ldr	r7, [pc, #256]	; 12504 <error@@Base+0x102c>
   12400:	add	r5, pc, r5
   12404:	ldr	r6, [pc, #252]	; 12508 <error@@Base+0x1030>
   12408:	add	r4, pc, r4
   1240c:	add	r7, pc, r7
   12410:	add	r6, pc, r6
   12414:	ldr	r0, [r0, #4]
   12418:	cmp	r0, #0
   1241c:	beq	124cc <error@@Base+0xff4>
   12420:	movw	ip, #1092	; 0x444
   12424:	movw	r2, #8294	; 0x2066
   12428:	ldr	lr, [r0, #12]
   1242c:	mov	r3, ip
   12430:	mov	r1, #0
   12434:	b	12440 <error@@Base+0xf68>
   12438:	add	r2, r2, r2, lsl #1
   1243c:	ldr	r2, [r4, r2, lsl #2]
   12440:	add	r3, r1, r3, lsr #1
   12444:	cmp	lr, r2
   12448:	subcc	ip, r3, #1
   1244c:	bcc	12468 <error@@Base+0xf90>
   12450:	add	r2, r3, r3, lsl #1
   12454:	add	r1, r3, #1
   12458:	add	r3, r5, r2, lsl #2
   1245c:	ldr	r2, [r3, #4]
   12460:	cmp	lr, r2
   12464:	bls	124dc <error@@Base+0x1004>
   12468:	sub	r3, ip, r1
   1246c:	cmp	ip, r1
   12470:	add	r2, r1, r3, lsr #1
   12474:	bcs	12438 <error@@Base+0xf60>
   12478:	movw	r2, #8294	; 0x2066
   1247c:	mov	r1, #0
   12480:	movw	ip, #1092	; 0x444
   12484:	movw	r3, #1092	; 0x444
   12488:	b	12494 <error@@Base+0xfbc>
   1248c:	add	r2, r2, r2, lsl #1
   12490:	ldr	r2, [r6, r2, lsl #2]
   12494:	add	r3, r1, r3, lsr #1
   12498:	cmp	lr, r2
   1249c:	subcc	ip, r3, #1
   124a0:	bcc	124bc <error@@Base+0xfe4>
   124a4:	add	r2, r3, r3, lsl #1
   124a8:	add	r1, r3, #1
   124ac:	add	r3, r7, r2, lsl #2
   124b0:	ldr	r2, [r3, #4]
   124b4:	cmp	lr, r2
   124b8:	bls	124ec <error@@Base+0x1014>
   124bc:	sub	r3, ip, r1
   124c0:	cmp	ip, r1
   124c4:	add	r2, r1, r3, lsr #1
   124c8:	bcs	1248c <error@@Base+0xfb4>
   124cc:	ldrd	r4, [sp]
   124d0:	ldrd	r6, [sp, #8]
   124d4:	add	sp, sp, #16
   124d8:	pop	{pc}		; (ldr pc, [sp], #4)
   124dc:	ldr	r3, [r3, #8]
   124e0:	cmp	r3, #4
   124e4:	beq	12414 <error@@Base+0xf3c>
   124e8:	b	12478 <error@@Base+0xfa0>
   124ec:	ldr	r3, [r3, #8]
   124f0:	cmp	r3, #6
   124f4:	beq	12414 <error@@Base+0xf3c>
   124f8:	b	124cc <error@@Base+0xff4>
   124fc:	andeq	r1, r0, ip, ror #15
   12500:	andeq	r1, r0, r4, ror #15
   12504:	andeq	r1, r0, r0, ror #15
   12508:	ldrdeq	r1, [r0], -ip
   1250c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12510:	strd	r6, [sp, #8]
   12514:	strd	r8, [sp, #16]
   12518:	ldr	r9, [r1]
   1251c:	strd	sl, [sp, #24]
   12520:	str	lr, [sp, #32]
   12524:	sub	sp, sp, #52	; 0x34
   12528:	cmp	r9, #0
   1252c:	str	r9, [sp, #36]	; 0x24
   12530:	beq	12888 <error@@Base+0x13b0>
   12534:	ldr	r3, [pc, #1996]	; 12d08 <error@@Base+0x1830>
   12538:	add	r8, sp, #32
   1253c:	str	r0, [sp, #28]
   12540:	add	r3, pc, r3
   12544:	str	r3, [sp, #16]
   12548:	ldr	r3, [pc, #1980]	; 12d0c <error@@Base+0x1834>
   1254c:	add	r3, pc, r3
   12550:	str	r3, [sp, #20]
   12554:	ldr	r3, [pc, #1972]	; 12d10 <error@@Base+0x1838>
   12558:	add	r3, pc, r3
   1255c:	str	r3, [sp, #24]
   12560:	ldr	r3, [pc, #1964]	; 12d14 <error@@Base+0x183c>
   12564:	mov	r7, #17
   12568:	mov	r6, r8
   1256c:	add	r3, pc, r3
   12570:	str	r3, [sp, #4]
   12574:	ldr	r3, [pc, #1948]	; 12d18 <error@@Base+0x1840>
   12578:	add	r3, pc, r3
   1257c:	str	r3, [sp, #8]
   12580:	ldr	r3, [pc, #1940]	; 12d1c <error@@Base+0x1844>
   12584:	add	r3, pc, r3
   12588:	str	r3, [sp, #12]
   1258c:	mov	r0, r6
   12590:	bl	123e8 <error@@Base+0xf10>
   12594:	subs	r6, r0, #0
   12598:	beq	12964 <error@@Base+0x148c>
   1259c:	ldr	ip, [pc, #1916]	; 12d20 <error@@Base+0x1848>
   125a0:	movw	r1, #1092	; 0x444
   125a4:	movw	lr, #8294	; 0x2066
   125a8:	mov	r2, r1
   125ac:	mov	r3, #0
   125b0:	ldr	r0, [r6, #12]
   125b4:	add	ip, pc, ip
   125b8:	b	125cc <error@@Base+0x10f4>
   125bc:	sub	r2, r1, r3
   125c0:	add	lr, r3, r2, lsr #1
   125c4:	add	lr, lr, lr, lsl #1
   125c8:	ldr	lr, [ip, lr, lsl #2]
   125cc:	add	r2, r3, r2, lsr #1
   125d0:	cmp	r0, lr
   125d4:	subcc	r1, r2, #1
   125d8:	bcc	125f8 <error@@Base+0x1120>
   125dc:	ldr	lr, [sp, #16]
   125e0:	add	r3, r2, r2, lsl #1
   125e4:	add	r3, lr, r3, lsl #2
   125e8:	ldr	lr, [r3, #4]
   125ec:	cmp	r0, lr
   125f0:	bls	12b30 <error@@Base+0x1658>
   125f4:	add	r3, r2, #1
   125f8:	cmp	r1, r3
   125fc:	bcs	125bc <error@@Base+0x10e4>
   12600:	mov	r0, r6
   12604:	bl	123e8 <error@@Base+0xf10>
   12608:	cmp	r0, #0
   1260c:	beq	12c1c <error@@Base+0x1744>
   12610:	mov	r5, #0
   12614:	mov	sl, r5
   12618:	movw	ip, #1092	; 0x444
   1261c:	movw	r3, #8294	; 0x2066
   12620:	ldr	lr, [r0, #12]
   12624:	mov	r2, ip
   12628:	mov	r1, #0
   1262c:	b	12644 <error@@Base+0x116c>
   12630:	sub	r2, ip, r1
   12634:	ldr	r4, [sp, #8]
   12638:	add	r3, r1, r2, lsr #1
   1263c:	add	r3, r3, r3, lsl #1
   12640:	ldr	r3, [r4, r3, lsl #2]
   12644:	add	r2, r1, r2, lsr #1
   12648:	cmp	lr, r3
   1264c:	subcc	ip, r2, #1
   12650:	bcc	12670 <error@@Base+0x1198>
   12654:	ldr	r1, [sp, #4]
   12658:	add	r3, r2, r2, lsl #1
   1265c:	add	r3, r1, r3, lsl #2
   12660:	ldr	r1, [r3, #4]
   12664:	cmp	lr, r1
   12668:	bls	12b60 <error@@Base+0x1688>
   1266c:	add	r1, r2, #1
   12670:	cmp	ip, r1
   12674:	bcs	12630 <error@@Base+0x1158>
   12678:	bl	123e8 <error@@Base+0xf10>
   1267c:	cmp	r0, #0
   12680:	beq	12c64 <error@@Base+0x178c>
   12684:	mov	r4, #0
   12688:	mov	r3, r4
   1268c:	mov	lr, r4
   12690:	movw	ip, #1092	; 0x444
   12694:	movw	fp, #8294	; 0x2066
   12698:	str	r3, [sp]
   1269c:	mov	r1, ip
   126a0:	mov	r2, #0
   126a4:	ldr	r0, [r0, #12]
   126a8:	b	126c0 <error@@Base+0x11e8>
   126ac:	sub	r1, ip, r2
   126b0:	ldr	r3, [sp, #20]
   126b4:	add	fp, r2, r1, lsr #1
   126b8:	add	fp, fp, fp, lsl #1
   126bc:	ldr	fp, [r3, fp, lsl #2]
   126c0:	add	r1, r2, r1, lsr #1
   126c4:	cmp	r0, fp
   126c8:	subcc	ip, r1, #1
   126cc:	bcc	126ec <error@@Base+0x1214>
   126d0:	ldr	r3, [sp, #12]
   126d4:	add	r2, r1, r1, lsl #1
   126d8:	add	r2, r3, r2, lsl #2
   126dc:	ldr	fp, [r2, #4]
   126e0:	cmp	r0, fp
   126e4:	bls	12b24 <error@@Base+0x164c>
   126e8:	add	r2, r1, #1
   126ec:	cmp	ip, r2
   126f0:	bcs	126ac <error@@Base+0x11d4>
   126f4:	ldr	r3, [sp]
   126f8:	mov	r2, #0
   126fc:	cmp	lr, #0
   12700:	bne	12b1c <error@@Base+0x1644>
   12704:	sub	r1, r5, #2
   12708:	cmp	r1, #1
   1270c:	orrls	sl, sl, #1
   12710:	cmp	sl, #0
   12714:	bne	12a20 <error@@Base+0x1548>
   12718:	bic	ip, r4, #2
   1271c:	cmp	ip, #1
   12720:	orreq	r3, r3, #1
   12724:	cmp	r3, #0
   12728:	bne	12a20 <error@@Base+0x1548>
   1272c:	sub	r3, r5, #8
   12730:	cmp	r3, #1
   12734:	bhi	12978 <error@@Base+0x14a0>
   12738:	sub	r1, r4, #8
   1273c:	cmp	r1, #1
   12740:	bls	1295c <error@@Base+0x1484>
   12744:	sub	r0, r4, #12
   12748:	sub	r1, r4, #10
   1274c:	clz	r1, r1
   12750:	cmp	r4, #10
   12754:	cmpne	r0, #1
   12758:	lsr	r1, r1, #5
   1275c:	bhi	1276c <error@@Base+0x1294>
   12760:	sub	r0, r2, #8
   12764:	cmp	r0, #1
   12768:	bls	1295c <error@@Base+0x1484>
   1276c:	sub	r0, r7, #8
   12770:	cmp	r0, #1
   12774:	bls	12c0c <error@@Base+0x1734>
   12778:	sub	r0, r5, #8
   1277c:	clz	r0, r0
   12780:	lsr	r0, r0, #5
   12784:	tst	r0, r1
   12788:	beq	128d4 <error@@Base+0x13fc>
   1278c:	mov	r7, #8
   12790:	ldr	r3, [r6, #4]
   12794:	cmp	r3, #0
   12798:	bne	1258c <error@@Base+0x10b4>
   1279c:	ldr	r0, [r9, #12]
   127a0:	bl	10a24 <utf8proc_get_property@plt>
   127a4:	ldrsh	r3, [r0]
   127a8:	cmp	r3, #0
   127ac:	ble	12878 <error@@Base+0x13a0>
   127b0:	cmp	r3, #12
   127b4:	ble	127c0 <error@@Base+0x12e8>
   127b8:	cmp	r3, #29
   127bc:	bne	12878 <error@@Base+0x13a0>
   127c0:	ldr	r4, [r6, #4]
   127c4:	cmp	r4, r9
   127c8:	movne	r5, r9
   127cc:	movne	r7, #0
   127d0:	bne	127e0 <error@@Base+0x1308>
   127d4:	b	12c74 <error@@Base+0x179c>
   127d8:	cmp	r5, #0
   127dc:	beq	12c88 <error@@Base+0x17b0>
   127e0:	mov	r1, r8
   127e4:	ldr	r0, [r5, #12]
   127e8:	bl	10a3c <utf8proc_encode_char@plt>
   127ec:	cmp	r0, #0
   127f0:	beq	12ca8 <error@@Base+0x17d0>
   127f4:	ldr	r5, [r5, #4]
   127f8:	add	r7, r7, r0
   127fc:	cmp	r4, r5
   12800:	bne	127d8 <error@@Base+0x1300>
   12804:	add	r0, r7, #1
   12808:	mov	r7, #0
   1280c:	bl	10aa8 <malloc@plt>
   12810:	mov	r5, r0
   12814:	b	12820 <error@@Base+0x1348>
   12818:	cmp	r9, #0
   1281c:	beq	12cc8 <error@@Base+0x17f0>
   12820:	add	r1, r5, r7
   12824:	ldr	r0, [r9, #12]
   12828:	bl	10a3c <utf8proc_encode_char@plt>
   1282c:	ldr	r9, [r9, #4]
   12830:	add	r7, r7, r0
   12834:	cmp	r4, r9
   12838:	bne	12818 <error@@Base+0x1340>
   1283c:	add	r7, r5, r7
   12840:	mov	r3, #0
   12844:	mov	r1, #12
   12848:	mov	r0, #1
   1284c:	strb	r3, [r7]
   12850:	bl	11534 <error@@Base+0x5c>
   12854:	mov	r4, r0
   12858:	mov	r0, r5
   1285c:	bl	10b2c <utf8proc_NFC@plt>
   12860:	mov	r1, r4
   12864:	str	r0, [r4, #8]
   12868:	ldr	r0, [sp, #28]
   1286c:	bl	13510 <error@@Base+0x2038>
   12870:	mov	r0, r5
   12874:	bl	10a18 <free@plt>
   12878:	ldr	r9, [r6, #4]
   1287c:	cmp	r9, #0
   12880:	str	r9, [sp, #36]	; 0x24
   12884:	bne	12560 <error@@Base+0x1088>
   12888:	add	sp, sp, #52	; 0x34
   1288c:	ldrd	r4, [sp]
   12890:	ldrd	r6, [sp, #8]
   12894:	ldrd	r8, [sp, #16]
   12898:	ldrd	sl, [sp, #24]
   1289c:	add	sp, sp, #32
   128a0:	pop	{pc}		; (ldr pc, [sp], #4)
   128a4:	sub	r1, r5, #10
   128a8:	bics	r1, r1, #2
   128ac:	bne	12c0c <error@@Base+0x1734>
   128b0:	sub	r1, r4, #8
   128b4:	cmp	r1, #1
   128b8:	bls	1295c <error@@Base+0x1484>
   128bc:	sub	r1, r4, #10
   128c0:	sub	r0, r5, #8
   128c4:	clz	r1, r1
   128c8:	clz	r0, r0
   128cc:	lsr	r1, r1, #5
   128d0:	lsr	r0, r0, #5
   128d4:	cmp	r4, #11
   128d8:	movne	r0, #0
   128dc:	andeq	r0, r0, #1
   128e0:	cmp	r0, #0
   128e4:	beq	12990 <error@@Base+0x14b8>
   128e8:	cmp	r2, #8
   128ec:	beq	1278c <error@@Base+0x12b4>
   128f0:	cmp	r3, #1
   128f4:	sub	r0, r5, #15
   128f8:	movhi	r3, #0
   128fc:	movls	r3, #1
   12900:	clz	r0, r0
   12904:	cmp	r5, #15
   12908:	lsr	r0, r0, #5
   1290c:	mov	lr, #0
   12910:	beq	12bcc <error@@Base+0x16f4>
   12914:	cmp	r7, #15
   12918:	beq	12c4c <error@@Base+0x1774>
   1291c:	sub	r2, r5, #7
   12920:	sub	r1, r4, #7
   12924:	clz	r2, r2
   12928:	clz	r1, r1
   1292c:	lsr	r2, r2, #5
   12930:	lsr	r1, r1, #5
   12934:	tst	r2, r1
   12938:	movne	r7, #7
   1293c:	bne	12790 <error@@Base+0x12b8>
   12940:	mov	r7, r5
   12944:	b	129d4 <error@@Base+0x14fc>
   12948:	cmp	r5, #13
   1294c:	bne	128a4 <error@@Base+0x13cc>
   12950:	sub	r1, r4, #8
   12954:	cmp	r1, #1
   12958:	bhi	12984 <error@@Base+0x14ac>
   1295c:	mov	r7, r5
   12960:	b	12790 <error@@Base+0x12b8>
   12964:	mov	r4, #18
   12968:	mov	ip, #16
   1296c:	mov	r5, r4
   12970:	mov	r2, r4
   12974:	mov	r3, #10
   12978:	sub	r1, r7, #8
   1297c:	cmp	r1, #1
   12980:	bls	12948 <error@@Base+0x1470>
   12984:	sub	r1, r4, #10
   12988:	clz	r1, r1
   1298c:	lsr	r1, r1, #5
   12990:	cmp	r7, #8
   12994:	cmpeq	r5, #11
   12998:	bne	12b88 <error@@Base+0x16b0>
   1299c:	cmp	r4, #8
   129a0:	beq	12c44 <error@@Base+0x176c>
   129a4:	sub	lr, r4, #15
   129a8:	mov	r0, #0
   129ac:	clz	lr, lr
   129b0:	mov	r3, r0
   129b4:	lsr	lr, lr, #5
   129b8:	sub	r2, r5, #7
   129bc:	sub	r1, r4, #7
   129c0:	clz	r2, r2
   129c4:	clz	r1, r1
   129c8:	lsr	r2, r2, #5
   129cc:	mov	r7, r5
   129d0:	lsr	r1, r1, #5
   129d4:	orrs	r3, r0, r3
   129d8:	bne	129ec <error@@Base+0x1514>
   129dc:	cmp	r5, #16
   129e0:	orreq	r2, r2, #1
   129e4:	cmp	r2, #0
   129e8:	beq	12c30 <error@@Base+0x1758>
   129ec:	cmp	r4, #16
   129f0:	beq	12790 <error@@Base+0x12b8>
   129f4:	cmp	r5, #16
   129f8:	bne	12c30 <error@@Base+0x1758>
   129fc:	sub	r4, r4, #8
   12a00:	cmp	r4, #1
   12a04:	orrls	lr, lr, #1
   12a08:	cmp	lr, #0
   12a0c:	bne	12790 <error@@Base+0x12b8>
   12a10:	cmp	r1, #0
   12a14:	bne	12790 <error@@Base+0x12b8>
   12a18:	cmp	r6, #0
   12a1c:	beq	12888 <error@@Base+0x13b0>
   12a20:	ldr	r4, [pc, #764]	; 12d24 <error@@Base+0x184c>
   12a24:	ldr	lr, [pc, #764]	; 12d28 <error@@Base+0x1850>
   12a28:	ldr	ip, [pc, #764]	; 12d2c <error@@Base+0x1854>
   12a2c:	add	r4, pc, r4
   12a30:	add	lr, pc, lr
   12a34:	add	ip, pc, ip
   12a38:	ldr	r0, [r6, #4]
   12a3c:	cmp	r0, #0
   12a40:	beq	1279c <error@@Base+0x12c4>
   12a44:	movw	r5, #1092	; 0x444
   12a48:	movw	r7, #8294	; 0x2066
   12a4c:	ldr	r1, [r0, #12]
   12a50:	mov	r3, r5
   12a54:	mov	r2, #0
   12a58:	b	12a6c <error@@Base+0x1594>
   12a5c:	sub	r3, r5, r2
   12a60:	add	r7, r2, r3, lsr #1
   12a64:	add	r7, r7, r7, lsl #1
   12a68:	ldr	r7, [lr, r7, lsl #2]
   12a6c:	add	r3, r2, r3, lsr #1
   12a70:	cmp	r1, r7
   12a74:	subcc	r5, r3, #1
   12a78:	bcc	12a94 <error@@Base+0x15bc>
   12a7c:	add	r2, r3, r3, lsl #1
   12a80:	add	r2, r4, r2, lsl #2
   12a84:	ldr	r7, [r2, #4]
   12a88:	cmp	r1, r7
   12a8c:	bls	12b0c <error@@Base+0x1634>
   12a90:	add	r2, r3, #1
   12a94:	cmp	r2, r5
   12a98:	bls	12a5c <error@@Base+0x1584>
   12a9c:	movw	r7, #8294	; 0x2066
   12aa0:	mov	r2, #0
   12aa4:	movw	r5, #1092	; 0x444
   12aa8:	movw	r3, #1092	; 0x444
   12aac:	b	12ac0 <error@@Base+0x15e8>
   12ab0:	sub	r3, r5, r2
   12ab4:	add	r7, r2, r3, lsr #1
   12ab8:	add	r7, r7, r7, lsl #1
   12abc:	ldr	r7, [ip, r7, lsl #2]
   12ac0:	add	r3, r2, r3, lsr #1
   12ac4:	cmp	r1, r7
   12ac8:	subcc	r5, r3, #1
   12acc:	bcc	12aec <error@@Base+0x1614>
   12ad0:	ldr	r7, [sp, #24]
   12ad4:	add	r2, r3, r3, lsl #1
   12ad8:	add	r2, r7, r2, lsl #2
   12adc:	ldr	r7, [r2, #4]
   12ae0:	cmp	r1, r7
   12ae4:	bls	12af8 <error@@Base+0x1620>
   12ae8:	add	r2, r3, #1
   12aec:	cmp	r5, r2
   12af0:	bcs	12ab0 <error@@Base+0x15d8>
   12af4:	b	1279c <error@@Base+0x12c4>
   12af8:	ldr	r3, [r2, #8]
   12afc:	cmp	r3, #6
   12b00:	bne	1279c <error@@Base+0x12c4>
   12b04:	mov	r6, r0
   12b08:	b	12a38 <error@@Base+0x1560>
   12b0c:	ldr	r3, [r2, #8]
   12b10:	cmp	r3, #4
   12b14:	beq	12b04 <error@@Base+0x162c>
   12b18:	b	12a9c <error@@Base+0x15c4>
   12b1c:	mov	r7, #1
   12b20:	b	12790 <error@@Base+0x12b8>
   12b24:	ldr	r3, [sp]
   12b28:	ldr	r2, [r2, #8]
   12b2c:	b	126fc <error@@Base+0x1224>
   12b30:	ldr	r5, [r3, #8]
   12b34:	mov	r0, r6
   12b38:	bl	123e8 <error@@Base+0xf10>
   12b3c:	cmp	r0, #0
   12b40:	sub	sl, r5, #1
   12b44:	clz	sl, sl
   12b48:	lsr	sl, sl, #5
   12b4c:	bne	12618 <error@@Base+0x1140>
   12b50:	mov	r4, #18
   12b54:	mov	r3, r0
   12b58:	mov	r2, r4
   12b5c:	b	12704 <error@@Base+0x122c>
   12b60:	ldr	r4, [r3, #8]
   12b64:	bl	123e8 <error@@Base+0xf10>
   12b68:	cmp	r0, #0
   12b6c:	sub	r3, r4, #2
   12b70:	clz	r3, r3
   12b74:	lsr	r3, r3, #5
   12b78:	and	lr, r3, sl
   12b7c:	bne	12690 <error@@Base+0x11b8>
   12b80:	mov	r2, #18
   12b84:	b	126fc <error@@Base+0x1224>
   12b88:	sub	r0, r5, #15
   12b8c:	sub	lr, r4, #15
   12b90:	clz	r0, r0
   12b94:	clz	lr, lr
   12b98:	lsr	r0, r0, #5
   12b9c:	lsr	lr, lr, #5
   12ba0:	tst	r0, lr
   12ba4:	beq	12bb0 <error@@Base+0x16d8>
   12ba8:	mov	r7, #15
   12bac:	b	12790 <error@@Base+0x12b8>
   12bb0:	cmp	r3, #1
   12bb4:	movhi	r3, #0
   12bb8:	movls	r3, #1
   12bbc:	tst	lr, r3
   12bc0:	bne	1295c <error@@Base+0x1484>
   12bc4:	cmp	r5, #15
   12bc8:	bne	12914 <error@@Base+0x143c>
   12bcc:	sub	r7, r4, #8
   12bd0:	cmp	r7, #1
   12bd4:	bls	12ba8 <error@@Base+0x16d0>
   12bd8:	cmp	ip, #12
   12bdc:	orreq	r1, r1, #1
   12be0:	cmp	r1, #0
   12be4:	beq	12bf0 <error@@Base+0x1718>
   12be8:	cmp	r2, #15
   12bec:	beq	12ba8 <error@@Base+0x16d0>
   12bf0:	sub	r1, r4, #7
   12bf4:	orrs	r3, r3, r0
   12bf8:	clz	r1, r1
   12bfc:	lsr	r1, r1, #5
   12c00:	beq	12c30 <error@@Base+0x1758>
   12c04:	mov	r7, #15
   12c08:	b	129ec <error@@Base+0x1514>
   12c0c:	sub	r1, r4, #10
   12c10:	clz	r1, r1
   12c14:	lsr	r1, r1, #5
   12c18:	b	12778 <error@@Base+0x12a0>
   12c1c:	mov	r2, #18
   12c20:	mov	r5, r0
   12c24:	mov	r3, r0
   12c28:	mov	r4, r2
   12c2c:	b	12718 <error@@Base+0x1240>
   12c30:	cmp	r5, #5
   12c34:	cmpeq	r4, #5
   12c38:	bne	12a18 <error@@Base+0x1540>
   12c3c:	mov	r7, #5
   12c40:	b	12790 <error@@Base+0x12b8>
   12c44:	mov	r7, #11
   12c48:	b	12790 <error@@Base+0x12b8>
   12c4c:	cmp	r5, #14
   12c50:	bne	12cec <error@@Base+0x1814>
   12c54:	cmp	r4, #15
   12c58:	bne	129b8 <error@@Base+0x14e0>
   12c5c:	mov	r7, r5
   12c60:	b	12790 <error@@Base+0x12b8>
   12c64:	mov	r4, r0
   12c68:	mov	r2, #18
   12c6c:	mov	r3, r0
   12c70:	b	12704 <error@@Base+0x122c>
   12c74:	mov	r0, #1
   12c78:	bl	10aa8 <malloc@plt>
   12c7c:	mov	r5, r0
   12c80:	mov	r7, r0
   12c84:	b	12840 <error@@Base+0x1368>
   12c88:	ldr	r3, [pc, #160]	; 12d30 <error@@Base+0x1858>
   12c8c:	mov	r2, #249	; 0xf9
   12c90:	ldr	r1, [pc, #156]	; 12d34 <error@@Base+0x185c>
   12c94:	ldr	r0, [pc, #156]	; 12d38 <error@@Base+0x1860>
   12c98:	add	r3, pc, r3
   12c9c:	add	r1, pc, r1
   12ca0:	add	r0, pc, r0
   12ca4:	bl	10b8c <__assert_fail@plt>
   12ca8:	ldr	r3, [pc, #140]	; 12d3c <error@@Base+0x1864>
   12cac:	mov	r2, #253	; 0xfd
   12cb0:	ldr	r1, [pc, #136]	; 12d40 <error@@Base+0x1868>
   12cb4:	ldr	r0, [pc, #136]	; 12d44 <error@@Base+0x186c>
   12cb8:	add	r3, pc, r3
   12cbc:	add	r1, pc, r1
   12cc0:	add	r0, pc, r0
   12cc4:	bl	10b8c <__assert_fail@plt>
   12cc8:	ldr	r3, [pc, #120]	; 12d48 <error@@Base+0x1870>
   12ccc:	movw	r2, #269	; 0x10d
   12cd0:	ldr	r1, [pc, #116]	; 12d4c <error@@Base+0x1874>
   12cd4:	ldr	r0, [pc, #116]	; 12d50 <error@@Base+0x1878>
   12cd8:	add	r3, pc, r3
   12cdc:	add	r3, r3, #20
   12ce0:	add	r1, pc, r1
   12ce4:	add	r0, pc, r0
   12ce8:	bl	10b8c <__assert_fail@plt>
   12cec:	sub	r2, r5, #10
   12cf0:	bics	r2, r2, #2
   12cf4:	bne	1291c <error@@Base+0x1444>
   12cf8:	cmp	r4, #15
   12cfc:	bne	1291c <error@@Base+0x1444>
   12d00:	mov	r7, r5
   12d04:	b	12790 <error@@Base+0x12b8>
   12d08:	andeq	r1, r0, ip, lsr #13
   12d0c:	andeq	r1, r0, r0, lsr #13
   12d10:	muleq	r0, r4, r6
   12d14:	andeq	r1, r0, r0, lsl #13
   12d18:	andeq	r1, r0, r4, ror r6
   12d1c:	andeq	r1, r0, r8, ror #12
   12d20:	andeq	r1, r0, r8, lsr r6
   12d24:	andeq	r1, r0, r0, asr #3
   12d28:			; <UNDEFINED> instruction: 0x000011bc
   12d2c:			; <UNDEFINED> instruction: 0x000011b8
   12d30:	andeq	r0, r0, ip, lsr #30
   12d34:	andeq	r4, r0, ip, lsl #5
   12d38:	muleq	r0, r0, r2
   12d3c:	andeq	r0, r0, ip, lsl #30
   12d40:	andeq	r4, r0, ip, ror #4
   12d44:	andeq	r4, r0, r0, lsl #5
   12d48:	andeq	r0, r0, ip, ror #29
   12d4c:	andeq	r4, r0, r8, asr #4
   12d50:	andeq	r4, r0, ip, asr #4
   12d54:	str	r4, [sp, #-8]!
   12d58:	mov	r4, r0
   12d5c:	ldr	r0, [r0, #8]
   12d60:	str	lr, [sp, #4]
   12d64:	bl	10a18 <free@plt>
   12d68:	mov	r0, r4
   12d6c:	ldr	r4, [sp]
   12d70:	ldr	lr, [sp, #4]
   12d74:	add	sp, sp, #8
   12d78:	b	10a18 <free@plt>
   12d7c:	strd	r4, [sp, #-16]!
   12d80:	uxtb	r5, r1
   12d84:	mov	r1, #16
   12d88:	str	r6, [sp, #8]
   12d8c:	mov	r6, r0
   12d90:	mov	r0, #1
   12d94:	mov	r4, r2
   12d98:	str	lr, [sp, #12]
   12d9c:	bl	11534 <error@@Base+0x5c>
   12da0:	mov	r3, r0
   12da4:	mov	r0, r6
   12da8:	mov	r1, r3
   12dac:	strb	r5, [r3, #8]
   12db0:	str	r4, [r3, #12]
   12db4:	ldrd	r4, [sp]
   12db8:	ldr	r6, [sp, #8]
   12dbc:	ldr	lr, [sp, #12]
   12dc0:	add	sp, sp, #16
   12dc4:	b	13510 <error@@Base+0x2038>
   12dc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12dcc:	clz	r3, r1
   12dd0:	strd	r6, [sp, #8]
   12dd4:	lsr	r3, r3, #5
   12dd8:	strd	r8, [sp, #16]
   12ddc:	strd	sl, [sp, #24]
   12de0:	mov	sl, r2
   12de4:	str	lr, [sp, #32]
   12de8:	sub	sp, sp, #124	; 0x7c
   12dec:	ldrb	r2, [r2]
   12df0:	ldr	r4, [pc, #888]	; 13170 <error@@Base+0x1c98>
   12df4:	cmp	r2, #0
   12df8:	moveq	r3, #0
   12dfc:	cmp	r3, #0
   12e00:	add	r4, pc, r4
   12e04:	bne	1315c <error@@Base+0x1c84>
   12e08:	mov	r9, r0
   12e0c:	mov	r0, r1
   12e10:	ldr	r1, [pc, #860]	; 13174 <error@@Base+0x1c9c>
   12e14:	ldr	r3, [r9, #4]
   12e18:	add	r1, pc, r1
   12e1c:	str	r3, [sp, #8]
   12e20:	bl	115fc <error@@Base+0x124>
   12e24:	ldrb	r3, [sl]
   12e28:	mov	r7, r0
   12e2c:	cmp	r3, #0
   12e30:	bne	130a4 <error@@Base+0x1bcc>
   12e34:	ldr	r8, [sl, #4]
   12e38:	mov	r0, r7
   12e3c:	ldrb	r3, [sl, #1]
   12e40:	cmp	r8, #0
   12e44:	moveq	r8, #94	; 0x5e
   12e48:	mov	r5, r3
   12e4c:	bl	10b80 <getc@plt>
   12e50:	cmn	r0, #1
   12e54:	beq	12f1c <error@@Base+0x1a44>
   12e58:	ldr	r3, [pc, #792]	; 13178 <error@@Base+0x1ca0>
   12e5c:	ldr	r3, [r4, r3]
   12e60:	ldrsb	r4, [r3, r0]
   12e64:	str	r3, [sp]
   12e68:	cmp	r4, #0
   12e6c:	ble	1313c <error@@Base+0x1c64>
   12e70:	add	r3, sp, #20
   12e74:	mov	r6, #0
   12e78:	add	fp, sp, #17
   12e7c:	str	r3, [sp, #4]
   12e80:	str	sl, [sp, #12]
   12e84:	mov	sl, r5
   12e88:	b	12e9c <error@@Base+0x19c4>
   12e8c:	ldr	r3, [sp]
   12e90:	ldrsb	r4, [r3, r0]
   12e94:	cmp	r4, #0
   12e98:	ble	1313c <error@@Base+0x1c64>
   12e9c:	cmp	r4, #1
   12ea0:	strb	r0, [sp, #16]
   12ea4:	beq	12ec8 <error@@Base+0x19f0>
   12ea8:	sub	r5, r4, #1
   12eac:	mov	r3, r7
   12eb0:	mov	r2, r5
   12eb4:	mov	r1, #1
   12eb8:	mov	r0, fp
   12ebc:	bl	10a90 <fread@plt>
   12ec0:	cmp	r5, r0
   12ec4:	bne	13150 <error@@Base+0x1c78>
   12ec8:	mov	r1, #4
   12ecc:	add	r0, sp, #16
   12ed0:	ldr	r2, [sp, #4]
   12ed4:	bl	10a9c <utf8proc_iterate@plt>
   12ed8:	cmp	r0, r4
   12edc:	bne	13148 <error@@Base+0x1c70>
   12ee0:	cmp	sl, #0
   12ee4:	ldr	r2, [sp, #20]
   12ee8:	beq	12ef8 <error@@Base+0x1a20>
   12eec:	cmp	r2, r8
   12ef0:	moveq	r6, #1
   12ef4:	beq	12f08 <error@@Base+0x1a30>
   12ef8:	mov	r1, r6
   12efc:	mov	r0, r9
   12f00:	mov	r6, #0
   12f04:	bl	12d7c <error@@Base+0x18a4>
   12f08:	mov	r0, r7
   12f0c:	bl	10b80 <getc@plt>
   12f10:	cmn	r0, #1
   12f14:	bne	12e8c <error@@Base+0x19b4>
   12f18:	ldr	sl, [sp, #12]
   12f1c:	mov	r0, r7
   12f20:	bl	11338 <__assert_fail@plt+0x7ac>
   12f24:	ldrb	r3, [sl, #9]
   12f28:	cmp	r3, #0
   12f2c:	beq	12fa4 <error@@Base+0x1acc>
   12f30:	ldr	r3, [sp, #8]
   12f34:	cmp	r3, #0
   12f38:	ldrne	r6, [r3, #4]
   12f3c:	ldreq	r6, [r9]
   12f40:	cmp	r6, #0
   12f44:	beq	12fa4 <error@@Base+0x1acc>
   12f48:	mov	r5, r6
   12f4c:	mov	r7, #32
   12f50:	b	12f60 <error@@Base+0x1a88>
   12f54:	ldr	r5, [r5, #4]
   12f58:	cmp	r5, #0
   12f5c:	beq	1301c <error@@Base+0x1b44>
   12f60:	ldr	r4, [r5, #12]
   12f64:	mov	r0, r4
   12f68:	bl	10a24 <utf8proc_get_property@plt>
   12f6c:	cmp	r4, #13
   12f70:	bhi	13098 <error@@Base+0x1bc0>
   12f74:	cmp	r4, #11
   12f78:	bcs	12f9c <error@@Base+0x1ac4>
   12f7c:	cmp	r4, #9
   12f80:	beq	12f9c <error@@Base+0x1ac4>
   12f84:	cmp	r4, #10
   12f88:	beq	12f54 <error@@Base+0x1a7c>
   12f8c:	ldrsh	r3, [r0]
   12f90:	sub	r3, r3, #23
   12f94:	cmp	r3, #2
   12f98:	bhi	12f54 <error@@Base+0x1a7c>
   12f9c:	str	r7, [r5, #12]
   12fa0:	b	12f54 <error@@Base+0x1a7c>
   12fa4:	ldrb	r3, [sl, #10]
   12fa8:	cmp	r3, #0
   12fac:	beq	12fdc <error@@Base+0x1b04>
   12fb0:	ldr	r3, [sp, #8]
   12fb4:	cmp	r3, #0
   12fb8:	ldrne	r4, [r3, #4]
   12fbc:	ldreq	r4, [r9]
   12fc0:	b	12fd4 <error@@Base+0x1afc>
   12fc4:	ldr	r0, [r4, #12]
   12fc8:	bl	10a6c <utf8proc_tolower@plt>
   12fcc:	str	r0, [r4, #12]
   12fd0:	ldr	r4, [r4, #4]
   12fd4:	cmp	r4, #0
   12fd8:	bne	12fc4 <error@@Base+0x1aec>
   12fdc:	add	sp, sp, #124	; 0x7c
   12fe0:	ldrd	r4, [sp]
   12fe4:	ldrd	r6, [sp, #8]
   12fe8:	ldrd	r8, [sp, #16]
   12fec:	ldrd	sl, [sp, #24]
   12ff0:	add	sp, sp, #32
   12ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ff8:	cmp	r3, #10
   12ffc:	movne	r2, #0
   13000:	andeq	r2, r2, #1
   13004:	cmp	r2, #0
   13008:	bne	13080 <error@@Base+0x1ba8>
   1300c:	subs	r5, r3, #10
   13010:	movne	r5, #1
   13014:	subs	r6, r4, #0
   13018:	beq	12fa4 <error@@Base+0x1acc>
   1301c:	eor	r2, r5, #1
   13020:	ldr	r4, [r6, #4]
   13024:	ldr	r3, [r6, #12]
   13028:	cmp	r3, #32
   1302c:	bne	12ff8 <error@@Base+0x1b20>
   13030:	cmp	r4, #0
   13034:	moveq	r2, #1
   13038:	cmp	r2, #0
   1303c:	bne	13050 <error@@Base+0x1b78>
   13040:	ldr	r2, [r4, #12]
   13044:	cmp	r2, #10
   13048:	cmpne	r2, #32
   1304c:	bne	1300c <error@@Base+0x1b34>
   13050:	cmp	r4, #0
   13054:	movne	r3, r5
   13058:	moveq	r3, #0
   1305c:	cmp	r3, #0
   13060:	beq	13080 <error@@Base+0x1ba8>
   13064:	ldr	r3, [r4, #12]
   13068:	cmp	r3, #32
   1306c:	bne	13080 <error@@Base+0x1ba8>
   13070:	ldrb	r3, [r4, #8]
   13074:	ldrb	r2, [r6, #8]
   13078:	orr	r3, r3, r2
   1307c:	strb	r3, [r4, #8]
   13080:	mov	r0, r9
   13084:	mov	r1, r6
   13088:	bl	13618 <error@@Base+0x2140>
   1308c:	mov	r0, r6
   13090:	bl	10a18 <free@plt>
   13094:	b	13014 <error@@Base+0x1b3c>
   13098:	cmp	r4, #160	; 0xa0
   1309c:	bne	12f8c <error@@Base+0x1ab4>
   130a0:	b	12f9c <error@@Base+0x1ac4>
   130a4:	add	r5, sp, #20
   130a8:	mov	r2, r0
   130ac:	mov	r1, #99	; 0x63
   130b0:	mov	r0, r5
   130b4:	bl	10a30 <fgets@plt>
   130b8:	cmp	r0, #0
   130bc:	beq	130dc <error@@Base+0x1c04>
   130c0:	ldr	r1, [pc, #180]	; 1317c <error@@Base+0x1ca4>
   130c4:	mov	r2, #51	; 0x33
   130c8:	mov	r0, r5
   130cc:	add	r1, pc, r1
   130d0:	bl	10b68 <strncmp@plt>
   130d4:	subs	r6, r0, #0
   130d8:	beq	130f0 <error@@Base+0x1c18>
   130dc:	mov	r0, r7
   130e0:	bl	10a54 <rewind@plt>
   130e4:	mov	r3, #0
   130e8:	strb	r3, [sl, #11]
   130ec:	b	12e34 <error@@Base+0x195c>
   130f0:	ldr	r8, [pc, #136]	; 13180 <error@@Base+0x1ca8>
   130f4:	add	r8, pc, r8
   130f8:	mov	r2, r7
   130fc:	mov	r1, #99	; 0x63
   13100:	mov	r0, r5
   13104:	bl	10a30 <fgets@plt>
   13108:	cmp	r0, #0
   1310c:	beq	13134 <error@@Base+0x1c5c>
   13110:	mov	r1, r8
   13114:	mov	r0, r5
   13118:	bl	109e8 <strcmp@plt>
   1311c:	cmp	r0, #0
   13120:	bne	130f8 <error@@Base+0x1c20>
   13124:	add	r6, r6, #1
   13128:	sxth	r6, r6
   1312c:	cmp	r6, #2
   13130:	bne	130f8 <error@@Base+0x1c20>
   13134:	mov	r3, #1
   13138:	b	130e8 <error@@Base+0x1c10>
   1313c:	ldr	r0, [pc, #64]	; 13184 <error@@Base+0x1cac>
   13140:	add	r0, pc, r0
   13144:	bl	114d8 <error@@Base>
   13148:	bl	10b50 <utf8proc_errmsg@plt>
   1314c:	bl	114d8 <error@@Base>
   13150:	ldr	r0, [pc, #48]	; 13188 <error@@Base+0x1cb0>
   13154:	add	r0, pc, r0
   13158:	bl	114d8 <error@@Base>
   1315c:	ldr	r1, [pc, #40]	; 1318c <error@@Base+0x1cb4>
   13160:	ldr	r0, [pc, #40]	; 13190 <error@@Base+0x1cb8>
   13164:	add	r1, pc, r1
   13168:	add	r0, pc, r0
   1316c:	bl	1159c <error@@Base+0xc4>
   13170:	strdeq	r5, [r1], -r8
   13174:	andeq	r0, r0, r4, ror #25
   13178:	andeq	r0, r0, ip, asr #1
   1317c:	andeq	r3, r0, r4, lsr #29
   13180:			; <UNDEFINED> instruction: 0x00003eb4
   13184:	andeq	r3, r0, r0, lsr #29
   13188:	andeq	r3, r0, r4, lsr #29
   1318c:	strdeq	r3, [r0], -r0
   13190:	strdeq	r3, [r0], -r8
   13194:	str	r4, [sp, #-8]!
   13198:	str	lr, [sp, #4]
   1319c:	bl	10a3c <utf8proc_encode_char@plt>
   131a0:	cmp	r0, #0
   131a4:	ble	131b8 <error@@Base+0x1ce0>
   131a8:	ldr	r4, [sp]
   131ac:	add	sp, sp, #4
   131b0:	sxtb	r0, r0
   131b4:	pop	{pc}		; (ldr pc, [sp], #4)
   131b8:	ldr	r0, [pc, #4]	; 131c4 <error@@Base+0x1cec>
   131bc:	add	r0, pc, r0
   131c0:	bl	114d8 <error@@Base>
   131c4:	andeq	r3, r0, r4, asr lr
   131c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131cc:	uxtb	r4, r0
   131d0:	mov	r5, r1
   131d4:	cmp	r4, #0
   131d8:	strd	r6, [sp, #8]
   131dc:	mov	r7, r2
   131e0:	moveq	r6, r2
   131e4:	str	r8, [sp, #16]
   131e8:	uxtb	r8, r3
   131ec:	str	lr, [sp, #20]
   131f0:	bne	132f0 <error@@Base+0x1e18>
   131f4:	cmp	r5, #10
   131f8:	bne	13234 <error@@Base+0x1d5c>
   131fc:	cmp	r8, #0
   13200:	bne	13228 <error@@Base+0x1d50>
   13204:	ldr	r1, [pc, #272]	; 1331c <error@@Base+0x1e44>
   13208:	add	r1, pc, r1
   1320c:	mov	r0, r6
   13210:	ldrd	r4, [sp]
   13214:	ldrd	r6, [sp, #8]
   13218:	ldr	r8, [sp, #16]
   1321c:	ldr	lr, [sp, #20]
   13220:	add	sp, sp, #24
   13224:	b	10b44 <sprintf@plt>
   13228:	ldr	r1, [pc, #240]	; 13320 <error@@Base+0x1e48>
   1322c:	add	r1, pc, r1
   13230:	b	1320c <error@@Base+0x1d34>
   13234:	mov	r0, r5
   13238:	bl	10a24 <utf8proc_get_property@plt>
   1323c:	cmp	r5, #32
   13240:	beq	13260 <error@@Base+0x1d88>
   13244:	ldrsh	r3, [r0]
   13248:	cmp	r3, #0
   1324c:	ble	132c0 <error@@Base+0x1de8>
   13250:	cmp	r3, #22
   13254:	ble	13260 <error@@Base+0x1d88>
   13258:	cmp	r3, #29
   1325c:	bne	132c0 <error@@Base+0x1de8>
   13260:	mov	r0, r5
   13264:	uxth	r4, r4
   13268:	bl	10af0 <utf8proc_category@plt>
   1326c:	sub	r0, r0, #6
   13270:	cmp	r0, #2
   13274:	bhi	13290 <error@@Base+0x1db8>
   13278:	mov	r1, r6
   1327c:	movw	r0, #9676	; 0x25cc
   13280:	bl	13194 <error@@Base+0x1cbc>
   13284:	add	r4, r4, r0
   13288:	uxth	r4, r4
   1328c:	sxtah	r6, r7, r4
   13290:	mov	r1, r6
   13294:	mov	r0, r5
   13298:	bl	13194 <error@@Base+0x1cbc>
   1329c:	add	r4, r4, r0
   132a0:	mov	r3, #0
   132a4:	sxth	r4, r4
   132a8:	strb	r3, [r7, r4]
   132ac:	ldrd	r4, [sp]
   132b0:	ldrd	r6, [sp, #8]
   132b4:	ldr	r8, [sp, #16]
   132b8:	add	sp, sp, #20
   132bc:	pop	{pc}		; (ldr pc, [sp], #4)
   132c0:	cmp	r5, #255	; 0xff
   132c4:	bls	13308 <error@@Base+0x1e30>
   132c8:	ldr	r1, [pc, #84]	; 13324 <error@@Base+0x1e4c>
   132cc:	mov	r2, r5
   132d0:	mov	r0, r6
   132d4:	add	r1, pc, r1
   132d8:	ldrd	r4, [sp]
   132dc:	ldrd	r6, [sp, #8]
   132e0:	ldr	r8, [sp, #16]
   132e4:	ldr	lr, [sp, #20]
   132e8:	add	sp, sp, #24
   132ec:	b	10b44 <sprintf@plt>
   132f0:	mov	r1, r2
   132f4:	mov	r0, #94	; 0x5e
   132f8:	bl	13194 <error@@Base+0x1cbc>
   132fc:	sxth	r4, r0
   13300:	add	r6, r7, r0
   13304:	b	131f4 <error@@Base+0x1d1c>
   13308:	ldr	r1, [pc, #24]	; 13328 <error@@Base+0x1e50>
   1330c:	mov	r2, r5
   13310:	mov	r0, r6
   13314:	add	r1, pc, r1
   13318:	b	132d8 <error@@Base+0x1e00>
   1331c:	andeq	r0, r0, ip, ror #18
   13320:	strdeq	r3, [r0], -ip
   13324:	andeq	r3, r0, r4, ror #26
   13328:	andeq	r3, r0, ip, lsl sp
   1332c:	mov	r3, r1
   13330:	ldr	r1, [pc, #212]	; 1340c <error@@Base+0x1f34>
   13334:	strd	r4, [sp, #-20]!	; 0xffffffec
   13338:	mov	r5, r2
   1333c:	strd	r6, [sp, #8]
   13340:	mov	r7, r0
   13344:	mov	r0, r3
   13348:	str	lr, [sp, #16]
   1334c:	sub	sp, sp, #20
   13350:	add	r1, pc, r1
   13354:	bl	115fc <error@@Base+0x124>
   13358:	cmp	r5, #0
   1335c:	mov	r6, r0
   13360:	beq	133b4 <error@@Base+0x1edc>
   13364:	mov	r3, r0
   13368:	ldr	r4, [pc, #160]	; 13410 <error@@Base+0x1f38>
   1336c:	mov	r2, #55	; 0x37
   13370:	mov	r1, #1
   13374:	ldr	r0, [pc, #152]	; 13414 <error@@Base+0x1f3c>
   13378:	add	r4, pc, r4
   1337c:	add	r0, pc, r0
   13380:	bl	10a84 <fwrite@plt>
   13384:	mov	r3, r6
   13388:	mov	r2, #55	; 0x37
   1338c:	mov	r1, #1
   13390:	mov	r0, r4
   13394:	bl	10a84 <fwrite@plt>
   13398:	mov	r0, r6
   1339c:	blx	r5
   133a0:	mov	r3, r6
   133a4:	mov	r0, r4
   133a8:	mov	r2, #55	; 0x37
   133ac:	mov	r1, #1
   133b0:	bl	10a84 <fwrite@plt>
   133b4:	ldr	r4, [r7]
   133b8:	cmp	r4, #0
   133bc:	beq	133f0 <error@@Base+0x1f18>
   133c0:	add	r5, sp, #4
   133c4:	ldrb	r0, [r4, #8]
   133c8:	mov	r3, #0
   133cc:	mov	r2, r5
   133d0:	ldr	r1, [r4, #12]
   133d4:	bl	131c8 <error@@Base+0x1cf0>
   133d8:	mov	r1, r6
   133dc:	mov	r0, r5
   133e0:	bl	10b5c <fputs@plt>
   133e4:	ldr	r4, [r4, #4]
   133e8:	cmp	r4, #0
   133ec:	bne	133c4 <error@@Base+0x1eec>
   133f0:	mov	r0, r6
   133f4:	bl	11338 <__assert_fail@plt+0x7ac>
   133f8:	add	sp, sp, #20
   133fc:	ldrd	r4, [sp]
   13400:	ldrd	r6, [sp, #8]
   13404:	add	sp, sp, #16
   13408:	pop	{pc}		; (ldr pc, [sp], #4)
   1340c:	strdeq	r0, [r0], -r4
   13410:	andeq	r3, r0, r0, lsr ip
   13414:	strdeq	r3, [r0], -r4
   13418:	strd	r4, [sp, #-20]!	; 0xffffffec
   1341c:	mov	r2, #0
   13420:	strd	r6, [sp, #8]
   13424:	str	lr, [sp, #16]
   13428:	sub	sp, sp, #12
   1342c:	ldrb	r3, [r1]
   13430:	str	r2, [sp, #4]
   13434:	cmp	r3, r2
   13438:	beq	13488 <error@@Base+0x1fb0>
   1343c:	mov	r4, r1
   13440:	mov	r5, r0
   13444:	add	r6, sp, #4
   13448:	b	13460 <error@@Base+0x1f88>
   1344c:	ldr	r2, [sp, #4]
   13450:	bl	12d7c <error@@Base+0x18a4>
   13454:	ldrb	r3, [r4, r7]!
   13458:	cmp	r3, #0
   1345c:	beq	13488 <error@@Base+0x1fb0>
   13460:	mvn	r1, #0
   13464:	mov	r2, r6
   13468:	mov	r0, r4
   1346c:	bl	10a9c <utf8proc_iterate@plt>
   13470:	subs	r7, r0, #0
   13474:	mov	r1, #0
   13478:	mov	r0, r5
   1347c:	bgt	1344c <error@@Base+0x1f74>
   13480:	mov	r0, #0
   13484:	b	1348c <error@@Base+0x1fb4>
   13488:	mov	r0, #1
   1348c:	add	sp, sp, #12
   13490:	ldrd	r4, [sp]
   13494:	ldrd	r6, [sp, #8]
   13498:	add	sp, sp, #16
   1349c:	pop	{pc}		; (ldr pc, [sp], #4)
   134a0:	mov	r3, #0
   134a4:	str	r3, [r0]
   134a8:	str	r3, [r0, #4]
   134ac:	str	r3, [r0, #8]
   134b0:	str	r3, [r0, #12]
   134b4:	bx	lr
   134b8:	ldr	r3, [r0]
   134bc:	mov	r2, #0
   134c0:	str	r4, [sp, #-8]!
   134c4:	mov	r4, r0
   134c8:	str	lr, [sp, #4]
   134cc:	cmp	r3, r2
   134d0:	strd	r2, [r1]
   134d4:	str	r1, [r0]
   134d8:	streq	r1, [r0, #4]
   134dc:	ldr	r0, [r0, #8]
   134e0:	strne	r1, [r3]
   134e4:	cmp	r0, #0
   134e8:	beq	134f8 <error@@Base+0x2020>
   134ec:	bl	10a18 <free@plt>
   134f0:	mov	r3, #0
   134f4:	str	r3, [r4, #8]
   134f8:	ldr	r3, [r4, #12]
   134fc:	add	r3, r3, #1
   13500:	str	r3, [r4, #12]
   13504:	ldr	r4, [sp]
   13508:	add	sp, sp, #4
   1350c:	pop	{pc}		; (ldr pc, [sp], #4)
   13510:	ldr	r3, [r0, #4]
   13514:	mov	r2, #0
   13518:	str	r4, [sp, #-8]!
   1351c:	mov	r4, r0
   13520:	str	lr, [sp, #4]
   13524:	cmp	r3, r2
   13528:	str	r3, [r1]
   1352c:	str	r2, [r1, #4]
   13530:	streq	r1, [r0]
   13534:	ldr	r0, [r0, #8]
   13538:	strne	r1, [r3, #4]
   1353c:	str	r1, [r4, #4]
   13540:	cmp	r0, #0
   13544:	beq	13554 <error@@Base+0x207c>
   13548:	bl	10a18 <free@plt>
   1354c:	mov	r3, #0
   13550:	str	r3, [r4, #8]
   13554:	ldr	r3, [r4, #12]
   13558:	add	r3, r3, #1
   1355c:	str	r3, [r4, #12]
   13560:	ldr	r4, [sp]
   13564:	add	sp, sp, #4
   13568:	pop	{pc}		; (ldr pc, [sp], #4)
   1356c:	ldr	r3, [r2]
   13570:	str	r4, [sp, #-8]!
   13574:	mov	r4, r0
   13578:	str	lr, [sp, #4]
   1357c:	cmp	r3, #0
   13580:	str	r3, [r1]
   13584:	str	r2, [r1, #4]
   13588:	streq	r1, [r0]
   1358c:	ldr	r0, [r0, #8]
   13590:	strne	r1, [r3, #4]
   13594:	str	r1, [r2]
   13598:	cmp	r0, #0
   1359c:	beq	135ac <error@@Base+0x20d4>
   135a0:	bl	10a18 <free@plt>
   135a4:	mov	r3, #0
   135a8:	str	r3, [r4, #8]
   135ac:	ldr	r3, [r4, #12]
   135b0:	add	r3, r3, #1
   135b4:	str	r3, [r4, #12]
   135b8:	ldr	r4, [sp]
   135bc:	add	sp, sp, #4
   135c0:	pop	{pc}		; (ldr pc, [sp], #4)
   135c4:	ldr	r3, [r1, #4]
   135c8:	str	r4, [sp, #-8]!
   135cc:	mov	r4, r0
   135d0:	str	lr, [sp, #4]
   135d4:	cmp	r3, #0
   135d8:	stm	r2, {r1, r3}
   135dc:	str	r2, [r1, #4]
   135e0:	streq	r2, [r0, #4]
   135e4:	ldr	r0, [r0, #8]
   135e8:	strne	r2, [r3]
   135ec:	cmp	r0, #0
   135f0:	beq	13600 <error@@Base+0x2128>
   135f4:	bl	10a18 <free@plt>
   135f8:	mov	r3, #0
   135fc:	str	r3, [r4, #8]
   13600:	ldr	r3, [r4, #12]
   13604:	add	r3, r3, #1
   13608:	str	r3, [r4, #12]
   1360c:	ldr	r4, [sp]
   13610:	add	sp, sp, #4
   13614:	pop	{pc}		; (ldr pc, [sp], #4)
   13618:	ldrd	r2, [r1]
   1361c:	strd	r4, [sp, #-16]!
   13620:	mov	r4, r0
   13624:	mov	r5, #0
   13628:	str	r6, [sp, #8]
   1362c:	str	lr, [sp, #12]
   13630:	cmp	r2, #0
   13634:	strne	r3, [r2, #4]
   13638:	ldrne	r3, [r1, #4]
   1363c:	streq	r3, [r0]
   13640:	cmp	r3, #0
   13644:	streq	r2, [r0, #4]
   13648:	ldr	r0, [r0, #8]
   1364c:	strne	r2, [r3]
   13650:	str	r5, [r1]
   13654:	str	r5, [r1, #4]
   13658:	cmp	r0, r5
   1365c:	beq	13668 <error@@Base+0x2190>
   13660:	bl	10a18 <free@plt>
   13664:	str	r5, [r4, #8]
   13668:	ldr	r3, [r4, #12]
   1366c:	ldr	r6, [sp, #8]
   13670:	sub	r3, r3, #1
   13674:	str	r3, [r4, #12]
   13678:	ldrd	r4, [sp]
   1367c:	add	sp, sp, #12
   13680:	pop	{pc}		; (ldr pc, [sp], #4)
   13684:	ldr	r3, [r0, #8]
   13688:	cmp	r3, #0
   1368c:	bxne	lr
   13690:	ldr	r3, [r0, #12]
   13694:	cmp	r3, #0
   13698:	bxeq	lr
   1369c:	mov	r1, #4
   136a0:	str	r4, [sp, #-8]!
   136a4:	mov	r4, r0
   136a8:	mov	r0, r3
   136ac:	str	lr, [sp, #4]
   136b0:	bl	11534 <error@@Base+0x5c>
   136b4:	ldr	r3, [r4]
   136b8:	str	r0, [r4, #8]
   136bc:	cmp	r3, #0
   136c0:	beq	136d8 <error@@Base+0x2200>
   136c4:	sub	r0, r0, #4
   136c8:	str	r3, [r0, #4]!
   136cc:	ldr	r3, [r3, #4]
   136d0:	cmp	r3, #0
   136d4:	bne	136c8 <error@@Base+0x21f0>
   136d8:	ldr	r4, [sp]
   136dc:	add	sp, sp, #4
   136e0:	pop	{pc}		; (ldr pc, [sp], #4)
   136e4:	strd	r4, [sp, #-16]!
   136e8:	ldr	r4, [r0]
   136ec:	str	r6, [sp, #8]
   136f0:	str	lr, [sp, #12]
   136f4:	cmp	r4, #0
   136f8:	beq	13724 <error@@Base+0x224c>
   136fc:	mov	r5, r0
   13700:	mov	r6, r1
   13704:	mov	r1, r4
   13708:	mov	r0, r5
   1370c:	bl	13618 <error@@Base+0x2140>
   13710:	mov	r0, r4
   13714:	blx	r6
   13718:	ldr	r4, [r5]
   1371c:	cmp	r4, #0
   13720:	bne	13704 <error@@Base+0x222c>
   13724:	ldrd	r4, [sp]
   13728:	ldr	r6, [sp, #8]
   1372c:	add	sp, sp, #12
   13730:	pop	{pc}		; (ldr pc, [sp], #4)
   13734:	ldr	r3, [pc, #400]	; 138cc <error@@Base+0x23f4>
   13738:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1373c:	strd	r6, [sp, #8]
   13740:	ldr	r6, [pc, #392]	; 138d0 <error@@Base+0x23f8>
   13744:	strd	r8, [sp, #16]
   13748:	add	r3, pc, r3
   1374c:	strd	sl, [sp, #24]
   13750:	str	lr, [sp, #32]
   13754:	sub	sp, sp, #20
   13758:	add	r6, pc, r6
   1375c:	str	r0, [sp]
   13760:	str	r3, [sp, #8]
   13764:	lsl	r3, r1, #2
   13768:	str	r1, [sp, #4]
   1376c:	str	r3, [sp, #12]
   13770:	ldr	r3, [sp]
   13774:	ldr	r2, [sp, #4]
   13778:	cmp	r3, r2
   1377c:	ldr	r2, [sp, #8]
   13780:	ldr	r1, [r2]
   13784:	ldr	r4, [r1, r3, lsl #2]
   13788:	bge	138bc <error@@Base+0x23e4>
   1378c:	ldr	r5, [pc, #320]	; 138d4 <error@@Base+0x23fc>
   13790:	ldm	sp, {r8, fp}
   13794:	add	r5, pc, r5
   13798:	mov	r0, r4
   1379c:	ldr	r1, [r1, fp, lsl #2]
   137a0:	lsl	r9, fp, #2
   137a4:	ldr	r3, [r5, #4]
   137a8:	blx	r3
   137ac:	cmp	r0, #0
   137b0:	bge	13844 <error@@Base+0x236c>
   137b4:	sub	fp, fp, #1
   137b8:	ldr	r1, [r5]
   137bc:	cmp	r8, fp
   137c0:	lslge	r9, fp, #2
   137c4:	blt	13798 <error@@Base+0x22c0>
   137c8:	cmp	fp, r8
   137cc:	add	r7, r1, r9
   137d0:	beq	13854 <error@@Base+0x237c>
   137d4:	ldr	r3, [r1, r9]
   137d8:	add	sl, r8, #1
   137dc:	lsl	r7, r8, #2
   137e0:	cmp	fp, sl
   137e4:	str	r3, [r1, r8, lsl #2]
   137e8:	bgt	13800 <error@@Base+0x2328>
   137ec:	b	1389c <error@@Base+0x23c4>
   137f0:	add	sl, sl, #1
   137f4:	ldr	r1, [r6]
   137f8:	cmp	fp, sl
   137fc:	beq	1384c <error@@Base+0x2374>
   13800:	mov	r0, r4
   13804:	ldr	r1, [r1, sl, lsl #2]
   13808:	lsl	r7, sl, #2
   1380c:	ldr	r3, [r6, #4]
   13810:	blx	r3
   13814:	cmp	r0, #0
   13818:	bgt	137f0 <error@@Base+0x2318>
   1381c:	ldr	r1, [r6]
   13820:	mov	r8, sl
   13824:	add	r7, r1, r7
   13828:	ldr	r3, [r7]
   1382c:	sub	fp, fp, #1
   13830:	cmp	fp, sl
   13834:	str	r3, [r1, r9]
   13838:	bgt	13798 <error@@Base+0x22c0>
   1383c:	add	r7, r1, fp, lsl #2
   13840:	b	13858 <error@@Base+0x2380>
   13844:	ldr	r1, [r5]
   13848:	b	137c8 <error@@Base+0x22f0>
   1384c:	add	r7, r1, r9
   13850:	mov	r8, fp
   13854:	mov	fp, r8
   13858:	ldr	r3, [sp]
   1385c:	sub	r1, fp, #1
   13860:	str	r4, [r7]
   13864:	cmp	r3, r1
   13868:	blt	138b0 <error@@Base+0x23d8>
   1386c:	ldr	r2, [sp, #4]
   13870:	add	r3, r8, #1
   13874:	str	r3, [sp]
   13878:	cmp	r3, r2
   1387c:	blt	13770 <error@@Base+0x2298>
   13880:	add	sp, sp, #20
   13884:	ldrd	r4, [sp]
   13888:	ldrd	r6, [sp, #8]
   1388c:	ldrd	r8, [sp, #16]
   13890:	ldrd	sl, [sp, #24]
   13894:	add	sp, sp, #32
   13898:	pop	{pc}		; (ldr pc, [sp], #4)
   1389c:	add	r7, r7, #4
   138a0:	add	r7, r1, r7
   138a4:	beq	13850 <error@@Base+0x2378>
   138a8:	mov	r8, sl
   138ac:	b	13828 <error@@Base+0x2350>
   138b0:	mov	r0, r3
   138b4:	bl	13734 <error@@Base+0x225c>
   138b8:	b	1386c <error@@Base+0x2394>
   138bc:	ldm	sp, {r8, fp}
   138c0:	ldr	r3, [sp, #12]
   138c4:	add	r7, r1, r3
   138c8:	b	13858 <error@@Base+0x2380>
   138cc:	andeq	r4, r1, ip, lsl sl
   138d0:	andeq	r4, r1, ip, lsl #20
   138d4:	ldrdeq	r4, [r1], -r0
   138d8:	cmp	r0, #1
   138dc:	mov	ip, r1
   138e0:	ble	13900 <error@@Base+0x2428>
   138e4:	ldr	r3, [pc, #24]	; 13904 <error@@Base+0x242c>
   138e8:	sub	r1, r0, #1
   138ec:	mov	r0, #0
   138f0:	add	r3, pc, r3
   138f4:	str	ip, [r3]
   138f8:	str	r2, [r3, #4]
   138fc:	b	13734 <error@@Base+0x225c>
   13900:	bx	lr
   13904:	andeq	r4, r1, r4, ror r8
   13908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1390c:	mov	r7, r0
   13910:	ldr	r6, [pc, #72]	; 13960 <error@@Base+0x2488>
   13914:	ldr	r5, [pc, #72]	; 13964 <error@@Base+0x248c>
   13918:	add	r6, pc, r6
   1391c:	add	r5, pc, r5
   13920:	sub	r6, r6, r5
   13924:	mov	r8, r1
   13928:	mov	r9, r2
   1392c:	bl	109bc <calloc@plt-0x20>
   13930:	asrs	r6, r6, #2
   13934:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13938:	mov	r4, #0
   1393c:	add	r4, r4, #1
   13940:	ldr	r3, [r5], #4
   13944:	mov	r2, r9
   13948:	mov	r1, r8
   1394c:	mov	r0, r7
   13950:	blx	r3
   13954:	cmp	r6, r4
   13958:	bne	1393c <error@@Base+0x2464>
   1395c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13960:	andeq	r4, r1, r4, ror #11
   13964:	ldrdeq	r4, [r1], -ip
   13968:	bx	lr

Disassembly of section .fini:

0001396c <.fini>:
   1396c:	push	{r3, lr}
   13970:	pop	{r3, pc}
