
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f0c <.init>:
   11f0c:	push	{r3, lr}
   11f10:	bl	1218c <_start@@Base+0x3c>
   11f14:	pop	{r3, pc}

Disassembly of section .plt:

00011f18 <strcmp@plt-0x14>:
   11f18:	push	{lr}		; (str lr, [sp, #-4]!)
   11f1c:	ldr	lr, [pc, #4]	; 11f28 <strcmp@plt-0x4>
   11f20:	add	lr, pc, lr
   11f24:	ldr	pc, [lr, #8]!
   11f28:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00011f2c <strcmp@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #24, 20	; 0x18000
   11f34:	ldr	pc, [ip, #216]!	; 0xd8

00011f38 <free@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #24, 20	; 0x18000
   11f40:	ldr	pc, [ip, #208]!	; 0xd0

00011f44 <memcpy@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #24, 20	; 0x18000
   11f4c:	ldr	pc, [ip, #200]!	; 0xc8

00011f50 <memcmp@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #24, 20	; 0x18000
   11f58:	ldr	pc, [ip, #192]!	; 0xc0

00011f5c <realloc@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #24, 20	; 0x18000
   11f64:	ldr	pc, [ip, #184]!	; 0xb8

00011f68 <puts@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #24, 20	; 0x18000
   11f70:	ldr	pc, [ip, #176]!	; 0xb0

00011f74 <malloc@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #24, 20	; 0x18000
   11f7c:	ldr	pc, [ip, #168]!	; 0xa8

00011f80 <__libc_start_main@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #24, 20	; 0x18000
   11f88:	ldr	pc, [ip, #160]!	; 0xa0

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #24, 20	; 0x18000
   11f94:	ldr	pc, [ip, #152]!	; 0x98

00011f98 <strlen@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #24, 20	; 0x18000
   11fa0:	ldr	pc, [ip, #144]!	; 0x90

00011fa4 <posix_memalign@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #24, 20	; 0x18000
   11fac:	ldr	pc, [ip, #136]!	; 0x88

00011fb0 <memset@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #24, 20	; 0x18000
   11fb8:	ldr	pc, [ip, #128]!	; 0x80

00011fbc <memchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #24, 20	; 0x18000
   11fc4:	ldr	pc, [ip, #120]!	; 0x78

00011fc8 <abort@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #24, 20	; 0x18000
   11fd0:	ldr	pc, [ip, #112]!	; 0x70

00011fd4 <__assert_fail@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #24, 20	; 0x18000
   11fdc:	ldr	pc, [ip, #104]!	; 0x68

Disassembly of section .text:

00011fe0 <main@@Base>:
   11fe0:	strd	r4, [sp, #-16]!
   11fe4:	str	r6, [sp, #8]
   11fe8:	str	lr, [sp, #12]
   11fec:	sub	sp, sp, #240	; 0xf0
   11ff0:	add	r4, sp, #8
   11ff4:	mov	r0, r4
   11ff8:	bl	13c54 <flatcc_builder_init@@Base>
   11ffc:	mov	r0, r4
   12000:	mov	r1, #0
   12004:	bl	122e4 <create_monster_bottom_up@@Base>
   12008:	cmp	r0, #0
   1200c:	bne	120bc <main@@Base+0xdc>
   12010:	add	r5, sp, #4
   12014:	mov	r0, r4
   12018:	mov	r1, r5
   1201c:	bl	17a28 <flatcc_builder_finalize_aligned_buffer@@Base>
   12020:	bl	17b54 <flatcc_builder_aligned_free@@Base>
   12024:	mov	r0, r4
   12028:	bl	13df8 <flatcc_builder_reset@@Base>
   1202c:	mov	r1, #1
   12030:	mov	r0, r4
   12034:	bl	122e4 <create_monster_bottom_up@@Base>
   12038:	cmp	r0, #0
   1203c:	bne	12104 <main@@Base+0x124>
   12040:	mov	r1, r5
   12044:	mov	r0, r4
   12048:	bl	17a28 <flatcc_builder_finalize_aligned_buffer@@Base>
   1204c:	mov	r6, r0
   12050:	bl	12d84 <access_monster_buffer@@Base>
   12054:	mov	r0, r6
   12058:	bl	17b54 <flatcc_builder_aligned_free@@Base>
   1205c:	mov	r0, r4
   12060:	bl	13df8 <flatcc_builder_reset@@Base>
   12064:	mov	r0, r4
   12068:	bl	129d8 <create_monster_top_down@@Base>
   1206c:	mov	r1, r5
   12070:	mov	r0, r4
   12074:	bl	1796c <flatcc_builder_finalize_buffer@@Base>
   12078:	mov	r6, r0
   1207c:	bl	12d84 <access_monster_buffer@@Base>
   12080:	subs	r5, r0, #0
   12084:	bne	120e0 <main@@Base+0x100>
   12088:	mov	r0, r6
   1208c:	bl	11f38 <free@plt>
   12090:	mov	r0, r4
   12094:	bl	13e04 <flatcc_builder_clear@@Base>
   12098:	ldr	r0, [pc, #136]	; 12128 <main@@Base+0x148>
   1209c:	add	r0, pc, r0
   120a0:	bl	11f68 <puts@plt>
   120a4:	mov	r0, r5
   120a8:	add	sp, sp, #240	; 0xf0
   120ac:	ldrd	r4, [sp]
   120b0:	ldr	r6, [sp, #8]
   120b4:	add	sp, sp, #12
   120b8:	pop	{pc}		; (ldr pc, [sp], #4)
   120bc:	ldr	r3, [pc, #104]	; 1212c <main@@Base+0x14c>
   120c0:	mov	r2, #308	; 0x134
   120c4:	ldr	r1, [pc, #100]	; 12130 <main@@Base+0x150>
   120c8:	ldr	r0, [pc, #100]	; 12134 <main@@Base+0x154>
   120cc:	add	r3, pc, r3
   120d0:	add	r3, r3, #156	; 0x9c
   120d4:	add	r1, pc, r1
   120d8:	add	r0, pc, r0
   120dc:	bl	11fd4 <__assert_fail@plt>
   120e0:	ldr	r3, [pc, #80]	; 12138 <main@@Base+0x158>
   120e4:	movw	r2, #342	; 0x156
   120e8:	ldr	r1, [pc, #76]	; 1213c <main@@Base+0x15c>
   120ec:	ldr	r0, [pc, #76]	; 12140 <main@@Base+0x160>
   120f0:	add	r3, pc, r3
   120f4:	add	r3, r3, #156	; 0x9c
   120f8:	add	r1, pc, r1
   120fc:	add	r0, pc, r0
   12100:	bl	11fd4 <__assert_fail@plt>
   12104:	ldr	r3, [pc, #56]	; 12144 <main@@Base+0x164>
   12108:	movw	r2, #335	; 0x14f
   1210c:	ldr	r1, [pc, #52]	; 12148 <main@@Base+0x168>
   12110:	ldr	r0, [pc, #52]	; 1214c <main@@Base+0x16c>
   12114:	add	r3, pc, r3
   12118:	add	r3, r3, #156	; 0x9c
   1211c:	add	r1, pc, r1
   12120:	add	r0, pc, r0
   12124:	bl	11fd4 <__assert_fail@plt>
   12128:	andeq	r6, r0, r0, lsl #9
   1212c:	andeq	r6, r0, ip, ror #1
   12130:	andeq	r6, r0, r4, ror #7
   12134:	andeq	r6, r0, r4, asr ip
   12138:	andeq	r6, r0, r8, asr #1
   1213c:	andeq	r6, r0, r0, asr #7
   12140:	andeq	r6, r0, r0, lsr ip
   12144:	andeq	r6, r0, r4, lsr #1
   12148:	muleq	r0, ip, r3
   1214c:	andeq	r6, r0, ip, lsl #24

00012150 <_start@@Base>:
   12150:	mov	fp, #0
   12154:	mov	lr, #0
   12158:	pop	{r1}		; (ldr r1, [sp], #4)
   1215c:	mov	r2, sp
   12160:	push	{r2}		; (str r2, [sp, #-4]!)
   12164:	push	{r0}		; (str r0, [sp, #-4]!)
   12168:	ldr	ip, [pc, #16]	; 12180 <_start@@Base+0x30>
   1216c:	push	{ip}		; (str ip, [sp, #-4]!)
   12170:	ldr	r0, [pc, #12]	; 12184 <_start@@Base+0x34>
   12174:	ldr	r3, [pc, #12]	; 12188 <_start@@Base+0x38>
   12178:	bl	11f80 <__libc_start_main@plt>
   1217c:	bl	11fc8 <abort@plt>
   12180:			; <UNDEFINED> instruction: 0x000181b0
   12184:	andeq	r1, r1, r0, ror #31
   12188:	andeq	r8, r1, r0, asr r1
   1218c:	ldr	r3, [pc, #20]	; 121a8 <_start@@Base+0x58>
   12190:	ldr	r2, [pc, #20]	; 121ac <_start@@Base+0x5c>
   12194:	add	r3, pc, r3
   12198:	ldr	r2, [r3, r2]
   1219c:	cmp	r2, #0
   121a0:	bxeq	lr
   121a4:	b	11f8c <__gmon_start__@plt>
   121a8:	andeq	r7, r1, r4, ror #28
   121ac:	andeq	r0, r0, ip, asr #32
   121b0:	ldr	r0, [pc, #24]	; 121d0 <_start@@Base+0x80>
   121b4:	ldr	r3, [pc, #24]	; 121d4 <_start@@Base+0x84>
   121b8:	cmp	r3, r0
   121bc:	bxeq	lr
   121c0:	ldr	r3, [pc, #16]	; 121d8 <_start@@Base+0x88>
   121c4:	cmp	r3, #0
   121c8:	bxeq	lr
   121cc:	bx	r3
   121d0:	andeq	sl, r2, r0, rrx
   121d4:	andeq	sl, r2, r0, rrx
   121d8:	andeq	r0, r0, r0
   121dc:	ldr	r0, [pc, #36]	; 12208 <_start@@Base+0xb8>
   121e0:	ldr	r1, [pc, #36]	; 1220c <_start@@Base+0xbc>
   121e4:	sub	r1, r1, r0
   121e8:	asr	r1, r1, #2
   121ec:	add	r1, r1, r1, lsr #31
   121f0:	asrs	r1, r1, #1
   121f4:	bxeq	lr
   121f8:	ldr	r3, [pc, #16]	; 12210 <_start@@Base+0xc0>
   121fc:	cmp	r3, #0
   12200:	bxeq	lr
   12204:	bx	r3
   12208:	andeq	sl, r2, r0, rrx
   1220c:	andeq	sl, r2, r0, rrx
   12210:	andeq	r0, r0, r0
   12214:	push	{r4, lr}
   12218:	ldr	r4, [pc, #24]	; 12238 <_start@@Base+0xe8>
   1221c:	ldrb	r3, [r4]
   12220:	cmp	r3, #0
   12224:	popne	{r4, pc}
   12228:	bl	121b0 <_start@@Base+0x60>
   1222c:	mov	r3, #1
   12230:	strb	r3, [r4]
   12234:	pop	{r4, pc}
   12238:	andeq	sl, r2, r0, rrx
   1223c:	b	121dc <_start@@Base+0x8c>
   12240:	ldr	r3, [pc, #32]	; 12268 <_start@@Base+0x118>
   12244:	mov	r2, #148	; 0x94
   12248:	str	r4, [sp, #-8]!
   1224c:	ldr	r1, [pc, #24]	; 1226c <_start@@Base+0x11c>
   12250:	str	lr, [sp, #4]
   12254:	ldr	r0, [pc, #20]	; 12270 <_start@@Base+0x120>
   12258:	add	r3, pc, r3
   1225c:	add	r1, pc, r1
   12260:	add	r0, pc, r0
   12264:	bl	11fd4 <__assert_fail@plt>
   12268:	andeq	r5, r0, r0, ror #30
   1226c:	andeq	r6, r0, r0
   12270:	andeq	r6, r0, r0, ror r0
   12274:	ldr	r3, [pc, #36]	; 122a0 <_start@@Base+0x150>
   12278:	mov	r2, #149	; 0x95
   1227c:	str	r4, [sp, #-8]!
   12280:	ldr	r1, [pc, #28]	; 122a4 <_start@@Base+0x154>
   12284:	str	lr, [sp, #4]
   12288:	ldr	r0, [pc, #24]	; 122a8 <_start@@Base+0x158>
   1228c:	add	r3, pc, r3
   12290:	add	r3, r3, #28
   12294:	add	r1, pc, r1
   12298:	add	r0, pc, r0
   1229c:	bl	11fd4 <__assert_fail@plt>
   122a0:	andeq	r5, r0, ip, lsr #30
   122a4:	andeq	r5, r0, r8, asr #31
   122a8:	andeq	r6, r0, r8, lsr r0
   122ac:	ldr	r3, [pc, #36]	; 122d8 <_start@@Base+0x188>
   122b0:	mov	r2, #50	; 0x32
   122b4:	str	r4, [sp, #-8]!
   122b8:	ldr	r1, [pc, #28]	; 122dc <_start@@Base+0x18c>
   122bc:	str	lr, [sp, #4]
   122c0:	ldr	r0, [pc, #24]	; 122e0 <_start@@Base+0x190>
   122c4:	add	r3, pc, r3
   122c8:	add	r3, r3, #56	; 0x38
   122cc:	add	r1, pc, r1
   122d0:	add	r0, pc, r0
   122d4:	bl	11fd4 <__assert_fail@plt>
   122d8:	strdeq	r5, [r0], -r4
   122dc:	andeq	r6, r0, ip, lsr #32
   122e0:	muleq	r0, ip, r0

000122e4 <create_monster_bottom_up@@Base>:
   122e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   122e8:	mov	r5, r1
   122ec:	mov	r4, r0
   122f0:	ldr	r1, [pc, #1688]	; 12990 <create_monster_bottom_up@@Base+0x6ac>
   122f4:	strd	r6, [sp, #8]
   122f8:	strd	r8, [sp, #16]
   122fc:	str	sl, [sp, #24]
   12300:	str	lr, [sp, #28]
   12304:	sub	sp, sp, #24
   12308:	add	r1, pc, r1
   1230c:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12310:	ldr	r1, [pc, #1660]	; 12994 <create_monster_bottom_up@@Base+0x6b0>
   12314:	mov	r6, r0
   12318:	mov	r0, r4
   1231c:	add	r1, pc, r1
   12320:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12324:	mov	r7, r0
   12328:	mov	r1, #2
   1232c:	mov	r0, r4
   12330:	bl	155c8 <flatcc_builder_start_table@@Base>
   12334:	adds	r3, r6, #0
   12338:	movne	r3, #1
   1233c:	cmp	r0, #0
   12340:	moveq	r0, r3
   12344:	movne	r0, #0
   12348:	cmp	r0, #0
   1234c:	beq	12720 <create_monster_bottom_up@@Base+0x43c>
   12350:	mov	r1, #0
   12354:	mov	r0, r4
   12358:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   1235c:	cmp	r0, #0
   12360:	beq	12720 <create_monster_bottom_up@@Base+0x43c>
   12364:	mov	r3, #2
   12368:	mov	r1, #1
   1236c:	str	r6, [r0]
   12370:	mov	r2, r3
   12374:	mov	r0, r4
   12378:	bl	170fc <flatcc_builder_table_add@@Base>
   1237c:	cmp	r0, #0
   12380:	beq	12720 <create_monster_bottom_up@@Base+0x43c>
   12384:	ldr	r1, [pc, #1548]	; 12998 <create_monster_bottom_up@@Base+0x6b4>
   12388:	mov	r3, #3
   1238c:	mov	r2, #0
   12390:	strh	r3, [r0]
   12394:	mov	r0, r4
   12398:	add	r1, pc, r1
   1239c:	add	r1, r1, #84	; 0x54
   123a0:	bl	15f00 <flatcc_builder_check_required@@Base>
   123a4:	cmp	r0, #0
   123a8:	beq	12968 <create_monster_bottom_up@@Base+0x684>
   123ac:	mov	r0, r4
   123b0:	bl	15fac <flatcc_builder_end_table@@Base>
   123b4:	mov	r8, r0
   123b8:	mov	r1, #2
   123bc:	mov	r0, r4
   123c0:	bl	155c8 <flatcc_builder_start_table@@Base>
   123c4:	adds	r3, r7, #0
   123c8:	movne	r3, #1
   123cc:	cmp	r0, #0
   123d0:	moveq	r0, r3
   123d4:	movne	r0, #0
   123d8:	cmp	r0, #0
   123dc:	beq	12534 <create_monster_bottom_up@@Base+0x250>
   123e0:	mov	r1, #0
   123e4:	mov	r0, r4
   123e8:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   123ec:	cmp	r0, #0
   123f0:	beq	12534 <create_monster_bottom_up@@Base+0x250>
   123f4:	mov	r3, #2
   123f8:	mov	r1, #1
   123fc:	str	r7, [r0]
   12400:	mov	r2, r3
   12404:	mov	r0, r4
   12408:	bl	170fc <flatcc_builder_table_add@@Base>
   1240c:	subs	sl, r0, #0
   12410:	beq	12534 <create_monster_bottom_up@@Base+0x250>
   12414:	ldr	r6, [pc, #1408]	; 1299c <create_monster_bottom_up@@Base+0x6b8>
   12418:	mov	r3, #5
   1241c:	mov	r2, #0
   12420:	mov	r0, r4
   12424:	strh	r3, [sl]
   12428:	add	r6, pc, r6
   1242c:	add	r1, r6, #84	; 0x54
   12430:	bl	15f00 <flatcc_builder_check_required@@Base>
   12434:	cmp	r0, #0
   12438:	beq	12968 <create_monster_bottom_up@@Base+0x684>
   1243c:	mov	r0, r4
   12440:	bl	15fac <flatcc_builder_end_table@@Base>
   12444:	ldr	r1, [pc, #1364]	; 129a0 <create_monster_bottom_up@@Base+0x6bc>
   12448:	mov	sl, r0
   1244c:	mov	r0, r4
   12450:	add	r1, pc, r1
   12454:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12458:	mov	r9, r0
   1245c:	ldrh	r0, [r6, #124]	; 0x7c
   12460:	mvn	r2, #0
   12464:	mov	r3, #1
   12468:	ldrd	r6, [r6, #116]	; 0x74
   1246c:	str	r3, [sp]
   12470:	str	r2, [sp, #4]
   12474:	add	r2, sp, #12
   12478:	mov	r1, r2
   1247c:	mov	r2, #10
   12480:	strd	r6, [sp, #12]
   12484:	strh	r0, [sp, #20]
   12488:	mov	r0, r4
   1248c:	bl	1617c <flatcc_builder_create_vector@@Base>
   12490:	mov	r6, r0
   12494:	mov	r0, r4
   12498:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   1249c:	cmp	r8, #0
   124a0:	beq	124b0 <create_monster_bottom_up@@Base+0x1cc>
   124a4:	mov	r1, r8
   124a8:	mov	r0, r4
   124ac:	bl	14cf8 <flatcc_builder_offset_vector_push@@Base>
   124b0:	cmp	sl, #0
   124b4:	beq	124c4 <create_monster_bottom_up@@Base+0x1e0>
   124b8:	mov	r1, sl
   124bc:	mov	r0, r4
   124c0:	bl	14cf8 <flatcc_builder_offset_vector_push@@Base>
   124c4:	mov	r0, r4
   124c8:	bl	16430 <flatcc_builder_end_offset_vector@@Base>
   124cc:	cmp	r5, #0
   124d0:	mov	r7, r0
   124d4:	bne	125b0 <create_monster_bottom_up@@Base+0x2cc>
   124d8:	mov	r3, r5
   124dc:	mov	r2, r5
   124e0:	mov	r1, r5
   124e4:	mov	r0, r4
   124e8:	bl	145f0 <flatcc_builder_start_buffer@@Base>
   124ec:	subs	r8, r0, #0
   124f0:	bne	12514 <create_monster_bottom_up@@Base+0x230>
   124f4:	mov	r1, #10
   124f8:	mov	r0, r4
   124fc:	bl	155c8 <flatcc_builder_start_table@@Base>
   12500:	cmp	r0, #0
   12504:	beq	12780 <create_monster_bottom_up@@Base+0x49c>
   12508:	mov	r1, r8
   1250c:	mov	r0, r4
   12510:	bl	146cc <flatcc_builder_end_buffer@@Base>
   12514:	mov	r0, #0
   12518:	add	sp, sp, #24
   1251c:	ldrd	r4, [sp]
   12520:	ldrd	r6, [sp, #8]
   12524:	ldrd	r8, [sp, #16]
   12528:	ldr	sl, [sp, #24]
   1252c:	add	sp, sp, #28
   12530:	pop	{pc}		; (ldr pc, [sp], #4)
   12534:	ldr	r1, [pc, #1128]	; 129a4 <create_monster_bottom_up@@Base+0x6c0>
   12538:	mov	r0, r4
   1253c:	add	r1, pc, r1
   12540:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12544:	ldr	r2, [pc, #1116]	; 129a8 <create_monster_bottom_up@@Base+0x6c4>
   12548:	mov	r3, #1
   1254c:	mvn	r1, #0
   12550:	add	ip, sp, #12
   12554:	mov	r9, r0
   12558:	mov	r0, r4
   1255c:	str	r3, [sp]
   12560:	str	r1, [sp, #4]
   12564:	mov	r1, ip
   12568:	add	r2, pc, r2
   1256c:	ldrh	lr, [r2, #124]	; 0x7c
   12570:	ldrd	r6, [r2, #116]	; 0x74
   12574:	mov	r2, #10
   12578:	strd	r6, [sp, #12]
   1257c:	strh	lr, [sp, #20]
   12580:	bl	1617c <flatcc_builder_create_vector@@Base>
   12584:	mov	r6, r0
   12588:	mov	r0, r4
   1258c:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   12590:	cmp	r8, #0
   12594:	moveq	sl, r8
   12598:	beq	124c4 <create_monster_bottom_up@@Base+0x1e0>
   1259c:	mov	r1, r8
   125a0:	mov	r0, r4
   125a4:	bl	14cf8 <flatcc_builder_offset_vector_push@@Base>
   125a8:	mov	sl, #0
   125ac:	b	124c4 <create_monster_bottom_up@@Base+0x1e0>
   125b0:	mov	r3, #0
   125b4:	mov	r0, r4
   125b8:	mov	r2, r3
   125bc:	mov	r1, r3
   125c0:	bl	145f0 <flatcc_builder_start_buffer@@Base>
   125c4:	cmp	r0, #0
   125c8:	bne	125d8 <create_monster_bottom_up@@Base+0x2f4>
   125cc:	mov	r1, #10
   125d0:	mov	r0, r4
   125d4:	bl	155c8 <flatcc_builder_start_table@@Base>
   125d8:	mov	r3, #4
   125dc:	mov	r2, #12
   125e0:	mov	r1, #0
   125e4:	mov	r0, r4
   125e8:	bl	170fc <flatcc_builder_table_add@@Base>
   125ec:	cmp	r0, #0
   125f0:	beq	12610 <create_monster_bottom_up@@Base+0x32c>
   125f4:	mov	r1, #1065353216	; 0x3f800000
   125f8:	mov	r2, #1073741824	; 0x40000000
   125fc:	mov	r3, #0
   12600:	movt	r3, #16448	; 0x4040
   12604:	str	r1, [r0]
   12608:	str	r2, [r0, #4]
   1260c:	str	r3, [r0, #8]
   12610:	mov	r3, #2
   12614:	mov	r0, r4
   12618:	mov	r2, r3
   1261c:	mov	r1, r3
   12620:	bl	170fc <flatcc_builder_table_add@@Base>
   12624:	cmp	r0, #0
   12628:	movne	r3, #300	; 0x12c
   1262c:	strhne	r3, [r0]
   12630:	cmp	r9, #0
   12634:	beq	1264c <create_monster_bottom_up@@Base+0x368>
   12638:	mov	r1, #3
   1263c:	mov	r0, r4
   12640:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12644:	cmp	r0, #0
   12648:	strne	r9, [r0]
   1264c:	cmp	r6, #0
   12650:	beq	12668 <create_monster_bottom_up@@Base+0x384>
   12654:	mov	r1, #5
   12658:	mov	r0, r4
   1265c:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12660:	cmp	r0, #0
   12664:	strne	r6, [r0]
   12668:	mov	r3, #1
   1266c:	mov	r1, #6
   12670:	mov	r2, r3
   12674:	mov	r0, r4
   12678:	bl	170fc <flatcc_builder_table_add@@Base>
   1267c:	cmp	r0, #0
   12680:	movne	r3, #0
   12684:	strbne	r3, [r0]
   12688:	cmp	r7, #0
   1268c:	beq	126a4 <create_monster_bottom_up@@Base+0x3c0>
   12690:	mov	r1, #7
   12694:	mov	r0, r4
   12698:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   1269c:	cmp	r0, #0
   126a0:	strne	r7, [r0]
   126a4:	cmp	sl, #0
   126a8:	beq	126e8 <create_monster_bottom_up@@Base+0x404>
   126ac:	mov	r3, #1
   126b0:	mov	r1, #8
   126b4:	mov	r2, r3
   126b8:	mov	r0, r4
   126bc:	bl	170fc <flatcc_builder_table_add@@Base>
   126c0:	subs	r5, r0, #0
   126c4:	beq	126e8 <create_monster_bottom_up@@Base+0x404>
   126c8:	mov	r1, #9
   126cc:	mov	r0, r4
   126d0:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   126d4:	cmp	r0, #0
   126d8:	beq	126e8 <create_monster_bottom_up@@Base+0x404>
   126dc:	mov	r3, #1
   126e0:	strb	r3, [r5]
   126e4:	str	sl, [r0]
   126e8:	ldr	r1, [pc, #700]	; 129ac <create_monster_bottom_up@@Base+0x6c8>
   126ec:	mov	r2, #0
   126f0:	mov	r0, r4
   126f4:	add	r1, pc, r1
   126f8:	add	r1, r1, #128	; 0x80
   126fc:	bl	15f00 <flatcc_builder_check_required@@Base>
   12700:	cmp	r0, #0
   12704:	beq	1298c <create_monster_bottom_up@@Base+0x6a8>
   12708:	mov	r0, r4
   1270c:	bl	15fac <flatcc_builder_end_table@@Base>
   12710:	mov	r1, r0
   12714:	mov	r0, r4
   12718:	bl	146cc <flatcc_builder_end_buffer@@Base>
   1271c:	b	12514 <create_monster_bottom_up@@Base+0x230>
   12720:	mov	r1, #2
   12724:	mov	r0, r4
   12728:	bl	155c8 <flatcc_builder_start_table@@Base>
   1272c:	adds	sl, r7, #0
   12730:	movne	sl, #1
   12734:	cmp	r0, #0
   12738:	movne	sl, #0
   1273c:	cmp	sl, #0
   12740:	beq	128c8 <create_monster_bottom_up@@Base+0x5e4>
   12744:	mov	r1, #0
   12748:	mov	r0, r4
   1274c:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12750:	subs	sl, r0, #0
   12754:	beq	12928 <create_monster_bottom_up@@Base+0x644>
   12758:	mov	r3, #2
   1275c:	mov	r1, #1
   12760:	str	r7, [sl]
   12764:	mov	r2, r3
   12768:	mov	r0, r4
   1276c:	bl	170fc <flatcc_builder_table_add@@Base>
   12770:	subs	sl, r0, #0
   12774:	beq	12948 <create_monster_bottom_up@@Base+0x664>
   12778:	mov	r8, #0
   1277c:	b	12414 <create_monster_bottom_up@@Base+0x130>
   12780:	mov	r1, r5
   12784:	mov	r3, #4
   12788:	mov	r2, #12
   1278c:	mov	r0, r4
   12790:	bl	170fc <flatcc_builder_table_add@@Base>
   12794:	cmp	r0, #0
   12798:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   1279c:	mov	r1, #1065353216	; 0x3f800000
   127a0:	mov	r2, #1073741824	; 0x40000000
   127a4:	mov	r3, #0
   127a8:	movt	r3, #16448	; 0x4040
   127ac:	cmp	r9, #0
   127b0:	str	r1, [r0]
   127b4:	str	r2, [r0, #4]
   127b8:	str	r3, [r0, #8]
   127bc:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   127c0:	mov	r1, #3
   127c4:	mov	r0, r4
   127c8:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   127cc:	cmp	r0, #0
   127d0:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   127d4:	cmp	r6, #0
   127d8:	str	r9, [r0]
   127dc:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   127e0:	mov	r1, #5
   127e4:	mov	r0, r4
   127e8:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   127ec:	cmp	r0, #0
   127f0:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   127f4:	cmp	r7, #0
   127f8:	str	r6, [r0]
   127fc:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   12800:	mov	r1, #7
   12804:	mov	r0, r4
   12808:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   1280c:	cmp	r0, #0
   12810:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   12814:	mov	r1, #9
   12818:	str	r7, [r0]
   1281c:	mov	r0, r4
   12820:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12824:	subs	r2, r0, #0
   12828:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   1282c:	mov	r3, #2
   12830:	mov	r0, r4
   12834:	str	sl, [r2]
   12838:	mov	r1, r3
   1283c:	mov	r2, r3
   12840:	bl	170fc <flatcc_builder_table_add@@Base>
   12844:	cmp	r0, #0
   12848:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   1284c:	mov	ip, #300	; 0x12c
   12850:	mov	r3, #1
   12854:	mov	r2, r3
   12858:	mov	r1, #6
   1285c:	strh	ip, [r0]
   12860:	mov	r0, r4
   12864:	bl	170fc <flatcc_builder_table_add@@Base>
   12868:	cmp	r0, #0
   1286c:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   12870:	mov	r3, #1
   12874:	mov	r1, #8
   12878:	strb	r5, [r0]
   1287c:	mov	r2, r3
   12880:	mov	r0, r4
   12884:	bl	170fc <flatcc_builder_table_add@@Base>
   12888:	subs	r3, r0, #0
   1288c:	beq	12508 <create_monster_bottom_up@@Base+0x224>
   12890:	ldr	r1, [pc, #280]	; 129b0 <create_monster_bottom_up@@Base+0x6cc>
   12894:	mov	ip, #1
   12898:	mov	r2, r5
   1289c:	mov	r0, r4
   128a0:	strb	ip, [r3]
   128a4:	add	r1, pc, r1
   128a8:	add	r1, r1, #128	; 0x80
   128ac:	bl	15f00 <flatcc_builder_check_required@@Base>
   128b0:	cmp	r0, r5
   128b4:	beq	1298c <create_monster_bottom_up@@Base+0x6a8>
   128b8:	mov	r0, r4
   128bc:	bl	15fac <flatcc_builder_end_table@@Base>
   128c0:	mov	r8, r0
   128c4:	b	12508 <create_monster_bottom_up@@Base+0x224>
   128c8:	ldr	r1, [pc, #228]	; 129b4 <create_monster_bottom_up@@Base+0x6d0>
   128cc:	mov	r0, r4
   128d0:	add	r1, pc, r1
   128d4:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   128d8:	ldr	r2, [pc, #216]	; 129b8 <create_monster_bottom_up@@Base+0x6d4>
   128dc:	mov	r9, r0
   128e0:	add	r2, pc, r2
   128e4:	ldrh	lr, [r2, #124]	; 0x7c
   128e8:	mov	r3, #1
   128ec:	mvn	r1, #0
   128f0:	add	ip, sp, #12
   128f4:	mov	r0, r4
   128f8:	ldrd	r6, [r2, #116]	; 0x74
   128fc:	mov	r2, #10
   12900:	str	r3, [sp]
   12904:	str	r1, [sp, #4]
   12908:	mov	r1, ip
   1290c:	strd	r6, [sp, #12]
   12910:	strh	lr, [sp, #20]
   12914:	bl	1617c <flatcc_builder_create_vector@@Base>
   12918:	mov	r6, r0
   1291c:	mov	r0, r4
   12920:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   12924:	b	124c4 <create_monster_bottom_up@@Base+0x1e0>
   12928:	ldr	r1, [pc, #140]	; 129bc <create_monster_bottom_up@@Base+0x6d8>
   1292c:	mov	r0, r4
   12930:	add	r1, pc, r1
   12934:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12938:	ldr	r2, [pc, #128]	; 129c0 <create_monster_bottom_up@@Base+0x6dc>
   1293c:	mov	r9, r0
   12940:	add	r2, pc, r2
   12944:	b	128e4 <create_monster_bottom_up@@Base+0x600>
   12948:	ldr	r1, [pc, #116]	; 129c4 <create_monster_bottom_up@@Base+0x6e0>
   1294c:	mov	r0, r4
   12950:	add	r1, pc, r1
   12954:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12958:	ldr	r2, [pc, #104]	; 129c8 <create_monster_bottom_up@@Base+0x6e4>
   1295c:	mov	r9, r0
   12960:	add	r2, pc, r2
   12964:	b	128e4 <create_monster_bottom_up@@Base+0x600>
   12968:	ldr	r3, [pc, #92]	; 129cc <create_monster_bottom_up@@Base+0x6e8>
   1296c:	mov	r2, #52	; 0x34
   12970:	ldr	r1, [pc, #88]	; 129d0 <create_monster_bottom_up@@Base+0x6ec>
   12974:	ldr	r0, [pc, #88]	; 129d4 <create_monster_bottom_up@@Base+0x6f0>
   12978:	add	r3, pc, r3
   1297c:	add	r3, r3, #88	; 0x58
   12980:	add	r1, pc, r1
   12984:	add	r0, pc, r0
   12988:	bl	11fd4 <__assert_fail@plt>
   1298c:	bl	122ac <_start@@Base+0x15c>
   12990:	andeq	r6, r0, r4, lsl #2
   12994:	strdeq	r6, [r0], -r8
   12998:	andeq	r5, r0, r0, lsr #28
   1299c:	muleq	r0, r0, sp
   129a0:	andeq	r6, r0, r4, rrx
   129a4:	andeq	r5, r0, r8, ror pc
   129a8:	andeq	r5, r0, r0, asr ip
   129ac:	andeq	r5, r0, r4, asr #21
   129b0:	andeq	r5, r0, r4, lsl r9
   129b4:	andeq	r5, r0, r4, ror #23
   129b8:	ldrdeq	r5, [r0], -r8
   129bc:	andeq	r5, r0, r4, lsl #23
   129c0:	andeq	r5, r0, r8, ror r8
   129c4:	andeq	r5, r0, r4, ror #22
   129c8:	andeq	r5, r0, r8, asr r8
   129cc:	andeq	r5, r0, r0, asr #16
   129d0:	andeq	r5, r0, r8, ror r9
   129d4:	muleq	r0, r4, sl

000129d8 <create_monster_top_down@@Base>:
   129d8:	ldr	ip, [pc, #892]	; 12d5c <create_monster_top_down@@Base+0x384>
   129dc:	mov	r3, #0
   129e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   129e4:	mov	r2, r3
   129e8:	mov	r1, r3
   129ec:	strd	r6, [sp, #8]
   129f0:	mov	r4, r0
   129f4:	str	lr, [sp, #16]
   129f8:	sub	sp, sp, #28
   129fc:	add	r5, sp, #12
   12a00:	add	ip, pc, ip
   12a04:	ldrd	r6, [ip, #116]	; 0x74
   12a08:	ldrh	ip, [ip, #124]	; 0x7c
   12a0c:	strd	r6, [sp, #12]
   12a10:	strh	ip, [r5, #8]
   12a14:	bl	145f0 <flatcc_builder_start_buffer@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12a2c <create_monster_top_down@@Base+0x54>
   12a20:	mov	r1, #10
   12a24:	mov	r0, r4
   12a28:	bl	155c8 <flatcc_builder_start_table@@Base>
   12a2c:	mov	r3, #4
   12a30:	mov	r2, #12
   12a34:	mov	r1, #0
   12a38:	mov	r0, r4
   12a3c:	bl	170fc <flatcc_builder_table_add@@Base>
   12a40:	cmp	r0, #0
   12a44:	beq	12a64 <create_monster_top_down@@Base+0x8c>
   12a48:	mov	r1, #1065353216	; 0x3f800000
   12a4c:	mov	r2, #1073741824	; 0x40000000
   12a50:	mov	r3, #0
   12a54:	movt	r3, #16448	; 0x4040
   12a58:	str	r1, [r0]
   12a5c:	str	r2, [r0, #4]
   12a60:	str	r3, [r0, #8]
   12a64:	mov	r3, #2
   12a68:	mov	r0, r4
   12a6c:	mov	r1, r3
   12a70:	mov	r2, r3
   12a74:	bl	170fc <flatcc_builder_table_add@@Base>
   12a78:	ldr	r1, [pc, #736]	; 12d60 <create_monster_top_down@@Base+0x388>
   12a7c:	cmp	r0, #0
   12a80:	movne	r3, #300	; 0x12c
   12a84:	strhne	r3, [r0]
   12a88:	mov	r0, r4
   12a8c:	add	r1, pc, r1
   12a90:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12a94:	subs	r6, r0, #0
   12a98:	beq	12ab0 <create_monster_top_down@@Base+0xd8>
   12a9c:	mov	r1, #3
   12aa0:	mov	r0, r4
   12aa4:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12aa8:	cmp	r0, #0
   12aac:	strne	r6, [r0]
   12ab0:	mov	r2, #1
   12ab4:	mvn	ip, #0
   12ab8:	mov	r1, r5
   12abc:	mov	r3, r2
   12ac0:	mov	r0, r4
   12ac4:	stm	sp, {r2, ip}
   12ac8:	mov	r2, #10
   12acc:	bl	1617c <flatcc_builder_create_vector@@Base>
   12ad0:	subs	r5, r0, #0
   12ad4:	beq	12aec <create_monster_top_down@@Base+0x114>
   12ad8:	mov	r1, #5
   12adc:	mov	r0, r4
   12ae0:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12ae4:	cmp	r0, #0
   12ae8:	strne	r5, [r0]
   12aec:	mov	r3, #1
   12af0:	mov	r1, #6
   12af4:	mov	r2, r3
   12af8:	mov	r0, r4
   12afc:	bl	170fc <flatcc_builder_table_add@@Base>
   12b00:	cmp	r0, #0
   12b04:	movne	r3, #0
   12b08:	strbne	r3, [r0]
   12b0c:	mov	r0, r4
   12b10:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   12b14:	ldr	r1, [pc, #584]	; 12d64 <create_monster_top_down@@Base+0x38c>
   12b18:	mov	r0, r4
   12b1c:	add	r1, pc, r1
   12b20:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12b24:	mov	r5, r0
   12b28:	mov	r1, #2
   12b2c:	mov	r0, r4
   12b30:	bl	155c8 <flatcc_builder_start_table@@Base>
   12b34:	clz	r0, r0
   12b38:	cmp	r5, #0
   12b3c:	lsr	r0, r0, #5
   12b40:	moveq	r0, #0
   12b44:	cmp	r0, #0
   12b48:	beq	12bc0 <create_monster_top_down@@Base+0x1e8>
   12b4c:	mov	r1, #0
   12b50:	mov	r0, r4
   12b54:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12b58:	cmp	r0, #0
   12b5c:	beq	12bc0 <create_monster_top_down@@Base+0x1e8>
   12b60:	mov	r3, #2
   12b64:	mov	r1, #1
   12b68:	str	r5, [r0]
   12b6c:	mov	r2, r3
   12b70:	mov	r0, r4
   12b74:	bl	170fc <flatcc_builder_table_add@@Base>
   12b78:	subs	r3, r0, #0
   12b7c:	beq	12bc0 <create_monster_top_down@@Base+0x1e8>
   12b80:	ldr	r1, [pc, #480]	; 12d68 <create_monster_top_down@@Base+0x390>
   12b84:	mov	ip, #3
   12b88:	mov	r2, #0
   12b8c:	mov	r0, r4
   12b90:	strh	ip, [r3]
   12b94:	add	r1, pc, r1
   12b98:	add	r1, r1, #84	; 0x54
   12b9c:	bl	15f00 <flatcc_builder_check_required@@Base>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12d28 <create_monster_top_down@@Base+0x350>
   12ba8:	mov	r0, r4
   12bac:	bl	15fac <flatcc_builder_end_table@@Base>
   12bb0:	subs	r1, r0, #0
   12bb4:	beq	12bc0 <create_monster_top_down@@Base+0x1e8>
   12bb8:	mov	r0, r4
   12bbc:	bl	14cf8 <flatcc_builder_offset_vector_push@@Base>
   12bc0:	ldr	r1, [pc, #420]	; 12d6c <create_monster_top_down@@Base+0x394>
   12bc4:	mov	r0, r4
   12bc8:	add	r1, pc, r1
   12bcc:	bl	16f30 <flatcc_builder_create_string_str@@Base>
   12bd0:	mov	r5, r0
   12bd4:	mov	r1, #2
   12bd8:	mov	r0, r4
   12bdc:	bl	155c8 <flatcc_builder_start_table@@Base>
   12be0:	adds	r3, r5, #0
   12be4:	movne	r3, #1
   12be8:	cmp	r0, #0
   12bec:	moveq	r0, r3
   12bf0:	movne	r0, #0
   12bf4:	cmp	r0, #0
   12bf8:	beq	12d50 <create_monster_top_down@@Base+0x378>
   12bfc:	mov	r1, #0
   12c00:	mov	r0, r4
   12c04:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12c08:	cmp	r0, #0
   12c0c:	beq	12d50 <create_monster_top_down@@Base+0x378>
   12c10:	mov	r3, #2
   12c14:	mov	r1, #1
   12c18:	str	r5, [r0]
   12c1c:	mov	r2, r3
   12c20:	mov	r0, r4
   12c24:	bl	170fc <flatcc_builder_table_add@@Base>
   12c28:	subs	r3, r0, #0
   12c2c:	beq	12d50 <create_monster_top_down@@Base+0x378>
   12c30:	ldr	r1, [pc, #312]	; 12d70 <create_monster_top_down@@Base+0x398>
   12c34:	mov	ip, #5
   12c38:	mov	r2, #0
   12c3c:	mov	r0, r4
   12c40:	strh	ip, [r3]
   12c44:	add	r1, pc, r1
   12c48:	add	r1, r1, #84	; 0x54
   12c4c:	bl	15f00 <flatcc_builder_check_required@@Base>
   12c50:	cmp	r0, #0
   12c54:	beq	12d28 <create_monster_top_down@@Base+0x350>
   12c58:	mov	r0, r4
   12c5c:	bl	15fac <flatcc_builder_end_table@@Base>
   12c60:	subs	r1, r0, #0
   12c64:	beq	12d50 <create_monster_top_down@@Base+0x378>
   12c68:	mov	r0, r4
   12c6c:	bl	14cf8 <flatcc_builder_offset_vector_push@@Base>
   12c70:	ldr	r5, [r0]
   12c74:	mov	r0, r4
   12c78:	bl	16430 <flatcc_builder_end_offset_vector@@Base>
   12c7c:	subs	r6, r0, #0
   12c80:	beq	12c98 <create_monster_top_down@@Base+0x2c0>
   12c84:	mov	r1, #7
   12c88:	mov	r0, r4
   12c8c:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12c90:	cmp	r0, #0
   12c94:	strne	r6, [r0]
   12c98:	cmp	r5, #0
   12c9c:	beq	12cdc <create_monster_top_down@@Base+0x304>
   12ca0:	mov	r3, #1
   12ca4:	mov	r1, #8
   12ca8:	mov	r2, r3
   12cac:	mov	r0, r4
   12cb0:	bl	170fc <flatcc_builder_table_add@@Base>
   12cb4:	subs	r6, r0, #0
   12cb8:	beq	12cdc <create_monster_top_down@@Base+0x304>
   12cbc:	mov	r1, #9
   12cc0:	mov	r0, r4
   12cc4:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cdc <create_monster_top_down@@Base+0x304>
   12cd0:	mov	r3, #1
   12cd4:	strb	r3, [r6]
   12cd8:	str	r5, [r0]
   12cdc:	ldr	r1, [pc, #144]	; 12d74 <create_monster_top_down@@Base+0x39c>
   12ce0:	mov	r2, #0
   12ce4:	mov	r0, r4
   12ce8:	add	r1, pc, r1
   12cec:	add	r1, r1, #128	; 0x80
   12cf0:	bl	15f00 <flatcc_builder_check_required@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d4c <create_monster_top_down@@Base+0x374>
   12cfc:	mov	r0, r4
   12d00:	bl	15fac <flatcc_builder_end_table@@Base>
   12d04:	mov	r1, r0
   12d08:	mov	r0, r4
   12d0c:	bl	146cc <flatcc_builder_end_buffer@@Base>
   12d10:	mov	r0, #0
   12d14:	add	sp, sp, #28
   12d18:	ldrd	r4, [sp]
   12d1c:	ldrd	r6, [sp, #8]
   12d20:	add	sp, sp, #16
   12d24:	pop	{pc}		; (ldr pc, [sp], #4)
   12d28:	ldr	r3, [pc, #72]	; 12d78 <create_monster_top_down@@Base+0x3a0>
   12d2c:	mov	r2, #52	; 0x34
   12d30:	ldr	r1, [pc, #68]	; 12d7c <create_monster_top_down@@Base+0x3a4>
   12d34:	ldr	r0, [pc, #68]	; 12d80 <create_monster_top_down@@Base+0x3a8>
   12d38:	add	r3, pc, r3
   12d3c:	add	r3, r3, #88	; 0x58
   12d40:	add	r1, pc, r1
   12d44:	add	r0, pc, r0
   12d48:	bl	11fd4 <__assert_fail@plt>
   12d4c:	bl	122ac <_start@@Base+0x15c>
   12d50:	mov	r3, #0
   12d54:	ldr	r3, [r3]
   12d58:	udf	#0
   12d5c:			; <UNDEFINED> instruction: 0x000057b8
   12d60:	andeq	r5, r0, r8, lsr #20
   12d64:	strdeq	r5, [r0], -r0
   12d68:	andeq	r5, r0, r4, lsr #12
   12d6c:	andeq	r5, r0, ip, asr #16
   12d70:	andeq	r5, r0, r4, ror r5
   12d74:	ldrdeq	r5, [r0], -r0
   12d78:	andeq	r5, r0, r0, lsl #9
   12d7c:			; <UNDEFINED> instruction: 0x000055b8
   12d80:	ldrdeq	r5, [r0], -r4

00012d84 <access_monster_buffer@@Base>:
   12d84:	cmp	r0, #0
   12d88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d8c:	strd	r6, [sp, #8]
   12d90:	str	r8, [sp, #16]
   12d94:	str	lr, [sp, #20]
   12d98:	beq	12e60 <access_monster_buffer@@Base+0xdc>
   12d9c:	ldr	r3, [r0]
   12da0:	adds	r6, r0, r3
   12da4:	beq	12e60 <access_monster_buffer@@Base+0xdc>
   12da8:	ldr	r4, [r0, r3]
   12dac:	sub	r4, r6, r4
   12db0:	ldrh	r5, [r4]
   12db4:	cmp	r5, #9
   12db8:	bls	1309c <access_monster_buffer@@Base+0x318>
   12dbc:	ldrh	r3, [r4, #8]
   12dc0:	cmp	r3, #0
   12dc4:	moveq	r1, #100	; 0x64
   12dc8:	ldrshne	r1, [r6, r3]
   12dcc:	ldrh	r7, [r4, #6]
   12dd0:	cmp	r7, #0
   12dd4:	beq	13120 <access_monster_buffer@@Base+0x39c>
   12dd8:	ldrsh	r2, [r6, r7]
   12ddc:	cmp	r5, #11
   12de0:	bls	13454 <access_monster_buffer@@Base+0x6d0>
   12de4:	ldrh	r0, [r4, #10]
   12de8:	cmp	r0, #0
   12dec:	beq	130f4 <access_monster_buffer@@Base+0x370>
   12df0:	ldr	r3, [r6, r0]
   12df4:	add	r0, r6, r0
   12df8:	add	r3, r3, #4
   12dfc:	adds	r0, r0, r3
   12e00:	beq	130f4 <access_monster_buffer@@Base+0x370>
   12e04:	ldr	r8, [r0, #-4]
   12e08:	cmp	r1, #300	; 0x12c
   12e0c:	bne	130a4 <access_monster_buffer@@Base+0x320>
   12e10:	cmp	r2, #150	; 0x96
   12e14:	bne	13220 <access_monster_buffer@@Base+0x49c>
   12e18:	ldr	r1, [pc, #1144]	; 13298 <access_monster_buffer@@Base+0x514>
   12e1c:	add	r1, pc, r1
   12e20:	bl	11f2c <strcmp@plt>
   12e24:	cmp	r0, #0
   12e28:	bne	13268 <access_monster_buffer@@Base+0x4e4>
   12e2c:	cmp	r8, #3
   12e30:	bne	13244 <access_monster_buffer@@Base+0x4c0>
   12e34:	cmp	r5, #9
   12e38:	bhi	12e84 <access_monster_buffer@@Base+0x100>
   12e3c:	ldr	r3, [pc, #1112]	; 1329c <access_monster_buffer@@Base+0x518>
   12e40:	mov	r2, #227	; 0xe3
   12e44:	ldr	r1, [pc, #1108]	; 132a0 <access_monster_buffer@@Base+0x51c>
   12e48:	ldr	r0, [pc, #1108]	; 132a4 <access_monster_buffer@@Base+0x520>
   12e4c:	add	r3, pc, r3
   12e50:	add	r3, r3, #132	; 0x84
   12e54:	add	r1, pc, r1
   12e58:	add	r0, pc, r0
   12e5c:	bl	11fd4 <__assert_fail@plt>
   12e60:	ldr	r3, [pc, #1088]	; 132a8 <access_monster_buffer@@Base+0x524>
   12e64:	mov	r2, #211	; 0xd3
   12e68:	ldr	r1, [pc, #1084]	; 132ac <access_monster_buffer@@Base+0x528>
   12e6c:	ldr	r0, [pc, #1084]	; 132b0 <access_monster_buffer@@Base+0x52c>
   12e70:	add	r3, pc, r3
   12e74:	add	r3, r3, #132	; 0x84
   12e78:	add	r1, pc, r1
   12e7c:	add	r0, pc, r0
   12e80:	bl	11fd4 <__assert_fail@plt>
   12e84:	ldrh	r3, [r4, #8]
   12e88:	cmp	r3, #0
   12e8c:	beq	12e3c <access_monster_buffer@@Base+0xb8>
   12e90:	cmp	r7, #0
   12e94:	bne	13190 <access_monster_buffer@@Base+0x40c>
   12e98:	ldrh	r3, [r4, #4]
   12e9c:	cmp	r3, #0
   12ea0:	beq	131b4 <access_monster_buffer@@Base+0x430>
   12ea4:	adds	r3, r6, r3
   12ea8:	beq	131b4 <access_monster_buffer@@Base+0x430>
   12eac:	vldr	s15, [pc, #984]	; 1328c <access_monster_buffer@@Base+0x508>
   12eb0:	vldr	s12, [r3]
   12eb4:	vldr	s13, [r3, #4]
   12eb8:	vldr	s14, [r3, #8]
   12ebc:	vcmp.f32	s12, s15
   12ec0:	vmrs	APSR_nzcv, fpscr
   12ec4:	bne	131d8 <access_monster_buffer@@Base+0x454>
   12ec8:	vldr	s15, [pc, #960]	; 13290 <access_monster_buffer@@Base+0x50c>
   12ecc:	vcmp.f32	s13, s15
   12ed0:	vmrs	APSR_nzcv, fpscr
   12ed4:	bne	131fc <access_monster_buffer@@Base+0x478>
   12ed8:	vldr	s15, [pc, #948]	; 13294 <access_monster_buffer@@Base+0x510>
   12edc:	vcmp.f32	s14, s15
   12ee0:	vmrs	APSR_nzcv, fpscr
   12ee4:	bne	1338c <access_monster_buffer@@Base+0x608>
   12ee8:	cmp	r5, #15
   12eec:	bls	133b0 <access_monster_buffer@@Base+0x62c>
   12ef0:	ldrh	r3, [r4, #14]
   12ef4:	cmp	r3, #0
   12ef8:	beq	133b0 <access_monster_buffer@@Base+0x62c>
   12efc:	ldr	r2, [r6, r3]
   12f00:	add	r3, r6, r3
   12f04:	add	r2, r2, #4
   12f08:	adds	r3, r3, r2
   12f0c:	beq	133b0 <access_monster_buffer@@Base+0x62c>
   12f10:	ldr	r2, [r3, #-4]
   12f14:	cmp	r2, #10
   12f18:	bne	133d4 <access_monster_buffer@@Base+0x650>
   12f1c:	ldrb	r3, [r3, #2]
   12f20:	cmp	r3, #2
   12f24:	bne	133f8 <access_monster_buffer@@Base+0x674>
   12f28:	cmp	r5, #19
   12f2c:	bls	130fc <access_monster_buffer@@Base+0x378>
   12f30:	ldrh	r3, [r4, #18]
   12f34:	cmp	r3, #0
   12f38:	beq	130fc <access_monster_buffer@@Base+0x378>
   12f3c:	ldr	r2, [r6, r3]
   12f40:	add	r3, r6, r3
   12f44:	add	r2, r2, #4
   12f48:	adds	r3, r3, r2
   12f4c:	beq	130fc <access_monster_buffer@@Base+0x378>
   12f50:	ldr	r2, [r3, #-4]
   12f54:	cmp	r2, #2
   12f58:	bne	130fc <access_monster_buffer@@Base+0x378>
   12f5c:	ldr	r2, [r3, #4]
   12f60:	add	r2, r2, #4
   12f64:	adds	r1, r3, r2
   12f68:	beq	1314c <access_monster_buffer@@Base+0x3c8>
   12f6c:	ldr	r3, [r3, r2]
   12f70:	sub	r3, r1, r3
   12f74:	ldrh	r2, [r3]
   12f78:	cmp	r2, #5
   12f7c:	bls	13128 <access_monster_buffer@@Base+0x3a4>
   12f80:	ldrh	r0, [r3, #4]
   12f84:	cmp	r0, #0
   12f88:	beq	13128 <access_monster_buffer@@Base+0x3a4>
   12f8c:	ldr	ip, [r1, r0]
   12f90:	cmp	r2, #7
   12f94:	add	r0, r1, r0
   12f98:	movls	r7, #0
   12f9c:	add	r2, ip, #4
   12fa0:	add	r0, r0, r2
   12fa4:	bls	12fb4 <access_monster_buffer@@Base+0x230>
   12fa8:	ldrh	r7, [r3, #6]
   12fac:	cmp	r7, #0
   12fb0:	ldrshne	r7, [r1, r7]
   12fb4:	cmp	r0, #0
   12fb8:	beq	13128 <access_monster_buffer@@Base+0x3a4>
   12fbc:	ldr	r1, [pc, #752]	; 132b4 <access_monster_buffer@@Base+0x530>
   12fc0:	add	r1, pc, r1
   12fc4:	bl	11f2c <strcmp@plt>
   12fc8:	cmp	r0, #0
   12fcc:	bne	13128 <access_monster_buffer@@Base+0x3a4>
   12fd0:	cmp	r7, #5
   12fd4:	bne	1341c <access_monster_buffer@@Base+0x698>
   12fd8:	cmp	r5, #21
   12fdc:	bls	130dc <access_monster_buffer@@Base+0x358>
   12fe0:	ldrh	r3, [r4, #20]
   12fe4:	cmp	r3, #0
   12fe8:	beq	130dc <access_monster_buffer@@Base+0x358>
   12fec:	ldrb	r3, [r6, r3]
   12ff0:	cmp	r3, #1
   12ff4:	bne	130dc <access_monster_buffer@@Base+0x358>
   12ff8:	cmp	r5, #23
   12ffc:	bls	1314c <access_monster_buffer@@Base+0x3c8>
   13000:	ldrh	r3, [r4, #22]
   13004:	cmp	r3, #0
   13008:	beq	1314c <access_monster_buffer@@Base+0x3c8>
   1300c:	ldr	r2, [r6, r3]
   13010:	add	r6, r6, r3
   13014:	adds	r7, r6, r2
   13018:	beq	1314c <access_monster_buffer@@Base+0x3c8>
   1301c:	ldr	r4, [r6, r2]
   13020:	sub	r4, r7, r4
   13024:	ldrh	r5, [r4]
   13028:	cmp	r5, #5
   1302c:	bls	13150 <access_monster_buffer@@Base+0x3cc>
   13030:	ldrh	r0, [r4, #4]
   13034:	cmp	r0, #0
   13038:	beq	1304c <access_monster_buffer@@Base+0x2c8>
   1303c:	ldr	r3, [r7, r0]
   13040:	add	r0, r7, r0
   13044:	add	r3, r3, #4
   13048:	add	r0, r0, r3
   1304c:	ldr	r1, [pc, #612]	; 132b8 <access_monster_buffer@@Base+0x534>
   13050:	add	r1, pc, r1
   13054:	bl	11f2c <strcmp@plt>
   13058:	cmp	r5, #7
   1305c:	mov	r3, r0
   13060:	bls	13164 <access_monster_buffer@@Base+0x3e0>
   13064:	ldrh	r3, [r4, #6]
   13068:	cmp	r3, #0
   1306c:	bne	130c8 <access_monster_buffer@@Base+0x344>
   13070:	cmp	r0, #0
   13074:	bne	1316c <access_monster_buffer@@Base+0x3e8>
   13078:	ldr	r3, [pc, #572]	; 132bc <access_monster_buffer@@Base+0x538>
   1307c:	movw	r2, #287	; 0x11f
   13080:	ldr	r1, [pc, #568]	; 132c0 <access_monster_buffer@@Base+0x53c>
   13084:	ldr	r0, [pc, #568]	; 132c4 <access_monster_buffer@@Base+0x540>
   13088:	add	r3, pc, r3
   1308c:	add	r3, r3, #132	; 0x84
   13090:	add	r1, pc, r1
   13094:	add	r0, pc, r0
   13098:	bl	11fd4 <__assert_fail@plt>
   1309c:	cmp	r5, #7
   130a0:	bhi	13440 <access_monster_buffer@@Base+0x6bc>
   130a4:	ldr	r3, [pc, #540]	; 132c8 <access_monster_buffer@@Base+0x544>
   130a8:	mov	r2, #219	; 0xdb
   130ac:	ldr	r1, [pc, #536]	; 132cc <access_monster_buffer@@Base+0x548>
   130b0:	ldr	r0, [pc, #536]	; 132d0 <access_monster_buffer@@Base+0x54c>
   130b4:	add	r3, pc, r3
   130b8:	add	r3, r3, #132	; 0x84
   130bc:	add	r1, pc, r1
   130c0:	add	r0, pc, r0
   130c4:	bl	11fd4 <__assert_fail@plt>
   130c8:	cmp	r0, #0
   130cc:	ldrsh	r3, [r7, r3]
   130d0:	bne	1316c <access_monster_buffer@@Base+0x3e8>
   130d4:	cmp	r3, #5
   130d8:	bne	13078 <access_monster_buffer@@Base+0x2f4>
   130dc:	ldrd	r4, [sp]
   130e0:	mov	r0, #0
   130e4:	ldrd	r6, [sp, #8]
   130e8:	ldr	r8, [sp, #16]
   130ec:	add	sp, sp, #20
   130f0:	pop	{pc}		; (ldr pc, [sp], #4)
   130f4:	mov	r8, r0
   130f8:	b	12e08 <access_monster_buffer@@Base+0x84>
   130fc:	ldr	r3, [pc, #464]	; 132d4 <access_monster_buffer@@Base+0x550>
   13100:	movw	r2, #271	; 0x10f
   13104:	ldr	r1, [pc, #460]	; 132d8 <access_monster_buffer@@Base+0x554>
   13108:	ldr	r0, [pc, #460]	; 132dc <access_monster_buffer@@Base+0x558>
   1310c:	add	r3, pc, r3
   13110:	add	r3, r3, #132	; 0x84
   13114:	add	r1, pc, r1
   13118:	add	r0, pc, r0
   1311c:	bl	11fd4 <__assert_fail@plt>
   13120:	mov	r2, #150	; 0x96
   13124:	b	12ddc <access_monster_buffer@@Base+0x58>
   13128:	ldr	r3, [pc, #432]	; 132e0 <access_monster_buffer@@Base+0x55c>
   1312c:	movw	r2, #275	; 0x113
   13130:	ldr	r1, [pc, #428]	; 132e4 <access_monster_buffer@@Base+0x560>
   13134:	ldr	r0, [pc, #428]	; 132e8 <access_monster_buffer@@Base+0x564>
   13138:	add	r3, pc, r3
   1313c:	add	r3, r3, #132	; 0x84
   13140:	add	r1, pc, r1
   13144:	add	r0, pc, r0
   13148:	bl	11fd4 <__assert_fail@plt>
   1314c:	bl	12240 <_start@@Base+0xf0>
   13150:	ldr	r1, [pc, #404]	; 132ec <access_monster_buffer@@Base+0x568>
   13154:	mov	r0, #0
   13158:	add	r1, pc, r1
   1315c:	bl	11f2c <strcmp@plt>
   13160:	mov	r3, r0
   13164:	cmp	r3, #0
   13168:	beq	13078 <access_monster_buffer@@Base+0x2f4>
   1316c:	ldr	r3, [pc, #380]	; 132f0 <access_monster_buffer@@Base+0x56c>
   13170:	movw	r2, #286	; 0x11e
   13174:	ldr	r1, [pc, #376]	; 132f4 <access_monster_buffer@@Base+0x570>
   13178:	ldr	r0, [pc, #376]	; 132f8 <access_monster_buffer@@Base+0x574>
   1317c:	add	r3, pc, r3
   13180:	add	r3, r3, #132	; 0x84
   13184:	add	r1, pc, r1
   13188:	add	r0, pc, r0
   1318c:	bl	11fd4 <__assert_fail@plt>
   13190:	ldr	r3, [pc, #356]	; 132fc <access_monster_buffer@@Base+0x578>
   13194:	mov	r2, #228	; 0xe4
   13198:	ldr	r1, [pc, #352]	; 13300 <access_monster_buffer@@Base+0x57c>
   1319c:	ldr	r0, [pc, #352]	; 13304 <access_monster_buffer@@Base+0x580>
   131a0:	add	r3, pc, r3
   131a4:	add	r3, r3, #132	; 0x84
   131a8:	add	r1, pc, r1
   131ac:	add	r0, pc, r0
   131b0:	bl	11fd4 <__assert_fail@plt>
   131b4:	ldr	r3, [pc, #332]	; 13308 <access_monster_buffer@@Base+0x584>
   131b8:	mov	r2, #232	; 0xe8
   131bc:	ldr	r1, [pc, #328]	; 1330c <access_monster_buffer@@Base+0x588>
   131c0:	ldr	r0, [pc, #328]	; 13310 <access_monster_buffer@@Base+0x58c>
   131c4:	add	r3, pc, r3
   131c8:	add	r3, r3, #132	; 0x84
   131cc:	add	r1, pc, r1
   131d0:	add	r0, pc, r0
   131d4:	bl	11fd4 <__assert_fail@plt>
   131d8:	ldr	r3, [pc, #308]	; 13314 <access_monster_buffer@@Base+0x590>
   131dc:	mov	r2, #240	; 0xf0
   131e0:	ldr	r1, [pc, #304]	; 13318 <access_monster_buffer@@Base+0x594>
   131e4:	ldr	r0, [pc, #304]	; 1331c <access_monster_buffer@@Base+0x598>
   131e8:	add	r3, pc, r3
   131ec:	add	r3, r3, #132	; 0x84
   131f0:	add	r1, pc, r1
   131f4:	add	r0, pc, r0
   131f8:	bl	11fd4 <__assert_fail@plt>
   131fc:	ldr	r3, [pc, #284]	; 13320 <access_monster_buffer@@Base+0x59c>
   13200:	mov	r2, #241	; 0xf1
   13204:	ldr	r1, [pc, #280]	; 13324 <access_monster_buffer@@Base+0x5a0>
   13208:	ldr	r0, [pc, #280]	; 13328 <access_monster_buffer@@Base+0x5a4>
   1320c:	add	r3, pc, r3
   13210:	add	r3, r3, #132	; 0x84
   13214:	add	r1, pc, r1
   13218:	add	r0, pc, r0
   1321c:	bl	11fd4 <__assert_fail@plt>
   13220:	ldr	r3, [pc, #260]	; 1332c <access_monster_buffer@@Base+0x5a8>
   13224:	mov	r2, #221	; 0xdd
   13228:	ldr	r1, [pc, #256]	; 13330 <access_monster_buffer@@Base+0x5ac>
   1322c:	ldr	r0, [pc, #256]	; 13334 <access_monster_buffer@@Base+0x5b0>
   13230:	add	r3, pc, r3
   13234:	add	r3, r3, #132	; 0x84
   13238:	add	r1, pc, r1
   1323c:	add	r0, pc, r0
   13240:	bl	11fd4 <__assert_fail@plt>
   13244:	ldr	r3, [pc, #236]	; 13338 <access_monster_buffer@@Base+0x5b4>
   13248:	mov	r2, #223	; 0xdf
   1324c:	ldr	r1, [pc, #232]	; 1333c <access_monster_buffer@@Base+0x5b8>
   13250:	ldr	r0, [pc, #232]	; 13340 <access_monster_buffer@@Base+0x5bc>
   13254:	add	r3, pc, r3
   13258:	add	r3, r3, #132	; 0x84
   1325c:	add	r1, pc, r1
   13260:	add	r0, pc, r0
   13264:	bl	11fd4 <__assert_fail@plt>
   13268:	ldr	r3, [pc, #212]	; 13344 <access_monster_buffer@@Base+0x5c0>
   1326c:	mov	r2, #222	; 0xde
   13270:	ldr	r1, [pc, #208]	; 13348 <access_monster_buffer@@Base+0x5c4>
   13274:	ldr	r0, [pc, #208]	; 1334c <access_monster_buffer@@Base+0x5c8>
   13278:	add	r3, pc, r3
   1327c:	add	r3, r3, #132	; 0x84
   13280:	add	r1, pc, r1
   13284:	add	r0, pc, r0
   13288:	bl	11fd4 <__assert_fail@plt>
   1328c:	svccc	0x00800000
   13290:	andmi	r0, r0, r0
   13294:	submi	r0, r0, r0
   13298:	muleq	r0, r8, r6
   1329c:	andeq	r5, r0, ip, ror #6
   132a0:	andeq	r5, r0, r4, ror #12
   132a4:	ldrdeq	r5, [r0], -r4
   132a8:	andeq	r5, r0, r8, asr #6
   132ac:	andeq	r5, r0, r0, asr #12
   132b0:			; <UNDEFINED> instruction: 0x00005eb0
   132b4:	andeq	r5, r0, r4, asr r4
   132b8:	andeq	r5, r0, r4, asr #7
   132bc:	andeq	r5, r0, r0, lsr r1
   132c0:	andeq	r5, r0, r8, lsr #8
   132c4:	muleq	r0, r8, ip
   132c8:	andeq	r5, r0, r4, lsl #2
   132cc:	strdeq	r5, [r0], -ip
   132d0:	andeq	r5, r0, ip, ror #24
   132d4:	andeq	r5, r0, ip, lsr #1
   132d8:	andeq	r5, r0, r4, lsr #7
   132dc:	andeq	r5, r0, r4, lsl ip
   132e0:	andeq	r5, r0, r0, lsl #1
   132e4:	andeq	r5, r0, r8, ror r3
   132e8:	andeq	r5, r0, r8, ror #23
   132ec:			; <UNDEFINED> instruction: 0x000052bc
   132f0:	andeq	r5, r0, ip, lsr r0
   132f4:	andeq	r5, r0, r4, lsr r3
   132f8:	andeq	r5, r0, r4, lsr #23
   132fc:	andeq	r5, r0, r8, lsl r0
   13300:	andeq	r5, r0, r0, lsl r3
   13304:	andeq	r5, r0, r0, lsl #23
   13308:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1330c:	andeq	r5, r0, ip, ror #5
   13310:	andeq	r5, r0, ip, asr fp
   13314:	ldrdeq	r4, [r0], -r0
   13318:	andeq	r5, r0, r8, asr #5
   1331c:	andeq	r5, r0, r8, lsr fp
   13320:	andeq	r4, r0, ip, lsr #31
   13324:	andeq	r5, r0, r4, lsr #5
   13328:	andeq	r5, r0, r4, lsl fp
   1332c:	andeq	r4, r0, r8, lsl #31
   13330:	andeq	r5, r0, r0, lsl #5
   13334:	strdeq	r5, [r0], -r0
   13338:	andeq	r4, r0, r4, ror #30
   1333c:	andeq	r5, r0, ip, asr r2
   13340:	andeq	r5, r0, ip, asr #21
   13344:	andeq	r4, r0, r0, asr #30
   13348:	andeq	r5, r0, r8, lsr r2
   1334c:	andeq	r5, r0, r8, lsr #21
   13350:	andeq	r4, r0, ip, lsl lr
   13354:	andeq	r5, r0, r4, lsl r1
   13358:	andeq	r5, r0, r4, lsl #19
   1335c:	strdeq	r4, [r0], -r8
   13360:	strdeq	r5, [r0], -r0
   13364:	andeq	r5, r0, r0, ror #18
   13368:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1336c:	andeq	r5, r0, ip, asr #1
   13370:	andeq	r5, r0, ip, lsr r9
   13374:			; <UNDEFINED> instruction: 0x00004db0
   13378:	andeq	r5, r0, r8, lsr #1
   1337c:	andeq	r5, r0, r8, lsl r9
   13380:	andeq	r4, r0, ip, lsl #27
   13384:	andeq	r5, r0, r4, lsl #1
   13388:	strdeq	r5, [r0], -r4
   1338c:	ldr	r3, [pc, #-68]	; 13350 <access_monster_buffer@@Base+0x5cc>
   13390:	mov	r2, #242	; 0xf2
   13394:	ldr	r1, [pc, #-72]	; 13354 <access_monster_buffer@@Base+0x5d0>
   13398:	ldr	r0, [pc, #-72]	; 13358 <access_monster_buffer@@Base+0x5d4>
   1339c:	add	r3, pc, r3
   133a0:	add	r3, r3, #132	; 0x84
   133a4:	add	r1, pc, r1
   133a8:	add	r0, pc, r0
   133ac:	bl	11fd4 <__assert_fail@plt>
   133b0:	ldr	r3, [pc, #-92]	; 1335c <access_monster_buffer@@Base+0x5d8>
   133b4:	movw	r2, #261	; 0x105
   133b8:	ldr	r1, [pc, #-96]	; 13360 <access_monster_buffer@@Base+0x5dc>
   133bc:	ldr	r0, [pc, #-96]	; 13364 <access_monster_buffer@@Base+0x5e0>
   133c0:	add	r3, pc, r3
   133c4:	add	r3, r3, #132	; 0x84
   133c8:	add	r1, pc, r1
   133cc:	add	r0, pc, r0
   133d0:	bl	11fd4 <__assert_fail@plt>
   133d4:	ldr	r3, [pc, #-116]	; 13368 <access_monster_buffer@@Base+0x5e4>
   133d8:	movw	r2, #263	; 0x107
   133dc:	ldr	r1, [pc, #-120]	; 1336c <access_monster_buffer@@Base+0x5e8>
   133e0:	ldr	r0, [pc, #-120]	; 13370 <access_monster_buffer@@Base+0x5ec>
   133e4:	add	r3, pc, r3
   133e8:	add	r3, r3, #132	; 0x84
   133ec:	add	r1, pc, r1
   133f0:	add	r0, pc, r0
   133f4:	bl	11fd4 <__assert_fail@plt>
   133f8:	ldr	r3, [pc, #-140]	; 13374 <access_monster_buffer@@Base+0x5f0>
   133fc:	movw	r2, #267	; 0x10b
   13400:	ldr	r1, [pc, #-144]	; 13378 <access_monster_buffer@@Base+0x5f4>
   13404:	ldr	r0, [pc, #-144]	; 1337c <access_monster_buffer@@Base+0x5f8>
   13408:	add	r3, pc, r3
   1340c:	add	r3, r3, #132	; 0x84
   13410:	add	r1, pc, r1
   13414:	add	r0, pc, r0
   13418:	bl	11fd4 <__assert_fail@plt>
   1341c:	ldr	r3, [pc, #-164]	; 13380 <access_monster_buffer@@Base+0x5fc>
   13420:	mov	r2, #276	; 0x114
   13424:	ldr	r1, [pc, #-168]	; 13384 <access_monster_buffer@@Base+0x600>
   13428:	ldr	r0, [pc, #-168]	; 13388 <access_monster_buffer@@Base+0x604>
   1342c:	add	r3, pc, r3
   13430:	add	r3, r3, #132	; 0x84
   13434:	add	r1, pc, r1
   13438:	add	r0, pc, r0
   1343c:	bl	11fd4 <__assert_fail@plt>
   13440:	ldrh	r7, [r4, #6]
   13444:	cmp	r7, #0
   13448:	movne	r1, #100	; 0x64
   1344c:	bne	12dd8 <access_monster_buffer@@Base+0x54>
   13450:	b	130a4 <access_monster_buffer@@Base+0x320>
   13454:	mov	r0, #0
   13458:	mov	r8, r0
   1345c:	b	12e08 <access_monster_buffer@@Base+0x84>
   13460:	strd	r4, [sp, #-16]!
   13464:	mov	r4, r0
   13468:	mov	r0, #1
   1346c:	ldr	ip, [r4, #28]
   13470:	mov	r3, r0
   13474:	mov	r5, r2
   13478:	str	r6, [sp, #8]
   1347c:	str	lr, [sp, #12]
   13480:	sub	sp, sp, #8
   13484:	str	r0, [sp]
   13488:	add	r2, r1, ip
   1348c:	add	r1, r4, #60	; 0x3c
   13490:	ldr	r0, [r4, #40]	; 0x28
   13494:	ldr	r6, [r4, #48]	; 0x30
   13498:	blx	r6
   1349c:	cmp	r0, #0
   134a0:	bne	134e0 <access_monster_buffer@@Base+0x75c>
   134a4:	ldr	r1, [r4, #28]
   134a8:	ldr	ip, [r4, #32]
   134ac:	ldrd	r2, [r4, #60]	; 0x3c
   134b0:	sub	r3, r3, r1
   134b4:	add	r2, r2, r1
   134b8:	cmp	r3, r5
   134bc:	movcs	r3, r5
   134c0:	str	r2, [r4, #16]
   134c4:	str	r3, [r4, #24]
   134c8:	str	r5, [ip, #4]
   134cc:	add	sp, sp, #8
   134d0:	ldrd	r4, [sp]
   134d4:	ldr	r6, [sp, #8]
   134d8:	add	sp, sp, #12
   134dc:	pop	{pc}		; (ldr pc, [sp], #4)
   134e0:	mvn	r0, #0
   134e4:	b	134cc <access_monster_buffer@@Base+0x748>

000134e8 <flatcc_builder_default_alloc@@Base>:
   134e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   134ec:	subs	r5, r2, #0
   134f0:	strd	r6, [sp, #8]
   134f4:	mov	r6, r1
   134f8:	str	r8, [sp, #16]
   134fc:	str	lr, [sp, #20]
   13500:	beq	13538 <flatcc_builder_default_alloc@@Base+0x50>
   13504:	mov	r7, r3
   13508:	ldr	r3, [sp, #24]
   1350c:	sub	r2, r3, #1
   13510:	cmp	r2, #6
   13514:	addls	pc, pc, r2, lsl #2
   13518:	b	135e8 <flatcc_builder_default_alloc@@Base+0x100>
   1351c:	b	13568 <flatcc_builder_default_alloc@@Base+0x80>
   13520:	b	135e8 <flatcc_builder_default_alloc@@Base+0x100>
   13524:	b	135e8 <flatcc_builder_default_alloc@@Base+0x100>
   13528:	b	135e0 <flatcc_builder_default_alloc@@Base+0xf8>
   1352c:	b	135d0 <flatcc_builder_default_alloc@@Base+0xe8>
   13530:	b	135e8 <flatcc_builder_default_alloc@@Base+0x100>
   13534:	b	135d8 <flatcc_builder_default_alloc@@Base+0xf0>
   13538:	ldr	r0, [r1]
   1353c:	cmp	r0, #0
   13540:	beq	13554 <flatcc_builder_default_alloc@@Base+0x6c>
   13544:	bl	11f38 <free@plt>
   13548:	mov	r0, r5
   1354c:	str	r5, [r6]
   13550:	str	r5, [r6, #4]
   13554:	ldrd	r4, [sp]
   13558:	ldrd	r6, [sp, #8]
   1355c:	ldr	r8, [sp, #16]
   13560:	add	sp, sp, #20
   13564:	pop	{pc}		; (ldr pc, [sp], #4)
   13568:	mov	r4, #256	; 0x100
   1356c:	cmp	r4, r5
   13570:	bcs	13580 <flatcc_builder_default_alloc@@Base+0x98>
   13574:	lsl	r4, r4, #1
   13578:	cmp	r5, r4
   1357c:	bhi	13574 <flatcc_builder_default_alloc@@Base+0x8c>
   13580:	ldr	r2, [r6, #4]
   13584:	cmp	r5, r2
   13588:	bhi	13598 <flatcc_builder_default_alloc@@Base+0xb0>
   1358c:	cmp	r4, r2, lsr #1
   13590:	movls	r0, #0
   13594:	bls	13554 <flatcc_builder_default_alloc@@Base+0x6c>
   13598:	mov	r1, r4
   1359c:	ldr	r0, [r6]
   135a0:	bl	11f5c <realloc@plt>
   135a4:	subs	r5, r0, #0
   135a8:	beq	13604 <flatcc_builder_default_alloc@@Base+0x11c>
   135ac:	cmp	r7, #0
   135b0:	beq	135c0 <flatcc_builder_default_alloc@@Base+0xd8>
   135b4:	ldr	r0, [r6, #4]
   135b8:	cmp	r0, r4
   135bc:	bcc	135f0 <flatcc_builder_default_alloc@@Base+0x108>
   135c0:	mov	r0, #0
   135c4:	str	r5, [r6]
   135c8:	str	r4, [r6, #4]
   135cc:	b	13554 <flatcc_builder_default_alloc@@Base+0x6c>
   135d0:	mov	r4, r5
   135d4:	b	13580 <flatcc_builder_default_alloc@@Base+0x98>
   135d8:	mov	r4, #64	; 0x40
   135dc:	b	1356c <flatcc_builder_default_alloc@@Base+0x84>
   135e0:	mov	r4, #288	; 0x120
   135e4:	b	1356c <flatcc_builder_default_alloc@@Base+0x84>
   135e8:	mov	r4, #32
   135ec:	b	1356c <flatcc_builder_default_alloc@@Base+0x84>
   135f0:	sub	r2, r4, r0
   135f4:	mov	r1, #0
   135f8:	add	r0, r5, r0
   135fc:	bl	11fb0 <memset@plt>
   13600:	b	135c0 <flatcc_builder_default_alloc@@Base+0xd8>
   13604:	mvn	r0, #0
   13608:	b	13554 <flatcc_builder_default_alloc@@Base+0x6c>
   1360c:	ldr	r3, [pc, #32]	; 13634 <flatcc_builder_default_alloc@@Base+0x14c>
   13610:	mov	r2, #308	; 0x134
   13614:	str	r4, [sp, #-8]!
   13618:	ldr	r1, [pc, #24]	; 13638 <flatcc_builder_default_alloc@@Base+0x150>
   1361c:	str	lr, [sp, #4]
   13620:	ldr	r0, [pc, #20]	; 1363c <flatcc_builder_default_alloc@@Base+0x154>
   13624:	add	r3, pc, r3
   13628:	add	r1, pc, r1
   1362c:	add	r0, pc, r0
   13630:	bl	11fd4 <__assert_fail@plt>
   13634:	andeq	r4, r0, r0, lsr pc
   13638:	andeq	r5, r0, ip, ror r6
   1363c:	andeq	r5, r0, r0, lsl #14
   13640:	ldr	r3, [pc, #36]	; 1366c <flatcc_builder_default_alloc@@Base+0x184>
   13644:	movw	r2, #677	; 0x2a5
   13648:	str	r4, [sp, #-8]!
   1364c:	ldr	r1, [pc, #28]	; 13670 <flatcc_builder_default_alloc@@Base+0x188>
   13650:	str	lr, [sp, #4]
   13654:	ldr	r0, [pc, #24]	; 13674 <flatcc_builder_default_alloc@@Base+0x18c>
   13658:	add	r3, pc, r3
   1365c:	add	r3, r3, #16
   13660:	add	r1, pc, r1
   13664:	add	r0, pc, r0
   13668:	bl	11fd4 <__assert_fail@plt>
   1366c:	strdeq	r4, [r0], -ip
   13670:	andeq	r5, r0, r4, asr #12
   13674:	andeq	r5, r0, r8, asr #13
   13678:	strd	r4, [sp, #-12]!
   1367c:	cmp	r2, #0
   13680:	mov	ip, r0
   13684:	str	lr, [sp, #8]
   13688:	sub	sp, sp, #84	; 0x54
   1368c:	ldr	lr, [pc, #248]	; 1378c <flatcc_builder_default_alloc@@Base+0x2a4>
   13690:	add	lr, pc, lr
   13694:	bne	136a4 <flatcc_builder_default_alloc@@Base+0x1bc>
   13698:	ldrh	r2, [r0, #132]	; 0x84
   1369c:	cmp	r2, #0
   136a0:	moveq	r2, #1
   136a4:	ldrh	r0, [r1]
   136a8:	cmp	r0, #3
   136ac:	bhi	136bc <flatcc_builder_default_alloc@@Base+0x1d4>
   136b0:	mov	r4, #4
   136b4:	mov	r0, r4
   136b8:	strh	r4, [r1]
   136bc:	cmp	r2, r0
   136c0:	strhhi	r2, [r1]
   136c4:	cmp	r3, #0
   136c8:	bne	136dc <flatcc_builder_default_alloc@@Base+0x1f4>
   136cc:	ldr	r4, [ip, #140]	; 0x8c
   136d0:	sub	r2, r2, #1
   136d4:	ands	r1, r2, r4
   136d8:	bne	136f0 <flatcc_builder_default_alloc@@Base+0x208>
   136dc:	mov	r0, #0
   136e0:	add	sp, sp, #84	; 0x54
   136e4:	ldrd	r4, [sp]
   136e8:	add	sp, sp, #8
   136ec:	pop	{pc}		; (ldr pc, [sp], #4)
   136f0:	ldr	r3, [pc, #152]	; 13790 <flatcc_builder_default_alloc@@Base+0x2a8>
   136f4:	add	r0, r4, r1
   136f8:	mov	r2, #1
   136fc:	str	r1, [sp, #8]
   13700:	cmp	r4, r0
   13704:	ldr	r3, [lr, r3]
   13708:	str	r0, [ip, #140]	; 0x8c
   1370c:	strd	r2, [sp, #12]
   13710:	str	r1, [sp, #20]
   13714:	bgt	13768 <flatcc_builder_default_alloc@@Base+0x280>
   13718:	mov	r3, r4
   1371c:	str	r1, [sp]
   13720:	add	r1, sp, #16
   13724:	ldr	r0, [ip, #36]	; 0x24
   13728:	ldr	r5, [ip, #44]	; 0x2c
   1372c:	blx	r5
   13730:	cmp	r0, #0
   13734:	bne	13764 <flatcc_builder_default_alloc@@Base+0x27c>
   13738:	cmn	r4, #1
   1373c:	bne	136dc <flatcc_builder_default_alloc@@Base+0x1f4>
   13740:	ldr	r3, [pc, #76]	; 13794 <flatcc_builder_default_alloc@@Base+0x2ac>
   13744:	movw	r2, #702	; 0x2be
   13748:	ldr	r1, [pc, #72]	; 13798 <flatcc_builder_default_alloc@@Base+0x2b0>
   1374c:	ldr	r0, [pc, #72]	; 1379c <flatcc_builder_default_alloc@@Base+0x2b4>
   13750:	add	r3, pc, r3
   13754:	add	r3, r3, #28
   13758:	add	r1, pc, r1
   1375c:	add	r0, pc, r0
   13760:	bl	11fd4 <__assert_fail@plt>
   13764:	bl	13640 <flatcc_builder_default_alloc@@Base+0x158>
   13768:	ldr	r3, [pc, #48]	; 137a0 <flatcc_builder_default_alloc@@Base+0x2b8>
   1376c:	movw	r2, #673	; 0x2a1
   13770:	ldr	r1, [pc, #44]	; 137a4 <flatcc_builder_default_alloc@@Base+0x2bc>
   13774:	ldr	r0, [pc, #44]	; 137a8 <flatcc_builder_default_alloc@@Base+0x2c0>
   13778:	add	r3, pc, r3
   1377c:	add	r3, r3, #16
   13780:	add	r1, pc, r1
   13784:	add	r0, pc, r0
   13788:	bl	11fd4 <__assert_fail@plt>
   1378c:	andeq	r6, r1, r8, ror #18
   13790:	andeq	r0, r0, r8, asr #32
   13794:	andeq	r4, r0, r4, lsl #28
   13798:	andeq	r5, r0, ip, asr #10
   1379c:	ldrdeq	r5, [r0], -r0
   137a0:	ldrdeq	r4, [r0], -ip
   137a4:	andeq	r5, r0, r4, lsr #10
   137a8:	andeq	r5, r0, r8, lsr #11
   137ac:	ldr	r3, [pc, #36]	; 137d8 <flatcc_builder_default_alloc@@Base+0x2f0>
   137b0:	movw	r2, #651	; 0x28b
   137b4:	str	r4, [sp, #-8]!
   137b8:	ldr	r1, [pc, #28]	; 137dc <flatcc_builder_default_alloc@@Base+0x2f4>
   137bc:	str	lr, [sp, #4]
   137c0:	ldr	r0, [pc, #24]	; 137e0 <flatcc_builder_default_alloc@@Base+0x2f8>
   137c4:	add	r3, pc, r3
   137c8:	add	r3, r3, #44	; 0x2c
   137cc:	add	r1, pc, r1
   137d0:	add	r0, pc, r0
   137d4:	bl	11fd4 <__assert_fail@plt>
   137d8:	muleq	r0, r0, sp
   137dc:	ldrdeq	r5, [r0], -r8
   137e0:	andeq	r5, r0, ip, asr r5
   137e4:	ldr	r3, [pc, #36]	; 13810 <flatcc_builder_default_alloc@@Base+0x328>
   137e8:	mov	r2, #892	; 0x37c
   137ec:	str	r4, [sp, #-8]!
   137f0:	ldr	r1, [pc, #28]	; 13814 <flatcc_builder_default_alloc@@Base+0x32c>
   137f4:	str	lr, [sp, #4]
   137f8:	ldr	r0, [pc, #24]	; 13818 <flatcc_builder_default_alloc@@Base+0x330>
   137fc:	add	r3, pc, r3
   13800:	add	r3, r3, #56	; 0x38
   13804:	add	r1, pc, r1
   13808:	add	r0, pc, r0
   1380c:	bl	11fd4 <__assert_fail@plt>
   13810:	andeq	r4, r0, r8, asr sp
   13814:	andeq	r5, r0, r0, lsr #9
   13818:	strdeq	r5, [r0], -ip
   1381c:	ldrd	r2, [r0, #156]	; 0x9c
   13820:	strd	r4, [sp, #-20]!	; 0xffffffec
   13824:	mov	r5, r1
   13828:	mov	r4, r0
   1382c:	strd	r6, [sp, #8]
   13830:	str	lr, [sp, #16]
   13834:	sub	sp, sp, #12
   13838:	add	r1, r2, #1
   1383c:	cmp	r1, r3
   13840:	str	r1, [r0, #156]	; 0x9c
   13844:	ble	13924 <flatcc_builder_default_alloc@@Base+0x43c>
   13848:	ldr	r3, [r0, #176]	; 0xb0
   1384c:	cmp	r1, r3
   13850:	cmpgt	r3, #0
   13854:	movgt	r3, #1
   13858:	movle	r3, #0
   1385c:	bgt	13934 <flatcc_builder_default_alloc@@Base+0x44c>
   13860:	add	r2, r2, r2, lsl #3
   13864:	ldr	r1, [r0, #88]	; 0x58
   13868:	lsl	r6, r2, #2
   1386c:	add	r2, r6, #36	; 0x24
   13870:	cmp	r2, r1
   13874:	bls	13898 <flatcc_builder_default_alloc@@Base+0x3b0>
   13878:	mov	ip, #4
   1387c:	add	r1, r0, #84	; 0x54
   13880:	ldr	r0, [r0, #40]	; 0x28
   13884:	str	ip, [sp]
   13888:	ldr	r7, [r4, #48]	; 0x30
   1388c:	blx	r7
   13890:	cmp	r0, #0
   13894:	bne	1393c <flatcc_builder_default_alloc@@Base+0x454>
   13898:	ldr	r2, [r4, #84]	; 0x54
   1389c:	add	r2, r2, r6
   138a0:	cmp	r2, #0
   138a4:	str	r2, [r4, #32]
   138a8:	beq	13934 <flatcc_builder_default_alloc@@Base+0x44c>
   138ac:	ldr	r3, [r4, #88]	; 0x58
   138b0:	movw	r0, #36409	; 0x8e39
   138b4:	movt	r0, #14563	; 0x38e3
   138b8:	ldr	r1, [r4, #176]	; 0xb0
   138bc:	umull	r0, r3, r0, r3
   138c0:	lsr	r3, r3, #3
   138c4:	cmp	r3, r1
   138c8:	cmpgt	r1, #0
   138cc:	movgt	r3, r1
   138d0:	str	r3, [r4, #160]	; 0xa0
   138d4:	ldr	r3, [r4, #20]
   138d8:	mov	r1, #0
   138dc:	mvn	lr, #3
   138e0:	mov	r0, r1
   138e4:	ldr	ip, [r4, #28]
   138e8:	ldrh	r6, [r4, #130]	; 0x82
   138ec:	str	r3, [r2, #8]
   138f0:	add	r3, r3, ip
   138f4:	add	r3, r3, #7
   138f8:	bic	r3, r3, #7
   138fc:	strh	r6, [r2, #12]
   13900:	strh	r5, [r4, #130]	; 0x82
   13904:	stm	r2, {ip, lr}
   13908:	str	r1, [r4, #20]
   1390c:	str	r3, [r4, #28]
   13910:	add	sp, sp, #12
   13914:	ldrd	r4, [sp]
   13918:	ldrd	r6, [sp, #8]
   1391c:	add	sp, sp, #16
   13920:	pop	{pc}		; (ldr pc, [sp], #4)
   13924:	ldr	r2, [r0, #32]
   13928:	add	r2, r2, #36	; 0x24
   1392c:	str	r2, [r0, #32]
   13930:	b	138d4 <flatcc_builder_default_alloc@@Base+0x3ec>
   13934:	mvn	r0, #0
   13938:	b	13910 <flatcc_builder_default_alloc@@Base+0x428>
   1393c:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>
   13940:	strd	r4, [sp, #-20]!	; 0xffffffec
   13944:	mov	r4, r0
   13948:	mov	r5, #4
   1394c:	ldrh	r0, [r0, #128]	; 0x80
   13950:	strd	r6, [sp, #8]
   13954:	str	lr, [sp, #16]
   13958:	sub	sp, sp, #92	; 0x5c
   1395c:	ldr	lr, [pc, #464]	; 13b34 <flatcc_builder_default_alloc@@Base+0x64c>
   13960:	str	r2, [sp, #12]
   13964:	cmp	r0, #3
   13968:	ldr	r6, [r4, #136]	; 0x88
   1396c:	movls	r0, #4
   13970:	str	r5, [sp, #16]
   13974:	str	r5, [sp, #28]
   13978:	strhls	r0, [r4, #128]	; 0x80
   1397c:	mov	r0, #1
   13980:	lsls	ip, r2, #2
   13984:	add	lr, pc, lr
   13988:	str	r0, [sp, #20]
   1398c:	add	r0, sp, #12
   13990:	str	r0, [sp, #24]
   13994:	and	r0, r6, #3
   13998:	beq	139b4 <flatcc_builder_default_alloc@@Base+0x4cc>
   1399c:	add	r5, ip, r5
   139a0:	mov	r7, #2
   139a4:	str	r5, [sp, #16]
   139a8:	str	r7, [sp, #20]
   139ac:	str	r1, [sp, #32]
   139b0:	str	ip, [sp, #36]	; 0x24
   139b4:	cmp	r0, #0
   139b8:	beq	139e8 <flatcc_builder_default_alloc@@Base+0x500>
   139bc:	ldr	r7, [pc, #372]	; 13b38 <flatcc_builder_default_alloc@@Base+0x650>
   139c0:	add	r5, r5, r0
   139c4:	ldr	ip, [sp, #20]
   139c8:	str	r5, [sp, #16]
   139cc:	ldr	r7, [lr, r7]
   139d0:	add	lr, sp, #88	; 0x58
   139d4:	add	ip, ip, #1
   139d8:	add	lr, lr, ip, lsl #3
   139dc:	str	ip, [sp, #20]
   139e0:	str	r7, [lr, #-72]	; 0xffffffb8
   139e4:	str	r0, [lr, #-68]	; 0xffffffbc
   139e8:	cmp	r2, #0
   139ec:	beq	13a78 <flatcc_builder_default_alloc@@Base+0x590>
   139f0:	sub	r6, r1, r6
   139f4:	add	lr, r2, r3
   139f8:	add	r6, r6, r5
   139fc:	mov	r2, r3
   13a00:	b	13a30 <flatcc_builder_default_alloc@@Base+0x548>
   13a04:	sub	r0, r6, r1
   13a08:	cmp	r3, #0
   13a0c:	add	r0, r0, ip
   13a10:	str	r0, [r1, #-4]
   13a14:	beq	13a24 <flatcc_builder_default_alloc@@Base+0x53c>
   13a18:	ldrb	r0, [r2]
   13a1c:	cmp	r0, #0
   13a20:	beq	13ae8 <flatcc_builder_default_alloc@@Base+0x600>
   13a24:	add	r2, r2, #1
   13a28:	cmp	lr, r2
   13a2c:	beq	13a74 <flatcc_builder_default_alloc@@Base+0x58c>
   13a30:	ldr	ip, [r1], #4
   13a34:	cmp	ip, #0
   13a38:	bne	13a04 <flatcc_builder_default_alloc@@Base+0x51c>
   13a3c:	cmp	r3, #0
   13a40:	beq	13ac4 <flatcc_builder_default_alloc@@Base+0x5dc>
   13a44:	ldrb	r0, [r2]
   13a48:	cmp	r0, #0
   13a4c:	beq	13a24 <flatcc_builder_default_alloc@@Base+0x53c>
   13a50:	ldr	r3, [pc, #228]	; 13b3c <flatcc_builder_default_alloc@@Base+0x654>
   13a54:	movw	r2, #1461	; 0x5b5
   13a58:	ldr	r1, [pc, #224]	; 13b40 <flatcc_builder_default_alloc@@Base+0x658>
   13a5c:	ldr	r0, [pc, #224]	; 13b44 <flatcc_builder_default_alloc@@Base+0x65c>
   13a60:	add	r3, pc, r3
   13a64:	add	r3, r3, #76	; 0x4c
   13a68:	add	r1, pc, r1
   13a6c:	add	r0, pc, r0
   13a70:	bl	11fd4 <__assert_fail@plt>
   13a74:	ldr	r6, [r4, #136]	; 0x88
   13a78:	sub	r7, r6, r5
   13a7c:	cmp	r7, r6
   13a80:	bge	13b10 <flatcc_builder_default_alloc@@Base+0x628>
   13a84:	mov	r3, r7
   13a88:	add	r1, sp, #24
   13a8c:	str	r5, [sp]
   13a90:	ldr	r2, [sp, #20]
   13a94:	ldr	r0, [r4, #36]	; 0x24
   13a98:	ldr	r5, [r4, #44]	; 0x2c
   13a9c:	blx	r5
   13aa0:	cmp	r0, #0
   13aa4:	bne	13b0c <flatcc_builder_default_alloc@@Base+0x624>
   13aa8:	mov	r0, r7
   13aac:	str	r7, [r4, #136]	; 0x88
   13ab0:	add	sp, sp, #92	; 0x5c
   13ab4:	ldrd	r4, [sp]
   13ab8:	ldrd	r6, [sp, #8]
   13abc:	add	sp, sp, #16
   13ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac4:	ldr	r3, [pc, #124]	; 13b48 <flatcc_builder_default_alloc@@Base+0x660>
   13ac8:	movw	r2, #1463	; 0x5b7
   13acc:	ldr	r1, [pc, #120]	; 13b4c <flatcc_builder_default_alloc@@Base+0x664>
   13ad0:	ldr	r0, [pc, #120]	; 13b50 <flatcc_builder_default_alloc@@Base+0x668>
   13ad4:	add	r3, pc, r3
   13ad8:	add	r3, r3, #76	; 0x4c
   13adc:	add	r1, pc, r1
   13ae0:	add	r0, pc, r0
   13ae4:	bl	11fd4 <__assert_fail@plt>
   13ae8:	ldr	r3, [pc, #100]	; 13b54 <flatcc_builder_default_alloc@@Base+0x66c>
   13aec:	movw	r2, #1457	; 0x5b1
   13af0:	ldr	r1, [pc, #96]	; 13b58 <flatcc_builder_default_alloc@@Base+0x670>
   13af4:	ldr	r0, [pc, #96]	; 13b5c <flatcc_builder_default_alloc@@Base+0x674>
   13af8:	add	r3, pc, r3
   13afc:	add	r3, r3, #76	; 0x4c
   13b00:	add	r1, pc, r1
   13b04:	add	r0, pc, r0
   13b08:	bl	11fd4 <__assert_fail@plt>
   13b0c:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   13b10:	ldr	r3, [pc, #72]	; 13b60 <flatcc_builder_default_alloc@@Base+0x678>
   13b14:	movw	r2, #647	; 0x287
   13b18:	ldr	r1, [pc, #68]	; 13b64 <flatcc_builder_default_alloc@@Base+0x67c>
   13b1c:	ldr	r0, [pc, #68]	; 13b68 <flatcc_builder_default_alloc@@Base+0x680>
   13b20:	add	r3, pc, r3
   13b24:	add	r3, r3, #44	; 0x2c
   13b28:	add	r1, pc, r1
   13b2c:	add	r0, pc, r0
   13b30:	bl	11fd4 <__assert_fail@plt>
   13b34:	andeq	r6, r1, r4, ror r6
   13b38:	andeq	r0, r0, r8, asr #32
   13b3c:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13b40:	andeq	r5, r0, ip, lsr r2
   13b44:	andeq	r5, r0, r4, asr #5
   13b48:	andeq	r4, r0, r0, lsl #21
   13b4c:	andeq	r5, r0, r8, asr #3
   13b50:	andeq	r5, r0, ip, asr #4
   13b54:	andeq	r4, r0, ip, asr sl
   13b58:	andeq	r5, r0, r4, lsr #3
   13b5c:	andeq	r5, r0, ip, lsl r2
   13b60:	andeq	r4, r0, r4, lsr sl
   13b64:	andeq	r5, r0, ip, ror r1
   13b68:	andeq	r5, r0, r0, lsl #4

00013b6c <flatcc_builder_flush_vtable_cache@@Base>:
   13b6c:	ldr	r3, [r0, #116]	; 0x74
   13b70:	cmp	r3, #0
   13b74:	bxeq	lr
   13b78:	str	r4, [sp, #-8]!
   13b7c:	mov	r4, r0
   13b80:	mov	r1, #0
   13b84:	ldr	r0, [r0, #92]	; 0x5c
   13b88:	ldr	r2, [r4, #96]	; 0x60
   13b8c:	str	lr, [sp, #4]
   13b90:	bl	11fb0 <memset@plt>
   13b94:	mov	r3, #16
   13b98:	mov	r2, #0
   13b9c:	strd	r2, [r4, #120]	; 0x78
   13ba0:	ldr	r4, [sp]
   13ba4:	add	sp, sp, #4
   13ba8:	pop	{pc}		; (ldr pc, [sp], #4)

00013bac <flatcc_builder_custom_init@@Base>:
   13bac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13bb0:	mov	r5, r3
   13bb4:	mov	r4, r0
   13bb8:	strd	r6, [sp, #8]
   13bbc:	mov	r6, r1
   13bc0:	mov	r1, #0
   13bc4:	ldr	r7, [pc, #124]	; 13c48 <flatcc_builder_custom_init@@Base+0x9c>
   13bc8:	strd	r8, [sp, #16]
   13bcc:	mov	r8, r2
   13bd0:	mov	r2, #232	; 0xe8
   13bd4:	str	sl, [sp, #24]
   13bd8:	str	lr, [sp, #28]
   13bdc:	ldr	r9, [sp, #32]
   13be0:	bl	11fb0 <memset@plt>
   13be4:	cmp	r6, #0
   13be8:	add	r7, pc, r7
   13bec:	beq	13c20 <flatcc_builder_custom_init@@Base+0x74>
   13bf0:	cmp	r5, #0
   13bf4:	beq	13c3c <flatcc_builder_custom_init@@Base+0x90>
   13bf8:	ldr	sl, [sp, #24]
   13bfc:	mov	r0, #0
   13c00:	strd	r8, [r4, #36]	; 0x24
   13c04:	str	r6, [r4, #44]	; 0x2c
   13c08:	str	r5, [r4, #48]	; 0x30
   13c0c:	ldrd	r4, [sp]
   13c10:	ldrd	r6, [sp, #8]
   13c14:	ldrd	r8, [sp, #16]
   13c18:	add	sp, sp, #28
   13c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c20:	ldr	r3, [pc, #36]	; 13c4c <flatcc_builder_custom_init@@Base+0xa0>
   13c24:	mov	r2, #1
   13c28:	cmp	r5, #0
   13c2c:	add	r8, r4, #188	; 0xbc
   13c30:	str	r2, [r4, #184]	; 0xb8
   13c34:	ldr	r6, [r7, r3]
   13c38:	bne	13bf8 <flatcc_builder_custom_init@@Base+0x4c>
   13c3c:	ldr	r3, [pc, #12]	; 13c50 <flatcc_builder_custom_init@@Base+0xa4>
   13c40:	ldr	r5, [r7, r3]
   13c44:	b	13bf8 <flatcc_builder_custom_init@@Base+0x4c>
   13c48:	andeq	r6, r1, r0, lsl r4
   13c4c:	andeq	r0, r0, r4, asr r0
   13c50:	andeq	r0, r0, r0, asr r0

00013c54 <flatcc_builder_init@@Base>:
   13c54:	mov	ip, #0
   13c58:	push	{lr}		; (str lr, [sp, #-4]!)
   13c5c:	sub	sp, sp, #12
   13c60:	mov	r3, ip
   13c64:	mov	r2, ip
   13c68:	mov	r1, ip
   13c6c:	str	ip, [sp]
   13c70:	bl	13bac <flatcc_builder_custom_init@@Base>
   13c74:	add	sp, sp, #12
   13c78:	pop	{pc}		; (ldr pc, [sp], #4)

00013c7c <flatcc_builder_custom_reset@@Base>:
   13c7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13c80:	mov	r5, #0
   13c84:	mov	r4, r0
   13c88:	strd	r6, [sp, #8]
   13c8c:	mov	r6, r0
   13c90:	strd	r8, [sp, #16]
   13c94:	mov	r8, r1
   13c98:	mov	r9, r2
   13c9c:	str	lr, [sp, #24]
   13ca0:	sub	sp, sp, #12
   13ca4:	b	13cf4 <flatcc_builder_custom_reset@@Base+0x78>
   13ca8:	cmp	r5, #5
   13cac:	cmpne	r9, #0
   13cb0:	beq	13cd8 <flatcc_builder_custom_reset@@Base+0x5c>
   13cb4:	mov	r3, #1
   13cb8:	str	r5, [sp]
   13cbc:	mov	r2, r3
   13cc0:	ldr	r0, [r6, #40]	; 0x28
   13cc4:	ldr	r7, [r6, #48]	; 0x30
   13cc8:	blx	r7
   13ccc:	cmp	r0, #0
   13cd0:	bne	13de4 <flatcc_builder_custom_reset@@Base+0x168>
   13cd4:	ldr	r0, [r4, #52]	; 0x34
   13cd8:	mov	r1, #0
   13cdc:	ldr	r2, [r4, #56]	; 0x38
   13ce0:	bl	11fb0 <memset@plt>
   13ce4:	add	r5, r5, #1
   13ce8:	add	r4, r4, #8
   13cec:	cmp	r5, #8
   13cf0:	beq	13d34 <flatcc_builder_custom_reset@@Base+0xb8>
   13cf4:	ldr	r0, [r4, #52]	; 0x34
   13cf8:	add	r1, r4, #52	; 0x34
   13cfc:	cmp	r0, #0
   13d00:	bne	13ca8 <flatcc_builder_custom_reset@@Base+0x2c>
   13d04:	ldr	r3, [r4, #56]	; 0x38
   13d08:	cmp	r3, #0
   13d0c:	beq	13ce4 <flatcc_builder_custom_reset@@Base+0x68>
   13d10:	ldr	r3, [pc, #212]	; 13dec <flatcc_builder_custom_reset@@Base+0x170>
   13d14:	movw	r2, #434	; 0x1b2
   13d18:	ldr	r1, [pc, #208]	; 13df0 <flatcc_builder_custom_reset@@Base+0x174>
   13d1c:	ldr	r0, [pc, #208]	; 13df4 <flatcc_builder_custom_reset@@Base+0x178>
   13d20:	add	r3, pc, r3
   13d24:	add	r3, r3, #108	; 0x6c
   13d28:	add	r1, pc, r1
   13d2c:	add	r0, pc, r0
   13d30:	bl	11fd4 <__assert_fail@plt>
   13d34:	mov	r2, #0
   13d38:	ldr	r0, [r6, #52]	; 0x34
   13d3c:	ldr	r3, [r6, #124]	; 0x7c
   13d40:	ldr	r1, [r6, #60]	; 0x3c
   13d44:	str	r0, [r6, #4]
   13d48:	str	r2, [r6, #120]	; 0x78
   13d4c:	cmp	r3, r2
   13d50:	ldr	r2, [r6, #76]	; 0x4c
   13d54:	movne	r3, #16
   13d58:	strne	r3, [r6, #124]	; 0x7c
   13d5c:	mov	r3, #0
   13d60:	cmp	r8, r3
   13d64:	str	r2, [r6]
   13d68:	str	r1, [r6, #16]
   13d6c:	str	r3, [r6, #20]
   13d70:	str	r3, [r6, #24]
   13d74:	str	r3, [r6, #32]
   13d78:	strh	r3, [r6, #128]	; 0x80
   13d7c:	str	r3, [r6, #136]	; 0x88
   13d80:	str	r3, [r6, #140]	; 0x8c
   13d84:	str	r3, [r6, #148]	; 0x94
   13d88:	str	r3, [r6, #152]	; 0x98
   13d8c:	str	r3, [r6, #156]	; 0x9c
   13d90:	str	r3, [r6, #160]	; 0xa0
   13d94:	bne	13dbc <flatcc_builder_custom_reset@@Base+0x140>
   13d98:	ldr	r0, [r6, #184]	; 0xb8
   13d9c:	cmp	r0, #0
   13da0:	bne	13dd4 <flatcc_builder_custom_reset@@Base+0x158>
   13da4:	add	sp, sp, #12
   13da8:	ldrd	r4, [sp]
   13dac:	ldrd	r6, [sp, #8]
   13db0:	ldrd	r8, [sp, #16]
   13db4:	add	sp, sp, #24
   13db8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dbc:	ldr	r0, [r6, #184]	; 0xb8
   13dc0:	str	r3, [r6, #172]	; 0xac
   13dc4:	str	r3, [r6, #176]	; 0xb0
   13dc8:	str	r3, [r6, #180]	; 0xb4
   13dcc:	cmp	r0, #0
   13dd0:	beq	13da4 <flatcc_builder_custom_reset@@Base+0x128>
   13dd4:	add	r0, r6, #188	; 0xbc
   13dd8:	bl	17bb4 <flatcc_emitter_reset@@Base>
   13ddc:	mov	r0, #0
   13de0:	b	13da4 <flatcc_builder_custom_reset@@Base+0x128>
   13de4:	mvn	r0, #0
   13de8:	b	13da4 <flatcc_builder_custom_reset@@Base+0x128>
   13dec:	andeq	r4, r0, r4, lsr r8
   13df0:	andeq	r4, r0, ip, ror pc
   13df4:	andeq	r5, r0, r4, lsl r0

00013df8 <flatcc_builder_reset@@Base>:
   13df8:	mov	r2, #0
   13dfc:	mov	r1, r2
   13e00:	b	13c7c <flatcc_builder_custom_reset@@Base>

00013e04 <flatcc_builder_clear@@Base>:
   13e04:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e08:	mov	r4, #0
   13e0c:	add	r5, r0, #52	; 0x34
   13e10:	strd	r6, [sp, #8]
   13e14:	mov	r6, r0
   13e18:	str	lr, [sp, #16]
   13e1c:	sub	sp, sp, #12
   13e20:	mov	r3, #0
   13e24:	mov	r1, r5
   13e28:	str	r4, [sp]
   13e2c:	mov	r2, r3
   13e30:	add	r4, r4, #1
   13e34:	ldr	r0, [r6, #40]	; 0x28
   13e38:	add	r5, r5, #8
   13e3c:	ldr	r7, [r6, #48]	; 0x30
   13e40:	blx	r7
   13e44:	cmp	r4, #8
   13e48:	bne	13e20 <flatcc_builder_clear@@Base+0x1c>
   13e4c:	ldr	r3, [r6, #184]	; 0xb8
   13e50:	cmp	r3, #0
   13e54:	bne	13e7c <flatcc_builder_clear@@Base+0x78>
   13e58:	mov	r0, r6
   13e5c:	mov	r2, #232	; 0xe8
   13e60:	mov	r1, #0
   13e64:	add	sp, sp, #12
   13e68:	ldrd	r4, [sp]
   13e6c:	ldrd	r6, [sp, #8]
   13e70:	ldr	lr, [sp, #16]
   13e74:	add	sp, sp, #20
   13e78:	b	11fb0 <memset@plt>
   13e7c:	add	r0, r6, #188	; 0xbc
   13e80:	bl	17c88 <flatcc_emitter_clear@@Base>
   13e84:	b	13e58 <flatcc_builder_clear@@Base+0x54>

00013e88 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13e88:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e8c:	add	r4, r1, #3
   13e90:	mov	r5, r0
   13e94:	ldr	r3, [r0, #112]	; 0x70
   13e98:	bic	r4, r4, #3
   13e9c:	strd	r6, [sp, #8]
   13ea0:	add	r4, r4, #4
   13ea4:	ldr	r6, [r0, #228]	; 0xe4
   13ea8:	str	lr, [sp, #16]
   13eac:	sub	sp, sp, #12
   13eb0:	add	r2, r6, r4
   13eb4:	cmp	r2, r3
   13eb8:	bls	13ee0 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   13ebc:	mov	ip, #7
   13ec0:	add	r1, r0, #108	; 0x6c
   13ec4:	ldr	r0, [r0, #40]	; 0x28
   13ec8:	mov	r3, #0
   13ecc:	str	ip, [sp]
   13ed0:	ldr	r7, [r5, #48]	; 0x30
   13ed4:	blx	r7
   13ed8:	cmp	r0, #0
   13edc:	bne	13f34 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   13ee0:	ldr	r7, [r5, #108]	; 0x6c
   13ee4:	adds	r3, r7, r6
   13ee8:	moveq	r0, r3
   13eec:	beq	13f20 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13ef0:	mov	r2, r4
   13ef4:	mov	r0, r3
   13ef8:	mov	r1, #0
   13efc:	bl	11fb0 <memset@plt>
   13f00:	ldr	r2, [r5, #224]	; 0xe0
   13f04:	add	r0, r0, #4
   13f08:	str	r2, [r7, r6]
   13f0c:	ldr	r3, [r5, #228]	; 0xe4
   13f10:	add	r4, r3, r4
   13f14:	add	r3, r3, #4
   13f18:	str	r3, [r5, #224]	; 0xe0
   13f1c:	str	r4, [r5, #228]	; 0xe4
   13f20:	add	sp, sp, #12
   13f24:	ldrd	r4, [sp]
   13f28:	ldrd	r6, [sp, #8]
   13f2c:	add	sp, sp, #16
   13f30:	pop	{pc}		; (ldr pc, [sp], #4)
   13f34:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>

00013f38 <flatcc_builder_enter_user_frame@@Base>:
   13f38:	strd	r4, [sp, #-20]!	; 0xffffffec
   13f3c:	add	r4, r1, #3
   13f40:	mov	r5, r0
   13f44:	ldr	r3, [r0, #112]	; 0x70
   13f48:	bic	r4, r4, #3
   13f4c:	strd	r6, [sp, #8]
   13f50:	add	r4, r4, #4
   13f54:	ldr	r6, [r0, #228]	; 0xe4
   13f58:	str	lr, [sp, #16]
   13f5c:	sub	sp, sp, #12
   13f60:	add	r2, r6, r4
   13f64:	cmp	r2, r3
   13f68:	bls	13f90 <flatcc_builder_enter_user_frame@@Base+0x58>
   13f6c:	mov	ip, #7
   13f70:	add	r1, r0, #108	; 0x6c
   13f74:	ldr	r0, [r0, #40]	; 0x28
   13f78:	mov	r3, #0
   13f7c:	str	ip, [sp]
   13f80:	ldr	r7, [r5, #48]	; 0x30
   13f84:	blx	r7
   13f88:	cmp	r0, #0
   13f8c:	bne	13fd8 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13f90:	ldr	r7, [r5, #108]	; 0x6c
   13f94:	adds	r0, r7, r6
   13f98:	beq	13fc4 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13f9c:	mov	r2, r4
   13fa0:	mov	r1, #0
   13fa4:	bl	11fb0 <memset@plt>
   13fa8:	ldr	r3, [r5, #224]	; 0xe0
   13fac:	str	r3, [r7, r6]
   13fb0:	ldr	r0, [r5, #228]	; 0xe4
   13fb4:	add	r4, r0, r4
   13fb8:	add	r0, r0, #4
   13fbc:	str	r0, [r5, #224]	; 0xe0
   13fc0:	str	r4, [r5, #228]	; 0xe4
   13fc4:	add	sp, sp, #12
   13fc8:	ldrd	r4, [sp]
   13fcc:	ldrd	r6, [sp, #8]
   13fd0:	add	sp, sp, #16
   13fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd8:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>

00013fdc <flatcc_builder_exit_user_frame@@Base>:
   13fdc:	ldr	r2, [r0, #224]	; 0xe0
   13fe0:	cmp	r2, #0
   13fe4:	beq	1400c <flatcc_builder_exit_user_frame@@Base+0x30>
   13fe8:	mov	r3, r0
   13fec:	sub	r0, r2, #4
   13ff0:	ldr	r1, [r3, #108]	; 0x6c
   13ff4:	str	r0, [r3, #228]	; 0xe4
   13ff8:	add	r2, r1, r2
   13ffc:	ldr	r2, [r2, #-4]
   14000:	mov	r0, r2
   14004:	str	r2, [r3, #224]	; 0xe0
   14008:	bx	lr
   1400c:	ldr	r3, [pc, #36]	; 14038 <flatcc_builder_exit_user_frame@@Base+0x5c>
   14010:	movw	r2, #542	; 0x21e
   14014:	str	r4, [sp, #-8]!
   14018:	ldr	r1, [pc, #28]	; 1403c <flatcc_builder_exit_user_frame@@Base+0x60>
   1401c:	str	lr, [sp, #4]
   14020:	ldr	r0, [pc, #24]	; 14040 <flatcc_builder_exit_user_frame@@Base+0x64>
   14024:	add	r3, pc, r3
   14028:	add	r3, r3, #136	; 0x88
   1402c:	add	r1, pc, r1
   14030:	add	r0, pc, r0
   14034:	bl	11fd4 <__assert_fail@plt>
   14038:	andeq	r4, r0, r0, lsr r5
   1403c:	andeq	r4, r0, r8, ror ip
   14040:	andeq	r4, r0, r4, lsr #26

00014044 <flatcc_builder_exit_user_frame_at@@Base>:
   14044:	ldr	r2, [r0, #224]	; 0xe0
   14048:	cmp	r2, r1
   1404c:	bcc	14058 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   14050:	str	r1, [r0, #224]	; 0xe0
   14054:	b	13fdc <flatcc_builder_exit_user_frame@@Base>
   14058:	ldr	r3, [pc, #36]	; 14084 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   1405c:	movw	r2, #551	; 0x227
   14060:	str	r4, [sp, #-8]!
   14064:	ldr	r1, [pc, #28]	; 14088 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   14068:	str	lr, [sp, #4]
   1406c:	ldr	r0, [pc, #24]	; 1408c <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14070:	add	r3, pc, r3
   14074:	add	r3, r3, #168	; 0xa8
   14078:	add	r1, pc, r1
   1407c:	add	r0, pc, r0
   14080:	bl	11fd4 <__assert_fail@plt>
   14084:	andeq	r4, r0, r4, ror #9
   14088:	andeq	r4, r0, ip, lsr #24
   1408c:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>

00014090 <flatcc_builder_get_current_user_frame@@Base>:
   14090:	ldr	r0, [r0, #224]	; 0xe0
   14094:	bx	lr

00014098 <flatcc_builder_get_user_frame_ptr@@Base>:
   14098:	ldr	r0, [r0, #108]	; 0x6c
   1409c:	add	r0, r0, r1
   140a0:	bx	lr

000140a4 <flatcc_builder_embed_buffer@@Base>:
   140a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   140a8:	mov	r5, r3
   140ac:	mov	r4, r0
   140b0:	ldr	r3, [r0, #152]	; 0x98
   140b4:	strd	r6, [sp, #8]
   140b8:	mov	r7, r2
   140bc:	mov	r2, r1
   140c0:	ldr	r6, [pc, #356]	; 1422c <flatcc_builder_embed_buffer@@Base+0x188>
   140c4:	str	lr, [sp, #16]
   140c8:	sub	sp, sp, #92	; 0x5c
   140cc:	add	r1, sp, #112	; 0x70
   140d0:	adds	r3, r3, #0
   140d4:	movne	r3, #1
   140d8:	bl	13678 <flatcc_builder_default_alloc@@Base+0x190>
   140dc:	cmp	r0, #0
   140e0:	add	r6, pc, r6
   140e4:	bne	141fc <flatcc_builder_embed_buffer@@Base+0x158>
   140e8:	ldr	r3, [sp, #116]	; 0x74
   140ec:	str	r0, [sp, #16]
   140f0:	ldr	r1, [r4, #136]	; 0x88
   140f4:	str	r0, [sp, #20]
   140f8:	ldrh	r2, [sp, #112]	; 0x70
   140fc:	tst	r3, #2
   14100:	ldr	r0, [r4, #152]	; 0x98
   14104:	movne	ip, #4
   14108:	moveq	ip, #0
   1410c:	sub	r3, r1, r5
   14110:	sub	r3, r3, ip
   14114:	sub	r2, r2, #1
   14118:	and	r3, r3, r2
   1411c:	add	r2, r5, r3
   14120:	cmp	r0, #0
   14124:	str	r2, [sp, #12]
   14128:	beq	1414c <flatcc_builder_embed_buffer@@Base+0xa8>
   1412c:	mov	ip, #1
   14130:	mov	r2, #4
   14134:	mov	r0, r2
   14138:	str	r2, [sp, #16]
   1413c:	str	ip, [sp, #20]
   14140:	add	ip, sp, #12
   14144:	str	ip, [sp, #24]
   14148:	str	r2, [sp, #28]
   1414c:	cmp	r5, #0
   14150:	beq	14178 <flatcc_builder_embed_buffer@@Base+0xd4>
   14154:	ldr	r2, [sp, #20]
   14158:	add	ip, sp, #88	; 0x58
   1415c:	add	r0, r0, r5
   14160:	str	r0, [sp, #16]
   14164:	add	r2, r2, #1
   14168:	add	ip, ip, r2, lsl #3
   1416c:	str	r2, [sp, #20]
   14170:	str	r7, [ip, #-72]	; 0xffffffb8
   14174:	str	r5, [ip, #-68]	; 0xffffffbc
   14178:	cmp	r3, #0
   1417c:	bne	141cc <flatcc_builder_embed_buffer@@Base+0x128>
   14180:	sub	r5, r1, r0
   14184:	cmp	r1, r5
   14188:	ble	14208 <flatcc_builder_embed_buffer@@Base+0x164>
   1418c:	mov	r3, r5
   14190:	add	r1, sp, #24
   14194:	str	r0, [sp]
   14198:	ldr	r2, [sp, #20]
   1419c:	ldr	r0, [r4, #36]	; 0x24
   141a0:	ldr	r6, [r4, #44]	; 0x2c
   141a4:	blx	r6
   141a8:	cmp	r0, #0
   141ac:	streq	r5, [r4, #136]	; 0x88
   141b0:	bne	14204 <flatcc_builder_embed_buffer@@Base+0x160>
   141b4:	mov	r0, r5
   141b8:	add	sp, sp, #92	; 0x5c
   141bc:	ldrd	r4, [sp]
   141c0:	ldrd	r6, [sp, #8]
   141c4:	add	sp, sp, #16
   141c8:	pop	{pc}		; (ldr pc, [sp], #4)
   141cc:	ldr	ip, [pc, #92]	; 14230 <flatcc_builder_embed_buffer@@Base+0x18c>
   141d0:	add	r0, r0, r3
   141d4:	ldr	r2, [sp, #20]
   141d8:	str	r0, [sp, #16]
   141dc:	ldr	lr, [r6, ip]
   141e0:	add	ip, sp, #88	; 0x58
   141e4:	add	r2, r2, #1
   141e8:	add	ip, ip, r2, lsl #3
   141ec:	str	r2, [sp, #20]
   141f0:	str	lr, [ip, #-72]	; 0xffffffb8
   141f4:	str	r3, [ip, #-68]	; 0xffffffbc
   141f8:	b	14180 <flatcc_builder_embed_buffer@@Base+0xdc>
   141fc:	mov	r5, #0
   14200:	b	141b4 <flatcc_builder_embed_buffer@@Base+0x110>
   14204:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   14208:	ldr	r3, [pc, #36]	; 14234 <flatcc_builder_embed_buffer@@Base+0x190>
   1420c:	movw	r2, #647	; 0x287
   14210:	ldr	r1, [pc, #32]	; 14238 <flatcc_builder_embed_buffer@@Base+0x194>
   14214:	ldr	r0, [pc, #32]	; 1423c <flatcc_builder_embed_buffer@@Base+0x198>
   14218:	add	r3, pc, r3
   1421c:	add	r3, r3, #44	; 0x2c
   14220:	add	r1, pc, r1
   14224:	add	r0, pc, r0
   14228:	bl	11fd4 <__assert_fail@plt>
   1422c:	andeq	r5, r1, r8, lsl pc
   14230:	andeq	r0, r0, r8, asr #32
   14234:	andeq	r4, r0, ip, lsr r3
   14238:	andeq	r4, r0, r4, lsl #21
   1423c:	andeq	r4, r0, r8, lsl #22

00014240 <flatcc_builder_create_buffer@@Base>:
   14240:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14244:	mov	r4, r0
   14248:	strd	r6, [sp, #8]
   1424c:	mov	r6, r3
   14250:	strd	r8, [sp, #16]
   14254:	mov	r8, #0
   14258:	strd	sl, [sp, #24]
   1425c:	mov	sl, r1
   14260:	str	lr, [sp, #32]
   14264:	sub	sp, sp, #100	; 0x64
   14268:	ldr	r9, [sp, #140]	; 0x8c
   1426c:	add	r1, sp, #136	; 0x88
   14270:	str	r8, [sp, #20]
   14274:	ldr	r5, [pc, #496]	; 1446c <flatcc_builder_create_buffer@@Base+0x22c>
   14278:	and	r7, r9, #1
   1427c:	mov	r3, r7
   14280:	bl	13678 <flatcc_builder_default_alloc@@Base+0x190>
   14284:	cmp	r0, r8
   14288:	add	r5, pc, r5
   1428c:	bne	143e0 <flatcc_builder_create_buffer@@Base+0x1a0>
   14290:	ldrh	r2, [r4, #128]	; 0x80
   14294:	ldrh	r3, [sp, #136]	; 0x88
   14298:	ldr	ip, [r4, #136]	; 0x88
   1429c:	cmp	r2, r3
   142a0:	strhcc	r3, [r4, #128]	; 0x80
   142a4:	cmp	sl, #0
   142a8:	ldrne	r2, [sl]
   142ac:	ldreq	lr, [sp, #20]
   142b0:	movne	lr, r2
   142b4:	strne	r2, [sp, #20]
   142b8:	sub	r2, r3, #1
   142bc:	sub	r3, ip, #4
   142c0:	cmp	lr, #0
   142c4:	movne	lr, #4
   142c8:	tst	r9, #2
   142cc:	movne	r0, #4
   142d0:	moveq	r0, #0
   142d4:	sub	r3, r3, lr
   142d8:	ands	r1, r9, #3
   142dc:	sub	r3, r3, r0
   142e0:	and	r3, r3, r2
   142e4:	bne	14400 <flatcc_builder_create_buffer@@Base+0x1c0>
   142e8:	mov	r9, r1
   142ec:	mov	r8, #1
   142f0:	mov	r0, #4
   142f4:	add	sl, sp, #96	; 0x60
   142f8:	add	r2, r9, #1
   142fc:	str	r0, [sp, #24]
   14300:	add	r2, sl, r2, lsl #3
   14304:	mov	fp, #4
   14308:	add	sl, sp, #12
   1430c:	cmp	lr, #0
   14310:	str	r8, [sp, #28]
   14314:	strd	sl, [r2, #-72]	; 0xffffffb8
   14318:	beq	14344 <flatcc_builder_create_buffer@@Base+0x104>
   1431c:	add	r2, sp, #96	; 0x60
   14320:	add	r8, r8, #1
   14324:	add	r8, r2, r8, lsl #3
   14328:	add	r0, r0, lr
   1432c:	add	r9, r9, #2
   14330:	add	r2, sp, #20
   14334:	str	r0, [sp, #24]
   14338:	str	r2, [r8, #-72]	; 0xffffffb8
   1433c:	str	lr, [r8, #-68]	; 0xffffffbc
   14340:	str	r9, [sp, #28]
   14344:	cmp	r3, #0
   14348:	beq	14378 <flatcc_builder_create_buffer@@Base+0x138>
   1434c:	ldr	lr, [pc, #284]	; 14470 <flatcc_builder_create_buffer@@Base+0x230>
   14350:	add	r0, r0, r3
   14354:	ldr	r2, [sp, #28]
   14358:	str	r0, [sp, #24]
   1435c:	ldr	r5, [r5, lr]
   14360:	add	lr, sp, #96	; 0x60
   14364:	add	r2, r2, #1
   14368:	add	lr, lr, r2, lsl #3
   1436c:	str	r2, [sp, #28]
   14370:	str	r5, [lr, #-72]	; 0xffffffb8
   14374:	str	r3, [lr, #-68]	; 0xffffffbc
   14378:	sub	r5, ip, r0
   1437c:	cmp	r1, #0
   14380:	mov	r2, r5
   14384:	addne	r2, r5, #4
   14388:	cmp	r7, #0
   1438c:	sub	r6, r6, r2
   14390:	ldrne	r3, [r4, #144]	; 0x90
   14394:	mov	r8, r5
   14398:	str	r6, [sp, #12]
   1439c:	ldreq	r3, [r4, #140]	; 0x8c
   143a0:	cmp	ip, r5
   143a4:	sub	r3, r3, r2
   143a8:	str	r3, [sp, #16]
   143ac:	ble	14444 <flatcc_builder_create_buffer@@Base+0x204>
   143b0:	mov	r3, r5
   143b4:	add	r1, sp, #32
   143b8:	str	r0, [sp]
   143bc:	ldr	r2, [sp, #28]
   143c0:	ldr	r0, [r4, #36]	; 0x24
   143c4:	ldr	r6, [r4, #44]	; 0x2c
   143c8:	blx	r6
   143cc:	cmp	r0, #0
   143d0:	bne	14468 <flatcc_builder_create_buffer@@Base+0x228>
   143d4:	cmp	r5, #0
   143d8:	str	r5, [r4, #136]	; 0x88
   143dc:	beq	14420 <flatcc_builder_create_buffer@@Base+0x1e0>
   143e0:	mov	r0, r8
   143e4:	add	sp, sp, #100	; 0x64
   143e8:	ldrd	r4, [sp]
   143ec:	ldrd	r6, [sp, #8]
   143f0:	ldrd	r8, [sp, #16]
   143f4:	ldrd	sl, [sp, #24]
   143f8:	add	sp, sp, #32
   143fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14400:	mov	sl, #4
   14404:	add	r2, sp, #16
   14408:	mov	r8, #2
   1440c:	mov	r9, #1
   14410:	mov	r0, #8
   14414:	str	r2, [sp, #32]
   14418:	str	sl, [sp, #36]	; 0x24
   1441c:	b	142f4 <flatcc_builder_create_buffer@@Base+0xb4>
   14420:	ldr	r3, [pc, #76]	; 14474 <flatcc_builder_create_buffer@@Base+0x234>
   14424:	mov	r2, #772	; 0x304
   14428:	ldr	r1, [pc, #72]	; 14478 <flatcc_builder_create_buffer@@Base+0x238>
   1442c:	ldr	r0, [pc, #72]	; 1447c <flatcc_builder_create_buffer@@Base+0x23c>
   14430:	add	r3, pc, r3
   14434:	add	r3, r3, #204	; 0xcc
   14438:	add	r1, pc, r1
   1443c:	add	r0, pc, r0
   14440:	bl	11fd4 <__assert_fail@plt>
   14444:	ldr	r3, [pc, #52]	; 14480 <flatcc_builder_create_buffer@@Base+0x240>
   14448:	movw	r2, #647	; 0x287
   1444c:	ldr	r1, [pc, #48]	; 14484 <flatcc_builder_create_buffer@@Base+0x244>
   14450:	ldr	r0, [pc, #48]	; 14488 <flatcc_builder_create_buffer@@Base+0x248>
   14454:	add	r3, pc, r3
   14458:	add	r3, r3, #44	; 0x2c
   1445c:	add	r1, pc, r1
   14460:	add	r0, pc, r0
   14464:	bl	11fd4 <__assert_fail@plt>
   14468:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   1446c:	andeq	r5, r1, r0, ror sp
   14470:	andeq	r0, r0, r8, asr #32
   14474:	andeq	r4, r0, r4, lsr #2
   14478:	andeq	r4, r0, ip, ror #16
   1447c:	strdeq	r4, [r0], -r0
   14480:	andeq	r4, r0, r0, lsl #2
   14484:	andeq	r4, r0, r8, asr #16
   14488:	andeq	r4, r0, ip, asr #17

0001448c <flatcc_builder_create_struct@@Base>:
   1448c:	ldr	ip, [pc, #316]	; 145d0 <flatcc_builder_create_struct@@Base+0x144>
   14490:	cmp	r3, #0
   14494:	strd	r4, [sp, #-20]!	; 0xffffffec
   14498:	strd	r6, [sp, #8]
   1449c:	str	lr, [sp, #16]
   144a0:	sub	sp, sp, #84	; 0x54
   144a4:	add	ip, pc, ip
   144a8:	beq	145ac <flatcc_builder_create_struct@@Base+0x120>
   144ac:	mov	r4, r0
   144b0:	ldrh	r0, [r0, #128]	; 0x80
   144b4:	ldr	lr, [r4, #136]	; 0x88
   144b8:	cmp	r0, r3
   144bc:	mov	r0, #0
   144c0:	strhcc	r3, [r4, #128]	; 0x80
   144c4:	sub	r5, lr, r2
   144c8:	sub	r3, r3, #1
   144cc:	cmp	r2, r0
   144d0:	and	r3, r3, r5
   144d4:	str	r0, [sp, #8]
   144d8:	str	r0, [sp, #12]
   144dc:	bne	14560 <flatcc_builder_create_struct@@Base+0xd4>
   144e0:	cmp	r3, #0
   144e4:	movne	r2, r3
   144e8:	movne	r6, #1
   144ec:	beq	14584 <flatcc_builder_create_struct@@Base+0xf8>
   144f0:	ldr	r1, [pc, #220]	; 145d4 <flatcc_builder_create_struct@@Base+0x148>
   144f4:	add	r0, r0, #1
   144f8:	add	r7, sp, #80	; 0x50
   144fc:	str	r2, [sp, #8]
   14500:	add	r0, r7, r0, lsl #3
   14504:	sub	r5, lr, r2
   14508:	ldr	r1, [ip, r1]
   1450c:	str	r6, [sp, #12]
   14510:	str	r1, [r0, #-72]	; 0xffffffb8
   14514:	str	r3, [r0, #-68]	; 0xffffffbc
   14518:	cmp	lr, r5
   1451c:	ble	14584 <flatcc_builder_create_struct@@Base+0xf8>
   14520:	mov	r3, r5
   14524:	add	r1, sp, #16
   14528:	str	r2, [sp]
   1452c:	ldr	r2, [sp, #12]
   14530:	ldr	r0, [r4, #36]	; 0x24
   14534:	ldr	r6, [r4, #44]	; 0x2c
   14538:	blx	r6
   1453c:	cmp	r0, #0
   14540:	bne	145a8 <flatcc_builder_create_struct@@Base+0x11c>
   14544:	mov	r0, r5
   14548:	str	r5, [r4, #136]	; 0x88
   1454c:	add	sp, sp, #84	; 0x54
   14550:	ldrd	r4, [sp]
   14554:	ldrd	r6, [sp, #8]
   14558:	add	sp, sp, #16
   1455c:	pop	{pc}		; (ldr pc, [sp], #4)
   14560:	mov	r0, #1
   14564:	cmp	r3, #0
   14568:	str	r2, [sp, #8]
   1456c:	movne	r6, #2
   14570:	strd	r0, [sp, #12]
   14574:	str	r2, [sp, #20]
   14578:	addne	r2, r2, r3
   1457c:	beq	14518 <flatcc_builder_create_struct@@Base+0x8c>
   14580:	b	144f0 <flatcc_builder_create_struct@@Base+0x64>
   14584:	ldr	r3, [pc, #76]	; 145d8 <flatcc_builder_create_struct@@Base+0x14c>
   14588:	movw	r2, #647	; 0x287
   1458c:	ldr	r1, [pc, #72]	; 145dc <flatcc_builder_create_struct@@Base+0x150>
   14590:	ldr	r0, [pc, #72]	; 145e0 <flatcc_builder_create_struct@@Base+0x154>
   14594:	add	r3, pc, r3
   14598:	add	r3, r3, #44	; 0x2c
   1459c:	add	r1, pc, r1
   145a0:	add	r0, pc, r0
   145a4:	bl	11fd4 <__assert_fail@plt>
   145a8:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   145ac:	ldr	r3, [pc, #48]	; 145e4 <flatcc_builder_create_struct@@Base+0x158>
   145b0:	movw	r2, #783	; 0x30f
   145b4:	ldr	r1, [pc, #44]	; 145e8 <flatcc_builder_create_struct@@Base+0x15c>
   145b8:	ldr	r0, [pc, #44]	; 145ec <flatcc_builder_create_struct@@Base+0x160>
   145bc:	add	r3, pc, r3
   145c0:	add	r3, r3, #236	; 0xec
   145c4:	add	r1, pc, r1
   145c8:	add	r0, pc, r0
   145cc:	bl	11fd4 <__assert_fail@plt>
   145d0:	andeq	r5, r1, r4, asr fp
   145d4:	andeq	r0, r0, r8, asr #32
   145d8:	andeq	r3, r0, r0, asr #31
   145dc:	andeq	r4, r0, r8, lsl #14
   145e0:	andeq	r4, r0, ip, lsl #15
   145e4:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   145e8:	andeq	r4, r0, r0, ror #13
   145ec:	andeq	r4, r0, r8, asr #15

000145f0 <flatcc_builder_start_buffer@@Base>:
   145f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   145f4:	mov	r5, r1
   145f8:	mov	r4, r0
   145fc:	ldrh	r1, [r0, #128]	; 0x80
   14600:	strd	r6, [sp, #8]
   14604:	mov	r7, r3
   14608:	ldr	r6, [pc, #180]	; 146c4 <flatcc_builder_start_buffer@@Base+0xd4>
   1460c:	strd	r8, [sp, #16]
   14610:	mov	r8, r2
   14614:	str	sl, [sp, #24]
   14618:	str	lr, [sp, #28]
   1461c:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   14620:	cmp	r0, #0
   14624:	add	r6, pc, r6
   14628:	bne	146bc <flatcc_builder_start_buffer@@Base+0xcc>
   1462c:	mov	r3, #1
   14630:	ldrh	r9, [r4, #132]	; 0x84
   14634:	cmp	r5, #0
   14638:	ldr	ip, [r4, #148]	; 0x94
   1463c:	strh	r3, [r4, #128]	; 0x80
   14640:	ldr	r1, [r4, #32]
   14644:	ldr	lr, [r4, #136]	; 0x88
   14648:	add	r2, ip, r3
   1464c:	ldrh	r3, [r4, #164]	; 0xa4
   14650:	strh	r9, [r1, #34]	; 0x22
   14654:	strh	r8, [r4, #132]	; 0x84
   14658:	ldr	r9, [r4, #144]	; 0x90
   1465c:	ldr	r8, [r4, #152]	; 0x98
   14660:	strh	r3, [r1, #32]
   14664:	ldr	r3, [r4, #168]	; 0xa8
   14668:	strh	r7, [r4, #164]	; 0xa4
   1466c:	str	r9, [r1, #20]
   14670:	str	r8, [r1, #28]
   14674:	str	lr, [r4, #144]	; 0x90
   14678:	str	r2, [r4, #148]	; 0x94
   1467c:	str	ip, [r4, #152]	; 0x98
   14680:	str	r3, [r1, #16]
   14684:	beq	146b0 <flatcc_builder_start_buffer@@Base+0xc0>
   14688:	ldr	r2, [r5]
   1468c:	mov	r3, #1
   14690:	str	r2, [r4, #168]	; 0xa8
   14694:	strh	r3, [r1, #14]
   14698:	ldrd	r4, [sp]
   1469c:	ldrd	r6, [sp, #8]
   146a0:	ldrd	r8, [sp, #16]
   146a4:	ldr	sl, [sp, #24]
   146a8:	add	sp, sp, #28
   146ac:	pop	{pc}		; (ldr pc, [sp], #4)
   146b0:	ldr	r3, [pc, #16]	; 146c8 <flatcc_builder_start_buffer@@Base+0xd8>
   146b4:	ldr	r5, [r6, r3]
   146b8:	b	14688 <flatcc_builder_start_buffer@@Base+0x98>
   146bc:	mvn	r0, #0
   146c0:	b	14698 <flatcc_builder_start_buffer@@Base+0xa8>
   146c4:	ldrdeq	r5, [r1], -r4
   146c8:	andeq	r0, r0, r8, asr #32

000146cc <flatcc_builder_end_buffer@@Base>:
   146cc:	ldr	ip, [r0, #32]
   146d0:	strd	r4, [sp, #-16]!
   146d4:	mov	r4, r0
   146d8:	ldrh	r2, [r0, #164]	; 0xa4
   146dc:	ldr	r0, [r0, #152]	; 0x98
   146e0:	ldrh	ip, [ip, #14]
   146e4:	and	r2, r2, #2
   146e8:	str	r6, [sp, #8]
   146ec:	str	lr, [sp, #12]
   146f0:	sub	sp, sp, #8
   146f4:	cmp	r0, #0
   146f8:	moveq	r0, r2
   146fc:	orrne	r0, r2, #1
   14700:	cmp	ip, #1
   14704:	bne	147ec <flatcc_builder_end_buffer@@Base+0x120>
   14708:	ldrh	r2, [r4, #132]	; 0x84
   1470c:	mov	r3, r1
   14710:	add	r1, r4, #168	; 0xa8
   14714:	ldrh	ip, [r4, #128]	; 0x80
   14718:	cmp	r2, ip
   1471c:	movhi	ip, r2
   14720:	strhhi	r2, [r4, #128]	; 0x80
   14724:	str	ip, [sp]
   14728:	str	r0, [sp, #4]
   1472c:	mov	r0, r4
   14730:	bl	14240 <flatcc_builder_create_buffer@@Base>
   14734:	subs	r5, r0, #0
   14738:	beq	147d4 <flatcc_builder_end_buffer@@Base+0x108>
   1473c:	mov	r1, #0
   14740:	ldr	r0, [r4, #16]
   14744:	ldr	r3, [r4, #32]
   14748:	ldr	r2, [r4, #20]
   1474c:	ldrh	lr, [r3, #32]
   14750:	ldr	ip, [r3, #16]
   14754:	ldr	r6, [r3, #20]
   14758:	ldr	r3, [r3, #28]
   1475c:	str	r6, [r4, #144]	; 0x90
   14760:	strh	lr, [r4, #164]	; 0xa4
   14764:	str	r3, [r4, #152]	; 0x98
   14768:	str	ip, [r4, #168]	; 0xa8
   1476c:	bl	11fb0 <memset@plt>
   14770:	ldr	r3, [r4, #32]
   14774:	ldr	r0, [r4, #60]	; 0x3c
   14778:	ldr	r2, [r4, #64]	; 0x40
   1477c:	ldr	ip, [r3]
   14780:	ldmib	r3, {r1, lr}
   14784:	add	r0, r0, ip
   14788:	sub	r2, r2, ip
   1478c:	str	r0, [r4, #16]
   14790:	cmp	r2, r1
   14794:	ldrh	r0, [r4, #128]	; 0x80
   14798:	movcs	r2, r1
   1479c:	str	lr, [r4, #20]
   147a0:	str	ip, [r4, #28]
   147a4:	ldrh	ip, [r4, #130]	; 0x82
   147a8:	str	r2, [r4, #24]
   147ac:	ldr	r2, [r4, #156]	; 0x9c
   147b0:	str	r1, [r3, #4]
   147b4:	cmp	r0, ip
   147b8:	sub	r0, r3, #36	; 0x24
   147bc:	strhcc	ip, [r4, #128]	; 0x80
   147c0:	ldrh	r1, [r3, #12]
   147c4:	sub	r3, r2, #1
   147c8:	str	r0, [r4, #32]
   147cc:	strh	r1, [r4, #130]	; 0x82
   147d0:	str	r3, [r4, #156]	; 0x9c
   147d4:	mov	r0, r5
   147d8:	add	sp, sp, #8
   147dc:	ldrd	r4, [sp]
   147e0:	ldr	r6, [sp, #8]
   147e4:	add	sp, sp, #12
   147e8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ec:	ldr	r3, [pc, #28]	; 14810 <flatcc_builder_end_buffer@@Base+0x144>
   147f0:	movw	r2, #838	; 0x346
   147f4:	ldr	r1, [pc, #24]	; 14814 <flatcc_builder_end_buffer@@Base+0x148>
   147f8:	ldr	r0, [pc, #24]	; 14818 <flatcc_builder_end_buffer@@Base+0x14c>
   147fc:	add	r3, pc, r3
   14800:	add	r3, r3, #268	; 0x10c
   14804:	add	r1, pc, r1
   14808:	add	r0, pc, r0
   1480c:	bl	11fd4 <__assert_fail@plt>
   14810:	andeq	r3, r0, r8, asr sp
   14814:	andeq	r4, r0, r0, lsr #9
   14818:	muleq	r0, r4, r5

0001481c <flatcc_builder_start_struct@@Base>:
   1481c:	strd	r4, [sp, #-16]!
   14820:	mov	r5, r1
   14824:	mov	r1, r2
   14828:	mov	r4, r0
   1482c:	str	r6, [sp, #8]
   14830:	str	lr, [sp, #12]
   14834:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   14838:	cmp	r0, #0
   1483c:	bne	148c4 <flatcc_builder_start_struct@@Base+0xa8>
   14840:	ldr	r6, [r4, #20]
   14844:	mov	ip, #2
   14848:	ldr	r2, [r4, #28]
   1484c:	ldr	r3, [r4, #64]	; 0x40
   14850:	add	r5, r5, r6
   14854:	ldr	r0, [r4, #60]	; 0x3c
   14858:	ldr	r1, [r4, #32]
   1485c:	sub	r3, r3, r2
   14860:	cmn	r3, #4
   14864:	add	r0, r0, r2
   14868:	mvnhi	r2, #3
   1486c:	movhi	r3, r2
   14870:	strh	ip, [r1, #14]
   14874:	strhi	r2, [r4, #24]
   14878:	mvn	r2, #3
   1487c:	strls	r3, [r4, #24]
   14880:	cmp	r5, r3
   14884:	str	r0, [r4, #16]
   14888:	str	r2, [r1, #4]
   1488c:	str	r5, [r4, #20]
   14890:	bcs	148a8 <flatcc_builder_start_struct@@Base+0x8c>
   14894:	add	r0, r0, r6
   14898:	ldrd	r4, [sp]
   1489c:	ldr	r6, [sp, #8]
   148a0:	add	sp, sp, #12
   148a4:	pop	{pc}		; (ldr pc, [sp], #4)
   148a8:	add	r1, r5, #1
   148ac:	mov	r0, r4
   148b0:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   148b4:	cmp	r0, #0
   148b8:	bne	148c4 <flatcc_builder_start_struct@@Base+0xa8>
   148bc:	ldr	r0, [r4, #16]
   148c0:	b	14894 <flatcc_builder_start_struct@@Base+0x78>
   148c4:	ldrd	r4, [sp]
   148c8:	mov	r0, #0
   148cc:	ldr	r6, [sp, #8]
   148d0:	add	sp, sp, #12
   148d4:	pop	{pc}		; (ldr pc, [sp], #4)

000148d8 <flatcc_builder_struct_edit@@Base>:
   148d8:	ldr	r0, [r0, #16]
   148dc:	bx	lr

000148e0 <flatcc_builder_end_struct@@Base>:
   148e0:	ldr	r3, [r0, #32]
   148e4:	strd	r4, [sp, #-16]!
   148e8:	ldrh	r3, [r3, #14]
   148ec:	str	r6, [sp, #8]
   148f0:	str	lr, [sp, #12]
   148f4:	cmp	r3, #2
   148f8:	bne	149a0 <flatcc_builder_end_struct@@Base+0xc0>
   148fc:	ldrh	r3, [r0, #130]	; 0x82
   14900:	mov	r4, r0
   14904:	ldr	r1, [r0, #16]
   14908:	ldr	r2, [r0, #20]
   1490c:	bl	1448c <flatcc_builder_create_struct@@Base>
   14910:	subs	r5, r0, #0
   14914:	beq	1498c <flatcc_builder_end_struct@@Base+0xac>
   14918:	mov	r1, #0
   1491c:	ldr	r0, [r4, #16]
   14920:	ldr	r2, [r4, #20]
   14924:	bl	11fb0 <memset@plt>
   14928:	ldr	r3, [r4, #32]
   1492c:	ldr	r0, [r4, #60]	; 0x3c
   14930:	ldr	r2, [r4, #64]	; 0x40
   14934:	ldr	ip, [r3]
   14938:	ldmib	r3, {r1, lr}
   1493c:	add	r0, r0, ip
   14940:	sub	r2, r2, ip
   14944:	str	r0, [r4, #16]
   14948:	cmp	r2, r1
   1494c:	ldrh	r0, [r4, #128]	; 0x80
   14950:	movcs	r2, r1
   14954:	str	lr, [r4, #20]
   14958:	str	ip, [r4, #28]
   1495c:	ldrh	ip, [r4, #130]	; 0x82
   14960:	str	r2, [r4, #24]
   14964:	ldr	r2, [r4, #156]	; 0x9c
   14968:	str	r1, [r3, #4]
   1496c:	cmp	r0, ip
   14970:	sub	r0, r3, #36	; 0x24
   14974:	strhcc	ip, [r4, #128]	; 0x80
   14978:	ldrh	r1, [r3, #12]
   1497c:	sub	r3, r2, #1
   14980:	str	r0, [r4, #32]
   14984:	strh	r1, [r4, #130]	; 0x82
   14988:	str	r3, [r4, #156]	; 0x9c
   1498c:	mov	r0, r5
   14990:	ldrd	r4, [sp]
   14994:	ldr	r6, [sp, #8]
   14998:	add	sp, sp, #12
   1499c:	pop	{pc}		; (ldr pc, [sp], #4)
   149a0:	ldr	r3, [pc, #28]	; 149c4 <flatcc_builder_end_struct@@Base+0xe4>
   149a4:	mov	r2, #872	; 0x368
   149a8:	ldr	r1, [pc, #24]	; 149c8 <flatcc_builder_end_struct@@Base+0xe8>
   149ac:	ldr	r0, [pc, #24]	; 149cc <flatcc_builder_end_struct@@Base+0xec>
   149b0:	add	r3, pc, r3
   149b4:	add	r3, r3, #296	; 0x128
   149b8:	add	r1, pc, r1
   149bc:	add	r0, pc, r0
   149c0:	bl	11fd4 <__assert_fail@plt>
   149c4:	andeq	r3, r0, r4, lsr #23
   149c8:	andeq	r4, r0, ip, ror #5
   149cc:	andeq	r4, r0, ip, lsl #8

000149d0 <flatcc_builder_extend_vector@@Base>:
   149d0:	ldr	r2, [r0, #32]
   149d4:	strd	r4, [sp, #-16]!
   149d8:	ldr	r3, [r2, #20]
   149dc:	ldr	ip, [r2, #24]
   149e0:	str	r6, [sp, #8]
   149e4:	str	lr, [sp, #12]
   149e8:	adds	r3, r1, r3
   149ec:	movcs	r4, #1
   149f0:	movcc	r4, #0
   149f4:	cmp	ip, r3
   149f8:	orrcc	r4, r4, #1
   149fc:	cmp	r4, #0
   14a00:	bne	14a5c <flatcc_builder_extend_vector@@Base+0x8c>
   14a04:	ldr	ip, [r2, #16]
   14a08:	mov	r5, r0
   14a0c:	ldr	r6, [r0, #20]
   14a10:	str	r3, [r2, #20]
   14a14:	ldr	r3, [r0, #24]
   14a18:	mla	r1, ip, r1, r6
   14a1c:	cmp	r1, r3
   14a20:	str	r1, [r0, #20]
   14a24:	bcs	14a40 <flatcc_builder_extend_vector@@Base+0x70>
   14a28:	ldr	r0, [r5, #16]
   14a2c:	add	r0, r0, r6
   14a30:	ldrd	r4, [sp]
   14a34:	ldr	r6, [sp, #8]
   14a38:	add	sp, sp, #12
   14a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a40:	add	r1, r1, #1
   14a44:	mvn	r2, #3
   14a48:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14a4c:	cmp	r0, #0
   14a50:	beq	14a28 <flatcc_builder_extend_vector@@Base+0x58>
   14a54:	mov	r0, r4
   14a58:	b	14a30 <flatcc_builder_extend_vector@@Base+0x60>
   14a5c:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>

00014a60 <flatcc_builder_vector_push@@Base>:
   14a60:	ldr	r3, [r0, #32]
   14a64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a68:	ldrh	r2, [r3, #14]
   14a6c:	strd	r6, [sp, #8]
   14a70:	str	r8, [sp, #16]
   14a74:	str	lr, [sp, #20]
   14a78:	cmp	r2, #4
   14a7c:	bne	14b10 <flatcc_builder_vector_push@@Base+0xb0>
   14a80:	mov	r7, r1
   14a84:	ldr	r2, [r3, #20]
   14a88:	ldr	r1, [r3, #24]
   14a8c:	cmp	r2, r1
   14a90:	bhi	14b34 <flatcc_builder_vector_push@@Base+0xd4>
   14a94:	add	r2, r2, #1
   14a98:	ldr	r6, [r3, #16]
   14a9c:	mov	r4, r0
   14aa0:	ldr	r5, [r0, #20]
   14aa4:	str	r2, [r3, #20]
   14aa8:	ldr	r3, [r0, #24]
   14aac:	add	r1, r6, r5
   14ab0:	cmp	r1, r3
   14ab4:	str	r1, [r0, #20]
   14ab8:	bcs	14af4 <flatcc_builder_vector_push@@Base+0x94>
   14abc:	ldr	r3, [r4, #16]
   14ac0:	adds	r3, r3, r5
   14ac4:	beq	14adc <flatcc_builder_vector_push@@Base+0x7c>
   14ac8:	mov	r0, r3
   14acc:	mov	r2, r6
   14ad0:	mov	r1, r7
   14ad4:	bl	11f44 <memcpy@plt>
   14ad8:	mov	r3, r0
   14adc:	ldrd	r4, [sp]
   14ae0:	mov	r0, r3
   14ae4:	ldrd	r6, [sp, #8]
   14ae8:	ldr	r8, [sp, #16]
   14aec:	add	sp, sp, #20
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	add	r1, r1, #1
   14af8:	mvn	r2, #3
   14afc:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14b00:	cmp	r0, #0
   14b04:	beq	14abc <flatcc_builder_vector_push@@Base+0x5c>
   14b08:	mov	r3, #0
   14b0c:	b	14adc <flatcc_builder_vector_push@@Base+0x7c>
   14b10:	ldr	r3, [pc, #64]	; 14b58 <flatcc_builder_vector_push@@Base+0xf8>
   14b14:	movw	r2, #907	; 0x38b
   14b18:	ldr	r1, [pc, #60]	; 14b5c <flatcc_builder_vector_push@@Base+0xfc>
   14b1c:	ldr	r0, [pc, #60]	; 14b60 <flatcc_builder_vector_push@@Base+0x100>
   14b20:	add	r3, pc, r3
   14b24:	add	r3, r3, #324	; 0x144
   14b28:	add	r1, pc, r1
   14b2c:	add	r0, pc, r0
   14b30:	bl	11fd4 <__assert_fail@plt>
   14b34:	ldr	r3, [pc, #40]	; 14b64 <flatcc_builder_vector_push@@Base+0x104>
   14b38:	mov	r2, #908	; 0x38c
   14b3c:	ldr	r1, [pc, #36]	; 14b68 <flatcc_builder_vector_push@@Base+0x108>
   14b40:	ldr	r0, [pc, #36]	; 14b6c <flatcc_builder_vector_push@@Base+0x10c>
   14b44:	add	r3, pc, r3
   14b48:	add	r3, r3, #324	; 0x144
   14b4c:	add	r1, pc, r1
   14b50:	add	r0, pc, r0
   14b54:	bl	11fd4 <__assert_fail@plt>
   14b58:	andeq	r3, r0, r4, lsr sl
   14b5c:	andeq	r4, r0, ip, ror r1
   14b60:	andeq	r4, r0, r8, asr #5
   14b64:	andeq	r3, r0, r0, lsl sl
   14b68:	andeq	r4, r0, r8, asr r1
   14b6c:	ldrdeq	r4, [r0], -r0

00014b70 <flatcc_builder_append_vector@@Base>:
   14b70:	ldr	ip, [r0, #32]
   14b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b78:	ldrh	r3, [ip, #14]
   14b7c:	strd	r6, [sp, #8]
   14b80:	str	r8, [sp, #16]
   14b84:	str	lr, [sp, #20]
   14b88:	cmp	r3, #4
   14b8c:	bne	14c38 <flatcc_builder_append_vector@@Base+0xc8>
   14b90:	mov	r6, r1
   14b94:	ldr	r1, [ip, #20]
   14b98:	ldr	r4, [ip, #24]
   14b9c:	adds	r1, r2, r1
   14ba0:	movcs	r3, #1
   14ba4:	movcc	r3, #0
   14ba8:	cmp	r4, r1
   14bac:	movcs	r4, r3
   14bb0:	orrcc	r4, r3, #1
   14bb4:	cmp	r4, #0
   14bb8:	bne	14c5c <flatcc_builder_append_vector@@Base+0xec>
   14bbc:	ldr	r7, [ip, #16]
   14bc0:	mov	r5, r0
   14bc4:	ldr	r8, [r0, #20]
   14bc8:	ldr	r3, [r0, #24]
   14bcc:	mul	r7, r7, r2
   14bd0:	str	r1, [ip, #20]
   14bd4:	add	r1, r7, r8
   14bd8:	cmp	r1, r3
   14bdc:	str	r1, [r0, #20]
   14be0:	bcs	14c1c <flatcc_builder_append_vector@@Base+0xac>
   14be4:	ldr	r3, [r5, #16]
   14be8:	adds	r3, r3, r8
   14bec:	beq	14c04 <flatcc_builder_append_vector@@Base+0x94>
   14bf0:	mov	r0, r3
   14bf4:	mov	r2, r7
   14bf8:	mov	r1, r6
   14bfc:	bl	11f44 <memcpy@plt>
   14c00:	mov	r3, r0
   14c04:	ldrd	r4, [sp]
   14c08:	mov	r0, r3
   14c0c:	ldrd	r6, [sp, #8]
   14c10:	ldr	r8, [sp, #16]
   14c14:	add	sp, sp, #20
   14c18:	pop	{pc}		; (ldr pc, [sp], #4)
   14c1c:	add	r1, r1, #1
   14c20:	mvn	r2, #3
   14c24:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14c28:	cmp	r0, #0
   14c2c:	beq	14be4 <flatcc_builder_append_vector@@Base+0x74>
   14c30:	mov	r3, r4
   14c34:	b	14c04 <flatcc_builder_append_vector@@Base+0x94>
   14c38:	ldr	r3, [pc, #32]	; 14c60 <flatcc_builder_append_vector@@Base+0xf0>
   14c3c:	movw	r2, #915	; 0x393
   14c40:	ldr	r1, [pc, #28]	; 14c64 <flatcc_builder_append_vector@@Base+0xf4>
   14c44:	ldr	r0, [pc, #28]	; 14c68 <flatcc_builder_append_vector@@Base+0xf8>
   14c48:	add	r3, pc, r3
   14c4c:	add	r3, r3, #352	; 0x160
   14c50:	add	r1, pc, r1
   14c54:	add	r0, pc, r0
   14c58:	bl	11fd4 <__assert_fail@plt>
   14c5c:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>
   14c60:	andeq	r3, r0, ip, lsl #18
   14c64:	andeq	r4, r0, r4, asr r0
   14c68:	andeq	r4, r0, r0, lsr #3

00014c6c <flatcc_builder_extend_offset_vector@@Base>:
   14c6c:	ldr	ip, [r0, #32]
   14c70:	strd	r4, [sp, #-16]!
   14c74:	ldr	r3, [ip, #20]
   14c78:	str	r6, [sp, #8]
   14c7c:	str	lr, [sp, #12]
   14c80:	adds	r2, r1, r3
   14c84:	movcs	r3, #1
   14c88:	movcc	r3, #0
   14c8c:	cmn	r2, #-1073741823	; 0xc0000001
   14c90:	movls	r4, #0
   14c94:	movhi	r4, #1
   14c98:	orrs	r4, r3, r4
   14c9c:	bne	14cf4 <flatcc_builder_extend_offset_vector@@Base+0x88>
   14ca0:	ldr	r6, [r0, #20]
   14ca4:	mov	r5, r0
   14ca8:	ldr	r3, [r0, #24]
   14cac:	str	r2, [ip, #20]
   14cb0:	add	r1, r6, r1, lsl #2
   14cb4:	cmp	r1, r3
   14cb8:	str	r1, [r0, #20]
   14cbc:	bcs	14cd8 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   14cc0:	ldr	r0, [r5, #16]
   14cc4:	add	r0, r0, r6
   14cc8:	ldrd	r4, [sp]
   14ccc:	ldr	r6, [sp, #8]
   14cd0:	add	sp, sp, #12
   14cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd8:	add	r1, r1, #1
   14cdc:	mvn	r2, #3
   14ce0:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14ce4:	cmp	r0, #0
   14ce8:	beq	14cc0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   14cec:	mov	r0, r4
   14cf0:	b	14cc8 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14cf4:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>

00014cf8 <flatcc_builder_offset_vector_push@@Base>:
   14cf8:	ldr	r2, [r0, #32]
   14cfc:	strd	r4, [sp, #-16]!
   14d00:	ldrh	r3, [r2, #14]
   14d04:	str	r6, [sp, #8]
   14d08:	str	lr, [sp, #12]
   14d0c:	cmp	r3, #5
   14d10:	bne	14d8c <flatcc_builder_offset_vector_push@@Base+0x94>
   14d14:	ldr	r3, [r2, #20]
   14d18:	cmn	r3, #-1073741823	; 0xc0000001
   14d1c:	beq	14d78 <flatcc_builder_offset_vector_push@@Base+0x80>
   14d20:	ldr	r5, [r0, #20]
   14d24:	mov	r6, r1
   14d28:	add	r3, r3, #1
   14d2c:	mov	r4, r0
   14d30:	ldr	r1, [r0, #24]
   14d34:	str	r3, [r2, #20]
   14d38:	add	r3, r5, #4
   14d3c:	cmp	r3, r1
   14d40:	str	r3, [r0, #20]
   14d44:	bcs	14d64 <flatcc_builder_offset_vector_push@@Base+0x6c>
   14d48:	ldr	r3, [r4, #16]
   14d4c:	adds	r0, r3, r5
   14d50:	strne	r6, [r3, r5]
   14d54:	ldrd	r4, [sp]
   14d58:	ldr	r6, [sp, #8]
   14d5c:	add	sp, sp, #12
   14d60:	pop	{pc}		; (ldr pc, [sp], #4)
   14d64:	mvn	r2, #3
   14d68:	add	r1, r5, #5
   14d6c:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14d70:	cmp	r0, #0
   14d74:	beq	14d48 <flatcc_builder_offset_vector_push@@Base+0x50>
   14d78:	ldrd	r4, [sp]
   14d7c:	mov	r0, #0
   14d80:	ldr	r6, [sp, #8]
   14d84:	add	sp, sp, #12
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	ldr	r3, [pc, #28]	; 14db0 <flatcc_builder_offset_vector_push@@Base+0xb8>
   14d90:	movw	r2, #934	; 0x3a6
   14d94:	ldr	r1, [pc, #24]	; 14db4 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14d98:	ldr	r0, [pc, #24]	; 14db8 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14d9c:	add	r3, pc, r3
   14da0:	add	r3, r3, #384	; 0x180
   14da4:	add	r1, pc, r1
   14da8:	add	r0, pc, r0
   14dac:	bl	11fd4 <__assert_fail@plt>
   14db0:			; <UNDEFINED> instruction: 0x000037b8
   14db4:	andeq	r3, r0, r0, lsl #30
   14db8:	strheq	r4, [r0], -r8

00014dbc <flatcc_builder_append_offset_vector@@Base>:
   14dbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14dc0:	mov	r4, r1
   14dc4:	ldr	r1, [r0, #32]
   14dc8:	ldrh	r3, [r1, #14]
   14dcc:	strd	r6, [sp, #8]
   14dd0:	str	r8, [sp, #16]
   14dd4:	str	lr, [sp, #20]
   14dd8:	cmp	r3, #5
   14ddc:	bne	14e7c <flatcc_builder_append_offset_vector@@Base+0xc0>
   14de0:	ldr	r3, [r1, #20]
   14de4:	adds	r3, r2, r3
   14de8:	movcs	lr, #1
   14dec:	movcc	lr, #0
   14df0:	cmn	r3, #-1073741823	; 0xc0000001
   14df4:	movls	ip, #0
   14df8:	movhi	ip, #1
   14dfc:	orrs	r8, lr, ip
   14e00:	bne	14ea0 <flatcc_builder_append_offset_vector@@Base+0xe4>
   14e04:	ldr	r7, [r0, #20]
   14e08:	lsl	r6, r2, #2
   14e0c:	mov	r5, r0
   14e10:	str	r3, [r1, #20]
   14e14:	ldr	r3, [r0, #24]
   14e18:	add	r1, r6, r7
   14e1c:	cmp	r1, r3
   14e20:	str	r1, [r0, #20]
   14e24:	bcs	14e60 <flatcc_builder_append_offset_vector@@Base+0xa4>
   14e28:	ldr	r3, [r5, #16]
   14e2c:	adds	r3, r3, r7
   14e30:	beq	14e48 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14e34:	mov	r0, r3
   14e38:	mov	r2, r6
   14e3c:	mov	r1, r4
   14e40:	bl	11f44 <memcpy@plt>
   14e44:	mov	r3, r0
   14e48:	ldrd	r4, [sp]
   14e4c:	mov	r0, r3
   14e50:	ldrd	r6, [sp, #8]
   14e54:	ldr	r8, [sp, #16]
   14e58:	add	sp, sp, #20
   14e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e60:	add	r1, r1, #1
   14e64:	mvn	r2, #3
   14e68:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14e6c:	cmp	r0, #0
   14e70:	beq	14e28 <flatcc_builder_append_offset_vector@@Base+0x6c>
   14e74:	mov	r3, r8
   14e78:	b	14e48 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14e7c:	ldr	r3, [pc, #32]	; 14ea4 <flatcc_builder_append_offset_vector@@Base+0xe8>
   14e80:	mov	r2, #948	; 0x3b4
   14e84:	ldr	r1, [pc, #28]	; 14ea8 <flatcc_builder_append_offset_vector@@Base+0xec>
   14e88:	ldr	r0, [pc, #28]	; 14eac <flatcc_builder_append_offset_vector@@Base+0xf0>
   14e8c:	add	r3, pc, r3
   14e90:	add	r3, r3, #420	; 0x1a4
   14e94:	add	r1, pc, r1
   14e98:	add	r0, pc, r0
   14e9c:	bl	11fd4 <__assert_fail@plt>
   14ea0:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>
   14ea4:	andeq	r3, r0, r8, asr #13
   14ea8:	andeq	r3, r0, r0, lsl lr
   14eac:	andeq	r3, r0, r8, asr #31

00014eb0 <flatcc_builder_extend_string@@Base>:
   14eb0:	ldr	r2, [r0, #32]
   14eb4:	strd	r4, [sp, #-16]!
   14eb8:	ldrh	r3, [r2, #14]
   14ebc:	str	r6, [sp, #8]
   14ec0:	str	lr, [sp, #12]
   14ec4:	cmp	r3, #6
   14ec8:	bne	14f30 <flatcc_builder_extend_string@@Base+0x80>
   14ecc:	ldr	r3, [r2, #20]
   14ed0:	adds	r3, r1, r3
   14ed4:	bcs	14f2c <flatcc_builder_extend_string@@Base+0x7c>
   14ed8:	ldr	r5, [r0, #20]
   14edc:	mov	r4, r0
   14ee0:	str	r3, [r2, #20]
   14ee4:	ldr	r3, [r0, #24]
   14ee8:	add	r1, r1, r5
   14eec:	cmp	r1, r3
   14ef0:	str	r1, [r0, #20]
   14ef4:	bcs	14f10 <flatcc_builder_extend_string@@Base+0x60>
   14ef8:	ldr	r0, [r4, #16]
   14efc:	add	r0, r0, r5
   14f00:	ldrd	r4, [sp]
   14f04:	ldr	r6, [sp, #8]
   14f08:	add	sp, sp, #12
   14f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f10:	add	r1, r1, #1
   14f14:	mvn	r2, #3
   14f18:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14f1c:	cmp	r0, #0
   14f20:	beq	14ef8 <flatcc_builder_extend_string@@Base+0x48>
   14f24:	mov	r0, #0
   14f28:	b	14f00 <flatcc_builder_extend_string@@Base+0x50>
   14f2c:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>
   14f30:	ldr	r3, [pc, #28]	; 14f54 <flatcc_builder_extend_string@@Base+0xa4>
   14f34:	movw	r2, #957	; 0x3bd
   14f38:	ldr	r1, [pc, #24]	; 14f58 <flatcc_builder_extend_string@@Base+0xa8>
   14f3c:	ldr	r0, [pc, #24]	; 14f5c <flatcc_builder_extend_string@@Base+0xac>
   14f40:	add	r3, pc, r3
   14f44:	add	r3, r3, #456	; 0x1c8
   14f48:	add	r1, pc, r1
   14f4c:	add	r0, pc, r0
   14f50:	bl	11fd4 <__assert_fail@plt>
   14f54:	andeq	r3, r0, r4, lsl r6
   14f58:	andeq	r3, r0, ip, asr sp
   14f5c:	andeq	r3, r0, r8, asr #30

00014f60 <flatcc_builder_append_string@@Base>:
   14f60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f64:	strd	r6, [sp, #8]
   14f68:	mov	r7, r1
   14f6c:	ldr	r1, [r0, #32]
   14f70:	str	r8, [sp, #16]
   14f74:	str	lr, [sp, #20]
   14f78:	ldrh	r3, [r1, #14]
   14f7c:	cmp	r3, #6
   14f80:	bne	1500c <flatcc_builder_append_string@@Base+0xac>
   14f84:	ldr	r3, [r1, #20]
   14f88:	mov	r5, r2
   14f8c:	adds	r3, r2, r3
   14f90:	bcs	15008 <flatcc_builder_append_string@@Base+0xa8>
   14f94:	ldr	r6, [r0, #20]
   14f98:	mov	r4, r0
   14f9c:	str	r3, [r1, #20]
   14fa0:	ldr	r3, [r0, #24]
   14fa4:	add	r1, r2, r6
   14fa8:	cmp	r1, r3
   14fac:	str	r1, [r0, #20]
   14fb0:	bcs	14fec <flatcc_builder_append_string@@Base+0x8c>
   14fb4:	ldr	r3, [r4, #16]
   14fb8:	adds	r3, r3, r6
   14fbc:	beq	14fd4 <flatcc_builder_append_string@@Base+0x74>
   14fc0:	mov	r0, r3
   14fc4:	mov	r2, r5
   14fc8:	mov	r1, r7
   14fcc:	bl	11f44 <memcpy@plt>
   14fd0:	mov	r3, r0
   14fd4:	ldrd	r4, [sp]
   14fd8:	mov	r0, r3
   14fdc:	ldrd	r6, [sp, #8]
   14fe0:	ldr	r8, [sp, #16]
   14fe4:	add	sp, sp, #20
   14fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fec:	add	r1, r1, #1
   14ff0:	mvn	r2, #3
   14ff4:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   14ff8:	cmp	r0, #0
   14ffc:	beq	14fb4 <flatcc_builder_append_string@@Base+0x54>
   15000:	mov	r3, #0
   15004:	b	14fd4 <flatcc_builder_append_string@@Base+0x74>
   15008:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>
   1500c:	ldr	r3, [pc, #28]	; 15030 <flatcc_builder_append_string@@Base+0xd0>
   15010:	movw	r2, #966	; 0x3c6
   15014:	ldr	r1, [pc, #24]	; 15034 <flatcc_builder_append_string@@Base+0xd4>
   15018:	ldr	r0, [pc, #24]	; 15038 <flatcc_builder_append_string@@Base+0xd8>
   1501c:	add	r3, pc, r3
   15020:	add	r3, r3, #488	; 0x1e8
   15024:	add	r1, pc, r1
   15028:	add	r0, pc, r0
   1502c:	bl	11fd4 <__assert_fail@plt>
   15030:	andeq	r3, r0, r8, lsr r5
   15034:	andeq	r3, r0, r0, lsl #25
   15038:	andeq	r3, r0, ip, ror #28

0001503c <flatcc_builder_append_string_str@@Base>:
   1503c:	strd	r4, [sp, #-16]!
   15040:	mov	r5, r0
   15044:	mov	r0, r1
   15048:	mov	r4, r1
   1504c:	str	r6, [sp, #8]
   15050:	str	lr, [sp, #12]
   15054:	bl	11f98 <strlen@plt>
   15058:	mov	r2, r0
   1505c:	mov	r1, r4
   15060:	ldr	r6, [sp, #8]
   15064:	mov	r0, r5
   15068:	ldrd	r4, [sp]
   1506c:	ldr	lr, [sp, #12]
   15070:	add	sp, sp, #16
   15074:	b	14f60 <flatcc_builder_append_string@@Base>

00015078 <flatcc_builder_append_string_strn@@Base>:
   15078:	strd	r4, [sp, #-16]!
   1507c:	mov	r4, r1
   15080:	mov	r1, #0
   15084:	str	r6, [sp, #8]
   15088:	mov	r6, r0
   1508c:	mov	r0, r4
   15090:	mov	r5, r2
   15094:	str	lr, [sp, #12]
   15098:	bl	11fbc <memchr@plt>
   1509c:	cmp	r0, #0
   150a0:	mov	r1, r4
   150a4:	ldr	lr, [sp, #12]
   150a8:	subne	r5, r0, r4
   150ac:	mov	r0, r6
   150b0:	mov	r2, r5
   150b4:	ldrd	r4, [sp]
   150b8:	ldr	r6, [sp, #8]
   150bc:	add	sp, sp, #16
   150c0:	b	14f60 <flatcc_builder_append_string@@Base>

000150c4 <flatcc_builder_truncate_vector@@Base>:
   150c4:	mov	r3, r0
   150c8:	ldr	r0, [r0, #32]
   150cc:	str	r4, [sp, #-8]!
   150d0:	ldrh	r2, [r0, #14]
   150d4:	str	lr, [sp, #4]
   150d8:	cmp	r2, #4
   150dc:	bne	1512c <flatcc_builder_truncate_vector@@Base+0x68>
   150e0:	mov	lr, r1
   150e4:	ldr	r1, [r0, #20]
   150e8:	cmp	r1, lr
   150ec:	bcc	15150 <flatcc_builder_truncate_vector@@Base+0x8c>
   150f0:	ldr	r2, [r0, #16]
   150f4:	sub	ip, r1, lr
   150f8:	mov	r1, #0
   150fc:	str	ip, [r0, #20]
   15100:	ldr	r0, [r3, #16]
   15104:	ldr	ip, [r3, #20]
   15108:	mul	r2, r2, lr
   1510c:	sub	ip, ip, r2
   15110:	add	r0, r0, ip
   15114:	str	ip, [r3, #20]
   15118:	bl	11fb0 <memset@plt>
   1511c:	ldr	r4, [sp]
   15120:	add	sp, sp, #4
   15124:	mov	r0, #0
   15128:	pop	{pc}		; (ldr pc, [sp], #4)
   1512c:	ldr	r3, [pc, #64]	; 15174 <flatcc_builder_truncate_vector@@Base+0xb0>
   15130:	movw	r2, #985	; 0x3d9
   15134:	ldr	r1, [pc, #60]	; 15178 <flatcc_builder_truncate_vector@@Base+0xb4>
   15138:	ldr	r0, [pc, #60]	; 1517c <flatcc_builder_truncate_vector@@Base+0xb8>
   1513c:	add	r3, pc, r3
   15140:	add	r3, r3, #520	; 0x208
   15144:	add	r1, pc, r1
   15148:	add	r0, pc, r0
   1514c:	bl	11fd4 <__assert_fail@plt>
   15150:	ldr	r3, [pc, #40]	; 15180 <flatcc_builder_truncate_vector@@Base+0xbc>
   15154:	movw	r2, #986	; 0x3da
   15158:	ldr	r1, [pc, #36]	; 15184 <flatcc_builder_truncate_vector@@Base+0xc0>
   1515c:	ldr	r0, [pc, #36]	; 15188 <flatcc_builder_truncate_vector@@Base+0xc4>
   15160:	add	r3, pc, r3
   15164:	add	r3, r3, #520	; 0x208
   15168:	add	r1, pc, r1
   1516c:	add	r0, pc, r0
   15170:	bl	11fd4 <__assert_fail@plt>
   15174:	andeq	r3, r0, r8, lsl r4
   15178:	andeq	r3, r0, r0, ror #22
   1517c:	andeq	r3, r0, ip, lsr #25
   15180:	strdeq	r3, [r0], -r4
   15184:	andeq	r3, r0, ip, lsr fp
   15188:	andeq	r3, r0, r4, asr sp

0001518c <flatcc_builder_truncate_offset_vector@@Base>:
   1518c:	mov	r3, r0
   15190:	ldr	r0, [r0, #32]
   15194:	str	r4, [sp, #-8]!
   15198:	ldrh	r2, [r0, #14]
   1519c:	str	lr, [sp, #4]
   151a0:	cmp	r2, #5
   151a4:	bne	151f4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   151a8:	mov	lr, r1
   151ac:	ldr	r1, [r0, #20]
   151b0:	cmp	r1, lr
   151b4:	bcc	15218 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   151b8:	ldr	r2, [r0, #16]
   151bc:	sub	ip, r1, lr
   151c0:	mov	r1, #0
   151c4:	str	ip, [r0, #20]
   151c8:	ldr	r0, [r3, #16]
   151cc:	ldr	ip, [r3, #20]
   151d0:	mul	r2, r2, lr
   151d4:	sub	ip, ip, r2
   151d8:	add	r0, r0, ip
   151dc:	str	ip, [r3, #20]
   151e0:	bl	11fb0 <memset@plt>
   151e4:	ldr	r4, [sp]
   151e8:	add	sp, sp, #4
   151ec:	mov	r0, #0
   151f0:	pop	{pc}		; (ldr pc, [sp], #4)
   151f4:	ldr	r3, [pc, #64]	; 1523c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   151f8:	movw	r2, #994	; 0x3e2
   151fc:	ldr	r1, [pc, #60]	; 15240 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   15200:	ldr	r0, [pc, #60]	; 15244 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   15204:	add	r3, pc, r3
   15208:	add	r3, r3, #552	; 0x228
   1520c:	add	r1, pc, r1
   15210:	add	r0, pc, r0
   15214:	bl	11fd4 <__assert_fail@plt>
   15218:	ldr	r3, [pc, #40]	; 15248 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   1521c:	movw	r2, #995	; 0x3e3
   15220:	ldr	r1, [pc, #36]	; 1524c <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   15224:	ldr	r0, [pc, #36]	; 15250 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   15228:	add	r3, pc, r3
   1522c:	add	r3, r3, #552	; 0x228
   15230:	add	r1, pc, r1
   15234:	add	r0, pc, r0
   15238:	bl	11fd4 <__assert_fail@plt>
   1523c:	andeq	r3, r0, r0, asr r3
   15240:	muleq	r0, r8, sl
   15244:	andeq	r3, r0, r0, asr ip
   15248:	andeq	r3, r0, ip, lsr #6
   1524c:	andeq	r3, r0, r4, ror sl
   15250:			; <UNDEFINED> instruction: 0x00003cb0

00015254 <flatcc_builder_truncate_string@@Base>:
   15254:	str	r4, [sp, #-8]!
   15258:	str	lr, [sp, #4]
   1525c:	ldr	lr, [r0, #32]
   15260:	ldrh	r2, [lr, #14]
   15264:	cmp	r2, #6
   15268:	bne	152b8 <flatcc_builder_truncate_string@@Base+0x64>
   1526c:	ldr	r2, [lr, #20]
   15270:	mov	ip, r1
   15274:	cmp	r2, r1
   15278:	bcc	152dc <flatcc_builder_truncate_string@@Base+0x88>
   1527c:	sub	r1, r2, r1
   15280:	mov	r3, r0
   15284:	ldr	r0, [r0, #16]
   15288:	mov	r2, ip
   1528c:	str	r1, [lr, #20]
   15290:	mov	r1, #0
   15294:	ldr	lr, [r3, #20]
   15298:	sub	ip, lr, ip
   1529c:	add	r0, r0, ip
   152a0:	str	ip, [r3, #20]
   152a4:	bl	11fb0 <memset@plt>
   152a8:	ldr	r4, [sp]
   152ac:	add	sp, sp, #4
   152b0:	mov	r0, #0
   152b4:	pop	{pc}		; (ldr pc, [sp], #4)
   152b8:	ldr	r3, [pc, #64]	; 15300 <flatcc_builder_truncate_string@@Base+0xac>
   152bc:	movw	r2, #1003	; 0x3eb
   152c0:	ldr	r1, [pc, #60]	; 15304 <flatcc_builder_truncate_string@@Base+0xb0>
   152c4:	ldr	r0, [pc, #60]	; 15308 <flatcc_builder_truncate_string@@Base+0xb4>
   152c8:	add	r3, pc, r3
   152cc:	add	r3, r3, #592	; 0x250
   152d0:	add	r1, pc, r1
   152d4:	add	r0, pc, r0
   152d8:	bl	11fd4 <__assert_fail@plt>
   152dc:	ldr	r3, [pc, #40]	; 1530c <flatcc_builder_truncate_string@@Base+0xb8>
   152e0:	mov	r2, #1004	; 0x3ec
   152e4:	ldr	r1, [pc, #36]	; 15310 <flatcc_builder_truncate_string@@Base+0xbc>
   152e8:	ldr	r0, [pc, #36]	; 15314 <flatcc_builder_truncate_string@@Base+0xc0>
   152ec:	add	r3, pc, r3
   152f0:	add	r3, r3, #592	; 0x250
   152f4:	add	r1, pc, r1
   152f8:	add	r0, pc, r0
   152fc:	bl	11fd4 <__assert_fail@plt>
   15300:	andeq	r3, r0, ip, lsl #5
   15304:	ldrdeq	r3, [r0], -r4
   15308:	andeq	r3, r0, r0, asr #23
   1530c:	andeq	r3, r0, r8, ror #4
   15310:			; <UNDEFINED> instruction: 0x000039b0
   15314:	andeq	r3, r0, r8, lsr #24

00015318 <flatcc_builder_start_vector@@Base>:
   15318:	cmp	r2, #4
   1531c:	strd	r4, [sp, #-16]!
   15320:	mov	r5, r1
   15324:	movcs	r1, r2
   15328:	movcc	r1, #4
   1532c:	str	r6, [sp, #8]
   15330:	mov	r4, r0
   15334:	mov	r6, r3
   15338:	str	lr, [sp, #12]
   1533c:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   15340:	cmp	r0, #0
   15344:	bne	153a0 <flatcc_builder_start_vector@@Base+0x88>
   15348:	ldr	r3, [r4, #28]
   1534c:	mov	lr, #4
   15350:	ldr	r2, [r4, #32]
   15354:	ldr	r1, [r4, #64]	; 0x40
   15358:	ldr	ip, [r4, #60]	; 0x3c
   1535c:	strh	lr, [r2, #14]
   15360:	str	r5, [r2, #16]
   15364:	sub	r1, r1, r3
   15368:	str	r0, [r2, #20]
   1536c:	cmn	r1, #4
   15370:	str	r6, [r2, #24]
   15374:	add	ip, ip, r3
   15378:	mvnhi	r3, #3
   1537c:	strls	r1, [r4, #24]
   15380:	strhi	r3, [r4, #24]
   15384:	mvn	r3, #3
   15388:	str	ip, [r4, #16]
   1538c:	str	r3, [r2, #4]
   15390:	ldrd	r4, [sp]
   15394:	ldr	r6, [sp, #8]
   15398:	add	sp, sp, #12
   1539c:	pop	{pc}		; (ldr pc, [sp], #4)
   153a0:	mvn	r0, #0
   153a4:	b	15390 <flatcc_builder_start_vector@@Base+0x78>

000153a8 <flatcc_builder_start_offset_vector@@Base>:
   153a8:	mov	r1, #4
   153ac:	strd	r4, [sp, #-16]!
   153b0:	mov	r4, r0
   153b4:	str	r6, [sp, #8]
   153b8:	str	lr, [sp, #12]
   153bc:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   153c0:	cmp	r0, #0
   153c4:	bne	1541c <flatcc_builder_start_offset_vector@@Base+0x74>
   153c8:	ldr	ip, [r4, #28]
   153cc:	mov	lr, #4
   153d0:	mov	r5, #5
   153d4:	ldr	r3, [r4, #32]
   153d8:	ldr	r2, [r4, #64]	; 0x40
   153dc:	ldr	r1, [r4, #60]	; 0x3c
   153e0:	strh	r5, [r3, #14]
   153e4:	str	lr, [r3, #16]
   153e8:	sub	r2, r2, ip
   153ec:	str	r0, [r3, #20]
   153f0:	cmn	r2, #4
   153f4:	mvnhi	r2, #3
   153f8:	add	r1, r1, ip
   153fc:	str	r1, [r4, #16]
   15400:	str	r2, [r4, #24]
   15404:	mvn	r2, #3
   15408:	str	r2, [r3, #4]
   1540c:	ldrd	r4, [sp]
   15410:	ldr	r6, [sp, #8]
   15414:	add	sp, sp, #12
   15418:	pop	{pc}		; (ldr pc, [sp], #4)
   1541c:	mvn	r0, #0
   15420:	b	1540c <flatcc_builder_start_offset_vector@@Base+0x64>

00015424 <flatcc_builder_start_string@@Base>:
   15424:	mov	r1, #1
   15428:	strd	r4, [sp, #-16]!
   1542c:	mov	r4, r0
   15430:	str	r6, [sp, #8]
   15434:	str	lr, [sp, #12]
   15438:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   1543c:	cmp	r0, #0
   15440:	bne	15498 <flatcc_builder_start_string@@Base+0x74>
   15444:	ldr	ip, [r4, #28]
   15448:	mov	lr, #1
   1544c:	mov	r5, #6
   15450:	ldr	r3, [r4, #32]
   15454:	ldr	r2, [r4, #64]	; 0x40
   15458:	ldr	r1, [r4, #60]	; 0x3c
   1545c:	strh	r5, [r3, #14]
   15460:	str	lr, [r3, #16]
   15464:	sub	r2, r2, ip
   15468:	str	r0, [r3, #20]
   1546c:	cmn	r2, #4
   15470:	mvnhi	r2, #3
   15474:	add	r1, r1, ip
   15478:	str	r1, [r4, #16]
   1547c:	str	r2, [r4, #24]
   15480:	mvn	r2, #3
   15484:	str	r2, [r3, #4]
   15488:	ldrd	r4, [sp]
   1548c:	ldr	r6, [sp, #8]
   15490:	add	sp, sp, #12
   15494:	pop	{pc}		; (ldr pc, [sp], #4)
   15498:	mvn	r0, #0
   1549c:	b	15488 <flatcc_builder_start_string@@Base+0x64>

000154a0 <flatcc_builder_reserve_table@@Base>:
   154a0:	cmp	r1, #0
   154a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   154a8:	strd	r6, [sp, #8]
   154ac:	str	lr, [sp, #16]
   154b0:	sub	sp, sp, #12
   154b4:	blt	15598 <flatcc_builder_reserve_table@@Base+0xf8>
   154b8:	ldr	r2, [r0, #32]
   154bc:	add	r1, r1, #2
   154c0:	mov	r4, r0
   154c4:	lsl	r5, r1, #1
   154c8:	ldr	r1, [r0, #56]	; 0x38
   154cc:	ldrh	r6, [r2, #28]
   154d0:	ldr	r3, [r2, #16]
   154d4:	add	r6, r3, r6, lsl #1
   154d8:	add	r2, r6, r5
   154dc:	cmp	r2, r1
   154e0:	bhi	15548 <flatcc_builder_reserve_table@@Base+0xa8>
   154e4:	ldr	r3, [r4, #52]	; 0x34
   154e8:	adds	r3, r3, r6
   154ec:	mvneq	r0, #0
   154f0:	streq	r3, [r4, #4]
   154f4:	beq	15534 <flatcc_builder_reserve_table@@Base+0x94>
   154f8:	ldr	r2, [r4, #32]
   154fc:	add	r3, r3, #4
   15500:	ldr	r1, [r4, #80]	; 0x50
   15504:	ldr	r6, [r2, #20]
   15508:	str	r3, [r4, #4]
   1550c:	add	r2, r5, r6
   15510:	sub	r2, r2, #3
   15514:	cmp	r2, r1
   15518:	bhi	15570 <flatcc_builder_reserve_table@@Base+0xd0>
   1551c:	ldr	r3, [r4, #76]	; 0x4c
   15520:	add	r3, r3, r6
   15524:	clz	r0, r3
   15528:	lsr	r0, r0, #5
   1552c:	str	r3, [r4]
   15530:	rsb	r0, r0, #0
   15534:	add	sp, sp, #12
   15538:	ldrd	r4, [sp]
   1553c:	ldrd	r6, [sp, #8]
   15540:	add	sp, sp, #16
   15544:	pop	{pc}		; (ldr pc, [sp], #4)
   15548:	mov	ip, #0
   1554c:	add	r1, r0, #52	; 0x34
   15550:	ldr	r0, [r0, #40]	; 0x28
   15554:	mov	r3, #1
   15558:	str	ip, [sp]
   1555c:	ldr	r7, [r4, #48]	; 0x30
   15560:	blx	r7
   15564:	cmp	r0, #0
   15568:	beq	154e4 <flatcc_builder_reserve_table@@Base+0x44>
   1556c:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>
   15570:	mov	ip, #3
   15574:	mov	r3, #0
   15578:	ldr	r0, [r4, #40]	; 0x28
   1557c:	add	r1, r4, #76	; 0x4c
   15580:	str	ip, [sp]
   15584:	ldr	r5, [r4, #48]	; 0x30
   15588:	blx	r5
   1558c:	cmp	r0, #0
   15590:	beq	1551c <flatcc_builder_reserve_table@@Base+0x7c>
   15594:	b	1556c <flatcc_builder_reserve_table@@Base+0xcc>
   15598:	ldr	r3, [pc, #28]	; 155bc <flatcc_builder_reserve_table@@Base+0x11c>
   1559c:	movw	r2, #1065	; 0x429
   155a0:	ldr	r1, [pc, #24]	; 155c0 <flatcc_builder_reserve_table@@Base+0x120>
   155a4:	ldr	r0, [pc, #24]	; 155c4 <flatcc_builder_reserve_table@@Base+0x124>
   155a8:	add	r3, pc, r3
   155ac:	add	r3, r3, #624	; 0x270
   155b0:	add	r1, pc, r1
   155b4:	add	r0, pc, r0
   155b8:	bl	11fd4 <__assert_fail@plt>
   155bc:	andeq	r2, r0, ip, lsr #31
   155c0:	strdeq	r3, [r0], -r4
   155c4:	muleq	r0, r0, r9

000155c8 <flatcc_builder_start_table@@Base>:
   155c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   155cc:	mov	r5, r1
   155d0:	mov	r1, #4
   155d4:	strd	r6, [sp, #8]
   155d8:	mov	r4, r0
   155dc:	strd	r8, [sp, #16]
   155e0:	str	sl, [sp, #24]
   155e4:	str	lr, [sp, #28]
   155e8:	sub	sp, sp, #8
   155ec:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   155f0:	subs	r7, r0, #0
   155f4:	bne	1573c <flatcc_builder_start_table@@Base+0x174>
   155f8:	ldm	r4, {r0, r2}
   155fc:	add	r5, r5, #2
   15600:	movw	ip, #15186	; 0x3b52
   15604:	movt	ip, #12137	; 0x2f69
   15608:	lsl	r5, r5, #1
   1560c:	mov	r8, #3
   15610:	ldrh	lr, [r4, #8]
   15614:	ldr	r1, [r4, #52]	; 0x34
   15618:	ldr	sl, [r4, #76]	; 0x4c
   1561c:	ldr	r3, [r4, #32]
   15620:	sub	r2, r2, r1
   15624:	ldr	r9, [r4, #56]	; 0x38
   15628:	add	r6, r2, lr, lsl #1
   1562c:	sub	r0, r0, sl
   15630:	ldr	sl, [r4, #12]
   15634:	str	r2, [r3, #16]
   15638:	add	r2, r6, r5
   1563c:	str	r0, [r3, #20]
   15640:	cmp	r2, r9
   15644:	str	sl, [r3, #24]
   15648:	strh	lr, [r3, #28]
   1564c:	strh	r7, [r4, #8]
   15650:	str	ip, [r4, #12]
   15654:	strh	r8, [r3, #14]
   15658:	bls	15680 <flatcc_builder_start_table@@Base+0xb8>
   1565c:	mov	r3, #1
   15660:	add	r1, r4, #52	; 0x34
   15664:	str	r7, [sp]
   15668:	ldr	r0, [r4, #40]	; 0x28
   1566c:	ldr	r8, [r4, #48]	; 0x30
   15670:	blx	r8
   15674:	cmp	r0, #0
   15678:	bne	15738 <flatcc_builder_start_table@@Base+0x170>
   1567c:	ldr	r1, [r4, #52]	; 0x34
   15680:	adds	r6, r6, r1
   15684:	streq	r6, [r4, #4]
   15688:	beq	1573c <flatcc_builder_start_table@@Base+0x174>
   1568c:	ldr	r1, [r4, #32]
   15690:	sub	r2, r5, #3
   15694:	add	r6, r6, #4
   15698:	ldr	r3, [r4, #80]	; 0x50
   1569c:	ldr	r5, [r1, #20]
   156a0:	str	r6, [r4, #4]
   156a4:	add	r2, r2, r5
   156a8:	cmp	r2, r3
   156ac:	bhi	15714 <flatcc_builder_start_table@@Base+0x14c>
   156b0:	ldr	r3, [r4, #76]	; 0x4c
   156b4:	add	r3, r3, r5
   156b8:	cmp	r3, #0
   156bc:	str	r3, [r4]
   156c0:	beq	1573c <flatcc_builder_start_table@@Base+0x174>
   156c4:	ldr	r0, [r4, #28]
   156c8:	movw	r2, #65532	; 0xfffc
   156cc:	ldr	ip, [r4, #32]
   156d0:	ldr	r3, [r4, #64]	; 0x40
   156d4:	ldr	r1, [r4, #60]	; 0x3c
   156d8:	sub	r3, r3, r0
   156dc:	cmp	r3, r2
   156e0:	add	r1, r1, r0
   156e4:	movcs	r3, r2
   156e8:	str	r1, [r4, #16]
   156ec:	str	r3, [r4, #24]
   156f0:	str	r2, [ip, #4]
   156f4:	mov	r0, r7
   156f8:	add	sp, sp, #8
   156fc:	ldrd	r4, [sp]
   15700:	ldrd	r6, [sp, #8]
   15704:	ldrd	r8, [sp, #16]
   15708:	ldr	sl, [sp, #24]
   1570c:	add	sp, sp, #28
   15710:	pop	{pc}		; (ldr pc, [sp], #4)
   15714:	mov	ip, #3
   15718:	mov	r3, #0
   1571c:	ldr	r0, [r4, #40]	; 0x28
   15720:	add	r1, r4, #76	; 0x4c
   15724:	str	ip, [sp]
   15728:	ldr	r6, [r4, #48]	; 0x30
   1572c:	blx	r6
   15730:	cmp	r0, #0
   15734:	beq	156b0 <flatcc_builder_start_table@@Base+0xe8>
   15738:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>
   1573c:	mvn	r7, #0
   15740:	b	156f4 <flatcc_builder_start_table@@Base+0x12c>

00015744 <flatcc_builder_create_vtable@@Base>:
   15744:	mov	r3, #0
   15748:	strd	r4, [sp, #-16]!
   1574c:	mov	r5, r0
   15750:	ldr	r0, [r0, #152]	; 0x98
   15754:	cmp	r2, #0
   15758:	str	r6, [sp, #8]
   1575c:	str	lr, [sp, #12]
   15760:	sub	sp, sp, #80	; 0x50
   15764:	str	r3, [sp, #8]
   15768:	str	r3, [sp, #12]
   1576c:	beq	157e4 <flatcc_builder_create_vtable@@Base+0xa0>
   15770:	mov	r3, #1
   15774:	cmp	r0, #0
   15778:	strd	r2, [sp, #8]
   1577c:	str	r1, [sp, #16]
   15780:	str	r2, [sp, #20]
   15784:	beq	1581c <flatcc_builder_create_vtable@@Base+0xd8>
   15788:	ldr	r3, [r5, #136]	; 0x88
   1578c:	sub	r4, r3, r2
   15790:	cmp	r3, r4
   15794:	ble	157f8 <flatcc_builder_create_vtable@@Base+0xb4>
   15798:	mov	r3, r4
   1579c:	add	r1, sp, #16
   157a0:	str	r2, [sp]
   157a4:	ldr	r2, [sp, #12]
   157a8:	ldr	r0, [r5, #36]	; 0x24
   157ac:	ldr	r6, [r5, #44]	; 0x2c
   157b0:	blx	r6
   157b4:	cmp	r0, #0
   157b8:	bne	15868 <flatcc_builder_create_vtable@@Base+0x124>
   157bc:	cmp	r4, #0
   157c0:	str	r4, [r5, #136]	; 0x88
   157c4:	beq	157cc <flatcc_builder_create_vtable@@Base+0x88>
   157c8:	add	r4, r4, #1
   157cc:	mov	r0, r4
   157d0:	add	sp, sp, #80	; 0x50
   157d4:	ldrd	r4, [sp]
   157d8:	ldr	r6, [sp, #8]
   157dc:	add	sp, sp, #12
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	cmp	r0, #0
   157e8:	bne	157f8 <flatcc_builder_create_vtable@@Base+0xb4>
   157ec:	ldr	r3, [r5, #180]	; 0xb4
   157f0:	cmp	r3, #0
   157f4:	beq	15860 <flatcc_builder_create_vtable@@Base+0x11c>
   157f8:	ldr	r3, [pc, #108]	; 1586c <flatcc_builder_create_vtable@@Base+0x128>
   157fc:	movw	r2, #647	; 0x287
   15800:	ldr	r1, [pc, #104]	; 15870 <flatcc_builder_create_vtable@@Base+0x12c>
   15804:	ldr	r0, [pc, #104]	; 15874 <flatcc_builder_create_vtable@@Base+0x130>
   15808:	add	r3, pc, r3
   1580c:	add	r3, r3, #44	; 0x2c
   15810:	add	r1, pc, r1
   15814:	add	r0, pc, r0
   15818:	bl	11fd4 <__assert_fail@plt>
   1581c:	ldr	r3, [r5, #180]	; 0xb4
   15820:	cmp	r3, #0
   15824:	bne	15788 <flatcc_builder_create_vtable@@Base+0x44>
   15828:	ldr	r4, [r5, #140]	; 0x8c
   1582c:	mov	r0, r2
   15830:	add	r2, r4, r2
   15834:	str	r2, [r5, #140]	; 0x8c
   15838:	mov	r3, r4
   1583c:	add	r1, sp, #16
   15840:	str	r0, [sp]
   15844:	ldr	r2, [sp, #12]
   15848:	ldr	r0, [r5, #36]	; 0x24
   1584c:	ldr	r5, [r5, #44]	; 0x2c
   15850:	blx	r5
   15854:	cmp	r0, #0
   15858:	beq	157c8 <flatcc_builder_create_vtable@@Base+0x84>
   1585c:	bl	13640 <flatcc_builder_default_alloc@@Base+0x158>
   15860:	ldr	r4, [r5, #140]	; 0x8c
   15864:	b	15838 <flatcc_builder_create_vtable@@Base+0xf4>
   15868:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   1586c:	andeq	r2, r0, ip, asr #26
   15870:	muleq	r0, r4, r4
   15874:	andeq	r3, r0, r8, lsl r5

00015878 <flatcc_builder_create_cached_vtable@@Base>:
   15878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1587c:	strd	r6, [sp, #8]
   15880:	mov	r6, r0
   15884:	strd	r8, [sp, #16]
   15888:	mov	r9, r2
   1588c:	mov	r8, r3
   15890:	strd	sl, [sp, #24]
   15894:	str	lr, [sp, #32]
   15898:	sub	sp, sp, #28
   1589c:	str	r1, [sp, #8]
   158a0:	ldr	r1, [r0, #116]	; 0x74
   158a4:	cmp	r1, #0
   158a8:	rsbne	r1, r1, #32
   158ac:	beq	15a34 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   158b0:	ldr	sl, [r6, #92]	; 0x5c
   158b4:	lsr	r8, r8, r1
   158b8:	adds	fp, sl, r8, lsl #2
   158bc:	str	fp, [sp, #12]
   158c0:	beq	15ad0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   158c4:	ldr	r5, [sl, r8, lsl #2]
   158c8:	cmp	r5, #0
   158cc:	beq	15b04 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   158d0:	mov	r3, #0
   158d4:	str	r8, [sp, #16]
   158d8:	mov	r8, fp
   158dc:	mov	fp, r6
   158e0:	ldr	r7, [r6, #68]	; 0x44
   158e4:	str	r3, [sp, #20]
   158e8:	ldr	r3, [r6, #100]	; 0x64
   158ec:	mov	r6, r3
   158f0:	add	r4, r6, r5
   158f4:	ldr	r1, [r4, #8]
   158f8:	ldrh	r2, [r7, r1]
   158fc:	add	r1, r7, r1
   15900:	cmp	r2, r9
   15904:	bne	159e0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15908:	mov	r2, r9
   1590c:	ldr	r0, [sp, #8]
   15910:	bl	11f50 <memcmp@plt>
   15914:	cmp	r0, #0
   15918:	bne	159e0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   1591c:	ldr	r1, [r4, #4]
   15920:	ldr	r2, [fp, #152]	; 0x98
   15924:	cmp	r1, r2
   15928:	beq	159ec <flatcc_builder_create_cached_vtable@@Base+0x174>
   1592c:	ldr	r5, [r4, #12]
   15930:	add	r8, r4, #12
   15934:	str	r4, [sp, #20]
   15938:	cmp	r5, #0
   1593c:	bne	158f0 <flatcc_builder_create_cached_vtable@@Base+0x78>
   15940:	ldr	r8, [sp, #16]
   15944:	mov	r6, fp
   15948:	ldr	r3, [r6, #104]	; 0x68
   1594c:	ldr	r4, [r6, #124]	; 0x7c
   15950:	add	r2, r4, #16
   15954:	cmp	r2, r3
   15958:	bls	15980 <flatcc_builder_create_cached_vtable@@Base+0x108>
   1595c:	mov	ip, #6
   15960:	mov	r3, #0
   15964:	ldr	r0, [r6, #40]	; 0x28
   15968:	add	r1, r6, #100	; 0x64
   1596c:	str	ip, [sp]
   15970:	ldr	r5, [r6, #48]	; 0x30
   15974:	blx	r5
   15978:	cmp	r0, #0
   1597c:	bne	15b00 <flatcc_builder_create_cached_vtable@@Base+0x288>
   15980:	ldr	r5, [r6, #100]	; 0x64
   15984:	adds	r7, r5, r4
   15988:	beq	15ad0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   1598c:	ldr	r3, [r6, #124]	; 0x7c
   15990:	mov	r2, r9
   15994:	ldr	r0, [r6, #152]	; 0x98
   15998:	ldr	r1, [sp, #8]
   1599c:	add	ip, r3, #16
   159a0:	str	ip, [r6, #124]	; 0x7c
   159a4:	str	r0, [r7, #4]
   159a8:	mov	r0, r6
   159ac:	ldr	ip, [sl, r8, lsl #2]
   159b0:	str	ip, [r7, #12]
   159b4:	str	r3, [sl, r8, lsl #2]
   159b8:	bl	15744 <flatcc_builder_create_vtable@@Base>
   159bc:	cmp	r0, #0
   159c0:	str	r0, [r5, r4]
   159c4:	beq	15ad0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   159c8:	ldr	r3, [sp, #20]
   159cc:	cmp	r3, #0
   159d0:	beq	15b14 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   159d4:	ldr	r3, [r3, #8]
   159d8:	str	r3, [r7, #8]
   159dc:	b	15a18 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   159e0:	add	r8, r4, #12
   159e4:	ldr	r5, [r4, #12]
   159e8:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   159ec:	ldr	r3, [sp, #12]
   159f0:	mov	fp, r8
   159f4:	ldr	r8, [sp, #16]
   159f8:	cmp	r3, fp
   159fc:	beq	15a14 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15a00:	ldr	r3, [r4, #12]
   15a04:	str	r3, [fp]
   15a08:	ldr	r3, [sl, r8, lsl #2]
   15a0c:	str	r3, [r4, #12]
   15a10:	str	r5, [sl, r8, lsl #2]
   15a14:	ldr	r0, [r4]
   15a18:	add	sp, sp, #28
   15a1c:	ldrd	r4, [sp]
   15a20:	ldrd	r6, [sp, #8]
   15a24:	ldrd	r8, [sp, #16]
   15a28:	ldrd	sl, [sp, #24]
   15a2c:	add	sp, sp, #32
   15a30:	pop	{pc}		; (ldr pc, [sp], #4)
   15a34:	ldr	r4, [r0, #124]	; 0x7c
   15a38:	add	r5, r0, #92	; 0x5c
   15a3c:	cmp	r4, #0
   15a40:	bne	15ba8 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15a44:	ldr	r3, [r0, #104]	; 0x68
   15a48:	cmp	r3, #15
   15a4c:	bls	15ad8 <flatcc_builder_create_cached_vtable@@Base+0x260>
   15a50:	ldr	r3, [r6, #100]	; 0x64
   15a54:	cmp	r3, #0
   15a58:	beq	15ad0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15a5c:	mov	ip, #16
   15a60:	mov	r2, #5
   15a64:	ldr	r0, [r6, #40]	; 0x28
   15a68:	mov	r1, r5
   15a6c:	mov	r3, #1
   15a70:	str	r2, [sp]
   15a74:	mov	r2, #256	; 0x100
   15a78:	str	ip, [r6, #124]	; 0x7c
   15a7c:	ldr	r5, [r6, #48]	; 0x30
   15a80:	blx	r5
   15a84:	cmp	r0, #0
   15a88:	bne	15ad0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15a8c:	mov	r3, #256	; 0x100
   15a90:	ldr	r1, [r6, #96]	; 0x60
   15a94:	b	15a9c <flatcc_builder_create_cached_vtable@@Base+0x224>
   15a98:	mov	r3, r2
   15a9c:	lsl	r2, r3, #1
   15aa0:	cmp	r2, r1
   15aa4:	bls	15a98 <flatcc_builder_create_cached_vtable@@Base+0x220>
   15aa8:	lsr	r3, r3, #2
   15aac:	cmp	r3, #1
   15ab0:	bls	15b0c <flatcc_builder_create_cached_vtable@@Base+0x294>
   15ab4:	mov	r2, #1
   15ab8:	add	r4, r4, #1
   15abc:	cmp	r3, r2, lsl r4
   15ac0:	bhi	15ab8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ac4:	rsb	r1, r4, #32
   15ac8:	str	r4, [r6, #116]	; 0x74
   15acc:	b	158b0 <flatcc_builder_create_cached_vtable@@Base+0x38>
   15ad0:	mov	r0, #0
   15ad4:	b	15a18 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15ad8:	mov	ip, #6
   15adc:	add	r1, r0, #100	; 0x64
   15ae0:	ldr	r0, [r0, #40]	; 0x28
   15ae4:	mov	r3, r4
   15ae8:	mov	r2, #16
   15aec:	str	ip, [sp]
   15af0:	ldr	r7, [r6, #48]	; 0x30
   15af4:	blx	r7
   15af8:	cmp	r0, #0
   15afc:	beq	15a50 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   15b00:	bl	1360c <flatcc_builder_default_alloc@@Base+0x124>
   15b04:	str	r5, [sp, #20]
   15b08:	b	15948 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   15b0c:	mov	r1, #32
   15b10:	b	15ac8 <flatcc_builder_create_cached_vtable@@Base+0x250>
   15b14:	ldr	r8, [r6, #120]	; 0x78
   15b18:	ldr	r3, [r6, #172]	; 0xac
   15b1c:	add	r2, r9, r8
   15b20:	cmp	r3, #0
   15b24:	beq	15b30 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   15b28:	cmp	r3, r2
   15b2c:	bcc	15b90 <flatcc_builder_create_cached_vtable@@Base+0x318>
   15b30:	ldr	r3, [r6, #72]	; 0x48
   15b34:	cmp	r3, r2
   15b38:	bcs	15b60 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   15b3c:	mov	ip, #2
   15b40:	mov	r3, #0
   15b44:	ldr	r0, [r6, #40]	; 0x28
   15b48:	add	r1, r6, #68	; 0x44
   15b4c:	str	ip, [sp]
   15b50:	ldr	sl, [r6, #48]	; 0x30
   15b54:	blx	sl
   15b58:	cmp	r0, #0
   15b5c:	bne	15b00 <flatcc_builder_create_cached_vtable@@Base+0x288>
   15b60:	ldr	r3, [r6, #68]	; 0x44
   15b64:	adds	r0, r3, r8
   15b68:	beq	15ba0 <flatcc_builder_create_cached_vtable@@Base+0x328>
   15b6c:	ldr	r3, [r6, #120]	; 0x78
   15b70:	mov	r2, r9
   15b74:	ldr	r1, [sp, #8]
   15b78:	add	r9, r3, r9
   15b7c:	str	r3, [r7, #8]
   15b80:	str	r9, [r6, #120]	; 0x78
   15b84:	bl	11f44 <memcpy@plt>
   15b88:	ldr	r0, [r5, r4]
   15b8c:	b	15a18 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15b90:	mov	r0, r6
   15b94:	bl	13b6c <flatcc_builder_flush_vtable_cache@@Base>
   15b98:	ldr	r0, [r5, r4]
   15b9c:	b	15a18 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15ba0:	mvn	r0, #0
   15ba4:	b	15a18 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15ba8:	ldr	r3, [pc, #28]	; 15bcc <flatcc_builder_create_cached_vtable@@Base+0x354>
   15bac:	movw	r2, #342	; 0x156
   15bb0:	ldr	r1, [pc, #24]	; 15bd0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   15bb4:	ldr	r0, [pc, #24]	; 15bd4 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15bb8:	add	r3, pc, r3
   15bbc:	add	r3, r3, #656	; 0x290
   15bc0:	add	r1, pc, r1
   15bc4:	add	r0, pc, r0
   15bc8:	bl	11fd4 <__assert_fail@plt>
   15bcc:	muleq	r0, ip, r9
   15bd0:	andeq	r3, r0, r4, ror #1
   15bd4:	andeq	r3, r0, ip, lsl #7

00015bd8 <flatcc_builder_create_table@@Base>:
   15bd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15bdc:	mov	r5, r0
   15be0:	strd	r6, [sp, #8]
   15be4:	str	r8, [sp, #16]
   15be8:	str	lr, [sp, #20]
   15bec:	sub	sp, sp, #88	; 0x58
   15bf0:	ldr	r6, [sp, #116]	; 0x74
   15bf4:	ldr	r7, [pc, #444]	; 15db8 <flatcc_builder_create_table@@Base+0x1e0>
   15bf8:	ldr	r0, [sp, #120]	; 0x78
   15bfc:	cmp	r6, #0
   15c00:	add	r7, pc, r7
   15c04:	blt	15d6c <flatcc_builder_create_table@@Base+0x194>
   15c08:	tst	r0, #1
   15c0c:	beq	15d48 <flatcc_builder_create_table@@Base+0x170>
   15c10:	ldrh	ip, [r5, #128]	; 0x80
   15c14:	cmp	r3, #4
   15c18:	sub	r0, r0, #1
   15c1c:	movcc	r3, #4
   15c20:	cmp	ip, r3
   15c24:	ldr	ip, [r5, #136]	; 0x88
   15c28:	strhcc	r3, [r5, #128]	; 0x80
   15c2c:	sub	r3, r3, #1
   15c30:	cmp	r6, #0
   15c34:	sub	r4, ip, r2
   15c38:	mov	r8, r4
   15c3c:	sub	r4, r4, #4
   15c40:	and	r8, r8, r3
   15c44:	sub	r0, r4, r0
   15c48:	sub	r0, r0, r8
   15c4c:	str	r0, [sp, #12]
   15c50:	beq	15c84 <flatcc_builder_create_table@@Base+0xac>
   15c54:	ldr	ip, [sp, #112]	; 0x70
   15c58:	sub	r4, r8, r4
   15c5c:	sub	r4, r4, #4
   15c60:	add	r6, ip, r6, lsl #1
   15c64:	ldrh	r3, [ip], #2
   15c68:	ldr	r0, [r1, r3]
   15c6c:	sub	lr, r4, r3
   15c70:	cmp	r6, ip
   15c74:	add	r0, r0, lr
   15c78:	str	r0, [r1, r3]
   15c7c:	bne	15c64 <flatcc_builder_create_table@@Base+0x8c>
   15c80:	ldr	ip, [r5, #136]	; 0x88
   15c84:	mov	r3, #1
   15c88:	mov	r0, #4
   15c8c:	cmp	r2, #0
   15c90:	str	r0, [sp, #16]
   15c94:	str	r3, [sp, #20]
   15c98:	add	r3, sp, #12
   15c9c:	str	r3, [sp, #24]
   15ca0:	str	r0, [sp, #28]
   15ca4:	beq	15cc0 <flatcc_builder_create_table@@Base+0xe8>
   15ca8:	add	r0, r2, r0
   15cac:	mov	r3, #2
   15cb0:	str	r0, [sp, #16]
   15cb4:	str	r3, [sp, #20]
   15cb8:	str	r1, [sp, #32]
   15cbc:	str	r2, [sp, #36]	; 0x24
   15cc0:	cmp	r8, #0
   15cc4:	bne	15d18 <flatcc_builder_create_table@@Base+0x140>
   15cc8:	sub	r4, ip, r0
   15ccc:	cmp	r4, ip
   15cd0:	bge	15d94 <flatcc_builder_create_table@@Base+0x1bc>
   15cd4:	mov	r3, r4
   15cd8:	add	r1, sp, #24
   15cdc:	str	r0, [sp]
   15ce0:	ldr	r2, [sp, #20]
   15ce4:	ldr	r0, [r5, #36]	; 0x24
   15ce8:	ldr	r6, [r5, #44]	; 0x2c
   15cec:	blx	r6
   15cf0:	cmp	r0, #0
   15cf4:	bne	15d90 <flatcc_builder_create_table@@Base+0x1b8>
   15cf8:	mov	r0, r4
   15cfc:	str	r4, [r5, #136]	; 0x88
   15d00:	add	sp, sp, #88	; 0x58
   15d04:	ldrd	r4, [sp]
   15d08:	ldrd	r6, [sp, #8]
   15d0c:	ldr	r8, [sp, #16]
   15d10:	add	sp, sp, #20
   15d14:	pop	{pc}		; (ldr pc, [sp], #4)
   15d18:	ldr	r2, [pc, #156]	; 15dbc <flatcc_builder_create_table@@Base+0x1e4>
   15d1c:	add	r0, r0, r8
   15d20:	ldr	r3, [sp, #20]
   15d24:	str	r0, [sp, #16]
   15d28:	ldr	r1, [r7, r2]
   15d2c:	add	r2, sp, #88	; 0x58
   15d30:	add	r3, r3, #1
   15d34:	add	r2, r2, r3, lsl #3
   15d38:	str	r3, [sp, #20]
   15d3c:	str	r1, [r2, #-72]	; 0xffffffb8
   15d40:	str	r8, [r2, #-68]	; 0xffffffbc
   15d44:	b	15cc8 <flatcc_builder_create_table@@Base+0xf0>
   15d48:	ldr	r3, [pc, #112]	; 15dc0 <flatcc_builder_create_table@@Base+0x1e8>
   15d4c:	movw	r2, #1243	; 0x4db
   15d50:	ldr	r1, [pc, #108]	; 15dc4 <flatcc_builder_create_table@@Base+0x1ec>
   15d54:	ldr	r0, [pc, #108]	; 15dc8 <flatcc_builder_create_table@@Base+0x1f0>
   15d58:	add	r3, pc, r3
   15d5c:	add	r3, r3, #668	; 0x29c
   15d60:	add	r1, pc, r1
   15d64:	add	r0, pc, r0
   15d68:	bl	11fd4 <__assert_fail@plt>
   15d6c:	ldr	r3, [pc, #88]	; 15dcc <flatcc_builder_create_table@@Base+0x1f4>
   15d70:	movw	r2, #1237	; 0x4d5
   15d74:	ldr	r1, [pc, #84]	; 15dd0 <flatcc_builder_create_table@@Base+0x1f8>
   15d78:	ldr	r0, [pc, #84]	; 15dd4 <flatcc_builder_create_table@@Base+0x1fc>
   15d7c:	add	r3, pc, r3
   15d80:	add	r3, r3, #668	; 0x29c
   15d84:	add	r1, pc, r1
   15d88:	add	r0, pc, r0
   15d8c:	bl	11fd4 <__assert_fail@plt>
   15d90:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   15d94:	ldr	r3, [pc, #60]	; 15dd8 <flatcc_builder_create_table@@Base+0x200>
   15d98:	movw	r2, #647	; 0x287
   15d9c:	ldr	r1, [pc, #56]	; 15ddc <flatcc_builder_create_table@@Base+0x204>
   15da0:	ldr	r0, [pc, #56]	; 15de0 <flatcc_builder_create_table@@Base+0x208>
   15da4:	add	r3, pc, r3
   15da8:	add	r3, r3, #44	; 0x2c
   15dac:	add	r1, pc, r1
   15db0:	add	r0, pc, r0
   15db4:	bl	11fd4 <__assert_fail@plt>
   15db8:	strdeq	r4, [r1], -r8
   15dbc:	andeq	r0, r0, r8, asr #32
   15dc0:	strdeq	r2, [r0], -ip
   15dc4:	andeq	r2, r0, r4, asr #30
   15dc8:	andeq	r3, r0, r0, lsl r2
   15dcc:	ldrdeq	r2, [r0], -r8
   15dd0:	andeq	r2, r0, r0, lsr #30
   15dd4:	ldrdeq	r3, [r0], -r8
   15dd8:			; <UNDEFINED> instruction: 0x000027b0
   15ddc:	strdeq	r2, [r0], -r8
   15de0:	andeq	r2, r0, ip, ror pc

00015de4 <flatcc_builder_check_required_field@@Base>:
   15de4:	ldr	r3, [r0, #32]
   15de8:	ldrh	r3, [r3, #14]
   15dec:	cmp	r3, #3
   15df0:	bne	15e20 <flatcc_builder_check_required_field@@Base+0x3c>
   15df4:	ldrh	r3, [r0, #8]
   15df8:	cmp	r3, r1
   15dfc:	bls	15e18 <flatcc_builder_check_required_field@@Base+0x34>
   15e00:	ldr	r3, [r0, #4]
   15e04:	lsl	r1, r1, #1
   15e08:	ldrh	r0, [r3, r1]
   15e0c:	adds	r0, r0, #0
   15e10:	movne	r0, #1
   15e14:	bx	lr
   15e18:	mov	r0, #0
   15e1c:	bx	lr
   15e20:	ldr	r3, [pc, #36]	; 15e4c <flatcc_builder_check_required_field@@Base+0x68>
   15e24:	movw	r2, #1272	; 0x4f8
   15e28:	str	r4, [sp, #-8]!
   15e2c:	ldr	r1, [pc, #28]	; 15e50 <flatcc_builder_check_required_field@@Base+0x6c>
   15e30:	str	lr, [sp, #4]
   15e34:	ldr	r0, [pc, #24]	; 15e54 <flatcc_builder_check_required_field@@Base+0x70>
   15e38:	add	r3, pc, r3
   15e3c:	add	r3, r3, #696	; 0x2b8
   15e40:	add	r1, pc, r1
   15e44:	add	r0, pc, r0
   15e48:	bl	11fd4 <__assert_fail@plt>
   15e4c:	andeq	r2, r0, ip, lsl r7
   15e50:	andeq	r2, r0, r4, ror #28
   15e54:	andeq	r3, r0, ip, lsr r1

00015e58 <flatcc_builder_check_union_field@@Base>:
   15e58:	ldr	r3, [r0, #32]
   15e5c:	ldrh	r3, [r3, #14]
   15e60:	cmp	r3, #3
   15e64:	bne	15ec8 <flatcc_builder_check_union_field@@Base+0x70>
   15e68:	cmp	r1, #0
   15e6c:	beq	15eb4 <flatcc_builder_check_union_field@@Base+0x5c>
   15e70:	ldrh	r3, [r0, #8]
   15e74:	cmp	r3, r1
   15e78:	bls	15eb4 <flatcc_builder_check_union_field@@Base+0x5c>
   15e7c:	ldr	r3, [r0, #4]
   15e80:	sub	r1, r1, #-2147483647	; 0x80000001
   15e84:	lsl	r1, r1, #1
   15e88:	ldrh	r2, [r3, r1]!
   15e8c:	cmp	r2, #0
   15e90:	ldrh	r1, [r3, #2]
   15e94:	beq	15ea8 <flatcc_builder_check_union_field@@Base+0x50>
   15e98:	ldr	r3, [r0, #16]
   15e9c:	ldrb	r3, [r3, r2]
   15ea0:	cmp	r3, #0
   15ea4:	bne	15ebc <flatcc_builder_check_union_field@@Base+0x64>
   15ea8:	clz	r0, r1
   15eac:	lsr	r0, r0, #5
   15eb0:	bx	lr
   15eb4:	mov	r0, #0
   15eb8:	bx	lr
   15ebc:	adds	r0, r1, #0
   15ec0:	movne	r0, #1
   15ec4:	bx	lr
   15ec8:	ldr	r3, [pc, #36]	; 15ef4 <flatcc_builder_check_union_field@@Base+0x9c>
   15ecc:	movw	r2, #1279	; 0x4ff
   15ed0:	str	r4, [sp, #-8]!
   15ed4:	ldr	r1, [pc, #28]	; 15ef8 <flatcc_builder_check_union_field@@Base+0xa0>
   15ed8:	str	lr, [sp, #4]
   15edc:	ldr	r0, [pc, #24]	; 15efc <flatcc_builder_check_union_field@@Base+0xa4>
   15ee0:	add	r3, pc, r3
   15ee4:	add	r3, r3, #732	; 0x2dc
   15ee8:	add	r1, pc, r1
   15eec:	add	r0, pc, r0
   15ef0:	bl	11fd4 <__assert_fail@plt>
   15ef4:	andeq	r2, r0, r4, ror r6
   15ef8:			; <UNDEFINED> instruction: 0x00002dbc
   15efc:	muleq	r0, r4, r0

00015f00 <flatcc_builder_check_required@@Base>:
   15f00:	ldr	r3, [r0, #32]
   15f04:	ldrh	r3, [r3, #14]
   15f08:	cmp	r3, #3
   15f0c:	bne	15f74 <flatcc_builder_check_required@@Base+0x74>
   15f10:	ldrh	r3, [r0, #8]
   15f14:	cmp	r3, r2
   15f18:	blt	15f6c <flatcc_builder_check_required@@Base+0x6c>
   15f1c:	cmp	r2, #0
   15f20:	ble	15f64 <flatcc_builder_check_required@@Base+0x64>
   15f24:	ldrh	r3, [r1]
   15f28:	ldr	ip, [r0, #4]
   15f2c:	lsl	r3, r3, #1
   15f30:	ldrh	r0, [ip, r3]
   15f34:	cmp	r0, #0
   15f38:	bxeq	lr
   15f3c:	add	r2, r1, r2, lsl #1
   15f40:	add	r1, r1, #2
   15f44:	b	15f5c <flatcc_builder_check_required@@Base+0x5c>
   15f48:	ldrh	r3, [r1], #2
   15f4c:	lsl	r3, r3, #1
   15f50:	ldrh	r0, [ip, r3]
   15f54:	cmp	r0, #0
   15f58:	bxeq	lr
   15f5c:	cmp	r1, r2
   15f60:	bne	15f48 <flatcc_builder_check_required@@Base+0x48>
   15f64:	mov	r0, #1
   15f68:	bx	lr
   15f6c:	mov	r0, #0
   15f70:	bx	lr
   15f74:	ldr	r3, [pc, #36]	; 15fa0 <flatcc_builder_check_required@@Base+0xa0>
   15f78:	movw	r2, #1297	; 0x511
   15f7c:	str	r4, [sp, #-8]!
   15f80:	ldr	r1, [pc, #28]	; 15fa4 <flatcc_builder_check_required@@Base+0xa4>
   15f84:	str	lr, [sp, #4]
   15f88:	ldr	r0, [pc, #24]	; 15fa8 <flatcc_builder_check_required@@Base+0xa8>
   15f8c:	add	r3, pc, r3
   15f90:	add	r3, r3, #768	; 0x300
   15f94:	add	r1, pc, r1
   15f98:	add	r0, pc, r0
   15f9c:	bl	11fd4 <__assert_fail@plt>
   15fa0:	andeq	r2, r0, r8, asr #11
   15fa4:	andeq	r2, r0, r0, lsl sp
   15fa8:	andeq	r2, r0, r8, ror #31

00015fac <flatcc_builder_end_table@@Base>:
   15fac:	ldr	r3, [r0, #32]
   15fb0:	strd	r4, [sp, #-20]!	; 0xffffffec
   15fb4:	ldrh	r3, [r3, #14]
   15fb8:	strd	r6, [sp, #8]
   15fbc:	str	lr, [sp, #16]
   15fc0:	sub	sp, sp, #20
   15fc4:	cmp	r3, #3
   15fc8:	bne	1614c <flatcc_builder_end_table@@Base+0x1a0>
   15fcc:	ldrh	r5, [r0, #8]
   15fd0:	movw	ip, #31153	; 0x79b1
   15fd4:	movt	ip, #40503	; 0x9e37
   15fd8:	mov	r4, r0
   15fdc:	ldr	r1, [r0, #4]
   15fe0:	ldr	r3, [r0, #12]
   15fe4:	add	r5, r5, #2
   15fe8:	lsl	r5, r5, #1
   15fec:	ldr	lr, [r0, #20]
   15ff0:	sub	r6, r1, #4
   15ff4:	uxth	r5, r5
   15ff8:	eor	r3, r3, r5
   15ffc:	mov	r2, r5
   16000:	strh	r5, [r1, #-4]
   16004:	mul	r3, ip, r3
   16008:	add	lr, lr, #4
   1600c:	uxth	lr, lr
   16010:	eor	r3, r3, lr
   16014:	strh	lr, [r1, #-2]
   16018:	mov	r1, r6
   1601c:	mul	r3, ip, r3
   16020:	str	r3, [r0, #12]
   16024:	bl	15878 <flatcc_builder_create_cached_vtable@@Base>
   16028:	subs	r7, r0, #0
   1602c:	bne	1604c <flatcc_builder_end_table@@Base+0xa0>
   16030:	mov	r5, #0
   16034:	mov	r0, r5
   16038:	add	sp, sp, #20
   1603c:	ldrd	r4, [sp]
   16040:	ldrd	r6, [sp, #8]
   16044:	add	sp, sp, #16
   16048:	pop	{pc}		; (ldr pc, [sp], #4)
   1604c:	mov	r2, r5
   16050:	mov	r1, #0
   16054:	mov	r0, r6
   16058:	bl	11fb0 <memset@plt>
   1605c:	ldr	ip, [r4]
   16060:	mov	r0, r4
   16064:	ldr	r3, [r4, #32]
   16068:	ldr	r2, [r4, #76]	; 0x4c
   1606c:	ldr	r1, [r3, #20]
   16070:	str	r7, [sp, #8]
   16074:	ldrh	r3, [r4, #130]	; 0x82
   16078:	add	r2, r2, r1
   1607c:	ldr	r1, [r4, #16]
   16080:	sub	ip, ip, r2
   16084:	asr	ip, ip, #1
   16088:	str	r2, [sp]
   1608c:	ldr	r2, [r4, #20]
   16090:	str	ip, [sp, #4]
   16094:	bl	15bd8 <flatcc_builder_create_table@@Base>
   16098:	subs	r5, r0, #0
   1609c:	beq	16030 <flatcc_builder_end_table@@Base+0x84>
   160a0:	ldr	r3, [r4, #32]
   160a4:	mov	r1, #0
   160a8:	ldr	r0, [r4, #52]	; 0x34
   160ac:	ldr	r2, [r4, #76]	; 0x4c
   160b0:	ldr	ip, [r3, #16]
   160b4:	ldr	r6, [r3, #20]
   160b8:	ldrh	lr, [r3, #28]
   160bc:	add	r0, r0, ip
   160c0:	ldr	ip, [r3, #24]
   160c4:	add	r3, r2, r6
   160c8:	ldr	r2, [r4, #20]
   160cc:	str	r3, [r4]
   160d0:	str	r0, [r4, #4]
   160d4:	strh	lr, [r4, #8]
   160d8:	str	ip, [r4, #12]
   160dc:	ldr	r0, [r4, #16]
   160e0:	bl	11fb0 <memset@plt>
   160e4:	ldr	r3, [r4, #32]
   160e8:	ldr	r0, [r4, #60]	; 0x3c
   160ec:	ldr	r2, [r4, #64]	; 0x40
   160f0:	ldr	ip, [r3]
   160f4:	ldmib	r3, {r1, lr}
   160f8:	add	r0, r0, ip
   160fc:	sub	r2, r2, ip
   16100:	str	r0, [r4, #16]
   16104:	cmp	r2, r1
   16108:	ldrh	r0, [r4, #128]	; 0x80
   1610c:	movcs	r2, r1
   16110:	str	lr, [r4, #20]
   16114:	str	ip, [r4, #28]
   16118:	ldrh	ip, [r4, #130]	; 0x82
   1611c:	str	r2, [r4, #24]
   16120:	ldr	r2, [r4, #156]	; 0x9c
   16124:	str	r1, [r3, #4]
   16128:	cmp	r0, ip
   1612c:	sub	r0, r3, #36	; 0x24
   16130:	strhcc	ip, [r4, #128]	; 0x80
   16134:	ldrh	r1, [r3, #12]
   16138:	sub	r3, r2, #1
   1613c:	str	r0, [r4, #32]
   16140:	strh	r1, [r4, #130]	; 0x82
   16144:	str	r3, [r4, #156]	; 0x9c
   16148:	b	16034 <flatcc_builder_end_table@@Base+0x88>
   1614c:	ldr	r3, [pc, #28]	; 16170 <flatcc_builder_end_table@@Base+0x1c4>
   16150:	movw	r2, #1317	; 0x525
   16154:	ldr	r1, [pc, #24]	; 16174 <flatcc_builder_end_table@@Base+0x1c8>
   16158:	ldr	r0, [pc, #24]	; 16178 <flatcc_builder_end_table@@Base+0x1cc>
   1615c:	add	r3, pc, r3
   16160:	add	r3, r3, #800	; 0x320
   16164:	add	r1, pc, r1
   16168:	add	r0, pc, r0
   1616c:	bl	11fd4 <__assert_fail@plt>
   16170:	strdeq	r2, [r0], -r8
   16174:	andeq	r2, r0, r0, asr #22
   16178:	andeq	r2, r0, r8, lsl lr

0001617c <flatcc_builder_create_vector@@Base>:
   1617c:	strd	r4, [sp, #-16]!
   16180:	mov	r4, r0
   16184:	str	r6, [sp, #8]
   16188:	str	lr, [sp, #12]
   1618c:	sub	sp, sp, #88	; 0x58
   16190:	ldr	ip, [sp, #108]	; 0x6c
   16194:	ldr	r5, [pc, #328]	; 162e4 <flatcc_builder_create_vector@@Base+0x168>
   16198:	ldrh	r0, [sp, #104]	; 0x68
   1619c:	cmp	r2, ip
   161a0:	add	r5, pc, r5
   161a4:	bhi	16298 <flatcc_builder_create_vector@@Base+0x11c>
   161a8:	ldrh	ip, [r4, #128]	; 0x80
   161ac:	cmp	r0, #4
   161b0:	mul	r3, r3, r2
   161b4:	movcc	r0, #4
   161b8:	str	r2, [sp, #12]
   161bc:	mov	r2, #1
   161c0:	ldr	r6, [r4, #136]	; 0x88
   161c4:	mov	lr, #4
   161c8:	str	r2, [sp, #20]
   161cc:	cmp	ip, r0
   161d0:	add	ip, sp, #12
   161d4:	str	lr, [sp, #16]
   161d8:	strhcc	r0, [r4, #128]	; 0x80
   161dc:	sub	r2, r6, r3
   161e0:	sub	r0, r0, #1
   161e4:	cmp	r3, #0
   161e8:	and	r0, r0, r2
   161ec:	str	ip, [sp, #24]
   161f0:	moveq	r2, lr
   161f4:	str	lr, [sp, #28]
   161f8:	beq	16214 <flatcc_builder_create_vector@@Base+0x98>
   161fc:	add	r2, r3, lr
   16200:	str	r1, [sp, #32]
   16204:	mov	r1, #2
   16208:	str	r2, [sp, #16]
   1620c:	str	r1, [sp, #20]
   16210:	str	r3, [sp, #36]	; 0x24
   16214:	cmp	r0, #0
   16218:	bne	16268 <flatcc_builder_create_vector@@Base+0xec>
   1621c:	sub	r5, r6, r2
   16220:	cmp	r6, r5
   16224:	ble	162c0 <flatcc_builder_create_vector@@Base+0x144>
   16228:	mov	r3, r5
   1622c:	add	r1, sp, #24
   16230:	str	r2, [sp]
   16234:	ldr	r2, [sp, #20]
   16238:	ldr	r0, [r4, #36]	; 0x24
   1623c:	ldr	r6, [r4, #44]	; 0x2c
   16240:	blx	r6
   16244:	cmp	r0, #0
   16248:	bne	162bc <flatcc_builder_create_vector@@Base+0x140>
   1624c:	mov	r0, r5
   16250:	str	r5, [r4, #136]	; 0x88
   16254:	add	sp, sp, #88	; 0x58
   16258:	ldrd	r4, [sp]
   1625c:	ldr	r6, [sp, #8]
   16260:	add	sp, sp, #12
   16264:	pop	{pc}		; (ldr pc, [sp], #4)
   16268:	ldr	r1, [pc, #120]	; 162e8 <flatcc_builder_create_vector@@Base+0x16c>
   1626c:	add	r2, r2, r0
   16270:	ldr	r3, [sp, #20]
   16274:	str	r2, [sp, #16]
   16278:	ldr	ip, [r5, r1]
   1627c:	add	r1, sp, #88	; 0x58
   16280:	add	r3, r3, #1
   16284:	add	r1, r1, r3, lsl #3
   16288:	str	r3, [sp, #20]
   1628c:	str	ip, [r1, #-72]	; 0xffffffb8
   16290:	str	r0, [r1, #-68]	; 0xffffffbc
   16294:	b	1621c <flatcc_builder_create_vector@@Base+0xa0>
   16298:	ldr	r3, [pc, #76]	; 162ec <flatcc_builder_create_vector@@Base+0x170>
   1629c:	movw	r2, #1365	; 0x555
   162a0:	ldr	r1, [pc, #72]	; 162f0 <flatcc_builder_create_vector@@Base+0x174>
   162a4:	ldr	r0, [pc, #72]	; 162f4 <flatcc_builder_create_vector@@Base+0x178>
   162a8:	add	r3, pc, r3
   162ac:	add	r3, r3, #828	; 0x33c
   162b0:	add	r1, pc, r1
   162b4:	add	r0, pc, r0
   162b8:	bl	11fd4 <__assert_fail@plt>
   162bc:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   162c0:	ldr	r3, [pc, #48]	; 162f8 <flatcc_builder_create_vector@@Base+0x17c>
   162c4:	movw	r2, #647	; 0x287
   162c8:	ldr	r1, [pc, #44]	; 162fc <flatcc_builder_create_vector@@Base+0x180>
   162cc:	ldr	r0, [pc, #44]	; 16300 <flatcc_builder_create_vector@@Base+0x184>
   162d0:	add	r3, pc, r3
   162d4:	add	r3, r3, #44	; 0x2c
   162d8:	add	r1, pc, r1
   162dc:	add	r0, pc, r0
   162e0:	bl	11fd4 <__assert_fail@plt>
   162e4:	andeq	r3, r1, r8, asr lr
   162e8:	andeq	r0, r0, r8, asr #32
   162ec:	andeq	r2, r0, ip, lsr #5
   162f0:	strdeq	r2, [r0], -r4
   162f4:	strdeq	r2, [r0], -r8
   162f8:	andeq	r2, r0, r4, lsl #5
   162fc:	andeq	r2, r0, ip, asr #19
   16300:	andeq	r2, r0, r0, asr sl

00016304 <flatcc_builder_end_vector@@Base>:
   16304:	ldr	r1, [r0, #32]
   16308:	strd	r4, [sp, #-12]!
   1630c:	ldrh	r3, [r1, #14]
   16310:	str	lr, [sp, #8]
   16314:	sub	sp, sp, #12
   16318:	cmp	r3, #4
   1631c:	bne	163d4 <flatcc_builder_end_vector@@Base+0xd0>
   16320:	ldrh	ip, [r0, #130]	; 0x82
   16324:	mov	r4, r0
   16328:	ldr	r3, [r1, #16]
   1632c:	ldr	r2, [r1, #20]
   16330:	ldr	r1, [r1, #24]
   16334:	str	r1, [sp, #4]
   16338:	ldr	r1, [r0, #16]
   1633c:	str	ip, [sp]
   16340:	bl	1617c <flatcc_builder_create_vector@@Base>
   16344:	subs	r5, r0, #0
   16348:	beq	163c0 <flatcc_builder_end_vector@@Base+0xbc>
   1634c:	mov	r1, #0
   16350:	ldr	r0, [r4, #16]
   16354:	ldr	r2, [r4, #20]
   16358:	bl	11fb0 <memset@plt>
   1635c:	ldr	r3, [r4, #32]
   16360:	ldr	r0, [r4, #60]	; 0x3c
   16364:	ldr	r2, [r4, #64]	; 0x40
   16368:	ldr	ip, [r3]
   1636c:	ldmib	r3, {r1, lr}
   16370:	add	r0, r0, ip
   16374:	sub	r2, r2, ip
   16378:	str	r0, [r4, #16]
   1637c:	cmp	r2, r1
   16380:	ldrh	r0, [r4, #128]	; 0x80
   16384:	movcs	r2, r1
   16388:	str	lr, [r4, #20]
   1638c:	str	ip, [r4, #28]
   16390:	ldrh	ip, [r4, #130]	; 0x82
   16394:	str	r2, [r4, #24]
   16398:	ldr	r2, [r4, #156]	; 0x9c
   1639c:	str	r1, [r3, #4]
   163a0:	cmp	r0, ip
   163a4:	sub	r0, r3, #36	; 0x24
   163a8:	strhcc	ip, [r4, #128]	; 0x80
   163ac:	ldrh	r1, [r3, #12]
   163b0:	sub	r3, r2, #1
   163b4:	str	r0, [r4, #32]
   163b8:	strh	r1, [r4, #130]	; 0x82
   163bc:	str	r3, [r4, #156]	; 0x9c
   163c0:	mov	r0, r5
   163c4:	add	sp, sp, #12
   163c8:	ldrd	r4, [sp]
   163cc:	add	sp, sp, #8
   163d0:	pop	{pc}		; (ldr pc, [sp], #4)
   163d4:	ldr	r3, [pc, #28]	; 163f8 <flatcc_builder_end_vector@@Base+0xf4>
   163d8:	movw	r2, #1400	; 0x578
   163dc:	ldr	r1, [pc, #24]	; 163fc <flatcc_builder_end_vector@@Base+0xf8>
   163e0:	ldr	r0, [pc, #24]	; 16400 <flatcc_builder_end_vector@@Base+0xfc>
   163e4:	add	r3, pc, r3
   163e8:	add	r3, r3, #860	; 0x35c
   163ec:	add	r1, pc, r1
   163f0:	add	r0, pc, r0
   163f4:	bl	11fd4 <__assert_fail@plt>
   163f8:	andeq	r2, r0, r0, ror r1
   163fc:			; <UNDEFINED> instruction: 0x000028b8
   16400:	andeq	r2, r0, r4, lsl #20

00016404 <flatcc_builder_vector_count@@Base>:
   16404:	ldr	r3, [r0, #32]
   16408:	ldr	r0, [r3, #20]
   1640c:	bx	lr

00016410 <flatcc_builder_vector_edit@@Base>:
   16410:	ldr	r0, [r0, #16]
   16414:	bx	lr

00016418 <flatcc_builder_create_offset_vector_direct@@Base>:
   16418:	cmn	r2, #-1073741823	; 0xc0000001
   1641c:	bhi	16428 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   16420:	mov	r3, #0
   16424:	b	13940 <flatcc_builder_default_alloc@@Base+0x458>
   16428:	mov	r0, #0
   1642c:	bx	lr

00016430 <flatcc_builder_end_offset_vector@@Base>:
   16430:	ldr	r3, [r0, #32]
   16434:	strd	r4, [sp, #-16]!
   16438:	ldrh	r2, [r3, #14]
   1643c:	str	r6, [sp, #8]
   16440:	str	lr, [sp, #12]
   16444:	cmp	r2, #5
   16448:	bne	164ec <flatcc_builder_end_offset_vector@@Base+0xbc>
   1644c:	ldr	r1, [r0, #16]
   16450:	mov	r4, r0
   16454:	ldr	r2, [r3, #20]
   16458:	bl	16418 <flatcc_builder_create_offset_vector_direct@@Base>
   1645c:	subs	r5, r0, #0
   16460:	beq	164d8 <flatcc_builder_end_offset_vector@@Base+0xa8>
   16464:	mov	r1, #0
   16468:	ldr	r0, [r4, #16]
   1646c:	ldr	r2, [r4, #20]
   16470:	bl	11fb0 <memset@plt>
   16474:	ldr	r3, [r4, #32]
   16478:	ldr	r0, [r4, #60]	; 0x3c
   1647c:	ldr	r2, [r4, #64]	; 0x40
   16480:	ldr	ip, [r3]
   16484:	ldmib	r3, {r1, lr}
   16488:	add	r0, r0, ip
   1648c:	sub	r2, r2, ip
   16490:	str	r0, [r4, #16]
   16494:	cmp	r2, r1
   16498:	ldrh	r0, [r4, #128]	; 0x80
   1649c:	movcs	r2, r1
   164a0:	str	lr, [r4, #20]
   164a4:	str	ip, [r4, #28]
   164a8:	ldrh	ip, [r4, #130]	; 0x82
   164ac:	str	r2, [r4, #24]
   164b0:	ldr	r2, [r4, #156]	; 0x9c
   164b4:	str	r1, [r3, #4]
   164b8:	cmp	r0, ip
   164bc:	sub	r0, r3, #36	; 0x24
   164c0:	strhcc	ip, [r4, #128]	; 0x80
   164c4:	ldrh	r1, [r3, #12]
   164c8:	sub	r3, r2, #1
   164cc:	str	r0, [r4, #32]
   164d0:	strh	r1, [r4, #130]	; 0x82
   164d4:	str	r3, [r4, #156]	; 0x9c
   164d8:	mov	r0, r5
   164dc:	ldrd	r4, [sp]
   164e0:	ldr	r6, [sp, #8]
   164e4:	add	sp, sp, #12
   164e8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ec:	ldr	r3, [pc, #28]	; 16510 <flatcc_builder_end_offset_vector@@Base+0xe0>
   164f0:	movw	r2, #1480	; 0x5c8
   164f4:	ldr	r1, [pc, #24]	; 16514 <flatcc_builder_end_offset_vector@@Base+0xe4>
   164f8:	ldr	r0, [pc, #24]	; 16518 <flatcc_builder_end_offset_vector@@Base+0xe8>
   164fc:	add	r3, pc, r3
   16500:	add	r3, r3, #888	; 0x378
   16504:	add	r1, pc, r1
   16508:	add	r0, pc, r0
   1650c:	bl	11fd4 <__assert_fail@plt>
   16510:	andeq	r2, r0, r8, asr r0
   16514:	andeq	r2, r0, r0, lsr #15
   16518:	andeq	r2, r0, r8, asr r9

0001651c <flatcc_builder_create_offset_vector@@Base>:
   1651c:	strd	r4, [sp, #-16]!
   16520:	mov	r5, r2
   16524:	mov	r4, r0
   16528:	str	r6, [sp, #8]
   1652c:	mov	r6, r1
   16530:	str	lr, [sp, #12]
   16534:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   16538:	cmp	r0, #0
   1653c:	beq	16554 <flatcc_builder_create_offset_vector@@Base+0x38>
   16540:	ldrd	r4, [sp]
   16544:	mov	r0, #0
   16548:	ldr	r6, [sp, #8]
   1654c:	add	sp, sp, #12
   16550:	pop	{pc}		; (ldr pc, [sp], #4)
   16554:	mov	r1, r5
   16558:	mov	r0, r4
   1655c:	bl	14c6c <flatcc_builder_extend_offset_vector@@Base>
   16560:	cmp	r0, #0
   16564:	beq	16540 <flatcc_builder_create_offset_vector@@Base+0x24>
   16568:	lsl	r2, r5, #2
   1656c:	mov	r1, r6
   16570:	bl	11f44 <memcpy@plt>
   16574:	mov	r0, r4
   16578:	ldrd	r4, [sp]
   1657c:	ldr	r6, [sp, #8]
   16580:	ldr	lr, [sp, #12]
   16584:	add	sp, sp, #16
   16588:	b	16430 <flatcc_builder_end_offset_vector@@Base>

0001658c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1658c:	ldr	r2, [r0, #32]
   16590:	strd	r4, [sp, #-16]!
   16594:	ldrh	ip, [r2, #14]
   16598:	str	r6, [sp, #8]
   1659c:	str	lr, [sp, #12]
   165a0:	cmp	ip, #5
   165a4:	bne	1665c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   165a8:	ldr	r2, [r2, #20]
   165ac:	cmn	r2, #-1073741823	; 0xc0000001
   165b0:	bhi	165cc <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   165b4:	mov	r3, r1
   165b8:	ldr	r1, [r0, #16]
   165bc:	mov	r4, r0
   165c0:	bl	13940 <flatcc_builder_default_alloc@@Base+0x458>
   165c4:	subs	r5, r0, #0
   165c8:	bne	165e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   165cc:	mov	r5, #0
   165d0:	mov	r0, r5
   165d4:	ldrd	r4, [sp]
   165d8:	ldr	r6, [sp, #8]
   165dc:	add	sp, sp, #12
   165e0:	pop	{pc}		; (ldr pc, [sp], #4)
   165e4:	mov	r1, #0
   165e8:	ldr	r0, [r4, #16]
   165ec:	ldr	r2, [r4, #20]
   165f0:	bl	11fb0 <memset@plt>
   165f4:	ldr	r3, [r4, #32]
   165f8:	ldr	r0, [r4, #60]	; 0x3c
   165fc:	ldr	r2, [r4, #64]	; 0x40
   16600:	ldr	ip, [r3]
   16604:	ldmib	r3, {r1, lr}
   16608:	add	r0, r0, ip
   1660c:	sub	r2, r2, ip
   16610:	str	r0, [r4, #16]
   16614:	cmp	r2, r1
   16618:	ldrh	r0, [r4, #128]	; 0x80
   1661c:	movcs	r2, r1
   16620:	str	lr, [r4, #20]
   16624:	str	ip, [r4, #28]
   16628:	ldrh	ip, [r4, #130]	; 0x82
   1662c:	str	r2, [r4, #24]
   16630:	ldr	r2, [r4, #156]	; 0x9c
   16634:	str	r1, [r3, #4]
   16638:	cmp	r0, ip
   1663c:	sub	r0, r3, #36	; 0x24
   16640:	strhcc	ip, [r4, #128]	; 0x80
   16644:	ldrh	r1, [r3, #12]
   16648:	sub	r3, r2, #1
   1664c:	str	r0, [r4, #32]
   16650:	strh	r1, [r4, #130]	; 0x82
   16654:	str	r3, [r4, #156]	; 0x9c
   16658:	b	165d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   1665c:	ldr	r3, [pc, #28]	; 16680 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   16660:	movw	r2, #1493	; 0x5d5
   16664:	ldr	r1, [pc, #24]	; 16684 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   16668:	ldr	r0, [pc, #24]	; 16688 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   1666c:	add	r3, pc, r3
   16670:	add	r3, r3, #924	; 0x39c
   16674:	add	r1, pc, r1
   16678:	add	r0, pc, r0
   1667c:	bl	11fd4 <__assert_fail@plt>
   16680:	andeq	r1, r0, r8, ror #29
   16684:	andeq	r2, r0, r0, lsr r6
   16688:	andeq	r2, r0, r8, ror #15

0001668c <flatcc_builder_offset_vector_edit@@Base>:
   1668c:	ldr	r0, [r0, #16]
   16690:	bx	lr

00016694 <flatcc_builder_offset_vector_count@@Base>:
   16694:	ldr	r3, [r0, #32]
   16698:	ldr	r0, [r3, #20]
   1669c:	bx	lr

000166a0 <flatcc_builder_create_union_vector_direct@@Base>:
   166a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166a4:	mov	r4, r0
   166a8:	strd	r6, [sp, #8]
   166ac:	str	r8, [sp, #16]
   166b0:	str	lr, [sp, #20]
   166b4:	sub	sp, sp, #8
   166b8:	ldr	r5, [sp, #32]
   166bc:	cmn	r5, #-1073741823	; 0xc0000001
   166c0:	bhi	16724 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   166c4:	mov	r6, r1
   166c8:	mov	r7, r2
   166cc:	mov	r1, r3
   166d0:	mov	r0, r6
   166d4:	mov	r3, r2
   166d8:	mov	r2, r5
   166dc:	bl	13940 <flatcc_builder_default_alloc@@Base+0x458>
   166e0:	subs	r8, r0, #0
   166e4:	beq	16724 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   166e8:	mvn	ip, #0
   166ec:	mov	r3, #1
   166f0:	mov	r2, r5
   166f4:	mov	r1, r7
   166f8:	mov	r0, r6
   166fc:	stm	sp, {r3, ip}
   16700:	bl	1617c <flatcc_builder_create_vector@@Base>
   16704:	stm	r4, {r0, r8}
   16708:	mov	r0, r4
   1670c:	add	sp, sp, #8
   16710:	ldrd	r4, [sp]
   16714:	ldrd	r6, [sp, #8]
   16718:	ldr	r8, [sp, #16]
   1671c:	add	sp, sp, #20
   16720:	pop	{pc}		; (ldr pc, [sp], #4)
   16724:	mov	r3, #0
   16728:	str	r3, [r4]
   1672c:	str	r3, [r4, #4]
   16730:	b	16708 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00016734 <flatcc_builder_create_union_vector@@Base>:
   16734:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16738:	mov	r5, r1
   1673c:	mov	r4, r2
   16740:	strd	r6, [sp, #8]
   16744:	mov	r6, r0
   16748:	mov	r0, r1
   1674c:	str	r8, [sp, #16]
   16750:	mov	r7, r3
   16754:	str	lr, [sp, #20]
   16758:	sub	sp, sp, #16
   1675c:	bl	153a8 <flatcc_builder_start_offset_vector@@Base>
   16760:	cmp	r0, #0
   16764:	beq	16790 <flatcc_builder_create_union_vector@@Base+0x5c>
   16768:	mov	r3, #0
   1676c:	str	r3, [r6]
   16770:	str	r3, [r6, #4]
   16774:	mov	r0, r6
   16778:	add	sp, sp, #16
   1677c:	ldrd	r4, [sp]
   16780:	ldrd	r6, [sp, #8]
   16784:	ldr	r8, [sp, #16]
   16788:	add	sp, sp, #20
   1678c:	pop	{pc}		; (ldr pc, [sp], #4)
   16790:	mov	r1, r7
   16794:	mov	r0, r5
   16798:	bl	14c6c <flatcc_builder_extend_offset_vector@@Base>
   1679c:	cmp	r0, #0
   167a0:	beq	16768 <flatcc_builder_create_union_vector@@Base+0x34>
   167a4:	ldr	r8, [r5, #20]
   167a8:	ldr	r3, [r5, #24]
   167ac:	add	r1, r7, r8
   167b0:	cmp	r1, r3
   167b4:	str	r1, [r5, #20]
   167b8:	bcs	168a4 <flatcc_builder_create_union_vector@@Base+0x170>
   167bc:	ldr	r2, [r5, #16]
   167c0:	adds	r8, r2, r8
   167c4:	beq	16768 <flatcc_builder_create_union_vector@@Base+0x34>
   167c8:	mov	r0, r5
   167cc:	bl	1668c <flatcc_builder_offset_vector_edit@@Base>
   167d0:	cmp	r7, #0
   167d4:	mov	r3, r0
   167d8:	beq	16808 <flatcc_builder_create_union_vector@@Base+0xd4>
   167dc:	add	r2, r4, r7, lsl #3
   167e0:	mov	r1, r4
   167e4:	sub	lr, r8, #1
   167e8:	sub	ip, r0, #4
   167ec:	ldrb	r4, [r1]
   167f0:	add	r1, r1, #8
   167f4:	strb	r4, [lr, #1]!
   167f8:	ldr	r4, [r1, #-4]
   167fc:	cmp	r1, r2
   16800:	str	r4, [ip, #4]!
   16804:	bne	167ec <flatcc_builder_create_union_vector@@Base+0xb8>
   16808:	mov	r2, r8
   1680c:	mov	r1, r5
   16810:	str	r7, [sp]
   16814:	add	r0, sp, #8
   16818:	bl	166a0 <flatcc_builder_create_union_vector_direct@@Base>
   1681c:	mov	r1, #0
   16820:	ldr	r0, [r5, #16]
   16824:	ldr	r2, [r5, #20]
   16828:	ldr	r7, [sp, #8]
   1682c:	ldr	r4, [sp, #12]
   16830:	bl	11fb0 <memset@plt>
   16834:	ldr	r3, [r5, #32]
   16838:	str	r7, [r6]
   1683c:	ldr	r0, [r5, #60]	; 0x3c
   16840:	str	r4, [r6, #4]
   16844:	ldr	r2, [r5, #64]	; 0x40
   16848:	ldr	ip, [r3]
   1684c:	ldmib	r3, {r1, lr}
   16850:	add	r0, r0, ip
   16854:	sub	r2, r2, ip
   16858:	str	r0, [r5, #16]
   1685c:	cmp	r2, r1
   16860:	ldrh	r0, [r5, #128]	; 0x80
   16864:	movcs	r2, r1
   16868:	str	lr, [r5, #20]
   1686c:	str	ip, [r5, #28]
   16870:	ldrh	ip, [r5, #130]	; 0x82
   16874:	str	r2, [r5, #24]
   16878:	ldr	r2, [r5, #156]	; 0x9c
   1687c:	str	r1, [r3, #4]
   16880:	cmp	r0, ip
   16884:	sub	r0, r3, #36	; 0x24
   16888:	strhcc	ip, [r5, #128]	; 0x80
   1688c:	ldrh	r1, [r3, #12]
   16890:	sub	r3, r2, #1
   16894:	str	r0, [r5, #32]
   16898:	strh	r1, [r5, #130]	; 0x82
   1689c:	str	r3, [r5, #156]	; 0x9c
   168a0:	b	16774 <flatcc_builder_create_union_vector@@Base+0x40>
   168a4:	add	r1, r1, #1
   168a8:	mvn	r2, #3
   168ac:	mov	r0, r5
   168b0:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   168b4:	cmp	r0, #0
   168b8:	beq	167bc <flatcc_builder_create_union_vector@@Base+0x88>
   168bc:	b	16768 <flatcc_builder_create_union_vector@@Base+0x34>

000168c0 <flatcc_builder_start_union_vector@@Base>:
   168c0:	mov	r1, #4
   168c4:	strd	r4, [sp, #-16]!
   168c8:	mov	r4, r0
   168cc:	str	r6, [sp, #8]
   168d0:	str	lr, [sp, #12]
   168d4:	bl	1381c <flatcc_builder_default_alloc@@Base+0x334>
   168d8:	cmp	r0, #0
   168dc:	bne	16934 <flatcc_builder_start_union_vector@@Base+0x74>
   168e0:	ldr	ip, [r4, #28]
   168e4:	mov	lr, #8
   168e8:	mov	r5, #7
   168ec:	ldr	r3, [r4, #32]
   168f0:	ldr	r2, [r4, #64]	; 0x40
   168f4:	ldr	r1, [r4, #60]	; 0x3c
   168f8:	strh	r5, [r3, #14]
   168fc:	str	lr, [r3, #16]
   16900:	sub	r2, r2, ip
   16904:	str	r0, [r3, #20]
   16908:	cmn	r2, #4
   1690c:	mvnhi	r2, #3
   16910:	add	r1, r1, ip
   16914:	str	r1, [r4, #16]
   16918:	str	r2, [r4, #24]
   1691c:	mvn	r2, #3
   16920:	str	r2, [r3, #4]
   16924:	ldrd	r4, [sp]
   16928:	ldr	r6, [sp, #8]
   1692c:	add	sp, sp, #12
   16930:	pop	{pc}		; (ldr pc, [sp], #4)
   16934:	mvn	r0, #0
   16938:	b	16924 <flatcc_builder_start_union_vector@@Base+0x64>

0001693c <flatcc_builder_union_vector_edit@@Base>:
   1693c:	ldr	r0, [r0, #16]
   16940:	bx	lr

00016944 <flatcc_builder_union_vector_count@@Base>:
   16944:	ldr	r3, [r0, #32]
   16948:	ldr	r0, [r3, #20]
   1694c:	bx	lr

00016950 <flatcc_builder_end_union_vector@@Base>:
   16950:	ldr	r3, [r1, #32]
   16954:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16958:	ldrh	r3, [r3, #14]
   1695c:	strd	r6, [sp, #8]
   16960:	str	r8, [sp, #16]
   16964:	str	lr, [sp, #20]
   16968:	sub	sp, sp, #16
   1696c:	cmp	r3, #7
   16970:	bne	16ad0 <flatcc_builder_end_union_vector@@Base+0x180>
   16974:	mov	r4, r1
   16978:	mov	r6, r0
   1697c:	mov	r0, r1
   16980:	bl	16944 <flatcc_builder_union_vector_count@@Base>
   16984:	ldr	r8, [r4, #20]
   16988:	lsl	r7, r0, #2
   1698c:	mov	r5, r0
   16990:	ldr	r3, [r4, #24]
   16994:	add	r1, r7, r0
   16998:	add	r1, r1, r8
   1699c:	cmp	r1, r3
   169a0:	str	r1, [r4, #20]
   169a4:	bcs	16aa8 <flatcc_builder_end_union_vector@@Base+0x158>
   169a8:	ldr	r3, [r4, #16]
   169ac:	adds	r8, r3, r8
   169b0:	beq	16ac0 <flatcc_builder_end_union_vector@@Base+0x170>
   169b4:	mov	r0, r4
   169b8:	add	r7, r8, r7
   169bc:	bl	1693c <flatcc_builder_union_vector_edit@@Base>
   169c0:	cmp	r5, #0
   169c4:	beq	169f0 <flatcc_builder_end_union_vector@@Base+0xa0>
   169c8:	add	r3, r0, r5, lsl #3
   169cc:	sub	ip, r7, #1
   169d0:	sub	r1, r8, #4
   169d4:	ldrb	lr, [r0]
   169d8:	add	r0, r0, #8
   169dc:	strb	lr, [ip, #1]!
   169e0:	ldr	lr, [r0, #-4]
   169e4:	cmp	r0, r3
   169e8:	str	lr, [r1, #4]!
   169ec:	bne	169d4 <flatcc_builder_end_union_vector@@Base+0x84>
   169f0:	mov	r3, r8
   169f4:	mov	r2, r7
   169f8:	str	r5, [sp]
   169fc:	mov	r1, r4
   16a00:	add	r0, sp, #8
   16a04:	bl	166a0 <flatcc_builder_create_union_vector_direct@@Base>
   16a08:	mov	r1, #0
   16a0c:	ldr	r0, [r4, #16]
   16a10:	ldr	r2, [r4, #20]
   16a14:	ldr	r7, [sp, #8]
   16a18:	ldr	r5, [sp, #12]
   16a1c:	bl	11fb0 <memset@plt>
   16a20:	ldr	r3, [r4, #32]
   16a24:	str	r7, [r6]
   16a28:	ldr	r0, [r4, #60]	; 0x3c
   16a2c:	str	r5, [r6, #4]
   16a30:	ldr	r2, [r4, #64]	; 0x40
   16a34:	ldr	ip, [r3]
   16a38:	ldmib	r3, {r1, lr}
   16a3c:	add	r0, r0, ip
   16a40:	sub	r2, r2, ip
   16a44:	str	r0, [r4, #16]
   16a48:	cmp	r2, r1
   16a4c:	ldrh	r0, [r4, #128]	; 0x80
   16a50:	movcs	r2, r1
   16a54:	str	lr, [r4, #20]
   16a58:	str	ip, [r4, #28]
   16a5c:	ldrh	ip, [r4, #130]	; 0x82
   16a60:	str	r2, [r4, #24]
   16a64:	ldr	r2, [r4, #156]	; 0x9c
   16a68:	str	r1, [r3, #4]
   16a6c:	cmp	r0, ip
   16a70:	sub	r0, r3, #36	; 0x24
   16a74:	strhcc	ip, [r4, #128]	; 0x80
   16a78:	ldrh	r1, [r3, #12]
   16a7c:	sub	r3, r2, #1
   16a80:	str	r0, [r4, #32]
   16a84:	strh	r1, [r4, #130]	; 0x82
   16a88:	str	r3, [r4, #156]	; 0x9c
   16a8c:	mov	r0, r6
   16a90:	add	sp, sp, #16
   16a94:	ldrd	r4, [sp]
   16a98:	ldrd	r6, [sp, #8]
   16a9c:	ldr	r8, [sp, #16]
   16aa0:	add	sp, sp, #20
   16aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa8:	add	r1, r1, #1
   16aac:	mvn	r2, #3
   16ab0:	mov	r0, r4
   16ab4:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   16ab8:	cmp	r0, #0
   16abc:	beq	169a8 <flatcc_builder_end_union_vector@@Base+0x58>
   16ac0:	mov	r3, #0
   16ac4:	str	r3, [r6]
   16ac8:	str	r3, [r6, #4]
   16acc:	b	16a8c <flatcc_builder_end_union_vector@@Base+0x13c>
   16ad0:	ldr	r3, [pc, #28]	; 16af4 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16ad4:	movw	r2, #1617	; 0x651
   16ad8:	ldr	r1, [pc, #24]	; 16af8 <flatcc_builder_end_union_vector@@Base+0x1a8>
   16adc:	ldr	r0, [pc, #24]	; 16afc <flatcc_builder_end_union_vector@@Base+0x1ac>
   16ae0:	add	r3, pc, r3
   16ae4:	add	r3, r3, #968	; 0x3c8
   16ae8:	add	r1, pc, r1
   16aec:	add	r0, pc, r0
   16af0:	bl	11fd4 <__assert_fail@plt>
   16af4:	andeq	r1, r0, r4, ror sl
   16af8:			; <UNDEFINED> instruction: 0x000021bc
   16afc:	ldrdeq	r2, [r0], -r4

00016b00 <flatcc_builder_extend_union_vector@@Base>:
   16b00:	ldr	ip, [r0, #32]
   16b04:	strd	r4, [sp, #-16]!
   16b08:	ldr	r3, [ip, #20]
   16b0c:	str	r6, [sp, #8]
   16b10:	str	lr, [sp, #12]
   16b14:	adds	r2, r1, r3
   16b18:	movcs	r3, #1
   16b1c:	movcc	r3, #0
   16b20:	cmn	r2, #-536870911	; 0xe0000001
   16b24:	movls	r4, #0
   16b28:	movhi	r4, #1
   16b2c:	orrs	r4, r3, r4
   16b30:	bne	16b88 <flatcc_builder_extend_union_vector@@Base+0x88>
   16b34:	ldr	r6, [r0, #20]
   16b38:	mov	r5, r0
   16b3c:	ldr	r3, [r0, #24]
   16b40:	str	r2, [ip, #20]
   16b44:	add	r1, r6, r1, lsl #3
   16b48:	cmp	r1, r3
   16b4c:	str	r1, [r0, #20]
   16b50:	bcs	16b6c <flatcc_builder_extend_union_vector@@Base+0x6c>
   16b54:	ldr	r0, [r5, #16]
   16b58:	add	r0, r0, r6
   16b5c:	ldrd	r4, [sp]
   16b60:	ldr	r6, [sp, #8]
   16b64:	add	sp, sp, #12
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	add	r1, r1, #1
   16b70:	mvn	r2, #3
   16b74:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   16b78:	cmp	r0, #0
   16b7c:	beq	16b54 <flatcc_builder_extend_union_vector@@Base+0x54>
   16b80:	mov	r0, r4
   16b84:	b	16b5c <flatcc_builder_extend_union_vector@@Base+0x5c>
   16b88:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>

00016b8c <flatcc_builder_truncate_union_vector@@Base>:
   16b8c:	mov	r3, r0
   16b90:	ldr	r0, [r0, #32]
   16b94:	str	r4, [sp, #-8]!
   16b98:	ldrh	r2, [r0, #14]
   16b9c:	str	lr, [sp, #4]
   16ba0:	cmp	r2, #7
   16ba4:	bne	16bf4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   16ba8:	mov	lr, r1
   16bac:	ldr	r1, [r0, #20]
   16bb0:	cmp	r1, lr
   16bb4:	bcc	16c18 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   16bb8:	ldr	r2, [r0, #16]
   16bbc:	sub	ip, r1, lr
   16bc0:	mov	r1, #0
   16bc4:	str	ip, [r0, #20]
   16bc8:	ldr	r0, [r3, #16]
   16bcc:	ldr	ip, [r3, #20]
   16bd0:	mul	r2, r2, lr
   16bd4:	sub	ip, ip, r2
   16bd8:	add	r0, r0, ip
   16bdc:	str	ip, [r3, #20]
   16be0:	bl	11fb0 <memset@plt>
   16be4:	ldr	r4, [sp]
   16be8:	add	sp, sp, #4
   16bec:	mov	r0, #0
   16bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf4:	ldr	r3, [pc, #64]	; 16c3c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   16bf8:	movw	r2, #1665	; 0x681
   16bfc:	ldr	r1, [pc, #60]	; 16c40 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   16c00:	ldr	r0, [pc, #60]	; 16c44 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   16c04:	add	r3, pc, r3
   16c08:	add	r3, r3, #1000	; 0x3e8
   16c0c:	add	r1, pc, r1
   16c10:	add	r0, pc, r0
   16c14:	bl	11fd4 <__assert_fail@plt>
   16c18:	ldr	r3, [pc, #40]	; 16c48 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   16c1c:	movw	r2, #1666	; 0x682
   16c20:	ldr	r1, [pc, #36]	; 16c4c <flatcc_builder_truncate_union_vector@@Base+0xc0>
   16c24:	ldr	r0, [pc, #36]	; 16c50 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   16c28:	add	r3, pc, r3
   16c2c:	add	r3, r3, #1000	; 0x3e8
   16c30:	add	r1, pc, r1
   16c34:	add	r0, pc, r0
   16c38:	bl	11fd4 <__assert_fail@plt>
   16c3c:	andeq	r1, r0, r0, asr r9
   16c40:	muleq	r0, r8, r0
   16c44:			; <UNDEFINED> instruction: 0x000023b0
   16c48:	andeq	r1, r0, ip, lsr #18
   16c4c:	andeq	r2, r0, r4, ror r0
   16c50:			; <UNDEFINED> instruction: 0x000022b0

00016c54 <flatcc_builder_union_vector_push@@Base>:
   16c54:	strd	r4, [sp, #-20]!	; 0xffffffec
   16c58:	strd	r6, [sp, #8]
   16c5c:	str	lr, [sp, #16]
   16c60:	sub	sp, sp, #12
   16c64:	add	r3, sp, #8
   16c68:	stmdb	r3, {r1, r2}
   16c6c:	ldr	r2, [r0, #32]
   16c70:	ldrh	r3, [r2, #14]
   16c74:	cmp	r3, #7
   16c78:	bne	16cf0 <flatcc_builder_union_vector_push@@Base+0x9c>
   16c7c:	ldr	r3, [r2, #20]
   16c80:	cmn	r3, #-536870911	; 0xe0000001
   16c84:	beq	16ce8 <flatcc_builder_union_vector_push@@Base+0x94>
   16c88:	ldr	r5, [r0, #20]
   16c8c:	add	r3, r3, #1
   16c90:	mov	r4, r0
   16c94:	ldr	r1, [r0, #24]
   16c98:	str	r3, [r2, #20]
   16c9c:	add	r3, r5, #8
   16ca0:	cmp	r3, r1
   16ca4:	str	r3, [r0, #20]
   16ca8:	bcs	16cd4 <flatcc_builder_union_vector_push@@Base+0x80>
   16cac:	ldr	r3, [r4, #16]
   16cb0:	adds	r0, r3, r5
   16cb4:	beq	16cc0 <flatcc_builder_union_vector_push@@Base+0x6c>
   16cb8:	ldrd	r6, [sp]
   16cbc:	strd	r6, [r3, r5]
   16cc0:	add	sp, sp, #12
   16cc4:	ldrd	r4, [sp]
   16cc8:	ldrd	r6, [sp, #8]
   16ccc:	add	sp, sp, #16
   16cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd4:	mvn	r2, #3
   16cd8:	add	r1, r5, #9
   16cdc:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   16ce0:	cmp	r0, #0
   16ce4:	beq	16cac <flatcc_builder_union_vector_push@@Base+0x58>
   16ce8:	mov	r0, #0
   16cec:	b	16cc0 <flatcc_builder_union_vector_push@@Base+0x6c>
   16cf0:	ldr	r3, [pc, #28]	; 16d14 <flatcc_builder_union_vector_push@@Base+0xc0>
   16cf4:	movw	r2, #1677	; 0x68d
   16cf8:	ldr	r1, [pc, #24]	; 16d18 <flatcc_builder_union_vector_push@@Base+0xc4>
   16cfc:	ldr	r0, [pc, #24]	; 16d1c <flatcc_builder_union_vector_push@@Base+0xc8>
   16d00:	add	r3, pc, r3
   16d04:	add	r3, r3, #1040	; 0x410
   16d08:	add	r1, pc, r1
   16d0c:	add	r0, pc, r0
   16d10:	bl	11fd4 <__assert_fail@plt>
   16d14:	andeq	r1, r0, r4, asr r8
   16d18:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   16d1c:			; <UNDEFINED> instruction: 0x000022b4

00016d20 <flatcc_builder_append_union_vector@@Base>:
   16d20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16d24:	mov	r4, r1
   16d28:	ldr	r1, [r0, #32]
   16d2c:	ldrh	r3, [r1, #14]
   16d30:	strd	r6, [sp, #8]
   16d34:	str	r8, [sp, #16]
   16d38:	str	lr, [sp, #20]
   16d3c:	cmp	r3, #7
   16d40:	bne	16de0 <flatcc_builder_append_union_vector@@Base+0xc0>
   16d44:	ldr	r3, [r1, #20]
   16d48:	adds	r3, r2, r3
   16d4c:	movcs	lr, #1
   16d50:	movcc	lr, #0
   16d54:	cmn	r3, #-536870911	; 0xe0000001
   16d58:	movls	ip, #0
   16d5c:	movhi	ip, #1
   16d60:	orrs	r8, lr, ip
   16d64:	bne	16e08 <flatcc_builder_append_union_vector@@Base+0xe8>
   16d68:	ldr	r7, [r0, #20]
   16d6c:	lsl	r6, r2, #3
   16d70:	mov	r5, r0
   16d74:	str	r3, [r1, #20]
   16d78:	ldr	r3, [r0, #24]
   16d7c:	add	r1, r6, r7
   16d80:	cmp	r1, r3
   16d84:	str	r1, [r0, #20]
   16d88:	bcs	16dc4 <flatcc_builder_append_union_vector@@Base+0xa4>
   16d8c:	ldr	r3, [r5, #16]
   16d90:	adds	r3, r3, r7
   16d94:	beq	16dac <flatcc_builder_append_union_vector@@Base+0x8c>
   16d98:	mov	r0, r3
   16d9c:	mov	r2, r6
   16da0:	mov	r1, r4
   16da4:	bl	11f44 <memcpy@plt>
   16da8:	mov	r3, r0
   16dac:	ldrd	r4, [sp]
   16db0:	mov	r0, r3
   16db4:	ldrd	r6, [sp, #8]
   16db8:	ldr	r8, [sp, #16]
   16dbc:	add	sp, sp, #20
   16dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc4:	add	r1, r1, #1
   16dc8:	mvn	r2, #3
   16dcc:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   16dd0:	cmp	r0, #0
   16dd4:	beq	16d8c <flatcc_builder_append_union_vector@@Base+0x6c>
   16dd8:	mov	r3, r8
   16ddc:	b	16dac <flatcc_builder_append_union_vector@@Base+0x8c>
   16de0:	ldr	r3, [pc, #36]	; 16e0c <flatcc_builder_append_union_vector@@Base+0xec>
   16de4:	movw	r2, #1692	; 0x69c
   16de8:	ldr	r1, [pc, #32]	; 16e10 <flatcc_builder_append_union_vector@@Base+0xf0>
   16dec:	ldr	r0, [pc, #32]	; 16e14 <flatcc_builder_append_union_vector@@Base+0xf4>
   16df0:	add	r3, pc, r3
   16df4:	add	r3, r3, #1072	; 0x430
   16df8:	add	r1, pc, r1
   16dfc:	add	r3, r3, #4
   16e00:	add	r0, pc, r0
   16e04:	bl	11fd4 <__assert_fail@plt>
   16e08:	bl	137e4 <flatcc_builder_default_alloc@@Base+0x2fc>
   16e0c:	andeq	r1, r0, r4, ror #14
   16e10:	andeq	r1, r0, ip, lsr #29
   16e14:	andeq	r2, r0, r0, asr #3

00016e18 <flatcc_builder_create_string@@Base>:
   16e18:	ldr	ip, [r0, #136]	; 0x88
   16e1c:	cmp	r2, #0
   16e20:	strd	r4, [sp, #-20]!	; 0xffffffec
   16e24:	mov	r5, #4
   16e28:	mov	r4, r0
   16e2c:	strd	r6, [sp, #8]
   16e30:	mov	r0, #1
   16e34:	moveq	r7, #2
   16e38:	str	lr, [sp, #16]
   16e3c:	sub	sp, sp, #92	; 0x5c
   16e40:	moveq	r1, r0
   16e44:	add	r3, sp, #12
   16e48:	ldr	lr, [pc, #204]	; 16f1c <flatcc_builder_create_string@@Base+0x104>
   16e4c:	str	r2, [sp, #12]
   16e50:	str	r3, [sp, #24]
   16e54:	sub	r3, ip, r2
   16e58:	sub	r3, r3, #1
   16e5c:	str	r5, [sp, #28]
   16e60:	and	r3, r3, #3
   16e64:	add	lr, pc, lr
   16e68:	add	r3, r3, r0
   16e6c:	beq	16e84 <flatcc_builder_create_string@@Base+0x6c>
   16e70:	add	r5, r2, r5
   16e74:	mov	r7, #3
   16e78:	str	r1, [sp, #32]
   16e7c:	mov	r1, #2
   16e80:	str	r2, [sp, #36]	; 0x24
   16e84:	ldr	r6, [pc, #148]	; 16f20 <flatcc_builder_create_string@@Base+0x108>
   16e88:	add	r0, r3, r5
   16e8c:	add	r2, sp, #88	; 0x58
   16e90:	add	r1, r1, #1
   16e94:	sub	r5, ip, r0
   16e98:	add	r1, r2, r1, lsl #3
   16e9c:	str	r0, [sp, #16]
   16ea0:	cmp	ip, r5
   16ea4:	ldr	r2, [lr, r6]
   16ea8:	str	r7, [sp, #20]
   16eac:	strd	r2, [r1, #-72]	; 0xffffffb8
   16eb0:	ble	16ef4 <flatcc_builder_create_string@@Base+0xdc>
   16eb4:	mov	r2, r7
   16eb8:	mov	r3, r5
   16ebc:	str	r0, [sp]
   16ec0:	add	r1, sp, #24
   16ec4:	ldr	r0, [r4, #36]	; 0x24
   16ec8:	ldr	r6, [r4, #44]	; 0x2c
   16ecc:	blx	r6
   16ed0:	cmp	r0, #0
   16ed4:	bne	16f18 <flatcc_builder_create_string@@Base+0x100>
   16ed8:	mov	r0, r5
   16edc:	str	r5, [r4, #136]	; 0x88
   16ee0:	add	sp, sp, #92	; 0x5c
   16ee4:	ldrd	r4, [sp]
   16ee8:	ldrd	r6, [sp, #8]
   16eec:	add	sp, sp, #16
   16ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ef4:	ldr	r3, [pc, #40]	; 16f24 <flatcc_builder_create_string@@Base+0x10c>
   16ef8:	movw	r2, #647	; 0x287
   16efc:	ldr	r1, [pc, #36]	; 16f28 <flatcc_builder_create_string@@Base+0x110>
   16f00:	ldr	r0, [pc, #36]	; 16f2c <flatcc_builder_create_string@@Base+0x114>
   16f04:	add	r3, pc, r3
   16f08:	add	r3, r3, #44	; 0x2c
   16f0c:	add	r1, pc, r1
   16f10:	add	r0, pc, r0
   16f14:	bl	11fd4 <__assert_fail@plt>
   16f18:	bl	137ac <flatcc_builder_default_alloc@@Base+0x2c4>
   16f1c:	muleq	r1, r4, r1
   16f20:	andeq	r0, r0, r8, asr #32
   16f24:	andeq	r1, r0, r0, asr r6
   16f28:	muleq	r0, r8, sp
   16f2c:	andeq	r1, r0, ip, lsl lr

00016f30 <flatcc_builder_create_string_str@@Base>:
   16f30:	strd	r4, [sp, #-16]!
   16f34:	mov	r5, r0
   16f38:	mov	r0, r1
   16f3c:	mov	r4, r1
   16f40:	str	r6, [sp, #8]
   16f44:	str	lr, [sp, #12]
   16f48:	bl	11f98 <strlen@plt>
   16f4c:	mov	r2, r0
   16f50:	mov	r1, r4
   16f54:	ldr	r6, [sp, #8]
   16f58:	mov	r0, r5
   16f5c:	ldrd	r4, [sp]
   16f60:	ldr	lr, [sp, #12]
   16f64:	add	sp, sp, #16
   16f68:	b	16e18 <flatcc_builder_create_string@@Base>

00016f6c <flatcc_builder_create_string_strn@@Base>:
   16f6c:	strd	r4, [sp, #-16]!
   16f70:	mov	r4, r1
   16f74:	mov	r1, #0
   16f78:	str	r6, [sp, #8]
   16f7c:	mov	r6, r0
   16f80:	mov	r0, r4
   16f84:	mov	r5, r2
   16f88:	str	lr, [sp, #12]
   16f8c:	bl	11fbc <memchr@plt>
   16f90:	cmp	r0, #0
   16f94:	mov	r1, r4
   16f98:	ldr	lr, [sp, #12]
   16f9c:	subne	r5, r0, r4
   16fa0:	mov	r0, r6
   16fa4:	mov	r2, r5
   16fa8:	ldrd	r4, [sp]
   16fac:	ldr	r6, [sp, #8]
   16fb0:	add	sp, sp, #16
   16fb4:	b	16e18 <flatcc_builder_create_string@@Base>

00016fb8 <flatcc_builder_end_string@@Base>:
   16fb8:	ldr	r3, [r0, #32]
   16fbc:	strd	r4, [sp, #-16]!
   16fc0:	ldrh	r2, [r3, #14]
   16fc4:	str	r6, [sp, #8]
   16fc8:	str	lr, [sp, #12]
   16fcc:	cmp	r2, #6
   16fd0:	bne	170a8 <flatcc_builder_end_string@@Base+0xf0>
   16fd4:	ldr	r2, [r3, #20]
   16fd8:	mov	r4, r0
   16fdc:	ldr	r3, [r0, #20]
   16fe0:	cmp	r2, r3
   16fe4:	bne	17080 <flatcc_builder_end_string@@Base+0xc8>
   16fe8:	ldr	r1, [r0, #16]
   16fec:	bl	16e18 <flatcc_builder_create_string@@Base>
   16ff0:	subs	r5, r0, #0
   16ff4:	beq	1706c <flatcc_builder_end_string@@Base+0xb4>
   16ff8:	mov	r1, #0
   16ffc:	ldr	r0, [r4, #16]
   17000:	ldr	r2, [r4, #20]
   17004:	bl	11fb0 <memset@plt>
   17008:	ldr	r3, [r4, #32]
   1700c:	ldr	r0, [r4, #60]	; 0x3c
   17010:	ldr	r2, [r4, #64]	; 0x40
   17014:	ldr	ip, [r3]
   17018:	ldmib	r3, {r1, lr}
   1701c:	add	r0, r0, ip
   17020:	sub	r2, r2, ip
   17024:	str	r0, [r4, #16]
   17028:	cmp	r2, r1
   1702c:	ldrh	r0, [r4, #128]	; 0x80
   17030:	movcs	r2, r1
   17034:	str	lr, [r4, #20]
   17038:	str	ip, [r4, #28]
   1703c:	ldrh	ip, [r4, #130]	; 0x82
   17040:	str	r2, [r4, #24]
   17044:	ldr	r2, [r4, #156]	; 0x9c
   17048:	str	r1, [r3, #4]
   1704c:	cmp	r0, ip
   17050:	sub	r0, r3, #36	; 0x24
   17054:	strhcc	ip, [r4, #128]	; 0x80
   17058:	ldrh	r1, [r3, #12]
   1705c:	sub	r3, r2, #1
   17060:	str	r0, [r4, #32]
   17064:	strh	r1, [r4, #130]	; 0x82
   17068:	str	r3, [r4, #156]	; 0x9c
   1706c:	mov	r0, r5
   17070:	ldrd	r4, [sp]
   17074:	ldr	r6, [sp, #8]
   17078:	add	sp, sp, #12
   1707c:	pop	{pc}		; (ldr pc, [sp], #4)
   17080:	ldr	r3, [pc, #72]	; 170d0 <flatcc_builder_end_string@@Base+0x118>
   17084:	movw	r2, #1733	; 0x6c5
   17088:	ldr	r1, [pc, #68]	; 170d4 <flatcc_builder_end_string@@Base+0x11c>
   1708c:	ldr	r0, [pc, #68]	; 170d8 <flatcc_builder_end_string@@Base+0x120>
   17090:	add	r3, pc, r3
   17094:	add	r3, r3, #1104	; 0x450
   17098:	add	r1, pc, r1
   1709c:	add	r3, r3, #8
   170a0:	add	r0, pc, r0
   170a4:	bl	11fd4 <__assert_fail@plt>
   170a8:	ldr	r3, [pc, #44]	; 170dc <flatcc_builder_end_string@@Base+0x124>
   170ac:	movw	r2, #1732	; 0x6c4
   170b0:	ldr	r1, [pc, #40]	; 170e0 <flatcc_builder_end_string@@Base+0x128>
   170b4:	ldr	r0, [pc, #40]	; 170e4 <flatcc_builder_end_string@@Base+0x12c>
   170b8:	add	r3, pc, r3
   170bc:	add	r3, r3, #1104	; 0x450
   170c0:	add	r1, pc, r1
   170c4:	add	r3, r3, #8
   170c8:	add	r0, pc, r0
   170cc:	bl	11fd4 <__assert_fail@plt>
   170d0:	andeq	r1, r0, r4, asr #9
   170d4:	andeq	r1, r0, ip, lsl #24
   170d8:	andeq	r1, r0, r4, asr pc
   170dc:	muleq	r0, ip, r4
   170e0:	andeq	r1, r0, r4, ror #23
   170e4:	andeq	r1, r0, ip, asr #27

000170e8 <flatcc_builder_string_edit@@Base>:
   170e8:	ldr	r0, [r0, #16]
   170ec:	bx	lr

000170f0 <flatcc_builder_string_len@@Base>:
   170f0:	ldr	r3, [r0, #32]
   170f4:	ldr	r0, [r3, #20]
   170f8:	bx	lr

000170fc <flatcc_builder_table_add@@Base>:
   170fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17100:	mov	r4, r0
   17104:	ldr	r0, [r0, #32]
   17108:	ldrh	r0, [r0, #14]
   1710c:	strd	r6, [sp, #8]
   17110:	strd	r8, [sp, #16]
   17114:	str	sl, [sp, #24]
   17118:	str	lr, [sp, #28]
   1711c:	cmp	r0, #3
   17120:	bne	17250 <flatcc_builder_table_add@@Base+0x154>
   17124:	movw	r0, #32764	; 0x7ffc
   17128:	cmp	r1, r0
   1712c:	bhi	17228 <flatcc_builder_table_add@@Base+0x12c>
   17130:	ldrh	r0, [r4, #130]	; 0x82
   17134:	lsl	r8, r1, #1
   17138:	ldr	lr, [r4, #4]
   1713c:	cmp	r0, r3
   17140:	strhcc	r3, [r4, #130]	; 0x82
   17144:	ldrh	r6, [lr, r8]
   17148:	add	lr, lr, r8
   1714c:	cmp	r6, #0
   17150:	bne	17200 <flatcc_builder_table_add@@Base+0x104>
   17154:	ldr	ip, [r4, #12]
   17158:	movw	r9, #31153	; 0x79b1
   1715c:	movt	r9, #40503	; 0x9e37
   17160:	uxth	r7, r1
   17164:	sub	r5, r3, #1
   17168:	ldr	r0, [r4, #20]
   1716c:	rsb	r3, r3, #0
   17170:	eor	ip, ip, r1
   17174:	ldr	r1, [r4, #24]
   17178:	mul	ip, r9, ip
   1717c:	add	r5, r5, r0
   17180:	and	r5, r5, r3
   17184:	eor	ip, ip, r2
   17188:	add	r2, r2, r5
   1718c:	cmp	r2, r1
   17190:	mul	ip, r9, ip
   17194:	str	ip, [r4, #12]
   17198:	str	r2, [r4, #20]
   1719c:	bcs	171d8 <flatcc_builder_table_add@@Base+0xdc>
   171a0:	add	r3, r5, #4
   171a4:	ldr	r0, [r4, #16]
   171a8:	strh	r3, [lr]
   171ac:	ldrh	r3, [r4, #8]
   171b0:	add	r0, r0, r5
   171b4:	cmp	r3, r7
   171b8:	addls	r7, r7, #1
   171bc:	strhls	r7, [r4, #8]
   171c0:	ldrd	r4, [sp]
   171c4:	ldrd	r6, [sp, #8]
   171c8:	ldrd	r8, [sp, #16]
   171cc:	ldr	sl, [sp, #24]
   171d0:	add	sp, sp, #28
   171d4:	pop	{pc}		; (ldr pc, [sp], #4)
   171d8:	add	r1, r2, #1
   171dc:	mov	r0, r4
   171e0:	movw	r2, #65532	; 0xfffc
   171e4:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   171e8:	cmp	r0, #0
   171ec:	movne	r0, r6
   171f0:	bne	171c0 <flatcc_builder_table_add@@Base+0xc4>
   171f4:	ldr	lr, [r4, #4]
   171f8:	add	lr, lr, r8
   171fc:	b	171a0 <flatcc_builder_table_add@@Base+0xa4>
   17200:	ldr	r3, [pc, #112]	; 17278 <flatcc_builder_table_add@@Base+0x17c>
   17204:	movw	r2, #1784	; 0x6f8
   17208:	ldr	r1, [pc, #108]	; 1727c <flatcc_builder_table_add@@Base+0x180>
   1720c:	ldr	r0, [pc, #108]	; 17280 <flatcc_builder_table_add@@Base+0x184>
   17210:	add	r3, pc, r3
   17214:	add	r3, r3, #1136	; 0x470
   17218:	add	r1, pc, r1
   1721c:	add	r3, r3, #4
   17220:	add	r0, pc, r0
   17224:	bl	11fd4 <__assert_fail@plt>
   17228:	ldr	r3, [pc, #84]	; 17284 <flatcc_builder_table_add@@Base+0x188>
   1722c:	movw	r2, #1774	; 0x6ee
   17230:	ldr	r1, [pc, #80]	; 17288 <flatcc_builder_table_add@@Base+0x18c>
   17234:	ldr	r0, [pc, #80]	; 1728c <flatcc_builder_table_add@@Base+0x190>
   17238:	add	r3, pc, r3
   1723c:	add	r3, r3, #1136	; 0x470
   17240:	add	r1, pc, r1
   17244:	add	r3, r3, #4
   17248:	add	r0, pc, r0
   1724c:	bl	11fd4 <__assert_fail@plt>
   17250:	ldr	r3, [pc, #56]	; 17290 <flatcc_builder_table_add@@Base+0x194>
   17254:	movw	r2, #1773	; 0x6ed
   17258:	ldr	r1, [pc, #52]	; 17294 <flatcc_builder_table_add@@Base+0x198>
   1725c:	ldr	r0, [pc, #52]	; 17298 <flatcc_builder_table_add@@Base+0x19c>
   17260:	add	r3, pc, r3
   17264:	add	r3, r3, #1136	; 0x470
   17268:	add	r1, pc, r1
   1726c:	add	r3, r3, #4
   17270:	add	r0, pc, r0
   17274:	bl	11fd4 <__assert_fail@plt>
   17278:	andeq	r1, r0, r4, asr #6
   1727c:	andeq	r1, r0, ip, lsl #21
   17280:	andeq	r1, r0, ip, lsl #22
   17284:	andeq	r1, r0, ip, lsl r3
   17288:	andeq	r1, r0, r4, ror #20
   1728c:	ldrdeq	r1, [r0], -r0
   17290:	strdeq	r1, [r0], -r4
   17294:	andeq	r1, r0, ip, lsr sl
   17298:	andeq	r1, r0, r0, lsl sp

0001729c <flatcc_builder_table_edit@@Base>:
   1729c:	ldr	r2, [r0, #32]
   172a0:	ldrh	r2, [r2, #14]
   172a4:	cmp	r2, #3
   172a8:	bne	172c0 <flatcc_builder_table_edit@@Base+0x24>
   172ac:	ldr	r3, [r0, #20]
   172b0:	ldr	r0, [r0, #16]
   172b4:	sub	r3, r3, r1
   172b8:	add	r0, r0, r3
   172bc:	bx	lr
   172c0:	ldr	r3, [pc, #36]	; 172ec <flatcc_builder_table_edit@@Base+0x50>
   172c4:	movw	r2, #1794	; 0x702
   172c8:	str	r4, [sp, #-8]!
   172cc:	ldr	r1, [pc, #28]	; 172f0 <flatcc_builder_table_edit@@Base+0x54>
   172d0:	str	lr, [sp, #4]
   172d4:	ldr	r0, [pc, #24]	; 172f4 <flatcc_builder_table_edit@@Base+0x58>
   172d8:	add	r3, pc, r3
   172dc:	add	r3, r3, #1168	; 0x490
   172e0:	add	r1, pc, r1
   172e4:	add	r0, pc, r0
   172e8:	bl	11fd4 <__assert_fail@plt>
   172ec:	andeq	r1, r0, ip, ror r2
   172f0:	andeq	r1, r0, r4, asr #19
   172f4:	muleq	r0, ip, ip

000172f8 <flatcc_builder_table_add_copy@@Base>:
   172f8:	strd	r4, [sp, #-16]!
   172fc:	mov	r4, r3
   17300:	ldrh	r3, [sp, #16]
   17304:	str	r6, [sp, #8]
   17308:	mov	r6, r2
   1730c:	mov	r2, r4
   17310:	str	lr, [sp, #12]
   17314:	bl	170fc <flatcc_builder_table_add@@Base>
   17318:	subs	r5, r0, #0
   1731c:	beq	1732c <flatcc_builder_table_add_copy@@Base+0x34>
   17320:	mov	r2, r4
   17324:	mov	r1, r6
   17328:	bl	11f44 <memcpy@plt>
   1732c:	mov	r0, r5
   17330:	ldrd	r4, [sp]
   17334:	ldr	r6, [sp, #8]
   17338:	add	sp, sp, #12
   1733c:	pop	{pc}		; (ldr pc, [sp], #4)

00017340 <flatcc_builder_table_add_offset@@Base>:
   17340:	ldr	r3, [r0, #32]
   17344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17348:	ldrh	r3, [r3, #14]
   1734c:	strd	r6, [sp, #8]
   17350:	str	r8, [sp, #16]
   17354:	str	lr, [sp, #20]
   17358:	cmp	r3, #3
   1735c:	bne	17484 <flatcc_builder_table_add_offset@@Base+0x144>
   17360:	movw	r3, #32764	; 0x7ffc
   17364:	cmp	r1, r3
   17368:	bhi	1745c <flatcc_builder_table_add_offset@@Base+0x11c>
   1736c:	ldr	ip, [r0, #4]
   17370:	lsl	r8, r1, #1
   17374:	mov	r4, r0
   17378:	ldrh	r6, [ip, r8]
   1737c:	add	ip, ip, r8
   17380:	cmp	r6, #0
   17384:	bne	17434 <flatcc_builder_table_add_offset@@Base+0xf4>
   17388:	ldr	r3, [r0, #12]
   1738c:	movw	r2, #31153	; 0x79b1
   17390:	movt	r2, #40503	; 0x9e37
   17394:	uxth	r7, r1
   17398:	ldr	r5, [r0, #20]
   1739c:	ldr	lr, [r0, #24]
   173a0:	eor	r3, r3, r1
   173a4:	mul	r3, r2, r3
   173a8:	add	r5, r5, #3
   173ac:	bic	r5, r5, #3
   173b0:	add	r1, r5, #4
   173b4:	eor	r3, r3, #4
   173b8:	cmp	r1, lr
   173bc:	str	r1, [r0, #20]
   173c0:	mul	r3, r2, r3
   173c4:	str	r3, [r0, #12]
   173c8:	bhi	17414 <flatcc_builder_table_add_offset@@Base+0xd4>
   173cc:	uxth	r2, r5
   173d0:	ldr	r0, [r4, #16]
   173d4:	add	r3, r2, #4
   173d8:	strh	r3, [ip]
   173dc:	ldrh	r3, [r4, #8]
   173e0:	add	r0, r0, r5
   173e4:	cmp	r3, r7
   173e8:	ldr	r3, [r4]
   173ec:	addls	r7, r7, #1
   173f0:	strhls	r7, [r4, #8]
   173f4:	add	r1, r3, #2
   173f8:	str	r1, [r4]
   173fc:	strh	r2, [r3]
   17400:	ldrd	r4, [sp]
   17404:	ldrd	r6, [sp, #8]
   17408:	ldr	r8, [sp, #16]
   1740c:	add	sp, sp, #20
   17410:	pop	{pc}		; (ldr pc, [sp], #4)
   17414:	movw	r2, #65532	; 0xfffc
   17418:	bl	13460 <access_monster_buffer@@Base+0x6dc>
   1741c:	cmp	r0, #0
   17420:	movne	r0, r6
   17424:	bne	17400 <flatcc_builder_table_add_offset@@Base+0xc0>
   17428:	ldr	ip, [r4, #4]
   1742c:	add	ip, ip, r8
   17430:	b	173cc <flatcc_builder_table_add_offset@@Base+0x8c>
   17434:	ldr	r3, [pc, #112]	; 174ac <flatcc_builder_table_add_offset@@Base+0x16c>
   17438:	movw	r2, #1819	; 0x71b
   1743c:	ldr	r1, [pc, #108]	; 174b0 <flatcc_builder_table_add_offset@@Base+0x170>
   17440:	ldr	r0, [pc, #108]	; 174b4 <flatcc_builder_table_add_offset@@Base+0x174>
   17444:	add	r3, pc, r3
   17448:	add	r3, r3, #1184	; 0x4a0
   1744c:	add	r1, pc, r1
   17450:	add	r3, r3, #12
   17454:	add	r0, pc, r0
   17458:	bl	11fd4 <__assert_fail@plt>
   1745c:	ldr	r3, [pc, #84]	; 174b8 <flatcc_builder_table_add_offset@@Base+0x178>
   17460:	movw	r2, #1812	; 0x714
   17464:	ldr	r1, [pc, #80]	; 174bc <flatcc_builder_table_add_offset@@Base+0x17c>
   17468:	ldr	r0, [pc, #80]	; 174c0 <flatcc_builder_table_add_offset@@Base+0x180>
   1746c:	add	r3, pc, r3
   17470:	add	r3, r3, #1184	; 0x4a0
   17474:	add	r1, pc, r1
   17478:	add	r3, r3, #12
   1747c:	add	r0, pc, r0
   17480:	bl	11fd4 <__assert_fail@plt>
   17484:	ldr	r3, [pc, #56]	; 174c4 <flatcc_builder_table_add_offset@@Base+0x184>
   17488:	movw	r2, #1811	; 0x713
   1748c:	ldr	r1, [pc, #52]	; 174c8 <flatcc_builder_table_add_offset@@Base+0x188>
   17490:	ldr	r0, [pc, #52]	; 174cc <flatcc_builder_table_add_offset@@Base+0x18c>
   17494:	add	r3, pc, r3
   17498:	add	r3, r3, #1184	; 0x4a0
   1749c:	add	r1, pc, r1
   174a0:	add	r3, r3, #12
   174a4:	add	r0, pc, r0
   174a8:	bl	11fd4 <__assert_fail@plt>
   174ac:	andeq	r1, r0, r0, lsl r1
   174b0:	andeq	r1, r0, r8, asr r8
   174b4:	ldrdeq	r1, [r0], -r8
   174b8:	andeq	r1, r0, r8, ror #1
   174bc:	andeq	r1, r0, r0, lsr r8
   174c0:	muleq	r0, ip, fp
   174c4:	andeq	r1, r0, r0, asr #1
   174c8:	andeq	r1, r0, r8, lsl #16
   174cc:	ldrdeq	r1, [r0], -ip

000174d0 <flatcc_builder_table_add_union@@Base>:
   174d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   174d4:	strd	r6, [sp, #8]
   174d8:	str	lr, [sp, #16]
   174dc:	sub	sp, sp, #12
   174e0:	add	ip, sp, #8
   174e4:	stmdb	ip, {r2, r3}
   174e8:	ldr	r3, [r0, #32]
   174ec:	ldrb	r5, [sp]
   174f0:	ldr	r6, [sp, #4]
   174f4:	ldrh	r3, [r3, #14]
   174f8:	cmp	r3, #3
   174fc:	bne	17590 <flatcc_builder_table_add_union@@Base+0xc0>
   17500:	cmp	r5, #0
   17504:	mov	r4, r0
   17508:	mov	r7, r1
   1750c:	beq	17560 <flatcc_builder_table_add_union@@Base+0x90>
   17510:	cmp	r6, #0
   17514:	beq	17528 <flatcc_builder_table_add_union@@Base+0x58>
   17518:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   1751c:	cmp	r0, #0
   17520:	strne	r6, [r0]
   17524:	beq	175e0 <flatcc_builder_table_add_union@@Base+0x110>
   17528:	mov	r3, #1
   1752c:	sub	r1, r7, #1
   17530:	mov	r2, r3
   17534:	mov	r0, r4
   17538:	bl	170fc <flatcc_builder_table_add@@Base>
   1753c:	subs	r3, r0, #0
   17540:	beq	175b8 <flatcc_builder_table_add_union@@Base+0xe8>
   17544:	mov	r0, #0
   17548:	strb	r5, [r3]
   1754c:	add	sp, sp, #12
   17550:	ldrd	r4, [sp]
   17554:	ldrd	r6, [sp, #8]
   17558:	add	sp, sp, #16
   1755c:	pop	{pc}		; (ldr pc, [sp], #4)
   17560:	cmp	r6, #0
   17564:	beq	17528 <flatcc_builder_table_add_union@@Base+0x58>
   17568:	ldr	r3, [pc, #152]	; 17608 <flatcc_builder_table_add_union@@Base+0x138>
   1756c:	movw	r2, #1519	; 0x5ef
   17570:	ldr	r1, [pc, #148]	; 1760c <flatcc_builder_table_add_union@@Base+0x13c>
   17574:	ldr	r0, [pc, #148]	; 17610 <flatcc_builder_table_add_union@@Base+0x140>
   17578:	add	r3, pc, r3
   1757c:	add	r3, r3, #1216	; 0x4c0
   17580:	add	r1, pc, r1
   17584:	add	r3, r3, #12
   17588:	add	r0, pc, r0
   1758c:	bl	11fd4 <__assert_fail@plt>
   17590:	ldr	r3, [pc, #124]	; 17614 <flatcc_builder_table_add_union@@Base+0x144>
   17594:	movw	r2, #1518	; 0x5ee
   17598:	ldr	r1, [pc, #120]	; 17618 <flatcc_builder_table_add_union@@Base+0x148>
   1759c:	ldr	r0, [pc, #120]	; 1761c <flatcc_builder_table_add_union@@Base+0x14c>
   175a0:	add	r3, pc, r3
   175a4:	add	r3, r3, #1216	; 0x4c0
   175a8:	add	r1, pc, r1
   175ac:	add	r3, r3, #12
   175b0:	add	r0, pc, r0
   175b4:	bl	11fd4 <__assert_fail@plt>
   175b8:	ldr	r3, [pc, #96]	; 17620 <flatcc_builder_table_add_union@@Base+0x150>
   175bc:	movw	r2, #1526	; 0x5f6
   175c0:	ldr	r1, [pc, #92]	; 17624 <flatcc_builder_table_add_union@@Base+0x154>
   175c4:	ldr	r0, [pc, #92]	; 17628 <flatcc_builder_table_add_union@@Base+0x158>
   175c8:	add	r3, pc, r3
   175cc:	add	r3, r3, #1216	; 0x4c0
   175d0:	add	r1, pc, r1
   175d4:	add	r3, r3, #12
   175d8:	add	r0, pc, r0
   175dc:	bl	11fd4 <__assert_fail@plt>
   175e0:	ldr	r3, [pc, #68]	; 1762c <flatcc_builder_table_add_union@@Base+0x15c>
   175e4:	movw	r2, #1522	; 0x5f2
   175e8:	ldr	r1, [pc, #64]	; 17630 <flatcc_builder_table_add_union@@Base+0x160>
   175ec:	ldr	r0, [pc, #64]	; 17634 <flatcc_builder_table_add_union@@Base+0x164>
   175f0:	add	r3, pc, r3
   175f4:	add	r3, r3, #1216	; 0x4c0
   175f8:	add	r1, pc, r1
   175fc:	add	r3, r3, #12
   17600:	add	r0, pc, r0
   17604:	bl	11fd4 <__assert_fail@plt>
   17608:	ldrdeq	r0, [r0], -ip
   1760c:	andeq	r1, r0, r4, lsr #14
   17610:	ldrdeq	r1, [r0], -r4
   17614:			; <UNDEFINED> instruction: 0x00000fb4
   17618:	strdeq	r1, [r0], -ip
   1761c:	ldrdeq	r1, [r0], -r0
   17620:	andeq	r0, r0, ip, lsl #31
   17624:	ldrdeq	r1, [r0], -r4
   17628:			; <UNDEFINED> instruction: 0x00001ab4
   1762c:	andeq	r0, r0, r4, ror #30
   17630:	andeq	r1, r0, ip, lsr #13
   17634:	andeq	r1, r0, r0, lsl #21

00017638 <flatcc_builder_table_add_union_vector@@Base>:
   17638:	strd	r4, [sp, #-20]!	; 0xffffffec
   1763c:	strd	r6, [sp, #8]
   17640:	mov	r7, r1
   17644:	str	lr, [sp, #16]
   17648:	sub	sp, sp, #12
   1764c:	add	r1, sp, #8
   17650:	stmdb	r1, {r2, r3}
   17654:	ldr	r3, [r0, #32]
   17658:	ldm	sp, {r4, r6}
   1765c:	ldrh	r3, [r3, #14]
   17660:	cmp	r3, #3
   17664:	bne	17710 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   17668:	clz	r3, r6
   1766c:	clz	r2, r4
   17670:	lsr	r3, r3, #5
   17674:	lsr	r2, r2, #5
   17678:	cmp	r2, r3
   1767c:	beq	176ac <flatcc_builder_table_add_union_vector@@Base+0x74>
   17680:	adds	r4, r4, #0
   17684:	movne	r4, #1
   17688:	cmp	r4, r3
   1768c:	mvnne	r4, #0
   17690:	beq	17738 <flatcc_builder_table_add_union_vector@@Base+0x100>
   17694:	mov	r0, r4
   17698:	add	sp, sp, #12
   1769c:	ldrd	r4, [sp]
   176a0:	ldrd	r6, [sp, #8]
   176a4:	add	sp, sp, #16
   176a8:	pop	{pc}		; (ldr pc, [sp], #4)
   176ac:	cmp	r4, #0
   176b0:	beq	17694 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   176b4:	sub	r1, r7, #1
   176b8:	mov	r5, r0
   176bc:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   176c0:	subs	r3, r0, #0
   176c4:	beq	17760 <flatcc_builder_table_add_union_vector@@Base+0x128>
   176c8:	mov	r1, r7
   176cc:	mov	r0, r5
   176d0:	str	r4, [r3]
   176d4:	bl	17340 <flatcc_builder_table_add_offset@@Base>
   176d8:	cmp	r0, #0
   176dc:	movne	r4, #0
   176e0:	strne	r6, [r0]
   176e4:	bne	17694 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   176e8:	ldr	r3, [pc, #152]	; 17788 <flatcc_builder_table_add_union_vector@@Base+0x150>
   176ec:	movw	r2, #1544	; 0x608
   176f0:	ldr	r1, [pc, #148]	; 1778c <flatcc_builder_table_add_union_vector@@Base+0x154>
   176f4:	ldr	r0, [pc, #148]	; 17790 <flatcc_builder_table_add_union_vector@@Base+0x158>
   176f8:	add	r3, pc, r3
   176fc:	add	r3, r3, #1248	; 0x4e0
   17700:	add	r1, pc, r1
   17704:	add	r3, r3, #12
   17708:	add	r0, pc, r0
   1770c:	bl	11fd4 <__assert_fail@plt>
   17710:	ldr	r3, [pc, #124]	; 17794 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   17714:	mov	r2, #1536	; 0x600
   17718:	ldr	r1, [pc, #120]	; 17798 <flatcc_builder_table_add_union_vector@@Base+0x160>
   1771c:	ldr	r0, [pc, #120]	; 1779c <flatcc_builder_table_add_union_vector@@Base+0x164>
   17720:	add	r3, pc, r3
   17724:	add	r3, r3, #1248	; 0x4e0
   17728:	add	r1, pc, r1
   1772c:	add	r3, r3, #12
   17730:	add	r0, pc, r0
   17734:	bl	11fd4 <__assert_fail@plt>
   17738:	ldr	r3, [pc, #96]	; 177a0 <flatcc_builder_table_add_union_vector@@Base+0x168>
   1773c:	movw	r2, #1537	; 0x601
   17740:	ldr	r1, [pc, #92]	; 177a4 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   17744:	ldr	r0, [pc, #92]	; 177a8 <flatcc_builder_table_add_union_vector@@Base+0x170>
   17748:	add	r3, pc, r3
   1774c:	add	r3, r3, #1248	; 0x4e0
   17750:	add	r1, pc, r1
   17754:	add	r3, r3, #12
   17758:	add	r0, pc, r0
   1775c:	bl	11fd4 <__assert_fail@plt>
   17760:	ldr	r3, [pc, #68]	; 177ac <flatcc_builder_table_add_union_vector@@Base+0x174>
   17764:	movw	r2, #1540	; 0x604
   17768:	ldr	r1, [pc, #64]	; 177b0 <flatcc_builder_table_add_union_vector@@Base+0x178>
   1776c:	ldr	r0, [pc, #64]	; 177b4 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   17770:	add	r3, pc, r3
   17774:	add	r3, r3, #1248	; 0x4e0
   17778:	add	r1, pc, r1
   1777c:	add	r3, r3, #12
   17780:	add	r0, pc, r0
   17784:	bl	11fd4 <__assert_fail@plt>
   17788:	andeq	r0, r0, ip, asr lr
   1778c:	andeq	r1, r0, r4, lsr #11
   17790:	andeq	r1, r0, r8, ror r9
   17794:	andeq	r0, r0, r4, lsr lr
   17798:	andeq	r1, r0, ip, ror r5
   1779c:	andeq	r1, r0, r0, asr r8
   177a0:	andeq	r0, r0, ip, lsl #28
   177a4:	andeq	r1, r0, r4, asr r5
   177a8:	andeq	r1, r0, r0, asr #18
   177ac:	andeq	r0, r0, r4, ror #27
   177b0:	andeq	r1, r0, ip, lsr #10
   177b4:	andeq	r1, r0, r0, lsl #18

000177b8 <flatcc_builder_push_buffer_alignment@@Base>:
   177b8:	mov	r3, r0
   177bc:	mov	r2, #4
   177c0:	ldrh	r0, [r0, #128]	; 0x80
   177c4:	strh	r2, [r3, #128]	; 0x80
   177c8:	bx	lr

000177cc <flatcc_builder_pop_buffer_alignment@@Base>:
   177cc:	ldrh	r3, [r0, #128]	; 0x80
   177d0:	cmp	r3, r1
   177d4:	strhcc	r1, [r0, #128]	; 0x80
   177d8:	bx	lr

000177dc <flatcc_builder_get_buffer_alignment@@Base>:
   177dc:	ldrh	r0, [r0, #128]	; 0x80
   177e0:	bx	lr

000177e4 <flatcc_builder_set_vtable_clustering@@Base>:
   177e4:	clz	r1, r1
   177e8:	lsr	r1, r1, #5
   177ec:	str	r1, [r0, #180]	; 0xb4
   177f0:	bx	lr

000177f4 <flatcc_builder_set_block_align@@Base>:
   177f4:	strh	r1, [r0, #132]	; 0x84
   177f8:	bx	lr

000177fc <flatcc_builder_get_level@@Base>:
   177fc:	ldr	r0, [r0, #156]	; 0x9c
   17800:	bx	lr

00017804 <flatcc_builder_set_max_level@@Base>:
   17804:	ldr	r3, [r0, #160]	; 0xa0
   17808:	str	r1, [r0, #176]	; 0xb0
   1780c:	cmp	r3, r1
   17810:	strlt	r1, [r0, #160]	; 0xa0
   17814:	bx	lr

00017818 <flatcc_builder_get_buffer_size@@Base>:
   17818:	ldr	r3, [r0, #136]	; 0x88
   1781c:	ldr	r0, [r0, #140]	; 0x8c
   17820:	sub	r0, r0, r3
   17824:	bx	lr

00017828 <flatcc_builder_get_buffer_start@@Base>:
   17828:	ldr	r0, [r0, #136]	; 0x88
   1782c:	bx	lr

00017830 <flatcc_builder_get_buffer_end@@Base>:
   17830:	ldr	r0, [r0, #140]	; 0x8c
   17834:	bx	lr

00017838 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17838:	str	r1, [r0, #172]	; 0xac
   1783c:	bx	lr

00017840 <flatcc_builder_set_identifier@@Base>:
   17840:	ldr	r3, [pc, #40]	; 17870 <flatcc_builder_set_identifier@@Base+0x30>
   17844:	cmp	r1, #0
   17848:	add	r3, pc, r3
   1784c:	beq	1785c <flatcc_builder_set_identifier@@Base+0x1c>
   17850:	ldr	r3, [r1]
   17854:	str	r3, [r0, #168]	; 0xa8
   17858:	bx	lr
   1785c:	ldr	r2, [pc, #16]	; 17874 <flatcc_builder_set_identifier@@Base+0x34>
   17860:	ldr	r1, [r3, r2]
   17864:	ldr	r3, [r1]
   17868:	str	r3, [r0, #168]	; 0xa8
   1786c:	bx	lr
   17870:			; <UNDEFINED> instruction: 0x000127b0
   17874:	andeq	r0, r0, r8, asr #32

00017878 <flatcc_builder_get_type@@Base>:
   17878:	ldr	r0, [r0, #32]
   1787c:	cmp	r0, #0
   17880:	ldrhne	r0, [r0, #14]
   17884:	bx	lr

00017888 <flatcc_builder_get_type_at@@Base>:
   17888:	cmp	r1, #0
   1788c:	ble	178b4 <flatcc_builder_get_type_at@@Base+0x2c>
   17890:	ldr	r3, [r0, #156]	; 0x9c
   17894:	cmp	r3, r1
   17898:	blt	178b4 <flatcc_builder_get_type_at@@Base+0x2c>
   1789c:	ldr	r2, [r0, #32]
   178a0:	sub	r1, r1, r3
   178a4:	add	r1, r1, r1, lsl #3
   178a8:	add	r1, r2, r1, lsl #2
   178ac:	ldrh	r0, [r1, #14]
   178b0:	bx	lr
   178b4:	mov	r0, #0
   178b8:	bx	lr

000178bc <flatcc_builder_get_direct_buffer@@Base>:
   178bc:	ldr	r3, [r0, #184]	; 0xb8
   178c0:	cmp	r3, #0
   178c4:	bne	178e0 <flatcc_builder_get_direct_buffer@@Base+0x24>
   178c8:	cmp	r1, #0
   178cc:	movne	r3, #0
   178d0:	movne	r0, r3
   178d4:	moveq	r0, r1
   178d8:	strne	r3, [r1]
   178dc:	bx	lr
   178e0:	ldrd	r2, [r0, #188]	; 0xbc
   178e4:	cmp	r2, r3
   178e8:	bne	178c8 <flatcc_builder_get_direct_buffer@@Base+0xc>
   178ec:	cmp	r1, #0
   178f0:	ldrne	r3, [r0, #212]	; 0xd4
   178f4:	ldr	r0, [r0, #196]	; 0xc4
   178f8:	strne	r3, [r1]
   178fc:	bx	lr

00017900 <flatcc_builder_copy_buffer@@Base>:
   17900:	ldr	r3, [r0, #184]	; 0xb8
   17904:	cmp	r3, #0
   17908:	beq	17930 <flatcc_builder_copy_buffer@@Base+0x30>
   1790c:	add	r0, r0, #188	; 0xbc
   17910:	str	r4, [sp, #-8]!
   17914:	str	lr, [sp, #4]
   17918:	bl	18094 <flatcc_emitter_copy_buffer@@Base>
   1791c:	cmp	r0, #0
   17920:	beq	17938 <flatcc_builder_copy_buffer@@Base+0x38>
   17924:	ldr	r4, [sp]
   17928:	add	sp, sp, #4
   1792c:	pop	{pc}		; (ldr pc, [sp], #4)
   17930:	mov	r0, r3
   17934:	bx	lr
   17938:	ldr	r3, [pc, #32]	; 17960 <flatcc_builder_copy_buffer@@Base+0x60>
   1793c:	movw	r2, #1926	; 0x786
   17940:	ldr	r1, [pc, #28]	; 17964 <flatcc_builder_copy_buffer@@Base+0x64>
   17944:	ldr	r0, [pc, #28]	; 17968 <flatcc_builder_copy_buffer@@Base+0x68>
   17948:	add	r3, pc, r3
   1794c:	add	r3, r3, #1296	; 0x510
   17950:	add	r1, pc, r1
   17954:	add	r3, r3, #4
   17958:	add	r0, pc, r0
   1795c:	bl	11fd4 <__assert_fail@plt>
   17960:	andeq	r0, r0, ip, lsl #24
   17964:	andeq	r1, r0, r4, asr r3
   17968:	andeq	r1, r0, r8, ror #14

0001796c <flatcc_builder_finalize_buffer@@Base>:
   1796c:	strd	r4, [sp, #-16]!
   17970:	mov	r5, r1
   17974:	str	r6, [sp, #8]
   17978:	mov	r6, r0
   1797c:	str	lr, [sp, #12]
   17980:	bl	17818 <flatcc_builder_get_buffer_size@@Base>
   17984:	cmp	r5, #0
   17988:	mov	r4, r0
   1798c:	strne	r0, [r5]
   17990:	bl	11f74 <malloc@plt>
   17994:	subs	r5, r0, #0
   17998:	beq	179c8 <flatcc_builder_finalize_buffer@@Base+0x5c>
   1799c:	mov	r2, r4
   179a0:	mov	r0, r6
   179a4:	mov	r1, r5
   179a8:	bl	17900 <flatcc_builder_copy_buffer@@Base>
   179ac:	cmp	r0, #0
   179b0:	beq	179ec <flatcc_builder_finalize_buffer@@Base+0x80>
   179b4:	mov	r0, r5
   179b8:	ldrd	r4, [sp]
   179bc:	ldr	r6, [sp, #8]
   179c0:	add	sp, sp, #12
   179c4:	pop	{pc}		; (ldr pc, [sp], #4)
   179c8:	ldr	r3, [pc, #64]	; 17a10 <flatcc_builder_finalize_buffer@@Base+0xa4>
   179cc:	movw	r2, #1944	; 0x798
   179d0:	ldr	r1, [pc, #60]	; 17a14 <flatcc_builder_finalize_buffer@@Base+0xa8>
   179d4:	ldr	r0, [pc, #60]	; 17a18 <flatcc_builder_finalize_buffer@@Base+0xac>
   179d8:	add	r3, pc, r3
   179dc:	add	r3, r3, #1328	; 0x530
   179e0:	add	r1, pc, r1
   179e4:	add	r0, pc, r0
   179e8:	bl	11fd4 <__assert_fail@plt>
   179ec:	ldr	r3, [pc, #40]	; 17a1c <flatcc_builder_finalize_buffer@@Base+0xb0>
   179f0:	movw	r2, #1948	; 0x79c
   179f4:	ldr	r1, [pc, #36]	; 17a20 <flatcc_builder_finalize_buffer@@Base+0xb4>
   179f8:	ldr	r0, [pc, #36]	; 17a24 <flatcc_builder_finalize_buffer@@Base+0xb8>
   179fc:	add	r3, pc, r3
   17a00:	add	r3, r3, #1328	; 0x530
   17a04:	add	r1, pc, r1
   17a08:	add	r0, pc, r0
   17a0c:	bl	11fd4 <__assert_fail@plt>
   17a10:	andeq	r0, r0, ip, ror fp
   17a14:	andeq	r1, r0, r4, asr #5
   17a18:	andeq	r1, r0, r8, asr #6
   17a1c:	andeq	r0, r0, r8, asr fp
   17a20:	andeq	r1, r0, r0, lsr #5
   17a24:	andeq	r1, r0, r4, lsr #6

00017a28 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17a28:	strd	r4, [sp, #-20]!	; 0xffffffec
   17a2c:	mov	r5, r1
   17a30:	strd	r6, [sp, #8]
   17a34:	mov	r6, r0
   17a38:	str	lr, [sp, #16]
   17a3c:	sub	sp, sp, #12
   17a40:	bl	17818 <flatcc_builder_get_buffer_size@@Base>
   17a44:	cmp	r5, #0
   17a48:	mov	r4, r0
   17a4c:	sub	r4, r4, #1
   17a50:	strne	r0, [r5]
   17a54:	mov	r0, r6
   17a58:	bl	177dc <flatcc_builder_get_buffer_alignment@@Base>
   17a5c:	rsb	r3, r0, #0
   17a60:	add	r4, r4, r0
   17a64:	cmp	r0, #4
   17a68:	and	r4, r4, r3
   17a6c:	mov	r3, #0
   17a70:	movcs	r1, r0
   17a74:	movcc	r1, #4
   17a78:	mov	r2, r4
   17a7c:	add	r0, sp, #4
   17a80:	str	r3, [sp, #4]
   17a84:	bl	11fa4 <posix_memalign@plt>
   17a88:	cmp	r0, #0
   17a8c:	beq	17ab8 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   17a90:	ldr	r0, [sp, #4]
   17a94:	cmp	r0, #0
   17a98:	beq	17aa0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17a9c:	bl	11f38 <free@plt>
   17aa0:	cmp	r5, #0
   17aa4:	movne	r3, #0
   17aa8:	moveq	r7, r5
   17aac:	movne	r7, r3
   17ab0:	strne	r3, [r5]
   17ab4:	b	17adc <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   17ab8:	ldr	r7, [sp, #4]
   17abc:	cmp	r7, #0
   17ac0:	beq	17aa0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17ac4:	mov	r2, r4
   17ac8:	mov	r0, r6
   17acc:	mov	r1, r7
   17ad0:	bl	17900 <flatcc_builder_copy_buffer@@Base>
   17ad4:	cmp	r0, #0
   17ad8:	beq	17af4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   17adc:	mov	r0, r7
   17ae0:	add	sp, sp, #12
   17ae4:	ldrd	r4, [sp]
   17ae8:	ldrd	r6, [sp, #8]
   17aec:	add	sp, sp, #16
   17af0:	pop	{pc}		; (ldr pc, [sp], #4)
   17af4:	mov	r0, r7
   17af8:	b	17a9c <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00017afc <flatcc_builder_aligned_alloc@@Base>:
   17afc:	cmp	r0, #4
   17b00:	str	r4, [sp, #-8]!
   17b04:	mov	r4, #0
   17b08:	str	lr, [sp, #4]
   17b0c:	sub	sp, sp, #8
   17b10:	mov	r2, r1
   17b14:	movcs	r1, r0
   17b18:	movcc	r1, #4
   17b1c:	add	r0, sp, #4
   17b20:	str	r4, [sp, #4]
   17b24:	bl	11fa4 <posix_memalign@plt>
   17b28:	cmp	r0, r4
   17b2c:	ldr	r0, [sp, #4]
   17b30:	beq	17b44 <flatcc_builder_aligned_alloc@@Base+0x48>
   17b34:	cmp	r0, #0
   17b38:	beq	17b44 <flatcc_builder_aligned_alloc@@Base+0x48>
   17b3c:	bl	11f38 <free@plt>
   17b40:	mov	r0, r4
   17b44:	add	sp, sp, #8
   17b48:	ldr	r4, [sp]
   17b4c:	add	sp, sp, #4
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)

00017b54 <flatcc_builder_aligned_free@@Base>:
   17b54:	b	11f38 <free@plt>

00017b58 <flatcc_builder_get_emit_context@@Base>:
   17b58:	ldr	r0, [r0, #36]	; 0x24
   17b5c:	bx	lr

00017b60 <flatcc_emitter_recycle_page@@Base>:
   17b60:	ldr	r3, [r0]
   17b64:	cmp	r3, r1
   17b68:	beq	17bac <flatcc_emitter_recycle_page@@Base+0x4c>
   17b6c:	ldr	r2, [r0, #4]
   17b70:	cmp	r2, r1
   17b74:	beq	17bac <flatcc_emitter_recycle_page@@Base+0x4c>
   17b78:	push	{lr}		; (str lr, [sp, #-4]!)
   17b7c:	mov	r0, #0
   17b80:	ldr	lr, [r1, #2944]	; 0xb80
   17b84:	ldr	ip, [r1, #2948]	; 0xb84
   17b88:	str	ip, [lr, #2948]	; 0xb84
   17b8c:	ldr	r2, [r3, #2948]	; 0xb84
   17b90:	str	lr, [ip, #2944]	; 0xb80
   17b94:	str	r3, [r1, #2944]	; 0xb80
   17b98:	str	r2, [r1, #2948]	; 0xb84
   17b9c:	str	r1, [r2, #2944]	; 0xb80
   17ba0:	ldr	r3, [r1, #2944]	; 0xb80
   17ba4:	str	r1, [r3, #2948]	; 0xb84
   17ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bac:	mvn	r0, #0
   17bb0:	bx	lr

00017bb4 <flatcc_emitter_reset@@Base>:
   17bb4:	ldr	r2, [r0]
   17bb8:	cmp	r2, #0
   17bbc:	bxeq	lr
   17bc0:	strd	r4, [sp, #-16]!
   17bc4:	movw	ip, #64064	; 0xfa40
   17bc8:	movt	ip, #65535	; 0xffff
   17bcc:	ldr	r1, [r0, #24]
   17bd0:	add	r4, r2, #1472	; 0x5c0
   17bd4:	ldr	r3, [r0, #32]
   17bd8:	ldr	r5, [r0, #28]
   17bdc:	str	r6, [sp, #8]
   17be0:	str	lr, [sp, #12]
   17be4:	mov	lr, #1472	; 0x5c0
   17be8:	cmp	r3, #0
   17bec:	stmib	r0, {r2, r4}
   17bf0:	moveq	r3, r1
   17bf4:	lsr	r1, r1, #2
   17bf8:	str	lr, [r0, #12]
   17bfc:	add	r3, r3, r3, lsl #1
   17c00:	str	r4, [r0, #16]
   17c04:	str	lr, [r0, #20]
   17c08:	add	r3, r1, r3, lsr #2
   17c0c:	str	ip, [r2, #2952]	; 0xb88
   17c10:	mov	ip, #0
   17c14:	cmp	r5, r3, lsl #1
   17c18:	str	ip, [r0, #24]
   17c1c:	str	r3, [r0, #32]
   17c20:	bls	17c78 <flatcc_emitter_reset@@Base+0xc4>
   17c24:	ldr	r3, [r2, #2944]	; 0xb80
   17c28:	mov	r4, r0
   17c2c:	cmp	r2, r3
   17c30:	bne	17c48 <flatcc_emitter_reset@@Base+0x94>
   17c34:	b	17c78 <flatcc_emitter_reset@@Base+0xc4>
   17c38:	ldm	r4, {r1, r2}
   17c3c:	ldr	r3, [r2, #2944]	; 0xb80
   17c40:	cmp	r3, r1
   17c44:	beq	17c78 <flatcc_emitter_reset@@Base+0xc4>
   17c48:	ldr	r1, [r3, #2944]	; 0xb80
   17c4c:	mov	r0, r3
   17c50:	str	r1, [r2, #2944]	; 0xb80
   17c54:	ldr	r3, [r3, #2944]	; 0xb80
   17c58:	str	r2, [r3, #2948]	; 0xb84
   17c5c:	bl	11f38 <free@plt>
   17c60:	ldr	r3, [r4, #28]
   17c64:	ldr	r2, [r4, #32]
   17c68:	sub	r3, r3, #2944	; 0xb80
   17c6c:	cmp	r3, r2, lsl #1
   17c70:	str	r3, [r4, #28]
   17c74:	bhi	17c38 <flatcc_emitter_reset@@Base+0x84>
   17c78:	ldrd	r4, [sp]
   17c7c:	ldr	r6, [sp, #8]
   17c80:	add	sp, sp, #12
   17c84:	pop	{pc}		; (ldr pc, [sp], #4)

00017c88 <flatcc_emitter_clear@@Base>:
   17c88:	ldr	r3, [r0]
   17c8c:	cmp	r3, #0
   17c90:	bxeq	lr
   17c94:	mov	r1, #0
   17c98:	strd	r4, [sp, #-16]!
   17c9c:	mov	r5, r0
   17ca0:	ldr	r2, [r3, #2948]	; 0xb84
   17ca4:	str	r6, [sp, #8]
   17ca8:	str	lr, [sp, #12]
   17cac:	str	r1, [r2, #2944]	; 0xb80
   17cb0:	ldr	r4, [r3, #2944]	; 0xb80
   17cb4:	cmp	r4, r1
   17cb8:	bne	17cc4 <flatcc_emitter_clear@@Base+0x3c>
   17cbc:	b	17d00 <flatcc_emitter_clear@@Base+0x78>
   17cc0:	mov	r4, r3
   17cc4:	ldr	r0, [r4, #2948]	; 0xb84
   17cc8:	bl	11f38 <free@plt>
   17ccc:	ldr	r3, [r4, #2944]	; 0xb80
   17cd0:	cmp	r3, #0
   17cd4:	bne	17cc0 <flatcc_emitter_clear@@Base+0x38>
   17cd8:	mov	r0, r4
   17cdc:	bl	11f38 <free@plt>
   17ce0:	mov	r0, r5
   17ce4:	mov	r2, #36	; 0x24
   17ce8:	ldrd	r4, [sp]
   17cec:	mov	r1, #0
   17cf0:	ldr	r6, [sp, #8]
   17cf4:	ldr	lr, [sp, #12]
   17cf8:	add	sp, sp, #16
   17cfc:	b	11fb0 <memset@plt>
   17d00:	mov	r4, r3
   17d04:	b	17cd8 <flatcc_emitter_clear@@Base+0x50>

00017d08 <flatcc_emitter@@Base>:
   17d08:	cmp	r3, #0
   17d0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d10:	mov	r4, r0
   17d14:	ldr	r3, [r0, #24]
   17d18:	strd	r6, [sp, #8]
   17d1c:	strd	r8, [sp, #16]
   17d20:	sub	r8, r2, #1
   17d24:	strd	sl, [sp, #24]
   17d28:	str	lr, [sp, #32]
   17d2c:	sub	sp, sp, #12
   17d30:	ldr	r0, [sp, #48]	; 0x30
   17d34:	add	r3, r3, r0
   17d38:	str	r3, [r4, #24]
   17d3c:	blt	17f0c <flatcc_emitter@@Base+0x204>
   17d40:	ldr	r3, [r4, #20]
   17d44:	cmp	r3, r0
   17d48:	bcs	17de8 <flatcc_emitter@@Base+0xe0>
   17d4c:	cmp	r2, #0
   17d50:	beq	17dc8 <flatcc_emitter@@Base+0xc0>
   17d54:	mov	r8, r2
   17d58:	add	r5, r1, #8
   17d5c:	movw	r2, #64064	; 0xfa40
   17d60:	movt	r2, #65535	; 0xffff
   17d64:	str	r2, [sp, #4]
   17d68:	ldmdb	r5, {r7, fp}
   17d6c:	cmp	fp, #0
   17d70:	beq	17dbc <flatcc_emitter@@Base+0xb4>
   17d74:	mov	r9, #1472	; 0x5c0
   17d78:	cmp	fp, r3
   17d7c:	mov	r6, r3
   17d80:	bls	17e78 <flatcc_emitter@@Base+0x170>
   17d84:	cmp	r3, #0
   17d88:	subne	fp, fp, r3
   17d8c:	beq	17e30 <flatcc_emitter@@Base+0x128>
   17d90:	mov	r2, r6
   17d94:	mov	r1, r7
   17d98:	ldr	r0, [r4, #16]
   17d9c:	bl	11f44 <memcpy@plt>
   17da0:	ldrd	r2, [r4, #16]
   17da4:	cmp	fp, #0
   17da8:	add	r7, r7, r6
   17dac:	add	r2, r2, r6
   17db0:	sub	r3, r3, r6
   17db4:	strd	r2, [r4, #16]
   17db8:	bne	17d78 <flatcc_emitter@@Base+0x70>
   17dbc:	subs	r8, r8, #1
   17dc0:	add	r5, r5, #8
   17dc4:	bne	17d68 <flatcc_emitter@@Base+0x60>
   17dc8:	mov	r0, #0
   17dcc:	add	sp, sp, #12
   17dd0:	ldrd	r4, [sp]
   17dd4:	ldrd	r6, [sp, #8]
   17dd8:	ldrd	r8, [sp, #16]
   17ddc:	ldrd	sl, [sp, #24]
   17de0:	add	sp, sp, #32
   17de4:	pop	{pc}		; (ldr pc, [sp], #4)
   17de8:	ldr	r7, [r4, #16]
   17dec:	sub	r3, r3, r0
   17df0:	str	r3, [r4, #20]
   17df4:	add	r0, r7, r0
   17df8:	str	r0, [r4, #16]
   17dfc:	cmp	r2, #0
   17e00:	addne	r4, r1, #8
   17e04:	beq	17dc8 <flatcc_emitter@@Base+0xc0>
   17e08:	mov	r0, r7
   17e0c:	ldmdb	r4, {r1, r2}
   17e10:	sub	r8, r8, #1
   17e14:	bl	11f44 <memcpy@plt>
   17e18:	ldr	r3, [r4, #-4]
   17e1c:	cmn	r8, #1
   17e20:	add	r4, r4, #8
   17e24:	add	r7, r7, r3
   17e28:	bne	17e08 <flatcc_emitter@@Base+0x100>
   17e2c:	b	17dc8 <flatcc_emitter@@Base+0xc0>
   17e30:	ldr	r6, [r4, #4]
   17e34:	cmp	r6, #0
   17e38:	beq	17eb8 <flatcc_emitter@@Base+0x1b0>
   17e3c:	ldr	sl, [r4]
   17e40:	ldr	r0, [r6, #2944]	; 0xb80
   17e44:	cmp	r0, sl
   17e48:	beq	17e84 <flatcc_emitter@@Base+0x17c>
   17e4c:	str	r0, [r4, #4]
   17e50:	ldr	r2, [r0, #2948]	; 0xb84
   17e54:	mov	r3, #2944	; 0xb80
   17e58:	cmp	fp, r3
   17e5c:	mov	r6, r3
   17e60:	ldr	r2, [r2, #2952]	; 0xb88
   17e64:	str	r0, [r4, #16]
   17e68:	str	r3, [r4, #20]
   17e6c:	add	r2, r2, r3
   17e70:	str	r2, [r0, #2952]	; 0xb88
   17e74:	bhi	17d84 <flatcc_emitter@@Base+0x7c>
   17e78:	mov	r6, fp
   17e7c:	mov	fp, #0
   17e80:	b	17d90 <flatcc_emitter@@Base+0x88>
   17e84:	movw	r0, #2956	; 0xb8c
   17e88:	bl	11f74 <malloc@plt>
   17e8c:	cmp	r0, #0
   17e90:	beq	17f04 <flatcc_emitter@@Base+0x1fc>
   17e94:	ldr	r2, [r4, #28]
   17e98:	str	sl, [r0, #2944]	; 0xb80
   17e9c:	str	r6, [r0, #2948]	; 0xb84
   17ea0:	add	r2, r2, #2944	; 0xb80
   17ea4:	str	r2, [r4, #28]
   17ea8:	str	r0, [sl, #2948]	; 0xb84
   17eac:	str	r0, [r6, #2944]	; 0xb80
   17eb0:	str	r0, [r4, #4]
   17eb4:	b	17e50 <flatcc_emitter@@Base+0x148>
   17eb8:	movw	r0, #2956	; 0xb8c
   17ebc:	bl	11f74 <malloc@plt>
   17ec0:	cmp	r0, #0
   17ec4:	beq	17f04 <flatcc_emitter@@Base+0x1fc>
   17ec8:	ldr	r2, [r4, #28]
   17ecc:	add	r1, r0, #1472	; 0x5c0
   17ed0:	mov	r3, #1472	; 0x5c0
   17ed4:	str	r0, [r4]
   17ed8:	strd	r0, [r4, #4]
   17edc:	str	r9, [r4, #12]
   17ee0:	str	r1, [r4, #16]
   17ee4:	add	r2, r2, #2944	; 0xb80
   17ee8:	str	r9, [r4, #20]
   17eec:	str	r0, [r0, #2944]	; 0xb80
   17ef0:	str	r2, [r4, #28]
   17ef4:	ldr	r2, [sp, #4]
   17ef8:	str	r0, [r0, #2948]	; 0xb84
   17efc:	str	r2, [r0, #2952]	; 0xb88
   17f00:	b	17d78 <flatcc_emitter@@Base+0x70>
   17f04:	mvn	r0, #0
   17f08:	b	17dcc <flatcc_emitter@@Base+0xc4>
   17f0c:	ldr	r3, [r4, #12]
   17f10:	cmp	r3, r0
   17f14:	bcs	1807c <flatcc_emitter@@Base+0x374>
   17f18:	add	r5, r1, r2, lsl #3
   17f1c:	movw	r3, #64064	; 0xfa40
   17f20:	movt	r3, #65535	; 0xffff
   17f24:	str	r3, [sp, #4]
   17f28:	cmn	r8, #1
   17f2c:	beq	17dc8 <flatcc_emitter@@Base+0xc0>
   17f30:	ldr	r7, [r5, #-8]
   17f34:	ldr	r6, [r5, #-4]
   17f38:	cmp	r6, #0
   17f3c:	add	r7, r7, r6
   17f40:	beq	17f90 <flatcc_emitter@@Base+0x288>
   17f44:	mov	r9, #1472	; 0x5c0
   17f48:	ldr	r2, [r4, #12]
   17f4c:	cmp	r2, r6
   17f50:	bcs	17ff4 <flatcc_emitter@@Base+0x2ec>
   17f54:	cmp	r2, #0
   17f58:	beq	17f9c <flatcc_emitter@@Base+0x294>
   17f5c:	sub	r6, r6, r2
   17f60:	mov	r1, #0
   17f64:	ldr	r3, [r4, #8]
   17f68:	rsb	r0, r2, #0
   17f6c:	add	r7, r7, r0
   17f70:	str	r1, [r4, #12]
   17f74:	mov	r1, r7
   17f78:	add	r3, r3, r0
   17f7c:	mov	r0, r3
   17f80:	str	r3, [r4, #8]
   17f84:	bl	11f44 <memcpy@plt>
   17f88:	cmp	r6, #0
   17f8c:	bne	17f48 <flatcc_emitter@@Base+0x240>
   17f90:	sub	r5, r5, #8
   17f94:	sub	r8, r8, #1
   17f98:	b	17f28 <flatcc_emitter@@Base+0x220>
   17f9c:	ldr	fp, [r4]
   17fa0:	cmp	fp, #0
   17fa4:	beq	18038 <flatcc_emitter@@Base+0x330>
   17fa8:	ldr	sl, [r4, #4]
   17fac:	ldr	r0, [fp, #2948]	; 0xb84
   17fb0:	cmp	r0, sl
   17fb4:	beq	18004 <flatcc_emitter@@Base+0x2fc>
   17fb8:	ldr	r3, [fp, #2952]	; 0xb88
   17fbc:	sub	r3, r3, #2944	; 0xb80
   17fc0:	str	r3, [r0, #2952]	; 0xb88
   17fc4:	str	r0, [r4]
   17fc8:	ldr	r3, [r0, #2944]	; 0xb80
   17fcc:	mov	r2, #2944	; 0xb80
   17fd0:	add	r1, r0, #2944	; 0xb80
   17fd4:	ldr	r3, [r3, #2952]	; 0xb88
   17fd8:	str	r1, [r4, #8]
   17fdc:	str	r2, [r4, #12]
   17fe0:	sub	r3, r3, #2944	; 0xb80
   17fe4:	str	r3, [r0, #2952]	; 0xb88
   17fe8:	ldr	r2, [r4, #12]
   17fec:	cmp	r2, r6
   17ff0:	bcc	17f54 <flatcc_emitter@@Base+0x24c>
   17ff4:	sub	r1, r2, r6
   17ff8:	mov	r2, r6
   17ffc:	mov	r6, #0
   18000:	b	17f64 <flatcc_emitter@@Base+0x25c>
   18004:	movw	r0, #2956	; 0xb8c
   18008:	bl	11f74 <malloc@plt>
   1800c:	cmp	r0, #0
   18010:	beq	17f04 <flatcc_emitter@@Base+0x1fc>
   18014:	ldr	r2, [r4, #28]
   18018:	str	fp, [r0, #2944]	; 0xb80
   1801c:	str	sl, [r0, #2948]	; 0xb84
   18020:	add	r2, r2, #2944	; 0xb80
   18024:	str	r2, [r4, #28]
   18028:	str	r0, [fp, #2948]	; 0xb84
   1802c:	str	r0, [sl, #2944]	; 0xb80
   18030:	str	r0, [r4]
   18034:	b	17fc8 <flatcc_emitter@@Base+0x2c0>
   18038:	movw	r0, #2956	; 0xb8c
   1803c:	bl	11f74 <malloc@plt>
   18040:	cmp	r0, #0
   18044:	beq	17f04 <flatcc_emitter@@Base+0x1fc>
   18048:	ldr	r3, [r4, #28]
   1804c:	add	r2, r0, #1472	; 0x5c0
   18050:	str	r0, [r4]
   18054:	stmib	r4, {r0, r2, r9}
   18058:	add	r3, r3, #2944	; 0xb80
   1805c:	str	r2, [r4, #16]
   18060:	str	r9, [r4, #20]
   18064:	str	r3, [r4, #28]
   18068:	ldr	r3, [sp, #4]
   1806c:	str	r0, [r0, #2944]	; 0xb80
   18070:	str	r0, [r0, #2948]	; 0xb84
   18074:	str	r3, [r0, #2952]	; 0xb88
   18078:	b	17f48 <flatcc_emitter@@Base+0x240>
   1807c:	ldr	r7, [r4, #8]
   18080:	sub	r3, r3, r0
   18084:	str	r3, [r4, #12]
   18088:	sub	r7, r7, r0
   1808c:	str	r7, [r4, #8]
   18090:	b	17dfc <flatcc_emitter@@Base+0xf4>

00018094 <flatcc_emitter_copy_buffer@@Base>:
   18094:	ldr	r3, [r0, #24]
   18098:	strd	r4, [sp, #-16]!
   1809c:	str	r6, [sp, #8]
   180a0:	str	lr, [sp, #12]
   180a4:	cmp	r3, r2
   180a8:	movhi	r5, #0
   180ac:	bhi	1812c <flatcc_emitter_copy_buffer@@Base+0x98>
   180b0:	ldr	r5, [r0]
   180b4:	mov	r6, r0
   180b8:	cmp	r5, #0
   180bc:	beq	1812c <flatcc_emitter_copy_buffer@@Base+0x98>
   180c0:	ldr	r2, [r6, #4]
   180c4:	mov	r0, r1
   180c8:	ldr	r1, [r6, #8]
   180cc:	cmp	r5, r2
   180d0:	beq	18140 <flatcc_emitter_copy_buffer@@Base+0xac>
   180d4:	ldr	r2, [r6, #12]
   180d8:	rsb	r2, r2, #2944	; 0xb80
   180dc:	add	r5, r0, r2
   180e0:	bl	11f44 <memcpy@plt>
   180e4:	ldrd	r2, [r6]
   180e8:	ldr	r4, [r2, #2944]	; 0xb80
   180ec:	cmp	r4, r3
   180f0:	beq	18118 <flatcc_emitter_copy_buffer@@Base+0x84>
   180f4:	mov	r2, #2944	; 0xb80
   180f8:	mov	r1, r4
   180fc:	mov	r0, r5
   18100:	add	r5, r5, r2
   18104:	bl	11f44 <memcpy@plt>
   18108:	ldr	r3, [r6, #4]
   1810c:	ldr	r4, [r4, #2944]	; 0xb80
   18110:	cmp	r3, r4
   18114:	bne	180f4 <flatcc_emitter_copy_buffer@@Base+0x60>
   18118:	ldr	r2, [r6, #20]
   1811c:	mov	r1, r4
   18120:	mov	r0, r5
   18124:	rsb	r2, r2, #2944	; 0xb80
   18128:	bl	11f44 <memcpy@plt>
   1812c:	mov	r0, r5
   18130:	ldrd	r4, [sp]
   18134:	ldr	r6, [sp, #8]
   18138:	add	sp, sp, #12
   1813c:	pop	{pc}		; (ldr pc, [sp], #4)
   18140:	mov	r2, r3
   18144:	mov	r5, r0
   18148:	bl	11f44 <memcpy@plt>
   1814c:	b	1812c <flatcc_emitter_copy_buffer@@Base+0x98>

00018150 <__libc_csu_init@@Base>:
   18150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18154:	mov	r7, r0
   18158:	ldr	r6, [pc, #72]	; 181a8 <__libc_csu_init@@Base+0x58>
   1815c:	ldr	r5, [pc, #72]	; 181ac <__libc_csu_init@@Base+0x5c>
   18160:	add	r6, pc, r6
   18164:	add	r5, pc, r5
   18168:	sub	r6, r6, r5
   1816c:	mov	r8, r1
   18170:	mov	r9, r2
   18174:	bl	11f0c <strcmp@plt-0x20>
   18178:	asrs	r6, r6, #2
   1817c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18180:	mov	r4, #0
   18184:	add	r4, r4, #1
   18188:	ldr	r3, [r5], #4
   1818c:	mov	r2, r9
   18190:	mov	r1, r8
   18194:	mov	r0, r7
   18198:	blx	r3
   1819c:	cmp	r6, r4
   181a0:	bne	18184 <__libc_csu_init@@Base+0x34>
   181a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   181a8:	andeq	r1, r1, ip, lsr #27
   181ac:	andeq	r1, r1, r4, lsr #27

000181b0 <__libc_csu_fini@@Base>:
   181b0:	bx	lr

Disassembly of section .fini:

000181b4 <.fini>:
   181b4:	push	{r3, lr}
   181b8:	pop	{r3, pc}
