
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

0001143c <.init>:
   1143c:	push	{r3, lr}
   11440:	bl	11588 <_start@@Base+0x3c>
   11444:	pop	{r3, pc}

Disassembly of section .plt:

00011448 <strstr@plt-0x14>:
   11448:	push	{lr}		; (str lr, [sp, #-4]!)
   1144c:	ldr	lr, [pc, #4]	; 11458 <strstr@plt-0x4>
   11450:	add	lr, pc, lr
   11454:	ldr	pc, [lr, #8]!
   11458:	andeq	r3, r1, r8, lsr #23

0001145c <strstr@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #77824	; 0x13000
   11464:	ldr	pc, [ip, #2984]!	; 0xba8

00011468 <strcmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #77824	; 0x13000
   11470:	ldr	pc, [ip, #2976]!	; 0xba0

00011474 <mprotect@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #77824	; 0x13000
   1147c:	ldr	pc, [ip, #2968]!	; 0xb98

00011480 <free@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #77824	; 0x13000
   11488:	ldr	pc, [ip, #2960]!	; 0xb90

0001148c <memcpy@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #77824	; 0x13000
   11494:	ldr	pc, [ip, #2952]!	; 0xb88

00011498 <realloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #77824	; 0x13000
   114a0:	ldr	pc, [ip, #2944]!	; 0xb80

000114a4 <malloc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #77824	; 0x13000
   114ac:	ldr	pc, [ip, #2936]!	; 0xb78

000114b0 <__libc_start_main@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #77824	; 0x13000
   114b8:	ldr	pc, [ip, #2928]!	; 0xb70

000114bc <__gmon_start__@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #77824	; 0x13000
   114c4:	ldr	pc, [ip, #2920]!	; 0xb68

000114c8 <strlen@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #77824	; 0x13000
   114d0:	ldr	pc, [ip, #2912]!	; 0xb60

000114d4 <mmap@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #77824	; 0x13000
   114dc:	ldr	pc, [ip, #2904]!	; 0xb58

000114e0 <strchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #77824	; 0x13000
   114e8:	ldr	pc, [ip, #2896]!	; 0xb50

000114ec <fprintf@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #77824	; 0x13000
   114f4:	ldr	pc, [ip, #2888]!	; 0xb48

000114f8 <__errno_location@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #77824	; 0x13000
   11500:	ldr	pc, [ip, #2880]!	; 0xb40

00011504 <snprintf@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #77824	; 0x13000
   1150c:	ldr	pc, [ip, #2872]!	; 0xb38

00011510 <munmap@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #77824	; 0x13000
   11518:	ldr	pc, [ip, #2864]!	; 0xb30

0001151c <my_strdup@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #77824	; 0x13000
   11524:	ldr	pc, [ip, #2856]!	; 0xb28

00011528 <__tls_get_addr@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #77824	; 0x13000
   11530:	ldr	pc, [ip, #2848]!	; 0xb20

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #77824	; 0x13000
   1153c:	ldr	pc, [ip, #2840]!	; 0xb18

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #77824	; 0x13000
   11548:	ldr	pc, [ip, #2832]!	; 0xb10

Disassembly of section .text:

0001154c <_start@@Base>:
   1154c:	mov	fp, #0
   11550:	mov	lr, #0
   11554:	pop	{r1}		; (ldr r1, [sp], #4)
   11558:	mov	r2, sp
   1155c:	push	{r2}		; (str r2, [sp, #-4]!)
   11560:	push	{r0}		; (str r0, [sp, #-4]!)
   11564:	ldr	ip, [pc, #16]	; 1157c <_start@@Base+0x30>
   11568:	push	{ip}		; (str ip, [sp, #-4]!)
   1156c:	ldr	r0, [pc, #12]	; 11580 <_start@@Base+0x34>
   11570:	ldr	r3, [pc, #12]	; 11584 <_start@@Base+0x38>
   11574:	bl	114b0 <__libc_start_main@plt>
   11578:	bl	11540 <abort@plt>
   1157c:	andeq	r4, r1, ip, ror #9
   11580:	andeq	r1, r1, r4, ror #18
   11584:	andeq	r4, r1, ip, lsl #9
   11588:	ldr	r3, [pc, #20]	; 115a4 <_start@@Base+0x58>
   1158c:	ldr	r2, [pc, #20]	; 115a8 <_start@@Base+0x5c>
   11590:	add	r3, pc, r3
   11594:	ldr	r2, [r3, r2]
   11598:	cmp	r2, #0
   1159c:	bxeq	lr
   115a0:	b	114bc <__gmon_start__@plt>
   115a4:	andeq	r3, r1, r8, ror #20
   115a8:	muleq	r0, ip, r0
   115ac:	ldr	r0, [pc, #24]	; 115cc <_start@@Base+0x80>
   115b0:	ldr	r3, [pc, #24]	; 115d0 <_start@@Base+0x84>
   115b4:	cmp	r3, r0
   115b8:	bxeq	lr
   115bc:	ldr	r3, [pc, #16]	; 115d4 <_start@@Base+0x88>
   115c0:	cmp	r3, #0
   115c4:	bxeq	lr
   115c8:	bx	r3
   115cc:	andeq	r5, r2, ip, asr #1
   115d0:	andeq	r5, r2, ip, asr #1
   115d4:	andeq	r0, r0, r0
   115d8:	ldr	r0, [pc, #36]	; 11604 <_start@@Base+0xb8>
   115dc:	ldr	r1, [pc, #36]	; 11608 <_start@@Base+0xbc>
   115e0:	sub	r1, r1, r0
   115e4:	asr	r1, r1, #2
   115e8:	add	r1, r1, r1, lsr #31
   115ec:	asrs	r1, r1, #1
   115f0:	bxeq	lr
   115f4:	ldr	r3, [pc, #16]	; 1160c <_start@@Base+0xc0>
   115f8:	cmp	r3, #0
   115fc:	bxeq	lr
   11600:	bx	r3
   11604:	andeq	r5, r2, ip, asr #1
   11608:	andeq	r5, r2, ip, asr #1
   1160c:	andeq	r0, r0, r0
   11610:	push	{r4, lr}
   11614:	ldr	r4, [pc, #24]	; 11634 <_start@@Base+0xe8>
   11618:	ldrb	r3, [r4]
   1161c:	cmp	r3, #0
   11620:	popne	{r4, pc}
   11624:	bl	115ac <_start@@Base+0x60>
   11628:	mov	r3, #1
   1162c:	strb	r3, [r4]
   11630:	pop	{r4, pc}
   11634:	andeq	r5, r2, ip, asr #1
   11638:	b	115d8 <_start@@Base+0x8c>

0001163c <test_simple_case@@Base>:
   1163c:	push	{fp, lr}
   11640:	mov	fp, sp
   11644:	sub	sp, sp, #96	; 0x60
   11648:	ldr	r0, [pc, #408]	; 117e8 <test_simple_case@@Base+0x1ac>
   1164c:	add	r0, pc, r0
   11650:	bl	11814 <test_simple_case@@Base+0x1d8>
   11654:	movw	r1, #0
   11658:	str	r0, [sp, #28]
   1165c:	mov	r0, r1
   11660:	bl	1213c <mmk_matcher_init@@Base>
   11664:	sub	r0, fp, #6
   11668:	sub	r1, fp, #28
   1166c:	mov	r2, r1
   11670:	vmov.i32	q8, #0	; 0x00000000
   11674:	vst1.32	{d16-d17}, [r2]!
   11678:	mov	r3, #0
   1167c:	str	r3, [r2]
   11680:	str	r0, [fp, #-32]	; 0xffffffe0
   11684:	sub	r0, fp, #32
   11688:	str	r0, [fp, #-20]	; 0xffffffec
   1168c:	mov	r0, r1
   11690:	bl	14384 <mmk_when_init@@Base>
   11694:	movw	r0, #6
   11698:	bl	114a4 <malloc@plt>
   1169c:	str	r0, [sp, #24]
   116a0:	bl	121ac <mmk_matcher_term@@Base>
   116a4:	ldr	r0, [pc, #312]	; 117e4 <test_simple_case@@Base+0x1a8>
   116a8:	add	r0, pc, r0
   116ac:	bl	1151c <my_strdup@plt>
   116b0:	str	r0, [fp, #-36]	; 0xffffffdc
   116b4:	movw	r0, #1
   116b8:	bl	1213c <mmk_matcher_init@@Base>
   116bc:	ldr	r0, [pc, #284]	; 117e0 <test_simple_case@@Base+0x1a4>
   116c0:	movw	r1, #0
   116c4:	bl	121f0 <mmk_matcher_add@@Base>
   116c8:	movw	r0, #6
   116cc:	bl	114a4 <malloc@plt>
   116d0:	str	r0, [sp, #20]
   116d4:	bl	121ac <mmk_matcher_term@@Base>
   116d8:	movw	r0, #1
   116dc:	str	r0, [sp, #32]
   116e0:	movw	r1, #0
   116e4:	str	r1, [sp, #36]	; 0x24
   116e8:	str	r1, [sp, #40]	; 0x28
   116ec:	str	r1, [sp, #44]	; 0x2c
   116f0:	str	r0, [sp, #48]	; 0x30
   116f4:	str	r1, [sp, #52]	; 0x34
   116f8:	add	r0, sp, #32
   116fc:	bl	13864 <mmk_verify_times@@Base>
   11700:	str	r0, [fp, #-40]	; 0xffffffd8
   11704:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11708:	cmp	r0, #0
   1170c:	bne	11754 <test_simple_case@@Base+0x118>
   11710:	ldr	r0, [pc, #212]	; 117ec <test_simple_case@@Base+0x1b0>
   11714:	add	r1, pc, r0
   11718:	ldr	r0, [pc, #208]	; 117f0 <test_simple_case@@Base+0x1b4>
   1171c:	add	r2, pc, r0
   11720:	ldr	r0, [pc, #204]	; 117f4 <test_simple_case@@Base+0x1b8>
   11724:	add	r0, pc, r0
   11728:	ldr	r3, [pc, #200]	; 117f8 <test_simple_case@@Base+0x1bc>
   1172c:	ldr	r3, [pc, r3]
   11730:	ldr	r3, [r3]
   11734:	str	r0, [sp, #16]
   11738:	mov	r0, r3
   1173c:	movw	r3, #23
   11740:	ldr	ip, [sp, #16]
   11744:	str	ip, [sp]
   11748:	bl	114ec <fprintf@plt>
   1174c:	str	r0, [sp, #12]
   11750:	bl	11540 <abort@plt>
   11754:	b	11758 <test_simple_case@@Base+0x11c>
   11758:	b	1175c <test_simple_case@@Base+0x120>
   1175c:	sub	r0, fp, #6
   11760:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11764:	cmp	r1, r0
   11768:	bne	11784 <test_simple_case@@Base+0x148>
   1176c:	sub	r1, fp, #6
   11770:	ldr	r0, [pc, #152]	; 11810 <test_simple_case@@Base+0x1d4>
   11774:	add	r0, pc, r0
   11778:	bl	11468 <strcmp@plt>
   1177c:	cmp	r0, #0
   11780:	beq	117c8 <test_simple_case@@Base+0x18c>
   11784:	ldr	r0, [pc, #116]	; 11800 <test_simple_case@@Base+0x1c4>
   11788:	add	r1, pc, r0
   1178c:	ldr	r0, [pc, #112]	; 11804 <test_simple_case@@Base+0x1c8>
   11790:	add	r2, pc, r0
   11794:	ldr	r0, [pc, #108]	; 11808 <test_simple_case@@Base+0x1cc>
   11798:	add	r0, pc, r0
   1179c:	ldr	r3, [pc, #104]	; 1180c <test_simple_case@@Base+0x1d0>
   117a0:	ldr	r3, [pc, r3]
   117a4:	ldr	r3, [r3]
   117a8:	str	r0, [sp, #8]
   117ac:	mov	r0, r3
   117b0:	movw	r3, #24
   117b4:	ldr	ip, [sp, #8]
   117b8:	str	ip, [sp]
   117bc:	bl	114ec <fprintf@plt>
   117c0:	str	r0, [sp, #4]
   117c4:	bl	11540 <abort@plt>
   117c8:	b	117cc <test_simple_case@@Base+0x190>
   117cc:	ldr	r0, [pc, #40]	; 117fc <test_simple_case@@Base+0x1c0>
   117d0:	ldr	r0, [pc, r0]
   117d4:	bl	120f0 <mmk_reset@@Base>
   117d8:	mov	sp, fp
   117dc:	pop	{fp, pc}
   117e0:	andhi	r0, r0, sl
   117e4:	andeq	r2, r0, lr, asr lr
   117e8:	andeq	r2, r0, r8, lsr #29
   117ec:	strdeq	r2, [r0], -r8
   117f0:	andeq	r2, r0, sp, lsl #28
   117f4:	andeq	r2, r0, lr, asr lr
   117f8:	andeq	r3, r1, r4, asr r9
   117fc:	andeq	r3, r1, r0, asr #17
   11800:	andeq	r2, r0, r4, lsl #27
   11804:	muleq	r0, r9, sp
   11808:	andeq	r2, r0, pc, ror #27
   1180c:	andeq	r3, r1, r0, ror #17
   11810:	andeq	r3, r1, r4, asr #18
   11814:	push	{fp, lr}
   11818:	mov	fp, sp
   1181c:	sub	sp, sp, #8
   11820:	ldr	r1, [pc, #20]	; 1183c <test_simple_case@@Base+0x200>
   11824:	add	r1, pc, r1
   11828:	str	r0, [sp, #4]
   1182c:	ldr	r0, [sp, #4]
   11830:	bl	122fc <mmk_mock_create_internal@@Base>
   11834:	mov	sp, fp
   11838:	pop	{fp, pc}
   1183c:	andeq	r0, r0, r0, ror #2

00011840 <test_error_case@@Base>:
   11840:	push	{fp, lr}
   11844:	mov	fp, sp
   11848:	sub	sp, sp, #56	; 0x38
   1184c:	ldr	r0, [pc, #252]	; 11950 <test_error_case@@Base+0x110>
   11850:	add	r0, pc, r0
   11854:	bl	11814 <test_simple_case@@Base+0x1d8>
   11858:	str	r0, [fp, #-4]
   1185c:	movw	r0, #0
   11860:	bl	1213c <mmk_matcher_init@@Base>
   11864:	movw	r0, #0
   11868:	str	r0, [fp, #-24]	; 0xffffffe8
   1186c:	movw	r1, #12
   11870:	str	r1, [fp, #-20]	; 0xffffffec
   11874:	str	r0, [sp, #28]
   11878:	add	r1, sp, #28
   1187c:	str	r1, [fp, #-16]
   11880:	str	r0, [fp, #-12]
   11884:	str	r0, [fp, #-8]
   11888:	sub	r0, fp, #24
   1188c:	bl	14384 <mmk_when_init@@Base>
   11890:	ldr	r0, [fp, #-4]
   11894:	movw	r1, #0
   11898:	str	r0, [sp, #16]
   1189c:	mov	r0, r1
   118a0:	movw	r1, #1
   118a4:	bl	121f0 <mmk_matcher_add@@Base>
   118a8:	movw	r0, #0
   118ac:	str	r0, [sp, #24]
   118b0:	ldr	r0, [sp, #24]
   118b4:	ldr	r1, [sp, #16]
   118b8:	blx	r1
   118bc:	str	r0, [sp, #12]
   118c0:	bl	121ac <mmk_matcher_term@@Base>
   118c4:	ldr	r0, [pc, #128]	; 1194c <test_error_case@@Base+0x10c>
   118c8:	add	r0, pc, r0
   118cc:	bl	1151c <my_strdup@plt>
   118d0:	str	r0, [sp, #20]
   118d4:	ldr	r0, [sp, #20]
   118d8:	movw	r1, #0
   118dc:	cmp	r0, r1
   118e0:	bne	118f4 <test_error_case@@Base+0xb4>
   118e4:	bl	114f8 <__errno_location@plt>
   118e8:	ldr	r0, [r0]
   118ec:	cmp	r0, #12
   118f0:	beq	11938 <test_error_case@@Base+0xf8>
   118f4:	ldr	r0, [pc, #88]	; 11954 <test_error_case@@Base+0x114>
   118f8:	add	r1, pc, r0
   118fc:	ldr	r0, [pc, #84]	; 11958 <test_error_case@@Base+0x118>
   11900:	add	r2, pc, r0
   11904:	ldr	r0, [pc, #80]	; 1195c <test_error_case@@Base+0x11c>
   11908:	add	r0, pc, r0
   1190c:	ldr	r3, [pc, #76]	; 11960 <test_error_case@@Base+0x120>
   11910:	ldr	r3, [pc, r3]
   11914:	ldr	r3, [r3]
   11918:	str	r0, [sp, #8]
   1191c:	mov	r0, r3
   11920:	movw	r3, #39	; 0x27
   11924:	ldr	ip, [sp, #8]
   11928:	str	ip, [sp]
   1192c:	bl	114ec <fprintf@plt>
   11930:	str	r0, [sp, #4]
   11934:	bl	11540 <abort@plt>
   11938:	b	1193c <test_error_case@@Base+0xfc>
   1193c:	ldr	r0, [fp, #-4]
   11940:	bl	120f0 <mmk_reset@@Base>
   11944:	mov	sp, fp
   11948:	pop	{fp, pc}
   1194c:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11950:	andeq	r2, r0, r4, lsr #25
   11954:	andeq	r2, r0, r4, lsl ip
   11958:	andeq	r2, r0, r9, lsr #24
   1195c:	andeq	r2, r0, r3, lsr #25
   11960:	andeq	r3, r1, r0, ror r7

00011964 <main@@Base>:
   11964:	push	{fp, lr}
   11968:	mov	fp, sp
   1196c:	sub	sp, sp, #8
   11970:	movw	r0, #0
   11974:	str	r0, [sp, #4]
   11978:	bl	1163c <test_simple_case@@Base>
   1197c:	bl	11840 <test_error_case@@Base>
   11980:	movw	r0, #0
   11984:	mov	sp, fp
   11988:	pop	{fp, pc}
   1198c:	push	{fp, lr}
   11990:	mov	fp, sp
   11994:	sub	sp, sp, #128	; 0x80
   11998:	str	r0, [fp, #-8]
   1199c:	b	119a0 <main@@Base+0x3c>
   119a0:	bl	121d0 <mmk_matcher_ctx@@Base>
   119a4:	str	r0, [fp, #-12]
   119a8:	ldr	r0, [fp, #-12]
   119ac:	movw	r1, #0
   119b0:	cmp	r0, r1
   119b4:	beq	11c40 <main@@Base+0x2dc>
   119b8:	bl	1351c <mmk_ctx@@Base>
   119bc:	bl	1326c <mmk_stub_context@@Base>
   119c0:	str	r0, [fp, #-16]
   119c4:	ldr	r0, [fp, #-12]
   119c8:	ldr	r0, [r0]
   119cc:	cmp	r0, #0
   119d0:	bne	11a28 <main@@Base+0xc4>
   119d4:	movw	r0, #44	; 0x2c
   119d8:	bl	140f8 <mmk_malloc@@Base>
   119dc:	str	r0, [fp, #-20]	; 0xffffffec
   119e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   119e4:	add	r0, r0, #8
   119e8:	str	r0, [sp, #32]
   119ec:	bl	143c0 <mmk_when_get_result@@Base>
   119f0:	ldr	r1, [sp, #32]
   119f4:	str	r0, [sp, #28]
   119f8:	mov	r0, r1
   119fc:	ldr	r1, [sp, #28]
   11a00:	movw	r2, #20
   11a04:	bl	1148c <memcpy@plt>
   11a08:	ldr	r0, [fp, #-8]
   11a0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a10:	str	r0, [r1, #40]	; 0x28
   11a14:	b	11a18 <main@@Base+0xb4>
   11a18:	ldr	r0, [fp, #-16]
   11a1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a20:	bl	143e0 <mmk_when_impl@@Base>
   11a24:	b	11c24 <main@@Base+0x2c0>
   11a28:	ldr	r0, [fp, #-12]
   11a2c:	ldr	r0, [r0]
   11a30:	cmp	r0, #1
   11a34:	bne	11c20 <main@@Base+0x2bc>
   11a38:	movw	r0, #0
   11a3c:	str	r0, [fp, #-24]	; 0xffffffe8
   11a40:	ldr	r0, [fp, #-16]
   11a44:	bl	125ec <mmk_mock_params_begin@@Base>
   11a48:	str	r0, [fp, #-28]	; 0xffffffe4
   11a4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11a50:	movw	r1, #0
   11a54:	cmp	r0, r1
   11a58:	beq	11be0 <main@@Base+0x27c>
   11a5c:	ldr	r0, [fp, #-12]
   11a60:	str	r0, [fp, #-32]	; 0xffffffe0
   11a64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a68:	ldr	r0, [r0, #8]
   11a6c:	movw	r1, #0
   11a70:	cmp	r0, r1
   11a74:	beq	11b88 <main@@Base+0x224>
   11a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a7c:	ldr	r0, [r0, #8]
   11a80:	str	r0, [fp, #-32]	; 0xffffffe0
   11a84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a88:	ldr	r0, [r0]
   11a8c:	cmp	r0, #0
   11a90:	bne	11a98 <main@@Base+0x134>
   11a94:	b	11b84 <main@@Base+0x220>
   11a98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a9c:	ldr	r0, [r0]
   11aa0:	and	r0, r0, #-2147483648	; 0x80000000
   11aa4:	cmp	r0, #0
   11aa8:	beq	11b34 <main@@Base+0x1d0>
   11aac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11ab0:	add	r0, r0, #12
   11ab4:	sub	r1, fp, #8
   11ab8:	movw	r2, #4
   11abc:	bl	13cb8 <mmk_memcmp@@Base>
   11ac0:	str	r0, [fp, #-36]	; 0xffffffdc
   11ac4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11ac8:	cmp	r0, #0
   11acc:	bne	11ae8 <main@@Base+0x184>
   11ad0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11ad4:	ldr	r0, [r0]
   11ad8:	and	r0, r0, #2
   11adc:	cmp	r0, #0
   11ae0:	bne	11ae8 <main@@Base+0x184>
   11ae4:	b	11bc8 <main@@Base+0x264>
   11ae8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11aec:	cmp	r0, #0
   11af0:	bge	11b0c <main@@Base+0x1a8>
   11af4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11af8:	ldr	r0, [r0]
   11afc:	and	r0, r0, #4
   11b00:	cmp	r0, #0
   11b04:	bne	11b0c <main@@Base+0x1a8>
   11b08:	b	11bc8 <main@@Base+0x264>
   11b0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11b10:	cmp	r0, #0
   11b14:	ble	11b30 <main@@Base+0x1cc>
   11b18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11b1c:	ldr	r0, [r0]
   11b20:	and	r0, r0, #8
   11b24:	cmp	r0, #0
   11b28:	bne	11b30 <main@@Base+0x1cc>
   11b2c:	b	11bc8 <main@@Base+0x264>
   11b30:	b	11b80 <main@@Base+0x21c>
   11b34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11b38:	ldr	r0, [r0]
   11b3c:	cmp	r0, #1
   11b40:	bne	11b7c <main@@Base+0x218>
   11b44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11b48:	bl	122e4 <mmk_matcher_get_predicate@@Base>
   11b4c:	str	r0, [fp, #-40]	; 0xffffffd8
   11b50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b54:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11b58:	ldr	r1, [r1, #12]
   11b5c:	str	r0, [sp, #24]
   11b60:	mov	r0, r1
   11b64:	ldr	r1, [sp, #24]
   11b68:	blx	r1
   11b6c:	cmp	r0, #0
   11b70:	bne	11b78 <main@@Base+0x214>
   11b74:	b	11bc8 <main@@Base+0x264>
   11b78:	b	11b7c <main@@Base+0x218>
   11b7c:	b	11b80 <main@@Base+0x21c>
   11b80:	b	11b84 <main@@Base+0x220>
   11b84:	b	11bac <main@@Base+0x248>
   11b88:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11b8c:	add	r0, r0, #12
   11b90:	sub	r1, fp, #8
   11b94:	movw	r2, #4
   11b98:	bl	13cb8 <mmk_memcmp@@Base>
   11b9c:	cmp	r0, #0
   11ba0:	beq	11ba8 <main@@Base+0x244>
   11ba4:	b	11bc8 <main@@Base+0x264>
   11ba8:	b	11bac <main@@Base+0x248>
   11bac:	b	11bb0 <main@@Base+0x24c>
   11bb0:	b	11bb4 <main@@Base+0x250>
   11bb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11bb8:	ldr	r0, [r0]
   11bbc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11bc0:	add	r0, r1, r0
   11bc4:	str	r0, [fp, #-24]	; 0xffffffe8
   11bc8:	b	11bcc <main@@Base+0x268>
   11bcc:	ldr	r0, [fp, #-16]
   11bd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11bd4:	bl	12640 <mmk_mock_params_next@@Base>
   11bd8:	str	r0, [fp, #-28]	; 0xffffffe4
   11bdc:	b	11a4c <main@@Base+0xe8>
   11be0:	ldr	r0, [fp, #-12]
   11be4:	str	r0, [fp, #-44]	; 0xffffffd4
   11be8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11bec:	movw	r1, #0
   11bf0:	cmp	r0, r1
   11bf4:	beq	11c18 <main@@Base+0x2b4>
   11bf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11bfc:	ldr	r0, [r0, #8]
   11c00:	str	r0, [fp, #-48]	; 0xffffffd0
   11c04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11c08:	bl	1417c <mmk_free@@Base>
   11c0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c10:	str	r0, [fp, #-44]	; 0xffffffd4
   11c14:	b	11be8 <main@@Base+0x284>
   11c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c1c:	bl	13828 <mmk_verify_set_times@@Base>
   11c20:	b	11c24 <main@@Base+0x2c0>
   11c24:	b	11c28 <main@@Base+0x2c4>
   11c28:	b	11c2c <main@@Base+0x2c8>
   11c2c:	ldr	r0, [pc, #832]	; 11f74 <main@@Base+0x610>
   11c30:	add	r0, pc, r0
   11c34:	ldr	r0, [r0]
   11c38:	str	r0, [fp, #-4]
   11c3c:	b	11f60 <main@@Base+0x5fc>
   11c40:	movw	r0, #0
   11c44:	str	r0, [sp, #60]	; 0x3c
   11c48:	str	r0, [sp, #64]	; 0x40
   11c4c:	str	r0, [sp, #68]	; 0x44
   11c50:	ldr	r0, [fp, #-8]
   11c54:	str	r0, [sp, #72]	; 0x48
   11c58:	add	r0, sp, #60	; 0x3c
   11c5c:	str	r0, [fp, #-52]	; 0xffffffcc
   11c60:	b	11c64 <main@@Base+0x300>
   11c64:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c68:	movw	r1, #16
   11c6c:	bl	139b0 <mmk_verify_register_call@@Base>
   11c70:	bl	126bc <mmk_mock_get_params@@Base>
   11c74:	str	r0, [sp, #56]	; 0x38
   11c78:	ldr	r0, [sp, #56]	; 0x38
   11c7c:	movw	r1, #0
   11c80:	cmp	r0, r1
   11c84:	beq	11f48 <main@@Base+0x5e4>
   11c88:	ldr	r0, [sp, #56]	; 0x38
   11c8c:	str	r0, [sp, #52]	; 0x34
   11c90:	ldr	r0, [sp, #56]	; 0x38
   11c94:	ldr	r0, [r0]
   11c98:	str	r0, [sp, #48]	; 0x30
   11c9c:	ldr	r0, [sp, #48]	; 0x30
   11ca0:	ldr	r0, [r0, #8]
   11ca4:	movw	r1, #0
   11ca8:	cmp	r0, r1
   11cac:	beq	11dc4 <main@@Base+0x460>
   11cb0:	ldr	r0, [sp, #48]	; 0x30
   11cb4:	ldr	r0, [r0, #8]
   11cb8:	str	r0, [sp, #48]	; 0x30
   11cbc:	ldr	r0, [sp, #48]	; 0x30
   11cc0:	ldr	r0, [r0]
   11cc4:	cmp	r0, #0
   11cc8:	bne	11cd0 <main@@Base+0x36c>
   11ccc:	b	11dc0 <main@@Base+0x45c>
   11cd0:	ldr	r0, [sp, #48]	; 0x30
   11cd4:	ldr	r0, [r0]
   11cd8:	and	r0, r0, #-2147483648	; 0x80000000
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d74 <main@@Base+0x410>
   11ce4:	sub	r0, fp, #8
   11ce8:	mov	r1, r0
   11cec:	str	r0, [sp, #20]
   11cf0:	mov	r0, r1
   11cf4:	ldr	r1, [sp, #20]
   11cf8:	movw	r2, #4
   11cfc:	bl	13cb8 <mmk_memcmp@@Base>
   11d00:	str	r0, [sp, #44]	; 0x2c
   11d04:	ldr	r0, [sp, #44]	; 0x2c
   11d08:	cmp	r0, #0
   11d0c:	bne	11d28 <main@@Base+0x3c4>
   11d10:	ldr	r0, [sp, #48]	; 0x30
   11d14:	ldr	r0, [r0]
   11d18:	and	r0, r0, #2
   11d1c:	cmp	r0, #0
   11d20:	bne	11d28 <main@@Base+0x3c4>
   11d24:	b	11f38 <main@@Base+0x5d4>
   11d28:	ldr	r0, [sp, #44]	; 0x2c
   11d2c:	cmp	r0, #0
   11d30:	bge	11d4c <main@@Base+0x3e8>
   11d34:	ldr	r0, [sp, #48]	; 0x30
   11d38:	ldr	r0, [r0]
   11d3c:	and	r0, r0, #4
   11d40:	cmp	r0, #0
   11d44:	bne	11d4c <main@@Base+0x3e8>
   11d48:	b	11f38 <main@@Base+0x5d4>
   11d4c:	ldr	r0, [sp, #44]	; 0x2c
   11d50:	cmp	r0, #0
   11d54:	ble	11d70 <main@@Base+0x40c>
   11d58:	ldr	r0, [sp, #48]	; 0x30
   11d5c:	ldr	r0, [r0]
   11d60:	and	r0, r0, #8
   11d64:	cmp	r0, #0
   11d68:	bne	11d70 <main@@Base+0x40c>
   11d6c:	b	11f38 <main@@Base+0x5d4>
   11d70:	b	11dbc <main@@Base+0x458>
   11d74:	ldr	r0, [sp, #48]	; 0x30
   11d78:	ldr	r0, [r0]
   11d7c:	cmp	r0, #1
   11d80:	bne	11db8 <main@@Base+0x454>
   11d84:	ldr	r0, [sp, #48]	; 0x30
   11d88:	bl	122e4 <mmk_matcher_get_predicate@@Base>
   11d8c:	str	r0, [sp, #40]	; 0x28
   11d90:	ldr	r0, [sp, #40]	; 0x28
   11d94:	ldr	r1, [fp, #-8]
   11d98:	str	r0, [sp, #16]
   11d9c:	mov	r0, r1
   11da0:	ldr	r1, [sp, #16]
   11da4:	blx	r1
   11da8:	cmp	r0, #0
   11dac:	bne	11db4 <main@@Base+0x450>
   11db0:	b	11f38 <main@@Base+0x5d4>
   11db4:	b	11db8 <main@@Base+0x454>
   11db8:	b	11dbc <main@@Base+0x458>
   11dbc:	b	11dc0 <main@@Base+0x45c>
   11dc0:	b	11dec <main@@Base+0x488>
   11dc4:	sub	r0, fp, #8
   11dc8:	ldr	r1, [sp, #52]	; 0x34
   11dcc:	add	r1, r1, #28
   11dd0:	add	r1, r1, #12
   11dd4:	movw	r2, #4
   11dd8:	bl	13cb8 <mmk_memcmp@@Base>
   11ddc:	cmp	r0, #0
   11de0:	beq	11de8 <main@@Base+0x484>
   11de4:	b	11f38 <main@@Base+0x5d4>
   11de8:	b	11dec <main@@Base+0x488>
   11dec:	ldr	r0, [sp, #52]	; 0x34
   11df0:	ldr	r0, [r0, #12]
   11df4:	cmp	r0, #0
   11df8:	beq	11e14 <main@@Base+0x4b0>
   11dfc:	ldr	r0, [sp, #52]	; 0x34
   11e00:	ldr	r0, [r0, #12]
   11e04:	str	r0, [sp, #12]
   11e08:	bl	114f8 <__errno_location@plt>
   11e0c:	ldr	r1, [sp, #12]
   11e10:	str	r1, [r0]
   11e14:	ldr	r0, [sp, #52]	; 0x34
   11e18:	ldr	r0, [r0, #20]
   11e1c:	movw	r1, #0
   11e20:	cmp	r0, r1
   11e24:	beq	11e80 <main@@Base+0x51c>
   11e28:	ldr	r0, [sp, #52]	; 0x34
   11e2c:	ldr	r0, [r0, #16]
   11e30:	movw	r1, #0
   11e34:	cmp	r0, r1
   11e38:	bne	11e80 <main@@Base+0x51c>
   11e3c:	b	11e40 <main@@Base+0x4dc>
   11e40:	b	11e44 <main@@Base+0x4e0>
   11e44:	b	11e48 <main@@Base+0x4e4>
   11e48:	ldr	r0, [sp, #52]	; 0x34
   11e4c:	ldr	r0, [r0, #20]
   11e50:	ldr	r1, [fp, #-8]
   11e54:	str	r0, [sp, #8]
   11e58:	mov	r0, r1
   11e5c:	ldr	r1, [sp, #8]
   11e60:	blx	r1
   11e64:	str	r0, [sp, #36]	; 0x24
   11e68:	b	11e6c <main@@Base+0x508>
   11e6c:	b	11e70 <main@@Base+0x50c>
   11e70:	b	11e74 <main@@Base+0x510>
   11e74:	ldr	r0, [sp, #36]	; 0x24
   11e78:	str	r0, [fp, #-4]
   11e7c:	b	11f60 <main@@Base+0x5fc>
   11e80:	ldr	r0, [sp, #52]	; 0x34
   11e84:	ldr	r0, [r0, #20]
   11e88:	movw	r1, #0
   11e8c:	cmp	r0, r1
   11e90:	beq	11eec <main@@Base+0x588>
   11e94:	ldr	r0, [sp, #52]	; 0x34
   11e98:	ldr	r0, [r0, #16]
   11e9c:	movw	r1, #0
   11ea0:	cmp	r0, r1
   11ea4:	beq	11eec <main@@Base+0x588>
   11ea8:	b	11eac <main@@Base+0x548>
   11eac:	b	11eb0 <main@@Base+0x54c>
   11eb0:	ldr	r0, [sp, #52]	; 0x34
   11eb4:	ldr	r0, [r0, #20]
   11eb8:	ldr	r1, [fp, #-8]
   11ebc:	str	r0, [sp, #4]
   11ec0:	mov	r0, r1
   11ec4:	ldr	r1, [sp, #4]
   11ec8:	blx	r1
   11ecc:	b	11ed0 <main@@Base+0x56c>
   11ed0:	b	11ed4 <main@@Base+0x570>
   11ed4:	b	11ed8 <main@@Base+0x574>
   11ed8:	ldr	r0, [sp, #52]	; 0x34
   11edc:	ldr	r0, [r0, #16]
   11ee0:	ldr	r0, [r0]
   11ee4:	str	r0, [fp, #-4]
   11ee8:	b	11f60 <main@@Base+0x5fc>
   11eec:	ldr	r0, [sp, #52]	; 0x34
   11ef0:	ldr	r0, [r0, #16]
   11ef4:	movw	r1, #0
   11ef8:	cmp	r0, r1
   11efc:	beq	11f1c <main@@Base+0x5b8>
   11f00:	b	11f04 <main@@Base+0x5a0>
   11f04:	b	11f08 <main@@Base+0x5a4>
   11f08:	ldr	r0, [sp, #52]	; 0x34
   11f0c:	ldr	r0, [r0, #16]
   11f10:	ldr	r0, [r0]
   11f14:	str	r0, [fp, #-4]
   11f18:	b	11f60 <main@@Base+0x5fc>
   11f1c:	b	11f20 <main@@Base+0x5bc>
   11f20:	b	11f24 <main@@Base+0x5c0>
   11f24:	ldr	r0, [pc, #68]	; 11f70 <main@@Base+0x60c>
   11f28:	add	r0, pc, r0
   11f2c:	ldr	r0, [r0]
   11f30:	str	r0, [fp, #-4]
   11f34:	b	11f60 <main@@Base+0x5fc>
   11f38:	ldr	r0, [sp, #56]	; 0x38
   11f3c:	ldr	r0, [r0, #4]
   11f40:	str	r0, [sp, #56]	; 0x38
   11f44:	b	11c78 <main@@Base+0x314>
   11f48:	b	11f4c <main@@Base+0x5e8>
   11f4c:	b	11f50 <main@@Base+0x5ec>
   11f50:	ldr	r0, [pc, #20]	; 11f6c <main@@Base+0x608>
   11f54:	add	r0, pc, r0
   11f58:	ldr	r0, [r0]
   11f5c:	str	r0, [fp, #-4]
   11f60:	ldr	r0, [fp, #-4]
   11f64:	mov	sp, fp
   11f68:	pop	{fp, pc}
   11f6c:	andeq	r3, r1, r4, ror r1
   11f70:	andeq	r3, r1, r0, lsr #3
   11f74:	muleq	r1, r8, r4

00011f78 <mmk_init@@Base>:
   11f78:	push	{fp, lr}
   11f7c:	mov	fp, sp
   11f80:	sub	sp, sp, #16
   11f84:	ldr	r0, [pc, #168]	; 12034 <mmk_init@@Base+0xbc>
   11f88:	add	r0, pc, r0
   11f8c:	ldr	r0, [r0]
   11f90:	cmp	r0, #0
   11f94:	beq	11f9c <mmk_init@@Base+0x24>
   11f98:	b	1202c <mmk_init@@Base+0xb4>
   11f9c:	bl	126e4 <plt_init_ctx@@Base>
   11fa0:	ldr	r1, [pc, #144]	; 12038 <mmk_init@@Base+0xc0>
   11fa4:	add	r1, pc, r1
   11fa8:	str	r0, [r1, #4]
   11fac:	ldr	r0, [pc, #136]	; 1203c <mmk_init@@Base+0xc4>
   11fb0:	add	r0, pc, r0
   11fb4:	ldr	r0, [r0, #4]
   11fb8:	mvn	r1, #0
   11fbc:	cmp	r0, r1
   11fc0:	bne	12008 <mmk_init@@Base+0x90>
   11fc4:	ldr	r0, [pc, #116]	; 12040 <mmk_init@@Base+0xc8>
   11fc8:	add	r1, pc, r0
   11fcc:	ldr	r0, [pc, #112]	; 12044 <mmk_init@@Base+0xcc>
   11fd0:	add	r2, pc, r0
   11fd4:	ldr	r0, [pc, #108]	; 12048 <mmk_init@@Base+0xd0>
   11fd8:	add	r0, pc, r0
   11fdc:	ldr	r3, [pc, #104]	; 1204c <mmk_init@@Base+0xd4>
   11fe0:	ldr	r3, [pc, r3]
   11fe4:	ldr	r3, [r3]
   11fe8:	str	r0, [fp, #-4]
   11fec:	mov	r0, r3
   11ff0:	movw	r3, #45	; 0x2d
   11ff4:	ldr	ip, [fp, #-4]
   11ff8:	str	ip, [sp]
   11ffc:	bl	114ec <fprintf@plt>
   12000:	str	r0, [sp, #8]
   12004:	bl	11540 <abort@plt>
   12008:	b	1200c <mmk_init@@Base+0x94>
   1200c:	ldr	r0, [pc, #64]	; 12054 <mmk_init@@Base+0xdc>
   12010:	add	r0, pc, r0
   12014:	ldr	r0, [r0, #4]
   12018:	bl	141b8 <mmk_init_vital_functions@@Base>
   1201c:	ldr	r0, [pc, #44]	; 12050 <mmk_init@@Base+0xd8>
   12020:	add	r0, pc, r0
   12024:	movw	r1, #1
   12028:	str	r1, [r0]
   1202c:	mov	sp, fp
   12030:	pop	{fp, pc}
   12034:	andeq	r3, r1, r4, asr #2
   12038:	andeq	r3, r1, r8, lsr #2
   1203c:	andeq	r3, r1, ip, lsl r1
   12040:	andeq	r2, r0, r4, asr #10
   12044:	strdeq	r2, [r0], -sl
   12048:	andeq	r2, r0, r1, asr #12
   1204c:	andeq	r3, r1, r0, lsr #1
   12050:	andeq	r3, r1, ip, lsr #1
   12054:	strheq	r3, [r1], -ip

00012058 <mmk_plt_ctx@@Base>:
   12058:	push	{fp, lr}
   1205c:	mov	fp, sp
   12060:	sub	sp, sp, #16
   12064:	b	12068 <mmk_plt_ctx@@Base+0x10>
   12068:	ldr	r0, [pc, #104]	; 120d8 <mmk_plt_ctx@@Base+0x80>
   1206c:	add	r0, pc, r0
   12070:	ldr	r0, [r0]
   12074:	cmp	r0, #0
   12078:	bne	120c0 <mmk_plt_ctx@@Base+0x68>
   1207c:	ldr	r0, [pc, #88]	; 120dc <mmk_plt_ctx@@Base+0x84>
   12080:	add	r1, pc, r0
   12084:	ldr	r0, [pc, #84]	; 120e0 <mmk_plt_ctx@@Base+0x88>
   12088:	add	r2, pc, r0
   1208c:	ldr	r0, [pc, #80]	; 120e4 <mmk_plt_ctx@@Base+0x8c>
   12090:	add	r0, pc, r0
   12094:	ldr	r3, [pc, #76]	; 120e8 <mmk_plt_ctx@@Base+0x90>
   12098:	ldr	r3, [pc, r3]
   1209c:	ldr	r3, [r3]
   120a0:	str	r0, [fp, #-4]
   120a4:	mov	r0, r3
   120a8:	movw	r3, #54	; 0x36
   120ac:	ldr	ip, [fp, #-4]
   120b0:	str	ip, [sp]
   120b4:	bl	114ec <fprintf@plt>
   120b8:	str	r0, [sp, #8]
   120bc:	bl	11540 <abort@plt>
   120c0:	b	120c4 <mmk_plt_ctx@@Base+0x6c>
   120c4:	ldr	r0, [pc, #32]	; 120ec <mmk_plt_ctx@@Base+0x94>
   120c8:	add	r0, pc, r0
   120cc:	ldr	r0, [r0, #4]
   120d0:	mov	sp, fp
   120d4:	pop	{fp, pc}
   120d8:	andeq	r3, r1, r0, rrx
   120dc:	andeq	r2, r0, ip, lsl #9
   120e0:	andeq	r2, r0, r2, asr #10
   120e4:	andeq	r2, r0, r0, lsr #11
   120e8:	andeq	r2, r1, r8, ror #31
   120ec:	andeq	r3, r1, r4

000120f0 <mmk_reset@@Base>:
   120f0:	push	{fp, lr}
   120f4:	mov	fp, sp
   120f8:	sub	sp, sp, #16
   120fc:	str	r0, [fp, #-4]
   12100:	ldr	r0, [fp, #-4]
   12104:	movw	r1, #0
   12108:	cmp	r0, r1
   1210c:	bne	12114 <mmk_reset@@Base+0x24>
   12110:	b	12134 <mmk_reset@@Base+0x44>
   12114:	ldr	r0, [fp, #-4]
   12118:	bl	13630 <mmk_ask_ctx@@Base>
   1211c:	str	r0, [sp, #8]
   12120:	ldr	r0, [sp, #8]
   12124:	bl	1326c <mmk_stub_context@@Base>
   12128:	str	r0, [sp, #4]
   1212c:	ldr	r0, [sp, #4]
   12130:	bl	1250c <mmk_mock_destroy_internal@@Base>
   12134:	mov	sp, fp
   12138:	pop	{fp, pc}

0001213c <mmk_matcher_init@@Base>:
   1213c:	push	{fp, lr}
   12140:	mov	fp, sp
   12144:	sub	sp, sp, #24
   12148:	str	r0, [fp, #-4]
   1214c:	mov	r0, #12
   12150:	bl	140f8 <mmk_malloc@@Base>
   12154:	str	r0, [fp, #-8]
   12158:	ldr	r0, [fp, #-8]
   1215c:	ldr	r1, [fp, #-4]
   12160:	str	r1, [sp, #4]
   12164:	mov	r1, #0
   12168:	str	r1, [sp, #8]
   1216c:	str	r1, [sp, #12]
   12170:	ldr	r1, [sp, #12]
   12174:	str	r1, [r0, #8]
   12178:	vldr	d16, [sp, #4]
   1217c:	vstr	d16, [r0]
   12180:	ldr	r0, [fp, #-8]
   12184:	ldr	r1, [pc, #28]	; 121a8 <mmk_matcher_init@@Base+0x6c>
   12188:	add	r1, pc, r1
   1218c:	str	r0, [sp]
   12190:	mov	r0, r1
   12194:	bl	11528 <__tls_get_addr@plt>
   12198:	ldr	r1, [sp]
   1219c:	str	r1, [r0]
   121a0:	mov	sp, fp
   121a4:	pop	{fp, pc}
   121a8:	andeq	r2, r1, ip, asr #29

000121ac <mmk_matcher_term@@Base>:
   121ac:	push	{fp, lr}
   121b0:	mov	fp, sp
   121b4:	ldr	r0, [pc, #16]	; 121cc <mmk_matcher_term@@Base+0x20>
   121b8:	add	r0, pc, r0
   121bc:	bl	11528 <__tls_get_addr@plt>
   121c0:	mov	r1, #0
   121c4:	str	r1, [r0]
   121c8:	pop	{fp, pc}
   121cc:	muleq	r1, ip, lr

000121d0 <mmk_matcher_ctx@@Base>:
   121d0:	push	{fp, lr}
   121d4:	mov	fp, sp
   121d8:	ldr	r0, [pc, #12]	; 121ec <mmk_matcher_ctx@@Base+0x1c>
   121dc:	add	r0, pc, r0
   121e0:	bl	11528 <__tls_get_addr@plt>
   121e4:	ldr	r0, [r0]
   121e8:	pop	{fp, pc}
   121ec:	andeq	r2, r1, r8, ror lr

000121f0 <mmk_matcher_add@@Base>:
   121f0:	push	{fp, lr}
   121f4:	mov	fp, sp
   121f8:	sub	sp, sp, #40	; 0x28
   121fc:	str	r0, [fp, #-4]
   12200:	str	r1, [fp, #-8]
   12204:	mov	r0, #12
   12208:	bl	140f8 <mmk_malloc@@Base>
   1220c:	str	r0, [fp, #-12]
   12210:	ldr	r0, [pc, #200]	; 122e0 <mmk_matcher_add@@Base+0xf0>
   12214:	add	r0, pc, r0
   12218:	bl	11528 <__tls_get_addr@plt>
   1221c:	ldr	r1, [r0]
   12220:	str	r1, [fp, #-16]
   12224:	ldr	r1, [fp, #-12]
   12228:	ldr	r2, [fp, #-4]
   1222c:	str	r2, [sp, #12]
   12230:	ldr	r2, [fp, #-8]
   12234:	str	r2, [sp, #16]
   12238:	mov	r2, #0
   1223c:	str	r2, [sp, #20]
   12240:	ldr	r2, [sp, #20]
   12244:	str	r2, [r1, #8]
   12248:	vldr	d16, [sp, #12]
   1224c:	vstr	d16, [r1]
   12250:	ldr	r0, [r0]
   12254:	ldr	r0, [r0, #8]
   12258:	str	r0, [sp, #8]
   1225c:	ldr	r0, [sp, #8]
   12260:	movw	r1, #0
   12264:	cmp	r0, r1
   12268:	movw	r0, #0
   1226c:	str	r0, [sp, #4]
   12270:	beq	12294 <mmk_matcher_add@@Base+0xa4>
   12274:	ldr	r0, [sp, #8]
   12278:	ldr	r0, [r0, #4]
   1227c:	ldr	r1, [fp, #-12]
   12280:	ldr	r1, [r1, #4]
   12284:	cmp	r0, r1
   12288:	movw	r0, #0
   1228c:	movcc	r0, #1
   12290:	str	r0, [sp, #4]
   12294:	ldr	r0, [sp, #4]
   12298:	tst	r0, #1
   1229c:	beq	122bc <mmk_matcher_add@@Base+0xcc>
   122a0:	b	122a4 <mmk_matcher_add@@Base+0xb4>
   122a4:	ldr	r0, [sp, #8]
   122a8:	str	r0, [fp, #-16]
   122ac:	ldr	r0, [sp, #8]
   122b0:	ldr	r0, [r0, #8]
   122b4:	str	r0, [sp, #8]
   122b8:	b	1225c <mmk_matcher_add@@Base+0x6c>
   122bc:	ldr	r0, [fp, #-16]
   122c0:	ldr	r0, [r0, #8]
   122c4:	ldr	r1, [fp, #-12]
   122c8:	str	r0, [r1, #8]
   122cc:	ldr	r0, [fp, #-12]
   122d0:	ldr	r1, [fp, #-16]
   122d4:	str	r0, [r1, #8]
   122d8:	mov	sp, fp
   122dc:	pop	{fp, pc}
   122e0:	andeq	r2, r1, r0, asr #28

000122e4 <mmk_matcher_get_predicate@@Base>:
   122e4:	sub	sp, sp, #4
   122e8:	str	r0, [sp]
   122ec:	ldr	r0, [sp]
   122f0:	add	r0, r0, #12
   122f4:	add	sp, sp, #4
   122f8:	bx	lr

000122fc <mmk_mock_create_internal@@Base>:
   122fc:	push	{fp, lr}
   12300:	mov	fp, sp
   12304:	sub	sp, sp, #72	; 0x48
   12308:	str	r0, [fp, #-4]
   1230c:	str	r1, [fp, #-8]
   12310:	bl	11f78 <mmk_init@@Base>
   12314:	movw	r0, #20
   12318:	bl	140f8 <mmk_malloc@@Base>
   1231c:	str	r0, [fp, #-12]
   12320:	ldr	r0, [fp, #-12]
   12324:	movw	r1, #0
   12328:	cmp	r0, r1
   1232c:	bne	12374 <mmk_mock_create_internal@@Base+0x78>
   12330:	ldr	r0, [pc, #440]	; 124f0 <mmk_mock_create_internal@@Base+0x1f4>
   12334:	add	r1, pc, r0
   12338:	ldr	r0, [pc, #436]	; 124f4 <mmk_mock_create_internal@@Base+0x1f8>
   1233c:	add	r2, pc, r0
   12340:	ldr	r0, [pc, #432]	; 124f8 <mmk_mock_create_internal@@Base+0x1fc>
   12344:	add	r0, pc, r0
   12348:	ldr	r3, [pc, #428]	; 124fc <mmk_mock_create_internal@@Base+0x200>
   1234c:	ldr	r3, [pc, r3]
   12350:	ldr	r3, [r3]
   12354:	str	r0, [sp, #20]
   12358:	mov	r0, r3
   1235c:	movw	r3, #36	; 0x24
   12360:	ldr	ip, [sp, #20]
   12364:	str	ip, [sp]
   12368:	bl	114ec <fprintf@plt>
   1236c:	str	r0, [sp, #16]
   12370:	bl	11540 <abort@plt>
   12374:	b	12378 <mmk_mock_create_internal@@Base+0x7c>
   12378:	ldr	r0, [fp, #-12]
   1237c:	sub	r1, fp, #32
   12380:	mov	r2, r1
   12384:	vmov.i32	q8, #0	; 0x00000000
   12388:	vst1.32	{d16-d17}, [r2]!
   1238c:	mov	r3, #0
   12390:	str	r3, [r2]
   12394:	movw	r2, #20
   12398:	bl	1148c <memcpy@plt>
   1239c:	ldr	r0, [fp, #-4]
   123a0:	movw	r1, #64	; 0x40
   123a4:	bl	13ee4 <mmk_strchr@@Base>
   123a8:	str	r0, [sp, #36]	; 0x24
   123ac:	ldr	r0, [sp, #36]	; 0x24
   123b0:	movw	r1, #0
   123b4:	cmp	r0, r1
   123b8:	bne	123cc <mmk_mock_create_internal@@Base+0xd0>
   123bc:	ldr	r0, [fp, #-4]
   123c0:	bl	14044 <mmk_strlen@@Base>
   123c4:	str	r0, [sp, #32]
   123c8:	b	123dc <mmk_mock_create_internal@@Base+0xe0>
   123cc:	ldr	r0, [sp, #36]	; 0x24
   123d0:	ldr	r1, [fp, #-4]
   123d4:	sub	r0, r0, r1
   123d8:	str	r0, [sp, #32]
   123dc:	ldr	r0, [sp, #32]
   123e0:	add	r0, r0, #1
   123e4:	bl	140f8 <mmk_malloc@@Base>
   123e8:	str	r0, [sp, #28]
   123ec:	ldr	r0, [sp, #28]
   123f0:	ldr	r1, [fp, #-4]
   123f4:	ldr	r2, [sp, #32]
   123f8:	bl	13fa8 <mmk_strncpy@@Base>
   123fc:	ldr	r1, [sp, #28]
   12400:	ldr	r2, [sp, #32]
   12404:	add	r1, r1, r2
   12408:	movw	r2, #0
   1240c:	strb	r2, [r1]
   12410:	ldr	r1, [sp, #36]	; 0x24
   12414:	movw	r2, #0
   12418:	cmp	r1, r2
   1241c:	movw	r1, #1
   12420:	str	r1, [sp, #12]
   12424:	beq	12450 <mmk_mock_create_internal@@Base+0x154>
   12428:	ldr	r0, [pc, #208]	; 12500 <mmk_mock_create_internal@@Base+0x204>
   1242c:	add	r1, pc, r0
   12430:	ldr	r0, [sp, #36]	; 0x24
   12434:	add	r0, r0, #1
   12438:	movw	r2, #4
   1243c:	bl	13de4 <mmk_strneq@@Base>
   12440:	cmp	r0, #0
   12444:	movw	r0, #0
   12448:	movne	r0, #1
   1244c:	str	r0, [sp, #12]
   12450:	ldr	r0, [sp, #12]
   12454:	and	r0, r0, #1
   12458:	str	r0, [sp, #24]
   1245c:	ldr	r0, [fp, #-4]
   12460:	ldr	r1, [fp, #-8]
   12464:	ldr	r2, [fp, #-12]
   12468:	bl	1353c <mmk_stub_create@@Base>
   1246c:	ldr	r1, [fp, #-12]
   12470:	str	r0, [r1, #4]
   12474:	ldr	r0, [fp, #-12]
   12478:	ldr	r0, [r0, #4]
   1247c:	movw	r1, #0
   12480:	cmp	r0, r1
   12484:	bne	124ac <mmk_mock_create_internal@@Base+0x1b0>
   12488:	ldr	r0, [pc, #116]	; 12504 <mmk_mock_create_internal@@Base+0x208>
   1248c:	add	r1, pc, r0
   12490:	ldr	r0, [pc, #112]	; 12508 <mmk_mock_create_internal@@Base+0x20c>
   12494:	ldr	r0, [pc, r0]
   12498:	ldr	r0, [r0]
   1249c:	ldr	r2, [fp, #-4]
   124a0:	bl	114ec <fprintf@plt>
   124a4:	str	r0, [sp, #8]
   124a8:	bl	11540 <abort@plt>
   124ac:	ldr	r0, [sp, #24]
   124b0:	cmp	r0, #0
   124b4:	bne	124d4 <mmk_mock_create_internal@@Base+0x1d8>
   124b8:	ldr	r0, [sp, #28]
   124bc:	ldr	r1, [fp, #-8]
   124c0:	ldr	r2, [fp, #-12]
   124c4:	bl	1353c <mmk_stub_create@@Base>
   124c8:	ldr	r1, [fp, #-12]
   124cc:	ldr	r1, [r1, #4]
   124d0:	str	r0, [r1, #36]	; 0x24
   124d4:	ldr	r0, [sp, #28]
   124d8:	bl	1417c <mmk_free@@Base>
   124dc:	ldr	r0, [fp, #-12]
   124e0:	ldr	r0, [r0, #4]
   124e4:	ldr	r0, [r0, #32]
   124e8:	mov	sp, fp
   124ec:	pop	{fp, pc}
   124f0:	ldrdeq	r2, [r0], -r8
   124f4:	andeq	r2, r0, r5, lsl #6
   124f8:	andeq	r2, r0, ip, asr #6
   124fc:	andeq	r2, r1, r4, lsr sp
   12500:	andeq	r2, r0, r8, ror #4
   12504:	andeq	r2, r0, sp, lsl #4
   12508:	andeq	r2, r1, ip, ror #23

0001250c <mmk_mock_destroy_internal@@Base>:
   1250c:	push	{fp, lr}
   12510:	mov	fp, sp
   12514:	sub	sp, sp, #32
   12518:	str	r0, [fp, #-4]
   1251c:	ldr	r0, [fp, #-4]
   12520:	ldr	r0, [r0, #4]
   12524:	str	r0, [fp, #-8]
   12528:	ldr	r0, [fp, #-8]
   1252c:	movw	r1, #0
   12530:	cmp	r0, r1
   12534:	beq	12558 <mmk_mock_destroy_internal@@Base+0x4c>
   12538:	ldr	r0, [fp, #-8]
   1253c:	ldr	r0, [r0, #36]	; 0x24
   12540:	str	r0, [fp, #-12]
   12544:	ldr	r0, [fp, #-8]
   12548:	bl	13608 <mmk_stub_destroy@@Base>
   1254c:	ldr	r0, [fp, #-12]
   12550:	str	r0, [fp, #-8]
   12554:	b	12528 <mmk_mock_destroy_internal@@Base+0x1c>
   12558:	ldr	r0, [fp, #-4]
   1255c:	ldr	r0, [r0, #8]
   12560:	bl	1417c <mmk_free@@Base>
   12564:	ldr	r0, [fp, #-4]
   12568:	ldr	r0, [r0]
   1256c:	str	r0, [sp, #16]
   12570:	ldr	r0, [sp, #16]
   12574:	movw	r1, #0
   12578:	cmp	r0, r1
   1257c:	beq	125dc <mmk_mock_destroy_internal@@Base+0xd0>
   12580:	ldr	r0, [sp, #16]
   12584:	ldr	r0, [r0, #4]
   12588:	str	r0, [sp, #12]
   1258c:	ldr	r0, [sp, #16]
   12590:	ldr	r0, [r0]
   12594:	str	r0, [sp, #8]
   12598:	ldr	r0, [sp, #8]
   1259c:	movw	r1, #0
   125a0:	cmp	r0, r1
   125a4:	beq	125c8 <mmk_mock_destroy_internal@@Base+0xbc>
   125a8:	ldr	r0, [sp, #8]
   125ac:	ldr	r0, [r0, #8]
   125b0:	str	r0, [sp, #4]
   125b4:	ldr	r0, [sp, #8]
   125b8:	bl	1417c <mmk_free@@Base>
   125bc:	ldr	r0, [sp, #4]
   125c0:	str	r0, [sp, #8]
   125c4:	b	12598 <mmk_mock_destroy_internal@@Base+0x8c>
   125c8:	ldr	r0, [sp, #16]
   125cc:	bl	1417c <mmk_free@@Base>
   125d0:	ldr	r0, [sp, #12]
   125d4:	str	r0, [sp, #16]
   125d8:	b	12570 <mmk_mock_destroy_internal@@Base+0x64>
   125dc:	ldr	r0, [fp, #-4]
   125e0:	bl	1417c <mmk_free@@Base>
   125e4:	mov	sp, fp
   125e8:	pop	{fp, pc}

000125ec <mmk_mock_params_begin@@Base>:
   125ec:	sub	sp, sp, #8
   125f0:	str	r0, [sp]
   125f4:	ldr	r0, [sp]
   125f8:	ldr	r0, [r0, #8]
   125fc:	movw	r1, #0
   12600:	cmp	r0, r1
   12604:	beq	12618 <mmk_mock_params_begin@@Base+0x2c>
   12608:	ldr	r0, [sp]
   1260c:	ldr	r0, [r0, #12]
   12610:	cmp	r0, #0
   12614:	bne	12624 <mmk_mock_params_begin@@Base+0x38>
   12618:	movw	r0, #0
   1261c:	str	r0, [sp, #4]
   12620:	b	12634 <mmk_mock_params_begin@@Base+0x48>
   12624:	ldr	r0, [sp]
   12628:	ldr	r0, [r0, #8]
   1262c:	add	r0, r0, #4
   12630:	str	r0, [sp, #4]
   12634:	ldr	r0, [sp, #4]
   12638:	add	sp, sp, #8
   1263c:	bx	lr

00012640 <mmk_mock_params_next@@Base>:
   12640:	sub	sp, sp, #20
   12644:	str	r0, [sp, #12]
   12648:	str	r1, [sp, #8]
   1264c:	ldr	r0, [sp, #8]
   12650:	str	r0, [sp, #4]
   12654:	ldr	r0, [sp, #4]
   12658:	mvn	r1, #3
   1265c:	add	r0, r0, r1
   12660:	ldr	r0, [r0]
   12664:	str	r0, [sp]
   12668:	ldr	r0, [sp]
   1266c:	add	r0, r0, #4
   12670:	ldr	r1, [sp, #4]
   12674:	add	r0, r1, r0
   12678:	str	r0, [sp, #4]
   1267c:	ldr	r0, [sp, #4]
   12680:	ldr	r1, [sp, #12]
   12684:	ldr	r1, [r1, #8]
   12688:	ldr	r2, [sp, #12]
   1268c:	ldr	r2, [r2, #12]
   12690:	add	r1, r1, r2
   12694:	cmp	r0, r1
   12698:	bcc	126a8 <mmk_mock_params_next@@Base+0x68>
   1269c:	movw	r0, #0
   126a0:	str	r0, [sp, #16]
   126a4:	b	126b0 <mmk_mock_params_next@@Base+0x70>
   126a8:	ldr	r0, [sp, #4]
   126ac:	str	r0, [sp, #16]
   126b0:	ldr	r0, [sp, #16]
   126b4:	add	sp, sp, #20
   126b8:	bx	lr

000126bc <mmk_mock_get_params@@Base>:
   126bc:	push	{fp, lr}
   126c0:	mov	fp, sp
   126c4:	sub	sp, sp, #8
   126c8:	bl	1351c <mmk_ctx@@Base>
   126cc:	bl	1326c <mmk_stub_context@@Base>
   126d0:	str	r0, [sp, #4]
   126d4:	ldr	r0, [sp, #4]
   126d8:	ldr	r0, [r0]
   126dc:	mov	sp, fp
   126e0:	pop	{fp, pc}

000126e4 <plt_init_ctx@@Base>:
   126e4:	push	{fp, lr}
   126e8:	mov	fp, sp
   126ec:	ldr	r0, [pc, #48]	; 12724 <plt_init_ctx@@Base+0x40>
   126f0:	add	r0, pc, r0
   126f4:	ldr	r0, [r0]
   126f8:	mvn	r1, #0
   126fc:	cmp	r0, r1
   12700:	bne	12714 <plt_init_ctx@@Base+0x30>
   12704:	bl	12730 <plt_init_ctx@@Base+0x4c>
   12708:	ldr	r1, [pc, #24]	; 12728 <plt_init_ctx@@Base+0x44>
   1270c:	add	r1, pc, r1
   12710:	str	r0, [r1]
   12714:	ldr	r0, [pc, #16]	; 1272c <plt_init_ctx@@Base+0x48>
   12718:	add	r0, pc, r0
   1271c:	ldr	r0, [r0]
   12720:	pop	{fp, pc}
   12724:	ldrdeq	r2, [r1], -r0
   12728:			; <UNDEFINED> instruction: 0x000129b4
   1272c:	andeq	r2, r1, r8, lsr #19
   12730:	push	{fp, lr}
   12734:	mov	fp, sp
   12738:	sub	sp, sp, #24
   1273c:	ldr	r0, [pc, #180]	; 127f8 <plt_init_ctx@@Base+0x114>
   12740:	ldr	r0, [pc, r0]
   12744:	movw	r1, #0
   12748:	str	r1, [fp, #-4]
   1274c:	str	r0, [fp, #-4]
   12750:	ldr	r0, [fp, #-4]
   12754:	cmp	r0, r1
   12758:	bne	127ec <plt_init_ctx@@Base+0x108>
   1275c:	ldr	r0, [pc, #152]	; 127fc <plt_init_ctx@@Base+0x118>
   12760:	ldr	r0, [pc, r0]
   12764:	ldr	r0, [r0]
   12768:	str	r0, [fp, #-8]
   1276c:	ldr	r0, [fp, #-8]
   12770:	add	r1, r0, #4
   12774:	str	r1, [fp, #-8]
   12778:	ldr	r0, [r0]
   1277c:	movw	r1, #0
   12780:	cmp	r0, r1
   12784:	beq	1278c <plt_init_ctx@@Base+0xa8>
   12788:	b	1276c <plt_init_ctx@@Base+0x88>
   1278c:	ldr	r0, [fp, #-8]
   12790:	str	r0, [sp, #12]
   12794:	ldr	r0, [sp, #12]
   12798:	movw	r1, #3
   1279c:	bl	12f2c <plt_get_real_fn@@Base+0x88>
   127a0:	str	r0, [sp, #8]
   127a4:	ldr	r0, [sp, #12]
   127a8:	movw	r1, #4
   127ac:	bl	12f2c <plt_get_real_fn@@Base+0x88>
   127b0:	str	r0, [sp, #4]
   127b4:	ldr	r0, [sp, #8]
   127b8:	cmn	r0, #1
   127bc:	beq	127e8 <plt_init_ctx@@Base+0x104>
   127c0:	ldr	r0, [sp, #4]
   127c4:	cmn	r0, #1
   127c8:	beq	127e8 <plt_init_ctx@@Base+0x104>
   127cc:	ldr	r0, [sp, #8]
   127d0:	ldr	r1, [sp, #4]
   127d4:	bl	12f94 <plt_get_real_fn@@Base+0xf0>
   127d8:	str	r0, [sp]
   127dc:	ldr	r0, [sp]
   127e0:	bl	13010 <plt_get_real_fn@@Base+0x16c>
   127e4:	str	r0, [fp, #-4]
   127e8:	b	127ec <plt_init_ctx@@Base+0x108>
   127ec:	ldr	r0, [fp, #-4]
   127f0:	mov	sp, fp
   127f4:	pop	{fp, pc}
   127f8:	andeq	r2, r1, r4, ror #18
   127fc:	andeq	r2, r1, ip, asr #18

00012800 <plt_get_lib@@Base>:
   12800:	push	{r4, r5, fp, lr}
   12804:	add	fp, sp, #8
   12808:	sub	sp, sp, #80	; 0x50
   1280c:	str	r0, [fp, #-16]
   12810:	str	r1, [fp, #-20]	; 0xffffffec
   12814:	ldr	r0, [fp, #-20]	; 0xffffffec
   12818:	movw	r1, #0
   1281c:	cmp	r0, r1
   12820:	bne	12830 <plt_get_lib@@Base+0x30>
   12824:	ldr	r0, [pc, #904]	; 12bb4 <plt_get_lib@@Base+0x3b4>
   12828:	add	r0, pc, r0
   1282c:	str	r0, [fp, #-20]	; 0xffffffec
   12830:	ldr	r0, [pc, #896]	; 12bb8 <plt_get_lib@@Base+0x3b8>
   12834:	add	r1, pc, r0
   12838:	movw	r0, #0
   1283c:	str	r0, [fp, #-24]	; 0xffffffe8
   12840:	ldr	r0, [fp, #-20]	; 0xffffffec
   12844:	movw	r2, #4
   12848:	bl	11534 <strncmp@plt>
   1284c:	cmp	r0, #0
   12850:	bne	12860 <plt_get_lib@@Base+0x60>
   12854:	movw	r0, #1
   12858:	str	r0, [fp, #-24]	; 0xffffffe8
   1285c:	b	1295c <plt_get_lib@@Base+0x15c>
   12860:	ldr	r0, [pc, #852]	; 12bbc <plt_get_lib@@Base+0x3bc>
   12864:	add	r1, pc, r0
   12868:	ldr	r0, [fp, #-20]	; 0xffffffec
   1286c:	movw	r2, #5
   12870:	bl	11534 <strncmp@plt>
   12874:	cmp	r0, #0
   12878:	bne	12888 <plt_get_lib@@Base+0x88>
   1287c:	movw	r0, #2
   12880:	str	r0, [fp, #-24]	; 0xffffffe8
   12884:	b	12958 <plt_get_lib@@Base+0x158>
   12888:	ldr	r0, [pc, #816]	; 12bc0 <plt_get_lib@@Base+0x3c0>
   1288c:	add	r1, pc, r0
   12890:	ldr	r0, [fp, #-20]	; 0xffffffec
   12894:	movw	r2, #4
   12898:	bl	11534 <strncmp@plt>
   1289c:	cmp	r0, #0
   128a0:	bne	128b0 <plt_get_lib@@Base+0xb0>
   128a4:	movw	r0, #3
   128a8:	str	r0, [fp, #-24]	; 0xffffffe8
   128ac:	b	12954 <plt_get_lib@@Base+0x154>
   128b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   128b4:	ldr	r1, [pc, #808]	; 12be4 <plt_get_lib@@Base+0x3e4>
   128b8:	add	r1, pc, r1
   128bc:	bl	11468 <strcmp@plt>
   128c0:	cmp	r0, #0
   128c4:	bne	128d8 <plt_get_lib@@Base+0xd8>
   128c8:	ldr	r0, [pc, #756]	; 12bc4 <plt_get_lib@@Base+0x3c4>
   128cc:	add	r0, pc, r0
   128d0:	str	r0, [fp, #-20]	; 0xffffffec
   128d4:	b	12950 <plt_get_lib@@Base+0x150>
   128d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   128dc:	movw	r1, #58	; 0x3a
   128e0:	bl	114e0 <strchr@plt>
   128e4:	str	r0, [fp, #-28]	; 0xffffffe4
   128e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128ec:	movw	r1, #0
   128f0:	cmp	r0, r1
   128f4:	beq	12930 <plt_get_lib@@Base+0x130>
   128f8:	ldr	r0, [pc, #732]	; 12bdc <plt_get_lib@@Base+0x3dc>
   128fc:	add	r1, pc, r0
   12900:	ldr	r0, [pc, #728]	; 12be0 <plt_get_lib@@Base+0x3e0>
   12904:	ldr	r0, [pc, r0]
   12908:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1290c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12910:	sub	r2, r2, r3
   12914:	add	r2, r2, #1
   12918:	str	r2, [fp, #-32]	; 0xffffffe0
   1291c:	ldr	r0, [r0]
   12920:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12924:	ldr	r3, [fp, #-20]	; 0xffffffec
   12928:	bl	114ec <fprintf@plt>
   1292c:	b	1294c <plt_get_lib@@Base+0x14c>
   12930:	ldr	r0, [pc, #668]	; 12bd4 <plt_get_lib@@Base+0x3d4>
   12934:	add	r1, pc, r0
   12938:	ldr	r0, [pc, #664]	; 12bd8 <plt_get_lib@@Base+0x3d8>
   1293c:	ldr	r0, [pc, r0]
   12940:	ldr	r0, [r0]
   12944:	ldr	r2, [fp, #-20]	; 0xffffffec
   12948:	bl	114ec <fprintf@plt>
   1294c:	bl	11540 <abort@plt>
   12950:	b	12954 <plt_get_lib@@Base+0x154>
   12954:	b	12958 <plt_get_lib@@Base+0x158>
   12958:	b	1295c <plt_get_lib@@Base+0x15c>
   1295c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12960:	cmp	r0, #0
   12964:	bne	12974 <plt_get_lib@@Base+0x174>
   12968:	ldr	r0, [fp, #-20]	; 0xffffffec
   1296c:	str	r0, [fp, #-72]	; 0xffffffb8
   12970:	b	12988 <plt_get_lib@@Base+0x188>
   12974:	ldr	r0, [fp, #-20]	; 0xffffffec
   12978:	movw	r1, #58	; 0x3a
   1297c:	bl	114e0 <strchr@plt>
   12980:	add	r0, r0, #1
   12984:	str	r0, [fp, #-72]	; 0xffffffb8
   12988:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1298c:	str	r0, [fp, #-36]	; 0xffffffdc
   12990:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12994:	bl	114c8 <strlen@plt>
   12998:	str	r0, [fp, #-40]	; 0xffffffd8
   1299c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   129a0:	ldr	r1, [pc, #576]	; 12be8 <plt_get_lib@@Base+0x3e8>
   129a4:	add	r1, pc, r1
   129a8:	bl	11468 <strcmp@plt>
   129ac:	cmp	r0, #0
   129b0:	movw	r0, #0
   129b4:	movne	r0, #1
   129b8:	mvn	r1, #0
   129bc:	eor	r0, r0, r1
   129c0:	and	r0, r0, #1
   129c4:	str	r0, [fp, #-44]	; 0xffffffd4
   129c8:	ldr	r0, [fp, #-16]
   129cc:	ldr	r0, [r0, #4]
   129d0:	str	r0, [fp, #-48]	; 0xffffffd0
   129d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129d8:	movw	r1, #0
   129dc:	cmp	r0, r1
   129e0:	beq	12ba0 <plt_get_lib@@Base+0x3a0>
   129e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   129e8:	cmp	r0, #1
   129ec:	bne	12b08 <plt_get_lib@@Base+0x308>
   129f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129f4:	cmp	r0, #0
   129f8:	beq	12a4c <plt_get_lib@@Base+0x24c>
   129fc:	ldr	r0, [pc, #456]	; 12bcc <plt_get_lib@@Base+0x3cc>
   12a00:	add	r1, pc, r0
   12a04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12a08:	ldr	r0, [r0, #4]
   12a0c:	bl	1145c <strstr@plt>
   12a10:	movw	r1, #0
   12a14:	cmp	r0, r1
   12a18:	bne	12a3c <plt_get_lib@@Base+0x23c>
   12a1c:	ldr	r0, [pc, #428]	; 12bd0 <plt_get_lib@@Base+0x3d0>
   12a20:	add	r1, pc, r0
   12a24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12a28:	ldr	r0, [r0, #4]
   12a2c:	bl	1145c <strstr@plt>
   12a30:	movw	r1, #0
   12a34:	cmp	r0, r1
   12a38:	beq	12a48 <plt_get_lib@@Base+0x248>
   12a3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12a40:	str	r0, [fp, #-12]
   12a44:	b	12ba8 <plt_get_lib@@Base+0x3a8>
   12a48:	b	12b04 <plt_get_lib@@Base+0x304>
   12a4c:	ldr	r0, [pc, #372]	; 12bc8 <plt_get_lib@@Base+0x3c8>
   12a50:	add	r2, pc, r0
   12a54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12a58:	add	r0, r0, #8
   12a5c:	str	r0, [fp, #-52]	; 0xffffffcc
   12a60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a64:	mov	r1, sp
   12a68:	str	r1, [fp, #-56]	; 0xffffffc8
   12a6c:	add	r1, r0, #7
   12a70:	bic	r1, r1, #7
   12a74:	mov	r3, sp
   12a78:	sub	r1, r3, r1
   12a7c:	mov	sp, r1
   12a80:	str	r0, [fp, #-60]	; 0xffffffc4
   12a84:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a88:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a8c:	str	r0, [fp, #-76]	; 0xffffffb4
   12a90:	mov	r0, r1
   12a94:	ldr	ip, [fp, #-76]	; 0xffffffb4
   12a98:	str	r1, [fp, #-80]	; 0xffffffb0
   12a9c:	mov	r1, ip
   12aa0:	bl	11504 <snprintf@plt>
   12aa4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12aa8:	ldr	r1, [r1, #4]
   12aac:	str	r0, [fp, #-84]	; 0xffffffac
   12ab0:	mov	r0, r1
   12ab4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ab8:	bl	1145c <strstr@plt>
   12abc:	movw	r1, #0
   12ac0:	cmp	r0, r1
   12ac4:	beq	12adc <plt_get_lib@@Base+0x2dc>
   12ac8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12acc:	str	r0, [fp, #-12]
   12ad0:	movw	r0, #1
   12ad4:	str	r0, [fp, #-64]	; 0xffffffc0
   12ad8:	b	12ae4 <plt_get_lib@@Base+0x2e4>
   12adc:	movw	r0, #0
   12ae0:	str	r0, [fp, #-64]	; 0xffffffc0
   12ae4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ae8:	mov	sp, r0
   12aec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12af0:	cmp	r0, #0
   12af4:	beq	12b00 <plt_get_lib@@Base+0x300>
   12af8:	b	12afc <plt_get_lib@@Base+0x2fc>
   12afc:	b	12ba8 <plt_get_lib@@Base+0x3a8>
   12b00:	b	12b04 <plt_get_lib@@Base+0x304>
   12b04:	b	12b8c <plt_get_lib@@Base+0x38c>
   12b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b0c:	cmp	r0, #0
   12b10:	beq	12b20 <plt_get_lib@@Base+0x320>
   12b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b18:	cmp	r0, #2
   12b1c:	bne	12b48 <plt_get_lib@@Base+0x348>
   12b20:	ldr	r0, [fp, #-20]	; 0xffffffec
   12b24:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b28:	ldr	r1, [r1, #4]
   12b2c:	bl	11468 <strcmp@plt>
   12b30:	cmp	r0, #0
   12b34:	bne	12b44 <plt_get_lib@@Base+0x344>
   12b38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b3c:	str	r0, [fp, #-12]
   12b40:	b	12ba8 <plt_get_lib@@Base+0x3a8>
   12b44:	b	12b88 <plt_get_lib@@Base+0x388>
   12b48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b4c:	cmp	r0, #3
   12b50:	bne	12b84 <plt_get_lib@@Base+0x384>
   12b54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12b5c:	bl	12bec <plt_get_lib@@Base+0x3ec>
   12b60:	str	r0, [fp, #-68]	; 0xffffffbc
   12b64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b68:	movw	r1, #0
   12b6c:	cmp	r0, r1
   12b70:	beq	12b80 <plt_get_lib@@Base+0x380>
   12b74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b78:	str	r0, [fp, #-12]
   12b7c:	b	12ba8 <plt_get_lib@@Base+0x3a8>
   12b80:	b	12b84 <plt_get_lib@@Base+0x384>
   12b84:	b	12b88 <plt_get_lib@@Base+0x388>
   12b88:	b	12b8c <plt_get_lib@@Base+0x38c>
   12b8c:	b	12b90 <plt_get_lib@@Base+0x390>
   12b90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b94:	ldr	r0, [r0, #12]
   12b98:	str	r0, [fp, #-48]	; 0xffffffd0
   12b9c:	b	129d4 <plt_get_lib@@Base+0x1d4>
   12ba0:	movw	r0, #0
   12ba4:	str	r0, [fp, #-12]
   12ba8:	ldr	r0, [fp, #-12]
   12bac:	sub	sp, fp, #8
   12bb0:	pop	{r4, r5, fp, pc}
   12bb4:	andeq	r1, r0, ip, ror #28
   12bb8:	muleq	r0, r8, lr
   12bbc:	andeq	r1, r0, sp, ror #28
   12bc0:	andeq	r1, r0, fp, asr #28
   12bc4:	andeq	r1, r0, r4, asr lr
   12bc8:	andeq	r1, r0, r3, ror #25
   12bcc:	andeq	r1, r0, r1, lsr #26
   12bd0:	andeq	r1, r0, sl, lsl #26
   12bd4:	andeq	r1, r0, sl, asr #27
   12bd8:	andeq	r2, r1, r4, asr #14
   12bdc:	andeq	r1, r0, r0, ror #27
   12be0:	andeq	r2, r1, ip, ror r7
   12be4:	ldrdeq	r1, [r0], -ip
   12be8:	andeq	r1, r0, ip, ror #27
   12bec:	push	{fp, lr}
   12bf0:	mov	fp, sp
   12bf4:	sub	sp, sp, #56	; 0x38
   12bf8:	str	r0, [fp, #-8]
   12bfc:	str	r1, [fp, #-12]
   12c00:	ldr	r0, [fp, #-8]
   12c04:	movw	r1, #6
   12c08:	bl	13078 <plt_get_real_fn@@Base+0x1d4>
   12c0c:	str	r0, [fp, #-16]
   12c10:	ldr	r0, [fp, #-8]
   12c14:	movw	r1, #5
   12c18:	bl	13078 <plt_get_real_fn@@Base+0x1d4>
   12c1c:	str	r0, [fp, #-20]	; 0xffffffec
   12c20:	ldr	r0, [fp, #-8]
   12c24:	movw	r1, #20
   12c28:	bl	13124 <plt_get_real_fn@@Base+0x280>
   12c2c:	str	r0, [fp, #-24]	; 0xffffffe8
   12c30:	ldr	r0, [fp, #-8]
   12c34:	movw	r1, #23
   12c38:	bl	13078 <plt_get_real_fn@@Base+0x1d4>
   12c3c:	str	r0, [sp, #28]
   12c40:	ldr	r0, [fp, #-8]
   12c44:	movw	r1, #2
   12c48:	bl	13124 <plt_get_real_fn@@Base+0x280>
   12c4c:	str	r0, [sp, #24]
   12c50:	ldr	r0, [fp, #-8]
   12c54:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c58:	add	r1, r1, #2
   12c5c:	bl	13124 <plt_get_real_fn@@Base+0x280>
   12c60:	str	r0, [sp, #20]
   12c64:	ldr	r0, [fp, #-16]
   12c68:	movw	r1, #0
   12c6c:	cmp	r0, r1
   12c70:	beq	12cb8 <plt_get_lib@@Base+0x4b8>
   12c74:	ldr	r0, [fp, #-20]	; 0xffffffec
   12c78:	movw	r1, #0
   12c7c:	cmp	r0, r1
   12c80:	beq	12cb8 <plt_get_lib@@Base+0x4b8>
   12c84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c88:	cmp	r0, #0
   12c8c:	beq	12cb8 <plt_get_lib@@Base+0x4b8>
   12c90:	ldr	r0, [sp, #28]
   12c94:	movw	r1, #0
   12c98:	cmp	r0, r1
   12c9c:	beq	12cb8 <plt_get_lib@@Base+0x4b8>
   12ca0:	ldr	r0, [sp, #24]
   12ca4:	cmp	r0, #0
   12ca8:	beq	12cb8 <plt_get_lib@@Base+0x4b8>
   12cac:	ldr	r0, [sp, #20]
   12cb0:	cmp	r0, #0
   12cb4:	bne	12cc4 <plt_get_lib@@Base+0x4c4>
   12cb8:	movw	r0, #0
   12cbc:	str	r0, [fp, #-4]
   12cc0:	b	12d28 <plt_get_lib@@Base+0x528>
   12cc4:	ldr	r0, [sp, #28]
   12cc8:	str	r0, [sp, #8]
   12ccc:	ldr	r0, [sp, #24]
   12cd0:	str	r0, [sp, #12]
   12cd4:	ldr	r0, [sp, #20]
   12cd8:	str	r0, [sp, #16]
   12cdc:	ldr	r0, [fp, #-8]
   12ce0:	ldr	r0, [r0]
   12ce4:	str	r0, [sp, #4]
   12ce8:	ldr	r1, [fp, #-16]
   12cec:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cf0:	ldr	r3, [fp, #-12]
   12cf4:	add	r0, sp, #8
   12cf8:	bl	13198 <plt_get_real_fn@@Base+0x2f4>
   12cfc:	str	r0, [sp]
   12d00:	ldr	r0, [sp]
   12d04:	cmp	r0, #0
   12d08:	beq	12d20 <plt_get_lib@@Base+0x520>
   12d0c:	ldr	r0, [sp]
   12d10:	ldr	r1, [sp, #4]
   12d14:	add	r0, r0, r1
   12d18:	str	r0, [fp, #-4]
   12d1c:	b	12d28 <plt_get_lib@@Base+0x528>
   12d20:	movw	r0, #0
   12d24:	str	r0, [fp, #-4]
   12d28:	ldr	r0, [fp, #-4]
   12d2c:	mov	sp, fp
   12d30:	pop	{fp, pc}

00012d34 <plt_get_offsets@@Base>:
   12d34:	push	{fp, lr}
   12d38:	mov	fp, sp
   12d3c:	sub	sp, sp, #32
   12d40:	str	r0, [fp, #-8]
   12d44:	str	r1, [fp, #-12]
   12d48:	str	r2, [sp, #16]
   12d4c:	ldr	r0, [fp, #-8]
   12d50:	ldr	r1, [fp, #-12]
   12d54:	bl	12bec <plt_get_lib@@Base+0x3ec>
   12d58:	str	r0, [sp, #12]
   12d5c:	ldr	r0, [sp, #12]
   12d60:	movw	r1, #0
   12d64:	cmp	r0, r1
   12d68:	beq	12db4 <plt_get_offsets@@Base+0x80>
   12d6c:	movw	r0, #8
   12d70:	bl	140f8 <mmk_malloc@@Base>
   12d74:	str	r0, [sp, #8]
   12d78:	ldr	r0, [sp, #16]
   12d7c:	movw	r1, #1
   12d80:	str	r1, [r0]
   12d84:	ldr	r0, [sp, #8]
   12d88:	ldr	r1, [sp, #12]
   12d8c:	str	r1, [sp]
   12d90:	movw	r1, #0
   12d94:	str	r1, [sp, #4]
   12d98:	ldr	r1, [sp]
   12d9c:	str	r1, [r0]
   12da0:	ldr	r1, [sp, #4]
   12da4:	str	r1, [r0, #4]
   12da8:	ldr	r0, [sp, #8]
   12dac:	str	r0, [fp, #-4]
   12db0:	b	12dbc <plt_get_offsets@@Base+0x88>
   12db4:	movw	r0, #0
   12db8:	str	r0, [fp, #-4]
   12dbc:	ldr	r0, [fp, #-4]
   12dc0:	mov	sp, fp
   12dc4:	pop	{fp, pc}

00012dc8 <plt_set_offsets@@Base>:
   12dc8:	sub	sp, sp, #16
   12dcc:	str	r0, [sp, #12]
   12dd0:	str	r1, [sp, #8]
   12dd4:	str	r2, [sp, #4]
   12dd8:	movw	r0, #0
   12ddc:	str	r0, [sp]
   12de0:	ldr	r0, [sp]
   12de4:	ldr	r1, [sp, #8]
   12de8:	cmp	r0, r1
   12dec:	bcs	12e48 <plt_set_offsets@@Base+0x80>
   12df0:	ldr	r0, [sp, #12]
   12df4:	ldr	r1, [sp]
   12df8:	add	r0, r0, r1, lsl #3
   12dfc:	ldr	r0, [r0, #4]
   12e00:	movw	r1, #0
   12e04:	cmp	r0, r1
   12e08:	bne	12e20 <plt_set_offsets@@Base+0x58>
   12e0c:	ldr	r0, [sp, #12]
   12e10:	ldr	r1, [sp]
   12e14:	ldr	r1, [r0, r1, lsl #3]!
   12e18:	ldr	r1, [r1]
   12e1c:	str	r1, [r0, #4]
   12e20:	ldr	r0, [sp, #4]
   12e24:	ldr	r1, [sp, #12]
   12e28:	ldr	r2, [sp]
   12e2c:	add	r1, r1, r2, lsl #3
   12e30:	ldr	r1, [r1]
   12e34:	str	r0, [r1]
   12e38:	ldr	r0, [sp]
   12e3c:	add	r0, r0, #1
   12e40:	str	r0, [sp]
   12e44:	b	12de0 <plt_set_offsets@@Base+0x18>
   12e48:	add	sp, sp, #16
   12e4c:	bx	lr

00012e50 <plt_reset_offsets@@Base>:
   12e50:	sub	sp, sp, #12
   12e54:	str	r0, [sp, #8]
   12e58:	str	r1, [sp, #4]
   12e5c:	movw	r0, #0
   12e60:	str	r0, [sp]
   12e64:	ldr	r0, [sp]
   12e68:	ldr	r1, [sp, #4]
   12e6c:	cmp	r0, r1
   12e70:	bcs	12e9c <plt_reset_offsets@@Base+0x4c>
   12e74:	ldr	r0, [sp, #8]
   12e78:	ldr	r1, [sp]
   12e7c:	add	r0, r0, r1, lsl #3
   12e80:	ldr	r1, [r0, #4]
   12e84:	ldr	r0, [r0]
   12e88:	str	r1, [r0]
   12e8c:	ldr	r0, [sp]
   12e90:	add	r0, r0, #1
   12e94:	str	r0, [sp]
   12e98:	b	12e64 <plt_reset_offsets@@Base+0x14>
   12e9c:	add	sp, sp, #12
   12ea0:	bx	lr

00012ea4 <plt_get_real_fn@@Base>:
   12ea4:	push	{fp, lr}
   12ea8:	mov	fp, sp
   12eac:	sub	sp, sp, #24
   12eb0:	str	r0, [fp, #-8]
   12eb4:	str	r1, [sp, #12]
   12eb8:	ldr	r0, [fp, #-8]
   12ebc:	ldr	r0, [r0, #4]
   12ec0:	str	r0, [sp, #8]
   12ec4:	ldr	r0, [sp, #8]
   12ec8:	movw	r1, #0
   12ecc:	cmp	r0, r1
   12ed0:	beq	12f18 <plt_get_real_fn@@Base+0x74>
   12ed4:	ldr	r0, [sp, #8]
   12ed8:	ldr	r1, [sp, #12]
   12edc:	bl	12bec <plt_get_lib@@Base+0x3ec>
   12ee0:	str	r0, [sp, #4]
   12ee4:	ldr	r0, [sp, #4]
   12ee8:	movw	r1, #0
   12eec:	cmp	r0, r1
   12ef0:	beq	12f04 <plt_get_real_fn@@Base+0x60>
   12ef4:	ldr	r0, [sp, #4]
   12ef8:	ldr	r0, [r0]
   12efc:	str	r0, [fp, #-4]
   12f00:	b	12f20 <plt_get_real_fn@@Base+0x7c>
   12f04:	b	12f08 <plt_get_real_fn@@Base+0x64>
   12f08:	ldr	r0, [sp, #8]
   12f0c:	ldr	r0, [r0, #12]
   12f10:	str	r0, [sp, #8]
   12f14:	b	12ec4 <plt_get_real_fn@@Base+0x20>
   12f18:	movw	r0, #0
   12f1c:	str	r0, [fp, #-4]
   12f20:	ldr	r0, [fp, #-4]
   12f24:	mov	sp, fp
   12f28:	pop	{fp, pc}
   12f2c:	sub	sp, sp, #12
   12f30:	str	r0, [sp, #4]
   12f34:	str	r1, [sp]
   12f38:	ldr	r0, [sp, #4]
   12f3c:	ldr	r0, [r0]
   12f40:	cmp	r0, #0
   12f44:	beq	12f80 <plt_get_real_fn@@Base+0xdc>
   12f48:	ldr	r0, [sp, #4]
   12f4c:	ldr	r0, [r0]
   12f50:	ldr	r1, [sp]
   12f54:	cmp	r0, r1
   12f58:	bne	12f6c <plt_get_real_fn@@Base+0xc8>
   12f5c:	ldr	r0, [sp, #4]
   12f60:	ldr	r0, [r0, #4]
   12f64:	str	r0, [sp, #8]
   12f68:	b	12f88 <plt_get_real_fn@@Base+0xe4>
   12f6c:	b	12f70 <plt_get_real_fn@@Base+0xcc>
   12f70:	ldr	r0, [sp, #4]
   12f74:	add	r0, r0, #8
   12f78:	str	r0, [sp, #4]
   12f7c:	b	12f38 <plt_get_real_fn@@Base+0x94>
   12f80:	mvn	r0, #0
   12f84:	str	r0, [sp, #8]
   12f88:	ldr	r0, [sp, #8]
   12f8c:	add	sp, sp, #12
   12f90:	bx	lr
   12f94:	sub	sp, sp, #16
   12f98:	str	r0, [sp, #8]
   12f9c:	str	r1, [sp, #4]
   12fa0:	movw	r0, #0
   12fa4:	str	r0, [sp]
   12fa8:	ldr	r0, [sp]
   12fac:	ldr	r1, [sp, #4]
   12fb0:	cmp	r0, r1
   12fb4:	bcs	12ffc <plt_get_real_fn@@Base+0x158>
   12fb8:	ldr	r0, [sp, #8]
   12fbc:	ldr	r1, [sp]
   12fc0:	add	r0, r0, r1, lsl #5
   12fc4:	ldr	r0, [r0]
   12fc8:	cmp	r0, #2
   12fcc:	bne	12fe8 <plt_get_real_fn@@Base+0x144>
   12fd0:	ldr	r0, [sp, #8]
   12fd4:	ldr	r1, [sp]
   12fd8:	add	r0, r0, r1, lsl #5
   12fdc:	ldr	r0, [r0, #8]
   12fe0:	str	r0, [sp, #12]
   12fe4:	b	13004 <plt_get_real_fn@@Base+0x160>
   12fe8:	b	12fec <plt_get_real_fn@@Base+0x148>
   12fec:	ldr	r0, [sp]
   12ff0:	add	r0, r0, #1
   12ff4:	str	r0, [sp]
   12ff8:	b	12fa8 <plt_get_real_fn@@Base+0x104>
   12ffc:	movw	r0, #0
   13000:	str	r0, [sp, #12]
   13004:	ldr	r0, [sp, #12]
   13008:	add	sp, sp, #16
   1300c:	bx	lr
   13010:	sub	sp, sp, #12
   13014:	str	r0, [sp, #4]
   13018:	ldr	r0, [sp, #4]
   1301c:	str	r0, [sp]
   13020:	ldr	r0, [sp]
   13024:	ldr	r0, [r0]
   13028:	cmp	r0, #0
   1302c:	beq	13064 <plt_get_real_fn@@Base+0x1c0>
   13030:	ldr	r0, [sp]
   13034:	ldr	r0, [r0]
   13038:	cmp	r0, #21
   1303c:	bne	13050 <plt_get_real_fn@@Base+0x1ac>
   13040:	ldr	r0, [sp]
   13044:	ldr	r0, [r0, #4]
   13048:	str	r0, [sp, #8]
   1304c:	b	1306c <plt_get_real_fn@@Base+0x1c8>
   13050:	b	13054 <plt_get_real_fn@@Base+0x1b0>
   13054:	ldr	r0, [sp]
   13058:	add	r0, r0, #8
   1305c:	str	r0, [sp]
   13060:	b	13020 <plt_get_real_fn@@Base+0x17c>
   13064:	movw	r0, #0
   13068:	str	r0, [sp, #8]
   1306c:	ldr	r0, [sp, #8]
   13070:	add	sp, sp, #12
   13074:	bx	lr
   13078:	sub	sp, sp, #20
   1307c:	str	r0, [sp, #12]
   13080:	str	r1, [sp, #8]
   13084:	ldr	r0, [sp, #12]
   13088:	ldr	r0, [r0]
   1308c:	str	r0, [sp, #4]
   13090:	ldr	r0, [sp, #12]
   13094:	ldr	r0, [r0, #8]
   13098:	str	r0, [sp]
   1309c:	ldr	r0, [sp]
   130a0:	ldr	r0, [r0]
   130a4:	cmp	r0, #0
   130a8:	beq	13110 <plt_get_real_fn@@Base+0x26c>
   130ac:	ldr	r0, [sp]
   130b0:	ldr	r0, [r0]
   130b4:	ldr	r1, [sp, #8]
   130b8:	cmp	r0, r1
   130bc:	bne	130fc <plt_get_real_fn@@Base+0x258>
   130c0:	ldr	r0, [sp]
   130c4:	ldr	r0, [r0, #4]
   130c8:	ldr	r1, [sp, #4]
   130cc:	cmp	r0, r1
   130d0:	bcc	130e4 <plt_get_real_fn@@Base+0x240>
   130d4:	ldr	r0, [sp]
   130d8:	ldr	r0, [r0, #4]
   130dc:	str	r0, [sp, #16]
   130e0:	b	13118 <plt_get_real_fn@@Base+0x274>
   130e4:	ldr	r0, [sp, #4]
   130e8:	ldr	r1, [sp]
   130ec:	ldr	r1, [r1, #4]
   130f0:	add	r0, r0, r1
   130f4:	str	r0, [sp, #16]
   130f8:	b	13118 <plt_get_real_fn@@Base+0x274>
   130fc:	b	13100 <plt_get_real_fn@@Base+0x25c>
   13100:	ldr	r0, [sp]
   13104:	add	r0, r0, #8
   13108:	str	r0, [sp]
   1310c:	b	1309c <plt_get_real_fn@@Base+0x1f8>
   13110:	movw	r0, #0
   13114:	str	r0, [sp, #16]
   13118:	ldr	r0, [sp, #16]
   1311c:	add	sp, sp, #20
   13120:	bx	lr
   13124:	sub	sp, sp, #16
   13128:	str	r0, [sp, #8]
   1312c:	str	r1, [sp, #4]
   13130:	ldr	r0, [sp, #8]
   13134:	ldr	r0, [r0, #8]
   13138:	str	r0, [sp]
   1313c:	ldr	r0, [sp]
   13140:	ldr	r0, [r0]
   13144:	cmp	r0, #0
   13148:	beq	13184 <plt_get_real_fn@@Base+0x2e0>
   1314c:	ldr	r0, [sp]
   13150:	ldr	r0, [r0]
   13154:	ldr	r1, [sp, #4]
   13158:	cmp	r0, r1
   1315c:	bne	13170 <plt_get_real_fn@@Base+0x2cc>
   13160:	ldr	r0, [sp]
   13164:	ldr	r0, [r0, #4]
   13168:	str	r0, [sp, #12]
   1316c:	b	1318c <plt_get_real_fn@@Base+0x2e8>
   13170:	b	13174 <plt_get_real_fn@@Base+0x2d0>
   13174:	ldr	r0, [sp]
   13178:	add	r0, r0, #8
   1317c:	str	r0, [sp]
   13180:	b	1313c <plt_get_real_fn@@Base+0x298>
   13184:	movw	r0, #0
   13188:	str	r0, [sp, #12]
   1318c:	ldr	r0, [sp, #12]
   13190:	add	sp, sp, #16
   13194:	bx	lr
   13198:	push	{fp, lr}
   1319c:	mov	fp, sp
   131a0:	sub	sp, sp, #32
   131a4:	str	r0, [fp, #-8]
   131a8:	str	r1, [fp, #-12]
   131ac:	str	r2, [sp, #16]
   131b0:	str	r3, [sp, #12]
   131b4:	ldr	r0, [fp, #-8]
   131b8:	ldr	r0, [r0]
   131bc:	str	r0, [sp, #8]
   131c0:	movw	r0, #0
   131c4:	str	r0, [sp, #4]
   131c8:	ldr	r0, [sp, #4]
   131cc:	ldr	r1, [fp, #-8]
   131d0:	ldr	r1, [r1, #4]
   131d4:	ldr	r2, [fp, #-8]
   131d8:	ldr	r2, [r2, #8]
   131dc:	udiv	r1, r1, r2
   131e0:	cmp	r0, r1
   131e4:	bcs	13258 <plt_get_real_fn@@Base+0x3b4>
   131e8:	ldr	r0, [fp, #-12]
   131ec:	ldr	r1, [sp, #8]
   131f0:	ldr	r1, [r1, #4]
   131f4:	lsr	r1, r1, #8
   131f8:	add	r0, r0, r1, lsl #4
   131fc:	str	r0, [sp]
   13200:	ldr	r0, [sp, #16]
   13204:	ldr	r1, [sp]
   13208:	ldr	r1, [r1]
   1320c:	add	r0, r0, r1
   13210:	ldr	r1, [sp, #12]
   13214:	bl	11468 <strcmp@plt>
   13218:	cmp	r0, #0
   1321c:	bne	13230 <plt_get_real_fn@@Base+0x38c>
   13220:	ldr	r0, [sp, #8]
   13224:	ldr	r0, [r0]
   13228:	str	r0, [fp, #-4]
   1322c:	b	13260 <plt_get_real_fn@@Base+0x3bc>
   13230:	b	13234 <plt_get_real_fn@@Base+0x390>
   13234:	ldr	r0, [sp, #4]
   13238:	add	r0, r0, #1
   1323c:	str	r0, [sp, #4]
   13240:	ldr	r0, [sp, #8]
   13244:	ldr	r1, [fp, #-8]
   13248:	ldr	r1, [r1, #8]
   1324c:	add	r0, r0, r1
   13250:	str	r0, [sp, #8]
   13254:	b	131c8 <plt_get_real_fn@@Base+0x324>
   13258:	movw	r0, #0
   1325c:	str	r0, [fp, #-4]
   13260:	ldr	r0, [fp, #-4]
   13264:	mov	sp, fp
   13268:	pop	{fp, pc}

0001326c <mmk_stub_context@@Base>:
   1326c:	sub	sp, sp, #8
   13270:	str	r0, [sp]
   13274:	ldr	r0, [sp]
   13278:	movw	r1, #0
   1327c:	cmp	r0, r1
   13280:	bne	13290 <mmk_stub_context@@Base+0x24>
   13284:	movw	r0, #0
   13288:	str	r0, [sp, #4]
   1328c:	b	1329c <mmk_stub_context@@Base+0x30>
   13290:	ldr	r0, [sp]
   13294:	ldr	r0, [r0, #12]
   13298:	str	r0, [sp, #4]
   1329c:	ldr	r0, [sp, #4]
   132a0:	add	sp, sp, #8
   132a4:	bx	lr

000132a8 <mmk_stub_create_static@@Base>:
   132a8:	push	{fp, lr}
   132ac:	mov	fp, sp
   132b0:	sub	sp, sp, #96	; 0x60
   132b4:	str	r0, [fp, #-8]
   132b8:	str	r1, [fp, #-12]
   132bc:	str	r2, [fp, #-16]
   132c0:	str	r3, [fp, #-20]	; 0xffffffec
   132c4:	ldr	r0, [pc, #456]	; 13494 <mmk_stub_create_static@@Base+0x1ec>
   132c8:	add	r0, pc, r0
   132cc:	bl	11528 <__tls_get_addr@plt>
   132d0:	mov	r1, #0
   132d4:	str	r1, [r0]
   132d8:	ldr	r0, [pc, #440]	; 13498 <mmk_stub_create_static@@Base+0x1f0>
   132dc:	add	r0, pc, r0
   132e0:	str	r1, [sp, #8]
   132e4:	bl	11528 <__tls_get_addr@plt>
   132e8:	ldr	r1, [sp, #8]
   132ec:	str	r1, [r0]
   132f0:	ldr	r0, [fp, #-12]
   132f4:	bl	14044 <mmk_strlen@@Base>
   132f8:	add	r0, r0, #1
   132fc:	bl	140f8 <mmk_malloc@@Base>
   13300:	str	r0, [fp, #-24]	; 0xffffffe8
   13304:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13308:	movw	r1, #0
   1330c:	cmp	r0, r1
   13310:	bne	13320 <mmk_stub_create_static@@Base+0x78>
   13314:	mvn	r0, #11
   13318:	str	r0, [fp, #-4]
   1331c:	b	13488 <mmk_stub_create_static@@Base+0x1e0>
   13320:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13324:	ldr	r1, [fp, #-12]
   13328:	bl	13f48 <mmk_strcpy@@Base>
   1332c:	movw	r1, #0
   13330:	str	r1, [fp, #-28]	; 0xffffffe4
   13334:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13338:	str	r0, [sp, #4]
   1333c:	mov	r0, r1
   13340:	movw	r1, #64	; 0x40
   13344:	bl	13ee4 <mmk_strchr@@Base>
   13348:	str	r0, [fp, #-32]	; 0xffffffe0
   1334c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13350:	movw	r1, #0
   13354:	cmp	r0, r1
   13358:	beq	13374 <mmk_stub_create_static@@Base+0xcc>
   1335c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13360:	movw	r1, #0
   13364:	strb	r1, [r0]
   13368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1336c:	add	r0, r0, #1
   13370:	str	r0, [fp, #-28]	; 0xffffffe4
   13374:	bl	12058 <mmk_plt_ctx@@Base>
   13378:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1337c:	bl	12800 <plt_get_lib@@Base>
   13380:	str	r0, [fp, #-36]	; 0xffffffdc
   13384:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13388:	movw	r1, #0
   1338c:	cmp	r0, r1
   13390:	bne	133a0 <mmk_stub_create_static@@Base+0xf8>
   13394:	mvn	r0, #1
   13398:	str	r0, [fp, #-4]
   1339c:	b	13488 <mmk_stub_create_static@@Base+0x1e0>
   133a0:	movw	r0, #0
   133a4:	str	r0, [fp, #-40]	; 0xffffffd8
   133a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   133ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   133b0:	sub	r2, fp, #40	; 0x28
   133b4:	bl	12d34 <plt_get_offsets@@Base>
   133b8:	str	r0, [fp, #-44]	; 0xffffffd4
   133bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133c0:	movw	r1, #0
   133c4:	cmp	r0, r1
   133c8:	beq	133d8 <mmk_stub_create_static@@Base+0x130>
   133cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   133d0:	cmp	r0, #0
   133d4:	bne	133e4 <mmk_stub_create_static@@Base+0x13c>
   133d8:	mvn	r0, #1
   133dc:	str	r0, [fp, #-4]
   133e0:	b	13488 <mmk_stub_create_static@@Base+0x1e0>
   133e4:	ldr	r0, [pc, #176]	; 1349c <mmk_stub_create_static@@Base+0x1f4>
   133e8:	ldr	r0, [pc, r0]
   133ec:	ldr	r1, [pc, #172]	; 134a0 <mmk_stub_create_static@@Base+0x1f8>
   133f0:	ldr	r1, [pc, r1]
   133f4:	ldr	r2, [pc, #168]	; 134a4 <mmk_stub_create_static@@Base+0x1fc>
   133f8:	ldr	r2, [pc, r2]
   133fc:	ldr	r3, [fp, #-8]
   13400:	str	r2, [sp, #12]
   13404:	str	r1, [sp, #16]
   13408:	str	r0, [sp, #20]
   1340c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13410:	str	r0, [sp, #24]
   13414:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13418:	str	r0, [sp, #28]
   1341c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13420:	str	r0, [sp, #32]
   13424:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13428:	str	r0, [sp, #36]	; 0x24
   1342c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13430:	str	r0, [sp, #40]	; 0x28
   13434:	movw	r0, #0
   13438:	str	r0, [sp, #44]	; 0x2c
   1343c:	str	r0, [sp, #48]	; 0x30
   13440:	add	r0, sp, #12
   13444:	str	r0, [sp]
   13448:	mov	r0, r3
   1344c:	ldr	r1, [sp]
   13450:	movw	r2, #40	; 0x28
   13454:	bl	1148c <memcpy@plt>
   13458:	ldr	r0, [fp, #-8]
   1345c:	ldr	r1, [fp, #-16]
   13460:	bl	13668 <create_trampoline@@Base>
   13464:	ldr	r1, [fp, #-8]
   13468:	str	r0, [r1, #32]
   1346c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13470:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13474:	ldr	r2, [fp, #-8]
   13478:	ldr	r2, [r2, #32]
   1347c:	bl	12dc8 <plt_set_offsets@@Base>
   13480:	movw	r0, #0
   13484:	str	r0, [fp, #-4]
   13488:	ldr	r0, [fp, #-4]
   1348c:	mov	sp, fp
   13490:	pop	{fp, pc}
   13494:	muleq	r1, r4, sp
   13498:	andeq	r1, r1, r8, lsl #27
   1349c:			; <UNDEFINED> instruction: 0x00011cb0
   134a0:	muleq	r1, r8, ip
   134a4:			; <UNDEFINED> instruction: 0x00011cb0

000134a8 <mmk_ctx_asked@@Base>:
   134a8:	push	{fp, lr}
   134ac:	mov	fp, sp
   134b0:	sub	sp, sp, #8
   134b4:	ldr	r0, [pc, #32]	; 134dc <mmk_ctx_asked@@Base+0x34>
   134b8:	add	r0, pc, r0
   134bc:	bl	11528 <__tls_get_addr@plt>
   134c0:	ldr	r1, [r0]
   134c4:	str	r1, [sp, #4]
   134c8:	mov	r1, #0
   134cc:	str	r1, [r0]
   134d0:	ldr	r0, [sp, #4]
   134d4:	mov	sp, fp
   134d8:	pop	{fp, pc}
   134dc:	andeq	r1, r1, r4, lsr #23

000134e0 <mmk_set_ctx@@Base>:
   134e0:	push	{fp, lr}
   134e4:	mov	fp, sp
   134e8:	sub	sp, sp, #8
   134ec:	str	r0, [sp, #4]
   134f0:	ldr	r0, [sp, #4]
   134f4:	ldr	r1, [pc, #28]	; 13518 <mmk_set_ctx@@Base+0x38>
   134f8:	add	r1, pc, r1
   134fc:	str	r0, [sp]
   13500:	mov	r0, r1
   13504:	bl	11528 <__tls_get_addr@plt>
   13508:	ldr	r1, [sp]
   1350c:	str	r1, [r0]
   13510:	mov	sp, fp
   13514:	pop	{fp, pc}
   13518:	andeq	r1, r1, ip, ror #22

0001351c <mmk_ctx@@Base>:
   1351c:	push	{fp, lr}
   13520:	mov	fp, sp
   13524:	ldr	r0, [pc, #12]	; 13538 <mmk_ctx@@Base+0x1c>
   13528:	add	r0, pc, r0
   1352c:	bl	11528 <__tls_get_addr@plt>
   13530:	ldr	r0, [r0]
   13534:	pop	{fp, pc}
   13538:	andeq	r1, r1, ip, lsr fp

0001353c <mmk_stub_create@@Base>:
   1353c:	push	{fp, lr}
   13540:	mov	fp, sp
   13544:	sub	sp, sp, #24
   13548:	str	r0, [fp, #-4]
   1354c:	str	r1, [fp, #-8]
   13550:	str	r2, [sp, #12]
   13554:	bl	11f78 <mmk_init@@Base>
   13558:	movw	r0, #40	; 0x28
   1355c:	bl	140f8 <mmk_malloc@@Base>
   13560:	str	r0, [sp, #8]
   13564:	ldr	r0, [sp, #8]
   13568:	ldr	r1, [fp, #-4]
   1356c:	ldr	r2, [fp, #-8]
   13570:	ldr	r3, [sp, #12]
   13574:	bl	132a8 <mmk_stub_create_static@@Base>
   13578:	str	r0, [sp, #4]
   1357c:	ldr	r0, [sp, #4]
   13580:	cmp	r0, #0
   13584:	bge	135ac <mmk_stub_create@@Base+0x70>
   13588:	ldr	r0, [sp, #8]
   1358c:	bl	1417c <mmk_free@@Base>
   13590:	ldr	r0, [sp, #4]
   13594:	str	r0, [sp]
   13598:	bl	114f8 <__errno_location@plt>
   1359c:	ldr	r1, [sp]
   135a0:	str	r1, [r0]
   135a4:	movw	r0, #0
   135a8:	str	r0, [sp, #8]
   135ac:	ldr	r0, [sp, #8]
   135b0:	mov	sp, fp
   135b4:	pop	{fp, pc}

000135b8 <mmk_stub_destroy_static@@Base>:
   135b8:	push	{fp, lr}
   135bc:	mov	fp, sp
   135c0:	sub	sp, sp, #8
   135c4:	str	r0, [sp, #4]
   135c8:	ldr	r0, [sp, #4]
   135cc:	ldr	r0, [r0, #24]
   135d0:	ldr	r1, [sp, #4]
   135d4:	ldr	r1, [r1, #28]
   135d8:	bl	12e50 <plt_reset_offsets@@Base>
   135dc:	ldr	r0, [sp, #4]
   135e0:	ldr	r0, [r0, #24]
   135e4:	bl	1417c <mmk_free@@Base>
   135e8:	ldr	r0, [sp, #4]
   135ec:	ldr	r0, [r0, #32]
   135f0:	bl	137fc <destroy_trampoline@@Base>
   135f4:	ldr	r0, [sp, #4]
   135f8:	ldr	r0, [r0, #16]
   135fc:	bl	1417c <mmk_free@@Base>
   13600:	mov	sp, fp
   13604:	pop	{fp, pc}

00013608 <mmk_stub_destroy@@Base>:
   13608:	push	{fp, lr}
   1360c:	mov	fp, sp
   13610:	sub	sp, sp, #8
   13614:	str	r0, [sp, #4]
   13618:	ldr	r0, [sp, #4]
   1361c:	bl	135b8 <mmk_stub_destroy_static@@Base>
   13620:	ldr	r0, [sp, #4]
   13624:	bl	1417c <mmk_free@@Base>
   13628:	mov	sp, fp
   1362c:	pop	{fp, pc}

00013630 <mmk_ask_ctx@@Base>:
   13630:	push	{fp, lr}
   13634:	mov	fp, sp
   13638:	sub	sp, sp, #8
   1363c:	str	r0, [sp, #4]
   13640:	ldr	r0, [pc, #28]	; 13664 <mmk_ask_ctx@@Base+0x34>
   13644:	add	r0, pc, r0
   13648:	bl	11528 <__tls_get_addr@plt>
   1364c:	mov	r1, #1
   13650:	str	r1, [r0]
   13654:	ldr	r0, [sp, #4]
   13658:	blx	r0
   1365c:	mov	sp, fp
   13660:	pop	{fp, pc}
   13664:	andeq	r1, r1, r8, lsl sl

00013668 <create_trampoline@@Base>:
   13668:	push	{fp, lr}
   1366c:	mov	fp, sp
   13670:	sub	sp, sp, #56	; 0x38
   13674:	ldr	r2, [pc, #340]	; 137d0 <create_trampoline@@Base+0x168>
   13678:	ldr	r2, [pc, r2]
   1367c:	ldr	r3, [pc, #336]	; 137d4 <create_trampoline@@Base+0x16c>
   13680:	ldr	r3, [pc, r3]
   13684:	sub	r2, r2, r3
   13688:	str	r0, [fp, #-4]
   1368c:	str	r1, [fp, #-8]
   13690:	str	r2, [fp, #-12]
   13694:	ldr	r0, [fp, #-12]
   13698:	cmp	r0, #4096	; 0x1000
   1369c:	bcc	136e4 <create_trampoline@@Base+0x7c>
   136a0:	ldr	r0, [pc, #304]	; 137d8 <create_trampoline@@Base+0x170>
   136a4:	add	r1, pc, r0
   136a8:	ldr	r0, [pc, #300]	; 137dc <create_trampoline@@Base+0x174>
   136ac:	add	r2, pc, r0
   136b0:	ldr	r0, [pc, #296]	; 137e0 <create_trampoline@@Base+0x178>
   136b4:	add	r0, pc, r0
   136b8:	ldr	r3, [pc, #292]	; 137e4 <create_trampoline@@Base+0x17c>
   136bc:	ldr	r3, [pc, r3]
   136c0:	ldr	r3, [r3]
   136c4:	str	r0, [fp, #-20]	; 0xffffffec
   136c8:	mov	r0, r3
   136cc:	movw	r3, #45	; 0x2d
   136d0:	ldr	ip, [fp, #-20]	; 0xffffffec
   136d4:	str	ip, [sp]
   136d8:	bl	114ec <fprintf@plt>
   136dc:	str	r0, [fp, #-24]	; 0xffffffe8
   136e0:	bl	11540 <abort@plt>
   136e4:	b	136e8 <create_trampoline@@Base+0x80>
   136e8:	movw	r0, #0
   136ec:	str	r0, [sp, #28]
   136f0:	movw	r1, #4096	; 0x1000
   136f4:	movw	r2, #7
   136f8:	movw	r3, #34	; 0x22
   136fc:	mvn	ip, #0
   13700:	str	ip, [sp]
   13704:	ldr	ip, [sp, #28]
   13708:	str	ip, [sp, #4]
   1370c:	bl	114d4 <mmap@plt>
   13710:	str	r0, [fp, #-16]
   13714:	ldr	r0, [fp, #-16]
   13718:	mvn	r1, #0
   1371c:	cmp	r0, r1
   13720:	bne	13768 <create_trampoline@@Base+0x100>
   13724:	ldr	r0, [pc, #188]	; 137e8 <create_trampoline@@Base+0x180>
   13728:	add	r1, pc, r0
   1372c:	ldr	r0, [pc, #184]	; 137ec <create_trampoline@@Base+0x184>
   13730:	add	r2, pc, r0
   13734:	ldr	r0, [pc, #180]	; 137f0 <create_trampoline@@Base+0x188>
   13738:	add	r0, pc, r0
   1373c:	ldr	r3, [pc, #176]	; 137f4 <create_trampoline@@Base+0x18c>
   13740:	ldr	r3, [pc, r3]
   13744:	ldr	r3, [r3]
   13748:	str	r0, [sp, #24]
   1374c:	mov	r0, r3
   13750:	movw	r3, #69	; 0x45
   13754:	ldr	ip, [sp, #24]
   13758:	str	ip, [sp]
   1375c:	bl	114ec <fprintf@plt>
   13760:	str	r0, [sp, #20]
   13764:	bl	11540 <abort@plt>
   13768:	b	1376c <create_trampoline@@Base+0x104>
   1376c:	ldr	r0, [pc, #132]	; 137f8 <create_trampoline@@Base+0x190>
   13770:	ldr	r0, [pc, r0]
   13774:	ldr	r1, [fp, #-4]
   13778:	ldr	r2, [fp, #-16]
   1377c:	str	r1, [r2]
   13780:	ldr	r1, [fp, #-8]
   13784:	ldr	r2, [fp, #-16]
   13788:	str	r1, [r2, #4]
   1378c:	ldr	r1, [fp, #-16]
   13790:	add	r1, r1, #8
   13794:	ldr	r2, [fp, #-12]
   13798:	str	r0, [sp, #16]
   1379c:	mov	r0, r1
   137a0:	ldr	r1, [sp, #16]
   137a4:	bl	1148c <memcpy@plt>
   137a8:	ldr	r0, [fp, #-16]
   137ac:	movw	r1, #4096	; 0x1000
   137b0:	movw	r2, #5
   137b4:	bl	11474 <mprotect@plt>
   137b8:	ldr	r1, [fp, #-16]
   137bc:	add	r1, r1, #8
   137c0:	str	r0, [sp, #12]
   137c4:	mov	r0, r1
   137c8:	mov	sp, fp
   137cc:	pop	{fp, pc}
   137d0:	andeq	r1, r1, r4, lsl #20
   137d4:	andeq	r1, r1, r4, lsl #20
   137d8:	andeq	r0, r0, r8, ror #28
   137dc:	muleq	r0, r1, r0
   137e0:	ldrdeq	r1, [r0], -lr
   137e4:	andeq	r1, r1, r4, asr #19
   137e8:	andeq	r0, r0, r4, ror #27
   137ec:	andeq	r1, r0, sp
   137f0:	andeq	r1, r0, r4, ror r0
   137f4:	andeq	r1, r1, r0, asr #18
   137f8:	andeq	r1, r1, r4, lsl r9

000137fc <destroy_trampoline@@Base>:
   137fc:	push	{fp, lr}
   13800:	mov	fp, sp
   13804:	sub	sp, sp, #8
   13808:	str	r0, [sp, #4]
   1380c:	ldr	r0, [sp, #4]
   13810:	mvn	r1, #7
   13814:	add	r0, r0, r1
   13818:	movw	r1, #4096	; 0x1000
   1381c:	bl	11510 <munmap@plt>
   13820:	mov	sp, fp
   13824:	pop	{fp, pc}

00013828 <mmk_verify_set_times@@Base>:
   13828:	push	{fp, lr}
   1382c:	mov	fp, sp
   13830:	sub	sp, sp, #8
   13834:	str	r0, [sp, #4]
   13838:	ldr	r0, [sp, #4]
   1383c:	ldr	r1, [pc, #28]	; 13860 <mmk_verify_set_times@@Base+0x38>
   13840:	add	r1, pc, r1
   13844:	str	r0, [sp]
   13848:	mov	r0, r1
   1384c:	bl	11528 <__tls_get_addr@plt>
   13850:	ldr	r1, [sp]
   13854:	str	r1, [r0]
   13858:	mov	sp, fp
   1385c:	pop	{fp, pc}
   13860:	andeq	r1, r1, ip, lsr #16

00013864 <mmk_verify_times@@Base>:
   13864:	push	{fp, lr}
   13868:	mov	fp, sp
   1386c:	sub	sp, sp, #32
   13870:	str	r0, [fp, #-8]
   13874:	ldr	r0, [pc, #304]	; 139ac <mmk_verify_times@@Base+0x148>
   13878:	add	r0, pc, r0
   1387c:	bl	11528 <__tls_get_addr@plt>
   13880:	ldr	r0, [r0]
   13884:	str	r0, [fp, #-12]
   13888:	ldr	r0, [fp, #-8]
   1388c:	ldr	r0, [r0, #4]
   13890:	cmp	r0, #0
   13894:	beq	138b4 <mmk_verify_times@@Base+0x50>
   13898:	ldr	r0, [fp, #-12]
   1389c:	cmp	r0, #0
   138a0:	movw	r0, #0
   138a4:	moveq	r0, #1
   138a8:	and	r0, r0, #1
   138ac:	str	r0, [fp, #-4]
   138b0:	b	139a0 <mmk_verify_times@@Base+0x13c>
   138b4:	ldr	r0, [fp, #-8]
   138b8:	ldr	r0, [r0, #8]
   138bc:	cmp	r0, #0
   138c0:	bne	138d4 <mmk_verify_times@@Base+0x70>
   138c4:	ldr	r0, [fp, #-8]
   138c8:	ldr	r0, [r0, #12]
   138cc:	cmp	r0, #0
   138d0:	beq	13948 <mmk_verify_times@@Base+0xe4>
   138d4:	ldr	r0, [fp, #-8]
   138d8:	ldr	r0, [r0, #12]
   138dc:	cmp	r0, #0
   138e0:	beq	138f4 <mmk_verify_times@@Base+0x90>
   138e4:	ldr	r0, [fp, #-8]
   138e8:	ldr	r0, [r0, #12]
   138ec:	str	r0, [sp, #12]
   138f0:	b	138fc <mmk_verify_times@@Base+0x98>
   138f4:	ldr	r0, [fp, #-12]
   138f8:	str	r0, [sp, #12]
   138fc:	ldr	r0, [sp, #12]
   13900:	str	r0, [sp, #16]
   13904:	ldr	r0, [fp, #-12]
   13908:	ldr	r1, [fp, #-8]
   1390c:	ldr	r1, [r1, #8]
   13910:	cmp	r0, r1
   13914:	movw	r0, #0
   13918:	str	r0, [sp, #8]
   1391c:	bcc	13938 <mmk_verify_times@@Base+0xd4>
   13920:	ldr	r0, [fp, #-12]
   13924:	ldr	r1, [sp, #16]
   13928:	cmp	r0, r1
   1392c:	movw	r0, #0
   13930:	movls	r0, #1
   13934:	str	r0, [sp, #8]
   13938:	ldr	r0, [sp, #8]
   1393c:	and	r0, r0, #1
   13940:	str	r0, [fp, #-4]
   13944:	b	139a0 <mmk_verify_times@@Base+0x13c>
   13948:	ldr	r0, [fp, #-8]
   1394c:	ldr	r0, [r0, #20]
   13950:	movw	r1, #0
   13954:	cmp	r0, r1
   13958:	beq	13980 <mmk_verify_times@@Base+0x11c>
   1395c:	ldr	r0, [fp, #-8]
   13960:	ldr	r0, [r0, #20]
   13964:	ldr	r1, [fp, #-12]
   13968:	str	r0, [sp, #4]
   1396c:	mov	r0, r1
   13970:	ldr	r1, [sp, #4]
   13974:	blx	r1
   13978:	str	r0, [fp, #-4]
   1397c:	b	139a0 <mmk_verify_times@@Base+0x13c>
   13980:	ldr	r0, [fp, #-8]
   13984:	ldr	r0, [r0, #16]
   13988:	ldr	r1, [fp, #-12]
   1398c:	cmp	r0, r1
   13990:	movw	r0, #0
   13994:	moveq	r0, #1
   13998:	and	r0, r0, #1
   1399c:	str	r0, [fp, #-4]
   139a0:	ldr	r0, [fp, #-4]
   139a4:	mov	sp, fp
   139a8:	pop	{fp, pc}
   139ac:	strdeq	r1, [r1], -r4

000139b0 <mmk_verify_register_call@@Base>:
   139b0:	push	{fp, lr}
   139b4:	mov	fp, sp
   139b8:	sub	sp, sp, #40	; 0x28
   139bc:	str	r0, [fp, #-4]
   139c0:	str	r1, [fp, #-8]
   139c4:	bl	1351c <mmk_ctx@@Base>
   139c8:	bl	1326c <mmk_stub_context@@Base>
   139cc:	str	r0, [fp, #-12]
   139d0:	ldr	r0, [fp, #-12]
   139d4:	ldr	r0, [r0, #8]
   139d8:	movw	r1, #0
   139dc:	cmp	r0, r1
   139e0:	bne	13a5c <mmk_verify_register_call@@Base+0xac>
   139e4:	movw	r0, #4096	; 0x1000
   139e8:	bl	140f8 <mmk_malloc@@Base>
   139ec:	ldr	r1, [fp, #-12]
   139f0:	str	r0, [r1, #8]
   139f4:	ldr	r0, [fp, #-12]
   139f8:	ldr	r0, [r0, #8]
   139fc:	movw	r1, #0
   13a00:	cmp	r0, r1
   13a04:	bne	13a4c <mmk_verify_register_call@@Base+0x9c>
   13a08:	ldr	r0, [pc, #456]	; 13bd8 <mmk_verify_register_call@@Base+0x228>
   13a0c:	add	r1, pc, r0
   13a10:	ldr	r0, [pc, #452]	; 13bdc <mmk_verify_register_call@@Base+0x22c>
   13a14:	add	r2, pc, r0
   13a18:	ldr	r0, [pc, #448]	; 13be0 <mmk_verify_register_call@@Base+0x230>
   13a1c:	add	r0, pc, r0
   13a20:	ldr	r3, [pc, #444]	; 13be4 <mmk_verify_register_call@@Base+0x234>
   13a24:	ldr	r3, [pc, r3]
   13a28:	ldr	r3, [r3]
   13a2c:	str	r0, [sp, #20]
   13a30:	mov	r0, r3
   13a34:	movw	r3, #79	; 0x4f
   13a38:	ldr	ip, [sp, #20]
   13a3c:	str	ip, [sp]
   13a40:	bl	114ec <fprintf@plt>
   13a44:	str	r0, [sp, #16]
   13a48:	bl	11540 <abort@plt>
   13a4c:	b	13a50 <mmk_verify_register_call@@Base+0xa0>
   13a50:	ldr	r0, [fp, #-12]
   13a54:	movw	r1, #4096	; 0x1000
   13a58:	str	r1, [r0, #16]
   13a5c:	ldr	r0, [fp, #-12]
   13a60:	ldr	r1, [fp, #-4]
   13a64:	ldr	r2, [fp, #-8]
   13a68:	bl	13bf8 <mmk_verify_register_call@@Base+0x248>
   13a6c:	cmp	r0, #0
   13a70:	beq	13a78 <mmk_verify_register_call@@Base+0xc8>
   13a74:	b	13bd0 <mmk_verify_register_call@@Base+0x220>
   13a78:	ldr	r0, [fp, #-12]
   13a7c:	ldr	r0, [r0, #12]
   13a80:	ldr	r1, [fp, #-8]
   13a84:	add	r0, r0, r1
   13a88:	add	r0, r0, #4
   13a8c:	ldr	r1, [fp, #-12]
   13a90:	ldr	r1, [r1, #16]
   13a94:	cmp	r0, r1
   13a98:	bcc	13b54 <mmk_verify_register_call@@Base+0x1a4>
   13a9c:	b	13aa0 <mmk_verify_register_call@@Base+0xf0>
   13aa0:	ldr	r0, [fp, #-12]
   13aa4:	ldr	r0, [r0, #12]
   13aa8:	ldr	r1, [fp, #-8]
   13aac:	add	r0, r0, r1
   13ab0:	add	r0, r0, #4
   13ab4:	ldr	r1, [fp, #-12]
   13ab8:	ldr	r1, [r1, #16]
   13abc:	cmp	r0, r1
   13ac0:	bcc	13ad8 <mmk_verify_register_call@@Base+0x128>
   13ac4:	ldr	r0, [fp, #-12]
   13ac8:	ldr	r1, [r0, #16]
   13acc:	add	r1, r1, #4096	; 0x1000
   13ad0:	str	r1, [r0, #16]
   13ad4:	b	13aa0 <mmk_verify_register_call@@Base+0xf0>
   13ad8:	ldr	r0, [fp, #-12]
   13adc:	ldr	r0, [r0, #8]
   13ae0:	ldr	r1, [fp, #-12]
   13ae4:	ldr	r1, [r1, #16]
   13ae8:	bl	14134 <mmk_realloc@@Base>
   13aec:	ldr	r1, [fp, #-12]
   13af0:	str	r0, [r1, #8]
   13af4:	ldr	r0, [fp, #-12]
   13af8:	ldr	r0, [r0, #8]
   13afc:	movw	r1, #0
   13b00:	cmp	r0, r1
   13b04:	bne	13b4c <mmk_verify_register_call@@Base+0x19c>
   13b08:	ldr	r0, [pc, #216]	; 13be8 <mmk_verify_register_call@@Base+0x238>
   13b0c:	add	r1, pc, r0
   13b10:	ldr	r0, [pc, #212]	; 13bec <mmk_verify_register_call@@Base+0x23c>
   13b14:	add	r2, pc, r0
   13b18:	ldr	r0, [pc, #208]	; 13bf0 <mmk_verify_register_call@@Base+0x240>
   13b1c:	add	r0, pc, r0
   13b20:	ldr	r3, [pc, #204]	; 13bf4 <mmk_verify_register_call@@Base+0x244>
   13b24:	ldr	r3, [pc, r3]
   13b28:	ldr	r3, [r3]
   13b2c:	str	r0, [sp, #12]
   13b30:	mov	r0, r3
   13b34:	movw	r3, #91	; 0x5b
   13b38:	ldr	ip, [sp, #12]
   13b3c:	str	ip, [sp]
   13b40:	bl	114ec <fprintf@plt>
   13b44:	str	r0, [sp, #8]
   13b48:	bl	11540 <abort@plt>
   13b4c:	b	13b50 <mmk_verify_register_call@@Base+0x1a0>
   13b50:	b	13b54 <mmk_verify_register_call@@Base+0x1a4>
   13b54:	ldr	r0, [fp, #-12]
   13b58:	ldr	r0, [r0, #8]
   13b5c:	ldr	r1, [fp, #-12]
   13b60:	ldr	r1, [r1, #12]
   13b64:	add	r0, r0, r1
   13b68:	sub	r1, fp, #8
   13b6c:	movw	r2, #4
   13b70:	bl	13d70 <mmk_memcpy@@Base>
   13b74:	ldr	r1, [fp, #-12]
   13b78:	ldr	r1, [r1, #8]
   13b7c:	ldr	r2, [fp, #-12]
   13b80:	ldr	r2, [r2, #12]
   13b84:	add	r1, r1, r2
   13b88:	add	r1, r1, #4
   13b8c:	ldr	r2, [fp, #-4]
   13b90:	ldr	r3, [fp, #-8]
   13b94:	str	r0, [sp, #4]
   13b98:	mov	r0, r1
   13b9c:	mov	r1, r2
   13ba0:	mov	r2, r3
   13ba4:	bl	13d70 <mmk_memcpy@@Base>
   13ba8:	str	r0, [fp, #-16]
   13bac:	ldr	r0, [fp, #-16]
   13bb0:	movw	r1, #1
   13bb4:	str	r1, [r0]
   13bb8:	ldr	r0, [fp, #-8]
   13bbc:	add	r0, r0, #4
   13bc0:	ldr	r1, [fp, #-12]
   13bc4:	ldr	r2, [r1, #12]
   13bc8:	add	r0, r2, r0
   13bcc:	str	r0, [r1, #12]
   13bd0:	mov	sp, fp
   13bd4:	pop	{fp, pc}
   13bd8:	andeq	r0, r0, r0, lsl #22
   13bdc:	andeq	r0, r0, sl, lsr #27
   13be0:	strdeq	r0, [r0], -r3
   13be4:	andeq	r1, r1, ip, asr r6
   13be8:	andeq	r0, r0, r0, lsl #20
   13bec:	andeq	r0, r0, sl, lsr #25
   13bf0:	strdeq	r0, [r0], -r3
   13bf4:	andeq	r1, r1, ip, asr r5
   13bf8:	push	{fp, lr}
   13bfc:	mov	fp, sp
   13c00:	sub	sp, sp, #32
   13c04:	str	r0, [fp, #-8]
   13c08:	str	r1, [fp, #-12]
   13c0c:	str	r2, [sp, #16]
   13c10:	ldr	r0, [fp, #-12]
   13c14:	add	r0, r0, #4
   13c18:	str	r0, [fp, #-12]
   13c1c:	ldr	r0, [sp, #16]
   13c20:	sub	r0, r0, #4
   13c24:	str	r0, [sp, #16]
   13c28:	ldr	r0, [fp, #-8]
   13c2c:	bl	125ec <mmk_mock_params_begin@@Base>
   13c30:	str	r0, [sp, #12]
   13c34:	ldr	r0, [sp, #12]
   13c38:	movw	r1, #0
   13c3c:	cmp	r0, r1
   13c40:	beq	13ca4 <mmk_verify_register_call@@Base+0x2f4>
   13c44:	ldr	r0, [sp, #12]
   13c48:	add	r0, r0, #4
   13c4c:	ldr	r1, [fp, #-12]
   13c50:	ldr	r2, [sp, #16]
   13c54:	bl	13cb8 <mmk_memcmp@@Base>
   13c58:	str	r0, [sp, #8]
   13c5c:	ldr	r0, [sp, #8]
   13c60:	cmp	r0, #0
   13c64:	bne	13c8c <mmk_verify_register_call@@Base+0x2dc>
   13c68:	ldr	r0, [sp, #12]
   13c6c:	str	r0, [sp, #4]
   13c70:	ldr	r0, [sp, #4]
   13c74:	ldr	r1, [r0]
   13c78:	add	r1, r1, #1
   13c7c:	str	r1, [r0]
   13c80:	movw	r0, #1
   13c84:	str	r0, [fp, #-4]
   13c88:	b	13cac <mmk_verify_register_call@@Base+0x2fc>
   13c8c:	b	13c90 <mmk_verify_register_call@@Base+0x2e0>
   13c90:	ldr	r0, [fp, #-8]
   13c94:	ldr	r1, [sp, #12]
   13c98:	bl	12640 <mmk_mock_params_next@@Base>
   13c9c:	str	r0, [sp, #12]
   13ca0:	b	13c34 <mmk_verify_register_call@@Base+0x284>
   13ca4:	movw	r0, #0
   13ca8:	str	r0, [fp, #-4]
   13cac:	ldr	r0, [fp, #-4]
   13cb0:	mov	sp, fp
   13cb4:	pop	{fp, pc}

00013cb8 <mmk_memcmp@@Base>:
   13cb8:	sub	sp, sp, #24
   13cbc:	str	r0, [sp, #16]
   13cc0:	str	r1, [sp, #12]
   13cc4:	str	r2, [sp, #8]
   13cc8:	ldr	r0, [sp, #16]
   13ccc:	str	r0, [sp, #4]
   13cd0:	ldr	r0, [sp, #12]
   13cd4:	str	r0, [sp]
   13cd8:	ldr	r0, [sp, #8]
   13cdc:	cmp	r0, #0
   13ce0:	beq	13d5c <mmk_memcmp@@Base+0xa4>
   13ce4:	ldr	r0, [sp, #4]
   13ce8:	ldrb	r0, [r0]
   13cec:	ldr	r1, [sp]
   13cf0:	ldrb	r1, [r1]
   13cf4:	cmp	r0, r1
   13cf8:	beq	13d2c <mmk_memcmp@@Base+0x74>
   13cfc:	ldr	r0, [sp, #4]
   13d00:	ldrb	r0, [r0]
   13d04:	ldr	r1, [sp]
   13d08:	ldrb	r1, [r1]
   13d0c:	cmp	r0, r1
   13d10:	movw	r0, #0
   13d14:	movlt	r0, #1
   13d18:	tst	r0, #1
   13d1c:	mvn	r0, #0
   13d20:	moveq	r0, #1
   13d24:	str	r0, [sp, #20]
   13d28:	b	13d64 <mmk_memcmp@@Base+0xac>
   13d2c:	b	13d30 <mmk_memcmp@@Base+0x78>
   13d30:	ldr	r0, [sp, #4]
   13d34:	add	r0, r0, #1
   13d38:	str	r0, [sp, #4]
   13d3c:	ldr	r0, [sp]
   13d40:	add	r0, r0, #1
   13d44:	str	r0, [sp]
   13d48:	ldr	r0, [sp, #8]
   13d4c:	mvn	r1, #0
   13d50:	add	r0, r0, r1
   13d54:	str	r0, [sp, #8]
   13d58:	b	13cd8 <mmk_memcmp@@Base+0x20>
   13d5c:	movw	r0, #0
   13d60:	str	r0, [sp, #20]
   13d64:	ldr	r0, [sp, #20]
   13d68:	add	sp, sp, #24
   13d6c:	bx	lr

00013d70 <mmk_memcpy@@Base>:
   13d70:	sub	sp, sp, #20
   13d74:	str	r0, [sp, #16]
   13d78:	str	r1, [sp, #12]
   13d7c:	str	r2, [sp, #8]
   13d80:	ldr	r0, [sp, #12]
   13d84:	str	r0, [sp, #4]
   13d88:	ldr	r0, [sp, #16]
   13d8c:	str	r0, [sp]
   13d90:	ldr	r0, [sp, #8]
   13d94:	cmp	r0, #0
   13d98:	beq	13dd8 <mmk_memcpy@@Base+0x68>
   13d9c:	ldr	r0, [sp, #4]
   13da0:	ldrb	r0, [r0]
   13da4:	ldr	r1, [sp]
   13da8:	strb	r0, [r1]
   13dac:	ldr	r0, [sp]
   13db0:	add	r0, r0, #1
   13db4:	str	r0, [sp]
   13db8:	ldr	r0, [sp, #4]
   13dbc:	add	r0, r0, #1
   13dc0:	str	r0, [sp, #4]
   13dc4:	ldr	r0, [sp, #8]
   13dc8:	mvn	r1, #0
   13dcc:	add	r0, r0, r1
   13dd0:	str	r0, [sp, #8]
   13dd4:	b	13d90 <mmk_memcpy@@Base+0x20>
   13dd8:	ldr	r0, [sp, #16]
   13ddc:	add	sp, sp, #20
   13de0:	bx	lr

00013de4 <mmk_strneq@@Base>:
   13de4:	sub	sp, sp, #24
   13de8:	str	r0, [sp, #16]
   13dec:	str	r1, [sp, #12]
   13df0:	str	r2, [sp, #8]
   13df4:	ldr	r0, [sp, #16]
   13df8:	ldrb	r0, [r0]
   13dfc:	cmp	r0, #0
   13e00:	movw	r0, #0
   13e04:	str	r0, [sp, #4]
   13e08:	beq	13e38 <mmk_strneq@@Base+0x54>
   13e0c:	ldr	r0, [sp, #12]
   13e10:	ldrb	r0, [r0]
   13e14:	cmp	r0, #0
   13e18:	movw	r0, #0
   13e1c:	str	r0, [sp, #4]
   13e20:	beq	13e38 <mmk_strneq@@Base+0x54>
   13e24:	ldr	r0, [sp, #8]
   13e28:	cmp	r0, #0
   13e2c:	movw	r0, #0
   13e30:	movne	r0, #1
   13e34:	str	r0, [sp, #4]
   13e38:	ldr	r0, [sp, #4]
   13e3c:	tst	r0, #1
   13e40:	beq	13e98 <mmk_strneq@@Base+0xb4>
   13e44:	ldr	r0, [sp, #16]
   13e48:	ldrb	r0, [r0]
   13e4c:	ldr	r1, [sp, #12]
   13e50:	ldrb	r1, [r1]
   13e54:	cmp	r0, r1
   13e58:	beq	13e68 <mmk_strneq@@Base+0x84>
   13e5c:	movw	r0, #0
   13e60:	str	r0, [sp, #20]
   13e64:	b	13ed8 <mmk_strneq@@Base+0xf4>
   13e68:	b	13e6c <mmk_strneq@@Base+0x88>
   13e6c:	ldr	r0, [sp, #16]
   13e70:	add	r0, r0, #1
   13e74:	str	r0, [sp, #16]
   13e78:	ldr	r0, [sp, #12]
   13e7c:	add	r0, r0, #1
   13e80:	str	r0, [sp, #12]
   13e84:	ldr	r0, [sp, #8]
   13e88:	mvn	r1, #0
   13e8c:	add	r0, r0, r1
   13e90:	str	r0, [sp, #8]
   13e94:	b	13df4 <mmk_strneq@@Base+0x10>
   13e98:	ldr	r0, [sp, #8]
   13e9c:	cmp	r0, #0
   13ea0:	movw	r0, #1
   13ea4:	str	r0, [sp]
   13ea8:	beq	13ecc <mmk_strneq@@Base+0xe8>
   13eac:	ldr	r0, [sp, #12]
   13eb0:	ldrsb	r0, [r0]
   13eb4:	cmp	r0, #0
   13eb8:	movw	r0, #0
   13ebc:	movne	r0, #1
   13ec0:	mvn	r1, #0
   13ec4:	eor	r0, r0, r1
   13ec8:	str	r0, [sp]
   13ecc:	ldr	r0, [sp]
   13ed0:	and	r0, r0, #1
   13ed4:	str	r0, [sp, #20]
   13ed8:	ldr	r0, [sp, #20]
   13edc:	add	sp, sp, #24
   13ee0:	bx	lr

00013ee4 <mmk_strchr@@Base>:
   13ee4:	sub	sp, sp, #12
   13ee8:	str	r0, [sp, #4]
   13eec:	str	r1, [sp]
   13ef0:	ldr	r0, [sp, #4]
   13ef4:	ldrsb	r0, [r0]
   13ef8:	cmp	r0, #0
   13efc:	beq	13f34 <mmk_strchr@@Base+0x50>
   13f00:	ldr	r0, [sp, #4]
   13f04:	ldrb	r0, [r0]
   13f08:	ldr	r1, [sp]
   13f0c:	cmp	r0, r1
   13f10:	bne	13f20 <mmk_strchr@@Base+0x3c>
   13f14:	ldr	r0, [sp, #4]
   13f18:	str	r0, [sp, #8]
   13f1c:	b	13f3c <mmk_strchr@@Base+0x58>
   13f20:	b	13f24 <mmk_strchr@@Base+0x40>
   13f24:	ldr	r0, [sp, #4]
   13f28:	add	r0, r0, #1
   13f2c:	str	r0, [sp, #4]
   13f30:	b	13ef0 <mmk_strchr@@Base+0xc>
   13f34:	movw	r0, #0
   13f38:	str	r0, [sp, #8]
   13f3c:	ldr	r0, [sp, #8]
   13f40:	add	sp, sp, #12
   13f44:	bx	lr

00013f48 <mmk_strcpy@@Base>:
   13f48:	sub	sp, sp, #8
   13f4c:	str	r0, [sp, #4]
   13f50:	str	r1, [sp]
   13f54:	ldr	r0, [sp]
   13f58:	ldrsb	r0, [r0]
   13f5c:	cmp	r0, #0
   13f60:	beq	13f90 <mmk_strcpy@@Base+0x48>
   13f64:	ldr	r0, [sp]
   13f68:	ldrb	r0, [r0]
   13f6c:	ldr	r1, [sp, #4]
   13f70:	strb	r0, [r1]
   13f74:	ldr	r0, [sp, #4]
   13f78:	add	r0, r0, #1
   13f7c:	str	r0, [sp, #4]
   13f80:	ldr	r0, [sp]
   13f84:	add	r0, r0, #1
   13f88:	str	r0, [sp]
   13f8c:	b	13f54 <mmk_strcpy@@Base+0xc>
   13f90:	ldr	r0, [sp, #4]
   13f94:	movw	r1, #0
   13f98:	strb	r1, [r0]
   13f9c:	ldr	r0, [sp, #4]
   13fa0:	add	sp, sp, #8
   13fa4:	bx	lr

00013fa8 <mmk_strncpy@@Base>:
   13fa8:	sub	sp, sp, #16
   13fac:	str	r0, [sp, #12]
   13fb0:	str	r1, [sp, #8]
   13fb4:	str	r2, [sp, #4]
   13fb8:	ldr	r0, [sp, #8]
   13fbc:	ldrb	r0, [r0]
   13fc0:	cmp	r0, #0
   13fc4:	movw	r0, #0
   13fc8:	str	r0, [sp]
   13fcc:	beq	13fe4 <mmk_strncpy@@Base+0x3c>
   13fd0:	ldr	r0, [sp, #4]
   13fd4:	cmp	r0, #0
   13fd8:	movw	r0, #0
   13fdc:	movne	r0, #1
   13fe0:	str	r0, [sp]
   13fe4:	ldr	r0, [sp]
   13fe8:	tst	r0, #1
   13fec:	beq	1402c <mmk_strncpy@@Base+0x84>
   13ff0:	ldr	r0, [sp, #8]
   13ff4:	ldrb	r0, [r0]
   13ff8:	ldr	r1, [sp, #12]
   13ffc:	strb	r0, [r1]
   14000:	ldr	r0, [sp, #12]
   14004:	add	r0, r0, #1
   14008:	str	r0, [sp, #12]
   1400c:	ldr	r0, [sp, #8]
   14010:	add	r0, r0, #1
   14014:	str	r0, [sp, #8]
   14018:	ldr	r0, [sp, #4]
   1401c:	mvn	r1, #0
   14020:	add	r0, r0, r1
   14024:	str	r0, [sp, #4]
   14028:	b	13fb8 <mmk_strncpy@@Base+0x10>
   1402c:	ldr	r0, [sp, #12]
   14030:	movw	r1, #0
   14034:	strb	r1, [r0]
   14038:	ldr	r0, [sp, #12]
   1403c:	add	sp, sp, #16
   14040:	bx	lr

00014044 <mmk_strlen@@Base>:
   14044:	sub	sp, sp, #8
   14048:	str	r0, [sp, #4]
   1404c:	movw	r0, #0
   14050:	str	r0, [sp]
   14054:	ldr	r0, [sp, #4]
   14058:	ldrsb	r0, [r0]
   1405c:	cmp	r0, #0
   14060:	beq	14084 <mmk_strlen@@Base+0x40>
   14064:	b	14068 <mmk_strlen@@Base+0x24>
   14068:	ldr	r0, [sp]
   1406c:	add	r0, r0, #1
   14070:	str	r0, [sp]
   14074:	ldr	r0, [sp, #4]
   14078:	add	r0, r0, #1
   1407c:	str	r0, [sp, #4]
   14080:	b	14054 <mmk_strlen@@Base+0x10>
   14084:	ldr	r0, [sp]
   14088:	add	sp, sp, #8
   1408c:	bx	lr

00014090 <mmk_isspace@@Base>:
   14090:	sub	sp, sp, #8
   14094:	str	r0, [sp, #4]
   14098:	ldr	r0, [sp, #4]
   1409c:	cmp	r0, #32
   140a0:	movw	r0, #1
   140a4:	str	r0, [sp]
   140a8:	beq	140e8 <mmk_isspace@@Base+0x58>
   140ac:	ldr	r0, [sp, #4]
   140b0:	cmp	r0, #9
   140b4:	movw	r0, #1
   140b8:	str	r0, [sp]
   140bc:	beq	140e8 <mmk_isspace@@Base+0x58>
   140c0:	ldr	r0, [sp, #4]
   140c4:	cmp	r0, #13
   140c8:	movw	r0, #1
   140cc:	str	r0, [sp]
   140d0:	beq	140e8 <mmk_isspace@@Base+0x58>
   140d4:	ldr	r0, [sp, #4]
   140d8:	cmp	r0, #10
   140dc:	movw	r0, #0
   140e0:	moveq	r0, #1
   140e4:	str	r0, [sp]
   140e8:	ldr	r0, [sp]
   140ec:	and	r0, r0, #1
   140f0:	add	sp, sp, #8
   140f4:	bx	lr

000140f8 <mmk_malloc@@Base>:
   140f8:	push	{fp, lr}
   140fc:	mov	fp, sp
   14100:	sub	sp, sp, #8
   14104:	ldr	r1, [pc, #36]	; 14130 <mmk_malloc@@Base+0x38>
   14108:	ldr	r1, [pc, r1]
   1410c:	str	r0, [sp, #4]
   14110:	ldr	r0, [r1]
   14114:	ldr	r1, [sp, #4]
   14118:	str	r0, [sp]
   1411c:	mov	r0, r1
   14120:	ldr	r1, [sp]
   14124:	blx	r1
   14128:	mov	sp, fp
   1412c:	pop	{fp, pc}
   14130:	muleq	r1, r8, pc	; <UNPREDICTABLE>

00014134 <mmk_realloc@@Base>:
   14134:	push	{fp, lr}
   14138:	mov	fp, sp
   1413c:	sub	sp, sp, #16
   14140:	ldr	r2, [pc, #48]	; 14178 <mmk_realloc@@Base+0x44>
   14144:	ldr	r2, [pc, r2]
   14148:	str	r0, [fp, #-4]
   1414c:	str	r1, [sp, #8]
   14150:	ldr	r0, [r2]
   14154:	ldr	r1, [fp, #-4]
   14158:	ldr	r2, [sp, #8]
   1415c:	str	r0, [sp, #4]
   14160:	mov	r0, r1
   14164:	mov	r1, r2
   14168:	ldr	r2, [sp, #4]
   1416c:	blx	r2
   14170:	mov	sp, fp
   14174:	pop	{fp, pc}
   14178:	andeq	r0, r1, r8, asr #30

0001417c <mmk_free@@Base>:
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	sub	sp, sp, #8
   14188:	ldr	r1, [pc, #36]	; 141b4 <mmk_free@@Base+0x38>
   1418c:	ldr	r1, [pc, r1]
   14190:	str	r0, [sp, #4]
   14194:	ldr	r0, [r1]
   14198:	ldr	r1, [sp, #4]
   1419c:	str	r0, [sp]
   141a0:	mov	r0, r1
   141a4:	ldr	r1, [sp]
   141a8:	blx	r1
   141ac:	mov	sp, fp
   141b0:	pop	{fp, pc}
   141b4:	andeq	r0, r1, r0, lsl pc

000141b8 <mmk_init_vital_functions@@Base>:
   141b8:	push	{fp, lr}
   141bc:	mov	fp, sp
   141c0:	sub	sp, sp, #32
   141c4:	str	r0, [fp, #-4]
   141c8:	movw	r0, #0
   141cc:	bl	114a4 <malloc@plt>
   141d0:	movw	r1, #0
   141d4:	bl	11498 <realloc@plt>
   141d8:	bl	11480 <free@plt>
   141dc:	ldr	r0, [pc, #348]	; 14340 <mmk_init_vital_functions@@Base+0x188>
   141e0:	add	r1, pc, r0
   141e4:	ldr	r0, [fp, #-4]
   141e8:	bl	12ea4 <plt_get_real_fn@@Base>
   141ec:	ldr	r1, [pc, #328]	; 1433c <mmk_init_vital_functions@@Base+0x184>
   141f0:	ldr	r1, [pc, r1]
   141f4:	str	r0, [r1]
   141f8:	movw	r1, #0
   141fc:	cmp	r0, r1
   14200:	bne	14248 <mmk_init_vital_functions@@Base+0x90>
   14204:	ldr	r0, [pc, #312]	; 14344 <mmk_init_vital_functions@@Base+0x18c>
   14208:	add	r1, pc, r0
   1420c:	ldr	r0, [pc, #308]	; 14348 <mmk_init_vital_functions@@Base+0x190>
   14210:	add	r2, pc, r0
   14214:	ldr	r0, [pc, #304]	; 1434c <mmk_init_vital_functions@@Base+0x194>
   14218:	add	r0, pc, r0
   1421c:	ldr	r3, [pc, #300]	; 14350 <mmk_init_vital_functions@@Base+0x198>
   14220:	ldr	r3, [pc, r3]
   14224:	ldr	r3, [r3]
   14228:	str	r0, [fp, #-8]
   1422c:	mov	r0, r3
   14230:	movw	r3, #88	; 0x58
   14234:	ldr	ip, [fp, #-8]
   14238:	str	ip, [sp]
   1423c:	bl	114ec <fprintf@plt>
   14240:	str	r0, [fp, #-12]
   14244:	bl	11540 <abort@plt>
   14248:	b	1424c <mmk_init_vital_functions@@Base+0x94>
   1424c:	b	14250 <mmk_init_vital_functions@@Base+0x98>
   14250:	ldr	r0, [pc, #256]	; 14358 <mmk_init_vital_functions@@Base+0x1a0>
   14254:	add	r1, pc, r0
   14258:	ldr	r0, [fp, #-4]
   1425c:	bl	12ea4 <plt_get_real_fn@@Base>
   14260:	ldr	r1, [pc, #236]	; 14354 <mmk_init_vital_functions@@Base+0x19c>
   14264:	ldr	r1, [pc, r1]
   14268:	str	r0, [r1]
   1426c:	movw	r1, #0
   14270:	cmp	r0, r1
   14274:	bne	142bc <mmk_init_vital_functions@@Base+0x104>
   14278:	ldr	r0, [pc, #220]	; 1435c <mmk_init_vital_functions@@Base+0x1a4>
   1427c:	add	r1, pc, r0
   14280:	ldr	r0, [pc, #216]	; 14360 <mmk_init_vital_functions@@Base+0x1a8>
   14284:	add	r2, pc, r0
   14288:	ldr	r0, [pc, #212]	; 14364 <mmk_init_vital_functions@@Base+0x1ac>
   1428c:	add	r0, pc, r0
   14290:	ldr	r3, [pc, #208]	; 14368 <mmk_init_vital_functions@@Base+0x1b0>
   14294:	ldr	r3, [pc, r3]
   14298:	ldr	r3, [r3]
   1429c:	str	r0, [sp, #16]
   142a0:	mov	r0, r3
   142a4:	movw	r3, #89	; 0x59
   142a8:	ldr	ip, [sp, #16]
   142ac:	str	ip, [sp]
   142b0:	bl	114ec <fprintf@plt>
   142b4:	str	r0, [sp, #12]
   142b8:	bl	11540 <abort@plt>
   142bc:	b	142c0 <mmk_init_vital_functions@@Base+0x108>
   142c0:	b	142c4 <mmk_init_vital_functions@@Base+0x10c>
   142c4:	ldr	r0, [pc, #164]	; 14370 <mmk_init_vital_functions@@Base+0x1b8>
   142c8:	add	r1, pc, r0
   142cc:	ldr	r0, [fp, #-4]
   142d0:	bl	12ea4 <plt_get_real_fn@@Base>
   142d4:	ldr	r1, [pc, #144]	; 1436c <mmk_init_vital_functions@@Base+0x1b4>
   142d8:	ldr	r1, [pc, r1]
   142dc:	str	r0, [r1]
   142e0:	movw	r1, #0
   142e4:	cmp	r0, r1
   142e8:	bne	14330 <mmk_init_vital_functions@@Base+0x178>
   142ec:	ldr	r0, [pc, #128]	; 14374 <mmk_init_vital_functions@@Base+0x1bc>
   142f0:	add	r1, pc, r0
   142f4:	ldr	r0, [pc, #124]	; 14378 <mmk_init_vital_functions@@Base+0x1c0>
   142f8:	add	r2, pc, r0
   142fc:	ldr	r0, [pc, #120]	; 1437c <mmk_init_vital_functions@@Base+0x1c4>
   14300:	add	r0, pc, r0
   14304:	ldr	r3, [pc, #116]	; 14380 <mmk_init_vital_functions@@Base+0x1c8>
   14308:	ldr	r3, [pc, r3]
   1430c:	ldr	r3, [r3]
   14310:	str	r0, [sp, #8]
   14314:	mov	r0, r3
   14318:	movw	r3, #90	; 0x5a
   1431c:	ldr	ip, [sp, #8]
   14320:	str	ip, [sp]
   14324:	bl	114ec <fprintf@plt>
   14328:	str	r0, [sp, #4]
   1432c:	bl	11540 <abort@plt>
   14330:	b	14334 <mmk_init_vital_functions@@Base+0x17c>
   14334:	mov	sp, fp
   14338:	pop	{fp, pc}
   1433c:			; <UNDEFINED> instruction: 0x00010eb0
   14340:	andeq	r0, r0, pc, lsr r6
   14344:	andeq	r0, r0, r4, lsl #6
   14348:	andeq	r0, r0, r6, lsl r6
   1434c:	andeq	r0, r0, pc, asr r6
   14350:	andeq	r0, r1, r0, ror #28
   14354:	andeq	r0, r1, r8, lsr #28
   14358:	andeq	r0, r0, r9, asr r6
   1435c:	muleq	r0, r0, r2
   14360:	andeq	r0, r0, r2, lsr #11
   14364:	andeq	r0, r0, r9, lsr #12
   14368:	andeq	r0, r1, ip, ror #27
   1436c:	andeq	r0, r1, r4, asr #27
   14370:	andeq	r0, r0, r5, lsr #12
   14374:	andeq	r0, r0, ip, lsl r2
   14378:	andeq	r0, r0, lr, lsr #10
   1437c:	strdeq	r0, [r0], -r2
   14380:	andeq	r0, r1, r8, ror sp

00014384 <mmk_when_init@@Base>:
   14384:	push	{fp, lr}
   14388:	mov	fp, sp
   1438c:	sub	sp, sp, #8
   14390:	str	r0, [sp, #4]
   14394:	ldr	r0, [sp, #4]
   14398:	ldr	r1, [pc, #28]	; 143bc <mmk_when_init@@Base+0x38>
   1439c:	add	r1, pc, r1
   143a0:	str	r0, [sp]
   143a4:	mov	r0, r1
   143a8:	bl	11528 <__tls_get_addr@plt>
   143ac:	ldr	r1, [sp]
   143b0:	str	r1, [r0]
   143b4:	mov	sp, fp
   143b8:	pop	{fp, pc}
   143bc:	ldrdeq	r0, [r1], -r8

000143c0 <mmk_when_get_result@@Base>:
   143c0:	push	{fp, lr}
   143c4:	mov	fp, sp
   143c8:	ldr	r0, [pc, #12]	; 143dc <mmk_when_get_result@@Base+0x1c>
   143cc:	add	r0, pc, r0
   143d0:	bl	11528 <__tls_get_addr@plt>
   143d4:	ldr	r0, [r0]
   143d8:	pop	{fp, pc}
   143dc:	andeq	r0, r1, r8, lsr #25

000143e0 <mmk_when_impl@@Base>:
   143e0:	push	{fp, lr}
   143e4:	mov	fp, sp
   143e8:	sub	sp, sp, #16
   143ec:	str	r0, [fp, #-4]
   143f0:	str	r1, [sp, #8]
   143f4:	ldr	r0, [sp, #8]
   143f8:	str	r0, [sp, #4]
   143fc:	bl	121d0 <mmk_matcher_ctx@@Base>
   14400:	ldr	r1, [sp, #4]
   14404:	str	r0, [r1]
   14408:	ldr	r0, [fp, #-4]
   1440c:	ldr	r0, [r0]
   14410:	ldr	r1, [sp, #4]
   14414:	str	r0, [r1, #4]
   14418:	ldr	r0, [sp, #4]
   1441c:	ldr	r1, [fp, #-4]
   14420:	str	r0, [r1]
   14424:	mov	sp, fp
   14428:	pop	{fp, pc}

0001442c <mmk_trampoline@@Base>:
   1442c:	sub	ip, pc, #8
   14430:	push	{r0, r1, r2, r3}
   14434:	push	{ip, lr}
   14438:	ldr	r0, [ip, #-8]
   1443c:	ldr	ip, [r0, #4]
   14440:	blx	ip
   14444:	pop	{ip, lr}
   14448:	push	{ip, lr}
   1444c:	ldr	ip, [ip, #-8]
   14450:	ldr	ip, [ip]
   14454:	blx	ip
   14458:	cmp	r0, #0
   1445c:	bne	1446c <mmk_trampoline@@Base+0x40>
   14460:	pop	{ip, lr}
   14464:	pop	{r0, r1, r2, r3}
   14468:	ldr	pc, [ip, #-4]
   1446c:	pop	{ip, lr}
   14470:	pop	{r0, r1, r2, r3}
   14474:	push	{ip, lr}
   14478:	ldr	ip, [ip, #-8]
   1447c:	ldr	ip, [ip, #8]
   14480:	blx	ip
   14484:	pop	{ip, pc}

00014488 <mmk_trampoline_end@@Base>:
   14488:	nop	{0}

0001448c <__libc_csu_init@@Base>:
   1448c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14490:	mov	r7, r0
   14494:	ldr	r6, [pc, #72]	; 144e4 <__libc_csu_init@@Base+0x58>
   14498:	ldr	r5, [pc, #72]	; 144e8 <__libc_csu_init@@Base+0x5c>
   1449c:	add	r6, pc, r6
   144a0:	add	r5, pc, r5
   144a4:	sub	r6, r6, r5
   144a8:	mov	r8, r1
   144ac:	mov	r9, r2
   144b0:	bl	1143c <strstr@plt-0x20>
   144b4:	asrs	r6, r6, #2
   144b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   144bc:	mov	r4, #0
   144c0:	add	r4, r4, #1
   144c4:	ldr	r3, [r5], #4
   144c8:	mov	r2, r9
   144cc:	mov	r1, r8
   144d0:	mov	r0, r7
   144d4:	blx	r3
   144d8:	cmp	r6, r4
   144dc:	bne	144c0 <__libc_csu_init@@Base+0x34>
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144e4:	andeq	r0, r1, r0, asr sl
   144e8:	andeq	r0, r1, r8, asr #20

000144ec <__libc_csu_fini@@Base>:
   144ec:	bx	lr

Disassembly of section .fini:

000144f0 <.fini>:
   144f0:	push	{r3, lr}
   144f4:	pop	{r3, pc}
