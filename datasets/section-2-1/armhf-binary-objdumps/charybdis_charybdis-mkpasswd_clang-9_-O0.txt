
../repos/charybdis/tools/.libs/charybdis-mkpasswd:     file format elf32-littlearm


Disassembly of section .init:

00010708 <.init>:
   10708:	push	{r3, lr}
   1070c:	bl	1086c <sprintf@plt+0x48>
   10710:	pop	{r3, pc}

Disassembly of section .plt:

00010714 <open@plt-0x14>:
   10714:	push	{lr}		; (str lr, [sp, #-4]!)
   10718:	ldr	lr, [pc, #4]	; 10724 <open@plt-0x4>
   1071c:	add	lr, pc, lr
   10720:	ldr	pc, [lr, #8]!
   10724:	ldrdeq	r1, [r1], -ip

00010728 <open@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #69632	; 0x11000
   10730:	ldr	pc, [ip, #2268]!	; 0x8dc

00010734 <abort@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #69632	; 0x11000
   1073c:	ldr	pc, [ip, #2260]!	; 0x8d4

00010740 <srand@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #69632	; 0x11000
   10748:	ldr	pc, [ip, #2252]!	; 0x8cc

0001074c <__libc_start_main@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #69632	; 0x11000
   10754:	ldr	pc, [ip, #2244]!	; 0x8c4

00010758 <__gmon_start__@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #69632	; 0x11000
   10760:	ldr	pc, [ip, #2236]!	; 0x8bc

00010764 <getpass@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #69632	; 0x11000
   1076c:	ldr	pc, [ip, #2228]!	; 0x8b4

00010770 <calloc@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #69632	; 0x11000
   10778:	ldr	pc, [ip, #2220]!	; 0x8ac

0001077c <free@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #69632	; 0x11000
   10784:	ldr	pc, [ip, #2212]!	; 0x8a4

00010788 <read@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #69632	; 0x11000
   10790:	ldr	pc, [ip, #2204]!	; 0x89c

00010794 <strlen@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #69632	; 0x11000
   1079c:	ldr	pc, [ip, #2196]!	; 0x894

000107a0 <getopt@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #69632	; 0x11000
   107a8:	ldr	pc, [ip, #2188]!	; 0x88c

000107ac <printf@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #69632	; 0x11000
   107b4:	ldr	pc, [ip, #2180]!	; 0x884

000107b8 <atoi@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #69632	; 0x11000
   107c0:	ldr	pc, [ip, #2172]!	; 0x87c

000107c4 <time@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #69632	; 0x11000
   107cc:	ldr	pc, [ip, #2164]!	; 0x874

000107d0 <fprintf@plt>:
   107d0:	add	ip, pc, #0, 12
   107d4:	add	ip, ip, #69632	; 0x11000
   107d8:	ldr	pc, [ip, #2156]!	; 0x86c

000107dc <strdup@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #69632	; 0x11000
   107e4:	ldr	pc, [ip, #2148]!	; 0x864

000107e8 <rb_crypt@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #69632	; 0x11000
   107f0:	ldr	pc, [ip, #2140]!	; 0x85c

000107f4 <rand@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #69632	; 0x11000
   107fc:	ldr	pc, [ip, #2132]!	; 0x854

00010800 <strcmp@plt>:
   10800:	add	ip, pc, #0, 12
   10804:	add	ip, ip, #69632	; 0x11000
   10808:	ldr	pc, [ip, #2124]!	; 0x84c

0001080c <exit@plt>:
   1080c:	add	ip, pc, #0, 12
   10810:	add	ip, ip, #69632	; 0x11000
   10814:	ldr	pc, [ip, #2116]!	; 0x844

00010818 <abs@plt>:
   10818:	add	ip, pc, #0, 12
   1081c:	add	ip, ip, #69632	; 0x11000
   10820:	ldr	pc, [ip, #2108]!	; 0x83c

00010824 <sprintf@plt>:
   10824:	add	ip, pc, #0, 12
   10828:	add	ip, ip, #69632	; 0x11000
   1082c:	ldr	pc, [ip, #2100]!	; 0x834

Disassembly of section .text:

00010830 <.text>:
   10830:	mov	fp, #0
   10834:	mov	lr, #0
   10838:	pop	{r1}		; (ldr r1, [sp], #4)
   1083c:	mov	r2, sp
   10840:	push	{r2}		; (str r2, [sp, #-4]!)
   10844:	push	{r0}		; (str r0, [sp, #-4]!)
   10848:	ldr	ip, [pc, #16]	; 10860 <sprintf@plt+0x3c>
   1084c:	push	{ip}		; (str ip, [sp, #-4]!)
   10850:	ldr	r0, [pc, #12]	; 10864 <sprintf@plt+0x40>
   10854:	ldr	r3, [pc, #12]	; 10868 <sprintf@plt+0x44>
   10858:	bl	1074c <__libc_start_main@plt>
   1085c:	bl	10734 <abort@plt>
   10860:	andeq	r1, r1, r0, lsl #16
   10864:	andeq	r0, r1, r0, lsr #18
   10868:	andeq	r1, r1, r0, lsr #15
   1086c:	ldr	r3, [pc, #20]	; 10888 <sprintf@plt+0x64>
   10870:	ldr	r2, [pc, #20]	; 1088c <sprintf@plt+0x68>
   10874:	add	r3, pc, r3
   10878:	ldr	r2, [r3, r2]
   1087c:	cmp	r2, #0
   10880:	bxeq	lr
   10884:	b	10758 <__gmon_start__@plt>
   10888:	andeq	r1, r1, r4, lsl #15
   1088c:	andeq	r0, r0, r4, rrx
   10890:	ldr	r0, [pc, #24]	; 108b0 <sprintf@plt+0x8c>
   10894:	ldr	r3, [pc, #24]	; 108b4 <sprintf@plt+0x90>
   10898:	cmp	r3, r0
   1089c:	bxeq	lr
   108a0:	ldr	r3, [pc, #16]	; 108b8 <sprintf@plt+0x94>
   108a4:	cmp	r3, #0
   108a8:	bxeq	lr
   108ac:	bx	r3
   108b0:	strheq	r2, [r2], -ip
   108b4:	strheq	r2, [r2], -ip
   108b8:	andeq	r0, r0, r0
   108bc:	ldr	r0, [pc, #36]	; 108e8 <sprintf@plt+0xc4>
   108c0:	ldr	r1, [pc, #36]	; 108ec <sprintf@plt+0xc8>
   108c4:	sub	r1, r1, r0
   108c8:	asr	r1, r1, #2
   108cc:	add	r1, r1, r1, lsr #31
   108d0:	asrs	r1, r1, #1
   108d4:	bxeq	lr
   108d8:	ldr	r3, [pc, #16]	; 108f0 <sprintf@plt+0xcc>
   108dc:	cmp	r3, #0
   108e0:	bxeq	lr
   108e4:	bx	r3
   108e8:	strheq	r2, [r2], -ip
   108ec:	strheq	r2, [r2], -ip
   108f0:	andeq	r0, r0, r0
   108f4:	push	{r4, lr}
   108f8:	ldr	r4, [pc, #24]	; 10918 <sprintf@plt+0xf4>
   108fc:	ldrb	r3, [r4]
   10900:	cmp	r3, #0
   10904:	popne	{r4, pc}
   10908:	bl	10890 <sprintf@plt+0x6c>
   1090c:	mov	r3, #1
   10910:	strb	r3, [r4]
   10914:	pop	{r4, pc}
   10918:	strheq	r2, [r2], -r9
   1091c:	b	108bc <sprintf@plt+0x98>
   10920:	push	{fp, lr}
   10924:	mov	fp, sp
   10928:	sub	sp, sp, #56	; 0x38
   1092c:	movw	r2, #0
   10930:	str	r2, [fp, #-4]
   10934:	str	r0, [fp, #-8]
   10938:	str	r1, [fp, #-12]
   1093c:	str	r2, [fp, #-16]
   10940:	str	r2, [fp, #-24]	; 0xffffffe8
   10944:	str	r2, [sp, #16]
   10948:	str	r2, [sp, #12]
   1094c:	str	r2, [sp, #8]
   10950:	ldr	r0, [pc, #1236]	; 10e2c <sprintf@plt+0x608>
   10954:	add	r2, pc, r0
   10958:	ldr	r0, [fp, #-8]
   1095c:	ldr	r1, [fp, #-12]
   10960:	bl	107a0 <getopt@plt>
   10964:	str	r0, [fp, #-20]	; 0xffffffec
   10968:	cmn	r0, #1
   1096c:	beq	10b6c <sprintf@plt+0x348>
   10970:	ldr	r0, [fp, #-20]	; 0xffffffec
   10974:	sub	r0, r0, #63	; 0x3f
   10978:	cmp	r0, #58	; 0x3a
   1097c:	str	r0, [sp, #4]
   10980:	bhi	10b58 <sprintf@plt+0x334>
   10984:	add	r0, pc, #8
   10988:	ldr	r1, [sp, #4]
   1098c:	ldr	r2, [r0, r1, lsl #2]
   10990:	add	pc, r0, r2
   10994:	andeq	r0, r0, r0, asr #3
   10998:	andeq	r0, r0, r4, asr #3
   1099c:	andeq	r0, r0, r4, asr #3
   109a0:	andeq	r0, r0, r4, asr #3
   109a4:	andeq	r0, r0, r4, asr #3
   109a8:	andeq	r0, r0, r4, asr #3
   109ac:	andeq	r0, r0, r4, asr #3
   109b0:	andeq	r0, r0, r4, asr #3
   109b4:	andeq	r0, r0, r4, asr #3
   109b8:	andeq	r0, r0, r4, asr #3
   109bc:	andeq	r0, r0, r4, asr #3
   109c0:	andeq	r0, r0, r4, asr #3
   109c4:	andeq	r0, r0, r4, asr #3
   109c8:	andeq	r0, r0, r4, asr #3
   109cc:	andeq	r0, r0, r4, asr #3
   109d0:	andeq	r0, r0, r4, asr #3
   109d4:	andeq	r0, r0, r4, asr #3
   109d8:	andeq	r0, r0, r4, asr #3
   109dc:	andeq	r0, r0, r4, asr #3
   109e0:	andeq	r0, r0, r4, asr #3
   109e4:	andeq	r0, r0, r4, asr #3
   109e8:	andeq	r0, r0, r4, asr #3
   109ec:	andeq	r0, r0, r4, asr #3
   109f0:	andeq	r0, r0, r4, asr #3
   109f4:	andeq	r0, r0, r4, asr #3
   109f8:	andeq	r0, r0, r4, asr #3
   109fc:	andeq	r0, r0, r4, asr #3
   10a00:	andeq	r0, r0, r4, asr #3
   10a04:	andeq	r0, r0, r4, asr #3
   10a08:	andeq	r0, r0, r4, asr #3
   10a0c:	andeq	r0, r0, r4, asr #3
   10a10:	andeq	r0, r0, r4, asr #3
   10a14:	andeq	r0, r0, r4, asr #3
   10a18:	andeq	r0, r0, r4, asr #3
   10a1c:	andeq	r0, r0, r4, asr #3
   10a20:	strdeq	r0, [r0], -ip
   10a24:	andeq	r0, r0, r4, asr #3
   10a28:	andeq	r0, r0, r4, asr #3
   10a2c:	andeq	r0, r0, r4, asr #3
   10a30:	andeq	r0, r0, r4, asr #3
   10a34:	andeq	r0, r0, r4, asr #3
   10a38:			; <UNDEFINED> instruction: 0x000001bc
   10a3c:	andeq	r0, r0, r4, asr #3
   10a40:	andeq	r0, r0, r4, asr #3
   10a44:	andeq	r0, r0, r4, asr #3
   10a48:	andeq	r0, r0, r4, lsl r1
   10a4c:	andeq	r0, r0, ip, ror #1
   10a50:	andeq	r0, r0, r4, asr #3
   10a54:	andeq	r0, r0, r4, asr #3
   10a58:	andeq	r0, r0, ip, ror r1
   10a5c:	andeq	r0, r0, r4, asr #3
   10a60:	andeq	r0, r0, r8, lsr r1
   10a64:	andeq	r0, r0, ip, asr r1
   10a68:	andeq	r0, r0, r4, asr #3
   10a6c:	andeq	r0, r0, r4, asr #3
   10a70:	andeq	r0, r0, r4, asr #3
   10a74:	andeq	r0, r0, r4, asr #3
   10a78:	muleq	r0, ip, r1
   10a7c:	andeq	r0, r0, ip, lsr #3
   10a80:	ldr	r0, [sp, #16]
   10a84:	orr	r0, r0, #1
   10a88:	str	r0, [sp, #16]
   10a8c:	b	10b68 <sprintf@plt+0x344>
   10a90:	ldr	r0, [sp, #16]
   10a94:	orr	r0, r0, #16
   10a98:	str	r0, [sp, #16]
   10a9c:	movw	r0, #4
   10aa0:	str	r0, [sp, #8]
   10aa4:	b	10b68 <sprintf@plt+0x344>
   10aa8:	ldr	r0, [pc, #952]	; 10e68 <sprintf@plt+0x644>
   10aac:	ldr	r0, [pc, r0]
   10ab0:	ldr	r1, [sp, #16]
   10ab4:	orr	r1, r1, #8
   10ab8:	str	r1, [sp, #16]
   10abc:	ldr	r0, [r0]
   10ac0:	bl	107b8 <atoi@plt>
   10ac4:	str	r0, [sp, #12]
   10ac8:	b	10b68 <sprintf@plt+0x344>
   10acc:	ldr	r0, [pc, #912]	; 10e64 <sprintf@plt+0x640>
   10ad0:	ldr	r0, [pc, r0]
   10ad4:	ldr	r1, [sp, #16]
   10ad8:	orr	r1, r1, #32
   10adc:	str	r1, [sp, #16]
   10ae0:	ldr	r0, [r0]
   10ae4:	bl	107b8 <atoi@plt>
   10ae8:	str	r0, [sp, #8]
   10aec:	b	10b68 <sprintf@plt+0x344>
   10af0:	ldr	r0, [pc, #872]	; 10e60 <sprintf@plt+0x63c>
   10af4:	ldr	r0, [pc, r0]
   10af8:	ldr	r1, [sp, #16]
   10afc:	orr	r1, r1, #2
   10b00:	str	r1, [sp, #16]
   10b04:	ldr	r0, [r0]
   10b08:	str	r0, [fp, #-24]	; 0xffffffe8
   10b0c:	b	10b68 <sprintf@plt+0x344>
   10b10:	ldr	r0, [pc, #836]	; 10e5c <sprintf@plt+0x638>
   10b14:	ldr	r0, [pc, r0]
   10b18:	ldr	r1, [sp, #16]
   10b1c:	orr	r1, r1, #4
   10b20:	str	r1, [sp, #16]
   10b24:	ldr	r0, [r0]
   10b28:	str	r0, [fp, #-16]
   10b2c:	b	10b68 <sprintf@plt+0x344>
   10b30:	ldr	r0, [sp, #16]
   10b34:	orr	r0, r0, #64	; 0x40
   10b38:	str	r0, [sp, #16]
   10b3c:	b	10b68 <sprintf@plt+0x344>
   10b40:	ldr	r0, [sp, #16]
   10b44:	orr	r0, r0, #128	; 0x80
   10b48:	str	r0, [sp, #16]
   10b4c:	b	10b68 <sprintf@plt+0x344>
   10b50:	bl	10e70 <sprintf@plt+0x64c>
   10b54:	bl	10fa4 <sprintf@plt+0x780>
   10b58:	ldr	r0, [pc, #780]	; 10e6c <sprintf@plt+0x648>
   10b5c:	add	r0, pc, r0
   10b60:	ldr	r1, [fp, #-20]	; 0xffffffec
   10b64:	bl	107ac <printf@plt>
   10b68:	b	10950 <sprintf@plt+0x12c>
   10b6c:	ldr	r0, [sp, #16]
   10b70:	and	r0, r0, #1
   10b74:	cmp	r0, #0
   10b78:	beq	10bc0 <sprintf@plt+0x39c>
   10b7c:	ldr	r0, [sp, #12]
   10b80:	cmp	r0, #0
   10b84:	bne	10b90 <sprintf@plt+0x36c>
   10b88:	movw	r0, #8
   10b8c:	str	r0, [sp, #12]
   10b90:	ldr	r0, [sp, #16]
   10b94:	and	r0, r0, #2
   10b98:	cmp	r0, #0
   10b9c:	beq	10bb0 <sprintf@plt+0x38c>
   10ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10ba4:	bl	11060 <sprintf@plt+0x83c>
   10ba8:	str	r0, [sp, #28]
   10bac:	b	10bbc <sprintf@plt+0x398>
   10bb0:	ldr	r0, [sp, #12]
   10bb4:	bl	110ec <sprintf@plt+0x8c8>
   10bb8:	str	r0, [sp, #28]
   10bbc:	b	10cbc <sprintf@plt+0x498>
   10bc0:	ldr	r0, [sp, #16]
   10bc4:	and	r0, r0, #16
   10bc8:	cmp	r0, #0
   10bcc:	beq	10c1c <sprintf@plt+0x3f8>
   10bd0:	ldr	r0, [sp, #12]
   10bd4:	cmp	r0, #0
   10bd8:	bne	10be4 <sprintf@plt+0x3c0>
   10bdc:	movw	r0, #22
   10be0:	str	r0, [sp, #12]
   10be4:	ldr	r0, [sp, #16]
   10be8:	and	r0, r0, #2
   10bec:	cmp	r0, #0
   10bf0:	beq	10c08 <sprintf@plt+0x3e4>
   10bf4:	ldr	r0, [sp, #8]
   10bf8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10bfc:	bl	111a4 <sprintf@plt+0x980>
   10c00:	str	r0, [sp, #28]
   10c04:	b	10c18 <sprintf@plt+0x3f4>
   10c08:	ldr	r0, [sp, #8]
   10c0c:	ldr	r1, [sp, #12]
   10c10:	bl	11264 <sprintf@plt+0xa40>
   10c14:	str	r0, [sp, #28]
   10c18:	b	10cb8 <sprintf@plt+0x494>
   10c1c:	ldr	r0, [sp, #16]
   10c20:	and	r0, r0, #64	; 0x40
   10c24:	cmp	r0, #0
   10c28:	beq	10c70 <sprintf@plt+0x44c>
   10c2c:	ldr	r0, [sp, #12]
   10c30:	cmp	r0, #0
   10c34:	bne	10c40 <sprintf@plt+0x41c>
   10c38:	movw	r0, #16
   10c3c:	str	r0, [sp, #12]
   10c40:	ldr	r0, [sp, #16]
   10c44:	and	r0, r0, #2
   10c48:	cmp	r0, #0
   10c4c:	beq	10c60 <sprintf@plt+0x43c>
   10c50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c54:	bl	11354 <sprintf@plt+0xb30>
   10c58:	str	r0, [sp, #28]
   10c5c:	b	10c6c <sprintf@plt+0x448>
   10c60:	ldr	r0, [sp, #12]
   10c64:	bl	113e0 <sprintf@plt+0xbbc>
   10c68:	str	r0, [sp, #28]
   10c6c:	b	10cb4 <sprintf@plt+0x490>
   10c70:	ldr	r0, [sp, #12]
   10c74:	cmp	r0, #0
   10c78:	bne	10c84 <sprintf@plt+0x460>
   10c7c:	movw	r0, #16
   10c80:	str	r0, [sp, #12]
   10c84:	ldr	r0, [sp, #16]
   10c88:	and	r0, r0, #2
   10c8c:	cmp	r0, #0
   10c90:	beq	10ca4 <sprintf@plt+0x480>
   10c94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c98:	bl	11498 <sprintf@plt+0xc74>
   10c9c:	str	r0, [sp, #28]
   10ca0:	b	10cb0 <sprintf@plt+0x48c>
   10ca4:	ldr	r0, [sp, #12]
   10ca8:	bl	11524 <sprintf@plt+0xd00>
   10cac:	str	r0, [sp, #28]
   10cb0:	b	10cb4 <sprintf@plt+0x490>
   10cb4:	b	10cb8 <sprintf@plt+0x494>
   10cb8:	b	10cbc <sprintf@plt+0x498>
   10cbc:	ldr	r0, [sp, #16]
   10cc0:	and	r0, r0, #4
   10cc4:	cmp	r0, #0
   10cc8:	beq	10d14 <sprintf@plt+0x4f0>
   10ccc:	ldr	r0, [fp, #-16]
   10cd0:	movw	r1, #0
   10cd4:	cmp	r0, r1
   10cd8:	bne	10d00 <sprintf@plt+0x4dc>
   10cdc:	ldr	r0, [pc, #364]	; 10e50 <sprintf@plt+0x62c>
   10ce0:	add	r1, pc, r0
   10ce4:	ldr	r0, [pc, #360]	; 10e54 <sprintf@plt+0x630>
   10ce8:	ldr	r0, [pc, r0]
   10cec:	ldr	r0, [r0]
   10cf0:	bl	107d0 <fprintf@plt>
   10cf4:	movw	r1, #1
   10cf8:	str	r1, [fp, #-4]
   10cfc:	b	10e20 <sprintf@plt+0x5fc>
   10d00:	ldr	r0, [fp, #-16]
   10d04:	ldr	r1, [sp, #28]
   10d08:	bl	107e8 <rb_crypt@plt>
   10d0c:	str	r0, [sp, #24]
   10d10:	b	10e08 <sprintf@plt+0x5e4>
   10d14:	ldr	r0, [pc, #276]	; 10e30 <sprintf@plt+0x60c>
   10d18:	add	r0, pc, r0
   10d1c:	bl	10764 <getpass@plt>
   10d20:	str	r0, [fp, #-16]
   10d24:	ldr	r0, [fp, #-16]
   10d28:	ldr	r1, [sp, #28]
   10d2c:	bl	107e8 <rb_crypt@plt>
   10d30:	str	r0, [sp, #24]
   10d34:	ldr	r0, [sp, #24]
   10d38:	movw	r1, #0
   10d3c:	cmp	r0, r1
   10d40:	bne	10d68 <sprintf@plt+0x544>
   10d44:	ldr	r0, [pc, #232]	; 10e34 <sprintf@plt+0x610>
   10d48:	add	r1, pc, r0
   10d4c:	ldr	r0, [pc, #228]	; 10e38 <sprintf@plt+0x614>
   10d50:	ldr	r0, [pc, r0]
   10d54:	ldr	r0, [r0]
   10d58:	bl	107d0 <fprintf@plt>
   10d5c:	movw	r1, #1
   10d60:	str	r1, [fp, #-4]
   10d64:	b	10e20 <sprintf@plt+0x5fc>
   10d68:	ldr	r0, [sp, #24]
   10d6c:	bl	107dc <strdup@plt>
   10d70:	ldr	r1, [pc, #196]	; 10e3c <sprintf@plt+0x618>
   10d74:	add	r1, pc, r1
   10d78:	str	r0, [sp, #24]
   10d7c:	mov	r0, r1
   10d80:	bl	10764 <getpass@plt>
   10d84:	str	r0, [fp, #-16]
   10d88:	ldr	r0, [fp, #-16]
   10d8c:	ldr	r1, [sp, #28]
   10d90:	bl	107e8 <rb_crypt@plt>
   10d94:	str	r0, [sp, #20]
   10d98:	ldr	r0, [sp, #20]
   10d9c:	movw	r1, #0
   10da0:	cmp	r0, r1
   10da4:	bne	10dcc <sprintf@plt+0x5a8>
   10da8:	ldr	r0, [pc, #144]	; 10e40 <sprintf@plt+0x61c>
   10dac:	add	r1, pc, r0
   10db0:	ldr	r0, [pc, #140]	; 10e44 <sprintf@plt+0x620>
   10db4:	ldr	r0, [pc, r0]
   10db8:	ldr	r0, [r0]
   10dbc:	bl	107d0 <fprintf@plt>
   10dc0:	movw	r1, #1
   10dc4:	str	r1, [fp, #-4]
   10dc8:	b	10e20 <sprintf@plt+0x5fc>
   10dcc:	ldr	r0, [sp, #24]
   10dd0:	ldr	r1, [sp, #20]
   10dd4:	bl	10800 <strcmp@plt>
   10dd8:	cmp	r0, #0
   10ddc:	beq	10e04 <sprintf@plt+0x5e0>
   10de0:	ldr	r0, [pc, #96]	; 10e48 <sprintf@plt+0x624>
   10de4:	add	r1, pc, r0
   10de8:	ldr	r0, [pc, #92]	; 10e4c <sprintf@plt+0x628>
   10dec:	ldr	r0, [pc, r0]
   10df0:	ldr	r0, [r0]
   10df4:	bl	107d0 <fprintf@plt>
   10df8:	movw	r1, #1
   10dfc:	str	r1, [fp, #-4]
   10e00:	b	10e20 <sprintf@plt+0x5fc>
   10e04:	b	10e08 <sprintf@plt+0x5e4>
   10e08:	ldr	r0, [pc, #72]	; 10e58 <sprintf@plt+0x634>
   10e0c:	add	r0, pc, r0
   10e10:	ldr	r1, [sp, #24]
   10e14:	bl	107ac <printf@plt>
   10e18:	movw	r1, #0
   10e1c:	str	r1, [fp, #-4]
   10e20:	ldr	r0, [fp, #-4]
   10e24:	mov	sp, fp
   10e28:	pop	{fp, pc}
   10e2c:			; <UNDEFINED> instruction: 0x00000eb4
   10e30:	andeq	r0, r0, r3, lsr fp
   10e34:	andeq	r0, r0, pc, lsl #22
   10e38:	andeq	r1, r1, r0, lsl r3
   10e3c:	strdeq	r0, [r0], -r6
   10e40:	andeq	r0, r0, fp, lsr #21
   10e44:	andeq	r1, r1, ip, lsr #5
   10e48:	andeq	r0, r0, lr, lsl #21
   10e4c:	andeq	r1, r1, r4, ror r2
   10e50:	andeq	r0, r0, ip, asr #22
   10e54:	andeq	r1, r1, r8, ror r3
   10e58:	andeq	r0, r0, lr, ror sl
   10e5c:	andeq	r1, r1, r0, asr r5
   10e60:	andeq	r1, r1, r0, ror r5
   10e64:	muleq	r1, r4, r5
   10e68:			; <UNDEFINED> instruction: 0x000115b8
   10e6c:			; <UNDEFINED> instruction: 0x00000cbb
   10e70:	push	{fp, lr}
   10e74:	mov	fp, sp
   10e78:	sub	sp, sp, #48	; 0x30
   10e7c:	ldr	r0, [pc, #284]	; 10fa0 <sprintf@plt+0x77c>
   10e80:	add	r0, pc, r0
   10e84:	bl	107ac <printf@plt>
   10e88:	ldr	r1, [pc, #268]	; 10f9c <sprintf@plt+0x778>
   10e8c:	add	r1, pc, r1
   10e90:	str	r0, [fp, #-4]
   10e94:	mov	r0, r1
   10e98:	bl	107ac <printf@plt>
   10e9c:	ldr	r1, [pc, #244]	; 10f98 <sprintf@plt+0x774>
   10ea0:	add	r1, pc, r1
   10ea4:	str	r0, [fp, #-8]
   10ea8:	mov	r0, r1
   10eac:	bl	107ac <printf@plt>
   10eb0:	ldr	r1, [pc, #220]	; 10f94 <sprintf@plt+0x770>
   10eb4:	add	r1, pc, r1
   10eb8:	str	r0, [fp, #-12]
   10ebc:	mov	r0, r1
   10ec0:	bl	107ac <printf@plt>
   10ec4:	ldr	r1, [pc, #196]	; 10f90 <sprintf@plt+0x76c>
   10ec8:	add	r1, pc, r1
   10ecc:	str	r0, [fp, #-16]
   10ed0:	mov	r0, r1
   10ed4:	bl	107ac <printf@plt>
   10ed8:	ldr	r1, [pc, #172]	; 10f8c <sprintf@plt+0x768>
   10edc:	add	r1, pc, r1
   10ee0:	str	r0, [fp, #-20]	; 0xffffffec
   10ee4:	mov	r0, r1
   10ee8:	bl	107ac <printf@plt>
   10eec:	ldr	r1, [pc, #148]	; 10f88 <sprintf@plt+0x764>
   10ef0:	add	r1, pc, r1
   10ef4:	str	r0, [sp, #24]
   10ef8:	mov	r0, r1
   10efc:	bl	107ac <printf@plt>
   10f00:	ldr	r1, [pc, #124]	; 10f84 <sprintf@plt+0x760>
   10f04:	add	r1, pc, r1
   10f08:	str	r0, [sp, #20]
   10f0c:	mov	r0, r1
   10f10:	bl	107ac <printf@plt>
   10f14:	ldr	r1, [pc, #100]	; 10f80 <sprintf@plt+0x75c>
   10f18:	add	r1, pc, r1
   10f1c:	str	r0, [sp, #16]
   10f20:	mov	r0, r1
   10f24:	bl	107ac <printf@plt>
   10f28:	ldr	r1, [pc, #76]	; 10f7c <sprintf@plt+0x758>
   10f2c:	add	r1, pc, r1
   10f30:	str	r0, [sp, #12]
   10f34:	mov	r0, r1
   10f38:	bl	107ac <printf@plt>
   10f3c:	ldr	r1, [pc, #52]	; 10f78 <sprintf@plt+0x754>
   10f40:	add	r1, pc, r1
   10f44:	str	r0, [sp, #8]
   10f48:	mov	r0, r1
   10f4c:	bl	107ac <printf@plt>
   10f50:	ldr	r1, [pc, #28]	; 10f74 <sprintf@plt+0x750>
   10f54:	add	r1, pc, r1
   10f58:	str	r0, [sp, #4]
   10f5c:	mov	r0, r1
   10f60:	bl	107ac <printf@plt>
   10f64:	movw	r1, #0
   10f68:	str	r0, [sp]
   10f6c:	mov	r0, r1
   10f70:	bl	1080c <exit@plt>
   10f74:	andeq	r0, r0, r6, asr #24
   10f78:	andeq	r0, r0, r2, lsr ip
   10f7c:	andeq	r0, r0, ip, lsr #24
   10f80:	andeq	r0, r0, r7, lsl #24
   10f84:	strdeq	r0, [r0], -r1
   10f88:	andeq	r0, r0, lr, asr #23
   10f8c:	andeq	r0, r0, fp, lsr #23
   10f90:	muleq	r0, lr, fp
   10f94:	muleq	r0, r5, fp
   10f98:	andeq	r0, r0, sl, lsl #23
   10f9c:	andeq	r0, r0, pc, ror fp
   10fa0:	andeq	r0, r0, lr, lsr fp
   10fa4:	push	{fp, lr}
   10fa8:	mov	fp, sp
   10fac:	sub	sp, sp, #32
   10fb0:	ldr	r0, [pc, #164]	; 1105c <sprintf@plt+0x838>
   10fb4:	add	r0, pc, r0
   10fb8:	bl	107ac <printf@plt>
   10fbc:	ldr	r1, [pc, #148]	; 11058 <sprintf@plt+0x834>
   10fc0:	add	r1, pc, r1
   10fc4:	str	r0, [fp, #-4]
   10fc8:	mov	r0, r1
   10fcc:	bl	107ac <printf@plt>
   10fd0:	ldr	r1, [pc, #124]	; 11054 <sprintf@plt+0x830>
   10fd4:	add	r1, pc, r1
   10fd8:	str	r0, [fp, #-8]
   10fdc:	mov	r0, r1
   10fe0:	bl	107ac <printf@plt>
   10fe4:	ldr	r1, [pc, #100]	; 11050 <sprintf@plt+0x82c>
   10fe8:	add	r1, pc, r1
   10fec:	str	r0, [fp, #-12]
   10ff0:	mov	r0, r1
   10ff4:	bl	107ac <printf@plt>
   10ff8:	ldr	r1, [pc, #76]	; 1104c <sprintf@plt+0x828>
   10ffc:	add	r1, pc, r1
   11000:	str	r0, [sp, #16]
   11004:	mov	r0, r1
   11008:	bl	107ac <printf@plt>
   1100c:	ldr	r1, [pc, #52]	; 11048 <sprintf@plt+0x824>
   11010:	add	r1, pc, r1
   11014:	str	r0, [sp, #12]
   11018:	mov	r0, r1
   1101c:	bl	107ac <printf@plt>
   11020:	ldr	r1, [pc, #28]	; 11044 <sprintf@plt+0x820>
   11024:	add	r1, pc, r1
   11028:	str	r0, [sp, #8]
   1102c:	mov	r0, r1
   11030:	bl	107ac <printf@plt>
   11034:	movw	r1, #0
   11038:	str	r0, [sp, #4]
   1103c:	mov	r0, r1
   11040:	bl	1080c <exit@plt>
   11044:	andeq	r0, r0, r9, ror #25
   11048:	ldrdeq	r0, [r0], -r6
   1104c:	andeq	r0, r0, ip, lsr #25
   11050:	andeq	r0, r0, pc, ror ip
   11054:	andeq	r0, r0, r2, asr ip
   11058:	andeq	r0, r0, r3, lsr #24
   1105c:	andeq	r0, r0, fp, lsl #24
   11060:	push	{fp, lr}
   11064:	mov	fp, sp
   11068:	sub	sp, sp, #16
   1106c:	str	r0, [fp, #-4]
   11070:	ldr	r0, [fp, #-4]
   11074:	movw	r1, #0
   11078:	cmp	r0, r1
   1107c:	beq	110c0 <sprintf@plt+0x89c>
   11080:	ldr	r0, [fp, #-4]
   11084:	bl	10794 <strlen@plt>
   11088:	cmp	r0, #16
   1108c:	bhi	110c0 <sprintf@plt+0x89c>
   11090:	ldr	r0, [pc, #76]	; 110e4 <sprintf@plt+0x8c0>
   11094:	add	r0, pc, r0
   11098:	ldr	r1, [pc, #72]	; 110e8 <sprintf@plt+0x8c4>
   1109c:	add	r1, pc, r1
   110a0:	ldr	r2, [fp, #-4]
   110a4:	bl	10824 <sprintf@plt>
   110a8:	ldr	r1, [pc, #48]	; 110e0 <sprintf@plt+0x8bc>
   110ac:	add	r1, pc, r1
   110b0:	str	r0, [sp, #8]
   110b4:	mov	r0, r1
   110b8:	mov	sp, fp
   110bc:	pop	{fp, pc}
   110c0:	ldr	r0, [pc, #20]	; 110dc <sprintf@plt+0x8b8>
   110c4:	add	r0, pc, r0
   110c8:	bl	107ac <printf@plt>
   110cc:	movw	r1, #1
   110d0:	str	r0, [sp, #4]
   110d4:	mov	r0, r1
   110d8:	bl	1080c <exit@plt>
   110dc:	ldrdeq	r0, [r0], -r1
   110e0:	andeq	r1, r1, r6
   110e4:	andeq	r1, r1, lr, lsl r0
   110e8:	strdeq	r0, [r0], -r2
   110ec:	push	{fp, lr}
   110f0:	mov	fp, sp
   110f4:	sub	sp, sp, #16
   110f8:	str	r0, [fp, #-4]
   110fc:	ldr	r0, [fp, #-4]
   11100:	cmp	r0, #16
   11104:	ble	11124 <sprintf@plt+0x900>
   11108:	ldr	r0, [pc, #144]	; 111a0 <sprintf@plt+0x97c>
   1110c:	add	r0, pc, r0
   11110:	bl	107ac <printf@plt>
   11114:	movw	r1, #0
   11118:	str	r0, [sp, #8]
   1111c:	mov	r0, r1
   11120:	bl	1080c <exit@plt>
   11124:	ldr	r0, [pc, #112]	; 1119c <sprintf@plt+0x978>
   11128:	add	r0, pc, r0
   1112c:	add	r1, r0, #3
   11130:	movw	r2, #36	; 0x24
   11134:	strb	r2, [r0]
   11138:	movw	r3, #49	; 0x31
   1113c:	strb	r3, [r0, #1]
   11140:	strb	r2, [r0, #2]
   11144:	ldr	r0, [fp, #-4]
   11148:	str	r0, [sp, #4]
   1114c:	mov	r0, r1
   11150:	ldr	r1, [sp, #4]
   11154:	bl	115dc <sprintf@plt+0xdb8>
   11158:	ldr	r1, [pc, #56]	; 11198 <sprintf@plt+0x974>
   1115c:	add	r1, pc, r1
   11160:	ldr	r2, [fp, #-4]
   11164:	add	r2, r2, #3
   11168:	add	r2, r1, r2
   1116c:	movw	r3, #36	; 0x24
   11170:	strb	r3, [r2]
   11174:	ldr	r2, [fp, #-4]
   11178:	add	r2, r2, #4
   1117c:	add	r2, r1, r2
   11180:	movw	r3, #0
   11184:	strb	r3, [r2]
   11188:	str	r0, [sp]
   1118c:	mov	r0, r1
   11190:	mov	sp, fp
   11194:	pop	{fp, pc}
   11198:	andeq	r0, r1, fp, ror #30
   1119c:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   111a0:	andeq	r0, r0, fp, asr #15
   111a4:	push	{fp, lr}
   111a8:	mov	fp, sp
   111ac:	sub	sp, sp, #24
   111b0:	str	r0, [fp, #-4]
   111b4:	str	r1, [fp, #-8]
   111b8:	ldr	r0, [fp, #-8]
   111bc:	movw	r1, #0
   111c0:	cmp	r0, r1
   111c4:	beq	11234 <sprintf@plt+0xa10>
   111c8:	ldr	r0, [fp, #-8]
   111cc:	bl	10794 <strlen@plt>
   111d0:	cmp	r0, #22
   111d4:	bhi	11234 <sprintf@plt+0xa10>
   111d8:	ldr	r0, [pc, #128]	; 11260 <sprintf@plt+0xa3c>
   111dc:	add	r1, pc, r0
   111e0:	sub	r0, fp, #11
   111e4:	ldr	r2, [fp, #-4]
   111e8:	bl	10824 <sprintf@plt>
   111ec:	ldr	r1, [pc, #100]	; 11258 <sprintf@plt+0xa34>
   111f0:	add	r1, pc, r1
   111f4:	ldr	r2, [pc, #96]	; 1125c <sprintf@plt+0xa38>
   111f8:	add	r2, pc, r2
   111fc:	sub	r3, fp, #11
   11200:	ldr	ip, [fp, #-8]
   11204:	str	r0, [sp, #8]
   11208:	mov	r0, r1
   1120c:	mov	r1, r2
   11210:	mov	r2, r3
   11214:	mov	r3, ip
   11218:	bl	10824 <sprintf@plt>
   1121c:	ldr	r1, [pc, #48]	; 11254 <sprintf@plt+0xa30>
   11220:	add	r1, pc, r1
   11224:	str	r0, [sp, #4]
   11228:	mov	r0, r1
   1122c:	mov	sp, fp
   11230:	pop	{fp, pc}
   11234:	ldr	r0, [pc, #20]	; 11250 <sprintf@plt+0xa2c>
   11238:	add	r0, pc, r0
   1123c:	bl	107ac <printf@plt>
   11240:	movw	r1, #1
   11244:	str	r0, [sp]
   11248:	mov	r0, r1
   1124c:	bl	1080c <exit@plt>
   11250:	andeq	r0, r0, sp, lsl r7
   11254:	andeq	r0, r1, r0, lsl pc
   11258:	andeq	r0, r1, r0, asr #30
   1125c:	andeq	r0, r0, r2, asr r7
   11260:	andeq	r0, r0, r9, ror #14
   11264:	push	{fp, lr}
   11268:	mov	fp, sp
   1126c:	sub	sp, sp, #32
   11270:	str	r0, [fp, #-4]
   11274:	str	r1, [fp, #-8]
   11278:	ldr	r0, [fp, #-8]
   1127c:	cmp	r0, #22
   11280:	ble	112a0 <sprintf@plt+0xa7c>
   11284:	ldr	r0, [pc, #196]	; 11350 <sprintf@plt+0xb2c>
   11288:	add	r0, pc, r0
   1128c:	bl	107ac <printf@plt>
   11290:	movw	r1, #0
   11294:	str	r0, [sp, #16]
   11298:	mov	r0, r1
   1129c:	bl	1080c <exit@plt>
   112a0:	ldr	r0, [pc, #164]	; 1134c <sprintf@plt+0xb28>
   112a4:	add	r1, pc, r0
   112a8:	sub	r0, fp, #11
   112ac:	ldr	r2, [fp, #-4]
   112b0:	bl	10824 <sprintf@plt>
   112b4:	ldr	r1, [pc, #136]	; 11344 <sprintf@plt+0xb20>
   112b8:	add	r1, pc, r1
   112bc:	ldr	r2, [pc, #132]	; 11348 <sprintf@plt+0xb24>
   112c0:	add	r2, pc, r2
   112c4:	sub	r3, fp, #11
   112c8:	str	r0, [sp, #12]
   112cc:	mov	r0, r1
   112d0:	mov	r1, r2
   112d4:	mov	r2, r3
   112d8:	bl	10824 <sprintf@plt>
   112dc:	ldr	r1, [pc, #92]	; 11340 <sprintf@plt+0xb1c>
   112e0:	add	r1, pc, r1
   112e4:	add	r1, r1, #7
   112e8:	ldr	r2, [fp, #-8]
   112ec:	str	r0, [sp, #8]
   112f0:	mov	r0, r1
   112f4:	mov	r1, r2
   112f8:	bl	115dc <sprintf@plt+0xdb8>
   112fc:	ldr	r1, [pc, #56]	; 1133c <sprintf@plt+0xb18>
   11300:	add	r1, pc, r1
   11304:	ldr	r2, [fp, #-8]
   11308:	add	r2, r2, #7
   1130c:	add	r2, r1, r2
   11310:	movw	r3, #36	; 0x24
   11314:	strb	r3, [r2]
   11318:	ldr	r2, [fp, #-8]
   1131c:	add	r2, r2, #8
   11320:	add	r2, r1, r2
   11324:	movw	r3, #0
   11328:	strb	r3, [r2]
   1132c:	str	r0, [sp, #4]
   11330:	mov	r0, r1
   11334:	mov	sp, fp
   11338:	pop	{fp, pc}
   1133c:	andeq	r0, r1, pc, asr #28
   11340:	andeq	r0, r1, pc, ror #28
   11344:	muleq	r1, r7, lr
   11348:	strdeq	r0, [r0], -r6
   1134c:	andeq	r0, r0, r1, lsr #13
   11350:	andeq	r0, r0, pc, lsl #14
   11354:	push	{fp, lr}
   11358:	mov	fp, sp
   1135c:	sub	sp, sp, #16
   11360:	str	r0, [fp, #-4]
   11364:	ldr	r0, [fp, #-4]
   11368:	movw	r1, #0
   1136c:	cmp	r0, r1
   11370:	beq	113b4 <sprintf@plt+0xb90>
   11374:	ldr	r0, [fp, #-4]
   11378:	bl	10794 <strlen@plt>
   1137c:	cmp	r0, #16
   11380:	bhi	113b4 <sprintf@plt+0xb90>
   11384:	ldr	r0, [pc, #76]	; 113d8 <sprintf@plt+0xbb4>
   11388:	add	r0, pc, r0
   1138c:	ldr	r1, [pc, #72]	; 113dc <sprintf@plt+0xbb8>
   11390:	add	r1, pc, r1
   11394:	ldr	r2, [fp, #-4]
   11398:	bl	10824 <sprintf@plt>
   1139c:	ldr	r1, [pc, #48]	; 113d4 <sprintf@plt+0xbb0>
   113a0:	add	r1, pc, r1
   113a4:	str	r0, [sp, #8]
   113a8:	mov	r0, r1
   113ac:	mov	sp, fp
   113b0:	pop	{fp, pc}
   113b4:	ldr	r0, [pc, #20]	; 113d0 <sprintf@plt+0xbac>
   113b8:	add	r0, pc, r0
   113bc:	bl	107ac <printf@plt>
   113c0:	movw	r1, #1
   113c4:	str	r0, [sp, #4]
   113c8:	mov	r0, r1
   113cc:	bl	1080c <exit@plt>
   113d0:	ldrdeq	r0, [r0], -sp
   113d4:	andeq	r0, r1, ip, lsr sp
   113d8:	andeq	r0, r1, r4, asr sp
   113dc:	andeq	r0, r0, sp, ror #10
   113e0:	push	{fp, lr}
   113e4:	mov	fp, sp
   113e8:	sub	sp, sp, #16
   113ec:	str	r0, [fp, #-4]
   113f0:	ldr	r0, [fp, #-4]
   113f4:	cmp	r0, #16
   113f8:	ble	11418 <sprintf@plt+0xbf4>
   113fc:	ldr	r0, [pc, #144]	; 11494 <sprintf@plt+0xc70>
   11400:	add	r0, pc, r0
   11404:	bl	107ac <printf@plt>
   11408:	movw	r1, #0
   1140c:	str	r0, [sp, #8]
   11410:	mov	r0, r1
   11414:	bl	1080c <exit@plt>
   11418:	ldr	r0, [pc, #112]	; 11490 <sprintf@plt+0xc6c>
   1141c:	add	r0, pc, r0
   11420:	add	r1, r0, #3
   11424:	movw	r2, #36	; 0x24
   11428:	strb	r2, [r0]
   1142c:	movw	r3, #53	; 0x35
   11430:	strb	r3, [r0, #1]
   11434:	strb	r2, [r0, #2]
   11438:	ldr	r0, [fp, #-4]
   1143c:	str	r0, [sp, #4]
   11440:	mov	r0, r1
   11444:	ldr	r1, [sp, #4]
   11448:	bl	115dc <sprintf@plt+0xdb8>
   1144c:	ldr	r1, [pc, #56]	; 1148c <sprintf@plt+0xc68>
   11450:	add	r1, pc, r1
   11454:	ldr	r2, [fp, #-4]
   11458:	add	r2, r2, #3
   1145c:	add	r2, r1, r2
   11460:	movw	r3, #36	; 0x24
   11464:	strb	r3, [r2]
   11468:	ldr	r2, [fp, #-4]
   1146c:	add	r2, r2, #4
   11470:	add	r2, r1, r2
   11474:	movw	r3, #0
   11478:	strb	r3, [r2]
   1147c:	str	r0, [sp]
   11480:	mov	r0, r1
   11484:	mov	sp, fp
   11488:	pop	{fp, pc}
   1148c:			; <UNDEFINED> instruction: 0x00010cb6
   11490:	andeq	r0, r1, sl, ror #25
   11494:	andeq	r0, r0, fp, lsl #10
   11498:	push	{fp, lr}
   1149c:	mov	fp, sp
   114a0:	sub	sp, sp, #16
   114a4:	str	r0, [fp, #-4]
   114a8:	ldr	r0, [fp, #-4]
   114ac:	movw	r1, #0
   114b0:	cmp	r0, r1
   114b4:	beq	114f8 <sprintf@plt+0xcd4>
   114b8:	ldr	r0, [fp, #-4]
   114bc:	bl	10794 <strlen@plt>
   114c0:	cmp	r0, #16
   114c4:	bhi	114f8 <sprintf@plt+0xcd4>
   114c8:	ldr	r0, [pc, #76]	; 1151c <sprintf@plt+0xcf8>
   114cc:	add	r0, pc, r0
   114d0:	ldr	r1, [pc, #72]	; 11520 <sprintf@plt+0xcfc>
   114d4:	add	r1, pc, r1
   114d8:	ldr	r2, [fp, #-4]
   114dc:	bl	10824 <sprintf@plt>
   114e0:	ldr	r1, [pc, #48]	; 11518 <sprintf@plt+0xcf4>
   114e4:	add	r1, pc, r1
   114e8:	str	r0, [sp, #8]
   114ec:	mov	r0, r1
   114f0:	mov	sp, fp
   114f4:	pop	{fp, pc}
   114f8:	ldr	r0, [pc, #20]	; 11514 <sprintf@plt+0xcf0>
   114fc:	add	r0, pc, r0
   11500:	bl	107ac <printf@plt>
   11504:	movw	r1, #1
   11508:	str	r0, [sp, #4]
   1150c:	mov	r0, r1
   11510:	bl	1080c <exit@plt>
   11514:	muleq	r0, r9, r3
   11518:	andeq	r0, r1, sp, lsl #24
   1151c:	andeq	r0, r1, r5, lsr #24
   11520:	andeq	r0, r0, r0, lsr r4
   11524:	push	{fp, lr}
   11528:	mov	fp, sp
   1152c:	sub	sp, sp, #16
   11530:	str	r0, [fp, #-4]
   11534:	ldr	r0, [fp, #-4]
   11538:	cmp	r0, #16
   1153c:	ble	1155c <sprintf@plt+0xd38>
   11540:	ldr	r0, [pc, #144]	; 115d8 <sprintf@plt+0xdb4>
   11544:	add	r0, pc, r0
   11548:	bl	107ac <printf@plt>
   1154c:	movw	r1, #0
   11550:	str	r0, [sp, #8]
   11554:	mov	r0, r1
   11558:	bl	1080c <exit@plt>
   1155c:	ldr	r0, [pc, #112]	; 115d4 <sprintf@plt+0xdb0>
   11560:	add	r0, pc, r0
   11564:	add	r1, r0, #3
   11568:	movw	r2, #36	; 0x24
   1156c:	strb	r2, [r0]
   11570:	movw	r3, #54	; 0x36
   11574:	strb	r3, [r0, #1]
   11578:	strb	r2, [r0, #2]
   1157c:	ldr	r0, [fp, #-4]
   11580:	str	r0, [sp, #4]
   11584:	mov	r0, r1
   11588:	ldr	r1, [sp, #4]
   1158c:	bl	115dc <sprintf@plt+0xdb8>
   11590:	ldr	r1, [pc, #56]	; 115d0 <sprintf@plt+0xdac>
   11594:	add	r1, pc, r1
   11598:	ldr	r2, [fp, #-4]
   1159c:	add	r2, r2, #3
   115a0:	add	r2, r1, r2
   115a4:	movw	r3, #36	; 0x24
   115a8:	strb	r3, [r2]
   115ac:	ldr	r2, [fp, #-4]
   115b0:	add	r2, r2, #4
   115b4:	add	r2, r1, r2
   115b8:	movw	r3, #0
   115bc:	strb	r3, [r2]
   115c0:	str	r0, [sp]
   115c4:	mov	r0, r1
   115c8:	mov	sp, fp
   115cc:	pop	{fp, pc}
   115d0:	andeq	r0, r1, r7, lsl #23
   115d4:			; <UNDEFINED> instruction: 0x00010bbb
   115d8:	andeq	r0, r0, r4, ror #7
   115dc:	push	{fp, lr}
   115e0:	mov	fp, sp
   115e4:	sub	sp, sp, #32
   115e8:	ldr	r2, [pc, #272]	; 11700 <sprintf@plt+0xedc>
   115ec:	add	r2, pc, r2
   115f0:	str	r0, [fp, #-8]
   115f4:	str	r1, [fp, #-12]
   115f8:	mov	r0, r2
   115fc:	movw	r1, #0
   11600:	bl	10728 <open@plt>
   11604:	str	r0, [sp, #12]
   11608:	cmp	r0, #0
   1160c:	bge	11624 <sprintf@plt+0xe00>
   11610:	ldr	r0, [fp, #-8]
   11614:	ldr	r1, [fp, #-12]
   11618:	bl	11708 <sprintf@plt+0xee4>
   1161c:	str	r0, [fp, #-4]
   11620:	b	116f4 <sprintf@plt+0xed0>
   11624:	ldr	r1, [fp, #-12]
   11628:	movw	r0, #1
   1162c:	bl	10770 <calloc@plt>
   11630:	str	r0, [sp, #16]
   11634:	ldr	r0, [sp, #12]
   11638:	ldr	r1, [sp, #16]
   1163c:	ldr	r2, [fp, #-12]
   11640:	bl	10788 <read@plt>
   11644:	ldr	r1, [fp, #-12]
   11648:	cmp	r0, r1
   1164c:	beq	1166c <sprintf@plt+0xe48>
   11650:	ldr	r0, [sp, #16]
   11654:	bl	1077c <free@plt>
   11658:	ldr	r0, [fp, #-8]
   1165c:	ldr	r1, [fp, #-12]
   11660:	bl	11708 <sprintf@plt+0xee4>
   11664:	str	r0, [fp, #-4]
   11668:	b	116f4 <sprintf@plt+0xed0>
   1166c:	movw	r0, #0
   11670:	str	r0, [sp, #8]
   11674:	ldr	r0, [sp, #8]
   11678:	ldr	r1, [fp, #-12]
   1167c:	cmp	r0, r1
   11680:	bge	116e4 <sprintf@plt+0xec0>
   11684:	ldr	r0, [pc, #120]	; 11704 <sprintf@plt+0xee0>
   11688:	add	r0, pc, r0
   1168c:	ldr	r1, [sp, #16]
   11690:	ldr	r2, [sp, #8]
   11694:	ldrb	r1, [r1, r2]
   11698:	str	r0, [sp, #4]
   1169c:	mov	r0, r1
   116a0:	bl	10818 <abs@plt>
   116a4:	mov	r1, r0
   116a8:	asr	r2, r0, #31
   116ac:	add	r2, r0, r2, lsr #26
   116b0:	bic	r2, r2, #63	; 0x3f
   116b4:	sub	r0, r0, r2
   116b8:	ldr	r2, [sp, #4]
   116bc:	add	r0, r2, r0
   116c0:	ldrb	r0, [r0]
   116c4:	ldr	r3, [fp, #-8]
   116c8:	ldr	ip, [sp, #8]
   116cc:	add	r3, r3, ip
   116d0:	strb	r0, [r3]
   116d4:	ldr	r0, [sp, #8]
   116d8:	add	r0, r0, #1
   116dc:	str	r0, [sp, #8]
   116e0:	b	11674 <sprintf@plt+0xe50>
   116e4:	ldr	r0, [sp, #16]
   116e8:	bl	1077c <free@plt>
   116ec:	ldr	r0, [fp, #-8]
   116f0:	str	r0, [fp, #-4]
   116f4:	ldr	r0, [fp, #-4]
   116f8:	mov	sp, fp
   116fc:	pop	{fp, pc}
   11700:	andeq	r0, r0, r5, lsl #6
   11704:	andeq	r0, r1, r8, ror #19
   11708:	push	{fp, lr}
   1170c:	mov	fp, sp
   11710:	sub	sp, sp, #16
   11714:	str	r0, [fp, #-4]
   11718:	str	r1, [sp, #8]
   1171c:	movw	r0, #0
   11720:	bl	107c4 <time@plt>
   11724:	bl	10740 <srand@plt>
   11728:	movw	r0, #0
   1172c:	str	r0, [sp, #4]
   11730:	ldr	r0, [sp, #4]
   11734:	ldr	r1, [sp, #8]
   11738:	cmp	r0, r1
   1173c:	bge	11790 <sprintf@plt+0xf6c>
   11740:	ldr	r0, [pc, #84]	; 1179c <sprintf@plt+0xf78>
   11744:	add	r0, pc, r0
   11748:	str	r0, [sp]
   1174c:	bl	107f4 <rand@plt>
   11750:	mov	r1, r0
   11754:	asr	r2, r0, #31
   11758:	add	r2, r0, r2, lsr #26
   1175c:	bic	r2, r2, #63	; 0x3f
   11760:	sub	r0, r0, r2
   11764:	ldr	r2, [sp]
   11768:	add	r0, r2, r0
   1176c:	ldrb	r0, [r0]
   11770:	ldr	r3, [fp, #-4]
   11774:	ldr	ip, [sp, #4]
   11778:	add	r3, r3, ip
   1177c:	strb	r0, [r3]
   11780:	ldr	r0, [sp, #4]
   11784:	add	r0, r0, #1
   11788:	str	r0, [sp, #4]
   1178c:	b	11730 <sprintf@plt+0xf0c>
   11790:	ldr	r0, [fp, #-4]
   11794:	mov	sp, fp
   11798:	pop	{fp, pc}
   1179c:	andeq	r0, r1, ip, lsr #18
   117a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117a4:	mov	r7, r0
   117a8:	ldr	r6, [pc, #72]	; 117f8 <sprintf@plt+0xfd4>
   117ac:	ldr	r5, [pc, #72]	; 117fc <sprintf@plt+0xfd8>
   117b0:	add	r6, pc, r6
   117b4:	add	r5, pc, r5
   117b8:	sub	r6, r6, r5
   117bc:	mov	r8, r1
   117c0:	mov	r9, r2
   117c4:	bl	10708 <open@plt-0x20>
   117c8:	asrs	r6, r6, #2
   117cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117d0:	mov	r4, #0
   117d4:	add	r4, r4, #1
   117d8:	ldr	r3, [r5], #4
   117dc:	mov	r2, r9
   117e0:	mov	r1, r8
   117e4:	mov	r0, r7
   117e8:	blx	r3
   117ec:	cmp	r6, r4
   117f0:	bne	117d4 <sprintf@plt+0xfb0>
   117f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117f8:	andeq	r0, r1, ip, lsr r7
   117fc:	andeq	r0, r1, r4, lsr r7
   11800:	bx	lr

Disassembly of section .fini:

00011804 <.fini>:
   11804:	push	{r3, lr}
   11808:	pop	{r3, pc}
