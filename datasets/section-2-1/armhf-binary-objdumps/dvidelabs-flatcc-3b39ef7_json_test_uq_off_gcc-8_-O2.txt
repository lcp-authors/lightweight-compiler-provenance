
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144cc <.init>:
   144cc:	push	{r3, lr}
   144d0:	bl	14e50 <_start@@Base+0x3c>
   144d4:	pop	{r3, pc}

Disassembly of section .plt:

000144d8 <raise@plt-0x14>:
   144d8:	push	{lr}		; (str lr, [sp, #-4]!)
   144dc:	ldr	lr, [pc, #4]	; 144e8 <raise@plt-0x4>
   144e0:	add	lr, pc, lr
   144e4:	ldr	pc, [lr, #8]!
   144e8:	andeq	pc, r3, r8, lsl fp	; <UNPREDICTABLE>

000144ec <raise@plt>:
   144ec:	add	ip, pc, #0, 12
   144f0:	add	ip, ip, #258048	; 0x3f000
   144f4:	ldr	pc, [ip, #2840]!	; 0xb18

000144f8 <strcmp@plt>:
   144f8:	add	ip, pc, #0, 12
   144fc:	add	ip, ip, #258048	; 0x3f000
   14500:	ldr	pc, [ip, #2832]!	; 0xb10

00014504 <memmove@plt>:
   14504:	add	ip, pc, #0, 12
   14508:	add	ip, ip, #258048	; 0x3f000
   1450c:	ldr	pc, [ip, #2824]!	; 0xb08

00014510 <free@plt>:
   14510:	add	ip, pc, #0, 12
   14514:	add	ip, ip, #258048	; 0x3f000
   14518:	ldr	pc, [ip, #2816]!	; 0xb00

0001451c <memcpy@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #258048	; 0x3f000
   14524:	ldr	pc, [ip, #2808]!	; 0xaf8

00014528 <memcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #258048	; 0x3f000
   14530:	ldr	pc, [ip, #2800]!	; 0xaf0

00014534 <realloc@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #258048	; 0x3f000
   1453c:	ldr	pc, [ip, #2792]!	; 0xae8

00014540 <fwrite@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #258048	; 0x3f000
   14548:	ldr	pc, [ip, #2784]!	; 0xae0

0001454c <malloc@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #258048	; 0x3f000
   14554:	ldr	pc, [ip, #2776]!	; 0xad8

00014558 <__libc_start_main@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #258048	; 0x3f000
   14560:	ldr	pc, [ip, #2768]!	; 0xad0

00014564 <__gmon_start__@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #258048	; 0x3f000
   1456c:	ldr	pc, [ip, #2760]!	; 0xac8

00014570 <strlen@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #258048	; 0x3f000
   14578:	ldr	pc, [ip, #2752]!	; 0xac0

0001457c <fprintf@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #258048	; 0x3f000
   14584:	ldr	pc, [ip, #2744]!	; 0xab8

00014588 <posix_memalign@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #258048	; 0x3f000
   14590:	ldr	pc, [ip, #2736]!	; 0xab0

00014594 <memset@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #258048	; 0x3f000
   1459c:	ldr	pc, [ip, #2728]!	; 0xaa8

000145a0 <strncpy@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #258048	; 0x3f000
   145a8:	ldr	pc, [ip, #2720]!	; 0xaa0

000145ac <strtod@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #258048	; 0x3f000
   145b4:	ldr	pc, [ip, #2712]!	; 0xa98

000145b8 <memchr@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #258048	; 0x3f000
   145c0:	ldr	pc, [ip, #2704]!	; 0xa90

000145c4 <fputc@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #258048	; 0x3f000
   145cc:	ldr	pc, [ip, #2696]!	; 0xa88

000145d0 <sprintf@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #258048	; 0x3f000
   145d8:	ldr	pc, [ip, #2688]!	; 0xa80

000145dc <abort@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #258048	; 0x3f000
   145e4:	ldr	pc, [ip, #2680]!	; 0xa78

000145e8 <__assert_fail@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #258048	; 0x3f000
   145f0:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000145f8 <main@@Base>:
   145f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   145fc:	mov	r4, #0
   14600:	strd	r6, [sp, #8]
   14604:	strd	r8, [sp, #16]
   14608:	str	sl, [sp, #24]
   1460c:	str	lr, [sp, #28]
   14610:	sub	sp, sp, #16
   14614:	bl	242a4 <edge_case_tests@@Base>
   14618:	mov	r5, r0
   1461c:	ldr	r7, [pc, #1780]	; 14d18 <main@@Base+0x720>
   14620:	bl	244c0 <error_case_tests@@Base>
   14624:	orr	r5, r5, r0
   14628:	ldr	r6, [pc, #1772]	; 14d1c <main@@Base+0x724>
   1462c:	bl	24a7c <union_vector_tests@@Base>
   14630:	orr	r5, r5, r0
   14634:	ldr	r8, [pc, #1764]	; 14d20 <main@@Base+0x728>
   14638:	bl	24704 <base64_tests@@Base>
   1463c:	orr	r5, r5, r0
   14640:	add	r7, pc, r7
   14644:	ldr	sl, [pc, #1752]	; 14d24 <main@@Base+0x72c>
   14648:	bl	248d0 <mixed_type_union_tests@@Base>
   1464c:	ldr	r1, [pc, #1748]	; 14d28 <main@@Base+0x730>
   14650:	movw	ip, #525	; 0x20d
   14654:	add	r6, pc, r6
   14658:	mov	r2, r7
   1465c:	mov	r3, r4
   14660:	str	r4, [sp]
   14664:	orr	r5, r5, r0
   14668:	mov	r0, r6
   1466c:	stmib	sp, {r4, ip}
   14670:	add	r8, pc, r8
   14674:	add	sl, pc, sl
   14678:	ldr	r9, [pc, #1708]	; 14d2c <main@@Base+0x734>
   1467c:	add	r1, pc, r1
   14680:	bl	23da8 <test_json@@Base>
   14684:	ldr	r1, [pc, #1700]	; 14d30 <main@@Base+0x738>
   14688:	mov	ip, #528	; 0x210
   1468c:	mov	r3, r4
   14690:	mov	r2, r8
   14694:	orr	r5, r5, r0
   14698:	str	r4, [sp]
   1469c:	mov	r0, r6
   146a0:	stmib	sp, {r4, ip}
   146a4:	add	r9, pc, r9
   146a8:	add	r1, pc, r1
   146ac:	bl	23da8 <test_json@@Base>
   146b0:	movw	r1, #531	; 0x213
   146b4:	mov	r3, r4
   146b8:	str	r4, [sp]
   146bc:	mov	r2, sl
   146c0:	orr	r5, r5, r0
   146c4:	str	r4, [sp, #4]
   146c8:	str	r1, [sp, #8]
   146cc:	mov	r0, r6
   146d0:	ldr	r1, [pc, #1628]	; 14d34 <main@@Base+0x73c>
   146d4:	add	r1, pc, r1
   146d8:	bl	23da8 <test_json@@Base>
   146dc:	movw	r1, #534	; 0x216
   146e0:	mov	r3, r4
   146e4:	str	r4, [sp]
   146e8:	mov	r2, r9
   146ec:	orr	r5, r5, r0
   146f0:	str	r4, [sp, #4]
   146f4:	str	r1, [sp, #8]
   146f8:	mov	r0, r6
   146fc:	ldr	r1, [pc, #1588]	; 14d38 <main@@Base+0x740>
   14700:	add	r1, pc, r1
   14704:	bl	23da8 <test_json@@Base>
   14708:	movw	r1, #537	; 0x219
   1470c:	mov	r3, r4
   14710:	str	r4, [sp]
   14714:	mov	r2, r9
   14718:	orr	r5, r5, r0
   1471c:	str	r4, [sp, #4]
   14720:	str	r1, [sp, #8]
   14724:	mov	r0, r6
   14728:	ldr	r1, [pc, #1548]	; 14d3c <main@@Base+0x744>
   1472c:	add	r1, pc, r1
   14730:	bl	23da8 <test_json@@Base>
   14734:	mov	r1, #540	; 0x21c
   14738:	mov	r3, r4
   1473c:	str	r4, [sp]
   14740:	mov	r2, r8
   14744:	orr	r5, r5, r0
   14748:	str	r4, [sp, #4]
   1474c:	str	r1, [sp, #8]
   14750:	mov	r0, r6
   14754:	ldr	r1, [pc, #1508]	; 14d40 <main@@Base+0x748>
   14758:	add	r1, pc, r1
   1475c:	bl	23da8 <test_json@@Base>
   14760:	movw	r1, #543	; 0x21f
   14764:	mov	r3, r4
   14768:	str	r4, [sp]
   1476c:	mov	r2, sl
   14770:	orr	r5, r5, r0
   14774:	str	r4, [sp, #4]
   14778:	str	r1, [sp, #8]
   1477c:	mov	r0, r6
   14780:	ldr	r1, [pc, #1468]	; 14d44 <main@@Base+0x74c>
   14784:	add	r1, pc, r1
   14788:	bl	23da8 <test_json@@Base>
   1478c:	movw	r1, #547	; 0x223
   14790:	mov	r3, r4
   14794:	str	r4, [sp]
   14798:	mov	r2, r7
   1479c:	orr	r5, r5, r0
   147a0:	str	r4, [sp, #4]
   147a4:	str	r1, [sp, #8]
   147a8:	mov	r0, r6
   147ac:	ldr	r1, [pc, #1428]	; 14d48 <main@@Base+0x750>
   147b0:	add	r1, pc, r1
   147b4:	bl	23da8 <test_json@@Base>
   147b8:	movw	r1, #551	; 0x227
   147bc:	mov	r3, r4
   147c0:	str	r4, [sp]
   147c4:	mov	r2, r7
   147c8:	orr	r5, r5, r0
   147cc:	str	r4, [sp, #4]
   147d0:	str	r1, [sp, #8]
   147d4:	mov	r0, r6
   147d8:	ldr	r1, [pc, #1388]	; 14d4c <main@@Base+0x754>
   147dc:	add	r1, pc, r1
   147e0:	bl	23da8 <test_json@@Base>
   147e4:	movw	r1, #601	; 0x259
   147e8:	mov	r3, r4
   147ec:	str	r4, [sp]
   147f0:	mov	r2, r8
   147f4:	orr	r5, r5, r0
   147f8:	str	r4, [sp, #4]
   147fc:	str	r1, [sp, #8]
   14800:	mov	r0, r6
   14804:	ldr	r1, [pc, #1348]	; 14d50 <main@@Base+0x758>
   14808:	add	r1, pc, r1
   1480c:	bl	23da8 <test_json@@Base>
   14810:	ldr	r1, [pc, #1340]	; 14d54 <main@@Base+0x75c>
   14814:	mov	ip, #604	; 0x25c
   14818:	mov	r2, sl
   1481c:	mov	r3, r4
   14820:	orr	r5, r5, r0
   14824:	str	r4, [sp]
   14828:	mov	r0, r6
   1482c:	stmib	sp, {r4, ip}
   14830:	add	r1, pc, r1
   14834:	bl	23da8 <test_json@@Base>
   14838:	ldr	r2, [pc, #1304]	; 14d58 <main@@Base+0x760>
   1483c:	movw	ip, #607	; 0x25f
   14840:	mov	r3, r4
   14844:	orr	r5, r5, r0
   14848:	mov	r0, r6
   1484c:	str	r4, [sp]
   14850:	ldr	r1, [pc, #1284]	; 14d5c <main@@Base+0x764>
   14854:	stmib	sp, {r4, ip}
   14858:	add	r2, pc, r2
   1485c:	add	r1, pc, r1
   14860:	bl	23da8 <test_json@@Base>
   14864:	ldr	r1, [pc, #1268]	; 14d60 <main@@Base+0x768>
   14868:	movw	ip, #610	; 0x262
   1486c:	mov	r2, r9
   14870:	mov	r3, r4
   14874:	orr	r5, r5, r0
   14878:	str	r4, [sp]
   1487c:	mov	r0, r6
   14880:	stmib	sp, {r4, ip}
   14884:	ldr	r9, [pc, #1240]	; 14d64 <main@@Base+0x76c>
   14888:	add	r1, pc, r1
   1488c:	bl	23da8 <test_json@@Base>
   14890:	ldr	r2, [pc, #1232]	; 14d68 <main@@Base+0x770>
   14894:	movw	ip, #613	; 0x265
   14898:	mov	r3, r4
   1489c:	orr	r5, r5, r0
   148a0:	mov	r0, r6
   148a4:	str	r4, [sp]
   148a8:	ldr	r1, [pc, #1212]	; 14d6c <main@@Base+0x774>
   148ac:	add	r9, pc, r9
   148b0:	stmib	sp, {r4, ip}
   148b4:	add	r2, pc, r2
   148b8:	add	r1, pc, r1
   148bc:	bl	23da8 <test_json@@Base>
   148c0:	ldr	r2, [pc, #1192]	; 14d70 <main@@Base+0x778>
   148c4:	mov	ip, #616	; 0x268
   148c8:	mov	r3, r4
   148cc:	orr	r5, r5, r0
   148d0:	mov	r0, r6
   148d4:	str	r4, [sp]
   148d8:	ldr	r1, [pc, #1172]	; 14d74 <main@@Base+0x77c>
   148dc:	stmib	sp, {r4, ip}
   148e0:	add	r2, pc, r2
   148e4:	add	r1, pc, r1
   148e8:	bl	23da8 <test_json@@Base>
   148ec:	ldr	r2, [pc, #1156]	; 14d78 <main@@Base+0x780>
   148f0:	movw	ip, #619	; 0x26b
   148f4:	mov	r3, r4
   148f8:	orr	r5, r5, r0
   148fc:	mov	r0, r6
   14900:	str	r4, [sp]
   14904:	ldr	r1, [pc, #1136]	; 14d7c <main@@Base+0x784>
   14908:	stmib	sp, {r4, ip}
   1490c:	add	r2, pc, r2
   14910:	add	r1, pc, r1
   14914:	bl	23da8 <test_json@@Base>
   14918:	ldr	r1, [pc, #1120]	; 14d80 <main@@Base+0x788>
   1491c:	movw	ip, #622	; 0x26e
   14920:	mov	r3, r4
   14924:	mov	r2, r8
   14928:	orr	r5, r5, r0
   1492c:	str	r4, [sp]
   14930:	mov	r0, r6
   14934:	stmib	sp, {r4, ip}
   14938:	add	r1, pc, r1
   1493c:	bl	23da8 <test_json@@Base>
   14940:	ldr	r1, [pc, #1084]	; 14d84 <main@@Base+0x78c>
   14944:	mov	r2, r8
   14948:	movw	ip, #625	; 0x271
   1494c:	mov	r3, r4
   14950:	orr	r5, r5, r0
   14954:	str	r4, [sp]
   14958:	ldr	r8, [pc, #1064]	; 14d88 <main@@Base+0x790>
   1495c:	mov	r0, r6
   14960:	stmib	sp, {r4, ip}
   14964:	add	r1, pc, r1
   14968:	bl	23da8 <test_json@@Base>
   1496c:	mov	ip, #628	; 0x274
   14970:	add	r8, pc, r8
   14974:	str	r4, [sp]
   14978:	mov	r3, r4
   1497c:	mov	r2, r9
   14980:	mov	r1, r8
   14984:	orr	r5, r5, r0
   14988:	stmib	sp, {r4, ip}
   1498c:	mov	r0, r6
   14990:	bl	23da8 <test_json@@Base>
   14994:	movw	ip, #631	; 0x277
   14998:	mov	r2, r9
   1499c:	str	r4, [sp]
   149a0:	mov	r1, r8
   149a4:	mov	r3, r4
   149a8:	ldr	r8, [pc, #988]	; 14d8c <main@@Base+0x794>
   149ac:	orr	r5, r5, r0
   149b0:	mov	r0, r6
   149b4:	stmib	sp, {r4, ip}
   149b8:	bl	23da8 <test_json@@Base>
   149bc:	ldr	r2, [pc, #972]	; 14d90 <main@@Base+0x798>
   149c0:	movw	ip, #634	; 0x27a
   149c4:	mov	r3, r4
   149c8:	orr	r5, r5, r0
   149cc:	mov	r0, r6
   149d0:	str	r4, [sp]
   149d4:	ldr	r1, [pc, #952]	; 14d94 <main@@Base+0x79c>
   149d8:	add	r8, pc, r8
   149dc:	stmib	sp, {r4, ip}
   149e0:	add	r2, pc, r2
   149e4:	add	r1, pc, r1
   149e8:	bl	23da8 <test_json@@Base>
   149ec:	ldr	r2, [pc, #932]	; 14d98 <main@@Base+0x7a0>
   149f0:	movw	ip, #638	; 0x27e
   149f4:	mov	r3, r4
   149f8:	orr	r5, r5, r0
   149fc:	mov	r0, r6
   14a00:	str	r4, [sp]
   14a04:	ldr	r1, [pc, #912]	; 14d9c <main@@Base+0x7a4>
   14a08:	stmib	sp, {r4, ip}
   14a0c:	add	r2, pc, r2
   14a10:	add	r1, pc, r1
   14a14:	bl	23da8 <test_json@@Base>
   14a18:	ldr	r2, [pc, #896]	; 14da0 <main@@Base+0x7a8>
   14a1c:	movw	ip, #642	; 0x282
   14a20:	mov	r3, r4
   14a24:	orr	r5, r5, r0
   14a28:	mov	r0, r6
   14a2c:	str	r4, [sp]
   14a30:	ldr	r1, [pc, #876]	; 14da4 <main@@Base+0x7ac>
   14a34:	stmib	sp, {r4, ip}
   14a38:	add	r2, pc, r2
   14a3c:	add	r1, pc, r1
   14a40:	bl	23da8 <test_json@@Base>
   14a44:	ldr	r1, [pc, #860]	; 14da8 <main@@Base+0x7b0>
   14a48:	movw	ip, #646	; 0x286
   14a4c:	mov	r3, r4
   14a50:	mov	r2, r7
   14a54:	orr	r5, r5, r0
   14a58:	str	r4, [sp]
   14a5c:	mov	r0, r6
   14a60:	stmib	sp, {r4, ip}
   14a64:	add	r1, pc, r1
   14a68:	bl	23da8 <test_json@@Base>
   14a6c:	ldr	r1, [pc, #824]	; 14dac <main@@Base+0x7b4>
   14a70:	movw	ip, #649	; 0x289
   14a74:	mov	r3, r4
   14a78:	mov	r2, r7
   14a7c:	orr	r5, r5, r0
   14a80:	str	r4, [sp]
   14a84:	mov	r0, r6
   14a88:	stmib	sp, {r4, ip}
   14a8c:	add	r1, pc, r1
   14a90:	bl	23da8 <test_json@@Base>
   14a94:	ldr	r2, [pc, #788]	; 14db0 <main@@Base+0x7b8>
   14a98:	mov	ip, #716	; 0x2cc
   14a9c:	mov	r3, r4
   14aa0:	orr	r5, r5, r0
   14aa4:	mov	r0, r6
   14aa8:	str	r4, [sp]
   14aac:	ldr	r1, [pc, #768]	; 14db4 <main@@Base+0x7bc>
   14ab0:	stmib	sp, {r4, ip}
   14ab4:	add	r2, pc, r2
   14ab8:	add	r1, pc, r1
   14abc:	bl	23da8 <test_json@@Base>
   14ac0:	ldr	r2, [pc, #752]	; 14db8 <main@@Base+0x7c0>
   14ac4:	movw	ip, #731	; 0x2db
   14ac8:	mov	r3, r4
   14acc:	orr	r5, r5, r0
   14ad0:	mov	r0, r6
   14ad4:	str	r4, [sp]
   14ad8:	ldr	r1, [pc, #732]	; 14dbc <main@@Base+0x7c4>
   14adc:	stmib	sp, {r4, ip}
   14ae0:	add	r2, pc, r2
   14ae4:	add	r1, pc, r1
   14ae8:	bl	23da8 <test_json@@Base>
   14aec:	ldr	r2, [pc, #716]	; 14dc0 <main@@Base+0x7c8>
   14af0:	movw	ip, #734	; 0x2de
   14af4:	mov	r3, r4
   14af8:	orr	r5, r5, r0
   14afc:	mov	r0, r6
   14b00:	str	r4, [sp]
   14b04:	ldr	r1, [pc, #696]	; 14dc4 <main@@Base+0x7cc>
   14b08:	stmib	sp, {r4, ip}
   14b0c:	add	r2, pc, r2
   14b10:	add	r1, pc, r1
   14b14:	bl	23da8 <test_json@@Base>
   14b18:	ldr	r1, [pc, #680]	; 14dc8 <main@@Base+0x7d0>
   14b1c:	movw	ip, #738	; 0x2e2
   14b20:	mov	r3, r4
   14b24:	mov	r2, r8
   14b28:	orr	r5, r5, r0
   14b2c:	str	r4, [sp]
   14b30:	mov	r0, r6
   14b34:	stmib	sp, {r4, ip}
   14b38:	add	r1, pc, r1
   14b3c:	bl	23da8 <test_json@@Base>
   14b40:	ldr	r1, [pc, #644]	; 14dcc <main@@Base+0x7d4>
   14b44:	movw	ip, #750	; 0x2ee
   14b48:	mov	r2, r8
   14b4c:	mov	r3, r4
   14b50:	orr	r5, r5, r0
   14b54:	str	r4, [sp]
   14b58:	mov	r0, r6
   14b5c:	stmib	sp, {r4, ip}
   14b60:	add	r1, pc, r1
   14b64:	bl	23da8 <test_json@@Base>
   14b68:	ldr	r2, [pc, #608]	; 14dd0 <main@@Base+0x7d8>
   14b6c:	movw	ip, #766	; 0x2fe
   14b70:	mov	r3, r4
   14b74:	orr	r5, r5, r0
   14b78:	mov	r0, r6
   14b7c:	str	r4, [sp]
   14b80:	ldr	r1, [pc, #588]	; 14dd4 <main@@Base+0x7dc>
   14b84:	stmib	sp, {r4, ip}
   14b88:	add	r2, pc, r2
   14b8c:	add	r1, pc, r1
   14b90:	bl	23da8 <test_json@@Base>
   14b94:	ldr	r2, [pc, #572]	; 14dd8 <main@@Base+0x7e0>
   14b98:	movw	ip, #770	; 0x302
   14b9c:	mov	r3, r4
   14ba0:	orr	r5, r5, r0
   14ba4:	mov	r0, r6
   14ba8:	str	r4, [sp]
   14bac:	ldr	r1, [pc, #552]	; 14ddc <main@@Base+0x7e4>
   14bb0:	stmib	sp, {r4, ip}
   14bb4:	add	r2, pc, r2
   14bb8:	add	r1, pc, r1
   14bbc:	bl	23da8 <test_json@@Base>
   14bc0:	ldr	r2, [pc, #536]	; 14de0 <main@@Base+0x7e8>
   14bc4:	mov	ip, #776	; 0x308
   14bc8:	mov	r3, r4
   14bcc:	orr	r5, r5, r0
   14bd0:	mov	r0, r6
   14bd4:	str	r4, [sp]
   14bd8:	ldr	r1, [pc, #516]	; 14de4 <main@@Base+0x7ec>
   14bdc:	stmib	sp, {r4, ip}
   14be0:	add	r2, pc, r2
   14be4:	add	r1, pc, r1
   14be8:	bl	23da8 <test_json@@Base>
   14bec:	ldr	r1, [pc, #500]	; 14de8 <main@@Base+0x7f0>
   14bf0:	movw	ip, #781	; 0x30d
   14bf4:	mov	r2, r7
   14bf8:	mov	r3, r4
   14bfc:	orr	r5, r5, r0
   14c00:	str	r4, [sp]
   14c04:	mov	r0, r6
   14c08:	stmib	sp, {r4, ip}
   14c0c:	add	r1, pc, r1
   14c10:	bl	23da8 <test_json@@Base>
   14c14:	ldr	r2, [pc, #464]	; 14dec <main@@Base+0x7f4>
   14c18:	movw	ip, #786	; 0x312
   14c1c:	mov	r3, r4
   14c20:	orr	r5, r5, r0
   14c24:	mov	r0, r6
   14c28:	str	r4, [sp]
   14c2c:	ldr	r1, [pc, #444]	; 14df0 <main@@Base+0x7f8>
   14c30:	stmib	sp, {r4, ip}
   14c34:	add	r2, pc, r2
   14c38:	add	r1, pc, r1
   14c3c:	bl	23da8 <test_json@@Base>
   14c40:	ldr	r2, [pc, #428]	; 14df4 <main@@Base+0x7fc>
   14c44:	movw	ip, #791	; 0x317
   14c48:	mov	r3, r4
   14c4c:	orr	r5, r5, r0
   14c50:	mov	r0, r6
   14c54:	str	r4, [sp]
   14c58:	ldr	r1, [pc, #408]	; 14df8 <main@@Base+0x800>
   14c5c:	stmib	sp, {r4, ip}
   14c60:	add	r2, pc, r2
   14c64:	add	r1, pc, r1
   14c68:	bl	23da8 <test_json@@Base>
   14c6c:	ldr	r2, [pc, #392]	; 14dfc <main@@Base+0x804>
   14c70:	mov	ip, #796	; 0x31c
   14c74:	mov	r3, r4
   14c78:	orr	r5, r5, r0
   14c7c:	mov	r0, r6
   14c80:	str	r4, [sp]
   14c84:	ldr	r1, [pc, #372]	; 14e00 <main@@Base+0x808>
   14c88:	stmib	sp, {r4, ip}
   14c8c:	add	r2, pc, r2
   14c90:	add	r1, pc, r1
   14c94:	bl	23da8 <test_json@@Base>
   14c98:	ldr	r2, [pc, #356]	; 14e04 <main@@Base+0x80c>
   14c9c:	movw	ip, #801	; 0x321
   14ca0:	mov	r3, r4
   14ca4:	orr	r5, r5, r0
   14ca8:	mov	r0, r6
   14cac:	str	r4, [sp]
   14cb0:	ldr	r1, [pc, #336]	; 14e08 <main@@Base+0x810>
   14cb4:	stmib	sp, {r4, ip}
   14cb8:	add	r2, pc, r2
   14cbc:	add	r1, pc, r1
   14cc0:	bl	23da8 <test_json@@Base>
   14cc4:	ldr	r2, [pc, #320]	; 14e0c <main@@Base+0x814>
   14cc8:	movw	ip, #806	; 0x326
   14ccc:	orr	r5, r5, r0
   14cd0:	mov	r3, r4
   14cd4:	mov	r0, r6
   14cd8:	str	r4, [sp]
   14cdc:	ldr	r1, [pc, #300]	; 14e10 <main@@Base+0x818>
   14ce0:	stmib	sp, {r4, ip}
   14ce4:	add	r2, pc, r2
   14ce8:	add	r1, pc, r1
   14cec:	bl	23da8 <test_json@@Base>
   14cf0:	orrs	r3, r5, r0
   14cf4:	mvnne	r0, #0
   14cf8:	moveq	r0, r4
   14cfc:	add	sp, sp, #16
   14d00:	ldrd	r4, [sp]
   14d04:	ldrd	r6, [sp, #8]
   14d08:	ldrd	r8, [sp, #16]
   14d0c:	ldr	sl, [sp, #24]
   14d10:	add	sp, sp, #28
   14d14:	pop	{pc}		; (ldr pc, [sp], #4)
   14d18:	andeq	sl, r2, r4, lsl #5
   14d1c:	andeq	pc, r3, ip, lsl #17
   14d20:	andeq	fp, r2, ip, lsr #24
   14d24:	andeq	fp, r2, r4, ror ip
   14d28:	andeq	fp, r2, r8, lsl #24
   14d2c:	muleq	r2, r0, ip
   14d30:	andeq	fp, r2, r8, lsl ip
   14d34:	andeq	fp, r2, r8, lsr ip
   14d38:	andeq	fp, r2, r0, ror #24
   14d3c:	andeq	fp, r2, r8, ror #24
   14d40:	andeq	fp, r2, r8, ror ip
   14d44:	andeq	fp, r2, r4, ror ip
   14d48:	andeq	fp, r2, r4, ror ip
   14d4c:	andeq	sl, r2, ip, ror r0
   14d50:	andeq	fp, r2, r4, asr #24
   14d54:	andeq	fp, r2, r0, asr #24
   14d58:	andeq	fp, r2, ip, lsr ip
   14d5c:	andeq	fp, r2, r0, ror #24
   14d60:	andeq	fp, r2, r8, asr ip
   14d64:	andeq	fp, r2, ip, lsl #27
   14d68:	andeq	fp, r2, r0, asr ip
   14d6c:	andeq	fp, r2, ip, ror #24
   14d70:	andeq	fp, r2, r8, ror #24
   14d74:	andeq	fp, r2, r4, lsl #25
   14d78:	andeq	fp, r2, r0, lsl #25
   14d7c:	muleq	r2, ip, ip
   14d80:	muleq	r2, r8, ip
   14d84:	muleq	r2, r8, ip
   14d88:	andeq	fp, r2, r4, ror #25
   14d8c:	andeq	ip, r2, r0, lsl #1
   14d90:	andeq	fp, r2, r0, lsr #25
   14d94:	andeq	fp, r2, r4, ror #25
   14d98:	andeq	fp, r2, r0, lsl sp
   14d9c:	andeq	fp, r2, r8, asr sp
   14da0:	andeq	fp, r2, r8, lsl #27
   14da4:	andeq	fp, r2, r8, ror #27
   14da8:	andeq	fp, r2, r0, lsr lr
   14dac:	andeq	fp, r2, r4, lsr lr
   14db0:	andeq	fp, r2, r4, lsr lr
   14db4:	muleq	r2, r0, lr
   14db8:	ldrdeq	fp, [r2], -r8
   14dbc:	andeq	fp, r2, r4, lsl #30
   14dc0:	andeq	fp, r2, ip, lsl pc
   14dc4:	andeq	fp, r2, ip, lsr #30
   14dc8:	andeq	fp, r2, r4, ror #30
   14dcc:	andeq	fp, r2, r4, lsl #31
   14dd0:	strdeq	fp, [r2], -ip
   14dd4:	andeq	ip, r2, ip, lsl r0
   14dd8:	andeq	ip, r2, ip, lsl r0
   14ddc:	andeq	ip, r2, r4, asr #32
   14de0:	andeq	ip, r2, ip, asr #32
   14de4:	strheq	ip, [r2], -r8
   14de8:	andeq	ip, r2, ip, lsl #2
   14dec:	andeq	ip, r2, ip, asr r1
   14df0:	andeq	ip, r2, r8, asr #3
   14df4:	andeq	ip, r2, ip, lsl r2
   14df8:	muleq	r2, r8, r2
   14dfc:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   14e00:	andeq	ip, r2, r8, ror #6
   14e04:			; <UNDEFINED> instruction: 0x0002c3bc
   14e08:	andeq	ip, r2, r8, lsr r4
   14e0c:	muleq	r2, ip, r4
   14e10:	andeq	ip, r2, ip, lsl r5

00014e14 <_start@@Base>:
   14e14:	mov	fp, #0
   14e18:	mov	lr, #0
   14e1c:	pop	{r1}		; (ldr r1, [sp], #4)
   14e20:	mov	r2, sp
   14e24:	push	{r2}		; (str r2, [sp, #-4]!)
   14e28:	push	{r0}		; (str r0, [sp, #-4]!)
   14e2c:	ldr	ip, [pc, #16]	; 14e44 <_start@@Base+0x30>
   14e30:	push	{ip}		; (str ip, [sp, #-4]!)
   14e34:	ldr	r0, [pc, #12]	; 14e48 <_start@@Base+0x34>
   14e38:	ldr	r3, [pc, #12]	; 14e4c <_start@@Base+0x38>
   14e3c:	bl	14558 <__libc_start_main@plt>
   14e40:	bl	145dc <abort@plt>
   14e44:	ldrdeq	lr, [r3], -r8
   14e48:	strdeq	r4, [r1], -r8
   14e4c:	andeq	lr, r3, r8, ror r1
   14e50:	ldr	r3, [pc, #20]	; 14e6c <_start@@Base+0x58>
   14e54:	ldr	r2, [pc, #20]	; 14e70 <_start@@Base+0x5c>
   14e58:	add	r3, pc, r3
   14e5c:	ldr	r2, [r3, r2]
   14e60:	cmp	r2, #0
   14e64:	bxeq	lr
   14e68:	b	14564 <__gmon_start__@plt>
   14e6c:	andeq	pc, r3, r0, lsr #3
   14e70:	andeq	r0, r0, ip, rrx
   14e74:	ldr	r0, [pc, #24]	; 14e94 <_start@@Base+0x80>
   14e78:	ldr	r3, [pc, #24]	; 14e98 <_start@@Base+0x84>
   14e7c:	cmp	r3, r0
   14e80:	bxeq	lr
   14e84:	ldr	r3, [pc, #16]	; 14e9c <_start@@Base+0x88>
   14e88:	cmp	r3, #0
   14e8c:	bxeq	lr
   14e90:	bx	r3
   14e94:	andeq	r4, r5, r8, asr #7
   14e98:	andeq	r4, r5, r8, asr #7
   14e9c:	andeq	r0, r0, r0
   14ea0:	ldr	r0, [pc, #36]	; 14ecc <_start@@Base+0xb8>
   14ea4:	ldr	r1, [pc, #36]	; 14ed0 <_start@@Base+0xbc>
   14ea8:	sub	r1, r1, r0
   14eac:	asr	r1, r1, #2
   14eb0:	add	r1, r1, r1, lsr #31
   14eb4:	asrs	r1, r1, #1
   14eb8:	bxeq	lr
   14ebc:	ldr	r3, [pc, #16]	; 14ed4 <_start@@Base+0xc0>
   14ec0:	cmp	r3, #0
   14ec4:	bxeq	lr
   14ec8:	bx	r3
   14ecc:	andeq	r4, r5, r8, asr #7
   14ed0:	andeq	r4, r5, r8, asr #7
   14ed4:	andeq	r0, r0, r0
   14ed8:	push	{r4, lr}
   14edc:	ldr	r4, [pc, #24]	; 14efc <_start@@Base+0xe8>
   14ee0:	ldrb	r3, [r4]
   14ee4:	cmp	r3, #0
   14ee8:	popne	{r4, pc}
   14eec:	bl	14e74 <_start@@Base+0x60>
   14ef0:	mov	r3, #1
   14ef4:	strb	r3, [r4]
   14ef8:	pop	{r4, pc}
   14efc:	andeq	r4, r5, r8, asr #7
   14f00:	b	14ea0 <_start@@Base+0x8c>
   14f04:	andeq	r0, r0, r0
   14f08:	sub	r1, r1, r0
   14f0c:	strd	r4, [sp, #-8]!
   14f10:	cmp	r1, #8
   14f14:	bhi	14f48 <_start@@Base+0x134>
   14f18:	sub	r1, r1, #1
   14f1c:	cmp	r1, #7
   14f20:	addls	pc, pc, r1, lsl #2
   14f24:	b	14ff0 <_start@@Base+0x1dc>
   14f28:	b	14fa8 <_start@@Base+0x194>
   14f2c:	b	14fb4 <_start@@Base+0x1a0>
   14f30:	b	14fc0 <_start@@Base+0x1ac>
   14f34:	b	14fcc <_start@@Base+0x1b8>
   14f38:	b	14fd8 <_start@@Base+0x1c4>
   14f3c:	b	14fe4 <_start@@Base+0x1d0>
   14f40:	b	14f9c <_start@@Base+0x188>
   14f44:	b	14f48 <_start@@Base+0x134>
   14f48:	ldrb	r2, [r0, #7]
   14f4c:	mov	r3, #0
   14f50:	mov	r1, r3
   14f54:	ldrb	r4, [r0, #6]
   14f58:	orr	r2, r2, r4, lsl #8
   14f5c:	ldrb	r4, [r0, #5]
   14f60:	orr	r2, r2, r4, lsl #16
   14f64:	ldrb	r4, [r0, #4]
   14f68:	orr	r2, r2, r4, lsl #24
   14f6c:	ldrb	r4, [r0, #3]
   14f70:	orr	r1, r1, r4
   14f74:	ldrb	r4, [r0, #2]
   14f78:	orr	r1, r1, r4, lsl #8
   14f7c:	ldrb	r4, [r0, #1]
   14f80:	orr	r1, r1, r4, lsl #16
   14f84:	ldrb	r4, [r0]
   14f88:	mov	r0, r2
   14f8c:	orr	r1, r1, r4, lsl #24
   14f90:	ldrd	r4, [sp]
   14f94:	add	sp, sp, #8
   14f98:	bx	lr
   14f9c:	mov	r2, #0
   14fa0:	mov	r3, #0
   14fa4:	b	14f50 <_start@@Base+0x13c>
   14fa8:	mov	r2, #0
   14fac:	mov	r1, r2
   14fb0:	b	14f84 <_start@@Base+0x170>
   14fb4:	mov	r2, #0
   14fb8:	mov	r1, r2
   14fbc:	b	14f7c <_start@@Base+0x168>
   14fc0:	mov	r2, #0
   14fc4:	mov	r1, r2
   14fc8:	b	14f74 <_start@@Base+0x160>
   14fcc:	mov	r2, #0
   14fd0:	mov	r1, r2
   14fd4:	b	14f6c <_start@@Base+0x158>
   14fd8:	mov	r2, #0
   14fdc:	mov	r1, r2
   14fe0:	b	14f64 <_start@@Base+0x150>
   14fe4:	mov	r2, #0
   14fe8:	mov	r1, r2
   14fec:	b	14f5c <_start@@Base+0x148>
   14ff0:	mov	r0, #0
   14ff4:	mov	r1, r0
   14ff8:	b	14f90 <_start@@Base+0x17c>
   14ffc:	cmp	r0, #4
   15000:	movhi	r0, #0
   15004:	movls	r0, #1
   15008:	bx	lr
   1500c:	cmp	r0, #11
   15010:	bhi	15034 <_start@@Base+0x220>
   15014:	cmp	r0, #8
   15018:	bcs	15044 <_start@@Base+0x230>
   1501c:	cmp	r0, #0
   15020:	beq	15044 <_start@@Base+0x230>
   15024:	sub	r0, r0, #2
   15028:	clz	r0, r0
   1502c:	lsr	r0, r0, #5
   15030:	bx	lr
   15034:	sub	r0, r0, #255	; 0xff
   15038:	clz	r0, r0
   1503c:	lsr	r0, r0, #5
   15040:	bx	lr
   15044:	mov	r0, #1
   15048:	bx	lr
   1504c:	bx	lr
   15050:	mov	r0, #0
   15054:	bx	lr
   15058:	mov	r3, #4
   1505c:	mov	r1, #0
   15060:	mov	r2, r3
   15064:	b	29be8 <flatcc_verify_field@@Base>
   15068:	ldr	ip, [pc, #144]	; 15100 <_start@@Base+0x2ec>
   1506c:	mov	r3, #21
   15070:	mov	r2, #0
   15074:	strd	r4, [sp, #-16]!
   15078:	mov	r5, r0
   1507c:	mov	r4, #22
   15080:	str	r6, [sp, #8]
   15084:	mov	r6, r1
   15088:	str	lr, [sp, #12]
   1508c:	sub	sp, sp, #8
   15090:	add	ip, pc, ip
   15094:	stm	sp, {r3, ip}
   15098:	ldr	r3, [pc, #100]	; 15104 <_start@@Base+0x2f0>
   1509c:	add	r3, pc, r3
   150a0:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   150a4:	ldr	ip, [pc, #92]	; 15108 <_start@@Base+0x2f4>
   150a8:	mov	r1, r6
   150ac:	mov	r0, r5
   150b0:	mov	r2, #1
   150b4:	ldr	r3, [pc, #80]	; 1510c <_start@@Base+0x2f8>
   150b8:	add	ip, pc, ip
   150bc:	add	r3, pc, r3
   150c0:	stm	sp, {r4, ip}
   150c4:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   150c8:	ldr	ip, [pc, #64]	; 15110 <_start@@Base+0x2fc>
   150cc:	mov	r1, r6
   150d0:	mov	r0, r5
   150d4:	mov	r2, #2
   150d8:	ldr	r3, [pc, #52]	; 15114 <_start@@Base+0x300>
   150dc:	add	ip, pc, ip
   150e0:	add	r3, pc, r3
   150e4:	stm	sp, {r4, ip}
   150e8:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   150ec:	add	sp, sp, #8
   150f0:	ldrd	r4, [sp]
   150f4:	ldr	r6, [sp, #8]
   150f8:	add	sp, sp, #12
   150fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15100:			; <UNDEFINED> instruction: 0x000001b4
   15104:	andeq	r9, r2, r8, asr #2
   15108:	andeq	r0, r0, ip, lsl #2
   1510c:	andeq	r9, r2, r0, asr #2
   15110:	andeq	r0, r0, r8, rrx
   15114:	andeq	r9, r2, r4, lsr r1
   15118:	ldr	r3, [pc, #40]	; 15148 <_start@@Base+0x334>
   1511c:	mov	ip, #0
   15120:	push	{lr}		; (str lr, [sp, #-4]!)
   15124:	mov	lr, #19
   15128:	sub	sp, sp, #12
   1512c:	mov	r2, ip
   15130:	str	lr, [sp]
   15134:	str	ip, [sp, #4]
   15138:	add	r3, pc, r3
   1513c:	bl	33560 <flatcc_json_printer_int32_field@@Base>
   15140:	add	sp, sp, #12
   15144:	pop	{pc}		; (ldr pc, [sp], #4)
   15148:	strdeq	r9, [r2], -r4
   1514c:	ldr	r3, [pc, #112]	; 151c4 <_start@@Base+0x3b0>
   15150:	mov	ip, #15
   15154:	mov	r2, #0
   15158:	strd	r4, [sp, #-20]!	; 0xffffffec
   1515c:	mov	r4, r0
   15160:	mov	r5, r1
   15164:	strd	r6, [sp, #8]
   15168:	mov	r6, #0
   1516c:	mov	r7, #0
   15170:	str	lr, [sp, #16]
   15174:	sub	sp, sp, #20
   15178:	add	r3, pc, r3
   1517c:	str	ip, [sp]
   15180:	strd	r6, [sp, #8]
   15184:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15188:	ldr	r3, [pc, #56]	; 151c8 <_start@@Base+0x3b4>
   1518c:	mov	ip, #0
   15190:	mov	lr, #21
   15194:	mov	r1, r5
   15198:	mov	r0, r4
   1519c:	mov	r2, #1
   151a0:	str	lr, [sp]
   151a4:	str	ip, [sp, #4]
   151a8:	add	r3, pc, r3
   151ac:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   151b0:	add	sp, sp, #20
   151b4:	ldrd	r4, [sp]
   151b8:	ldrd	r6, [sp, #8]
   151bc:	add	sp, sp, #16
   151c0:	pop	{pc}		; (ldr pc, [sp], #4)
   151c4:	andeq	r9, r2, r8, asr #1
   151c8:	andeq	r9, r2, r8, lsr #1
   151cc:	ldr	r3, [pc, #112]	; 15244 <_start@@Base+0x430>
   151d0:	mov	ip, #15
   151d4:	mov	r2, #0
   151d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   151dc:	mov	r4, r0
   151e0:	mov	r5, r1
   151e4:	strd	r6, [sp, #8]
   151e8:	mov	r6, #0
   151ec:	mov	r7, #0
   151f0:	str	lr, [sp, #16]
   151f4:	sub	sp, sp, #20
   151f8:	add	r3, pc, r3
   151fc:	str	ip, [sp]
   15200:	strd	r6, [sp, #8]
   15204:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15208:	ldr	r3, [pc, #56]	; 15248 <_start@@Base+0x434>
   1520c:	mov	ip, #0
   15210:	mov	lr, #16
   15214:	mov	r1, r5
   15218:	mov	r0, r4
   1521c:	mov	r2, #1
   15220:	str	lr, [sp]
   15224:	str	ip, [sp, #4]
   15228:	add	r3, pc, r3
   1522c:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   15230:	add	sp, sp, #20
   15234:	ldrd	r4, [sp]
   15238:	ldrd	r6, [sp, #8]
   1523c:	add	sp, sp, #16
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	andeq	r9, r2, r8, asr #32
   15248:	andeq	r9, r2, r0, asr #32
   1524c:	ldr	r3, [pc, #344]	; 153ac <_start@@Base+0x598>
   15250:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15254:	mov	r4, r0
   15258:	mov	r5, r1
   1525c:	strd	r6, [sp, #8]
   15260:	mov	r7, #4
   15264:	mov	r6, #8
   15268:	strd	r8, [sp, #16]
   1526c:	mov	r8, #0
   15270:	mov	r9, #0
   15274:	strd	sl, [sp, #24]
   15278:	mov	sl, #0
   1527c:	mov	fp, #9
   15280:	str	lr, [sp, #32]
   15284:	sub	sp, sp, #20
   15288:	mov	r2, sl
   1528c:	add	r3, pc, r3
   15290:	str	r7, [sp]
   15294:	bl	3239c <flatcc_json_printer_string_field@@Base>
   15298:	ldr	r3, [pc, #272]	; 153b0 <_start@@Base+0x59c>
   1529c:	mov	r1, r5
   152a0:	mov	r0, r4
   152a4:	mov	r2, #1
   152a8:	str	fp, [sp]
   152ac:	str	sl, [sp, #4]
   152b0:	add	r3, pc, r3
   152b4:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   152b8:	ldr	r3, [pc, #244]	; 153b4 <_start@@Base+0x5a0>
   152bc:	mov	r1, r5
   152c0:	mov	r0, r4
   152c4:	mov	r2, #2
   152c8:	str	r7, [sp]
   152cc:	add	r3, pc, r3
   152d0:	bl	3239c <flatcc_json_printer_string_field@@Base>
   152d4:	ldr	r3, [pc, #220]	; 153b8 <_start@@Base+0x5a4>
   152d8:	mov	r1, r5
   152dc:	mov	r0, r4
   152e0:	mov	r2, #3
   152e4:	str	r6, [sp]
   152e8:	strd	r8, [sp, #8]
   152ec:	add	r3, pc, r3
   152f0:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   152f4:	ldr	r3, [pc, #192]	; 153bc <_start@@Base+0x5a8>
   152f8:	mov	r2, r7
   152fc:	mov	r1, r5
   15300:	mov	r0, r4
   15304:	str	r7, [sp]
   15308:	add	r3, pc, r3
   1530c:	bl	3239c <flatcc_json_printer_string_field@@Base>
   15310:	ldr	r3, [pc, #168]	; 153c0 <_start@@Base+0x5ac>
   15314:	mov	r1, r5
   15318:	mov	r0, r4
   1531c:	mov	r2, #5
   15320:	str	r6, [sp]
   15324:	strd	r8, [sp, #8]
   15328:	add	r3, pc, r3
   1532c:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15330:	ldr	r3, [pc, #140]	; 153c4 <_start@@Base+0x5b0>
   15334:	mov	r1, r5
   15338:	mov	r0, r4
   1533c:	mov	r2, #6
   15340:	str	fp, [sp]
   15344:	str	sl, [sp, #4]
   15348:	add	r3, pc, r3
   1534c:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   15350:	ldr	r3, [pc, #112]	; 153c8 <_start@@Base+0x5b4>
   15354:	mov	r1, r5
   15358:	mov	r0, r4
   1535c:	mov	r2, #7
   15360:	str	r6, [sp]
   15364:	strd	r8, [sp, #8]
   15368:	add	r3, pc, r3
   1536c:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15370:	ldr	r3, [pc, #84]	; 153cc <_start@@Base+0x5b8>
   15374:	mov	r2, r6
   15378:	mov	r1, r5
   1537c:	mov	r0, r4
   15380:	str	fp, [sp]
   15384:	str	sl, [sp, #4]
   15388:	add	r3, pc, r3
   1538c:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   15390:	add	sp, sp, #20
   15394:	ldrd	r4, [sp]
   15398:	ldrd	r6, [sp, #8]
   1539c:	ldrd	r8, [sp, #16]
   153a0:	ldrd	sl, [sp, #24]
   153a4:	add	sp, sp, #32
   153a8:	pop	{pc}		; (ldr pc, [sp], #4)
   153ac:	strdeq	r8, [r2], -r0
   153b0:	ldrdeq	r8, [r2], -r4
   153b4:	andeq	r8, r2, r4, asr #31
   153b8:	andeq	r8, r2, ip, lsr #31
   153bc:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   153c0:	andeq	r8, r2, r4, lsl #31
   153c4:	andeq	r8, r2, r0, ror pc
   153c8:	andeq	r8, r2, ip, asr pc
   153cc:	andeq	r8, r2, r8, asr #30
   153d0:	ldr	ip, [pc, #1268]	; 158cc <_start@@Base+0xab8>
   153d4:	mov	r2, #0
   153d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153dc:	mov	r4, r0
   153e0:	mov	r5, r1
   153e4:	ldr	r3, [pc, #1252]	; 158d0 <_start@@Base+0xabc>
   153e8:	strd	r6, [sp, #8]
   153ec:	mov	r7, #4
   153f0:	mov	r6, #17
   153f4:	strd	r8, [sp, #16]
   153f8:	mov	r9, r2
   153fc:	mov	r8, #16
   15400:	add	ip, pc, ip
   15404:	strd	sl, [sp, #24]
   15408:	mov	sl, #3
   1540c:	str	lr, [sp, #32]
   15410:	sub	sp, sp, #28
   15414:	mov	fp, #9
   15418:	add	r3, pc, r3
   1541c:	stm	sp, {sl, ip}
   15420:	bl	3ccc4 <flatcc_json_printer_struct_field@@Base>
   15424:	ldr	r3, [pc, #1192]	; 158d4 <_start@@Base+0xac0>
   15428:	mov	ip, #150	; 0x96
   1542c:	mov	r1, r5
   15430:	mov	r0, r4
   15434:	mov	r2, #1
   15438:	stm	sp, {r7, ip}
   1543c:	add	r3, pc, r3
   15440:	bl	33338 <flatcc_json_printer_int16_field@@Base>
   15444:	ldr	r3, [pc, #1164]	; 158d8 <_start@@Base+0xac4>
   15448:	mov	ip, #100	; 0x64
   1544c:	mov	r2, #2
   15450:	mov	r1, r5
   15454:	mov	r0, r4
   15458:	stm	sp, {r2, ip}
   1545c:	add	r3, pc, r3
   15460:	bl	33338 <flatcc_json_printer_int16_field@@Base>
   15464:	ldr	r3, [pc, #1136]	; 158dc <_start@@Base+0xac8>
   15468:	mov	r2, sl
   1546c:	mov	r1, r5
   15470:	mov	r0, r4
   15474:	str	r7, [sp]
   15478:	ldr	sl, [pc, #1120]	; 158e0 <_start@@Base+0xacc>
   1547c:	add	r3, pc, r3
   15480:	bl	3239c <flatcc_json_printer_string_field@@Base>
   15484:	ldr	r3, [pc, #1112]	; 158e4 <_start@@Base+0xad0>
   15488:	mov	r1, r5
   1548c:	mov	r0, r4
   15490:	mov	r2, #5
   15494:	str	fp, [sp]
   15498:	add	sl, pc, sl
   1549c:	add	r3, pc, r3
   154a0:	bl	37804 <flatcc_json_printer_uint8_vector_field@@Base>
   154a4:	mov	lr, #8
   154a8:	mov	r3, #5
   154ac:	ldr	ip, [pc, #1076]	; 158e8 <_start@@Base+0xad4>
   154b0:	mov	r1, r5
   154b4:	mov	r0, r4
   154b8:	stm	sp, {r3, lr}
   154bc:	mov	r2, #6
   154c0:	ldr	r3, [pc, #1060]	; 158ec <_start@@Base+0xad8>
   154c4:	add	ip, pc, ip
   154c8:	str	ip, [sp, #8]
   154cc:	add	r3, pc, r3
   154d0:	bl	348f0 <flatcc_json_printer_int8_enum_field@@Base>
   154d4:	ldr	ip, [pc, #1044]	; 158f0 <_start@@Base+0xadc>
   154d8:	mov	r1, r5
   154dc:	mov	r0, r4
   154e0:	mov	r2, #8
   154e4:	str	r7, [sp]
   154e8:	ldr	r3, [pc, #1028]	; 158f4 <_start@@Base+0xae0>
   154ec:	add	ip, pc, ip
   154f0:	add	r3, pc, r3
   154f4:	stmib	sp, {r3, ip}
   154f8:	ldr	r3, [pc, #1016]	; 158f8 <_start@@Base+0xae4>
   154fc:	add	r3, pc, r3
   15500:	bl	3c5a0 <flatcc_json_printer_union_field@@Base>
   15504:	mov	ip, #5
   15508:	ldr	r3, [pc, #1004]	; 158fc <_start@@Base+0xae8>
   1550c:	mov	r2, fp
   15510:	mov	r1, r5
   15514:	mov	r0, r4
   15518:	str	ip, [sp]
   1551c:	ldr	ip, [pc, #988]	; 15900 <_start@@Base+0xaec>
   15520:	str	r7, [sp, #4]
   15524:	add	r3, pc, r3
   15528:	add	ip, pc, ip
   1552c:	str	ip, [sp, #8]
   15530:	str	ip, [sp, #20]
   15534:	bl	3b308 <flatcc_json_printer_struct_vector_field@@Base>
   15538:	ldr	r3, [pc, #964]	; 15904 <_start@@Base+0xaf0>
   1553c:	mov	r1, r5
   15540:	mov	r0, r4
   15544:	mov	r2, #10
   15548:	str	r6, [sp]
   1554c:	add	r3, pc, r3
   15550:	bl	3b694 <flatcc_json_printer_string_vector_field@@Base>
   15554:	ldr	r3, [pc, #940]	; 15908 <_start@@Base+0xaf4>
   15558:	mov	r1, r5
   1555c:	mov	r0, r4
   15560:	mov	r2, #11
   15564:	stm	sp, {r6, sl}
   15568:	add	r3, pc, r3
   1556c:	bl	3ba8c <flatcc_json_printer_table_vector_field@@Base>
   15570:	ldr	r3, [pc, #916]	; 1590c <_start@@Base+0xaf8>
   15574:	mov	ip, #5
   15578:	mov	r1, r5
   1557c:	mov	r0, r4
   15580:	mov	r2, #12
   15584:	str	ip, [sp]
   15588:	str	sl, [sp, #4]
   1558c:	add	r3, pc, r3
   15590:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   15594:	ldr	r3, [pc, #884]	; 15910 <_start@@Base+0xafc>
   15598:	mov	lr, #20
   1559c:	mov	r1, r5
   155a0:	mov	r0, r4
   155a4:	mov	r2, #13
   155a8:	str	lr, [sp]
   155ac:	stmib	sp, {r9, sl}
   155b0:	mov	sl, #0
   155b4:	add	r3, pc, r3
   155b8:	bl	3d374 <flatcc_json_printer_table_as_nested_root@@Base>
   155bc:	ldr	ip, [pc, #848]	; 15914 <_start@@Base+0xb00>
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	mov	r2, #14
   155cc:	ldr	r3, [pc, #836]	; 15918 <_start@@Base+0xb04>
   155d0:	add	ip, pc, ip
   155d4:	add	r3, pc, r3
   155d8:	stm	sp, {fp, ip}
   155dc:	mov	fp, #0
   155e0:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   155e4:	ldr	r3, [pc, #816]	; 1591c <_start@@Base+0xb08>
   155e8:	mov	lr, #8
   155ec:	mov	r2, #1
   155f0:	mov	r1, r5
   155f4:	mov	r0, r4
   155f8:	str	lr, [sp]
   155fc:	str	r2, [sp, #4]
   15600:	mov	r2, #15
   15604:	add	r3, pc, r3
   15608:	bl	339c0 <flatcc_json_printer_bool_field@@Base>
   1560c:	ldr	r3, [pc, #780]	; 15920 <_start@@Base+0xb0c>
   15610:	mov	r1, r5
   15614:	mov	r0, r4
   15618:	mov	r2, r8
   1561c:	strd	r8, [sp]
   15620:	add	r3, pc, r3
   15624:	bl	33560 <flatcc_json_printer_int32_field@@Base>
   15628:	ldr	r3, [pc, #756]	; 15924 <_start@@Base+0xb10>
   1562c:	mov	r2, r6
   15630:	mov	r1, r5
   15634:	mov	r0, r4
   15638:	strd	r8, [sp]
   1563c:	add	r3, pc, r3
   15640:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   15644:	ldr	r3, [pc, #732]	; 15928 <_start@@Base+0xb14>
   15648:	mov	r1, r5
   1564c:	mov	r0, r4
   15650:	mov	r2, #18
   15654:	str	r8, [sp]
   15658:	strd	sl, [sp, #8]
   1565c:	add	r3, pc, r3
   15660:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15664:	ldr	r3, [pc, #704]	; 1592c <_start@@Base+0xb18>
   15668:	mov	r1, r5
   1566c:	mov	r0, r4
   15670:	mov	r2, #19
   15674:	str	r8, [sp]
   15678:	strd	sl, [sp, #8]
   1567c:	add	r3, pc, r3
   15680:	bl	32efc <flatcc_json_printer_uint64_field@@Base>
   15684:	ldr	r3, [pc, #676]	; 15930 <_start@@Base+0xb1c>
   15688:	mov	r1, r5
   1568c:	mov	r0, r4
   15690:	mov	r2, #20
   15694:	stm	sp, {r6, r9}
   15698:	add	r3, pc, r3
   1569c:	bl	33560 <flatcc_json_printer_int32_field@@Base>
   156a0:	ldr	r3, [pc, #652]	; 15934 <_start@@Base+0xb20>
   156a4:	mov	r1, r5
   156a8:	mov	r0, r4
   156ac:	mov	r2, #21
   156b0:	stm	sp, {r6, r9}
   156b4:	mov	r9, #6
   156b8:	add	r3, pc, r3
   156bc:	bl	32cf8 <flatcc_json_printer_uint32_field@@Base>
   156c0:	ldr	r3, [pc, #624]	; 15938 <_start@@Base+0xb24>
   156c4:	mov	r1, r5
   156c8:	mov	r0, r4
   156cc:	mov	r2, #22
   156d0:	str	r6, [sp]
   156d4:	strd	sl, [sp, #8]
   156d8:	add	r3, pc, r3
   156dc:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   156e0:	ldr	r3, [pc, #596]	; 1593c <_start@@Base+0xb28>
   156e4:	mov	r1, r5
   156e8:	mov	r0, r4
   156ec:	mov	r2, #23
   156f0:	str	r6, [sp]
   156f4:	strd	sl, [sp, #8]
   156f8:	add	r3, pc, r3
   156fc:	bl	32efc <flatcc_json_printer_uint64_field@@Base>
   15700:	ldr	r3, [pc, #568]	; 15940 <_start@@Base+0xb2c>
   15704:	mov	r1, r5
   15708:	mov	r0, r4
   1570c:	mov	r2, #24
   15710:	str	r8, [sp]
   15714:	mov	r8, #5
   15718:	add	r3, pc, r3
   1571c:	bl	39020 <flatcc_json_printer_bool_vector_field@@Base>
   15720:	ldr	r3, [pc, #540]	; 15944 <_start@@Base+0xb30>
   15724:	mov	r1, r5
   15728:	mov	r0, r4
   1572c:	mov	r2, #25
   15730:	str	r8, [sp]
   15734:	vldr	s0, [pc, #388]	; 158c0 <_start@@Base+0xaac>
   15738:	add	r3, pc, r3
   1573c:	bl	33bc4 <flatcc_json_printer_float_field@@Base>
   15740:	ldr	r3, [pc, #512]	; 15948 <_start@@Base+0xb34>
   15744:	mov	r1, r5
   15748:	mov	r0, r4
   1574c:	mov	r2, #26
   15750:	str	r9, [sp]
   15754:	vldr	s0, [pc, #360]	; 158c4 <_start@@Base+0xab0>
   15758:	add	r3, pc, r3
   1575c:	bl	33bc4 <flatcc_json_printer_float_field@@Base>
   15760:	ldr	r3, [pc, #484]	; 1594c <_start@@Base+0xb38>
   15764:	mov	r1, r5
   15768:	mov	r0, r4
   1576c:	mov	r2, #27
   15770:	str	r9, [sp]
   15774:	vldr	s0, [pc, #332]	; 158c8 <_start@@Base+0xab4>
   15778:	add	r3, pc, r3
   1577c:	bl	33bc4 <flatcc_json_printer_float_field@@Base>
   15780:	ldr	r3, [pc, #456]	; 15950 <_start@@Base+0xb3c>
   15784:	mov	ip, #18
   15788:	mov	r1, r5
   1578c:	mov	r0, r4
   15790:	mov	r2, #28
   15794:	str	ip, [sp]
   15798:	add	r3, pc, r3
   1579c:	bl	3b694 <flatcc_json_printer_string_vector_field@@Base>
   157a0:	ldr	ip, [pc, #428]	; 15954 <_start@@Base+0xb40>
   157a4:	mov	r3, #8
   157a8:	mov	lr, #23
   157ac:	mov	r1, r5
   157b0:	mov	r0, r4
   157b4:	mov	r2, #29
   157b8:	str	lr, [sp]
   157bc:	add	ip, pc, ip
   157c0:	stmib	sp, {r3, ip}
   157c4:	ldr	r3, [pc, #396]	; 15958 <_start@@Base+0xb44>
   157c8:	add	r3, pc, r3
   157cc:	bl	3b308 <flatcc_json_printer_struct_vector_field@@Base>
   157d0:	ldr	r3, [pc, #388]	; 1595c <_start@@Base+0xb48>
   157d4:	mov	r1, r5
   157d8:	mov	r0, r4
   157dc:	mov	r2, #30
   157e0:	str	r7, [sp]
   157e4:	add	r3, pc, r3
   157e8:	bl	37804 <flatcc_json_printer_uint8_vector_field@@Base>
   157ec:	ldr	r3, [pc, #364]	; 15960 <_start@@Base+0xb4c>
   157f0:	mov	r1, r5
   157f4:	mov	r0, r4
   157f8:	mov	r2, #31
   157fc:	str	r8, [sp]
   15800:	ldr	ip, [sp, #20]
   15804:	add	r3, pc, r3
   15808:	stmib	sp, {r7, ip}
   1580c:	bl	3b308 <flatcc_json_printer_struct_vector_field@@Base>
   15810:	ldr	r3, [pc, #332]	; 15964 <_start@@Base+0xb50>
   15814:	mov	ip, #15
   15818:	mov	r1, r5
   1581c:	mov	r0, r4
   15820:	mov	r2, #32
   15824:	str	ip, [sp]
   15828:	add	r3, pc, r3
   1582c:	bl	38d44 <flatcc_json_printer_int64_vector_field@@Base>
   15830:	ldr	r3, [pc, #304]	; 15968 <_start@@Base+0xb54>
   15834:	mov	r1, r5
   15838:	mov	r0, r4
   1583c:	mov	r2, #33	; 0x21
   15840:	str	r6, [sp]
   15844:	add	r3, pc, r3
   15848:	bl	395c4 <flatcc_json_printer_double_vector_field@@Base>
   1584c:	ldr	ip, [pc, #280]	; 1596c <_start@@Base+0xb58>
   15850:	mov	lr, #21
   15854:	mov	r1, r5
   15858:	mov	r0, r4
   1585c:	mov	r2, #34	; 0x22
   15860:	ldr	r3, [pc, #264]	; 15970 <_start@@Base+0xb5c>
   15864:	str	lr, [sp]
   15868:	add	ip, pc, ip
   1586c:	add	r3, pc, r3
   15870:	str	ip, [sp, #4]
   15874:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   15878:	ldr	ip, [pc, #244]	; 15974 <_start@@Base+0xb60>
   1587c:	mov	lr, #10
   15880:	mov	r1, r5
   15884:	mov	r0, r4
   15888:	mov	r2, #35	; 0x23
   1588c:	ldr	r3, [pc, #228]	; 15978 <_start@@Base+0xb64>
   15890:	str	lr, [sp]
   15894:	add	ip, pc, ip
   15898:	add	r3, pc, r3
   1589c:	str	ip, [sp, #4]
   158a0:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   158a4:	add	sp, sp, #28
   158a8:	ldrd	r4, [sp]
   158ac:	ldrd	r6, [sp, #8]
   158b0:	ldrd	r8, [sp, #16]
   158b4:	ldrd	sl, [sp, #24]
   158b8:	add	sp, sp, #32
   158bc:	pop	{pc}		; (ldr pc, [sp], #4)
   158c0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   158c4:	submi	r0, r0, r0
   158c8:	andeq	r0, r0, r0
   158cc:	andeq	r0, r0, r8, ror #26
   158d0:	andeq	r8, r2, r4, asr #29
   158d4:	andeq	r8, r2, r4, lsr #29
   158d8:	andeq	r8, r2, ip, lsl #29
   158dc:	andeq	r8, r2, r0, ror lr
   158e0:			; <UNDEFINED> instruction: 0xffffff30
   158e4:	andeq	r8, r2, r8, asr lr
   158e8:	muleq	r0, ip, fp
   158ec:	andeq	r8, r2, r4, lsr lr
   158f0:	andeq	r0, r0, r0, asr #13
   158f4:	andeq	r2, r0, ip, lsr #8
   158f8:	andeq	r8, r2, ip, lsl #28
   158fc:	andeq	r8, r2, ip, ror #27
   15900:	andeq	r0, r0, r8, lsl #12
   15904:	andeq	r8, r2, ip, asr #27
   15908:	andeq	r8, r2, r4, asr #27
   1590c:			; <UNDEFINED> instruction: 0x00028db4
   15910:	muleq	r2, r4, sp
   15914:			; <UNDEFINED> instruction: 0x000004b4
   15918:	andeq	r8, r2, ip, lsl #27
   1591c:	andeq	r8, r2, r8, ror #26
   15920:	andeq	r8, r2, r8, asr sp
   15924:	andeq	r8, r2, r0, asr sp
   15928:	andeq	r8, r2, r4, asr #26
   1592c:	andeq	r8, r2, r8, lsr sp
   15930:	andeq	r8, r2, r0, lsr sp
   15934:	andeq	r8, r2, r4, lsr #26
   15938:	andeq	r8, r2, r8, lsl sp
   1593c:	andeq	r8, r2, ip, lsl #26
   15940:	andeq	r8, r2, r0, lsl #26
   15944:	strdeq	r8, [r2], -r4
   15948:	ldrdeq	r8, [r2], -ip
   1594c:	andeq	r8, r2, r4, asr #25
   15950:	andeq	r8, r2, ip, lsr #25
   15954:	andeq	r0, r0, r8, asr r2
   15958:	muleq	r2, r0, ip
   1595c:	andeq	r8, r2, ip, lsl #25
   15960:	andeq	r8, r2, r4, ror ip
   15964:	andeq	r8, r2, r8, asr ip
   15968:	andeq	r8, r2, ip, asr #24
   1596c:			; <UNDEFINED> instruction: 0xfffff7dc
   15970:	andeq	r8, r2, r8, lsr ip
   15974:	andeq	r0, r0, r0, ror #1
   15978:	andeq	r8, r2, r4, lsr #24
   1597c:	ldr	r3, [pc, #140]	; 15a10 <_start@@Base+0xbfc>
   15980:	mov	ip, #4
   15984:	strd	r4, [sp, #-16]!
   15988:	mov	r4, #0
   1598c:	mov	r5, r0
   15990:	str	r6, [sp, #8]
   15994:	mov	r2, r4
   15998:	mov	r6, r1
   1599c:	str	lr, [sp, #12]
   159a0:	sub	sp, sp, #8
   159a4:	add	r3, pc, r3
   159a8:	str	ip, [sp]
   159ac:	str	r4, [sp, #4]
   159b0:	bl	32590 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   159b4:	ldr	r3, [pc, #88]	; 15a14 <_start@@Base+0xc00>
   159b8:	mov	ip, #1
   159bc:	mov	r2, #7
   159c0:	mov	r1, r6
   159c4:	mov	r0, r5
   159c8:	stm	sp, {r2, ip}
   159cc:	mov	r2, ip
   159d0:	add	r3, pc, r3
   159d4:	bl	32590 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   159d8:	ldr	r3, [pc, #56]	; 15a18 <_start@@Base+0xc04>
   159dc:	mov	ip, #6
   159e0:	mov	r1, r6
   159e4:	mov	r0, r5
   159e8:	mov	r2, #2
   159ec:	str	ip, [sp]
   159f0:	str	r4, [sp, #4]
   159f4:	add	r3, pc, r3
   159f8:	bl	32590 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   159fc:	add	sp, sp, #8
   15a00:	ldrd	r4, [sp]
   15a04:	ldr	r6, [sp, #8]
   15a08:	add	sp, sp, #12
   15a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a10:	andeq	r8, r2, r4, lsr #22
   15a14:	andeq	r8, r2, r0, lsl #22
   15a18:	andeq	r8, r2, r4, ror #21
   15a1c:	ldr	ip, [pc, #96]	; 15a84 <_start@@Base+0xc70>
   15a20:	mov	r3, #0
   15a24:	mov	r2, r1
   15a28:	strd	r4, [sp, #-12]!
   15a2c:	mov	r4, r1
   15a30:	mov	r1, r3
   15a34:	str	lr, [sp, #8]
   15a38:	sub	sp, sp, #12
   15a3c:	mov	lr, #2
   15a40:	mov	r5, r0
   15a44:	add	ip, pc, ip
   15a48:	stm	sp, {ip, lr}
   15a4c:	bl	3580c <flatcc_json_printer_uint32_struct_field@@Base>
   15a50:	ldr	ip, [pc, #48]	; 15a88 <_start@@Base+0xc74>
   15a54:	mov	lr, #8
   15a58:	mov	r2, r4
   15a5c:	mov	r0, r5
   15a60:	mov	r3, #4
   15a64:	mov	r1, #1
   15a68:	add	ip, pc, ip
   15a6c:	stm	sp, {ip, lr}
   15a70:	bl	3580c <flatcc_json_printer_uint32_struct_field@@Base>
   15a74:	add	sp, sp, #12
   15a78:	ldrd	r4, [sp]
   15a7c:	add	sp, sp, #8
   15a80:	pop	{pc}		; (ldr pc, [sp], #4)
   15a84:	muleq	r2, ip, sl
   15a88:	andeq	r8, r2, ip, ror sl
   15a8c:	ldr	r3, [pc, #152]	; 15b2c <_start@@Base+0xd18>
   15a90:	mov	r2, #0
   15a94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a98:	mov	r4, r0
   15a9c:	mov	r5, r1
   15aa0:	str	r6, [sp, #8]
   15aa4:	mov	r6, #2
   15aa8:	strd	r8, [sp, #12]
   15aac:	mov	r8, #0
   15ab0:	mov	r9, #0
   15ab4:	str	lr, [sp, #20]
   15ab8:	sub	sp, sp, #16
   15abc:	add	r3, pc, r3
   15ac0:	str	r6, [sp]
   15ac4:	bl	3239c <flatcc_json_printer_string_field@@Base>
   15ac8:	ldr	r3, [pc, #96]	; 15b30 <_start@@Base+0xd1c>
   15acc:	mov	r2, #3
   15ad0:	mov	r1, r5
   15ad4:	mov	r0, r4
   15ad8:	str	r2, [sp]
   15adc:	mov	r2, #1
   15ae0:	strd	r8, [sp, #8]
   15ae4:	add	r3, pc, r3
   15ae8:	bl	33784 <flatcc_json_printer_int64_field@@Base>
   15aec:	ldr	r3, [pc, #64]	; 15b34 <_start@@Base+0xd20>
   15af0:	mov	ip, #0
   15af4:	mov	lr, #5
   15af8:	mov	r2, r6
   15afc:	mov	r1, r5
   15b00:	mov	r0, r4
   15b04:	str	lr, [sp]
   15b08:	str	ip, [sp, #4]
   15b0c:	add	r3, pc, r3
   15b10:	bl	32af4 <flatcc_json_printer_uint16_field@@Base>
   15b14:	add	sp, sp, #16
   15b18:	ldrd	r4, [sp]
   15b1c:	ldr	r6, [sp, #8]
   15b20:	ldrd	r8, [sp, #12]
   15b24:	add	sp, sp, #20
   15b28:	pop	{pc}		; (ldr pc, [sp], #4)
   15b2c:	andeq	r8, r2, r4, lsr #20
   15b30:	andeq	r8, r2, ip, lsl #20
   15b34:	andeq	r8, r2, r8, ror #19
   15b38:	ldr	ip, [pc, #108]	; 15bac <_start@@Base+0xd98>
   15b3c:	mov	r3, #0
   15b40:	mov	r2, r1
   15b44:	strd	r4, [sp, #-16]!
   15b48:	mov	r4, #1
   15b4c:	mov	r5, r1
   15b50:	str	r6, [sp, #8]
   15b54:	mov	r1, r3
   15b58:	mov	r6, r0
   15b5c:	str	lr, [sp, #12]
   15b60:	sub	sp, sp, #8
   15b64:	add	ip, pc, ip
   15b68:	str	ip, [sp]
   15b6c:	str	r4, [sp, #4]
   15b70:	bl	35ce4 <flatcc_json_printer_int16_struct_field@@Base>
   15b74:	ldr	ip, [pc, #52]	; 15bb0 <_start@@Base+0xd9c>
   15b78:	mov	r2, r5
   15b7c:	mov	r1, r4
   15b80:	mov	r0, r6
   15b84:	mov	r3, #2
   15b88:	str	r4, [sp, #4]
   15b8c:	add	ip, pc, ip
   15b90:	str	ip, [sp]
   15b94:	bl	35b30 <flatcc_json_printer_int8_struct_field@@Base>
   15b98:	add	sp, sp, #8
   15b9c:	ldrd	r4, [sp]
   15ba0:	ldr	r6, [sp, #8]
   15ba4:	add	sp, sp, #12
   15ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bac:	andeq	r8, r2, r4, ror r8
   15bb0:	andeq	r8, r2, r0, ror r9
   15bb4:	ldrb	r3, [r1, #8]
   15bb8:	sub	r3, r3, #1
   15bbc:	cmp	r3, #3
   15bc0:	addls	pc, pc, r3, lsl #2
   15bc4:	b	15c08 <_start@@Base+0xdf4>
   15bc8:	b	15bfc <_start@@Base+0xde8>
   15bcc:	b	15bf0 <_start@@Base+0xddc>
   15bd0:	b	15be4 <_start@@Base+0xdd0>
   15bd4:	b	15bd8 <_start@@Base+0xdc4>
   15bd8:	ldr	r2, [pc, #44]	; 15c0c <_start@@Base+0xdf8>
   15bdc:	add	r2, pc, r2
   15be0:	b	3c878 <flatcc_json_printer_union_table@@Base>
   15be4:	ldr	r2, [pc, #36]	; 15c10 <_start@@Base+0xdfc>
   15be8:	add	r2, pc, r2
   15bec:	b	3c878 <flatcc_json_printer_union_table@@Base>
   15bf0:	ldr	r2, [pc, #28]	; 15c14 <_start@@Base+0xe00>
   15bf4:	add	r2, pc, r2
   15bf8:	b	3c878 <flatcc_json_printer_union_table@@Base>
   15bfc:	ldr	r2, [pc, #20]	; 15c18 <_start@@Base+0xe04>
   15c00:	add	r2, pc, r2
   15c04:	b	3c878 <flatcc_json_printer_union_table@@Base>
   15c08:	bx	lr
   15c0c:	andeq	r0, r0, r8, lsr r0
   15c10:	andeq	r2, r0, ip, lsl #1
   15c14:	muleq	r0, ip, r3
   15c18:			; <UNDEFINED> instruction: 0xfffff7c8
   15c1c:	ldr	ip, [pc, #148]	; 15cb8 <_start@@Base+0xea4>
   15c20:	mov	r3, #6
   15c24:	mov	r2, #0
   15c28:	strd	r4, [sp, #-12]!
   15c2c:	mov	r4, r0
   15c30:	mov	r5, r1
   15c34:	str	lr, [sp, #8]
   15c38:	sub	sp, sp, #20
   15c3c:	add	ip, pc, ip
   15c40:	stm	sp, {r3, ip}
   15c44:	ldr	r3, [pc, #112]	; 15cbc <_start@@Base+0xea8>
   15c48:	add	r3, pc, r3
   15c4c:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   15c50:	ldr	ip, [pc, #104]	; 15cc0 <_start@@Base+0xeac>
   15c54:	mov	r3, #5
   15c58:	mov	r1, r5
   15c5c:	mov	r0, r4
   15c60:	mov	r2, #1
   15c64:	add	ip, pc, ip
   15c68:	stm	sp, {r3, ip}
   15c6c:	ldr	r3, [pc, #80]	; 15cc4 <_start@@Base+0xeb0>
   15c70:	add	r3, pc, r3
   15c74:	bl	3c2d4 <flatcc_json_printer_table_field@@Base>
   15c78:	ldr	lr, [pc, #72]	; 15cc8 <_start@@Base+0xeb4>
   15c7c:	mov	r3, #7
   15c80:	mov	r1, r5
   15c84:	mov	r0, r4
   15c88:	mov	r2, #3
   15c8c:	ldr	ip, [pc, #56]	; 15ccc <_start@@Base+0xeb8>
   15c90:	add	lr, pc, lr
   15c94:	add	ip, pc, ip
   15c98:	stm	sp, {r3, ip, lr}
   15c9c:	ldr	r3, [pc, #44]	; 15cd0 <_start@@Base+0xebc>
   15ca0:	add	r3, pc, r3
   15ca4:	bl	3bf48 <flatcc_json_printer_union_vector_field@@Base>
   15ca8:	add	sp, sp, #20
   15cac:	ldrd	r4, [sp]
   15cb0:	add	sp, sp, #8
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:			; <UNDEFINED> instruction: 0xfffff424
   15cbc:			; <UNDEFINED> instruction: 0x000288b8
   15cc0:	andeq	r0, r0, r8, rrx
   15cc4:	muleq	r2, r8, r8
   15cc8:			; <UNDEFINED> instruction: 0xffffff1c
   15ccc:	andeq	r1, r0, r8, lsl #25
   15cd0:	andeq	r8, r2, r0, ror r8
   15cd4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15cd8:	mov	r3, #14
   15cdc:	mov	r2, #1
   15ce0:	ldr	r5, [pc, #232]	; 15dd0 <_start@@Base+0xfbc>
   15ce4:	strd	r6, [sp, #8]
   15ce8:	mov	r6, r0
   15cec:	mov	r7, r1
   15cf0:	ldr	r4, [pc, #220]	; 15dd4 <_start@@Base+0xfc0>
   15cf4:	strd	r8, [sp, #16]
   15cf8:	mov	r8, #10
   15cfc:	mov	r9, #9
   15d00:	str	lr, [sp, #24]
   15d04:	sub	sp, sp, #20
   15d08:	add	r5, pc, r5
   15d0c:	stm	sp, {r3, r5}
   15d10:	add	r4, pc, r4
   15d14:	ldr	r3, [pc, #188]	; 15dd8 <_start@@Base+0xfc4>
   15d18:	str	r4, [sp, #8]
   15d1c:	add	r3, pc, r3
   15d20:	bl	3c5a0 <flatcc_json_printer_union_field@@Base>
   15d24:	ldr	r3, [pc, #176]	; 15ddc <_start@@Base+0xfc8>
   15d28:	mov	r1, r7
   15d2c:	mov	r0, r6
   15d30:	mov	r2, #3
   15d34:	str	r8, [sp]
   15d38:	str	r5, [sp, #4]
   15d3c:	str	r4, [sp, #8]
   15d40:	add	r3, pc, r3
   15d44:	bl	3c5a0 <flatcc_json_printer_union_field@@Base>
   15d48:	ldr	r3, [pc, #144]	; 15de0 <_start@@Base+0xfcc>
   15d4c:	mov	r1, r7
   15d50:	mov	r0, r6
   15d54:	mov	r2, #5
   15d58:	str	r9, [sp]
   15d5c:	str	r5, [sp, #4]
   15d60:	str	r4, [sp, #8]
   15d64:	add	r3, pc, r3
   15d68:	bl	3c5a0 <flatcc_json_printer_union_field@@Base>
   15d6c:	ldr	r3, [pc, #112]	; 15de4 <_start@@Base+0xfd0>
   15d70:	mov	ip, #5
   15d74:	mov	r1, r7
   15d78:	mov	r0, r6
   15d7c:	mov	r2, #7
   15d80:	str	ip, [sp]
   15d84:	str	r5, [sp, #4]
   15d88:	str	r4, [sp, #8]
   15d8c:	add	r3, pc, r3
   15d90:	bl	3c5a0 <flatcc_json_printer_union_field@@Base>
   15d94:	ldr	r3, [pc, #76]	; 15de8 <_start@@Base+0xfd4>
   15d98:	mov	r2, r9
   15d9c:	mov	r1, r7
   15da0:	mov	r0, r6
   15da4:	str	r8, [sp]
   15da8:	str	r5, [sp, #4]
   15dac:	str	r4, [sp, #8]
   15db0:	add	r3, pc, r3
   15db4:	bl	3bf48 <flatcc_json_printer_union_vector_field@@Base>
   15db8:	add	sp, sp, #20
   15dbc:	ldrd	r4, [sp]
   15dc0:	ldrd	r6, [sp, #8]
   15dc4:	ldrd	r8, [sp, #16]
   15dc8:	add	sp, sp, #24
   15dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15dd0:	andeq	r0, r0, r4, asr #3
   15dd4:	ldrdeq	r0, [r0], -r4
   15dd8:	strdeq	r8, [r2], -ip
   15ddc:	andeq	r8, r2, r8, ror #15
   15de0:	ldrdeq	r8, [r2], -r0
   15de4:			; <UNDEFINED> instruction: 0x000287b4
   15de8:	muleq	r2, r8, r7
   15dec:	ldrb	r3, [r1, #8]
   15df0:	mov	r2, r1
   15df4:	mov	ip, r0
   15df8:	cmp	r3, #10
   15dfc:	bhi	15e24 <_start@@Base+0x1010>
   15e00:	cmp	r3, #9
   15e04:	bcs	15e48 <_start@@Base+0x1034>
   15e08:	cmp	r3, #2
   15e0c:	beq	15e54 <_start@@Base+0x1040>
   15e10:	cmp	r3, #8
   15e14:	bne	15e40 <_start@@Base+0x102c>
   15e18:	ldr	r2, [pc, #64]	; 15e60 <_start@@Base+0x104c>
   15e1c:	add	r2, pc, r2
   15e20:	b	3c9a4 <flatcc_json_printer_union_struct@@Base>
   15e24:	cmp	r3, #11
   15e28:	beq	15e34 <_start@@Base+0x1020>
   15e2c:	cmp	r3, #255	; 0xff
   15e30:	bne	15e44 <_start@@Base+0x1030>
   15e34:	mov	r1, r2
   15e38:	mov	r0, ip
   15e3c:	b	3ca78 <flatcc_json_printer_union_string@@Base>
   15e40:	bx	lr
   15e44:	bx	lr
   15e48:	ldr	r2, [pc, #20]	; 15e64 <_start@@Base+0x1050>
   15e4c:	add	r2, pc, r2
   15e50:	b	3c9a4 <flatcc_json_printer_union_struct@@Base>
   15e54:	ldr	r2, [pc, #12]	; 15e68 <_start@@Base+0x1054>
   15e58:	add	r2, pc, r2
   15e5c:	b	3c878 <flatcc_json_printer_union_table@@Base>
   15e60:	andeq	r0, r0, ip, ror r0
   15e64:	andeq	r0, r0, r8, lsl r0
   15e68:			; <UNDEFINED> instruction: 0xfffff2b8
   15e6c:	ldr	ip, [pc, #40]	; 15e9c <_start@@Base+0x1088>
   15e70:	mov	r3, #0
   15e74:	mov	r2, r1
   15e78:	push	{lr}		; (str lr, [sp, #-4]!)
   15e7c:	mov	lr, #10
   15e80:	sub	sp, sp, #12
   15e84:	mov	r1, r3
   15e88:	add	ip, pc, ip
   15e8c:	stm	sp, {ip, lr}
   15e90:	bl	35e98 <flatcc_json_printer_int32_struct_field@@Base>
   15e94:	add	sp, sp, #12
   15e98:	pop	{pc}		; (ldr pc, [sp], #4)
   15e9c:	andeq	r8, r2, ip, asr #13
   15ea0:	ldr	ip, [pc, #40]	; 15ed0 <_start@@Base+0x10bc>
   15ea4:	mov	r3, #0
   15ea8:	mov	r2, r1
   15eac:	push	{lr}		; (str lr, [sp, #-4]!)
   15eb0:	mov	lr, #11
   15eb4:	sub	sp, sp, #12
   15eb8:	mov	r1, r3
   15ebc:	add	ip, pc, ip
   15ec0:	stm	sp, {ip, lr}
   15ec4:	bl	3567c <flatcc_json_printer_uint16_struct_field@@Base>
   15ec8:	add	sp, sp, #12
   15ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed0:	andeq	r8, r2, r4, lsr #13
   15ed4:	cmp	r1, #9
   15ed8:	mov	r3, r0
   15edc:	beq	15f28 <_start@@Base+0x1114>
   15ee0:	bls	15f08 <_start@@Base+0x10f4>
   15ee4:	cmp	r1, #11
   15ee8:	beq	15f38 <_start@@Base+0x1124>
   15eec:	bcc	15f48 <_start@@Base+0x1134>
   15ef0:	cmp	r1, #255	; 0xff
   15ef4:	bne	15f58 <_start@@Base+0x1144>
   15ef8:	ldr	r1, [pc, #124]	; 15f7c <_start@@Base+0x1168>
   15efc:	mov	r2, #6
   15f00:	add	r1, pc, r1
   15f04:	b	32250 <flatcc_json_printer_enum@@Base>
   15f08:	cmp	r1, #2
   15f0c:	beq	15f6c <_start@@Base+0x1158>
   15f10:	cmp	r1, #8
   15f14:	bne	15f58 <_start@@Base+0x1144>
   15f18:	mov	r2, r1
   15f1c:	ldr	r1, [pc, #92]	; 15f80 <_start@@Base+0x116c>
   15f20:	add	r1, pc, r1
   15f24:	b	32250 <flatcc_json_printer_enum@@Base>
   15f28:	ldr	r1, [pc, #84]	; 15f84 <_start@@Base+0x1170>
   15f2c:	mov	r2, #5
   15f30:	add	r1, pc, r1
   15f34:	b	32250 <flatcc_json_printer_enum@@Base>
   15f38:	ldr	r1, [pc, #72]	; 15f88 <_start@@Base+0x1174>
   15f3c:	mov	r2, #5
   15f40:	add	r1, pc, r1
   15f44:	b	32250 <flatcc_json_printer_enum@@Base>
   15f48:	ldr	r1, [pc, #60]	; 15f8c <_start@@Base+0x1178>
   15f4c:	mov	r2, #7
   15f50:	add	r1, pc, r1
   15f54:	b	32250 <flatcc_json_printer_enum@@Base>
   15f58:	ldr	r1, [pc, #48]	; 15f90 <_start@@Base+0x117c>
   15f5c:	mov	r0, r3
   15f60:	mov	r2, #4
   15f64:	add	r1, pc, r1
   15f68:	b	32250 <flatcc_json_printer_enum@@Base>
   15f6c:	ldr	r1, [pc, #32]	; 15f94 <_start@@Base+0x1180>
   15f70:	mov	r2, #5
   15f74:	add	r1, pc, r1
   15f78:	b	32250 <flatcc_json_printer_enum@@Base>
   15f7c:	muleq	r2, r8, r6
   15f80:	andeq	r8, r2, r4, asr r6
   15f84:	andeq	r8, r2, r0, asr r6
   15f88:	andeq	r8, r2, r0, asr r6
   15f8c:	andeq	r8, r2, r8, lsr r6
   15f90:	muleq	r2, r0, r1
   15f94:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15f98:	strd	r4, [sp, #-20]!	; 0xffffffec
   15f9c:	mov	ip, #5
   15fa0:	mov	r4, #2
   15fa4:	ldr	r5, [pc, #168]	; 16054 <_start@@Base+0x1240>
   15fa8:	mov	r2, #0
   15fac:	strd	r6, [sp, #8]
   15fb0:	mov	r6, r0
   15fb4:	mov	r7, r1
   15fb8:	ldr	r3, [pc, #152]	; 16058 <_start@@Base+0x1244>
   15fbc:	str	lr, [sp, #16]
   15fc0:	sub	sp, sp, #20
   15fc4:	add	r5, pc, r5
   15fc8:	str	ip, [sp]
   15fcc:	add	r3, pc, r3
   15fd0:	strd	r4, [sp, #4]
   15fd4:	bl	348f0 <flatcc_json_printer_int8_enum_field@@Base>
   15fd8:	ldr	r3, [pc, #124]	; 1605c <_start@@Base+0x1248>
   15fdc:	mov	ip, #6
   15fe0:	mov	r1, r7
   15fe4:	mov	r0, r6
   15fe8:	mov	r2, #1
   15fec:	str	ip, [sp]
   15ff0:	strd	r4, [sp, #4]
   15ff4:	add	r3, pc, r3
   15ff8:	bl	348f0 <flatcc_json_printer_int8_enum_field@@Base>
   15ffc:	ldr	r3, [pc, #92]	; 16060 <_start@@Base+0x124c>
   16000:	mov	r2, r4
   16004:	mov	r1, r7
   16008:	mov	r0, r6
   1600c:	str	r4, [sp]
   16010:	str	r4, [sp, #4]
   16014:	add	r3, pc, r3
   16018:	bl	328f0 <flatcc_json_printer_uint8_field@@Base>
   1601c:	ldr	r3, [pc, #64]	; 16064 <_start@@Base+0x1250>
   16020:	mov	ip, #3
   16024:	mov	r1, r7
   16028:	mov	r0, r6
   1602c:	mov	r2, ip
   16030:	str	ip, [sp]
   16034:	str	r4, [sp, #4]
   16038:	add	r3, pc, r3
   1603c:	bl	328f0 <flatcc_json_printer_uint8_field@@Base>
   16040:	add	sp, sp, #20
   16044:	ldrd	r4, [sp]
   16048:	ldrd	r6, [sp, #8]
   1604c:	add	sp, sp, #16
   16050:	pop	{pc}		; (ldr pc, [sp], #4)
   16054:	muleq	r0, ip, r0
   16058:	andeq	r8, r2, r4, lsr r3
   1605c:	andeq	r8, r2, ip, lsr #11
   16060:	muleq	r2, r4, r5
   16064:	andeq	r8, r2, r4, ror r5
   16068:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1606c:	uxtb	r4, r1
   16070:	tst	r4, #244	; 0xf4
   16074:	strd	r6, [sp, #8]
   16078:	movne	r5, #1
   1607c:	moveq	r5, #0
   16080:	str	r8, [sp, #16]
   16084:	cmp	r4, #0
   16088:	str	lr, [sp, #20]
   1608c:	moveq	r5, #1
   16090:	cmp	r5, #0
   16094:	beq	160b0 <_start@@Base+0x129c>
   16098:	ldrd	r4, [sp]
   1609c:	ldrd	r6, [sp, #8]
   160a0:	ldr	r8, [sp, #16]
   160a4:	ldr	lr, [sp, #20]
   160a8:	add	sp, sp, #24
   160ac:	b	3207c <flatcc_json_printer_int8@@Base>
   160b0:	sub	r3, r4, #1
   160b4:	mov	r6, r0
   160b8:	tst	r3, r4
   160bc:	movne	r7, #1
   160c0:	moveq	r7, #0
   160c4:	mov	r1, r7
   160c8:	bl	322e0 <flatcc_json_printer_delimit_enum_flags@@Base>
   160cc:	ands	r1, r4, #1
   160d0:	bne	16104 <_start@@Base+0x12f0>
   160d4:	tst	r4, #2
   160d8:	bne	16128 <_start@@Base+0x1314>
   160dc:	tst	r4, #8
   160e0:	bne	1614c <_start@@Base+0x1338>
   160e4:	mov	r1, r7
   160e8:	mov	r0, r6
   160ec:	ldrd	r4, [sp]
   160f0:	ldrd	r6, [sp, #8]
   160f4:	ldr	r8, [sp, #16]
   160f8:	ldr	lr, [sp, #20]
   160fc:	add	sp, sp, #24
   16100:	b	322e0 <flatcc_json_printer_delimit_enum_flags@@Base>
   16104:	ldr	r2, [pc, #88]	; 16164 <_start@@Base+0x1350>
   16108:	mov	r1, r5
   1610c:	mov	r3, #3
   16110:	mov	r0, r6
   16114:	add	r2, pc, r2
   16118:	bl	32310 <flatcc_json_printer_enum_flag@@Base>
   1611c:	tst	r4, #2
   16120:	mov	r1, #1
   16124:	beq	160dc <_start@@Base+0x12c8>
   16128:	ldr	r2, [pc, #56]	; 16168 <_start@@Base+0x1354>
   1612c:	mov	r3, #5
   16130:	mov	r0, r6
   16134:	add	r5, r1, #1
   16138:	add	r2, pc, r2
   1613c:	bl	32310 <flatcc_json_printer_enum_flag@@Base>
   16140:	tst	r4, #8
   16144:	mov	r1, r5
   16148:	beq	160e4 <_start@@Base+0x12d0>
   1614c:	ldr	r2, [pc, #24]	; 1616c <_start@@Base+0x1358>
   16150:	mov	r3, #4
   16154:	mov	r0, r6
   16158:	add	r2, pc, r2
   1615c:	bl	32310 <flatcc_json_printer_enum_flag@@Base>
   16160:	b	160e4 <_start@@Base+0x12d0>
   16164:	muleq	r2, ip, r4
   16168:	andeq	r8, r2, ip, ror r4
   1616c:	andeq	r8, r2, r4, ror #8
   16170:	ldr	ip, [pc, #272]	; 16288 <_start@@Base+0x1474>
   16174:	mov	r3, #0
   16178:	mov	r2, r1
   1617c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16180:	mov	r4, r1
   16184:	mov	r1, r3
   16188:	strd	r6, [sp, #8]
   1618c:	mov	r7, #1
   16190:	mov	r5, r0
   16194:	str	lr, [sp, #16]
   16198:	sub	sp, sp, #20
   1619c:	mov	r6, #5
   161a0:	add	ip, pc, ip
   161a4:	str	ip, [sp]
   161a8:	str	r7, [sp, #4]
   161ac:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   161b0:	ldr	ip, [pc, #212]	; 1628c <_start@@Base+0x1478>
   161b4:	mov	r2, r4
   161b8:	mov	r1, r7
   161bc:	mov	r0, r5
   161c0:	mov	r3, #4
   161c4:	str	r7, [sp, #4]
   161c8:	add	ip, pc, ip
   161cc:	str	ip, [sp]
   161d0:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   161d4:	ldr	ip, [pc, #180]	; 16290 <_start@@Base+0x147c>
   161d8:	mov	r2, r4
   161dc:	mov	r0, r5
   161e0:	mov	r3, #8
   161e4:	mov	r1, #2
   161e8:	str	r7, [sp, #4]
   161ec:	add	ip, pc, ip
   161f0:	str	ip, [sp]
   161f4:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   161f8:	ldr	ip, [pc, #148]	; 16294 <_start@@Base+0x1480>
   161fc:	mov	r2, r4
   16200:	mov	r0, r5
   16204:	mov	r3, #16
   16208:	mov	r1, #3
   1620c:	str	r6, [sp, #4]
   16210:	add	ip, pc, ip
   16214:	str	ip, [sp]
   16218:	bl	36528 <flatcc_json_printer_double_struct_field@@Base>
   1621c:	ldr	lr, [pc, #116]	; 16298 <_start@@Base+0x1484>
   16220:	mov	r2, r4
   16224:	mov	r0, r5
   16228:	mov	r3, #24
   1622c:	mov	r1, #4
   16230:	ldr	ip, [pc, #100]	; 1629c <_start@@Base+0x1488>
   16234:	add	lr, pc, lr
   16238:	add	ip, pc, ip
   1623c:	str	ip, [sp]
   16240:	stmib	sp, {r6, lr}
   16244:	bl	36e24 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16248:	ldr	lr, [pc, #80]	; 162a0 <_start@@Base+0x148c>
   1624c:	mov	r2, r4
   16250:	mov	r1, r6
   16254:	mov	r0, r5
   16258:	mov	r3, #26
   1625c:	ldr	ip, [pc, #64]	; 162a4 <_start@@Base+0x1490>
   16260:	add	lr, pc, lr
   16264:	add	ip, pc, ip
   16268:	str	ip, [sp]
   1626c:	stmib	sp, {r6, lr}
   16270:	bl	3ca90 <flatcc_json_printer_embedded_struct_field@@Base>
   16274:	add	sp, sp, #20
   16278:	ldrd	r4, [sp]
   1627c:	ldrd	r6, [sp, #8]
   16280:	add	sp, sp, #16
   16284:	pop	{pc}		; (ldr pc, [sp], #4)
   16288:	andeq	r8, r2, r4, lsr r6
   1628c:	andeq	r8, r2, ip, ror r1
   16290:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   16294:			; <UNDEFINED> instruction: 0x000283b8
   16298:			; <UNDEFINED> instruction: 0xfffffe2c
   1629c:	muleq	r2, r8, r3
   162a0:			; <UNDEFINED> instruction: 0xfffff8d0
   162a4:	andeq	r8, r2, r4, ror r3
   162a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   162ac:	mov	r4, r1
   162b0:	mov	r1, r2
   162b4:	strd	r6, [sp, #8]
   162b8:	mov	r5, r2
   162bc:	strd	r8, [sp, #16]
   162c0:	mov	r8, r0
   162c4:	mov	r0, r4
   162c8:	str	sl, [sp, #24]
   162cc:	mov	r9, r3
   162d0:	str	lr, [sp, #28]
   162d4:	sub	sp, sp, #8
   162d8:	bl	14f08 <_start@@Base+0xf4>
   162dc:	add	r3, pc, #652	; 0x28c
   162e0:	ldrd	r2, [r3]
   162e4:	cmp	r1, r3
   162e8:	cmpeq	r0, r2
   162ec:	bhi	163b0 <_start@@Base+0x159c>
   162f0:	add	r7, pc, #640	; 0x280
   162f4:	ldrd	r6, [r7]
   162f8:	and	r2, r0, #-16777216	; 0xff000000
   162fc:	mov	r3, r1
   16300:	cmp	r1, r7
   16304:	cmpeq	r0, r6
   16308:	bhi	16340 <_start@@Base+0x152c>
   1630c:	add	r1, pc, #620	; 0x26c
   16310:	ldrd	r0, [r1]
   16314:	cmp	r3, r1
   16318:	cmpeq	r2, r0
   1631c:	beq	164e8 <_start@@Base+0x16d4>
   16320:	mov	r0, r4
   16324:	add	sp, sp, #8
   16328:	ldrd	r4, [sp]
   1632c:	ldrd	r6, [sp, #8]
   16330:	ldrd	r8, [sp, #16]
   16334:	ldr	sl, [sp, #24]
   16338:	add	sp, sp, #28
   1633c:	pop	{pc}		; (ldr pc, [sp], #4)
   16340:	add	r7, pc, #576	; 0x240
   16344:	ldrd	r6, [r7]
   16348:	cmp	r1, r7
   1634c:	cmpeq	r2, r6
   16350:	beq	16514 <_start@@Base+0x1700>
   16354:	add	r7, pc, #564	; 0x234
   16358:	ldrd	r6, [r7]
   1635c:	bic	r2, r0, #255	; 0xff
   16360:	cmp	r1, r7
   16364:	cmpeq	r2, r6
   16368:	bne	16320 <_start@@Base+0x150c>
   1636c:	ldr	r3, [sp, #44]	; 0x2c
   16370:	mov	r2, r5
   16374:	mov	r0, r8
   16378:	mov	r1, r4
   1637c:	str	r3, [sp]
   16380:	mov	r3, #7
   16384:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16388:	cmp	r4, r0
   1638c:	movne	r6, #10
   16390:	beq	16320 <_start@@Base+0x150c>
   16394:	ldr	r2, [sp, #40]	; 0x28
   16398:	mov	r7, #0
   1639c:	mov	r3, #0
   163a0:	mov	r4, r0
   163a4:	strd	r6, [r2]
   163a8:	str	r3, [r9]
   163ac:	b	16320 <_start@@Base+0x150c>
   163b0:	add	r3, pc, #480	; 0x1e0
   163b4:	ldrd	r2, [r3]
   163b8:	cmp	r1, r3
   163bc:	cmpeq	r0, r2
   163c0:	bhi	1641c <_start@@Base+0x1608>
   163c4:	add	r7, pc, #468	; 0x1d4
   163c8:	ldrd	r6, [r7]
   163cc:	mov	sl, #0
   163d0:	cmp	r1, r7
   163d4:	cmpeq	sl, r6
   163d8:	bne	16320 <_start@@Base+0x150c>
   163dc:	ldr	r3, [sp, #44]	; 0x2c
   163e0:	mov	r2, r5
   163e4:	mov	r0, r8
   163e8:	mov	r1, r4
   163ec:	str	r3, [sp]
   163f0:	mov	r3, #4
   163f4:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   163f8:	cmp	r4, r0
   163fc:	beq	16320 <_start@@Base+0x150c>
   16400:	ldr	r1, [sp, #40]	; 0x28
   16404:	mov	r2, #0
   16408:	mov	r3, #0
   1640c:	mov	r4, r0
   16410:	strd	r2, [r1]
   16414:	str	sl, [r9]
   16418:	b	16320 <_start@@Base+0x150c>
   1641c:	add	r3, pc, #388	; 0x184
   16420:	ldrd	r2, [r3]
   16424:	cmp	r1, r3
   16428:	cmpeq	r0, r2
   1642c:	bls	164a4 <_start@@Base+0x1690>
   16430:	add	r7, pc, #376	; 0x178
   16434:	ldrd	r6, [r7]
   16438:	lsr	r2, r0, #16
   1643c:	lsl	r2, r2, #16
   16440:	cmp	r1, r7
   16444:	cmpeq	r2, r6
   16448:	beq	16540 <_start@@Base+0x172c>
   1644c:	add	r3, pc, #356	; 0x164
   16450:	ldrd	r2, [r3]
   16454:	cmp	r1, r3
   16458:	cmpeq	r0, r2
   1645c:	bne	16320 <_start@@Base+0x150c>
   16460:	ldr	r3, [sp, #44]	; 0x2c
   16464:	mov	r2, r5
   16468:	mov	r0, r8
   1646c:	mov	r1, r4
   16470:	str	r3, [sp]
   16474:	mov	r3, #8
   16478:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   1647c:	cmp	r4, r0
   16480:	beq	16320 <_start@@Base+0x150c>
   16484:	ldr	r2, [sp, #40]	; 0x28
   16488:	mov	r4, r0
   1648c:	mov	r1, #0
   16490:	mov	r0, #8
   16494:	mov	r3, #0
   16498:	strd	r0, [r2]
   1649c:	str	r3, [r9]
   164a0:	b	16320 <_start@@Base+0x150c>
   164a4:	add	r7, pc, #276	; 0x114
   164a8:	ldrd	r6, [r7]
   164ac:	and	r2, r0, #-16777216	; 0xff000000
   164b0:	cmp	r1, r7
   164b4:	cmpeq	r2, r6
   164b8:	bne	16320 <_start@@Base+0x150c>
   164bc:	ldr	r3, [sp, #44]	; 0x2c
   164c0:	mov	r2, r5
   164c4:	mov	r0, r8
   164c8:	mov	r1, r4
   164cc:	str	r3, [sp]
   164d0:	mov	r3, #5
   164d4:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   164d8:	cmp	r4, r0
   164dc:	movne	r6, #11
   164e0:	bne	16394 <_start@@Base+0x1580>
   164e4:	b	16320 <_start@@Base+0x150c>
   164e8:	ldr	r3, [sp, #44]	; 0x2c
   164ec:	mov	r2, r5
   164f0:	mov	r0, r8
   164f4:	mov	r1, r4
   164f8:	str	r3, [sp]
   164fc:	mov	r3, #5
   16500:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16504:	cmp	r4, r0
   16508:	movne	r6, #9
   1650c:	bne	16394 <_start@@Base+0x1580>
   16510:	b	16320 <_start@@Base+0x150c>
   16514:	ldr	r3, [sp, #44]	; 0x2c
   16518:	mov	r2, r5
   1651c:	mov	r0, r8
   16520:	mov	r1, r4
   16524:	str	r3, [sp]
   16528:	mov	r3, #5
   1652c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16530:	cmp	r4, r0
   16534:	movne	r6, #2
   16538:	bne	16394 <_start@@Base+0x1580>
   1653c:	b	16320 <_start@@Base+0x150c>
   16540:	ldr	r3, [sp, #44]	; 0x2c
   16544:	mov	r2, r5
   16548:	mov	r0, r8
   1654c:	mov	r1, r4
   16550:	str	r3, [sp]
   16554:	mov	r3, #6
   16558:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   1655c:	cmp	r4, r0
   16560:	beq	16320 <_start@@Base+0x150c>
   16564:	mov	r6, #255	; 0xff
   16568:	b	16394 <_start@@Base+0x1580>
   1656c:	nop	{0}
   16570:			; <UNDEFINED> instruction: 0xffffffff
   16574:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16578:			; <UNDEFINED> instruction: 0x46616dff
   1657c:	rsbmi	r6, pc, #428	; 0x1ac
   16580:	strvs	r0, [r0, #-0]
   16584:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16588:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1658c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16590:	strbtmi	r6, [r1], -r0, lsl #28
   16594:	rsbmi	r6, pc, #428	; 0x1ac
   16598:	ldrshvc	pc, [pc, #255]	; 1669f <_start@@Base+0x188b>	; <UNPREDICTABLE>
   1659c:	svcmi	0x00746865
   165a0:	andeq	r0, r0, r0
   165a4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   165a8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   165ac:	rsbpl	r7, r1, #117	; 0x75
   165b0:	strbvs	r0, [r4, #-0]!
   165b4:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   165b8:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   165bc:	rsbpl	r7, r1, #117	; 0x75
   165c0:	andvc	r0, r0, #0
   165c4:	svcmi	0x00746865
   165c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165cc:	mov	r4, r1
   165d0:	mov	r1, r2
   165d4:	strd	r6, [sp, #8]
   165d8:	mov	r5, r2
   165dc:	strd	r8, [sp, #16]
   165e0:	mov	r8, r0
   165e4:	mov	r0, r4
   165e8:	strd	sl, [sp, #24]
   165ec:	mov	r9, r3
   165f0:	str	lr, [sp, #32]
   165f4:	sub	sp, sp, #12
   165f8:	bl	14f08 <_start@@Base+0xf4>
   165fc:	add	r3, pc, #524	; 0x20c
   16600:	ldrd	r2, [r3]
   16604:	cmp	r1, r3
   16608:	cmpeq	r0, r2
   1660c:	bhi	1664c <_start@@Base+0x1838>
   16610:	add	r7, pc, #512	; 0x200
   16614:	ldrd	r6, [r7]
   16618:	bic	r3, r1, #255	; 0xff
   1661c:	mov	sl, #0
   16620:	cmp	r3, r7
   16624:	cmpeq	sl, r6
   16628:	beq	16728 <_start@@Base+0x1914>
   1662c:	mov	r0, r4
   16630:	add	sp, sp, #12
   16634:	ldrd	r4, [sp]
   16638:	ldrd	r6, [sp, #8]
   1663c:	ldrd	r8, [sp, #16]
   16640:	ldrd	sl, [sp, #24]
   16644:	add	sp, sp, #32
   16648:	pop	{pc}		; (ldr pc, [sp], #4)
   1664c:	add	r3, pc, #460	; 0x1cc
   16650:	ldrd	r2, [r3]
   16654:	cmp	r1, r3
   16658:	cmpeq	r0, r2
   1665c:	beq	167e0 <_start@@Base+0x19cc>
   16660:	add	r7, pc, #448	; 0x1c0
   16664:	ldrd	r6, [r7]
   16668:	bic	r2, r0, #255	; 0xff
   1666c:	cmp	r1, r7
   16670:	cmpeq	r2, r6
   16674:	beq	167a0 <_start@@Base+0x198c>
   16678:	add	r7, pc, #432	; 0x1b0
   1667c:	ldrd	r6, [r7]
   16680:	mov	sl, #0
   16684:	cmp	r1, r7
   16688:	cmpeq	sl, r6
   1668c:	beq	16764 <_start@@Base+0x1950>
   16690:	add	r3, pc, #416	; 0x1a0
   16694:	ldrd	r2, [r3]
   16698:	cmp	r1, r3
   1669c:	cmpeq	r0, r2
   166a0:	bne	1662c <_start@@Base+0x1818>
   166a4:	mov	r1, r5
   166a8:	add	r0, r4, #8
   166ac:	bl	14f08 <_start@@Base+0xf4>
   166b0:	add	r3, pc, #392	; 0x188
   166b4:	ldrd	r2, [r3]
   166b8:	cmp	r1, r3
   166bc:	cmpeq	r0, r2
   166c0:	bne	1662c <_start@@Base+0x1818>
   166c4:	add	r7, pc, #380	; 0x17c
   166c8:	ldrd	r6, [r7]
   166cc:	add	fp, r4, #16
   166d0:	mov	r1, r5
   166d4:	mov	r0, fp
   166d8:	bl	14f08 <_start@@Base+0xf4>
   166dc:	bic	r2, r0, #255	; 0xff
   166e0:	cmp	r1, r7
   166e4:	cmpeq	r2, r6
   166e8:	bne	1662c <_start@@Base+0x1818>
   166ec:	ldr	r3, [sp, #52]	; 0x34
   166f0:	mov	r2, r5
   166f4:	mov	r0, r8
   166f8:	mov	r1, fp
   166fc:	str	r3, [sp]
   16700:	mov	r3, #7
   16704:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16708:	cmp	fp, r0
   1670c:	beq	1662c <_start@@Base+0x1818>
   16710:	ldr	r1, [sp, #48]	; 0x30
   16714:	mov	r2, #2
   16718:	mov	r3, #0
   1671c:	strd	r2, [r1]
   16720:	str	sl, [r9]
   16724:	b	16630 <_start@@Base+0x181c>
   16728:	ldr	r3, [sp, #52]	; 0x34
   1672c:	mov	r2, r5
   16730:	mov	r0, r8
   16734:	mov	r1, r4
   16738:	str	r3, [sp]
   1673c:	mov	r3, #3
   16740:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16744:	cmp	r4, r0
   16748:	beq	16630 <_start@@Base+0x181c>
   1674c:	ldr	r1, [sp, #48]	; 0x30
   16750:	mov	r2, #4
   16754:	mov	r3, #0
   16758:	strd	r2, [r1]
   1675c:	str	sl, [r9]
   16760:	b	16630 <_start@@Base+0x181c>
   16764:	ldr	r3, [sp, #52]	; 0x34
   16768:	mov	r2, r5
   1676c:	mov	r0, r8
   16770:	mov	r1, r4
   16774:	str	r3, [sp]
   16778:	mov	r3, #4
   1677c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16780:	cmp	r4, r0
   16784:	beq	16630 <_start@@Base+0x181c>
   16788:	ldr	r1, [sp, #48]	; 0x30
   1678c:	mov	r2, #0
   16790:	mov	r3, #0
   16794:	strd	r2, [r1]
   16798:	str	sl, [r9]
   1679c:	b	16630 <_start@@Base+0x181c>
   167a0:	ldr	r3, [sp, #52]	; 0x34
   167a4:	mov	r2, r5
   167a8:	mov	r0, r8
   167ac:	mov	r1, r4
   167b0:	str	r3, [sp]
   167b4:	mov	r3, #7
   167b8:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   167bc:	cmp	r4, r0
   167c0:	beq	1662c <_start@@Base+0x1818>
   167c4:	mov	r4, #1
   167c8:	ldr	r2, [sp, #48]	; 0x30
   167cc:	mov	r5, #0
   167d0:	mov	r3, #0
   167d4:	strd	r4, [r2]
   167d8:	str	r3, [r9]
   167dc:	b	16630 <_start@@Base+0x181c>
   167e0:	ldr	r3, [sp, #52]	; 0x34
   167e4:	mov	r1, r4
   167e8:	mov	r2, r5
   167ec:	mov	r0, r8
   167f0:	str	r3, [sp]
   167f4:	mov	r3, #8
   167f8:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   167fc:	cmp	r4, r0
   16800:	movne	r4, #3
   16804:	bne	167c8 <_start@@Base+0x19b4>
   16808:	b	1662c <_start@@Base+0x1818>
   1680c:	nop	{0}
   16810:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16814:	stclmi	14, cr6, [pc, #-460]!	; 16650 <_start@@Base+0x183c>
   16818:	andeq	r0, r0, r0
   1681c:	cmnmi	ip, r0, lsl #8
   16820:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16824:	stclmi	14, cr6, [pc, #-460]!	; 16660 <_start@@Base+0x184c>
   16828:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1682c:	stclmi	14, cr6, [pc, #-460]!	; 16668 <_start@@Base+0x1854>
   16830:	andeq	r0, r0, r0
   16834:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16838:	cmnpl	r9, #112, 26	; 0x1c00
   1683c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16840:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16844:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16848:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1684c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16850:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16854:	mov	r4, r1
   16858:	mov	r5, r0
   1685c:	mov	r1, r2
   16860:	mov	r0, r4
   16864:	strd	r6, [sp, #8]
   16868:	strd	r8, [sp, #16]
   1686c:	strd	sl, [sp, #24]
   16870:	mov	sl, r2
   16874:	mov	fp, r3
   16878:	str	lr, [sp, #32]
   1687c:	sub	sp, sp, #12
   16880:	bl	14f08 <_start@@Base+0xf4>
   16884:	add	r3, pc, #316	; 0x13c
   16888:	ldrd	r2, [r3]
   1688c:	cmp	r1, r3
   16890:	cmpeq	r0, r2
   16894:	bhi	168d0 <_start@@Base+0x1abc>
   16898:	add	r7, pc, #304	; 0x130
   1689c:	ldrd	r6, [r7]
   168a0:	mov	r8, #0
   168a4:	cmp	r1, r7
   168a8:	cmpeq	r8, r6
   168ac:	beq	16944 <_start@@Base+0x1b30>
   168b0:	mov	r0, r4
   168b4:	add	sp, sp, #12
   168b8:	ldrd	r4, [sp]
   168bc:	ldrd	r6, [sp, #8]
   168c0:	ldrd	r8, [sp, #16]
   168c4:	ldrd	sl, [sp, #24]
   168c8:	add	sp, sp, #32
   168cc:	pop	{pc}		; (ldr pc, [sp], #4)
   168d0:	add	r9, pc, #256	; 0x100
   168d4:	ldrd	r8, [r9]
   168d8:	lsr	r6, r0, #16
   168dc:	lsl	r6, r6, #16
   168e0:	cmp	r1, r9
   168e4:	cmpeq	r6, r8
   168e8:	beq	16984 <_start@@Base+0x1b70>
   168ec:	add	r7, pc, #236	; 0xec
   168f0:	ldrd	r6, [r7]
   168f4:	mov	r8, #0
   168f8:	cmp	r1, r7
   168fc:	cmpeq	r8, r6
   16900:	bne	168b0 <_start@@Base+0x1a9c>
   16904:	ldr	r3, [sp, #52]	; 0x34
   16908:	mov	r2, sl
   1690c:	mov	r0, r5
   16910:	mov	r1, r4
   16914:	str	r3, [sp]
   16918:	mov	r3, #4
   1691c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16920:	cmp	r4, r0
   16924:	beq	168b0 <_start@@Base+0x1a9c>
   16928:	add	r3, pc, #184	; 0xb8
   1692c:	ldrd	r2, [r3]
   16930:	mov	r4, r0
   16934:	ldr	r1, [sp, #48]	; 0x30
   16938:	strd	r2, [r1]
   1693c:	str	r8, [fp]
   16940:	b	168b0 <_start@@Base+0x1a9c>
   16944:	ldr	r3, [sp, #52]	; 0x34
   16948:	mov	r2, sl
   1694c:	mov	r0, r5
   16950:	mov	r1, r4
   16954:	str	r3, [sp]
   16958:	mov	r3, #4
   1695c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16960:	cmp	r4, r0
   16964:	beq	168b0 <_start@@Base+0x1a9c>
   16968:	ldr	r1, [sp, #48]	; 0x30
   1696c:	mov	r2, #3
   16970:	mov	r3, #0
   16974:	mov	r4, r0
   16978:	strd	r2, [r1]
   1697c:	str	r8, [fp]
   16980:	b	168b0 <_start@@Base+0x1a9c>
   16984:	ldr	r3, [sp, #52]	; 0x34
   16988:	mov	r2, sl
   1698c:	mov	r0, r5
   16990:	mov	r1, r4
   16994:	str	r3, [sp]
   16998:	mov	r3, #6
   1699c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   169a0:	cmp	r4, r0
   169a4:	beq	168b0 <_start@@Base+0x1a9c>
   169a8:	ldr	r2, [sp, #48]	; 0x30
   169ac:	mvn	r6, #1
   169b0:	mvn	r7, #0
   169b4:	mov	r3, #1
   169b8:	mov	r4, r0
   169bc:	strd	r6, [r2]
   169c0:	str	r3, [fp]
   169c4:	b	168b0 <_start@@Base+0x1a9c>
   169c8:			; <UNDEFINED> instruction: 0xffffffff
   169cc:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   169d0:	andeq	r0, r0, r0
   169d4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   169d8:	strbvs	r0, [r7, #-0]!
   169dc:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   169e0:	andeq	r0, r0, r0
   169e4:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   169e8:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   169ec:	andeq	r0, r0, r0
   169f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   169f4:	mov	r4, r1
   169f8:	mov	r1, r2
   169fc:	strd	r6, [sp, #8]
   16a00:	mov	r5, r2
   16a04:	strd	r8, [sp, #16]
   16a08:	mov	r8, r0
   16a0c:	mov	r0, r4
   16a10:	str	sl, [sp, #24]
   16a14:	mov	r9, r3
   16a18:	str	lr, [sp, #28]
   16a1c:	sub	sp, sp, #8
   16a20:	bl	14f08 <_start@@Base+0xf4>
   16a24:	add	r3, pc, #412	; 0x19c
   16a28:	ldrd	r2, [r3]
   16a2c:	cmp	r1, r3
   16a30:	cmpeq	r0, r2
   16a34:	bhi	16a70 <_start@@Base+0x1c5c>
   16a38:	add	r7, pc, #400	; 0x190
   16a3c:	ldrd	r6, [r7]
   16a40:	mov	sl, #0
   16a44:	cmp	r1, r7
   16a48:	cmpeq	sl, r6
   16a4c:	beq	16b40 <_start@@Base+0x1d2c>
   16a50:	mov	r0, r4
   16a54:	add	sp, sp, #8
   16a58:	ldrd	r4, [sp]
   16a5c:	ldrd	r6, [sp, #8]
   16a60:	ldrd	r8, [sp, #16]
   16a64:	ldr	sl, [sp, #24]
   16a68:	add	sp, sp, #28
   16a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a70:	add	r3, pc, #352	; 0x160
   16a74:	ldrd	r2, [r3]
   16a78:	cmp	r1, r3
   16a7c:	cmpeq	r0, r2
   16a80:	bhi	16ac8 <_start@@Base+0x1cb4>
   16a84:	add	r7, pc, #340	; 0x154
   16a88:	ldrd	r6, [r7]
   16a8c:	mov	sl, #0
   16a90:	cmp	r1, r7
   16a94:	cmpeq	sl, r6
   16a98:	bne	16a50 <_start@@Base+0x1c3c>
   16a9c:	ldr	r3, [sp, #44]	; 0x2c
   16aa0:	mov	r2, r5
   16aa4:	mov	r0, r8
   16aa8:	mov	r1, r4
   16aac:	str	r3, [sp]
   16ab0:	mov	r3, #4
   16ab4:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16ab8:	cmp	r4, r0
   16abc:	beq	16a50 <_start@@Base+0x1c3c>
   16ac0:	mov	r2, #42	; 0x2a
   16ac4:	b	16b68 <_start@@Base+0x1d54>
   16ac8:	add	r7, pc, #280	; 0x118
   16acc:	ldrd	r6, [r7]
   16ad0:	bic	r2, r0, #255	; 0xff
   16ad4:	cmp	r1, r7
   16ad8:	cmpeq	r2, r6
   16adc:	beq	16b80 <_start@@Base+0x1d6c>
   16ae0:	add	r7, pc, #264	; 0x108
   16ae4:	ldrd	r6, [r7]
   16ae8:	lsr	r2, r0, #16
   16aec:	lsl	r2, r2, #16
   16af0:	cmp	r1, r7
   16af4:	cmpeq	r2, r6
   16af8:	bne	16a50 <_start@@Base+0x1c3c>
   16afc:	ldr	r3, [sp, #44]	; 0x2c
   16b00:	mov	r2, r5
   16b04:	mov	r0, r8
   16b08:	mov	r1, r4
   16b0c:	str	r3, [sp]
   16b10:	mov	r3, #6
   16b14:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16b18:	cmp	r4, r0
   16b1c:	beq	16a50 <_start@@Base+0x1c3c>
   16b20:	ldr	r2, [sp, #40]	; 0x28
   16b24:	mov	r4, r0
   16b28:	mvn	r1, #0
   16b2c:	mvn	r0, #1
   16b30:	mov	r3, #1
   16b34:	strd	r0, [r2]
   16b38:	str	r3, [r9]
   16b3c:	b	16a50 <_start@@Base+0x1c3c>
   16b40:	ldr	r3, [sp, #44]	; 0x2c
   16b44:	mov	r2, r5
   16b48:	mov	r0, r8
   16b4c:	mov	r1, r4
   16b50:	str	r3, [sp]
   16b54:	mov	r3, #4
   16b58:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16b5c:	cmp	r4, r0
   16b60:	movne	r2, #2
   16b64:	beq	16a50 <_start@@Base+0x1c3c>
   16b68:	ldr	r1, [sp, #40]	; 0x28
   16b6c:	mov	r3, #0
   16b70:	mov	r4, r0
   16b74:	strd	r2, [r1]
   16b78:	str	sl, [r9]
   16b7c:	b	16a50 <_start@@Base+0x1c3c>
   16b80:	ldr	r3, [sp, #44]	; 0x2c
   16b84:	mov	r2, r5
   16b88:	mov	r0, r8
   16b8c:	mov	r1, r4
   16b90:	str	r3, [sp]
   16b94:	mov	r3, #7
   16b98:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16b9c:	cmp	r4, r0
   16ba0:	beq	16a50 <_start@@Base+0x1c3c>
   16ba4:	ldr	r2, [sp, #40]	; 0x28
   16ba8:	mvn	r6, #0
   16bac:	mvn	r7, #0
   16bb0:	mov	r3, #1
   16bb4:	mov	r4, r0
   16bb8:	strd	r6, [r2]
   16bbc:	str	r3, [r9]
   16bc0:	b	16a50 <_start@@Base+0x1c3c>
   16bc4:	nop	{0}
   16bc8:			; <UNDEFINED> instruction: 0xffffffff
   16bcc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16bd0:	andeq	r0, r0, r0
   16bd4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16bd8:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16bdc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16be0:	andeq	r0, r0, r0
   16be4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16be8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16bec:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16bf0:	strbvs	r0, [r7, #-0]!
   16bf4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16bf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16bfc:	mov	r4, r1
   16c00:	mov	r5, r0
   16c04:	mov	r1, r2
   16c08:	mov	r0, r4
   16c0c:	strd	r6, [sp, #8]
   16c10:	strd	r8, [sp, #16]
   16c14:	mov	r6, #0
   16c18:	add	r9, pc, #312	; 0x138
   16c1c:	ldrd	r8, [r9]
   16c20:	strd	sl, [sp, #24]
   16c24:	mov	sl, r2
   16c28:	mov	fp, r3
   16c2c:	str	lr, [sp, #32]
   16c30:	sub	sp, sp, #12
   16c34:	bl	14f08 <_start@@Base+0xf4>
   16c38:	cmp	r1, r9
   16c3c:	cmpeq	r0, r8
   16c40:	bhi	16c78 <_start@@Base+0x1e64>
   16c44:	add	r3, pc, #276	; 0x114
   16c48:	ldrd	r2, [r3]
   16c4c:	cmp	r1, r3
   16c50:	cmpeq	r6, r2
   16c54:	beq	16ce4 <_start@@Base+0x1ed0>
   16c58:	mov	r0, r4
   16c5c:	add	sp, sp, #12
   16c60:	ldrd	r4, [sp]
   16c64:	ldrd	r6, [sp, #8]
   16c68:	ldrd	r8, [sp, #16]
   16c6c:	ldrd	sl, [sp, #24]
   16c70:	add	sp, sp, #32
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	add	r3, pc, #232	; 0xe8
   16c7c:	ldrd	r2, [r3]
   16c80:	cmp	r1, r3
   16c84:	cmpeq	r6, r2
   16c88:	beq	16d28 <_start@@Base+0x1f14>
   16c8c:	add	r3, pc, #220	; 0xdc
   16c90:	ldrd	r2, [r3]
   16c94:	cmp	r1, r3
   16c98:	cmpeq	r6, r2
   16c9c:	bne	16c58 <_start@@Base+0x1e44>
   16ca0:	ldr	r3, [sp, #52]	; 0x34
   16ca4:	mov	r2, sl
   16ca8:	mov	r0, r5
   16cac:	mov	r1, r4
   16cb0:	str	r3, [sp]
   16cb4:	mov	r3, #4
   16cb8:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16cbc:	cmp	r4, r0
   16cc0:	beq	16c58 <_start@@Base+0x1e44>
   16cc4:	ldr	r2, [sp, #48]	; 0x30
   16cc8:	mov	r4, r0
   16ccc:	mvn	r1, #0
   16cd0:	mvn	r0, #10
   16cd4:	mov	r3, #1
   16cd8:	strd	r0, [r2]
   16cdc:	str	r3, [fp]
   16ce0:	b	16c58 <_start@@Base+0x1e44>
   16ce4:	ldr	r3, [sp, #52]	; 0x34
   16ce8:	mov	r2, sl
   16cec:	mov	r0, r5
   16cf0:	mov	r1, r4
   16cf4:	str	r3, [sp]
   16cf8:	mov	r3, #4
   16cfc:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16d00:	cmp	r4, r0
   16d04:	mvnne	r6, #11
   16d08:	beq	16c58 <_start@@Base+0x1e44>
   16d0c:	ldr	r2, [sp, #48]	; 0x30
   16d10:	mvn	r7, #0
   16d14:	mov	r3, #1
   16d18:	mov	r4, r0
   16d1c:	strd	r6, [r2]
   16d20:	str	r3, [fp]
   16d24:	b	16c58 <_start@@Base+0x1e44>
   16d28:	ldr	r3, [sp, #52]	; 0x34
   16d2c:	mov	r2, sl
   16d30:	mov	r0, r5
   16d34:	mov	r1, r4
   16d38:	str	r3, [sp]
   16d3c:	mov	r3, #4
   16d40:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16d44:	cmp	r4, r0
   16d48:	beq	16c58 <_start@@Base+0x1e44>
   16d4c:	mvn	r6, #9
   16d50:	b	16d0c <_start@@Base+0x1ef8>
   16d54:	nop	{0}
   16d58:			; <UNDEFINED> instruction: 0xffffffff
   16d5c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16d60:	andeq	r0, r0, r0
   16d64:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16d68:	andeq	r0, r0, r0
   16d6c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16d70:	andeq	r0, r0, r0
   16d74:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16d78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16d7c:	mov	r4, r1
   16d80:	mov	r1, r2
   16d84:	strd	r6, [sp, #8]
   16d88:	mov	r5, r2
   16d8c:	strd	r8, [sp, #16]
   16d90:	mov	r8, r0
   16d94:	mov	r0, r4
   16d98:	str	sl, [sp, #24]
   16d9c:	mov	r9, r3
   16da0:	str	lr, [sp, #28]
   16da4:	sub	sp, sp, #8
   16da8:	bl	14f08 <_start@@Base+0xf4>
   16dac:	add	r3, pc, #292	; 0x124
   16db0:	ldrd	r2, [r3]
   16db4:	cmp	r1, r3
   16db8:	cmpeq	r0, r2
   16dbc:	bhi	16df8 <_start@@Base+0x1fe4>
   16dc0:	add	r7, pc, #280	; 0x118
   16dc4:	ldrd	r6, [r7]
   16dc8:	mov	sl, #0
   16dcc:	cmp	r1, r7
   16dd0:	cmpeq	sl, r6
   16dd4:	beq	16e6c <_start@@Base+0x2058>
   16dd8:	mov	r0, r4
   16ddc:	add	sp, sp, #8
   16de0:	ldrd	r4, [sp]
   16de4:	ldrd	r6, [sp, #8]
   16de8:	ldrd	r8, [sp, #16]
   16dec:	ldr	sl, [sp, #24]
   16df0:	add	sp, sp, #28
   16df4:	pop	{pc}		; (ldr pc, [sp], #4)
   16df8:	add	r7, pc, #232	; 0xe8
   16dfc:	ldrd	r6, [r7]
   16e00:	bic	r3, r1, #255	; 0xff
   16e04:	mov	sl, #0
   16e08:	cmp	r3, r7
   16e0c:	cmpeq	sl, r6
   16e10:	beq	16eac <_start@@Base+0x2098>
   16e14:	add	r7, pc, #212	; 0xd4
   16e18:	ldrd	r6, [r7]
   16e1c:	and	r2, r0, #-16777216	; 0xff000000
   16e20:	cmp	r1, r7
   16e24:	cmpeq	r2, r6
   16e28:	bne	16dd8 <_start@@Base+0x1fc4>
   16e2c:	ldr	r3, [sp, #44]	; 0x2c
   16e30:	mov	r2, r5
   16e34:	mov	r0, r8
   16e38:	mov	r1, r4
   16e3c:	str	r3, [sp]
   16e40:	mov	r3, #5
   16e44:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16e48:	cmp	r4, r0
   16e4c:	beq	16dd8 <_start@@Base+0x1fc4>
   16e50:	ldr	r1, [sp, #40]	; 0x28
   16e54:	mov	r2, #2
   16e58:	mov	r3, #0
   16e5c:	mov	r4, r0
   16e60:	strd	r2, [r1]
   16e64:	str	sl, [r9]
   16e68:	b	16dd8 <_start@@Base+0x1fc4>
   16e6c:	ldr	r3, [sp, #44]	; 0x2c
   16e70:	mov	r2, r5
   16e74:	mov	r0, r8
   16e78:	mov	r1, r4
   16e7c:	str	r3, [sp]
   16e80:	mov	r3, #4
   16e84:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16e88:	cmp	r4, r0
   16e8c:	movne	r2, #8
   16e90:	beq	16dd8 <_start@@Base+0x1fc4>
   16e94:	ldr	r1, [sp, #40]	; 0x28
   16e98:	mov	r3, #0
   16e9c:	mov	r4, r0
   16ea0:	strd	r2, [r1]
   16ea4:	str	sl, [r9]
   16ea8:	b	16dd8 <_start@@Base+0x1fc4>
   16eac:	ldr	r3, [sp, #44]	; 0x2c
   16eb0:	mov	r2, r5
   16eb4:	mov	r0, r8
   16eb8:	mov	r1, r4
   16ebc:	str	r3, [sp]
   16ec0:	mov	r3, #3
   16ec4:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   16ec8:	cmp	r4, r0
   16ecc:	beq	16dd8 <_start@@Base+0x1fc4>
   16ed0:	mov	r2, #1
   16ed4:	b	16e94 <_start@@Base+0x2080>
   16ed8:	ldclvs	15, cr15, [pc, #1020]!	; 172dc <_start@@Base+0x24c8>
   16edc:	ldrbmi	r6, [r2, -r5, ror #10]!
   16ee0:	andeq	r0, r0, r0
   16ee4:	rsbmi	r7, ip, #423624704	; 0x19400000
   16ee8:	andeq	r0, r0, r0
   16eec:	rsbpl	r6, r5, #0, 8
   16ef0:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16ef4:	ldrbmi	r6, [r2, -r5, ror #10]!
   16ef8:	sub	r3, r2, r1
   16efc:	cmp	r3, #1
   16f00:	ble	16f14 <_start@@Base+0x2100>
   16f04:	ldrb	r3, [r1]
   16f08:	cmp	r3, #32
   16f0c:	bhi	16f18 <_start@@Base+0x2104>
   16f10:	beq	16f20 <_start@@Base+0x210c>
   16f14:	b	2c5cc <flatcc_json_parser_space_ext@@Base>
   16f18:	mov	r0, r1
   16f1c:	bx	lr
   16f20:	ldrb	r3, [r1, #1]
   16f24:	cmp	r3, #32
   16f28:	bls	16f14 <_start@@Base+0x2100>
   16f2c:	add	r0, r1, #1
   16f30:	bx	lr
   16f34:	mov	r3, #8
   16f38:	mov	r1, #0
   16f3c:	str	r4, [sp, #-8]!
   16f40:	mov	r2, r3
   16f44:	mov	r4, r0
   16f48:	str	lr, [sp, #4]
   16f4c:	bl	29be8 <flatcc_verify_field@@Base>
   16f50:	cmp	r0, #0
   16f54:	beq	16f64 <_start@@Base+0x2150>
   16f58:	ldr	r4, [sp]
   16f5c:	add	sp, sp, #4
   16f60:	pop	{pc}		; (ldr pc, [sp], #4)
   16f64:	mov	r3, #4
   16f68:	mov	r0, r4
   16f6c:	ldr	r4, [sp]
   16f70:	mov	r2, r3
   16f74:	mov	r1, #1
   16f78:	ldr	lr, [sp, #4]
   16f7c:	add	sp, sp, #8
   16f80:	b	29be8 <flatcc_verify_field@@Base>
   16f84:	mov	r3, #1
   16f88:	mov	r1, #0
   16f8c:	str	r4, [sp, #-8]!
   16f90:	mov	r2, r3
   16f94:	mov	r4, r0
   16f98:	str	lr, [sp, #4]
   16f9c:	bl	29be8 <flatcc_verify_field@@Base>
   16fa0:	cmp	r0, #0
   16fa4:	beq	16fb4 <_start@@Base+0x21a0>
   16fa8:	ldr	r4, [sp]
   16fac:	add	sp, sp, #4
   16fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fb4:	mov	r3, #1
   16fb8:	mov	r0, r4
   16fbc:	mov	r2, r3
   16fc0:	mov	r1, r3
   16fc4:	bl	29be8 <flatcc_verify_field@@Base>
   16fc8:	cmp	r0, #0
   16fcc:	bne	16fa8 <_start@@Base+0x2194>
   16fd0:	mov	r3, #1
   16fd4:	mov	r1, #2
   16fd8:	mov	r2, r3
   16fdc:	mov	r0, r4
   16fe0:	bl	29be8 <flatcc_verify_field@@Base>
   16fe4:	cmp	r0, #0
   16fe8:	bne	16fa8 <_start@@Base+0x2194>
   16fec:	mov	r3, #1
   16ff0:	mov	r0, r4
   16ff4:	ldr	r4, [sp]
   16ff8:	mov	r2, r3
   16ffc:	mov	r1, #3
   17000:	ldr	lr, [sp, #4]
   17004:	add	sp, sp, #8
   17008:	b	29be8 <flatcc_verify_field@@Base>
   1700c:	mov	r2, #0
   17010:	str	r4, [sp, #-8]!
   17014:	mov	r4, r0
   17018:	mov	r1, r2
   1701c:	str	lr, [sp, #4]
   17020:	bl	29c54 <flatcc_verify_string_field@@Base>
   17024:	cmp	r0, #0
   17028:	beq	17038 <_start@@Base+0x2224>
   1702c:	ldr	r4, [sp]
   17030:	add	sp, sp, #4
   17034:	pop	{pc}		; (ldr pc, [sp], #4)
   17038:	mov	r3, #8
   1703c:	mov	r1, #1
   17040:	mov	r2, r3
   17044:	mov	r0, r4
   17048:	bl	29be8 <flatcc_verify_field@@Base>
   1704c:	cmp	r0, #0
   17050:	bne	1702c <_start@@Base+0x2218>
   17054:	mov	r3, #2
   17058:	mov	r0, r4
   1705c:	ldr	r4, [sp]
   17060:	mov	r2, r3
   17064:	mov	r1, r3
   17068:	ldr	lr, [sp, #4]
   1706c:	add	sp, sp, #8
   17070:	b	29be8 <flatcc_verify_field@@Base>
   17074:	mov	r2, #0
   17078:	str	r4, [sp, #-8]!
   1707c:	mov	r4, r0
   17080:	mov	r1, r2
   17084:	str	lr, [sp, #4]
   17088:	bl	29c54 <flatcc_verify_string_field@@Base>
   1708c:	cmp	r0, #0
   17090:	beq	170a0 <_start@@Base+0x228c>
   17094:	ldr	r4, [sp]
   17098:	add	sp, sp, #4
   1709c:	pop	{pc}		; (ldr pc, [sp], #4)
   170a0:	mov	r3, #4
   170a4:	mov	r1, #1
   170a8:	mov	r2, r3
   170ac:	mov	r0, r4
   170b0:	bl	29be8 <flatcc_verify_field@@Base>
   170b4:	cmp	r0, #0
   170b8:	bne	17094 <_start@@Base+0x2280>
   170bc:	mov	r2, r0
   170c0:	mov	r1, #2
   170c4:	mov	r0, r4
   170c8:	bl	29c54 <flatcc_verify_string_field@@Base>
   170cc:	cmp	r0, #0
   170d0:	bne	17094 <_start@@Base+0x2280>
   170d4:	mov	r3, #8
   170d8:	mov	r1, #3
   170dc:	mov	r2, r3
   170e0:	mov	r0, r4
   170e4:	bl	29be8 <flatcc_verify_field@@Base>
   170e8:	cmp	r0, #0
   170ec:	bne	17094 <_start@@Base+0x2280>
   170f0:	mov	r2, r0
   170f4:	mov	r1, #4
   170f8:	mov	r0, r4
   170fc:	bl	29c54 <flatcc_verify_string_field@@Base>
   17100:	cmp	r0, #0
   17104:	bne	17094 <_start@@Base+0x2280>
   17108:	mov	r3, #8
   1710c:	mov	r1, #5
   17110:	mov	r2, r3
   17114:	mov	r0, r4
   17118:	bl	29be8 <flatcc_verify_field@@Base>
   1711c:	cmp	r0, #0
   17120:	bne	17094 <_start@@Base+0x2280>
   17124:	mov	r3, #4
   17128:	mov	r1, #6
   1712c:	mov	r2, r3
   17130:	mov	r0, r4
   17134:	bl	29be8 <flatcc_verify_field@@Base>
   17138:	cmp	r0, #0
   1713c:	bne	17094 <_start@@Base+0x2280>
   17140:	mov	r3, #8
   17144:	mov	r1, #7
   17148:	mov	r2, r3
   1714c:	mov	r0, r4
   17150:	bl	29be8 <flatcc_verify_field@@Base>
   17154:	cmp	r0, #0
   17158:	bne	17094 <_start@@Base+0x2280>
   1715c:	mov	r3, #4
   17160:	mov	r0, r4
   17164:	ldr	r4, [sp]
   17168:	mov	r2, r3
   1716c:	mov	r1, #8
   17170:	ldr	lr, [sp, #4]
   17174:	add	sp, sp, #8
   17178:	b	29be8 <flatcc_verify_field@@Base>
   1717c:	ldr	r3, [pc, #112]	; 171f4 <_start@@Base+0x23e0>
   17180:	mov	r2, #0
   17184:	mov	r1, r2
   17188:	str	r4, [sp, #-8]!
   1718c:	mov	r4, r0
   17190:	str	lr, [sp, #4]
   17194:	add	r3, pc, r3
   17198:	bl	2a01c <flatcc_verify_table_field@@Base>
   1719c:	cmp	r0, #0
   171a0:	beq	171b0 <_start@@Base+0x239c>
   171a4:	ldr	r4, [sp]
   171a8:	add	sp, sp, #4
   171ac:	pop	{pc}		; (ldr pc, [sp], #4)
   171b0:	ldr	r3, [pc, #64]	; 171f8 <_start@@Base+0x23e4>
   171b4:	mov	r2, r0
   171b8:	mov	r1, #1
   171bc:	mov	r0, r4
   171c0:	add	r3, pc, r3
   171c4:	bl	2a01c <flatcc_verify_table_field@@Base>
   171c8:	cmp	r0, #0
   171cc:	bne	171a4 <_start@@Base+0x2390>
   171d0:	ldr	r3, [pc, #36]	; 171fc <_start@@Base+0x23e8>
   171d4:	mov	r2, r0
   171d8:	mov	r1, #2
   171dc:	mov	r0, r4
   171e0:	ldr	r4, [sp]
   171e4:	ldr	lr, [sp, #4]
   171e8:	add	sp, sp, #8
   171ec:	add	r3, pc, r3
   171f0:	b	2a01c <flatcc_verify_table_field@@Base>
   171f4:			; <UNDEFINED> instruction: 0xfffffed8
   171f8:	andeq	r0, r0, r8, lsl lr
   171fc:			; <UNDEFINED> instruction: 0xfffffd40
   17200:	mov	r3, #16
   17204:	mov	r2, #32
   17208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1720c:	mov	r1, #0
   17210:	strd	r6, [sp, #8]
   17214:	mov	r4, r0
   17218:	str	r8, [sp, #16]
   1721c:	str	lr, [sp, #20]
   17220:	sub	sp, sp, #8
   17224:	bl	29be8 <flatcc_verify_field@@Base>
   17228:	cmp	r0, #0
   1722c:	beq	17248 <_start@@Base+0x2434>
   17230:	add	sp, sp, #8
   17234:	ldrd	r4, [sp]
   17238:	ldrd	r6, [sp, #8]
   1723c:	ldr	r8, [sp, #16]
   17240:	add	sp, sp, #20
   17244:	pop	{pc}		; (ldr pc, [sp], #4)
   17248:	mov	r3, #2
   1724c:	mov	r0, r4
   17250:	mov	r2, r3
   17254:	mov	r1, r3
   17258:	bl	29be8 <flatcc_verify_field@@Base>
   1725c:	cmp	r0, #0
   17260:	bne	17230 <_start@@Base+0x241c>
   17264:	mov	r3, #2
   17268:	mov	r1, #1
   1726c:	mov	r2, r3
   17270:	mov	r0, r4
   17274:	bl	29be8 <flatcc_verify_field@@Base>
   17278:	cmp	r0, #0
   1727c:	bne	17230 <_start@@Base+0x241c>
   17280:	mov	r2, #1
   17284:	mov	r1, #3
   17288:	mov	r0, r4
   1728c:	bl	29c54 <flatcc_verify_string_field@@Base>
   17290:	cmp	r0, #0
   17294:	bne	17230 <_start@@Base+0x241c>
   17298:	mov	r3, #1
   1729c:	mov	r1, #6
   172a0:	mov	r2, r3
   172a4:	mov	r0, r4
   172a8:	bl	29be8 <flatcc_verify_field@@Base>
   172ac:	cmp	r0, #0
   172b0:	bne	17230 <_start@@Base+0x241c>
   172b4:	mov	r5, #1
   172b8:	mvn	r6, #0
   172bc:	mov	r2, r0
   172c0:	mov	r3, r5
   172c4:	mov	r1, #5
   172c8:	mov	r0, r4
   172cc:	stm	sp, {r5, r6}
   172d0:	bl	29d34 <flatcc_verify_vector_field@@Base>
   172d4:	cmp	r0, #0
   172d8:	bne	17230 <_start@@Base+0x241c>
   172dc:	ldr	r3, [pc, #888]	; 1765c <_start@@Base+0x2848>
   172e0:	mov	r2, r0
   172e4:	mov	r1, #11
   172e8:	mov	r0, r4
   172ec:	add	r3, pc, r3
   172f0:	bl	2a188 <flatcc_verify_table_vector_field@@Base>
   172f4:	cmp	r0, #0
   172f8:	bne	17230 <_start@@Base+0x241c>
   172fc:	mov	r2, r0
   17300:	mov	r1, #10
   17304:	mov	r0, r4
   17308:	bl	29e38 <flatcc_verify_string_vector_field@@Base>
   1730c:	cmp	r0, #0
   17310:	bne	17230 <_start@@Base+0x241c>
   17314:	mov	r2, r0
   17318:	mov	r1, #28
   1731c:	mov	r0, r4
   17320:	bl	29e38 <flatcc_verify_string_vector_field@@Base>
   17324:	cmp	r0, #0
   17328:	bne	17230 <_start@@Base+0x241c>
   1732c:	mov	r2, r0
   17330:	mov	r3, r5
   17334:	stm	sp, {r5, r6}
   17338:	mov	r1, #24
   1733c:	mov	r0, r4
   17340:	bl	29d34 <flatcc_verify_vector_field@@Base>
   17344:	cmp	r0, #0
   17348:	bne	17230 <_start@@Base+0x241c>
   1734c:	mvn	ip, #-536870912	; 0xe0000000
   17350:	mov	r5, #4
   17354:	mov	r3, #8
   17358:	mov	r2, #0
   1735c:	mov	r1, #29
   17360:	mov	r0, r4
   17364:	stm	sp, {r5, ip}
   17368:	bl	29d34 <flatcc_verify_vector_field@@Base>
   1736c:	cmp	r0, #0
   17370:	bne	17230 <_start@@Base+0x241c>
   17374:	ldr	r7, [pc, #740]	; 17660 <_start@@Base+0x284c>
   17378:	mov	r2, r0
   1737c:	mov	r1, #12
   17380:	mov	r0, r4
   17384:	add	r7, pc, r7
   17388:	mov	r3, r7
   1738c:	bl	2a01c <flatcc_verify_table_field@@Base>
   17390:	cmp	r0, #0
   17394:	bne	17230 <_start@@Base+0x241c>
   17398:	ldr	r3, [pc, #708]	; 17664 <_start@@Base+0x2850>
   1739c:	mov	r2, r0
   173a0:	mov	r1, #8
   173a4:	mov	r0, r4
   173a8:	add	r3, pc, r3
   173ac:	bl	2add0 <flatcc_verify_union_field@@Base>
   173b0:	cmp	r0, #0
   173b4:	bne	17230 <_start@@Base+0x241c>
   173b8:	mvn	r6, #-1073741824	; 0xc0000000
   173bc:	mov	r8, #2
   173c0:	mov	r2, r0
   173c4:	mov	r3, r5
   173c8:	mov	r1, #9
   173cc:	mov	r0, r4
   173d0:	str	r8, [sp]
   173d4:	str	r6, [sp, #4]
   173d8:	bl	29d34 <flatcc_verify_vector_field@@Base>
   173dc:	cmp	r0, #0
   173e0:	bne	17230 <_start@@Base+0x241c>
   173e4:	mov	r2, r0
   173e8:	mov	r3, r5
   173ec:	str	r8, [sp]
   173f0:	mov	r1, #31
   173f4:	mov	r0, r4
   173f8:	str	r6, [sp, #4]
   173fc:	bl	29d34 <flatcc_verify_vector_field@@Base>
   17400:	cmp	r0, #0
   17404:	bne	17230 <_start@@Base+0x241c>
   17408:	mov	r6, #1
   1740c:	mov	r3, r0
   17410:	mov	r2, r0
   17414:	mov	r1, #13
   17418:	mov	r0, r4
   1741c:	strd	r6, [sp]
   17420:	bl	2abfc <flatcc_verify_table_as_nested_root@@Base>
   17424:	cmp	r0, #0
   17428:	bne	17230 <_start@@Base+0x241c>
   1742c:	ldr	r3, [pc, #564]	; 17668 <_start@@Base+0x2854>
   17430:	mov	r2, r0
   17434:	mov	r1, #14
   17438:	mov	r0, r4
   1743c:	add	r3, pc, r3
   17440:	bl	2a01c <flatcc_verify_table_field@@Base>
   17444:	cmp	r0, #0
   17448:	bne	17230 <_start@@Base+0x241c>
   1744c:	mov	r3, r6
   17450:	mov	r2, r6
   17454:	mov	r1, #15
   17458:	mov	r0, r4
   1745c:	bl	29be8 <flatcc_verify_field@@Base>
   17460:	cmp	r0, #0
   17464:	bne	17230 <_start@@Base+0x241c>
   17468:	mov	r3, r5
   1746c:	mov	r2, r5
   17470:	mov	r1, #16
   17474:	mov	r0, r4
   17478:	bl	29be8 <flatcc_verify_field@@Base>
   1747c:	cmp	r0, #0
   17480:	bne	17230 <_start@@Base+0x241c>
   17484:	mov	r3, r5
   17488:	mov	r2, r5
   1748c:	mov	r1, #17
   17490:	mov	r0, r4
   17494:	bl	29be8 <flatcc_verify_field@@Base>
   17498:	cmp	r0, #0
   1749c:	bne	17230 <_start@@Base+0x241c>
   174a0:	mov	r3, #8
   174a4:	mov	r1, #18
   174a8:	mov	r2, r3
   174ac:	mov	r0, r4
   174b0:	bl	29be8 <flatcc_verify_field@@Base>
   174b4:	cmp	r0, #0
   174b8:	bne	17230 <_start@@Base+0x241c>
   174bc:	mov	r3, #8
   174c0:	mov	r1, #19
   174c4:	mov	r2, r3
   174c8:	mov	r0, r4
   174cc:	bl	29be8 <flatcc_verify_field@@Base>
   174d0:	cmp	r0, #0
   174d4:	bne	17230 <_start@@Base+0x241c>
   174d8:	mov	r3, r5
   174dc:	mov	r1, #20
   174e0:	mov	r2, r5
   174e4:	mov	r0, r4
   174e8:	bl	29be8 <flatcc_verify_field@@Base>
   174ec:	cmp	r0, #0
   174f0:	bne	17230 <_start@@Base+0x241c>
   174f4:	mov	r3, r5
   174f8:	mov	r1, #21
   174fc:	mov	r2, r5
   17500:	mov	r0, r4
   17504:	bl	29be8 <flatcc_verify_field@@Base>
   17508:	cmp	r0, #0
   1750c:	bne	17230 <_start@@Base+0x241c>
   17510:	mov	r3, #8
   17514:	mov	r1, #22
   17518:	mov	r2, r3
   1751c:	mov	r0, r4
   17520:	bl	29be8 <flatcc_verify_field@@Base>
   17524:	cmp	r0, #0
   17528:	bne	17230 <_start@@Base+0x241c>
   1752c:	mov	r3, #8
   17530:	mov	r1, #23
   17534:	mov	r2, r3
   17538:	mov	r0, r4
   1753c:	bl	29be8 <flatcc_verify_field@@Base>
   17540:	cmp	r0, #0
   17544:	bne	17230 <_start@@Base+0x241c>
   17548:	mov	r3, r5
   1754c:	mov	r1, #25
   17550:	mov	r2, r5
   17554:	mov	r0, r4
   17558:	bl	29be8 <flatcc_verify_field@@Base>
   1755c:	cmp	r0, #0
   17560:	bne	17230 <_start@@Base+0x241c>
   17564:	mov	r3, r5
   17568:	mov	r1, #26
   1756c:	mov	r2, r5
   17570:	mov	r0, r4
   17574:	bl	29be8 <flatcc_verify_field@@Base>
   17578:	cmp	r0, #0
   1757c:	bne	17230 <_start@@Base+0x241c>
   17580:	mov	r3, r5
   17584:	mov	r1, #27
   17588:	mov	r2, r5
   1758c:	mov	r0, r4
   17590:	bl	29be8 <flatcc_verify_field@@Base>
   17594:	cmp	r0, #0
   17598:	bne	17230 <_start@@Base+0x241c>
   1759c:	mvn	ip, #0
   175a0:	mov	r1, r6
   175a4:	mov	r2, r0
   175a8:	mov	r3, r6
   175ac:	mov	r0, r4
   175b0:	stm	sp, {r1, ip}
   175b4:	mov	r1, #30
   175b8:	bl	29d34 <flatcc_verify_vector_field@@Base>
   175bc:	cmp	r0, #0
   175c0:	bne	17230 <_start@@Base+0x241c>
   175c4:	mov	r5, #8
   175c8:	mvn	r6, #-536870912	; 0xe0000000
   175cc:	mov	r3, r5
   175d0:	mov	r2, #0
   175d4:	mov	r1, #32
   175d8:	mov	r0, r4
   175dc:	stm	sp, {r5, r6}
   175e0:	bl	29d34 <flatcc_verify_vector_field@@Base>
   175e4:	cmp	r0, #0
   175e8:	bne	17230 <_start@@Base+0x241c>
   175ec:	mov	r2, r0
   175f0:	mov	r3, r5
   175f4:	stm	sp, {r5, r6}
   175f8:	mov	r1, #33	; 0x21
   175fc:	mov	r0, r4
   17600:	bl	29d34 <flatcc_verify_vector_field@@Base>
   17604:	cmp	r0, #0
   17608:	bne	17230 <_start@@Base+0x241c>
   1760c:	ldr	r3, [pc, #88]	; 1766c <_start@@Base+0x2858>
   17610:	mov	r2, r0
   17614:	mov	r1, #34	; 0x22
   17618:	mov	r0, r4
   1761c:	add	r3, pc, r3
   17620:	bl	2a01c <flatcc_verify_table_field@@Base>
   17624:	cmp	r0, #0
   17628:	bne	17230 <_start@@Base+0x241c>
   1762c:	ldr	r3, [pc, #60]	; 17670 <_start@@Base+0x285c>
   17630:	mov	r2, r0
   17634:	mov	r1, #35	; 0x23
   17638:	mov	r0, r4
   1763c:	add	r3, pc, r3
   17640:	add	sp, sp, #8
   17644:	ldrd	r4, [sp]
   17648:	ldrd	r6, [sp, #8]
   1764c:	ldr	r8, [sp, #16]
   17650:	ldr	lr, [sp, #20]
   17654:	add	sp, sp, #24
   17658:	b	2a01c <flatcc_verify_table_field@@Base>
   1765c:			; <UNDEFINED> instruction: 0xffffff0c
   17660:			; <UNDEFINED> instruction: 0xfffffe74
   17664:	andeq	r0, r0, r8, asr r3
   17668:			; <UNDEFINED> instruction: 0xfffffbc8
   1766c:			; <UNDEFINED> instruction: 0xffffda2c
   17670:	andeq	r0, r0, r0, lsr r0
   17674:	strd	r4, [sp, #-16]!
   17678:	mov	r4, #1
   1767c:	mvn	r5, #0
   17680:	str	r6, [sp, #8]
   17684:	mov	r2, #0
   17688:	mov	r3, r4
   1768c:	str	lr, [sp, #12]
   17690:	sub	sp, sp, #8
   17694:	mov	r1, r2
   17698:	mov	r6, r0
   1769c:	strd	r4, [sp]
   176a0:	bl	29d34 <flatcc_verify_vector_field@@Base>
   176a4:	subs	r2, r0, #0
   176a8:	beq	176c4 <_start@@Base+0x28b0>
   176ac:	mov	r0, r2
   176b0:	add	sp, sp, #8
   176b4:	ldrd	r4, [sp]
   176b8:	ldr	r6, [sp, #8]
   176bc:	add	sp, sp, #12
   176c0:	pop	{pc}		; (ldr pc, [sp], #4)
   176c4:	mov	r3, r4
   176c8:	mov	r1, r4
   176cc:	strd	r4, [sp]
   176d0:	mov	r0, r6
   176d4:	bl	29d34 <flatcc_verify_vector_field@@Base>
   176d8:	subs	r2, r0, #0
   176dc:	bne	176ac <_start@@Base+0x2898>
   176e0:	ldr	ip, [pc, #28]	; 17704 <_start@@Base+0x28f0>
   176e4:	mov	r3, r2
   176e8:	mov	r0, r6
   176ec:	mov	r1, #2
   176f0:	add	ip, pc, ip
   176f4:	stm	sp, {r4, ip}
   176f8:	bl	2abfc <flatcc_verify_table_as_nested_root@@Base>
   176fc:	mov	r2, r0
   17700:	b	176ac <_start@@Base+0x2898>
   17704:			; <UNDEFINED> instruction: 0xfffffb08
   17708:	ldrb	r3, [r0, #12]
   1770c:	sub	r3, r3, #1
   17710:	cmp	r3, #3
   17714:	addls	pc, pc, r3, lsl #2
   17718:	b	1775c <_start@@Base+0x2948>
   1771c:	b	17750 <_start@@Base+0x293c>
   17720:	b	17744 <_start@@Base+0x2930>
   17724:	b	17738 <_start@@Base+0x2924>
   17728:	b	1772c <_start@@Base+0x2918>
   1772c:	ldr	r1, [pc, #48]	; 17764 <_start@@Base+0x2950>
   17730:	add	r1, pc, r1
   17734:	b	2a4ac <flatcc_verify_union_table@@Base>
   17738:	ldr	r1, [pc, #40]	; 17768 <_start@@Base+0x2954>
   1773c:	add	r1, pc, r1
   17740:	b	2a4ac <flatcc_verify_union_table@@Base>
   17744:	ldr	r1, [pc, #32]	; 1776c <_start@@Base+0x2958>
   17748:	add	r1, pc, r1
   1774c:	b	2a4ac <flatcc_verify_union_table@@Base>
   17750:	ldr	r1, [pc, #24]	; 17770 <_start@@Base+0x295c>
   17754:	add	r1, pc, r1
   17758:	b	2a4ac <flatcc_verify_union_table@@Base>
   1775c:	mov	r0, #0
   17760:	bx	lr
   17764:	andeq	r0, r0, ip, lsr r0
   17768:	andeq	r0, r0, r0, lsr r5
   1776c:			; <UNDEFINED> instruction: 0xfffff834
   17770:			; <UNDEFINED> instruction: 0xfffffaa4
   17774:	ldr	r3, [pc, #112]	; 177ec <_start@@Base+0x29d8>
   17778:	mov	r2, #0
   1777c:	mov	r1, r2
   17780:	str	r4, [sp, #-8]!
   17784:	mov	r4, r0
   17788:	str	lr, [sp, #4]
   1778c:	add	r3, pc, r3
   17790:	bl	2a01c <flatcc_verify_table_field@@Base>
   17794:	cmp	r0, #0
   17798:	beq	177a8 <_start@@Base+0x2994>
   1779c:	ldr	r4, [sp]
   177a0:	add	sp, sp, #4
   177a4:	pop	{pc}		; (ldr pc, [sp], #4)
   177a8:	ldr	r3, [pc, #64]	; 177f0 <_start@@Base+0x29dc>
   177ac:	mov	r2, r0
   177b0:	mov	r1, #1
   177b4:	mov	r0, r4
   177b8:	add	r3, pc, r3
   177bc:	bl	2a01c <flatcc_verify_table_field@@Base>
   177c0:	cmp	r0, #0
   177c4:	bne	1779c <_start@@Base+0x2988>
   177c8:	ldr	r3, [pc, #36]	; 177f4 <_start@@Base+0x29e0>
   177cc:	mov	r2, r0
   177d0:	mov	r1, #3
   177d4:	mov	r0, r4
   177d8:	ldr	r4, [sp]
   177dc:	ldr	lr, [sp, #4]
   177e0:	add	sp, sp, #8
   177e4:	add	r3, pc, r3
   177e8:	b	2af24 <flatcc_verify_union_vector_field@@Base>
   177ec:			; <UNDEFINED> instruction: 0xfffff9e8
   177f0:	andeq	r0, r0, r8, lsr r0
   177f4:			; <UNDEFINED> instruction: 0xffffff1c
   177f8:	strd	r4, [sp, #-16]!
   177fc:	mov	r2, #0
   17800:	mov	r1, #1
   17804:	ldr	r4, [pc, #164]	; 178b0 <_start@@Base+0x2a9c>
   17808:	mov	r5, r0
   1780c:	str	r6, [sp, #8]
   17810:	str	lr, [sp, #12]
   17814:	add	r4, pc, r4
   17818:	mov	r3, r4
   1781c:	bl	2add0 <flatcc_verify_union_field@@Base>
   17820:	cmp	r0, #0
   17824:	beq	17838 <_start@@Base+0x2a24>
   17828:	ldrd	r4, [sp]
   1782c:	ldr	r6, [sp, #8]
   17830:	add	sp, sp, #12
   17834:	pop	{pc}		; (ldr pc, [sp], #4)
   17838:	mov	r2, r0
   1783c:	mov	r3, r4
   17840:	mov	r1, #3
   17844:	mov	r0, r5
   17848:	bl	2add0 <flatcc_verify_union_field@@Base>
   1784c:	cmp	r0, #0
   17850:	bne	17828 <_start@@Base+0x2a14>
   17854:	mov	r2, r0
   17858:	mov	r3, r4
   1785c:	mov	r1, #5
   17860:	mov	r0, r5
   17864:	bl	2add0 <flatcc_verify_union_field@@Base>
   17868:	cmp	r0, #0
   1786c:	bne	17828 <_start@@Base+0x2a14>
   17870:	mov	r2, r0
   17874:	mov	r3, r4
   17878:	mov	r1, #7
   1787c:	mov	r0, r5
   17880:	bl	2add0 <flatcc_verify_union_field@@Base>
   17884:	cmp	r0, #0
   17888:	bne	17828 <_start@@Base+0x2a14>
   1788c:	mov	r3, r4
   17890:	mov	r2, r0
   17894:	ldr	r6, [sp, #8]
   17898:	mov	r0, r5
   1789c:	mov	r1, #9
   178a0:	ldrd	r4, [sp]
   178a4:	ldr	lr, [sp, #12]
   178a8:	add	sp, sp, #16
   178ac:	b	2af24 <flatcc_verify_union_vector_field@@Base>
   178b0:	muleq	r0, r8, r0
   178b4:	ldrb	r3, [r0, #12]
   178b8:	mov	r2, r0
   178bc:	cmp	r3, #10
   178c0:	bhi	178e8 <_start@@Base+0x2ad4>
   178c4:	cmp	r3, #9
   178c8:	bcs	17900 <_start@@Base+0x2aec>
   178cc:	cmp	r3, #2
   178d0:	beq	17914 <_start@@Base+0x2b00>
   178d4:	cmp	r3, #8
   178d8:	bne	1790c <_start@@Base+0x2af8>
   178dc:	mov	r2, #2
   178e0:	mov	r1, r2
   178e4:	b	2a5a8 <flatcc_verify_union_struct@@Base>
   178e8:	cmp	r3, #11
   178ec:	beq	178f8 <_start@@Base+0x2ae4>
   178f0:	cmp	r3, #255	; 0xff
   178f4:	bne	1790c <_start@@Base+0x2af8>
   178f8:	mov	r0, r2
   178fc:	b	2a608 <flatcc_verify_union_string@@Base>
   17900:	mov	r2, #4
   17904:	mov	r1, r2
   17908:	b	2a5a8 <flatcc_verify_union_struct@@Base>
   1790c:	mov	r0, #0
   17910:	bx	lr
   17914:	ldr	r1, [pc, #4]	; 17920 <_start@@Base+0x2b0c>
   17918:	add	r1, pc, r1
   1791c:	b	2a4ac <flatcc_verify_union_table@@Base>
   17920:			; <UNDEFINED> instruction: 0xffffd738
   17924:	sub	r1, r1, #1
   17928:	cmp	r1, #3
   1792c:	addls	pc, pc, r1, lsl #2
   17930:	b	17984 <_start@@Base+0x2b70>
   17934:	b	17974 <_start@@Base+0x2b60>
   17938:	b	17964 <_start@@Base+0x2b50>
   1793c:	b	17954 <_start@@Base+0x2b40>
   17940:	b	17944 <_start@@Base+0x2b30>
   17944:	ldr	r1, [pc, #72]	; 17994 <_start@@Base+0x2b80>
   17948:	mov	r2, #3
   1794c:	add	r1, pc, r1
   17950:	b	32250 <flatcc_json_printer_enum@@Base>
   17954:	ldr	r1, [pc, #60]	; 17998 <_start@@Base+0x2b84>
   17958:	mov	r2, #8
   1795c:	add	r1, pc, r1
   17960:	b	32250 <flatcc_json_printer_enum@@Base>
   17964:	ldr	r1, [pc, #48]	; 1799c <_start@@Base+0x2b88>
   17968:	mov	r2, #23
   1796c:	add	r1, pc, r1
   17970:	b	32250 <flatcc_json_printer_enum@@Base>
   17974:	ldr	r1, [pc, #36]	; 179a0 <_start@@Base+0x2b8c>
   17978:	mov	r2, #7
   1797c:	add	r1, pc, r1
   17980:	b	32250 <flatcc_json_printer_enum@@Base>
   17984:	ldr	r1, [pc, #24]	; 179a4 <_start@@Base+0x2b90>
   17988:	mov	r2, #4
   1798c:	add	r1, pc, r1
   17990:	b	32250 <flatcc_json_printer_enum@@Base>
   17994:	andeq	r6, r2, r0, asr #25
   17998:	andeq	r6, r2, r4, lsr #25
   1799c:	andeq	r6, r2, ip, ror ip
   179a0:	andeq	r6, r2, r4, ror #24
   179a4:	andeq	sl, r2, r8, ror #14
   179a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   179ac:	mov	r4, #0
   179b0:	mov	r5, #0
   179b4:	strd	r6, [sp, #8]
   179b8:	mov	r7, #0
   179bc:	cmp	r1, r2
   179c0:	str	lr, [sp, #16]
   179c4:	sub	sp, sp, #28
   179c8:	moveq	r0, r1
   179cc:	strd	r4, [r3]
   179d0:	str	r7, [sp, #12]
   179d4:	strd	r4, [sp, #16]
   179d8:	beq	17a04 <_start@@Base+0x2bf0>
   179dc:	add	ip, sp, #16
   179e0:	mov	r5, r3
   179e4:	add	r3, sp, #12
   179e8:	mov	r4, r1
   179ec:	str	ip, [sp]
   179f0:	mov	r6, r0
   179f4:	mov	r7, r2
   179f8:	bl	2d528 <flatcc_json_parser_integer@@Base>
   179fc:	cmp	r4, r0
   17a00:	bne	17a18 <_start@@Base+0x2c04>
   17a04:	add	sp, sp, #28
   17a08:	ldrd	r4, [sp]
   17a0c:	ldrd	r6, [sp, #8]
   17a10:	add	sp, sp, #16
   17a14:	pop	{pc}		; (ldr pc, [sp], #4)
   17a18:	ldr	r1, [sp, #12]
   17a1c:	ldrd	r2, [sp, #16]
   17a20:	cmp	r1, #0
   17a24:	beq	17a44 <_start@@Base+0x2c30>
   17a28:	cmp	r3, #-2147483648	; 0x80000000
   17a2c:	cmpeq	r2, #0
   17a30:	bhi	17a6c <_start@@Base+0x2c58>
   17a34:	rsbs	r2, r2, #0
   17a38:	rsc	r3, r3, #0
   17a3c:	strd	r2, [r5]
   17a40:	b	17a04 <_start@@Base+0x2bf0>
   17a44:	cmp	r2, #0
   17a48:	sbcs	r1, r3, #0
   17a4c:	strdge	r2, [r5]
   17a50:	bge	17a04 <_start@@Base+0x2bf0>
   17a54:	mov	r1, r0
   17a58:	mov	r2, r7
   17a5c:	mov	r0, r6
   17a60:	mov	r3, #7
   17a64:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17a68:	b	17a04 <_start@@Base+0x2bf0>
   17a6c:	mov	r1, r0
   17a70:	mov	r2, r7
   17a74:	mov	r0, r6
   17a78:	mov	r3, #8
   17a7c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17a80:	b	17a04 <_start@@Base+0x2bf0>
   17a84:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17a88:	mov	r4, r1
   17a8c:	mov	r1, r2
   17a90:	strd	r6, [sp, #8]
   17a94:	mov	r6, r0
   17a98:	mov	r0, r4
   17a9c:	strd	r8, [sp, #16]
   17aa0:	mov	r5, r2
   17aa4:	mov	r7, r3
   17aa8:	str	sl, [sp, #24]
   17aac:	str	lr, [sp, #28]
   17ab0:	sub	sp, sp, #8
   17ab4:	bl	14f08 <_start@@Base+0xf4>
   17ab8:	add	r3, pc, #256	; 0x100
   17abc:	ldrd	r2, [r3]
   17ac0:	cmp	r1, r3
   17ac4:	cmpeq	r0, r2
   17ac8:	beq	17b40 <_start@@Base+0x2d2c>
   17acc:	add	r9, pc, #244	; 0xf4
   17ad0:	ldrd	r8, [r9]
   17ad4:	mov	sl, #0
   17ad8:	cmp	r1, r9
   17adc:	cmpeq	sl, r8
   17ae0:	beq	17b04 <_start@@Base+0x2cf0>
   17ae4:	mov	r0, r4
   17ae8:	add	sp, sp, #8
   17aec:	ldrd	r4, [sp]
   17af0:	ldrd	r6, [sp, #8]
   17af4:	ldrd	r8, [sp, #16]
   17af8:	ldr	sl, [sp, #24]
   17afc:	add	sp, sp, #28
   17b00:	pop	{pc}		; (ldr pc, [sp], #4)
   17b04:	ldr	r3, [sp, #44]	; 0x2c
   17b08:	mov	r2, r5
   17b0c:	mov	r0, r6
   17b10:	mov	r1, r4
   17b14:	str	r3, [sp]
   17b18:	mov	r3, #4
   17b1c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   17b20:	cmp	r4, r0
   17b24:	beq	17ae8 <_start@@Base+0x2cd4>
   17b28:	ldr	r1, [sp, #40]	; 0x28
   17b2c:	mov	r2, #0
   17b30:	mov	r3, #0
   17b34:	strd	r2, [r1]
   17b38:	str	sl, [r7]
   17b3c:	b	17ae8 <_start@@Base+0x2cd4>
   17b40:	mov	r1, r5
   17b44:	add	r0, r4, #8
   17b48:	bl	14f08 <_start@@Base+0xf4>
   17b4c:	add	r3, pc, #124	; 0x7c
   17b50:	ldrd	r2, [r3]
   17b54:	cmp	r1, r3
   17b58:	cmpeq	r0, r2
   17b5c:	bne	17ae4 <_start@@Base+0x2cd0>
   17b60:	add	r8, r4, #16
   17b64:	mov	r1, r5
   17b68:	mov	r0, r8
   17b6c:	mov	r9, #0
   17b70:	bl	14f08 <_start@@Base+0xf4>
   17b74:	and	r3, r1, #-16777216	; 0xff000000
   17b78:	cmp	r3, #1694498816	; 0x65000000
   17b7c:	cmpeq	r9, #0
   17b80:	bne	17ae4 <_start@@Base+0x2cd0>
   17b84:	ldr	r3, [sp, #44]	; 0x2c
   17b88:	mov	r2, r5
   17b8c:	mov	r0, r6
   17b90:	mov	r1, r8
   17b94:	str	r3, [sp]
   17b98:	mov	r3, #1
   17b9c:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   17ba0:	cmp	r8, r0
   17ba4:	beq	17ae4 <_start@@Base+0x2cd0>
   17ba8:	ldr	r1, [sp, #40]	; 0x28
   17bac:	mov	r2, #1
   17bb0:	mov	r3, #0
   17bb4:	strd	r2, [r1]
   17bb8:	str	r9, [r7]
   17bbc:	b	17ae8 <_start@@Base+0x2cd4>
   17bc0:	rsbvc	r6, r5, #116, 28	; 0x740
   17bc4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   17bc8:	andeq	r0, r0, r0
   17bcc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17bd0:	cmnvc	r0, #-1073741800	; 0xc0000018
   17bd4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17bd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   17bdc:	mov	r4, #0
   17be0:	mov	r5, #0
   17be4:	strd	r6, [sp, #8]
   17be8:	mov	r7, #0
   17bec:	cmp	r1, r2
   17bf0:	str	lr, [sp, #16]
   17bf4:	sub	sp, sp, #28
   17bf8:	moveq	r0, r1
   17bfc:	strd	r4, [r3]
   17c00:	str	r7, [sp, #12]
   17c04:	strd	r4, [sp, #16]
   17c08:	beq	17c48 <_start@@Base+0x2e34>
   17c0c:	add	ip, sp, #16
   17c10:	mov	r5, r3
   17c14:	add	r3, sp, #12
   17c18:	mov	r4, r1
   17c1c:	str	ip, [sp]
   17c20:	mov	r6, r0
   17c24:	mov	r7, r2
   17c28:	bl	2d528 <flatcc_json_parser_integer@@Base>
   17c2c:	cmp	r4, r0
   17c30:	beq	17c48 <_start@@Base+0x2e34>
   17c34:	ldr	r3, [sp, #12]
   17c38:	cmp	r3, #0
   17c3c:	bne	17c5c <_start@@Base+0x2e48>
   17c40:	ldrd	r2, [sp, #16]
   17c44:	strd	r2, [r5]
   17c48:	add	sp, sp, #28
   17c4c:	ldrd	r4, [sp]
   17c50:	ldrd	r6, [sp, #8]
   17c54:	add	sp, sp, #16
   17c58:	pop	{pc}		; (ldr pc, [sp], #4)
   17c5c:	mov	r1, r0
   17c60:	mov	r2, r7
   17c64:	mov	r0, r6
   17c68:	mov	r3, #8
   17c6c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17c70:	b	17c48 <_start@@Base+0x2e34>
   17c74:	mov	r0, #0
   17c78:	bx	lr
   17c7c:	bx	lr
   17c80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17c84:	cmp	r1, r2
   17c88:	strd	r6, [sp, #8]
   17c8c:	moveq	r0, r1
   17c90:	strd	r8, [sp, #16]
   17c94:	mov	r8, #0
   17c98:	mov	r9, #0
   17c9c:	str	lr, [sp, #24]
   17ca0:	sub	sp, sp, #28
   17ca4:	mov	lr, #0
   17ca8:	str	lr, [r3]
   17cac:	str	lr, [sp, #12]
   17cb0:	strd	r8, [sp, #16]
   17cb4:	beq	17ce0 <_start@@Base+0x2ecc>
   17cb8:	add	ip, sp, #16
   17cbc:	mov	r5, r3
   17cc0:	add	r3, sp, #12
   17cc4:	mov	r4, r1
   17cc8:	str	ip, [sp]
   17ccc:	mov	r7, r2
   17cd0:	mov	r6, r0
   17cd4:	bl	2d528 <flatcc_json_parser_integer@@Base>
   17cd8:	cmp	r4, r0
   17cdc:	bne	17cf8 <_start@@Base+0x2ee4>
   17ce0:	add	sp, sp, #28
   17ce4:	ldrd	r4, [sp]
   17ce8:	ldrd	r6, [sp, #8]
   17cec:	ldrd	r8, [sp, #16]
   17cf0:	add	sp, sp, #24
   17cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf8:	ldr	r3, [sp, #12]
   17cfc:	cmp	r3, #0
   17d00:	bne	17d38 <_start@@Base+0x2f24>
   17d04:	ldrd	r2, [sp, #16]
   17d08:	mov	r9, #0
   17d0c:	mvn	r8, #0
   17d10:	cmp	r3, r9
   17d14:	cmpeq	r2, r8
   17d18:	strls	r2, [r5]
   17d1c:	bls	17ce0 <_start@@Base+0x2ecc>
   17d20:	mov	r1, r0
   17d24:	mov	r2, r7
   17d28:	mov	r0, r6
   17d2c:	mov	r3, #7
   17d30:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17d34:	b	17ce0 <_start@@Base+0x2ecc>
   17d38:	mov	r1, r0
   17d3c:	mov	r2, r7
   17d40:	mov	r0, r6
   17d44:	mov	r3, #8
   17d48:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17d4c:	b	17ce0 <_start@@Base+0x2ecc>
   17d50:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17d54:	cmp	r1, r2
   17d58:	strd	r6, [sp, #8]
   17d5c:	moveq	r0, r1
   17d60:	strd	r8, [sp, #16]
   17d64:	mov	r8, #0
   17d68:	mov	r9, #0
   17d6c:	str	lr, [sp, #24]
   17d70:	sub	sp, sp, #28
   17d74:	mov	lr, #0
   17d78:	strb	lr, [r3]
   17d7c:	str	lr, [sp, #12]
   17d80:	strd	r8, [sp, #16]
   17d84:	beq	17db0 <_start@@Base+0x2f9c>
   17d88:	add	ip, sp, #16
   17d8c:	mov	r5, r3
   17d90:	add	r3, sp, #12
   17d94:	mov	r4, r1
   17d98:	str	ip, [sp]
   17d9c:	mov	r7, r2
   17da0:	mov	r6, r0
   17da4:	bl	2d528 <flatcc_json_parser_integer@@Base>
   17da8:	cmp	r4, r0
   17dac:	bne	17dc8 <_start@@Base+0x2fb4>
   17db0:	add	sp, sp, #28
   17db4:	ldrd	r4, [sp]
   17db8:	ldrd	r6, [sp, #8]
   17dbc:	ldrd	r8, [sp, #16]
   17dc0:	add	sp, sp, #24
   17dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc8:	ldr	r3, [sp, #12]
   17dcc:	cmp	r3, #0
   17dd0:	bne	17e00 <_start@@Base+0x2fec>
   17dd4:	ldrd	r2, [sp, #16]
   17dd8:	cmp	r3, #0
   17ddc:	cmpeq	r2, #255	; 0xff
   17de0:	strbls	r2, [r5]
   17de4:	bls	17db0 <_start@@Base+0x2f9c>
   17de8:	mov	r1, r0
   17dec:	mov	r2, r7
   17df0:	mov	r0, r6
   17df4:	mov	r3, #7
   17df8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17dfc:	b	17db0 <_start@@Base+0x2f9c>
   17e00:	mov	r1, r0
   17e04:	mov	r2, r7
   17e08:	mov	r0, r6
   17e0c:	mov	r3, #8
   17e10:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17e14:	b	17db0 <_start@@Base+0x2f9c>
   17e18:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17e1c:	cmp	r1, r2
   17e20:	strd	r6, [sp, #8]
   17e24:	moveq	r0, r1
   17e28:	strd	r8, [sp, #16]
   17e2c:	mov	r8, #0
   17e30:	mov	r9, #0
   17e34:	str	lr, [sp, #24]
   17e38:	sub	sp, sp, #28
   17e3c:	mov	lr, #0
   17e40:	str	lr, [r3]
   17e44:	str	lr, [sp, #12]
   17e48:	strd	r8, [sp, #16]
   17e4c:	beq	17e78 <_start@@Base+0x3064>
   17e50:	add	ip, sp, #16
   17e54:	mov	r5, r3
   17e58:	add	r3, sp, #12
   17e5c:	mov	r4, r1
   17e60:	str	ip, [sp]
   17e64:	mov	r7, r2
   17e68:	mov	r6, r0
   17e6c:	bl	2d528 <flatcc_json_parser_integer@@Base>
   17e70:	cmp	r4, r0
   17e74:	bne	17e90 <_start@@Base+0x307c>
   17e78:	add	sp, sp, #28
   17e7c:	ldrd	r4, [sp]
   17e80:	ldrd	r6, [sp, #8]
   17e84:	ldrd	r8, [sp, #16]
   17e88:	add	sp, sp, #24
   17e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e90:	ldr	r1, [sp, #12]
   17e94:	ldrd	r2, [sp, #16]
   17e98:	cmp	r1, #0
   17e9c:	beq	17ecc <_start@@Base+0x30b8>
   17ea0:	cmp	r3, #0
   17ea4:	cmpeq	r2, #-2147483648	; 0x80000000
   17ea8:	rsbls	r2, r2, #0
   17eac:	strls	r2, [r5]
   17eb0:	bls	17e78 <_start@@Base+0x3064>
   17eb4:	mov	r1, r0
   17eb8:	mov	r2, r7
   17ebc:	mov	r0, r6
   17ec0:	mov	r3, #8
   17ec4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17ec8:	b	17e78 <_start@@Base+0x3064>
   17ecc:	mov	r9, #0
   17ed0:	mvn	r8, #-2147483648	; 0x80000000
   17ed4:	cmp	r3, r9
   17ed8:	cmpeq	r2, r8
   17edc:	strls	r2, [r5]
   17ee0:	bls	17e78 <_start@@Base+0x3064>
   17ee4:	mov	r1, r0
   17ee8:	mov	r2, r7
   17eec:	mov	r0, r6
   17ef0:	mov	r3, #7
   17ef4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17ef8:	b	17e78 <_start@@Base+0x3064>
   17efc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17f00:	cmp	r1, r2
   17f04:	strd	r6, [sp, #8]
   17f08:	moveq	r0, r1
   17f0c:	strd	r8, [sp, #16]
   17f10:	mov	r8, #0
   17f14:	mov	r9, #0
   17f18:	str	lr, [sp, #24]
   17f1c:	sub	sp, sp, #28
   17f20:	mov	lr, #0
   17f24:	strh	lr, [r3]
   17f28:	str	lr, [sp, #12]
   17f2c:	strd	r8, [sp, #16]
   17f30:	beq	17f5c <_start@@Base+0x3148>
   17f34:	add	ip, sp, #16
   17f38:	mov	r5, r3
   17f3c:	add	r3, sp, #12
   17f40:	mov	r4, r1
   17f44:	str	ip, [sp]
   17f48:	mov	r7, r2
   17f4c:	mov	r6, r0
   17f50:	bl	2d528 <flatcc_json_parser_integer@@Base>
   17f54:	cmp	r4, r0
   17f58:	bne	17f74 <_start@@Base+0x3160>
   17f5c:	add	sp, sp, #28
   17f60:	ldrd	r4, [sp]
   17f64:	ldrd	r6, [sp, #8]
   17f68:	ldrd	r8, [sp, #16]
   17f6c:	add	sp, sp, #24
   17f70:	pop	{pc}		; (ldr pc, [sp], #4)
   17f74:	ldr	r1, [sp, #12]
   17f78:	ldrd	r2, [sp, #16]
   17f7c:	cmp	r1, #0
   17f80:	beq	17fb0 <_start@@Base+0x319c>
   17f84:	cmp	r3, #0
   17f88:	cmpeq	r2, #32768	; 0x8000
   17f8c:	rsbls	r2, r2, #0
   17f90:	strhls	r2, [r5]
   17f94:	bls	17f5c <_start@@Base+0x3148>
   17f98:	mov	r1, r0
   17f9c:	mov	r2, r7
   17fa0:	mov	r0, r6
   17fa4:	mov	r3, #8
   17fa8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17fac:	b	17f5c <_start@@Base+0x3148>
   17fb0:	mov	r9, #0
   17fb4:	movw	r8, #32767	; 0x7fff
   17fb8:	cmp	r3, r9
   17fbc:	cmpeq	r2, r8
   17fc0:	strhls	r2, [r5]
   17fc4:	bls	17f5c <_start@@Base+0x3148>
   17fc8:	mov	r1, r0
   17fcc:	mov	r2, r7
   17fd0:	mov	r0, r6
   17fd4:	mov	r3, #7
   17fd8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   17fdc:	b	17f5c <_start@@Base+0x3148>
   17fe0:	mov	r3, #8
   17fe4:	mov	r1, #0
   17fe8:	str	r4, [sp, #-8]!
   17fec:	mov	r2, r3
   17ff0:	mov	r4, r0
   17ff4:	str	lr, [sp, #4]
   17ff8:	bl	29be8 <flatcc_verify_field@@Base>
   17ffc:	cmp	r0, #0
   18000:	beq	18010 <_start@@Base+0x31fc>
   18004:	ldr	r4, [sp]
   18008:	add	sp, sp, #4
   1800c:	pop	{pc}		; (ldr pc, [sp], #4)
   18010:	mov	r3, #4
   18014:	mov	r0, r4
   18018:	ldr	r4, [sp]
   1801c:	mov	r2, r3
   18020:	mov	r1, #1
   18024:	ldr	lr, [sp, #4]
   18028:	add	sp, sp, #8
   1802c:	b	29be8 <flatcc_verify_field@@Base>
   18030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18034:	mov	r4, r1
   18038:	mov	r5, r0
   1803c:	mov	r1, r2
   18040:	mov	r0, r4
   18044:	strd	r6, [sp, #8]
   18048:	strd	r8, [sp, #16]
   1804c:	strd	sl, [sp, #24]
   18050:	mov	sl, r2
   18054:	mov	fp, r3
   18058:	str	lr, [sp, #32]
   1805c:	sub	sp, sp, #20
   18060:	bl	14f08 <_start@@Base+0xf4>
   18064:	add	r3, pc, #876	; 0x36c
   18068:	ldrd	r2, [r3]
   1806c:	ldr	r9, [sp, #56]	; 0x38
   18070:	ldr	r8, [sp, #60]	; 0x3c
   18074:	cmp	r1, r3
   18078:	cmpeq	r0, r2
   1807c:	bhi	1815c <_start@@Base+0x3348>
   18080:	add	r3, pc, #856	; 0x358
   18084:	ldrd	r2, [r3]
   18088:	mov	r6, #0
   1808c:	bic	r7, r1, #255	; 0xff
   18090:	cmp	r1, r3
   18094:	cmpeq	r0, r2
   18098:	bhi	180e8 <_start@@Base+0x32d4>
   1809c:	add	r3, pc, #836	; 0x344
   180a0:	ldrd	r2, [r3]
   180a4:	cmp	r7, r3
   180a8:	cmpeq	r6, r2
   180ac:	bne	180c8 <_start@@Base+0x32b4>
   180b0:	sub	r3, sl, r4
   180b4:	cmp	r3, #3
   180b8:	ble	180c8 <_start@@Base+0x32b4>
   180bc:	ldrb	r3, [r4, #3]
   180c0:	cmp	r3, #46	; 0x2e
   180c4:	beq	18324 <_start@@Base+0x3510>
   180c8:	mov	r0, r4
   180cc:	add	sp, sp, #20
   180d0:	ldrd	r4, [sp]
   180d4:	ldrd	r6, [sp, #8]
   180d8:	ldrd	r8, [sp, #16]
   180dc:	ldrd	sl, [sp, #24]
   180e0:	add	sp, sp, #32
   180e4:	pop	{pc}		; (ldr pc, [sp], #4)
   180e8:	add	r3, pc, #768	; 0x300
   180ec:	ldrd	r2, [r3]
   180f0:	cmp	r7, r3
   180f4:	cmpeq	r6, r2
   180f8:	beq	182dc <_start@@Base+0x34c8>
   180fc:	add	r9, pc, #756	; 0x2f4
   18100:	ldrd	r8, [r9]
   18104:	and	r6, r0, #-16777216	; 0xff000000
   18108:	cmp	r1, r9
   1810c:	cmpeq	r6, r8
   18110:	bne	180c8 <_start@@Base+0x32b4>
   18114:	sub	r3, sl, r4
   18118:	cmp	r3, #5
   1811c:	ble	180c8 <_start@@Base+0x32b4>
   18120:	ldrb	r3, [r4, #5]
   18124:	cmp	r3, #46	; 0x2e
   18128:	bne	180c8 <_start@@Base+0x32b4>
   1812c:	mov	r3, fp
   18130:	mov	r2, sl
   18134:	add	r1, r4, #6
   18138:	mov	r0, r5
   1813c:	add	sp, sp, #20
   18140:	ldrd	r4, [sp]
   18144:	ldrd	r6, [sp, #8]
   18148:	ldrd	r8, [sp, #16]
   1814c:	ldrd	sl, [sp, #24]
   18150:	ldr	lr, [sp, #32]
   18154:	add	sp, sp, #36	; 0x24
   18158:	b	16d78 <_start@@Base+0x1f64>
   1815c:	add	r3, pc, #668	; 0x29c
   18160:	ldrd	r2, [r3]
   18164:	cmp	r1, r3
   18168:	cmpeq	r0, r2
   1816c:	bhi	181cc <_start@@Base+0x33b8>
   18170:	add	r3, pc, #656	; 0x290
   18174:	ldrd	r2, [r3]
   18178:	cmp	r1, r3
   1817c:	cmpeq	r0, r2
   18180:	bne	180c8 <_start@@Base+0x32b4>
   18184:	sub	r3, sl, r4
   18188:	cmp	r3, #8
   1818c:	ble	180c8 <_start@@Base+0x32b4>
   18190:	ldrb	r3, [r4, #8]
   18194:	cmp	r3, #46	; 0x2e
   18198:	bne	180c8 <_start@@Base+0x32b4>
   1819c:	mov	r3, fp
   181a0:	mov	r2, sl
   181a4:	add	r1, r4, #9
   181a8:	mov	r0, r5
   181ac:	add	sp, sp, #20
   181b0:	ldrd	r4, [sp]
   181b4:	ldrd	r6, [sp, #8]
   181b8:	ldrd	r8, [sp, #16]
   181bc:	ldrd	sl, [sp, #24]
   181c0:	ldr	lr, [sp, #32]
   181c4:	add	sp, sp, #36	; 0x24
   181c8:	b	16850 <_start@@Base+0x1a3c>
   181cc:	add	r3, pc, #572	; 0x23c
   181d0:	ldrd	r2, [r3]
   181d4:	cmp	r1, r3
   181d8:	cmpeq	r0, r2
   181dc:	bhi	1823c <_start@@Base+0x3428>
   181e0:	add	r3, pc, #560	; 0x230
   181e4:	ldrd	r2, [r3]
   181e8:	cmp	r1, r3
   181ec:	cmpeq	r0, r2
   181f0:	bne	180c8 <_start@@Base+0x32b4>
   181f4:	sub	r3, sl, r4
   181f8:	cmp	r3, #8
   181fc:	ble	180c8 <_start@@Base+0x32b4>
   18200:	ldrb	r3, [r4, #8]
   18204:	cmp	r3, #46	; 0x2e
   18208:	bne	180c8 <_start@@Base+0x32b4>
   1820c:	mov	r3, fp
   18210:	mov	r2, sl
   18214:	add	r1, r4, #9
   18218:	mov	r0, r5
   1821c:	add	sp, sp, #20
   18220:	ldrd	r4, [sp]
   18224:	ldrd	r6, [sp, #8]
   18228:	ldrd	r8, [sp, #16]
   1822c:	ldrd	sl, [sp, #24]
   18230:	ldr	lr, [sp, #32]
   18234:	add	sp, sp, #36	; 0x24
   18238:	b	169f0 <_start@@Base+0x1bdc>
   1823c:	add	r3, pc, #476	; 0x1dc
   18240:	ldrd	r2, [r3]
   18244:	cmp	r1, r3
   18248:	cmpeq	r0, r2
   1824c:	beq	18354 <_start@@Base+0x3540>
   18250:	add	r3, pc, #464	; 0x1d0
   18254:	ldrd	r2, [r3]
   18258:	cmp	r1, r3
   1825c:	cmpeq	r0, r2
   18260:	bne	180c8 <_start@@Base+0x32b4>
   18264:	add	r6, r4, #8
   18268:	mov	r1, sl
   1826c:	mov	r0, r6
   18270:	mov	r7, #0
   18274:	bl	14f08 <_start@@Base+0xf4>
   18278:	mov	r3, r1
   1827c:	add	r1, pc, #428	; 0x1ac
   18280:	ldrd	r0, [r1]
   18284:	cmp	r3, r1
   18288:	cmpeq	r7, r0
   1828c:	bne	180c8 <_start@@Base+0x32b4>
   18290:	sub	r3, sl, r6
   18294:	cmp	r3, #4
   18298:	ble	180c8 <_start@@Base+0x32b4>
   1829c:	ldrb	r3, [r4, #12]
   182a0:	cmp	r3, #46	; 0x2e
   182a4:	bne	180c8 <_start@@Base+0x32b4>
   182a8:	add	r3, r4, #13
   182ac:	cmp	r6, r3
   182b0:	str	r3, [sp, #12]
   182b4:	beq	180c8 <_start@@Base+0x32b4>
   182b8:	mov	r0, r3
   182bc:	mov	r1, sl
   182c0:	bl	14f08 <_start@@Base+0xf4>
   182c4:	and	r3, r1, #-16777216	; 0xff000000
   182c8:	cmp	r3, #2013265920	; 0x78000000
   182cc:	cmpeq	r7, #0
   182d0:	beq	1839c <_start@@Base+0x3588>
   182d4:	ldr	r4, [sp, #12]
   182d8:	b	180c8 <_start@@Base+0x32b4>
   182dc:	sub	r3, sl, r4
   182e0:	cmp	r3, #3
   182e4:	ble	180c8 <_start@@Base+0x32b4>
   182e8:	ldrb	r3, [r4, #3]
   182ec:	cmp	r3, #46	; 0x2e
   182f0:	bne	180c8 <_start@@Base+0x32b4>
   182f4:	mov	r3, fp
   182f8:	mov	r2, sl
   182fc:	add	r1, r4, #4
   18300:	mov	r0, r5
   18304:	add	sp, sp, #20
   18308:	ldrd	r4, [sp]
   1830c:	ldrd	r6, [sp, #8]
   18310:	ldrd	r8, [sp, #16]
   18314:	ldrd	sl, [sp, #24]
   18318:	ldr	lr, [sp, #32]
   1831c:	add	sp, sp, #36	; 0x24
   18320:	b	17a84 <_start@@Base+0x2c70>
   18324:	mov	r3, fp
   18328:	mov	r2, sl
   1832c:	add	r1, r4, #4
   18330:	mov	r0, r5
   18334:	add	sp, sp, #20
   18338:	ldrd	r4, [sp]
   1833c:	ldrd	r6, [sp, #8]
   18340:	ldrd	r8, [sp, #16]
   18344:	ldrd	sl, [sp, #24]
   18348:	ldr	lr, [sp, #32]
   1834c:	add	sp, sp, #36	; 0x24
   18350:	b	165c8 <_start@@Base+0x17b4>
   18354:	sub	r3, sl, r4
   18358:	cmp	r3, #8
   1835c:	ble	180c8 <_start@@Base+0x32b4>
   18360:	ldrb	r3, [r4, #8]
   18364:	cmp	r3, #46	; 0x2e
   18368:	bne	180c8 <_start@@Base+0x32b4>
   1836c:	mov	r3, fp
   18370:	mov	r2, sl
   18374:	add	r1, r4, #9
   18378:	mov	r0, r5
   1837c:	add	sp, sp, #20
   18380:	ldrd	r4, [sp]
   18384:	ldrd	r6, [sp, #8]
   18388:	ldrd	r8, [sp, #16]
   1838c:	ldrd	sl, [sp, #24]
   18390:	ldr	lr, [sp, #32]
   18394:	add	sp, sp, #36	; 0x24
   18398:	b	16bf8 <_start@@Base+0x1de4>
   1839c:	mov	r0, r5
   183a0:	ldr	r5, [sp, #12]
   183a4:	mov	r2, sl
   183a8:	mov	r3, #1
   183ac:	str	r8, [sp]
   183b0:	mov	r1, r5
   183b4:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   183b8:	cmp	r5, r0
   183bc:	mov	r4, r0
   183c0:	beq	180c8 <_start@@Base+0x32b4>
   183c4:	mov	r0, #0
   183c8:	mov	r1, #0
   183cc:	strd	r0, [r9]
   183d0:	str	r7, [fp]
   183d4:	b	180c8 <_start@@Base+0x32b4>
   183d8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   183dc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   183e0:	ldrshvc	pc, [pc, #255]	; 184e7 <_start@@Base+0x36d3>	; <UNPREDICTABLE>
   183e4:	cmnmi	pc, #28416	; 0x6f00
   183e8:	andeq	r0, r0, r0
   183ec:	cmnmi	lr, r0, lsl #18
   183f0:	andeq	r0, r0, r0
   183f4:	strbtmi	r6, [pc], -r0, lsl #30
   183f8:	andvc	r0, r0, #0
   183fc:	cmnmi	pc, #28416	; 0x6f00
   18400:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18404:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18408:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1840c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   18410:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   18414:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18418:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1841c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   18420:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18424:	mcrvs	7, 3, r6, cr5, cr15, {2}
   18428:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1842c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   18430:	andeq	r0, r0, r0
   18434:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   18438:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1843c:	mov	r4, r1
   18440:	mov	r1, r2
   18444:	strd	r6, [sp, #8]
   18448:	mov	r5, r2
   1844c:	strd	r8, [sp, #16]
   18450:	mov	r8, r0
   18454:	mov	r0, r4
   18458:	strd	sl, [sp, #24]
   1845c:	mov	sl, r3
   18460:	str	lr, [sp, #32]
   18464:	sub	sp, sp, #20
   18468:	bl	14f08 <_start@@Base+0xf4>
   1846c:	add	r3, pc, #924	; 0x39c
   18470:	ldrd	r2, [r3]
   18474:	ldr	r7, [sp, #56]	; 0x38
   18478:	ldr	fp, [sp, #60]	; 0x3c
   1847c:	cmp	r1, r3
   18480:	cmpeq	r0, r2
   18484:	bhi	18528 <_start@@Base+0x3714>
   18488:	add	r3, pc, #904	; 0x388
   1848c:	ldrd	r2, [r3]
   18490:	cmp	r1, r3
   18494:	cmpeq	r0, r2
   18498:	bne	18668 <_start@@Base+0x3854>
   1849c:	mov	r1, r5
   184a0:	add	r0, r4, #8
   184a4:	bl	14f08 <_start@@Base+0xf4>
   184a8:	add	r3, pc, #880	; 0x370
   184ac:	ldrd	r2, [r3]
   184b0:	cmp	r1, r3
   184b4:	cmpeq	r0, r2
   184b8:	bne	18668 <_start@@Base+0x3854>
   184bc:	add	r6, r4, #16
   184c0:	mov	r1, r5
   184c4:	mov	r0, r6
   184c8:	bl	14f08 <_start@@Base+0xf4>
   184cc:	and	r3, r1, #-16777216	; 0xff000000
   184d0:	mov	r2, #0
   184d4:	cmp	r3, #1912602624	; 0x72000000
   184d8:	cmpeq	r2, #0
   184dc:	bne	18668 <_start@@Base+0x3854>
   184e0:	sub	r6, r5, r6
   184e4:	cmp	r6, #1
   184e8:	ble	18668 <_start@@Base+0x3854>
   184ec:	ldrb	r3, [r4, #17]
   184f0:	cmp	r3, #46	; 0x2e
   184f4:	bne	18668 <_start@@Base+0x3854>
   184f8:	mov	r3, sl
   184fc:	mov	r2, r5
   18500:	add	r1, r4, #18
   18504:	mov	r0, r8
   18508:	add	sp, sp, #20
   1850c:	ldrd	r4, [sp]
   18510:	ldrd	r6, [sp, #8]
   18514:	ldrd	r8, [sp, #16]
   18518:	ldrd	sl, [sp, #24]
   1851c:	ldr	lr, [sp, #32]
   18520:	add	sp, sp, #36	; 0x24
   18524:	b	162a8 <_start@@Base+0x1494>
   18528:	add	r3, pc, #760	; 0x2f8
   1852c:	ldrd	r2, [r3]
   18530:	cmp	r1, r3
   18534:	cmpeq	r0, r2
   18538:	beq	18688 <_start@@Base+0x3874>
   1853c:	add	r3, pc, #748	; 0x2ec
   18540:	ldrd	r2, [r3]
   18544:	cmp	r1, r3
   18548:	cmpeq	r0, r2
   1854c:	bne	18668 <_start@@Base+0x3854>
   18550:	mov	r1, r5
   18554:	add	r0, r4, #8
   18558:	bl	14f08 <_start@@Base+0xf4>
   1855c:	add	r3, pc, #724	; 0x2d4
   18560:	ldrd	r2, [r3]
   18564:	cmp	r1, r3
   18568:	cmpeq	r0, r2
   1856c:	bne	18668 <_start@@Base+0x3854>
   18570:	mov	r1, r5
   18574:	add	r0, r4, #16
   18578:	bl	14f08 <_start@@Base+0xf4>
   1857c:	add	r3, pc, #700	; 0x2bc
   18580:	ldrd	r2, [r3]
   18584:	cmp	r1, r3
   18588:	cmpeq	r0, r2
   1858c:	bne	18668 <_start@@Base+0x3854>
   18590:	mov	r1, r5
   18594:	add	r0, r4, #24
   18598:	bl	14f08 <_start@@Base+0xf4>
   1859c:	add	r3, pc, #676	; 0x2a4
   185a0:	ldrd	r2, [r3]
   185a4:	cmp	r1, r3
   185a8:	cmpeq	r0, r2
   185ac:	bne	18668 <_start@@Base+0x3854>
   185b0:	add	r6, r4, #32
   185b4:	mov	r1, r5
   185b8:	mov	r0, r6
   185bc:	mov	r9, #0
   185c0:	bl	14f08 <_start@@Base+0xf4>
   185c4:	and	r3, r1, #-16777216	; 0xff000000
   185c8:	cmp	r3, #1694498816	; 0x65000000
   185cc:	cmpeq	r9, #0
   185d0:	bne	18668 <_start@@Base+0x3854>
   185d4:	sub	r6, r5, r6
   185d8:	cmp	r6, #1
   185dc:	ble	18668 <_start@@Base+0x3854>
   185e0:	ldrb	r3, [r4, #33]	; 0x21
   185e4:	cmp	r3, #46	; 0x2e
   185e8:	bne	18668 <_start@@Base+0x3854>
   185ec:	add	r6, r4, #34	; 0x22
   185f0:	mov	r1, r5
   185f4:	mov	r0, r6
   185f8:	bl	14f08 <_start@@Base+0xf4>
   185fc:	bic	r3, r1, #255	; 0xff
   18600:	strd	r0, [sp, #8]
   18604:	add	r1, pc, #580	; 0x244
   18608:	ldrd	r0, [r1]
   1860c:	cmp	r3, r1
   18610:	cmpeq	r9, r0
   18614:	beq	18b8c <_start@@Base+0x3d78>
   18618:	add	r3, pc, #568	; 0x238
   1861c:	ldrd	r2, [r3]
   18620:	ldrd	r0, [sp, #8]
   18624:	cmp	r1, r3
   18628:	cmpeq	r0, r2
   1862c:	bne	18664 <_start@@Base+0x3850>
   18630:	add	r9, r4, #42	; 0x2a
   18634:	mov	r1, r5
   18638:	mov	r0, r9
   1863c:	bl	14f08 <_start@@Base+0xf4>
   18640:	lsr	r3, r1, #16
   18644:	mov	r1, #0
   18648:	movt	r1, #24940	; 0x616c
   1864c:	mov	r2, #0
   18650:	mov	r0, #0
   18654:	lsl	r3, r3, #16
   18658:	cmp	r3, r1
   1865c:	cmpeq	r2, r0
   18660:	beq	18bc4 <_start@@Base+0x3db0>
   18664:	mov	r4, r6
   18668:	mov	r0, r4
   1866c:	add	sp, sp, #20
   18670:	ldrd	r4, [sp]
   18674:	ldrd	r6, [sp, #8]
   18678:	ldrd	r8, [sp, #16]
   1867c:	ldrd	sl, [sp, #24]
   18680:	add	sp, sp, #32
   18684:	pop	{pc}		; (ldr pc, [sp], #4)
   18688:	mov	r1, r5
   1868c:	add	r0, r4, #8
   18690:	bl	14f08 <_start@@Base+0xf4>
   18694:	add	r3, pc, #452	; 0x1c4
   18698:	ldrd	r2, [r3]
   1869c:	cmp	r1, r3
   186a0:	cmpeq	r0, r2
   186a4:	bhi	18760 <_start@@Base+0x394c>
   186a8:	add	r3, pc, #440	; 0x1b8
   186ac:	ldrd	r2, [r3]
   186b0:	cmp	r1, r3
   186b4:	cmpeq	r0, r2
   186b8:	bls	18948 <_start@@Base+0x3b34>
   186bc:	add	r3, pc, #428	; 0x1ac
   186c0:	ldrd	r2, [r3]
   186c4:	cmp	r1, r3
   186c8:	cmpeq	r0, r2
   186cc:	beq	18a64 <_start@@Base+0x3c50>
   186d0:	add	r3, pc, #416	; 0x1a0
   186d4:	ldrd	r2, [r3]
   186d8:	cmp	r1, r3
   186dc:	cmpeq	r0, r2
   186e0:	bne	18668 <_start@@Base+0x3854>
   186e4:	add	r9, r4, #16
   186e8:	mov	r1, r5
   186ec:	mov	r0, r9
   186f0:	mov	r7, #0
   186f4:	movt	r7, #28527	; 0x6f6f
   186f8:	mov	r6, #0
   186fc:	bl	14f08 <_start@@Base+0xf4>
   18700:	lsr	r3, r1, #16
   18704:	mov	r2, #0
   18708:	lsl	r3, r3, #16
   1870c:	cmp	r3, r7
   18710:	cmpeq	r2, r6
   18714:	bne	18668 <_start@@Base+0x3854>
   18718:	sub	r9, r5, r9
   1871c:	cmp	r9, #2
   18720:	ble	18668 <_start@@Base+0x3854>
   18724:	ldrb	r3, [r4, #18]
   18728:	cmp	r3, #46	; 0x2e
   1872c:	bne	18668 <_start@@Base+0x3854>
   18730:	mov	r3, sl
   18734:	mov	r2, r5
   18738:	add	r1, r4, #19
   1873c:	mov	r0, r8
   18740:	add	sp, sp, #20
   18744:	ldrd	r4, [sp]
   18748:	ldrd	r6, [sp, #8]
   1874c:	ldrd	r8, [sp, #16]
   18750:	ldrd	sl, [sp, #24]
   18754:	ldr	lr, [sp, #32]
   18758:	add	sp, sp, #36	; 0x24
   1875c:	b	17a84 <_start@@Base+0x2c70>
   18760:	add	r3, pc, #280	; 0x118
   18764:	ldrd	r2, [r3]
   18768:	cmp	r1, r3
   1876c:	cmpeq	r0, r2
   18770:	beq	188d8 <_start@@Base+0x3ac4>
   18774:	add	r3, pc, #268	; 0x10c
   18778:	ldrd	r2, [r3]
   1877c:	cmp	r1, r3
   18780:	cmpeq	r0, r2
   18784:	bhi	189d8 <_start@@Base+0x3bc4>
   18788:	add	r3, pc, #256	; 0x100
   1878c:	ldrd	r2, [r3]
   18790:	cmp	r1, r3
   18794:	cmpeq	r0, r2
   18798:	bne	18668 <_start@@Base+0x3854>
   1879c:	add	r7, pc, #244	; 0xf4
   187a0:	ldrd	r6, [r7]
   187a4:	add	r9, r4, #16
   187a8:	mov	r1, r5
   187ac:	mov	r0, r9
   187b0:	bl	14f08 <_start@@Base+0xf4>
   187b4:	bic	r2, r0, #255	; 0xff
   187b8:	cmp	r1, r7
   187bc:	cmpeq	r2, r6
   187c0:	bne	18668 <_start@@Base+0x3854>
   187c4:	sub	r9, r5, r9
   187c8:	cmp	r9, #7
   187cc:	ble	18668 <_start@@Base+0x3854>
   187d0:	ldrb	r3, [r4, #23]
   187d4:	cmp	r3, #46	; 0x2e
   187d8:	bne	18668 <_start@@Base+0x3854>
   187dc:	mov	r3, sl
   187e0:	mov	r2, r5
   187e4:	add	r1, r4, #24
   187e8:	mov	r0, r8
   187ec:	add	sp, sp, #20
   187f0:	ldrd	r4, [sp]
   187f4:	ldrd	r6, [sp, #8]
   187f8:	ldrd	r8, [sp, #16]
   187fc:	ldrd	sl, [sp, #24]
   18800:	ldr	lr, [sp, #32]
   18804:	add	sp, sp, #36	; 0x24
   18808:	b	169f0 <_start@@Base+0x1bdc>
   1880c:	nop	{0}
   18810:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   18814:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18818:	cmnvs	r3, lr, lsr #18
   1881c:			; <UNDEFINED> instruction: 0x46616e74
   18820:	cmnvs	r3, r5, ror #8
   18824:	cmnmi	r8, #-2147483620	; 0x8000001c
   18828:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1882c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18830:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18834:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18838:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1883c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18840:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18844:	cmnpl	r0, #-1073741800	; 0xc0000018
   18848:	cmnvs	ip, #100, 10	; 0x19000000
   1884c:	svcvs	0x006d496e
   18850:	andeq	r0, r0, r0
   18854:	strbtmi	r6, [pc], -r0, lsl #30
   18858:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1885c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   18860:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   18864:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18868:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1886c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18870:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   18874:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18878:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   1887c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18880:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   18884:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18888:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1888c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18890:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   18894:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18898:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1889c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   188a0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   188a4:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   188a8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   188ac:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   188b0:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   188b4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   188b8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   188bc:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   188c0:	andeq	r0, r0, r0
   188c4:	svcvs	0x006c6f72
   188c8:	rsbsvc	r7, r4, r5, ror #18
   188cc:	svcvs	0x0074656d
   188d0:	andeq	r0, r0, r0
   188d4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   188d8:	sub	r7, pc, #64	; 0x40
   188dc:	ldrd	r6, [r7]
   188e0:	add	r9, r4, #16
   188e4:	mov	r1, r5
   188e8:	mov	r0, r9
   188ec:	bl	14f08 <_start@@Base+0xf4>
   188f0:	bic	r2, r0, #255	; 0xff
   188f4:	cmp	r1, r7
   188f8:	cmpeq	r2, r6
   188fc:	bne	18668 <_start@@Base+0x3854>
   18900:	sub	r9, r5, r9
   18904:	cmp	r9, #7
   18908:	ble	18668 <_start@@Base+0x3854>
   1890c:	ldrb	r3, [r4, #23]
   18910:	cmp	r3, #46	; 0x2e
   18914:	bne	18668 <_start@@Base+0x3854>
   18918:	mov	r3, sl
   1891c:	mov	r2, r5
   18920:	add	r1, r4, #24
   18924:	mov	r0, r8
   18928:	add	sp, sp, #20
   1892c:	ldrd	r4, [sp]
   18930:	ldrd	r6, [sp, #8]
   18934:	ldrd	r8, [sp, #16]
   18938:	ldrd	sl, [sp, #24]
   1893c:	ldr	lr, [sp, #32]
   18940:	add	sp, sp, #36	; 0x24
   18944:	b	16850 <_start@@Base+0x1a3c>
   18948:	sub	r3, pc, #168	; 0xa8
   1894c:	ldrd	r2, [r3]
   18950:	cmp	r1, r3
   18954:	cmpeq	r0, r2
   18958:	bne	18668 <_start@@Base+0x3854>
   1895c:	add	r9, r4, #16
   18960:	mov	r1, r5
   18964:	mov	r0, r9
   18968:	mov	r7, #0
   1896c:	movt	r7, #28281	; 0x6e79
   18970:	mov	r6, #0
   18974:	bl	14f08 <_start@@Base+0xf4>
   18978:	lsr	r3, r1, #16
   1897c:	mov	r2, #0
   18980:	lsl	r3, r3, #16
   18984:	cmp	r3, r7
   18988:	cmpeq	r2, r6
   1898c:	bne	18668 <_start@@Base+0x3854>
   18990:	sub	r9, r5, r9
   18994:	cmp	r9, #2
   18998:	ble	18668 <_start@@Base+0x3854>
   1899c:	ldrb	r3, [r4, #18]
   189a0:	cmp	r3, #46	; 0x2e
   189a4:	bne	18668 <_start@@Base+0x3854>
   189a8:	mov	r3, sl
   189ac:	mov	r2, r5
   189b0:	add	r1, r4, #19
   189b4:	mov	r0, r8
   189b8:	add	sp, sp, #20
   189bc:	ldrd	r4, [sp]
   189c0:	ldrd	r6, [sp, #8]
   189c4:	ldrd	r8, [sp, #16]
   189c8:	ldrd	sl, [sp, #24]
   189cc:	ldr	lr, [sp, #32]
   189d0:	add	sp, sp, #36	; 0x24
   189d4:	b	165c8 <_start@@Base+0x17b4>
   189d8:	sub	r3, pc, #304	; 0x130
   189dc:	ldrd	r2, [r3]
   189e0:	cmp	r1, r3
   189e4:	cmpeq	r0, r2
   189e8:	bne	18668 <_start@@Base+0x3854>
   189ec:	add	r9, r4, #16
   189f0:	mov	r1, r5
   189f4:	mov	r0, r9
   189f8:	bl	14f08 <_start@@Base+0xf4>
   189fc:	bic	r2, r0, #255	; 0xff
   18a00:	mov	r3, r1
   18a04:	strd	r0, [sp, #8]
   18a08:	sub	r1, pc, #344	; 0x158
   18a0c:	ldrd	r0, [r1]
   18a10:	cmp	r3, r1
   18a14:	cmpeq	r2, r0
   18a18:	bne	18ad4 <_start@@Base+0x3cc0>
   18a1c:	sub	r9, r5, r9
   18a20:	cmp	r9, #7
   18a24:	ble	18668 <_start@@Base+0x3854>
   18a28:	ldrb	r3, [r4, #23]
   18a2c:	cmp	r3, #46	; 0x2e
   18a30:	bne	18668 <_start@@Base+0x3854>
   18a34:	mov	r3, sl
   18a38:	mov	r2, r5
   18a3c:	add	r1, r4, #24
   18a40:	mov	r0, r8
   18a44:	add	sp, sp, #20
   18a48:	ldrd	r4, [sp]
   18a4c:	ldrd	r6, [sp, #8]
   18a50:	ldrd	r8, [sp, #16]
   18a54:	ldrd	sl, [sp, #24]
   18a58:	ldr	lr, [sp, #32]
   18a5c:	add	sp, sp, #36	; 0x24
   18a60:	b	16bf8 <_start@@Base+0x1de4>
   18a64:	sub	r7, pc, #428	; 0x1ac
   18a68:	ldrd	r6, [r7]
   18a6c:	add	r9, r4, #16
   18a70:	mov	r1, r5
   18a74:	mov	r0, r9
   18a78:	bl	14f08 <_start@@Base+0xf4>
   18a7c:	mov	r2, #0
   18a80:	cmp	r1, r7
   18a84:	cmpeq	r2, r6
   18a88:	bne	18668 <_start@@Base+0x3854>
   18a8c:	sub	r9, r5, r9
   18a90:	cmp	r9, #4
   18a94:	ble	18668 <_start@@Base+0x3854>
   18a98:	ldrb	r3, [r4, #20]
   18a9c:	cmp	r3, #46	; 0x2e
   18aa0:	bne	18668 <_start@@Base+0x3854>
   18aa4:	mov	r3, sl
   18aa8:	mov	r2, r5
   18aac:	add	r1, r4, #21
   18ab0:	mov	r0, r8
   18ab4:	add	sp, sp, #20
   18ab8:	ldrd	r4, [sp]
   18abc:	ldrd	r6, [sp, #8]
   18ac0:	ldrd	r8, [sp, #16]
   18ac4:	ldrd	sl, [sp, #24]
   18ac8:	ldr	lr, [sp, #32]
   18acc:	add	sp, sp, #36	; 0x24
   18ad0:	b	16d78 <_start@@Base+0x1f64>
   18ad4:	sub	r3, pc, #532	; 0x214
   18ad8:	ldrd	r2, [r3]
   18adc:	ldrd	r0, [sp, #8]
   18ae0:	cmp	r1, r3
   18ae4:	cmpeq	r0, r2
   18ae8:	bne	18668 <_start@@Base+0x3854>
   18aec:	add	r9, r4, #24
   18af0:	mov	r1, r5
   18af4:	mov	r0, r9
   18af8:	bl	14f08 <_start@@Base+0xf4>
   18afc:	bic	r3, r1, #255	; 0xff
   18b00:	sub	r1, pc, #568	; 0x238
   18b04:	ldrd	r0, [r1]
   18b08:	mov	r2, #0
   18b0c:	cmp	r3, r1
   18b10:	cmpeq	r2, r0
   18b14:	bne	18668 <_start@@Base+0x3854>
   18b18:	sub	r9, r5, r9
   18b1c:	cmp	r9, #3
   18b20:	ble	18668 <_start@@Base+0x3854>
   18b24:	ldrb	r3, [r4, #27]
   18b28:	cmp	r3, #46	; 0x2e
   18b2c:	bne	18668 <_start@@Base+0x3854>
   18b30:	add	r6, r4, #28
   18b34:	mov	r1, r5
   18b38:	mov	r0, r6
   18b3c:	mov	r9, #0
   18b40:	bl	14f08 <_start@@Base+0xf4>
   18b44:	and	r3, r1, #-16777216	; 0xff000000
   18b48:	cmp	r3, #2013265920	; 0x78000000
   18b4c:	cmpeq	r9, #0
   18b50:	bne	18664 <_start@@Base+0x3850>
   18b54:	mov	r2, r5
   18b58:	mov	r0, r8
   18b5c:	str	fp, [sp]
   18b60:	mov	r3, #1
   18b64:	mov	r1, r6
   18b68:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   18b6c:	cmp	r6, r0
   18b70:	mov	r4, r0
   18b74:	beq	18668 <_start@@Base+0x3854>
   18b78:	mov	r2, #0
   18b7c:	mov	r3, #0
   18b80:	strd	r2, [r7]
   18b84:	str	r9, [sl]
   18b88:	b	18668 <_start@@Base+0x3854>
   18b8c:	mov	r2, r5
   18b90:	mov	r0, r8
   18b94:	str	fp, [sp]
   18b98:	mov	r3, #3
   18b9c:	mov	r1, r6
   18ba0:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   18ba4:	cmp	r6, r0
   18ba8:	mov	r4, r0
   18bac:	beq	18668 <_start@@Base+0x3854>
   18bb0:	mov	r0, #17
   18bb4:	mov	r1, #0
   18bb8:	strd	r0, [r7]
   18bbc:	str	r9, [sl]
   18bc0:	b	18668 <_start@@Base+0x3854>
   18bc4:	mov	r2, r5
   18bc8:	mov	r0, r8
   18bcc:	str	fp, [sp]
   18bd0:	mov	r3, #2
   18bd4:	mov	r1, r9
   18bd8:	bl	2d1e0 <flatcc_json_parser_match_constant@@Base>
   18bdc:	cmp	r9, r0
   18be0:	mov	r4, r0
   18be4:	beq	18664 <_start@@Base+0x3850>
   18be8:	mov	r3, #0
   18bec:	mov	r2, #0
   18bf0:	strd	r2, [r7]
   18bf4:	mov	r3, #0
   18bf8:	str	r3, [sl]
   18bfc:	b	18668 <_start@@Base+0x3854>
   18c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c04:	cmp	r1, r2
   18c08:	strd	r6, [sp, #8]
   18c0c:	mov	r6, r2
   18c10:	strd	r8, [sp, #16]
   18c14:	mov	r9, r0
   18c18:	strd	sl, [sp, #24]
   18c1c:	mov	sl, #0
   18c20:	mov	fp, #0
   18c24:	str	lr, [sp, #32]
   18c28:	sub	sp, sp, #44	; 0x2c
   18c2c:	str	r3, [sp, #16]
   18c30:	ldr	r3, [sp, #80]	; 0x50
   18c34:	strd	sl, [r3]
   18c38:	beq	18dec <_start@@Base+0x3fd8>
   18c3c:	ldrb	r3, [r1]
   18c40:	mov	r4, r1
   18c44:	cmp	r3, #34	; 0x22
   18c48:	addeq	r4, r1, #1
   18c4c:	bne	18dc8 <_start@@Base+0x3fb4>
   18c50:	sub	r3, r6, r4
   18c54:	cmp	r3, #1
   18c58:	ble	18c6c <_start@@Base+0x3e58>
   18c5c:	ldrb	r3, [r4]
   18c60:	cmp	r3, #32
   18c64:	bhi	18c80 <_start@@Base+0x3e6c>
   18c68:	beq	18dd8 <_start@@Base+0x3fc4>
   18c6c:	mov	r1, r4
   18c70:	mov	r2, r6
   18c74:	mov	r0, r9
   18c78:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   18c7c:	mov	r4, r0
   18c80:	cmp	r6, r4
   18c84:	beq	18cf8 <_start@@Base+0x3ee4>
   18c88:	mov	r3, #0
   18c8c:	add	fp, sp, #24
   18c90:	add	sl, sp, #28
   18c94:	str	r3, [sp, #8]
   18c98:	str	r3, [sp, #12]
   18c9c:	add	r3, sp, #32
   18ca0:	str	r3, [sp, #20]
   18ca4:	ldr	r8, [sp, #16]
   18ca8:	mov	r7, r4
   18cac:	mov	r1, r4
   18cb0:	ldr	r4, [sp, #20]
   18cb4:	ldr	r5, [r8]
   18cb8:	b	18cd4 <_start@@Base+0x3ec0>
   18cbc:	cmp	r7, r0
   18cc0:	mov	r7, r0
   18cc4:	bne	18d18 <_start@@Base+0x3f04>
   18cc8:	ldr	r5, [r8, #4]!
   18ccc:	cmp	r5, #0
   18cd0:	beq	18d80 <_start@@Base+0x3f6c>
   18cd4:	mov	r3, fp
   18cd8:	mov	r2, r6
   18cdc:	stm	sp, {r4, sl}
   18ce0:	mov	r0, r9
   18ce4:	blx	r5
   18ce8:	cmp	r6, r0
   18cec:	mov	r1, r0
   18cf0:	bne	18cbc <_start@@Base+0x3ea8>
   18cf4:	mov	r4, r0
   18cf8:	mov	r0, r4
   18cfc:	add	sp, sp, #44	; 0x2c
   18d00:	ldrd	r4, [sp]
   18d04:	ldrd	r6, [sp, #8]
   18d08:	ldrd	r8, [sp, #16]
   18d0c:	ldrd	sl, [sp, #24]
   18d10:	add	sp, sp, #32
   18d14:	pop	{pc}		; (ldr pc, [sp], #4)
   18d18:	ldr	r1, [sp, #24]
   18d1c:	mov	r4, r0
   18d20:	ldrd	r2, [sp, #32]
   18d24:	cmp	r1, #0
   18d28:	beq	18d98 <_start@@Base+0x3f84>
   18d2c:	cmp	r3, #-2147483648	; 0x80000000
   18d30:	cmpeq	r2, #0
   18d34:	bhi	18df4 <_start@@Base+0x3fe0>
   18d38:	rsbs	r2, r2, #0
   18d3c:	rsc	r3, r3, #0
   18d40:	strd	r2, [sp, #8]
   18d44:	ldr	r0, [sp, #8]
   18d48:	ldr	r3, [sp, #80]	; 0x50
   18d4c:	ldr	r1, [sp, #28]
   18d50:	ldr	r2, [sp, #80]	; 0x50
   18d54:	ldr	r3, [r3]
   18d58:	ldr	r2, [r2, #4]
   18d5c:	adds	r3, r3, r0
   18d60:	ldr	r0, [sp, #12]
   18d64:	adc	r2, r2, r0
   18d68:	ldr	r0, [sp, #80]	; 0x50
   18d6c:	cmp	r1, #0
   18d70:	str	r3, [r0]
   18d74:	str	r2, [r0, #4]
   18d78:	bne	18ca4 <_start@@Base+0x3e90>
   18d7c:	b	18cf8 <_start@@Base+0x3ee4>
   18d80:	mov	r2, r6
   18d84:	mov	r0, r9
   18d88:	mov	r3, #23
   18d8c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   18d90:	mov	r4, r0
   18d94:	b	18cf8 <_start@@Base+0x3ee4>
   18d98:	cmp	r2, #0
   18d9c:	sbcs	r1, r3, #0
   18da0:	bge	18d40 <_start@@Base+0x3f2c>
   18da4:	mov	r3, #7
   18da8:	mov	r2, r6
   18dac:	mov	r1, r4
   18db0:	mov	r0, r9
   18db4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   18db8:	cmp	r6, r0
   18dbc:	bne	18d44 <_start@@Base+0x3f30>
   18dc0:	mov	r4, r6
   18dc4:	b	18cf8 <_start@@Base+0x3ee4>
   18dc8:	mov	r3, #5
   18dcc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   18dd0:	mov	r4, r0
   18dd4:	b	18c50 <_start@@Base+0x3e3c>
   18dd8:	ldrb	r3, [r4, #1]
   18ddc:	cmp	r3, #32
   18de0:	addhi	r4, r4, #1
   18de4:	bls	18c6c <_start@@Base+0x3e58>
   18de8:	b	18c80 <_start@@Base+0x3e6c>
   18dec:	mov	r4, r2
   18df0:	b	18c6c <_start@@Base+0x3e58>
   18df4:	mov	r3, #8
   18df8:	mov	r2, r6
   18dfc:	mov	r1, r4
   18e00:	mov	r0, r9
   18e04:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   18e08:	b	18db8 <_start@@Base+0x3fa4>
   18e0c:	cmp	r1, r2
   18e10:	beq	18e20 <_start@@Base+0x400c>
   18e14:	ldrb	ip, [r1]
   18e18:	cmp	ip, #123	; 0x7b
   18e1c:	beq	18e30 <_start@@Base+0x401c>
   18e20:	mov	ip, #0
   18e24:	str	ip, [r3]
   18e28:	mov	r3, #21
   18e2c:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   18e30:	strd	r4, [sp, #-16]!
   18e34:	mov	r5, r0
   18e38:	add	r0, r1, #1
   18e3c:	str	r6, [sp, #8]
   18e40:	mov	r6, r3
   18e44:	sub	r3, r2, r0
   18e48:	cmp	r3, #1
   18e4c:	mov	r4, r2
   18e50:	str	lr, [sp, #12]
   18e54:	ble	18e68 <_start@@Base+0x4054>
   18e58:	ldrb	r3, [r1, #1]
   18e5c:	cmp	r3, #32
   18e60:	bhi	18e78 <_start@@Base+0x4064>
   18e64:	beq	18ea4 <_start@@Base+0x4090>
   18e68:	mov	r1, r0
   18e6c:	mov	r2, r4
   18e70:	mov	r0, r5
   18e74:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   18e78:	cmp	r4, r0
   18e7c:	beq	18e8c <_start@@Base+0x4078>
   18e80:	ldrb	r3, [r0]
   18e84:	cmp	r3, #125	; 0x7d
   18e88:	beq	18eb8 <_start@@Base+0x40a4>
   18e8c:	mov	r3, #1
   18e90:	ldrd	r4, [sp]
   18e94:	str	r3, [r6]
   18e98:	ldr	r6, [sp, #8]
   18e9c:	add	sp, sp, #12
   18ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea4:	ldrb	r3, [r1, #2]
   18ea8:	cmp	r3, #32
   18eac:	addhi	r0, r1, #2
   18eb0:	bls	18e68 <_start@@Base+0x4054>
   18eb4:	b	18e78 <_start@@Base+0x4064>
   18eb8:	mov	r3, #0
   18ebc:	mov	r2, r4
   18ec0:	ldr	lr, [sp, #12]
   18ec4:	add	r1, r0, #1
   18ec8:	mov	r0, r5
   18ecc:	ldrd	r4, [sp]
   18ed0:	str	r3, [r6]
   18ed4:	ldr	r6, [sp, #8]
   18ed8:	add	sp, sp, #16
   18edc:	b	16ef8 <_start@@Base+0x20e4>
   18ee0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18ee4:	cmp	r1, r2
   18ee8:	mov	r5, r2
   18eec:	strd	r6, [sp, #8]
   18ef0:	strd	r8, [sp, #16]
   18ef4:	mov	r8, r0
   18ef8:	strd	sl, [sp, #24]
   18efc:	str	lr, [sp, #32]
   18f00:	sub	sp, sp, #36	; 0x24
   18f04:	mov	lr, #0
   18f08:	str	r3, [sp, #8]
   18f0c:	ldr	r3, [sp, #72]	; 0x48
   18f10:	str	lr, [r3]
   18f14:	beq	1905c <_start@@Base+0x4248>
   18f18:	ldrb	r3, [r1]
   18f1c:	cmp	r3, #34	; 0x22
   18f20:	addeq	r3, r1, #1
   18f24:	bne	19038 <_start@@Base+0x4224>
   18f28:	sub	r2, r5, r3
   18f2c:	cmp	r2, #1
   18f30:	ble	18f44 <_start@@Base+0x4130>
   18f34:	ldrb	r2, [r3]
   18f38:	cmp	r2, #32
   18f3c:	bhi	18f58 <_start@@Base+0x4144>
   18f40:	beq	19048 <_start@@Base+0x4234>
   18f44:	mov	r1, r3
   18f48:	mov	r2, r5
   18f4c:	mov	r0, r8
   18f50:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   18f54:	mov	r3, r0
   18f58:	cmp	r5, r3
   18f5c:	beq	18fbc <_start@@Base+0x41a8>
   18f60:	add	fp, sp, #16
   18f64:	add	sl, sp, #20
   18f68:	add	r9, sp, #24
   18f6c:	ldr	r7, [sp, #8]
   18f70:	mov	r6, r3
   18f74:	mov	r1, r3
   18f78:	ldr	r4, [r7]
   18f7c:	b	18f98 <_start@@Base+0x4184>
   18f80:	cmp	r6, r0
   18f84:	mov	r6, r0
   18f88:	bne	18fdc <_start@@Base+0x41c8>
   18f8c:	ldr	r4, [r7, #4]!
   18f90:	cmp	r4, #0
   18f94:	beq	19020 <_start@@Base+0x420c>
   18f98:	mov	r3, fp
   18f9c:	mov	r2, r5
   18fa0:	stm	sp, {r9, sl}
   18fa4:	mov	r0, r8
   18fa8:	blx	r4
   18fac:	cmp	r5, r0
   18fb0:	mov	r1, r0
   18fb4:	bne	18f80 <_start@@Base+0x416c>
   18fb8:	mov	r3, r0
   18fbc:	mov	r0, r3
   18fc0:	add	sp, sp, #36	; 0x24
   18fc4:	ldrd	r4, [sp]
   18fc8:	ldrd	r6, [sp, #8]
   18fcc:	ldrd	r8, [sp, #16]
   18fd0:	ldrd	sl, [sp, #24]
   18fd4:	add	sp, sp, #32
   18fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fdc:	ldrd	r0, [sp, #24]
   18fe0:	str	r6, [sp, #12]
   18fe4:	bl	3dea4 <flatcc_json_printer_clear@@Base+0x5c8>
   18fe8:	vmov	s14, r0
   18fec:	ldr	r2, [sp, #16]
   18ff0:	ldr	r3, [sp, #12]
   18ff4:	cmp	r2, #0
   18ff8:	ldr	r2, [sp, #72]	; 0x48
   18ffc:	vnegne.f32	s14, s14
   19000:	vldr	s15, [r2]
   19004:	ldr	r2, [sp, #20]
   19008:	vadd.f32	s15, s15, s14
   1900c:	cmp	r2, #0
   19010:	ldr	r2, [sp, #72]	; 0x48
   19014:	vstr	s15, [r2]
   19018:	bne	18f6c <_start@@Base+0x4158>
   1901c:	b	18fbc <_start@@Base+0x41a8>
   19020:	mov	r3, #23
   19024:	mov	r2, r5
   19028:	mov	r0, r8
   1902c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19030:	mov	r3, r0
   19034:	b	18fbc <_start@@Base+0x41a8>
   19038:	mov	r3, #5
   1903c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19040:	mov	r3, r0
   19044:	b	18f28 <_start@@Base+0x4114>
   19048:	ldrb	r2, [r3, #1]
   1904c:	cmp	r2, #32
   19050:	addhi	r3, r3, #1
   19054:	bls	18f44 <_start@@Base+0x4130>
   19058:	b	18f58 <_start@@Base+0x4144>
   1905c:	mov	r3, r2
   19060:	b	18f44 <_start@@Base+0x4130>
   19064:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19068:	cmp	r1, r2
   1906c:	mov	r5, r2
   19070:	strd	r6, [sp, #8]
   19074:	mov	r6, #0
   19078:	mov	r7, #0
   1907c:	strd	r8, [sp, #16]
   19080:	mov	r8, r0
   19084:	strd	sl, [sp, #24]
   19088:	str	lr, [sp, #32]
   1908c:	sub	sp, sp, #36	; 0x24
   19090:	str	r3, [sp, #8]
   19094:	ldr	r3, [sp, #72]	; 0x48
   19098:	strd	r6, [r3]
   1909c:	beq	191e4 <_start@@Base+0x43d0>
   190a0:	ldrb	r3, [r1]
   190a4:	cmp	r3, #34	; 0x22
   190a8:	addeq	r3, r1, #1
   190ac:	bne	191c0 <_start@@Base+0x43ac>
   190b0:	sub	r2, r5, r3
   190b4:	cmp	r2, #1
   190b8:	ble	190cc <_start@@Base+0x42b8>
   190bc:	ldrb	r2, [r3]
   190c0:	cmp	r2, #32
   190c4:	bhi	190e0 <_start@@Base+0x42cc>
   190c8:	beq	191d0 <_start@@Base+0x43bc>
   190cc:	mov	r1, r3
   190d0:	mov	r2, r5
   190d4:	mov	r0, r8
   190d8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   190dc:	mov	r3, r0
   190e0:	cmp	r5, r3
   190e4:	beq	19144 <_start@@Base+0x4330>
   190e8:	add	fp, sp, #16
   190ec:	add	sl, sp, #20
   190f0:	add	r9, sp, #24
   190f4:	ldr	r7, [sp, #8]
   190f8:	mov	r6, r3
   190fc:	mov	r1, r3
   19100:	ldr	r4, [r7]
   19104:	b	19120 <_start@@Base+0x430c>
   19108:	cmp	r6, r0
   1910c:	mov	r6, r0
   19110:	bne	19164 <_start@@Base+0x4350>
   19114:	ldr	r4, [r7, #4]!
   19118:	cmp	r4, #0
   1911c:	beq	191a8 <_start@@Base+0x4394>
   19120:	mov	r3, fp
   19124:	mov	r2, r5
   19128:	stm	sp, {r9, sl}
   1912c:	mov	r0, r8
   19130:	blx	r4
   19134:	cmp	r5, r0
   19138:	mov	r1, r0
   1913c:	bne	19108 <_start@@Base+0x42f4>
   19140:	mov	r3, r0
   19144:	mov	r0, r3
   19148:	add	sp, sp, #36	; 0x24
   1914c:	ldrd	r4, [sp]
   19150:	ldrd	r6, [sp, #8]
   19154:	ldrd	r8, [sp, #16]
   19158:	ldrd	sl, [sp, #24]
   1915c:	add	sp, sp, #32
   19160:	pop	{pc}		; (ldr pc, [sp], #4)
   19164:	ldrd	r0, [sp, #24]
   19168:	str	r6, [sp, #12]
   1916c:	bl	3dc6c <flatcc_json_printer_clear@@Base+0x390>
   19170:	vmov	d6, r0, r1
   19174:	ldr	r2, [sp, #16]
   19178:	ldr	r3, [sp, #12]
   1917c:	cmp	r2, #0
   19180:	ldr	r2, [sp, #72]	; 0x48
   19184:	vnegne.f64	d6, d6
   19188:	vldr	d7, [r2]
   1918c:	ldr	r2, [sp, #20]
   19190:	vadd.f64	d7, d7, d6
   19194:	cmp	r2, #0
   19198:	ldr	r2, [sp, #72]	; 0x48
   1919c:	vstr	d7, [r2]
   191a0:	bne	190f4 <_start@@Base+0x42e0>
   191a4:	b	19144 <_start@@Base+0x4330>
   191a8:	mov	r3, #23
   191ac:	mov	r2, r5
   191b0:	mov	r0, r8
   191b4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   191b8:	mov	r3, r0
   191bc:	b	19144 <_start@@Base+0x4330>
   191c0:	mov	r3, #5
   191c4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   191c8:	mov	r3, r0
   191cc:	b	190b0 <_start@@Base+0x429c>
   191d0:	ldrb	r2, [r3, #1]
   191d4:	cmp	r2, #32
   191d8:	addhi	r3, r3, #1
   191dc:	bls	190cc <_start@@Base+0x42b8>
   191e0:	b	190e0 <_start@@Base+0x42cc>
   191e4:	mov	r3, r2
   191e8:	b	190cc <_start@@Base+0x42b8>
   191ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   191f0:	mov	ip, #0
   191f4:	cmp	r1, r2
   191f8:	strd	r6, [sp, #8]
   191fc:	mov	r6, r2
   19200:	strd	r8, [sp, #16]
   19204:	mov	r9, r0
   19208:	strd	sl, [sp, #24]
   1920c:	str	lr, [sp, #32]
   19210:	sub	sp, sp, #44	; 0x2c
   19214:	str	r3, [sp, #16]
   19218:	ldr	r3, [sp, #80]	; 0x50
   1921c:	strb	ip, [r3]
   19220:	beq	193a8 <_start@@Base+0x4594>
   19224:	ldrb	r3, [r1]
   19228:	mov	r4, r1
   1922c:	cmp	r3, #34	; 0x22
   19230:	addeq	r4, r1, #1
   19234:	bne	19360 <_start@@Base+0x454c>
   19238:	sub	r3, r6, r4
   1923c:	cmp	r3, #1
   19240:	ble	19254 <_start@@Base+0x4440>
   19244:	ldrb	r3, [r4]
   19248:	cmp	r3, #32
   1924c:	bhi	19268 <_start@@Base+0x4454>
   19250:	beq	19394 <_start@@Base+0x4580>
   19254:	mov	r1, r4
   19258:	mov	r2, r6
   1925c:	mov	r0, r9
   19260:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   19264:	mov	r4, r0
   19268:	cmp	r6, r4
   1926c:	beq	192dc <_start@@Base+0x44c8>
   19270:	mov	r3, #0
   19274:	add	fp, sp, #24
   19278:	add	sl, sp, #28
   1927c:	str	r3, [sp, #12]
   19280:	add	r3, sp, #32
   19284:	str	r3, [sp, #20]
   19288:	ldr	r8, [sp, #16]
   1928c:	mov	r7, r4
   19290:	mov	r1, r4
   19294:	ldr	r4, [sp, #20]
   19298:	ldr	r5, [r8]
   1929c:	b	192b8 <_start@@Base+0x44a4>
   192a0:	cmp	r7, r0
   192a4:	mov	r7, r0
   192a8:	bne	192fc <_start@@Base+0x44e8>
   192ac:	ldr	r5, [r8, #4]!
   192b0:	cmp	r5, #0
   192b4:	beq	19348 <_start@@Base+0x4534>
   192b8:	mov	r3, fp
   192bc:	mov	r2, r6
   192c0:	stm	sp, {r4, sl}
   192c4:	mov	r0, r9
   192c8:	blx	r5
   192cc:	cmp	r6, r0
   192d0:	mov	r1, r0
   192d4:	bne	192a0 <_start@@Base+0x448c>
   192d8:	mov	r4, r0
   192dc:	mov	r0, r4
   192e0:	add	sp, sp, #44	; 0x2c
   192e4:	ldrd	r4, [sp]
   192e8:	ldrd	r6, [sp, #8]
   192ec:	ldrd	r8, [sp, #16]
   192f0:	ldrd	sl, [sp, #24]
   192f4:	add	sp, sp, #32
   192f8:	pop	{pc}		; (ldr pc, [sp], #4)
   192fc:	ldr	r3, [sp, #24]
   19300:	mov	r4, r0
   19304:	cmp	r3, #0
   19308:	bne	19370 <_start@@Base+0x455c>
   1930c:	ldrd	r2, [sp, #32]
   19310:	orrs	r3, r2, r3
   19314:	movne	r3, #1
   19318:	moveq	r3, #0
   1931c:	str	r3, [sp, #12]
   19320:	ldr	r1, [sp, #12]
   19324:	ldr	r3, [sp, #80]	; 0x50
   19328:	ldr	r2, [sp, #28]
   1932c:	ldrb	r3, [r3]
   19330:	cmp	r2, #0
   19334:	ldr	r2, [sp, #80]	; 0x50
   19338:	add	r3, r1, r3
   1933c:	strb	r3, [r2]
   19340:	bne	19288 <_start@@Base+0x4474>
   19344:	b	192dc <_start@@Base+0x44c8>
   19348:	mov	r2, r6
   1934c:	mov	r0, r9
   19350:	mov	r3, #23
   19354:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19358:	mov	r4, r0
   1935c:	b	192dc <_start@@Base+0x44c8>
   19360:	mov	r3, #5
   19364:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19368:	mov	r4, r0
   1936c:	b	19238 <_start@@Base+0x4424>
   19370:	mov	r3, #8
   19374:	mov	r2, r6
   19378:	mov	r1, r4
   1937c:	mov	r0, r9
   19380:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19384:	cmp	r6, r0
   19388:	bne	19320 <_start@@Base+0x450c>
   1938c:	mov	r4, r6
   19390:	b	192dc <_start@@Base+0x44c8>
   19394:	ldrb	r3, [r4, #1]
   19398:	cmp	r3, #32
   1939c:	addhi	r4, r4, #1
   193a0:	bls	19254 <_start@@Base+0x4440>
   193a4:	b	19268 <_start@@Base+0x4454>
   193a8:	mov	r4, r2
   193ac:	b	19254 <_start@@Base+0x4440>
   193b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   193b4:	cmp	r1, r2
   193b8:	strd	r6, [sp, #8]
   193bc:	mov	r6, r2
   193c0:	strd	r8, [sp, #16]
   193c4:	mov	r9, r0
   193c8:	strd	sl, [sp, #24]
   193cc:	mov	sl, #0
   193d0:	mov	fp, #0
   193d4:	str	lr, [sp, #32]
   193d8:	sub	sp, sp, #44	; 0x2c
   193dc:	str	r3, [sp, #16]
   193e0:	ldr	r3, [sp, #80]	; 0x50
   193e4:	strd	sl, [r3]
   193e8:	beq	19590 <_start@@Base+0x477c>
   193ec:	ldrb	r3, [r1]
   193f0:	mov	r4, r1
   193f4:	cmp	r3, #34	; 0x22
   193f8:	addeq	r4, r1, #1
   193fc:	bne	19548 <_start@@Base+0x4734>
   19400:	sub	r3, r6, r4
   19404:	cmp	r3, #1
   19408:	ble	1941c <_start@@Base+0x4608>
   1940c:	ldrb	r3, [r4]
   19410:	cmp	r3, #32
   19414:	bhi	19430 <_start@@Base+0x461c>
   19418:	beq	1957c <_start@@Base+0x4768>
   1941c:	mov	r1, r4
   19420:	mov	r2, r6
   19424:	mov	r0, r9
   19428:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1942c:	mov	r4, r0
   19430:	cmp	r6, r4
   19434:	beq	194b0 <_start@@Base+0x469c>
   19438:	mov	r3, #0
   1943c:	add	fp, sp, #24
   19440:	add	sl, sp, #28
   19444:	str	r3, [sp, #8]
   19448:	str	r3, [sp, #12]
   1944c:	add	r3, sp, #32
   19450:	str	r3, [sp, #20]
   19454:	ldr	r8, [sp, #16]
   19458:	mov	r7, r4
   1945c:	mov	r1, r4
   19460:	mov	r4, fp
   19464:	ldr	fp, [sp, #20]
   19468:	ldr	r5, [r8]
   1946c:	b	19488 <_start@@Base+0x4674>
   19470:	cmp	r7, r0
   19474:	mov	r7, r0
   19478:	bne	194d0 <_start@@Base+0x46bc>
   1947c:	ldr	r5, [r8, #4]!
   19480:	cmp	r5, #0
   19484:	beq	19530 <_start@@Base+0x471c>
   19488:	mov	r3, r4
   1948c:	mov	r2, r6
   19490:	str	fp, [sp]
   19494:	mov	r0, r9
   19498:	str	sl, [sp, #4]
   1949c:	blx	r5
   194a0:	cmp	r6, r0
   194a4:	mov	r1, r0
   194a8:	bne	19470 <_start@@Base+0x465c>
   194ac:	mov	r4, r0
   194b0:	mov	r0, r4
   194b4:	add	sp, sp, #44	; 0x2c
   194b8:	ldrd	r4, [sp]
   194bc:	ldrd	r6, [sp, #8]
   194c0:	ldrd	r8, [sp, #16]
   194c4:	ldrd	sl, [sp, #24]
   194c8:	add	sp, sp, #32
   194cc:	pop	{pc}		; (ldr pc, [sp], #4)
   194d0:	ldr	r3, [sp, #24]
   194d4:	mov	fp, r4
   194d8:	mov	r4, r0
   194dc:	cmp	r3, #0
   194e0:	bne	19558 <_start@@Base+0x4744>
   194e4:	ldr	r3, [sp, #32]
   194e8:	str	r3, [sp, #8]
   194ec:	ldr	r3, [sp, #36]	; 0x24
   194f0:	str	r3, [sp, #12]
   194f4:	ldr	r0, [sp, #8]
   194f8:	ldr	r3, [sp, #80]	; 0x50
   194fc:	ldr	r1, [sp, #28]
   19500:	ldr	r2, [sp, #80]	; 0x50
   19504:	ldr	r3, [r3]
   19508:	ldr	r2, [r2, #4]
   1950c:	adds	r3, r3, r0
   19510:	ldr	r0, [sp, #12]
   19514:	adc	r2, r2, r0
   19518:	ldr	r0, [sp, #80]	; 0x50
   1951c:	cmp	r1, #0
   19520:	str	r3, [r0]
   19524:	str	r2, [r0, #4]
   19528:	bne	19454 <_start@@Base+0x4640>
   1952c:	b	194b0 <_start@@Base+0x469c>
   19530:	mov	r2, r6
   19534:	mov	r0, r9
   19538:	mov	r3, #23
   1953c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19540:	mov	r4, r0
   19544:	b	194b0 <_start@@Base+0x469c>
   19548:	mov	r3, #5
   1954c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19550:	mov	r4, r0
   19554:	b	19400 <_start@@Base+0x45ec>
   19558:	mov	r3, #8
   1955c:	mov	r2, r6
   19560:	mov	r1, r4
   19564:	mov	r0, r9
   19568:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1956c:	cmp	r6, r0
   19570:	bne	194f4 <_start@@Base+0x46e0>
   19574:	mov	r4, r6
   19578:	b	194b0 <_start@@Base+0x469c>
   1957c:	ldrb	r3, [r4, #1]
   19580:	cmp	r3, #32
   19584:	addhi	r4, r4, #1
   19588:	bls	1941c <_start@@Base+0x4608>
   1958c:	b	19430 <_start@@Base+0x461c>
   19590:	mov	r4, r2
   19594:	b	1941c <_start@@Base+0x4608>
   19598:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1959c:	mov	ip, #0
   195a0:	cmp	r1, r2
   195a4:	strd	r6, [sp, #8]
   195a8:	mov	r6, r2
   195ac:	strd	r8, [sp, #16]
   195b0:	mov	r9, r0
   195b4:	strd	sl, [sp, #24]
   195b8:	str	lr, [sp, #32]
   195bc:	sub	sp, sp, #44	; 0x2c
   195c0:	str	r3, [sp, #12]
   195c4:	ldr	r3, [sp, #80]	; 0x50
   195c8:	strb	ip, [r3]
   195cc:	beq	19770 <_start@@Base+0x495c>
   195d0:	ldrb	r3, [r1]
   195d4:	mov	r4, r1
   195d8:	cmp	r3, #34	; 0x22
   195dc:	addeq	r4, r1, #1
   195e0:	bne	19710 <_start@@Base+0x48fc>
   195e4:	sub	r3, r6, r4
   195e8:	cmp	r3, #1
   195ec:	ble	19600 <_start@@Base+0x47ec>
   195f0:	ldrb	r3, [r4]
   195f4:	cmp	r3, #32
   195f8:	bhi	19614 <_start@@Base+0x4800>
   195fc:	beq	1975c <_start@@Base+0x4948>
   19600:	mov	r1, r4
   19604:	mov	r2, r6
   19608:	mov	r0, r9
   1960c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   19610:	mov	r4, r0
   19614:	cmp	r6, r4
   19618:	beq	19688 <_start@@Base+0x4874>
   1961c:	mov	r3, #0
   19620:	add	fp, sp, #24
   19624:	add	sl, sp, #28
   19628:	str	r3, [sp, #16]
   1962c:	add	r3, sp, #32
   19630:	str	r3, [sp, #20]
   19634:	ldr	r8, [sp, #12]
   19638:	mov	r7, r4
   1963c:	mov	r1, r4
   19640:	ldr	r4, [sp, #20]
   19644:	ldr	r5, [r8]
   19648:	b	19664 <_start@@Base+0x4850>
   1964c:	cmp	r7, r0
   19650:	mov	r7, r0
   19654:	bne	196a8 <_start@@Base+0x4894>
   19658:	ldr	r5, [r8, #4]!
   1965c:	cmp	r5, #0
   19660:	beq	196f8 <_start@@Base+0x48e4>
   19664:	mov	r3, fp
   19668:	mov	r2, r6
   1966c:	stm	sp, {r4, sl}
   19670:	mov	r0, r9
   19674:	blx	r5
   19678:	cmp	r6, r0
   1967c:	mov	r1, r0
   19680:	bne	1964c <_start@@Base+0x4838>
   19684:	mov	r4, r0
   19688:	mov	r0, r4
   1968c:	add	sp, sp, #44	; 0x2c
   19690:	ldrd	r4, [sp]
   19694:	ldrd	r6, [sp, #8]
   19698:	ldrd	r8, [sp, #16]
   1969c:	ldrd	sl, [sp, #24]
   196a0:	add	sp, sp, #32
   196a4:	pop	{pc}		; (ldr pc, [sp], #4)
   196a8:	ldr	r3, [sp, #24]
   196ac:	mov	r4, r0
   196b0:	cmp	r3, #0
   196b4:	bne	19720 <_start@@Base+0x490c>
   196b8:	ldrd	r2, [sp, #32]
   196bc:	cmp	r3, #0
   196c0:	cmpeq	r2, #255	; 0xff
   196c4:	uxtbls	r3, r2
   196c8:	strls	r3, [sp, #16]
   196cc:	bhi	19744 <_start@@Base+0x4930>
   196d0:	ldr	r1, [sp, #16]
   196d4:	ldr	r3, [sp, #80]	; 0x50
   196d8:	ldr	r2, [sp, #28]
   196dc:	ldrb	r3, [r3]
   196e0:	cmp	r2, #0
   196e4:	ldr	r2, [sp, #80]	; 0x50
   196e8:	add	r3, r1, r3
   196ec:	strb	r3, [r2]
   196f0:	bne	19634 <_start@@Base+0x4820>
   196f4:	b	19688 <_start@@Base+0x4874>
   196f8:	mov	r2, r6
   196fc:	mov	r0, r9
   19700:	mov	r3, #23
   19704:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19708:	mov	r4, r0
   1970c:	b	19688 <_start@@Base+0x4874>
   19710:	mov	r3, #5
   19714:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19718:	mov	r4, r0
   1971c:	b	195e4 <_start@@Base+0x47d0>
   19720:	mov	r3, #8
   19724:	mov	r2, r6
   19728:	mov	r1, r4
   1972c:	mov	r0, r9
   19730:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19734:	cmp	r6, r0
   19738:	bne	196d0 <_start@@Base+0x48bc>
   1973c:	mov	r4, r6
   19740:	b	19688 <_start@@Base+0x4874>
   19744:	mov	r3, #7
   19748:	mov	r2, r6
   1974c:	mov	r1, r4
   19750:	mov	r0, r9
   19754:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19758:	b	19734 <_start@@Base+0x4920>
   1975c:	ldrb	r3, [r4, #1]
   19760:	cmp	r3, #32
   19764:	addhi	r4, r4, #1
   19768:	bls	19600 <_start@@Base+0x47ec>
   1976c:	b	19614 <_start@@Base+0x4800>
   19770:	mov	r4, r2
   19774:	b	19600 <_start@@Base+0x47ec>
   19778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1977c:	mov	ip, #0
   19780:	cmp	r1, r2
   19784:	strd	r6, [sp, #8]
   19788:	mov	r6, r2
   1978c:	strd	r8, [sp, #16]
   19790:	mov	r9, r0
   19794:	strd	sl, [sp, #24]
   19798:	str	lr, [sp, #32]
   1979c:	sub	sp, sp, #44	; 0x2c
   197a0:	str	r3, [sp, #12]
   197a4:	ldr	r3, [sp, #80]	; 0x50
   197a8:	str	ip, [r3]
   197ac:	beq	19954 <_start@@Base+0x4b40>
   197b0:	ldrb	r3, [r1]
   197b4:	mov	r4, r1
   197b8:	cmp	r3, #34	; 0x22
   197bc:	addeq	r4, r1, #1
   197c0:	bne	198f4 <_start@@Base+0x4ae0>
   197c4:	sub	r3, r6, r4
   197c8:	cmp	r3, #1
   197cc:	ble	197e0 <_start@@Base+0x49cc>
   197d0:	ldrb	r3, [r4]
   197d4:	cmp	r3, #32
   197d8:	bhi	197f4 <_start@@Base+0x49e0>
   197dc:	beq	19940 <_start@@Base+0x4b2c>
   197e0:	mov	r1, r4
   197e4:	mov	r2, r6
   197e8:	mov	r0, r9
   197ec:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   197f0:	mov	r4, r0
   197f4:	cmp	r6, r4
   197f8:	beq	19868 <_start@@Base+0x4a54>
   197fc:	mov	r3, #0
   19800:	add	fp, sp, #24
   19804:	add	sl, sp, #28
   19808:	str	r3, [sp, #16]
   1980c:	add	r3, sp, #32
   19810:	str	r3, [sp, #20]
   19814:	ldr	r8, [sp, #12]
   19818:	mov	r7, r4
   1981c:	mov	r1, r4
   19820:	ldr	r4, [sp, #20]
   19824:	ldr	r5, [r8]
   19828:	b	19844 <_start@@Base+0x4a30>
   1982c:	cmp	r7, r0
   19830:	mov	r7, r0
   19834:	bne	19888 <_start@@Base+0x4a74>
   19838:	ldr	r5, [r8, #4]!
   1983c:	cmp	r5, #0
   19840:	beq	198dc <_start@@Base+0x4ac8>
   19844:	mov	r3, fp
   19848:	mov	r2, r6
   1984c:	stm	sp, {r4, sl}
   19850:	mov	r0, r9
   19854:	blx	r5
   19858:	cmp	r6, r0
   1985c:	mov	r1, r0
   19860:	bne	1982c <_start@@Base+0x4a18>
   19864:	mov	r4, r0
   19868:	mov	r0, r4
   1986c:	add	sp, sp, #44	; 0x2c
   19870:	ldrd	r4, [sp]
   19874:	ldrd	r6, [sp, #8]
   19878:	ldrd	r8, [sp, #16]
   1987c:	ldrd	sl, [sp, #24]
   19880:	add	sp, sp, #32
   19884:	pop	{pc}		; (ldr pc, [sp], #4)
   19888:	ldr	r3, [sp, #24]
   1988c:	mov	r4, r0
   19890:	cmp	r3, #0
   19894:	bne	19904 <_start@@Base+0x4af0>
   19898:	ldrd	r2, [sp, #32]
   1989c:	mov	r1, #0
   198a0:	mvn	r0, #0
   198a4:	cmp	r3, r1
   198a8:	cmpeq	r2, r0
   198ac:	strls	r2, [sp, #16]
   198b0:	bhi	19928 <_start@@Base+0x4b14>
   198b4:	ldr	r1, [sp, #16]
   198b8:	ldr	r3, [sp, #80]	; 0x50
   198bc:	ldr	r2, [sp, #28]
   198c0:	ldr	r3, [r3]
   198c4:	cmp	r2, #0
   198c8:	ldr	r2, [sp, #80]	; 0x50
   198cc:	add	r3, r3, r1
   198d0:	str	r3, [r2]
   198d4:	bne	19814 <_start@@Base+0x4a00>
   198d8:	b	19868 <_start@@Base+0x4a54>
   198dc:	mov	r2, r6
   198e0:	mov	r0, r9
   198e4:	mov	r3, #23
   198e8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   198ec:	mov	r4, r0
   198f0:	b	19868 <_start@@Base+0x4a54>
   198f4:	mov	r3, #5
   198f8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   198fc:	mov	r4, r0
   19900:	b	197c4 <_start@@Base+0x49b0>
   19904:	mov	r3, #8
   19908:	mov	r2, r6
   1990c:	mov	r1, r4
   19910:	mov	r0, r9
   19914:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19918:	cmp	r6, r0
   1991c:	bne	198b4 <_start@@Base+0x4aa0>
   19920:	mov	r4, r6
   19924:	b	19868 <_start@@Base+0x4a54>
   19928:	mov	r3, #7
   1992c:	mov	r2, r6
   19930:	mov	r1, r4
   19934:	mov	r0, r9
   19938:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1993c:	b	19918 <_start@@Base+0x4b04>
   19940:	ldrb	r3, [r4, #1]
   19944:	cmp	r3, #32
   19948:	addhi	r4, r4, #1
   1994c:	bls	197e0 <_start@@Base+0x49cc>
   19950:	b	197f4 <_start@@Base+0x49e0>
   19954:	mov	r4, r2
   19958:	b	197e0 <_start@@Base+0x49cc>
   1995c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19960:	mov	ip, #0
   19964:	cmp	r1, r2
   19968:	strd	r6, [sp, #8]
   1996c:	mov	r6, r2
   19970:	strd	r8, [sp, #16]
   19974:	mov	r9, r0
   19978:	strd	sl, [sp, #24]
   1997c:	str	lr, [sp, #32]
   19980:	sub	sp, sp, #44	; 0x2c
   19984:	str	r3, [sp, #12]
   19988:	ldr	r3, [sp, #80]	; 0x50
   1998c:	strh	ip, [r3]
   19990:	beq	19b40 <_start@@Base+0x4d2c>
   19994:	ldrb	r3, [r1]
   19998:	mov	r4, r1
   1999c:	cmp	r3, #34	; 0x22
   199a0:	addeq	r4, r1, #1
   199a4:	bne	19b1c <_start@@Base+0x4d08>
   199a8:	sub	r3, r6, r4
   199ac:	cmp	r3, #1
   199b0:	ble	199c4 <_start@@Base+0x4bb0>
   199b4:	ldrb	r3, [r4]
   199b8:	cmp	r3, #32
   199bc:	bhi	199d8 <_start@@Base+0x4bc4>
   199c0:	beq	19b2c <_start@@Base+0x4d18>
   199c4:	mov	r1, r4
   199c8:	mov	r2, r6
   199cc:	mov	r0, r9
   199d0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   199d4:	mov	r4, r0
   199d8:	cmp	r6, r4
   199dc:	beq	19a4c <_start@@Base+0x4c38>
   199e0:	mov	r3, #0
   199e4:	add	fp, sp, #24
   199e8:	add	sl, sp, #28
   199ec:	str	r3, [sp, #20]
   199f0:	add	r3, sp, #32
   199f4:	str	r3, [sp, #16]
   199f8:	ldr	r8, [sp, #12]
   199fc:	mov	r7, r4
   19a00:	mov	r1, r4
   19a04:	ldr	r4, [sp, #16]
   19a08:	ldr	r5, [r8]
   19a0c:	b	19a28 <_start@@Base+0x4c14>
   19a10:	cmp	r7, r0
   19a14:	mov	r7, r0
   19a18:	bne	19a6c <_start@@Base+0x4c58>
   19a1c:	ldr	r5, [r8, #4]!
   19a20:	cmp	r5, #0
   19a24:	beq	19ac0 <_start@@Base+0x4cac>
   19a28:	mov	r3, fp
   19a2c:	mov	r2, r6
   19a30:	stm	sp, {r4, sl}
   19a34:	mov	r0, r9
   19a38:	blx	r5
   19a3c:	cmp	r6, r0
   19a40:	mov	r1, r0
   19a44:	bne	19a10 <_start@@Base+0x4bfc>
   19a48:	mov	r4, r0
   19a4c:	mov	r0, r4
   19a50:	add	sp, sp, #44	; 0x2c
   19a54:	ldrd	r4, [sp]
   19a58:	ldrd	r6, [sp, #8]
   19a5c:	ldrd	r8, [sp, #16]
   19a60:	ldrd	sl, [sp, #24]
   19a64:	add	sp, sp, #32
   19a68:	pop	{pc}		; (ldr pc, [sp], #4)
   19a6c:	ldr	r1, [sp, #24]
   19a70:	mov	r4, r0
   19a74:	ldrd	r2, [sp, #32]
   19a78:	cmp	r1, #0
   19a7c:	beq	19ad8 <_start@@Base+0x4cc4>
   19a80:	cmp	r3, #0
   19a84:	cmpeq	r2, #32768	; 0x8000
   19a88:	bhi	19b48 <_start@@Base+0x4d34>
   19a8c:	rsb	r2, r2, #0
   19a90:	uxth	r2, r2
   19a94:	sxth	r3, r2
   19a98:	str	r3, [sp, #20]
   19a9c:	ldr	r3, [sp, #80]	; 0x50
   19aa0:	ldrh	r1, [r3]
   19aa4:	ldr	r3, [sp, #28]
   19aa8:	add	r2, r2, r1
   19aac:	cmp	r3, #0
   19ab0:	ldr	r3, [sp, #80]	; 0x50
   19ab4:	strh	r2, [r3]
   19ab8:	bne	199f8 <_start@@Base+0x4be4>
   19abc:	b	19a4c <_start@@Base+0x4c38>
   19ac0:	mov	r2, r6
   19ac4:	mov	r0, r9
   19ac8:	mov	r3, #23
   19acc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19ad0:	mov	r4, r0
   19ad4:	b	19a4c <_start@@Base+0x4c38>
   19ad8:	mov	r1, #0
   19adc:	movw	r0, #32767	; 0x7fff
   19ae0:	cmp	r3, r1
   19ae4:	cmpeq	r2, r0
   19ae8:	sxthls	r1, r2
   19aec:	uxthls	r2, r2
   19af0:	strls	r1, [sp, #20]
   19af4:	bls	19a9c <_start@@Base+0x4c88>
   19af8:	mov	r3, #7
   19afc:	mov	r2, r6
   19b00:	mov	r1, r4
   19b04:	mov	r0, r9
   19b08:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19b0c:	cmp	r6, r0
   19b10:	beq	19b60 <_start@@Base+0x4d4c>
   19b14:	ldrh	r2, [sp, #20]
   19b18:	b	19a9c <_start@@Base+0x4c88>
   19b1c:	mov	r3, #5
   19b20:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19b24:	mov	r4, r0
   19b28:	b	199a8 <_start@@Base+0x4b94>
   19b2c:	ldrb	r3, [r4, #1]
   19b30:	cmp	r3, #32
   19b34:	addhi	r4, r4, #1
   19b38:	bls	199c4 <_start@@Base+0x4bb0>
   19b3c:	b	199d8 <_start@@Base+0x4bc4>
   19b40:	mov	r4, r2
   19b44:	b	199c4 <_start@@Base+0x4bb0>
   19b48:	mov	r3, #8
   19b4c:	mov	r2, r6
   19b50:	mov	r1, r4
   19b54:	mov	r0, r9
   19b58:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19b5c:	b	19b0c <_start@@Base+0x4cf8>
   19b60:	mov	r4, r6
   19b64:	b	19a4c <_start@@Base+0x4c38>
   19b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b6c:	mov	ip, #0
   19b70:	cmp	r1, r2
   19b74:	strd	r6, [sp, #8]
   19b78:	mov	r6, r2
   19b7c:	strd	r8, [sp, #16]
   19b80:	mov	r9, r0
   19b84:	strd	sl, [sp, #24]
   19b88:	str	lr, [sp, #32]
   19b8c:	sub	sp, sp, #44	; 0x2c
   19b90:	str	r3, [sp, #12]
   19b94:	ldr	r3, [sp, #80]	; 0x50
   19b98:	strb	ip, [r3]
   19b9c:	beq	19d44 <_start@@Base+0x4f30>
   19ba0:	ldrb	r3, [r1]
   19ba4:	mov	r4, r1
   19ba8:	cmp	r3, #34	; 0x22
   19bac:	addeq	r4, r1, #1
   19bb0:	bne	19d20 <_start@@Base+0x4f0c>
   19bb4:	sub	r3, r6, r4
   19bb8:	cmp	r3, #1
   19bbc:	ble	19bd0 <_start@@Base+0x4dbc>
   19bc0:	ldrb	r3, [r4]
   19bc4:	cmp	r3, #32
   19bc8:	bhi	19be4 <_start@@Base+0x4dd0>
   19bcc:	beq	19d30 <_start@@Base+0x4f1c>
   19bd0:	mov	r1, r4
   19bd4:	mov	r2, r6
   19bd8:	mov	r0, r9
   19bdc:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   19be0:	mov	r4, r0
   19be4:	cmp	r6, r4
   19be8:	beq	19c58 <_start@@Base+0x4e44>
   19bec:	mov	r3, #0
   19bf0:	add	fp, sp, #24
   19bf4:	add	sl, sp, #28
   19bf8:	str	r3, [sp, #20]
   19bfc:	add	r3, sp, #32
   19c00:	str	r3, [sp, #16]
   19c04:	ldr	r8, [sp, #12]
   19c08:	mov	r7, r4
   19c0c:	mov	r1, r4
   19c10:	ldr	r4, [sp, #16]
   19c14:	ldr	r5, [r8]
   19c18:	b	19c34 <_start@@Base+0x4e20>
   19c1c:	cmp	r7, r0
   19c20:	mov	r7, r0
   19c24:	bne	19c78 <_start@@Base+0x4e64>
   19c28:	ldr	r5, [r8, #4]!
   19c2c:	cmp	r5, #0
   19c30:	beq	19ccc <_start@@Base+0x4eb8>
   19c34:	mov	r3, fp
   19c38:	mov	r2, r6
   19c3c:	stm	sp, {r4, sl}
   19c40:	mov	r0, r9
   19c44:	blx	r5
   19c48:	cmp	r6, r0
   19c4c:	mov	r1, r0
   19c50:	bne	19c1c <_start@@Base+0x4e08>
   19c54:	mov	r4, r0
   19c58:	mov	r0, r4
   19c5c:	add	sp, sp, #44	; 0x2c
   19c60:	ldrd	r4, [sp]
   19c64:	ldrd	r6, [sp, #8]
   19c68:	ldrd	r8, [sp, #16]
   19c6c:	ldrd	sl, [sp, #24]
   19c70:	add	sp, sp, #32
   19c74:	pop	{pc}		; (ldr pc, [sp], #4)
   19c78:	ldr	r1, [sp, #24]
   19c7c:	mov	r4, r0
   19c80:	ldrd	r2, [sp, #32]
   19c84:	cmp	r1, #0
   19c88:	beq	19ce4 <_start@@Base+0x4ed0>
   19c8c:	cmp	r3, #0
   19c90:	cmpeq	r2, #128	; 0x80
   19c94:	bhi	19d4c <_start@@Base+0x4f38>
   19c98:	rsb	r2, r2, #0
   19c9c:	uxtb	r2, r2
   19ca0:	sxtb	r3, r2
   19ca4:	str	r3, [sp, #20]
   19ca8:	ldr	r3, [sp, #80]	; 0x50
   19cac:	ldrb	r1, [r3]
   19cb0:	ldr	r3, [sp, #28]
   19cb4:	add	r2, r2, r1
   19cb8:	cmp	r3, #0
   19cbc:	ldr	r3, [sp, #80]	; 0x50
   19cc0:	strb	r2, [r3]
   19cc4:	bne	19c04 <_start@@Base+0x4df0>
   19cc8:	b	19c58 <_start@@Base+0x4e44>
   19ccc:	mov	r2, r6
   19cd0:	mov	r0, r9
   19cd4:	mov	r3, #23
   19cd8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19cdc:	mov	r4, r0
   19ce0:	b	19c58 <_start@@Base+0x4e44>
   19ce4:	cmp	r3, #0
   19ce8:	cmpeq	r2, #127	; 0x7f
   19cec:	sxtbls	r1, r2
   19cf0:	uxtbls	r2, r2
   19cf4:	strls	r1, [sp, #20]
   19cf8:	bls	19ca8 <_start@@Base+0x4e94>
   19cfc:	mov	r3, #7
   19d00:	mov	r2, r6
   19d04:	mov	r1, r4
   19d08:	mov	r0, r9
   19d0c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19d10:	cmp	r6, r0
   19d14:	beq	19d64 <_start@@Base+0x4f50>
   19d18:	ldrb	r2, [sp, #20]
   19d1c:	b	19ca8 <_start@@Base+0x4e94>
   19d20:	mov	r3, #5
   19d24:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19d28:	mov	r4, r0
   19d2c:	b	19bb4 <_start@@Base+0x4da0>
   19d30:	ldrb	r3, [r4, #1]
   19d34:	cmp	r3, #32
   19d38:	addhi	r4, r4, #1
   19d3c:	bls	19bd0 <_start@@Base+0x4dbc>
   19d40:	b	19be4 <_start@@Base+0x4dd0>
   19d44:	mov	r4, r2
   19d48:	b	19bd0 <_start@@Base+0x4dbc>
   19d4c:	mov	r3, #8
   19d50:	mov	r2, r6
   19d54:	mov	r1, r4
   19d58:	mov	r0, r9
   19d5c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19d60:	b	19d10 <_start@@Base+0x4efc>
   19d64:	mov	r4, r6
   19d68:	b	19c58 <_start@@Base+0x4e44>
   19d6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d70:	mov	ip, #0
   19d74:	cmp	r1, r2
   19d78:	strd	r6, [sp, #8]
   19d7c:	mov	r6, r2
   19d80:	strd	r8, [sp, #16]
   19d84:	mov	r9, r0
   19d88:	strd	sl, [sp, #24]
   19d8c:	str	lr, [sp, #32]
   19d90:	sub	sp, sp, #44	; 0x2c
   19d94:	str	r3, [sp, #16]
   19d98:	ldr	r3, [sp, #80]	; 0x50
   19d9c:	str	ip, [r3]
   19da0:	beq	19f44 <_start@@Base+0x5130>
   19da4:	ldrb	r3, [r1]
   19da8:	mov	r4, r1
   19dac:	cmp	r3, #34	; 0x22
   19db0:	addeq	r4, r1, #1
   19db4:	bne	19f20 <_start@@Base+0x510c>
   19db8:	sub	r3, r6, r4
   19dbc:	cmp	r3, #1
   19dc0:	ble	19dd4 <_start@@Base+0x4fc0>
   19dc4:	ldrb	r3, [r4]
   19dc8:	cmp	r3, #32
   19dcc:	bhi	19de8 <_start@@Base+0x4fd4>
   19dd0:	beq	19f30 <_start@@Base+0x511c>
   19dd4:	mov	r1, r4
   19dd8:	mov	r2, r6
   19ddc:	mov	r0, r9
   19de0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   19de4:	mov	r4, r0
   19de8:	cmp	r6, r4
   19dec:	beq	19e5c <_start@@Base+0x5048>
   19df0:	mov	r3, #0
   19df4:	add	fp, sp, #24
   19df8:	add	sl, sp, #28
   19dfc:	str	r3, [sp, #12]
   19e00:	add	r3, sp, #32
   19e04:	str	r3, [sp, #20]
   19e08:	ldr	r8, [sp, #16]
   19e0c:	mov	r7, r4
   19e10:	mov	r1, r4
   19e14:	ldr	r4, [sp, #20]
   19e18:	ldr	r5, [r8]
   19e1c:	b	19e38 <_start@@Base+0x5024>
   19e20:	cmp	r7, r0
   19e24:	mov	r7, r0
   19e28:	bne	19e7c <_start@@Base+0x5068>
   19e2c:	ldr	r5, [r8, #4]!
   19e30:	cmp	r5, #0
   19e34:	beq	19ecc <_start@@Base+0x50b8>
   19e38:	mov	r3, fp
   19e3c:	mov	r2, r6
   19e40:	stm	sp, {r4, sl}
   19e44:	mov	r0, r9
   19e48:	blx	r5
   19e4c:	cmp	r6, r0
   19e50:	mov	r1, r0
   19e54:	bne	19e20 <_start@@Base+0x500c>
   19e58:	mov	r4, r0
   19e5c:	mov	r0, r4
   19e60:	add	sp, sp, #44	; 0x2c
   19e64:	ldrd	r4, [sp]
   19e68:	ldrd	r6, [sp, #8]
   19e6c:	ldrd	r8, [sp, #16]
   19e70:	ldrd	sl, [sp, #24]
   19e74:	add	sp, sp, #32
   19e78:	pop	{pc}		; (ldr pc, [sp], #4)
   19e7c:	ldr	r1, [sp, #24]
   19e80:	mov	r4, r0
   19e84:	ldrd	r2, [sp, #32]
   19e88:	cmp	r1, #0
   19e8c:	beq	19ee4 <_start@@Base+0x50d0>
   19e90:	cmp	r3, #0
   19e94:	cmpeq	r2, #-2147483648	; 0x80000000
   19e98:	rsbls	r3, r2, #0
   19e9c:	strls	r3, [sp, #12]
   19ea0:	bhi	19f4c <_start@@Base+0x5138>
   19ea4:	ldr	r1, [sp, #12]
   19ea8:	ldr	r3, [sp, #80]	; 0x50
   19eac:	ldr	r2, [sp, #28]
   19eb0:	ldr	r3, [r3]
   19eb4:	cmp	r2, #0
   19eb8:	ldr	r2, [sp, #80]	; 0x50
   19ebc:	add	r3, r3, r1
   19ec0:	str	r3, [r2]
   19ec4:	bne	19e08 <_start@@Base+0x4ff4>
   19ec8:	b	19e5c <_start@@Base+0x5048>
   19ecc:	mov	r2, r6
   19ed0:	mov	r0, r9
   19ed4:	mov	r3, #23
   19ed8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19edc:	mov	r4, r0
   19ee0:	b	19e5c <_start@@Base+0x5048>
   19ee4:	mov	r1, #0
   19ee8:	mvn	r0, #-2147483648	; 0x80000000
   19eec:	cmp	r3, r1
   19ef0:	cmpeq	r2, r0
   19ef4:	strls	r2, [sp, #12]
   19ef8:	bls	19ea4 <_start@@Base+0x5090>
   19efc:	mov	r3, #7
   19f00:	mov	r2, r6
   19f04:	mov	r1, r4
   19f08:	mov	r0, r9
   19f0c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19f10:	cmp	r6, r0
   19f14:	bne	19ea4 <_start@@Base+0x5090>
   19f18:	mov	r4, r6
   19f1c:	b	19e5c <_start@@Base+0x5048>
   19f20:	mov	r3, #5
   19f24:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19f28:	mov	r4, r0
   19f2c:	b	19db8 <_start@@Base+0x4fa4>
   19f30:	ldrb	r3, [r4, #1]
   19f34:	cmp	r3, #32
   19f38:	addhi	r4, r4, #1
   19f3c:	bls	19dd4 <_start@@Base+0x4fc0>
   19f40:	b	19de8 <_start@@Base+0x4fd4>
   19f44:	mov	r4, r2
   19f48:	b	19dd4 <_start@@Base+0x4fc0>
   19f4c:	mov	r3, #8
   19f50:	mov	r2, r6
   19f54:	mov	r1, r4
   19f58:	mov	r0, r9
   19f5c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   19f60:	b	19f10 <_start@@Base+0x50fc>
   19f64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f68:	mov	ip, #0
   19f6c:	cmp	r1, r2
   19f70:	strd	r6, [sp, #8]
   19f74:	mov	r6, r2
   19f78:	strd	r8, [sp, #16]
   19f7c:	mov	r9, r0
   19f80:	strd	sl, [sp, #24]
   19f84:	str	lr, [sp, #32]
   19f88:	sub	sp, sp, #44	; 0x2c
   19f8c:	str	r3, [sp, #12]
   19f90:	ldr	r3, [sp, #80]	; 0x50
   19f94:	strh	ip, [r3]
   19f98:	beq	1a144 <_start@@Base+0x5330>
   19f9c:	ldrb	r3, [r1]
   19fa0:	mov	r4, r1
   19fa4:	cmp	r3, #34	; 0x22
   19fa8:	addeq	r4, r1, #1
   19fac:	bne	1a0e4 <_start@@Base+0x52d0>
   19fb0:	sub	r3, r6, r4
   19fb4:	cmp	r3, #1
   19fb8:	ble	19fcc <_start@@Base+0x51b8>
   19fbc:	ldrb	r3, [r4]
   19fc0:	cmp	r3, #32
   19fc4:	bhi	19fe0 <_start@@Base+0x51cc>
   19fc8:	beq	1a130 <_start@@Base+0x531c>
   19fcc:	mov	r1, r4
   19fd0:	mov	r2, r6
   19fd4:	mov	r0, r9
   19fd8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   19fdc:	mov	r4, r0
   19fe0:	cmp	r6, r4
   19fe4:	beq	1a054 <_start@@Base+0x5240>
   19fe8:	mov	r3, #0
   19fec:	add	fp, sp, #24
   19ff0:	add	sl, sp, #28
   19ff4:	str	r3, [sp, #16]
   19ff8:	add	r3, sp, #32
   19ffc:	str	r3, [sp, #20]
   1a000:	ldr	r8, [sp, #12]
   1a004:	mov	r7, r4
   1a008:	mov	r1, r4
   1a00c:	ldr	r4, [sp, #20]
   1a010:	ldr	r5, [r8]
   1a014:	b	1a030 <_start@@Base+0x521c>
   1a018:	cmp	r7, r0
   1a01c:	mov	r7, r0
   1a020:	bne	1a074 <_start@@Base+0x5260>
   1a024:	ldr	r5, [r8, #4]!
   1a028:	cmp	r5, #0
   1a02c:	beq	1a0cc <_start@@Base+0x52b8>
   1a030:	mov	r3, fp
   1a034:	mov	r2, r6
   1a038:	stm	sp, {r4, sl}
   1a03c:	mov	r0, r9
   1a040:	blx	r5
   1a044:	cmp	r6, r0
   1a048:	mov	r1, r0
   1a04c:	bne	1a018 <_start@@Base+0x5204>
   1a050:	mov	r4, r0
   1a054:	mov	r0, r4
   1a058:	add	sp, sp, #44	; 0x2c
   1a05c:	ldrd	r4, [sp]
   1a060:	ldrd	r6, [sp, #8]
   1a064:	ldrd	r8, [sp, #16]
   1a068:	ldrd	sl, [sp, #24]
   1a06c:	add	sp, sp, #32
   1a070:	pop	{pc}		; (ldr pc, [sp], #4)
   1a074:	ldr	r3, [sp, #24]
   1a078:	mov	r4, r0
   1a07c:	cmp	r3, #0
   1a080:	bne	1a0f4 <_start@@Base+0x52e0>
   1a084:	ldrd	r2, [sp, #32]
   1a088:	mov	r1, #0
   1a08c:	movw	r0, #65535	; 0xffff
   1a090:	cmp	r3, r1
   1a094:	cmpeq	r2, r0
   1a098:	uxthls	r3, r2
   1a09c:	strls	r3, [sp, #16]
   1a0a0:	bhi	1a118 <_start@@Base+0x5304>
   1a0a4:	ldr	r1, [sp, #16]
   1a0a8:	ldr	r3, [sp, #80]	; 0x50
   1a0ac:	ldr	r2, [sp, #28]
   1a0b0:	ldrh	r3, [r3]
   1a0b4:	cmp	r2, #0
   1a0b8:	ldr	r2, [sp, #80]	; 0x50
   1a0bc:	add	r3, r1, r3
   1a0c0:	strh	r3, [r2]
   1a0c4:	bne	1a000 <_start@@Base+0x51ec>
   1a0c8:	b	1a054 <_start@@Base+0x5240>
   1a0cc:	mov	r2, r6
   1a0d0:	mov	r0, r9
   1a0d4:	mov	r3, #23
   1a0d8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a0dc:	mov	r4, r0
   1a0e0:	b	1a054 <_start@@Base+0x5240>
   1a0e4:	mov	r3, #5
   1a0e8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a0ec:	mov	r4, r0
   1a0f0:	b	19fb0 <_start@@Base+0x519c>
   1a0f4:	mov	r3, #8
   1a0f8:	mov	r2, r6
   1a0fc:	mov	r1, r4
   1a100:	mov	r0, r9
   1a104:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a108:	cmp	r6, r0
   1a10c:	bne	1a0a4 <_start@@Base+0x5290>
   1a110:	mov	r4, r6
   1a114:	b	1a054 <_start@@Base+0x5240>
   1a118:	mov	r3, #7
   1a11c:	mov	r2, r6
   1a120:	mov	r1, r4
   1a124:	mov	r0, r9
   1a128:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a12c:	b	1a108 <_start@@Base+0x52f4>
   1a130:	ldrb	r3, [r4, #1]
   1a134:	cmp	r3, #32
   1a138:	addhi	r4, r4, #1
   1a13c:	bls	19fcc <_start@@Base+0x51b8>
   1a140:	b	19fe0 <_start@@Base+0x51cc>
   1a144:	mov	r4, r2
   1a148:	b	19fcc <_start@@Base+0x51b8>
   1a14c:	cmp	r1, r2
   1a150:	beq	1a160 <_start@@Base+0x534c>
   1a154:	ldrb	ip, [r1]
   1a158:	cmp	ip, #91	; 0x5b
   1a15c:	beq	1a170 <_start@@Base+0x535c>
   1a160:	mov	ip, #0
   1a164:	str	ip, [r3]
   1a168:	mov	r3, #22
   1a16c:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a170:	strd	r4, [sp, #-16]!
   1a174:	mov	r5, r0
   1a178:	add	r0, r1, #1
   1a17c:	str	r6, [sp, #8]
   1a180:	mov	r6, r3
   1a184:	sub	r3, r2, r0
   1a188:	cmp	r3, #1
   1a18c:	mov	r4, r2
   1a190:	str	lr, [sp, #12]
   1a194:	ble	1a1a8 <_start@@Base+0x5394>
   1a198:	ldrb	r3, [r1, #1]
   1a19c:	cmp	r3, #32
   1a1a0:	bhi	1a1b8 <_start@@Base+0x53a4>
   1a1a4:	beq	1a1e4 <_start@@Base+0x53d0>
   1a1a8:	mov	r1, r0
   1a1ac:	mov	r2, r4
   1a1b0:	mov	r0, r5
   1a1b4:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a1b8:	cmp	r4, r0
   1a1bc:	beq	1a1cc <_start@@Base+0x53b8>
   1a1c0:	ldrb	r3, [r0]
   1a1c4:	cmp	r3, #93	; 0x5d
   1a1c8:	beq	1a1f8 <_start@@Base+0x53e4>
   1a1cc:	mov	r3, #1
   1a1d0:	ldrd	r4, [sp]
   1a1d4:	str	r3, [r6]
   1a1d8:	ldr	r6, [sp, #8]
   1a1dc:	add	sp, sp, #12
   1a1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1e4:	ldrb	r3, [r1, #2]
   1a1e8:	cmp	r3, #32
   1a1ec:	addhi	r0, r1, #2
   1a1f0:	bls	1a1a8 <_start@@Base+0x5394>
   1a1f4:	b	1a1b8 <_start@@Base+0x53a4>
   1a1f8:	mov	r3, #0
   1a1fc:	mov	r2, r4
   1a200:	ldr	lr, [sp, #12]
   1a204:	add	r1, r0, #1
   1a208:	mov	r0, r5
   1a20c:	ldrd	r4, [sp]
   1a210:	str	r3, [r6]
   1a214:	ldr	r6, [sp, #8]
   1a218:	add	sp, sp, #16
   1a21c:	b	16ef8 <_start@@Base+0x20e4>
   1a220:	ldrb	ip, [r1, r3]
   1a224:	cmp	ip, #34	; 0x22
   1a228:	beq	1a234 <_start@@Base+0x5420>
   1a22c:	mov	r0, r1
   1a230:	bx	lr
   1a234:	add	r3, r3, #1
   1a238:	mov	ip, r1
   1a23c:	strd	r4, [sp, #-16]!
   1a240:	add	r1, r1, r3
   1a244:	mov	r4, r2
   1a248:	str	r6, [sp, #8]
   1a24c:	sub	r2, r2, r1
   1a250:	mov	r5, r0
   1a254:	str	lr, [sp, #12]
   1a258:	cmp	r2, #1
   1a25c:	ble	1a280 <_start@@Base+0x546c>
   1a260:	ldrb	r3, [ip, r3]
   1a264:	cmp	r3, #32
   1a268:	bhi	1a290 <_start@@Base+0x547c>
   1a26c:	bne	1a280 <_start@@Base+0x546c>
   1a270:	ldrb	r3, [r1, #1]
   1a274:	cmp	r3, #32
   1a278:	addhi	r1, r1, #1
   1a27c:	bhi	1a290 <_start@@Base+0x547c>
   1a280:	mov	r2, r4
   1a284:	mov	r0, r5
   1a288:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a28c:	mov	r1, r0
   1a290:	cmp	r4, r1
   1a294:	mov	r2, r4
   1a298:	beq	1a2a8 <_start@@Base+0x5494>
   1a29c:	ldrb	r3, [r1]
   1a2a0:	cmp	r3, #58	; 0x3a
   1a2a4:	beq	1a2c4 <_start@@Base+0x54b0>
   1a2a8:	mov	r0, r5
   1a2ac:	mov	r3, #4
   1a2b0:	ldrd	r4, [sp]
   1a2b4:	ldr	r6, [sp, #8]
   1a2b8:	ldr	lr, [sp, #12]
   1a2bc:	add	sp, sp, #16
   1a2c0:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a2c4:	mov	r0, r5
   1a2c8:	add	r1, r1, #1
   1a2cc:	ldrd	r4, [sp]
   1a2d0:	ldr	r6, [sp, #8]
   1a2d4:	ldr	lr, [sp, #12]
   1a2d8:	add	sp, sp, #16
   1a2dc:	b	16ef8 <_start@@Base+0x20e4>
   1a2e0:	strd	r4, [sp, #-16]!
   1a2e4:	mov	r4, r2
   1a2e8:	sub	r2, r2, r1
   1a2ec:	cmp	r2, #1
   1a2f0:	mov	r5, r0
   1a2f4:	str	r6, [sp, #8]
   1a2f8:	mov	r6, r3
   1a2fc:	str	lr, [sp, #12]
   1a300:	ble	1a314 <_start@@Base+0x5500>
   1a304:	ldrb	r3, [r1]
   1a308:	cmp	r3, #32
   1a30c:	bhi	1a324 <_start@@Base+0x5510>
   1a310:	beq	1a414 <_start@@Base+0x5600>
   1a314:	mov	r2, r4
   1a318:	mov	r0, r5
   1a31c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a320:	mov	r1, r0
   1a324:	cmp	r4, r1
   1a328:	moveq	r3, #0
   1a32c:	moveq	r0, r4
   1a330:	streq	r3, [r6]
   1a334:	beq	1a404 <_start@@Base+0x55f0>
   1a338:	ldrb	r3, [r1]
   1a33c:	cmp	r3, #44	; 0x2c
   1a340:	beq	1a3b8 <_start@@Base+0x55a4>
   1a344:	mov	r3, #0
   1a348:	str	r3, [r6]
   1a34c:	ldrb	r3, [r1]
   1a350:	cmp	r3, #125	; 0x7d
   1a354:	beq	1a378 <_start@@Base+0x5564>
   1a358:	mov	r2, r4
   1a35c:	mov	r0, r5
   1a360:	mov	r3, #10
   1a364:	ldrd	r4, [sp]
   1a368:	ldr	r6, [sp, #8]
   1a36c:	ldr	lr, [sp, #12]
   1a370:	add	sp, sp, #16
   1a374:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a378:	add	r0, r1, #1
   1a37c:	sub	r3, r4, r0
   1a380:	cmp	r3, #1
   1a384:	ble	1a398 <_start@@Base+0x5584>
   1a388:	ldrb	r3, [r1, #1]
   1a38c:	cmp	r3, #32
   1a390:	bhi	1a404 <_start@@Base+0x55f0>
   1a394:	beq	1a460 <_start@@Base+0x564c>
   1a398:	mov	r2, r4
   1a39c:	mov	r1, r0
   1a3a0:	ldr	r6, [sp, #8]
   1a3a4:	mov	r0, r5
   1a3a8:	ldrd	r4, [sp]
   1a3ac:	ldr	lr, [sp, #12]
   1a3b0:	add	sp, sp, #16
   1a3b4:	b	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a3b8:	add	r0, r1, #1
   1a3bc:	sub	r3, r4, r0
   1a3c0:	cmp	r3, #1
   1a3c4:	ble	1a3d8 <_start@@Base+0x55c4>
   1a3c8:	ldrb	r3, [r1, #1]
   1a3cc:	cmp	r3, #32
   1a3d0:	bhi	1a3e8 <_start@@Base+0x55d4>
   1a3d4:	beq	1a474 <_start@@Base+0x5660>
   1a3d8:	mov	r1, r0
   1a3dc:	mov	r2, r4
   1a3e0:	mov	r0, r5
   1a3e4:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a3e8:	cmp	r4, r0
   1a3ec:	beq	1a488 <_start@@Base+0x5674>
   1a3f0:	ldrb	r3, [r0]
   1a3f4:	cmp	r3, #125	; 0x7d
   1a3f8:	movne	r3, #1
   1a3fc:	strne	r3, [r6]
   1a400:	beq	1a438 <_start@@Base+0x5624>
   1a404:	ldrd	r4, [sp]
   1a408:	ldr	r6, [sp, #8]
   1a40c:	add	sp, sp, #12
   1a410:	pop	{pc}		; (ldr pc, [sp], #4)
   1a414:	ldrb	r3, [r1, #1]
   1a418:	cmp	r3, #32
   1a41c:	addhi	r1, r1, #1
   1a420:	bhi	1a324 <_start@@Base+0x5510>
   1a424:	mov	r2, r4
   1a428:	mov	r0, r5
   1a42c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1a430:	mov	r1, r0
   1a434:	b	1a324 <_start@@Base+0x5510>
   1a438:	mov	r3, #0
   1a43c:	mov	r2, r4
   1a440:	ldr	lr, [sp, #12]
   1a444:	add	r1, r0, #1
   1a448:	mov	r0, r5
   1a44c:	ldrd	r4, [sp]
   1a450:	str	r3, [r6]
   1a454:	ldr	r6, [sp, #8]
   1a458:	add	sp, sp, #16
   1a45c:	b	16ef8 <_start@@Base+0x20e4>
   1a460:	ldrb	r3, [r1, #2]
   1a464:	cmp	r3, #32
   1a468:	addhi	r0, r1, #2
   1a46c:	bls	1a398 <_start@@Base+0x5584>
   1a470:	b	1a404 <_start@@Base+0x55f0>
   1a474:	ldrb	r3, [r1, #2]
   1a478:	cmp	r3, #32
   1a47c:	addhi	r0, r1, #2
   1a480:	bls	1a3d8 <_start@@Base+0x55c4>
   1a484:	b	1a3e8 <_start@@Base+0x55d4>
   1a488:	mov	ip, #0
   1a48c:	mov	r0, r5
   1a490:	mov	r3, #10
   1a494:	mov	r2, r4
   1a498:	mov	r1, r4
   1a49c:	str	ip, [r6]
   1a4a0:	b	1a364 <_start@@Base+0x5550>
   1a4a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4a8:	mov	r4, r1
   1a4ac:	mov	r1, #10
   1a4b0:	strd	r6, [sp, #8]
   1a4b4:	mov	r5, r2
   1a4b8:	strd	sl, [sp, #24]
   1a4bc:	mov	sl, r3
   1a4c0:	mov	r3, #0
   1a4c4:	strd	r8, [sp, #16]
   1a4c8:	mov	r8, r0
   1a4cc:	str	lr, [sp, #32]
   1a4d0:	sub	sp, sp, #124	; 0x7c
   1a4d4:	ldr	r0, [r0]
   1a4d8:	str	r3, [sl]
   1a4dc:	bl	26d60 <flatcc_builder_start_table@@Base>
   1a4e0:	cmp	r0, #0
   1a4e4:	beq	1a520 <_start@@Base+0x570c>
   1a4e8:	mov	r1, r4
   1a4ec:	mov	r2, r5
   1a4f0:	mov	r0, r8
   1a4f4:	mov	r3, #33	; 0x21
   1a4f8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a4fc:	mov	r4, r0
   1a500:	mov	r0, r4
   1a504:	add	sp, sp, #124	; 0x7c
   1a508:	ldrd	r4, [sp]
   1a50c:	ldrd	r6, [sp, #8]
   1a510:	ldrd	r8, [sp, #16]
   1a514:	ldrd	sl, [sp, #24]
   1a518:	add	sp, sp, #32
   1a51c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a520:	add	r0, sp, #116	; 0x74
   1a524:	mov	r3, #5
   1a528:	mov	r2, r5
   1a52c:	mov	r1, r4
   1a530:	str	r0, [sp]
   1a534:	mov	r0, r8
   1a538:	bl	2ec98 <flatcc_json_parser_prepare_unions@@Base>
   1a53c:	cmp	r5, r0
   1a540:	beq	1a4e8 <_start@@Base+0x56d4>
   1a544:	add	r9, sp, #112	; 0x70
   1a548:	mov	r1, r4
   1a54c:	mov	r3, r9
   1a550:	mov	r2, r5
   1a554:	mov	r0, r8
   1a558:	bl	18e0c <_start@@Base+0x3ff8>
   1a55c:	ldr	r3, [sp, #112]	; 0x70
   1a560:	mov	r4, r0
   1a564:	cmp	r3, #0
   1a568:	beq	1a8b4 <_start@@Base+0x5aa0>
   1a56c:	add	r7, pc, #892	; 0x37c
   1a570:	ldrd	r6, [r7]
   1a574:	str	sl, [sp, #92]	; 0x5c
   1a578:	b	1a640 <_start@@Base+0x582c>
   1a57c:	add	r3, pc, #884	; 0x374
   1a580:	ldrd	r2, [r3]
   1a584:	cmp	r1, r3
   1a588:	cmpeq	r0, r2
   1a58c:	beq	1a754 <_start@@Base+0x5940>
   1a590:	add	r3, pc, #872	; 0x368
   1a594:	ldrd	r2, [r3]
   1a598:	cmp	r1, r3
   1a59c:	cmpeq	r0, r2
   1a5a0:	beq	1a95c <_start@@Base+0x5b48>
   1a5a4:	and	ip, r0, #-16777216	; 0xff000000
   1a5a8:	add	r3, pc, #856	; 0x358
   1a5ac:	ldrd	r2, [r3]
   1a5b0:	str	ip, [sp, #24]
   1a5b4:	str	r1, [sp, #28]
   1a5b8:	ldrd	r0, [sp, #24]
   1a5bc:	cmp	r1, r3
   1a5c0:	cmpeq	r0, r2
   1a5c4:	bne	1a7b4 <_start@@Base+0x59a0>
   1a5c8:	sub	r3, r5, r4
   1a5cc:	cmp	r3, #5
   1a5d0:	ble	1a7b4 <_start@@Base+0x59a0>
   1a5d4:	mov	r1, r4
   1a5d8:	mov	r3, #5
   1a5dc:	mov	r2, r5
   1a5e0:	mov	r0, r8
   1a5e4:	bl	1a220 <_start@@Base+0x540c>
   1a5e8:	cmp	r4, r0
   1a5ec:	mov	r1, r0
   1a5f0:	beq	1a7b4 <_start@@Base+0x59a0>
   1a5f4:	ldr	ip, [pc, #844]	; 1a948 <_start@@Base+0x5b34>
   1a5f8:	mov	r4, #7
   1a5fc:	mov	r3, #3
   1a600:	add	ip, pc, ip
   1a604:	ldr	lr, [sp, #116]	; 0x74
   1a608:	mov	r2, r5
   1a60c:	mov	r0, r8
   1a610:	stm	sp, {r4, lr}
   1a614:	str	ip, [sp, #8]
   1a618:	bl	2eda4 <flatcc_json_parser_union@@Base>
   1a61c:	mov	r1, r0
   1a620:	mov	r3, r9
   1a624:	mov	r2, r5
   1a628:	mov	r0, r8
   1a62c:	bl	1a2e0 <_start@@Base+0x54cc>
   1a630:	ldr	r3, [sp, #112]	; 0x70
   1a634:	mov	r4, r0
   1a638:	cmp	r3, #0
   1a63c:	beq	1a8b0 <_start@@Base+0x5a9c>
   1a640:	cmp	r5, r4
   1a644:	beq	1a658 <_start@@Base+0x5844>
   1a648:	ldrb	r3, [r4]
   1a64c:	cmp	r3, #34	; 0x22
   1a650:	addeq	r4, r4, #1
   1a654:	bne	1a7cc <_start@@Base+0x59b8>
   1a658:	mov	r1, r5
   1a65c:	mov	r0, r4
   1a660:	bl	14f08 <_start@@Base+0xf4>
   1a664:	cmp	r1, r7
   1a668:	cmpeq	r0, r6
   1a66c:	bls	1a57c <_start@@Base+0x5768>
   1a670:	add	r3, pc, #664	; 0x298
   1a674:	ldrd	r2, [r3]
   1a678:	cmp	r1, r3
   1a67c:	cmpeq	r0, r2
   1a680:	bhi	1a7e8 <_start@@Base+0x59d4>
   1a684:	add	r3, pc, #652	; 0x28c
   1a688:	ldrd	r2, [r3]
   1a68c:	cmp	r1, r3
   1a690:	cmpeq	r0, r2
   1a694:	bne	1a7b4 <_start@@Base+0x59a0>
   1a698:	add	r4, r4, #8
   1a69c:	mov	r1, r5
   1a6a0:	mov	r0, r4
   1a6a4:	bl	14f08 <_start@@Base+0xf4>
   1a6a8:	bic	r0, r0, #255	; 0xff
   1a6ac:	add	r3, pc, #620	; 0x26c
   1a6b0:	ldrd	r2, [r3]
   1a6b4:	strd	r0, [sp, #72]	; 0x48
   1a6b8:	ldrd	sl, [sp, #72]	; 0x48
   1a6bc:	cmp	fp, r3
   1a6c0:	cmpeq	sl, r2
   1a6c4:	beq	1ac34 <_start@@Base+0x5e20>
   1a6c8:	lsr	r1, r1, #16
   1a6cc:	mov	r3, #0
   1a6d0:	mov	r2, #0
   1a6d4:	lsl	r1, r1, #16
   1a6d8:	str	r3, [sp, #56]	; 0x38
   1a6dc:	mov	r3, #0
   1a6e0:	movt	r3, #29299	; 0x7273
   1a6e4:	str	r1, [sp, #60]	; 0x3c
   1a6e8:	ldrd	r0, [sp, #56]	; 0x38
   1a6ec:	cmp	r1, r3
   1a6f0:	cmpeq	r0, r2
   1a6f4:	bne	1a7b4 <_start@@Base+0x59a0>
   1a6f8:	sub	r3, r5, r4
   1a6fc:	cmp	r3, #2
   1a700:	ble	1a7b4 <_start@@Base+0x59a0>
   1a704:	mov	r1, r4
   1a708:	mov	r3, #2
   1a70c:	mov	r2, r5
   1a710:	mov	r0, r8
   1a714:	bl	1a220 <_start@@Base+0x540c>
   1a718:	cmp	r4, r0
   1a71c:	mov	r1, r0
   1a720:	beq	1a7b4 <_start@@Base+0x59a0>
   1a724:	ldr	ip, [pc, #544]	; 1a94c <_start@@Base+0x5b38>
   1a728:	mov	r4, #9
   1a72c:	mov	r3, #4
   1a730:	mov	r2, r5
   1a734:	mov	r0, r8
   1a738:	ldr	lr, [sp, #116]	; 0x74
   1a73c:	add	ip, pc, ip
   1a740:	stm	sp, {r4, lr}
   1a744:	str	ip, [sp, #8]
   1a748:	bl	2f158 <flatcc_json_parser_union_vector@@Base>
   1a74c:	mov	r1, r0
   1a750:	b	1a620 <_start@@Base+0x580c>
   1a754:	add	r4, r4, #8
   1a758:	mov	r1, r5
   1a75c:	mov	r0, r4
   1a760:	bl	14f08 <_start@@Base+0xf4>
   1a764:	bic	r0, r0, #255	; 0xff
   1a768:	add	r3, pc, #440	; 0x1b8
   1a76c:	ldrd	r2, [r3]
   1a770:	strd	r0, [sp, #48]	; 0x30
   1a774:	ldrd	sl, [sp, #48]	; 0x30
   1a778:	cmp	fp, r3
   1a77c:	cmpeq	sl, r2
   1a780:	beq	1abc8 <_start@@Base+0x5db4>
   1a784:	lsr	r1, r1, #16
   1a788:	mov	r3, #0
   1a78c:	mov	r2, #0
   1a790:	lsl	r1, r1, #16
   1a794:	str	r3, [sp, #32]
   1a798:	mov	r3, #0
   1a79c:	movt	r3, #29556	; 0x7374
   1a7a0:	str	r1, [sp, #36]	; 0x24
   1a7a4:	ldrd	r0, [sp, #32]
   1a7a8:	cmp	r1, r3
   1a7ac:	cmpeq	r0, r2
   1a7b0:	beq	1aaa0 <_start@@Base+0x5c8c>
   1a7b4:	mov	r1, r4
   1a7b8:	mov	r2, r5
   1a7bc:	mov	r0, r8
   1a7c0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1a7c4:	mov	r1, r0
   1a7c8:	b	1a620 <_start@@Base+0x580c>
   1a7cc:	mov	r1, r4
   1a7d0:	mov	r3, #5
   1a7d4:	mov	r2, r5
   1a7d8:	mov	r0, r8
   1a7dc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1a7e0:	mov	r4, r0
   1a7e4:	b	1a658 <_start@@Base+0x5844>
   1a7e8:	add	r3, pc, #320	; 0x140
   1a7ec:	ldrd	r2, [r3]
   1a7f0:	cmp	r1, r3
   1a7f4:	cmpeq	r0, r2
   1a7f8:	beq	1aa0c <_start@@Base+0x5bf8>
   1a7fc:	add	r3, pc, #308	; 0x134
   1a800:	ldrd	r2, [r3]
   1a804:	cmp	r1, r3
   1a808:	cmpeq	r0, r2
   1a80c:	bne	1a7b4 <_start@@Base+0x59a0>
   1a810:	add	r4, r4, #8
   1a814:	mov	r1, r5
   1a818:	mov	r0, r4
   1a81c:	bl	14f08 <_start@@Base+0xf4>
   1a820:	lsr	r3, r0, #16
   1a824:	str	r3, [sp, #64]	; 0x40
   1a828:	ldr	r0, [sp, #64]	; 0x40
   1a82c:	str	r1, [sp, #68]	; 0x44
   1a830:	add	r3, pc, #264	; 0x108
   1a834:	ldrd	r2, [r3]
   1a838:	lsl	r0, r0, #16
   1a83c:	str	r0, [sp, #64]	; 0x40
   1a840:	ldrd	sl, [sp, #64]	; 0x40
   1a844:	cmp	fp, r3
   1a848:	cmpeq	sl, r2
   1a84c:	beq	1ab70 <_start@@Base+0x5d5c>
   1a850:	mov	r3, #0
   1a854:	str	r3, [sp, #96]	; 0x60
   1a858:	and	r3, r1, #-16777216	; 0xff000000
   1a85c:	str	r3, [sp, #100]	; 0x64
   1a860:	ldrd	r2, [sp, #96]	; 0x60
   1a864:	cmp	r3, #1795162112	; 0x6b000000
   1a868:	cmpeq	r2, #0
   1a86c:	bne	1a7b4 <_start@@Base+0x59a0>
   1a870:	sub	r3, r5, r4
   1a874:	cmp	r3, #1
   1a878:	ble	1a7b4 <_start@@Base+0x59a0>
   1a87c:	mov	r1, r4
   1a880:	mov	r3, #1
   1a884:	mov	r2, r5
   1a888:	mov	r0, r8
   1a88c:	bl	1a220 <_start@@Base+0x540c>
   1a890:	cmp	r4, r0
   1a894:	mov	r1, r0
   1a898:	beq	1a7b4 <_start@@Base+0x59a0>
   1a89c:	ldr	ip, [pc, #172]	; 1a950 <_start@@Base+0x5b3c>
   1a8a0:	mov	r4, #5
   1a8a4:	mov	r3, #2
   1a8a8:	add	ip, pc, ip
   1a8ac:	b	1a604 <_start@@Base+0x57f0>
   1a8b0:	ldr	sl, [sp, #92]	; 0x5c
   1a8b4:	ldr	r3, [r8, #20]
   1a8b8:	cmp	r3, #0
   1a8bc:	bne	1a4e8 <_start@@Base+0x56d4>
   1a8c0:	mov	r1, r4
   1a8c4:	mov	r2, r5
   1a8c8:	ldr	r3, [sp, #116]	; 0x74
   1a8cc:	mov	r0, r8
   1a8d0:	bl	2ed2c <flatcc_json_parser_finalize_unions@@Base>
   1a8d4:	mov	r4, r0
   1a8d8:	ldr	r0, [r8]
   1a8dc:	bl	27744 <flatcc_builder_end_table@@Base>
   1a8e0:	cmp	r0, #0
   1a8e4:	str	r0, [sl]
   1a8e8:	bne	1a500 <_start@@Base+0x56ec>
   1a8ec:	b	1a4e8 <_start@@Base+0x56d4>
   1a8f0:	cmnvs	r3, r4, ror #8
   1a8f4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a8f8:	strbvs	r6, [pc, -r9, ror #28]!
   1a8fc:	cmnvs	lr, r1, ror #8
   1a900:	svcvs	0x005f7479
   1a904:	cmnvs	r1, #6464	; 0x1940
   1a908:	svcvs	0x00000000
   1a90c:	cmnvs	r1, #6464	; 0x1940
   1a910:	svcpl	0x00636860
   1a914:			; <UNDEFINED> instruction: 0x6d61696e
   1a918:	cmnvs	r3, r5, ror #8
   1a91c:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a920:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a924:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1a928:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a92c:	cmnvc	r4, #116, 30	; 0x1d0
   1a930:	svcpl	0x00636861
   1a934:			; <UNDEFINED> instruction: 0x6d61696e
   1a938:	svcpl	0x006b6963
   1a93c:	cmnvc	r9, #1694498816	; 0x65000000
   1a940:	rsbvc	r0, r5, r0
   1a944:	blvs	17f7b30 <__bss_end__@@Base+0x17a3764>
   1a948:	andeq	r1, r0, ip, ror #2
   1a94c:	andeq	r1, r0, r0, lsr r0
   1a950:	andeq	r0, r0, r4, asr #29
   1a954:	muleq	r3, r4, r6
   1a958:	andeq	r0, r0, r8, ror sp
   1a95c:	mov	r3, #0
   1a960:	add	r4, r4, #8
   1a964:	mov	r1, r5
   1a968:	mov	r0, r4
   1a96c:	str	r3, [sp, #40]	; 0x28
   1a970:	bl	14f08 <_start@@Base+0xf4>
   1a974:	lsr	r3, r1, #16
   1a978:	mov	r2, #0
   1a97c:	str	r3, [sp, #44]	; 0x2c
   1a980:	mov	r3, #0
   1a984:	movt	r3, #28773	; 0x7065
   1a988:	ldr	r1, [sp, #44]	; 0x2c
   1a98c:	lsl	r1, r1, #16
   1a990:	str	r1, [sp, #44]	; 0x2c
   1a994:	ldrd	r0, [sp, #40]	; 0x28
   1a998:	cmp	r1, r3
   1a99c:	cmpeq	r0, r2
   1a9a0:	bne	1a7b4 <_start@@Base+0x59a0>
   1a9a4:	sub	r3, r5, r4
   1a9a8:	cmp	r3, #2
   1a9ac:	ble	1a7b4 <_start@@Base+0x59a0>
   1a9b0:	mov	r1, r4
   1a9b4:	mov	r3, #2
   1a9b8:	mov	r2, r5
   1a9bc:	mov	r0, r8
   1a9c0:	bl	1a220 <_start@@Base+0x540c>
   1a9c4:	cmp	r4, r0
   1a9c8:	mov	r1, r0
   1a9cc:	beq	1a7b4 <_start@@Base+0x59a0>
   1a9d0:	ldr	ip, [pc, #-132]	; 1a954 <_start@@Base+0x5b40>
   1a9d4:	mov	r4, #7
   1a9d8:	mov	r3, #3
   1a9dc:	mov	r2, r5
   1a9e0:	ldr	lr, [pc, #-144]	; 1a958 <_start@@Base+0x5b44>
   1a9e4:	str	r4, [sp]
   1a9e8:	ldr	r4, [sp, #116]	; 0x74
   1a9ec:	add	ip, pc, ip
   1a9f0:	add	ip, ip, #16
   1a9f4:	add	lr, pc, lr
   1a9f8:	mov	r0, r8
   1a9fc:	stmib	sp, {r4, ip, lr}
   1aa00:	bl	2ef00 <flatcc_json_parser_union_type@@Base>
   1aa04:	mov	r1, r0
   1aa08:	b	1a620 <_start@@Base+0x580c>
   1aa0c:	add	fp, r4, #8
   1aa10:	mov	r1, r5
   1aa14:	mov	r0, fp
   1aa18:	bl	14f08 <_start@@Base+0xf4>
   1aa1c:	add	r3, pc, #676	; 0x2a4
   1aa20:	ldrd	r2, [r3]
   1aa24:	cmp	r1, r3
   1aa28:	cmpeq	r0, r2
   1aa2c:	beq	1aae0 <_start@@Base+0x5ccc>
   1aa30:	lsr	r3, r0, #16
   1aa34:	str	r3, [sp, #80]	; 0x50
   1aa38:	ldr	ip, [sp, #80]	; 0x50
   1aa3c:	str	r1, [sp, #84]	; 0x54
   1aa40:	add	r3, pc, #648	; 0x288
   1aa44:	ldrd	r2, [r3]
   1aa48:	lsl	ip, ip, #16
   1aa4c:	str	ip, [sp, #80]	; 0x50
   1aa50:	ldrd	r0, [sp, #80]	; 0x50
   1aa54:	cmp	r1, r3
   1aa58:	cmpeq	r0, r2
   1aa5c:	bne	1acb0 <_start@@Base+0x5e9c>
   1aa60:	sub	r3, r5, fp
   1aa64:	cmp	r3, #6
   1aa68:	ble	1acb0 <_start@@Base+0x5e9c>
   1aa6c:	mov	r1, fp
   1aa70:	mov	r3, #6
   1aa74:	mov	r2, r5
   1aa78:	mov	r0, r8
   1aa7c:	bl	1a220 <_start@@Base+0x540c>
   1aa80:	cmp	fp, r0
   1aa84:	mov	r1, r0
   1aa88:	beq	1acb0 <_start@@Base+0x5e9c>
   1aa8c:	ldr	ip, [pc, #588]	; 1ace0 <_start@@Base+0x5ecc>
   1aa90:	mov	r4, #1
   1aa94:	mov	r3, #0
   1aa98:	add	ip, pc, ip
   1aa9c:	b	1a604 <_start@@Base+0x57f0>
   1aaa0:	sub	r3, r5, r4
   1aaa4:	cmp	r3, #2
   1aaa8:	ble	1a7b4 <_start@@Base+0x59a0>
   1aaac:	mov	r1, r4
   1aab0:	mov	r3, #2
   1aab4:	mov	r2, r5
   1aab8:	mov	r0, r8
   1aabc:	bl	1a220 <_start@@Base+0x540c>
   1aac0:	cmp	r4, r0
   1aac4:	mov	r1, r0
   1aac8:	beq	1a7b4 <_start@@Base+0x59a0>
   1aacc:	ldr	ip, [pc, #528]	; 1ace4 <_start@@Base+0x5ed0>
   1aad0:	mov	r4, #3
   1aad4:	mov	r3, #1
   1aad8:	add	ip, pc, ip
   1aadc:	b	1a604 <_start@@Base+0x57f0>
   1aae0:	add	r4, r4, #16
   1aae4:	mov	r1, r5
   1aae8:	mov	r0, r4
   1aaec:	mov	fp, #0
   1aaf0:	bl	14f08 <_start@@Base+0xf4>
   1aaf4:	bic	r1, r1, #255	; 0xff
   1aaf8:	str	fp, [sp, #104]	; 0x68
   1aafc:	add	r3, pc, #468	; 0x1d4
   1ab00:	ldrd	r2, [r3]
   1ab04:	str	r1, [sp, #108]	; 0x6c
   1ab08:	ldrd	r0, [sp, #104]	; 0x68
   1ab0c:	cmp	r1, r3
   1ab10:	cmpeq	r0, r2
   1ab14:	bne	1a7b4 <_start@@Base+0x59a0>
   1ab18:	sub	r3, r5, r4
   1ab1c:	cmp	r3, #3
   1ab20:	ble	1a7b4 <_start@@Base+0x59a0>
   1ab24:	mov	r1, r4
   1ab28:	mov	r3, #3
   1ab2c:	mov	r2, r5
   1ab30:	mov	r0, r8
   1ab34:	bl	1a220 <_start@@Base+0x540c>
   1ab38:	cmp	r4, r0
   1ab3c:	mov	r1, r0
   1ab40:	beq	1a7b4 <_start@@Base+0x59a0>
   1ab44:	ldr	ip, [pc, #412]	; 1ace8 <_start@@Base+0x5ed4>
   1ab48:	mov	r4, #1
   1ab4c:	mov	r3, fp
   1ab50:	mov	r2, r5
   1ab54:	ldr	lr, [pc, #400]	; 1acec <_start@@Base+0x5ed8>
   1ab58:	str	r4, [sp]
   1ab5c:	ldr	r4, [sp, #116]	; 0x74
   1ab60:	add	ip, pc, ip
   1ab64:	add	ip, ip, #48	; 0x30
   1ab68:	add	lr, pc, lr
   1ab6c:	b	1a9f8 <_start@@Base+0x5be4>
   1ab70:	sub	r3, r5, r4
   1ab74:	cmp	r3, #6
   1ab78:	ble	1a7b4 <_start@@Base+0x59a0>
   1ab7c:	mov	r1, r4
   1ab80:	mov	r3, #6
   1ab84:	mov	r2, r5
   1ab88:	mov	r0, r8
   1ab8c:	bl	1a220 <_start@@Base+0x540c>
   1ab90:	cmp	r4, r0
   1ab94:	mov	r1, r0
   1ab98:	beq	1a7b4 <_start@@Base+0x59a0>
   1ab9c:	ldr	ip, [pc, #332]	; 1acf0 <_start@@Base+0x5edc>
   1aba0:	mov	r4, #5
   1aba4:	mov	r3, #2
   1aba8:	mov	r2, r5
   1abac:	ldr	lr, [pc, #320]	; 1acf4 <_start@@Base+0x5ee0>
   1abb0:	str	r4, [sp]
   1abb4:	ldr	r4, [sp, #116]	; 0x74
   1abb8:	add	ip, pc, ip
   1abbc:	add	ip, ip, #64	; 0x40
   1abc0:	add	lr, pc, lr
   1abc4:	b	1a9f8 <_start@@Base+0x5be4>
   1abc8:	sub	r3, r5, r4
   1abcc:	cmp	r3, #7
   1abd0:	ble	1a7b4 <_start@@Base+0x59a0>
   1abd4:	mov	r1, r4
   1abd8:	mov	r3, #7
   1abdc:	mov	r2, r5
   1abe0:	mov	r0, r8
   1abe4:	bl	1a220 <_start@@Base+0x540c>
   1abe8:	cmp	r4, r0
   1abec:	mov	r1, r0
   1abf0:	beq	1a7b4 <_start@@Base+0x59a0>
   1abf4:	mov	r4, #3
   1abf8:	ldr	lr, [pc, #248]	; 1acf8 <_start@@Base+0x5ee4>
   1abfc:	mov	r3, #1
   1ac00:	mov	r2, r5
   1ac04:	mov	r0, r8
   1ac08:	ldr	ip, [pc, #236]	; 1acfc <_start@@Base+0x5ee8>
   1ac0c:	str	r4, [sp]
   1ac10:	ldr	r4, [sp, #116]	; 0x74
   1ac14:	add	lr, pc, lr
   1ac18:	add	ip, pc, ip
   1ac1c:	str	r4, [sp, #4]
   1ac20:	str	ip, [sp, #8]
   1ac24:	str	lr, [sp, #12]
   1ac28:	bl	2ef00 <flatcc_json_parser_union_type@@Base>
   1ac2c:	mov	r1, r0
   1ac30:	b	1a620 <_start@@Base+0x580c>
   1ac34:	sub	r3, r5, r4
   1ac38:	cmp	r3, #7
   1ac3c:	ble	1a7b4 <_start@@Base+0x59a0>
   1ac40:	mov	r1, r4
   1ac44:	mov	r3, #7
   1ac48:	mov	r2, r5
   1ac4c:	mov	r0, r8
   1ac50:	bl	1a220 <_start@@Base+0x540c>
   1ac54:	cmp	r4, r0
   1ac58:	mov	r1, r0
   1ac5c:	beq	1a7b4 <_start@@Base+0x59a0>
   1ac60:	mov	ip, #9
   1ac64:	ldr	r0, [pc, #148]	; 1ad00 <_start@@Base+0x5eec>
   1ac68:	mov	r3, #4
   1ac6c:	mov	r2, r5
   1ac70:	ldr	lr, [pc, #140]	; 1ad04 <_start@@Base+0x5ef0>
   1ac74:	str	ip, [sp]
   1ac78:	ldr	ip, [pc, #136]	; 1ad08 <_start@@Base+0x5ef4>
   1ac7c:	add	r0, pc, r0
   1ac80:	ldr	r4, [sp, #116]	; 0x74
   1ac84:	add	r0, r0, #32
   1ac88:	add	lr, pc, lr
   1ac8c:	add	ip, pc, ip
   1ac90:	str	r4, [sp, #4]
   1ac94:	str	r0, [sp, #8]
   1ac98:	mov	r0, r8
   1ac9c:	str	ip, [sp, #12]
   1aca0:	str	lr, [sp, #16]
   1aca4:	bl	2f274 <flatcc_json_parser_union_type_vector@@Base>
   1aca8:	mov	r1, r0
   1acac:	b	1a620 <_start@@Base+0x580c>
   1acb0:	mov	r1, fp
   1acb4:	mov	r2, r5
   1acb8:	mov	r0, r8
   1acbc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1acc0:	mov	r1, r0
   1acc4:	b	1a620 <_start@@Base+0x580c>
   1acc8:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1accc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1acd0:	ldrbvs	r0, [r2, #-0]!
   1acd4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1acd8:	andeq	r0, r0, r0
   1acdc:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1ace0:	ldrdeq	r0, [r0], -r4
   1ace4:	muleq	r0, r4, ip
   1ace8:	andeq	r9, r3, r0, lsr #10
   1acec:	andeq	r0, r0, r4, lsl #24
   1acf0:	andeq	r9, r3, r8, asr #9
   1acf4:	andeq	r0, r0, ip, lsr #23
   1acf8:	andeq	r0, r0, r8, asr fp
   1acfc:	andeq	r9, r3, r8, ror #8
   1ad00:	andeq	r9, r3, r4, lsl #8
   1ad04:			; <UNDEFINED> instruction: 0xffffa37c
   1ad08:	andeq	r0, r0, r0, ror #21
   1ad0c:	strd	r4, [sp, #-16]!
   1ad10:	mov	r4, r2
   1ad14:	sub	r2, r2, r1
   1ad18:	cmp	r2, #1
   1ad1c:	mov	r5, r0
   1ad20:	str	r6, [sp, #8]
   1ad24:	mov	r6, r3
   1ad28:	str	lr, [sp, #12]
   1ad2c:	ble	1ad40 <_start@@Base+0x5f2c>
   1ad30:	ldrb	r3, [r1]
   1ad34:	cmp	r3, #32
   1ad38:	bhi	1ad50 <_start@@Base+0x5f3c>
   1ad3c:	beq	1ae40 <_start@@Base+0x602c>
   1ad40:	mov	r2, r4
   1ad44:	mov	r0, r5
   1ad48:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ad4c:	mov	r1, r0
   1ad50:	cmp	r4, r1
   1ad54:	moveq	r3, #0
   1ad58:	moveq	r0, r4
   1ad5c:	streq	r3, [r6]
   1ad60:	beq	1ae30 <_start@@Base+0x601c>
   1ad64:	ldrb	r3, [r1]
   1ad68:	cmp	r3, #44	; 0x2c
   1ad6c:	beq	1ade4 <_start@@Base+0x5fd0>
   1ad70:	mov	r3, #0
   1ad74:	str	r3, [r6]
   1ad78:	ldrb	r3, [r1]
   1ad7c:	cmp	r3, #93	; 0x5d
   1ad80:	beq	1ada4 <_start@@Base+0x5f90>
   1ad84:	mov	r2, r4
   1ad88:	mov	r0, r5
   1ad8c:	mov	r3, #9
   1ad90:	ldrd	r4, [sp]
   1ad94:	ldr	r6, [sp, #8]
   1ad98:	ldr	lr, [sp, #12]
   1ad9c:	add	sp, sp, #16
   1ada0:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ada4:	add	r0, r1, #1
   1ada8:	sub	r3, r4, r0
   1adac:	cmp	r3, #1
   1adb0:	ble	1adc4 <_start@@Base+0x5fb0>
   1adb4:	ldrb	r3, [r1, #1]
   1adb8:	cmp	r3, #32
   1adbc:	bhi	1ae30 <_start@@Base+0x601c>
   1adc0:	beq	1ae8c <_start@@Base+0x6078>
   1adc4:	mov	r2, r4
   1adc8:	mov	r1, r0
   1adcc:	ldr	r6, [sp, #8]
   1add0:	mov	r0, r5
   1add4:	ldrd	r4, [sp]
   1add8:	ldr	lr, [sp, #12]
   1addc:	add	sp, sp, #16
   1ade0:	b	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ade4:	add	r0, r1, #1
   1ade8:	sub	r3, r4, r0
   1adec:	cmp	r3, #1
   1adf0:	ble	1ae04 <_start@@Base+0x5ff0>
   1adf4:	ldrb	r3, [r1, #1]
   1adf8:	cmp	r3, #32
   1adfc:	bhi	1ae14 <_start@@Base+0x6000>
   1ae00:	beq	1aea0 <_start@@Base+0x608c>
   1ae04:	mov	r1, r0
   1ae08:	mov	r2, r4
   1ae0c:	mov	r0, r5
   1ae10:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ae14:	cmp	r4, r0
   1ae18:	beq	1aeb4 <_start@@Base+0x60a0>
   1ae1c:	ldrb	r3, [r0]
   1ae20:	cmp	r3, #93	; 0x5d
   1ae24:	movne	r3, #1
   1ae28:	strne	r3, [r6]
   1ae2c:	beq	1ae64 <_start@@Base+0x6050>
   1ae30:	ldrd	r4, [sp]
   1ae34:	ldr	r6, [sp, #8]
   1ae38:	add	sp, sp, #12
   1ae3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae40:	ldrb	r3, [r1, #1]
   1ae44:	cmp	r3, #32
   1ae48:	addhi	r1, r1, #1
   1ae4c:	bhi	1ad50 <_start@@Base+0x5f3c>
   1ae50:	mov	r2, r4
   1ae54:	mov	r0, r5
   1ae58:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ae5c:	mov	r1, r0
   1ae60:	b	1ad50 <_start@@Base+0x5f3c>
   1ae64:	mov	r3, #0
   1ae68:	mov	r2, r4
   1ae6c:	ldr	lr, [sp, #12]
   1ae70:	add	r1, r0, #1
   1ae74:	mov	r0, r5
   1ae78:	ldrd	r4, [sp]
   1ae7c:	str	r3, [r6]
   1ae80:	ldr	r6, [sp, #8]
   1ae84:	add	sp, sp, #16
   1ae88:	b	16ef8 <_start@@Base+0x20e4>
   1ae8c:	ldrb	r3, [r1, #2]
   1ae90:	cmp	r3, #32
   1ae94:	addhi	r0, r1, #2
   1ae98:	bls	1adc4 <_start@@Base+0x5fb0>
   1ae9c:	b	1ae30 <_start@@Base+0x601c>
   1aea0:	ldrb	r3, [r1, #2]
   1aea4:	cmp	r3, #32
   1aea8:	addhi	r0, r1, #2
   1aeac:	bls	1ae04 <_start@@Base+0x5ff0>
   1aeb0:	b	1ae14 <_start@@Base+0x6000>
   1aeb4:	mov	ip, #0
   1aeb8:	mov	r0, r5
   1aebc:	mov	r3, #9
   1aec0:	mov	r2, r4
   1aec4:	mov	r1, r4
   1aec8:	str	ip, [r6]
   1aecc:	b	1ad90 <_start@@Base+0x5f7c>
   1aed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aed4:	mov	r4, r1
   1aed8:	mov	r5, r0
   1aedc:	strd	r6, [sp, #8]
   1aee0:	strd	r8, [sp, #16]
   1aee4:	strd	sl, [sp, #24]
   1aee8:	mov	sl, r2
   1aeec:	mov	fp, r3
   1aef0:	str	lr, [sp, #32]
   1aef4:	sub	sp, sp, #12
   1aef8:	ldrd	r2, [sp, #48]	; 0x30
   1aefc:	strd	r2, [sp]
   1af00:	sub	r2, sl, r1
   1af04:	cmp	r2, #8
   1af08:	bhi	1af3c <_start@@Base+0x6128>
   1af0c:	sub	r2, r2, #1
   1af10:	cmp	r2, #7
   1af14:	addls	pc, pc, r2, lsl #2
   1af18:	b	1b014 <_start@@Base+0x6200>
   1af1c:	b	1b034 <_start@@Base+0x6220>
   1af20:	b	1b040 <_start@@Base+0x622c>
   1af24:	b	1b04c <_start@@Base+0x6238>
   1af28:	b	1b058 <_start@@Base+0x6244>
   1af2c:	b	1b064 <_start@@Base+0x6250>
   1af30:	b	1b070 <_start@@Base+0x625c>
   1af34:	b	1b07c <_start@@Base+0x6268>
   1af38:	b	1af3c <_start@@Base+0x6128>
   1af3c:	ldrb	r6, [r4, #7]
   1af40:	mov	r7, #0
   1af44:	mov	r3, r7
   1af48:	ldrb	r0, [r4, #6]
   1af4c:	orr	r2, r6, r0, lsl #8
   1af50:	ldrb	r0, [r4, #5]
   1af54:	orr	r2, r2, r0, lsl #16
   1af58:	ldrb	r0, [r4, #4]
   1af5c:	orr	r2, r2, r0, lsl #24
   1af60:	ldrb	r8, [r4, #3]
   1af64:	orr	r3, r3, r8
   1af68:	ldrb	r6, [r4, #2]
   1af6c:	orr	r3, r3, r6, lsl #8
   1af70:	ldrb	r6, [r4, #1]
   1af74:	orr	r3, r3, r6, lsl #16
   1af78:	ldrb	r8, [r4]
   1af7c:	add	r7, pc, #260	; 0x104
   1af80:	ldrd	r6, [r7]
   1af84:	orr	r1, r3, r8, lsl #24
   1af88:	mov	r8, #0
   1af8c:	cmp	r1, r7
   1af90:	cmpeq	r2, r6
   1af94:	bne	1b014 <_start@@Base+0x6200>
   1af98:	add	r6, r4, #8
   1af9c:	mov	r1, sl
   1afa0:	mov	r0, r6
   1afa4:	bl	14f08 <_start@@Base+0xf4>
   1afa8:	and	r3, r1, #-16777216	; 0xff000000
   1afac:	cmp	r3, #1912602624	; 0x72000000
   1afb0:	cmpeq	r8, #0
   1afb4:	bne	1b014 <_start@@Base+0x6200>
   1afb8:	sub	r3, sl, r6
   1afbc:	cmp	r3, #1
   1afc0:	ble	1b014 <_start@@Base+0x6200>
   1afc4:	ldrb	r3, [r4, #9]
   1afc8:	cmp	r3, #46	; 0x2e
   1afcc:	bne	1b014 <_start@@Base+0x6200>
   1afd0:	add	r1, r4, #10
   1afd4:	cmp	r6, r1
   1afd8:	beq	1b014 <_start@@Base+0x6200>
   1afdc:	ldm	sp, {r0, ip}
   1afe0:	mov	r3, fp
   1afe4:	mov	r2, sl
   1afe8:	str	r0, [sp, #48]	; 0x30
   1afec:	mov	r0, r5
   1aff0:	str	ip, [sp, #52]	; 0x34
   1aff4:	add	sp, sp, #12
   1aff8:	ldrd	r4, [sp]
   1affc:	ldrd	r6, [sp, #8]
   1b000:	ldrd	r8, [sp, #16]
   1b004:	ldrd	sl, [sp, #24]
   1b008:	ldr	lr, [sp, #32]
   1b00c:	add	sp, sp, #36	; 0x24
   1b010:	b	162a8 <_start@@Base+0x1494>
   1b014:	mov	r0, r4
   1b018:	add	sp, sp, #12
   1b01c:	ldrd	r4, [sp]
   1b020:	ldrd	r6, [sp, #8]
   1b024:	ldrd	r8, [sp, #16]
   1b028:	ldrd	sl, [sp, #24]
   1b02c:	add	sp, sp, #32
   1b030:	pop	{pc}		; (ldr pc, [sp], #4)
   1b034:	mov	r2, #0
   1b038:	mov	r3, r2
   1b03c:	b	1af78 <_start@@Base+0x6164>
   1b040:	mov	r2, #0
   1b044:	mov	r3, r2
   1b048:	b	1af70 <_start@@Base+0x615c>
   1b04c:	mov	r2, #0
   1b050:	mov	r3, r2
   1b054:	b	1af68 <_start@@Base+0x6154>
   1b058:	mov	r2, #0
   1b05c:	mov	r3, r2
   1b060:	b	1af60 <_start@@Base+0x614c>
   1b064:	mov	r2, #0
   1b068:	mov	r3, r2
   1b06c:	b	1af58 <_start@@Base+0x6144>
   1b070:	mov	r2, #0
   1b074:	mov	r3, r2
   1b078:	b	1af50 <_start@@Base+0x613c>
   1b07c:	mov	r6, #0
   1b080:	mov	r7, #0
   1b084:	b	1af44 <_start@@Base+0x6130>
   1b088:	cmnvs	r3, r5, ror #8
   1b08c:	cmnmi	r8, #-2147483620	; 0x8000001c
   1b090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b094:	mov	r5, r0
   1b098:	mov	r4, r2
   1b09c:	ldr	r0, [r0]
   1b0a0:	mov	r2, #4
   1b0a4:	strd	r6, [sp, #8]
   1b0a8:	mov	r7, r3
   1b0ac:	mov	r3, #0
   1b0b0:	mov	r6, r1
   1b0b4:	mov	r1, r2
   1b0b8:	strd	r8, [sp, #16]
   1b0bc:	strd	sl, [sp, #24]
   1b0c0:	str	lr, [sp, #32]
   1b0c4:	sub	sp, sp, #60	; 0x3c
   1b0c8:	str	r3, [r7]
   1b0cc:	bl	25fb4 <flatcc_builder_start_struct@@Base>
   1b0d0:	subs	r3, r0, #0
   1b0d4:	str	r3, [sp, #28]
   1b0d8:	beq	1b128 <_start@@Base+0x6314>
   1b0dc:	cmp	r6, r4
   1b0e0:	beq	1b0f0 <_start@@Base+0x62dc>
   1b0e4:	ldrb	r3, [r6]
   1b0e8:	cmp	r3, #123	; 0x7b
   1b0ec:	beq	1b160 <_start@@Base+0x634c>
   1b0f0:	mov	r1, r6
   1b0f4:	mov	r3, #21
   1b0f8:	mov	r2, r4
   1b0fc:	mov	r0, r5
   1b100:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b104:	mov	r8, r0
   1b108:	cmp	r4, r8
   1b10c:	beq	1b76c <_start@@Base+0x6958>
   1b110:	ldr	r0, [r5]
   1b114:	bl	26078 <flatcc_builder_end_struct@@Base>
   1b118:	cmp	r0, #0
   1b11c:	str	r0, [r7]
   1b120:	moveq	r6, r8
   1b124:	bne	1b140 <_start@@Base+0x632c>
   1b128:	mov	r2, r4
   1b12c:	mov	r1, r6
   1b130:	mov	r0, r5
   1b134:	mov	r3, #33	; 0x21
   1b138:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b13c:	mov	r8, r0
   1b140:	mov	r0, r8
   1b144:	add	sp, sp, #60	; 0x3c
   1b148:	ldrd	r4, [sp]
   1b14c:	ldrd	r6, [sp, #8]
   1b150:	ldrd	r8, [sp, #16]
   1b154:	ldrd	sl, [sp, #24]
   1b158:	add	sp, sp, #32
   1b15c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b160:	add	r0, r6, #1
   1b164:	sub	r3, r4, r0
   1b168:	cmp	r3, #1
   1b16c:	ble	1b180 <_start@@Base+0x636c>
   1b170:	ldrb	r3, [r6, #1]
   1b174:	cmp	r3, #32
   1b178:	bhi	1b190 <_start@@Base+0x637c>
   1b17c:	beq	1b710 <_start@@Base+0x68fc>
   1b180:	mov	r1, r0
   1b184:	mov	r2, r4
   1b188:	mov	r0, r5
   1b18c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b190:	cmp	r4, r0
   1b194:	beq	1b1a4 <_start@@Base+0x6390>
   1b198:	ldrb	r3, [r0]
   1b19c:	cmp	r3, #125	; 0x7d
   1b1a0:	beq	1b740 <_start@@Base+0x692c>
   1b1a4:	ldr	r3, [pc, #1180]	; 1b648 <_start@@Base+0x6834>
   1b1a8:	mov	r2, #0
   1b1ac:	movt	r2, #65535	; 0xffff
   1b1b0:	mov	r1, r0
   1b1b4:	add	r3, pc, r3
   1b1b8:	add	r3, r3, #80	; 0x50
   1b1bc:	strd	r2, [sp, #32]
   1b1c0:	cmp	r4, r1
   1b1c4:	beq	1b1d8 <_start@@Base+0x63c4>
   1b1c8:	ldrb	r3, [r1]
   1b1cc:	cmp	r3, #34	; 0x22
   1b1d0:	addeq	r1, r1, #1
   1b1d4:	bne	1b4d8 <_start@@Base+0x66c4>
   1b1d8:	sub	r3, r4, r1
   1b1dc:	cmp	r3, #8
   1b1e0:	bhi	1b214 <_start@@Base+0x6400>
   1b1e4:	sub	r3, r3, #1
   1b1e8:	cmp	r3, #7
   1b1ec:	addls	pc, pc, r3, lsl #2
   1b1f0:	b	1b414 <_start@@Base+0x6600>
   1b1f4:	b	1b3f0 <_start@@Base+0x65dc>
   1b1f8:	b	1b3e4 <_start@@Base+0x65d0>
   1b1fc:	b	1b3d8 <_start@@Base+0x65c4>
   1b200:	b	1b3cc <_start@@Base+0x65b8>
   1b204:	b	1b3c0 <_start@@Base+0x65ac>
   1b208:	b	1b3b4 <_start@@Base+0x65a0>
   1b20c:	b	1b3a8 <_start@@Base+0x6594>
   1b210:	b	1b214 <_start@@Base+0x6400>
   1b214:	ldrb	sl, [r1, #7]
   1b218:	mov	fp, #0
   1b21c:	mov	r3, fp
   1b220:	ldrb	r8, [r1, #6]
   1b224:	orr	r2, sl, r8, lsl #8
   1b228:	ldrb	r8, [r1, #5]
   1b22c:	orr	r2, r2, r8, lsl #16
   1b230:	ldrb	r8, [r1, #4]
   1b234:	orr	r2, r2, r8, lsl #24
   1b238:	ldrb	sl, [r1, #3]
   1b23c:	orr	r3, r3, sl
   1b240:	ldrb	sl, [r1, #2]
   1b244:	orr	sl, r3, sl, lsl #8
   1b248:	ldrb	r8, [r1, #1]
   1b24c:	orr	sl, sl, r8, lsl #16
   1b250:	str	r2, [sp, #8]
   1b254:	ldrb	r2, [r1]
   1b258:	add	r9, pc, #992	; 0x3e0
   1b25c:	ldrd	r8, [r9]
   1b260:	orr	r3, sl, r2, lsl #24
   1b264:	str	r3, [sp, #12]
   1b268:	ldrd	r2, [sp, #8]
   1b26c:	cmp	r3, r9
   1b270:	cmpeq	r2, r8
   1b274:	bne	1b414 <_start@@Base+0x6600>
   1b278:	add	r6, r1, #8
   1b27c:	sub	r3, r4, r6
   1b280:	cmp	r3, #8
   1b284:	bhi	1b2b4 <_start@@Base+0x64a0>
   1b288:	sub	r2, r3, #2
   1b28c:	cmp	r2, #6
   1b290:	addls	pc, pc, r2, lsl #2
   1b294:	b	1b324 <_start@@Base+0x6510>
   1b298:	b	1b40c <_start@@Base+0x65f8>
   1b29c:	b	1b404 <_start@@Base+0x65f0>
   1b2a0:	b	1b3fc <_start@@Base+0x65e8>
   1b2a4:	b	1b3a0 <_start@@Base+0x658c>
   1b2a8:	b	1b3a0 <_start@@Base+0x658c>
   1b2ac:	b	1b2b4 <_start@@Base+0x64a0>
   1b2b0:	b	1b2b4 <_start@@Base+0x64a0>
   1b2b4:	mov	r9, #0
   1b2b8:	mov	sl, r9
   1b2bc:	mov	r8, sl
   1b2c0:	ldrb	sl, [r1, #11]
   1b2c4:	orr	sl, r8, sl
   1b2c8:	ldrb	r8, [r1, #10]
   1b2cc:	orr	sl, sl, r8, lsl #8
   1b2d0:	ldrb	r8, [r1, #9]
   1b2d4:	mov	r2, #0
   1b2d8:	mov	fp, #0
   1b2dc:	movt	fp, #24932	; 0x6164
   1b2e0:	str	r2, [sp, #16]
   1b2e4:	ldr	r2, [sp, #32]
   1b2e8:	orr	sl, sl, r8, lsl #16
   1b2ec:	ldrb	r8, [r1, #8]
   1b2f0:	orr	r8, sl, r8, lsl #24
   1b2f4:	mov	sl, #0
   1b2f8:	and	r2, r8, r2
   1b2fc:	str	r2, [sp, #20]
   1b300:	ldrd	r8, [sp, #16]
   1b304:	cmp	r9, fp
   1b308:	cmpeq	r8, sl
   1b30c:	bne	1b324 <_start@@Base+0x6510>
   1b310:	cmp	r3, #2
   1b314:	ble	1b324 <_start@@Base+0x6510>
   1b318:	ldrb	r3, [r1, #10]
   1b31c:	cmp	r3, #34	; 0x22
   1b320:	beq	1b504 <_start@@Base+0x66f0>
   1b324:	mov	r1, r6
   1b328:	mov	r2, r4
   1b32c:	mov	r0, r5
   1b330:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1b334:	mov	r6, r0
   1b338:	sub	r3, r4, r6
   1b33c:	cmp	r3, #1
   1b340:	ble	1b354 <_start@@Base+0x6540>
   1b344:	ldrb	r3, [r6]
   1b348:	cmp	r3, #32
   1b34c:	bhi	1b368 <_start@@Base+0x6554>
   1b350:	beq	1b4f0 <_start@@Base+0x66dc>
   1b354:	mov	r1, r6
   1b358:	mov	r2, r4
   1b35c:	mov	r0, r5
   1b360:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b364:	mov	r6, r0
   1b368:	cmp	r4, r6
   1b36c:	beq	1b128 <_start@@Base+0x6314>
   1b370:	ldrb	r3, [r6]
   1b374:	cmp	r3, #44	; 0x2c
   1b378:	beq	1b460 <_start@@Base+0x664c>
   1b37c:	cmp	r3, #125	; 0x7d
   1b380:	beq	1b428 <_start@@Base+0x6614>
   1b384:	mov	r1, r6
   1b388:	mov	r3, #10
   1b38c:	mov	r2, r4
   1b390:	mov	r0, r5
   1b394:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b398:	mov	r8, r0
   1b39c:	b	1b108 <_start@@Base+0x62f4>
   1b3a0:	mov	sl, #0
   1b3a4:	b	1b2bc <_start@@Base+0x64a8>
   1b3a8:	mov	sl, #0
   1b3ac:	mov	fp, #0
   1b3b0:	b	1b21c <_start@@Base+0x6408>
   1b3b4:	mov	r2, #0
   1b3b8:	mov	r3, r2
   1b3bc:	b	1b228 <_start@@Base+0x6414>
   1b3c0:	mov	r2, #0
   1b3c4:	mov	r3, r2
   1b3c8:	b	1b230 <_start@@Base+0x641c>
   1b3cc:	mov	r2, #0
   1b3d0:	mov	r3, r2
   1b3d4:	b	1b238 <_start@@Base+0x6424>
   1b3d8:	mov	r2, #0
   1b3dc:	mov	r3, r2
   1b3e0:	b	1b240 <_start@@Base+0x642c>
   1b3e4:	mov	r2, #0
   1b3e8:	mov	sl, r2
   1b3ec:	b	1b248 <_start@@Base+0x6434>
   1b3f0:	mov	r2, #0
   1b3f4:	mov	sl, r2
   1b3f8:	b	1b250 <_start@@Base+0x643c>
   1b3fc:	mov	r8, #0
   1b400:	b	1b2c0 <_start@@Base+0x64ac>
   1b404:	mov	sl, #0
   1b408:	b	1b2c8 <_start@@Base+0x64b4>
   1b40c:	mov	sl, #0
   1b410:	b	1b2d0 <_start@@Base+0x64bc>
   1b414:	mov	r2, r4
   1b418:	mov	r0, r5
   1b41c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1b420:	mov	r6, r0
   1b424:	b	1b338 <_start@@Base+0x6524>
   1b428:	add	r8, r6, #1
   1b42c:	sub	r3, r4, r8
   1b430:	cmp	r3, #1
   1b434:	ble	1b448 <_start@@Base+0x6634>
   1b438:	ldrb	r3, [r6, #1]
   1b43c:	cmp	r3, #32
   1b440:	bhi	1b108 <_start@@Base+0x62f4>
   1b444:	beq	1b64c <_start@@Base+0x6838>
   1b448:	mov	r1, r8
   1b44c:	mov	r2, r4
   1b450:	mov	r0, r5
   1b454:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b458:	mov	r8, r0
   1b45c:	b	1b108 <_start@@Base+0x62f4>
   1b460:	add	r1, r6, #1
   1b464:	sub	r3, r4, r1
   1b468:	cmp	r3, #1
   1b46c:	ble	1b480 <_start@@Base+0x666c>
   1b470:	ldrb	r3, [r6, #1]
   1b474:	cmp	r3, #32
   1b478:	bhi	1b490 <_start@@Base+0x667c>
   1b47c:	beq	1b660 <_start@@Base+0x684c>
   1b480:	mov	r2, r4
   1b484:	mov	r0, r5
   1b488:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b48c:	mov	r1, r0
   1b490:	cmp	r4, r1
   1b494:	beq	1b678 <_start@@Base+0x6864>
   1b498:	ldrb	r3, [r1]
   1b49c:	cmp	r3, #125	; 0x7d
   1b4a0:	bne	1b1c0 <_start@@Base+0x63ac>
   1b4a4:	add	r8, r1, #1
   1b4a8:	sub	r3, r4, r8
   1b4ac:	cmp	r3, #1
   1b4b0:	ble	1b448 <_start@@Base+0x6634>
   1b4b4:	ldrb	r3, [r1, #1]
   1b4b8:	cmp	r3, #32
   1b4bc:	bhi	1b108 <_start@@Base+0x62f4>
   1b4c0:	bne	1b448 <_start@@Base+0x6634>
   1b4c4:	ldrb	r3, [r1, #2]
   1b4c8:	cmp	r3, #32
   1b4cc:	addhi	r8, r1, #2
   1b4d0:	bls	1b448 <_start@@Base+0x6634>
   1b4d4:	b	1b108 <_start@@Base+0x62f4>
   1b4d8:	mov	r3, #5
   1b4dc:	mov	r2, r4
   1b4e0:	mov	r0, r5
   1b4e4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b4e8:	mov	r1, r0
   1b4ec:	b	1b1d8 <_start@@Base+0x63c4>
   1b4f0:	ldrb	r3, [r6, #1]
   1b4f4:	cmp	r3, #32
   1b4f8:	addhi	r6, r6, #1
   1b4fc:	bls	1b354 <_start@@Base+0x6540>
   1b500:	b	1b368 <_start@@Base+0x6554>
   1b504:	add	r0, r1, #11
   1b508:	sub	r3, r4, r0
   1b50c:	cmp	r3, #1
   1b510:	ble	1b524 <_start@@Base+0x6710>
   1b514:	ldrb	r3, [r1, #11]
   1b518:	cmp	r3, #32
   1b51c:	bhi	1b534 <_start@@Base+0x6720>
   1b520:	beq	1b6c4 <_start@@Base+0x68b0>
   1b524:	mov	r1, r0
   1b528:	mov	r2, r4
   1b52c:	mov	r0, r5
   1b530:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b534:	cmp	r4, r0
   1b538:	beq	1b548 <_start@@Base+0x6734>
   1b53c:	ldrb	r3, [r0]
   1b540:	cmp	r3, #58	; 0x3a
   1b544:	beq	1b6d8 <_start@@Base+0x68c4>
   1b548:	mov	r1, r0
   1b54c:	mov	r3, #4
   1b550:	mov	r2, r4
   1b554:	mov	r0, r5
   1b558:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b55c:	mov	r8, r0
   1b560:	cmp	r6, r8
   1b564:	beq	1b324 <_start@@Base+0x6510>
   1b568:	mov	r3, #0
   1b56c:	mov	r0, #0
   1b570:	mov	r1, #0
   1b574:	cmp	r4, r8
   1b578:	str	r3, [sp, #40]	; 0x28
   1b57c:	str	r3, [sp, #44]	; 0x2c
   1b580:	strd	r0, [sp, #48]	; 0x30
   1b584:	beq	1b5ec <_start@@Base+0x67d8>
   1b588:	add	r0, sp, #48	; 0x30
   1b58c:	add	r3, sp, #44	; 0x2c
   1b590:	mov	r2, r4
   1b594:	mov	r1, r8
   1b598:	str	r0, [sp]
   1b59c:	mov	r0, r5
   1b5a0:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1b5a4:	cmp	r8, r0
   1b5a8:	mov	r6, r0
   1b5ac:	bne	1b5f4 <_start@@Base+0x67e0>
   1b5b0:	add	r0, sp, #40	; 0x28
   1b5b4:	mov	r2, r4
   1b5b8:	ldr	r3, [sp, #36]	; 0x24
   1b5bc:	mov	r1, r6
   1b5c0:	str	r0, [sp]
   1b5c4:	mov	r0, r5
   1b5c8:	bl	19d6c <_start@@Base+0x4f58>
   1b5cc:	cmp	r4, r0
   1b5d0:	cmpne	r0, r6
   1b5d4:	beq	1b724 <_start@@Base+0x6910>
   1b5d8:	ldr	r2, [sp, #40]	; 0x28
   1b5dc:	mov	r6, r0
   1b5e0:	ldr	r3, [sp, #28]
   1b5e4:	str	r2, [r3]
   1b5e8:	b	1b338 <_start@@Base+0x6524>
   1b5ec:	mov	r6, r4
   1b5f0:	b	1b5b0 <_start@@Base+0x679c>
   1b5f4:	ldr	r1, [sp, #44]	; 0x2c
   1b5f8:	ldrd	r2, [sp, #48]	; 0x30
   1b5fc:	cmp	r1, #0
   1b600:	beq	1b694 <_start@@Base+0x6880>
   1b604:	cmp	r3, #0
   1b608:	cmpeq	r2, #-2147483648	; 0x80000000
   1b60c:	rsbls	r2, r2, #0
   1b610:	bls	1b5e0 <_start@@Base+0x67cc>
   1b614:	mov	r1, r0
   1b618:	mov	r3, #8
   1b61c:	mov	r2, r4
   1b620:	mov	r0, r5
   1b624:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b628:	mov	r6, r0
   1b62c:	cmp	r8, r6
   1b630:	ldrne	r2, [sp, #40]	; 0x28
   1b634:	bne	1b5e0 <_start@@Base+0x67cc>
   1b638:	b	1b5b0 <_start@@Base+0x679c>
   1b63c:	nop	{0}
   1b640:	cmpvc	pc, #1342177286	; 0x50000006
   1b644:	rsbvs	r6, pc, #428	; 0x1ac
   1b648:	andeq	r8, r3, ip, asr #29
   1b64c:	ldrb	r3, [r6, #2]
   1b650:	cmp	r3, #32
   1b654:	addhi	r8, r6, #2
   1b658:	bls	1b448 <_start@@Base+0x6634>
   1b65c:	b	1b108 <_start@@Base+0x62f4>
   1b660:	ldrb	r3, [r6, #2]
   1b664:	cmp	r3, #32
   1b668:	addhi	r1, r6, #2
   1b66c:	bls	1b480 <_start@@Base+0x666c>
   1b670:	cmp	r4, r1
   1b674:	bne	1b498 <_start@@Base+0x6684>
   1b678:	mov	r3, #10
   1b67c:	mov	r2, r4
   1b680:	mov	r1, r4
   1b684:	mov	r0, r5
   1b688:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b68c:	mov	r8, r0
   1b690:	b	1b108 <_start@@Base+0x62f4>
   1b694:	mov	r1, #0
   1b698:	mvn	r0, #-2147483648	; 0x80000000
   1b69c:	cmp	r3, r1
   1b6a0:	cmpeq	r2, r0
   1b6a4:	bls	1b5e0 <_start@@Base+0x67cc>
   1b6a8:	mov	r1, r6
   1b6ac:	mov	r3, #7
   1b6b0:	mov	r2, r4
   1b6b4:	mov	r0, r5
   1b6b8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b6bc:	mov	r6, r0
   1b6c0:	b	1b62c <_start@@Base+0x6818>
   1b6c4:	ldrb	r3, [r1, #12]
   1b6c8:	cmp	r3, #32
   1b6cc:	addhi	r0, r1, #12
   1b6d0:	bls	1b524 <_start@@Base+0x6710>
   1b6d4:	b	1b534 <_start@@Base+0x6720>
   1b6d8:	add	r8, r0, #1
   1b6dc:	sub	r3, r4, r8
   1b6e0:	cmp	r3, #1
   1b6e4:	ble	1b6f8 <_start@@Base+0x68e4>
   1b6e8:	ldrb	r3, [r0, #1]
   1b6ec:	cmp	r3, #32
   1b6f0:	bhi	1b560 <_start@@Base+0x674c>
   1b6f4:	beq	1b758 <_start@@Base+0x6944>
   1b6f8:	mov	r1, r8
   1b6fc:	mov	r2, r4
   1b700:	mov	r0, r5
   1b704:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1b708:	mov	r8, r0
   1b70c:	b	1b560 <_start@@Base+0x674c>
   1b710:	ldrb	r3, [r6, #2]
   1b714:	cmp	r3, #32
   1b718:	addhi	r0, r6, #2
   1b71c:	bls	1b180 <_start@@Base+0x636c>
   1b720:	b	1b190 <_start@@Base+0x637c>
   1b724:	mov	r1, r0
   1b728:	mov	r3, #33	; 0x21
   1b72c:	mov	r2, r4
   1b730:	mov	r0, r5
   1b734:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b738:	mov	r8, r0
   1b73c:	b	1b108 <_start@@Base+0x62f4>
   1b740:	add	r1, r0, #1
   1b744:	mov	r2, r4
   1b748:	mov	r0, r5
   1b74c:	bl	16ef8 <_start@@Base+0x20e4>
   1b750:	mov	r8, r0
   1b754:	b	1b108 <_start@@Base+0x62f4>
   1b758:	ldrb	r3, [r0, #2]
   1b75c:	cmp	r3, #32
   1b760:	addhi	r8, r0, #2
   1b764:	bls	1b6f8 <_start@@Base+0x68e4>
   1b768:	b	1b560 <_start@@Base+0x674c>
   1b76c:	mov	r6, r4
   1b770:	b	1b128 <_start@@Base+0x6314>
   1b774:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b778:	mov	r5, r2
   1b77c:	mov	ip, #0
   1b780:	strd	r6, [sp, #8]
   1b784:	cmp	r3, #9
   1b788:	mov	r4, r1
   1b78c:	strd	r8, [sp, #16]
   1b790:	mov	r6, r0
   1b794:	strd	sl, [sp, #24]
   1b798:	str	lr, [sp, #32]
   1b79c:	sub	sp, sp, #44	; 0x2c
   1b7a0:	ldr	r2, [sp, #80]	; 0x50
   1b7a4:	str	ip, [r2]
   1b7a8:	beq	1b870 <_start@@Base+0x6a5c>
   1b7ac:	bhi	1b80c <_start@@Base+0x69f8>
   1b7b0:	cmp	r3, #2
   1b7b4:	beq	1bad0 <_start@@Base+0x6cbc>
   1b7b8:	cmp	r3, #8
   1b7bc:	beq	1b8a4 <_start@@Base+0x6a90>
   1b7c0:	cmp	r3, ip
   1b7c4:	beq	1ba9c <_start@@Base+0x6c88>
   1b7c8:	ldr	r3, [r6, #8]
   1b7cc:	mov	r2, r5
   1b7d0:	mov	r1, r4
   1b7d4:	mov	r0, r6
   1b7d8:	tst	r3, #1
   1b7dc:	bne	1b898 <_start@@Base+0x6a84>
   1b7e0:	mov	r3, #15
   1b7e4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b7e8:	mov	r4, r0
   1b7ec:	mov	r0, r4
   1b7f0:	add	sp, sp, #44	; 0x2c
   1b7f4:	ldrd	r4, [sp]
   1b7f8:	ldrd	r6, [sp, #8]
   1b7fc:	ldrd	r8, [sp, #16]
   1b800:	ldrd	sl, [sp, #24]
   1b804:	add	sp, sp, #32
   1b808:	pop	{pc}		; (ldr pc, [sp], #4)
   1b80c:	cmp	r3, #11
   1b810:	beq	1b820 <_start@@Base+0x6a0c>
   1b814:	bcc	1b870 <_start@@Base+0x6a5c>
   1b818:	cmp	r3, #255	; 0xff
   1b81c:	bne	1b7c8 <_start@@Base+0x69b4>
   1b820:	mov	r1, r4
   1b824:	mov	r2, r5
   1b828:	ldr	r3, [sp, #80]	; 0x50
   1b82c:	mov	r0, r6
   1b830:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1b834:	mov	r4, r0
   1b838:	ldr	r3, [r6, #20]
   1b83c:	cmp	r3, #0
   1b840:	bne	1b7ec <_start@@Base+0x69d8>
   1b844:	ldr	r3, [sp, #80]	; 0x50
   1b848:	ldr	r3, [r3]
   1b84c:	cmp	r3, #0
   1b850:	bne	1b7ec <_start@@Base+0x69d8>
   1b854:	mov	r1, r4
   1b858:	mov	r2, r5
   1b85c:	mov	r0, r6
   1b860:	mov	r3, #33	; 0x21
   1b864:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1b868:	mov	r4, r0
   1b86c:	b	1b7ec <_start@@Base+0x69d8>
   1b870:	mov	r1, r4
   1b874:	mov	r2, r5
   1b878:	ldr	r3, [sp, #80]	; 0x50
   1b87c:	mov	r0, r6
   1b880:	bl	1b090 <_start@@Base+0x627c>
   1b884:	ldr	r3, [r6, #20]
   1b888:	mov	r4, r0
   1b88c:	cmp	r3, #0
   1b890:	beq	1b844 <_start@@Base+0x6a30>
   1b894:	b	1b7ec <_start@@Base+0x69d8>
   1b898:	bl	2d678 <flatcc_json_parser_generic_json@@Base>
   1b89c:	mov	r4, r0
   1b8a0:	b	1b7ec <_start@@Base+0x69d8>
   1b8a4:	mov	r2, #2
   1b8a8:	ldr	r0, [r0]
   1b8ac:	mov	r1, r2
   1b8b0:	bl	25fb4 <flatcc_builder_start_struct@@Base>
   1b8b4:	subs	r3, r0, #0
   1b8b8:	str	r3, [sp, #8]
   1b8bc:	beq	1ba44 <_start@@Base+0x6c30>
   1b8c0:	add	fp, sp, #24
   1b8c4:	mov	r1, r4
   1b8c8:	mov	r3, fp
   1b8cc:	mov	r2, r5
   1b8d0:	mov	r0, r6
   1b8d4:	bl	18e0c <_start@@Base+0x3ff8>
   1b8d8:	ldr	r3, [sp, #24]
   1b8dc:	mov	r4, r0
   1b8e0:	cmp	r3, #0
   1b8e4:	beq	1ba24 <_start@@Base+0x6c10>
   1b8e8:	ldr	r3, [pc, #1080]	; 1bd28 <_start@@Base+0x6f14>
   1b8ec:	add	r3, pc, r3
   1b8f0:	add	r3, r3, #104	; 0x68
   1b8f4:	str	r3, [sp, #12]
   1b8f8:	cmp	r5, r4
   1b8fc:	beq	1b910 <_start@@Base+0x6afc>
   1b900:	ldrb	r3, [r4]
   1b904:	cmp	r3, #34	; 0x22
   1b908:	addeq	r4, r4, #1
   1b90c:	bne	1ba80 <_start@@Base+0x6c6c>
   1b910:	mov	r1, r5
   1b914:	mov	r0, r4
   1b918:	bl	14f08 <_start@@Base+0xf4>
   1b91c:	add	r3, pc, #988	; 0x3dc
   1b920:	ldrd	r2, [r3]
   1b924:	cmp	r1, r3
   1b928:	cmpeq	r0, r2
   1b92c:	bne	1ba6c <_start@@Base+0x6c58>
   1b930:	add	r4, r4, #8
   1b934:	mov	r1, r5
   1b938:	mov	r0, r4
   1b93c:	mov	r7, #0
   1b940:	bl	14f08 <_start@@Base+0xf4>
   1b944:	add	r3, pc, #956	; 0x3bc
   1b948:	ldrd	r2, [r3]
   1b94c:	bic	r9, r1, #255	; 0xff
   1b950:	cmp	r9, r3
   1b954:	cmpeq	r7, r2
   1b958:	bne	1ba6c <_start@@Base+0x6c58>
   1b95c:	sub	r3, r5, r4
   1b960:	cmp	r3, #3
   1b964:	ble	1ba6c <_start@@Base+0x6c58>
   1b968:	mov	r3, #3
   1b96c:	mov	r2, r5
   1b970:	mov	r1, r4
   1b974:	mov	r0, r6
   1b978:	bl	1a220 <_start@@Base+0x540c>
   1b97c:	cmp	r4, r0
   1b980:	mov	sl, r0
   1b984:	beq	1ba6c <_start@@Base+0x6c58>
   1b988:	mov	r2, #0
   1b98c:	mov	r3, #0
   1b990:	strh	r7, [sp, #20]
   1b994:	cmp	r5, r0
   1b998:	str	r7, [sp, #28]
   1b99c:	strd	r2, [sp, #32]
   1b9a0:	beq	1bd48 <_start@@Base+0x6f34>
   1b9a4:	mov	r1, r0
   1b9a8:	add	r0, sp, #32
   1b9ac:	add	r3, sp, #28
   1b9b0:	mov	r2, r5
   1b9b4:	str	r0, [sp]
   1b9b8:	mov	r0, r6
   1b9bc:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1b9c0:	cmp	sl, r0
   1b9c4:	mov	r4, r0
   1b9c8:	bne	1bd50 <_start@@Base+0x6f3c>
   1b9cc:	add	r0, sp, #20
   1b9d0:	mov	r2, r5
   1b9d4:	ldr	r3, [sp, #12]
   1b9d8:	mov	r1, r4
   1b9dc:	str	r0, [sp]
   1b9e0:	mov	r0, r6
   1b9e4:	bl	19f64 <_start@@Base+0x5150>
   1b9e8:	cmp	r5, r0
   1b9ec:	cmpne	r0, r4
   1b9f0:	beq	1bda0 <_start@@Base+0x6f8c>
   1b9f4:	ldrh	r2, [sp, #20]
   1b9f8:	ldr	r3, [sp, #8]
   1b9fc:	strh	r2, [r3]
   1ba00:	mov	r1, r0
   1ba04:	mov	r3, fp
   1ba08:	mov	r2, r5
   1ba0c:	mov	r0, r6
   1ba10:	bl	1a2e0 <_start@@Base+0x54cc>
   1ba14:	ldr	r3, [sp, #24]
   1ba18:	mov	r4, r0
   1ba1c:	cmp	r3, #0
   1ba20:	bne	1b8f8 <_start@@Base+0x6ae4>
   1ba24:	cmp	r5, r4
   1ba28:	beq	1ba44 <_start@@Base+0x6c30>
   1ba2c:	ldr	r0, [r6]
   1ba30:	bl	26078 <flatcc_builder_end_struct@@Base>
   1ba34:	ldr	r3, [sp, #80]	; 0x50
   1ba38:	cmp	r0, #0
   1ba3c:	str	r0, [r3]
   1ba40:	bne	1b7ec <_start@@Base+0x69d8>
   1ba44:	mov	r1, r4
   1ba48:	mov	r3, #33	; 0x21
   1ba4c:	mov	r2, r5
   1ba50:	mov	r0, r6
   1ba54:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ba58:	ldr	r3, [r6, #20]
   1ba5c:	mov	r4, r0
   1ba60:	cmp	r3, #0
   1ba64:	beq	1b844 <_start@@Base+0x6a30>
   1ba68:	b	1b7ec <_start@@Base+0x69d8>
   1ba6c:	mov	r1, r4
   1ba70:	mov	r2, r5
   1ba74:	mov	r0, r6
   1ba78:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1ba7c:	b	1ba00 <_start@@Base+0x6bec>
   1ba80:	mov	r1, r4
   1ba84:	mov	r3, #5
   1ba88:	mov	r2, r5
   1ba8c:	mov	r0, r6
   1ba90:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ba94:	mov	r4, r0
   1ba98:	b	1b910 <_start@@Base+0x6afc>
   1ba9c:	sub	r3, r5, r1
   1baa0:	cmp	r3, #3
   1baa4:	ble	1bab4 <_start@@Base+0x6ca0>
   1baa8:	ldrb	r3, [r1]
   1baac:	cmp	r3, #110	; 0x6e
   1bab0:	beq	1be18 <_start@@Base+0x7004>
   1bab4:	mov	r1, r4
   1bab8:	mov	r2, r5
   1babc:	mov	r0, r6
   1bac0:	mov	r3, #26
   1bac4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bac8:	mov	r4, r0
   1bacc:	b	1b7ec <_start@@Base+0x69d8>
   1bad0:	mov	r1, #1
   1bad4:	ldr	r0, [r0]
   1bad8:	bl	26d60 <flatcc_builder_start_table@@Base>
   1badc:	cmp	r0, #0
   1bae0:	bne	1ba44 <_start@@Base+0x6c30>
   1bae4:	add	r7, sp, #20
   1bae8:	mov	r1, r4
   1baec:	mov	r3, r7
   1baf0:	mov	r2, r5
   1baf4:	mov	r0, r6
   1baf8:	bl	18e0c <_start@@Base+0x3ff8>
   1bafc:	ldr	r3, [sp, #20]
   1bb00:	mov	r4, r0
   1bb04:	cmp	r3, #0
   1bb08:	beq	1bcb8 <_start@@Base+0x6ea4>
   1bb0c:	ldr	r3, [pc, #536]	; 1bd2c <_start@@Base+0x6f18>
   1bb10:	add	r3, pc, r3
   1bb14:	add	r3, r3, #92	; 0x5c
   1bb18:	str	r3, [sp, #8]
   1bb1c:	cmp	r5, r4
   1bb20:	beq	1bb34 <_start@@Base+0x6d20>
   1bb24:	ldrb	r3, [r4]
   1bb28:	cmp	r3, #34	; 0x22
   1bb2c:	addeq	r4, r4, #1
   1bb30:	bne	1bce0 <_start@@Base+0x6ecc>
   1bb34:	mov	r1, r5
   1bb38:	mov	r0, r4
   1bb3c:	bl	14f08 <_start@@Base+0xf4>
   1bb40:	add	r3, pc, #456	; 0x1c8
   1bb44:	ldrd	r2, [r3]
   1bb48:	cmp	r1, r3
   1bb4c:	cmpeq	r0, r2
   1bb50:	bne	1bc80 <_start@@Base+0x6e6c>
   1bb54:	add	r8, r4, #8
   1bb58:	mov	r1, r5
   1bb5c:	mov	r0, r8
   1bb60:	bl	14f08 <_start@@Base+0xf4>
   1bb64:	add	r3, pc, #428	; 0x1ac
   1bb68:	ldrd	r2, [r3]
   1bb6c:	cmp	r1, r3
   1bb70:	cmpeq	r0, r2
   1bb74:	bne	1bd30 <_start@@Base+0x6f1c>
   1bb78:	add	r4, r4, #16
   1bb7c:	mov	r1, r5
   1bb80:	mov	r0, r4
   1bb84:	mov	r8, #0
   1bb88:	bl	14f08 <_start@@Base+0xf4>
   1bb8c:	add	r3, pc, #396	; 0x18c
   1bb90:	ldrd	r2, [r3]
   1bb94:	bic	fp, r1, #255	; 0xff
   1bb98:	cmp	fp, r3
   1bb9c:	cmpeq	r8, r2
   1bba0:	bne	1bc80 <_start@@Base+0x6e6c>
   1bba4:	sub	r3, r5, r4
   1bba8:	cmp	r3, #3
   1bbac:	ble	1bc80 <_start@@Base+0x6e6c>
   1bbb0:	mov	r3, #3
   1bbb4:	mov	r2, r5
   1bbb8:	mov	r1, r4
   1bbbc:	mov	r0, r6
   1bbc0:	bl	1a220 <_start@@Base+0x540c>
   1bbc4:	cmp	r4, r0
   1bbc8:	mov	r9, r0
   1bbcc:	beq	1bc80 <_start@@Base+0x6e6c>
   1bbd0:	mov	r2, #0
   1bbd4:	mov	r3, #0
   1bbd8:	str	r8, [sp, #24]
   1bbdc:	cmp	r5, r0
   1bbe0:	str	r8, [sp, #28]
   1bbe4:	strd	r2, [sp, #32]
   1bbe8:	beq	1bdc4 <_start@@Base+0x6fb0>
   1bbec:	mov	r1, r0
   1bbf0:	add	r0, sp, #32
   1bbf4:	add	r3, sp, #28
   1bbf8:	mov	r2, r5
   1bbfc:	str	r0, [sp]
   1bc00:	mov	r0, r6
   1bc04:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1bc08:	cmp	r9, r0
   1bc0c:	mov	r4, r0
   1bc10:	bne	1bdcc <_start@@Base+0x6fb8>
   1bc14:	add	r0, sp, #24
   1bc18:	mov	r2, r5
   1bc1c:	ldr	r3, [sp, #8]
   1bc20:	mov	r1, r4
   1bc24:	str	r0, [sp]
   1bc28:	mov	r0, r6
   1bc2c:	bl	19d6c <_start@@Base+0x4f58>
   1bc30:	cmp	r5, r0
   1bc34:	cmpne	r0, r4
   1bc38:	beq	1bdbc <_start@@Base+0x6fa8>
   1bc3c:	ldr	r2, [sp, #24]
   1bc40:	mov	r4, r0
   1bc44:	cmp	r2, #0
   1bc48:	bne	1bc58 <_start@@Base+0x6e44>
   1bc4c:	ldr	r3, [r6, #8]
   1bc50:	tst	r3, #2
   1bc54:	beq	1bc94 <_start@@Base+0x6e80>
   1bc58:	mov	r3, #4
   1bc5c:	mov	r1, #0
   1bc60:	ldr	r0, [r6]
   1bc64:	mov	r2, r3
   1bc68:	bl	28894 <flatcc_builder_table_add@@Base>
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1ba44 <_start@@Base+0x6c30>
   1bc74:	ldr	r3, [sp, #24]
   1bc78:	str	r3, [r0]
   1bc7c:	b	1bc94 <_start@@Base+0x6e80>
   1bc80:	mov	r1, r4
   1bc84:	mov	r2, r5
   1bc88:	mov	r0, r6
   1bc8c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1bc90:	mov	r4, r0
   1bc94:	mov	r1, r4
   1bc98:	mov	r3, r7
   1bc9c:	mov	r2, r5
   1bca0:	mov	r0, r6
   1bca4:	bl	1a2e0 <_start@@Base+0x54cc>
   1bca8:	ldr	r3, [sp, #20]
   1bcac:	mov	r4, r0
   1bcb0:	cmp	r3, #0
   1bcb4:	bne	1bb1c <_start@@Base+0x6d08>
   1bcb8:	ldr	r3, [r6, #20]
   1bcbc:	cmp	r3, #0
   1bcc0:	bne	1ba44 <_start@@Base+0x6c30>
   1bcc4:	ldr	r0, [r6]
   1bcc8:	bl	27744 <flatcc_builder_end_table@@Base>
   1bccc:	ldr	r3, [sp, #80]	; 0x50
   1bcd0:	cmp	r0, #0
   1bcd4:	str	r0, [r3]
   1bcd8:	bne	1b838 <_start@@Base+0x6a24>
   1bcdc:	b	1ba44 <_start@@Base+0x6c30>
   1bce0:	mov	r1, r4
   1bce4:	mov	r3, #5
   1bce8:	mov	r2, r5
   1bcec:	mov	r0, r6
   1bcf0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bcf4:	mov	r4, r0
   1bcf8:	b	1bb34 <_start@@Base+0x6d20>
   1bcfc:	nop	{0}
   1bd00:	svcpl	0x006c656e
   1bd04:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1bd08:	andeq	r0, r0, r0
   1bd0c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1bd10:	ldrbvs	r6, [pc], #-372	; 1bd18 <_start@@Base+0x6f04>
   1bd14:	cmnvc	r7, #456	; 0x1c8
   1bd18:	svcpl	0x0064616d
   1bd1c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1bd20:	andeq	r0, r0, r0
   1bd24:	cmnvs	r7, r0, lsl #10
   1bd28:	muleq	r3, r4, r7
   1bd2c:	andeq	r8, r3, r0, ror r5
   1bd30:	mov	r1, r8
   1bd34:	mov	r2, r5
   1bd38:	mov	r0, r6
   1bd3c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1bd40:	mov	r4, r0
   1bd44:	b	1bc94 <_start@@Base+0x6e80>
   1bd48:	mov	r4, r5
   1bd4c:	b	1b9cc <_start@@Base+0x6bb8>
   1bd50:	ldr	r3, [sp, #28]
   1bd54:	cmp	r3, r7
   1bd58:	bne	1be7c <_start@@Base+0x7068>
   1bd5c:	ldrd	r2, [sp, #32]
   1bd60:	mov	r1, #0
   1bd64:	movw	r0, #65535	; 0xffff
   1bd68:	cmp	r3, r1
   1bd6c:	cmpeq	r2, r0
   1bd70:	uxthls	r2, r2
   1bd74:	movls	r0, r4
   1bd78:	bls	1b9f8 <_start@@Base+0x6be4>
   1bd7c:	mov	r1, r4
   1bd80:	mov	r3, #7
   1bd84:	mov	r2, r5
   1bd88:	mov	r0, r6
   1bd8c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bd90:	cmp	sl, r0
   1bd94:	bne	1b9f4 <_start@@Base+0x6be0>
   1bd98:	mov	r4, sl
   1bd9c:	b	1b9cc <_start@@Base+0x6bb8>
   1bda0:	mov	r1, r0
   1bda4:	mov	r3, #33	; 0x21
   1bda8:	mov	r2, r5
   1bdac:	mov	r0, r6
   1bdb0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bdb4:	mov	r4, r0
   1bdb8:	b	1ba24 <_start@@Base+0x6c10>
   1bdbc:	mov	r4, r0
   1bdc0:	b	1ba44 <_start@@Base+0x6c30>
   1bdc4:	mov	r4, r5
   1bdc8:	b	1bc14 <_start@@Base+0x6e00>
   1bdcc:	ldr	r1, [sp, #28]
   1bdd0:	ldrd	r2, [sp, #32]
   1bdd4:	cmp	r1, r8
   1bdd8:	beq	1be48 <_start@@Base+0x7034>
   1bddc:	cmp	r3, #0
   1bde0:	cmpeq	r2, #-2147483648	; 0x80000000
   1bde4:	rsbls	r2, r2, #0
   1bde8:	strls	r2, [sp, #24]
   1bdec:	bls	1bc44 <_start@@Base+0x6e30>
   1bdf0:	mov	r1, r0
   1bdf4:	mov	r3, #8
   1bdf8:	mov	r2, r5
   1bdfc:	mov	r0, r6
   1be00:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1be04:	mov	r4, r0
   1be08:	cmp	r9, r4
   1be0c:	beq	1bc14 <_start@@Base+0x6e00>
   1be10:	ldr	r2, [sp, #24]
   1be14:	b	1bc44 <_start@@Base+0x6e30>
   1be18:	ldrb	r3, [r1, #1]
   1be1c:	add	r2, r1, #1
   1be20:	cmp	r3, #117	; 0x75
   1be24:	bne	1bab4 <_start@@Base+0x6ca0>
   1be28:	ldrb	r3, [r2, #1]!
   1be2c:	cmp	r3, #108	; 0x6c
   1be30:	bne	1bab4 <_start@@Base+0x6ca0>
   1be34:	ldrb	r3, [r2, #1]
   1be38:	cmp	r3, #108	; 0x6c
   1be3c:	addeq	r4, r1, #4
   1be40:	bne	1bab4 <_start@@Base+0x6ca0>
   1be44:	b	1b7ec <_start@@Base+0x69d8>
   1be48:	mov	r1, #0
   1be4c:	mvn	r0, #-2147483648	; 0x80000000
   1be50:	cmp	r3, r1
   1be54:	cmpeq	r2, r0
   1be58:	strls	r2, [sp, #24]
   1be5c:	bls	1bc44 <_start@@Base+0x6e30>
   1be60:	mov	r1, r4
   1be64:	mov	r3, #7
   1be68:	mov	r2, r5
   1be6c:	mov	r0, r6
   1be70:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1be74:	mov	r4, r0
   1be78:	b	1be08 <_start@@Base+0x6ff4>
   1be7c:	mov	r1, r0
   1be80:	mov	r3, #8
   1be84:	mov	r2, r5
   1be88:	mov	r0, r6
   1be8c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1be90:	b	1bd90 <_start@@Base+0x6f7c>
   1be94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1be98:	mov	r4, r1
   1be9c:	mov	r5, r2
   1bea0:	strd	r6, [sp, #8]
   1bea4:	mov	r6, r0
   1bea8:	str	r8, [sp, #16]
   1beac:	mov	r8, r3
   1beb0:	mov	r3, #0
   1beb4:	mov	r1, r3
   1beb8:	str	lr, [sp, #20]
   1bebc:	sub	sp, sp, #8
   1bec0:	ldr	r0, [r0]
   1bec4:	str	r3, [r8]
   1bec8:	bl	26d60 <flatcc_builder_start_table@@Base>
   1becc:	cmp	r0, #0
   1bed0:	beq	1bf00 <_start@@Base+0x70ec>
   1bed4:	mov	r2, r5
   1bed8:	mov	r1, r4
   1bedc:	mov	r0, r6
   1bee0:	mov	r3, #33	; 0x21
   1bee4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bee8:	add	sp, sp, #8
   1beec:	ldrd	r4, [sp]
   1bef0:	ldrd	r6, [sp, #8]
   1bef4:	ldr	r8, [sp, #16]
   1bef8:	add	sp, sp, #20
   1befc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf00:	cmp	r4, r5
   1bf04:	beq	1bf14 <_start@@Base+0x7100>
   1bf08:	ldrb	r3, [r4]
   1bf0c:	cmp	r3, #123	; 0x7b
   1bf10:	beq	1bfd8 <_start@@Base+0x71c4>
   1bf14:	mov	ip, #0
   1bf18:	mov	r1, r4
   1bf1c:	mov	r3, #21
   1bf20:	mov	r2, r5
   1bf24:	mov	r0, r6
   1bf28:	str	ip, [sp, #4]
   1bf2c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bf30:	mov	r4, r0
   1bf34:	ldr	r3, [sp, #4]
   1bf38:	cmp	r3, #0
   1bf3c:	beq	1bfb0 <_start@@Base+0x719c>
   1bf40:	add	r7, sp, #4
   1bf44:	b	1bf7c <_start@@Base+0x7168>
   1bf48:	mov	r1, r4
   1bf4c:	mov	r2, r5
   1bf50:	mov	r0, r6
   1bf54:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1bf58:	mov	r1, r0
   1bf5c:	mov	r3, r7
   1bf60:	mov	r2, r5
   1bf64:	mov	r0, r6
   1bf68:	bl	1a2e0 <_start@@Base+0x54cc>
   1bf6c:	ldr	r3, [sp, #4]
   1bf70:	mov	r4, r0
   1bf74:	cmp	r3, #0
   1bf78:	beq	1bfb0 <_start@@Base+0x719c>
   1bf7c:	cmp	r5, r4
   1bf80:	beq	1bf48 <_start@@Base+0x7134>
   1bf84:	ldrb	r3, [r4]
   1bf88:	cmp	r3, #34	; 0x22
   1bf8c:	addeq	r4, r4, #1
   1bf90:	beq	1bf48 <_start@@Base+0x7134>
   1bf94:	mov	r1, r4
   1bf98:	mov	r3, #5
   1bf9c:	mov	r2, r5
   1bfa0:	mov	r0, r6
   1bfa4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1bfa8:	mov	r4, r0
   1bfac:	b	1bf48 <_start@@Base+0x7134>
   1bfb0:	ldr	r3, [r6, #20]
   1bfb4:	cmp	r3, #0
   1bfb8:	bne	1bed4 <_start@@Base+0x70c0>
   1bfbc:	ldr	r0, [r6]
   1bfc0:	bl	27744 <flatcc_builder_end_table@@Base>
   1bfc4:	cmp	r0, #0
   1bfc8:	str	r0, [r8]
   1bfcc:	movne	r0, r4
   1bfd0:	bne	1bee8 <_start@@Base+0x70d4>
   1bfd4:	b	1bed4 <_start@@Base+0x70c0>
   1bfd8:	add	r1, r4, #1
   1bfdc:	sub	r3, r5, r1
   1bfe0:	cmp	r3, #1
   1bfe4:	ble	1bffc <_start@@Base+0x71e8>
   1bfe8:	ldrb	r3, [r4, #1]
   1bfec:	cmp	r3, #32
   1bff0:	movhi	r4, r1
   1bff4:	bhi	1c00c <_start@@Base+0x71f8>
   1bff8:	beq	1c02c <_start@@Base+0x7218>
   1bffc:	mov	r2, r5
   1c000:	mov	r0, r6
   1c004:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1c008:	mov	r4, r0
   1c00c:	cmp	r5, r4
   1c010:	beq	1c020 <_start@@Base+0x720c>
   1c014:	ldrb	r3, [r4]
   1c018:	cmp	r3, #125	; 0x7d
   1c01c:	beq	1c040 <_start@@Base+0x722c>
   1c020:	mov	r3, #1
   1c024:	str	r3, [sp, #4]
   1c028:	b	1bf40 <_start@@Base+0x712c>
   1c02c:	ldrb	r3, [r4, #2]
   1c030:	cmp	r3, #32
   1c034:	addhi	r4, r4, #2
   1c038:	bls	1bffc <_start@@Base+0x71e8>
   1c03c:	b	1c00c <_start@@Base+0x71f8>
   1c040:	mov	r3, #0
   1c044:	add	r1, r4, #1
   1c048:	mov	r2, r5
   1c04c:	mov	r0, r6
   1c050:	str	r3, [sp, #4]
   1c054:	bl	16ef8 <_start@@Base+0x20e4>
   1c058:	mov	r4, r0
   1c05c:	b	1bf34 <_start@@Base+0x7120>
   1c060:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c064:	mov	ip, r3
   1c068:	mov	r5, r2
   1c06c:	strd	r6, [sp, #8]
   1c070:	mov	r7, r0
   1c074:	mov	r6, r1
   1c078:	strd	r8, [sp, #16]
   1c07c:	mov	r1, #4
   1c080:	strd	sl, [sp, #24]
   1c084:	str	lr, [sp, #32]
   1c088:	sub	sp, sp, #260	; 0x104
   1c08c:	ldr	r0, [r0]
   1c090:	str	r3, [sp, #212]	; 0xd4
   1c094:	mov	r3, #0
   1c098:	str	r3, [ip]
   1c09c:	bl	26d60 <flatcc_builder_start_table@@Base>
   1c0a0:	cmp	r0, #0
   1c0a4:	beq	1c0e0 <_start@@Base+0x72cc>
   1c0a8:	mov	r2, r5
   1c0ac:	mov	r1, r6
   1c0b0:	mov	r0, r7
   1c0b4:	mov	r3, #33	; 0x21
   1c0b8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c0bc:	mov	sl, r0
   1c0c0:	mov	r0, sl
   1c0c4:	add	sp, sp, #260	; 0x104
   1c0c8:	ldrd	r4, [sp]
   1c0cc:	ldrd	r6, [sp, #8]
   1c0d0:	ldrd	r8, [sp, #16]
   1c0d4:	ldrd	sl, [sp, #24]
   1c0d8:	add	sp, sp, #32
   1c0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0e0:	add	r0, sp, #224	; 0xe0
   1c0e4:	mov	r3, #1
   1c0e8:	mov	r2, r5
   1c0ec:	mov	r1, r6
   1c0f0:	str	r0, [sp]
   1c0f4:	mov	r0, r7
   1c0f8:	bl	2ec98 <flatcc_json_parser_prepare_unions@@Base>
   1c0fc:	cmp	r5, r0
   1c100:	beq	1c0a8 <_start@@Base+0x7294>
   1c104:	mov	r1, r6
   1c108:	add	r3, sp, #216	; 0xd8
   1c10c:	mov	r2, r5
   1c110:	mov	r0, r7
   1c114:	bl	18e0c <_start@@Base+0x3ff8>
   1c118:	ldr	r3, [sp, #216]	; 0xd8
   1c11c:	mov	r6, r5
   1c120:	cmp	r3, #0
   1c124:	beq	1c2b0 <_start@@Base+0x749c>
   1c128:	mov	r1, r0
   1c12c:	cmp	r6, r1
   1c130:	beq	1c2bc <_start@@Base+0x74a8>
   1c134:	ldrb	r3, [r1]
   1c138:	cmp	r3, #34	; 0x22
   1c13c:	addeq	r4, r1, #1
   1c140:	bne	1c410 <_start@@Base+0x75fc>
   1c144:	sub	ip, r6, r4
   1c148:	cmp	ip, #8
   1c14c:	bls	1c2d8 <_start@@Base+0x74c4>
   1c150:	ldrb	r2, [r4, #7]
   1c154:	mov	r3, #0
   1c158:	mov	lr, r3
   1c15c:	ldrb	r0, [r4, #6]
   1c160:	orr	r2, r2, r0, lsl #8
   1c164:	ldrb	r8, [r4, #5]
   1c168:	orr	r2, r2, r8, lsl #16
   1c16c:	ldrb	r8, [r4, #4]
   1c170:	orr	r2, r2, r8, lsl #24
   1c174:	ldrb	r8, [r4, #3]
   1c178:	orr	lr, lr, r8
   1c17c:	ldrb	r0, [r4]
   1c180:	mov	r5, #0
   1c184:	str	r2, [sp, #32]
   1c188:	ldrb	r8, [r4, #1]
   1c18c:	add	r3, pc, #948	; 0x3b4
   1c190:	ldrd	r2, [r3]
   1c194:	lsl	r0, r0, #24
   1c198:	orr	r8, r0, r8, lsl #16
   1c19c:	ldrb	r0, [r4, #2]
   1c1a0:	orr	r1, lr, r0, lsl #8
   1c1a4:	orr	r1, r8, r1
   1c1a8:	str	r1, [sp, #36]	; 0x24
   1c1ac:	ldrd	r0, [sp, #32]
   1c1b0:	cmp	r1, r3
   1c1b4:	cmpeq	r0, r2
   1c1b8:	beq	1c364 <_start@@Base+0x7550>
   1c1bc:	ldrd	r0, [sp, #32]
   1c1c0:	add	r3, pc, #904	; 0x388
   1c1c4:	ldrd	r2, [r3]
   1c1c8:	bic	lr, r0, #255	; 0xff
   1c1cc:	str	lr, [sp, #104]	; 0x68
   1c1d0:	str	r1, [sp, #108]	; 0x6c
   1c1d4:	ldrd	r0, [sp, #104]	; 0x68
   1c1d8:	cmp	r1, r3
   1c1dc:	cmpeq	r0, r2
   1c1e0:	bne	1c45c <_start@@Base+0x7648>
   1c1e4:	cmp	ip, #7
   1c1e8:	ble	1c2c0 <_start@@Base+0x74ac>
   1c1ec:	mov	r3, #7
   1c1f0:	mov	r2, r6
   1c1f4:	mov	r1, r4
   1c1f8:	mov	r0, r7
   1c1fc:	bl	1a220 <_start@@Base+0x540c>
   1c200:	cmp	r4, r0
   1c204:	beq	1c2c0 <_start@@Base+0x74ac>
   1c208:	ldr	ip, [pc, #856]	; 1c568 <_start@@Base+0x7754>
   1c20c:	mov	r4, #3
   1c210:	mov	r1, r0
   1c214:	mov	r3, #0
   1c218:	mov	r2, r6
   1c21c:	ldr	lr, [sp, #224]	; 0xe0
   1c220:	mov	r0, r7
   1c224:	add	ip, pc, ip
   1c228:	stm	sp, {r4, lr}
   1c22c:	str	ip, [sp, #8]
   1c230:	bl	2f158 <flatcc_json_parser_union_vector@@Base>
   1c234:	mov	r5, r0
   1c238:	sub	r3, r6, r5
   1c23c:	cmp	r3, #1
   1c240:	ble	1c254 <_start@@Base+0x7440>
   1c244:	ldrb	r3, [r5]
   1c248:	cmp	r3, #32
   1c24c:	bhi	1c268 <_start@@Base+0x7454>
   1c250:	beq	1d950 <_start@@Base+0x8b3c>
   1c254:	mov	r1, r5
   1c258:	mov	r2, r6
   1c25c:	mov	r0, r7
   1c260:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1c264:	mov	r5, r0
   1c268:	cmp	r6, r5
   1c26c:	beq	1d8f8 <_start@@Base+0x8ae4>
   1c270:	ldrb	r3, [r5]
   1c274:	cmp	r3, #44	; 0x2c
   1c278:	beq	1d964 <_start@@Base+0x8b50>
   1c27c:	mov	r3, #0
   1c280:	str	r3, [sp, #216]	; 0xd8
   1c284:	ldrb	r3, [r5]
   1c288:	cmp	r3, #125	; 0x7d
   1c28c:	beq	1c428 <_start@@Base+0x7614>
   1c290:	mov	r3, #10
   1c294:	mov	r1, r5
   1c298:	mov	r2, r6
   1c29c:	mov	r0, r7
   1c2a0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c2a4:	ldr	r3, [sp, #216]	; 0xd8
   1c2a8:	cmp	r3, #0
   1c2ac:	bne	1c128 <_start@@Base+0x7314>
   1c2b0:	mov	r5, r6
   1c2b4:	mov	r6, r0
   1c2b8:	b	1d90c <_start@@Base+0x8af8>
   1c2bc:	mov	r4, r6
   1c2c0:	mov	r1, r4
   1c2c4:	mov	r2, r6
   1c2c8:	mov	r0, r7
   1c2cc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1c2d0:	mov	r5, r0
   1c2d4:	b	1c238 <_start@@Base+0x7424>
   1c2d8:	sub	r3, ip, #1
   1c2dc:	cmp	r3, #7
   1c2e0:	addls	pc, pc, r3, lsl #2
   1c2e4:	b	1c2c0 <_start@@Base+0x74ac>
   1c2e8:	b	1c2c0 <_start@@Base+0x74ac>
   1c2ec:	b	1c338 <_start@@Base+0x7524>
   1c2f0:	b	1c32c <_start@@Base+0x7518>
   1c2f4:	b	1c320 <_start@@Base+0x750c>
   1c2f8:	b	1c314 <_start@@Base+0x7500>
   1c2fc:	b	1c308 <_start@@Base+0x74f4>
   1c300:	b	1c358 <_start@@Base+0x7544>
   1c304:	b	1c150 <_start@@Base+0x733c>
   1c308:	mov	r2, #0
   1c30c:	mov	lr, r2
   1c310:	b	1c164 <_start@@Base+0x7350>
   1c314:	mov	r2, #0
   1c318:	mov	lr, r2
   1c31c:	b	1c16c <_start@@Base+0x7358>
   1c320:	mov	r2, #0
   1c324:	mov	lr, r2
   1c328:	b	1c174 <_start@@Base+0x7360>
   1c32c:	mov	r2, #0
   1c330:	mov	lr, r2
   1c334:	b	1c17c <_start@@Base+0x7368>
   1c338:	ldrb	r2, [r4]
   1c33c:	mov	r1, #0
   1c340:	ldrb	r0, [r4, #1]
   1c344:	str	r1, [sp, #32]
   1c348:	lsl	r2, r2, #24
   1c34c:	orr	r3, r2, r0, lsl #16
   1c350:	str	r3, [sp, #36]	; 0x24
   1c354:	b	1c1bc <_start@@Base+0x73a8>
   1c358:	mov	r2, #0
   1c35c:	mov	r3, #0
   1c360:	b	1c158 <_start@@Base+0x7344>
   1c364:	add	r4, r4, #8
   1c368:	mov	r1, r6
   1c36c:	str	r5, [sp, #152]	; 0x98
   1c370:	mov	r0, r4
   1c374:	bl	14f08 <_start@@Base+0xf4>
   1c378:	str	r1, [sp, #156]	; 0x9c
   1c37c:	add	r3, pc, #468	; 0x1d4
   1c380:	ldrd	r2, [r3]
   1c384:	ldrd	r0, [sp, #152]	; 0x98
   1c388:	cmp	r1, r3
   1c38c:	cmpeq	r0, r2
   1c390:	bne	1c2c0 <_start@@Base+0x74ac>
   1c394:	sub	r3, r6, r4
   1c398:	cmp	r3, #4
   1c39c:	ble	1c2c0 <_start@@Base+0x74ac>
   1c3a0:	mov	r1, r4
   1c3a4:	mov	r3, #4
   1c3a8:	mov	r2, r6
   1c3ac:	mov	r0, r7
   1c3b0:	bl	1a220 <_start@@Base+0x540c>
   1c3b4:	cmp	r4, r0
   1c3b8:	mov	r1, r0
   1c3bc:	beq	1c2c0 <_start@@Base+0x74ac>
   1c3c0:	mov	ip, #3
   1c3c4:	ldr	r0, [pc, #416]	; 1c56c <_start@@Base+0x7758>
   1c3c8:	mov	r3, r5
   1c3cc:	mov	r2, r6
   1c3d0:	ldr	lr, [pc, #408]	; 1c570 <_start@@Base+0x775c>
   1c3d4:	str	ip, [sp]
   1c3d8:	ldr	ip, [pc, #404]	; 1c574 <_start@@Base+0x7760>
   1c3dc:	add	r0, pc, r0
   1c3e0:	ldr	r4, [sp, #224]	; 0xe0
   1c3e4:	add	r0, r0, #116	; 0x74
   1c3e8:	add	lr, pc, lr
   1c3ec:	add	ip, pc, ip
   1c3f0:	str	r4, [sp, #4]
   1c3f4:	str	r0, [sp, #8]
   1c3f8:	mov	r0, r7
   1c3fc:	str	ip, [sp, #12]
   1c400:	str	lr, [sp, #16]
   1c404:	bl	2f274 <flatcc_json_parser_union_type_vector@@Base>
   1c408:	mov	r5, r0
   1c40c:	b	1c238 <_start@@Base+0x7424>
   1c410:	mov	r3, #5
   1c414:	mov	r2, r6
   1c418:	mov	r0, r7
   1c41c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c420:	mov	r4, r0
   1c424:	b	1c144 <_start@@Base+0x7330>
   1c428:	add	r1, r5, #1
   1c42c:	sub	r3, r6, r1
   1c430:	cmp	r3, #1
   1c434:	ble	1c448 <_start@@Base+0x7634>
   1c438:	ldrb	r3, [r5, #1]
   1c43c:	cmp	r3, #32
   1c440:	bhi	1e228 <_start@@Base+0x9414>
   1c444:	beq	1e2b4 <_start@@Base+0x94a0>
   1c448:	mov	r2, r6
   1c44c:	mov	r0, r7
   1c450:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1c454:	ldr	r3, [sp, #216]	; 0xd8
   1c458:	b	1c120 <_start@@Base+0x730c>
   1c45c:	ldrd	r0, [sp, #32]
   1c460:	lsr	r3, r0, #16
   1c464:	str	r3, [sp, #144]	; 0x90
   1c468:	ldr	lr, [sp, #144]	; 0x90
   1c46c:	str	r1, [sp, #148]	; 0x94
   1c470:	add	r3, pc, #232	; 0xe8
   1c474:	ldrd	r2, [r3]
   1c478:	lsl	lr, lr, #16
   1c47c:	str	lr, [sp, #144]	; 0x90
   1c480:	ldrd	r0, [sp, #144]	; 0x90
   1c484:	cmp	r1, r3
   1c488:	cmpeq	r0, r2
   1c48c:	bne	1d9b4 <_start@@Base+0x8ba0>
   1c490:	cmp	ip, #6
   1c494:	ble	1c2c0 <_start@@Base+0x74ac>
   1c498:	mov	r3, #6
   1c49c:	mov	r2, r6
   1c4a0:	mov	r1, r4
   1c4a4:	mov	r0, r7
   1c4a8:	bl	1a220 <_start@@Base+0x540c>
   1c4ac:	cmp	r4, r0
   1c4b0:	mov	r5, r0
   1c4b4:	beq	1c2c0 <_start@@Base+0x74ac>
   1c4b8:	mov	r3, #0
   1c4bc:	mov	r1, #3
   1c4c0:	ldr	r0, [r7]
   1c4c4:	str	r3, [sp, #220]	; 0xdc
   1c4c8:	bl	26d60 <flatcc_builder_start_table@@Base>
   1c4cc:	cmp	r0, #0
   1c4d0:	bne	1c858 <_start@@Base+0x7a44>
   1c4d4:	add	r3, sp, #228	; 0xe4
   1c4d8:	mov	r1, r5
   1c4dc:	mov	r2, r6
   1c4e0:	mov	r0, r7
   1c4e4:	bl	18e0c <_start@@Base+0x3ff8>
   1c4e8:	ldr	r3, [sp, #228]	; 0xe4
   1c4ec:	cmp	r3, #0
   1c4f0:	beq	1e680 <_start@@Base+0x986c>
   1c4f4:	cmp	r6, r0
   1c4f8:	beq	1c50c <_start@@Base+0x76f8>
   1c4fc:	ldrb	r3, [r0]
   1c500:	cmp	r3, #34	; 0x22
   1c504:	addeq	r0, r0, #1
   1c508:	bne	1c990 <_start@@Base+0x7b7c>
   1c50c:	sub	r3, r6, r0
   1c510:	cmp	r3, #8
   1c514:	bhi	1c578 <_start@@Base+0x7764>
   1c518:	sub	r3, r3, #1
   1c51c:	cmp	r3, #7
   1c520:	addls	pc, pc, r3, lsl #2
   1c524:	b	1c908 <_start@@Base+0x7af4>
   1c528:	b	1c640 <_start@@Base+0x782c>
   1c52c:	b	1c634 <_start@@Base+0x7820>
   1c530:	b	1c628 <_start@@Base+0x7814>
   1c534:	b	1c658 <_start@@Base+0x7844>
   1c538:	b	1c64c <_start@@Base+0x7838>
   1c53c:	b	1c664 <_start@@Base+0x7850>
   1c540:	b	1c61c <_start@@Base+0x7808>
   1c544:	b	1c578 <_start@@Base+0x7764>
   1c548:	cmnvs	lr, pc, asr r9
   1c54c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1c550:	cmnvs	lr, r0, lsl #18
   1c554:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1c558:	andeq	r0, r0, r0
   1c55c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1c560:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1c564:	rsbsvc	r6, r2, r6, ror #10
   1c568:	andeq	r7, r0, r4, asr #1
   1c56c:	andeq	r7, r3, r4, lsr #25
   1c570:			; <UNDEFINED> instruction: 0xffff8c0c
   1c574:	strdeq	r6, [r0], -ip
   1c578:	ldrb	r2, [r0, #7]
   1c57c:	mov	r3, #0
   1c580:	mov	r1, r3
   1c584:	ldrb	r4, [r0, #6]
   1c588:	orr	r2, r2, r4, lsl #8
   1c58c:	ldrb	sl, [r0, #5]
   1c590:	orr	r2, r2, sl, lsl #16
   1c594:	ldrb	sl, [r0, #4]
   1c598:	orr	r2, r2, sl, lsl #24
   1c59c:	ldrb	r8, [r0, #3]
   1c5a0:	orr	r1, r1, r8
   1c5a4:	ldrb	sl, [r0, #2]
   1c5a8:	orr	r1, r1, sl, lsl #8
   1c5ac:	ldrb	sl, [r0, #1]
   1c5b0:	orr	r1, r1, sl, lsl #16
   1c5b4:	str	r2, [sp, #56]	; 0x38
   1c5b8:	ldrb	r2, [r0]
   1c5bc:	add	r5, pc, #996	; 0x3e4
   1c5c0:	ldrd	r4, [r5]
   1c5c4:	orr	r3, r1, r2, lsl #24
   1c5c8:	str	r3, [sp, #60]	; 0x3c
   1c5cc:	ldrd	r2, [sp, #56]	; 0x38
   1c5d0:	cmp	r3, r5
   1c5d4:	cmpeq	r2, r4
   1c5d8:	bne	1c908 <_start@@Base+0x7af4>
   1c5dc:	add	r1, r0, #8
   1c5e0:	sub	r3, r6, r1
   1c5e4:	cmp	r3, #8
   1c5e8:	bhi	1c670 <_start@@Base+0x785c>
   1c5ec:	sub	r3, r3, #1
   1c5f0:	cmp	r3, #7
   1c5f4:	addls	pc, pc, r3, lsl #2
   1c5f8:	b	1c90c <_start@@Base+0x7af8>
   1c5fc:	b	1c760 <_start@@Base+0x794c>
   1c600:	b	1c754 <_start@@Base+0x7940>
   1c604:	b	1c748 <_start@@Base+0x7934>
   1c608:	b	1c73c <_start@@Base+0x7928>
   1c60c:	b	1c730 <_start@@Base+0x791c>
   1c610:	b	1c724 <_start@@Base+0x7910>
   1c614:	b	1c718 <_start@@Base+0x7904>
   1c618:	b	1c670 <_start@@Base+0x785c>
   1c61c:	mov	r2, #0
   1c620:	mov	r3, #0
   1c624:	b	1c580 <_start@@Base+0x776c>
   1c628:	mov	r2, #0
   1c62c:	mov	r1, r2
   1c630:	b	1c5a4 <_start@@Base+0x7790>
   1c634:	mov	r2, #0
   1c638:	mov	r1, r2
   1c63c:	b	1c5ac <_start@@Base+0x7798>
   1c640:	mov	r2, #0
   1c644:	mov	r1, r2
   1c648:	b	1c5b4 <_start@@Base+0x77a0>
   1c64c:	mov	r2, #0
   1c650:	mov	r1, r2
   1c654:	b	1c594 <_start@@Base+0x7780>
   1c658:	mov	r2, #0
   1c65c:	mov	r1, r2
   1c660:	b	1c59c <_start@@Base+0x7788>
   1c664:	mov	r2, #0
   1c668:	mov	r1, r2
   1c66c:	b	1c58c <_start@@Base+0x7778>
   1c670:	ldrb	r2, [r0, #15]
   1c674:	mov	r3, #0
   1c678:	mov	sl, r3
   1c67c:	ldrb	r4, [r0, #14]
   1c680:	orr	r2, r2, r4, lsl #8
   1c684:	ldrb	r4, [r0, #13]
   1c688:	orr	r2, r2, r4, lsl #16
   1c68c:	ldrb	r4, [r0, #12]
   1c690:	mov	r8, sl
   1c694:	orr	r2, r2, r4, lsl #24
   1c698:	ldrb	sl, [r0, #11]
   1c69c:	orr	sl, r8, sl
   1c6a0:	ldrb	r8, [r0, #10]
   1c6a4:	orr	sl, sl, r8, lsl #8
   1c6a8:	ldrb	r8, [r0, #9]
   1c6ac:	orr	r8, sl, r8, lsl #16
   1c6b0:	str	r2, [sp, #80]	; 0x50
   1c6b4:	ldrb	r2, [r0, #8]
   1c6b8:	add	r5, pc, #752	; 0x2f0
   1c6bc:	ldrd	r4, [r5]
   1c6c0:	orr	r3, r8, r2, lsl #24
   1c6c4:	str	r3, [sp, #84]	; 0x54
   1c6c8:	ldrd	r2, [sp, #80]	; 0x50
   1c6cc:	cmp	r3, r5
   1c6d0:	cmpeq	r2, r4
   1c6d4:	bne	1c90c <_start@@Base+0x7af8>
   1c6d8:	add	r4, r0, #16
   1c6dc:	sub	r5, r6, r4
   1c6e0:	cmp	r5, #8
   1c6e4:	bhi	1c76c <_start@@Base+0x7958>
   1c6e8:	sub	r3, r5, #1
   1c6ec:	cmp	r3, #7
   1c6f0:	addls	pc, pc, r3, lsl #2
   1c6f4:	b	1d300 <_start@@Base+0x84ec>
   1c6f8:	b	1c8e4 <_start@@Base+0x7ad0>
   1c6fc:	b	1c89c <_start@@Base+0x7a88>
   1c700:	b	1c8d8 <_start@@Base+0x7ac4>
   1c704:	b	1c8cc <_start@@Base+0x7ab8>
   1c708:	b	1c8c0 <_start@@Base+0x7aac>
   1c70c:	b	1c8b4 <_start@@Base+0x7aa0>
   1c710:	b	1c8a8 <_start@@Base+0x7a94>
   1c714:	b	1c76c <_start@@Base+0x7958>
   1c718:	mov	r2, #0
   1c71c:	mov	r3, #0
   1c720:	b	1c678 <_start@@Base+0x7864>
   1c724:	mov	r2, #0
   1c728:	mov	sl, r2
   1c72c:	b	1c684 <_start@@Base+0x7870>
   1c730:	mov	r2, #0
   1c734:	mov	sl, r2
   1c738:	b	1c68c <_start@@Base+0x7878>
   1c73c:	mov	r2, #0
   1c740:	mov	r8, r2
   1c744:	b	1c698 <_start@@Base+0x7884>
   1c748:	mov	r2, #0
   1c74c:	mov	sl, r2
   1c750:	b	1c6a0 <_start@@Base+0x788c>
   1c754:	mov	r2, #0
   1c758:	mov	sl, r2
   1c75c:	b	1c6a8 <_start@@Base+0x7894>
   1c760:	mov	r2, #0
   1c764:	mov	r8, r2
   1c768:	b	1c6b0 <_start@@Base+0x789c>
   1c76c:	ldrb	r2, [r0, #23]
   1c770:	mov	r3, #0
   1c774:	mov	lr, r3
   1c778:	ldrb	r8, [r0, #22]
   1c77c:	orr	ip, r2, r8, lsl #8
   1c780:	ldrb	r8, [r0, #21]
   1c784:	orr	ip, ip, r8, lsl #16
   1c788:	ldrb	r8, [r0, #20]
   1c78c:	orr	ip, ip, r8, lsl #24
   1c790:	ldrb	sl, [r0, #19]
   1c794:	orr	lr, lr, sl
   1c798:	ldrb	sl, [r0, #18]
   1c79c:	orr	lr, lr, sl, lsl #8
   1c7a0:	lsr	r1, ip, #16
   1c7a4:	ldrb	r2, [r0, #17]
   1c7a8:	ldrb	r0, [r0, #16]
   1c7ac:	str	r1, [sp, #96]	; 0x60
   1c7b0:	ldr	r8, [sp, #96]	; 0x60
   1c7b4:	orr	lr, lr, r2, lsl #16
   1c7b8:	add	r3, pc, #504	; 0x1f8
   1c7bc:	ldrd	r2, [r3]
   1c7c0:	orr	r0, lr, r0, lsl #24
   1c7c4:	lsl	r8, r8, #16
   1c7c8:	str	r8, [sp, #96]	; 0x60
   1c7cc:	str	r0, [sp, #100]	; 0x64
   1c7d0:	ldrd	r8, [sp, #96]	; 0x60
   1c7d4:	cmp	r9, r3
   1c7d8:	cmpeq	r8, r2
   1c7dc:	beq	1d318 <_start@@Base+0x8504>
   1c7e0:	and	r1, ip, #-16777216	; 0xff000000
   1c7e4:	add	r3, pc, #468	; 0x1d4
   1c7e8:	ldrd	r2, [r3]
   1c7ec:	str	r1, [sp, #160]	; 0xa0
   1c7f0:	str	r0, [sp, #164]	; 0xa4
   1c7f4:	ldrd	r0, [sp, #160]	; 0xa0
   1c7f8:	cmp	r1, r3
   1c7fc:	cmpeq	r0, r2
   1c800:	bne	1ca9c <_start@@Base+0x7c88>
   1c804:	cmp	r5, #5
   1c808:	ble	1ca9c <_start@@Base+0x7c88>
   1c80c:	mov	r3, #5
   1c810:	mov	r2, r6
   1c814:	mov	r1, r4
   1c818:	mov	r0, r7
   1c81c:	bl	1a220 <_start@@Base+0x540c>
   1c820:	cmp	r4, r0
   1c824:	mov	r9, r0
   1c828:	beq	1ca9c <_start@@Base+0x7c88>
   1c82c:	mov	r1, #9
   1c830:	ldr	r0, [r7]
   1c834:	bl	26d60 <flatcc_builder_start_table@@Base>
   1c838:	cmp	r0, #0
   1c83c:	beq	1db9c <_start@@Base+0x8d88>
   1c840:	mov	r1, r9
   1c844:	mov	r3, #33	; 0x21
   1c848:	mov	r2, r6
   1c84c:	mov	r0, r7
   1c850:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c854:	mov	r5, r0
   1c858:	mov	r1, r5
   1c85c:	mov	r3, #33	; 0x21
   1c860:	mov	r2, r6
   1c864:	mov	r0, r7
   1c868:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c86c:	ldr	r3, [sp, #220]	; 0xdc
   1c870:	mov	r5, r0
   1c874:	cmp	r3, #0
   1c878:	beq	1da38 <_start@@Base+0x8c24>
   1c87c:	mov	r1, #0
   1c880:	ldr	r0, [r7]
   1c884:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1c888:	cmp	r0, #0
   1c88c:	beq	1da38 <_start@@Base+0x8c24>
   1c890:	ldr	r3, [sp, #220]	; 0xdc
   1c894:	str	r3, [r0]
   1c898:	b	1c238 <_start@@Base+0x7424>
   1c89c:	mov	ip, #0
   1c8a0:	mov	lr, ip
   1c8a4:	b	1c7a0 <_start@@Base+0x798c>
   1c8a8:	mov	r2, #0
   1c8ac:	mov	r3, #0
   1c8b0:	b	1c774 <_start@@Base+0x7960>
   1c8b4:	mov	ip, #0
   1c8b8:	mov	lr, ip
   1c8bc:	b	1c780 <_start@@Base+0x796c>
   1c8c0:	mov	ip, #0
   1c8c4:	mov	lr, ip
   1c8c8:	b	1c788 <_start@@Base+0x7974>
   1c8cc:	mov	ip, #0
   1c8d0:	mov	lr, ip
   1c8d4:	b	1c790 <_start@@Base+0x797c>
   1c8d8:	mov	ip, #0
   1c8dc:	mov	lr, ip
   1c8e0:	b	1c798 <_start@@Base+0x7984>
   1c8e4:	ldrb	r2, [r0, #16]
   1c8e8:	lsl	r3, r2, #24
   1c8ec:	str	r3, [sp, #100]	; 0x64
   1c8f0:	mov	r3, #0
   1c8f4:	str	r3, [sp, #96]	; 0x60
   1c8f8:	ldrd	r2, [sp, #96]	; 0x60
   1c8fc:	mov	ip, r2
   1c900:	mov	r0, r3
   1c904:	b	1c7e0 <_start@@Base+0x79cc>
   1c908:	mov	r1, r0
   1c90c:	mov	r2, r6
   1c910:	mov	r0, r7
   1c914:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1c918:	mov	r4, r0
   1c91c:	sub	r3, r6, r4
   1c920:	cmp	r3, #1
   1c924:	ble	1c938 <_start@@Base+0x7b24>
   1c928:	ldrb	r3, [r4]
   1c92c:	cmp	r3, #32
   1c930:	bhi	1c94c <_start@@Base+0x7b38>
   1c934:	beq	1ca38 <_start@@Base+0x7c24>
   1c938:	mov	r1, r4
   1c93c:	mov	r2, r6
   1c940:	mov	r0, r7
   1c944:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1c948:	mov	r4, r0
   1c94c:	cmp	r6, r4
   1c950:	beq	1ca08 <_start@@Base+0x7bf4>
   1c954:	ldrb	r3, [r4]
   1c958:	cmp	r3, #44	; 0x2c
   1c95c:	beq	1ca4c <_start@@Base+0x7c38>
   1c960:	mov	r3, #0
   1c964:	str	r3, [sp, #228]	; 0xe4
   1c968:	ldrb	r3, [r4]
   1c96c:	cmp	r3, #125	; 0x7d
   1c970:	beq	1c9d4 <_start@@Base+0x7bc0>
   1c974:	mov	r3, #10
   1c978:	mov	r1, r4
   1c97c:	mov	r2, r6
   1c980:	mov	r0, r7
   1c984:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c988:	ldr	r3, [sp, #228]	; 0xe4
   1c98c:	b	1c4ec <_start@@Base+0x76d8>
   1c990:	mov	r1, r0
   1c994:	mov	r3, #5
   1c998:	mov	r2, r6
   1c99c:	mov	r0, r7
   1c9a0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1c9a4:	b	1c50c <_start@@Base+0x76f8>
   1c9a8:	bvs	1cf8768 <__bss_end__@@Base+0x1ca439c>
   1c9ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c9b0:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1c9b4:	rsbsvc	r6, r2, r6, ror #10
   1c9b8:	ldrvs	r0, [r2, -r0]!
   1c9bc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1c9c0:	strvs	r0, [r0, -r0]
   1c9c4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1c9c8:	ldrvs	r0, [r3, -r0]!
   1c9cc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1c9d0:	andeq	r7, r3, r8, ror #10
   1c9d4:	add	r1, r4, #1
   1c9d8:	sub	r3, r6, r1
   1c9dc:	cmp	r3, #1
   1c9e0:	ble	1c9f4 <_start@@Base+0x7be0>
   1c9e4:	ldrb	r3, [r4, #1]
   1c9e8:	cmp	r3, #32
   1c9ec:	bhi	1da50 <_start@@Base+0x8c3c>
   1c9f0:	beq	1da84 <_start@@Base+0x8c70>
   1c9f4:	mov	r2, r6
   1c9f8:	mov	r0, r7
   1c9fc:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ca00:	ldr	r3, [sp, #228]	; 0xe4
   1ca04:	b	1c4ec <_start@@Base+0x76d8>
   1ca08:	mov	r3, #0
   1ca0c:	mov	r5, r4
   1ca10:	str	r3, [sp, #228]	; 0xe4
   1ca14:	ldr	r3, [r7, #20]
   1ca18:	cmp	r3, #0
   1ca1c:	bne	1c858 <_start@@Base+0x7a44>
   1ca20:	ldr	r0, [r7]
   1ca24:	bl	27744 <flatcc_builder_end_table@@Base>
   1ca28:	cmp	r0, #0
   1ca2c:	str	r0, [sp, #220]	; 0xdc
   1ca30:	bne	1c87c <_start@@Base+0x7a68>
   1ca34:	b	1c858 <_start@@Base+0x7a44>
   1ca38:	ldrb	r3, [r4, #1]
   1ca3c:	cmp	r3, #32
   1ca40:	addhi	r4, r4, #1
   1ca44:	bls	1c938 <_start@@Base+0x7b24>
   1ca48:	b	1c94c <_start@@Base+0x7b38>
   1ca4c:	add	r0, r4, #1
   1ca50:	sub	r3, r6, r0
   1ca54:	cmp	r3, #1
   1ca58:	ble	1ca6c <_start@@Base+0x7c58>
   1ca5c:	ldrb	r3, [r4, #1]
   1ca60:	cmp	r3, #32
   1ca64:	bhi	1ca7c <_start@@Base+0x7c68>
   1ca68:	beq	1e1ec <_start@@Base+0x93d8>
   1ca6c:	mov	r1, r0
   1ca70:	mov	r2, r6
   1ca74:	mov	r0, r7
   1ca78:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ca7c:	cmp	r6, r0
   1ca80:	beq	1e204 <_start@@Base+0x93f0>
   1ca84:	ldrb	r3, [r0]
   1ca88:	cmp	r3, #125	; 0x7d
   1ca8c:	beq	1e30c <_start@@Base+0x94f8>
   1ca90:	mov	r3, #1
   1ca94:	str	r3, [sp, #228]	; 0xe4
   1ca98:	b	1c4f4 <_start@@Base+0x76e0>
   1ca9c:	sub	r3, pc, #220	; 0xdc
   1caa0:	ldrd	r2, [r3]
   1caa4:	ldrd	r0, [sp, #96]	; 0x60
   1caa8:	cmp	r1, r3
   1caac:	cmpeq	r0, r2
   1cab0:	bne	1d300 <_start@@Base+0x84ec>
   1cab4:	cmp	r5, #6
   1cab8:	ble	1d300 <_start@@Base+0x84ec>
   1cabc:	mov	r3, #6
   1cac0:	mov	r2, r6
   1cac4:	mov	r1, r4
   1cac8:	mov	r0, r7
   1cacc:	bl	1a220 <_start@@Base+0x540c>
   1cad0:	cmp	r4, r0
   1cad4:	mov	r5, r0
   1cad8:	beq	1d300 <_start@@Base+0x84ec>
   1cadc:	mov	r1, #2
   1cae0:	ldr	r0, [r7]
   1cae4:	bl	26d60 <flatcc_builder_start_table@@Base>
   1cae8:	cmp	r0, #0
   1caec:	mov	r1, r5
   1caf0:	bne	1c844 <_start@@Base+0x7a30>
   1caf4:	add	r3, sp, #232	; 0xe8
   1caf8:	mov	r2, r6
   1cafc:	mov	r0, r7
   1cb00:	bl	18e0c <_start@@Base+0x3ff8>
   1cb04:	ldr	r3, [sp, #232]	; 0xe8
   1cb08:	cmp	r3, #0
   1cb0c:	beq	1e678 <_start@@Base+0x9864>
   1cb10:	ldr	r5, [pc, #-328]	; 1c9d0 <_start@@Base+0x7bbc>
   1cb14:	mov	r1, r0
   1cb18:	add	r5, pc, r5
   1cb1c:	add	r5, r5, #240	; 0xf0
   1cb20:	cmp	r6, r1
   1cb24:	beq	1cb38 <_start@@Base+0x7d24>
   1cb28:	ldrb	r3, [r1]
   1cb2c:	cmp	r3, #34	; 0x22
   1cb30:	addeq	r1, r1, #1
   1cb34:	bne	1cecc <_start@@Base+0x80b8>
   1cb38:	sub	r3, r6, r1
   1cb3c:	cmp	r3, #8
   1cb40:	bhi	1cb74 <_start@@Base+0x7d60>
   1cb44:	sub	r3, r3, #1
   1cb48:	cmp	r3, #7
   1cb4c:	addls	pc, pc, r3, lsl #2
   1cb50:	b	1cea0 <_start@@Base+0x808c>
   1cb54:	b	1cc5c <_start@@Base+0x7e48>
   1cb58:	b	1cc50 <_start@@Base+0x7e3c>
   1cb5c:	b	1cc44 <_start@@Base+0x7e30>
   1cb60:	b	1cc38 <_start@@Base+0x7e24>
   1cb64:	b	1cc2c <_start@@Base+0x7e18>
   1cb68:	b	1cc20 <_start@@Base+0x7e0c>
   1cb6c:	b	1cc14 <_start@@Base+0x7e00>
   1cb70:	b	1cb74 <_start@@Base+0x7d60>
   1cb74:	ldrb	sl, [r1, #7]
   1cb78:	mov	fp, #0
   1cb7c:	mov	r3, fp
   1cb80:	ldrb	r8, [r1, #6]
   1cb84:	orr	r2, sl, r8, lsl #8
   1cb88:	ldrb	r8, [r1, #5]
   1cb8c:	orr	r2, r2, r8, lsl #16
   1cb90:	ldrb	r8, [r1, #4]
   1cb94:	orr	r2, r2, r8, lsl #24
   1cb98:	ldrb	sl, [r1, #3]
   1cb9c:	orr	r3, r3, sl
   1cba0:	ldrb	sl, [r1, #2]
   1cba4:	orr	r3, r3, sl, lsl #8
   1cba8:	ldrb	sl, [r1, #1]
   1cbac:	orr	sl, r3, sl, lsl #16
   1cbb0:	str	r2, [sp, #72]	; 0x48
   1cbb4:	ldrb	r2, [r1]
   1cbb8:	add	r9, pc, #920	; 0x398
   1cbbc:	ldrd	r8, [r9]
   1cbc0:	orr	r3, sl, r2, lsl #24
   1cbc4:	str	r3, [sp, #76]	; 0x4c
   1cbc8:	ldrd	r2, [sp, #72]	; 0x48
   1cbcc:	cmp	r3, r9
   1cbd0:	cmpeq	r2, r8
   1cbd4:	bne	1cea0 <_start@@Base+0x808c>
   1cbd8:	add	r4, r1, #8
   1cbdc:	sub	r0, r6, r4
   1cbe0:	cmp	r0, #8
   1cbe4:	bhi	1cc68 <_start@@Base+0x7e54>
   1cbe8:	sub	r3, r0, #2
   1cbec:	cmp	r3, #6
   1cbf0:	addls	pc, pc, r3, lsl #2
   1cbf4:	b	1ceb4 <_start@@Base+0x80a0>
   1cbf8:	b	1ce80 <_start@@Base+0x806c>
   1cbfc:	b	1ce74 <_start@@Base+0x8060>
   1cc00:	b	1ce68 <_start@@Base+0x8054>
   1cc04:	b	1ce5c <_start@@Base+0x8048>
   1cc08:	b	1ce50 <_start@@Base+0x803c>
   1cc0c:	b	1ce44 <_start@@Base+0x8030>
   1cc10:	b	1cc68 <_start@@Base+0x7e54>
   1cc14:	mov	sl, #0
   1cc18:	mov	fp, #0
   1cc1c:	b	1cb7c <_start@@Base+0x7d68>
   1cc20:	mov	r2, #0
   1cc24:	mov	r3, r2
   1cc28:	b	1cb88 <_start@@Base+0x7d74>
   1cc2c:	mov	r2, #0
   1cc30:	mov	r3, r2
   1cc34:	b	1cb90 <_start@@Base+0x7d7c>
   1cc38:	mov	r2, #0
   1cc3c:	mov	r3, r2
   1cc40:	b	1cb98 <_start@@Base+0x7d84>
   1cc44:	mov	r2, #0
   1cc48:	mov	r3, r2
   1cc4c:	b	1cba0 <_start@@Base+0x7d8c>
   1cc50:	mov	r2, #0
   1cc54:	mov	r3, r2
   1cc58:	b	1cba8 <_start@@Base+0x7d94>
   1cc5c:	mov	r2, #0
   1cc60:	mov	sl, r2
   1cc64:	b	1cbb0 <_start@@Base+0x7d9c>
   1cc68:	ldrb	r2, [r1, #15]
   1cc6c:	mov	r3, #0
   1cc70:	mov	ip, r3
   1cc74:	ldrb	sl, [r1, #14]
   1cc78:	orr	r2, r2, sl, lsl #8
   1cc7c:	ldrb	sl, [r1, #13]
   1cc80:	orr	r2, r2, sl, lsl #16
   1cc84:	ldrb	sl, [r1, #12]
   1cc88:	orr	sl, r2, sl, lsl #24
   1cc8c:	ldrb	r8, [r1, #11]
   1cc90:	orr	ip, ip, r8
   1cc94:	ldrb	r2, [r1, #8]
   1cc98:	str	sl, [sp, #48]	; 0x30
   1cc9c:	ldrb	r8, [r1, #10]
   1cca0:	lsl	lr, r2, #24
   1cca4:	ldrb	r2, [r1, #9]
   1cca8:	orr	r8, ip, r8, lsl #8
   1ccac:	orr	r2, lr, r2, lsl #16
   1ccb0:	orr	r3, r2, r8
   1ccb4:	add	r9, pc, #676	; 0x2a4
   1ccb8:	ldrd	r8, [r9]
   1ccbc:	str	r3, [sp, #52]	; 0x34
   1ccc0:	ldrd	r2, [sp, #48]	; 0x30
   1ccc4:	cmp	r3, r9
   1ccc8:	cmpeq	r2, r8
   1cccc:	beq	1d0cc <_start@@Base+0x82b8>
   1ccd0:	ldrd	r2, [sp, #48]	; 0x30
   1ccd4:	add	r9, pc, #652	; 0x28c
   1ccd8:	ldrd	r8, [r9]
   1ccdc:	bic	r1, r2, #255	; 0xff
   1cce0:	str	r1, [sp, #112]	; 0x70
   1cce4:	str	r3, [sp, #116]	; 0x74
   1cce8:	ldrd	r2, [sp, #112]	; 0x70
   1ccec:	cmp	r3, r9
   1ccf0:	cmpeq	r2, r8
   1ccf4:	bne	1ceb4 <_start@@Base+0x80a0>
   1ccf8:	cmp	r0, #7
   1ccfc:	ble	1ceb4 <_start@@Base+0x80a0>
   1cd00:	mov	r3, #7
   1cd04:	mov	r2, r6
   1cd08:	mov	r1, r4
   1cd0c:	mov	r0, r7
   1cd10:	bl	1a220 <_start@@Base+0x540c>
   1cd14:	cmp	r4, r0
   1cd18:	mov	r8, r0
   1cd1c:	beq	1ceb4 <_start@@Base+0x80a0>
   1cd20:	mov	r2, #0
   1cd24:	mov	r3, #0
   1cd28:	mov	r1, #0
   1cd2c:	cmp	r6, r0
   1cd30:	str	r1, [sp, #236]	; 0xec
   1cd34:	strd	r2, [sp, #240]	; 0xf0
   1cd38:	strd	r2, [sp, #248]	; 0xf8
   1cd3c:	beq	1da98 <_start@@Base+0x8c84>
   1cd40:	mov	r1, r0
   1cd44:	add	r0, sp, #248	; 0xf8
   1cd48:	add	r3, sp, #236	; 0xec
   1cd4c:	mov	r2, r6
   1cd50:	str	r0, [sp]
   1cd54:	mov	r0, r7
   1cd58:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1cd5c:	cmp	r8, r0
   1cd60:	mov	r4, r0
   1cd64:	bne	1db70 <_start@@Base+0x8d5c>
   1cd68:	add	r0, sp, #240	; 0xf0
   1cd6c:	mov	r3, r5
   1cd70:	mov	r2, r6
   1cd74:	mov	r1, r4
   1cd78:	str	r0, [sp]
   1cd7c:	mov	r0, r7
   1cd80:	bl	18c00 <_start@@Base+0x3dec>
   1cd84:	cmp	r6, r0
   1cd88:	cmpne	r0, r4
   1cd8c:	beq	1e668 <_start@@Base+0x9854>
   1cd90:	ldrd	r2, [sp, #240]	; 0xf0
   1cd94:	mov	r4, r0
   1cd98:	orrs	r3, r2, r3
   1cd9c:	bne	1cdac <_start@@Base+0x7f98>
   1cda0:	ldr	r3, [r7, #8]
   1cda4:	tst	r3, #2
   1cda8:	beq	1cdd0 <_start@@Base+0x7fbc>
   1cdac:	mov	r3, #8
   1cdb0:	mov	r1, #0
   1cdb4:	ldr	r0, [r7]
   1cdb8:	mov	r2, r3
   1cdbc:	bl	28894 <flatcc_builder_table_add@@Base>
   1cdc0:	cmp	r0, #0
   1cdc4:	beq	1d0c0 <_start@@Base+0x82ac>
   1cdc8:	ldrd	r2, [sp, #240]	; 0xf0
   1cdcc:	strd	r2, [r0]
   1cdd0:	sub	r3, r6, r4
   1cdd4:	cmp	r3, #1
   1cdd8:	ble	1cdec <_start@@Base+0x7fd8>
   1cddc:	ldrb	r3, [r4]
   1cde0:	cmp	r3, #32
   1cde4:	bhi	1ce00 <_start@@Base+0x7fec>
   1cde8:	beq	1d29c <_start@@Base+0x8488>
   1cdec:	mov	r1, r4
   1cdf0:	mov	r2, r6
   1cdf4:	mov	r0, r7
   1cdf8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1cdfc:	mov	r4, r0
   1ce00:	cmp	r6, r4
   1ce04:	beq	1cf18 <_start@@Base+0x8104>
   1ce08:	ldrb	r3, [r4]
   1ce0c:	cmp	r3, #44	; 0x2c
   1ce10:	beq	1d2b0 <_start@@Base+0x849c>
   1ce14:	mov	r3, #0
   1ce18:	str	r3, [sp, #232]	; 0xe8
   1ce1c:	ldrb	r3, [r4]
   1ce20:	cmp	r3, #125	; 0x7d
   1ce24:	beq	1cee4 <_start@@Base+0x80d0>
   1ce28:	mov	r3, #10
   1ce2c:	mov	r1, r4
   1ce30:	mov	r2, r6
   1ce34:	mov	r0, r7
   1ce38:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ce3c:	ldr	r3, [sp, #232]	; 0xe8
   1ce40:	b	1cb08 <_start@@Base+0x7cf4>
   1ce44:	mov	r2, #0
   1ce48:	mov	r3, #0
   1ce4c:	b	1cc70 <_start@@Base+0x7e5c>
   1ce50:	mov	r2, #0
   1ce54:	mov	ip, r2
   1ce58:	b	1cc7c <_start@@Base+0x7e68>
   1ce5c:	mov	r2, #0
   1ce60:	mov	ip, r2
   1ce64:	b	1cc84 <_start@@Base+0x7e70>
   1ce68:	mov	sl, #0
   1ce6c:	mov	ip, sl
   1ce70:	b	1cc8c <_start@@Base+0x7e78>
   1ce74:	mov	sl, #0
   1ce78:	mov	ip, sl
   1ce7c:	b	1cc94 <_start@@Base+0x7e80>
   1ce80:	ldrb	r2, [r1, #9]
   1ce84:	mov	ip, #0
   1ce88:	ldrb	r8, [r1, #8]
   1ce8c:	str	ip, [sp, #48]	; 0x30
   1ce90:	lsl	r2, r2, #16
   1ce94:	orr	r3, r2, r8, lsl #24
   1ce98:	str	r3, [sp, #52]	; 0x34
   1ce9c:	b	1ccd0 <_start@@Base+0x7ebc>
   1cea0:	mov	r2, r6
   1cea4:	mov	r0, r7
   1cea8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1ceac:	mov	r4, r0
   1ceb0:	b	1cdd0 <_start@@Base+0x7fbc>
   1ceb4:	mov	r1, r4
   1ceb8:	mov	r2, r6
   1cebc:	mov	r0, r7
   1cec0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1cec4:	mov	r4, r0
   1cec8:	b	1cdd0 <_start@@Base+0x7fbc>
   1cecc:	mov	r3, #5
   1ced0:	mov	r2, r6
   1ced4:	mov	r0, r7
   1ced8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1cedc:	mov	r1, r0
   1cee0:	b	1cb38 <_start@@Base+0x7d24>
   1cee4:	add	r1, r4, #1
   1cee8:	sub	r3, r6, r1
   1ceec:	cmp	r3, #1
   1cef0:	ble	1cf04 <_start@@Base+0x80f0>
   1cef4:	ldrb	r3, [r4, #1]
   1cef8:	cmp	r3, #32
   1cefc:	bhi	1da58 <_start@@Base+0x8c44>
   1cf00:	beq	1daa0 <_start@@Base+0x8c8c>
   1cf04:	mov	r2, r6
   1cf08:	mov	r0, r7
   1cf0c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1cf10:	ldr	r3, [sp, #232]	; 0xe8
   1cf14:	b	1cb08 <_start@@Base+0x7cf4>
   1cf18:	mov	r3, #0
   1cf1c:	str	r3, [sp, #232]	; 0xe8
   1cf20:	ldr	r3, [r7, #20]
   1cf24:	cmp	r3, #0
   1cf28:	bne	1d0c0 <_start@@Base+0x82ac>
   1cf2c:	ldr	r0, [r7]
   1cf30:	bl	27744 <flatcc_builder_end_table@@Base>
   1cf34:	subs	r5, r0, #0
   1cf38:	beq	1d0c0 <_start@@Base+0x82ac>
   1cf3c:	mov	r1, #2
   1cf40:	ldr	r0, [r7]
   1cf44:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1cf48:	cmp	r0, #0
   1cf4c:	beq	1d790 <_start@@Base+0x897c>
   1cf50:	str	r5, [r0]
   1cf54:	b	1c91c <_start@@Base+0x7b08>
   1cf58:	svcpl	0x00626262
   1cf5c:	cmnvs	r1, r1, ror #2
   1cf60:	cmnvs	r2, pc, asr r4
   1cf64:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1cf68:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1cf6c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1cf70:	teqcc	r2, r4, lsr r3
   1cf74:	cmnvs	r1, r1, ror #2
   1cf78:	movwvc	r0, #0
   1cf7c:	cmnvc	r4, #112, 10	; 0x1c000000
   1cf80:	andeq	r6, r3, r4, lsl #26
   1cf84:	andeq	r6, r3, r8, lsl #29
   1cf88:	ldrb	r2, [r4, #7]
   1cf8c:	mov	r3, #0
   1cf90:	mov	lr, r3
   1cf94:	ldrb	r8, [r4, #6]
   1cf98:	orr	r2, r2, r8, lsl #8
   1cf9c:	ldrb	r8, [r4, #5]
   1cfa0:	orr	r2, r2, r8, lsl #16
   1cfa4:	ldrb	r8, [r4, #4]
   1cfa8:	orr	r8, r2, r8, lsl #24
   1cfac:	ldrb	r0, [r4, #3]
   1cfb0:	orr	lr, lr, r0
   1cfb4:	ldrb	r2, [r4]
   1cfb8:	mov	r5, #0
   1cfbc:	str	r8, [sp, #24]
   1cfc0:	ldrb	r0, [r4, #2]
   1cfc4:	lsl	r8, r2, #24
   1cfc8:	ldrb	r2, [r4, #1]
   1cfcc:	orr	r0, lr, r0, lsl #8
   1cfd0:	orr	r2, r8, r2, lsl #16
   1cfd4:	orr	r3, r2, r0
   1cfd8:	str	r3, [sp, #28]
   1cfdc:	ldrd	r2, [sp, #24]
   1cfe0:	cmp	r3, fp
   1cfe4:	cmpeq	r2, sl
   1cfe8:	bhi	1dca0 <_start@@Base+0x8e8c>
   1cfec:	sub	r1, pc, #132	; 0x84
   1cff0:	ldrd	r0, [r1]
   1cff4:	cmp	r3, r1
   1cff8:	cmpeq	r2, r0
   1cffc:	beq	1dda0 <_start@@Base+0x8f8c>
   1d000:	ldr	r1, [sp, #28]
   1d004:	mov	r5, #0
   1d008:	movw	r3, #24929	; 0x6161
   1d00c:	movt	r3, #24929	; 0x6161
   1d010:	mov	r2, #0
   1d014:	str	r5, [sp, #120]	; 0x78
   1d018:	str	r1, [sp, #124]	; 0x7c
   1d01c:	ldrd	r0, [sp, #120]	; 0x78
   1d020:	cmp	r1, r3
   1d024:	cmpeq	r0, r2
   1d028:	bne	1df8c <_start@@Base+0x9178>
   1d02c:	cmp	ip, #4
   1d030:	ble	1dc20 <_start@@Base+0x8e0c>
   1d034:	mov	r1, r4
   1d038:	mov	r3, #4
   1d03c:	mov	r2, r6
   1d040:	mov	r0, r7
   1d044:	bl	1a220 <_start@@Base+0x540c>
   1d048:	cmp	r4, r0
   1d04c:	mov	r1, r0
   1d050:	beq	1dc20 <_start@@Base+0x8e0c>
   1d054:	add	r3, sp, #240	; 0xf0
   1d058:	mov	r2, r6
   1d05c:	mov	r0, r7
   1d060:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1d064:	ldr	r3, [sp, #240]	; 0xf0
   1d068:	mov	r4, r0
   1d06c:	cmp	r3, #0
   1d070:	beq	1d0c0 <_start@@Base+0x82ac>
   1d074:	mov	r1, r5
   1d078:	ldr	r0, [r7]
   1d07c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1d080:	cmp	r0, #0
   1d084:	beq	1d0c0 <_start@@Base+0x82ac>
   1d088:	ldr	r3, [sp, #240]	; 0xf0
   1d08c:	str	r3, [r0]
   1d090:	mov	r1, r4
   1d094:	mov	r2, r6
   1d098:	ldr	r3, [sp, #140]	; 0x8c
   1d09c:	mov	r0, r7
   1d0a0:	bl	1a2e0 <_start@@Base+0x54cc>
   1d0a4:	ldr	r3, [sp, #236]	; 0xec
   1d0a8:	mov	r4, r0
   1d0ac:	cmp	r3, #0
   1d0b0:	bne	1dbcc <_start@@Base+0x8db8>
   1d0b4:	ldr	r1, [r7, #20]
   1d0b8:	cmp	r1, #0
   1d0bc:	beq	1e450 <_start@@Base+0x963c>
   1d0c0:	mov	r5, r4
   1d0c4:	mov	r1, r5
   1d0c8:	b	1c844 <_start@@Base+0x7a30>
   1d0cc:	add	r4, r1, #16
   1d0d0:	sub	r0, r6, r4
   1d0d4:	cmp	r0, #8
   1d0d8:	bhi	1d108 <_start@@Base+0x82f4>
   1d0dc:	sub	r3, r0, #2
   1d0e0:	cmp	r3, #6
   1d0e4:	addls	pc, pc, r3, lsl #2
   1d0e8:	b	1ceb4 <_start@@Base+0x80a0>
   1d0ec:	b	1d284 <_start@@Base+0x8470>
   1d0f0:	b	1d278 <_start@@Base+0x8464>
   1d0f4:	b	1d26c <_start@@Base+0x8458>
   1d0f8:	b	1d260 <_start@@Base+0x844c>
   1d0fc:	b	1d254 <_start@@Base+0x8440>
   1d100:	b	1d290 <_start@@Base+0x847c>
   1d104:	b	1d108 <_start@@Base+0x82f4>
   1d108:	ldrb	sl, [r1, #23]
   1d10c:	mov	fp, #0
   1d110:	mov	r3, fp
   1d114:	ldrb	r8, [r1, #22]
   1d118:	orr	r2, sl, r8, lsl #8
   1d11c:	ldrb	r8, [r1, #21]
   1d120:	orr	r2, r2, r8, lsl #16
   1d124:	ldrb	r8, [r1, #20]
   1d128:	orr	r8, r2, r8, lsl #24
   1d12c:	ldrb	sl, [r1, #19]
   1d130:	orr	r3, r3, sl
   1d134:	ldrb	sl, [r1, #18]
   1d138:	orr	r3, r3, sl, lsl #8
   1d13c:	and	r2, r8, #-16777216	; 0xff000000
   1d140:	ldrb	sl, [r1, #17]
   1d144:	mov	r8, #0
   1d148:	str	r2, [sp, #168]	; 0xa8
   1d14c:	ldrb	r2, [r1, #16]
   1d150:	orr	sl, r3, sl, lsl #16
   1d154:	orr	r3, sl, r2, lsl #24
   1d158:	sub	fp, pc, #488	; 0x1e8
   1d15c:	ldrd	sl, [fp]
   1d160:	str	r3, [sp, #172]	; 0xac
   1d164:	ldrd	r2, [sp, #168]	; 0xa8
   1d168:	cmp	r3, fp
   1d16c:	cmpeq	r2, sl
   1d170:	bne	1ceb4 <_start@@Base+0x80a0>
   1d174:	cmp	r0, #5
   1d178:	ble	1ceb4 <_start@@Base+0x80a0>
   1d17c:	mov	r3, #5
   1d180:	mov	r2, r6
   1d184:	mov	r1, r4
   1d188:	mov	r0, r7
   1d18c:	bl	1a220 <_start@@Base+0x540c>
   1d190:	cmp	r4, r0
   1d194:	mov	r9, r0
   1d198:	beq	1ceb4 <_start@@Base+0x80a0>
   1d19c:	mov	r2, #0
   1d1a0:	mov	r3, #0
   1d1a4:	str	r8, [sp, #236]	; 0xec
   1d1a8:	cmp	r6, r0
   1d1ac:	str	r8, [sp, #240]	; 0xf0
   1d1b0:	strd	r2, [sp, #248]	; 0xf8
   1d1b4:	beq	1e2ac <_start@@Base+0x9498>
   1d1b8:	mov	r1, r0
   1d1bc:	add	r0, sp, #248	; 0xf8
   1d1c0:	add	r3, sp, #240	; 0xf0
   1d1c4:	mov	r2, r6
   1d1c8:	str	r0, [sp]
   1d1cc:	mov	r0, r7
   1d1d0:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1d1d4:	cmp	r9, r0
   1d1d8:	mov	r8, r0
   1d1dc:	bne	1e384 <_start@@Base+0x9570>
   1d1e0:	ldr	r3, [pc, #-612]	; 1cf84 <_start@@Base+0x8170>
   1d1e4:	add	ip, sp, #236	; 0xec
   1d1e8:	mov	r2, r6
   1d1ec:	mov	r1, r8
   1d1f0:	mov	r0, r7
   1d1f4:	str	ip, [sp]
   1d1f8:	add	r3, pc, r3
   1d1fc:	add	r3, r3, #228	; 0xe4
   1d200:	bl	19778 <_start@@Base+0x4964>
   1d204:	cmp	r6, r0
   1d208:	cmpne	r0, r8
   1d20c:	mov	r4, r0
   1d210:	beq	1d0c0 <_start@@Base+0x82ac>
   1d214:	ldr	r2, [sp, #236]	; 0xec
   1d218:	cmp	r2, #0
   1d21c:	bne	1d22c <_start@@Base+0x8418>
   1d220:	ldr	r3, [r7, #8]
   1d224:	tst	r3, #2
   1d228:	beq	1cdd0 <_start@@Base+0x7fbc>
   1d22c:	mov	r3, #4
   1d230:	mov	r1, #1
   1d234:	ldr	r0, [r7]
   1d238:	mov	r2, r3
   1d23c:	bl	28894 <flatcc_builder_table_add@@Base>
   1d240:	cmp	r0, #0
   1d244:	beq	1d0c0 <_start@@Base+0x82ac>
   1d248:	ldr	r3, [sp, #236]	; 0xec
   1d24c:	str	r3, [r0]
   1d250:	b	1cdd0 <_start@@Base+0x7fbc>
   1d254:	mov	r2, #0
   1d258:	mov	r3, r2
   1d25c:	b	1d11c <_start@@Base+0x8308>
   1d260:	mov	r2, #0
   1d264:	mov	r3, r2
   1d268:	b	1d124 <_start@@Base+0x8310>
   1d26c:	mov	r8, #0
   1d270:	mov	r3, r8
   1d274:	b	1d12c <_start@@Base+0x8318>
   1d278:	mov	r8, #0
   1d27c:	mov	r3, r8
   1d280:	b	1d134 <_start@@Base+0x8320>
   1d284:	mov	r8, #0
   1d288:	mov	r3, r8
   1d28c:	b	1d13c <_start@@Base+0x8328>
   1d290:	mov	sl, #0
   1d294:	mov	fp, #0
   1d298:	b	1d110 <_start@@Base+0x82fc>
   1d29c:	ldrb	r3, [r4, #1]
   1d2a0:	cmp	r3, #32
   1d2a4:	addhi	r4, r4, #1
   1d2a8:	bls	1cdec <_start@@Base+0x7fd8>
   1d2ac:	b	1ce00 <_start@@Base+0x7fec>
   1d2b0:	add	r1, r4, #1
   1d2b4:	sub	r3, r6, r1
   1d2b8:	cmp	r3, #1
   1d2bc:	ble	1d2d0 <_start@@Base+0x84bc>
   1d2c0:	ldrb	r3, [r4, #1]
   1d2c4:	cmp	r3, #32
   1d2c8:	bhi	1d2e0 <_start@@Base+0x84cc>
   1d2cc:	beq	1e234 <_start@@Base+0x9420>
   1d2d0:	mov	r2, r6
   1d2d4:	mov	r0, r7
   1d2d8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1d2dc:	mov	r1, r0
   1d2e0:	cmp	r6, r1
   1d2e4:	beq	1e24c <_start@@Base+0x9438>
   1d2e8:	ldrb	r3, [r1]
   1d2ec:	cmp	r3, #125	; 0x7d
   1d2f0:	beq	1e348 <_start@@Base+0x9534>
   1d2f4:	mov	r3, #1
   1d2f8:	str	r3, [sp, #232]	; 0xe8
   1d2fc:	b	1cb20 <_start@@Base+0x7d0c>
   1d300:	mov	r1, r4
   1d304:	mov	r2, r6
   1d308:	mov	r0, r7
   1d30c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1d310:	mov	r4, r0
   1d314:	b	1c91c <_start@@Base+0x7b08>
   1d318:	cmp	r5, #6
   1d31c:	ble	1d300 <_start@@Base+0x84ec>
   1d320:	mov	r3, #6
   1d324:	mov	r2, r6
   1d328:	mov	r1, r4
   1d32c:	mov	r0, r7
   1d330:	bl	1a220 <_start@@Base+0x540c>
   1d334:	cmp	r4, r0
   1d338:	mov	r5, r0
   1d33c:	beq	1d300 <_start@@Base+0x84ec>
   1d340:	mov	r1, #2
   1d344:	ldr	r0, [r7]
   1d348:	bl	26d60 <flatcc_builder_start_table@@Base>
   1d34c:	cmp	r0, #0
   1d350:	mov	r1, r5
   1d354:	bne	1c844 <_start@@Base+0x7a30>
   1d358:	add	r3, sp, #232	; 0xe8
   1d35c:	mov	r2, r6
   1d360:	mov	r0, r7
   1d364:	bl	18e0c <_start@@Base+0x3ff8>
   1d368:	ldr	r3, [sp, #232]	; 0xe8
   1d36c:	cmp	r3, #0
   1d370:	beq	1e670 <_start@@Base+0x985c>
   1d374:	ldr	r9, [pc, #-1020]	; 1cf80 <_start@@Base+0x816c>
   1d378:	mov	r1, r0
   1d37c:	add	r9, pc, r9
   1d380:	add	r9, r9, #144	; 0x90
   1d384:	cmp	r6, r1
   1d388:	beq	1d39c <_start@@Base+0x8588>
   1d38c:	ldrb	r3, [r1]
   1d390:	cmp	r3, #34	; 0x22
   1d394:	addeq	r1, r1, #1
   1d398:	bne	1d6f4 <_start@@Base+0x88e0>
   1d39c:	sub	r3, r6, r1
   1d3a0:	cmp	r3, #8
   1d3a4:	bhi	1d3d8 <_start@@Base+0x85c4>
   1d3a8:	sub	r3, r3, #1
   1d3ac:	cmp	r3, #7
   1d3b0:	addls	pc, pc, r3, lsl #2
   1d3b4:	b	1d6e0 <_start@@Base+0x88cc>
   1d3b8:	b	1d4b0 <_start@@Base+0x869c>
   1d3bc:	b	1d4a4 <_start@@Base+0x8690>
   1d3c0:	b	1d498 <_start@@Base+0x8684>
   1d3c4:	b	1d48c <_start@@Base+0x8678>
   1d3c8:	b	1d480 <_start@@Base+0x866c>
   1d3cc:	b	1d4bc <_start@@Base+0x86a8>
   1d3d0:	b	1d474 <_start@@Base+0x8660>
   1d3d4:	b	1d3d8 <_start@@Base+0x85c4>
   1d3d8:	ldrb	sl, [r1, #7]
   1d3dc:	mov	fp, #0
   1d3e0:	mov	r3, fp
   1d3e4:	ldrb	r4, [r1, #6]
   1d3e8:	orr	r2, sl, r4, lsl #8
   1d3ec:	ldrb	r4, [r1, #5]
   1d3f0:	orr	r2, r2, r4, lsl #16
   1d3f4:	ldrb	r4, [r1, #4]
   1d3f8:	orr	r2, r2, r4, lsl #24
   1d3fc:	ldrb	sl, [r1, #3]
   1d400:	orr	r3, r3, sl
   1d404:	ldrb	sl, [r1, #2]
   1d408:	orr	sl, r3, sl, lsl #8
   1d40c:	ldrb	r4, [r1, #1]
   1d410:	orr	sl, sl, r4, lsl #16
   1d414:	str	r2, [sp, #64]	; 0x40
   1d418:	ldrb	r2, [r1]
   1d41c:	add	r5, pc, #884	; 0x374
   1d420:	ldrd	r4, [r5]
   1d424:	orr	r3, sl, r2, lsl #24
   1d428:	str	r3, [sp, #68]	; 0x44
   1d42c:	ldrd	r2, [sp, #64]	; 0x40
   1d430:	cmp	r3, r5
   1d434:	cmpeq	r2, r4
   1d438:	bne	1d6e0 <_start@@Base+0x88cc>
   1d43c:	add	r8, r1, #8
   1d440:	sub	r0, r6, r8
   1d444:	cmp	r0, #8
   1d448:	bhi	1d4c8 <_start@@Base+0x86b4>
   1d44c:	sub	r3, r0, #3
   1d450:	cmp	r3, #5
   1d454:	addls	pc, pc, r3, lsl #2
   1d458:	b	1d70c <_start@@Base+0x88f8>
   1d45c:	b	1d6d4 <_start@@Base+0x88c0>
   1d460:	b	1d6a4 <_start@@Base+0x8890>
   1d464:	b	1d6b0 <_start@@Base+0x889c>
   1d468:	b	1d6bc <_start@@Base+0x88a8>
   1d46c:	b	1d6c8 <_start@@Base+0x88b4>
   1d470:	b	1d4c8 <_start@@Base+0x86b4>
   1d474:	mov	sl, #0
   1d478:	mov	fp, #0
   1d47c:	b	1d3e0 <_start@@Base+0x85cc>
   1d480:	mov	r2, #0
   1d484:	mov	r3, r2
   1d488:	b	1d3f4 <_start@@Base+0x85e0>
   1d48c:	mov	r2, #0
   1d490:	mov	r3, r2
   1d494:	b	1d3fc <_start@@Base+0x85e8>
   1d498:	mov	r2, #0
   1d49c:	mov	r3, r2
   1d4a0:	b	1d404 <_start@@Base+0x85f0>
   1d4a4:	mov	r2, #0
   1d4a8:	mov	sl, r2
   1d4ac:	b	1d40c <_start@@Base+0x85f8>
   1d4b0:	mov	r2, #0
   1d4b4:	mov	sl, r2
   1d4b8:	b	1d414 <_start@@Base+0x8600>
   1d4bc:	mov	r2, #0
   1d4c0:	mov	r3, r2
   1d4c4:	b	1d3ec <_start@@Base+0x85d8>
   1d4c8:	ldrb	r2, [r1, #15]
   1d4cc:	mov	r3, #0
   1d4d0:	mov	ip, r3
   1d4d4:	ldrb	r4, [r1, #14]
   1d4d8:	orr	r2, r2, r4, lsl #8
   1d4dc:	ldrb	r4, [r1, #13]
   1d4e0:	orr	r2, r2, r4, lsl #16
   1d4e4:	ldrb	r4, [r1, #12]
   1d4e8:	orr	r2, r2, r4, lsl #24
   1d4ec:	ldrb	sl, [r1, #11]
   1d4f0:	orr	ip, ip, sl
   1d4f4:	ldrb	r4, [r1, #8]
   1d4f8:	mov	r5, #0
   1d4fc:	str	r2, [sp, #40]	; 0x28
   1d500:	ldrb	sl, [r1, #10]
   1d504:	ldrb	r2, [r1, #9]
   1d508:	lsl	r4, r4, #24
   1d50c:	orr	sl, ip, sl, lsl #8
   1d510:	orr	r4, r4, r2, lsl #16
   1d514:	orr	r3, r4, sl
   1d518:	add	fp, pc, #640	; 0x280
   1d51c:	ldrd	sl, [fp]
   1d520:	str	r3, [sp, #44]	; 0x2c
   1d524:	ldrd	r2, [sp, #40]	; 0x28
   1d528:	bic	r1, r2, #255	; 0xff
   1d52c:	str	r1, [sp, #88]	; 0x58
   1d530:	str	r3, [sp, #92]	; 0x5c
   1d534:	ldrd	r2, [sp, #88]	; 0x58
   1d538:	cmp	r3, fp
   1d53c:	cmpeq	r2, sl
   1d540:	beq	1d7b4 <_start@@Base+0x89a0>
   1d544:	add	fp, pc, #604	; 0x25c
   1d548:	ldrd	sl, [fp]
   1d54c:	ldrd	r2, [sp, #40]	; 0x28
   1d550:	cmp	r3, fp
   1d554:	cmpeq	r2, sl
   1d558:	bne	1d70c <_start@@Base+0x88f8>
   1d55c:	cmp	r0, #8
   1d560:	ble	1d70c <_start@@Base+0x88f8>
   1d564:	mov	r3, #8
   1d568:	mov	r2, r6
   1d56c:	mov	r1, r8
   1d570:	mov	r0, r7
   1d574:	bl	1a220 <_start@@Base+0x540c>
   1d578:	cmp	r8, r0
   1d57c:	mov	sl, r0
   1d580:	beq	1d70c <_start@@Base+0x88f8>
   1d584:	mov	r2, #0
   1d588:	mov	r3, #0
   1d58c:	str	r5, [sp, #236]	; 0xec
   1d590:	cmp	r6, r0
   1d594:	str	r5, [sp, #240]	; 0xf0
   1d598:	strd	r2, [sp, #248]	; 0xf8
   1d59c:	beq	1da68 <_start@@Base+0x8c54>
   1d5a0:	mov	r1, r0
   1d5a4:	add	r0, sp, #248	; 0xf8
   1d5a8:	add	r3, sp, #240	; 0xf0
   1d5ac:	mov	r2, r6
   1d5b0:	str	r0, [sp]
   1d5b4:	mov	r0, r7
   1d5b8:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1d5bc:	cmp	sl, r0
   1d5c0:	mov	r5, r0
   1d5c4:	bne	1dae0 <_start@@Base+0x8ccc>
   1d5c8:	add	r0, sp, #236	; 0xec
   1d5cc:	mov	r3, r9
   1d5d0:	mov	r2, r6
   1d5d4:	mov	r1, r5
   1d5d8:	str	r0, [sp]
   1d5dc:	mov	r0, r7
   1d5e0:	bl	19778 <_start@@Base+0x4964>
   1d5e4:	cmp	r6, r0
   1d5e8:	cmpne	r0, r5
   1d5ec:	mov	r4, r0
   1d5f0:	beq	1d0c0 <_start@@Base+0x82ac>
   1d5f4:	ldr	r2, [sp, #236]	; 0xec
   1d5f8:	cmp	r2, #0
   1d5fc:	bne	1d60c <_start@@Base+0x87f8>
   1d600:	ldr	r3, [r7, #8]
   1d604:	tst	r3, #2
   1d608:	beq	1d630 <_start@@Base+0x881c>
   1d60c:	mov	r3, #4
   1d610:	mov	r1, #1
   1d614:	ldr	r0, [r7]
   1d618:	mov	r2, r3
   1d61c:	bl	28894 <flatcc_builder_table_add@@Base>
   1d620:	cmp	r0, #0
   1d624:	beq	1d0c0 <_start@@Base+0x82ac>
   1d628:	ldr	r3, [sp, #236]	; 0xec
   1d62c:	str	r3, [r0]
   1d630:	sub	r3, r6, r4
   1d634:	cmp	r3, #1
   1d638:	ble	1d64c <_start@@Base+0x8838>
   1d63c:	ldrb	r3, [r4]
   1d640:	cmp	r3, #32
   1d644:	bhi	1d660 <_start@@Base+0x884c>
   1d648:	beq	1d894 <_start@@Base+0x8a80>
   1d64c:	mov	r1, r4
   1d650:	mov	r2, r6
   1d654:	mov	r0, r7
   1d658:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1d65c:	mov	r4, r0
   1d660:	cmp	r6, r4
   1d664:	beq	1d758 <_start@@Base+0x8944>
   1d668:	ldrb	r3, [r4]
   1d66c:	cmp	r3, #44	; 0x2c
   1d670:	beq	1d8a8 <_start@@Base+0x8a94>
   1d674:	mov	r3, #0
   1d678:	str	r3, [sp, #232]	; 0xe8
   1d67c:	ldrb	r3, [r4]
   1d680:	cmp	r3, #125	; 0x7d
   1d684:	beq	1d724 <_start@@Base+0x8910>
   1d688:	mov	r3, #10
   1d68c:	mov	r1, r4
   1d690:	mov	r2, r6
   1d694:	mov	r0, r7
   1d698:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1d69c:	ldr	r3, [sp, #232]	; 0xe8
   1d6a0:	b	1d36c <_start@@Base+0x8558>
   1d6a4:	mov	r2, #0
   1d6a8:	mov	ip, r2
   1d6ac:	b	1d4ec <_start@@Base+0x86d8>
   1d6b0:	mov	r2, #0
   1d6b4:	mov	ip, r2
   1d6b8:	b	1d4e4 <_start@@Base+0x86d0>
   1d6bc:	mov	r2, #0
   1d6c0:	mov	ip, r2
   1d6c4:	b	1d4dc <_start@@Base+0x86c8>
   1d6c8:	mov	r2, #0
   1d6cc:	mov	r3, #0
   1d6d0:	b	1d4d0 <_start@@Base+0x86bc>
   1d6d4:	mov	r2, #0
   1d6d8:	mov	ip, r2
   1d6dc:	b	1d4f4 <_start@@Base+0x86e0>
   1d6e0:	mov	r2, r6
   1d6e4:	mov	r0, r7
   1d6e8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1d6ec:	mov	r4, r0
   1d6f0:	b	1d630 <_start@@Base+0x881c>
   1d6f4:	mov	r3, #5
   1d6f8:	mov	r2, r6
   1d6fc:	mov	r0, r7
   1d700:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1d704:	mov	r1, r0
   1d708:	b	1d39c <_start@@Base+0x8588>
   1d70c:	mov	r1, r8
   1d710:	mov	r2, r6
   1d714:	mov	r0, r7
   1d718:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1d71c:	mov	r4, r0
   1d720:	b	1d630 <_start@@Base+0x881c>
   1d724:	add	r1, r4, #1
   1d728:	sub	r3, r6, r1
   1d72c:	cmp	r3, #1
   1d730:	ble	1d744 <_start@@Base+0x8930>
   1d734:	ldrb	r3, [r4, #1]
   1d738:	cmp	r3, #32
   1d73c:	bhi	1da48 <_start@@Base+0x8c34>
   1d740:	beq	1da70 <_start@@Base+0x8c5c>
   1d744:	mov	r2, r6
   1d748:	mov	r0, r7
   1d74c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1d750:	ldr	r3, [sp, #232]	; 0xe8
   1d754:	b	1d36c <_start@@Base+0x8558>
   1d758:	mov	r3, #0
   1d75c:	str	r3, [sp, #232]	; 0xe8
   1d760:	ldr	r3, [r7, #20]
   1d764:	cmp	r3, #0
   1d768:	bne	1d0c0 <_start@@Base+0x82ac>
   1d76c:	ldr	r0, [r7]
   1d770:	bl	27744 <flatcc_builder_end_table@@Base>
   1d774:	subs	r5, r0, #0
   1d778:	beq	1d0c0 <_start@@Base+0x82ac>
   1d77c:	mov	r1, #1
   1d780:	ldr	r0, [r7]
   1d784:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1d788:	cmp	r0, #0
   1d78c:	bne	1cf50 <_start@@Base+0x813c>
   1d790:	mov	r5, r4
   1d794:	b	1c858 <_start@@Base+0x7a44>
   1d798:	svcpl	0x00626262
   1d79c:	cmnvs	r1, r1, ror #2
   1d7a0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1d7a4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1d7a8:	cmnvs	r2, pc, asr r4
   1d7ac:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1d7b0:	andeq	r6, r3, r8, asr #16
   1d7b4:	cmp	r0, #7
   1d7b8:	ble	1d70c <_start@@Base+0x88f8>
   1d7bc:	mov	r3, #7
   1d7c0:	mov	r2, r6
   1d7c4:	mov	r1, r8
   1d7c8:	mov	r0, r7
   1d7cc:	bl	1a220 <_start@@Base+0x540c>
   1d7d0:	cmp	r8, r0
   1d7d4:	mov	sl, r0
   1d7d8:	beq	1d70c <_start@@Base+0x88f8>
   1d7dc:	mov	r2, #0
   1d7e0:	mov	r3, #0
   1d7e4:	str	r5, [sp, #236]	; 0xec
   1d7e8:	cmp	r6, r0
   1d7ec:	strd	r2, [sp, #240]	; 0xf0
   1d7f0:	strd	r2, [sp, #248]	; 0xf8
   1d7f4:	beq	1da60 <_start@@Base+0x8c4c>
   1d7f8:	mov	r1, r0
   1d7fc:	add	r0, sp, #248	; 0xf8
   1d800:	add	r3, sp, #236	; 0xec
   1d804:	mov	r2, r6
   1d808:	str	r0, [sp]
   1d80c:	mov	r0, r7
   1d810:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1d814:	cmp	sl, r0
   1d818:	mov	r4, r0
   1d81c:	bne	1dab4 <_start@@Base+0x8ca0>
   1d820:	ldr	r3, [pc, #-120]	; 1d7b0 <_start@@Base+0x899c>
   1d824:	add	ip, sp, #240	; 0xf0
   1d828:	mov	r2, r6
   1d82c:	mov	r1, r4
   1d830:	mov	r0, r7
   1d834:	str	ip, [sp]
   1d838:	add	r3, pc, r3
   1d83c:	add	r3, r3, #132	; 0x84
   1d840:	bl	18c00 <_start@@Base+0x3dec>
   1d844:	cmp	r6, r0
   1d848:	cmpne	r0, r4
   1d84c:	beq	1e668 <_start@@Base+0x9854>
   1d850:	ldrd	r2, [sp, #240]	; 0xf0
   1d854:	mov	r4, r0
   1d858:	orrs	r3, r2, r3
   1d85c:	bne	1d86c <_start@@Base+0x8a58>
   1d860:	ldr	r3, [r7, #8]
   1d864:	tst	r3, #2
   1d868:	beq	1d630 <_start@@Base+0x881c>
   1d86c:	mov	r3, #8
   1d870:	mov	r1, #0
   1d874:	ldr	r0, [r7]
   1d878:	mov	r2, r3
   1d87c:	bl	28894 <flatcc_builder_table_add@@Base>
   1d880:	cmp	r0, #0
   1d884:	beq	1d0c0 <_start@@Base+0x82ac>
   1d888:	ldrd	r2, [sp, #240]	; 0xf0
   1d88c:	strd	r2, [r0]
   1d890:	b	1d630 <_start@@Base+0x881c>
   1d894:	ldrb	r3, [r4, #1]
   1d898:	cmp	r3, #32
   1d89c:	addhi	r4, r4, #1
   1d8a0:	bls	1d64c <_start@@Base+0x8838>
   1d8a4:	b	1d660 <_start@@Base+0x884c>
   1d8a8:	add	r1, r4, #1
   1d8ac:	sub	r3, r6, r1
   1d8b0:	cmp	r3, #1
   1d8b4:	ble	1d8c8 <_start@@Base+0x8ab4>
   1d8b8:	ldrb	r3, [r4, #1]
   1d8bc:	cmp	r3, #32
   1d8c0:	bhi	1d8d8 <_start@@Base+0x8ac4>
   1d8c4:	beq	1db34 <_start@@Base+0x8d20>
   1d8c8:	mov	r2, r6
   1d8cc:	mov	r0, r7
   1d8d0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1d8d4:	mov	r1, r0
   1d8d8:	cmp	r6, r1
   1d8dc:	beq	1db4c <_start@@Base+0x8d38>
   1d8e0:	ldrb	r3, [r1]
   1d8e4:	cmp	r3, #125	; 0x7d
   1d8e8:	beq	1e270 <_start@@Base+0x945c>
   1d8ec:	mov	r3, #1
   1d8f0:	str	r3, [sp, #232]	; 0xe8
   1d8f4:	b	1d384 <_start@@Base+0x8570>
   1d8f8:	mov	r3, r6
   1d8fc:	mov	r6, r5
   1d900:	mov	r5, r3
   1d904:	mov	r3, #0
   1d908:	str	r3, [sp, #216]	; 0xd8
   1d90c:	ldr	r3, [r7, #20]
   1d910:	cmp	r3, #0
   1d914:	bne	1c0a8 <_start@@Base+0x7294>
   1d918:	mov	r1, r6
   1d91c:	mov	r2, r5
   1d920:	ldr	r3, [sp, #224]	; 0xe0
   1d924:	mov	r0, r7
   1d928:	bl	2ed2c <flatcc_json_parser_finalize_unions@@Base>
   1d92c:	mov	sl, r0
   1d930:	ldr	r0, [r7]
   1d934:	bl	27744 <flatcc_builder_end_table@@Base>
   1d938:	ldr	r3, [sp, #212]	; 0xd4
   1d93c:	cmp	r0, #0
   1d940:	moveq	r6, sl
   1d944:	str	r0, [r3]
   1d948:	bne	1c0c0 <_start@@Base+0x72ac>
   1d94c:	b	1c0a8 <_start@@Base+0x7294>
   1d950:	ldrb	r3, [r5, #1]
   1d954:	cmp	r3, #32
   1d958:	addhi	r5, r5, #1
   1d95c:	bls	1c254 <_start@@Base+0x7440>
   1d960:	b	1c268 <_start@@Base+0x7454>
   1d964:	add	r1, r5, #1
   1d968:	sub	r3, r6, r1
   1d96c:	cmp	r3, #1
   1d970:	ble	1d984 <_start@@Base+0x8b70>
   1d974:	ldrb	r3, [r5, #1]
   1d978:	cmp	r3, #32
   1d97c:	bhi	1d994 <_start@@Base+0x8b80>
   1d980:	beq	1e404 <_start@@Base+0x95f0>
   1d984:	mov	r2, r6
   1d988:	mov	r0, r7
   1d98c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1d990:	mov	r1, r0
   1d994:	cmp	r6, r1
   1d998:	beq	1e510 <_start@@Base+0x96fc>
   1d99c:	ldrb	r3, [r1]
   1d9a0:	cmp	r3, #125	; 0x7d
   1d9a4:	beq	1e4b8 <_start@@Base+0x96a4>
   1d9a8:	mov	r3, #1
   1d9ac:	str	r3, [sp, #216]	; 0xd8
   1d9b0:	b	1c12c <_start@@Base+0x7318>
   1d9b4:	ldrd	r0, [sp, #32]
   1d9b8:	add	r3, pc, #928	; 0x3a0
   1d9bc:	ldrd	r2, [r3]
   1d9c0:	and	lr, r0, #-16777216	; 0xff000000
   1d9c4:	str	lr, [sp, #184]	; 0xb8
   1d9c8:	str	r1, [sp, #188]	; 0xbc
   1d9cc:	ldrd	r0, [sp, #184]	; 0xb8
   1d9d0:	cmp	r1, r3
   1d9d4:	cmpeq	r0, r2
   1d9d8:	bne	1c2c0 <_start@@Base+0x74ac>
   1d9dc:	cmp	ip, #5
   1d9e0:	ble	1c2c0 <_start@@Base+0x74ac>
   1d9e4:	mov	r1, r4
   1d9e8:	mov	r3, #5
   1d9ec:	mov	r2, r6
   1d9f0:	mov	r0, r7
   1d9f4:	bl	1a220 <_start@@Base+0x540c>
   1d9f8:	cmp	r4, r0
   1d9fc:	mov	r1, r0
   1da00:	beq	1c2c0 <_start@@Base+0x74ac>
   1da04:	add	r3, sp, #220	; 0xdc
   1da08:	mov	r2, r6
   1da0c:	mov	r0, r7
   1da10:	bl	1a4a4 <_start@@Base+0x5690>
   1da14:	ldr	r3, [sp, #220]	; 0xdc
   1da18:	mov	r5, r0
   1da1c:	cmp	r3, #0
   1da20:	beq	1da38 <_start@@Base+0x8c24>
   1da24:	mov	r1, #1
   1da28:	ldr	r0, [r7]
   1da2c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1da30:	cmp	r0, #0
   1da34:	bne	1c890 <_start@@Base+0x7a7c>
   1da38:	mov	r3, r6
   1da3c:	mov	r6, r5
   1da40:	mov	r5, r3
   1da44:	b	1c0a8 <_start@@Base+0x7294>
   1da48:	mov	r4, r1
   1da4c:	b	1d760 <_start@@Base+0x894c>
   1da50:	mov	r5, r1
   1da54:	b	1ca14 <_start@@Base+0x7c00>
   1da58:	mov	r4, r1
   1da5c:	b	1cf20 <_start@@Base+0x810c>
   1da60:	mov	r4, r6
   1da64:	b	1d820 <_start@@Base+0x8a0c>
   1da68:	mov	r5, r6
   1da6c:	b	1d5c8 <_start@@Base+0x87b4>
   1da70:	ldrb	r3, [r4, #2]
   1da74:	cmp	r3, #32
   1da78:	bls	1d744 <_start@@Base+0x8930>
   1da7c:	add	r4, r4, #2
   1da80:	b	1d760 <_start@@Base+0x894c>
   1da84:	ldrb	r3, [r4, #2]
   1da88:	cmp	r3, #32
   1da8c:	bls	1c9f4 <_start@@Base+0x7be0>
   1da90:	add	r5, r4, #2
   1da94:	b	1ca14 <_start@@Base+0x7c00>
   1da98:	mov	r4, r6
   1da9c:	b	1cd68 <_start@@Base+0x7f54>
   1daa0:	ldrb	r3, [r4, #2]
   1daa4:	cmp	r3, #32
   1daa8:	bls	1cf04 <_start@@Base+0x80f0>
   1daac:	add	r4, r4, #2
   1dab0:	b	1cf20 <_start@@Base+0x810c>
   1dab4:	ldr	r1, [sp, #236]	; 0xec
   1dab8:	ldrd	r2, [sp, #248]	; 0xf8
   1dabc:	cmp	r1, r5
   1dac0:	beq	1e2d4 <_start@@Base+0x94c0>
   1dac4:	cmp	r3, #-2147483648	; 0x80000000
   1dac8:	cmpeq	r2, #0
   1dacc:	bhi	1e5bc <_start@@Base+0x97a8>
   1dad0:	rsbs	r2, r2, #0
   1dad4:	rsc	r3, r3, #0
   1dad8:	strd	r2, [sp, #240]	; 0xf0
   1dadc:	b	1d858 <_start@@Base+0x8a44>
   1dae0:	ldr	r3, [sp, #240]	; 0xf0
   1dae4:	cmp	r3, #0
   1dae8:	bne	1e56c <_start@@Base+0x9758>
   1daec:	ldrd	r2, [sp, #248]	; 0xf8
   1daf0:	mov	r1, #0
   1daf4:	mvn	r0, #0
   1daf8:	cmp	r3, r1
   1dafc:	cmpeq	r2, r0
   1db00:	movls	r4, r5
   1db04:	strls	r2, [sp, #236]	; 0xec
   1db08:	bls	1d5f8 <_start@@Base+0x87e4>
   1db0c:	mov	r1, r5
   1db10:	mov	r3, #7
   1db14:	mov	r2, r6
   1db18:	mov	r0, r7
   1db1c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1db20:	mov	r4, r0
   1db24:	cmp	sl, r4
   1db28:	bne	1d5f4 <_start@@Base+0x87e0>
   1db2c:	mov	r5, sl
   1db30:	b	1d5c8 <_start@@Base+0x87b4>
   1db34:	ldrb	r3, [r4, #2]
   1db38:	cmp	r3, #32
   1db3c:	addhi	r1, r4, #2
   1db40:	bls	1d8c8 <_start@@Base+0x8ab4>
   1db44:	cmp	r6, r1
   1db48:	bne	1d8e0 <_start@@Base+0x8acc>
   1db4c:	mov	ip, #0
   1db50:	mov	r3, #10
   1db54:	mov	r2, r6
   1db58:	mov	r1, r6
   1db5c:	mov	r0, r7
   1db60:	str	ip, [sp, #232]	; 0xe8
   1db64:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1db68:	ldr	r3, [sp, #232]	; 0xe8
   1db6c:	b	1d36c <_start@@Base+0x8558>
   1db70:	ldr	r1, [sp, #236]	; 0xec
   1db74:	ldrd	r2, [sp, #248]	; 0xf8
   1db78:	cmp	r1, #0
   1db7c:	beq	1e3d8 <_start@@Base+0x95c4>
   1db80:	cmp	r3, #-2147483648	; 0x80000000
   1db84:	cmpeq	r2, #0
   1db88:	bhi	1e5f4 <_start@@Base+0x97e0>
   1db8c:	rsbs	r2, r2, #0
   1db90:	rsc	r3, r3, #0
   1db94:	strd	r2, [sp, #240]	; 0xf0
   1db98:	b	1cd98 <_start@@Base+0x7f84>
   1db9c:	add	r3, sp, #236	; 0xec
   1dba0:	mov	r1, r9
   1dba4:	mov	r2, r6
   1dba8:	mov	r0, r7
   1dbac:	str	r3, [sp, #140]	; 0x8c
   1dbb0:	bl	18e0c <_start@@Base+0x3ff8>
   1dbb4:	ldr	r3, [sp, #236]	; 0xec
   1dbb8:	mov	r4, r0
   1dbbc:	cmp	r3, #0
   1dbc0:	beq	1d0b4 <_start@@Base+0x82a0>
   1dbc4:	add	fp, pc, #412	; 0x19c
   1dbc8:	ldrd	sl, [fp]
   1dbcc:	cmp	r6, r4
   1dbd0:	beq	1dbe4 <_start@@Base+0x8dd0>
   1dbd4:	ldrb	r3, [r4]
   1dbd8:	cmp	r3, #34	; 0x22
   1dbdc:	addeq	r4, r4, #1
   1dbe0:	bne	1dd40 <_start@@Base+0x8f2c>
   1dbe4:	sub	ip, r6, r4
   1dbe8:	cmp	ip, #8
   1dbec:	bhi	1cf88 <_start@@Base+0x8174>
   1dbf0:	sub	r3, ip, #1
   1dbf4:	cmp	r3, #7
   1dbf8:	addls	pc, pc, r3, lsl #2
   1dbfc:	b	1dc20 <_start@@Base+0x8e0c>
   1dc00:	b	1dc20 <_start@@Base+0x8e0c>
   1dc04:	b	1dc74 <_start@@Base+0x8e60>
   1dc08:	b	1dc38 <_start@@Base+0x8e24>
   1dc0c:	b	1dc5c <_start@@Base+0x8e48>
   1dc10:	b	1dc50 <_start@@Base+0x8e3c>
   1dc14:	b	1dc44 <_start@@Base+0x8e30>
   1dc18:	b	1dc68 <_start@@Base+0x8e54>
   1dc1c:	b	1cf88 <_start@@Base+0x8174>
   1dc20:	mov	r1, r4
   1dc24:	mov	r2, r6
   1dc28:	mov	r0, r7
   1dc2c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc30:	mov	r4, r0
   1dc34:	b	1d090 <_start@@Base+0x827c>
   1dc38:	mov	r8, #0
   1dc3c:	mov	lr, r8
   1dc40:	b	1cfb4 <_start@@Base+0x81a0>
   1dc44:	mov	r2, #0
   1dc48:	mov	lr, r2
   1dc4c:	b	1cf9c <_start@@Base+0x8188>
   1dc50:	mov	r2, #0
   1dc54:	mov	lr, r2
   1dc58:	b	1cfa4 <_start@@Base+0x8190>
   1dc5c:	mov	r8, #0
   1dc60:	mov	lr, r8
   1dc64:	b	1cfac <_start@@Base+0x8198>
   1dc68:	mov	r2, #0
   1dc6c:	mov	r3, #0
   1dc70:	b	1cf90 <_start@@Base+0x817c>
   1dc74:	ldrb	r2, [r4, #1]
   1dc78:	mov	r1, #0
   1dc7c:	ldrb	r0, [r4]
   1dc80:	str	r1, [sp, #24]
   1dc84:	lsl	r2, r2, #16
   1dc88:	orr	r3, r2, r0, lsl #24
   1dc8c:	str	r3, [sp, #28]
   1dc90:	ldrd	r2, [sp, #24]
   1dc94:	cmp	r3, fp
   1dc98:	cmpeq	r2, sl
   1dc9c:	bls	1d000 <_start@@Base+0x81ec>
   1dca0:	add	r1, pc, #200	; 0xc8
   1dca4:	ldrd	r0, [r1]
   1dca8:	ldrd	r2, [sp, #24]
   1dcac:	cmp	r3, r1
   1dcb0:	cmpeq	r2, r0
   1dcb4:	beq	1de60 <_start@@Base+0x904c>
   1dcb8:	mov	r1, #0
   1dcbc:	mov	r0, #0
   1dcc0:	str	r1, [sp, #128]	; 0x80
   1dcc4:	movw	r1, #25443	; 0x6363
   1dcc8:	movt	r1, #25443	; 0x6363
   1dccc:	str	r3, [sp, #132]	; 0x84
   1dcd0:	ldrd	r2, [sp, #128]	; 0x80
   1dcd4:	cmp	r3, r1
   1dcd8:	cmpeq	r2, r0
   1dcdc:	bne	1def8 <_start@@Base+0x90e4>
   1dce0:	cmp	ip, #4
   1dce4:	ble	1dc20 <_start@@Base+0x8e0c>
   1dce8:	mov	r1, r4
   1dcec:	mov	r3, #4
   1dcf0:	mov	r2, r6
   1dcf4:	mov	r0, r7
   1dcf8:	bl	1a220 <_start@@Base+0x540c>
   1dcfc:	cmp	r4, r0
   1dd00:	mov	r1, r0
   1dd04:	beq	1dc20 <_start@@Base+0x8e0c>
   1dd08:	add	r3, sp, #240	; 0xf0
   1dd0c:	mov	r2, r6
   1dd10:	mov	r0, r7
   1dd14:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1dd18:	ldr	r3, [sp, #240]	; 0xf0
   1dd1c:	mov	r4, r0
   1dd20:	cmp	r3, #0
   1dd24:	beq	1d0c0 <_start@@Base+0x82ac>
   1dd28:	mov	r1, #4
   1dd2c:	ldr	r0, [r7]
   1dd30:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1dd34:	cmp	r0, #0
   1dd38:	bne	1d088 <_start@@Base+0x8274>
   1dd3c:	b	1d0c0 <_start@@Base+0x82ac>
   1dd40:	mov	r1, r4
   1dd44:	mov	r3, #5
   1dd48:	mov	r2, r6
   1dd4c:	mov	r0, r7
   1dd50:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1dd54:	mov	r4, r0
   1dd58:	b	1dbe4 <_start@@Base+0x8dd0>
   1dd5c:	nop	{0}
   1dd60:	strvs	r0, [r0, #-0]
   1dd64:	stclvs	6, cr7, [pc, #-420]!	; 1dbc8 <_start@@Base+0x8db4>
   1dd68:			; <UNDEFINED> instruction: 0xffffffff
   1dd6c:	cmnvs	r3, #-2013265919	; 0x88000001
   1dd70:	teqcc	r2, r4, lsr r3
   1dd74:	cmnvs	r3, #-1946157055	; 0x8c000001
   1dd78:	teqcc	r2, r4, lsr r3
   1dd7c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1dd80:	teqcc	r2, r4, lsr r3
   1dd84:	rsbvs	r6, r2, #536870918	; 0x20000006
   1dd88:	andeq	r5, r3, r0, asr sl
   1dd8c:	andeq	r5, r3, r4, ror #21
   1dd90:	andeq	r5, r3, ip, lsr fp
   1dd94:	muleq	r3, r8, fp
   1dd98:	andeq	r5, r3, r8, ror #23
   1dd9c:	andeq	r5, r3, r8, asr ip
   1dda0:	add	r4, r4, #8
   1dda4:	mov	r1, r6
   1dda8:	str	r5, [sp, #176]	; 0xb0
   1ddac:	mov	r0, r4
   1ddb0:	bl	14f08 <_start@@Base+0xf4>
   1ddb4:	and	r3, r1, #-16777216	; 0xff000000
   1ddb8:	str	r3, [sp, #180]	; 0xb4
   1ddbc:	ldrd	r2, [sp, #176]	; 0xb0
   1ddc0:	cmp	r3, #889192448	; 0x35000000
   1ddc4:	cmpeq	r2, #0
   1ddc8:	bne	1dc20 <_start@@Base+0x8e0c>
   1ddcc:	sub	r3, r6, r4
   1ddd0:	cmp	r3, #1
   1ddd4:	ble	1dc20 <_start@@Base+0x8e0c>
   1ddd8:	mov	r3, #1
   1dddc:	mov	r2, r6
   1dde0:	mov	r1, r4
   1dde4:	mov	r0, r7
   1dde8:	bl	1a220 <_start@@Base+0x540c>
   1ddec:	cmp	r4, r0
   1ddf0:	mov	r8, r0
   1ddf4:	beq	1dc20 <_start@@Base+0x8e0c>
   1ddf8:	add	r9, sp, #248	; 0xf8
   1ddfc:	mov	r1, r0
   1de00:	str	r5, [sp, #248]	; 0xf8
   1de04:	mov	r2, r6
   1de08:	mov	r3, r9
   1de0c:	mov	r0, r7
   1de10:	bl	17c80 <_start@@Base+0x2e6c>
   1de14:	cmp	r8, r0
   1de18:	mov	r4, r0
   1de1c:	beq	1e484 <_start@@Base+0x9670>
   1de20:	ldr	r3, [sp, #248]	; 0xf8
   1de24:	cmp	r3, #0
   1de28:	bne	1de38 <_start@@Base+0x9024>
   1de2c:	ldr	r3, [r7, #8]
   1de30:	tst	r3, #2
   1de34:	beq	1d090 <_start@@Base+0x827c>
   1de38:	mov	r3, #4
   1de3c:	mov	r1, #1
   1de40:	mov	r2, r3
   1de44:	ldr	r0, [r7]
   1de48:	bl	28894 <flatcc_builder_table_add@@Base>
   1de4c:	cmp	r0, #0
   1de50:	beq	1d0c0 <_start@@Base+0x82ac>
   1de54:	ldr	r3, [sp, #248]	; 0xf8
   1de58:	str	r3, [r0]
   1de5c:	b	1d090 <_start@@Base+0x827c>
   1de60:	cmp	ip, #8
   1de64:	ble	1e020 <_start@@Base+0x920c>
   1de68:	mov	r3, #8
   1de6c:	mov	r2, r6
   1de70:	mov	r1, r4
   1de74:	mov	r0, r7
   1de78:	bl	1a220 <_start@@Base+0x540c>
   1de7c:	cmp	r4, r0
   1de80:	mov	r5, r0
   1de84:	beq	1e020 <_start@@Base+0x920c>
   1de88:	add	r3, sp, #248	; 0xf8
   1de8c:	mov	r8, #0
   1de90:	mov	r9, #0
   1de94:	mov	r1, r0
   1de98:	mov	r2, r6
   1de9c:	mov	r0, r7
   1dea0:	str	r3, [sp, #208]	; 0xd0
   1dea4:	strd	r8, [sp, #248]	; 0xf8
   1dea8:	bl	179a8 <_start@@Base+0x2b94>
   1deac:	cmp	r5, r0
   1deb0:	mov	r4, r0
   1deb4:	beq	1e418 <_start@@Base+0x9604>
   1deb8:	ldrd	r2, [sp, #248]	; 0xf8
   1debc:	orrs	r3, r2, r3
   1dec0:	bne	1ded0 <_start@@Base+0x90bc>
   1dec4:	ldr	r3, [r7, #8]
   1dec8:	tst	r3, #2
   1decc:	beq	1d090 <_start@@Base+0x827c>
   1ded0:	mov	r3, #8
   1ded4:	mov	r1, #5
   1ded8:	mov	r2, r3
   1dedc:	ldr	r0, [r7]
   1dee0:	bl	28894 <flatcc_builder_table_add@@Base>
   1dee4:	cmp	r0, #0
   1dee8:	beq	1d0c0 <_start@@Base+0x82ac>
   1deec:	ldrd	r2, [sp, #248]	; 0xf8
   1def0:	strd	r2, [r0]
   1def4:	b	1d090 <_start@@Base+0x827c>
   1def8:	sub	r1, pc, #392	; 0x188
   1defc:	ldrd	r0, [r1]
   1df00:	ldrd	r2, [sp, #24]
   1df04:	cmp	r3, r1
   1df08:	cmpeq	r2, r0
   1df0c:	bne	1dc20 <_start@@Base+0x8e0c>
   1df10:	cmp	ip, #8
   1df14:	ble	1e144 <_start@@Base+0x9330>
   1df18:	mov	r3, #8
   1df1c:	mov	r2, r6
   1df20:	mov	r1, r4
   1df24:	mov	r0, r7
   1df28:	bl	1a220 <_start@@Base+0x540c>
   1df2c:	cmp	r4, r0
   1df30:	mov	r5, r0
   1df34:	beq	1e144 <_start@@Base+0x9330>
   1df38:	add	r3, sp, #248	; 0xf8
   1df3c:	mov	r8, #0
   1df40:	mov	r9, #0
   1df44:	mov	r1, r0
   1df48:	mov	r2, r6
   1df4c:	mov	r0, r7
   1df50:	str	r3, [sp, #208]	; 0xd0
   1df54:	strd	r8, [sp, #248]	; 0xf8
   1df58:	bl	179a8 <_start@@Base+0x2b94>
   1df5c:	cmp	r5, r0
   1df60:	mov	r4, r0
   1df64:	beq	1e4d8 <_start@@Base+0x96c4>
   1df68:	ldrd	r2, [sp, #248]	; 0xf8
   1df6c:	orrs	r3, r2, r3
   1df70:	bne	1df80 <_start@@Base+0x916c>
   1df74:	ldr	r3, [r7, #8]
   1df78:	tst	r3, #2
   1df7c:	beq	1d090 <_start@@Base+0x827c>
   1df80:	mov	r3, #8
   1df84:	mov	r1, #7
   1df88:	b	1ded8 <_start@@Base+0x90c4>
   1df8c:	sub	r1, pc, #532	; 0x214
   1df90:	ldrd	r0, [r1]
   1df94:	ldrd	r2, [sp, #24]
   1df98:	cmp	r3, r1
   1df9c:	cmpeq	r2, r0
   1dfa0:	beq	1e0c8 <_start@@Base+0x92b4>
   1dfa4:	ldrd	r0, [sp, #120]	; 0x78
   1dfa8:	movw	r3, #25186	; 0x6262
   1dfac:	movt	r3, #25186	; 0x6262
   1dfb0:	mov	r2, #0
   1dfb4:	cmp	r1, r3
   1dfb8:	cmpeq	r0, r2
   1dfbc:	bne	1dc20 <_start@@Base+0x8e0c>
   1dfc0:	cmp	ip, #4
   1dfc4:	ble	1dc20 <_start@@Base+0x8e0c>
   1dfc8:	mov	r1, r4
   1dfcc:	mov	r3, #4
   1dfd0:	mov	r2, r6
   1dfd4:	mov	r0, r7
   1dfd8:	bl	1a220 <_start@@Base+0x540c>
   1dfdc:	cmp	r4, r0
   1dfe0:	mov	r1, r0
   1dfe4:	beq	1dc20 <_start@@Base+0x8e0c>
   1dfe8:	add	r3, sp, #240	; 0xf0
   1dfec:	mov	r2, r6
   1dff0:	mov	r0, r7
   1dff4:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1dff8:	ldr	r3, [sp, #240]	; 0xf0
   1dffc:	mov	r4, r0
   1e000:	cmp	r3, #0
   1e004:	beq	1d0c0 <_start@@Base+0x82ac>
   1e008:	mov	r1, #2
   1e00c:	ldr	r0, [r7]
   1e010:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1e014:	cmp	r0, #0
   1e018:	bne	1d088 <_start@@Base+0x8274>
   1e01c:	b	1d0c0 <_start@@Base+0x82ac>
   1e020:	add	r4, r4, #8
   1e024:	mov	r1, r6
   1e028:	mov	r0, r4
   1e02c:	mov	r9, #0
   1e030:	bl	14f08 <_start@@Base+0xf4>
   1e034:	and	r3, r1, #-16777216	; 0xff000000
   1e038:	str	r9, [sp, #192]	; 0xc0
   1e03c:	str	r3, [sp, #196]	; 0xc4
   1e040:	ldrd	r2, [sp, #192]	; 0xc0
   1e044:	cmp	r3, #889192448	; 0x35000000
   1e048:	cmpeq	r2, #0
   1e04c:	bne	1dc20 <_start@@Base+0x8e0c>
   1e050:	sub	r3, r6, r4
   1e054:	cmp	r3, #1
   1e058:	ble	1dc20 <_start@@Base+0x8e0c>
   1e05c:	mov	r3, #1
   1e060:	mov	r2, r6
   1e064:	mov	r1, r4
   1e068:	mov	r0, r7
   1e06c:	bl	1a220 <_start@@Base+0x540c>
   1e070:	cmp	r4, r0
   1e074:	mov	r5, r0
   1e078:	beq	1dc20 <_start@@Base+0x8e0c>
   1e07c:	add	r8, sp, #248	; 0xf8
   1e080:	mov	r1, r0
   1e084:	str	r9, [sp, #248]	; 0xf8
   1e088:	mov	r2, r6
   1e08c:	mov	r3, r8
   1e090:	mov	r0, r7
   1e094:	bl	17c80 <_start@@Base+0x2e6c>
   1e098:	cmp	r5, r0
   1e09c:	mov	r4, r0
   1e0a0:	beq	1e588 <_start@@Base+0x9774>
   1e0a4:	ldr	r3, [sp, #248]	; 0xf8
   1e0a8:	cmp	r3, #0
   1e0ac:	bne	1e0bc <_start@@Base+0x92a8>
   1e0b0:	ldr	r3, [r7, #8]
   1e0b4:	tst	r3, #2
   1e0b8:	beq	1d090 <_start@@Base+0x827c>
   1e0bc:	mov	r3, #4
   1e0c0:	mov	r1, #6
   1e0c4:	b	1de40 <_start@@Base+0x902c>
   1e0c8:	cmp	ip, #8
   1e0cc:	ble	1dc20 <_start@@Base+0x8e0c>
   1e0d0:	mov	r3, #8
   1e0d4:	mov	r2, r6
   1e0d8:	mov	r1, r4
   1e0dc:	mov	r0, r7
   1e0e0:	bl	1a220 <_start@@Base+0x540c>
   1e0e4:	cmp	r4, r0
   1e0e8:	mov	r5, r0
   1e0ec:	beq	1dc20 <_start@@Base+0x8e0c>
   1e0f0:	add	r3, sp, #248	; 0xf8
   1e0f4:	mov	r8, #0
   1e0f8:	mov	r9, #0
   1e0fc:	mov	r1, r0
   1e100:	mov	r2, r6
   1e104:	mov	r0, r7
   1e108:	str	r3, [sp, #208]	; 0xd0
   1e10c:	strd	r8, [sp, #248]	; 0xf8
   1e110:	bl	179a8 <_start@@Base+0x2b94>
   1e114:	cmp	r5, r0
   1e118:	mov	r4, r0
   1e11c:	beq	1e534 <_start@@Base+0x9720>
   1e120:	ldrd	r2, [sp, #248]	; 0xf8
   1e124:	orrs	r3, r2, r3
   1e128:	bne	1e138 <_start@@Base+0x9324>
   1e12c:	ldr	r3, [r7, #8]
   1e130:	tst	r3, #2
   1e134:	beq	1d090 <_start@@Base+0x827c>
   1e138:	mov	r3, #8
   1e13c:	mov	r1, #3
   1e140:	b	1ded8 <_start@@Base+0x90c4>
   1e144:	add	r4, r4, #8
   1e148:	mov	r1, r6
   1e14c:	mov	r0, r4
   1e150:	mov	r9, #0
   1e154:	bl	14f08 <_start@@Base+0xf4>
   1e158:	and	r3, r1, #-16777216	; 0xff000000
   1e15c:	str	r9, [sp, #200]	; 0xc8
   1e160:	str	r3, [sp, #204]	; 0xcc
   1e164:	ldrd	r2, [sp, #200]	; 0xc8
   1e168:	cmp	r3, #889192448	; 0x35000000
   1e16c:	cmpeq	r2, #0
   1e170:	bne	1dc20 <_start@@Base+0x8e0c>
   1e174:	sub	r3, r6, r4
   1e178:	cmp	r3, #1
   1e17c:	ble	1dc20 <_start@@Base+0x8e0c>
   1e180:	mov	r3, #1
   1e184:	mov	r2, r6
   1e188:	mov	r1, r4
   1e18c:	mov	r0, r7
   1e190:	bl	1a220 <_start@@Base+0x540c>
   1e194:	cmp	r4, r0
   1e198:	mov	r5, r0
   1e19c:	beq	1dc20 <_start@@Base+0x8e0c>
   1e1a0:	add	r8, sp, #248	; 0xf8
   1e1a4:	mov	r1, r0
   1e1a8:	str	r9, [sp, #248]	; 0xf8
   1e1ac:	mov	r2, r6
   1e1b0:	mov	r3, r8
   1e1b4:	mov	r0, r7
   1e1b8:	bl	17c80 <_start@@Base+0x2e6c>
   1e1bc:	cmp	r5, r0
   1e1c0:	mov	r4, r0
   1e1c4:	beq	1e61c <_start@@Base+0x9808>
   1e1c8:	ldr	r3, [sp, #248]	; 0xf8
   1e1cc:	cmp	r3, #0
   1e1d0:	bne	1e1e0 <_start@@Base+0x93cc>
   1e1d4:	ldr	r3, [r7, #8]
   1e1d8:	tst	r3, #2
   1e1dc:	beq	1d090 <_start@@Base+0x827c>
   1e1e0:	mov	r3, #4
   1e1e4:	mov	r1, #8
   1e1e8:	b	1de40 <_start@@Base+0x902c>
   1e1ec:	ldrb	r3, [r4, #2]
   1e1f0:	cmp	r3, #32
   1e1f4:	addhi	r0, r4, #2
   1e1f8:	bls	1ca6c <_start@@Base+0x7c58>
   1e1fc:	cmp	r6, r0
   1e200:	bne	1ca84 <_start@@Base+0x7c70>
   1e204:	mov	ip, #0
   1e208:	mov	r3, #10
   1e20c:	mov	r2, r6
   1e210:	mov	r1, r6
   1e214:	mov	r0, r7
   1e218:	str	ip, [sp, #228]	; 0xe4
   1e21c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e220:	ldr	r3, [sp, #228]	; 0xe4
   1e224:	b	1c4ec <_start@@Base+0x76d8>
   1e228:	mov	r5, r6
   1e22c:	mov	r6, r1
   1e230:	b	1d90c <_start@@Base+0x8af8>
   1e234:	ldrb	r3, [r4, #2]
   1e238:	cmp	r3, #32
   1e23c:	addhi	r1, r4, #2
   1e240:	bls	1d2d0 <_start@@Base+0x84bc>
   1e244:	cmp	r6, r1
   1e248:	bne	1d2e8 <_start@@Base+0x84d4>
   1e24c:	mov	ip, #0
   1e250:	mov	r3, #10
   1e254:	mov	r2, r6
   1e258:	mov	r1, r6
   1e25c:	mov	r0, r7
   1e260:	str	ip, [sp, #232]	; 0xe8
   1e264:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e268:	ldr	r3, [sp, #232]	; 0xe8
   1e26c:	b	1cb08 <_start@@Base+0x7cf4>
   1e270:	add	r4, r1, #1
   1e274:	mov	r3, #0
   1e278:	sub	r2, r6, r4
   1e27c:	cmp	r2, #1
   1e280:	str	r3, [sp, #232]	; 0xe8
   1e284:	ble	1e2a4 <_start@@Base+0x9490>
   1e288:	ldrb	r3, [r1, #1]
   1e28c:	cmp	r3, #32
   1e290:	bhi	1d760 <_start@@Base+0x894c>
   1e294:	bne	1e2a4 <_start@@Base+0x9490>
   1e298:	ldrb	r3, [r1, #2]
   1e29c:	cmp	r3, #32
   1e2a0:	bhi	1e650 <_start@@Base+0x983c>
   1e2a4:	mov	r1, r4
   1e2a8:	b	1d744 <_start@@Base+0x8930>
   1e2ac:	mov	r8, r6
   1e2b0:	b	1d1e0 <_start@@Base+0x83cc>
   1e2b4:	ldrb	r3, [r5, #2]
   1e2b8:	cmp	r3, #32
   1e2bc:	bls	1c448 <_start@@Base+0x7634>
   1e2c0:	mov	r3, r6
   1e2c4:	mov	r6, r5
   1e2c8:	add	r6, r6, #2
   1e2cc:	mov	r5, r3
   1e2d0:	b	1d90c <_start@@Base+0x8af8>
   1e2d4:	cmp	r2, #0
   1e2d8:	sbcs	r1, r3, #0
   1e2dc:	strdge	r2, [sp, #240]	; 0xf0
   1e2e0:	bge	1d858 <_start@@Base+0x8a44>
   1e2e4:	mov	r1, r0
   1e2e8:	mov	r3, #7
   1e2ec:	mov	r2, r6
   1e2f0:	mov	r0, r7
   1e2f4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e2f8:	mov	r4, r0
   1e2fc:	cmp	sl, r4
   1e300:	beq	1d820 <_start@@Base+0x8a0c>
   1e304:	ldrd	r2, [sp, #240]	; 0xf0
   1e308:	b	1d858 <_start@@Base+0x8a44>
   1e30c:	add	r4, r0, #1
   1e310:	mov	r3, #0
   1e314:	sub	r2, r6, r4
   1e318:	cmp	r2, #1
   1e31c:	str	r3, [sp, #228]	; 0xe4
   1e320:	ble	1e340 <_start@@Base+0x952c>
   1e324:	ldrb	r3, [r0, #1]
   1e328:	cmp	r3, #32
   1e32c:	bhi	1e47c <_start@@Base+0x9668>
   1e330:	bne	1e340 <_start@@Base+0x952c>
   1e334:	ldrb	r3, [r0, #2]
   1e338:	cmp	r3, #32
   1e33c:	bhi	1e658 <_start@@Base+0x9844>
   1e340:	mov	r1, r4
   1e344:	b	1c9f4 <_start@@Base+0x7be0>
   1e348:	add	r4, r1, #1
   1e34c:	mov	r3, #0
   1e350:	sub	r2, r6, r4
   1e354:	cmp	r2, #1
   1e358:	str	r3, [sp, #232]	; 0xe8
   1e35c:	ble	1e37c <_start@@Base+0x9568>
   1e360:	ldrb	r3, [r1, #1]
   1e364:	cmp	r3, #32
   1e368:	bhi	1cf20 <_start@@Base+0x810c>
   1e36c:	bne	1e37c <_start@@Base+0x9568>
   1e370:	ldrb	r3, [r1, #2]
   1e374:	cmp	r3, #32
   1e378:	bhi	1e660 <_start@@Base+0x984c>
   1e37c:	mov	r1, r4
   1e380:	b	1cf04 <_start@@Base+0x80f0>
   1e384:	ldr	r3, [sp, #240]	; 0xf0
   1e388:	cmp	r3, #0
   1e38c:	bne	1e5d8 <_start@@Base+0x97c4>
   1e390:	ldrd	r2, [sp, #248]	; 0xf8
   1e394:	mov	r1, #0
   1e398:	mvn	r0, #0
   1e39c:	cmp	r3, r1
   1e3a0:	cmpeq	r2, r0
   1e3a4:	movls	r4, r8
   1e3a8:	strls	r2, [sp, #236]	; 0xec
   1e3ac:	bls	1d218 <_start@@Base+0x8404>
   1e3b0:	mov	r1, r8
   1e3b4:	mov	r3, #7
   1e3b8:	mov	r2, r6
   1e3bc:	mov	r0, r7
   1e3c0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e3c4:	mov	r4, r0
   1e3c8:	cmp	r9, r4
   1e3cc:	bne	1d214 <_start@@Base+0x8400>
   1e3d0:	mov	r8, r9
   1e3d4:	b	1d1e0 <_start@@Base+0x83cc>
   1e3d8:	cmp	r2, #0
   1e3dc:	sbcs	r1, r3, #0
   1e3e0:	strdge	r2, [sp, #240]	; 0xf0
   1e3e4:	bge	1cd98 <_start@@Base+0x7f84>
   1e3e8:	mov	r1, r0
   1e3ec:	mov	r3, #7
   1e3f0:	mov	r2, r6
   1e3f4:	mov	r0, r7
   1e3f8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e3fc:	mov	r4, r0
   1e400:	b	1e60c <_start@@Base+0x97f8>
   1e404:	ldrb	r3, [r5, #2]
   1e408:	cmp	r3, #32
   1e40c:	addhi	r1, r5, #2
   1e410:	bls	1d984 <_start@@Base+0x8b70>
   1e414:	b	1d994 <_start@@Base+0x8b80>
   1e418:	ldr	r3, [pc, #-1668]	; 1dd9c <_start@@Base+0x8f88>
   1e41c:	mov	r1, r0
   1e420:	mov	r2, r6
   1e424:	ldr	r0, [sp, #208]	; 0xd0
   1e428:	add	r3, pc, r3
   1e42c:	add	r3, r3, #180	; 0xb4
   1e430:	str	r0, [sp]
   1e434:	mov	r0, r7
   1e438:	bl	18c00 <_start@@Base+0x3dec>
   1e43c:	cmp	r6, r0
   1e440:	cmpne	r4, r0
   1e444:	beq	1e668 <_start@@Base+0x9854>
   1e448:	mov	r4, r0
   1e44c:	b	1deb8 <_start@@Base+0x90a4>
   1e450:	ldr	r0, [r7]
   1e454:	str	r1, [sp, #140]	; 0x8c
   1e458:	bl	27744 <flatcc_builder_end_table@@Base>
   1e45c:	subs	r5, r0, #0
   1e460:	ldr	r1, [sp, #140]	; 0x8c
   1e464:	beq	1d0c0 <_start@@Base+0x82ac>
   1e468:	ldr	r0, [r7]
   1e46c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1e470:	cmp	r0, #0
   1e474:	bne	1cf50 <_start@@Base+0x813c>
   1e478:	b	1d790 <_start@@Base+0x897c>
   1e47c:	mov	r5, r4
   1e480:	b	1ca14 <_start@@Base+0x7c00>
   1e484:	ldr	r3, [pc, #-1780]	; 1dd98 <_start@@Base+0x8f84>
   1e488:	mov	r1, r0
   1e48c:	mov	r2, r6
   1e490:	mov	r0, r7
   1e494:	str	r9, [sp]
   1e498:	add	r3, pc, r3
   1e49c:	add	r3, r3, #156	; 0x9c
   1e4a0:	bl	19778 <_start@@Base+0x4964>
   1e4a4:	cmp	r6, r0
   1e4a8:	cmpne	r4, r0
   1e4ac:	beq	1e668 <_start@@Base+0x9854>
   1e4b0:	mov	r4, r0
   1e4b4:	b	1de20 <_start@@Base+0x900c>
   1e4b8:	mov	r3, #0
   1e4bc:	add	r1, r1, #1
   1e4c0:	mov	r2, r6
   1e4c4:	mov	r0, r7
   1e4c8:	str	r3, [sp, #216]	; 0xd8
   1e4cc:	bl	16ef8 <_start@@Base+0x20e4>
   1e4d0:	ldr	r3, [sp, #216]	; 0xd8
   1e4d4:	b	1c120 <_start@@Base+0x730c>
   1e4d8:	ldr	r3, [pc, #-1868]	; 1dd94 <_start@@Base+0x8f80>
   1e4dc:	mov	r1, r0
   1e4e0:	mov	r2, r6
   1e4e4:	ldr	r0, [sp, #208]	; 0xd0
   1e4e8:	add	r3, pc, r3
   1e4ec:	add	r3, r3, #204	; 0xcc
   1e4f0:	str	r0, [sp]
   1e4f4:	mov	r0, r7
   1e4f8:	bl	18c00 <_start@@Base+0x3dec>
   1e4fc:	cmp	r6, r0
   1e500:	cmpne	r4, r0
   1e504:	beq	1e668 <_start@@Base+0x9854>
   1e508:	mov	r4, r0
   1e50c:	b	1df68 <_start@@Base+0x9154>
   1e510:	mov	ip, #0
   1e514:	mov	r3, #10
   1e518:	mov	r2, r6
   1e51c:	mov	r1, r6
   1e520:	mov	r0, r7
   1e524:	str	ip, [sp, #216]	; 0xd8
   1e528:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e52c:	ldr	r3, [sp, #216]	; 0xd8
   1e530:	b	1c120 <_start@@Base+0x730c>
   1e534:	ldr	r3, [pc, #-1964]	; 1dd90 <_start@@Base+0x8f7c>
   1e538:	mov	r1, r0
   1e53c:	mov	r2, r6
   1e540:	ldr	r0, [sp, #208]	; 0xd0
   1e544:	add	r3, pc, r3
   1e548:	add	r3, r3, #168	; 0xa8
   1e54c:	str	r0, [sp]
   1e550:	mov	r0, r7
   1e554:	bl	18c00 <_start@@Base+0x3dec>
   1e558:	cmp	r6, r0
   1e55c:	cmpne	r4, r0
   1e560:	beq	1e668 <_start@@Base+0x9854>
   1e564:	mov	r4, r0
   1e568:	b	1e120 <_start@@Base+0x930c>
   1e56c:	mov	r1, r0
   1e570:	mov	r3, #8
   1e574:	mov	r2, r6
   1e578:	mov	r0, r7
   1e57c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e580:	mov	r4, r0
   1e584:	b	1db24 <_start@@Base+0x8d10>
   1e588:	ldr	r3, [pc, #-2052]	; 1dd8c <_start@@Base+0x8f78>
   1e58c:	mov	r1, r0
   1e590:	mov	r2, r6
   1e594:	mov	r0, r7
   1e598:	str	r8, [sp]
   1e59c:	add	r3, pc, r3
   1e5a0:	add	r3, r3, #192	; 0xc0
   1e5a4:	bl	19778 <_start@@Base+0x4964>
   1e5a8:	cmp	r6, r0
   1e5ac:	cmpne	r4, r0
   1e5b0:	beq	1e668 <_start@@Base+0x9854>
   1e5b4:	mov	r4, r0
   1e5b8:	b	1e0a4 <_start@@Base+0x9290>
   1e5bc:	mov	r1, r0
   1e5c0:	mov	r3, #8
   1e5c4:	mov	r2, r6
   1e5c8:	mov	r0, r7
   1e5cc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e5d0:	mov	r4, r0
   1e5d4:	b	1e2fc <_start@@Base+0x94e8>
   1e5d8:	mov	r1, r0
   1e5dc:	mov	r3, #8
   1e5e0:	mov	r2, r6
   1e5e4:	mov	r0, r7
   1e5e8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e5ec:	mov	r4, r0
   1e5f0:	b	1e3c8 <_start@@Base+0x95b4>
   1e5f4:	mov	r1, r0
   1e5f8:	mov	r3, #8
   1e5fc:	mov	r2, r6
   1e600:	mov	r0, r7
   1e604:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e608:	mov	r4, r0
   1e60c:	cmp	r8, r4
   1e610:	beq	1cd68 <_start@@Base+0x7f54>
   1e614:	ldrd	r2, [sp, #240]	; 0xf0
   1e618:	b	1cd98 <_start@@Base+0x7f84>
   1e61c:	ldr	r3, [pc, #-2204]	; 1dd88 <_start@@Base+0x8f74>
   1e620:	mov	r1, r0
   1e624:	mov	r2, r6
   1e628:	mov	r0, r7
   1e62c:	str	r8, [sp]
   1e630:	add	r3, pc, r3
   1e634:	add	r3, r3, #216	; 0xd8
   1e638:	bl	19778 <_start@@Base+0x4964>
   1e63c:	cmp	r6, r0
   1e640:	cmpne	r4, r0
   1e644:	beq	1e668 <_start@@Base+0x9854>
   1e648:	mov	r4, r0
   1e64c:	b	1e1c8 <_start@@Base+0x93b4>
   1e650:	add	r4, r1, #2
   1e654:	b	1d760 <_start@@Base+0x894c>
   1e658:	add	r5, r0, #2
   1e65c:	b	1ca14 <_start@@Base+0x7c00>
   1e660:	add	r4, r1, #2
   1e664:	b	1cf20 <_start@@Base+0x810c>
   1e668:	mov	r5, r0
   1e66c:	b	1d0c4 <_start@@Base+0x82b0>
   1e670:	mov	r4, r0
   1e674:	b	1d760 <_start@@Base+0x894c>
   1e678:	mov	r4, r0
   1e67c:	b	1cf20 <_start@@Base+0x810c>
   1e680:	mov	r5, r0
   1e684:	b	1ca14 <_start@@Base+0x7c00>
   1e688:	cmp	r1, r2
   1e68c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e690:	strd	r6, [sp, #8]
   1e694:	mov	r6, r2
   1e698:	mov	r7, r0
   1e69c:	strd	r8, [sp, #16]
   1e6a0:	strd	sl, [sp, #24]
   1e6a4:	str	lr, [sp, #32]
   1e6a8:	sub	sp, sp, #36	; 0x24
   1e6ac:	beq	1e6c0 <_start@@Base+0x98ac>
   1e6b0:	mov	fp, r3
   1e6b4:	ldrb	r3, [r1]
   1e6b8:	cmp	r3, #123	; 0x7b
   1e6bc:	beq	1e6f4 <_start@@Base+0x98e0>
   1e6c0:	mov	r2, r6
   1e6c4:	mov	r0, r7
   1e6c8:	mov	r3, #21
   1e6cc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e6d0:	mov	r5, r0
   1e6d4:	mov	r0, r5
   1e6d8:	add	sp, sp, #36	; 0x24
   1e6dc:	ldrd	r4, [sp]
   1e6e0:	ldrd	r6, [sp, #8]
   1e6e4:	ldrd	r8, [sp, #16]
   1e6e8:	ldrd	sl, [sp, #24]
   1e6ec:	add	sp, sp, #32
   1e6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6f4:	add	r4, r1, #1
   1e6f8:	sub	r3, r2, r4
   1e6fc:	cmp	r3, #1
   1e700:	ble	1e714 <_start@@Base+0x9900>
   1e704:	ldrb	r3, [r1, #1]
   1e708:	cmp	r3, #32
   1e70c:	bhi	1e728 <_start@@Base+0x9914>
   1e710:	beq	1ed58 <_start@@Base+0x9f44>
   1e714:	mov	r1, r4
   1e718:	mov	r2, r6
   1e71c:	mov	r0, r7
   1e720:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1e724:	mov	r4, r0
   1e728:	cmp	r6, r4
   1e72c:	beq	1e73c <_start@@Base+0x9928>
   1e730:	ldrb	r3, [r4]
   1e734:	cmp	r3, #125	; 0x7d
   1e738:	beq	1ed6c <_start@@Base+0x9f58>
   1e73c:	ldr	r2, [pc, #1620]	; 1ed98 <_start@@Base+0x9f84>
   1e740:	ldr	r3, [pc, #1620]	; 1ed9c <_start@@Base+0x9f88>
   1e744:	add	r2, pc, r2
   1e748:	add	r2, r2, #264	; 0x108
   1e74c:	add	r3, pc, r3
   1e750:	add	r3, r3, #252	; 0xfc
   1e754:	strd	r2, [sp, #8]
   1e758:	cmp	r6, r4
   1e75c:	beq	1e7d8 <_start@@Base+0x99c4>
   1e760:	ldrb	r3, [r4]
   1e764:	cmp	r3, #34	; 0x22
   1e768:	addeq	r4, r4, #1
   1e76c:	bne	1e998 <_start@@Base+0x9b84>
   1e770:	sub	r2, r6, r4
   1e774:	cmp	r2, #8
   1e778:	bls	1e854 <_start@@Base+0x9a40>
   1e77c:	mov	r1, #0
   1e780:	mov	r3, r1
   1e784:	ldrb	r0, [r4, #3]
   1e788:	orr	r3, r3, r0
   1e78c:	ldrb	r0, [r4, #2]
   1e790:	orr	r3, r3, r0, lsl #8
   1e794:	ldrb	r0, [r4, #1]
   1e798:	orr	r3, r3, r0, lsl #16
   1e79c:	ldrb	r0, [r4]
   1e7a0:	mov	r8, #0
   1e7a4:	orr	r3, r3, r0, lsl #24
   1e7a8:	and	r9, r3, #-16777216	; 0xff000000
   1e7ac:	cmp	r9, #1644167168	; 0x62000000
   1e7b0:	cmpeq	r8, #0
   1e7b4:	beq	1e8a4 <_start@@Base+0x9a90>
   1e7b8:	cmp	r9, #1627389952	; 0x61000000
   1e7bc:	cmpeq	r8, #0
   1e7c0:	bne	1e7d8 <_start@@Base+0x99c4>
   1e7c4:	cmp	r2, #1
   1e7c8:	ble	1e7d8 <_start@@Base+0x99c4>
   1e7cc:	ldrb	r3, [r4, #1]
   1e7d0:	cmp	r3, #34	; 0x22
   1e7d4:	beq	1ea88 <_start@@Base+0x9c74>
   1e7d8:	mov	r1, r4
   1e7dc:	mov	r2, r6
   1e7e0:	mov	r0, r7
   1e7e4:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1e7e8:	mov	r5, r0
   1e7ec:	sub	r3, r6, r5
   1e7f0:	cmp	r3, #1
   1e7f4:	ble	1e808 <_start@@Base+0x99f4>
   1e7f8:	ldrb	r3, [r5]
   1e7fc:	cmp	r3, #32
   1e800:	bhi	1e81c <_start@@Base+0x9a08>
   1e804:	beq	1e9ec <_start@@Base+0x9bd8>
   1e808:	mov	r1, r5
   1e80c:	mov	r2, r6
   1e810:	mov	r0, r7
   1e814:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1e818:	mov	r5, r0
   1e81c:	cmp	r6, r5
   1e820:	beq	1e6d4 <_start@@Base+0x98c0>
   1e824:	ldrb	r3, [r5]
   1e828:	cmp	r3, #44	; 0x2c
   1e82c:	beq	1ea00 <_start@@Base+0x9bec>
   1e830:	cmp	r3, #125	; 0x7d
   1e834:	beq	1e9b4 <_start@@Base+0x9ba0>
   1e838:	mov	r1, r5
   1e83c:	mov	r2, r6
   1e840:	mov	r0, r7
   1e844:	mov	r3, #10
   1e848:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e84c:	mov	r5, r0
   1e850:	b	1e6d4 <_start@@Base+0x98c0>
   1e854:	sub	r3, r2, #1
   1e858:	cmp	r3, #7
   1e85c:	addls	pc, pc, r3, lsl #2
   1e860:	b	1e7d8 <_start@@Base+0x99c4>
   1e864:	b	1e89c <_start@@Base+0x9a88>
   1e868:	b	1e894 <_start@@Base+0x9a80>
   1e86c:	b	1e88c <_start@@Base+0x9a78>
   1e870:	b	1e884 <_start@@Base+0x9a70>
   1e874:	b	1e884 <_start@@Base+0x9a70>
   1e878:	b	1e884 <_start@@Base+0x9a70>
   1e87c:	b	1e77c <_start@@Base+0x9968>
   1e880:	b	1e77c <_start@@Base+0x9968>
   1e884:	mov	r3, #0
   1e888:	b	1e784 <_start@@Base+0x9970>
   1e88c:	mov	r3, #0
   1e890:	b	1e78c <_start@@Base+0x9978>
   1e894:	mov	r3, #0
   1e898:	b	1e794 <_start@@Base+0x9980>
   1e89c:	mov	r3, #0
   1e8a0:	b	1e79c <_start@@Base+0x9988>
   1e8a4:	cmp	r2, #1
   1e8a8:	ble	1e7d8 <_start@@Base+0x99c4>
   1e8ac:	ldrb	r3, [r4, #1]
   1e8b0:	cmp	r3, #34	; 0x22
   1e8b4:	bne	1e7d8 <_start@@Base+0x99c4>
   1e8b8:	add	r1, r4, #2
   1e8bc:	sub	r3, r6, r1
   1e8c0:	cmp	r3, #1
   1e8c4:	ble	1e8d8 <_start@@Base+0x9ac4>
   1e8c8:	ldrb	r3, [r4, #2]
   1e8cc:	cmp	r3, #32
   1e8d0:	bhi	1e8e8 <_start@@Base+0x9ad4>
   1e8d4:	beq	1ecb0 <_start@@Base+0x9e9c>
   1e8d8:	mov	r2, r6
   1e8dc:	mov	r0, r7
   1e8e0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1e8e4:	mov	r1, r0
   1e8e8:	cmp	r6, r1
   1e8ec:	beq	1e8fc <_start@@Base+0x9ae8>
   1e8f0:	ldrb	r3, [r1]
   1e8f4:	cmp	r3, #58	; 0x3a
   1e8f8:	beq	1ecec <_start@@Base+0x9ed8>
   1e8fc:	mov	r3, #4
   1e900:	mov	r2, r6
   1e904:	mov	r0, r7
   1e908:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e90c:	mov	sl, r0
   1e910:	cmp	r4, sl
   1e914:	beq	1e7d8 <_start@@Base+0x99c4>
   1e918:	mov	r3, #0
   1e91c:	mov	r0, #0
   1e920:	mov	r1, #0
   1e924:	cmp	r6, sl
   1e928:	strb	r3, [sp, #18]
   1e92c:	str	r3, [sp, #20]
   1e930:	strd	r0, [sp, #24]
   1e934:	beq	1ea80 <_start@@Base+0x9c6c>
   1e938:	add	r0, sp, #24
   1e93c:	add	r3, sp, #20
   1e940:	mov	r2, r6
   1e944:	mov	r1, sl
   1e948:	str	r0, [sp]
   1e94c:	mov	r0, r7
   1e950:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1e954:	cmp	sl, r0
   1e958:	mov	r5, r0
   1e95c:	bne	1eb70 <_start@@Base+0x9d5c>
   1e960:	add	r0, sp, #18
   1e964:	mov	r2, r6
   1e968:	ldr	r3, [sp, #12]
   1e96c:	mov	r1, r5
   1e970:	str	r0, [sp]
   1e974:	mov	r0, r7
   1e978:	bl	19b68 <_start@@Base+0x4d54>
   1e97c:	cmp	r6, r0
   1e980:	cmpne	r0, r5
   1e984:	beq	1ed3c <_start@@Base+0x9f28>
   1e988:	ldrsb	r2, [sp, #18]
   1e98c:	mov	r5, r0
   1e990:	strb	r2, [fp, #2]
   1e994:	b	1e7ec <_start@@Base+0x99d8>
   1e998:	mov	r1, r4
   1e99c:	mov	r3, #5
   1e9a0:	mov	r2, r6
   1e9a4:	mov	r0, r7
   1e9a8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1e9ac:	mov	r4, r0
   1e9b0:	b	1e770 <_start@@Base+0x995c>
   1e9b4:	add	r1, r5, #1
   1e9b8:	sub	r3, r6, r1
   1e9bc:	cmp	r3, #1
   1e9c0:	ble	1e9d8 <_start@@Base+0x9bc4>
   1e9c4:	ldrb	r3, [r5, #1]
   1e9c8:	cmp	r3, #32
   1e9cc:	movhi	r5, r1
   1e9d0:	bhi	1e6d4 <_start@@Base+0x98c0>
   1e9d4:	beq	1ebfc <_start@@Base+0x9de8>
   1e9d8:	mov	r2, r6
   1e9dc:	mov	r0, r7
   1e9e0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1e9e4:	mov	r5, r0
   1e9e8:	b	1e6d4 <_start@@Base+0x98c0>
   1e9ec:	ldrb	r3, [r5, #1]
   1e9f0:	cmp	r3, #32
   1e9f4:	addhi	r5, r5, #1
   1e9f8:	bls	1e808 <_start@@Base+0x99f4>
   1e9fc:	b	1e81c <_start@@Base+0x9a08>
   1ea00:	add	r4, r5, #1
   1ea04:	sub	r3, r6, r4
   1ea08:	cmp	r3, #1
   1ea0c:	ble	1ea20 <_start@@Base+0x9c0c>
   1ea10:	ldrb	r3, [r5, #1]
   1ea14:	cmp	r3, #32
   1ea18:	bhi	1ea34 <_start@@Base+0x9c20>
   1ea1c:	beq	1ec7c <_start@@Base+0x9e68>
   1ea20:	mov	r1, r4
   1ea24:	mov	r2, r6
   1ea28:	mov	r0, r7
   1ea2c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ea30:	mov	r4, r0
   1ea34:	cmp	r6, r4
   1ea38:	beq	1ec94 <_start@@Base+0x9e80>
   1ea3c:	ldrb	r3, [r4]
   1ea40:	cmp	r3, #125	; 0x7d
   1ea44:	bne	1e758 <_start@@Base+0x9944>
   1ea48:	add	r5, r4, #1
   1ea4c:	sub	r3, r6, r5
   1ea50:	cmp	r3, #1
   1ea54:	ble	1ea68 <_start@@Base+0x9c54>
   1ea58:	ldrb	r3, [r4, #1]
   1ea5c:	cmp	r3, #32
   1ea60:	bhi	1e6d4 <_start@@Base+0x98c0>
   1ea64:	beq	1ecd8 <_start@@Base+0x9ec4>
   1ea68:	mov	r1, r5
   1ea6c:	mov	r2, r6
   1ea70:	mov	r0, r7
   1ea74:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ea78:	mov	r5, r0
   1ea7c:	b	1e6d4 <_start@@Base+0x98c0>
   1ea80:	mov	r5, r6
   1ea84:	b	1e960 <_start@@Base+0x9b4c>
   1ea88:	add	r1, r4, #2
   1ea8c:	sub	r3, r6, r1
   1ea90:	cmp	r3, #1
   1ea94:	ble	1eaa8 <_start@@Base+0x9c94>
   1ea98:	ldrb	r3, [r4, #2]
   1ea9c:	cmp	r3, #32
   1eaa0:	bhi	1eab8 <_start@@Base+0x9ca4>
   1eaa4:	beq	1ecc4 <_start@@Base+0x9eb0>
   1eaa8:	mov	r2, r6
   1eaac:	mov	r0, r7
   1eab0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1eab4:	mov	r1, r0
   1eab8:	cmp	r6, r1
   1eabc:	beq	1eacc <_start@@Base+0x9cb8>
   1eac0:	ldrb	r3, [r1]
   1eac4:	cmp	r3, #58	; 0x3a
   1eac8:	beq	1ed24 <_start@@Base+0x9f10>
   1eacc:	mov	r3, #4
   1ead0:	mov	r2, r6
   1ead4:	mov	r0, r7
   1ead8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1eadc:	mov	sl, r0
   1eae0:	cmp	r4, sl
   1eae4:	beq	1e7d8 <_start@@Base+0x99c4>
   1eae8:	mov	r3, #0
   1eaec:	mov	r0, #0
   1eaf0:	mov	r1, #0
   1eaf4:	cmp	r6, sl
   1eaf8:	strh	r3, [sp, #18]
   1eafc:	str	r3, [sp, #20]
   1eb00:	strd	r0, [sp, #24]
   1eb04:	beq	1eb68 <_start@@Base+0x9d54>
   1eb08:	add	r0, sp, #24
   1eb0c:	add	r3, sp, #20
   1eb10:	mov	r2, r6
   1eb14:	mov	r1, sl
   1eb18:	str	r0, [sp]
   1eb1c:	mov	r0, r7
   1eb20:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1eb24:	cmp	sl, r0
   1eb28:	mov	r5, r0
   1eb2c:	bne	1ebb0 <_start@@Base+0x9d9c>
   1eb30:	add	r0, sp, #18
   1eb34:	mov	r2, r6
   1eb38:	ldr	r3, [sp, #8]
   1eb3c:	mov	r1, r5
   1eb40:	str	r0, [sp]
   1eb44:	mov	r0, r7
   1eb48:	bl	1995c <_start@@Base+0x4b48>
   1eb4c:	cmp	r6, r0
   1eb50:	cmpne	r0, r5
   1eb54:	beq	1ed3c <_start@@Base+0x9f28>
   1eb58:	ldrsh	r2, [sp, #18]
   1eb5c:	mov	r5, r0
   1eb60:	strh	r2, [fp]
   1eb64:	b	1e7ec <_start@@Base+0x99d8>
   1eb68:	mov	r5, r6
   1eb6c:	b	1eb30 <_start@@Base+0x9d1c>
   1eb70:	ldr	r1, [sp, #20]
   1eb74:	ldrd	r2, [sp, #24]
   1eb78:	cmp	r1, #0
   1eb7c:	beq	1ec10 <_start@@Base+0x9dfc>
   1eb80:	cmp	r3, #0
   1eb84:	cmpeq	r2, #128	; 0x80
   1eb88:	rsbls	r2, r2, #0
   1eb8c:	sxtbls	r2, r2
   1eb90:	bls	1e990 <_start@@Base+0x9b7c>
   1eb94:	mov	r1, r0
   1eb98:	mov	r3, #8
   1eb9c:	mov	r2, r6
   1eba0:	mov	r0, r7
   1eba4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1eba8:	mov	r5, r0
   1ebac:	b	1ec38 <_start@@Base+0x9e24>
   1ebb0:	ldr	r1, [sp, #20]
   1ebb4:	ldrd	r2, [sp, #24]
   1ebb8:	cmp	r1, #0
   1ebbc:	beq	1ec48 <_start@@Base+0x9e34>
   1ebc0:	cmp	r3, #0
   1ebc4:	cmpeq	r2, #32768	; 0x8000
   1ebc8:	rsbls	r2, r2, #0
   1ebcc:	sxthls	r2, r2
   1ebd0:	bls	1eb60 <_start@@Base+0x9d4c>
   1ebd4:	mov	r1, r0
   1ebd8:	mov	r3, #8
   1ebdc:	mov	r2, r6
   1ebe0:	mov	r0, r7
   1ebe4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ebe8:	mov	r5, r0
   1ebec:	cmp	sl, r5
   1ebf0:	ldrshne	r2, [sp, #18]
   1ebf4:	bne	1eb60 <_start@@Base+0x9d4c>
   1ebf8:	b	1eb30 <_start@@Base+0x9d1c>
   1ebfc:	ldrb	r3, [r5, #2]
   1ec00:	cmp	r3, #32
   1ec04:	addhi	r5, r5, #2
   1ec08:	bls	1e9d8 <_start@@Base+0x9bc4>
   1ec0c:	b	1e6d4 <_start@@Base+0x98c0>
   1ec10:	cmp	r3, #0
   1ec14:	cmpeq	r2, #127	; 0x7f
   1ec18:	sxtbls	r2, r2
   1ec1c:	bls	1e990 <_start@@Base+0x9b7c>
   1ec20:	mov	r1, r0
   1ec24:	mov	r3, #7
   1ec28:	mov	r2, r6
   1ec2c:	mov	r0, r7
   1ec30:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ec34:	mov	r5, r0
   1ec38:	cmp	sl, r5
   1ec3c:	ldrsbne	r2, [sp, #18]
   1ec40:	bne	1e990 <_start@@Base+0x9b7c>
   1ec44:	b	1e960 <_start@@Base+0x9b4c>
   1ec48:	mov	r1, #0
   1ec4c:	movw	r0, #32767	; 0x7fff
   1ec50:	cmp	r3, r1
   1ec54:	cmpeq	r2, r0
   1ec58:	sxthls	r2, r2
   1ec5c:	bls	1eb60 <_start@@Base+0x9d4c>
   1ec60:	mov	r1, r5
   1ec64:	mov	r3, #7
   1ec68:	mov	r2, r6
   1ec6c:	mov	r0, r7
   1ec70:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ec74:	mov	r5, r0
   1ec78:	b	1ebec <_start@@Base+0x9dd8>
   1ec7c:	ldrb	r3, [r5, #2]
   1ec80:	cmp	r3, #32
   1ec84:	addhi	r4, r5, #2
   1ec88:	bls	1ea20 <_start@@Base+0x9c0c>
   1ec8c:	cmp	r6, r4
   1ec90:	bne	1ea3c <_start@@Base+0x9c28>
   1ec94:	mov	r0, r7
   1ec98:	mov	r3, #10
   1ec9c:	mov	r2, r6
   1eca0:	mov	r1, r6
   1eca4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1eca8:	mov	r5, r0
   1ecac:	b	1e6d4 <_start@@Base+0x98c0>
   1ecb0:	ldrb	r3, [r4, #3]
   1ecb4:	cmp	r3, #32
   1ecb8:	addhi	r1, r4, #3
   1ecbc:	bls	1e8d8 <_start@@Base+0x9ac4>
   1ecc0:	b	1e8e8 <_start@@Base+0x9ad4>
   1ecc4:	ldrb	r3, [r4, #3]
   1ecc8:	cmp	r3, #32
   1eccc:	addhi	r1, r4, #3
   1ecd0:	bls	1eaa8 <_start@@Base+0x9c94>
   1ecd4:	b	1eab8 <_start@@Base+0x9ca4>
   1ecd8:	ldrb	r3, [r4, #2]
   1ecdc:	cmp	r3, #32
   1ece0:	addhi	r5, r4, #2
   1ece4:	bls	1ea68 <_start@@Base+0x9c54>
   1ece8:	b	1e6d4 <_start@@Base+0x98c0>
   1ecec:	add	sl, r1, #1
   1ecf0:	sub	r3, r6, sl
   1ecf4:	cmp	r3, #1
   1ecf8:	ble	1ed0c <_start@@Base+0x9ef8>
   1ecfc:	ldrb	r3, [r1, #1]
   1ed00:	cmp	r3, #32
   1ed04:	bhi	1e910 <_start@@Base+0x9afc>
   1ed08:	beq	1ed84 <_start@@Base+0x9f70>
   1ed0c:	mov	r1, sl
   1ed10:	mov	r2, r6
   1ed14:	mov	r0, r7
   1ed18:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   1ed1c:	mov	sl, r0
   1ed20:	b	1e910 <_start@@Base+0x9afc>
   1ed24:	add	r1, r1, #1
   1ed28:	mov	r2, r6
   1ed2c:	mov	r0, r7
   1ed30:	bl	16ef8 <_start@@Base+0x20e4>
   1ed34:	mov	sl, r0
   1ed38:	b	1eae0 <_start@@Base+0x9ccc>
   1ed3c:	mov	r1, r0
   1ed40:	mov	r2, r6
   1ed44:	mov	r0, r7
   1ed48:	mov	r3, #33	; 0x21
   1ed4c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ed50:	mov	r5, r0
   1ed54:	b	1e6d4 <_start@@Base+0x98c0>
   1ed58:	ldrb	r3, [r1, #2]
   1ed5c:	cmp	r3, #32
   1ed60:	addhi	r4, r1, #2
   1ed64:	bls	1e714 <_start@@Base+0x9900>
   1ed68:	b	1e728 <_start@@Base+0x9914>
   1ed6c:	mov	r2, r6
   1ed70:	add	r1, r4, #1
   1ed74:	mov	r0, r7
   1ed78:	bl	16ef8 <_start@@Base+0x20e4>
   1ed7c:	mov	r5, r0
   1ed80:	b	1e6d4 <_start@@Base+0x98c0>
   1ed84:	ldrb	r3, [r1, #2]
   1ed88:	cmp	r3, #32
   1ed8c:	addhi	sl, r1, #2
   1ed90:	bls	1ed0c <_start@@Base+0x9ef8>
   1ed94:	b	1e910 <_start@@Base+0x9afc>
   1ed98:	andeq	r5, r3, ip, lsr r9
   1ed9c:	andeq	r5, r3, r4, lsr r9
   1eda0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eda4:	mov	ip, r3
   1eda8:	strd	r6, [sp, #8]
   1edac:	strd	r8, [sp, #16]
   1edb0:	mov	r9, r2
   1edb4:	strd	sl, [sp, #24]
   1edb8:	mov	fp, r0
   1edbc:	mov	sl, r1
   1edc0:	str	lr, [sp, #32]
   1edc4:	mov	r1, #36	; 0x24
   1edc8:	vpush	{d8-d9}
   1edcc:	sub	sp, sp, #372	; 0x174
   1edd0:	ldr	r0, [r0]
   1edd4:	str	r3, [sp, #84]	; 0x54
   1edd8:	mov	r3, #0
   1eddc:	str	r3, [ip]
   1ede0:	bl	26d60 <flatcc_builder_start_table@@Base>
   1ede4:	cmp	r0, #0
   1ede8:	beq	1ee28 <_start@@Base+0xa014>
   1edec:	mov	r2, r9
   1edf0:	mov	r1, sl
   1edf4:	mov	r0, fp
   1edf8:	mov	r3, #33	; 0x21
   1edfc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1ee00:	mov	r4, r0
   1ee04:	mov	r0, r4
   1ee08:	add	sp, sp, #372	; 0x174
   1ee0c:	vpop	{d8-d9}
   1ee10:	ldrd	r4, [sp]
   1ee14:	ldrd	r6, [sp, #8]
   1ee18:	ldrd	r8, [sp, #16]
   1ee1c:	ldrd	sl, [sp, #24]
   1ee20:	add	sp, sp, #32
   1ee24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee28:	add	r0, sp, #344	; 0x158
   1ee2c:	mov	r3, #1
   1ee30:	mov	r2, r9
   1ee34:	mov	r1, sl
   1ee38:	str	r0, [sp]
   1ee3c:	mov	r0, fp
   1ee40:	bl	2ec98 <flatcc_json_parser_prepare_unions@@Base>
   1ee44:	cmp	r9, r0
   1ee48:	beq	1edec <_start@@Base+0x9fd8>
   1ee4c:	add	r8, sp, #336	; 0x150
   1ee50:	mov	r1, sl
   1ee54:	mov	r3, r8
   1ee58:	mov	r2, r9
   1ee5c:	mov	r0, fp
   1ee60:	bl	18e0c <_start@@Base+0x3ff8>
   1ee64:	ldr	r3, [sp, #336]	; 0x150
   1ee68:	mov	sl, r0
   1ee6c:	cmp	r3, #0
   1ee70:	beq	1f6e0 <_start@@Base+0xa8cc>
   1ee74:	str	r8, [sp, #28]
   1ee78:	cmp	sl, r9
   1ee7c:	moveq	r6, r9
   1ee80:	beq	1ee94 <_start@@Base+0xa080>
   1ee84:	ldrb	r3, [sl]
   1ee88:	cmp	r3, #34	; 0x22
   1ee8c:	addeq	r6, sl, #1
   1ee90:	bne	1f124 <_start@@Base+0xa310>
   1ee94:	mov	r1, r9
   1ee98:	mov	r0, r6
   1ee9c:	bl	14f08 <_start@@Base+0xf4>
   1eea0:	add	r3, pc, #856	; 0x358
   1eea4:	ldrd	r2, [r3]
   1eea8:	mov	r4, r0
   1eeac:	mov	r5, r1
   1eeb0:	strd	r4, [sp, #16]
   1eeb4:	cmp	r1, r3
   1eeb8:	cmpeq	r0, r2
   1eebc:	bhi	1f018 <_start@@Base+0xa204>
   1eec0:	add	r3, pc, #832	; 0x340
   1eec4:	ldrd	r2, [r3]
   1eec8:	cmp	r1, r3
   1eecc:	cmpeq	r0, r2
   1eed0:	bhi	1f140 <_start@@Base+0xa32c>
   1eed4:	add	r3, pc, #820	; 0x334
   1eed8:	ldrd	r2, [r3]
   1eedc:	cmp	r1, r3
   1eee0:	cmpeq	r0, r2
   1eee4:	bhi	1f4a8 <_start@@Base+0xa694>
   1eee8:	and	r1, r0, #-16777216	; 0xff000000
   1eeec:	add	r3, pc, #804	; 0x324
   1eef0:	ldrd	r2, [r3]
   1eef4:	str	r1, [sp, #48]	; 0x30
   1eef8:	str	r5, [sp, #52]	; 0x34
   1eefc:	ldrd	r0, [sp, #48]	; 0x30
   1ef00:	cmp	r1, r3
   1ef04:	cmpeq	r0, r2
   1ef08:	beq	1fe8c <_start@@Base+0xb078>
   1ef0c:	add	r3, pc, #780	; 0x30c
   1ef10:	ldrd	r2, [r3]
   1ef14:	ldrd	r0, [sp, #48]	; 0x30
   1ef18:	cmp	r1, r3
   1ef1c:	cmpeq	r0, r2
   1ef20:	bne	211b0 <_start@@Base+0xc39c>
   1ef24:	sub	r3, r9, r6
   1ef28:	cmp	r3, #5
   1ef2c:	ble	20cfc <_start@@Base+0xbee8>
   1ef30:	mov	r3, #5
   1ef34:	mov	r2, r9
   1ef38:	mov	r1, r6
   1ef3c:	mov	r0, fp
   1ef40:	bl	1a220 <_start@@Base+0x540c>
   1ef44:	cmp	r0, r6
   1ef48:	mov	r4, r0
   1ef4c:	beq	20cfc <_start@@Base+0xbee8>
   1ef50:	mov	r3, #0
   1ef54:	mov	r0, #0
   1ef58:	mov	r1, #0
   1ef5c:	cmp	r9, r4
   1ef60:	strb	r3, [sp, #352]	; 0x160
   1ef64:	str	r3, [sp, #356]	; 0x164
   1ef68:	add	r3, sp, #360	; 0x168
   1ef6c:	strd	r0, [r3]
   1ef70:	beq	223d8 <_start@@Base+0xd5c4>
   1ef74:	add	r0, sp, #360	; 0x168
   1ef78:	add	r3, sp, #356	; 0x164
   1ef7c:	mov	r2, r9
   1ef80:	mov	r1, r4
   1ef84:	str	r0, [sp]
   1ef88:	mov	r0, fp
   1ef8c:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1ef90:	cmp	r4, r0
   1ef94:	mov	sl, r0
   1ef98:	bne	22410 <_start@@Base+0xd5fc>
   1ef9c:	ldr	r3, [pc, #708]	; 1f268 <_start@@Base+0xa454>
   1efa0:	add	ip, sp, #352	; 0x160
   1efa4:	mov	r2, r9
   1efa8:	mov	r1, sl
   1efac:	mov	r0, fp
   1efb0:	str	ip, [sp]
   1efb4:	add	r3, pc, r3
   1efb8:	add	r3, r3, #276	; 0x114
   1efbc:	bl	19b68 <_start@@Base+0x4d54>
   1efc0:	cmp	r9, r0
   1efc4:	cmpne	r0, sl
   1efc8:	beq	203d8 <_start@@Base+0xb5c4>
   1efcc:	add	r3, sp, #352	; 0x160
   1efd0:	mov	sl, r0
   1efd4:	ldrsb	r2, [r3]
   1efd8:	cmp	r2, #8
   1efdc:	bne	1efec <_start@@Base+0xa1d8>
   1efe0:	ldr	r3, [fp, #8]
   1efe4:	tst	r3, #2
   1efe8:	beq	1f6bc <_start@@Base+0xa8a8>
   1efec:	mov	r3, #1
   1eff0:	mov	r1, #6
   1eff4:	ldr	r0, [fp]
   1eff8:	mov	r2, r3
   1effc:	bl	28894 <flatcc_builder_table_add@@Base>
   1f000:	cmp	r0, #0
   1f004:	beq	1edec <_start@@Base+0x9fd8>
   1f008:	add	r3, sp, #352	; 0x160
   1f00c:	ldrsb	r3, [r3]
   1f010:	strb	r3, [r0]
   1f014:	b	1f6bc <_start@@Base+0xa8a8>
   1f018:	add	r3, pc, #520	; 0x208
   1f01c:	ldrd	r2, [r3]
   1f020:	ldrd	r0, [sp, #16]
   1f024:	cmp	r1, r3
   1f028:	cmpeq	r0, r2
   1f02c:	bhi	1f270 <_start@@Base+0xa45c>
   1f030:	add	r3, pc, #504	; 0x1f8
   1f034:	ldrd	r2, [r3]
   1f038:	cmp	r1, r3
   1f03c:	cmpeq	r0, r2
   1f040:	beq	1f738 <_start@@Base+0xa924>
   1f044:	add	r3, pc, #492	; 0x1ec
   1f048:	ldrd	r2, [r3]
   1f04c:	ldrd	r0, [sp, #16]
   1f050:	cmp	r1, r3
   1f054:	cmpeq	r0, r2
   1f058:	bhi	1f8e4 <_start@@Base+0xaad0>
   1f05c:	add	r3, pc, #476	; 0x1dc
   1f060:	ldrd	r2, [r3]
   1f064:	cmp	r1, r3
   1f068:	cmpeq	r0, r2
   1f06c:	beq	21340 <_start@@Base+0xc52c>
   1f070:	add	r3, pc, #464	; 0x1d0
   1f074:	ldrd	r2, [r3]
   1f078:	ldrd	r0, [sp, #16]
   1f07c:	cmp	r1, r3
   1f080:	cmpeq	r0, r2
   1f084:	bne	204ec <_start@@Base+0xb6d8>
   1f088:	sub	r3, r9, r6
   1f08c:	cmp	r3, #8
   1f090:	ble	223e0 <_start@@Base+0xd5cc>
   1f094:	mov	r3, #8
   1f098:	mov	r2, r9
   1f09c:	mov	r1, r6
   1f0a0:	mov	r0, fp
   1f0a4:	bl	1a220 <_start@@Base+0x540c>
   1f0a8:	cmp	r6, r0
   1f0ac:	mov	r4, r0
   1f0b0:	beq	223e0 <_start@@Base+0xd5cc>
   1f0b4:	mov	r2, #0
   1f0b8:	sub	r3, r9, r0
   1f0bc:	cmp	r3, #3
   1f0c0:	strb	r2, [sp, #352]	; 0x160
   1f0c4:	ble	20db0 <_start@@Base+0xbf9c>
   1f0c8:	ldrb	r2, [r0]
   1f0cc:	cmp	r2, #116	; 0x74
   1f0d0:	beq	22834 <_start@@Base+0xda20>
   1f0d4:	cmp	r3, #4
   1f0d8:	beq	20db0 <_start@@Base+0xbf9c>
   1f0dc:	ldr	r1, [pc, #392]	; 1f26c <_start@@Base+0xa458>
   1f0e0:	mov	r2, #5
   1f0e4:	mov	r0, r4
   1f0e8:	add	r1, pc, r1
   1f0ec:	bl	14528 <memcmp@plt>
   1f0f0:	cmp	r0, #0
   1f0f4:	addeq	sl, r4, #5
   1f0f8:	bne	20db0 <_start@@Base+0xbf9c>
   1f0fc:	mov	r3, #1
   1f100:	mov	r1, #15
   1f104:	ldr	r0, [fp]
   1f108:	mov	r2, r3
   1f10c:	bl	28894 <flatcc_builder_table_add@@Base>
   1f110:	cmp	r0, #0
   1f114:	beq	1edec <_start@@Base+0x9fd8>
   1f118:	ldrb	r3, [sp, #352]	; 0x160
   1f11c:	strb	r3, [r0]
   1f120:	b	1f6bc <_start@@Base+0xa8a8>
   1f124:	mov	r1, sl
   1f128:	mov	r3, #5
   1f12c:	mov	r2, r9
   1f130:	mov	r0, fp
   1f134:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   1f138:	mov	r6, r0
   1f13c:	b	1ee94 <_start@@Base+0xa080>
   1f140:	add	r3, pc, #264	; 0x108
   1f144:	ldrd	r2, [r3]
   1f148:	ldrd	r4, [sp, #16]
   1f14c:	cmp	r5, r3
   1f150:	cmpeq	r4, r2
   1f154:	bhi	1f63c <_start@@Base+0xa828>
   1f158:	add	r3, pc, #248	; 0xf8
   1f15c:	ldrd	r2, [r3]
   1f160:	cmp	r5, r3
   1f164:	cmpeq	r4, r2
   1f168:	bhi	1fc40 <_start@@Base+0xae2c>
   1f16c:	mov	r1, #0
   1f170:	add	r3, pc, #232	; 0xe8
   1f174:	ldrd	r2, [r3]
   1f178:	str	r1, [sp, #120]	; 0x78
   1f17c:	str	r5, [sp, #124]	; 0x7c
   1f180:	ldrd	r0, [sp, #120]	; 0x78
   1f184:	cmp	r1, r3
   1f188:	cmpeq	r0, r2
   1f18c:	bne	204bc <_start@@Base+0xb6a8>
   1f190:	sub	r3, r9, r6
   1f194:	cmp	r3, #4
   1f198:	ble	223c0 <_start@@Base+0xd5ac>
   1f19c:	mov	r1, r6
   1f1a0:	mov	r3, #4
   1f1a4:	mov	r2, r9
   1f1a8:	mov	r0, fp
   1f1ac:	bl	1a220 <_start@@Base+0x540c>
   1f1b0:	cmp	r6, r0
   1f1b4:	mov	r1, r0
   1f1b8:	beq	223c0 <_start@@Base+0xd5ac>
   1f1bc:	add	r3, sp, #340	; 0x154
   1f1c0:	mov	r2, r9
   1f1c4:	mov	r0, fp
   1f1c8:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1f1cc:	ldr	r3, [sp, #340]	; 0x154
   1f1d0:	mov	sl, r0
   1f1d4:	cmp	r3, #0
   1f1d8:	beq	1edec <_start@@Base+0x9fd8>
   1f1dc:	mov	r1, #3
   1f1e0:	ldr	r0, [fp]
   1f1e4:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1f1e8:	cmp	r0, #0
   1f1ec:	beq	1edec <_start@@Base+0x9fd8>
   1f1f0:	ldr	r3, [sp, #340]	; 0x154
   1f1f4:	str	r3, [r0]
   1f1f8:	b	1f6bc <_start@@Base+0xa8a8>
   1f1fc:	nop	{0}
   1f200:	cmnvs	r2, r0, ror #4
   1f204:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f208:			; <UNDEFINED> instruction: 0xffffffff
   1f20c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1f210:			; <UNDEFINED> instruction: 0xffffffff
   1f214:			; <UNDEFINED> instruction: 0x666c6577
   1f218:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1f21c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1f220:	andvc	r0, r0, #0
   1f224:	cmnvs	pc, #28416	; 0x6f00
   1f228:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1f22c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f230:	cmnvs	r2, r1, ror #4
   1f234:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f238:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1f23c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f240:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1f244:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f248:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1f24c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f250:			; <UNDEFINED> instruction: 0xffffffff
   1f254:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1f258:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1f25c:	rsbvc	r7, r1, r5, ror #4
   1f260:	andeq	r0, r0, r0
   1f264:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1f268:	andeq	r5, r3, ip, asr #1
   1f26c:	andeq	pc, r1, r8, lsr r5	; <UNPREDICTABLE>
   1f270:	add	r3, pc, #896	; 0x380
   1f274:	ldrd	r2, [r3]
   1f278:	ldrd	r4, [sp, #16]
   1f27c:	cmp	r5, r3
   1f280:	cmpeq	r4, r2
   1f284:	bhi	1f354 <_start@@Base+0xa540>
   1f288:	lsr	r3, r4, #16
   1f28c:	str	r3, [sp, #32]
   1f290:	ldr	r1, [sp, #32]
   1f294:	str	r5, [sp, #36]	; 0x24
   1f298:	add	r3, pc, #864	; 0x360
   1f29c:	ldrd	r2, [r3]
   1f2a0:	lsl	r1, r1, #16
   1f2a4:	str	r1, [sp, #32]
   1f2a8:	ldrd	r0, [sp, #32]
   1f2ac:	cmp	r1, r3
   1f2b0:	cmpeq	r0, r2
   1f2b4:	bne	1fe74 <_start@@Base+0xb060>
   1f2b8:	sub	r3, r9, r6
   1f2bc:	cmp	r3, #6
   1f2c0:	ble	21814 <_start@@Base+0xca00>
   1f2c4:	mov	r3, #6
   1f2c8:	mov	r2, r9
   1f2cc:	mov	r1, r6
   1f2d0:	mov	r0, fp
   1f2d4:	bl	1a220 <_start@@Base+0x540c>
   1f2d8:	cmp	r6, r0
   1f2dc:	mov	r4, r0
   1f2e0:	beq	21814 <_start@@Base+0xca00>
   1f2e4:	mov	ip, #0
   1f2e8:	add	r5, sp, #360	; 0x168
   1f2ec:	mov	r1, r0
   1f2f0:	mov	r2, r9
   1f2f4:	mov	r3, r5
   1f2f8:	mov	r0, fp
   1f2fc:	str	ip, [sp, #360]	; 0x168
   1f300:	bl	2d410 <flatcc_json_parser_float@@Base>
   1f304:	cmp	r0, r4
   1f308:	mov	sl, r0
   1f30c:	beq	21cd4 <_start@@Base+0xcec0>
   1f310:	vldr	s15, [sp, #360]	; 0x168
   1f314:	vcmp.f32	s15, #0.0
   1f318:	vmrs	APSR_nzcv, fpscr
   1f31c:	bne	1f32c <_start@@Base+0xa518>
   1f320:	ldr	r3, [fp, #8]
   1f324:	tst	r3, #2
   1f328:	beq	1f6bc <_start@@Base+0xa8a8>
   1f32c:	mov	r3, #4
   1f330:	mov	r1, #27
   1f334:	ldr	r0, [fp]
   1f338:	mov	r2, r3
   1f33c:	bl	28894 <flatcc_builder_table_add@@Base>
   1f340:	cmp	r0, #0
   1f344:	beq	1edec <_start@@Base+0x9fd8>
   1f348:	ldr	r3, [sp, #360]	; 0x168
   1f34c:	str	r3, [r0]
   1f350:	b	1f6bc <_start@@Base+0xa8a8>
   1f354:	add	r3, pc, #684	; 0x2ac
   1f358:	ldrd	r2, [r3]
   1f35c:	ldrd	r0, [sp, #16]
   1f360:	cmp	r1, r3
   1f364:	cmpeq	r0, r2
   1f368:	beq	2007c <_start@@Base+0xb268>
   1f36c:	add	r3, pc, #668	; 0x29c
   1f370:	ldrd	r2, [r3]
   1f374:	ldrd	r0, [sp, #16]
   1f378:	cmp	r1, r3
   1f37c:	cmpeq	r0, r2
   1f380:	bhi	20258 <_start@@Base+0xb444>
   1f384:	add	r3, pc, #652	; 0x28c
   1f388:	ldrd	r2, [r3]
   1f38c:	cmp	r1, r3
   1f390:	cmpeq	r0, r2
   1f394:	bne	20b54 <_start@@Base+0xbd40>
   1f398:	add	r4, r6, #8
   1f39c:	mov	r1, r9
   1f3a0:	mov	r0, r4
   1f3a4:	bl	14f08 <_start@@Base+0xf4>
   1f3a8:	add	r3, pc, #624	; 0x270
   1f3ac:	ldrd	r2, [r3]
   1f3b0:	cmp	r1, r3
   1f3b4:	cmpeq	r0, r2
   1f3b8:	bne	21c5c <_start@@Base+0xce48>
   1f3bc:	mov	r3, #0
   1f3c0:	add	r6, r6, #16
   1f3c4:	mov	r1, r9
   1f3c8:	mov	r0, r6
   1f3cc:	str	r3, [sp, #264]	; 0x108
   1f3d0:	bl	14f08 <_start@@Base+0xf4>
   1f3d4:	str	r1, [sp, #268]	; 0x10c
   1f3d8:	add	r1, sp, #264	; 0x108
   1f3dc:	add	r3, pc, #580	; 0x244
   1f3e0:	ldrd	r2, [r3]
   1f3e4:	ldrd	r0, [r1]
   1f3e8:	cmp	r1, r3
   1f3ec:	cmpeq	r0, r2
   1f3f0:	bne	21d50 <_start@@Base+0xcf3c>
   1f3f4:	sub	r3, r9, r6
   1f3f8:	cmp	r3, #4
   1f3fc:	ble	22f34 <_start@@Base+0xe120>
   1f400:	mov	r3, #4
   1f404:	mov	r2, r9
   1f408:	mov	r1, r6
   1f40c:	mov	r0, fp
   1f410:	bl	1a220 <_start@@Base+0x540c>
   1f414:	cmp	r6, r0
   1f418:	mov	sl, r0
   1f41c:	beq	22f30 <_start@@Base+0xe11c>
   1f420:	cmp	r9, r0
   1f424:	ldr	r0, [fp]
   1f428:	beq	1f438 <_start@@Base+0xa624>
   1f42c:	ldrb	r3, [sl]
   1f430:	cmp	r3, #91	; 0x5b
   1f434:	beq	23154 <_start@@Base+0xe340>
   1f438:	mov	r3, #0
   1f43c:	mov	r2, r3
   1f440:	mov	r1, r3
   1f444:	bl	25d88 <flatcc_builder_start_buffer@@Base>
   1f448:	cmp	r0, #0
   1f44c:	bne	1edec <_start@@Base+0x9fd8>
   1f450:	mov	r1, sl
   1f454:	add	r3, sp, #340	; 0x154
   1f458:	mov	r2, r9
   1f45c:	mov	r0, fp
   1f460:	bl	1eda0 <_start@@Base+0x9f8c>
   1f464:	ldr	r1, [sp, #340]	; 0x154
   1f468:	mov	sl, r0
   1f46c:	cmp	r1, #0
   1f470:	beq	1edec <_start@@Base+0x9fd8>
   1f474:	ldr	r0, [fp]
   1f478:	bl	25e64 <flatcc_builder_end_buffer@@Base>
   1f47c:	str	r0, [sp, #340]	; 0x154
   1f480:	cmp	r0, #0
   1f484:	beq	1edec <_start@@Base+0x9fd8>
   1f488:	mov	r1, #13
   1f48c:	ldr	r0, [fp]
   1f490:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1f494:	cmp	r0, #0
   1f498:	beq	1edec <_start@@Base+0x9fd8>
   1f49c:	ldr	r3, [sp, #340]	; 0x154
   1f4a0:	str	r3, [r0]
   1f4a4:	b	1f6bc <_start@@Base+0xa8a8>
   1f4a8:	ldrd	r4, [sp, #16]
   1f4ac:	movw	r3, #65535	; 0xffff
   1f4b0:	movt	r3, #26735	; 0x686f
   1f4b4:	mvn	r2, #0
   1f4b8:	cmp	r5, r3
   1f4bc:	cmpeq	r4, r2
   1f4c0:	bhi	1fd88 <_start@@Base+0xaf74>
   1f4c4:	mov	r1, #0
   1f4c8:	add	r3, pc, #352	; 0x160
   1f4cc:	ldrd	r2, [r3]
   1f4d0:	str	r1, [sp, #112]	; 0x70
   1f4d4:	str	r5, [sp, #116]	; 0x74
   1f4d8:	ldrd	r0, [sp, #112]	; 0x70
   1f4dc:	cmp	r1, r3
   1f4e0:	cmpeq	r0, r2
   1f4e4:	bne	204d4 <_start@@Base+0xb6c0>
   1f4e8:	sub	r3, r9, r6
   1f4ec:	cmp	r3, #4
   1f4f0:	ble	218cc <_start@@Base+0xcab8>
   1f4f4:	mov	r3, #4
   1f4f8:	mov	r2, r9
   1f4fc:	mov	r1, r6
   1f500:	mov	r0, fp
   1f504:	bl	1a220 <_start@@Base+0x540c>
   1f508:	cmp	r0, r6
   1f50c:	mov	sl, r0
   1f510:	beq	218cc <_start@@Base+0xcab8>
   1f514:	mov	r2, #1
   1f518:	mvn	r3, #0
   1f51c:	ldr	r0, [fp]
   1f520:	mov	r1, r2
   1f524:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   1f528:	subs	r6, r0, #0
   1f52c:	bne	1edec <_start@@Base+0x9fd8>
   1f530:	ldr	r8, [sp, #28]
   1f534:	mov	r1, sl
   1f538:	mov	r2, r9
   1f53c:	mov	r0, fp
   1f540:	mov	r3, r8
   1f544:	bl	1a14c <_start@@Base+0x5338>
   1f548:	ldr	r3, [sp, #336]	; 0x150
   1f54c:	mov	sl, r0
   1f550:	cmp	r3, #0
   1f554:	beq	22600 <_start@@Base+0xd7ec>
   1f558:	ldr	r7, [pc, #216]	; 1f638 <_start@@Base+0xa824>
   1f55c:	add	r7, pc, r7
   1f560:	add	r7, r7, #292	; 0x124
   1f564:	b	1f594 <_start@@Base+0xa780>
   1f568:	ldrb	ip, [sp, #360]	; 0x168
   1f56c:	mov	r1, r0
   1f570:	mov	r3, r8
   1f574:	mov	r2, r9
   1f578:	mov	r0, fp
   1f57c:	strb	ip, [r5]
   1f580:	bl	1ad0c <_start@@Base+0x5ef8>
   1f584:	ldr	r3, [sp, #336]	; 0x150
   1f588:	mov	sl, r0
   1f58c:	cmp	r3, #0
   1f590:	beq	22600 <_start@@Base+0xd7ec>
   1f594:	mov	r1, #1
   1f598:	ldr	r0, [fp]
   1f59c:	add	r4, sp, #360	; 0x168
   1f5a0:	strb	r6, [sp, #360]	; 0x168
   1f5a4:	bl	26168 <flatcc_builder_extend_vector@@Base>
   1f5a8:	subs	r5, r0, #0
   1f5ac:	mov	r1, sl
   1f5b0:	mov	r3, r4
   1f5b4:	mov	r2, r9
   1f5b8:	mov	r0, fp
   1f5bc:	beq	1edec <_start@@Base+0x9fd8>
   1f5c0:	bl	17d50 <_start@@Base+0x2f3c>
   1f5c4:	cmp	r0, sl
   1f5c8:	bne	1f568 <_start@@Base+0xa754>
   1f5cc:	mov	r3, r7
   1f5d0:	mov	r2, r9
   1f5d4:	str	r4, [sp]
   1f5d8:	mov	r1, sl
   1f5dc:	mov	r0, fp
   1f5e0:	bl	19598 <_start@@Base+0x4784>
   1f5e4:	cmp	r9, r0
   1f5e8:	cmpne	r0, sl
   1f5ec:	bne	1f568 <_start@@Base+0xa754>
   1f5f0:	b	203d8 <_start@@Base+0xb5c4>
   1f5f4:	nop	{0}
   1f5f8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1f5fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f600:	ldrtvs	r0, [r3], -r0
   1f604:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f608:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1f60c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f610:	svcvs	0x00725f6e
   1f614:			; <UNDEFINED> instruction: 0x76656374
   1f618:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1f61c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f620:	cmnvs	r4, r5, ror r2
   1f624:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1f628:	andeq	r0, r0, r0
   1f62c:			; <UNDEFINED> instruction: 0x66666572
   1f630:	andeq	r0, r0, r0
   1f634:			; <UNDEFINED> instruction: 0x666c6578
   1f638:	andeq	r4, r3, r4, lsr #22
   1f63c:	ldrd	r4, [sp, #16]
   1f640:	sub	r7, r9, r6
   1f644:	add	r3, pc, #884	; 0x374
   1f648:	ldrd	r2, [r3]
   1f64c:	and	r1, r4, #-16777216	; 0xff000000
   1f650:	str	r1, [sp, #56]	; 0x38
   1f654:	str	r5, [sp, #60]	; 0x3c
   1f658:	ldrd	r0, [sp, #56]	; 0x38
   1f65c:	cmp	r1, r3
   1f660:	cmpeq	r0, r2
   1f664:	beq	1ff94 <_start@@Base+0xb180>
   1f668:	cmp	r7, #4
   1f66c:	ble	211d4 <_start@@Base+0xc3c0>
   1f670:	mov	r3, #4
   1f674:	mov	r2, r9
   1f678:	mov	r1, r6
   1f67c:	mov	r0, fp
   1f680:	bl	1a220 <_start@@Base+0x540c>
   1f684:	cmp	r6, r0
   1f688:	beq	211d4 <_start@@Base+0xc3c0>
   1f68c:	ldr	ip, [pc, #852]	; 1f9e8 <_start@@Base+0xabd4>
   1f690:	mov	r4, #8
   1f694:	mov	r1, r0
   1f698:	mov	r3, #0
   1f69c:	mov	r2, r9
   1f6a0:	ldr	lr, [sp, #344]	; 0x158
   1f6a4:	mov	r0, fp
   1f6a8:	add	ip, pc, ip
   1f6ac:	stm	sp, {r4, lr}
   1f6b0:	str	ip, [sp, #8]
   1f6b4:	bl	2eda4 <flatcc_json_parser_union@@Base>
   1f6b8:	mov	sl, r0
   1f6bc:	mov	r1, sl
   1f6c0:	mov	r2, r9
   1f6c4:	ldr	r3, [sp, #28]
   1f6c8:	mov	r0, fp
   1f6cc:	bl	1a2e0 <_start@@Base+0x54cc>
   1f6d0:	ldr	r3, [sp, #336]	; 0x150
   1f6d4:	mov	sl, r0
   1f6d8:	cmp	r3, #0
   1f6dc:	bne	1ee78 <_start@@Base+0xa064>
   1f6e0:	ldr	r3, [fp, #20]
   1f6e4:	cmp	r3, #0
   1f6e8:	bne	1edec <_start@@Base+0x9fd8>
   1f6ec:	mov	r1, #3
   1f6f0:	ldr	r0, [fp]
   1f6f4:	bl	2757c <flatcc_builder_check_required_field@@Base>
   1f6f8:	cmp	r0, #0
   1f6fc:	mov	r1, sl
   1f700:	beq	22820 <_start@@Base+0xda0c>
   1f704:	mov	r2, r9
   1f708:	mov	r0, fp
   1f70c:	ldr	r3, [sp, #344]	; 0x158
   1f710:	bl	2ed2c <flatcc_json_parser_finalize_unions@@Base>
   1f714:	mov	r4, r0
   1f718:	ldr	r0, [fp]
   1f71c:	bl	27744 <flatcc_builder_end_table@@Base>
   1f720:	ldr	r3, [sp, #84]	; 0x54
   1f724:	cmp	r0, #0
   1f728:	str	r0, [r3]
   1f72c:	bne	1ee04 <_start@@Base+0x9ff0>
   1f730:	mov	sl, r4
   1f734:	b	1edec <_start@@Base+0x9fd8>
   1f738:	add	r4, r6, #8
   1f73c:	mov	r1, r9
   1f740:	mov	r0, r4
   1f744:	bl	14f08 <_start@@Base+0xf4>
   1f748:	add	r3, pc, #632	; 0x278
   1f74c:	ldrd	r2, [r3]
   1f750:	cmp	r1, r3
   1f754:	cmpeq	r0, r2
   1f758:	bhi	1fef8 <_start@@Base+0xb0e4>
   1f75c:	add	r3, pc, #620	; 0x26c
   1f760:	ldrd	r2, [r3]
   1f764:	cmp	r1, r3
   1f768:	cmpeq	r0, r2
   1f76c:	bne	20504 <_start@@Base+0xb6f0>
   1f770:	sub	r3, r9, r4
   1f774:	cmp	r3, #8
   1f778:	ble	20e50 <_start@@Base+0xc03c>
   1f77c:	mov	r3, #8
   1f780:	mov	r2, r9
   1f784:	mov	r1, r4
   1f788:	mov	r0, fp
   1f78c:	bl	1a220 <_start@@Base+0x540c>
   1f790:	cmp	r4, r0
   1f794:	mov	sl, r0
   1f798:	beq	20e50 <_start@@Base+0xc03c>
   1f79c:	mov	r2, #1
   1f7a0:	mvn	r3, #0
   1f7a4:	ldr	r0, [fp]
   1f7a8:	mov	r1, r2
   1f7ac:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   1f7b0:	cmp	r0, #0
   1f7b4:	bne	1edec <_start@@Base+0x9fd8>
   1f7b8:	ldr	r8, [sp, #28]
   1f7bc:	mov	r1, sl
   1f7c0:	mov	r2, r9
   1f7c4:	mov	r0, fp
   1f7c8:	mov	r3, r8
   1f7cc:	bl	1a14c <_start@@Base+0x5338>
   1f7d0:	ldr	r3, [sp, #336]	; 0x150
   1f7d4:	mov	sl, r0
   1f7d8:	cmp	r3, #0
   1f7dc:	beq	226d4 <_start@@Base+0xd8c0>
   1f7e0:	ldr	r6, [pc, #516]	; 1f9ec <_start@@Base+0xabd8>
   1f7e4:	ldr	r7, [pc, #516]	; 1f9f0 <_start@@Base+0xabdc>
   1f7e8:	add	r6, pc, r6
   1f7ec:	add	r6, r6, #420	; 0x1a4
   1f7f0:	add	r7, pc, r7
   1f7f4:	b	1f824 <_start@@Base+0xaa10>
   1f7f8:	ldrb	ip, [sp, #356]	; 0x164
   1f7fc:	mov	r3, r8
   1f800:	mov	r1, r4
   1f804:	mov	r2, r9
   1f808:	mov	r0, fp
   1f80c:	strb	ip, [r5]
   1f810:	bl	1ad0c <_start@@Base+0x5ef8>
   1f814:	ldr	r3, [sp, #336]	; 0x150
   1f818:	mov	sl, r0
   1f81c:	cmp	r3, #0
   1f820:	beq	226d4 <_start@@Base+0xd8c0>
   1f824:	mov	r3, #0
   1f828:	mov	r1, #1
   1f82c:	ldr	r0, [fp]
   1f830:	strb	r3, [sp, #356]	; 0x164
   1f834:	bl	26168 <flatcc_builder_extend_vector@@Base>
   1f838:	subs	r5, r0, #0
   1f83c:	beq	1edec <_start@@Base+0x9fd8>
   1f840:	sub	r3, r9, sl
   1f844:	cmp	r3, #3
   1f848:	ble	1f880 <_start@@Base+0xaa6c>
   1f84c:	ldrb	r2, [sl]
   1f850:	cmp	r2, #116	; 0x74
   1f854:	beq	2233c <_start@@Base+0xd528>
   1f858:	cmp	r3, #4
   1f85c:	beq	1f880 <_start@@Base+0xaa6c>
   1f860:	mov	r2, #5
   1f864:	mov	r1, r7
   1f868:	mov	r0, sl
   1f86c:	bl	14528 <memcmp@plt>
   1f870:	cmp	r0, #0
   1f874:	addeq	r4, sl, #5
   1f878:	strbeq	r0, [sp, #356]	; 0x164
   1f87c:	beq	1f8a8 <_start@@Base+0xaa94>
   1f880:	add	r3, sp, #360	; 0x168
   1f884:	mov	r2, r9
   1f888:	mov	r1, sl
   1f88c:	mov	r0, fp
   1f890:	bl	17d50 <_start@@Base+0x2f3c>
   1f894:	ldrb	r3, [sp, #360]	; 0x168
   1f898:	mov	r4, r0
   1f89c:	adds	r3, r3, #0
   1f8a0:	movne	r3, #1
   1f8a4:	strb	r3, [sp, #356]	; 0x164
   1f8a8:	cmp	sl, r4
   1f8ac:	bne	1f7f8 <_start@@Base+0xa9e4>
   1f8b0:	add	r0, sp, #356	; 0x164
   1f8b4:	mov	r3, r6
   1f8b8:	mov	r2, r9
   1f8bc:	mov	r1, r4
   1f8c0:	str	r0, [sp]
   1f8c4:	mov	r0, fp
   1f8c8:	bl	191ec <_start@@Base+0x43d8>
   1f8cc:	cmp	r9, r0
   1f8d0:	cmpne	r0, r4
   1f8d4:	mov	sl, r0
   1f8d8:	beq	1edec <_start@@Base+0x9fd8>
   1f8dc:	mov	r4, r0
   1f8e0:	b	1f7f8 <_start@@Base+0xa9e4>
   1f8e4:	add	r3, pc, #236	; 0xec
   1f8e8:	ldrd	r2, [r3]
   1f8ec:	ldrd	r0, [sp, #16]
   1f8f0:	cmp	r1, r3
   1f8f4:	cmpeq	r0, r2
   1f8f8:	bhi	20184 <_start@@Base+0xb370>
   1f8fc:	add	r3, pc, #220	; 0xdc
   1f900:	ldrd	r2, [r3]
   1f904:	cmp	r1, r3
   1f908:	cmpeq	r0, r2
   1f90c:	bne	20b0c <_start@@Base+0xbcf8>
   1f910:	add	r6, r6, #8
   1f914:	mov	r1, r9
   1f918:	mov	r0, r6
   1f91c:	mov	r4, #0
   1f920:	bl	14f08 <_start@@Base+0xf4>
   1f924:	and	r3, r1, #-16777216	; 0xff000000
   1f928:	str	r4, [sp, #208]	; 0xd0
   1f92c:	str	r3, [sp, #212]	; 0xd4
   1f930:	ldrd	r2, [sp, #208]	; 0xd0
   1f934:	cmp	r3, #2030043136	; 0x79000000
   1f938:	cmpeq	r2, #0
   1f93c:	bne	21c74 <_start@@Base+0xce60>
   1f940:	sub	r3, r9, r6
   1f944:	cmp	r3, #1
   1f948:	ble	21fd0 <_start@@Base+0xd1bc>
   1f94c:	mov	r3, #1
   1f950:	mov	r2, r9
   1f954:	mov	r1, r6
   1f958:	mov	r0, fp
   1f95c:	bl	1a220 <_start@@Base+0x540c>
   1f960:	cmp	r6, r0
   1f964:	mov	sl, r0
   1f968:	beq	21fd0 <_start@@Base+0xd1bc>
   1f96c:	mov	r1, #3
   1f970:	ldr	r0, [fp]
   1f974:	str	r4, [sp, #340]	; 0x154
   1f978:	bl	26d60 <flatcc_builder_start_table@@Base>
   1f97c:	cmp	r0, r4
   1f980:	bne	225bc <_start@@Base+0xd7a8>
   1f984:	add	r4, sp, #348	; 0x15c
   1f988:	mov	r1, sl
   1f98c:	mov	r3, r4
   1f990:	mov	r2, r9
   1f994:	mov	r0, fp
   1f998:	bl	18e0c <_start@@Base+0x3ff8>
   1f99c:	ldr	r3, [sp, #348]	; 0x15c
   1f9a0:	mov	sl, r0
   1f9a4:	cmp	r3, #0
   1f9a8:	beq	22960 <_start@@Base+0xdb4c>
   1f9ac:	ldr	r3, [pc, #64]	; 1f9f4 <_start@@Base+0xabe0>
   1f9b0:	add	r3, pc, r3
   1f9b4:	add	r3, r3, #480	; 0x1e0
   1f9b8:	str	r3, [sp, #16]
   1f9bc:	b	1fb44 <_start@@Base+0xad30>
   1f9c0:	strcc	r0, [r0], #-0
   1f9c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f9c8:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1f9cc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1f9d0:	svcvs	0x006f6c73
   1f9d4:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1f9d8:	ldrbvs	pc, [pc, #4095]!	; 209df <_start@@Base+0xbbcb>	; <UNPREDICTABLE>
   1f9dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f9e0:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1f9e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f9e8:	andeq	r3, r0, r0, asr #24
   1f9ec:	muleq	r3, r8, r8
   1f9f0:	andeq	lr, r1, r0, lsr lr
   1f9f4:	ldrdeq	r4, [r3], -r0
   1f9f8:	and	r3, r0, #-16777216	; 0xff000000
   1f9fc:	str	r3, [sp, #136]	; 0x88
   1fa00:	str	r1, [sp, #140]	; 0x8c
   1fa04:	add	r1, pc, #844	; 0x34c
   1fa08:	ldrd	r0, [r1]
   1fa0c:	ldrd	r2, [sp, #136]	; 0x88
   1fa10:	cmp	r3, r1
   1fa14:	cmpeq	r2, r0
   1fa18:	bne	22118 <_start@@Base+0xd304>
   1fa1c:	sub	r3, r9, sl
   1fa20:	cmp	r3, #5
   1fa24:	ble	22118 <_start@@Base+0xd304>
   1fa28:	mov	r3, #5
   1fa2c:	mov	r2, r9
   1fa30:	mov	r1, sl
   1fa34:	mov	r0, fp
   1fa38:	bl	1a220 <_start@@Base+0x540c>
   1fa3c:	cmp	sl, r0
   1fa40:	mov	r5, r0
   1fa44:	beq	22118 <_start@@Base+0xd304>
   1fa48:	add	r2, sp, #332	; 0x14c
   1fa4c:	mov	r3, #0
   1fa50:	add	r2, r2, #2
   1fa54:	mov	r0, #0
   1fa58:	mov	r1, #0
   1fa5c:	strh	r3, [r2]
   1fa60:	cmp	r9, r5
   1fa64:	str	r3, [sp, #356]	; 0x164
   1fa68:	add	r3, sp, #360	; 0x168
   1fa6c:	strd	r0, [r3]
   1fa70:	beq	225ac <_start@@Base+0xd798>
   1fa74:	add	r0, sp, #360	; 0x168
   1fa78:	add	r3, sp, #356	; 0x164
   1fa7c:	mov	r2, r9
   1fa80:	mov	r1, r5
   1fa84:	str	r0, [sp]
   1fa88:	mov	r0, fp
   1fa8c:	bl	2d528 <flatcc_json_parser_integer@@Base>
   1fa90:	cmp	r5, r0
   1fa94:	mov	r8, r0
   1fa98:	bne	2264c <_start@@Base+0xd838>
   1fa9c:	ldr	r3, [pc, #736]	; 1fd84 <_start@@Base+0xaf70>
   1faa0:	add	ip, sp, #332	; 0x14c
   1faa4:	mov	r2, r9
   1faa8:	add	ip, ip, #2
   1faac:	mov	r1, r8
   1fab0:	mov	r0, fp
   1fab4:	str	ip, [sp]
   1fab8:	add	r3, pc, r3
   1fabc:	add	r3, r3, #468	; 0x1d4
   1fac0:	bl	19f64 <_start@@Base+0x5150>
   1fac4:	cmp	r9, r0
   1fac8:	cmpne	r0, r8
   1facc:	mov	sl, r0
   1fad0:	beq	225bc <_start@@Base+0xd7a8>
   1fad4:	add	r3, sp, #332	; 0x14c
   1fad8:	add	r3, r3, #2
   1fadc:	ldrh	r2, [r3]
   1fae0:	cmp	r2, #0
   1fae4:	bne	1faf4 <_start@@Base+0xace0>
   1fae8:	ldr	r3, [fp, #8]
   1faec:	tst	r3, #2
   1faf0:	beq	1fb20 <_start@@Base+0xad0c>
   1faf4:	mov	r3, #2
   1faf8:	ldr	r0, [fp]
   1fafc:	mov	r2, r3
   1fb00:	mov	r1, r3
   1fb04:	bl	28894 <flatcc_builder_table_add@@Base>
   1fb08:	cmp	r0, #0
   1fb0c:	beq	225bc <_start@@Base+0xd7a8>
   1fb10:	add	r3, sp, #332	; 0x14c
   1fb14:	add	r3, r3, #2
   1fb18:	ldrh	r3, [r3]
   1fb1c:	strh	r3, [r0]
   1fb20:	mov	r1, sl
   1fb24:	mov	r3, r4
   1fb28:	mov	r2, r9
   1fb2c:	mov	r0, fp
   1fb30:	bl	1a2e0 <_start@@Base+0x54cc>
   1fb34:	ldr	r3, [sp, #348]	; 0x15c
   1fb38:	mov	sl, r0
   1fb3c:	cmp	r3, #0
   1fb40:	beq	22960 <_start@@Base+0xdb4c>
   1fb44:	cmp	r9, sl
   1fb48:	beq	1fb5c <_start@@Base+0xad48>
   1fb4c:	ldrb	r3, [sl]
   1fb50:	cmp	r3, #34	; 0x22
   1fb54:	addeq	sl, sl, #1
   1fb58:	bne	2214c <_start@@Base+0xd338>
   1fb5c:	mov	r1, r9
   1fb60:	mov	r0, sl
   1fb64:	bl	14f08 <_start@@Base+0xf4>
   1fb68:	movw	r3, #65535	; 0xffff
   1fb6c:	movt	r3, #26979	; 0x6963
   1fb70:	mvn	r2, #0
   1fb74:	cmp	r1, r3
   1fb78:	cmpeq	r0, r2
   1fb7c:	bls	1f9f8 <_start@@Base+0xabe4>
   1fb80:	bic	r3, r1, #255	; 0xff
   1fb84:	mov	r5, #0
   1fb88:	add	r7, pc, #464	; 0x1d0
   1fb8c:	ldrd	r6, [r7]
   1fb90:	str	r5, [sp, #144]	; 0x90
   1fb94:	str	r3, [sp, #148]	; 0x94
   1fb98:	ldrd	r2, [sp, #144]	; 0x90
   1fb9c:	cmp	r3, r7
   1fba0:	cmpeq	r2, r6
   1fba4:	beq	22298 <_start@@Base+0xd484>
   1fba8:	lsr	r3, r1, #16
   1fbac:	str	r5, [sp, #104]	; 0x68
   1fbb0:	mov	r1, #0
   1fbb4:	movt	r1, #26980	; 0x6964
   1fbb8:	mov	r0, #0
   1fbbc:	lsl	r3, r3, #16
   1fbc0:	str	r3, [sp, #108]	; 0x6c
   1fbc4:	ldrd	r2, [sp, #104]	; 0x68
   1fbc8:	cmp	r3, r1
   1fbcc:	cmpeq	r2, r0
   1fbd0:	bne	22118 <_start@@Base+0xd304>
   1fbd4:	sub	r3, r9, sl
   1fbd8:	cmp	r3, #2
   1fbdc:	ble	22118 <_start@@Base+0xd304>
   1fbe0:	mov	r1, sl
   1fbe4:	mov	r3, #2
   1fbe8:	mov	r2, r9
   1fbec:	mov	r0, fp
   1fbf0:	bl	1a220 <_start@@Base+0x540c>
   1fbf4:	cmp	sl, r0
   1fbf8:	mov	r1, r0
   1fbfc:	beq	22118 <_start@@Base+0xd304>
   1fc00:	add	r3, sp, #352	; 0x160
   1fc04:	mov	r2, r9
   1fc08:	mov	r0, fp
   1fc0c:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   1fc10:	ldr	r3, [sp, #352]	; 0x160
   1fc14:	mov	sl, r0
   1fc18:	cmp	r3, #0
   1fc1c:	beq	225bc <_start@@Base+0xd7a8>
   1fc20:	mov	r1, r5
   1fc24:	ldr	r0, [fp]
   1fc28:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1fc2c:	cmp	r0, #0
   1fc30:	beq	225bc <_start@@Base+0xd7a8>
   1fc34:	ldr	r3, [sp, #352]	; 0x160
   1fc38:	str	r3, [r0]
   1fc3c:	b	1fb20 <_start@@Base+0xad0c>
   1fc40:	add	r3, pc, #288	; 0x120
   1fc44:	ldrd	r2, [r3]
   1fc48:	ldrd	r0, [sp, #16]
   1fc4c:	cmp	r1, r3
   1fc50:	cmpeq	r0, r2
   1fc54:	beq	216fc <_start@@Base+0xc8e8>
   1fc58:	ldr	r1, [sp, #20]
   1fc5c:	mov	r4, #0
   1fc60:	str	r4, [sp, #176]	; 0xb0
   1fc64:	add	r3, pc, #260	; 0x104
   1fc68:	ldrd	r2, [r3]
   1fc6c:	bic	r1, r1, #255	; 0xff
   1fc70:	str	r1, [sp, #180]	; 0xb4
   1fc74:	ldrd	r0, [sp, #176]	; 0xb0
   1fc78:	cmp	r1, r3
   1fc7c:	cmpeq	r0, r2
   1fc80:	bne	20b3c <_start@@Base+0xbd28>
   1fc84:	sub	r3, r9, r6
   1fc88:	cmp	r3, #3
   1fc8c:	ble	22634 <_start@@Base+0xd820>
   1fc90:	mov	r3, #3
   1fc94:	mov	r2, r9
   1fc98:	mov	r1, r6
   1fc9c:	mov	r0, fp
   1fca0:	bl	1a220 <_start@@Base+0x540c>
   1fca4:	cmp	r6, r0
   1fca8:	mov	sl, r0
   1fcac:	beq	22634 <_start@@Base+0xd820>
   1fcb0:	mov	r3, #16
   1fcb4:	mov	r1, r4
   1fcb8:	ldr	r0, [fp]
   1fcbc:	mov	r2, #32
   1fcc0:	bl	28894 <flatcc_builder_table_add@@Base>
   1fcc4:	subs	r3, r0, #0
   1fcc8:	str	r3, [sp, #16]
   1fccc:	beq	1edec <_start@@Base+0x9fd8>
   1fcd0:	add	r3, sp, #352	; 0x160
   1fcd4:	mov	r1, sl
   1fcd8:	vldr	s16, [pc, #160]	; 1fd80 <_start@@Base+0xaf6c>
   1fcdc:	mov	r2, r9
   1fce0:	mov	r0, fp
   1fce4:	vldr	d9, [pc, #140]	; 1fd78 <_start@@Base+0xaf64>
   1fce8:	bl	18e0c <_start@@Base+0x3ff8>
   1fcec:	ldrd	r4, [sp, #128]	; 0x80
   1fcf0:	mov	r8, r0
   1fcf4:	ldr	r3, [sp, #352]	; 0x160
   1fcf8:	cmp	r3, #0
   1fcfc:	beq	232e4 <_start@@Base+0xe4d0>
   1fd00:	cmp	r9, r8
   1fd04:	beq	1fd18 <_start@@Base+0xaf04>
   1fd08:	ldrb	r3, [r8]
   1fd0c:	cmp	r3, #34	; 0x22
   1fd10:	addeq	r8, r8, #1
   1fd14:	bne	20f8c <_start@@Base+0xc178>
   1fd18:	sub	ip, r9, r8
   1fd1c:	cmp	ip, #8
   1fd20:	bhi	20874 <_start@@Base+0xba60>
   1fd24:	sub	r3, ip, #1
   1fd28:	cmp	r3, #7
   1fd2c:	addls	pc, pc, r3, lsl #2
   1fd30:	b	2091c <_start@@Base+0xbb08>
   1fd34:	b	20a28 <_start@@Base+0xbc14>
   1fd38:	b	209d8 <_start@@Base+0xbbc4>
   1fd3c:	b	209cc <_start@@Base+0xbbb8>
   1fd40:	b	209c0 <_start@@Base+0xbbac>
   1fd44:	b	209b4 <_start@@Base+0xbba0>
   1fd48:	b	209e4 <_start@@Base+0xbbd0>
   1fd4c:	b	209a8 <_start@@Base+0xbb94>
   1fd50:	b	20874 <_start@@Base+0xba60>
   1fd54:	nop	{0}
   1fd58:	strvc	r0, [r0], #-0
   1fd5c:	cmnvs	pc, #461373440	; 0x1b800000
   1fd60:	andeq	r0, r0, r0
   1fd64:	strbtvc	r6, [r1], -r0, lsl #24
   1fd68:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1fd6c:	rsbvc	r7, r1, r5, ror #4
   1fd70:	andeq	r0, r0, r0
   1fd74:	rsbvc	r7, pc, r0, lsl #6
	...
   1fd84:	andeq	r4, r3, r8, asr #11
   1fd88:	add	r3, pc, #960	; 0x3c0
   1fd8c:	ldrd	r2, [r3]
   1fd90:	ldrd	r0, [sp, #16]
   1fd94:	cmp	r1, r3
   1fd98:	cmpeq	r0, r2
   1fd9c:	bhi	203e0 <_start@@Base+0xb5cc>
   1fda0:	lsr	r3, r1, #16
   1fda4:	mov	r4, #0
   1fda8:	mov	r2, #0
   1fdac:	str	r4, [sp, #152]	; 0x98
   1fdb0:	str	r3, [sp, #156]	; 0x9c
   1fdb4:	mov	r3, #0
   1fdb8:	movt	r3, #26736	; 0x6870
   1fdbc:	ldr	r1, [sp, #156]	; 0x9c
   1fdc0:	lsl	r1, r1, #16
   1fdc4:	str	r1, [sp, #156]	; 0x9c
   1fdc8:	ldrd	r0, [sp, #152]	; 0x98
   1fdcc:	cmp	r1, r3
   1fdd0:	cmpeq	r0, r2
   1fdd4:	bne	218e4 <_start@@Base+0xcad0>
   1fdd8:	sub	r3, r9, r6
   1fddc:	cmp	r3, #2
   1fde0:	ble	2268c <_start@@Base+0xd878>
   1fde4:	mov	r3, #2
   1fde8:	mov	r2, r9
   1fdec:	mov	r1, r6
   1fdf0:	mov	r0, fp
   1fdf4:	bl	1a220 <_start@@Base+0x540c>
   1fdf8:	cmp	r0, r6
   1fdfc:	mov	r5, r0
   1fe00:	beq	2268c <_start@@Base+0xd878>
   1fe04:	add	r6, sp, #360	; 0x168
   1fe08:	mov	r1, r0
   1fe0c:	mov	r2, r9
   1fe10:	mov	r3, r6
   1fe14:	mov	r0, fp
   1fe18:	strh	r4, [r6]
   1fe1c:	bl	17efc <_start@@Base+0x30e8>
   1fe20:	cmp	r0, r5
   1fe24:	mov	sl, r0
   1fe28:	beq	22098 <_start@@Base+0xd284>
   1fe2c:	add	r3, sp, #360	; 0x168
   1fe30:	ldrsh	r3, [r3]
   1fe34:	cmp	r3, #100	; 0x64
   1fe38:	bne	1fe48 <_start@@Base+0xb034>
   1fe3c:	ldr	r3, [fp, #8]
   1fe40:	tst	r3, #2
   1fe44:	beq	1f6bc <_start@@Base+0xa8a8>
   1fe48:	mov	r3, #2
   1fe4c:	ldr	r0, [fp]
   1fe50:	mov	r2, r3
   1fe54:	mov	r1, r3
   1fe58:	bl	28894 <flatcc_builder_table_add@@Base>
   1fe5c:	cmp	r0, #0
   1fe60:	beq	1edec <_start@@Base+0x9fd8>
   1fe64:	add	r3, sp, #360	; 0x168
   1fe68:	ldrsh	r3, [r3]
   1fe6c:	strh	r3, [r0]
   1fe70:	b	1f6bc <_start@@Base+0xa8a8>
   1fe74:	mov	r1, r6
   1fe78:	mov	r2, r9
   1fe7c:	mov	r0, fp
   1fe80:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe84:	mov	sl, r0
   1fe88:	b	1f6bc <_start@@Base+0xa8a8>
   1fe8c:	sub	r3, r9, r6
   1fe90:	cmp	r3, #5
   1fe94:	ble	20ce4 <_start@@Base+0xbed0>
   1fe98:	mov	r1, r6
   1fe9c:	mov	r3, #5
   1fea0:	mov	r2, r9
   1fea4:	mov	r0, fp
   1fea8:	bl	1a220 <_start@@Base+0x540c>
   1feac:	cmp	r0, r6
   1feb0:	mov	r1, r0
   1feb4:	beq	20ce4 <_start@@Base+0xbed0>
   1feb8:	add	r3, sp, #340	; 0x154
   1febc:	mov	r2, r9
   1fec0:	mov	r0, fp
   1fec4:	bl	1eda0 <_start@@Base+0x9f8c>
   1fec8:	ldr	r3, [sp, #340]	; 0x154
   1fecc:	mov	sl, r0
   1fed0:	cmp	r3, #0
   1fed4:	beq	1edec <_start@@Base+0x9fd8>
   1fed8:	mov	r1, #12
   1fedc:	ldr	r0, [fp]
   1fee0:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   1fee4:	cmp	r0, #0
   1fee8:	beq	1edec <_start@@Base+0x9fd8>
   1feec:	ldr	r3, [sp, #340]	; 0x154
   1fef0:	str	r3, [r0]
   1fef4:	b	1f6bc <_start@@Base+0xa8a8>
   1fef8:	add	r3, pc, #600	; 0x258
   1fefc:	ldrd	r2, [r3]
   1ff00:	cmp	r1, r3
   1ff04:	cmpeq	r0, r2
   1ff08:	beq	20b84 <_start@@Base+0xbd70>
   1ff0c:	add	r3, pc, #588	; 0x24c
   1ff10:	ldrd	r2, [r3]
   1ff14:	cmp	r1, r3
   1ff18:	cmpeq	r0, r2
   1ff1c:	bne	21948 <_start@@Base+0xcb34>
   1ff20:	mov	r3, #0
   1ff24:	add	r6, r6, #16
   1ff28:	mov	r1, r9
   1ff2c:	mov	r0, r6
   1ff30:	str	r3, [sp, #224]	; 0xe0
   1ff34:	bl	14f08 <_start@@Base+0xf4>
   1ff38:	and	r3, r1, #-16777216	; 0xff000000
   1ff3c:	str	r3, [sp, #228]	; 0xe4
   1ff40:	ldrd	r2, [sp, #224]	; 0xe0
   1ff44:	cmp	r3, #1929379840	; 0x73000000
   1ff48:	cmpeq	r2, #0
   1ff4c:	bne	21d08 <_start@@Base+0xcef4>
   1ff50:	sub	r3, r9, r6
   1ff54:	cmp	r3, #1
   1ff58:	ble	22aa0 <_start@@Base+0xdc8c>
   1ff5c:	mov	r3, #1
   1ff60:	mov	r2, r9
   1ff64:	mov	r1, r6
   1ff68:	mov	r0, fp
   1ff6c:	bl	1a220 <_start@@Base+0x540c>
   1ff70:	cmp	r6, r0
   1ff74:	mov	sl, r0
   1ff78:	bne	22ad8 <_start@@Base+0xdcc4>
   1ff7c:	mov	r1, sl
   1ff80:	mov	r2, r9
   1ff84:	mov	r0, fp
   1ff88:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   1ff8c:	mov	sl, r0
   1ff90:	b	1f6bc <_start@@Base+0xa8a8>
   1ff94:	cmp	r7, #5
   1ff98:	ble	20b6c <_start@@Base+0xbd58>
   1ff9c:	mov	r3, #5
   1ffa0:	mov	r2, r9
   1ffa4:	mov	r1, r6
   1ffa8:	mov	r0, fp
   1ffac:	bl	1a220 <_start@@Base+0x540c>
   1ffb0:	cmp	r6, r0
   1ffb4:	mov	sl, r0
   1ffb8:	beq	20b6c <_start@@Base+0xbd58>
   1ffbc:	mvn	r3, #-1073741824	; 0xc0000000
   1ffc0:	mov	r2, #2
   1ffc4:	ldr	r0, [fp]
   1ffc8:	mov	r1, #4
   1ffcc:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   1ffd0:	cmp	r0, #0
   1ffd4:	bne	1edec <_start@@Base+0x9fd8>
   1ffd8:	ldr	r4, [sp, #28]
   1ffdc:	mov	r1, sl
   1ffe0:	mov	r2, r9
   1ffe4:	mov	r0, fp
   1ffe8:	mov	r3, r4
   1ffec:	bl	1a14c <_start@@Base+0x5338>
   1fff0:	ldr	r3, [sp, #336]	; 0x150
   1fff4:	mov	sl, r0
   1fff8:	cmp	r3, #0
   1fffc:	beq	20048 <_start@@Base+0xb234>
   20000:	mov	r1, #1
   20004:	ldr	r0, [fp]
   20008:	bl	26168 <flatcc_builder_extend_vector@@Base>
   2000c:	subs	r3, r0, #0
   20010:	mov	r1, sl
   20014:	mov	r2, r9
   20018:	mov	r0, fp
   2001c:	beq	1edec <_start@@Base+0x9fd8>
   20020:	bl	1e688 <_start@@Base+0x9874>
   20024:	mov	r1, r0
   20028:	mov	r3, r4
   2002c:	mov	r2, r9
   20030:	mov	r0, fp
   20034:	bl	1ad0c <_start@@Base+0x5ef8>
   20038:	ldr	r3, [sp, #336]	; 0x150
   2003c:	mov	sl, r0
   20040:	cmp	r3, #0
   20044:	bne	20000 <_start@@Base+0xb1ec>
   20048:	ldr	r0, [fp]
   2004c:	bl	27a9c <flatcc_builder_end_vector@@Base>
   20050:	cmp	r0, #0
   20054:	str	r0, [sp, #340]	; 0x154
   20058:	beq	1edec <_start@@Base+0x9fd8>
   2005c:	mov	r1, #9
   20060:	ldr	r0, [fp]
   20064:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   20068:	cmp	r0, #0
   2006c:	beq	1edec <_start@@Base+0x9fd8>
   20070:	ldr	r3, [sp, #340]	; 0x154
   20074:	str	r3, [r0]
   20078:	b	1f6bc <_start@@Base+0xa8a8>
   2007c:	add	r6, r6, #8
   20080:	mov	r1, r9
   20084:	mov	r0, r6
   20088:	bl	14f08 <_start@@Base+0xf4>
   2008c:	add	r3, pc, #212	; 0xd4
   20090:	ldrd	r2, [r3]
   20094:	cmp	r1, r3
   20098:	cmpeq	r0, r2
   2009c:	bhi	207a8 <_start@@Base+0xb994>
   200a0:	add	r3, pc, #200	; 0xc8
   200a4:	ldrd	r2, [r3]
   200a8:	cmp	r1, r3
   200ac:	cmpeq	r0, r2
   200b0:	bne	21c2c <_start@@Base+0xce18>
   200b4:	sub	r3, r9, r6
   200b8:	cmp	r3, #8
   200bc:	ble	21f08 <_start@@Base+0xd0f4>
   200c0:	mov	r3, #8
   200c4:	mov	r2, r9
   200c8:	mov	r1, r6
   200cc:	mov	r0, fp
   200d0:	bl	1a220 <_start@@Base+0x540c>
   200d4:	cmp	r6, r0
   200d8:	mov	r4, r0
   200dc:	beq	21f08 <_start@@Base+0xd0f4>
   200e0:	mov	ip, #0
   200e4:	add	r5, sp, #360	; 0x168
   200e8:	mov	r1, r0
   200ec:	mov	r3, r5
   200f0:	mov	r2, r9
   200f4:	mov	r0, fp
   200f8:	str	ip, [sp, #360]	; 0x168
   200fc:	bl	17e18 <_start@@Base+0x3004>
   20100:	cmp	r0, r4
   20104:	mov	sl, r0
   20108:	beq	22ee0 <_start@@Base+0xe0cc>
   2010c:	ldr	r3, [sp, #360]	; 0x168
   20110:	cmp	r3, #0
   20114:	bne	20124 <_start@@Base+0xb310>
   20118:	ldr	r3, [fp, #8]
   2011c:	tst	r3, #2
   20120:	beq	1f6bc <_start@@Base+0xa8a8>
   20124:	mov	r3, #4
   20128:	mov	r1, #16
   2012c:	ldr	r0, [fp]
   20130:	mov	r2, r3
   20134:	bl	28894 <flatcc_builder_table_add@@Base>
   20138:	cmp	r0, #0
   2013c:	beq	23230 <_start@@Base+0xe41c>
   20140:	ldr	r3, [sp, #360]	; 0x168
   20144:	str	r3, [r0]
   20148:	b	1f6bc <_start@@Base+0xa8a8>
   2014c:	nop	{0}
   20150:	mrcvs	15, 3, r6, cr4, cr1, {3}
   20154:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   20158:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   2015c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20160:	cmnvs	r2, r5, ror #24
   20164:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20168:			; <UNDEFINED> instruction: 0x666e7630
   2016c:	teqvc	r6, #1593835520	; 0x5f000000
   20170:			; <UNDEFINED> instruction: 0x666e7631
   20174:	teqvc	r3, #-268435451	; 0xf0000005
   20178:	ldrtvs	r0, [r2], -r0
   2017c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20180:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   20184:	ldrd	r4, [sp, #16]
   20188:	lsr	r3, r4, #16
   2018c:	str	r3, [sp, #88]	; 0x58
   20190:	ldr	r1, [sp, #88]	; 0x58
   20194:	str	r5, [sp, #92]	; 0x5c
   20198:	sub	r3, pc, #40	; 0x28
   2019c:	ldrd	r2, [r3]
   201a0:	lsl	r1, r1, #16
   201a4:	str	r1, [sp, #88]	; 0x58
   201a8:	sub	r1, r9, r6
   201ac:	ldrd	r4, [sp, #88]	; 0x58
   201b0:	cmp	r5, r3
   201b4:	cmpeq	r4, r2
   201b8:	beq	20d14 <_start@@Base+0xbf00>
   201bc:	cmp	r1, #5
   201c0:	ble	223f8 <_start@@Base+0xd5e4>
   201c4:	mov	r3, #5
   201c8:	mov	r2, r9
   201cc:	mov	r1, r6
   201d0:	mov	r0, fp
   201d4:	bl	1a220 <_start@@Base+0x540c>
   201d8:	cmp	r6, r0
   201dc:	mov	r4, r0
   201e0:	beq	223f8 <_start@@Base+0xd5e4>
   201e4:	mov	ip, #0
   201e8:	add	r5, sp, #360	; 0x168
   201ec:	mov	r1, r0
   201f0:	mov	r2, r9
   201f4:	mov	r3, r5
   201f8:	mov	r0, fp
   201fc:	str	ip, [sp, #360]	; 0x168
   20200:	bl	2d410 <flatcc_json_parser_float@@Base>
   20204:	cmp	r0, r4
   20208:	mov	sl, r0
   2020c:	beq	227ec <_start@@Base+0xd9d8>
   20210:	vldr	s15, [pc, #-152]	; 20180 <_start@@Base+0xb36c>
   20214:	vldr	s14, [sp, #360]	; 0x168
   20218:	vcmp.f32	s14, s15
   2021c:	vmrs	APSR_nzcv, fpscr
   20220:	bne	20230 <_start@@Base+0xb41c>
   20224:	ldr	r3, [fp, #8]
   20228:	tst	r3, #2
   2022c:	beq	1f6bc <_start@@Base+0xa8a8>
   20230:	mov	r3, #4
   20234:	mov	r1, #25
   20238:	ldr	r0, [fp]
   2023c:	mov	r2, r3
   20240:	bl	28894 <flatcc_builder_table_add@@Base>
   20244:	cmp	r0, #0
   20248:	beq	1edec <_start@@Base+0x9fd8>
   2024c:	ldr	r3, [sp, #360]	; 0x168
   20250:	str	r3, [r0]
   20254:	b	1f6bc <_start@@Base+0xa8a8>
   20258:	add	r3, pc, #960	; 0x3c0
   2025c:	ldrd	r2, [r3]
   20260:	ldrd	r0, [sp, #16]
   20264:	cmp	r1, r3
   20268:	cmpeq	r0, r2
   2026c:	bne	20b24 <_start@@Base+0xbd10>
   20270:	add	r4, r6, #8
   20274:	mov	r1, r9
   20278:	mov	r0, r4
   2027c:	bl	14f08 <_start@@Base+0xf4>
   20280:	add	r3, pc, #928	; 0x3a0
   20284:	ldrd	r2, [r3]
   20288:	cmp	r1, r3
   2028c:	cmpeq	r0, r2
   20290:	beq	22468 <_start@@Base+0xd654>
   20294:	bic	ip, r0, #255	; 0xff
   20298:	add	r3, pc, #912	; 0x390
   2029c:	ldrd	r2, [r3]
   202a0:	str	ip, [sp, #232]	; 0xe8
   202a4:	str	r1, [sp, #236]	; 0xec
   202a8:	ldrd	r0, [sp, #232]	; 0xe8
   202ac:	cmp	r1, r3
   202b0:	cmpeq	r0, r2
   202b4:	bne	21d20 <_start@@Base+0xcf0c>
   202b8:	sub	r3, r9, r4
   202bc:	cmp	r3, #7
   202c0:	ble	2270c <_start@@Base+0xd8f8>
   202c4:	mov	r3, #7
   202c8:	mov	r2, r9
   202cc:	mov	r1, r4
   202d0:	mov	r0, fp
   202d4:	bl	1a220 <_start@@Base+0x540c>
   202d8:	cmp	r4, r0
   202dc:	mov	sl, r0
   202e0:	beq	22708 <_start@@Base+0xd8f4>
   202e4:	mov	r2, #8
   202e8:	mvn	r3, #-536870912	; 0xe0000000
   202ec:	ldr	r0, [fp]
   202f0:	mov	r1, r2
   202f4:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   202f8:	cmp	r0, #0
   202fc:	bne	1edec <_start@@Base+0x9fd8>
   20300:	ldr	r5, [sp, #28]
   20304:	mov	r1, sl
   20308:	mov	r2, r9
   2030c:	mov	r0, fp
   20310:	mov	r3, r5
   20314:	bl	1a14c <_start@@Base+0x5338>
   20318:	ldr	r3, [sp, #336]	; 0x150
   2031c:	mov	sl, r0
   20320:	cmp	r3, #0
   20324:	beq	22e04 <_start@@Base+0xdff0>
   20328:	ldr	r8, [pc, #808]	; 20658 <_start@@Base+0xb844>
   2032c:	mov	r6, #0
   20330:	mov	r7, #0
   20334:	mov	r4, r0
   20338:	mov	sl, r5
   2033c:	add	r8, pc, r8
   20340:	add	r8, r8, #648	; 0x288
   20344:	str	r8, [sp, #16]
   20348:	b	2037c <_start@@Base+0xb568>
   2034c:	add	r3, sp, #360	; 0x168
   20350:	mov	r1, r0
   20354:	ldrd	r4, [r3]
   20358:	mov	r2, r9
   2035c:	mov	r3, sl
   20360:	mov	r0, fp
   20364:	strd	r4, [r8]
   20368:	bl	1ad0c <_start@@Base+0x5ef8>
   2036c:	ldr	r3, [sp, #336]	; 0x150
   20370:	mov	r4, r0
   20374:	cmp	r3, #0
   20378:	beq	22e00 <_start@@Base+0xdfec>
   2037c:	add	r5, sp, #360	; 0x168
   20380:	mov	r1, #1
   20384:	ldr	r0, [fp]
   20388:	strd	r6, [r5]
   2038c:	bl	26168 <flatcc_builder_extend_vector@@Base>
   20390:	subs	r8, r0, #0
   20394:	mov	r1, r4
   20398:	mov	r3, r5
   2039c:	mov	r2, r9
   203a0:	mov	r0, fp
   203a4:	beq	1f730 <_start@@Base+0xa91c>
   203a8:	bl	179a8 <_start@@Base+0x2b94>
   203ac:	cmp	r0, r4
   203b0:	bne	2034c <_start@@Base+0xb538>
   203b4:	mov	r2, r9
   203b8:	mov	r1, r4
   203bc:	str	r5, [sp]
   203c0:	mov	r0, fp
   203c4:	ldr	r3, [sp, #16]
   203c8:	bl	18c00 <_start@@Base+0x3dec>
   203cc:	cmp	r9, r0
   203d0:	cmpne	r0, r4
   203d4:	bne	2034c <_start@@Base+0xb538>
   203d8:	mov	sl, r0
   203dc:	b	1edec <_start@@Base+0x9fd8>
   203e0:	add	r3, pc, #592	; 0x250
   203e4:	ldrd	r2, [r3]
   203e8:	ldrd	r0, [sp, #16]
   203ec:	cmp	r1, r3
   203f0:	cmpeq	r0, r2
   203f4:	beq	21ad8 <_start@@Base+0xccc4>
   203f8:	ldr	r1, [sp, #20]
   203fc:	mov	r4, #0
   20400:	str	r4, [sp, #200]	; 0xc8
   20404:	add	r3, pc, #564	; 0x234
   20408:	ldrd	r2, [r3]
   2040c:	str	r1, [sp, #204]	; 0xcc
   20410:	ldrd	r0, [sp, #200]	; 0xc8
   20414:	cmp	r1, r3
   20418:	cmpeq	r0, r2
   2041c:	bne	22374 <_start@@Base+0xd560>
   20420:	sub	r3, r9, r6
   20424:	cmp	r3, #4
   20428:	ble	22080 <_start@@Base+0xd26c>
   2042c:	mov	r3, #4
   20430:	mov	r2, r9
   20434:	mov	r1, r6
   20438:	mov	r0, fp
   2043c:	bl	1a220 <_start@@Base+0x540c>
   20440:	cmp	r6, r0
   20444:	mov	r5, r0
   20448:	beq	22080 <_start@@Base+0xd26c>
   2044c:	add	r6, sp, #360	; 0x168
   20450:	mov	r1, r0
   20454:	mov	r2, r9
   20458:	mov	r3, r6
   2045c:	mov	r0, fp
   20460:	strh	r4, [r6]
   20464:	bl	17efc <_start@@Base+0x30e8>
   20468:	cmp	r0, r5
   2046c:	mov	sl, r0
   20470:	beq	22e38 <_start@@Base+0xe024>
   20474:	add	r3, sp, #360	; 0x168
   20478:	ldrsh	r3, [r3]
   2047c:	cmp	r3, #150	; 0x96
   20480:	bne	20490 <_start@@Base+0xb67c>
   20484:	ldr	r3, [fp, #8]
   20488:	tst	r3, #2
   2048c:	beq	1f6bc <_start@@Base+0xa8a8>
   20490:	mov	r3, #2
   20494:	mov	r1, #1
   20498:	ldr	r0, [fp]
   2049c:	mov	r2, r3
   204a0:	bl	28894 <flatcc_builder_table_add@@Base>
   204a4:	cmp	r0, #0
   204a8:	beq	1edec <_start@@Base+0x9fd8>
   204ac:	add	r3, sp, #360	; 0x168
   204b0:	ldrsh	r3, [r3]
   204b4:	strh	r3, [r0]
   204b8:	b	1f6bc <_start@@Base+0xa8a8>
   204bc:	mov	r1, r6
   204c0:	mov	r2, r9
   204c4:	mov	r0, fp
   204c8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   204cc:	mov	sl, r0
   204d0:	b	1f6bc <_start@@Base+0xa8a8>
   204d4:	mov	r1, r6
   204d8:	mov	r2, r9
   204dc:	mov	r0, fp
   204e0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   204e4:	mov	sl, r0
   204e8:	b	1f6bc <_start@@Base+0xa8a8>
   204ec:	mov	r1, r6
   204f0:	mov	r2, r9
   204f4:	mov	r0, fp
   204f8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   204fc:	mov	sl, r0
   20500:	b	1f6bc <_start@@Base+0xa8a8>
   20504:	add	r3, pc, #316	; 0x13c
   20508:	ldrd	r2, [r3]
   2050c:	cmp	r1, r3
   20510:	cmpeq	r0, r2
   20514:	bne	20e50 <_start@@Base+0xc03c>
   20518:	add	r6, r6, #16
   2051c:	mov	r1, r9
   20520:	mov	r0, r6
   20524:	bl	14f08 <_start@@Base+0xf4>
   20528:	bic	r0, r0, #255	; 0xff
   2052c:	add	r3, pc, #284	; 0x11c
   20530:	ldrd	r2, [r3]
   20534:	strd	r0, [sp, #216]	; 0xd8
   20538:	ldrd	r0, [sp, #216]	; 0xd8
   2053c:	cmp	r1, r3
   20540:	cmpeq	r0, r2
   20544:	bne	21cbc <_start@@Base+0xcea8>
   20548:	sub	r3, r9, r6
   2054c:	cmp	r3, #7
   20550:	ble	226bc <_start@@Base+0xd8a8>
   20554:	mov	r3, #7
   20558:	mov	r2, r9
   2055c:	mov	r1, r6
   20560:	mov	r0, fp
   20564:	bl	1a220 <_start@@Base+0x540c>
   20568:	cmp	r6, r0
   2056c:	mov	sl, r0
   20570:	beq	226bc <_start@@Base+0xd8a8>
   20574:	mvn	r3, #-536870912	; 0xe0000000
   20578:	mov	r2, #4
   2057c:	ldr	r0, [fp]
   20580:	mov	r1, #8
   20584:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   20588:	cmp	r0, #0
   2058c:	bne	1edec <_start@@Base+0x9fd8>
   20590:	mov	r1, sl
   20594:	mov	r2, r9
   20598:	ldr	r3, [sp, #28]
   2059c:	mov	r0, fp
   205a0:	bl	1a14c <_start@@Base+0x5338>
   205a4:	ldr	r3, [sp, #336]	; 0x150
   205a8:	mov	sl, r0
   205ac:	cmp	r3, #0
   205b0:	beq	2220c <_start@@Base+0xd3f8>
   205b4:	ldr	r3, [pc, #160]	; 2065c <_start@@Base+0xb848>
   205b8:	ldrd	r6, [sp, #64]	; 0x40
   205bc:	add	r3, pc, r3
   205c0:	add	r3, r3, #444	; 0x1bc
   205c4:	str	r3, [sp, #244]	; 0xf4
   205c8:	mov	r1, #1
   205cc:	ldr	r0, [fp]
   205d0:	bl	26168 <flatcc_builder_extend_vector@@Base>
   205d4:	subs	r3, r0, #0
   205d8:	str	r3, [sp, #64]	; 0x40
   205dc:	beq	1edec <_start@@Base+0x9fd8>
   205e0:	add	r3, sp, #356	; 0x164
   205e4:	mov	r1, sl
   205e8:	mov	r2, r9
   205ec:	mov	r0, fp
   205f0:	str	r3, [sp, #16]
   205f4:	bl	18e0c <_start@@Base+0x3ff8>
   205f8:	ldr	r3, [sp, #356]	; 0x164
   205fc:	mov	r4, r0
   20600:	cmp	r3, #0
   20604:	beq	221e4 <_start@@Base+0xd3d0>
   20608:	ldr	r3, [pc, #80]	; 20660 <_start@@Base+0xb84c>
   2060c:	mov	sl, #0
   20610:	movt	sl, #65535	; 0xffff
   20614:	add	r3, pc, r3
   20618:	str	r3, [sp, #240]	; 0xf0
   2061c:	b	206fc <_start@@Base+0xb8e8>
   20620:	svcvs	0x00725f6f
   20624:			; <UNDEFINED> instruction: 0x76656374
   20628:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   2062c:	ldrbvs	r6, [pc], -pc, ror #8
   20630:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   20634:	ldrbvs	r6, [pc], -pc, ror #24
   20638:	mrcvs	15, 3, r6, cr4, cr2, {3}
   2063c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   20640:	andeq	r0, r0, r0
   20644:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   20648:	svcvs	0x00727465
   2064c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20650:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   20654:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   20658:	andeq	r3, r3, r4, asr #26
   2065c:	andeq	r3, r3, r4, asr #21
   20660:	andeq	r3, r3, ip, ror #20
   20664:	add	r3, pc, #900	; 0x384
   20668:	ldrd	r2, [r3]
   2066c:	cmp	r1, r3
   20670:	cmpeq	r0, r2
   20674:	bne	220cc <_start@@Base+0xd2b8>
   20678:	sub	r3, r9, r4
   2067c:	cmp	r3, #8
   20680:	ble	220cc <_start@@Base+0xd2b8>
   20684:	mov	r3, #8
   20688:	mov	r2, r9
   2068c:	mov	r1, r4
   20690:	mov	r0, fp
   20694:	bl	1a220 <_start@@Base+0x540c>
   20698:	cmp	r4, r0
   2069c:	mov	r8, r0
   206a0:	beq	220cc <_start@@Base+0xd2b8>
   206a4:	add	r3, sp, #360	; 0x168
   206a8:	mov	r1, r0
   206ac:	mov	r2, r9
   206b0:	mov	r0, fp
   206b4:	str	r3, [sp, #80]	; 0x50
   206b8:	str	r5, [sp, #360]	; 0x168
   206bc:	bl	17c80 <_start@@Base+0x2e6c>
   206c0:	cmp	r8, r0
   206c4:	mov	r4, r0
   206c8:	beq	2219c <_start@@Base+0xd388>
   206cc:	ldr	r2, [sp, #64]	; 0x40
   206d0:	ldr	r3, [sp, #360]	; 0x168
   206d4:	str	r3, [r2, #4]
   206d8:	mov	r1, r4
   206dc:	mov	r2, r9
   206e0:	ldr	r3, [sp, #16]
   206e4:	mov	r0, fp
   206e8:	bl	1a2e0 <_start@@Base+0x54cc>
   206ec:	ldr	r3, [sp, #356]	; 0x164
   206f0:	mov	r4, r0
   206f4:	cmp	r3, #0
   206f8:	beq	221e4 <_start@@Base+0xd3d0>
   206fc:	cmp	r9, r4
   20700:	beq	20714 <_start@@Base+0xb900>
   20704:	ldrb	r3, [r4]
   20708:	cmp	r3, #34	; 0x22
   2070c:	addeq	r4, r4, #1
   20710:	bne	220e4 <_start@@Base+0xd2d0>
   20714:	mov	r1, r9
   20718:	mov	r0, r4
   2071c:	bl	14f08 <_start@@Base+0xf4>
   20720:	and	r7, r1, sl
   20724:	mov	r3, #0
   20728:	movt	r3, #26980	; 0x6964
   2072c:	mov	r5, #0
   20730:	mov	r2, #0
   20734:	cmp	r7, r3
   20738:	cmpeq	r5, r2
   2073c:	mov	r6, r5
   20740:	bne	20664 <_start@@Base+0xb850>
   20744:	sub	r3, r9, r4
   20748:	cmp	r3, #2
   2074c:	ble	220cc <_start@@Base+0xd2b8>
   20750:	mov	r3, #2
   20754:	mov	r2, r9
   20758:	mov	r1, r4
   2075c:	mov	r0, fp
   20760:	bl	1a220 <_start@@Base+0x540c>
   20764:	cmp	r4, r0
   20768:	mov	r8, r0
   2076c:	beq	220cc <_start@@Base+0xd2b8>
   20770:	add	r3, sp, #360	; 0x168
   20774:	mov	r1, r0
   20778:	mov	r2, r9
   2077c:	mov	r0, fp
   20780:	str	r3, [sp, #80]	; 0x50
   20784:	str	r5, [sp, #360]	; 0x168
   20788:	bl	17c80 <_start@@Base+0x2e6c>
   2078c:	cmp	r8, r0
   20790:	mov	r4, r0
   20794:	beq	22168 <_start@@Base+0xd354>
   20798:	ldr	r2, [sp, #64]	; 0x40
   2079c:	ldr	r3, [sp, #360]	; 0x168
   207a0:	str	r3, [r2]
   207a4:	b	206d8 <_start@@Base+0xb8c4>
   207a8:	add	r3, pc, #584	; 0x248
   207ac:	ldrd	r2, [r3]
   207b0:	cmp	r1, r3
   207b4:	cmpeq	r0, r2
   207b8:	bhi	219d0 <_start@@Base+0xcbbc>
   207bc:	add	r3, pc, #572	; 0x23c
   207c0:	ldrd	r2, [r3]
   207c4:	cmp	r1, r3
   207c8:	cmpeq	r0, r2
   207cc:	bne	21d80 <_start@@Base+0xcf6c>
   207d0:	sub	r3, r9, r6
   207d4:	cmp	r3, #8
   207d8:	ble	229b0 <_start@@Base+0xdb9c>
   207dc:	mov	r3, #8
   207e0:	mov	r2, r9
   207e4:	mov	r1, r6
   207e8:	mov	r0, fp
   207ec:	bl	1a220 <_start@@Base+0x540c>
   207f0:	cmp	r6, r0
   207f4:	mov	r7, r0
   207f8:	beq	229b0 <_start@@Base+0xdb9c>
   207fc:	add	r6, sp, #360	; 0x168
   20800:	mov	r4, #0
   20804:	mov	r5, #0
   20808:	mov	r1, r0
   2080c:	mov	r3, r6
   20810:	mov	r2, r9
   20814:	mov	r0, fp
   20818:	strd	r4, [r6]
   2081c:	bl	179a8 <_start@@Base+0x2b94>
   20820:	cmp	r0, r7
   20824:	mov	sl, r0
   20828:	beq	2303c <_start@@Base+0xe228>
   2082c:	add	r3, sp, #360	; 0x168
   20830:	ldrd	r2, [r3]
   20834:	orrs	r3, r2, r3
   20838:	bne	20848 <_start@@Base+0xba34>
   2083c:	ldr	r3, [fp, #8]
   20840:	tst	r3, #2
   20844:	beq	1f6bc <_start@@Base+0xa8a8>
   20848:	mov	r3, #8
   2084c:	mov	r1, #18
   20850:	ldr	r0, [fp]
   20854:	mov	r2, r3
   20858:	bl	28894 <flatcc_builder_table_add@@Base>
   2085c:	cmp	r0, #0
   20860:	beq	23230 <_start@@Base+0xe41c>
   20864:	add	r3, sp, #360	; 0x168
   20868:	ldrd	r2, [r3]
   2086c:	strd	r2, [r0]
   20870:	b	1f6bc <_start@@Base+0xa8a8>
   20874:	ldrb	r6, [r8, #7]
   20878:	mov	r7, #0
   2087c:	mov	r3, r7
   20880:	ldrb	r0, [r8, #6]
   20884:	orr	r2, r6, r0, lsl #8
   20888:	ldrb	r0, [r8, #5]
   2088c:	orr	r2, r2, r0, lsl #16
   20890:	ldrb	r0, [r8, #4]
   20894:	orr	r2, r2, r0, lsl #24
   20898:	ldrb	r0, [r8, #3]
   2089c:	orr	r0, r3, r0
   208a0:	ldrb	r6, [r8, #2]
   208a4:	orr	r6, r0, r6, lsl #8
   208a8:	ldrb	r0, [r8, #1]
   208ac:	mov	r4, r2
   208b0:	ldrb	r2, [r8]
   208b4:	orr	r6, r6, r0, lsl #16
   208b8:	orr	r5, r6, r2, lsl #24
   208bc:	add	r3, pc, #332	; 0x14c
   208c0:	ldrd	r2, [r3]
   208c4:	cmp	r5, r3
   208c8:	cmpeq	r4, r2
   208cc:	bls	20e68 <_start@@Base+0xc054>
   208d0:	mvn	r3, #-2013265920	; 0x88000000
   208d4:	mvn	r2, #0
   208d8:	cmp	r5, r3
   208dc:	cmpeq	r4, r2
   208e0:	bhi	20fa8 <_start@@Base+0xc194>
   208e4:	and	r3, r4, #-16777216	; 0xff000000
   208e8:	add	r1, pc, #280	; 0x118
   208ec:	ldrd	r0, [r1]
   208f0:	str	r3, [sp, #40]	; 0x28
   208f4:	str	r5, [sp, #44]	; 0x2c
   208f8:	ldrd	r2, [sp, #40]	; 0x28
   208fc:	cmp	r3, r1
   20900:	cmpeq	r2, r0
   20904:	bne	2091c <_start@@Base+0xbb08>
   20908:	cmp	ip, #5
   2090c:	ble	2091c <_start@@Base+0xbb08>
   20910:	ldrb	r3, [r8, #5]
   20914:	cmp	r3, #34	; 0x22
   20918:	beq	2182c <_start@@Base+0xca18>
   2091c:	mov	r1, r8
   20920:	mov	r2, r9
   20924:	mov	r0, fp
   20928:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   2092c:	mov	sl, r0
   20930:	sub	r3, r9, sl
   20934:	cmp	r3, #1
   20938:	ble	2094c <_start@@Base+0xbb38>
   2093c:	ldrb	r3, [sl]
   20940:	cmp	r3, #32
   20944:	bhi	20960 <_start@@Base+0xbb4c>
   20948:	beq	210b8 <_start@@Base+0xc2a4>
   2094c:	mov	r1, sl
   20950:	mov	r2, r9
   20954:	mov	r0, fp
   20958:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2095c:	mov	sl, r0
   20960:	cmp	r9, sl
   20964:	beq	210b0 <_start@@Base+0xc29c>
   20968:	ldrb	r3, [sl]
   2096c:	cmp	r3, #44	; 0x2c
   20970:	beq	210cc <_start@@Base+0xc2b8>
   20974:	mov	r3, #0
   20978:	str	r3, [sp, #352]	; 0x160
   2097c:	ldrb	r3, [sl]
   20980:	cmp	r3, #125	; 0x7d
   20984:	beq	21078 <_start@@Base+0xc264>
   20988:	mov	r3, #10
   2098c:	mov	r1, sl
   20990:	mov	r2, r9
   20994:	mov	r0, fp
   20998:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2099c:	mov	r8, r0
   209a0:	ldr	r3, [sp, #352]	; 0x160
   209a4:	b	1fcf8 <_start@@Base+0xaee4>
   209a8:	mov	r6, #0
   209ac:	mov	r7, #0
   209b0:	b	2087c <_start@@Base+0xba68>
   209b4:	mov	r2, #0
   209b8:	mov	r3, r2
   209bc:	b	20890 <_start@@Base+0xba7c>
   209c0:	mov	r2, #0
   209c4:	mov	r3, r2
   209c8:	b	20898 <_start@@Base+0xba84>
   209cc:	mov	r2, #0
   209d0:	mov	r0, r2
   209d4:	b	208a0 <_start@@Base+0xba8c>
   209d8:	mov	r2, #0
   209dc:	mov	r6, r2
   209e0:	b	208a8 <_start@@Base+0xba94>
   209e4:	mov	r2, #0
   209e8:	mov	r3, r2
   209ec:	b	20888 <_start@@Base+0xba74>
   209f0:	cmnvs	lr, r5, ror #6
   209f4:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   209f8:			; <UNDEFINED> instruction: 0x666e7630
   209fc:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   20a00:			; <UNDEFINED> instruction: 0x666e7631
   20a04:	teqvc	r6, #1593835520	; 0x5f000000
   20a08:	movwcc	r0, #0
   20a0c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20a10:	rscscc	pc, pc, #1020	; 0x3fc
   20a14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20a18:	mrscc	r0, (UNDEF: 0)
   20a1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20a20:	andeq	r3, r3, r8, ror #4
   20a24:	submi	r0, r0, r0
   20a28:	ldrb	r2, [r8]
   20a2c:	mov	r4, #0
   20a30:	lsl	r5, r2, #24
   20a34:	sub	r3, pc, #44	; 0x2c
   20a38:	ldrd	r2, [r3]
   20a3c:	cmp	r5, r3
   20a40:	cmpeq	r4, r2
   20a44:	bhi	208d0 <_start@@Base+0xbabc>
   20a48:	sub	r3, pc, #56	; 0x38
   20a4c:	ldrd	r2, [r3]
   20a50:	cmp	r5, r3
   20a54:	cmpeq	r4, r2
   20a58:	bne	2091c <_start@@Base+0xbb08>
   20a5c:	cmp	ip, #5
   20a60:	ble	2091c <_start@@Base+0xbb08>
   20a64:	ldrb	r3, [r8, #5]
   20a68:	cmp	r3, #34	; 0x22
   20a6c:	bne	2091c <_start@@Base+0xbb08>
   20a70:	add	r1, r8, #6
   20a74:	sub	r3, r9, r1
   20a78:	cmp	r3, #1
   20a7c:	ble	20a90 <_start@@Base+0xbc7c>
   20a80:	ldrb	r3, [r8, #6]
   20a84:	cmp	r3, #32
   20a88:	bhi	20aa0 <_start@@Base+0xbc8c>
   20a8c:	beq	21ef4 <_start@@Base+0xd0e0>
   20a90:	mov	r2, r9
   20a94:	mov	r0, fp
   20a98:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   20a9c:	mov	r1, r0
   20aa0:	cmp	r9, r1
   20aa4:	beq	20ab4 <_start@@Base+0xbca0>
   20aa8:	ldrb	r3, [r1]
   20aac:	cmp	r3, #58	; 0x3a
   20ab0:	beq	22ac0 <_start@@Base+0xdcac>
   20ab4:	mov	r3, #4
   20ab8:	mov	r2, r9
   20abc:	mov	r0, fp
   20ac0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   20ac4:	mov	r6, r0
   20ac8:	cmp	r8, r6
   20acc:	beq	2091c <_start@@Base+0xbb08>
   20ad0:	add	r7, sp, #360	; 0x168
   20ad4:	mov	r2, r9
   20ad8:	vstr	d9, [sp, #360]	; 0x168
   20adc:	mov	r3, r7
   20ae0:	mov	r1, r6
   20ae4:	mov	r0, fp
   20ae8:	bl	2d318 <flatcc_json_parser_double@@Base>
   20aec:	cmp	r6, r0
   20af0:	mov	sl, r0
   20af4:	beq	21914 <_start@@Base+0xcb00>
   20af8:	ldr	r1, [sp, #16]
   20afc:	add	r3, sp, #360	; 0x168
   20b00:	ldrd	r2, [r3]
   20b04:	strd	r2, [r1, #16]
   20b08:	b	20930 <_start@@Base+0xbb1c>
   20b0c:	mov	r1, r6
   20b10:	mov	r2, r9
   20b14:	mov	r0, fp
   20b18:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20b1c:	mov	sl, r0
   20b20:	b	1f6bc <_start@@Base+0xa8a8>
   20b24:	mov	r1, r6
   20b28:	mov	r2, r9
   20b2c:	mov	r0, fp
   20b30:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20b34:	mov	sl, r0
   20b38:	b	1f6bc <_start@@Base+0xa8a8>
   20b3c:	mov	r1, r6
   20b40:	mov	r2, r9
   20b44:	mov	r0, fp
   20b48:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20b4c:	mov	sl, r0
   20b50:	b	1f6bc <_start@@Base+0xa8a8>
   20b54:	mov	r1, r6
   20b58:	mov	r2, r9
   20b5c:	mov	r0, fp
   20b60:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20b64:	mov	sl, r0
   20b68:	b	1f6bc <_start@@Base+0xa8a8>
   20b6c:	mov	r1, r6
   20b70:	mov	r2, r9
   20b74:	mov	r0, fp
   20b78:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20b7c:	mov	sl, r0
   20b80:	b	1f6bc <_start@@Base+0xa8a8>
   20b84:	add	r6, r6, #16
   20b88:	mov	r1, r9
   20b8c:	mov	r0, r6
   20b90:	bl	14f08 <_start@@Base+0xf4>
   20b94:	lsr	ip, r1, #16
   20b98:	mov	r0, #0
   20b9c:	mov	r3, #0
   20ba0:	movt	r3, #26418	; 0x6732
   20ba4:	mov	r2, #0
   20ba8:	lsl	ip, ip, #16
   20bac:	str	r0, [sp, #184]	; 0xb8
   20bb0:	str	ip, [sp, #188]	; 0xbc
   20bb4:	ldrd	r4, [sp, #184]	; 0xb8
   20bb8:	cmp	r5, r3
   20bbc:	cmpeq	r4, r2
   20bc0:	beq	21d98 <_start@@Base+0xcf84>
   20bc4:	and	r3, r1, #-16777216	; 0xff000000
   20bc8:	str	r0, [sp, #272]	; 0x110
   20bcc:	str	r3, [sp, #276]	; 0x114
   20bd0:	add	r3, sp, #272	; 0x110
   20bd4:	ldrd	r2, [r3]
   20bd8:	cmp	r3, #1728053248	; 0x67000000
   20bdc:	cmpeq	r2, #0
   20be0:	bne	226a4 <_start@@Base+0xd890>
   20be4:	sub	r3, r9, r6
   20be8:	cmp	r3, #1
   20bec:	ble	22948 <_start@@Base+0xdb34>
   20bf0:	mov	r3, #1
   20bf4:	mov	r2, r9
   20bf8:	mov	r1, r6
   20bfc:	mov	r0, fp
   20c00:	bl	1a220 <_start@@Base+0x540c>
   20c04:	cmp	r6, r0
   20c08:	mov	sl, r0
   20c0c:	beq	22948 <_start@@Base+0xdb34>
   20c10:	ldr	r0, [fp]
   20c14:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   20c18:	cmp	r0, #0
   20c1c:	bne	1edec <_start@@Base+0x9fd8>
   20c20:	ldr	r5, [sp, #28]
   20c24:	mov	r1, sl
   20c28:	mov	r2, r9
   20c2c:	mov	r0, fp
   20c30:	mov	r3, r5
   20c34:	bl	1a14c <_start@@Base+0x5338>
   20c38:	ldr	r3, [sp, #336]	; 0x150
   20c3c:	mov	sl, r0
   20c40:	cmp	r3, #0
   20c44:	beq	20cb0 <_start@@Base+0xbe9c>
   20c48:	add	r4, sp, #340	; 0x154
   20c4c:	mov	r1, sl
   20c50:	mov	r3, r4
   20c54:	mov	r2, r9
   20c58:	mov	r0, fp
   20c5c:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   20c60:	ldr	r3, [sp, #340]	; 0x154
   20c64:	mov	sl, r0
   20c68:	mov	r1, #1
   20c6c:	cmp	r3, #0
   20c70:	beq	1edec <_start@@Base+0x9fd8>
   20c74:	ldr	r0, [fp]
   20c78:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   20c7c:	subs	ip, r0, #0
   20c80:	mov	r3, r5
   20c84:	mov	r2, r9
   20c88:	mov	r1, sl
   20c8c:	mov	r0, fp
   20c90:	beq	1edec <_start@@Base+0x9fd8>
   20c94:	ldr	lr, [sp, #340]	; 0x154
   20c98:	str	lr, [ip]
   20c9c:	bl	1ad0c <_start@@Base+0x5ef8>
   20ca0:	ldr	r3, [sp, #336]	; 0x150
   20ca4:	mov	sl, r0
   20ca8:	cmp	r3, #0
   20cac:	bne	20c4c <_start@@Base+0xbe38>
   20cb0:	ldr	r0, [fp]
   20cb4:	bl	27bc8 <flatcc_builder_end_offset_vector@@Base>
   20cb8:	cmp	r0, #0
   20cbc:	str	r0, [sp, #340]	; 0x154
   20cc0:	beq	1edec <_start@@Base+0x9fd8>
   20cc4:	mov	r1, #10
   20cc8:	ldr	r0, [fp]
   20ccc:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   20cd0:	cmp	r0, #0
   20cd4:	beq	1edec <_start@@Base+0x9fd8>
   20cd8:	ldr	r3, [sp, #340]	; 0x154
   20cdc:	str	r3, [r0]
   20ce0:	b	1f6bc <_start@@Base+0xa8a8>
   20ce4:	mov	r1, r6
   20ce8:	mov	r2, r9
   20cec:	mov	r0, fp
   20cf0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20cf4:	mov	sl, r0
   20cf8:	b	1f6bc <_start@@Base+0xa8a8>
   20cfc:	mov	r1, r6
   20d00:	mov	r2, r9
   20d04:	mov	r0, fp
   20d08:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20d0c:	mov	sl, r0
   20d10:	b	1f6bc <_start@@Base+0xa8a8>
   20d14:	cmp	r1, #6
   20d18:	ble	21eb0 <_start@@Base+0xd09c>
   20d1c:	mov	r3, #6
   20d20:	mov	r2, r9
   20d24:	mov	r1, r6
   20d28:	mov	r0, fp
   20d2c:	bl	1a220 <_start@@Base+0x540c>
   20d30:	cmp	r6, r0
   20d34:	mov	r4, r0
   20d38:	beq	21eb0 <_start@@Base+0xd09c>
   20d3c:	mov	ip, #0
   20d40:	add	r5, sp, #360	; 0x168
   20d44:	mov	r1, r0
   20d48:	mov	r2, r9
   20d4c:	mov	r3, r5
   20d50:	mov	r0, fp
   20d54:	str	ip, [sp, #360]	; 0x168
   20d58:	bl	2d410 <flatcc_json_parser_float@@Base>
   20d5c:	cmp	r0, r4
   20d60:	mov	sl, r0
   20d64:	beq	22c10 <_start@@Base+0xddfc>
   20d68:	vldr	s15, [pc, #-844]	; 20a24 <_start@@Base+0xbc10>
   20d6c:	vldr	s14, [sp, #360]	; 0x168
   20d70:	vcmp.f32	s14, s15
   20d74:	vmrs	APSR_nzcv, fpscr
   20d78:	bne	20d88 <_start@@Base+0xbf74>
   20d7c:	ldr	r3, [fp, #8]
   20d80:	tst	r3, #2
   20d84:	beq	1f6bc <_start@@Base+0xa8a8>
   20d88:	mov	r3, #4
   20d8c:	mov	r1, #26
   20d90:	ldr	r0, [fp]
   20d94:	mov	r2, r3
   20d98:	bl	28894 <flatcc_builder_table_add@@Base>
   20d9c:	cmp	r0, #0
   20da0:	beq	23230 <_start@@Base+0xe41c>
   20da4:	ldr	r3, [sp, #360]	; 0x168
   20da8:	str	r3, [r0]
   20dac:	b	1f6bc <_start@@Base+0xa8a8>
   20db0:	mov	r2, #0
   20db4:	mov	r3, #0
   20db8:	mov	r6, #0
   20dbc:	add	r1, sp, #360	; 0x168
   20dc0:	cmp	r9, r4
   20dc4:	moveq	r5, r9
   20dc8:	strd	r2, [r1]
   20dcc:	str	r6, [sp, #356]	; 0x164
   20dd0:	beq	20e00 <_start@@Base+0xbfec>
   20dd4:	add	r0, sp, #360	; 0x168
   20dd8:	add	r3, sp, #356	; 0x164
   20ddc:	mov	r2, r9
   20de0:	mov	r1, r4
   20de4:	str	r0, [sp]
   20de8:	mov	r0, fp
   20dec:	bl	2d528 <flatcc_json_parser_integer@@Base>
   20df0:	cmp	r4, r0
   20df4:	mov	r5, r0
   20df8:	strbeq	r6, [sp, #352]	; 0x160
   20dfc:	bne	2286c <_start@@Base+0xda58>
   20e00:	ldr	r3, [pc, #-1000]	; 20a20 <_start@@Base+0xbc0c>
   20e04:	add	ip, sp, #352	; 0x160
   20e08:	mov	r2, r9
   20e0c:	mov	r1, r5
   20e10:	mov	r0, fp
   20e14:	str	ip, [sp]
   20e18:	add	r3, pc, r3
   20e1c:	add	r3, r3, #456	; 0x1c8
   20e20:	bl	191ec <_start@@Base+0x43d8>
   20e24:	cmp	r9, r0
   20e28:	cmpne	r0, r5
   20e2c:	mov	sl, r0
   20e30:	beq	1edec <_start@@Base+0x9fd8>
   20e34:	ldrb	r3, [sp, #352]	; 0x160
   20e38:	cmp	r3, #1
   20e3c:	bne	1f0fc <_start@@Base+0xa2e8>
   20e40:	ldr	r3, [fp, #8]
   20e44:	tst	r3, #2
   20e48:	beq	1f6bc <_start@@Base+0xa8a8>
   20e4c:	b	1f0fc <_start@@Base+0xa2e8>
   20e50:	mov	r1, r4
   20e54:	mov	r2, r9
   20e58:	mov	r0, fp
   20e5c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   20e60:	mov	sl, r0
   20e64:	b	1f6bc <_start@@Base+0xa8a8>
   20e68:	and	r2, r4, #-16777216	; 0xff000000
   20e6c:	mov	r4, r2
   20e70:	add	r3, pc, #848	; 0x350
   20e74:	ldrd	r2, [r3]
   20e78:	cmp	r5, r3
   20e7c:	cmpeq	r4, r2
   20e80:	bne	20a48 <_start@@Base+0xbc34>
   20e84:	cmp	ip, #5
   20e88:	ble	2091c <_start@@Base+0xbb08>
   20e8c:	ldrb	r3, [r8, #5]
   20e90:	cmp	r3, #34	; 0x22
   20e94:	bne	2091c <_start@@Base+0xbb08>
   20e98:	add	r1, r8, #6
   20e9c:	sub	r3, r9, r1
   20ea0:	cmp	r3, #1
   20ea4:	ble	20eb8 <_start@@Base+0xc0a4>
   20ea8:	ldrb	r3, [r8, #6]
   20eac:	cmp	r3, #32
   20eb0:	bhi	20ec8 <_start@@Base+0xc0b4>
   20eb4:	beq	21ee0 <_start@@Base+0xd0cc>
   20eb8:	mov	r2, r9
   20ebc:	mov	r0, fp
   20ec0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   20ec4:	mov	r1, r0
   20ec8:	cmp	r9, r1
   20ecc:	beq	20edc <_start@@Base+0xc0c8>
   20ed0:	ldrb	r3, [r1]
   20ed4:	cmp	r3, #58	; 0x3a
   20ed8:	beq	22aa8 <_start@@Base+0xdc94>
   20edc:	mov	r3, #4
   20ee0:	mov	r2, r9
   20ee4:	mov	r0, fp
   20ee8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   20eec:	mov	r6, r0
   20ef0:	cmp	r8, r6
   20ef4:	beq	2091c <_start@@Base+0xbb08>
   20ef8:	mov	r3, #0
   20efc:	mov	r0, #0
   20f00:	mov	r1, #0
   20f04:	cmp	r9, r6
   20f08:	strb	r3, [sp, #348]	; 0x15c
   20f0c:	str	r3, [sp, #356]	; 0x164
   20f10:	add	r3, sp, #360	; 0x168
   20f14:	strd	r0, [r3]
   20f18:	beq	21644 <_start@@Base+0xc830>
   20f1c:	add	r0, sp, #360	; 0x168
   20f20:	add	r3, sp, #356	; 0x164
   20f24:	mov	r2, r9
   20f28:	mov	r1, r6
   20f2c:	str	r0, [sp]
   20f30:	mov	r0, fp
   20f34:	bl	2d528 <flatcc_json_parser_integer@@Base>
   20f38:	cmp	r6, r0
   20f3c:	mov	sl, r0
   20f40:	bne	217c4 <_start@@Base+0xc9b0>
   20f44:	ldr	r3, [pc, #644]	; 211d0 <_start@@Base+0xc3bc>
   20f48:	add	ip, sp, #348	; 0x15c
   20f4c:	mov	r2, r9
   20f50:	mov	r1, sl
   20f54:	mov	r0, fp
   20f58:	str	ip, [sp]
   20f5c:	add	r3, pc, r3
   20f60:	add	r3, r3, #340	; 0x154
   20f64:	bl	19b68 <_start@@Base+0x4d54>
   20f68:	cmp	r9, r0
   20f6c:	cmpne	r0, sl
   20f70:	beq	22f4c <_start@@Base+0xe138>
   20f74:	add	r3, sp, #348	; 0x15c
   20f78:	mov	sl, r0
   20f7c:	ldrsb	r2, [r3]
   20f80:	ldr	r3, [sp, #16]
   20f84:	strb	r2, [r3, #24]
   20f88:	b	20930 <_start@@Base+0xbb1c>
   20f8c:	mov	r1, r8
   20f90:	mov	r3, #5
   20f94:	mov	r2, r9
   20f98:	mov	r0, fp
   20f9c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   20fa0:	mov	r8, r0
   20fa4:	b	1fd18 <_start@@Base+0xaf04>
   20fa8:	mvn	r3, #-2030043136	; 0x87000000
   20fac:	mvn	r2, #0
   20fb0:	cmp	r5, r3
   20fb4:	cmpeq	r4, r2
   20fb8:	bhi	21120 <_start@@Base+0xc30c>
   20fbc:	cmp	ip, #1
   20fc0:	ble	2091c <_start@@Base+0xbb08>
   20fc4:	ldrb	r3, [r8, #1]
   20fc8:	cmp	r3, #34	; 0x22
   20fcc:	bne	2091c <_start@@Base+0xbb08>
   20fd0:	add	r1, r8, #2
   20fd4:	sub	r3, r9, r1
   20fd8:	cmp	r3, #1
   20fdc:	ble	21000 <_start@@Base+0xc1ec>
   20fe0:	ldrb	r3, [r8, #2]
   20fe4:	cmp	r3, #32
   20fe8:	bhi	21010 <_start@@Base+0xc1fc>
   20fec:	bne	21000 <_start@@Base+0xc1ec>
   20ff0:	ldrb	r3, [r8, #3]
   20ff4:	cmp	r3, #32
   20ff8:	addhi	r1, r8, #3
   20ffc:	bhi	21010 <_start@@Base+0xc1fc>
   21000:	mov	r2, r9
   21004:	mov	r0, fp
   21008:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2100c:	mov	r1, r0
   21010:	cmp	r9, r1
   21014:	beq	21024 <_start@@Base+0xc210>
   21018:	ldrb	r3, [r1]
   2101c:	cmp	r3, #58	; 0x3a
   21020:	beq	22bf8 <_start@@Base+0xdde4>
   21024:	mov	r3, #4
   21028:	mov	r2, r9
   2102c:	mov	r0, fp
   21030:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   21034:	mov	r6, r0
   21038:	cmp	r8, r6
   2103c:	beq	2091c <_start@@Base+0xbb08>
   21040:	add	r7, sp, #360	; 0x168
   21044:	mov	r2, r9
   21048:	vstr	s16, [sp, #360]	; 0x168
   2104c:	mov	r3, r7
   21050:	mov	r1, r6
   21054:	mov	r0, fp
   21058:	bl	2d410 <flatcc_json_parser_float@@Base>
   2105c:	cmp	r6, r0
   21060:	mov	sl, r0
   21064:	beq	2238c <_start@@Base+0xd578>
   21068:	ldr	r2, [sp, #16]
   2106c:	ldr	r3, [sp, #360]	; 0x168
   21070:	str	r3, [r2]
   21074:	b	20930 <_start@@Base+0xbb1c>
   21078:	add	r1, sl, #1
   2107c:	sub	r3, r9, r1
   21080:	cmp	r3, #1
   21084:	ble	21098 <_start@@Base+0xc284>
   21088:	ldrb	r3, [sl, #1]
   2108c:	cmp	r3, #32
   21090:	bhi	212d4 <_start@@Base+0xc4c0>
   21094:	beq	2162c <_start@@Base+0xc818>
   21098:	mov	r2, r9
   2109c:	mov	r0, fp
   210a0:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   210a4:	mov	r8, r0
   210a8:	ldr	r3, [sp, #352]	; 0x160
   210ac:	b	1fcf8 <_start@@Base+0xaee4>
   210b0:	strd	r4, [sp, #128]	; 0x80
   210b4:	b	1f6bc <_start@@Base+0xa8a8>
   210b8:	ldrb	r3, [sl, #1]
   210bc:	cmp	r3, #32
   210c0:	addhi	sl, sl, #1
   210c4:	bls	2094c <_start@@Base+0xbb38>
   210c8:	b	20960 <_start@@Base+0xbb4c>
   210cc:	add	r8, sl, #1
   210d0:	sub	r3, r9, r8
   210d4:	cmp	r3, #1
   210d8:	ble	210ec <_start@@Base+0xc2d8>
   210dc:	ldrb	r3, [sl, #1]
   210e0:	cmp	r3, #32
   210e4:	bhi	21100 <_start@@Base+0xc2ec>
   210e8:	beq	218b8 <_start@@Base+0xcaa4>
   210ec:	mov	r1, r8
   210f0:	mov	r2, r9
   210f4:	mov	r0, fp
   210f8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   210fc:	mov	r8, r0
   21100:	cmp	r9, r8
   21104:	beq	219a8 <_start@@Base+0xcb94>
   21108:	ldrb	r3, [r8]
   2110c:	cmp	r3, #125	; 0x7d
   21110:	beq	21978 <_start@@Base+0xcb64>
   21114:	mov	r3, #1
   21118:	str	r3, [sp, #352]	; 0x160
   2111c:	b	1fd00 <_start@@Base+0xaeec>
   21120:	mov	r3, #0
   21124:	str	r3, [sp, #72]	; 0x48
   21128:	and	r3, r5, #-16777216	; 0xff000000
   2112c:	str	r3, [sp, #76]	; 0x4c
   21130:	ldrd	r2, [sp, #72]	; 0x48
   21134:	cmp	r3, #2046820352	; 0x7a000000
   21138:	cmpeq	r2, #0
   2113c:	beq	212e0 <_start@@Base+0xc4cc>
   21140:	ldrd	r2, [sp, #72]	; 0x48
   21144:	cmp	r3, #2030043136	; 0x79000000
   21148:	cmpeq	r2, #0
   2114c:	bne	2091c <_start@@Base+0xbb08>
   21150:	cmp	ip, #1
   21154:	ble	2091c <_start@@Base+0xbb08>
   21158:	mov	r3, #1
   2115c:	mov	r2, r9
   21160:	mov	r1, r8
   21164:	mov	r0, fp
   21168:	bl	1a220 <_start@@Base+0x540c>
   2116c:	cmp	r8, r0
   21170:	mov	r6, r0
   21174:	beq	2091c <_start@@Base+0xbb08>
   21178:	add	r7, sp, #360	; 0x168
   2117c:	mov	r1, r0
   21180:	vstr	s16, [sp, #360]	; 0x168
   21184:	mov	r2, r9
   21188:	mov	r3, r7
   2118c:	mov	r0, fp
   21190:	bl	2d410 <flatcc_json_parser_float@@Base>
   21194:	cmp	r6, r0
   21198:	mov	sl, r0
   2119c:	beq	227b8 <_start@@Base+0xd9a4>
   211a0:	ldr	r2, [sp, #16]
   211a4:	ldr	r3, [sp, #360]	; 0x168
   211a8:	str	r3, [r2, #4]
   211ac:	b	20930 <_start@@Base+0xbb1c>
   211b0:	mov	r1, r6
   211b4:	mov	r2, r9
   211b8:	mov	r0, fp
   211bc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   211c0:	mov	sl, r0
   211c4:	b	1f6bc <_start@@Base+0xa8a8>
   211c8:	andcc	r0, r0, #0
   211cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   211d0:	andeq	r3, r3, r4, lsr #2
   211d4:	add	r3, pc, #572	; 0x23c
   211d8:	ldrd	r2, [r3]
   211dc:	ldrd	r0, [sp, #56]	; 0x38
   211e0:	cmp	r1, r3
   211e4:	cmpeq	r0, r2
   211e8:	bne	2164c <_start@@Base+0xc838>
   211ec:	cmp	r7, #5
   211f0:	ble	20b6c <_start@@Base+0xbd58>
   211f4:	mov	r3, #5
   211f8:	mov	r2, r9
   211fc:	mov	r1, r6
   21200:	mov	r0, fp
   21204:	bl	1a220 <_start@@Base+0x540c>
   21208:	cmp	r0, r6
   2120c:	mov	sl, r0
   21210:	beq	20b6c <_start@@Base+0xbd58>
   21214:	mvn	r3, #-1073741824	; 0xc0000000
   21218:	mov	r2, #2
   2121c:	ldr	r0, [fp]
   21220:	mov	r1, #4
   21224:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   21228:	cmp	r0, #0
   2122c:	bne	1edec <_start@@Base+0x9fd8>
   21230:	ldr	r4, [sp, #28]
   21234:	mov	r1, sl
   21238:	mov	r2, r9
   2123c:	mov	r0, fp
   21240:	mov	r3, r4
   21244:	bl	1a14c <_start@@Base+0x5338>
   21248:	ldr	r3, [sp, #336]	; 0x150
   2124c:	mov	sl, r0
   21250:	cmp	r3, #0
   21254:	beq	212a0 <_start@@Base+0xc48c>
   21258:	mov	r1, #1
   2125c:	ldr	r0, [fp]
   21260:	bl	26168 <flatcc_builder_extend_vector@@Base>
   21264:	subs	r3, r0, #0
   21268:	mov	r1, sl
   2126c:	mov	r2, r9
   21270:	mov	r0, fp
   21274:	beq	1edec <_start@@Base+0x9fd8>
   21278:	bl	1e688 <_start@@Base+0x9874>
   2127c:	mov	r1, r0
   21280:	mov	r3, r4
   21284:	mov	r2, r9
   21288:	mov	r0, fp
   2128c:	bl	1ad0c <_start@@Base+0x5ef8>
   21290:	ldr	r3, [sp, #336]	; 0x150
   21294:	mov	sl, r0
   21298:	cmp	r3, #0
   2129c:	bne	21258 <_start@@Base+0xc444>
   212a0:	ldr	r0, [fp]
   212a4:	bl	27a9c <flatcc_builder_end_vector@@Base>
   212a8:	cmp	r0, #0
   212ac:	str	r0, [sp, #340]	; 0x154
   212b0:	beq	1edec <_start@@Base+0x9fd8>
   212b4:	mov	r1, #31
   212b8:	ldr	r0, [fp]
   212bc:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   212c0:	cmp	r0, #0
   212c4:	beq	1edec <_start@@Base+0x9fd8>
   212c8:	ldr	r3, [sp, #340]	; 0x154
   212cc:	str	r3, [r0]
   212d0:	b	1f6bc <_start@@Base+0xa8a8>
   212d4:	mov	sl, r1
   212d8:	strd	r4, [sp, #128]	; 0x80
   212dc:	b	1f6bc <_start@@Base+0xa8a8>
   212e0:	cmp	ip, #1
   212e4:	ble	2091c <_start@@Base+0xbb08>
   212e8:	mov	r3, #1
   212ec:	mov	r2, r9
   212f0:	mov	r1, r8
   212f4:	mov	r0, fp
   212f8:	bl	1a220 <_start@@Base+0x540c>
   212fc:	cmp	r8, r0
   21300:	mov	r6, r0
   21304:	beq	2091c <_start@@Base+0xbb08>
   21308:	add	r7, sp, #360	; 0x168
   2130c:	mov	r1, r0
   21310:	vstr	s16, [sp, #360]	; 0x168
   21314:	mov	r2, r9
   21318:	mov	r3, r7
   2131c:	mov	r0, fp
   21320:	bl	2d410 <flatcc_json_parser_float@@Base>
   21324:	cmp	r6, r0
   21328:	mov	sl, r0
   2132c:	beq	2276c <_start@@Base+0xd958>
   21330:	ldr	r2, [sp, #16]
   21334:	ldr	r3, [sp, #360]	; 0x168
   21338:	str	r3, [r2, #8]
   2133c:	b	20930 <_start@@Base+0xbb1c>
   21340:	add	r6, r6, #8
   21344:	mov	r1, r9
   21348:	mov	r0, r6
   2134c:	mov	r4, #0
   21350:	bl	14f08 <_start@@Base+0xf4>
   21354:	lsr	r1, r1, #16
   21358:	str	r4, [sp, #160]	; 0xa0
   2135c:	mov	r3, #0
   21360:	movt	r3, #13876	; 0x3634
   21364:	mov	r2, #0
   21368:	lsl	r1, r1, #16
   2136c:	str	r1, [sp, #164]	; 0xa4
   21370:	ldrd	r0, [sp, #160]	; 0xa0
   21374:	cmp	r1, r3
   21378:	cmpeq	r0, r2
   2137c:	bne	218fc <_start@@Base+0xcae8>
   21380:	sub	r3, r9, r6
   21384:	cmp	r3, #2
   21388:	ble	21e98 <_start@@Base+0xd084>
   2138c:	mov	r3, #2
   21390:	mov	r2, r9
   21394:	mov	r1, r6
   21398:	mov	r0, fp
   2139c:	bl	1a220 <_start@@Base+0x540c>
   213a0:	cmp	r6, r0
   213a4:	mov	sl, r0
   213a8:	beq	21e98 <_start@@Base+0xd084>
   213ac:	mov	r1, #3
   213b0:	ldr	r0, [fp]
   213b4:	str	r4, [sp, #340]	; 0x154
   213b8:	bl	26d60 <flatcc_builder_start_table@@Base>
   213bc:	cmp	r0, r4
   213c0:	bne	215e8 <_start@@Base+0xc7d4>
   213c4:	add	r5, sp, #356	; 0x164
   213c8:	mov	r1, sl
   213cc:	mov	r3, r5
   213d0:	mov	r2, r9
   213d4:	mov	r0, fp
   213d8:	bl	18e0c <_start@@Base+0x3ff8>
   213dc:	ldr	r3, [sp, #356]	; 0x164
   213e0:	mov	sl, r0
   213e4:	cmp	r3, r4
   213e8:	beq	228cc <_start@@Base+0xdab8>
   213ec:	add	r7, pc, #44	; 0x2c
   213f0:	ldrd	r6, [r7]
   213f4:	mov	r8, r4
   213f8:	add	r3, sp, #296	; 0x128
   213fc:	movt	r8, #65535	; 0xffff
   21400:	strd	r6, [sp, #16]
   21404:	mov	r7, r5
   21408:	mov	r6, r8
   2140c:	ldrd	r4, [r3]
   21410:	b	21504 <_start@@Base+0xc6f0>
   21414:	nop	{0}
   21418:	strcc	r0, [r0, #-0]
   2141c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21420:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   21424:	mcrvs	3, 3, r7, cr5, cr4, {3}
   21428:	andeq	r0, r0, r0
   2142c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   21430:	cmnvs	r4, r0, lsl #2
   21434:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   21438:	strbvs	r0, [r4, #-0]!
   2143c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   21440:	svcpl	0x00747970
   21444:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21448:	andeq	r1, r0, r0, lsl #24
   2144c:	andeq	r2, r3, r0, lsr #19
   21450:	mov	r8, #0
   21454:	str	r8, [sp, #96]	; 0x60
   21458:	str	r1, [sp, #100]	; 0x64
   2145c:	sub	r1, pc, #60	; 0x3c
   21460:	ldrd	r0, [r1]
   21464:	ldrd	r2, [sp, #96]	; 0x60
   21468:	cmp	r3, r1
   2146c:	cmpeq	r2, r0
   21470:	bne	22100 <_start@@Base+0xd2ec>
   21474:	sub	r3, r9, sl
   21478:	cmp	r3, #4
   2147c:	ble	22100 <_start@@Base+0xd2ec>
   21480:	mov	r1, sl
   21484:	mov	r3, #4
   21488:	mov	r2, r9
   2148c:	mov	r0, fp
   21490:	bl	1a220 <_start@@Base+0x540c>
   21494:	cmp	sl, r0
   21498:	mov	r1, r0
   2149c:	beq	22100 <_start@@Base+0xd2ec>
   214a0:	add	r3, sp, #360	; 0x168
   214a4:	mov	r2, r9
   214a8:	str	r8, [sp]
   214ac:	mov	r0, fp
   214b0:	bl	2e6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   214b4:	ldr	r3, [sp, #360]	; 0x168
   214b8:	mov	sl, r0
   214bc:	cmp	r3, r8
   214c0:	beq	215e0 <_start@@Base+0xc7cc>
   214c4:	mov	r1, r8
   214c8:	ldr	r0, [fp]
   214cc:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   214d0:	cmp	r0, #0
   214d4:	beq	215e0 <_start@@Base+0xc7cc>
   214d8:	ldr	r3, [sp, #360]	; 0x168
   214dc:	str	r3, [r0]
   214e0:	mov	r1, sl
   214e4:	mov	r3, r7
   214e8:	mov	r2, r9
   214ec:	mov	r0, fp
   214f0:	bl	1a2e0 <_start@@Base+0x54cc>
   214f4:	ldr	r3, [sp, #356]	; 0x164
   214f8:	mov	sl, r0
   214fc:	cmp	r3, #0
   21500:	beq	228c4 <_start@@Base+0xdab0>
   21504:	cmp	r9, sl
   21508:	beq	2151c <_start@@Base+0xc708>
   2150c:	ldrb	r3, [sl]
   21510:	cmp	r3, #34	; 0x22
   21514:	addeq	sl, sl, #1
   21518:	bne	22130 <_start@@Base+0xd31c>
   2151c:	mov	r1, r9
   21520:	mov	r0, sl
   21524:	bl	14f08 <_start@@Base+0xf4>
   21528:	ldrd	r2, [sp, #16]
   2152c:	cmp	r1, r3
   21530:	cmpeq	r0, r2
   21534:	bls	21450 <_start@@Base+0xc63c>
   21538:	sub	r3, pc, #272	; 0x110
   2153c:	ldrd	r2, [r3]
   21540:	bic	r4, r0, #255	; 0xff
   21544:	mov	r5, r1
   21548:	cmp	r1, r3
   2154c:	cmpeq	r4, r2
   21550:	beq	22240 <_start@@Base+0xd42c>
   21554:	and	r3, r0, r6
   21558:	str	r3, [sp, #168]	; 0xa8
   2155c:	str	r1, [sp, #172]	; 0xac
   21560:	sub	r1, pc, #304	; 0x130
   21564:	ldrd	r0, [r1]
   21568:	ldrd	r2, [sp, #168]	; 0xa8
   2156c:	cmp	r3, r1
   21570:	cmpeq	r2, r0
   21574:	bne	22100 <_start@@Base+0xd2ec>
   21578:	sub	r3, r9, sl
   2157c:	cmp	r3, #6
   21580:	ble	22100 <_start@@Base+0xd2ec>
   21584:	mov	r1, sl
   21588:	mov	r3, #6
   2158c:	mov	r2, r9
   21590:	mov	r0, fp
   21594:	bl	1a220 <_start@@Base+0x540c>
   21598:	cmp	sl, r0
   2159c:	mov	r1, r0
   215a0:	beq	22100 <_start@@Base+0xd2ec>
   215a4:	mov	r0, #0
   215a8:	add	r3, sp, #360	; 0x168
   215ac:	mov	r2, r9
   215b0:	str	r0, [sp]
   215b4:	mov	r0, fp
   215b8:	bl	2e6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   215bc:	ldr	r3, [sp, #360]	; 0x168
   215c0:	mov	sl, r0
   215c4:	cmp	r3, #0
   215c8:	beq	215e0 <_start@@Base+0xc7cc>
   215cc:	mov	r1, #2
   215d0:	ldr	r0, [fp]
   215d4:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   215d8:	cmp	r0, #0
   215dc:	bne	214d8 <_start@@Base+0xc6c4>
   215e0:	add	r3, sp, #296	; 0x128
   215e4:	strd	r4, [r3]
   215e8:	mov	r1, sl
   215ec:	mov	r3, #33	; 0x21
   215f0:	mov	r2, r9
   215f4:	mov	r0, fp
   215f8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   215fc:	ldr	r3, [sp, #340]	; 0x154
   21600:	mov	sl, r0
   21604:	cmp	r3, #0
   21608:	beq	1edec <_start@@Base+0x9fd8>
   2160c:	mov	r1, #35	; 0x23
   21610:	ldr	r0, [fp]
   21614:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   21618:	cmp	r0, #0
   2161c:	beq	1edec <_start@@Base+0x9fd8>
   21620:	ldr	r3, [sp, #340]	; 0x154
   21624:	str	r3, [r0]
   21628:	b	1f6bc <_start@@Base+0xa8a8>
   2162c:	ldrb	r3, [sl, #2]
   21630:	cmp	r3, #32
   21634:	bls	21098 <_start@@Base+0xc284>
   21638:	add	sl, sl, #2
   2163c:	strd	r4, [sp, #128]	; 0x80
   21640:	b	1f6bc <_start@@Base+0xa8a8>
   21644:	mov	sl, r9
   21648:	b	20f44 <_start@@Base+0xc130>
   2164c:	sub	r3, pc, #532	; 0x214
   21650:	ldrd	r2, [r3]
   21654:	ldrd	r0, [sp, #16]
   21658:	cmp	r1, r3
   2165c:	cmpeq	r0, r2
   21660:	bne	20b6c <_start@@Base+0xbd58>
   21664:	add	r6, r6, #8
   21668:	mov	r1, r9
   2166c:	mov	r0, r6
   21670:	mov	r4, #0
   21674:	bl	14f08 <_start@@Base+0xf4>
   21678:	and	r3, r1, #-16777216	; 0xff000000
   2167c:	str	r4, [sp, #192]	; 0xc0
   21680:	str	r3, [sp, #196]	; 0xc4
   21684:	ldrd	r2, [sp, #192]	; 0xc0
   21688:	cmp	r3, #1694498816	; 0x65000000
   2168c:	cmpeq	r2, #0
   21690:	bne	21960 <_start@@Base+0xcb4c>
   21694:	sub	r3, r9, r6
   21698:	cmp	r3, #1
   2169c:	ble	21ec8 <_start@@Base+0xd0b4>
   216a0:	mov	r1, r6
   216a4:	mov	r3, #1
   216a8:	mov	r2, r9
   216ac:	mov	r0, fp
   216b0:	bl	1a220 <_start@@Base+0x540c>
   216b4:	cmp	r6, r0
   216b8:	mov	r1, r0
   216bc:	beq	21ec8 <_start@@Base+0xd0b4>
   216c0:	ldr	ip, [pc, #-636]	; 2144c <_start@@Base+0xc638>
   216c4:	mov	r3, r4
   216c8:	mov	r5, #8
   216cc:	mov	r2, r9
   216d0:	mov	r0, fp
   216d4:	ldr	lr, [pc, #-660]	; 21448 <_start@@Base+0xc634>
   216d8:	str	r5, [sp]
   216dc:	ldr	r4, [sp, #344]	; 0x158
   216e0:	add	ip, pc, ip
   216e4:	add	ip, ip, #404	; 0x194
   216e8:	add	lr, pc, lr
   216ec:	stmib	sp, {r4, ip, lr}
   216f0:	bl	2ef00 <flatcc_json_parser_union_type@@Base>
   216f4:	mov	sl, r0
   216f8:	b	1f6bc <_start@@Base+0xa8a8>
   216fc:	add	r4, r6, #8
   21700:	mov	r1, r9
   21704:	mov	r0, r4
   21708:	bl	14f08 <_start@@Base+0xf4>
   2170c:	add	r3, pc, #908	; 0x38c
   21710:	ldrd	r2, [r3]
   21714:	cmp	r1, r3
   21718:	cmpeq	r0, r2
   2171c:	bne	21c44 <_start@@Base+0xce30>
   21720:	add	r6, r6, #16
   21724:	mov	r1, r9
   21728:	mov	r0, r6
   2172c:	bl	14f08 <_start@@Base+0xf4>
   21730:	and	r0, r0, #-16777216	; 0xff000000
   21734:	add	r3, pc, #876	; 0x36c
   21738:	ldrd	r2, [r3]
   2173c:	str	r1, [sp, #260]	; 0x104
   21740:	add	r1, sp, #256	; 0x100
   21744:	str	r0, [sp, #256]	; 0x100
   21748:	ldrd	r0, [r1]
   2174c:	cmp	r1, r3
   21750:	cmpeq	r0, r2
   21754:	bne	21d38 <_start@@Base+0xcf24>
   21758:	sub	r3, r9, r6
   2175c:	cmp	r3, #5
   21760:	ble	22d0c <_start@@Base+0xdef8>
   21764:	mov	r1, r6
   21768:	mov	r3, #5
   2176c:	mov	r2, r9
   21770:	mov	r0, fp
   21774:	bl	1a220 <_start@@Base+0x540c>
   21778:	cmp	r6, r0
   2177c:	mov	r1, r0
   21780:	beq	22d0c <_start@@Base+0xdef8>
   21784:	add	r3, sp, #340	; 0x154
   21788:	mov	r2, r9
   2178c:	mov	r0, fp
   21790:	bl	1be94 <_start@@Base+0x7080>
   21794:	ldr	r3, [sp, #340]	; 0x154
   21798:	mov	sl, r0
   2179c:	cmp	r3, #0
   217a0:	beq	1edec <_start@@Base+0x9fd8>
   217a4:	mov	r1, #34	; 0x22
   217a8:	ldr	r0, [fp]
   217ac:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   217b0:	cmp	r0, #0
   217b4:	beq	1edec <_start@@Base+0x9fd8>
   217b8:	ldr	r3, [sp, #340]	; 0x154
   217bc:	str	r3, [r0]
   217c0:	b	1f6bc <_start@@Base+0xa8a8>
   217c4:	ldr	r1, [sp, #356]	; 0x164
   217c8:	add	r3, sp, #360	; 0x168
   217cc:	ldrd	r2, [r3]
   217d0:	cmp	r1, #0
   217d4:	bne	21c8c <_start@@Base+0xce78>
   217d8:	cmp	r3, #0
   217dc:	cmpeq	r2, #127	; 0x7f
   217e0:	sxtbls	r2, r2
   217e4:	bls	20f80 <_start@@Base+0xc16c>
   217e8:	mov	r1, r0
   217ec:	mov	r3, #7
   217f0:	mov	r2, r9
   217f4:	mov	r0, fp
   217f8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   217fc:	mov	sl, r0
   21800:	cmp	r6, sl
   21804:	beq	20f44 <_start@@Base+0xc130>
   21808:	add	r3, sp, #348	; 0x15c
   2180c:	ldrsb	r2, [r3]
   21810:	b	20f80 <_start@@Base+0xc16c>
   21814:	mov	r1, r6
   21818:	mov	r2, r9
   2181c:	mov	r0, fp
   21820:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21824:	mov	sl, r0
   21828:	b	1f6bc <_start@@Base+0xa8a8>
   2182c:	add	r1, r8, #6
   21830:	sub	r3, r9, r1
   21834:	cmp	r3, #1
   21838:	ble	2185c <_start@@Base+0xca48>
   2183c:	ldrb	r3, [r8, #6]
   21840:	cmp	r3, #32
   21844:	bhi	2186c <_start@@Base+0xca58>
   21848:	bne	2185c <_start@@Base+0xca48>
   2184c:	ldrb	r3, [r8, #7]
   21850:	cmp	r3, #32
   21854:	addhi	r1, r8, #7
   21858:	bhi	2186c <_start@@Base+0xca58>
   2185c:	mov	r2, r9
   21860:	mov	r0, fp
   21864:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   21868:	mov	r1, r0
   2186c:	cmp	r9, r1
   21870:	beq	21880 <_start@@Base+0xca6c>
   21874:	ldrb	r3, [r1]
   21878:	cmp	r3, #58	; 0x3a
   2187c:	beq	22be0 <_start@@Base+0xddcc>
   21880:	mov	r3, #4
   21884:	mov	r2, r9
   21888:	mov	r0, fp
   2188c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   21890:	mov	r1, r0
   21894:	cmp	r8, r1
   21898:	beq	2091c <_start@@Base+0xbb08>
   2189c:	ldr	r3, [sp, #16]
   218a0:	mov	r2, r9
   218a4:	mov	r0, fp
   218a8:	add	r3, r3, #26
   218ac:	bl	1e688 <_start@@Base+0x9874>
   218b0:	mov	sl, r0
   218b4:	b	20930 <_start@@Base+0xbb1c>
   218b8:	ldrb	r3, [sl, #2]
   218bc:	cmp	r3, #32
   218c0:	addhi	r8, sl, #2
   218c4:	bls	210ec <_start@@Base+0xc2d8>
   218c8:	b	21100 <_start@@Base+0xc2ec>
   218cc:	mov	r1, r6
   218d0:	mov	r2, r9
   218d4:	mov	r0, fp
   218d8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   218dc:	mov	sl, r0
   218e0:	b	1f6bc <_start@@Base+0xa8a8>
   218e4:	mov	r1, r6
   218e8:	mov	r2, r9
   218ec:	mov	r0, fp
   218f0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   218f4:	mov	sl, r0
   218f8:	b	1f6bc <_start@@Base+0xa8a8>
   218fc:	mov	r1, r6
   21900:	mov	r2, r9
   21904:	mov	r0, fp
   21908:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   2190c:	mov	sl, r0
   21910:	b	1f6bc <_start@@Base+0xa8a8>
   21914:	ldr	r3, [pc, #420]	; 21ac0 <_start@@Base+0xccac>
   21918:	mov	r1, r0
   2191c:	mov	r2, r9
   21920:	mov	r0, fp
   21924:	str	r7, [sp]
   21928:	add	r3, pc, r3
   2192c:	add	r3, r3, #356	; 0x164
   21930:	bl	19064 <_start@@Base+0x4250>
   21934:	cmp	r9, r0
   21938:	cmpne	sl, r0
   2193c:	beq	22f4c <_start@@Base+0xe138>
   21940:	mov	sl, r0
   21944:	b	20af8 <_start@@Base+0xbce4>
   21948:	mov	r1, r4
   2194c:	mov	r2, r9
   21950:	mov	r0, fp
   21954:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21958:	mov	sl, r0
   2195c:	b	1f6bc <_start@@Base+0xa8a8>
   21960:	mov	r1, r6
   21964:	mov	r2, r9
   21968:	mov	r0, fp
   2196c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21970:	mov	sl, r0
   21974:	b	1f6bc <_start@@Base+0xa8a8>
   21978:	add	sl, r8, #1
   2197c:	mov	r3, #0
   21980:	sub	r2, r9, sl
   21984:	cmp	r2, #1
   21988:	str	r3, [sp, #352]	; 0x160
   2198c:	ble	219a0 <_start@@Base+0xcb8c>
   21990:	ldrb	r3, [r8, #1]
   21994:	cmp	r3, #32
   21998:	bhi	228bc <_start@@Base+0xdaa8>
   2199c:	beq	22bac <_start@@Base+0xdd98>
   219a0:	mov	r1, sl
   219a4:	b	21098 <_start@@Base+0xc284>
   219a8:	mov	ip, #0
   219ac:	mov	r3, #10
   219b0:	mov	r2, r9
   219b4:	mov	r1, r9
   219b8:	mov	r0, fp
   219bc:	str	ip, [sp, #352]	; 0x160
   219c0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   219c4:	mov	r8, r0
   219c8:	ldr	r3, [sp, #352]	; 0x160
   219cc:	b	1fcf8 <_start@@Base+0xaee4>
   219d0:	add	r3, pc, #216	; 0xd8
   219d4:	ldrd	r2, [r3]
   219d8:	cmp	r1, r3
   219dc:	cmpeq	r0, r2
   219e0:	beq	21fe8 <_start@@Base+0xd1d4>
   219e4:	add	r3, pc, #204	; 0xcc
   219e8:	ldrd	r2, [r3]
   219ec:	cmp	r1, r3
   219f0:	cmpeq	r0, r2
   219f4:	bne	22754 <_start@@Base+0xd940>
   219f8:	sub	r3, r9, r6
   219fc:	cmp	r3, #8
   21a00:	ble	22d28 <_start@@Base+0xdf14>
   21a04:	mov	r3, #8
   21a08:	mov	r2, r9
   21a0c:	mov	r1, r6
   21a10:	mov	r0, fp
   21a14:	bl	1a220 <_start@@Base+0x540c>
   21a18:	cmp	r6, r0
   21a1c:	mov	r4, r0
   21a20:	beq	22d24 <_start@@Base+0xdf10>
   21a24:	add	r5, sp, #360	; 0x168
   21a28:	mov	r6, #0
   21a2c:	mov	r7, #0
   21a30:	mov	r1, r0
   21a34:	mov	r3, r5
   21a38:	mov	r2, r9
   21a3c:	mov	r0, fp
   21a40:	strd	r6, [r5]
   21a44:	bl	17bd8 <_start@@Base+0x2dc4>
   21a48:	cmp	r0, r4
   21a4c:	mov	sl, r0
   21a50:	beq	230d4 <_start@@Base+0xe2c0>
   21a54:	add	r3, sp, #360	; 0x168
   21a58:	ldrd	r2, [r3]
   21a5c:	orrs	r3, r2, r3
   21a60:	bne	21a70 <_start@@Base+0xcc5c>
   21a64:	ldr	r3, [fp, #8]
   21a68:	tst	r3, #2
   21a6c:	beq	1f6bc <_start@@Base+0xa8a8>
   21a70:	mov	r3, #8
   21a74:	mov	r1, #19
   21a78:	ldr	r0, [fp]
   21a7c:	mov	r2, r3
   21a80:	bl	28894 <flatcc_builder_table_add@@Base>
   21a84:	cmp	r0, #0
   21a88:	beq	1edec <_start@@Base+0x9fd8>
   21a8c:	add	r3, sp, #360	; 0x168
   21a90:	ldrd	r2, [r3]
   21a94:	strd	r2, [r0]
   21a98:	b	1f6bc <_start@@Base+0xa8a8>
   21a9c:	nop	{0}
   21aa0:	rsbvc	r6, r1, r5, ror #6
   21aa4:	smcvs	54867	; 0xd653
   21aa8:	strvc	r0, [r0], #-0
   21aac:	svcpl	0x00746573
   21ab0:			; <UNDEFINED> instruction: 0x666e7631
   21ab4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   21ab8:			; <UNDEFINED> instruction: 0x666e7631
   21abc:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   21ac0:	andeq	r2, r3, r8, asr r7
   21ac4:	andeq	r2, r3, r0, lsl #10
   21ac8:	muleq	r3, r8, r3
   21acc:	ldrdeq	r1, [r3], -r4
   21ad0:	andeq	r1, r3, r0, ror #25
   21ad4:	andeq	r1, r3, ip, ror #22
   21ad8:	mov	r3, #0
   21adc:	add	r6, r6, #8
   21ae0:	mov	r1, r9
   21ae4:	mov	r0, r6
   21ae8:	str	r3, [sp, #248]	; 0xf8
   21aec:	bl	14f08 <_start@@Base+0xf4>
   21af0:	and	r3, r1, #-16777216	; 0xff000000
   21af4:	str	r3, [sp, #252]	; 0xfc
   21af8:	ldrd	r2, [sp, #248]	; 0xf8
   21afc:	cmp	r3, #2030043136	; 0x79000000
   21b00:	cmpeq	r2, #0
   21b04:	bne	21d68 <_start@@Base+0xcf54>
   21b08:	sub	r3, r9, r6
   21b0c:	cmp	r3, #1
   21b10:	ble	228a4 <_start@@Base+0xda90>
   21b14:	mov	r3, #1
   21b18:	mov	r2, r9
   21b1c:	mov	r1, r6
   21b20:	mov	r0, fp
   21b24:	bl	1a220 <_start@@Base+0x540c>
   21b28:	cmp	r0, r6
   21b2c:	mov	sl, r0
   21b30:	beq	228a4 <_start@@Base+0xda90>
   21b34:	mov	r2, #1
   21b38:	mvn	r3, #0
   21b3c:	ldr	r0, [fp]
   21b40:	mov	r1, r2
   21b44:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   21b48:	cmp	r0, #0
   21b4c:	bne	1edec <_start@@Base+0x9fd8>
   21b50:	ldr	r4, [sp, #28]
   21b54:	mov	r1, sl
   21b58:	mov	r2, r9
   21b5c:	mov	r0, fp
   21b60:	mov	r3, r4
   21b64:	bl	1a14c <_start@@Base+0x5338>
   21b68:	ldr	r3, [sp, #336]	; 0x150
   21b6c:	mov	sl, r0
   21b70:	cmp	r3, #0
   21b74:	beq	22e84 <_start@@Base+0xe070>
   21b78:	ldr	r8, [pc, #-188]	; 21ac4 <_start@@Base+0xccb0>
   21b7c:	mov	r7, #0
   21b80:	add	r8, pc, r8
   21b84:	add	r8, r8, #316	; 0x13c
   21b88:	str	r8, [sp, #16]
   21b8c:	mov	r8, r4
   21b90:	b	21bc0 <_start@@Base+0xcdac>
   21b94:	ldrb	ip, [sp, #360]	; 0x168
   21b98:	mov	r3, r8
   21b9c:	mov	r1, r4
   21ba0:	mov	r2, r9
   21ba4:	mov	r0, fp
   21ba8:	strb	ip, [r6]
   21bac:	bl	1ad0c <_start@@Base+0x5ef8>
   21bb0:	ldr	r3, [sp, #336]	; 0x150
   21bb4:	mov	sl, r0
   21bb8:	cmp	r3, #0
   21bbc:	beq	22e84 <_start@@Base+0xe070>
   21bc0:	mov	r1, #1
   21bc4:	ldr	r0, [fp]
   21bc8:	add	r5, sp, #360	; 0x168
   21bcc:	strb	r7, [sp, #360]	; 0x168
   21bd0:	bl	26168 <flatcc_builder_extend_vector@@Base>
   21bd4:	subs	r6, r0, #0
   21bd8:	mov	r1, sl
   21bdc:	mov	r3, r5
   21be0:	mov	r2, r9
   21be4:	mov	r0, fp
   21be8:	beq	1edec <_start@@Base+0x9fd8>
   21bec:	bl	17d50 <_start@@Base+0x2f3c>
   21bf0:	cmp	sl, r0
   21bf4:	mov	r4, r0
   21bf8:	bne	21b94 <_start@@Base+0xcd80>
   21bfc:	mov	r1, r0
   21c00:	mov	r2, r9
   21c04:	str	r5, [sp]
   21c08:	mov	r0, fp
   21c0c:	ldr	r3, [sp, #16]
   21c10:	bl	19598 <_start@@Base+0x4784>
   21c14:	cmp	r9, r0
   21c18:	cmpne	r4, r0
   21c1c:	mov	sl, r0
   21c20:	mov	r4, r0
   21c24:	bne	21b94 <_start@@Base+0xcd80>
   21c28:	b	1edec <_start@@Base+0x9fd8>
   21c2c:	mov	r1, r6
   21c30:	mov	r2, r9
   21c34:	mov	r0, fp
   21c38:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21c3c:	mov	sl, r0
   21c40:	b	1f6bc <_start@@Base+0xa8a8>
   21c44:	mov	r1, r4
   21c48:	mov	r2, r9
   21c4c:	mov	r0, fp
   21c50:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21c54:	mov	sl, r0
   21c58:	b	1f6bc <_start@@Base+0xa8a8>
   21c5c:	mov	r1, r4
   21c60:	mov	r2, r9
   21c64:	mov	r0, fp
   21c68:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21c6c:	mov	sl, r0
   21c70:	b	1f6bc <_start@@Base+0xa8a8>
   21c74:	mov	r1, r6
   21c78:	mov	r2, r9
   21c7c:	mov	r0, fp
   21c80:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21c84:	mov	sl, r0
   21c88:	b	1f6bc <_start@@Base+0xa8a8>
   21c8c:	cmp	r3, #0
   21c90:	cmpeq	r2, #128	; 0x80
   21c94:	rsbls	r2, r2, #0
   21c98:	sxtbls	r2, r2
   21c9c:	bls	20f80 <_start@@Base+0xc16c>
   21ca0:	mov	r1, r0
   21ca4:	mov	r3, #8
   21ca8:	mov	r2, r9
   21cac:	mov	r0, fp
   21cb0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   21cb4:	mov	sl, r0
   21cb8:	b	21800 <_start@@Base+0xc9ec>
   21cbc:	mov	r1, r6
   21cc0:	mov	r2, r9
   21cc4:	mov	r0, fp
   21cc8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21ccc:	mov	sl, r0
   21cd0:	b	1f6bc <_start@@Base+0xa8a8>
   21cd4:	ldr	r3, [pc, #-532]	; 21ac8 <_start@@Base+0xccb4>
   21cd8:	mov	r1, r0
   21cdc:	mov	r2, r9
   21ce0:	mov	r0, fp
   21ce4:	str	r5, [sp]
   21ce8:	add	r3, pc, r3
   21cec:	add	r3, r3, #516	; 0x204
   21cf0:	bl	18ee0 <_start@@Base+0x40cc>
   21cf4:	cmp	r9, r0
   21cf8:	cmpne	sl, r0
   21cfc:	mov	sl, r0
   21d00:	bne	1f310 <_start@@Base+0xa4fc>
   21d04:	b	1edec <_start@@Base+0x9fd8>
   21d08:	mov	r1, r6
   21d0c:	mov	r2, r9
   21d10:	mov	r0, fp
   21d14:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d18:	mov	sl, r0
   21d1c:	b	1f6bc <_start@@Base+0xa8a8>
   21d20:	mov	r1, r4
   21d24:	mov	r2, r9
   21d28:	mov	r0, fp
   21d2c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d30:	mov	sl, r0
   21d34:	b	1f6bc <_start@@Base+0xa8a8>
   21d38:	mov	r1, r6
   21d3c:	mov	r2, r9
   21d40:	mov	r0, fp
   21d44:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d48:	mov	sl, r0
   21d4c:	b	1f6bc <_start@@Base+0xa8a8>
   21d50:	mov	r1, r6
   21d54:	mov	r2, r9
   21d58:	mov	r0, fp
   21d5c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d60:	mov	sl, r0
   21d64:	b	1f6bc <_start@@Base+0xa8a8>
   21d68:	mov	r1, r6
   21d6c:	mov	r2, r9
   21d70:	mov	r0, fp
   21d74:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d78:	mov	sl, r0
   21d7c:	b	1f6bc <_start@@Base+0xa8a8>
   21d80:	mov	r1, r6
   21d84:	mov	r2, r9
   21d88:	mov	r0, fp
   21d8c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21d90:	mov	sl, r0
   21d94:	b	1f6bc <_start@@Base+0xa8a8>
   21d98:	sub	r3, r9, r6
   21d9c:	cmp	r3, #2
   21da0:	ble	22930 <_start@@Base+0xdb1c>
   21da4:	mov	r3, #2
   21da8:	mov	r2, r9
   21dac:	mov	r1, r6
   21db0:	mov	r0, fp
   21db4:	bl	1a220 <_start@@Base+0x540c>
   21db8:	cmp	r6, r0
   21dbc:	mov	sl, r0
   21dc0:	beq	22930 <_start@@Base+0xdb1c>
   21dc4:	ldr	r0, [fp]
   21dc8:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   21dcc:	cmp	r0, #0
   21dd0:	bne	1edec <_start@@Base+0x9fd8>
   21dd4:	ldr	r5, [sp, #28]
   21dd8:	mov	r1, sl
   21ddc:	mov	r2, r9
   21de0:	mov	r0, fp
   21de4:	mov	r3, r5
   21de8:	bl	1a14c <_start@@Base+0x5338>
   21dec:	ldr	r3, [sp, #336]	; 0x150
   21df0:	mov	sl, r0
   21df4:	cmp	r3, #0
   21df8:	beq	21e64 <_start@@Base+0xd050>
   21dfc:	add	r4, sp, #340	; 0x154
   21e00:	mov	r1, sl
   21e04:	mov	r3, r4
   21e08:	mov	r2, r9
   21e0c:	mov	r0, fp
   21e10:	bl	2eacc <flatcc_json_parser_build_string@@Base>
   21e14:	ldr	r3, [sp, #340]	; 0x154
   21e18:	mov	sl, r0
   21e1c:	mov	r1, #1
   21e20:	cmp	r3, #0
   21e24:	beq	1edec <_start@@Base+0x9fd8>
   21e28:	ldr	r0, [fp]
   21e2c:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   21e30:	subs	ip, r0, #0
   21e34:	mov	r3, r5
   21e38:	mov	r2, r9
   21e3c:	mov	r1, sl
   21e40:	mov	r0, fp
   21e44:	beq	1edec <_start@@Base+0x9fd8>
   21e48:	ldr	lr, [sp, #340]	; 0x154
   21e4c:	str	lr, [ip]
   21e50:	bl	1ad0c <_start@@Base+0x5ef8>
   21e54:	ldr	r3, [sp, #336]	; 0x150
   21e58:	mov	sl, r0
   21e5c:	cmp	r3, #0
   21e60:	bne	21e00 <_start@@Base+0xcfec>
   21e64:	ldr	r0, [fp]
   21e68:	bl	27bc8 <flatcc_builder_end_offset_vector@@Base>
   21e6c:	cmp	r0, #0
   21e70:	str	r0, [sp, #340]	; 0x154
   21e74:	beq	1edec <_start@@Base+0x9fd8>
   21e78:	mov	r1, #28
   21e7c:	ldr	r0, [fp]
   21e80:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   21e84:	cmp	r0, #0
   21e88:	beq	1edec <_start@@Base+0x9fd8>
   21e8c:	ldr	r3, [sp, #340]	; 0x154
   21e90:	str	r3, [r0]
   21e94:	b	1f6bc <_start@@Base+0xa8a8>
   21e98:	mov	r1, r6
   21e9c:	mov	r2, r9
   21ea0:	mov	r0, fp
   21ea4:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21ea8:	mov	sl, r0
   21eac:	b	1f6bc <_start@@Base+0xa8a8>
   21eb0:	mov	r1, r6
   21eb4:	mov	r2, r9
   21eb8:	mov	r0, fp
   21ebc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21ec0:	mov	sl, r0
   21ec4:	b	1f6bc <_start@@Base+0xa8a8>
   21ec8:	mov	r1, r6
   21ecc:	mov	r2, r9
   21ed0:	mov	r0, fp
   21ed4:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21ed8:	mov	sl, r0
   21edc:	b	1f6bc <_start@@Base+0xa8a8>
   21ee0:	ldrb	r3, [r8, #7]
   21ee4:	cmp	r3, #32
   21ee8:	addhi	r1, r8, #7
   21eec:	bls	20eb8 <_start@@Base+0xc0a4>
   21ef0:	b	20ec8 <_start@@Base+0xc0b4>
   21ef4:	ldrb	r3, [r8, #7]
   21ef8:	cmp	r3, #32
   21efc:	addhi	r1, r8, #7
   21f00:	bls	20a90 <_start@@Base+0xbc7c>
   21f04:	b	20aa0 <_start@@Base+0xbc8c>
   21f08:	add	r6, r6, #8
   21f0c:	mov	r1, r9
   21f10:	mov	r0, r6
   21f14:	mov	r7, #0
   21f18:	bl	14f08 <_start@@Base+0xf4>
   21f1c:	and	r3, r1, #-16777216	; 0xff000000
   21f20:	str	r7, [sp, #288]	; 0x120
   21f24:	str	r3, [sp, #292]	; 0x124
   21f28:	add	r3, sp, #288	; 0x120
   21f2c:	ldrd	r2, [r3]
   21f30:	cmp	r3, #1627389952	; 0x61000000
   21f34:	cmpeq	r2, #0
   21f38:	bne	22a88 <_start@@Base+0xdc74>
   21f3c:	sub	r3, r9, r6
   21f40:	cmp	r3, #1
   21f44:	ble	22f9c <_start@@Base+0xe188>
   21f48:	mov	r3, #1
   21f4c:	mov	r2, r9
   21f50:	mov	r1, r6
   21f54:	mov	r0, fp
   21f58:	bl	1a220 <_start@@Base+0x540c>
   21f5c:	cmp	r6, r0
   21f60:	mov	r4, r0
   21f64:	beq	22f9c <_start@@Base+0xe188>
   21f68:	add	r5, sp, #360	; 0x168
   21f6c:	mov	r1, r0
   21f70:	str	r7, [sp, #360]	; 0x168
   21f74:	mov	r2, r9
   21f78:	mov	r3, r5
   21f7c:	mov	r0, fp
   21f80:	bl	17e18 <_start@@Base+0x3004>
   21f84:	cmp	r0, r4
   21f88:	mov	sl, r0
   21f8c:	beq	23108 <_start@@Base+0xe2f4>
   21f90:	ldr	r3, [sp, #360]	; 0x168
   21f94:	cmp	r3, #0
   21f98:	bne	21fa8 <_start@@Base+0xd194>
   21f9c:	ldr	r3, [fp, #8]
   21fa0:	tst	r3, #2
   21fa4:	beq	1f6bc <_start@@Base+0xa8a8>
   21fa8:	mov	r3, #4
   21fac:	mov	r1, #20
   21fb0:	ldr	r0, [fp]
   21fb4:	mov	r2, r3
   21fb8:	bl	28894 <flatcc_builder_table_add@@Base>
   21fbc:	cmp	r0, #0
   21fc0:	beq	23230 <_start@@Base+0xe41c>
   21fc4:	ldr	r3, [sp, #360]	; 0x168
   21fc8:	str	r3, [r0]
   21fcc:	b	1f6bc <_start@@Base+0xa8a8>
   21fd0:	mov	r1, r6
   21fd4:	mov	r2, r9
   21fd8:	mov	r0, fp
   21fdc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   21fe0:	mov	sl, r0
   21fe4:	b	1f6bc <_start@@Base+0xa8a8>
   21fe8:	sub	r3, r9, r6
   21fec:	cmp	r3, #8
   21ff0:	ble	22c44 <_start@@Base+0xde30>
   21ff4:	mov	r3, #8
   21ff8:	mov	r2, r9
   21ffc:	mov	r1, r6
   22000:	mov	r0, fp
   22004:	bl	1a220 <_start@@Base+0x540c>
   22008:	cmp	r6, r0
   2200c:	mov	r4, r0
   22010:	beq	22c44 <_start@@Base+0xde30>
   22014:	mov	ip, #0
   22018:	add	r6, sp, #360	; 0x168
   2201c:	mov	r1, r0
   22020:	mov	r3, r6
   22024:	mov	r2, r9
   22028:	mov	r0, fp
   2202c:	str	ip, [sp, #360]	; 0x168
   22030:	bl	17c80 <_start@@Base+0x2e6c>
   22034:	cmp	r0, r4
   22038:	mov	sl, r0
   2203c:	beq	230a0 <_start@@Base+0xe28c>
   22040:	ldr	r3, [sp, #360]	; 0x168
   22044:	cmp	r3, #0
   22048:	bne	22058 <_start@@Base+0xd244>
   2204c:	ldr	r3, [fp, #8]
   22050:	tst	r3, #2
   22054:	beq	1f6bc <_start@@Base+0xa8a8>
   22058:	mov	r3, #4
   2205c:	mov	r1, #17
   22060:	ldr	r0, [fp]
   22064:	mov	r2, r3
   22068:	bl	28894 <flatcc_builder_table_add@@Base>
   2206c:	cmp	r0, #0
   22070:	beq	23230 <_start@@Base+0xe41c>
   22074:	ldr	r3, [sp, #360]	; 0x168
   22078:	str	r3, [r0]
   2207c:	b	1f6bc <_start@@Base+0xa8a8>
   22080:	mov	r1, r6
   22084:	mov	r2, r9
   22088:	mov	r0, fp
   2208c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22090:	mov	sl, r0
   22094:	b	1f6bc <_start@@Base+0xa8a8>
   22098:	ldr	r3, [pc, #-1492]	; 21acc <_start@@Base+0xccb8>
   2209c:	mov	r1, r0
   220a0:	mov	r2, r9
   220a4:	mov	r0, fp
   220a8:	str	r6, [sp]
   220ac:	add	r3, pc, r3
   220b0:	add	r3, r3, #304	; 0x130
   220b4:	bl	1995c <_start@@Base+0x4b48>
   220b8:	cmp	r9, r0
   220bc:	cmpne	sl, r0
   220c0:	mov	sl, r0
   220c4:	bne	1fe2c <_start@@Base+0xb018>
   220c8:	b	1edec <_start@@Base+0x9fd8>
   220cc:	mov	r1, r4
   220d0:	mov	r2, r9
   220d4:	mov	r0, fp
   220d8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   220dc:	mov	r4, r0
   220e0:	b	206d8 <_start@@Base+0xb8c4>
   220e4:	mov	r1, r4
   220e8:	mov	r3, #5
   220ec:	mov	r2, r9
   220f0:	mov	r0, fp
   220f4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   220f8:	mov	r4, r0
   220fc:	b	20714 <_start@@Base+0xb900>
   22100:	mov	r1, sl
   22104:	mov	r2, r9
   22108:	mov	r0, fp
   2210c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22110:	mov	sl, r0
   22114:	b	214e0 <_start@@Base+0xc6cc>
   22118:	mov	r1, sl
   2211c:	mov	r2, r9
   22120:	mov	r0, fp
   22124:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22128:	mov	sl, r0
   2212c:	b	1fb20 <_start@@Base+0xad0c>
   22130:	mov	r1, sl
   22134:	mov	r3, #5
   22138:	mov	r2, r9
   2213c:	mov	r0, fp
   22140:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22144:	mov	sl, r0
   22148:	b	2151c <_start@@Base+0xc708>
   2214c:	mov	r1, sl
   22150:	mov	r3, #5
   22154:	mov	r2, r9
   22158:	mov	r0, fp
   2215c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22160:	mov	sl, r0
   22164:	b	1fb5c <_start@@Base+0xad48>
   22168:	ldr	r1, [sp, #80]	; 0x50
   2216c:	mov	r2, r9
   22170:	mov	r0, fp
   22174:	ldr	r3, [sp, #240]	; 0xf0
   22178:	str	r1, [sp]
   2217c:	mov	r1, r4
   22180:	add	r3, r3, #432	; 0x1b0
   22184:	bl	19778 <_start@@Base+0x4964>
   22188:	cmp	r9, r0
   2218c:	cmpne	r4, r0
   22190:	beq	221cc <_start@@Base+0xd3b8>
   22194:	mov	r4, r0
   22198:	b	20798 <_start@@Base+0xb984>
   2219c:	ldr	r1, [sp, #80]	; 0x50
   221a0:	mov	r2, r9
   221a4:	mov	r0, fp
   221a8:	ldr	r3, [sp, #244]	; 0xf4
   221ac:	str	r1, [sp]
   221b0:	mov	r1, r4
   221b4:	bl	19778 <_start@@Base+0x4964>
   221b8:	cmp	r9, r0
   221bc:	cmpne	r4, r0
   221c0:	beq	221cc <_start@@Base+0xd3b8>
   221c4:	mov	r4, r0
   221c8:	b	206cc <_start@@Base+0xb8b8>
   221cc:	mov	r1, r0
   221d0:	mov	r3, #33	; 0x21
   221d4:	mov	r2, r9
   221d8:	mov	r0, fp
   221dc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   221e0:	mov	r4, r0
   221e4:	mov	r1, r4
   221e8:	mov	r2, r9
   221ec:	ldr	r3, [sp, #28]
   221f0:	mov	r0, fp
   221f4:	bl	1ad0c <_start@@Base+0x5ef8>
   221f8:	ldr	r3, [sp, #336]	; 0x150
   221fc:	mov	sl, r0
   22200:	cmp	r3, #0
   22204:	bne	205c8 <_start@@Base+0xb7b4>
   22208:	strd	r6, [sp, #64]	; 0x40
   2220c:	ldr	r0, [fp]
   22210:	bl	27a9c <flatcc_builder_end_vector@@Base>
   22214:	cmp	r0, #0
   22218:	str	r0, [sp, #340]	; 0x154
   2221c:	beq	1edec <_start@@Base+0x9fd8>
   22220:	mov	r1, #29
   22224:	ldr	r0, [fp]
   22228:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   2222c:	cmp	r0, #0
   22230:	beq	1edec <_start@@Base+0x9fd8>
   22234:	ldr	r3, [sp, #340]	; 0x154
   22238:	str	r3, [r0]
   2223c:	b	1f6bc <_start@@Base+0xa8a8>
   22240:	sub	r3, r9, sl
   22244:	cmp	r3, #7
   22248:	ble	22100 <_start@@Base+0xd2ec>
   2224c:	mov	r1, sl
   22250:	mov	r3, #7
   22254:	mov	r2, r9
   22258:	mov	r0, fp
   2225c:	bl	1a220 <_start@@Base+0x540c>
   22260:	cmp	sl, r0
   22264:	mov	r1, r0
   22268:	beq	22100 <_start@@Base+0xd2ec>
   2226c:	mov	r8, #1
   22270:	add	r3, sp, #360	; 0x168
   22274:	mov	r2, r9
   22278:	mov	r0, fp
   2227c:	str	r8, [sp]
   22280:	bl	2e6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   22284:	ldr	r3, [sp, #360]	; 0x168
   22288:	mov	sl, r0
   2228c:	cmp	r3, #0
   22290:	bne	214c4 <_start@@Base+0xc6b0>
   22294:	b	215e0 <_start@@Base+0xc7cc>
   22298:	sub	r3, r9, sl
   2229c:	cmp	r3, #3
   222a0:	ble	22118 <_start@@Base+0xd304>
   222a4:	mov	r3, #3
   222a8:	mov	r2, r9
   222ac:	mov	r1, sl
   222b0:	mov	r0, fp
   222b4:	bl	1a220 <_start@@Base+0x540c>
   222b8:	cmp	sl, r0
   222bc:	mov	r5, r0
   222c0:	beq	22118 <_start@@Base+0xd304>
   222c4:	add	r8, sp, #360	; 0x168
   222c8:	mov	r6, #0
   222cc:	mov	r7, #0
   222d0:	mov	r1, r0
   222d4:	mov	r3, r8
   222d8:	mov	r2, r9
   222dc:	mov	r0, fp
   222e0:	strd	r6, [r8]
   222e4:	bl	179a8 <_start@@Base+0x2b94>
   222e8:	cmp	r5, r0
   222ec:	mov	sl, r0
   222f0:	beq	22984 <_start@@Base+0xdb70>
   222f4:	add	r3, sp, #360	; 0x168
   222f8:	ldrd	r2, [r3]
   222fc:	orrs	r3, r2, r3
   22300:	bne	22310 <_start@@Base+0xd4fc>
   22304:	ldr	r3, [fp, #8]
   22308:	tst	r3, #2
   2230c:	beq	1fb20 <_start@@Base+0xad0c>
   22310:	mov	r3, #8
   22314:	mov	r1, #1
   22318:	ldr	r0, [fp]
   2231c:	mov	r2, r3
   22320:	bl	28894 <flatcc_builder_table_add@@Base>
   22324:	cmp	r0, #0
   22328:	beq	225b4 <_start@@Base+0xd7a0>
   2232c:	add	r3, sp, #360	; 0x168
   22330:	ldrd	r2, [r3]
   22334:	strd	r2, [r0]
   22338:	b	1fb20 <_start@@Base+0xad0c>
   2233c:	ldrb	r2, [sl, #1]
   22340:	add	r1, sl, #1
   22344:	cmp	r2, #114	; 0x72
   22348:	bne	1f858 <_start@@Base+0xaa44>
   2234c:	ldrb	r2, [r1, #1]!
   22350:	cmp	r2, #117	; 0x75
   22354:	bne	1f858 <_start@@Base+0xaa44>
   22358:	ldrb	r2, [r1, #1]
   2235c:	cmp	r2, #101	; 0x65
   22360:	moveq	r3, #1
   22364:	addeq	r4, sl, #4
   22368:	strbeq	r3, [sp, #356]	; 0x164
   2236c:	bne	1f858 <_start@@Base+0xaa44>
   22370:	b	1f8a8 <_start@@Base+0xaa94>
   22374:	mov	r1, r6
   22378:	mov	r2, r9
   2237c:	mov	r0, fp
   22380:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22384:	mov	sl, r0
   22388:	b	1f6bc <_start@@Base+0xa8a8>
   2238c:	ldr	r3, [pc, #-2244]	; 21ad0 <_start@@Base+0xccbc>
   22390:	mov	r1, r0
   22394:	mov	r2, r9
   22398:	mov	r0, fp
   2239c:	str	r7, [sp]
   223a0:	add	r3, pc, r3
   223a4:	add	r3, r3, #368	; 0x170
   223a8:	bl	18ee0 <_start@@Base+0x40cc>
   223ac:	cmp	r9, r0
   223b0:	cmpne	sl, r0
   223b4:	beq	22f4c <_start@@Base+0xe138>
   223b8:	mov	sl, r0
   223bc:	b	21068 <_start@@Base+0xc254>
   223c0:	mov	r1, r6
   223c4:	mov	r2, r9
   223c8:	mov	r0, fp
   223cc:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   223d0:	mov	sl, r0
   223d4:	b	1f6bc <_start@@Base+0xa8a8>
   223d8:	mov	sl, r9
   223dc:	b	1ef9c <_start@@Base+0xa188>
   223e0:	mov	r1, r6
   223e4:	mov	r2, r9
   223e8:	mov	r0, fp
   223ec:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   223f0:	mov	sl, r0
   223f4:	b	1f6bc <_start@@Base+0xa8a8>
   223f8:	mov	r1, r6
   223fc:	mov	r2, r9
   22400:	mov	r0, fp
   22404:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22408:	mov	sl, r0
   2240c:	b	1f6bc <_start@@Base+0xa8a8>
   22410:	ldr	r1, [sp, #356]	; 0x164
   22414:	add	r3, sp, #360	; 0x168
   22418:	ldrd	r2, [r3]
   2241c:	cmp	r1, #0
   22420:	beq	22724 <_start@@Base+0xd910>
   22424:	cmp	r3, #0
   22428:	cmpeq	r2, #128	; 0x80
   2242c:	rsbls	r2, r2, #0
   22430:	sxtbls	r2, r2
   22434:	strbls	r2, [sp, #352]	; 0x160
   22438:	bls	1efd8 <_start@@Base+0xa1c4>
   2243c:	mov	r1, r0
   22440:	mov	r3, #8
   22444:	mov	r2, r9
   22448:	mov	r0, fp
   2244c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22450:	mov	sl, r0
   22454:	cmp	r4, sl
   22458:	beq	1ef9c <_start@@Base+0xa188>
   2245c:	add	r3, sp, #352	; 0x160
   22460:	ldrsb	r2, [r3]
   22464:	b	1efd8 <_start@@Base+0xa1c4>
   22468:	mov	r3, #0
   2246c:	add	r6, r6, #16
   22470:	mov	r1, r9
   22474:	mov	r0, r6
   22478:	str	r3, [sp, #280]	; 0x118
   2247c:	bl	14f08 <_start@@Base+0xf4>
   22480:	and	r3, r1, #-16777216	; 0xff000000
   22484:	str	r3, [sp, #284]	; 0x11c
   22488:	add	r3, sp, #280	; 0x118
   2248c:	ldrd	r2, [r3]
   22490:	cmp	r3, #1929379840	; 0x73000000
   22494:	cmpeq	r2, #0
   22498:	bne	227a0 <_start@@Base+0xd98c>
   2249c:	sub	r3, r9, r6
   224a0:	cmp	r3, #1
   224a4:	ble	22bc8 <_start@@Base+0xddb4>
   224a8:	mov	r3, #1
   224ac:	mov	r2, r9
   224b0:	mov	r1, r6
   224b4:	mov	r0, fp
   224b8:	bl	1a220 <_start@@Base+0x540c>
   224bc:	cmp	r6, r0
   224c0:	mov	sl, r0
   224c4:	beq	22bc4 <_start@@Base+0xddb0>
   224c8:	mov	r2, #8
   224cc:	mvn	r3, #-536870912	; 0xe0000000
   224d0:	ldr	r0, [fp]
   224d4:	mov	r1, r2
   224d8:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   224dc:	cmp	r0, #0
   224e0:	bne	1edec <_start@@Base+0x9fd8>
   224e4:	ldr	r7, [sp, #28]
   224e8:	mov	r1, sl
   224ec:	mov	r2, r9
   224f0:	mov	r0, fp
   224f4:	mov	r3, r7
   224f8:	bl	1a14c <_start@@Base+0x5338>
   224fc:	ldr	r3, [sp, #336]	; 0x150
   22500:	mov	sl, r0
   22504:	cmp	r3, #0
   22508:	beq	22fb4 <_start@@Base+0xe1a0>
   2250c:	ldr	r6, [pc, #-2624]	; 21ad4 <_start@@Base+0xccc0>
   22510:	vldr	d8, [pc, #984]	; 228f0 <_start@@Base+0xdadc>
   22514:	add	r6, pc, r6
   22518:	add	r6, r6, #636	; 0x27c
   2251c:	b	2254c <_start@@Base+0xd738>
   22520:	vldr	d7, [sp, #360]	; 0x168
   22524:	mov	r1, r0
   22528:	mov	r3, r7
   2252c:	mov	r2, r9
   22530:	mov	r0, fp
   22534:	vstr	d7, [r5]
   22538:	bl	1ad0c <_start@@Base+0x5ef8>
   2253c:	ldr	r3, [sp, #336]	; 0x150
   22540:	mov	sl, r0
   22544:	cmp	r3, #0
   22548:	beq	22fb4 <_start@@Base+0xe1a0>
   2254c:	mov	r1, #1
   22550:	ldr	r0, [fp]
   22554:	add	r4, sp, #360	; 0x168
   22558:	vstr	d8, [sp, #360]	; 0x168
   2255c:	bl	26168 <flatcc_builder_extend_vector@@Base>
   22560:	subs	r5, r0, #0
   22564:	mov	r1, sl
   22568:	mov	r3, r4
   2256c:	mov	r2, r9
   22570:	mov	r0, fp
   22574:	beq	1edec <_start@@Base+0x9fd8>
   22578:	bl	2d318 <flatcc_json_parser_double@@Base>
   2257c:	cmp	r0, sl
   22580:	bne	22520 <_start@@Base+0xd70c>
   22584:	mov	r3, r6
   22588:	mov	r2, r9
   2258c:	str	r4, [sp]
   22590:	mov	r1, sl
   22594:	mov	r0, fp
   22598:	bl	19064 <_start@@Base+0x4250>
   2259c:	cmp	r9, r0
   225a0:	cmpne	r0, sl
   225a4:	bne	22520 <_start@@Base+0xd70c>
   225a8:	b	203d8 <_start@@Base+0xb5c4>
   225ac:	mov	r8, r9
   225b0:	b	1fa9c <_start@@Base+0xac88>
   225b4:	mov	r0, sl
   225b8:	mov	sl, r0
   225bc:	mov	r1, sl
   225c0:	mov	r3, #33	; 0x21
   225c4:	mov	r2, r9
   225c8:	mov	r0, fp
   225cc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   225d0:	ldr	r3, [sp, #340]	; 0x154
   225d4:	mov	sl, r0
   225d8:	cmp	r3, #0
   225dc:	beq	1edec <_start@@Base+0x9fd8>
   225e0:	mov	r1, #14
   225e4:	ldr	r0, [fp]
   225e8:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   225ec:	cmp	r0, #0
   225f0:	beq	1edec <_start@@Base+0x9fd8>
   225f4:	ldr	r3, [sp, #340]	; 0x154
   225f8:	str	r3, [r0]
   225fc:	b	1f6bc <_start@@Base+0xa8a8>
   22600:	ldr	r0, [fp]
   22604:	bl	27a9c <flatcc_builder_end_vector@@Base>
   22608:	cmp	r0, #0
   2260c:	str	r0, [sp, #340]	; 0x154
   22610:	beq	1edec <_start@@Base+0x9fd8>
   22614:	mov	r1, #30
   22618:	ldr	r0, [fp]
   2261c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   22620:	cmp	r0, #0
   22624:	beq	1edec <_start@@Base+0x9fd8>
   22628:	ldr	r3, [sp, #340]	; 0x154
   2262c:	str	r3, [r0]
   22630:	b	1f6bc <_start@@Base+0xa8a8>
   22634:	mov	r1, r6
   22638:	mov	r2, r9
   2263c:	mov	r0, fp
   22640:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22644:	mov	sl, r0
   22648:	b	1f6bc <_start@@Base+0xa8a8>
   2264c:	ldr	r3, [sp, #356]	; 0x164
   22650:	cmp	r3, #0
   22654:	bne	22eb8 <_start@@Base+0xe0a4>
   22658:	add	r3, sp, #360	; 0x168
   2265c:	mov	r1, #0
   22660:	ldrd	r2, [r3]
   22664:	movw	r0, #65535	; 0xffff
   22668:	cmp	r3, r1
   2266c:	cmpeq	r2, r0
   22670:	bhi	22f14 <_start@@Base+0xe100>
   22674:	add	r3, sp, #332	; 0x14c
   22678:	uxth	r2, r2
   2267c:	add	r3, r3, #2
   22680:	mov	sl, r8
   22684:	strh	r2, [r3]
   22688:	b	1fae0 <_start@@Base+0xaccc>
   2268c:	mov	r1, r6
   22690:	mov	r2, r9
   22694:	mov	r0, fp
   22698:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   2269c:	mov	sl, r0
   226a0:	b	1f6bc <_start@@Base+0xa8a8>
   226a4:	mov	r1, r6
   226a8:	mov	r2, r9
   226ac:	mov	r0, fp
   226b0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   226b4:	mov	sl, r0
   226b8:	b	1f6bc <_start@@Base+0xa8a8>
   226bc:	mov	r1, r6
   226c0:	mov	r2, r9
   226c4:	mov	r0, fp
   226c8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   226cc:	mov	sl, r0
   226d0:	b	1f6bc <_start@@Base+0xa8a8>
   226d4:	ldr	r0, [fp]
   226d8:	bl	27a9c <flatcc_builder_end_vector@@Base>
   226dc:	cmp	r0, #0
   226e0:	str	r0, [sp, #340]	; 0x154
   226e4:	beq	1edec <_start@@Base+0x9fd8>
   226e8:	mov	r1, #24
   226ec:	ldr	r0, [fp]
   226f0:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   226f4:	cmp	r0, #0
   226f8:	beq	1edec <_start@@Base+0x9fd8>
   226fc:	ldr	r3, [sp, #340]	; 0x154
   22700:	str	r3, [r0]
   22704:	b	1f6bc <_start@@Base+0xa8a8>
   22708:	mov	r4, r0
   2270c:	mov	r1, r4
   22710:	mov	r2, r9
   22714:	mov	r0, fp
   22718:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   2271c:	mov	sl, r0
   22720:	b	1f6bc <_start@@Base+0xa8a8>
   22724:	cmp	r3, #0
   22728:	cmpeq	r2, #127	; 0x7f
   2272c:	sxtbls	r2, r2
   22730:	strbls	r2, [sp, #352]	; 0x160
   22734:	bls	1efd8 <_start@@Base+0xa1c4>
   22738:	mov	r1, r0
   2273c:	mov	r3, #7
   22740:	mov	r2, r9
   22744:	mov	r0, fp
   22748:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2274c:	mov	sl, r0
   22750:	b	22454 <_start@@Base+0xd640>
   22754:	mov	r1, r6
   22758:	mov	r2, r9
   2275c:	mov	r0, fp
   22760:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22764:	mov	sl, r0
   22768:	b	1f6bc <_start@@Base+0xa8a8>
   2276c:	ldr	r3, [pc, #388]	; 228f8 <_start@@Base+0xdae4>
   22770:	mov	r1, r0
   22774:	mov	r2, r9
   22778:	mov	r0, fp
   2277c:	str	r7, [sp]
   22780:	add	r3, pc, r3
   22784:	add	r3, r3, #380	; 0x17c
   22788:	bl	18ee0 <_start@@Base+0x40cc>
   2278c:	cmp	r9, r0
   22790:	cmpne	sl, r0
   22794:	beq	22f4c <_start@@Base+0xe138>
   22798:	mov	sl, r0
   2279c:	b	21330 <_start@@Base+0xc51c>
   227a0:	mov	r1, r6
   227a4:	mov	r2, r9
   227a8:	mov	r0, fp
   227ac:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   227b0:	mov	sl, r0
   227b4:	b	1f6bc <_start@@Base+0xa8a8>
   227b8:	ldr	r3, [pc, #316]	; 228fc <_start@@Base+0xdae8>
   227bc:	mov	r1, r0
   227c0:	mov	r2, r9
   227c4:	mov	r0, fp
   227c8:	str	r7, [sp]
   227cc:	add	r3, pc, r3
   227d0:	add	r3, r3, #392	; 0x188
   227d4:	bl	18ee0 <_start@@Base+0x40cc>
   227d8:	cmp	r9, r0
   227dc:	cmpne	sl, r0
   227e0:	beq	22f4c <_start@@Base+0xe138>
   227e4:	mov	sl, r0
   227e8:	b	211a0 <_start@@Base+0xc38c>
   227ec:	ldr	r3, [pc, #268]	; 22900 <_start@@Base+0xdaec>
   227f0:	mov	r1, r0
   227f4:	mov	r2, r9
   227f8:	mov	r0, fp
   227fc:	str	r5, [sp]
   22800:	add	r3, pc, r3
   22804:	add	r3, r3, #504	; 0x1f8
   22808:	bl	18ee0 <_start@@Base+0x40cc>
   2280c:	cmp	r9, r0
   22810:	cmpne	sl, r0
   22814:	mov	sl, r0
   22818:	bne	20210 <_start@@Base+0xb3fc>
   2281c:	b	1edec <_start@@Base+0x9fd8>
   22820:	mov	r3, #29
   22824:	mov	r2, r9
   22828:	mov	r0, fp
   2282c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22830:	b	203d8 <_start@@Base+0xb5c4>
   22834:	ldrb	r1, [r0, #1]
   22838:	add	r2, r0, #1
   2283c:	cmp	r1, #114	; 0x72
   22840:	bne	1f0d4 <_start@@Base+0xa2c0>
   22844:	ldrb	r1, [r2, #1]!
   22848:	cmp	r1, #117	; 0x75
   2284c:	bne	1f0d4 <_start@@Base+0xa2c0>
   22850:	ldrb	r2, [r2, #1]
   22854:	cmp	r2, #101	; 0x65
   22858:	moveq	r3, #1
   2285c:	addeq	sl, r0, #4
   22860:	strbeq	r3, [sp, #352]	; 0x160
   22864:	bne	1f0d4 <_start@@Base+0xa2c0>
   22868:	b	20e40 <_start@@Base+0xc02c>
   2286c:	ldr	r7, [sp, #356]	; 0x164
   22870:	cmp	r7, #0
   22874:	bne	22fe8 <_start@@Base+0xe1d4>
   22878:	add	r3, sp, #360	; 0x168
   2287c:	ldrd	r2, [r3]
   22880:	cmp	r3, #0
   22884:	cmpeq	r2, #255	; 0xff
   22888:	bhi	23014 <_start@@Base+0xe200>
   2288c:	uxtb	r3, r2
   22890:	mov	sl, r0
   22894:	adds	r3, r3, #0
   22898:	movne	r3, #1
   2289c:	strb	r3, [sp, #352]	; 0x160
   228a0:	b	20e38 <_start@@Base+0xc024>
   228a4:	mov	r1, r6
   228a8:	mov	r2, r9
   228ac:	mov	r0, fp
   228b0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   228b4:	mov	sl, r0
   228b8:	b	1f6bc <_start@@Base+0xa8a8>
   228bc:	strd	r4, [sp, #128]	; 0x80
   228c0:	b	1f6bc <_start@@Base+0xa8a8>
   228c4:	add	r3, sp, #296	; 0x128
   228c8:	strd	r4, [r3]
   228cc:	ldr	r3, [fp, #20]
   228d0:	cmp	r3, #0
   228d4:	bne	215e8 <_start@@Base+0xc7d4>
   228d8:	ldr	r0, [fp]
   228dc:	bl	27744 <flatcc_builder_end_table@@Base>
   228e0:	cmp	r0, #0
   228e4:	str	r0, [sp, #340]	; 0x154
   228e8:	bne	2160c <_start@@Base+0xc7f8>
   228ec:	b	215e8 <_start@@Base+0xc7d4>
	...
   228f8:	andeq	r1, r3, r0, lsl #18
   228fc:			; <UNDEFINED> instruction: 0x000318b4
   22900:	andeq	r1, r3, r0, lsl #17
   22904:	andeq	r1, r3, ip, asr r4
   22908:	andeq	r1, r3, r4, lsr r2
   2290c:	andeq	r1, r3, ip, lsl #3
   22910:	andeq	r1, r3, r0, lsr r0
   22914:	andeq	r0, r3, ip, asr #31
   22918:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   2291c:	andeq	r0, r3, r4, ror #30
   22920:	andeq	r0, r3, r8, ror #29
   22924:	andeq	r0, r3, r4, lsr lr
   22928:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   2292c:			; <UNDEFINED> instruction: 0x00030dbc
   22930:	mov	r1, r6
   22934:	mov	r2, r9
   22938:	mov	r0, fp
   2293c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22940:	mov	sl, r0
   22944:	b	1f6bc <_start@@Base+0xa8a8>
   22948:	mov	r1, r6
   2294c:	mov	r2, r9
   22950:	mov	r0, fp
   22954:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22958:	mov	sl, r0
   2295c:	b	1f6bc <_start@@Base+0xa8a8>
   22960:	ldr	r3, [fp, #20]
   22964:	cmp	r3, #0
   22968:	bne	225bc <_start@@Base+0xd7a8>
   2296c:	ldr	r0, [fp]
   22970:	bl	27744 <flatcc_builder_end_table@@Base>
   22974:	cmp	r0, #0
   22978:	str	r0, [sp, #340]	; 0x154
   2297c:	bne	225e0 <_start@@Base+0xd7cc>
   22980:	b	225bc <_start@@Base+0xd7a8>
   22984:	mov	r1, r0
   22988:	mov	r2, r9
   2298c:	str	r8, [sp]
   22990:	mov	r0, fp
   22994:	ldr	r3, [sp, #16]
   22998:	bl	18c00 <_start@@Base+0x3dec>
   2299c:	cmp	r9, r0
   229a0:	cmpne	sl, r0
   229a4:	beq	225b8 <_start@@Base+0xd7a4>
   229a8:	mov	sl, r0
   229ac:	b	222f4 <_start@@Base+0xd4e0>
   229b0:	mov	r3, #0
   229b4:	add	r6, r6, #8
   229b8:	mov	r1, r9
   229bc:	mov	r0, r6
   229c0:	str	r3, [sp, #304]	; 0x130
   229c4:	bl	14f08 <_start@@Base+0xf4>
   229c8:	and	r3, r1, #-16777216	; 0xff000000
   229cc:	str	r3, [sp, #308]	; 0x134
   229d0:	add	r3, sp, #304	; 0x130
   229d4:	ldrd	r2, [r3]
   229d8:	cmp	r3, #1627389952	; 0x61000000
   229dc:	cmpeq	r2, #0
   229e0:	bne	22e6c <_start@@Base+0xe058>
   229e4:	sub	r3, r9, r6
   229e8:	cmp	r3, #1
   229ec:	ble	23070 <_start@@Base+0xe25c>
   229f0:	mov	r3, #1
   229f4:	mov	r2, r9
   229f8:	mov	r1, r6
   229fc:	mov	r0, fp
   22a00:	bl	1a220 <_start@@Base+0x540c>
   22a04:	cmp	r6, r0
   22a08:	mov	r4, r0
   22a0c:	beq	23070 <_start@@Base+0xe25c>
   22a10:	add	r5, sp, #360	; 0x168
   22a14:	mov	r6, #0
   22a18:	mov	r7, #0
   22a1c:	mov	r1, r0
   22a20:	mov	r3, r5
   22a24:	mov	r2, r9
   22a28:	mov	r0, fp
   22a2c:	strd	r6, [r5]
   22a30:	bl	179a8 <_start@@Base+0x2b94>
   22a34:	cmp	r0, r4
   22a38:	mov	sl, r0
   22a3c:	beq	23238 <_start@@Base+0xe424>
   22a40:	add	r3, sp, #360	; 0x168
   22a44:	ldrd	r2, [r3]
   22a48:	orrs	r3, r2, r3
   22a4c:	bne	22a5c <_start@@Base+0xdc48>
   22a50:	ldr	r3, [fp, #8]
   22a54:	tst	r3, #2
   22a58:	beq	1f6bc <_start@@Base+0xa8a8>
   22a5c:	mov	r3, #8
   22a60:	mov	r1, #22
   22a64:	ldr	r0, [fp]
   22a68:	mov	r2, r3
   22a6c:	bl	28894 <flatcc_builder_table_add@@Base>
   22a70:	cmp	r0, #0
   22a74:	beq	23230 <_start@@Base+0xe41c>
   22a78:	add	r3, sp, #360	; 0x168
   22a7c:	ldrd	r2, [r3]
   22a80:	strd	r2, [r0]
   22a84:	b	1f6bc <_start@@Base+0xa8a8>
   22a88:	mov	r1, r6
   22a8c:	mov	r2, r9
   22a90:	mov	r0, fp
   22a94:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22a98:	mov	sl, r0
   22a9c:	b	1f6bc <_start@@Base+0xa8a8>
   22aa0:	mov	sl, r6
   22aa4:	b	1ff7c <_start@@Base+0xb168>
   22aa8:	add	r1, r1, #1
   22aac:	mov	r2, r9
   22ab0:	mov	r0, fp
   22ab4:	bl	16ef8 <_start@@Base+0x20e4>
   22ab8:	mov	r6, r0
   22abc:	b	20ef0 <_start@@Base+0xc0dc>
   22ac0:	add	r1, r1, #1
   22ac4:	mov	r2, r9
   22ac8:	mov	r0, fp
   22acc:	bl	16ef8 <_start@@Base+0x20e4>
   22ad0:	mov	r6, r0
   22ad4:	b	20ac8 <_start@@Base+0xbcb4>
   22ad8:	ldr	r0, [fp]
   22adc:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   22ae0:	cmp	r0, #0
   22ae4:	bne	1edec <_start@@Base+0x9fd8>
   22ae8:	ldr	r5, [sp, #28]
   22aec:	mov	r1, sl
   22af0:	mov	r2, r9
   22af4:	mov	r0, fp
   22af8:	mov	r3, r5
   22afc:	bl	1a14c <_start@@Base+0x5338>
   22b00:	ldr	r3, [sp, #336]	; 0x150
   22b04:	mov	sl, r0
   22b08:	cmp	r3, #0
   22b0c:	beq	22b78 <_start@@Base+0xdd64>
   22b10:	add	r4, sp, #340	; 0x154
   22b14:	mov	r1, sl
   22b18:	mov	r3, r4
   22b1c:	mov	r2, r9
   22b20:	mov	r0, fp
   22b24:	bl	1eda0 <_start@@Base+0x9f8c>
   22b28:	ldr	r3, [sp, #340]	; 0x154
   22b2c:	mov	sl, r0
   22b30:	mov	r1, #1
   22b34:	cmp	r3, #0
   22b38:	beq	1edec <_start@@Base+0x9fd8>
   22b3c:	ldr	r0, [fp]
   22b40:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   22b44:	subs	ip, r0, #0
   22b48:	mov	r3, r5
   22b4c:	mov	r2, r9
   22b50:	mov	r1, sl
   22b54:	mov	r0, fp
   22b58:	beq	1edec <_start@@Base+0x9fd8>
   22b5c:	ldr	lr, [sp, #340]	; 0x154
   22b60:	str	lr, [ip]
   22b64:	bl	1ad0c <_start@@Base+0x5ef8>
   22b68:	ldr	r3, [sp, #336]	; 0x150
   22b6c:	mov	sl, r0
   22b70:	cmp	r3, #0
   22b74:	bne	22b14 <_start@@Base+0xdd00>
   22b78:	ldr	r0, [fp]
   22b7c:	bl	27bc8 <flatcc_builder_end_offset_vector@@Base>
   22b80:	cmp	r0, #0
   22b84:	str	r0, [sp, #340]	; 0x154
   22b88:	beq	1edec <_start@@Base+0x9fd8>
   22b8c:	mov	r1, #11
   22b90:	ldr	r0, [fp]
   22b94:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   22b98:	cmp	r0, #0
   22b9c:	beq	1edec <_start@@Base+0x9fd8>
   22ba0:	ldr	r3, [sp, #340]	; 0x154
   22ba4:	str	r3, [r0]
   22ba8:	b	1f6bc <_start@@Base+0xa8a8>
   22bac:	ldrb	r3, [r8, #2]
   22bb0:	cmp	r3, #32
   22bb4:	bls	219a0 <_start@@Base+0xcb8c>
   22bb8:	add	sl, r8, #2
   22bbc:	strd	r4, [sp, #128]	; 0x80
   22bc0:	b	1f6bc <_start@@Base+0xa8a8>
   22bc4:	mov	r6, r0
   22bc8:	mov	r1, r6
   22bcc:	mov	r2, r9
   22bd0:	mov	r0, fp
   22bd4:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22bd8:	mov	sl, r0
   22bdc:	b	1f6bc <_start@@Base+0xa8a8>
   22be0:	add	r1, r1, #1
   22be4:	mov	r2, r9
   22be8:	mov	r0, fp
   22bec:	bl	16ef8 <_start@@Base+0x20e4>
   22bf0:	mov	r1, r0
   22bf4:	b	21894 <_start@@Base+0xca80>
   22bf8:	add	r1, r1, #1
   22bfc:	mov	r2, r9
   22c00:	mov	r0, fp
   22c04:	bl	16ef8 <_start@@Base+0x20e4>
   22c08:	mov	r6, r0
   22c0c:	b	21038 <_start@@Base+0xc224>
   22c10:	ldr	r3, [pc, #-788]	; 22904 <_start@@Base+0xdaf0>
   22c14:	mov	r1, r0
   22c18:	mov	r2, r9
   22c1c:	mov	r0, fp
   22c20:	str	r5, [sp]
   22c24:	add	r3, pc, r3
   22c28:	add	r3, r3, #492	; 0x1ec
   22c2c:	bl	18ee0 <_start@@Base+0x40cc>
   22c30:	cmp	r9, r0
   22c34:	cmpne	sl, r0
   22c38:	beq	203d8 <_start@@Base+0xb5c4>
   22c3c:	mov	sl, r0
   22c40:	b	20d68 <_start@@Base+0xbf54>
   22c44:	add	r6, r6, #8
   22c48:	mov	r1, r9
   22c4c:	mov	r0, r6
   22c50:	mov	r7, #0
   22c54:	bl	14f08 <_start@@Base+0xf4>
   22c58:	and	r3, r1, #-16777216	; 0xff000000
   22c5c:	str	r7, [sp, #312]	; 0x138
   22c60:	str	r3, [sp, #316]	; 0x13c
   22c64:	add	r3, sp, #312	; 0x138
   22c68:	ldrd	r2, [r3]
   22c6c:	cmp	r3, #1627389952	; 0x61000000
   22c70:	cmpeq	r2, #0
   22c74:	bne	22f6c <_start@@Base+0xe158>
   22c78:	sub	r3, r9, r6
   22c7c:	cmp	r3, #1
   22c80:	ble	2313c <_start@@Base+0xe328>
   22c84:	mov	r3, #1
   22c88:	mov	r2, r9
   22c8c:	mov	r1, r6
   22c90:	mov	r0, fp
   22c94:	bl	1a220 <_start@@Base+0x540c>
   22c98:	cmp	r6, r0
   22c9c:	mov	r4, r0
   22ca0:	beq	2313c <_start@@Base+0xe328>
   22ca4:	add	r5, sp, #360	; 0x168
   22ca8:	mov	r1, r0
   22cac:	str	r7, [sp, #360]	; 0x168
   22cb0:	mov	r2, r9
   22cb4:	mov	r3, r5
   22cb8:	mov	r0, fp
   22cbc:	bl	17c80 <_start@@Base+0x2e6c>
   22cc0:	cmp	r0, r4
   22cc4:	mov	sl, r0
   22cc8:	beq	2327c <_start@@Base+0xe468>
   22ccc:	ldr	r3, [sp, #360]	; 0x168
   22cd0:	cmp	r3, #0
   22cd4:	bne	22ce4 <_start@@Base+0xded0>
   22cd8:	ldr	r3, [fp, #8]
   22cdc:	tst	r3, #2
   22ce0:	beq	1f6bc <_start@@Base+0xa8a8>
   22ce4:	mov	r3, #4
   22ce8:	mov	r1, #21
   22cec:	ldr	r0, [fp]
   22cf0:	mov	r2, r3
   22cf4:	bl	28894 <flatcc_builder_table_add@@Base>
   22cf8:	cmp	r0, #0
   22cfc:	beq	23230 <_start@@Base+0xe41c>
   22d00:	ldr	r3, [sp, #360]	; 0x168
   22d04:	str	r3, [r0]
   22d08:	b	1f6bc <_start@@Base+0xa8a8>
   22d0c:	mov	r1, r6
   22d10:	mov	r2, r9
   22d14:	mov	r0, fp
   22d18:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22d1c:	mov	sl, r0
   22d20:	b	1f6bc <_start@@Base+0xa8a8>
   22d24:	mov	r6, r0
   22d28:	mov	r3, #0
   22d2c:	add	r6, r6, #8
   22d30:	mov	r1, r9
   22d34:	mov	r0, r6
   22d38:	str	r3, [sp, #320]	; 0x140
   22d3c:	bl	14f08 <_start@@Base+0xf4>
   22d40:	and	r3, r1, #-16777216	; 0xff000000
   22d44:	str	r3, [sp, #324]	; 0x144
   22d48:	add	r3, sp, #320	; 0x140
   22d4c:	ldrd	r2, [r3]
   22d50:	cmp	r3, #1627389952	; 0x61000000
   22d54:	cmpeq	r2, #0
   22d58:	bne	22f84 <_start@@Base+0xe170>
   22d5c:	sub	r3, r9, r6
   22d60:	cmp	r3, #1
   22d64:	ble	23088 <_start@@Base+0xe274>
   22d68:	mov	r3, #1
   22d6c:	mov	r2, r9
   22d70:	mov	r1, r6
   22d74:	mov	r0, fp
   22d78:	bl	1a220 <_start@@Base+0x540c>
   22d7c:	cmp	r6, r0
   22d80:	mov	r4, r0
   22d84:	beq	23088 <_start@@Base+0xe274>
   22d88:	add	r5, sp, #360	; 0x168
   22d8c:	mov	r6, #0
   22d90:	mov	r7, #0
   22d94:	mov	r1, r0
   22d98:	mov	r3, r5
   22d9c:	mov	r2, r9
   22da0:	mov	r0, fp
   22da4:	strd	r6, [r5]
   22da8:	bl	17bd8 <_start@@Base+0x2dc4>
   22dac:	cmp	r0, r4
   22db0:	mov	sl, r0
   22db4:	beq	232b0 <_start@@Base+0xe49c>
   22db8:	add	r3, sp, #360	; 0x168
   22dbc:	ldrd	r2, [r3]
   22dc0:	orrs	r3, r2, r3
   22dc4:	bne	22dd4 <_start@@Base+0xdfc0>
   22dc8:	ldr	r3, [fp, #8]
   22dcc:	tst	r3, #2
   22dd0:	beq	1f6bc <_start@@Base+0xa8a8>
   22dd4:	mov	r3, #8
   22dd8:	mov	r1, #23
   22ddc:	ldr	r0, [fp]
   22de0:	mov	r2, r3
   22de4:	bl	28894 <flatcc_builder_table_add@@Base>
   22de8:	cmp	r0, #0
   22dec:	beq	23230 <_start@@Base+0xe41c>
   22df0:	add	r3, sp, #360	; 0x168
   22df4:	ldrd	r2, [r3]
   22df8:	strd	r2, [r0]
   22dfc:	b	1f6bc <_start@@Base+0xa8a8>
   22e00:	mov	sl, r0
   22e04:	ldr	r0, [fp]
   22e08:	bl	27a9c <flatcc_builder_end_vector@@Base>
   22e0c:	cmp	r0, #0
   22e10:	str	r0, [sp, #340]	; 0x154
   22e14:	beq	1edec <_start@@Base+0x9fd8>
   22e18:	mov	r1, #32
   22e1c:	ldr	r0, [fp]
   22e20:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   22e24:	cmp	r0, #0
   22e28:	beq	1edec <_start@@Base+0x9fd8>
   22e2c:	ldr	r3, [sp, #340]	; 0x154
   22e30:	str	r3, [r0]
   22e34:	b	1f6bc <_start@@Base+0xa8a8>
   22e38:	ldr	r3, [pc, #-1336]	; 22908 <_start@@Base+0xdaf4>
   22e3c:	mov	r1, r0
   22e40:	mov	r2, r9
   22e44:	mov	r0, fp
   22e48:	str	r6, [sp]
   22e4c:	add	r3, pc, r3
   22e50:	add	r3, r3, #328	; 0x148
   22e54:	bl	1995c <_start@@Base+0x4b48>
   22e58:	cmp	r9, r0
   22e5c:	cmpne	sl, r0
   22e60:	mov	sl, r0
   22e64:	bne	20474 <_start@@Base+0xb660>
   22e68:	b	1edec <_start@@Base+0x9fd8>
   22e6c:	mov	r1, r6
   22e70:	mov	r2, r9
   22e74:	mov	r0, fp
   22e78:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22e7c:	mov	sl, r0
   22e80:	b	1f6bc <_start@@Base+0xa8a8>
   22e84:	ldr	r0, [fp]
   22e88:	bl	27a9c <flatcc_builder_end_vector@@Base>
   22e8c:	cmp	r0, #0
   22e90:	str	r0, [sp, #340]	; 0x154
   22e94:	beq	1edec <_start@@Base+0x9fd8>
   22e98:	mov	r1, #5
   22e9c:	ldr	r0, [fp]
   22ea0:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   22ea4:	cmp	r0, #0
   22ea8:	beq	1edec <_start@@Base+0x9fd8>
   22eac:	ldr	r3, [sp, #340]	; 0x154
   22eb0:	str	r3, [r0]
   22eb4:	b	1f6bc <_start@@Base+0xa8a8>
   22eb8:	mov	r1, r0
   22ebc:	mov	r3, #8
   22ec0:	mov	r2, r9
   22ec4:	mov	r0, fp
   22ec8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22ecc:	mov	sl, r0
   22ed0:	cmp	r5, sl
   22ed4:	bne	1fad4 <_start@@Base+0xacc0>
   22ed8:	mov	r8, r5
   22edc:	b	1fa9c <_start@@Base+0xac88>
   22ee0:	ldr	r3, [pc, #-1500]	; 2290c <_start@@Base+0xdaf8>
   22ee4:	mov	r1, r0
   22ee8:	mov	r2, r9
   22eec:	mov	r0, fp
   22ef0:	str	r5, [sp]
   22ef4:	add	r3, pc, r3
   22ef8:	add	r3, r3, #528	; 0x210
   22efc:	bl	19d6c <_start@@Base+0x4f58>
   22f00:	cmp	r9, r0
   22f04:	cmpne	sl, r0
   22f08:	beq	203d8 <_start@@Base+0xb5c4>
   22f0c:	mov	sl, r0
   22f10:	b	2010c <_start@@Base+0xb2f8>
   22f14:	mov	r1, r8
   22f18:	mov	r3, #7
   22f1c:	mov	r2, r9
   22f20:	mov	r0, fp
   22f24:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22f28:	mov	sl, r0
   22f2c:	b	22ed0 <_start@@Base+0xe0bc>
   22f30:	mov	r6, r0
   22f34:	mov	r1, r6
   22f38:	mov	r2, r9
   22f3c:	mov	r0, fp
   22f40:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22f44:	mov	sl, r0
   22f48:	b	1f6bc <_start@@Base+0xa8a8>
   22f4c:	mov	r1, r0
   22f50:	mov	r3, #33	; 0x21
   22f54:	strd	r4, [sp, #128]	; 0x80
   22f58:	mov	r2, r9
   22f5c:	mov	r0, fp
   22f60:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22f64:	mov	sl, r0
   22f68:	b	1f6bc <_start@@Base+0xa8a8>
   22f6c:	mov	r1, r6
   22f70:	mov	r2, r9
   22f74:	mov	r0, fp
   22f78:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22f7c:	mov	sl, r0
   22f80:	b	1f6bc <_start@@Base+0xa8a8>
   22f84:	mov	r1, r6
   22f88:	mov	r2, r9
   22f8c:	mov	r0, fp
   22f90:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22f94:	mov	sl, r0
   22f98:	b	1f6bc <_start@@Base+0xa8a8>
   22f9c:	mov	r1, r6
   22fa0:	mov	r2, r9
   22fa4:	mov	r0, fp
   22fa8:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   22fac:	mov	sl, r0
   22fb0:	b	1f6bc <_start@@Base+0xa8a8>
   22fb4:	ldr	r0, [fp]
   22fb8:	bl	27a9c <flatcc_builder_end_vector@@Base>
   22fbc:	cmp	r0, #0
   22fc0:	str	r0, [sp, #340]	; 0x154
   22fc4:	beq	1edec <_start@@Base+0x9fd8>
   22fc8:	mov	r1, #33	; 0x21
   22fcc:	ldr	r0, [fp]
   22fd0:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   22fd4:	cmp	r0, #0
   22fd8:	beq	1edec <_start@@Base+0x9fd8>
   22fdc:	ldr	r3, [sp, #340]	; 0x154
   22fe0:	str	r3, [r0]
   22fe4:	b	1f6bc <_start@@Base+0xa8a8>
   22fe8:	mov	r1, r0
   22fec:	mov	r3, #8
   22ff0:	mov	r2, r9
   22ff4:	mov	r0, fp
   22ff8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   22ffc:	cmp	r4, r0
   23000:	mov	sl, r0
   23004:	strb	r6, [sp, #352]	; 0x160
   23008:	bne	1f0fc <_start@@Base+0xa2e8>
   2300c:	mov	r5, r4
   23010:	b	20e00 <_start@@Base+0xbfec>
   23014:	mov	r1, r0
   23018:	mov	r3, #7
   2301c:	mov	r2, r9
   23020:	mov	r0, fp
   23024:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23028:	cmp	r4, r0
   2302c:	mov	sl, r0
   23030:	strb	r7, [sp, #352]	; 0x160
   23034:	bne	1f0fc <_start@@Base+0xa2e8>
   23038:	b	2300c <_start@@Base+0xe1f8>
   2303c:	ldr	r3, [pc, #-1844]	; 22910 <_start@@Base+0xdafc>
   23040:	mov	r1, r0
   23044:	mov	r2, r9
   23048:	mov	r0, fp
   2304c:	str	r6, [sp]
   23050:	add	r3, pc, r3
   23054:	add	r3, r3, #552	; 0x228
   23058:	bl	18c00 <_start@@Base+0x3dec>
   2305c:	cmp	r9, r0
   23060:	cmpne	sl, r0
   23064:	beq	203d8 <_start@@Base+0xb5c4>
   23068:	mov	sl, r0
   2306c:	b	2082c <_start@@Base+0xba18>
   23070:	mov	r1, r6
   23074:	mov	r2, r9
   23078:	mov	r0, fp
   2307c:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   23080:	mov	sl, r0
   23084:	b	1f6bc <_start@@Base+0xa8a8>
   23088:	mov	r1, r6
   2308c:	mov	r2, r9
   23090:	mov	r0, fp
   23094:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   23098:	mov	sl, r0
   2309c:	b	1f6bc <_start@@Base+0xa8a8>
   230a0:	ldr	r3, [pc, #-1940]	; 22914 <_start@@Base+0xdb00>
   230a4:	mov	r1, r0
   230a8:	mov	r2, r9
   230ac:	mov	r0, fp
   230b0:	str	r6, [sp]
   230b4:	add	r3, pc, r3
   230b8:	add	r3, r3, #576	; 0x240
   230bc:	bl	19778 <_start@@Base+0x4964>
   230c0:	cmp	r9, r0
   230c4:	cmpne	sl, r0
   230c8:	beq	203d8 <_start@@Base+0xb5c4>
   230cc:	mov	sl, r0
   230d0:	b	22040 <_start@@Base+0xd22c>
   230d4:	ldr	r3, [pc, #-1988]	; 22918 <_start@@Base+0xdb04>
   230d8:	mov	r2, r9
   230dc:	mov	r1, r4
   230e0:	mov	r0, fp
   230e4:	str	r5, [sp]
   230e8:	add	r3, pc, r3
   230ec:	add	r3, r3, #600	; 0x258
   230f0:	bl	193b0 <_start@@Base+0x459c>
   230f4:	cmp	r9, r0
   230f8:	cmpne	r4, r0
   230fc:	mov	sl, r0
   23100:	bne	21a54 <_start@@Base+0xcc40>
   23104:	b	1edec <_start@@Base+0x9fd8>
   23108:	ldr	r3, [pc, #-2036]	; 2291c <_start@@Base+0xdb08>
   2310c:	mov	r1, r0
   23110:	mov	r2, r9
   23114:	mov	r0, fp
   23118:	str	r5, [sp]
   2311c:	add	r3, pc, r3
   23120:	add	r3, r3, #540	; 0x21c
   23124:	bl	19d6c <_start@@Base+0x4f58>
   23128:	cmp	r9, r0
   2312c:	cmpne	sl, r0
   23130:	beq	203d8 <_start@@Base+0xb5c4>
   23134:	mov	sl, r0
   23138:	b	21f90 <_start@@Base+0xd17c>
   2313c:	mov	r1, r6
   23140:	mov	r2, r9
   23144:	mov	r0, fp
   23148:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   2314c:	mov	sl, r0
   23150:	b	1f6bc <_start@@Base+0xa8a8>
   23154:	mov	r2, #1
   23158:	mvn	r3, #0
   2315c:	mov	r1, r2
   23160:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   23164:	subs	r6, r0, #0
   23168:	bne	1edec <_start@@Base+0x9fd8>
   2316c:	ldr	r8, [sp, #28]
   23170:	mov	r1, sl
   23174:	mov	r2, r9
   23178:	mov	r0, fp
   2317c:	mov	r3, r8
   23180:	bl	1a14c <_start@@Base+0x5338>
   23184:	ldr	r3, [sp, #336]	; 0x150
   23188:	mov	sl, r0
   2318c:	cmp	r3, #0
   23190:	beq	2326c <_start@@Base+0xe458>
   23194:	ldr	r7, [pc, #-2172]	; 22920 <_start@@Base+0xdb0c>
   23198:	add	r7, pc, r7
   2319c:	add	r7, r7, #624	; 0x270
   231a0:	b	231d0 <_start@@Base+0xe3bc>
   231a4:	ldrb	ip, [sp, #360]	; 0x168
   231a8:	mov	r1, r0
   231ac:	mov	r3, r8
   231b0:	mov	r2, r9
   231b4:	mov	r0, fp
   231b8:	strb	ip, [r5]
   231bc:	bl	1ad0c <_start@@Base+0x5ef8>
   231c0:	ldr	r3, [sp, #336]	; 0x150
   231c4:	mov	sl, r0
   231c8:	cmp	r3, #0
   231cc:	beq	2326c <_start@@Base+0xe458>
   231d0:	mov	r1, #1
   231d4:	ldr	r0, [fp]
   231d8:	add	r4, sp, #360	; 0x168
   231dc:	strb	r6, [sp, #360]	; 0x168
   231e0:	bl	26168 <flatcc_builder_extend_vector@@Base>
   231e4:	subs	r5, r0, #0
   231e8:	mov	r1, sl
   231ec:	mov	r3, r4
   231f0:	mov	r2, r9
   231f4:	mov	r0, fp
   231f8:	beq	1edec <_start@@Base+0x9fd8>
   231fc:	bl	17d50 <_start@@Base+0x2f3c>
   23200:	cmp	r0, sl
   23204:	bne	231a4 <_start@@Base+0xe390>
   23208:	mov	r3, r7
   2320c:	mov	r2, r9
   23210:	str	r4, [sp]
   23214:	mov	r1, sl
   23218:	mov	r0, fp
   2321c:	bl	19598 <_start@@Base+0x4784>
   23220:	cmp	r9, r0
   23224:	cmpne	r0, sl
   23228:	bne	231a4 <_start@@Base+0xe390>
   2322c:	b	203d8 <_start@@Base+0xb5c4>
   23230:	mov	r0, sl
   23234:	b	203d8 <_start@@Base+0xb5c4>
   23238:	ldr	r3, [pc, #-2332]	; 22924 <_start@@Base+0xdb10>
   2323c:	mov	r1, r0
   23240:	mov	r2, r9
   23244:	mov	r0, fp
   23248:	str	r5, [sp]
   2324c:	add	r3, pc, r3
   23250:	add	r3, r3, #564	; 0x234
   23254:	bl	18c00 <_start@@Base+0x3dec>
   23258:	cmp	r9, r0
   2325c:	cmpne	sl, r0
   23260:	beq	203d8 <_start@@Base+0xb5c4>
   23264:	mov	sl, r0
   23268:	b	22a40 <_start@@Base+0xdc2c>
   2326c:	ldr	r0, [fp]
   23270:	bl	27a9c <flatcc_builder_end_vector@@Base>
   23274:	str	r0, [sp, #340]	; 0x154
   23278:	b	1f480 <_start@@Base+0xa66c>
   2327c:	ldr	r3, [pc, #-2396]	; 22928 <_start@@Base+0xdb14>
   23280:	mov	r1, r0
   23284:	mov	r2, r9
   23288:	mov	r0, fp
   2328c:	str	r5, [sp]
   23290:	add	r3, pc, r3
   23294:	add	r3, r3, #588	; 0x24c
   23298:	bl	19778 <_start@@Base+0x4964>
   2329c:	cmp	r9, r0
   232a0:	cmpne	sl, r0
   232a4:	beq	203d8 <_start@@Base+0xb5c4>
   232a8:	mov	sl, r0
   232ac:	b	22ccc <_start@@Base+0xdeb8>
   232b0:	ldr	r3, [pc, #-2444]	; 2292c <_start@@Base+0xdb18>
   232b4:	mov	r1, r0
   232b8:	mov	r2, r9
   232bc:	mov	r0, fp
   232c0:	str	r5, [sp]
   232c4:	add	r3, pc, r3
   232c8:	add	r3, r3, #612	; 0x264
   232cc:	bl	193b0 <_start@@Base+0x459c>
   232d0:	cmp	r9, r0
   232d4:	cmpne	sl, r0
   232d8:	beq	203d8 <_start@@Base+0xb5c4>
   232dc:	mov	sl, r0
   232e0:	b	22db8 <_start@@Base+0xdfa4>
   232e4:	mov	sl, r8
   232e8:	strd	r4, [sp, #128]	; 0x80
   232ec:	b	1f6bc <_start@@Base+0xa8a8>
   232f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   232f4:	mov	ip, #0
   232f8:	mov	r5, r1
   232fc:	strd	r6, [sp, #8]
   23300:	mov	r6, r2
   23304:	mov	r7, r0
   23308:	strd	r8, [sp, #16]
   2330c:	strd	sl, [sp, #24]
   23310:	str	lr, [sp, #32]
   23314:	sub	sp, sp, #68	; 0x44
   23318:	ldr	r2, [sp, #104]	; 0x68
   2331c:	str	ip, [r2]
   23320:	cmp	r3, #4
   23324:	addls	pc, pc, r3, lsl #2
   23328:	b	23d84 <_start@@Base+0xef70>
   2332c:	b	23384 <_start@@Base+0xe570>
   23330:	b	233b4 <_start@@Base+0xe5a0>
   23334:	b	233c4 <_start@@Base+0xe5b0>
   23338:	b	23460 <_start@@Base+0xe64c>
   2333c:	b	23340 <_start@@Base+0xe52c>
   23340:	mov	r2, r6
   23344:	ldr	r3, [sp, #104]	; 0x68
   23348:	bl	1c060 <_start@@Base+0x724c>
   2334c:	ldr	r3, [r7, #20]
   23350:	cmp	r3, #0
   23354:	bne	23368 <_start@@Base+0xe554>
   23358:	ldr	r3, [sp, #104]	; 0x68
   2335c:	ldr	r3, [r3]
   23360:	cmp	r3, #0
   23364:	beq	23b70 <_start@@Base+0xed5c>
   23368:	add	sp, sp, #68	; 0x44
   2336c:	ldrd	r4, [sp]
   23370:	ldrd	r6, [sp, #8]
   23374:	ldrd	r8, [sp, #16]
   23378:	ldrd	sl, [sp, #24]
   2337c:	add	sp, sp, #32
   23380:	pop	{pc}		; (ldr pc, [sp], #4)
   23384:	sub	r3, r6, r1
   23388:	cmp	r3, #3
   2338c:	ble	2339c <_start@@Base+0xe588>
   23390:	ldrb	r3, [r1]
   23394:	cmp	r3, #110	; 0x6e
   23398:	beq	23d0c <_start@@Base+0xeef8>
   2339c:	mov	r2, r6
   233a0:	mov	r1, r5
   233a4:	mov	r0, r7
   233a8:	mov	r3, #26
   233ac:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   233b0:	b	23368 <_start@@Base+0xe554>
   233b4:	mov	r2, r6
   233b8:	ldr	r3, [sp, #104]	; 0x68
   233bc:	bl	1eda0 <_start@@Base+0x9f8c>
   233c0:	b	2334c <_start@@Base+0xe538>
   233c4:	mov	r1, #4
   233c8:	ldr	r0, [r0]
   233cc:	bl	26d60 <flatcc_builder_start_table@@Base>
   233d0:	cmp	r0, #0
   233d4:	bne	2377c <_start@@Base+0xe968>
   233d8:	add	r3, sp, #48	; 0x30
   233dc:	mov	r1, r5
   233e0:	mov	r2, r6
   233e4:	mov	r0, r7
   233e8:	bl	18e0c <_start@@Base+0x3ff8>
   233ec:	ldr	r3, [sp, #48]	; 0x30
   233f0:	mov	r4, r0
   233f4:	cmp	r3, #0
   233f8:	beq	23d7c <_start@@Base+0xef68>
   233fc:	ldr	r8, [pc, #980]	; 237d8 <_start@@Base+0xe9c4>
   23400:	add	r8, pc, r8
   23404:	add	r8, r8, #704	; 0x2c0
   23408:	str	r8, [sp, #36]	; 0x24
   2340c:	cmp	r6, r4
   23410:	beq	23424 <_start@@Base+0xe610>
   23414:	ldrb	r3, [r4]
   23418:	cmp	r3, #34	; 0x22
   2341c:	addeq	r4, r4, #1
   23420:	bne	237ac <_start@@Base+0xe998>
   23424:	sub	ip, r6, r4
   23428:	cmp	ip, #8
   2342c:	bhi	23470 <_start@@Base+0xe65c>
   23430:	sub	r3, ip, #1
   23434:	cmp	r3, #7
   23438:	addls	pc, pc, r3, lsl #2
   2343c:	b	23794 <_start@@Base+0xe980>
   23440:	b	23698 <_start@@Base+0xe884>
   23444:	b	2365c <_start@@Base+0xe848>
   23448:	b	2368c <_start@@Base+0xe878>
   2344c:	b	23680 <_start@@Base+0xe86c>
   23450:	b	23674 <_start@@Base+0xe860>
   23454:	b	23668 <_start@@Base+0xe854>
   23458:	b	23650 <_start@@Base+0xe83c>
   2345c:	b	23470 <_start@@Base+0xe65c>
   23460:	mov	r2, r6
   23464:	ldr	r3, [sp, #104]	; 0x68
   23468:	bl	1be94 <_start@@Base+0x7080>
   2346c:	b	2334c <_start@@Base+0xe538>
   23470:	ldrb	r2, [r4, #7]
   23474:	mov	r3, #0
   23478:	mov	lr, r3
   2347c:	ldrb	r0, [r4, #6]
   23480:	orr	r2, r2, r0, lsl #8
   23484:	ldrb	r0, [r4, #5]
   23488:	orr	r3, r2, r0, lsl #16
   2348c:	ldrb	r0, [r4, #4]
   23490:	orr	r0, r3, r0, lsl #24
   23494:	ldrb	r2, [r4, #3]
   23498:	orr	r1, lr, r2
   2349c:	ldrb	r2, [r4, #2]
   234a0:	orr	r1, r1, r2, lsl #8
   234a4:	ldrb	r2, [r4, #1]
   234a8:	lsr	sl, r0, #16
   234ac:	mov	r5, #0
   234b0:	add	r9, pc, #784	; 0x310
   234b4:	ldrd	r8, [r9]
   234b8:	lsl	sl, sl, #16
   234bc:	orr	r1, r1, r2, lsl #16
   234c0:	ldrb	r2, [r4]
   234c4:	orr	r2, r1, r2, lsl #24
   234c8:	cmp	r2, r9
   234cc:	cmpeq	sl, r8
   234d0:	beq	236a8 <_start@@Base+0xe894>
   234d4:	and	r3, r0, #-16777216	; 0xff000000
   234d8:	add	r9, pc, #752	; 0x2f0
   234dc:	ldrd	r8, [r9]
   234e0:	str	r3, [sp, #8]
   234e4:	str	r2, [sp, #12]
   234e8:	ldrd	r0, [sp, #8]
   234ec:	cmp	r1, r9
   234f0:	cmpeq	r0, r8
   234f4:	bne	237e4 <_start@@Base+0xe9d0>
   234f8:	cmp	ip, #5
   234fc:	ble	23794 <_start@@Base+0xe980>
   23500:	mov	r3, #5
   23504:	mov	r2, r6
   23508:	mov	r1, r4
   2350c:	mov	r0, r7
   23510:	bl	1a220 <_start@@Base+0x540c>
   23514:	cmp	r4, r0
   23518:	mov	r9, r0
   2351c:	beq	23794 <_start@@Base+0xe980>
   23520:	mov	r3, #0
   23524:	mov	r0, #0
   23528:	mov	r1, #0
   2352c:	cmp	r6, r9
   23530:	strb	r3, [sp, #47]	; 0x2f
   23534:	str	r3, [sp, #52]	; 0x34
   23538:	strd	r0, [sp, #56]	; 0x38
   2353c:	beq	23ab0 <_start@@Base+0xec9c>
   23540:	add	r0, sp, #56	; 0x38
   23544:	add	r3, sp, #52	; 0x34
   23548:	mov	r2, r6
   2354c:	mov	r1, r9
   23550:	str	r0, [sp]
   23554:	mov	r0, r7
   23558:	bl	2d528 <flatcc_json_parser_integer@@Base>
   2355c:	cmp	r9, r0
   23560:	mov	r5, r0
   23564:	bne	23b08 <_start@@Base+0xecf4>
   23568:	ldr	r3, [pc, #620]	; 237dc <_start@@Base+0xe9c8>
   2356c:	add	ip, sp, #47	; 0x2f
   23570:	mov	r2, r6
   23574:	mov	r1, r5
   23578:	mov	r0, r7
   2357c:	str	ip, [sp]
   23580:	add	r3, pc, r3
   23584:	add	r3, r3, #676	; 0x2a4
   23588:	bl	19b68 <_start@@Base+0x4d54>
   2358c:	cmp	r6, r0
   23590:	cmpne	r0, r5
   23594:	beq	23d74 <_start@@Base+0xef60>
   23598:	ldrsb	r2, [sp, #47]	; 0x2f
   2359c:	mov	r5, r0
   235a0:	cmp	r2, #2
   235a4:	bne	235b4 <_start@@Base+0xe7a0>
   235a8:	ldr	r3, [r7, #8]
   235ac:	tst	r3, #2
   235b0:	beq	235d8 <_start@@Base+0xe7c4>
   235b4:	mov	r3, #1
   235b8:	mov	r1, #0
   235bc:	ldr	r0, [r7]
   235c0:	mov	r2, r3
   235c4:	bl	28894 <flatcc_builder_table_add@@Base>
   235c8:	cmp	r0, #0
   235cc:	beq	2377c <_start@@Base+0xe968>
   235d0:	ldrsb	r3, [sp, #47]	; 0x2f
   235d4:	strb	r3, [r0]
   235d8:	sub	r3, r6, r5
   235dc:	cmp	r3, #1
   235e0:	ble	235f4 <_start@@Base+0xe7e0>
   235e4:	ldrb	r3, [r5]
   235e8:	cmp	r3, #32
   235ec:	bhi	23608 <_start@@Base+0xe7f4>
   235f0:	beq	23a40 <_start@@Base+0xec2c>
   235f4:	mov	r1, r5
   235f8:	mov	r2, r6
   235fc:	mov	r0, r7
   23600:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   23604:	mov	r5, r0
   23608:	cmp	r6, r5
   2360c:	beq	23a0c <_start@@Base+0xebf8>
   23610:	ldrb	r3, [r5]
   23614:	cmp	r3, #44	; 0x2c
   23618:	beq	23a54 <_start@@Base+0xec40>
   2361c:	mov	r3, #0
   23620:	str	r3, [sp, #48]	; 0x30
   23624:	ldrb	r3, [r5]
   23628:	cmp	r3, #125	; 0x7d
   2362c:	beq	238ec <_start@@Base+0xead8>
   23630:	mov	r3, #10
   23634:	mov	r1, r5
   23638:	mov	r2, r6
   2363c:	mov	r0, r7
   23640:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23644:	mov	r4, r0
   23648:	ldr	r3, [sp, #48]	; 0x30
   2364c:	b	233f4 <_start@@Base+0xe5e0>
   23650:	mov	r2, #0
   23654:	mov	r3, #0
   23658:	b	23478 <_start@@Base+0xe664>
   2365c:	mov	r0, #0
   23660:	mov	r1, r0
   23664:	b	234a4 <_start@@Base+0xe690>
   23668:	mov	r2, #0
   2366c:	mov	lr, r2
   23670:	b	23484 <_start@@Base+0xe670>
   23674:	mov	r3, #0
   23678:	mov	lr, r3
   2367c:	b	2348c <_start@@Base+0xe678>
   23680:	mov	r0, #0
   23684:	mov	lr, r0
   23688:	b	23494 <_start@@Base+0xe680>
   2368c:	mov	r0, #0
   23690:	mov	r1, r0
   23694:	b	2349c <_start@@Base+0xe688>
   23698:	ldrb	r2, [r4]
   2369c:	mov	r0, #0
   236a0:	lsl	r2, r2, #24
   236a4:	b	234d4 <_start@@Base+0xe6c0>
   236a8:	cmp	ip, #6
   236ac:	ble	23794 <_start@@Base+0xe980>
   236b0:	mov	r3, #6
   236b4:	mov	r2, r6
   236b8:	mov	r1, r4
   236bc:	mov	r0, r7
   236c0:	bl	1a220 <_start@@Base+0x540c>
   236c4:	cmp	r4, r0
   236c8:	mov	r9, r0
   236cc:	beq	23794 <_start@@Base+0xe980>
   236d0:	mov	r2, #0
   236d4:	mov	r3, #0
   236d8:	strb	r5, [sp, #47]	; 0x2f
   236dc:	cmp	r6, r0
   236e0:	str	r5, [sp, #52]	; 0x34
   236e4:	strd	r2, [sp, #56]	; 0x38
   236e8:	beq	23aa8 <_start@@Base+0xec94>
   236ec:	mov	r1, r0
   236f0:	add	r0, sp, #56	; 0x38
   236f4:	add	r3, sp, #52	; 0x34
   236f8:	mov	r2, r6
   236fc:	str	r0, [sp]
   23700:	mov	r0, r7
   23704:	bl	2d528 <flatcc_json_parser_integer@@Base>
   23708:	cmp	r9, r0
   2370c:	mov	r5, r0
   23710:	bne	23ab8 <_start@@Base+0xeca4>
   23714:	ldr	r3, [pc, #196]	; 237e0 <_start@@Base+0xe9cc>
   23718:	add	ip, sp, #47	; 0x2f
   2371c:	mov	r2, r6
   23720:	mov	r1, r5
   23724:	mov	r0, r7
   23728:	str	ip, [sp]
   2372c:	add	r3, pc, r3
   23730:	add	r3, r3, #660	; 0x294
   23734:	bl	19b68 <_start@@Base+0x4d54>
   23738:	cmp	r6, r0
   2373c:	cmpne	r0, r5
   23740:	beq	23d74 <_start@@Base+0xef60>
   23744:	ldrsb	r2, [sp, #47]	; 0x2f
   23748:	mov	r5, r0
   2374c:	cmp	r2, #2
   23750:	bne	23760 <_start@@Base+0xe94c>
   23754:	ldr	r3, [r7, #8]
   23758:	tst	r3, #2
   2375c:	beq	235d8 <_start@@Base+0xe7c4>
   23760:	mov	r3, #1
   23764:	ldr	r0, [r7]
   23768:	mov	r2, r3
   2376c:	mov	r1, r3
   23770:	bl	28894 <flatcc_builder_table_add@@Base>
   23774:	cmp	r0, #0
   23778:	bne	235d0 <_start@@Base+0xe7bc>
   2377c:	mov	r1, r5
   23780:	mov	r3, #33	; 0x21
   23784:	mov	r2, r6
   23788:	mov	r0, r7
   2378c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23790:	b	2334c <_start@@Base+0xe538>
   23794:	mov	r1, r4
   23798:	mov	r2, r6
   2379c:	mov	r0, r7
   237a0:	bl	2e52c <flatcc_json_parser_unmatched_symbol@@Base>
   237a4:	mov	r5, r0
   237a8:	b	235d8 <_start@@Base+0xe7c4>
   237ac:	mov	r1, r4
   237b0:	mov	r3, #5
   237b4:	mov	r2, r6
   237b8:	mov	r0, r7
   237bc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   237c0:	mov	r4, r0
   237c4:	b	23424 <_start@@Base+0xe610>
   237c8:	eorsvc	r0, r2, #0
   237cc:	cmnvs	pc, #28416	; 0x6f00
   237d0:	andvc	r0, r0, #0
   237d4:	cmnvs	pc, #28416	; 0x6f00
   237d8:	andeq	r0, r3, r0, lsl #25
   237dc:	andeq	r0, r3, r0, lsl #22
   237e0:	andeq	r0, r3, r4, asr r9
   237e4:	mov	r5, #0
   237e8:	bic	r3, r2, #255	; 0xff
   237ec:	add	r9, pc, #940	; 0x3ac
   237f0:	ldrd	r8, [r9]
   237f4:	str	r5, [sp, #24]
   237f8:	str	r3, [sp, #28]
   237fc:	ldrd	r0, [sp, #24]
   23800:	cmp	r1, r9
   23804:	cmpeq	r0, r8
   23808:	bne	23924 <_start@@Base+0xeb10>
   2380c:	cmp	ip, #3
   23810:	ble	23794 <_start@@Base+0xe980>
   23814:	mov	r3, #3
   23818:	mov	r2, r6
   2381c:	mov	r1, r4
   23820:	mov	r0, r7
   23824:	bl	1a220 <_start@@Base+0x540c>
   23828:	cmp	r4, r0
   2382c:	mov	r9, r0
   23830:	beq	23794 <_start@@Base+0xe980>
   23834:	mov	r2, #0
   23838:	mov	r3, #0
   2383c:	strb	r5, [sp, #47]	; 0x2f
   23840:	cmp	r6, r0
   23844:	str	r5, [sp, #52]	; 0x34
   23848:	strd	r2, [sp, #56]	; 0x38
   2384c:	beq	23b60 <_start@@Base+0xed4c>
   23850:	mov	r1, r0
   23854:	add	r0, sp, #56	; 0x38
   23858:	add	r3, sp, #52	; 0x34
   2385c:	mov	r2, r6
   23860:	str	r0, [sp]
   23864:	mov	r0, r7
   23868:	bl	2d528 <flatcc_json_parser_integer@@Base>
   2386c:	cmp	r9, r0
   23870:	mov	r4, r0
   23874:	bne	23bac <_start@@Base+0xed98>
   23878:	ldr	r3, [pc, #808]	; 23ba8 <_start@@Base+0xed94>
   2387c:	add	ip, sp, #47	; 0x2f
   23880:	mov	r2, r6
   23884:	mov	r1, r4
   23888:	mov	r0, r7
   2388c:	str	ip, [sp]
   23890:	add	r3, pc, r3
   23894:	add	r3, r3, #692	; 0x2b4
   23898:	bl	19598 <_start@@Base+0x4784>
   2389c:	cmp	r6, r0
   238a0:	cmpne	r0, r4
   238a4:	mov	r5, r0
   238a8:	beq	2377c <_start@@Base+0xe968>
   238ac:	ldrb	r2, [sp, #47]	; 0x2f
   238b0:	cmp	r2, #2
   238b4:	bne	238c4 <_start@@Base+0xeab0>
   238b8:	ldr	r3, [r7, #8]
   238bc:	tst	r3, #2
   238c0:	beq	235d8 <_start@@Base+0xe7c4>
   238c4:	mov	r3, #1
   238c8:	mov	r1, #3
   238cc:	mov	r2, r3
   238d0:	ldr	r0, [r7]
   238d4:	bl	28894 <flatcc_builder_table_add@@Base>
   238d8:	cmp	r0, #0
   238dc:	beq	2377c <_start@@Base+0xe968>
   238e0:	ldrb	r3, [sp, #47]	; 0x2f
   238e4:	strb	r3, [r0]
   238e8:	b	235d8 <_start@@Base+0xe7c4>
   238ec:	add	r1, r5, #1
   238f0:	sub	r3, r6, r1
   238f4:	cmp	r3, #1
   238f8:	ble	2390c <_start@@Base+0xeaf8>
   238fc:	ldrb	r3, [r5, #1]
   23900:	cmp	r3, #32
   23904:	bhi	23b58 <_start@@Base+0xed44>
   23908:	beq	23b88 <_start@@Base+0xed74>
   2390c:	mov	r2, r6
   23910:	mov	r0, r7
   23914:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   23918:	mov	r4, r0
   2391c:	ldr	r3, [sp, #48]	; 0x30
   23920:	b	233f4 <_start@@Base+0xe5e0>
   23924:	lsr	r3, r2, #16
   23928:	str	r5, [sp, #16]
   2392c:	mov	r1, #0
   23930:	movt	r1, #30051	; 0x7563
   23934:	mov	r0, #0
   23938:	lsl	r3, r3, #16
   2393c:	str	r3, [sp, #20]
   23940:	ldrd	r2, [sp, #16]
   23944:	cmp	r3, r1
   23948:	cmpeq	r2, r0
   2394c:	bne	23794 <_start@@Base+0xe980>
   23950:	cmp	ip, #2
   23954:	ble	23794 <_start@@Base+0xe980>
   23958:	mov	r3, #2
   2395c:	mov	r2, r6
   23960:	mov	r1, r4
   23964:	mov	r0, r7
   23968:	bl	1a220 <_start@@Base+0x540c>
   2396c:	cmp	r4, r0
   23970:	mov	r9, r0
   23974:	beq	23794 <_start@@Base+0xe980>
   23978:	mov	r2, #0
   2397c:	mov	r3, #0
   23980:	strb	r5, [sp, #47]	; 0x2f
   23984:	cmp	r6, r0
   23988:	str	r5, [sp, #52]	; 0x34
   2398c:	strd	r2, [sp, #56]	; 0x38
   23990:	beq	23b68 <_start@@Base+0xed54>
   23994:	mov	r1, r0
   23998:	add	r0, sp, #56	; 0x38
   2399c:	add	r3, sp, #52	; 0x34
   239a0:	mov	r2, r6
   239a4:	str	r0, [sp]
   239a8:	mov	r0, r7
   239ac:	bl	2d528 <flatcc_json_parser_integer@@Base>
   239b0:	cmp	r9, r0
   239b4:	mov	r4, r0
   239b8:	bne	23bfc <_start@@Base+0xede8>
   239bc:	add	r0, sp, #47	; 0x2f
   239c0:	mov	r2, r6
   239c4:	ldr	r3, [sp, #36]	; 0x24
   239c8:	mov	r1, r4
   239cc:	str	r0, [sp]
   239d0:	mov	r0, r7
   239d4:	bl	19598 <_start@@Base+0x4784>
   239d8:	cmp	r6, r0
   239dc:	cmpne	r0, r4
   239e0:	mov	r5, r0
   239e4:	beq	2377c <_start@@Base+0xe968>
   239e8:	ldrb	r2, [sp, #47]	; 0x2f
   239ec:	cmp	r2, #2
   239f0:	bne	23a00 <_start@@Base+0xebec>
   239f4:	ldr	r3, [r7, #8]
   239f8:	tst	r3, #2
   239fc:	beq	235d8 <_start@@Base+0xe7c4>
   23a00:	mov	r3, #1
   23a04:	mov	r1, #2
   23a08:	b	238cc <_start@@Base+0xeab8>
   23a0c:	mov	r3, #0
   23a10:	str	r3, [sp, #48]	; 0x30
   23a14:	ldr	r3, [r7, #20]
   23a18:	cmp	r3, #0
   23a1c:	bne	2377c <_start@@Base+0xe968>
   23a20:	ldr	r0, [r7]
   23a24:	bl	27744 <flatcc_builder_end_table@@Base>
   23a28:	ldr	r3, [sp, #104]	; 0x68
   23a2c:	cmp	r0, #0
   23a30:	str	r0, [r3]
   23a34:	movne	r0, r5
   23a38:	bne	2334c <_start@@Base+0xe538>
   23a3c:	b	2377c <_start@@Base+0xe968>
   23a40:	ldrb	r3, [r5, #1]
   23a44:	cmp	r3, #32
   23a48:	addhi	r5, r5, #1
   23a4c:	bls	235f4 <_start@@Base+0xe7e0>
   23a50:	b	23608 <_start@@Base+0xe7f4>
   23a54:	add	r4, r5, #1
   23a58:	sub	r3, r6, r4
   23a5c:	cmp	r3, #1
   23a60:	ble	23a74 <_start@@Base+0xec60>
   23a64:	ldrb	r3, [r5, #1]
   23a68:	cmp	r3, #32
   23a6c:	bhi	23a88 <_start@@Base+0xec74>
   23a70:	beq	23cac <_start@@Base+0xee98>
   23a74:	mov	r1, r4
   23a78:	mov	r2, r6
   23a7c:	mov	r0, r7
   23a80:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   23a84:	mov	r4, r0
   23a88:	cmp	r6, r4
   23a8c:	beq	23ce4 <_start@@Base+0xeed0>
   23a90:	ldrb	r3, [r4]
   23a94:	cmp	r3, #125	; 0x7d
   23a98:	beq	23cc0 <_start@@Base+0xeeac>
   23a9c:	mov	r3, #1
   23aa0:	str	r3, [sp, #48]	; 0x30
   23aa4:	b	2340c <_start@@Base+0xe5f8>
   23aa8:	mov	r5, r6
   23aac:	b	23714 <_start@@Base+0xe900>
   23ab0:	mov	r5, r6
   23ab4:	b	23568 <_start@@Base+0xe754>
   23ab8:	ldr	r1, [sp, #52]	; 0x34
   23abc:	ldrd	r2, [sp, #56]	; 0x38
   23ac0:	cmp	r1, #0
   23ac4:	beq	23c4c <_start@@Base+0xee38>
   23ac8:	cmp	r3, #0
   23acc:	cmpeq	r2, #128	; 0x80
   23ad0:	rsbls	r2, r2, #0
   23ad4:	sxtbls	r2, r2
   23ad8:	strbls	r2, [sp, #47]	; 0x2f
   23adc:	bls	2374c <_start@@Base+0xe938>
   23ae0:	mov	r1, r0
   23ae4:	mov	r3, #8
   23ae8:	mov	r2, r6
   23aec:	mov	r0, r7
   23af0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23af4:	mov	r5, r0
   23af8:	cmp	r9, r5
   23afc:	beq	23714 <_start@@Base+0xe900>
   23b00:	ldrsb	r2, [sp, #47]	; 0x2f
   23b04:	b	2374c <_start@@Base+0xe938>
   23b08:	ldr	r1, [sp, #52]	; 0x34
   23b0c:	ldrd	r2, [sp, #56]	; 0x38
   23b10:	cmp	r1, #0
   23b14:	beq	23c7c <_start@@Base+0xee68>
   23b18:	cmp	r3, #0
   23b1c:	cmpeq	r2, #128	; 0x80
   23b20:	rsbls	r2, r2, #0
   23b24:	sxtbls	r2, r2
   23b28:	strbls	r2, [sp, #47]	; 0x2f
   23b2c:	bls	235a0 <_start@@Base+0xe78c>
   23b30:	mov	r1, r0
   23b34:	mov	r3, #8
   23b38:	mov	r2, r6
   23b3c:	mov	r0, r7
   23b40:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23b44:	mov	r5, r0
   23b48:	cmp	r9, r5
   23b4c:	beq	23568 <_start@@Base+0xe754>
   23b50:	ldrsb	r2, [sp, #47]	; 0x2f
   23b54:	b	235a0 <_start@@Base+0xe78c>
   23b58:	mov	r5, r1
   23b5c:	b	23a14 <_start@@Base+0xec00>
   23b60:	mov	r4, r6
   23b64:	b	23878 <_start@@Base+0xea64>
   23b68:	mov	r4, r6
   23b6c:	b	239bc <_start@@Base+0xeba8>
   23b70:	mov	r1, r0
   23b74:	mov	r2, r6
   23b78:	mov	r0, r7
   23b7c:	mov	r3, #33	; 0x21
   23b80:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23b84:	b	23368 <_start@@Base+0xe554>
   23b88:	ldrb	r3, [r5, #2]
   23b8c:	cmp	r3, #32
   23b90:	bls	2390c <_start@@Base+0xeaf8>
   23b94:	add	r5, r5, #2
   23b98:	b	23a14 <_start@@Base+0xec00>
   23b9c:	nop	{0}
   23ba0:	andeq	r0, r0, r0
   23ba4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23ba8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   23bac:	ldr	r3, [sp, #52]	; 0x34
   23bb0:	cmp	r3, r5
   23bb4:	bne	23d3c <_start@@Base+0xef28>
   23bb8:	ldrd	r2, [sp, #56]	; 0x38
   23bbc:	cmp	r3, #0
   23bc0:	cmpeq	r2, #255	; 0xff
   23bc4:	uxtbls	r2, r2
   23bc8:	movls	r5, r0
   23bcc:	strbls	r2, [sp, #47]	; 0x2f
   23bd0:	bls	238b0 <_start@@Base+0xea9c>
   23bd4:	mov	r1, r0
   23bd8:	mov	r3, #7
   23bdc:	mov	r2, r6
   23be0:	mov	r0, r7
   23be4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23be8:	mov	r5, r0
   23bec:	cmp	r9, r5
   23bf0:	bne	238ac <_start@@Base+0xea98>
   23bf4:	mov	r4, r9
   23bf8:	b	23878 <_start@@Base+0xea64>
   23bfc:	ldr	r3, [sp, #52]	; 0x34
   23c00:	cmp	r3, #0
   23c04:	bne	23d58 <_start@@Base+0xef44>
   23c08:	ldrd	r2, [sp, #56]	; 0x38
   23c0c:	cmp	r3, #0
   23c10:	cmpeq	r2, #255	; 0xff
   23c14:	uxtbls	r2, r2
   23c18:	movls	r5, r0
   23c1c:	strbls	r2, [sp, #47]	; 0x2f
   23c20:	bls	239ec <_start@@Base+0xebd8>
   23c24:	mov	r1, r0
   23c28:	mov	r3, #7
   23c2c:	mov	r2, r6
   23c30:	mov	r0, r7
   23c34:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23c38:	mov	r5, r0
   23c3c:	cmp	r9, r5
   23c40:	bne	239e8 <_start@@Base+0xebd4>
   23c44:	mov	r4, r9
   23c48:	b	239bc <_start@@Base+0xeba8>
   23c4c:	cmp	r3, #0
   23c50:	cmpeq	r2, #127	; 0x7f
   23c54:	sxtbls	r2, r2
   23c58:	strbls	r2, [sp, #47]	; 0x2f
   23c5c:	bls	2374c <_start@@Base+0xe938>
   23c60:	mov	r1, r0
   23c64:	mov	r3, #7
   23c68:	mov	r2, r6
   23c6c:	mov	r0, r7
   23c70:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23c74:	mov	r5, r0
   23c78:	b	23af8 <_start@@Base+0xece4>
   23c7c:	cmp	r3, #0
   23c80:	cmpeq	r2, #127	; 0x7f
   23c84:	sxtbls	r2, r2
   23c88:	strbls	r2, [sp, #47]	; 0x2f
   23c8c:	bls	235a0 <_start@@Base+0xe78c>
   23c90:	mov	r1, r0
   23c94:	mov	r3, #7
   23c98:	mov	r2, r6
   23c9c:	mov	r0, r7
   23ca0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23ca4:	mov	r5, r0
   23ca8:	b	23b48 <_start@@Base+0xed34>
   23cac:	ldrb	r3, [r5, #2]
   23cb0:	cmp	r3, #32
   23cb4:	addhi	r4, r5, #2
   23cb8:	bls	23a74 <_start@@Base+0xec60>
   23cbc:	b	23a88 <_start@@Base+0xec74>
   23cc0:	mov	r3, #0
   23cc4:	add	r1, r4, #1
   23cc8:	mov	r2, r6
   23ccc:	mov	r0, r7
   23cd0:	str	r3, [sp, #48]	; 0x30
   23cd4:	bl	16ef8 <_start@@Base+0x20e4>
   23cd8:	mov	r4, r0
   23cdc:	ldr	r3, [sp, #48]	; 0x30
   23ce0:	b	233f4 <_start@@Base+0xe5e0>
   23ce4:	mov	ip, #0
   23ce8:	mov	r3, #10
   23cec:	mov	r2, r6
   23cf0:	mov	r1, r6
   23cf4:	mov	r0, r7
   23cf8:	str	ip, [sp, #48]	; 0x30
   23cfc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23d00:	mov	r4, r0
   23d04:	ldr	r3, [sp, #48]	; 0x30
   23d08:	b	233f4 <_start@@Base+0xe5e0>
   23d0c:	ldrb	r3, [r1, #1]
   23d10:	add	r2, r1, #1
   23d14:	cmp	r3, #117	; 0x75
   23d18:	bne	2339c <_start@@Base+0xe588>
   23d1c:	ldrb	r3, [r2, #1]!
   23d20:	cmp	r3, #108	; 0x6c
   23d24:	bne	2339c <_start@@Base+0xe588>
   23d28:	ldrb	r3, [r2, #1]
   23d2c:	cmp	r3, #108	; 0x6c
   23d30:	addeq	r0, r1, #4
   23d34:	bne	2339c <_start@@Base+0xe588>
   23d38:	b	23368 <_start@@Base+0xe554>
   23d3c:	mov	r1, r0
   23d40:	mov	r3, #8
   23d44:	mov	r2, r6
   23d48:	mov	r0, r7
   23d4c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23d50:	mov	r5, r0
   23d54:	b	23bec <_start@@Base+0xedd8>
   23d58:	mov	r1, r0
   23d5c:	mov	r3, #8
   23d60:	mov	r2, r6
   23d64:	mov	r0, r7
   23d68:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23d6c:	mov	r5, r0
   23d70:	b	23c3c <_start@@Base+0xee28>
   23d74:	mov	r5, r0
   23d78:	b	2377c <_start@@Base+0xe968>
   23d7c:	mov	r5, r4
   23d80:	b	23a14 <_start@@Base+0xec00>
   23d84:	ldr	r3, [r0, #8]
   23d88:	mov	r2, r6
   23d8c:	tst	r3, #1
   23d90:	bne	23da0 <_start@@Base+0xef8c>
   23d94:	mov	r3, #15
   23d98:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   23d9c:	b	23368 <_start@@Base+0xe554>
   23da0:	bl	2d678 <flatcc_json_parser_generic_json@@Base>
   23da4:	b	23368 <_start@@Base+0xe554>

00023da8 <test_json@@Base>:
   23da8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23dac:	strd	r6, [sp, #8]
   23db0:	mov	r7, r0
   23db4:	strd	r8, [sp, #16]
   23db8:	mov	r8, r1
   23dbc:	strd	sl, [sp, #24]
   23dc0:	mov	sl, r2
   23dc4:	mov	fp, r3
   23dc8:	str	lr, [sp, #32]
   23dcc:	sub	sp, sp, #388	; 0x184
   23dd0:	ldr	r6, [sp, #428]	; 0x1ac
   23dd4:	add	r4, sp, #152	; 0x98
   23dd8:	add	r5, sp, #104	; 0x68
   23ddc:	mov	r0, r4
   23de0:	bl	253ec <flatcc_builder_init@@Base>
   23de4:	mov	r1, #0
   23de8:	mov	r0, r5
   23dec:	ldr	r9, [pc, #1112]	; 2424c <test_json@@Base+0x4a4>
   23df0:	bl	3d7b4 <flatcc_json_printer_init_dynamic_buffer@@Base>
   23df4:	and	r3, r6, #1
   23df8:	tst	r6, #16
   23dfc:	ubfx	r1, r6, #1, #1
   23e00:	ubfx	r2, r6, #2, #1
   23e04:	strb	r3, [sp, #130]	; 0x82
   23e08:	ubfx	r3, r6, #3, #1
   23e0c:	add	r9, pc, r9
   23e10:	strb	r1, [sp, #131]	; 0x83
   23e14:	strb	r2, [sp, #132]	; 0x84
   23e18:	strb	r3, [sp, #133]	; 0x85
   23e1c:	movne	r3, #2
   23e20:	strbne	r3, [sp, #129]	; 0x81
   23e24:	tst	r6, #32
   23e28:	beq	23e3c <test_json@@Base+0x94>
   23e2c:	mov	r2, #2
   23e30:	mov	r3, #1
   23e34:	strh	r3, [r5, #26]
   23e38:	strb	r2, [sp, #129]	; 0x81
   23e3c:	mov	r0, r8
   23e40:	bl	14570 <strlen@plt>
   23e44:	ldr	r1, [sp, #424]	; 0x1a8
   23e48:	mov	r3, r0
   23e4c:	mov	r2, r8
   23e50:	mov	r0, r4
   23e54:	ldr	lr, [r7]
   23e58:	str	r1, [sp]
   23e5c:	add	r1, sp, #64	; 0x40
   23e60:	ldr	ip, [r7, #4]
   23e64:	str	lr, [sp, #4]
   23e68:	str	ip, [sp, #8]
   23e6c:	bl	2f7e0 <flatcc_json_parser_table_as_root@@Base>
   23e70:	cmp	r0, fp
   23e74:	bne	24088 <test_json@@Base+0x2e0>
   23e78:	cmp	fp, #0
   23e7c:	movne	r6, #0
   23e80:	movne	r7, r6
   23e84:	beq	23ec0 <test_json@@Base+0x118>
   23e88:	mov	r0, r6
   23e8c:	bl	292ec <flatcc_builder_aligned_free@@Base>
   23e90:	mov	r0, r4
   23e94:	bl	2559c <flatcc_builder_clear@@Base>
   23e98:	mov	r0, r5
   23e9c:	bl	3d8dc <flatcc_json_printer_clear@@Base>
   23ea0:	mov	r0, r7
   23ea4:	add	sp, sp, #388	; 0x184
   23ea8:	ldrd	r4, [sp]
   23eac:	ldrd	r6, [sp, #8]
   23eb0:	ldrd	r8, [sp, #16]
   23eb4:	ldrd	sl, [sp, #24]
   23eb8:	add	sp, sp, #32
   23ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   23ec0:	add	r1, sp, #36	; 0x24
   23ec4:	mov	r0, r4
   23ec8:	bl	291c0 <flatcc_builder_finalize_aligned_buffer@@Base>
   23ecc:	ldr	r2, [r7]
   23ed0:	mov	r6, r0
   23ed4:	ldr	r3, [r7, #12]
   23ed8:	ldr	r1, [sp, #36]	; 0x24
   23edc:	bl	2a8bc <flatcc_verify_table_as_root@@Base>
   23ee0:	cmp	r0, #0
   23ee4:	bne	24218 <test_json@@Base+0x470>
   23ee8:	mov	r1, r6
   23eec:	mov	r0, r5
   23ef0:	ldr	r3, [r7]
   23ef4:	ldr	ip, [r7, #8]
   23ef8:	ldr	r2, [sp, #36]	; 0x24
   23efc:	str	ip, [sp]
   23f00:	bl	3d07c <flatcc_json_printer_table_as_root@@Base>
   23f04:	add	r1, sp, #40	; 0x28
   23f08:	mov	r0, r5
   23f0c:	bl	3d85c <flatcc_json_printer_get_buffer@@Base>
   23f10:	subs	r8, r0, #0
   23f14:	beq	23f2c <test_json@@Base+0x184>
   23f18:	mov	r1, r8
   23f1c:	mov	r0, sl
   23f20:	bl	144f8 <strcmp@plt>
   23f24:	subs	r7, r0, #0
   23f28:	beq	23e88 <test_json@@Base+0xe0>
   23f2c:	ldr	r3, [pc, #796]	; 24250 <test_json@@Base+0x4a8>
   23f30:	ldr	fp, [pc, #796]	; 24254 <test_json@@Base+0x4ac>
   23f34:	ldr	r1, [pc, #796]	; 24258 <test_json@@Base+0x4b0>
   23f38:	ldr	r7, [r9, r3]
   23f3c:	add	fp, pc, fp
   23f40:	ldr	r2, [sp, #432]	; 0x1b0
   23f44:	add	r1, pc, r1
   23f48:	ldr	r0, [r7]
   23f4c:	bl	1457c <fprintf@plt>
   23f50:	mov	r2, r8
   23f54:	mov	r1, fp
   23f58:	ldr	r0, [r7]
   23f5c:	bl	1457c <fprintf@plt>
   23f60:	ldr	r0, [pc, #756]	; 2425c <test_json@@Base+0x4b4>
   23f64:	mov	r2, #10
   23f68:	mov	r1, #1
   23f6c:	ldr	r3, [r7]
   23f70:	add	r0, pc, r0
   23f74:	bl	14540 <fwrite@plt>
   23f78:	mov	r2, sl
   23f7c:	mov	r1, fp
   23f80:	ldr	r0, [r7]
   23f84:	bl	1457c <fprintf@plt>
   23f88:	cmp	r6, #0
   23f8c:	beq	24164 <test_json@@Base+0x3bc>
   23f90:	ldr	r2, [pc, #712]	; 24260 <test_json@@Base+0x4b8>
   23f94:	ldr	r1, [pc, #712]	; 24264 <test_json@@Base+0x4bc>
   23f98:	ldr	r9, [r7]
   23f9c:	add	r2, pc, r2
   23fa0:	ldr	r8, [sp, #36]	; 0x24
   23fa4:	add	r1, pc, r1
   23fa8:	mov	r0, r9
   23fac:	bl	1457c <fprintf@plt>
   23fb0:	cmp	r8, #0
   23fb4:	beq	24148 <test_json@@Base+0x3a0>
   23fb8:	add	r2, sp, #44	; 0x2c
   23fbc:	ldr	r3, [pc, #676]	; 24268 <test_json@@Base+0x4c0>
   23fc0:	mov	fp, #0
   23fc4:	sub	sl, r6, #1
   23fc8:	ldr	r1, [pc, #668]	; 2426c <test_json@@Base+0x4c4>
   23fcc:	str	r2, [sp, #16]
   23fd0:	ldr	r2, [pc, #664]	; 24270 <test_json@@Base+0x4c8>
   23fd4:	add	r3, pc, r3
   23fd8:	str	r6, [sp, #20]
   23fdc:	mov	r6, r3
   23fe0:	str	r5, [sp, #24]
   23fe4:	add	r1, pc, r1
   23fe8:	str	r4, [sp, #28]
   23fec:	mov	r4, fp
   23ff0:	mov	fp, r1
   23ff4:	add	r2, pc, r2
   23ff8:	mov	r5, r2
   23ffc:	b	24068 <test_json@@Base+0x2c0>
   24000:	cmp	r4, #0
   24004:	mov	r1, r5
   24008:	ldr	r2, [sp, #16]
   2400c:	mov	r0, r9
   24010:	beq	24018 <test_json@@Base+0x270>
   24014:	bl	1457c <fprintf@plt>
   24018:	mov	r2, r4
   2401c:	mov	r1, r6
   24020:	mov	r0, r9
   24024:	bl	1457c <fprintf@plt>
   24028:	ldrb	r2, [sl, #1]!
   2402c:	mov	r1, fp
   24030:	mov	r0, r9
   24034:	bl	1457c <fprintf@plt>
   24038:	add	r3, sp, #384	; 0x180
   2403c:	mov	r1, #0
   24040:	add	r7, r3, r7
   24044:	add	r4, r4, #1
   24048:	ldrb	r2, [sl]
   2404c:	strb	r1, [r7, #-339]	; 0xfffffead
   24050:	sub	r1, r2, #32
   24054:	cmp	r1, #94	; 0x5e
   24058:	movhi	r2, #46	; 0x2e
   2405c:	cmp	r8, r4
   24060:	strb	r2, [r7, #-340]	; 0xfffffeac
   24064:	beq	241d8 <test_json@@Base+0x430>
   24068:	ands	r7, r4, #15
   2406c:	beq	24000 <test_json@@Base+0x258>
   24070:	tst	r4, #7
   24074:	bne	24028 <test_json@@Base+0x280>
   24078:	mov	r1, r9
   2407c:	mov	r0, #32
   24080:	bl	145c4 <fputc@plt>
   24084:	b	24028 <test_json@@Base+0x280>
   24088:	ldr	r2, [pc, #448]	; 24250 <test_json@@Base+0x4a8>
   2408c:	cmp	fp, #0
   24090:	ldr	r7, [r9, r2]
   24094:	ldr	r6, [r7]
   24098:	beq	241a4 <test_json@@Base+0x3fc>
   2409c:	cmp	r0, #0
   240a0:	beq	2416c <test_json@@Base+0x3c4>
   240a4:	bl	2c200 <flatcc_json_parser_error_string@@Base>
   240a8:	ldr	r1, [pc, #452]	; 24274 <test_json@@Base+0x4cc>
   240ac:	mov	r3, r0
   240b0:	mov	r0, r6
   240b4:	ldr	r2, [sp, #432]	; 0x1b0
   240b8:	add	r1, pc, r1
   240bc:	bl	1457c <fprintf@plt>
   240c0:	mov	r0, fp
   240c4:	ldr	r6, [r7]
   240c8:	bl	2c200 <flatcc_json_parser_error_string@@Base>
   240cc:	ldr	r1, [pc, #420]	; 24278 <test_json@@Base+0x4d0>
   240d0:	mov	r2, r0
   240d4:	mov	r0, r6
   240d8:	add	r1, pc, r1
   240dc:	bl	1457c <fprintf@plt>
   240e0:	ldr	r1, [pc, #404]	; 2427c <test_json@@Base+0x4d4>
   240e4:	mov	r2, r8
   240e8:	ldr	r0, [r7]
   240ec:	add	r1, pc, r1
   240f0:	bl	1457c <fprintf@plt>
   240f4:	ldr	r3, [sp, #80]	; 0x50
   240f8:	cmp	r3, #1
   240fc:	movgt	r6, #0
   24100:	ble	24124 <test_json@@Base+0x37c>
   24104:	mov	r0, #32
   24108:	ldr	r1, [r7]
   2410c:	add	r6, r6, #1
   24110:	bl	145c4 <fputc@plt>
   24114:	ldr	r3, [sp, #80]	; 0x50
   24118:	sub	r3, r3, #1
   2411c:	cmp	r3, r6
   24120:	bgt	24104 <test_json@@Base+0x35c>
   24124:	ldr	r0, [pc, #340]	; 24280 <test_json@@Base+0x4d8>
   24128:	mov	r2, #2
   2412c:	mov	r1, #1
   24130:	mov	r6, #0
   24134:	ldr	r3, [r7]
   24138:	mvn	r7, #0
   2413c:	add	r0, pc, r0
   24140:	bl	14540 <fwrite@plt>
   24144:	b	23e88 <test_json@@Base+0xe0>
   24148:	add	r3, sp, #44	; 0x2c
   2414c:	str	r3, [sp, #16]
   24150:	ldr	r1, [pc, #300]	; 24284 <test_json@@Base+0x4dc>
   24154:	mov	r0, r9
   24158:	ldr	r2, [sp, #16]
   2415c:	add	r1, pc, r1
   24160:	bl	1457c <fprintf@plt>
   24164:	mvn	r7, #0
   24168:	b	23e88 <test_json@@Base+0xe0>
   2416c:	mov	r0, fp
   24170:	bl	2c200 <flatcc_json_parser_error_string@@Base>
   24174:	ldr	r1, [pc, #268]	; 24288 <test_json@@Base+0x4e0>
   24178:	mov	r3, r0
   2417c:	mov	r0, r6
   24180:	ldr	r2, [sp, #432]	; 0x1b0
   24184:	add	r1, pc, r1
   24188:	bl	1457c <fprintf@plt>
   2418c:	ldr	r1, [pc, #248]	; 2428c <test_json@@Base+0x4e4>
   24190:	mov	r2, r8
   24194:	ldr	r0, [r7]
   24198:	add	r1, pc, r1
   2419c:	bl	1457c <fprintf@plt>
   241a0:	b	240f4 <test_json@@Base+0x34c>
   241a4:	bl	2c200 <flatcc_json_parser_error_string@@Base>
   241a8:	ldr	r1, [pc, #224]	; 24290 <test_json@@Base+0x4e8>
   241ac:	mov	r3, r0
   241b0:	mov	r0, r6
   241b4:	ldr	r2, [sp, #432]	; 0x1b0
   241b8:	add	r1, pc, r1
   241bc:	bl	1457c <fprintf@plt>
   241c0:	ldr	r1, [pc, #204]	; 24294 <test_json@@Base+0x4ec>
   241c4:	mov	r2, r8
   241c8:	ldr	r0, [r7]
   241cc:	add	r1, pc, r1
   241d0:	bl	1457c <fprintf@plt>
   241d4:	b	240f4 <test_json@@Base+0x34c>
   241d8:	tst	r8, #15
   241dc:	ldr	r6, [sp, #20]
   241e0:	ldr	r5, [sp, #24]
   241e4:	ldr	r4, [sp, #28]
   241e8:	beq	24150 <test_json@@Base+0x3a8>
   241ec:	ldr	r7, [pc, #164]	; 24298 <test_json@@Base+0x4f0>
   241f0:	add	r7, pc, r7
   241f4:	add	r8, r8, #1
   241f8:	mov	r3, r9
   241fc:	mov	r2, #3
   24200:	mov	r1, #1
   24204:	mov	r0, r7
   24208:	bl	14540 <fwrite@plt>
   2420c:	tst	r8, #15
   24210:	bne	241f4 <test_json@@Base+0x44c>
   24214:	b	24150 <test_json@@Base+0x3a8>
   24218:	ldr	r3, [pc, #48]	; 24250 <test_json@@Base+0x4a8>
   2421c:	ldr	r7, [r9, r3]
   24220:	ldr	r8, [r7]
   24224:	bl	298e8 <flatcc_verify_error_string@@Base>
   24228:	ldr	r2, [pc, #108]	; 2429c <test_json@@Base+0x4f4>
   2422c:	str	r0, [sp]
   24230:	ldr	r1, [pc, #104]	; 242a0 <test_json@@Base+0x4f8>
   24234:	mov	r0, r8
   24238:	ldr	r3, [sp, #432]	; 0x1b0
   2423c:	add	r2, pc, r2
   24240:	add	r1, pc, r1
   24244:	bl	1457c <fprintf@plt>
   24248:	b	23f88 <test_json@@Base+0x1e0>
   2424c:	andeq	r0, r3, ip, ror #3
   24250:	andeq	r0, r0, r8, rrx
   24254:	andeq	sl, r1, r0, ror r7
   24258:	andeq	sl, r1, r0, lsr #16
   2425c:	andeq	sl, r1, ip, lsr #16
   24260:	andeq	sl, r1, ip, lsl #16
   24264:	andeq	sl, r1, r4, lsl r8
   24268:	strdeq	sl, [r1], -r4
   2426c:	andeq	sl, r1, ip, ror #15
   24270:	andeq	sl, r1, ip, asr #15
   24274:	andeq	sl, r1, r0, ror r5
   24278:	andeq	sl, r1, r8, ror r5
   2427c:	andeq	sl, r1, r0, asr #11
   24280:	muleq	r1, r8, r5
   24284:	andeq	sl, r1, r4, ror #12
   24288:	andeq	sl, r1, ip, ror #9
   2428c:	andeq	sl, r1, r4, lsl r5
   24290:	strdeq	sl, [r1], -r8
   24294:	andeq	sl, r1, r0, ror #9
   24298:	andeq	sl, r1, r8, ror #11
   2429c:	muleq	r1, ip, r4
   242a0:	strdeq	sl, [r1], -ip

000242a4 <edge_case_tests@@Base>:
   242a4:	mov	r1, #158	; 0x9e
   242a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   242ac:	mov	r4, #0
   242b0:	strd	r6, [sp, #8]
   242b4:	mov	r3, r4
   242b8:	mov	r7, #1
   242bc:	strd	r8, [sp, #16]
   242c0:	mov	r9, #2
   242c4:	str	sl, [sp, #24]
   242c8:	str	lr, [sp, #28]
   242cc:	sub	sp, sp, #16
   242d0:	ldr	r6, [pc, #428]	; 24484 <edge_case_tests@@Base+0x1e0>
   242d4:	str	r4, [sp]
   242d8:	ldr	r2, [pc, #424]	; 24488 <edge_case_tests@@Base+0x1e4>
   242dc:	str	r1, [sp, #8]
   242e0:	ldr	r1, [pc, #420]	; 2448c <edge_case_tests@@Base+0x1e8>
   242e4:	add	r6, pc, r6
   242e8:	str	r4, [sp, #4]
   242ec:	ldr	sl, [pc, #412]	; 24490 <edge_case_tests@@Base+0x1ec>
   242f0:	mov	r0, r6
   242f4:	add	r2, pc, r2
   242f8:	ldr	r8, [pc, #404]	; 24494 <edge_case_tests@@Base+0x1f0>
   242fc:	add	r1, pc, r1
   24300:	bl	23da8 <test_json@@Base>
   24304:	mov	ip, #168	; 0xa8
   24308:	add	sl, pc, sl
   2430c:	str	r9, [sp]
   24310:	mov	r3, r4
   24314:	mov	r2, sl
   24318:	add	r8, pc, r8
   2431c:	mov	r5, r0
   24320:	stmib	sp, {r4, ip}
   24324:	mov	r1, r8
   24328:	mov	r0, r6
   2432c:	bl	23da8 <test_json@@Base>
   24330:	mov	r1, #172	; 0xac
   24334:	ldr	r2, [pc, #348]	; 24498 <edge_case_tests@@Base+0x1f4>
   24338:	mov	r3, r4
   2433c:	orr	r5, r5, r0
   24340:	mov	r0, r6
   24344:	stm	sp, {r4, r9}
   24348:	str	r1, [sp, #8]
   2434c:	ldr	r1, [pc, #328]	; 2449c <edge_case_tests@@Base+0x1f8>
   24350:	add	r2, pc, r2
   24354:	add	r1, pc, r1
   24358:	bl	23da8 <test_json@@Base>
   2435c:	ldr	r2, [pc, #316]	; 244a0 <edge_case_tests@@Base+0x1fc>
   24360:	mov	lr, #4
   24364:	mov	ip, #176	; 0xb0
   24368:	mov	r1, r8
   2436c:	mov	r3, r4
   24370:	orr	r5, r5, r0
   24374:	mov	r0, r6
   24378:	stm	sp, {r9, lr}
   2437c:	str	ip, [sp, #8]
   24380:	ldr	r8, [pc, #284]	; 244a4 <edge_case_tests@@Base+0x200>
   24384:	add	r2, pc, r2
   24388:	bl	23da8 <test_json@@Base>
   2438c:	mov	ip, #180	; 0xb4
   24390:	mov	r1, #8
   24394:	ldr	r2, [pc, #268]	; 244a8 <edge_case_tests@@Base+0x204>
   24398:	mov	r3, r4
   2439c:	orr	r5, r5, r0
   243a0:	str	r4, [sp]
   243a4:	stmib	sp, {r1, ip}
   243a8:	mov	r0, r6
   243ac:	add	r8, pc, r8
   243b0:	ldr	r1, [pc, #244]	; 244ac <edge_case_tests@@Base+0x208>
   243b4:	add	r2, pc, r2
   243b8:	add	r1, pc, r1
   243bc:	bl	23da8 <test_json@@Base>
   243c0:	ldr	r1, [pc, #232]	; 244b0 <edge_case_tests@@Base+0x20c>
   243c4:	mov	ip, #195	; 0xc3
   243c8:	mov	r2, sl
   243cc:	str	r9, [sp]
   243d0:	mov	r3, r4
   243d4:	orr	r5, r5, r0
   243d8:	ldr	r9, [pc, #212]	; 244b4 <edge_case_tests@@Base+0x210>
   243dc:	mov	r0, r6
   243e0:	stmib	sp, {r4, ip}
   243e4:	add	r1, pc, r1
   243e8:	bl	23da8 <test_json@@Base>
   243ec:	mov	ip, #199	; 0xc7
   243f0:	add	r9, pc, r9
   243f4:	str	r7, [sp]
   243f8:	mov	r3, r4
   243fc:	mov	r2, r8
   24400:	mov	r1, r9
   24404:	orr	r5, r5, r0
   24408:	stmib	sp, {r4, ip}
   2440c:	mov	r0, r6
   24410:	bl	23da8 <test_json@@Base>
   24414:	ldr	r2, [pc, #156]	; 244b8 <edge_case_tests@@Base+0x214>
   24418:	mov	ip, #203	; 0xcb
   2441c:	mov	r1, r9
   24420:	mov	r3, r4
   24424:	orr	r5, r5, r0
   24428:	str	r7, [sp]
   2442c:	mov	r0, r6
   24430:	stmib	sp, {r7, ip}
   24434:	add	r2, pc, r2
   24438:	bl	23da8 <test_json@@Base>
   2443c:	ldr	r1, [pc, #120]	; 244bc <edge_case_tests@@Base+0x218>
   24440:	mov	ip, #209	; 0xd1
   24444:	orr	r5, r5, r0
   24448:	mov	r3, r4
   2444c:	mov	r2, r8
   24450:	str	r7, [sp]
   24454:	mov	r0, r6
   24458:	stmib	sp, {r4, ip}
   2445c:	add	r1, pc, r1
   24460:	bl	23da8 <test_json@@Base>
   24464:	orr	r0, r5, r0
   24468:	add	sp, sp, #16
   2446c:	ldrd	r4, [sp]
   24470:	ldrd	r6, [sp, #8]
   24474:	ldrd	r8, [sp, #16]
   24478:	ldr	sl, [sp, #24]
   2447c:	add	sp, sp, #28
   24480:	pop	{pc}		; (ldr pc, [sp], #4)
   24484:	strdeq	pc, [r2], -ip
   24488:	andeq	sl, r1, r8, ror #9
   2448c:	andeq	sl, r1, r0, lsl #10
   24490:	andeq	sl, r1, ip, lsr #10
   24494:	andeq	sl, r1, r0, asr #10
   24498:	andeq	sl, r1, ip, lsr #10
   2449c:	andeq	sl, r1, r8, asr #10
   244a0:	andeq	sl, r1, r0, asr #10
   244a4:	andeq	sl, r1, ip, lsl #13
   244a8:	andeq	sl, r1, r4, lsr #10
   244ac:	andeq	sl, r1, r4, lsr r6
   244b0:	andeq	sl, r1, ip, lsr #12
   244b4:	andeq	sl, r1, r4, ror #12
   244b8:	andeq	sl, r1, r4, asr r6
   244bc:	andeq	sl, r1, r4, asr #12

000244c0 <error_case_tests@@Base>:
   244c0:	strd	r4, [sp, #-16]!
   244c4:	movw	ip, #285	; 0x11d
   244c8:	mov	r4, #0
   244cc:	str	r6, [sp, #8]
   244d0:	mov	r2, r4
   244d4:	mov	r3, #13
   244d8:	ldr	r6, [pc, #496]	; 246d0 <error_case_tests@@Base+0x210>
   244dc:	str	lr, [sp, #12]
   244e0:	sub	sp, sp, #16
   244e4:	ldr	r1, [pc, #488]	; 246d4 <error_case_tests@@Base+0x214>
   244e8:	str	r4, [sp]
   244ec:	stmib	sp, {r4, ip}
   244f0:	add	r6, pc, r6
   244f4:	mov	r0, r6
   244f8:	add	r1, pc, r1
   244fc:	bl	23da8 <test_json@@Base>
   24500:	ldr	r1, [pc, #464]	; 246d8 <error_case_tests@@Base+0x218>
   24504:	movw	ip, #287	; 0x11f
   24508:	mov	r2, r4
   2450c:	mov	r5, r0
   24510:	mov	r3, #13
   24514:	str	r4, [sp]
   24518:	mov	r0, r6
   2451c:	stmib	sp, {r4, ip}
   24520:	add	r1, pc, r1
   24524:	bl	23da8 <test_json@@Base>
   24528:	ldr	r1, [pc, #428]	; 246dc <error_case_tests@@Base+0x21c>
   2452c:	movw	ip, #289	; 0x121
   24530:	mov	r2, r4
   24534:	orr	r5, r5, r0
   24538:	mov	r3, #13
   2453c:	str	r4, [sp]
   24540:	mov	r0, r6
   24544:	stmib	sp, {r4, ip}
   24548:	add	r1, pc, r1
   2454c:	bl	23da8 <test_json@@Base>
   24550:	ldr	r1, [pc, #392]	; 246e0 <error_case_tests@@Base+0x220>
   24554:	movw	ip, #291	; 0x123
   24558:	mov	r2, r4
   2455c:	orr	r5, r5, r0
   24560:	mov	r3, #13
   24564:	str	r4, [sp]
   24568:	mov	r0, r6
   2456c:	stmib	sp, {r4, ip}
   24570:	add	r1, pc, r1
   24574:	bl	23da8 <test_json@@Base>
   24578:	ldr	r1, [pc, #356]	; 246e4 <error_case_tests@@Base+0x224>
   2457c:	movw	ip, #293	; 0x125
   24580:	mov	r2, r4
   24584:	orr	r5, r5, r0
   24588:	mov	r3, #13
   2458c:	str	r4, [sp]
   24590:	mov	r0, r6
   24594:	stmib	sp, {r4, ip}
   24598:	add	r1, pc, r1
   2459c:	bl	23da8 <test_json@@Base>
   245a0:	ldr	r1, [pc, #320]	; 246e8 <error_case_tests@@Base+0x228>
   245a4:	mov	ip, #296	; 0x128
   245a8:	mov	r2, r4
   245ac:	orr	r5, r5, r0
   245b0:	mov	r3, #13
   245b4:	str	r4, [sp]
   245b8:	mov	r0, r6
   245bc:	stmib	sp, {r4, ip}
   245c0:	add	r1, pc, r1
   245c4:	bl	23da8 <test_json@@Base>
   245c8:	ldr	r1, [pc, #284]	; 246ec <error_case_tests@@Base+0x22c>
   245cc:	movw	ip, #299	; 0x12b
   245d0:	mov	r2, r4
   245d4:	orr	r5, r5, r0
   245d8:	mov	r3, #13
   245dc:	str	r4, [sp]
   245e0:	mov	r0, r6
   245e4:	stmib	sp, {r4, ip}
   245e8:	add	r1, pc, r1
   245ec:	bl	23da8 <test_json@@Base>
   245f0:	ldr	r1, [pc, #248]	; 246f0 <error_case_tests@@Base+0x230>
   245f4:	movw	ip, #303	; 0x12f
   245f8:	mov	r2, r4
   245fc:	orr	r5, r5, r0
   24600:	mov	r3, #13
   24604:	str	r4, [sp]
   24608:	mov	r0, r6
   2460c:	stmib	sp, {r4, ip}
   24610:	add	r1, pc, r1
   24614:	bl	23da8 <test_json@@Base>
   24618:	ldr	r1, [pc, #212]	; 246f4 <error_case_tests@@Base+0x234>
   2461c:	movw	ip, #307	; 0x133
   24620:	mov	r2, r4
   24624:	orr	r5, r5, r0
   24628:	mov	r3, #13
   2462c:	str	r4, [sp]
   24630:	mov	r0, r6
   24634:	stmib	sp, {r4, ip}
   24638:	add	r1, pc, r1
   2463c:	bl	23da8 <test_json@@Base>
   24640:	ldr	r1, [pc, #176]	; 246f8 <error_case_tests@@Base+0x238>
   24644:	movw	ip, #311	; 0x137
   24648:	mov	r2, r4
   2464c:	orr	r5, r5, r0
   24650:	mov	r3, #5
   24654:	str	r4, [sp]
   24658:	mov	r0, r6
   2465c:	stmib	sp, {r4, ip}
   24660:	add	r1, pc, r1
   24664:	bl	23da8 <test_json@@Base>
   24668:	ldr	r1, [pc, #140]	; 246fc <error_case_tests@@Base+0x23c>
   2466c:	movw	ip, #314	; 0x13a
   24670:	mov	r2, r4
   24674:	orr	r5, r5, r0
   24678:	mov	r3, #5
   2467c:	str	r4, [sp]
   24680:	mov	r0, r6
   24684:	stmib	sp, {r4, ip}
   24688:	add	r1, pc, r1
   2468c:	bl	23da8 <test_json@@Base>
   24690:	ldr	r1, [pc, #104]	; 24700 <error_case_tests@@Base+0x240>
   24694:	movw	ip, #317	; 0x13d
   24698:	orr	r5, r5, r0
   2469c:	mov	r2, r4
   246a0:	mov	r0, r6
   246a4:	str	r4, [sp]
   246a8:	mov	r3, #5
   246ac:	stmib	sp, {r4, ip}
   246b0:	add	r1, pc, r1
   246b4:	bl	23da8 <test_json@@Base>
   246b8:	orr	r0, r5, r0
   246bc:	add	sp, sp, #16
   246c0:	ldrd	r4, [sp]
   246c4:	ldr	r6, [sp, #8]
   246c8:	add	sp, sp, #12
   246cc:	pop	{pc}		; (ldr pc, [sp], #4)
   246d0:	strdeq	pc, [r2], -r0
   246d4:	andeq	sl, r1, ip, lsl r6
   246d8:	andeq	sl, r1, r0, lsl r6
   246dc:	andeq	sl, r1, ip, asr #12
   246e0:	andeq	sl, r1, r4, lsl #13
   246e4:			; <UNDEFINED> instruction: 0x0001a6b4
   246e8:	andeq	sl, r1, r4, ror #13
   246ec:	andeq	sl, r1, ip, asr r7
   246f0:	ldrdeq	sl, [r1], -r0
   246f4:	andeq	sl, r1, r0, ror r8
   246f8:	andeq	sl, r1, r0, lsl r9
   246fc:	andeq	sl, r1, r0, lsl #18
   24700:	andeq	sl, r1, r0, lsl #18

00024704 <base64_tests@@Base>:
   24704:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24708:	movw	ip, #369	; 0x171
   2470c:	mov	r4, #0
   24710:	strd	r6, [sp, #8]
   24714:	mov	r3, r4
   24718:	ldr	r6, [pc, #380]	; 2489c <base64_tests@@Base+0x198>
   2471c:	str	r8, [sp, #16]
   24720:	ldr	r2, [pc, #376]	; 248a0 <base64_tests@@Base+0x19c>
   24724:	str	lr, [sp, #20]
   24728:	sub	sp, sp, #16
   2472c:	ldr	r1, [pc, #368]	; 248a4 <base64_tests@@Base+0x1a0>
   24730:	add	r6, pc, r6
   24734:	str	r4, [sp]
   24738:	mov	r0, r6
   2473c:	stmib	sp, {r4, ip}
   24740:	add	r2, pc, r2
   24744:	ldr	r8, [pc, #348]	; 248a8 <base64_tests@@Base+0x1a4>
   24748:	add	r1, pc, r1
   2474c:	ldr	r7, [pc, #344]	; 248ac <base64_tests@@Base+0x1a8>
   24750:	bl	23da8 <test_json@@Base>
   24754:	ldr	r2, [pc, #340]	; 248b0 <base64_tests@@Base+0x1ac>
   24758:	mov	ip, #372	; 0x174
   2475c:	mov	r3, r4
   24760:	mov	r5, r0
   24764:	mov	r0, r6
   24768:	str	r4, [sp]
   2476c:	ldr	r1, [pc, #320]	; 248b4 <base64_tests@@Base+0x1b0>
   24770:	add	r8, pc, r8
   24774:	stmib	sp, {r4, ip}
   24778:	add	r7, pc, r7
   2477c:	add	r2, pc, r2
   24780:	add	r1, pc, r1
   24784:	bl	23da8 <test_json@@Base>
   24788:	mov	r1, #376	; 0x178
   2478c:	mov	r3, r4
   24790:	str	r4, [sp]
   24794:	mov	r2, r8
   24798:	orr	r5, r5, r0
   2479c:	str	r4, [sp, #4]
   247a0:	str	r1, [sp, #8]
   247a4:	mov	r0, r6
   247a8:	ldr	r1, [pc, #264]	; 248b8 <base64_tests@@Base+0x1b4>
   247ac:	add	r1, pc, r1
   247b0:	bl	23da8 <test_json@@Base>
   247b4:	movw	r1, #379	; 0x17b
   247b8:	mov	r3, r4
   247bc:	str	r4, [sp]
   247c0:	mov	r2, r7
   247c4:	orr	r5, r5, r0
   247c8:	str	r4, [sp, #4]
   247cc:	str	r1, [sp, #8]
   247d0:	mov	r0, r6
   247d4:	ldr	r1, [pc, #224]	; 248bc <base64_tests@@Base+0x1b8>
   247d8:	add	r1, pc, r1
   247dc:	bl	23da8 <test_json@@Base>
   247e0:	ldr	r1, [pc, #216]	; 248c0 <base64_tests@@Base+0x1bc>
   247e4:	movw	ip, #382	; 0x17e
   247e8:	mov	r2, r8
   247ec:	mov	r3, r4
   247f0:	orr	r5, r5, r0
   247f4:	str	r4, [sp]
   247f8:	mov	r0, r6
   247fc:	stmib	sp, {r4, ip}
   24800:	add	r1, pc, r1
   24804:	bl	23da8 <test_json@@Base>
   24808:	ldr	r1, [pc, #180]	; 248c4 <base64_tests@@Base+0x1c0>
   2480c:	movw	ip, #385	; 0x181
   24810:	mov	r2, r7
   24814:	mov	r3, r4
   24818:	orr	r5, r5, r0
   2481c:	str	r4, [sp]
   24820:	mov	r0, r6
   24824:	stmib	sp, {r4, ip}
   24828:	add	r1, pc, r1
   2482c:	bl	23da8 <test_json@@Base>
   24830:	ldr	r1, [pc, #144]	; 248c8 <base64_tests@@Base+0x1c4>
   24834:	mov	ip, #388	; 0x184
   24838:	mov	r2, r4
   2483c:	orr	r5, r5, r0
   24840:	mov	r3, #31
   24844:	str	r4, [sp]
   24848:	mov	r0, r6
   2484c:	stmib	sp, {r4, ip}
   24850:	add	r1, pc, r1
   24854:	bl	23da8 <test_json@@Base>
   24858:	ldr	r1, [pc, #108]	; 248cc <base64_tests@@Base+0x1c8>
   2485c:	movw	ip, #391	; 0x187
   24860:	orr	r5, r5, r0
   24864:	mov	r2, r4
   24868:	mov	r0, r6
   2486c:	str	r4, [sp]
   24870:	mov	r3, #32
   24874:	stmib	sp, {r4, ip}
   24878:	add	r1, pc, r1
   2487c:	bl	23da8 <test_json@@Base>
   24880:	orr	r0, r5, r0
   24884:	add	sp, sp, #16
   24888:	ldrd	r4, [sp]
   2488c:	ldrd	r6, [sp, #8]
   24890:	ldr	r8, [sp, #16]
   24894:	add	sp, sp, #20
   24898:	pop	{pc}		; (ldr pc, [sp], #4)
   2489c:			; <UNDEFINED> instruction: 0x0002f7b0
   248a0:	andeq	sl, r1, r4, lsl #3
   248a4:	andeq	sl, r1, r0, lsr #17
   248a8:	ldrdeq	sl, [r1], -ip
   248ac:	andeq	sl, r1, r4, asr #20
   248b0:	andeq	sl, r1, r4, lsl #17
   248b4:	andeq	sl, r1, r4, lsr #17
   248b8:	andeq	sl, r1, r4, asr r9
   248bc:	muleq	r1, ip, sl
   248c0:	andeq	sl, r1, r0, lsr fp
   248c4:	andeq	sl, r1, r0, asr #23
   248c8:	andeq	sl, r1, r4, asr ip
   248cc:	andeq	sl, r1, r8, ror #25

000248d0 <mixed_type_union_tests@@Base>:
   248d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   248d4:	mov	ip, #432	; 0x1b0
   248d8:	mov	r4, #0
   248dc:	strd	r6, [sp, #8]
   248e0:	mov	r3, r4
   248e4:	ldr	r6, [pc, #348]	; 24a48 <mixed_type_union_tests@@Base+0x178>
   248e8:	str	lr, [sp, #16]
   248ec:	sub	sp, sp, #20
   248f0:	ldr	r2, [pc, #340]	; 24a4c <mixed_type_union_tests@@Base+0x17c>
   248f4:	str	r4, [sp]
   248f8:	ldr	r1, [pc, #336]	; 24a50 <mixed_type_union_tests@@Base+0x180>
   248fc:	add	r6, pc, r6
   24900:	stmib	sp, {r4, ip}
   24904:	add	r6, r6, #16
   24908:	ldr	r7, [pc, #324]	; 24a54 <mixed_type_union_tests@@Base+0x184>
   2490c:	add	r2, pc, r2
   24910:	mov	r0, r6
   24914:	add	r1, pc, r1
   24918:	bl	23da8 <test_json@@Base>
   2491c:	movw	r1, #437	; 0x1b5
   24920:	add	r7, pc, r7
   24924:	str	r4, [sp]
   24928:	mov	r3, r4
   2492c:	mov	r2, r7
   24930:	str	r4, [sp, #4]
   24934:	str	r1, [sp, #8]
   24938:	mov	r5, r0
   2493c:	mov	r0, r6
   24940:	ldr	r1, [pc, #272]	; 24a58 <mixed_type_union_tests@@Base+0x188>
   24944:	add	r1, pc, r1
   24948:	bl	23da8 <test_json@@Base>
   2494c:	movw	r1, #442	; 0x1ba
   24950:	mov	r3, r4
   24954:	str	r4, [sp]
   24958:	mov	r2, r7
   2495c:	orr	r5, r5, r0
   24960:	str	r4, [sp, #4]
   24964:	str	r1, [sp, #8]
   24968:	mov	r0, r6
   2496c:	ldr	r1, [pc, #232]	; 24a5c <mixed_type_union_tests@@Base+0x18c>
   24970:	add	r1, pc, r1
   24974:	bl	23da8 <test_json@@Base>
   24978:	movw	r1, #449	; 0x1c1
   2497c:	ldr	r2, [pc, #220]	; 24a60 <mixed_type_union_tests@@Base+0x190>
   24980:	mov	r3, r4
   24984:	orr	r5, r5, r0
   24988:	mov	r0, r6
   2498c:	str	r4, [sp]
   24990:	str	r4, [sp, #4]
   24994:	str	r1, [sp, #8]
   24998:	ldr	r1, [pc, #196]	; 24a64 <mixed_type_union_tests@@Base+0x194>
   2499c:	add	r2, pc, r2
   249a0:	add	r1, pc, r1
   249a4:	bl	23da8 <test_json@@Base>
   249a8:	movw	r1, #458	; 0x1ca
   249ac:	ldr	r2, [pc, #180]	; 24a68 <mixed_type_union_tests@@Base+0x198>
   249b0:	mov	r3, r4
   249b4:	orr	r5, r5, r0
   249b8:	mov	r0, r6
   249bc:	str	r4, [sp]
   249c0:	str	r4, [sp, #4]
   249c4:	str	r1, [sp, #8]
   249c8:	ldr	r1, [pc, #156]	; 24a6c <mixed_type_union_tests@@Base+0x19c>
   249cc:	add	r2, pc, r2
   249d0:	add	r1, pc, r1
   249d4:	bl	23da8 <test_json@@Base>
   249d8:	movw	r1, #469	; 0x1d5
   249dc:	ldr	r2, [pc, #140]	; 24a70 <mixed_type_union_tests@@Base+0x1a0>
   249e0:	mov	r3, r4
   249e4:	orr	r5, r5, r0
   249e8:	mov	r0, r6
   249ec:	str	r4, [sp]
   249f0:	str	r4, [sp, #4]
   249f4:	str	r1, [sp, #8]
   249f8:	ldr	r1, [pc, #116]	; 24a74 <mixed_type_union_tests@@Base+0x1a4>
   249fc:	add	r2, pc, r2
   24a00:	add	r1, pc, r1
   24a04:	bl	23da8 <test_json@@Base>
   24a08:	ldr	r1, [pc, #104]	; 24a78 <mixed_type_union_tests@@Base+0x1a8>
   24a0c:	movw	ip, #474	; 0x1da
   24a10:	orr	r5, r5, r0
   24a14:	mov	r3, r4
   24a18:	mov	r0, r6
   24a1c:	str	r4, [sp]
   24a20:	mov	r2, r7
   24a24:	stmib	sp, {r4, ip}
   24a28:	add	r1, pc, r1
   24a2c:	bl	23da8 <test_json@@Base>
   24a30:	orr	r0, r5, r0
   24a34:	add	sp, sp, #20
   24a38:	ldrd	r4, [sp]
   24a3c:	ldrd	r6, [sp, #8]
   24a40:	add	sp, sp, #16
   24a44:	pop	{pc}		; (ldr pc, [sp], #4)
   24a48:	andeq	pc, r2, r4, ror #11
   24a4c:	andeq	sl, r1, r0, lsl sp
   24a50:	andeq	sl, r1, r0, asr sp
   24a54:	muleq	r1, r4, sp
   24a58:	andeq	sl, r1, r8, ror #27
   24a5c:	andeq	sl, r1, r0, asr #28
   24a60:	andeq	sl, r1, ip, lsr #29
   24a64:	andeq	sl, r1, r4, ror #30
   24a68:	andeq	fp, r1, r8, lsl r0
   24a6c:	strdeq	fp, [r1], -r4
   24a70:	ldrdeq	fp, [r1], -r0
   24a74:	andeq	fp, r1, r4, lsl r3
   24a78:	andeq	fp, r1, r0, ror r4

00024a7c <union_vector_tests@@Base>:
   24a7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   24a80:	movw	r2, #485	; 0x1e5
   24a84:	mov	r4, #0
   24a88:	ldr	r5, [pc, #312]	; 24bc8 <union_vector_tests@@Base+0x14c>
   24a8c:	mov	r3, r4
   24a90:	strd	r6, [sp, #8]
   24a94:	ldr	r7, [pc, #304]	; 24bcc <union_vector_tests@@Base+0x150>
   24a98:	str	lr, [sp, #16]
   24a9c:	sub	sp, sp, #20
   24aa0:	ldr	r1, [pc, #296]	; 24bd0 <union_vector_tests@@Base+0x154>
   24aa4:	add	r5, pc, r5
   24aa8:	str	r4, [sp]
   24aac:	add	r5, r5, #32
   24ab0:	str	r4, [sp, #4]
   24ab4:	add	r7, pc, r7
   24ab8:	mov	r0, r5
   24abc:	str	r2, [sp, #8]
   24ac0:	mov	r2, r7
   24ac4:	add	r1, pc, r1
   24ac8:	bl	23da8 <test_json@@Base>
   24acc:	mov	r1, #488	; 0x1e8
   24ad0:	ldr	r2, [pc, #252]	; 24bd4 <union_vector_tests@@Base+0x158>
   24ad4:	mov	r3, r4
   24ad8:	mov	r6, r0
   24adc:	mov	r0, r5
   24ae0:	str	r4, [sp]
   24ae4:	str	r4, [sp, #4]
   24ae8:	str	r1, [sp, #8]
   24aec:	ldr	r1, [pc, #228]	; 24bd8 <union_vector_tests@@Base+0x15c>
   24af0:	add	r2, pc, r2
   24af4:	add	r1, pc, r1
   24af8:	bl	23da8 <test_json@@Base>
   24afc:	movw	r1, #491	; 0x1eb
   24b00:	ldr	r2, [pc, #212]	; 24bdc <union_vector_tests@@Base+0x160>
   24b04:	mov	r3, r4
   24b08:	orr	r6, r6, r0
   24b0c:	mov	r0, r5
   24b10:	str	r4, [sp]
   24b14:	str	r4, [sp, #4]
   24b18:	str	r1, [sp, #8]
   24b1c:	ldr	r1, [pc, #188]	; 24be0 <union_vector_tests@@Base+0x164>
   24b20:	add	r2, pc, r2
   24b24:	add	r1, pc, r1
   24b28:	bl	23da8 <test_json@@Base>
   24b2c:	movw	r1, #494	; 0x1ee
   24b30:	ldr	r2, [pc, #172]	; 24be4 <union_vector_tests@@Base+0x168>
   24b34:	mov	r3, r4
   24b38:	orr	r6, r6, r0
   24b3c:	mov	r0, r5
   24b40:	str	r4, [sp]
   24b44:	str	r4, [sp, #4]
   24b48:	str	r1, [sp, #8]
   24b4c:	ldr	r1, [pc, #148]	; 24be8 <union_vector_tests@@Base+0x16c>
   24b50:	add	r2, pc, r2
   24b54:	add	r1, pc, r1
   24b58:	bl	23da8 <test_json@@Base>
   24b5c:	ldr	r1, [pc, #136]	; 24bec <union_vector_tests@@Base+0x170>
   24b60:	movw	ip, #497	; 0x1f1
   24b64:	mov	r2, r7
   24b68:	mov	r3, r4
   24b6c:	orr	r6, r6, r0
   24b70:	str	r4, [sp]
   24b74:	mov	r0, r5
   24b78:	stmib	sp, {r4, ip}
   24b7c:	add	r1, pc, r1
   24b80:	bl	23da8 <test_json@@Base>
   24b84:	ldr	r2, [pc, #100]	; 24bf0 <union_vector_tests@@Base+0x174>
   24b88:	mov	ip, #500	; 0x1f4
   24b8c:	orr	r6, r6, r0
   24b90:	mov	r3, r4
   24b94:	mov	r0, r5
   24b98:	str	r4, [sp]
   24b9c:	ldr	r1, [pc, #80]	; 24bf4 <union_vector_tests@@Base+0x178>
   24ba0:	stmib	sp, {r4, ip}
   24ba4:	add	r2, pc, r2
   24ba8:	add	r1, pc, r1
   24bac:	bl	23da8 <test_json@@Base>
   24bb0:	orr	r0, r6, r0
   24bb4:	add	sp, sp, #20
   24bb8:	ldrd	r4, [sp]
   24bbc:	ldrd	r6, [sp, #8]
   24bc0:	add	sp, sp, #16
   24bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   24bc8:	andeq	pc, r2, ip, lsr r4	; <UNPREDICTABLE>
   24bcc:	andeq	fp, r1, r4, ror r4
   24bd0:	muleq	r1, ip, r4
   24bd4:			; <UNDEFINED> instruction: 0x0001b4b0
   24bd8:	ldrdeq	fp, [r1], -r8
   24bdc:	andeq	fp, r1, r0, ror #9
   24be0:	andeq	fp, r1, r0, lsr #10
   24be4:	andeq	fp, r1, r4, asr #10
   24be8:	andeq	fp, r1, ip, lsr #11
   24bec:	andeq	fp, r1, r4, lsl #12
   24bf0:	andeq	fp, r1, ip, lsl r6
   24bf4:	andeq	fp, r1, r4, ror r6
   24bf8:	strd	r4, [sp, #-16]!
   24bfc:	mov	r4, r0
   24c00:	mov	r0, #1
   24c04:	ldr	ip, [r4, #28]
   24c08:	mov	r3, r0
   24c0c:	mov	r5, r2
   24c10:	str	r6, [sp, #8]
   24c14:	str	lr, [sp, #12]
   24c18:	sub	sp, sp, #8
   24c1c:	str	r0, [sp]
   24c20:	add	r2, r1, ip
   24c24:	add	r1, r4, #60	; 0x3c
   24c28:	ldr	r0, [r4, #40]	; 0x28
   24c2c:	ldr	r6, [r4, #48]	; 0x30
   24c30:	blx	r6
   24c34:	cmp	r0, #0
   24c38:	bne	24c78 <union_vector_tests@@Base+0x1fc>
   24c3c:	ldr	r1, [r4, #28]
   24c40:	ldr	ip, [r4, #32]
   24c44:	ldrd	r2, [r4, #60]	; 0x3c
   24c48:	sub	r3, r3, r1
   24c4c:	add	r2, r2, r1
   24c50:	cmp	r3, r5
   24c54:	movcs	r3, r5
   24c58:	str	r2, [r4, #16]
   24c5c:	str	r3, [r4, #24]
   24c60:	str	r5, [ip, #4]
   24c64:	add	sp, sp, #8
   24c68:	ldrd	r4, [sp]
   24c6c:	ldr	r6, [sp, #8]
   24c70:	add	sp, sp, #12
   24c74:	pop	{pc}		; (ldr pc, [sp], #4)
   24c78:	mvn	r0, #0
   24c7c:	b	24c64 <union_vector_tests@@Base+0x1e8>

00024c80 <flatcc_builder_default_alloc@@Base>:
   24c80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24c84:	subs	r5, r2, #0
   24c88:	strd	r6, [sp, #8]
   24c8c:	mov	r6, r1
   24c90:	str	r8, [sp, #16]
   24c94:	str	lr, [sp, #20]
   24c98:	beq	24cd0 <flatcc_builder_default_alloc@@Base+0x50>
   24c9c:	mov	r7, r3
   24ca0:	ldr	r3, [sp, #24]
   24ca4:	sub	r2, r3, #1
   24ca8:	cmp	r2, #6
   24cac:	addls	pc, pc, r2, lsl #2
   24cb0:	b	24d80 <flatcc_builder_default_alloc@@Base+0x100>
   24cb4:	b	24d00 <flatcc_builder_default_alloc@@Base+0x80>
   24cb8:	b	24d80 <flatcc_builder_default_alloc@@Base+0x100>
   24cbc:	b	24d80 <flatcc_builder_default_alloc@@Base+0x100>
   24cc0:	b	24d78 <flatcc_builder_default_alloc@@Base+0xf8>
   24cc4:	b	24d68 <flatcc_builder_default_alloc@@Base+0xe8>
   24cc8:	b	24d80 <flatcc_builder_default_alloc@@Base+0x100>
   24ccc:	b	24d70 <flatcc_builder_default_alloc@@Base+0xf0>
   24cd0:	ldr	r0, [r1]
   24cd4:	cmp	r0, #0
   24cd8:	beq	24cec <flatcc_builder_default_alloc@@Base+0x6c>
   24cdc:	bl	14510 <free@plt>
   24ce0:	mov	r0, r5
   24ce4:	str	r5, [r6]
   24ce8:	str	r5, [r6, #4]
   24cec:	ldrd	r4, [sp]
   24cf0:	ldrd	r6, [sp, #8]
   24cf4:	ldr	r8, [sp, #16]
   24cf8:	add	sp, sp, #20
   24cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   24d00:	mov	r4, #256	; 0x100
   24d04:	cmp	r4, r5
   24d08:	bcs	24d18 <flatcc_builder_default_alloc@@Base+0x98>
   24d0c:	lsl	r4, r4, #1
   24d10:	cmp	r5, r4
   24d14:	bhi	24d0c <flatcc_builder_default_alloc@@Base+0x8c>
   24d18:	ldr	r2, [r6, #4]
   24d1c:	cmp	r5, r2
   24d20:	bhi	24d30 <flatcc_builder_default_alloc@@Base+0xb0>
   24d24:	cmp	r4, r2, lsr #1
   24d28:	movls	r0, #0
   24d2c:	bls	24cec <flatcc_builder_default_alloc@@Base+0x6c>
   24d30:	mov	r1, r4
   24d34:	ldr	r0, [r6]
   24d38:	bl	14534 <realloc@plt>
   24d3c:	subs	r5, r0, #0
   24d40:	beq	24d9c <flatcc_builder_default_alloc@@Base+0x11c>
   24d44:	cmp	r7, #0
   24d48:	beq	24d58 <flatcc_builder_default_alloc@@Base+0xd8>
   24d4c:	ldr	r0, [r6, #4]
   24d50:	cmp	r0, r4
   24d54:	bcc	24d88 <flatcc_builder_default_alloc@@Base+0x108>
   24d58:	mov	r0, #0
   24d5c:	str	r5, [r6]
   24d60:	str	r4, [r6, #4]
   24d64:	b	24cec <flatcc_builder_default_alloc@@Base+0x6c>
   24d68:	mov	r4, r5
   24d6c:	b	24d18 <flatcc_builder_default_alloc@@Base+0x98>
   24d70:	mov	r4, #64	; 0x40
   24d74:	b	24d04 <flatcc_builder_default_alloc@@Base+0x84>
   24d78:	mov	r4, #288	; 0x120
   24d7c:	b	24d04 <flatcc_builder_default_alloc@@Base+0x84>
   24d80:	mov	r4, #32
   24d84:	b	24d04 <flatcc_builder_default_alloc@@Base+0x84>
   24d88:	sub	r2, r4, r0
   24d8c:	mov	r1, #0
   24d90:	add	r0, r5, r0
   24d94:	bl	14594 <memset@plt>
   24d98:	b	24d58 <flatcc_builder_default_alloc@@Base+0xd8>
   24d9c:	mvn	r0, #0
   24da0:	b	24cec <flatcc_builder_default_alloc@@Base+0x6c>
   24da4:	ldr	r3, [pc, #32]	; 24dcc <flatcc_builder_default_alloc@@Base+0x14c>
   24da8:	mov	r2, #308	; 0x134
   24dac:	str	r4, [sp, #-8]!
   24db0:	ldr	r1, [pc, #24]	; 24dd0 <flatcc_builder_default_alloc@@Base+0x150>
   24db4:	str	lr, [sp, #4]
   24db8:	ldr	r0, [pc, #20]	; 24dd4 <flatcc_builder_default_alloc@@Base+0x154>
   24dbc:	add	r3, pc, r3
   24dc0:	add	r1, pc, r1
   24dc4:	add	r0, pc, r0
   24dc8:	bl	145e8 <__assert_fail@plt>
   24dcc:	strdeq	ip, [r1], -r0
   24dd0:	andeq	ip, r1, ip, lsr ip
   24dd4:	andeq	ip, r1, r0, asr #25
   24dd8:	ldr	r3, [pc, #36]	; 24e04 <flatcc_builder_default_alloc@@Base+0x184>
   24ddc:	movw	r2, #677	; 0x2a5
   24de0:	str	r4, [sp, #-8]!
   24de4:	ldr	r1, [pc, #28]	; 24e08 <flatcc_builder_default_alloc@@Base+0x188>
   24de8:	str	lr, [sp, #4]
   24dec:	ldr	r0, [pc, #24]	; 24e0c <flatcc_builder_default_alloc@@Base+0x18c>
   24df0:	add	r3, pc, r3
   24df4:	add	r3, r3, #16
   24df8:	add	r1, pc, r1
   24dfc:	add	r0, pc, r0
   24e00:	bl	145e8 <__assert_fail@plt>
   24e04:			; <UNDEFINED> instruction: 0x0001c4bc
   24e08:	andeq	ip, r1, r4, lsl #24
   24e0c:	andeq	ip, r1, r8, lsl #25
   24e10:	strd	r4, [sp, #-12]!
   24e14:	cmp	r2, #0
   24e18:	mov	ip, r0
   24e1c:	str	lr, [sp, #8]
   24e20:	sub	sp, sp, #84	; 0x54
   24e24:	ldr	lr, [pc, #248]	; 24f24 <flatcc_builder_default_alloc@@Base+0x2a4>
   24e28:	add	lr, pc, lr
   24e2c:	bne	24e3c <flatcc_builder_default_alloc@@Base+0x1bc>
   24e30:	ldrh	r2, [r0, #132]	; 0x84
   24e34:	cmp	r2, #0
   24e38:	moveq	r2, #1
   24e3c:	ldrh	r0, [r1]
   24e40:	cmp	r0, #3
   24e44:	bhi	24e54 <flatcc_builder_default_alloc@@Base+0x1d4>
   24e48:	mov	r4, #4
   24e4c:	mov	r0, r4
   24e50:	strh	r4, [r1]
   24e54:	cmp	r2, r0
   24e58:	strhhi	r2, [r1]
   24e5c:	cmp	r3, #0
   24e60:	bne	24e74 <flatcc_builder_default_alloc@@Base+0x1f4>
   24e64:	ldr	r4, [ip, #140]	; 0x8c
   24e68:	sub	r2, r2, #1
   24e6c:	ands	r1, r2, r4
   24e70:	bne	24e88 <flatcc_builder_default_alloc@@Base+0x208>
   24e74:	mov	r0, #0
   24e78:	add	sp, sp, #84	; 0x54
   24e7c:	ldrd	r4, [sp]
   24e80:	add	sp, sp, #8
   24e84:	pop	{pc}		; (ldr pc, [sp], #4)
   24e88:	ldr	r3, [pc, #152]	; 24f28 <flatcc_builder_default_alloc@@Base+0x2a8>
   24e8c:	add	r0, r4, r1
   24e90:	mov	r2, #1
   24e94:	str	r1, [sp, #8]
   24e98:	cmp	r4, r0
   24e9c:	ldr	r3, [lr, r3]
   24ea0:	str	r0, [ip, #140]	; 0x8c
   24ea4:	strd	r2, [sp, #12]
   24ea8:	str	r1, [sp, #20]
   24eac:	bgt	24f00 <flatcc_builder_default_alloc@@Base+0x280>
   24eb0:	mov	r3, r4
   24eb4:	str	r1, [sp]
   24eb8:	add	r1, sp, #16
   24ebc:	ldr	r0, [ip, #36]	; 0x24
   24ec0:	ldr	r5, [ip, #44]	; 0x2c
   24ec4:	blx	r5
   24ec8:	cmp	r0, #0
   24ecc:	bne	24efc <flatcc_builder_default_alloc@@Base+0x27c>
   24ed0:	cmn	r4, #1
   24ed4:	bne	24e74 <flatcc_builder_default_alloc@@Base+0x1f4>
   24ed8:	ldr	r3, [pc, #76]	; 24f2c <flatcc_builder_default_alloc@@Base+0x2ac>
   24edc:	movw	r2, #702	; 0x2be
   24ee0:	ldr	r1, [pc, #72]	; 24f30 <flatcc_builder_default_alloc@@Base+0x2b0>
   24ee4:	ldr	r0, [pc, #72]	; 24f34 <flatcc_builder_default_alloc@@Base+0x2b4>
   24ee8:	add	r3, pc, r3
   24eec:	add	r3, r3, #28
   24ef0:	add	r1, pc, r1
   24ef4:	add	r0, pc, r0
   24ef8:	bl	145e8 <__assert_fail@plt>
   24efc:	bl	24dd8 <flatcc_builder_default_alloc@@Base+0x158>
   24f00:	ldr	r3, [pc, #48]	; 24f38 <flatcc_builder_default_alloc@@Base+0x2b8>
   24f04:	movw	r2, #673	; 0x2a1
   24f08:	ldr	r1, [pc, #44]	; 24f3c <flatcc_builder_default_alloc@@Base+0x2bc>
   24f0c:	ldr	r0, [pc, #44]	; 24f40 <flatcc_builder_default_alloc@@Base+0x2c0>
   24f10:	add	r3, pc, r3
   24f14:	add	r3, r3, #16
   24f18:	add	r1, pc, r1
   24f1c:	add	r0, pc, r0
   24f20:	bl	145e8 <__assert_fail@plt>
   24f24:	ldrdeq	pc, [r2], -r0
   24f28:	andeq	r0, r0, r4, rrx
   24f2c:	andeq	ip, r1, r4, asr #7
   24f30:	andeq	ip, r1, ip, lsl #22
   24f34:	muleq	r1, r0, fp
   24f38:	muleq	r1, ip, r3
   24f3c:	andeq	ip, r1, r4, ror #21
   24f40:	andeq	ip, r1, r8, ror #22
   24f44:	ldr	r3, [pc, #36]	; 24f70 <flatcc_builder_default_alloc@@Base+0x2f0>
   24f48:	movw	r2, #651	; 0x28b
   24f4c:	str	r4, [sp, #-8]!
   24f50:	ldr	r1, [pc, #28]	; 24f74 <flatcc_builder_default_alloc@@Base+0x2f4>
   24f54:	str	lr, [sp, #4]
   24f58:	ldr	r0, [pc, #24]	; 24f78 <flatcc_builder_default_alloc@@Base+0x2f8>
   24f5c:	add	r3, pc, r3
   24f60:	add	r3, r3, #44	; 0x2c
   24f64:	add	r1, pc, r1
   24f68:	add	r0, pc, r0
   24f6c:	bl	145e8 <__assert_fail@plt>
   24f70:	andeq	ip, r1, r0, asr r3
   24f74:	muleq	r1, r8, sl
   24f78:	andeq	ip, r1, ip, lsl fp
   24f7c:	ldr	r3, [pc, #36]	; 24fa8 <flatcc_builder_default_alloc@@Base+0x328>
   24f80:	mov	r2, #892	; 0x37c
   24f84:	str	r4, [sp, #-8]!
   24f88:	ldr	r1, [pc, #28]	; 24fac <flatcc_builder_default_alloc@@Base+0x32c>
   24f8c:	str	lr, [sp, #4]
   24f90:	ldr	r0, [pc, #24]	; 24fb0 <flatcc_builder_default_alloc@@Base+0x330>
   24f94:	add	r3, pc, r3
   24f98:	add	r3, r3, #56	; 0x38
   24f9c:	add	r1, pc, r1
   24fa0:	add	r0, pc, r0
   24fa4:	bl	145e8 <__assert_fail@plt>
   24fa8:	andeq	ip, r1, r8, lsl r3
   24fac:	andeq	ip, r1, r0, ror #20
   24fb0:			; <UNDEFINED> instruction: 0x0001cabc
   24fb4:	ldrd	r2, [r0, #156]	; 0x9c
   24fb8:	strd	r4, [sp, #-20]!	; 0xffffffec
   24fbc:	mov	r5, r1
   24fc0:	mov	r4, r0
   24fc4:	strd	r6, [sp, #8]
   24fc8:	str	lr, [sp, #16]
   24fcc:	sub	sp, sp, #12
   24fd0:	add	r1, r2, #1
   24fd4:	cmp	r1, r3
   24fd8:	str	r1, [r0, #156]	; 0x9c
   24fdc:	ble	250bc <flatcc_builder_default_alloc@@Base+0x43c>
   24fe0:	ldr	r3, [r0, #176]	; 0xb0
   24fe4:	cmp	r1, r3
   24fe8:	cmpgt	r3, #0
   24fec:	movgt	r3, #1
   24ff0:	movle	r3, #0
   24ff4:	bgt	250cc <flatcc_builder_default_alloc@@Base+0x44c>
   24ff8:	add	r2, r2, r2, lsl #3
   24ffc:	ldr	r1, [r0, #88]	; 0x58
   25000:	lsl	r6, r2, #2
   25004:	add	r2, r6, #36	; 0x24
   25008:	cmp	r2, r1
   2500c:	bls	25030 <flatcc_builder_default_alloc@@Base+0x3b0>
   25010:	mov	ip, #4
   25014:	add	r1, r0, #84	; 0x54
   25018:	ldr	r0, [r0, #40]	; 0x28
   2501c:	str	ip, [sp]
   25020:	ldr	r7, [r4, #48]	; 0x30
   25024:	blx	r7
   25028:	cmp	r0, #0
   2502c:	bne	250d4 <flatcc_builder_default_alloc@@Base+0x454>
   25030:	ldr	r2, [r4, #84]	; 0x54
   25034:	add	r2, r2, r6
   25038:	cmp	r2, #0
   2503c:	str	r2, [r4, #32]
   25040:	beq	250cc <flatcc_builder_default_alloc@@Base+0x44c>
   25044:	ldr	r3, [r4, #88]	; 0x58
   25048:	movw	r0, #36409	; 0x8e39
   2504c:	movt	r0, #14563	; 0x38e3
   25050:	ldr	r1, [r4, #176]	; 0xb0
   25054:	umull	r0, r3, r0, r3
   25058:	lsr	r3, r3, #3
   2505c:	cmp	r3, r1
   25060:	cmpgt	r1, #0
   25064:	movgt	r3, r1
   25068:	str	r3, [r4, #160]	; 0xa0
   2506c:	ldr	r3, [r4, #20]
   25070:	mov	r1, #0
   25074:	mvn	lr, #3
   25078:	mov	r0, r1
   2507c:	ldr	ip, [r4, #28]
   25080:	ldrh	r6, [r4, #130]	; 0x82
   25084:	str	r3, [r2, #8]
   25088:	add	r3, r3, ip
   2508c:	add	r3, r3, #7
   25090:	bic	r3, r3, #7
   25094:	strh	r6, [r2, #12]
   25098:	strh	r5, [r4, #130]	; 0x82
   2509c:	stm	r2, {ip, lr}
   250a0:	str	r1, [r4, #20]
   250a4:	str	r3, [r4, #28]
   250a8:	add	sp, sp, #12
   250ac:	ldrd	r4, [sp]
   250b0:	ldrd	r6, [sp, #8]
   250b4:	add	sp, sp, #16
   250b8:	pop	{pc}		; (ldr pc, [sp], #4)
   250bc:	ldr	r2, [r0, #32]
   250c0:	add	r2, r2, #36	; 0x24
   250c4:	str	r2, [r0, #32]
   250c8:	b	2506c <flatcc_builder_default_alloc@@Base+0x3ec>
   250cc:	mvn	r0, #0
   250d0:	b	250a8 <flatcc_builder_default_alloc@@Base+0x428>
   250d4:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>
   250d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   250dc:	mov	r4, r0
   250e0:	mov	r5, #4
   250e4:	ldrh	r0, [r0, #128]	; 0x80
   250e8:	strd	r6, [sp, #8]
   250ec:	str	lr, [sp, #16]
   250f0:	sub	sp, sp, #92	; 0x5c
   250f4:	ldr	lr, [pc, #464]	; 252cc <flatcc_builder_default_alloc@@Base+0x64c>
   250f8:	str	r2, [sp, #12]
   250fc:	cmp	r0, #3
   25100:	ldr	r6, [r4, #136]	; 0x88
   25104:	movls	r0, #4
   25108:	str	r5, [sp, #16]
   2510c:	str	r5, [sp, #28]
   25110:	strhls	r0, [r4, #128]	; 0x80
   25114:	mov	r0, #1
   25118:	lsls	ip, r2, #2
   2511c:	add	lr, pc, lr
   25120:	str	r0, [sp, #20]
   25124:	add	r0, sp, #12
   25128:	str	r0, [sp, #24]
   2512c:	and	r0, r6, #3
   25130:	beq	2514c <flatcc_builder_default_alloc@@Base+0x4cc>
   25134:	add	r5, ip, r5
   25138:	mov	r7, #2
   2513c:	str	r5, [sp, #16]
   25140:	str	r7, [sp, #20]
   25144:	str	r1, [sp, #32]
   25148:	str	ip, [sp, #36]	; 0x24
   2514c:	cmp	r0, #0
   25150:	beq	25180 <flatcc_builder_default_alloc@@Base+0x500>
   25154:	ldr	r7, [pc, #372]	; 252d0 <flatcc_builder_default_alloc@@Base+0x650>
   25158:	add	r5, r5, r0
   2515c:	ldr	ip, [sp, #20]
   25160:	str	r5, [sp, #16]
   25164:	ldr	r7, [lr, r7]
   25168:	add	lr, sp, #88	; 0x58
   2516c:	add	ip, ip, #1
   25170:	add	lr, lr, ip, lsl #3
   25174:	str	ip, [sp, #20]
   25178:	str	r7, [lr, #-72]	; 0xffffffb8
   2517c:	str	r0, [lr, #-68]	; 0xffffffbc
   25180:	cmp	r2, #0
   25184:	beq	25210 <flatcc_builder_default_alloc@@Base+0x590>
   25188:	sub	r6, r1, r6
   2518c:	add	lr, r2, r3
   25190:	add	r6, r6, r5
   25194:	mov	r2, r3
   25198:	b	251c8 <flatcc_builder_default_alloc@@Base+0x548>
   2519c:	sub	r0, r6, r1
   251a0:	cmp	r3, #0
   251a4:	add	r0, r0, ip
   251a8:	str	r0, [r1, #-4]
   251ac:	beq	251bc <flatcc_builder_default_alloc@@Base+0x53c>
   251b0:	ldrb	r0, [r2]
   251b4:	cmp	r0, #0
   251b8:	beq	25280 <flatcc_builder_default_alloc@@Base+0x600>
   251bc:	add	r2, r2, #1
   251c0:	cmp	lr, r2
   251c4:	beq	2520c <flatcc_builder_default_alloc@@Base+0x58c>
   251c8:	ldr	ip, [r1], #4
   251cc:	cmp	ip, #0
   251d0:	bne	2519c <flatcc_builder_default_alloc@@Base+0x51c>
   251d4:	cmp	r3, #0
   251d8:	beq	2525c <flatcc_builder_default_alloc@@Base+0x5dc>
   251dc:	ldrb	r0, [r2]
   251e0:	cmp	r0, #0
   251e4:	beq	251bc <flatcc_builder_default_alloc@@Base+0x53c>
   251e8:	ldr	r3, [pc, #228]	; 252d4 <flatcc_builder_default_alloc@@Base+0x654>
   251ec:	movw	r2, #1461	; 0x5b5
   251f0:	ldr	r1, [pc, #224]	; 252d8 <flatcc_builder_default_alloc@@Base+0x658>
   251f4:	ldr	r0, [pc, #224]	; 252dc <flatcc_builder_default_alloc@@Base+0x65c>
   251f8:	add	r3, pc, r3
   251fc:	add	r3, r3, #76	; 0x4c
   25200:	add	r1, pc, r1
   25204:	add	r0, pc, r0
   25208:	bl	145e8 <__assert_fail@plt>
   2520c:	ldr	r6, [r4, #136]	; 0x88
   25210:	sub	r7, r6, r5
   25214:	cmp	r7, r6
   25218:	bge	252a8 <flatcc_builder_default_alloc@@Base+0x628>
   2521c:	mov	r3, r7
   25220:	add	r1, sp, #24
   25224:	str	r5, [sp]
   25228:	ldr	r2, [sp, #20]
   2522c:	ldr	r0, [r4, #36]	; 0x24
   25230:	ldr	r5, [r4, #44]	; 0x2c
   25234:	blx	r5
   25238:	cmp	r0, #0
   2523c:	bne	252a4 <flatcc_builder_default_alloc@@Base+0x624>
   25240:	mov	r0, r7
   25244:	str	r7, [r4, #136]	; 0x88
   25248:	add	sp, sp, #92	; 0x5c
   2524c:	ldrd	r4, [sp]
   25250:	ldrd	r6, [sp, #8]
   25254:	add	sp, sp, #16
   25258:	pop	{pc}		; (ldr pc, [sp], #4)
   2525c:	ldr	r3, [pc, #124]	; 252e0 <flatcc_builder_default_alloc@@Base+0x660>
   25260:	movw	r2, #1463	; 0x5b7
   25264:	ldr	r1, [pc, #120]	; 252e4 <flatcc_builder_default_alloc@@Base+0x664>
   25268:	ldr	r0, [pc, #120]	; 252e8 <flatcc_builder_default_alloc@@Base+0x668>
   2526c:	add	r3, pc, r3
   25270:	add	r3, r3, #76	; 0x4c
   25274:	add	r1, pc, r1
   25278:	add	r0, pc, r0
   2527c:	bl	145e8 <__assert_fail@plt>
   25280:	ldr	r3, [pc, #100]	; 252ec <flatcc_builder_default_alloc@@Base+0x66c>
   25284:	movw	r2, #1457	; 0x5b1
   25288:	ldr	r1, [pc, #96]	; 252f0 <flatcc_builder_default_alloc@@Base+0x670>
   2528c:	ldr	r0, [pc, #96]	; 252f4 <flatcc_builder_default_alloc@@Base+0x674>
   25290:	add	r3, pc, r3
   25294:	add	r3, r3, #76	; 0x4c
   25298:	add	r1, pc, r1
   2529c:	add	r0, pc, r0
   252a0:	bl	145e8 <__assert_fail@plt>
   252a4:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   252a8:	ldr	r3, [pc, #72]	; 252f8 <flatcc_builder_default_alloc@@Base+0x678>
   252ac:	movw	r2, #647	; 0x287
   252b0:	ldr	r1, [pc, #68]	; 252fc <flatcc_builder_default_alloc@@Base+0x67c>
   252b4:	ldr	r0, [pc, #68]	; 25300 <flatcc_builder_default_alloc@@Base+0x680>
   252b8:	add	r3, pc, r3
   252bc:	add	r3, r3, #44	; 0x2c
   252c0:	add	r1, pc, r1
   252c4:	add	r0, pc, r0
   252c8:	bl	145e8 <__assert_fail@plt>
   252cc:	ldrdeq	lr, [r2], -ip
   252d0:	andeq	r0, r0, r4, rrx
   252d4:	strheq	ip, [r1], -r4
   252d8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   252dc:	andeq	ip, r1, r4, lsl #17
   252e0:	andeq	ip, r1, r0, asr #32
   252e4:	andeq	ip, r1, r8, lsl #15
   252e8:	andeq	ip, r1, ip, lsl #16
   252ec:	andeq	ip, r1, ip, lsl r0
   252f0:	andeq	ip, r1, r4, ror #14
   252f4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   252f8:	strdeq	fp, [r1], -r4
   252fc:	andeq	ip, r1, ip, lsr r7
   25300:	andeq	ip, r1, r0, asr #15

00025304 <flatcc_builder_flush_vtable_cache@@Base>:
   25304:	ldr	r3, [r0, #116]	; 0x74
   25308:	cmp	r3, #0
   2530c:	bxeq	lr
   25310:	str	r4, [sp, #-8]!
   25314:	mov	r4, r0
   25318:	mov	r1, #0
   2531c:	ldr	r0, [r0, #92]	; 0x5c
   25320:	ldr	r2, [r4, #96]	; 0x60
   25324:	str	lr, [sp, #4]
   25328:	bl	14594 <memset@plt>
   2532c:	mov	r3, #16
   25330:	mov	r2, #0
   25334:	strd	r2, [r4, #120]	; 0x78
   25338:	ldr	r4, [sp]
   2533c:	add	sp, sp, #4
   25340:	pop	{pc}		; (ldr pc, [sp], #4)

00025344 <flatcc_builder_custom_init@@Base>:
   25344:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25348:	mov	r5, r3
   2534c:	mov	r4, r0
   25350:	strd	r6, [sp, #8]
   25354:	mov	r6, r1
   25358:	mov	r1, #0
   2535c:	ldr	r7, [pc, #124]	; 253e0 <flatcc_builder_custom_init@@Base+0x9c>
   25360:	strd	r8, [sp, #16]
   25364:	mov	r8, r2
   25368:	mov	r2, #232	; 0xe8
   2536c:	str	sl, [sp, #24]
   25370:	str	lr, [sp, #28]
   25374:	ldr	r9, [sp, #32]
   25378:	bl	14594 <memset@plt>
   2537c:	cmp	r6, #0
   25380:	add	r7, pc, r7
   25384:	beq	253b8 <flatcc_builder_custom_init@@Base+0x74>
   25388:	cmp	r5, #0
   2538c:	beq	253d4 <flatcc_builder_custom_init@@Base+0x90>
   25390:	ldr	sl, [sp, #24]
   25394:	mov	r0, #0
   25398:	strd	r8, [r4, #36]	; 0x24
   2539c:	str	r6, [r4, #44]	; 0x2c
   253a0:	str	r5, [r4, #48]	; 0x30
   253a4:	ldrd	r4, [sp]
   253a8:	ldrd	r6, [sp, #8]
   253ac:	ldrd	r8, [sp, #16]
   253b0:	add	sp, sp, #28
   253b4:	pop	{pc}		; (ldr pc, [sp], #4)
   253b8:	ldr	r3, [pc, #36]	; 253e4 <flatcc_builder_custom_init@@Base+0xa0>
   253bc:	mov	r2, #1
   253c0:	cmp	r5, #0
   253c4:	add	r8, r4, #188	; 0xbc
   253c8:	str	r2, [r4, #184]	; 0xb8
   253cc:	ldr	r6, [r7, r3]
   253d0:	bne	25390 <flatcc_builder_custom_init@@Base+0x4c>
   253d4:	ldr	r3, [pc, #12]	; 253e8 <flatcc_builder_custom_init@@Base+0xa4>
   253d8:	ldr	r5, [r7, r3]
   253dc:	b	25390 <flatcc_builder_custom_init@@Base+0x4c>
   253e0:	andeq	lr, r2, r8, ror ip
   253e4:	andeq	r0, r0, r8, ror r0
   253e8:	andeq	r0, r0, r0, ror r0

000253ec <flatcc_builder_init@@Base>:
   253ec:	mov	ip, #0
   253f0:	push	{lr}		; (str lr, [sp, #-4]!)
   253f4:	sub	sp, sp, #12
   253f8:	mov	r3, ip
   253fc:	mov	r2, ip
   25400:	mov	r1, ip
   25404:	str	ip, [sp]
   25408:	bl	25344 <flatcc_builder_custom_init@@Base>
   2540c:	add	sp, sp, #12
   25410:	pop	{pc}		; (ldr pc, [sp], #4)

00025414 <flatcc_builder_custom_reset@@Base>:
   25414:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25418:	mov	r5, #0
   2541c:	mov	r4, r0
   25420:	strd	r6, [sp, #8]
   25424:	mov	r6, r0
   25428:	strd	r8, [sp, #16]
   2542c:	mov	r8, r1
   25430:	mov	r9, r2
   25434:	str	lr, [sp, #24]
   25438:	sub	sp, sp, #12
   2543c:	b	2548c <flatcc_builder_custom_reset@@Base+0x78>
   25440:	cmp	r5, #5
   25444:	cmpne	r9, #0
   25448:	beq	25470 <flatcc_builder_custom_reset@@Base+0x5c>
   2544c:	mov	r3, #1
   25450:	str	r5, [sp]
   25454:	mov	r2, r3
   25458:	ldr	r0, [r6, #40]	; 0x28
   2545c:	ldr	r7, [r6, #48]	; 0x30
   25460:	blx	r7
   25464:	cmp	r0, #0
   25468:	bne	2557c <flatcc_builder_custom_reset@@Base+0x168>
   2546c:	ldr	r0, [r4, #52]	; 0x34
   25470:	mov	r1, #0
   25474:	ldr	r2, [r4, #56]	; 0x38
   25478:	bl	14594 <memset@plt>
   2547c:	add	r5, r5, #1
   25480:	add	r4, r4, #8
   25484:	cmp	r5, #8
   25488:	beq	254cc <flatcc_builder_custom_reset@@Base+0xb8>
   2548c:	ldr	r0, [r4, #52]	; 0x34
   25490:	add	r1, r4, #52	; 0x34
   25494:	cmp	r0, #0
   25498:	bne	25440 <flatcc_builder_custom_reset@@Base+0x2c>
   2549c:	ldr	r3, [r4, #56]	; 0x38
   254a0:	cmp	r3, #0
   254a4:	beq	2547c <flatcc_builder_custom_reset@@Base+0x68>
   254a8:	ldr	r3, [pc, #212]	; 25584 <flatcc_builder_custom_reset@@Base+0x170>
   254ac:	movw	r2, #434	; 0x1b2
   254b0:	ldr	r1, [pc, #208]	; 25588 <flatcc_builder_custom_reset@@Base+0x174>
   254b4:	ldr	r0, [pc, #208]	; 2558c <flatcc_builder_custom_reset@@Base+0x178>
   254b8:	add	r3, pc, r3
   254bc:	add	r3, r3, #108	; 0x6c
   254c0:	add	r1, pc, r1
   254c4:	add	r0, pc, r0
   254c8:	bl	145e8 <__assert_fail@plt>
   254cc:	mov	r2, #0
   254d0:	ldr	r0, [r6, #52]	; 0x34
   254d4:	ldr	r3, [r6, #124]	; 0x7c
   254d8:	ldr	r1, [r6, #60]	; 0x3c
   254dc:	str	r0, [r6, #4]
   254e0:	str	r2, [r6, #120]	; 0x78
   254e4:	cmp	r3, r2
   254e8:	ldr	r2, [r6, #76]	; 0x4c
   254ec:	movne	r3, #16
   254f0:	strne	r3, [r6, #124]	; 0x7c
   254f4:	mov	r3, #0
   254f8:	cmp	r8, r3
   254fc:	str	r2, [r6]
   25500:	str	r1, [r6, #16]
   25504:	str	r3, [r6, #20]
   25508:	str	r3, [r6, #24]
   2550c:	str	r3, [r6, #32]
   25510:	strh	r3, [r6, #128]	; 0x80
   25514:	str	r3, [r6, #136]	; 0x88
   25518:	str	r3, [r6, #140]	; 0x8c
   2551c:	str	r3, [r6, #148]	; 0x94
   25520:	str	r3, [r6, #152]	; 0x98
   25524:	str	r3, [r6, #156]	; 0x9c
   25528:	str	r3, [r6, #160]	; 0xa0
   2552c:	bne	25554 <flatcc_builder_custom_reset@@Base+0x140>
   25530:	ldr	r0, [r6, #184]	; 0xb8
   25534:	cmp	r0, #0
   25538:	bne	2556c <flatcc_builder_custom_reset@@Base+0x158>
   2553c:	add	sp, sp, #12
   25540:	ldrd	r4, [sp]
   25544:	ldrd	r6, [sp, #8]
   25548:	ldrd	r8, [sp, #16]
   2554c:	add	sp, sp, #24
   25550:	pop	{pc}		; (ldr pc, [sp], #4)
   25554:	ldr	r0, [r6, #184]	; 0xb8
   25558:	str	r3, [r6, #172]	; 0xac
   2555c:	str	r3, [r6, #176]	; 0xb0
   25560:	str	r3, [r6, #180]	; 0xb4
   25564:	cmp	r0, #0
   25568:	beq	2553c <flatcc_builder_custom_reset@@Base+0x128>
   2556c:	add	r0, r6, #188	; 0xbc
   25570:	bl	2934c <flatcc_emitter_reset@@Base>
   25574:	mov	r0, #0
   25578:	b	2553c <flatcc_builder_custom_reset@@Base+0x128>
   2557c:	mvn	r0, #0
   25580:	b	2553c <flatcc_builder_custom_reset@@Base+0x128>
   25584:	strdeq	fp, [r1], -r4
   25588:	andeq	ip, r1, ip, lsr r5
   2558c:	ldrdeq	ip, [r1], -r4

00025590 <flatcc_builder_reset@@Base>:
   25590:	mov	r2, #0
   25594:	mov	r1, r2
   25598:	b	25414 <flatcc_builder_custom_reset@@Base>

0002559c <flatcc_builder_clear@@Base>:
   2559c:	strd	r4, [sp, #-20]!	; 0xffffffec
   255a0:	mov	r4, #0
   255a4:	add	r5, r0, #52	; 0x34
   255a8:	strd	r6, [sp, #8]
   255ac:	mov	r6, r0
   255b0:	str	lr, [sp, #16]
   255b4:	sub	sp, sp, #12
   255b8:	mov	r3, #0
   255bc:	mov	r1, r5
   255c0:	str	r4, [sp]
   255c4:	mov	r2, r3
   255c8:	add	r4, r4, #1
   255cc:	ldr	r0, [r6, #40]	; 0x28
   255d0:	add	r5, r5, #8
   255d4:	ldr	r7, [r6, #48]	; 0x30
   255d8:	blx	r7
   255dc:	cmp	r4, #8
   255e0:	bne	255b8 <flatcc_builder_clear@@Base+0x1c>
   255e4:	ldr	r3, [r6, #184]	; 0xb8
   255e8:	cmp	r3, #0
   255ec:	bne	25614 <flatcc_builder_clear@@Base+0x78>
   255f0:	mov	r0, r6
   255f4:	mov	r2, #232	; 0xe8
   255f8:	mov	r1, #0
   255fc:	add	sp, sp, #12
   25600:	ldrd	r4, [sp]
   25604:	ldrd	r6, [sp, #8]
   25608:	ldr	lr, [sp, #16]
   2560c:	add	sp, sp, #20
   25610:	b	14594 <memset@plt>
   25614:	add	r0, r6, #188	; 0xbc
   25618:	bl	29420 <flatcc_emitter_clear@@Base>
   2561c:	b	255f0 <flatcc_builder_clear@@Base+0x54>

00025620 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25620:	strd	r4, [sp, #-20]!	; 0xffffffec
   25624:	add	r4, r1, #3
   25628:	mov	r5, r0
   2562c:	ldr	r3, [r0, #112]	; 0x70
   25630:	bic	r4, r4, #3
   25634:	strd	r6, [sp, #8]
   25638:	add	r4, r4, #4
   2563c:	ldr	r6, [r0, #228]	; 0xe4
   25640:	str	lr, [sp, #16]
   25644:	sub	sp, sp, #12
   25648:	add	r2, r6, r4
   2564c:	cmp	r2, r3
   25650:	bls	25678 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   25654:	mov	ip, #7
   25658:	add	r1, r0, #108	; 0x6c
   2565c:	ldr	r0, [r0, #40]	; 0x28
   25660:	mov	r3, #0
   25664:	str	ip, [sp]
   25668:	ldr	r7, [r5, #48]	; 0x30
   2566c:	blx	r7
   25670:	cmp	r0, #0
   25674:	bne	256cc <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   25678:	ldr	r7, [r5, #108]	; 0x6c
   2567c:	adds	r3, r7, r6
   25680:	moveq	r0, r3
   25684:	beq	256b8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   25688:	mov	r2, r4
   2568c:	mov	r0, r3
   25690:	mov	r1, #0
   25694:	bl	14594 <memset@plt>
   25698:	ldr	r2, [r5, #224]	; 0xe0
   2569c:	add	r0, r0, #4
   256a0:	str	r2, [r7, r6]
   256a4:	ldr	r3, [r5, #228]	; 0xe4
   256a8:	add	r4, r3, r4
   256ac:	add	r3, r3, #4
   256b0:	str	r3, [r5, #224]	; 0xe0
   256b4:	str	r4, [r5, #228]	; 0xe4
   256b8:	add	sp, sp, #12
   256bc:	ldrd	r4, [sp]
   256c0:	ldrd	r6, [sp, #8]
   256c4:	add	sp, sp, #16
   256c8:	pop	{pc}		; (ldr pc, [sp], #4)
   256cc:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>

000256d0 <flatcc_builder_enter_user_frame@@Base>:
   256d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   256d4:	add	r4, r1, #3
   256d8:	mov	r5, r0
   256dc:	ldr	r3, [r0, #112]	; 0x70
   256e0:	bic	r4, r4, #3
   256e4:	strd	r6, [sp, #8]
   256e8:	add	r4, r4, #4
   256ec:	ldr	r6, [r0, #228]	; 0xe4
   256f0:	str	lr, [sp, #16]
   256f4:	sub	sp, sp, #12
   256f8:	add	r2, r6, r4
   256fc:	cmp	r2, r3
   25700:	bls	25728 <flatcc_builder_enter_user_frame@@Base+0x58>
   25704:	mov	ip, #7
   25708:	add	r1, r0, #108	; 0x6c
   2570c:	ldr	r0, [r0, #40]	; 0x28
   25710:	mov	r3, #0
   25714:	str	ip, [sp]
   25718:	ldr	r7, [r5, #48]	; 0x30
   2571c:	blx	r7
   25720:	cmp	r0, #0
   25724:	bne	25770 <flatcc_builder_enter_user_frame@@Base+0xa0>
   25728:	ldr	r7, [r5, #108]	; 0x6c
   2572c:	adds	r0, r7, r6
   25730:	beq	2575c <flatcc_builder_enter_user_frame@@Base+0x8c>
   25734:	mov	r2, r4
   25738:	mov	r1, #0
   2573c:	bl	14594 <memset@plt>
   25740:	ldr	r3, [r5, #224]	; 0xe0
   25744:	str	r3, [r7, r6]
   25748:	ldr	r0, [r5, #228]	; 0xe4
   2574c:	add	r4, r0, r4
   25750:	add	r0, r0, #4
   25754:	str	r0, [r5, #224]	; 0xe0
   25758:	str	r4, [r5, #228]	; 0xe4
   2575c:	add	sp, sp, #12
   25760:	ldrd	r4, [sp]
   25764:	ldrd	r6, [sp, #8]
   25768:	add	sp, sp, #16
   2576c:	pop	{pc}		; (ldr pc, [sp], #4)
   25770:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>

00025774 <flatcc_builder_exit_user_frame@@Base>:
   25774:	ldr	r2, [r0, #224]	; 0xe0
   25778:	cmp	r2, #0
   2577c:	beq	257a4 <flatcc_builder_exit_user_frame@@Base+0x30>
   25780:	mov	r3, r0
   25784:	sub	r0, r2, #4
   25788:	ldr	r1, [r3, #108]	; 0x6c
   2578c:	str	r0, [r3, #228]	; 0xe4
   25790:	add	r2, r1, r2
   25794:	ldr	r2, [r2, #-4]
   25798:	mov	r0, r2
   2579c:	str	r2, [r3, #224]	; 0xe0
   257a0:	bx	lr
   257a4:	ldr	r3, [pc, #36]	; 257d0 <flatcc_builder_exit_user_frame@@Base+0x5c>
   257a8:	movw	r2, #542	; 0x21e
   257ac:	str	r4, [sp, #-8]!
   257b0:	ldr	r1, [pc, #28]	; 257d4 <flatcc_builder_exit_user_frame@@Base+0x60>
   257b4:	str	lr, [sp, #4]
   257b8:	ldr	r0, [pc, #24]	; 257d8 <flatcc_builder_exit_user_frame@@Base+0x64>
   257bc:	add	r3, pc, r3
   257c0:	add	r3, r3, #136	; 0x88
   257c4:	add	r1, pc, r1
   257c8:	add	r0, pc, r0
   257cc:	bl	145e8 <__assert_fail@plt>
   257d0:	strdeq	fp, [r1], -r0
   257d4:	andeq	ip, r1, r8, lsr r2
   257d8:	andeq	ip, r1, r4, ror #5

000257dc <flatcc_builder_exit_user_frame_at@@Base>:
   257dc:	ldr	r2, [r0, #224]	; 0xe0
   257e0:	cmp	r2, r1
   257e4:	bcc	257f0 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   257e8:	str	r1, [r0, #224]	; 0xe0
   257ec:	b	25774 <flatcc_builder_exit_user_frame@@Base>
   257f0:	ldr	r3, [pc, #36]	; 2581c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   257f4:	movw	r2, #551	; 0x227
   257f8:	str	r4, [sp, #-8]!
   257fc:	ldr	r1, [pc, #28]	; 25820 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   25800:	str	lr, [sp, #4]
   25804:	ldr	r0, [pc, #24]	; 25824 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   25808:	add	r3, pc, r3
   2580c:	add	r3, r3, #168	; 0xa8
   25810:	add	r1, pc, r1
   25814:	add	r0, pc, r0
   25818:	bl	145e8 <__assert_fail@plt>
   2581c:	andeq	fp, r1, r4, lsr #21
   25820:	andeq	ip, r1, ip, ror #3
   25824:			; <UNDEFINED> instruction: 0x0001c2b4

00025828 <flatcc_builder_get_current_user_frame@@Base>:
   25828:	ldr	r0, [r0, #224]	; 0xe0
   2582c:	bx	lr

00025830 <flatcc_builder_get_user_frame_ptr@@Base>:
   25830:	ldr	r0, [r0, #108]	; 0x6c
   25834:	add	r0, r0, r1
   25838:	bx	lr

0002583c <flatcc_builder_embed_buffer@@Base>:
   2583c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25840:	mov	r5, r3
   25844:	mov	r4, r0
   25848:	ldr	r3, [r0, #152]	; 0x98
   2584c:	strd	r6, [sp, #8]
   25850:	mov	r7, r2
   25854:	mov	r2, r1
   25858:	ldr	r6, [pc, #356]	; 259c4 <flatcc_builder_embed_buffer@@Base+0x188>
   2585c:	str	lr, [sp, #16]
   25860:	sub	sp, sp, #92	; 0x5c
   25864:	add	r1, sp, #112	; 0x70
   25868:	adds	r3, r3, #0
   2586c:	movne	r3, #1
   25870:	bl	24e10 <flatcc_builder_default_alloc@@Base+0x190>
   25874:	cmp	r0, #0
   25878:	add	r6, pc, r6
   2587c:	bne	25994 <flatcc_builder_embed_buffer@@Base+0x158>
   25880:	ldr	r3, [sp, #116]	; 0x74
   25884:	str	r0, [sp, #16]
   25888:	ldr	r1, [r4, #136]	; 0x88
   2588c:	str	r0, [sp, #20]
   25890:	ldrh	r2, [sp, #112]	; 0x70
   25894:	tst	r3, #2
   25898:	ldr	r0, [r4, #152]	; 0x98
   2589c:	movne	ip, #4
   258a0:	moveq	ip, #0
   258a4:	sub	r3, r1, r5
   258a8:	sub	r3, r3, ip
   258ac:	sub	r2, r2, #1
   258b0:	and	r3, r3, r2
   258b4:	add	r2, r5, r3
   258b8:	cmp	r0, #0
   258bc:	str	r2, [sp, #12]
   258c0:	beq	258e4 <flatcc_builder_embed_buffer@@Base+0xa8>
   258c4:	mov	ip, #1
   258c8:	mov	r2, #4
   258cc:	mov	r0, r2
   258d0:	str	r2, [sp, #16]
   258d4:	str	ip, [sp, #20]
   258d8:	add	ip, sp, #12
   258dc:	str	ip, [sp, #24]
   258e0:	str	r2, [sp, #28]
   258e4:	cmp	r5, #0
   258e8:	beq	25910 <flatcc_builder_embed_buffer@@Base+0xd4>
   258ec:	ldr	r2, [sp, #20]
   258f0:	add	ip, sp, #88	; 0x58
   258f4:	add	r0, r0, r5
   258f8:	str	r0, [sp, #16]
   258fc:	add	r2, r2, #1
   25900:	add	ip, ip, r2, lsl #3
   25904:	str	r2, [sp, #20]
   25908:	str	r7, [ip, #-72]	; 0xffffffb8
   2590c:	str	r5, [ip, #-68]	; 0xffffffbc
   25910:	cmp	r3, #0
   25914:	bne	25964 <flatcc_builder_embed_buffer@@Base+0x128>
   25918:	sub	r5, r1, r0
   2591c:	cmp	r1, r5
   25920:	ble	259a0 <flatcc_builder_embed_buffer@@Base+0x164>
   25924:	mov	r3, r5
   25928:	add	r1, sp, #24
   2592c:	str	r0, [sp]
   25930:	ldr	r2, [sp, #20]
   25934:	ldr	r0, [r4, #36]	; 0x24
   25938:	ldr	r6, [r4, #44]	; 0x2c
   2593c:	blx	r6
   25940:	cmp	r0, #0
   25944:	streq	r5, [r4, #136]	; 0x88
   25948:	bne	2599c <flatcc_builder_embed_buffer@@Base+0x160>
   2594c:	mov	r0, r5
   25950:	add	sp, sp, #92	; 0x5c
   25954:	ldrd	r4, [sp]
   25958:	ldrd	r6, [sp, #8]
   2595c:	add	sp, sp, #16
   25960:	pop	{pc}		; (ldr pc, [sp], #4)
   25964:	ldr	ip, [pc, #92]	; 259c8 <flatcc_builder_embed_buffer@@Base+0x18c>
   25968:	add	r0, r0, r3
   2596c:	ldr	r2, [sp, #20]
   25970:	str	r0, [sp, #16]
   25974:	ldr	lr, [r6, ip]
   25978:	add	ip, sp, #88	; 0x58
   2597c:	add	r2, r2, #1
   25980:	add	ip, ip, r2, lsl #3
   25984:	str	r2, [sp, #20]
   25988:	str	lr, [ip, #-72]	; 0xffffffb8
   2598c:	str	r3, [ip, #-68]	; 0xffffffbc
   25990:	b	25918 <flatcc_builder_embed_buffer@@Base+0xdc>
   25994:	mov	r5, #0
   25998:	b	2594c <flatcc_builder_embed_buffer@@Base+0x110>
   2599c:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   259a0:	ldr	r3, [pc, #36]	; 259cc <flatcc_builder_embed_buffer@@Base+0x190>
   259a4:	movw	r2, #647	; 0x287
   259a8:	ldr	r1, [pc, #32]	; 259d0 <flatcc_builder_embed_buffer@@Base+0x194>
   259ac:	ldr	r0, [pc, #32]	; 259d4 <flatcc_builder_embed_buffer@@Base+0x198>
   259b0:	add	r3, pc, r3
   259b4:	add	r3, r3, #44	; 0x2c
   259b8:	add	r1, pc, r1
   259bc:	add	r0, pc, r0
   259c0:	bl	145e8 <__assert_fail@plt>
   259c4:	andeq	lr, r2, r0, lsl #15
   259c8:	andeq	r0, r0, r4, rrx
   259cc:	strdeq	fp, [r1], -ip
   259d0:	andeq	ip, r1, r4, asr #32
   259d4:	andeq	ip, r1, r8, asr #1

000259d8 <flatcc_builder_create_buffer@@Base>:
   259d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   259dc:	mov	r4, r0
   259e0:	strd	r6, [sp, #8]
   259e4:	mov	r6, r3
   259e8:	strd	r8, [sp, #16]
   259ec:	mov	r8, #0
   259f0:	strd	sl, [sp, #24]
   259f4:	mov	sl, r1
   259f8:	str	lr, [sp, #32]
   259fc:	sub	sp, sp, #100	; 0x64
   25a00:	ldr	r9, [sp, #140]	; 0x8c
   25a04:	add	r1, sp, #136	; 0x88
   25a08:	str	r8, [sp, #20]
   25a0c:	ldr	r5, [pc, #496]	; 25c04 <flatcc_builder_create_buffer@@Base+0x22c>
   25a10:	and	r7, r9, #1
   25a14:	mov	r3, r7
   25a18:	bl	24e10 <flatcc_builder_default_alloc@@Base+0x190>
   25a1c:	cmp	r0, r8
   25a20:	add	r5, pc, r5
   25a24:	bne	25b78 <flatcc_builder_create_buffer@@Base+0x1a0>
   25a28:	ldrh	r2, [r4, #128]	; 0x80
   25a2c:	ldrh	r3, [sp, #136]	; 0x88
   25a30:	ldr	ip, [r4, #136]	; 0x88
   25a34:	cmp	r2, r3
   25a38:	strhcc	r3, [r4, #128]	; 0x80
   25a3c:	cmp	sl, #0
   25a40:	ldrne	r2, [sl]
   25a44:	ldreq	lr, [sp, #20]
   25a48:	movne	lr, r2
   25a4c:	strne	r2, [sp, #20]
   25a50:	sub	r2, r3, #1
   25a54:	sub	r3, ip, #4
   25a58:	cmp	lr, #0
   25a5c:	movne	lr, #4
   25a60:	tst	r9, #2
   25a64:	movne	r0, #4
   25a68:	moveq	r0, #0
   25a6c:	sub	r3, r3, lr
   25a70:	ands	r1, r9, #3
   25a74:	sub	r3, r3, r0
   25a78:	and	r3, r3, r2
   25a7c:	bne	25b98 <flatcc_builder_create_buffer@@Base+0x1c0>
   25a80:	mov	r9, r1
   25a84:	mov	r8, #1
   25a88:	mov	r0, #4
   25a8c:	add	sl, sp, #96	; 0x60
   25a90:	add	r2, r9, #1
   25a94:	str	r0, [sp, #24]
   25a98:	add	r2, sl, r2, lsl #3
   25a9c:	mov	fp, #4
   25aa0:	add	sl, sp, #12
   25aa4:	cmp	lr, #0
   25aa8:	str	r8, [sp, #28]
   25aac:	strd	sl, [r2, #-72]	; 0xffffffb8
   25ab0:	beq	25adc <flatcc_builder_create_buffer@@Base+0x104>
   25ab4:	add	r2, sp, #96	; 0x60
   25ab8:	add	r8, r8, #1
   25abc:	add	r8, r2, r8, lsl #3
   25ac0:	add	r0, r0, lr
   25ac4:	add	r9, r9, #2
   25ac8:	add	r2, sp, #20
   25acc:	str	r0, [sp, #24]
   25ad0:	str	r2, [r8, #-72]	; 0xffffffb8
   25ad4:	str	lr, [r8, #-68]	; 0xffffffbc
   25ad8:	str	r9, [sp, #28]
   25adc:	cmp	r3, #0
   25ae0:	beq	25b10 <flatcc_builder_create_buffer@@Base+0x138>
   25ae4:	ldr	lr, [pc, #284]	; 25c08 <flatcc_builder_create_buffer@@Base+0x230>
   25ae8:	add	r0, r0, r3
   25aec:	ldr	r2, [sp, #28]
   25af0:	str	r0, [sp, #24]
   25af4:	ldr	r5, [r5, lr]
   25af8:	add	lr, sp, #96	; 0x60
   25afc:	add	r2, r2, #1
   25b00:	add	lr, lr, r2, lsl #3
   25b04:	str	r2, [sp, #28]
   25b08:	str	r5, [lr, #-72]	; 0xffffffb8
   25b0c:	str	r3, [lr, #-68]	; 0xffffffbc
   25b10:	sub	r5, ip, r0
   25b14:	cmp	r1, #0
   25b18:	mov	r2, r5
   25b1c:	addne	r2, r5, #4
   25b20:	cmp	r7, #0
   25b24:	sub	r6, r6, r2
   25b28:	ldrne	r3, [r4, #144]	; 0x90
   25b2c:	mov	r8, r5
   25b30:	str	r6, [sp, #12]
   25b34:	ldreq	r3, [r4, #140]	; 0x8c
   25b38:	cmp	ip, r5
   25b3c:	sub	r3, r3, r2
   25b40:	str	r3, [sp, #16]
   25b44:	ble	25bdc <flatcc_builder_create_buffer@@Base+0x204>
   25b48:	mov	r3, r5
   25b4c:	add	r1, sp, #32
   25b50:	str	r0, [sp]
   25b54:	ldr	r2, [sp, #28]
   25b58:	ldr	r0, [r4, #36]	; 0x24
   25b5c:	ldr	r6, [r4, #44]	; 0x2c
   25b60:	blx	r6
   25b64:	cmp	r0, #0
   25b68:	bne	25c00 <flatcc_builder_create_buffer@@Base+0x228>
   25b6c:	cmp	r5, #0
   25b70:	str	r5, [r4, #136]	; 0x88
   25b74:	beq	25bb8 <flatcc_builder_create_buffer@@Base+0x1e0>
   25b78:	mov	r0, r8
   25b7c:	add	sp, sp, #100	; 0x64
   25b80:	ldrd	r4, [sp]
   25b84:	ldrd	r6, [sp, #8]
   25b88:	ldrd	r8, [sp, #16]
   25b8c:	ldrd	sl, [sp, #24]
   25b90:	add	sp, sp, #32
   25b94:	pop	{pc}		; (ldr pc, [sp], #4)
   25b98:	mov	sl, #4
   25b9c:	add	r2, sp, #16
   25ba0:	mov	r8, #2
   25ba4:	mov	r9, #1
   25ba8:	mov	r0, #8
   25bac:	str	r2, [sp, #32]
   25bb0:	str	sl, [sp, #36]	; 0x24
   25bb4:	b	25a8c <flatcc_builder_create_buffer@@Base+0xb4>
   25bb8:	ldr	r3, [pc, #76]	; 25c0c <flatcc_builder_create_buffer@@Base+0x234>
   25bbc:	mov	r2, #772	; 0x304
   25bc0:	ldr	r1, [pc, #72]	; 25c10 <flatcc_builder_create_buffer@@Base+0x238>
   25bc4:	ldr	r0, [pc, #72]	; 25c14 <flatcc_builder_create_buffer@@Base+0x23c>
   25bc8:	add	r3, pc, r3
   25bcc:	add	r3, r3, #204	; 0xcc
   25bd0:	add	r1, pc, r1
   25bd4:	add	r0, pc, r0
   25bd8:	bl	145e8 <__assert_fail@plt>
   25bdc:	ldr	r3, [pc, #52]	; 25c18 <flatcc_builder_create_buffer@@Base+0x240>
   25be0:	movw	r2, #647	; 0x287
   25be4:	ldr	r1, [pc, #48]	; 25c1c <flatcc_builder_create_buffer@@Base+0x244>
   25be8:	ldr	r0, [pc, #48]	; 25c20 <flatcc_builder_create_buffer@@Base+0x248>
   25bec:	add	r3, pc, r3
   25bf0:	add	r3, r3, #44	; 0x2c
   25bf4:	add	r1, pc, r1
   25bf8:	add	r0, pc, r0
   25bfc:	bl	145e8 <__assert_fail@plt>
   25c00:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   25c04:	ldrdeq	lr, [r2], -r8
   25c08:	andeq	r0, r0, r4, rrx
   25c0c:	andeq	fp, r1, r4, ror #13
   25c10:	andeq	fp, r1, ip, lsr #28
   25c14:			; <UNDEFINED> instruction: 0x0001beb0
   25c18:	andeq	fp, r1, r0, asr #13
   25c1c:	andeq	fp, r1, r8, lsl #28
   25c20:	andeq	fp, r1, ip, lsl #29

00025c24 <flatcc_builder_create_struct@@Base>:
   25c24:	ldr	ip, [pc, #316]	; 25d68 <flatcc_builder_create_struct@@Base+0x144>
   25c28:	cmp	r3, #0
   25c2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   25c30:	strd	r6, [sp, #8]
   25c34:	str	lr, [sp, #16]
   25c38:	sub	sp, sp, #84	; 0x54
   25c3c:	add	ip, pc, ip
   25c40:	beq	25d44 <flatcc_builder_create_struct@@Base+0x120>
   25c44:	mov	r4, r0
   25c48:	ldrh	r0, [r0, #128]	; 0x80
   25c4c:	ldr	lr, [r4, #136]	; 0x88
   25c50:	cmp	r0, r3
   25c54:	mov	r0, #0
   25c58:	strhcc	r3, [r4, #128]	; 0x80
   25c5c:	sub	r5, lr, r2
   25c60:	sub	r3, r3, #1
   25c64:	cmp	r2, r0
   25c68:	and	r3, r3, r5
   25c6c:	str	r0, [sp, #8]
   25c70:	str	r0, [sp, #12]
   25c74:	bne	25cf8 <flatcc_builder_create_struct@@Base+0xd4>
   25c78:	cmp	r3, #0
   25c7c:	movne	r2, r3
   25c80:	movne	r6, #1
   25c84:	beq	25d1c <flatcc_builder_create_struct@@Base+0xf8>
   25c88:	ldr	r1, [pc, #220]	; 25d6c <flatcc_builder_create_struct@@Base+0x148>
   25c8c:	add	r0, r0, #1
   25c90:	add	r7, sp, #80	; 0x50
   25c94:	str	r2, [sp, #8]
   25c98:	add	r0, r7, r0, lsl #3
   25c9c:	sub	r5, lr, r2
   25ca0:	ldr	r1, [ip, r1]
   25ca4:	str	r6, [sp, #12]
   25ca8:	str	r1, [r0, #-72]	; 0xffffffb8
   25cac:	str	r3, [r0, #-68]	; 0xffffffbc
   25cb0:	cmp	lr, r5
   25cb4:	ble	25d1c <flatcc_builder_create_struct@@Base+0xf8>
   25cb8:	mov	r3, r5
   25cbc:	add	r1, sp, #16
   25cc0:	str	r2, [sp]
   25cc4:	ldr	r2, [sp, #12]
   25cc8:	ldr	r0, [r4, #36]	; 0x24
   25ccc:	ldr	r6, [r4, #44]	; 0x2c
   25cd0:	blx	r6
   25cd4:	cmp	r0, #0
   25cd8:	bne	25d40 <flatcc_builder_create_struct@@Base+0x11c>
   25cdc:	mov	r0, r5
   25ce0:	str	r5, [r4, #136]	; 0x88
   25ce4:	add	sp, sp, #84	; 0x54
   25ce8:	ldrd	r4, [sp]
   25cec:	ldrd	r6, [sp, #8]
   25cf0:	add	sp, sp, #16
   25cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   25cf8:	mov	r0, #1
   25cfc:	cmp	r3, #0
   25d00:	str	r2, [sp, #8]
   25d04:	movne	r6, #2
   25d08:	strd	r0, [sp, #12]
   25d0c:	str	r2, [sp, #20]
   25d10:	addne	r2, r2, r3
   25d14:	beq	25cb0 <flatcc_builder_create_struct@@Base+0x8c>
   25d18:	b	25c88 <flatcc_builder_create_struct@@Base+0x64>
   25d1c:	ldr	r3, [pc, #76]	; 25d70 <flatcc_builder_create_struct@@Base+0x14c>
   25d20:	movw	r2, #647	; 0x287
   25d24:	ldr	r1, [pc, #72]	; 25d74 <flatcc_builder_create_struct@@Base+0x150>
   25d28:	ldr	r0, [pc, #72]	; 25d78 <flatcc_builder_create_struct@@Base+0x154>
   25d2c:	add	r3, pc, r3
   25d30:	add	r3, r3, #44	; 0x2c
   25d34:	add	r1, pc, r1
   25d38:	add	r0, pc, r0
   25d3c:	bl	145e8 <__assert_fail@plt>
   25d40:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   25d44:	ldr	r3, [pc, #48]	; 25d7c <flatcc_builder_create_struct@@Base+0x158>
   25d48:	movw	r2, #783	; 0x30f
   25d4c:	ldr	r1, [pc, #44]	; 25d80 <flatcc_builder_create_struct@@Base+0x15c>
   25d50:	ldr	r0, [pc, #44]	; 25d84 <flatcc_builder_create_struct@@Base+0x160>
   25d54:	add	r3, pc, r3
   25d58:	add	r3, r3, #236	; 0xec
   25d5c:	add	r1, pc, r1
   25d60:	add	r0, pc, r0
   25d64:	bl	145e8 <__assert_fail@plt>
   25d68:			; <UNDEFINED> instruction: 0x0002e3bc
   25d6c:	andeq	r0, r0, r4, rrx
   25d70:	andeq	fp, r1, r0, lsl #11
   25d74:	andeq	fp, r1, r8, asr #25
   25d78:	andeq	fp, r1, ip, asr #26
   25d7c:	andeq	fp, r1, r8, asr r5
   25d80:	andeq	fp, r1, r0, lsr #25
   25d84:	andeq	fp, r1, r8, lsl #27

00025d88 <flatcc_builder_start_buffer@@Base>:
   25d88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25d8c:	mov	r5, r1
   25d90:	mov	r4, r0
   25d94:	ldrh	r1, [r0, #128]	; 0x80
   25d98:	strd	r6, [sp, #8]
   25d9c:	mov	r7, r3
   25da0:	ldr	r6, [pc, #180]	; 25e5c <flatcc_builder_start_buffer@@Base+0xd4>
   25da4:	strd	r8, [sp, #16]
   25da8:	mov	r8, r2
   25dac:	str	sl, [sp, #24]
   25db0:	str	lr, [sp, #28]
   25db4:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   25db8:	cmp	r0, #0
   25dbc:	add	r6, pc, r6
   25dc0:	bne	25e54 <flatcc_builder_start_buffer@@Base+0xcc>
   25dc4:	mov	r3, #1
   25dc8:	ldrh	r9, [r4, #132]	; 0x84
   25dcc:	cmp	r5, #0
   25dd0:	ldr	ip, [r4, #148]	; 0x94
   25dd4:	strh	r3, [r4, #128]	; 0x80
   25dd8:	ldr	r1, [r4, #32]
   25ddc:	ldr	lr, [r4, #136]	; 0x88
   25de0:	add	r2, ip, r3
   25de4:	ldrh	r3, [r4, #164]	; 0xa4
   25de8:	strh	r9, [r1, #34]	; 0x22
   25dec:	strh	r8, [r4, #132]	; 0x84
   25df0:	ldr	r9, [r4, #144]	; 0x90
   25df4:	ldr	r8, [r4, #152]	; 0x98
   25df8:	strh	r3, [r1, #32]
   25dfc:	ldr	r3, [r4, #168]	; 0xa8
   25e00:	strh	r7, [r4, #164]	; 0xa4
   25e04:	str	r9, [r1, #20]
   25e08:	str	r8, [r1, #28]
   25e0c:	str	lr, [r4, #144]	; 0x90
   25e10:	str	r2, [r4, #148]	; 0x94
   25e14:	str	ip, [r4, #152]	; 0x98
   25e18:	str	r3, [r1, #16]
   25e1c:	beq	25e48 <flatcc_builder_start_buffer@@Base+0xc0>
   25e20:	ldr	r2, [r5]
   25e24:	mov	r3, #1
   25e28:	str	r2, [r4, #168]	; 0xa8
   25e2c:	strh	r3, [r1, #14]
   25e30:	ldrd	r4, [sp]
   25e34:	ldrd	r6, [sp, #8]
   25e38:	ldrd	r8, [sp, #16]
   25e3c:	ldr	sl, [sp, #24]
   25e40:	add	sp, sp, #28
   25e44:	pop	{pc}		; (ldr pc, [sp], #4)
   25e48:	ldr	r3, [pc, #16]	; 25e60 <flatcc_builder_start_buffer@@Base+0xd8>
   25e4c:	ldr	r5, [r6, r3]
   25e50:	b	25e20 <flatcc_builder_start_buffer@@Base+0x98>
   25e54:	mvn	r0, #0
   25e58:	b	25e30 <flatcc_builder_start_buffer@@Base+0xa8>
   25e5c:	andeq	lr, r2, ip, lsr r2
   25e60:	andeq	r0, r0, r4, rrx

00025e64 <flatcc_builder_end_buffer@@Base>:
   25e64:	ldr	ip, [r0, #32]
   25e68:	strd	r4, [sp, #-16]!
   25e6c:	mov	r4, r0
   25e70:	ldrh	r2, [r0, #164]	; 0xa4
   25e74:	ldr	r0, [r0, #152]	; 0x98
   25e78:	ldrh	ip, [ip, #14]
   25e7c:	and	r2, r2, #2
   25e80:	str	r6, [sp, #8]
   25e84:	str	lr, [sp, #12]
   25e88:	sub	sp, sp, #8
   25e8c:	cmp	r0, #0
   25e90:	moveq	r0, r2
   25e94:	orrne	r0, r2, #1
   25e98:	cmp	ip, #1
   25e9c:	bne	25f84 <flatcc_builder_end_buffer@@Base+0x120>
   25ea0:	ldrh	r2, [r4, #132]	; 0x84
   25ea4:	mov	r3, r1
   25ea8:	add	r1, r4, #168	; 0xa8
   25eac:	ldrh	ip, [r4, #128]	; 0x80
   25eb0:	cmp	r2, ip
   25eb4:	movhi	ip, r2
   25eb8:	strhhi	r2, [r4, #128]	; 0x80
   25ebc:	str	ip, [sp]
   25ec0:	str	r0, [sp, #4]
   25ec4:	mov	r0, r4
   25ec8:	bl	259d8 <flatcc_builder_create_buffer@@Base>
   25ecc:	subs	r5, r0, #0
   25ed0:	beq	25f6c <flatcc_builder_end_buffer@@Base+0x108>
   25ed4:	mov	r1, #0
   25ed8:	ldr	r0, [r4, #16]
   25edc:	ldr	r3, [r4, #32]
   25ee0:	ldr	r2, [r4, #20]
   25ee4:	ldrh	lr, [r3, #32]
   25ee8:	ldr	ip, [r3, #16]
   25eec:	ldr	r6, [r3, #20]
   25ef0:	ldr	r3, [r3, #28]
   25ef4:	str	r6, [r4, #144]	; 0x90
   25ef8:	strh	lr, [r4, #164]	; 0xa4
   25efc:	str	r3, [r4, #152]	; 0x98
   25f00:	str	ip, [r4, #168]	; 0xa8
   25f04:	bl	14594 <memset@plt>
   25f08:	ldr	r3, [r4, #32]
   25f0c:	ldr	r0, [r4, #60]	; 0x3c
   25f10:	ldr	r2, [r4, #64]	; 0x40
   25f14:	ldr	ip, [r3]
   25f18:	ldmib	r3, {r1, lr}
   25f1c:	add	r0, r0, ip
   25f20:	sub	r2, r2, ip
   25f24:	str	r0, [r4, #16]
   25f28:	cmp	r2, r1
   25f2c:	ldrh	r0, [r4, #128]	; 0x80
   25f30:	movcs	r2, r1
   25f34:	str	lr, [r4, #20]
   25f38:	str	ip, [r4, #28]
   25f3c:	ldrh	ip, [r4, #130]	; 0x82
   25f40:	str	r2, [r4, #24]
   25f44:	ldr	r2, [r4, #156]	; 0x9c
   25f48:	str	r1, [r3, #4]
   25f4c:	cmp	r0, ip
   25f50:	sub	r0, r3, #36	; 0x24
   25f54:	strhcc	ip, [r4, #128]	; 0x80
   25f58:	ldrh	r1, [r3, #12]
   25f5c:	sub	r3, r2, #1
   25f60:	str	r0, [r4, #32]
   25f64:	strh	r1, [r4, #130]	; 0x82
   25f68:	str	r3, [r4, #156]	; 0x9c
   25f6c:	mov	r0, r5
   25f70:	add	sp, sp, #8
   25f74:	ldrd	r4, [sp]
   25f78:	ldr	r6, [sp, #8]
   25f7c:	add	sp, sp, #12
   25f80:	pop	{pc}		; (ldr pc, [sp], #4)
   25f84:	ldr	r3, [pc, #28]	; 25fa8 <flatcc_builder_end_buffer@@Base+0x144>
   25f88:	movw	r2, #838	; 0x346
   25f8c:	ldr	r1, [pc, #24]	; 25fac <flatcc_builder_end_buffer@@Base+0x148>
   25f90:	ldr	r0, [pc, #24]	; 25fb0 <flatcc_builder_end_buffer@@Base+0x14c>
   25f94:	add	r3, pc, r3
   25f98:	add	r3, r3, #268	; 0x10c
   25f9c:	add	r1, pc, r1
   25fa0:	add	r0, pc, r0
   25fa4:	bl	145e8 <__assert_fail@plt>
   25fa8:	andeq	fp, r1, r8, lsl r3
   25fac:	andeq	fp, r1, r0, ror #20
   25fb0:	andeq	fp, r1, r4, asr fp

00025fb4 <flatcc_builder_start_struct@@Base>:
   25fb4:	strd	r4, [sp, #-16]!
   25fb8:	mov	r5, r1
   25fbc:	mov	r1, r2
   25fc0:	mov	r4, r0
   25fc4:	str	r6, [sp, #8]
   25fc8:	str	lr, [sp, #12]
   25fcc:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   25fd0:	cmp	r0, #0
   25fd4:	bne	2605c <flatcc_builder_start_struct@@Base+0xa8>
   25fd8:	ldr	r6, [r4, #20]
   25fdc:	mov	ip, #2
   25fe0:	ldr	r2, [r4, #28]
   25fe4:	ldr	r3, [r4, #64]	; 0x40
   25fe8:	add	r5, r5, r6
   25fec:	ldr	r0, [r4, #60]	; 0x3c
   25ff0:	ldr	r1, [r4, #32]
   25ff4:	sub	r3, r3, r2
   25ff8:	cmn	r3, #4
   25ffc:	add	r0, r0, r2
   26000:	mvnhi	r2, #3
   26004:	movhi	r3, r2
   26008:	strh	ip, [r1, #14]
   2600c:	strhi	r2, [r4, #24]
   26010:	mvn	r2, #3
   26014:	strls	r3, [r4, #24]
   26018:	cmp	r5, r3
   2601c:	str	r0, [r4, #16]
   26020:	str	r2, [r1, #4]
   26024:	str	r5, [r4, #20]
   26028:	bcs	26040 <flatcc_builder_start_struct@@Base+0x8c>
   2602c:	add	r0, r0, r6
   26030:	ldrd	r4, [sp]
   26034:	ldr	r6, [sp, #8]
   26038:	add	sp, sp, #12
   2603c:	pop	{pc}		; (ldr pc, [sp], #4)
   26040:	add	r1, r5, #1
   26044:	mov	r0, r4
   26048:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   2604c:	cmp	r0, #0
   26050:	bne	2605c <flatcc_builder_start_struct@@Base+0xa8>
   26054:	ldr	r0, [r4, #16]
   26058:	b	2602c <flatcc_builder_start_struct@@Base+0x78>
   2605c:	ldrd	r4, [sp]
   26060:	mov	r0, #0
   26064:	ldr	r6, [sp, #8]
   26068:	add	sp, sp, #12
   2606c:	pop	{pc}		; (ldr pc, [sp], #4)

00026070 <flatcc_builder_struct_edit@@Base>:
   26070:	ldr	r0, [r0, #16]
   26074:	bx	lr

00026078 <flatcc_builder_end_struct@@Base>:
   26078:	ldr	r3, [r0, #32]
   2607c:	strd	r4, [sp, #-16]!
   26080:	ldrh	r3, [r3, #14]
   26084:	str	r6, [sp, #8]
   26088:	str	lr, [sp, #12]
   2608c:	cmp	r3, #2
   26090:	bne	26138 <flatcc_builder_end_struct@@Base+0xc0>
   26094:	ldrh	r3, [r0, #130]	; 0x82
   26098:	mov	r4, r0
   2609c:	ldr	r1, [r0, #16]
   260a0:	ldr	r2, [r0, #20]
   260a4:	bl	25c24 <flatcc_builder_create_struct@@Base>
   260a8:	subs	r5, r0, #0
   260ac:	beq	26124 <flatcc_builder_end_struct@@Base+0xac>
   260b0:	mov	r1, #0
   260b4:	ldr	r0, [r4, #16]
   260b8:	ldr	r2, [r4, #20]
   260bc:	bl	14594 <memset@plt>
   260c0:	ldr	r3, [r4, #32]
   260c4:	ldr	r0, [r4, #60]	; 0x3c
   260c8:	ldr	r2, [r4, #64]	; 0x40
   260cc:	ldr	ip, [r3]
   260d0:	ldmib	r3, {r1, lr}
   260d4:	add	r0, r0, ip
   260d8:	sub	r2, r2, ip
   260dc:	str	r0, [r4, #16]
   260e0:	cmp	r2, r1
   260e4:	ldrh	r0, [r4, #128]	; 0x80
   260e8:	movcs	r2, r1
   260ec:	str	lr, [r4, #20]
   260f0:	str	ip, [r4, #28]
   260f4:	ldrh	ip, [r4, #130]	; 0x82
   260f8:	str	r2, [r4, #24]
   260fc:	ldr	r2, [r4, #156]	; 0x9c
   26100:	str	r1, [r3, #4]
   26104:	cmp	r0, ip
   26108:	sub	r0, r3, #36	; 0x24
   2610c:	strhcc	ip, [r4, #128]	; 0x80
   26110:	ldrh	r1, [r3, #12]
   26114:	sub	r3, r2, #1
   26118:	str	r0, [r4, #32]
   2611c:	strh	r1, [r4, #130]	; 0x82
   26120:	str	r3, [r4, #156]	; 0x9c
   26124:	mov	r0, r5
   26128:	ldrd	r4, [sp]
   2612c:	ldr	r6, [sp, #8]
   26130:	add	sp, sp, #12
   26134:	pop	{pc}		; (ldr pc, [sp], #4)
   26138:	ldr	r3, [pc, #28]	; 2615c <flatcc_builder_end_struct@@Base+0xe4>
   2613c:	mov	r2, #872	; 0x368
   26140:	ldr	r1, [pc, #24]	; 26160 <flatcc_builder_end_struct@@Base+0xe8>
   26144:	ldr	r0, [pc, #24]	; 26164 <flatcc_builder_end_struct@@Base+0xec>
   26148:	add	r3, pc, r3
   2614c:	add	r3, r3, #296	; 0x128
   26150:	add	r1, pc, r1
   26154:	add	r0, pc, r0
   26158:	bl	145e8 <__assert_fail@plt>
   2615c:	andeq	fp, r1, r4, ror #2
   26160:	andeq	fp, r1, ip, lsr #17
   26164:	andeq	fp, r1, ip, asr #19

00026168 <flatcc_builder_extend_vector@@Base>:
   26168:	ldr	r2, [r0, #32]
   2616c:	strd	r4, [sp, #-16]!
   26170:	ldr	r3, [r2, #20]
   26174:	ldr	ip, [r2, #24]
   26178:	str	r6, [sp, #8]
   2617c:	str	lr, [sp, #12]
   26180:	adds	r3, r1, r3
   26184:	movcs	r4, #1
   26188:	movcc	r4, #0
   2618c:	cmp	ip, r3
   26190:	orrcc	r4, r4, #1
   26194:	cmp	r4, #0
   26198:	bne	261f4 <flatcc_builder_extend_vector@@Base+0x8c>
   2619c:	ldr	ip, [r2, #16]
   261a0:	mov	r5, r0
   261a4:	ldr	r6, [r0, #20]
   261a8:	str	r3, [r2, #20]
   261ac:	ldr	r3, [r0, #24]
   261b0:	mla	r1, ip, r1, r6
   261b4:	cmp	r1, r3
   261b8:	str	r1, [r0, #20]
   261bc:	bcs	261d8 <flatcc_builder_extend_vector@@Base+0x70>
   261c0:	ldr	r0, [r5, #16]
   261c4:	add	r0, r0, r6
   261c8:	ldrd	r4, [sp]
   261cc:	ldr	r6, [sp, #8]
   261d0:	add	sp, sp, #12
   261d4:	pop	{pc}		; (ldr pc, [sp], #4)
   261d8:	add	r1, r1, #1
   261dc:	mvn	r2, #3
   261e0:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   261e4:	cmp	r0, #0
   261e8:	beq	261c0 <flatcc_builder_extend_vector@@Base+0x58>
   261ec:	mov	r0, r4
   261f0:	b	261c8 <flatcc_builder_extend_vector@@Base+0x60>
   261f4:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>

000261f8 <flatcc_builder_vector_push@@Base>:
   261f8:	ldr	r3, [r0, #32]
   261fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26200:	ldrh	r2, [r3, #14]
   26204:	strd	r6, [sp, #8]
   26208:	str	r8, [sp, #16]
   2620c:	str	lr, [sp, #20]
   26210:	cmp	r2, #4
   26214:	bne	262a8 <flatcc_builder_vector_push@@Base+0xb0>
   26218:	mov	r7, r1
   2621c:	ldr	r2, [r3, #20]
   26220:	ldr	r1, [r3, #24]
   26224:	cmp	r2, r1
   26228:	bhi	262cc <flatcc_builder_vector_push@@Base+0xd4>
   2622c:	add	r2, r2, #1
   26230:	ldr	r6, [r3, #16]
   26234:	mov	r4, r0
   26238:	ldr	r5, [r0, #20]
   2623c:	str	r2, [r3, #20]
   26240:	ldr	r3, [r0, #24]
   26244:	add	r1, r6, r5
   26248:	cmp	r1, r3
   2624c:	str	r1, [r0, #20]
   26250:	bcs	2628c <flatcc_builder_vector_push@@Base+0x94>
   26254:	ldr	r3, [r4, #16]
   26258:	adds	r3, r3, r5
   2625c:	beq	26274 <flatcc_builder_vector_push@@Base+0x7c>
   26260:	mov	r0, r3
   26264:	mov	r2, r6
   26268:	mov	r1, r7
   2626c:	bl	1451c <memcpy@plt>
   26270:	mov	r3, r0
   26274:	ldrd	r4, [sp]
   26278:	mov	r0, r3
   2627c:	ldrd	r6, [sp, #8]
   26280:	ldr	r8, [sp, #16]
   26284:	add	sp, sp, #20
   26288:	pop	{pc}		; (ldr pc, [sp], #4)
   2628c:	add	r1, r1, #1
   26290:	mvn	r2, #3
   26294:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   26298:	cmp	r0, #0
   2629c:	beq	26254 <flatcc_builder_vector_push@@Base+0x5c>
   262a0:	mov	r3, #0
   262a4:	b	26274 <flatcc_builder_vector_push@@Base+0x7c>
   262a8:	ldr	r3, [pc, #64]	; 262f0 <flatcc_builder_vector_push@@Base+0xf8>
   262ac:	movw	r2, #907	; 0x38b
   262b0:	ldr	r1, [pc, #60]	; 262f4 <flatcc_builder_vector_push@@Base+0xfc>
   262b4:	ldr	r0, [pc, #60]	; 262f8 <flatcc_builder_vector_push@@Base+0x100>
   262b8:	add	r3, pc, r3
   262bc:	add	r3, r3, #324	; 0x144
   262c0:	add	r1, pc, r1
   262c4:	add	r0, pc, r0
   262c8:	bl	145e8 <__assert_fail@plt>
   262cc:	ldr	r3, [pc, #40]	; 262fc <flatcc_builder_vector_push@@Base+0x104>
   262d0:	mov	r2, #908	; 0x38c
   262d4:	ldr	r1, [pc, #36]	; 26300 <flatcc_builder_vector_push@@Base+0x108>
   262d8:	ldr	r0, [pc, #36]	; 26304 <flatcc_builder_vector_push@@Base+0x10c>
   262dc:	add	r3, pc, r3
   262e0:	add	r3, r3, #324	; 0x144
   262e4:	add	r1, pc, r1
   262e8:	add	r0, pc, r0
   262ec:	bl	145e8 <__assert_fail@plt>
   262f0:	strdeq	sl, [r1], -r4
   262f4:	andeq	fp, r1, ip, lsr r7
   262f8:	andeq	fp, r1, r8, lsl #17
   262fc:	ldrdeq	sl, [r1], -r0
   26300:	andeq	fp, r1, r8, lsl r7
   26304:	muleq	r1, r0, r8

00026308 <flatcc_builder_append_vector@@Base>:
   26308:	ldr	ip, [r0, #32]
   2630c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26310:	ldrh	r3, [ip, #14]
   26314:	strd	r6, [sp, #8]
   26318:	str	r8, [sp, #16]
   2631c:	str	lr, [sp, #20]
   26320:	cmp	r3, #4
   26324:	bne	263d0 <flatcc_builder_append_vector@@Base+0xc8>
   26328:	mov	r6, r1
   2632c:	ldr	r1, [ip, #20]
   26330:	ldr	r4, [ip, #24]
   26334:	adds	r1, r2, r1
   26338:	movcs	r3, #1
   2633c:	movcc	r3, #0
   26340:	cmp	r4, r1
   26344:	movcs	r4, r3
   26348:	orrcc	r4, r3, #1
   2634c:	cmp	r4, #0
   26350:	bne	263f4 <flatcc_builder_append_vector@@Base+0xec>
   26354:	ldr	r7, [ip, #16]
   26358:	mov	r5, r0
   2635c:	ldr	r8, [r0, #20]
   26360:	ldr	r3, [r0, #24]
   26364:	mul	r7, r7, r2
   26368:	str	r1, [ip, #20]
   2636c:	add	r1, r7, r8
   26370:	cmp	r1, r3
   26374:	str	r1, [r0, #20]
   26378:	bcs	263b4 <flatcc_builder_append_vector@@Base+0xac>
   2637c:	ldr	r3, [r5, #16]
   26380:	adds	r3, r3, r8
   26384:	beq	2639c <flatcc_builder_append_vector@@Base+0x94>
   26388:	mov	r0, r3
   2638c:	mov	r2, r7
   26390:	mov	r1, r6
   26394:	bl	1451c <memcpy@plt>
   26398:	mov	r3, r0
   2639c:	ldrd	r4, [sp]
   263a0:	mov	r0, r3
   263a4:	ldrd	r6, [sp, #8]
   263a8:	ldr	r8, [sp, #16]
   263ac:	add	sp, sp, #20
   263b0:	pop	{pc}		; (ldr pc, [sp], #4)
   263b4:	add	r1, r1, #1
   263b8:	mvn	r2, #3
   263bc:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   263c0:	cmp	r0, #0
   263c4:	beq	2637c <flatcc_builder_append_vector@@Base+0x74>
   263c8:	mov	r3, r4
   263cc:	b	2639c <flatcc_builder_append_vector@@Base+0x94>
   263d0:	ldr	r3, [pc, #32]	; 263f8 <flatcc_builder_append_vector@@Base+0xf0>
   263d4:	movw	r2, #915	; 0x393
   263d8:	ldr	r1, [pc, #28]	; 263fc <flatcc_builder_append_vector@@Base+0xf4>
   263dc:	ldr	r0, [pc, #28]	; 26400 <flatcc_builder_append_vector@@Base+0xf8>
   263e0:	add	r3, pc, r3
   263e4:	add	r3, r3, #352	; 0x160
   263e8:	add	r1, pc, r1
   263ec:	add	r0, pc, r0
   263f0:	bl	145e8 <__assert_fail@plt>
   263f4:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>
   263f8:	andeq	sl, r1, ip, asr #29
   263fc:	andeq	fp, r1, r4, lsl r6
   26400:	andeq	fp, r1, r0, ror #14

00026404 <flatcc_builder_extend_offset_vector@@Base>:
   26404:	ldr	ip, [r0, #32]
   26408:	strd	r4, [sp, #-16]!
   2640c:	ldr	r3, [ip, #20]
   26410:	str	r6, [sp, #8]
   26414:	str	lr, [sp, #12]
   26418:	adds	r2, r1, r3
   2641c:	movcs	r3, #1
   26420:	movcc	r3, #0
   26424:	cmn	r2, #-1073741823	; 0xc0000001
   26428:	movls	r4, #0
   2642c:	movhi	r4, #1
   26430:	orrs	r4, r3, r4
   26434:	bne	2648c <flatcc_builder_extend_offset_vector@@Base+0x88>
   26438:	ldr	r6, [r0, #20]
   2643c:	mov	r5, r0
   26440:	ldr	r3, [r0, #24]
   26444:	str	r2, [ip, #20]
   26448:	add	r1, r6, r1, lsl #2
   2644c:	cmp	r1, r3
   26450:	str	r1, [r0, #20]
   26454:	bcs	26470 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   26458:	ldr	r0, [r5, #16]
   2645c:	add	r0, r0, r6
   26460:	ldrd	r4, [sp]
   26464:	ldr	r6, [sp, #8]
   26468:	add	sp, sp, #12
   2646c:	pop	{pc}		; (ldr pc, [sp], #4)
   26470:	add	r1, r1, #1
   26474:	mvn	r2, #3
   26478:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   2647c:	cmp	r0, #0
   26480:	beq	26458 <flatcc_builder_extend_offset_vector@@Base+0x54>
   26484:	mov	r0, r4
   26488:	b	26460 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   2648c:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>

00026490 <flatcc_builder_offset_vector_push@@Base>:
   26490:	ldr	r2, [r0, #32]
   26494:	strd	r4, [sp, #-16]!
   26498:	ldrh	r3, [r2, #14]
   2649c:	str	r6, [sp, #8]
   264a0:	str	lr, [sp, #12]
   264a4:	cmp	r3, #5
   264a8:	bne	26524 <flatcc_builder_offset_vector_push@@Base+0x94>
   264ac:	ldr	r3, [r2, #20]
   264b0:	cmn	r3, #-1073741823	; 0xc0000001
   264b4:	beq	26510 <flatcc_builder_offset_vector_push@@Base+0x80>
   264b8:	ldr	r5, [r0, #20]
   264bc:	mov	r6, r1
   264c0:	add	r3, r3, #1
   264c4:	mov	r4, r0
   264c8:	ldr	r1, [r0, #24]
   264cc:	str	r3, [r2, #20]
   264d0:	add	r3, r5, #4
   264d4:	cmp	r3, r1
   264d8:	str	r3, [r0, #20]
   264dc:	bcs	264fc <flatcc_builder_offset_vector_push@@Base+0x6c>
   264e0:	ldr	r3, [r4, #16]
   264e4:	adds	r0, r3, r5
   264e8:	strne	r6, [r3, r5]
   264ec:	ldrd	r4, [sp]
   264f0:	ldr	r6, [sp, #8]
   264f4:	add	sp, sp, #12
   264f8:	pop	{pc}		; (ldr pc, [sp], #4)
   264fc:	mvn	r2, #3
   26500:	add	r1, r5, #5
   26504:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   26508:	cmp	r0, #0
   2650c:	beq	264e0 <flatcc_builder_offset_vector_push@@Base+0x50>
   26510:	ldrd	r4, [sp]
   26514:	mov	r0, #0
   26518:	ldr	r6, [sp, #8]
   2651c:	add	sp, sp, #12
   26520:	pop	{pc}		; (ldr pc, [sp], #4)
   26524:	ldr	r3, [pc, #28]	; 26548 <flatcc_builder_offset_vector_push@@Base+0xb8>
   26528:	movw	r2, #934	; 0x3a6
   2652c:	ldr	r1, [pc, #24]	; 2654c <flatcc_builder_offset_vector_push@@Base+0xbc>
   26530:	ldr	r0, [pc, #24]	; 26550 <flatcc_builder_offset_vector_push@@Base+0xc0>
   26534:	add	r3, pc, r3
   26538:	add	r3, r3, #384	; 0x180
   2653c:	add	r1, pc, r1
   26540:	add	r0, pc, r0
   26544:	bl	145e8 <__assert_fail@plt>
   26548:	andeq	sl, r1, r8, ror sp
   2654c:	andeq	fp, r1, r0, asr #9
   26550:	andeq	fp, r1, r8, ror r6

00026554 <flatcc_builder_append_offset_vector@@Base>:
   26554:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26558:	mov	r4, r1
   2655c:	ldr	r1, [r0, #32]
   26560:	ldrh	r3, [r1, #14]
   26564:	strd	r6, [sp, #8]
   26568:	str	r8, [sp, #16]
   2656c:	str	lr, [sp, #20]
   26570:	cmp	r3, #5
   26574:	bne	26614 <flatcc_builder_append_offset_vector@@Base+0xc0>
   26578:	ldr	r3, [r1, #20]
   2657c:	adds	r3, r2, r3
   26580:	movcs	lr, #1
   26584:	movcc	lr, #0
   26588:	cmn	r3, #-1073741823	; 0xc0000001
   2658c:	movls	ip, #0
   26590:	movhi	ip, #1
   26594:	orrs	r8, lr, ip
   26598:	bne	26638 <flatcc_builder_append_offset_vector@@Base+0xe4>
   2659c:	ldr	r7, [r0, #20]
   265a0:	lsl	r6, r2, #2
   265a4:	mov	r5, r0
   265a8:	str	r3, [r1, #20]
   265ac:	ldr	r3, [r0, #24]
   265b0:	add	r1, r6, r7
   265b4:	cmp	r1, r3
   265b8:	str	r1, [r0, #20]
   265bc:	bcs	265f8 <flatcc_builder_append_offset_vector@@Base+0xa4>
   265c0:	ldr	r3, [r5, #16]
   265c4:	adds	r3, r3, r7
   265c8:	beq	265e0 <flatcc_builder_append_offset_vector@@Base+0x8c>
   265cc:	mov	r0, r3
   265d0:	mov	r2, r6
   265d4:	mov	r1, r4
   265d8:	bl	1451c <memcpy@plt>
   265dc:	mov	r3, r0
   265e0:	ldrd	r4, [sp]
   265e4:	mov	r0, r3
   265e8:	ldrd	r6, [sp, #8]
   265ec:	ldr	r8, [sp, #16]
   265f0:	add	sp, sp, #20
   265f4:	pop	{pc}		; (ldr pc, [sp], #4)
   265f8:	add	r1, r1, #1
   265fc:	mvn	r2, #3
   26600:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   26604:	cmp	r0, #0
   26608:	beq	265c0 <flatcc_builder_append_offset_vector@@Base+0x6c>
   2660c:	mov	r3, r8
   26610:	b	265e0 <flatcc_builder_append_offset_vector@@Base+0x8c>
   26614:	ldr	r3, [pc, #32]	; 2663c <flatcc_builder_append_offset_vector@@Base+0xe8>
   26618:	mov	r2, #948	; 0x3b4
   2661c:	ldr	r1, [pc, #28]	; 26640 <flatcc_builder_append_offset_vector@@Base+0xec>
   26620:	ldr	r0, [pc, #28]	; 26644 <flatcc_builder_append_offset_vector@@Base+0xf0>
   26624:	add	r3, pc, r3
   26628:	add	r3, r3, #420	; 0x1a4
   2662c:	add	r1, pc, r1
   26630:	add	r0, pc, r0
   26634:	bl	145e8 <__assert_fail@plt>
   26638:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>
   2663c:	andeq	sl, r1, r8, lsl #25
   26640:	ldrdeq	fp, [r1], -r0
   26644:	andeq	fp, r1, r8, lsl #11

00026648 <flatcc_builder_extend_string@@Base>:
   26648:	ldr	r2, [r0, #32]
   2664c:	strd	r4, [sp, #-16]!
   26650:	ldrh	r3, [r2, #14]
   26654:	str	r6, [sp, #8]
   26658:	str	lr, [sp, #12]
   2665c:	cmp	r3, #6
   26660:	bne	266c8 <flatcc_builder_extend_string@@Base+0x80>
   26664:	ldr	r3, [r2, #20]
   26668:	adds	r3, r1, r3
   2666c:	bcs	266c4 <flatcc_builder_extend_string@@Base+0x7c>
   26670:	ldr	r5, [r0, #20]
   26674:	mov	r4, r0
   26678:	str	r3, [r2, #20]
   2667c:	ldr	r3, [r0, #24]
   26680:	add	r1, r1, r5
   26684:	cmp	r1, r3
   26688:	str	r1, [r0, #20]
   2668c:	bcs	266a8 <flatcc_builder_extend_string@@Base+0x60>
   26690:	ldr	r0, [r4, #16]
   26694:	add	r0, r0, r5
   26698:	ldrd	r4, [sp]
   2669c:	ldr	r6, [sp, #8]
   266a0:	add	sp, sp, #12
   266a4:	pop	{pc}		; (ldr pc, [sp], #4)
   266a8:	add	r1, r1, #1
   266ac:	mvn	r2, #3
   266b0:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   266b4:	cmp	r0, #0
   266b8:	beq	26690 <flatcc_builder_extend_string@@Base+0x48>
   266bc:	mov	r0, #0
   266c0:	b	26698 <flatcc_builder_extend_string@@Base+0x50>
   266c4:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>
   266c8:	ldr	r3, [pc, #28]	; 266ec <flatcc_builder_extend_string@@Base+0xa4>
   266cc:	movw	r2, #957	; 0x3bd
   266d0:	ldr	r1, [pc, #24]	; 266f0 <flatcc_builder_extend_string@@Base+0xa8>
   266d4:	ldr	r0, [pc, #24]	; 266f4 <flatcc_builder_extend_string@@Base+0xac>
   266d8:	add	r3, pc, r3
   266dc:	add	r3, r3, #456	; 0x1c8
   266e0:	add	r1, pc, r1
   266e4:	add	r0, pc, r0
   266e8:	bl	145e8 <__assert_fail@plt>
   266ec:	ldrdeq	sl, [r1], -r4
   266f0:	andeq	fp, r1, ip, lsl r3
   266f4:	andeq	fp, r1, r8, lsl #10

000266f8 <flatcc_builder_append_string@@Base>:
   266f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   266fc:	strd	r6, [sp, #8]
   26700:	mov	r7, r1
   26704:	ldr	r1, [r0, #32]
   26708:	str	r8, [sp, #16]
   2670c:	str	lr, [sp, #20]
   26710:	ldrh	r3, [r1, #14]
   26714:	cmp	r3, #6
   26718:	bne	267a4 <flatcc_builder_append_string@@Base+0xac>
   2671c:	ldr	r3, [r1, #20]
   26720:	mov	r5, r2
   26724:	adds	r3, r2, r3
   26728:	bcs	267a0 <flatcc_builder_append_string@@Base+0xa8>
   2672c:	ldr	r6, [r0, #20]
   26730:	mov	r4, r0
   26734:	str	r3, [r1, #20]
   26738:	ldr	r3, [r0, #24]
   2673c:	add	r1, r2, r6
   26740:	cmp	r1, r3
   26744:	str	r1, [r0, #20]
   26748:	bcs	26784 <flatcc_builder_append_string@@Base+0x8c>
   2674c:	ldr	r3, [r4, #16]
   26750:	adds	r3, r3, r6
   26754:	beq	2676c <flatcc_builder_append_string@@Base+0x74>
   26758:	mov	r0, r3
   2675c:	mov	r2, r5
   26760:	mov	r1, r7
   26764:	bl	1451c <memcpy@plt>
   26768:	mov	r3, r0
   2676c:	ldrd	r4, [sp]
   26770:	mov	r0, r3
   26774:	ldrd	r6, [sp, #8]
   26778:	ldr	r8, [sp, #16]
   2677c:	add	sp, sp, #20
   26780:	pop	{pc}		; (ldr pc, [sp], #4)
   26784:	add	r1, r1, #1
   26788:	mvn	r2, #3
   2678c:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   26790:	cmp	r0, #0
   26794:	beq	2674c <flatcc_builder_append_string@@Base+0x54>
   26798:	mov	r3, #0
   2679c:	b	2676c <flatcc_builder_append_string@@Base+0x74>
   267a0:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>
   267a4:	ldr	r3, [pc, #28]	; 267c8 <flatcc_builder_append_string@@Base+0xd0>
   267a8:	movw	r2, #966	; 0x3c6
   267ac:	ldr	r1, [pc, #24]	; 267cc <flatcc_builder_append_string@@Base+0xd4>
   267b0:	ldr	r0, [pc, #24]	; 267d0 <flatcc_builder_append_string@@Base+0xd8>
   267b4:	add	r3, pc, r3
   267b8:	add	r3, r3, #488	; 0x1e8
   267bc:	add	r1, pc, r1
   267c0:	add	r0, pc, r0
   267c4:	bl	145e8 <__assert_fail@plt>
   267c8:	strdeq	sl, [r1], -r8
   267cc:	andeq	fp, r1, r0, asr #4
   267d0:	andeq	fp, r1, ip, lsr #8

000267d4 <flatcc_builder_append_string_str@@Base>:
   267d4:	strd	r4, [sp, #-16]!
   267d8:	mov	r5, r0
   267dc:	mov	r0, r1
   267e0:	mov	r4, r1
   267e4:	str	r6, [sp, #8]
   267e8:	str	lr, [sp, #12]
   267ec:	bl	14570 <strlen@plt>
   267f0:	mov	r2, r0
   267f4:	mov	r1, r4
   267f8:	ldr	r6, [sp, #8]
   267fc:	mov	r0, r5
   26800:	ldrd	r4, [sp]
   26804:	ldr	lr, [sp, #12]
   26808:	add	sp, sp, #16
   2680c:	b	266f8 <flatcc_builder_append_string@@Base>

00026810 <flatcc_builder_append_string_strn@@Base>:
   26810:	strd	r4, [sp, #-16]!
   26814:	mov	r4, r1
   26818:	mov	r1, #0
   2681c:	str	r6, [sp, #8]
   26820:	mov	r6, r0
   26824:	mov	r0, r4
   26828:	mov	r5, r2
   2682c:	str	lr, [sp, #12]
   26830:	bl	145b8 <memchr@plt>
   26834:	cmp	r0, #0
   26838:	mov	r1, r4
   2683c:	ldr	lr, [sp, #12]
   26840:	subne	r5, r0, r4
   26844:	mov	r0, r6
   26848:	mov	r2, r5
   2684c:	ldrd	r4, [sp]
   26850:	ldr	r6, [sp, #8]
   26854:	add	sp, sp, #16
   26858:	b	266f8 <flatcc_builder_append_string@@Base>

0002685c <flatcc_builder_truncate_vector@@Base>:
   2685c:	mov	r3, r0
   26860:	ldr	r0, [r0, #32]
   26864:	str	r4, [sp, #-8]!
   26868:	ldrh	r2, [r0, #14]
   2686c:	str	lr, [sp, #4]
   26870:	cmp	r2, #4
   26874:	bne	268c4 <flatcc_builder_truncate_vector@@Base+0x68>
   26878:	mov	lr, r1
   2687c:	ldr	r1, [r0, #20]
   26880:	cmp	r1, lr
   26884:	bcc	268e8 <flatcc_builder_truncate_vector@@Base+0x8c>
   26888:	ldr	r2, [r0, #16]
   2688c:	sub	ip, r1, lr
   26890:	mov	r1, #0
   26894:	str	ip, [r0, #20]
   26898:	ldr	r0, [r3, #16]
   2689c:	ldr	ip, [r3, #20]
   268a0:	mul	r2, r2, lr
   268a4:	sub	ip, ip, r2
   268a8:	add	r0, r0, ip
   268ac:	str	ip, [r3, #20]
   268b0:	bl	14594 <memset@plt>
   268b4:	ldr	r4, [sp]
   268b8:	add	sp, sp, #4
   268bc:	mov	r0, #0
   268c0:	pop	{pc}		; (ldr pc, [sp], #4)
   268c4:	ldr	r3, [pc, #64]	; 2690c <flatcc_builder_truncate_vector@@Base+0xb0>
   268c8:	movw	r2, #985	; 0x3d9
   268cc:	ldr	r1, [pc, #60]	; 26910 <flatcc_builder_truncate_vector@@Base+0xb4>
   268d0:	ldr	r0, [pc, #60]	; 26914 <flatcc_builder_truncate_vector@@Base+0xb8>
   268d4:	add	r3, pc, r3
   268d8:	add	r3, r3, #520	; 0x208
   268dc:	add	r1, pc, r1
   268e0:	add	r0, pc, r0
   268e4:	bl	145e8 <__assert_fail@plt>
   268e8:	ldr	r3, [pc, #40]	; 26918 <flatcc_builder_truncate_vector@@Base+0xbc>
   268ec:	movw	r2, #986	; 0x3da
   268f0:	ldr	r1, [pc, #36]	; 2691c <flatcc_builder_truncate_vector@@Base+0xc0>
   268f4:	ldr	r0, [pc, #36]	; 26920 <flatcc_builder_truncate_vector@@Base+0xc4>
   268f8:	add	r3, pc, r3
   268fc:	add	r3, r3, #520	; 0x208
   26900:	add	r1, pc, r1
   26904:	add	r0, pc, r0
   26908:	bl	145e8 <__assert_fail@plt>
   2690c:	ldrdeq	sl, [r1], -r8
   26910:	andeq	fp, r1, r0, lsr #2
   26914:	andeq	fp, r1, ip, ror #4
   26918:			; <UNDEFINED> instruction: 0x0001a9b4
   2691c:	strdeq	fp, [r1], -ip
   26920:	andeq	fp, r1, r4, lsl r3

00026924 <flatcc_builder_truncate_offset_vector@@Base>:
   26924:	mov	r3, r0
   26928:	ldr	r0, [r0, #32]
   2692c:	str	r4, [sp, #-8]!
   26930:	ldrh	r2, [r0, #14]
   26934:	str	lr, [sp, #4]
   26938:	cmp	r2, #5
   2693c:	bne	2698c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   26940:	mov	lr, r1
   26944:	ldr	r1, [r0, #20]
   26948:	cmp	r1, lr
   2694c:	bcc	269b0 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   26950:	ldr	r2, [r0, #16]
   26954:	sub	ip, r1, lr
   26958:	mov	r1, #0
   2695c:	str	ip, [r0, #20]
   26960:	ldr	r0, [r3, #16]
   26964:	ldr	ip, [r3, #20]
   26968:	mul	r2, r2, lr
   2696c:	sub	ip, ip, r2
   26970:	add	r0, r0, ip
   26974:	str	ip, [r3, #20]
   26978:	bl	14594 <memset@plt>
   2697c:	ldr	r4, [sp]
   26980:	add	sp, sp, #4
   26984:	mov	r0, #0
   26988:	pop	{pc}		; (ldr pc, [sp], #4)
   2698c:	ldr	r3, [pc, #64]	; 269d4 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   26990:	movw	r2, #994	; 0x3e2
   26994:	ldr	r1, [pc, #60]	; 269d8 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   26998:	ldr	r0, [pc, #60]	; 269dc <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   2699c:	add	r3, pc, r3
   269a0:	add	r3, r3, #552	; 0x228
   269a4:	add	r1, pc, r1
   269a8:	add	r0, pc, r0
   269ac:	bl	145e8 <__assert_fail@plt>
   269b0:	ldr	r3, [pc, #40]	; 269e0 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   269b4:	movw	r2, #995	; 0x3e3
   269b8:	ldr	r1, [pc, #36]	; 269e4 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   269bc:	ldr	r0, [pc, #36]	; 269e8 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   269c0:	add	r3, pc, r3
   269c4:	add	r3, r3, #552	; 0x228
   269c8:	add	r1, pc, r1
   269cc:	add	r0, pc, r0
   269d0:	bl	145e8 <__assert_fail@plt>
   269d4:	andeq	sl, r1, r0, lsl r9
   269d8:	andeq	fp, r1, r8, asr r0
   269dc:	andeq	fp, r1, r0, lsl r2
   269e0:	andeq	sl, r1, ip, ror #17
   269e4:	andeq	fp, r1, r4, lsr r0
   269e8:	andeq	fp, r1, r0, ror r2

000269ec <flatcc_builder_truncate_string@@Base>:
   269ec:	str	r4, [sp, #-8]!
   269f0:	str	lr, [sp, #4]
   269f4:	ldr	lr, [r0, #32]
   269f8:	ldrh	r2, [lr, #14]
   269fc:	cmp	r2, #6
   26a00:	bne	26a50 <flatcc_builder_truncate_string@@Base+0x64>
   26a04:	ldr	r2, [lr, #20]
   26a08:	mov	ip, r1
   26a0c:	cmp	r2, r1
   26a10:	bcc	26a74 <flatcc_builder_truncate_string@@Base+0x88>
   26a14:	sub	r1, r2, r1
   26a18:	mov	r3, r0
   26a1c:	ldr	r0, [r0, #16]
   26a20:	mov	r2, ip
   26a24:	str	r1, [lr, #20]
   26a28:	mov	r1, #0
   26a2c:	ldr	lr, [r3, #20]
   26a30:	sub	ip, lr, ip
   26a34:	add	r0, r0, ip
   26a38:	str	ip, [r3, #20]
   26a3c:	bl	14594 <memset@plt>
   26a40:	ldr	r4, [sp]
   26a44:	add	sp, sp, #4
   26a48:	mov	r0, #0
   26a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   26a50:	ldr	r3, [pc, #64]	; 26a98 <flatcc_builder_truncate_string@@Base+0xac>
   26a54:	movw	r2, #1003	; 0x3eb
   26a58:	ldr	r1, [pc, #60]	; 26a9c <flatcc_builder_truncate_string@@Base+0xb0>
   26a5c:	ldr	r0, [pc, #60]	; 26aa0 <flatcc_builder_truncate_string@@Base+0xb4>
   26a60:	add	r3, pc, r3
   26a64:	add	r3, r3, #592	; 0x250
   26a68:	add	r1, pc, r1
   26a6c:	add	r0, pc, r0
   26a70:	bl	145e8 <__assert_fail@plt>
   26a74:	ldr	r3, [pc, #40]	; 26aa4 <flatcc_builder_truncate_string@@Base+0xb8>
   26a78:	mov	r2, #1004	; 0x3ec
   26a7c:	ldr	r1, [pc, #36]	; 26aa8 <flatcc_builder_truncate_string@@Base+0xbc>
   26a80:	ldr	r0, [pc, #36]	; 26aac <flatcc_builder_truncate_string@@Base+0xc0>
   26a84:	add	r3, pc, r3
   26a88:	add	r3, r3, #592	; 0x250
   26a8c:	add	r1, pc, r1
   26a90:	add	r0, pc, r0
   26a94:	bl	145e8 <__assert_fail@plt>
   26a98:	andeq	sl, r1, ip, asr #16
   26a9c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   26aa0:	andeq	fp, r1, r0, lsl #3
   26aa4:	andeq	sl, r1, r8, lsr #16
   26aa8:	andeq	sl, r1, r0, ror pc
   26aac:	andeq	fp, r1, r8, ror #3

00026ab0 <flatcc_builder_start_vector@@Base>:
   26ab0:	cmp	r2, #4
   26ab4:	strd	r4, [sp, #-16]!
   26ab8:	mov	r5, r1
   26abc:	movcs	r1, r2
   26ac0:	movcc	r1, #4
   26ac4:	str	r6, [sp, #8]
   26ac8:	mov	r4, r0
   26acc:	mov	r6, r3
   26ad0:	str	lr, [sp, #12]
   26ad4:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   26ad8:	cmp	r0, #0
   26adc:	bne	26b38 <flatcc_builder_start_vector@@Base+0x88>
   26ae0:	ldr	r3, [r4, #28]
   26ae4:	mov	lr, #4
   26ae8:	ldr	r2, [r4, #32]
   26aec:	ldr	r1, [r4, #64]	; 0x40
   26af0:	ldr	ip, [r4, #60]	; 0x3c
   26af4:	strh	lr, [r2, #14]
   26af8:	str	r5, [r2, #16]
   26afc:	sub	r1, r1, r3
   26b00:	str	r0, [r2, #20]
   26b04:	cmn	r1, #4
   26b08:	str	r6, [r2, #24]
   26b0c:	add	ip, ip, r3
   26b10:	mvnhi	r3, #3
   26b14:	strls	r1, [r4, #24]
   26b18:	strhi	r3, [r4, #24]
   26b1c:	mvn	r3, #3
   26b20:	str	ip, [r4, #16]
   26b24:	str	r3, [r2, #4]
   26b28:	ldrd	r4, [sp]
   26b2c:	ldr	r6, [sp, #8]
   26b30:	add	sp, sp, #12
   26b34:	pop	{pc}		; (ldr pc, [sp], #4)
   26b38:	mvn	r0, #0
   26b3c:	b	26b28 <flatcc_builder_start_vector@@Base+0x78>

00026b40 <flatcc_builder_start_offset_vector@@Base>:
   26b40:	mov	r1, #4
   26b44:	strd	r4, [sp, #-16]!
   26b48:	mov	r4, r0
   26b4c:	str	r6, [sp, #8]
   26b50:	str	lr, [sp, #12]
   26b54:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   26b58:	cmp	r0, #0
   26b5c:	bne	26bb4 <flatcc_builder_start_offset_vector@@Base+0x74>
   26b60:	ldr	ip, [r4, #28]
   26b64:	mov	lr, #4
   26b68:	mov	r5, #5
   26b6c:	ldr	r3, [r4, #32]
   26b70:	ldr	r2, [r4, #64]	; 0x40
   26b74:	ldr	r1, [r4, #60]	; 0x3c
   26b78:	strh	r5, [r3, #14]
   26b7c:	str	lr, [r3, #16]
   26b80:	sub	r2, r2, ip
   26b84:	str	r0, [r3, #20]
   26b88:	cmn	r2, #4
   26b8c:	mvnhi	r2, #3
   26b90:	add	r1, r1, ip
   26b94:	str	r1, [r4, #16]
   26b98:	str	r2, [r4, #24]
   26b9c:	mvn	r2, #3
   26ba0:	str	r2, [r3, #4]
   26ba4:	ldrd	r4, [sp]
   26ba8:	ldr	r6, [sp, #8]
   26bac:	add	sp, sp, #12
   26bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   26bb4:	mvn	r0, #0
   26bb8:	b	26ba4 <flatcc_builder_start_offset_vector@@Base+0x64>

00026bbc <flatcc_builder_start_string@@Base>:
   26bbc:	mov	r1, #1
   26bc0:	strd	r4, [sp, #-16]!
   26bc4:	mov	r4, r0
   26bc8:	str	r6, [sp, #8]
   26bcc:	str	lr, [sp, #12]
   26bd0:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   26bd4:	cmp	r0, #0
   26bd8:	bne	26c30 <flatcc_builder_start_string@@Base+0x74>
   26bdc:	ldr	ip, [r4, #28]
   26be0:	mov	lr, #1
   26be4:	mov	r5, #6
   26be8:	ldr	r3, [r4, #32]
   26bec:	ldr	r2, [r4, #64]	; 0x40
   26bf0:	ldr	r1, [r4, #60]	; 0x3c
   26bf4:	strh	r5, [r3, #14]
   26bf8:	str	lr, [r3, #16]
   26bfc:	sub	r2, r2, ip
   26c00:	str	r0, [r3, #20]
   26c04:	cmn	r2, #4
   26c08:	mvnhi	r2, #3
   26c0c:	add	r1, r1, ip
   26c10:	str	r1, [r4, #16]
   26c14:	str	r2, [r4, #24]
   26c18:	mvn	r2, #3
   26c1c:	str	r2, [r3, #4]
   26c20:	ldrd	r4, [sp]
   26c24:	ldr	r6, [sp, #8]
   26c28:	add	sp, sp, #12
   26c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   26c30:	mvn	r0, #0
   26c34:	b	26c20 <flatcc_builder_start_string@@Base+0x64>

00026c38 <flatcc_builder_reserve_table@@Base>:
   26c38:	cmp	r1, #0
   26c3c:	strd	r4, [sp, #-20]!	; 0xffffffec
   26c40:	strd	r6, [sp, #8]
   26c44:	str	lr, [sp, #16]
   26c48:	sub	sp, sp, #12
   26c4c:	blt	26d30 <flatcc_builder_reserve_table@@Base+0xf8>
   26c50:	ldr	r2, [r0, #32]
   26c54:	add	r1, r1, #2
   26c58:	mov	r4, r0
   26c5c:	lsl	r5, r1, #1
   26c60:	ldr	r1, [r0, #56]	; 0x38
   26c64:	ldrh	r6, [r2, #28]
   26c68:	ldr	r3, [r2, #16]
   26c6c:	add	r6, r3, r6, lsl #1
   26c70:	add	r2, r6, r5
   26c74:	cmp	r2, r1
   26c78:	bhi	26ce0 <flatcc_builder_reserve_table@@Base+0xa8>
   26c7c:	ldr	r3, [r4, #52]	; 0x34
   26c80:	adds	r3, r3, r6
   26c84:	mvneq	r0, #0
   26c88:	streq	r3, [r4, #4]
   26c8c:	beq	26ccc <flatcc_builder_reserve_table@@Base+0x94>
   26c90:	ldr	r2, [r4, #32]
   26c94:	add	r3, r3, #4
   26c98:	ldr	r1, [r4, #80]	; 0x50
   26c9c:	ldr	r6, [r2, #20]
   26ca0:	str	r3, [r4, #4]
   26ca4:	add	r2, r5, r6
   26ca8:	sub	r2, r2, #3
   26cac:	cmp	r2, r1
   26cb0:	bhi	26d08 <flatcc_builder_reserve_table@@Base+0xd0>
   26cb4:	ldr	r3, [r4, #76]	; 0x4c
   26cb8:	add	r3, r3, r6
   26cbc:	clz	r0, r3
   26cc0:	lsr	r0, r0, #5
   26cc4:	str	r3, [r4]
   26cc8:	rsb	r0, r0, #0
   26ccc:	add	sp, sp, #12
   26cd0:	ldrd	r4, [sp]
   26cd4:	ldrd	r6, [sp, #8]
   26cd8:	add	sp, sp, #16
   26cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   26ce0:	mov	ip, #0
   26ce4:	add	r1, r0, #52	; 0x34
   26ce8:	ldr	r0, [r0, #40]	; 0x28
   26cec:	mov	r3, #1
   26cf0:	str	ip, [sp]
   26cf4:	ldr	r7, [r4, #48]	; 0x30
   26cf8:	blx	r7
   26cfc:	cmp	r0, #0
   26d00:	beq	26c7c <flatcc_builder_reserve_table@@Base+0x44>
   26d04:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>
   26d08:	mov	ip, #3
   26d0c:	mov	r3, #0
   26d10:	ldr	r0, [r4, #40]	; 0x28
   26d14:	add	r1, r4, #76	; 0x4c
   26d18:	str	ip, [sp]
   26d1c:	ldr	r5, [r4, #48]	; 0x30
   26d20:	blx	r5
   26d24:	cmp	r0, #0
   26d28:	beq	26cb4 <flatcc_builder_reserve_table@@Base+0x7c>
   26d2c:	b	26d04 <flatcc_builder_reserve_table@@Base+0xcc>
   26d30:	ldr	r3, [pc, #28]	; 26d54 <flatcc_builder_reserve_table@@Base+0x11c>
   26d34:	movw	r2, #1065	; 0x429
   26d38:	ldr	r1, [pc, #24]	; 26d58 <flatcc_builder_reserve_table@@Base+0x120>
   26d3c:	ldr	r0, [pc, #24]	; 26d5c <flatcc_builder_reserve_table@@Base+0x124>
   26d40:	add	r3, pc, r3
   26d44:	add	r3, r3, #624	; 0x270
   26d48:	add	r1, pc, r1
   26d4c:	add	r0, pc, r0
   26d50:	bl	145e8 <__assert_fail@plt>
   26d54:	andeq	sl, r1, ip, ror #10
   26d58:			; <UNDEFINED> instruction: 0x0001acb4
   26d5c:	andeq	sl, r1, r0, asr pc

00026d60 <flatcc_builder_start_table@@Base>:
   26d60:	strd	r4, [sp, #-32]!	; 0xffffffe0
   26d64:	mov	r5, r1
   26d68:	mov	r1, #4
   26d6c:	strd	r6, [sp, #8]
   26d70:	mov	r4, r0
   26d74:	strd	r8, [sp, #16]
   26d78:	str	sl, [sp, #24]
   26d7c:	str	lr, [sp, #28]
   26d80:	sub	sp, sp, #8
   26d84:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   26d88:	subs	r7, r0, #0
   26d8c:	bne	26ed4 <flatcc_builder_start_table@@Base+0x174>
   26d90:	ldm	r4, {r0, r2}
   26d94:	add	r5, r5, #2
   26d98:	movw	ip, #15186	; 0x3b52
   26d9c:	movt	ip, #12137	; 0x2f69
   26da0:	lsl	r5, r5, #1
   26da4:	mov	r8, #3
   26da8:	ldrh	lr, [r4, #8]
   26dac:	ldr	r1, [r4, #52]	; 0x34
   26db0:	ldr	sl, [r4, #76]	; 0x4c
   26db4:	ldr	r3, [r4, #32]
   26db8:	sub	r2, r2, r1
   26dbc:	ldr	r9, [r4, #56]	; 0x38
   26dc0:	add	r6, r2, lr, lsl #1
   26dc4:	sub	r0, r0, sl
   26dc8:	ldr	sl, [r4, #12]
   26dcc:	str	r2, [r3, #16]
   26dd0:	add	r2, r6, r5
   26dd4:	str	r0, [r3, #20]
   26dd8:	cmp	r2, r9
   26ddc:	str	sl, [r3, #24]
   26de0:	strh	lr, [r3, #28]
   26de4:	strh	r7, [r4, #8]
   26de8:	str	ip, [r4, #12]
   26dec:	strh	r8, [r3, #14]
   26df0:	bls	26e18 <flatcc_builder_start_table@@Base+0xb8>
   26df4:	mov	r3, #1
   26df8:	add	r1, r4, #52	; 0x34
   26dfc:	str	r7, [sp]
   26e00:	ldr	r0, [r4, #40]	; 0x28
   26e04:	ldr	r8, [r4, #48]	; 0x30
   26e08:	blx	r8
   26e0c:	cmp	r0, #0
   26e10:	bne	26ed0 <flatcc_builder_start_table@@Base+0x170>
   26e14:	ldr	r1, [r4, #52]	; 0x34
   26e18:	adds	r6, r6, r1
   26e1c:	streq	r6, [r4, #4]
   26e20:	beq	26ed4 <flatcc_builder_start_table@@Base+0x174>
   26e24:	ldr	r1, [r4, #32]
   26e28:	sub	r2, r5, #3
   26e2c:	add	r6, r6, #4
   26e30:	ldr	r3, [r4, #80]	; 0x50
   26e34:	ldr	r5, [r1, #20]
   26e38:	str	r6, [r4, #4]
   26e3c:	add	r2, r2, r5
   26e40:	cmp	r2, r3
   26e44:	bhi	26eac <flatcc_builder_start_table@@Base+0x14c>
   26e48:	ldr	r3, [r4, #76]	; 0x4c
   26e4c:	add	r3, r3, r5
   26e50:	cmp	r3, #0
   26e54:	str	r3, [r4]
   26e58:	beq	26ed4 <flatcc_builder_start_table@@Base+0x174>
   26e5c:	ldr	r0, [r4, #28]
   26e60:	movw	r2, #65532	; 0xfffc
   26e64:	ldr	ip, [r4, #32]
   26e68:	ldr	r3, [r4, #64]	; 0x40
   26e6c:	ldr	r1, [r4, #60]	; 0x3c
   26e70:	sub	r3, r3, r0
   26e74:	cmp	r3, r2
   26e78:	add	r1, r1, r0
   26e7c:	movcs	r3, r2
   26e80:	str	r1, [r4, #16]
   26e84:	str	r3, [r4, #24]
   26e88:	str	r2, [ip, #4]
   26e8c:	mov	r0, r7
   26e90:	add	sp, sp, #8
   26e94:	ldrd	r4, [sp]
   26e98:	ldrd	r6, [sp, #8]
   26e9c:	ldrd	r8, [sp, #16]
   26ea0:	ldr	sl, [sp, #24]
   26ea4:	add	sp, sp, #28
   26ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   26eac:	mov	ip, #3
   26eb0:	mov	r3, #0
   26eb4:	ldr	r0, [r4, #40]	; 0x28
   26eb8:	add	r1, r4, #76	; 0x4c
   26ebc:	str	ip, [sp]
   26ec0:	ldr	r6, [r4, #48]	; 0x30
   26ec4:	blx	r6
   26ec8:	cmp	r0, #0
   26ecc:	beq	26e48 <flatcc_builder_start_table@@Base+0xe8>
   26ed0:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>
   26ed4:	mvn	r7, #0
   26ed8:	b	26e8c <flatcc_builder_start_table@@Base+0x12c>

00026edc <flatcc_builder_create_vtable@@Base>:
   26edc:	mov	r3, #0
   26ee0:	strd	r4, [sp, #-16]!
   26ee4:	mov	r5, r0
   26ee8:	ldr	r0, [r0, #152]	; 0x98
   26eec:	cmp	r2, #0
   26ef0:	str	r6, [sp, #8]
   26ef4:	str	lr, [sp, #12]
   26ef8:	sub	sp, sp, #80	; 0x50
   26efc:	str	r3, [sp, #8]
   26f00:	str	r3, [sp, #12]
   26f04:	beq	26f7c <flatcc_builder_create_vtable@@Base+0xa0>
   26f08:	mov	r3, #1
   26f0c:	cmp	r0, #0
   26f10:	strd	r2, [sp, #8]
   26f14:	str	r1, [sp, #16]
   26f18:	str	r2, [sp, #20]
   26f1c:	beq	26fb4 <flatcc_builder_create_vtable@@Base+0xd8>
   26f20:	ldr	r3, [r5, #136]	; 0x88
   26f24:	sub	r4, r3, r2
   26f28:	cmp	r3, r4
   26f2c:	ble	26f90 <flatcc_builder_create_vtable@@Base+0xb4>
   26f30:	mov	r3, r4
   26f34:	add	r1, sp, #16
   26f38:	str	r2, [sp]
   26f3c:	ldr	r2, [sp, #12]
   26f40:	ldr	r0, [r5, #36]	; 0x24
   26f44:	ldr	r6, [r5, #44]	; 0x2c
   26f48:	blx	r6
   26f4c:	cmp	r0, #0
   26f50:	bne	27000 <flatcc_builder_create_vtable@@Base+0x124>
   26f54:	cmp	r4, #0
   26f58:	str	r4, [r5, #136]	; 0x88
   26f5c:	beq	26f64 <flatcc_builder_create_vtable@@Base+0x88>
   26f60:	add	r4, r4, #1
   26f64:	mov	r0, r4
   26f68:	add	sp, sp, #80	; 0x50
   26f6c:	ldrd	r4, [sp]
   26f70:	ldr	r6, [sp, #8]
   26f74:	add	sp, sp, #12
   26f78:	pop	{pc}		; (ldr pc, [sp], #4)
   26f7c:	cmp	r0, #0
   26f80:	bne	26f90 <flatcc_builder_create_vtable@@Base+0xb4>
   26f84:	ldr	r3, [r5, #180]	; 0xb4
   26f88:	cmp	r3, #0
   26f8c:	beq	26ff8 <flatcc_builder_create_vtable@@Base+0x11c>
   26f90:	ldr	r3, [pc, #108]	; 27004 <flatcc_builder_create_vtable@@Base+0x128>
   26f94:	movw	r2, #647	; 0x287
   26f98:	ldr	r1, [pc, #104]	; 27008 <flatcc_builder_create_vtable@@Base+0x12c>
   26f9c:	ldr	r0, [pc, #104]	; 2700c <flatcc_builder_create_vtable@@Base+0x130>
   26fa0:	add	r3, pc, r3
   26fa4:	add	r3, r3, #44	; 0x2c
   26fa8:	add	r1, pc, r1
   26fac:	add	r0, pc, r0
   26fb0:	bl	145e8 <__assert_fail@plt>
   26fb4:	ldr	r3, [r5, #180]	; 0xb4
   26fb8:	cmp	r3, #0
   26fbc:	bne	26f20 <flatcc_builder_create_vtable@@Base+0x44>
   26fc0:	ldr	r4, [r5, #140]	; 0x8c
   26fc4:	mov	r0, r2
   26fc8:	add	r2, r4, r2
   26fcc:	str	r2, [r5, #140]	; 0x8c
   26fd0:	mov	r3, r4
   26fd4:	add	r1, sp, #16
   26fd8:	str	r0, [sp]
   26fdc:	ldr	r2, [sp, #12]
   26fe0:	ldr	r0, [r5, #36]	; 0x24
   26fe4:	ldr	r5, [r5, #44]	; 0x2c
   26fe8:	blx	r5
   26fec:	cmp	r0, #0
   26ff0:	beq	26f60 <flatcc_builder_create_vtable@@Base+0x84>
   26ff4:	bl	24dd8 <flatcc_builder_default_alloc@@Base+0x158>
   26ff8:	ldr	r4, [r5, #140]	; 0x8c
   26ffc:	b	26fd0 <flatcc_builder_create_vtable@@Base+0xf4>
   27000:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   27004:	andeq	sl, r1, ip, lsl #6
   27008:	andeq	sl, r1, r4, asr sl
   2700c:	ldrdeq	sl, [r1], -r8

00027010 <flatcc_builder_create_cached_vtable@@Base>:
   27010:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27014:	strd	r6, [sp, #8]
   27018:	mov	r6, r0
   2701c:	strd	r8, [sp, #16]
   27020:	mov	r9, r2
   27024:	mov	r8, r3
   27028:	strd	sl, [sp, #24]
   2702c:	str	lr, [sp, #32]
   27030:	sub	sp, sp, #28
   27034:	str	r1, [sp, #8]
   27038:	ldr	r1, [r0, #116]	; 0x74
   2703c:	cmp	r1, #0
   27040:	rsbne	r1, r1, #32
   27044:	beq	271cc <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   27048:	ldr	sl, [r6, #92]	; 0x5c
   2704c:	lsr	r8, r8, r1
   27050:	adds	fp, sl, r8, lsl #2
   27054:	str	fp, [sp, #12]
   27058:	beq	27268 <flatcc_builder_create_cached_vtable@@Base+0x258>
   2705c:	ldr	r5, [sl, r8, lsl #2]
   27060:	cmp	r5, #0
   27064:	beq	2729c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   27068:	mov	r3, #0
   2706c:	str	r8, [sp, #16]
   27070:	mov	r8, fp
   27074:	mov	fp, r6
   27078:	ldr	r7, [r6, #68]	; 0x44
   2707c:	str	r3, [sp, #20]
   27080:	ldr	r3, [r6, #100]	; 0x64
   27084:	mov	r6, r3
   27088:	add	r4, r6, r5
   2708c:	ldr	r1, [r4, #8]
   27090:	ldrh	r2, [r7, r1]
   27094:	add	r1, r7, r1
   27098:	cmp	r2, r9
   2709c:	bne	27178 <flatcc_builder_create_cached_vtable@@Base+0x168>
   270a0:	mov	r2, r9
   270a4:	ldr	r0, [sp, #8]
   270a8:	bl	14528 <memcmp@plt>
   270ac:	cmp	r0, #0
   270b0:	bne	27178 <flatcc_builder_create_cached_vtable@@Base+0x168>
   270b4:	ldr	r1, [r4, #4]
   270b8:	ldr	r2, [fp, #152]	; 0x98
   270bc:	cmp	r1, r2
   270c0:	beq	27184 <flatcc_builder_create_cached_vtable@@Base+0x174>
   270c4:	ldr	r5, [r4, #12]
   270c8:	add	r8, r4, #12
   270cc:	str	r4, [sp, #20]
   270d0:	cmp	r5, #0
   270d4:	bne	27088 <flatcc_builder_create_cached_vtable@@Base+0x78>
   270d8:	ldr	r8, [sp, #16]
   270dc:	mov	r6, fp
   270e0:	ldr	r3, [r6, #104]	; 0x68
   270e4:	ldr	r4, [r6, #124]	; 0x7c
   270e8:	add	r2, r4, #16
   270ec:	cmp	r2, r3
   270f0:	bls	27118 <flatcc_builder_create_cached_vtable@@Base+0x108>
   270f4:	mov	ip, #6
   270f8:	mov	r3, #0
   270fc:	ldr	r0, [r6, #40]	; 0x28
   27100:	add	r1, r6, #100	; 0x64
   27104:	str	ip, [sp]
   27108:	ldr	r5, [r6, #48]	; 0x30
   2710c:	blx	r5
   27110:	cmp	r0, #0
   27114:	bne	27298 <flatcc_builder_create_cached_vtable@@Base+0x288>
   27118:	ldr	r5, [r6, #100]	; 0x64
   2711c:	adds	r7, r5, r4
   27120:	beq	27268 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27124:	ldr	r3, [r6, #124]	; 0x7c
   27128:	mov	r2, r9
   2712c:	ldr	r0, [r6, #152]	; 0x98
   27130:	ldr	r1, [sp, #8]
   27134:	add	ip, r3, #16
   27138:	str	ip, [r6, #124]	; 0x7c
   2713c:	str	r0, [r7, #4]
   27140:	mov	r0, r6
   27144:	ldr	ip, [sl, r8, lsl #2]
   27148:	str	ip, [r7, #12]
   2714c:	str	r3, [sl, r8, lsl #2]
   27150:	bl	26edc <flatcc_builder_create_vtable@@Base>
   27154:	cmp	r0, #0
   27158:	str	r0, [r5, r4]
   2715c:	beq	27268 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27160:	ldr	r3, [sp, #20]
   27164:	cmp	r3, #0
   27168:	beq	272ac <flatcc_builder_create_cached_vtable@@Base+0x29c>
   2716c:	ldr	r3, [r3, #8]
   27170:	str	r3, [r7, #8]
   27174:	b	271b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27178:	add	r8, r4, #12
   2717c:	ldr	r5, [r4, #12]
   27180:	b	270d0 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   27184:	ldr	r3, [sp, #12]
   27188:	mov	fp, r8
   2718c:	ldr	r8, [sp, #16]
   27190:	cmp	r3, fp
   27194:	beq	271ac <flatcc_builder_create_cached_vtable@@Base+0x19c>
   27198:	ldr	r3, [r4, #12]
   2719c:	str	r3, [fp]
   271a0:	ldr	r3, [sl, r8, lsl #2]
   271a4:	str	r3, [r4, #12]
   271a8:	str	r5, [sl, r8, lsl #2]
   271ac:	ldr	r0, [r4]
   271b0:	add	sp, sp, #28
   271b4:	ldrd	r4, [sp]
   271b8:	ldrd	r6, [sp, #8]
   271bc:	ldrd	r8, [sp, #16]
   271c0:	ldrd	sl, [sp, #24]
   271c4:	add	sp, sp, #32
   271c8:	pop	{pc}		; (ldr pc, [sp], #4)
   271cc:	ldr	r4, [r0, #124]	; 0x7c
   271d0:	add	r5, r0, #92	; 0x5c
   271d4:	cmp	r4, #0
   271d8:	bne	27340 <flatcc_builder_create_cached_vtable@@Base+0x330>
   271dc:	ldr	r3, [r0, #104]	; 0x68
   271e0:	cmp	r3, #15
   271e4:	bls	27270 <flatcc_builder_create_cached_vtable@@Base+0x260>
   271e8:	ldr	r3, [r6, #100]	; 0x64
   271ec:	cmp	r3, #0
   271f0:	beq	27268 <flatcc_builder_create_cached_vtable@@Base+0x258>
   271f4:	mov	ip, #16
   271f8:	mov	r2, #5
   271fc:	ldr	r0, [r6, #40]	; 0x28
   27200:	mov	r1, r5
   27204:	mov	r3, #1
   27208:	str	r2, [sp]
   2720c:	mov	r2, #256	; 0x100
   27210:	str	ip, [r6, #124]	; 0x7c
   27214:	ldr	r5, [r6, #48]	; 0x30
   27218:	blx	r5
   2721c:	cmp	r0, #0
   27220:	bne	27268 <flatcc_builder_create_cached_vtable@@Base+0x258>
   27224:	mov	r3, #256	; 0x100
   27228:	ldr	r1, [r6, #96]	; 0x60
   2722c:	b	27234 <flatcc_builder_create_cached_vtable@@Base+0x224>
   27230:	mov	r3, r2
   27234:	lsl	r2, r3, #1
   27238:	cmp	r2, r1
   2723c:	bls	27230 <flatcc_builder_create_cached_vtable@@Base+0x220>
   27240:	lsr	r3, r3, #2
   27244:	cmp	r3, #1
   27248:	bls	272a4 <flatcc_builder_create_cached_vtable@@Base+0x294>
   2724c:	mov	r2, #1
   27250:	add	r4, r4, #1
   27254:	cmp	r3, r2, lsl r4
   27258:	bhi	27250 <flatcc_builder_create_cached_vtable@@Base+0x240>
   2725c:	rsb	r1, r4, #32
   27260:	str	r4, [r6, #116]	; 0x74
   27264:	b	27048 <flatcc_builder_create_cached_vtable@@Base+0x38>
   27268:	mov	r0, #0
   2726c:	b	271b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27270:	mov	ip, #6
   27274:	add	r1, r0, #100	; 0x64
   27278:	ldr	r0, [r0, #40]	; 0x28
   2727c:	mov	r3, r4
   27280:	mov	r2, #16
   27284:	str	ip, [sp]
   27288:	ldr	r7, [r6, #48]	; 0x30
   2728c:	blx	r7
   27290:	cmp	r0, #0
   27294:	beq	271e8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   27298:	bl	24da4 <flatcc_builder_default_alloc@@Base+0x124>
   2729c:	str	r5, [sp, #20]
   272a0:	b	270e0 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   272a4:	mov	r1, #32
   272a8:	b	27260 <flatcc_builder_create_cached_vtable@@Base+0x250>
   272ac:	ldr	r8, [r6, #120]	; 0x78
   272b0:	ldr	r3, [r6, #172]	; 0xac
   272b4:	add	r2, r9, r8
   272b8:	cmp	r3, #0
   272bc:	beq	272c8 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   272c0:	cmp	r3, r2
   272c4:	bcc	27328 <flatcc_builder_create_cached_vtable@@Base+0x318>
   272c8:	ldr	r3, [r6, #72]	; 0x48
   272cc:	cmp	r3, r2
   272d0:	bcs	272f8 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   272d4:	mov	ip, #2
   272d8:	mov	r3, #0
   272dc:	ldr	r0, [r6, #40]	; 0x28
   272e0:	add	r1, r6, #68	; 0x44
   272e4:	str	ip, [sp]
   272e8:	ldr	sl, [r6, #48]	; 0x30
   272ec:	blx	sl
   272f0:	cmp	r0, #0
   272f4:	bne	27298 <flatcc_builder_create_cached_vtable@@Base+0x288>
   272f8:	ldr	r3, [r6, #68]	; 0x44
   272fc:	adds	r0, r3, r8
   27300:	beq	27338 <flatcc_builder_create_cached_vtable@@Base+0x328>
   27304:	ldr	r3, [r6, #120]	; 0x78
   27308:	mov	r2, r9
   2730c:	ldr	r1, [sp, #8]
   27310:	add	r9, r3, r9
   27314:	str	r3, [r7, #8]
   27318:	str	r9, [r6, #120]	; 0x78
   2731c:	bl	1451c <memcpy@plt>
   27320:	ldr	r0, [r5, r4]
   27324:	b	271b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27328:	mov	r0, r6
   2732c:	bl	25304 <flatcc_builder_flush_vtable_cache@@Base>
   27330:	ldr	r0, [r5, r4]
   27334:	b	271b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27338:	mvn	r0, #0
   2733c:	b	271b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   27340:	ldr	r3, [pc, #28]	; 27364 <flatcc_builder_create_cached_vtable@@Base+0x354>
   27344:	movw	r2, #342	; 0x156
   27348:	ldr	r1, [pc, #24]	; 27368 <flatcc_builder_create_cached_vtable@@Base+0x358>
   2734c:	ldr	r0, [pc, #24]	; 2736c <flatcc_builder_create_cached_vtable@@Base+0x35c>
   27350:	add	r3, pc, r3
   27354:	add	r3, r3, #656	; 0x290
   27358:	add	r1, pc, r1
   2735c:	add	r0, pc, r0
   27360:	bl	145e8 <__assert_fail@plt>
   27364:	andeq	r9, r1, ip, asr pc
   27368:	andeq	sl, r1, r4, lsr #13
   2736c:	andeq	sl, r1, ip, asr #18

00027370 <flatcc_builder_create_table@@Base>:
   27370:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27374:	mov	r5, r0
   27378:	strd	r6, [sp, #8]
   2737c:	str	r8, [sp, #16]
   27380:	str	lr, [sp, #20]
   27384:	sub	sp, sp, #88	; 0x58
   27388:	ldr	r6, [sp, #116]	; 0x74
   2738c:	ldr	r7, [pc, #444]	; 27550 <flatcc_builder_create_table@@Base+0x1e0>
   27390:	ldr	r0, [sp, #120]	; 0x78
   27394:	cmp	r6, #0
   27398:	add	r7, pc, r7
   2739c:	blt	27504 <flatcc_builder_create_table@@Base+0x194>
   273a0:	tst	r0, #1
   273a4:	beq	274e0 <flatcc_builder_create_table@@Base+0x170>
   273a8:	ldrh	ip, [r5, #128]	; 0x80
   273ac:	cmp	r3, #4
   273b0:	sub	r0, r0, #1
   273b4:	movcc	r3, #4
   273b8:	cmp	ip, r3
   273bc:	ldr	ip, [r5, #136]	; 0x88
   273c0:	strhcc	r3, [r5, #128]	; 0x80
   273c4:	sub	r3, r3, #1
   273c8:	cmp	r6, #0
   273cc:	sub	r4, ip, r2
   273d0:	mov	r8, r4
   273d4:	sub	r4, r4, #4
   273d8:	and	r8, r8, r3
   273dc:	sub	r0, r4, r0
   273e0:	sub	r0, r0, r8
   273e4:	str	r0, [sp, #12]
   273e8:	beq	2741c <flatcc_builder_create_table@@Base+0xac>
   273ec:	ldr	ip, [sp, #112]	; 0x70
   273f0:	sub	r4, r8, r4
   273f4:	sub	r4, r4, #4
   273f8:	add	r6, ip, r6, lsl #1
   273fc:	ldrh	r3, [ip], #2
   27400:	ldr	r0, [r1, r3]
   27404:	sub	lr, r4, r3
   27408:	cmp	r6, ip
   2740c:	add	r0, r0, lr
   27410:	str	r0, [r1, r3]
   27414:	bne	273fc <flatcc_builder_create_table@@Base+0x8c>
   27418:	ldr	ip, [r5, #136]	; 0x88
   2741c:	mov	r3, #1
   27420:	mov	r0, #4
   27424:	cmp	r2, #0
   27428:	str	r0, [sp, #16]
   2742c:	str	r3, [sp, #20]
   27430:	add	r3, sp, #12
   27434:	str	r3, [sp, #24]
   27438:	str	r0, [sp, #28]
   2743c:	beq	27458 <flatcc_builder_create_table@@Base+0xe8>
   27440:	add	r0, r2, r0
   27444:	mov	r3, #2
   27448:	str	r0, [sp, #16]
   2744c:	str	r3, [sp, #20]
   27450:	str	r1, [sp, #32]
   27454:	str	r2, [sp, #36]	; 0x24
   27458:	cmp	r8, #0
   2745c:	bne	274b0 <flatcc_builder_create_table@@Base+0x140>
   27460:	sub	r4, ip, r0
   27464:	cmp	r4, ip
   27468:	bge	2752c <flatcc_builder_create_table@@Base+0x1bc>
   2746c:	mov	r3, r4
   27470:	add	r1, sp, #24
   27474:	str	r0, [sp]
   27478:	ldr	r2, [sp, #20]
   2747c:	ldr	r0, [r5, #36]	; 0x24
   27480:	ldr	r6, [r5, #44]	; 0x2c
   27484:	blx	r6
   27488:	cmp	r0, #0
   2748c:	bne	27528 <flatcc_builder_create_table@@Base+0x1b8>
   27490:	mov	r0, r4
   27494:	str	r4, [r5, #136]	; 0x88
   27498:	add	sp, sp, #88	; 0x58
   2749c:	ldrd	r4, [sp]
   274a0:	ldrd	r6, [sp, #8]
   274a4:	ldr	r8, [sp, #16]
   274a8:	add	sp, sp, #20
   274ac:	pop	{pc}		; (ldr pc, [sp], #4)
   274b0:	ldr	r2, [pc, #156]	; 27554 <flatcc_builder_create_table@@Base+0x1e4>
   274b4:	add	r0, r0, r8
   274b8:	ldr	r3, [sp, #20]
   274bc:	str	r0, [sp, #16]
   274c0:	ldr	r1, [r7, r2]
   274c4:	add	r2, sp, #88	; 0x58
   274c8:	add	r3, r3, #1
   274cc:	add	r2, r2, r3, lsl #3
   274d0:	str	r3, [sp, #20]
   274d4:	str	r1, [r2, #-72]	; 0xffffffb8
   274d8:	str	r8, [r2, #-68]	; 0xffffffbc
   274dc:	b	27460 <flatcc_builder_create_table@@Base+0xf0>
   274e0:	ldr	r3, [pc, #112]	; 27558 <flatcc_builder_create_table@@Base+0x1e8>
   274e4:	movw	r2, #1243	; 0x4db
   274e8:	ldr	r1, [pc, #108]	; 2755c <flatcc_builder_create_table@@Base+0x1ec>
   274ec:	ldr	r0, [pc, #108]	; 27560 <flatcc_builder_create_table@@Base+0x1f0>
   274f0:	add	r3, pc, r3
   274f4:	add	r3, r3, #668	; 0x29c
   274f8:	add	r1, pc, r1
   274fc:	add	r0, pc, r0
   27500:	bl	145e8 <__assert_fail@plt>
   27504:	ldr	r3, [pc, #88]	; 27564 <flatcc_builder_create_table@@Base+0x1f4>
   27508:	movw	r2, #1237	; 0x4d5
   2750c:	ldr	r1, [pc, #84]	; 27568 <flatcc_builder_create_table@@Base+0x1f8>
   27510:	ldr	r0, [pc, #84]	; 2756c <flatcc_builder_create_table@@Base+0x1fc>
   27514:	add	r3, pc, r3
   27518:	add	r3, r3, #668	; 0x29c
   2751c:	add	r1, pc, r1
   27520:	add	r0, pc, r0
   27524:	bl	145e8 <__assert_fail@plt>
   27528:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   2752c:	ldr	r3, [pc, #60]	; 27570 <flatcc_builder_create_table@@Base+0x200>
   27530:	movw	r2, #647	; 0x287
   27534:	ldr	r1, [pc, #56]	; 27574 <flatcc_builder_create_table@@Base+0x204>
   27538:	ldr	r0, [pc, #56]	; 27578 <flatcc_builder_create_table@@Base+0x208>
   2753c:	add	r3, pc, r3
   27540:	add	r3, r3, #44	; 0x2c
   27544:	add	r1, pc, r1
   27548:	add	r0, pc, r0
   2754c:	bl	145e8 <__assert_fail@plt>
   27550:	andeq	ip, r2, r0, ror #24
   27554:	andeq	r0, r0, r4, rrx
   27558:			; <UNDEFINED> instruction: 0x00019dbc
   2755c:	andeq	sl, r1, r4, lsl #10
   27560:	ldrdeq	sl, [r1], -r0
   27564:	muleq	r1, r8, sp
   27568:	andeq	sl, r1, r0, ror #9
   2756c:	muleq	r1, r8, r7
   27570:	andeq	r9, r1, r0, ror sp
   27574:			; <UNDEFINED> instruction: 0x0001a4b8
   27578:	andeq	sl, r1, ip, lsr r5

0002757c <flatcc_builder_check_required_field@@Base>:
   2757c:	ldr	r3, [r0, #32]
   27580:	ldrh	r3, [r3, #14]
   27584:	cmp	r3, #3
   27588:	bne	275b8 <flatcc_builder_check_required_field@@Base+0x3c>
   2758c:	ldrh	r3, [r0, #8]
   27590:	cmp	r3, r1
   27594:	bls	275b0 <flatcc_builder_check_required_field@@Base+0x34>
   27598:	ldr	r3, [r0, #4]
   2759c:	lsl	r1, r1, #1
   275a0:	ldrh	r0, [r3, r1]
   275a4:	adds	r0, r0, #0
   275a8:	movne	r0, #1
   275ac:	bx	lr
   275b0:	mov	r0, #0
   275b4:	bx	lr
   275b8:	ldr	r3, [pc, #36]	; 275e4 <flatcc_builder_check_required_field@@Base+0x68>
   275bc:	movw	r2, #1272	; 0x4f8
   275c0:	str	r4, [sp, #-8]!
   275c4:	ldr	r1, [pc, #28]	; 275e8 <flatcc_builder_check_required_field@@Base+0x6c>
   275c8:	str	lr, [sp, #4]
   275cc:	ldr	r0, [pc, #24]	; 275ec <flatcc_builder_check_required_field@@Base+0x70>
   275d0:	add	r3, pc, r3
   275d4:	add	r3, r3, #696	; 0x2b8
   275d8:	add	r1, pc, r1
   275dc:	add	r0, pc, r0
   275e0:	bl	145e8 <__assert_fail@plt>
   275e4:	ldrdeq	r9, [r1], -ip
   275e8:	andeq	sl, r1, r4, lsr #8
   275ec:	strdeq	sl, [r1], -ip

000275f0 <flatcc_builder_check_union_field@@Base>:
   275f0:	ldr	r3, [r0, #32]
   275f4:	ldrh	r3, [r3, #14]
   275f8:	cmp	r3, #3
   275fc:	bne	27660 <flatcc_builder_check_union_field@@Base+0x70>
   27600:	cmp	r1, #0
   27604:	beq	2764c <flatcc_builder_check_union_field@@Base+0x5c>
   27608:	ldrh	r3, [r0, #8]
   2760c:	cmp	r3, r1
   27610:	bls	2764c <flatcc_builder_check_union_field@@Base+0x5c>
   27614:	ldr	r3, [r0, #4]
   27618:	sub	r1, r1, #-2147483647	; 0x80000001
   2761c:	lsl	r1, r1, #1
   27620:	ldrh	r2, [r3, r1]!
   27624:	cmp	r2, #0
   27628:	ldrh	r1, [r3, #2]
   2762c:	beq	27640 <flatcc_builder_check_union_field@@Base+0x50>
   27630:	ldr	r3, [r0, #16]
   27634:	ldrb	r3, [r3, r2]
   27638:	cmp	r3, #0
   2763c:	bne	27654 <flatcc_builder_check_union_field@@Base+0x64>
   27640:	clz	r0, r1
   27644:	lsr	r0, r0, #5
   27648:	bx	lr
   2764c:	mov	r0, #0
   27650:	bx	lr
   27654:	adds	r0, r1, #0
   27658:	movne	r0, #1
   2765c:	bx	lr
   27660:	ldr	r3, [pc, #36]	; 2768c <flatcc_builder_check_union_field@@Base+0x9c>
   27664:	movw	r2, #1279	; 0x4ff
   27668:	str	r4, [sp, #-8]!
   2766c:	ldr	r1, [pc, #28]	; 27690 <flatcc_builder_check_union_field@@Base+0xa0>
   27670:	str	lr, [sp, #4]
   27674:	ldr	r0, [pc, #24]	; 27694 <flatcc_builder_check_union_field@@Base+0xa4>
   27678:	add	r3, pc, r3
   2767c:	add	r3, r3, #732	; 0x2dc
   27680:	add	r1, pc, r1
   27684:	add	r0, pc, r0
   27688:	bl	145e8 <__assert_fail@plt>
   2768c:	andeq	r9, r1, r4, lsr ip
   27690:	andeq	sl, r1, ip, ror r3
   27694:	andeq	sl, r1, r4, asr r6

00027698 <flatcc_builder_check_required@@Base>:
   27698:	ldr	r3, [r0, #32]
   2769c:	ldrh	r3, [r3, #14]
   276a0:	cmp	r3, #3
   276a4:	bne	2770c <flatcc_builder_check_required@@Base+0x74>
   276a8:	ldrh	r3, [r0, #8]
   276ac:	cmp	r3, r2
   276b0:	blt	27704 <flatcc_builder_check_required@@Base+0x6c>
   276b4:	cmp	r2, #0
   276b8:	ble	276fc <flatcc_builder_check_required@@Base+0x64>
   276bc:	ldrh	r3, [r1]
   276c0:	ldr	ip, [r0, #4]
   276c4:	lsl	r3, r3, #1
   276c8:	ldrh	r0, [ip, r3]
   276cc:	cmp	r0, #0
   276d0:	bxeq	lr
   276d4:	add	r2, r1, r2, lsl #1
   276d8:	add	r1, r1, #2
   276dc:	b	276f4 <flatcc_builder_check_required@@Base+0x5c>
   276e0:	ldrh	r3, [r1], #2
   276e4:	lsl	r3, r3, #1
   276e8:	ldrh	r0, [ip, r3]
   276ec:	cmp	r0, #0
   276f0:	bxeq	lr
   276f4:	cmp	r1, r2
   276f8:	bne	276e0 <flatcc_builder_check_required@@Base+0x48>
   276fc:	mov	r0, #1
   27700:	bx	lr
   27704:	mov	r0, #0
   27708:	bx	lr
   2770c:	ldr	r3, [pc, #36]	; 27738 <flatcc_builder_check_required@@Base+0xa0>
   27710:	movw	r2, #1297	; 0x511
   27714:	str	r4, [sp, #-8]!
   27718:	ldr	r1, [pc, #28]	; 2773c <flatcc_builder_check_required@@Base+0xa4>
   2771c:	str	lr, [sp, #4]
   27720:	ldr	r0, [pc, #24]	; 27740 <flatcc_builder_check_required@@Base+0xa8>
   27724:	add	r3, pc, r3
   27728:	add	r3, r3, #768	; 0x300
   2772c:	add	r1, pc, r1
   27730:	add	r0, pc, r0
   27734:	bl	145e8 <__assert_fail@plt>
   27738:	andeq	r9, r1, r8, lsl #23
   2773c:	ldrdeq	sl, [r1], -r0
   27740:	andeq	sl, r1, r8, lsr #11

00027744 <flatcc_builder_end_table@@Base>:
   27744:	ldr	r3, [r0, #32]
   27748:	strd	r4, [sp, #-20]!	; 0xffffffec
   2774c:	ldrh	r3, [r3, #14]
   27750:	strd	r6, [sp, #8]
   27754:	str	lr, [sp, #16]
   27758:	sub	sp, sp, #20
   2775c:	cmp	r3, #3
   27760:	bne	278e4 <flatcc_builder_end_table@@Base+0x1a0>
   27764:	ldrh	r5, [r0, #8]
   27768:	movw	ip, #31153	; 0x79b1
   2776c:	movt	ip, #40503	; 0x9e37
   27770:	mov	r4, r0
   27774:	ldr	r1, [r0, #4]
   27778:	ldr	r3, [r0, #12]
   2777c:	add	r5, r5, #2
   27780:	lsl	r5, r5, #1
   27784:	ldr	lr, [r0, #20]
   27788:	sub	r6, r1, #4
   2778c:	uxth	r5, r5
   27790:	eor	r3, r3, r5
   27794:	mov	r2, r5
   27798:	strh	r5, [r1, #-4]
   2779c:	mul	r3, ip, r3
   277a0:	add	lr, lr, #4
   277a4:	uxth	lr, lr
   277a8:	eor	r3, r3, lr
   277ac:	strh	lr, [r1, #-2]
   277b0:	mov	r1, r6
   277b4:	mul	r3, ip, r3
   277b8:	str	r3, [r0, #12]
   277bc:	bl	27010 <flatcc_builder_create_cached_vtable@@Base>
   277c0:	subs	r7, r0, #0
   277c4:	bne	277e4 <flatcc_builder_end_table@@Base+0xa0>
   277c8:	mov	r5, #0
   277cc:	mov	r0, r5
   277d0:	add	sp, sp, #20
   277d4:	ldrd	r4, [sp]
   277d8:	ldrd	r6, [sp, #8]
   277dc:	add	sp, sp, #16
   277e0:	pop	{pc}		; (ldr pc, [sp], #4)
   277e4:	mov	r2, r5
   277e8:	mov	r1, #0
   277ec:	mov	r0, r6
   277f0:	bl	14594 <memset@plt>
   277f4:	ldr	ip, [r4]
   277f8:	mov	r0, r4
   277fc:	ldr	r3, [r4, #32]
   27800:	ldr	r2, [r4, #76]	; 0x4c
   27804:	ldr	r1, [r3, #20]
   27808:	str	r7, [sp, #8]
   2780c:	ldrh	r3, [r4, #130]	; 0x82
   27810:	add	r2, r2, r1
   27814:	ldr	r1, [r4, #16]
   27818:	sub	ip, ip, r2
   2781c:	asr	ip, ip, #1
   27820:	str	r2, [sp]
   27824:	ldr	r2, [r4, #20]
   27828:	str	ip, [sp, #4]
   2782c:	bl	27370 <flatcc_builder_create_table@@Base>
   27830:	subs	r5, r0, #0
   27834:	beq	277c8 <flatcc_builder_end_table@@Base+0x84>
   27838:	ldr	r3, [r4, #32]
   2783c:	mov	r1, #0
   27840:	ldr	r0, [r4, #52]	; 0x34
   27844:	ldr	r2, [r4, #76]	; 0x4c
   27848:	ldr	ip, [r3, #16]
   2784c:	ldr	r6, [r3, #20]
   27850:	ldrh	lr, [r3, #28]
   27854:	add	r0, r0, ip
   27858:	ldr	ip, [r3, #24]
   2785c:	add	r3, r2, r6
   27860:	ldr	r2, [r4, #20]
   27864:	str	r3, [r4]
   27868:	str	r0, [r4, #4]
   2786c:	strh	lr, [r4, #8]
   27870:	str	ip, [r4, #12]
   27874:	ldr	r0, [r4, #16]
   27878:	bl	14594 <memset@plt>
   2787c:	ldr	r3, [r4, #32]
   27880:	ldr	r0, [r4, #60]	; 0x3c
   27884:	ldr	r2, [r4, #64]	; 0x40
   27888:	ldr	ip, [r3]
   2788c:	ldmib	r3, {r1, lr}
   27890:	add	r0, r0, ip
   27894:	sub	r2, r2, ip
   27898:	str	r0, [r4, #16]
   2789c:	cmp	r2, r1
   278a0:	ldrh	r0, [r4, #128]	; 0x80
   278a4:	movcs	r2, r1
   278a8:	str	lr, [r4, #20]
   278ac:	str	ip, [r4, #28]
   278b0:	ldrh	ip, [r4, #130]	; 0x82
   278b4:	str	r2, [r4, #24]
   278b8:	ldr	r2, [r4, #156]	; 0x9c
   278bc:	str	r1, [r3, #4]
   278c0:	cmp	r0, ip
   278c4:	sub	r0, r3, #36	; 0x24
   278c8:	strhcc	ip, [r4, #128]	; 0x80
   278cc:	ldrh	r1, [r3, #12]
   278d0:	sub	r3, r2, #1
   278d4:	str	r0, [r4, #32]
   278d8:	strh	r1, [r4, #130]	; 0x82
   278dc:	str	r3, [r4, #156]	; 0x9c
   278e0:	b	277cc <flatcc_builder_end_table@@Base+0x88>
   278e4:	ldr	r3, [pc, #28]	; 27908 <flatcc_builder_end_table@@Base+0x1c4>
   278e8:	movw	r2, #1317	; 0x525
   278ec:	ldr	r1, [pc, #24]	; 2790c <flatcc_builder_end_table@@Base+0x1c8>
   278f0:	ldr	r0, [pc, #24]	; 27910 <flatcc_builder_end_table@@Base+0x1cc>
   278f4:	add	r3, pc, r3
   278f8:	add	r3, r3, #800	; 0x320
   278fc:	add	r1, pc, r1
   27900:	add	r0, pc, r0
   27904:	bl	145e8 <__assert_fail@plt>
   27908:			; <UNDEFINED> instruction: 0x000199b8
   2790c:	andeq	sl, r1, r0, lsl #2
   27910:	ldrdeq	sl, [r1], -r8

00027914 <flatcc_builder_create_vector@@Base>:
   27914:	strd	r4, [sp, #-16]!
   27918:	mov	r4, r0
   2791c:	str	r6, [sp, #8]
   27920:	str	lr, [sp, #12]
   27924:	sub	sp, sp, #88	; 0x58
   27928:	ldr	ip, [sp, #108]	; 0x6c
   2792c:	ldr	r5, [pc, #328]	; 27a7c <flatcc_builder_create_vector@@Base+0x168>
   27930:	ldrh	r0, [sp, #104]	; 0x68
   27934:	cmp	r2, ip
   27938:	add	r5, pc, r5
   2793c:	bhi	27a30 <flatcc_builder_create_vector@@Base+0x11c>
   27940:	ldrh	ip, [r4, #128]	; 0x80
   27944:	cmp	r0, #4
   27948:	mul	r3, r3, r2
   2794c:	movcc	r0, #4
   27950:	str	r2, [sp, #12]
   27954:	mov	r2, #1
   27958:	ldr	r6, [r4, #136]	; 0x88
   2795c:	mov	lr, #4
   27960:	str	r2, [sp, #20]
   27964:	cmp	ip, r0
   27968:	add	ip, sp, #12
   2796c:	str	lr, [sp, #16]
   27970:	strhcc	r0, [r4, #128]	; 0x80
   27974:	sub	r2, r6, r3
   27978:	sub	r0, r0, #1
   2797c:	cmp	r3, #0
   27980:	and	r0, r0, r2
   27984:	str	ip, [sp, #24]
   27988:	moveq	r2, lr
   2798c:	str	lr, [sp, #28]
   27990:	beq	279ac <flatcc_builder_create_vector@@Base+0x98>
   27994:	add	r2, r3, lr
   27998:	str	r1, [sp, #32]
   2799c:	mov	r1, #2
   279a0:	str	r2, [sp, #16]
   279a4:	str	r1, [sp, #20]
   279a8:	str	r3, [sp, #36]	; 0x24
   279ac:	cmp	r0, #0
   279b0:	bne	27a00 <flatcc_builder_create_vector@@Base+0xec>
   279b4:	sub	r5, r6, r2
   279b8:	cmp	r6, r5
   279bc:	ble	27a58 <flatcc_builder_create_vector@@Base+0x144>
   279c0:	mov	r3, r5
   279c4:	add	r1, sp, #24
   279c8:	str	r2, [sp]
   279cc:	ldr	r2, [sp, #20]
   279d0:	ldr	r0, [r4, #36]	; 0x24
   279d4:	ldr	r6, [r4, #44]	; 0x2c
   279d8:	blx	r6
   279dc:	cmp	r0, #0
   279e0:	bne	27a54 <flatcc_builder_create_vector@@Base+0x140>
   279e4:	mov	r0, r5
   279e8:	str	r5, [r4, #136]	; 0x88
   279ec:	add	sp, sp, #88	; 0x58
   279f0:	ldrd	r4, [sp]
   279f4:	ldr	r6, [sp, #8]
   279f8:	add	sp, sp, #12
   279fc:	pop	{pc}		; (ldr pc, [sp], #4)
   27a00:	ldr	r1, [pc, #120]	; 27a80 <flatcc_builder_create_vector@@Base+0x16c>
   27a04:	add	r2, r2, r0
   27a08:	ldr	r3, [sp, #20]
   27a0c:	str	r2, [sp, #16]
   27a10:	ldr	ip, [r5, r1]
   27a14:	add	r1, sp, #88	; 0x58
   27a18:	add	r3, r3, #1
   27a1c:	add	r1, r1, r3, lsl #3
   27a20:	str	r3, [sp, #20]
   27a24:	str	ip, [r1, #-72]	; 0xffffffb8
   27a28:	str	r0, [r1, #-68]	; 0xffffffbc
   27a2c:	b	279b4 <flatcc_builder_create_vector@@Base+0xa0>
   27a30:	ldr	r3, [pc, #76]	; 27a84 <flatcc_builder_create_vector@@Base+0x170>
   27a34:	movw	r2, #1365	; 0x555
   27a38:	ldr	r1, [pc, #72]	; 27a88 <flatcc_builder_create_vector@@Base+0x174>
   27a3c:	ldr	r0, [pc, #72]	; 27a8c <flatcc_builder_create_vector@@Base+0x178>
   27a40:	add	r3, pc, r3
   27a44:	add	r3, r3, #828	; 0x33c
   27a48:	add	r1, pc, r1
   27a4c:	add	r0, pc, r0
   27a50:	bl	145e8 <__assert_fail@plt>
   27a54:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   27a58:	ldr	r3, [pc, #48]	; 27a90 <flatcc_builder_create_vector@@Base+0x17c>
   27a5c:	movw	r2, #647	; 0x287
   27a60:	ldr	r1, [pc, #44]	; 27a94 <flatcc_builder_create_vector@@Base+0x180>
   27a64:	ldr	r0, [pc, #44]	; 27a98 <flatcc_builder_create_vector@@Base+0x184>
   27a68:	add	r3, pc, r3
   27a6c:	add	r3, r3, #44	; 0x2c
   27a70:	add	r1, pc, r1
   27a74:	add	r0, pc, r0
   27a78:	bl	145e8 <__assert_fail@plt>
   27a7c:	andeq	ip, r2, r0, asr #13
   27a80:	andeq	r0, r0, r4, rrx
   27a84:	andeq	r9, r1, ip, ror #16
   27a88:			; <UNDEFINED> instruction: 0x00019fb4
   27a8c:			; <UNDEFINED> instruction: 0x0001a2b8
   27a90:	andeq	r9, r1, r4, asr #16
   27a94:	andeq	r9, r1, ip, lsl #31
   27a98:	andeq	sl, r1, r0, lsl r0

00027a9c <flatcc_builder_end_vector@@Base>:
   27a9c:	ldr	r1, [r0, #32]
   27aa0:	strd	r4, [sp, #-12]!
   27aa4:	ldrh	r3, [r1, #14]
   27aa8:	str	lr, [sp, #8]
   27aac:	sub	sp, sp, #12
   27ab0:	cmp	r3, #4
   27ab4:	bne	27b6c <flatcc_builder_end_vector@@Base+0xd0>
   27ab8:	ldrh	ip, [r0, #130]	; 0x82
   27abc:	mov	r4, r0
   27ac0:	ldr	r3, [r1, #16]
   27ac4:	ldr	r2, [r1, #20]
   27ac8:	ldr	r1, [r1, #24]
   27acc:	str	r1, [sp, #4]
   27ad0:	ldr	r1, [r0, #16]
   27ad4:	str	ip, [sp]
   27ad8:	bl	27914 <flatcc_builder_create_vector@@Base>
   27adc:	subs	r5, r0, #0
   27ae0:	beq	27b58 <flatcc_builder_end_vector@@Base+0xbc>
   27ae4:	mov	r1, #0
   27ae8:	ldr	r0, [r4, #16]
   27aec:	ldr	r2, [r4, #20]
   27af0:	bl	14594 <memset@plt>
   27af4:	ldr	r3, [r4, #32]
   27af8:	ldr	r0, [r4, #60]	; 0x3c
   27afc:	ldr	r2, [r4, #64]	; 0x40
   27b00:	ldr	ip, [r3]
   27b04:	ldmib	r3, {r1, lr}
   27b08:	add	r0, r0, ip
   27b0c:	sub	r2, r2, ip
   27b10:	str	r0, [r4, #16]
   27b14:	cmp	r2, r1
   27b18:	ldrh	r0, [r4, #128]	; 0x80
   27b1c:	movcs	r2, r1
   27b20:	str	lr, [r4, #20]
   27b24:	str	ip, [r4, #28]
   27b28:	ldrh	ip, [r4, #130]	; 0x82
   27b2c:	str	r2, [r4, #24]
   27b30:	ldr	r2, [r4, #156]	; 0x9c
   27b34:	str	r1, [r3, #4]
   27b38:	cmp	r0, ip
   27b3c:	sub	r0, r3, #36	; 0x24
   27b40:	strhcc	ip, [r4, #128]	; 0x80
   27b44:	ldrh	r1, [r3, #12]
   27b48:	sub	r3, r2, #1
   27b4c:	str	r0, [r4, #32]
   27b50:	strh	r1, [r4, #130]	; 0x82
   27b54:	str	r3, [r4, #156]	; 0x9c
   27b58:	mov	r0, r5
   27b5c:	add	sp, sp, #12
   27b60:	ldrd	r4, [sp]
   27b64:	add	sp, sp, #8
   27b68:	pop	{pc}		; (ldr pc, [sp], #4)
   27b6c:	ldr	r3, [pc, #28]	; 27b90 <flatcc_builder_end_vector@@Base+0xf4>
   27b70:	movw	r2, #1400	; 0x578
   27b74:	ldr	r1, [pc, #24]	; 27b94 <flatcc_builder_end_vector@@Base+0xf8>
   27b78:	ldr	r0, [pc, #24]	; 27b98 <flatcc_builder_end_vector@@Base+0xfc>
   27b7c:	add	r3, pc, r3
   27b80:	add	r3, r3, #860	; 0x35c
   27b84:	add	r1, pc, r1
   27b88:	add	r0, pc, r0
   27b8c:	bl	145e8 <__assert_fail@plt>
   27b90:	andeq	r9, r1, r0, lsr r7
   27b94:	andeq	r9, r1, r8, ror lr
   27b98:	andeq	r9, r1, r4, asr #31

00027b9c <flatcc_builder_vector_count@@Base>:
   27b9c:	ldr	r3, [r0, #32]
   27ba0:	ldr	r0, [r3, #20]
   27ba4:	bx	lr

00027ba8 <flatcc_builder_vector_edit@@Base>:
   27ba8:	ldr	r0, [r0, #16]
   27bac:	bx	lr

00027bb0 <flatcc_builder_create_offset_vector_direct@@Base>:
   27bb0:	cmn	r2, #-1073741823	; 0xc0000001
   27bb4:	bhi	27bc0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   27bb8:	mov	r3, #0
   27bbc:	b	250d8 <flatcc_builder_default_alloc@@Base+0x458>
   27bc0:	mov	r0, #0
   27bc4:	bx	lr

00027bc8 <flatcc_builder_end_offset_vector@@Base>:
   27bc8:	ldr	r3, [r0, #32]
   27bcc:	strd	r4, [sp, #-16]!
   27bd0:	ldrh	r2, [r3, #14]
   27bd4:	str	r6, [sp, #8]
   27bd8:	str	lr, [sp, #12]
   27bdc:	cmp	r2, #5
   27be0:	bne	27c84 <flatcc_builder_end_offset_vector@@Base+0xbc>
   27be4:	ldr	r1, [r0, #16]
   27be8:	mov	r4, r0
   27bec:	ldr	r2, [r3, #20]
   27bf0:	bl	27bb0 <flatcc_builder_create_offset_vector_direct@@Base>
   27bf4:	subs	r5, r0, #0
   27bf8:	beq	27c70 <flatcc_builder_end_offset_vector@@Base+0xa8>
   27bfc:	mov	r1, #0
   27c00:	ldr	r0, [r4, #16]
   27c04:	ldr	r2, [r4, #20]
   27c08:	bl	14594 <memset@plt>
   27c0c:	ldr	r3, [r4, #32]
   27c10:	ldr	r0, [r4, #60]	; 0x3c
   27c14:	ldr	r2, [r4, #64]	; 0x40
   27c18:	ldr	ip, [r3]
   27c1c:	ldmib	r3, {r1, lr}
   27c20:	add	r0, r0, ip
   27c24:	sub	r2, r2, ip
   27c28:	str	r0, [r4, #16]
   27c2c:	cmp	r2, r1
   27c30:	ldrh	r0, [r4, #128]	; 0x80
   27c34:	movcs	r2, r1
   27c38:	str	lr, [r4, #20]
   27c3c:	str	ip, [r4, #28]
   27c40:	ldrh	ip, [r4, #130]	; 0x82
   27c44:	str	r2, [r4, #24]
   27c48:	ldr	r2, [r4, #156]	; 0x9c
   27c4c:	str	r1, [r3, #4]
   27c50:	cmp	r0, ip
   27c54:	sub	r0, r3, #36	; 0x24
   27c58:	strhcc	ip, [r4, #128]	; 0x80
   27c5c:	ldrh	r1, [r3, #12]
   27c60:	sub	r3, r2, #1
   27c64:	str	r0, [r4, #32]
   27c68:	strh	r1, [r4, #130]	; 0x82
   27c6c:	str	r3, [r4, #156]	; 0x9c
   27c70:	mov	r0, r5
   27c74:	ldrd	r4, [sp]
   27c78:	ldr	r6, [sp, #8]
   27c7c:	add	sp, sp, #12
   27c80:	pop	{pc}		; (ldr pc, [sp], #4)
   27c84:	ldr	r3, [pc, #28]	; 27ca8 <flatcc_builder_end_offset_vector@@Base+0xe0>
   27c88:	movw	r2, #1480	; 0x5c8
   27c8c:	ldr	r1, [pc, #24]	; 27cac <flatcc_builder_end_offset_vector@@Base+0xe4>
   27c90:	ldr	r0, [pc, #24]	; 27cb0 <flatcc_builder_end_offset_vector@@Base+0xe8>
   27c94:	add	r3, pc, r3
   27c98:	add	r3, r3, #888	; 0x378
   27c9c:	add	r1, pc, r1
   27ca0:	add	r0, pc, r0
   27ca4:	bl	145e8 <__assert_fail@plt>
   27ca8:	andeq	r9, r1, r8, lsl r6
   27cac:	andeq	r9, r1, r0, ror #26
   27cb0:	andeq	r9, r1, r8, lsl pc

00027cb4 <flatcc_builder_create_offset_vector@@Base>:
   27cb4:	strd	r4, [sp, #-16]!
   27cb8:	mov	r5, r2
   27cbc:	mov	r4, r0
   27cc0:	str	r6, [sp, #8]
   27cc4:	mov	r6, r1
   27cc8:	str	lr, [sp, #12]
   27ccc:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   27cd0:	cmp	r0, #0
   27cd4:	beq	27cec <flatcc_builder_create_offset_vector@@Base+0x38>
   27cd8:	ldrd	r4, [sp]
   27cdc:	mov	r0, #0
   27ce0:	ldr	r6, [sp, #8]
   27ce4:	add	sp, sp, #12
   27ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   27cec:	mov	r1, r5
   27cf0:	mov	r0, r4
   27cf4:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   27cf8:	cmp	r0, #0
   27cfc:	beq	27cd8 <flatcc_builder_create_offset_vector@@Base+0x24>
   27d00:	lsl	r2, r5, #2
   27d04:	mov	r1, r6
   27d08:	bl	1451c <memcpy@plt>
   27d0c:	mov	r0, r4
   27d10:	ldrd	r4, [sp]
   27d14:	ldr	r6, [sp, #8]
   27d18:	ldr	lr, [sp, #12]
   27d1c:	add	sp, sp, #16
   27d20:	b	27bc8 <flatcc_builder_end_offset_vector@@Base>

00027d24 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   27d24:	ldr	r2, [r0, #32]
   27d28:	strd	r4, [sp, #-16]!
   27d2c:	ldrh	ip, [r2, #14]
   27d30:	str	r6, [sp, #8]
   27d34:	str	lr, [sp, #12]
   27d38:	cmp	ip, #5
   27d3c:	bne	27df4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   27d40:	ldr	r2, [r2, #20]
   27d44:	cmn	r2, #-1073741823	; 0xc0000001
   27d48:	bhi	27d64 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   27d4c:	mov	r3, r1
   27d50:	ldr	r1, [r0, #16]
   27d54:	mov	r4, r0
   27d58:	bl	250d8 <flatcc_builder_default_alloc@@Base+0x458>
   27d5c:	subs	r5, r0, #0
   27d60:	bne	27d7c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   27d64:	mov	r5, #0
   27d68:	mov	r0, r5
   27d6c:	ldrd	r4, [sp]
   27d70:	ldr	r6, [sp, #8]
   27d74:	add	sp, sp, #12
   27d78:	pop	{pc}		; (ldr pc, [sp], #4)
   27d7c:	mov	r1, #0
   27d80:	ldr	r0, [r4, #16]
   27d84:	ldr	r2, [r4, #20]
   27d88:	bl	14594 <memset@plt>
   27d8c:	ldr	r3, [r4, #32]
   27d90:	ldr	r0, [r4, #60]	; 0x3c
   27d94:	ldr	r2, [r4, #64]	; 0x40
   27d98:	ldr	ip, [r3]
   27d9c:	ldmib	r3, {r1, lr}
   27da0:	add	r0, r0, ip
   27da4:	sub	r2, r2, ip
   27da8:	str	r0, [r4, #16]
   27dac:	cmp	r2, r1
   27db0:	ldrh	r0, [r4, #128]	; 0x80
   27db4:	movcs	r2, r1
   27db8:	str	lr, [r4, #20]
   27dbc:	str	ip, [r4, #28]
   27dc0:	ldrh	ip, [r4, #130]	; 0x82
   27dc4:	str	r2, [r4, #24]
   27dc8:	ldr	r2, [r4, #156]	; 0x9c
   27dcc:	str	r1, [r3, #4]
   27dd0:	cmp	r0, ip
   27dd4:	sub	r0, r3, #36	; 0x24
   27dd8:	strhcc	ip, [r4, #128]	; 0x80
   27ddc:	ldrh	r1, [r3, #12]
   27de0:	sub	r3, r2, #1
   27de4:	str	r0, [r4, #32]
   27de8:	strh	r1, [r4, #130]	; 0x82
   27dec:	str	r3, [r4, #156]	; 0x9c
   27df0:	b	27d68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   27df4:	ldr	r3, [pc, #28]	; 27e18 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   27df8:	movw	r2, #1493	; 0x5d5
   27dfc:	ldr	r1, [pc, #24]	; 27e1c <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   27e00:	ldr	r0, [pc, #24]	; 27e20 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   27e04:	add	r3, pc, r3
   27e08:	add	r3, r3, #924	; 0x39c
   27e0c:	add	r1, pc, r1
   27e10:	add	r0, pc, r0
   27e14:	bl	145e8 <__assert_fail@plt>
   27e18:	andeq	r9, r1, r8, lsr #9
   27e1c:	strdeq	r9, [r1], -r0
   27e20:	andeq	r9, r1, r8, lsr #27

00027e24 <flatcc_builder_offset_vector_edit@@Base>:
   27e24:	ldr	r0, [r0, #16]
   27e28:	bx	lr

00027e2c <flatcc_builder_offset_vector_count@@Base>:
   27e2c:	ldr	r3, [r0, #32]
   27e30:	ldr	r0, [r3, #20]
   27e34:	bx	lr

00027e38 <flatcc_builder_create_union_vector_direct@@Base>:
   27e38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27e3c:	mov	r4, r0
   27e40:	strd	r6, [sp, #8]
   27e44:	str	r8, [sp, #16]
   27e48:	str	lr, [sp, #20]
   27e4c:	sub	sp, sp, #8
   27e50:	ldr	r5, [sp, #32]
   27e54:	cmn	r5, #-1073741823	; 0xc0000001
   27e58:	bhi	27ebc <flatcc_builder_create_union_vector_direct@@Base+0x84>
   27e5c:	mov	r6, r1
   27e60:	mov	r7, r2
   27e64:	mov	r1, r3
   27e68:	mov	r0, r6
   27e6c:	mov	r3, r2
   27e70:	mov	r2, r5
   27e74:	bl	250d8 <flatcc_builder_default_alloc@@Base+0x458>
   27e78:	subs	r8, r0, #0
   27e7c:	beq	27ebc <flatcc_builder_create_union_vector_direct@@Base+0x84>
   27e80:	mvn	ip, #0
   27e84:	mov	r3, #1
   27e88:	mov	r2, r5
   27e8c:	mov	r1, r7
   27e90:	mov	r0, r6
   27e94:	stm	sp, {r3, ip}
   27e98:	bl	27914 <flatcc_builder_create_vector@@Base>
   27e9c:	stm	r4, {r0, r8}
   27ea0:	mov	r0, r4
   27ea4:	add	sp, sp, #8
   27ea8:	ldrd	r4, [sp]
   27eac:	ldrd	r6, [sp, #8]
   27eb0:	ldr	r8, [sp, #16]
   27eb4:	add	sp, sp, #20
   27eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   27ebc:	mov	r3, #0
   27ec0:	str	r3, [r4]
   27ec4:	str	r3, [r4, #4]
   27ec8:	b	27ea0 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00027ecc <flatcc_builder_create_union_vector@@Base>:
   27ecc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27ed0:	mov	r5, r1
   27ed4:	mov	r4, r2
   27ed8:	strd	r6, [sp, #8]
   27edc:	mov	r6, r0
   27ee0:	mov	r0, r1
   27ee4:	str	r8, [sp, #16]
   27ee8:	mov	r7, r3
   27eec:	str	lr, [sp, #20]
   27ef0:	sub	sp, sp, #16
   27ef4:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   27ef8:	cmp	r0, #0
   27efc:	beq	27f28 <flatcc_builder_create_union_vector@@Base+0x5c>
   27f00:	mov	r3, #0
   27f04:	str	r3, [r6]
   27f08:	str	r3, [r6, #4]
   27f0c:	mov	r0, r6
   27f10:	add	sp, sp, #16
   27f14:	ldrd	r4, [sp]
   27f18:	ldrd	r6, [sp, #8]
   27f1c:	ldr	r8, [sp, #16]
   27f20:	add	sp, sp, #20
   27f24:	pop	{pc}		; (ldr pc, [sp], #4)
   27f28:	mov	r1, r7
   27f2c:	mov	r0, r5
   27f30:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   27f34:	cmp	r0, #0
   27f38:	beq	27f00 <flatcc_builder_create_union_vector@@Base+0x34>
   27f3c:	ldr	r8, [r5, #20]
   27f40:	ldr	r3, [r5, #24]
   27f44:	add	r1, r7, r8
   27f48:	cmp	r1, r3
   27f4c:	str	r1, [r5, #20]
   27f50:	bcs	2803c <flatcc_builder_create_union_vector@@Base+0x170>
   27f54:	ldr	r2, [r5, #16]
   27f58:	adds	r8, r2, r8
   27f5c:	beq	27f00 <flatcc_builder_create_union_vector@@Base+0x34>
   27f60:	mov	r0, r5
   27f64:	bl	27e24 <flatcc_builder_offset_vector_edit@@Base>
   27f68:	cmp	r7, #0
   27f6c:	mov	r3, r0
   27f70:	beq	27fa0 <flatcc_builder_create_union_vector@@Base+0xd4>
   27f74:	add	r2, r4, r7, lsl #3
   27f78:	mov	r1, r4
   27f7c:	sub	lr, r8, #1
   27f80:	sub	ip, r0, #4
   27f84:	ldrb	r4, [r1]
   27f88:	add	r1, r1, #8
   27f8c:	strb	r4, [lr, #1]!
   27f90:	ldr	r4, [r1, #-4]
   27f94:	cmp	r1, r2
   27f98:	str	r4, [ip, #4]!
   27f9c:	bne	27f84 <flatcc_builder_create_union_vector@@Base+0xb8>
   27fa0:	mov	r2, r8
   27fa4:	mov	r1, r5
   27fa8:	str	r7, [sp]
   27fac:	add	r0, sp, #8
   27fb0:	bl	27e38 <flatcc_builder_create_union_vector_direct@@Base>
   27fb4:	mov	r1, #0
   27fb8:	ldr	r0, [r5, #16]
   27fbc:	ldr	r2, [r5, #20]
   27fc0:	ldr	r7, [sp, #8]
   27fc4:	ldr	r4, [sp, #12]
   27fc8:	bl	14594 <memset@plt>
   27fcc:	ldr	r3, [r5, #32]
   27fd0:	str	r7, [r6]
   27fd4:	ldr	r0, [r5, #60]	; 0x3c
   27fd8:	str	r4, [r6, #4]
   27fdc:	ldr	r2, [r5, #64]	; 0x40
   27fe0:	ldr	ip, [r3]
   27fe4:	ldmib	r3, {r1, lr}
   27fe8:	add	r0, r0, ip
   27fec:	sub	r2, r2, ip
   27ff0:	str	r0, [r5, #16]
   27ff4:	cmp	r2, r1
   27ff8:	ldrh	r0, [r5, #128]	; 0x80
   27ffc:	movcs	r2, r1
   28000:	str	lr, [r5, #20]
   28004:	str	ip, [r5, #28]
   28008:	ldrh	ip, [r5, #130]	; 0x82
   2800c:	str	r2, [r5, #24]
   28010:	ldr	r2, [r5, #156]	; 0x9c
   28014:	str	r1, [r3, #4]
   28018:	cmp	r0, ip
   2801c:	sub	r0, r3, #36	; 0x24
   28020:	strhcc	ip, [r5, #128]	; 0x80
   28024:	ldrh	r1, [r3, #12]
   28028:	sub	r3, r2, #1
   2802c:	str	r0, [r5, #32]
   28030:	strh	r1, [r5, #130]	; 0x82
   28034:	str	r3, [r5, #156]	; 0x9c
   28038:	b	27f0c <flatcc_builder_create_union_vector@@Base+0x40>
   2803c:	add	r1, r1, #1
   28040:	mvn	r2, #3
   28044:	mov	r0, r5
   28048:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   2804c:	cmp	r0, #0
   28050:	beq	27f54 <flatcc_builder_create_union_vector@@Base+0x88>
   28054:	b	27f00 <flatcc_builder_create_union_vector@@Base+0x34>

00028058 <flatcc_builder_start_union_vector@@Base>:
   28058:	mov	r1, #4
   2805c:	strd	r4, [sp, #-16]!
   28060:	mov	r4, r0
   28064:	str	r6, [sp, #8]
   28068:	str	lr, [sp, #12]
   2806c:	bl	24fb4 <flatcc_builder_default_alloc@@Base+0x334>
   28070:	cmp	r0, #0
   28074:	bne	280cc <flatcc_builder_start_union_vector@@Base+0x74>
   28078:	ldr	ip, [r4, #28]
   2807c:	mov	lr, #8
   28080:	mov	r5, #7
   28084:	ldr	r3, [r4, #32]
   28088:	ldr	r2, [r4, #64]	; 0x40
   2808c:	ldr	r1, [r4, #60]	; 0x3c
   28090:	strh	r5, [r3, #14]
   28094:	str	lr, [r3, #16]
   28098:	sub	r2, r2, ip
   2809c:	str	r0, [r3, #20]
   280a0:	cmn	r2, #4
   280a4:	mvnhi	r2, #3
   280a8:	add	r1, r1, ip
   280ac:	str	r1, [r4, #16]
   280b0:	str	r2, [r4, #24]
   280b4:	mvn	r2, #3
   280b8:	str	r2, [r3, #4]
   280bc:	ldrd	r4, [sp]
   280c0:	ldr	r6, [sp, #8]
   280c4:	add	sp, sp, #12
   280c8:	pop	{pc}		; (ldr pc, [sp], #4)
   280cc:	mvn	r0, #0
   280d0:	b	280bc <flatcc_builder_start_union_vector@@Base+0x64>

000280d4 <flatcc_builder_union_vector_edit@@Base>:
   280d4:	ldr	r0, [r0, #16]
   280d8:	bx	lr

000280dc <flatcc_builder_union_vector_count@@Base>:
   280dc:	ldr	r3, [r0, #32]
   280e0:	ldr	r0, [r3, #20]
   280e4:	bx	lr

000280e8 <flatcc_builder_end_union_vector@@Base>:
   280e8:	ldr	r3, [r1, #32]
   280ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   280f0:	ldrh	r3, [r3, #14]
   280f4:	strd	r6, [sp, #8]
   280f8:	str	r8, [sp, #16]
   280fc:	str	lr, [sp, #20]
   28100:	sub	sp, sp, #16
   28104:	cmp	r3, #7
   28108:	bne	28268 <flatcc_builder_end_union_vector@@Base+0x180>
   2810c:	mov	r4, r1
   28110:	mov	r6, r0
   28114:	mov	r0, r1
   28118:	bl	280dc <flatcc_builder_union_vector_count@@Base>
   2811c:	ldr	r8, [r4, #20]
   28120:	lsl	r7, r0, #2
   28124:	mov	r5, r0
   28128:	ldr	r3, [r4, #24]
   2812c:	add	r1, r7, r0
   28130:	add	r1, r1, r8
   28134:	cmp	r1, r3
   28138:	str	r1, [r4, #20]
   2813c:	bcs	28240 <flatcc_builder_end_union_vector@@Base+0x158>
   28140:	ldr	r3, [r4, #16]
   28144:	adds	r8, r3, r8
   28148:	beq	28258 <flatcc_builder_end_union_vector@@Base+0x170>
   2814c:	mov	r0, r4
   28150:	add	r7, r8, r7
   28154:	bl	280d4 <flatcc_builder_union_vector_edit@@Base>
   28158:	cmp	r5, #0
   2815c:	beq	28188 <flatcc_builder_end_union_vector@@Base+0xa0>
   28160:	add	r3, r0, r5, lsl #3
   28164:	sub	ip, r7, #1
   28168:	sub	r1, r8, #4
   2816c:	ldrb	lr, [r0]
   28170:	add	r0, r0, #8
   28174:	strb	lr, [ip, #1]!
   28178:	ldr	lr, [r0, #-4]
   2817c:	cmp	r0, r3
   28180:	str	lr, [r1, #4]!
   28184:	bne	2816c <flatcc_builder_end_union_vector@@Base+0x84>
   28188:	mov	r3, r8
   2818c:	mov	r2, r7
   28190:	str	r5, [sp]
   28194:	mov	r1, r4
   28198:	add	r0, sp, #8
   2819c:	bl	27e38 <flatcc_builder_create_union_vector_direct@@Base>
   281a0:	mov	r1, #0
   281a4:	ldr	r0, [r4, #16]
   281a8:	ldr	r2, [r4, #20]
   281ac:	ldr	r7, [sp, #8]
   281b0:	ldr	r5, [sp, #12]
   281b4:	bl	14594 <memset@plt>
   281b8:	ldr	r3, [r4, #32]
   281bc:	str	r7, [r6]
   281c0:	ldr	r0, [r4, #60]	; 0x3c
   281c4:	str	r5, [r6, #4]
   281c8:	ldr	r2, [r4, #64]	; 0x40
   281cc:	ldr	ip, [r3]
   281d0:	ldmib	r3, {r1, lr}
   281d4:	add	r0, r0, ip
   281d8:	sub	r2, r2, ip
   281dc:	str	r0, [r4, #16]
   281e0:	cmp	r2, r1
   281e4:	ldrh	r0, [r4, #128]	; 0x80
   281e8:	movcs	r2, r1
   281ec:	str	lr, [r4, #20]
   281f0:	str	ip, [r4, #28]
   281f4:	ldrh	ip, [r4, #130]	; 0x82
   281f8:	str	r2, [r4, #24]
   281fc:	ldr	r2, [r4, #156]	; 0x9c
   28200:	str	r1, [r3, #4]
   28204:	cmp	r0, ip
   28208:	sub	r0, r3, #36	; 0x24
   2820c:	strhcc	ip, [r4, #128]	; 0x80
   28210:	ldrh	r1, [r3, #12]
   28214:	sub	r3, r2, #1
   28218:	str	r0, [r4, #32]
   2821c:	strh	r1, [r4, #130]	; 0x82
   28220:	str	r3, [r4, #156]	; 0x9c
   28224:	mov	r0, r6
   28228:	add	sp, sp, #16
   2822c:	ldrd	r4, [sp]
   28230:	ldrd	r6, [sp, #8]
   28234:	ldr	r8, [sp, #16]
   28238:	add	sp, sp, #20
   2823c:	pop	{pc}		; (ldr pc, [sp], #4)
   28240:	add	r1, r1, #1
   28244:	mvn	r2, #3
   28248:	mov	r0, r4
   2824c:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28250:	cmp	r0, #0
   28254:	beq	28140 <flatcc_builder_end_union_vector@@Base+0x58>
   28258:	mov	r3, #0
   2825c:	str	r3, [r6]
   28260:	str	r3, [r6, #4]
   28264:	b	28224 <flatcc_builder_end_union_vector@@Base+0x13c>
   28268:	ldr	r3, [pc, #28]	; 2828c <flatcc_builder_end_union_vector@@Base+0x1a4>
   2826c:	movw	r2, #1617	; 0x651
   28270:	ldr	r1, [pc, #24]	; 28290 <flatcc_builder_end_union_vector@@Base+0x1a8>
   28274:	ldr	r0, [pc, #24]	; 28294 <flatcc_builder_end_union_vector@@Base+0x1ac>
   28278:	add	r3, pc, r3
   2827c:	add	r3, r3, #968	; 0x3c8
   28280:	add	r1, pc, r1
   28284:	add	r0, pc, r0
   28288:	bl	145e8 <__assert_fail@plt>
   2828c:	andeq	r9, r1, r4, lsr r0
   28290:	andeq	r9, r1, ip, ror r7
   28294:	muleq	r1, r4, sl

00028298 <flatcc_builder_extend_union_vector@@Base>:
   28298:	ldr	ip, [r0, #32]
   2829c:	strd	r4, [sp, #-16]!
   282a0:	ldr	r3, [ip, #20]
   282a4:	str	r6, [sp, #8]
   282a8:	str	lr, [sp, #12]
   282ac:	adds	r2, r1, r3
   282b0:	movcs	r3, #1
   282b4:	movcc	r3, #0
   282b8:	cmn	r2, #-536870911	; 0xe0000001
   282bc:	movls	r4, #0
   282c0:	movhi	r4, #1
   282c4:	orrs	r4, r3, r4
   282c8:	bne	28320 <flatcc_builder_extend_union_vector@@Base+0x88>
   282cc:	ldr	r6, [r0, #20]
   282d0:	mov	r5, r0
   282d4:	ldr	r3, [r0, #24]
   282d8:	str	r2, [ip, #20]
   282dc:	add	r1, r6, r1, lsl #3
   282e0:	cmp	r1, r3
   282e4:	str	r1, [r0, #20]
   282e8:	bcs	28304 <flatcc_builder_extend_union_vector@@Base+0x6c>
   282ec:	ldr	r0, [r5, #16]
   282f0:	add	r0, r0, r6
   282f4:	ldrd	r4, [sp]
   282f8:	ldr	r6, [sp, #8]
   282fc:	add	sp, sp, #12
   28300:	pop	{pc}		; (ldr pc, [sp], #4)
   28304:	add	r1, r1, #1
   28308:	mvn	r2, #3
   2830c:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28310:	cmp	r0, #0
   28314:	beq	282ec <flatcc_builder_extend_union_vector@@Base+0x54>
   28318:	mov	r0, r4
   2831c:	b	282f4 <flatcc_builder_extend_union_vector@@Base+0x5c>
   28320:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>

00028324 <flatcc_builder_truncate_union_vector@@Base>:
   28324:	mov	r3, r0
   28328:	ldr	r0, [r0, #32]
   2832c:	str	r4, [sp, #-8]!
   28330:	ldrh	r2, [r0, #14]
   28334:	str	lr, [sp, #4]
   28338:	cmp	r2, #7
   2833c:	bne	2838c <flatcc_builder_truncate_union_vector@@Base+0x68>
   28340:	mov	lr, r1
   28344:	ldr	r1, [r0, #20]
   28348:	cmp	r1, lr
   2834c:	bcc	283b0 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   28350:	ldr	r2, [r0, #16]
   28354:	sub	ip, r1, lr
   28358:	mov	r1, #0
   2835c:	str	ip, [r0, #20]
   28360:	ldr	r0, [r3, #16]
   28364:	ldr	ip, [r3, #20]
   28368:	mul	r2, r2, lr
   2836c:	sub	ip, ip, r2
   28370:	add	r0, r0, ip
   28374:	str	ip, [r3, #20]
   28378:	bl	14594 <memset@plt>
   2837c:	ldr	r4, [sp]
   28380:	add	sp, sp, #4
   28384:	mov	r0, #0
   28388:	pop	{pc}		; (ldr pc, [sp], #4)
   2838c:	ldr	r3, [pc, #64]	; 283d4 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   28390:	movw	r2, #1665	; 0x681
   28394:	ldr	r1, [pc, #60]	; 283d8 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   28398:	ldr	r0, [pc, #60]	; 283dc <flatcc_builder_truncate_union_vector@@Base+0xb8>
   2839c:	add	r3, pc, r3
   283a0:	add	r3, r3, #1000	; 0x3e8
   283a4:	add	r1, pc, r1
   283a8:	add	r0, pc, r0
   283ac:	bl	145e8 <__assert_fail@plt>
   283b0:	ldr	r3, [pc, #40]	; 283e0 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   283b4:	movw	r2, #1666	; 0x682
   283b8:	ldr	r1, [pc, #36]	; 283e4 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   283bc:	ldr	r0, [pc, #36]	; 283e8 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   283c0:	add	r3, pc, r3
   283c4:	add	r3, r3, #1000	; 0x3e8
   283c8:	add	r1, pc, r1
   283cc:	add	r0, pc, r0
   283d0:	bl	145e8 <__assert_fail@plt>
   283d4:	andeq	r8, r1, r0, lsl pc
   283d8:	andeq	r9, r1, r8, asr r6
   283dc:	andeq	r9, r1, r0, ror r9
   283e0:	andeq	r8, r1, ip, ror #29
   283e4:	andeq	r9, r1, r4, lsr r6
   283e8:	andeq	r9, r1, r0, ror r8

000283ec <flatcc_builder_union_vector_push@@Base>:
   283ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   283f0:	strd	r6, [sp, #8]
   283f4:	str	lr, [sp, #16]
   283f8:	sub	sp, sp, #12
   283fc:	add	r3, sp, #8
   28400:	stmdb	r3, {r1, r2}
   28404:	ldr	r2, [r0, #32]
   28408:	ldrh	r3, [r2, #14]
   2840c:	cmp	r3, #7
   28410:	bne	28488 <flatcc_builder_union_vector_push@@Base+0x9c>
   28414:	ldr	r3, [r2, #20]
   28418:	cmn	r3, #-536870911	; 0xe0000001
   2841c:	beq	28480 <flatcc_builder_union_vector_push@@Base+0x94>
   28420:	ldr	r5, [r0, #20]
   28424:	add	r3, r3, #1
   28428:	mov	r4, r0
   2842c:	ldr	r1, [r0, #24]
   28430:	str	r3, [r2, #20]
   28434:	add	r3, r5, #8
   28438:	cmp	r3, r1
   2843c:	str	r3, [r0, #20]
   28440:	bcs	2846c <flatcc_builder_union_vector_push@@Base+0x80>
   28444:	ldr	r3, [r4, #16]
   28448:	adds	r0, r3, r5
   2844c:	beq	28458 <flatcc_builder_union_vector_push@@Base+0x6c>
   28450:	ldrd	r6, [sp]
   28454:	strd	r6, [r3, r5]
   28458:	add	sp, sp, #12
   2845c:	ldrd	r4, [sp]
   28460:	ldrd	r6, [sp, #8]
   28464:	add	sp, sp, #16
   28468:	pop	{pc}		; (ldr pc, [sp], #4)
   2846c:	mvn	r2, #3
   28470:	add	r1, r5, #9
   28474:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28478:	cmp	r0, #0
   2847c:	beq	28444 <flatcc_builder_union_vector_push@@Base+0x58>
   28480:	mov	r0, #0
   28484:	b	28458 <flatcc_builder_union_vector_push@@Base+0x6c>
   28488:	ldr	r3, [pc, #28]	; 284ac <flatcc_builder_union_vector_push@@Base+0xc0>
   2848c:	movw	r2, #1677	; 0x68d
   28490:	ldr	r1, [pc, #24]	; 284b0 <flatcc_builder_union_vector_push@@Base+0xc4>
   28494:	ldr	r0, [pc, #24]	; 284b4 <flatcc_builder_union_vector_push@@Base+0xc8>
   28498:	add	r3, pc, r3
   2849c:	add	r3, r3, #1040	; 0x410
   284a0:	add	r1, pc, r1
   284a4:	add	r0, pc, r0
   284a8:	bl	145e8 <__assert_fail@plt>
   284ac:	andeq	r8, r1, r4, lsl lr
   284b0:	andeq	r9, r1, ip, asr r5
   284b4:	andeq	r9, r1, r4, ror r8

000284b8 <flatcc_builder_append_union_vector@@Base>:
   284b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   284bc:	mov	r4, r1
   284c0:	ldr	r1, [r0, #32]
   284c4:	ldrh	r3, [r1, #14]
   284c8:	strd	r6, [sp, #8]
   284cc:	str	r8, [sp, #16]
   284d0:	str	lr, [sp, #20]
   284d4:	cmp	r3, #7
   284d8:	bne	28578 <flatcc_builder_append_union_vector@@Base+0xc0>
   284dc:	ldr	r3, [r1, #20]
   284e0:	adds	r3, r2, r3
   284e4:	movcs	lr, #1
   284e8:	movcc	lr, #0
   284ec:	cmn	r3, #-536870911	; 0xe0000001
   284f0:	movls	ip, #0
   284f4:	movhi	ip, #1
   284f8:	orrs	r8, lr, ip
   284fc:	bne	285a0 <flatcc_builder_append_union_vector@@Base+0xe8>
   28500:	ldr	r7, [r0, #20]
   28504:	lsl	r6, r2, #3
   28508:	mov	r5, r0
   2850c:	str	r3, [r1, #20]
   28510:	ldr	r3, [r0, #24]
   28514:	add	r1, r6, r7
   28518:	cmp	r1, r3
   2851c:	str	r1, [r0, #20]
   28520:	bcs	2855c <flatcc_builder_append_union_vector@@Base+0xa4>
   28524:	ldr	r3, [r5, #16]
   28528:	adds	r3, r3, r7
   2852c:	beq	28544 <flatcc_builder_append_union_vector@@Base+0x8c>
   28530:	mov	r0, r3
   28534:	mov	r2, r6
   28538:	mov	r1, r4
   2853c:	bl	1451c <memcpy@plt>
   28540:	mov	r3, r0
   28544:	ldrd	r4, [sp]
   28548:	mov	r0, r3
   2854c:	ldrd	r6, [sp, #8]
   28550:	ldr	r8, [sp, #16]
   28554:	add	sp, sp, #20
   28558:	pop	{pc}		; (ldr pc, [sp], #4)
   2855c:	add	r1, r1, #1
   28560:	mvn	r2, #3
   28564:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28568:	cmp	r0, #0
   2856c:	beq	28524 <flatcc_builder_append_union_vector@@Base+0x6c>
   28570:	mov	r3, r8
   28574:	b	28544 <flatcc_builder_append_union_vector@@Base+0x8c>
   28578:	ldr	r3, [pc, #36]	; 285a4 <flatcc_builder_append_union_vector@@Base+0xec>
   2857c:	movw	r2, #1692	; 0x69c
   28580:	ldr	r1, [pc, #32]	; 285a8 <flatcc_builder_append_union_vector@@Base+0xf0>
   28584:	ldr	r0, [pc, #32]	; 285ac <flatcc_builder_append_union_vector@@Base+0xf4>
   28588:	add	r3, pc, r3
   2858c:	add	r3, r3, #1072	; 0x430
   28590:	add	r1, pc, r1
   28594:	add	r3, r3, #4
   28598:	add	r0, pc, r0
   2859c:	bl	145e8 <__assert_fail@plt>
   285a0:	bl	24f7c <flatcc_builder_default_alloc@@Base+0x2fc>
   285a4:	andeq	r8, r1, r4, lsr #26
   285a8:	andeq	r9, r1, ip, ror #8
   285ac:	andeq	r9, r1, r0, lsl #15

000285b0 <flatcc_builder_create_string@@Base>:
   285b0:	ldr	ip, [r0, #136]	; 0x88
   285b4:	cmp	r2, #0
   285b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   285bc:	mov	r5, #4
   285c0:	mov	r4, r0
   285c4:	strd	r6, [sp, #8]
   285c8:	mov	r0, #1
   285cc:	moveq	r7, #2
   285d0:	str	lr, [sp, #16]
   285d4:	sub	sp, sp, #92	; 0x5c
   285d8:	moveq	r1, r0
   285dc:	add	r3, sp, #12
   285e0:	ldr	lr, [pc, #204]	; 286b4 <flatcc_builder_create_string@@Base+0x104>
   285e4:	str	r2, [sp, #12]
   285e8:	str	r3, [sp, #24]
   285ec:	sub	r3, ip, r2
   285f0:	sub	r3, r3, #1
   285f4:	str	r5, [sp, #28]
   285f8:	and	r3, r3, #3
   285fc:	add	lr, pc, lr
   28600:	add	r3, r3, r0
   28604:	beq	2861c <flatcc_builder_create_string@@Base+0x6c>
   28608:	add	r5, r2, r5
   2860c:	mov	r7, #3
   28610:	str	r1, [sp, #32]
   28614:	mov	r1, #2
   28618:	str	r2, [sp, #36]	; 0x24
   2861c:	ldr	r6, [pc, #148]	; 286b8 <flatcc_builder_create_string@@Base+0x108>
   28620:	add	r0, r3, r5
   28624:	add	r2, sp, #88	; 0x58
   28628:	add	r1, r1, #1
   2862c:	sub	r5, ip, r0
   28630:	add	r1, r2, r1, lsl #3
   28634:	str	r0, [sp, #16]
   28638:	cmp	ip, r5
   2863c:	ldr	r2, [lr, r6]
   28640:	str	r7, [sp, #20]
   28644:	strd	r2, [r1, #-72]	; 0xffffffb8
   28648:	ble	2868c <flatcc_builder_create_string@@Base+0xdc>
   2864c:	mov	r2, r7
   28650:	mov	r3, r5
   28654:	str	r0, [sp]
   28658:	add	r1, sp, #24
   2865c:	ldr	r0, [r4, #36]	; 0x24
   28660:	ldr	r6, [r4, #44]	; 0x2c
   28664:	blx	r6
   28668:	cmp	r0, #0
   2866c:	bne	286b0 <flatcc_builder_create_string@@Base+0x100>
   28670:	mov	r0, r5
   28674:	str	r5, [r4, #136]	; 0x88
   28678:	add	sp, sp, #92	; 0x5c
   2867c:	ldrd	r4, [sp]
   28680:	ldrd	r6, [sp, #8]
   28684:	add	sp, sp, #16
   28688:	pop	{pc}		; (ldr pc, [sp], #4)
   2868c:	ldr	r3, [pc, #40]	; 286bc <flatcc_builder_create_string@@Base+0x10c>
   28690:	movw	r2, #647	; 0x287
   28694:	ldr	r1, [pc, #36]	; 286c0 <flatcc_builder_create_string@@Base+0x110>
   28698:	ldr	r0, [pc, #36]	; 286c4 <flatcc_builder_create_string@@Base+0x114>
   2869c:	add	r3, pc, r3
   286a0:	add	r3, r3, #44	; 0x2c
   286a4:	add	r1, pc, r1
   286a8:	add	r0, pc, r0
   286ac:	bl	145e8 <__assert_fail@plt>
   286b0:	bl	24f44 <flatcc_builder_default_alloc@@Base+0x2c4>
   286b4:	strdeq	fp, [r2], -ip
   286b8:	andeq	r0, r0, r4, rrx
   286bc:	andeq	r8, r1, r0, lsl ip
   286c0:	andeq	r9, r1, r8, asr r3
   286c4:	ldrdeq	r9, [r1], -ip

000286c8 <flatcc_builder_create_string_str@@Base>:
   286c8:	strd	r4, [sp, #-16]!
   286cc:	mov	r5, r0
   286d0:	mov	r0, r1
   286d4:	mov	r4, r1
   286d8:	str	r6, [sp, #8]
   286dc:	str	lr, [sp, #12]
   286e0:	bl	14570 <strlen@plt>
   286e4:	mov	r2, r0
   286e8:	mov	r1, r4
   286ec:	ldr	r6, [sp, #8]
   286f0:	mov	r0, r5
   286f4:	ldrd	r4, [sp]
   286f8:	ldr	lr, [sp, #12]
   286fc:	add	sp, sp, #16
   28700:	b	285b0 <flatcc_builder_create_string@@Base>

00028704 <flatcc_builder_create_string_strn@@Base>:
   28704:	strd	r4, [sp, #-16]!
   28708:	mov	r4, r1
   2870c:	mov	r1, #0
   28710:	str	r6, [sp, #8]
   28714:	mov	r6, r0
   28718:	mov	r0, r4
   2871c:	mov	r5, r2
   28720:	str	lr, [sp, #12]
   28724:	bl	145b8 <memchr@plt>
   28728:	cmp	r0, #0
   2872c:	mov	r1, r4
   28730:	ldr	lr, [sp, #12]
   28734:	subne	r5, r0, r4
   28738:	mov	r0, r6
   2873c:	mov	r2, r5
   28740:	ldrd	r4, [sp]
   28744:	ldr	r6, [sp, #8]
   28748:	add	sp, sp, #16
   2874c:	b	285b0 <flatcc_builder_create_string@@Base>

00028750 <flatcc_builder_end_string@@Base>:
   28750:	ldr	r3, [r0, #32]
   28754:	strd	r4, [sp, #-16]!
   28758:	ldrh	r2, [r3, #14]
   2875c:	str	r6, [sp, #8]
   28760:	str	lr, [sp, #12]
   28764:	cmp	r2, #6
   28768:	bne	28840 <flatcc_builder_end_string@@Base+0xf0>
   2876c:	ldr	r2, [r3, #20]
   28770:	mov	r4, r0
   28774:	ldr	r3, [r0, #20]
   28778:	cmp	r2, r3
   2877c:	bne	28818 <flatcc_builder_end_string@@Base+0xc8>
   28780:	ldr	r1, [r0, #16]
   28784:	bl	285b0 <flatcc_builder_create_string@@Base>
   28788:	subs	r5, r0, #0
   2878c:	beq	28804 <flatcc_builder_end_string@@Base+0xb4>
   28790:	mov	r1, #0
   28794:	ldr	r0, [r4, #16]
   28798:	ldr	r2, [r4, #20]
   2879c:	bl	14594 <memset@plt>
   287a0:	ldr	r3, [r4, #32]
   287a4:	ldr	r0, [r4, #60]	; 0x3c
   287a8:	ldr	r2, [r4, #64]	; 0x40
   287ac:	ldr	ip, [r3]
   287b0:	ldmib	r3, {r1, lr}
   287b4:	add	r0, r0, ip
   287b8:	sub	r2, r2, ip
   287bc:	str	r0, [r4, #16]
   287c0:	cmp	r2, r1
   287c4:	ldrh	r0, [r4, #128]	; 0x80
   287c8:	movcs	r2, r1
   287cc:	str	lr, [r4, #20]
   287d0:	str	ip, [r4, #28]
   287d4:	ldrh	ip, [r4, #130]	; 0x82
   287d8:	str	r2, [r4, #24]
   287dc:	ldr	r2, [r4, #156]	; 0x9c
   287e0:	str	r1, [r3, #4]
   287e4:	cmp	r0, ip
   287e8:	sub	r0, r3, #36	; 0x24
   287ec:	strhcc	ip, [r4, #128]	; 0x80
   287f0:	ldrh	r1, [r3, #12]
   287f4:	sub	r3, r2, #1
   287f8:	str	r0, [r4, #32]
   287fc:	strh	r1, [r4, #130]	; 0x82
   28800:	str	r3, [r4, #156]	; 0x9c
   28804:	mov	r0, r5
   28808:	ldrd	r4, [sp]
   2880c:	ldr	r6, [sp, #8]
   28810:	add	sp, sp, #12
   28814:	pop	{pc}		; (ldr pc, [sp], #4)
   28818:	ldr	r3, [pc, #72]	; 28868 <flatcc_builder_end_string@@Base+0x118>
   2881c:	movw	r2, #1733	; 0x6c5
   28820:	ldr	r1, [pc, #68]	; 2886c <flatcc_builder_end_string@@Base+0x11c>
   28824:	ldr	r0, [pc, #68]	; 28870 <flatcc_builder_end_string@@Base+0x120>
   28828:	add	r3, pc, r3
   2882c:	add	r3, r3, #1104	; 0x450
   28830:	add	r1, pc, r1
   28834:	add	r3, r3, #8
   28838:	add	r0, pc, r0
   2883c:	bl	145e8 <__assert_fail@plt>
   28840:	ldr	r3, [pc, #44]	; 28874 <flatcc_builder_end_string@@Base+0x124>
   28844:	movw	r2, #1732	; 0x6c4
   28848:	ldr	r1, [pc, #40]	; 28878 <flatcc_builder_end_string@@Base+0x128>
   2884c:	ldr	r0, [pc, #40]	; 2887c <flatcc_builder_end_string@@Base+0x12c>
   28850:	add	r3, pc, r3
   28854:	add	r3, r3, #1104	; 0x450
   28858:	add	r1, pc, r1
   2885c:	add	r3, r3, #8
   28860:	add	r0, pc, r0
   28864:	bl	145e8 <__assert_fail@plt>
   28868:	andeq	r8, r1, r4, lsl #21
   2886c:	andeq	r9, r1, ip, asr #3
   28870:	andeq	r9, r1, r4, lsl r5
   28874:	andeq	r8, r1, ip, asr sl
   28878:	andeq	r9, r1, r4, lsr #3
   2887c:	andeq	r9, r1, ip, lsl #7

00028880 <flatcc_builder_string_edit@@Base>:
   28880:	ldr	r0, [r0, #16]
   28884:	bx	lr

00028888 <flatcc_builder_string_len@@Base>:
   28888:	ldr	r3, [r0, #32]
   2888c:	ldr	r0, [r3, #20]
   28890:	bx	lr

00028894 <flatcc_builder_table_add@@Base>:
   28894:	strd	r4, [sp, #-32]!	; 0xffffffe0
   28898:	mov	r4, r0
   2889c:	ldr	r0, [r0, #32]
   288a0:	ldrh	r0, [r0, #14]
   288a4:	strd	r6, [sp, #8]
   288a8:	strd	r8, [sp, #16]
   288ac:	str	sl, [sp, #24]
   288b0:	str	lr, [sp, #28]
   288b4:	cmp	r0, #3
   288b8:	bne	289e8 <flatcc_builder_table_add@@Base+0x154>
   288bc:	movw	r0, #32764	; 0x7ffc
   288c0:	cmp	r1, r0
   288c4:	bhi	289c0 <flatcc_builder_table_add@@Base+0x12c>
   288c8:	ldrh	r0, [r4, #130]	; 0x82
   288cc:	lsl	r8, r1, #1
   288d0:	ldr	lr, [r4, #4]
   288d4:	cmp	r0, r3
   288d8:	strhcc	r3, [r4, #130]	; 0x82
   288dc:	ldrh	r6, [lr, r8]
   288e0:	add	lr, lr, r8
   288e4:	cmp	r6, #0
   288e8:	bne	28998 <flatcc_builder_table_add@@Base+0x104>
   288ec:	ldr	ip, [r4, #12]
   288f0:	movw	r9, #31153	; 0x79b1
   288f4:	movt	r9, #40503	; 0x9e37
   288f8:	uxth	r7, r1
   288fc:	sub	r5, r3, #1
   28900:	ldr	r0, [r4, #20]
   28904:	rsb	r3, r3, #0
   28908:	eor	ip, ip, r1
   2890c:	ldr	r1, [r4, #24]
   28910:	mul	ip, r9, ip
   28914:	add	r5, r5, r0
   28918:	and	r5, r5, r3
   2891c:	eor	ip, ip, r2
   28920:	add	r2, r2, r5
   28924:	cmp	r2, r1
   28928:	mul	ip, r9, ip
   2892c:	str	ip, [r4, #12]
   28930:	str	r2, [r4, #20]
   28934:	bcs	28970 <flatcc_builder_table_add@@Base+0xdc>
   28938:	add	r3, r5, #4
   2893c:	ldr	r0, [r4, #16]
   28940:	strh	r3, [lr]
   28944:	ldrh	r3, [r4, #8]
   28948:	add	r0, r0, r5
   2894c:	cmp	r3, r7
   28950:	addls	r7, r7, #1
   28954:	strhls	r7, [r4, #8]
   28958:	ldrd	r4, [sp]
   2895c:	ldrd	r6, [sp, #8]
   28960:	ldrd	r8, [sp, #16]
   28964:	ldr	sl, [sp, #24]
   28968:	add	sp, sp, #28
   2896c:	pop	{pc}		; (ldr pc, [sp], #4)
   28970:	add	r1, r2, #1
   28974:	mov	r0, r4
   28978:	movw	r2, #65532	; 0xfffc
   2897c:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28980:	cmp	r0, #0
   28984:	movne	r0, r6
   28988:	bne	28958 <flatcc_builder_table_add@@Base+0xc4>
   2898c:	ldr	lr, [r4, #4]
   28990:	add	lr, lr, r8
   28994:	b	28938 <flatcc_builder_table_add@@Base+0xa4>
   28998:	ldr	r3, [pc, #112]	; 28a10 <flatcc_builder_table_add@@Base+0x17c>
   2899c:	movw	r2, #1784	; 0x6f8
   289a0:	ldr	r1, [pc, #108]	; 28a14 <flatcc_builder_table_add@@Base+0x180>
   289a4:	ldr	r0, [pc, #108]	; 28a18 <flatcc_builder_table_add@@Base+0x184>
   289a8:	add	r3, pc, r3
   289ac:	add	r3, r3, #1136	; 0x470
   289b0:	add	r1, pc, r1
   289b4:	add	r3, r3, #4
   289b8:	add	r0, pc, r0
   289bc:	bl	145e8 <__assert_fail@plt>
   289c0:	ldr	r3, [pc, #84]	; 28a1c <flatcc_builder_table_add@@Base+0x188>
   289c4:	movw	r2, #1774	; 0x6ee
   289c8:	ldr	r1, [pc, #80]	; 28a20 <flatcc_builder_table_add@@Base+0x18c>
   289cc:	ldr	r0, [pc, #80]	; 28a24 <flatcc_builder_table_add@@Base+0x190>
   289d0:	add	r3, pc, r3
   289d4:	add	r3, r3, #1136	; 0x470
   289d8:	add	r1, pc, r1
   289dc:	add	r3, r3, #4
   289e0:	add	r0, pc, r0
   289e4:	bl	145e8 <__assert_fail@plt>
   289e8:	ldr	r3, [pc, #56]	; 28a28 <flatcc_builder_table_add@@Base+0x194>
   289ec:	movw	r2, #1773	; 0x6ed
   289f0:	ldr	r1, [pc, #52]	; 28a2c <flatcc_builder_table_add@@Base+0x198>
   289f4:	ldr	r0, [pc, #52]	; 28a30 <flatcc_builder_table_add@@Base+0x19c>
   289f8:	add	r3, pc, r3
   289fc:	add	r3, r3, #1136	; 0x470
   28a00:	add	r1, pc, r1
   28a04:	add	r3, r3, #4
   28a08:	add	r0, pc, r0
   28a0c:	bl	145e8 <__assert_fail@plt>
   28a10:	andeq	r8, r1, r4, lsl #18
   28a14:	andeq	r9, r1, ip, asr #32
   28a18:	andeq	r9, r1, ip, asr #1
   28a1c:	ldrdeq	r8, [r1], -ip
   28a20:	andeq	r9, r1, r4, lsr #32
   28a24:	muleq	r1, r0, r3
   28a28:			; <UNDEFINED> instruction: 0x000188b4
   28a2c:	strdeq	r8, [r1], -ip
   28a30:	ldrdeq	r9, [r1], -r0

00028a34 <flatcc_builder_table_edit@@Base>:
   28a34:	ldr	r2, [r0, #32]
   28a38:	ldrh	r2, [r2, #14]
   28a3c:	cmp	r2, #3
   28a40:	bne	28a58 <flatcc_builder_table_edit@@Base+0x24>
   28a44:	ldr	r3, [r0, #20]
   28a48:	ldr	r0, [r0, #16]
   28a4c:	sub	r3, r3, r1
   28a50:	add	r0, r0, r3
   28a54:	bx	lr
   28a58:	ldr	r3, [pc, #36]	; 28a84 <flatcc_builder_table_edit@@Base+0x50>
   28a5c:	movw	r2, #1794	; 0x702
   28a60:	str	r4, [sp, #-8]!
   28a64:	ldr	r1, [pc, #28]	; 28a88 <flatcc_builder_table_edit@@Base+0x54>
   28a68:	str	lr, [sp, #4]
   28a6c:	ldr	r0, [pc, #24]	; 28a8c <flatcc_builder_table_edit@@Base+0x58>
   28a70:	add	r3, pc, r3
   28a74:	add	r3, r3, #1168	; 0x490
   28a78:	add	r1, pc, r1
   28a7c:	add	r0, pc, r0
   28a80:	bl	145e8 <__assert_fail@plt>
   28a84:	andeq	r8, r1, ip, lsr r8
   28a88:	andeq	r8, r1, r4, lsl #31
   28a8c:	andeq	r9, r1, ip, asr r2

00028a90 <flatcc_builder_table_add_copy@@Base>:
   28a90:	strd	r4, [sp, #-16]!
   28a94:	mov	r4, r3
   28a98:	ldrh	r3, [sp, #16]
   28a9c:	str	r6, [sp, #8]
   28aa0:	mov	r6, r2
   28aa4:	mov	r2, r4
   28aa8:	str	lr, [sp, #12]
   28aac:	bl	28894 <flatcc_builder_table_add@@Base>
   28ab0:	subs	r5, r0, #0
   28ab4:	beq	28ac4 <flatcc_builder_table_add_copy@@Base+0x34>
   28ab8:	mov	r2, r4
   28abc:	mov	r1, r6
   28ac0:	bl	1451c <memcpy@plt>
   28ac4:	mov	r0, r5
   28ac8:	ldrd	r4, [sp]
   28acc:	ldr	r6, [sp, #8]
   28ad0:	add	sp, sp, #12
   28ad4:	pop	{pc}		; (ldr pc, [sp], #4)

00028ad8 <flatcc_builder_table_add_offset@@Base>:
   28ad8:	ldr	r3, [r0, #32]
   28adc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28ae0:	ldrh	r3, [r3, #14]
   28ae4:	strd	r6, [sp, #8]
   28ae8:	str	r8, [sp, #16]
   28aec:	str	lr, [sp, #20]
   28af0:	cmp	r3, #3
   28af4:	bne	28c1c <flatcc_builder_table_add_offset@@Base+0x144>
   28af8:	movw	r3, #32764	; 0x7ffc
   28afc:	cmp	r1, r3
   28b00:	bhi	28bf4 <flatcc_builder_table_add_offset@@Base+0x11c>
   28b04:	ldr	ip, [r0, #4]
   28b08:	lsl	r8, r1, #1
   28b0c:	mov	r4, r0
   28b10:	ldrh	r6, [ip, r8]
   28b14:	add	ip, ip, r8
   28b18:	cmp	r6, #0
   28b1c:	bne	28bcc <flatcc_builder_table_add_offset@@Base+0xf4>
   28b20:	ldr	r3, [r0, #12]
   28b24:	movw	r2, #31153	; 0x79b1
   28b28:	movt	r2, #40503	; 0x9e37
   28b2c:	uxth	r7, r1
   28b30:	ldr	r5, [r0, #20]
   28b34:	ldr	lr, [r0, #24]
   28b38:	eor	r3, r3, r1
   28b3c:	mul	r3, r2, r3
   28b40:	add	r5, r5, #3
   28b44:	bic	r5, r5, #3
   28b48:	add	r1, r5, #4
   28b4c:	eor	r3, r3, #4
   28b50:	cmp	r1, lr
   28b54:	str	r1, [r0, #20]
   28b58:	mul	r3, r2, r3
   28b5c:	str	r3, [r0, #12]
   28b60:	bhi	28bac <flatcc_builder_table_add_offset@@Base+0xd4>
   28b64:	uxth	r2, r5
   28b68:	ldr	r0, [r4, #16]
   28b6c:	add	r3, r2, #4
   28b70:	strh	r3, [ip]
   28b74:	ldrh	r3, [r4, #8]
   28b78:	add	r0, r0, r5
   28b7c:	cmp	r3, r7
   28b80:	ldr	r3, [r4]
   28b84:	addls	r7, r7, #1
   28b88:	strhls	r7, [r4, #8]
   28b8c:	add	r1, r3, #2
   28b90:	str	r1, [r4]
   28b94:	strh	r2, [r3]
   28b98:	ldrd	r4, [sp]
   28b9c:	ldrd	r6, [sp, #8]
   28ba0:	ldr	r8, [sp, #16]
   28ba4:	add	sp, sp, #20
   28ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   28bac:	movw	r2, #65532	; 0xfffc
   28bb0:	bl	24bf8 <union_vector_tests@@Base+0x17c>
   28bb4:	cmp	r0, #0
   28bb8:	movne	r0, r6
   28bbc:	bne	28b98 <flatcc_builder_table_add_offset@@Base+0xc0>
   28bc0:	ldr	ip, [r4, #4]
   28bc4:	add	ip, ip, r8
   28bc8:	b	28b64 <flatcc_builder_table_add_offset@@Base+0x8c>
   28bcc:	ldr	r3, [pc, #112]	; 28c44 <flatcc_builder_table_add_offset@@Base+0x16c>
   28bd0:	movw	r2, #1819	; 0x71b
   28bd4:	ldr	r1, [pc, #108]	; 28c48 <flatcc_builder_table_add_offset@@Base+0x170>
   28bd8:	ldr	r0, [pc, #108]	; 28c4c <flatcc_builder_table_add_offset@@Base+0x174>
   28bdc:	add	r3, pc, r3
   28be0:	add	r3, r3, #1184	; 0x4a0
   28be4:	add	r1, pc, r1
   28be8:	add	r3, r3, #12
   28bec:	add	r0, pc, r0
   28bf0:	bl	145e8 <__assert_fail@plt>
   28bf4:	ldr	r3, [pc, #84]	; 28c50 <flatcc_builder_table_add_offset@@Base+0x178>
   28bf8:	movw	r2, #1812	; 0x714
   28bfc:	ldr	r1, [pc, #80]	; 28c54 <flatcc_builder_table_add_offset@@Base+0x17c>
   28c00:	ldr	r0, [pc, #80]	; 28c58 <flatcc_builder_table_add_offset@@Base+0x180>
   28c04:	add	r3, pc, r3
   28c08:	add	r3, r3, #1184	; 0x4a0
   28c0c:	add	r1, pc, r1
   28c10:	add	r3, r3, #12
   28c14:	add	r0, pc, r0
   28c18:	bl	145e8 <__assert_fail@plt>
   28c1c:	ldr	r3, [pc, #56]	; 28c5c <flatcc_builder_table_add_offset@@Base+0x184>
   28c20:	movw	r2, #1811	; 0x713
   28c24:	ldr	r1, [pc, #52]	; 28c60 <flatcc_builder_table_add_offset@@Base+0x188>
   28c28:	ldr	r0, [pc, #52]	; 28c64 <flatcc_builder_table_add_offset@@Base+0x18c>
   28c2c:	add	r3, pc, r3
   28c30:	add	r3, r3, #1184	; 0x4a0
   28c34:	add	r1, pc, r1
   28c38:	add	r3, r3, #12
   28c3c:	add	r0, pc, r0
   28c40:	bl	145e8 <__assert_fail@plt>
   28c44:	ldrdeq	r8, [r1], -r0
   28c48:	andeq	r8, r1, r8, lsl lr
   28c4c:	muleq	r1, r8, lr
   28c50:	andeq	r8, r1, r8, lsr #13
   28c54:	strdeq	r8, [r1], -r0
   28c58:	andeq	r9, r1, ip, asr r1
   28c5c:	andeq	r8, r1, r0, lsl #13
   28c60:	andeq	r8, r1, r8, asr #27
   28c64:	muleq	r1, ip, r0

00028c68 <flatcc_builder_table_add_union@@Base>:
   28c68:	strd	r4, [sp, #-20]!	; 0xffffffec
   28c6c:	strd	r6, [sp, #8]
   28c70:	str	lr, [sp, #16]
   28c74:	sub	sp, sp, #12
   28c78:	add	ip, sp, #8
   28c7c:	stmdb	ip, {r2, r3}
   28c80:	ldr	r3, [r0, #32]
   28c84:	ldrb	r5, [sp]
   28c88:	ldr	r6, [sp, #4]
   28c8c:	ldrh	r3, [r3, #14]
   28c90:	cmp	r3, #3
   28c94:	bne	28d28 <flatcc_builder_table_add_union@@Base+0xc0>
   28c98:	cmp	r5, #0
   28c9c:	mov	r4, r0
   28ca0:	mov	r7, r1
   28ca4:	beq	28cf8 <flatcc_builder_table_add_union@@Base+0x90>
   28ca8:	cmp	r6, #0
   28cac:	beq	28cc0 <flatcc_builder_table_add_union@@Base+0x58>
   28cb0:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   28cb4:	cmp	r0, #0
   28cb8:	strne	r6, [r0]
   28cbc:	beq	28d78 <flatcc_builder_table_add_union@@Base+0x110>
   28cc0:	mov	r3, #1
   28cc4:	sub	r1, r7, #1
   28cc8:	mov	r2, r3
   28ccc:	mov	r0, r4
   28cd0:	bl	28894 <flatcc_builder_table_add@@Base>
   28cd4:	subs	r3, r0, #0
   28cd8:	beq	28d50 <flatcc_builder_table_add_union@@Base+0xe8>
   28cdc:	mov	r0, #0
   28ce0:	strb	r5, [r3]
   28ce4:	add	sp, sp, #12
   28ce8:	ldrd	r4, [sp]
   28cec:	ldrd	r6, [sp, #8]
   28cf0:	add	sp, sp, #16
   28cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   28cf8:	cmp	r6, #0
   28cfc:	beq	28cc0 <flatcc_builder_table_add_union@@Base+0x58>
   28d00:	ldr	r3, [pc, #152]	; 28da0 <flatcc_builder_table_add_union@@Base+0x138>
   28d04:	movw	r2, #1519	; 0x5ef
   28d08:	ldr	r1, [pc, #148]	; 28da4 <flatcc_builder_table_add_union@@Base+0x13c>
   28d0c:	ldr	r0, [pc, #148]	; 28da8 <flatcc_builder_table_add_union@@Base+0x140>
   28d10:	add	r3, pc, r3
   28d14:	add	r3, r3, #1216	; 0x4c0
   28d18:	add	r1, pc, r1
   28d1c:	add	r3, r3, #12
   28d20:	add	r0, pc, r0
   28d24:	bl	145e8 <__assert_fail@plt>
   28d28:	ldr	r3, [pc, #124]	; 28dac <flatcc_builder_table_add_union@@Base+0x144>
   28d2c:	movw	r2, #1518	; 0x5ee
   28d30:	ldr	r1, [pc, #120]	; 28db0 <flatcc_builder_table_add_union@@Base+0x148>
   28d34:	ldr	r0, [pc, #120]	; 28db4 <flatcc_builder_table_add_union@@Base+0x14c>
   28d38:	add	r3, pc, r3
   28d3c:	add	r3, r3, #1216	; 0x4c0
   28d40:	add	r1, pc, r1
   28d44:	add	r3, r3, #12
   28d48:	add	r0, pc, r0
   28d4c:	bl	145e8 <__assert_fail@plt>
   28d50:	ldr	r3, [pc, #96]	; 28db8 <flatcc_builder_table_add_union@@Base+0x150>
   28d54:	movw	r2, #1526	; 0x5f6
   28d58:	ldr	r1, [pc, #92]	; 28dbc <flatcc_builder_table_add_union@@Base+0x154>
   28d5c:	ldr	r0, [pc, #92]	; 28dc0 <flatcc_builder_table_add_union@@Base+0x158>
   28d60:	add	r3, pc, r3
   28d64:	add	r3, r3, #1216	; 0x4c0
   28d68:	add	r1, pc, r1
   28d6c:	add	r3, r3, #12
   28d70:	add	r0, pc, r0
   28d74:	bl	145e8 <__assert_fail@plt>
   28d78:	ldr	r3, [pc, #68]	; 28dc4 <flatcc_builder_table_add_union@@Base+0x15c>
   28d7c:	movw	r2, #1522	; 0x5f2
   28d80:	ldr	r1, [pc, #64]	; 28dc8 <flatcc_builder_table_add_union@@Base+0x160>
   28d84:	ldr	r0, [pc, #64]	; 28dcc <flatcc_builder_table_add_union@@Base+0x164>
   28d88:	add	r3, pc, r3
   28d8c:	add	r3, r3, #1216	; 0x4c0
   28d90:	add	r1, pc, r1
   28d94:	add	r3, r3, #12
   28d98:	add	r0, pc, r0
   28d9c:	bl	145e8 <__assert_fail@plt>
   28da0:	muleq	r1, ip, r5
   28da4:	andeq	r8, r1, r4, ror #25
   28da8:	muleq	r1, r4, r0
   28dac:	andeq	r8, r1, r4, ror r5
   28db0:			; <UNDEFINED> instruction: 0x00018cbc
   28db4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   28db8:	andeq	r8, r1, ip, asr #10
   28dbc:	muleq	r1, r4, ip
   28dc0:	andeq	r9, r1, r4, ror r0
   28dc4:	andeq	r8, r1, r4, lsr #10
   28dc8:	andeq	r8, r1, ip, ror #24
   28dcc:	andeq	r9, r1, r0, asr #32

00028dd0 <flatcc_builder_table_add_union_vector@@Base>:
   28dd0:	strd	r4, [sp, #-20]!	; 0xffffffec
   28dd4:	strd	r6, [sp, #8]
   28dd8:	mov	r7, r1
   28ddc:	str	lr, [sp, #16]
   28de0:	sub	sp, sp, #12
   28de4:	add	r1, sp, #8
   28de8:	stmdb	r1, {r2, r3}
   28dec:	ldr	r3, [r0, #32]
   28df0:	ldm	sp, {r4, r6}
   28df4:	ldrh	r3, [r3, #14]
   28df8:	cmp	r3, #3
   28dfc:	bne	28ea8 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   28e00:	clz	r3, r6
   28e04:	clz	r2, r4
   28e08:	lsr	r3, r3, #5
   28e0c:	lsr	r2, r2, #5
   28e10:	cmp	r2, r3
   28e14:	beq	28e44 <flatcc_builder_table_add_union_vector@@Base+0x74>
   28e18:	adds	r4, r4, #0
   28e1c:	movne	r4, #1
   28e20:	cmp	r4, r3
   28e24:	mvnne	r4, #0
   28e28:	beq	28ed0 <flatcc_builder_table_add_union_vector@@Base+0x100>
   28e2c:	mov	r0, r4
   28e30:	add	sp, sp, #12
   28e34:	ldrd	r4, [sp]
   28e38:	ldrd	r6, [sp, #8]
   28e3c:	add	sp, sp, #16
   28e40:	pop	{pc}		; (ldr pc, [sp], #4)
   28e44:	cmp	r4, #0
   28e48:	beq	28e2c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   28e4c:	sub	r1, r7, #1
   28e50:	mov	r5, r0
   28e54:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   28e58:	subs	r3, r0, #0
   28e5c:	beq	28ef8 <flatcc_builder_table_add_union_vector@@Base+0x128>
   28e60:	mov	r1, r7
   28e64:	mov	r0, r5
   28e68:	str	r4, [r3]
   28e6c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   28e70:	cmp	r0, #0
   28e74:	movne	r4, #0
   28e78:	strne	r6, [r0]
   28e7c:	bne	28e2c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   28e80:	ldr	r3, [pc, #152]	; 28f20 <flatcc_builder_table_add_union_vector@@Base+0x150>
   28e84:	movw	r2, #1544	; 0x608
   28e88:	ldr	r1, [pc, #148]	; 28f24 <flatcc_builder_table_add_union_vector@@Base+0x154>
   28e8c:	ldr	r0, [pc, #148]	; 28f28 <flatcc_builder_table_add_union_vector@@Base+0x158>
   28e90:	add	r3, pc, r3
   28e94:	add	r3, r3, #1248	; 0x4e0
   28e98:	add	r1, pc, r1
   28e9c:	add	r3, r3, #12
   28ea0:	add	r0, pc, r0
   28ea4:	bl	145e8 <__assert_fail@plt>
   28ea8:	ldr	r3, [pc, #124]	; 28f2c <flatcc_builder_table_add_union_vector@@Base+0x15c>
   28eac:	mov	r2, #1536	; 0x600
   28eb0:	ldr	r1, [pc, #120]	; 28f30 <flatcc_builder_table_add_union_vector@@Base+0x160>
   28eb4:	ldr	r0, [pc, #120]	; 28f34 <flatcc_builder_table_add_union_vector@@Base+0x164>
   28eb8:	add	r3, pc, r3
   28ebc:	add	r3, r3, #1248	; 0x4e0
   28ec0:	add	r1, pc, r1
   28ec4:	add	r3, r3, #12
   28ec8:	add	r0, pc, r0
   28ecc:	bl	145e8 <__assert_fail@plt>
   28ed0:	ldr	r3, [pc, #96]	; 28f38 <flatcc_builder_table_add_union_vector@@Base+0x168>
   28ed4:	movw	r2, #1537	; 0x601
   28ed8:	ldr	r1, [pc, #92]	; 28f3c <flatcc_builder_table_add_union_vector@@Base+0x16c>
   28edc:	ldr	r0, [pc, #92]	; 28f40 <flatcc_builder_table_add_union_vector@@Base+0x170>
   28ee0:	add	r3, pc, r3
   28ee4:	add	r3, r3, #1248	; 0x4e0
   28ee8:	add	r1, pc, r1
   28eec:	add	r3, r3, #12
   28ef0:	add	r0, pc, r0
   28ef4:	bl	145e8 <__assert_fail@plt>
   28ef8:	ldr	r3, [pc, #68]	; 28f44 <flatcc_builder_table_add_union_vector@@Base+0x174>
   28efc:	movw	r2, #1540	; 0x604
   28f00:	ldr	r1, [pc, #64]	; 28f48 <flatcc_builder_table_add_union_vector@@Base+0x178>
   28f04:	ldr	r0, [pc, #64]	; 28f4c <flatcc_builder_table_add_union_vector@@Base+0x17c>
   28f08:	add	r3, pc, r3
   28f0c:	add	r3, r3, #1248	; 0x4e0
   28f10:	add	r1, pc, r1
   28f14:	add	r3, r3, #12
   28f18:	add	r0, pc, r0
   28f1c:	bl	145e8 <__assert_fail@plt>
   28f20:	andeq	r8, r1, ip, lsl r4
   28f24:	andeq	r8, r1, r4, ror #22
   28f28:	andeq	r8, r1, r8, lsr pc
   28f2c:	strdeq	r8, [r1], -r4
   28f30:	andeq	r8, r1, ip, lsr fp
   28f34:	andeq	r8, r1, r0, lsl lr
   28f38:	andeq	r8, r1, ip, asr #7
   28f3c:	andeq	r8, r1, r4, lsl fp
   28f40:	andeq	r8, r1, r0, lsl #30
   28f44:	andeq	r8, r1, r4, lsr #7
   28f48:	andeq	r8, r1, ip, ror #21
   28f4c:	andeq	r8, r1, r0, asr #29

00028f50 <flatcc_builder_push_buffer_alignment@@Base>:
   28f50:	mov	r3, r0
   28f54:	mov	r2, #4
   28f58:	ldrh	r0, [r0, #128]	; 0x80
   28f5c:	strh	r2, [r3, #128]	; 0x80
   28f60:	bx	lr

00028f64 <flatcc_builder_pop_buffer_alignment@@Base>:
   28f64:	ldrh	r3, [r0, #128]	; 0x80
   28f68:	cmp	r3, r1
   28f6c:	strhcc	r1, [r0, #128]	; 0x80
   28f70:	bx	lr

00028f74 <flatcc_builder_get_buffer_alignment@@Base>:
   28f74:	ldrh	r0, [r0, #128]	; 0x80
   28f78:	bx	lr

00028f7c <flatcc_builder_set_vtable_clustering@@Base>:
   28f7c:	clz	r1, r1
   28f80:	lsr	r1, r1, #5
   28f84:	str	r1, [r0, #180]	; 0xb4
   28f88:	bx	lr

00028f8c <flatcc_builder_set_block_align@@Base>:
   28f8c:	strh	r1, [r0, #132]	; 0x84
   28f90:	bx	lr

00028f94 <flatcc_builder_get_level@@Base>:
   28f94:	ldr	r0, [r0, #156]	; 0x9c
   28f98:	bx	lr

00028f9c <flatcc_builder_set_max_level@@Base>:
   28f9c:	ldr	r3, [r0, #160]	; 0xa0
   28fa0:	str	r1, [r0, #176]	; 0xb0
   28fa4:	cmp	r3, r1
   28fa8:	strlt	r1, [r0, #160]	; 0xa0
   28fac:	bx	lr

00028fb0 <flatcc_builder_get_buffer_size@@Base>:
   28fb0:	ldr	r3, [r0, #136]	; 0x88
   28fb4:	ldr	r0, [r0, #140]	; 0x8c
   28fb8:	sub	r0, r0, r3
   28fbc:	bx	lr

00028fc0 <flatcc_builder_get_buffer_start@@Base>:
   28fc0:	ldr	r0, [r0, #136]	; 0x88
   28fc4:	bx	lr

00028fc8 <flatcc_builder_get_buffer_end@@Base>:
   28fc8:	ldr	r0, [r0, #140]	; 0x8c
   28fcc:	bx	lr

00028fd0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   28fd0:	str	r1, [r0, #172]	; 0xac
   28fd4:	bx	lr

00028fd8 <flatcc_builder_set_identifier@@Base>:
   28fd8:	ldr	r3, [pc, #40]	; 29008 <flatcc_builder_set_identifier@@Base+0x30>
   28fdc:	cmp	r1, #0
   28fe0:	add	r3, pc, r3
   28fe4:	beq	28ff4 <flatcc_builder_set_identifier@@Base+0x1c>
   28fe8:	ldr	r3, [r1]
   28fec:	str	r3, [r0, #168]	; 0xa8
   28ff0:	bx	lr
   28ff4:	ldr	r2, [pc, #16]	; 2900c <flatcc_builder_set_identifier@@Base+0x34>
   28ff8:	ldr	r1, [r3, r2]
   28ffc:	ldr	r3, [r1]
   29000:	str	r3, [r0, #168]	; 0xa8
   29004:	bx	lr
   29008:	andeq	fp, r2, r8, lsl r0
   2900c:	andeq	r0, r0, r4, rrx

00029010 <flatcc_builder_get_type@@Base>:
   29010:	ldr	r0, [r0, #32]
   29014:	cmp	r0, #0
   29018:	ldrhne	r0, [r0, #14]
   2901c:	bx	lr

00029020 <flatcc_builder_get_type_at@@Base>:
   29020:	cmp	r1, #0
   29024:	ble	2904c <flatcc_builder_get_type_at@@Base+0x2c>
   29028:	ldr	r3, [r0, #156]	; 0x9c
   2902c:	cmp	r3, r1
   29030:	blt	2904c <flatcc_builder_get_type_at@@Base+0x2c>
   29034:	ldr	r2, [r0, #32]
   29038:	sub	r1, r1, r3
   2903c:	add	r1, r1, r1, lsl #3
   29040:	add	r1, r2, r1, lsl #2
   29044:	ldrh	r0, [r1, #14]
   29048:	bx	lr
   2904c:	mov	r0, #0
   29050:	bx	lr

00029054 <flatcc_builder_get_direct_buffer@@Base>:
   29054:	ldr	r3, [r0, #184]	; 0xb8
   29058:	cmp	r3, #0
   2905c:	bne	29078 <flatcc_builder_get_direct_buffer@@Base+0x24>
   29060:	cmp	r1, #0
   29064:	movne	r3, #0
   29068:	movne	r0, r3
   2906c:	moveq	r0, r1
   29070:	strne	r3, [r1]
   29074:	bx	lr
   29078:	ldrd	r2, [r0, #188]	; 0xbc
   2907c:	cmp	r2, r3
   29080:	bne	29060 <flatcc_builder_get_direct_buffer@@Base+0xc>
   29084:	cmp	r1, #0
   29088:	ldrne	r3, [r0, #212]	; 0xd4
   2908c:	ldr	r0, [r0, #196]	; 0xc4
   29090:	strne	r3, [r1]
   29094:	bx	lr

00029098 <flatcc_builder_copy_buffer@@Base>:
   29098:	ldr	r3, [r0, #184]	; 0xb8
   2909c:	cmp	r3, #0
   290a0:	beq	290c8 <flatcc_builder_copy_buffer@@Base+0x30>
   290a4:	add	r0, r0, #188	; 0xbc
   290a8:	str	r4, [sp, #-8]!
   290ac:	str	lr, [sp, #4]
   290b0:	bl	2982c <flatcc_emitter_copy_buffer@@Base>
   290b4:	cmp	r0, #0
   290b8:	beq	290d0 <flatcc_builder_copy_buffer@@Base+0x38>
   290bc:	ldr	r4, [sp]
   290c0:	add	sp, sp, #4
   290c4:	pop	{pc}		; (ldr pc, [sp], #4)
   290c8:	mov	r0, r3
   290cc:	bx	lr
   290d0:	ldr	r3, [pc, #32]	; 290f8 <flatcc_builder_copy_buffer@@Base+0x60>
   290d4:	movw	r2, #1926	; 0x786
   290d8:	ldr	r1, [pc, #28]	; 290fc <flatcc_builder_copy_buffer@@Base+0x64>
   290dc:	ldr	r0, [pc, #28]	; 29100 <flatcc_builder_copy_buffer@@Base+0x68>
   290e0:	add	r3, pc, r3
   290e4:	add	r3, r3, #1296	; 0x510
   290e8:	add	r1, pc, r1
   290ec:	add	r3, r3, #4
   290f0:	add	r0, pc, r0
   290f4:	bl	145e8 <__assert_fail@plt>
   290f8:	andeq	r8, r1, ip, asr #3
   290fc:	andeq	r8, r1, r4, lsl r9
   29100:	andeq	r8, r1, r8, lsr #26

00029104 <flatcc_builder_finalize_buffer@@Base>:
   29104:	strd	r4, [sp, #-16]!
   29108:	mov	r5, r1
   2910c:	str	r6, [sp, #8]
   29110:	mov	r6, r0
   29114:	str	lr, [sp, #12]
   29118:	bl	28fb0 <flatcc_builder_get_buffer_size@@Base>
   2911c:	cmp	r5, #0
   29120:	mov	r4, r0
   29124:	strne	r0, [r5]
   29128:	bl	1454c <malloc@plt>
   2912c:	subs	r5, r0, #0
   29130:	beq	29160 <flatcc_builder_finalize_buffer@@Base+0x5c>
   29134:	mov	r2, r4
   29138:	mov	r0, r6
   2913c:	mov	r1, r5
   29140:	bl	29098 <flatcc_builder_copy_buffer@@Base>
   29144:	cmp	r0, #0
   29148:	beq	29184 <flatcc_builder_finalize_buffer@@Base+0x80>
   2914c:	mov	r0, r5
   29150:	ldrd	r4, [sp]
   29154:	ldr	r6, [sp, #8]
   29158:	add	sp, sp, #12
   2915c:	pop	{pc}		; (ldr pc, [sp], #4)
   29160:	ldr	r3, [pc, #64]	; 291a8 <flatcc_builder_finalize_buffer@@Base+0xa4>
   29164:	movw	r2, #1944	; 0x798
   29168:	ldr	r1, [pc, #60]	; 291ac <flatcc_builder_finalize_buffer@@Base+0xa8>
   2916c:	ldr	r0, [pc, #60]	; 291b0 <flatcc_builder_finalize_buffer@@Base+0xac>
   29170:	add	r3, pc, r3
   29174:	add	r3, r3, #1328	; 0x530
   29178:	add	r1, pc, r1
   2917c:	add	r0, pc, r0
   29180:	bl	145e8 <__assert_fail@plt>
   29184:	ldr	r3, [pc, #40]	; 291b4 <flatcc_builder_finalize_buffer@@Base+0xb0>
   29188:	movw	r2, #1948	; 0x79c
   2918c:	ldr	r1, [pc, #36]	; 291b8 <flatcc_builder_finalize_buffer@@Base+0xb4>
   29190:	ldr	r0, [pc, #36]	; 291bc <flatcc_builder_finalize_buffer@@Base+0xb8>
   29194:	add	r3, pc, r3
   29198:	add	r3, r3, #1328	; 0x530
   2919c:	add	r1, pc, r1
   291a0:	add	r0, pc, r0
   291a4:	bl	145e8 <__assert_fail@plt>
   291a8:	andeq	r8, r1, ip, lsr r1
   291ac:	andeq	r8, r1, r4, lsl #17
   291b0:	andeq	r8, r1, r8, lsl #18
   291b4:	andeq	r8, r1, r8, lsl r1
   291b8:	andeq	r8, r1, r0, ror #16
   291bc:	andeq	r8, r1, r4, ror #17

000291c0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   291c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   291c4:	mov	r5, r1
   291c8:	strd	r6, [sp, #8]
   291cc:	mov	r6, r0
   291d0:	str	lr, [sp, #16]
   291d4:	sub	sp, sp, #12
   291d8:	bl	28fb0 <flatcc_builder_get_buffer_size@@Base>
   291dc:	cmp	r5, #0
   291e0:	mov	r4, r0
   291e4:	sub	r4, r4, #1
   291e8:	strne	r0, [r5]
   291ec:	mov	r0, r6
   291f0:	bl	28f74 <flatcc_builder_get_buffer_alignment@@Base>
   291f4:	rsb	r3, r0, #0
   291f8:	add	r4, r4, r0
   291fc:	cmp	r0, #4
   29200:	and	r4, r4, r3
   29204:	mov	r3, #0
   29208:	movcs	r1, r0
   2920c:	movcc	r1, #4
   29210:	mov	r2, r4
   29214:	add	r0, sp, #4
   29218:	str	r3, [sp, #4]
   2921c:	bl	14588 <posix_memalign@plt>
   29220:	cmp	r0, #0
   29224:	beq	29250 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   29228:	ldr	r0, [sp, #4]
   2922c:	cmp	r0, #0
   29230:	beq	29238 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   29234:	bl	14510 <free@plt>
   29238:	cmp	r5, #0
   2923c:	movne	r3, #0
   29240:	moveq	r7, r5
   29244:	movne	r7, r3
   29248:	strne	r3, [r5]
   2924c:	b	29274 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   29250:	ldr	r7, [sp, #4]
   29254:	cmp	r7, #0
   29258:	beq	29238 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   2925c:	mov	r2, r4
   29260:	mov	r0, r6
   29264:	mov	r1, r7
   29268:	bl	29098 <flatcc_builder_copy_buffer@@Base>
   2926c:	cmp	r0, #0
   29270:	beq	2928c <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   29274:	mov	r0, r7
   29278:	add	sp, sp, #12
   2927c:	ldrd	r4, [sp]
   29280:	ldrd	r6, [sp, #8]
   29284:	add	sp, sp, #16
   29288:	pop	{pc}		; (ldr pc, [sp], #4)
   2928c:	mov	r0, r7
   29290:	b	29234 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00029294 <flatcc_builder_aligned_alloc@@Base>:
   29294:	cmp	r0, #4
   29298:	str	r4, [sp, #-8]!
   2929c:	mov	r4, #0
   292a0:	str	lr, [sp, #4]
   292a4:	sub	sp, sp, #8
   292a8:	mov	r2, r1
   292ac:	movcs	r1, r0
   292b0:	movcc	r1, #4
   292b4:	add	r0, sp, #4
   292b8:	str	r4, [sp, #4]
   292bc:	bl	14588 <posix_memalign@plt>
   292c0:	cmp	r0, r4
   292c4:	ldr	r0, [sp, #4]
   292c8:	beq	292dc <flatcc_builder_aligned_alloc@@Base+0x48>
   292cc:	cmp	r0, #0
   292d0:	beq	292dc <flatcc_builder_aligned_alloc@@Base+0x48>
   292d4:	bl	14510 <free@plt>
   292d8:	mov	r0, r4
   292dc:	add	sp, sp, #8
   292e0:	ldr	r4, [sp]
   292e4:	add	sp, sp, #4
   292e8:	pop	{pc}		; (ldr pc, [sp], #4)

000292ec <flatcc_builder_aligned_free@@Base>:
   292ec:	b	14510 <free@plt>

000292f0 <flatcc_builder_get_emit_context@@Base>:
   292f0:	ldr	r0, [r0, #36]	; 0x24
   292f4:	bx	lr

000292f8 <flatcc_emitter_recycle_page@@Base>:
   292f8:	ldr	r3, [r0]
   292fc:	cmp	r3, r1
   29300:	beq	29344 <flatcc_emitter_recycle_page@@Base+0x4c>
   29304:	ldr	r2, [r0, #4]
   29308:	cmp	r2, r1
   2930c:	beq	29344 <flatcc_emitter_recycle_page@@Base+0x4c>
   29310:	push	{lr}		; (str lr, [sp, #-4]!)
   29314:	mov	r0, #0
   29318:	ldr	lr, [r1, #2944]	; 0xb80
   2931c:	ldr	ip, [r1, #2948]	; 0xb84
   29320:	str	ip, [lr, #2948]	; 0xb84
   29324:	ldr	r2, [r3, #2948]	; 0xb84
   29328:	str	lr, [ip, #2944]	; 0xb80
   2932c:	str	r3, [r1, #2944]	; 0xb80
   29330:	str	r2, [r1, #2948]	; 0xb84
   29334:	str	r1, [r2, #2944]	; 0xb80
   29338:	ldr	r3, [r1, #2944]	; 0xb80
   2933c:	str	r1, [r3, #2948]	; 0xb84
   29340:	pop	{pc}		; (ldr pc, [sp], #4)
   29344:	mvn	r0, #0
   29348:	bx	lr

0002934c <flatcc_emitter_reset@@Base>:
   2934c:	ldr	r2, [r0]
   29350:	cmp	r2, #0
   29354:	bxeq	lr
   29358:	strd	r4, [sp, #-16]!
   2935c:	movw	ip, #64064	; 0xfa40
   29360:	movt	ip, #65535	; 0xffff
   29364:	ldr	r1, [r0, #24]
   29368:	add	r4, r2, #1472	; 0x5c0
   2936c:	ldr	r3, [r0, #32]
   29370:	ldr	r5, [r0, #28]
   29374:	str	r6, [sp, #8]
   29378:	str	lr, [sp, #12]
   2937c:	mov	lr, #1472	; 0x5c0
   29380:	cmp	r3, #0
   29384:	stmib	r0, {r2, r4}
   29388:	moveq	r3, r1
   2938c:	lsr	r1, r1, #2
   29390:	str	lr, [r0, #12]
   29394:	add	r3, r3, r3, lsl #1
   29398:	str	r4, [r0, #16]
   2939c:	str	lr, [r0, #20]
   293a0:	add	r3, r1, r3, lsr #2
   293a4:	str	ip, [r2, #2952]	; 0xb88
   293a8:	mov	ip, #0
   293ac:	cmp	r5, r3, lsl #1
   293b0:	str	ip, [r0, #24]
   293b4:	str	r3, [r0, #32]
   293b8:	bls	29410 <flatcc_emitter_reset@@Base+0xc4>
   293bc:	ldr	r3, [r2, #2944]	; 0xb80
   293c0:	mov	r4, r0
   293c4:	cmp	r2, r3
   293c8:	bne	293e0 <flatcc_emitter_reset@@Base+0x94>
   293cc:	b	29410 <flatcc_emitter_reset@@Base+0xc4>
   293d0:	ldm	r4, {r1, r2}
   293d4:	ldr	r3, [r2, #2944]	; 0xb80
   293d8:	cmp	r3, r1
   293dc:	beq	29410 <flatcc_emitter_reset@@Base+0xc4>
   293e0:	ldr	r1, [r3, #2944]	; 0xb80
   293e4:	mov	r0, r3
   293e8:	str	r1, [r2, #2944]	; 0xb80
   293ec:	ldr	r3, [r3, #2944]	; 0xb80
   293f0:	str	r2, [r3, #2948]	; 0xb84
   293f4:	bl	14510 <free@plt>
   293f8:	ldr	r3, [r4, #28]
   293fc:	ldr	r2, [r4, #32]
   29400:	sub	r3, r3, #2944	; 0xb80
   29404:	cmp	r3, r2, lsl #1
   29408:	str	r3, [r4, #28]
   2940c:	bhi	293d0 <flatcc_emitter_reset@@Base+0x84>
   29410:	ldrd	r4, [sp]
   29414:	ldr	r6, [sp, #8]
   29418:	add	sp, sp, #12
   2941c:	pop	{pc}		; (ldr pc, [sp], #4)

00029420 <flatcc_emitter_clear@@Base>:
   29420:	ldr	r3, [r0]
   29424:	cmp	r3, #0
   29428:	bxeq	lr
   2942c:	mov	r1, #0
   29430:	strd	r4, [sp, #-16]!
   29434:	mov	r5, r0
   29438:	ldr	r2, [r3, #2948]	; 0xb84
   2943c:	str	r6, [sp, #8]
   29440:	str	lr, [sp, #12]
   29444:	str	r1, [r2, #2944]	; 0xb80
   29448:	ldr	r4, [r3, #2944]	; 0xb80
   2944c:	cmp	r4, r1
   29450:	bne	2945c <flatcc_emitter_clear@@Base+0x3c>
   29454:	b	29498 <flatcc_emitter_clear@@Base+0x78>
   29458:	mov	r4, r3
   2945c:	ldr	r0, [r4, #2948]	; 0xb84
   29460:	bl	14510 <free@plt>
   29464:	ldr	r3, [r4, #2944]	; 0xb80
   29468:	cmp	r3, #0
   2946c:	bne	29458 <flatcc_emitter_clear@@Base+0x38>
   29470:	mov	r0, r4
   29474:	bl	14510 <free@plt>
   29478:	mov	r0, r5
   2947c:	mov	r2, #36	; 0x24
   29480:	ldrd	r4, [sp]
   29484:	mov	r1, #0
   29488:	ldr	r6, [sp, #8]
   2948c:	ldr	lr, [sp, #12]
   29490:	add	sp, sp, #16
   29494:	b	14594 <memset@plt>
   29498:	mov	r4, r3
   2949c:	b	29470 <flatcc_emitter_clear@@Base+0x50>

000294a0 <flatcc_emitter@@Base>:
   294a0:	cmp	r3, #0
   294a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   294a8:	mov	r4, r0
   294ac:	ldr	r3, [r0, #24]
   294b0:	strd	r6, [sp, #8]
   294b4:	strd	r8, [sp, #16]
   294b8:	sub	r8, r2, #1
   294bc:	strd	sl, [sp, #24]
   294c0:	str	lr, [sp, #32]
   294c4:	sub	sp, sp, #12
   294c8:	ldr	r0, [sp, #48]	; 0x30
   294cc:	add	r3, r3, r0
   294d0:	str	r3, [r4, #24]
   294d4:	blt	296a4 <flatcc_emitter@@Base+0x204>
   294d8:	ldr	r3, [r4, #20]
   294dc:	cmp	r3, r0
   294e0:	bcs	29580 <flatcc_emitter@@Base+0xe0>
   294e4:	cmp	r2, #0
   294e8:	beq	29560 <flatcc_emitter@@Base+0xc0>
   294ec:	mov	r8, r2
   294f0:	add	r5, r1, #8
   294f4:	movw	r2, #64064	; 0xfa40
   294f8:	movt	r2, #65535	; 0xffff
   294fc:	str	r2, [sp, #4]
   29500:	ldmdb	r5, {r7, fp}
   29504:	cmp	fp, #0
   29508:	beq	29554 <flatcc_emitter@@Base+0xb4>
   2950c:	mov	r9, #1472	; 0x5c0
   29510:	cmp	fp, r3
   29514:	mov	r6, r3
   29518:	bls	29610 <flatcc_emitter@@Base+0x170>
   2951c:	cmp	r3, #0
   29520:	subne	fp, fp, r3
   29524:	beq	295c8 <flatcc_emitter@@Base+0x128>
   29528:	mov	r2, r6
   2952c:	mov	r1, r7
   29530:	ldr	r0, [r4, #16]
   29534:	bl	1451c <memcpy@plt>
   29538:	ldrd	r2, [r4, #16]
   2953c:	cmp	fp, #0
   29540:	add	r7, r7, r6
   29544:	add	r2, r2, r6
   29548:	sub	r3, r3, r6
   2954c:	strd	r2, [r4, #16]
   29550:	bne	29510 <flatcc_emitter@@Base+0x70>
   29554:	subs	r8, r8, #1
   29558:	add	r5, r5, #8
   2955c:	bne	29500 <flatcc_emitter@@Base+0x60>
   29560:	mov	r0, #0
   29564:	add	sp, sp, #12
   29568:	ldrd	r4, [sp]
   2956c:	ldrd	r6, [sp, #8]
   29570:	ldrd	r8, [sp, #16]
   29574:	ldrd	sl, [sp, #24]
   29578:	add	sp, sp, #32
   2957c:	pop	{pc}		; (ldr pc, [sp], #4)
   29580:	ldr	r7, [r4, #16]
   29584:	sub	r3, r3, r0
   29588:	str	r3, [r4, #20]
   2958c:	add	r0, r7, r0
   29590:	str	r0, [r4, #16]
   29594:	cmp	r2, #0
   29598:	addne	r4, r1, #8
   2959c:	beq	29560 <flatcc_emitter@@Base+0xc0>
   295a0:	mov	r0, r7
   295a4:	ldmdb	r4, {r1, r2}
   295a8:	sub	r8, r8, #1
   295ac:	bl	1451c <memcpy@plt>
   295b0:	ldr	r3, [r4, #-4]
   295b4:	cmn	r8, #1
   295b8:	add	r4, r4, #8
   295bc:	add	r7, r7, r3
   295c0:	bne	295a0 <flatcc_emitter@@Base+0x100>
   295c4:	b	29560 <flatcc_emitter@@Base+0xc0>
   295c8:	ldr	r6, [r4, #4]
   295cc:	cmp	r6, #0
   295d0:	beq	29650 <flatcc_emitter@@Base+0x1b0>
   295d4:	ldr	sl, [r4]
   295d8:	ldr	r0, [r6, #2944]	; 0xb80
   295dc:	cmp	r0, sl
   295e0:	beq	2961c <flatcc_emitter@@Base+0x17c>
   295e4:	str	r0, [r4, #4]
   295e8:	ldr	r2, [r0, #2948]	; 0xb84
   295ec:	mov	r3, #2944	; 0xb80
   295f0:	cmp	fp, r3
   295f4:	mov	r6, r3
   295f8:	ldr	r2, [r2, #2952]	; 0xb88
   295fc:	str	r0, [r4, #16]
   29600:	str	r3, [r4, #20]
   29604:	add	r2, r2, r3
   29608:	str	r2, [r0, #2952]	; 0xb88
   2960c:	bhi	2951c <flatcc_emitter@@Base+0x7c>
   29610:	mov	r6, fp
   29614:	mov	fp, #0
   29618:	b	29528 <flatcc_emitter@@Base+0x88>
   2961c:	movw	r0, #2956	; 0xb8c
   29620:	bl	1454c <malloc@plt>
   29624:	cmp	r0, #0
   29628:	beq	2969c <flatcc_emitter@@Base+0x1fc>
   2962c:	ldr	r2, [r4, #28]
   29630:	str	sl, [r0, #2944]	; 0xb80
   29634:	str	r6, [r0, #2948]	; 0xb84
   29638:	add	r2, r2, #2944	; 0xb80
   2963c:	str	r2, [r4, #28]
   29640:	str	r0, [sl, #2948]	; 0xb84
   29644:	str	r0, [r6, #2944]	; 0xb80
   29648:	str	r0, [r4, #4]
   2964c:	b	295e8 <flatcc_emitter@@Base+0x148>
   29650:	movw	r0, #2956	; 0xb8c
   29654:	bl	1454c <malloc@plt>
   29658:	cmp	r0, #0
   2965c:	beq	2969c <flatcc_emitter@@Base+0x1fc>
   29660:	ldr	r2, [r4, #28]
   29664:	add	r1, r0, #1472	; 0x5c0
   29668:	mov	r3, #1472	; 0x5c0
   2966c:	str	r0, [r4]
   29670:	strd	r0, [r4, #4]
   29674:	str	r9, [r4, #12]
   29678:	str	r1, [r4, #16]
   2967c:	add	r2, r2, #2944	; 0xb80
   29680:	str	r9, [r4, #20]
   29684:	str	r0, [r0, #2944]	; 0xb80
   29688:	str	r2, [r4, #28]
   2968c:	ldr	r2, [sp, #4]
   29690:	str	r0, [r0, #2948]	; 0xb84
   29694:	str	r2, [r0, #2952]	; 0xb88
   29698:	b	29510 <flatcc_emitter@@Base+0x70>
   2969c:	mvn	r0, #0
   296a0:	b	29564 <flatcc_emitter@@Base+0xc4>
   296a4:	ldr	r3, [r4, #12]
   296a8:	cmp	r3, r0
   296ac:	bcs	29814 <flatcc_emitter@@Base+0x374>
   296b0:	add	r5, r1, r2, lsl #3
   296b4:	movw	r3, #64064	; 0xfa40
   296b8:	movt	r3, #65535	; 0xffff
   296bc:	str	r3, [sp, #4]
   296c0:	cmn	r8, #1
   296c4:	beq	29560 <flatcc_emitter@@Base+0xc0>
   296c8:	ldr	r7, [r5, #-8]
   296cc:	ldr	r6, [r5, #-4]
   296d0:	cmp	r6, #0
   296d4:	add	r7, r7, r6
   296d8:	beq	29728 <flatcc_emitter@@Base+0x288>
   296dc:	mov	r9, #1472	; 0x5c0
   296e0:	ldr	r2, [r4, #12]
   296e4:	cmp	r2, r6
   296e8:	bcs	2978c <flatcc_emitter@@Base+0x2ec>
   296ec:	cmp	r2, #0
   296f0:	beq	29734 <flatcc_emitter@@Base+0x294>
   296f4:	sub	r6, r6, r2
   296f8:	mov	r1, #0
   296fc:	ldr	r3, [r4, #8]
   29700:	rsb	r0, r2, #0
   29704:	add	r7, r7, r0
   29708:	str	r1, [r4, #12]
   2970c:	mov	r1, r7
   29710:	add	r3, r3, r0
   29714:	mov	r0, r3
   29718:	str	r3, [r4, #8]
   2971c:	bl	1451c <memcpy@plt>
   29720:	cmp	r6, #0
   29724:	bne	296e0 <flatcc_emitter@@Base+0x240>
   29728:	sub	r5, r5, #8
   2972c:	sub	r8, r8, #1
   29730:	b	296c0 <flatcc_emitter@@Base+0x220>
   29734:	ldr	fp, [r4]
   29738:	cmp	fp, #0
   2973c:	beq	297d0 <flatcc_emitter@@Base+0x330>
   29740:	ldr	sl, [r4, #4]
   29744:	ldr	r0, [fp, #2948]	; 0xb84
   29748:	cmp	r0, sl
   2974c:	beq	2979c <flatcc_emitter@@Base+0x2fc>
   29750:	ldr	r3, [fp, #2952]	; 0xb88
   29754:	sub	r3, r3, #2944	; 0xb80
   29758:	str	r3, [r0, #2952]	; 0xb88
   2975c:	str	r0, [r4]
   29760:	ldr	r3, [r0, #2944]	; 0xb80
   29764:	mov	r2, #2944	; 0xb80
   29768:	add	r1, r0, #2944	; 0xb80
   2976c:	ldr	r3, [r3, #2952]	; 0xb88
   29770:	str	r1, [r4, #8]
   29774:	str	r2, [r4, #12]
   29778:	sub	r3, r3, #2944	; 0xb80
   2977c:	str	r3, [r0, #2952]	; 0xb88
   29780:	ldr	r2, [r4, #12]
   29784:	cmp	r2, r6
   29788:	bcc	296ec <flatcc_emitter@@Base+0x24c>
   2978c:	sub	r1, r2, r6
   29790:	mov	r2, r6
   29794:	mov	r6, #0
   29798:	b	296fc <flatcc_emitter@@Base+0x25c>
   2979c:	movw	r0, #2956	; 0xb8c
   297a0:	bl	1454c <malloc@plt>
   297a4:	cmp	r0, #0
   297a8:	beq	2969c <flatcc_emitter@@Base+0x1fc>
   297ac:	ldr	r2, [r4, #28]
   297b0:	str	fp, [r0, #2944]	; 0xb80
   297b4:	str	sl, [r0, #2948]	; 0xb84
   297b8:	add	r2, r2, #2944	; 0xb80
   297bc:	str	r2, [r4, #28]
   297c0:	str	r0, [fp, #2948]	; 0xb84
   297c4:	str	r0, [sl, #2944]	; 0xb80
   297c8:	str	r0, [r4]
   297cc:	b	29760 <flatcc_emitter@@Base+0x2c0>
   297d0:	movw	r0, #2956	; 0xb8c
   297d4:	bl	1454c <malloc@plt>
   297d8:	cmp	r0, #0
   297dc:	beq	2969c <flatcc_emitter@@Base+0x1fc>
   297e0:	ldr	r3, [r4, #28]
   297e4:	add	r2, r0, #1472	; 0x5c0
   297e8:	str	r0, [r4]
   297ec:	stmib	r4, {r0, r2, r9}
   297f0:	add	r3, r3, #2944	; 0xb80
   297f4:	str	r2, [r4, #16]
   297f8:	str	r9, [r4, #20]
   297fc:	str	r3, [r4, #28]
   29800:	ldr	r3, [sp, #4]
   29804:	str	r0, [r0, #2944]	; 0xb80
   29808:	str	r0, [r0, #2948]	; 0xb84
   2980c:	str	r3, [r0, #2952]	; 0xb88
   29810:	b	296e0 <flatcc_emitter@@Base+0x240>
   29814:	ldr	r7, [r4, #8]
   29818:	sub	r3, r3, r0
   2981c:	str	r3, [r4, #12]
   29820:	sub	r7, r7, r0
   29824:	str	r7, [r4, #8]
   29828:	b	29594 <flatcc_emitter@@Base+0xf4>

0002982c <flatcc_emitter_copy_buffer@@Base>:
   2982c:	ldr	r3, [r0, #24]
   29830:	strd	r4, [sp, #-16]!
   29834:	str	r6, [sp, #8]
   29838:	str	lr, [sp, #12]
   2983c:	cmp	r3, r2
   29840:	movhi	r5, #0
   29844:	bhi	298c4 <flatcc_emitter_copy_buffer@@Base+0x98>
   29848:	ldr	r5, [r0]
   2984c:	mov	r6, r0
   29850:	cmp	r5, #0
   29854:	beq	298c4 <flatcc_emitter_copy_buffer@@Base+0x98>
   29858:	ldr	r2, [r6, #4]
   2985c:	mov	r0, r1
   29860:	ldr	r1, [r6, #8]
   29864:	cmp	r5, r2
   29868:	beq	298d8 <flatcc_emitter_copy_buffer@@Base+0xac>
   2986c:	ldr	r2, [r6, #12]
   29870:	rsb	r2, r2, #2944	; 0xb80
   29874:	add	r5, r0, r2
   29878:	bl	1451c <memcpy@plt>
   2987c:	ldrd	r2, [r6]
   29880:	ldr	r4, [r2, #2944]	; 0xb80
   29884:	cmp	r4, r3
   29888:	beq	298b0 <flatcc_emitter_copy_buffer@@Base+0x84>
   2988c:	mov	r2, #2944	; 0xb80
   29890:	mov	r1, r4
   29894:	mov	r0, r5
   29898:	add	r5, r5, r2
   2989c:	bl	1451c <memcpy@plt>
   298a0:	ldr	r3, [r6, #4]
   298a4:	ldr	r4, [r4, #2944]	; 0xb80
   298a8:	cmp	r3, r4
   298ac:	bne	2988c <flatcc_emitter_copy_buffer@@Base+0x60>
   298b0:	ldr	r2, [r6, #20]
   298b4:	mov	r1, r4
   298b8:	mov	r0, r5
   298bc:	rsb	r2, r2, #2944	; 0xb80
   298c0:	bl	1451c <memcpy@plt>
   298c4:	mov	r0, r5
   298c8:	ldrd	r4, [sp]
   298cc:	ldr	r6, [sp, #8]
   298d0:	add	sp, sp, #12
   298d4:	pop	{pc}		; (ldr pc, [sp], #4)
   298d8:	mov	r2, r3
   298dc:	mov	r5, r0
   298e0:	bl	1451c <memcpy@plt>
   298e4:	b	298c4 <flatcc_emitter_copy_buffer@@Base+0x98>

000298e8 <flatcc_verify_error_string@@Base>:
   298e8:	cmp	r0, #36	; 0x24
   298ec:	addls	pc, pc, r0, lsl #2
   298f0:	b	29b44 <flatcc_verify_error_string@@Base+0x25c>
   298f4:	b	29988 <flatcc_verify_error_string@@Base+0xa0>
   298f8:	b	29b38 <flatcc_verify_error_string@@Base+0x250>
   298fc:	b	29b2c <flatcc_verify_error_string@@Base+0x244>
   29900:	b	29b20 <flatcc_verify_error_string@@Base+0x238>
   29904:	b	29b14 <flatcc_verify_error_string@@Base+0x22c>
   29908:	b	29b08 <flatcc_verify_error_string@@Base+0x220>
   2990c:	b	29afc <flatcc_verify_error_string@@Base+0x214>
   29910:	b	29af0 <flatcc_verify_error_string@@Base+0x208>
   29914:	b	29ae4 <flatcc_verify_error_string@@Base+0x1fc>
   29918:	b	29ad8 <flatcc_verify_error_string@@Base+0x1f0>
   2991c:	b	29acc <flatcc_verify_error_string@@Base+0x1e4>
   29920:	b	29ac0 <flatcc_verify_error_string@@Base+0x1d8>
   29924:	b	29ab4 <flatcc_verify_error_string@@Base+0x1cc>
   29928:	b	29aa8 <flatcc_verify_error_string@@Base+0x1c0>
   2992c:	b	29a9c <flatcc_verify_error_string@@Base+0x1b4>
   29930:	b	29a90 <flatcc_verify_error_string@@Base+0x1a8>
   29934:	b	29a84 <flatcc_verify_error_string@@Base+0x19c>
   29938:	b	29a78 <flatcc_verify_error_string@@Base+0x190>
   2993c:	b	29a6c <flatcc_verify_error_string@@Base+0x184>
   29940:	b	29a60 <flatcc_verify_error_string@@Base+0x178>
   29944:	b	29a54 <flatcc_verify_error_string@@Base+0x16c>
   29948:	b	29a48 <flatcc_verify_error_string@@Base+0x160>
   2994c:	b	29a3c <flatcc_verify_error_string@@Base+0x154>
   29950:	b	29a30 <flatcc_verify_error_string@@Base+0x148>
   29954:	b	29a24 <flatcc_verify_error_string@@Base+0x13c>
   29958:	b	29a18 <flatcc_verify_error_string@@Base+0x130>
   2995c:	b	29a0c <flatcc_verify_error_string@@Base+0x124>
   29960:	b	29a00 <flatcc_verify_error_string@@Base+0x118>
   29964:	b	299f4 <flatcc_verify_error_string@@Base+0x10c>
   29968:	b	299e8 <flatcc_verify_error_string@@Base+0x100>
   2996c:	b	299dc <flatcc_verify_error_string@@Base+0xf4>
   29970:	b	299d0 <flatcc_verify_error_string@@Base+0xe8>
   29974:	b	299c4 <flatcc_verify_error_string@@Base+0xdc>
   29978:	b	299b8 <flatcc_verify_error_string@@Base+0xd0>
   2997c:	b	299ac <flatcc_verify_error_string@@Base+0xc4>
   29980:	b	299a0 <flatcc_verify_error_string@@Base+0xb8>
   29984:	b	29994 <flatcc_verify_error_string@@Base+0xac>
   29988:	ldr	r0, [pc, #448]	; 29b50 <flatcc_verify_error_string@@Base+0x268>
   2998c:	add	r0, pc, r0
   29990:	bx	lr
   29994:	ldr	r0, [pc, #440]	; 29b54 <flatcc_verify_error_string@@Base+0x26c>
   29998:	add	r0, pc, r0
   2999c:	bx	lr
   299a0:	ldr	r0, [pc, #432]	; 29b58 <flatcc_verify_error_string@@Base+0x270>
   299a4:	add	r0, pc, r0
   299a8:	bx	lr
   299ac:	ldr	r0, [pc, #424]	; 29b5c <flatcc_verify_error_string@@Base+0x274>
   299b0:	add	r0, pc, r0
   299b4:	bx	lr
   299b8:	ldr	r0, [pc, #416]	; 29b60 <flatcc_verify_error_string@@Base+0x278>
   299bc:	add	r0, pc, r0
   299c0:	bx	lr
   299c4:	ldr	r0, [pc, #408]	; 29b64 <flatcc_verify_error_string@@Base+0x27c>
   299c8:	add	r0, pc, r0
   299cc:	bx	lr
   299d0:	ldr	r0, [pc, #400]	; 29b68 <flatcc_verify_error_string@@Base+0x280>
   299d4:	add	r0, pc, r0
   299d8:	bx	lr
   299dc:	ldr	r0, [pc, #392]	; 29b6c <flatcc_verify_error_string@@Base+0x284>
   299e0:	add	r0, pc, r0
   299e4:	bx	lr
   299e8:	ldr	r0, [pc, #384]	; 29b70 <flatcc_verify_error_string@@Base+0x288>
   299ec:	add	r0, pc, r0
   299f0:	bx	lr
   299f4:	ldr	r0, [pc, #376]	; 29b74 <flatcc_verify_error_string@@Base+0x28c>
   299f8:	add	r0, pc, r0
   299fc:	bx	lr
   29a00:	ldr	r0, [pc, #368]	; 29b78 <flatcc_verify_error_string@@Base+0x290>
   29a04:	add	r0, pc, r0
   29a08:	bx	lr
   29a0c:	ldr	r0, [pc, #360]	; 29b7c <flatcc_verify_error_string@@Base+0x294>
   29a10:	add	r0, pc, r0
   29a14:	bx	lr
   29a18:	ldr	r0, [pc, #352]	; 29b80 <flatcc_verify_error_string@@Base+0x298>
   29a1c:	add	r0, pc, r0
   29a20:	bx	lr
   29a24:	ldr	r0, [pc, #344]	; 29b84 <flatcc_verify_error_string@@Base+0x29c>
   29a28:	add	r0, pc, r0
   29a2c:	bx	lr
   29a30:	ldr	r0, [pc, #336]	; 29b88 <flatcc_verify_error_string@@Base+0x2a0>
   29a34:	add	r0, pc, r0
   29a38:	bx	lr
   29a3c:	ldr	r0, [pc, #328]	; 29b8c <flatcc_verify_error_string@@Base+0x2a4>
   29a40:	add	r0, pc, r0
   29a44:	bx	lr
   29a48:	ldr	r0, [pc, #320]	; 29b90 <flatcc_verify_error_string@@Base+0x2a8>
   29a4c:	add	r0, pc, r0
   29a50:	bx	lr
   29a54:	ldr	r0, [pc, #312]	; 29b94 <flatcc_verify_error_string@@Base+0x2ac>
   29a58:	add	r0, pc, r0
   29a5c:	bx	lr
   29a60:	ldr	r0, [pc, #304]	; 29b98 <flatcc_verify_error_string@@Base+0x2b0>
   29a64:	add	r0, pc, r0
   29a68:	bx	lr
   29a6c:	ldr	r0, [pc, #296]	; 29b9c <flatcc_verify_error_string@@Base+0x2b4>
   29a70:	add	r0, pc, r0
   29a74:	bx	lr
   29a78:	ldr	r0, [pc, #288]	; 29ba0 <flatcc_verify_error_string@@Base+0x2b8>
   29a7c:	add	r0, pc, r0
   29a80:	bx	lr
   29a84:	ldr	r0, [pc, #280]	; 29ba4 <flatcc_verify_error_string@@Base+0x2bc>
   29a88:	add	r0, pc, r0
   29a8c:	bx	lr
   29a90:	ldr	r0, [pc, #272]	; 29ba8 <flatcc_verify_error_string@@Base+0x2c0>
   29a94:	add	r0, pc, r0
   29a98:	bx	lr
   29a9c:	ldr	r0, [pc, #264]	; 29bac <flatcc_verify_error_string@@Base+0x2c4>
   29aa0:	add	r0, pc, r0
   29aa4:	bx	lr
   29aa8:	ldr	r0, [pc, #256]	; 29bb0 <flatcc_verify_error_string@@Base+0x2c8>
   29aac:	add	r0, pc, r0
   29ab0:	bx	lr
   29ab4:	ldr	r0, [pc, #248]	; 29bb4 <flatcc_verify_error_string@@Base+0x2cc>
   29ab8:	add	r0, pc, r0
   29abc:	bx	lr
   29ac0:	ldr	r0, [pc, #240]	; 29bb8 <flatcc_verify_error_string@@Base+0x2d0>
   29ac4:	add	r0, pc, r0
   29ac8:	bx	lr
   29acc:	ldr	r0, [pc, #232]	; 29bbc <flatcc_verify_error_string@@Base+0x2d4>
   29ad0:	add	r0, pc, r0
   29ad4:	bx	lr
   29ad8:	ldr	r0, [pc, #224]	; 29bc0 <flatcc_verify_error_string@@Base+0x2d8>
   29adc:	add	r0, pc, r0
   29ae0:	bx	lr
   29ae4:	ldr	r0, [pc, #216]	; 29bc4 <flatcc_verify_error_string@@Base+0x2dc>
   29ae8:	add	r0, pc, r0
   29aec:	bx	lr
   29af0:	ldr	r0, [pc, #208]	; 29bc8 <flatcc_verify_error_string@@Base+0x2e0>
   29af4:	add	r0, pc, r0
   29af8:	bx	lr
   29afc:	ldr	r0, [pc, #200]	; 29bcc <flatcc_verify_error_string@@Base+0x2e4>
   29b00:	add	r0, pc, r0
   29b04:	bx	lr
   29b08:	ldr	r0, [pc, #192]	; 29bd0 <flatcc_verify_error_string@@Base+0x2e8>
   29b0c:	add	r0, pc, r0
   29b10:	bx	lr
   29b14:	ldr	r0, [pc, #184]	; 29bd4 <flatcc_verify_error_string@@Base+0x2ec>
   29b18:	add	r0, pc, r0
   29b1c:	bx	lr
   29b20:	ldr	r0, [pc, #176]	; 29bd8 <flatcc_verify_error_string@@Base+0x2f0>
   29b24:	add	r0, pc, r0
   29b28:	bx	lr
   29b2c:	ldr	r0, [pc, #168]	; 29bdc <flatcc_verify_error_string@@Base+0x2f4>
   29b30:	add	r0, pc, r0
   29b34:	bx	lr
   29b38:	ldr	r0, [pc, #160]	; 29be0 <flatcc_verify_error_string@@Base+0x2f8>
   29b3c:	add	r0, pc, r0
   29b40:	bx	lr
   29b44:	ldr	r0, [pc, #152]	; 29be4 <flatcc_verify_error_string@@Base+0x2fc>
   29b48:	add	r0, pc, r0
   29b4c:	bx	lr
   29b50:	muleq	r1, ip, r4
   29b54:	strdeq	r8, [r1], -r0
   29b58:			; <UNDEFINED> instruction: 0x000188bc
   29b5c:	andeq	r8, r1, ip, ror r8
   29b60:	andeq	r8, r1, r8, asr #16
   29b64:	andeq	r8, r1, r4, lsl r8
   29b68:	strdeq	r8, [r1], -r0
   29b6c:			; <UNDEFINED> instruction: 0x000187bc
   29b70:	andeq	r8, r1, r8, lsl #15
   29b74:	andeq	r8, r1, r4, ror #14
   29b78:	andeq	r8, r1, ip, lsr r7
   29b7c:	andeq	r8, r1, ip, lsl r7
   29b80:	andeq	r8, r1, r0, ror #13
   29b84:	andeq	r8, r1, r8, lsr #13
   29b88:	andeq	r8, r1, r0, ror r6
   29b8c:	andeq	r8, r1, r0, lsr r6
   29b90:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   29b94:	ldrdeq	r8, [r1], -r4
   29b98:	andeq	r8, r1, r0, lsr #11
   29b9c:	andeq	r8, r1, r0, lsl #11
   29ba0:	andeq	r8, r1, ip, asr #10
   29ba4:	andeq	r8, r1, r8, lsl r5
   29ba8:	andeq	r8, r1, r4, ror #9
   29bac:			; <UNDEFINED> instruction: 0x000184bc
   29bb0:	muleq	r1, r4, r4
   29bb4:	andeq	r8, r1, r0, ror r4
   29bb8:	andeq	r8, r1, r0, asr r4
   29bbc:	andeq	r8, r1, ip, lsr #8
   29bc0:	andeq	r8, r1, ip, lsl #8
   29bc4:	andeq	r8, r1, ip, ror #7
   29bc8:	andeq	r8, r1, r4, asr #7
   29bcc:	muleq	r1, r8, r3
   29bd0:	andeq	r8, r1, r8, ror #6
   29bd4:	andeq	r8, r1, r4, asr #6
   29bd8:	andeq	r8, r1, ip, lsl r3
   29bdc:	strdeq	r8, [r1], -ip
   29be0:	andeq	r8, r1, ip, asr r7
   29be4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00029be8 <flatcc_verify_field@@Base>:
   29be8:	ldrh	ip, [r0, #22]
   29bec:	add	r1, r1, #2
   29bf0:	lsl	r1, r1, #1
   29bf4:	uxth	r1, r1
   29bf8:	cmp	ip, r1
   29bfc:	bls	29c44 <flatcc_verify_field@@Base+0x5c>
   29c00:	ldr	ip, [r0, #12]
   29c04:	ldrh	r1, [ip, r1]
   29c08:	cmp	r1, #0
   29c0c:	beq	29c44 <flatcc_verify_field@@Base+0x5c>
   29c10:	ldrh	ip, [r0, #20]
   29c14:	add	r2, r2, r1
   29c18:	cmp	r2, ip
   29c1c:	bhi	29c4c <flatcc_verify_field@@Base+0x64>
   29c20:	ldr	r2, [r0]
   29c24:	sub	r3, r3, #1
   29c28:	ldr	r0, [r0, #16]
   29c2c:	add	r2, r2, r0
   29c30:	add	r1, r2, r1
   29c34:	tst	r1, r3
   29c38:	moveq	r0, #0
   29c3c:	movne	r0, #12
   29c40:	bx	lr
   29c44:	mov	r0, #0
   29c48:	bx	lr
   29c4c:	mov	r0, #13
   29c50:	bx	lr

00029c54 <flatcc_verify_string_field@@Base>:
   29c54:	ldrh	r3, [r0, #22]
   29c58:	add	r1, r1, #2
   29c5c:	lsl	r1, r1, #1
   29c60:	uxth	r1, r1
   29c64:	cmp	r3, r1
   29c68:	bls	29d04 <flatcc_verify_string_field@@Base+0xb0>
   29c6c:	ldr	r3, [r0, #12]
   29c70:	ldrh	r3, [r3, r1]
   29c74:	cmp	r3, #0
   29c78:	beq	29d04 <flatcc_verify_string_field@@Base+0xb0>
   29c7c:	ldrh	r2, [r0, #20]
   29c80:	add	r1, r3, #4
   29c84:	cmp	r1, r2
   29c88:	bhi	29d14 <flatcc_verify_string_field@@Base+0xc0>
   29c8c:	ldr	r2, [r0, #16]
   29c90:	add	r3, r3, r2
   29c94:	tst	r3, #3
   29c98:	bne	29d1c <flatcc_verify_string_field@@Base+0xc8>
   29c9c:	cmp	r3, #0
   29ca0:	beq	29d2c <flatcc_verify_string_field@@Base+0xd8>
   29ca4:	ldr	r1, [r0]
   29ca8:	ldr	r2, [r1, r3]
   29cac:	add	r2, r3, r2
   29cb0:	cmp	r3, r2
   29cb4:	bcs	29cfc <flatcc_verify_string_field@@Base+0xa8>
   29cb8:	ldr	r3, [r0, #4]
   29cbc:	add	r0, r2, #4
   29cc0:	cmp	r3, r0
   29cc4:	bcc	29cfc <flatcc_verify_string_field@@Base+0xa8>
   29cc8:	tst	r2, #3
   29ccc:	bne	29cfc <flatcc_verify_string_field@@Base+0xa8>
   29cd0:	ldr	r2, [r1, r2]
   29cd4:	sub	r3, r3, r0
   29cd8:	add	ip, r2, #1
   29cdc:	cmp	r3, ip
   29ce0:	bcc	29d24 <flatcc_verify_string_field@@Base+0xd0>
   29ce4:	add	r1, r1, r0
   29ce8:	ldrb	r3, [r1, r2]
   29cec:	cmp	r3, #0
   29cf0:	moveq	r0, #0
   29cf4:	movne	r0, #7
   29cf8:	bx	lr
   29cfc:	mov	r0, #17
   29d00:	bx	lr
   29d04:	cmp	r2, #0
   29d08:	moveq	r0, #0
   29d0c:	movne	r0, #4
   29d10:	bx	lr
   29d14:	mov	r0, #13
   29d18:	bx	lr
   29d1c:	mov	r0, #12
   29d20:	bx	lr
   29d24:	mov	r0, #8
   29d28:	bx	lr
   29d2c:	mov	r0, r3
   29d30:	bx	lr

00029d34 <flatcc_verify_vector_field@@Base>:
   29d34:	ldrh	ip, [r0, #22]
   29d38:	add	r1, r1, #2
   29d3c:	lsl	r1, r1, #1
   29d40:	str	r4, [sp, #-8]!
   29d44:	str	lr, [sp, #4]
   29d48:	uxth	r1, r1
   29d4c:	ldrh	lr, [sp, #8]
   29d50:	cmp	ip, r1
   29d54:	bls	29e18 <flatcc_verify_vector_field@@Base+0xe4>
   29d58:	ldr	ip, [r0, #12]
   29d5c:	ldrh	r1, [ip, r1]
   29d60:	cmp	r1, #0
   29d64:	beq	29e18 <flatcc_verify_vector_field@@Base+0xe4>
   29d68:	ldrh	r2, [r0, #20]
   29d6c:	add	ip, r1, #4
   29d70:	cmp	ip, r2
   29d74:	movhi	r0, #13
   29d78:	bhi	29dfc <flatcc_verify_vector_field@@Base+0xc8>
   29d7c:	ldr	r2, [r0, #16]
   29d80:	add	r2, r1, r2
   29d84:	tst	r2, #3
   29d88:	movne	r0, #12
   29d8c:	bne	29dfc <flatcc_verify_vector_field@@Base+0xc8>
   29d90:	cmp	r2, #0
   29d94:	beq	29e30 <flatcc_verify_vector_field@@Base+0xfc>
   29d98:	ldr	r4, [r0]
   29d9c:	ldr	ip, [r4, r2]
   29da0:	add	ip, r2, ip
   29da4:	cmp	r2, ip
   29da8:	bcs	29e08 <flatcc_verify_vector_field@@Base+0xd4>
   29dac:	ldr	r1, [r0, #4]
   29db0:	add	r0, ip, #4
   29db4:	cmp	r1, r0
   29db8:	bcc	29e08 <flatcc_verify_vector_field@@Base+0xd4>
   29dbc:	cmp	lr, #4
   29dc0:	movcc	lr, #4
   29dc4:	sub	lr, lr, #1
   29dc8:	orr	lr, lr, #3
   29dcc:	tst	lr, r0
   29dd0:	bne	29e08 <flatcc_verify_vector_field@@Base+0xd4>
   29dd4:	ldr	r2, [r4, ip]
   29dd8:	ldr	ip, [sp, #12]
   29ddc:	cmp	ip, r2
   29de0:	movcc	r0, #25
   29de4:	bcc	29dfc <flatcc_verify_vector_field@@Base+0xc8>
   29de8:	mul	r2, r2, r3
   29dec:	sub	r0, r1, r0
   29df0:	cmp	r0, r2
   29df4:	movcc	r0, #26
   29df8:	movcs	r0, #0
   29dfc:	ldr	r4, [sp]
   29e00:	add	sp, sp, #4
   29e04:	pop	{pc}		; (ldr pc, [sp], #4)
   29e08:	ldr	r4, [sp]
   29e0c:	add	sp, sp, #4
   29e10:	mov	r0, #16
   29e14:	pop	{pc}		; (ldr pc, [sp], #4)
   29e18:	cmp	r2, #0
   29e1c:	ldr	r4, [sp]
   29e20:	add	sp, sp, #4
   29e24:	moveq	r0, #0
   29e28:	movne	r0, #4
   29e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   29e30:	mov	r0, r2
   29e34:	b	29dfc <flatcc_verify_vector_field@@Base+0xc8>

00029e38 <flatcc_verify_string_vector_field@@Base>:
   29e38:	ldrh	r3, [r0, #22]
   29e3c:	add	r1, r1, #2
   29e40:	lsl	r1, r1, #1
   29e44:	uxth	r1, r1
   29e48:	cmp	r3, r1
   29e4c:	bls	29fa8 <flatcc_verify_string_vector_field@@Base+0x170>
   29e50:	ldr	r3, [r0, #12]
   29e54:	ldrh	r3, [r3, r1]
   29e58:	cmp	r3, #0
   29e5c:	beq	29fa8 <flatcc_verify_string_vector_field@@Base+0x170>
   29e60:	ldrh	r2, [r0, #20]
   29e64:	add	r1, r3, #4
   29e68:	cmp	r1, r2
   29e6c:	bhi	29fb8 <flatcc_verify_string_vector_field@@Base+0x180>
   29e70:	ldr	r2, [r0, #16]
   29e74:	add	r3, r3, r2
   29e78:	tst	r3, #3
   29e7c:	bne	29fc0 <flatcc_verify_string_vector_field@@Base+0x188>
   29e80:	cmp	r3, #0
   29e84:	beq	29ff8 <flatcc_verify_string_vector_field@@Base+0x1c0>
   29e88:	ldr	r1, [r0]
   29e8c:	ldr	r2, [r1, r3]
   29e90:	add	r2, r3, r2
   29e94:	cmp	r3, r2
   29e98:	bcs	29fa0 <flatcc_verify_string_vector_field@@Base+0x168>
   29e9c:	ldr	ip, [r0, #4]
   29ea0:	add	r0, r2, #4
   29ea4:	cmp	ip, r0
   29ea8:	bcc	29fa0 <flatcc_verify_string_vector_field@@Base+0x168>
   29eac:	tst	r0, #3
   29eb0:	bne	29fa0 <flatcc_verify_string_vector_field@@Base+0x168>
   29eb4:	ldr	r3, [r1, r2]
   29eb8:	strd	r4, [sp, #-16]!
   29ebc:	str	r6, [sp, #8]
   29ec0:	str	lr, [sp, #12]
   29ec4:	cmn	r3, #-1073741823	; 0xc0000001
   29ec8:	bhi	29fc8 <flatcc_verify_string_vector_field@@Base+0x190>
   29ecc:	lsl	lr, r3, #2
   29ed0:	sub	r4, ip, r0
   29ed4:	cmp	r4, lr
   29ed8:	bcc	29fc8 <flatcc_verify_string_vector_field@@Base+0x190>
   29edc:	cmp	r3, #0
   29ee0:	beq	2a014 <flatcc_verify_string_vector_field@@Base+0x1dc>
   29ee4:	ldr	r2, [r1, r0]
   29ee8:	add	r2, r0, r2
   29eec:	cmp	r0, r2
   29ef0:	bcs	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29ef4:	add	r4, r2, #4
   29ef8:	cmp	ip, r4
   29efc:	bcc	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29f00:	tst	r2, #3
   29f04:	bne	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29f08:	ldr	r3, [r1, r2]
   29f0c:	sub	r5, ip, r4
   29f10:	add	r6, r3, #1
   29f14:	cmp	r6, r5
   29f18:	addls	lr, r0, lr
   29f1c:	bhi	29f74 <flatcc_verify_string_vector_field@@Base+0x13c>
   29f20:	add	r3, r1, r3
   29f24:	add	r0, r0, #4
   29f28:	ldrb	r3, [r3, r4]
   29f2c:	cmp	r3, #0
   29f30:	bne	2a000 <flatcc_verify_string_vector_field@@Base+0x1c8>
   29f34:	cmp	r0, lr
   29f38:	beq	2a014 <flatcc_verify_string_vector_field@@Base+0x1dc>
   29f3c:	ldr	r2, [r1, r0]
   29f40:	add	r2, r0, r2
   29f44:	cmp	r2, r0
   29f48:	add	r4, r2, #4
   29f4c:	bls	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29f50:	cmp	ip, r4
   29f54:	bcc	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29f58:	tst	r2, #3
   29f5c:	sub	r5, ip, r4
   29f60:	bne	2a00c <flatcc_verify_string_vector_field@@Base+0x1d4>
   29f64:	ldr	r3, [r1, r2]
   29f68:	add	r6, r3, #1
   29f6c:	cmp	r5, r6
   29f70:	bcs	29f20 <flatcc_verify_string_vector_field@@Base+0xe8>
   29f74:	ldr	r3, [r1, r2]
   29f78:	add	r2, r3, #1
   29f7c:	cmp	r5, r2
   29f80:	movcc	r0, #8
   29f84:	bcc	29fe8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   29f88:	add	r3, r1, r3
   29f8c:	ldrb	r3, [r3, r4]
   29f90:	cmp	r3, #0
   29f94:	moveq	r0, #0
   29f98:	movne	r0, #7
   29f9c:	b	29fe8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   29fa0:	mov	r0, #16
   29fa4:	bx	lr
   29fa8:	cmp	r2, #0
   29fac:	movne	r0, #4
   29fb0:	moveq	r0, #0
   29fb4:	bx	lr
   29fb8:	mov	r0, #13
   29fbc:	bx	lr
   29fc0:	mov	r0, #12
   29fc4:	bx	lr
   29fc8:	ldr	r3, [r1, r2]
   29fcc:	cmn	r3, #-1073741823	; 0xc0000001
   29fd0:	movhi	r0, #25
   29fd4:	bhi	29fe8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   29fd8:	sub	r0, ip, r0
   29fdc:	cmp	r0, r3, lsl #2
   29fe0:	movcs	r0, #0
   29fe4:	movcc	r0, #26
   29fe8:	ldrd	r4, [sp]
   29fec:	ldr	r6, [sp, #8]
   29ff0:	add	sp, sp, #12
   29ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   29ff8:	mov	r0, r3
   29ffc:	bx	lr
   2a000:	cmp	ip, r4
   2a004:	subcs	r5, ip, r4
   2a008:	bcs	29f74 <flatcc_verify_string_vector_field@@Base+0x13c>
   2a00c:	mov	r0, #17
   2a010:	b	29fe8 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2a014:	mov	r0, r3
   2a018:	b	29fe8 <flatcc_verify_string_vector_field@@Base+0x1b0>

0002a01c <flatcc_verify_table_field@@Base>:
   2a01c:	ldrh	ip, [r0, #22]
   2a020:	add	r1, r1, #2
   2a024:	lsl	r1, r1, #1
   2a028:	uxth	r1, r1
   2a02c:	cmp	ip, r1
   2a030:	bls	2a150 <flatcc_verify_table_field@@Base+0x134>
   2a034:	ldr	ip, [r0, #12]
   2a038:	ldrh	r1, [ip, r1]
   2a03c:	cmp	r1, #0
   2a040:	beq	2a150 <flatcc_verify_table_field@@Base+0x134>
   2a044:	ldrh	r2, [r0, #20]
   2a048:	add	ip, r1, #4
   2a04c:	cmp	ip, r2
   2a050:	bhi	2a160 <flatcc_verify_table_field@@Base+0x144>
   2a054:	ldr	r2, [r0, #16]
   2a058:	add	r1, r1, r2
   2a05c:	tst	r1, #3
   2a060:	bne	2a168 <flatcc_verify_table_field@@Base+0x14c>
   2a064:	cmp	r1, #0
   2a068:	beq	2a170 <flatcc_verify_table_field@@Base+0x154>
   2a06c:	ldr	ip, [r0]
   2a070:	strd	r4, [sp, #-12]!
   2a074:	ldr	r2, [r0, #8]
   2a078:	str	lr, [sp, #8]
   2a07c:	sub	sp, sp, #28
   2a080:	ldr	lr, [r0, #4]
   2a084:	ldr	r0, [ip, r1]
   2a088:	sub	r2, r2, #1
   2a08c:	cmp	r2, #0
   2a090:	moveq	r0, #3
   2a094:	str	r2, [sp, #8]
   2a098:	beq	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a09c:	add	r2, r1, r0
   2a0a0:	cmp	r1, r2
   2a0a4:	bcs	2a13c <flatcc_verify_table_field@@Base+0x120>
   2a0a8:	add	r1, r2, #4
   2a0ac:	cmp	lr, r1
   2a0b0:	bcc	2a13c <flatcc_verify_table_field@@Base+0x120>
   2a0b4:	tst	r2, #3
   2a0b8:	bne	2a13c <flatcc_verify_table_field@@Base+0x120>
   2a0bc:	str	r2, [sp, #16]
   2a0c0:	ldr	r1, [ip, r2]
   2a0c4:	subs	r1, r2, r1
   2a0c8:	bmi	2a178 <flatcc_verify_table_field@@Base+0x15c>
   2a0cc:	tst	r1, #1
   2a0d0:	bne	2a178 <flatcc_verify_table_field@@Base+0x15c>
   2a0d4:	add	r4, r1, #2
   2a0d8:	cmp	lr, r4
   2a0dc:	movcc	r0, #27
   2a0e0:	bcc	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a0e4:	ldrh	r0, [ip, r1]
   2a0e8:	add	r5, ip, r1
   2a0ec:	add	r1, r0, r1
   2a0f0:	strh	r0, [sp, #22]
   2a0f4:	cmp	lr, r1
   2a0f8:	bcc	2a180 <flatcc_verify_table_field@@Base+0x164>
   2a0fc:	tst	r0, #1
   2a100:	bne	2a180 <flatcc_verify_table_field@@Base+0x164>
   2a104:	cmp	r0, #3
   2a108:	movls	r0, #28
   2a10c:	bls	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a110:	ldrh	r1, [ip, r4]
   2a114:	sub	r2, lr, r2
   2a118:	cmp	r2, r1
   2a11c:	strh	r1, [sp, #20]
   2a120:	movcc	r0, #20
   2a124:	bcc	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a128:	mov	r0, sp
   2a12c:	stm	sp, {ip, lr}
   2a130:	str	r5, [sp, #12]
   2a134:	blx	r3
   2a138:	b	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a13c:	mov	r0, #15
   2a140:	add	sp, sp, #28
   2a144:	ldrd	r4, [sp]
   2a148:	add	sp, sp, #8
   2a14c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a150:	cmp	r2, #0
   2a154:	moveq	r0, #0
   2a158:	movne	r0, #4
   2a15c:	bx	lr
   2a160:	mov	r0, #13
   2a164:	bx	lr
   2a168:	mov	r0, #12
   2a16c:	bx	lr
   2a170:	mov	r0, r1
   2a174:	bx	lr
   2a178:	mov	r0, #29
   2a17c:	b	2a140 <flatcc_verify_table_field@@Base+0x124>
   2a180:	mov	r0, #30
   2a184:	b	2a140 <flatcc_verify_table_field@@Base+0x124>

0002a188 <flatcc_verify_table_vector_field@@Base>:
   2a188:	ldrh	ip, [r0, #22]
   2a18c:	add	r1, r1, #2
   2a190:	lsl	r1, r1, #1
   2a194:	uxth	r1, r1
   2a198:	cmp	ip, r1
   2a19c:	bls	2a424 <flatcc_verify_table_vector_field@@Base+0x29c>
   2a1a0:	ldr	ip, [r0, #12]
   2a1a4:	ldrh	r1, [ip, r1]
   2a1a8:	cmp	r1, #0
   2a1ac:	beq	2a424 <flatcc_verify_table_vector_field@@Base+0x29c>
   2a1b0:	ldrh	r2, [r0, #20]
   2a1b4:	add	ip, r1, #4
   2a1b8:	cmp	ip, r2
   2a1bc:	bhi	2a434 <flatcc_verify_table_vector_field@@Base+0x2ac>
   2a1c0:	ldr	r2, [r0, #16]
   2a1c4:	add	r1, r1, r2
   2a1c8:	tst	r1, #3
   2a1cc:	bne	2a44c <flatcc_verify_table_vector_field@@Base+0x2c4>
   2a1d0:	cmp	r1, #0
   2a1d4:	beq	2a42c <flatcc_verify_table_vector_field@@Base+0x2a4>
   2a1d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a1dc:	strd	r6, [sp, #8]
   2a1e0:	ldr	r7, [r0, #8]
   2a1e4:	strd	r8, [sp, #16]
   2a1e8:	ldr	r8, [r0]
   2a1ec:	strd	sl, [sp, #24]
   2a1f0:	str	lr, [sp, #32]
   2a1f4:	sub	sp, sp, #36	; 0x24
   2a1f8:	cmp	r7, #0
   2a1fc:	ldr	ip, [r8, r1]
   2a200:	ble	2a444 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2a204:	add	ip, r1, ip
   2a208:	cmp	r1, ip
   2a20c:	bcs	2a404 <flatcc_verify_table_vector_field@@Base+0x27c>
   2a210:	ldr	r9, [r0, #4]
   2a214:	add	r5, ip, #4
   2a218:	cmp	r9, r5
   2a21c:	bcc	2a404 <flatcc_verify_table_vector_field@@Base+0x27c>
   2a220:	tst	r5, #3
   2a224:	bne	2a404 <flatcc_verify_table_vector_field@@Base+0x27c>
   2a228:	ldr	r1, [r8, ip]
   2a22c:	cmn	r1, #-1073741823	; 0xc0000001
   2a230:	bhi	2a454 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2a234:	lsl	r2, r1, #2
   2a238:	sub	r0, r9, r5
   2a23c:	cmp	r0, r2
   2a240:	bcc	2a454 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2a244:	cmp	r1, #0
   2a248:	beq	2a474 <flatcc_verify_table_vector_field@@Base+0x2ec>
   2a24c:	sub	r7, r7, #2
   2a250:	add	sl, r8, r5
   2a254:	ldr	r1, [r8, r5]
   2a258:	cmp	r7, #0
   2a25c:	str	r7, [sp, #16]
   2a260:	beq	2a444 <flatcc_verify_table_vector_field@@Base+0x2bc>
   2a264:	mov	r6, r3
   2a268:	add	r3, r5, r1
   2a26c:	cmp	r5, r3
   2a270:	bcs	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a274:	add	r1, r3, #4
   2a278:	cmp	r9, r1
   2a27c:	bcc	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a280:	tst	r3, #3
   2a284:	bne	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a288:	movw	fp, #65532	; 0xfffc
   2a28c:	movt	fp, #65535	; 0xffff
   2a290:	sub	fp, fp, ip
   2a294:	add	r1, sp, #8
   2a298:	add	fp, sl, fp
   2a29c:	add	ip, ip, #8
   2a2a0:	add	r2, r5, r2
   2a2a4:	add	r4, r8, ip
   2a2a8:	str	r1, [sp, #4]
   2a2ac:	mov	r1, fp
   2a2b0:	mov	fp, r2
   2a2b4:	add	sl, r1, r5
   2a2b8:	str	r1, [sp]
   2a2bc:	str	r3, [sp, #24]
   2a2c0:	ldr	r2, [r8, r3]
   2a2c4:	subs	r2, r3, r2
   2a2c8:	bmi	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a2cc:	tst	r2, #1
   2a2d0:	bne	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a2d4:	add	lr, r2, #2
   2a2d8:	cmp	r9, lr
   2a2dc:	bcc	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a2e0:	ldrh	r0, [r8, r2]
   2a2e4:	add	ip, r8, r2
   2a2e8:	add	r2, r0, r2
   2a2ec:	strh	r0, [sp, #30]
   2a2f0:	cmp	r9, r2
   2a2f4:	bcc	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a2f8:	tst	r0, #1
   2a2fc:	bne	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a300:	cmp	r0, #3
   2a304:	bls	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a308:	ldrh	r2, [r8, lr]
   2a30c:	sub	r3, r9, r3
   2a310:	cmp	r3, r2
   2a314:	strh	r2, [sp, #28]
   2a318:	bcc	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a31c:	ldr	r0, [sp, #4]
   2a320:	strd	r8, [sp, #8]
   2a324:	str	ip, [sp, #20]
   2a328:	blx	r6
   2a32c:	cmp	r0, #0
   2a330:	ldr	r1, [sp]
   2a334:	bne	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a338:	add	r5, r5, #4
   2a33c:	cmp	r5, fp
   2a340:	beq	2a474 <flatcc_verify_table_vector_field@@Base+0x2ec>
   2a344:	mov	sl, r4
   2a348:	ldr	r3, [r4], #4
   2a34c:	str	r7, [sp, #16]
   2a350:	add	r3, r3, r5
   2a354:	cmp	r5, r3
   2a358:	bcc	2a47c <flatcc_verify_table_vector_field@@Base+0x2f4>
   2a35c:	ldr	r3, [sl]
   2a360:	str	r7, [sp, #16]
   2a364:	add	r3, r5, r3
   2a368:	cmp	r3, r5
   2a36c:	bls	2a494 <flatcc_verify_table_vector_field@@Base+0x30c>
   2a370:	add	r2, r3, #4
   2a374:	cmp	r9, r2
   2a378:	bcc	2a494 <flatcc_verify_table_vector_field@@Base+0x30c>
   2a37c:	tst	r3, #3
   2a380:	bne	2a494 <flatcc_verify_table_vector_field@@Base+0x30c>
   2a384:	str	r3, [sp, #24]
   2a388:	ldr	r2, [r8, r3]
   2a38c:	subs	r2, r3, r2
   2a390:	bmi	2a49c <flatcc_verify_table_vector_field@@Base+0x314>
   2a394:	tst	r2, #1
   2a398:	bne	2a49c <flatcc_verify_table_vector_field@@Base+0x314>
   2a39c:	add	r0, r2, #2
   2a3a0:	cmp	r9, r0
   2a3a4:	movcc	r0, #27
   2a3a8:	bcc	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a3ac:	ldrh	r1, [r8, r2]
   2a3b0:	add	ip, r8, r2
   2a3b4:	add	r2, r1, r2
   2a3b8:	strh	r1, [sp, #30]
   2a3bc:	cmp	r9, r2
   2a3c0:	bcc	2a4a4 <flatcc_verify_table_vector_field@@Base+0x31c>
   2a3c4:	tst	r1, #1
   2a3c8:	bne	2a4a4 <flatcc_verify_table_vector_field@@Base+0x31c>
   2a3cc:	cmp	r1, #3
   2a3d0:	movls	r0, #28
   2a3d4:	bls	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a3d8:	ldrh	r2, [r8, r0]
   2a3dc:	sub	r3, r9, r3
   2a3e0:	cmp	r3, r2
   2a3e4:	strh	r2, [sp, #28]
   2a3e8:	movcc	r0, #20
   2a3ec:	bcc	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a3f0:	add	r0, sp, #8
   2a3f4:	strd	r8, [sp, #8]
   2a3f8:	str	ip, [sp, #20]
   2a3fc:	blx	r6
   2a400:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a404:	mov	r0, #16
   2a408:	add	sp, sp, #36	; 0x24
   2a40c:	ldrd	r4, [sp]
   2a410:	ldrd	r6, [sp, #8]
   2a414:	ldrd	r8, [sp, #16]
   2a418:	ldrd	sl, [sp, #24]
   2a41c:	add	sp, sp, #32
   2a420:	pop	{pc}		; (ldr pc, [sp], #4)
   2a424:	cmp	r2, #0
   2a428:	bne	2a43c <flatcc_verify_table_vector_field@@Base+0x2b4>
   2a42c:	mov	r0, #0
   2a430:	bx	lr
   2a434:	mov	r0, #13
   2a438:	bx	lr
   2a43c:	mov	r0, #4
   2a440:	bx	lr
   2a444:	mov	r0, #3
   2a448:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a44c:	mov	r0, #12
   2a450:	bx	lr
   2a454:	ldr	r3, [r8, ip]
   2a458:	cmn	r3, #-1073741823	; 0xc0000001
   2a45c:	movhi	r0, #25
   2a460:	bhi	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a464:	sub	r5, r9, r5
   2a468:	cmp	r5, r3, lsl #2
   2a46c:	movcc	r0, #26
   2a470:	bcc	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a474:	mov	r0, #0
   2a478:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a47c:	add	r2, r3, #4
   2a480:	cmp	r9, r2
   2a484:	bcc	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a488:	tst	r3, #3
   2a48c:	beq	2a2b4 <flatcc_verify_table_vector_field@@Base+0x12c>
   2a490:	b	2a35c <flatcc_verify_table_vector_field@@Base+0x1d4>
   2a494:	mov	r0, #15
   2a498:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a49c:	mov	r0, #29
   2a4a0:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>
   2a4a4:	mov	r0, #30
   2a4a8:	b	2a408 <flatcc_verify_table_vector_field@@Base+0x280>

0002a4ac <flatcc_verify_union_table@@Base>:
   2a4ac:	strd	r4, [sp, #-12]!
   2a4b0:	ldr	r3, [r0, #8]
   2a4b4:	ldr	ip, [r0, #4]
   2a4b8:	ldr	r2, [r0, #16]
   2a4bc:	sub	r3, r3, #1
   2a4c0:	str	lr, [sp, #8]
   2a4c4:	sub	sp, sp, #28
   2a4c8:	cmp	r3, #0
   2a4cc:	ldr	lr, [r0]
   2a4d0:	str	r3, [sp, #8]
   2a4d4:	ldr	r3, [r0, #20]
   2a4d8:	moveq	r0, #3
   2a4dc:	beq	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a4e0:	add	r3, r2, r3
   2a4e4:	cmp	r2, r3
   2a4e8:	bcc	2a500 <flatcc_verify_union_table@@Base+0x54>
   2a4ec:	mov	r0, #15
   2a4f0:	add	sp, sp, #28
   2a4f4:	ldrd	r4, [sp]
   2a4f8:	add	sp, sp, #8
   2a4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a500:	add	r2, r3, #4
   2a504:	cmp	ip, r2
   2a508:	bcc	2a4ec <flatcc_verify_union_table@@Base+0x40>
   2a50c:	tst	r3, #3
   2a510:	bne	2a4ec <flatcc_verify_union_table@@Base+0x40>
   2a514:	str	r3, [sp, #16]
   2a518:	ldr	r2, [lr, r3]
   2a51c:	subs	r2, r3, r2
   2a520:	bmi	2a5a0 <flatcc_verify_union_table@@Base+0xf4>
   2a524:	tst	r2, #1
   2a528:	bne	2a5a0 <flatcc_verify_union_table@@Base+0xf4>
   2a52c:	add	r4, r2, #2
   2a530:	cmp	ip, r4
   2a534:	movcc	r0, #27
   2a538:	bcc	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a53c:	ldrh	r0, [lr, r2]
   2a540:	add	r5, lr, r2
   2a544:	add	r2, r0, r2
   2a548:	strh	r0, [sp, #22]
   2a54c:	cmp	ip, r2
   2a550:	bcc	2a598 <flatcc_verify_union_table@@Base+0xec>
   2a554:	tst	r0, #1
   2a558:	bne	2a598 <flatcc_verify_union_table@@Base+0xec>
   2a55c:	cmp	r0, #3
   2a560:	movls	r0, #28
   2a564:	bls	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a568:	ldrh	r2, [lr, r4]
   2a56c:	sub	r3, ip, r3
   2a570:	cmp	r3, r2
   2a574:	strh	r2, [sp, #20]
   2a578:	movcc	r0, #20
   2a57c:	bcc	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a580:	mov	r0, sp
   2a584:	str	lr, [sp]
   2a588:	str	ip, [sp, #4]
   2a58c:	str	r5, [sp, #12]
   2a590:	blx	r1
   2a594:	b	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a598:	mov	r0, #30
   2a59c:	b	2a4f0 <flatcc_verify_union_table@@Base+0x44>
   2a5a0:	mov	r0, #29
   2a5a4:	b	2a4f0 <flatcc_verify_union_table@@Base+0x44>

0002a5a8 <flatcc_verify_union_struct@@Base>:
   2a5a8:	push	{lr}		; (str lr, [sp, #-4]!)
   2a5ac:	ldr	ip, [r0, #20]
   2a5b0:	ldr	lr, [r0, #4]
   2a5b4:	ldr	r3, [r0, #16]
   2a5b8:	cmp	ip, #0
   2a5bc:	beq	2a5f0 <flatcc_verify_union_struct@@Base+0x48>
   2a5c0:	add	r3, r3, ip
   2a5c4:	cmp	lr, r3
   2a5c8:	bcc	2a5f0 <flatcc_verify_union_struct@@Base+0x48>
   2a5cc:	adds	r1, r1, r3
   2a5d0:	bcs	2a600 <flatcc_verify_union_struct@@Base+0x58>
   2a5d4:	cmp	lr, r1
   2a5d8:	bcc	2a5f8 <flatcc_verify_union_struct@@Base+0x50>
   2a5dc:	sub	r2, r2, #1
   2a5e0:	tst	r2, r3
   2a5e4:	moveq	r0, #0
   2a5e8:	movne	r0, #11
   2a5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2a5f0:	mov	r0, #18
   2a5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a5f8:	mov	r0, #9
   2a5fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a600:	mov	r0, #10
   2a604:	b	2a5ec <flatcc_verify_union_struct@@Base+0x44>

0002a608 <flatcc_verify_union_string@@Base>:
   2a608:	ldrd	r2, [r0, #16]
   2a60c:	add	r3, r2, r3
   2a610:	cmp	r2, r3
   2a614:	bcs	2a660 <flatcc_verify_union_string@@Base+0x58>
   2a618:	ldr	r2, [r0, #4]
   2a61c:	add	r1, r3, #4
   2a620:	cmp	r2, r1
   2a624:	bcc	2a660 <flatcc_verify_union_string@@Base+0x58>
   2a628:	tst	r3, #3
   2a62c:	bne	2a660 <flatcc_verify_union_string@@Base+0x58>
   2a630:	ldr	r0, [r0]
   2a634:	sub	r2, r2, r1
   2a638:	ldr	r3, [r0, r3]
   2a63c:	add	ip, r3, #1
   2a640:	cmp	r2, ip
   2a644:	bcc	2a668 <flatcc_verify_union_string@@Base+0x60>
   2a648:	add	r1, r0, r1
   2a64c:	ldrb	r3, [r1, r3]
   2a650:	cmp	r3, #0
   2a654:	moveq	r0, #0
   2a658:	movne	r0, #7
   2a65c:	bx	lr
   2a660:	mov	r0, #17
   2a664:	bx	lr
   2a668:	mov	r0, #8
   2a66c:	bx	lr

0002a670 <flatcc_verify_buffer_header@@Base>:
   2a670:	tst	r0, #3
   2a674:	bne	2a6e0 <flatcc_verify_buffer_header@@Base+0x70>
   2a678:	cmn	r1, #9
   2a67c:	bhi	2a6e8 <flatcc_verify_buffer_header@@Base+0x78>
   2a680:	cmp	r1, #7
   2a684:	bls	2a6d8 <flatcc_verify_buffer_header@@Base+0x68>
   2a688:	cmp	r2, #0
   2a68c:	beq	2a6f0 <flatcc_verify_buffer_header@@Base+0x80>
   2a690:	mov	r1, r2
   2a694:	mov	r2, #4
   2a698:	str	r4, [sp, #-8]!
   2a69c:	str	lr, [sp, #4]
   2a6a0:	sub	sp, sp, #8
   2a6a4:	mov	r4, r0
   2a6a8:	add	r0, sp, r2
   2a6ac:	bl	145a0 <strncpy@plt>
   2a6b0:	ldr	r2, [r4, #4]
   2a6b4:	ldr	r3, [sp, #4]
   2a6b8:	cmp	r3, #0
   2a6bc:	cmpne	r2, r3
   2a6c0:	movne	r0, #2
   2a6c4:	moveq	r0, #0
   2a6c8:	add	sp, sp, #8
   2a6cc:	ldr	r4, [sp]
   2a6d0:	add	sp, sp, #4
   2a6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6d8:	mov	r0, #1
   2a6dc:	bx	lr
   2a6e0:	mov	r0, #5
   2a6e4:	bx	lr
   2a6e8:	mov	r0, #6
   2a6ec:	bx	lr
   2a6f0:	mov	r0, #0
   2a6f4:	bx	lr

0002a6f8 <flatcc_verify_typed_buffer_header@@Base>:
   2a6f8:	tst	r0, #3
   2a6fc:	bne	2a734 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2a700:	cmn	r1, #9
   2a704:	bhi	2a744 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2a708:	cmp	r1, #7
   2a70c:	bls	2a72c <flatcc_verify_typed_buffer_header@@Base+0x34>
   2a710:	cmp	r2, #0
   2a714:	beq	2a73c <flatcc_verify_typed_buffer_header@@Base+0x44>
   2a718:	ldr	r0, [r0, #4]
   2a71c:	cmp	r2, r0
   2a720:	movne	r0, #2
   2a724:	moveq	r0, #0
   2a728:	bx	lr
   2a72c:	mov	r0, #1
   2a730:	bx	lr
   2a734:	mov	r0, #5
   2a738:	bx	lr
   2a73c:	mov	r0, r2
   2a740:	bx	lr
   2a744:	mov	r0, #6
   2a748:	bx	lr

0002a74c <flatcc_verify_struct_as_root@@Base>:
   2a74c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a750:	mov	r4, r3
   2a754:	mov	r5, r1
   2a758:	strd	r6, [sp, #8]
   2a75c:	mov	r7, r0
   2a760:	ldrh	r6, [sp, #24]
   2a764:	str	r8, [sp, #16]
   2a768:	mov	r8, r2
   2a76c:	str	lr, [sp, #20]
   2a770:	bl	2a670 <flatcc_verify_buffer_header@@Base>
   2a774:	cmp	r0, #0
   2a778:	bne	2a7d0 <flatcc_verify_struct_as_root@@Base+0x84>
   2a77c:	ldr	r2, [r7]
   2a780:	cmp	r5, r2
   2a784:	movcs	r3, #0
   2a788:	movcc	r3, #1
   2a78c:	cmp	r2, #0
   2a790:	moveq	r3, #1
   2a794:	cmp	r3, #0
   2a798:	movne	r0, #18
   2a79c:	bne	2a7bc <flatcc_verify_struct_as_root@@Base+0x70>
   2a7a0:	adds	r4, r4, r2
   2a7a4:	bcs	2a7fc <flatcc_verify_struct_as_root@@Base+0xb0>
   2a7a8:	cmp	r5, r4
   2a7ac:	bcc	2a7f4 <flatcc_verify_struct_as_root@@Base+0xa8>
   2a7b0:	sub	r6, r6, #1
   2a7b4:	tst	r6, r2
   2a7b8:	movne	r0, #11
   2a7bc:	ldrd	r4, [sp]
   2a7c0:	ldrd	r6, [sp, #8]
   2a7c4:	ldr	r8, [sp, #16]
   2a7c8:	add	sp, sp, #20
   2a7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a7d0:	mov	r2, r8
   2a7d4:	mov	r1, r5
   2a7d8:	ldrd	r4, [sp]
   2a7dc:	mov	r0, r7
   2a7e0:	ldrd	r6, [sp, #8]
   2a7e4:	ldr	r8, [sp, #16]
   2a7e8:	ldr	lr, [sp, #20]
   2a7ec:	add	sp, sp, #24
   2a7f0:	b	2a670 <flatcc_verify_buffer_header@@Base>
   2a7f4:	mov	r0, #9
   2a7f8:	b	2a7bc <flatcc_verify_struct_as_root@@Base+0x70>
   2a7fc:	mov	r0, #10
   2a800:	b	2a7bc <flatcc_verify_struct_as_root@@Base+0x70>

0002a804 <flatcc_verify_struct_as_typed_root@@Base>:
   2a804:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a808:	mov	r4, r3
   2a80c:	mov	r5, r1
   2a810:	strd	r6, [sp, #8]
   2a814:	mov	r7, r0
   2a818:	ldrh	r6, [sp, #24]
   2a81c:	str	r8, [sp, #16]
   2a820:	mov	r8, r2
   2a824:	str	lr, [sp, #20]
   2a828:	bl	2a6f8 <flatcc_verify_typed_buffer_header@@Base>
   2a82c:	cmp	r0, #0
   2a830:	bne	2a888 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   2a834:	ldr	r2, [r7]
   2a838:	cmp	r5, r2
   2a83c:	movcs	r3, #0
   2a840:	movcc	r3, #1
   2a844:	cmp	r2, #0
   2a848:	moveq	r3, #1
   2a84c:	cmp	r3, #0
   2a850:	movne	r0, #18
   2a854:	bne	2a874 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2a858:	adds	r4, r4, r2
   2a85c:	bcs	2a8b4 <flatcc_verify_struct_as_typed_root@@Base+0xb0>
   2a860:	cmp	r5, r4
   2a864:	bcc	2a8ac <flatcc_verify_struct_as_typed_root@@Base+0xa8>
   2a868:	sub	r6, r6, #1
   2a86c:	tst	r6, r2
   2a870:	movne	r0, #11
   2a874:	ldrd	r4, [sp]
   2a878:	ldrd	r6, [sp, #8]
   2a87c:	ldr	r8, [sp, #16]
   2a880:	add	sp, sp, #20
   2a884:	pop	{pc}		; (ldr pc, [sp], #4)
   2a888:	mov	r2, r8
   2a88c:	mov	r1, r5
   2a890:	ldrd	r4, [sp]
   2a894:	mov	r0, r7
   2a898:	ldrd	r6, [sp, #8]
   2a89c:	ldr	r8, [sp, #16]
   2a8a0:	ldr	lr, [sp, #20]
   2a8a4:	add	sp, sp, #24
   2a8a8:	b	2a6f8 <flatcc_verify_typed_buffer_header@@Base>
   2a8ac:	mov	r0, #9
   2a8b0:	b	2a874 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2a8b4:	mov	r0, #10
   2a8b8:	b	2a874 <flatcc_verify_struct_as_typed_root@@Base+0x70>

0002a8bc <flatcc_verify_table_as_root@@Base>:
   2a8bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a8c0:	mov	r4, r0
   2a8c4:	mov	r5, r1
   2a8c8:	strd	r6, [sp, #8]
   2a8cc:	mov	r7, r3
   2a8d0:	mov	r6, r2
   2a8d4:	str	lr, [sp, #16]
   2a8d8:	sub	sp, sp, #28
   2a8dc:	bl	2a670 <flatcc_verify_buffer_header@@Base>
   2a8e0:	cmp	r0, #0
   2a8e4:	bne	2a9a8 <flatcc_verify_table_as_root@@Base+0xec>
   2a8e8:	ldr	r3, [r4]
   2a8ec:	mov	r2, #99	; 0x63
   2a8f0:	str	r2, [sp, #8]
   2a8f4:	cmp	r3, #0
   2a8f8:	bne	2a914 <flatcc_verify_table_as_root@@Base+0x58>
   2a8fc:	mov	r0, #15
   2a900:	add	sp, sp, #28
   2a904:	ldrd	r4, [sp]
   2a908:	ldrd	r6, [sp, #8]
   2a90c:	add	sp, sp, #16
   2a910:	pop	{pc}		; (ldr pc, [sp], #4)
   2a914:	add	r2, r3, #4
   2a918:	cmp	r5, r2
   2a91c:	bcc	2a8fc <flatcc_verify_table_as_root@@Base+0x40>
   2a920:	tst	r3, #3
   2a924:	bne	2a8fc <flatcc_verify_table_as_root@@Base+0x40>
   2a928:	ldr	r2, [r4, r3]
   2a92c:	str	r3, [sp, #16]
   2a930:	subs	r2, r3, r2
   2a934:	bmi	2a9bc <flatcc_verify_table_as_root@@Base+0x100>
   2a938:	tst	r2, #1
   2a93c:	bne	2a9bc <flatcc_verify_table_as_root@@Base+0x100>
   2a940:	add	r0, r2, #2
   2a944:	cmp	r5, r0
   2a948:	movcc	r0, #27
   2a94c:	bcc	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a950:	ldrh	r1, [r4, r2]
   2a954:	add	ip, r4, r2
   2a958:	add	r2, r1, r2
   2a95c:	strh	r1, [sp, #22]
   2a960:	cmp	r5, r2
   2a964:	bcc	2a9c4 <flatcc_verify_table_as_root@@Base+0x108>
   2a968:	tst	r1, #1
   2a96c:	bne	2a9c4 <flatcc_verify_table_as_root@@Base+0x108>
   2a970:	cmp	r1, #3
   2a974:	movls	r0, #28
   2a978:	bls	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a97c:	ldrh	r2, [r4, r0]
   2a980:	sub	r3, r5, r3
   2a984:	cmp	r3, r2
   2a988:	strh	r2, [sp, #20]
   2a98c:	movcc	r0, #20
   2a990:	bcc	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a994:	mov	r0, sp
   2a998:	strd	r4, [sp]
   2a99c:	str	ip, [sp, #12]
   2a9a0:	blx	r7
   2a9a4:	b	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a9a8:	mov	r2, r6
   2a9ac:	mov	r1, r5
   2a9b0:	mov	r0, r4
   2a9b4:	bl	2a670 <flatcc_verify_buffer_header@@Base>
   2a9b8:	b	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a9bc:	mov	r0, #29
   2a9c0:	b	2a900 <flatcc_verify_table_as_root@@Base+0x44>
   2a9c4:	mov	r0, #30
   2a9c8:	b	2a900 <flatcc_verify_table_as_root@@Base+0x44>

0002a9cc <flatcc_verify_table_as_typed_root@@Base>:
   2a9cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a9d0:	mov	r4, r0
   2a9d4:	mov	r5, r1
   2a9d8:	strd	r6, [sp, #8]
   2a9dc:	mov	r7, r3
   2a9e0:	mov	r6, r2
   2a9e4:	str	lr, [sp, #16]
   2a9e8:	sub	sp, sp, #28
   2a9ec:	bl	2a6f8 <flatcc_verify_typed_buffer_header@@Base>
   2a9f0:	cmp	r0, #0
   2a9f4:	bne	2aab8 <flatcc_verify_table_as_typed_root@@Base+0xec>
   2a9f8:	ldr	r3, [r4]
   2a9fc:	mov	r2, #99	; 0x63
   2aa00:	str	r2, [sp, #8]
   2aa04:	cmp	r3, #0
   2aa08:	bne	2aa24 <flatcc_verify_table_as_typed_root@@Base+0x58>
   2aa0c:	mov	r0, #15
   2aa10:	add	sp, sp, #28
   2aa14:	ldrd	r4, [sp]
   2aa18:	ldrd	r6, [sp, #8]
   2aa1c:	add	sp, sp, #16
   2aa20:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa24:	add	r2, r3, #4
   2aa28:	cmp	r5, r2
   2aa2c:	bcc	2aa0c <flatcc_verify_table_as_typed_root@@Base+0x40>
   2aa30:	tst	r3, #3
   2aa34:	bne	2aa0c <flatcc_verify_table_as_typed_root@@Base+0x40>
   2aa38:	ldr	r2, [r4, r3]
   2aa3c:	str	r3, [sp, #16]
   2aa40:	subs	r2, r3, r2
   2aa44:	bmi	2aacc <flatcc_verify_table_as_typed_root@@Base+0x100>
   2aa48:	tst	r2, #1
   2aa4c:	bne	2aacc <flatcc_verify_table_as_typed_root@@Base+0x100>
   2aa50:	add	r0, r2, #2
   2aa54:	cmp	r5, r0
   2aa58:	movcc	r0, #27
   2aa5c:	bcc	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aa60:	ldrh	r1, [r4, r2]
   2aa64:	add	ip, r4, r2
   2aa68:	add	r2, r1, r2
   2aa6c:	strh	r1, [sp, #22]
   2aa70:	cmp	r5, r2
   2aa74:	bcc	2aad4 <flatcc_verify_table_as_typed_root@@Base+0x108>
   2aa78:	tst	r1, #1
   2aa7c:	bne	2aad4 <flatcc_verify_table_as_typed_root@@Base+0x108>
   2aa80:	cmp	r1, #3
   2aa84:	movls	r0, #28
   2aa88:	bls	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aa8c:	ldrh	r2, [r4, r0]
   2aa90:	sub	r3, r5, r3
   2aa94:	cmp	r3, r2
   2aa98:	strh	r2, [sp, #20]
   2aa9c:	movcc	r0, #20
   2aaa0:	bcc	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aaa4:	mov	r0, sp
   2aaa8:	strd	r4, [sp]
   2aaac:	str	ip, [sp, #12]
   2aab0:	blx	r7
   2aab4:	b	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aab8:	mov	r2, r6
   2aabc:	mov	r1, r5
   2aac0:	mov	r0, r4
   2aac4:	bl	2a6f8 <flatcc_verify_typed_buffer_header@@Base>
   2aac8:	b	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aacc:	mov	r0, #29
   2aad0:	b	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>
   2aad4:	mov	r0, #30
   2aad8:	b	2aa10 <flatcc_verify_table_as_typed_root@@Base+0x44>

0002aadc <flatcc_verify_struct_as_nested_root@@Base>:
   2aadc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2aae0:	mov	r4, r1
   2aae4:	strd	r6, [sp, #8]
   2aae8:	mov	r6, r3
   2aaec:	strd	r8, [sp, #16]
   2aaf0:	mvn	r9, #0
   2aaf4:	mov	r8, r0
   2aaf8:	strd	sl, [sp, #24]
   2aafc:	mov	sl, #1
   2ab00:	mov	fp, r2
   2ab04:	str	lr, [sp, #32]
   2ab08:	sub	sp, sp, #12
   2ab0c:	ldrh	r5, [sp, #52]	; 0x34
   2ab10:	str	sl, [sp]
   2ab14:	str	r9, [sp, #4]
   2ab18:	ldr	r7, [sp, #48]	; 0x30
   2ab1c:	mov	r3, r5
   2ab20:	bl	29d34 <flatcc_verify_vector_field@@Base>
   2ab24:	cmp	r0, #0
   2ab28:	bne	2abc4 <flatcc_verify_struct_as_nested_root@@Base+0xe8>
   2ab2c:	ldrh	r3, [r8, #22]
   2ab30:	add	r1, r4, #2
   2ab34:	lsl	r1, r1, #1
   2ab38:	uxth	r1, r1
   2ab3c:	cmp	r3, r1
   2ab40:	bls	2aba4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ab44:	ldr	r3, [r8, #12]
   2ab48:	ldrh	r3, [r3, r1]
   2ab4c:	cmp	r3, #0
   2ab50:	beq	2aba4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ab54:	ldr	r2, [r8]
   2ab58:	ldr	r1, [r8, #16]
   2ab5c:	add	r3, r3, r1
   2ab60:	adds	r0, r2, r3
   2ab64:	beq	2aba4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2ab68:	ldr	ip, [r2, r3]
   2ab6c:	mov	r3, r7
   2ab70:	mov	r2, r6
   2ab74:	ldr	r1, [r0, ip]
   2ab78:	add	r0, r0, ip
   2ab7c:	add	r0, r0, #4
   2ab80:	str	r5, [sp, #48]	; 0x30
   2ab84:	add	sp, sp, #12
   2ab88:	ldrd	r4, [sp]
   2ab8c:	ldrd	r6, [sp, #8]
   2ab90:	ldrd	r8, [sp, #16]
   2ab94:	ldrd	sl, [sp, #24]
   2ab98:	ldr	lr, [sp, #32]
   2ab9c:	add	sp, sp, #36	; 0x24
   2aba0:	b	2a74c <flatcc_verify_struct_as_root@@Base>
   2aba4:	mov	r0, #0
   2aba8:	add	sp, sp, #12
   2abac:	ldrd	r4, [sp]
   2abb0:	ldrd	r6, [sp, #8]
   2abb4:	ldrd	r8, [sp, #16]
   2abb8:	ldrd	sl, [sp, #24]
   2abbc:	add	sp, sp, #32
   2abc0:	pop	{pc}		; (ldr pc, [sp], #4)
   2abc4:	mov	r3, r5
   2abc8:	mov	r2, fp
   2abcc:	str	sl, [sp, #48]	; 0x30
   2abd0:	mov	r1, r4
   2abd4:	mov	r0, r8
   2abd8:	str	r9, [sp, #52]	; 0x34
   2abdc:	add	sp, sp, #12
   2abe0:	ldrd	r4, [sp]
   2abe4:	ldrd	r6, [sp, #8]
   2abe8:	ldrd	r8, [sp, #16]
   2abec:	ldrd	sl, [sp, #24]
   2abf0:	ldr	lr, [sp, #32]
   2abf4:	add	sp, sp, #36	; 0x24
   2abf8:	b	29d34 <flatcc_verify_vector_field@@Base>

0002abfc <flatcc_verify_table_as_nested_root@@Base>:
   2abfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2ac00:	mov	r5, r0
   2ac04:	mov	r4, r1
   2ac08:	strd	r6, [sp, #8]
   2ac0c:	mvn	r7, #0
   2ac10:	mov	r6, r3
   2ac14:	strd	r8, [sp, #16]
   2ac18:	mov	r8, #1
   2ac1c:	str	sl, [sp, #24]
   2ac20:	mov	sl, r2
   2ac24:	str	lr, [sp, #28]
   2ac28:	sub	sp, sp, #32
   2ac2c:	ldrh	r9, [sp, #64]	; 0x40
   2ac30:	str	r8, [sp]
   2ac34:	str	r7, [sp, #4]
   2ac38:	mov	r3, r9
   2ac3c:	bl	29d34 <flatcc_verify_vector_field@@Base>
   2ac40:	cmp	r0, #0
   2ac44:	bne	2ad84 <flatcc_verify_table_as_nested_root@@Base+0x188>
   2ac48:	ldrh	r3, [r5, #22]
   2ac4c:	add	r1, r4, #2
   2ac50:	lsl	r1, r1, #1
   2ac54:	uxth	r1, r1
   2ac58:	cmp	r3, r1
   2ac5c:	bls	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ac60:	ldr	r3, [r5, #12]
   2ac64:	ldrh	r3, [r3, r1]
   2ac68:	cmp	r3, #0
   2ac6c:	beq	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ac70:	ldr	r2, [r5]
   2ac74:	ldr	r1, [r5, #16]
   2ac78:	add	r3, r3, r1
   2ac7c:	adds	r1, r2, r3
   2ac80:	beq	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ac84:	ldr	r4, [r2, r3]
   2ac88:	mov	r2, r6
   2ac8c:	ldr	r7, [r1, r4]
   2ac90:	add	r4, r1, r4
   2ac94:	add	r8, r4, #4
   2ac98:	mov	r0, r8
   2ac9c:	mov	r1, r7
   2aca0:	bl	2a670 <flatcc_verify_buffer_header@@Base>
   2aca4:	cmp	r0, #0
   2aca8:	bne	2adac <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   2acac:	ldr	r3, [r5, #8]
   2acb0:	ldr	r2, [r4, #4]
   2acb4:	sub	r3, r3, #1
   2acb8:	cmp	r3, #0
   2acbc:	moveq	r0, #3
   2acc0:	str	r3, [sp, #16]
   2acc4:	beq	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2acc8:	cmp	r2, #0
   2accc:	beq	2ada4 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2acd0:	add	r3, r2, #4
   2acd4:	cmp	r7, r3
   2acd8:	bcc	2ada4 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2acdc:	tst	r2, #3
   2ace0:	bne	2ada4 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   2ace4:	str	r2, [sp, #24]
   2ace8:	ldr	r3, [r8, r2]
   2acec:	subs	r3, r2, r3
   2acf0:	bmi	2adc0 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2acf4:	tst	r3, #1
   2acf8:	bne	2adc0 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2acfc:	add	r0, r3, #2
   2ad00:	cmp	r7, r0
   2ad04:	movcc	r0, #27
   2ad08:	bcc	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ad0c:	ldrh	r1, [r8, r3]
   2ad10:	add	ip, r8, r3
   2ad14:	add	r3, r1, r3
   2ad18:	strh	r1, [sp, #30]
   2ad1c:	cmp	r7, r3
   2ad20:	bcc	2adc8 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   2ad24:	tst	r1, #1
   2ad28:	bne	2adc8 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   2ad2c:	cmp	r1, #3
   2ad30:	movls	r0, #28
   2ad34:	bls	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ad38:	ldrh	r3, [r8, r0]
   2ad3c:	sub	r2, r7, r2
   2ad40:	cmp	r2, r3
   2ad44:	strh	r3, [sp, #28]
   2ad48:	movcc	r0, #20
   2ad4c:	bcc	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ad50:	add	r0, sp, #8
   2ad54:	ldr	r3, [sp, #68]	; 0x44
   2ad58:	str	r8, [sp, #8]
   2ad5c:	str	r7, [sp, #12]
   2ad60:	str	ip, [sp, #20]
   2ad64:	blx	r3
   2ad68:	add	sp, sp, #32
   2ad6c:	ldrd	r4, [sp]
   2ad70:	ldrd	r6, [sp, #8]
   2ad74:	ldrd	r8, [sp, #16]
   2ad78:	ldr	sl, [sp, #24]
   2ad7c:	add	sp, sp, #28
   2ad80:	pop	{pc}		; (ldr pc, [sp], #4)
   2ad84:	mov	r3, r9
   2ad88:	mov	r2, sl
   2ad8c:	str	r8, [sp]
   2ad90:	mov	r1, r4
   2ad94:	mov	r0, r5
   2ad98:	str	r7, [sp, #4]
   2ad9c:	bl	29d34 <flatcc_verify_vector_field@@Base>
   2ada0:	b	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2ada4:	mov	r0, #15
   2ada8:	b	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2adac:	mov	r2, r6
   2adb0:	mov	r1, r7
   2adb4:	mov	r0, r8
   2adb8:	bl	2a670 <flatcc_verify_buffer_header@@Base>
   2adbc:	b	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2adc0:	mov	r0, #29
   2adc4:	b	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   2adc8:	mov	r0, #30
   2adcc:	b	2ad68 <flatcc_verify_table_as_nested_root@@Base+0x16c>

0002add0 <flatcc_verify_union_field@@Base>:
   2add0:	strd	r4, [sp, #-20]!	; 0xffffffec
   2add4:	add	r1, r1, #1
   2add8:	ldr	r4, [r0, #12]
   2addc:	lsl	r1, r1, #1
   2ade0:	strd	r6, [sp, #8]
   2ade4:	str	lr, [sp, #16]
   2ade8:	uxth	r1, r1
   2adec:	sub	sp, sp, #28
   2adf0:	ldrh	lr, [r0, #22]
   2adf4:	cmp	r1, lr
   2adf8:	bcs	2aea4 <flatcc_verify_union_field@@Base+0xd4>
   2adfc:	ldrh	ip, [r4, r1]
   2ae00:	cmp	ip, #0
   2ae04:	beq	2aea4 <flatcc_verify_union_field@@Base+0xd4>
   2ae08:	ldrh	r5, [r0, #20]
   2ae0c:	add	r6, ip, #1
   2ae10:	cmp	r6, r5
   2ae14:	bhi	2aef4 <flatcc_verify_union_field@@Base+0x124>
   2ae18:	ldr	r6, [r0]
   2ae1c:	add	r1, r1, #2
   2ae20:	uxth	r1, r1
   2ae24:	ldr	r7, [r0, #16]
   2ae28:	cmp	lr, r1
   2ae2c:	add	lr, ip, r7
   2ae30:	ldrb	ip, [r6, lr]
   2ae34:	bls	2aefc <flatcc_verify_union_field@@Base+0x12c>
   2ae38:	cmp	ip, #0
   2ae3c:	ldrh	r1, [r4, r1]
   2ae40:	beq	2aee4 <flatcc_verify_union_field@@Base+0x114>
   2ae44:	cmp	r1, #0
   2ae48:	beq	2af0c <flatcc_verify_union_field@@Base+0x13c>
   2ae4c:	add	r2, r1, #4
   2ae50:	cmp	r5, r2
   2ae54:	bcc	2aef4 <flatcc_verify_union_field@@Base+0x124>
   2ae58:	add	r1, r1, r7
   2ae5c:	tst	r1, #3
   2ae60:	movne	r0, #12
   2ae64:	bne	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2ae68:	cmp	r1, #0
   2ae6c:	beq	2af1c <flatcc_verify_union_field@@Base+0x14c>
   2ae70:	mov	r2, r0
   2ae74:	str	r1, [sp, #16]
   2ae78:	mov	r0, sp
   2ae7c:	ldr	ip, [r2, #4]
   2ae80:	ldr	r2, [r2, #8]
   2ae84:	stm	sp, {r6, ip}
   2ae88:	str	r2, [sp, #8]
   2ae8c:	ldr	r2, [r6, r1]
   2ae90:	str	r2, [sp, #20]
   2ae94:	ldrb	r2, [r6, lr]
   2ae98:	strb	r2, [sp, #12]
   2ae9c:	blx	r3
   2aea0:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2aea4:	add	r1, r1, #2
   2aea8:	uxth	r1, r1
   2aeac:	cmp	lr, r1
   2aeb0:	bls	2aec4 <flatcc_verify_union_field@@Base+0xf4>
   2aeb4:	ldrh	r3, [r4, r1]
   2aeb8:	cmp	r3, #0
   2aebc:	movne	r0, #23
   2aec0:	bne	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2aec4:	cmp	r2, #0
   2aec8:	moveq	r0, #0
   2aecc:	movne	r0, #21
   2aed0:	add	sp, sp, #28
   2aed4:	ldrd	r4, [sp]
   2aed8:	ldrd	r6, [sp, #8]
   2aedc:	add	sp, sp, #16
   2aee0:	pop	{pc}		; (ldr pc, [sp], #4)
   2aee4:	cmp	r1, #0
   2aee8:	movne	r0, #24
   2aeec:	moveq	r0, #0
   2aef0:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2aef4:	mov	r0, #13
   2aef8:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2aefc:	cmp	ip, #0
   2af00:	bne	2af0c <flatcc_verify_union_field@@Base+0x13c>
   2af04:	mov	r0, ip
   2af08:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2af0c:	cmp	r2, #0
   2af10:	moveq	r0, #0
   2af14:	movne	r0, #4
   2af18:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>
   2af1c:	mov	r0, r1
   2af20:	b	2aed0 <flatcc_verify_union_field@@Base+0x100>

0002af24 <flatcc_verify_union_vector_field@@Base>:
   2af24:	ldrh	ip, [r0, #22]
   2af28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2af2c:	add	r4, r1, #1
   2af30:	sub	r1, r1, #1
   2af34:	lsl	r4, r4, #1
   2af38:	strd	r6, [sp, #8]
   2af3c:	uxth	r6, r1
   2af40:	strd	r8, [sp, #16]
   2af44:	uxth	r4, r4
   2af48:	strd	sl, [sp, #24]
   2af4c:	cmp	r4, ip
   2af50:	str	lr, [sp, #32]
   2af54:	sub	sp, sp, #36	; 0x24
   2af58:	ldr	lr, [r0, #12]
   2af5c:	bcs	2b11c <flatcc_verify_union_vector_field@@Base+0x1f8>
   2af60:	ldrh	r1, [lr, r4]
   2af64:	cmp	r1, #0
   2af68:	beq	2b11c <flatcc_verify_union_vector_field@@Base+0x1f8>
   2af6c:	mov	r9, #1
   2af70:	mvn	fp, #0
   2af74:	mov	r8, r3
   2af78:	mov	r1, r6
   2af7c:	mov	r3, r9
   2af80:	stm	sp, {r9, fp}
   2af84:	mov	r7, r2
   2af88:	mov	r5, r0
   2af8c:	bl	29d34 <flatcc_verify_vector_field@@Base>
   2af90:	subs	sl, r0, #0
   2af94:	bne	2b160 <flatcc_verify_union_vector_field@@Base+0x23c>
   2af98:	ldrh	r1, [r5, #22]
   2af9c:	cmp	r4, r1
   2afa0:	bcs	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2afa4:	ldr	ip, [r5, #12]
   2afa8:	ldrh	r3, [ip, r4]
   2afac:	cmp	r3, #0
   2afb0:	beq	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2afb4:	ldr	r0, [r5]
   2afb8:	ldr	r2, [r5, #16]
   2afbc:	add	r3, r3, r2
   2afc0:	adds	lr, r0, r3
   2afc4:	beq	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2afc8:	add	r4, r4, #2
   2afcc:	uxth	r4, r4
   2afd0:	cmp	r1, r4
   2afd4:	bls	2b148 <flatcc_verify_union_vector_field@@Base+0x224>
   2afd8:	ldrh	r1, [ip, r4]
   2afdc:	cmp	r1, #0
   2afe0:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x224>
   2afe4:	ldrh	ip, [r5, #20]
   2afe8:	add	r4, r1, #4
   2afec:	cmp	r4, ip
   2aff0:	movhi	sl, #13
   2aff4:	bhi	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2aff8:	add	r2, r2, r1
   2affc:	tst	r2, #3
   2b000:	movne	sl, #12
   2b004:	bne	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b008:	cmp	r2, #0
   2b00c:	beq	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b010:	ldr	ip, [r5, #8]
   2b014:	ldr	r1, [r0, r2]
   2b018:	cmp	ip, #0
   2b01c:	movle	sl, #3
   2b020:	ble	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b024:	add	r1, r2, r1
   2b028:	cmp	r2, r1
   2b02c:	bcs	2b158 <flatcc_verify_union_vector_field@@Base+0x234>
   2b030:	ldr	r4, [r5, #4]
   2b034:	add	r2, r1, #4
   2b038:	cmp	r4, r2
   2b03c:	bcc	2b158 <flatcc_verify_union_vector_field@@Base+0x234>
   2b040:	tst	r2, #3
   2b044:	bne	2b158 <flatcc_verify_union_vector_field@@Base+0x234>
   2b048:	ldr	r5, [r0, r1]
   2b04c:	add	r6, r0, r1
   2b050:	cmn	r5, #-1073741823	; 0xc0000001
   2b054:	bhi	2b180 <flatcc_verify_union_vector_field@@Base+0x25c>
   2b058:	sub	r7, r4, r2
   2b05c:	cmp	r7, r5, lsl #2
   2b060:	bcc	2b180 <flatcc_verify_union_vector_field@@Base+0x25c>
   2b064:	ldr	r3, [r0, r3]
   2b068:	ldr	r7, [lr, r3]
   2b06c:	add	lr, lr, r3
   2b070:	cmp	r7, r5
   2b074:	bne	2b1a0 <flatcc_verify_union_vector_field@@Base+0x27c>
   2b078:	sub	ip, ip, #1
   2b07c:	cmp	r7, #0
   2b080:	str	r0, [sp, #8]
   2b084:	str	r4, [sp, #12]
   2b088:	str	ip, [sp, #16]
   2b08c:	beq	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b090:	add	r5, lr, #4
   2b094:	rsb	r4, r0, #4
   2b098:	add	r7, r7, r5
   2b09c:	add	r9, sp, #8
   2b0a0:	b	2b0b4 <flatcc_verify_union_vector_field@@Base+0x190>
   2b0a4:	cmp	r2, #0
   2b0a8:	bne	2b1a8 <flatcc_verify_union_vector_field@@Base+0x284>
   2b0ac:	cmp	r5, r7
   2b0b0:	beq	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b0b4:	add	r1, r4, r6
   2b0b8:	ldr	r3, [r6, #4]!
   2b0bc:	mov	r0, r9
   2b0c0:	add	r5, r5, #1
   2b0c4:	ldrb	r2, [r5, #-1]
   2b0c8:	cmp	r3, #0
   2b0cc:	beq	2b0a4 <flatcc_verify_union_vector_field@@Base+0x180>
   2b0d0:	cmp	r2, #0
   2b0d4:	beq	2b1b0 <flatcc_verify_union_vector_field@@Base+0x28c>
   2b0d8:	strb	r2, [sp, #20]
   2b0dc:	str	r1, [sp, #24]
   2b0e0:	str	r3, [sp, #28]
   2b0e4:	blx	r8
   2b0e8:	cmp	r0, #0
   2b0ec:	beq	2b0ac <flatcc_verify_union_vector_field@@Base+0x188>
   2b0f0:	mov	r0, r9
   2b0f4:	blx	r8
   2b0f8:	mov	sl, r0
   2b0fc:	mov	r0, sl
   2b100:	add	sp, sp, #36	; 0x24
   2b104:	ldrd	r4, [sp]
   2b108:	ldrd	r6, [sp, #8]
   2b10c:	ldrd	r8, [sp, #16]
   2b110:	ldrd	sl, [sp, #24]
   2b114:	add	sp, sp, #32
   2b118:	pop	{pc}		; (ldr pc, [sp], #4)
   2b11c:	add	r1, r4, #2
   2b120:	uxth	r1, r1
   2b124:	cmp	ip, r1
   2b128:	bls	2b138 <flatcc_verify_union_vector_field@@Base+0x214>
   2b12c:	ldrh	r1, [lr, r1]
   2b130:	cmp	r1, #0
   2b134:	bne	2af6c <flatcc_verify_union_vector_field@@Base+0x48>
   2b138:	cmp	r2, #0
   2b13c:	movne	sl, #22
   2b140:	beq	2af6c <flatcc_verify_union_vector_field@@Base+0x48>
   2b144:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b148:	cmp	r7, #0
   2b14c:	moveq	sl, #0
   2b150:	movne	sl, #4
   2b154:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b158:	mov	sl, #16
   2b15c:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b160:	mov	r2, r7
   2b164:	mov	r1, r6
   2b168:	stm	sp, {r9, fp}
   2b16c:	mov	r3, r9
   2b170:	mov	r0, r5
   2b174:	bl	29d34 <flatcc_verify_vector_field@@Base>
   2b178:	mov	sl, r0
   2b17c:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b180:	ldr	r3, [r0, r1]
   2b184:	cmn	r3, #-1073741823	; 0xc0000001
   2b188:	movhi	sl, #25
   2b18c:	bhi	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b190:	sub	r2, r4, r2
   2b194:	cmp	r2, r3, lsl #2
   2b198:	movcc	sl, #26
   2b19c:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b1a0:	mov	sl, #34	; 0x22
   2b1a4:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b1a8:	mov	sl, #32
   2b1ac:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b1b0:	mov	sl, #33	; 0x21
   2b1b4:	b	2b0fc <flatcc_verify_union_vector_field@@Base+0x1d8>
   2b1b8:	ldr	r3, [pc, #32]	; 2b1e0 <flatcc_verify_union_vector_field@@Base+0x2bc>
   2b1bc:	mov	r2, #260	; 0x104
   2b1c0:	str	r4, [sp, #-8]!
   2b1c4:	ldr	r1, [pc, #24]	; 2b1e4 <flatcc_verify_union_vector_field@@Base+0x2c0>
   2b1c8:	str	lr, [sp, #4]
   2b1cc:	ldr	r0, [pc, #20]	; 2b1e8 <flatcc_verify_union_vector_field@@Base+0x2c4>
   2b1d0:	add	r3, pc, r3
   2b1d4:	add	r1, pc, r1
   2b1d8:	add	r0, pc, r0
   2b1dc:	bl	145e8 <__assert_fail@plt>
   2b1e0:	andeq	r7, r1, r0, ror #1
   2b1e4:	andeq	r7, r1, r8, ror #17
   2b1e8:	andeq	r7, r1, r4, asr r9

0002b1ec <grisu3_diy_fp_encode_double@@Base>:
   2b1ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b1f0:	sub	r2, r2, r3
   2b1f4:	strd	r6, [sp, #8]
   2b1f8:	strd	r8, [sp, #16]
   2b1fc:	strd	sl, [sp, #24]
   2b200:	str	lr, [sp, #32]
   2b204:	sub	sp, sp, #52	; 0x34
   2b208:	ldr	lr, [sp, #88]	; 0x58
   2b20c:	strd	r0, [sp]
   2b210:	cmp	lr, #0
   2b214:	movne	lr, #4
   2b218:	orrs	r1, r0, r1
   2b21c:	beq	2b6c4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2b220:	ldr	r1, [sp, #4]
   2b224:	mov	ip, #0
   2b228:	mov	r6, ip
   2b22c:	mov	r4, ip
   2b230:	movt	r6, #65472	; 0xffc0
   2b234:	and	r5, r1, r6
   2b238:	orrs	r1, r4, r5
   2b23c:	bne	2b284 <grisu3_diy_fp_encode_double@@Base+0x98>
   2b240:	ldrd	r0, [sp]
   2b244:	mov	r5, ip
   2b248:	mvn	r7, #9
   2b24c:	str	r6, [sp, #8]
   2b250:	lsl	r4, r1, #10
   2b254:	mov	sl, r5
   2b258:	mov	ip, r7
   2b25c:	lsl	r6, r0, #10
   2b260:	sub	r7, r7, #10
   2b264:	orr	r4, r4, r0, lsr #22
   2b268:	mov	r0, r6
   2b26c:	mov	r1, r4
   2b270:	ldr	r4, [sp, #8]
   2b274:	and	fp, r1, r4
   2b278:	orrs	r4, sl, fp
   2b27c:	beq	2b250 <grisu3_diy_fp_encode_double@@Base+0x64>
   2b280:	strd	r0, [sp]
   2b284:	ldrd	r6, [sp]
   2b288:	cmp	r6, #0
   2b28c:	sbcs	r1, r7, #0
   2b290:	blt	2b2c0 <grisu3_diy_fp_encode_double@@Base+0xd4>
   2b294:	sub	r4, ip, #1
   2b298:	mov	r0, r6
   2b29c:	mov	r1, r7
   2b2a0:	adds	r0, r0, r0
   2b2a4:	mov	ip, r4
   2b2a8:	adc	r1, r1, r1
   2b2ac:	cmp	r0, #0
   2b2b0:	sbcs	r5, r1, #0
   2b2b4:	sub	r4, r4, #1
   2b2b8:	bge	2b2a0 <grisu3_diy_fp_encode_double@@Base+0xb4>
   2b2bc:	strd	r0, [sp]
   2b2c0:	rsb	r4, ip, #0
   2b2c4:	cmn	r2, #348	; 0x15c
   2b2c8:	lsl	fp, lr, r4
   2b2cc:	blt	2b724 <grisu3_diy_fp_encode_double@@Base+0x538>
   2b2d0:	cmp	r2, #348	; 0x15c
   2b2d4:	bge	2b6e4 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2b2d8:	ldr	r4, [pc, #1228]	; 2b7ac <grisu3_diy_fp_encode_double@@Base+0x5c0>
   2b2dc:	add	lr, r2, #348	; 0x15c
   2b2e0:	asr	lr, lr, #3
   2b2e4:	add	r4, pc, r4
   2b2e8:	add	lr, r4, lr, lsl #4
   2b2ec:	ldrsh	r1, [lr, #64]	; 0x40
   2b2f0:	ldrsh	r5, [lr, #66]	; 0x42
   2b2f4:	str	r1, [sp, #32]
   2b2f8:	ldr	r1, [lr, #56]	; 0x38
   2b2fc:	cmp	r2, r5
   2b300:	str	r1, [sp, #8]
   2b304:	ldr	r1, [lr, #60]	; 0x3c
   2b308:	str	r1, [sp, #36]	; 0x24
   2b30c:	blt	2b708 <grisu3_diy_fp_encode_double@@Base+0x51c>
   2b310:	add	lr, r5, #7
   2b314:	cmp	r2, lr
   2b318:	bgt	2b6c8 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   2b31c:	cmp	r2, r5
   2b320:	beq	2b3c0 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   2b324:	sub	r2, r2, r5
   2b328:	sub	r2, r2, #1
   2b32c:	cmp	r2, #6
   2b330:	bhi	2b748 <grisu3_diy_fp_encode_double@@Base+0x55c>
   2b334:	ldr	r4, [pc, #1140]	; 2b7b0 <grisu3_diy_fp_encode_double@@Base+0x5c4>
   2b338:	add	r3, r3, #1
   2b33c:	mov	lr, #0
   2b340:	add	r0, r3, r2
   2b344:	add	r4, pc, r4
   2b348:	add	r3, r4, r2, lsl #4
   2b34c:	ldr	r2, [r4, r2, lsl #4]
   2b350:	ldrd	r4, [sp]
   2b354:	ldmib	r3, {r1, sl}
   2b358:	umull	r6, r7, r5, r2
   2b35c:	umull	r2, r3, r4, r2
   2b360:	ldr	r2, [sp]
   2b364:	add	ip, ip, sl
   2b368:	mov	r5, r7
   2b36c:	add	ip, ip, #64	; 0x40
   2b370:	adds	r4, r3, r6
   2b374:	adc	sl, lr, lr
   2b378:	adds	r4, r4, #-2147483648	; 0x80000000
   2b37c:	umull	r6, r7, r2, r1
   2b380:	adc	sl, sl, lr
   2b384:	adds	r4, r4, r6
   2b388:	mov	r6, lr
   2b38c:	adc	sl, sl, lr
   2b390:	adds	r3, r5, r7
   2b394:	str	r3, [sp, #16]
   2b398:	adc	r3, lr, lr
   2b39c:	ldr	lr, [sp, #4]
   2b3a0:	str	r3, [sp, #20]
   2b3a4:	ldrd	r2, [sp, #16]
   2b3a8:	umlal	r2, r3, r1, lr
   2b3ac:	adds	r1, sl, r2
   2b3b0:	adc	r3, r6, r3
   2b3b4:	cmp	r0, #19
   2b3b8:	addgt	fp, fp, #4
   2b3bc:	stm	sp, {r1, r3}
   2b3c0:	ldrd	r0, [sp]
   2b3c4:	mov	lr, #0
   2b3c8:	ldr	r2, [sp, #8]
   2b3cc:	umull	r2, r3, r1, r2
   2b3d0:	mov	r1, r0
   2b3d4:	strd	r2, [sp, #16]
   2b3d8:	mov	r2, r0
   2b3dc:	ldr	r0, [sp, #8]
   2b3e0:	ldr	r3, [sp, #32]
   2b3e4:	umull	r0, r1, r1, r0
   2b3e8:	add	ip, ip, r3
   2b3ec:	mov	r3, r2
   2b3f0:	ldr	r2, [sp, #16]
   2b3f4:	strd	r0, [sp, #8]
   2b3f8:	add	r5, ip, #64	; 0x40
   2b3fc:	ldr	r0, [sp, #12]
   2b400:	ldr	r1, [sp, #36]	; 0x24
   2b404:	adds	r2, r0, r2
   2b408:	adc	r4, lr, lr
   2b40c:	adds	r2, r2, #-2147483648	; 0x80000000
   2b410:	umull	r6, r7, r3, r1
   2b414:	ldr	r3, [sp, #20]
   2b418:	adc	r4, r4, lr
   2b41c:	adds	r2, r2, r6
   2b420:	ldr	r2, [sp, #4]
   2b424:	adc	r4, r4, lr
   2b428:	adds	r3, r3, r7
   2b42c:	str	r3, [sp, #24]
   2b430:	adc	r3, lr, lr
   2b434:	str	r3, [sp, #28]
   2b438:	ldrd	r6, [sp, #24]
   2b43c:	umlal	r6, r7, r1, r2
   2b440:	adds	r8, r4, r6
   2b444:	adc	r9, lr, r7
   2b448:	cmp	fp, lr
   2b44c:	movne	r2, #9
   2b450:	moveq	r2, #8
   2b454:	orrs	r3, r8, r9
   2b458:	add	r2, fp, r2
   2b45c:	beq	2b6c4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2b460:	mov	r3, lr
   2b464:	mov	r6, lr
   2b468:	movt	r3, #65472	; 0xffc0
   2b46c:	and	r7, r9, r3
   2b470:	orrs	r1, r6, r7
   2b474:	bne	2b6ac <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2b478:	add	ip, ip, #54	; 0x36
   2b47c:	mov	r1, r3
   2b480:	mov	r7, r5
   2b484:	lsl	r0, r9, #10
   2b488:	mov	r4, lr
   2b48c:	mov	r3, ip
   2b490:	lsl	r6, r8, #10
   2b494:	sub	ip, ip, #10
   2b498:	orr	r0, r0, r8, lsr #22
   2b49c:	mov	r8, r6
   2b4a0:	and	r5, r0, r1
   2b4a4:	mov	r9, r0
   2b4a8:	orrs	r0, r4, r5
   2b4ac:	beq	2b484 <grisu3_diy_fp_encode_double@@Base+0x298>
   2b4b0:	mov	r5, r7
   2b4b4:	cmp	r8, #0
   2b4b8:	sbcs	r1, r9, #0
   2b4bc:	blt	2b4e0 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   2b4c0:	sub	r1, r3, #1
   2b4c4:	adds	r8, r8, r8
   2b4c8:	mov	r3, r1
   2b4cc:	adc	r9, r9, r9
   2b4d0:	cmp	r8, #0
   2b4d4:	sbcs	r0, r9, #0
   2b4d8:	sub	r1, r1, #1
   2b4dc:	bge	2b4c4 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   2b4e0:	movw	r1, #64526	; 0xfc0e
   2b4e4:	movt	r1, #65535	; 0xffff
   2b4e8:	add	r0, r3, #64	; 0x40
   2b4ec:	sub	r5, r5, r3
   2b4f0:	cmp	r0, r1
   2b4f4:	lsl	r2, r2, r5
   2b4f8:	blt	2b638 <grisu3_diy_fp_encode_double@@Base+0x44c>
   2b4fc:	add	ip, r2, #4
   2b500:	mov	r1, #4
   2b504:	cmp	ip, #0
   2b508:	mov	r0, #0
   2b50c:	bgt	2b558 <grisu3_diy_fp_encode_double@@Base+0x36c>
   2b510:	adds	r8, r8, #1
   2b514:	mov	r4, #0
   2b518:	adc	r9, r9, #0
   2b51c:	and	r5, r9, #2097152	; 0x200000
   2b520:	orrs	lr, r4, r5
   2b524:	beq	2b540 <grisu3_diy_fp_encode_double@@Base+0x354>
   2b528:	lsr	lr, r8, #1
   2b52c:	add	r3, r3, #1
   2b530:	lsr	r4, r9, #1
   2b534:	orr	lr, lr, r9, lsl #31
   2b538:	mov	r9, r4
   2b53c:	mov	r8, lr
   2b540:	movw	r5, #65535	; 0xffff
   2b544:	movt	r5, #31
   2b548:	mvn	r4, #0
   2b54c:	cmp	r9, r5
   2b550:	cmpeq	r8, r4
   2b554:	bls	2b590 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   2b558:	movw	r5, #65535	; 0xffff
   2b55c:	movt	r5, #31
   2b560:	add	r6, r3, #1
   2b564:	mvn	r4, #0
   2b568:	lsr	lr, r8, #1
   2b56c:	mov	r3, r6
   2b570:	add	r6, r6, #1
   2b574:	lsr	r7, r9, #1
   2b578:	orr	lr, lr, r9, lsl #31
   2b57c:	cmp	r7, r5
   2b580:	mov	r9, r7
   2b584:	cmpeq	lr, r4
   2b588:	mov	r8, lr
   2b58c:	bhi	2b568 <grisu3_diy_fp_encode_double@@Base+0x37c>
   2b590:	movw	lr, #64462	; 0xfbce
   2b594:	movt	lr, #65535	; 0xffff
   2b598:	cmp	r3, lr
   2b59c:	mov	r6, #0
   2b5a0:	movlt	r7, #0
   2b5a4:	blt	2b600 <grisu3_diy_fp_encode_double@@Base+0x414>
   2b5a8:	mov	r4, r6
   2b5ac:	and	r5, r9, #1048576	; 0x100000
   2b5b0:	beq	2b5e8 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   2b5b4:	orrs	r7, r4, r5
   2b5b8:	beq	2b5cc <grisu3_diy_fp_encode_double@@Base+0x3e0>
   2b5bc:	b	2b6b4 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2b5c0:	orrs	sl, r4, r5
   2b5c4:	bne	2b694 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2b5c8:	mov	r3, r7
   2b5cc:	adds	r8, r8, r8
   2b5d0:	sub	r7, r3, #1
   2b5d4:	adc	r9, r9, r9
   2b5d8:	cmp	r7, lr
   2b5dc:	mov	r4, r6
   2b5e0:	and	r5, r9, #1048576	; 0x100000
   2b5e4:	bne	2b5c0 <grisu3_diy_fp_encode_double@@Base+0x3d4>
   2b5e8:	orrs	r3, r4, r5
   2b5ec:	movne	r4, #0
   2b5f0:	movne	r5, #1048576	; 0x100000
   2b5f4:	ubfx	r3, r9, #0, #20
   2b5f8:	orr	r6, r8, r4
   2b5fc:	orr	r7, r3, r5
   2b600:	ldr	r3, [sp, #92]	; 0x5c
   2b604:	sub	r2, r1, r2
   2b608:	cmp	r0, ip
   2b60c:	cmplt	r2, r0
   2b610:	movge	r0, #1
   2b614:	movlt	r0, #0
   2b618:	strd	r6, [r3]
   2b61c:	add	sp, sp, #52	; 0x34
   2b620:	ldrd	r4, [sp]
   2b624:	ldrd	r6, [sp, #8]
   2b628:	ldrd	r8, [sp, #16]
   2b62c:	ldrd	sl, [sp, #24]
   2b630:	add	sp, sp, #32
   2b634:	pop	{pc}		; (ldr pc, [sp], #4)
   2b638:	mvn	r1, #1072	; 0x430
   2b63c:	cmp	r0, r1
   2b640:	blt	2b6a4 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2b644:	add	r0, r3, #1136	; 0x470
   2b648:	add	r0, r0, #2
   2b64c:	rsb	lr, r0, #64	; 0x40
   2b650:	cmp	lr, #60	; 0x3c
   2b654:	rsbgt	r0, r0, #2
   2b658:	ble	2b768 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2b65c:	asr	r2, r2, r0
   2b660:	add	r3, r3, r0
   2b664:	mov	lr, #62	; 0x3e
   2b668:	lsr	r1, r9, r0
   2b66c:	mov	r9, #0
   2b670:	add	r3, r3, #62	; 0x3e
   2b674:	add	r2, r2, #9
   2b678:	mov	r0, r9
   2b67c:	lsr	r8, r1, #30
   2b680:	mov	ip, r2
   2b684:	mov	r1, r9
   2b688:	cmp	lr, ip
   2b68c:	blt	2b540 <grisu3_diy_fp_encode_double@@Base+0x354>
   2b690:	b	2b510 <grisu3_diy_fp_encode_double@@Base+0x324>
   2b694:	add	r3, r3, #1072	; 0x430
   2b698:	add	r3, r3, #2
   2b69c:	lsl	r5, r3, #20
   2b6a0:	b	2b5f4 <grisu3_diy_fp_encode_double@@Base+0x408>
   2b6a4:	mov	r0, #2
   2b6a8:	b	2b65c <grisu3_diy_fp_encode_double@@Base+0x470>
   2b6ac:	mov	r3, r5
   2b6b0:	b	2b4b4 <grisu3_diy_fp_encode_double@@Base+0x2c8>
   2b6b4:	add	r3, r3, #1072	; 0x430
   2b6b8:	add	r3, r3, #3
   2b6bc:	lsl	r5, r3, #20
   2b6c0:	b	2b5f4 <grisu3_diy_fp_encode_double@@Base+0x408>
   2b6c4:	bl	2b1b8 <flatcc_verify_union_vector_field@@Base+0x294>
   2b6c8:	ldr	r1, [pc, #228]	; 2b7b4 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2b6cc:	add	r3, r4, #24
   2b6d0:	mov	r2, #89	; 0x59
   2b6d4:	ldr	r0, [pc, #220]	; 2b7b8 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   2b6d8:	add	r1, pc, r1
   2b6dc:	add	r0, pc, r0
   2b6e0:	bl	145e8 <__assert_fail@plt>
   2b6e4:	ldr	r3, [pc, #208]	; 2b7bc <grisu3_diy_fp_encode_double@@Base+0x5d0>
   2b6e8:	mov	r2, #81	; 0x51
   2b6ec:	ldr	r1, [pc, #204]	; 2b7c0 <grisu3_diy_fp_encode_double@@Base+0x5d4>
   2b6f0:	ldr	r0, [pc, #204]	; 2b7c4 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   2b6f4:	add	r3, pc, r3
   2b6f8:	add	r3, r3, #24
   2b6fc:	add	r1, pc, r1
   2b700:	add	r0, pc, r0
   2b704:	bl	145e8 <__assert_fail@plt>
   2b708:	ldr	r1, [pc, #184]	; 2b7c8 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   2b70c:	add	r3, r4, #24
   2b710:	mov	r2, #88	; 0x58
   2b714:	ldr	r0, [pc, #176]	; 2b7cc <grisu3_diy_fp_encode_double@@Base+0x5e0>
   2b718:	add	r1, pc, r1
   2b71c:	add	r0, pc, r0
   2b720:	bl	145e8 <__assert_fail@plt>
   2b724:	ldr	r3, [pc, #164]	; 2b7d0 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2b728:	mov	r2, #80	; 0x50
   2b72c:	ldr	r1, [pc, #160]	; 2b7d4 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   2b730:	ldr	r0, [pc, #160]	; 2b7d8 <grisu3_diy_fp_encode_double@@Base+0x5ec>
   2b734:	add	r3, pc, r3
   2b738:	add	r3, r3, #24
   2b73c:	add	r1, pc, r1
   2b740:	add	r0, pc, r0
   2b744:	bl	145e8 <__assert_fail@plt>
   2b748:	ldr	r1, [pc, #140]	; 2b7dc <grisu3_diy_fp_encode_double@@Base+0x5f0>
   2b74c:	add	r3, r4, #1440	; 0x5a0
   2b750:	mov	r2, #185	; 0xb9
   2b754:	add	r3, r3, #8
   2b758:	ldr	r0, [pc, #128]	; 2b7e0 <grisu3_diy_fp_encode_double@@Base+0x5f4>
   2b75c:	add	r1, pc, r1
   2b760:	add	r0, pc, r0
   2b764:	bl	145e8 <__assert_fail@plt>
   2b768:	lsr	ip, r8, lr
   2b76c:	rsb	r1, lr, #32
   2b770:	rsb	r0, r0, #63	; 0x3f
   2b774:	sub	r5, lr, #32
   2b778:	mov	r4, #1
   2b77c:	orr	ip, ip, r9, lsl r1
   2b780:	mov	r1, #8
   2b784:	add	r3, r3, lr
   2b788:	and	r4, r8, r4, lsl r0
   2b78c:	orr	ip, ip, r9, lsr r5
   2b790:	lsl	r1, r1, r0
   2b794:	lsr	r5, r9, lr
   2b798:	mov	r8, ip
   2b79c:	lsl	r0, r4, #3
   2b7a0:	add	ip, r2, r1
   2b7a4:	mov	r9, r5
   2b7a8:	b	2b688 <grisu3_diy_fp_encode_double@@Base+0x49c>
   2b7ac:	andeq	r6, r1, ip, asr #31
   2b7b0:	andeq	r9, r2, ip
   2b7b4:	andeq	r7, r1, r0, ror #8
   2b7b8:	andeq	r7, r1, r8, lsr #10
   2b7bc:			; <UNDEFINED> instruction: 0x00016bbc
   2b7c0:	andeq	r7, r1, ip, lsr r4
   2b7c4:	andeq	r7, r1, r8, asr #9
   2b7c8:	andeq	r7, r1, r0, lsr #8
   2b7cc:	ldrdeq	r7, [r1], -r8
   2b7d0:	andeq	r6, r1, ip, ror fp
   2b7d4:	strdeq	r7, [r1], -ip
   2b7d8:	andeq	r7, r1, r8, ror #8
   2b7dc:	ldrdeq	r7, [r1], -ip
   2b7e0:	andeq	r7, r1, r0, asr #9
   2b7e4:	cmp	r1, #1000	; 0x3e8
   2b7e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b7ec:	mov	r4, #0
   2b7f0:	addgt	ip, r0, #1000	; 0x3e8
   2b7f4:	addle	r1, r1, #1
   2b7f8:	strd	r6, [sp, #8]
   2b7fc:	addle	ip, r0, r1
   2b800:	addgt	ip, ip, #1
   2b804:	strd	r8, [sp, #16]
   2b808:	mov	r5, #0
   2b80c:	strd	sl, [sp, #24]
   2b810:	cmp	ip, r0
   2b814:	str	lr, [sp, #32]
   2b818:	sub	sp, sp, #52	; 0x34
   2b81c:	moveq	r6, ip
   2b820:	strd	r4, [r2]
   2b824:	str	r2, [sp, #16]
   2b828:	beq	2b9c0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2b82c:	ldrb	r4, [r0]
   2b830:	cmp	r4, #45	; 0x2d
   2b834:	beq	2bab8 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   2b838:	cmp	r4, #48	; 0x30
   2b83c:	beq	2b9e0 <grisu3_diy_fp_encode_double@@Base+0x7f4>
   2b840:	sub	r3, r4, #49	; 0x31
   2b844:	cmp	r3, #8
   2b848:	bhi	2bb68 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2b84c:	mov	r2, #0
   2b850:	mov	r3, r0
   2b854:	str	r2, [sp, #20]
   2b858:	add	r7, r3, #1
   2b85c:	sub	r4, r4, #48	; 0x30
   2b860:	cmp	ip, r7
   2b864:	asr	r5, r4, #31
   2b868:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2b86c:	ldrb	r1, [r3, #1]
   2b870:	sub	r3, r1, #48	; 0x30
   2b874:	cmp	r3, #9
   2b878:	movhi	sl, #0
   2b87c:	movhi	lr, sl
   2b880:	bhi	2c1b8 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   2b884:	add	fp, pc, #996	; 0x3e4
   2b888:	ldrd	sl, [fp]
   2b88c:	add	lr, r7, #1
   2b890:	b	2b8a0 <grisu3_diy_fp_encode_double@@Base+0x6b4>
   2b894:	cmp	r5, fp
   2b898:	cmpeq	r4, sl
   2b89c:	bhi	2ba38 <grisu3_diy_fp_encode_double@@Base+0x84c>
   2b8a0:	lsl	r2, r5, #2
   2b8a4:	mov	r6, lr
   2b8a8:	lsl	r3, r4, #2
   2b8ac:	orr	r2, r2, r4, lsr #30
   2b8b0:	adds	r3, r3, r4
   2b8b4:	adc	r2, r2, r5
   2b8b8:	adds	r8, r3, r3
   2b8bc:	adc	r9, r2, r2
   2b8c0:	adds	r2, r8, r1
   2b8c4:	adc	r3, r9, #0
   2b8c8:	subs	r4, r2, #48	; 0x30
   2b8cc:	sbc	r5, r3, #0
   2b8d0:	cmp	ip, lr
   2b8d4:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2b8d8:	ldrb	r1, [lr]
   2b8dc:	add	lr, lr, #1
   2b8e0:	sub	r3, r1, #48	; 0x30
   2b8e4:	cmp	r3, #9
   2b8e8:	bls	2b894 <grisu3_diy_fp_encode_double@@Base+0x6a8>
   2b8ec:	mov	lr, #0
   2b8f0:	sub	sl, r6, r7
   2b8f4:	mov	r7, lr
   2b8f8:	sub	r3, r1, #49	; 0x31
   2b8fc:	cmp	r3, #8
   2b900:	bls	2baf8 <grisu3_diy_fp_encode_double@@Base+0x90c>
   2b904:	cmp	r1, #46	; 0x2e
   2b908:	beq	2bb70 <grisu3_diy_fp_encode_double@@Base+0x984>
   2b90c:	orr	r1, r1, #32
   2b910:	add	r7, r7, sl
   2b914:	cmp	r1, #101	; 0x65
   2b918:	beq	2bd28 <grisu3_diy_fp_encode_double@@Base+0xb3c>
   2b91c:	orrs	r3, r4, r5
   2b920:	mov	r9, r0
   2b924:	ldr	r8, [sp, #16]
   2b928:	moveq	r2, #1
   2b92c:	movne	r2, #0
   2b930:	cmn	r7, #324	; 0x144
   2b934:	movge	r3, #0
   2b938:	movlt	r3, #1
   2b93c:	orrs	r3, r2, r3
   2b940:	bne	2ba9c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2b944:	movw	r3, #310	; 0x136
   2b948:	cmp	r7, r3
   2b94c:	bgt	2bb48 <grisu3_diy_fp_encode_double@@Base+0x95c>
   2b950:	movw	r3, #65535	; 0xffff
   2b954:	movt	r3, #31
   2b958:	cmp	r5, r3
   2b95c:	mvn	r2, #0
   2b960:	cmpeq	r4, r2
   2b964:	movls	r3, #1
   2b968:	movhi	r3, #0
   2b96c:	cmp	r7, #22
   2b970:	movhi	r3, #0
   2b974:	andls	r3, r3, #1
   2b978:	cmp	r3, #0
   2b97c:	bne	2be44 <grisu3_diy_fp_encode_double@@Base+0xc58>
   2b980:	mov	r3, sl
   2b984:	mov	r2, r7
   2b988:	str	lr, [sp]
   2b98c:	mov	r0, r4
   2b990:	mov	r1, r5
   2b994:	str	r8, [sp, #4]
   2b998:	bl	2b1ec <grisu3_diy_fp_encode_double@@Base>
   2b99c:	cmp	r0, #0
   2b9a0:	bne	2ba9c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2b9a4:	mov	r0, r9
   2b9a8:	add	r1, sp, #44	; 0x2c
   2b9ac:	bl	145ac <strtod@plt>
   2b9b0:	ldr	r3, [sp, #44]	; 0x2c
   2b9b4:	vstr	d0, [r8]
   2b9b8:	cmp	r6, r3
   2b9bc:	movcs	r6, r3
   2b9c0:	mov	r0, r6
   2b9c4:	add	sp, sp, #52	; 0x34
   2b9c8:	ldrd	r4, [sp]
   2b9cc:	ldrd	r6, [sp, #8]
   2b9d0:	ldrd	r8, [sp, #16]
   2b9d4:	ldrd	sl, [sp, #24]
   2b9d8:	add	sp, sp, #32
   2b9dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9e0:	mov	r2, #0
   2b9e4:	mov	r3, r0
   2b9e8:	str	r2, [sp, #20]
   2b9ec:	add	r7, r3, #1
   2b9f0:	cmp	ip, r7
   2b9f4:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2b9f8:	ldrb	r1, [r3, #1]
   2b9fc:	orr	r2, r1, #32
   2ba00:	cmp	r2, #120	; 0x78
   2ba04:	beq	2bb68 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2ba08:	cmp	r1, #48	; 0x30
   2ba0c:	addeq	r3, r3, #2
   2ba10:	beq	2ba24 <grisu3_diy_fp_encode_double@@Base+0x838>
   2ba14:	b	2bdcc <grisu3_diy_fp_encode_double@@Base+0xbe0>
   2ba18:	ldrb	r1, [r3], #1
   2ba1c:	cmp	r1, #48	; 0x30
   2ba20:	bne	2bdcc <grisu3_diy_fp_encode_double@@Base+0xbe0>
   2ba24:	cmp	r3, ip
   2ba28:	mov	r7, r3
   2ba2c:	bne	2ba18 <grisu3_diy_fp_encode_double@@Base+0x82c>
   2ba30:	mov	r6, #0
   2ba34:	b	2b9c0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2ba38:	cmp	r1, #52	; 0x34
   2ba3c:	sub	sl, r6, r7
   2ba40:	movls	r3, #0
   2ba44:	movhi	r3, #1
   2ba48:	adds	r4, r4, r3
   2ba4c:	adc	r5, r5, #0
   2ba50:	cmp	r1, #48	; 0x30
   2ba54:	movne	r7, r6
   2ba58:	movne	lr, #1
   2ba5c:	bne	2c1b8 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   2ba60:	add	r3, r6, #1
   2ba64:	mov	r7, #0
   2ba68:	b	2ba7c <grisu3_diy_fp_encode_double@@Base+0x890>
   2ba6c:	ldrb	r1, [r3]
   2ba70:	add	r3, r3, #1
   2ba74:	cmp	r1, #48	; 0x30
   2ba78:	bne	2bae8 <grisu3_diy_fp_encode_double@@Base+0x8fc>
   2ba7c:	cmp	ip, r3
   2ba80:	mov	r6, r3
   2ba84:	add	r7, r7, #1
   2ba88:	bne	2ba6c <grisu3_diy_fp_encode_double@@Base+0x880>
   2ba8c:	b	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2ba90:	vldr	d6, [pc, #480]	; 2bc78 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   2ba94:	vmul.f64	d7, d7, d6
   2ba98:	vstr	d7, [r8]
   2ba9c:	ldr	r3, [sp, #20]
   2baa0:	cmp	r3, #0
   2baa4:	beq	2b9c0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2baa8:	vldr	d7, [r8]
   2baac:	vneg.f64	d7, d7
   2bab0:	vstr	d7, [r8]
   2bab4:	b	2b9c0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2bab8:	add	r3, r0, #1
   2babc:	cmp	ip, r3
   2bac0:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bac4:	ldrb	r4, [r0, #1]
   2bac8:	cmp	r4, #48	; 0x30
   2bacc:	beq	2bb5c <grisu3_diy_fp_encode_double@@Base+0x970>
   2bad0:	sub	r2, r4, #49	; 0x31
   2bad4:	cmp	r2, #8
   2bad8:	bhi	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2badc:	mov	r2, #1
   2bae0:	str	r2, [sp, #20]
   2bae4:	b	2b858 <grisu3_diy_fp_encode_double@@Base+0x66c>
   2bae8:	sub	r3, r1, #49	; 0x31
   2baec:	mov	lr, #1
   2baf0:	cmp	r3, #8
   2baf4:	bhi	2b904 <grisu3_diy_fp_encode_double@@Base+0x718>
   2baf8:	add	r3, r6, #1
   2bafc:	add	lr, r7, #1
   2bb00:	cmp	ip, r3
   2bb04:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bb08:	ldrb	r1, [r6, #1]
   2bb0c:	sub	r2, r1, #48	; 0x30
   2bb10:	cmp	r2, #9
   2bb14:	bhi	2c19c <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2bb18:	sub	r8, r7, r6
   2bb1c:	add	r3, r6, #2
   2bb20:	cmp	ip, r3
   2bb24:	add	r7, r8, r3
   2bb28:	mov	r6, r3
   2bb2c:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bb30:	ldrb	r1, [r3], #1
   2bb34:	sub	r2, r1, #48	; 0x30
   2bb38:	cmp	r2, #9
   2bb3c:	bls	2bb20 <grisu3_diy_fp_encode_double@@Base+0x934>
   2bb40:	mov	lr, #1
   2bb44:	b	2b904 <grisu3_diy_fp_encode_double@@Base+0x718>
   2bb48:	mov	r2, #0
   2bb4c:	mov	r3, #0
   2bb50:	movt	r3, #32752	; 0x7ff0
   2bb54:	strd	r2, [r8]
   2bb58:	b	2ba9c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2bb5c:	mov	r2, #1
   2bb60:	str	r2, [sp, #20]
   2bb64:	b	2b9ec <grisu3_diy_fp_encode_double@@Base+0x800>
   2bb68:	mov	r6, r0
   2bb6c:	b	2b9c0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2bb70:	ldrb	r9, [r6, #1]
   2bb74:	add	fp, r6, #1
   2bb78:	sub	r3, r9, #48	; 0x30
   2bb7c:	cmp	r3, #9
   2bb80:	bhi	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bb84:	cmp	ip, fp
   2bb88:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bb8c:	add	r3, pc, #220	; 0xdc
   2bb90:	ldrd	r2, [r3]
   2bb94:	cmp	r5, r3
   2bb98:	cmpeq	r4, r2
   2bb9c:	bhi	2c1a8 <grisu3_diy_fp_encode_double@@Base+0xfbc>
   2bba0:	add	r7, r6, r7
   2bba4:	add	r6, r6, #2
   2bba8:	strd	r2, [sp, #8]
   2bbac:	add	r1, r7, #1
   2bbb0:	str	fp, [sp, #24]
   2bbb4:	mov	fp, r6
   2bbb8:	str	r0, [sp, #28]
   2bbbc:	b	2bbd0 <grisu3_diy_fp_encode_double@@Base+0x9e4>
   2bbc0:	ldrd	r2, [sp, #8]
   2bbc4:	cmp	r5, r3
   2bbc8:	cmpeq	r4, r2
   2bbcc:	bhi	2c15c <grisu3_diy_fp_encode_double@@Base+0xf70>
   2bbd0:	lsl	r2, r5, #2
   2bbd4:	mov	r8, fp
   2bbd8:	sub	r0, r1, fp
   2bbdc:	lsl	r3, r4, #2
   2bbe0:	orr	r2, r2, r4, lsr #30
   2bbe4:	adds	r3, r3, r4
   2bbe8:	adc	r2, r2, r5
   2bbec:	adds	r6, r3, r3
   2bbf0:	adc	r7, r2, r2
   2bbf4:	adds	r2, r6, r9
   2bbf8:	adc	r3, r7, #0
   2bbfc:	subs	r4, r2, #48	; 0x30
   2bc00:	sbc	r5, r3, #0
   2bc04:	cmp	ip, fp
   2bc08:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bc0c:	ldrb	r9, [fp]
   2bc10:	add	fp, fp, #1
   2bc14:	sub	r3, r9, #48	; 0x30
   2bc18:	cmp	r3, #9
   2bc1c:	bls	2bbc0 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   2bc20:	ldr	fp, [sp, #24]
   2bc24:	mov	r7, r0
   2bc28:	ldr	r0, [sp, #28]
   2bc2c:	sub	fp, r8, fp
   2bc30:	add	sl, sl, fp
   2bc34:	ldrb	r1, [r8]
   2bc38:	cmp	r1, #48	; 0x30
   2bc3c:	bne	2bdd8 <grisu3_diy_fp_encode_double@@Base+0xbec>
   2bc40:	sub	r3, r7, r8
   2bc44:	add	r8, r8, #1
   2bc48:	b	2bc58 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   2bc4c:	ldrb	r1, [r8], #1
   2bc50:	cmp	r1, #48	; 0x30
   2bc54:	bne	2bddc <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2bc58:	cmp	ip, r8
   2bc5c:	add	r7, r3, r8
   2bc60:	mov	r6, r8
   2bc64:	bne	2bc4c <grisu3_diy_fp_encode_double@@Base+0xa60>
   2bc68:	b	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bc6c:	nop	{0}
   2bc70:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2bc74:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2bc78:	usatle	lr, #2, r0, asr #30
   2bc7c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2bc80:	ldmvc	r5!, {r6, sl, fp, pc}
   2bc84:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2bc88:	addsvs	r3, r1, r0, lsl #26
   2bc8c:	mvnmi	r5, #228, 16	; 0xe40000
   2bc90:	strbvs	ip, [lr, -r0, lsl #16]
   2bc94:			; <UNDEFINED> instruction: 0x43abc16d
   2bc98:	ldrbhi	sl, [r8]
   2bc9c:	cmnmi	r6, #1459617792	; 0x57000000
   2bca0:	strbcc	r8, [r0, r0]!
   2bca4:	movtmi	ip, #4985	; 0x1379
   2bca8:	andeq	r0, r0, r0
   2bcac:	sbcmi	r8, r3, r0, lsl #16
   2bcb0:	andeq	r0, r0, r0
   2bcb4:	addmi	r4, pc, r0
   2bcb8:	andeq	r0, r0, r0
   2bcbc:	smlawbmi	lr, r0, r4, r8
   2bcc0:	andeq	r0, r0, r0
   2bcc4:	orrsmi	sp, r7, r4, lsl #15
   2bcc8:	andcs	r0, r0, r0
   2bccc:	andmi	sl, r2, #95	; 0x5f
   2bcd0:	andge	r0, r0, #0
   2bcd4:	rsbmi	r1, sp, #148, 20	; 0x94000
   2bcd8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2bcdc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2bce0:	ldrtcs	r0, [r4], -r0
   2bce4:	movwmi	r6, #52213	; 0xcbf5
   2bce8:	strb	r0, [r0, #-0]
   2bcec:	adcmi	r3, r2, #156	; 0x9c
   2bcf0:	stmda	r0, {}	; <UNPREDICTABLE>
   2bcf4:	eorsmi	r4, r7, #7733248	; 0x760000
   2bcf8:	andeq	r0, r0, r0
   2bcfc:	bicmi	ip, sp, r5, ror #26
   2bd00:	andeq	r0, r0, r0
   2bd04:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2bd08:	andeq	r0, r0, r0
   2bd0c:	rscsmi	r6, r8, r0, lsl #20
   2bd10:	andeq	r0, r0, r0
   2bd14:	subsmi	r0, r9, r0
   2bd18:			; <UNDEFINED> instruction: 0x064dd592
   2bd1c:	strmi	pc, [r0], #207	; 0xcf
   2bd20:	andeq	r0, r0, r0
   2bd24:	eormi	r0, r4, r0
   2bd28:	sub	r3, ip, r6
   2bd2c:	cmp	r3, #1
   2bd30:	ble	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bd34:	ldrb	r8, [r6, #1]
   2bd38:	cmp	r8, #43	; 0x2b
   2bd3c:	beq	2c120 <grisu3_diy_fp_encode_double@@Base+0xf34>
   2bd40:	cmp	r8, #45	; 0x2d
   2bd44:	beq	2c144 <grisu3_diy_fp_encode_double@@Base+0xf58>
   2bd48:	add	r2, r6, #1
   2bd4c:	mov	fp, #0
   2bd50:	sub	r8, r8, #48	; 0x30
   2bd54:	uxtb	r3, r8
   2bd58:	cmp	r3, #9
   2bd5c:	bhi	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bd60:	add	r6, r2, #1
   2bd64:	mov	r3, r8
   2bd68:	cmp	ip, r6
   2bd6c:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bd70:	ldrb	r1, [r2, #1]
   2bd74:	sub	r9, r1, #48	; 0x30
   2bd78:	cmp	r9, #9
   2bd7c:	bhi	2be30 <grisu3_diy_fp_encode_double@@Base+0xc44>
   2bd80:	add	r2, r2, #2
   2bd84:	add	r8, r3, r3, lsl #2
   2bd88:	cmp	r3, #32768	; 0x8000
   2bd8c:	mov	r6, r2
   2bd90:	addlt	r3, r1, r8, lsl #1
   2bd94:	sublt	r3, r3, #48	; 0x30
   2bd98:	cmp	ip, r2
   2bd9c:	beq	2c138 <grisu3_diy_fp_encode_double@@Base+0xf4c>
   2bda0:	ldrb	r1, [r2]
   2bda4:	add	r2, r2, #1
   2bda8:	sub	r8, r1, #48	; 0x30
   2bdac:	cmp	r8, #9
   2bdb0:	bls	2bd84 <grisu3_diy_fp_encode_double@@Base+0xb98>
   2bdb4:	cmp	fp, #0
   2bdb8:	beq	2be3c <grisu3_diy_fp_encode_double@@Base+0xc50>
   2bdbc:	cmp	ip, r6
   2bdc0:	sub	r7, r7, r3
   2bdc4:	bne	2b91c <grisu3_diy_fp_encode_double@@Base+0x730>
   2bdc8:	b	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bdcc:	mov	r4, #0
   2bdd0:	mov	r5, #0
   2bdd4:	b	2b870 <grisu3_diy_fp_encode_double@@Base+0x684>
   2bdd8:	mov	r6, r8
   2bddc:	sub	r3, r1, #49	; 0x31
   2bde0:	cmp	r3, #8
   2bde4:	bhi	2b90c <grisu3_diy_fp_encode_double@@Base+0x720>
   2bde8:	add	r3, r6, #1
   2bdec:	cmp	ip, r3
   2bdf0:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2bdf4:	ldrb	r1, [r6, #1]
   2bdf8:	sub	r2, r1, #48	; 0x30
   2bdfc:	cmp	r2, #9
   2be00:	bhi	2c1b0 <grisu3_diy_fp_encode_double@@Base+0xfc4>
   2be04:	add	r3, r6, #2
   2be08:	cmp	r3, ip
   2be0c:	mov	r6, r3
   2be10:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2be14:	ldrb	r1, [r3]
   2be18:	add	r3, r3, #1
   2be1c:	sub	r2, r1, #48	; 0x30
   2be20:	cmp	r2, #9
   2be24:	bls	2be08 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   2be28:	mov	lr, #1
   2be2c:	b	2b90c <grisu3_diy_fp_encode_double@@Base+0x720>
   2be30:	cmp	fp, #0
   2be34:	subne	r7, r7, r8
   2be38:	bne	2b91c <grisu3_diy_fp_encode_double@@Base+0x730>
   2be3c:	add	r7, r7, r3
   2be40:	b	2b91c <grisu3_diy_fp_encode_double@@Base+0x730>
   2be44:	mov	r0, r4
   2be48:	mov	r1, r5
   2be4c:	bl	3dc6c <flatcc_json_printer_clear@@Base+0x390>
   2be50:	sub	r3, r7, sl
   2be54:	vmov	d7, r0, r1
   2be58:	add	r3, r3, #22
   2be5c:	cmp	r3, #44	; 0x2c
   2be60:	addls	pc, pc, r3, lsl #2
   2be64:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2be68:	b	2c0fc <grisu3_diy_fp_encode_double@@Base+0xf10>
   2be6c:	b	2c114 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2be70:	b	2c108 <grisu3_diy_fp_encode_double@@Base+0xf1c>
   2be74:	b	2c0f0 <grisu3_diy_fp_encode_double@@Base+0xf04>
   2be78:	b	2c0e4 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2be7c:	b	2c0d8 <grisu3_diy_fp_encode_double@@Base+0xeec>
   2be80:	b	2c0cc <grisu3_diy_fp_encode_double@@Base+0xee0>
   2be84:	b	2c0c0 <grisu3_diy_fp_encode_double@@Base+0xed4>
   2be88:	b	2c0b4 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2be8c:	b	2c0a8 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2be90:	b	2c09c <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2be94:	b	2c090 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2be98:	b	2c084 <grisu3_diy_fp_encode_double@@Base+0xe98>
   2be9c:	b	2c078 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2bea0:	b	2c06c <grisu3_diy_fp_encode_double@@Base+0xe80>
   2bea4:	b	2c060 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2bea8:	b	2c054 <grisu3_diy_fp_encode_double@@Base+0xe68>
   2beac:	b	2c048 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2beb0:	b	2c03c <grisu3_diy_fp_encode_double@@Base+0xe50>
   2beb4:	b	2c030 <grisu3_diy_fp_encode_double@@Base+0xe44>
   2beb8:	b	2c024 <grisu3_diy_fp_encode_double@@Base+0xe38>
   2bebc:	b	2c018 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   2bec0:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bec4:	b	2c000 <grisu3_diy_fp_encode_double@@Base+0xe14>
   2bec8:	b	2bff4 <grisu3_diy_fp_encode_double@@Base+0xe08>
   2becc:	b	2bfe8 <grisu3_diy_fp_encode_double@@Base+0xdfc>
   2bed0:	b	2bfdc <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2bed4:	b	2bfd0 <grisu3_diy_fp_encode_double@@Base+0xde4>
   2bed8:	b	2bfc4 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2bedc:	b	2bfb8 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2bee0:	b	2bfac <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2bee4:	b	2bfa0 <grisu3_diy_fp_encode_double@@Base+0xdb4>
   2bee8:	b	2bf94 <grisu3_diy_fp_encode_double@@Base+0xda8>
   2beec:	b	2bf88 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   2bef0:	b	2bf7c <grisu3_diy_fp_encode_double@@Base+0xd90>
   2bef4:	b	2bf70 <grisu3_diy_fp_encode_double@@Base+0xd84>
   2bef8:	b	2bf64 <grisu3_diy_fp_encode_double@@Base+0xd78>
   2befc:	b	2bf58 <grisu3_diy_fp_encode_double@@Base+0xd6c>
   2bf00:	b	2bf4c <grisu3_diy_fp_encode_double@@Base+0xd60>
   2bf04:	b	2bf40 <grisu3_diy_fp_encode_double@@Base+0xd54>
   2bf08:	b	2bf34 <grisu3_diy_fp_encode_double@@Base+0xd48>
   2bf0c:	b	2bf28 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   2bf10:	b	2bf1c <grisu3_diy_fp_encode_double@@Base+0xd30>
   2bf14:	b	2ba90 <grisu3_diy_fp_encode_double@@Base+0x8a4>
   2bf18:	b	2c00c <grisu3_diy_fp_encode_double@@Base+0xe20>
   2bf1c:	vldr	d6, [pc, #-676]	; 2bc80 <grisu3_diy_fp_encode_double@@Base+0xa94>
   2bf20:	vmul.f64	d7, d7, d6
   2bf24:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf28:	vldr	d6, [pc, #-680]	; 2bc88 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   2bf2c:	vmul.f64	d7, d7, d6
   2bf30:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf34:	vldr	d6, [pc, #-684]	; 2bc90 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   2bf38:	vmul.f64	d7, d7, d6
   2bf3c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf40:	vldr	d6, [pc, #-688]	; 2bc98 <grisu3_diy_fp_encode_double@@Base+0xaac>
   2bf44:	vmul.f64	d7, d7, d6
   2bf48:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf4c:	vldr	d6, [pc, #-692]	; 2bca0 <grisu3_diy_fp_encode_double@@Base+0xab4>
   2bf50:	vmul.f64	d7, d7, d6
   2bf54:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf58:	vldr	d6, [pc, #-640]	; 2bce0 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   2bf5c:	vmul.f64	d7, d7, d6
   2bf60:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf64:	vldr	d6, [pc, #-660]	; 2bcd8 <grisu3_diy_fp_encode_double@@Base+0xaec>
   2bf68:	vmul.f64	d7, d7, d6
   2bf6c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf70:	vldr	d6, [pc, #-656]	; 2bce8 <grisu3_diy_fp_encode_double@@Base+0xafc>
   2bf74:	vmul.f64	d7, d7, d6
   2bf78:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf7c:	vldr	d6, [pc, #-692]	; 2bcd0 <grisu3_diy_fp_encode_double@@Base+0xae4>
   2bf80:	vmul.f64	d7, d7, d6
   2bf84:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf88:	vldr	d6, [pc, #-672]	; 2bcf0 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2bf8c:	vmul.f64	d7, d7, d6
   2bf90:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bf94:	vldr	d6, [pc, #-724]	; 2bcc8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   2bf98:	vmul.f64	d7, d7, d6
   2bf9c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfa0:	vldr	d6, [pc, #-688]	; 2bcf8 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2bfa4:	vmul.f64	d7, d7, d6
   2bfa8:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfac:	vldr	d6, [pc, #-756]	; 2bcc0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   2bfb0:	vmul.f64	d7, d7, d6
   2bfb4:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfb8:	vldr	d6, [pc, #-704]	; 2bd00 <grisu3_diy_fp_encode_double@@Base+0xb14>
   2bfbc:	vmul.f64	d7, d7, d6
   2bfc0:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfc4:	vldr	d6, [pc, #-788]	; 2bcb8 <grisu3_diy_fp_encode_double@@Base+0xacc>
   2bfc8:	vmul.f64	d7, d7, d6
   2bfcc:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfd0:	vldr	d6, [pc, #-720]	; 2bd08 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2bfd4:	vmul.f64	d7, d7, d6
   2bfd8:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfdc:	vldr	d6, [pc, #-828]	; 2bca8 <grisu3_diy_fp_encode_double@@Base+0xabc>
   2bfe0:	vmul.f64	d7, d7, d6
   2bfe4:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bfe8:	vldr	d6, [pc, #-832]	; 2bcb0 <grisu3_diy_fp_encode_double@@Base+0xac4>
   2bfec:	vmul.f64	d7, d7, d6
   2bff0:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2bff4:	vldr	d6, [pc, #-748]	; 2bd10 <grisu3_diy_fp_encode_double@@Base+0xb24>
   2bff8:	vmul.f64	d7, d7, d6
   2bffc:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c000:	vldr	d6, [pc, #-744]	; 2bd20 <grisu3_diy_fp_encode_double@@Base+0xb34>
   2c004:	vmul.f64	d7, d7, d6
   2c008:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c00c:	vldr	d6, [pc, #-764]	; 2bd18 <grisu3_diy_fp_encode_double@@Base+0xb2c>
   2c010:	vmul.f64	d7, d7, d6
   2c014:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c018:	vldr	d6, [pc, #-768]	; 2bd20 <grisu3_diy_fp_encode_double@@Base+0xb34>
   2c01c:	vdiv.f64	d7, d7, d6
   2c020:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c024:	vldr	d6, [pc, #-796]	; 2bd10 <grisu3_diy_fp_encode_double@@Base+0xb24>
   2c028:	vdiv.f64	d7, d7, d6
   2c02c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c030:	vldr	d6, [pc, #-904]	; 2bcb0 <grisu3_diy_fp_encode_double@@Base+0xac4>
   2c034:	vdiv.f64	d7, d7, d6
   2c038:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c03c:	vldr	d6, [pc, #-924]	; 2bca8 <grisu3_diy_fp_encode_double@@Base+0xabc>
   2c040:	vdiv.f64	d7, d7, d6
   2c044:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c048:	vldr	d6, [pc, #-840]	; 2bd08 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2c04c:	vdiv.f64	d7, d7, d6
   2c050:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c054:	vldr	d6, [pc, #-932]	; 2bcb8 <grisu3_diy_fp_encode_double@@Base+0xacc>
   2c058:	vdiv.f64	d7, d7, d6
   2c05c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c060:	vldr	d6, [pc, #-872]	; 2bd00 <grisu3_diy_fp_encode_double@@Base+0xb14>
   2c064:	vdiv.f64	d7, d7, d6
   2c068:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c06c:	vldr	d6, [pc, #-948]	; 2bcc0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   2c070:	vdiv.f64	d7, d7, d6
   2c074:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c078:	vldr	d6, [pc, #-904]	; 2bcf8 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2c07c:	vdiv.f64	d7, d7, d6
   2c080:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c084:	vldr	d6, [pc, #-964]	; 2bcc8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   2c088:	vdiv.f64	d7, d7, d6
   2c08c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c090:	vldr	d6, [pc, #-936]	; 2bcf0 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2c094:	vdiv.f64	d7, d7, d6
   2c098:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c09c:	vldr	d6, [pc, #-980]	; 2bcd0 <grisu3_diy_fp_encode_double@@Base+0xae4>
   2c0a0:	vdiv.f64	d7, d7, d6
   2c0a4:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0a8:	vldr	d6, [pc, #-968]	; 2bce8 <grisu3_diy_fp_encode_double@@Base+0xafc>
   2c0ac:	vdiv.f64	d7, d7, d6
   2c0b0:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0b4:	vldr	d6, [pc, #-996]	; 2bcd8 <grisu3_diy_fp_encode_double@@Base+0xaec>
   2c0b8:	vdiv.f64	d7, d7, d6
   2c0bc:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0c0:	vldr	d6, [pc, #-1000]	; 2bce0 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   2c0c4:	vdiv.f64	d7, d7, d6
   2c0c8:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0cc:	vldr	d6, [pc, #244]	; 2c1c8 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   2c0d0:	vdiv.f64	d7, d7, d6
   2c0d4:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0d8:	vldr	d6, [pc, #240]	; 2c1d0 <grisu3_diy_fp_encode_double@@Base+0xfe4>
   2c0dc:	vdiv.f64	d7, d7, d6
   2c0e0:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0e4:	vldr	d6, [pc, #236]	; 2c1d8 <grisu3_diy_fp_encode_double@@Base+0xfec>
   2c0e8:	vdiv.f64	d7, d7, d6
   2c0ec:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0f0:	vldr	d6, [pc, #232]	; 2c1e0 <grisu3_diy_fp_encode_double@@Base+0xff4>
   2c0f4:	vdiv.f64	d7, d7, d6
   2c0f8:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c0fc:	vldr	d6, [pc, #228]	; 2c1e8 <grisu3_diy_fp_encode_double@@Base+0xffc>
   2c100:	vdiv.f64	d7, d7, d6
   2c104:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c108:	vldr	d6, [pc, #224]	; 2c1f0 <grisu3_diy_fp_encode_double@@Base+0x1004>
   2c10c:	vdiv.f64	d7, d7, d6
   2c110:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c114:	vldr	d6, [pc, #220]	; 2c1f8 <grisu3_diy_fp_encode_double@@Base+0x100c>
   2c118:	vdiv.f64	d7, d7, d6
   2c11c:	b	2ba98 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   2c120:	add	r2, r6, #2
   2c124:	cmp	ip, r2
   2c128:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c12c:	ldrb	r8, [r6, #2]
   2c130:	mov	fp, #0
   2c134:	b	2bd50 <grisu3_diy_fp_encode_double@@Base+0xb64>
   2c138:	cmp	fp, #0
   2c13c:	bne	2bdbc <grisu3_diy_fp_encode_double@@Base+0xbd0>
   2c140:	b	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c144:	add	r2, r6, #2
   2c148:	cmp	ip, r2
   2c14c:	beq	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c150:	ldrb	r8, [r6, #2]
   2c154:	mov	fp, #1
   2c158:	b	2bd50 <grisu3_diy_fp_encode_double@@Base+0xb64>
   2c15c:	ldr	fp, [sp, #24]
   2c160:	mov	r7, r0
   2c164:	ldr	r0, [sp, #28]
   2c168:	sub	fp, r8, fp
   2c16c:	add	sl, sl, fp
   2c170:	cmp	lr, #0
   2c174:	bne	2bc34 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2c178:	cmp	r9, #52	; 0x34
   2c17c:	movls	r9, #0
   2c180:	movhi	r9, #1
   2c184:	adds	r4, r4, r9
   2c188:	adc	r5, r5, #0
   2c18c:	cmp	ip, r8
   2c190:	movne	lr, #1
   2c194:	bne	2bc34 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2c198:	b	2ba30 <grisu3_diy_fp_encode_double@@Base+0x844>
   2c19c:	mov	r7, lr
   2c1a0:	mov	r6, r3
   2c1a4:	b	2bb40 <grisu3_diy_fp_encode_double@@Base+0x954>
   2c1a8:	mov	r8, fp
   2c1ac:	b	2c170 <grisu3_diy_fp_encode_double@@Base+0xf84>
   2c1b0:	mov	r6, r3
   2c1b4:	b	2be28 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   2c1b8:	mov	r6, r7
   2c1bc:	mov	r7, #0
   2c1c0:	b	2b8f8 <grisu3_diy_fp_encode_double@@Base+0x70c>
   2c1c4:	nop	{0}
   2c1c8:	strbcc	r8, [r0, r0]!
   2c1cc:	movtmi	ip, #4985	; 0x1379
   2c1d0:	ldrbhi	sl, [r8]
   2c1d4:	cmnmi	r6, #1459617792	; 0x57000000
   2c1d8:	strbvs	ip, [lr, -r0, lsl #16]
   2c1dc:			; <UNDEFINED> instruction: 0x43abc16d
   2c1e0:	addsvs	r3, r1, r0, lsl #26
   2c1e4:	mvnmi	r5, #228, 16	; 0xe40000
   2c1e8:			; <UNDEFINED> instruction: 0x064dd592
   2c1ec:	strmi	pc, [r0], #207	; 0xcf
   2c1f0:	ldmvc	r5!, {r6, sl, fp, pc}
   2c1f4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2c1f8:	usatle	lr, #2, r0, asr #30
   2c1fc:	strbmi	r1, [fp], #-2788	; 0xfffff51c

0002c200 <flatcc_json_parser_error_string@@Base>:
   2c200:	cmp	r0, #34	; 0x22
   2c204:	addls	pc, pc, r0, lsl #2
   2c208:	b	2c43c <flatcc_json_parser_error_string@@Base+0x23c>
   2c20c:	b	2c298 <flatcc_json_parser_error_string@@Base+0x98>
   2c210:	b	2c430 <flatcc_json_parser_error_string@@Base+0x230>
   2c214:	b	2c424 <flatcc_json_parser_error_string@@Base+0x224>
   2c218:	b	2c418 <flatcc_json_parser_error_string@@Base+0x218>
   2c21c:	b	2c40c <flatcc_json_parser_error_string@@Base+0x20c>
   2c220:	b	2c400 <flatcc_json_parser_error_string@@Base+0x200>
   2c224:	b	2c3f4 <flatcc_json_parser_error_string@@Base+0x1f4>
   2c228:	b	2c3e8 <flatcc_json_parser_error_string@@Base+0x1e8>
   2c22c:	b	2c3dc <flatcc_json_parser_error_string@@Base+0x1dc>
   2c230:	b	2c3d0 <flatcc_json_parser_error_string@@Base+0x1d0>
   2c234:	b	2c3c4 <flatcc_json_parser_error_string@@Base+0x1c4>
   2c238:	b	2c3b8 <flatcc_json_parser_error_string@@Base+0x1b8>
   2c23c:	b	2c3ac <flatcc_json_parser_error_string@@Base+0x1ac>
   2c240:	b	2c3a0 <flatcc_json_parser_error_string@@Base+0x1a0>
   2c244:	b	2c394 <flatcc_json_parser_error_string@@Base+0x194>
   2c248:	b	2c388 <flatcc_json_parser_error_string@@Base+0x188>
   2c24c:	b	2c37c <flatcc_json_parser_error_string@@Base+0x17c>
   2c250:	b	2c370 <flatcc_json_parser_error_string@@Base+0x170>
   2c254:	b	2c364 <flatcc_json_parser_error_string@@Base+0x164>
   2c258:	b	2c358 <flatcc_json_parser_error_string@@Base+0x158>
   2c25c:	b	2c34c <flatcc_json_parser_error_string@@Base+0x14c>
   2c260:	b	2c340 <flatcc_json_parser_error_string@@Base+0x140>
   2c264:	b	2c334 <flatcc_json_parser_error_string@@Base+0x134>
   2c268:	b	2c328 <flatcc_json_parser_error_string@@Base+0x128>
   2c26c:	b	2c31c <flatcc_json_parser_error_string@@Base+0x11c>
   2c270:	b	2c310 <flatcc_json_parser_error_string@@Base+0x110>
   2c274:	b	2c304 <flatcc_json_parser_error_string@@Base+0x104>
   2c278:	b	2c2f8 <flatcc_json_parser_error_string@@Base+0xf8>
   2c27c:	b	2c2ec <flatcc_json_parser_error_string@@Base+0xec>
   2c280:	b	2c2e0 <flatcc_json_parser_error_string@@Base+0xe0>
   2c284:	b	2c2d4 <flatcc_json_parser_error_string@@Base+0xd4>
   2c288:	b	2c2c8 <flatcc_json_parser_error_string@@Base+0xc8>
   2c28c:	b	2c2bc <flatcc_json_parser_error_string@@Base+0xbc>
   2c290:	b	2c2b0 <flatcc_json_parser_error_string@@Base+0xb0>
   2c294:	b	2c2a4 <flatcc_json_parser_error_string@@Base+0xa4>
   2c298:	ldr	r0, [pc, #424]	; 2c448 <flatcc_json_parser_error_string@@Base+0x248>
   2c29c:	add	r0, pc, r0
   2c2a0:	bx	lr
   2c2a4:	ldr	r0, [pc, #416]	; 2c44c <flatcc_json_parser_error_string@@Base+0x24c>
   2c2a8:	add	r0, pc, r0
   2c2ac:	bx	lr
   2c2b0:	ldr	r0, [pc, #408]	; 2c450 <flatcc_json_parser_error_string@@Base+0x250>
   2c2b4:	add	r0, pc, r0
   2c2b8:	bx	lr
   2c2bc:	ldr	r0, [pc, #400]	; 2c454 <flatcc_json_parser_error_string@@Base+0x254>
   2c2c0:	add	r0, pc, r0
   2c2c4:	bx	lr
   2c2c8:	ldr	r0, [pc, #392]	; 2c458 <flatcc_json_parser_error_string@@Base+0x258>
   2c2cc:	add	r0, pc, r0
   2c2d0:	bx	lr
   2c2d4:	ldr	r0, [pc, #384]	; 2c45c <flatcc_json_parser_error_string@@Base+0x25c>
   2c2d8:	add	r0, pc, r0
   2c2dc:	bx	lr
   2c2e0:	ldr	r0, [pc, #376]	; 2c460 <flatcc_json_parser_error_string@@Base+0x260>
   2c2e4:	add	r0, pc, r0
   2c2e8:	bx	lr
   2c2ec:	ldr	r0, [pc, #368]	; 2c464 <flatcc_json_parser_error_string@@Base+0x264>
   2c2f0:	add	r0, pc, r0
   2c2f4:	bx	lr
   2c2f8:	ldr	r0, [pc, #360]	; 2c468 <flatcc_json_parser_error_string@@Base+0x268>
   2c2fc:	add	r0, pc, r0
   2c300:	bx	lr
   2c304:	ldr	r0, [pc, #352]	; 2c46c <flatcc_json_parser_error_string@@Base+0x26c>
   2c308:	add	r0, pc, r0
   2c30c:	bx	lr
   2c310:	ldr	r0, [pc, #344]	; 2c470 <flatcc_json_parser_error_string@@Base+0x270>
   2c314:	add	r0, pc, r0
   2c318:	bx	lr
   2c31c:	ldr	r0, [pc, #336]	; 2c474 <flatcc_json_parser_error_string@@Base+0x274>
   2c320:	add	r0, pc, r0
   2c324:	bx	lr
   2c328:	ldr	r0, [pc, #328]	; 2c478 <flatcc_json_parser_error_string@@Base+0x278>
   2c32c:	add	r0, pc, r0
   2c330:	bx	lr
   2c334:	ldr	r0, [pc, #320]	; 2c47c <flatcc_json_parser_error_string@@Base+0x27c>
   2c338:	add	r0, pc, r0
   2c33c:	bx	lr
   2c340:	ldr	r0, [pc, #312]	; 2c480 <flatcc_json_parser_error_string@@Base+0x280>
   2c344:	add	r0, pc, r0
   2c348:	bx	lr
   2c34c:	ldr	r0, [pc, #304]	; 2c484 <flatcc_json_parser_error_string@@Base+0x284>
   2c350:	add	r0, pc, r0
   2c354:	bx	lr
   2c358:	ldr	r0, [pc, #296]	; 2c488 <flatcc_json_parser_error_string@@Base+0x288>
   2c35c:	add	r0, pc, r0
   2c360:	bx	lr
   2c364:	ldr	r0, [pc, #288]	; 2c48c <flatcc_json_parser_error_string@@Base+0x28c>
   2c368:	add	r0, pc, r0
   2c36c:	bx	lr
   2c370:	ldr	r0, [pc, #280]	; 2c490 <flatcc_json_parser_error_string@@Base+0x290>
   2c374:	add	r0, pc, r0
   2c378:	bx	lr
   2c37c:	ldr	r0, [pc, #272]	; 2c494 <flatcc_json_parser_error_string@@Base+0x294>
   2c380:	add	r0, pc, r0
   2c384:	bx	lr
   2c388:	ldr	r0, [pc, #264]	; 2c498 <flatcc_json_parser_error_string@@Base+0x298>
   2c38c:	add	r0, pc, r0
   2c390:	bx	lr
   2c394:	ldr	r0, [pc, #256]	; 2c49c <flatcc_json_parser_error_string@@Base+0x29c>
   2c398:	add	r0, pc, r0
   2c39c:	bx	lr
   2c3a0:	ldr	r0, [pc, #248]	; 2c4a0 <flatcc_json_parser_error_string@@Base+0x2a0>
   2c3a4:	add	r0, pc, r0
   2c3a8:	bx	lr
   2c3ac:	ldr	r0, [pc, #240]	; 2c4a4 <flatcc_json_parser_error_string@@Base+0x2a4>
   2c3b0:	add	r0, pc, r0
   2c3b4:	bx	lr
   2c3b8:	ldr	r0, [pc, #232]	; 2c4a8 <flatcc_json_parser_error_string@@Base+0x2a8>
   2c3bc:	add	r0, pc, r0
   2c3c0:	bx	lr
   2c3c4:	ldr	r0, [pc, #224]	; 2c4ac <flatcc_json_parser_error_string@@Base+0x2ac>
   2c3c8:	add	r0, pc, r0
   2c3cc:	bx	lr
   2c3d0:	ldr	r0, [pc, #216]	; 2c4b0 <flatcc_json_parser_error_string@@Base+0x2b0>
   2c3d4:	add	r0, pc, r0
   2c3d8:	bx	lr
   2c3dc:	ldr	r0, [pc, #208]	; 2c4b4 <flatcc_json_parser_error_string@@Base+0x2b4>
   2c3e0:	add	r0, pc, r0
   2c3e4:	bx	lr
   2c3e8:	ldr	r0, [pc, #200]	; 2c4b8 <flatcc_json_parser_error_string@@Base+0x2b8>
   2c3ec:	add	r0, pc, r0
   2c3f0:	bx	lr
   2c3f4:	ldr	r0, [pc, #192]	; 2c4bc <flatcc_json_parser_error_string@@Base+0x2bc>
   2c3f8:	add	r0, pc, r0
   2c3fc:	bx	lr
   2c400:	ldr	r0, [pc, #184]	; 2c4c0 <flatcc_json_parser_error_string@@Base+0x2c0>
   2c404:	add	r0, pc, r0
   2c408:	bx	lr
   2c40c:	ldr	r0, [pc, #176]	; 2c4c4 <flatcc_json_parser_error_string@@Base+0x2c4>
   2c410:	add	r0, pc, r0
   2c414:	bx	lr
   2c418:	ldr	r0, [pc, #168]	; 2c4c8 <flatcc_json_parser_error_string@@Base+0x2c8>
   2c41c:	add	r0, pc, r0
   2c420:	bx	lr
   2c424:	ldr	r0, [pc, #160]	; 2c4cc <flatcc_json_parser_error_string@@Base+0x2cc>
   2c428:	add	r0, pc, r0
   2c42c:	bx	lr
   2c430:	ldr	r0, [pc, #152]	; 2c4d0 <flatcc_json_parser_error_string@@Base+0x2d0>
   2c434:	add	r0, pc, r0
   2c438:	bx	lr
   2c43c:	ldr	r0, [pc, #144]	; 2c4d4 <flatcc_json_parser_error_string@@Base+0x2d4>
   2c440:	add	r0, pc, r0
   2c444:	bx	lr
   2c448:	andeq	r5, r1, ip, lsl #23
   2c44c:	andeq	r5, r1, r0, ror #31
   2c450:	strdeq	r6, [r1], -r4
   2c454:	andeq	r6, r1, ip, asr #23
   2c458:	andeq	r6, r1, r8, lsr #23
   2c45c:	andeq	r6, r1, ip, ror fp
   2c460:	andeq	r5, r1, r8, ror fp
   2c464:	andeq	r6, r1, r8, asr #22
   2c468:	andeq	r6, r1, r0, lsr #22
   2c46c:	strdeq	r6, [r1], -r4
   2c470:	andeq	r6, r1, r8, asr #21
   2c474:	andeq	r6, r1, r8, lsr #21
   2c478:	andeq	r6, r1, r8, ror sl
   2c47c:	andeq	r6, r1, ip, asr sl
   2c480:	andeq	r6, r1, r0, asr #20
   2c484:	andeq	r6, r1, r0, lsr #20
   2c488:	andeq	r6, r1, r4, lsl #20
   2c48c:	andeq	r6, r1, r8, ror #19
   2c490:	andeq	r6, r1, r8, asr #19
   2c494:	andeq	r6, r1, ip, lsr #19
   2c498:	andeq	r6, r1, ip, lsl #19
   2c49c:	andeq	r6, r1, r4, ror #18
   2c4a0:	andeq	r6, r1, r8, asr #18
   2c4a4:	andeq	r6, r1, r8, lsr #18
   2c4a8:	andeq	r6, r1, ip, lsl #18
   2c4ac:	andeq	r6, r1, ip, ror #17
   2c4b0:	andeq	r6, r1, ip, asr #17
   2c4b4:			; <UNDEFINED> instruction: 0x000168b4
   2c4b8:	andeq	r5, r1, r4, ror #27
   2c4bc:	andeq	r6, r1, ip, lsl #17
   2c4c0:	andeq	r6, r1, r8, ror #16
   2c4c4:	andeq	r6, r1, ip, asr #16
   2c4c8:	andeq	r6, r1, r0, lsr r8
   2c4cc:	andeq	r6, r1, r4, lsl r8
   2c4d0:	andeq	r6, r1, r4, lsl #21
   2c4d4:	andeq	r5, r1, r0, ror #19

0002c4d8 <flatcc_json_parser_set_error@@Base>:
   2c4d8:	ldr	ip, [r0, #20]
   2c4dc:	cmp	ip, #0
   2c4e0:	bne	2c4fc <flatcc_json_parser_set_error@@Base+0x24>
   2c4e4:	ldr	ip, [r0, #4]
   2c4e8:	str	r3, [r0, #20]
   2c4ec:	str	r1, [r0, #32]
   2c4f0:	sub	r1, r1, ip
   2c4f4:	add	r1, r1, #1
   2c4f8:	str	r1, [r0, #16]
   2c4fc:	mov	r0, r2
   2c500:	bx	lr

0002c504 <flatcc_json_parser_string_part@@Base>:
   2c504:	cmp	r1, r2
   2c508:	beq	2c5a8 <flatcc_json_parser_string_part@@Base+0xa4>
   2c50c:	ldrb	ip, [r1]
   2c510:	cmp	ip, #34	; 0x22
   2c514:	cmpne	ip, #31
   2c518:	movhi	r3, #1
   2c51c:	movls	r3, #0
   2c520:	cmp	ip, #92	; 0x5c
   2c524:	moveq	r3, #0
   2c528:	andne	r3, r3, #1
   2c52c:	cmp	r3, #0
   2c530:	beq	2c5b4 <flatcc_json_parser_string_part@@Base+0xb0>
   2c534:	add	r3, r1, #1
   2c538:	cmp	r3, r2
   2c53c:	mov	r1, r3
   2c540:	beq	2c5ac <flatcc_json_parser_string_part@@Base+0xa8>
   2c544:	push	{lr}		; (str lr, [sp, #-4]!)
   2c548:	b	2c558 <flatcc_json_parser_string_part@@Base+0x54>
   2c54c:	cmp	r3, r2
   2c550:	mov	r1, r3
   2c554:	beq	2c59c <flatcc_json_parser_string_part@@Base+0x98>
   2c558:	ldrb	ip, [r3], #1
   2c55c:	cmp	ip, #34	; 0x22
   2c560:	cmpne	ip, #31
   2c564:	movhi	lr, #1
   2c568:	movls	lr, #0
   2c56c:	cmp	ip, #92	; 0x5c
   2c570:	moveq	lr, #0
   2c574:	andne	lr, lr, #1
   2c578:	cmp	lr, #0
   2c57c:	bne	2c54c <flatcc_json_parser_string_part@@Base+0x48>
   2c580:	cmp	ip, #31
   2c584:	bls	2c590 <flatcc_json_parser_string_part@@Base+0x8c>
   2c588:	mov	r0, r1
   2c58c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c590:	mov	r3, #17
   2c594:	pop	{lr}		; (ldr lr, [sp], #4)
   2c598:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c59c:	mov	r3, #20
   2c5a0:	pop	{lr}		; (ldr lr, [sp], #4)
   2c5a4:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c5a8:	mov	r1, r2
   2c5ac:	mov	r3, #20
   2c5b0:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c5b4:	cmp	ip, #31
   2c5b8:	bls	2c5c4 <flatcc_json_parser_string_part@@Base+0xc0>
   2c5bc:	mov	r0, r1
   2c5c0:	bx	lr
   2c5c4:	mov	r3, #17
   2c5c8:	b	2c4d8 <flatcc_json_parser_set_error@@Base>

0002c5cc <flatcc_json_parser_space_ext@@Base>:
   2c5cc:	cmp	r1, r2
   2c5d0:	beq	2c600 <flatcc_json_parser_space_ext@@Base+0x34>
   2c5d4:	ldrb	ip, [r1]
   2c5d8:	cmp	ip, #32
   2c5dc:	bne	2c608 <flatcc_json_parser_space_ext@@Base+0x3c>
   2c5e0:	add	r3, r1, #1
   2c5e4:	b	2c5f4 <flatcc_json_parser_space_ext@@Base+0x28>
   2c5e8:	ldrb	ip, [r3], #1
   2c5ec:	cmp	ip, #32
   2c5f0:	bne	2c608 <flatcc_json_parser_space_ext@@Base+0x3c>
   2c5f4:	cmp	r2, r3
   2c5f8:	mov	r1, r3
   2c5fc:	bne	2c5e8 <flatcc_json_parser_space_ext@@Base+0x1c>
   2c600:	mov	r0, r1
   2c604:	bx	lr
   2c608:	cmp	ip, #32
   2c60c:	bhi	2c600 <flatcc_json_parser_space_ext@@Base+0x34>
   2c610:	sub	ip, ip, #9
   2c614:	cmp	ip, #23
   2c618:	addls	pc, pc, ip, lsl #2
   2c61c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c620:	b	2c6d0 <flatcc_json_parser_space_ext@@Base+0x104>
   2c624:	b	2c6c8 <flatcc_json_parser_space_ext@@Base+0xfc>
   2c628:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c62c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c630:	b	2c680 <flatcc_json_parser_space_ext@@Base+0xb4>
   2c634:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c638:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c63c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c640:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c644:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c648:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c64c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c650:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c654:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c658:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c65c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c660:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c664:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c668:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c66c:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c670:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c674:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c678:	b	2c6d8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2c67c:	b	2c5cc <flatcc_json_parser_space_ext@@Base>
   2c680:	sub	r3, r2, r1
   2c684:	add	ip, r1, #1
   2c688:	cmp	r3, #1
   2c68c:	ble	2c69c <flatcc_json_parser_space_ext@@Base+0xd0>
   2c690:	ldrb	r3, [r1, #1]
   2c694:	cmp	r3, #10
   2c698:	addeq	ip, r1, #2
   2c69c:	mov	r1, ip
   2c6a0:	ldr	r3, [r0, #12]
   2c6a4:	str	r1, [r0, #4]
   2c6a8:	add	r3, r3, #1
   2c6ac:	str	r3, [r0, #12]
   2c6b0:	cmp	r2, r1
   2c6b4:	beq	2c600 <flatcc_json_parser_space_ext@@Base+0x34>
   2c6b8:	ldrb	ip, [r1]
   2c6bc:	cmp	ip, #32
   2c6c0:	bls	2c610 <flatcc_json_parser_space_ext@@Base+0x44>
   2c6c4:	b	2c600 <flatcc_json_parser_space_ext@@Base+0x34>
   2c6c8:	add	r1, r1, #1
   2c6cc:	b	2c6a0 <flatcc_json_parser_space_ext@@Base+0xd4>
   2c6d0:	add	r1, r1, #1
   2c6d4:	b	2c6b0 <flatcc_json_parser_space_ext@@Base+0xe4>
   2c6d8:	mov	r3, #5
   2c6dc:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c6e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c6e4:	mov	ip, #0
   2c6e8:	cmp	r1, r2
   2c6ec:	strd	r6, [sp, #8]
   2c6f0:	mov	r6, r2
   2c6f4:	strd	r8, [sp, #16]
   2c6f8:	mov	r9, r0
   2c6fc:	strd	sl, [sp, #24]
   2c700:	str	lr, [sp, #32]
   2c704:	sub	sp, sp, #44	; 0x2c
   2c708:	str	r3, [sp, #12]
   2c70c:	ldr	r3, [sp, #80]	; 0x50
   2c710:	strb	ip, [r3]
   2c714:	beq	2c8b8 <flatcc_json_parser_space_ext@@Base+0x2ec>
   2c718:	ldrb	r3, [r1]
   2c71c:	mov	r4, r1
   2c720:	cmp	r3, #34	; 0x22
   2c724:	addeq	r4, r1, #1
   2c728:	bne	2c858 <flatcc_json_parser_space_ext@@Base+0x28c>
   2c72c:	sub	r3, r6, r4
   2c730:	cmp	r3, #1
   2c734:	ble	2c748 <flatcc_json_parser_space_ext@@Base+0x17c>
   2c738:	ldrb	r3, [r4]
   2c73c:	cmp	r3, #32
   2c740:	bhi	2c75c <flatcc_json_parser_space_ext@@Base+0x190>
   2c744:	beq	2c8a4 <flatcc_json_parser_space_ext@@Base+0x2d8>
   2c748:	mov	r1, r4
   2c74c:	mov	r2, r6
   2c750:	mov	r0, r9
   2c754:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2c758:	mov	r4, r0
   2c75c:	cmp	r6, r4
   2c760:	beq	2c7d0 <flatcc_json_parser_space_ext@@Base+0x204>
   2c764:	mov	r3, #0
   2c768:	add	fp, sp, #24
   2c76c:	add	sl, sp, #28
   2c770:	str	r3, [sp, #16]
   2c774:	add	r3, sp, #32
   2c778:	str	r3, [sp, #20]
   2c77c:	ldr	r8, [sp, #12]
   2c780:	mov	r7, r4
   2c784:	mov	r1, r4
   2c788:	ldr	r4, [sp, #20]
   2c78c:	ldr	r5, [r8]
   2c790:	b	2c7ac <flatcc_json_parser_space_ext@@Base+0x1e0>
   2c794:	cmp	r7, r0
   2c798:	mov	r7, r0
   2c79c:	bne	2c7f0 <flatcc_json_parser_space_ext@@Base+0x224>
   2c7a0:	ldr	r5, [r8, #4]!
   2c7a4:	cmp	r5, #0
   2c7a8:	beq	2c840 <flatcc_json_parser_space_ext@@Base+0x274>
   2c7ac:	mov	r3, fp
   2c7b0:	mov	r2, r6
   2c7b4:	stm	sp, {r4, sl}
   2c7b8:	mov	r0, r9
   2c7bc:	blx	r5
   2c7c0:	cmp	r6, r0
   2c7c4:	mov	r1, r0
   2c7c8:	bne	2c794 <flatcc_json_parser_space_ext@@Base+0x1c8>
   2c7cc:	mov	r4, r0
   2c7d0:	mov	r0, r4
   2c7d4:	add	sp, sp, #44	; 0x2c
   2c7d8:	ldrd	r4, [sp]
   2c7dc:	ldrd	r6, [sp, #8]
   2c7e0:	ldrd	r8, [sp, #16]
   2c7e4:	ldrd	sl, [sp, #24]
   2c7e8:	add	sp, sp, #32
   2c7ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7f0:	ldr	r3, [sp, #24]
   2c7f4:	mov	r4, r0
   2c7f8:	cmp	r3, #0
   2c7fc:	bne	2c868 <flatcc_json_parser_space_ext@@Base+0x29c>
   2c800:	ldrd	r2, [sp, #32]
   2c804:	cmp	r3, #0
   2c808:	cmpeq	r2, #255	; 0xff
   2c80c:	uxtbls	r3, r2
   2c810:	strls	r3, [sp, #16]
   2c814:	bhi	2c88c <flatcc_json_parser_space_ext@@Base+0x2c0>
   2c818:	ldr	r1, [sp, #16]
   2c81c:	ldr	r3, [sp, #80]	; 0x50
   2c820:	ldr	r2, [sp, #28]
   2c824:	ldrb	r3, [r3]
   2c828:	cmp	r2, #0
   2c82c:	ldr	r2, [sp, #80]	; 0x50
   2c830:	add	r3, r1, r3
   2c834:	strb	r3, [r2]
   2c838:	bne	2c77c <flatcc_json_parser_space_ext@@Base+0x1b0>
   2c83c:	b	2c7d0 <flatcc_json_parser_space_ext@@Base+0x204>
   2c840:	mov	r2, r6
   2c844:	mov	r0, r9
   2c848:	mov	r3, #23
   2c84c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c850:	mov	r4, r0
   2c854:	b	2c7d0 <flatcc_json_parser_space_ext@@Base+0x204>
   2c858:	mov	r3, #5
   2c85c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c860:	mov	r4, r0
   2c864:	b	2c72c <flatcc_json_parser_space_ext@@Base+0x160>
   2c868:	mov	r3, #8
   2c86c:	mov	r2, r6
   2c870:	mov	r1, r4
   2c874:	mov	r0, r9
   2c878:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c87c:	cmp	r6, r0
   2c880:	bne	2c818 <flatcc_json_parser_space_ext@@Base+0x24c>
   2c884:	mov	r4, r6
   2c888:	b	2c7d0 <flatcc_json_parser_space_ext@@Base+0x204>
   2c88c:	mov	r3, #7
   2c890:	mov	r2, r6
   2c894:	mov	r1, r4
   2c898:	mov	r0, r9
   2c89c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c8a0:	b	2c87c <flatcc_json_parser_space_ext@@Base+0x2b0>
   2c8a4:	ldrb	r3, [r4, #1]
   2c8a8:	cmp	r3, #32
   2c8ac:	addhi	r4, r4, #1
   2c8b0:	bls	2c748 <flatcc_json_parser_space_ext@@Base+0x17c>
   2c8b4:	b	2c75c <flatcc_json_parser_space_ext@@Base+0x190>
   2c8b8:	mov	r4, r2
   2c8bc:	b	2c748 <flatcc_json_parser_space_ext@@Base+0x17c>
   2c8c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c8c4:	mov	ip, #0
   2c8c8:	mov	r4, r1
   2c8cc:	strd	r6, [sp, #8]
   2c8d0:	mov	r6, r0
   2c8d4:	mov	r5, r2
   2c8d8:	strd	r8, [sp, #16]
   2c8dc:	mov	r9, r3
   2c8e0:	strd	sl, [sp, #24]
   2c8e4:	str	lr, [sp, #32]
   2c8e8:	sub	sp, sp, #28
   2c8ec:	ldrh	r0, [sp, #68]	; 0x44
   2c8f0:	ldr	r8, [sp, #64]	; 0x40
   2c8f4:	str	r0, [sp, #12]
   2c8f8:	ldr	r0, [r6]
   2c8fc:	str	ip, [sp, #20]
   2c900:	bl	26b40 <flatcc_builder_start_offset_vector@@Base>
   2c904:	cmp	r0, #0
   2c908:	beq	2c944 <flatcc_json_parser_space_ext@@Base+0x378>
   2c90c:	mov	r1, r4
   2c910:	mov	r2, r5
   2c914:	mov	r0, r6
   2c918:	mov	r3, #33	; 0x21
   2c91c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c920:	mov	r4, r0
   2c924:	mov	r0, r4
   2c928:	add	sp, sp, #28
   2c92c:	ldrd	r4, [sp]
   2c930:	ldrd	r6, [sp, #8]
   2c934:	ldrd	r8, [sp, #16]
   2c938:	ldrd	sl, [sp, #24]
   2c93c:	add	sp, sp, #32
   2c940:	pop	{pc}		; (ldr pc, [sp], #4)
   2c944:	cmp	r4, r5
   2c948:	beq	2c958 <flatcc_json_parser_space_ext@@Base+0x38c>
   2c94c:	ldrb	r3, [r4]
   2c950:	cmp	r3, #91	; 0x5b
   2c954:	beq	2c9dc <flatcc_json_parser_space_ext@@Base+0x410>
   2c958:	mov	r1, r4
   2c95c:	mov	r3, #22
   2c960:	mov	r2, r5
   2c964:	mov	r0, r6
   2c968:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c96c:	mov	r4, r0
   2c970:	mov	r7, #0
   2c974:	cmp	r8, r7
   2c978:	beq	2c998 <flatcc_json_parser_space_ext@@Base+0x3cc>
   2c97c:	mov	r1, r4
   2c980:	mov	r2, r5
   2c984:	mov	r0, r6
   2c988:	mov	r3, #30
   2c98c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2c990:	mov	r4, r0
   2c994:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x358>
   2c998:	mov	r1, r9
   2c99c:	ldr	r0, [r6]
   2c9a0:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2c9a4:	mov	r1, r0
   2c9a8:	ldr	r0, [r6]
   2c9ac:	bl	27d24 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2c9b0:	cmp	r0, #0
   2c9b4:	str	r0, [sp, #20]
   2c9b8:	beq	2c90c <flatcc_json_parser_space_ext@@Base+0x340>
   2c9bc:	ldr	r0, [r6]
   2c9c0:	ldr	r1, [sp, #12]
   2c9c4:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   2c9c8:	cmp	r0, #0
   2c9cc:	beq	2c90c <flatcc_json_parser_space_ext@@Base+0x340>
   2c9d0:	ldr	r3, [sp, #20]
   2c9d4:	str	r3, [r0]
   2c9d8:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x358>
   2c9dc:	add	sl, r4, #1
   2c9e0:	sub	r3, r5, sl
   2c9e4:	cmp	r3, #1
   2c9e8:	ble	2c9fc <flatcc_json_parser_space_ext@@Base+0x430>
   2c9ec:	ldrb	r3, [r4, #1]
   2c9f0:	cmp	r3, #32
   2c9f4:	bhi	2ca10 <flatcc_json_parser_space_ext@@Base+0x444>
   2c9f8:	beq	2cc20 <flatcc_json_parser_space_ext@@Base+0x654>
   2c9fc:	mov	r1, sl
   2ca00:	mov	r2, r5
   2ca04:	mov	r0, r6
   2ca08:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2ca0c:	mov	sl, r0
   2ca10:	cmp	r5, sl
   2ca14:	beq	2ca24 <flatcc_json_parser_space_ext@@Base+0x458>
   2ca18:	ldrb	r3, [sl]
   2ca1c:	cmp	r3, #93	; 0x5d
   2ca20:	beq	2cc48 <flatcc_json_parser_space_ext@@Base+0x67c>
   2ca24:	cmp	r8, #0
   2ca28:	beq	2cb98 <flatcc_json_parser_space_ext@@Base+0x5cc>
   2ca2c:	mov	r7, #0
   2ca30:	add	fp, sp, #20
   2ca34:	mov	r1, r9
   2ca38:	ldr	r0, [r6]
   2ca3c:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2ca40:	ldrb	r3, [r0, r7]
   2ca44:	mov	r1, sl
   2ca48:	mov	r2, r5
   2ca4c:	mov	r0, r6
   2ca50:	str	fp, [sp]
   2ca54:	ldr	ip, [sp, #72]	; 0x48
   2ca58:	blx	ip
   2ca5c:	cmp	r5, r0
   2ca60:	mov	r4, r0
   2ca64:	beq	2c924 <flatcc_json_parser_space_ext@@Base+0x358>
   2ca68:	mov	r1, #1
   2ca6c:	ldr	r0, [r6]
   2ca70:	bl	26404 <flatcc_builder_extend_offset_vector@@Base>
   2ca74:	cmp	r0, #0
   2ca78:	beq	2c90c <flatcc_json_parser_space_ext@@Base+0x340>
   2ca7c:	ldr	r3, [sp, #20]
   2ca80:	sub	r2, r5, r4
   2ca84:	cmp	r2, #1
   2ca88:	str	r3, [r0]
   2ca8c:	ble	2caa0 <flatcc_json_parser_space_ext@@Base+0x4d4>
   2ca90:	ldrb	r3, [r4]
   2ca94:	cmp	r3, #32
   2ca98:	bhi	2cac0 <flatcc_json_parser_space_ext@@Base+0x4f4>
   2ca9c:	beq	2cb30 <flatcc_json_parser_space_ext@@Base+0x564>
   2caa0:	mov	r1, r4
   2caa4:	mov	r2, r5
   2caa8:	mov	r0, r6
   2caac:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2cab0:	mov	r4, r0
   2cab4:	cmp	r5, r4
   2cab8:	beq	2cb28 <flatcc_json_parser_space_ext@@Base+0x55c>
   2cabc:	ldrb	r3, [r4]
   2cac0:	cmp	r3, #44	; 0x2c
   2cac4:	beq	2cb44 <flatcc_json_parser_space_ext@@Base+0x578>
   2cac8:	cmp	r3, #93	; 0x5d
   2cacc:	add	r7, r7, #1
   2cad0:	beq	2caf0 <flatcc_json_parser_space_ext@@Base+0x524>
   2cad4:	mov	r1, r4
   2cad8:	mov	r3, #9
   2cadc:	mov	r2, r5
   2cae0:	mov	r0, r6
   2cae4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2cae8:	mov	r4, r0
   2caec:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2caf0:	add	r1, r4, #1
   2caf4:	sub	r3, r5, r1
   2caf8:	cmp	r3, #1
   2cafc:	ble	2cb14 <flatcc_json_parser_space_ext@@Base+0x548>
   2cb00:	ldrb	r3, [r4, #1]
   2cb04:	cmp	r3, #32
   2cb08:	movhi	r4, r1
   2cb0c:	bhi	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cb10:	beq	2cbb4 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2cb14:	mov	r2, r5
   2cb18:	mov	r0, r6
   2cb1c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2cb20:	mov	r4, r0
   2cb24:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cb28:	add	r7, r7, #1
   2cb2c:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cb30:	ldrb	r3, [r4, #1]
   2cb34:	cmp	r3, #32
   2cb38:	addhi	r4, r4, #1
   2cb3c:	bls	2caa0 <flatcc_json_parser_space_ext@@Base+0x4d4>
   2cb40:	b	2cab4 <flatcc_json_parser_space_ext@@Base+0x4e8>
   2cb44:	add	sl, r4, #1
   2cb48:	sub	r3, r5, sl
   2cb4c:	cmp	r3, #1
   2cb50:	ble	2cb64 <flatcc_json_parser_space_ext@@Base+0x598>
   2cb54:	ldrb	r3, [r4, #1]
   2cb58:	cmp	r3, #32
   2cb5c:	bhi	2cb78 <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cb60:	beq	2cbc8 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cb64:	mov	r1, sl
   2cb68:	mov	r2, r5
   2cb6c:	mov	r0, r6
   2cb70:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2cb74:	mov	sl, r0
   2cb78:	cmp	r5, sl
   2cb7c:	add	r7, r7, #1
   2cb80:	beq	2cc04 <flatcc_json_parser_space_ext@@Base+0x638>
   2cb84:	ldrb	r3, [sl]
   2cb88:	cmp	r3, #93	; 0x5d
   2cb8c:	beq	2cbdc <flatcc_json_parser_space_ext@@Base+0x610>
   2cb90:	cmp	r8, r7
   2cb94:	bne	2ca34 <flatcc_json_parser_space_ext@@Base+0x468>
   2cb98:	mov	r2, r5
   2cb9c:	mov	r1, sl
   2cba0:	mov	r0, r6
   2cba4:	mov	r3, #30
   2cba8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2cbac:	mov	r4, r0
   2cbb0:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x358>
   2cbb4:	ldrb	r3, [r4, #2]
   2cbb8:	cmp	r3, #32
   2cbbc:	addhi	r4, r4, #2
   2cbc0:	bls	2cb14 <flatcc_json_parser_space_ext@@Base+0x548>
   2cbc4:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cbc8:	ldrb	r3, [r4, #2]
   2cbcc:	cmp	r3, #32
   2cbd0:	addhi	sl, r4, #2
   2cbd4:	bls	2cb64 <flatcc_json_parser_space_ext@@Base+0x598>
   2cbd8:	b	2cb78 <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cbdc:	add	r4, sl, #1
   2cbe0:	sub	r3, r5, r4
   2cbe4:	cmp	r3, #1
   2cbe8:	ble	2cbfc <flatcc_json_parser_space_ext@@Base+0x630>
   2cbec:	ldrb	r3, [sl, #1]
   2cbf0:	cmp	r3, #32
   2cbf4:	bhi	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cbf8:	beq	2cc34 <flatcc_json_parser_space_ext@@Base+0x668>
   2cbfc:	mov	r1, r4
   2cc00:	b	2cb14 <flatcc_json_parser_space_ext@@Base+0x548>
   2cc04:	mov	r3, #9
   2cc08:	mov	r2, r5
   2cc0c:	mov	r1, r5
   2cc10:	mov	r0, r6
   2cc14:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2cc18:	mov	r4, r0
   2cc1c:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cc20:	ldrb	r3, [r4, #2]
   2cc24:	cmp	r3, #32
   2cc28:	addhi	sl, r4, #2
   2cc2c:	bls	2c9fc <flatcc_json_parser_space_ext@@Base+0x430>
   2cc30:	b	2ca10 <flatcc_json_parser_space_ext@@Base+0x444>
   2cc34:	ldrb	r3, [sl, #2]
   2cc38:	cmp	r3, #32
   2cc3c:	addhi	r4, sl, #2
   2cc40:	bls	2cbfc <flatcc_json_parser_space_ext@@Base+0x630>
   2cc44:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cc48:	add	r4, sl, #1
   2cc4c:	sub	r3, r5, r4
   2cc50:	cmp	r3, #1
   2cc54:	ble	2cc6c <flatcc_json_parser_space_ext@@Base+0x6a0>
   2cc58:	ldrb	r3, [sl, #1]
   2cc5c:	cmp	r3, #32
   2cc60:	movhi	r7, #0
   2cc64:	bhi	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cc68:	beq	2cc88 <flatcc_json_parser_space_ext@@Base+0x6bc>
   2cc6c:	mov	r1, r4
   2cc70:	mov	r2, r5
   2cc74:	mov	r0, r6
   2cc78:	mov	r7, #0
   2cc7c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2cc80:	mov	r4, r0
   2cc84:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>
   2cc88:	ldrb	r3, [sl, #2]
   2cc8c:	cmp	r3, #32
   2cc90:	addhi	r4, sl, #2
   2cc94:	movhi	r7, #0
   2cc98:	bls	2cc6c <flatcc_json_parser_space_ext@@Base+0x6a0>
   2cc9c:	b	2c974 <flatcc_json_parser_space_ext@@Base+0x3a8>

0002cca0 <flatcc_json_parser_string_escape@@Base>:
   2cca0:	strd	r4, [sp, #-12]!
   2cca4:	str	lr, [sp, #8]
   2cca8:	sub	lr, r2, r1
   2ccac:	cmp	lr, #1
   2ccb0:	ble	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ccb4:	ldrb	ip, [r1]
   2ccb8:	cmp	ip, #92	; 0x5c
   2ccbc:	beq	2ccdc <flatcc_json_parser_string_escape@@Base+0x3c>
   2ccc0:	mov	ip, #0
   2ccc4:	strb	ip, [r3]
   2ccc8:	mov	r3, #18
   2cccc:	ldrd	r4, [sp]
   2ccd0:	ldr	lr, [sp, #8]
   2ccd4:	add	sp, sp, #12
   2ccd8:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2ccdc:	ldrb	ip, [r1, #1]
   2cce0:	sub	ip, ip, #34	; 0x22
   2cce4:	cmp	ip, #86	; 0x56
   2cce8:	addls	pc, pc, ip, lsl #2
   2ccec:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ccf0:	b	2cedc <flatcc_json_parser_string_escape@@Base+0x23c>
   2ccf4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ccf8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ccfc:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd00:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd04:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd08:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd0c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd10:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd14:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd18:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd1c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd20:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd24:	b	2cef4 <flatcc_json_parser_string_escape@@Base+0x254>
   2cd28:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd2c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd30:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd34:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd38:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd3c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd40:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd44:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd48:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd4c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd50:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd54:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd58:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd5c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd60:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd64:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd68:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd6c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd70:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd74:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd78:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd7c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd80:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd84:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd88:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd8c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd90:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd94:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd98:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cd9c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cda0:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cda4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cda8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdac:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdb0:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdb4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdb8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdbc:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdc0:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdc4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdc8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdcc:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdd0:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdd4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdd8:	b	2cf0c <flatcc_json_parser_string_escape@@Base+0x26c>
   2cddc:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cde0:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cde4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cde8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdec:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdf0:	b	2cf24 <flatcc_json_parser_string_escape@@Base+0x284>
   2cdf4:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdf8:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cdfc:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce00:	b	2cf3c <flatcc_json_parser_string_escape@@Base+0x29c>
   2ce04:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce08:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce0c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce10:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce14:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce18:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce1c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce20:	b	2cf54 <flatcc_json_parser_string_escape@@Base+0x2b4>
   2ce24:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce28:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce2c:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce30:	b	2cf6c <flatcc_json_parser_string_escape@@Base+0x2cc>
   2ce34:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce38:	b	2cf84 <flatcc_json_parser_string_escape@@Base+0x2e4>
   2ce3c:	b	2cf9c <flatcc_json_parser_string_escape@@Base+0x2fc>
   2ce40:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce44:	b	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce48:	b	2ce4c <flatcc_json_parser_string_escape@@Base+0x1ac>
   2ce4c:	mov	ip, #1
   2ce50:	cmp	lr, #3
   2ce54:	strb	ip, [r3]
   2ce58:	ble	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce5c:	ldrb	ip, [r1, #2]
   2ce60:	sub	lr, ip, #48	; 0x30
   2ce64:	uxtb	r4, lr
   2ce68:	cmp	r4, #9
   2ce6c:	lslls	ip, lr, #4
   2ce70:	uxtbls	ip, ip
   2ce74:	bls	2ce94 <flatcc_json_parser_string_escape@@Base+0x1f4>
   2ce78:	orr	ip, ip, #32
   2ce7c:	sub	lr, ip, #97	; 0x61
   2ce80:	cmp	lr, #5
   2ce84:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2ce88:	sub	ip, ip, #87	; 0x57
   2ce8c:	lsl	ip, ip, #4
   2ce90:	uxtb	ip, ip
   2ce94:	ldrb	lr, [r1, #3]
   2ce98:	sub	r4, lr, #48	; 0x30
   2ce9c:	uxtb	r4, r4
   2cea0:	cmp	r4, #9
   2cea4:	orrls	ip, r4, ip
   2cea8:	bls	2cec8 <flatcc_json_parser_string_escape@@Base+0x228>
   2ceac:	orr	lr, lr, #32
   2ceb0:	sub	r4, lr, #97	; 0x61
   2ceb4:	cmp	r4, #5
   2ceb8:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cebc:	sub	lr, lr, #87	; 0x57
   2cec0:	orr	ip, lr, ip
   2cec4:	uxtb	ip, ip
   2cec8:	add	r0, r1, #4
   2cecc:	strb	ip, [r3, #1]
   2ced0:	ldrd	r4, [sp]
   2ced4:	add	sp, sp, #8
   2ced8:	pop	{pc}		; (ldr pc, [sp], #4)
   2cedc:	mov	ip, #1
   2cee0:	mov	r2, #34	; 0x22
   2cee4:	add	r0, r1, #2
   2cee8:	strb	ip, [r3]
   2ceec:	strb	r2, [r3, #1]
   2cef0:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cef4:	mov	ip, #1
   2cef8:	mov	r2, #47	; 0x2f
   2cefc:	add	r0, r1, #2
   2cf00:	strb	ip, [r3]
   2cf04:	strb	r2, [r3, #1]
   2cf08:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf0c:	mov	ip, #1
   2cf10:	mov	r2, #92	; 0x5c
   2cf14:	add	r0, r1, #2
   2cf18:	strb	ip, [r3]
   2cf1c:	strb	r2, [r3, #1]
   2cf20:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf24:	mov	ip, #1
   2cf28:	mov	r2, #8
   2cf2c:	add	r0, r1, #2
   2cf30:	strb	ip, [r3]
   2cf34:	strb	r2, [r3, #1]
   2cf38:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf3c:	mov	ip, #1
   2cf40:	mov	r2, #12
   2cf44:	add	r0, r1, #2
   2cf48:	strb	ip, [r3]
   2cf4c:	strb	r2, [r3, #1]
   2cf50:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf54:	mov	ip, #1
   2cf58:	mov	r2, #10
   2cf5c:	add	r0, r1, #2
   2cf60:	strb	ip, [r3]
   2cf64:	strb	r2, [r3, #1]
   2cf68:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf6c:	mov	ip, #1
   2cf70:	mov	r2, #13
   2cf74:	add	r0, r1, #2
   2cf78:	strb	ip, [r3]
   2cf7c:	strb	r2, [r3, #1]
   2cf80:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf84:	mov	ip, #1
   2cf88:	mov	r2, #9
   2cf8c:	add	r0, r1, #2
   2cf90:	strb	ip, [r3]
   2cf94:	strb	r2, [r3, #1]
   2cf98:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2cf9c:	cmp	lr, #5
   2cfa0:	ble	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cfa4:	ldrb	ip, [r1, #2]
   2cfa8:	sub	lr, ip, #48	; 0x30
   2cfac:	uxtb	r4, lr
   2cfb0:	cmp	r4, #9
   2cfb4:	lslls	ip, lr, #12
   2cfb8:	uxthls	ip, ip
   2cfbc:	bls	2cfdc <flatcc_json_parser_string_escape@@Base+0x33c>
   2cfc0:	orr	ip, ip, #32
   2cfc4:	sub	lr, ip, #97	; 0x61
   2cfc8:	cmp	lr, #5
   2cfcc:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2cfd0:	sub	ip, ip, #87	; 0x57
   2cfd4:	lsl	ip, ip, #12
   2cfd8:	and	ip, ip, #61440	; 0xf000
   2cfdc:	ldrb	lr, [r1, #3]
   2cfe0:	sub	r4, lr, #48	; 0x30
   2cfe4:	uxtb	r5, r4
   2cfe8:	cmp	r5, #9
   2cfec:	bhi	2d070 <flatcc_json_parser_string_escape@@Base+0x3d0>
   2cff0:	uxth	r4, r4
   2cff4:	orr	ip, ip, r4, lsl #8
   2cff8:	and	ip, ip, #65280	; 0xff00
   2cffc:	ldrb	lr, [r1, #4]
   2d000:	sub	r4, lr, #48	; 0x30
   2d004:	uxtb	r5, r4
   2d008:	cmp	r5, #9
   2d00c:	bhi	2d094 <flatcc_json_parser_string_escape@@Base+0x3f4>
   2d010:	uxth	r4, r4
   2d014:	orr	ip, ip, r4, lsl #4
   2d018:	uxth	ip, ip
   2d01c:	ldrb	lr, [r1, #5]
   2d020:	sub	r4, lr, #48	; 0x30
   2d024:	uxtb	r5, r4
   2d028:	cmp	r5, #9
   2d02c:	orrls	r2, ip, r4
   2d030:	uxthls	r2, r2
   2d034:	bls	2d054 <flatcc_json_parser_string_escape@@Base+0x3b4>
   2d038:	orr	lr, lr, #32
   2d03c:	sub	r4, lr, #97	; 0x61
   2d040:	cmp	r4, #5
   2d044:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2d048:	sub	r2, lr, #87	; 0x57
   2d04c:	orr	r2, ip, r2
   2d050:	uxth	r2, r2
   2d054:	cmp	r2, #127	; 0x7f
   2d058:	bhi	2d0b8 <flatcc_json_parser_string_escape@@Base+0x418>
   2d05c:	mov	r0, #1
   2d060:	strb	r0, [r3]
   2d064:	strb	r2, [r3, #1]
   2d068:	add	r0, r1, #6
   2d06c:	b	2ced0 <flatcc_json_parser_string_escape@@Base+0x230>
   2d070:	orr	lr, lr, #32
   2d074:	sub	r4, lr, #97	; 0x61
   2d078:	cmp	r4, #5
   2d07c:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2d080:	sub	lr, lr, #87	; 0x57
   2d084:	uxth	lr, lr
   2d088:	orr	ip, ip, lr, lsl #8
   2d08c:	and	ip, ip, #65280	; 0xff00
   2d090:	b	2cffc <flatcc_json_parser_string_escape@@Base+0x35c>
   2d094:	orr	lr, lr, #32
   2d098:	sub	r4, lr, #97	; 0x61
   2d09c:	cmp	r4, #5
   2d0a0:	bhi	2ccc0 <flatcc_json_parser_string_escape@@Base+0x20>
   2d0a4:	sub	lr, lr, #87	; 0x57
   2d0a8:	uxth	lr, lr
   2d0ac:	orr	ip, ip, lr, lsl #4
   2d0b0:	uxth	ip, ip
   2d0b4:	b	2d01c <flatcc_json_parser_string_escape@@Base+0x37c>
   2d0b8:	and	r0, r2, #63	; 0x3f
   2d0bc:	cmp	r2, #2048	; 0x800
   2d0c0:	lsr	ip, r2, #6
   2d0c4:	orr	r0, r0, #128	; 0x80
   2d0c8:	mvn	lr, #127	; 0x7f
   2d0cc:	bcs	2d0ec <flatcc_json_parser_string_escape@@Base+0x44c>
   2d0d0:	mvn	ip, ip, lsl #26
   2d0d4:	mov	r2, #2
   2d0d8:	mvn	ip, ip, lsr #26
   2d0dc:	strb	r2, [r3]
   2d0e0:	strb	r0, [r3, #2]
   2d0e4:	strb	ip, [r3, #1]
   2d0e8:	b	2d068 <flatcc_json_parser_string_escape@@Base+0x3c8>
   2d0ec:	mvn	r4, #31
   2d0f0:	and	ip, ip, #63	; 0x3f
   2d0f4:	strb	r0, [r3, #3]
   2d0f8:	orr	r2, r4, r2, lsr #12
   2d0fc:	orr	ip, lr, ip
   2d100:	mov	r0, #3
   2d104:	strb	r0, [r3]
   2d108:	strb	r2, [r3, #1]
   2d10c:	strb	ip, [r3, #2]
   2d110:	b	2d068 <flatcc_json_parser_string_escape@@Base+0x3c8>

0002d114 <flatcc_json_parser_skip_constant@@Base>:
   2d114:	cmp	r1, r2
   2d118:	strd	r4, [sp, #-16]!
   2d11c:	mov	r4, r1
   2d120:	str	r6, [sp, #8]
   2d124:	str	lr, [sp, #12]
   2d128:	beq	2d1b8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2d12c:	mov	r5, r2
   2d130:	mov	r6, r0
   2d134:	b	2d194 <flatcc_json_parser_skip_constant@@Base+0x80>
   2d138:	sub	r2, r3, #48	; 0x30
   2d13c:	cmp	r3, #46	; 0x2e
   2d140:	cmpne	r2, #9
   2d144:	bls	2d1ac <flatcc_json_parser_skip_constant@@Base+0x98>
   2d148:	orr	r2, r3, #32
   2d14c:	sub	r2, r2, #97	; 0x61
   2d150:	cmp	r2, #25
   2d154:	bls	2d1ac <flatcc_json_parser_skip_constant@@Base+0x98>
   2d158:	sub	r2, r5, r4
   2d15c:	cmp	r2, #1
   2d160:	ble	2d170 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2d164:	cmp	r3, #32
   2d168:	bhi	2d1b8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2d16c:	beq	2d1cc <flatcc_json_parser_skip_constant@@Base+0xb8>
   2d170:	mov	r2, r5
   2d174:	mov	r1, r4
   2d178:	mov	r0, r6
   2d17c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2d180:	cmp	r0, r4
   2d184:	beq	2d1b8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2d188:	mov	r4, r0
   2d18c:	cmp	r5, r4
   2d190:	beq	2d1b8 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2d194:	ldrb	r3, [r4]
   2d198:	sub	r2, r3, #95	; 0x5f
   2d19c:	clz	r2, r2
   2d1a0:	lsr	r2, r2, #5
   2d1a4:	orrs	r2, r2, r3, lsr #7
   2d1a8:	beq	2d138 <flatcc_json_parser_skip_constant@@Base+0x24>
   2d1ac:	add	r4, r4, #1
   2d1b0:	cmp	r5, r4
   2d1b4:	bne	2d194 <flatcc_json_parser_skip_constant@@Base+0x80>
   2d1b8:	mov	r0, r4
   2d1bc:	ldrd	r4, [sp]
   2d1c0:	ldr	r6, [sp, #8]
   2d1c4:	add	sp, sp, #12
   2d1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1cc:	ldrb	r3, [r4, #1]
   2d1d0:	cmp	r3, #32
   2d1d4:	addhi	r0, r4, #1
   2d1d8:	bls	2d170 <flatcc_json_parser_skip_constant@@Base+0x5c>
   2d1dc:	b	2d180 <flatcc_json_parser_skip_constant@@Base+0x6c>

0002d1e0 <flatcc_json_parser_match_constant@@Base>:
   2d1e0:	strd	r4, [sp, #-16]!
   2d1e4:	str	r6, [sp, #8]
   2d1e8:	str	lr, [sp, #12]
   2d1ec:	sub	lr, r2, r1
   2d1f0:	cmp	lr, r3
   2d1f4:	ldr	r4, [sp, #16]
   2d1f8:	ble	2d244 <flatcc_json_parser_match_constant@@Base+0x64>
   2d1fc:	ldrb	lr, [r1, r3]
   2d200:	mov	r5, r0
   2d204:	add	r3, r1, r3
   2d208:	cmp	lr, #32
   2d20c:	beq	2d264 <flatcc_json_parser_match_constant@@Base+0x84>
   2d210:	cmp	lr, #34	; 0x22
   2d214:	beq	2d2c0 <flatcc_json_parser_match_constant@@Base+0xe0>
   2d218:	cmp	lr, #92	; 0x5c
   2d21c:	bne	2d244 <flatcc_json_parser_match_constant@@Base+0x64>
   2d220:	mov	ip, #0
   2d224:	mov	r1, r3
   2d228:	ldr	r6, [sp, #8]
   2d22c:	mov	r3, #18
   2d230:	ldr	lr, [sp, #12]
   2d234:	str	ip, [r4]
   2d238:	ldrd	r4, [sp]
   2d23c:	add	sp, sp, #16
   2d240:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2d244:	mov	r2, #0
   2d248:	mov	r3, r1
   2d24c:	str	r2, [r4]
   2d250:	ldrd	r4, [sp]
   2d254:	mov	r0, r3
   2d258:	ldr	r6, [sp, #8]
   2d25c:	add	sp, sp, #12
   2d260:	pop	{pc}		; (ldr pc, [sp], #4)
   2d264:	mov	ip, r2
   2d268:	add	r2, r3, #1
   2d26c:	cmp	ip, r2
   2d270:	beq	2d310 <flatcc_json_parser_match_constant@@Base+0x130>
   2d274:	ldrb	r1, [r3, #1]
   2d278:	cmp	r1, #32
   2d27c:	bne	2d2ac <flatcc_json_parser_match_constant@@Base+0xcc>
   2d280:	add	r2, r3, #2
   2d284:	b	2d294 <flatcc_json_parser_match_constant@@Base+0xb4>
   2d288:	ldrb	r1, [r2], #1
   2d28c:	cmp	r1, #32
   2d290:	bne	2d2b0 <flatcc_json_parser_match_constant@@Base+0xd0>
   2d294:	cmp	r2, ip
   2d298:	mov	r3, r2
   2d29c:	bne	2d288 <flatcc_json_parser_match_constant@@Base+0xa8>
   2d2a0:	mov	r2, #0
   2d2a4:	str	r2, [r4]
   2d2a8:	b	2d250 <flatcc_json_parser_match_constant@@Base+0x70>
   2d2ac:	mov	r3, r2
   2d2b0:	cmp	r1, #34	; 0x22
   2d2b4:	movne	r2, #1
   2d2b8:	strne	r2, [r4]
   2d2bc:	bne	2d250 <flatcc_json_parser_match_constant@@Base+0x70>
   2d2c0:	add	r1, r3, #1
   2d2c4:	cmn	r1, #1
   2d2c8:	bge	2d2e0 <flatcc_json_parser_match_constant@@Base+0x100>
   2d2cc:	ldrb	r2, [r3, #1]
   2d2d0:	cmp	r2, #32
   2d2d4:	movhi	r3, r1
   2d2d8:	bhi	2d2a0 <flatcc_json_parser_match_constant@@Base+0xc0>
   2d2dc:	beq	2d2fc <flatcc_json_parser_match_constant@@Base+0x11c>
   2d2e0:	mov	r2, #0
   2d2e4:	mov	r0, r5
   2d2e8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2d2ec:	mov	r2, #0
   2d2f0:	mov	r3, r0
   2d2f4:	str	r2, [r4]
   2d2f8:	b	2d250 <flatcc_json_parser_match_constant@@Base+0x70>
   2d2fc:	ldrb	r2, [r3, #2]
   2d300:	cmp	r2, #32
   2d304:	addhi	r3, r3, #2
   2d308:	bls	2d2e0 <flatcc_json_parser_match_constant@@Base+0x100>
   2d30c:	b	2d2a0 <flatcc_json_parser_match_constant@@Base+0xc0>
   2d310:	mov	r3, ip
   2d314:	b	2d2a0 <flatcc_json_parser_match_constant@@Base+0xc0>

0002d318 <flatcc_json_parser_double@@Base>:
   2d318:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d31c:	mov	r4, #0
   2d320:	mov	r5, #0
   2d324:	cmp	r1, r2
   2d328:	strd	r6, [sp, #8]
   2d32c:	str	r8, [sp, #16]
   2d330:	str	lr, [sp, #20]
   2d334:	strd	r4, [r3]
   2d338:	beq	2d3e0 <flatcc_json_parser_double@@Base+0xc8>
   2d33c:	ldrb	ip, [r1]
   2d340:	cmp	ip, #45	; 0x2d
   2d344:	addeq	ip, r1, #1
   2d348:	movne	ip, r1
   2d34c:	sub	lr, r2, ip
   2d350:	cmp	lr, #1
   2d354:	ble	2d36c <flatcc_json_parser_double@@Base+0x54>
   2d358:	ldrb	lr, [ip]
   2d35c:	cmp	lr, #46	; 0x2e
   2d360:	beq	2d3c4 <flatcc_json_parser_double@@Base+0xac>
   2d364:	cmp	lr, #48	; 0x30
   2d368:	beq	2d3f8 <flatcc_json_parser_double@@Base+0xe0>
   2d36c:	mov	r6, r1
   2d370:	mov	r4, r2
   2d374:	sub	r1, r4, r1
   2d378:	mov	r7, r0
   2d37c:	mov	r2, r3
   2d380:	mov	r0, r6
   2d384:	mov	r5, r3
   2d388:	bl	2b7e4 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   2d38c:	cmp	r6, r0
   2d390:	cmpne	r0, #0
   2d394:	mov	r1, r0
   2d398:	bne	2d3e0 <flatcc_json_parser_double@@Base+0xc8>
   2d39c:	vldr	d7, [r5]
   2d3a0:	mov	r2, r4
   2d3a4:	mov	r1, r6
   2d3a8:	mov	r0, r7
   2d3ac:	vldr	d6, [pc, #84]	; 2d408 <flatcc_json_parser_double@@Base+0xf0>
   2d3b0:	vabs.f64	d7, d7
   2d3b4:	vcmp.f64	d7, d6
   2d3b8:	vmrs	APSR_nzcv, fpscr
   2d3bc:	movgt	r3, #7
   2d3c0:	bgt	2d3c8 <flatcc_json_parser_double@@Base+0xb0>
   2d3c4:	mov	r3, #6
   2d3c8:	ldrd	r4, [sp]
   2d3cc:	ldrd	r6, [sp, #8]
   2d3d0:	ldr	r8, [sp, #16]
   2d3d4:	ldr	lr, [sp, #20]
   2d3d8:	add	sp, sp, #24
   2d3dc:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2d3e0:	ldrd	r4, [sp]
   2d3e4:	mov	r0, r1
   2d3e8:	ldrd	r6, [sp, #8]
   2d3ec:	ldr	r8, [sp, #16]
   2d3f0:	add	sp, sp, #20
   2d3f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d3f8:	ldrb	ip, [ip, #1]
   2d3fc:	cmp	ip, #48	; 0x30
   2d400:	bne	2d36c <flatcc_json_parser_double@@Base+0x54>
   2d404:	b	2d3c4 <flatcc_json_parser_double@@Base+0xac>
   2d408:			; <UNDEFINED> instruction: 0xffffffff
   2d40c:	svcvc	0x00efffff

0002d410 <flatcc_json_parser_float@@Base>:
   2d410:	mov	ip, #0
   2d414:	cmp	r1, r2
   2d418:	str	ip, [r3]
   2d41c:	beq	2d514 <flatcc_json_parser_float@@Base+0x104>
   2d420:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d424:	mov	r5, r2
   2d428:	mov	r4, r1
   2d42c:	strd	r6, [sp, #8]
   2d430:	mov	r6, r3
   2d434:	mov	r7, r0
   2d438:	str	lr, [sp, #16]
   2d43c:	sub	sp, sp, #12
   2d440:	ldrb	ip, [r1]
   2d444:	cmp	ip, #45	; 0x2d
   2d448:	addeq	ip, r1, #1
   2d44c:	movne	ip, r1
   2d450:	sub	r3, r2, ip
   2d454:	cmp	r3, #1
   2d458:	ble	2d470 <flatcc_json_parser_float@@Base+0x60>
   2d45c:	ldrb	r3, [ip]
   2d460:	cmp	r3, #46	; 0x2e
   2d464:	beq	2d4fc <flatcc_json_parser_float@@Base+0xec>
   2d468:	cmp	r3, #48	; 0x30
   2d46c:	beq	2d4f0 <flatcc_json_parser_float@@Base+0xe0>
   2d470:	mov	r2, sp
   2d474:	sub	r1, r5, r4
   2d478:	mov	r0, r4
   2d47c:	bl	2b7e4 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   2d480:	vldr	d6, [sp]
   2d484:	vldr	s14, [pc, #144]	; 2d51c <flatcc_json_parser_float@@Base+0x10c>
   2d488:	vcvt.f32.f64	s15, d6
   2d48c:	vabs.f32	s11, s15
   2d490:	vstr	s15, [r6]
   2d494:	vcmp.f32	s11, s14
   2d498:	vmrs	APSR_nzcv, fpscr
   2d49c:	bgt	2d4c0 <flatcc_json_parser_float@@Base+0xb0>
   2d4a0:	cmp	r4, r0
   2d4a4:	cmpne	r0, #0
   2d4a8:	beq	2d4fc <flatcc_json_parser_float@@Base+0xec>
   2d4ac:	add	sp, sp, #12
   2d4b0:	ldrd	r4, [sp]
   2d4b4:	ldrd	r6, [sp, #8]
   2d4b8:	add	sp, sp, #16
   2d4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4c0:	vcmpe.f64	d6, #0.0
   2d4c4:	vldr	s14, [pc, #84]	; 2d520 <flatcc_json_parser_float@@Base+0x110>
   2d4c8:	mov	r2, r5
   2d4cc:	mov	r1, r4
   2d4d0:	mov	r0, r7
   2d4d4:	vldr	s15, [pc, #72]	; 2d524 <flatcc_json_parser_float@@Base+0x114>
   2d4d8:	mov	r3, #7
   2d4dc:	vmrs	APSR_nzcv, fpscr
   2d4e0:	vmovpl.f32	s15, s14
   2d4e4:	vstr	s15, [r6]
   2d4e8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2d4ec:	b	2d4ac <flatcc_json_parser_float@@Base+0x9c>
   2d4f0:	ldrb	r3, [ip, #1]
   2d4f4:	cmp	r3, #48	; 0x30
   2d4f8:	bne	2d470 <flatcc_json_parser_float@@Base+0x60>
   2d4fc:	mov	r2, r5
   2d500:	mov	r1, r4
   2d504:	mov	r0, r7
   2d508:	mov	r3, #6
   2d50c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2d510:	b	2d4ac <flatcc_json_parser_float@@Base+0x9c>
   2d514:	mov	r0, r1
   2d518:	bx	lr
   2d51c:	svcvc	0x007fffff
   2d520:	svcvc	0x00800000
   2d524:			; <UNDEFINED> instruction: 0xff800000

0002d528 <flatcc_json_parser_integer@@Base>:
   2d528:	cmp	r1, r2
   2d52c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d530:	strd	r6, [sp, #8]
   2d534:	strd	r8, [sp, #16]
   2d538:	strd	sl, [sp, #24]
   2d53c:	str	lr, [sp, #32]
   2d540:	ldr	ip, [sp, #36]	; 0x24
   2d544:	beq	2d64c <flatcc_json_parser_integer@@Base+0x124>
   2d548:	ldrb	r8, [r1]
   2d54c:	sub	r8, r8, #45	; 0x2d
   2d550:	clz	r8, r8
   2d554:	lsr	r8, r8, #5
   2d558:	add	lr, r1, r8
   2d55c:	cmp	r2, lr
   2d560:	str	r8, [r3]
   2d564:	beq	2d66c <flatcc_json_parser_integer@@Base+0x144>
   2d568:	ldrb	r8, [r1, r8]
   2d56c:	sub	r3, r8, #48	; 0x30
   2d570:	cmp	r3, #9
   2d574:	bhi	2d660 <flatcc_json_parser_integer@@Base+0x138>
   2d578:	uxtb	r8, r8
   2d57c:	mov	r9, #0
   2d580:	subs	r4, r8, #48	; 0x30
   2d584:	add	r3, lr, #1
   2d588:	sbc	r5, r9, #0
   2d58c:	b	2d5c4 <flatcc_json_parser_integer@@Base+0x9c>
   2d590:	adds	r8, r8, r4
   2d594:	adc	r9, r9, r5
   2d598:	adds	r8, r8, r8
   2d59c:	adc	r9, r9, r9
   2d5a0:	subs	r6, r8, #48	; 0x30
   2d5a4:	sbc	r7, r9, #0
   2d5a8:	adds	r8, r6, sl
   2d5ac:	adc	r9, r7, #0
   2d5b0:	cmp	r9, r5
   2d5b4:	mov	r5, r9
   2d5b8:	cmpeq	r8, r4
   2d5bc:	mov	r4, r8
   2d5c0:	bcc	2d628 <flatcc_json_parser_integer@@Base+0x100>
   2d5c4:	cmp	r3, r2
   2d5c8:	lsl	r9, r5, #2
   2d5cc:	mov	lr, r3
   2d5d0:	lsl	r8, r4, #2
   2d5d4:	beq	2d608 <flatcc_json_parser_integer@@Base+0xe0>
   2d5d8:	ldrb	sl, [r3], #1
   2d5dc:	orr	r9, r9, r4, lsr #30
   2d5e0:	sub	fp, sl, #48	; 0x30
   2d5e4:	cmp	fp, #9
   2d5e8:	bls	2d590 <flatcc_json_parser_integer@@Base+0x68>
   2d5ec:	cmp	r1, lr
   2d5f0:	beq	2d60c <flatcc_json_parser_integer@@Base+0xe4>
   2d5f4:	ldrb	r3, [lr]
   2d5f8:	and	r1, r3, #223	; 0xdf
   2d5fc:	cmp	r3, #46	; 0x2e
   2d600:	cmpne	r1, #69	; 0x45
   2d604:	beq	2d654 <flatcc_json_parser_integer@@Base+0x12c>
   2d608:	strd	r4, [ip]
   2d60c:	ldrd	r4, [sp]
   2d610:	mov	r0, lr
   2d614:	ldrd	r6, [sp, #8]
   2d618:	ldrd	r8, [sp, #16]
   2d61c:	ldrd	sl, [sp, #24]
   2d620:	add	sp, sp, #32
   2d624:	pop	{pc}		; (ldr pc, [sp], #4)
   2d628:	mov	r1, lr
   2d62c:	mov	r3, #8
   2d630:	ldrd	r4, [sp]
   2d634:	ldrd	r6, [sp, #8]
   2d638:	ldrd	r8, [sp, #16]
   2d63c:	ldrd	sl, [sp, #24]
   2d640:	ldr	lr, [sp, #32]
   2d644:	add	sp, sp, #36	; 0x24
   2d648:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2d64c:	mov	lr, r1
   2d650:	b	2d60c <flatcc_json_parser_integer@@Base+0xe4>
   2d654:	mov	r1, lr
   2d658:	mov	r3, #12
   2d65c:	b	2d630 <flatcc_json_parser_integer@@Base+0x108>
   2d660:	mov	r4, #0
   2d664:	mov	r5, #0
   2d668:	b	2d5ec <flatcc_json_parser_integer@@Base+0xc4>
   2d66c:	mov	r4, #0
   2d670:	mov	r5, #0
   2d674:	b	2d608 <flatcc_json_parser_integer@@Base+0xe0>

0002d678 <flatcc_json_parser_generic_json@@Base>:
   2d678:	cmp	r1, r2
   2d67c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d680:	mov	r4, r1
   2d684:	strd	r6, [sp, #8]
   2d688:	strd	r8, [sp, #16]
   2d68c:	strd	sl, [sp, #24]
   2d690:	str	lr, [sp, #32]
   2d694:	sub	sp, sp, #540	; 0x21c
   2d698:	beq	2e310 <flatcc_json_parser_generic_json@@Base+0xc98>
   2d69c:	ldr	fp, [pc, #3716]	; 2e528 <flatcc_json_parser_generic_json@@Base+0xeb0>
   2d6a0:	add	r9, sp, #24
   2d6a4:	mov	r5, r2
   2d6a8:	mov	r7, r0
   2d6ac:	mov	sl, #125	; 0x7d
   2d6b0:	ldrb	r3, [r1]
   2d6b4:	mov	r6, r9
   2d6b8:	add	fp, pc, fp
   2d6bc:	cmp	r6, r9
   2d6c0:	beq	2d8a8 <flatcc_json_parser_generic_json@@Base+0x230>
   2d6c4:	ldrb	r2, [r6, #-1]
   2d6c8:	cmp	r2, #125	; 0x7d
   2d6cc:	beq	2dd24 <flatcc_json_parser_generic_json@@Base+0x6ac>
   2d6d0:	sub	r2, r3, #34	; 0x22
   2d6d4:	cmp	r2, #89	; 0x59
   2d6d8:	addls	pc, pc, r2, lsl #2
   2d6dc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6e0:	b	2dc34 <flatcc_json_parser_generic_json@@Base+0x5bc>
   2d6e4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6e8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6ec:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6f0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6f4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6f8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d6fc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d700:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d704:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d708:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d70c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d710:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d714:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d718:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d71c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d720:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d724:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d728:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d72c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d730:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d734:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d738:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d73c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d740:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d744:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d748:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d74c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d750:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d754:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d758:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d75c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d760:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d764:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d768:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d76c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d770:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d774:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d778:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d77c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d780:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d784:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d788:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d78c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d790:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d794:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d798:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d79c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7a0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7a4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7a8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7ac:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7b0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7b4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7b8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7bc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7c0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7c4:	b	2dcc0 <flatcc_json_parser_generic_json@@Base+0x648>
   2d7c8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7cc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7d0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7d4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7d8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7dc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7e0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7e4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7e8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7ec:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7f0:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2d7f4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7f8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d7fc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d800:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d804:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d808:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d80c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d810:	b	2da20 <flatcc_json_parser_generic_json@@Base+0x3a8>
   2d814:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d818:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d81c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d820:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d824:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d828:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2d82c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d830:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d834:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d838:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d83c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d840:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d844:	b	2d848 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2d848:	add	r3, sp, #536	; 0x218
   2d84c:	cmp	r6, r3
   2d850:	beq	2e324 <flatcc_json_parser_generic_json@@Base+0xcac>
   2d854:	add	r1, r4, #1
   2d858:	strb	sl, [r6], #1
   2d85c:	sub	r3, r5, r1
   2d860:	cmp	r3, #1
   2d864:	ble	2d87c <flatcc_json_parser_generic_json@@Base+0x204>
   2d868:	ldrb	r3, [r4, #1]
   2d86c:	cmp	r3, #32
   2d870:	movhi	r4, r1
   2d874:	bhi	2d88c <flatcc_json_parser_generic_json@@Base+0x214>
   2d878:	beq	2e3b8 <flatcc_json_parser_generic_json@@Base+0xd40>
   2d87c:	mov	r2, r5
   2d880:	mov	r0, r7
   2d884:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2d888:	mov	r4, r0
   2d88c:	cmp	r5, r4
   2d890:	beq	2e310 <flatcc_json_parser_generic_json@@Base+0xc98>
   2d894:	ldrb	r3, [r4]
   2d898:	cmp	r3, #125	; 0x7d
   2d89c:	beq	2dd1c <flatcc_json_parser_generic_json@@Base+0x6a4>
   2d8a0:	cmp	r6, r9
   2d8a4:	bne	2d6c4 <flatcc_json_parser_generic_json@@Base+0x4c>
   2d8a8:	sub	r2, r3, #34	; 0x22
   2d8ac:	cmp	r2, #89	; 0x59
   2d8b0:	addls	pc, pc, r2, lsl #2
   2d8b4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8b8:	b	2dc34 <flatcc_json_parser_generic_json@@Base+0x5bc>
   2d8bc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8c0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8c4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8c8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8cc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8d0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8d4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8d8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8dc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8e0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8e4:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d8e8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8ec:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d8f0:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d8f4:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d8f8:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d8fc:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d900:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d904:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d908:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d90c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d910:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d914:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2d918:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d91c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d920:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d924:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d928:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d92c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d930:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d934:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d938:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d93c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d940:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d944:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d948:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d94c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d950:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d954:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d958:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d95c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d960:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d964:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d968:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d96c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d970:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d974:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d978:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d97c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d980:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d984:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d988:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d98c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d990:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d994:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d998:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d99c:	b	2dccc <flatcc_json_parser_generic_json@@Base+0x654>
   2d9a0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9a4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9a8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9ac:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9b0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9b4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9b8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9bc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9c0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9c4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9c8:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2d9cc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9d0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9d4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9d8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9dc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9e0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9e4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9e8:	b	2da20 <flatcc_json_parser_generic_json@@Base+0x3a8>
   2d9ec:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9f0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9f4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9f8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2d9fc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da00:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2da04:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da08:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da0c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da10:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da14:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da18:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2da1c:	b	2d848 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2da20:	sub	r3, r5, r4
   2da24:	cmp	r3, #3
   2da28:	bgt	2e1f4 <flatcc_json_parser_generic_json@@Base+0xb7c>
   2da2c:	mov	r2, r5
   2da30:	mov	r1, r4
   2da34:	mov	r0, r7
   2da38:	mov	r3, #5
   2da3c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2da40:	add	sp, sp, #540	; 0x21c
   2da44:	ldrd	r4, [sp]
   2da48:	ldrd	r6, [sp, #8]
   2da4c:	ldrd	r8, [sp, #16]
   2da50:	ldrd	sl, [sp, #24]
   2da54:	add	sp, sp, #32
   2da58:	pop	{pc}		; (ldr pc, [sp], #4)
   2da5c:	sub	r3, r5, r4
   2da60:	cmp	r3, #3
   2da64:	ble	2da98 <flatcc_json_parser_generic_json@@Base+0x420>
   2da68:	ldrb	r2, [r4]
   2da6c:	cmp	r2, #116	; 0x74
   2da70:	beq	2e354 <flatcc_json_parser_generic_json@@Base+0xcdc>
   2da74:	cmp	r3, #4
   2da78:	beq	2da98 <flatcc_json_parser_generic_json@@Base+0x420>
   2da7c:	mov	r2, #5
   2da80:	mov	r1, fp
   2da84:	mov	r0, r4
   2da88:	bl	14528 <memcmp@plt>
   2da8c:	cmp	r0, #0
   2da90:	addeq	r0, r4, #5
   2da94:	beq	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2da98:	mov	r0, #0
   2da9c:	mov	r3, #0
   2daa0:	mov	r1, #0
   2daa4:	cmp	r5, r4
   2daa8:	str	r3, [sp, #12]
   2daac:	strd	r0, [r9, #-8]
   2dab0:	moveq	r0, r5
   2dab4:	beq	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2dab8:	add	r0, sp, #16
   2dabc:	add	r3, sp, #12
   2dac0:	mov	r2, r5
   2dac4:	mov	r1, r4
   2dac8:	str	r0, [sp]
   2dacc:	mov	r0, r7
   2dad0:	bl	2d528 <flatcc_json_parser_integer@@Base>
   2dad4:	cmp	r0, r4
   2dad8:	moveq	r0, r4
   2dadc:	bne	2e384 <flatcc_json_parser_generic_json@@Base+0xd0c>
   2dae0:	cmp	r0, r4
   2dae4:	bne	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dae8:	mov	r1, r0
   2daec:	mov	r2, r5
   2daf0:	mov	r0, r7
   2daf4:	mov	r3, #5
   2daf8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2dafc:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2db00:	cmp	r5, r4
   2db04:	beq	2e318 <flatcc_json_parser_generic_json@@Base+0xca0>
   2db08:	cmp	r3, #45	; 0x2d
   2db0c:	beq	2e2d8 <flatcc_json_parser_generic_json@@Base+0xc60>
   2db10:	ldrb	r3, [r4]
   2db14:	cmp	r3, #48	; 0x30
   2db18:	beq	2e2fc <flatcc_json_parser_generic_json@@Base+0xc84>
   2db1c:	sub	r3, r3, #49	; 0x31
   2db20:	cmp	r3, #8
   2db24:	bhi	2e444 <flatcc_json_parser_generic_json@@Base+0xdcc>
   2db28:	add	r0, r4, #1
   2db2c:	cmp	r5, r0
   2db30:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2db34:	ldrb	r3, [r4, #1]
   2db38:	sub	r2, r3, #48	; 0x30
   2db3c:	cmp	r2, #9
   2db40:	bhi	2db64 <flatcc_json_parser_generic_json@@Base+0x4ec>
   2db44:	add	r4, r4, #2
   2db48:	cmp	r4, r5
   2db4c:	mov	r0, r4
   2db50:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2db54:	ldrb	r3, [r4], #1
   2db58:	sub	r2, r3, #48	; 0x30
   2db5c:	cmp	r2, #9
   2db60:	bls	2db48 <flatcc_json_parser_generic_json@@Base+0x4d0>
   2db64:	cmp	r3, #46	; 0x2e
   2db68:	beq	2e3e0 <flatcc_json_parser_generic_json@@Base+0xd68>
   2db6c:	and	r2, r3, #223	; 0xdf
   2db70:	cmp	r2, #69	; 0x45
   2db74:	bne	2dbec <flatcc_json_parser_generic_json@@Base+0x574>
   2db78:	add	r1, r0, #1
   2db7c:	cmp	r5, r1
   2db80:	beq	2e2e4 <flatcc_json_parser_generic_json@@Base+0xc6c>
   2db84:	ldrb	r3, [r0, #1]
   2db88:	sub	r2, r3, #43	; 0x2b
   2db8c:	tst	r2, #253	; 0xfd
   2db90:	bne	2dba4 <flatcc_json_parser_generic_json@@Base+0x52c>
   2db94:	add	r1, r0, #2
   2db98:	cmp	r5, r1
   2db9c:	beq	2dc18 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2dba0:	ldrb	r3, [r0, #2]
   2dba4:	sub	r3, r3, #48	; 0x30
   2dba8:	cmp	r3, #9
   2dbac:	bhi	2dc18 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2dbb0:	add	r0, r1, #1
   2dbb4:	cmp	r5, r0
   2dbb8:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2dbbc:	ldrb	r3, [r1, #1]
   2dbc0:	sub	r2, r3, #48	; 0x30
   2dbc4:	cmp	r2, #9
   2dbc8:	bhi	2e4c4 <flatcc_json_parser_generic_json@@Base+0xe4c>
   2dbcc:	add	r2, r1, #2
   2dbd0:	cmp	r5, r2
   2dbd4:	mov	r0, r2
   2dbd8:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2dbdc:	ldrb	r3, [r2], #1
   2dbe0:	sub	r1, r3, #48	; 0x30
   2dbe4:	cmp	r1, #9
   2dbe8:	bls	2dbd0 <flatcc_json_parser_generic_json@@Base+0x558>
   2dbec:	cmp	r3, #32
   2dbf0:	beq	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dbf4:	bls	2e2bc <flatcc_json_parser_generic_json@@Base+0xc44>
   2dbf8:	cmp	r3, #58	; 0x3a
   2dbfc:	beq	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dc00:	bls	2e2b0 <flatcc_json_parser_generic_json@@Base+0xc38>
   2dc04:	cmp	r3, #93	; 0x5d
   2dc08:	beq	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dc0c:	cmp	r3, #125	; 0x7d
   2dc10:	beq	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dc14:	mov	r1, r0
   2dc18:	mov	r3, #6
   2dc1c:	mov	r2, r5
   2dc20:	mov	r0, r7
   2dc24:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2dc28:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dc2c:	cmp	r4, r5
   2dc30:	beq	2e244 <flatcc_json_parser_generic_json@@Base+0xbcc>
   2dc34:	add	r4, r4, #1
   2dc38:	cmp	r5, r4
   2dc3c:	beq	2dca8 <flatcc_json_parser_generic_json@@Base+0x630>
   2dc40:	ldrb	r3, [r4]
   2dc44:	cmp	r3, #34	; 0x22
   2dc48:	beq	2dfb0 <flatcc_json_parser_generic_json@@Base+0x938>
   2dc4c:	add	r8, sp, #8
   2dc50:	b	2dc60 <flatcc_json_parser_generic_json@@Base+0x5e8>
   2dc54:	ldrb	r3, [r0]
   2dc58:	cmp	r3, #34	; 0x22
   2dc5c:	beq	2dfb0 <flatcc_json_parser_generic_json@@Base+0x938>
   2dc60:	mov	r1, r4
   2dc64:	mov	r2, r5
   2dc68:	mov	r0, r7
   2dc6c:	bl	2c504 <flatcc_json_parser_string_part@@Base>
   2dc70:	mov	r4, r0
   2dc74:	mov	r1, r0
   2dc78:	cmp	r5, r4
   2dc7c:	mov	r3, r8
   2dc80:	mov	r2, r5
   2dc84:	mov	r0, r7
   2dc88:	beq	2dc98 <flatcc_json_parser_generic_json@@Base+0x620>
   2dc8c:	ldrb	ip, [r4]
   2dc90:	cmp	ip, #34	; 0x22
   2dc94:	beq	2dfb0 <flatcc_json_parser_generic_json@@Base+0x938>
   2dc98:	bl	2cca0 <flatcc_json_parser_string_escape@@Base>
   2dc9c:	cmp	r5, r0
   2dca0:	mov	r4, r0
   2dca4:	bne	2dc54 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dca8:	mov	r1, r4
   2dcac:	mov	r3, #20
   2dcb0:	mov	r2, r5
   2dcb4:	mov	r0, r7
   2dcb8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2dcbc:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2dcc0:	add	r3, sp, #536	; 0x218
   2dcc4:	cmp	r6, r3
   2dcc8:	beq	2e324 <flatcc_json_parser_generic_json@@Base+0xcac>
   2dccc:	add	r1, r4, #1
   2dcd0:	mov	r3, #93	; 0x5d
   2dcd4:	sub	r2, r5, r1
   2dcd8:	cmp	r2, #1
   2dcdc:	strb	r3, [r6], #1
   2dce0:	ble	2dcf8 <flatcc_json_parser_generic_json@@Base+0x680>
   2dce4:	ldrb	r3, [r4, #1]
   2dce8:	cmp	r3, #32
   2dcec:	movhi	r4, r1
   2dcf0:	bhi	2dd08 <flatcc_json_parser_generic_json@@Base+0x690>
   2dcf4:	beq	2e3cc <flatcc_json_parser_generic_json@@Base+0xd54>
   2dcf8:	mov	r2, r5
   2dcfc:	mov	r0, r7
   2dd00:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2dd04:	mov	r4, r0
   2dd08:	cmp	r5, r4
   2dd0c:	beq	2e310 <flatcc_json_parser_generic_json@@Base+0xc98>
   2dd10:	ldrb	r3, [r4]
   2dd14:	cmp	r3, #93	; 0x5d
   2dd18:	bne	2d6bc <flatcc_json_parser_generic_json@@Base+0x44>
   2dd1c:	mov	r0, r4
   2dd20:	b	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2dd24:	cmp	r3, #34	; 0x22
   2dd28:	addeq	r1, r4, #1
   2dd2c:	bne	2e27c <flatcc_json_parser_generic_json@@Base+0xc04>
   2dd30:	cmp	r5, r1
   2dd34:	beq	2dd90 <flatcc_json_parser_generic_json@@Base+0x718>
   2dd38:	ldrb	r2, [r1]
   2dd3c:	cmp	r2, #34	; 0x22
   2dd40:	bne	2dd60 <flatcc_json_parser_generic_json@@Base+0x6e8>
   2dd44:	b	2e260 <flatcc_json_parser_generic_json@@Base+0xbe8>
   2dd48:	add	r1, r3, #1
   2dd4c:	cmp	r5, r1
   2dd50:	beq	2dd90 <flatcc_json_parser_generic_json@@Base+0x718>
   2dd54:	ldrb	r2, [r3, #1]
   2dd58:	cmp	r2, #34	; 0x22
   2dd5c:	beq	2e260 <flatcc_json_parser_generic_json@@Base+0xbe8>
   2dd60:	cmp	r2, #92	; 0x5c
   2dd64:	mov	r3, r1
   2dd68:	bne	2dd48 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2dd6c:	sub	r2, r5, r1
   2dd70:	add	r3, r1, #1
   2dd74:	cmp	r2, #1
   2dd78:	bgt	2dd48 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2dd7c:	cmp	r5, r1
   2dd80:	beq	2dd90 <flatcc_json_parser_generic_json@@Base+0x718>
   2dd84:	ldrb	r3, [r1]
   2dd88:	cmp	r3, #34	; 0x22
   2dd8c:	beq	2e260 <flatcc_json_parser_generic_json@@Base+0xbe8>
   2dd90:	mov	r3, #20
   2dd94:	mov	r2, r5
   2dd98:	mov	r0, r7
   2dd9c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2dda0:	sub	r3, r5, r0
   2dda4:	cmp	r3, #1
   2dda8:	ble	2ddcc <flatcc_json_parser_generic_json@@Base+0x754>
   2ddac:	ldrb	r3, [r0]
   2ddb0:	cmp	r3, #32
   2ddb4:	bhi	2dddc <flatcc_json_parser_generic_json@@Base+0x764>
   2ddb8:	bne	2ddcc <flatcc_json_parser_generic_json@@Base+0x754>
   2ddbc:	ldrb	r3, [r0, #1]
   2ddc0:	cmp	r3, #32
   2ddc4:	addhi	r0, r0, #1
   2ddc8:	bhi	2dddc <flatcc_json_parser_generic_json@@Base+0x764>
   2ddcc:	mov	r1, r0
   2ddd0:	mov	r2, r5
   2ddd4:	mov	r0, r7
   2ddd8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2dddc:	cmp	r5, r0
   2dde0:	beq	2e48c <flatcc_json_parser_generic_json@@Base+0xe14>
   2dde4:	ldrb	r3, [r0]
   2dde8:	cmp	r3, #58	; 0x3a
   2ddec:	bne	2e45c <flatcc_json_parser_generic_json@@Base+0xde4>
   2ddf0:	add	r4, r0, #1
   2ddf4:	sub	r3, r5, r4
   2ddf8:	cmp	r3, #1
   2ddfc:	ble	2de20 <flatcc_json_parser_generic_json@@Base+0x7a8>
   2de00:	ldrb	r3, [r0, #1]
   2de04:	cmp	r3, #32
   2de08:	bhi	2de38 <flatcc_json_parser_generic_json@@Base+0x7c0>
   2de0c:	bne	2de20 <flatcc_json_parser_generic_json@@Base+0x7a8>
   2de10:	ldrb	r3, [r0, #2]
   2de14:	cmp	r3, #32
   2de18:	addhi	r4, r0, #2
   2de1c:	bhi	2de38 <flatcc_json_parser_generic_json@@Base+0x7c0>
   2de20:	mov	r1, r4
   2de24:	mov	r2, r5
   2de28:	mov	r0, r7
   2de2c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2de30:	ldrb	r3, [r0]
   2de34:	mov	r4, r0
   2de38:	sub	r2, r3, #34	; 0x22
   2de3c:	cmp	r2, #89	; 0x59
   2de40:	addls	pc, pc, r2, lsl #2
   2de44:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de48:	b	2dc2c <flatcc_json_parser_generic_json@@Base+0x5b4>
   2de4c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de50:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de54:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de58:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de5c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de60:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de64:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de68:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de6c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de70:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de74:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de78:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de7c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2de80:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de84:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de88:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de8c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de90:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de94:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de98:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2de9c:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2dea0:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2dea4:	b	2db00 <flatcc_json_parser_generic_json@@Base+0x488>
   2dea8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2deac:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2deb0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2deb4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2deb8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2debc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dec0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dec4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dec8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2decc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2ded0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2ded4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2ded8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dedc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dee0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dee4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dee8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2deec:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2def0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2def4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2def8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2defc:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df00:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df04:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df08:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df0c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df10:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df14:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df18:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df1c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df20:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df24:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df28:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df2c:	b	2dcc0 <flatcc_json_parser_generic_json@@Base+0x648>
   2df30:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df34:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df38:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df3c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df40:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df44:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df48:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df4c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df50:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df54:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df58:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2df5c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df60:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df64:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df68:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df6c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df70:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df74:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df78:	b	2da20 <flatcc_json_parser_generic_json@@Base+0x3a8>
   2df7c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df80:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df84:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df88:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df8c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df90:	b	2da5c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2df94:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df98:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2df9c:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dfa0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dfa4:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dfa8:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2dfac:	b	2d848 <flatcc_json_parser_generic_json@@Base+0x1d0>
   2dfb0:	add	r0, r4, #1
   2dfb4:	cmp	r5, r0
   2dfb8:	bne	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2dfbc:	b	2e520 <flatcc_json_parser_generic_json@@Base+0xea8>
   2dfc0:	cmp	r2, #1
   2dfc4:	ble	2dfd8 <flatcc_json_parser_generic_json@@Base+0x960>
   2dfc8:	ldrb	r3, [r0]
   2dfcc:	cmp	r3, #32
   2dfd0:	bhi	2dfe8 <flatcc_json_parser_generic_json@@Base+0x970>
   2dfd4:	beq	2e0d0 <flatcc_json_parser_generic_json@@Base+0xa58>
   2dfd8:	mov	r1, r0
   2dfdc:	mov	r2, r5
   2dfe0:	mov	r0, r7
   2dfe4:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2dfe8:	cmp	r5, r0
   2dfec:	beq	2e0e8 <flatcc_json_parser_generic_json@@Base+0xa70>
   2dff0:	ldrb	r3, [r0]
   2dff4:	cmp	r3, #44	; 0x2c
   2dff8:	beq	2e114 <flatcc_json_parser_generic_json@@Base+0xa9c>
   2dffc:	cmp	r3, #125	; 0x7d
   2e000:	beq	2e09c <flatcc_json_parser_generic_json@@Base+0xa24>
   2e004:	mov	r1, r0
   2e008:	mov	r3, #10
   2e00c:	mov	r2, r5
   2e010:	mov	r0, r7
   2e014:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e018:	cmp	r5, r0
   2e01c:	beq	2e0e8 <flatcc_json_parser_generic_json@@Base+0xa70>
   2e020:	mov	r6, r8
   2e024:	cmp	r6, r9
   2e028:	beq	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e02c:	ldrb	r3, [r6, #-1]
   2e030:	sub	r8, r6, #1
   2e034:	sub	r2, r5, r0
   2e038:	cmp	r3, #93	; 0x5d
   2e03c:	bne	2dfc0 <flatcc_json_parser_generic_json@@Base+0x948>
   2e040:	cmp	r2, #1
   2e044:	ble	2e058 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2e048:	ldrb	r3, [r0]
   2e04c:	cmp	r3, #32
   2e050:	bhi	2e068 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e054:	beq	2e160 <flatcc_json_parser_generic_json@@Base+0xae8>
   2e058:	mov	r1, r0
   2e05c:	mov	r2, r5
   2e060:	mov	r0, r7
   2e064:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e068:	cmp	r5, r0
   2e06c:	beq	2e0e8 <flatcc_json_parser_generic_json@@Base+0xa70>
   2e070:	ldrb	r3, [r0]
   2e074:	cmp	r3, #44	; 0x2c
   2e078:	beq	2e174 <flatcc_json_parser_generic_json@@Base+0xafc>
   2e07c:	cmp	r3, #93	; 0x5d
   2e080:	beq	2e09c <flatcc_json_parser_generic_json@@Base+0xa24>
   2e084:	mov	r1, r0
   2e088:	mov	r3, #9
   2e08c:	mov	r2, r5
   2e090:	mov	r0, r7
   2e094:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e098:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e09c:	add	r1, r0, #1
   2e0a0:	sub	r3, r5, r1
   2e0a4:	cmp	r3, #1
   2e0a8:	ble	2e0c0 <flatcc_json_parser_generic_json@@Base+0xa48>
   2e0ac:	ldrb	r3, [r0, #1]
   2e0b0:	cmp	r3, #32
   2e0b4:	movhi	r0, r1
   2e0b8:	bhi	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e0bc:	beq	2e1e0 <flatcc_json_parser_generic_json@@Base+0xb68>
   2e0c0:	mov	r2, r5
   2e0c4:	mov	r0, r7
   2e0c8:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e0cc:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e0d0:	ldrb	r3, [r0, #1]
   2e0d4:	cmp	r3, #32
   2e0d8:	addhi	r0, r0, #1
   2e0dc:	bls	2dfd8 <flatcc_json_parser_generic_json@@Base+0x960>
   2e0e0:	cmp	r5, r0
   2e0e4:	bne	2dff0 <flatcc_json_parser_generic_json@@Base+0x978>
   2e0e8:	cmp	r8, r9
   2e0ec:	beq	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e0f0:	ldrb	r3, [r8, #-1]
   2e0f4:	mov	r1, r0
   2e0f8:	mov	r2, r5
   2e0fc:	mov	r0, r7
   2e100:	cmp	r3, #93	; 0x5d
   2e104:	moveq	r3, #9
   2e108:	movne	r3, #10
   2e10c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e110:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e114:	add	r1, r0, #1
   2e118:	sub	r3, r5, r1
   2e11c:	cmp	r3, #1
   2e120:	ble	2e134 <flatcc_json_parser_generic_json@@Base+0xabc>
   2e124:	ldrb	r3, [r0, #1]
   2e128:	cmp	r3, #32
   2e12c:	bhi	2e144 <flatcc_json_parser_generic_json@@Base+0xacc>
   2e130:	beq	2e268 <flatcc_json_parser_generic_json@@Base+0xbf0>
   2e134:	mov	r2, r5
   2e138:	mov	r0, r7
   2e13c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e140:	mov	r1, r0
   2e144:	cmp	r5, r1
   2e148:	beq	2e298 <flatcc_json_parser_generic_json@@Base+0xc20>
   2e14c:	ldrb	r3, [r1]
   2e150:	cmp	r3, #125	; 0x7d
   2e154:	beq	2e1b8 <flatcc_json_parser_generic_json@@Base+0xb40>
   2e158:	mov	r4, r1
   2e15c:	b	2d6bc <flatcc_json_parser_generic_json@@Base+0x44>
   2e160:	ldrb	r3, [r0, #1]
   2e164:	cmp	r3, #32
   2e168:	addhi	r0, r0, #1
   2e16c:	bls	2e058 <flatcc_json_parser_generic_json@@Base+0x9e0>
   2e170:	b	2e068 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e174:	add	r1, r0, #1
   2e178:	sub	r3, r5, r1
   2e17c:	cmp	r3, #1
   2e180:	ble	2e194 <flatcc_json_parser_generic_json@@Base+0xb1c>
   2e184:	ldrb	r3, [r0, #1]
   2e188:	cmp	r3, #32
   2e18c:	bhi	2e1a4 <flatcc_json_parser_generic_json@@Base+0xb2c>
   2e190:	beq	2e230 <flatcc_json_parser_generic_json@@Base+0xbb8>
   2e194:	mov	r2, r5
   2e198:	mov	r0, r7
   2e19c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e1a0:	mov	r1, r0
   2e1a4:	cmp	r5, r1
   2e1a8:	beq	2e33c <flatcc_json_parser_generic_json@@Base+0xcc4>
   2e1ac:	ldrb	r3, [r1]
   2e1b0:	cmp	r3, #93	; 0x5d
   2e1b4:	bne	2e158 <flatcc_json_parser_generic_json@@Base+0xae0>
   2e1b8:	add	r0, r1, #1
   2e1bc:	sub	r3, r5, r0
   2e1c0:	cmp	r3, #1
   2e1c4:	ble	2e1d8 <flatcc_json_parser_generic_json@@Base+0xb60>
   2e1c8:	ldrb	r3, [r1, #1]
   2e1cc:	cmp	r3, #32
   2e1d0:	bhi	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e1d4:	beq	2e430 <flatcc_json_parser_generic_json@@Base+0xdb8>
   2e1d8:	mov	r1, r0
   2e1dc:	b	2e0c0 <flatcc_json_parser_generic_json@@Base+0xa48>
   2e1e0:	ldrb	r3, [r0, #2]
   2e1e4:	cmp	r3, #32
   2e1e8:	addhi	r0, r0, #2
   2e1ec:	bls	2e0c0 <flatcc_json_parser_generic_json@@Base+0xa48>
   2e1f0:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e1f4:	ldrb	r3, [r4]
   2e1f8:	cmp	r3, #110	; 0x6e
   2e1fc:	bne	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2e200:	ldrb	r3, [r4, #1]
   2e204:	add	r2, r4, #1
   2e208:	cmp	r3, #117	; 0x75
   2e20c:	bne	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2e210:	ldrb	r3, [r2, #1]!
   2e214:	cmp	r3, #108	; 0x6c
   2e218:	bne	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2e21c:	ldrb	r3, [r2, #1]
   2e220:	cmp	r3, #108	; 0x6c
   2e224:	bne	2da2c <flatcc_json_parser_generic_json@@Base+0x3b4>
   2e228:	add	r0, r4, #4
   2e22c:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e230:	ldrb	r3, [r0, #2]
   2e234:	cmp	r3, #32
   2e238:	addhi	r1, r0, #2
   2e23c:	bls	2e194 <flatcc_json_parser_generic_json@@Base+0xb1c>
   2e240:	b	2e1a4 <flatcc_json_parser_generic_json@@Base+0xb2c>
   2e244:	mov	r3, #16
   2e248:	mov	r2, r5
   2e24c:	mov	r1, r5
   2e250:	mov	r0, r7
   2e254:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e258:	mov	r4, r0
   2e25c:	b	2dc38 <flatcc_json_parser_generic_json@@Base+0x5c0>
   2e260:	add	r0, r1, #1
   2e264:	b	2dda0 <flatcc_json_parser_generic_json@@Base+0x728>
   2e268:	ldrb	r3, [r0, #2]
   2e26c:	cmp	r3, #32
   2e270:	addhi	r1, r0, #2
   2e274:	bls	2e134 <flatcc_json_parser_generic_json@@Base+0xabc>
   2e278:	b	2e144 <flatcc_json_parser_generic_json@@Base+0xacc>
   2e27c:	mov	r1, r4
   2e280:	mov	r3, #5
   2e284:	mov	r2, r5
   2e288:	mov	r0, r7
   2e28c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e290:	mov	r1, r0
   2e294:	b	2dd30 <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e298:	mov	r3, #10
   2e29c:	mov	r2, r5
   2e2a0:	mov	r1, r5
   2e2a4:	mov	r0, r7
   2e2a8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e2ac:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e2b0:	cmp	r3, #44	; 0x2c
   2e2b4:	bne	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e2b8:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e2bc:	cmp	r3, #9
   2e2c0:	bcc	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e2c4:	cmp	r3, #11
   2e2c8:	bls	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e2cc:	cmp	r3, #13
   2e2d0:	bne	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e2d4:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e2d8:	add	r4, r4, #1
   2e2dc:	cmp	r5, r4
   2e2e0:	bne	2db10 <flatcc_json_parser_generic_json@@Base+0x498>
   2e2e4:	mov	r3, #6
   2e2e8:	mov	r2, r5
   2e2ec:	mov	r1, r5
   2e2f0:	mov	r0, r7
   2e2f4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e2f8:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e2fc:	add	r0, r4, #1
   2e300:	cmp	r5, r0
   2e304:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e308:	ldrb	r3, [r4, #1]
   2e30c:	b	2db64 <flatcc_json_parser_generic_json@@Base+0x4ec>
   2e310:	mov	r0, r4
   2e314:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e318:	mov	r8, r6
   2e31c:	mov	r0, r5
   2e320:	b	2e0e8 <flatcc_json_parser_generic_json@@Base+0xa70>
   2e324:	mov	r2, r5
   2e328:	mov	r1, r4
   2e32c:	mov	r0, r7
   2e330:	mov	r3, #2
   2e334:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e338:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e33c:	mov	r3, #9
   2e340:	mov	r2, r5
   2e344:	mov	r1, r5
   2e348:	mov	r0, r7
   2e34c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e350:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e354:	ldrb	r2, [r4, #1]
   2e358:	add	r1, r4, #1
   2e35c:	cmp	r2, #114	; 0x72
   2e360:	bne	2da74 <flatcc_json_parser_generic_json@@Base+0x3fc>
   2e364:	ldrb	r2, [r1, #1]!
   2e368:	cmp	r2, #117	; 0x75
   2e36c:	bne	2da74 <flatcc_json_parser_generic_json@@Base+0x3fc>
   2e370:	ldrb	r2, [r1, #1]
   2e374:	cmp	r2, #101	; 0x65
   2e378:	addeq	r0, r4, #4
   2e37c:	bne	2da74 <flatcc_json_parser_generic_json@@Base+0x3fc>
   2e380:	b	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2e384:	ldr	r3, [sp, #12]
   2e388:	cmp	r3, #0
   2e38c:	bne	2e474 <flatcc_json_parser_generic_json@@Base+0xdfc>
   2e390:	ldrd	r2, [r9, #-8]
   2e394:	cmp	r3, #0
   2e398:	cmpeq	r2, #255	; 0xff
   2e39c:	bls	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2e3a0:	mov	r1, r0
   2e3a4:	mov	r3, #7
   2e3a8:	mov	r2, r5
   2e3ac:	mov	r0, r7
   2e3b0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e3b4:	b	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2e3b8:	ldrb	r3, [r4, #2]
   2e3bc:	cmp	r3, #32
   2e3c0:	addhi	r4, r4, #2
   2e3c4:	bls	2d87c <flatcc_json_parser_generic_json@@Base+0x204>
   2e3c8:	b	2d88c <flatcc_json_parser_generic_json@@Base+0x214>
   2e3cc:	ldrb	r3, [r4, #2]
   2e3d0:	cmp	r3, #32
   2e3d4:	addhi	r4, r4, #2
   2e3d8:	bls	2dcf8 <flatcc_json_parser_generic_json@@Base+0x680>
   2e3dc:	b	2dd08 <flatcc_json_parser_generic_json@@Base+0x690>
   2e3e0:	ldrb	r3, [r0, #1]
   2e3e4:	sub	r3, r3, #48	; 0x30
   2e3e8:	cmp	r3, #9
   2e3ec:	bhi	2e4a4 <flatcc_json_parser_generic_json@@Base+0xe2c>
   2e3f0:	add	r2, r0, #2
   2e3f4:	cmp	r5, r2
   2e3f8:	beq	2e4f0 <flatcc_json_parser_generic_json@@Base+0xe78>
   2e3fc:	ldrb	r3, [r0, #2]
   2e400:	sub	r1, r3, #48	; 0x30
   2e404:	cmp	r1, #9
   2e408:	bhi	2e4bc <flatcc_json_parser_generic_json@@Base+0xe44>
   2e40c:	add	r2, r0, #3
   2e410:	cmp	r5, r2
   2e414:	mov	r0, r2
   2e418:	beq	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e41c:	ldrb	r3, [r2], #1
   2e420:	sub	r1, r3, #48	; 0x30
   2e424:	cmp	r1, #9
   2e428:	bls	2e410 <flatcc_json_parser_generic_json@@Base+0xd98>
   2e42c:	b	2db6c <flatcc_json_parser_generic_json@@Base+0x4f4>
   2e430:	ldrb	r3, [r1, #2]
   2e434:	cmp	r3, #32
   2e438:	addhi	r0, r1, #2
   2e43c:	bls	2e1d8 <flatcc_json_parser_generic_json@@Base+0xb60>
   2e440:	b	2e018 <flatcc_json_parser_generic_json@@Base+0x9a0>
   2e444:	mov	r1, r4
   2e448:	mov	r3, #6
   2e44c:	mov	r2, r5
   2e450:	mov	r0, r7
   2e454:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e458:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e45c:	mov	r1, r0
   2e460:	mov	r2, r5
   2e464:	mov	r0, r7
   2e468:	mov	r3, #4
   2e46c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e470:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e474:	mov	r1, r0
   2e478:	mov	r3, #8
   2e47c:	mov	r2, r5
   2e480:	mov	r0, r7
   2e484:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e488:	b	2dae0 <flatcc_json_parser_generic_json@@Base+0x468>
   2e48c:	mov	r0, r7
   2e490:	mov	r3, #10
   2e494:	mov	r2, r5
   2e498:	mov	r1, r5
   2e49c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e4a0:	b	2da40 <flatcc_json_parser_generic_json@@Base+0x3c8>
   2e4a4:	add	r1, r0, #1
   2e4a8:	mov	r3, #6
   2e4ac:	mov	r2, r5
   2e4b0:	mov	r0, r7
   2e4b4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e4b8:	b	2dfb4 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e4bc:	mov	r0, r2
   2e4c0:	b	2db6c <flatcc_json_parser_generic_json@@Base+0x4f4>
   2e4c4:	cmp	r3, #32
   2e4c8:	beq	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e4cc:	bls	2e504 <flatcc_json_parser_generic_json@@Base+0xe8c>
   2e4d0:	cmp	r3, #58	; 0x3a
   2e4d4:	beq	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e4d8:	bls	2e4f8 <flatcc_json_parser_generic_json@@Base+0xe80>
   2e4dc:	cmp	r3, #93	; 0x5d
   2e4e0:	beq	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e4e4:	cmp	r3, #125	; 0x7d
   2e4e8:	bne	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e4ec:	b	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e4f0:	mov	r0, r5
   2e4f4:	b	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e4f8:	cmp	r3, #44	; 0x2c
   2e4fc:	bne	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e500:	b	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e504:	cmp	r3, #9
   2e508:	bcc	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e50c:	cmp	r3, #11
   2e510:	bls	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e514:	cmp	r3, #13
   2e518:	bne	2dc14 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e51c:	b	2e024 <flatcc_json_parser_generic_json@@Base+0x9ac>
   2e520:	mov	r8, r6
   2e524:	b	2e0e8 <flatcc_json_parser_generic_json@@Base+0xa70>
   2e528:	andeq	r0, r1, r8, ror #30

0002e52c <flatcc_json_parser_unmatched_symbol@@Base>:
   2e52c:	ldr	ip, [r0, #8]
   2e530:	tst	ip, #1
   2e534:	beq	2e620 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   2e538:	cmp	r1, r2
   2e53c:	mov	r3, r1
   2e540:	strd	r4, [sp, #-16]!
   2e544:	mov	r5, r0
   2e548:	mov	r4, r2
   2e54c:	str	r6, [sp, #8]
   2e550:	str	lr, [sp, #12]
   2e554:	beq	2e5a8 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2e558:	ldrb	r2, [r1]
   2e55c:	cmp	r2, #34	; 0x22
   2e560:	bne	2e580 <flatcc_json_parser_unmatched_symbol@@Base+0x54>
   2e564:	b	2e628 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   2e568:	add	r3, r1, #1
   2e56c:	cmp	r4, r3
   2e570:	beq	2e5a8 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2e574:	ldrb	r2, [r1, #1]
   2e578:	cmp	r2, #34	; 0x22
   2e57c:	beq	2e628 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   2e580:	cmp	r2, #92	; 0x5c
   2e584:	mov	r1, r3
   2e588:	bne	2e568 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   2e58c:	sub	r2, r4, r3
   2e590:	add	r1, r3, #1
   2e594:	cmp	r2, #1
   2e598:	bgt	2e568 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   2e59c:	ldrb	r2, [r3]
   2e5a0:	cmp	r2, #34	; 0x22
   2e5a4:	beq	2e628 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   2e5a8:	mov	r1, r3
   2e5ac:	mov	r2, r4
   2e5b0:	mov	r3, #20
   2e5b4:	mov	r0, r5
   2e5b8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e5bc:	mov	r1, r0
   2e5c0:	sub	r3, r4, r1
   2e5c4:	cmp	r3, #1
   2e5c8:	ble	2e5dc <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2e5cc:	ldrb	r3, [r1]
   2e5d0:	cmp	r3, #32
   2e5d4:	bhi	2e5ec <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2e5d8:	beq	2e680 <flatcc_json_parser_unmatched_symbol@@Base+0x154>
   2e5dc:	mov	r2, r4
   2e5e0:	mov	r0, r5
   2e5e4:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e5e8:	mov	r1, r0
   2e5ec:	cmp	r4, r1
   2e5f0:	beq	2e600 <flatcc_json_parser_unmatched_symbol@@Base+0xd4>
   2e5f4:	ldrb	r3, [r1]
   2e5f8:	cmp	r3, #58	; 0x3a
   2e5fc:	beq	2e630 <flatcc_json_parser_unmatched_symbol@@Base+0x104>
   2e600:	mov	r2, r4
   2e604:	mov	r0, r5
   2e608:	ldrd	r4, [sp]
   2e60c:	mov	r3, #4
   2e610:	ldr	r6, [sp, #8]
   2e614:	ldr	lr, [sp, #12]
   2e618:	add	sp, sp, #16
   2e61c:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e620:	mov	r3, #13
   2e624:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e628:	add	r1, r3, #1
   2e62c:	b	2e5c0 <flatcc_json_parser_unmatched_symbol@@Base+0x94>
   2e630:	add	r0, r1, #1
   2e634:	sub	r3, r4, r0
   2e638:	cmp	r3, #1
   2e63c:	ble	2e650 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   2e640:	ldrb	r3, [r1, #1]
   2e644:	cmp	r3, #32
   2e648:	bhi	2e660 <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   2e64c:	beq	2e694 <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2e650:	mov	r1, r0
   2e654:	mov	r2, r4
   2e658:	mov	r0, r5
   2e65c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2e660:	mov	r2, r4
   2e664:	mov	r1, r0
   2e668:	ldr	r6, [sp, #8]
   2e66c:	mov	r0, r5
   2e670:	ldrd	r4, [sp]
   2e674:	ldr	lr, [sp, #12]
   2e678:	add	sp, sp, #16
   2e67c:	b	2d678 <flatcc_json_parser_generic_json@@Base>
   2e680:	ldrb	r3, [r1, #1]
   2e684:	cmp	r3, #32
   2e688:	addhi	r1, r1, #1
   2e68c:	bls	2e5dc <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   2e690:	b	2e5ec <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2e694:	ldrb	r3, [r1, #2]
   2e698:	cmp	r3, #32
   2e69c:	addhi	r0, r1, #2
   2e6a0:	bls	2e650 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   2e6a4:	b	2e660 <flatcc_json_parser_unmatched_symbol@@Base+0x134>

0002e6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2e6a8:	cmp	r1, r2
   2e6ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e6b0:	mov	r5, r2
   2e6b4:	strd	r6, [sp, #8]
   2e6b8:	mov	r7, r0
   2e6bc:	strd	r8, [sp, #16]
   2e6c0:	mov	r9, r3
   2e6c4:	strd	sl, [sp, #24]
   2e6c8:	str	lr, [sp, #32]
   2e6cc:	sub	sp, sp, #36	; 0x24
   2e6d0:	ldr	sl, [sp, #72]	; 0x48
   2e6d4:	beq	2e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e6d8:	ldrb	r3, [r1]
   2e6dc:	cmp	r3, #34	; 0x22
   2e6e0:	addeq	r4, r1, #1
   2e6e4:	bne	2e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e6e8:	mov	r2, r5
   2e6ec:	mov	r1, r4
   2e6f0:	mov	r0, r7
   2e6f4:	bl	2c504 <flatcc_json_parser_string_part@@Base>
   2e6f8:	cmp	r5, r0
   2e6fc:	mov	r6, r0
   2e700:	beq	2e820 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2e704:	ldrb	r3, [r0]
   2e708:	cmp	r3, #34	; 0x22
   2e70c:	bne	2e820 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2e710:	sub	fp, r0, r4
   2e714:	lsr	r8, fp, #2
   2e718:	and	r3, fp, #3
   2e71c:	cmp	r3, #2
   2e720:	add	r8, r8, r8, lsl #1
   2e724:	addeq	r8, r8, #1
   2e728:	beq	2e734 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x8c>
   2e72c:	cmp	r3, #3
   2e730:	addeq	r8, r8, #2
   2e734:	mov	r2, #1
   2e738:	mvn	r3, #0
   2e73c:	ldr	r0, [r7]
   2e740:	mov	r1, r2
   2e744:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   2e748:	cmp	r0, #0
   2e74c:	bne	2e878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2e750:	mov	r1, r8
   2e754:	ldr	r0, [r7]
   2e758:	bl	26168 <flatcc_builder_extend_vector@@Base>
   2e75c:	subs	r3, r0, #0
   2e760:	str	r3, [sp]
   2e764:	beq	2e878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2e768:	cmp	sl, #0
   2e76c:	bne	2e894 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   2e770:	ldr	r3, [pc, #844]	; 2eac4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   2e774:	add	r3, pc, r3
   2e778:	add	lr, r3, #1728	; 0x6c0
   2e77c:	add	lr, lr, #4
   2e780:	ldr	r2, [sp]
   2e784:	cmp	r8, #0
   2e788:	mov	ip, r4
   2e78c:	movne	r3, r8
   2e790:	mvneq	r3, #0
   2e794:	str	fp, [sp, #4]
   2e798:	add	r3, r2, r3
   2e79c:	strd	r2, [sp, #8]
   2e7a0:	ldr	r3, [sp, #4]
   2e7a4:	ldr	r2, [sp, #8]
   2e7a8:	cmp	r3, #0
   2e7ac:	ldr	r3, [sp, #12]
   2e7b0:	sub	r3, r3, r2
   2e7b4:	str	r3, [sp, #16]
   2e7b8:	beq	2ea08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2e7bc:	ldr	r1, [sp, #4]
   2e7c0:	mov	r2, #0
   2e7c4:	ldrb	r3, [ip, r2]
   2e7c8:	ldrb	r0, [lr, r3]
   2e7cc:	add	r3, sp, #32
   2e7d0:	add	r3, r3, r2
   2e7d4:	cmp	r0, #63	; 0x3f
   2e7d8:	strb	r0, [r3, #-4]
   2e7dc:	bls	2e8a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
   2e7e0:	cmp	r0, #65	; 0x41
   2e7e4:	beq	2e8c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   2e7e8:	cmp	r0, #66	; 0x42
   2e7ec:	movne	r3, r2
   2e7f0:	beq	2e8d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   2e7f4:	sub	r3, r1, r3
   2e7f8:	cmp	r2, #2
   2e7fc:	beq	2e9d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x32c>
   2e800:	cmp	r2, #3
   2e804:	beq	2e924 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
   2e808:	cmp	r2, #0
   2e80c:	subeq	r3, fp, r3
   2e810:	beq	2ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x364>
   2e814:	ldr	r3, [sp, #4]
   2e818:	sub	r6, fp, r3
   2e81c:	add	r6, r4, r6
   2e820:	mov	ip, #0
   2e824:	mov	r2, r5
   2e828:	cmp	sl, ip
   2e82c:	mov	r1, r6
   2e830:	mov	r0, r7
   2e834:	movne	r3, #32
   2e838:	str	ip, [r9]
   2e83c:	moveq	r3, #31
   2e840:	add	sp, sp, #36	; 0x24
   2e844:	ldrd	r4, [sp]
   2e848:	ldrd	r6, [sp, #8]
   2e84c:	ldrd	r8, [sp, #16]
   2e850:	ldrd	sl, [sp, #24]
   2e854:	ldr	lr, [sp, #32]
   2e858:	add	sp, sp, #36	; 0x24
   2e85c:	b	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e860:	mov	r3, #16
   2e864:	mov	r2, r5
   2e868:	mov	r0, r7
   2e86c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2e870:	mov	r4, r0
   2e874:	b	2e6e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2e878:	mov	r3, #0
   2e87c:	mov	r2, r5
   2e880:	mov	r1, r6
   2e884:	mov	r0, r7
   2e888:	str	r3, [r9]
   2e88c:	mov	r3, #33	; 0x21
   2e890:	b	2e840 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2e894:	ldr	r3, [pc, #556]	; 2eac8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   2e898:	add	r3, pc, r3
   2e89c:	add	lr, r3, #1472	; 0x5c0
   2e8a0:	add	lr, lr, #4
   2e8a4:	b	2e780 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   2e8a8:	add	r2, r2, #1
   2e8ac:	cmp	r2, #3
   2e8b0:	bhi	2ea3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   2e8b4:	cmp	r1, r2
   2e8b8:	bne	2e7c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   2e8bc:	mov	r3, #0
   2e8c0:	b	2e7f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x150>
   2e8c4:	add	ip, ip, #1
   2e8c8:	sub	r1, r1, #1
   2e8cc:	b	2e8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   2e8d0:	add	r3, r2, #1
   2e8d4:	cmp	r3, #7
   2e8d8:	cmpls	r3, r1
   2e8dc:	bcs	2e7f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2e8e0:	ldrb	r0, [ip, r3]
   2e8e4:	add	ip, ip, r3
   2e8e8:	ldrb	r0, [lr, r0]
   2e8ec:	sub	r0, r0, #65	; 0x41
   2e8f0:	cmp	r0, #1
   2e8f4:	bls	2e910 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   2e8f8:	b	2e7f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2e8fc:	ldrb	r0, [ip, #1]!
   2e900:	ldrb	r0, [lr, r0]
   2e904:	sub	r0, r0, #65	; 0x41
   2e908:	cmp	r0, #1
   2e90c:	bhi	2e7f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2e910:	add	r3, r3, #1
   2e914:	cmp	r3, #7
   2e918:	cmpls	r3, r1
   2e91c:	bcc	2e8fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   2e920:	b	2e7f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2e924:	ldrb	r2, [sp, #30]
   2e928:	lsl	r1, r2, #6
   2e92c:	tst	r1, #192	; 0xc0
   2e930:	bne	2e814 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2e934:	ldr	r1, [sp, #16]
   2e938:	cmp	r1, #1
   2e93c:	beq	2e814 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2e940:	ldrb	r0, [sp, #29]
   2e944:	lsr	r2, r2, #2
   2e948:	sub	r3, fp, r3
   2e94c:	ldr	r1, [sp, #8]
   2e950:	ldr	ip, [sp]
   2e954:	orr	r2, r2, r0, lsl #4
   2e958:	ldrb	lr, [sp, #28]
   2e95c:	add	r1, r1, #2
   2e960:	sub	r1, r1, ip
   2e964:	lsr	ip, r0, #4
   2e968:	ldr	r0, [sp, #8]
   2e96c:	orr	ip, ip, lr, lsl #2
   2e970:	strb	ip, [r0]
   2e974:	strb	r2, [r0, #1]
   2e978:	cmp	fp, r3
   2e97c:	addne	r6, r4, r3
   2e980:	bne	2e820 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2e984:	cmp	r8, r1
   2e988:	ldr	r0, [r7]
   2e98c:	bls	2e9a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   2e990:	sub	r1, r8, r1
   2e994:	bl	2685c <flatcc_builder_truncate_vector@@Base>
   2e998:	cmp	r0, #0
   2e99c:	bne	2e878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2e9a0:	ldr	r0, [r7]
   2e9a4:	bl	27a9c <flatcc_builder_end_vector@@Base>
   2e9a8:	cmp	r0, #0
   2e9ac:	str	r0, [r9]
   2e9b0:	beq	2e878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2e9b4:	ldrb	r3, [r6]
   2e9b8:	cmp	r3, #34	; 0x22
   2e9bc:	beq	2ea1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x374>
   2e9c0:	mov	r2, r5
   2e9c4:	mov	r1, r6
   2e9c8:	mov	r0, r7
   2e9cc:	mov	r3, #20
   2e9d0:	b	2e840 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2e9d4:	ldrb	r2, [sp, #29]
   2e9d8:	lsl	r1, r2, #4
   2e9dc:	tst	r1, #240	; 0xf0
   2e9e0:	bne	2e814 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2e9e4:	ldrb	r0, [sp, #28]
   2e9e8:	lsr	r2, r2, #4
   2e9ec:	sub	r3, fp, r3
   2e9f0:	ldr	r1, [sp, #8]
   2e9f4:	orr	r2, r2, r0, lsl #2
   2e9f8:	strb	r2, [r1], #1
   2e9fc:	ldr	r2, [sp]
   2ea00:	sub	r1, r1, r2
   2ea04:	b	2e978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2ea08:	mov	r3, fp
   2ea0c:	ldr	r1, [sp]
   2ea10:	ldr	r2, [sp, #8]
   2ea14:	sub	r1, r2, r1
   2ea18:	b	2e978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2ea1c:	add	r0, r6, #1
   2ea20:	add	sp, sp, #36	; 0x24
   2ea24:	ldrd	r4, [sp]
   2ea28:	ldrd	r6, [sp, #8]
   2ea2c:	ldrd	r8, [sp, #16]
   2ea30:	ldrd	sl, [sp, #24]
   2ea34:	add	sp, sp, #32
   2ea38:	pop	{pc}		; (ldr pc, [sp], #4)
   2ea3c:	ldr	r3, [sp, #16]
   2ea40:	cmp	r3, #2
   2ea44:	bls	2e814 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2ea48:	ldrb	r2, [sp, #29]
   2ea4c:	sub	r3, r1, #4
   2ea50:	add	ip, ip, #4
   2ea54:	ldrb	r0, [sp, #28]
   2ea58:	str	r3, [sp, #4]
   2ea5c:	ldrb	r3, [sp, #30]
   2ea60:	lsr	r1, r2, #4
   2ea64:	str	r2, [sp, #16]
   2ea68:	ldrb	r2, [sp, #31]
   2ea6c:	orr	r1, r1, r0, lsl #2
   2ea70:	ldr	r0, [sp, #16]
   2ea74:	str	r2, [sp, #20]
   2ea78:	lsr	r2, r3, #2
   2ea7c:	orr	r2, r2, r0, lsl #4
   2ea80:	ldr	r0, [sp, #20]
   2ea84:	orr	r3, r0, r3, lsl #6
   2ea88:	ldr	r0, [sp, #8]
   2ea8c:	strb	r1, [r0]
   2ea90:	strb	r2, [r0, #1]
   2ea94:	ldr	r2, [sp, #12]
   2ea98:	strb	r3, [r0, #2]
   2ea9c:	add	r3, r0, #3
   2eaa0:	str	r3, [sp, #8]
   2eaa4:	cmp	r3, r2
   2eaa8:	bne	2e7a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   2eaac:	ldr	r2, [sp]
   2eab0:	ldr	r3, [sp, #8]
   2eab4:	sub	r1, r3, r2
   2eab8:	ldr	r3, [sp, #4]
   2eabc:	sub	r3, fp, r3
   2eac0:	b	2e978 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   2eac4:	andeq	r3, r1, ip, lsr fp
   2eac8:	andeq	r3, r1, r8, lsl sl

0002eacc <flatcc_json_parser_build_string@@Base>:
   2eacc:	cmp	r1, r2
   2ead0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2ead4:	mov	r5, r0
   2ead8:	strd	r6, [sp, #8]
   2eadc:	mov	r6, r2
   2eae0:	strd	r8, [sp, #16]
   2eae4:	mov	r8, r3
   2eae8:	str	sl, [sp, #24]
   2eaec:	str	lr, [sp, #28]
   2eaf0:	sub	sp, sp, #8
   2eaf4:	beq	2eb68 <flatcc_json_parser_build_string@@Base+0x9c>
   2eaf8:	ldrb	r3, [r1]
   2eafc:	cmp	r3, #34	; 0x22
   2eb00:	addeq	r7, r1, #1
   2eb04:	bne	2eb68 <flatcc_json_parser_build_string@@Base+0x9c>
   2eb08:	mov	r2, r6
   2eb0c:	mov	r1, r7
   2eb10:	mov	r0, r5
   2eb14:	bl	2c504 <flatcc_json_parser_string_part@@Base>
   2eb18:	cmp	r6, r0
   2eb1c:	mov	r4, r0
   2eb20:	beq	2ec54 <flatcc_json_parser_build_string@@Base+0x188>
   2eb24:	ldrb	r3, [r0]
   2eb28:	ldr	r0, [r5]
   2eb2c:	cmp	r3, #34	; 0x22
   2eb30:	beq	2ec5c <flatcc_json_parser_build_string@@Base+0x190>
   2eb34:	bl	26bbc <flatcc_builder_start_string@@Base>
   2eb38:	cmp	r0, #0
   2eb3c:	beq	2eb80 <flatcc_json_parser_build_string@@Base+0xb4>
   2eb40:	mov	r3, #0
   2eb44:	str	r3, [r8]
   2eb48:	mov	r0, r4
   2eb4c:	add	sp, sp, #8
   2eb50:	ldrd	r4, [sp]
   2eb54:	ldrd	r6, [sp, #8]
   2eb58:	ldrd	r8, [sp, #16]
   2eb5c:	ldr	sl, [sp, #24]
   2eb60:	add	sp, sp, #28
   2eb64:	pop	{pc}		; (ldr pc, [sp], #4)
   2eb68:	mov	r3, #16
   2eb6c:	mov	r2, r6
   2eb70:	mov	r0, r5
   2eb74:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2eb78:	mov	r7, r0
   2eb7c:	b	2eb08 <flatcc_json_parser_build_string@@Base+0x3c>
   2eb80:	sub	r2, r4, r7
   2eb84:	mov	r1, r7
   2eb88:	ldr	r0, [r5]
   2eb8c:	bl	266f8 <flatcc_builder_append_string@@Base>
   2eb90:	cmp	r0, #0
   2eb94:	beq	2eb40 <flatcc_json_parser_build_string@@Base+0x74>
   2eb98:	cmp	r6, r4
   2eb9c:	beq	2ec28 <flatcc_json_parser_build_string@@Base+0x15c>
   2eba0:	ldrb	r3, [r4]
   2eba4:	cmp	r3, #34	; 0x22
   2eba8:	beq	2ec80 <flatcc_json_parser_build_string@@Base+0x1b4>
   2ebac:	add	sl, sp, #4
   2ebb0:	add	r9, sp, #5
   2ebb4:	b	2ebd4 <flatcc_json_parser_build_string@@Base+0x108>
   2ebb8:	ldr	r0, [r5]
   2ebbc:	bl	266f8 <flatcc_builder_append_string@@Base>
   2ebc0:	cmp	r0, #0
   2ebc4:	beq	2eb40 <flatcc_json_parser_build_string@@Base+0x74>
   2ebc8:	ldrb	r3, [r4]
   2ebcc:	cmp	r3, #34	; 0x22
   2ebd0:	beq	2ec80 <flatcc_json_parser_build_string@@Base+0x1b4>
   2ebd4:	mov	r1, r4
   2ebd8:	mov	r3, sl
   2ebdc:	mov	r2, r6
   2ebe0:	mov	r0, r5
   2ebe4:	bl	2cca0 <flatcc_json_parser_string_escape@@Base>
   2ebe8:	mov	r7, r0
   2ebec:	ldrb	r2, [sp, #4]
   2ebf0:	mov	r1, r9
   2ebf4:	ldr	r0, [r5]
   2ebf8:	bl	266f8 <flatcc_builder_append_string@@Base>
   2ebfc:	cmp	r0, #0
   2ec00:	mov	r2, r6
   2ec04:	mov	r1, r7
   2ec08:	mov	r0, r5
   2ec0c:	beq	2ec90 <flatcc_json_parser_build_string@@Base+0x1c4>
   2ec10:	bl	2c504 <flatcc_json_parser_string_part@@Base>
   2ec14:	cmp	r6, r0
   2ec18:	mov	r4, r0
   2ec1c:	mov	r1, r7
   2ec20:	sub	r2, r0, r7
   2ec24:	bne	2ebb8 <flatcc_json_parser_build_string@@Base+0xec>
   2ec28:	mov	r4, r6
   2ec2c:	ldr	r0, [r5]
   2ec30:	bl	28750 <flatcc_builder_end_string@@Base>
   2ec34:	str	r0, [r8]
   2ec38:	mov	r1, r4
   2ec3c:	mov	r2, r6
   2ec40:	mov	r0, r5
   2ec44:	mov	r3, #20
   2ec48:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2ec4c:	mov	r4, r0
   2ec50:	b	2eb48 <flatcc_json_parser_build_string@@Base+0x7c>
   2ec54:	ldr	r0, [r5]
   2ec58:	b	2eb34 <flatcc_json_parser_build_string@@Base+0x68>
   2ec5c:	sub	r2, r4, r7
   2ec60:	mov	r1, r7
   2ec64:	bl	285b0 <flatcc_builder_create_string@@Base>
   2ec68:	str	r0, [r8]
   2ec6c:	ldrb	r3, [r4]
   2ec70:	cmp	r3, #34	; 0x22
   2ec74:	addeq	r4, r4, #1
   2ec78:	beq	2eb48 <flatcc_json_parser_build_string@@Base+0x7c>
   2ec7c:	b	2ec38 <flatcc_json_parser_build_string@@Base+0x16c>
   2ec80:	ldr	r0, [r5]
   2ec84:	bl	28750 <flatcc_builder_end_string@@Base>
   2ec88:	str	r0, [r8]
   2ec8c:	b	2ec6c <flatcc_json_parser_build_string@@Base+0x1a0>
   2ec90:	mov	r4, r7
   2ec94:	b	2eb40 <flatcc_json_parser_build_string@@Base+0x74>

0002ec98 <flatcc_json_parser_prepare_unions@@Base>:
   2ec98:	add	ip, r3, r3, lsl #1
   2ec9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2eca0:	mov	r5, r0
   2eca4:	ldr	r0, [r0]
   2eca8:	mov	r4, r3
   2ecac:	strd	r6, [sp, #8]
   2ecb0:	mov	r6, r1
   2ecb4:	lsl	r1, ip, #3
   2ecb8:	ldr	r7, [sp, #24]
   2ecbc:	add	r1, r1, #8
   2ecc0:	str	r8, [sp, #16]
   2ecc4:	mov	r8, r2
   2ecc8:	str	lr, [sp, #20]
   2eccc:	bl	256d0 <flatcc_builder_enter_user_frame@@Base>
   2ecd0:	cmp	r0, #0
   2ecd4:	str	r0, [r7]
   2ecd8:	beq	2ed04 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2ecdc:	mov	r1, r0
   2ece0:	ldr	r0, [r5]
   2ece4:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2ece8:	ldr	r8, [sp, #16]
   2ecec:	str	r4, [r0]
   2ecf0:	mov	r0, r6
   2ecf4:	ldrd	r4, [sp]
   2ecf8:	ldrd	r6, [sp, #8]
   2ecfc:	add	sp, sp, #20
   2ed00:	pop	{pc}		; (ldr pc, [sp], #4)
   2ed04:	mov	r2, r8
   2ed08:	mov	r1, r6
   2ed0c:	ldrd	r6, [sp, #8]
   2ed10:	mov	r0, r5
   2ed14:	mov	r3, #33	; 0x21
   2ed18:	ldrd	r4, [sp]
   2ed1c:	ldr	r8, [sp, #16]
   2ed20:	ldr	lr, [sp, #20]
   2ed24:	add	sp, sp, #24
   2ed28:	b	2c4d8 <flatcc_json_parser_set_error@@Base>

0002ed2c <flatcc_json_parser_finalize_unions@@Base>:
   2ed2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ed30:	mov	r4, r0
   2ed34:	mov	r5, r3
   2ed38:	ldr	r0, [r0]
   2ed3c:	strd	r6, [sp, #8]
   2ed40:	mov	r6, r1
   2ed44:	mov	r1, r3
   2ed48:	mov	r7, r2
   2ed4c:	str	r8, [sp, #16]
   2ed50:	str	lr, [sp, #20]
   2ed54:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2ed58:	ldr	r3, [r0, #4]
   2ed5c:	cmp	r3, #0
   2ed60:	bne	2ed88 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   2ed64:	mov	r1, r5
   2ed68:	ldr	r0, [r4]
   2ed6c:	bl	257dc <flatcc_builder_exit_user_frame_at@@Base>
   2ed70:	mov	r0, r6
   2ed74:	ldrd	r4, [sp]
   2ed78:	ldrd	r6, [sp, #8]
   2ed7c:	ldr	r8, [sp, #16]
   2ed80:	add	sp, sp, #20
   2ed84:	pop	{pc}		; (ldr pc, [sp], #4)
   2ed88:	mov	r1, r6
   2ed8c:	mov	r2, r7
   2ed90:	mov	r3, #27
   2ed94:	mov	r0, r4
   2ed98:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2ed9c:	mov	r6, r0
   2eda0:	b	2ed64 <flatcc_json_parser_finalize_unions@@Base+0x38>

0002eda4 <flatcc_json_parser_union@@Base>:
   2eda4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2eda8:	mov	r5, r0
   2edac:	mov	r4, r3
   2edb0:	ldr	r0, [r0]
   2edb4:	strd	r6, [sp, #8]
   2edb8:	mov	r6, r2
   2edbc:	str	r8, [sp, #16]
   2edc0:	mov	r8, r1
   2edc4:	str	lr, [sp, #20]
   2edc8:	sub	sp, sp, #16
   2edcc:	ldr	r1, [sp, #44]	; 0x2c
   2edd0:	ldrh	r7, [sp, #40]	; 0x28
   2edd4:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2edd8:	add	r3, r4, r4, lsl #1
   2eddc:	add	r3, r0, r3, lsl #3
   2ede0:	ldr	r2, [r3, #8]
   2ede4:	cmp	r2, #0
   2ede8:	bne	2eec8 <flatcc_json_parser_union@@Base+0x124>
   2edec:	ldrb	r2, [r3, #20]
   2edf0:	mov	ip, r0
   2edf4:	cmp	r2, #0
   2edf8:	beq	2ee78 <flatcc_json_parser_union@@Base+0xd4>
   2edfc:	ldrb	r3, [r3, #21]
   2ee00:	cmp	r3, #0
   2ee04:	strb	r3, [sp, #8]
   2ee08:	beq	2eee4 <flatcc_json_parser_union@@Base+0x140>
   2ee0c:	ldr	lr, [ip, #4]
   2ee10:	mov	r1, r8
   2ee14:	mov	r2, r6
   2ee18:	mov	r0, r5
   2ee1c:	add	r8, sp, #8
   2ee20:	sub	lr, lr, #1
   2ee24:	str	lr, [ip, #4]
   2ee28:	add	ip, sp, #12
   2ee2c:	str	ip, [sp]
   2ee30:	ldr	ip, [sp, #48]	; 0x30
   2ee34:	blx	ip
   2ee38:	cmp	r6, r0
   2ee3c:	mov	r4, r0
   2ee40:	beq	2eeac <flatcc_json_parser_union@@Base+0x108>
   2ee44:	mov	r1, r7
   2ee48:	ldm	r8, {r2, r3}
   2ee4c:	ldr	r0, [r5]
   2ee50:	bl	28c68 <flatcc_builder_table_add_union@@Base>
   2ee54:	cmp	r0, #0
   2ee58:	beq	2eeac <flatcc_json_parser_union@@Base+0x108>
   2ee5c:	mov	r1, r4
   2ee60:	mov	r2, r6
   2ee64:	mov	r0, r5
   2ee68:	mov	r3, #28
   2ee6c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2ee70:	mov	r4, r0
   2ee74:	b	2eeac <flatcc_json_parser_union@@Base+0x108>
   2ee78:	ldr	lr, [ip, #4]
   2ee7c:	mov	r2, r6
   2ee80:	mov	r1, r8
   2ee84:	mov	r0, r5
   2ee88:	ldr	r6, [r5, #4]
   2ee8c:	ldr	r4, [r5, #12]
   2ee90:	add	lr, lr, #1
   2ee94:	str	lr, [ip, #4]
   2ee98:	str	r8, [r3, #8]
   2ee9c:	str	r6, [r3, #12]
   2eea0:	str	r4, [r3, #16]
   2eea4:	bl	2d678 <flatcc_json_parser_generic_json@@Base>
   2eea8:	mov	r4, r0
   2eeac:	mov	r0, r4
   2eeb0:	add	sp, sp, #16
   2eeb4:	ldrd	r4, [sp]
   2eeb8:	ldrd	r6, [sp, #8]
   2eebc:	ldr	r8, [sp, #16]
   2eec0:	add	sp, sp, #20
   2eec4:	pop	{pc}		; (ldr pc, [sp], #4)
   2eec8:	mov	r2, r6
   2eecc:	mov	r1, r8
   2eed0:	mov	r0, r5
   2eed4:	mov	r3, #28
   2eed8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2eedc:	mov	r4, r0
   2eee0:	b	2eeac <flatcc_json_parser_union@@Base+0x108>
   2eee4:	mov	r2, r6
   2eee8:	mov	r1, r8
   2eeec:	mov	r0, r5
   2eef0:	mov	r3, #25
   2eef4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2eef8:	mov	r4, r0
   2eefc:	b	2eeac <flatcc_json_parser_union@@Base+0x108>

0002ef00 <flatcc_json_parser_union_type@@Base>:
   2ef00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ef04:	mov	r5, r0
   2ef08:	add	r4, r3, r3, lsl #1
   2ef0c:	ldr	r0, [r0]
   2ef10:	strd	r6, [sp, #8]
   2ef14:	lsl	r4, r4, #3
   2ef18:	mov	r7, r2
   2ef1c:	strd	r8, [sp, #16]
   2ef20:	mov	r9, r1
   2ef24:	strd	sl, [sp, #24]
   2ef28:	str	lr, [sp, #32]
   2ef2c:	sub	sp, sp, #36	; 0x24
   2ef30:	ldrh	r3, [sp, #72]	; 0x48
   2ef34:	ldr	r1, [sp, #76]	; 0x4c
   2ef38:	str	r3, [sp, #12]
   2ef3c:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2ef40:	add	fp, r0, #8
   2ef44:	add	r6, fp, r4
   2ef48:	ldrb	r3, [r6, #12]
   2ef4c:	cmp	r3, #0
   2ef50:	bne	2f06c <flatcc_json_parser_union_type@@Base+0x16c>
   2ef54:	mov	sl, r0
   2ef58:	mov	r1, #0
   2ef5c:	str	r3, [sp, #20]
   2ef60:	mov	r0, #0
   2ef64:	mov	r3, #1
   2ef68:	cmp	r9, r7
   2ef6c:	strd	r0, [sp, #24]
   2ef70:	strh	r3, [r6, #12]
   2ef74:	beq	2f064 <flatcc_json_parser_union_type@@Base+0x164>
   2ef78:	add	r0, sp, #24
   2ef7c:	add	r3, sp, #20
   2ef80:	mov	r2, r7
   2ef84:	mov	r1, r9
   2ef88:	str	r0, [sp]
   2ef8c:	mov	r0, r5
   2ef90:	bl	2d528 <flatcc_json_parser_integer@@Base>
   2ef94:	cmp	r9, r0
   2ef98:	mov	r8, r0
   2ef9c:	bne	2f088 <flatcc_json_parser_union_type@@Base+0x188>
   2efa0:	add	r0, r6, #13
   2efa4:	mov	r1, r8
   2efa8:	ldr	r3, [sp, #80]	; 0x50
   2efac:	mov	r2, r7
   2efb0:	str	r0, [sp]
   2efb4:	mov	r0, r5
   2efb8:	bl	2c6e0 <flatcc_json_parser_space_ext@@Base+0x114>
   2efbc:	mov	r8, r0
   2efc0:	ldr	r1, [fp, r4]
   2efc4:	ldr	r3, [sl, #4]
   2efc8:	cmp	r1, #0
   2efcc:	beq	2f0d8 <flatcc_json_parser_union_type@@Base+0x1d8>
   2efd0:	cmp	r3, #0
   2efd4:	beq	2f124 <flatcc_json_parser_union_type@@Base+0x224>
   2efd8:	ldmib	r6, {ip, lr}
   2efdc:	sub	r3, r3, #1
   2efe0:	mov	r2, r7
   2efe4:	mov	r0, r5
   2efe8:	add	r4, sp, #24
   2efec:	ldr	r9, [r5, #12]
   2eff0:	str	r3, [sl, #4]
   2eff4:	ldr	sl, [r5, #4]
   2eff8:	str	ip, [r5, #4]
   2effc:	add	ip, sp, #28
   2f000:	str	lr, [r5, #12]
   2f004:	ldrb	r3, [r6, #13]
   2f008:	str	ip, [sp]
   2f00c:	ldr	ip, [sp, #84]	; 0x54
   2f010:	strb	r3, [sp, #24]
   2f014:	blx	ip
   2f018:	cmp	r7, r0
   2f01c:	moveq	r8, r7
   2f020:	beq	2f044 <flatcc_json_parser_union_type@@Base+0x144>
   2f024:	ldm	r4, {r2, r3}
   2f028:	ldr	r0, [r5]
   2f02c:	ldr	r1, [sp, #12]
   2f030:	bl	28c68 <flatcc_builder_table_add_union@@Base>
   2f034:	cmp	r0, #0
   2f038:	streq	sl, [r5, #4]
   2f03c:	streq	r9, [r5, #12]
   2f040:	bne	2f0ec <flatcc_json_parser_union_type@@Base+0x1ec>
   2f044:	mov	r0, r8
   2f048:	add	sp, sp, #36	; 0x24
   2f04c:	ldrd	r4, [sp]
   2f050:	ldrd	r6, [sp, #8]
   2f054:	ldrd	r8, [sp, #16]
   2f058:	ldrd	sl, [sp, #24]
   2f05c:	add	sp, sp, #32
   2f060:	pop	{pc}		; (ldr pc, [sp], #4)
   2f064:	mov	r8, r7
   2f068:	b	2efa0 <flatcc_json_parser_union_type@@Base+0xa0>
   2f06c:	mov	r2, r7
   2f070:	mov	r1, r9
   2f074:	mov	r0, r5
   2f078:	mov	r3, #28
   2f07c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f080:	mov	r8, r0
   2f084:	b	2f044 <flatcc_json_parser_union_type@@Base+0x144>
   2f088:	ldr	r3, [sp, #20]
   2f08c:	cmp	r3, #0
   2f090:	bne	2f108 <flatcc_json_parser_union_type@@Base+0x208>
   2f094:	ldrd	r2, [sp, #24]
   2f098:	cmp	r3, #0
   2f09c:	cmpeq	r2, #255	; 0xff
   2f0a0:	strbls	r2, [r6, #13]
   2f0a4:	bls	2efc0 <flatcc_json_parser_union_type@@Base+0xc0>
   2f0a8:	mov	r1, r0
   2f0ac:	mov	r3, #7
   2f0b0:	mov	r2, r7
   2f0b4:	mov	r0, r5
   2f0b8:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f0bc:	mov	r8, r0
   2f0c0:	cmp	r9, r8
   2f0c4:	beq	2efa0 <flatcc_json_parser_union_type@@Base+0xa0>
   2f0c8:	ldr	r1, [fp, r4]
   2f0cc:	ldr	r3, [sl, #4]
   2f0d0:	cmp	r1, #0
   2f0d4:	bne	2efd0 <flatcc_json_parser_union_type@@Base+0xd0>
   2f0d8:	ldrb	r2, [r6, #13]
   2f0dc:	cmp	r2, #0
   2f0e0:	addne	r3, r3, #1
   2f0e4:	str	r3, [sl, #4]
   2f0e8:	b	2f044 <flatcc_json_parser_union_type@@Base+0x144>
   2f0ec:	mov	r1, r8
   2f0f0:	mov	r2, r7
   2f0f4:	mov	r0, r5
   2f0f8:	mov	r3, #28
   2f0fc:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f100:	mov	r8, r0
   2f104:	b	2f044 <flatcc_json_parser_union_type@@Base+0x144>
   2f108:	mov	r1, r0
   2f10c:	mov	r3, #8
   2f110:	mov	r2, r7
   2f114:	mov	r0, r5
   2f118:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f11c:	mov	r8, r0
   2f120:	b	2f0c0 <flatcc_json_parser_union_type@@Base+0x1c0>
   2f124:	ldr	r3, [pc, #32]	; 2f14c <flatcc_json_parser_union_type@@Base+0x24c>
   2f128:	movw	r2, #965	; 0x3c5
   2f12c:	ldr	r1, [pc, #28]	; 2f150 <flatcc_json_parser_union_type@@Base+0x250>
   2f130:	ldr	r0, [pc, #28]	; 2f154 <flatcc_json_parser_union_type@@Base+0x254>
   2f134:	add	r3, pc, r3
   2f138:	add	r3, r3, #1984	; 0x7c0
   2f13c:	add	r1, pc, r1
   2f140:	add	r3, r3, #4
   2f144:	add	r0, pc, r0
   2f148:	bl	145e8 <__assert_fail@plt>
   2f14c:	andeq	r3, r1, ip, ror r1
   2f150:	andeq	r3, r1, r0, lsl #27
   2f154:	ldrdeq	r3, [r1], -ip

0002f158 <flatcc_json_parser_union_vector@@Base>:
   2f158:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2f15c:	mov	r4, r3
   2f160:	mov	r5, r0
   2f164:	ldr	r0, [r0]
   2f168:	strd	r6, [sp, #8]
   2f16c:	mov	r6, r1
   2f170:	ldr	r1, [sp, #36]	; 0x24
   2f174:	strd	r8, [sp, #16]
   2f178:	mov	r9, r2
   2f17c:	ldrh	r8, [sp, #32]
   2f180:	str	sl, [sp, #24]
   2f184:	str	lr, [sp, #28]
   2f188:	ldr	r7, [sp, #40]	; 0x28
   2f18c:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2f190:	add	r3, r4, r4, lsl #1
   2f194:	add	ip, r0, #8
   2f198:	lsl	r3, r3, #3
   2f19c:	ldr	r2, [ip, r3]
   2f1a0:	add	r4, ip, r3
   2f1a4:	cmp	r2, #0
   2f1a8:	bne	2f248 <flatcc_json_parser_union_vector@@Base+0xf0>
   2f1ac:	ldrb	r1, [r4, #12]
   2f1b0:	mov	lr, r0
   2f1b4:	ldr	r2, [r0, #4]
   2f1b8:	cmp	r1, #0
   2f1bc:	bne	2f204 <flatcc_json_parser_union_vector@@Base+0xac>
   2f1c0:	ldr	r8, [r5, #4]
   2f1c4:	add	r1, r2, #1
   2f1c8:	mov	r0, r5
   2f1cc:	mov	r2, r9
   2f1d0:	ldr	r7, [r5, #12]
   2f1d4:	ldr	sl, [sp, #24]
   2f1d8:	str	r1, [lr, #4]
   2f1dc:	mov	r1, r6
   2f1e0:	str	r8, [r4, #4]
   2f1e4:	str	r7, [r4, #8]
   2f1e8:	str	r6, [ip, r3]
   2f1ec:	ldrd	r4, [sp]
   2f1f0:	ldrd	r6, [sp, #8]
   2f1f4:	ldrd	r8, [sp, #16]
   2f1f8:	ldr	lr, [sp, #28]
   2f1fc:	add	sp, sp, #32
   2f200:	b	2d678 <flatcc_json_parser_generic_json@@Base>
   2f204:	sub	ip, r2, #1
   2f208:	ldr	r3, [r4, #20]
   2f20c:	mov	r2, r9
   2f210:	mov	r1, r6
   2f214:	mov	r0, r5
   2f218:	ldr	sl, [sp, #24]
   2f21c:	str	ip, [lr, #4]
   2f220:	str	r8, [sp, #36]	; 0x24
   2f224:	str	r7, [sp, #40]	; 0x28
   2f228:	ldr	ip, [r4, #16]
   2f22c:	ldrd	r4, [sp]
   2f230:	ldrd	r6, [sp, #8]
   2f234:	str	ip, [sp, #32]
   2f238:	ldrd	r8, [sp, #16]
   2f23c:	ldr	lr, [sp, #28]
   2f240:	add	sp, sp, #32
   2f244:	b	2c8c0 <flatcc_json_parser_space_ext@@Base+0x2f4>
   2f248:	mov	r2, r9
   2f24c:	mov	r1, r6
   2f250:	ldrd	r6, [sp, #8]
   2f254:	mov	r0, r5
   2f258:	mov	r3, #28
   2f25c:	ldrd	r4, [sp]
   2f260:	ldrd	r8, [sp, #16]
   2f264:	ldr	sl, [sp, #24]
   2f268:	ldr	lr, [sp, #28]
   2f26c:	add	sp, sp, #32
   2f270:	b	2c4d8 <flatcc_json_parser_set_error@@Base>

0002f274 <flatcc_json_parser_union_type_vector@@Base>:
   2f274:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f278:	add	r4, r3, r3, lsl #1
   2f27c:	mov	r5, r2
   2f280:	strd	r6, [sp, #8]
   2f284:	mov	r6, r0
   2f288:	mov	r7, r1
   2f28c:	strd	r8, [sp, #16]
   2f290:	strd	sl, [sp, #24]
   2f294:	str	lr, [sp, #32]
   2f298:	sub	sp, sp, #52	; 0x34
   2f29c:	ldrh	r3, [sp, #88]	; 0x58
   2f2a0:	ldr	r0, [r0]
   2f2a4:	ldr	r1, [sp, #92]	; 0x5c
   2f2a8:	str	r3, [sp, #24]
   2f2ac:	ldr	fp, [sp, #104]	; 0x68
   2f2b0:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2f2b4:	lsl	r3, r4, #3
   2f2b8:	add	r0, r0, #8
   2f2bc:	str	r3, [sp, #28]
   2f2c0:	add	r3, r0, r3
   2f2c4:	str	r3, [sp, #20]
   2f2c8:	ldrb	r3, [r3, #12]
   2f2cc:	cmp	r3, #0
   2f2d0:	bne	2f3c4 <flatcc_json_parser_union_type_vector@@Base+0x150>
   2f2d4:	ldr	ip, [sp, #20]
   2f2d8:	mov	r0, #1
   2f2dc:	mvn	r3, #0
   2f2e0:	mov	r2, r0
   2f2e4:	mov	r1, r0
   2f2e8:	strb	r0, [ip, #12]
   2f2ec:	ldr	r0, [r6]
   2f2f0:	bl	26ab0 <flatcc_builder_start_vector@@Base>
   2f2f4:	cmp	r0, #0
   2f2f8:	beq	2f334 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   2f2fc:	mov	r2, r5
   2f300:	mov	r1, r7
   2f304:	mov	r0, r6
   2f308:	mov	r3, #33	; 0x21
   2f30c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f310:	mov	r4, r0
   2f314:	mov	r0, r4
   2f318:	add	sp, sp, #52	; 0x34
   2f31c:	ldrd	r4, [sp]
   2f320:	ldrd	r6, [sp, #8]
   2f324:	ldrd	r8, [sp, #16]
   2f328:	ldrd	sl, [sp, #24]
   2f32c:	add	sp, sp, #32
   2f330:	pop	{pc}		; (ldr pc, [sp], #4)
   2f334:	cmp	r7, r5
   2f338:	beq	2f348 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   2f33c:	ldrb	r3, [r7]
   2f340:	cmp	r3, #91	; 0x5b
   2f344:	beq	2f3e0 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   2f348:	mov	r1, r7
   2f34c:	mov	r3, #22
   2f350:	mov	r2, r5
   2f354:	mov	r0, r6
   2f358:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f35c:	mov	r4, r0
   2f360:	ldr	r0, [r6]
   2f364:	bl	27b9c <flatcc_builder_vector_count@@Base>
   2f368:	ldr	r3, [sp, #20]
   2f36c:	mov	r7, r0
   2f370:	mov	r1, r0
   2f374:	ldr	r0, [r6]
   2f378:	str	r7, [r3, #16]
   2f37c:	bl	256d0 <flatcc_builder_enter_user_frame@@Base>
   2f380:	mov	r1, r0
   2f384:	mov	r8, r0
   2f388:	ldr	r0, [r6]
   2f38c:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2f390:	mov	r9, r0
   2f394:	ldr	r0, [r6]
   2f398:	bl	27ba8 <flatcc_builder_vector_edit@@Base>
   2f39c:	mov	r1, r0
   2f3a0:	mov	r2, r7
   2f3a4:	mov	r0, r9
   2f3a8:	bl	1451c <memcpy@plt>
   2f3ac:	ldr	r0, [r6]
   2f3b0:	bl	27a9c <flatcc_builder_end_vector@@Base>
   2f3b4:	subs	r9, r0, #0
   2f3b8:	bne	2f550 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   2f3bc:	mov	r7, r4
   2f3c0:	b	2f2fc <flatcc_json_parser_union_type_vector@@Base+0x88>
   2f3c4:	mov	r2, r5
   2f3c8:	mov	r1, r7
   2f3cc:	mov	r0, r6
   2f3d0:	mov	r3, #28
   2f3d4:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f3d8:	mov	r4, r0
   2f3dc:	b	2f314 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2f3e0:	add	r1, r7, #1
   2f3e4:	sub	r3, r5, r1
   2f3e8:	cmp	r3, #1
   2f3ec:	ble	2f414 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2f3f0:	ldrb	r3, [r7, #1]
   2f3f4:	cmp	r3, #32
   2f3f8:	movhi	r7, r1
   2f3fc:	bhi	2f424 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   2f400:	bne	2f414 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2f404:	ldrb	r3, [r7, #2]
   2f408:	cmp	r3, #32
   2f40c:	addhi	r7, r7, #2
   2f410:	bhi	2f424 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   2f414:	mov	r2, r5
   2f418:	mov	r0, r6
   2f41c:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2f420:	mov	r7, r0
   2f424:	cmp	r5, r7
   2f428:	beq	2f438 <flatcc_json_parser_union_type_vector@@Base+0x1c4>
   2f42c:	ldrb	r3, [r7]
   2f430:	cmp	r3, #93	; 0x5d
   2f434:	beq	2f6f8 <flatcc_json_parser_union_type_vector@@Base+0x484>
   2f438:	mov	r9, #0
   2f43c:	mov	r1, #1
   2f440:	ldr	r0, [r6]
   2f444:	bl	26168 <flatcc_builder_extend_vector@@Base>
   2f448:	subs	r8, r0, #0
   2f44c:	beq	2f2fc <flatcc_json_parser_union_type_vector@@Base+0x88>
   2f450:	mov	r2, #0
   2f454:	mov	r3, #0
   2f458:	strb	r9, [sp, #35]	; 0x23
   2f45c:	cmp	r5, r7
   2f460:	str	r9, [sp, #36]	; 0x24
   2f464:	strd	r2, [sp, #40]	; 0x28
   2f468:	beq	2f60c <flatcc_json_parser_union_type_vector@@Base+0x398>
   2f46c:	add	r0, sp, #40	; 0x28
   2f470:	add	r3, sp, #36	; 0x24
   2f474:	mov	r2, r5
   2f478:	mov	r1, r7
   2f47c:	str	r0, [sp]
   2f480:	mov	r0, r6
   2f484:	bl	2d528 <flatcc_json_parser_integer@@Base>
   2f488:	cmp	r7, r0
   2f48c:	mov	sl, r0
   2f490:	bne	2f614 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2f494:	add	r0, sp, #35	; 0x23
   2f498:	mov	r2, r5
   2f49c:	ldr	r3, [sp, #96]	; 0x60
   2f4a0:	mov	r1, sl
   2f4a4:	str	r0, [sp]
   2f4a8:	mov	r0, r6
   2f4ac:	bl	2c6e0 <flatcc_json_parser_space_ext@@Base+0x114>
   2f4b0:	cmp	r5, r0
   2f4b4:	cmpne	r0, sl
   2f4b8:	mov	r4, r0
   2f4bc:	beq	2f3bc <flatcc_json_parser_union_type_vector@@Base+0x148>
   2f4c0:	ldrb	r0, [sp, #35]	; 0x23
   2f4c4:	blx	fp
   2f4c8:	cmp	r0, #0
   2f4cc:	bne	2f604 <flatcc_json_parser_union_type_vector@@Base+0x390>
   2f4d0:	ldr	r3, [r6, #8]
   2f4d4:	tst	r3, #1
   2f4d8:	beq	2f774 <flatcc_json_parser_union_type_vector@@Base+0x500>
   2f4dc:	mov	r2, r0
   2f4e0:	strb	r0, [sp, #35]	; 0x23
   2f4e4:	sub	r3, r5, r4
   2f4e8:	strb	r2, [r8]
   2f4ec:	cmp	r3, #1
   2f4f0:	ble	2f504 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2f4f4:	ldrb	r3, [r4]
   2f4f8:	cmp	r3, #32
   2f4fc:	bhi	2f518 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2f500:	beq	2f69c <flatcc_json_parser_union_type_vector@@Base+0x428>
   2f504:	mov	r1, r4
   2f508:	mov	r2, r5
   2f50c:	mov	r0, r6
   2f510:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2f514:	mov	r4, r0
   2f518:	cmp	r5, r4
   2f51c:	beq	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f520:	ldrb	r3, [r4]
   2f524:	cmp	r3, #44	; 0x2c
   2f528:	beq	2f6b0 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2f52c:	cmp	r3, #93	; 0x5d
   2f530:	beq	2f664 <flatcc_json_parser_union_type_vector@@Base+0x3f0>
   2f534:	mov	r1, r4
   2f538:	mov	r3, #9
   2f53c:	mov	r2, r5
   2f540:	mov	r0, r6
   2f544:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f548:	mov	r4, r0
   2f54c:	b	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f550:	ldr	r3, [sp, #24]
   2f554:	ldr	r0, [r6]
   2f558:	sub	r1, r3, #1
   2f55c:	bl	28ad8 <flatcc_builder_table_add_offset@@Base>
   2f560:	cmp	r0, #0
   2f564:	beq	2f3bc <flatcc_json_parser_union_type_vector@@Base+0x148>
   2f568:	str	r9, [r0]
   2f56c:	ldr	r0, [r6]
   2f570:	ldr	r1, [sp, #92]	; 0x5c
   2f574:	bl	25830 <flatcc_builder_get_user_frame_ptr@@Base>
   2f578:	ldr	r3, [sp, #28]
   2f57c:	add	r2, r0, #8
   2f580:	ldr	r1, [r2, r3]
   2f584:	add	r2, r2, r3
   2f588:	ldr	r3, [r0, #4]
   2f58c:	str	r8, [r2, #20]
   2f590:	cmp	r1, #0
   2f594:	addeq	r3, r3, #1
   2f598:	streq	r3, [r0, #4]
   2f59c:	beq	2f314 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2f5a0:	cmp	r3, #0
   2f5a4:	beq	2f7ac <flatcc_json_parser_union_type_vector@@Base+0x538>
   2f5a8:	sub	lr, r3, #1
   2f5ac:	mov	r3, r8
   2f5b0:	ldr	ip, [r2, #4]
   2f5b4:	ldr	r8, [r2, #8]
   2f5b8:	mov	r2, r5
   2f5bc:	str	lr, [r0, #4]
   2f5c0:	mov	r0, r6
   2f5c4:	ldr	lr, [sp, #24]
   2f5c8:	str	r7, [sp]
   2f5cc:	str	lr, [sp, #4]
   2f5d0:	ldr	lr, [sp, #100]	; 0x64
   2f5d4:	str	lr, [sp, #8]
   2f5d8:	ldr	r7, [r6, #12]
   2f5dc:	str	r8, [r6, #12]
   2f5e0:	ldr	r8, [r6, #4]
   2f5e4:	str	ip, [r6, #4]
   2f5e8:	bl	2c8c0 <flatcc_json_parser_space_ext@@Base+0x2f4>
   2f5ec:	cmp	r5, r0
   2f5f0:	moveq	r4, r5
   2f5f4:	beq	2f314 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2f5f8:	str	r8, [r6, #4]
   2f5fc:	str	r7, [r6, #12]
   2f600:	b	2f314 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2f604:	ldrb	r2, [sp, #35]	; 0x23
   2f608:	b	2f4e4 <flatcc_json_parser_union_type_vector@@Base+0x270>
   2f60c:	mov	sl, r5
   2f610:	b	2f494 <flatcc_json_parser_union_type_vector@@Base+0x220>
   2f614:	ldr	r3, [sp, #36]	; 0x24
   2f618:	cmp	r3, #0
   2f61c:	bne	2f730 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2f620:	ldrd	r0, [sp, #40]	; 0x28
   2f624:	cmp	r1, #0
   2f628:	cmpeq	r0, #255	; 0xff
   2f62c:	uxtbls	r0, r0
   2f630:	movls	r4, sl
   2f634:	strbls	r0, [sp, #35]	; 0x23
   2f638:	bls	2f4c4 <flatcc_json_parser_union_type_vector@@Base+0x250>
   2f63c:	mov	r1, sl
   2f640:	mov	r3, #7
   2f644:	mov	r2, r5
   2f648:	mov	r0, r6
   2f64c:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f650:	mov	r4, r0
   2f654:	cmp	r7, r4
   2f658:	bne	2f4c0 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2f65c:	mov	sl, r7
   2f660:	b	2f494 <flatcc_json_parser_union_type_vector@@Base+0x220>
   2f664:	add	r1, r4, #1
   2f668:	sub	r3, r5, r1
   2f66c:	cmp	r3, #1
   2f670:	ble	2f688 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2f674:	ldrb	r3, [r4, #1]
   2f678:	cmp	r3, #32
   2f67c:	movhi	r4, r1
   2f680:	bhi	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f684:	beq	2f74c <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   2f688:	mov	r2, r5
   2f68c:	mov	r0, r6
   2f690:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2f694:	mov	r4, r0
   2f698:	b	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f69c:	ldrb	r3, [r4, #1]
   2f6a0:	cmp	r3, #32
   2f6a4:	addhi	r4, r4, #1
   2f6a8:	bls	2f504 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2f6ac:	b	2f518 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2f6b0:	add	r7, r4, #1
   2f6b4:	sub	r3, r5, r7
   2f6b8:	cmp	r3, #1
   2f6bc:	ble	2f6d0 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2f6c0:	ldrb	r3, [r4, #1]
   2f6c4:	cmp	r3, #32
   2f6c8:	bhi	2f6e4 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2f6cc:	beq	2f760 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2f6d0:	mov	r1, r7
   2f6d4:	mov	r2, r5
   2f6d8:	mov	r0, r6
   2f6dc:	bl	2c5cc <flatcc_json_parser_space_ext@@Base>
   2f6e0:	mov	r7, r0
   2f6e4:	cmp	r5, r7
   2f6e8:	beq	2f790 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   2f6ec:	ldrb	r3, [r7]
   2f6f0:	cmp	r3, #93	; 0x5d
   2f6f4:	bne	2f43c <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2f6f8:	add	r4, r7, #1
   2f6fc:	sub	r3, r5, r4
   2f700:	cmp	r3, #1
   2f704:	ble	2f728 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2f708:	ldrb	r3, [r7, #1]
   2f70c:	cmp	r3, #32
   2f710:	bhi	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f714:	bne	2f728 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2f718:	ldrb	r3, [r7, #2]
   2f71c:	cmp	r3, #32
   2f720:	addhi	r4, r7, #2
   2f724:	bhi	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f728:	mov	r1, r4
   2f72c:	b	2f688 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2f730:	mov	r1, r0
   2f734:	mov	r3, #8
   2f738:	mov	r2, r5
   2f73c:	mov	r0, r6
   2f740:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f744:	mov	r4, r0
   2f748:	b	2f654 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   2f74c:	ldrb	r3, [r4, #2]
   2f750:	cmp	r3, #32
   2f754:	addhi	r4, r4, #2
   2f758:	bls	2f688 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2f75c:	b	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f760:	ldrb	r3, [r4, #2]
   2f764:	cmp	r3, #32
   2f768:	addhi	r7, r4, #2
   2f76c:	bls	2f6d0 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2f770:	b	2f6e4 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2f774:	mov	r1, r4
   2f778:	mov	r2, r5
   2f77c:	mov	r0, r6
   2f780:	mov	r3, #15
   2f784:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f788:	mov	r4, r0
   2f78c:	b	2f314 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2f790:	mov	r3, #9
   2f794:	mov	r2, r5
   2f798:	mov	r1, r5
   2f79c:	mov	r0, r6
   2f7a0:	bl	2c4d8 <flatcc_json_parser_set_error@@Base>
   2f7a4:	mov	r4, r0
   2f7a8:	b	2f360 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2f7ac:	ldr	r3, [pc, #32]	; 2f7d4 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2f7b0:	movw	r2, #1122	; 0x462
   2f7b4:	ldr	r1, [pc, #28]	; 2f7d8 <flatcc_json_parser_union_type_vector@@Base+0x564>
   2f7b8:	ldr	r0, [pc, #28]	; 2f7dc <flatcc_json_parser_union_type_vector@@Base+0x568>
   2f7bc:	add	r3, pc, r3
   2f7c0:	add	r3, r3, #2016	; 0x7e0
   2f7c4:	add	r1, pc, r1
   2f7c8:	add	r3, r3, #4
   2f7cc:	add	r0, pc, r0
   2f7d0:	bl	145e8 <__assert_fail@plt>
   2f7d4:	strdeq	r2, [r1], -r4
   2f7d8:	strdeq	r3, [r1], -r8
   2f7dc:	andeq	r3, r1, r4, asr r7

0002f7e0 <flatcc_json_parser_table_as_root@@Base>:
   2f7e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f7e4:	subs	r4, r1, #0
   2f7e8:	mov	r5, r2
   2f7ec:	strd	r6, [sp, #8]
   2f7f0:	mov	r7, r0
   2f7f4:	add	r6, r5, r3
   2f7f8:	str	lr, [sp, #16]
   2f7fc:	sub	sp, sp, #52	; 0x34
   2f800:	mov	r0, #0
   2f804:	ldr	ip, [sp, #72]	; 0x48
   2f808:	addeq	r4, sp, #8
   2f80c:	mov	lr, #1
   2f810:	str	r7, [r4]
   2f814:	ldr	r1, [sp, #76]	; 0x4c
   2f818:	asr	r2, ip, #1
   2f81c:	stmib	r4, {r5, ip, lr}
   2f820:	and	r2, r2, #2
   2f824:	mov	r3, r2
   2f828:	mov	r2, r0
   2f82c:	str	r0, [r4, #16]
   2f830:	str	r0, [r4, #20]
   2f834:	str	r5, [r4, #24]
   2f838:	str	r6, [r4, #28]
   2f83c:	str	r5, [r4, #32]
   2f840:	str	r0, [r4, #36]	; 0x24
   2f844:	mov	r0, r7
   2f848:	bl	25d88 <flatcc_builder_start_buffer@@Base>
   2f84c:	cmp	r0, #0
   2f850:	bne	2f8ac <flatcc_json_parser_table_as_root@@Base+0xcc>
   2f854:	mov	r2, r6
   2f858:	add	r3, sp, #4
   2f85c:	ldr	ip, [sp, #80]	; 0x50
   2f860:	mov	r1, r5
   2f864:	mov	r0, r4
   2f868:	blx	ip
   2f86c:	ldr	r6, [r4, #20]
   2f870:	cmp	r6, #0
   2f874:	beq	2f890 <flatcc_json_parser_table_as_root@@Base+0xb0>
   2f878:	mov	r0, r6
   2f87c:	add	sp, sp, #52	; 0x34
   2f880:	ldrd	r4, [sp]
   2f884:	ldrd	r6, [sp, #8]
   2f888:	add	sp, sp, #16
   2f88c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f890:	mov	r0, r7
   2f894:	ldr	r1, [sp, #4]
   2f898:	bl	25e64 <flatcc_builder_end_buffer@@Base>
   2f89c:	cmp	r0, #0
   2f8a0:	beq	2f8ac <flatcc_json_parser_table_as_root@@Base+0xcc>
   2f8a4:	str	r5, [r4, #36]	; 0x24
   2f8a8:	b	2f878 <flatcc_json_parser_table_as_root@@Base+0x98>
   2f8ac:	mvn	r6, #0
   2f8b0:	b	2f878 <flatcc_json_parser_table_as_root@@Base+0x98>

0002f8b4 <flatcc_json_parser_struct_as_root@@Base>:
   2f8b4:	b	2f7e0 <flatcc_json_parser_table_as_root@@Base>
   2f8b8:	cmp	r0, #1000	; 0x3e8
   2f8bc:	strd	r4, [sp, #-12]!
   2f8c0:	str	lr, [sp, #8]
   2f8c4:	bcc	2f9c4 <flatcc_json_parser_struct_as_root@@Base+0x110>
   2f8c8:	movw	r3, #34079	; 0x851f
   2f8cc:	movt	r3, #20971	; 0x51eb
   2f8d0:	ldr	r4, [pc, #316]	; 2fa14 <flatcc_json_parser_struct_as_root@@Base+0x160>
   2f8d4:	mov	r2, #100	; 0x64
   2f8d8:	movw	ip, #9999	; 0x270f
   2f8dc:	umull	lr, r3, r3, r0
   2f8e0:	cmp	r0, ip
   2f8e4:	lsr	r3, r3, #5
   2f8e8:	add	r4, pc, r4
   2f8ec:	uxth	ip, r3
   2f8f0:	mls	r3, r2, r3, r0
   2f8f4:	mov	r2, #0
   2f8f8:	uxth	r3, r3
   2f8fc:	add	r5, r4, r3, lsl #1
   2f900:	bls	2f97c <flatcc_json_parser_struct_as_root@@Base+0xc8>
   2f904:	strb	r2, [r1, #5]
   2f908:	add	lr, r1, #3
   2f90c:	mov	r2, #5
   2f910:	ldrb	r3, [r4, r3, lsl #1]
   2f914:	strb	r3, [r1, #3]
   2f918:	ldrb	r3, [r5, #1]
   2f91c:	strb	r3, [r1, #4]
   2f920:	movw	r3, #34079	; 0x851f
   2f924:	movt	r3, #20971	; 0x51eb
   2f928:	ldr	r1, [pc, #232]	; 2fa18 <flatcc_json_parser_struct_as_root@@Base+0x164>
   2f92c:	mov	r0, #100	; 0x64
   2f930:	sub	r4, lr, #2
   2f934:	umull	r5, r3, r3, ip
   2f938:	lsr	r3, r3, #5
   2f93c:	add	r1, pc, r1
   2f940:	mls	ip, r0, r3, ip
   2f944:	uxth	r0, r3
   2f948:	mov	r3, r1
   2f94c:	uxth	ip, ip
   2f950:	ldrb	r1, [r1, ip, lsl #1]
   2f954:	add	r3, r3, ip, lsl #1
   2f958:	strb	r1, [lr, #-2]
   2f95c:	ldrb	r3, [r3, #1]
   2f960:	strb	r3, [lr, #-1]
   2f964:	add	r3, r0, #48	; 0x30
   2f968:	mov	r0, r2
   2f96c:	strb	r3, [r4, #-1]
   2f970:	ldrd	r4, [sp]
   2f974:	add	sp, sp, #8
   2f978:	pop	{pc}		; (ldr pc, [sp], #4)
   2f97c:	strb	r2, [r1, #4]
   2f980:	add	r0, r1, #2
   2f984:	mov	r2, #4
   2f988:	ldrb	r3, [r4, r3, lsl #1]
   2f98c:	strb	r3, [r1, #2]
   2f990:	ldrb	r3, [r5, #1]
   2f994:	strb	r3, [r1, #3]
   2f998:	ldr	r3, [pc, #124]	; 2fa1c <flatcc_json_parser_struct_as_root@@Base+0x168>
   2f99c:	add	r3, pc, r3
   2f9a0:	ldrb	r1, [r3, ip, lsl #1]
   2f9a4:	add	ip, r3, ip, lsl #1
   2f9a8:	strb	r1, [r0, #-2]
   2f9ac:	ldrb	r3, [ip, #1]
   2f9b0:	strb	r3, [r0, #-1]
   2f9b4:	mov	r0, r2
   2f9b8:	ldrd	r4, [sp]
   2f9bc:	add	sp, sp, #8
   2f9c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f9c4:	cmp	r0, #99	; 0x63
   2f9c8:	bhi	2f9e8 <flatcc_json_parser_struct_as_root@@Base+0x134>
   2f9cc:	cmp	r0, #9
   2f9d0:	mov	r3, #0
   2f9d4:	bhi	2fa00 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2f9d8:	add	r4, r1, #1
   2f9dc:	mov	r2, #1
   2f9e0:	strb	r3, [r1, #1]
   2f9e4:	b	2f964 <flatcc_json_parser_struct_as_root@@Base+0xb0>
   2f9e8:	mov	r3, #0
   2f9ec:	mov	ip, r0
   2f9f0:	add	lr, r1, #3
   2f9f4:	mov	r2, #3
   2f9f8:	strb	r3, [r1, #3]
   2f9fc:	b	2f920 <flatcc_json_parser_struct_as_root@@Base+0x6c>
   2fa00:	mov	ip, r0
   2fa04:	mov	r2, #2
   2fa08:	strb	r3, [r1, #2]
   2fa0c:	add	r0, r1, #2
   2fa10:	b	2f998 <flatcc_json_parser_struct_as_root@@Base+0xe4>
   2fa14:	andeq	r3, r1, r8, asr #12
   2fa18:	strdeq	r3, [r1], -r4
   2fa1c:	muleq	r1, r4, r5
   2fa20:	movw	r2, #9999	; 0x270f
   2fa24:	mov	r3, r0
   2fa28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2fa2c:	cmp	r0, r2
   2fa30:	strd	r6, [sp, #8]
   2fa34:	strd	r8, [sp, #16]
   2fa38:	str	sl, [sp, #24]
   2fa3c:	str	lr, [sp, #28]
   2fa40:	bls	2fb80 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   2fa44:	movw	r2, #34079	; 0x851f
   2fa48:	movt	r2, #20971	; 0x51eb
   2fa4c:	ldr	r4, [pc, #744]	; 2fd3c <flatcc_json_parser_struct_as_root@@Base+0x488>
   2fa50:	mov	r5, #100	; 0x64
   2fa54:	movw	lr, #5977	; 0x1759
   2fa58:	movt	lr, #53687	; 0xd1b7
   2fa5c:	umull	ip, r0, r2, r0
   2fa60:	movw	ip, #38527	; 0x967f
   2fa64:	movt	ip, #152	; 0x98
   2fa68:	cmp	r3, ip
   2fa6c:	umull	r6, lr, lr, r3
   2fa70:	lsr	ip, r0, #5
   2fa74:	add	r4, pc, r4
   2fa78:	lsr	lr, lr, #13
   2fa7c:	umull	r6, r0, r2, ip
   2fa80:	mls	r7, r5, ip, r3
   2fa84:	lsr	r0, r0, #5
   2fa88:	add	r6, r4, r7, lsl #1
   2fa8c:	mls	r0, r5, r0, ip
   2fa90:	add	ip, r4, r0, lsl #1
   2fa94:	bls	2fbe8 <flatcc_json_parser_struct_as_root@@Base+0x334>
   2fa98:	umull	r0, r8, r2, lr
   2fa9c:	movw	r0, #56963	; 0xde83
   2faa0:	movt	r0, #17179	; 0x431b
   2faa4:	movw	r9, #51711	; 0xc9ff
   2faa8:	movt	r9, #15258	; 0x3b9a
   2faac:	umull	sl, r0, r0, r3
   2fab0:	cmp	r3, r9
   2fab4:	lsr	r8, r8, #5
   2fab8:	mls	r8, r5, r8, lr
   2fabc:	lsr	lr, r0, #18
   2fac0:	add	r8, r4, r8, lsl #1
   2fac4:	bhi	2fc80 <flatcc_json_parser_struct_as_root@@Base+0x3cc>
   2fac8:	movw	r2, #57599	; 0xe0ff
   2facc:	movt	r2, #1525	; 0x5f5
   2fad0:	cmp	r3, r2
   2fad4:	mov	r3, #0
   2fad8:	bls	2fd00 <flatcc_json_parser_struct_as_root@@Base+0x44c>
   2fadc:	strb	r3, [r1, #9]
   2fae0:	add	r5, r1, #7
   2fae4:	mov	r0, #9
   2fae8:	ldrb	r3, [r4, r7, lsl #1]
   2faec:	strb	r3, [r1, #7]
   2faf0:	ldrb	r3, [r6, #1]
   2faf4:	mov	r6, ip
   2faf8:	mov	ip, r8
   2fafc:	strb	r3, [r1, #8]
   2fb00:	movw	r3, #34079	; 0x851f
   2fb04:	movt	r3, #20971	; 0x51eb
   2fb08:	ldrb	r7, [r6]
   2fb0c:	mov	r4, #100	; 0x64
   2fb10:	sub	r1, r5, #2
   2fb14:	umull	r2, r3, r3, lr
   2fb18:	ldr	r2, [pc, #544]	; 2fd40 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   2fb1c:	lsr	r3, r3, #5
   2fb20:	strb	r7, [r5, #-2]
   2fb24:	ldrb	r6, [r6, #1]
   2fb28:	add	r2, pc, r2
   2fb2c:	mls	lr, r4, r3, lr
   2fb30:	add	r2, r2, lr, lsl #1
   2fb34:	strb	r6, [r5, #-1]
   2fb38:	ldrb	r4, [ip]
   2fb3c:	sub	lr, r1, #2
   2fb40:	strb	r4, [r1, #-2]
   2fb44:	ldrb	ip, [ip, #1]
   2fb48:	strb	ip, [r1, #-1]
   2fb4c:	ldrb	r1, [r2]
   2fb50:	sub	ip, lr, #2
   2fb54:	strb	r1, [lr, #-2]
   2fb58:	ldrb	r2, [r2, #1]
   2fb5c:	strb	r2, [lr, #-1]
   2fb60:	add	r3, r3, #48	; 0x30
   2fb64:	strb	r3, [ip, #-1]
   2fb68:	ldrd	r4, [sp]
   2fb6c:	ldrd	r6, [sp, #8]
   2fb70:	ldrd	r8, [sp, #16]
   2fb74:	ldr	sl, [sp, #24]
   2fb78:	add	sp, sp, #28
   2fb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb80:	cmp	r0, #99	; 0x63
   2fb84:	bls	2fbcc <flatcc_json_parser_struct_as_root@@Base+0x318>
   2fb88:	movw	ip, #34079	; 0x851f
   2fb8c:	movt	ip, #20971	; 0x51eb
   2fb90:	ldr	r2, [pc, #428]	; 2fd44 <flatcc_json_parser_struct_as_root@@Base+0x490>
   2fb94:	mov	r0, #100	; 0x64
   2fb98:	cmp	r3, #1000	; 0x3e8
   2fb9c:	umull	lr, ip, ip, r3
   2fba0:	lsr	ip, ip, #5
   2fba4:	add	r2, pc, r2
   2fba8:	mov	lr, ip
   2fbac:	mls	r3, r0, ip, r3
   2fbb0:	add	r2, r2, r3, lsl #1
   2fbb4:	bcc	2fc68 <flatcc_json_parser_struct_as_root@@Base+0x3b4>
   2fbb8:	mov	ip, #0
   2fbbc:	add	r3, r1, #4
   2fbc0:	mov	r0, #4
   2fbc4:	strb	ip, [r1, #4]
   2fbc8:	b	2fc34 <flatcc_json_parser_struct_as_root@@Base+0x380>
   2fbcc:	cmp	r0, #9
   2fbd0:	mov	r2, #0
   2fbd4:	bhi	2fcec <flatcc_json_parser_struct_as_root@@Base+0x438>
   2fbd8:	add	ip, r1, #1
   2fbdc:	mov	r0, #1
   2fbe0:	strb	r2, [r1, #1]
   2fbe4:	b	2fb60 <flatcc_json_parser_struct_as_root@@Base+0x2ac>
   2fbe8:	movw	r2, #16959	; 0x423f
   2fbec:	movt	r2, #15
   2fbf0:	cmp	r3, r2
   2fbf4:	bhi	2fcd8 <flatcc_json_parser_struct_as_root@@Base+0x424>
   2fbf8:	movw	r2, #34463	; 0x869f
   2fbfc:	movt	r2, #1
   2fc00:	cmp	r3, r2
   2fc04:	bls	2fd1c <flatcc_json_parser_struct_as_root@@Base+0x468>
   2fc08:	mov	r3, #0
   2fc0c:	mov	r2, ip
   2fc10:	mov	r8, r6
   2fc14:	add	r4, r1, #6
   2fc18:	mov	r0, #6
   2fc1c:	strb	r3, [r1, #6]
   2fc20:	ldrb	r1, [r8]
   2fc24:	sub	r3, r4, #2
   2fc28:	strb	r1, [r4, #-2]
   2fc2c:	ldrb	r1, [r8, #1]
   2fc30:	strb	r1, [r4, #-1]
   2fc34:	ldrb	r1, [r2]
   2fc38:	sub	ip, r3, #2
   2fc3c:	strb	r1, [r3, #-2]
   2fc40:	ldrb	r2, [r2, #1]
   2fc44:	strb	r2, [r3, #-1]
   2fc48:	ldr	r2, [pc, #248]	; 2fd48 <flatcc_json_parser_struct_as_root@@Base+0x494>
   2fc4c:	add	r2, pc, r2
   2fc50:	ldrb	r3, [r2, lr, lsl #1]
   2fc54:	add	r2, r2, lr, lsl #1
   2fc58:	strb	r3, [ip, #-2]
   2fc5c:	ldrb	r3, [r2, #1]
   2fc60:	strb	r3, [ip, #-1]
   2fc64:	b	2fb68 <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   2fc68:	mov	r4, #0
   2fc6c:	mov	r3, ip
   2fc70:	add	lr, r1, #3
   2fc74:	mov	r0, #3
   2fc78:	strb	r4, [r1, #3]
   2fc7c:	b	2fb4c <flatcc_json_parser_struct_as_root@@Base+0x298>
   2fc80:	umull	r0, r2, r2, lr
   2fc84:	mov	r9, #0
   2fc88:	movw	r0, #15241	; 0x3b89
   2fc8c:	movt	r0, #21990	; 0x55e6
   2fc90:	strb	r9, [r1, #10]
   2fc94:	ldrb	r9, [r4, r7, lsl #1]
   2fc98:	lsr	r2, r2, #5
   2fc9c:	add	r7, r1, #8
   2fca0:	umull	r0, r3, r0, r3
   2fca4:	mov	r0, #10
   2fca8:	mls	r2, r5, r2, lr
   2fcac:	lsr	lr, r3, #25
   2fcb0:	strb	r9, [r1, #8]
   2fcb4:	ldrb	r3, [r6, #1]
   2fcb8:	add	r2, r4, r2, lsl #1
   2fcbc:	strb	r3, [r1, #9]
   2fcc0:	ldrb	r3, [ip]
   2fcc4:	sub	r4, r7, #2
   2fcc8:	strb	r3, [r7, #-2]
   2fccc:	ldrb	r3, [ip, #1]
   2fcd0:	strb	r3, [r7, #-1]
   2fcd4:	b	2fc20 <flatcc_json_parser_struct_as_root@@Base+0x36c>
   2fcd8:	mov	r3, #0
   2fcdc:	add	r5, r1, #7
   2fce0:	mov	r0, #7
   2fce4:	strb	r3, [r1, #7]
   2fce8:	b	2fb00 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   2fcec:	mov	lr, r0
   2fcf0:	add	ip, r1, #2
   2fcf4:	strb	r2, [r1, #2]
   2fcf8:	mov	r0, #2
   2fcfc:	b	2fc48 <flatcc_json_parser_struct_as_root@@Base+0x394>
   2fd00:	mov	r2, r8
   2fd04:	add	r7, r1, #8
   2fd08:	strb	r3, [r1, #8]
   2fd0c:	mov	r8, ip
   2fd10:	mov	r0, #8
   2fd14:	mov	ip, r6
   2fd18:	b	2fcc0 <flatcc_json_parser_struct_as_root@@Base+0x40c>
   2fd1c:	mov	r0, #0
   2fd20:	mov	r2, ip
   2fd24:	mov	r3, lr
   2fd28:	mov	ip, r6
   2fd2c:	add	r1, r1, #5
   2fd30:	strb	r0, [r1]
   2fd34:	mov	r0, #5
   2fd38:	b	2fb38 <flatcc_json_parser_struct_as_root@@Base+0x284>
   2fd3c:			; <UNDEFINED> instruction: 0x000134bc
   2fd40:	andeq	r3, r1, r8, lsl #8
   2fd44:	andeq	r3, r1, ip, lsl #7
   2fd48:	andeq	r3, r1, r4, ror #5
   2fd4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2fd50:	strd	r6, [sp, #8]
   2fd54:	add	r7, pc, #932	; 0x3a4
   2fd58:	ldrd	r6, [r7]
   2fd5c:	strd	r8, [sp, #16]
   2fd60:	mov	r8, r0
   2fd64:	strd	sl, [sp, #24]
   2fd68:	str	lr, [sp, #32]
   2fd6c:	sub	sp, sp, #28
   2fd70:	cmp	r1, r7
   2fd74:	cmpeq	r0, r6
   2fd78:	bls	300d8 <flatcc_json_parser_struct_as_root@@Base+0x824>
   2fd7c:	mov	fp, r2
   2fd80:	mov	r3, #0
   2fd84:	ldr	r6, [pc, #932]	; 30130 <flatcc_json_parser_struct_as_root@@Base+0x87c>
   2fd88:	mov	r2, #100	; 0x64
   2fd8c:	mov	r9, r1
   2fd90:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fd94:	mov	r4, r2
   2fd98:	mov	r3, #0
   2fd9c:	mov	r2, #100	; 0x64
   2fda0:	mov	r0, r8
   2fda4:	mov	r1, r9
   2fda8:	add	r6, pc, r6
   2fdac:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fdb0:	add	r3, pc, #848	; 0x350
   2fdb4:	ldrd	r2, [r3]
   2fdb8:	mov	sl, r0
   2fdbc:	add	r7, r6, r4, lsl #1
   2fdc0:	str	r1, [sp]
   2fdc4:	str	r4, [sp, #16]
   2fdc8:	cmp	r9, r3
   2fdcc:	cmpeq	r8, r2
   2fdd0:	bls	30008 <flatcc_json_parser_struct_as_root@@Base+0x754>
   2fdd4:	mov	r2, #100	; 0x64
   2fdd8:	mov	r3, #0
   2fddc:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fde0:	add	r3, r6, r2, lsl #1
   2fde4:	mov	r0, r8
   2fde8:	movw	r2, #10000	; 0x2710
   2fdec:	mov	r1, r9
   2fdf0:	str	r3, [sp, #12]
   2fdf4:	mov	r3, #0
   2fdf8:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fdfc:	mov	r2, #100	; 0x64
   2fe00:	mov	r3, #0
   2fe04:	str	r1, [sp]
   2fe08:	mov	sl, r0
   2fe0c:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fe10:	add	r1, r6, r2, lsl #1
   2fe14:	mov	r3, #0
   2fe18:	mov	r0, r8
   2fe1c:	movw	r2, #16960	; 0x4240
   2fe20:	movt	r2, #15
   2fe24:	str	r1, [sp, #8]
   2fe28:	mov	r1, r9
   2fe2c:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fe30:	add	r3, pc, #728	; 0x2d8
   2fe34:	ldrd	r2, [r3]
   2fe38:	mov	r5, r0
   2fe3c:	mov	r4, r1
   2fe40:	cmp	r9, r3
   2fe44:	cmpeq	r8, r2
   2fe48:	bhi	3013c <flatcc_json_parser_struct_as_root@@Base+0x888>
   2fe4c:	add	r3, pc, #708	; 0x2c4
   2fe50:	ldrd	r2, [r3]
   2fe54:	cmp	r9, r3
   2fe58:	cmpeq	r8, r2
   2fe5c:	bls	302a0 <flatcc_json_parser_struct_as_root@@Base+0x9ec>
   2fe60:	ldr	r2, [sp, #8]
   2fe64:	mov	r3, #0
   2fe68:	add	ip, fp, #16
   2fe6c:	mov	r9, #16
   2fe70:	str	r7, [sp, #8]
   2fe74:	strb	r3, [fp, #16]
   2fe78:	mov	r7, r2
   2fe7c:	ldr	r8, [sp, #8]
   2fe80:	mov	r0, r5
   2fe84:	mov	r1, r4
   2fe88:	mov	r2, #100	; 0x64
   2fe8c:	mov	r3, #0
   2fe90:	sub	r6, ip, #2
   2fe94:	ldrb	lr, [r8]
   2fe98:	strb	lr, [ip, #-2]
   2fe9c:	ldrb	lr, [r8, #1]
   2fea0:	ldr	r8, [pc, #652]	; 30134 <flatcc_json_parser_struct_as_root@@Base+0x880>
   2fea4:	strb	lr, [ip, #-1]
   2fea8:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2feac:	add	r8, pc, r8
   2feb0:	mov	r0, r5
   2feb4:	add	r3, r8, r2, lsl #1
   2feb8:	mov	r1, r4
   2febc:	mov	r2, #100	; 0x64
   2fec0:	str	r3, [sp, #4]
   2fec4:	mov	r3, #0
   2fec8:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2fecc:	mov	r5, r0
   2fed0:	mov	r4, r1
   2fed4:	ldr	r1, [sp, #12]
   2fed8:	sub	r3, r6, #2
   2fedc:	ldrb	r2, [r1]
   2fee0:	strb	r2, [r6, #-2]
   2fee4:	ldrb	r2, [r1, #1]
   2fee8:	strb	r2, [r6, #-1]
   2feec:	ldrb	r1, [r7]
   2fef0:	sub	r2, r3, #2
   2fef4:	strb	r1, [r3, #-2]
   2fef8:	ldrb	r1, [r7, #1]
   2fefc:	strb	r1, [r3, #-1]
   2ff00:	ldr	r1, [sp, #4]
   2ff04:	sub	r7, r2, #2
   2ff08:	ldrb	r3, [r1]
   2ff0c:	strb	r3, [r2, #-2]
   2ff10:	ldrb	r3, [r1, #1]
   2ff14:	strb	r3, [r2, #-1]
   2ff18:	ldr	r6, [pc, #536]	; 30138 <flatcc_json_parser_struct_as_root@@Base+0x884>
   2ff1c:	mov	r0, r5
   2ff20:	mov	r1, r4
   2ff24:	mov	r2, #100	; 0x64
   2ff28:	mov	r3, #0
   2ff2c:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ff30:	mov	r0, r5
   2ff34:	mov	r1, r4
   2ff38:	mov	r3, #0
   2ff3c:	add	r6, pc, r6
   2ff40:	ldrb	lr, [r6, r2, lsl #1]
   2ff44:	add	ip, r6, r2, lsl #1
   2ff48:	mov	r2, #100	; 0x64
   2ff4c:	strb	lr, [r7, #-2]
   2ff50:	ldrb	ip, [ip, #1]
   2ff54:	strb	ip, [r7, #-1]
   2ff58:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ff5c:	mov	r2, #100	; 0x64
   2ff60:	mov	r3, #0
   2ff64:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ff68:	ldrb	lr, [r6, r2, lsl #1]
   2ff6c:	add	ip, r6, r2, lsl #1
   2ff70:	mov	r0, r5
   2ff74:	mov	r1, r4
   2ff78:	movw	r2, #10000	; 0x2710
   2ff7c:	mov	r3, #0
   2ff80:	strb	lr, [r7, #-4]
   2ff84:	ldrb	ip, [ip, #1]
   2ff88:	strb	ip, [r7, #-3]
   2ff8c:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ff90:	mov	r2, #100	; 0x64
   2ff94:	mov	r3, #0
   2ff98:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ff9c:	ldrb	lr, [r6, r2, lsl #1]
   2ffa0:	add	ip, r6, r2, lsl #1
   2ffa4:	mov	r0, r5
   2ffa8:	mov	r1, r4
   2ffac:	mov	r3, #0
   2ffb0:	movw	r2, #16960	; 0x4240
   2ffb4:	movt	r2, #15
   2ffb8:	strb	lr, [r7, #-6]
   2ffbc:	ldrb	ip, [ip, #1]
   2ffc0:	strb	ip, [r7, #-5]
   2ffc4:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ffc8:	mov	r2, #100	; 0x64
   2ffcc:	mov	r3, #0
   2ffd0:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   2ffd4:	ldrb	r3, [r6, r2, lsl #1]
   2ffd8:	add	r6, r6, r2, lsl #1
   2ffdc:	mov	r0, r9
   2ffe0:	strb	r3, [r7, #-8]
   2ffe4:	ldrb	r3, [r6, #1]
   2ffe8:	strb	r3, [r7, #-7]
   2ffec:	add	sp, sp, #28
   2fff0:	ldrd	r4, [sp]
   2fff4:	ldrd	r6, [sp, #8]
   2fff8:	ldrd	r8, [sp, #16]
   2fffc:	ldrd	sl, [sp, #24]
   30000:	add	sp, sp, #32
   30004:	pop	{pc}		; (ldr pc, [sp], #4)
   30008:	add	r3, pc, #272	; 0x110
   3000c:	ldrd	r2, [r3]
   30010:	cmp	r9, r3
   30014:	cmpeq	r8, r2
   30018:	bls	30220 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   3001c:	mov	r2, #100	; 0x64
   30020:	mov	r3, #0
   30024:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   30028:	add	r3, r6, r2, lsl #1
   3002c:	mov	r0, r8
   30030:	movw	r2, #10000	; 0x2710
   30034:	mov	r1, r9
   30038:	str	r3, [sp, #4]
   3003c:	mov	r3, #0
   30040:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   30044:	add	r3, pc, #220	; 0xdc
   30048:	ldrd	r2, [r3]
   3004c:	mov	r5, r0
   30050:	mov	r4, r1
   30054:	cmp	r9, r3
   30058:	cmpeq	r8, r2
   3005c:	mov	r2, #0
   30060:	bls	30330 <flatcc_json_parser_struct_as_root@@Base+0xa7c>
   30064:	add	r3, fp, #13
   30068:	mov	r9, #13
   3006c:	strb	r2, [fp, #13]
   30070:	ldrb	r2, [r7]
   30074:	sub	r6, r3, #2
   30078:	strb	r2, [r3, #-2]
   3007c:	ldrb	r2, [r7, #1]
   30080:	strb	r2, [r3, #-1]
   30084:	ldr	lr, [sp, #4]
   30088:	mov	r0, r5
   3008c:	mov	r1, r4
   30090:	mov	r2, #10
   30094:	mov	r3, #0
   30098:	sub	r7, r6, #3
   3009c:	ldrb	ip, [lr]
   300a0:	strb	ip, [r6, #-2]
   300a4:	ldrb	ip, [lr, #1]
   300a8:	strb	ip, [r6, #-1]
   300ac:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   300b0:	add	r2, r2, #48	; 0x30
   300b4:	mov	r0, sl
   300b8:	ldr	r1, [sp]
   300bc:	mov	r3, #0
   300c0:	strb	r2, [r6, #-3]
   300c4:	mov	r2, #1000	; 0x3e8
   300c8:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   300cc:	mov	r5, r0
   300d0:	mov	r4, r1
   300d4:	b	2ff18 <flatcc_json_parser_struct_as_root@@Base+0x664>
   300d8:	mov	r1, r2
   300dc:	add	sp, sp, #28
   300e0:	ldrd	r4, [sp]
   300e4:	ldrd	r6, [sp, #8]
   300e8:	ldrd	r8, [sp, #16]
   300ec:	ldrd	sl, [sp, #24]
   300f0:	ldr	lr, [sp, #32]
   300f4:	add	sp, sp, #36	; 0x24
   300f8:	b	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   300fc:	nop	{0}
   30100:	blcc	fe6e2904 <__bss_end__@@Base+0xfe68e538>
   30104:	andeq	r0, r0, r0
   30108:	mrcmi	15, 3, r9, cr2, cr15, {7}
   3010c:	andeq	r0, r0, r8, lsl r9
   30110:	svcvs	0x00c0ffff
   30114:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30118:	strbge	r7, [r6], #4095	; 0xfff
   3011c:	andeq	r8, r3, lr, ror sp
   30120:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   30124:	andeq	r0, r0, r7, lsl r0
   30128:	strtle	r0, [r5], #4095	; 0xfff
   3012c:	andeq	r0, r0, r8, ror #1
   30130:	andeq	r3, r1, r8, lsl #3
   30134:	andeq	r3, r1, r4, lsl #1
   30138:	strdeq	r2, [r1], -r4
   3013c:	mov	r2, #100	; 0x64
   30140:	mov	r3, #0
   30144:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   30148:	add	r1, r6, r2, lsl #1
   3014c:	mov	r0, r8
   30150:	add	r3, pc, #584	; 0x248
   30154:	ldrd	r2, [r3]
   30158:	str	r1, [sp, #20]
   3015c:	mov	r1, r9
   30160:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   30164:	add	r3, pc, #572	; 0x23c
   30168:	ldrd	r2, [r3]
   3016c:	mov	sl, r0
   30170:	str	r1, [sp]
   30174:	cmp	r9, r3
   30178:	cmpeq	r8, r2
   3017c:	bls	302d4 <flatcc_json_parser_struct_as_root@@Base+0xa20>
   30180:	mov	r2, #100	; 0x64
   30184:	mov	r3, #0
   30188:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   3018c:	add	r0, r6, r2, lsl #1
   30190:	mov	r1, r9
   30194:	add	r3, pc, #532	; 0x214
   30198:	ldrd	r2, [r3]
   3019c:	str	r0, [sp, #4]
   301a0:	mov	r0, r8
   301a4:	bl	3e004 <flatcc_json_printer_clear@@Base+0x728>
   301a8:	add	r3, pc, #520	; 0x208
   301ac:	ldrd	r2, [r3]
   301b0:	mov	r5, r0
   301b4:	mov	r4, r1
   301b8:	cmp	r9, r3
   301bc:	cmpeq	r8, r2
   301c0:	bhi	30254 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
   301c4:	mov	r2, #0
   301c8:	add	r3, fp, #17
   301cc:	mov	r9, #19
   301d0:	strb	r2, [fp, #19]
   301d4:	ldr	r2, [sp, #16]
   301d8:	ldrb	r2, [r6, r2, lsl #1]
   301dc:	strb	r2, [fp, #17]
   301e0:	ldrb	r2, [r7, #1]
   301e4:	ldr	r7, [sp, #20]
   301e8:	strb	r2, [fp, #18]
   301ec:	ldr	r0, [sp, #12]
   301f0:	sub	r2, r3, #2
   301f4:	ldrb	r1, [r0]
   301f8:	strb	r1, [r3, #-2]
   301fc:	ldrb	r1, [r0, #1]
   30200:	strb	r1, [r3, #-1]
   30204:	ldr	r0, [sp, #8]
   30208:	sub	r3, r2, #2
   3020c:	ldrb	r1, [r0]
   30210:	strb	r1, [r2, #-2]
   30214:	ldrb	r1, [r0, #1]
   30218:	strb	r1, [r2, #-1]
   3021c:	b	30070 <flatcc_json_parser_struct_as_root@@Base+0x7bc>
   30220:	add	r3, pc, #408	; 0x198
   30224:	ldrd	r2, [r3]
   30228:	mov	r5, r0
   3022c:	str	r7, [sp, #4]
   30230:	ldr	r4, [sp]
   30234:	cmp	r9, r3
   30238:	mov	r3, #0
   3023c:	cmpeq	r8, r2
   30240:	bhi	30318 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   30244:	add	r2, fp, #10
   30248:	mov	r9, #10
   3024c:	strb	r3, [fp, #10]
   30250:	b	2ff00 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   30254:	mov	r1, #0
   30258:	mov	r9, #20
   3025c:	ldr	r2, [sp, #12]
   30260:	ldr	ip, [sp, #16]
   30264:	strb	r1, [fp, #20]
   30268:	ldr	r3, [sp, #20]
   3026c:	ldrb	r1, [r6, ip, lsl #1]
   30270:	str	r3, [sp, #12]
   30274:	add	r3, fp, #18
   30278:	strb	r1, [fp, #18]
   3027c:	ldrb	r1, [r7, #1]
   30280:	ldr	r7, [sp, #4]
   30284:	strb	r1, [fp, #19]
   30288:	ldrb	r1, [r2]
   3028c:	sub	ip, r3, #2
   30290:	strb	r1, [r3, #-2]
   30294:	ldrb	r2, [r2, #1]
   30298:	strb	r2, [r3, #-1]
   3029c:	b	2fe7c <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   302a0:	add	r3, pc, #288	; 0x120
   302a4:	ldrd	r2, [r3]
   302a8:	cmp	r9, r3
   302ac:	mov	r3, #0
   302b0:	cmpeq	r8, r2
   302b4:	bls	3037c <flatcc_json_parser_struct_as_root@@Base+0xac8>
   302b8:	ldr	r2, [sp, #8]
   302bc:	mov	r9, #15
   302c0:	strb	r3, [fp, #15]
   302c4:	stmib	sp, {r2, r7}
   302c8:	add	r2, fp, #15
   302cc:	ldr	r7, [sp, #12]
   302d0:	b	30204 <flatcc_json_parser_struct_as_root@@Base+0x950>
   302d4:	add	r3, pc, #244	; 0xf4
   302d8:	ldrd	r2, [r3]
   302dc:	cmp	r9, r3
   302e0:	cmpeq	r8, r2
   302e4:	bls	30340 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   302e8:	mov	r5, r0
   302ec:	mov	r3, #0
   302f0:	ldr	r4, [sp]
   302f4:	mov	r2, r7
   302f8:	mov	r9, #18
   302fc:	ldr	r1, [sp, #8]
   30300:	strb	r3, [fp, #18]
   30304:	add	r3, fp, #18
   30308:	ldr	r0, [sp, #12]
   3030c:	ldr	r7, [sp, #20]
   30310:	strd	r0, [sp, #8]
   30314:	b	30288 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   30318:	add	r6, fp, #11
   3031c:	mov	sl, r8
   30320:	str	r9, [sp]
   30324:	mov	r9, #11
   30328:	strb	r3, [fp, #11]
   3032c:	b	30084 <flatcc_json_parser_struct_as_root@@Base+0x7d0>
   30330:	add	r3, fp, #12
   30334:	mov	r9, #12
   30338:	strb	r2, [fp, #12]
   3033c:	b	2feec <flatcc_json_parser_struct_as_root@@Base+0x638>
   30340:	ldr	r3, [sp, #12]
   30344:	mov	r2, #0
   30348:	mov	sl, r5
   3034c:	mov	r9, #17
   30350:	mov	r5, r0
   30354:	str	r4, [sp]
   30358:	str	r7, [sp, #12]
   3035c:	mov	r4, r1
   30360:	ldr	r7, [sp, #8]
   30364:	strb	r2, [fp, #17]
   30368:	str	r3, [sp, #8]
   3036c:	ldr	r3, [sp, #20]
   30370:	str	r3, [sp, #4]
   30374:	add	r3, fp, #17
   30378:	b	301ec <flatcc_json_parser_struct_as_root@@Base+0x938>
   3037c:	ldr	r1, [sp, #8]
   30380:	add	r6, fp, #14
   30384:	mov	r9, #14
   30388:	strb	r3, [fp, #14]
   3038c:	ldr	r2, [sp, #12]
   30390:	str	r1, [sp, #4]
   30394:	str	r7, [sp, #12]
   30398:	mov	r7, r2
   3039c:	b	2fed4 <flatcc_json_parser_struct_as_root@@Base+0x620>
   303a0:	ldrbeq	lr, [r5, #256]!	; 0x100
   303a4:	andeq	r0, r0, r0
   303a8:			; <UNDEFINED> instruction: 0xa763ffff
   303ac:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   303b0:	strpl	lr, [fp], #-1024	; 0xfffffc00
   303b4:	andeq	r0, r0, r2
   303b8:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   303bc:	bhi	ff1f8fd4 <__bss_end__@@Base+0xff1a4c08>
   303c0:	strpl	lr, [fp], #-1023	; 0xfffffc01
   303c4:	andeq	r0, r0, r2
   303c8:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   303cc:	strdeq	r5, [r0], -r3
   303d0:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   303d4:	smceq	13400	; 0x3458
   303d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   303dc:	strd	r6, [sp, #8]
   303e0:	strd	r8, [sp, #16]
   303e4:	strd	sl, [sp, #24]
   303e8:	str	lr, [sp, #32]
   303ec:	sub	sp, sp, #116	; 0x74
   303f0:	ldr	ip, [sp, #152]	; 0x98
   303f4:	strd	r2, [sp, #24]
   303f8:	ldr	lr, [sp, #176]	; 0xb0
   303fc:	strd	r0, [sp, #48]	; 0x30
   30400:	ldr	sl, [sp, #180]	; 0xb4
   30404:	str	ip, [sp, #64]	; 0x40
   30408:	ldr	fp, [sp, #156]	; 0x9c
   3040c:	subs	r2, r2, lr
   30410:	ldrd	r0, [sp, #160]	; 0xa0
   30414:	sbc	r3, r3, sl
   30418:	strd	r2, [sp, #16]
   3041c:	ldrd	r2, [sp, #16]
   30420:	str	fp, [sp, #68]	; 0x44
   30424:	cmp	r3, r1
   30428:	cmpeq	r2, r0
   3042c:	ldrd	r2, [sp, #168]	; 0xa8
   30430:	bls	3064c <flatcc_json_parser_struct_as_root@@Base+0xd98>
   30434:	subs	r6, ip, r0
   30438:	sbc	r7, fp, r1
   3043c:	cmp	r3, r7
   30440:	cmpeq	r2, r6
   30444:	bhi	30658 <flatcc_json_parser_struct_as_root@@Base+0xda4>
   30448:	subs	ip, ip, r2
   3044c:	ldr	r6, [sp, #52]	; 0x34
   30450:	sbc	r7, fp, r3
   30454:	subs	r4, ip, r0
   30458:	str	lr, [sp, #32]
   3045c:	ldr	ip, [sp, #48]	; 0x30
   30460:	sbc	r5, r7, r1
   30464:	str	sl, [sp, #36]	; 0x24
   30468:	sub	r6, r6, #1
   3046c:	add	r6, ip, r6
   30470:	mov	fp, r6
   30474:	ldrd	r6, [sp, #16]
   30478:	adds	r8, r2, r0
   3047c:	adc	r9, r3, r1
   30480:	cmp	r9, r7
   30484:	cmpeq	r8, r6
   30488:	bcc	305d4 <flatcc_json_parser_struct_as_root@@Base+0xd20>
   3048c:	subs	ip, r6, r0
   30490:	ldr	r4, [sp, #28]
   30494:	str	ip, [sp]
   30498:	sbc	ip, r7, r1
   3049c:	ldr	lr, [sp, #32]
   304a0:	str	ip, [sp, #4]
   304a4:	ldr	ip, [sp, #24]
   304a8:	ldr	sl, [sp, #36]	; 0x24
   304ac:	subs	ip, lr, ip
   304b0:	sbc	r4, sl, r4
   304b4:	adds	ip, ip, r8
   304b8:	str	ip, [sp, #8]
   304bc:	adc	ip, r4, r9
   304c0:	ldrd	r4, [sp]
   304c4:	str	ip, [sp, #12]
   304c8:	ldrd	r6, [sp, #8]
   304cc:	cmp	r5, r7
   304d0:	cmpeq	r4, r6
   304d4:	bcc	3064c <flatcc_json_parser_struct_as_root@@Base+0xd98>
   304d8:	ldr	ip, [sp, #48]	; 0x30
   304dc:	ldr	r1, [sp, #52]	; 0x34
   304e0:	sub	r1, r1, #1
   304e4:	ldrb	r0, [ip, r1]
   304e8:	sub	r0, r0, #1
   304ec:	strb	r0, [ip, r1]
   304f0:	ldr	r1, [sp, #24]
   304f4:	adds	r1, r1, lr
   304f8:	str	r1, [sp, #56]	; 0x38
   304fc:	ldr	r1, [sp, #28]
   30500:	adc	r1, r1, sl
   30504:	str	r1, [sp, #60]	; 0x3c
   30508:	ldrd	r0, [sp, #56]	; 0x38
   3050c:	cmp	r1, r9
   30510:	cmpeq	r0, r8
   30514:	bls	30594 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30518:	ldr	ip, [sp, #64]	; 0x40
   3051c:	subs	ip, ip, r8
   30520:	str	ip, [sp, #80]	; 0x50
   30524:	ldr	ip, [sp, #68]	; 0x44
   30528:	sbc	ip, ip, r9
   3052c:	str	ip, [sp, #84]	; 0x54
   30530:	ldrd	r4, [sp, #80]	; 0x50
   30534:	cmp	r5, r3
   30538:	cmpeq	r4, r2
   3053c:	bcc	30594 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30540:	adds	ip, r2, r8
   30544:	adc	r3, r3, r9
   30548:	str	ip, [sp, #88]	; 0x58
   3054c:	str	r3, [sp, #92]	; 0x5c
   30550:	ldrd	r2, [sp, #88]	; 0x58
   30554:	cmp	r3, r1
   30558:	cmpeq	r2, r0
   3055c:	bcc	305b4 <flatcc_json_parser_struct_as_root@@Base+0xd00>
   30560:	subs	ip, r0, r8
   30564:	str	ip, [sp, #96]	; 0x60
   30568:	sbc	ip, r1, r9
   3056c:	str	ip, [sp, #100]	; 0x64
   30570:	subs	ip, r2, r0
   30574:	sbc	r3, r3, r1
   30578:	str	ip, [sp, #104]	; 0x68
   3057c:	str	r3, [sp, #108]	; 0x6c
   30580:	ldrd	r2, [sp, #96]	; 0x60
   30584:	ldrd	r0, [sp, #104]	; 0x68
   30588:	cmp	r3, r1
   3058c:	cmpeq	r2, r0
   30590:	bhi	305b4 <flatcc_json_parser_struct_as_root@@Base+0xd00>
   30594:	adds	r3, lr, lr
   30598:	str	r3, [sp, #40]	; 0x28
   3059c:	adc	r3, sl, sl
   305a0:	str	r3, [sp, #44]	; 0x2c
   305a4:	ldrd	r2, [sp, #40]	; 0x28
   305a8:	cmp	r3, r9
   305ac:	cmpeq	r2, r8
   305b0:	bls	30610 <flatcc_json_parser_struct_as_root@@Base+0xd5c>
   305b4:	mov	r0, #0
   305b8:	add	sp, sp, #116	; 0x74
   305bc:	ldrd	r4, [sp]
   305c0:	ldrd	r6, [sp, #8]
   305c4:	ldrd	r8, [sp, #16]
   305c8:	ldrd	sl, [sp, #24]
   305cc:	add	sp, sp, #32
   305d0:	pop	{pc}		; (ldr pc, [sp], #4)
   305d4:	ldrb	ip, [fp]
   305d8:	subs	sl, r4, r2
   305dc:	mov	r0, r8
   305e0:	sbc	lr, r5, r3
   305e4:	cmp	r5, r3
   305e8:	cmpeq	r4, r2
   305ec:	mov	r1, r9
   305f0:	mov	r4, sl
   305f4:	mov	r5, lr
   305f8:	sub	ip, ip, #1
   305fc:	strb	ip, [fp]
   30600:	bcs	30474 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
   30604:	ldr	lr, [sp, #32]
   30608:	ldr	sl, [sp, #36]	; 0x24
   3060c:	b	30594 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30610:	ldr	r2, [sp, #64]	; 0x40
   30614:	lsl	r3, lr, #2
   30618:	lsl	sl, sl, #2
   3061c:	orr	sl, sl, lr, lsr #30
   30620:	subs	r3, r2, r3
   30624:	str	r3, [sp, #72]	; 0x48
   30628:	ldr	r3, [sp, #68]	; 0x44
   3062c:	sbc	r3, r3, sl
   30630:	str	r3, [sp, #76]	; 0x4c
   30634:	ldrd	r2, [sp, #72]	; 0x48
   30638:	cmp	r3, r9
   3063c:	cmpeq	r2, r8
   30640:	movcs	r0, #1
   30644:	bcs	305b8 <flatcc_json_parser_struct_as_root@@Base+0xd04>
   30648:	b	305b4 <flatcc_json_parser_struct_as_root@@Base+0xd00>
   3064c:	mov	r8, r0
   30650:	mov	r9, r1
   30654:	b	304f0 <flatcc_json_parser_struct_as_root@@Base+0xc3c>
   30658:	mov	r8, r0
   3065c:	mov	r9, r1
   30660:	b	30594 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   30664:	cmp	r0, #0
   30668:	strd	r4, [sp, #-16]!
   3066c:	str	r6, [sp, #8]
   30670:	mov	r6, r1
   30674:	str	lr, [sp, #12]
   30678:	bge	30688 <flatcc_json_parser_struct_as_root@@Base+0xdd4>
   3067c:	mov	r3, #45	; 0x2d
   30680:	rsb	r0, r0, #0
   30684:	strb	r3, [r6], #1
   30688:	movw	ip, #52429	; 0xcccd
   3068c:	movt	ip, #52428	; 0xcccc
   30690:	mov	lr, r6
   30694:	mvn	r4, #9
   30698:	umull	r2, r3, ip, r0
   3069c:	lsr	r3, r3, #3
   306a0:	mla	r2, r4, r3, r0
   306a4:	subs	r0, r3, #0
   306a8:	add	r3, r2, #48	; 0x30
   306ac:	strb	r3, [lr], #1
   306b0:	bne	30698 <flatcc_json_parser_struct_as_root@@Base+0xde4>
   306b4:	sub	r3, lr, r6
   306b8:	strb	r0, [lr]
   306bc:	add	r0, r3, r3, lsr #31
   306c0:	cmp	r3, #1
   306c4:	asr	r0, r0, #1
   306c8:	ble	306f8 <flatcc_json_parser_struct_as_root@@Base+0xe44>
   306cc:	sub	r3, r6, #1
   306d0:	mov	ip, lr
   306d4:	ldrb	r4, [r3, #1]
   306d8:	add	r2, r3, #2
   306dc:	add	r3, r3, #1
   306e0:	sub	r2, r2, r6
   306e4:	ldrb	r5, [ip, #-1]!
   306e8:	cmp	r0, r2
   306ec:	strb	r5, [r3]
   306f0:	strb	r4, [ip]
   306f4:	bgt	306d4 <flatcc_json_parser_struct_as_root@@Base+0xe20>
   306f8:	ldrd	r4, [sp]
   306fc:	sub	r0, lr, r1
   30700:	ldr	r6, [sp, #8]
   30704:	add	sp, sp, #12
   30708:	pop	{pc}		; (ldr pc, [sp], #4)
   3070c:	ldrd	r2, [r0, #16]
   30710:	cmp	r3, r2
   30714:	bcc	30744 <flatcc_json_parser_struct_as_root@@Base+0xe90>
   30718:	ldr	r1, [r0]
   3071c:	ldr	r2, [r0, #36]	; 0x24
   30720:	sub	ip, r3, r1
   30724:	mov	r3, r1
   30728:	str	r1, [r0, #20]
   3072c:	cmp	r2, #0
   30730:	moveq	r2, #3
   30734:	streq	r2, [r0, #36]	; 0x24
   30738:	ldr	r2, [r0, #12]
   3073c:	add	r2, r2, ip
   30740:	str	r2, [r0, #12]
   30744:	mov	r2, #0
   30748:	strb	r2, [r3]
   3074c:	bx	lr
   30750:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30754:	mov	r5, r0
   30758:	ldr	r4, [r0, #16]
   3075c:	ldr	r3, [r0, #20]
   30760:	strd	r6, [sp, #8]
   30764:	mov	r6, r1
   30768:	mov	r7, r2
   3076c:	str	r8, [sp, #16]
   30770:	str	lr, [sp, #20]
   30774:	cmp	r3, r4
   30778:	bcc	30790 <flatcc_json_parser_struct_as_root@@Base+0xedc>
   3077c:	mov	r1, #0
   30780:	ldr	r3, [r0, #44]	; 0x2c
   30784:	blx	r3
   30788:	ldr	r4, [r5, #16]
   3078c:	ldr	r3, [r5, #20]
   30790:	sub	r4, r4, r3
   30794:	cmp	r4, r7
   30798:	bcs	307e4 <flatcc_json_parser_struct_as_root@@Base+0xf30>
   3079c:	mov	r2, r4
   307a0:	mov	r1, r6
   307a4:	mov	r0, r3
   307a8:	sub	r7, r7, r4
   307ac:	bl	1451c <memcpy@plt>
   307b0:	ldr	r3, [r5, #20]
   307b4:	add	r6, r6, r4
   307b8:	mov	r1, #0
   307bc:	mov	r0, r5
   307c0:	ldr	r2, [r5, #44]	; 0x2c
   307c4:	add	r4, r3, r4
   307c8:	str	r4, [r5, #20]
   307cc:	blx	r2
   307d0:	ldr	r4, [r5, #16]
   307d4:	ldr	r3, [r5, #20]
   307d8:	sub	r4, r4, r3
   307dc:	cmp	r7, r4
   307e0:	bhi	3079c <flatcc_json_parser_struct_as_root@@Base+0xee8>
   307e4:	mov	r1, r6
   307e8:	mov	r0, r3
   307ec:	mov	r2, r7
   307f0:	bl	1451c <memcpy@plt>
   307f4:	ldr	r3, [r5, #20]
   307f8:	ldr	r8, [sp, #16]
   307fc:	add	r7, r3, r7
   30800:	str	r7, [r5, #20]
   30804:	ldrd	r4, [sp]
   30808:	ldrd	r6, [sp, #8]
   3080c:	add	sp, sp, #20
   30810:	pop	{pc}		; (ldr pc, [sp], #4)
   30814:	strd	r4, [sp, #-16]!
   30818:	mov	r4, r0
   3081c:	ldr	r5, [r0, #16]
   30820:	ldr	r3, [r0, #20]
   30824:	str	r6, [sp, #8]
   30828:	mov	r6, r1
   3082c:	str	lr, [sp, #12]
   30830:	cmp	r3, r5
   30834:	bcc	3084c <flatcc_json_parser_struct_as_root@@Base+0xf98>
   30838:	mov	r1, #0
   3083c:	ldr	r3, [r0, #44]	; 0x2c
   30840:	blx	r3
   30844:	ldr	r5, [r4, #16]
   30848:	ldr	r3, [r4, #20]
   3084c:	sub	r5, r5, r3
   30850:	cmp	r5, r6
   30854:	bcs	3089c <flatcc_json_parser_struct_as_root@@Base+0xfe8>
   30858:	mov	r2, r5
   3085c:	mov	r0, r3
   30860:	mov	r1, #32
   30864:	sub	r6, r6, r5
   30868:	bl	14594 <memset@plt>
   3086c:	ldr	r3, [r4, #20]
   30870:	mov	r1, #0
   30874:	mov	r0, r4
   30878:	ldr	r2, [r4, #44]	; 0x2c
   3087c:	add	r5, r3, r5
   30880:	str	r5, [r4, #20]
   30884:	blx	r2
   30888:	ldr	r5, [r4, #16]
   3088c:	ldr	r3, [r4, #20]
   30890:	sub	r5, r5, r3
   30894:	cmp	r6, r5
   30898:	bhi	30858 <flatcc_json_parser_struct_as_root@@Base+0xfa4>
   3089c:	mov	r0, r3
   308a0:	mov	r2, r6
   308a4:	mov	r1, #32
   308a8:	bl	14594 <memset@plt>
   308ac:	ldr	r3, [r4, #20]
   308b0:	add	r6, r3, r6
   308b4:	str	r6, [r4, #20]
   308b8:	ldrd	r4, [sp]
   308bc:	ldr	r6, [sp, #8]
   308c0:	add	sp, sp, #12
   308c4:	pop	{pc}		; (ldr pc, [sp], #4)
   308c8:	strd	r4, [sp, #-16]!
   308cc:	ldr	ip, [r0, #16]
   308d0:	ldr	r2, [r0, #20]
   308d4:	ldr	r5, [r0, #32]
   308d8:	str	r6, [sp, #8]
   308dc:	str	lr, [sp, #12]
   308e0:	ldrb	r1, [r0, #25]
   308e4:	mul	r5, r5, r1
   308e8:	add	r1, r2, r5
   308ec:	cmp	ip, r1
   308f0:	bcs	3090c <flatcc_json_parser_struct_as_root@@Base+0x1058>
   308f4:	mov	r1, r5
   308f8:	ldrd	r4, [sp]
   308fc:	ldr	r6, [sp, #8]
   30900:	ldr	lr, [sp, #12]
   30904:	add	sp, sp, #16
   30908:	b	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3090c:	mov	r4, r0
   30910:	mov	r1, #32
   30914:	mov	r0, r2
   30918:	mov	r2, r5
   3091c:	bl	14594 <memset@plt>
   30920:	ldr	r3, [r4, #20]
   30924:	ldr	r6, [sp, #8]
   30928:	add	r5, r3, r5
   3092c:	str	r5, [r4, #20]
   30930:	ldrd	r4, [sp]
   30934:	add	sp, sp, #12
   30938:	pop	{pc}		; (ldr pc, [sp], #4)
   3093c:	cmp	r1, #0
   30940:	strd	r4, [sp, #-16]!
   30944:	mov	r4, r0
   30948:	ldr	r0, [r0]
   3094c:	ldr	ip, [r4, #20]
   30950:	ldr	r3, [r4, #40]	; 0x28
   30954:	str	r6, [sp, #8]
   30958:	str	lr, [sp, #12]
   3095c:	bne	3096c <flatcc_json_parser_struct_as_root@@Base+0x10b8>
   30960:	ldr	r5, [r4, #16]
   30964:	cmp	r5, ip
   30968:	bls	309a8 <flatcc_json_parser_struct_as_root@@Base+0x10f4>
   3096c:	sub	r5, ip, r0
   30970:	mov	r2, #1
   30974:	mov	r1, r5
   30978:	bl	14540 <fwrite@plt>
   3097c:	ldr	r3, [r4]
   30980:	ldr	ip, [r4, #12]
   30984:	str	r3, [r4, #20]
   30988:	add	ip, ip, r5
   3098c:	str	ip, [r4, #12]
   30990:	mov	r2, #0
   30994:	strb	r2, [r3]
   30998:	ldrd	r4, [sp]
   3099c:	ldr	r6, [sp, #8]
   309a0:	add	sp, sp, #12
   309a4:	pop	{pc}		; (ldr pc, [sp], #4)
   309a8:	mov	r2, #1
   309ac:	ldr	r1, [r4, #8]
   309b0:	sub	r5, ip, r5
   309b4:	bl	14540 <fwrite@plt>
   309b8:	ldr	r3, [r4]
   309bc:	mov	r2, r5
   309c0:	ldr	r1, [r4, #8]
   309c4:	mov	r0, r3
   309c8:	add	r1, r3, r1
   309cc:	bl	1451c <memcpy@plt>
   309d0:	ldr	r3, [r4]
   309d4:	ldr	r1, [r4, #8]
   309d8:	ldr	r2, [r4, #12]
   309dc:	add	r3, r3, r5
   309e0:	str	r3, [r4, #20]
   309e4:	add	r2, r2, r1
   309e8:	str	r2, [r4, #12]
   309ec:	b	30990 <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   309f0:	ldr	r3, [r0, #20]
   309f4:	mov	r2, #0
   309f8:	strd	r4, [sp, #-16]!
   309fc:	ldr	r5, [r0]
   30a00:	str	r6, [sp, #8]
   30a04:	str	lr, [sp, #12]
   30a08:	strb	r2, [r3]
   30a0c:	ldr	r2, [r0, #16]
   30a10:	ldr	r1, [r0, #20]
   30a14:	cmp	r1, r2
   30a18:	bcs	30a2c <flatcc_json_parser_struct_as_root@@Base+0x1178>
   30a1c:	ldrd	r4, [sp]
   30a20:	ldr	r6, [sp, #8]
   30a24:	add	sp, sp, #12
   30a28:	pop	{pc}		; (ldr pc, [sp], #4)
   30a2c:	mov	r4, r0
   30a30:	ldrd	r0, [r0]
   30a34:	sub	r5, r3, r5
   30a38:	lsl	r1, r1, #1
   30a3c:	bl	14534 <realloc@plt>
   30a40:	cmp	r0, #0
   30a44:	beq	30a84 <flatcc_json_parser_struct_as_root@@Base+0x11d0>
   30a48:	ldr	r3, [r4, #4]
   30a4c:	add	r2, r0, r5
   30a50:	str	r2, [r4, #20]
   30a54:	lsl	r3, r3, #1
   30a58:	sub	r1, r3, #64	; 0x40
   30a5c:	stm	r4, {r0, r3}
   30a60:	add	r0, r0, r1
   30a64:	str	r1, [r4, #8]
   30a68:	str	r0, [r4, #16]
   30a6c:	mov	r3, #0
   30a70:	strb	r3, [r2]
   30a74:	ldrd	r4, [sp]
   30a78:	ldr	r6, [sp, #8]
   30a7c:	add	sp, sp, #12
   30a80:	pop	{pc}		; (ldr pc, [sp], #4)
   30a84:	ldr	r2, [r4]
   30a88:	ldr	r3, [r4, #36]	; 0x24
   30a8c:	str	r2, [r4, #20]
   30a90:	cmp	r3, #0
   30a94:	moveq	r3, #3
   30a98:	streq	r3, [r4, #36]	; 0x24
   30a9c:	ldr	r3, [r4, #12]
   30aa0:	add	r3, r3, r5
   30aa4:	str	r3, [r4, #12]
   30aa8:	b	30a6c <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   30aac:	cmp	r0, #99	; 0x63
   30ab0:	mov	r3, r0
   30ab4:	bhi	30ad8 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   30ab8:	cmp	r0, #9
   30abc:	bhi	30b38 <flatcc_json_parser_struct_as_root@@Base+0x1284>
   30ac0:	add	r3, r0, #48	; 0x30
   30ac4:	mov	r2, #0
   30ac8:	mov	r0, #1
   30acc:	strb	r3, [r1]
   30ad0:	strb	r2, [r1, #1]
   30ad4:	bx	lr
   30ad8:	movw	r2, #34079	; 0x851f
   30adc:	movt	r2, #20971	; 0x51eb
   30ae0:	str	r4, [sp, #-8]!
   30ae4:	ldr	ip, [pc, #124]	; 30b68 <flatcc_json_parser_struct_as_root@@Base+0x12b4>
   30ae8:	mov	r0, #0
   30aec:	umull	r4, r2, r2, r3
   30af0:	str	lr, [sp, #4]
   30af4:	mov	lr, #100	; 0x64
   30af8:	strb	r0, [r1, #3]
   30afc:	mov	r0, #3
   30b00:	ldr	r4, [sp]
   30b04:	add	sp, sp, #4
   30b08:	lsr	r2, r2, #5
   30b0c:	add	ip, pc, ip
   30b10:	mls	r3, lr, r2, r3
   30b14:	add	r2, r2, #48	; 0x30
   30b18:	uxtb	r3, r3
   30b1c:	ldrb	lr, [ip, r3, lsl #1]
   30b20:	add	ip, ip, r3, lsl #1
   30b24:	strb	lr, [r1, #1]
   30b28:	ldrb	r3, [ip, #1]
   30b2c:	strb	r2, [r1]
   30b30:	strb	r3, [r1, #2]
   30b34:	pop	{pc}		; (ldr pc, [sp], #4)
   30b38:	ldr	r2, [pc, #44]	; 30b6c <flatcc_json_parser_struct_as_root@@Base+0x12b8>
   30b3c:	mov	ip, #0
   30b40:	sxth	r3, r0
   30b44:	mov	r0, #2
   30b48:	strb	ip, [r1, #2]
   30b4c:	add	r2, pc, r2
   30b50:	ldrb	ip, [r2, r3, lsl #1]
   30b54:	add	r3, r2, r3, lsl #1
   30b58:	strb	ip, [r1]
   30b5c:	ldrb	r3, [r3, #1]
   30b60:	strb	r3, [r1, #1]
   30b64:	bx	lr
   30b68:	andeq	r2, r1, r4, lsr #8
   30b6c:	andeq	r2, r1, r4, ror #7
   30b70:	ldr	r3, [pc, #36]	; 30b9c <flatcc_json_parser_struct_as_root@@Base+0x12e8>
   30b74:	mov	r2, #260	; 0x104
   30b78:	str	r4, [sp, #-8]!
   30b7c:	ldr	r1, [pc, #28]	; 30ba0 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   30b80:	str	lr, [sp, #4]
   30b84:	ldr	r0, [pc, #24]	; 30ba4 <flatcc_json_parser_struct_as_root@@Base+0x12f0>
   30b88:	add	r3, pc, r3
   30b8c:	add	r3, r3, #204	; 0xcc
   30b90:	add	r1, pc, r1
   30b94:	add	r0, pc, r0
   30b98:	bl	145e8 <__assert_fail@plt>
   30b9c:	andeq	r2, r1, r8, lsr #7
   30ba0:	andeq	r1, r1, ip, lsr #30
   30ba4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   30ba8:	ldr	r3, [pc, #36]	; 30bd4 <flatcc_json_parser_struct_as_root@@Base+0x1320>
   30bac:	mov	r2, #239	; 0xef
   30bb0:	str	r4, [sp, #-8]!
   30bb4:	ldr	r1, [pc, #28]	; 30bd8 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   30bb8:	str	lr, [sp, #4]
   30bbc:	ldr	r0, [pc, #24]	; 30bdc <flatcc_json_parser_struct_as_root@@Base+0x1328>
   30bc0:	add	r3, pc, r3
   30bc4:	add	r3, r3, #228	; 0xe4
   30bc8:	add	r1, pc, r1
   30bcc:	add	r0, pc, r0
   30bd0:	bl	145e8 <__assert_fail@plt>
   30bd4:	andeq	r2, r1, r0, ror r3
   30bd8:	strdeq	r1, [r1], -r4
   30bdc:	andeq	r2, r1, r4, lsr #21
   30be0:	cmp	r0, #0
   30be4:	beq	30c08 <flatcc_json_parser_struct_as_root@@Base+0x1354>
   30be8:	ldr	r3, [pc, #60]	; 30c2c <flatcc_json_parser_struct_as_root@@Base+0x1378>
   30bec:	mov	r0, #4
   30bf0:	add	r3, pc, r3
   30bf4:	ldrb	r2, [r3, #252]	; 0xfc
   30bf8:	ldr	r3, [r3, #248]	; 0xf8
   30bfc:	str	r3, [r1]
   30c00:	strb	r2, [r1, #4]
   30c04:	bx	lr
   30c08:	ldr	r3, [pc, #32]	; 30c30 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   30c0c:	mov	r0, #5
   30c10:	add	r3, pc, r3
   30c14:	add	ip, r3, #256	; 0x100
   30c18:	ldr	r2, [r3, #256]	; 0x100
   30c1c:	ldrh	r3, [ip, #4]
   30c20:	str	r2, [r1]
   30c24:	strh	r3, [r1, #4]
   30c28:	bx	lr
   30c2c:	andeq	r2, r1, r0, asr #6
   30c30:	andeq	r2, r1, r0, lsr #6
   30c34:	mov	ip, #0
   30c38:	strd	r4, [sp, #-12]!
   30c3c:	mov	r5, r0
   30c40:	str	lr, [sp, #8]
   30c44:	sub	sp, sp, #12
   30c48:	cmp	r1, ip
   30c4c:	cmpne	r2, #7
   30c50:	str	ip, [sp, #4]
   30c54:	bls	30c9c <flatcc_json_parser_struct_as_root@@Base+0x13e8>
   30c58:	cmp	r3, #0
   30c5c:	beq	30c88 <flatcc_json_parser_struct_as_root@@Base+0x13d4>
   30c60:	mov	r2, #4
   30c64:	mov	r4, r1
   30c68:	add	r0, sp, r2
   30c6c:	mov	r1, r3
   30c70:	bl	145a0 <strncpy@plt>
   30c74:	ldr	r2, [r4, #4]
   30c78:	ldr	r3, [sp, #4]
   30c7c:	cmp	r2, r3
   30c80:	cmpne	r3, #0
   30c84:	bne	30cd0 <flatcc_json_parser_struct_as_root@@Base+0x141c>
   30c88:	mov	r0, #1
   30c8c:	add	sp, sp, #12
   30c90:	ldrd	r4, [sp]
   30c94:	add	sp, sp, #8
   30c98:	pop	{pc}		; (ldr pc, [sp], #4)
   30c9c:	ldr	r3, [r0, #36]	; 0x24
   30ca0:	movw	r2, #1019	; 0x3fb
   30ca4:	ldr	r1, [pc, #88]	; 30d04 <flatcc_json_parser_struct_as_root@@Base+0x1450>
   30ca8:	cmp	r3, ip
   30cac:	moveq	r3, #1
   30cb0:	add	r1, pc, r1
   30cb4:	streq	r3, [r0, #36]	; 0x24
   30cb8:	ldr	r3, [pc, #72]	; 30d08 <flatcc_json_parser_struct_as_root@@Base+0x1454>
   30cbc:	ldr	r0, [pc, #72]	; 30d0c <flatcc_json_parser_struct_as_root@@Base+0x1458>
   30cc0:	add	r3, pc, r3
   30cc4:	add	r3, r3, #264	; 0x108
   30cc8:	add	r0, pc, r0
   30ccc:	bl	145e8 <__assert_fail@plt>
   30cd0:	ldr	r3, [r5, #36]	; 0x24
   30cd4:	movw	r2, #1028	; 0x404
   30cd8:	ldr	r1, [pc, #48]	; 30d10 <flatcc_json_parser_struct_as_root@@Base+0x145c>
   30cdc:	ldr	r0, [pc, #48]	; 30d14 <flatcc_json_parser_struct_as_root@@Base+0x1460>
   30ce0:	cmp	r3, #0
   30ce4:	moveq	r3, #1
   30ce8:	add	r1, pc, r1
   30cec:	streq	r3, [r5, #36]	; 0x24
   30cf0:	ldr	r3, [pc, #32]	; 30d18 <flatcc_json_parser_struct_as_root@@Base+0x1464>
   30cf4:	add	r0, pc, r0
   30cf8:	add	r3, pc, r3
   30cfc:	add	r3, r3, #264	; 0x108
   30d00:	bl	145e8 <__assert_fail@plt>
   30d04:	ldrdeq	r2, [r1], -ip
   30d08:	andeq	r2, r1, r0, ror r2
   30d0c:	andeq	r2, r1, r8, lsr #20
   30d10:	andeq	r2, r1, r4, lsr #19
   30d14:	andeq	r2, r1, ip, lsl sl
   30d18:	andeq	r2, r1, r8, lsr r2
   30d1c:	bics	ip, r3, #224	; 0xe0
   30d20:	strd	r4, [sp, #-20]!	; 0xffffffec
   30d24:	strd	r6, [sp, #8]
   30d28:	mov	r7, r0
   30d2c:	str	lr, [sp, #16]
   30d30:	ldr	r6, [r2]
   30d34:	beq	30e48 <flatcc_json_parser_struct_as_root@@Base+0x1594>
   30d38:	cmp	ip, #1
   30d3c:	movne	r3, #0
   30d40:	movne	r0, #3
   30d44:	bne	30e34 <flatcc_json_parser_struct_as_root@@Base+0x1580>
   30d48:	ldr	r5, [pc, #328]	; 30e98 <flatcc_json_parser_struct_as_root@@Base+0x15e4>
   30d4c:	add	r5, pc, r5
   30d50:	cmp	r6, #2
   30d54:	bls	30dd0 <flatcc_json_parser_struct_as_root@@Base+0x151c>
   30d58:	add	r4, r7, #4
   30d5c:	add	ip, r1, #3
   30d60:	ldrb	r0, [ip, #-3]
   30d64:	sub	r6, r6, #3
   30d68:	mov	r1, ip
   30d6c:	cmp	r6, #2
   30d70:	mov	r7, r4
   30d74:	add	ip, ip, #3
   30d78:	add	r4, r4, #4
   30d7c:	ldrb	r0, [r5, r0, lsr #2]
   30d80:	strb	r0, [r4, #-8]
   30d84:	ldrb	lr, [ip, #-6]
   30d88:	ldrb	r0, [ip, #-5]
   30d8c:	lsl	lr, lr, #4
   30d90:	and	lr, lr, #48	; 0x30
   30d94:	orr	lr, lr, r0, lsr #4
   30d98:	ldrb	r0, [r5, lr]
   30d9c:	strb	r0, [r4, #-7]
   30da0:	ldrb	lr, [ip, #-5]
   30da4:	ldrb	r0, [ip, #-4]
   30da8:	lsl	lr, lr, #2
   30dac:	and	lr, lr, #60	; 0x3c
   30db0:	orr	lr, lr, r0, lsr #6
   30db4:	ldrb	r0, [r5, lr]
   30db8:	strb	r0, [r4, #-6]
   30dbc:	ldrb	r0, [ip, #-4]
   30dc0:	and	r0, r0, #63	; 0x3f
   30dc4:	ldrb	r0, [r5, r0]
   30dc8:	strb	r0, [r4, #-5]
   30dcc:	bhi	30d60 <flatcc_json_parser_struct_as_root@@Base+0x14ac>
   30dd0:	cmp	r6, #1
   30dd4:	and	r0, r3, #128	; 0x80
   30dd8:	beq	30e60 <flatcc_json_parser_struct_as_root@@Base+0x15ac>
   30ddc:	cmp	r6, #2
   30de0:	bne	30e54 <flatcc_json_parser_struct_as_root@@Base+0x15a0>
   30de4:	ldrb	r3, [r1]
   30de8:	cmp	r0, #0
   30dec:	movne	r0, #0
   30df0:	ldrb	r3, [r5, r3, lsr #2]
   30df4:	strb	r3, [r7]
   30df8:	ldrb	r3, [r1]
   30dfc:	ldrb	ip, [r1, #1]
   30e00:	lsl	r3, r3, #4
   30e04:	and	r3, r3, #48	; 0x30
   30e08:	orr	r3, r3, ip, lsr #4
   30e0c:	ldrb	r3, [r5, r3]
   30e10:	strb	r3, [r7, #1]
   30e14:	ldrb	r3, [r1, #1]
   30e18:	lsl	r3, r3, #2
   30e1c:	and	r3, r3, #60	; 0x3c
   30e20:	ldrb	r3, [r5, r3]
   30e24:	strb	r3, [r7, #2]
   30e28:	movne	r3, #61	; 0x3d
   30e2c:	strbne	r3, [r7, #3]
   30e30:	ldr	r3, [r2]
   30e34:	str	r3, [r2]
   30e38:	ldrd	r4, [sp]
   30e3c:	ldrd	r6, [sp, #8]
   30e40:	add	sp, sp, #16
   30e44:	pop	{pc}		; (ldr pc, [sp], #4)
   30e48:	ldr	r5, [pc, #76]	; 30e9c <flatcc_json_parser_struct_as_root@@Base+0x15e8>
   30e4c:	add	r5, pc, r5
   30e50:	b	30d50 <flatcc_json_parser_struct_as_root@@Base+0x149c>
   30e54:	mov	r0, #0
   30e58:	ldr	r3, [r2]
   30e5c:	b	30e34 <flatcc_json_parser_struct_as_root@@Base+0x1580>
   30e60:	ldrb	r3, [r1]
   30e64:	cmp	r0, #0
   30e68:	movne	r0, #0
   30e6c:	ldrb	r3, [r5, r3, lsr #2]
   30e70:	strb	r3, [r7]
   30e74:	ldrb	r3, [r1]
   30e78:	lsl	r3, r3, #4
   30e7c:	and	r3, r3, #48	; 0x30
   30e80:	ldrb	r3, [r5, r3]
   30e84:	strb	r3, [r7, #1]
   30e88:	movne	r3, #61	; 0x3d
   30e8c:	strbne	r3, [r7, #2]
   30e90:	strbne	r3, [r7, #3]
   30e94:	b	30e30 <flatcc_json_parser_struct_as_root@@Base+0x157c>
   30e98:	andeq	r2, r1, r0, ror #19
   30e9c:	andeq	r2, r1, r4, lsr #18
   30ea0:	subs	r1, r0, #0
   30ea4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30ea8:	strd	r6, [sp, #8]
   30eac:	strd	r8, [sp, #16]
   30eb0:	strd	sl, [sp, #24]
   30eb4:	str	lr, [sp, #32]
   30eb8:	sub	sp, sp, #164	; 0xa4
   30ebc:	vstr	d0, [sp, #48]	; 0x30
   30ec0:	str	r1, [sp, #60]	; 0x3c
   30ec4:	beq	319bc <flatcc_json_parser_struct_as_root@@Base+0x2108>
   30ec8:	vmov	r4, r5, d0
   30ecc:	mov	r7, #0
   30ed0:	movt	r7, #65504	; 0xffe0
   30ed4:	mov	r6, #0
   30ed8:	adds	r2, r4, r4
   30edc:	adc	r3, r5, r5
   30ee0:	cmp	r3, r7
   30ee4:	cmpeq	r2, r6
   30ee8:	bhi	31748 <flatcc_json_parser_struct_as_root@@Base+0x1e94>
   30eec:	cmp	r4, #0
   30ef0:	sbcs	r3, r5, #0
   30ef4:	blt	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1e2c>
   30ef8:	ldr	r3, [sp, #60]	; 0x3c
   30efc:	str	r3, [sp, #56]	; 0x38
   30f00:	orrs	r3, r4, r5
   30f04:	beq	3170c <flatcc_json_parser_struct_as_root@@Base+0x1e58>
   30f08:	mov	r3, #0
   30f0c:	movt	r3, #32752	; 0x7ff0
   30f10:	mov	r2, #0
   30f14:	cmp	r5, r3
   30f18:	cmpeq	r4, r2
   30f1c:	beq	31790 <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   30f20:	ldrd	r2, [sp, #48]	; 0x30
   30f24:	mov	r8, #0
   30f28:	bic	r9, r3, #-2147483648	; 0x80000000
   30f2c:	mov	r0, r3
   30f30:	str	r2, [sp, #72]	; 0x48
   30f34:	lsr	r9, r9, #20
   30f38:	ubfx	r3, r0, #0, #20
   30f3c:	lsl	r9, r9, #20
   30f40:	str	r3, [sp, #76]	; 0x4c
   30f44:	orrs	r3, r8, r9
   30f48:	beq	31764 <flatcc_json_parser_struct_as_root@@Base+0x1eb0>
   30f4c:	ldrd	r2, [sp, #72]	; 0x48
   30f50:	ubfx	r0, r0, #20, #11
   30f54:	sub	r0, r0, #1072	; 0x430
   30f58:	adds	r4, r2, #0
   30f5c:	adc	r7, r3, #1048576	; 0x100000
   30f60:	sub	r3, r0, #3
   30f64:	sub	r0, r0, #4
   30f68:	str	r3, [sp, #120]	; 0x78
   30f6c:	ldr	ip, [sp, #120]	; 0x78
   30f70:	mov	lr, #0
   30f74:	movt	lr, #65472	; 0xffc0
   30f78:	str	r4, [sp, #32]
   30f7c:	mov	r5, #0
   30f80:	str	r7, [sp, #36]	; 0x24
   30f84:	strd	sl, [sp, #112]	; 0x70
   30f88:	mov	fp, r7
   30f8c:	ldrd	r2, [sp, #32]
   30f90:	strd	r8, [sp, #32]
   30f94:	mov	r9, r4
   30f98:	mov	r4, r0
   30f9c:	mov	r0, lr
   30fa0:	lsl	r1, r3, #10
   30fa4:	mov	r6, r5
   30fa8:	sub	ip, ip, #10
   30fac:	lsl	lr, r2, #10
   30fb0:	orr	r1, r1, r2, lsr #22
   30fb4:	mov	r2, lr
   30fb8:	and	r7, r1, r0
   30fbc:	mov	r3, r1
   30fc0:	orrs	r1, r6, r7
   30fc4:	beq	30fa0 <flatcc_json_parser_struct_as_root@@Base+0x16ec>
   30fc8:	cmp	lr, #0
   30fcc:	mov	r0, r4
   30fd0:	str	ip, [sp, #88]	; 0x58
   30fd4:	mov	r4, r9
   30fd8:	ldrd	r8, [sp, #32]
   30fdc:	mov	r7, fp
   30fe0:	strd	r2, [sp, #32]
   30fe4:	sbcs	r3, r3, #0
   30fe8:	blt	31014 <flatcc_json_parser_struct_as_root@@Base+0x1760>
   30fec:	ldrd	r2, [sp, #32]
   30ff0:	mov	r1, ip
   30ff4:	adds	r2, r2, r2
   30ff8:	sub	r1, r1, #1
   30ffc:	adc	r3, r3, r3
   31000:	cmp	r2, #0
   31004:	sbcs	ip, r3, #0
   31008:	bge	30ff4 <flatcc_json_parser_struct_as_root@@Base+0x1740>
   3100c:	strd	r2, [sp, #32]
   31010:	str	r1, [sp, #88]	; 0x58
   31014:	adds	lr, r4, r4
   31018:	mov	r6, #0
   3101c:	movt	r6, #65472	; 0xffc0
   31020:	adc	r3, r7, r7
   31024:	strd	r8, [sp, #136]	; 0x88
   31028:	adds	sl, lr, #1
   3102c:	sub	r5, r0, #10
   31030:	str	lr, [sp, #144]	; 0x90
   31034:	adc	fp, r3, #0
   31038:	mov	ip, #0
   3103c:	str	r3, [sp, #148]	; 0x94
   31040:	mov	r9, r7
   31044:	mov	r3, r4
   31048:	mov	lr, r6
   3104c:	mov	r4, r0
   31050:	lsl	r1, fp, #10
   31054:	mov	r0, r5
   31058:	mov	r6, ip
   3105c:	lsl	r5, sl, #10
   31060:	orr	r1, r1, sl, lsr #22
   31064:	mov	sl, r5
   31068:	sub	r5, r0, #10
   3106c:	and	r7, r1, lr
   31070:	mov	fp, r1
   31074:	orrs	r2, r6, r7
   31078:	beq	31050 <flatcc_json_parser_struct_as_root@@Base+0x179c>
   3107c:	mov	r1, r0
   31080:	cmp	sl, #0
   31084:	ldr	lr, [sp, #144]	; 0x90
   31088:	mov	r0, r4
   3108c:	mov	r4, r3
   31090:	sbcs	r3, fp, #0
   31094:	mov	r7, r9
   31098:	str	r1, [sp, #112]	; 0x70
   3109c:	ldrd	r8, [sp, #136]	; 0x88
   310a0:	blt	310c8 <flatcc_json_parser_struct_as_root@@Base+0x1814>
   310a4:	ldrd	r2, [sp, #32]
   310a8:	adds	sl, sl, sl
   310ac:	sub	r1, r1, #1
   310b0:	adc	fp, fp, fp
   310b4:	cmp	sl, #0
   310b8:	sbcs	ip, fp, #0
   310bc:	bge	310a8 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   310c0:	strd	r2, [sp, #32]
   310c4:	str	r1, [sp, #112]	; 0x70
   310c8:	vldr	d7, [sp, #48]	; 0x30
   310cc:	vcmpe.f64	d7, #0.0
   310d0:	vmrs	APSR_nzcv, fpscr
   310d4:	ble	319e0 <flatcc_json_parser_struct_as_root@@Base+0x212c>
   310d8:	vldr	d7, [pc, #888]	; 31458 <flatcc_json_parser_struct_as_root@@Base+0x1ba4>
   310dc:	vldr	d6, [sp, #48]	; 0x30
   310e0:	vcmpe.f64	d6, d7
   310e4:	vmrs	APSR_nzcv, fpscr
   310e8:	bhi	319e0 <flatcc_json_parser_struct_as_root@@Base+0x212c>
   310ec:	orrs	r3, r8, r9
   310f0:	ldrd	r2, [sp, #72]	; 0x48
   310f4:	movne	r1, #1
   310f8:	moveq	r1, #0
   310fc:	mov	ip, r2
   31100:	orrs	r3, ip, r3
   31104:	movne	r1, #0
   31108:	cmp	r1, #0
   3110c:	bne	318c8 <flatcc_json_parser_struct_as_root@@Base+0x2014>
   31110:	ldr	r3, [sp, #148]	; 0x94
   31114:	subs	lr, lr, #1
   31118:	sbc	ip, r3, #0
   3111c:	ldr	r3, [sp, #112]	; 0x70
   31120:	mvn	r1, #60	; 0x3c
   31124:	vldr	d6, [pc, #820]	; 31460 <flatcc_json_parser_struct_as_root@@Base+0x1bac>
   31128:	sub	r0, r0, r3
   3112c:	ldr	r3, [sp, #88]	; 0x58
   31130:	lsl	ip, ip, r0
   31134:	sub	r4, r0, #32
   31138:	lsl	r7, lr, r0
   3113c:	orr	ip, ip, lr, lsl r4
   31140:	sub	r3, r1, r3
   31144:	rsb	r1, r0, #32
   31148:	orr	ip, ip, lr, lsr r1
   3114c:	vmov	s14, r3
   31150:	vcvt.f64.s32	d7, s14
   31154:	vmul.f64	d7, d7, d6
   31158:	vcmpe.f64	d7, #0.0
   3115c:	vcvt.s32.f64	s13, d7
   31160:	vmrs	APSR_nzcv, fpscr
   31164:	bmi	31188 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   31168:	vcvt.f64.s32	d5, s13
   3116c:	vsub.f64	d7, d7, d5
   31170:	vcmp.f64	d7, #0.0
   31174:	vmrs	APSR_nzcv, fpscr
   31178:	beq	31188 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   3117c:	vmov	r3, s13
   31180:	add	r3, r3, #1
   31184:	vmov	s13, r3
   31188:	vmov	r3, s13
   3118c:	mov	r1, #0
   31190:	add	r9, r3, #344	; 0x158
   31194:	ldr	r3, [pc, #716]	; 31468 <flatcc_json_parser_struct_as_root@@Base+0x1bb4>
   31198:	add	lr, r9, #10
   3119c:	add	r9, r9, #3
   311a0:	cmp	r9, r1
   311a4:	movlt	r9, lr
   311a8:	asr	r9, r9, #3
   311ac:	add	r3, pc, r3
   311b0:	add	r9, r9, #1
   311b4:	add	r0, r3, #320	; 0x140
   311b8:	lsl	lr, r9, #4
   311bc:	add	r4, r3, #312	; 0x138
   311c0:	str	r3, [sp, #144]	; 0x90
   311c4:	ldrd	r2, [sp, #32]
   311c8:	add	r0, r0, lr
   311cc:	add	r9, r4, lr
   311d0:	ldr	lr, [r0, #-8]
   311d4:	ldr	r8, [r0, #-4]
   311d8:	umull	r4, r5, r3, lr
   311dc:	mov	r3, r2
   311e0:	umull	r2, r3, r3, lr
   311e4:	str	r5, [sp, #72]	; 0x48
   311e8:	adds	r2, r3, r4
   311ec:	ldr	r3, [sp, #32]
   311f0:	adc	r6, r1, r1
   311f4:	adds	r2, r2, #-2147483648	; 0x80000000
   311f8:	adc	r6, r6, r1
   311fc:	umull	r4, r5, r3, r8
   31200:	ldr	r3, [sp, #72]	; 0x48
   31204:	mov	r0, r4
   31208:	adds	r2, r2, r0
   3120c:	ldrsh	r0, [r9, #8]
   31210:	adc	r6, r6, r1
   31214:	adds	r3, r3, r5
   31218:	umull	r4, r5, lr, r7
   3121c:	mov	r4, #0
   31220:	str	r3, [sp, #104]	; 0x68
   31224:	adc	r3, r1, r1
   31228:	ldr	r1, [sp, #88]	; 0x58
   3122c:	str	r3, [sp, #108]	; 0x6c
   31230:	umull	r2, r3, lr, ip
   31234:	strd	r2, [sp, #120]	; 0x78
   31238:	ldrsh	r3, [r9, #10]
   3123c:	ldr	r9, [sp, #36]	; 0x24
   31240:	str	r3, [sp, #136]	; 0x88
   31244:	ldrd	r2, [sp, #104]	; 0x68
   31248:	umlal	r2, r3, r8, r9
   3124c:	add	r9, r0, r1
   31250:	umull	r0, r1, r8, r7
   31254:	strd	r0, [sp, #72]	; 0x48
   31258:	adds	r1, r6, r2
   3125c:	adc	r3, r4, r3
   31260:	str	r1, [sp, #128]	; 0x80
   31264:	umull	r0, r1, r8, ip
   31268:	str	r3, [sp, #132]	; 0x84
   3126c:	ldrd	r2, [sp, #120]	; 0x78
   31270:	strd	r0, [sp, #32]
   31274:	umull	r0, r1, lr, fp
   31278:	adds	r5, r5, r2
   3127c:	mov	r6, r3
   31280:	ldrd	r2, [sp, #72]	; 0x48
   31284:	adc	ip, r4, r4
   31288:	adds	r5, r5, #-2147483648	; 0x80000000
   3128c:	strd	r0, [sp, #72]	; 0x48
   31290:	adc	ip, ip, r4
   31294:	umull	r0, r1, lr, sl
   31298:	mov	r7, r3
   3129c:	ldr	r3, [sp, #32]
   312a0:	adds	r5, r5, r2
   312a4:	adc	ip, ip, r4
   312a8:	subs	r2, r3, #1
   312ac:	ldr	r3, [sp, #36]	; 0x24
   312b0:	sbc	r3, r3, #0
   312b4:	adds	r6, r2, r6
   312b8:	adc	r3, r3, r4
   312bc:	adds	lr, r6, r7
   312c0:	umull	r6, r7, r8, sl
   312c4:	adc	r3, r3, r4
   312c8:	mov	r2, r1
   312cc:	umull	sl, fp, r8, fp
   312d0:	adds	r1, ip, lr
   312d4:	adc	r3, r4, r3
   312d8:	str	r1, [sp, #96]	; 0x60
   312dc:	ldrd	r0, [sp, #72]	; 0x48
   312e0:	str	r3, [sp, #100]	; 0x64
   312e4:	adds	r2, r2, r0
   312e8:	adc	r3, r4, r4
   312ec:	adds	r2, r2, #-2147483648	; 0x80000000
   312f0:	adc	r3, r3, r4
   312f4:	adds	r2, r2, r6
   312f8:	adc	r3, r3, r4
   312fc:	mov	r2, r1
   31300:	adds	r0, sl, #1
   31304:	adc	r1, fp, r4
   31308:	adds	r2, r0, r2
   3130c:	adc	r1, r1, r4
   31310:	adds	r2, r2, r7
   31314:	mov	r0, r4
   31318:	adc	r4, r1, r4
   3131c:	adds	r3, r3, r2
   31320:	str	r3, [sp, #80]	; 0x50
   31324:	adc	r3, r0, r4
   31328:	str	r3, [sp, #84]	; 0x54
   3132c:	ldrd	r0, [sp, #80]	; 0x50
   31330:	ldrd	r2, [sp, #96]	; 0x60
   31334:	subs	ip, r0, r2
   31338:	str	ip, [sp, #64]	; 0x40
   3133c:	sbc	ip, r1, r3
   31340:	cmp	r3, r1
   31344:	cmpeq	r2, r0
   31348:	str	ip, [sp, #68]	; 0x44
   3134c:	bhi	319b8 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   31350:	add	r3, r9, #129	; 0x81
   31354:	movw	r4, #1233	; 0x4d1
   31358:	ldr	r6, [sp, #144]	; 0x90
   3135c:	mvn	r0, #63	; 0x3f
   31360:	mov	r2, #1
   31364:	mul	r4, r4, r3
   31368:	sub	r0, r0, r9
   3136c:	ldrd	r8, [sp, #80]	; 0x50
   31370:	sub	r7, r0, #32
   31374:	lsl	ip, r2, r0
   31378:	rsb	sl, r0, #32
   3137c:	lsl	r5, r2, r7
   31380:	asr	r4, r4, #12
   31384:	str	r7, [sp, #72]	; 0x48
   31388:	str	ip, [sp, #148]	; 0x94
   3138c:	add	lr, r4, r2
   31390:	lsr	r3, r8, r0
   31394:	add	r1, r6, lr, lsl #2
   31398:	orr	r2, r5, r2, lsr sl
   3139c:	subs	r5, ip, #1
   313a0:	ldr	ip, [r1, #1704]	; 0x6a8
   313a4:	orr	r3, r3, r9, lsl sl
   313a8:	mov	r1, r8
   313ac:	and	r1, r1, r5
   313b0:	orr	r3, r3, r9, lsr r7
   313b4:	str	r2, [sp, #144]	; 0x90
   313b8:	sbc	r2, r2, #0
   313bc:	str	r1, [sp, #32]
   313c0:	cmp	r3, ip
   313c4:	str	r5, [sp, #96]	; 0x60
   313c8:	str	r2, [sp, #104]	; 0x68
   313cc:	and	r2, r9, r2
   313d0:	str	r2, [sp, #36]	; 0x24
   313d4:	bcs	313e8 <flatcc_json_parser_struct_as_root@@Base+0x1b34>
   313d8:	add	r2, r6, r4, lsl #2
   313dc:	mov	lr, r4
   313e0:	sub	r4, r4, #1
   313e4:	ldr	ip, [r2, #1704]	; 0x6a8
   313e8:	cmp	lr, #0
   313ec:	ble	31940 <flatcc_json_parser_struct_as_root@@Base+0x208c>
   313f0:	udiv	r2, r3, ip
   313f4:	ldrd	r6, [sp, #32]
   313f8:	mls	r8, ip, r2, r3
   313fc:	ldr	r3, [sp, #56]	; 0x38
   31400:	add	r2, r2, #48	; 0x30
   31404:	lsl	r1, r8, r0
   31408:	strb	r2, [r3]
   3140c:	ldr	r3, [sp, #72]	; 0x48
   31410:	lsl	r2, r8, r3
   31414:	adds	r3, r1, r6
   31418:	orr	r2, r2, r8, lsr sl
   3141c:	str	r3, [sp, #40]	; 0x28
   31420:	adc	r3, r2, r7
   31424:	ldrd	r6, [sp, #64]	; 0x40
   31428:	str	r3, [sp, #44]	; 0x2c
   3142c:	ldrd	r2, [sp, #40]	; 0x28
   31430:	cmp	r7, r3
   31434:	cmpeq	r6, r2
   31438:	bhi	317c4 <flatcc_json_parser_struct_as_root@@Base+0x1f10>
   3143c:	movw	fp, #52429	; 0xcccd
   31440:	movt	fp, #52428	; 0xcccc
   31444:	ldr	lr, [sp, #56]	; 0x38
   31448:	mov	r5, #1
   3144c:	mov	r3, r8
   31450:	b	314d8 <flatcc_json_parser_struct_as_root@@Base+0x1c24>
   31454:	nop	{0}
   31458:			; <UNDEFINED> instruction: 0xffffffff
   3145c:	svcvc	0x00efffff
   31460:			; <UNDEFINED> instruction: 0x509f79fe
   31464:	svccc	0x00d34413
   31468:	andeq	r1, r1, r4, lsl #27
   3146c:	ldrdeq	r2, [r1], -r4
   31470:	andeq	r1, r1, ip, ror #30
   31474:	andeq	r1, r1, r4, ror #10
   31478:	andeq	r1, r1, r0, ror #27
   3147c:	andeq	r1, r1, ip, asr #28
   31480:	andeq	r1, r1, r0, asr #10
   31484:			; <UNDEFINED> instruction: 0x00011dbc
   31488:	andeq	r1, r1, ip, lsr lr
   3148c:	udiv	r2, r3, ip
   31490:	ldrd	r8, [sp, #32]
   31494:	mov	r5, r1
   31498:	mls	r3, ip, r2, r3
   3149c:	add	r2, r2, #48	; 0x30
   314a0:	strb	r2, [lr, #1]!
   314a4:	ldr	r2, [sp, #72]	; 0x48
   314a8:	lsl	r6, r3, r0
   314ac:	adds	r6, r6, r8
   314b0:	str	r6, [sp, #40]	; 0x28
   314b4:	lsl	r2, r3, r2
   314b8:	ldrd	r6, [sp, #64]	; 0x40
   314bc:	orr	r2, r2, r3, lsr sl
   314c0:	adc	r2, r2, r9
   314c4:	str	r2, [sp, #44]	; 0x2c
   314c8:	ldrd	r8, [sp, #40]	; 0x28
   314cc:	cmp	r7, r9
   314d0:	cmpeq	r6, r8
   314d4:	bhi	317c8 <flatcc_json_parser_struct_as_root@@Base+0x1f14>
   314d8:	umull	r2, ip, fp, ip
   314dc:	sub	r4, r4, #1
   314e0:	add	r6, r5, #1
   314e4:	cmn	r4, #1
   314e8:	mov	r1, r6
   314ec:	lsr	ip, ip, #3
   314f0:	bne	3148c <flatcc_json_parser_struct_as_root@@Base+0x1bd8>
   314f4:	mov	lr, #0
   314f8:	add	r2, lr, r5
   314fc:	sub	r3, r5, #1
   31500:	ldrd	r8, [sp, #32]
   31504:	mov	ip, #1
   31508:	mov	lr, #0
   3150c:	str	r2, [sp, #40]	; 0x28
   31510:	ldr	r2, [sp, #56]	; 0x38
   31514:	str	r0, [sp, #120]	; 0x78
   31518:	ldrd	r0, [sp, #64]	; 0x40
   3151c:	str	sl, [sp, #64]	; 0x40
   31520:	ldr	sl, [sp, #72]	; 0x48
   31524:	add	r5, r2, r3
   31528:	str	r5, [sp, #32]
   3152c:	b	31534 <flatcc_json_parser_struct_as_root@@Base+0x1c80>
   31530:	add	r6, r6, #1
   31534:	lsl	r2, r9, #2
   31538:	ldr	r5, [sp, #96]	; 0x60
   3153c:	lsl	r3, r8, #2
   31540:	orr	r2, r2, r8, lsr #30
   31544:	adds	r3, r3, r8
   31548:	lsl	r4, lr, #2
   3154c:	adc	r2, r2, r9
   31550:	adds	r3, r3, r3
   31554:	lsl	fp, ip, #2
   31558:	and	r8, r5, r3
   3155c:	ldr	r5, [sp, #120]	; 0x78
   31560:	orr	r4, r4, ip, lsr #30
   31564:	adc	r2, r2, r2
   31568:	adds	ip, fp, ip
   3156c:	lsl	fp, r1, #2
   31570:	adc	lr, r4, lr
   31574:	ldr	r4, [sp, #64]	; 0x40
   31578:	adds	ip, ip, ip
   3157c:	orr	fp, fp, r0, lsr #30
   31580:	adc	lr, lr, lr
   31584:	lsr	r3, r3, r5
   31588:	ldr	r5, [sp, #104]	; 0x68
   3158c:	orr	r3, r3, r2, lsl r4
   31590:	orr	r3, r3, r2, lsr sl
   31594:	and	r9, r5, r2
   31598:	lsl	r2, r0, #2
   3159c:	add	r3, r3, #48	; 0x30
   315a0:	adds	r2, r2, r0
   315a4:	adc	fp, fp, r1
   315a8:	adds	r0, r2, r2
   315ac:	ldr	r2, [sp, #32]
   315b0:	adc	r1, fp, fp
   315b4:	cmp	r1, r9
   315b8:	cmpeq	r0, r8
   315bc:	strb	r3, [r2, #1]!
   315c0:	ldr	r3, [sp, #40]	; 0x28
   315c4:	str	r2, [sp, #32]
   315c8:	sub	r4, r3, r6
   315cc:	bls	31530 <flatcc_json_parser_struct_as_root@@Base+0x1c7c>
   315d0:	ldrd	sl, [sp, #80]	; 0x50
   315d4:	mov	r5, r6
   315d8:	strd	r8, [sp, #32]
   315dc:	ldr	r8, [sp, #112]	; 0x70
   315e0:	ldrd	r2, [sp, #128]	; 0x80
   315e4:	subs	r6, sl, r2
   315e8:	sbc	r7, fp, r3
   315ec:	cmp	r3, fp
   315f0:	cmpeq	r2, sl
   315f4:	ldr	r2, [sp, #88]	; 0x58
   315f8:	movhi	r3, #1
   315fc:	movls	r3, #0
   31600:	cmp	r2, r8
   31604:	orrne	r3, r3, #1
   31608:	cmp	r3, #0
   3160c:	bne	319b8 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   31610:	ldrd	r8, [sp, #32]
   31614:	mul	r7, ip, r7
   31618:	umull	r2, r3, ip, r6
   3161c:	strd	r0, [sp]
   31620:	mov	r1, r5
   31624:	ldr	r0, [sp, #56]	; 0x38
   31628:	mla	r6, r6, lr, r7
   3162c:	ldr	r7, [sp, #144]	; 0x90
   31630:	strd	r8, [sp, #8]
   31634:	ldr	r8, [sp, #148]	; 0x94
   31638:	add	r3, r6, r3
   3163c:	str	ip, [sp, #24]
   31640:	str	lr, [sp, #28]
   31644:	str	r8, [sp, #16]
   31648:	str	r7, [sp, #20]
   3164c:	bl	303d8 <flatcc_json_parser_struct_as_root@@Base+0xb24>
   31650:	ldr	r3, [sp, #136]	; 0x88
   31654:	cmp	r0, #0
   31658:	sub	r6, r4, r3
   3165c:	beq	318e8 <flatcc_json_parser_struct_as_root@@Base+0x2034>
   31660:	ldr	r3, [sp, #136]	; 0x88
   31664:	cmp	r5, #2
   31668:	movge	r0, r5
   3166c:	movlt	r0, #2
   31670:	sub	r4, r3, r4
   31674:	cmp	r0, r4
   31678:	suble	r0, r0, #1
   3167c:	movgt	r0, r4
   31680:	cmp	r6, #0
   31684:	blt	31848 <flatcc_json_parser_struct_as_root@@Base+0x1f94>
   31688:	ldr	r3, [sp, #56]	; 0x38
   3168c:	cmp	r6, #2
   31690:	add	r3, r3, r5
   31694:	bgt	31918 <flatcc_json_parser_struct_as_root@@Base+0x2064>
   31698:	cmp	r6, #0
   3169c:	sub	r1, r6, #1
   316a0:	movgt	r0, r3
   316a4:	movgt	r2, #48	; 0x30
   316a8:	addgt	r6, r0, r6
   316ac:	ble	316cc <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   316b0:	strb	r2, [r0], #1
   316b4:	cmp	r6, r0
   316b8:	bne	316b0 <flatcc_json_parser_struct_as_root@@Base+0x1dfc>
   316bc:	ldr	r3, [sp, #56]	; 0x38
   316c0:	add	r0, r5, #1
   316c4:	add	r0, r0, r1
   316c8:	add	r3, r3, r0
   316cc:	ldr	r1, [sp, #60]	; 0x3c
   316d0:	mov	r2, #0
   316d4:	strb	r2, [r3]
   316d8:	sub	r0, r3, r1
   316dc:	b	3172c <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   316e0:	vldr	d7, [sp, #48]	; 0x30
   316e4:	add	r3, r5, #-2147483648	; 0x80000000
   316e8:	mov	r2, #45	; 0x2d
   316ec:	mov	r5, r3
   316f0:	ldr	r0, [sp, #60]	; 0x3c
   316f4:	orrs	r3, r4, r5
   316f8:	vneg.f64	d7, d7
   316fc:	strb	r2, [r0], #1
   31700:	vstr	d7, [sp, #48]	; 0x30
   31704:	str	r0, [sp, #56]	; 0x38
   31708:	bne	30f08 <flatcc_json_parser_struct_as_root@@Base+0x1654>
   3170c:	ldr	r1, [sp, #56]	; 0x38
   31710:	mov	r3, #0
   31714:	mov	r2, #48	; 0x30
   31718:	mov	r0, r1
   3171c:	strb	r2, [r1]
   31720:	strb	r3, [r0, #1]!
   31724:	ldr	r3, [sp, #60]	; 0x3c
   31728:	sub	r0, r0, r3
   3172c:	add	sp, sp, #164	; 0xa4
   31730:	ldrd	r4, [sp]
   31734:	ldrd	r6, [sp, #8]
   31738:	ldrd	r8, [sp, #16]
   3173c:	ldrd	sl, [sp, #24]
   31740:	add	sp, sp, #32
   31744:	pop	{pc}		; (ldr pc, [sp], #4)
   31748:	ldr	r1, [pc, #-740]	; 3146c <flatcc_json_parser_struct_as_root@@Base+0x1bb8>
   3174c:	mov	r2, r5
   31750:	vmov	r3, s0
   31754:	add	r1, pc, r1
   31758:	bl	145d0 <sprintf@plt>
   3175c:	mov	r0, #21
   31760:	b	3172c <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   31764:	ldrd	r2, [sp, #72]	; 0x48
   31768:	orrs	r1, r2, r3
   3176c:	beq	31a04 <flatcc_json_parser_struct_as_root@@Base+0x2150>
   31770:	movw	r1, #64462	; 0xfbce
   31774:	movt	r1, #65535	; 0xffff
   31778:	movw	r0, #64461	; 0xfbcd
   3177c:	movt	r0, #65535	; 0xffff
   31780:	mov	r4, r2
   31784:	mov	r7, r3
   31788:	str	r1, [sp, #120]	; 0x78
   3178c:	b	30f6c <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   31790:	ldr	ip, [sp, #56]	; 0x38
   31794:	mov	r3, #105	; 0x69
   31798:	mov	r1, #110	; 0x6e
   3179c:	mov	r2, #102	; 0x66
   317a0:	mov	r0, ip
   317a4:	strb	r3, [ip]
   317a8:	mov	r3, #0
   317ac:	strb	r1, [ip, #1]
   317b0:	strb	r2, [ip, #2]
   317b4:	strb	r3, [r0, #3]!
   317b8:	ldr	r3, [sp, #60]	; 0x3c
   317bc:	sub	r0, r0, r3
   317c0:	b	3172c <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   317c4:	mov	r1, #1
   317c8:	ldrd	r6, [sp, #80]	; 0x50
   317cc:	ldr	r5, [sp, #88]	; 0x58
   317d0:	ldrd	r8, [sp, #128]	; 0x80
   317d4:	subs	r2, r6, r8
   317d8:	mov	lr, r9
   317dc:	sbc	r3, r7, r9
   317e0:	cmp	r9, r7
   317e4:	cmpeq	r8, r6
   317e8:	ldr	r6, [sp, #112]	; 0x70
   317ec:	movhi	lr, #1
   317f0:	movls	lr, #0
   317f4:	cmp	r5, r6
   317f8:	orrne	lr, lr, #1
   317fc:	cmp	lr, #0
   31800:	bne	319b8 <flatcc_json_parser_struct_as_root@@Base+0x2104>
   31804:	ldrd	r6, [sp, #64]	; 0x40
   31808:	lsl	r9, ip, r0
   3180c:	mov	r5, r1
   31810:	ldr	lr, [sp, #72]	; 0x48
   31814:	ldr	r0, [sp, #56]	; 0x38
   31818:	strd	r6, [sp]
   3181c:	mov	r6, #1
   31820:	mov	r7, #0
   31824:	str	r9, [sp, #16]
   31828:	lsl	lr, ip, lr
   3182c:	strd	r6, [sp, #24]
   31830:	orr	lr, lr, ip, lsr sl
   31834:	ldrd	sl, [sp, #40]	; 0x28
   31838:	strd	sl, [sp, #8]
   3183c:	str	lr, [sp, #20]
   31840:	bl	303d8 <flatcc_json_parser_struct_as_root@@Base+0xb24>
   31844:	b	31650 <flatcc_json_parser_struct_as_root@@Base+0x1d9c>
   31848:	add	r3, r6, r5
   3184c:	cmp	r4, r5
   31850:	cmnge	r3, #2
   31854:	bge	3194c <flatcc_json_parser_struct_as_root@@Base+0x2098>
   31858:	cmp	r5, #1
   3185c:	beq	31910 <flatcc_json_parser_struct_as_root@@Base+0x205c>
   31860:	cmp	r0, #0
   31864:	ble	31884 <flatcc_json_parser_struct_as_root@@Base+0x1fd0>
   31868:	ldr	r3, [sp, #56]	; 0x38
   3186c:	add	r3, r3, r5
   31870:	sub	r1, r3, r0
   31874:	ldrb	r2, [r3, #-1]
   31878:	strb	r2, [r3], #-1
   3187c:	cmp	r1, r3
   31880:	bne	31874 <flatcc_json_parser_struct_as_root@@Base+0x1fc0>
   31884:	ldr	ip, [sp, #56]	; 0x38
   31888:	sub	r3, r5, r0
   3188c:	mov	r1, #46	; 0x2e
   31890:	add	r2, r5, #1
   31894:	adds	r0, r0, r6
   31898:	strb	r1, [ip, r3]
   3189c:	add	r3, ip, r2
   318a0:	beq	316cc <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   318a4:	ldr	r4, [sp, #56]	; 0x38
   318a8:	mov	r3, #101	; 0x65
   318ac:	add	r5, r5, #2
   318b0:	add	r1, r4, r5
   318b4:	strb	r3, [r4, r2]
   318b8:	bl	30664 <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   318bc:	add	r0, r5, r0
   318c0:	add	r3, r4, r0
   318c4:	b	316cc <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   318c8:	ldr	r3, [sp, #120]	; 0x78
   318cc:	lsl	ip, r7, #2
   318d0:	lsl	lr, r4, #2
   318d4:	orr	ip, ip, r4, lsr #30
   318d8:	subs	lr, lr, #1
   318dc:	sbc	ip, ip, #0
   318e0:	sub	r0, r3, #2
   318e4:	b	3111c <flatcc_json_parser_struct_as_root@@Base+0x1868>
   318e8:	ldr	r1, [pc, #-1152]	; 31470 <flatcc_json_parser_struct_as_root@@Base+0x1bbc>
   318ec:	ldrd	r2, [sp, #48]	; 0x30
   318f0:	ldr	r4, [sp, #56]	; 0x38
   318f4:	add	r1, pc, r1
   318f8:	mov	r0, r4
   318fc:	bl	145d0 <sprintf@plt>
   31900:	ldr	r2, [sp, #60]	; 0x3c
   31904:	sub	r3, r4, r2
   31908:	add	r0, r3, r0
   3190c:	b	3172c <flatcc_json_parser_struct_as_root@@Base+0x1e78>
   31910:	ldr	r3, [sp, #56]	; 0x38
   31914:	add	r3, r3, #1
   31918:	ldr	r4, [sp, #56]	; 0x38
   3191c:	mov	r2, #101	; 0x65
   31920:	add	r5, r5, #1
   31924:	mov	r0, r6
   31928:	strb	r2, [r3]
   3192c:	add	r1, r4, r5
   31930:	bl	30664 <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   31934:	add	r0, r5, r0
   31938:	add	r3, r4, r0
   3193c:	b	316cc <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   31940:	mov	r5, #0
   31944:	mov	r6, #1
   31948:	b	314f8 <flatcc_json_parser_struct_as_root@@Base+0x1c44>
   3194c:	ldr	r4, [sp, #56]	; 0x38
   31950:	rsb	r0, r5, #2
   31954:	mov	r2, r5
   31958:	sub	r0, r0, r6
   3195c:	mov	r1, r4
   31960:	add	r0, r4, r0
   31964:	bl	14504 <memmove@plt>
   31968:	rsb	r3, r6, #2
   3196c:	mov	r0, #48	; 0x30
   31970:	sub	r3, r3, r5
   31974:	mov	r2, #46	; 0x2e
   31978:	cmp	r3, #2
   3197c:	strb	r0, [r4]
   31980:	strb	r2, [r4, #1]
   31984:	ble	319b0 <flatcc_json_parser_struct_as_root@@Base+0x20fc>
   31988:	sub	r1, r4, #1
   3198c:	add	r2, r4, #1
   31990:	add	r1, r1, r3
   31994:	strb	r0, [r2, #1]!
   31998:	cmp	r1, r2
   3199c:	bne	31994 <flatcc_json_parser_struct_as_root@@Base+0x20e0>
   319a0:	ldr	r2, [sp, #56]	; 0x38
   319a4:	add	r3, r3, r5
   319a8:	add	r3, r2, r3
   319ac:	b	316cc <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   319b0:	mov	r3, #2
   319b4:	b	319a0 <flatcc_json_parser_struct_as_root@@Base+0x20ec>
   319b8:	bl	30ba8 <flatcc_json_parser_struct_as_root@@Base+0x12f4>
   319bc:	ldr	r3, [pc, #-1360]	; 31474 <flatcc_json_parser_struct_as_root@@Base+0x1bc0>
   319c0:	mov	r2, #189	; 0xbd
   319c4:	ldr	r1, [pc, #-1364]	; 31478 <flatcc_json_parser_struct_as_root@@Base+0x1bc4>
   319c8:	ldr	r0, [pc, #-1364]	; 3147c <flatcc_json_parser_struct_as_root@@Base+0x1bc8>
   319cc:	add	r3, pc, r3
   319d0:	add	r3, r3, #280	; 0x118
   319d4:	add	r1, pc, r1
   319d8:	add	r0, pc, r0
   319dc:	bl	145e8 <__assert_fail@plt>
   319e0:	ldr	r3, [pc, #-1384]	; 31480 <flatcc_json_parser_struct_as_root@@Base+0x1bcc>
   319e4:	mov	r2, #138	; 0x8a
   319e8:	ldr	r1, [pc, #-1388]	; 31484 <flatcc_json_parser_struct_as_root@@Base+0x1bd0>
   319ec:	ldr	r0, [pc, #-1388]	; 31488 <flatcc_json_parser_struct_as_root@@Base+0x1bd4>
   319f0:	add	r3, pc, r3
   319f4:	add	r3, r3, #300	; 0x12c
   319f8:	add	r1, pc, r1
   319fc:	add	r0, pc, r0
   31a00:	bl	145e8 <__assert_fail@plt>
   31a04:	bl	30b70 <flatcc_json_parser_struct_as_root@@Base+0x12bc>
   31a08:	ldr	r3, [r0, #20]
   31a0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   31a10:	strd	r6, [sp, #8]
   31a14:	mov	r6, r0
   31a18:	strd	r8, [sp, #16]
   31a1c:	mov	r8, r2
   31a20:	mov	r9, #92	; 0x5c
   31a24:	mov	r2, #34	; 0x22
   31a28:	str	sl, [sp, #24]
   31a2c:	mov	sl, #102	; 0x66
   31a30:	add	r0, r3, #1
   31a34:	str	lr, [sp, #28]
   31a38:	str	r0, [r6, #20]
   31a3c:	strb	r2, [r3]
   31a40:	ldrb	r4, [r1]
   31a44:	mov	r5, r1
   31a48:	cmp	r4, #34	; 0x22
   31a4c:	cmpne	r4, #31
   31a50:	movhi	r7, #1
   31a54:	movls	r7, #0
   31a58:	bls	31a88 <flatcc_json_parser_struct_as_root@@Base+0x21d4>
   31a5c:	cmp	r4, #92	; 0x5c
   31a60:	bne	31a70 <flatcc_json_parser_struct_as_root@@Base+0x21bc>
   31a64:	b	31c50 <flatcc_json_parser_struct_as_root@@Base+0x239c>
   31a68:	cmp	r4, #92	; 0x5c
   31a6c:	beq	31a80 <flatcc_json_parser_struct_as_root@@Base+0x21cc>
   31a70:	ldrb	r4, [r5, #1]!
   31a74:	cmp	r4, #34	; 0x22
   31a78:	cmpne	r4, #31
   31a7c:	bhi	31a68 <flatcc_json_parser_struct_as_root@@Base+0x21b4>
   31a80:	sub	r7, r5, r1
   31a84:	sub	r8, r8, r7
   31a88:	ldr	r2, [r6, #16]
   31a8c:	ldr	r0, [r6, #20]
   31a90:	add	r3, r0, r7
   31a94:	cmp	r2, r3
   31a98:	mov	r2, r7
   31a9c:	bhi	31ba0 <flatcc_json_parser_struct_as_root@@Base+0x22ec>
   31aa0:	mov	r0, r6
   31aa4:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   31aa8:	ldr	r7, [r6, #20]
   31aac:	cmp	r8, #0
   31ab0:	add	r3, r7, #1
   31ab4:	beq	31bbc <flatcc_json_parser_struct_as_root@@Base+0x2308>
   31ab8:	cmp	r4, #12
   31abc:	str	r3, [r6, #20]
   31ac0:	strb	r9, [r7]
   31ac4:	beq	31c0c <flatcc_json_parser_struct_as_root@@Base+0x2358>
   31ac8:	bhi	31b70 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   31acc:	cmp	r4, #9
   31ad0:	beq	31c38 <flatcc_json_parser_struct_as_root@@Base+0x2384>
   31ad4:	cmp	r4, #10
   31ad8:	beq	31c20 <flatcc_json_parser_struct_as_root@@Base+0x236c>
   31adc:	cmp	r4, #8
   31ae0:	beq	31bf4 <flatcc_json_parser_struct_as_root@@Base+0x2340>
   31ae4:	ldr	r2, [r6, #20]
   31ae8:	mov	r1, #117	; 0x75
   31aec:	mov	r0, #48	; 0x30
   31af0:	lsr	r3, r4, #4
   31af4:	and	r4, r4, #15
   31af8:	cmp	r3, #10
   31afc:	add	ip, r2, #1
   31b00:	str	ip, [r6, #20]
   31b04:	strb	r1, [r2]
   31b08:	movcc	r2, r0
   31b0c:	movcs	r2, #87	; 0x57
   31b10:	ldr	r1, [r6, #20]
   31b14:	cmp	r4, #10
   31b18:	add	r2, r2, r3
   31b1c:	movcc	r3, r0
   31b20:	movcs	r3, #87	; 0x57
   31b24:	add	r3, r3, r4
   31b28:	add	ip, r1, #1
   31b2c:	str	ip, [r6, #20]
   31b30:	strb	r0, [r1]
   31b34:	ldr	r1, [r6, #20]
   31b38:	add	ip, r1, #1
   31b3c:	str	ip, [r6, #20]
   31b40:	strb	r0, [r1]
   31b44:	ldr	r1, [r6, #20]
   31b48:	add	r0, r1, #1
   31b4c:	str	r0, [r6, #20]
   31b50:	strb	r2, [r1]
   31b54:	ldr	r2, [r6, #20]
   31b58:	add	r1, r2, #1
   31b5c:	str	r1, [r6, #20]
   31b60:	strb	r3, [r2]
   31b64:	sub	r8, r8, #1
   31b68:	add	r1, r5, #1
   31b6c:	b	31a40 <flatcc_json_parser_struct_as_root@@Base+0x218c>
   31b70:	cmp	r4, #34	; 0x22
   31b74:	beq	31be0 <flatcc_json_parser_struct_as_root@@Base+0x232c>
   31b78:	cmp	r4, #92	; 0x5c
   31b7c:	beq	31be0 <flatcc_json_parser_struct_as_root@@Base+0x232c>
   31b80:	cmp	r4, #13
   31b84:	bne	31ae4 <flatcc_json_parser_struct_as_root@@Base+0x2230>
   31b88:	ldr	r3, [r6, #20]
   31b8c:	mov	r2, #114	; 0x72
   31b90:	add	r1, r3, #1
   31b94:	str	r1, [r6, #20]
   31b98:	strb	r2, [r3]
   31b9c:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31ba0:	bl	1451c <memcpy@plt>
   31ba4:	ldr	r3, [r6, #20]
   31ba8:	cmp	r8, #0
   31bac:	add	r7, r3, r7
   31bb0:	add	r3, r7, #1
   31bb4:	str	r7, [r6, #20]
   31bb8:	bne	31ab8 <flatcc_json_parser_struct_as_root@@Base+0x2204>
   31bbc:	mov	r2, #34	; 0x22
   31bc0:	str	r3, [r6, #20]
   31bc4:	strb	r2, [r7]
   31bc8:	ldrd	r4, [sp]
   31bcc:	ldrd	r6, [sp, #8]
   31bd0:	ldrd	r8, [sp, #16]
   31bd4:	ldr	sl, [sp, #24]
   31bd8:	add	sp, sp, #28
   31bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   31be0:	ldr	r3, [r6, #20]
   31be4:	add	r2, r3, #1
   31be8:	str	r2, [r6, #20]
   31bec:	strb	r4, [r3]
   31bf0:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31bf4:	ldr	r3, [r6, #20]
   31bf8:	mov	r2, #98	; 0x62
   31bfc:	add	r1, r3, #1
   31c00:	str	r1, [r6, #20]
   31c04:	strb	r2, [r3]
   31c08:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31c0c:	ldr	r3, [r6, #20]
   31c10:	add	r2, r3, #1
   31c14:	str	r2, [r6, #20]
   31c18:	strb	sl, [r3]
   31c1c:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31c20:	ldr	r3, [r6, #20]
   31c24:	mov	r2, #110	; 0x6e
   31c28:	add	r1, r3, #1
   31c2c:	str	r1, [r6, #20]
   31c30:	strb	r2, [r3]
   31c34:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31c38:	ldr	r3, [r6, #20]
   31c3c:	mov	r2, #116	; 0x74
   31c40:	add	r1, r3, #1
   31c44:	str	r1, [r6, #20]
   31c48:	strb	r2, [r3]
   31c4c:	b	31b64 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31c50:	mov	r7, #0
   31c54:	b	31a88 <flatcc_json_parser_struct_as_root@@Base+0x21d4>
   31c58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31c5c:	mov	r5, r2
   31c60:	mov	r4, r0
   31c64:	ldr	r2, [r0, #20]
   31c68:	strd	r6, [sp, #8]
   31c6c:	mov	r6, r1
   31c70:	str	r8, [sp, #16]
   31c74:	str	lr, [sp, #20]
   31c78:	ldrb	r1, [r0, #25]
   31c7c:	cmp	r1, #0
   31c80:	bne	31d5c <flatcc_json_parser_struct_as_root@@Base+0x24a8>
   31c84:	ldr	r3, [r0, #16]
   31c88:	cmp	r3, r2
   31c8c:	bls	31d34 <flatcc_json_parser_struct_as_root@@Base+0x2480>
   31c90:	mov	r3, #34	; 0x22
   31c94:	strb	r3, [r2]
   31c98:	ldrb	r3, [r4, #26]
   31c9c:	ldr	r2, [r4, #16]
   31ca0:	ldr	r0, [r4, #20]
   31ca4:	cmp	r3, #0
   31ca8:	addeq	r0, r0, #1
   31cac:	add	r3, r0, r5
   31cb0:	cmp	r2, r3
   31cb4:	str	r0, [r4, #20]
   31cb8:	bls	31d44 <flatcc_json_parser_struct_as_root@@Base+0x2490>
   31cbc:	mov	r2, r5
   31cc0:	mov	r1, r6
   31cc4:	bl	1451c <memcpy@plt>
   31cc8:	ldr	r2, [r4, #20]
   31ccc:	add	r2, r2, r5
   31cd0:	str	r2, [r4, #20]
   31cd4:	mov	r3, #34	; 0x22
   31cd8:	mov	ip, #58	; 0x3a
   31cdc:	mov	r0, #32
   31ce0:	strb	r3, [r2]
   31ce4:	ldrb	r3, [r4, #26]
   31ce8:	ldr	r1, [r4, #20]
   31cec:	clz	r3, r3
   31cf0:	lsr	r3, r3, #5
   31cf4:	add	r2, r1, r3
   31cf8:	add	r2, r2, #1
   31cfc:	str	r2, [r4, #20]
   31d00:	strb	ip, [r1, r3]
   31d04:	ldr	r3, [r4, #20]
   31d08:	strb	r0, [r3]
   31d0c:	ldrb	r2, [r4, #25]
   31d10:	ldr	r3, [r4, #20]
   31d14:	ldrd	r6, [sp, #8]
   31d18:	ldr	r8, [sp, #16]
   31d1c:	cmp	r2, #0
   31d20:	addne	r3, r3, #1
   31d24:	str	r3, [r4, #20]
   31d28:	ldrd	r4, [sp]
   31d2c:	add	sp, sp, #20
   31d30:	pop	{pc}		; (ldr pc, [sp], #4)
   31d34:	ldr	r3, [r0, #44]	; 0x2c
   31d38:	blx	r3
   31d3c:	ldr	r2, [r4, #20]
   31d40:	b	31c90 <flatcc_json_parser_struct_as_root@@Base+0x23dc>
   31d44:	mov	r2, r5
   31d48:	mov	r1, r6
   31d4c:	mov	r0, r4
   31d50:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   31d54:	ldr	r2, [r4, #20]
   31d58:	b	31cd4 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   31d5c:	add	r1, r2, #1
   31d60:	mov	r3, #10
   31d64:	str	r1, [r0, #20]
   31d68:	strb	r3, [r2]
   31d6c:	ldrb	r7, [r0, #25]
   31d70:	ldr	r1, [r0, #16]
   31d74:	ldr	r2, [r0, #32]
   31d78:	ldr	r3, [r0, #20]
   31d7c:	mul	r7, r2, r7
   31d80:	add	r2, r3, r7
   31d84:	cmp	r1, r2
   31d88:	bcs	31d9c <flatcc_json_parser_struct_as_root@@Base+0x24e8>
   31d8c:	mov	r1, r7
   31d90:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   31d94:	ldr	r2, [r4, #20]
   31d98:	b	31c90 <flatcc_json_parser_struct_as_root@@Base+0x23dc>
   31d9c:	mov	r2, r7
   31da0:	mov	r0, r3
   31da4:	mov	r1, #32
   31da8:	bl	14594 <memset@plt>
   31dac:	ldr	r2, [r4, #20]
   31db0:	add	r2, r2, r7
   31db4:	str	r2, [r4, #20]
   31db8:	b	31c90 <flatcc_json_parser_struct_as_root@@Base+0x23dc>

00031dbc <flatcc_json_printer_error_string@@Base>:
   31dbc:	cmp	r0, #3
   31dc0:	addls	pc, pc, r0, lsl #2
   31dc4:	b	31e08 <flatcc_json_printer_error_string@@Base+0x4c>
   31dc8:	b	31dd8 <flatcc_json_printer_error_string@@Base+0x1c>
   31dcc:	b	31dfc <flatcc_json_printer_error_string@@Base+0x40>
   31dd0:	b	31df0 <flatcc_json_printer_error_string@@Base+0x34>
   31dd4:	b	31de4 <flatcc_json_printer_error_string@@Base+0x28>
   31dd8:	ldr	r0, [pc, #52]	; 31e14 <flatcc_json_printer_error_string@@Base+0x58>
   31ddc:	add	r0, pc, r0
   31de0:	bx	lr
   31de4:	ldr	r0, [pc, #44]	; 31e18 <flatcc_json_printer_error_string@@Base+0x5c>
   31de8:	add	r0, pc, r0
   31dec:	bx	lr
   31df0:	ldr	r0, [pc, #36]	; 31e1c <flatcc_json_printer_error_string@@Base+0x60>
   31df4:	add	r0, pc, r0
   31df8:	bx	lr
   31dfc:	ldr	r0, [pc, #28]	; 31e20 <flatcc_json_printer_error_string@@Base+0x64>
   31e00:	add	r0, pc, r0
   31e04:	bx	lr
   31e08:	ldr	r0, [pc, #20]	; 31e24 <flatcc_json_printer_error_string@@Base+0x68>
   31e0c:	add	r0, pc, r0
   31e10:	bx	lr
   31e14:	andeq	r0, r1, ip, asr #32
   31e18:	andeq	r0, r1, r8, ror #7
   31e1c:	andeq	r1, r1, r4, ror sl
   31e20:	andeq	r1, r1, r8, ror sl
   31e24:	andeq	r0, r1, r4, lsl r0

00031e28 <flatcc_json_printer_fmt_float@@Base>:
   31e28:	vcvt.f64.f32	d0, s0
   31e2c:	b	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>

00031e30 <flatcc_json_printer_fmt_double@@Base>:
   31e30:	b	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>

00031e34 <flatcc_json_printer_fmt_bool@@Base>:
   31e34:	cmp	r1, #0
   31e38:	mov	r2, r0
   31e3c:	bne	31e60 <flatcc_json_printer_fmt_bool@@Base+0x2c>
   31e40:	ldr	r3, [pc, #48]	; 31e78 <flatcc_json_printer_fmt_bool@@Base+0x44>
   31e44:	mov	r0, #5
   31e48:	add	r3, pc, r3
   31e4c:	ldrb	r1, [r3, #4]
   31e50:	ldr	r3, [r3]
   31e54:	str	r3, [r2]
   31e58:	strb	r1, [r2, #4]
   31e5c:	bx	lr
   31e60:	ldr	r3, [pc, #20]	; 31e7c <flatcc_json_printer_fmt_bool@@Base+0x48>
   31e64:	mov	r0, #4
   31e68:	add	r3, pc, r3
   31e6c:	ldr	r3, [r3]
   31e70:	str	r3, [r2]
   31e74:	bx	lr
   31e78:	ldrdeq	ip, [r0], -r8
   31e7c:			; <UNDEFINED> instruction: 0x0000c7b0

00031e80 <flatcc_json_printer_string@@Base>:
   31e80:	b	31a08 <flatcc_json_parser_struct_as_root@@Base+0x2154>

00031e84 <flatcc_json_printer_write@@Base>:
   31e84:	strd	r4, [sp, #-16]!
   31e88:	ldr	ip, [r0, #16]
   31e8c:	str	r6, [sp, #8]
   31e90:	str	lr, [sp, #12]
   31e94:	ldr	lr, [r0, #20]
   31e98:	add	r4, lr, r2
   31e9c:	cmp	ip, r4
   31ea0:	bhi	31eb8 <flatcc_json_printer_write@@Base+0x34>
   31ea4:	ldrd	r4, [sp]
   31ea8:	ldr	r6, [sp, #8]
   31eac:	ldr	lr, [sp, #12]
   31eb0:	add	sp, sp, #16
   31eb4:	b	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   31eb8:	mov	r4, r0
   31ebc:	mov	r0, lr
   31ec0:	mov	r5, r2
   31ec4:	bl	1451c <memcpy@plt>
   31ec8:	ldr	ip, [r4, #20]
   31ecc:	ldr	r6, [sp, #8]
   31ed0:	add	ip, ip, r5
   31ed4:	str	ip, [r4, #20]
   31ed8:	ldrd	r4, [sp]
   31edc:	add	sp, sp, #12
   31ee0:	pop	{pc}		; (ldr pc, [sp], #4)

00031ee4 <flatcc_json_printer_nl@@Base>:
   31ee4:	ldr	r2, [r0, #20]
   31ee8:	mov	r1, #10
   31eec:	add	ip, r2, #1
   31ef0:	str	ip, [r0, #20]
   31ef4:	strb	r1, [r2]
   31ef8:	ldr	r2, [r0, #16]
   31efc:	ldr	r1, [r0, #20]
   31f00:	cmp	r1, r2
   31f04:	bcc	31f14 <flatcc_json_printer_nl@@Base+0x30>
   31f08:	mov	r1, #0
   31f0c:	ldr	r3, [r0, #44]	; 0x2c
   31f10:	bx	r3
   31f14:	bx	lr

00031f18 <flatcc_json_printer_char@@Base>:
   31f18:	ldr	r3, [r0, #20]
   31f1c:	add	r2, r3, #1
   31f20:	str	r2, [r0, #20]
   31f24:	strb	r1, [r3]
   31f28:	bx	lr

00031f2c <flatcc_json_printer_indent@@Base>:
   31f2c:	strd	r4, [sp, #-16]!
   31f30:	ldr	ip, [r0, #16]
   31f34:	ldr	r2, [r0, #20]
   31f38:	ldr	r5, [r0, #32]
   31f3c:	str	r6, [sp, #8]
   31f40:	str	lr, [sp, #12]
   31f44:	ldrb	r1, [r0, #25]
   31f48:	mul	r5, r5, r1
   31f4c:	add	r1, r2, r5
   31f50:	cmp	ip, r1
   31f54:	bcs	31f70 <flatcc_json_printer_indent@@Base+0x44>
   31f58:	mov	r1, r5
   31f5c:	ldrd	r4, [sp]
   31f60:	ldr	r6, [sp, #8]
   31f64:	ldr	lr, [sp, #12]
   31f68:	add	sp, sp, #16
   31f6c:	b	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   31f70:	mov	r4, r0
   31f74:	mov	r1, #32
   31f78:	mov	r0, r2
   31f7c:	mov	r2, r5
   31f80:	bl	14594 <memset@plt>
   31f84:	ldr	r3, [r4, #20]
   31f88:	ldr	r6, [sp, #8]
   31f8c:	add	r5, r3, r5
   31f90:	str	r5, [r4, #20]
   31f94:	ldrd	r4, [sp]
   31f98:	add	sp, sp, #12
   31f9c:	pop	{pc}		; (ldr pc, [sp], #4)

00031fa0 <flatcc_json_printer_add_level@@Base>:
   31fa0:	ldr	r3, [r0, #32]
   31fa4:	add	r1, r3, r1
   31fa8:	str	r1, [r0, #32]
   31fac:	bx	lr

00031fb0 <flatcc_json_printer_get_level@@Base>:
   31fb0:	ldr	r0, [r0, #32]
   31fb4:	bx	lr

00031fb8 <flatcc_json_printer_uint8@@Base>:
   31fb8:	str	r4, [sp, #-8]!
   31fbc:	mov	r4, r0
   31fc0:	mov	r0, r1
   31fc4:	ldr	r1, [r4, #20]
   31fc8:	str	lr, [sp, #4]
   31fcc:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   31fd0:	ldr	r3, [r4, #20]
   31fd4:	add	r0, r3, r0
   31fd8:	str	r0, [r4, #20]
   31fdc:	ldr	r4, [sp]
   31fe0:	add	sp, sp, #4
   31fe4:	pop	{pc}		; (ldr pc, [sp], #4)

00031fe8 <flatcc_json_printer_uint16@@Base>:
   31fe8:	str	r4, [sp, #-8]!
   31fec:	mov	r4, r0
   31ff0:	mov	r0, r1
   31ff4:	ldr	r1, [r4, #20]
   31ff8:	str	lr, [sp, #4]
   31ffc:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   32000:	ldr	r3, [r4, #20]
   32004:	add	r0, r3, r0
   32008:	str	r0, [r4, #20]
   3200c:	ldr	r4, [sp]
   32010:	add	sp, sp, #4
   32014:	pop	{pc}		; (ldr pc, [sp], #4)

00032018 <flatcc_json_printer_uint32@@Base>:
   32018:	str	r4, [sp, #-8]!
   3201c:	mov	r4, r0
   32020:	mov	r0, r1
   32024:	ldr	r1, [r4, #20]
   32028:	str	lr, [sp, #4]
   3202c:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   32030:	ldr	r3, [r4, #20]
   32034:	add	r0, r3, r0
   32038:	str	r0, [r4, #20]
   3203c:	ldr	r4, [sp]
   32040:	add	sp, sp, #4
   32044:	pop	{pc}		; (ldr pc, [sp], #4)

00032048 <flatcc_json_printer_uint64@@Base>:
   32048:	str	r4, [sp, #-8]!
   3204c:	mov	r4, r0
   32050:	mov	r1, r3
   32054:	mov	r0, r2
   32058:	ldr	r2, [r4, #20]
   3205c:	str	lr, [sp, #4]
   32060:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   32064:	ldr	r3, [r4, #20]
   32068:	add	r0, r3, r0
   3206c:	str	r0, [r4, #20]
   32070:	ldr	r4, [sp]
   32074:	add	sp, sp, #4
   32078:	pop	{pc}		; (ldr pc, [sp], #4)

0003207c <flatcc_json_printer_int8@@Base>:
   3207c:	cmp	r1, #0
   32080:	strd	r4, [sp, #-16]!
   32084:	mov	r4, r0
   32088:	lsr	r5, r1, #31
   3208c:	uxtb	r0, r1
   32090:	ldr	r1, [r4, #20]
   32094:	str	r6, [sp, #8]
   32098:	str	lr, [sp, #12]
   3209c:	bge	320b0 <flatcc_json_printer_int8@@Base+0x34>
   320a0:	rsb	r0, r0, #0
   320a4:	mov	r3, #45	; 0x2d
   320a8:	uxtb	r0, r0
   320ac:	strb	r3, [r1], #1
   320b0:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   320b4:	ldr	r3, [r4, #20]
   320b8:	add	r0, r5, r0
   320bc:	ldr	r6, [sp, #8]
   320c0:	add	r3, r3, r0
   320c4:	str	r3, [r4, #20]
   320c8:	ldrd	r4, [sp]
   320cc:	add	sp, sp, #12
   320d0:	pop	{pc}		; (ldr pc, [sp], #4)

000320d4 <flatcc_json_printer_int16@@Base>:
   320d4:	cmp	r1, #0
   320d8:	strd	r4, [sp, #-16]!
   320dc:	mov	r4, r0
   320e0:	lsr	r5, r1, #31
   320e4:	uxth	r0, r1
   320e8:	ldr	r1, [r4, #20]
   320ec:	str	r6, [sp, #8]
   320f0:	str	lr, [sp, #12]
   320f4:	bge	32108 <flatcc_json_printer_int16@@Base+0x34>
   320f8:	rsb	r0, r0, #0
   320fc:	mov	r3, #45	; 0x2d
   32100:	uxth	r0, r0
   32104:	strb	r3, [r1], #1
   32108:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   3210c:	ldr	r3, [r4, #20]
   32110:	add	r0, r5, r0
   32114:	ldr	r6, [sp, #8]
   32118:	add	r3, r3, r0
   3211c:	str	r3, [r4, #20]
   32120:	ldrd	r4, [sp]
   32124:	add	sp, sp, #12
   32128:	pop	{pc}		; (ldr pc, [sp], #4)

0003212c <flatcc_json_printer_int32@@Base>:
   3212c:	cmp	r1, #0
   32130:	mov	r3, r1
   32134:	strd	r4, [sp, #-16]!
   32138:	lsr	r5, r1, #31
   3213c:	mov	r4, r0
   32140:	ldr	r1, [r0, #20]
   32144:	str	r6, [sp, #8]
   32148:	str	lr, [sp, #12]
   3214c:	bge	3215c <flatcc_json_printer_int32@@Base+0x30>
   32150:	mov	r2, #45	; 0x2d
   32154:	rsb	r3, r3, #0
   32158:	strb	r2, [r1], #1
   3215c:	mov	r0, r3
   32160:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   32164:	ldr	r3, [r4, #20]
   32168:	add	r0, r5, r0
   3216c:	ldr	r6, [sp, #8]
   32170:	add	r3, r3, r0
   32174:	str	r3, [r4, #20]
   32178:	ldrd	r4, [sp]
   3217c:	add	sp, sp, #12
   32180:	pop	{pc}		; (ldr pc, [sp], #4)

00032184 <flatcc_json_printer_int64@@Base>:
   32184:	cmp	r2, #0
   32188:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3218c:	mov	r5, r3
   32190:	sbcs	r3, r3, #0
   32194:	mov	r4, r2
   32198:	ldr	r2, [r0, #20]
   3219c:	strd	r6, [sp, #8]
   321a0:	mov	r6, r0
   321a4:	lsr	r7, r5, #31
   321a8:	str	r8, [sp, #16]
   321ac:	str	lr, [sp, #20]
   321b0:	bge	321c4 <flatcc_json_printer_int64@@Base+0x40>
   321b4:	rsbs	r4, r4, #0
   321b8:	mov	r3, #45	; 0x2d
   321bc:	rsc	r5, r5, #0
   321c0:	strb	r3, [r2], #1
   321c4:	mov	r0, r4
   321c8:	mov	r1, r5
   321cc:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   321d0:	ldr	r3, [r6, #20]
   321d4:	add	r0, r7, r0
   321d8:	ldrd	r4, [sp]
   321dc:	ldr	r8, [sp, #16]
   321e0:	add	r3, r3, r0
   321e4:	str	r3, [r6, #20]
   321e8:	ldrd	r6, [sp, #8]
   321ec:	add	sp, sp, #20
   321f0:	pop	{pc}		; (ldr pc, [sp], #4)

000321f4 <flatcc_json_printer_float@@Base>:
   321f4:	vcvt.f64.f32	d0, s0
   321f8:	str	r4, [sp, #-8]!
   321fc:	mov	r4, r0
   32200:	ldr	r0, [r0, #20]
   32204:	str	lr, [sp, #4]
   32208:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   3220c:	ldr	r3, [r4, #20]
   32210:	add	r0, r3, r0
   32214:	str	r0, [r4, #20]
   32218:	ldr	r4, [sp]
   3221c:	add	sp, sp, #4
   32220:	pop	{pc}		; (ldr pc, [sp], #4)

00032224 <flatcc_json_printer_double@@Base>:
   32224:	str	r4, [sp, #-8]!
   32228:	mov	r4, r0
   3222c:	ldr	r0, [r0, #20]
   32230:	str	lr, [sp, #4]
   32234:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   32238:	ldr	r3, [r4, #20]
   3223c:	add	r0, r3, r0
   32240:	str	r0, [r4, #20]
   32244:	ldr	r4, [sp]
   32248:	add	sp, sp, #4
   3224c:	pop	{pc}		; (ldr pc, [sp], #4)

00032250 <flatcc_json_printer_enum@@Base>:
   32250:	ldr	r3, [r0, #20]
   32254:	mov	ip, #34	; 0x22
   32258:	strd	r4, [sp, #-16]!
   3225c:	mov	r4, r0
   32260:	str	r6, [sp, #8]
   32264:	str	lr, [sp, #12]
   32268:	strb	ip, [r3]
   3226c:	ldrb	ip, [r0, #26]
   32270:	ldr	lr, [r0, #16]
   32274:	ldr	r3, [r0, #20]
   32278:	cmp	ip, #0
   3227c:	addeq	r3, r3, #1
   32280:	add	ip, r3, r2
   32284:	cmp	lr, ip
   32288:	str	r3, [r0, #20]
   3228c:	bls	322d4 <flatcc_json_printer_enum@@Base+0x84>
   32290:	mov	r0, r3
   32294:	mov	r5, r2
   32298:	bl	1451c <memcpy@plt>
   3229c:	ldr	r2, [r4, #20]
   322a0:	add	r2, r2, r5
   322a4:	str	r2, [r4, #20]
   322a8:	mov	r3, #34	; 0x22
   322ac:	strb	r3, [r2]
   322b0:	ldrb	r2, [r4, #26]
   322b4:	ldr	r3, [r4, #20]
   322b8:	ldr	r6, [sp, #8]
   322bc:	cmp	r2, #0
   322c0:	addeq	r3, r3, #1
   322c4:	str	r3, [r4, #20]
   322c8:	ldrd	r4, [sp]
   322cc:	add	sp, sp, #12
   322d0:	pop	{pc}		; (ldr pc, [sp], #4)
   322d4:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   322d8:	ldr	r2, [r4, #20]
   322dc:	b	322a8 <flatcc_json_printer_enum@@Base+0x58>

000322e0 <flatcc_json_printer_delimit_enum_flags@@Base>:
   322e0:	ldr	r3, [r0, #20]
   322e4:	mov	ip, #34	; 0x22
   322e8:	adds	r1, r1, #0
   322ec:	movne	r1, #1
   322f0:	ldrb	r2, [r0, #26]
   322f4:	strb	ip, [r3]
   322f8:	ldr	r3, [r0, #20]
   322fc:	cmp	r2, #0
   32300:	moveq	r1, #1
   32304:	add	r3, r3, r1
   32308:	str	r3, [r0, #20]
   3230c:	bx	lr

00032310 <flatcc_json_printer_enum_flag@@Base>:
   32310:	strd	r4, [sp, #-16]!
   32314:	mov	r5, #32
   32318:	mov	r4, r2
   3231c:	str	r6, [sp, #8]
   32320:	str	lr, [sp, #12]
   32324:	ldr	lr, [r0, #20]
   32328:	strb	r5, [lr]
   3232c:	ldr	r5, [r0, #16]
   32330:	ldr	lr, [r0, #20]
   32334:	cmp	r1, #0
   32338:	addgt	lr, lr, #1
   3233c:	add	r2, lr, r3
   32340:	cmp	r5, r2
   32344:	str	lr, [r0, #20]
   32348:	bhi	32368 <flatcc_json_printer_enum_flag@@Base+0x58>
   3234c:	mov	r1, r4
   32350:	mov	r2, r3
   32354:	ldrd	r4, [sp]
   32358:	ldr	r6, [sp, #8]
   3235c:	ldr	lr, [sp, #12]
   32360:	add	sp, sp, #16
   32364:	b	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32368:	mov	r1, r4
   3236c:	mov	r2, r3
   32370:	mov	r4, r0
   32374:	mov	r0, lr
   32378:	mov	r5, r3
   3237c:	bl	1451c <memcpy@plt>
   32380:	ldr	r3, [r4, #20]
   32384:	ldr	r6, [sp, #8]
   32388:	add	r3, r3, r5
   3238c:	str	r3, [r4, #20]
   32390:	ldrd	r4, [sp]
   32394:	add	sp, sp, #12
   32398:	pop	{pc}		; (ldr pc, [sp], #4)

0003239c <flatcc_json_printer_string_field@@Base>:
   3239c:	ldr	ip, [r1, #8]
   323a0:	add	r2, r2, #2
   323a4:	lsl	r2, r2, #1
   323a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   323ac:	strd	r6, [sp, #8]
   323b0:	strd	r8, [sp, #16]
   323b4:	str	sl, [sp, #24]
   323b8:	cmp	r2, ip
   323bc:	str	lr, [sp, #28]
   323c0:	ldr	r7, [sp, #32]
   323c4:	bge	324f0 <flatcc_json_printer_string_field@@Base+0x154>
   323c8:	ldr	ip, [r1, #4]
   323cc:	ldrh	r5, [ip, r2]
   323d0:	cmp	r5, #0
   323d4:	beq	324f0 <flatcc_json_printer_string_field@@Base+0x154>
   323d8:	ldr	r6, [r1]
   323dc:	adds	r8, r6, r5
   323e0:	beq	324f0 <flatcc_json_printer_string_field@@Base+0x154>
   323e4:	ldr	ip, [r1, #16]
   323e8:	ldr	r2, [r0, #20]
   323ec:	cmp	ip, #0
   323f0:	add	ip, ip, #1
   323f4:	str	ip, [r1, #16]
   323f8:	beq	32410 <flatcc_json_printer_string_field@@Base+0x74>
   323fc:	add	ip, r2, #1
   32400:	mov	r1, #44	; 0x2c
   32404:	str	ip, [r0, #20]
   32408:	strb	r1, [r2]
   3240c:	ldr	r2, [r0, #20]
   32410:	mov	r9, r3
   32414:	mov	r4, r0
   32418:	ldrb	r1, [r0, #25]
   3241c:	cmp	r1, #0
   32420:	bne	32530 <flatcc_json_printer_string_field@@Base+0x194>
   32424:	ldr	r3, [r0, #16]
   32428:	cmp	r3, r2
   3242c:	bls	32520 <flatcc_json_printer_string_field@@Base+0x184>
   32430:	mov	r3, #34	; 0x22
   32434:	strb	r3, [r2]
   32438:	ldrb	r3, [r4, #26]
   3243c:	ldr	r2, [r4, #16]
   32440:	ldr	r0, [r4, #20]
   32444:	cmp	r3, #0
   32448:	addeq	r0, r0, #1
   3244c:	add	r3, r0, r7
   32450:	cmp	r2, r3
   32454:	str	r0, [r4, #20]
   32458:	bls	32508 <flatcc_json_printer_string_field@@Base+0x16c>
   3245c:	mov	r2, r7
   32460:	mov	r1, r9
   32464:	bl	1451c <memcpy@plt>
   32468:	ldr	r3, [r4, #20]
   3246c:	add	r7, r3, r7
   32470:	str	r7, [r4, #20]
   32474:	mov	r3, #34	; 0x22
   32478:	mov	lr, #58	; 0x3a
   3247c:	mov	ip, #32
   32480:	mov	r0, r4
   32484:	strb	r3, [r7]
   32488:	ldrb	r3, [r4, #26]
   3248c:	ldr	r1, [r4, #20]
   32490:	clz	r3, r3
   32494:	lsr	r3, r3, #5
   32498:	add	r2, r1, r3
   3249c:	add	r2, r2, #1
   324a0:	str	r2, [r4, #20]
   324a4:	strb	lr, [r1, r3]
   324a8:	ldr	r3, [r4, #20]
   324ac:	strb	ip, [r3]
   324b0:	ldrb	r1, [r4, #25]
   324b4:	ldr	r3, [r4, #20]
   324b8:	ldr	r2, [r6, r5]
   324bc:	ldrd	r6, [sp, #8]
   324c0:	cmp	r1, #0
   324c4:	addne	r3, r3, #1
   324c8:	ldr	sl, [sp, #24]
   324cc:	add	r1, r8, r2
   324d0:	add	r1, r1, #4
   324d4:	ldr	r2, [r8, r2]
   324d8:	ldrd	r8, [sp, #16]
   324dc:	ldr	lr, [sp, #28]
   324e0:	str	r3, [r4, #20]
   324e4:	ldrd	r4, [sp]
   324e8:	add	sp, sp, #32
   324ec:	b	31a08 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   324f0:	ldrd	r4, [sp]
   324f4:	ldrd	r6, [sp, #8]
   324f8:	ldrd	r8, [sp, #16]
   324fc:	ldr	sl, [sp, #24]
   32500:	add	sp, sp, #28
   32504:	pop	{pc}		; (ldr pc, [sp], #4)
   32508:	mov	r2, r7
   3250c:	mov	r1, r9
   32510:	mov	r0, r4
   32514:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32518:	ldr	r7, [r4, #20]
   3251c:	b	32474 <flatcc_json_printer_string_field@@Base+0xd8>
   32520:	ldr	r3, [r0, #44]	; 0x2c
   32524:	blx	r3
   32528:	ldr	r2, [r4, #20]
   3252c:	b	32430 <flatcc_json_printer_string_field@@Base+0x94>
   32530:	add	r1, r2, #1
   32534:	mov	r3, #10
   32538:	str	r1, [r0, #20]
   3253c:	strb	r3, [r2]
   32540:	ldrb	r3, [r0, #25]
   32544:	ldr	r2, [r4, #32]
   32548:	ldr	r1, [r0, #16]
   3254c:	ldr	r0, [r0, #20]
   32550:	mul	sl, r2, r3
   32554:	add	r3, r0, sl
   32558:	cmp	r1, r3
   3255c:	bcs	32574 <flatcc_json_printer_string_field@@Base+0x1d8>
   32560:	mov	r1, sl
   32564:	mov	r0, r4
   32568:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3256c:	ldr	r2, [r4, #20]
   32570:	b	32430 <flatcc_json_printer_string_field@@Base+0x94>
   32574:	mov	r2, sl
   32578:	mov	r1, #32
   3257c:	bl	14594 <memset@plt>
   32580:	ldr	r2, [r4, #20]
   32584:	add	r2, r2, sl
   32588:	str	r2, [r4, #20]
   3258c:	b	32430 <flatcc_json_printer_string_field@@Base+0x94>

00032590 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32590:	ldr	ip, [r1, #8]
   32594:	add	r2, r2, #2
   32598:	lsl	r2, r2, #1
   3259c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   325a0:	strd	r6, [sp, #8]
   325a4:	strd	r8, [sp, #16]
   325a8:	strd	sl, [sp, #24]
   325ac:	cmp	r2, ip
   325b0:	str	lr, [sp, #32]
   325b4:	sub	sp, sp, #20
   325b8:	ldr	r5, [sp, #56]	; 0x38
   325bc:	bge	32820 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   325c0:	ldr	ip, [r1, #4]
   325c4:	ldrh	r8, [ip, r2]
   325c8:	cmp	r8, #0
   325cc:	beq	32820 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   325d0:	ldr	r2, [sp, #60]	; 0x3c
   325d4:	ldr	r9, [r1]
   325d8:	adds	r7, r2, #0
   325dc:	movne	r7, #1
   325e0:	adds	r6, r9, r8
   325e4:	orr	sl, r7, #128	; 0x80
   325e8:	beq	32820 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x290>
   325ec:	ldr	ip, [r1, #16]
   325f0:	ldr	r2, [r0, #20]
   325f4:	cmp	ip, #0
   325f8:	add	ip, ip, #1
   325fc:	str	ip, [r1, #16]
   32600:	beq	32618 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x88>
   32604:	add	ip, r2, #1
   32608:	mov	r1, #44	; 0x2c
   3260c:	str	ip, [r0, #20]
   32610:	strb	r1, [r2]
   32614:	ldr	r2, [r0, #20]
   32618:	mov	fp, r3
   3261c:	mov	r4, r0
   32620:	ldrb	r1, [r0, #25]
   32624:	cmp	r1, #0
   32628:	bne	3283c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2ac>
   3262c:	ldr	r3, [r0, #16]
   32630:	cmp	r3, r2
   32634:	bhi	32644 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   32638:	ldr	r3, [r0, #44]	; 0x2c
   3263c:	blx	r3
   32640:	ldr	r2, [r4, #20]
   32644:	mov	r3, #34	; 0x22
   32648:	strb	r3, [r2]
   3264c:	ldrb	r3, [r4, #26]
   32650:	ldr	r2, [r4, #16]
   32654:	ldr	r0, [r4, #20]
   32658:	cmp	r3, #0
   3265c:	addeq	r0, r0, #1
   32660:	add	r3, r0, r5
   32664:	cmp	r2, r3
   32668:	str	r0, [r4, #20]
   3266c:	bls	32880 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f0>
   32670:	mov	r2, r5
   32674:	mov	r1, fp
   32678:	bl	1451c <memcpy@plt>
   3267c:	ldr	r3, [r4, #20]
   32680:	add	r5, r3, r5
   32684:	str	r5, [r4, #20]
   32688:	mov	r1, #34	; 0x22
   3268c:	mov	fp, #58	; 0x3a
   32690:	mov	lr, #32
   32694:	movw	r2, #43691	; 0xaaab
   32698:	movt	r2, #43690	; 0xaaaa
   3269c:	strb	r1, [r5]
   326a0:	ldrb	r3, [r4, #26]
   326a4:	ldr	ip, [r4, #20]
   326a8:	clz	r3, r3
   326ac:	lsr	r3, r3, #5
   326b0:	add	r0, ip, r3
   326b4:	add	r0, r0, #1
   326b8:	str	r0, [r4, #20]
   326bc:	strb	fp, [ip, r3]
   326c0:	ldr	r3, [r4, #20]
   326c4:	strb	lr, [r3]
   326c8:	ldrb	r3, [r4, #25]
   326cc:	ldr	r0, [r9, r8]
   326d0:	ldr	ip, [r4, #20]
   326d4:	adds	r3, r3, #0
   326d8:	movne	r3, #1
   326dc:	ldr	lr, [r6, r0]
   326e0:	add	r6, r6, r0
   326e4:	add	r6, r6, #4
   326e8:	add	r0, ip, r3
   326ec:	add	r0, r0, #1
   326f0:	str	lr, [sp, #8]
   326f4:	str	r0, [r4, #20]
   326f8:	strb	r1, [ip, r3]
   326fc:	ldr	r5, [sp, #8]
   32700:	ldr	r3, [r4, #16]
   32704:	ldr	r0, [r4, #20]
   32708:	lsl	r5, r5, #2
   3270c:	umull	r2, r5, r2, r5
   32710:	lsr	r5, r5, #1
   32714:	add	r5, r5, #3
   32718:	bic	r5, r5, #3
   3271c:	add	r2, r0, r5
   32720:	cmp	r2, r3
   32724:	bcc	32744 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b4>
   32728:	mov	r0, r4
   3272c:	mov	r1, #0
   32730:	ldr	r3, [r4, #44]	; 0x2c
   32734:	blx	r3
   32738:	ldr	r3, [r4, #16]
   3273c:	ldr	r0, [r4, #20]
   32740:	add	r2, r0, r5
   32744:	cmp	r3, r2
   32748:	bcs	327f8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x268>
   3274c:	sub	r5, r3, r0
   32750:	bic	r5, r5, #3
   32754:	add	fp, r5, r5, lsl #1
   32758:	cmp	fp, #3
   3275c:	lsr	fp, fp, #2
   32760:	bls	328bc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32764:	movw	r8, #43691	; 0xaaab
   32768:	movt	r8, #43690	; 0xaaaa
   3276c:	add	r9, sp, #12
   32770:	b	3278c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1fc>
   32774:	sub	r5, r3, r0
   32778:	bic	r5, r5, #3
   3277c:	add	fp, r5, r5, lsl #1
   32780:	cmp	fp, #3
   32784:	lsr	fp, fp, #2
   32788:	bls	328bc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   3278c:	mov	r1, r6
   32790:	mov	r3, r7
   32794:	str	fp, [sp, #12]
   32798:	mov	r2, r9
   3279c:	add	r6, r6, fp
   327a0:	bl	30d1c <flatcc_json_parser_struct_as_root@@Base+0x1468>
   327a4:	ldr	ip, [sp, #8]
   327a8:	mov	r0, r4
   327ac:	mov	r1, #0
   327b0:	ldr	r2, [r4, #20]
   327b4:	ldr	r3, [r4, #44]	; 0x2c
   327b8:	sub	fp, ip, fp
   327bc:	add	r5, r2, r5
   327c0:	str	fp, [sp, #8]
   327c4:	str	r5, [r4, #20]
   327c8:	blx	r3
   327cc:	ldr	r5, [sp, #8]
   327d0:	ldr	r3, [r4, #16]
   327d4:	ldr	r0, [r4, #20]
   327d8:	lsl	r5, r5, #2
   327dc:	umull	r2, r5, r8, r5
   327e0:	lsr	r5, r5, #1
   327e4:	add	r5, r5, #3
   327e8:	bic	r5, r5, #3
   327ec:	add	r2, r0, r5
   327f0:	cmp	r3, r2
   327f4:	bcc	32774 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1e4>
   327f8:	mov	r3, sl
   327fc:	mov	r1, r6
   32800:	add	r2, sp, #8
   32804:	bl	30d1c <flatcc_json_parser_struct_as_root@@Base+0x1468>
   32808:	ldr	r2, [r4, #20]
   3280c:	mov	r1, #34	; 0x22
   32810:	add	r3, r2, r5
   32814:	add	r3, r3, #1
   32818:	str	r3, [r4, #20]
   3281c:	strb	r1, [r2, r5]
   32820:	add	sp, sp, #20
   32824:	ldrd	r4, [sp]
   32828:	ldrd	r6, [sp, #8]
   3282c:	ldrd	r8, [sp, #16]
   32830:	ldrd	sl, [sp, #24]
   32834:	add	sp, sp, #32
   32838:	pop	{pc}		; (ldr pc, [sp], #4)
   3283c:	add	r1, r2, #1
   32840:	mov	r3, #10
   32844:	str	r1, [r0, #20]
   32848:	strb	r3, [r2]
   3284c:	ldrb	r3, [r0, #25]
   32850:	ldr	r2, [r4, #32]
   32854:	ldr	r1, [r0, #16]
   32858:	ldr	r0, [r0, #20]
   3285c:	mul	r3, r2, r3
   32860:	add	r2, r0, r3
   32864:	cmp	r1, r2
   32868:	bcs	32898 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x308>
   3286c:	mov	r1, r3
   32870:	mov	r0, r4
   32874:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   32878:	ldr	r2, [r4, #20]
   3287c:	b	32644 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   32880:	mov	r2, r5
   32884:	mov	r1, fp
   32888:	mov	r0, r4
   3288c:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32890:	ldr	r5, [r4, #20]
   32894:	b	32688 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xf8>
   32898:	mov	r2, r3
   3289c:	mov	r1, #32
   328a0:	str	r3, [sp, #4]
   328a4:	bl	14594 <memset@plt>
   328a8:	ldr	r3, [sp, #4]
   328ac:	ldr	r2, [r4, #20]
   328b0:	add	r2, r2, r3
   328b4:	str	r2, [r4, #20]
   328b8:	b	32644 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb4>
   328bc:	ldr	r3, [pc, #32]	; 328e4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x354>
   328c0:	movw	r2, #277	; 0x115
   328c4:	ldr	r1, [pc, #28]	; 328e8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x358>
   328c8:	ldr	r0, [pc, #28]	; 328ec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x35c>
   328cc:	add	r3, pc, r3
   328d0:	add	r3, r3, #1744	; 0x6d0
   328d4:	add	r1, pc, r1
   328d8:	add	r3, r3, #4
   328dc:	add	r0, pc, r0
   328e0:	bl	145e8 <__assert_fail@plt>
   328e4:	andeq	r0, r1, r4, ror #12
   328e8:			; <UNDEFINED> instruction: 0x00010db8
   328ec:	andeq	r0, r1, r8, lsr #31

000328f0 <flatcc_json_printer_uint8_field@@Base>:
   328f0:	ldr	ip, [r1, #8]
   328f4:	add	r2, r2, #2
   328f8:	lsl	r2, r2, #1
   328fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32900:	strd	r6, [sp, #8]
   32904:	str	r8, [sp, #16]
   32908:	str	lr, [sp, #20]
   3290c:	cmp	r2, ip
   32910:	ldrb	lr, [sp, #28]
   32914:	ldr	r5, [sp, #24]
   32918:	bge	32a58 <flatcc_json_printer_uint8_field@@Base+0x168>
   3291c:	ldr	ip, [r1, #4]
   32920:	ldrh	r2, [ip, r2]
   32924:	cmp	r2, #0
   32928:	beq	32a58 <flatcc_json_printer_uint8_field@@Base+0x168>
   3292c:	ldr	ip, [r1]
   32930:	cmn	ip, r2
   32934:	beq	32a58 <flatcc_json_printer_uint8_field@@Base+0x168>
   32938:	ldrb	r6, [ip, r2]
   3293c:	cmp	lr, r6
   32940:	beq	32ae4 <flatcc_json_printer_uint8_field@@Base+0x1f4>
   32944:	ldr	ip, [r1, #16]
   32948:	ldr	r2, [r0, #20]
   3294c:	cmp	ip, #0
   32950:	add	ip, ip, #1
   32954:	str	ip, [r1, #16]
   32958:	beq	32970 <flatcc_json_printer_uint8_field@@Base+0x80>
   3295c:	add	ip, r2, #1
   32960:	mov	r1, #44	; 0x2c
   32964:	str	ip, [r0, #20]
   32968:	strb	r1, [r2]
   3296c:	ldr	r2, [r0, #20]
   32970:	mov	r7, r3
   32974:	mov	r4, r0
   32978:	ldrb	r1, [r0, #25]
   3297c:	cmp	r1, #0
   32980:	bne	32a84 <flatcc_json_printer_uint8_field@@Base+0x194>
   32984:	ldr	r3, [r0, #16]
   32988:	cmp	r3, r2
   3298c:	bhi	3299c <flatcc_json_printer_uint8_field@@Base+0xac>
   32990:	ldr	r3, [r0, #44]	; 0x2c
   32994:	blx	r3
   32998:	ldr	r2, [r4, #20]
   3299c:	mov	r3, #34	; 0x22
   329a0:	strb	r3, [r2]
   329a4:	ldrb	r3, [r4, #26]
   329a8:	ldr	r2, [r4, #16]
   329ac:	ldr	r0, [r4, #20]
   329b0:	cmp	r3, #0
   329b4:	addeq	r0, r0, #1
   329b8:	add	r3, r0, r5
   329bc:	cmp	r2, r3
   329c0:	str	r0, [r4, #20]
   329c4:	bls	32a6c <flatcc_json_printer_uint8_field@@Base+0x17c>
   329c8:	mov	r2, r5
   329cc:	mov	r1, r7
   329d0:	bl	1451c <memcpy@plt>
   329d4:	ldr	r3, [r4, #20]
   329d8:	add	r5, r3, r5
   329dc:	str	r5, [r4, #20]
   329e0:	mov	r3, #34	; 0x22
   329e4:	mov	lr, #58	; 0x3a
   329e8:	mov	ip, #32
   329ec:	mov	r0, r6
   329f0:	strb	r3, [r5]
   329f4:	ldrb	r3, [r4, #26]
   329f8:	ldr	r1, [r4, #20]
   329fc:	clz	r3, r3
   32a00:	lsr	r3, r3, #5
   32a04:	add	r2, r1, r3
   32a08:	add	r2, r2, #1
   32a0c:	str	r2, [r4, #20]
   32a10:	strb	lr, [r1, r3]
   32a14:	ldr	r3, [r4, #20]
   32a18:	strb	ip, [r3]
   32a1c:	ldrb	r2, [r4, #25]
   32a20:	ldr	r3, [r4, #20]
   32a24:	cmp	r2, #0
   32a28:	addne	r3, r3, #1
   32a2c:	mov	r1, r3
   32a30:	str	r3, [r4, #20]
   32a34:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   32a38:	ldr	r3, [r4, #20]
   32a3c:	add	r0, r3, r0
   32a40:	str	r0, [r4, #20]
   32a44:	ldrd	r4, [sp]
   32a48:	ldrd	r6, [sp, #8]
   32a4c:	ldr	r8, [sp, #16]
   32a50:	add	sp, sp, #20
   32a54:	pop	{pc}		; (ldr pc, [sp], #4)
   32a58:	ldrb	r2, [r0, #29]
   32a5c:	cmp	r2, #0
   32a60:	beq	32a44 <flatcc_json_printer_uint8_field@@Base+0x154>
   32a64:	mov	r6, lr
   32a68:	b	32944 <flatcc_json_printer_uint8_field@@Base+0x54>
   32a6c:	mov	r2, r5
   32a70:	mov	r1, r7
   32a74:	mov	r0, r4
   32a78:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32a7c:	ldr	r5, [r4, #20]
   32a80:	b	329e0 <flatcc_json_printer_uint8_field@@Base+0xf0>
   32a84:	add	r1, r2, #1
   32a88:	mov	r3, #10
   32a8c:	str	r1, [r0, #20]
   32a90:	strb	r3, [r2]
   32a94:	ldrb	r8, [r0, #25]
   32a98:	ldr	r2, [r4, #32]
   32a9c:	ldr	r1, [r0, #16]
   32aa0:	ldr	r0, [r0, #20]
   32aa4:	mul	r8, r2, r8
   32aa8:	add	r3, r0, r8
   32aac:	cmp	r1, r3
   32ab0:	bcs	32ac8 <flatcc_json_printer_uint8_field@@Base+0x1d8>
   32ab4:	mov	r1, r8
   32ab8:	mov	r0, r4
   32abc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   32ac0:	ldr	r2, [r4, #20]
   32ac4:	b	3299c <flatcc_json_printer_uint8_field@@Base+0xac>
   32ac8:	mov	r2, r8
   32acc:	mov	r1, #32
   32ad0:	bl	14594 <memset@plt>
   32ad4:	ldr	r2, [r4, #20]
   32ad8:	add	r2, r2, r8
   32adc:	str	r2, [r4, #20]
   32ae0:	b	3299c <flatcc_json_printer_uint8_field@@Base+0xac>
   32ae4:	ldrb	r2, [r0, #28]
   32ae8:	cmp	r2, #0
   32aec:	beq	32944 <flatcc_json_printer_uint8_field@@Base+0x54>
   32af0:	b	32a44 <flatcc_json_printer_uint8_field@@Base+0x154>

00032af4 <flatcc_json_printer_uint16_field@@Base>:
   32af4:	ldr	ip, [r1, #8]
   32af8:	add	r2, r2, #2
   32afc:	lsl	r2, r2, #1
   32b00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32b04:	strd	r6, [sp, #8]
   32b08:	str	r8, [sp, #16]
   32b0c:	str	lr, [sp, #20]
   32b10:	cmp	r2, ip
   32b14:	ldrh	lr, [sp, #28]
   32b18:	ldr	r5, [sp, #24]
   32b1c:	bge	32c5c <flatcc_json_printer_uint16_field@@Base+0x168>
   32b20:	ldr	ip, [r1, #4]
   32b24:	ldrh	r2, [ip, r2]
   32b28:	cmp	r2, #0
   32b2c:	beq	32c5c <flatcc_json_printer_uint16_field@@Base+0x168>
   32b30:	ldr	ip, [r1]
   32b34:	cmn	ip, r2
   32b38:	beq	32c5c <flatcc_json_printer_uint16_field@@Base+0x168>
   32b3c:	ldrh	r6, [ip, r2]
   32b40:	cmp	lr, r6
   32b44:	beq	32ce8 <flatcc_json_printer_uint16_field@@Base+0x1f4>
   32b48:	ldr	ip, [r1, #16]
   32b4c:	ldr	r2, [r0, #20]
   32b50:	cmp	ip, #0
   32b54:	add	ip, ip, #1
   32b58:	str	ip, [r1, #16]
   32b5c:	beq	32b74 <flatcc_json_printer_uint16_field@@Base+0x80>
   32b60:	add	ip, r2, #1
   32b64:	mov	r1, #44	; 0x2c
   32b68:	str	ip, [r0, #20]
   32b6c:	strb	r1, [r2]
   32b70:	ldr	r2, [r0, #20]
   32b74:	mov	r7, r3
   32b78:	mov	r4, r0
   32b7c:	ldrb	r1, [r0, #25]
   32b80:	cmp	r1, #0
   32b84:	bne	32c88 <flatcc_json_printer_uint16_field@@Base+0x194>
   32b88:	ldr	r3, [r0, #16]
   32b8c:	cmp	r3, r2
   32b90:	bhi	32ba0 <flatcc_json_printer_uint16_field@@Base+0xac>
   32b94:	ldr	r3, [r0, #44]	; 0x2c
   32b98:	blx	r3
   32b9c:	ldr	r2, [r4, #20]
   32ba0:	mov	r3, #34	; 0x22
   32ba4:	strb	r3, [r2]
   32ba8:	ldrb	r3, [r4, #26]
   32bac:	ldr	r2, [r4, #16]
   32bb0:	ldr	r0, [r4, #20]
   32bb4:	cmp	r3, #0
   32bb8:	addeq	r0, r0, #1
   32bbc:	add	r3, r0, r5
   32bc0:	cmp	r2, r3
   32bc4:	str	r0, [r4, #20]
   32bc8:	bls	32c70 <flatcc_json_printer_uint16_field@@Base+0x17c>
   32bcc:	mov	r2, r5
   32bd0:	mov	r1, r7
   32bd4:	bl	1451c <memcpy@plt>
   32bd8:	ldr	r3, [r4, #20]
   32bdc:	add	r5, r3, r5
   32be0:	str	r5, [r4, #20]
   32be4:	mov	r3, #34	; 0x22
   32be8:	mov	lr, #58	; 0x3a
   32bec:	mov	ip, #32
   32bf0:	mov	r0, r6
   32bf4:	strb	r3, [r5]
   32bf8:	ldrb	r3, [r4, #26]
   32bfc:	ldr	r1, [r4, #20]
   32c00:	clz	r3, r3
   32c04:	lsr	r3, r3, #5
   32c08:	add	r2, r1, r3
   32c0c:	add	r2, r2, #1
   32c10:	str	r2, [r4, #20]
   32c14:	strb	lr, [r1, r3]
   32c18:	ldr	r3, [r4, #20]
   32c1c:	strb	ip, [r3]
   32c20:	ldrb	r2, [r4, #25]
   32c24:	ldr	r3, [r4, #20]
   32c28:	cmp	r2, #0
   32c2c:	addne	r3, r3, #1
   32c30:	mov	r1, r3
   32c34:	str	r3, [r4, #20]
   32c38:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   32c3c:	ldr	r3, [r4, #20]
   32c40:	add	r0, r3, r0
   32c44:	str	r0, [r4, #20]
   32c48:	ldrd	r4, [sp]
   32c4c:	ldrd	r6, [sp, #8]
   32c50:	ldr	r8, [sp, #16]
   32c54:	add	sp, sp, #20
   32c58:	pop	{pc}		; (ldr pc, [sp], #4)
   32c5c:	ldrb	r2, [r0, #29]
   32c60:	cmp	r2, #0
   32c64:	beq	32c48 <flatcc_json_printer_uint16_field@@Base+0x154>
   32c68:	mov	r6, lr
   32c6c:	b	32b48 <flatcc_json_printer_uint16_field@@Base+0x54>
   32c70:	mov	r2, r5
   32c74:	mov	r1, r7
   32c78:	mov	r0, r4
   32c7c:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32c80:	ldr	r5, [r4, #20]
   32c84:	b	32be4 <flatcc_json_printer_uint16_field@@Base+0xf0>
   32c88:	add	r1, r2, #1
   32c8c:	mov	r3, #10
   32c90:	str	r1, [r0, #20]
   32c94:	strb	r3, [r2]
   32c98:	ldrb	r8, [r0, #25]
   32c9c:	ldr	r2, [r4, #32]
   32ca0:	ldr	r1, [r0, #16]
   32ca4:	ldr	r0, [r0, #20]
   32ca8:	mul	r8, r2, r8
   32cac:	add	r3, r0, r8
   32cb0:	cmp	r1, r3
   32cb4:	bcs	32ccc <flatcc_json_printer_uint16_field@@Base+0x1d8>
   32cb8:	mov	r1, r8
   32cbc:	mov	r0, r4
   32cc0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   32cc4:	ldr	r2, [r4, #20]
   32cc8:	b	32ba0 <flatcc_json_printer_uint16_field@@Base+0xac>
   32ccc:	mov	r2, r8
   32cd0:	mov	r1, #32
   32cd4:	bl	14594 <memset@plt>
   32cd8:	ldr	r2, [r4, #20]
   32cdc:	add	r2, r2, r8
   32ce0:	str	r2, [r4, #20]
   32ce4:	b	32ba0 <flatcc_json_printer_uint16_field@@Base+0xac>
   32ce8:	ldrb	r2, [r0, #28]
   32cec:	cmp	r2, #0
   32cf0:	beq	32b48 <flatcc_json_printer_uint16_field@@Base+0x54>
   32cf4:	b	32c48 <flatcc_json_printer_uint16_field@@Base+0x154>

00032cf8 <flatcc_json_printer_uint32_field@@Base>:
   32cf8:	ldr	ip, [r1, #8]
   32cfc:	add	r2, r2, #2
   32d00:	lsl	r2, r2, #1
   32d04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32d08:	strd	r6, [sp, #8]
   32d0c:	str	r8, [sp, #16]
   32d10:	str	lr, [sp, #20]
   32d14:	cmp	r2, ip
   32d18:	ldr	r5, [sp, #24]
   32d1c:	bge	32e60 <flatcc_json_printer_uint32_field@@Base+0x168>
   32d20:	ldr	ip, [r1, #4]
   32d24:	ldrh	r2, [ip, r2]
   32d28:	cmp	r2, #0
   32d2c:	beq	32e60 <flatcc_json_printer_uint32_field@@Base+0x168>
   32d30:	ldr	ip, [r1]
   32d34:	cmn	ip, r2
   32d38:	beq	32e60 <flatcc_json_printer_uint32_field@@Base+0x168>
   32d3c:	ldr	r6, [ip, r2]
   32d40:	ldr	r2, [sp, #28]
   32d44:	cmp	r2, r6
   32d48:	beq	32eec <flatcc_json_printer_uint32_field@@Base+0x1f4>
   32d4c:	ldr	ip, [r1, #16]
   32d50:	ldr	r2, [r0, #20]
   32d54:	cmp	ip, #0
   32d58:	add	ip, ip, #1
   32d5c:	str	ip, [r1, #16]
   32d60:	beq	32d78 <flatcc_json_printer_uint32_field@@Base+0x80>
   32d64:	add	ip, r2, #1
   32d68:	mov	r1, #44	; 0x2c
   32d6c:	str	ip, [r0, #20]
   32d70:	strb	r1, [r2]
   32d74:	ldr	r2, [r0, #20]
   32d78:	mov	r7, r3
   32d7c:	mov	r4, r0
   32d80:	ldrb	r1, [r0, #25]
   32d84:	cmp	r1, #0
   32d88:	bne	32e8c <flatcc_json_printer_uint32_field@@Base+0x194>
   32d8c:	ldr	r3, [r0, #16]
   32d90:	cmp	r3, r2
   32d94:	bhi	32da4 <flatcc_json_printer_uint32_field@@Base+0xac>
   32d98:	ldr	r3, [r0, #44]	; 0x2c
   32d9c:	blx	r3
   32da0:	ldr	r2, [r4, #20]
   32da4:	mov	r3, #34	; 0x22
   32da8:	strb	r3, [r2]
   32dac:	ldrb	r3, [r4, #26]
   32db0:	ldr	r2, [r4, #16]
   32db4:	ldr	r0, [r4, #20]
   32db8:	cmp	r3, #0
   32dbc:	addeq	r0, r0, #1
   32dc0:	add	r3, r0, r5
   32dc4:	cmp	r2, r3
   32dc8:	str	r0, [r4, #20]
   32dcc:	bls	32e74 <flatcc_json_printer_uint32_field@@Base+0x17c>
   32dd0:	mov	r2, r5
   32dd4:	mov	r1, r7
   32dd8:	bl	1451c <memcpy@plt>
   32ddc:	ldr	r3, [r4, #20]
   32de0:	add	r5, r3, r5
   32de4:	str	r5, [r4, #20]
   32de8:	mov	r3, #34	; 0x22
   32dec:	mov	lr, #58	; 0x3a
   32df0:	mov	ip, #32
   32df4:	mov	r0, r6
   32df8:	strb	r3, [r5]
   32dfc:	ldrb	r3, [r4, #26]
   32e00:	ldr	r1, [r4, #20]
   32e04:	clz	r3, r3
   32e08:	lsr	r3, r3, #5
   32e0c:	add	r2, r1, r3
   32e10:	add	r2, r2, #1
   32e14:	str	r2, [r4, #20]
   32e18:	strb	lr, [r1, r3]
   32e1c:	ldr	r3, [r4, #20]
   32e20:	strb	ip, [r3]
   32e24:	ldrb	r2, [r4, #25]
   32e28:	ldr	r3, [r4, #20]
   32e2c:	cmp	r2, #0
   32e30:	addne	r3, r3, #1
   32e34:	mov	r1, r3
   32e38:	str	r3, [r4, #20]
   32e3c:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   32e40:	ldr	r3, [r4, #20]
   32e44:	add	r0, r3, r0
   32e48:	str	r0, [r4, #20]
   32e4c:	ldrd	r4, [sp]
   32e50:	ldrd	r6, [sp, #8]
   32e54:	ldr	r8, [sp, #16]
   32e58:	add	sp, sp, #20
   32e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   32e60:	ldrb	r2, [r0, #29]
   32e64:	cmp	r2, #0
   32e68:	beq	32e4c <flatcc_json_printer_uint32_field@@Base+0x154>
   32e6c:	ldr	r6, [sp, #28]
   32e70:	b	32d4c <flatcc_json_printer_uint32_field@@Base+0x54>
   32e74:	mov	r2, r5
   32e78:	mov	r1, r7
   32e7c:	mov	r0, r4
   32e80:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   32e84:	ldr	r5, [r4, #20]
   32e88:	b	32de8 <flatcc_json_printer_uint32_field@@Base+0xf0>
   32e8c:	add	r1, r2, #1
   32e90:	mov	r3, #10
   32e94:	str	r1, [r0, #20]
   32e98:	strb	r3, [r2]
   32e9c:	ldrb	r8, [r0, #25]
   32ea0:	ldr	r2, [r4, #32]
   32ea4:	ldr	r1, [r0, #16]
   32ea8:	ldr	r0, [r0, #20]
   32eac:	mul	r8, r2, r8
   32eb0:	add	r3, r0, r8
   32eb4:	cmp	r1, r3
   32eb8:	bcs	32ed0 <flatcc_json_printer_uint32_field@@Base+0x1d8>
   32ebc:	mov	r1, r8
   32ec0:	mov	r0, r4
   32ec4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   32ec8:	ldr	r2, [r4, #20]
   32ecc:	b	32da4 <flatcc_json_printer_uint32_field@@Base+0xac>
   32ed0:	mov	r2, r8
   32ed4:	mov	r1, #32
   32ed8:	bl	14594 <memset@plt>
   32edc:	ldr	r2, [r4, #20]
   32ee0:	add	r2, r2, r8
   32ee4:	str	r2, [r4, #20]
   32ee8:	b	32da4 <flatcc_json_printer_uint32_field@@Base+0xac>
   32eec:	ldrb	r2, [r0, #28]
   32ef0:	cmp	r2, #0
   32ef4:	beq	32d4c <flatcc_json_printer_uint32_field@@Base+0x54>
   32ef8:	b	32e4c <flatcc_json_printer_uint32_field@@Base+0x154>

00032efc <flatcc_json_printer_uint64_field@@Base>:
   32efc:	ldr	ip, [r1, #8]
   32f00:	add	r2, r2, #2
   32f04:	lsl	r2, r2, #1
   32f08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   32f0c:	strd	r6, [sp, #8]
   32f10:	strd	r8, [sp, #16]
   32f14:	str	sl, [sp, #24]
   32f18:	cmp	r2, ip
   32f1c:	str	lr, [sp, #28]
   32f20:	ldr	r5, [sp, #32]
   32f24:	bge	33074 <flatcc_json_printer_uint64_field@@Base+0x178>
   32f28:	ldr	ip, [r1, #4]
   32f2c:	ldrh	r2, [ip, r2]
   32f30:	cmp	r2, #0
   32f34:	beq	33074 <flatcc_json_printer_uint64_field@@Base+0x178>
   32f38:	ldr	ip, [r1]
   32f3c:	cmn	ip, r2
   32f40:	beq	33074 <flatcc_json_printer_uint64_field@@Base+0x178>
   32f44:	ldrd	r6, [ip, r2]
   32f48:	ldrd	r8, [sp, #40]	; 0x28
   32f4c:	cmp	r9, r7
   32f50:	cmpeq	r8, r6
   32f54:	beq	33100 <flatcc_json_printer_uint64_field@@Base+0x204>
   32f58:	ldr	ip, [r1, #16]
   32f5c:	ldr	r2, [r0, #20]
   32f60:	cmp	ip, #0
   32f64:	add	ip, ip, #1
   32f68:	str	ip, [r1, #16]
   32f6c:	beq	32f84 <flatcc_json_printer_uint64_field@@Base+0x88>
   32f70:	add	ip, r2, #1
   32f74:	mov	r1, #44	; 0x2c
   32f78:	str	ip, [r0, #20]
   32f7c:	strb	r1, [r2]
   32f80:	ldr	r2, [r0, #20]
   32f84:	mov	r8, r3
   32f88:	mov	r4, r0
   32f8c:	ldrb	r1, [r0, #25]
   32f90:	cmp	r1, #0
   32f94:	bne	330a0 <flatcc_json_printer_uint64_field@@Base+0x1a4>
   32f98:	ldr	r3, [r0, #16]
   32f9c:	cmp	r3, r2
   32fa0:	bhi	32fb0 <flatcc_json_printer_uint64_field@@Base+0xb4>
   32fa4:	ldr	r3, [r0, #44]	; 0x2c
   32fa8:	blx	r3
   32fac:	ldr	r2, [r4, #20]
   32fb0:	mov	r3, #34	; 0x22
   32fb4:	strb	r3, [r2]
   32fb8:	ldrb	r3, [r4, #26]
   32fbc:	ldr	r2, [r4, #16]
   32fc0:	ldr	r0, [r4, #20]
   32fc4:	cmp	r3, #0
   32fc8:	addeq	r0, r0, #1
   32fcc:	add	r3, r0, r5
   32fd0:	cmp	r2, r3
   32fd4:	str	r0, [r4, #20]
   32fd8:	bls	33088 <flatcc_json_printer_uint64_field@@Base+0x18c>
   32fdc:	mov	r2, r5
   32fe0:	mov	r1, r8
   32fe4:	bl	1451c <memcpy@plt>
   32fe8:	ldr	r3, [r4, #20]
   32fec:	add	r5, r3, r5
   32ff0:	str	r5, [r4, #20]
   32ff4:	mov	r3, #34	; 0x22
   32ff8:	mov	r0, r6
   32ffc:	mov	r6, #58	; 0x3a
   33000:	mov	lr, #32
   33004:	strb	r3, [r5]
   33008:	mov	r1, r7
   3300c:	ldrb	r3, [r4, #26]
   33010:	ldr	ip, [r4, #20]
   33014:	clz	r3, r3
   33018:	lsr	r3, r3, #5
   3301c:	add	r2, ip, r3
   33020:	add	r2, r2, #1
   33024:	str	r2, [r4, #20]
   33028:	strb	r6, [ip, r3]
   3302c:	ldr	r3, [r4, #20]
   33030:	strb	lr, [r3]
   33034:	ldrb	r2, [r4, #25]
   33038:	ldr	r3, [r4, #20]
   3303c:	cmp	r2, #0
   33040:	addne	r3, r3, #1
   33044:	mov	r2, r3
   33048:	str	r3, [r4, #20]
   3304c:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   33050:	ldr	r3, [r4, #20]
   33054:	add	r0, r3, r0
   33058:	str	r0, [r4, #20]
   3305c:	ldrd	r4, [sp]
   33060:	ldrd	r6, [sp, #8]
   33064:	ldrd	r8, [sp, #16]
   33068:	ldr	sl, [sp, #24]
   3306c:	add	sp, sp, #28
   33070:	pop	{pc}		; (ldr pc, [sp], #4)
   33074:	ldrb	r2, [r0, #29]
   33078:	cmp	r2, #0
   3307c:	beq	3305c <flatcc_json_printer_uint64_field@@Base+0x160>
   33080:	ldrd	r6, [sp, #40]	; 0x28
   33084:	b	32f58 <flatcc_json_printer_uint64_field@@Base+0x5c>
   33088:	mov	r2, r5
   3308c:	mov	r1, r8
   33090:	mov	r0, r4
   33094:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33098:	ldr	r5, [r4, #20]
   3309c:	b	32ff4 <flatcc_json_printer_uint64_field@@Base+0xf8>
   330a0:	add	r1, r2, #1
   330a4:	mov	r3, #10
   330a8:	str	r1, [r0, #20]
   330ac:	strb	r3, [r2]
   330b0:	ldrb	r3, [r0, #25]
   330b4:	ldr	r2, [r4, #32]
   330b8:	ldr	r1, [r0, #16]
   330bc:	ldr	r0, [r0, #20]
   330c0:	mul	r9, r2, r3
   330c4:	add	r3, r0, r9
   330c8:	cmp	r1, r3
   330cc:	bcs	330e4 <flatcc_json_printer_uint64_field@@Base+0x1e8>
   330d0:	mov	r1, r9
   330d4:	mov	r0, r4
   330d8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   330dc:	ldr	r2, [r4, #20]
   330e0:	b	32fb0 <flatcc_json_printer_uint64_field@@Base+0xb4>
   330e4:	mov	r2, r9
   330e8:	mov	r1, #32
   330ec:	bl	14594 <memset@plt>
   330f0:	ldr	r2, [r4, #20]
   330f4:	add	r2, r2, r9
   330f8:	str	r2, [r4, #20]
   330fc:	b	32fb0 <flatcc_json_printer_uint64_field@@Base+0xb4>
   33100:	ldrb	r2, [r0, #28]
   33104:	cmp	r2, #0
   33108:	beq	32f58 <flatcc_json_printer_uint64_field@@Base+0x5c>
   3310c:	b	3305c <flatcc_json_printer_uint64_field@@Base+0x160>

00033110 <flatcc_json_printer_int8_field@@Base>:
   33110:	ldr	ip, [r1, #8]
   33114:	add	r2, r2, #2
   33118:	lsl	r2, r2, #1
   3311c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33120:	strd	r6, [sp, #8]
   33124:	str	r8, [sp, #16]
   33128:	str	lr, [sp, #20]
   3312c:	cmp	r2, ip
   33130:	ldrsb	lr, [sp, #28]
   33134:	ldr	r6, [sp, #24]
   33138:	bge	3329c <flatcc_json_printer_int8_field@@Base+0x18c>
   3313c:	ldr	ip, [r1, #4]
   33140:	ldrh	r2, [ip, r2]
   33144:	cmp	r2, #0
   33148:	beq	3329c <flatcc_json_printer_int8_field@@Base+0x18c>
   3314c:	ldr	ip, [r1]
   33150:	cmn	ip, r2
   33154:	beq	3329c <flatcc_json_printer_int8_field@@Base+0x18c>
   33158:	ldrsb	r5, [ip, r2]
   3315c:	cmp	lr, r5
   33160:	beq	33328 <flatcc_json_printer_int8_field@@Base+0x218>
   33164:	ldr	ip, [r1, #16]
   33168:	ldr	r2, [r0, #20]
   3316c:	cmp	ip, #0
   33170:	add	ip, ip, #1
   33174:	str	ip, [r1, #16]
   33178:	beq	33190 <flatcc_json_printer_int8_field@@Base+0x80>
   3317c:	add	ip, r2, #1
   33180:	mov	r1, #44	; 0x2c
   33184:	str	ip, [r0, #20]
   33188:	strb	r1, [r2]
   3318c:	ldr	r2, [r0, #20]
   33190:	mov	r7, r3
   33194:	mov	r4, r0
   33198:	ldrb	r1, [r0, #25]
   3319c:	cmp	r1, #0
   331a0:	bne	332c8 <flatcc_json_printer_int8_field@@Base+0x1b8>
   331a4:	ldr	r3, [r0, #16]
   331a8:	cmp	r3, r2
   331ac:	bhi	331bc <flatcc_json_printer_int8_field@@Base+0xac>
   331b0:	ldr	r3, [r0, #44]	; 0x2c
   331b4:	blx	r3
   331b8:	ldr	r2, [r4, #20]
   331bc:	mov	r3, #34	; 0x22
   331c0:	strb	r3, [r2]
   331c4:	ldrb	r3, [r4, #26]
   331c8:	ldr	r2, [r4, #16]
   331cc:	ldr	r0, [r4, #20]
   331d0:	cmp	r3, #0
   331d4:	addeq	r0, r0, #1
   331d8:	add	r3, r0, r6
   331dc:	cmp	r2, r3
   331e0:	str	r0, [r4, #20]
   331e4:	bls	332b0 <flatcc_json_printer_int8_field@@Base+0x1a0>
   331e8:	mov	r2, r6
   331ec:	mov	r1, r7
   331f0:	bl	1451c <memcpy@plt>
   331f4:	ldr	r3, [r4, #20]
   331f8:	add	r6, r3, r6
   331fc:	str	r6, [r4, #20]
   33200:	mov	r3, #34	; 0x22
   33204:	mov	lr, #58	; 0x3a
   33208:	lsr	r7, r5, #31
   3320c:	mov	ip, #32
   33210:	uxtb	r0, r5
   33214:	strb	r3, [r6]
   33218:	ldrb	r3, [r4, #26]
   3321c:	ldr	r1, [r4, #20]
   33220:	clz	r3, r3
   33224:	lsr	r3, r3, #5
   33228:	add	r2, r1, r3
   3322c:	add	r2, r2, #1
   33230:	str	r2, [r4, #20]
   33234:	strb	lr, [r1, r3]
   33238:	ldr	r3, [r4, #20]
   3323c:	strb	ip, [r3]
   33240:	ldrb	r3, [r4, #25]
   33244:	ldr	r2, [r4, #20]
   33248:	adds	r3, r3, #0
   3324c:	movne	r3, #1
   33250:	cmp	r5, #0
   33254:	add	r1, r2, r3
   33258:	str	r1, [r4, #20]
   3325c:	bge	33274 <flatcc_json_printer_int8_field@@Base+0x164>
   33260:	rsb	r0, r0, #0
   33264:	mov	ip, #45	; 0x2d
   33268:	add	r1, r1, #1
   3326c:	uxtb	r0, r0
   33270:	strb	ip, [r2, r3]
   33274:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   33278:	ldr	r3, [r4, #20]
   3327c:	add	r0, r7, r0
   33280:	add	r3, r3, r0
   33284:	str	r3, [r4, #20]
   33288:	ldrd	r4, [sp]
   3328c:	ldrd	r6, [sp, #8]
   33290:	ldr	r8, [sp, #16]
   33294:	add	sp, sp, #20
   33298:	pop	{pc}		; (ldr pc, [sp], #4)
   3329c:	ldrb	r2, [r0, #29]
   332a0:	cmp	r2, #0
   332a4:	beq	33288 <flatcc_json_printer_int8_field@@Base+0x178>
   332a8:	mov	r5, lr
   332ac:	b	33164 <flatcc_json_printer_int8_field@@Base+0x54>
   332b0:	mov	r2, r6
   332b4:	mov	r1, r7
   332b8:	mov	r0, r4
   332bc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   332c0:	ldr	r6, [r4, #20]
   332c4:	b	33200 <flatcc_json_printer_int8_field@@Base+0xf0>
   332c8:	add	r1, r2, #1
   332cc:	mov	r3, #10
   332d0:	str	r1, [r0, #20]
   332d4:	strb	r3, [r2]
   332d8:	ldrb	r8, [r0, #25]
   332dc:	ldr	r2, [r4, #32]
   332e0:	ldr	r1, [r0, #16]
   332e4:	ldr	r0, [r0, #20]
   332e8:	mul	r8, r2, r8
   332ec:	add	r3, r0, r8
   332f0:	cmp	r1, r3
   332f4:	bcs	3330c <flatcc_json_printer_int8_field@@Base+0x1fc>
   332f8:	mov	r1, r8
   332fc:	mov	r0, r4
   33300:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33304:	ldr	r2, [r4, #20]
   33308:	b	331bc <flatcc_json_printer_int8_field@@Base+0xac>
   3330c:	mov	r2, r8
   33310:	mov	r1, #32
   33314:	bl	14594 <memset@plt>
   33318:	ldr	r2, [r4, #20]
   3331c:	add	r2, r2, r8
   33320:	str	r2, [r4, #20]
   33324:	b	331bc <flatcc_json_printer_int8_field@@Base+0xac>
   33328:	ldrb	r2, [r0, #28]
   3332c:	cmp	r2, #0
   33330:	beq	33164 <flatcc_json_printer_int8_field@@Base+0x54>
   33334:	b	33288 <flatcc_json_printer_int8_field@@Base+0x178>

00033338 <flatcc_json_printer_int16_field@@Base>:
   33338:	ldr	ip, [r1, #8]
   3333c:	add	r2, r2, #2
   33340:	lsl	r2, r2, #1
   33344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33348:	strd	r6, [sp, #8]
   3334c:	str	r8, [sp, #16]
   33350:	str	lr, [sp, #20]
   33354:	cmp	r2, ip
   33358:	ldrsh	lr, [sp, #28]
   3335c:	ldr	r6, [sp, #24]
   33360:	bge	334c4 <flatcc_json_printer_int16_field@@Base+0x18c>
   33364:	ldr	ip, [r1, #4]
   33368:	ldrh	r2, [ip, r2]
   3336c:	cmp	r2, #0
   33370:	beq	334c4 <flatcc_json_printer_int16_field@@Base+0x18c>
   33374:	ldr	ip, [r1]
   33378:	cmn	ip, r2
   3337c:	beq	334c4 <flatcc_json_printer_int16_field@@Base+0x18c>
   33380:	ldrsh	r5, [ip, r2]
   33384:	cmp	lr, r5
   33388:	beq	33550 <flatcc_json_printer_int16_field@@Base+0x218>
   3338c:	ldr	ip, [r1, #16]
   33390:	ldr	r2, [r0, #20]
   33394:	cmp	ip, #0
   33398:	add	ip, ip, #1
   3339c:	str	ip, [r1, #16]
   333a0:	beq	333b8 <flatcc_json_printer_int16_field@@Base+0x80>
   333a4:	add	ip, r2, #1
   333a8:	mov	r1, #44	; 0x2c
   333ac:	str	ip, [r0, #20]
   333b0:	strb	r1, [r2]
   333b4:	ldr	r2, [r0, #20]
   333b8:	mov	r7, r3
   333bc:	mov	r4, r0
   333c0:	ldrb	r1, [r0, #25]
   333c4:	cmp	r1, #0
   333c8:	bne	334f0 <flatcc_json_printer_int16_field@@Base+0x1b8>
   333cc:	ldr	r3, [r0, #16]
   333d0:	cmp	r3, r2
   333d4:	bhi	333e4 <flatcc_json_printer_int16_field@@Base+0xac>
   333d8:	ldr	r3, [r0, #44]	; 0x2c
   333dc:	blx	r3
   333e0:	ldr	r2, [r4, #20]
   333e4:	mov	r3, #34	; 0x22
   333e8:	strb	r3, [r2]
   333ec:	ldrb	r3, [r4, #26]
   333f0:	ldr	r2, [r4, #16]
   333f4:	ldr	r0, [r4, #20]
   333f8:	cmp	r3, #0
   333fc:	addeq	r0, r0, #1
   33400:	add	r3, r0, r6
   33404:	cmp	r2, r3
   33408:	str	r0, [r4, #20]
   3340c:	bls	334d8 <flatcc_json_printer_int16_field@@Base+0x1a0>
   33410:	mov	r2, r6
   33414:	mov	r1, r7
   33418:	bl	1451c <memcpy@plt>
   3341c:	ldr	r3, [r4, #20]
   33420:	add	r6, r3, r6
   33424:	str	r6, [r4, #20]
   33428:	mov	r3, #34	; 0x22
   3342c:	mov	lr, #58	; 0x3a
   33430:	lsr	r7, r5, #31
   33434:	mov	ip, #32
   33438:	uxth	r0, r5
   3343c:	strb	r3, [r6]
   33440:	ldrb	r3, [r4, #26]
   33444:	ldr	r1, [r4, #20]
   33448:	clz	r3, r3
   3344c:	lsr	r3, r3, #5
   33450:	add	r2, r1, r3
   33454:	add	r2, r2, #1
   33458:	str	r2, [r4, #20]
   3345c:	strb	lr, [r1, r3]
   33460:	ldr	r3, [r4, #20]
   33464:	strb	ip, [r3]
   33468:	ldrb	r3, [r4, #25]
   3346c:	ldr	r2, [r4, #20]
   33470:	adds	r3, r3, #0
   33474:	movne	r3, #1
   33478:	cmp	r5, #0
   3347c:	add	r1, r2, r3
   33480:	str	r1, [r4, #20]
   33484:	bge	3349c <flatcc_json_printer_int16_field@@Base+0x164>
   33488:	rsb	r0, r0, #0
   3348c:	mov	ip, #45	; 0x2d
   33490:	add	r1, r1, #1
   33494:	uxth	r0, r0
   33498:	strb	ip, [r2, r3]
   3349c:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   334a0:	ldr	r3, [r4, #20]
   334a4:	add	r0, r7, r0
   334a8:	add	r3, r3, r0
   334ac:	str	r3, [r4, #20]
   334b0:	ldrd	r4, [sp]
   334b4:	ldrd	r6, [sp, #8]
   334b8:	ldr	r8, [sp, #16]
   334bc:	add	sp, sp, #20
   334c0:	pop	{pc}		; (ldr pc, [sp], #4)
   334c4:	ldrb	r2, [r0, #29]
   334c8:	cmp	r2, #0
   334cc:	beq	334b0 <flatcc_json_printer_int16_field@@Base+0x178>
   334d0:	mov	r5, lr
   334d4:	b	3338c <flatcc_json_printer_int16_field@@Base+0x54>
   334d8:	mov	r2, r6
   334dc:	mov	r1, r7
   334e0:	mov	r0, r4
   334e4:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   334e8:	ldr	r6, [r4, #20]
   334ec:	b	33428 <flatcc_json_printer_int16_field@@Base+0xf0>
   334f0:	add	r1, r2, #1
   334f4:	mov	r3, #10
   334f8:	str	r1, [r0, #20]
   334fc:	strb	r3, [r2]
   33500:	ldrb	r8, [r0, #25]
   33504:	ldr	r2, [r4, #32]
   33508:	ldr	r1, [r0, #16]
   3350c:	ldr	r0, [r0, #20]
   33510:	mul	r8, r2, r8
   33514:	add	r3, r0, r8
   33518:	cmp	r1, r3
   3351c:	bcs	33534 <flatcc_json_printer_int16_field@@Base+0x1fc>
   33520:	mov	r1, r8
   33524:	mov	r0, r4
   33528:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3352c:	ldr	r2, [r4, #20]
   33530:	b	333e4 <flatcc_json_printer_int16_field@@Base+0xac>
   33534:	mov	r2, r8
   33538:	mov	r1, #32
   3353c:	bl	14594 <memset@plt>
   33540:	ldr	r2, [r4, #20]
   33544:	add	r2, r2, r8
   33548:	str	r2, [r4, #20]
   3354c:	b	333e4 <flatcc_json_printer_int16_field@@Base+0xac>
   33550:	ldrb	r2, [r0, #28]
   33554:	cmp	r2, #0
   33558:	beq	3338c <flatcc_json_printer_int16_field@@Base+0x54>
   3355c:	b	334b0 <flatcc_json_printer_int16_field@@Base+0x178>

00033560 <flatcc_json_printer_int32_field@@Base>:
   33560:	ldr	ip, [r1, #8]
   33564:	add	r2, r2, #2
   33568:	lsl	r2, r2, #1
   3356c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33570:	strd	r6, [sp, #8]
   33574:	str	r8, [sp, #16]
   33578:	str	lr, [sp, #20]
   3357c:	cmp	r2, ip
   33580:	ldr	r6, [sp, #24]
   33584:	bge	336e8 <flatcc_json_printer_int32_field@@Base+0x188>
   33588:	ldr	ip, [r1, #4]
   3358c:	ldrh	r2, [ip, r2]
   33590:	cmp	r2, #0
   33594:	beq	336e8 <flatcc_json_printer_int32_field@@Base+0x188>
   33598:	ldr	ip, [r1]
   3359c:	cmn	ip, r2
   335a0:	beq	336e8 <flatcc_json_printer_int32_field@@Base+0x188>
   335a4:	ldr	r5, [ip, r2]
   335a8:	ldr	r2, [sp, #28]
   335ac:	cmp	r2, r5
   335b0:	beq	33774 <flatcc_json_printer_int32_field@@Base+0x214>
   335b4:	ldr	ip, [r1, #16]
   335b8:	ldr	r2, [r0, #20]
   335bc:	cmp	ip, #0
   335c0:	add	ip, ip, #1
   335c4:	str	ip, [r1, #16]
   335c8:	beq	335e0 <flatcc_json_printer_int32_field@@Base+0x80>
   335cc:	add	ip, r2, #1
   335d0:	mov	r1, #44	; 0x2c
   335d4:	str	ip, [r0, #20]
   335d8:	strb	r1, [r2]
   335dc:	ldr	r2, [r0, #20]
   335e0:	mov	r7, r3
   335e4:	mov	r4, r0
   335e8:	ldrb	r1, [r0, #25]
   335ec:	cmp	r1, #0
   335f0:	bne	33714 <flatcc_json_printer_int32_field@@Base+0x1b4>
   335f4:	ldr	r3, [r0, #16]
   335f8:	cmp	r3, r2
   335fc:	bhi	3360c <flatcc_json_printer_int32_field@@Base+0xac>
   33600:	ldr	r3, [r0, #44]	; 0x2c
   33604:	blx	r3
   33608:	ldr	r2, [r4, #20]
   3360c:	mov	r3, #34	; 0x22
   33610:	strb	r3, [r2]
   33614:	ldrb	r3, [r4, #26]
   33618:	ldr	r2, [r4, #16]
   3361c:	ldr	r0, [r4, #20]
   33620:	cmp	r3, #0
   33624:	addeq	r0, r0, #1
   33628:	add	r3, r0, r6
   3362c:	cmp	r2, r3
   33630:	str	r0, [r4, #20]
   33634:	bls	336fc <flatcc_json_printer_int32_field@@Base+0x19c>
   33638:	mov	r2, r6
   3363c:	mov	r1, r7
   33640:	bl	1451c <memcpy@plt>
   33644:	ldr	r3, [r4, #20]
   33648:	add	r6, r3, r6
   3364c:	str	r6, [r4, #20]
   33650:	mov	r3, #34	; 0x22
   33654:	mov	ip, #58	; 0x3a
   33658:	lsr	r7, r5, #31
   3365c:	mov	r0, #32
   33660:	strb	r3, [r6]
   33664:	ldrb	r3, [r4, #26]
   33668:	ldr	r1, [r4, #20]
   3366c:	clz	r3, r3
   33670:	lsr	r3, r3, #5
   33674:	add	r2, r1, r3
   33678:	add	r2, r2, #1
   3367c:	str	r2, [r4, #20]
   33680:	strb	ip, [r1, r3]
   33684:	ldr	r3, [r4, #20]
   33688:	strb	r0, [r3]
   3368c:	ldrb	r3, [r4, #25]
   33690:	ldr	r2, [r4, #20]
   33694:	adds	r3, r3, #0
   33698:	movne	r3, #1
   3369c:	cmp	r5, #0
   336a0:	add	r1, r2, r3
   336a4:	str	r1, [r4, #20]
   336a8:	bge	336bc <flatcc_json_printer_int32_field@@Base+0x15c>
   336ac:	mov	r0, #45	; 0x2d
   336b0:	rsb	r5, r5, #0
   336b4:	add	r1, r1, #1
   336b8:	strb	r0, [r2, r3]
   336bc:	mov	r0, r5
   336c0:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   336c4:	ldr	r3, [r4, #20]
   336c8:	add	r0, r7, r0
   336cc:	add	r3, r3, r0
   336d0:	str	r3, [r4, #20]
   336d4:	ldrd	r4, [sp]
   336d8:	ldrd	r6, [sp, #8]
   336dc:	ldr	r8, [sp, #16]
   336e0:	add	sp, sp, #20
   336e4:	pop	{pc}		; (ldr pc, [sp], #4)
   336e8:	ldrb	r2, [r0, #29]
   336ec:	cmp	r2, #0
   336f0:	beq	336d4 <flatcc_json_printer_int32_field@@Base+0x174>
   336f4:	ldr	r5, [sp, #28]
   336f8:	b	335b4 <flatcc_json_printer_int32_field@@Base+0x54>
   336fc:	mov	r2, r6
   33700:	mov	r1, r7
   33704:	mov	r0, r4
   33708:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3370c:	ldr	r6, [r4, #20]
   33710:	b	33650 <flatcc_json_printer_int32_field@@Base+0xf0>
   33714:	add	r1, r2, #1
   33718:	mov	r3, #10
   3371c:	str	r1, [r0, #20]
   33720:	strb	r3, [r2]
   33724:	ldrb	r8, [r0, #25]
   33728:	ldr	r2, [r4, #32]
   3372c:	ldr	r1, [r0, #16]
   33730:	ldr	r0, [r0, #20]
   33734:	mul	r8, r2, r8
   33738:	add	r3, r0, r8
   3373c:	cmp	r1, r3
   33740:	bcs	33758 <flatcc_json_printer_int32_field@@Base+0x1f8>
   33744:	mov	r1, r8
   33748:	mov	r0, r4
   3374c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33750:	ldr	r2, [r4, #20]
   33754:	b	3360c <flatcc_json_printer_int32_field@@Base+0xac>
   33758:	mov	r2, r8
   3375c:	mov	r1, #32
   33760:	bl	14594 <memset@plt>
   33764:	ldr	r2, [r4, #20]
   33768:	add	r2, r2, r8
   3376c:	str	r2, [r4, #20]
   33770:	b	3360c <flatcc_json_printer_int32_field@@Base+0xac>
   33774:	ldrb	r2, [r0, #28]
   33778:	cmp	r2, #0
   3377c:	beq	335b4 <flatcc_json_printer_int32_field@@Base+0x54>
   33780:	b	336d4 <flatcc_json_printer_int32_field@@Base+0x174>

00033784 <flatcc_json_printer_int64_field@@Base>:
   33784:	ldr	ip, [r1, #8]
   33788:	add	r2, r2, #2
   3378c:	lsl	r2, r2, #1
   33790:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33794:	strd	r6, [sp, #8]
   33798:	strd	r8, [sp, #16]
   3379c:	str	sl, [sp, #24]
   337a0:	cmp	r2, ip
   337a4:	str	lr, [sp, #28]
   337a8:	ldr	r5, [sp, #32]
   337ac:	bge	33924 <flatcc_json_printer_int64_field@@Base+0x1a0>
   337b0:	ldr	ip, [r1, #4]
   337b4:	ldrh	r2, [ip, r2]
   337b8:	cmp	r2, #0
   337bc:	beq	33924 <flatcc_json_printer_int64_field@@Base+0x1a0>
   337c0:	ldr	ip, [r1]
   337c4:	cmn	ip, r2
   337c8:	beq	33924 <flatcc_json_printer_int64_field@@Base+0x1a0>
   337cc:	ldrd	r6, [ip, r2]
   337d0:	ldrd	r8, [sp, #40]	; 0x28
   337d4:	cmp	r9, r7
   337d8:	cmpeq	r8, r6
   337dc:	beq	339b0 <flatcc_json_printer_int64_field@@Base+0x22c>
   337e0:	ldr	ip, [r1, #16]
   337e4:	ldr	r2, [r0, #20]
   337e8:	cmp	ip, #0
   337ec:	add	ip, ip, #1
   337f0:	str	ip, [r1, #16]
   337f4:	beq	3380c <flatcc_json_printer_int64_field@@Base+0x88>
   337f8:	add	ip, r2, #1
   337fc:	mov	r1, #44	; 0x2c
   33800:	str	ip, [r0, #20]
   33804:	strb	r1, [r2]
   33808:	ldr	r2, [r0, #20]
   3380c:	mov	r8, r3
   33810:	mov	r4, r0
   33814:	ldrb	r1, [r0, #25]
   33818:	cmp	r1, #0
   3381c:	bne	33950 <flatcc_json_printer_int64_field@@Base+0x1cc>
   33820:	ldr	r3, [r0, #16]
   33824:	cmp	r3, r2
   33828:	bhi	33838 <flatcc_json_printer_int64_field@@Base+0xb4>
   3382c:	ldr	r3, [r0, #44]	; 0x2c
   33830:	blx	r3
   33834:	ldr	r2, [r4, #20]
   33838:	mov	r3, #34	; 0x22
   3383c:	strb	r3, [r2]
   33840:	ldrb	r3, [r4, #26]
   33844:	ldr	r2, [r4, #16]
   33848:	ldr	r0, [r4, #20]
   3384c:	cmp	r3, #0
   33850:	addeq	r0, r0, #1
   33854:	add	r3, r0, r5
   33858:	cmp	r2, r3
   3385c:	str	r0, [r4, #20]
   33860:	bls	33938 <flatcc_json_printer_int64_field@@Base+0x1b4>
   33864:	mov	r2, r5
   33868:	mov	r1, r8
   3386c:	bl	1451c <memcpy@plt>
   33870:	ldr	r3, [r4, #20]
   33874:	add	r5, r3, r5
   33878:	str	r5, [r4, #20]
   3387c:	mov	r3, #34	; 0x22
   33880:	mov	ip, #58	; 0x3a
   33884:	lsr	r8, r7, #31
   33888:	mov	r0, #32
   3388c:	strb	r3, [r5]
   33890:	ldrb	r3, [r4, #26]
   33894:	ldr	r1, [r4, #20]
   33898:	clz	r3, r3
   3389c:	lsr	r3, r3, #5
   338a0:	add	r2, r1, r3
   338a4:	add	r2, r2, #1
   338a8:	str	r2, [r4, #20]
   338ac:	strb	ip, [r1, r3]
   338b0:	ldr	r3, [r4, #20]
   338b4:	strb	r0, [r3]
   338b8:	ldrb	r3, [r4, #25]
   338bc:	ldr	r1, [r4, #20]
   338c0:	adds	r3, r3, #0
   338c4:	movne	r3, #1
   338c8:	cmp	r6, #0
   338cc:	sbcs	r2, r7, #0
   338d0:	add	r2, r1, r3
   338d4:	str	r2, [r4, #20]
   338d8:	bge	338f0 <flatcc_json_printer_int64_field@@Base+0x16c>
   338dc:	rsbs	r6, r6, #0
   338e0:	mov	r0, #45	; 0x2d
   338e4:	rsc	r7, r7, #0
   338e8:	add	r2, r2, #1
   338ec:	strb	r0, [r1, r3]
   338f0:	mov	r0, r6
   338f4:	mov	r1, r7
   338f8:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   338fc:	ldr	r3, [r4, #20]
   33900:	add	r0, r8, r0
   33904:	add	r3, r3, r0
   33908:	str	r3, [r4, #20]
   3390c:	ldrd	r4, [sp]
   33910:	ldrd	r6, [sp, #8]
   33914:	ldrd	r8, [sp, #16]
   33918:	ldr	sl, [sp, #24]
   3391c:	add	sp, sp, #28
   33920:	pop	{pc}		; (ldr pc, [sp], #4)
   33924:	ldrb	r2, [r0, #29]
   33928:	cmp	r2, #0
   3392c:	beq	3390c <flatcc_json_printer_int64_field@@Base+0x188>
   33930:	ldrd	r6, [sp, #40]	; 0x28
   33934:	b	337e0 <flatcc_json_printer_int64_field@@Base+0x5c>
   33938:	mov	r2, r5
   3393c:	mov	r1, r8
   33940:	mov	r0, r4
   33944:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33948:	ldr	r5, [r4, #20]
   3394c:	b	3387c <flatcc_json_printer_int64_field@@Base+0xf8>
   33950:	add	r1, r2, #1
   33954:	mov	r3, #10
   33958:	str	r1, [r0, #20]
   3395c:	strb	r3, [r2]
   33960:	ldrb	r3, [r0, #25]
   33964:	ldr	r2, [r4, #32]
   33968:	ldr	r1, [r0, #16]
   3396c:	ldr	r0, [r0, #20]
   33970:	mul	r9, r2, r3
   33974:	add	r3, r0, r9
   33978:	cmp	r1, r3
   3397c:	bcs	33994 <flatcc_json_printer_int64_field@@Base+0x210>
   33980:	mov	r1, r9
   33984:	mov	r0, r4
   33988:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3398c:	ldr	r2, [r4, #20]
   33990:	b	33838 <flatcc_json_printer_int64_field@@Base+0xb4>
   33994:	mov	r2, r9
   33998:	mov	r1, #32
   3399c:	bl	14594 <memset@plt>
   339a0:	ldr	r2, [r4, #20]
   339a4:	add	r2, r2, r9
   339a8:	str	r2, [r4, #20]
   339ac:	b	33838 <flatcc_json_printer_int64_field@@Base+0xb4>
   339b0:	ldrb	r2, [r0, #28]
   339b4:	cmp	r2, #0
   339b8:	beq	337e0 <flatcc_json_printer_int64_field@@Base+0x5c>
   339bc:	b	3390c <flatcc_json_printer_int64_field@@Base+0x188>

000339c0 <flatcc_json_printer_bool_field@@Base>:
   339c0:	ldr	ip, [r1, #8]
   339c4:	add	r2, r2, #2
   339c8:	lsl	r2, r2, #1
   339cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   339d0:	strd	r6, [sp, #8]
   339d4:	str	r8, [sp, #16]
   339d8:	str	lr, [sp, #20]
   339dc:	cmp	r2, ip
   339e0:	ldrb	lr, [sp, #28]
   339e4:	ldr	r5, [sp, #24]
   339e8:	bge	33b28 <flatcc_json_printer_bool_field@@Base+0x168>
   339ec:	ldr	ip, [r1, #4]
   339f0:	ldrh	r2, [ip, r2]
   339f4:	cmp	r2, #0
   339f8:	beq	33b28 <flatcc_json_printer_bool_field@@Base+0x168>
   339fc:	ldr	ip, [r1]
   33a00:	cmn	ip, r2
   33a04:	beq	33b28 <flatcc_json_printer_bool_field@@Base+0x168>
   33a08:	ldrb	r6, [ip, r2]
   33a0c:	cmp	lr, r6
   33a10:	beq	33bb4 <flatcc_json_printer_bool_field@@Base+0x1f4>
   33a14:	ldr	ip, [r1, #16]
   33a18:	ldr	r2, [r0, #20]
   33a1c:	cmp	ip, #0
   33a20:	add	ip, ip, #1
   33a24:	str	ip, [r1, #16]
   33a28:	beq	33a40 <flatcc_json_printer_bool_field@@Base+0x80>
   33a2c:	add	ip, r2, #1
   33a30:	mov	r1, #44	; 0x2c
   33a34:	str	ip, [r0, #20]
   33a38:	strb	r1, [r2]
   33a3c:	ldr	r2, [r0, #20]
   33a40:	mov	r7, r3
   33a44:	mov	r4, r0
   33a48:	ldrb	r1, [r0, #25]
   33a4c:	cmp	r1, #0
   33a50:	bne	33b54 <flatcc_json_printer_bool_field@@Base+0x194>
   33a54:	ldr	r3, [r0, #16]
   33a58:	cmp	r3, r2
   33a5c:	bhi	33a6c <flatcc_json_printer_bool_field@@Base+0xac>
   33a60:	ldr	r3, [r0, #44]	; 0x2c
   33a64:	blx	r3
   33a68:	ldr	r2, [r4, #20]
   33a6c:	mov	r3, #34	; 0x22
   33a70:	strb	r3, [r2]
   33a74:	ldrb	r3, [r4, #26]
   33a78:	ldr	r2, [r4, #16]
   33a7c:	ldr	r0, [r4, #20]
   33a80:	cmp	r3, #0
   33a84:	addeq	r0, r0, #1
   33a88:	add	r3, r0, r5
   33a8c:	cmp	r2, r3
   33a90:	str	r0, [r4, #20]
   33a94:	bls	33b3c <flatcc_json_printer_bool_field@@Base+0x17c>
   33a98:	mov	r2, r5
   33a9c:	mov	r1, r7
   33aa0:	bl	1451c <memcpy@plt>
   33aa4:	ldr	r3, [r4, #20]
   33aa8:	add	r5, r3, r5
   33aac:	str	r5, [r4, #20]
   33ab0:	mov	r3, #34	; 0x22
   33ab4:	mov	lr, #58	; 0x3a
   33ab8:	mov	ip, #32
   33abc:	mov	r0, r6
   33ac0:	strb	r3, [r5]
   33ac4:	ldrb	r3, [r4, #26]
   33ac8:	ldr	r1, [r4, #20]
   33acc:	clz	r3, r3
   33ad0:	lsr	r3, r3, #5
   33ad4:	add	r2, r1, r3
   33ad8:	add	r2, r2, #1
   33adc:	str	r2, [r4, #20]
   33ae0:	strb	lr, [r1, r3]
   33ae4:	ldr	r3, [r4, #20]
   33ae8:	strb	ip, [r3]
   33aec:	ldrb	r2, [r4, #25]
   33af0:	ldr	r3, [r4, #20]
   33af4:	cmp	r2, #0
   33af8:	addne	r3, r3, #1
   33afc:	mov	r1, r3
   33b00:	str	r3, [r4, #20]
   33b04:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   33b08:	ldr	r3, [r4, #20]
   33b0c:	add	r0, r3, r0
   33b10:	str	r0, [r4, #20]
   33b14:	ldrd	r4, [sp]
   33b18:	ldrd	r6, [sp, #8]
   33b1c:	ldr	r8, [sp, #16]
   33b20:	add	sp, sp, #20
   33b24:	pop	{pc}		; (ldr pc, [sp], #4)
   33b28:	ldrb	r2, [r0, #29]
   33b2c:	cmp	r2, #0
   33b30:	beq	33b14 <flatcc_json_printer_bool_field@@Base+0x154>
   33b34:	mov	r6, lr
   33b38:	b	33a14 <flatcc_json_printer_bool_field@@Base+0x54>
   33b3c:	mov	r2, r5
   33b40:	mov	r1, r7
   33b44:	mov	r0, r4
   33b48:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33b4c:	ldr	r5, [r4, #20]
   33b50:	b	33ab0 <flatcc_json_printer_bool_field@@Base+0xf0>
   33b54:	add	r1, r2, #1
   33b58:	mov	r3, #10
   33b5c:	str	r1, [r0, #20]
   33b60:	strb	r3, [r2]
   33b64:	ldrb	r8, [r0, #25]
   33b68:	ldr	r2, [r4, #32]
   33b6c:	ldr	r1, [r0, #16]
   33b70:	ldr	r0, [r0, #20]
   33b74:	mul	r8, r2, r8
   33b78:	add	r3, r0, r8
   33b7c:	cmp	r1, r3
   33b80:	bcs	33b98 <flatcc_json_printer_bool_field@@Base+0x1d8>
   33b84:	mov	r1, r8
   33b88:	mov	r0, r4
   33b8c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33b90:	ldr	r2, [r4, #20]
   33b94:	b	33a6c <flatcc_json_printer_bool_field@@Base+0xac>
   33b98:	mov	r2, r8
   33b9c:	mov	r1, #32
   33ba0:	bl	14594 <memset@plt>
   33ba4:	ldr	r2, [r4, #20]
   33ba8:	add	r2, r2, r8
   33bac:	str	r2, [r4, #20]
   33bb0:	b	33a6c <flatcc_json_printer_bool_field@@Base+0xac>
   33bb4:	ldrb	r2, [r0, #28]
   33bb8:	cmp	r2, #0
   33bbc:	beq	33a14 <flatcc_json_printer_bool_field@@Base+0x54>
   33bc0:	b	33b14 <flatcc_json_printer_bool_field@@Base+0x154>

00033bc4 <flatcc_json_printer_float_field@@Base>:
   33bc4:	ldr	ip, [r1, #8]
   33bc8:	add	r2, r2, #2
   33bcc:	lsl	r2, r2, #1
   33bd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33bd4:	strd	r6, [sp, #8]
   33bd8:	str	r8, [sp, #16]
   33bdc:	str	lr, [sp, #20]
   33be0:	cmp	r2, ip
   33be4:	vpush	{d8}
   33be8:	ldr	r5, [sp, #32]
   33bec:	bge	33c40 <flatcc_json_printer_float_field@@Base+0x7c>
   33bf0:	ldr	ip, [r1, #4]
   33bf4:	ldrh	ip, [ip, r2]
   33bf8:	cmp	ip, #0
   33bfc:	beq	33c40 <flatcc_json_printer_float_field@@Base+0x7c>
   33c00:	ldr	r2, [r1]
   33c04:	adds	r2, r2, ip
   33c08:	beq	33c40 <flatcc_json_printer_float_field@@Base+0x7c>
   33c0c:	vldr	s16, [r2]
   33c10:	vcmp.f32	s0, s16
   33c14:	vmrs	APSR_nzcv, fpscr
   33c18:	bne	33c50 <flatcc_json_printer_float_field@@Base+0x8c>
   33c1c:	ldrb	r2, [r0, #28]
   33c20:	cmp	r2, #0
   33c24:	beq	33c50 <flatcc_json_printer_float_field@@Base+0x8c>
   33c28:	vpop	{d8}
   33c2c:	ldrd	r4, [sp]
   33c30:	ldrd	r6, [sp, #8]
   33c34:	ldr	r8, [sp, #16]
   33c38:	add	sp, sp, #20
   33c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   33c40:	ldrb	r2, [r0, #29]
   33c44:	cmp	r2, #0
   33c48:	beq	33c28 <flatcc_json_printer_float_field@@Base+0x64>
   33c4c:	vmov.f32	s16, s0
   33c50:	ldr	ip, [r1, #16]
   33c54:	ldr	r2, [r0, #20]
   33c58:	cmp	ip, #0
   33c5c:	add	ip, ip, #1
   33c60:	str	ip, [r1, #16]
   33c64:	beq	33c7c <flatcc_json_printer_float_field@@Base+0xb8>
   33c68:	add	ip, r2, #1
   33c6c:	mov	r1, #44	; 0x2c
   33c70:	str	ip, [r0, #20]
   33c74:	strb	r1, [r2]
   33c78:	ldr	r2, [r0, #20]
   33c7c:	mov	r6, r3
   33c80:	mov	r4, r0
   33c84:	ldrb	r1, [r0, #25]
   33c88:	cmp	r1, #0
   33c8c:	bne	33d6c <flatcc_json_printer_float_field@@Base+0x1a8>
   33c90:	ldr	r3, [r0, #16]
   33c94:	cmp	r3, r2
   33c98:	bhi	33ca8 <flatcc_json_printer_float_field@@Base+0xe4>
   33c9c:	ldr	r3, [r0, #44]	; 0x2c
   33ca0:	blx	r3
   33ca4:	ldr	r2, [r4, #20]
   33ca8:	mov	r3, #34	; 0x22
   33cac:	strb	r3, [r2]
   33cb0:	ldrb	r3, [r4, #26]
   33cb4:	ldr	r2, [r4, #16]
   33cb8:	ldr	r0, [r4, #20]
   33cbc:	cmp	r3, #0
   33cc0:	addeq	r0, r0, #1
   33cc4:	add	r3, r0, r5
   33cc8:	cmp	r2, r3
   33ccc:	str	r0, [r4, #20]
   33cd0:	bls	33d54 <flatcc_json_printer_float_field@@Base+0x190>
   33cd4:	mov	r2, r5
   33cd8:	mov	r1, r6
   33cdc:	bl	1451c <memcpy@plt>
   33ce0:	ldr	r3, [r4, #20]
   33ce4:	add	r5, r3, r5
   33ce8:	str	r5, [r4, #20]
   33cec:	mov	r3, #34	; 0x22
   33cf0:	mov	ip, #58	; 0x3a
   33cf4:	vcvt.f64.f32	d0, s16
   33cf8:	mov	r0, #32
   33cfc:	strb	r3, [r5]
   33d00:	ldrb	r3, [r4, #26]
   33d04:	ldr	r1, [r4, #20]
   33d08:	clz	r3, r3
   33d0c:	lsr	r3, r3, #5
   33d10:	add	r2, r1, r3
   33d14:	add	r2, r2, #1
   33d18:	str	r2, [r4, #20]
   33d1c:	strb	ip, [r1, r3]
   33d20:	ldr	r3, [r4, #20]
   33d24:	strb	r0, [r3]
   33d28:	ldrb	r2, [r4, #25]
   33d2c:	ldr	r3, [r4, #20]
   33d30:	cmp	r2, #0
   33d34:	addne	r3, r3, #1
   33d38:	mov	r0, r3
   33d3c:	str	r3, [r4, #20]
   33d40:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   33d44:	ldr	r3, [r4, #20]
   33d48:	add	r0, r3, r0
   33d4c:	str	r0, [r4, #20]
   33d50:	b	33c28 <flatcc_json_printer_float_field@@Base+0x64>
   33d54:	mov	r2, r5
   33d58:	mov	r1, r6
   33d5c:	mov	r0, r4
   33d60:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33d64:	ldr	r5, [r4, #20]
   33d68:	b	33cec <flatcc_json_printer_float_field@@Base+0x128>
   33d6c:	add	r1, r2, #1
   33d70:	mov	r3, #10
   33d74:	str	r1, [r0, #20]
   33d78:	strb	r3, [r2]
   33d7c:	ldrb	r7, [r0, #25]
   33d80:	ldr	r2, [r4, #32]
   33d84:	ldr	r1, [r0, #16]
   33d88:	ldr	r0, [r0, #20]
   33d8c:	mul	r7, r2, r7
   33d90:	add	r3, r0, r7
   33d94:	cmp	r1, r3
   33d98:	bcs	33db0 <flatcc_json_printer_float_field@@Base+0x1ec>
   33d9c:	mov	r1, r7
   33da0:	mov	r0, r4
   33da4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33da8:	ldr	r2, [r4, #20]
   33dac:	b	33ca8 <flatcc_json_printer_float_field@@Base+0xe4>
   33db0:	mov	r2, r7
   33db4:	mov	r1, #32
   33db8:	bl	14594 <memset@plt>
   33dbc:	ldr	r2, [r4, #20]
   33dc0:	add	r2, r2, r7
   33dc4:	str	r2, [r4, #20]
   33dc8:	b	33ca8 <flatcc_json_printer_float_field@@Base+0xe4>

00033dcc <flatcc_json_printer_double_field@@Base>:
   33dcc:	ldr	ip, [r1, #8]
   33dd0:	add	r2, r2, #2
   33dd4:	lsl	r2, r2, #1
   33dd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33ddc:	strd	r6, [sp, #8]
   33de0:	str	r8, [sp, #16]
   33de4:	str	lr, [sp, #20]
   33de8:	cmp	r2, ip
   33dec:	vpush	{d8}
   33df0:	ldr	r5, [sp, #32]
   33df4:	bge	33e48 <flatcc_json_printer_double_field@@Base+0x7c>
   33df8:	ldr	ip, [r1, #4]
   33dfc:	ldrh	ip, [ip, r2]
   33e00:	cmp	ip, #0
   33e04:	beq	33e48 <flatcc_json_printer_double_field@@Base+0x7c>
   33e08:	ldr	r2, [r1]
   33e0c:	adds	r2, r2, ip
   33e10:	beq	33e48 <flatcc_json_printer_double_field@@Base+0x7c>
   33e14:	vldr	d8, [r2]
   33e18:	vcmp.f64	d0, d8
   33e1c:	vmrs	APSR_nzcv, fpscr
   33e20:	bne	33e58 <flatcc_json_printer_double_field@@Base+0x8c>
   33e24:	ldrb	r2, [r0, #28]
   33e28:	cmp	r2, #0
   33e2c:	beq	33e58 <flatcc_json_printer_double_field@@Base+0x8c>
   33e30:	vpop	{d8}
   33e34:	ldrd	r4, [sp]
   33e38:	ldrd	r6, [sp, #8]
   33e3c:	ldr	r8, [sp, #16]
   33e40:	add	sp, sp, #20
   33e44:	pop	{pc}		; (ldr pc, [sp], #4)
   33e48:	ldrb	r2, [r0, #29]
   33e4c:	cmp	r2, #0
   33e50:	beq	33e30 <flatcc_json_printer_double_field@@Base+0x64>
   33e54:	vmov.f64	d8, d0
   33e58:	ldr	ip, [r1, #16]
   33e5c:	ldr	r2, [r0, #20]
   33e60:	cmp	ip, #0
   33e64:	add	ip, ip, #1
   33e68:	str	ip, [r1, #16]
   33e6c:	beq	33e84 <flatcc_json_printer_double_field@@Base+0xb8>
   33e70:	add	ip, r2, #1
   33e74:	mov	r1, #44	; 0x2c
   33e78:	str	ip, [r0, #20]
   33e7c:	strb	r1, [r2]
   33e80:	ldr	r2, [r0, #20]
   33e84:	mov	r6, r3
   33e88:	mov	r4, r0
   33e8c:	ldrb	r1, [r0, #25]
   33e90:	cmp	r1, #0
   33e94:	bne	33f74 <flatcc_json_printer_double_field@@Base+0x1a8>
   33e98:	ldr	r3, [r0, #16]
   33e9c:	cmp	r3, r2
   33ea0:	bhi	33eb0 <flatcc_json_printer_double_field@@Base+0xe4>
   33ea4:	ldr	r3, [r0, #44]	; 0x2c
   33ea8:	blx	r3
   33eac:	ldr	r2, [r4, #20]
   33eb0:	mov	r3, #34	; 0x22
   33eb4:	strb	r3, [r2]
   33eb8:	ldrb	r3, [r4, #26]
   33ebc:	ldr	r2, [r4, #16]
   33ec0:	ldr	r0, [r4, #20]
   33ec4:	cmp	r3, #0
   33ec8:	addeq	r0, r0, #1
   33ecc:	add	r3, r0, r5
   33ed0:	cmp	r2, r3
   33ed4:	str	r0, [r4, #20]
   33ed8:	bls	33f5c <flatcc_json_printer_double_field@@Base+0x190>
   33edc:	mov	r2, r5
   33ee0:	mov	r1, r6
   33ee4:	bl	1451c <memcpy@plt>
   33ee8:	ldr	r3, [r4, #20]
   33eec:	add	r5, r3, r5
   33ef0:	str	r5, [r4, #20]
   33ef4:	mov	r3, #34	; 0x22
   33ef8:	mov	ip, #58	; 0x3a
   33efc:	vmov.f64	d0, d8
   33f00:	mov	r0, #32
   33f04:	strb	r3, [r5]
   33f08:	ldrb	r3, [r4, #26]
   33f0c:	ldr	r1, [r4, #20]
   33f10:	clz	r3, r3
   33f14:	lsr	r3, r3, #5
   33f18:	add	r2, r1, r3
   33f1c:	add	r2, r2, #1
   33f20:	str	r2, [r4, #20]
   33f24:	strb	ip, [r1, r3]
   33f28:	ldr	r3, [r4, #20]
   33f2c:	strb	r0, [r3]
   33f30:	ldrb	r2, [r4, #25]
   33f34:	ldr	r3, [r4, #20]
   33f38:	cmp	r2, #0
   33f3c:	addne	r3, r3, #1
   33f40:	mov	r0, r3
   33f44:	str	r3, [r4, #20]
   33f48:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   33f4c:	ldr	r3, [r4, #20]
   33f50:	add	r0, r3, r0
   33f54:	str	r0, [r4, #20]
   33f58:	b	33e30 <flatcc_json_printer_double_field@@Base+0x64>
   33f5c:	mov	r2, r5
   33f60:	mov	r1, r6
   33f64:	mov	r0, r4
   33f68:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   33f6c:	ldr	r5, [r4, #20]
   33f70:	b	33ef4 <flatcc_json_printer_double_field@@Base+0x128>
   33f74:	add	r1, r2, #1
   33f78:	mov	r3, #10
   33f7c:	str	r1, [r0, #20]
   33f80:	strb	r3, [r2]
   33f84:	ldrb	r7, [r0, #25]
   33f88:	ldr	r2, [r4, #32]
   33f8c:	ldr	r1, [r0, #16]
   33f90:	ldr	r0, [r0, #20]
   33f94:	mul	r7, r2, r7
   33f98:	add	r3, r0, r7
   33f9c:	cmp	r1, r3
   33fa0:	bcs	33fb8 <flatcc_json_printer_double_field@@Base+0x1ec>
   33fa4:	mov	r1, r7
   33fa8:	mov	r0, r4
   33fac:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   33fb0:	ldr	r2, [r4, #20]
   33fb4:	b	33eb0 <flatcc_json_printer_double_field@@Base+0xe4>
   33fb8:	mov	r2, r7
   33fbc:	mov	r1, #32
   33fc0:	bl	14594 <memset@plt>
   33fc4:	ldr	r2, [r4, #20]
   33fc8:	add	r2, r2, r7
   33fcc:	str	r2, [r4, #20]
   33fd0:	b	33eb0 <flatcc_json_printer_double_field@@Base+0xe4>

00033fd4 <flatcc_json_printer_uint8_enum_field@@Base>:
   33fd4:	ldr	ip, [r1, #8]
   33fd8:	add	r2, r2, #2
   33fdc:	lsl	r2, r2, #1
   33fe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33fe4:	strd	r6, [sp, #8]
   33fe8:	strd	r8, [sp, #16]
   33fec:	str	sl, [sp, #24]
   33ff0:	cmp	r2, ip
   33ff4:	str	lr, [sp, #28]
   33ff8:	ldrb	lr, [sp, #36]	; 0x24
   33ffc:	ldr	r7, [sp, #32]
   34000:	ldr	r5, [sp, #40]	; 0x28
   34004:	bge	3414c <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   34008:	ldr	ip, [r1, #4]
   3400c:	ldrh	r2, [ip, r2]
   34010:	cmp	r2, #0
   34014:	beq	3414c <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   34018:	ldr	ip, [r1]
   3401c:	cmn	ip, r2
   34020:	beq	3414c <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   34024:	ldrb	r6, [ip, r2]
   34028:	cmp	lr, r6
   3402c:	beq	34204 <flatcc_json_printer_uint8_enum_field@@Base+0x230>
   34030:	ldr	ip, [r1, #16]
   34034:	ldr	r2, [r0, #20]
   34038:	cmp	ip, #0
   3403c:	add	ip, ip, #1
   34040:	str	ip, [r1, #16]
   34044:	beq	3405c <flatcc_json_printer_uint8_enum_field@@Base+0x88>
   34048:	add	ip, r2, #1
   3404c:	mov	r1, #44	; 0x2c
   34050:	str	ip, [r0, #20]
   34054:	strb	r1, [r2]
   34058:	ldr	r2, [r0, #20]
   3405c:	mov	r8, r3
   34060:	mov	r4, r0
   34064:	ldrb	r1, [r0, #25]
   34068:	cmp	r1, #0
   3406c:	bne	341a4 <flatcc_json_printer_uint8_enum_field@@Base+0x1d0>
   34070:	ldr	r3, [r0, #16]
   34074:	cmp	r3, r2
   34078:	bhi	34088 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   3407c:	ldr	r3, [r0, #44]	; 0x2c
   34080:	blx	r3
   34084:	ldr	r2, [r4, #20]
   34088:	mov	r3, #34	; 0x22
   3408c:	strb	r3, [r2]
   34090:	ldrb	r3, [r4, #26]
   34094:	ldr	r2, [r4, #16]
   34098:	ldr	r0, [r4, #20]
   3409c:	cmp	r3, #0
   340a0:	addeq	r0, r0, #1
   340a4:	add	r3, r0, r7
   340a8:	cmp	r2, r3
   340ac:	str	r0, [r4, #20]
   340b0:	bls	3418c <flatcc_json_printer_uint8_enum_field@@Base+0x1b8>
   340b4:	mov	r2, r7
   340b8:	mov	r1, r8
   340bc:	bl	1451c <memcpy@plt>
   340c0:	ldr	r3, [r4, #20]
   340c4:	add	r7, r3, r7
   340c8:	str	r7, [r4, #20]
   340cc:	mov	r3, #34	; 0x22
   340d0:	mov	ip, #58	; 0x3a
   340d4:	mov	r0, #32
   340d8:	strb	r3, [r7]
   340dc:	ldrb	r3, [r4, #26]
   340e0:	ldr	r1, [r4, #20]
   340e4:	clz	r3, r3
   340e8:	lsr	r3, r3, #5
   340ec:	add	r2, r1, r3
   340f0:	add	r2, r2, #1
   340f4:	str	r2, [r4, #20]
   340f8:	strb	ip, [r1, r3]
   340fc:	ldr	r3, [r4, #20]
   34100:	strb	r0, [r3]
   34104:	ldrb	r2, [r4, #25]
   34108:	ldr	r1, [r4, #20]
   3410c:	ldrb	r3, [r4, #27]
   34110:	cmp	r2, #0
   34114:	addne	r1, r1, #1
   34118:	cmp	r3, #0
   3411c:	str	r1, [r4, #20]
   34120:	bne	34160 <flatcc_json_printer_uint8_enum_field@@Base+0x18c>
   34124:	mov	r1, r6
   34128:	mov	r0, r4
   3412c:	ldrd	r6, [sp, #8]
   34130:	mov	r3, r5
   34134:	ldrd	r4, [sp]
   34138:	ldrd	r8, [sp, #16]
   3413c:	ldr	sl, [sp, #24]
   34140:	ldr	lr, [sp, #28]
   34144:	add	sp, sp, #32
   34148:	bx	r3
   3414c:	ldrb	r2, [r0, #29]
   34150:	cmp	r2, #0
   34154:	beq	34174 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
   34158:	mov	r6, lr
   3415c:	b	34030 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   34160:	mov	r0, r6
   34164:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   34168:	ldr	r3, [r4, #20]
   3416c:	add	r0, r3, r0
   34170:	str	r0, [r4, #20]
   34174:	ldrd	r4, [sp]
   34178:	ldrd	r6, [sp, #8]
   3417c:	ldrd	r8, [sp, #16]
   34180:	ldr	sl, [sp, #24]
   34184:	add	sp, sp, #28
   34188:	pop	{pc}		; (ldr pc, [sp], #4)
   3418c:	mov	r2, r7
   34190:	mov	r1, r8
   34194:	mov	r0, r4
   34198:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3419c:	ldr	r7, [r4, #20]
   341a0:	b	340cc <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   341a4:	add	r1, r2, #1
   341a8:	mov	r3, #10
   341ac:	str	r1, [r0, #20]
   341b0:	strb	r3, [r2]
   341b4:	ldrb	r3, [r0, #25]
   341b8:	ldr	r2, [r4, #32]
   341bc:	ldr	r1, [r0, #16]
   341c0:	ldr	r0, [r0, #20]
   341c4:	mul	r9, r2, r3
   341c8:	add	r3, r0, r9
   341cc:	cmp	r1, r3
   341d0:	bcs	341e8 <flatcc_json_printer_uint8_enum_field@@Base+0x214>
   341d4:	mov	r1, r9
   341d8:	mov	r0, r4
   341dc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   341e0:	ldr	r2, [r4, #20]
   341e4:	b	34088 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   341e8:	mov	r2, r9
   341ec:	mov	r1, #32
   341f0:	bl	14594 <memset@plt>
   341f4:	ldr	r2, [r4, #20]
   341f8:	add	r2, r2, r9
   341fc:	str	r2, [r4, #20]
   34200:	b	34088 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   34204:	ldrb	r2, [r0, #28]
   34208:	cmp	r2, #0
   3420c:	beq	34030 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   34210:	b	34174 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>

00034214 <flatcc_json_printer_uint16_enum_field@@Base>:
   34214:	ldr	ip, [r1, #8]
   34218:	add	r2, r2, #2
   3421c:	lsl	r2, r2, #1
   34220:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34224:	strd	r6, [sp, #8]
   34228:	strd	r8, [sp, #16]
   3422c:	str	sl, [sp, #24]
   34230:	cmp	r2, ip
   34234:	str	lr, [sp, #28]
   34238:	ldrh	lr, [sp, #36]	; 0x24
   3423c:	ldr	r7, [sp, #32]
   34240:	ldr	r5, [sp, #40]	; 0x28
   34244:	bge	3438c <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34248:	ldr	ip, [r1, #4]
   3424c:	ldrh	r2, [ip, r2]
   34250:	cmp	r2, #0
   34254:	beq	3438c <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34258:	ldr	ip, [r1]
   3425c:	cmn	ip, r2
   34260:	beq	3438c <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   34264:	ldrh	r6, [ip, r2]
   34268:	cmp	lr, r6
   3426c:	beq	34444 <flatcc_json_printer_uint16_enum_field@@Base+0x230>
   34270:	ldr	ip, [r1, #16]
   34274:	ldr	r2, [r0, #20]
   34278:	cmp	ip, #0
   3427c:	add	ip, ip, #1
   34280:	str	ip, [r1, #16]
   34284:	beq	3429c <flatcc_json_printer_uint16_enum_field@@Base+0x88>
   34288:	add	ip, r2, #1
   3428c:	mov	r1, #44	; 0x2c
   34290:	str	ip, [r0, #20]
   34294:	strb	r1, [r2]
   34298:	ldr	r2, [r0, #20]
   3429c:	mov	r8, r3
   342a0:	mov	r4, r0
   342a4:	ldrb	r1, [r0, #25]
   342a8:	cmp	r1, #0
   342ac:	bne	343e4 <flatcc_json_printer_uint16_enum_field@@Base+0x1d0>
   342b0:	ldr	r3, [r0, #16]
   342b4:	cmp	r3, r2
   342b8:	bhi	342c8 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   342bc:	ldr	r3, [r0, #44]	; 0x2c
   342c0:	blx	r3
   342c4:	ldr	r2, [r4, #20]
   342c8:	mov	r3, #34	; 0x22
   342cc:	strb	r3, [r2]
   342d0:	ldrb	r3, [r4, #26]
   342d4:	ldr	r2, [r4, #16]
   342d8:	ldr	r0, [r4, #20]
   342dc:	cmp	r3, #0
   342e0:	addeq	r0, r0, #1
   342e4:	add	r3, r0, r7
   342e8:	cmp	r2, r3
   342ec:	str	r0, [r4, #20]
   342f0:	bls	343cc <flatcc_json_printer_uint16_enum_field@@Base+0x1b8>
   342f4:	mov	r2, r7
   342f8:	mov	r1, r8
   342fc:	bl	1451c <memcpy@plt>
   34300:	ldr	r3, [r4, #20]
   34304:	add	r7, r3, r7
   34308:	str	r7, [r4, #20]
   3430c:	mov	r3, #34	; 0x22
   34310:	mov	ip, #58	; 0x3a
   34314:	mov	r0, #32
   34318:	strb	r3, [r7]
   3431c:	ldrb	r3, [r4, #26]
   34320:	ldr	r1, [r4, #20]
   34324:	clz	r3, r3
   34328:	lsr	r3, r3, #5
   3432c:	add	r2, r1, r3
   34330:	add	r2, r2, #1
   34334:	str	r2, [r4, #20]
   34338:	strb	ip, [r1, r3]
   3433c:	ldr	r3, [r4, #20]
   34340:	strb	r0, [r3]
   34344:	ldrb	r2, [r4, #25]
   34348:	ldr	r1, [r4, #20]
   3434c:	ldrb	r3, [r4, #27]
   34350:	cmp	r2, #0
   34354:	addne	r1, r1, #1
   34358:	cmp	r3, #0
   3435c:	str	r1, [r4, #20]
   34360:	bne	343a0 <flatcc_json_printer_uint16_enum_field@@Base+0x18c>
   34364:	mov	r1, r6
   34368:	mov	r0, r4
   3436c:	ldrd	r6, [sp, #8]
   34370:	mov	r3, r5
   34374:	ldrd	r4, [sp]
   34378:	ldrd	r8, [sp, #16]
   3437c:	ldr	sl, [sp, #24]
   34380:	ldr	lr, [sp, #28]
   34384:	add	sp, sp, #32
   34388:	bx	r3
   3438c:	ldrb	r2, [r0, #29]
   34390:	cmp	r2, #0
   34394:	beq	343b4 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
   34398:	mov	r6, lr
   3439c:	b	34270 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   343a0:	mov	r0, r6
   343a4:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   343a8:	ldr	r3, [r4, #20]
   343ac:	add	r0, r3, r0
   343b0:	str	r0, [r4, #20]
   343b4:	ldrd	r4, [sp]
   343b8:	ldrd	r6, [sp, #8]
   343bc:	ldrd	r8, [sp, #16]
   343c0:	ldr	sl, [sp, #24]
   343c4:	add	sp, sp, #28
   343c8:	pop	{pc}		; (ldr pc, [sp], #4)
   343cc:	mov	r2, r7
   343d0:	mov	r1, r8
   343d4:	mov	r0, r4
   343d8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   343dc:	ldr	r7, [r4, #20]
   343e0:	b	3430c <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   343e4:	add	r1, r2, #1
   343e8:	mov	r3, #10
   343ec:	str	r1, [r0, #20]
   343f0:	strb	r3, [r2]
   343f4:	ldrb	r3, [r0, #25]
   343f8:	ldr	r2, [r4, #32]
   343fc:	ldr	r1, [r0, #16]
   34400:	ldr	r0, [r0, #20]
   34404:	mul	r9, r2, r3
   34408:	add	r3, r0, r9
   3440c:	cmp	r1, r3
   34410:	bcs	34428 <flatcc_json_printer_uint16_enum_field@@Base+0x214>
   34414:	mov	r1, r9
   34418:	mov	r0, r4
   3441c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34420:	ldr	r2, [r4, #20]
   34424:	b	342c8 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34428:	mov	r2, r9
   3442c:	mov	r1, #32
   34430:	bl	14594 <memset@plt>
   34434:	ldr	r2, [r4, #20]
   34438:	add	r2, r2, r9
   3443c:	str	r2, [r4, #20]
   34440:	b	342c8 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   34444:	ldrb	r2, [r0, #28]
   34448:	cmp	r2, #0
   3444c:	beq	34270 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   34450:	b	343b4 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>

00034454 <flatcc_json_printer_uint32_enum_field@@Base>:
   34454:	ldr	ip, [r1, #8]
   34458:	add	r2, r2, #2
   3445c:	lsl	r2, r2, #1
   34460:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34464:	strd	r6, [sp, #8]
   34468:	strd	r8, [sp, #16]
   3446c:	str	sl, [sp, #24]
   34470:	cmp	r2, ip
   34474:	str	lr, [sp, #28]
   34478:	ldr	r5, [sp, #32]
   3447c:	ldr	lr, [sp, #36]	; 0x24
   34480:	ldr	r6, [sp, #40]	; 0x28
   34484:	bge	345cc <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34488:	ldr	ip, [r1, #4]
   3448c:	ldrh	r2, [ip, r2]
   34490:	cmp	r2, #0
   34494:	beq	345cc <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   34498:	ldr	ip, [r1]
   3449c:	cmn	ip, r2
   344a0:	beq	345cc <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   344a4:	ldr	r7, [ip, r2]
   344a8:	cmp	lr, r7
   344ac:	beq	34684 <flatcc_json_printer_uint32_enum_field@@Base+0x230>
   344b0:	ldr	ip, [r1, #16]
   344b4:	ldr	r2, [r0, #20]
   344b8:	cmp	ip, #0
   344bc:	add	ip, ip, #1
   344c0:	str	ip, [r1, #16]
   344c4:	beq	344dc <flatcc_json_printer_uint32_enum_field@@Base+0x88>
   344c8:	add	ip, r2, #1
   344cc:	mov	r1, #44	; 0x2c
   344d0:	str	ip, [r0, #20]
   344d4:	strb	r1, [r2]
   344d8:	ldr	r2, [r0, #20]
   344dc:	mov	r8, r3
   344e0:	mov	r4, r0
   344e4:	ldrb	r1, [r0, #25]
   344e8:	cmp	r1, #0
   344ec:	bne	34624 <flatcc_json_printer_uint32_enum_field@@Base+0x1d0>
   344f0:	ldr	r3, [r0, #16]
   344f4:	cmp	r3, r2
   344f8:	bhi	34508 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   344fc:	ldr	r3, [r0, #44]	; 0x2c
   34500:	blx	r3
   34504:	ldr	r2, [r4, #20]
   34508:	mov	r3, #34	; 0x22
   3450c:	strb	r3, [r2]
   34510:	ldrb	r3, [r4, #26]
   34514:	ldr	r2, [r4, #16]
   34518:	ldr	r0, [r4, #20]
   3451c:	cmp	r3, #0
   34520:	addeq	r0, r0, #1
   34524:	add	r3, r0, r5
   34528:	cmp	r2, r3
   3452c:	str	r0, [r4, #20]
   34530:	bls	3460c <flatcc_json_printer_uint32_enum_field@@Base+0x1b8>
   34534:	mov	r2, r5
   34538:	mov	r1, r8
   3453c:	bl	1451c <memcpy@plt>
   34540:	ldr	r3, [r4, #20]
   34544:	add	r5, r3, r5
   34548:	str	r5, [r4, #20]
   3454c:	mov	r3, #34	; 0x22
   34550:	mov	ip, #58	; 0x3a
   34554:	mov	r0, #32
   34558:	strb	r3, [r5]
   3455c:	ldrb	r3, [r4, #26]
   34560:	ldr	r1, [r4, #20]
   34564:	clz	r3, r3
   34568:	lsr	r3, r3, #5
   3456c:	add	r2, r1, r3
   34570:	add	r2, r2, #1
   34574:	str	r2, [r4, #20]
   34578:	strb	ip, [r1, r3]
   3457c:	ldr	r3, [r4, #20]
   34580:	strb	r0, [r3]
   34584:	ldrb	r2, [r4, #25]
   34588:	ldr	r1, [r4, #20]
   3458c:	ldrb	r3, [r4, #27]
   34590:	cmp	r2, #0
   34594:	addne	r1, r1, #1
   34598:	cmp	r3, #0
   3459c:	str	r1, [r4, #20]
   345a0:	bne	345e0 <flatcc_json_printer_uint32_enum_field@@Base+0x18c>
   345a4:	mov	r1, r7
   345a8:	mov	r0, r4
   345ac:	ldrd	r4, [sp]
   345b0:	mov	r3, r6
   345b4:	ldrd	r6, [sp, #8]
   345b8:	ldrd	r8, [sp, #16]
   345bc:	ldr	sl, [sp, #24]
   345c0:	ldr	lr, [sp, #28]
   345c4:	add	sp, sp, #32
   345c8:	bx	r3
   345cc:	ldrb	r2, [r0, #29]
   345d0:	cmp	r2, #0
   345d4:	beq	345f4 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
   345d8:	mov	r7, lr
   345dc:	b	344b0 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   345e0:	mov	r0, r7
   345e4:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   345e8:	ldr	r3, [r4, #20]
   345ec:	add	r0, r3, r0
   345f0:	str	r0, [r4, #20]
   345f4:	ldrd	r4, [sp]
   345f8:	ldrd	r6, [sp, #8]
   345fc:	ldrd	r8, [sp, #16]
   34600:	ldr	sl, [sp, #24]
   34604:	add	sp, sp, #28
   34608:	pop	{pc}		; (ldr pc, [sp], #4)
   3460c:	mov	r2, r5
   34610:	mov	r1, r8
   34614:	mov	r0, r4
   34618:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3461c:	ldr	r5, [r4, #20]
   34620:	b	3454c <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   34624:	add	r1, r2, #1
   34628:	mov	r3, #10
   3462c:	str	r1, [r0, #20]
   34630:	strb	r3, [r2]
   34634:	ldrb	r3, [r0, #25]
   34638:	ldr	r2, [r4, #32]
   3463c:	ldr	r1, [r0, #16]
   34640:	ldr	r0, [r0, #20]
   34644:	mul	r9, r2, r3
   34648:	add	r3, r0, r9
   3464c:	cmp	r1, r3
   34650:	bcs	34668 <flatcc_json_printer_uint32_enum_field@@Base+0x214>
   34654:	mov	r1, r9
   34658:	mov	r0, r4
   3465c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34660:	ldr	r2, [r4, #20]
   34664:	b	34508 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34668:	mov	r2, r9
   3466c:	mov	r1, #32
   34670:	bl	14594 <memset@plt>
   34674:	ldr	r2, [r4, #20]
   34678:	add	r2, r2, r9
   3467c:	str	r2, [r4, #20]
   34680:	b	34508 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   34684:	ldrb	r2, [r0, #28]
   34688:	cmp	r2, #0
   3468c:	beq	344b0 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   34690:	b	345f4 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>

00034694 <flatcc_json_printer_uint64_enum_field@@Base>:
   34694:	ldr	ip, [r1, #8]
   34698:	add	r2, r2, #2
   3469c:	lsl	r2, r2, #1
   346a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   346a4:	strd	r6, [sp, #8]
   346a8:	strd	r8, [sp, #16]
   346ac:	strd	sl, [sp, #24]
   346b0:	cmp	r2, ip
   346b4:	str	lr, [sp, #32]
   346b8:	sub	sp, sp, #4
   346bc:	ldr	r8, [sp, #40]	; 0x28
   346c0:	ldrd	sl, [sp, #48]	; 0x30
   346c4:	ldr	r5, [sp, #56]	; 0x38
   346c8:	bge	3481c <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   346cc:	ldr	ip, [r1, #4]
   346d0:	ldrh	r2, [ip, r2]
   346d4:	cmp	r2, #0
   346d8:	beq	3481c <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   346dc:	ldr	ip, [r1]
   346e0:	cmn	ip, r2
   346e4:	beq	3481c <flatcc_json_printer_uint64_enum_field@@Base+0x188>
   346e8:	ldrd	r6, [ip, r2]
   346ec:	cmp	fp, r7
   346f0:	cmpeq	sl, r6
   346f4:	beq	348e0 <flatcc_json_printer_uint64_enum_field@@Base+0x24c>
   346f8:	ldr	ip, [r1, #16]
   346fc:	ldr	r2, [r0, #20]
   34700:	cmp	ip, #0
   34704:	add	ip, ip, #1
   34708:	str	ip, [r1, #16]
   3470c:	beq	34724 <flatcc_json_printer_uint64_enum_field@@Base+0x90>
   34710:	add	ip, r2, #1
   34714:	mov	r1, #44	; 0x2c
   34718:	str	ip, [r0, #20]
   3471c:	strb	r1, [r2]
   34720:	ldr	r2, [r0, #20]
   34724:	mov	r9, r3
   34728:	mov	r4, r0
   3472c:	ldrb	r1, [r0, #25]
   34730:	cmp	r1, #0
   34734:	bne	34880 <flatcc_json_printer_uint64_enum_field@@Base+0x1ec>
   34738:	ldr	r3, [r0, #16]
   3473c:	cmp	r3, r2
   34740:	bhi	34750 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   34744:	ldr	r3, [r0, #44]	; 0x2c
   34748:	blx	r3
   3474c:	ldr	r2, [r4, #20]
   34750:	mov	r3, #34	; 0x22
   34754:	strb	r3, [r2]
   34758:	ldrb	r3, [r4, #26]
   3475c:	ldr	r2, [r4, #16]
   34760:	ldr	r0, [r4, #20]
   34764:	cmp	r3, #0
   34768:	addeq	r0, r0, #1
   3476c:	add	r3, r0, r8
   34770:	cmp	r2, r3
   34774:	str	r0, [r4, #20]
   34778:	bls	34868 <flatcc_json_printer_uint64_enum_field@@Base+0x1d4>
   3477c:	mov	r2, r8
   34780:	mov	r1, r9
   34784:	bl	1451c <memcpy@plt>
   34788:	ldr	r3, [r4, #20]
   3478c:	add	r8, r3, r8
   34790:	str	r8, [r4, #20]
   34794:	mov	r3, #34	; 0x22
   34798:	mov	ip, #58	; 0x3a
   3479c:	mov	r0, #32
   347a0:	strb	r3, [r8]
   347a4:	ldrb	r3, [r4, #26]
   347a8:	ldr	r1, [r4, #20]
   347ac:	clz	r3, r3
   347b0:	lsr	r3, r3, #5
   347b4:	add	r2, r1, r3
   347b8:	add	r2, r2, #1
   347bc:	str	r2, [r4, #20]
   347c0:	strb	ip, [r1, r3]
   347c4:	ldr	r3, [r4, #20]
   347c8:	strb	r0, [r3]
   347cc:	ldrb	r1, [r4, #25]
   347d0:	ldr	r2, [r4, #20]
   347d4:	ldrb	r3, [r4, #27]
   347d8:	cmp	r1, #0
   347dc:	addne	r2, r2, #1
   347e0:	cmp	r3, #0
   347e4:	str	r2, [r4, #20]
   347e8:	bne	34834 <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
   347ec:	mov	r2, r6
   347f0:	mov	r3, r7
   347f4:	mov	r0, r4
   347f8:	mov	r1, r5
   347fc:	add	sp, sp, #4
   34800:	ldrd	r4, [sp]
   34804:	ldrd	r6, [sp, #8]
   34808:	ldrd	r8, [sp, #16]
   3480c:	ldrd	sl, [sp, #24]
   34810:	ldr	lr, [sp, #32]
   34814:	add	sp, sp, #36	; 0x24
   34818:	bx	r1
   3481c:	ldrb	r2, [r0, #29]
   34820:	cmp	r2, #0
   34824:	beq	3484c <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>
   34828:	mov	r6, sl
   3482c:	mov	r7, fp
   34830:	b	346f8 <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   34834:	mov	r0, r6
   34838:	mov	r1, r7
   3483c:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   34840:	ldr	r3, [r4, #20]
   34844:	add	r0, r3, r0
   34848:	str	r0, [r4, #20]
   3484c:	add	sp, sp, #4
   34850:	ldrd	r4, [sp]
   34854:	ldrd	r6, [sp, #8]
   34858:	ldrd	r8, [sp, #16]
   3485c:	ldrd	sl, [sp, #24]
   34860:	add	sp, sp, #32
   34864:	pop	{pc}		; (ldr pc, [sp], #4)
   34868:	mov	r2, r8
   3486c:	mov	r1, r9
   34870:	mov	r0, r4
   34874:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34878:	ldr	r8, [r4, #20]
   3487c:	b	34794 <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   34880:	add	r1, r2, #1
   34884:	mov	r3, #10
   34888:	str	r1, [r0, #20]
   3488c:	strb	r3, [r2]
   34890:	ldrb	r3, [r0, #25]
   34894:	ldr	r2, [r4, #32]
   34898:	ldr	r1, [r0, #16]
   3489c:	ldr	r0, [r0, #20]
   348a0:	mul	sl, r2, r3
   348a4:	add	r3, r0, sl
   348a8:	cmp	r1, r3
   348ac:	bcs	348c4 <flatcc_json_printer_uint64_enum_field@@Base+0x230>
   348b0:	mov	r1, sl
   348b4:	mov	r0, r4
   348b8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   348bc:	ldr	r2, [r4, #20]
   348c0:	b	34750 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   348c4:	mov	r2, sl
   348c8:	mov	r1, #32
   348cc:	bl	14594 <memset@plt>
   348d0:	ldr	r2, [r4, #20]
   348d4:	add	r2, r2, sl
   348d8:	str	r2, [r4, #20]
   348dc:	b	34750 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   348e0:	ldrb	r2, [r0, #28]
   348e4:	cmp	r2, #0
   348e8:	beq	346f8 <flatcc_json_printer_uint64_enum_field@@Base+0x64>
   348ec:	b	3484c <flatcc_json_printer_uint64_enum_field@@Base+0x1b8>

000348f0 <flatcc_json_printer_int8_enum_field@@Base>:
   348f0:	ldr	ip, [r1, #8]
   348f4:	add	r2, r2, #2
   348f8:	lsl	r2, r2, #1
   348fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34900:	strd	r6, [sp, #8]
   34904:	strd	r8, [sp, #16]
   34908:	str	sl, [sp, #24]
   3490c:	cmp	r2, ip
   34910:	str	lr, [sp, #28]
   34914:	ldrsb	lr, [sp, #36]	; 0x24
   34918:	ldr	r7, [sp, #32]
   3491c:	ldr	r6, [sp, #40]	; 0x28
   34920:	bge	34a94 <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   34924:	ldr	ip, [r1, #4]
   34928:	ldrh	r2, [ip, r2]
   3492c:	cmp	r2, #0
   34930:	beq	34a94 <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   34934:	ldr	ip, [r1]
   34938:	cmn	ip, r2
   3493c:	beq	34a94 <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   34940:	ldrsb	r5, [ip, r2]
   34944:	cmp	lr, r5
   34948:	beq	34b48 <flatcc_json_printer_int8_enum_field@@Base+0x258>
   3494c:	ldr	ip, [r1, #16]
   34950:	ldr	r2, [r0, #20]
   34954:	cmp	ip, #0
   34958:	add	ip, ip, #1
   3495c:	str	ip, [r1, #16]
   34960:	beq	34978 <flatcc_json_printer_int8_enum_field@@Base+0x88>
   34964:	add	ip, r2, #1
   34968:	mov	r1, #44	; 0x2c
   3496c:	str	ip, [r0, #20]
   34970:	strb	r1, [r2]
   34974:	ldr	r2, [r0, #20]
   34978:	mov	r8, r3
   3497c:	mov	r4, r0
   34980:	ldrb	r1, [r0, #25]
   34984:	cmp	r1, #0
   34988:	bne	34ae8 <flatcc_json_printer_int8_enum_field@@Base+0x1f8>
   3498c:	ldr	r3, [r0, #16]
   34990:	cmp	r3, r2
   34994:	bhi	349a4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34998:	ldr	r3, [r0, #44]	; 0x2c
   3499c:	blx	r3
   349a0:	ldr	r2, [r4, #20]
   349a4:	mov	r3, #34	; 0x22
   349a8:	strb	r3, [r2]
   349ac:	ldrb	r3, [r4, #26]
   349b0:	ldr	r2, [r4, #16]
   349b4:	ldr	r0, [r4, #20]
   349b8:	cmp	r3, #0
   349bc:	addeq	r0, r0, #1
   349c0:	add	r3, r0, r7
   349c4:	cmp	r2, r3
   349c8:	str	r0, [r4, #20]
   349cc:	bls	34ad0 <flatcc_json_printer_int8_enum_field@@Base+0x1e0>
   349d0:	mov	r2, r7
   349d4:	mov	r1, r8
   349d8:	bl	1451c <memcpy@plt>
   349dc:	ldr	r3, [r4, #20]
   349e0:	add	r7, r3, r7
   349e4:	str	r7, [r4, #20]
   349e8:	mov	r3, #34	; 0x22
   349ec:	mov	ip, #58	; 0x3a
   349f0:	mov	r0, #32
   349f4:	strb	r3, [r7]
   349f8:	ldrb	r3, [r4, #26]
   349fc:	ldr	r1, [r4, #20]
   34a00:	clz	r3, r3
   34a04:	lsr	r3, r3, #5
   34a08:	add	r2, r1, r3
   34a0c:	add	r2, r2, #1
   34a10:	str	r2, [r4, #20]
   34a14:	strb	ip, [r1, r3]
   34a18:	ldr	r3, [r4, #20]
   34a1c:	strb	r0, [r3]
   34a20:	ldrb	r3, [r4, #25]
   34a24:	ldr	r2, [r4, #20]
   34a28:	ldrb	r0, [r4, #27]
   34a2c:	adds	r3, r3, #0
   34a30:	movne	r3, #1
   34a34:	add	r1, r2, r3
   34a38:	cmp	r0, #0
   34a3c:	str	r1, [r4, #20]
   34a40:	beq	34aa8 <flatcc_json_printer_int8_enum_field@@Base+0x1b8>
   34a44:	cmp	r5, #0
   34a48:	lsr	r6, r5, #31
   34a4c:	uxtb	r0, r5
   34a50:	bge	34a68 <flatcc_json_printer_int8_enum_field@@Base+0x178>
   34a54:	rsb	r0, r0, #0
   34a58:	mov	ip, #45	; 0x2d
   34a5c:	add	r1, r1, #1
   34a60:	uxtb	r0, r0
   34a64:	strb	ip, [r2, r3]
   34a68:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   34a6c:	ldr	r3, [r4, #20]
   34a70:	add	r0, r6, r0
   34a74:	add	r3, r3, r0
   34a78:	str	r3, [r4, #20]
   34a7c:	ldrd	r4, [sp]
   34a80:	ldrd	r6, [sp, #8]
   34a84:	ldrd	r8, [sp, #16]
   34a88:	ldr	sl, [sp, #24]
   34a8c:	add	sp, sp, #28
   34a90:	pop	{pc}		; (ldr pc, [sp], #4)
   34a94:	ldrb	r2, [r0, #29]
   34a98:	cmp	r2, #0
   34a9c:	beq	34a7c <flatcc_json_printer_int8_enum_field@@Base+0x18c>
   34aa0:	mov	r5, lr
   34aa4:	b	3494c <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   34aa8:	mov	r1, r5
   34aac:	mov	r0, r4
   34ab0:	ldrd	r4, [sp]
   34ab4:	mov	r3, r6
   34ab8:	ldrd	r6, [sp, #8]
   34abc:	ldrd	r8, [sp, #16]
   34ac0:	ldr	sl, [sp, #24]
   34ac4:	ldr	lr, [sp, #28]
   34ac8:	add	sp, sp, #32
   34acc:	bx	r3
   34ad0:	mov	r2, r7
   34ad4:	mov	r1, r8
   34ad8:	mov	r0, r4
   34adc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34ae0:	ldr	r7, [r4, #20]
   34ae4:	b	349e8 <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   34ae8:	add	r1, r2, #1
   34aec:	mov	r3, #10
   34af0:	str	r1, [r0, #20]
   34af4:	strb	r3, [r2]
   34af8:	ldrb	r3, [r0, #25]
   34afc:	ldr	r2, [r4, #32]
   34b00:	ldr	r1, [r0, #16]
   34b04:	ldr	r0, [r0, #20]
   34b08:	mul	r9, r2, r3
   34b0c:	add	r3, r0, r9
   34b10:	cmp	r1, r3
   34b14:	bcs	34b2c <flatcc_json_printer_int8_enum_field@@Base+0x23c>
   34b18:	mov	r1, r9
   34b1c:	mov	r0, r4
   34b20:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34b24:	ldr	r2, [r4, #20]
   34b28:	b	349a4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34b2c:	mov	r2, r9
   34b30:	mov	r1, #32
   34b34:	bl	14594 <memset@plt>
   34b38:	ldr	r2, [r4, #20]
   34b3c:	add	r2, r2, r9
   34b40:	str	r2, [r4, #20]
   34b44:	b	349a4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34b48:	ldrb	r2, [r0, #28]
   34b4c:	cmp	r2, #0
   34b50:	beq	3494c <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   34b54:	b	34a7c <flatcc_json_printer_int8_enum_field@@Base+0x18c>

00034b58 <flatcc_json_printer_int16_enum_field@@Base>:
   34b58:	ldr	ip, [r1, #8]
   34b5c:	add	r2, r2, #2
   34b60:	lsl	r2, r2, #1
   34b64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34b68:	strd	r6, [sp, #8]
   34b6c:	strd	r8, [sp, #16]
   34b70:	str	sl, [sp, #24]
   34b74:	cmp	r2, ip
   34b78:	str	lr, [sp, #28]
   34b7c:	ldrsh	lr, [sp, #36]	; 0x24
   34b80:	ldr	r7, [sp, #32]
   34b84:	ldr	r6, [sp, #40]	; 0x28
   34b88:	bge	34cfc <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   34b8c:	ldr	ip, [r1, #4]
   34b90:	ldrh	r2, [ip, r2]
   34b94:	cmp	r2, #0
   34b98:	beq	34cfc <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   34b9c:	ldr	ip, [r1]
   34ba0:	cmn	ip, r2
   34ba4:	beq	34cfc <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   34ba8:	ldrsh	r5, [ip, r2]
   34bac:	cmp	lr, r5
   34bb0:	beq	34db0 <flatcc_json_printer_int16_enum_field@@Base+0x258>
   34bb4:	ldr	ip, [r1, #16]
   34bb8:	ldr	r2, [r0, #20]
   34bbc:	cmp	ip, #0
   34bc0:	add	ip, ip, #1
   34bc4:	str	ip, [r1, #16]
   34bc8:	beq	34be0 <flatcc_json_printer_int16_enum_field@@Base+0x88>
   34bcc:	add	ip, r2, #1
   34bd0:	mov	r1, #44	; 0x2c
   34bd4:	str	ip, [r0, #20]
   34bd8:	strb	r1, [r2]
   34bdc:	ldr	r2, [r0, #20]
   34be0:	mov	r8, r3
   34be4:	mov	r4, r0
   34be8:	ldrb	r1, [r0, #25]
   34bec:	cmp	r1, #0
   34bf0:	bne	34d50 <flatcc_json_printer_int16_enum_field@@Base+0x1f8>
   34bf4:	ldr	r3, [r0, #16]
   34bf8:	cmp	r3, r2
   34bfc:	bhi	34c0c <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   34c00:	ldr	r3, [r0, #44]	; 0x2c
   34c04:	blx	r3
   34c08:	ldr	r2, [r4, #20]
   34c0c:	mov	r3, #34	; 0x22
   34c10:	strb	r3, [r2]
   34c14:	ldrb	r3, [r4, #26]
   34c18:	ldr	r2, [r4, #16]
   34c1c:	ldr	r0, [r4, #20]
   34c20:	cmp	r3, #0
   34c24:	addeq	r0, r0, #1
   34c28:	add	r3, r0, r7
   34c2c:	cmp	r2, r3
   34c30:	str	r0, [r4, #20]
   34c34:	bls	34d38 <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
   34c38:	mov	r2, r7
   34c3c:	mov	r1, r8
   34c40:	bl	1451c <memcpy@plt>
   34c44:	ldr	r3, [r4, #20]
   34c48:	add	r7, r3, r7
   34c4c:	str	r7, [r4, #20]
   34c50:	mov	r3, #34	; 0x22
   34c54:	mov	ip, #58	; 0x3a
   34c58:	mov	r0, #32
   34c5c:	strb	r3, [r7]
   34c60:	ldrb	r3, [r4, #26]
   34c64:	ldr	r1, [r4, #20]
   34c68:	clz	r3, r3
   34c6c:	lsr	r3, r3, #5
   34c70:	add	r2, r1, r3
   34c74:	add	r2, r2, #1
   34c78:	str	r2, [r4, #20]
   34c7c:	strb	ip, [r1, r3]
   34c80:	ldr	r3, [r4, #20]
   34c84:	strb	r0, [r3]
   34c88:	ldrb	r3, [r4, #25]
   34c8c:	ldr	r2, [r4, #20]
   34c90:	ldrb	r0, [r4, #27]
   34c94:	adds	r3, r3, #0
   34c98:	movne	r3, #1
   34c9c:	add	r1, r2, r3
   34ca0:	cmp	r0, #0
   34ca4:	str	r1, [r4, #20]
   34ca8:	beq	34d10 <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   34cac:	cmp	r5, #0
   34cb0:	lsr	r6, r5, #31
   34cb4:	uxth	r0, r5
   34cb8:	bge	34cd0 <flatcc_json_printer_int16_enum_field@@Base+0x178>
   34cbc:	rsb	r0, r0, #0
   34cc0:	mov	ip, #45	; 0x2d
   34cc4:	add	r1, r1, #1
   34cc8:	uxth	r0, r0
   34ccc:	strb	ip, [r2, r3]
   34cd0:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   34cd4:	ldr	r3, [r4, #20]
   34cd8:	add	r0, r6, r0
   34cdc:	add	r3, r3, r0
   34ce0:	str	r3, [r4, #20]
   34ce4:	ldrd	r4, [sp]
   34ce8:	ldrd	r6, [sp, #8]
   34cec:	ldrd	r8, [sp, #16]
   34cf0:	ldr	sl, [sp, #24]
   34cf4:	add	sp, sp, #28
   34cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   34cfc:	ldrb	r2, [r0, #29]
   34d00:	cmp	r2, #0
   34d04:	beq	34ce4 <flatcc_json_printer_int16_enum_field@@Base+0x18c>
   34d08:	mov	r5, lr
   34d0c:	b	34bb4 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   34d10:	mov	r1, r5
   34d14:	mov	r0, r4
   34d18:	ldrd	r4, [sp]
   34d1c:	mov	r3, r6
   34d20:	ldrd	r6, [sp, #8]
   34d24:	ldrd	r8, [sp, #16]
   34d28:	ldr	sl, [sp, #24]
   34d2c:	ldr	lr, [sp, #28]
   34d30:	add	sp, sp, #32
   34d34:	bx	r3
   34d38:	mov	r2, r7
   34d3c:	mov	r1, r8
   34d40:	mov	r0, r4
   34d44:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34d48:	ldr	r7, [r4, #20]
   34d4c:	b	34c50 <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   34d50:	add	r1, r2, #1
   34d54:	mov	r3, #10
   34d58:	str	r1, [r0, #20]
   34d5c:	strb	r3, [r2]
   34d60:	ldrb	r3, [r0, #25]
   34d64:	ldr	r2, [r4, #32]
   34d68:	ldr	r1, [r0, #16]
   34d6c:	ldr	r0, [r0, #20]
   34d70:	mul	r9, r2, r3
   34d74:	add	r3, r0, r9
   34d78:	cmp	r1, r3
   34d7c:	bcs	34d94 <flatcc_json_printer_int16_enum_field@@Base+0x23c>
   34d80:	mov	r1, r9
   34d84:	mov	r0, r4
   34d88:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34d8c:	ldr	r2, [r4, #20]
   34d90:	b	34c0c <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   34d94:	mov	r2, r9
   34d98:	mov	r1, #32
   34d9c:	bl	14594 <memset@plt>
   34da0:	ldr	r2, [r4, #20]
   34da4:	add	r2, r2, r9
   34da8:	str	r2, [r4, #20]
   34dac:	b	34c0c <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   34db0:	ldrb	r2, [r0, #28]
   34db4:	cmp	r2, #0
   34db8:	beq	34bb4 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   34dbc:	b	34ce4 <flatcc_json_printer_int16_enum_field@@Base+0x18c>

00034dc0 <flatcc_json_printer_int32_enum_field@@Base>:
   34dc0:	ldr	ip, [r1, #8]
   34dc4:	add	r2, r2, #2
   34dc8:	lsl	r2, r2, #1
   34dcc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34dd0:	strd	r6, [sp, #8]
   34dd4:	strd	r8, [sp, #16]
   34dd8:	str	sl, [sp, #24]
   34ddc:	cmp	r2, ip
   34de0:	str	lr, [sp, #28]
   34de4:	ldr	r6, [sp, #32]
   34de8:	ldr	lr, [sp, #36]	; 0x24
   34dec:	ldr	r5, [sp, #40]	; 0x28
   34df0:	bge	34f60 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   34df4:	ldr	ip, [r1, #4]
   34df8:	ldrh	r2, [ip, r2]
   34dfc:	cmp	r2, #0
   34e00:	beq	34f60 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   34e04:	ldr	ip, [r1]
   34e08:	cmn	ip, r2
   34e0c:	beq	34f60 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   34e10:	ldr	r7, [ip, r2]
   34e14:	cmp	lr, r7
   34e18:	beq	35014 <flatcc_json_printer_int32_enum_field@@Base+0x254>
   34e1c:	ldr	ip, [r1, #16]
   34e20:	ldr	r2, [r0, #20]
   34e24:	cmp	ip, #0
   34e28:	add	ip, ip, #1
   34e2c:	str	ip, [r1, #16]
   34e30:	beq	34e48 <flatcc_json_printer_int32_enum_field@@Base+0x88>
   34e34:	add	ip, r2, #1
   34e38:	mov	r1, #44	; 0x2c
   34e3c:	str	ip, [r0, #20]
   34e40:	strb	r1, [r2]
   34e44:	ldr	r2, [r0, #20]
   34e48:	mov	r8, r3
   34e4c:	mov	r4, r0
   34e50:	ldrb	r1, [r0, #25]
   34e54:	cmp	r1, #0
   34e58:	bne	34fb4 <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   34e5c:	ldr	r3, [r0, #16]
   34e60:	cmp	r3, r2
   34e64:	bhi	34e74 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   34e68:	ldr	r3, [r0, #44]	; 0x2c
   34e6c:	blx	r3
   34e70:	ldr	r2, [r4, #20]
   34e74:	mov	r3, #34	; 0x22
   34e78:	strb	r3, [r2]
   34e7c:	ldrb	r3, [r4, #26]
   34e80:	ldr	r2, [r4, #16]
   34e84:	ldr	r0, [r4, #20]
   34e88:	cmp	r3, #0
   34e8c:	addeq	r0, r0, #1
   34e90:	add	r3, r0, r6
   34e94:	cmp	r2, r3
   34e98:	str	r0, [r4, #20]
   34e9c:	bls	34f9c <flatcc_json_printer_int32_enum_field@@Base+0x1dc>
   34ea0:	mov	r2, r6
   34ea4:	mov	r1, r8
   34ea8:	bl	1451c <memcpy@plt>
   34eac:	ldr	r3, [r4, #20]
   34eb0:	add	r6, r3, r6
   34eb4:	str	r6, [r4, #20]
   34eb8:	mov	r3, #34	; 0x22
   34ebc:	mov	ip, #58	; 0x3a
   34ec0:	mov	r0, #32
   34ec4:	strb	r3, [r6]
   34ec8:	ldrb	r3, [r4, #26]
   34ecc:	ldr	r1, [r4, #20]
   34ed0:	clz	r3, r3
   34ed4:	lsr	r3, r3, #5
   34ed8:	add	r2, r1, r3
   34edc:	add	r2, r2, #1
   34ee0:	str	r2, [r4, #20]
   34ee4:	strb	ip, [r1, r3]
   34ee8:	ldr	r3, [r4, #20]
   34eec:	strb	r0, [r3]
   34ef0:	ldrb	r3, [r4, #25]
   34ef4:	ldr	r2, [r4, #20]
   34ef8:	ldrb	r0, [r4, #27]
   34efc:	adds	r3, r3, #0
   34f00:	movne	r3, #1
   34f04:	add	r1, r2, r3
   34f08:	cmp	r0, #0
   34f0c:	str	r1, [r4, #20]
   34f10:	beq	34f74 <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   34f14:	cmp	r7, #0
   34f18:	lsr	r5, r7, #31
   34f1c:	bge	34f30 <flatcc_json_printer_int32_enum_field@@Base+0x170>
   34f20:	mov	r0, #45	; 0x2d
   34f24:	rsb	r7, r7, #0
   34f28:	add	r1, r1, #1
   34f2c:	strb	r0, [r2, r3]
   34f30:	mov	r0, r7
   34f34:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   34f38:	ldr	r3, [r4, #20]
   34f3c:	add	r0, r5, r0
   34f40:	add	r3, r3, r0
   34f44:	str	r3, [r4, #20]
   34f48:	ldrd	r4, [sp]
   34f4c:	ldrd	r6, [sp, #8]
   34f50:	ldrd	r8, [sp, #16]
   34f54:	ldr	sl, [sp, #24]
   34f58:	add	sp, sp, #28
   34f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   34f60:	ldrb	r2, [r0, #29]
   34f64:	cmp	r2, #0
   34f68:	beq	34f48 <flatcc_json_printer_int32_enum_field@@Base+0x188>
   34f6c:	mov	r7, lr
   34f70:	b	34e1c <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   34f74:	mov	r1, r7
   34f78:	mov	r0, r4
   34f7c:	ldrd	r6, [sp, #8]
   34f80:	mov	r3, r5
   34f84:	ldrd	r4, [sp]
   34f88:	ldrd	r8, [sp, #16]
   34f8c:	ldr	sl, [sp, #24]
   34f90:	ldr	lr, [sp, #28]
   34f94:	add	sp, sp, #32
   34f98:	bx	r3
   34f9c:	mov	r2, r6
   34fa0:	mov	r1, r8
   34fa4:	mov	r0, r4
   34fa8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   34fac:	ldr	r6, [r4, #20]
   34fb0:	b	34eb8 <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   34fb4:	add	r1, r2, #1
   34fb8:	mov	r3, #10
   34fbc:	str	r1, [r0, #20]
   34fc0:	strb	r3, [r2]
   34fc4:	ldrb	r3, [r0, #25]
   34fc8:	ldr	r2, [r4, #32]
   34fcc:	ldr	r1, [r0, #16]
   34fd0:	ldr	r0, [r0, #20]
   34fd4:	mul	r9, r2, r3
   34fd8:	add	r3, r0, r9
   34fdc:	cmp	r1, r3
   34fe0:	bcs	34ff8 <flatcc_json_printer_int32_enum_field@@Base+0x238>
   34fe4:	mov	r1, r9
   34fe8:	mov	r0, r4
   34fec:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34ff0:	ldr	r2, [r4, #20]
   34ff4:	b	34e74 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   34ff8:	mov	r2, r9
   34ffc:	mov	r1, #32
   35000:	bl	14594 <memset@plt>
   35004:	ldr	r2, [r4, #20]
   35008:	add	r2, r2, r9
   3500c:	str	r2, [r4, #20]
   35010:	b	34e74 <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   35014:	ldrb	r2, [r0, #28]
   35018:	cmp	r2, #0
   3501c:	beq	34e1c <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   35020:	b	34f48 <flatcc_json_printer_int32_enum_field@@Base+0x188>

00035024 <flatcc_json_printer_int64_enum_field@@Base>:
   35024:	ldr	ip, [r1, #8]
   35028:	add	r2, r2, #2
   3502c:	lsl	r2, r2, #1
   35030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35034:	strd	r6, [sp, #8]
   35038:	strd	r8, [sp, #16]
   3503c:	strd	sl, [sp, #24]
   35040:	cmp	r2, ip
   35044:	str	lr, [sp, #32]
   35048:	sub	sp, sp, #4
   3504c:	ldr	r8, [sp, #40]	; 0x28
   35050:	ldrd	sl, [sp, #48]	; 0x30
   35054:	ldr	r5, [sp, #56]	; 0x38
   35058:	bge	351dc <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   3505c:	ldr	ip, [r1, #4]
   35060:	ldrh	r2, [ip, r2]
   35064:	cmp	r2, #0
   35068:	beq	351dc <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   3506c:	ldr	ip, [r1]
   35070:	cmn	ip, r2
   35074:	beq	351dc <flatcc_json_printer_int64_enum_field@@Base+0x1b8>
   35078:	ldrd	r6, [ip, r2]
   3507c:	cmp	fp, r7
   35080:	cmpeq	sl, r6
   35084:	beq	3529c <flatcc_json_printer_int64_enum_field@@Base+0x278>
   35088:	ldr	ip, [r1, #16]
   3508c:	ldr	r2, [r0, #20]
   35090:	cmp	ip, #0
   35094:	add	ip, ip, #1
   35098:	str	ip, [r1, #16]
   3509c:	beq	350b4 <flatcc_json_printer_int64_enum_field@@Base+0x90>
   350a0:	add	ip, r2, #1
   350a4:	mov	r1, #44	; 0x2c
   350a8:	str	ip, [r0, #20]
   350ac:	strb	r1, [r2]
   350b0:	ldr	r2, [r0, #20]
   350b4:	mov	r9, r3
   350b8:	mov	r4, r0
   350bc:	ldrb	r1, [r0, #25]
   350c0:	cmp	r1, #0
   350c4:	bne	3523c <flatcc_json_printer_int64_enum_field@@Base+0x218>
   350c8:	ldr	r3, [r0, #16]
   350cc:	cmp	r3, r2
   350d0:	bhi	350e0 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   350d4:	ldr	r3, [r0, #44]	; 0x2c
   350d8:	blx	r3
   350dc:	ldr	r2, [r4, #20]
   350e0:	mov	r3, #34	; 0x22
   350e4:	strb	r3, [r2]
   350e8:	ldrb	r3, [r4, #26]
   350ec:	ldr	r2, [r4, #16]
   350f0:	ldr	r0, [r4, #20]
   350f4:	cmp	r3, #0
   350f8:	addeq	r0, r0, #1
   350fc:	add	r3, r0, r8
   35100:	cmp	r2, r3
   35104:	str	r0, [r4, #20]
   35108:	bls	35224 <flatcc_json_printer_int64_enum_field@@Base+0x200>
   3510c:	mov	r2, r8
   35110:	mov	r1, r9
   35114:	bl	1451c <memcpy@plt>
   35118:	ldr	r3, [r4, #20]
   3511c:	add	r8, r3, r8
   35120:	str	r8, [r4, #20]
   35124:	mov	r3, #34	; 0x22
   35128:	mov	ip, #58	; 0x3a
   3512c:	mov	r0, #32
   35130:	strb	r3, [r8]
   35134:	ldrb	r3, [r4, #26]
   35138:	ldr	r1, [r4, #20]
   3513c:	clz	r3, r3
   35140:	lsr	r3, r3, #5
   35144:	add	r2, r1, r3
   35148:	add	r2, r2, #1
   3514c:	str	r2, [r4, #20]
   35150:	strb	ip, [r1, r3]
   35154:	ldr	r3, [r4, #20]
   35158:	strb	r0, [r3]
   3515c:	ldrb	r3, [r4, #25]
   35160:	ldr	r1, [r4, #20]
   35164:	ldrb	r0, [r4, #27]
   35168:	adds	r3, r3, #0
   3516c:	movne	r3, #1
   35170:	add	r2, r1, r3
   35174:	cmp	r0, #0
   35178:	str	r2, [r4, #20]
   3517c:	beq	351f4 <flatcc_json_printer_int64_enum_field@@Base+0x1d0>
   35180:	cmp	r6, #0
   35184:	lsr	r5, r7, #31
   35188:	sbcs	r0, r7, #0
   3518c:	bge	351a4 <flatcc_json_printer_int64_enum_field@@Base+0x180>
   35190:	rsbs	r6, r6, #0
   35194:	mov	r0, #45	; 0x2d
   35198:	rsc	r7, r7, #0
   3519c:	add	r2, r2, #1
   351a0:	strb	r0, [r1, r3]
   351a4:	mov	r0, r6
   351a8:	mov	r1, r7
   351ac:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   351b0:	ldr	r3, [r4, #20]
   351b4:	add	r0, r5, r0
   351b8:	add	r3, r3, r0
   351bc:	str	r3, [r4, #20]
   351c0:	add	sp, sp, #4
   351c4:	ldrd	r4, [sp]
   351c8:	ldrd	r6, [sp, #8]
   351cc:	ldrd	r8, [sp, #16]
   351d0:	ldrd	sl, [sp, #24]
   351d4:	add	sp, sp, #32
   351d8:	pop	{pc}		; (ldr pc, [sp], #4)
   351dc:	ldrb	r2, [r0, #29]
   351e0:	cmp	r2, #0
   351e4:	beq	351c0 <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   351e8:	mov	r6, sl
   351ec:	mov	r7, fp
   351f0:	b	35088 <flatcc_json_printer_int64_enum_field@@Base+0x64>
   351f4:	mov	r2, r6
   351f8:	mov	r3, r7
   351fc:	mov	r0, r4
   35200:	mov	r1, r5
   35204:	add	sp, sp, #4
   35208:	ldrd	r4, [sp]
   3520c:	ldrd	r6, [sp, #8]
   35210:	ldrd	r8, [sp, #16]
   35214:	ldrd	sl, [sp, #24]
   35218:	ldr	lr, [sp, #32]
   3521c:	add	sp, sp, #36	; 0x24
   35220:	bx	r1
   35224:	mov	r2, r8
   35228:	mov	r1, r9
   3522c:	mov	r0, r4
   35230:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35234:	ldr	r8, [r4, #20]
   35238:	b	35124 <flatcc_json_printer_int64_enum_field@@Base+0x100>
   3523c:	add	r1, r2, #1
   35240:	mov	r3, #10
   35244:	str	r1, [r0, #20]
   35248:	strb	r3, [r2]
   3524c:	ldrb	r3, [r0, #25]
   35250:	ldr	r2, [r4, #32]
   35254:	ldr	r1, [r0, #16]
   35258:	ldr	r0, [r0, #20]
   3525c:	mul	sl, r2, r3
   35260:	add	r3, r0, sl
   35264:	cmp	r1, r3
   35268:	bcs	35280 <flatcc_json_printer_int64_enum_field@@Base+0x25c>
   3526c:	mov	r1, sl
   35270:	mov	r0, r4
   35274:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35278:	ldr	r2, [r4, #20]
   3527c:	b	350e0 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   35280:	mov	r2, sl
   35284:	mov	r1, #32
   35288:	bl	14594 <memset@plt>
   3528c:	ldr	r2, [r4, #20]
   35290:	add	r2, r2, sl
   35294:	str	r2, [r4, #20]
   35298:	b	350e0 <flatcc_json_printer_int64_enum_field@@Base+0xbc>
   3529c:	ldrb	r2, [r0, #28]
   352a0:	cmp	r2, #0
   352a4:	beq	35088 <flatcc_json_printer_int64_enum_field@@Base+0x64>
   352a8:	b	351c0 <flatcc_json_printer_int64_enum_field@@Base+0x19c>

000352ac <flatcc_json_printer_bool_enum_field@@Base>:
   352ac:	ldr	ip, [r1, #8]
   352b0:	add	r2, r2, #2
   352b4:	lsl	r2, r2, #1
   352b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   352bc:	strd	r6, [sp, #8]
   352c0:	strd	r8, [sp, #16]
   352c4:	str	sl, [sp, #24]
   352c8:	cmp	r2, ip
   352cc:	str	lr, [sp, #28]
   352d0:	ldrb	lr, [sp, #36]	; 0x24
   352d4:	ldr	r7, [sp, #32]
   352d8:	ldr	r5, [sp, #40]	; 0x28
   352dc:	bge	35424 <flatcc_json_printer_bool_enum_field@@Base+0x178>
   352e0:	ldr	ip, [r1, #4]
   352e4:	ldrh	r2, [ip, r2]
   352e8:	cmp	r2, #0
   352ec:	beq	35424 <flatcc_json_printer_bool_enum_field@@Base+0x178>
   352f0:	ldr	ip, [r1]
   352f4:	cmn	ip, r2
   352f8:	beq	35424 <flatcc_json_printer_bool_enum_field@@Base+0x178>
   352fc:	ldrb	r6, [ip, r2]
   35300:	cmp	lr, r6
   35304:	beq	354dc <flatcc_json_printer_bool_enum_field@@Base+0x230>
   35308:	ldr	ip, [r1, #16]
   3530c:	ldr	r2, [r0, #20]
   35310:	cmp	ip, #0
   35314:	add	ip, ip, #1
   35318:	str	ip, [r1, #16]
   3531c:	beq	35334 <flatcc_json_printer_bool_enum_field@@Base+0x88>
   35320:	add	ip, r2, #1
   35324:	mov	r1, #44	; 0x2c
   35328:	str	ip, [r0, #20]
   3532c:	strb	r1, [r2]
   35330:	ldr	r2, [r0, #20]
   35334:	mov	r8, r3
   35338:	mov	r4, r0
   3533c:	ldrb	r1, [r0, #25]
   35340:	cmp	r1, #0
   35344:	bne	3547c <flatcc_json_printer_bool_enum_field@@Base+0x1d0>
   35348:	ldr	r3, [r0, #16]
   3534c:	cmp	r3, r2
   35350:	bhi	35360 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   35354:	ldr	r3, [r0, #44]	; 0x2c
   35358:	blx	r3
   3535c:	ldr	r2, [r4, #20]
   35360:	mov	r3, #34	; 0x22
   35364:	strb	r3, [r2]
   35368:	ldrb	r3, [r4, #26]
   3536c:	ldr	r2, [r4, #16]
   35370:	ldr	r0, [r4, #20]
   35374:	cmp	r3, #0
   35378:	addeq	r0, r0, #1
   3537c:	add	r3, r0, r7
   35380:	cmp	r2, r3
   35384:	str	r0, [r4, #20]
   35388:	bls	35464 <flatcc_json_printer_bool_enum_field@@Base+0x1b8>
   3538c:	mov	r2, r7
   35390:	mov	r1, r8
   35394:	bl	1451c <memcpy@plt>
   35398:	ldr	r3, [r4, #20]
   3539c:	add	r7, r3, r7
   353a0:	str	r7, [r4, #20]
   353a4:	mov	r3, #34	; 0x22
   353a8:	mov	ip, #58	; 0x3a
   353ac:	mov	r0, #32
   353b0:	strb	r3, [r7]
   353b4:	ldrb	r3, [r4, #26]
   353b8:	ldr	r1, [r4, #20]
   353bc:	clz	r3, r3
   353c0:	lsr	r3, r3, #5
   353c4:	add	r2, r1, r3
   353c8:	add	r2, r2, #1
   353cc:	str	r2, [r4, #20]
   353d0:	strb	ip, [r1, r3]
   353d4:	ldr	r3, [r4, #20]
   353d8:	strb	r0, [r3]
   353dc:	ldrb	r2, [r4, #25]
   353e0:	ldr	r1, [r4, #20]
   353e4:	ldrb	r3, [r4, #27]
   353e8:	cmp	r2, #0
   353ec:	addne	r1, r1, #1
   353f0:	cmp	r3, #0
   353f4:	str	r1, [r4, #20]
   353f8:	bne	35438 <flatcc_json_printer_bool_enum_field@@Base+0x18c>
   353fc:	mov	r1, r6
   35400:	mov	r0, r4
   35404:	ldrd	r6, [sp, #8]
   35408:	mov	r3, r5
   3540c:	ldrd	r4, [sp]
   35410:	ldrd	r8, [sp, #16]
   35414:	ldr	sl, [sp, #24]
   35418:	ldr	lr, [sp, #28]
   3541c:	add	sp, sp, #32
   35420:	bx	r3
   35424:	ldrb	r2, [r0, #29]
   35428:	cmp	r2, #0
   3542c:	beq	3544c <flatcc_json_printer_bool_enum_field@@Base+0x1a0>
   35430:	mov	r6, lr
   35434:	b	35308 <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   35438:	mov	r0, r6
   3543c:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   35440:	ldr	r3, [r4, #20]
   35444:	add	r0, r3, r0
   35448:	str	r0, [r4, #20]
   3544c:	ldrd	r4, [sp]
   35450:	ldrd	r6, [sp, #8]
   35454:	ldrd	r8, [sp, #16]
   35458:	ldr	sl, [sp, #24]
   3545c:	add	sp, sp, #28
   35460:	pop	{pc}		; (ldr pc, [sp], #4)
   35464:	mov	r2, r7
   35468:	mov	r1, r8
   3546c:	mov	r0, r4
   35470:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35474:	ldr	r7, [r4, #20]
   35478:	b	353a4 <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   3547c:	add	r1, r2, #1
   35480:	mov	r3, #10
   35484:	str	r1, [r0, #20]
   35488:	strb	r3, [r2]
   3548c:	ldrb	r3, [r0, #25]
   35490:	ldr	r2, [r4, #32]
   35494:	ldr	r1, [r0, #16]
   35498:	ldr	r0, [r0, #20]
   3549c:	mul	r9, r2, r3
   354a0:	add	r3, r0, r9
   354a4:	cmp	r1, r3
   354a8:	bcs	354c0 <flatcc_json_printer_bool_enum_field@@Base+0x214>
   354ac:	mov	r1, r9
   354b0:	mov	r0, r4
   354b4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   354b8:	ldr	r2, [r4, #20]
   354bc:	b	35360 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   354c0:	mov	r2, r9
   354c4:	mov	r1, #32
   354c8:	bl	14594 <memset@plt>
   354cc:	ldr	r2, [r4, #20]
   354d0:	add	r2, r2, r9
   354d4:	str	r2, [r4, #20]
   354d8:	b	35360 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   354dc:	ldrb	r2, [r0, #28]
   354e0:	cmp	r2, #0
   354e4:	beq	35308 <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   354e8:	b	3544c <flatcc_json_printer_bool_enum_field@@Base+0x1a0>

000354ec <flatcc_json_printer_uint8_struct_field@@Base>:
   354ec:	cmp	r1, #0
   354f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   354f4:	mov	r4, r0
   354f8:	strd	r6, [sp, #8]
   354fc:	str	r8, [sp, #16]
   35500:	str	lr, [sp, #20]
   35504:	ldrb	r5, [r2, r3]
   35508:	ldr	r2, [r0, #20]
   3550c:	ldr	r6, [sp, #28]
   35510:	beq	35528 <flatcc_json_printer_uint8_struct_field@@Base+0x3c>
   35514:	add	r1, r2, #1
   35518:	mov	r3, #44	; 0x2c
   3551c:	str	r1, [r0, #20]
   35520:	strb	r3, [r2]
   35524:	ldr	r2, [r0, #20]
   35528:	ldrb	r1, [r4, #25]
   3552c:	cmp	r1, #0
   35530:	bne	3561c <flatcc_json_printer_uint8_struct_field@@Base+0x130>
   35534:	ldr	r3, [r4, #16]
   35538:	cmp	r3, r2
   3553c:	bhi	35550 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35540:	mov	r0, r4
   35544:	ldr	r3, [r4, #44]	; 0x2c
   35548:	blx	r3
   3554c:	ldr	r2, [r4, #20]
   35550:	mov	r3, #34	; 0x22
   35554:	ldr	r1, [sp, #24]
   35558:	strb	r3, [r2]
   3555c:	ldrb	r3, [r4, #26]
   35560:	ldr	r2, [r4, #16]
   35564:	ldr	r0, [r4, #20]
   35568:	cmp	r3, #0
   3556c:	addeq	r0, r0, #1
   35570:	add	r3, r0, r6
   35574:	cmp	r2, r3
   35578:	mov	r2, r6
   3557c:	str	r0, [r4, #20]
   35580:	bhi	35608 <flatcc_json_printer_uint8_struct_field@@Base+0x11c>
   35584:	mov	r0, r4
   35588:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3558c:	ldr	r2, [r4, #20]
   35590:	mov	r3, #34	; 0x22
   35594:	mov	lr, #58	; 0x3a
   35598:	mov	ip, #32
   3559c:	mov	r0, r5
   355a0:	strb	r3, [r2]
   355a4:	ldrb	r3, [r4, #26]
   355a8:	ldr	r1, [r4, #20]
   355ac:	clz	r3, r3
   355b0:	lsr	r3, r3, #5
   355b4:	add	r2, r1, r3
   355b8:	add	r2, r2, #1
   355bc:	str	r2, [r4, #20]
   355c0:	strb	lr, [r1, r3]
   355c4:	ldr	r3, [r4, #20]
   355c8:	strb	ip, [r3]
   355cc:	ldrb	r2, [r4, #25]
   355d0:	ldr	r3, [r4, #20]
   355d4:	cmp	r2, #0
   355d8:	addne	r3, r3, #1
   355dc:	mov	r1, r3
   355e0:	str	r3, [r4, #20]
   355e4:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   355e8:	ldr	r3, [r4, #20]
   355ec:	ldrd	r6, [sp, #8]
   355f0:	ldr	r8, [sp, #16]
   355f4:	add	r0, r3, r0
   355f8:	str	r0, [r4, #20]
   355fc:	ldrd	r4, [sp]
   35600:	add	sp, sp, #20
   35604:	pop	{pc}		; (ldr pc, [sp], #4)
   35608:	bl	1451c <memcpy@plt>
   3560c:	ldr	r2, [r4, #20]
   35610:	add	r2, r2, r6
   35614:	str	r2, [r4, #20]
   35618:	b	35590 <flatcc_json_printer_uint8_struct_field@@Base+0xa4>
   3561c:	add	r1, r2, #1
   35620:	mov	r3, #10
   35624:	str	r1, [r4, #20]
   35628:	strb	r3, [r2]
   3562c:	ldrb	r7, [r4, #25]
   35630:	ldr	r1, [r4, #16]
   35634:	ldr	r2, [r4, #32]
   35638:	ldr	r0, [r4, #20]
   3563c:	mul	r7, r2, r7
   35640:	add	r3, r0, r7
   35644:	cmp	r1, r3
   35648:	bcs	35660 <flatcc_json_printer_uint8_struct_field@@Base+0x174>
   3564c:	mov	r1, r7
   35650:	mov	r0, r4
   35654:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35658:	ldr	r2, [r4, #20]
   3565c:	b	35550 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35660:	mov	r2, r7
   35664:	mov	r1, #32
   35668:	bl	14594 <memset@plt>
   3566c:	ldr	r2, [r4, #20]
   35670:	add	r2, r2, r7
   35674:	str	r2, [r4, #20]
   35678:	b	35550 <flatcc_json_printer_uint8_struct_field@@Base+0x64>

0003567c <flatcc_json_printer_uint16_struct_field@@Base>:
   3567c:	cmp	r1, #0
   35680:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35684:	mov	r4, r0
   35688:	ldrh	r5, [r2, r3]
   3568c:	ldr	r2, [r0, #20]
   35690:	strd	r6, [sp, #8]
   35694:	str	r8, [sp, #16]
   35698:	str	lr, [sp, #20]
   3569c:	ldr	r6, [sp, #28]
   356a0:	beq	356b8 <flatcc_json_printer_uint16_struct_field@@Base+0x3c>
   356a4:	add	r1, r2, #1
   356a8:	mov	r3, #44	; 0x2c
   356ac:	str	r1, [r0, #20]
   356b0:	strb	r3, [r2]
   356b4:	ldr	r2, [r0, #20]
   356b8:	ldrb	r1, [r4, #25]
   356bc:	cmp	r1, #0
   356c0:	bne	357ac <flatcc_json_printer_uint16_struct_field@@Base+0x130>
   356c4:	ldr	r3, [r4, #16]
   356c8:	cmp	r3, r2
   356cc:	bhi	356e0 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   356d0:	mov	r0, r4
   356d4:	ldr	r3, [r4, #44]	; 0x2c
   356d8:	blx	r3
   356dc:	ldr	r2, [r4, #20]
   356e0:	mov	r3, #34	; 0x22
   356e4:	ldr	r1, [sp, #24]
   356e8:	strb	r3, [r2]
   356ec:	ldrb	r3, [r4, #26]
   356f0:	ldr	r2, [r4, #16]
   356f4:	ldr	r0, [r4, #20]
   356f8:	cmp	r3, #0
   356fc:	addeq	r0, r0, #1
   35700:	add	r3, r0, r6
   35704:	cmp	r2, r3
   35708:	mov	r2, r6
   3570c:	str	r0, [r4, #20]
   35710:	bhi	35798 <flatcc_json_printer_uint16_struct_field@@Base+0x11c>
   35714:	mov	r0, r4
   35718:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3571c:	ldr	r2, [r4, #20]
   35720:	mov	r3, #34	; 0x22
   35724:	mov	lr, #58	; 0x3a
   35728:	mov	ip, #32
   3572c:	mov	r0, r5
   35730:	strb	r3, [r2]
   35734:	ldrb	r3, [r4, #26]
   35738:	ldr	r1, [r4, #20]
   3573c:	clz	r3, r3
   35740:	lsr	r3, r3, #5
   35744:	add	r2, r1, r3
   35748:	add	r2, r2, #1
   3574c:	str	r2, [r4, #20]
   35750:	strb	lr, [r1, r3]
   35754:	ldr	r3, [r4, #20]
   35758:	strb	ip, [r3]
   3575c:	ldrb	r2, [r4, #25]
   35760:	ldr	r3, [r4, #20]
   35764:	cmp	r2, #0
   35768:	addne	r3, r3, #1
   3576c:	mov	r1, r3
   35770:	str	r3, [r4, #20]
   35774:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   35778:	ldr	r3, [r4, #20]
   3577c:	ldrd	r6, [sp, #8]
   35780:	ldr	r8, [sp, #16]
   35784:	add	r0, r3, r0
   35788:	str	r0, [r4, #20]
   3578c:	ldrd	r4, [sp]
   35790:	add	sp, sp, #20
   35794:	pop	{pc}		; (ldr pc, [sp], #4)
   35798:	bl	1451c <memcpy@plt>
   3579c:	ldr	r2, [r4, #20]
   357a0:	add	r2, r2, r6
   357a4:	str	r2, [r4, #20]
   357a8:	b	35720 <flatcc_json_printer_uint16_struct_field@@Base+0xa4>
   357ac:	add	r1, r2, #1
   357b0:	mov	r3, #10
   357b4:	str	r1, [r4, #20]
   357b8:	strb	r3, [r2]
   357bc:	ldrb	r7, [r4, #25]
   357c0:	ldr	r1, [r4, #16]
   357c4:	ldr	r2, [r4, #32]
   357c8:	ldr	r0, [r4, #20]
   357cc:	mul	r7, r2, r7
   357d0:	add	r3, r0, r7
   357d4:	cmp	r1, r3
   357d8:	bcs	357f0 <flatcc_json_printer_uint16_struct_field@@Base+0x174>
   357dc:	mov	r1, r7
   357e0:	mov	r0, r4
   357e4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   357e8:	ldr	r2, [r4, #20]
   357ec:	b	356e0 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   357f0:	mov	r2, r7
   357f4:	mov	r1, #32
   357f8:	bl	14594 <memset@plt>
   357fc:	ldr	r2, [r4, #20]
   35800:	add	r2, r2, r7
   35804:	str	r2, [r4, #20]
   35808:	b	356e0 <flatcc_json_printer_uint16_struct_field@@Base+0x64>

0003580c <flatcc_json_printer_uint32_struct_field@@Base>:
   3580c:	cmp	r1, #0
   35810:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35814:	mov	r4, r0
   35818:	ldr	r5, [r2, r3]
   3581c:	ldr	r2, [r0, #20]
   35820:	strd	r6, [sp, #8]
   35824:	str	r8, [sp, #16]
   35828:	str	lr, [sp, #20]
   3582c:	ldr	r6, [sp, #28]
   35830:	beq	35848 <flatcc_json_printer_uint32_struct_field@@Base+0x3c>
   35834:	add	r1, r2, #1
   35838:	mov	r3, #44	; 0x2c
   3583c:	str	r1, [r0, #20]
   35840:	strb	r3, [r2]
   35844:	ldr	r2, [r0, #20]
   35848:	ldrb	r1, [r4, #25]
   3584c:	cmp	r1, #0
   35850:	bne	3593c <flatcc_json_printer_uint32_struct_field@@Base+0x130>
   35854:	ldr	r3, [r4, #16]
   35858:	cmp	r3, r2
   3585c:	bhi	35870 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   35860:	mov	r0, r4
   35864:	ldr	r3, [r4, #44]	; 0x2c
   35868:	blx	r3
   3586c:	ldr	r2, [r4, #20]
   35870:	mov	r3, #34	; 0x22
   35874:	ldr	r1, [sp, #24]
   35878:	strb	r3, [r2]
   3587c:	ldrb	r3, [r4, #26]
   35880:	ldr	r2, [r4, #16]
   35884:	ldr	r0, [r4, #20]
   35888:	cmp	r3, #0
   3588c:	addeq	r0, r0, #1
   35890:	add	r3, r0, r6
   35894:	cmp	r2, r3
   35898:	mov	r2, r6
   3589c:	str	r0, [r4, #20]
   358a0:	bhi	35928 <flatcc_json_printer_uint32_struct_field@@Base+0x11c>
   358a4:	mov	r0, r4
   358a8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   358ac:	ldr	r2, [r4, #20]
   358b0:	mov	r3, #34	; 0x22
   358b4:	mov	lr, #58	; 0x3a
   358b8:	mov	ip, #32
   358bc:	mov	r0, r5
   358c0:	strb	r3, [r2]
   358c4:	ldrb	r3, [r4, #26]
   358c8:	ldr	r1, [r4, #20]
   358cc:	clz	r3, r3
   358d0:	lsr	r3, r3, #5
   358d4:	add	r2, r1, r3
   358d8:	add	r2, r2, #1
   358dc:	str	r2, [r4, #20]
   358e0:	strb	lr, [r1, r3]
   358e4:	ldr	r3, [r4, #20]
   358e8:	strb	ip, [r3]
   358ec:	ldrb	r2, [r4, #25]
   358f0:	ldr	r3, [r4, #20]
   358f4:	cmp	r2, #0
   358f8:	addne	r3, r3, #1
   358fc:	mov	r1, r3
   35900:	str	r3, [r4, #20]
   35904:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   35908:	ldr	r3, [r4, #20]
   3590c:	ldrd	r6, [sp, #8]
   35910:	ldr	r8, [sp, #16]
   35914:	add	r0, r3, r0
   35918:	str	r0, [r4, #20]
   3591c:	ldrd	r4, [sp]
   35920:	add	sp, sp, #20
   35924:	pop	{pc}		; (ldr pc, [sp], #4)
   35928:	bl	1451c <memcpy@plt>
   3592c:	ldr	r2, [r4, #20]
   35930:	add	r2, r2, r6
   35934:	str	r2, [r4, #20]
   35938:	b	358b0 <flatcc_json_printer_uint32_struct_field@@Base+0xa4>
   3593c:	add	r1, r2, #1
   35940:	mov	r3, #10
   35944:	str	r1, [r4, #20]
   35948:	strb	r3, [r2]
   3594c:	ldrb	r7, [r4, #25]
   35950:	ldr	r1, [r4, #16]
   35954:	ldr	r2, [r4, #32]
   35958:	ldr	r0, [r4, #20]
   3595c:	mul	r7, r2, r7
   35960:	add	r3, r0, r7
   35964:	cmp	r1, r3
   35968:	bcs	35980 <flatcc_json_printer_uint32_struct_field@@Base+0x174>
   3596c:	mov	r1, r7
   35970:	mov	r0, r4
   35974:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35978:	ldr	r2, [r4, #20]
   3597c:	b	35870 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   35980:	mov	r2, r7
   35984:	mov	r1, #32
   35988:	bl	14594 <memset@plt>
   3598c:	ldr	r2, [r4, #20]
   35990:	add	r2, r2, r7
   35994:	str	r2, [r4, #20]
   35998:	b	35870 <flatcc_json_printer_uint32_struct_field@@Base+0x64>

0003599c <flatcc_json_printer_uint64_struct_field@@Base>:
   3599c:	cmp	r1, #0
   359a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   359a4:	mov	r4, r0
   359a8:	strd	r6, [sp, #8]
   359ac:	str	r8, [sp, #16]
   359b0:	str	lr, [sp, #20]
   359b4:	ldrd	r6, [r2, r3]
   359b8:	ldr	r2, [r0, #20]
   359bc:	ldr	r5, [sp, #28]
   359c0:	beq	359d8 <flatcc_json_printer_uint64_struct_field@@Base+0x3c>
   359c4:	add	r1, r2, #1
   359c8:	mov	r3, #44	; 0x2c
   359cc:	str	r1, [r0, #20]
   359d0:	strb	r3, [r2]
   359d4:	ldr	r2, [r0, #20]
   359d8:	ldrb	r1, [r4, #25]
   359dc:	cmp	r1, #0
   359e0:	bne	35ad0 <flatcc_json_printer_uint64_struct_field@@Base+0x134>
   359e4:	ldr	r3, [r4, #16]
   359e8:	cmp	r3, r2
   359ec:	bhi	35a00 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   359f0:	mov	r0, r4
   359f4:	ldr	r3, [r4, #44]	; 0x2c
   359f8:	blx	r3
   359fc:	ldr	r2, [r4, #20]
   35a00:	mov	r3, #34	; 0x22
   35a04:	ldr	r1, [sp, #24]
   35a08:	strb	r3, [r2]
   35a0c:	ldrb	r3, [r4, #26]
   35a10:	ldr	r2, [r4, #16]
   35a14:	ldr	r0, [r4, #20]
   35a18:	cmp	r3, #0
   35a1c:	addeq	r0, r0, #1
   35a20:	add	r3, r0, r5
   35a24:	cmp	r2, r3
   35a28:	mov	r2, r5
   35a2c:	str	r0, [r4, #20]
   35a30:	bhi	35abc <flatcc_json_printer_uint64_struct_field@@Base+0x120>
   35a34:	mov	r0, r4
   35a38:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35a3c:	ldr	r2, [r4, #20]
   35a40:	mov	r3, #34	; 0x22
   35a44:	mov	r5, #58	; 0x3a
   35a48:	mov	lr, #32
   35a4c:	mov	r0, r6
   35a50:	strb	r3, [r2]
   35a54:	mov	r1, r7
   35a58:	ldrb	r3, [r4, #26]
   35a5c:	ldr	ip, [r4, #20]
   35a60:	clz	r3, r3
   35a64:	lsr	r3, r3, #5
   35a68:	add	r2, ip, r3
   35a6c:	add	r2, r2, #1
   35a70:	str	r2, [r4, #20]
   35a74:	strb	r5, [ip, r3]
   35a78:	ldr	r3, [r4, #20]
   35a7c:	strb	lr, [r3]
   35a80:	ldrb	r2, [r4, #25]
   35a84:	ldr	r3, [r4, #20]
   35a88:	cmp	r2, #0
   35a8c:	addne	r3, r3, #1
   35a90:	mov	r2, r3
   35a94:	str	r3, [r4, #20]
   35a98:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   35a9c:	ldr	r3, [r4, #20]
   35aa0:	ldrd	r6, [sp, #8]
   35aa4:	ldr	r8, [sp, #16]
   35aa8:	add	r0, r3, r0
   35aac:	str	r0, [r4, #20]
   35ab0:	ldrd	r4, [sp]
   35ab4:	add	sp, sp, #20
   35ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   35abc:	bl	1451c <memcpy@plt>
   35ac0:	ldr	r2, [r4, #20]
   35ac4:	add	r2, r2, r5
   35ac8:	str	r2, [r4, #20]
   35acc:	b	35a40 <flatcc_json_printer_uint64_struct_field@@Base+0xa4>
   35ad0:	add	r1, r2, #1
   35ad4:	mov	r3, #10
   35ad8:	str	r1, [r4, #20]
   35adc:	strb	r3, [r2]
   35ae0:	ldrb	r8, [r4, #25]
   35ae4:	ldr	r1, [r4, #16]
   35ae8:	ldr	r2, [r4, #32]
   35aec:	ldr	r0, [r4, #20]
   35af0:	mul	r8, r2, r8
   35af4:	add	r3, r0, r8
   35af8:	cmp	r1, r3
   35afc:	bcs	35b14 <flatcc_json_printer_uint64_struct_field@@Base+0x178>
   35b00:	mov	r1, r8
   35b04:	mov	r0, r4
   35b08:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35b0c:	ldr	r2, [r4, #20]
   35b10:	b	35a00 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   35b14:	mov	r2, r8
   35b18:	mov	r1, #32
   35b1c:	bl	14594 <memset@plt>
   35b20:	ldr	r2, [r4, #20]
   35b24:	add	r2, r2, r8
   35b28:	str	r2, [r4, #20]
   35b2c:	b	35a00 <flatcc_json_printer_uint64_struct_field@@Base+0x64>

00035b30 <flatcc_json_printer_int8_struct_field@@Base>:
   35b30:	cmp	r1, #0
   35b34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35b38:	mov	r4, r0
   35b3c:	strd	r6, [sp, #8]
   35b40:	str	r8, [sp, #16]
   35b44:	str	lr, [sp, #20]
   35b48:	ldrsb	r5, [r2, r3]
   35b4c:	ldr	r2, [r0, #20]
   35b50:	ldr	r6, [sp, #28]
   35b54:	beq	35b6c <flatcc_json_printer_int8_struct_field@@Base+0x3c>
   35b58:	add	r1, r2, #1
   35b5c:	mov	r3, #44	; 0x2c
   35b60:	str	r1, [r0, #20]
   35b64:	strb	r3, [r2]
   35b68:	ldr	r2, [r0, #20]
   35b6c:	ldrb	r1, [r4, #25]
   35b70:	cmp	r1, #0
   35b74:	bne	35c84 <flatcc_json_printer_int8_struct_field@@Base+0x154>
   35b78:	ldr	r3, [r4, #16]
   35b7c:	cmp	r3, r2
   35b80:	bhi	35b94 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   35b84:	mov	r0, r4
   35b88:	ldr	r3, [r4, #44]	; 0x2c
   35b8c:	blx	r3
   35b90:	ldr	r2, [r4, #20]
   35b94:	mov	r3, #34	; 0x22
   35b98:	ldr	r1, [sp, #24]
   35b9c:	strb	r3, [r2]
   35ba0:	ldrb	r3, [r4, #26]
   35ba4:	ldr	r2, [r4, #16]
   35ba8:	ldr	r0, [r4, #20]
   35bac:	cmp	r3, #0
   35bb0:	addeq	r0, r0, #1
   35bb4:	add	r3, r0, r6
   35bb8:	cmp	r2, r3
   35bbc:	mov	r2, r6
   35bc0:	str	r0, [r4, #20]
   35bc4:	bhi	35c70 <flatcc_json_printer_int8_struct_field@@Base+0x140>
   35bc8:	mov	r0, r4
   35bcc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35bd0:	ldr	r2, [r4, #20]
   35bd4:	mov	r3, #34	; 0x22
   35bd8:	mov	lr, #58	; 0x3a
   35bdc:	lsr	r6, r5, #31
   35be0:	mov	ip, #32
   35be4:	uxtb	r0, r5
   35be8:	strb	r3, [r2]
   35bec:	ldrb	r3, [r4, #26]
   35bf0:	ldr	r1, [r4, #20]
   35bf4:	clz	r3, r3
   35bf8:	lsr	r3, r3, #5
   35bfc:	add	r2, r1, r3
   35c00:	add	r2, r2, #1
   35c04:	str	r2, [r4, #20]
   35c08:	strb	lr, [r1, r3]
   35c0c:	ldr	r3, [r4, #20]
   35c10:	strb	ip, [r3]
   35c14:	ldrb	r3, [r4, #25]
   35c18:	ldr	r2, [r4, #20]
   35c1c:	adds	r3, r3, #0
   35c20:	movne	r3, #1
   35c24:	cmp	r5, #0
   35c28:	add	r1, r2, r3
   35c2c:	str	r1, [r4, #20]
   35c30:	bge	35c48 <flatcc_json_printer_int8_struct_field@@Base+0x118>
   35c34:	rsb	r0, r0, #0
   35c38:	mov	ip, #45	; 0x2d
   35c3c:	add	r1, r1, #1
   35c40:	uxtb	r0, r0
   35c44:	strb	ip, [r2, r3]
   35c48:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   35c4c:	ldr	r3, [r4, #20]
   35c50:	add	r0, r6, r0
   35c54:	ldrd	r6, [sp, #8]
   35c58:	ldr	r8, [sp, #16]
   35c5c:	add	r3, r3, r0
   35c60:	str	r3, [r4, #20]
   35c64:	ldrd	r4, [sp]
   35c68:	add	sp, sp, #20
   35c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   35c70:	bl	1451c <memcpy@plt>
   35c74:	ldr	r2, [r4, #20]
   35c78:	add	r2, r2, r6
   35c7c:	str	r2, [r4, #20]
   35c80:	b	35bd4 <flatcc_json_printer_int8_struct_field@@Base+0xa4>
   35c84:	add	r1, r2, #1
   35c88:	mov	r3, #10
   35c8c:	str	r1, [r4, #20]
   35c90:	strb	r3, [r2]
   35c94:	ldrb	r7, [r4, #25]
   35c98:	ldr	r1, [r4, #16]
   35c9c:	ldr	r2, [r4, #32]
   35ca0:	ldr	r0, [r4, #20]
   35ca4:	mul	r7, r2, r7
   35ca8:	add	r3, r0, r7
   35cac:	cmp	r1, r3
   35cb0:	bcs	35cc8 <flatcc_json_printer_int8_struct_field@@Base+0x198>
   35cb4:	mov	r1, r7
   35cb8:	mov	r0, r4
   35cbc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35cc0:	ldr	r2, [r4, #20]
   35cc4:	b	35b94 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   35cc8:	mov	r2, r7
   35ccc:	mov	r1, #32
   35cd0:	bl	14594 <memset@plt>
   35cd4:	ldr	r2, [r4, #20]
   35cd8:	add	r2, r2, r7
   35cdc:	str	r2, [r4, #20]
   35ce0:	b	35b94 <flatcc_json_printer_int8_struct_field@@Base+0x64>

00035ce4 <flatcc_json_printer_int16_struct_field@@Base>:
   35ce4:	cmp	r1, #0
   35ce8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35cec:	mov	r4, r0
   35cf0:	ldrsh	r5, [r2, r3]
   35cf4:	ldr	r2, [r0, #20]
   35cf8:	strd	r6, [sp, #8]
   35cfc:	str	r8, [sp, #16]
   35d00:	str	lr, [sp, #20]
   35d04:	ldr	r6, [sp, #28]
   35d08:	beq	35d20 <flatcc_json_printer_int16_struct_field@@Base+0x3c>
   35d0c:	add	r1, r2, #1
   35d10:	mov	r3, #44	; 0x2c
   35d14:	str	r1, [r0, #20]
   35d18:	strb	r3, [r2]
   35d1c:	ldr	r2, [r0, #20]
   35d20:	ldrb	r1, [r4, #25]
   35d24:	cmp	r1, #0
   35d28:	bne	35e38 <flatcc_json_printer_int16_struct_field@@Base+0x154>
   35d2c:	ldr	r3, [r4, #16]
   35d30:	cmp	r3, r2
   35d34:	bhi	35d48 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   35d38:	mov	r0, r4
   35d3c:	ldr	r3, [r4, #44]	; 0x2c
   35d40:	blx	r3
   35d44:	ldr	r2, [r4, #20]
   35d48:	mov	r3, #34	; 0x22
   35d4c:	ldr	r1, [sp, #24]
   35d50:	strb	r3, [r2]
   35d54:	ldrb	r3, [r4, #26]
   35d58:	ldr	r2, [r4, #16]
   35d5c:	ldr	r0, [r4, #20]
   35d60:	cmp	r3, #0
   35d64:	addeq	r0, r0, #1
   35d68:	add	r3, r0, r6
   35d6c:	cmp	r2, r3
   35d70:	mov	r2, r6
   35d74:	str	r0, [r4, #20]
   35d78:	bhi	35e24 <flatcc_json_printer_int16_struct_field@@Base+0x140>
   35d7c:	mov	r0, r4
   35d80:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35d84:	ldr	r2, [r4, #20]
   35d88:	mov	r3, #34	; 0x22
   35d8c:	mov	lr, #58	; 0x3a
   35d90:	lsr	r6, r5, #31
   35d94:	mov	ip, #32
   35d98:	uxth	r0, r5
   35d9c:	strb	r3, [r2]
   35da0:	ldrb	r3, [r4, #26]
   35da4:	ldr	r1, [r4, #20]
   35da8:	clz	r3, r3
   35dac:	lsr	r3, r3, #5
   35db0:	add	r2, r1, r3
   35db4:	add	r2, r2, #1
   35db8:	str	r2, [r4, #20]
   35dbc:	strb	lr, [r1, r3]
   35dc0:	ldr	r3, [r4, #20]
   35dc4:	strb	ip, [r3]
   35dc8:	ldrb	r3, [r4, #25]
   35dcc:	ldr	r2, [r4, #20]
   35dd0:	adds	r3, r3, #0
   35dd4:	movne	r3, #1
   35dd8:	cmp	r5, #0
   35ddc:	add	r1, r2, r3
   35de0:	str	r1, [r4, #20]
   35de4:	bge	35dfc <flatcc_json_printer_int16_struct_field@@Base+0x118>
   35de8:	rsb	r0, r0, #0
   35dec:	mov	ip, #45	; 0x2d
   35df0:	add	r1, r1, #1
   35df4:	uxth	r0, r0
   35df8:	strb	ip, [r2, r3]
   35dfc:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   35e00:	ldr	r3, [r4, #20]
   35e04:	add	r0, r6, r0
   35e08:	ldrd	r6, [sp, #8]
   35e0c:	ldr	r8, [sp, #16]
   35e10:	add	r3, r3, r0
   35e14:	str	r3, [r4, #20]
   35e18:	ldrd	r4, [sp]
   35e1c:	add	sp, sp, #20
   35e20:	pop	{pc}		; (ldr pc, [sp], #4)
   35e24:	bl	1451c <memcpy@plt>
   35e28:	ldr	r2, [r4, #20]
   35e2c:	add	r2, r2, r6
   35e30:	str	r2, [r4, #20]
   35e34:	b	35d88 <flatcc_json_printer_int16_struct_field@@Base+0xa4>
   35e38:	add	r1, r2, #1
   35e3c:	mov	r3, #10
   35e40:	str	r1, [r4, #20]
   35e44:	strb	r3, [r2]
   35e48:	ldrb	r7, [r4, #25]
   35e4c:	ldr	r1, [r4, #16]
   35e50:	ldr	r2, [r4, #32]
   35e54:	ldr	r0, [r4, #20]
   35e58:	mul	r7, r2, r7
   35e5c:	add	r3, r0, r7
   35e60:	cmp	r1, r3
   35e64:	bcs	35e7c <flatcc_json_printer_int16_struct_field@@Base+0x198>
   35e68:	mov	r1, r7
   35e6c:	mov	r0, r4
   35e70:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   35e74:	ldr	r2, [r4, #20]
   35e78:	b	35d48 <flatcc_json_printer_int16_struct_field@@Base+0x64>
   35e7c:	mov	r2, r7
   35e80:	mov	r1, #32
   35e84:	bl	14594 <memset@plt>
   35e88:	ldr	r2, [r4, #20]
   35e8c:	add	r2, r2, r7
   35e90:	str	r2, [r4, #20]
   35e94:	b	35d48 <flatcc_json_printer_int16_struct_field@@Base+0x64>

00035e98 <flatcc_json_printer_int32_struct_field@@Base>:
   35e98:	cmp	r1, #0
   35e9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35ea0:	mov	r4, r0
   35ea4:	ldr	r5, [r2, r3]
   35ea8:	ldr	r2, [r0, #20]
   35eac:	strd	r6, [sp, #8]
   35eb0:	str	r8, [sp, #16]
   35eb4:	str	lr, [sp, #20]
   35eb8:	ldr	r6, [sp, #28]
   35ebc:	beq	35ed4 <flatcc_json_printer_int32_struct_field@@Base+0x3c>
   35ec0:	add	r1, r2, #1
   35ec4:	mov	r3, #44	; 0x2c
   35ec8:	str	r1, [r0, #20]
   35ecc:	strb	r3, [r2]
   35ed0:	ldr	r2, [r0, #20]
   35ed4:	ldrb	r1, [r4, #25]
   35ed8:	cmp	r1, #0
   35edc:	bne	35fe8 <flatcc_json_printer_int32_struct_field@@Base+0x150>
   35ee0:	ldr	r3, [r4, #16]
   35ee4:	cmp	r3, r2
   35ee8:	bhi	35efc <flatcc_json_printer_int32_struct_field@@Base+0x64>
   35eec:	mov	r0, r4
   35ef0:	ldr	r3, [r4, #44]	; 0x2c
   35ef4:	blx	r3
   35ef8:	ldr	r2, [r4, #20]
   35efc:	mov	r3, #34	; 0x22
   35f00:	ldr	r1, [sp, #24]
   35f04:	strb	r3, [r2]
   35f08:	ldrb	r3, [r4, #26]
   35f0c:	ldr	r2, [r4, #16]
   35f10:	ldr	r0, [r4, #20]
   35f14:	cmp	r3, #0
   35f18:	addeq	r0, r0, #1
   35f1c:	add	r3, r0, r6
   35f20:	cmp	r2, r3
   35f24:	mov	r2, r6
   35f28:	str	r0, [r4, #20]
   35f2c:	bhi	35fd4 <flatcc_json_printer_int32_struct_field@@Base+0x13c>
   35f30:	mov	r0, r4
   35f34:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   35f38:	ldr	r2, [r4, #20]
   35f3c:	mov	r3, #34	; 0x22
   35f40:	mov	ip, #58	; 0x3a
   35f44:	lsr	r6, r5, #31
   35f48:	mov	r0, #32
   35f4c:	strb	r3, [r2]
   35f50:	ldrb	r3, [r4, #26]
   35f54:	ldr	r1, [r4, #20]
   35f58:	clz	r3, r3
   35f5c:	lsr	r3, r3, #5
   35f60:	add	r2, r1, r3
   35f64:	add	r2, r2, #1
   35f68:	str	r2, [r4, #20]
   35f6c:	strb	ip, [r1, r3]
   35f70:	ldr	r3, [r4, #20]
   35f74:	strb	r0, [r3]
   35f78:	ldrb	r3, [r4, #25]
   35f7c:	ldr	r2, [r4, #20]
   35f80:	adds	r3, r3, #0
   35f84:	movne	r3, #1
   35f88:	cmp	r5, #0
   35f8c:	add	r1, r2, r3
   35f90:	str	r1, [r4, #20]
   35f94:	bge	35fa8 <flatcc_json_printer_int32_struct_field@@Base+0x110>
   35f98:	mov	r0, #45	; 0x2d
   35f9c:	rsb	r5, r5, #0
   35fa0:	add	r1, r1, #1
   35fa4:	strb	r0, [r2, r3]
   35fa8:	mov	r0, r5
   35fac:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   35fb0:	ldr	r3, [r4, #20]
   35fb4:	add	r0, r6, r0
   35fb8:	ldrd	r6, [sp, #8]
   35fbc:	ldr	r8, [sp, #16]
   35fc0:	add	r3, r3, r0
   35fc4:	str	r3, [r4, #20]
   35fc8:	ldrd	r4, [sp]
   35fcc:	add	sp, sp, #20
   35fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   35fd4:	bl	1451c <memcpy@plt>
   35fd8:	ldr	r2, [r4, #20]
   35fdc:	add	r2, r2, r6
   35fe0:	str	r2, [r4, #20]
   35fe4:	b	35f3c <flatcc_json_printer_int32_struct_field@@Base+0xa4>
   35fe8:	add	r1, r2, #1
   35fec:	mov	r3, #10
   35ff0:	str	r1, [r4, #20]
   35ff4:	strb	r3, [r2]
   35ff8:	ldrb	r7, [r4, #25]
   35ffc:	ldr	r1, [r4, #16]
   36000:	ldr	r2, [r4, #32]
   36004:	ldr	r0, [r4, #20]
   36008:	mul	r7, r2, r7
   3600c:	add	r3, r0, r7
   36010:	cmp	r1, r3
   36014:	bcs	3602c <flatcc_json_printer_int32_struct_field@@Base+0x194>
   36018:	mov	r1, r7
   3601c:	mov	r0, r4
   36020:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36024:	ldr	r2, [r4, #20]
   36028:	b	35efc <flatcc_json_printer_int32_struct_field@@Base+0x64>
   3602c:	mov	r2, r7
   36030:	mov	r1, #32
   36034:	bl	14594 <memset@plt>
   36038:	ldr	r2, [r4, #20]
   3603c:	add	r2, r2, r7
   36040:	str	r2, [r4, #20]
   36044:	b	35efc <flatcc_json_printer_int32_struct_field@@Base+0x64>

00036048 <flatcc_json_printer_int64_struct_field@@Base>:
   36048:	cmp	r1, #0
   3604c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36050:	mov	r4, r0
   36054:	strd	r6, [sp, #8]
   36058:	str	r8, [sp, #16]
   3605c:	str	lr, [sp, #20]
   36060:	ldrd	r6, [r2, r3]
   36064:	ldr	r2, [r0, #20]
   36068:	ldr	r5, [sp, #28]
   3606c:	beq	36084 <flatcc_json_printer_int64_struct_field@@Base+0x3c>
   36070:	add	r1, r2, #1
   36074:	mov	r3, #44	; 0x2c
   36078:	str	r1, [r0, #20]
   3607c:	strb	r3, [r2]
   36080:	ldr	r2, [r0, #20]
   36084:	ldrb	r1, [r4, #25]
   36088:	cmp	r1, #0
   3608c:	bne	361a4 <flatcc_json_printer_int64_struct_field@@Base+0x15c>
   36090:	ldr	r3, [r4, #16]
   36094:	cmp	r3, r2
   36098:	bhi	360ac <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3609c:	mov	r0, r4
   360a0:	ldr	r3, [r4, #44]	; 0x2c
   360a4:	blx	r3
   360a8:	ldr	r2, [r4, #20]
   360ac:	mov	r3, #34	; 0x22
   360b0:	ldr	r1, [sp, #24]
   360b4:	strb	r3, [r2]
   360b8:	ldrb	r3, [r4, #26]
   360bc:	ldr	r2, [r4, #16]
   360c0:	ldr	r0, [r4, #20]
   360c4:	cmp	r3, #0
   360c8:	addeq	r0, r0, #1
   360cc:	add	r3, r0, r5
   360d0:	cmp	r2, r3
   360d4:	mov	r2, r5
   360d8:	str	r0, [r4, #20]
   360dc:	bhi	36190 <flatcc_json_printer_int64_struct_field@@Base+0x148>
   360e0:	mov	r0, r4
   360e4:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   360e8:	ldr	r2, [r4, #20]
   360ec:	mov	r3, #34	; 0x22
   360f0:	mov	ip, #58	; 0x3a
   360f4:	lsr	r5, r7, #31
   360f8:	mov	r0, #32
   360fc:	strb	r3, [r2]
   36100:	ldrb	r3, [r4, #26]
   36104:	ldr	r1, [r4, #20]
   36108:	clz	r3, r3
   3610c:	lsr	r3, r3, #5
   36110:	add	r2, r1, r3
   36114:	add	r2, r2, #1
   36118:	str	r2, [r4, #20]
   3611c:	strb	ip, [r1, r3]
   36120:	ldr	r3, [r4, #20]
   36124:	strb	r0, [r3]
   36128:	ldrb	r3, [r4, #25]
   3612c:	ldr	r1, [r4, #20]
   36130:	adds	r3, r3, #0
   36134:	movne	r3, #1
   36138:	cmp	r6, #0
   3613c:	sbcs	r2, r7, #0
   36140:	add	r2, r1, r3
   36144:	str	r2, [r4, #20]
   36148:	bge	36160 <flatcc_json_printer_int64_struct_field@@Base+0x118>
   3614c:	rsbs	r6, r6, #0
   36150:	mov	r0, #45	; 0x2d
   36154:	rsc	r7, r7, #0
   36158:	add	r2, r2, #1
   3615c:	strb	r0, [r1, r3]
   36160:	mov	r0, r6
   36164:	mov	r1, r7
   36168:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   3616c:	ldr	r3, [r4, #20]
   36170:	add	r0, r5, r0
   36174:	ldrd	r6, [sp, #8]
   36178:	ldr	r8, [sp, #16]
   3617c:	add	r3, r3, r0
   36180:	str	r3, [r4, #20]
   36184:	ldrd	r4, [sp]
   36188:	add	sp, sp, #20
   3618c:	pop	{pc}		; (ldr pc, [sp], #4)
   36190:	bl	1451c <memcpy@plt>
   36194:	ldr	r2, [r4, #20]
   36198:	add	r2, r2, r5
   3619c:	str	r2, [r4, #20]
   361a0:	b	360ec <flatcc_json_printer_int64_struct_field@@Base+0xa4>
   361a4:	add	r1, r2, #1
   361a8:	mov	r3, #10
   361ac:	str	r1, [r4, #20]
   361b0:	strb	r3, [r2]
   361b4:	ldrb	r8, [r4, #25]
   361b8:	ldr	r1, [r4, #16]
   361bc:	ldr	r2, [r4, #32]
   361c0:	ldr	r0, [r4, #20]
   361c4:	mul	r8, r2, r8
   361c8:	add	r3, r0, r8
   361cc:	cmp	r1, r3
   361d0:	bcs	361e8 <flatcc_json_printer_int64_struct_field@@Base+0x1a0>
   361d4:	mov	r1, r8
   361d8:	mov	r0, r4
   361dc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   361e0:	ldr	r2, [r4, #20]
   361e4:	b	360ac <flatcc_json_printer_int64_struct_field@@Base+0x64>
   361e8:	mov	r2, r8
   361ec:	mov	r1, #32
   361f0:	bl	14594 <memset@plt>
   361f4:	ldr	r2, [r4, #20]
   361f8:	add	r2, r2, r8
   361fc:	str	r2, [r4, #20]
   36200:	b	360ac <flatcc_json_printer_int64_struct_field@@Base+0x64>

00036204 <flatcc_json_printer_bool_struct_field@@Base>:
   36204:	cmp	r1, #0
   36208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3620c:	mov	r4, r0
   36210:	strd	r6, [sp, #8]
   36214:	str	r8, [sp, #16]
   36218:	str	lr, [sp, #20]
   3621c:	ldrb	r5, [r2, r3]
   36220:	ldr	r2, [r0, #20]
   36224:	ldr	r6, [sp, #28]
   36228:	beq	36240 <flatcc_json_printer_bool_struct_field@@Base+0x3c>
   3622c:	add	r1, r2, #1
   36230:	mov	r3, #44	; 0x2c
   36234:	str	r1, [r0, #20]
   36238:	strb	r3, [r2]
   3623c:	ldr	r2, [r0, #20]
   36240:	ldrb	r1, [r4, #25]
   36244:	cmp	r1, #0
   36248:	bne	36334 <flatcc_json_printer_bool_struct_field@@Base+0x130>
   3624c:	ldr	r3, [r4, #16]
   36250:	cmp	r3, r2
   36254:	bhi	36268 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36258:	mov	r0, r4
   3625c:	ldr	r3, [r4, #44]	; 0x2c
   36260:	blx	r3
   36264:	ldr	r2, [r4, #20]
   36268:	mov	r3, #34	; 0x22
   3626c:	ldr	r1, [sp, #24]
   36270:	strb	r3, [r2]
   36274:	ldrb	r3, [r4, #26]
   36278:	ldr	r2, [r4, #16]
   3627c:	ldr	r0, [r4, #20]
   36280:	cmp	r3, #0
   36284:	addeq	r0, r0, #1
   36288:	add	r3, r0, r6
   3628c:	cmp	r2, r3
   36290:	mov	r2, r6
   36294:	str	r0, [r4, #20]
   36298:	bhi	36320 <flatcc_json_printer_bool_struct_field@@Base+0x11c>
   3629c:	mov	r0, r4
   362a0:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   362a4:	ldr	r2, [r4, #20]
   362a8:	mov	r3, #34	; 0x22
   362ac:	mov	lr, #58	; 0x3a
   362b0:	mov	ip, #32
   362b4:	mov	r0, r5
   362b8:	strb	r3, [r2]
   362bc:	ldrb	r3, [r4, #26]
   362c0:	ldr	r1, [r4, #20]
   362c4:	clz	r3, r3
   362c8:	lsr	r3, r3, #5
   362cc:	add	r2, r1, r3
   362d0:	add	r2, r2, #1
   362d4:	str	r2, [r4, #20]
   362d8:	strb	lr, [r1, r3]
   362dc:	ldr	r3, [r4, #20]
   362e0:	strb	ip, [r3]
   362e4:	ldrb	r2, [r4, #25]
   362e8:	ldr	r3, [r4, #20]
   362ec:	cmp	r2, #0
   362f0:	addne	r3, r3, #1
   362f4:	mov	r1, r3
   362f8:	str	r3, [r4, #20]
   362fc:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   36300:	ldr	r3, [r4, #20]
   36304:	ldrd	r6, [sp, #8]
   36308:	ldr	r8, [sp, #16]
   3630c:	add	r0, r3, r0
   36310:	str	r0, [r4, #20]
   36314:	ldrd	r4, [sp]
   36318:	add	sp, sp, #20
   3631c:	pop	{pc}		; (ldr pc, [sp], #4)
   36320:	bl	1451c <memcpy@plt>
   36324:	ldr	r2, [r4, #20]
   36328:	add	r2, r2, r6
   3632c:	str	r2, [r4, #20]
   36330:	b	362a8 <flatcc_json_printer_bool_struct_field@@Base+0xa4>
   36334:	add	r1, r2, #1
   36338:	mov	r3, #10
   3633c:	str	r1, [r4, #20]
   36340:	strb	r3, [r2]
   36344:	ldrb	r7, [r4, #25]
   36348:	ldr	r1, [r4, #16]
   3634c:	ldr	r2, [r4, #32]
   36350:	ldr	r0, [r4, #20]
   36354:	mul	r7, r2, r7
   36358:	add	r3, r0, r7
   3635c:	cmp	r1, r3
   36360:	bcs	36378 <flatcc_json_printer_bool_struct_field@@Base+0x174>
   36364:	mov	r1, r7
   36368:	mov	r0, r4
   3636c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36370:	ldr	r2, [r4, #20]
   36374:	b	36268 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36378:	mov	r2, r7
   3637c:	mov	r1, #32
   36380:	bl	14594 <memset@plt>
   36384:	ldr	r2, [r4, #20]
   36388:	add	r2, r2, r7
   3638c:	str	r2, [r4, #20]
   36390:	b	36268 <flatcc_json_printer_bool_struct_field@@Base+0x64>

00036394 <flatcc_json_printer_float_struct_field@@Base>:
   36394:	add	r3, r2, r3
   36398:	cmp	r1, #0
   3639c:	strd	r4, [sp, #-16]!
   363a0:	ldr	r2, [r0, #20]
   363a4:	mov	r4, r0
   363a8:	str	r6, [sp, #8]
   363ac:	str	lr, [sp, #12]
   363b0:	vpush	{d8}
   363b4:	vldr	s16, [r3]
   363b8:	ldr	r5, [sp, #28]
   363bc:	beq	363d4 <flatcc_json_printer_float_struct_field@@Base+0x40>
   363c0:	add	r1, r2, #1
   363c4:	mov	r3, #44	; 0x2c
   363c8:	str	r1, [r0, #20]
   363cc:	strb	r3, [r2]
   363d0:	ldr	r2, [r0, #20]
   363d4:	ldrb	r1, [r4, #25]
   363d8:	cmp	r1, #0
   363dc:	bne	364c8 <flatcc_json_printer_float_struct_field@@Base+0x134>
   363e0:	ldr	r3, [r4, #16]
   363e4:	cmp	r3, r2
   363e8:	bhi	363fc <flatcc_json_printer_float_struct_field@@Base+0x68>
   363ec:	mov	r0, r4
   363f0:	ldr	r3, [r4, #44]	; 0x2c
   363f4:	blx	r3
   363f8:	ldr	r2, [r4, #20]
   363fc:	mov	r3, #34	; 0x22
   36400:	ldr	r1, [sp, #24]
   36404:	strb	r3, [r2]
   36408:	ldrb	r3, [r4, #26]
   3640c:	ldr	r2, [r4, #16]
   36410:	ldr	r0, [r4, #20]
   36414:	cmp	r3, #0
   36418:	addeq	r0, r0, #1
   3641c:	add	r3, r0, r5
   36420:	cmp	r2, r3
   36424:	mov	r2, r5
   36428:	str	r0, [r4, #20]
   3642c:	bhi	364b4 <flatcc_json_printer_float_struct_field@@Base+0x120>
   36430:	mov	r0, r4
   36434:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36438:	ldr	r2, [r4, #20]
   3643c:	mov	r3, #34	; 0x22
   36440:	mov	ip, #58	; 0x3a
   36444:	vcvt.f64.f32	d0, s16
   36448:	mov	r0, #32
   3644c:	strb	r3, [r2]
   36450:	ldrb	r3, [r4, #26]
   36454:	ldr	r1, [r4, #20]
   36458:	clz	r3, r3
   3645c:	lsr	r3, r3, #5
   36460:	add	r2, r1, r3
   36464:	add	r2, r2, #1
   36468:	str	r2, [r4, #20]
   3646c:	strb	ip, [r1, r3]
   36470:	ldr	r3, [r4, #20]
   36474:	strb	r0, [r3]
   36478:	ldrb	r2, [r4, #25]
   3647c:	ldr	r3, [r4, #20]
   36480:	cmp	r2, #0
   36484:	addne	r3, r3, #1
   36488:	mov	r0, r3
   3648c:	str	r3, [r4, #20]
   36490:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   36494:	ldr	r3, [r4, #20]
   36498:	vpop	{d8}
   3649c:	add	r0, r3, r0
   364a0:	ldr	r6, [sp, #8]
   364a4:	str	r0, [r4, #20]
   364a8:	ldrd	r4, [sp]
   364ac:	add	sp, sp, #12
   364b0:	pop	{pc}		; (ldr pc, [sp], #4)
   364b4:	bl	1451c <memcpy@plt>
   364b8:	ldr	r2, [r4, #20]
   364bc:	add	r2, r2, r5
   364c0:	str	r2, [r4, #20]
   364c4:	b	3643c <flatcc_json_printer_float_struct_field@@Base+0xa8>
   364c8:	add	r1, r2, #1
   364cc:	mov	r3, #10
   364d0:	str	r1, [r4, #20]
   364d4:	strb	r3, [r2]
   364d8:	ldrb	r6, [r4, #25]
   364dc:	ldr	r1, [r4, #16]
   364e0:	ldr	r2, [r4, #32]
   364e4:	ldr	r0, [r4, #20]
   364e8:	mul	r6, r2, r6
   364ec:	add	r3, r0, r6
   364f0:	cmp	r1, r3
   364f4:	bcs	3650c <flatcc_json_printer_float_struct_field@@Base+0x178>
   364f8:	mov	r1, r6
   364fc:	mov	r0, r4
   36500:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36504:	ldr	r2, [r4, #20]
   36508:	b	363fc <flatcc_json_printer_float_struct_field@@Base+0x68>
   3650c:	mov	r2, r6
   36510:	mov	r1, #32
   36514:	bl	14594 <memset@plt>
   36518:	ldr	r2, [r4, #20]
   3651c:	add	r2, r2, r6
   36520:	str	r2, [r4, #20]
   36524:	b	363fc <flatcc_json_printer_float_struct_field@@Base+0x68>

00036528 <flatcc_json_printer_double_struct_field@@Base>:
   36528:	add	r3, r2, r3
   3652c:	cmp	r1, #0
   36530:	strd	r4, [sp, #-16]!
   36534:	ldr	r2, [r0, #20]
   36538:	mov	r4, r0
   3653c:	str	r6, [sp, #8]
   36540:	str	lr, [sp, #12]
   36544:	vpush	{d8}
   36548:	vldr	d8, [r3]
   3654c:	ldr	r5, [sp, #28]
   36550:	beq	36568 <flatcc_json_printer_double_struct_field@@Base+0x40>
   36554:	add	r1, r2, #1
   36558:	mov	r3, #44	; 0x2c
   3655c:	str	r1, [r0, #20]
   36560:	strb	r3, [r2]
   36564:	ldr	r2, [r0, #20]
   36568:	ldrb	r1, [r4, #25]
   3656c:	cmp	r1, #0
   36570:	bne	3665c <flatcc_json_printer_double_struct_field@@Base+0x134>
   36574:	ldr	r3, [r4, #16]
   36578:	cmp	r3, r2
   3657c:	bhi	36590 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36580:	mov	r0, r4
   36584:	ldr	r3, [r4, #44]	; 0x2c
   36588:	blx	r3
   3658c:	ldr	r2, [r4, #20]
   36590:	mov	r3, #34	; 0x22
   36594:	ldr	r1, [sp, #24]
   36598:	strb	r3, [r2]
   3659c:	ldrb	r3, [r4, #26]
   365a0:	ldr	r2, [r4, #16]
   365a4:	ldr	r0, [r4, #20]
   365a8:	cmp	r3, #0
   365ac:	addeq	r0, r0, #1
   365b0:	add	r3, r0, r5
   365b4:	cmp	r2, r3
   365b8:	mov	r2, r5
   365bc:	str	r0, [r4, #20]
   365c0:	bhi	36648 <flatcc_json_printer_double_struct_field@@Base+0x120>
   365c4:	mov	r0, r4
   365c8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   365cc:	ldr	r2, [r4, #20]
   365d0:	mov	r3, #34	; 0x22
   365d4:	mov	ip, #58	; 0x3a
   365d8:	vmov.f64	d0, d8
   365dc:	mov	r0, #32
   365e0:	strb	r3, [r2]
   365e4:	ldrb	r3, [r4, #26]
   365e8:	ldr	r1, [r4, #20]
   365ec:	clz	r3, r3
   365f0:	lsr	r3, r3, #5
   365f4:	add	r2, r1, r3
   365f8:	add	r2, r2, #1
   365fc:	str	r2, [r4, #20]
   36600:	strb	ip, [r1, r3]
   36604:	ldr	r3, [r4, #20]
   36608:	strb	r0, [r3]
   3660c:	ldrb	r2, [r4, #25]
   36610:	ldr	r3, [r4, #20]
   36614:	cmp	r2, #0
   36618:	addne	r3, r3, #1
   3661c:	mov	r0, r3
   36620:	str	r3, [r4, #20]
   36624:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   36628:	ldr	r3, [r4, #20]
   3662c:	vpop	{d8}
   36630:	add	r0, r3, r0
   36634:	ldr	r6, [sp, #8]
   36638:	str	r0, [r4, #20]
   3663c:	ldrd	r4, [sp]
   36640:	add	sp, sp, #12
   36644:	pop	{pc}		; (ldr pc, [sp], #4)
   36648:	bl	1451c <memcpy@plt>
   3664c:	ldr	r2, [r4, #20]
   36650:	add	r2, r2, r5
   36654:	str	r2, [r4, #20]
   36658:	b	365d0 <flatcc_json_printer_double_struct_field@@Base+0xa8>
   3665c:	add	r1, r2, #1
   36660:	mov	r3, #10
   36664:	str	r1, [r4, #20]
   36668:	strb	r3, [r2]
   3666c:	ldrb	r6, [r4, #25]
   36670:	ldr	r1, [r4, #16]
   36674:	ldr	r2, [r4, #32]
   36678:	ldr	r0, [r4, #20]
   3667c:	mul	r6, r2, r6
   36680:	add	r3, r0, r6
   36684:	cmp	r1, r3
   36688:	bcs	366a0 <flatcc_json_printer_double_struct_field@@Base+0x178>
   3668c:	mov	r1, r6
   36690:	mov	r0, r4
   36694:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36698:	ldr	r2, [r4, #20]
   3669c:	b	36590 <flatcc_json_printer_double_struct_field@@Base+0x68>
   366a0:	mov	r2, r6
   366a4:	mov	r1, #32
   366a8:	bl	14594 <memset@plt>
   366ac:	ldr	r2, [r4, #20]
   366b0:	add	r2, r2, r6
   366b4:	str	r2, [r4, #20]
   366b8:	b	36590 <flatcc_json_printer_double_struct_field@@Base+0x68>

000366bc <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   366bc:	cmp	r1, #0
   366c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   366c4:	mov	r4, r0
   366c8:	strd	r6, [sp, #8]
   366cc:	strd	r8, [sp, #16]
   366d0:	str	sl, [sp, #24]
   366d4:	str	lr, [sp, #28]
   366d8:	ldrb	r5, [r2, r3]
   366dc:	ldr	r2, [r0, #20]
   366e0:	ldr	r8, [sp, #32]
   366e4:	ldr	r7, [sp, #36]	; 0x24
   366e8:	ldr	r6, [sp, #40]	; 0x28
   366ec:	beq	36704 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x48>
   366f0:	add	r1, r2, #1
   366f4:	mov	r3, #44	; 0x2c
   366f8:	str	r1, [r0, #20]
   366fc:	strb	r3, [r2]
   36700:	ldr	r2, [r0, #20]
   36704:	ldrb	r1, [r4, #25]
   36708:	cmp	r1, #0
   3670c:	bne	36834 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x178>
   36710:	ldr	r3, [r4, #16]
   36714:	cmp	r3, r2
   36718:	bhi	3672c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   3671c:	mov	r0, r4
   36720:	ldr	r3, [r4, #44]	; 0x2c
   36724:	blx	r3
   36728:	ldr	r2, [r4, #20]
   3672c:	mov	r3, #34	; 0x22
   36730:	strb	r3, [r2]
   36734:	ldrb	r3, [r4, #26]
   36738:	ldr	r2, [r4, #16]
   3673c:	ldr	r0, [r4, #20]
   36740:	cmp	r3, #0
   36744:	addeq	r0, r0, #1
   36748:	add	r3, r0, r7
   3674c:	cmp	r2, r3
   36750:	str	r0, [r4, #20]
   36754:	bhi	367ec <flatcc_json_printer_uint8_enum_struct_field@@Base+0x130>
   36758:	mov	r2, r7
   3675c:	mov	r1, r8
   36760:	mov	r0, r4
   36764:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36768:	ldr	r2, [r4, #20]
   3676c:	mov	r3, #34	; 0x22
   36770:	mov	ip, #58	; 0x3a
   36774:	mov	r0, #32
   36778:	strb	r3, [r2]
   3677c:	ldrb	r3, [r4, #26]
   36780:	ldr	r1, [r4, #20]
   36784:	clz	r3, r3
   36788:	lsr	r3, r3, #5
   3678c:	add	r2, r1, r3
   36790:	add	r2, r2, #1
   36794:	str	r2, [r4, #20]
   36798:	strb	ip, [r1, r3]
   3679c:	ldr	r3, [r4, #20]
   367a0:	strb	r0, [r3]
   367a4:	ldrb	r2, [r4, #25]
   367a8:	ldr	r1, [r4, #20]
   367ac:	ldrb	r3, [r4, #27]
   367b0:	cmp	r2, #0
   367b4:	addne	r1, r1, #1
   367b8:	cmp	r3, #0
   367bc:	str	r1, [r4, #20]
   367c0:	bne	36808 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x14c>
   367c4:	mov	r1, r5
   367c8:	mov	r0, r4
   367cc:	ldrd	r4, [sp]
   367d0:	mov	r3, r6
   367d4:	ldrd	r6, [sp, #8]
   367d8:	ldrd	r8, [sp, #16]
   367dc:	ldr	sl, [sp, #24]
   367e0:	ldr	lr, [sp, #28]
   367e4:	add	sp, sp, #32
   367e8:	bx	r3
   367ec:	mov	r2, r7
   367f0:	mov	r1, r8
   367f4:	bl	1451c <memcpy@plt>
   367f8:	ldr	r2, [r4, #20]
   367fc:	add	r2, r2, r7
   36800:	str	r2, [r4, #20]
   36804:	b	3676c <flatcc_json_printer_uint8_enum_struct_field@@Base+0xb0>
   36808:	mov	r0, r5
   3680c:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   36810:	ldr	r3, [r4, #20]
   36814:	ldrd	r6, [sp, #8]
   36818:	ldrd	r8, [sp, #16]
   3681c:	add	r0, r3, r0
   36820:	ldr	sl, [sp, #24]
   36824:	str	r0, [r4, #20]
   36828:	ldrd	r4, [sp]
   3682c:	add	sp, sp, #28
   36830:	pop	{pc}		; (ldr pc, [sp], #4)
   36834:	add	r1, r2, #1
   36838:	mov	r3, #10
   3683c:	str	r1, [r4, #20]
   36840:	strb	r3, [r2]
   36844:	ldrb	r3, [r4, #25]
   36848:	ldr	r1, [r4, #16]
   3684c:	ldr	r2, [r4, #32]
   36850:	ldr	r0, [r4, #20]
   36854:	mul	r9, r2, r3
   36858:	add	r3, r0, r9
   3685c:	cmp	r1, r3
   36860:	bcs	36878 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1bc>
   36864:	mov	r1, r9
   36868:	mov	r0, r4
   3686c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36870:	ldr	r2, [r4, #20]
   36874:	b	3672c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   36878:	mov	r2, r9
   3687c:	mov	r1, #32
   36880:	bl	14594 <memset@plt>
   36884:	ldr	r2, [r4, #20]
   36888:	add	r2, r2, r9
   3688c:	str	r2, [r4, #20]
   36890:	b	3672c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>

00036894 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   36894:	cmp	r1, #0
   36898:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3689c:	mov	r4, r0
   368a0:	ldrh	r5, [r2, r3]
   368a4:	ldr	r2, [r0, #20]
   368a8:	strd	r6, [sp, #8]
   368ac:	strd	r8, [sp, #16]
   368b0:	str	sl, [sp, #24]
   368b4:	str	lr, [sp, #28]
   368b8:	ldr	r8, [sp, #32]
   368bc:	ldr	r7, [sp, #36]	; 0x24
   368c0:	ldr	r6, [sp, #40]	; 0x28
   368c4:	beq	368dc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x48>
   368c8:	add	r1, r2, #1
   368cc:	mov	r3, #44	; 0x2c
   368d0:	str	r1, [r0, #20]
   368d4:	strb	r3, [r2]
   368d8:	ldr	r2, [r0, #20]
   368dc:	ldrb	r1, [r4, #25]
   368e0:	cmp	r1, #0
   368e4:	bne	36a0c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x178>
   368e8:	ldr	r3, [r4, #16]
   368ec:	cmp	r3, r2
   368f0:	bhi	36904 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   368f4:	mov	r0, r4
   368f8:	ldr	r3, [r4, #44]	; 0x2c
   368fc:	blx	r3
   36900:	ldr	r2, [r4, #20]
   36904:	mov	r3, #34	; 0x22
   36908:	strb	r3, [r2]
   3690c:	ldrb	r3, [r4, #26]
   36910:	ldr	r2, [r4, #16]
   36914:	ldr	r0, [r4, #20]
   36918:	cmp	r3, #0
   3691c:	addeq	r0, r0, #1
   36920:	add	r3, r0, r7
   36924:	cmp	r2, r3
   36928:	str	r0, [r4, #20]
   3692c:	bhi	369c4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x130>
   36930:	mov	r2, r7
   36934:	mov	r1, r8
   36938:	mov	r0, r4
   3693c:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36940:	ldr	r2, [r4, #20]
   36944:	mov	r3, #34	; 0x22
   36948:	mov	ip, #58	; 0x3a
   3694c:	mov	r0, #32
   36950:	strb	r3, [r2]
   36954:	ldrb	r3, [r4, #26]
   36958:	ldr	r1, [r4, #20]
   3695c:	clz	r3, r3
   36960:	lsr	r3, r3, #5
   36964:	add	r2, r1, r3
   36968:	add	r2, r2, #1
   3696c:	str	r2, [r4, #20]
   36970:	strb	ip, [r1, r3]
   36974:	ldr	r3, [r4, #20]
   36978:	strb	r0, [r3]
   3697c:	ldrb	r2, [r4, #25]
   36980:	ldr	r1, [r4, #20]
   36984:	ldrb	r3, [r4, #27]
   36988:	cmp	r2, #0
   3698c:	addne	r1, r1, #1
   36990:	cmp	r3, #0
   36994:	str	r1, [r4, #20]
   36998:	bne	369e0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x14c>
   3699c:	mov	r1, r5
   369a0:	mov	r0, r4
   369a4:	ldrd	r4, [sp]
   369a8:	mov	r3, r6
   369ac:	ldrd	r6, [sp, #8]
   369b0:	ldrd	r8, [sp, #16]
   369b4:	ldr	sl, [sp, #24]
   369b8:	ldr	lr, [sp, #28]
   369bc:	add	sp, sp, #32
   369c0:	bx	r3
   369c4:	mov	r2, r7
   369c8:	mov	r1, r8
   369cc:	bl	1451c <memcpy@plt>
   369d0:	ldr	r2, [r4, #20]
   369d4:	add	r2, r2, r7
   369d8:	str	r2, [r4, #20]
   369dc:	b	36944 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xb0>
   369e0:	mov	r0, r5
   369e4:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   369e8:	ldr	r3, [r4, #20]
   369ec:	ldrd	r6, [sp, #8]
   369f0:	ldrd	r8, [sp, #16]
   369f4:	add	r0, r3, r0
   369f8:	ldr	sl, [sp, #24]
   369fc:	str	r0, [r4, #20]
   36a00:	ldrd	r4, [sp]
   36a04:	add	sp, sp, #28
   36a08:	pop	{pc}		; (ldr pc, [sp], #4)
   36a0c:	add	r1, r2, #1
   36a10:	mov	r3, #10
   36a14:	str	r1, [r4, #20]
   36a18:	strb	r3, [r2]
   36a1c:	ldrb	r3, [r4, #25]
   36a20:	ldr	r1, [r4, #16]
   36a24:	ldr	r2, [r4, #32]
   36a28:	ldr	r0, [r4, #20]
   36a2c:	mul	r9, r2, r3
   36a30:	add	r3, r0, r9
   36a34:	cmp	r1, r3
   36a38:	bcs	36a50 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   36a3c:	mov	r1, r9
   36a40:	mov	r0, r4
   36a44:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36a48:	ldr	r2, [r4, #20]
   36a4c:	b	36904 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   36a50:	mov	r2, r9
   36a54:	mov	r1, #32
   36a58:	bl	14594 <memset@plt>
   36a5c:	ldr	r2, [r4, #20]
   36a60:	add	r2, r2, r9
   36a64:	str	r2, [r4, #20]
   36a68:	b	36904 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>

00036a6c <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   36a6c:	cmp	r1, #0
   36a70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36a74:	mov	r4, r0
   36a78:	ldr	r5, [r2, r3]
   36a7c:	ldr	r2, [r0, #20]
   36a80:	strd	r6, [sp, #8]
   36a84:	strd	r8, [sp, #16]
   36a88:	str	sl, [sp, #24]
   36a8c:	str	lr, [sp, #28]
   36a90:	ldr	r8, [sp, #32]
   36a94:	ldr	r7, [sp, #36]	; 0x24
   36a98:	ldr	r6, [sp, #40]	; 0x28
   36a9c:	beq	36ab4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x48>
   36aa0:	add	r1, r2, #1
   36aa4:	mov	r3, #44	; 0x2c
   36aa8:	str	r1, [r0, #20]
   36aac:	strb	r3, [r2]
   36ab0:	ldr	r2, [r0, #20]
   36ab4:	ldrb	r1, [r4, #25]
   36ab8:	cmp	r1, #0
   36abc:	bne	36be4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x178>
   36ac0:	ldr	r3, [r4, #16]
   36ac4:	cmp	r3, r2
   36ac8:	bhi	36adc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   36acc:	mov	r0, r4
   36ad0:	ldr	r3, [r4, #44]	; 0x2c
   36ad4:	blx	r3
   36ad8:	ldr	r2, [r4, #20]
   36adc:	mov	r3, #34	; 0x22
   36ae0:	strb	r3, [r2]
   36ae4:	ldrb	r3, [r4, #26]
   36ae8:	ldr	r2, [r4, #16]
   36aec:	ldr	r0, [r4, #20]
   36af0:	cmp	r3, #0
   36af4:	addeq	r0, r0, #1
   36af8:	add	r3, r0, r7
   36afc:	cmp	r2, r3
   36b00:	str	r0, [r4, #20]
   36b04:	bhi	36b9c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x130>
   36b08:	mov	r2, r7
   36b0c:	mov	r1, r8
   36b10:	mov	r0, r4
   36b14:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36b18:	ldr	r2, [r4, #20]
   36b1c:	mov	r3, #34	; 0x22
   36b20:	mov	ip, #58	; 0x3a
   36b24:	mov	r0, #32
   36b28:	strb	r3, [r2]
   36b2c:	ldrb	r3, [r4, #26]
   36b30:	ldr	r1, [r4, #20]
   36b34:	clz	r3, r3
   36b38:	lsr	r3, r3, #5
   36b3c:	add	r2, r1, r3
   36b40:	add	r2, r2, #1
   36b44:	str	r2, [r4, #20]
   36b48:	strb	ip, [r1, r3]
   36b4c:	ldr	r3, [r4, #20]
   36b50:	strb	r0, [r3]
   36b54:	ldrb	r2, [r4, #25]
   36b58:	ldr	r1, [r4, #20]
   36b5c:	ldrb	r3, [r4, #27]
   36b60:	cmp	r2, #0
   36b64:	addne	r1, r1, #1
   36b68:	cmp	r3, #0
   36b6c:	str	r1, [r4, #20]
   36b70:	bne	36bb8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x14c>
   36b74:	mov	r1, r5
   36b78:	mov	r0, r4
   36b7c:	ldrd	r4, [sp]
   36b80:	mov	r3, r6
   36b84:	ldrd	r6, [sp, #8]
   36b88:	ldrd	r8, [sp, #16]
   36b8c:	ldr	sl, [sp, #24]
   36b90:	ldr	lr, [sp, #28]
   36b94:	add	sp, sp, #32
   36b98:	bx	r3
   36b9c:	mov	r2, r7
   36ba0:	mov	r1, r8
   36ba4:	bl	1451c <memcpy@plt>
   36ba8:	ldr	r2, [r4, #20]
   36bac:	add	r2, r2, r7
   36bb0:	str	r2, [r4, #20]
   36bb4:	b	36b1c <flatcc_json_printer_uint32_enum_struct_field@@Base+0xb0>
   36bb8:	mov	r0, r5
   36bbc:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   36bc0:	ldr	r3, [r4, #20]
   36bc4:	ldrd	r6, [sp, #8]
   36bc8:	ldrd	r8, [sp, #16]
   36bcc:	add	r0, r3, r0
   36bd0:	ldr	sl, [sp, #24]
   36bd4:	str	r0, [r4, #20]
   36bd8:	ldrd	r4, [sp]
   36bdc:	add	sp, sp, #28
   36be0:	pop	{pc}		; (ldr pc, [sp], #4)
   36be4:	add	r1, r2, #1
   36be8:	mov	r3, #10
   36bec:	str	r1, [r4, #20]
   36bf0:	strb	r3, [r2]
   36bf4:	ldrb	r3, [r4, #25]
   36bf8:	ldr	r1, [r4, #16]
   36bfc:	ldr	r2, [r4, #32]
   36c00:	ldr	r0, [r4, #20]
   36c04:	mul	r9, r2, r3
   36c08:	add	r3, r0, r9
   36c0c:	cmp	r1, r3
   36c10:	bcs	36c28 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   36c14:	mov	r1, r9
   36c18:	mov	r0, r4
   36c1c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36c20:	ldr	r2, [r4, #20]
   36c24:	b	36adc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   36c28:	mov	r2, r9
   36c2c:	mov	r1, #32
   36c30:	bl	14594 <memset@plt>
   36c34:	ldr	r2, [r4, #20]
   36c38:	add	r2, r2, r9
   36c3c:	str	r2, [r4, #20]
   36c40:	b	36adc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>

00036c44 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36c44:	cmp	r1, #0
   36c48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36c4c:	mov	r4, r0
   36c50:	strd	r6, [sp, #8]
   36c54:	strd	r8, [sp, #16]
   36c58:	str	sl, [sp, #24]
   36c5c:	str	lr, [sp, #28]
   36c60:	ldrd	r6, [r2, r3]
   36c64:	ldr	r2, [r0, #20]
   36c68:	ldr	r9, [sp, #32]
   36c6c:	ldr	r8, [sp, #36]	; 0x24
   36c70:	ldr	r5, [sp, #40]	; 0x28
   36c74:	beq	36c8c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x48>
   36c78:	add	r1, r2, #1
   36c7c:	mov	r3, #44	; 0x2c
   36c80:	str	r1, [r0, #20]
   36c84:	strb	r3, [r2]
   36c88:	ldr	r2, [r0, #20]
   36c8c:	ldrb	r1, [r4, #25]
   36c90:	cmp	r1, #0
   36c94:	bne	36dc4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x180>
   36c98:	ldr	r3, [r4, #16]
   36c9c:	cmp	r3, r2
   36ca0:	bhi	36cb4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   36ca4:	mov	r0, r4
   36ca8:	ldr	r3, [r4, #44]	; 0x2c
   36cac:	blx	r3
   36cb0:	ldr	r2, [r4, #20]
   36cb4:	mov	r3, #34	; 0x22
   36cb8:	strb	r3, [r2]
   36cbc:	ldrb	r3, [r4, #26]
   36cc0:	ldr	r2, [r4, #16]
   36cc4:	ldr	r0, [r4, #20]
   36cc8:	cmp	r3, #0
   36ccc:	addeq	r0, r0, #1
   36cd0:	add	r3, r0, r8
   36cd4:	cmp	r2, r3
   36cd8:	str	r0, [r4, #20]
   36cdc:	bhi	36d78 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x134>
   36ce0:	mov	r2, r8
   36ce4:	mov	r1, r9
   36ce8:	mov	r0, r4
   36cec:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36cf0:	ldr	r8, [r4, #20]
   36cf4:	mov	r3, #34	; 0x22
   36cf8:	mov	ip, #58	; 0x3a
   36cfc:	mov	r0, #32
   36d00:	strb	r3, [r8]
   36d04:	ldrb	r3, [r4, #26]
   36d08:	ldr	r1, [r4, #20]
   36d0c:	clz	r3, r3
   36d10:	lsr	r3, r3, #5
   36d14:	add	r2, r1, r3
   36d18:	add	r2, r2, #1
   36d1c:	str	r2, [r4, #20]
   36d20:	strb	ip, [r1, r3]
   36d24:	ldr	r3, [r4, #20]
   36d28:	strb	r0, [r3]
   36d2c:	ldrb	r1, [r4, #25]
   36d30:	ldr	r2, [r4, #20]
   36d34:	ldrb	r3, [r4, #27]
   36d38:	cmp	r1, #0
   36d3c:	addne	r2, r2, #1
   36d40:	cmp	r3, #0
   36d44:	str	r2, [r4, #20]
   36d48:	bne	36d94 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
   36d4c:	mov	r2, r6
   36d50:	mov	r3, r7
   36d54:	ldrd	r6, [sp, #8]
   36d58:	mov	r0, r4
   36d5c:	mov	r1, r5
   36d60:	ldrd	r4, [sp]
   36d64:	ldrd	r8, [sp, #16]
   36d68:	ldr	sl, [sp, #24]
   36d6c:	ldr	lr, [sp, #28]
   36d70:	add	sp, sp, #32
   36d74:	bx	r1
   36d78:	mov	r2, r8
   36d7c:	mov	r1, r9
   36d80:	bl	1451c <memcpy@plt>
   36d84:	ldr	r3, [r4, #20]
   36d88:	add	r8, r3, r8
   36d8c:	str	r8, [r4, #20]
   36d90:	b	36cf4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xb0>
   36d94:	mov	r0, r6
   36d98:	mov	r1, r7
   36d9c:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   36da0:	ldr	r3, [r4, #20]
   36da4:	ldrd	r6, [sp, #8]
   36da8:	ldrd	r8, [sp, #16]
   36dac:	add	r0, r3, r0
   36db0:	ldr	sl, [sp, #24]
   36db4:	str	r0, [r4, #20]
   36db8:	ldrd	r4, [sp]
   36dbc:	add	sp, sp, #28
   36dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   36dc4:	add	r1, r2, #1
   36dc8:	mov	r3, #10
   36dcc:	str	r1, [r4, #20]
   36dd0:	strb	r3, [r2]
   36dd4:	ldrb	r3, [r4, #25]
   36dd8:	ldr	r1, [r4, #16]
   36ddc:	ldr	r2, [r4, #32]
   36de0:	ldr	r0, [r4, #20]
   36de4:	mul	sl, r2, r3
   36de8:	add	r3, r0, sl
   36dec:	cmp	r1, r3
   36df0:	bcs	36e08 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1c4>
   36df4:	mov	r1, sl
   36df8:	mov	r0, r4
   36dfc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   36e00:	ldr	r2, [r4, #20]
   36e04:	b	36cb4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   36e08:	mov	r2, sl
   36e0c:	mov	r1, #32
   36e10:	bl	14594 <memset@plt>
   36e14:	ldr	r2, [r4, #20]
   36e18:	add	r2, r2, sl
   36e1c:	str	r2, [r4, #20]
   36e20:	b	36cb4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>

00036e24 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   36e24:	cmp	r1, #0
   36e28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36e2c:	mov	r4, r0
   36e30:	strd	r6, [sp, #8]
   36e34:	strd	r8, [sp, #16]
   36e38:	str	sl, [sp, #24]
   36e3c:	str	lr, [sp, #28]
   36e40:	ldrsb	r5, [r2, r3]
   36e44:	ldr	r2, [r0, #20]
   36e48:	ldr	r8, [sp, #32]
   36e4c:	ldr	r7, [sp, #36]	; 0x24
   36e50:	ldr	r6, [sp, #40]	; 0x28
   36e54:	beq	36e6c <flatcc_json_printer_int8_enum_struct_field@@Base+0x48>
   36e58:	add	r1, r2, #1
   36e5c:	mov	r3, #44	; 0x2c
   36e60:	str	r1, [r0, #20]
   36e64:	strb	r3, [r2]
   36e68:	ldr	r2, [r0, #20]
   36e6c:	ldrb	r1, [r4, #25]
   36e70:	cmp	r1, #0
   36e74:	bne	36fc4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1a0>
   36e78:	ldr	r3, [r4, #16]
   36e7c:	cmp	r3, r2
   36e80:	bhi	36e94 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   36e84:	mov	r0, r4
   36e88:	ldr	r3, [r4, #44]	; 0x2c
   36e8c:	blx	r3
   36e90:	ldr	r2, [r4, #20]
   36e94:	mov	r3, #34	; 0x22
   36e98:	strb	r3, [r2]
   36e9c:	ldrb	r3, [r4, #26]
   36ea0:	ldr	r2, [r4, #16]
   36ea4:	ldr	r0, [r4, #20]
   36ea8:	cmp	r3, #0
   36eac:	addeq	r0, r0, #1
   36eb0:	add	r3, r0, r7
   36eb4:	cmp	r2, r3
   36eb8:	str	r0, [r4, #20]
   36ebc:	bhi	36f80 <flatcc_json_printer_int8_enum_struct_field@@Base+0x15c>
   36ec0:	mov	r2, r7
   36ec4:	mov	r1, r8
   36ec8:	mov	r0, r4
   36ecc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   36ed0:	ldr	r2, [r4, #20]
   36ed4:	mov	r3, #34	; 0x22
   36ed8:	mov	ip, #58	; 0x3a
   36edc:	mov	r0, #32
   36ee0:	strb	r3, [r2]
   36ee4:	ldrb	r3, [r4, #26]
   36ee8:	ldr	r1, [r4, #20]
   36eec:	clz	r3, r3
   36ef0:	lsr	r3, r3, #5
   36ef4:	add	r2, r1, r3
   36ef8:	add	r2, r2, #1
   36efc:	str	r2, [r4, #20]
   36f00:	strb	ip, [r1, r3]
   36f04:	ldr	r3, [r4, #20]
   36f08:	strb	r0, [r3]
   36f0c:	ldrb	r3, [r4, #25]
   36f10:	ldr	r2, [r4, #20]
   36f14:	ldrb	r0, [r4, #27]
   36f18:	adds	r3, r3, #0
   36f1c:	movne	r3, #1
   36f20:	add	r1, r2, r3
   36f24:	cmp	r0, #0
   36f28:	str	r1, [r4, #20]
   36f2c:	beq	36f9c <flatcc_json_printer_int8_enum_struct_field@@Base+0x178>
   36f30:	cmp	r5, #0
   36f34:	lsr	r6, r5, #31
   36f38:	uxtb	r0, r5
   36f3c:	bge	36f54 <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   36f40:	rsb	r0, r0, #0
   36f44:	mov	ip, #45	; 0x2d
   36f48:	add	r1, r1, #1
   36f4c:	uxtb	r0, r0
   36f50:	strb	ip, [r2, r3]
   36f54:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   36f58:	ldr	r3, [r4, #20]
   36f5c:	add	r0, r6, r0
   36f60:	ldrd	r6, [sp, #8]
   36f64:	ldrd	r8, [sp, #16]
   36f68:	add	r3, r3, r0
   36f6c:	ldr	sl, [sp, #24]
   36f70:	str	r3, [r4, #20]
   36f74:	ldrd	r4, [sp]
   36f78:	add	sp, sp, #28
   36f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   36f80:	mov	r2, r7
   36f84:	mov	r1, r8
   36f88:	bl	1451c <memcpy@plt>
   36f8c:	ldr	r2, [r4, #20]
   36f90:	add	r2, r2, r7
   36f94:	str	r2, [r4, #20]
   36f98:	b	36ed4 <flatcc_json_printer_int8_enum_struct_field@@Base+0xb0>
   36f9c:	mov	r1, r5
   36fa0:	mov	r0, r4
   36fa4:	ldrd	r4, [sp]
   36fa8:	mov	r3, r6
   36fac:	ldrd	r6, [sp, #8]
   36fb0:	ldrd	r8, [sp, #16]
   36fb4:	ldr	sl, [sp, #24]
   36fb8:	ldr	lr, [sp, #28]
   36fbc:	add	sp, sp, #32
   36fc0:	bx	r3
   36fc4:	add	r1, r2, #1
   36fc8:	mov	r3, #10
   36fcc:	str	r1, [r4, #20]
   36fd0:	strb	r3, [r2]
   36fd4:	ldrb	r3, [r4, #25]
   36fd8:	ldr	r1, [r4, #16]
   36fdc:	ldr	r2, [r4, #32]
   36fe0:	ldr	r0, [r4, #20]
   36fe4:	mul	r9, r2, r3
   36fe8:	add	r3, r0, r9
   36fec:	cmp	r1, r3
   36ff0:	bcs	37008 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1e4>
   36ff4:	mov	r1, r9
   36ff8:	mov	r0, r4
   36ffc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37000:	ldr	r2, [r4, #20]
   37004:	b	36e94 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   37008:	mov	r2, r9
   3700c:	mov	r1, #32
   37010:	bl	14594 <memset@plt>
   37014:	ldr	r2, [r4, #20]
   37018:	add	r2, r2, r9
   3701c:	str	r2, [r4, #20]
   37020:	b	36e94 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>

00037024 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   37024:	cmp	r1, #0
   37028:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3702c:	mov	r4, r0
   37030:	ldrsh	r5, [r2, r3]
   37034:	ldr	r2, [r0, #20]
   37038:	strd	r6, [sp, #8]
   3703c:	strd	r8, [sp, #16]
   37040:	str	sl, [sp, #24]
   37044:	str	lr, [sp, #28]
   37048:	ldr	r8, [sp, #32]
   3704c:	ldr	r7, [sp, #36]	; 0x24
   37050:	ldr	r6, [sp, #40]	; 0x28
   37054:	beq	3706c <flatcc_json_printer_int16_enum_struct_field@@Base+0x48>
   37058:	add	r1, r2, #1
   3705c:	mov	r3, #44	; 0x2c
   37060:	str	r1, [r0, #20]
   37064:	strb	r3, [r2]
   37068:	ldr	r2, [r0, #20]
   3706c:	ldrb	r1, [r4, #25]
   37070:	cmp	r1, #0
   37074:	bne	371c4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   37078:	ldr	r3, [r4, #16]
   3707c:	cmp	r3, r2
   37080:	bhi	37094 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   37084:	mov	r0, r4
   37088:	ldr	r3, [r4, #44]	; 0x2c
   3708c:	blx	r3
   37090:	ldr	r2, [r4, #20]
   37094:	mov	r3, #34	; 0x22
   37098:	strb	r3, [r2]
   3709c:	ldrb	r3, [r4, #26]
   370a0:	ldr	r2, [r4, #16]
   370a4:	ldr	r0, [r4, #20]
   370a8:	cmp	r3, #0
   370ac:	addeq	r0, r0, #1
   370b0:	add	r3, r0, r7
   370b4:	cmp	r2, r3
   370b8:	str	r0, [r4, #20]
   370bc:	bhi	37180 <flatcc_json_printer_int16_enum_struct_field@@Base+0x15c>
   370c0:	mov	r2, r7
   370c4:	mov	r1, r8
   370c8:	mov	r0, r4
   370cc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   370d0:	ldr	r2, [r4, #20]
   370d4:	mov	r3, #34	; 0x22
   370d8:	mov	ip, #58	; 0x3a
   370dc:	mov	r0, #32
   370e0:	strb	r3, [r2]
   370e4:	ldrb	r3, [r4, #26]
   370e8:	ldr	r1, [r4, #20]
   370ec:	clz	r3, r3
   370f0:	lsr	r3, r3, #5
   370f4:	add	r2, r1, r3
   370f8:	add	r2, r2, #1
   370fc:	str	r2, [r4, #20]
   37100:	strb	ip, [r1, r3]
   37104:	ldr	r3, [r4, #20]
   37108:	strb	r0, [r3]
   3710c:	ldrb	r3, [r4, #25]
   37110:	ldr	r2, [r4, #20]
   37114:	ldrb	r0, [r4, #27]
   37118:	adds	r3, r3, #0
   3711c:	movne	r3, #1
   37120:	add	r1, r2, r3
   37124:	cmp	r0, #0
   37128:	str	r1, [r4, #20]
   3712c:	beq	3719c <flatcc_json_printer_int16_enum_struct_field@@Base+0x178>
   37130:	cmp	r5, #0
   37134:	lsr	r6, r5, #31
   37138:	uxth	r0, r5
   3713c:	bge	37154 <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   37140:	rsb	r0, r0, #0
   37144:	mov	ip, #45	; 0x2d
   37148:	add	r1, r1, #1
   3714c:	uxth	r0, r0
   37150:	strb	ip, [r2, r3]
   37154:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   37158:	ldr	r3, [r4, #20]
   3715c:	add	r0, r6, r0
   37160:	ldrd	r6, [sp, #8]
   37164:	ldrd	r8, [sp, #16]
   37168:	add	r3, r3, r0
   3716c:	ldr	sl, [sp, #24]
   37170:	str	r3, [r4, #20]
   37174:	ldrd	r4, [sp]
   37178:	add	sp, sp, #28
   3717c:	pop	{pc}		; (ldr pc, [sp], #4)
   37180:	mov	r2, r7
   37184:	mov	r1, r8
   37188:	bl	1451c <memcpy@plt>
   3718c:	ldr	r2, [r4, #20]
   37190:	add	r2, r2, r7
   37194:	str	r2, [r4, #20]
   37198:	b	370d4 <flatcc_json_printer_int16_enum_struct_field@@Base+0xb0>
   3719c:	mov	r1, r5
   371a0:	mov	r0, r4
   371a4:	ldrd	r4, [sp]
   371a8:	mov	r3, r6
   371ac:	ldrd	r6, [sp, #8]
   371b0:	ldrd	r8, [sp, #16]
   371b4:	ldr	sl, [sp, #24]
   371b8:	ldr	lr, [sp, #28]
   371bc:	add	sp, sp, #32
   371c0:	bx	r3
   371c4:	add	r1, r2, #1
   371c8:	mov	r3, #10
   371cc:	str	r1, [r4, #20]
   371d0:	strb	r3, [r2]
   371d4:	ldrb	r3, [r4, #25]
   371d8:	ldr	r1, [r4, #16]
   371dc:	ldr	r2, [r4, #32]
   371e0:	ldr	r0, [r4, #20]
   371e4:	mul	r9, r2, r3
   371e8:	add	r3, r0, r9
   371ec:	cmp	r1, r3
   371f0:	bcs	37208 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e4>
   371f4:	mov	r1, r9
   371f8:	mov	r0, r4
   371fc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37200:	ldr	r2, [r4, #20]
   37204:	b	37094 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   37208:	mov	r2, r9
   3720c:	mov	r1, #32
   37210:	bl	14594 <memset@plt>
   37214:	ldr	r2, [r4, #20]
   37218:	add	r2, r2, r9
   3721c:	str	r2, [r4, #20]
   37220:	b	37094 <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>

00037224 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   37224:	cmp	r1, #0
   37228:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3722c:	mov	r4, r0
   37230:	strd	r6, [sp, #8]
   37234:	strd	r8, [sp, #16]
   37238:	str	sl, [sp, #24]
   3723c:	str	lr, [sp, #28]
   37240:	ldr	r6, [r2, r3]
   37244:	ldr	r2, [r0, #20]
   37248:	ldr	r8, [sp, #32]
   3724c:	ldr	r7, [sp, #36]	; 0x24
   37250:	ldr	r5, [sp, #40]	; 0x28
   37254:	beq	3726c <flatcc_json_printer_int32_enum_struct_field@@Base+0x48>
   37258:	add	r1, r2, #1
   3725c:	mov	r3, #44	; 0x2c
   37260:	str	r1, [r0, #20]
   37264:	strb	r3, [r2]
   37268:	ldr	r2, [r0, #20]
   3726c:	ldrb	r1, [r4, #25]
   37270:	cmp	r1, #0
   37274:	bne	373c0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x19c>
   37278:	ldr	r3, [r4, #16]
   3727c:	cmp	r3, r2
   37280:	bhi	37294 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   37284:	mov	r0, r4
   37288:	ldr	r3, [r4, #44]	; 0x2c
   3728c:	blx	r3
   37290:	ldr	r2, [r4, #20]
   37294:	mov	r3, #34	; 0x22
   37298:	strb	r3, [r2]
   3729c:	ldrb	r3, [r4, #26]
   372a0:	ldr	r2, [r4, #16]
   372a4:	ldr	r0, [r4, #20]
   372a8:	cmp	r3, #0
   372ac:	addeq	r0, r0, #1
   372b0:	add	r3, r0, r7
   372b4:	cmp	r2, r3
   372b8:	str	r0, [r4, #20]
   372bc:	bhi	3737c <flatcc_json_printer_int32_enum_struct_field@@Base+0x158>
   372c0:	mov	r2, r7
   372c4:	mov	r1, r8
   372c8:	mov	r0, r4
   372cc:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   372d0:	ldr	r2, [r4, #20]
   372d4:	mov	r3, #34	; 0x22
   372d8:	mov	ip, #58	; 0x3a
   372dc:	mov	r0, #32
   372e0:	strb	r3, [r2]
   372e4:	ldrb	r3, [r4, #26]
   372e8:	ldr	r1, [r4, #20]
   372ec:	clz	r3, r3
   372f0:	lsr	r3, r3, #5
   372f4:	add	r2, r1, r3
   372f8:	add	r2, r2, #1
   372fc:	str	r2, [r4, #20]
   37300:	strb	ip, [r1, r3]
   37304:	ldr	r3, [r4, #20]
   37308:	strb	r0, [r3]
   3730c:	ldrb	r3, [r4, #25]
   37310:	ldr	r2, [r4, #20]
   37314:	ldrb	r0, [r4, #27]
   37318:	adds	r3, r3, #0
   3731c:	movne	r3, #1
   37320:	add	r1, r2, r3
   37324:	cmp	r0, #0
   37328:	str	r1, [r4, #20]
   3732c:	beq	37398 <flatcc_json_printer_int32_enum_struct_field@@Base+0x174>
   37330:	cmp	r6, #0
   37334:	lsr	r5, r6, #31
   37338:	bge	3734c <flatcc_json_printer_int32_enum_struct_field@@Base+0x128>
   3733c:	mov	r0, #45	; 0x2d
   37340:	rsb	r6, r6, #0
   37344:	add	r1, r1, #1
   37348:	strb	r0, [r2, r3]
   3734c:	mov	r0, r6
   37350:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   37354:	ldr	r3, [r4, #20]
   37358:	add	r0, r5, r0
   3735c:	ldrd	r6, [sp, #8]
   37360:	ldrd	r8, [sp, #16]
   37364:	add	r3, r3, r0
   37368:	ldr	sl, [sp, #24]
   3736c:	str	r3, [r4, #20]
   37370:	ldrd	r4, [sp]
   37374:	add	sp, sp, #28
   37378:	pop	{pc}		; (ldr pc, [sp], #4)
   3737c:	mov	r2, r7
   37380:	mov	r1, r8
   37384:	bl	1451c <memcpy@plt>
   37388:	ldr	r2, [r4, #20]
   3738c:	add	r2, r2, r7
   37390:	str	r2, [r4, #20]
   37394:	b	372d4 <flatcc_json_printer_int32_enum_struct_field@@Base+0xb0>
   37398:	mov	r1, r6
   3739c:	mov	r0, r4
   373a0:	ldrd	r6, [sp, #8]
   373a4:	mov	r3, r5
   373a8:	ldrd	r4, [sp]
   373ac:	ldrd	r8, [sp, #16]
   373b0:	ldr	sl, [sp, #24]
   373b4:	ldr	lr, [sp, #28]
   373b8:	add	sp, sp, #32
   373bc:	bx	r3
   373c0:	add	r1, r2, #1
   373c4:	mov	r3, #10
   373c8:	str	r1, [r4, #20]
   373cc:	strb	r3, [r2]
   373d0:	ldrb	r3, [r4, #25]
   373d4:	ldr	r1, [r4, #16]
   373d8:	ldr	r2, [r4, #32]
   373dc:	ldr	r0, [r4, #20]
   373e0:	mul	r9, r2, r3
   373e4:	add	r3, r0, r9
   373e8:	cmp	r1, r3
   373ec:	bcs	37404 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1e0>
   373f0:	mov	r1, r9
   373f4:	mov	r0, r4
   373f8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   373fc:	ldr	r2, [r4, #20]
   37400:	b	37294 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   37404:	mov	r2, r9
   37408:	mov	r1, #32
   3740c:	bl	14594 <memset@plt>
   37410:	ldr	r2, [r4, #20]
   37414:	add	r2, r2, r9
   37418:	str	r2, [r4, #20]
   3741c:	b	37294 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>

00037420 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37420:	cmp	r1, #0
   37424:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37428:	mov	r4, r0
   3742c:	strd	r6, [sp, #8]
   37430:	strd	r8, [sp, #16]
   37434:	str	sl, [sp, #24]
   37438:	str	lr, [sp, #28]
   3743c:	ldrd	r6, [r2, r3]
   37440:	ldr	r2, [r0, #20]
   37444:	ldr	r9, [sp, #32]
   37448:	ldr	r8, [sp, #36]	; 0x24
   3744c:	ldr	r5, [sp, #40]	; 0x28
   37450:	beq	37468 <flatcc_json_printer_int64_enum_struct_field@@Base+0x48>
   37454:	add	r1, r2, #1
   37458:	mov	r3, #44	; 0x2c
   3745c:	str	r1, [r0, #20]
   37460:	strb	r3, [r2]
   37464:	ldr	r2, [r0, #20]
   37468:	ldrb	r1, [r4, #25]
   3746c:	cmp	r1, #0
   37470:	bne	375cc <flatcc_json_printer_int64_enum_struct_field@@Base+0x1ac>
   37474:	ldr	r3, [r4, #16]
   37478:	cmp	r3, r2
   3747c:	bhi	37490 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   37480:	mov	r0, r4
   37484:	ldr	r3, [r4, #44]	; 0x2c
   37488:	blx	r3
   3748c:	ldr	r2, [r4, #20]
   37490:	mov	r3, #34	; 0x22
   37494:	strb	r3, [r2]
   37498:	ldrb	r3, [r4, #26]
   3749c:	ldr	r2, [r4, #16]
   374a0:	ldr	r0, [r4, #20]
   374a4:	cmp	r3, #0
   374a8:	addeq	r0, r0, #1
   374ac:	add	r3, r0, r8
   374b0:	cmp	r2, r3
   374b4:	str	r0, [r4, #20]
   374b8:	bhi	37584 <flatcc_json_printer_int64_enum_struct_field@@Base+0x164>
   374bc:	mov	r2, r8
   374c0:	mov	r1, r9
   374c4:	mov	r0, r4
   374c8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   374cc:	ldr	r8, [r4, #20]
   374d0:	mov	r3, #34	; 0x22
   374d4:	mov	ip, #58	; 0x3a
   374d8:	mov	r0, #32
   374dc:	strb	r3, [r8]
   374e0:	ldrb	r3, [r4, #26]
   374e4:	ldr	r1, [r4, #20]
   374e8:	clz	r3, r3
   374ec:	lsr	r3, r3, #5
   374f0:	add	r2, r1, r3
   374f4:	add	r2, r2, #1
   374f8:	str	r2, [r4, #20]
   374fc:	strb	ip, [r1, r3]
   37500:	ldr	r3, [r4, #20]
   37504:	strb	r0, [r3]
   37508:	ldrb	r3, [r4, #25]
   3750c:	ldr	r1, [r4, #20]
   37510:	ldrb	r0, [r4, #27]
   37514:	adds	r3, r3, #0
   37518:	movne	r3, #1
   3751c:	add	r2, r1, r3
   37520:	cmp	r0, #0
   37524:	str	r2, [r4, #20]
   37528:	beq	375a0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x180>
   3752c:	cmp	r6, #0
   37530:	lsr	r5, r7, #31
   37534:	sbcs	r0, r7, #0
   37538:	bge	37550 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   3753c:	rsbs	r6, r6, #0
   37540:	mov	r0, #45	; 0x2d
   37544:	rsc	r7, r7, #0
   37548:	add	r2, r2, #1
   3754c:	strb	r0, [r1, r3]
   37550:	mov	r0, r6
   37554:	mov	r1, r7
   37558:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   3755c:	ldr	r3, [r4, #20]
   37560:	add	r0, r5, r0
   37564:	ldrd	r6, [sp, #8]
   37568:	ldrd	r8, [sp, #16]
   3756c:	add	r3, r3, r0
   37570:	ldr	sl, [sp, #24]
   37574:	str	r3, [r4, #20]
   37578:	ldrd	r4, [sp]
   3757c:	add	sp, sp, #28
   37580:	pop	{pc}		; (ldr pc, [sp], #4)
   37584:	mov	r2, r8
   37588:	mov	r1, r9
   3758c:	bl	1451c <memcpy@plt>
   37590:	ldr	r3, [r4, #20]
   37594:	add	r8, r3, r8
   37598:	str	r8, [r4, #20]
   3759c:	b	374d0 <flatcc_json_printer_int64_enum_struct_field@@Base+0xb0>
   375a0:	mov	r2, r6
   375a4:	mov	r3, r7
   375a8:	ldrd	r6, [sp, #8]
   375ac:	mov	r0, r4
   375b0:	mov	r1, r5
   375b4:	ldrd	r4, [sp]
   375b8:	ldrd	r8, [sp, #16]
   375bc:	ldr	sl, [sp, #24]
   375c0:	ldr	lr, [sp, #28]
   375c4:	add	sp, sp, #32
   375c8:	bx	r1
   375cc:	add	r1, r2, #1
   375d0:	mov	r3, #10
   375d4:	str	r1, [r4, #20]
   375d8:	strb	r3, [r2]
   375dc:	ldrb	r3, [r4, #25]
   375e0:	ldr	r1, [r4, #16]
   375e4:	ldr	r2, [r4, #32]
   375e8:	ldr	r0, [r4, #20]
   375ec:	mul	sl, r2, r3
   375f0:	add	r3, r0, sl
   375f4:	cmp	r1, r3
   375f8:	bcs	37610 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f0>
   375fc:	mov	r1, sl
   37600:	mov	r0, r4
   37604:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37608:	ldr	r2, [r4, #20]
   3760c:	b	37490 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   37610:	mov	r2, sl
   37614:	mov	r1, #32
   37618:	bl	14594 <memset@plt>
   3761c:	ldr	r2, [r4, #20]
   37620:	add	r2, r2, sl
   37624:	str	r2, [r4, #20]
   37628:	b	37490 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>

0003762c <flatcc_json_printer_bool_enum_struct_field@@Base>:
   3762c:	cmp	r1, #0
   37630:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37634:	mov	r4, r0
   37638:	strd	r6, [sp, #8]
   3763c:	strd	r8, [sp, #16]
   37640:	str	sl, [sp, #24]
   37644:	str	lr, [sp, #28]
   37648:	ldrb	r5, [r2, r3]
   3764c:	ldr	r2, [r0, #20]
   37650:	ldr	r8, [sp, #32]
   37654:	ldr	r7, [sp, #36]	; 0x24
   37658:	ldr	r6, [sp, #40]	; 0x28
   3765c:	beq	37674 <flatcc_json_printer_bool_enum_struct_field@@Base+0x48>
   37660:	add	r1, r2, #1
   37664:	mov	r3, #44	; 0x2c
   37668:	str	r1, [r0, #20]
   3766c:	strb	r3, [r2]
   37670:	ldr	r2, [r0, #20]
   37674:	ldrb	r1, [r4, #25]
   37678:	cmp	r1, #0
   3767c:	bne	377a4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x178>
   37680:	ldr	r3, [r4, #16]
   37684:	cmp	r3, r2
   37688:	bhi	3769c <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   3768c:	mov	r0, r4
   37690:	ldr	r3, [r4, #44]	; 0x2c
   37694:	blx	r3
   37698:	ldr	r2, [r4, #20]
   3769c:	mov	r3, #34	; 0x22
   376a0:	strb	r3, [r2]
   376a4:	ldrb	r3, [r4, #26]
   376a8:	ldr	r2, [r4, #16]
   376ac:	ldr	r0, [r4, #20]
   376b0:	cmp	r3, #0
   376b4:	addeq	r0, r0, #1
   376b8:	add	r3, r0, r7
   376bc:	cmp	r2, r3
   376c0:	str	r0, [r4, #20]
   376c4:	bhi	3775c <flatcc_json_printer_bool_enum_struct_field@@Base+0x130>
   376c8:	mov	r2, r7
   376cc:	mov	r1, r8
   376d0:	mov	r0, r4
   376d4:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   376d8:	ldr	r2, [r4, #20]
   376dc:	mov	r3, #34	; 0x22
   376e0:	mov	ip, #58	; 0x3a
   376e4:	mov	r0, #32
   376e8:	strb	r3, [r2]
   376ec:	ldrb	r3, [r4, #26]
   376f0:	ldr	r1, [r4, #20]
   376f4:	clz	r3, r3
   376f8:	lsr	r3, r3, #5
   376fc:	add	r2, r1, r3
   37700:	add	r2, r2, #1
   37704:	str	r2, [r4, #20]
   37708:	strb	ip, [r1, r3]
   3770c:	ldr	r3, [r4, #20]
   37710:	strb	r0, [r3]
   37714:	ldrb	r2, [r4, #25]
   37718:	ldr	r1, [r4, #20]
   3771c:	ldrb	r3, [r4, #27]
   37720:	cmp	r2, #0
   37724:	addne	r1, r1, #1
   37728:	cmp	r3, #0
   3772c:	str	r1, [r4, #20]
   37730:	bne	37778 <flatcc_json_printer_bool_enum_struct_field@@Base+0x14c>
   37734:	mov	r1, r5
   37738:	mov	r0, r4
   3773c:	ldrd	r4, [sp]
   37740:	mov	r3, r6
   37744:	ldrd	r6, [sp, #8]
   37748:	ldrd	r8, [sp, #16]
   3774c:	ldr	sl, [sp, #24]
   37750:	ldr	lr, [sp, #28]
   37754:	add	sp, sp, #32
   37758:	bx	r3
   3775c:	mov	r2, r7
   37760:	mov	r1, r8
   37764:	bl	1451c <memcpy@plt>
   37768:	ldr	r2, [r4, #20]
   3776c:	add	r2, r2, r7
   37770:	str	r2, [r4, #20]
   37774:	b	376dc <flatcc_json_printer_bool_enum_struct_field@@Base+0xb0>
   37778:	mov	r0, r5
   3777c:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   37780:	ldr	r3, [r4, #20]
   37784:	ldrd	r6, [sp, #8]
   37788:	ldrd	r8, [sp, #16]
   3778c:	add	r0, r3, r0
   37790:	ldr	sl, [sp, #24]
   37794:	str	r0, [r4, #20]
   37798:	ldrd	r4, [sp]
   3779c:	add	sp, sp, #28
   377a0:	pop	{pc}		; (ldr pc, [sp], #4)
   377a4:	add	r1, r2, #1
   377a8:	mov	r3, #10
   377ac:	str	r1, [r4, #20]
   377b0:	strb	r3, [r2]
   377b4:	ldrb	r3, [r4, #25]
   377b8:	ldr	r1, [r4, #16]
   377bc:	ldr	r2, [r4, #32]
   377c0:	ldr	r0, [r4, #20]
   377c4:	mul	r9, r2, r3
   377c8:	add	r3, r0, r9
   377cc:	cmp	r1, r3
   377d0:	bcs	377e8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1bc>
   377d4:	mov	r1, r9
   377d8:	mov	r0, r4
   377dc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   377e0:	ldr	r2, [r4, #20]
   377e4:	b	3769c <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   377e8:	mov	r2, r9
   377ec:	mov	r1, #32
   377f0:	bl	14594 <memset@plt>
   377f4:	ldr	r2, [r4, #20]
   377f8:	add	r2, r2, r9
   377fc:	str	r2, [r4, #20]
   37800:	b	3769c <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>

00037804 <flatcc_json_printer_uint8_vector_field@@Base>:
   37804:	ldr	ip, [r1, #8]
   37808:	add	r2, r2, #2
   3780c:	lsl	r2, r2, #1
   37810:	cmp	ip, r2
   37814:	bxle	lr
   37818:	ldr	ip, [r1, #4]
   3781c:	ldrh	r2, [ip, r2]
   37820:	cmp	r2, #0
   37824:	bxeq	lr
   37828:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3782c:	ldr	ip, [r1]
   37830:	strd	r6, [sp, #8]
   37834:	str	lr, [sp, #28]
   37838:	strd	r8, [sp, #16]
   3783c:	str	sl, [sp, #24]
   37840:	adds	lr, ip, r2
   37844:	beq	379dc <flatcc_json_printer_uint8_vector_field@@Base+0x1d8>
   37848:	ldr	r4, [r1, #16]
   3784c:	add	r5, r4, #1
   37850:	cmp	r4, #0
   37854:	str	r5, [r1, #16]
   37858:	beq	37870 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   3785c:	ldr	r1, [r0, #20]
   37860:	mov	r4, #44	; 0x2c
   37864:	add	r5, r1, #1
   37868:	str	r5, [r0, #20]
   3786c:	strb	r4, [r1]
   37870:	mov	r1, r3
   37874:	ldr	r3, [ip, r2]
   37878:	mov	r4, r0
   3787c:	ldr	r2, [sp, #32]
   37880:	add	r6, lr, r3
   37884:	ldr	r7, [lr, r3]
   37888:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3788c:	ldr	r2, [r4, #20]
   37890:	mov	r1, #91	; 0x5b
   37894:	ldr	r3, [r4, #32]
   37898:	cmp	r7, #0
   3789c:	add	r0, r2, #1
   378a0:	add	r3, r3, #1
   378a4:	str	r0, [r4, #20]
   378a8:	str	r3, [r4, #32]
   378ac:	strb	r1, [r2]
   378b0:	beq	379bc <flatcc_json_printer_uint8_vector_field@@Base+0x1b8>
   378b4:	ldrb	r3, [r4, #25]
   378b8:	ldr	r1, [r4, #20]
   378bc:	cmp	r3, #0
   378c0:	bne	379f4 <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   378c4:	ldr	r2, [r4, #16]
   378c8:	cmp	r2, r1
   378cc:	bhi	378e4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   378d0:	mov	r1, r3
   378d4:	mov	r0, r4
   378d8:	ldr	r3, [r4, #44]	; 0x2c
   378dc:	blx	r3
   378e0:	ldr	r1, [r4, #20]
   378e4:	add	r5, r6, #5
   378e8:	ldrb	r0, [r6, #4]
   378ec:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   378f0:	ldr	r3, [r4, #20]
   378f4:	cmp	r7, #1
   378f8:	add	r0, r3, r0
   378fc:	str	r0, [r4, #20]
   37900:	beq	379c0 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   37904:	add	r3, r7, #4
   37908:	mov	r8, #10
   3790c:	mov	r7, #44	; 0x2c
   37910:	add	r6, r6, r3
   37914:	b	37958 <flatcc_json_printer_uint8_vector_field@@Base+0x154>
   37918:	ldr	r3, [r4, #16]
   3791c:	mov	r0, r4
   37920:	ldr	r2, [r4, #20]
   37924:	cmp	r2, r3
   37928:	bcc	37938 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   3792c:	ldr	r3, [r4, #44]	; 0x2c
   37930:	blx	r3
   37934:	ldr	r2, [r4, #20]
   37938:	mov	r1, r2
   3793c:	ldrb	r0, [r5], #1
   37940:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   37944:	ldr	r3, [r4, #20]
   37948:	cmp	r5, r6
   3794c:	add	r0, r3, r0
   37950:	str	r0, [r4, #20]
   37954:	beq	379c0 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   37958:	add	r3, r0, #1
   3795c:	str	r3, [r4, #20]
   37960:	strb	r7, [r0]
   37964:	ldrb	r1, [r4, #25]
   37968:	cmp	r1, #0
   3796c:	beq	37918 <flatcc_json_printer_uint8_vector_field@@Base+0x114>
   37970:	ldr	r3, [r4, #20]
   37974:	mov	r1, #32
   37978:	mov	r0, r4
   3797c:	add	r2, r3, #1
   37980:	str	r2, [r4, #20]
   37984:	strb	r8, [r3]
   37988:	ldrb	r2, [r4, #25]
   3798c:	ldr	lr, [r4, #16]
   37990:	ldr	r9, [r4, #32]
   37994:	ldr	r3, [r4, #20]
   37998:	mul	r9, r9, r2
   3799c:	add	ip, r3, r9
   379a0:	mov	r2, r9
   379a4:	cmp	lr, ip
   379a8:	bcs	37a38 <flatcc_json_printer_uint8_vector_field@@Base+0x234>
   379ac:	mov	r1, r9
   379b0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   379b4:	ldr	r2, [r4, #20]
   379b8:	b	37938 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   379bc:	ldr	r0, [r4, #20]
   379c0:	add	r3, r0, #1
   379c4:	ldrb	r2, [r4, #25]
   379c8:	cmp	r2, #0
   379cc:	bne	37a50 <flatcc_json_printer_uint8_vector_field@@Base+0x24c>
   379d0:	mov	r2, #93	; 0x5d
   379d4:	str	r3, [r4, #20]
   379d8:	strb	r2, [r0]
   379dc:	ldrd	r4, [sp]
   379e0:	ldrd	r6, [sp, #8]
   379e4:	ldrd	r8, [sp, #16]
   379e8:	ldr	sl, [sp, #24]
   379ec:	add	sp, sp, #28
   379f0:	pop	{pc}		; (ldr pc, [sp], #4)
   379f4:	add	r2, r1, #1
   379f8:	mov	r3, #10
   379fc:	str	r2, [r4, #20]
   37a00:	strb	r3, [r1]
   37a04:	ldrb	r5, [r4, #25]
   37a08:	ldr	r2, [r4, #16]
   37a0c:	ldr	r1, [r4, #32]
   37a10:	ldr	r0, [r4, #20]
   37a14:	mul	r5, r1, r5
   37a18:	add	r3, r0, r5
   37a1c:	cmp	r2, r3
   37a20:	bcs	37ab8 <flatcc_json_printer_uint8_vector_field@@Base+0x2b4>
   37a24:	mov	r1, r5
   37a28:	mov	r0, r4
   37a2c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37a30:	ldr	r1, [r4, #20]
   37a34:	b	378e4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>
   37a38:	mov	r0, r3
   37a3c:	bl	14594 <memset@plt>
   37a40:	ldr	r2, [r4, #20]
   37a44:	add	r2, r2, r9
   37a48:	str	r2, [r4, #20]
   37a4c:	b	37938 <flatcc_json_printer_uint8_vector_field@@Base+0x134>
   37a50:	mov	r2, #10
   37a54:	str	r3, [r4, #20]
   37a58:	strb	r2, [r0]
   37a5c:	ldrb	r5, [r4, #25]
   37a60:	ldr	r3, [r4, #32]
   37a64:	ldr	r2, [r4, #16]
   37a68:	ldr	r0, [r4, #20]
   37a6c:	sub	r3, r3, #1
   37a70:	mul	r5, r3, r5
   37a74:	str	r3, [r4, #32]
   37a78:	add	r3, r0, r5
   37a7c:	cmp	r2, r3
   37a80:	bcs	37a9c <flatcc_json_printer_uint8_vector_field@@Base+0x298>
   37a84:	mov	r0, r4
   37a88:	mov	r1, r5
   37a8c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37a90:	ldr	r0, [r4, #20]
   37a94:	add	r3, r0, #1
   37a98:	b	379d0 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37a9c:	mov	r2, r5
   37aa0:	mov	r1, #32
   37aa4:	bl	14594 <memset@plt>
   37aa8:	ldr	r0, [r4, #20]
   37aac:	add	r0, r0, r5
   37ab0:	add	r3, r0, #1
   37ab4:	b	379d0 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37ab8:	mov	r1, #32
   37abc:	mov	r2, r5
   37ac0:	bl	14594 <memset@plt>
   37ac4:	ldr	r1, [r4, #20]
   37ac8:	add	r1, r1, r5
   37acc:	str	r1, [r4, #20]
   37ad0:	b	378e4 <flatcc_json_printer_uint8_vector_field@@Base+0xe0>

00037ad4 <flatcc_json_printer_utype_vector_field@@Base>:
   37ad4:	b	37804 <flatcc_json_printer_uint8_vector_field@@Base>

00037ad8 <flatcc_json_printer_uint16_vector_field@@Base>:
   37ad8:	ldr	ip, [r1, #8]
   37adc:	add	r2, r2, #2
   37ae0:	lsl	r2, r2, #1
   37ae4:	cmp	ip, r2
   37ae8:	bxle	lr
   37aec:	ldr	ip, [r1, #4]
   37af0:	ldrh	r2, [ip, r2]
   37af4:	cmp	r2, #0
   37af8:	bxeq	lr
   37afc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37b00:	strd	r6, [sp, #8]
   37b04:	str	lr, [sp, #28]
   37b08:	ldr	lr, [r1]
   37b0c:	strd	r8, [sp, #16]
   37b10:	str	sl, [sp, #24]
   37b14:	adds	r7, lr, r2
   37b18:	beq	37d58 <flatcc_json_printer_uint16_vector_field@@Base+0x280>
   37b1c:	ldr	r4, [r1, #16]
   37b20:	ldr	ip, [r0, #20]
   37b24:	cmp	r4, #0
   37b28:	add	r4, r4, #1
   37b2c:	str	r4, [r1, #16]
   37b30:	beq	37b48 <flatcc_json_printer_uint16_vector_field@@Base+0x70>
   37b34:	add	r4, ip, #1
   37b38:	mov	r1, #44	; 0x2c
   37b3c:	str	r4, [r0, #20]
   37b40:	strb	r1, [ip]
   37b44:	ldr	ip, [r0, #20]
   37b48:	mov	r6, r3
   37b4c:	mov	r4, r0
   37b50:	ldrb	r1, [r0, #25]
   37b54:	ldr	r3, [lr, r2]
   37b58:	cmp	r1, #0
   37b5c:	add	r5, r7, r3
   37b60:	ldr	r7, [r7, r3]
   37b64:	bne	37dec <flatcc_json_printer_uint16_vector_field@@Base+0x314>
   37b68:	ldr	r3, [r0, #16]
   37b6c:	cmp	ip, r3
   37b70:	bcs	37d80 <flatcc_json_printer_uint16_vector_field@@Base+0x2a8>
   37b74:	mov	r3, #34	; 0x22
   37b78:	mov	r1, r6
   37b7c:	strb	r3, [ip]
   37b80:	ldrb	r3, [r4, #26]
   37b84:	ldr	r2, [r4, #16]
   37b88:	ldr	r0, [r4, #20]
   37b8c:	cmp	r3, #0
   37b90:	addeq	r0, r0, #1
   37b94:	ldr	r3, [sp, #32]
   37b98:	str	r0, [r4, #20]
   37b9c:	add	r3, r0, r3
   37ba0:	cmp	r2, r3
   37ba4:	ldr	r2, [sp, #32]
   37ba8:	bls	37d70 <flatcc_json_printer_uint16_vector_field@@Base+0x298>
   37bac:	bl	1451c <memcpy@plt>
   37bb0:	ldr	r3, [r4, #20]
   37bb4:	ldr	r2, [sp, #32]
   37bb8:	add	r3, r3, r2
   37bbc:	str	r3, [r4, #20]
   37bc0:	mov	r2, #34	; 0x22
   37bc4:	mov	lr, #58	; 0x3a
   37bc8:	mov	ip, #32
   37bcc:	mov	r1, #91	; 0x5b
   37bd0:	strb	r2, [r3]
   37bd4:	ldrb	r3, [r4, #26]
   37bd8:	ldr	r0, [r4, #20]
   37bdc:	clz	r3, r3
   37be0:	lsr	r3, r3, #5
   37be4:	add	r2, r0, r3
   37be8:	add	r2, r2, #1
   37bec:	str	r2, [r4, #20]
   37bf0:	strb	lr, [r0, r3]
   37bf4:	ldr	r3, [r4, #20]
   37bf8:	strb	ip, [r3]
   37bfc:	ldrb	r3, [r4, #25]
   37c00:	ldr	lr, [r4, #20]
   37c04:	ldr	r2, [r4, #32]
   37c08:	adds	r3, r3, #0
   37c0c:	movne	r3, #1
   37c10:	cmp	r7, #0
   37c14:	add	r0, lr, r3
   37c18:	add	r0, r0, #1
   37c1c:	add	r2, r2, #1
   37c20:	str	r0, [r4, #20]
   37c24:	str	r2, [r4, #32]
   37c28:	strb	r1, [lr, r3]
   37c2c:	beq	37d38 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   37c30:	ldrb	r3, [r4, #25]
   37c34:	ldr	r1, [r4, #20]
   37c38:	cmp	r3, #0
   37c3c:	bne	37d90 <flatcc_json_printer_uint16_vector_field@@Base+0x2b8>
   37c40:	ldr	r2, [r4, #16]
   37c44:	cmp	r2, r1
   37c48:	bhi	37c60 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37c4c:	mov	r1, r3
   37c50:	mov	r0, r4
   37c54:	ldr	r3, [r4, #44]	; 0x2c
   37c58:	blx	r3
   37c5c:	ldr	r1, [r4, #20]
   37c60:	add	r6, r5, #6
   37c64:	ldrh	r0, [r5, #4]
   37c68:	sub	r5, r7, #2
   37c6c:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   37c70:	ldr	r3, [r4, #20]
   37c74:	cmp	r7, #1
   37c78:	add	r0, r3, r0
   37c7c:	str	r0, [r4, #20]
   37c80:	beq	37d3c <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   37c84:	mov	r7, #44	; 0x2c
   37c88:	mov	r8, #10
   37c8c:	b	37cd4 <flatcc_json_printer_uint16_vector_field@@Base+0x1fc>
   37c90:	ldr	r3, [r4, #16]
   37c94:	mov	r0, r4
   37c98:	ldr	r2, [r4, #20]
   37c9c:	cmp	r2, r3
   37ca0:	bcc	37cb0 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   37ca4:	ldr	r3, [r4, #44]	; 0x2c
   37ca8:	blx	r3
   37cac:	ldr	r2, [r4, #20]
   37cb0:	mov	r1, r2
   37cb4:	sub	r5, r5, #1
   37cb8:	ldrh	r0, [r6], #2
   37cbc:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   37cc0:	ldr	r3, [r4, #20]
   37cc4:	cmn	r5, #1
   37cc8:	add	r0, r3, r0
   37ccc:	str	r0, [r4, #20]
   37cd0:	beq	37d3c <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   37cd4:	add	r3, r0, #1
   37cd8:	str	r3, [r4, #20]
   37cdc:	strb	r7, [r0]
   37ce0:	ldrb	r1, [r4, #25]
   37ce4:	cmp	r1, #0
   37ce8:	beq	37c90 <flatcc_json_printer_uint16_vector_field@@Base+0x1b8>
   37cec:	ldr	r3, [r4, #20]
   37cf0:	mov	r1, #32
   37cf4:	mov	r0, r4
   37cf8:	add	r2, r3, #1
   37cfc:	str	r2, [r4, #20]
   37d00:	strb	r8, [r3]
   37d04:	ldrb	r2, [r4, #25]
   37d08:	ldr	lr, [r4, #16]
   37d0c:	ldr	r9, [r4, #32]
   37d10:	ldr	r3, [r4, #20]
   37d14:	mul	r9, r9, r2
   37d18:	add	ip, r3, r9
   37d1c:	mov	r2, r9
   37d20:	cmp	lr, ip
   37d24:	bcs	37dd4 <flatcc_json_printer_uint16_vector_field@@Base+0x2fc>
   37d28:	mov	r1, r9
   37d2c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37d30:	ldr	r2, [r4, #20]
   37d34:	b	37cb0 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   37d38:	ldr	r0, [r4, #20]
   37d3c:	add	r3, r0, #1
   37d40:	ldrb	r2, [r4, #25]
   37d44:	cmp	r2, #0
   37d48:	bne	37e30 <flatcc_json_printer_uint16_vector_field@@Base+0x358>
   37d4c:	mov	r2, #93	; 0x5d
   37d50:	str	r3, [r4, #20]
   37d54:	strb	r2, [r0]
   37d58:	ldrd	r4, [sp]
   37d5c:	ldrd	r6, [sp, #8]
   37d60:	ldrd	r8, [sp, #16]
   37d64:	ldr	sl, [sp, #24]
   37d68:	add	sp, sp, #28
   37d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   37d70:	mov	r0, r4
   37d74:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   37d78:	ldr	r3, [r4, #20]
   37d7c:	b	37bc0 <flatcc_json_printer_uint16_vector_field@@Base+0xe8>
   37d80:	ldr	r3, [r0, #44]	; 0x2c
   37d84:	blx	r3
   37d88:	ldr	ip, [r4, #20]
   37d8c:	b	37b74 <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   37d90:	add	r2, r1, #1
   37d94:	mov	r3, #10
   37d98:	str	r2, [r4, #20]
   37d9c:	strb	r3, [r1]
   37da0:	ldrb	r6, [r4, #25]
   37da4:	ldr	r2, [r4, #16]
   37da8:	ldr	r1, [r4, #32]
   37dac:	ldr	r0, [r4, #20]
   37db0:	mul	r6, r1, r6
   37db4:	add	r3, r0, r6
   37db8:	cmp	r2, r3
   37dbc:	bcs	37eb4 <flatcc_json_printer_uint16_vector_field@@Base+0x3dc>
   37dc0:	mov	r1, r6
   37dc4:	mov	r0, r4
   37dc8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37dcc:	ldr	r1, [r4, #20]
   37dd0:	b	37c60 <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37dd4:	mov	r0, r3
   37dd8:	bl	14594 <memset@plt>
   37ddc:	ldr	r2, [r4, #20]
   37de0:	add	r2, r2, r9
   37de4:	str	r2, [r4, #20]
   37de8:	b	37cb0 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   37dec:	add	r2, ip, #1
   37df0:	mov	r3, #10
   37df4:	str	r2, [r0, #20]
   37df8:	strb	r3, [ip]
   37dfc:	ldrb	r8, [r0, #25]
   37e00:	ldr	ip, [r4, #32]
   37e04:	ldr	r2, [r0, #16]
   37e08:	ldr	r0, [r0, #20]
   37e0c:	mul	r8, ip, r8
   37e10:	add	r3, r0, r8
   37e14:	cmp	r2, r3
   37e18:	bcs	37e7c <flatcc_json_printer_uint16_vector_field@@Base+0x3a4>
   37e1c:	mov	r1, r8
   37e20:	mov	r0, r4
   37e24:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37e28:	ldr	ip, [r4, #20]
   37e2c:	b	37b74 <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   37e30:	mov	r2, #10
   37e34:	str	r3, [r4, #20]
   37e38:	strb	r2, [r0]
   37e3c:	ldrb	r5, [r4, #25]
   37e40:	ldr	r3, [r4, #32]
   37e44:	ldr	r2, [r4, #16]
   37e48:	ldr	r0, [r4, #20]
   37e4c:	sub	r3, r3, #1
   37e50:	mul	r5, r3, r5
   37e54:	str	r3, [r4, #32]
   37e58:	add	r3, r0, r5
   37e5c:	cmp	r2, r3
   37e60:	bcs	37e98 <flatcc_json_printer_uint16_vector_field@@Base+0x3c0>
   37e64:	mov	r0, r4
   37e68:	mov	r1, r5
   37e6c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   37e70:	ldr	r0, [r4, #20]
   37e74:	add	r3, r0, #1
   37e78:	b	37d4c <flatcc_json_printer_uint16_vector_field@@Base+0x274>
   37e7c:	mov	r2, r8
   37e80:	mov	r1, #32
   37e84:	bl	14594 <memset@plt>
   37e88:	ldr	ip, [r4, #20]
   37e8c:	add	ip, ip, r8
   37e90:	str	ip, [r4, #20]
   37e94:	b	37b74 <flatcc_json_printer_uint16_vector_field@@Base+0x9c>
   37e98:	mov	r2, r5
   37e9c:	mov	r1, #32
   37ea0:	bl	14594 <memset@plt>
   37ea4:	ldr	r0, [r4, #20]
   37ea8:	add	r0, r0, r5
   37eac:	add	r3, r0, #1
   37eb0:	b	37d4c <flatcc_json_printer_uint16_vector_field@@Base+0x274>
   37eb4:	mov	r1, ip
   37eb8:	mov	r2, r6
   37ebc:	bl	14594 <memset@plt>
   37ec0:	ldr	r1, [r4, #20]
   37ec4:	add	r1, r1, r6
   37ec8:	str	r1, [r4, #20]
   37ecc:	b	37c60 <flatcc_json_printer_uint16_vector_field@@Base+0x188>

00037ed0 <flatcc_json_printer_uint32_vector_field@@Base>:
   37ed0:	ldr	ip, [r1, #8]
   37ed4:	add	r2, r2, #2
   37ed8:	lsl	r2, r2, #1
   37edc:	cmp	ip, r2
   37ee0:	bxle	lr
   37ee4:	ldr	ip, [r1, #4]
   37ee8:	ldrh	r2, [ip, r2]
   37eec:	cmp	r2, #0
   37ef0:	bxeq	lr
   37ef4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37ef8:	ldr	ip, [r1]
   37efc:	strd	r6, [sp, #8]
   37f00:	str	lr, [sp, #28]
   37f04:	strd	r8, [sp, #16]
   37f08:	str	sl, [sp, #24]
   37f0c:	adds	lr, ip, r2
   37f10:	beq	380a8 <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   37f14:	ldr	r4, [r1, #16]
   37f18:	add	r5, r4, #1
   37f1c:	cmp	r4, #0
   37f20:	str	r5, [r1, #16]
   37f24:	beq	37f3c <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   37f28:	ldr	r1, [r0, #20]
   37f2c:	mov	r4, #44	; 0x2c
   37f30:	add	r5, r1, #1
   37f34:	str	r5, [r0, #20]
   37f38:	strb	r4, [r1]
   37f3c:	mov	r1, r3
   37f40:	ldr	r3, [ip, r2]
   37f44:	mov	r4, r0
   37f48:	ldr	r2, [sp, #32]
   37f4c:	add	r5, lr, r3
   37f50:	ldr	r7, [lr, r3]
   37f54:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   37f58:	ldr	r2, [r4, #20]
   37f5c:	mov	r1, #91	; 0x5b
   37f60:	ldr	r3, [r4, #32]
   37f64:	cmp	r7, #0
   37f68:	add	r0, r2, #1
   37f6c:	add	r3, r3, #1
   37f70:	str	r0, [r4, #20]
   37f74:	str	r3, [r4, #32]
   37f78:	strb	r1, [r2]
   37f7c:	beq	38088 <flatcc_json_printer_uint32_vector_field@@Base+0x1b8>
   37f80:	ldrb	r3, [r4, #25]
   37f84:	ldr	r1, [r4, #20]
   37f88:	cmp	r3, #0
   37f8c:	bne	380c0 <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   37f90:	ldr	r2, [r4, #16]
   37f94:	cmp	r2, r1
   37f98:	bhi	37fb0 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   37f9c:	mov	r1, r3
   37fa0:	mov	r0, r4
   37fa4:	ldr	r3, [r4, #44]	; 0x2c
   37fa8:	blx	r3
   37fac:	ldr	r1, [r4, #20]
   37fb0:	add	r6, r5, #8
   37fb4:	ldr	r0, [r5, #4]
   37fb8:	sub	r5, r7, #2
   37fbc:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   37fc0:	ldr	r3, [r4, #20]
   37fc4:	cmp	r7, #1
   37fc8:	add	r0, r3, r0
   37fcc:	str	r0, [r4, #20]
   37fd0:	beq	3808c <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   37fd4:	mov	r7, #44	; 0x2c
   37fd8:	mov	r8, #10
   37fdc:	b	38024 <flatcc_json_printer_uint32_vector_field@@Base+0x154>
   37fe0:	ldr	r3, [r4, #16]
   37fe4:	mov	r0, r4
   37fe8:	ldr	r2, [r4, #20]
   37fec:	cmp	r2, r3
   37ff0:	bcc	38000 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   37ff4:	ldr	r3, [r4, #44]	; 0x2c
   37ff8:	blx	r3
   37ffc:	ldr	r2, [r4, #20]
   38000:	mov	r1, r2
   38004:	sub	r5, r5, #1
   38008:	ldr	r0, [r6], #4
   3800c:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   38010:	ldr	r3, [r4, #20]
   38014:	cmn	r5, #1
   38018:	add	r0, r3, r0
   3801c:	str	r0, [r4, #20]
   38020:	beq	3808c <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   38024:	add	r3, r0, #1
   38028:	str	r3, [r4, #20]
   3802c:	strb	r7, [r0]
   38030:	ldrb	r1, [r4, #25]
   38034:	cmp	r1, #0
   38038:	beq	37fe0 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   3803c:	ldr	r3, [r4, #20]
   38040:	mov	r1, #32
   38044:	mov	r0, r4
   38048:	add	r2, r3, #1
   3804c:	str	r2, [r4, #20]
   38050:	strb	r8, [r3]
   38054:	ldrb	r2, [r4, #25]
   38058:	ldr	lr, [r4, #16]
   3805c:	ldr	r9, [r4, #32]
   38060:	ldr	r3, [r4, #20]
   38064:	mul	r9, r9, r2
   38068:	add	ip, r3, r9
   3806c:	mov	r2, r9
   38070:	cmp	lr, ip
   38074:	bcs	38104 <flatcc_json_printer_uint32_vector_field@@Base+0x234>
   38078:	mov	r1, r9
   3807c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38080:	ldr	r2, [r4, #20]
   38084:	b	38000 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   38088:	ldr	r0, [r4, #20]
   3808c:	add	r3, r0, #1
   38090:	ldrb	r2, [r4, #25]
   38094:	cmp	r2, #0
   38098:	bne	3811c <flatcc_json_printer_uint32_vector_field@@Base+0x24c>
   3809c:	mov	r2, #93	; 0x5d
   380a0:	str	r3, [r4, #20]
   380a4:	strb	r2, [r0]
   380a8:	ldrd	r4, [sp]
   380ac:	ldrd	r6, [sp, #8]
   380b0:	ldrd	r8, [sp, #16]
   380b4:	ldr	sl, [sp, #24]
   380b8:	add	sp, sp, #28
   380bc:	pop	{pc}		; (ldr pc, [sp], #4)
   380c0:	add	r2, r1, #1
   380c4:	mov	r3, #10
   380c8:	str	r2, [r4, #20]
   380cc:	strb	r3, [r1]
   380d0:	ldrb	r6, [r4, #25]
   380d4:	ldr	r2, [r4, #16]
   380d8:	ldr	r1, [r4, #32]
   380dc:	ldr	r0, [r4, #20]
   380e0:	mul	r6, r1, r6
   380e4:	add	r3, r0, r6
   380e8:	cmp	r2, r3
   380ec:	bcs	38184 <flatcc_json_printer_uint32_vector_field@@Base+0x2b4>
   380f0:	mov	r1, r6
   380f4:	mov	r0, r4
   380f8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   380fc:	ldr	r1, [r4, #20]
   38100:	b	37fb0 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>
   38104:	mov	r0, r3
   38108:	bl	14594 <memset@plt>
   3810c:	ldr	r2, [r4, #20]
   38110:	add	r2, r2, r9
   38114:	str	r2, [r4, #20]
   38118:	b	38000 <flatcc_json_printer_uint32_vector_field@@Base+0x130>
   3811c:	mov	r2, #10
   38120:	str	r3, [r4, #20]
   38124:	strb	r2, [r0]
   38128:	ldrb	r5, [r4, #25]
   3812c:	ldr	r3, [r4, #32]
   38130:	ldr	r2, [r4, #16]
   38134:	ldr	r0, [r4, #20]
   38138:	sub	r3, r3, #1
   3813c:	mul	r5, r3, r5
   38140:	str	r3, [r4, #32]
   38144:	add	r3, r0, r5
   38148:	cmp	r2, r3
   3814c:	bcs	38168 <flatcc_json_printer_uint32_vector_field@@Base+0x298>
   38150:	mov	r0, r4
   38154:	mov	r1, r5
   38158:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3815c:	ldr	r0, [r4, #20]
   38160:	add	r3, r0, #1
   38164:	b	3809c <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   38168:	mov	r2, r5
   3816c:	mov	r1, #32
   38170:	bl	14594 <memset@plt>
   38174:	ldr	r0, [r4, #20]
   38178:	add	r0, r0, r5
   3817c:	add	r3, r0, #1
   38180:	b	3809c <flatcc_json_printer_uint32_vector_field@@Base+0x1cc>
   38184:	mov	r1, #32
   38188:	mov	r2, r6
   3818c:	bl	14594 <memset@plt>
   38190:	ldr	r1, [r4, #20]
   38194:	add	r1, r1, r6
   38198:	str	r1, [r4, #20]
   3819c:	b	37fb0 <flatcc_json_printer_uint32_vector_field@@Base+0xe0>

000381a0 <flatcc_json_printer_uint64_vector_field@@Base>:
   381a0:	ldr	ip, [r1, #8]
   381a4:	add	r2, r2, #2
   381a8:	lsl	r2, r2, #1
   381ac:	cmp	ip, r2
   381b0:	bxle	lr
   381b4:	ldr	ip, [r1, #4]
   381b8:	ldrh	r2, [ip, r2]
   381bc:	cmp	r2, #0
   381c0:	bxeq	lr
   381c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   381c8:	ldr	ip, [r1]
   381cc:	strd	r6, [sp, #8]
   381d0:	str	lr, [sp, #28]
   381d4:	strd	r8, [sp, #16]
   381d8:	str	sl, [sp, #24]
   381dc:	adds	lr, ip, r2
   381e0:	beq	38370 <flatcc_json_printer_uint64_vector_field@@Base+0x1d0>
   381e4:	ldr	r4, [r1, #16]
   381e8:	add	r5, r4, #1
   381ec:	cmp	r4, #0
   381f0:	str	r5, [r1, #16]
   381f4:	beq	3820c <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   381f8:	ldr	r1, [r0, #20]
   381fc:	mov	r4, #44	; 0x2c
   38200:	add	r5, r1, #1
   38204:	str	r5, [r0, #20]
   38208:	strb	r4, [r1]
   3820c:	mov	r1, r3
   38210:	ldr	r3, [ip, r2]
   38214:	mov	r4, r0
   38218:	ldr	r2, [sp, #32]
   3821c:	add	r5, lr, r3
   38220:	ldr	r7, [lr, r3]
   38224:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   38228:	ldr	r2, [r4, #20]
   3822c:	mov	r1, #91	; 0x5b
   38230:	ldr	r3, [r4, #32]
   38234:	cmp	r7, #0
   38238:	add	r0, r2, #1
   3823c:	add	r3, r3, #1
   38240:	str	r0, [r4, #20]
   38244:	str	r3, [r4, #32]
   38248:	strb	r1, [r2]
   3824c:	beq	38350 <flatcc_json_printer_uint64_vector_field@@Base+0x1b0>
   38250:	ldrb	r1, [r4, #25]
   38254:	ldr	r2, [r4, #20]
   38258:	cmp	r1, #0
   3825c:	bne	38388 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   38260:	ldr	r3, [r4, #16]
   38264:	cmp	r3, r2
   38268:	bhi	3827c <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3826c:	mov	r0, r4
   38270:	ldr	r3, [r4, #44]	; 0x2c
   38274:	blx	r3
   38278:	ldr	r2, [r4, #20]
   3827c:	add	r6, r5, #12
   38280:	ldrd	r0, [r5, #4]
   38284:	sub	r5, r7, #2
   38288:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   3828c:	ldr	r3, [r4, #20]
   38290:	cmp	r7, #1
   38294:	add	r0, r3, r0
   38298:	str	r0, [r4, #20]
   3829c:	beq	38354 <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   382a0:	mov	r7, #44	; 0x2c
   382a4:	mov	r8, #10
   382a8:	b	382ec <flatcc_json_printer_uint64_vector_field@@Base+0x14c>
   382ac:	ldr	r3, [r4, #16]
   382b0:	mov	r0, r4
   382b4:	ldr	r2, [r4, #20]
   382b8:	cmp	r2, r3
   382bc:	bcc	382cc <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   382c0:	ldr	r3, [r4, #44]	; 0x2c
   382c4:	blx	r3
   382c8:	ldr	r2, [r4, #20]
   382cc:	sub	r5, r5, #1
   382d0:	ldrd	r0, [r6], #8
   382d4:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   382d8:	ldr	r3, [r4, #20]
   382dc:	cmn	r5, #1
   382e0:	add	r0, r3, r0
   382e4:	str	r0, [r4, #20]
   382e8:	beq	38354 <flatcc_json_printer_uint64_vector_field@@Base+0x1b4>
   382ec:	add	r3, r0, #1
   382f0:	str	r3, [r4, #20]
   382f4:	strb	r7, [r0]
   382f8:	ldrb	r1, [r4, #25]
   382fc:	cmp	r1, #0
   38300:	beq	382ac <flatcc_json_printer_uint64_vector_field@@Base+0x10c>
   38304:	ldr	r3, [r4, #20]
   38308:	mov	r1, #32
   3830c:	mov	r0, r4
   38310:	add	r2, r3, #1
   38314:	str	r2, [r4, #20]
   38318:	strb	r8, [r3]
   3831c:	ldrb	r2, [r4, #25]
   38320:	ldr	lr, [r4, #16]
   38324:	ldr	r9, [r4, #32]
   38328:	ldr	r3, [r4, #20]
   3832c:	mul	r9, r9, r2
   38330:	add	ip, r3, r9
   38334:	mov	r2, r9
   38338:	cmp	lr, ip
   3833c:	bcs	383cc <flatcc_json_printer_uint64_vector_field@@Base+0x22c>
   38340:	mov	r1, r9
   38344:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38348:	ldr	r2, [r4, #20]
   3834c:	b	382cc <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   38350:	ldr	r0, [r4, #20]
   38354:	add	r3, r0, #1
   38358:	ldrb	r2, [r4, #25]
   3835c:	cmp	r2, #0
   38360:	bne	383e4 <flatcc_json_printer_uint64_vector_field@@Base+0x244>
   38364:	mov	r2, #93	; 0x5d
   38368:	str	r3, [r4, #20]
   3836c:	strb	r2, [r0]
   38370:	ldrd	r4, [sp]
   38374:	ldrd	r6, [sp, #8]
   38378:	ldrd	r8, [sp, #16]
   3837c:	ldr	sl, [sp, #24]
   38380:	add	sp, sp, #28
   38384:	pop	{pc}		; (ldr pc, [sp], #4)
   38388:	add	r1, r2, #1
   3838c:	mov	r3, #10
   38390:	str	r1, [r4, #20]
   38394:	strb	r3, [r2]
   38398:	ldrb	r6, [r4, #25]
   3839c:	ldr	r1, [r4, #16]
   383a0:	ldr	r2, [r4, #32]
   383a4:	ldr	r0, [r4, #20]
   383a8:	mul	r6, r2, r6
   383ac:	add	r3, r0, r6
   383b0:	cmp	r1, r3
   383b4:	bcs	3844c <flatcc_json_printer_uint64_vector_field@@Base+0x2ac>
   383b8:	mov	r1, r6
   383bc:	mov	r0, r4
   383c0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   383c4:	ldr	r2, [r4, #20]
   383c8:	b	3827c <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   383cc:	mov	r0, r3
   383d0:	bl	14594 <memset@plt>
   383d4:	ldr	r2, [r4, #20]
   383d8:	add	r2, r2, r9
   383dc:	str	r2, [r4, #20]
   383e0:	b	382cc <flatcc_json_printer_uint64_vector_field@@Base+0x12c>
   383e4:	mov	r2, #10
   383e8:	str	r3, [r4, #20]
   383ec:	strb	r2, [r0]
   383f0:	ldrb	r5, [r4, #25]
   383f4:	ldr	r3, [r4, #32]
   383f8:	ldr	r2, [r4, #16]
   383fc:	ldr	r0, [r4, #20]
   38400:	sub	r3, r3, #1
   38404:	mul	r5, r3, r5
   38408:	str	r3, [r4, #32]
   3840c:	add	r3, r0, r5
   38410:	cmp	r2, r3
   38414:	bcs	38430 <flatcc_json_printer_uint64_vector_field@@Base+0x290>
   38418:	mov	r0, r4
   3841c:	mov	r1, r5
   38420:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38424:	ldr	r0, [r4, #20]
   38428:	add	r3, r0, #1
   3842c:	b	38364 <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   38430:	mov	r2, r5
   38434:	mov	r1, #32
   38438:	bl	14594 <memset@plt>
   3843c:	ldr	r0, [r4, #20]
   38440:	add	r0, r0, r5
   38444:	add	r3, r0, #1
   38448:	b	38364 <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   3844c:	mov	r2, r6
   38450:	mov	r1, #32
   38454:	bl	14594 <memset@plt>
   38458:	ldr	r2, [r4, #20]
   3845c:	add	r2, r2, r6
   38460:	str	r2, [r4, #20]
   38464:	b	3827c <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

00038468 <flatcc_json_printer_int8_vector_field@@Base>:
   38468:	ldr	ip, [r1, #8]
   3846c:	add	r2, r2, #2
   38470:	lsl	r2, r2, #1
   38474:	cmp	ip, r2
   38478:	bxle	lr
   3847c:	ldr	ip, [r1, #4]
   38480:	ldrh	r2, [ip, r2]
   38484:	cmp	r2, #0
   38488:	bxeq	lr
   3848c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38490:	ldr	ip, [r1]
   38494:	strd	r6, [sp, #8]
   38498:	str	lr, [sp, #28]
   3849c:	strd	r8, [sp, #16]
   384a0:	str	sl, [sp, #24]
   384a4:	adds	lr, ip, r2
   384a8:	beq	38694 <flatcc_json_printer_int8_vector_field@@Base+0x22c>
   384ac:	ldr	r4, [r1, #16]
   384b0:	add	r5, r4, #1
   384b4:	cmp	r4, #0
   384b8:	str	r5, [r1, #16]
   384bc:	beq	384d4 <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   384c0:	ldr	r1, [r0, #20]
   384c4:	mov	r4, #44	; 0x2c
   384c8:	add	r5, r1, #1
   384cc:	str	r5, [r0, #20]
   384d0:	strb	r4, [r1]
   384d4:	mov	r1, r3
   384d8:	ldr	r3, [ip, r2]
   384dc:	mov	r4, r0
   384e0:	ldr	r2, [sp, #32]
   384e4:	add	r5, lr, r3
   384e8:	ldr	r6, [lr, r3]
   384ec:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   384f0:	ldr	r2, [r4, #20]
   384f4:	mov	r1, #91	; 0x5b
   384f8:	ldr	r3, [r4, #32]
   384fc:	cmp	r6, #0
   38500:	add	r0, r2, #1
   38504:	add	r3, r3, #1
   38508:	str	r0, [r4, #20]
   3850c:	str	r3, [r4, #32]
   38510:	strb	r1, [r2]
   38514:	beq	38674 <flatcc_json_printer_int8_vector_field@@Base+0x20c>
   38518:	ldrb	r3, [r4, #25]
   3851c:	ldr	r1, [r4, #20]
   38520:	cmp	r3, #0
   38524:	bne	386ac <flatcc_json_printer_int8_vector_field@@Base+0x244>
   38528:	ldr	r2, [r4, #16]
   3852c:	cmp	r2, r1
   38530:	bhi	38548 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   38534:	mov	r1, r3
   38538:	mov	r0, r4
   3853c:	ldr	r3, [r4, #44]	; 0x2c
   38540:	blx	r3
   38544:	ldr	r1, [r4, #20]
   38548:	ldrsb	r0, [r5, #4]
   3854c:	cmp	r0, #0
   38550:	lsr	r7, r0, #31
   38554:	uxtb	r0, r0
   38558:	bge	3856c <flatcc_json_printer_int8_vector_field@@Base+0x104>
   3855c:	rsb	r0, r0, #0
   38560:	mov	r3, #45	; 0x2d
   38564:	uxtb	r0, r0
   38568:	strb	r3, [r1], #1
   3856c:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   38570:	ldr	r3, [r4, #20]
   38574:	add	r0, r7, r0
   38578:	cmp	r6, #1
   3857c:	add	r8, r5, #5
   38580:	add	r0, r3, r0
   38584:	str	r0, [r4, #20]
   38588:	beq	38678 <flatcc_json_printer_int8_vector_field@@Base+0x210>
   3858c:	add	r3, r6, #4
   38590:	mov	r7, #10
   38594:	mov	r6, #44	; 0x2c
   38598:	add	r5, r5, r3
   3859c:	b	38610 <flatcc_json_printer_int8_vector_field@@Base+0x1a8>
   385a0:	ldr	r3, [r4, #16]
   385a4:	mov	r0, r4
   385a8:	ldr	r2, [r4, #20]
   385ac:	cmp	r2, r3
   385b0:	bcc	385c0 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   385b4:	ldr	r3, [r4, #44]	; 0x2c
   385b8:	blx	r3
   385bc:	ldr	r2, [r4, #20]
   385c0:	mov	r1, #45	; 0x2d
   385c4:	add	r8, r8, #1
   385c8:	ldrsb	r0, [r8, #-1]
   385cc:	mov	r3, r2
   385d0:	cmp	r0, #0
   385d4:	lsr	r9, r0, #31
   385d8:	uxtb	r0, r0
   385dc:	rsb	ip, r0, #0
   385e0:	bge	385f0 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   385e4:	uxtb	r0, ip
   385e8:	strb	r1, [r3], #1
   385ec:	mov	r2, r3
   385f0:	mov	r1, r2
   385f4:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   385f8:	ldr	r3, [r4, #20]
   385fc:	add	r0, r9, r0
   38600:	cmp	r5, r8
   38604:	add	r0, r3, r0
   38608:	str	r0, [r4, #20]
   3860c:	beq	38678 <flatcc_json_printer_int8_vector_field@@Base+0x210>
   38610:	add	r3, r0, #1
   38614:	str	r3, [r4, #20]
   38618:	strb	r6, [r0]
   3861c:	ldrb	r1, [r4, #25]
   38620:	cmp	r1, #0
   38624:	beq	385a0 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   38628:	ldr	r3, [r4, #20]
   3862c:	mov	r1, #32
   38630:	mov	r0, r4
   38634:	add	r2, r3, #1
   38638:	str	r2, [r4, #20]
   3863c:	strb	r7, [r3]
   38640:	ldrb	r2, [r4, #25]
   38644:	ldr	lr, [r4, #16]
   38648:	ldr	r9, [r4, #32]
   3864c:	ldr	r3, [r4, #20]
   38650:	mul	r9, r9, r2
   38654:	add	ip, r3, r9
   38658:	mov	r2, r9
   3865c:	cmp	lr, ip
   38660:	bcs	386cc <flatcc_json_printer_int8_vector_field@@Base+0x264>
   38664:	mov	r1, r9
   38668:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3866c:	ldr	r2, [r4, #20]
   38670:	b	385c0 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   38674:	ldr	r0, [r4, #20]
   38678:	add	r3, r0, #1
   3867c:	ldrb	r2, [r4, #25]
   38680:	cmp	r2, #0
   38684:	bne	386e4 <flatcc_json_printer_int8_vector_field@@Base+0x27c>
   38688:	mov	r2, #93	; 0x5d
   3868c:	str	r3, [r4, #20]
   38690:	strb	r2, [r0]
   38694:	ldrd	r4, [sp]
   38698:	ldrd	r6, [sp, #8]
   3869c:	ldrd	r8, [sp, #16]
   386a0:	ldr	sl, [sp, #24]
   386a4:	add	sp, sp, #28
   386a8:	pop	{pc}		; (ldr pc, [sp], #4)
   386ac:	add	r2, r1, #1
   386b0:	mov	r3, #10
   386b4:	mov	r0, r4
   386b8:	str	r2, [r4, #20]
   386bc:	strb	r3, [r1]
   386c0:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   386c4:	ldr	r1, [r4, #20]
   386c8:	b	38548 <flatcc_json_printer_int8_vector_field@@Base+0xe0>
   386cc:	mov	r0, r3
   386d0:	bl	14594 <memset@plt>
   386d4:	ldr	r2, [r4, #20]
   386d8:	add	r2, r2, r9
   386dc:	str	r2, [r4, #20]
   386e0:	b	385c0 <flatcc_json_printer_int8_vector_field@@Base+0x158>
   386e4:	mov	r2, #10
   386e8:	str	r3, [r4, #20]
   386ec:	strb	r2, [r0]
   386f0:	ldrb	r5, [r4, #25]
   386f4:	ldr	r3, [r4, #32]
   386f8:	ldr	r2, [r4, #16]
   386fc:	ldr	r0, [r4, #20]
   38700:	sub	r3, r3, #1
   38704:	mul	r5, r3, r5
   38708:	str	r3, [r4, #32]
   3870c:	add	r3, r0, r5
   38710:	cmp	r2, r3
   38714:	bcs	38730 <flatcc_json_printer_int8_vector_field@@Base+0x2c8>
   38718:	mov	r0, r4
   3871c:	mov	r1, r5
   38720:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38724:	ldr	r0, [r4, #20]
   38728:	add	r3, r0, #1
   3872c:	b	38688 <flatcc_json_printer_int8_vector_field@@Base+0x220>
   38730:	mov	r2, r5
   38734:	mov	r1, #32
   38738:	bl	14594 <memset@plt>
   3873c:	ldr	r0, [r4, #20]
   38740:	add	r0, r0, r5
   38744:	add	r3, r0, #1
   38748:	b	38688 <flatcc_json_printer_int8_vector_field@@Base+0x220>

0003874c <flatcc_json_printer_int16_vector_field@@Base>:
   3874c:	ldr	ip, [r1, #8]
   38750:	add	r2, r2, #2
   38754:	lsl	r2, r2, #1
   38758:	cmp	ip, r2
   3875c:	bxle	lr
   38760:	ldr	ip, [r1, #4]
   38764:	ldrh	r2, [ip, r2]
   38768:	cmp	r2, #0
   3876c:	bxeq	lr
   38770:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38774:	ldr	ip, [r1]
   38778:	strd	r6, [sp, #8]
   3877c:	str	lr, [sp, #28]
   38780:	strd	r8, [sp, #16]
   38784:	str	sl, [sp, #24]
   38788:	adds	lr, ip, r2
   3878c:	beq	38978 <flatcc_json_printer_int16_vector_field@@Base+0x22c>
   38790:	ldr	r4, [r1, #16]
   38794:	add	r5, r4, #1
   38798:	cmp	r4, #0
   3879c:	str	r5, [r1, #16]
   387a0:	beq	387b8 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   387a4:	ldr	r1, [r0, #20]
   387a8:	mov	r4, #44	; 0x2c
   387ac:	add	r5, r1, #1
   387b0:	str	r5, [r0, #20]
   387b4:	strb	r4, [r1]
   387b8:	mov	r1, r3
   387bc:	ldr	r3, [ip, r2]
   387c0:	mov	r4, r0
   387c4:	ldr	r2, [sp, #32]
   387c8:	add	r6, lr, r3
   387cc:	ldr	r5, [lr, r3]
   387d0:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   387d4:	ldr	r2, [r4, #20]
   387d8:	mov	r1, #91	; 0x5b
   387dc:	ldr	r3, [r4, #32]
   387e0:	cmp	r5, #0
   387e4:	add	r0, r2, #1
   387e8:	add	r3, r3, #1
   387ec:	str	r0, [r4, #20]
   387f0:	str	r3, [r4, #32]
   387f4:	strb	r1, [r2]
   387f8:	beq	38958 <flatcc_json_printer_int16_vector_field@@Base+0x20c>
   387fc:	ldrb	r3, [r4, #25]
   38800:	ldr	r1, [r4, #20]
   38804:	cmp	r3, #0
   38808:	bne	38990 <flatcc_json_printer_int16_vector_field@@Base+0x244>
   3880c:	ldr	r2, [r4, #16]
   38810:	cmp	r2, r1
   38814:	bhi	3882c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   38818:	mov	r1, r3
   3881c:	mov	r0, r4
   38820:	ldr	r3, [r4, #44]	; 0x2c
   38824:	blx	r3
   38828:	ldr	r1, [r4, #20]
   3882c:	ldrsh	r0, [r6, #4]
   38830:	cmp	r0, #0
   38834:	lsr	r7, r0, #31
   38838:	uxth	r0, r0
   3883c:	bge	38850 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   38840:	rsb	r0, r0, #0
   38844:	mov	r3, #45	; 0x2d
   38848:	uxth	r0, r0
   3884c:	strb	r3, [r1], #1
   38850:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   38854:	ldr	r3, [r4, #20]
   38858:	add	r0, r7, r0
   3885c:	cmp	r5, #1
   38860:	add	r6, r6, #6
   38864:	sub	r5, r5, #2
   38868:	add	r0, r3, r0
   3886c:	str	r0, [r4, #20]
   38870:	beq	3895c <flatcc_json_printer_int16_vector_field@@Base+0x210>
   38874:	mov	r7, #44	; 0x2c
   38878:	mov	r8, #10
   3887c:	b	388f4 <flatcc_json_printer_int16_vector_field@@Base+0x1a8>
   38880:	ldr	r3, [r4, #16]
   38884:	mov	r0, r4
   38888:	ldr	r2, [r4, #20]
   3888c:	cmp	r2, r3
   38890:	bcc	388a0 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   38894:	ldr	r3, [r4, #44]	; 0x2c
   38898:	blx	r3
   3889c:	ldr	r2, [r4, #20]
   388a0:	mov	r1, #45	; 0x2d
   388a4:	sub	r5, r5, #1
   388a8:	ldrsh	r0, [r6]
   388ac:	mov	r3, r2
   388b0:	add	r6, r6, #2
   388b4:	cmp	r0, #0
   388b8:	lsr	r9, r0, #31
   388bc:	uxth	r0, r0
   388c0:	rsb	ip, r0, #0
   388c4:	bge	388d4 <flatcc_json_printer_int16_vector_field@@Base+0x188>
   388c8:	uxth	r0, ip
   388cc:	strb	r1, [r3], #1
   388d0:	mov	r2, r3
   388d4:	mov	r1, r2
   388d8:	bl	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0x4>
   388dc:	ldr	r3, [r4, #20]
   388e0:	add	r0, r9, r0
   388e4:	cmn	r5, #1
   388e8:	add	r0, r3, r0
   388ec:	str	r0, [r4, #20]
   388f0:	beq	3895c <flatcc_json_printer_int16_vector_field@@Base+0x210>
   388f4:	add	r3, r0, #1
   388f8:	str	r3, [r4, #20]
   388fc:	strb	r7, [r0]
   38900:	ldrb	r1, [r4, #25]
   38904:	cmp	r1, #0
   38908:	beq	38880 <flatcc_json_printer_int16_vector_field@@Base+0x134>
   3890c:	ldr	r3, [r4, #20]
   38910:	mov	r1, #32
   38914:	mov	r0, r4
   38918:	add	r2, r3, #1
   3891c:	str	r2, [r4, #20]
   38920:	strb	r8, [r3]
   38924:	ldrb	r2, [r4, #25]
   38928:	ldr	lr, [r4, #16]
   3892c:	ldr	r9, [r4, #32]
   38930:	ldr	r3, [r4, #20]
   38934:	mul	r9, r9, r2
   38938:	add	ip, r3, r9
   3893c:	mov	r2, r9
   38940:	cmp	lr, ip
   38944:	bcs	389b0 <flatcc_json_printer_int16_vector_field@@Base+0x264>
   38948:	mov	r1, r9
   3894c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38950:	ldr	r2, [r4, #20]
   38954:	b	388a0 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   38958:	ldr	r0, [r4, #20]
   3895c:	add	r3, r0, #1
   38960:	ldrb	r2, [r4, #25]
   38964:	cmp	r2, #0
   38968:	bne	389c8 <flatcc_json_printer_int16_vector_field@@Base+0x27c>
   3896c:	mov	r2, #93	; 0x5d
   38970:	str	r3, [r4, #20]
   38974:	strb	r2, [r0]
   38978:	ldrd	r4, [sp]
   3897c:	ldrd	r6, [sp, #8]
   38980:	ldrd	r8, [sp, #16]
   38984:	ldr	sl, [sp, #24]
   38988:	add	sp, sp, #28
   3898c:	pop	{pc}		; (ldr pc, [sp], #4)
   38990:	add	r2, r1, #1
   38994:	mov	r3, #10
   38998:	mov	r0, r4
   3899c:	str	r2, [r4, #20]
   389a0:	strb	r3, [r1]
   389a4:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   389a8:	ldr	r1, [r4, #20]
   389ac:	b	3882c <flatcc_json_printer_int16_vector_field@@Base+0xe0>
   389b0:	mov	r0, r3
   389b4:	bl	14594 <memset@plt>
   389b8:	ldr	r2, [r4, #20]
   389bc:	add	r2, r2, r9
   389c0:	str	r2, [r4, #20]
   389c4:	b	388a0 <flatcc_json_printer_int16_vector_field@@Base+0x154>
   389c8:	mov	r2, #10
   389cc:	str	r3, [r4, #20]
   389d0:	strb	r2, [r0]
   389d4:	ldrb	r5, [r4, #25]
   389d8:	ldr	r3, [r4, #32]
   389dc:	ldr	r2, [r4, #16]
   389e0:	ldr	r0, [r4, #20]
   389e4:	sub	r3, r3, #1
   389e8:	mul	r5, r3, r5
   389ec:	str	r3, [r4, #32]
   389f0:	add	r3, r0, r5
   389f4:	cmp	r2, r3
   389f8:	bcs	38a14 <flatcc_json_printer_int16_vector_field@@Base+0x2c8>
   389fc:	mov	r0, r4
   38a00:	mov	r1, r5
   38a04:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38a08:	ldr	r0, [r4, #20]
   38a0c:	add	r3, r0, #1
   38a10:	b	3896c <flatcc_json_printer_int16_vector_field@@Base+0x220>
   38a14:	mov	r2, r5
   38a18:	mov	r1, #32
   38a1c:	bl	14594 <memset@plt>
   38a20:	ldr	r0, [r4, #20]
   38a24:	add	r0, r0, r5
   38a28:	add	r3, r0, #1
   38a2c:	b	3896c <flatcc_json_printer_int16_vector_field@@Base+0x220>

00038a30 <flatcc_json_printer_int32_vector_field@@Base>:
   38a30:	ldr	ip, [r1, #8]
   38a34:	add	r2, r2, #2
   38a38:	lsl	r2, r2, #1
   38a3c:	cmp	ip, r2
   38a40:	bxle	lr
   38a44:	ldr	ip, [r1, #4]
   38a48:	ldrh	r2, [ip, r2]
   38a4c:	cmp	r2, #0
   38a50:	bxeq	lr
   38a54:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38a58:	ldr	ip, [r1]
   38a5c:	strd	r6, [sp, #8]
   38a60:	str	lr, [sp, #28]
   38a64:	strd	r8, [sp, #16]
   38a68:	str	sl, [sp, #24]
   38a6c:	adds	lr, ip, r2
   38a70:	beq	38c4c <flatcc_json_printer_int32_vector_field@@Base+0x21c>
   38a74:	ldr	r4, [r1, #16]
   38a78:	add	r5, r4, #1
   38a7c:	cmp	r4, #0
   38a80:	str	r5, [r1, #16]
   38a84:	beq	38a9c <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   38a88:	ldr	r1, [r0, #20]
   38a8c:	mov	r4, #44	; 0x2c
   38a90:	add	r5, r1, #1
   38a94:	str	r5, [r0, #20]
   38a98:	strb	r4, [r1]
   38a9c:	mov	r1, r3
   38aa0:	ldr	r3, [ip, r2]
   38aa4:	mov	r4, r0
   38aa8:	ldr	r2, [sp, #32]
   38aac:	add	r6, lr, r3
   38ab0:	ldr	r5, [lr, r3]
   38ab4:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   38ab8:	ldr	r2, [r4, #20]
   38abc:	mov	r1, #91	; 0x5b
   38ac0:	ldr	r3, [r4, #32]
   38ac4:	cmp	r5, #0
   38ac8:	add	r0, r2, #1
   38acc:	add	r3, r3, #1
   38ad0:	str	r0, [r4, #20]
   38ad4:	str	r3, [r4, #32]
   38ad8:	strb	r1, [r2]
   38adc:	beq	38c2c <flatcc_json_printer_int32_vector_field@@Base+0x1fc>
   38ae0:	ldrb	r3, [r4, #25]
   38ae4:	ldr	r1, [r4, #20]
   38ae8:	cmp	r3, #0
   38aec:	bne	38c64 <flatcc_json_printer_int32_vector_field@@Base+0x234>
   38af0:	ldr	r2, [r4, #16]
   38af4:	cmp	r2, r1
   38af8:	bhi	38b10 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   38afc:	mov	r1, r3
   38b00:	mov	r0, r4
   38b04:	ldr	r3, [r4, #44]	; 0x2c
   38b08:	blx	r3
   38b0c:	ldr	r1, [r4, #20]
   38b10:	ldr	r0, [r6, #4]
   38b14:	cmp	r0, #0
   38b18:	lsr	r7, r0, #31
   38b1c:	bge	38b2c <flatcc_json_printer_int32_vector_field@@Base+0xfc>
   38b20:	mov	r3, #45	; 0x2d
   38b24:	rsb	r0, r0, #0
   38b28:	strb	r3, [r1], #1
   38b2c:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   38b30:	ldr	r3, [r4, #20]
   38b34:	add	r0, r7, r0
   38b38:	cmp	r5, #1
   38b3c:	add	r6, r6, #8
   38b40:	sub	r5, r5, #2
   38b44:	add	r0, r3, r0
   38b48:	str	r0, [r4, #20]
   38b4c:	beq	38c30 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   38b50:	mov	r7, #44	; 0x2c
   38b54:	mov	r8, #10
   38b58:	b	38bc8 <flatcc_json_printer_int32_vector_field@@Base+0x198>
   38b5c:	ldr	r3, [r4, #16]
   38b60:	mov	r0, r4
   38b64:	ldr	r2, [r4, #20]
   38b68:	cmp	r2, r3
   38b6c:	bcc	38b7c <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   38b70:	ldr	r3, [r4, #44]	; 0x2c
   38b74:	blx	r3
   38b78:	ldr	r2, [r4, #20]
   38b7c:	mov	r1, #45	; 0x2d
   38b80:	sub	r5, r5, #1
   38b84:	ldr	r0, [r6]
   38b88:	mov	r3, r2
   38b8c:	add	r6, r6, #4
   38b90:	cmp	r0, #0
   38b94:	lsr	r9, r0, #31
   38b98:	bge	38ba8 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   38b9c:	rsb	r0, r0, #0
   38ba0:	strb	r1, [r3], #1
   38ba4:	mov	r2, r3
   38ba8:	mov	r1, r2
   38bac:	bl	2fa20 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   38bb0:	ldr	r3, [r4, #20]
   38bb4:	add	r0, r9, r0
   38bb8:	cmn	r5, #1
   38bbc:	add	r0, r3, r0
   38bc0:	str	r0, [r4, #20]
   38bc4:	beq	38c30 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   38bc8:	add	r3, r0, #1
   38bcc:	str	r3, [r4, #20]
   38bd0:	strb	r7, [r0]
   38bd4:	ldrb	r1, [r4, #25]
   38bd8:	cmp	r1, #0
   38bdc:	beq	38b5c <flatcc_json_printer_int32_vector_field@@Base+0x12c>
   38be0:	ldr	r3, [r4, #20]
   38be4:	mov	r1, #32
   38be8:	mov	r0, r4
   38bec:	add	r2, r3, #1
   38bf0:	str	r2, [r4, #20]
   38bf4:	strb	r8, [r3]
   38bf8:	ldrb	r2, [r4, #25]
   38bfc:	ldr	lr, [r4, #16]
   38c00:	ldr	r9, [r4, #32]
   38c04:	ldr	r3, [r4, #20]
   38c08:	mul	r9, r9, r2
   38c0c:	add	ip, r3, r9
   38c10:	mov	r2, r9
   38c14:	cmp	lr, ip
   38c18:	bcs	38ca8 <flatcc_json_printer_int32_vector_field@@Base+0x278>
   38c1c:	mov	r1, r9
   38c20:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38c24:	ldr	r2, [r4, #20]
   38c28:	b	38b7c <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   38c2c:	ldr	r0, [r4, #20]
   38c30:	add	r3, r0, #1
   38c34:	ldrb	r2, [r4, #25]
   38c38:	cmp	r2, #0
   38c3c:	bne	38cc0 <flatcc_json_printer_int32_vector_field@@Base+0x290>
   38c40:	mov	r2, #93	; 0x5d
   38c44:	str	r3, [r4, #20]
   38c48:	strb	r2, [r0]
   38c4c:	ldrd	r4, [sp]
   38c50:	ldrd	r6, [sp, #8]
   38c54:	ldrd	r8, [sp, #16]
   38c58:	ldr	sl, [sp, #24]
   38c5c:	add	sp, sp, #28
   38c60:	pop	{pc}		; (ldr pc, [sp], #4)
   38c64:	add	r2, r1, #1
   38c68:	mov	r3, #10
   38c6c:	str	r2, [r4, #20]
   38c70:	strb	r3, [r1]
   38c74:	ldrb	r7, [r4, #25]
   38c78:	ldr	r2, [r4, #16]
   38c7c:	ldr	r1, [r4, #32]
   38c80:	ldr	r0, [r4, #20]
   38c84:	mul	r7, r1, r7
   38c88:	add	r3, r0, r7
   38c8c:	cmp	r2, r3
   38c90:	bcs	38d28 <flatcc_json_printer_int32_vector_field@@Base+0x2f8>
   38c94:	mov	r1, r7
   38c98:	mov	r0, r4
   38c9c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38ca0:	ldr	r1, [r4, #20]
   38ca4:	b	38b10 <flatcc_json_printer_int32_vector_field@@Base+0xe0>
   38ca8:	mov	r0, r3
   38cac:	bl	14594 <memset@plt>
   38cb0:	ldr	r2, [r4, #20]
   38cb4:	add	r2, r2, r9
   38cb8:	str	r2, [r4, #20]
   38cbc:	b	38b7c <flatcc_json_printer_int32_vector_field@@Base+0x14c>
   38cc0:	mov	r2, #10
   38cc4:	str	r3, [r4, #20]
   38cc8:	strb	r2, [r0]
   38ccc:	ldrb	r5, [r4, #25]
   38cd0:	ldr	r3, [r4, #32]
   38cd4:	ldr	r2, [r4, #16]
   38cd8:	ldr	r0, [r4, #20]
   38cdc:	sub	r3, r3, #1
   38ce0:	mul	r5, r3, r5
   38ce4:	str	r3, [r4, #32]
   38ce8:	add	r3, r0, r5
   38cec:	cmp	r2, r3
   38cf0:	bcs	38d0c <flatcc_json_printer_int32_vector_field@@Base+0x2dc>
   38cf4:	mov	r0, r4
   38cf8:	mov	r1, r5
   38cfc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38d00:	ldr	r0, [r4, #20]
   38d04:	add	r3, r0, #1
   38d08:	b	38c40 <flatcc_json_printer_int32_vector_field@@Base+0x210>
   38d0c:	mov	r2, r5
   38d10:	mov	r1, #32
   38d14:	bl	14594 <memset@plt>
   38d18:	ldr	r0, [r4, #20]
   38d1c:	add	r0, r0, r5
   38d20:	add	r3, r0, #1
   38d24:	b	38c40 <flatcc_json_printer_int32_vector_field@@Base+0x210>
   38d28:	mov	r1, #32
   38d2c:	mov	r2, r7
   38d30:	bl	14594 <memset@plt>
   38d34:	ldr	r1, [r4, #20]
   38d38:	add	r1, r1, r7
   38d3c:	str	r1, [r4, #20]
   38d40:	b	38b10 <flatcc_json_printer_int32_vector_field@@Base+0xe0>

00038d44 <flatcc_json_printer_int64_vector_field@@Base>:
   38d44:	ldr	ip, [r1, #8]
   38d48:	add	r2, r2, #2
   38d4c:	lsl	r2, r2, #1
   38d50:	cmp	ip, r2
   38d54:	bxle	lr
   38d58:	ldr	ip, [r1, #4]
   38d5c:	ldrh	r2, [ip, r2]
   38d60:	cmp	r2, #0
   38d64:	bxeq	lr
   38d68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38d6c:	ldr	ip, [r1]
   38d70:	strd	r6, [sp, #8]
   38d74:	str	lr, [sp, #28]
   38d78:	strd	r8, [sp, #16]
   38d7c:	str	sl, [sp, #24]
   38d80:	adds	lr, ip, r2
   38d84:	beq	38f68 <flatcc_json_printer_int64_vector_field@@Base+0x224>
   38d88:	ldr	r4, [r1, #16]
   38d8c:	add	r5, r4, #1
   38d90:	cmp	r4, #0
   38d94:	str	r5, [r1, #16]
   38d98:	beq	38db0 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   38d9c:	ldr	r1, [r0, #20]
   38da0:	mov	r4, #44	; 0x2c
   38da4:	add	r5, r1, #1
   38da8:	str	r5, [r0, #20]
   38dac:	strb	r4, [r1]
   38db0:	mov	r1, r3
   38db4:	ldr	r3, [ip, r2]
   38db8:	mov	r4, r0
   38dbc:	ldr	r2, [sp, #32]
   38dc0:	add	r6, lr, r3
   38dc4:	ldr	r5, [lr, r3]
   38dc8:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   38dcc:	ldr	r2, [r4, #20]
   38dd0:	mov	r1, #91	; 0x5b
   38dd4:	ldr	r3, [r4, #32]
   38dd8:	cmp	r5, #0
   38ddc:	add	r0, r2, #1
   38de0:	add	r3, r3, #1
   38de4:	str	r0, [r4, #20]
   38de8:	str	r3, [r4, #32]
   38dec:	strb	r1, [r2]
   38df0:	beq	38f48 <flatcc_json_printer_int64_vector_field@@Base+0x204>
   38df4:	ldrb	r1, [r4, #25]
   38df8:	ldr	r2, [r4, #20]
   38dfc:	cmp	r1, #0
   38e00:	bne	38f80 <flatcc_json_printer_int64_vector_field@@Base+0x23c>
   38e04:	ldr	r3, [r4, #16]
   38e08:	cmp	r3, r2
   38e0c:	bhi	38e20 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   38e10:	mov	r0, r4
   38e14:	ldr	r3, [r4, #44]	; 0x2c
   38e18:	blx	r3
   38e1c:	ldr	r2, [r4, #20]
   38e20:	ldrd	r0, [r6, #4]
   38e24:	cmp	r0, #0
   38e28:	lsr	r7, r1, #31
   38e2c:	sbcs	r3, r1, #0
   38e30:	bge	38e44 <flatcc_json_printer_int64_vector_field@@Base+0x100>
   38e34:	rsbs	r0, r0, #0
   38e38:	mov	r3, #45	; 0x2d
   38e3c:	rsc	r1, r1, #0
   38e40:	strb	r3, [r2], #1
   38e44:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   38e48:	ldr	r3, [r4, #20]
   38e4c:	add	r0, r7, r0
   38e50:	cmp	r5, #1
   38e54:	add	r6, r6, #12
   38e58:	sub	r5, r5, #2
   38e5c:	add	r0, r3, r0
   38e60:	str	r0, [r4, #20]
   38e64:	beq	38f4c <flatcc_json_printer_int64_vector_field@@Base+0x208>
   38e68:	mov	r7, #44	; 0x2c
   38e6c:	mov	r8, #10
   38e70:	b	38ee4 <flatcc_json_printer_int64_vector_field@@Base+0x1a0>
   38e74:	ldr	r3, [r4, #16]
   38e78:	mov	r0, r4
   38e7c:	ldr	r2, [r4, #20]
   38e80:	cmp	r2, r3
   38e84:	bcc	38e94 <flatcc_json_printer_int64_vector_field@@Base+0x150>
   38e88:	ldr	r3, [r4, #44]	; 0x2c
   38e8c:	blx	r3
   38e90:	ldr	r2, [r4, #20]
   38e94:	mov	ip, #45	; 0x2d
   38e98:	sub	r5, r5, #1
   38e9c:	ldrd	r0, [r6]
   38ea0:	mov	r3, r2
   38ea4:	add	r6, r6, #8
   38ea8:	cmp	r0, #0
   38eac:	lsr	r9, r1, #31
   38eb0:	sbcs	lr, r1, #0
   38eb4:	bge	38ec8 <flatcc_json_printer_int64_vector_field@@Base+0x184>
   38eb8:	rsbs	r0, r0, #0
   38ebc:	strb	ip, [r3], #1
   38ec0:	mov	r2, r3
   38ec4:	rsc	r1, r1, #0
   38ec8:	bl	2fd4c <flatcc_json_parser_struct_as_root@@Base+0x498>
   38ecc:	ldr	r3, [r4, #20]
   38ed0:	add	r0, r9, r0
   38ed4:	cmn	r5, #1
   38ed8:	add	r0, r3, r0
   38edc:	str	r0, [r4, #20]
   38ee0:	beq	38f4c <flatcc_json_printer_int64_vector_field@@Base+0x208>
   38ee4:	add	r3, r0, #1
   38ee8:	str	r3, [r4, #20]
   38eec:	strb	r7, [r0]
   38ef0:	ldrb	r1, [r4, #25]
   38ef4:	cmp	r1, #0
   38ef8:	beq	38e74 <flatcc_json_printer_int64_vector_field@@Base+0x130>
   38efc:	ldr	r3, [r4, #20]
   38f00:	mov	r1, #32
   38f04:	mov	r0, r4
   38f08:	add	r2, r3, #1
   38f0c:	str	r2, [r4, #20]
   38f10:	strb	r8, [r3]
   38f14:	ldrb	r2, [r4, #25]
   38f18:	ldr	lr, [r4, #16]
   38f1c:	ldr	r9, [r4, #32]
   38f20:	ldr	r3, [r4, #20]
   38f24:	mul	r9, r9, r2
   38f28:	add	ip, r3, r9
   38f2c:	mov	r2, r9
   38f30:	cmp	lr, ip
   38f34:	bcs	38fa0 <flatcc_json_printer_int64_vector_field@@Base+0x25c>
   38f38:	mov	r1, r9
   38f3c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38f40:	ldr	r2, [r4, #20]
   38f44:	b	38e94 <flatcc_json_printer_int64_vector_field@@Base+0x150>
   38f48:	ldr	r0, [r4, #20]
   38f4c:	add	r3, r0, #1
   38f50:	ldrb	r2, [r4, #25]
   38f54:	cmp	r2, #0
   38f58:	bne	38fb8 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   38f5c:	mov	r2, #93	; 0x5d
   38f60:	str	r3, [r4, #20]
   38f64:	strb	r2, [r0]
   38f68:	ldrd	r4, [sp]
   38f6c:	ldrd	r6, [sp, #8]
   38f70:	ldrd	r8, [sp, #16]
   38f74:	ldr	sl, [sp, #24]
   38f78:	add	sp, sp, #28
   38f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   38f80:	add	r1, r2, #1
   38f84:	mov	r3, #10
   38f88:	mov	r0, r4
   38f8c:	str	r1, [r4, #20]
   38f90:	strb	r3, [r2]
   38f94:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   38f98:	ldr	r2, [r4, #20]
   38f9c:	b	38e20 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   38fa0:	mov	r0, r3
   38fa4:	bl	14594 <memset@plt>
   38fa8:	ldr	r2, [r4, #20]
   38fac:	add	r2, r2, r9
   38fb0:	str	r2, [r4, #20]
   38fb4:	b	38e94 <flatcc_json_printer_int64_vector_field@@Base+0x150>
   38fb8:	mov	r2, #10
   38fbc:	str	r3, [r4, #20]
   38fc0:	strb	r2, [r0]
   38fc4:	ldrb	r5, [r4, #25]
   38fc8:	ldr	r3, [r4, #32]
   38fcc:	ldr	r2, [r4, #16]
   38fd0:	ldr	r0, [r4, #20]
   38fd4:	sub	r3, r3, #1
   38fd8:	mul	r5, r3, r5
   38fdc:	str	r3, [r4, #32]
   38fe0:	add	r3, r0, r5
   38fe4:	cmp	r2, r3
   38fe8:	bcs	39004 <flatcc_json_printer_int64_vector_field@@Base+0x2c0>
   38fec:	mov	r0, r4
   38ff0:	mov	r1, r5
   38ff4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   38ff8:	ldr	r0, [r4, #20]
   38ffc:	add	r3, r0, #1
   39000:	b	38f5c <flatcc_json_printer_int64_vector_field@@Base+0x218>
   39004:	mov	r2, r5
   39008:	mov	r1, #32
   3900c:	bl	14594 <memset@plt>
   39010:	ldr	r0, [r4, #20]
   39014:	add	r0, r0, r5
   39018:	add	r3, r0, #1
   3901c:	b	38f5c <flatcc_json_printer_int64_vector_field@@Base+0x218>

00039020 <flatcc_json_printer_bool_vector_field@@Base>:
   39020:	ldr	ip, [r1, #8]
   39024:	add	r2, r2, #2
   39028:	lsl	r2, r2, #1
   3902c:	cmp	ip, r2
   39030:	bxle	lr
   39034:	ldr	ip, [r1, #4]
   39038:	ldrh	r2, [ip, r2]
   3903c:	cmp	r2, #0
   39040:	bxeq	lr
   39044:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39048:	ldr	ip, [r1]
   3904c:	strd	r6, [sp, #8]
   39050:	str	lr, [sp, #28]
   39054:	strd	r8, [sp, #16]
   39058:	str	sl, [sp, #24]
   3905c:	adds	lr, ip, r2
   39060:	beq	391f8 <flatcc_json_printer_bool_vector_field@@Base+0x1d8>
   39064:	ldr	r4, [r1, #16]
   39068:	add	r5, r4, #1
   3906c:	cmp	r4, #0
   39070:	str	r5, [r1, #16]
   39074:	beq	3908c <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   39078:	ldr	r1, [r0, #20]
   3907c:	mov	r4, #44	; 0x2c
   39080:	add	r5, r1, #1
   39084:	str	r5, [r0, #20]
   39088:	strb	r4, [r1]
   3908c:	mov	r1, r3
   39090:	ldr	r3, [ip, r2]
   39094:	mov	r4, r0
   39098:	ldr	r2, [sp, #32]
   3909c:	add	r6, lr, r3
   390a0:	ldr	r7, [lr, r3]
   390a4:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   390a8:	ldr	r2, [r4, #20]
   390ac:	mov	r1, #91	; 0x5b
   390b0:	ldr	r3, [r4, #32]
   390b4:	cmp	r7, #0
   390b8:	add	r0, r2, #1
   390bc:	add	r3, r3, #1
   390c0:	str	r0, [r4, #20]
   390c4:	str	r3, [r4, #32]
   390c8:	strb	r1, [r2]
   390cc:	beq	391d8 <flatcc_json_printer_bool_vector_field@@Base+0x1b8>
   390d0:	ldrb	r3, [r4, #25]
   390d4:	ldr	r1, [r4, #20]
   390d8:	cmp	r3, #0
   390dc:	bne	39210 <flatcc_json_printer_bool_vector_field@@Base+0x1f0>
   390e0:	ldr	r2, [r4, #16]
   390e4:	cmp	r2, r1
   390e8:	bhi	39100 <flatcc_json_printer_bool_vector_field@@Base+0xe0>
   390ec:	mov	r1, r3
   390f0:	mov	r0, r4
   390f4:	ldr	r3, [r4, #44]	; 0x2c
   390f8:	blx	r3
   390fc:	ldr	r1, [r4, #20]
   39100:	add	r5, r6, #5
   39104:	ldrb	r0, [r6, #4]
   39108:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   3910c:	ldr	r3, [r4, #20]
   39110:	cmp	r7, #1
   39114:	add	r0, r3, r0
   39118:	str	r0, [r4, #20]
   3911c:	beq	391dc <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   39120:	add	r3, r7, #4
   39124:	mov	r8, #10
   39128:	mov	r7, #44	; 0x2c
   3912c:	add	r6, r6, r3
   39130:	b	39174 <flatcc_json_printer_bool_vector_field@@Base+0x154>
   39134:	ldr	r3, [r4, #16]
   39138:	mov	r0, r4
   3913c:	ldr	r2, [r4, #20]
   39140:	cmp	r2, r3
   39144:	bcc	39154 <flatcc_json_printer_bool_vector_field@@Base+0x134>
   39148:	ldr	r3, [r4, #44]	; 0x2c
   3914c:	blx	r3
   39150:	ldr	r2, [r4, #20]
   39154:	mov	r1, r2
   39158:	ldrb	r0, [r5], #1
   3915c:	bl	30be0 <flatcc_json_parser_struct_as_root@@Base+0x132c>
   39160:	ldr	r3, [r4, #20]
   39164:	cmp	r5, r6
   39168:	add	r0, r3, r0
   3916c:	str	r0, [r4, #20]
   39170:	beq	391dc <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   39174:	add	r3, r0, #1
   39178:	str	r3, [r4, #20]
   3917c:	strb	r7, [r0]
   39180:	ldrb	r1, [r4, #25]
   39184:	cmp	r1, #0
   39188:	beq	39134 <flatcc_json_printer_bool_vector_field@@Base+0x114>
   3918c:	ldr	r3, [r4, #20]
   39190:	mov	r1, #32
   39194:	mov	r0, r4
   39198:	add	r2, r3, #1
   3919c:	str	r2, [r4, #20]
   391a0:	strb	r8, [r3]
   391a4:	ldrb	r2, [r4, #25]
   391a8:	ldr	lr, [r4, #16]
   391ac:	ldr	r9, [r4, #32]
   391b0:	ldr	r3, [r4, #20]
   391b4:	mul	r9, r9, r2
   391b8:	add	ip, r3, r9
   391bc:	mov	r2, r9
   391c0:	cmp	lr, ip
   391c4:	bcs	39254 <flatcc_json_printer_bool_vector_field@@Base+0x234>
   391c8:	mov	r1, r9
   391cc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   391d0:	ldr	r2, [r4, #20]
   391d4:	b	39154 <flatcc_json_printer_bool_vector_field@@Base+0x134>
   391d8:	ldr	r0, [r4, #20]
   391dc:	add	r3, r0, #1
   391e0:	ldrb	r2, [r4, #25]
   391e4:	cmp	r2, #0
   391e8:	bne	3926c <flatcc_json_printer_bool_vector_field@@Base+0x24c>
   391ec:	mov	r2, #93	; 0x5d
   391f0:	str	r3, [r4, #20]
   391f4:	strb	r2, [r0]
   391f8:	ldrd	r4, [sp]
   391fc:	ldrd	r6, [sp, #8]
   39200:	ldrd	r8, [sp, #16]
   39204:	ldr	sl, [sp, #24]
   39208:	add	sp, sp, #28
   3920c:	pop	{pc}		; (ldr pc, [sp], #4)
   39210:	add	r2, r1, #1
   39214:	mov	r3, #10
   39218:	str	r2, [r4, #20]
   3921c:	strb	r3, [r1]
   39220:	ldrb	r5, [r4, #25]
   39224:	ldr	r2, [r4, #16]
   39228:	ldr	r1, [r4, #32]
   3922c:	ldr	r0, [r4, #20]
   39230:	mul	r5, r1, r5
   39234:	add	r3, r0, r5
   39238:	cmp	r2, r3
   3923c:	bcs	392d4 <flatcc_json_printer_bool_vector_field@@Base+0x2b4>
   39240:	mov	r1, r5
   39244:	mov	r0, r4
   39248:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3924c:	ldr	r1, [r4, #20]
   39250:	b	39100 <flatcc_json_printer_bool_vector_field@@Base+0xe0>
   39254:	mov	r0, r3
   39258:	bl	14594 <memset@plt>
   3925c:	ldr	r2, [r4, #20]
   39260:	add	r2, r2, r9
   39264:	str	r2, [r4, #20]
   39268:	b	39154 <flatcc_json_printer_bool_vector_field@@Base+0x134>
   3926c:	mov	r2, #10
   39270:	str	r3, [r4, #20]
   39274:	strb	r2, [r0]
   39278:	ldrb	r5, [r4, #25]
   3927c:	ldr	r3, [r4, #32]
   39280:	ldr	r2, [r4, #16]
   39284:	ldr	r0, [r4, #20]
   39288:	sub	r3, r3, #1
   3928c:	mul	r5, r3, r5
   39290:	str	r3, [r4, #32]
   39294:	add	r3, r0, r5
   39298:	cmp	r2, r3
   3929c:	bcs	392b8 <flatcc_json_printer_bool_vector_field@@Base+0x298>
   392a0:	mov	r0, r4
   392a4:	mov	r1, r5
   392a8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   392ac:	ldr	r0, [r4, #20]
   392b0:	add	r3, r0, #1
   392b4:	b	391ec <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   392b8:	mov	r2, r5
   392bc:	mov	r1, #32
   392c0:	bl	14594 <memset@plt>
   392c4:	ldr	r0, [r4, #20]
   392c8:	add	r0, r0, r5
   392cc:	add	r3, r0, #1
   392d0:	b	391ec <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   392d4:	mov	r1, #32
   392d8:	mov	r2, r5
   392dc:	bl	14594 <memset@plt>
   392e0:	ldr	r1, [r4, #20]
   392e4:	add	r1, r1, r5
   392e8:	str	r1, [r4, #20]
   392ec:	b	39100 <flatcc_json_printer_bool_vector_field@@Base+0xe0>

000392f0 <flatcc_json_printer_float_vector_field@@Base>:
   392f0:	ldr	ip, [r1, #8]
   392f4:	add	r2, r2, #2
   392f8:	lsl	r2, r2, #1
   392fc:	cmp	ip, r2
   39300:	bxle	lr
   39304:	ldr	ip, [r1, #4]
   39308:	ldrh	r2, [ip, r2]
   3930c:	cmp	r2, #0
   39310:	bxeq	lr
   39314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39318:	ldr	ip, [r1]
   3931c:	strd	r6, [sp, #8]
   39320:	str	lr, [sp, #28]
   39324:	strd	r8, [sp, #16]
   39328:	str	sl, [sp, #24]
   3932c:	adds	lr, ip, r2
   39330:	beq	394cc <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   39334:	ldr	r4, [r1, #16]
   39338:	add	r5, r4, #1
   3933c:	cmp	r4, #0
   39340:	str	r5, [r1, #16]
   39344:	beq	3935c <flatcc_json_printer_float_vector_field@@Base+0x6c>
   39348:	ldr	r1, [r0, #20]
   3934c:	mov	r4, #44	; 0x2c
   39350:	add	r5, r1, #1
   39354:	str	r5, [r0, #20]
   39358:	strb	r4, [r1]
   3935c:	mov	r1, r3
   39360:	ldr	r3, [ip, r2]
   39364:	mov	r4, r0
   39368:	ldr	r2, [sp, #32]
   3936c:	add	r5, lr, r3
   39370:	ldr	r7, [lr, r3]
   39374:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39378:	ldr	r2, [r4, #20]
   3937c:	mov	r1, #91	; 0x5b
   39380:	ldr	r3, [r4, #32]
   39384:	cmp	r7, #0
   39388:	add	r0, r2, #1
   3938c:	add	r3, r3, #1
   39390:	str	r0, [r4, #20]
   39394:	str	r3, [r4, #32]
   39398:	strb	r1, [r2]
   3939c:	beq	394ac <flatcc_json_printer_float_vector_field@@Base+0x1bc>
   393a0:	ldrb	r1, [r4, #25]
   393a4:	ldr	r0, [r4, #20]
   393a8:	cmp	r1, #0
   393ac:	bne	394e4 <flatcc_json_printer_float_vector_field@@Base+0x1f4>
   393b0:	ldr	r3, [r4, #16]
   393b4:	cmp	r3, r0
   393b8:	bhi	393cc <flatcc_json_printer_float_vector_field@@Base+0xdc>
   393bc:	mov	r0, r4
   393c0:	ldr	r3, [r4, #44]	; 0x2c
   393c4:	blx	r3
   393c8:	ldr	r0, [r4, #20]
   393cc:	add	r6, r5, #8
   393d0:	vldr	s0, [r5, #4]
   393d4:	sub	r5, r7, #2
   393d8:	vcvt.f64.f32	d0, s0
   393dc:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   393e0:	ldr	r3, [r4, #20]
   393e4:	cmp	r7, #1
   393e8:	add	r0, r3, r0
   393ec:	str	r0, [r4, #20]
   393f0:	beq	394b0 <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   393f4:	mov	r7, #44	; 0x2c
   393f8:	mov	r8, #10
   393fc:	b	39448 <flatcc_json_printer_float_vector_field@@Base+0x158>
   39400:	ldr	r3, [r4, #16]
   39404:	mov	r0, r4
   39408:	ldr	r2, [r4, #20]
   3940c:	cmp	r2, r3
   39410:	bcc	39420 <flatcc_json_printer_float_vector_field@@Base+0x130>
   39414:	ldr	r3, [r4, #44]	; 0x2c
   39418:	blx	r3
   3941c:	ldr	r2, [r4, #20]
   39420:	mov	r0, r2
   39424:	sub	r5, r5, #1
   39428:	vldmia	r6!, {s0}
   3942c:	vcvt.f64.f32	d0, s0
   39430:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39434:	ldr	r3, [r4, #20]
   39438:	cmn	r5, #1
   3943c:	add	r0, r3, r0
   39440:	str	r0, [r4, #20]
   39444:	beq	394b0 <flatcc_json_printer_float_vector_field@@Base+0x1c0>
   39448:	add	r3, r0, #1
   3944c:	str	r3, [r4, #20]
   39450:	strb	r7, [r0]
   39454:	ldrb	r1, [r4, #25]
   39458:	cmp	r1, #0
   3945c:	beq	39400 <flatcc_json_printer_float_vector_field@@Base+0x110>
   39460:	ldr	r3, [r4, #20]
   39464:	mov	r1, #32
   39468:	mov	r0, r4
   3946c:	add	r2, r3, #1
   39470:	str	r2, [r4, #20]
   39474:	strb	r8, [r3]
   39478:	ldrb	r2, [r4, #25]
   3947c:	ldr	lr, [r4, #16]
   39480:	ldr	r9, [r4, #32]
   39484:	ldr	r3, [r4, #20]
   39488:	mul	r9, r9, r2
   3948c:	add	ip, r3, r9
   39490:	mov	r2, r9
   39494:	cmp	lr, ip
   39498:	bcs	39528 <flatcc_json_printer_float_vector_field@@Base+0x238>
   3949c:	mov	r1, r9
   394a0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   394a4:	ldr	r2, [r4, #20]
   394a8:	b	39420 <flatcc_json_printer_float_vector_field@@Base+0x130>
   394ac:	ldr	r0, [r4, #20]
   394b0:	add	r3, r0, #1
   394b4:	ldrb	r2, [r4, #25]
   394b8:	cmp	r2, #0
   394bc:	bne	39540 <flatcc_json_printer_float_vector_field@@Base+0x250>
   394c0:	mov	r2, #93	; 0x5d
   394c4:	str	r3, [r4, #20]
   394c8:	strb	r2, [r0]
   394cc:	ldrd	r4, [sp]
   394d0:	ldrd	r6, [sp, #8]
   394d4:	ldrd	r8, [sp, #16]
   394d8:	ldr	sl, [sp, #24]
   394dc:	add	sp, sp, #28
   394e0:	pop	{pc}		; (ldr pc, [sp], #4)
   394e4:	add	r2, r0, #1
   394e8:	mov	r3, #10
   394ec:	str	r2, [r4, #20]
   394f0:	strb	r3, [r0]
   394f4:	ldrb	r3, [r4, #25]
   394f8:	ldr	r2, [r4, #16]
   394fc:	ldr	r6, [r4, #32]
   39500:	ldr	r0, [r4, #20]
   39504:	mul	r6, r6, r3
   39508:	add	r3, r0, r6
   3950c:	cmp	r2, r3
   39510:	bcs	395a8 <flatcc_json_printer_float_vector_field@@Base+0x2b8>
   39514:	mov	r0, r4
   39518:	mov	r1, r6
   3951c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39520:	ldr	r0, [r4, #20]
   39524:	b	393cc <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39528:	mov	r0, r3
   3952c:	bl	14594 <memset@plt>
   39530:	ldr	r2, [r4, #20]
   39534:	add	r2, r2, r9
   39538:	str	r2, [r4, #20]
   3953c:	b	39420 <flatcc_json_printer_float_vector_field@@Base+0x130>
   39540:	mov	r2, #10
   39544:	str	r3, [r4, #20]
   39548:	strb	r2, [r0]
   3954c:	ldrb	r5, [r4, #25]
   39550:	ldr	r3, [r4, #32]
   39554:	ldr	r2, [r4, #16]
   39558:	ldr	r0, [r4, #20]
   3955c:	sub	r3, r3, #1
   39560:	mul	r5, r3, r5
   39564:	str	r3, [r4, #32]
   39568:	add	r3, r0, r5
   3956c:	cmp	r2, r3
   39570:	bcs	3958c <flatcc_json_printer_float_vector_field@@Base+0x29c>
   39574:	mov	r0, r4
   39578:	mov	r1, r5
   3957c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39580:	ldr	r0, [r4, #20]
   39584:	add	r3, r0, #1
   39588:	b	394c0 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   3958c:	mov	r2, r5
   39590:	mov	r1, #32
   39594:	bl	14594 <memset@plt>
   39598:	ldr	r0, [r4, #20]
   3959c:	add	r0, r0, r5
   395a0:	add	r3, r0, #1
   395a4:	b	394c0 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   395a8:	mov	r2, r6
   395ac:	mov	r1, #32
   395b0:	bl	14594 <memset@plt>
   395b4:	ldr	r0, [r4, #20]
   395b8:	add	r0, r0, r6
   395bc:	str	r0, [r4, #20]
   395c0:	b	393cc <flatcc_json_printer_float_vector_field@@Base+0xdc>

000395c4 <flatcc_json_printer_double_vector_field@@Base>:
   395c4:	ldr	ip, [r1, #8]
   395c8:	add	r2, r2, #2
   395cc:	lsl	r2, r2, #1
   395d0:	cmp	ip, r2
   395d4:	bxle	lr
   395d8:	ldr	ip, [r1, #4]
   395dc:	ldrh	r2, [ip, r2]
   395e0:	cmp	r2, #0
   395e4:	bxeq	lr
   395e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   395ec:	ldr	ip, [r1]
   395f0:	strd	r6, [sp, #8]
   395f4:	str	lr, [sp, #28]
   395f8:	strd	r8, [sp, #16]
   395fc:	str	sl, [sp, #24]
   39600:	adds	lr, ip, r2
   39604:	beq	39798 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   39608:	ldr	r4, [r1, #16]
   3960c:	add	r5, r4, #1
   39610:	cmp	r4, #0
   39614:	str	r5, [r1, #16]
   39618:	beq	39630 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   3961c:	ldr	r1, [r0, #20]
   39620:	mov	r4, #44	; 0x2c
   39624:	add	r5, r1, #1
   39628:	str	r5, [r0, #20]
   3962c:	strb	r4, [r1]
   39630:	mov	r1, r3
   39634:	ldr	r3, [ip, r2]
   39638:	mov	r4, r0
   3963c:	ldr	r2, [sp, #32]
   39640:	add	r5, lr, r3
   39644:	ldr	r7, [lr, r3]
   39648:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3964c:	ldr	r2, [r4, #20]
   39650:	mov	r1, #91	; 0x5b
   39654:	ldr	r3, [r4, #32]
   39658:	cmp	r7, #0
   3965c:	add	r0, r2, #1
   39660:	add	r3, r3, #1
   39664:	str	r0, [r4, #20]
   39668:	str	r3, [r4, #32]
   3966c:	strb	r1, [r2]
   39670:	beq	39778 <flatcc_json_printer_double_vector_field@@Base+0x1b4>
   39674:	ldrb	r1, [r4, #25]
   39678:	ldr	r0, [r4, #20]
   3967c:	cmp	r1, #0
   39680:	bne	397b0 <flatcc_json_printer_double_vector_field@@Base+0x1ec>
   39684:	ldr	r3, [r4, #16]
   39688:	cmp	r3, r0
   3968c:	bhi	396a0 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   39690:	mov	r0, r4
   39694:	ldr	r3, [r4, #44]	; 0x2c
   39698:	blx	r3
   3969c:	ldr	r0, [r4, #20]
   396a0:	add	r6, r5, #12
   396a4:	vldr	d0, [r5, #4]
   396a8:	sub	r5, r7, #2
   396ac:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   396b0:	ldr	r3, [r4, #20]
   396b4:	cmp	r7, #1
   396b8:	add	r0, r3, r0
   396bc:	str	r0, [r4, #20]
   396c0:	beq	3977c <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   396c4:	mov	r7, #44	; 0x2c
   396c8:	mov	r8, #10
   396cc:	b	39714 <flatcc_json_printer_double_vector_field@@Base+0x150>
   396d0:	ldr	r3, [r4, #16]
   396d4:	mov	r0, r4
   396d8:	ldr	r2, [r4, #20]
   396dc:	cmp	r2, r3
   396e0:	bcc	396f0 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   396e4:	ldr	r3, [r4, #44]	; 0x2c
   396e8:	blx	r3
   396ec:	ldr	r2, [r4, #20]
   396f0:	mov	r0, r2
   396f4:	sub	r5, r5, #1
   396f8:	vldmia	r6!, {d0}
   396fc:	bl	30ea0 <flatcc_json_parser_struct_as_root@@Base+0x15ec>
   39700:	ldr	r3, [r4, #20]
   39704:	cmn	r5, #1
   39708:	add	r0, r3, r0
   3970c:	str	r0, [r4, #20]
   39710:	beq	3977c <flatcc_json_printer_double_vector_field@@Base+0x1b8>
   39714:	add	r3, r0, #1
   39718:	str	r3, [r4, #20]
   3971c:	strb	r7, [r0]
   39720:	ldrb	r1, [r4, #25]
   39724:	cmp	r1, #0
   39728:	beq	396d0 <flatcc_json_printer_double_vector_field@@Base+0x10c>
   3972c:	ldr	r3, [r4, #20]
   39730:	mov	r1, #32
   39734:	mov	r0, r4
   39738:	add	r2, r3, #1
   3973c:	str	r2, [r4, #20]
   39740:	strb	r8, [r3]
   39744:	ldrb	r2, [r4, #25]
   39748:	ldr	lr, [r4, #16]
   3974c:	ldr	r9, [r4, #32]
   39750:	ldr	r3, [r4, #20]
   39754:	mul	r9, r9, r2
   39758:	add	ip, r3, r9
   3975c:	mov	r2, r9
   39760:	cmp	lr, ip
   39764:	bcs	397f4 <flatcc_json_printer_double_vector_field@@Base+0x230>
   39768:	mov	r1, r9
   3976c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39770:	ldr	r2, [r4, #20]
   39774:	b	396f0 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   39778:	ldr	r0, [r4, #20]
   3977c:	add	r3, r0, #1
   39780:	ldrb	r2, [r4, #25]
   39784:	cmp	r2, #0
   39788:	bne	3980c <flatcc_json_printer_double_vector_field@@Base+0x248>
   3978c:	mov	r2, #93	; 0x5d
   39790:	str	r3, [r4, #20]
   39794:	strb	r2, [r0]
   39798:	ldrd	r4, [sp]
   3979c:	ldrd	r6, [sp, #8]
   397a0:	ldrd	r8, [sp, #16]
   397a4:	ldr	sl, [sp, #24]
   397a8:	add	sp, sp, #28
   397ac:	pop	{pc}		; (ldr pc, [sp], #4)
   397b0:	add	r2, r0, #1
   397b4:	mov	r3, #10
   397b8:	str	r2, [r4, #20]
   397bc:	strb	r3, [r0]
   397c0:	ldrb	r3, [r4, #25]
   397c4:	ldr	r2, [r4, #16]
   397c8:	ldr	r6, [r4, #32]
   397cc:	ldr	r0, [r4, #20]
   397d0:	mul	r6, r6, r3
   397d4:	add	r3, r0, r6
   397d8:	cmp	r2, r3
   397dc:	bcs	39874 <flatcc_json_printer_double_vector_field@@Base+0x2b0>
   397e0:	mov	r0, r4
   397e4:	mov	r1, r6
   397e8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   397ec:	ldr	r0, [r4, #20]
   397f0:	b	396a0 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   397f4:	mov	r0, r3
   397f8:	bl	14594 <memset@plt>
   397fc:	ldr	r2, [r4, #20]
   39800:	add	r2, r2, r9
   39804:	str	r2, [r4, #20]
   39808:	b	396f0 <flatcc_json_printer_double_vector_field@@Base+0x12c>
   3980c:	mov	r2, #10
   39810:	str	r3, [r4, #20]
   39814:	strb	r2, [r0]
   39818:	ldrb	r5, [r4, #25]
   3981c:	ldr	r3, [r4, #32]
   39820:	ldr	r2, [r4, #16]
   39824:	ldr	r0, [r4, #20]
   39828:	sub	r3, r3, #1
   3982c:	mul	r5, r3, r5
   39830:	str	r3, [r4, #32]
   39834:	add	r3, r0, r5
   39838:	cmp	r2, r3
   3983c:	bcs	39858 <flatcc_json_printer_double_vector_field@@Base+0x294>
   39840:	mov	r0, r4
   39844:	mov	r1, r5
   39848:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3984c:	ldr	r0, [r4, #20]
   39850:	add	r3, r0, #1
   39854:	b	3978c <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   39858:	mov	r2, r5
   3985c:	mov	r1, #32
   39860:	bl	14594 <memset@plt>
   39864:	ldr	r0, [r4, #20]
   39868:	add	r0, r0, r5
   3986c:	add	r3, r0, #1
   39870:	b	3978c <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   39874:	mov	r2, r6
   39878:	mov	r1, #32
   3987c:	bl	14594 <memset@plt>
   39880:	ldr	r0, [r4, #20]
   39884:	add	r0, r0, r6
   39888:	str	r0, [r4, #20]
   3988c:	b	396a0 <flatcc_json_printer_double_vector_field@@Base+0xdc>

00039890 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   39890:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39894:	strd	r6, [sp, #8]
   39898:	strd	r8, [sp, #16]
   3989c:	str	sl, [sp, #24]
   398a0:	str	lr, [sp, #28]
   398a4:	ldrb	r8, [r0, #27]
   398a8:	ldr	r7, [sp, #32]
   398ac:	ldr	r6, [sp, #36]	; 0x24
   398b0:	cmp	r8, #0
   398b4:	bne	39a80 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   398b8:	mov	r5, r3
   398bc:	ldr	r3, [r1, #8]
   398c0:	add	r2, r2, #2
   398c4:	lsl	r2, r2, #1
   398c8:	mov	lr, r1
   398cc:	cmp	r3, r2
   398d0:	ble	39a68 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   398d4:	ldr	r3, [r1, #4]
   398d8:	ldrh	r2, [r3, r2]
   398dc:	cmp	r2, #0
   398e0:	beq	39a68 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   398e4:	ldr	r3, [r1]
   398e8:	adds	ip, r3, r2
   398ec:	beq	39a68 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d8>
   398f0:	ldr	r1, [r1, #16]
   398f4:	mov	r4, r0
   398f8:	add	r0, r1, #1
   398fc:	cmp	r1, #0
   39900:	str	r0, [lr, #16]
   39904:	beq	3991c <flatcc_json_printer_utype_enum_vector_field@@Base+0x8c>
   39908:	ldr	r1, [r4, #20]
   3990c:	mov	r0, #44	; 0x2c
   39910:	add	lr, r1, #1
   39914:	str	lr, [r4, #20]
   39918:	strb	r0, [r1]
   3991c:	ldr	r3, [r3, r2]
   39920:	mov	r1, r5
   39924:	mov	r2, r7
   39928:	mov	r0, r4
   3992c:	add	r7, ip, r3
   39930:	ldr	r8, [ip, r3]
   39934:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39938:	ldr	r2, [r4, #20]
   3993c:	mov	r1, #91	; 0x5b
   39940:	ldr	r3, [r4, #32]
   39944:	cmp	r8, #0
   39948:	add	r0, r2, #1
   3994c:	add	r3, r3, #1
   39950:	str	r0, [r4, #20]
   39954:	str	r3, [r4, #32]
   39958:	strb	r1, [r2]
   3995c:	beq	39a48 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   39960:	ldrb	r1, [r4, #25]
   39964:	ldr	r3, [r4, #20]
   39968:	cmp	r1, #0
   3996c:	bne	39b00 <flatcc_json_printer_utype_enum_vector_field@@Base+0x270>
   39970:	ldr	r2, [r4, #16]
   39974:	cmp	r2, r3
   39978:	bhi	39988 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   3997c:	mov	r0, r4
   39980:	ldr	r3, [r4, #44]	; 0x2c
   39984:	blx	r3
   39988:	ldrb	r1, [r7, #4]
   3998c:	mov	r0, r4
   39990:	add	r5, r7, #5
   39994:	blx	r6
   39998:	cmp	r8, #1
   3999c:	beq	39a48 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   399a0:	add	r3, r8, #4
   399a4:	mov	r9, #10
   399a8:	mov	r8, #44	; 0x2c
   399ac:	add	r7, r7, r3
   399b0:	b	399e4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x154>
   399b4:	ldr	r3, [r4, #16]
   399b8:	mov	r0, r4
   399bc:	ldr	r2, [r4, #20]
   399c0:	cmp	r2, r3
   399c4:	bcc	399d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   399c8:	ldr	r3, [r4, #44]	; 0x2c
   399cc:	blx	r3
   399d0:	ldrb	r1, [r5], #1
   399d4:	mov	r0, r4
   399d8:	blx	r6
   399dc:	cmp	r5, r7
   399e0:	beq	39a48 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b8>
   399e4:	ldr	r3, [r4, #20]
   399e8:	add	r2, r3, #1
   399ec:	str	r2, [r4, #20]
   399f0:	strb	r8, [r3]
   399f4:	ldrb	r1, [r4, #25]
   399f8:	cmp	r1, #0
   399fc:	beq	399b4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   39a00:	ldr	r3, [r4, #20]
   39a04:	mov	r1, #32
   39a08:	mov	r0, r4
   39a0c:	add	r2, r3, #1
   39a10:	str	r2, [r4, #20]
   39a14:	strb	r9, [r3]
   39a18:	ldrb	r2, [r4, #25]
   39a1c:	ldr	lr, [r4, #16]
   39a20:	ldr	sl, [r4, #32]
   39a24:	ldr	r3, [r4, #20]
   39a28:	mul	sl, sl, r2
   39a2c:	add	ip, r3, sl
   39a30:	mov	r2, sl
   39a34:	cmp	lr, ip
   39a38:	bcs	39a9c <flatcc_json_printer_utype_enum_vector_field@@Base+0x20c>
   39a3c:	mov	r1, sl
   39a40:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39a44:	b	399d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   39a48:	ldrb	r2, [r4, #25]
   39a4c:	ldr	r3, [r4, #20]
   39a50:	cmp	r2, #0
   39a54:	add	r2, r3, #1
   39a58:	bne	39ab4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   39a5c:	mov	r1, #93	; 0x5d
   39a60:	str	r2, [r4, #20]
   39a64:	strb	r1, [r3]
   39a68:	ldrd	r4, [sp]
   39a6c:	ldrd	r6, [sp, #8]
   39a70:	ldrd	r8, [sp, #16]
   39a74:	ldr	sl, [sp, #24]
   39a78:	add	sp, sp, #28
   39a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   39a80:	ldrd	r4, [sp]
   39a84:	ldrd	r6, [sp, #8]
   39a88:	ldrd	r8, [sp, #16]
   39a8c:	ldr	sl, [sp, #24]
   39a90:	ldr	lr, [sp, #28]
   39a94:	add	sp, sp, #32
   39a98:	b	37ad4 <flatcc_json_printer_utype_vector_field@@Base>
   39a9c:	mov	r0, r3
   39aa0:	bl	14594 <memset@plt>
   39aa4:	ldr	r3, [r4, #20]
   39aa8:	add	sl, r3, sl
   39aac:	str	sl, [r4, #20]
   39ab0:	b	399d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   39ab4:	mov	r1, #10
   39ab8:	str	r2, [r4, #20]
   39abc:	strb	r1, [r3]
   39ac0:	ldrb	r3, [r4, #25]
   39ac4:	ldr	r2, [r4, #32]
   39ac8:	ldr	r1, [r4, #16]
   39acc:	ldr	r0, [r4, #20]
   39ad0:	sub	r2, r2, #1
   39ad4:	mul	r5, r2, r3
   39ad8:	str	r2, [r4, #32]
   39adc:	add	r3, r0, r5
   39ae0:	cmp	r1, r3
   39ae4:	bcs	39b1c <flatcc_json_printer_utype_enum_vector_field@@Base+0x28c>
   39ae8:	mov	r1, r5
   39aec:	mov	r0, r4
   39af0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39af4:	ldr	r3, [r4, #20]
   39af8:	add	r2, r3, #1
   39afc:	b	39a5c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1cc>
   39b00:	add	r1, r3, #1
   39b04:	mov	r2, #10
   39b08:	mov	r0, r4
   39b0c:	str	r1, [r4, #20]
   39b10:	strb	r2, [r3]
   39b14:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   39b18:	b	39988 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   39b1c:	mov	r2, r5
   39b20:	mov	r1, #32
   39b24:	bl	14594 <memset@plt>
   39b28:	ldr	r3, [r4, #20]
   39b2c:	add	r3, r3, r5
   39b30:	add	r2, r3, #1
   39b34:	b	39a5c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1cc>

00039b38 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   39b38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39b3c:	strd	r6, [sp, #8]
   39b40:	strd	r8, [sp, #16]
   39b44:	str	sl, [sp, #24]
   39b48:	str	lr, [sp, #28]
   39b4c:	ldrb	r8, [r0, #27]
   39b50:	ldr	r7, [sp, #32]
   39b54:	ldr	r6, [sp, #36]	; 0x24
   39b58:	cmp	r8, #0
   39b5c:	bne	39d28 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   39b60:	mov	r5, r3
   39b64:	ldr	r3, [r1, #8]
   39b68:	add	r2, r2, #2
   39b6c:	lsl	r2, r2, #1
   39b70:	mov	lr, r1
   39b74:	cmp	r3, r2
   39b78:	ble	39d10 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   39b7c:	ldr	r3, [r1, #4]
   39b80:	ldrh	r2, [r3, r2]
   39b84:	cmp	r2, #0
   39b88:	beq	39d10 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   39b8c:	ldr	r3, [r1]
   39b90:	adds	ip, r3, r2
   39b94:	beq	39d10 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d8>
   39b98:	ldr	r1, [r1, #16]
   39b9c:	mov	r4, r0
   39ba0:	add	r0, r1, #1
   39ba4:	cmp	r1, #0
   39ba8:	str	r0, [lr, #16]
   39bac:	beq	39bc4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x8c>
   39bb0:	ldr	r1, [r4, #20]
   39bb4:	mov	r0, #44	; 0x2c
   39bb8:	add	lr, r1, #1
   39bbc:	str	lr, [r4, #20]
   39bc0:	strb	r0, [r1]
   39bc4:	ldr	r3, [r3, r2]
   39bc8:	mov	r1, r5
   39bcc:	mov	r2, r7
   39bd0:	mov	r0, r4
   39bd4:	add	r7, ip, r3
   39bd8:	ldr	r8, [ip, r3]
   39bdc:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39be0:	ldr	r2, [r4, #20]
   39be4:	mov	r1, #91	; 0x5b
   39be8:	ldr	r3, [r4, #32]
   39bec:	cmp	r8, #0
   39bf0:	add	r0, r2, #1
   39bf4:	add	r3, r3, #1
   39bf8:	str	r0, [r4, #20]
   39bfc:	str	r3, [r4, #32]
   39c00:	strb	r1, [r2]
   39c04:	beq	39cf0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   39c08:	ldrb	r1, [r4, #25]
   39c0c:	ldr	r3, [r4, #20]
   39c10:	cmp	r1, #0
   39c14:	bne	39da8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   39c18:	ldr	r2, [r4, #16]
   39c1c:	cmp	r2, r3
   39c20:	bhi	39c30 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   39c24:	mov	r0, r4
   39c28:	ldr	r3, [r4, #44]	; 0x2c
   39c2c:	blx	r3
   39c30:	ldrb	r1, [r7, #4]
   39c34:	mov	r0, r4
   39c38:	add	r5, r7, #5
   39c3c:	blx	r6
   39c40:	cmp	r8, #1
   39c44:	beq	39cf0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   39c48:	add	r3, r8, #4
   39c4c:	mov	r9, #10
   39c50:	mov	r8, #44	; 0x2c
   39c54:	add	r7, r7, r3
   39c58:	b	39c8c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x154>
   39c5c:	ldr	r3, [r4, #16]
   39c60:	mov	r0, r4
   39c64:	ldr	r2, [r4, #20]
   39c68:	cmp	r2, r3
   39c6c:	bcc	39c78 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   39c70:	ldr	r3, [r4, #44]	; 0x2c
   39c74:	blx	r3
   39c78:	ldrb	r1, [r5], #1
   39c7c:	mov	r0, r4
   39c80:	blx	r6
   39c84:	cmp	r5, r7
   39c88:	beq	39cf0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   39c8c:	ldr	r3, [r4, #20]
   39c90:	add	r2, r3, #1
   39c94:	str	r2, [r4, #20]
   39c98:	strb	r8, [r3]
   39c9c:	ldrb	r1, [r4, #25]
   39ca0:	cmp	r1, #0
   39ca4:	beq	39c5c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   39ca8:	ldr	r3, [r4, #20]
   39cac:	mov	r1, #32
   39cb0:	mov	r0, r4
   39cb4:	add	r2, r3, #1
   39cb8:	str	r2, [r4, #20]
   39cbc:	strb	r9, [r3]
   39cc0:	ldrb	r2, [r4, #25]
   39cc4:	ldr	lr, [r4, #16]
   39cc8:	ldr	sl, [r4, #32]
   39ccc:	ldr	r3, [r4, #20]
   39cd0:	mul	sl, sl, r2
   39cd4:	add	ip, r3, sl
   39cd8:	mov	r2, sl
   39cdc:	cmp	lr, ip
   39ce0:	bcs	39d44 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20c>
   39ce4:	mov	r1, sl
   39ce8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39cec:	b	39c78 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   39cf0:	ldrb	r2, [r4, #25]
   39cf4:	ldr	r3, [r4, #20]
   39cf8:	cmp	r2, #0
   39cfc:	add	r2, r3, #1
   39d00:	bne	39d5c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   39d04:	mov	r1, #93	; 0x5d
   39d08:	str	r2, [r4, #20]
   39d0c:	strb	r1, [r3]
   39d10:	ldrd	r4, [sp]
   39d14:	ldrd	r6, [sp, #8]
   39d18:	ldrd	r8, [sp, #16]
   39d1c:	ldr	sl, [sp, #24]
   39d20:	add	sp, sp, #28
   39d24:	pop	{pc}		; (ldr pc, [sp], #4)
   39d28:	ldrd	r4, [sp]
   39d2c:	ldrd	r6, [sp, #8]
   39d30:	ldrd	r8, [sp, #16]
   39d34:	ldr	sl, [sp, #24]
   39d38:	ldr	lr, [sp, #28]
   39d3c:	add	sp, sp, #32
   39d40:	b	37804 <flatcc_json_printer_uint8_vector_field@@Base>
   39d44:	mov	r0, r3
   39d48:	bl	14594 <memset@plt>
   39d4c:	ldr	r3, [r4, #20]
   39d50:	add	sl, r3, sl
   39d54:	str	sl, [r4, #20]
   39d58:	b	39c78 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   39d5c:	mov	r1, #10
   39d60:	str	r2, [r4, #20]
   39d64:	strb	r1, [r3]
   39d68:	ldrb	r3, [r4, #25]
   39d6c:	ldr	r2, [r4, #32]
   39d70:	ldr	r1, [r4, #16]
   39d74:	ldr	r0, [r4, #20]
   39d78:	sub	r2, r2, #1
   39d7c:	mul	r5, r2, r3
   39d80:	str	r2, [r4, #32]
   39d84:	add	r3, r0, r5
   39d88:	cmp	r1, r3
   39d8c:	bcs	39dc4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   39d90:	mov	r1, r5
   39d94:	mov	r0, r4
   39d98:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39d9c:	ldr	r3, [r4, #20]
   39da0:	add	r2, r3, #1
   39da4:	b	39d04 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   39da8:	add	r1, r3, #1
   39dac:	mov	r2, #10
   39db0:	mov	r0, r4
   39db4:	str	r1, [r4, #20]
   39db8:	strb	r2, [r3]
   39dbc:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   39dc0:	b	39c30 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   39dc4:	mov	r2, r5
   39dc8:	mov	r1, #32
   39dcc:	bl	14594 <memset@plt>
   39dd0:	ldr	r3, [r4, #20]
   39dd4:	add	r3, r3, r5
   39dd8:	add	r2, r3, #1
   39ddc:	b	39d04 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>

00039de0 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39de0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39de4:	strd	r6, [sp, #8]
   39de8:	strd	r8, [sp, #16]
   39dec:	str	sl, [sp, #24]
   39df0:	str	lr, [sp, #28]
   39df4:	ldrb	r8, [r0, #27]
   39df8:	ldrd	r6, [sp, #32]
   39dfc:	cmp	r8, #0
   39e00:	bne	39fcc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1ec>
   39e04:	mov	r5, r3
   39e08:	ldr	r3, [r1, #8]
   39e0c:	add	r2, r2, #2
   39e10:	lsl	r2, r2, #1
   39e14:	mov	lr, r1
   39e18:	cmp	r3, r2
   39e1c:	ble	39fb4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39e20:	ldr	r3, [r1, #4]
   39e24:	ldrh	r2, [r3, r2]
   39e28:	cmp	r2, #0
   39e2c:	beq	39fb4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39e30:	ldr	r3, [r1]
   39e34:	adds	ip, r3, r2
   39e38:	beq	39fb4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39e3c:	ldr	r1, [r1, #16]
   39e40:	mov	r4, r0
   39e44:	add	r0, r1, #1
   39e48:	cmp	r1, #0
   39e4c:	str	r0, [lr, #16]
   39e50:	beq	39e68 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x88>
   39e54:	ldr	r1, [r4, #20]
   39e58:	mov	r0, #44	; 0x2c
   39e5c:	add	lr, r1, #1
   39e60:	str	lr, [r4, #20]
   39e64:	strb	r0, [r1]
   39e68:	ldr	r3, [r3, r2]
   39e6c:	mov	r1, r5
   39e70:	mov	r2, r6
   39e74:	mov	r0, r4
   39e78:	add	r6, ip, r3
   39e7c:	ldr	r5, [ip, r3]
   39e80:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   39e84:	ldr	r2, [r4, #20]
   39e88:	mov	r1, #91	; 0x5b
   39e8c:	ldr	r3, [r4, #32]
   39e90:	cmp	r5, #0
   39e94:	add	r0, r2, #1
   39e98:	add	r3, r3, #1
   39e9c:	str	r0, [r4, #20]
   39ea0:	str	r3, [r4, #32]
   39ea4:	strb	r1, [r2]
   39ea8:	beq	39f94 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   39eac:	ldrb	r1, [r4, #25]
   39eb0:	ldr	r3, [r4, #20]
   39eb4:	cmp	r1, #0
   39eb8:	bne	3a04c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x26c>
   39ebc:	ldr	r2, [r4, #16]
   39ec0:	cmp	r2, r3
   39ec4:	bhi	39ed4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   39ec8:	mov	r0, r4
   39ecc:	ldr	r3, [r4, #44]	; 0x2c
   39ed0:	blx	r3
   39ed4:	ldrh	r1, [r6, #4]
   39ed8:	mov	r0, r4
   39edc:	add	r6, r6, #6
   39ee0:	blx	r7
   39ee4:	cmp	r5, #1
   39ee8:	sub	r5, r5, #2
   39eec:	beq	39f94 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   39ef0:	mov	r8, #44	; 0x2c
   39ef4:	mov	r9, #10
   39ef8:	b	39f30 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
   39efc:	ldr	r3, [r4, #16]
   39f00:	mov	r0, r4
   39f04:	ldr	r2, [r4, #20]
   39f08:	cmp	r2, r3
   39f0c:	bcc	39f18 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   39f10:	ldr	r3, [r4, #44]	; 0x2c
   39f14:	blx	r3
   39f18:	sub	r5, r5, #1
   39f1c:	ldrh	r1, [r6], #2
   39f20:	mov	r0, r4
   39f24:	blx	r7
   39f28:	cmn	r5, #1
   39f2c:	beq	39f94 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   39f30:	ldr	r3, [r4, #20]
   39f34:	add	r2, r3, #1
   39f38:	str	r2, [r4, #20]
   39f3c:	strb	r8, [r3]
   39f40:	ldrb	r1, [r4, #25]
   39f44:	cmp	r1, #0
   39f48:	beq	39efc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   39f4c:	ldr	r3, [r4, #20]
   39f50:	mov	r1, #32
   39f54:	mov	r0, r4
   39f58:	add	r2, r3, #1
   39f5c:	str	r2, [r4, #20]
   39f60:	strb	r9, [r3]
   39f64:	ldrb	r2, [r4, #25]
   39f68:	ldr	lr, [r4, #16]
   39f6c:	ldr	sl, [r4, #32]
   39f70:	ldr	r3, [r4, #20]
   39f74:	mul	sl, sl, r2
   39f78:	add	ip, r3, sl
   39f7c:	mov	r2, sl
   39f80:	cmp	lr, ip
   39f84:	bcs	39fe8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x208>
   39f88:	mov	r1, sl
   39f8c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   39f90:	b	39f18 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   39f94:	ldrb	r2, [r4, #25]
   39f98:	ldr	r3, [r4, #20]
   39f9c:	cmp	r2, #0
   39fa0:	add	r2, r3, #1
   39fa4:	bne	3a000 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   39fa8:	mov	r1, #93	; 0x5d
   39fac:	str	r2, [r4, #20]
   39fb0:	strb	r1, [r3]
   39fb4:	ldrd	r4, [sp]
   39fb8:	ldrd	r6, [sp, #8]
   39fbc:	ldrd	r8, [sp, #16]
   39fc0:	ldr	sl, [sp, #24]
   39fc4:	add	sp, sp, #28
   39fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   39fcc:	ldrd	r4, [sp]
   39fd0:	ldrd	r6, [sp, #8]
   39fd4:	ldrd	r8, [sp, #16]
   39fd8:	ldr	sl, [sp, #24]
   39fdc:	ldr	lr, [sp, #28]
   39fe0:	add	sp, sp, #32
   39fe4:	b	37ad8 <flatcc_json_printer_uint16_vector_field@@Base>
   39fe8:	mov	r0, r3
   39fec:	bl	14594 <memset@plt>
   39ff0:	ldr	r3, [r4, #20]
   39ff4:	add	sl, r3, sl
   39ff8:	str	sl, [r4, #20]
   39ffc:	b	39f18 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   3a000:	mov	r1, #10
   3a004:	str	r2, [r4, #20]
   3a008:	strb	r1, [r3]
   3a00c:	ldrb	r3, [r4, #25]
   3a010:	ldr	r2, [r4, #32]
   3a014:	ldr	r1, [r4, #16]
   3a018:	ldr	r0, [r4, #20]
   3a01c:	sub	r2, r2, #1
   3a020:	mul	r5, r2, r3
   3a024:	str	r2, [r4, #32]
   3a028:	add	r3, r0, r5
   3a02c:	cmp	r1, r3
   3a030:	bcs	3a068 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x288>
   3a034:	mov	r1, r5
   3a038:	mov	r0, r4
   3a03c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a040:	ldr	r3, [r4, #20]
   3a044:	add	r2, r3, #1
   3a048:	b	39fa8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>
   3a04c:	add	r1, r3, #1
   3a050:	mov	r2, #10
   3a054:	mov	r0, r4
   3a058:	str	r1, [r4, #20]
   3a05c:	strb	r2, [r3]
   3a060:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a064:	b	39ed4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3a068:	mov	r2, r5
   3a06c:	mov	r1, #32
   3a070:	bl	14594 <memset@plt>
   3a074:	ldr	r3, [r4, #20]
   3a078:	add	r3, r3, r5
   3a07c:	add	r2, r3, #1
   3a080:	b	39fa8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c8>

0003a084 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3a084:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a088:	strd	r6, [sp, #8]
   3a08c:	strd	r8, [sp, #16]
   3a090:	str	sl, [sp, #24]
   3a094:	str	lr, [sp, #28]
   3a098:	ldrb	r8, [r0, #27]
   3a09c:	ldrd	r6, [sp, #32]
   3a0a0:	cmp	r8, #0
   3a0a4:	bne	3a270 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1ec>
   3a0a8:	mov	r5, r3
   3a0ac:	ldr	r3, [r1, #8]
   3a0b0:	add	r2, r2, #2
   3a0b4:	lsl	r2, r2, #1
   3a0b8:	mov	lr, r1
   3a0bc:	cmp	r3, r2
   3a0c0:	ble	3a258 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a0c4:	ldr	r3, [r1, #4]
   3a0c8:	ldrh	r2, [r3, r2]
   3a0cc:	cmp	r2, #0
   3a0d0:	beq	3a258 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a0d4:	ldr	r3, [r1]
   3a0d8:	adds	ip, r3, r2
   3a0dc:	beq	3a258 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   3a0e0:	ldr	r1, [r1, #16]
   3a0e4:	mov	r4, r0
   3a0e8:	add	r0, r1, #1
   3a0ec:	cmp	r1, #0
   3a0f0:	str	r0, [lr, #16]
   3a0f4:	beq	3a10c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x88>
   3a0f8:	ldr	r1, [r4, #20]
   3a0fc:	mov	r0, #44	; 0x2c
   3a100:	add	lr, r1, #1
   3a104:	str	lr, [r4, #20]
   3a108:	strb	r0, [r1]
   3a10c:	ldr	r3, [r3, r2]
   3a110:	mov	r1, r5
   3a114:	mov	r2, r6
   3a118:	mov	r0, r4
   3a11c:	add	r6, ip, r3
   3a120:	ldr	r5, [ip, r3]
   3a124:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a128:	ldr	r2, [r4, #20]
   3a12c:	mov	r1, #91	; 0x5b
   3a130:	ldr	r3, [r4, #32]
   3a134:	cmp	r5, #0
   3a138:	add	r0, r2, #1
   3a13c:	add	r3, r3, #1
   3a140:	str	r0, [r4, #20]
   3a144:	str	r3, [r4, #32]
   3a148:	strb	r1, [r2]
   3a14c:	beq	3a238 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3a150:	ldrb	r1, [r4, #25]
   3a154:	ldr	r3, [r4, #20]
   3a158:	cmp	r1, #0
   3a15c:	bne	3a2f0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x26c>
   3a160:	ldr	r2, [r4, #16]
   3a164:	cmp	r2, r3
   3a168:	bhi	3a178 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3a16c:	mov	r0, r4
   3a170:	ldr	r3, [r4, #44]	; 0x2c
   3a174:	blx	r3
   3a178:	mov	r0, r4
   3a17c:	ldr	r1, [r6, #4]
   3a180:	add	r6, r6, #8
   3a184:	blx	r7
   3a188:	cmp	r5, #1
   3a18c:	sub	r5, r5, #2
   3a190:	beq	3a238 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3a194:	mov	r8, #44	; 0x2c
   3a198:	mov	r9, #10
   3a19c:	b	3a1d4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x150>
   3a1a0:	ldr	r3, [r4, #16]
   3a1a4:	mov	r0, r4
   3a1a8:	ldr	r2, [r4, #20]
   3a1ac:	cmp	r2, r3
   3a1b0:	bcc	3a1bc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3a1b4:	ldr	r3, [r4, #44]	; 0x2c
   3a1b8:	blx	r3
   3a1bc:	sub	r5, r5, #1
   3a1c0:	mov	r0, r4
   3a1c4:	ldr	r1, [r6], #4
   3a1c8:	blx	r7
   3a1cc:	cmn	r5, #1
   3a1d0:	beq	3a238 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   3a1d4:	ldr	r3, [r4, #20]
   3a1d8:	add	r2, r3, #1
   3a1dc:	str	r2, [r4, #20]
   3a1e0:	strb	r8, [r3]
   3a1e4:	ldrb	r1, [r4, #25]
   3a1e8:	cmp	r1, #0
   3a1ec:	beq	3a1a0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3a1f0:	ldr	r3, [r4, #20]
   3a1f4:	mov	r1, #32
   3a1f8:	mov	r0, r4
   3a1fc:	add	r2, r3, #1
   3a200:	str	r2, [r4, #20]
   3a204:	strb	r9, [r3]
   3a208:	ldrb	r2, [r4, #25]
   3a20c:	ldr	lr, [r4, #16]
   3a210:	ldr	sl, [r4, #32]
   3a214:	ldr	r3, [r4, #20]
   3a218:	mul	sl, sl, r2
   3a21c:	add	ip, r3, sl
   3a220:	mov	r2, sl
   3a224:	cmp	lr, ip
   3a228:	bcs	3a28c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x208>
   3a22c:	mov	r1, sl
   3a230:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a234:	b	3a1bc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3a238:	ldrb	r2, [r4, #25]
   3a23c:	ldr	r3, [r4, #20]
   3a240:	cmp	r2, #0
   3a244:	add	r2, r3, #1
   3a248:	bne	3a2a4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   3a24c:	mov	r1, #93	; 0x5d
   3a250:	str	r2, [r4, #20]
   3a254:	strb	r1, [r3]
   3a258:	ldrd	r4, [sp]
   3a25c:	ldrd	r6, [sp, #8]
   3a260:	ldrd	r8, [sp, #16]
   3a264:	ldr	sl, [sp, #24]
   3a268:	add	sp, sp, #28
   3a26c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a270:	ldrd	r4, [sp]
   3a274:	ldrd	r6, [sp, #8]
   3a278:	ldrd	r8, [sp, #16]
   3a27c:	ldr	sl, [sp, #24]
   3a280:	ldr	lr, [sp, #28]
   3a284:	add	sp, sp, #32
   3a288:	b	37ed0 <flatcc_json_printer_uint32_vector_field@@Base>
   3a28c:	mov	r0, r3
   3a290:	bl	14594 <memset@plt>
   3a294:	ldr	r3, [r4, #20]
   3a298:	add	sl, r3, sl
   3a29c:	str	sl, [r4, #20]
   3a2a0:	b	3a1bc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   3a2a4:	mov	r1, #10
   3a2a8:	str	r2, [r4, #20]
   3a2ac:	strb	r1, [r3]
   3a2b0:	ldrb	r3, [r4, #25]
   3a2b4:	ldr	r2, [r4, #32]
   3a2b8:	ldr	r1, [r4, #16]
   3a2bc:	ldr	r0, [r4, #20]
   3a2c0:	sub	r2, r2, #1
   3a2c4:	mul	r5, r2, r3
   3a2c8:	str	r2, [r4, #32]
   3a2cc:	add	r3, r0, r5
   3a2d0:	cmp	r1, r3
   3a2d4:	bcs	3a30c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x288>
   3a2d8:	mov	r1, r5
   3a2dc:	mov	r0, r4
   3a2e0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a2e4:	ldr	r3, [r4, #20]
   3a2e8:	add	r2, r3, #1
   3a2ec:	b	3a24c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>
   3a2f0:	add	r1, r3, #1
   3a2f4:	mov	r2, #10
   3a2f8:	mov	r0, r4
   3a2fc:	str	r1, [r4, #20]
   3a300:	strb	r2, [r3]
   3a304:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a308:	b	3a178 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3a30c:	mov	r2, r5
   3a310:	mov	r1, #32
   3a314:	bl	14594 <memset@plt>
   3a318:	ldr	r3, [r4, #20]
   3a31c:	add	r3, r3, r5
   3a320:	add	r2, r3, #1
   3a324:	b	3a24c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c8>

0003a328 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3a328:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a32c:	strd	r6, [sp, #8]
   3a330:	strd	r8, [sp, #16]
   3a334:	str	sl, [sp, #24]
   3a338:	str	lr, [sp, #28]
   3a33c:	ldrb	r8, [r0, #27]
   3a340:	ldrd	r6, [sp, #32]
   3a344:	cmp	r8, #0
   3a348:	bne	3a514 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1ec>
   3a34c:	mov	r5, r3
   3a350:	ldr	r3, [r1, #8]
   3a354:	add	r2, r2, #2
   3a358:	lsl	r2, r2, #1
   3a35c:	mov	lr, r1
   3a360:	cmp	r3, r2
   3a364:	ble	3a4fc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a368:	ldr	r3, [r1, #4]
   3a36c:	ldrh	r2, [r3, r2]
   3a370:	cmp	r2, #0
   3a374:	beq	3a4fc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a378:	ldr	r3, [r1]
   3a37c:	adds	ip, r3, r2
   3a380:	beq	3a4fc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a384:	ldr	r1, [r1, #16]
   3a388:	mov	r4, r0
   3a38c:	add	r0, r1, #1
   3a390:	cmp	r1, #0
   3a394:	str	r0, [lr, #16]
   3a398:	beq	3a3b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x88>
   3a39c:	ldr	r1, [r4, #20]
   3a3a0:	mov	r0, #44	; 0x2c
   3a3a4:	add	lr, r1, #1
   3a3a8:	str	lr, [r4, #20]
   3a3ac:	strb	r0, [r1]
   3a3b0:	ldr	r3, [r3, r2]
   3a3b4:	mov	r1, r5
   3a3b8:	mov	r2, r6
   3a3bc:	mov	r0, r4
   3a3c0:	add	r6, ip, r3
   3a3c4:	ldr	r5, [ip, r3]
   3a3c8:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a3cc:	ldr	r2, [r4, #20]
   3a3d0:	mov	r1, #91	; 0x5b
   3a3d4:	ldr	r3, [r4, #32]
   3a3d8:	cmp	r5, #0
   3a3dc:	add	r0, r2, #1
   3a3e0:	add	r3, r3, #1
   3a3e4:	str	r0, [r4, #20]
   3a3e8:	str	r3, [r4, #32]
   3a3ec:	strb	r1, [r2]
   3a3f0:	beq	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3a3f4:	ldrb	r1, [r4, #25]
   3a3f8:	ldr	r3, [r4, #20]
   3a3fc:	cmp	r1, #0
   3a400:	bne	3a594 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x26c>
   3a404:	ldr	r2, [r4, #16]
   3a408:	cmp	r2, r3
   3a40c:	bhi	3a41c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3a410:	mov	r0, r4
   3a414:	ldr	r3, [r4, #44]	; 0x2c
   3a418:	blx	r3
   3a41c:	mov	r0, r4
   3a420:	ldrd	r2, [r6, #4]
   3a424:	add	r6, r6, #12
   3a428:	blx	r7
   3a42c:	cmp	r5, #1
   3a430:	sub	r5, r5, #2
   3a434:	beq	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3a438:	mov	r8, #44	; 0x2c
   3a43c:	mov	r9, #10
   3a440:	b	3a478 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
   3a444:	ldr	r3, [r4, #16]
   3a448:	mov	r0, r4
   3a44c:	ldr	r2, [r4, #20]
   3a450:	cmp	r2, r3
   3a454:	bcc	3a460 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3a458:	ldr	r3, [r4, #44]	; 0x2c
   3a45c:	blx	r3
   3a460:	sub	r5, r5, #1
   3a464:	mov	r0, r4
   3a468:	ldrd	r2, [r6], #8
   3a46c:	blx	r7
   3a470:	cmn	r5, #1
   3a474:	beq	3a4dc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b4>
   3a478:	ldr	r3, [r4, #20]
   3a47c:	add	r2, r3, #1
   3a480:	str	r2, [r4, #20]
   3a484:	strb	r8, [r3]
   3a488:	ldrb	r1, [r4, #25]
   3a48c:	cmp	r1, #0
   3a490:	beq	3a444 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3a494:	ldr	r3, [r4, #20]
   3a498:	mov	r1, #32
   3a49c:	mov	r0, r4
   3a4a0:	add	r2, r3, #1
   3a4a4:	str	r2, [r4, #20]
   3a4a8:	strb	r9, [r3]
   3a4ac:	ldrb	r2, [r4, #25]
   3a4b0:	ldr	lr, [r4, #16]
   3a4b4:	ldr	sl, [r4, #32]
   3a4b8:	ldr	r3, [r4, #20]
   3a4bc:	mul	sl, sl, r2
   3a4c0:	add	ip, r3, sl
   3a4c4:	mov	r2, sl
   3a4c8:	cmp	lr, ip
   3a4cc:	bcs	3a530 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x208>
   3a4d0:	mov	r1, sl
   3a4d4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a4d8:	b	3a460 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3a4dc:	ldrb	r2, [r4, #25]
   3a4e0:	ldr	r3, [r4, #20]
   3a4e4:	cmp	r2, #0
   3a4e8:	add	r2, r3, #1
   3a4ec:	bne	3a548 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   3a4f0:	mov	r1, #93	; 0x5d
   3a4f4:	str	r2, [r4, #20]
   3a4f8:	strb	r1, [r3]
   3a4fc:	ldrd	r4, [sp]
   3a500:	ldrd	r6, [sp, #8]
   3a504:	ldrd	r8, [sp, #16]
   3a508:	ldr	sl, [sp, #24]
   3a50c:	add	sp, sp, #28
   3a510:	pop	{pc}		; (ldr pc, [sp], #4)
   3a514:	ldrd	r4, [sp]
   3a518:	ldrd	r6, [sp, #8]
   3a51c:	ldrd	r8, [sp, #16]
   3a520:	ldr	sl, [sp, #24]
   3a524:	ldr	lr, [sp, #28]
   3a528:	add	sp, sp, #32
   3a52c:	b	381a0 <flatcc_json_printer_uint64_vector_field@@Base>
   3a530:	mov	r0, r3
   3a534:	bl	14594 <memset@plt>
   3a538:	ldr	r3, [r4, #20]
   3a53c:	add	sl, r3, sl
   3a540:	str	sl, [r4, #20]
   3a544:	b	3a460 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3a548:	mov	r1, #10
   3a54c:	str	r2, [r4, #20]
   3a550:	strb	r1, [r3]
   3a554:	ldrb	r3, [r4, #25]
   3a558:	ldr	r2, [r4, #32]
   3a55c:	ldr	r1, [r4, #16]
   3a560:	ldr	r0, [r4, #20]
   3a564:	sub	r2, r2, #1
   3a568:	mul	r5, r2, r3
   3a56c:	str	r2, [r4, #32]
   3a570:	add	r3, r0, r5
   3a574:	cmp	r1, r3
   3a578:	bcs	3a5b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x288>
   3a57c:	mov	r1, r5
   3a580:	mov	r0, r4
   3a584:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a588:	ldr	r3, [r4, #20]
   3a58c:	add	r2, r3, #1
   3a590:	b	3a4f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>
   3a594:	add	r1, r3, #1
   3a598:	mov	r2, #10
   3a59c:	mov	r0, r4
   3a5a0:	str	r1, [r4, #20]
   3a5a4:	strb	r2, [r3]
   3a5a8:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a5ac:	b	3a41c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3a5b0:	mov	r2, r5
   3a5b4:	mov	r1, #32
   3a5b8:	bl	14594 <memset@plt>
   3a5bc:	ldr	r3, [r4, #20]
   3a5c0:	add	r3, r3, r5
   3a5c4:	add	r2, r3, #1
   3a5c8:	b	3a4f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c8>

0003a5cc <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3a5cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a5d0:	strd	r6, [sp, #8]
   3a5d4:	strd	r8, [sp, #16]
   3a5d8:	str	sl, [sp, #24]
   3a5dc:	str	lr, [sp, #28]
   3a5e0:	ldrb	r8, [r0, #27]
   3a5e4:	ldr	r7, [sp, #32]
   3a5e8:	ldr	r6, [sp, #36]	; 0x24
   3a5ec:	cmp	r8, #0
   3a5f0:	bne	3a7bc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   3a5f4:	mov	r5, r3
   3a5f8:	ldr	r3, [r1, #8]
   3a5fc:	add	r2, r2, #2
   3a600:	lsl	r2, r2, #1
   3a604:	mov	lr, r1
   3a608:	cmp	r3, r2
   3a60c:	ble	3a7a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3a610:	ldr	r3, [r1, #4]
   3a614:	ldrh	r2, [r3, r2]
   3a618:	cmp	r2, #0
   3a61c:	beq	3a7a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3a620:	ldr	r3, [r1]
   3a624:	adds	ip, r3, r2
   3a628:	beq	3a7a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d8>
   3a62c:	ldr	r1, [r1, #16]
   3a630:	mov	r4, r0
   3a634:	add	r0, r1, #1
   3a638:	cmp	r1, #0
   3a63c:	str	r0, [lr, #16]
   3a640:	beq	3a658 <flatcc_json_printer_int8_enum_vector_field@@Base+0x8c>
   3a644:	ldr	r1, [r4, #20]
   3a648:	mov	r0, #44	; 0x2c
   3a64c:	add	lr, r1, #1
   3a650:	str	lr, [r4, #20]
   3a654:	strb	r0, [r1]
   3a658:	ldr	r3, [r3, r2]
   3a65c:	mov	r1, r5
   3a660:	mov	r2, r7
   3a664:	mov	r0, r4
   3a668:	add	r7, ip, r3
   3a66c:	ldr	r8, [ip, r3]
   3a670:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a674:	ldr	r2, [r4, #20]
   3a678:	mov	r1, #91	; 0x5b
   3a67c:	ldr	r3, [r4, #32]
   3a680:	cmp	r8, #0
   3a684:	add	r0, r2, #1
   3a688:	add	r3, r3, #1
   3a68c:	str	r0, [r4, #20]
   3a690:	str	r3, [r4, #32]
   3a694:	strb	r1, [r2]
   3a698:	beq	3a784 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3a69c:	ldrb	r1, [r4, #25]
   3a6a0:	ldr	r3, [r4, #20]
   3a6a4:	cmp	r1, #0
   3a6a8:	bne	3a83c <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   3a6ac:	ldr	r2, [r4, #16]
   3a6b0:	cmp	r2, r3
   3a6b4:	bhi	3a6c4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3a6b8:	mov	r0, r4
   3a6bc:	ldr	r3, [r4, #44]	; 0x2c
   3a6c0:	blx	r3
   3a6c4:	ldrsb	r1, [r7, #4]
   3a6c8:	mov	r0, r4
   3a6cc:	add	r5, r7, #5
   3a6d0:	blx	r6
   3a6d4:	cmp	r8, #1
   3a6d8:	beq	3a784 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3a6dc:	add	r3, r8, #4
   3a6e0:	mov	r9, #10
   3a6e4:	mov	r8, #44	; 0x2c
   3a6e8:	add	r7, r7, r3
   3a6ec:	b	3a720 <flatcc_json_printer_int8_enum_vector_field@@Base+0x154>
   3a6f0:	ldr	r3, [r4, #16]
   3a6f4:	mov	r0, r4
   3a6f8:	ldr	r2, [r4, #20]
   3a6fc:	cmp	r2, r3
   3a700:	bcc	3a70c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3a704:	ldr	r3, [r4, #44]	; 0x2c
   3a708:	blx	r3
   3a70c:	ldrsb	r1, [r5], #1
   3a710:	mov	r0, r4
   3a714:	blx	r6
   3a718:	cmp	r5, r7
   3a71c:	beq	3a784 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3a720:	ldr	r3, [r4, #20]
   3a724:	add	r2, r3, #1
   3a728:	str	r2, [r4, #20]
   3a72c:	strb	r8, [r3]
   3a730:	ldrb	r1, [r4, #25]
   3a734:	cmp	r1, #0
   3a738:	beq	3a6f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3a73c:	ldr	r3, [r4, #20]
   3a740:	mov	r1, #32
   3a744:	mov	r0, r4
   3a748:	add	r2, r3, #1
   3a74c:	str	r2, [r4, #20]
   3a750:	strb	r9, [r3]
   3a754:	ldrb	r2, [r4, #25]
   3a758:	ldr	lr, [r4, #16]
   3a75c:	ldr	sl, [r4, #32]
   3a760:	ldr	r3, [r4, #20]
   3a764:	mul	sl, sl, r2
   3a768:	add	ip, r3, sl
   3a76c:	mov	r2, sl
   3a770:	cmp	lr, ip
   3a774:	bcs	3a7d8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20c>
   3a778:	mov	r1, sl
   3a77c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a780:	b	3a70c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3a784:	ldrb	r2, [r4, #25]
   3a788:	ldr	r3, [r4, #20]
   3a78c:	cmp	r2, #0
   3a790:	add	r2, r3, #1
   3a794:	bne	3a7f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3a798:	mov	r1, #93	; 0x5d
   3a79c:	str	r2, [r4, #20]
   3a7a0:	strb	r1, [r3]
   3a7a4:	ldrd	r4, [sp]
   3a7a8:	ldrd	r6, [sp, #8]
   3a7ac:	ldrd	r8, [sp, #16]
   3a7b0:	ldr	sl, [sp, #24]
   3a7b4:	add	sp, sp, #28
   3a7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   3a7bc:	ldrd	r4, [sp]
   3a7c0:	ldrd	r6, [sp, #8]
   3a7c4:	ldrd	r8, [sp, #16]
   3a7c8:	ldr	sl, [sp, #24]
   3a7cc:	ldr	lr, [sp, #28]
   3a7d0:	add	sp, sp, #32
   3a7d4:	b	38468 <flatcc_json_printer_int8_vector_field@@Base>
   3a7d8:	mov	r0, r3
   3a7dc:	bl	14594 <memset@plt>
   3a7e0:	ldr	r3, [r4, #20]
   3a7e4:	add	sl, r3, sl
   3a7e8:	str	sl, [r4, #20]
   3a7ec:	b	3a70c <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   3a7f0:	mov	r1, #10
   3a7f4:	str	r2, [r4, #20]
   3a7f8:	strb	r1, [r3]
   3a7fc:	ldrb	r3, [r4, #25]
   3a800:	ldr	r2, [r4, #32]
   3a804:	ldr	r1, [r4, #16]
   3a808:	ldr	r0, [r4, #20]
   3a80c:	sub	r2, r2, #1
   3a810:	mul	r5, r2, r3
   3a814:	str	r2, [r4, #32]
   3a818:	add	r3, r0, r5
   3a81c:	cmp	r1, r3
   3a820:	bcs	3a858 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3a824:	mov	r1, r5
   3a828:	mov	r0, r4
   3a82c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3a830:	ldr	r3, [r4, #20]
   3a834:	add	r2, r3, #1
   3a838:	b	3a798 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3a83c:	add	r1, r3, #1
   3a840:	mov	r2, #10
   3a844:	mov	r0, r4
   3a848:	str	r1, [r4, #20]
   3a84c:	strb	r2, [r3]
   3a850:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3a854:	b	3a6c4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3a858:	mov	r2, r5
   3a85c:	mov	r1, #32
   3a860:	bl	14594 <memset@plt>
   3a864:	ldr	r3, [r4, #20]
   3a868:	add	r3, r3, r5
   3a86c:	add	r2, r3, #1
   3a870:	b	3a798 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>

0003a874 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3a874:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3a878:	strd	r6, [sp, #8]
   3a87c:	strd	r8, [sp, #16]
   3a880:	str	sl, [sp, #24]
   3a884:	str	lr, [sp, #28]
   3a888:	ldrb	r8, [r0, #27]
   3a88c:	ldrd	r6, [sp, #32]
   3a890:	cmp	r8, #0
   3a894:	bne	3aa60 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1ec>
   3a898:	mov	r5, r3
   3a89c:	ldr	r3, [r1, #8]
   3a8a0:	add	r2, r2, #2
   3a8a4:	lsl	r2, r2, #1
   3a8a8:	mov	lr, r1
   3a8ac:	cmp	r3, r2
   3a8b0:	ble	3aa48 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a8b4:	ldr	r3, [r1, #4]
   3a8b8:	ldrh	r2, [r3, r2]
   3a8bc:	cmp	r2, #0
   3a8c0:	beq	3aa48 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a8c4:	ldr	r3, [r1]
   3a8c8:	adds	ip, r3, r2
   3a8cc:	beq	3aa48 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a8d0:	ldr	r1, [r1, #16]
   3a8d4:	mov	r4, r0
   3a8d8:	add	r0, r1, #1
   3a8dc:	cmp	r1, #0
   3a8e0:	str	r0, [lr, #16]
   3a8e4:	beq	3a8fc <flatcc_json_printer_int16_enum_vector_field@@Base+0x88>
   3a8e8:	ldr	r1, [r4, #20]
   3a8ec:	mov	r0, #44	; 0x2c
   3a8f0:	add	lr, r1, #1
   3a8f4:	str	lr, [r4, #20]
   3a8f8:	strb	r0, [r1]
   3a8fc:	ldr	r3, [r3, r2]
   3a900:	mov	r1, r5
   3a904:	mov	r2, r6
   3a908:	mov	r0, r4
   3a90c:	add	r6, ip, r3
   3a910:	ldr	r5, [ip, r3]
   3a914:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3a918:	ldr	r2, [r4, #20]
   3a91c:	mov	r1, #91	; 0x5b
   3a920:	ldr	r3, [r4, #32]
   3a924:	cmp	r5, #0
   3a928:	add	r0, r2, #1
   3a92c:	add	r3, r3, #1
   3a930:	str	r0, [r4, #20]
   3a934:	str	r3, [r4, #32]
   3a938:	strb	r1, [r2]
   3a93c:	beq	3aa28 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3a940:	ldrb	r1, [r4, #25]
   3a944:	ldr	r3, [r4, #20]
   3a948:	cmp	r1, #0
   3a94c:	bne	3aae0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x26c>
   3a950:	ldr	r2, [r4, #16]
   3a954:	cmp	r2, r3
   3a958:	bhi	3a968 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3a95c:	mov	r0, r4
   3a960:	ldr	r3, [r4, #44]	; 0x2c
   3a964:	blx	r3
   3a968:	ldrsh	r1, [r6, #4]
   3a96c:	mov	r0, r4
   3a970:	add	r6, r6, #6
   3a974:	blx	r7
   3a978:	cmp	r5, #1
   3a97c:	sub	r5, r5, #2
   3a980:	beq	3aa28 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3a984:	mov	r8, #44	; 0x2c
   3a988:	mov	r9, #10
   3a98c:	b	3a9c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
   3a990:	ldr	r3, [r4, #16]
   3a994:	mov	r0, r4
   3a998:	ldr	r2, [r4, #20]
   3a99c:	cmp	r2, r3
   3a9a0:	bcc	3a9ac <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3a9a4:	ldr	r3, [r4, #44]	; 0x2c
   3a9a8:	blx	r3
   3a9ac:	sub	r5, r5, #1
   3a9b0:	ldrsh	r1, [r6], #2
   3a9b4:	mov	r0, r4
   3a9b8:	blx	r7
   3a9bc:	cmn	r5, #1
   3a9c0:	beq	3aa28 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   3a9c4:	ldr	r3, [r4, #20]
   3a9c8:	add	r2, r3, #1
   3a9cc:	str	r2, [r4, #20]
   3a9d0:	strb	r8, [r3]
   3a9d4:	ldrb	r1, [r4, #25]
   3a9d8:	cmp	r1, #0
   3a9dc:	beq	3a990 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3a9e0:	ldr	r3, [r4, #20]
   3a9e4:	mov	r1, #32
   3a9e8:	mov	r0, r4
   3a9ec:	add	r2, r3, #1
   3a9f0:	str	r2, [r4, #20]
   3a9f4:	strb	r9, [r3]
   3a9f8:	ldrb	r2, [r4, #25]
   3a9fc:	ldr	lr, [r4, #16]
   3aa00:	ldr	sl, [r4, #32]
   3aa04:	ldr	r3, [r4, #20]
   3aa08:	mul	sl, sl, r2
   3aa0c:	add	ip, r3, sl
   3aa10:	mov	r2, sl
   3aa14:	cmp	lr, ip
   3aa18:	bcs	3aa7c <flatcc_json_printer_int16_enum_vector_field@@Base+0x208>
   3aa1c:	mov	r1, sl
   3aa20:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3aa24:	b	3a9ac <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3aa28:	ldrb	r2, [r4, #25]
   3aa2c:	ldr	r3, [r4, #20]
   3aa30:	cmp	r2, #0
   3aa34:	add	r2, r3, #1
   3aa38:	bne	3aa94 <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   3aa3c:	mov	r1, #93	; 0x5d
   3aa40:	str	r2, [r4, #20]
   3aa44:	strb	r1, [r3]
   3aa48:	ldrd	r4, [sp]
   3aa4c:	ldrd	r6, [sp, #8]
   3aa50:	ldrd	r8, [sp, #16]
   3aa54:	ldr	sl, [sp, #24]
   3aa58:	add	sp, sp, #28
   3aa5c:	pop	{pc}		; (ldr pc, [sp], #4)
   3aa60:	ldrd	r4, [sp]
   3aa64:	ldrd	r6, [sp, #8]
   3aa68:	ldrd	r8, [sp, #16]
   3aa6c:	ldr	sl, [sp, #24]
   3aa70:	ldr	lr, [sp, #28]
   3aa74:	add	sp, sp, #32
   3aa78:	b	3874c <flatcc_json_printer_int16_vector_field@@Base>
   3aa7c:	mov	r0, r3
   3aa80:	bl	14594 <memset@plt>
   3aa84:	ldr	r3, [r4, #20]
   3aa88:	add	sl, r3, sl
   3aa8c:	str	sl, [r4, #20]
   3aa90:	b	3a9ac <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3aa94:	mov	r1, #10
   3aa98:	str	r2, [r4, #20]
   3aa9c:	strb	r1, [r3]
   3aaa0:	ldrb	r3, [r4, #25]
   3aaa4:	ldr	r2, [r4, #32]
   3aaa8:	ldr	r1, [r4, #16]
   3aaac:	ldr	r0, [r4, #20]
   3aab0:	sub	r2, r2, #1
   3aab4:	mul	r5, r2, r3
   3aab8:	str	r2, [r4, #32]
   3aabc:	add	r3, r0, r5
   3aac0:	cmp	r1, r3
   3aac4:	bcs	3aafc <flatcc_json_printer_int16_enum_vector_field@@Base+0x288>
   3aac8:	mov	r1, r5
   3aacc:	mov	r0, r4
   3aad0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3aad4:	ldr	r3, [r4, #20]
   3aad8:	add	r2, r3, #1
   3aadc:	b	3aa3c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>
   3aae0:	add	r1, r3, #1
   3aae4:	mov	r2, #10
   3aae8:	mov	r0, r4
   3aaec:	str	r1, [r4, #20]
   3aaf0:	strb	r2, [r3]
   3aaf4:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3aaf8:	b	3a968 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3aafc:	mov	r2, r5
   3ab00:	mov	r1, #32
   3ab04:	bl	14594 <memset@plt>
   3ab08:	ldr	r3, [r4, #20]
   3ab0c:	add	r3, r3, r5
   3ab10:	add	r2, r3, #1
   3ab14:	b	3aa3c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c8>

0003ab18 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3ab18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ab1c:	strd	r6, [sp, #8]
   3ab20:	strd	r8, [sp, #16]
   3ab24:	str	sl, [sp, #24]
   3ab28:	str	lr, [sp, #28]
   3ab2c:	ldrb	r8, [r0, #27]
   3ab30:	ldrd	r6, [sp, #32]
   3ab34:	cmp	r8, #0
   3ab38:	bne	3ad04 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1ec>
   3ab3c:	mov	r5, r3
   3ab40:	ldr	r3, [r1, #8]
   3ab44:	add	r2, r2, #2
   3ab48:	lsl	r2, r2, #1
   3ab4c:	mov	lr, r1
   3ab50:	cmp	r3, r2
   3ab54:	ble	3acec <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ab58:	ldr	r3, [r1, #4]
   3ab5c:	ldrh	r2, [r3, r2]
   3ab60:	cmp	r2, #0
   3ab64:	beq	3acec <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ab68:	ldr	r3, [r1]
   3ab6c:	adds	ip, r3, r2
   3ab70:	beq	3acec <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3ab74:	ldr	r1, [r1, #16]
   3ab78:	mov	r4, r0
   3ab7c:	add	r0, r1, #1
   3ab80:	cmp	r1, #0
   3ab84:	str	r0, [lr, #16]
   3ab88:	beq	3aba0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x88>
   3ab8c:	ldr	r1, [r4, #20]
   3ab90:	mov	r0, #44	; 0x2c
   3ab94:	add	lr, r1, #1
   3ab98:	str	lr, [r4, #20]
   3ab9c:	strb	r0, [r1]
   3aba0:	ldr	r3, [r3, r2]
   3aba4:	mov	r1, r5
   3aba8:	mov	r2, r6
   3abac:	mov	r0, r4
   3abb0:	add	r6, ip, r3
   3abb4:	ldr	r5, [ip, r3]
   3abb8:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3abbc:	ldr	r2, [r4, #20]
   3abc0:	mov	r1, #91	; 0x5b
   3abc4:	ldr	r3, [r4, #32]
   3abc8:	cmp	r5, #0
   3abcc:	add	r0, r2, #1
   3abd0:	add	r3, r3, #1
   3abd4:	str	r0, [r4, #20]
   3abd8:	str	r3, [r4, #32]
   3abdc:	strb	r1, [r2]
   3abe0:	beq	3accc <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3abe4:	ldrb	r1, [r4, #25]
   3abe8:	ldr	r3, [r4, #20]
   3abec:	cmp	r1, #0
   3abf0:	bne	3ad84 <flatcc_json_printer_int32_enum_vector_field@@Base+0x26c>
   3abf4:	ldr	r2, [r4, #16]
   3abf8:	cmp	r2, r3
   3abfc:	bhi	3ac0c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ac00:	mov	r0, r4
   3ac04:	ldr	r3, [r4, #44]	; 0x2c
   3ac08:	blx	r3
   3ac0c:	mov	r0, r4
   3ac10:	ldr	r1, [r6, #4]
   3ac14:	add	r6, r6, #8
   3ac18:	blx	r7
   3ac1c:	cmp	r5, #1
   3ac20:	sub	r5, r5, #2
   3ac24:	beq	3accc <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3ac28:	mov	r8, #44	; 0x2c
   3ac2c:	mov	r9, #10
   3ac30:	b	3ac68 <flatcc_json_printer_int32_enum_vector_field@@Base+0x150>
   3ac34:	ldr	r3, [r4, #16]
   3ac38:	mov	r0, r4
   3ac3c:	ldr	r2, [r4, #20]
   3ac40:	cmp	r2, r3
   3ac44:	bcc	3ac50 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3ac48:	ldr	r3, [r4, #44]	; 0x2c
   3ac4c:	blx	r3
   3ac50:	sub	r5, r5, #1
   3ac54:	mov	r0, r4
   3ac58:	ldr	r1, [r6], #4
   3ac5c:	blx	r7
   3ac60:	cmn	r5, #1
   3ac64:	beq	3accc <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   3ac68:	ldr	r3, [r4, #20]
   3ac6c:	add	r2, r3, #1
   3ac70:	str	r2, [r4, #20]
   3ac74:	strb	r8, [r3]
   3ac78:	ldrb	r1, [r4, #25]
   3ac7c:	cmp	r1, #0
   3ac80:	beq	3ac34 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3ac84:	ldr	r3, [r4, #20]
   3ac88:	mov	r1, #32
   3ac8c:	mov	r0, r4
   3ac90:	add	r2, r3, #1
   3ac94:	str	r2, [r4, #20]
   3ac98:	strb	r9, [r3]
   3ac9c:	ldrb	r2, [r4, #25]
   3aca0:	ldr	lr, [r4, #16]
   3aca4:	ldr	sl, [r4, #32]
   3aca8:	ldr	r3, [r4, #20]
   3acac:	mul	sl, sl, r2
   3acb0:	add	ip, r3, sl
   3acb4:	mov	r2, sl
   3acb8:	cmp	lr, ip
   3acbc:	bcs	3ad20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x208>
   3acc0:	mov	r1, sl
   3acc4:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3acc8:	b	3ac50 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3accc:	ldrb	r2, [r4, #25]
   3acd0:	ldr	r3, [r4, #20]
   3acd4:	cmp	r2, #0
   3acd8:	add	r2, r3, #1
   3acdc:	bne	3ad38 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   3ace0:	mov	r1, #93	; 0x5d
   3ace4:	str	r2, [r4, #20]
   3ace8:	strb	r1, [r3]
   3acec:	ldrd	r4, [sp]
   3acf0:	ldrd	r6, [sp, #8]
   3acf4:	ldrd	r8, [sp, #16]
   3acf8:	ldr	sl, [sp, #24]
   3acfc:	add	sp, sp, #28
   3ad00:	pop	{pc}		; (ldr pc, [sp], #4)
   3ad04:	ldrd	r4, [sp]
   3ad08:	ldrd	r6, [sp, #8]
   3ad0c:	ldrd	r8, [sp, #16]
   3ad10:	ldr	sl, [sp, #24]
   3ad14:	ldr	lr, [sp, #28]
   3ad18:	add	sp, sp, #32
   3ad1c:	b	38a30 <flatcc_json_printer_int32_vector_field@@Base>
   3ad20:	mov	r0, r3
   3ad24:	bl	14594 <memset@plt>
   3ad28:	ldr	r3, [r4, #20]
   3ad2c:	add	sl, r3, sl
   3ad30:	str	sl, [r4, #20]
   3ad34:	b	3ac50 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3ad38:	mov	r1, #10
   3ad3c:	str	r2, [r4, #20]
   3ad40:	strb	r1, [r3]
   3ad44:	ldrb	r3, [r4, #25]
   3ad48:	ldr	r2, [r4, #32]
   3ad4c:	ldr	r1, [r4, #16]
   3ad50:	ldr	r0, [r4, #20]
   3ad54:	sub	r2, r2, #1
   3ad58:	mul	r5, r2, r3
   3ad5c:	str	r2, [r4, #32]
   3ad60:	add	r3, r0, r5
   3ad64:	cmp	r1, r3
   3ad68:	bcs	3ada0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x288>
   3ad6c:	mov	r1, r5
   3ad70:	mov	r0, r4
   3ad74:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ad78:	ldr	r3, [r4, #20]
   3ad7c:	add	r2, r3, #1
   3ad80:	b	3ace0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>
   3ad84:	add	r1, r3, #1
   3ad88:	mov	r2, #10
   3ad8c:	mov	r0, r4
   3ad90:	str	r1, [r4, #20]
   3ad94:	strb	r2, [r3]
   3ad98:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3ad9c:	b	3ac0c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ada0:	mov	r2, r5
   3ada4:	mov	r1, #32
   3ada8:	bl	14594 <memset@plt>
   3adac:	ldr	r3, [r4, #20]
   3adb0:	add	r3, r3, r5
   3adb4:	add	r2, r3, #1
   3adb8:	b	3ace0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c8>

0003adbc <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3adbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3adc0:	strd	r6, [sp, #8]
   3adc4:	strd	r8, [sp, #16]
   3adc8:	str	sl, [sp, #24]
   3adcc:	str	lr, [sp, #28]
   3add0:	ldrb	r8, [r0, #27]
   3add4:	ldrd	r6, [sp, #32]
   3add8:	cmp	r8, #0
   3addc:	bne	3afa8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1ec>
   3ade0:	mov	r5, r3
   3ade4:	ldr	r3, [r1, #8]
   3ade8:	add	r2, r2, #2
   3adec:	lsl	r2, r2, #1
   3adf0:	mov	lr, r1
   3adf4:	cmp	r3, r2
   3adf8:	ble	3af90 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3adfc:	ldr	r3, [r1, #4]
   3ae00:	ldrh	r2, [r3, r2]
   3ae04:	cmp	r2, #0
   3ae08:	beq	3af90 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ae0c:	ldr	r3, [r1]
   3ae10:	adds	ip, r3, r2
   3ae14:	beq	3af90 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ae18:	ldr	r1, [r1, #16]
   3ae1c:	mov	r4, r0
   3ae20:	add	r0, r1, #1
   3ae24:	cmp	r1, #0
   3ae28:	str	r0, [lr, #16]
   3ae2c:	beq	3ae44 <flatcc_json_printer_int64_enum_vector_field@@Base+0x88>
   3ae30:	ldr	r1, [r4, #20]
   3ae34:	mov	r0, #44	; 0x2c
   3ae38:	add	lr, r1, #1
   3ae3c:	str	lr, [r4, #20]
   3ae40:	strb	r0, [r1]
   3ae44:	ldr	r3, [r3, r2]
   3ae48:	mov	r1, r5
   3ae4c:	mov	r2, r6
   3ae50:	mov	r0, r4
   3ae54:	add	r6, ip, r3
   3ae58:	ldr	r5, [ip, r3]
   3ae5c:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3ae60:	ldr	r2, [r4, #20]
   3ae64:	mov	r1, #91	; 0x5b
   3ae68:	ldr	r3, [r4, #32]
   3ae6c:	cmp	r5, #0
   3ae70:	add	r0, r2, #1
   3ae74:	add	r3, r3, #1
   3ae78:	str	r0, [r4, #20]
   3ae7c:	str	r3, [r4, #32]
   3ae80:	strb	r1, [r2]
   3ae84:	beq	3af70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3ae88:	ldrb	r1, [r4, #25]
   3ae8c:	ldr	r3, [r4, #20]
   3ae90:	cmp	r1, #0
   3ae94:	bne	3b028 <flatcc_json_printer_int64_enum_vector_field@@Base+0x26c>
   3ae98:	ldr	r2, [r4, #16]
   3ae9c:	cmp	r2, r3
   3aea0:	bhi	3aeb0 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3aea4:	mov	r0, r4
   3aea8:	ldr	r3, [r4, #44]	; 0x2c
   3aeac:	blx	r3
   3aeb0:	mov	r0, r4
   3aeb4:	ldrd	r2, [r6, #4]
   3aeb8:	add	r6, r6, #12
   3aebc:	blx	r7
   3aec0:	cmp	r5, #1
   3aec4:	sub	r5, r5, #2
   3aec8:	beq	3af70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3aecc:	mov	r8, #44	; 0x2c
   3aed0:	mov	r9, #10
   3aed4:	b	3af0c <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
   3aed8:	ldr	r3, [r4, #16]
   3aedc:	mov	r0, r4
   3aee0:	ldr	r2, [r4, #20]
   3aee4:	cmp	r2, r3
   3aee8:	bcc	3aef4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3aeec:	ldr	r3, [r4, #44]	; 0x2c
   3aef0:	blx	r3
   3aef4:	sub	r5, r5, #1
   3aef8:	mov	r0, r4
   3aefc:	ldrd	r2, [r6], #8
   3af00:	blx	r7
   3af04:	cmn	r5, #1
   3af08:	beq	3af70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b4>
   3af0c:	ldr	r3, [r4, #20]
   3af10:	add	r2, r3, #1
   3af14:	str	r2, [r4, #20]
   3af18:	strb	r8, [r3]
   3af1c:	ldrb	r1, [r4, #25]
   3af20:	cmp	r1, #0
   3af24:	beq	3aed8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3af28:	ldr	r3, [r4, #20]
   3af2c:	mov	r1, #32
   3af30:	mov	r0, r4
   3af34:	add	r2, r3, #1
   3af38:	str	r2, [r4, #20]
   3af3c:	strb	r9, [r3]
   3af40:	ldrb	r2, [r4, #25]
   3af44:	ldr	lr, [r4, #16]
   3af48:	ldr	sl, [r4, #32]
   3af4c:	ldr	r3, [r4, #20]
   3af50:	mul	sl, sl, r2
   3af54:	add	ip, r3, sl
   3af58:	mov	r2, sl
   3af5c:	cmp	lr, ip
   3af60:	bcs	3afc4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x208>
   3af64:	mov	r1, sl
   3af68:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3af6c:	b	3aef4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3af70:	ldrb	r2, [r4, #25]
   3af74:	ldr	r3, [r4, #20]
   3af78:	cmp	r2, #0
   3af7c:	add	r2, r3, #1
   3af80:	bne	3afdc <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3af84:	mov	r1, #93	; 0x5d
   3af88:	str	r2, [r4, #20]
   3af8c:	strb	r1, [r3]
   3af90:	ldrd	r4, [sp]
   3af94:	ldrd	r6, [sp, #8]
   3af98:	ldrd	r8, [sp, #16]
   3af9c:	ldr	sl, [sp, #24]
   3afa0:	add	sp, sp, #28
   3afa4:	pop	{pc}		; (ldr pc, [sp], #4)
   3afa8:	ldrd	r4, [sp]
   3afac:	ldrd	r6, [sp, #8]
   3afb0:	ldrd	r8, [sp, #16]
   3afb4:	ldr	sl, [sp, #24]
   3afb8:	ldr	lr, [sp, #28]
   3afbc:	add	sp, sp, #32
   3afc0:	b	38d44 <flatcc_json_printer_int64_vector_field@@Base>
   3afc4:	mov	r0, r3
   3afc8:	bl	14594 <memset@plt>
   3afcc:	ldr	r3, [r4, #20]
   3afd0:	add	sl, r3, sl
   3afd4:	str	sl, [r4, #20]
   3afd8:	b	3aef4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3afdc:	mov	r1, #10
   3afe0:	str	r2, [r4, #20]
   3afe4:	strb	r1, [r3]
   3afe8:	ldrb	r3, [r4, #25]
   3afec:	ldr	r2, [r4, #32]
   3aff0:	ldr	r1, [r4, #16]
   3aff4:	ldr	r0, [r4, #20]
   3aff8:	sub	r2, r2, #1
   3affc:	mul	r5, r2, r3
   3b000:	str	r2, [r4, #32]
   3b004:	add	r3, r0, r5
   3b008:	cmp	r1, r3
   3b00c:	bcs	3b044 <flatcc_json_printer_int64_enum_vector_field@@Base+0x288>
   3b010:	mov	r1, r5
   3b014:	mov	r0, r4
   3b018:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b01c:	ldr	r3, [r4, #20]
   3b020:	add	r2, r3, #1
   3b024:	b	3af84 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>
   3b028:	add	r1, r3, #1
   3b02c:	mov	r2, #10
   3b030:	mov	r0, r4
   3b034:	str	r1, [r4, #20]
   3b038:	strb	r2, [r3]
   3b03c:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b040:	b	3aeb0 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3b044:	mov	r2, r5
   3b048:	mov	r1, #32
   3b04c:	bl	14594 <memset@plt>
   3b050:	ldr	r3, [r4, #20]
   3b054:	add	r3, r3, r5
   3b058:	add	r2, r3, #1
   3b05c:	b	3af84 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c8>

0003b060 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3b060:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b064:	strd	r6, [sp, #8]
   3b068:	strd	r8, [sp, #16]
   3b06c:	str	sl, [sp, #24]
   3b070:	str	lr, [sp, #28]
   3b074:	ldrb	r8, [r0, #27]
   3b078:	ldr	r7, [sp, #32]
   3b07c:	ldr	r6, [sp, #36]	; 0x24
   3b080:	cmp	r8, #0
   3b084:	bne	3b250 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3b088:	mov	r5, r3
   3b08c:	ldr	r3, [r1, #8]
   3b090:	add	r2, r2, #2
   3b094:	lsl	r2, r2, #1
   3b098:	mov	lr, r1
   3b09c:	cmp	r3, r2
   3b0a0:	ble	3b238 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b0a4:	ldr	r3, [r1, #4]
   3b0a8:	ldrh	r2, [r3, r2]
   3b0ac:	cmp	r2, #0
   3b0b0:	beq	3b238 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b0b4:	ldr	r3, [r1]
   3b0b8:	adds	ip, r3, r2
   3b0bc:	beq	3b238 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d8>
   3b0c0:	ldr	r1, [r1, #16]
   3b0c4:	mov	r4, r0
   3b0c8:	add	r0, r1, #1
   3b0cc:	cmp	r1, #0
   3b0d0:	str	r0, [lr, #16]
   3b0d4:	beq	3b0ec <flatcc_json_printer_bool_enum_vector_field@@Base+0x8c>
   3b0d8:	ldr	r1, [r4, #20]
   3b0dc:	mov	r0, #44	; 0x2c
   3b0e0:	add	lr, r1, #1
   3b0e4:	str	lr, [r4, #20]
   3b0e8:	strb	r0, [r1]
   3b0ec:	ldr	r3, [r3, r2]
   3b0f0:	mov	r1, r5
   3b0f4:	mov	r2, r7
   3b0f8:	mov	r0, r4
   3b0fc:	add	r7, ip, r3
   3b100:	ldr	r8, [ip, r3]
   3b104:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b108:	ldr	r2, [r4, #20]
   3b10c:	mov	r1, #91	; 0x5b
   3b110:	ldr	r3, [r4, #32]
   3b114:	cmp	r8, #0
   3b118:	add	r0, r2, #1
   3b11c:	add	r3, r3, #1
   3b120:	str	r0, [r4, #20]
   3b124:	str	r3, [r4, #32]
   3b128:	strb	r1, [r2]
   3b12c:	beq	3b218 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b130:	ldrb	r1, [r4, #25]
   3b134:	ldr	r3, [r4, #20]
   3b138:	cmp	r1, #0
   3b13c:	bne	3b2d0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3b140:	ldr	r2, [r4, #16]
   3b144:	cmp	r2, r3
   3b148:	bhi	3b158 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3b14c:	mov	r0, r4
   3b150:	ldr	r3, [r4, #44]	; 0x2c
   3b154:	blx	r3
   3b158:	ldrb	r1, [r7, #4]
   3b15c:	mov	r0, r4
   3b160:	add	r5, r7, #5
   3b164:	blx	r6
   3b168:	cmp	r8, #1
   3b16c:	beq	3b218 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b170:	add	r3, r8, #4
   3b174:	mov	r9, #10
   3b178:	mov	r8, #44	; 0x2c
   3b17c:	add	r7, r7, r3
   3b180:	b	3b1b4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x154>
   3b184:	ldr	r3, [r4, #16]
   3b188:	mov	r0, r4
   3b18c:	ldr	r2, [r4, #20]
   3b190:	cmp	r2, r3
   3b194:	bcc	3b1a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3b198:	ldr	r3, [r4, #44]	; 0x2c
   3b19c:	blx	r3
   3b1a0:	ldrb	r1, [r5], #1
   3b1a4:	mov	r0, r4
   3b1a8:	blx	r6
   3b1ac:	cmp	r5, r7
   3b1b0:	beq	3b218 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3b1b4:	ldr	r3, [r4, #20]
   3b1b8:	add	r2, r3, #1
   3b1bc:	str	r2, [r4, #20]
   3b1c0:	strb	r8, [r3]
   3b1c4:	ldrb	r1, [r4, #25]
   3b1c8:	cmp	r1, #0
   3b1cc:	beq	3b184 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3b1d0:	ldr	r3, [r4, #20]
   3b1d4:	mov	r1, #32
   3b1d8:	mov	r0, r4
   3b1dc:	add	r2, r3, #1
   3b1e0:	str	r2, [r4, #20]
   3b1e4:	strb	r9, [r3]
   3b1e8:	ldrb	r2, [r4, #25]
   3b1ec:	ldr	lr, [r4, #16]
   3b1f0:	ldr	sl, [r4, #32]
   3b1f4:	ldr	r3, [r4, #20]
   3b1f8:	mul	sl, sl, r2
   3b1fc:	add	ip, r3, sl
   3b200:	mov	r2, sl
   3b204:	cmp	lr, ip
   3b208:	bcs	3b26c <flatcc_json_printer_bool_enum_vector_field@@Base+0x20c>
   3b20c:	mov	r1, sl
   3b210:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b214:	b	3b1a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3b218:	ldrb	r2, [r4, #25]
   3b21c:	ldr	r3, [r4, #20]
   3b220:	cmp	r2, #0
   3b224:	add	r2, r3, #1
   3b228:	bne	3b284 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3b22c:	mov	r1, #93	; 0x5d
   3b230:	str	r2, [r4, #20]
   3b234:	strb	r1, [r3]
   3b238:	ldrd	r4, [sp]
   3b23c:	ldrd	r6, [sp, #8]
   3b240:	ldrd	r8, [sp, #16]
   3b244:	ldr	sl, [sp, #24]
   3b248:	add	sp, sp, #28
   3b24c:	pop	{pc}		; (ldr pc, [sp], #4)
   3b250:	ldrd	r4, [sp]
   3b254:	ldrd	r6, [sp, #8]
   3b258:	ldrd	r8, [sp, #16]
   3b25c:	ldr	sl, [sp, #24]
   3b260:	ldr	lr, [sp, #28]
   3b264:	add	sp, sp, #32
   3b268:	b	39020 <flatcc_json_printer_bool_vector_field@@Base>
   3b26c:	mov	r0, r3
   3b270:	bl	14594 <memset@plt>
   3b274:	ldr	r3, [r4, #20]
   3b278:	add	sl, r3, sl
   3b27c:	str	sl, [r4, #20]
   3b280:	b	3b1a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3b284:	mov	r1, #10
   3b288:	str	r2, [r4, #20]
   3b28c:	strb	r1, [r3]
   3b290:	ldrb	r3, [r4, #25]
   3b294:	ldr	r2, [r4, #32]
   3b298:	ldr	r1, [r4, #16]
   3b29c:	ldr	r0, [r4, #20]
   3b2a0:	sub	r2, r2, #1
   3b2a4:	mul	r5, r2, r3
   3b2a8:	str	r2, [r4, #32]
   3b2ac:	add	r3, r0, r5
   3b2b0:	cmp	r1, r3
   3b2b4:	bcs	3b2ec <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3b2b8:	mov	r1, r5
   3b2bc:	mov	r0, r4
   3b2c0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b2c4:	ldr	r3, [r4, #20]
   3b2c8:	add	r2, r3, #1
   3b2cc:	b	3b22c <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3b2d0:	add	r1, r3, #1
   3b2d4:	mov	r2, #10
   3b2d8:	mov	r0, r4
   3b2dc:	str	r1, [r4, #20]
   3b2e0:	strb	r2, [r3]
   3b2e4:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b2e8:	b	3b158 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3b2ec:	mov	r2, r5
   3b2f0:	mov	r1, #32
   3b2f4:	bl	14594 <memset@plt>
   3b2f8:	ldr	r3, [r4, #20]
   3b2fc:	add	r3, r3, r5
   3b300:	add	r2, r3, #1
   3b304:	b	3b22c <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>

0003b308 <flatcc_json_printer_struct_vector_field@@Base>:
   3b308:	ldr	ip, [r1, #8]
   3b30c:	add	r2, r2, #2
   3b310:	lsl	r2, r2, #1
   3b314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b318:	strd	r6, [sp, #8]
   3b31c:	strd	r8, [sp, #16]
   3b320:	strd	sl, [sp, #24]
   3b324:	cmp	r2, ip
   3b328:	str	lr, [sp, #32]
   3b32c:	sub	sp, sp, #4
   3b330:	ldr	r8, [sp, #44]	; 0x2c
   3b334:	ldr	r7, [sp, #48]	; 0x30
   3b338:	bge	3b54c <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3b33c:	ldr	ip, [r1, #4]
   3b340:	ldrh	r2, [ip, r2]
   3b344:	cmp	r2, #0
   3b348:	beq	3b54c <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3b34c:	ldr	ip, [r1]
   3b350:	adds	lr, ip, r2
   3b354:	beq	3b54c <flatcc_json_printer_struct_vector_field@@Base+0x244>
   3b358:	ldr	r4, [r1, #16]
   3b35c:	add	r5, r4, #1
   3b360:	cmp	r4, #0
   3b364:	str	r5, [r1, #16]
   3b368:	beq	3b380 <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3b36c:	ldr	r1, [r0, #20]
   3b370:	mov	r4, #44	; 0x2c
   3b374:	add	r5, r1, #1
   3b378:	str	r5, [r0, #20]
   3b37c:	strb	r4, [r1]
   3b380:	mov	r1, r3
   3b384:	ldr	r3, [ip, r2]
   3b388:	mov	r4, r0
   3b38c:	ldr	r2, [sp, #40]	; 0x28
   3b390:	add	r6, lr, r3
   3b394:	ldr	r5, [lr, r3]
   3b398:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3b39c:	ldr	r2, [r4, #20]
   3b3a0:	mov	r1, #91	; 0x5b
   3b3a4:	ldr	r3, [r4, #32]
   3b3a8:	cmp	r5, #0
   3b3ac:	add	r0, r2, #1
   3b3b0:	add	r3, r3, #1
   3b3b4:	str	r0, [r4, #20]
   3b3b8:	str	r3, [r4, #32]
   3b3bc:	strb	r1, [r2]
   3b3c0:	beq	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3b3c4:	ldrb	r1, [r4, #25]
   3b3c8:	ldr	r3, [r4, #20]
   3b3cc:	cmp	r1, #0
   3b3d0:	bne	3b568 <flatcc_json_printer_struct_vector_field@@Base+0x260>
   3b3d4:	ldr	r2, [r4, #16]
   3b3d8:	cmp	r2, r3
   3b3dc:	bhi	3b3f0 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3b3e0:	mov	r0, r4
   3b3e4:	ldr	r3, [r4, #44]	; 0x2c
   3b3e8:	blx	r3
   3b3ec:	ldr	r3, [r4, #20]
   3b3f0:	add	r1, r3, #1
   3b3f4:	mov	ip, #123	; 0x7b
   3b3f8:	ldr	r2, [r4, #32]
   3b3fc:	add	r6, r6, #4
   3b400:	mov	r0, r4
   3b404:	str	r1, [r4, #20]
   3b408:	mov	r1, r6
   3b40c:	add	r2, r2, #1
   3b410:	str	r2, [r4, #32]
   3b414:	strb	ip, [r3]
   3b418:	blx	r7
   3b41c:	ldrb	r3, [r4, #25]
   3b420:	cmp	r3, #0
   3b424:	bne	3b64c <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3b428:	ldr	r3, [r4, #20]
   3b42c:	mov	r2, #125	; 0x7d
   3b430:	cmp	r5, #1
   3b434:	sub	r5, r5, #2
   3b438:	add	r1, r3, #1
   3b43c:	str	r1, [r4, #20]
   3b440:	strb	r2, [r3]
   3b444:	beq	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3b448:	mov	r9, #44	; 0x2c
   3b44c:	mov	sl, #10
   3b450:	b	3b4c8 <flatcc_json_printer_struct_vector_field@@Base+0x1c0>
   3b454:	ldr	r3, [r4, #16]
   3b458:	ldr	r2, [r4, #20]
   3b45c:	cmp	r2, r3
   3b460:	bcc	3b474 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3b464:	mov	r0, r4
   3b468:	ldr	r3, [r4, #44]	; 0x2c
   3b46c:	blx	r3
   3b470:	ldr	r2, [r4, #20]
   3b474:	add	r0, r2, #1
   3b478:	mov	ip, #123	; 0x7b
   3b47c:	ldr	r3, [r4, #32]
   3b480:	mov	r1, r6
   3b484:	str	r0, [r4, #20]
   3b488:	mov	r0, r4
   3b48c:	add	r3, r3, #1
   3b490:	str	r3, [r4, #32]
   3b494:	strb	ip, [r2]
   3b498:	blx	r7
   3b49c:	ldrb	r3, [r4, #25]
   3b4a0:	cmp	r3, #0
   3b4a4:	bne	3b588 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3b4a8:	ldr	r1, [r4, #20]
   3b4ac:	sub	r5, r5, #1
   3b4b0:	add	r2, r1, #1
   3b4b4:	mov	r3, #125	; 0x7d
   3b4b8:	cmn	r5, #1
   3b4bc:	str	r2, [r4, #20]
   3b4c0:	strb	r3, [r1]
   3b4c4:	beq	3b52c <flatcc_json_printer_struct_vector_field@@Base+0x224>
   3b4c8:	ldr	r3, [r4, #20]
   3b4cc:	add	r6, r6, r8
   3b4d0:	add	r2, r3, #1
   3b4d4:	str	r2, [r4, #20]
   3b4d8:	strb	r9, [r3]
   3b4dc:	ldrb	r1, [r4, #25]
   3b4e0:	cmp	r1, #0
   3b4e4:	beq	3b454 <flatcc_json_printer_struct_vector_field@@Base+0x14c>
   3b4e8:	ldr	r3, [r4, #20]
   3b4ec:	add	r2, r3, #1
   3b4f0:	str	r2, [r4, #20]
   3b4f4:	strb	sl, [r3]
   3b4f8:	ldrb	r3, [r4, #25]
   3b4fc:	ldr	r1, [r4, #16]
   3b500:	ldr	r2, [r4, #32]
   3b504:	ldr	r0, [r4, #20]
   3b508:	mul	fp, r2, r3
   3b50c:	add	r3, r0, fp
   3b510:	cmp	r1, r3
   3b514:	bcs	3b5d0 <flatcc_json_printer_struct_vector_field@@Base+0x2c8>
   3b518:	mov	r1, fp
   3b51c:	mov	r0, r4
   3b520:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b524:	ldr	r2, [r4, #20]
   3b528:	b	3b474 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3b52c:	ldrb	r2, [r4, #25]
   3b530:	ldr	r3, [r4, #20]
   3b534:	cmp	r2, #0
   3b538:	add	r2, r3, #1
   3b53c:	bne	3b600 <flatcc_json_printer_struct_vector_field@@Base+0x2f8>
   3b540:	mov	r1, #93	; 0x5d
   3b544:	str	r2, [r4, #20]
   3b548:	strb	r1, [r3]
   3b54c:	add	sp, sp, #4
   3b550:	ldrd	r4, [sp]
   3b554:	ldrd	r6, [sp, #8]
   3b558:	ldrd	r8, [sp, #16]
   3b55c:	ldrd	sl, [sp, #24]
   3b560:	add	sp, sp, #32
   3b564:	pop	{pc}		; (ldr pc, [sp], #4)
   3b568:	add	r1, r3, #1
   3b56c:	mov	r2, #10
   3b570:	mov	r0, r4
   3b574:	str	r1, [r4, #20]
   3b578:	strb	r2, [r3]
   3b57c:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b580:	ldr	r3, [r4, #20]
   3b584:	b	3b3f0 <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3b588:	ldr	r3, [r4, #20]
   3b58c:	add	r2, r3, #1
   3b590:	str	r2, [r4, #20]
   3b594:	strb	sl, [r3]
   3b598:	ldrb	r1, [r4, #25]
   3b59c:	ldr	r3, [r4, #32]
   3b5a0:	ldr	r2, [r4, #16]
   3b5a4:	ldr	r0, [r4, #20]
   3b5a8:	sub	r3, r3, #1
   3b5ac:	mul	fp, r3, r1
   3b5b0:	str	r3, [r4, #32]
   3b5b4:	add	r3, r0, fp
   3b5b8:	cmp	r2, r3
   3b5bc:	bcs	3b5e8 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
   3b5c0:	mov	r1, fp
   3b5c4:	mov	r0, r4
   3b5c8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b5cc:	b	3b4a8 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
   3b5d0:	mov	r2, fp
   3b5d4:	mov	r1, #32
   3b5d8:	bl	14594 <memset@plt>
   3b5dc:	ldr	r2, [r4, #20]
   3b5e0:	add	r2, r2, fp
   3b5e4:	b	3b474 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3b5e8:	mov	r1, #32
   3b5ec:	mov	r2, fp
   3b5f0:	bl	14594 <memset@plt>
   3b5f4:	ldr	r1, [r4, #20]
   3b5f8:	add	r1, r1, fp
   3b5fc:	b	3b4ac <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   3b600:	mov	r1, #10
   3b604:	str	r2, [r4, #20]
   3b608:	strb	r1, [r3]
   3b60c:	ldrb	r3, [r4, #25]
   3b610:	ldr	r2, [r4, #32]
   3b614:	ldr	r1, [r4, #16]
   3b618:	ldr	r0, [r4, #20]
   3b61c:	sub	r2, r2, #1
   3b620:	mul	r5, r2, r3
   3b624:	str	r2, [r4, #32]
   3b628:	add	r3, r0, r5
   3b62c:	cmp	r1, r3
   3b630:	bcs	3b678 <flatcc_json_printer_struct_vector_field@@Base+0x370>
   3b634:	mov	r1, r5
   3b638:	mov	r0, r4
   3b63c:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b640:	ldr	r3, [r4, #20]
   3b644:	add	r2, r3, #1
   3b648:	b	3b540 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   3b64c:	ldr	r3, [r4, #20]
   3b650:	mov	r2, #10
   3b654:	mov	r0, r4
   3b658:	add	r1, r3, #1
   3b65c:	str	r1, [r4, #20]
   3b660:	strb	r2, [r3]
   3b664:	ldr	r3, [r4, #32]
   3b668:	sub	r3, r3, #1
   3b66c:	str	r3, [r4, #32]
   3b670:	bl	308c8 <flatcc_json_parser_struct_as_root@@Base+0x1014>
   3b674:	b	3b428 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3b678:	mov	r2, r5
   3b67c:	mov	r1, #32
   3b680:	bl	14594 <memset@plt>
   3b684:	ldr	r3, [r4, #20]
   3b688:	add	r3, r3, r5
   3b68c:	add	r2, r3, #1
   3b690:	b	3b540 <flatcc_json_printer_struct_vector_field@@Base+0x238>

0003b694 <flatcc_json_printer_string_vector_field@@Base>:
   3b694:	ldr	ip, [r1, #8]
   3b698:	add	r2, r2, #2
   3b69c:	lsl	r2, r2, #1
   3b6a0:	cmp	ip, r2
   3b6a4:	bxle	lr
   3b6a8:	ldr	ip, [r1, #4]
   3b6ac:	ldrh	r2, [ip, r2]
   3b6b0:	cmp	r2, #0
   3b6b4:	bxeq	lr
   3b6b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b6bc:	strd	r6, [sp, #8]
   3b6c0:	str	lr, [sp, #28]
   3b6c4:	ldr	lr, [r1]
   3b6c8:	strd	r8, [sp, #16]
   3b6cc:	str	sl, [sp, #24]
   3b6d0:	adds	r5, lr, r2
   3b6d4:	beq	3b918 <flatcc_json_printer_string_vector_field@@Base+0x284>
   3b6d8:	ldr	r4, [r1, #16]
   3b6dc:	ldr	ip, [r0, #20]
   3b6e0:	cmp	r4, #0
   3b6e4:	add	r4, r4, #1
   3b6e8:	str	r4, [r1, #16]
   3b6ec:	beq	3b704 <flatcc_json_printer_string_vector_field@@Base+0x70>
   3b6f0:	add	r4, ip, #1
   3b6f4:	mov	r1, #44	; 0x2c
   3b6f8:	str	r4, [r0, #20]
   3b6fc:	strb	r1, [ip]
   3b700:	ldr	ip, [r0, #20]
   3b704:	mov	r7, r3
   3b708:	mov	r4, r0
   3b70c:	ldrb	r1, [r0, #25]
   3b710:	ldr	r3, [lr, r2]
   3b714:	cmp	r1, #0
   3b718:	add	r6, r5, r3
   3b71c:	ldr	r5, [r5, r3]
   3b720:	bne	3b9a8 <flatcc_json_printer_string_vector_field@@Base+0x314>
   3b724:	ldr	r3, [r0, #16]
   3b728:	cmp	r3, ip
   3b72c:	bls	3b940 <flatcc_json_printer_string_vector_field@@Base+0x2ac>
   3b730:	mov	r3, #34	; 0x22
   3b734:	mov	r1, r7
   3b738:	strb	r3, [ip]
   3b73c:	ldrb	r3, [r4, #26]
   3b740:	ldr	r2, [r4, #16]
   3b744:	ldr	r0, [r4, #20]
   3b748:	cmp	r3, #0
   3b74c:	addeq	r0, r0, #1
   3b750:	ldr	r3, [sp, #32]
   3b754:	str	r0, [r4, #20]
   3b758:	add	r3, r0, r3
   3b75c:	cmp	r2, r3
   3b760:	ldr	r2, [sp, #32]
   3b764:	bls	3b930 <flatcc_json_printer_string_vector_field@@Base+0x29c>
   3b768:	bl	1451c <memcpy@plt>
   3b76c:	ldr	r3, [r4, #20]
   3b770:	ldr	r2, [sp, #32]
   3b774:	add	r3, r3, r2
   3b778:	str	r3, [r4, #20]
   3b77c:	mov	r2, #34	; 0x22
   3b780:	mov	lr, #58	; 0x3a
   3b784:	mov	ip, #32
   3b788:	mov	r1, #91	; 0x5b
   3b78c:	strb	r2, [r3]
   3b790:	ldrb	r3, [r4, #26]
   3b794:	ldr	r0, [r4, #20]
   3b798:	clz	r3, r3
   3b79c:	lsr	r3, r3, #5
   3b7a0:	add	r2, r0, r3
   3b7a4:	add	r2, r2, #1
   3b7a8:	str	r2, [r4, #20]
   3b7ac:	strb	lr, [r0, r3]
   3b7b0:	ldr	r3, [r4, #20]
   3b7b4:	strb	ip, [r3]
   3b7b8:	ldrb	r3, [r4, #25]
   3b7bc:	ldr	lr, [r4, #20]
   3b7c0:	ldr	r2, [r4, #32]
   3b7c4:	adds	r3, r3, #0
   3b7c8:	movne	r3, #1
   3b7cc:	cmp	r5, #0
   3b7d0:	add	r0, lr, r3
   3b7d4:	add	r0, r0, #1
   3b7d8:	add	r2, r2, #1
   3b7dc:	str	r0, [r4, #20]
   3b7e0:	str	r2, [r4, #32]
   3b7e4:	strb	r1, [lr, r3]
   3b7e8:	beq	3b8f8 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3b7ec:	ldrb	r1, [r4, #25]
   3b7f0:	ldr	r3, [r4, #20]
   3b7f4:	cmp	r1, #0
   3b7f8:	bne	3b950 <flatcc_json_printer_string_vector_field@@Base+0x2bc>
   3b7fc:	ldr	r2, [r4, #16]
   3b800:	cmp	r2, r3
   3b804:	bhi	3b814 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3b808:	mov	r0, r4
   3b80c:	ldr	r3, [r4, #44]	; 0x2c
   3b810:	blx	r3
   3b814:	ldr	r3, [r6, #4]
   3b818:	mov	r0, r4
   3b81c:	sub	r7, r5, #2
   3b820:	add	r3, r3, #4
   3b824:	add	r1, r6, r3
   3b828:	ldr	r2, [r6, r3]
   3b82c:	add	r1, r1, #4
   3b830:	bl	31a08 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   3b834:	cmp	r5, #1
   3b838:	beq	3b8f8 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3b83c:	add	r6, r6, #8
   3b840:	mov	r8, #44	; 0x2c
   3b844:	mov	r9, #10
   3b848:	b	3b890 <flatcc_json_printer_string_vector_field@@Base+0x1fc>
   3b84c:	ldr	r3, [r4, #16]
   3b850:	mov	r0, r4
   3b854:	ldr	r2, [r4, #20]
   3b858:	cmp	r2, r3
   3b85c:	bcc	3b868 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3b860:	ldr	r3, [r4, #44]	; 0x2c
   3b864:	blx	r3
   3b868:	ldr	r3, [r5]
   3b86c:	sub	r7, r7, #1
   3b870:	mov	r0, r4
   3b874:	add	r6, r6, #4
   3b878:	add	r1, r5, r3
   3b87c:	ldr	r2, [r5, r3]
   3b880:	add	r1, r1, #4
   3b884:	bl	31a08 <flatcc_json_parser_struct_as_root@@Base+0x2154>
   3b888:	cmn	r7, #1
   3b88c:	beq	3b8f8 <flatcc_json_printer_string_vector_field@@Base+0x264>
   3b890:	ldr	r3, [r4, #20]
   3b894:	mov	r5, r6
   3b898:	add	r2, r3, #1
   3b89c:	str	r2, [r4, #20]
   3b8a0:	strb	r8, [r3]
   3b8a4:	ldrb	r1, [r4, #25]
   3b8a8:	cmp	r1, #0
   3b8ac:	beq	3b84c <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3b8b0:	ldr	r3, [r4, #20]
   3b8b4:	mov	r1, #32
   3b8b8:	mov	r0, r4
   3b8bc:	add	r2, r3, #1
   3b8c0:	str	r2, [r4, #20]
   3b8c4:	strb	r9, [r3]
   3b8c8:	ldrb	r2, [r4, #25]
   3b8cc:	ldr	lr, [r4, #16]
   3b8d0:	ldr	sl, [r4, #32]
   3b8d4:	ldr	r3, [r4, #20]
   3b8d8:	mul	sl, sl, r2
   3b8dc:	add	ip, r3, sl
   3b8e0:	mov	r2, sl
   3b8e4:	cmp	lr, ip
   3b8e8:	bcs	3b990 <flatcc_json_printer_string_vector_field@@Base+0x2fc>
   3b8ec:	mov	r1, sl
   3b8f0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b8f4:	b	3b868 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3b8f8:	ldrb	r2, [r4, #25]
   3b8fc:	ldr	r3, [r4, #20]
   3b900:	cmp	r2, #0
   3b904:	add	r2, r3, #1
   3b908:	bne	3b9ec <flatcc_json_printer_string_vector_field@@Base+0x358>
   3b90c:	mov	r1, #93	; 0x5d
   3b910:	str	r2, [r4, #20]
   3b914:	strb	r1, [r3]
   3b918:	ldrd	r4, [sp]
   3b91c:	ldrd	r6, [sp, #8]
   3b920:	ldrd	r8, [sp, #16]
   3b924:	ldr	sl, [sp, #24]
   3b928:	add	sp, sp, #28
   3b92c:	pop	{pc}		; (ldr pc, [sp], #4)
   3b930:	mov	r0, r4
   3b934:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3b938:	ldr	r3, [r4, #20]
   3b93c:	b	3b77c <flatcc_json_printer_string_vector_field@@Base+0xe8>
   3b940:	ldr	r3, [r0, #44]	; 0x2c
   3b944:	blx	r3
   3b948:	ldr	ip, [r4, #20]
   3b94c:	b	3b730 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3b950:	add	r1, r3, #1
   3b954:	mov	r2, #10
   3b958:	str	r1, [r4, #20]
   3b95c:	strb	r2, [r3]
   3b960:	ldrb	r3, [r4, #25]
   3b964:	ldr	r2, [r4, #16]
   3b968:	ldr	r7, [r4, #32]
   3b96c:	ldr	r0, [r4, #20]
   3b970:	mul	r7, r7, r3
   3b974:	add	r3, r0, r7
   3b978:	cmp	r2, r3
   3b97c:	bcs	3ba70 <flatcc_json_printer_string_vector_field@@Base+0x3dc>
   3b980:	mov	r1, r7
   3b984:	mov	r0, r4
   3b988:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b98c:	b	3b814 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3b990:	mov	r0, r3
   3b994:	bl	14594 <memset@plt>
   3b998:	ldr	r3, [r4, #20]
   3b99c:	add	sl, r3, sl
   3b9a0:	str	sl, [r4, #20]
   3b9a4:	b	3b868 <flatcc_json_printer_string_vector_field@@Base+0x1d4>
   3b9a8:	add	r2, ip, #1
   3b9ac:	mov	r3, #10
   3b9b0:	str	r2, [r0, #20]
   3b9b4:	strb	r3, [ip]
   3b9b8:	ldrb	r8, [r0, #25]
   3b9bc:	ldr	ip, [r4, #32]
   3b9c0:	ldr	r2, [r0, #16]
   3b9c4:	ldr	r0, [r0, #20]
   3b9c8:	mul	r8, ip, r8
   3b9cc:	add	r3, r0, r8
   3b9d0:	cmp	r2, r3
   3b9d4:	bcs	3ba38 <flatcc_json_printer_string_vector_field@@Base+0x3a4>
   3b9d8:	mov	r1, r8
   3b9dc:	mov	r0, r4
   3b9e0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3b9e4:	ldr	ip, [r4, #20]
   3b9e8:	b	3b730 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3b9ec:	mov	r1, #10
   3b9f0:	str	r2, [r4, #20]
   3b9f4:	strb	r1, [r3]
   3b9f8:	ldrb	r3, [r4, #25]
   3b9fc:	ldr	r2, [r4, #32]
   3ba00:	ldr	r1, [r4, #16]
   3ba04:	ldr	r0, [r4, #20]
   3ba08:	sub	r2, r2, #1
   3ba0c:	mul	r5, r2, r3
   3ba10:	str	r2, [r4, #32]
   3ba14:	add	r3, r0, r5
   3ba18:	cmp	r1, r3
   3ba1c:	bcs	3ba54 <flatcc_json_printer_string_vector_field@@Base+0x3c0>
   3ba20:	mov	r1, r5
   3ba24:	mov	r0, r4
   3ba28:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ba2c:	ldr	r3, [r4, #20]
   3ba30:	add	r2, r3, #1
   3ba34:	b	3b90c <flatcc_json_printer_string_vector_field@@Base+0x278>
   3ba38:	mov	r2, r8
   3ba3c:	mov	r1, #32
   3ba40:	bl	14594 <memset@plt>
   3ba44:	ldr	ip, [r4, #20]
   3ba48:	add	ip, ip, r8
   3ba4c:	str	ip, [r4, #20]
   3ba50:	b	3b730 <flatcc_json_printer_string_vector_field@@Base+0x9c>
   3ba54:	mov	r2, r5
   3ba58:	mov	r1, #32
   3ba5c:	bl	14594 <memset@plt>
   3ba60:	ldr	r3, [r4, #20]
   3ba64:	add	r3, r3, r5
   3ba68:	add	r2, r3, #1
   3ba6c:	b	3b90c <flatcc_json_printer_string_vector_field@@Base+0x278>
   3ba70:	mov	r2, r7
   3ba74:	mov	r1, ip
   3ba78:	bl	14594 <memset@plt>
   3ba7c:	ldr	r3, [r4, #20]
   3ba80:	add	r7, r3, r7
   3ba84:	str	r7, [r4, #20]
   3ba88:	b	3b814 <flatcc_json_printer_string_vector_field@@Base+0x180>

0003ba8c <flatcc_json_printer_table_vector_field@@Base>:
   3ba8c:	ldr	ip, [r1, #8]
   3ba90:	add	r2, r2, #2
   3ba94:	lsl	r2, r2, #1
   3ba98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3ba9c:	strd	r6, [sp, #8]
   3baa0:	strd	r8, [sp, #16]
   3baa4:	strd	sl, [sp, #24]
   3baa8:	cmp	ip, r2
   3baac:	str	lr, [sp, #32]
   3bab0:	sub	sp, sp, #36	; 0x24
   3bab4:	ldr	r8, [sp, #76]	; 0x4c
   3bab8:	ble	3bc10 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3babc:	ldr	ip, [r1, #4]
   3bac0:	ldrh	r2, [ip, r2]
   3bac4:	cmp	r2, #0
   3bac8:	beq	3bc10 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3bacc:	ldr	lr, [r1]
   3bad0:	adds	r9, lr, r2
   3bad4:	beq	3bc10 <flatcc_json_printer_table_vector_field@@Base+0x184>
   3bad8:	ldr	r4, [r1, #16]
   3badc:	ldr	ip, [r0, #20]
   3bae0:	cmp	r4, #0
   3bae4:	add	r4, r4, #1
   3bae8:	str	r4, [r1, #16]
   3baec:	beq	3bb04 <flatcc_json_printer_table_vector_field@@Base+0x78>
   3baf0:	add	r5, ip, #1
   3baf4:	mov	r4, #44	; 0x2c
   3baf8:	str	r5, [r0, #20]
   3bafc:	strb	r4, [ip]
   3bb00:	ldr	ip, [r0, #20]
   3bb04:	mov	r6, r1
   3bb08:	mov	r5, r3
   3bb0c:	ldrb	r1, [r0, #25]
   3bb10:	mov	r4, r0
   3bb14:	ldr	r3, [lr, r2]
   3bb18:	cmp	r1, #0
   3bb1c:	add	r7, r9, r3
   3bb20:	ldr	fp, [r9, r3]
   3bb24:	bne	3bc4c <flatcc_json_printer_table_vector_field@@Base+0x1c0>
   3bb28:	ldr	r3, [r0, #16]
   3bb2c:	cmp	r3, ip
   3bb30:	bls	3bc3c <flatcc_json_printer_table_vector_field@@Base+0x1b0>
   3bb34:	mov	r3, #34	; 0x22
   3bb38:	mov	r1, r5
   3bb3c:	strb	r3, [ip]
   3bb40:	ldrb	r3, [r4, #26]
   3bb44:	ldr	r2, [r4, #16]
   3bb48:	ldr	r0, [r4, #20]
   3bb4c:	cmp	r3, #0
   3bb50:	addeq	r0, r0, #1
   3bb54:	ldr	r3, [sp, #72]	; 0x48
   3bb58:	str	r0, [r4, #20]
   3bb5c:	add	r3, r0, r3
   3bb60:	cmp	r2, r3
   3bb64:	ldr	r2, [sp, #72]	; 0x48
   3bb68:	bls	3bc2c <flatcc_json_printer_table_vector_field@@Base+0x1a0>
   3bb6c:	bl	1451c <memcpy@plt>
   3bb70:	ldr	r3, [r4, #20]
   3bb74:	ldr	r2, [sp, #72]	; 0x48
   3bb78:	add	r3, r3, r2
   3bb7c:	str	r3, [r4, #20]
   3bb80:	mov	r2, #34	; 0x22
   3bb84:	mov	ip, #58	; 0x3a
   3bb88:	mov	r9, #32
   3bb8c:	mov	r0, #91	; 0x5b
   3bb90:	strb	r2, [r3]
   3bb94:	ldrb	r3, [r4, #26]
   3bb98:	ldr	r1, [r4, #20]
   3bb9c:	clz	r3, r3
   3bba0:	lsr	r3, r3, #5
   3bba4:	add	r2, r1, r3
   3bba8:	add	r2, r2, #1
   3bbac:	str	r2, [r4, #20]
   3bbb0:	strb	ip, [r1, r3]
   3bbb4:	ldr	r3, [r4, #20]
   3bbb8:	strb	r9, [r3]
   3bbbc:	ldrb	r3, [r4, #25]
   3bbc0:	ldr	ip, [r4, #20]
   3bbc4:	ldr	r2, [r4, #32]
   3bbc8:	adds	r3, r3, #0
   3bbcc:	movne	r3, #1
   3bbd0:	cmp	fp, #0
   3bbd4:	add	r1, ip, r3
   3bbd8:	add	r1, r1, #1
   3bbdc:	add	r2, r2, #1
   3bbe0:	str	r1, [r4, #20]
   3bbe4:	str	r2, [r4, #32]
   3bbe8:	strb	r0, [ip, r3]
   3bbec:	bne	3bcdc <flatcc_json_printer_table_vector_field@@Base+0x250>
   3bbf0:	ldr	r3, [r4, #20]
   3bbf4:	add	r2, r3, #1
   3bbf8:	ldrb	r1, [r4, #25]
   3bbfc:	cmp	r1, #0
   3bc00:	bne	3bc90 <flatcc_json_printer_table_vector_field@@Base+0x204>
   3bc04:	mov	r1, #93	; 0x5d
   3bc08:	str	r2, [r4, #20]
   3bc0c:	strb	r1, [r3]
   3bc10:	add	sp, sp, #36	; 0x24
   3bc14:	ldrd	r4, [sp]
   3bc18:	ldrd	r6, [sp, #8]
   3bc1c:	ldrd	r8, [sp, #16]
   3bc20:	ldrd	sl, [sp, #24]
   3bc24:	add	sp, sp, #32
   3bc28:	pop	{pc}		; (ldr pc, [sp], #4)
   3bc2c:	mov	r0, r4
   3bc30:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3bc34:	ldr	r3, [r4, #20]
   3bc38:	b	3bb80 <flatcc_json_printer_table_vector_field@@Base+0xf4>
   3bc3c:	ldr	r3, [r0, #44]	; 0x2c
   3bc40:	blx	r3
   3bc44:	ldr	ip, [r4, #20]
   3bc48:	b	3bb34 <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3bc4c:	add	r2, ip, #1
   3bc50:	mov	r3, #10
   3bc54:	str	r2, [r0, #20]
   3bc58:	strb	r3, [ip]
   3bc5c:	ldrb	r3, [r0, #25]
   3bc60:	ldr	ip, [r4, #32]
   3bc64:	ldr	r2, [r0, #16]
   3bc68:	ldr	r0, [r0, #20]
   3bc6c:	mul	r9, ip, r3
   3bc70:	add	r3, r0, r9
   3bc74:	cmp	r2, r3
   3bc78:	bcs	3be98 <flatcc_json_printer_table_vector_field@@Base+0x40c>
   3bc7c:	mov	r1, r9
   3bc80:	mov	r0, r4
   3bc84:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3bc88:	ldr	ip, [r4, #20]
   3bc8c:	b	3bb34 <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3bc90:	mov	r1, #10
   3bc94:	str	r2, [r4, #20]
   3bc98:	strb	r1, [r3]
   3bc9c:	ldrb	r3, [r4, #25]
   3bca0:	ldr	r2, [r4, #32]
   3bca4:	ldr	r1, [r4, #16]
   3bca8:	ldr	r0, [r4, #20]
   3bcac:	sub	r2, r2, #1
   3bcb0:	mul	r5, r2, r3
   3bcb4:	str	r2, [r4, #32]
   3bcb8:	add	r3, r0, r5
   3bcbc:	cmp	r1, r3
   3bcc0:	bcs	3beb4 <flatcc_json_printer_table_vector_field@@Base+0x428>
   3bcc4:	mov	r1, r5
   3bcc8:	mov	r0, r4
   3bccc:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3bcd0:	ldr	r3, [r4, #20]
   3bcd4:	add	r2, r3, #1
   3bcd8:	b	3bc04 <flatcc_json_printer_table_vector_field@@Base+0x178>
   3bcdc:	ldr	r2, [r6, #12]
   3bce0:	add	r5, r7, #4
   3bce4:	ldr	r3, [r4, #20]
   3bce8:	subs	r2, r2, #1
   3bcec:	beq	3bed0 <flatcc_json_printer_table_vector_field@@Base+0x444>
   3bcf0:	ldr	r1, [r4, #32]
   3bcf4:	add	sl, r3, #1
   3bcf8:	mov	r0, #123	; 0x7b
   3bcfc:	mov	lr, #0
   3bd00:	ldr	ip, [r7, #4]
   3bd04:	str	sl, [r4, #20]
   3bd08:	add	r1, r1, #1
   3bd0c:	str	r1, [r4, #32]
   3bd10:	add	r1, sp, #12
   3bd14:	strb	r0, [r3]
   3bd18:	add	r3, r5, ip
   3bd1c:	mov	r0, r4
   3bd20:	str	r2, [sp, #24]
   3bd24:	str	lr, [sp, #28]
   3bd28:	ldr	r2, [r5, ip]
   3bd2c:	str	r3, [sp, #12]
   3bd30:	sub	r3, r3, r2
   3bd34:	ldrh	r2, [r3]
   3bd38:	str	r3, [sp, #16]
   3bd3c:	str	r2, [sp, #20]
   3bd40:	blx	r8
   3bd44:	ldrb	r3, [r4, #25]
   3bd48:	cmp	r3, #0
   3bd4c:	ldr	r3, [r4, #20]
   3bd50:	bne	3bee4 <flatcc_json_printer_table_vector_field@@Base+0x458>
   3bd54:	add	r1, r3, #1
   3bd58:	mov	r2, #125	; 0x7d
   3bd5c:	str	r1, [r4, #20]
   3bd60:	strb	r2, [r3]
   3bd64:	ldr	r3, [r4, #20]
   3bd68:	sub	fp, fp, #1
   3bd6c:	mov	r7, #44	; 0x2c
   3bd70:	mov	sl, #123	; 0x7b
   3bd74:	mov	r9, #0
   3bd78:	b	3bdf0 <flatcc_json_printer_table_vector_field@@Base+0x364>
   3bd7c:	ldr	lr, [r4, #20]
   3bd80:	add	r1, sp, #12
   3bd84:	ldr	r3, [r4, #32]
   3bd88:	ldr	ip, [r5]
   3bd8c:	add	r0, lr, #1
   3bd90:	add	r3, r3, #1
   3bd94:	str	r0, [r4, #20]
   3bd98:	mov	r0, r4
   3bd9c:	str	r3, [r4, #32]
   3bda0:	add	r3, r5, ip
   3bda4:	strb	sl, [lr]
   3bda8:	str	r2, [sp, #24]
   3bdac:	str	r9, [sp, #28]
   3bdb0:	ldr	r2, [r5, ip]
   3bdb4:	str	r3, [sp, #12]
   3bdb8:	sub	r3, r3, r2
   3bdbc:	ldrh	r2, [r3]
   3bdc0:	str	r3, [sp, #16]
   3bdc4:	str	r2, [sp, #20]
   3bdc8:	blx	r8
   3bdcc:	ldrb	r3, [r4, #25]
   3bdd0:	cmp	r3, #0
   3bdd4:	bne	3be2c <flatcc_json_printer_table_vector_field@@Base+0x3a0>
   3bdd8:	ldr	r1, [r4, #20]
   3bddc:	add	r2, r1, #1
   3bde0:	mov	r3, #125	; 0x7d
   3bde4:	str	r2, [r4, #20]
   3bde8:	strb	r3, [r1]
   3bdec:	ldr	r3, [r4, #20]
   3bdf0:	sub	fp, fp, #1
   3bdf4:	add	r2, r3, #1
   3bdf8:	cmn	fp, #1
   3bdfc:	beq	3bbf8 <flatcc_json_printer_table_vector_field@@Base+0x16c>
   3be00:	str	r2, [r4, #20]
   3be04:	add	r5, r5, #4
   3be08:	strb	r7, [r3]
   3be0c:	ldr	r3, [r6, #12]
   3be10:	subs	r2, r3, #1
   3be14:	bne	3bd7c <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3be18:	ldr	r3, [r4, #36]	; 0x24
   3be1c:	cmp	r3, #0
   3be20:	moveq	r3, #2
   3be24:	streq	r3, [r4, #36]	; 0x24
   3be28:	b	3bdec <flatcc_json_printer_table_vector_field@@Base+0x360>
   3be2c:	ldr	r3, [r4, #20]
   3be30:	mov	r2, #10
   3be34:	add	r1, r3, #1
   3be38:	str	r1, [r4, #20]
   3be3c:	strb	r2, [r3]
   3be40:	ldrb	r1, [r4, #25]
   3be44:	ldr	r2, [r4, #32]
   3be48:	ldr	ip, [r4, #16]
   3be4c:	ldr	r0, [r4, #20]
   3be50:	sub	r2, r2, #1
   3be54:	mul	r3, r2, r1
   3be58:	str	r2, [r4, #32]
   3be5c:	add	r2, r0, r3
   3be60:	cmp	ip, r2
   3be64:	bcs	3be78 <flatcc_json_printer_table_vector_field@@Base+0x3ec>
   3be68:	mov	r1, r3
   3be6c:	mov	r0, r4
   3be70:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3be74:	b	3bdd8 <flatcc_json_printer_table_vector_field@@Base+0x34c>
   3be78:	mov	r2, r3
   3be7c:	mov	r1, #32
   3be80:	str	r3, [sp, #4]
   3be84:	bl	14594 <memset@plt>
   3be88:	ldr	r3, [sp, #4]
   3be8c:	ldr	r1, [r4, #20]
   3be90:	add	r1, r1, r3
   3be94:	b	3bddc <flatcc_json_printer_table_vector_field@@Base+0x350>
   3be98:	mov	r2, r9
   3be9c:	mov	r1, #32
   3bea0:	bl	14594 <memset@plt>
   3bea4:	ldr	ip, [r4, #20]
   3bea8:	add	ip, ip, r9
   3beac:	str	ip, [r4, #20]
   3beb0:	b	3bb34 <flatcc_json_printer_table_vector_field@@Base+0xa8>
   3beb4:	mov	r2, r5
   3beb8:	mov	r1, #32
   3bebc:	bl	14594 <memset@plt>
   3bec0:	ldr	r3, [r4, #20]
   3bec4:	add	r3, r3, r5
   3bec8:	add	r2, r3, #1
   3becc:	b	3bc04 <flatcc_json_printer_table_vector_field@@Base+0x178>
   3bed0:	ldr	r2, [r4, #36]	; 0x24
   3bed4:	cmp	r2, #0
   3bed8:	moveq	r2, #2
   3bedc:	streq	r2, [r4, #36]	; 0x24
   3bee0:	b	3bd68 <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   3bee4:	add	r1, r3, #1
   3bee8:	mov	r2, #10
   3beec:	str	r1, [r4, #20]
   3bef0:	strb	r2, [r3]
   3bef4:	ldrb	r3, [r4, #25]
   3bef8:	ldr	r2, [r4, #32]
   3befc:	ldr	r1, [r4, #16]
   3bf00:	ldr	r0, [r4, #20]
   3bf04:	sub	r2, r2, #1
   3bf08:	mul	r7, r2, r3
   3bf0c:	str	r2, [r4, #32]
   3bf10:	add	r3, r0, r7
   3bf14:	cmp	r1, r3
   3bf18:	bcs	3bf30 <flatcc_json_printer_table_vector_field@@Base+0x4a4>
   3bf1c:	mov	r1, r7
   3bf20:	mov	r0, r4
   3bf24:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3bf28:	ldr	r3, [r4, #20]
   3bf2c:	b	3bd54 <flatcc_json_printer_table_vector_field@@Base+0x2c8>
   3bf30:	mov	r1, r9
   3bf34:	mov	r2, r7
   3bf38:	bl	14594 <memset@plt>
   3bf3c:	ldr	r3, [r4, #20]
   3bf40:	add	r3, r3, r7
   3bf44:	b	3bd54 <flatcc_json_printer_table_vector_field@@Base+0x2c8>

0003bf48 <flatcc_json_printer_union_vector_field@@Base>:
   3bf48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bf4c:	mov	r5, r1
   3bf50:	mov	r4, r0
   3bf54:	ldr	r1, [r1, #8]
   3bf58:	strd	r6, [sp, #8]
   3bf5c:	strd	r8, [sp, #16]
   3bf60:	mov	r9, r2
   3bf64:	add	r2, r2, #1
   3bf68:	lsl	r2, r2, #1
   3bf6c:	strd	sl, [sp, #24]
   3bf70:	mov	fp, r3
   3bf74:	str	lr, [sp, #32]
   3bf78:	sub	sp, sp, #140	; 0x8c
   3bf7c:	cmp	r2, r1
   3bf80:	ldr	r6, [sp, #176]	; 0xb0
   3bf84:	movge	r7, #0
   3bf88:	bge	3bfa0 <flatcc_json_printer_union_vector_field@@Base+0x58>
   3bf8c:	ldr	r3, [r5, #4]
   3bf90:	ldrh	r7, [r3, r2]
   3bf94:	cmp	r7, #0
   3bf98:	ldrne	r3, [r5]
   3bf9c:	addne	r7, r3, r7
   3bfa0:	add	r2, r2, #2
   3bfa4:	ldr	r3, [r5, #12]
   3bfa8:	cmp	r2, r1
   3bfac:	bge	3c15c <flatcc_json_printer_union_vector_field@@Base+0x214>
   3bfb0:	ldr	r1, [r5, #4]
   3bfb4:	ldrh	r8, [r1, r2]
   3bfb8:	cmp	r8, #0
   3bfbc:	beq	3c15c <flatcc_json_printer_union_vector_field@@Base+0x214>
   3bfc0:	ldr	r2, [r5]
   3bfc4:	cmp	r6, #100	; 0x64
   3bfc8:	add	sl, r2, r8
   3bfcc:	str	r2, [sp, #12]
   3bfd0:	str	r3, [sp, #20]
   3bfd4:	bgt	3c168 <flatcc_json_printer_union_vector_field@@Base+0x220>
   3bfd8:	add	r3, sp, #28
   3bfdc:	mov	r2, r6
   3bfe0:	mov	r0, r3
   3bfe4:	mov	r1, fp
   3bfe8:	bl	1451c <memcpy@plt>
   3bfec:	ldr	r2, [pc, #720]	; 3c2c4 <flatcc_json_printer_union_vector_field@@Base+0x37c>
   3bff0:	mov	r3, r0
   3bff4:	add	r1, r0, r6
   3bff8:	cmp	sl, #0
   3bffc:	cmpne	r7, #0
   3c000:	add	r2, pc, r2
   3c004:	ldr	r0, [r2]
   3c008:	ldrb	r2, [r2, #4]
   3c00c:	str	r0, [r3, r6]
   3c010:	strb	r2, [r1, #4]
   3c014:	bne	3c034 <flatcc_json_printer_union_vector_field@@Base+0xec>
   3c018:	add	sp, sp, #140	; 0x8c
   3c01c:	ldrd	r4, [sp]
   3c020:	ldrd	r6, [sp, #8]
   3c024:	ldrd	r8, [sp, #16]
   3c028:	ldrd	sl, [sp, #24]
   3c02c:	add	sp, sp, #32
   3c030:	pop	{pc}		; (ldr pc, [sp], #4)
   3c034:	ldr	r2, [sp, #180]	; 0xb4
   3c038:	add	r0, r6, #5
   3c03c:	mov	r1, r5
   3c040:	stm	sp, {r0, r2}
   3c044:	sub	r2, r9, #1
   3c048:	mov	r0, r4
   3c04c:	bl	39890 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3c050:	ldr	r3, [r5, #16]
   3c054:	add	r2, r3, #1
   3c058:	cmp	r3, #0
   3c05c:	str	r2, [r5, #16]
   3c060:	beq	3c078 <flatcc_json_printer_union_vector_field@@Base+0x130>
   3c064:	ldr	r3, [r4, #20]
   3c068:	mov	r2, #44	; 0x2c
   3c06c:	add	r1, r3, #1
   3c070:	str	r1, [r4, #20]
   3c074:	strb	r2, [r3]
   3c078:	ldr	r3, [sp, #12]
   3c07c:	mov	r2, r6
   3c080:	mov	r1, fp
   3c084:	mov	r0, r4
   3c088:	ldr	r5, [r7]
   3c08c:	ldr	r3, [r3, r8]
   3c090:	add	r6, sl, r3
   3c094:	ldr	r8, [sl, r3]
   3c098:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3c09c:	ldr	r2, [r4, #20]
   3c0a0:	mov	r1, #91	; 0x5b
   3c0a4:	ldr	r3, [r4, #32]
   3c0a8:	cmp	r8, #0
   3c0ac:	add	r0, r2, #1
   3c0b0:	add	r3, r3, #1
   3c0b4:	str	r0, [r4, #20]
   3c0b8:	str	r3, [r4, #32]
   3c0bc:	strb	r1, [r2]
   3c0c0:	beq	3c1a0 <flatcc_json_printer_union_vector_field@@Base+0x258>
   3c0c4:	add	r7, r7, r5
   3c0c8:	add	r6, r6, #4
   3c0cc:	ldrb	r3, [r7, #4]
   3c0d0:	cmp	r3, #0
   3c0d4:	beq	3c258 <flatcc_json_printer_union_vector_field@@Base+0x310>
   3c0d8:	add	r1, sp, #16
   3c0dc:	mov	r0, r4
   3c0e0:	str	r6, [sp, #16]
   3c0e4:	strb	r3, [sp, #24]
   3c0e8:	ldr	r3, [sp, #184]	; 0xb8
   3c0ec:	blx	r3
   3c0f0:	add	r8, r8, #3
   3c0f4:	add	r5, r7, #4
   3c0f8:	mov	sl, #44	; 0x2c
   3c0fc:	add	r7, r7, r8
   3c100:	mov	r9, #110	; 0x6e
   3c104:	mov	r8, #117	; 0x75
   3c108:	ldr	r3, [r4, #20]
   3c10c:	cmp	r5, r7
   3c110:	add	r1, r3, #1
   3c114:	beq	3c1a8 <flatcc_json_printer_union_vector_field@@Base+0x260>
   3c118:	ldrb	r2, [r5, #1]!
   3c11c:	add	r6, r6, #4
   3c120:	str	r1, [r4, #20]
   3c124:	strb	sl, [r3]
   3c128:	cmp	r2, #0
   3c12c:	beq	3c1c4 <flatcc_json_printer_union_vector_field@@Base+0x27c>
   3c130:	add	r1, sp, #16
   3c134:	mov	r0, r4
   3c138:	ldr	r3, [sp, #184]	; 0xb8
   3c13c:	str	r6, [sp, #16]
   3c140:	strb	r2, [sp, #24]
   3c144:	blx	r3
   3c148:	ldr	r3, [r4, #20]
   3c14c:	cmp	r5, r7
   3c150:	add	r1, r3, #1
   3c154:	bne	3c118 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3c158:	b	3c1a8 <flatcc_json_printer_union_vector_field@@Base+0x260>
   3c15c:	cmp	r6, #100	; 0x64
   3c160:	str	r3, [sp, #20]
   3c164:	ble	3c018 <flatcc_json_printer_union_vector_field@@Base+0xd0>
   3c168:	ldr	r3, [r4, #36]	; 0x24
   3c16c:	movw	r2, #843	; 0x34b
   3c170:	ldr	r1, [pc, #336]	; 3c2c8 <flatcc_json_printer_union_vector_field@@Base+0x380>
   3c174:	ldr	r0, [pc, #336]	; 3c2cc <flatcc_json_printer_union_vector_field@@Base+0x384>
   3c178:	cmp	r3, #0
   3c17c:	moveq	r3, #1
   3c180:	add	r1, pc, r1
   3c184:	streq	r3, [r4, #36]	; 0x24
   3c188:	ldr	r3, [pc, #320]	; 3c2d0 <flatcc_json_printer_union_vector_field@@Base+0x388>
   3c18c:	add	r0, pc, r0
   3c190:	add	r3, pc, r3
   3c194:	add	r3, r3, #1776	; 0x6f0
   3c198:	add	r3, r3, #8
   3c19c:	bl	145e8 <__assert_fail@plt>
   3c1a0:	ldr	r3, [r4, #20]
   3c1a4:	add	r1, r3, #1
   3c1a8:	ldrb	r2, [r4, #25]
   3c1ac:	cmp	r2, #0
   3c1b0:	bne	3c20c <flatcc_json_printer_union_vector_field@@Base+0x2c4>
   3c1b4:	mov	r2, #93	; 0x5d
   3c1b8:	str	r1, [r4, #20]
   3c1bc:	strb	r2, [r3]
   3c1c0:	b	3c018 <flatcc_json_printer_union_vector_field@@Base+0xd0>
   3c1c4:	ldr	r3, [r4, #20]
   3c1c8:	mov	r2, #108	; 0x6c
   3c1cc:	add	r1, r3, #1
   3c1d0:	str	r1, [r4, #20]
   3c1d4:	strb	r9, [r3]
   3c1d8:	ldr	r3, [r4, #20]
   3c1dc:	add	r1, r3, #1
   3c1e0:	str	r1, [r4, #20]
   3c1e4:	strb	r8, [r3]
   3c1e8:	ldr	r3, [r4, #20]
   3c1ec:	add	r1, r3, #1
   3c1f0:	str	r1, [r4, #20]
   3c1f4:	strb	r2, [r3]
   3c1f8:	ldr	r3, [r4, #20]
   3c1fc:	add	r1, r3, #1
   3c200:	str	r1, [r4, #20]
   3c204:	strb	r2, [r3]
   3c208:	b	3c108 <flatcc_json_printer_union_vector_field@@Base+0x1c0>
   3c20c:	mov	r2, #10
   3c210:	str	r1, [r4, #20]
   3c214:	strb	r2, [r3]
   3c218:	ldrb	r3, [r4, #25]
   3c21c:	ldr	r2, [r4, #32]
   3c220:	ldr	r1, [r4, #16]
   3c224:	ldr	r0, [r4, #20]
   3c228:	sub	r2, r2, #1
   3c22c:	mul	r5, r2, r3
   3c230:	str	r2, [r4, #32]
   3c234:	add	r3, r0, r5
   3c238:	cmp	r1, r3
   3c23c:	bcs	3c2a8 <flatcc_json_printer_union_vector_field@@Base+0x360>
   3c240:	mov	r1, r5
   3c244:	mov	r0, r4
   3c248:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c24c:	ldr	r3, [r4, #20]
   3c250:	add	r1, r3, #1
   3c254:	b	3c1b4 <flatcc_json_printer_union_vector_field@@Base+0x26c>
   3c258:	ldr	r3, [r4, #20]
   3c25c:	mov	r0, #110	; 0x6e
   3c260:	mov	r1, #117	; 0x75
   3c264:	mov	r2, #108	; 0x6c
   3c268:	add	ip, r3, #1
   3c26c:	str	ip, [r4, #20]
   3c270:	strb	r0, [r3]
   3c274:	ldr	r3, [r4, #20]
   3c278:	add	r0, r3, #1
   3c27c:	str	r0, [r4, #20]
   3c280:	strb	r1, [r3]
   3c284:	ldr	r3, [r4, #20]
   3c288:	add	r1, r3, #1
   3c28c:	str	r1, [r4, #20]
   3c290:	strb	r2, [r3]
   3c294:	ldr	r3, [r4, #20]
   3c298:	add	r1, r3, #1
   3c29c:	str	r1, [r4, #20]
   3c2a0:	strb	r2, [r3]
   3c2a4:	b	3c0f0 <flatcc_json_printer_union_vector_field@@Base+0x1a8>
   3c2a8:	mov	r1, #32
   3c2ac:	mov	r2, r5
   3c2b0:	bl	14594 <memset@plt>
   3c2b4:	ldr	r3, [r4, #20]
   3c2b8:	add	r3, r3, r5
   3c2bc:	add	r1, r3, #1
   3c2c0:	b	3c1b4 <flatcc_json_printer_union_vector_field@@Base+0x26c>
   3c2c4:	andeq	r7, r0, r8, lsr #17
   3c2c8:	andeq	r7, r0, ip, lsl #10
   3c2cc:	andeq	r7, r0, r0, lsl #14
   3c2d0:	andeq	r6, r0, r0, lsr #27

0003c2d4 <flatcc_json_printer_table_field@@Base>:
   3c2d4:	ldr	ip, [r1, #8]
   3c2d8:	add	r2, r2, #2
   3c2dc:	lsl	r2, r2, #1
   3c2e0:	cmp	r2, ip
   3c2e4:	bxge	lr
   3c2e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c2ec:	ldr	ip, [r1, #4]
   3c2f0:	strd	r6, [sp, #8]
   3c2f4:	strd	r8, [sp, #16]
   3c2f8:	str	sl, [sp, #24]
   3c2fc:	str	lr, [sp, #28]
   3c300:	sub	sp, sp, #24
   3c304:	ldrh	r6, [ip, r2]
   3c308:	cmp	r6, #0
   3c30c:	beq	3c48c <flatcc_json_printer_table_field@@Base+0x1b8>
   3c310:	ldr	r8, [r1]
   3c314:	adds	r7, r8, r6
   3c318:	beq	3c48c <flatcc_json_printer_table_field@@Base+0x1b8>
   3c31c:	ldr	ip, [r1, #16]
   3c320:	ldr	r2, [r0, #20]
   3c324:	cmp	ip, #0
   3c328:	add	ip, ip, #1
   3c32c:	str	ip, [r1, #16]
   3c330:	beq	3c348 <flatcc_json_printer_table_field@@Base+0x74>
   3c334:	add	lr, r2, #1
   3c338:	mov	ip, #44	; 0x2c
   3c33c:	str	lr, [r0, #20]
   3c340:	strb	ip, [r2]
   3c344:	ldr	r2, [r0, #20]
   3c348:	mov	r5, r1
   3c34c:	mov	r9, r3
   3c350:	ldrb	r1, [r0, #25]
   3c354:	mov	r4, r0
   3c358:	cmp	r1, #0
   3c35c:	bne	3c4dc <flatcc_json_printer_table_field@@Base+0x208>
   3c360:	ldr	r3, [r0, #16]
   3c364:	cmp	r3, r2
   3c368:	bls	3c4b8 <flatcc_json_printer_table_field@@Base+0x1e4>
   3c36c:	mov	r3, #34	; 0x22
   3c370:	mov	r1, r9
   3c374:	strb	r3, [r2]
   3c378:	ldrb	r3, [r4, #26]
   3c37c:	ldr	r2, [r4, #16]
   3c380:	ldr	r0, [r4, #20]
   3c384:	cmp	r3, #0
   3c388:	addeq	r0, r0, #1
   3c38c:	ldr	r3, [sp, #56]	; 0x38
   3c390:	str	r0, [r4, #20]
   3c394:	add	r3, r0, r3
   3c398:	cmp	r2, r3
   3c39c:	ldr	r2, [sp, #56]	; 0x38
   3c3a0:	bls	3c4a8 <flatcc_json_printer_table_field@@Base+0x1d4>
   3c3a4:	bl	1451c <memcpy@plt>
   3c3a8:	ldr	r3, [r4, #20]
   3c3ac:	ldr	r2, [sp, #56]	; 0x38
   3c3b0:	add	r3, r3, r2
   3c3b4:	str	r3, [r4, #20]
   3c3b8:	mov	r2, #34	; 0x22
   3c3bc:	mov	r0, #58	; 0x3a
   3c3c0:	mov	r9, #32
   3c3c4:	strb	r2, [r3]
   3c3c8:	ldrb	r3, [r4, #26]
   3c3cc:	ldr	r1, [r4, #20]
   3c3d0:	clz	r3, r3
   3c3d4:	lsr	r3, r3, #5
   3c3d8:	add	r2, r1, r3
   3c3dc:	add	r2, r2, #1
   3c3e0:	str	r2, [r4, #20]
   3c3e4:	strb	r0, [r1, r3]
   3c3e8:	ldr	r3, [r4, #20]
   3c3ec:	strb	r9, [r3]
   3c3f0:	ldrb	r3, [r4, #25]
   3c3f4:	ldr	r0, [r4, #20]
   3c3f8:	ldr	r1, [r5, #12]
   3c3fc:	adds	r3, r3, #0
   3c400:	movne	r3, #1
   3c404:	add	r2, r0, r3
   3c408:	subs	ip, r1, #1
   3c40c:	str	r2, [r4, #20]
   3c410:	beq	3c4c8 <flatcc_json_printer_table_field@@Base+0x1f4>
   3c414:	ldr	lr, [r4, #32]
   3c418:	add	r2, r2, #1
   3c41c:	add	r1, sp, #4
   3c420:	ldr	r5, [r8, r6]
   3c424:	mov	r6, #0
   3c428:	mov	r8, #123	; 0x7b
   3c42c:	str	r2, [r4, #20]
   3c430:	add	r2, lr, #1
   3c434:	str	r2, [r4, #32]
   3c438:	strb	r8, [r0, r3]
   3c43c:	add	r3, r7, r5
   3c440:	mov	r0, r4
   3c444:	str	ip, [sp, #16]
   3c448:	str	r6, [sp, #20]
   3c44c:	ldr	r2, [r7, r5]
   3c450:	str	r3, [sp, #4]
   3c454:	sub	r3, r3, r2
   3c458:	ldrh	r2, [r3]
   3c45c:	str	r3, [sp, #8]
   3c460:	ldr	r3, [sp, #60]	; 0x3c
   3c464:	str	r2, [sp, #12]
   3c468:	blx	r3
   3c46c:	ldrb	r3, [r4, #25]
   3c470:	cmp	r3, r6
   3c474:	ldr	r3, [r4, #20]
   3c478:	bne	3c520 <flatcc_json_printer_table_field@@Base+0x24c>
   3c47c:	add	r1, r3, #1
   3c480:	mov	r2, #125	; 0x7d
   3c484:	str	r1, [r4, #20]
   3c488:	strb	r2, [r3]
   3c48c:	add	sp, sp, #24
   3c490:	ldrd	r4, [sp]
   3c494:	ldrd	r6, [sp, #8]
   3c498:	ldrd	r8, [sp, #16]
   3c49c:	ldr	sl, [sp, #24]
   3c4a0:	add	sp, sp, #28
   3c4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   3c4a8:	mov	r0, r4
   3c4ac:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3c4b0:	ldr	r3, [r4, #20]
   3c4b4:	b	3c3b8 <flatcc_json_printer_table_field@@Base+0xe4>
   3c4b8:	ldr	r3, [r0, #44]	; 0x2c
   3c4bc:	blx	r3
   3c4c0:	ldr	r2, [r4, #20]
   3c4c4:	b	3c36c <flatcc_json_printer_table_field@@Base+0x98>
   3c4c8:	ldr	r3, [r4, #36]	; 0x24
   3c4cc:	cmp	r3, #0
   3c4d0:	moveq	r3, #2
   3c4d4:	streq	r3, [r4, #36]	; 0x24
   3c4d8:	b	3c48c <flatcc_json_printer_table_field@@Base+0x1b8>
   3c4dc:	add	r1, r2, #1
   3c4e0:	mov	r3, #10
   3c4e4:	str	r1, [r0, #20]
   3c4e8:	strb	r3, [r2]
   3c4ec:	ldrb	r3, [r0, #25]
   3c4f0:	ldr	r2, [r4, #32]
   3c4f4:	ldr	r1, [r0, #16]
   3c4f8:	ldr	r0, [r0, #20]
   3c4fc:	mul	sl, r2, r3
   3c500:	add	r3, r0, sl
   3c504:	cmp	r1, r3
   3c508:	bcs	3c56c <flatcc_json_printer_table_field@@Base+0x298>
   3c50c:	mov	r1, sl
   3c510:	mov	r0, r4
   3c514:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c518:	ldr	r2, [r4, #20]
   3c51c:	b	3c36c <flatcc_json_printer_table_field@@Base+0x98>
   3c520:	add	r1, r3, #1
   3c524:	mov	r2, #10
   3c528:	str	r1, [r4, #20]
   3c52c:	strb	r2, [r3]
   3c530:	ldrb	r3, [r4, #25]
   3c534:	ldr	r2, [r4, #32]
   3c538:	ldr	r1, [r4, #16]
   3c53c:	ldr	r0, [r4, #20]
   3c540:	sub	r2, r2, #1
   3c544:	mul	r5, r2, r3
   3c548:	str	r2, [r4, #32]
   3c54c:	add	r3, r0, r5
   3c550:	cmp	r1, r3
   3c554:	bcs	3c588 <flatcc_json_printer_table_field@@Base+0x2b4>
   3c558:	mov	r1, r5
   3c55c:	mov	r0, r4
   3c560:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c564:	ldr	r3, [r4, #20]
   3c568:	b	3c47c <flatcc_json_printer_table_field@@Base+0x1a8>
   3c56c:	mov	r2, sl
   3c570:	mov	r1, #32
   3c574:	bl	14594 <memset@plt>
   3c578:	ldr	r2, [r4, #20]
   3c57c:	add	r2, r2, sl
   3c580:	str	r2, [r4, #20]
   3c584:	b	3c36c <flatcc_json_printer_table_field@@Base+0x98>
   3c588:	mov	r1, r9
   3c58c:	mov	r2, r5
   3c590:	bl	14594 <memset@plt>
   3c594:	ldr	r3, [r4, #20]
   3c598:	add	r3, r3, r5
   3c59c:	b	3c47c <flatcc_json_printer_table_field@@Base+0x1a8>

0003c5a0 <flatcc_json_printer_union_field@@Base>:
   3c5a0:	ldr	ip, [r1, #8]
   3c5a4:	add	r2, r2, #1
   3c5a8:	lsl	r2, r2, #1
   3c5ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c5b0:	strd	r6, [sp, #8]
   3c5b4:	strd	r8, [sp, #16]
   3c5b8:	str	sl, [sp, #24]
   3c5bc:	cmp	r2, ip
   3c5c0:	str	lr, [sp, #28]
   3c5c4:	sub	sp, sp, #16
   3c5c8:	movge	lr, #0
   3c5cc:	ldr	r6, [sp, #48]	; 0x30
   3c5d0:	bge	3c5e8 <flatcc_json_printer_union_field@@Base+0x48>
   3c5d4:	ldr	lr, [r1, #4]
   3c5d8:	ldrh	lr, [lr, r2]
   3c5dc:	cmp	lr, #0
   3c5e0:	ldrne	r4, [r1]
   3c5e4:	addne	lr, r4, lr
   3c5e8:	add	r2, r2, #2
   3c5ec:	cmp	r2, ip
   3c5f0:	bge	3c7a4 <flatcc_json_printer_union_field@@Base+0x204>
   3c5f4:	ldr	ip, [r1, #4]
   3c5f8:	ldrh	r2, [ip, r2]
   3c5fc:	cmp	r2, #0
   3c600:	beq	3c7a4 <flatcc_json_printer_union_field@@Base+0x204>
   3c604:	ldr	r8, [r1]
   3c608:	adds	r8, r8, r2
   3c60c:	moveq	r2, #1
   3c610:	movne	r2, #0
   3c614:	cmp	lr, #0
   3c618:	moveq	r2, #1
   3c61c:	cmp	r2, #0
   3c620:	bne	3c7a4 <flatcc_json_printer_union_field@@Base+0x204>
   3c624:	ldr	ip, [r1, #16]
   3c628:	ldrb	r9, [lr]
   3c62c:	ldr	r2, [r0, #20]
   3c630:	cmp	ip, #0
   3c634:	add	ip, ip, #1
   3c638:	str	ip, [r1, #16]
   3c63c:	beq	3c654 <flatcc_json_printer_union_field@@Base+0xb4>
   3c640:	add	lr, r2, #1
   3c644:	mov	ip, #44	; 0x2c
   3c648:	str	lr, [r0, #20]
   3c64c:	strb	ip, [r2]
   3c650:	ldr	r2, [r0, #20]
   3c654:	mov	r5, r1
   3c658:	mov	r7, r3
   3c65c:	ldrb	r1, [r0, #25]
   3c660:	mov	r4, r0
   3c664:	cmp	r1, #0
   3c668:	bne	3c7c0 <flatcc_json_printer_union_field@@Base+0x220>
   3c66c:	ldr	r3, [r0, #16]
   3c670:	cmp	r3, r2
   3c674:	bhi	3c684 <flatcc_json_printer_union_field@@Base+0xe4>
   3c678:	ldr	r3, [r0, #44]	; 0x2c
   3c67c:	blx	r3
   3c680:	ldr	r2, [r4, #20]
   3c684:	mov	r3, #34	; 0x22
   3c688:	mov	r1, r7
   3c68c:	strb	r3, [r2]
   3c690:	ldrb	r3, [r4, #26]
   3c694:	ldr	r2, [r4, #16]
   3c698:	ldr	r0, [r4, #20]
   3c69c:	cmp	r3, #0
   3c6a0:	addeq	r0, r0, #1
   3c6a4:	add	r3, r0, r6
   3c6a8:	cmp	r2, r3
   3c6ac:	mov	r2, r6
   3c6b0:	str	r0, [r4, #20]
   3c6b4:	bls	3c82c <flatcc_json_printer_union_field@@Base+0x28c>
   3c6b8:	bl	1451c <memcpy@plt>
   3c6bc:	ldr	r3, [r4, #20]
   3c6c0:	add	r3, r3, r6
   3c6c4:	str	r3, [r4, #20]
   3c6c8:	ldr	r1, [r4, #16]
   3c6cc:	add	r2, r3, #5
   3c6d0:	cmp	r1, r2
   3c6d4:	bhi	3c804 <flatcc_json_printer_union_field@@Base+0x264>
   3c6d8:	ldr	r1, [pc, #400]	; 3c870 <flatcc_json_printer_union_field@@Base+0x2d0>
   3c6dc:	mov	r2, #5
   3c6e0:	mov	r0, r4
   3c6e4:	add	r1, pc, r1
   3c6e8:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3c6ec:	ldr	r3, [r4, #20]
   3c6f0:	mov	r2, #34	; 0x22
   3c6f4:	mov	ip, #58	; 0x3a
   3c6f8:	mov	r0, #32
   3c6fc:	strb	r2, [r3]
   3c700:	ldrb	r2, [r4, #26]
   3c704:	ldr	r1, [r4, #20]
   3c708:	clz	r2, r2
   3c70c:	lsr	r2, r2, #5
   3c710:	add	r3, r1, r2
   3c714:	add	r3, r3, #1
   3c718:	str	r3, [r4, #20]
   3c71c:	strb	ip, [r1, r2]
   3c720:	ldr	r3, [r4, #20]
   3c724:	strb	r0, [r3]
   3c728:	ldrb	r2, [r4, #25]
   3c72c:	ldr	r1, [r4, #20]
   3c730:	ldrb	r3, [r4, #27]
   3c734:	cmp	r2, #0
   3c738:	addne	r1, r1, #1
   3c73c:	cmp	r3, #0
   3c740:	str	r1, [r4, #20]
   3c744:	bne	3c83c <flatcc_json_printer_union_field@@Base+0x29c>
   3c748:	mov	r1, r9
   3c74c:	mov	r0, r4
   3c750:	ldr	r3, [sp, #52]	; 0x34
   3c754:	blx	r3
   3c758:	cmp	r9, #0
   3c75c:	beq	3c7a4 <flatcc_json_printer_union_field@@Base+0x204>
   3c760:	ldr	r3, [r4, #20]
   3c764:	mov	ip, #44	; 0x2c
   3c768:	mov	r1, r7
   3c76c:	mov	r0, r4
   3c770:	mov	r2, r6
   3c774:	add	lr, r3, #1
   3c778:	str	lr, [r4, #20]
   3c77c:	strb	ip, [r3]
   3c780:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3c784:	ldr	r3, [r5, #12]
   3c788:	mov	r0, r4
   3c78c:	add	r1, sp, #4
   3c790:	str	r8, [sp, #4]
   3c794:	str	r3, [sp, #8]
   3c798:	ldr	r3, [sp, #56]	; 0x38
   3c79c:	strb	r9, [sp, #12]
   3c7a0:	blx	r3
   3c7a4:	add	sp, sp, #16
   3c7a8:	ldrd	r4, [sp]
   3c7ac:	ldrd	r6, [sp, #8]
   3c7b0:	ldrd	r8, [sp, #16]
   3c7b4:	ldr	sl, [sp, #24]
   3c7b8:	add	sp, sp, #28
   3c7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   3c7c0:	add	r1, r2, #1
   3c7c4:	mov	r3, #10
   3c7c8:	str	r1, [r0, #20]
   3c7cc:	strb	r3, [r2]
   3c7d0:	ldrb	r3, [r0, #25]
   3c7d4:	ldr	r2, [r4, #32]
   3c7d8:	ldr	r1, [r0, #16]
   3c7dc:	ldr	r0, [r0, #20]
   3c7e0:	mul	sl, r2, r3
   3c7e4:	add	r3, r0, sl
   3c7e8:	cmp	r1, r3
   3c7ec:	bcs	3c854 <flatcc_json_printer_union_field@@Base+0x2b4>
   3c7f0:	mov	r1, sl
   3c7f4:	mov	r0, r4
   3c7f8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c7fc:	ldr	r2, [r4, #20]
   3c800:	b	3c684 <flatcc_json_printer_union_field@@Base+0xe4>
   3c804:	ldr	r2, [pc, #104]	; 3c874 <flatcc_json_printer_union_field@@Base+0x2d4>
   3c808:	add	r2, pc, r2
   3c80c:	ldr	r1, [r2]
   3c810:	ldrb	r2, [r2, #4]
   3c814:	str	r1, [r3]
   3c818:	strb	r2, [r3, #4]
   3c81c:	ldr	r3, [r4, #20]
   3c820:	add	r3, r3, #5
   3c824:	str	r3, [r4, #20]
   3c828:	b	3c6f0 <flatcc_json_printer_union_field@@Base+0x150>
   3c82c:	mov	r0, r4
   3c830:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3c834:	ldr	r3, [r4, #20]
   3c838:	b	3c6c8 <flatcc_json_printer_union_field@@Base+0x128>
   3c83c:	mov	r0, r9
   3c840:	bl	30aac <flatcc_json_parser_struct_as_root@@Base+0x11f8>
   3c844:	ldr	r3, [r4, #20]
   3c848:	add	r0, r3, r0
   3c84c:	str	r0, [r4, #20]
   3c850:	b	3c758 <flatcc_json_printer_union_field@@Base+0x1b8>
   3c854:	mov	r2, sl
   3c858:	mov	r1, #32
   3c85c:	bl	14594 <memset@plt>
   3c860:	ldr	r2, [r4, #20]
   3c864:	add	r2, r2, sl
   3c868:	str	r2, [r4, #20]
   3c86c:	b	3c684 <flatcc_json_printer_union_field@@Base+0xe4>
   3c870:	andeq	r7, r0, r4, asr #3
   3c874:	andeq	r7, r0, r0, lsr #1

0003c878 <flatcc_json_printer_union_table@@Base>:
   3c878:	ldr	r3, [r1, #4]
   3c87c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3c880:	mov	r4, r0
   3c884:	strd	r6, [sp, #8]
   3c888:	str	r8, [sp, #16]
   3c88c:	str	lr, [sp, #20]
   3c890:	sub	sp, sp, #24
   3c894:	subs	ip, r3, #1
   3c898:	beq	3c978 <flatcc_json_printer_union_table@@Base+0x100>
   3c89c:	ldr	lr, [r1]
   3c8a0:	mov	r6, #0
   3c8a4:	mov	r7, #123	; 0x7b
   3c8a8:	ldr	r1, [r0, #20]
   3c8ac:	ldr	r3, [r0, #32]
   3c8b0:	ldr	r5, [lr]
   3c8b4:	add	r8, r1, #1
   3c8b8:	add	r3, r3, #1
   3c8bc:	str	r8, [r0, #20]
   3c8c0:	str	r3, [r0, #32]
   3c8c4:	add	r3, lr, r5
   3c8c8:	strb	r7, [r1]
   3c8cc:	add	r1, sp, #4
   3c8d0:	str	ip, [sp, #16]
   3c8d4:	str	r6, [sp, #20]
   3c8d8:	ldr	ip, [lr, r5]
   3c8dc:	str	r3, [sp, #4]
   3c8e0:	sub	r3, r3, ip
   3c8e4:	ldrh	ip, [r3]
   3c8e8:	str	r3, [sp, #8]
   3c8ec:	str	ip, [sp, #12]
   3c8f0:	blx	r2
   3c8f4:	ldrb	r3, [r4, #25]
   3c8f8:	cmp	r3, r6
   3c8fc:	bne	3c92c <flatcc_json_printer_union_table@@Base+0xb4>
   3c900:	ldr	r1, [r4, #20]
   3c904:	add	r2, r1, #1
   3c908:	mov	r3, #125	; 0x7d
   3c90c:	str	r2, [r4, #20]
   3c910:	strb	r3, [r1]
   3c914:	add	sp, sp, #24
   3c918:	ldrd	r4, [sp]
   3c91c:	ldrd	r6, [sp, #8]
   3c920:	ldr	r8, [sp, #16]
   3c924:	add	sp, sp, #20
   3c928:	pop	{pc}		; (ldr pc, [sp], #4)
   3c92c:	ldr	r3, [r4, #20]
   3c930:	mov	r2, #10
   3c934:	add	r1, r3, #1
   3c938:	str	r1, [r4, #20]
   3c93c:	strb	r2, [r3]
   3c940:	ldrb	r1, [r4, #25]
   3c944:	ldr	r3, [r4, #32]
   3c948:	ldr	r2, [r4, #16]
   3c94c:	ldr	r0, [r4, #20]
   3c950:	sub	r3, r3, #1
   3c954:	mul	r5, r3, r1
   3c958:	str	r3, [r4, #32]
   3c95c:	add	r3, r0, r5
   3c960:	cmp	r2, r3
   3c964:	bcs	3c98c <flatcc_json_printer_union_table@@Base+0x114>
   3c968:	mov	r1, r5
   3c96c:	mov	r0, r4
   3c970:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3c974:	b	3c900 <flatcc_json_printer_union_table@@Base+0x88>
   3c978:	ldr	r3, [r0, #36]	; 0x24
   3c97c:	cmp	r3, #0
   3c980:	moveq	r3, #2
   3c984:	streq	r3, [r0, #36]	; 0x24
   3c988:	b	3c914 <flatcc_json_printer_union_table@@Base+0x9c>
   3c98c:	mov	r1, #32
   3c990:	mov	r2, r5
   3c994:	bl	14594 <memset@plt>
   3c998:	ldr	r1, [r4, #20]
   3c99c:	add	r1, r1, r5
   3c9a0:	b	3c904 <flatcc_json_printer_union_table@@Base+0x8c>

0003c9a4 <flatcc_json_printer_union_struct@@Base>:
   3c9a4:	ldr	ip, [r0, #20]
   3c9a8:	strd	r4, [sp, #-16]!
   3c9ac:	mov	r4, r0
   3c9b0:	ldr	r3, [r0, #32]
   3c9b4:	str	r6, [sp, #8]
   3c9b8:	str	lr, [sp, #12]
   3c9bc:	mov	lr, #123	; 0x7b
   3c9c0:	add	r5, ip, #1
   3c9c4:	add	r3, r3, #1
   3c9c8:	str	r5, [r0, #20]
   3c9cc:	str	r3, [r0, #32]
   3c9d0:	strb	lr, [ip]
   3c9d4:	ldr	r3, [r1]
   3c9d8:	ldr	r1, [r3]
   3c9dc:	add	r1, r3, r1
   3c9e0:	blx	r2
   3c9e4:	ldrb	r3, [r4, #25]
   3c9e8:	cmp	r3, #0
   3c9ec:	bne	3ca14 <flatcc_json_printer_union_struct@@Base+0x70>
   3c9f0:	ldr	r1, [r4, #20]
   3c9f4:	add	r2, r1, #1
   3c9f8:	mov	r3, #125	; 0x7d
   3c9fc:	str	r2, [r4, #20]
   3ca00:	strb	r3, [r1]
   3ca04:	ldrd	r4, [sp]
   3ca08:	ldr	r6, [sp, #8]
   3ca0c:	add	sp, sp, #12
   3ca10:	pop	{pc}		; (ldr pc, [sp], #4)
   3ca14:	ldr	r3, [r4, #20]
   3ca18:	mov	r2, #10
   3ca1c:	add	r1, r3, #1
   3ca20:	str	r1, [r4, #20]
   3ca24:	strb	r2, [r3]
   3ca28:	ldrb	r1, [r4, #25]
   3ca2c:	ldr	r3, [r4, #32]
   3ca30:	ldr	r2, [r4, #16]
   3ca34:	ldr	r0, [r4, #20]
   3ca38:	sub	r3, r3, #1
   3ca3c:	mul	r5, r3, r1
   3ca40:	str	r3, [r4, #32]
   3ca44:	add	r3, r0, r5
   3ca48:	cmp	r2, r3
   3ca4c:	bcs	3ca60 <flatcc_json_printer_union_struct@@Base+0xbc>
   3ca50:	mov	r1, r5
   3ca54:	mov	r0, r4
   3ca58:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3ca5c:	b	3c9f0 <flatcc_json_printer_union_struct@@Base+0x4c>
   3ca60:	mov	r1, #32
   3ca64:	mov	r2, r5
   3ca68:	bl	14594 <memset@plt>
   3ca6c:	ldr	r1, [r4, #20]
   3ca70:	add	r1, r1, r5
   3ca74:	b	3c9f4 <flatcc_json_printer_union_struct@@Base+0x50>

0003ca78 <flatcc_json_printer_union_string@@Base>:
   3ca78:	ldr	r3, [r1]
   3ca7c:	ldr	r2, [r3]
   3ca80:	add	r1, r3, r2
   3ca84:	ldr	r2, [r3, r2]
   3ca88:	add	r1, r1, #4
   3ca8c:	b	31a08 <flatcc_json_parser_struct_as_root@@Base+0x2154>

0003ca90 <flatcc_json_printer_embedded_struct_field@@Base>:
   3ca90:	cmp	r1, #0
   3ca94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3ca98:	mov	r4, r0
   3ca9c:	strd	r6, [sp, #8]
   3caa0:	mov	r7, r3
   3caa4:	strd	r8, [sp, #16]
   3caa8:	mov	r8, r2
   3caac:	str	sl, [sp, #24]
   3cab0:	str	lr, [sp, #28]
   3cab4:	ldr	r2, [r0, #20]
   3cab8:	ldr	r5, [sp, #36]	; 0x24
   3cabc:	ldr	r6, [sp, #40]	; 0x28
   3cac0:	beq	3cad8 <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3cac4:	add	r1, r2, #1
   3cac8:	mov	r3, #44	; 0x2c
   3cacc:	str	r1, [r0, #20]
   3cad0:	strb	r3, [r2]
   3cad4:	ldr	r2, [r0, #20]
   3cad8:	ldrb	r1, [r4, #25]
   3cadc:	cmp	r1, #0
   3cae0:	bne	3cc4c <flatcc_json_printer_embedded_struct_field@@Base+0x1bc>
   3cae4:	ldr	r3, [r4, #16]
   3cae8:	cmp	r3, r2
   3caec:	bhi	3cb00 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3caf0:	mov	r0, r4
   3caf4:	ldr	r3, [r4, #44]	; 0x2c
   3caf8:	blx	r3
   3cafc:	ldr	r2, [r4, #20]
   3cb00:	mov	r3, #34	; 0x22
   3cb04:	ldr	r1, [sp, #32]
   3cb08:	strb	r3, [r2]
   3cb0c:	ldrb	r3, [r4, #26]
   3cb10:	ldr	r2, [r4, #16]
   3cb14:	ldr	r0, [r4, #20]
   3cb18:	cmp	r3, #0
   3cb1c:	addeq	r0, r0, #1
   3cb20:	add	r3, r0, r5
   3cb24:	cmp	r2, r3
   3cb28:	mov	r2, r5
   3cb2c:	str	r0, [r4, #20]
   3cb30:	bhi	3cbec <flatcc_json_printer_embedded_struct_field@@Base+0x15c>
   3cb34:	mov	r0, r4
   3cb38:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3cb3c:	ldr	r5, [r4, #20]
   3cb40:	mov	r3, #34	; 0x22
   3cb44:	mov	ip, #58	; 0x3a
   3cb48:	add	r1, r8, r7
   3cb4c:	mov	r7, #32
   3cb50:	strb	r3, [r5]
   3cb54:	mov	lr, #123	; 0x7b
   3cb58:	mov	r0, r4
   3cb5c:	ldrb	r3, [r4, #26]
   3cb60:	ldr	r5, [r4, #20]
   3cb64:	clz	r3, r3
   3cb68:	lsr	r3, r3, #5
   3cb6c:	add	r2, r5, r3
   3cb70:	add	r2, r2, #1
   3cb74:	str	r2, [r4, #20]
   3cb78:	strb	ip, [r5, r3]
   3cb7c:	ldr	r3, [r4, #20]
   3cb80:	strb	r7, [r3]
   3cb84:	ldrb	r3, [r4, #25]
   3cb88:	ldr	r5, [r4, #20]
   3cb8c:	ldr	r2, [r4, #32]
   3cb90:	adds	r3, r3, #0
   3cb94:	movne	r3, #1
   3cb98:	add	ip, r5, r3
   3cb9c:	add	ip, ip, #1
   3cba0:	add	r2, r2, #1
   3cba4:	str	ip, [r4, #20]
   3cba8:	str	r2, [r4, #32]
   3cbac:	strb	lr, [r5, r3]
   3cbb0:	blx	r6
   3cbb4:	ldrb	r3, [r4, #25]
   3cbb8:	cmp	r3, #0
   3cbbc:	bne	3cc00 <flatcc_json_printer_embedded_struct_field@@Base+0x170>
   3cbc0:	ldr	r1, [r4, #20]
   3cbc4:	add	r2, r1, #1
   3cbc8:	mov	r3, #125	; 0x7d
   3cbcc:	str	r2, [r4, #20]
   3cbd0:	strb	r3, [r1]
   3cbd4:	ldrd	r4, [sp]
   3cbd8:	ldrd	r6, [sp, #8]
   3cbdc:	ldrd	r8, [sp, #16]
   3cbe0:	ldr	sl, [sp, #24]
   3cbe4:	add	sp, sp, #28
   3cbe8:	pop	{pc}		; (ldr pc, [sp], #4)
   3cbec:	bl	1451c <memcpy@plt>
   3cbf0:	ldr	r3, [r4, #20]
   3cbf4:	add	r5, r3, r5
   3cbf8:	str	r5, [r4, #20]
   3cbfc:	b	3cb40 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   3cc00:	ldr	r3, [r4, #20]
   3cc04:	mov	r2, #10
   3cc08:	add	r1, r3, #1
   3cc0c:	str	r1, [r4, #20]
   3cc10:	strb	r2, [r3]
   3cc14:	ldrb	r1, [r4, #25]
   3cc18:	ldr	r3, [r4, #32]
   3cc1c:	ldr	r2, [r4, #16]
   3cc20:	ldr	r0, [r4, #20]
   3cc24:	sub	r3, r3, #1
   3cc28:	mul	r5, r3, r1
   3cc2c:	str	r3, [r4, #32]
   3cc30:	add	r3, r0, r5
   3cc34:	cmp	r2, r3
   3cc38:	bcs	3ccac <flatcc_json_printer_embedded_struct_field@@Base+0x21c>
   3cc3c:	mov	r1, r5
   3cc40:	mov	r0, r4
   3cc44:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cc48:	b	3cbc0 <flatcc_json_printer_embedded_struct_field@@Base+0x130>
   3cc4c:	add	r1, r2, #1
   3cc50:	mov	r3, #10
   3cc54:	str	r1, [r4, #20]
   3cc58:	strb	r3, [r2]
   3cc5c:	ldrb	r3, [r4, #25]
   3cc60:	ldr	r1, [r4, #16]
   3cc64:	ldr	r2, [r4, #32]
   3cc68:	ldr	r0, [r4, #20]
   3cc6c:	mul	r9, r2, r3
   3cc70:	add	r3, r0, r9
   3cc74:	cmp	r1, r3
   3cc78:	bcs	3cc90 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   3cc7c:	mov	r1, r9
   3cc80:	mov	r0, r4
   3cc84:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cc88:	ldr	r2, [r4, #20]
   3cc8c:	b	3cb00 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3cc90:	mov	r2, r9
   3cc94:	mov	r1, #32
   3cc98:	bl	14594 <memset@plt>
   3cc9c:	ldr	r2, [r4, #20]
   3cca0:	add	r2, r2, r9
   3cca4:	str	r2, [r4, #20]
   3cca8:	b	3cb00 <flatcc_json_printer_embedded_struct_field@@Base+0x70>
   3ccac:	mov	r1, r7
   3ccb0:	mov	r2, r5
   3ccb4:	bl	14594 <memset@plt>
   3ccb8:	ldr	r1, [r4, #20]
   3ccbc:	add	r1, r1, r5
   3ccc0:	b	3cbc4 <flatcc_json_printer_embedded_struct_field@@Base+0x134>

0003ccc4 <flatcc_json_printer_struct_field@@Base>:
   3ccc4:	ldr	ip, [r1, #8]
   3ccc8:	add	r2, r2, #2
   3cccc:	lsl	r2, r2, #1
   3ccd0:	cmp	r2, ip
   3ccd4:	bxge	lr
   3ccd8:	ldr	ip, [r1, #4]
   3ccdc:	ldrh	r2, [ip, r2]
   3cce0:	cmp	r2, #0
   3cce4:	bxeq	lr
   3cce8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3ccec:	ldr	r5, [r1]
   3ccf0:	strd	r6, [sp, #8]
   3ccf4:	str	r8, [sp, #16]
   3ccf8:	str	lr, [sp, #20]
   3ccfc:	adds	r5, r5, r2
   3cd00:	beq	3ce34 <flatcc_json_printer_struct_field@@Base+0x170>
   3cd04:	ldr	ip, [r1, #16]
   3cd08:	ldr	r2, [r0, #20]
   3cd0c:	cmp	ip, #0
   3cd10:	add	ip, ip, #1
   3cd14:	str	ip, [r1, #16]
   3cd18:	beq	3cd30 <flatcc_json_printer_struct_field@@Base+0x6c>
   3cd1c:	add	ip, r2, #1
   3cd20:	mov	r1, #44	; 0x2c
   3cd24:	str	ip, [r0, #20]
   3cd28:	strb	r1, [r2]
   3cd2c:	ldr	r2, [r0, #20]
   3cd30:	mov	r6, r3
   3cd34:	mov	r4, r0
   3cd38:	ldrb	r1, [r0, #25]
   3cd3c:	cmp	r1, #0
   3cd40:	bne	3ce68 <flatcc_json_printer_struct_field@@Base+0x1a4>
   3cd44:	ldr	r3, [r0, #16]
   3cd48:	cmp	r3, r2
   3cd4c:	bls	3ce58 <flatcc_json_printer_struct_field@@Base+0x194>
   3cd50:	mov	r3, #34	; 0x22
   3cd54:	mov	r1, r6
   3cd58:	strb	r3, [r2]
   3cd5c:	ldrb	r3, [r4, #26]
   3cd60:	ldr	r2, [r4, #16]
   3cd64:	ldr	r0, [r4, #20]
   3cd68:	cmp	r3, #0
   3cd6c:	addeq	r0, r0, #1
   3cd70:	ldr	r3, [sp, #24]
   3cd74:	str	r0, [r4, #20]
   3cd78:	add	r3, r0, r3
   3cd7c:	cmp	r2, r3
   3cd80:	ldr	r2, [sp, #24]
   3cd84:	bls	3ce48 <flatcc_json_printer_struct_field@@Base+0x184>
   3cd88:	bl	1451c <memcpy@plt>
   3cd8c:	ldr	r3, [r4, #20]
   3cd90:	ldr	r2, [sp, #24]
   3cd94:	add	r3, r3, r2
   3cd98:	str	r3, [r4, #20]
   3cd9c:	mov	r2, #34	; 0x22
   3cda0:	mov	r6, #58	; 0x3a
   3cda4:	mov	r1, r5
   3cda8:	mov	r5, #32
   3cdac:	strb	r2, [r3]
   3cdb0:	mov	lr, #123	; 0x7b
   3cdb4:	mov	r0, r4
   3cdb8:	ldrb	r3, [r4, #26]
   3cdbc:	ldr	ip, [r4, #20]
   3cdc0:	clz	r3, r3
   3cdc4:	lsr	r3, r3, #5
   3cdc8:	add	r2, ip, r3
   3cdcc:	add	r2, r2, #1
   3cdd0:	str	r2, [r4, #20]
   3cdd4:	strb	r6, [ip, r3]
   3cdd8:	ldr	r3, [r4, #20]
   3cddc:	strb	r5, [r3]
   3cde0:	ldrb	r3, [r4, #25]
   3cde4:	ldr	r6, [r4, #20]
   3cde8:	ldr	r2, [r4, #32]
   3cdec:	adds	r3, r3, #0
   3cdf0:	movne	r3, #1
   3cdf4:	add	ip, r6, r3
   3cdf8:	add	ip, ip, #1
   3cdfc:	add	r2, r2, #1
   3ce00:	str	ip, [r4, #20]
   3ce04:	str	r2, [r4, #32]
   3ce08:	strb	lr, [r6, r3]
   3ce0c:	ldr	r3, [sp, #28]
   3ce10:	blx	r3
   3ce14:	ldrb	r3, [r4, #25]
   3ce18:	cmp	r3, #0
   3ce1c:	bne	3ceac <flatcc_json_printer_struct_field@@Base+0x1e8>
   3ce20:	ldr	r1, [r4, #20]
   3ce24:	add	r2, r1, #1
   3ce28:	mov	r3, #125	; 0x7d
   3ce2c:	str	r2, [r4, #20]
   3ce30:	strb	r3, [r1]
   3ce34:	ldrd	r4, [sp]
   3ce38:	ldrd	r6, [sp, #8]
   3ce3c:	ldr	r8, [sp, #16]
   3ce40:	add	sp, sp, #20
   3ce44:	pop	{pc}		; (ldr pc, [sp], #4)
   3ce48:	mov	r0, r4
   3ce4c:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3ce50:	ldr	r3, [r4, #20]
   3ce54:	b	3cd9c <flatcc_json_printer_struct_field@@Base+0xd8>
   3ce58:	ldr	r3, [r0, #44]	; 0x2c
   3ce5c:	blx	r3
   3ce60:	ldr	r2, [r4, #20]
   3ce64:	b	3cd50 <flatcc_json_printer_struct_field@@Base+0x8c>
   3ce68:	add	r1, r2, #1
   3ce6c:	mov	r3, #10
   3ce70:	str	r1, [r0, #20]
   3ce74:	strb	r3, [r2]
   3ce78:	ldrb	r7, [r0, #25]
   3ce7c:	ldr	r2, [r4, #32]
   3ce80:	ldr	r1, [r0, #16]
   3ce84:	ldr	r0, [r0, #20]
   3ce88:	mul	r7, r2, r7
   3ce8c:	add	r3, r0, r7
   3ce90:	cmp	r1, r3
   3ce94:	bcs	3cef8 <flatcc_json_printer_struct_field@@Base+0x234>
   3ce98:	mov	r1, r7
   3ce9c:	mov	r0, r4
   3cea0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cea4:	ldr	r2, [r4, #20]
   3cea8:	b	3cd50 <flatcc_json_printer_struct_field@@Base+0x8c>
   3ceac:	ldr	r3, [r4, #20]
   3ceb0:	mov	r2, #10
   3ceb4:	add	r1, r3, #1
   3ceb8:	str	r1, [r4, #20]
   3cebc:	strb	r2, [r3]
   3cec0:	ldrb	r1, [r4, #25]
   3cec4:	ldr	r3, [r4, #32]
   3cec8:	ldr	r2, [r4, #16]
   3cecc:	ldr	r0, [r4, #20]
   3ced0:	sub	r3, r3, #1
   3ced4:	mul	r6, r3, r1
   3ced8:	str	r3, [r4, #32]
   3cedc:	add	r3, r0, r6
   3cee0:	cmp	r2, r3
   3cee4:	bcs	3cf14 <flatcc_json_printer_struct_field@@Base+0x250>
   3cee8:	mov	r1, r6
   3ceec:	mov	r0, r4
   3cef0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3cef4:	b	3ce20 <flatcc_json_printer_struct_field@@Base+0x15c>
   3cef8:	mov	r2, r7
   3cefc:	mov	r1, #32
   3cf00:	bl	14594 <memset@plt>
   3cf04:	ldr	r2, [r4, #20]
   3cf08:	add	r2, r2, r7
   3cf0c:	str	r2, [r4, #20]
   3cf10:	b	3cd50 <flatcc_json_printer_struct_field@@Base+0x8c>
   3cf14:	mov	r1, r5
   3cf18:	mov	r2, r6
   3cf1c:	bl	14594 <memset@plt>
   3cf20:	ldr	r1, [r4, #20]
   3cf24:	add	r1, r1, r6
   3cf28:	b	3ce24 <flatcc_json_printer_struct_field@@Base+0x160>

0003cf2c <flatcc_json_printer_struct_as_root@@Base>:
   3cf2c:	strd	r4, [sp, #-16]!
   3cf30:	mov	r4, r0
   3cf34:	mov	r5, r1
   3cf38:	str	r6, [sp, #8]
   3cf3c:	str	lr, [sp, #12]
   3cf40:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3cf44:	cmp	r0, #0
   3cf48:	beq	3d074 <flatcc_json_printer_struct_as_root@@Base+0x148>
   3cf4c:	ldr	r2, [r4, #20]
   3cf50:	mov	r1, #123	; 0x7b
   3cf54:	mov	r0, r4
   3cf58:	ldr	r3, [r4, #32]
   3cf5c:	add	ip, r2, #1
   3cf60:	add	r3, r3, #1
   3cf64:	str	ip, [r4, #20]
   3cf68:	str	r3, [r4, #32]
   3cf6c:	strb	r1, [r2]
   3cf70:	ldr	r1, [r5]
   3cf74:	ldr	r3, [sp, #16]
   3cf78:	add	r1, r5, r1
   3cf7c:	blx	r3
   3cf80:	ldrb	r3, [r4, #25]
   3cf84:	cmp	r3, #0
   3cf88:	bne	3d010 <flatcc_json_printer_struct_as_root@@Base+0xe4>
   3cf8c:	ldr	r1, [r4, #20]
   3cf90:	mov	r3, #125	; 0x7d
   3cf94:	add	r2, r1, #1
   3cf98:	str	r2, [r4, #20]
   3cf9c:	strb	r3, [r1]
   3cfa0:	ldrb	r3, [r4, #25]
   3cfa4:	cmp	r3, #0
   3cfa8:	bne	3cfec <flatcc_json_printer_struct_as_root@@Base+0xc0>
   3cfac:	mov	r1, #1
   3cfb0:	mov	r0, r4
   3cfb4:	ldr	r3, [r4, #44]	; 0x2c
   3cfb8:	blx	r3
   3cfbc:	ldr	r3, [r4, #36]	; 0x24
   3cfc0:	cmp	r3, #0
   3cfc4:	bne	3d074 <flatcc_json_printer_struct_as_root@@Base+0x148>
   3cfc8:	ldr	r2, [r4]
   3cfcc:	ldr	r3, [r4, #12]
   3cfd0:	ldr	r0, [r4, #20]
   3cfd4:	sub	r0, r0, r2
   3cfd8:	add	r0, r0, r3
   3cfdc:	ldrd	r4, [sp]
   3cfe0:	ldr	r6, [sp, #8]
   3cfe4:	add	sp, sp, #12
   3cfe8:	pop	{pc}		; (ldr pc, [sp], #4)
   3cfec:	ldr	r3, [r4, #32]
   3cff0:	cmp	r3, #0
   3cff4:	bne	3cfac <flatcc_json_printer_struct_as_root@@Base+0x80>
   3cff8:	ldr	r3, [r4, #20]
   3cffc:	mov	r2, #10
   3d000:	add	r1, r3, #1
   3d004:	str	r1, [r4, #20]
   3d008:	strb	r2, [r3]
   3d00c:	b	3cfac <flatcc_json_printer_struct_as_root@@Base+0x80>
   3d010:	ldr	r3, [r4, #20]
   3d014:	mov	r2, #10
   3d018:	add	r1, r3, #1
   3d01c:	str	r1, [r4, #20]
   3d020:	strb	r2, [r3]
   3d024:	ldrb	r1, [r4, #25]
   3d028:	ldr	r3, [r4, #32]
   3d02c:	ldr	r2, [r4, #16]
   3d030:	ldr	r0, [r4, #20]
   3d034:	sub	r3, r3, #1
   3d038:	mul	r5, r3, r1
   3d03c:	str	r3, [r4, #32]
   3d040:	add	r3, r0, r5
   3d044:	cmp	r2, r3
   3d048:	bcs	3d05c <flatcc_json_printer_struct_as_root@@Base+0x130>
   3d04c:	mov	r1, r5
   3d050:	mov	r0, r4
   3d054:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d058:	b	3cf8c <flatcc_json_printer_struct_as_root@@Base+0x60>
   3d05c:	mov	r1, #32
   3d060:	mov	r2, r5
   3d064:	bl	14594 <memset@plt>
   3d068:	ldr	r1, [r4, #20]
   3d06c:	add	r1, r1, r5
   3d070:	b	3cf90 <flatcc_json_printer_struct_as_root@@Base+0x64>
   3d074:	mvn	r0, #0
   3d078:	b	3cfdc <flatcc_json_printer_struct_as_root@@Base+0xb0>

0003d07c <flatcc_json_printer_table_as_root@@Base>:
   3d07c:	strd	r4, [sp, #-12]!
   3d080:	mov	r4, r0
   3d084:	mov	r5, r1
   3d088:	str	lr, [sp, #8]
   3d08c:	sub	sp, sp, #28
   3d090:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3d094:	cmp	r0, #0
   3d098:	beq	3d1f0 <flatcc_json_printer_table_as_root@@Base+0x174>
   3d09c:	ldr	r1, [r4, #20]
   3d0a0:	mov	r0, #123	; 0x7b
   3d0a4:	ldr	r3, [r4, #32]
   3d0a8:	ldr	r2, [r5]
   3d0ac:	add	ip, r1, #1
   3d0b0:	add	r3, r3, #1
   3d0b4:	str	ip, [r4, #20]
   3d0b8:	mov	ip, #0
   3d0bc:	str	r3, [r4, #32]
   3d0c0:	add	r3, r5, r2
   3d0c4:	strb	r0, [r1]
   3d0c8:	mov	r0, #99	; 0x63
   3d0cc:	add	r1, sp, #4
   3d0d0:	ldr	r2, [r5, r2]
   3d0d4:	str	r3, [sp, #4]
   3d0d8:	str	r0, [sp, #16]
   3d0dc:	mov	r0, r4
   3d0e0:	str	ip, [sp, #20]
   3d0e4:	sub	r3, r3, r2
   3d0e8:	ldrh	r2, [r3]
   3d0ec:	str	r3, [sp, #8]
   3d0f0:	ldr	r3, [sp, #40]	; 0x28
   3d0f4:	str	r2, [sp, #12]
   3d0f8:	blx	r3
   3d0fc:	ldrb	r3, [r4, #25]
   3d100:	cmp	r3, #0
   3d104:	bne	3d18c <flatcc_json_printer_table_as_root@@Base+0x110>
   3d108:	ldr	r1, [r4, #20]
   3d10c:	mov	r3, #125	; 0x7d
   3d110:	add	r2, r1, #1
   3d114:	str	r2, [r4, #20]
   3d118:	strb	r3, [r1]
   3d11c:	ldrb	r3, [r4, #25]
   3d120:	cmp	r3, #0
   3d124:	bne	3d168 <flatcc_json_printer_table_as_root@@Base+0xec>
   3d128:	mov	r1, #1
   3d12c:	mov	r0, r4
   3d130:	ldr	r3, [r4, #44]	; 0x2c
   3d134:	blx	r3
   3d138:	ldr	r3, [r4, #36]	; 0x24
   3d13c:	cmp	r3, #0
   3d140:	bne	3d1f0 <flatcc_json_printer_table_as_root@@Base+0x174>
   3d144:	ldr	r2, [r4]
   3d148:	ldr	r3, [r4, #12]
   3d14c:	ldr	r0, [r4, #20]
   3d150:	sub	r0, r0, r2
   3d154:	add	r0, r0, r3
   3d158:	add	sp, sp, #28
   3d15c:	ldrd	r4, [sp]
   3d160:	add	sp, sp, #8
   3d164:	pop	{pc}		; (ldr pc, [sp], #4)
   3d168:	ldr	r3, [r4, #32]
   3d16c:	cmp	r3, #0
   3d170:	bne	3d128 <flatcc_json_printer_table_as_root@@Base+0xac>
   3d174:	ldr	r3, [r4, #20]
   3d178:	mov	r2, #10
   3d17c:	add	r1, r3, #1
   3d180:	str	r1, [r4, #20]
   3d184:	strb	r2, [r3]
   3d188:	b	3d128 <flatcc_json_printer_table_as_root@@Base+0xac>
   3d18c:	ldr	r3, [r4, #20]
   3d190:	mov	r2, #10
   3d194:	add	r1, r3, #1
   3d198:	str	r1, [r4, #20]
   3d19c:	strb	r2, [r3]
   3d1a0:	ldrb	r1, [r4, #25]
   3d1a4:	ldr	r3, [r4, #32]
   3d1a8:	ldr	r2, [r4, #16]
   3d1ac:	ldr	r0, [r4, #20]
   3d1b0:	sub	r3, r3, #1
   3d1b4:	mul	r5, r3, r1
   3d1b8:	str	r3, [r4, #32]
   3d1bc:	add	r3, r0, r5
   3d1c0:	cmp	r2, r3
   3d1c4:	bcs	3d1d8 <flatcc_json_printer_table_as_root@@Base+0x15c>
   3d1c8:	mov	r1, r5
   3d1cc:	mov	r0, r4
   3d1d0:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d1d4:	b	3d108 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3d1d8:	mov	r1, #32
   3d1dc:	mov	r2, r5
   3d1e0:	bl	14594 <memset@plt>
   3d1e4:	ldr	r1, [r4, #20]
   3d1e8:	add	r1, r1, r5
   3d1ec:	b	3d10c <flatcc_json_printer_table_as_root@@Base+0x90>
   3d1f0:	mvn	r0, #0
   3d1f4:	b	3d158 <flatcc_json_printer_table_as_root@@Base+0xdc>

0003d1f8 <flatcc_json_printer_struct_as_nested_root@@Base>:
   3d1f8:	ldr	ip, [r1, #8]
   3d1fc:	add	r2, r2, #2
   3d200:	lsl	r2, r2, #1
   3d204:	cmp	r2, ip
   3d208:	bxge	lr
   3d20c:	ldr	ip, [r1, #4]
   3d210:	ldrh	r2, [ip, r2]
   3d214:	cmp	r2, #0
   3d218:	bxeq	lr
   3d21c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d220:	ldr	ip, [r1]
   3d224:	strd	r6, [sp, #8]
   3d228:	strd	r8, [sp, #16]
   3d22c:	str	sl, [sp, #24]
   3d230:	str	lr, [sp, #28]
   3d234:	adds	r7, ip, r2
   3d238:	beq	3d2e0 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3d23c:	ldr	r5, [ip, r2]
   3d240:	mov	r6, r3
   3d244:	mov	r9, r1
   3d248:	mov	r4, r0
   3d24c:	ldr	r3, [sp, #36]	; 0x24
   3d250:	add	r8, r7, r5
   3d254:	ldr	r2, [r7, r5]
   3d258:	mov	r1, r8
   3d25c:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3d260:	cmp	r0, #0
   3d264:	beq	3d2e0 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3d268:	ldr	r3, [r9, #16]
   3d26c:	add	r2, r3, #1
   3d270:	cmp	r3, #0
   3d274:	str	r2, [r9, #16]
   3d278:	bne	3d2f8 <flatcc_json_printer_struct_as_nested_root@@Base+0x100>
   3d27c:	mov	r1, r6
   3d280:	mov	r0, r4
   3d284:	ldr	r2, [sp, #32]
   3d288:	bl	31c58 <flatcc_json_parser_struct_as_root@@Base+0x23a4>
   3d28c:	ldr	r2, [r4, #20]
   3d290:	mov	r1, #123	; 0x7b
   3d294:	mov	r0, r4
   3d298:	ldr	r3, [r4, #32]
   3d29c:	add	ip, r2, #1
   3d2a0:	add	r3, r3, #1
   3d2a4:	str	ip, [r4, #20]
   3d2a8:	str	r3, [r4, #32]
   3d2ac:	strb	r1, [r2]
   3d2b0:	ldr	r1, [r7, r5]
   3d2b4:	ldr	r3, [sp, #40]	; 0x28
   3d2b8:	add	r1, r8, r1
   3d2bc:	blx	r3
   3d2c0:	ldrb	r3, [r4, #25]
   3d2c4:	cmp	r3, #0
   3d2c8:	ldr	r3, [r4, #20]
   3d2cc:	bne	3d310 <flatcc_json_printer_struct_as_nested_root@@Base+0x118>
   3d2d0:	add	r1, r3, #1
   3d2d4:	mov	r2, #125	; 0x7d
   3d2d8:	str	r1, [r4, #20]
   3d2dc:	strb	r2, [r3]
   3d2e0:	ldrd	r4, [sp]
   3d2e4:	ldrd	r6, [sp, #8]
   3d2e8:	ldrd	r8, [sp, #16]
   3d2ec:	ldr	sl, [sp, #24]
   3d2f0:	add	sp, sp, #28
   3d2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   3d2f8:	ldr	r3, [r4, #20]
   3d2fc:	mov	r2, #44	; 0x2c
   3d300:	add	r1, r3, #1
   3d304:	str	r1, [r4, #20]
   3d308:	strb	r2, [r3]
   3d30c:	b	3d27c <flatcc_json_printer_struct_as_nested_root@@Base+0x84>
   3d310:	add	r1, r3, #1
   3d314:	mov	r2, #10
   3d318:	str	r1, [r4, #20]
   3d31c:	strb	r2, [r3]
   3d320:	ldrb	r3, [r4, #25]
   3d324:	ldr	r2, [r4, #32]
   3d328:	ldr	r1, [r4, #16]
   3d32c:	ldr	r0, [r4, #20]
   3d330:	sub	r2, r2, #1
   3d334:	mul	r5, r2, r3
   3d338:	str	r2, [r4, #32]
   3d33c:	add	r3, r0, r5
   3d340:	cmp	r1, r3
   3d344:	bcs	3d35c <flatcc_json_printer_struct_as_nested_root@@Base+0x164>
   3d348:	mov	r1, r5
   3d34c:	mov	r0, r4
   3d350:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d354:	ldr	r3, [r4, #20]
   3d358:	b	3d2d0 <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>
   3d35c:	mov	r2, r5
   3d360:	mov	r1, #32
   3d364:	bl	14594 <memset@plt>
   3d368:	ldr	r3, [r4, #20]
   3d36c:	add	r3, r3, r5
   3d370:	b	3d2d0 <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>

0003d374 <flatcc_json_printer_table_as_nested_root@@Base>:
   3d374:	ldr	ip, [r1, #8]
   3d378:	add	r2, r2, #2
   3d37c:	lsl	r2, r2, #1
   3d380:	cmp	r2, ip
   3d384:	bxge	lr
   3d388:	ldr	ip, [r1, #4]
   3d38c:	ldrh	r2, [ip, r2]
   3d390:	cmp	r2, #0
   3d394:	bxeq	lr
   3d398:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3d39c:	ldr	ip, [r1]
   3d3a0:	strd	r6, [sp, #8]
   3d3a4:	str	lr, [sp, #24]
   3d3a8:	strd	r8, [sp, #16]
   3d3ac:	sub	sp, sp, #28
   3d3b0:	adds	lr, ip, r2
   3d3b4:	beq	3d540 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3d3b8:	ldr	r2, [ip, r2]
   3d3bc:	mov	r6, r3
   3d3c0:	mov	r5, r1
   3d3c4:	mov	r4, r0
   3d3c8:	ldr	r3, [sp, #60]	; 0x3c
   3d3cc:	add	r8, lr, r2
   3d3d0:	ldr	r2, [lr, r2]
   3d3d4:	add	r7, r8, #4
   3d3d8:	mov	r1, r7
   3d3dc:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1380>
   3d3e0:	cmp	r0, #0
   3d3e4:	beq	3d540 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3d3e8:	ldr	r2, [r5, #16]
   3d3ec:	ldr	r3, [r4, #20]
   3d3f0:	cmp	r2, #0
   3d3f4:	add	r2, r2, #1
   3d3f8:	str	r2, [r5, #16]
   3d3fc:	bne	3d570 <flatcc_json_printer_table_as_nested_root@@Base+0x1fc>
   3d400:	ldrb	r1, [r4, #25]
   3d404:	cmp	r1, #0
   3d408:	bne	3d590 <flatcc_json_printer_table_as_nested_root@@Base+0x21c>
   3d40c:	ldr	r2, [r4, #16]
   3d410:	cmp	r2, r3
   3d414:	bhi	3d428 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3d418:	mov	r0, r4
   3d41c:	ldr	r3, [r4, #44]	; 0x2c
   3d420:	blx	r3
   3d424:	ldr	r3, [r4, #20]
   3d428:	mov	r2, #34	; 0x22
   3d42c:	mov	r1, r6
   3d430:	strb	r2, [r3]
   3d434:	ldrb	r3, [r4, #26]
   3d438:	ldr	r2, [r4, #16]
   3d43c:	ldr	r0, [r4, #20]
   3d440:	cmp	r3, #0
   3d444:	addeq	r0, r0, #1
   3d448:	ldr	r3, [sp, #56]	; 0x38
   3d44c:	str	r0, [r4, #20]
   3d450:	add	r3, r0, r3
   3d454:	cmp	r2, r3
   3d458:	ldr	r2, [sp, #56]	; 0x38
   3d45c:	bhi	3d558 <flatcc_json_printer_table_as_nested_root@@Base+0x1e4>
   3d460:	mov	r0, r4
   3d464:	bl	30750 <flatcc_json_parser_struct_as_root@@Base+0xe9c>
   3d468:	ldr	r3, [r4, #20]
   3d46c:	mov	r2, #34	; 0x22
   3d470:	mov	r0, #58	; 0x3a
   3d474:	mov	r6, #32
   3d478:	strb	r2, [r3]
   3d47c:	ldrb	r3, [r4, #26]
   3d480:	ldr	r1, [r4, #20]
   3d484:	clz	r3, r3
   3d488:	lsr	r3, r3, #5
   3d48c:	add	r2, r1, r3
   3d490:	add	r2, r2, #1
   3d494:	str	r2, [r4, #20]
   3d498:	strb	r0, [r1, r3]
   3d49c:	ldr	r3, [r4, #20]
   3d4a0:	strb	r6, [r3]
   3d4a4:	ldrb	r3, [r4, #25]
   3d4a8:	ldr	ip, [r4, #20]
   3d4ac:	ldr	r1, [r5, #12]
   3d4b0:	adds	r3, r3, #0
   3d4b4:	movne	r3, #1
   3d4b8:	add	r2, ip, r3
   3d4bc:	subs	r0, r1, #1
   3d4c0:	str	r2, [r4, #20]
   3d4c4:	beq	3d5d4 <flatcc_json_printer_table_as_nested_root@@Base+0x260>
   3d4c8:	ldr	r1, [r4, #32]
   3d4cc:	add	r2, r2, #1
   3d4d0:	mov	r5, #0
   3d4d4:	ldr	lr, [r8, #4]
   3d4d8:	mov	r8, #123	; 0x7b
   3d4dc:	str	r2, [r4, #20]
   3d4e0:	add	r2, r1, #1
   3d4e4:	add	r1, sp, #4
   3d4e8:	str	r2, [r4, #32]
   3d4ec:	strb	r8, [ip, r3]
   3d4f0:	add	r3, r7, lr
   3d4f4:	str	r0, [sp, #16]
   3d4f8:	mov	r0, r4
   3d4fc:	str	r5, [sp, #20]
   3d500:	ldr	r2, [r7, lr]
   3d504:	str	r3, [sp, #4]
   3d508:	sub	r3, r3, r2
   3d50c:	ldrh	r2, [r3]
   3d510:	str	r3, [sp, #8]
   3d514:	ldr	r3, [sp, #64]	; 0x40
   3d518:	str	r2, [sp, #12]
   3d51c:	blx	r3
   3d520:	ldrb	r3, [r4, #25]
   3d524:	cmp	r3, r5
   3d528:	ldr	r3, [r4, #20]
   3d52c:	bne	3d5e8 <flatcc_json_printer_table_as_nested_root@@Base+0x274>
   3d530:	add	r1, r3, #1
   3d534:	mov	r2, #125	; 0x7d
   3d538:	str	r1, [r4, #20]
   3d53c:	strb	r2, [r3]
   3d540:	add	sp, sp, #28
   3d544:	ldrd	r4, [sp]
   3d548:	ldrd	r6, [sp, #8]
   3d54c:	ldrd	r8, [sp, #16]
   3d550:	add	sp, sp, #24
   3d554:	pop	{pc}		; (ldr pc, [sp], #4)
   3d558:	bl	1451c <memcpy@plt>
   3d55c:	ldr	r3, [r4, #20]
   3d560:	ldr	r2, [sp, #56]	; 0x38
   3d564:	add	r3, r3, r2
   3d568:	str	r3, [r4, #20]
   3d56c:	b	3d46c <flatcc_json_printer_table_as_nested_root@@Base+0xf8>
   3d570:	add	r1, r3, #1
   3d574:	mov	r2, #44	; 0x2c
   3d578:	str	r1, [r4, #20]
   3d57c:	strb	r2, [r3]
   3d580:	ldrb	r1, [r4, #25]
   3d584:	ldr	r3, [r4, #20]
   3d588:	cmp	r1, #0
   3d58c:	beq	3d40c <flatcc_json_printer_table_as_nested_root@@Base+0x98>
   3d590:	add	r1, r3, #1
   3d594:	mov	r2, #10
   3d598:	str	r1, [r4, #20]
   3d59c:	strb	r2, [r3]
   3d5a0:	ldrb	r3, [r4, #25]
   3d5a4:	ldr	r2, [r4, #16]
   3d5a8:	ldr	r9, [r4, #32]
   3d5ac:	ldr	r0, [r4, #20]
   3d5b0:	mul	r9, r9, r3
   3d5b4:	add	r3, r0, r9
   3d5b8:	cmp	r2, r3
   3d5bc:	bcs	3d634 <flatcc_json_printer_table_as_nested_root@@Base+0x2c0>
   3d5c0:	mov	r1, r9
   3d5c4:	mov	r0, r4
   3d5c8:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d5cc:	ldr	r3, [r4, #20]
   3d5d0:	b	3d428 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3d5d4:	ldr	r3, [r4, #36]	; 0x24
   3d5d8:	cmp	r3, #0
   3d5dc:	moveq	r3, #2
   3d5e0:	streq	r3, [r4, #36]	; 0x24
   3d5e4:	b	3d540 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   3d5e8:	add	r1, r3, #1
   3d5ec:	mov	r2, #10
   3d5f0:	str	r1, [r4, #20]
   3d5f4:	strb	r2, [r3]
   3d5f8:	ldrb	r3, [r4, #25]
   3d5fc:	ldr	r2, [r4, #32]
   3d600:	ldr	r1, [r4, #16]
   3d604:	ldr	r0, [r4, #20]
   3d608:	sub	r2, r2, #1
   3d60c:	mul	r5, r2, r3
   3d610:	str	r2, [r4, #32]
   3d614:	add	r3, r0, r5
   3d618:	cmp	r1, r3
   3d61c:	bcs	3d650 <flatcc_json_printer_table_as_nested_root@@Base+0x2dc>
   3d620:	mov	r1, r5
   3d624:	mov	r0, r4
   3d628:	bl	30814 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   3d62c:	ldr	r3, [r4, #20]
   3d630:	b	3d530 <flatcc_json_printer_table_as_nested_root@@Base+0x1bc>
   3d634:	mov	r2, r9
   3d638:	mov	r1, #32
   3d63c:	bl	14594 <memset@plt>
   3d640:	ldr	r3, [r4, #20]
   3d644:	add	r3, r3, r9
   3d648:	str	r3, [r4, #20]
   3d64c:	b	3d428 <flatcc_json_printer_table_as_nested_root@@Base+0xb4>
   3d650:	mov	r1, r6
   3d654:	mov	r2, r5
   3d658:	bl	14594 <memset@plt>
   3d65c:	ldr	r3, [r4, #20]
   3d660:	add	r3, r3, r5
   3d664:	b	3d530 <flatcc_json_printer_table_as_nested_root@@Base+0x1bc>

0003d668 <flatcc_json_printer_init@@Base>:
   3d668:	strd	r4, [sp, #-16]!
   3d66c:	mov	r2, #48	; 0x30
   3d670:	mov	r5, r1
   3d674:	str	r6, [sp, #8]
   3d678:	mov	r1, #0
   3d67c:	mov	r4, r0
   3d680:	ldr	r6, [pc, #128]	; 3d708 <flatcc_json_printer_init@@Base+0xa0>
   3d684:	str	lr, [sp, #12]
   3d688:	bl	14594 <memset@plt>
   3d68c:	cmp	r5, #0
   3d690:	add	r6, pc, r6
   3d694:	beq	3d6f0 <flatcc_json_printer_init@@Base+0x88>
   3d698:	ldr	r3, [pc, #108]	; 3d70c <flatcc_json_printer_init@@Base+0xa4>
   3d69c:	movw	r0, #16448	; 0x4040
   3d6a0:	str	r5, [r4, #40]	; 0x28
   3d6a4:	add	r3, pc, r3
   3d6a8:	str	r3, [r4, #44]	; 0x2c
   3d6ac:	bl	1454c <malloc@plt>
   3d6b0:	cmp	r0, #0
   3d6b4:	str	r0, [r4]
   3d6b8:	beq	3d700 <flatcc_json_printer_init@@Base+0x98>
   3d6bc:	add	ip, r0, #16384	; 0x4000
   3d6c0:	mov	r3, #1
   3d6c4:	movw	r1, #16448	; 0x4040
   3d6c8:	mov	r2, #16384	; 0x4000
   3d6cc:	str	r0, [r4, #20]
   3d6d0:	mov	r0, #0
   3d6d4:	stmib	r4, {r1, r2}
   3d6d8:	str	ip, [r4, #16]
   3d6dc:	strb	r3, [r4, #24]
   3d6e0:	ldrd	r4, [sp]
   3d6e4:	ldr	r6, [sp, #8]
   3d6e8:	add	sp, sp, #12
   3d6ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3d6f0:	ldr	r3, [pc, #24]	; 3d710 <flatcc_json_printer_init@@Base+0xa8>
   3d6f4:	ldr	r3, [r6, r3]
   3d6f8:	ldr	r5, [r3]
   3d6fc:	b	3d698 <flatcc_json_printer_init@@Base+0x30>
   3d700:	mvn	r0, #0
   3d704:	b	3d6e0 <flatcc_json_printer_init@@Base+0x78>
   3d708:	andeq	r6, r1, r8, ror #18
   3d70c:			; <UNDEFINED> instruction: 0xffff3290
   3d710:	andeq	r0, r0, r4, ror r0

0003d714 <flatcc_json_printer_init_buffer@@Base>:
   3d714:	cmp	r2, #63	; 0x3f
   3d718:	strd	r4, [sp, #-16]!
   3d71c:	str	r6, [sp, #8]
   3d720:	str	lr, [sp, #12]
   3d724:	bls	3d780 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3d728:	mov	r4, r0
   3d72c:	mov	r6, r1
   3d730:	mov	r5, r2
   3d734:	mov	r1, #0
   3d738:	mov	r2, #32
   3d73c:	add	r0, r0, #12
   3d740:	bl	14594 <memset@plt>
   3d744:	ldr	r3, [pc, #88]	; 3d7a4 <flatcc_json_printer_init_buffer@@Base+0x90>
   3d748:	sub	r2, r5, #64	; 0x40
   3d74c:	mov	r0, #0
   3d750:	add	r1, r6, r2
   3d754:	str	r6, [r4]
   3d758:	str	r5, [r4, #4]
   3d75c:	str	r2, [r4, #8]
   3d760:	str	r1, [r4, #16]
   3d764:	add	r3, pc, r3
   3d768:	str	r6, [r4, #20]
   3d76c:	ldr	r6, [sp, #8]
   3d770:	str	r3, [r4, #44]	; 0x2c
   3d774:	ldrd	r4, [sp]
   3d778:	add	sp, sp, #12
   3d77c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d780:	ldr	r3, [pc, #32]	; 3d7a8 <flatcc_json_printer_init_buffer@@Base+0x94>
   3d784:	movw	r2, #1165	; 0x48d
   3d788:	ldr	r1, [pc, #28]	; 3d7ac <flatcc_json_printer_init_buffer@@Base+0x98>
   3d78c:	ldr	r0, [pc, #28]	; 3d7b0 <flatcc_json_printer_init_buffer@@Base+0x9c>
   3d790:	add	r3, pc, r3
   3d794:	add	r3, r3, #1824	; 0x720
   3d798:	add	r1, pc, r1
   3d79c:	add	r0, pc, r0
   3d7a0:	bl	145e8 <__assert_fail@plt>
   3d7a4:			; <UNDEFINED> instruction: 0xffff2fa0
   3d7a8:	andeq	r5, r0, r0, lsr #15
   3d7ac:	strdeq	r5, [r0], -r4
   3d7b0:	andeq	r6, r0, r4, lsl r1

0003d7b4 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3d7b4:	cmp	r1, #0
   3d7b8:	strd	r4, [sp, #-16]!
   3d7bc:	mov	r4, r0
   3d7c0:	moveq	r5, #4096	; 0x1000
   3d7c4:	str	r6, [sp, #8]
   3d7c8:	moveq	r6, #4032	; 0xfc0
   3d7cc:	str	lr, [sp, #12]
   3d7d0:	beq	3d7e4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x30>
   3d7d4:	cmp	r1, #64	; 0x40
   3d7d8:	movcs	r5, r1
   3d7dc:	movcc	r5, #64	; 0x40
   3d7e0:	sub	r6, r5, #64	; 0x40
   3d7e4:	mov	r2, #32
   3d7e8:	mov	r1, #0
   3d7ec:	add	r0, r4, #12
   3d7f0:	bl	14594 <memset@plt>
   3d7f4:	mov	r0, r5
   3d7f8:	bl	1454c <malloc@plt>
   3d7fc:	ldr	r3, [pc, #84]	; 3d858 <flatcc_json_printer_init_dynamic_buffer@@Base+0xa4>
   3d800:	add	r1, r0, r6
   3d804:	mov	r2, #1
   3d808:	cmp	r0, #0
   3d80c:	stm	r4, {r0, r5, r6}
   3d810:	str	r1, [r4, #16]
   3d814:	add	r3, pc, r3
   3d818:	str	r0, [r4, #20]
   3d81c:	movne	r0, #0
   3d820:	strb	r2, [r4, #24]
   3d824:	str	r3, [r4, #44]	; 0x2c
   3d828:	beq	3d83c <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   3d82c:	ldrd	r4, [sp]
   3d830:	ldr	r6, [sp, #8]
   3d834:	add	sp, sp, #12
   3d838:	pop	{pc}		; (ldr pc, [sp], #4)
   3d83c:	ldr	r3, [r4, #36]	; 0x24
   3d840:	cmp	r3, #0
   3d844:	moveq	r3, #3
   3d848:	mvneq	r0, #0
   3d84c:	mvnne	r0, #0
   3d850:	streq	r3, [r4, #36]	; 0x24
   3d854:	b	3d82c <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>
   3d858:			; <UNDEFINED> instruction: 0xffff31d4

0003d85c <flatcc_json_printer_get_buffer@@Base>:
   3d85c:	strd	r4, [sp, #-16]!
   3d860:	mov	r5, r1
   3d864:	mov	r1, #0
   3d868:	ldr	r3, [r0, #44]	; 0x2c
   3d86c:	mov	r4, r0
   3d870:	str	r6, [sp, #8]
   3d874:	str	lr, [sp, #12]
   3d878:	blx	r3
   3d87c:	cmp	r5, #0
   3d880:	ldr	r0, [r4]
   3d884:	ldrne	r3, [r4, #20]
   3d888:	ldr	r6, [sp, #8]
   3d88c:	subne	r3, r3, r0
   3d890:	strne	r3, [r5]
   3d894:	ldrd	r4, [sp]
   3d898:	add	sp, sp, #12
   3d89c:	pop	{pc}		; (ldr pc, [sp], #4)

0003d8a0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3d8a0:	strd	r4, [sp, #-16]!
   3d8a4:	mov	r5, r0
   3d8a8:	str	r6, [sp, #8]
   3d8ac:	str	lr, [sp, #12]
   3d8b0:	bl	3d85c <flatcc_json_printer_get_buffer@@Base>
   3d8b4:	mov	r4, r0
   3d8b8:	mov	r2, #48	; 0x30
   3d8bc:	mov	r0, r5
   3d8c0:	mov	r1, #0
   3d8c4:	bl	14594 <memset@plt>
   3d8c8:	mov	r0, r4
   3d8cc:	ldrd	r4, [sp]
   3d8d0:	ldr	r6, [sp, #8]
   3d8d4:	add	sp, sp, #12
   3d8d8:	pop	{pc}		; (ldr pc, [sp], #4)

0003d8dc <flatcc_json_printer_clear@@Base>:
   3d8dc:	str	r4, [sp, #-8]!
   3d8e0:	mov	r4, r0
   3d8e4:	str	lr, [sp, #4]
   3d8e8:	ldrb	r3, [r0, #24]
   3d8ec:	cmp	r3, #0
   3d8f0:	beq	3d904 <flatcc_json_printer_clear@@Base+0x28>
   3d8f4:	ldr	r0, [r0]
   3d8f8:	cmp	r0, #0
   3d8fc:	beq	3d904 <flatcc_json_printer_clear@@Base+0x28>
   3d900:	bl	14510 <free@plt>
   3d904:	mov	r0, r4
   3d908:	mov	r2, #48	; 0x30
   3d90c:	ldr	r4, [sp]
   3d910:	mov	r1, #0
   3d914:	ldr	lr, [sp, #4]
   3d918:	add	sp, sp, #8
   3d91c:	b	14594 <memset@plt>
   3d920:	eor	r1, r1, #-2147483648	; 0x80000000
   3d924:	b	3d92c <flatcc_json_printer_clear@@Base+0x50>
   3d928:	eor	r3, r3, #-2147483648	; 0x80000000
   3d92c:	push	{r4, r5, lr}
   3d930:	lsl	r4, r1, #1
   3d934:	lsl	r5, r3, #1
   3d938:	teq	r4, r5
   3d93c:	teqeq	r0, r2
   3d940:	orrsne	ip, r4, r0
   3d944:	orrsne	ip, r5, r2
   3d948:	mvnsne	ip, r4, asr #21
   3d94c:	mvnsne	ip, r5, asr #21
   3d950:	beq	3db3c <flatcc_json_printer_clear@@Base+0x260>
   3d954:	lsr	r4, r4, #21
   3d958:	rsbs	r5, r4, r5, lsr #21
   3d95c:	rsblt	r5, r5, #0
   3d960:	ble	3d980 <flatcc_json_printer_clear@@Base+0xa4>
   3d964:	add	r4, r4, r5
   3d968:	eor	r2, r0, r2
   3d96c:	eor	r3, r1, r3
   3d970:	eor	r0, r2, r0
   3d974:	eor	r1, r3, r1
   3d978:	eor	r2, r0, r2
   3d97c:	eor	r3, r1, r3
   3d980:	cmp	r5, #54	; 0x36
   3d984:	pophi	{r4, r5, pc}
   3d988:	tst	r1, #-2147483648	; 0x80000000
   3d98c:	lsl	r1, r1, #12
   3d990:	mov	ip, #1048576	; 0x100000
   3d994:	orr	r1, ip, r1, lsr #12
   3d998:	beq	3d9a4 <flatcc_json_printer_clear@@Base+0xc8>
   3d99c:	rsbs	r0, r0, #0
   3d9a0:	rsc	r1, r1, #0
   3d9a4:	tst	r3, #-2147483648	; 0x80000000
   3d9a8:	lsl	r3, r3, #12
   3d9ac:	orr	r3, ip, r3, lsr #12
   3d9b0:	beq	3d9bc <flatcc_json_printer_clear@@Base+0xe0>
   3d9b4:	rsbs	r2, r2, #0
   3d9b8:	rsc	r3, r3, #0
   3d9bc:	teq	r4, r5
   3d9c0:	beq	3db24 <flatcc_json_printer_clear@@Base+0x248>
   3d9c4:	sub	r4, r4, #1
   3d9c8:	rsbs	lr, r5, #32
   3d9cc:	blt	3d9e8 <flatcc_json_printer_clear@@Base+0x10c>
   3d9d0:	lsl	ip, r2, lr
   3d9d4:	adds	r0, r0, r2, lsr r5
   3d9d8:	adc	r1, r1, #0
   3d9dc:	adds	r0, r0, r3, lsl lr
   3d9e0:	adcs	r1, r1, r3, asr r5
   3d9e4:	b	3da04 <flatcc_json_printer_clear@@Base+0x128>
   3d9e8:	sub	r5, r5, #32
   3d9ec:	add	lr, lr, #32
   3d9f0:	cmp	r2, #1
   3d9f4:	lsl	ip, r3, lr
   3d9f8:	orrcs	ip, ip, #2
   3d9fc:	adds	r0, r0, r3, asr r5
   3da00:	adcs	r1, r1, r3, asr #31
   3da04:	and	r5, r1, #-2147483648	; 0x80000000
   3da08:	bpl	3da18 <flatcc_json_printer_clear@@Base+0x13c>
   3da0c:	rsbs	ip, ip, #0
   3da10:	rscs	r0, r0, #0
   3da14:	rsc	r1, r1, #0
   3da18:	cmp	r1, #1048576	; 0x100000
   3da1c:	bcc	3da5c <flatcc_json_printer_clear@@Base+0x180>
   3da20:	cmp	r1, #2097152	; 0x200000
   3da24:	bcc	3da44 <flatcc_json_printer_clear@@Base+0x168>
   3da28:	lsrs	r1, r1, #1
   3da2c:	rrxs	r0, r0
   3da30:	rrx	ip, ip
   3da34:	add	r4, r4, #1
   3da38:	lsl	r2, r4, #21
   3da3c:	cmn	r2, #4194304	; 0x400000
   3da40:	bcs	3db9c <flatcc_json_printer_clear@@Base+0x2c0>
   3da44:	cmp	ip, #-2147483648	; 0x80000000
   3da48:	lsrseq	ip, r0, #1
   3da4c:	adcs	r0, r0, #0
   3da50:	adc	r1, r1, r4, lsl #20
   3da54:	orr	r1, r1, r5
   3da58:	pop	{r4, r5, pc}
   3da5c:	lsls	ip, ip, #1
   3da60:	adcs	r0, r0, r0
   3da64:	adc	r1, r1, r1
   3da68:	tst	r1, #1048576	; 0x100000
   3da6c:	sub	r4, r4, #1
   3da70:	bne	3da44 <flatcc_json_printer_clear@@Base+0x168>
   3da74:	teq	r1, #0
   3da78:	moveq	r1, r0
   3da7c:	moveq	r0, #0
   3da80:	clz	r3, r1
   3da84:	addeq	r3, r3, #32
   3da88:	sub	r3, r3, #11
   3da8c:	subs	r2, r3, #32
   3da90:	bge	3dab4 <flatcc_json_printer_clear@@Base+0x1d8>
   3da94:	adds	r2, r2, #12
   3da98:	ble	3dab0 <flatcc_json_printer_clear@@Base+0x1d4>
   3da9c:	add	ip, r2, #20
   3daa0:	rsb	r2, r2, #12
   3daa4:	lsl	r0, r1, ip
   3daa8:	lsr	r1, r1, r2
   3daac:	b	3dac4 <flatcc_json_printer_clear@@Base+0x1e8>
   3dab0:	add	r2, r2, #20
   3dab4:	rsble	ip, r2, #32
   3dab8:	lsl	r1, r1, r2
   3dabc:	orrle	r1, r1, r0, lsr ip
   3dac0:	lslle	r0, r0, r2
   3dac4:	subs	r4, r4, r3
   3dac8:	addge	r1, r1, r4, lsl #20
   3dacc:	orrge	r1, r1, r5
   3dad0:	popge	{r4, r5, pc}
   3dad4:	mvn	r4, r4
   3dad8:	subs	r4, r4, #31
   3dadc:	bge	3db18 <flatcc_json_printer_clear@@Base+0x23c>
   3dae0:	adds	r4, r4, #12
   3dae4:	bgt	3db00 <flatcc_json_printer_clear@@Base+0x224>
   3dae8:	add	r4, r4, #20
   3daec:	rsb	r2, r4, #32
   3daf0:	lsr	r0, r0, r4
   3daf4:	orr	r0, r0, r1, lsl r2
   3daf8:	orr	r1, r5, r1, lsr r4
   3dafc:	pop	{r4, r5, pc}
   3db00:	rsb	r4, r4, #12
   3db04:	rsb	r2, r4, #32
   3db08:	lsr	r0, r0, r2
   3db0c:	orr	r0, r0, r1, lsl r4
   3db10:	mov	r1, r5
   3db14:	pop	{r4, r5, pc}
   3db18:	lsr	r0, r1, r4
   3db1c:	mov	r1, r5
   3db20:	pop	{r4, r5, pc}
   3db24:	teq	r4, #0
   3db28:	eor	r3, r3, #1048576	; 0x100000
   3db2c:	eoreq	r1, r1, #1048576	; 0x100000
   3db30:	addeq	r4, r4, #1
   3db34:	subne	r5, r5, #1
   3db38:	b	3d9c4 <flatcc_json_printer_clear@@Base+0xe8>
   3db3c:	mvns	ip, r4, asr #21
   3db40:	mvnsne	ip, r5, asr #21
   3db44:	beq	3dbac <flatcc_json_printer_clear@@Base+0x2d0>
   3db48:	teq	r4, r5
   3db4c:	teqeq	r0, r2
   3db50:	beq	3db64 <flatcc_json_printer_clear@@Base+0x288>
   3db54:	orrs	ip, r4, r0
   3db58:	moveq	r1, r3
   3db5c:	moveq	r0, r2
   3db60:	pop	{r4, r5, pc}
   3db64:	teq	r1, r3
   3db68:	movne	r1, #0
   3db6c:	movne	r0, #0
   3db70:	popne	{r4, r5, pc}
   3db74:	lsrs	ip, r4, #21
   3db78:	bne	3db8c <flatcc_json_printer_clear@@Base+0x2b0>
   3db7c:	lsls	r0, r0, #1
   3db80:	adcs	r1, r1, r1
   3db84:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3db88:	pop	{r4, r5, pc}
   3db8c:	adds	r4, r4, #4194304	; 0x400000
   3db90:	addcc	r1, r1, #1048576	; 0x100000
   3db94:	popcc	{r4, r5, pc}
   3db98:	and	r5, r1, #-2147483648	; 0x80000000
   3db9c:	orr	r1, r5, #2130706432	; 0x7f000000
   3dba0:	orr	r1, r1, #15728640	; 0xf00000
   3dba4:	mov	r0, #0
   3dba8:	pop	{r4, r5, pc}
   3dbac:	mvns	ip, r4, asr #21
   3dbb0:	movne	r1, r3
   3dbb4:	movne	r0, r2
   3dbb8:	mvnseq	ip, r5, asr #21
   3dbbc:	movne	r3, r1
   3dbc0:	movne	r2, r0
   3dbc4:	orrs	r4, r0, r1, lsl #12
   3dbc8:	orrseq	r5, r2, r3, lsl #12
   3dbcc:	teqeq	r1, r3
   3dbd0:	orrne	r1, r1, #524288	; 0x80000
   3dbd4:	pop	{r4, r5, pc}
   3dbd8:	teq	r0, #0
   3dbdc:	moveq	r1, #0
   3dbe0:	bxeq	lr
   3dbe4:	push	{r4, r5, lr}
   3dbe8:	mov	r4, #1024	; 0x400
   3dbec:	add	r4, r4, #50	; 0x32
   3dbf0:	mov	r5, #0
   3dbf4:	mov	r1, #0
   3dbf8:	b	3da74 <flatcc_json_printer_clear@@Base+0x198>
   3dbfc:	teq	r0, #0
   3dc00:	moveq	r1, #0
   3dc04:	bxeq	lr
   3dc08:	push	{r4, r5, lr}
   3dc0c:	mov	r4, #1024	; 0x400
   3dc10:	add	r4, r4, #50	; 0x32
   3dc14:	ands	r5, r0, #-2147483648	; 0x80000000
   3dc18:	rsbmi	r0, r0, #0
   3dc1c:	mov	r1, #0
   3dc20:	b	3da74 <flatcc_json_printer_clear@@Base+0x198>
   3dc24:	lsls	r2, r0, #1
   3dc28:	asr	r1, r2, #3
   3dc2c:	rrx	r1, r1
   3dc30:	lsl	r0, r2, #28
   3dc34:	andsne	r3, r2, #-16777216	; 0xff000000
   3dc38:	teqne	r3, #-16777216	; 0xff000000
   3dc3c:	eorne	r1, r1, #939524096	; 0x38000000
   3dc40:	bxne	lr
   3dc44:	bics	r2, r2, #-16777216	; 0xff000000
   3dc48:	bxeq	lr
   3dc4c:	teq	r3, #-16777216	; 0xff000000
   3dc50:	orreq	r1, r1, #524288	; 0x80000
   3dc54:	bxeq	lr
   3dc58:	push	{r4, r5, lr}
   3dc5c:	mov	r4, #896	; 0x380
   3dc60:	and	r5, r1, #-2147483648	; 0x80000000
   3dc64:	bic	r1, r1, #-2147483648	; 0x80000000
   3dc68:	b	3da74 <flatcc_json_printer_clear@@Base+0x198>
   3dc6c:	orrs	r2, r0, r1
   3dc70:	bxeq	lr
   3dc74:	push	{r4, r5, lr}
   3dc78:	mov	r5, #0
   3dc7c:	b	3dc9c <flatcc_json_printer_clear@@Base+0x3c0>
   3dc80:	orrs	r2, r0, r1
   3dc84:	bxeq	lr
   3dc88:	push	{r4, r5, lr}
   3dc8c:	ands	r5, r1, #-2147483648	; 0x80000000
   3dc90:	bpl	3dc9c <flatcc_json_printer_clear@@Base+0x3c0>
   3dc94:	rsbs	r0, r0, #0
   3dc98:	rsc	r1, r1, #0
   3dc9c:	mov	r4, #1024	; 0x400
   3dca0:	add	r4, r4, #50	; 0x32
   3dca4:	lsrs	ip, r1, #22
   3dca8:	beq	3da18 <flatcc_json_printer_clear@@Base+0x13c>
   3dcac:	mov	r2, #3
   3dcb0:	lsrs	ip, ip, #3
   3dcb4:	addne	r2, r2, #3
   3dcb8:	lsrs	ip, ip, #3
   3dcbc:	addne	r2, r2, #3
   3dcc0:	add	r2, r2, ip, lsr #3
   3dcc4:	rsb	r3, r2, #32
   3dcc8:	lsl	ip, r0, r3
   3dccc:	lsr	r0, r0, r2
   3dcd0:	orr	r0, r0, r1, lsl r3
   3dcd4:	lsr	r1, r1, r2
   3dcd8:	add	r4, r4, r2
   3dcdc:	b	3da18 <flatcc_json_printer_clear@@Base+0x13c>
   3dce0:	eor	r0, r0, #-2147483648	; 0x80000000
   3dce4:	b	3dcec <flatcc_json_printer_clear@@Base+0x410>
   3dce8:	eor	r1, r1, #-2147483648	; 0x80000000
   3dcec:	lsls	r2, r0, #1
   3dcf0:	lslsne	r3, r1, #1
   3dcf4:	teqne	r2, r3
   3dcf8:	mvnsne	ip, r2, asr #24
   3dcfc:	mvnsne	ip, r3, asr #24
   3dd00:	beq	3ddf8 <flatcc_json_printer_clear@@Base+0x51c>
   3dd04:	lsr	r2, r2, #24
   3dd08:	rsbs	r3, r2, r3, lsr #24
   3dd0c:	addgt	r2, r2, r3
   3dd10:	eorgt	r1, r0, r1
   3dd14:	eorgt	r0, r1, r0
   3dd18:	eorgt	r1, r0, r1
   3dd1c:	rsblt	r3, r3, #0
   3dd20:	cmp	r3, #25
   3dd24:	bxhi	lr
   3dd28:	tst	r0, #-2147483648	; 0x80000000
   3dd2c:	orr	r0, r0, #8388608	; 0x800000
   3dd30:	bic	r0, r0, #-16777216	; 0xff000000
   3dd34:	rsbne	r0, r0, #0
   3dd38:	tst	r1, #-2147483648	; 0x80000000
   3dd3c:	orr	r1, r1, #8388608	; 0x800000
   3dd40:	bic	r1, r1, #-16777216	; 0xff000000
   3dd44:	rsbne	r1, r1, #0
   3dd48:	teq	r2, r3
   3dd4c:	beq	3dde0 <flatcc_json_printer_clear@@Base+0x504>
   3dd50:	sub	r2, r2, #1
   3dd54:	adds	r0, r0, r1, asr r3
   3dd58:	rsb	r3, r3, #32
   3dd5c:	lsl	r1, r1, r3
   3dd60:	and	r3, r0, #-2147483648	; 0x80000000
   3dd64:	bpl	3dd70 <flatcc_json_printer_clear@@Base+0x494>
   3dd68:	rsbs	r1, r1, #0
   3dd6c:	rsc	r0, r0, #0
   3dd70:	cmp	r0, #8388608	; 0x800000
   3dd74:	bcc	3dda8 <flatcc_json_printer_clear@@Base+0x4cc>
   3dd78:	cmp	r0, #16777216	; 0x1000000
   3dd7c:	bcc	3dd94 <flatcc_json_printer_clear@@Base+0x4b8>
   3dd80:	lsrs	r0, r0, #1
   3dd84:	rrx	r1, r1
   3dd88:	add	r2, r2, #1
   3dd8c:	cmp	r2, #254	; 0xfe
   3dd90:	bcs	3de4c <flatcc_json_printer_clear@@Base+0x570>
   3dd94:	cmp	r1, #-2147483648	; 0x80000000
   3dd98:	adc	r0, r0, r2, lsl #23
   3dd9c:	biceq	r0, r0, #1
   3dda0:	orr	r0, r0, r3
   3dda4:	bx	lr
   3dda8:	lsls	r1, r1, #1
   3ddac:	adc	r0, r0, r0
   3ddb0:	tst	r0, #8388608	; 0x800000
   3ddb4:	sub	r2, r2, #1
   3ddb8:	bne	3dd94 <flatcc_json_printer_clear@@Base+0x4b8>
   3ddbc:	clz	ip, r0
   3ddc0:	sub	ip, ip, #8
   3ddc4:	subs	r2, r2, ip
   3ddc8:	lsl	r0, r0, ip
   3ddcc:	addge	r0, r0, r2, lsl #23
   3ddd0:	rsblt	r2, r2, #0
   3ddd4:	orrge	r0, r0, r3
   3ddd8:	orrlt	r0, r3, r0, lsr r2
   3dddc:	bx	lr
   3dde0:	teq	r2, #0
   3dde4:	eor	r1, r1, #8388608	; 0x800000
   3dde8:	eoreq	r0, r0, #8388608	; 0x800000
   3ddec:	addeq	r2, r2, #1
   3ddf0:	subne	r3, r3, #1
   3ddf4:	b	3dd50 <flatcc_json_printer_clear@@Base+0x474>
   3ddf8:	lsl	r3, r1, #1
   3ddfc:	mvns	ip, r2, asr #24
   3de00:	mvnsne	ip, r3, asr #24
   3de04:	beq	3de58 <flatcc_json_printer_clear@@Base+0x57c>
   3de08:	teq	r2, r3
   3de0c:	beq	3de1c <flatcc_json_printer_clear@@Base+0x540>
   3de10:	teq	r2, #0
   3de14:	moveq	r0, r1
   3de18:	bx	lr
   3de1c:	teq	r0, r1
   3de20:	movne	r0, #0
   3de24:	bxne	lr
   3de28:	tst	r2, #-16777216	; 0xff000000
   3de2c:	bne	3de3c <flatcc_json_printer_clear@@Base+0x560>
   3de30:	lsls	r0, r0, #1
   3de34:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3de38:	bx	lr
   3de3c:	adds	r2, r2, #33554432	; 0x2000000
   3de40:	addcc	r0, r0, #8388608	; 0x800000
   3de44:	bxcc	lr
   3de48:	and	r3, r0, #-2147483648	; 0x80000000
   3de4c:	orr	r0, r3, #2130706432	; 0x7f000000
   3de50:	orr	r0, r0, #8388608	; 0x800000
   3de54:	bx	lr
   3de58:	mvns	r2, r2, asr #24
   3de5c:	movne	r0, r1
   3de60:	mvnseq	r3, r3, asr #24
   3de64:	movne	r1, r0
   3de68:	lsls	r2, r0, #9
   3de6c:	lslseq	r3, r1, #9
   3de70:	teqeq	r0, r1
   3de74:	orrne	r0, r0, #4194304	; 0x400000
   3de78:	bx	lr
   3de7c:	mov	r3, #0
   3de80:	b	3de8c <flatcc_json_printer_clear@@Base+0x5b0>
   3de84:	ands	r3, r0, #-2147483648	; 0x80000000
   3de88:	rsbmi	r0, r0, #0
   3de8c:	movs	ip, r0
   3de90:	bxeq	lr
   3de94:	orr	r3, r3, #1258291200	; 0x4b000000
   3de98:	mov	r1, r0
   3de9c:	mov	r0, #0
   3dea0:	b	3dee4 <flatcc_json_printer_clear@@Base+0x608>
   3dea4:	orrs	r2, r0, r1
   3dea8:	bxeq	lr
   3deac:	mov	r3, #0
   3deb0:	b	3decc <flatcc_json_printer_clear@@Base+0x5f0>
   3deb4:	orrs	r2, r0, r1
   3deb8:	bxeq	lr
   3debc:	ands	r3, r1, #-2147483648	; 0x80000000
   3dec0:	bpl	3decc <flatcc_json_printer_clear@@Base+0x5f0>
   3dec4:	rsbs	r0, r0, #0
   3dec8:	rsc	r1, r1, #0
   3decc:	movs	ip, r1
   3ded0:	moveq	ip, r0
   3ded4:	moveq	r1, r0
   3ded8:	moveq	r0, #0
   3dedc:	orr	r3, r3, #1526726656	; 0x5b000000
   3dee0:	subeq	r3, r3, #268435456	; 0x10000000
   3dee4:	sub	r3, r3, #8388608	; 0x800000
   3dee8:	clz	r2, ip
   3deec:	subs	r2, r2, #8
   3def0:	sub	r3, r3, r2, lsl #23
   3def4:	blt	3df14 <flatcc_json_printer_clear@@Base+0x638>
   3def8:	add	r3, r3, r1, lsl r2
   3defc:	lsl	ip, r0, r2
   3df00:	rsb	r2, r2, #32
   3df04:	cmp	ip, #-2147483648	; 0x80000000
   3df08:	adc	r0, r3, r0, lsr r2
   3df0c:	biceq	r0, r0, #1
   3df10:	bx	lr
   3df14:	add	r2, r2, #32
   3df18:	lsl	ip, r1, r2
   3df1c:	rsb	r2, r2, #32
   3df20:	orrs	r0, r0, ip, lsl #1
   3df24:	adc	r0, r3, r1, lsr r2
   3df28:	biceq	r0, r0, ip, lsr #31
   3df2c:	bx	lr
   3df30:	cmp	r3, #0
   3df34:	cmpeq	r2, #0
   3df38:	bne	3df5c <flatcc_json_printer_clear@@Base+0x680>
   3df3c:	cmp	r1, #0
   3df40:	movlt	r1, #-2147483648	; 0x80000000
   3df44:	movlt	r0, #0
   3df48:	blt	3df58 <flatcc_json_printer_clear@@Base+0x67c>
   3df4c:	cmpeq	r0, #0
   3df50:	mvnne	r1, #-2147483648	; 0x80000000
   3df54:	mvnne	r0, #0
   3df58:	b	3e040 <flatcc_json_printer_clear@@Base+0x764>
   3df5c:	sub	sp, sp, #8
   3df60:	push	{sp, lr}
   3df64:	cmp	r1, #0
   3df68:	blt	3df88 <flatcc_json_printer_clear@@Base+0x6ac>
   3df6c:	cmp	r3, #0
   3df70:	blt	3dfbc <flatcc_json_printer_clear@@Base+0x6e0>
   3df74:	bl	3e050 <flatcc_json_printer_clear@@Base+0x774>
   3df78:	ldr	lr, [sp, #4]
   3df7c:	add	sp, sp, #8
   3df80:	pop	{r2, r3}
   3df84:	bx	lr
   3df88:	rsbs	r0, r0, #0
   3df8c:	sbc	r1, r1, r1, lsl #1
   3df90:	cmp	r3, #0
   3df94:	blt	3dfe0 <flatcc_json_printer_clear@@Base+0x704>
   3df98:	bl	3e050 <flatcc_json_printer_clear@@Base+0x774>
   3df9c:	ldr	lr, [sp, #4]
   3dfa0:	add	sp, sp, #8
   3dfa4:	pop	{r2, r3}
   3dfa8:	rsbs	r0, r0, #0
   3dfac:	sbc	r1, r1, r1, lsl #1
   3dfb0:	rsbs	r2, r2, #0
   3dfb4:	sbc	r3, r3, r3, lsl #1
   3dfb8:	bx	lr
   3dfbc:	rsbs	r2, r2, #0
   3dfc0:	sbc	r3, r3, r3, lsl #1
   3dfc4:	bl	3e050 <flatcc_json_printer_clear@@Base+0x774>
   3dfc8:	ldr	lr, [sp, #4]
   3dfcc:	add	sp, sp, #8
   3dfd0:	pop	{r2, r3}
   3dfd4:	rsbs	r0, r0, #0
   3dfd8:	sbc	r1, r1, r1, lsl #1
   3dfdc:	bx	lr
   3dfe0:	rsbs	r2, r2, #0
   3dfe4:	sbc	r3, r3, r3, lsl #1
   3dfe8:	bl	3e050 <flatcc_json_printer_clear@@Base+0x774>
   3dfec:	ldr	lr, [sp, #4]
   3dff0:	add	sp, sp, #8
   3dff4:	pop	{r2, r3}
   3dff8:	rsbs	r2, r2, #0
   3dffc:	sbc	r3, r3, r3, lsl #1
   3e000:	bx	lr
   3e004:	cmp	r3, #0
   3e008:	cmpeq	r2, #0
   3e00c:	bne	3e024 <flatcc_json_printer_clear@@Base+0x748>
   3e010:	cmp	r1, #0
   3e014:	cmpeq	r0, #0
   3e018:	mvnne	r1, #0
   3e01c:	mvnne	r0, #0
   3e020:	b	3e040 <flatcc_json_printer_clear@@Base+0x764>
   3e024:	sub	sp, sp, #8
   3e028:	push	{sp, lr}
   3e02c:	bl	3e050 <flatcc_json_printer_clear@@Base+0x774>
   3e030:	ldr	lr, [sp, #4]
   3e034:	add	sp, sp, #8
   3e038:	pop	{r2, r3}
   3e03c:	bx	lr
   3e040:	push	{r1, lr}
   3e044:	mov	r0, #8
   3e048:	bl	144ec <raise@plt>
   3e04c:	pop	{r1, pc}
   3e050:	cmp	r1, r3
   3e054:	cmpeq	r0, r2
   3e058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e05c:	mov	r4, r0
   3e060:	movcc	r0, #0
   3e064:	mov	r5, r1
   3e068:	ldr	lr, [sp, #36]	; 0x24
   3e06c:	movcc	r1, r0
   3e070:	bcc	3e16c <flatcc_json_printer_clear@@Base+0x890>
   3e074:	cmp	r3, #0
   3e078:	clzeq	ip, r2
   3e07c:	clzne	ip, r3
   3e080:	addeq	ip, ip, #32
   3e084:	cmp	r5, #0
   3e088:	clzeq	r1, r4
   3e08c:	addeq	r1, r1, #32
   3e090:	clzne	r1, r5
   3e094:	sub	ip, ip, r1
   3e098:	sub	sl, ip, #32
   3e09c:	lsl	r9, r3, ip
   3e0a0:	rsb	fp, ip, #32
   3e0a4:	orr	r9, r9, r2, lsl sl
   3e0a8:	orr	r9, r9, r2, lsr fp
   3e0ac:	lsl	r8, r2, ip
   3e0b0:	cmp	r5, r9
   3e0b4:	cmpeq	r4, r8
   3e0b8:	movcc	r0, #0
   3e0bc:	movcc	r1, r0
   3e0c0:	bcc	3e0dc <flatcc_json_printer_clear@@Base+0x800>
   3e0c4:	mov	r0, #1
   3e0c8:	subs	r4, r4, r8
   3e0cc:	lsl	r1, r0, sl
   3e0d0:	orr	r1, r1, r0, lsr fp
   3e0d4:	lsl	r0, r0, ip
   3e0d8:	sbc	r5, r5, r9
   3e0dc:	cmp	ip, #0
   3e0e0:	beq	3e16c <flatcc_json_printer_clear@@Base+0x890>
   3e0e4:	lsr	r6, r8, #1
   3e0e8:	orr	r6, r6, r9, lsl #31
   3e0ec:	lsr	r7, r9, #1
   3e0f0:	mov	r2, ip
   3e0f4:	b	3e118 <flatcc_json_printer_clear@@Base+0x83c>
   3e0f8:	subs	r3, r4, r6
   3e0fc:	sbc	r8, r5, r7
   3e100:	adds	r3, r3, r3
   3e104:	adc	r8, r8, r8
   3e108:	adds	r4, r3, #1
   3e10c:	adc	r5, r8, #0
   3e110:	subs	r2, r2, #1
   3e114:	beq	3e134 <flatcc_json_printer_clear@@Base+0x858>
   3e118:	cmp	r5, r7
   3e11c:	cmpeq	r4, r6
   3e120:	bcs	3e0f8 <flatcc_json_printer_clear@@Base+0x81c>
   3e124:	adds	r4, r4, r4
   3e128:	adc	r5, r5, r5
   3e12c:	subs	r2, r2, #1
   3e130:	bne	3e118 <flatcc_json_printer_clear@@Base+0x83c>
   3e134:	lsr	r3, r4, ip
   3e138:	orr	r3, r3, r5, lsl fp
   3e13c:	lsr	r2, r5, ip
   3e140:	orr	r3, r3, r5, lsr sl
   3e144:	adds	r0, r0, r4
   3e148:	mov	r4, r3
   3e14c:	lsl	r3, r2, ip
   3e150:	orr	r3, r3, r4, lsl sl
   3e154:	lsl	ip, r4, ip
   3e158:	orr	r3, r3, r4, lsr fp
   3e15c:	adc	r1, r1, r5
   3e160:	subs	r0, r0, ip
   3e164:	mov	r5, r2
   3e168:	sbc	r1, r1, r3
   3e16c:	cmp	lr, #0
   3e170:	strdne	r4, [lr]
   3e174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003e178 <__libc_csu_init@@Base>:
   3e178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e17c:	mov	r7, r0
   3e180:	ldr	r6, [pc, #72]	; 3e1d0 <__libc_csu_init@@Base+0x58>
   3e184:	ldr	r5, [pc, #72]	; 3e1d4 <__libc_csu_init@@Base+0x5c>
   3e188:	add	r6, pc, r6
   3e18c:	add	r5, pc, r5
   3e190:	sub	r6, r6, r5
   3e194:	mov	r8, r1
   3e198:	mov	r9, r2
   3e19c:	bl	144cc <raise@plt-0x20>
   3e1a0:	asrs	r6, r6, #2
   3e1a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e1a8:	mov	r4, #0
   3e1ac:	add	r4, r4, #1
   3e1b0:	ldr	r3, [r5], #4
   3e1b4:	mov	r2, r9
   3e1b8:	mov	r1, r8
   3e1bc:	mov	r0, r7
   3e1c0:	blx	r3
   3e1c4:	cmp	r6, r4
   3e1c8:	bne	3e1ac <__libc_csu_init@@Base+0x34>
   3e1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e1d0:	andeq	r5, r1, r4, asr sp
   3e1d4:	andeq	r5, r1, ip, asr #26

0003e1d8 <__libc_csu_fini@@Base>:
   3e1d8:	bx	lr

Disassembly of section .fini:

0003e1dc <.fini>:
   3e1dc:	push	{r3, lr}
   3e1e0:	pop	{r3, pc}
