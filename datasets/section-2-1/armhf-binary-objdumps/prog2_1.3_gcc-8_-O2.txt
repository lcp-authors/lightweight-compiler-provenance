
../repos/prog2/1.3:     file format elf32-littlearm


Disassembly of section .init:

000105e8 <.init>:
   105e8:	push	{r3, lr}
   105ec:	bl	1087c <_start@@Base+0x3c>
   105f0:	pop	{r3, pc}

Disassembly of section .plt:

000105f4 <printf@plt-0x14>:
   105f4:	push	{lr}		; (str lr, [sp, #-4]!)
   105f8:	ldr	lr, [pc, #4]	; 10604 <printf@plt-0x4>
   105fc:	add	lr, pc, lr
   10600:	ldr	pc, [lr, #8]!
   10604:	strdeq	r0, [r1], -ip

00010608 <printf@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2556]!	; 0x9fc

00010614 <fopen@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010620 <strcpy@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2540]!	; 0x9ec

0001062c <__libc_start_main@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2532]!	; 0x9e4

00010638 <__gmon_start__@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2524]!	; 0x9dc

00010644 <fclose@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010650 <fseek@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2508]!	; 0x9cc

0001065c <abort@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2500]!	; 0x9c4

00010668 <getc@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2492]!	; 0x9bc

Disassembly of section .text:

00010674 <main@@Base>:
   10674:	ldr	r1, [pc, #440]	; 10834 <main@@Base+0x1c0>
   10678:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1067c:	ldr	r0, [pc, #436]	; 10838 <main@@Base+0x1c4>
   10680:	strd	r6, [sp, #8]
   10684:	strd	r8, [sp, #16]
   10688:	ldr	r8, [pc, #428]	; 1083c <main@@Base+0x1c8>
   1068c:	add	r1, pc, r1
   10690:	strd	sl, [sp, #24]
   10694:	str	lr, [sp, #32]
   10698:	sub	sp, sp, #2256	; 0x8d0
   1069c:	add	r0, pc, r0
   106a0:	sub	sp, sp, #12
   106a4:	add	r5, sp, #24
   106a8:	add	r6, sp, #416	; 0x1a0
   106ac:	bl	10614 <fopen@plt>
   106b0:	add	r8, pc, r8
   106b4:	add	r6, r6, #1
   106b8:	sub	r7, r5, #12
   106bc:	mov	r4, r0
   106c0:	b	106cc <main@@Base+0x58>
   106c4:	cmp	r0, #60	; 0x3c
   106c8:	beq	10708 <main@@Base+0x94>
   106cc:	mov	r0, r4
   106d0:	bl	10668 <getc@plt>
   106d4:	cmn	r0, #1
   106d8:	bne	106c4 <main@@Base+0x50>
   106dc:	mov	r0, r4
   106e0:	bl	10644 <fclose@plt>
   106e4:	mov	r0, #0
   106e8:	add	sp, sp, #2256	; 0x8d0
   106ec:	add	sp, sp, #12
   106f0:	ldrd	r4, [sp]
   106f4:	ldrd	r6, [sp, #8]
   106f8:	ldrd	r8, [sp, #16]
   106fc:	ldrd	sl, [sp, #24]
   10700:	add	sp, sp, #32
   10704:	pop	{pc}		; (ldr pc, [sp], #4)
   10708:	mov	r0, r4
   1070c:	bl	10668 <getc@plt>
   10710:	cmp	r0, #97	; 0x61
   10714:	bne	106cc <main@@Base+0x58>
   10718:	mov	r1, #200	; 0xc8
   1071c:	mov	r0, r7
   10720:	bl	10930 <esvaziastring@@Base>
   10724:	mov	r2, #1
   10728:	mov	r1, #7
   1072c:	mov	r0, r4
   10730:	sub	sl, r5, #13
   10734:	bl	10650 <fseek@plt>
   10738:	mov	r9, #0
   1073c:	b	10748 <main@@Base+0xd4>
   10740:	add	r9, r9, #1
   10744:	strb	r0, [sl, #1]!
   10748:	mov	r0, r4
   1074c:	bl	10668 <getc@plt>
   10750:	cmp	r0, #34	; 0x22
   10754:	bne	10740 <main@@Base+0xcc>
   10758:	add	r3, sp, #2256	; 0x8d0
   1075c:	sub	r2, r6, #205	; 0xcd
   10760:	add	r3, r3, #8
   10764:	mov	r0, r2
   10768:	add	r9, r3, r9
   1076c:	mov	r3, #0
   10770:	str	r2, [sp, #4]
   10774:	mov	r1, r7
   10778:	mov	fp, r3
   1077c:	strb	r3, [r9, #-2252]	; 0xfffff734
   10780:	mvn	sl, #60	; 0x3c
   10784:	mvn	r9, #94	; 0x5e
   10788:	bl	10620 <strcpy@plt>
   1078c:	mov	r1, #200	; 0xc8
   10790:	mov	r0, r7
   10794:	bl	10930 <esvaziastring@@Base>
   10798:	mov	r2, #1
   1079c:	mov	r0, r4
   107a0:	mov	r1, r2
   107a4:	bl	10650 <fseek@plt>
   107a8:	mov	r0, r4
   107ac:	bl	10668 <getc@plt>
   107b0:	add	r3, sp, #2256	; 0x8d0
   107b4:	cmp	r0, #60	; 0x3c
   107b8:	add	r3, r3, #8
   107bc:	add	r2, fp, #1
   107c0:	add	r1, r3, fp
   107c4:	beq	107ec <main@@Base+0x178>
   107c8:	cmp	r0, #225	; 0xe1
   107cc:	movne	fp, r2
   107d0:	strbne	r0, [r1, #-2252]	; 0xfffff734
   107d4:	bne	107a8 <main@@Base+0x134>
   107d8:	add	r2, r3, r2
   107dc:	add	fp, fp, #2
   107e0:	strb	sl, [r1, #-2252]	; 0xfffff734
   107e4:	strb	r9, [r2, #-2252]	; 0xfffff734
   107e8:	b	107a8 <main@@Base+0x134>
   107ec:	add	r3, sp, #2256	; 0x8d0
   107f0:	mov	r2, #0
   107f4:	add	r3, r3, #8
   107f8:	mov	r1, r7
   107fc:	add	r3, r3, fp
   10800:	mov	r0, r6
   10804:	strb	r2, [r3, #-2252]	; 0xfffff734
   10808:	bl	10620 <strcpy@plt>
   1080c:	mov	r0, r7
   10810:	mov	r1, #80	; 0x50
   10814:	bl	10930 <esvaziastring@@Base>
   10818:	mov	r1, r6
   1081c:	mov	r0, r8
   10820:	ldr	r2, [sp, #4]
   10824:	add	r6, r6, #408	; 0x198
   10828:	add	r6, r6, #2
   1082c:	bl	10608 <printf@plt>
   10830:	b	106cc <main@@Base+0x58>
   10834:	andeq	r0, r0, r0, lsr r3
   10838:	andeq	r0, r0, r4, lsr #6
   1083c:	andeq	r0, r0, r8, lsr #6

00010840 <_start@@Base>:
   10840:	mov	fp, #0
   10844:	mov	lr, #0
   10848:	pop	{r1}		; (ldr r1, [sp], #4)
   1084c:	mov	r2, sp
   10850:	push	{r2}		; (str r2, [sp, #-4]!)
   10854:	push	{r0}		; (str r0, [sp, #-4]!)
   10858:	ldr	ip, [pc, #16]	; 10870 <_start@@Base+0x30>
   1085c:	push	{ip}		; (str ip, [sp, #-4]!)
   10860:	ldr	r0, [pc, #12]	; 10874 <_start@@Base+0x34>
   10864:	ldr	r3, [pc, #12]	; 10878 <_start@@Base+0x38>
   10868:	bl	1062c <__libc_start_main@plt>
   1086c:	bl	1065c <abort@plt>
   10870:			; <UNDEFINED> instruction: 0x000109b4
   10874:	andeq	r0, r1, r4, ror r6
   10878:	andeq	r0, r1, r4, asr r9
   1087c:	ldr	r3, [pc, #20]	; 10898 <_start@@Base+0x58>
   10880:	ldr	r2, [pc, #20]	; 1089c <_start@@Base+0x5c>
   10884:	add	r3, pc, r3
   10888:	ldr	r2, [r3, r2]
   1088c:	cmp	r2, #0
   10890:	bxeq	lr
   10894:	b	10638 <__gmon_start__@plt>
   10898:	andeq	r0, r1, r4, ror r7
   1089c:	andeq	r0, r0, r0, lsr r0
   108a0:	ldr	r0, [pc, #24]	; 108c0 <_start@@Base+0x80>
   108a4:	ldr	r3, [pc, #24]	; 108c4 <_start@@Base+0x84>
   108a8:	cmp	r3, r0
   108ac:	bxeq	lr
   108b0:	ldr	r3, [pc, #16]	; 108c8 <_start@@Base+0x88>
   108b4:	cmp	r3, #0
   108b8:	bxeq	lr
   108bc:	bx	r3
   108c0:	andeq	r1, r2, ip, lsr r0
   108c4:	andeq	r1, r2, ip, lsr r0
   108c8:	andeq	r0, r0, r0
   108cc:	ldr	r0, [pc, #36]	; 108f8 <_start@@Base+0xb8>
   108d0:	ldr	r1, [pc, #36]	; 108fc <_start@@Base+0xbc>
   108d4:	sub	r1, r1, r0
   108d8:	asr	r1, r1, #2
   108dc:	add	r1, r1, r1, lsr #31
   108e0:	asrs	r1, r1, #1
   108e4:	bxeq	lr
   108e8:	ldr	r3, [pc, #16]	; 10900 <_start@@Base+0xc0>
   108ec:	cmp	r3, #0
   108f0:	bxeq	lr
   108f4:	bx	r3
   108f8:	andeq	r1, r2, ip, lsr r0
   108fc:	andeq	r1, r2, ip, lsr r0
   10900:	andeq	r0, r0, r0
   10904:	push	{r4, lr}
   10908:	ldr	r4, [pc, #24]	; 10928 <_start@@Base+0xe8>
   1090c:	ldrb	r3, [r4]
   10910:	cmp	r3, #0
   10914:	popne	{r4, pc}
   10918:	bl	108a0 <_start@@Base+0x60>
   1091c:	mov	r3, #1
   10920:	strb	r3, [r4]
   10924:	pop	{r4, pc}
   10928:	andeq	r1, r2, ip, lsr r0
   1092c:	b	108cc <_start@@Base+0x8c>

00010930 <esvaziastring@@Base>:
   10930:	cmp	r1, #0
   10934:	ble	10950 <esvaziastring@@Base+0x20>
   10938:	sub	r0, r0, #1
   1093c:	mov	r3, #0
   10940:	add	r1, r0, r1
   10944:	strb	r3, [r0, #1]!
   10948:	cmp	r0, r1
   1094c:	bne	10944 <esvaziastring@@Base+0x14>
   10950:	bx	lr

00010954 <__libc_csu_init@@Base>:
   10954:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10958:	mov	r7, r0
   1095c:	ldr	r6, [pc, #72]	; 109ac <__libc_csu_init@@Base+0x58>
   10960:	ldr	r5, [pc, #72]	; 109b0 <__libc_csu_init@@Base+0x5c>
   10964:	add	r6, pc, r6
   10968:	add	r5, pc, r5
   1096c:	sub	r6, r6, r5
   10970:	mov	r8, r1
   10974:	mov	r9, r2
   10978:	bl	105e8 <printf@plt-0x20>
   1097c:	asrs	r6, r6, #2
   10980:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10984:	mov	r4, #0
   10988:	add	r4, r4, #1
   1098c:	ldr	r3, [r5], #4
   10990:	mov	r2, r9
   10994:	mov	r1, r8
   10998:	mov	r0, r7
   1099c:	blx	r3
   109a0:	cmp	r6, r4
   109a4:	bne	10988 <__libc_csu_init@@Base+0x34>
   109a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109ac:	andeq	r0, r1, r8, lsr #11
   109b0:	andeq	r0, r1, r0, lsr #11

000109b4 <__libc_csu_fini@@Base>:
   109b4:	bx	lr

Disassembly of section .fini:

000109b8 <.fini>:
   109b8:	push	{r3, lr}
   109bc:	pop	{r3, pc}
