
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128ac <.init>:
   128ac:	push	{r3, lr}
   128b0:	bl	129d4 <_start@@Base+0x3c>
   128b4:	pop	{r3, pc}

Disassembly of section .plt:

000128b8 <free@plt-0x14>:
   128b8:	push	{lr}		; (str lr, [sp, #-4]!)
   128bc:	ldr	lr, [pc, #4]	; 128c8 <free@plt-0x4>
   128c0:	add	lr, pc, lr
   128c4:	ldr	pc, [lr, #8]!
   128c8:	andeq	r2, r2, r8, lsr r7

000128cc <free@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #139264	; 0x22000
   128d4:	ldr	pc, [ip, #1848]!	; 0x738

000128d8 <memcpy@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #139264	; 0x22000
   128e0:	ldr	pc, [ip, #1840]!	; 0x730

000128e4 <memcmp@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #139264	; 0x22000
   128ec:	ldr	pc, [ip, #1832]!	; 0x728

000128f0 <__isinff@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #139264	; 0x22000
   128f8:	ldr	pc, [ip, #1824]!	; 0x720

000128fc <__isinf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #139264	; 0x22000
   12904:	ldr	pc, [ip, #1816]!	; 0x718

00012908 <realloc@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #139264	; 0x22000
   12910:	ldr	pc, [ip, #1808]!	; 0x710

00012914 <malloc@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #139264	; 0x22000
   1291c:	ldr	pc, [ip, #1800]!	; 0x708

00012920 <__libc_start_main@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #139264	; 0x22000
   12928:	ldr	pc, [ip, #1792]!	; 0x700

0001292c <__gmon_start__@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #139264	; 0x22000
   12934:	ldr	pc, [ip, #1784]!	; 0x6f8

00012938 <strlen@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #139264	; 0x22000
   12940:	ldr	pc, [ip, #1776]!	; 0x6f0

00012944 <fprintf@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #139264	; 0x22000
   1294c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012950 <posix_memalign@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #139264	; 0x22000
   12958:	ldr	pc, [ip, #1760]!	; 0x6e0

0001295c <memset@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #139264	; 0x22000
   12964:	ldr	pc, [ip, #1752]!	; 0x6d8

00012968 <strtod@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #139264	; 0x22000
   12970:	ldr	pc, [ip, #1744]!	; 0x6d0

00012974 <memchr@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #139264	; 0x22000
   1297c:	ldr	pc, [ip, #1736]!	; 0x6c8

00012980 <abort@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #139264	; 0x22000
   12988:	ldr	pc, [ip, #1728]!	; 0x6c0

0001298c <__assert_fail@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #139264	; 0x22000
   12994:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

00012998 <_start@@Base>:
   12998:	mov	fp, #0
   1299c:	mov	lr, #0
   129a0:	pop	{r1}		; (ldr r1, [sp], #4)
   129a4:	mov	r2, sp
   129a8:	push	{r2}		; (str r2, [sp, #-4]!)
   129ac:	push	{r0}		; (str r0, [sp, #-4]!)
   129b0:	ldr	ip, [pc, #16]	; 129c8 <_start@@Base+0x30>
   129b4:	push	{ip}		; (str ip, [sp, #-4]!)
   129b8:	ldr	r0, [pc, #12]	; 129cc <_start@@Base+0x34>
   129bc:	ldr	r3, [pc, #12]	; 129d0 <_start@@Base+0x38>
   129c0:	bl	12920 <__libc_start_main@plt>
   129c4:	bl	12980 <abort@plt>
   129c8:	andeq	r1, r2, r4, asr lr
   129cc:	andeq	r4, r1, ip, asr r2
   129d0:	strdeq	r1, [r2], -r4
   129d4:	ldr	r3, [pc, #20]	; 129f0 <_start@@Base+0x58>
   129d8:	ldr	r2, [pc, #20]	; 129f4 <_start@@Base+0x5c>
   129dc:	add	r3, pc, r3
   129e0:	ldr	r2, [r3, r2]
   129e4:	cmp	r2, #0
   129e8:	bxeq	lr
   129ec:	b	1292c <__gmon_start__@plt>
   129f0:	andeq	r2, r2, ip, lsl r6
   129f4:	andeq	r0, r0, ip, asr r0
   129f8:	ldr	r0, [pc, #24]	; 12a18 <_start@@Base+0x80>
   129fc:	ldr	r3, [pc, #24]	; 12a1c <_start@@Base+0x84>
   12a00:	cmp	r3, r0
   12a04:	bxeq	lr
   12a08:	ldr	r3, [pc, #16]	; 12a20 <_start@@Base+0x88>
   12a0c:	cmp	r3, #0
   12a10:	bxeq	lr
   12a14:	bx	r3
   12a18:	andeq	r5, r3, r0, ror #1
   12a1c:	andeq	r5, r3, r0, ror #1
   12a20:	andeq	r0, r0, r0
   12a24:	ldr	r0, [pc, #36]	; 12a50 <_start@@Base+0xb8>
   12a28:	ldr	r1, [pc, #36]	; 12a54 <_start@@Base+0xbc>
   12a2c:	sub	r1, r1, r0
   12a30:	asr	r1, r1, #2
   12a34:	add	r1, r1, r1, lsr #31
   12a38:	asrs	r1, r1, #1
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0xc0>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	r5, r3, r0, ror #1
   12a54:	andeq	r5, r3, r0, ror #1
   12a58:	andeq	r0, r0, r0
   12a5c:	push	{r4, lr}
   12a60:	ldr	r4, [pc, #24]	; 12a80 <_start@@Base+0xe8>
   12a64:	ldrb	r3, [r4]
   12a68:	cmp	r3, #0
   12a6c:	popne	{r4, pc}
   12a70:	bl	129f8 <_start@@Base+0x60>
   12a74:	mov	r3, #1
   12a78:	strb	r3, [r4]
   12a7c:	pop	{r4, pc}
   12a80:	andeq	r5, r3, r0, ror #1
   12a84:	b	12a24 <_start@@Base+0x8c>

00012a88 <test@@Base>:
   12a88:	push	{fp, lr}
   12a8c:	mov	fp, sp
   12a90:	sub	sp, sp, #192	; 0xc0
   12a94:	ldr	ip, [pc, #4032]	; 13a5c <test@@Base+0xfd4>
   12a98:	add	ip, pc, ip
   12a9c:	str	r0, [fp, #-4]
   12aa0:	str	r1, [fp, #-8]
   12aa4:	str	r2, [fp, #-12]
   12aa8:	str	r3, [fp, #-16]
   12aac:	movw	r0, #0
   12ab0:	str	r0, [fp, #-68]	; 0xffffffbc
   12ab4:	sub	r1, fp, #60	; 0x3c
   12ab8:	str	r1, [fp, #-64]	; 0xffffffc0
   12abc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ac0:	str	r0, [sp, #84]	; 0x54
   12ac4:	mov	r0, r1
   12ac8:	movw	r1, #0
   12acc:	and	r1, r1, #255	; 0xff
   12ad0:	movw	r2, #44	; 0x2c
   12ad4:	str	ip, [sp, #80]	; 0x50
   12ad8:	bl	1295c <memset@plt>
   12adc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ae0:	movw	r1, #1
   12ae4:	str	r1, [r0, #16]
   12ae8:	ldr	r0, [fp, #-8]
   12aec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12af0:	str	r0, [r1, #4]
   12af4:	ldr	r0, [fp, #-4]
   12af8:	ldr	r1, [sp, #80]	; 0x50
   12afc:	movw	r2, #0
   12b00:	uxth	r2, r2
   12b04:	ldr	r3, [sp, #84]	; 0x54
   12b08:	bl	15ac8 <flatcc_builder_start_buffer@@Base>
   12b0c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12b10:	ldr	r2, [fp, #-8]
   12b14:	ldr	r3, [fp, #-12]
   12b18:	str	r0, [sp, #76]	; 0x4c
   12b1c:	mov	r0, r1
   12b20:	mov	r1, r2
   12b24:	mov	r2, r3
   12b28:	bl	13b5c <test@@Base+0x10d4>
   12b2c:	str	r0, [fp, #-8]
   12b30:	ldr	r0, [fp, #-8]
   12b34:	ldr	r1, [fp, #-12]
   12b38:	cmp	r0, r1
   12b3c:	bne	12b5c <test@@Base+0xd4>
   12b40:	ldr	r0, [pc, #4032]	; 13b08 <test@@Base+0x1080>
   12b44:	add	r1, pc, r0
   12b48:	ldr	r0, [pc, #4028]	; 13b0c <test@@Base+0x1084>
   12b4c:	ldr	r0, [pc, r0]
   12b50:	ldr	r0, [r0]
   12b54:	bl	12944 <fprintf@plt>
   12b58:	b	13994 <test@@Base+0xf0c>
   12b5c:	ldr	r0, [fp, #-12]
   12b60:	ldr	r1, [fp, #-8]
   12b64:	cmp	r0, r1
   12b68:	bls	12b8c <test@@Base+0x104>
   12b6c:	ldr	r0, [fp, #-8]
   12b70:	ldrb	r0, [r0]
   12b74:	cmp	r0, #123	; 0x7b
   12b78:	bne	12b8c <test@@Base+0x104>
   12b7c:	ldr	r0, [fp, #-8]
   12b80:	add	r0, r0, #1
   12b84:	str	r0, [fp, #-8]
   12b88:	b	12bd4 <test@@Base+0x14c>
   12b8c:	ldr	r0, [pc, #3788]	; 13a60 <test@@Base+0xfd8>
   12b90:	add	r1, pc, r0
   12b94:	ldr	r0, [pc, #3784]	; 13a64 <test@@Base+0xfdc>
   12b98:	ldr	r0, [pc, r0]
   12b9c:	ldr	r0, [r0]
   12ba0:	movw	r2, #123	; 0x7b
   12ba4:	bl	12944 <fprintf@plt>
   12ba8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12bac:	ldr	r2, [fp, #-8]
   12bb0:	ldr	r3, [fp, #-12]
   12bb4:	str	r0, [sp, #72]	; 0x48
   12bb8:	mov	r0, r1
   12bbc:	mov	r1, r2
   12bc0:	mov	r2, r3
   12bc4:	movw	r3, #17
   12bc8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   12bcc:	str	r0, [fp, #-8]
   12bd0:	b	13994 <test@@Base+0xf0c>
   12bd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bd8:	ldr	r1, [fp, #-8]
   12bdc:	ldr	r2, [fp, #-12]
   12be0:	bl	13b5c <test@@Base+0x10d4>
   12be4:	str	r0, [fp, #-8]
   12be8:	ldr	r0, [fp, #-8]
   12bec:	ldr	r1, [fp, #-12]
   12bf0:	cmp	r0, r1
   12bf4:	bne	12c14 <test@@Base+0x18c>
   12bf8:	ldr	r0, [pc, #3840]	; 13b00 <test@@Base+0x1078>
   12bfc:	add	r1, pc, r0
   12c00:	ldr	r0, [pc, #3836]	; 13b04 <test@@Base+0x107c>
   12c04:	ldr	r0, [pc, r0]
   12c08:	ldr	r0, [r0]
   12c0c:	bl	12944 <fprintf@plt>
   12c10:	b	13994 <test@@Base+0xf0c>
   12c14:	ldr	r0, [fp, #-4]
   12c18:	movw	r1, #11
   12c1c:	bl	171f0 <flatcc_builder_start_table@@Base>
   12c20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c24:	ldr	r1, [fp, #-8]
   12c28:	ldr	r2, [fp, #-12]
   12c2c:	bl	13bf8 <test@@Base+0x1170>
   12c30:	str	r0, [fp, #-8]
   12c34:	ldr	r0, [fp, #-8]
   12c38:	ldr	r1, [fp, #-12]
   12c3c:	bl	13ca4 <test@@Base+0x121c>
   12c40:	str	r1, [fp, #-84]	; 0xffffffac
   12c44:	str	r0, [fp, #-88]	; 0xffffffa8
   12c48:	ldr	r0, [fp, #-12]
   12c4c:	ldr	r1, [fp, #-8]
   12c50:	sub	r0, r0, r1
   12c54:	cmp	r0, #8
   12c58:	ble	12c6c <test@@Base+0x1e4>
   12c5c:	ldr	r0, [fp, #-8]
   12c60:	add	r0, r0, #8
   12c64:	str	r0, [sp, #68]	; 0x44
   12c68:	b	12c74 <test@@Base+0x1ec>
   12c6c:	ldr	r0, [fp, #-12]
   12c70:	str	r0, [sp, #68]	; 0x44
   12c74:	ldr	r0, [sp, #68]	; 0x44
   12c78:	str	r0, [fp, #-92]	; 0xffffffa4
   12c7c:	ldr	r0, [fp, #-84]	; 0xffffffac
   12c80:	ldrh	r1, [fp, #-86]	; 0xffffffaa
   12c84:	ldr	r2, [pc, #3732]	; 13b20 <test@@Base+0x1098>
   12c88:	add	r2, pc, r2
   12c8c:	ldr	r3, [pc, #3728]	; 13b24 <test@@Base+0x109c>
   12c90:	ldr	r3, [pc, r3]
   12c94:	rev	r3, r3
   12c98:	ldrb	ip, [r2, #4]
   12c9c:	ldrb	r2, [r2, #5]
   12ca0:	lsl	ip, ip, #24
   12ca4:	orr	r2, ip, r2, lsl #16
   12ca8:	rsbs	r1, r2, r1, lsl #16
   12cac:	sbcs	r0, r0, r3
   12cb0:	bcs	12e88 <test@@Base+0x400>
   12cb4:	b	12cb8 <test@@Base+0x230>
   12cb8:	ldr	r0, [fp, #-84]	; 0xffffffac
   12cbc:	ldrb	r1, [fp, #-85]	; 0xffffffab
   12cc0:	ldr	r2, [pc, #3680]	; 13b28 <test@@Base+0x10a0>
   12cc4:	add	r2, pc, r2
   12cc8:	ldr	r3, [pc, #3676]	; 13b2c <test@@Base+0x10a4>
   12ccc:	ldr	r3, [pc, r3]
   12cd0:	rev	r3, r3
   12cd4:	ldrb	r2, [r2, #4]
   12cd8:	eor	r1, r1, r2
   12cdc:	eor	r0, r0, r3
   12ce0:	orr	r0, r0, r1, lsl #24
   12ce4:	cmp	r0, #0
   12ce8:	beq	12d0c <test@@Base+0x284>
   12cec:	b	12cf0 <test@@Base+0x268>
   12cf0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cf4:	ldr	r1, [fp, #-8]
   12cf8:	ldr	r2, [fp, #-12]
   12cfc:	movw	r3, #13
   12d00:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   12d04:	str	r0, [fp, #-8]
   12d08:	b	13994 <test@@Base+0xf0c>
   12d0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d10:	ldr	r1, [fp, #-8]
   12d14:	add	r1, r1, #5
   12d18:	ldr	r2, [fp, #-12]
   12d1c:	bl	13cdc <test@@Base+0x1254>
   12d20:	str	r0, [fp, #-8]
   12d24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d28:	ldr	r1, [fp, #-8]
   12d2c:	ldr	r2, [fp, #-12]
   12d30:	bl	13b5c <test@@Base+0x10d4>
   12d34:	str	r0, [fp, #-8]
   12d38:	ldr	r0, [fp, #-8]
   12d3c:	ldr	r1, [fp, #-12]
   12d40:	cmp	r0, r1
   12d44:	bne	12d64 <test@@Base+0x2dc>
   12d48:	ldr	r0, [pc, #3496]	; 13af8 <test@@Base+0x1070>
   12d4c:	add	r1, pc, r0
   12d50:	ldr	r0, [pc, #3492]	; 13afc <test@@Base+0x1074>
   12d54:	ldr	r0, [pc, r0]
   12d58:	ldr	r0, [r0]
   12d5c:	bl	12944 <fprintf@plt>
   12d60:	b	13994 <test@@Base+0xf0c>
   12d64:	ldr	r0, [fp, #-12]
   12d68:	ldr	r1, [fp, #-8]
   12d6c:	cmp	r0, r1
   12d70:	bls	12d94 <test@@Base+0x30c>
   12d74:	ldr	r0, [fp, #-8]
   12d78:	ldrb	r0, [r0]
   12d7c:	cmp	r0, #58	; 0x3a
   12d80:	bne	12d94 <test@@Base+0x30c>
   12d84:	ldr	r0, [fp, #-8]
   12d88:	add	r0, r0, #1
   12d8c:	str	r0, [fp, #-8]
   12d90:	b	12ddc <test@@Base+0x354>
   12d94:	ldr	r0, [pc, #3372]	; 13ac8 <test@@Base+0x1040>
   12d98:	add	r1, pc, r0
   12d9c:	ldr	r0, [pc, #3368]	; 13acc <test@@Base+0x1044>
   12da0:	ldr	r0, [pc, r0]
   12da4:	ldr	r0, [r0]
   12da8:	movw	r2, #58	; 0x3a
   12dac:	bl	12944 <fprintf@plt>
   12db0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12db4:	ldr	r2, [fp, #-8]
   12db8:	ldr	r3, [fp, #-12]
   12dbc:	str	r0, [sp, #64]	; 0x40
   12dc0:	mov	r0, r1
   12dc4:	mov	r1, r2
   12dc8:	mov	r2, r3
   12dcc:	movw	r3, #17
   12dd0:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   12dd4:	str	r0, [fp, #-8]
   12dd8:	b	13994 <test@@Base+0xf0c>
   12ddc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12de0:	ldr	r1, [fp, #-8]
   12de4:	ldr	r2, [fp, #-12]
   12de8:	bl	13b5c <test@@Base+0x10d4>
   12dec:	str	r0, [fp, #-8]
   12df0:	ldr	r0, [fp, #-8]
   12df4:	ldr	r1, [fp, #-12]
   12df8:	cmp	r0, r1
   12dfc:	bne	12e1c <test@@Base+0x394>
   12e00:	ldr	r0, [pc, #3304]	; 13af0 <test@@Base+0x1068>
   12e04:	add	r1, pc, r0
   12e08:	ldr	r0, [pc, #3300]	; 13af4 <test@@Base+0x106c>
   12e0c:	ldr	r0, [pc, r0]
   12e10:	ldr	r0, [r0]
   12e14:	bl	12944 <fprintf@plt>
   12e18:	b	13994 <test@@Base+0xf0c>
   12e1c:	ldr	r0, [fp, #-4]
   12e20:	movw	r1, #0
   12e24:	movw	r2, #1
   12e28:	movw	r3, #1
   12e2c:	uxth	r3, r3
   12e30:	bl	18a94 <flatcc_builder_table_add@@Base>
   12e34:	str	r0, [sp, #88]	; 0x58
   12e38:	ldr	r0, [sp, #88]	; 0x58
   12e3c:	movw	r1, #0
   12e40:	cmp	r0, r1
   12e44:	bne	12e4c <test@@Base+0x3c4>
   12e48:	b	13994 <test@@Base+0xf0c>
   12e4c:	ldr	r0, [fp, #-8]
   12e50:	str	r0, [fp, #-92]	; 0xffffffa4
   12e54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e58:	ldr	r1, [fp, #-8]
   12e5c:	ldr	r2, [fp, #-12]
   12e60:	ldr	r3, [sp, #88]	; 0x58
   12e64:	bl	13ef0 <test@@Base+0x1468>
   12e68:	str	r0, [fp, #-8]
   12e6c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12e70:	ldr	r1, [fp, #-8]
   12e74:	cmp	r0, r1
   12e78:	bne	12e80 <test@@Base+0x3f8>
   12e7c:	b	13994 <test@@Base+0xf0c>
   12e80:	b	12e84 <test@@Base+0x3fc>
   12e84:	b	137fc <test@@Base+0xd74>
   12e88:	ldr	r0, [fp, #-84]	; 0xffffffac
   12e8c:	ldr	r1, [pc, #3228]	; 13b30 <test@@Base+0x10a8>
   12e90:	ldr	r1, [pc, r1]
   12e94:	rev	r1, r1
   12e98:	cmp	r0, r1
   12e9c:	bcs	134ec <test@@Base+0xa64>
   12ea0:	b	12ea4 <test@@Base+0x41c>
   12ea4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12ea8:	ldr	r1, [fp, #-84]	; 0xffffffac
   12eac:	ldr	r2, [pc, #3200]	; 13b34 <test@@Base+0x10ac>
   12eb0:	add	r2, pc, r2
   12eb4:	ldr	r3, [pc, #3196]	; 13b38 <test@@Base+0x10b0>
   12eb8:	ldr	r3, [pc, r3]
   12ebc:	rev	r3, r3
   12ec0:	ldr	r2, [r2, #4]
   12ec4:	rev	r2, r2
   12ec8:	subs	r0, r0, r2
   12ecc:	sbcs	r1, r1, r3
   12ed0:	bcs	130b4 <test@@Base+0x62c>
   12ed4:	b	12ed8 <test@@Base+0x450>
   12ed8:	ldrh	r0, [fp, #-86]	; 0xffffffaa
   12edc:	ldr	r1, [fp, #-84]	; 0xffffffac
   12ee0:	ldr	r2, [pc, #3156]	; 13b3c <test@@Base+0x10b4>
   12ee4:	add	r2, pc, r2
   12ee8:	ldr	r3, [pc, #3152]	; 13b40 <test@@Base+0x10b8>
   12eec:	ldr	r3, [pc, r3]
   12ef0:	rev	r3, r3
   12ef4:	ldrb	ip, [r2, #4]
   12ef8:	ldrb	r2, [r2, #5]
   12efc:	lsl	ip, ip, #24
   12f00:	orr	r2, ip, r2, lsl #16
   12f04:	eor	r1, r1, r3
   12f08:	eor	r0, r2, r0, lsl #16
   12f0c:	orr	r0, r0, r1
   12f10:	cmp	r0, #0
   12f14:	beq	12f38 <test@@Base+0x4b0>
   12f18:	b	12f1c <test@@Base+0x494>
   12f1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f20:	ldr	r1, [fp, #-8]
   12f24:	ldr	r2, [fp, #-12]
   12f28:	movw	r3, #13
   12f2c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   12f30:	str	r0, [fp, #-8]
   12f34:	b	13994 <test@@Base+0xf0c>
   12f38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f3c:	ldr	r1, [fp, #-8]
   12f40:	add	r1, r1, #6
   12f44:	ldr	r2, [fp, #-12]
   12f48:	bl	13cdc <test@@Base+0x1254>
   12f4c:	str	r0, [fp, #-8]
   12f50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f54:	ldr	r1, [fp, #-8]
   12f58:	ldr	r2, [fp, #-12]
   12f5c:	bl	13b5c <test@@Base+0x10d4>
   12f60:	str	r0, [fp, #-8]
   12f64:	ldr	r0, [fp, #-8]
   12f68:	ldr	r1, [fp, #-12]
   12f6c:	cmp	r0, r1
   12f70:	bne	12f90 <test@@Base+0x508>
   12f74:	ldr	r0, [pc, #2884]	; 13ac0 <test@@Base+0x1038>
   12f78:	add	r1, pc, r0
   12f7c:	ldr	r0, [pc, #2880]	; 13ac4 <test@@Base+0x103c>
   12f80:	ldr	r0, [pc, r0]
   12f84:	ldr	r0, [r0]
   12f88:	bl	12944 <fprintf@plt>
   12f8c:	b	13994 <test@@Base+0xf0c>
   12f90:	ldr	r0, [fp, #-12]
   12f94:	ldr	r1, [fp, #-8]
   12f98:	cmp	r0, r1
   12f9c:	bls	12fc0 <test@@Base+0x538>
   12fa0:	ldr	r0, [fp, #-8]
   12fa4:	ldrb	r0, [r0]
   12fa8:	cmp	r0, #58	; 0x3a
   12fac:	bne	12fc0 <test@@Base+0x538>
   12fb0:	ldr	r0, [fp, #-8]
   12fb4:	add	r0, r0, #1
   12fb8:	str	r0, [fp, #-8]
   12fbc:	b	13008 <test@@Base+0x580>
   12fc0:	ldr	r0, [pc, #2792]	; 13ab0 <test@@Base+0x1028>
   12fc4:	add	r1, pc, r0
   12fc8:	ldr	r0, [pc, #2788]	; 13ab4 <test@@Base+0x102c>
   12fcc:	ldr	r0, [pc, r0]
   12fd0:	ldr	r0, [r0]
   12fd4:	movw	r2, #58	; 0x3a
   12fd8:	bl	12944 <fprintf@plt>
   12fdc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12fe0:	ldr	r2, [fp, #-8]
   12fe4:	ldr	r3, [fp, #-12]
   12fe8:	str	r0, [sp, #60]	; 0x3c
   12fec:	mov	r0, r1
   12ff0:	mov	r1, r2
   12ff4:	mov	r2, r3
   12ff8:	movw	r3, #17
   12ffc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13000:	str	r0, [fp, #-8]
   13004:	b	13994 <test@@Base+0xf0c>
   13008:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1300c:	ldr	r1, [fp, #-8]
   13010:	ldr	r2, [fp, #-12]
   13014:	bl	13b5c <test@@Base+0x10d4>
   13018:	str	r0, [fp, #-8]
   1301c:	ldr	r0, [fp, #-8]
   13020:	ldr	r1, [fp, #-12]
   13024:	cmp	r0, r1
   13028:	bne	13048 <test@@Base+0x5c0>
   1302c:	ldr	r0, [pc, #2692]	; 13ab8 <test@@Base+0x1030>
   13030:	add	r1, pc, r0
   13034:	ldr	r0, [pc, #2688]	; 13abc <test@@Base+0x1034>
   13038:	ldr	r0, [pc, r0]
   1303c:	ldr	r0, [r0]
   13040:	bl	12944 <fprintf@plt>
   13044:	b	13994 <test@@Base+0xf0c>
   13048:	ldr	r0, [fp, #-4]
   1304c:	movw	r1, #1
   13050:	movw	r2, #8
   13054:	movw	r3, #8
   13058:	uxth	r3, r3
   1305c:	bl	18a94 <flatcc_builder_table_add@@Base>
   13060:	str	r0, [sp, #88]	; 0x58
   13064:	ldr	r0, [sp, #88]	; 0x58
   13068:	movw	r1, #0
   1306c:	cmp	r0, r1
   13070:	bne	13078 <test@@Base+0x5f0>
   13074:	b	13994 <test@@Base+0xf0c>
   13078:	ldr	r0, [fp, #-8]
   1307c:	str	r0, [fp, #-92]	; 0xffffffa4
   13080:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13084:	ldr	r1, [fp, #-8]
   13088:	ldr	r2, [fp, #-12]
   1308c:	ldr	r3, [sp, #88]	; 0x58
   13090:	bl	1da20 <flatcc_json_parser_double@@Base>
   13094:	str	r0, [fp, #-8]
   13098:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1309c:	ldr	r1, [fp, #-8]
   130a0:	cmp	r0, r1
   130a4:	bne	130ac <test@@Base+0x624>
   130a8:	b	13994 <test@@Base+0xf0c>
   130ac:	b	130b0 <test@@Base+0x628>
   130b0:	b	134e8 <test@@Base+0xa60>
   130b4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   130b8:	ldr	r1, [fp, #-84]	; 0xffffffac
   130bc:	ldr	r2, [pc, #2688]	; 13b44 <test@@Base+0x10bc>
   130c0:	add	r2, pc, r2
   130c4:	ldr	r3, [pc, #2684]	; 13b48 <test@@Base+0x10c0>
   130c8:	ldr	r3, [pc, r3]
   130cc:	rev	r3, r3
   130d0:	ldr	r2, [r2, #4]
   130d4:	rev	r2, r2
   130d8:	eor	r1, r1, r3
   130dc:	eor	r0, r0, r2
   130e0:	orr	r0, r0, r1
   130e4:	cmp	r0, #0
   130e8:	beq	1310c <test@@Base+0x684>
   130ec:	b	130f0 <test@@Base+0x668>
   130f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130f4:	ldr	r1, [fp, #-8]
   130f8:	ldr	r2, [fp, #-12]
   130fc:	movw	r3, #13
   13100:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13104:	str	r0, [fp, #-8]
   13108:	b	13994 <test@@Base+0xf0c>
   1310c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13110:	str	r0, [fp, #-8]
   13114:	ldr	r0, [fp, #-8]
   13118:	ldr	r1, [fp, #-12]
   1311c:	bl	13ca4 <test@@Base+0x121c>
   13120:	str	r1, [fp, #-84]	; 0xffffffac
   13124:	str	r0, [fp, #-88]	; 0xffffffa8
   13128:	ldr	r0, [fp, #-12]
   1312c:	ldr	r1, [fp, #-8]
   13130:	sub	r0, r0, r1
   13134:	cmp	r0, #8
   13138:	ble	1314c <test@@Base+0x6c4>
   1313c:	ldr	r0, [fp, #-8]
   13140:	add	r0, r0, #8
   13144:	str	r0, [sp, #56]	; 0x38
   13148:	b	13154 <test@@Base+0x6cc>
   1314c:	ldr	r0, [fp, #-12]
   13150:	str	r0, [sp, #56]	; 0x38
   13154:	ldr	r0, [sp, #56]	; 0x38
   13158:	str	r0, [fp, #-92]	; 0xffffffa4
   1315c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13160:	ldr	r1, [pc, #2532]	; 13b4c <test@@Base+0x10c4>
   13164:	ldr	r1, [pc, r1]
   13168:	rev	r1, r1
   1316c:	cmp	r0, r1
   13170:	bcs	1332c <test@@Base+0x8a4>
   13174:	b	13178 <test@@Base+0x6f0>
   13178:	ldr	r0, [fp, #-84]	; 0xffffffac
   1317c:	ldr	r1, [pc, #2508]	; 13b50 <test@@Base+0x10c8>
   13180:	ldr	r1, [pc, r1]
   13184:	rev	r1, r1
   13188:	teq	r0, r1
   1318c:	beq	131b0 <test@@Base+0x728>
   13190:	b	13194 <test@@Base+0x70c>
   13194:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13198:	ldr	r1, [fp, #-8]
   1319c:	ldr	r2, [fp, #-12]
   131a0:	movw	r3, #13
   131a4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   131a8:	str	r0, [fp, #-8]
   131ac:	b	13994 <test@@Base+0xf0c>
   131b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131b4:	ldr	r1, [fp, #-8]
   131b8:	add	r1, r1, #4
   131bc:	ldr	r2, [fp, #-12]
   131c0:	bl	13cdc <test@@Base+0x1254>
   131c4:	str	r0, [fp, #-8]
   131c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131cc:	ldr	r1, [fp, #-8]
   131d0:	ldr	r2, [fp, #-12]
   131d4:	bl	13b5c <test@@Base+0x10d4>
   131d8:	str	r0, [fp, #-8]
   131dc:	ldr	r0, [fp, #-8]
   131e0:	ldr	r1, [fp, #-12]
   131e4:	cmp	r0, r1
   131e8:	bne	13208 <test@@Base+0x780>
   131ec:	ldr	r0, [pc, #2228]	; 13aa8 <test@@Base+0x1020>
   131f0:	add	r1, pc, r0
   131f4:	ldr	r0, [pc, #2224]	; 13aac <test@@Base+0x1024>
   131f8:	ldr	r0, [pc, r0]
   131fc:	ldr	r0, [r0]
   13200:	bl	12944 <fprintf@plt>
   13204:	b	13994 <test@@Base+0xf0c>
   13208:	ldr	r0, [fp, #-12]
   1320c:	ldr	r1, [fp, #-8]
   13210:	cmp	r0, r1
   13214:	bls	13238 <test@@Base+0x7b0>
   13218:	ldr	r0, [fp, #-8]
   1321c:	ldrb	r0, [r0]
   13220:	cmp	r0, #58	; 0x3a
   13224:	bne	13238 <test@@Base+0x7b0>
   13228:	ldr	r0, [fp, #-8]
   1322c:	add	r0, r0, #1
   13230:	str	r0, [fp, #-8]
   13234:	b	13280 <test@@Base+0x7f8>
   13238:	ldr	r0, [pc, #2136]	; 13a98 <test@@Base+0x1010>
   1323c:	add	r1, pc, r0
   13240:	ldr	r0, [pc, #2132]	; 13a9c <test@@Base+0x1014>
   13244:	ldr	r0, [pc, r0]
   13248:	ldr	r0, [r0]
   1324c:	movw	r2, #58	; 0x3a
   13250:	bl	12944 <fprintf@plt>
   13254:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13258:	ldr	r2, [fp, #-8]
   1325c:	ldr	r3, [fp, #-12]
   13260:	str	r0, [sp, #52]	; 0x34
   13264:	mov	r0, r1
   13268:	mov	r1, r2
   1326c:	mov	r2, r3
   13270:	movw	r3, #17
   13274:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13278:	str	r0, [fp, #-8]
   1327c:	b	13994 <test@@Base+0xf0c>
   13280:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13284:	ldr	r1, [fp, #-8]
   13288:	ldr	r2, [fp, #-12]
   1328c:	bl	13b5c <test@@Base+0x10d4>
   13290:	str	r0, [fp, #-8]
   13294:	ldr	r0, [fp, #-8]
   13298:	ldr	r1, [fp, #-12]
   1329c:	cmp	r0, r1
   132a0:	bne	132c0 <test@@Base+0x838>
   132a4:	ldr	r0, [pc, #2036]	; 13aa0 <test@@Base+0x1018>
   132a8:	add	r1, pc, r0
   132ac:	ldr	r0, [pc, #2032]	; 13aa4 <test@@Base+0x101c>
   132b0:	ldr	r0, [pc, r0]
   132b4:	ldr	r0, [r0]
   132b8:	bl	12944 <fprintf@plt>
   132bc:	b	13994 <test@@Base+0xf0c>
   132c0:	ldr	r0, [fp, #-4]
   132c4:	movw	r1, #3
   132c8:	movw	r2, #8
   132cc:	movw	r3, #8
   132d0:	uxth	r3, r3
   132d4:	bl	18a94 <flatcc_builder_table_add@@Base>
   132d8:	str	r0, [sp, #88]	; 0x58
   132dc:	ldr	r0, [sp, #88]	; 0x58
   132e0:	movw	r1, #0
   132e4:	cmp	r0, r1
   132e8:	bne	132f0 <test@@Base+0x868>
   132ec:	b	13994 <test@@Base+0xf0c>
   132f0:	ldr	r0, [fp, #-8]
   132f4:	str	r0, [fp, #-92]	; 0xffffffa4
   132f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132fc:	ldr	r1, [fp, #-8]
   13300:	ldr	r2, [fp, #-12]
   13304:	ldr	r3, [sp, #88]	; 0x58
   13308:	bl	13fcc <test@@Base+0x1544>
   1330c:	str	r0, [fp, #-8]
   13310:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13314:	ldr	r1, [fp, #-8]
   13318:	cmp	r0, r1
   1331c:	bne	13324 <test@@Base+0x89c>
   13320:	b	13994 <test@@Base+0xf0c>
   13324:	b	13328 <test@@Base+0x8a0>
   13328:	b	134e0 <test@@Base+0xa58>
   1332c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13330:	ldr	r1, [pc, #2076]	; 13b54 <test@@Base+0x10cc>
   13334:	ldr	r1, [pc, r1]
   13338:	rev	r1, r1
   1333c:	teq	r0, r1
   13340:	beq	13364 <test@@Base+0x8dc>
   13344:	b	13348 <test@@Base+0x8c0>
   13348:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1334c:	ldr	r1, [fp, #-8]
   13350:	ldr	r2, [fp, #-12]
   13354:	movw	r3, #13
   13358:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1335c:	str	r0, [fp, #-8]
   13360:	b	13994 <test@@Base+0xf0c>
   13364:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13368:	ldr	r1, [fp, #-8]
   1336c:	add	r1, r1, #4
   13370:	ldr	r2, [fp, #-12]
   13374:	bl	13cdc <test@@Base+0x1254>
   13378:	str	r0, [fp, #-8]
   1337c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13380:	ldr	r1, [fp, #-8]
   13384:	ldr	r2, [fp, #-12]
   13388:	bl	13b5c <test@@Base+0x10d4>
   1338c:	str	r0, [fp, #-8]
   13390:	ldr	r0, [fp, #-8]
   13394:	ldr	r1, [fp, #-12]
   13398:	cmp	r0, r1
   1339c:	bne	133bc <test@@Base+0x934>
   133a0:	ldr	r0, [pc, #1768]	; 13a90 <test@@Base+0x1008>
   133a4:	add	r1, pc, r0
   133a8:	ldr	r0, [pc, #1764]	; 13a94 <test@@Base+0x100c>
   133ac:	ldr	r0, [pc, r0]
   133b0:	ldr	r0, [r0]
   133b4:	bl	12944 <fprintf@plt>
   133b8:	b	13994 <test@@Base+0xf0c>
   133bc:	ldr	r0, [fp, #-12]
   133c0:	ldr	r1, [fp, #-8]
   133c4:	cmp	r0, r1
   133c8:	bls	133ec <test@@Base+0x964>
   133cc:	ldr	r0, [fp, #-8]
   133d0:	ldrb	r0, [r0]
   133d4:	cmp	r0, #58	; 0x3a
   133d8:	bne	133ec <test@@Base+0x964>
   133dc:	ldr	r0, [fp, #-8]
   133e0:	add	r0, r0, #1
   133e4:	str	r0, [fp, #-8]
   133e8:	b	13434 <test@@Base+0x9ac>
   133ec:	ldr	r0, [pc, #1676]	; 13a80 <test@@Base+0xff8>
   133f0:	add	r1, pc, r0
   133f4:	ldr	r0, [pc, #1672]	; 13a84 <test@@Base+0xffc>
   133f8:	ldr	r0, [pc, r0]
   133fc:	ldr	r0, [r0]
   13400:	movw	r2, #58	; 0x3a
   13404:	bl	12944 <fprintf@plt>
   13408:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1340c:	ldr	r2, [fp, #-8]
   13410:	ldr	r3, [fp, #-12]
   13414:	str	r0, [sp, #48]	; 0x30
   13418:	mov	r0, r1
   1341c:	mov	r1, r2
   13420:	mov	r2, r3
   13424:	movw	r3, #17
   13428:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1342c:	str	r0, [fp, #-8]
   13430:	b	13994 <test@@Base+0xf0c>
   13434:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13438:	ldr	r1, [fp, #-8]
   1343c:	ldr	r2, [fp, #-12]
   13440:	bl	13b5c <test@@Base+0x10d4>
   13444:	str	r0, [fp, #-8]
   13448:	ldr	r0, [fp, #-8]
   1344c:	ldr	r1, [fp, #-12]
   13450:	cmp	r0, r1
   13454:	bne	13474 <test@@Base+0x9ec>
   13458:	ldr	r0, [pc, #1576]	; 13a88 <test@@Base+0x1000>
   1345c:	add	r1, pc, r0
   13460:	ldr	r0, [pc, #1572]	; 13a8c <test@@Base+0x1004>
   13464:	ldr	r0, [pc, r0]
   13468:	ldr	r0, [r0]
   1346c:	bl	12944 <fprintf@plt>
   13470:	b	13994 <test@@Base+0xf0c>
   13474:	ldr	r0, [fp, #-4]
   13478:	movw	r1, #2
   1347c:	movw	r2, #4
   13480:	movw	r3, #4
   13484:	uxth	r3, r3
   13488:	bl	18a94 <flatcc_builder_table_add@@Base>
   1348c:	str	r0, [sp, #88]	; 0x58
   13490:	ldr	r0, [sp, #88]	; 0x58
   13494:	movw	r1, #0
   13498:	cmp	r0, r1
   1349c:	bne	134a4 <test@@Base+0xa1c>
   134a0:	b	13994 <test@@Base+0xf0c>
   134a4:	ldr	r0, [fp, #-8]
   134a8:	str	r0, [fp, #-92]	; 0xffffffa4
   134ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134b0:	ldr	r1, [fp, #-8]
   134b4:	ldr	r2, [fp, #-12]
   134b8:	ldr	r3, [sp, #88]	; 0x58
   134bc:	bl	140a4 <test@@Base+0x161c>
   134c0:	str	r0, [fp, #-8]
   134c4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   134c8:	ldr	r1, [fp, #-8]
   134cc:	cmp	r0, r1
   134d0:	bne	134d8 <test@@Base+0xa50>
   134d4:	b	13994 <test@@Base+0xf0c>
   134d8:	b	134dc <test@@Base+0xa54>
   134dc:	b	134e0 <test@@Base+0xa58>
   134e0:	b	134e4 <test@@Base+0xa5c>
   134e4:	b	134e8 <test@@Base+0xa60>
   134e8:	b	137f8 <test@@Base+0xd70>
   134ec:	ldr	r0, [fp, #-84]	; 0xffffffac
   134f0:	ldr	r1, [pc, #1632]	; 13b58 <test@@Base+0x10d0>
   134f4:	ldr	r1, [pc, r1]
   134f8:	rev	r1, r1
   134fc:	teq	r0, r1
   13500:	beq	13524 <test@@Base+0xa9c>
   13504:	b	13508 <test@@Base+0xa80>
   13508:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1350c:	ldr	r1, [fp, #-8]
   13510:	ldr	r2, [fp, #-12]
   13514:	movw	r3, #13
   13518:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1351c:	str	r0, [fp, #-8]
   13520:	b	13994 <test@@Base+0xf0c>
   13524:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13528:	ldr	r1, [fp, #-8]
   1352c:	add	r1, r1, #4
   13530:	ldr	r2, [fp, #-12]
   13534:	bl	13cdc <test@@Base+0x1254>
   13538:	str	r0, [fp, #-8]
   1353c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13540:	ldr	r1, [fp, #-8]
   13544:	ldr	r2, [fp, #-12]
   13548:	bl	13b5c <test@@Base+0x10d4>
   1354c:	str	r0, [fp, #-8]
   13550:	ldr	r0, [fp, #-8]
   13554:	ldr	r1, [fp, #-12]
   13558:	cmp	r0, r1
   1355c:	bne	1357c <test@@Base+0xaf4>
   13560:	ldr	r0, [pc, #1296]	; 13a78 <test@@Base+0xff0>
   13564:	add	r1, pc, r0
   13568:	ldr	r0, [pc, #1292]	; 13a7c <test@@Base+0xff4>
   1356c:	ldr	r0, [pc, r0]
   13570:	ldr	r0, [r0]
   13574:	bl	12944 <fprintf@plt>
   13578:	b	13994 <test@@Base+0xf0c>
   1357c:	ldr	r0, [fp, #-12]
   13580:	ldr	r1, [fp, #-8]
   13584:	cmp	r0, r1
   13588:	bls	135ac <test@@Base+0xb24>
   1358c:	ldr	r0, [fp, #-8]
   13590:	ldrb	r0, [r0]
   13594:	cmp	r0, #58	; 0x3a
   13598:	bne	135ac <test@@Base+0xb24>
   1359c:	ldr	r0, [fp, #-8]
   135a0:	add	r0, r0, #1
   135a4:	str	r0, [fp, #-8]
   135a8:	b	135f4 <test@@Base+0xb6c>
   135ac:	ldr	r0, [pc, #1204]	; 13a68 <test@@Base+0xfe0>
   135b0:	add	r1, pc, r0
   135b4:	ldr	r0, [pc, #1200]	; 13a6c <test@@Base+0xfe4>
   135b8:	ldr	r0, [pc, r0]
   135bc:	ldr	r0, [r0]
   135c0:	movw	r2, #58	; 0x3a
   135c4:	bl	12944 <fprintf@plt>
   135c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   135cc:	ldr	r2, [fp, #-8]
   135d0:	ldr	r3, [fp, #-12]
   135d4:	str	r0, [sp, #44]	; 0x2c
   135d8:	mov	r0, r1
   135dc:	mov	r1, r2
   135e0:	mov	r2, r3
   135e4:	movw	r3, #17
   135e8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   135ec:	str	r0, [fp, #-8]
   135f0:	b	13994 <test@@Base+0xf0c>
   135f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135f8:	ldr	r1, [fp, #-8]
   135fc:	ldr	r2, [fp, #-12]
   13600:	bl	13b5c <test@@Base+0x10d4>
   13604:	str	r0, [fp, #-8]
   13608:	ldr	r0, [fp, #-8]
   1360c:	ldr	r1, [fp, #-12]
   13610:	cmp	r0, r1
   13614:	bne	13634 <test@@Base+0xbac>
   13618:	ldr	r0, [pc, #1104]	; 13a70 <test@@Base+0xfe8>
   1361c:	add	r1, pc, r0
   13620:	ldr	r0, [pc, #1100]	; 13a74 <test@@Base+0xfec>
   13624:	ldr	r0, [pc, r0]
   13628:	ldr	r0, [r0]
   1362c:	bl	12944 <fprintf@plt>
   13630:	b	13994 <test@@Base+0xf0c>
   13634:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13638:	ldr	r1, [fp, #-8]
   1363c:	ldr	r2, [fp, #-12]
   13640:	bl	1417c <test@@Base+0x16f4>
   13644:	str	r0, [fp, #-8]
   13648:	ldr	r0, [fp, #-8]
   1364c:	str	r0, [fp, #-92]	; 0xffffffa4
   13650:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13654:	ldr	r1, [fp, #-8]
   13658:	ldr	r2, [fp, #-12]
   1365c:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   13660:	str	r0, [fp, #-8]
   13664:	ldr	r0, [fp, #-8]
   13668:	ldr	r1, [fp, #-12]
   1366c:	cmp	r0, r1
   13670:	bne	13678 <test@@Base+0xbf0>
   13674:	b	13994 <test@@Base+0xf0c>
   13678:	ldr	r0, [fp, #-8]
   1367c:	ldrb	r0, [r0]
   13680:	cmp	r0, #34	; 0x22
   13684:	bne	136a8 <test@@Base+0xc20>
   13688:	ldr	r0, [fp, #-4]
   1368c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13690:	ldr	r2, [fp, #-8]
   13694:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13698:	sub	r2, r2, r3
   1369c:	bl	19514 <flatcc_builder_create_string@@Base>
   136a0:	str	r0, [fp, #-72]	; 0xffffffb8
   136a4:	b	137a0 <test@@Base+0xd18>
   136a8:	ldr	r0, [fp, #-4]
   136ac:	bl	17010 <flatcc_builder_start_string@@Base>
   136b0:	ldr	r1, [fp, #-4]
   136b4:	ldr	r2, [fp, #-8]
   136b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136bc:	sub	r2, r2, r3
   136c0:	str	r0, [sp, #40]	; 0x28
   136c4:	mov	r0, r1
   136c8:	mov	r1, r2
   136cc:	bl	167d0 <flatcc_builder_extend_string@@Base>
   136d0:	str	r0, [sp, #96]	; 0x60
   136d4:	ldr	r0, [sp, #96]	; 0x60
   136d8:	movw	r1, #0
   136dc:	cmp	r0, r1
   136e0:	bne	136e8 <test@@Base+0xc60>
   136e4:	b	13994 <test@@Base+0xf0c>
   136e8:	ldr	r0, [sp, #96]	; 0x60
   136ec:	ldr	r1, [fp, #-92]	; 0xffffffa4
   136f0:	ldr	r2, [fp, #-8]
   136f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136f8:	sub	r2, r2, r3
   136fc:	bl	128d8 <memcpy@plt>
   13700:	add	r3, sp, #92	; 0x5c
   13704:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13708:	ldr	r1, [fp, #-8]
   1370c:	ldr	r2, [fp, #-12]
   13710:	bl	1c35c <flatcc_json_parser_string_escape@@Base>
   13714:	add	r1, sp, #92	; 0x5c
   13718:	str	r0, [fp, #-8]
   1371c:	ldr	r0, [fp, #-4]
   13720:	add	r1, r1, #1
   13724:	ldrb	r2, [sp, #92]	; 0x5c
   13728:	bl	16868 <flatcc_builder_append_string@@Base>
   1372c:	ldr	r1, [fp, #-8]
   13730:	str	r1, [fp, #-92]	; 0xffffffa4
   13734:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13738:	ldr	r2, [fp, #-8]
   1373c:	ldr	r3, [fp, #-12]
   13740:	str	r0, [sp, #36]	; 0x24
   13744:	mov	r0, r1
   13748:	mov	r1, r2
   1374c:	mov	r2, r3
   13750:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   13754:	str	r0, [fp, #-8]
   13758:	ldr	r0, [fp, #-8]
   1375c:	ldr	r1, [fp, #-12]
   13760:	cmp	r0, r1
   13764:	bne	1376c <test@@Base+0xce4>
   13768:	b	13994 <test@@Base+0xf0c>
   1376c:	ldr	r0, [fp, #-4]
   13770:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13774:	ldr	r2, [fp, #-8]
   13778:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1377c:	sub	r2, r2, r3
   13780:	bl	16868 <flatcc_builder_append_string@@Base>
   13784:	ldr	r0, [fp, #-8]
   13788:	ldrb	r0, [r0]
   1378c:	cmp	r0, #34	; 0x22
   13790:	bne	13700 <test@@Base+0xc78>
   13794:	ldr	r0, [fp, #-4]
   13798:	bl	1971c <flatcc_builder_end_string@@Base>
   1379c:	str	r0, [fp, #-72]	; 0xffffffb8
   137a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137a4:	cmp	r0, #0
   137a8:	bne	137b0 <test@@Base+0xd28>
   137ac:	b	13994 <test@@Base+0xf0c>
   137b0:	ldr	r0, [fp, #-4]
   137b4:	movw	r1, #10
   137b8:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   137bc:	str	r0, [fp, #-76]	; 0xffffffb4
   137c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137c4:	movw	r1, #0
   137c8:	cmp	r0, r1
   137cc:	bne	137d4 <test@@Base+0xd4c>
   137d0:	b	13994 <test@@Base+0xf0c>
   137d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   137dc:	str	r0, [r1]
   137e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137e4:	ldr	r1, [fp, #-8]
   137e8:	ldr	r2, [fp, #-12]
   137ec:	bl	141ec <test@@Base+0x1764>
   137f0:	str	r0, [fp, #-8]
   137f4:	b	137f8 <test@@Base+0xd70>
   137f8:	b	137fc <test@@Base+0xd74>
   137fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13800:	ldr	r1, [fp, #-8]
   13804:	ldr	r2, [fp, #-12]
   13808:	bl	13b5c <test@@Base+0x10d4>
   1380c:	str	r0, [fp, #-8]
   13810:	ldr	r0, [fp, #-8]
   13814:	ldr	r1, [fp, #-12]
   13818:	cmp	r0, r1
   1381c:	bne	1383c <test@@Base+0xdb4>
   13820:	ldr	r0, [pc, #704]	; 13ae8 <test@@Base+0x1060>
   13824:	add	r1, pc, r0
   13828:	ldr	r0, [pc, #700]	; 13aec <test@@Base+0x1064>
   1382c:	ldr	r0, [pc, r0]
   13830:	ldr	r0, [r0]
   13834:	bl	12944 <fprintf@plt>
   13838:	b	13994 <test@@Base+0xf0c>
   1383c:	ldr	r0, [fp, #-8]
   13840:	ldrb	r0, [r0]
   13844:	cmp	r0, #44	; 0x2c
   13848:	bne	138b0 <test@@Base+0xe28>
   1384c:	ldr	r0, [fp, #-8]
   13850:	add	r0, r0, #1
   13854:	str	r0, [fp, #-8]
   13858:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1385c:	ldr	r1, [fp, #-8]
   13860:	ldr	r2, [fp, #-12]
   13864:	bl	13b5c <test@@Base+0x10d4>
   13868:	str	r0, [fp, #-8]
   1386c:	ldr	r0, [fp, #-8]
   13870:	ldr	r1, [fp, #-12]
   13874:	cmp	r0, r1
   13878:	bne	13898 <test@@Base+0xe10>
   1387c:	ldr	r0, [pc, #604]	; 13ae0 <test@@Base+0x1058>
   13880:	add	r1, pc, r0
   13884:	ldr	r0, [pc, #600]	; 13ae4 <test@@Base+0x105c>
   13888:	ldr	r0, [pc, r0]
   1388c:	ldr	r0, [r0]
   13890:	bl	12944 <fprintf@plt>
   13894:	b	13994 <test@@Base+0xf0c>
   13898:	ldr	r0, [fp, #-8]
   1389c:	ldrb	r0, [r0]
   138a0:	cmp	r0, #125	; 0x7d
   138a4:	beq	138ac <test@@Base+0xe24>
   138a8:	b	12c20 <test@@Base+0x198>
   138ac:	b	138b0 <test@@Base+0xe28>
   138b0:	ldr	r0, [fp, #-12]
   138b4:	ldr	r1, [fp, #-8]
   138b8:	cmp	r0, r1
   138bc:	bls	138e0 <test@@Base+0xe58>
   138c0:	ldr	r0, [fp, #-8]
   138c4:	ldrb	r0, [r0]
   138c8:	cmp	r0, #125	; 0x7d
   138cc:	bne	138e0 <test@@Base+0xe58>
   138d0:	ldr	r0, [fp, #-8]
   138d4:	add	r0, r0, #1
   138d8:	str	r0, [fp, #-8]
   138dc:	b	13928 <test@@Base+0xea0>
   138e0:	ldr	r0, [pc, #488]	; 13ad0 <test@@Base+0x1048>
   138e4:	add	r1, pc, r0
   138e8:	ldr	r0, [pc, #484]	; 13ad4 <test@@Base+0x104c>
   138ec:	ldr	r0, [pc, r0]
   138f0:	ldr	r0, [r0]
   138f4:	movw	r2, #125	; 0x7d
   138f8:	bl	12944 <fprintf@plt>
   138fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13900:	ldr	r2, [fp, #-8]
   13904:	ldr	r3, [fp, #-12]
   13908:	str	r0, [sp, #32]
   1390c:	mov	r0, r1
   13910:	mov	r1, r2
   13914:	mov	r2, r3
   13918:	movw	r3, #17
   1391c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13920:	str	r0, [fp, #-8]
   13924:	b	13994 <test@@Base+0xf0c>
   13928:	ldr	r0, [fp, #-4]
   1392c:	bl	17e58 <flatcc_builder_end_table@@Base>
   13930:	str	r0, [fp, #-68]	; 0xffffffbc
   13934:	ldr	r0, [fp, #-4]
   13938:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1393c:	bl	15e0c <flatcc_builder_end_buffer@@Base>
   13940:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13944:	ldr	r2, [fp, #-8]
   13948:	ldr	r3, [fp, #-12]
   1394c:	str	r0, [sp, #28]
   13950:	mov	r0, r1
   13954:	mov	r1, r2
   13958:	mov	r2, r3
   1395c:	bl	13b5c <test@@Base+0x10d4>
   13960:	str	r0, [fp, #-8]
   13964:	ldr	r0, [fp, #-8]
   13968:	ldr	r1, [fp, #-12]
   1396c:	cmp	r0, r1
   13970:	beq	13990 <test@@Base+0xf08>
   13974:	ldr	r0, [pc, #348]	; 13ad8 <test@@Base+0x1050>
   13978:	add	r1, pc, r0
   1397c:	ldr	r0, [pc, #344]	; 13adc <test@@Base+0x1054>
   13980:	ldr	r0, [pc, r0]
   13984:	ldr	r0, [r0]
   13988:	bl	12944 <fprintf@plt>
   1398c:	b	13994 <test@@Base+0xf0c>
   13990:	b	13994 <test@@Base+0xf0c>
   13994:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13998:	ldr	r0, [r0, #24]
   1399c:	cmp	r0, #0
   139a0:	beq	13a28 <test@@Base+0xfa0>
   139a4:	ldr	r0, [pc, #368]	; 13b1c <test@@Base+0x1094>
   139a8:	ldr	r0, [pc, r0]
   139ac:	ldr	r0, [r0]
   139b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   139b4:	ldr	r2, [r1, #16]
   139b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   139bc:	ldr	r1, [r1, #36]	; 0x24
   139c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   139c4:	ldr	r3, [r3, #4]
   139c8:	sub	r1, r1, r3
   139cc:	add	r3, r1, #1
   139d0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   139d4:	ldr	r1, [r1, #24]
   139d8:	str	r0, [sp, #24]
   139dc:	mov	r0, r1
   139e0:	str	r2, [sp, #20]
   139e4:	str	r3, [sp, #16]
   139e8:	bl	1bc6c <flatcc_json_parser_error_string@@Base>
   139ec:	ldr	r1, [pc, #292]	; 13b18 <test@@Base+0x1090>
   139f0:	add	r1, pc, r1
   139f4:	ldr	r2, [sp, #24]
   139f8:	str	r0, [sp, #12]
   139fc:	mov	r0, r2
   13a00:	ldr	r2, [sp, #20]
   13a04:	ldr	r3, [sp, #16]
   13a08:	ldr	ip, [sp, #12]
   13a0c:	str	ip, [sp]
   13a10:	bl	12944 <fprintf@plt>
   13a14:	ldr	r1, [fp, #-4]
   13a18:	str	r0, [sp, #8]
   13a1c:	mov	r0, r1
   13a20:	bl	14c0c <flatcc_builder_reset@@Base>
   13a24:	b	13a40 <test@@Base+0xfb8>
   13a28:	ldr	r0, [pc, #224]	; 13b10 <test@@Base+0x1088>
   13a2c:	add	r1, pc, r0
   13a30:	ldr	r0, [pc, #220]	; 13b14 <test@@Base+0x108c>
   13a34:	ldr	r0, [pc, r0]
   13a38:	ldr	r0, [r0]
   13a3c:	bl	12944 <fprintf@plt>
   13a40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a44:	ldr	r0, [r0, #24]
   13a48:	ldr	r1, [fp, #-16]
   13a4c:	str	r0, [r1]
   13a50:	ldr	r0, [fp, #-8]
   13a54:	mov	sp, fp
   13a58:	pop	{fp, pc}
   13a5c:	andeq	pc, r0, sl, asr #12
   13a60:	andeq	pc, r0, r5, ror #10
   13a64:			; <UNDEFINED> instruction: 0x000224b8
   13a68:	andeq	lr, r0, r5, asr #22
   13a6c:	muleq	r2, r8, sl
   13a70:	andeq	lr, r0, fp, asr #21
   13a74:	andeq	r1, r2, ip, lsr #20
   13a78:	andeq	lr, r0, r3, lsl #23
   13a7c:	andeq	r1, r2, r4, ror #21
   13a80:	andeq	lr, r0, r5, lsl #26
   13a84:	andeq	r1, r2, r8, asr ip
   13a88:	andeq	lr, r0, fp, lsl #25
   13a8c:	andeq	r1, r2, ip, ror #23
   13a90:	andeq	lr, r0, r3, asr #26
   13a94:	andeq	r1, r2, r4, lsr #25
   13a98:			; <UNDEFINED> instruction: 0x0000eeb9
   13a9c:	andeq	r1, r2, ip, lsl #28
   13aa0:	andeq	lr, r0, pc, lsr lr
   13aa4:	andeq	r1, r2, r0, lsr #27
   13aa8:	strdeq	lr, [r0], -r7
   13aac:	andeq	r1, r2, r8, asr lr
   13ab0:	andeq	pc, r0, r1, lsr r1	; <UNPREDICTABLE>
   13ab4:	andeq	r2, r2, r4, lsl #1
   13ab8:	strheq	pc, [r0], -r7	; <UNPREDICTABLE>
   13abc:	andeq	r2, r2, r8, lsl r0
   13ac0:	andeq	pc, r0, pc, ror #2
   13ac4:	ldrdeq	r2, [r2], -r0
   13ac8:	andeq	pc, r0, sp, asr r3	; <UNPREDICTABLE>
   13acc:			; <UNDEFINED> instruction: 0x000222b0
   13ad0:	andeq	lr, r0, r1, lsl r8
   13ad4:	andeq	r1, r2, r4, ror #14
   13ad8:			; <UNDEFINED> instruction: 0x0000e7b8
   13adc:	ldrdeq	r1, [r2], -r0
   13ae0:	andeq	lr, r0, r7, ror #16
   13ae4:	andeq	r1, r2, r8, asr #15
   13ae8:	andeq	lr, r0, r3, asr #17
   13aec:	andeq	r1, r2, r4, lsr #16
   13af0:	andeq	pc, r0, r3, ror #5
   13af4:	andeq	r2, r2, r4, asr #4
   13af8:	muleq	r0, fp, r3
   13afc:	strdeq	r2, [r2], -ip
   13b00:	andeq	pc, r0, fp, ror #9
   13b04:	andeq	r2, r2, ip, asr #8
   13b08:	andeq	pc, r0, r3, lsr #11
   13b0c:	andeq	r2, r2, r4, lsl #10
   13b10:	andeq	lr, r0, sl, lsr #14
   13b14:	andeq	r1, r2, ip, lsl r6
   13b18:	andeq	lr, r0, fp, asr r7
   13b1c:	andeq	r1, r2, r8, lsr #13
   13b20:	andeq	pc, r0, r3, lsl #9
   13b24:	andeq	pc, r0, fp, ror r4	; <UNPREDICTABLE>
   13b28:	andeq	pc, r0, lr, asr #8
   13b2c:	andeq	pc, r0, r6, asr #8
   13b30:	andeq	pc, r0, r8, lsl #5
   13b34:	andeq	pc, r0, sp, ror #4
   13b38:	andeq	pc, r0, r5, ror #4
   13b3c:	andeq	pc, r0, r7, lsr #4
   13b40:	andeq	pc, r0, pc, lsl r2	; <UNPREDICTABLE>
   13b44:	andeq	pc, r0, sp, asr r0	; <UNPREDICTABLE>
   13b48:	andeq	pc, r0, r5, asr r0	; <UNPREDICTABLE>
   13b4c:	andeq	lr, r0, r2, asr #31
   13b50:	andeq	lr, r0, fp, lsr #31
   13b54:	strdeq	lr, [r0], -r2
   13b58:	andeq	lr, r0, r4, lsr #24
   13b5c:	push	{fp, lr}
   13b60:	mov	fp, sp
   13b64:	sub	sp, sp, #16
   13b68:	str	r0, [sp, #8]
   13b6c:	str	r1, [sp, #4]
   13b70:	str	r2, [sp]
   13b74:	ldr	r0, [sp]
   13b78:	ldr	r1, [sp, #4]
   13b7c:	sub	r0, r0, r1
   13b80:	cmp	r0, #1
   13b84:	ble	13bd8 <test@@Base+0x1150>
   13b88:	ldr	r0, [sp, #4]
   13b8c:	ldrb	r0, [r0]
   13b90:	cmp	r0, #32
   13b94:	ble	13ba4 <test@@Base+0x111c>
   13b98:	ldr	r0, [sp, #4]
   13b9c:	str	r0, [fp, #-4]
   13ba0:	b	13bec <test@@Base+0x1164>
   13ba4:	ldr	r0, [sp, #4]
   13ba8:	ldrb	r0, [r0]
   13bac:	cmp	r0, #32
   13bb0:	bne	13bd4 <test@@Base+0x114c>
   13bb4:	ldr	r0, [sp, #4]
   13bb8:	ldrb	r0, [r0, #1]
   13bbc:	cmp	r0, #32
   13bc0:	ble	13bd4 <test@@Base+0x114c>
   13bc4:	ldr	r0, [sp, #4]
   13bc8:	add	r0, r0, #1
   13bcc:	str	r0, [fp, #-4]
   13bd0:	b	13bec <test@@Base+0x1164>
   13bd4:	b	13bd8 <test@@Base+0x1150>
   13bd8:	ldr	r0, [sp, #8]
   13bdc:	ldr	r1, [sp, #4]
   13be0:	ldr	r2, [sp]
   13be4:	bl	1c178 <flatcc_json_parser_space_ext@@Base>
   13be8:	str	r0, [fp, #-4]
   13bec:	ldr	r0, [fp, #-4]
   13bf0:	mov	sp, fp
   13bf4:	pop	{fp, pc}
   13bf8:	push	{fp, lr}
   13bfc:	mov	fp, sp
   13c00:	sub	sp, sp, #16
   13c04:	str	r0, [sp, #8]
   13c08:	str	r1, [sp, #4]
   13c0c:	str	r2, [sp]
   13c10:	ldr	r0, [sp, #4]
   13c14:	ldr	r1, [sp]
   13c18:	cmp	r0, r1
   13c1c:	bne	13c2c <test@@Base+0x11a4>
   13c20:	ldr	r0, [sp, #4]
   13c24:	str	r0, [fp, #-4]
   13c28:	b	13c98 <test@@Base+0x1210>
   13c2c:	ldr	r0, [sp, #4]
   13c30:	ldrb	r0, [r0]
   13c34:	cmp	r0, #34	; 0x22
   13c38:	bne	13c58 <test@@Base+0x11d0>
   13c3c:	ldr	r0, [sp, #4]
   13c40:	add	r0, r0, #1
   13c44:	str	r0, [sp, #4]
   13c48:	ldr	r0, [sp, #8]
   13c4c:	movw	r1, #0
   13c50:	str	r1, [r0, #12]
   13c54:	b	13c90 <test@@Base+0x1208>
   13c58:	ldr	r0, [sp, #4]
   13c5c:	ldrb	r0, [r0]
   13c60:	cmp	r0, #46	; 0x2e
   13c64:	bne	13c84 <test@@Base+0x11fc>
   13c68:	ldr	r0, [sp, #8]
   13c6c:	ldr	r1, [sp, #4]
   13c70:	ldr	r2, [sp]
   13c74:	movw	r3, #5
   13c78:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13c7c:	str	r0, [fp, #-4]
   13c80:	b	13c98 <test@@Base+0x1210>
   13c84:	ldr	r0, [sp, #8]
   13c88:	movw	r1, #1
   13c8c:	str	r1, [r0, #12]
   13c90:	ldr	r0, [sp, #4]
   13c94:	str	r0, [fp, #-4]
   13c98:	ldr	r0, [fp, #-4]
   13c9c:	mov	sp, fp
   13ca0:	pop	{fp, pc}
   13ca4:	push	{fp, lr}
   13ca8:	mov	fp, sp
   13cac:	sub	sp, sp, #16
   13cb0:	str	r0, [fp, #-4]
   13cb4:	str	r1, [sp, #8]
   13cb8:	ldr	r0, [sp, #8]
   13cbc:	ldr	r1, [fp, #-4]
   13cc0:	sub	r0, r0, r1
   13cc4:	str	r0, [sp, #4]
   13cc8:	ldr	r0, [fp, #-4]
   13ccc:	ldr	r1, [sp, #8]
   13cd0:	bl	142c4 <main@@Base+0x68>
   13cd4:	mov	sp, fp
   13cd8:	pop	{fp, pc}
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	sub	sp, sp, #32
   13ce8:	str	r0, [fp, #-8]
   13cec:	str	r1, [fp, #-12]
   13cf0:	str	r2, [sp, #16]
   13cf4:	movw	r0, #0
   13cf8:	strb	r0, [sp, #14]
   13cfc:	ldr	r0, [fp, #-8]
   13d00:	ldr	r0, [r0, #12]
   13d04:	cmp	r0, #0
   13d08:	beq	13e10 <test@@Base+0x1388>
   13d0c:	b	13d10 <test@@Base+0x1288>
   13d10:	ldr	r0, [fp, #-12]
   13d14:	ldr	r1, [sp, #16]
   13d18:	cmp	r0, r1
   13d1c:	movw	r0, #0
   13d20:	str	r0, [sp, #8]
   13d24:	beq	13d40 <test@@Base+0x12b8>
   13d28:	ldr	r0, [fp, #-12]
   13d2c:	ldrb	r0, [r0]
   13d30:	cmp	r0, #32
   13d34:	movw	r0, #0
   13d38:	movgt	r0, #1
   13d3c:	str	r0, [sp, #8]
   13d40:	ldr	r0, [sp, #8]
   13d44:	tst	r0, #1
   13d48:	beq	13de4 <test@@Base+0x135c>
   13d4c:	ldr	r0, [fp, #-12]
   13d50:	ldrb	r0, [r0]
   13d54:	strb	r0, [sp, #15]
   13d58:	strb	r0, [sp, #14]
   13d5c:	ldrb	r0, [sp, #15]
   13d60:	cmp	r0, #95	; 0x5f
   13d64:	beq	13d9c <test@@Base+0x1314>
   13d68:	ldrb	r0, [sp, #15]
   13d6c:	cmp	r0, #46	; 0x2e
   13d70:	beq	13d9c <test@@Base+0x1314>
   13d74:	ldrb	r0, [sp, #15]
   13d78:	and	r0, r0, #128	; 0x80
   13d7c:	cmp	r0, #0
   13d80:	bne	13d9c <test@@Base+0x1314>
   13d84:	ldrb	r0, [sp, #15]
   13d88:	cmp	r0, #48	; 0x30
   13d8c:	blt	13dac <test@@Base+0x1324>
   13d90:	ldrb	r0, [sp, #15]
   13d94:	cmp	r0, #57	; 0x39
   13d98:	bgt	13dac <test@@Base+0x1324>
   13d9c:	ldr	r0, [fp, #-12]
   13da0:	add	r0, r0, #1
   13da4:	str	r0, [fp, #-12]
   13da8:	b	13d10 <test@@Base+0x1288>
   13dac:	ldrb	r0, [sp, #15]
   13db0:	orr	r0, r0, #32
   13db4:	strb	r0, [sp, #15]
   13db8:	ldrb	r0, [sp, #15]
   13dbc:	cmp	r0, #97	; 0x61
   13dc0:	blt	13de0 <test@@Base+0x1358>
   13dc4:	ldrb	r0, [sp, #15]
   13dc8:	cmp	r0, #122	; 0x7a
   13dcc:	bgt	13de0 <test@@Base+0x1358>
   13dd0:	ldr	r0, [fp, #-12]
   13dd4:	add	r0, r0, #1
   13dd8:	str	r0, [fp, #-12]
   13ddc:	b	13d10 <test@@Base+0x1288>
   13de0:	b	13de4 <test@@Base+0x135c>
   13de4:	ldrb	r0, [sp, #14]
   13de8:	cmp	r0, #46	; 0x2e
   13dec:	bne	13e0c <test@@Base+0x1384>
   13df0:	ldr	r0, [fp, #-8]
   13df4:	ldr	r1, [fp, #-12]
   13df8:	ldr	r2, [sp, #16]
   13dfc:	movw	r3, #5
   13e00:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13e04:	str	r0, [fp, #-4]
   13e08:	b	13ee4 <test@@Base+0x145c>
   13e0c:	b	13edc <test@@Base+0x1454>
   13e10:	b	13e14 <test@@Base+0x138c>
   13e14:	ldr	r0, [fp, #-12]
   13e18:	ldr	r1, [sp, #16]
   13e1c:	cmp	r0, r1
   13e20:	movw	r0, #0
   13e24:	str	r0, [sp, #4]
   13e28:	beq	13e44 <test@@Base+0x13bc>
   13e2c:	ldr	r0, [fp, #-12]
   13e30:	ldrb	r0, [r0]
   13e34:	cmp	r0, #34	; 0x22
   13e38:	movw	r0, #0
   13e3c:	movne	r0, #1
   13e40:	str	r0, [sp, #4]
   13e44:	ldr	r0, [sp, #4]
   13e48:	tst	r0, #1
   13e4c:	beq	13e94 <test@@Base+0x140c>
   13e50:	ldr	r0, [fp, #-12]
   13e54:	ldrb	r0, [r0]
   13e58:	cmp	r0, #92	; 0x5c
   13e5c:	bne	13e84 <test@@Base+0x13fc>
   13e60:	ldr	r0, [sp, #16]
   13e64:	ldr	r1, [fp, #-12]
   13e68:	sub	r0, r0, r1
   13e6c:	cmp	r0, #2
   13e70:	bge	13e78 <test@@Base+0x13f0>
   13e74:	b	13e94 <test@@Base+0x140c>
   13e78:	ldr	r0, [fp, #-12]
   13e7c:	add	r0, r0, #1
   13e80:	str	r0, [fp, #-12]
   13e84:	ldr	r0, [fp, #-12]
   13e88:	add	r0, r0, #1
   13e8c:	str	r0, [fp, #-12]
   13e90:	b	13e14 <test@@Base+0x138c>
   13e94:	ldr	r0, [fp, #-12]
   13e98:	ldr	r1, [sp, #16]
   13e9c:	cmp	r0, r1
   13ea0:	beq	13eb4 <test@@Base+0x142c>
   13ea4:	ldr	r0, [fp, #-12]
   13ea8:	ldrb	r0, [r0]
   13eac:	cmp	r0, #34	; 0x22
   13eb0:	beq	13ed0 <test@@Base+0x1448>
   13eb4:	ldr	r0, [fp, #-8]
   13eb8:	ldr	r1, [fp, #-12]
   13ebc:	ldr	r2, [sp, #16]
   13ec0:	movw	r3, #20
   13ec4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   13ec8:	str	r0, [fp, #-4]
   13ecc:	b	13ee4 <test@@Base+0x145c>
   13ed0:	ldr	r0, [fp, #-12]
   13ed4:	add	r0, r0, #1
   13ed8:	str	r0, [fp, #-12]
   13edc:	ldr	r0, [fp, #-12]
   13ee0:	str	r0, [fp, #-4]
   13ee4:	ldr	r0, [fp, #-4]
   13ee8:	mov	sp, fp
   13eec:	pop	{fp, pc}
   13ef0:	push	{r4, r5, fp, lr}
   13ef4:	add	fp, sp, #8
   13ef8:	sub	sp, sp, #56	; 0x38
   13efc:	str	r0, [fp, #-16]
   13f00:	str	r1, [fp, #-20]	; 0xffffffec
   13f04:	str	r2, [fp, #-24]	; 0xffffffe8
   13f08:	str	r3, [fp, #-28]	; 0xffffffe4
   13f0c:	mov	r0, #0
   13f10:	str	r0, [sp, #28]
   13f14:	str	r0, [sp, #24]
   13f18:	movw	r0, #0
   13f1c:	str	r0, [sp, #20]
   13f20:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f24:	str	r0, [sp, #16]
   13f28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13f2c:	movw	r1, #0
   13f30:	strb	r1, [r0]
   13f34:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13f3c:	cmp	r0, r1
   13f40:	bne	13f50 <test@@Base+0x14c8>
   13f44:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f48:	str	r0, [fp, #-12]
   13f4c:	b	13fc0 <test@@Base+0x1538>
   13f50:	ldr	r0, [fp, #-16]
   13f54:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f5c:	add	r3, sp, #20
   13f60:	add	ip, sp, #24
   13f64:	str	ip, [sp]
   13f68:	bl	1e6cc <flatcc_json_parser_integer@@Base>
   13f6c:	str	r0, [fp, #-20]	; 0xffffffec
   13f70:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f74:	ldr	r1, [sp, #16]
   13f78:	cmp	r0, r1
   13f7c:	beq	13fb8 <test@@Base+0x1530>
   13f80:	ldr	r0, [fp, #-16]
   13f84:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f8c:	ldr	r3, [sp, #20]
   13f90:	ldr	ip, [sp, #24]
   13f94:	ldr	lr, [sp, #28]
   13f98:	ldr	r4, [fp, #-28]	; 0xffffffe4
   13f9c:	mov	r5, sp
   13fa0:	str	r4, [r5, #8]
   13fa4:	str	lr, [r5, #4]
   13fa8:	str	ip, [r5]
   13fac:	bl	14438 <main@@Base+0x1dc>
   13fb0:	str	r0, [fp, #-12]
   13fb4:	b	13fc0 <test@@Base+0x1538>
   13fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fbc:	str	r0, [fp, #-12]
   13fc0:	ldr	r0, [fp, #-12]
   13fc4:	sub	sp, fp, #8
   13fc8:	pop	{r4, r5, fp, pc}
   13fcc:	push	{r4, r5, fp, lr}
   13fd0:	add	fp, sp, #8
   13fd4:	sub	sp, sp, #56	; 0x38
   13fd8:	str	r0, [fp, #-16]
   13fdc:	str	r1, [fp, #-20]	; 0xffffffec
   13fe0:	str	r2, [fp, #-24]	; 0xffffffe8
   13fe4:	str	r3, [fp, #-28]	; 0xffffffe4
   13fe8:	mov	r0, #0
   13fec:	str	r0, [sp, #28]
   13ff0:	str	r0, [sp, #24]
   13ff4:	str	r0, [sp, #20]
   13ff8:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ffc:	str	r1, [sp, #16]
   14000:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14004:	str	r0, [r1, #4]
   14008:	str	r0, [r1]
   1400c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14010:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14014:	cmp	r0, r1
   14018:	bne	14028 <test@@Base+0x15a0>
   1401c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14020:	str	r0, [fp, #-12]
   14024:	b	14098 <test@@Base+0x1610>
   14028:	ldr	r0, [fp, #-16]
   1402c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14030:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14034:	add	r3, sp, #20
   14038:	add	ip, sp, #24
   1403c:	str	ip, [sp]
   14040:	bl	1e6cc <flatcc_json_parser_integer@@Base>
   14044:	str	r0, [fp, #-20]	; 0xffffffec
   14048:	ldr	r0, [fp, #-20]	; 0xffffffec
   1404c:	ldr	r1, [sp, #16]
   14050:	cmp	r0, r1
   14054:	beq	14090 <test@@Base+0x1608>
   14058:	ldr	r0, [fp, #-16]
   1405c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14060:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14064:	ldr	r3, [sp, #20]
   14068:	ldr	ip, [sp, #24]
   1406c:	ldr	lr, [sp, #28]
   14070:	ldr	r4, [fp, #-28]	; 0xffffffe4
   14074:	mov	r5, sp
   14078:	str	r4, [r5, #8]
   1407c:	str	lr, [r5, #4]
   14080:	str	ip, [r5]
   14084:	bl	144e4 <main@@Base+0x288>
   14088:	str	r0, [fp, #-12]
   1408c:	b	14098 <test@@Base+0x1610>
   14090:	ldr	r0, [fp, #-20]	; 0xffffffec
   14094:	str	r0, [fp, #-12]
   14098:	ldr	r0, [fp, #-12]
   1409c:	sub	sp, fp, #8
   140a0:	pop	{r4, r5, fp, pc}
   140a4:	push	{r4, r5, fp, lr}
   140a8:	add	fp, sp, #8
   140ac:	sub	sp, sp, #56	; 0x38
   140b0:	str	r0, [fp, #-16]
   140b4:	str	r1, [fp, #-20]	; 0xffffffec
   140b8:	str	r2, [fp, #-24]	; 0xffffffe8
   140bc:	str	r3, [fp, #-28]	; 0xffffffe4
   140c0:	mov	r0, #0
   140c4:	str	r0, [sp, #28]
   140c8:	str	r0, [sp, #24]
   140cc:	movw	r0, #0
   140d0:	str	r0, [sp, #20]
   140d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   140d8:	str	r1, [sp, #16]
   140dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   140e0:	str	r0, [r1]
   140e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   140e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140ec:	cmp	r0, r1
   140f0:	bne	14100 <test@@Base+0x1678>
   140f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   140f8:	str	r0, [fp, #-12]
   140fc:	b	14170 <test@@Base+0x16e8>
   14100:	ldr	r0, [fp, #-16]
   14104:	ldr	r1, [fp, #-20]	; 0xffffffec
   14108:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1410c:	add	r3, sp, #20
   14110:	add	ip, sp, #24
   14114:	str	ip, [sp]
   14118:	bl	1e6cc <flatcc_json_parser_integer@@Base>
   1411c:	str	r0, [fp, #-20]	; 0xffffffec
   14120:	ldr	r0, [fp, #-20]	; 0xffffffec
   14124:	ldr	r1, [sp, #16]
   14128:	cmp	r0, r1
   1412c:	beq	14168 <test@@Base+0x16e0>
   14130:	ldr	r0, [fp, #-16]
   14134:	ldr	r1, [fp, #-20]	; 0xffffffec
   14138:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1413c:	ldr	r3, [sp, #20]
   14140:	ldr	ip, [sp, #24]
   14144:	ldr	lr, [sp, #28]
   14148:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1414c:	mov	r5, sp
   14150:	str	r4, [r5, #8]
   14154:	str	lr, [r5, #4]
   14158:	str	ip, [r5]
   1415c:	bl	145c8 <main@@Base+0x36c>
   14160:	str	r0, [fp, #-12]
   14164:	b	14170 <test@@Base+0x16e8>
   14168:	ldr	r0, [fp, #-20]	; 0xffffffec
   1416c:	str	r0, [fp, #-12]
   14170:	ldr	r0, [fp, #-12]
   14174:	sub	sp, fp, #8
   14178:	pop	{r4, r5, fp, pc}
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	sub	sp, sp, #16
   14188:	str	r0, [sp, #8]
   1418c:	str	r1, [sp, #4]
   14190:	str	r2, [sp]
   14194:	ldr	r0, [sp, #4]
   14198:	ldr	r1, [sp]
   1419c:	cmp	r0, r1
   141a0:	beq	141b4 <test@@Base+0x172c>
   141a4:	ldr	r0, [sp, #4]
   141a8:	ldrb	r0, [r0]
   141ac:	cmp	r0, #34	; 0x22
   141b0:	beq	141d0 <test@@Base+0x1748>
   141b4:	ldr	r0, [sp, #8]
   141b8:	ldr	r1, [sp, #4]
   141bc:	ldr	r2, [sp]
   141c0:	movw	r3, #16
   141c4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   141c8:	str	r0, [fp, #-4]
   141cc:	b	141e0 <test@@Base+0x1758>
   141d0:	ldr	r0, [sp, #4]
   141d4:	add	r0, r0, #1
   141d8:	str	r0, [sp, #4]
   141dc:	str	r0, [fp, #-4]
   141e0:	ldr	r0, [fp, #-4]
   141e4:	mov	sp, fp
   141e8:	pop	{fp, pc}
   141ec:	push	{fp, lr}
   141f0:	mov	fp, sp
   141f4:	sub	sp, sp, #16
   141f8:	str	r0, [sp, #8]
   141fc:	str	r1, [sp, #4]
   14200:	str	r2, [sp]
   14204:	ldr	r0, [sp, #4]
   14208:	ldr	r1, [sp]
   1420c:	cmp	r0, r1
   14210:	beq	14224 <test@@Base+0x179c>
   14214:	ldr	r0, [sp, #4]
   14218:	ldrb	r0, [r0]
   1421c:	cmp	r0, #34	; 0x22
   14220:	beq	14240 <test@@Base+0x17b8>
   14224:	ldr	r0, [sp, #8]
   14228:	ldr	r1, [sp, #4]
   1422c:	ldr	r2, [sp]
   14230:	movw	r3, #20
   14234:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   14238:	str	r0, [fp, #-4]
   1423c:	b	14250 <test@@Base+0x17c8>
   14240:	ldr	r0, [sp, #4]
   14244:	add	r0, r0, #1
   14248:	str	r0, [sp, #4]
   1424c:	str	r0, [fp, #-4]
   14250:	ldr	r0, [fp, #-4]
   14254:	mov	sp, fp
   14258:	pop	{fp, pc}

0001425c <main@@Base>:
   1425c:	push	{r4, r5, fp, lr}
   14260:	add	fp, sp, #8
   14264:	sub	sp, sp, #248	; 0xf8
   14268:	movw	r0, #0
   1426c:	str	r0, [fp, #-12]
   14270:	mvn	r0, #0
   14274:	str	r0, [fp, #-16]
   14278:	add	r0, sp, #8
   1427c:	bl	1498c <flatcc_builder_init@@Base>
   14280:	ldr	r1, [pc, #56]	; 142c0 <main@@Base+0x64>
   14284:	ldr	r1, [pc, r1]
   14288:	movw	r2, #645	; 0x285
   1428c:	add	r2, r1, r2
   14290:	add	r3, sp, #8
   14294:	str	r0, [sp, #4]
   14298:	mov	r0, r3
   1429c:	sub	r3, fp, #16
   142a0:	bl	12a88 <test@@Base>
   142a4:	add	r1, sp, #8
   142a8:	str	r0, [sp]
   142ac:	mov	r0, r1
   142b0:	bl	14c38 <flatcc_builder_clear@@Base>
   142b4:	ldr	r0, [fp, #-16]
   142b8:	sub	sp, fp, #8
   142bc:	pop	{r4, r5, fp, pc}
   142c0:	andeq	r0, r2, r4, asr #27
   142c4:	sub	sp, sp, #24
   142c8:	str	r0, [sp, #20]
   142cc:	str	r1, [sp, #16]
   142d0:	mov	r0, #0
   142d4:	str	r0, [sp, #12]
   142d8:	str	r0, [sp, #8]
   142dc:	ldr	r0, [sp, #16]
   142e0:	ldr	r1, [sp, #20]
   142e4:	sub	r0, r0, r1
   142e8:	str	r0, [sp, #4]
   142ec:	ldr	r0, [sp, #4]
   142f0:	cmp	r0, #8
   142f4:	bls	14300 <main@@Base+0xa4>
   142f8:	movw	r0, #8
   142fc:	str	r0, [sp, #4]
   14300:	ldr	r0, [sp, #4]
   14304:	cmp	r0, #8
   14308:	str	r0, [sp]
   1430c:	bhi	14428 <main@@Base+0x1cc>
   14310:	add	r0, pc, #8
   14314:	ldr	r1, [sp]
   14318:	ldr	r2, [r0, r1, lsl #2]
   1431c:	add	pc, r0, r2
   14320:	andeq	r0, r0, r4, lsl #2
   14324:	andeq	r0, r0, r8, ror #1
   14328:	andeq	r0, r0, ip, asr #1
   1432c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14330:	muleq	r0, r4, r0
   14334:	andeq	r0, r0, r8, ror r0
   14338:	andeq	r0, r0, ip, asr r0
   1433c:	andeq	r0, r0, r0, asr #32
   14340:	andeq	r0, r0, r4, lsr #32
   14344:	ldr	r0, [sp, #20]
   14348:	ldrb	r0, [r0, #7]
   1434c:	ldr	r1, [sp, #8]
   14350:	ldr	r2, [sp, #12]
   14354:	orr	r0, r1, r0
   14358:	str	r2, [sp, #12]
   1435c:	str	r0, [sp, #8]
   14360:	ldr	r0, [sp, #20]
   14364:	ldrb	r0, [r0, #6]
   14368:	ldr	r1, [sp, #8]
   1436c:	ldr	r2, [sp, #12]
   14370:	orr	r0, r1, r0, lsl #8
   14374:	str	r2, [sp, #12]
   14378:	str	r0, [sp, #8]
   1437c:	ldr	r0, [sp, #20]
   14380:	ldrb	r0, [r0, #5]
   14384:	ldr	r1, [sp, #8]
   14388:	ldr	r2, [sp, #12]
   1438c:	orr	r0, r1, r0, lsl #16
   14390:	str	r2, [sp, #12]
   14394:	str	r0, [sp, #8]
   14398:	ldr	r0, [sp, #20]
   1439c:	ldrb	r0, [r0, #4]
   143a0:	ldr	r1, [sp, #8]
   143a4:	ldr	r2, [sp, #12]
   143a8:	orr	r0, r1, r0, lsl #24
   143ac:	str	r2, [sp, #12]
   143b0:	str	r0, [sp, #8]
   143b4:	ldr	r0, [sp, #20]
   143b8:	ldrb	r0, [r0, #3]
   143bc:	ldr	r1, [sp, #8]
   143c0:	ldr	r2, [sp, #12]
   143c4:	orr	r0, r2, r0
   143c8:	str	r1, [sp, #8]
   143cc:	str	r0, [sp, #12]
   143d0:	ldr	r0, [sp, #20]
   143d4:	ldrb	r0, [r0, #2]
   143d8:	ldr	r1, [sp, #8]
   143dc:	ldr	r2, [sp, #12]
   143e0:	orr	r0, r2, r0, lsl #8
   143e4:	str	r1, [sp, #8]
   143e8:	str	r0, [sp, #12]
   143ec:	ldr	r0, [sp, #20]
   143f0:	ldrb	r0, [r0, #1]
   143f4:	ldr	r1, [sp, #8]
   143f8:	ldr	r2, [sp, #12]
   143fc:	orr	r0, r2, r0, lsl #16
   14400:	str	r1, [sp, #8]
   14404:	str	r0, [sp, #12]
   14408:	ldr	r0, [sp, #20]
   1440c:	ldrb	r0, [r0]
   14410:	ldr	r1, [sp, #8]
   14414:	ldr	r2, [sp, #12]
   14418:	orr	r0, r2, r0, lsl #24
   1441c:	str	r1, [sp, #8]
   14420:	str	r0, [sp, #12]
   14424:	b	14428 <main@@Base+0x1cc>
   14428:	ldr	r0, [sp, #8]
   1442c:	ldr	r1, [sp, #12]
   14430:	add	sp, sp, #24
   14434:	bx	lr
   14438:	push	{r4, sl, fp, lr}
   1443c:	add	fp, sp, #8
   14440:	sub	sp, sp, #32
   14444:	ldr	ip, [fp, #12]
   14448:	ldr	lr, [fp, #8]
   1444c:	ldr	r4, [fp, #16]
   14450:	str	r0, [fp, #-16]
   14454:	str	r1, [sp, #20]
   14458:	str	r2, [sp, #16]
   1445c:	str	r3, [sp, #12]
   14460:	str	ip, [sp, #4]
   14464:	str	lr, [sp]
   14468:	ldr	r0, [sp, #12]
   1446c:	cmp	r0, #0
   14470:	beq	14490 <main@@Base+0x234>
   14474:	ldr	r0, [fp, #-16]
   14478:	ldr	r1, [sp, #20]
   1447c:	ldr	r2, [sp, #16]
   14480:	movw	r3, #8
   14484:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   14488:	str	r0, [fp, #-12]
   1448c:	b	144d8 <main@@Base+0x27c>
   14490:	ldr	r0, [sp]
   14494:	ldr	r1, [sp, #4]
   14498:	subs	r0, r0, #256	; 0x100
   1449c:	sbcs	r1, r1, #0
   144a0:	bcc	144c4 <main@@Base+0x268>
   144a4:	b	144a8 <main@@Base+0x24c>
   144a8:	ldr	r0, [fp, #-16]
   144ac:	ldr	r1, [sp, #20]
   144b0:	ldr	r2, [sp, #16]
   144b4:	movw	r3, #7
   144b8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   144bc:	str	r0, [fp, #-12]
   144c0:	b	144d8 <main@@Base+0x27c>
   144c4:	ldrb	r0, [sp]
   144c8:	ldr	r1, [fp, #16]
   144cc:	strb	r0, [r1]
   144d0:	ldr	r0, [sp, #20]
   144d4:	str	r0, [fp, #-12]
   144d8:	ldr	r0, [fp, #-12]
   144dc:	sub	sp, fp, #8
   144e0:	pop	{r4, sl, fp, pc}
   144e4:	push	{r4, sl, fp, lr}
   144e8:	add	fp, sp, #8
   144ec:	sub	sp, sp, #32
   144f0:	ldr	ip, [fp, #12]
   144f4:	ldr	lr, [fp, #8]
   144f8:	ldr	r4, [fp, #16]
   144fc:	str	r0, [fp, #-16]
   14500:	str	r1, [sp, #20]
   14504:	str	r2, [sp, #16]
   14508:	str	r3, [sp, #12]
   1450c:	str	ip, [sp, #4]
   14510:	str	lr, [sp]
   14514:	ldr	r0, [sp, #12]
   14518:	cmp	r0, #0
   1451c:	beq	14574 <main@@Base+0x318>
   14520:	ldr	r0, [sp]
   14524:	ldr	r1, [sp, #4]
   14528:	subs	r0, r0, #1
   1452c:	sbcs	r1, r1, #-2147483648	; 0x80000000
   14530:	bcc	14554 <main@@Base+0x2f8>
   14534:	b	14538 <main@@Base+0x2dc>
   14538:	ldr	r0, [fp, #-16]
   1453c:	ldr	r1, [sp, #20]
   14540:	ldr	r2, [sp, #16]
   14544:	movw	r3, #8
   14548:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1454c:	str	r0, [fp, #-12]
   14550:	b	145bc <main@@Base+0x360>
   14554:	ldr	r0, [sp]
   14558:	ldr	r1, [sp, #4]
   1455c:	rsbs	r0, r0, #0
   14560:	rsc	r1, r1, #0
   14564:	ldr	r2, [fp, #16]
   14568:	str	r0, [r2]
   1456c:	str	r1, [r2, #4]
   14570:	b	145b4 <main@@Base+0x358>
   14574:	ldr	r0, [sp, #4]
   14578:	cmn	r0, #1
   1457c:	bgt	145a0 <main@@Base+0x344>
   14580:	b	14584 <main@@Base+0x328>
   14584:	ldr	r0, [fp, #-16]
   14588:	ldr	r1, [sp, #20]
   1458c:	ldr	r2, [sp, #16]
   14590:	movw	r3, #7
   14594:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   14598:	str	r0, [fp, #-12]
   1459c:	b	145bc <main@@Base+0x360>
   145a0:	ldr	r0, [sp]
   145a4:	ldr	r1, [sp, #4]
   145a8:	ldr	r2, [fp, #16]
   145ac:	str	r1, [r2, #4]
   145b0:	str	r0, [r2]
   145b4:	ldr	r0, [sp, #20]
   145b8:	str	r0, [fp, #-12]
   145bc:	ldr	r0, [fp, #-12]
   145c0:	sub	sp, fp, #8
   145c4:	pop	{r4, sl, fp, pc}
   145c8:	push	{r4, sl, fp, lr}
   145cc:	add	fp, sp, #8
   145d0:	sub	sp, sp, #32
   145d4:	ldr	ip, [fp, #12]
   145d8:	ldr	lr, [fp, #8]
   145dc:	ldr	r4, [fp, #16]
   145e0:	str	r0, [fp, #-16]
   145e4:	str	r1, [sp, #20]
   145e8:	str	r2, [sp, #16]
   145ec:	str	r3, [sp, #12]
   145f0:	str	ip, [sp, #4]
   145f4:	str	lr, [sp]
   145f8:	ldr	r0, [sp, #12]
   145fc:	cmp	r0, #0
   14600:	beq	14620 <main@@Base+0x3c4>
   14604:	ldr	r0, [fp, #-16]
   14608:	ldr	r1, [sp, #20]
   1460c:	ldr	r2, [sp, #16]
   14610:	movw	r3, #8
   14614:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   14618:	str	r0, [fp, #-12]
   1461c:	b	14660 <main@@Base+0x404>
   14620:	ldr	r0, [sp, #4]
   14624:	cmp	r0, #0
   14628:	beq	1464c <main@@Base+0x3f0>
   1462c:	b	14630 <main@@Base+0x3d4>
   14630:	ldr	r0, [fp, #-16]
   14634:	ldr	r1, [sp, #20]
   14638:	ldr	r2, [sp, #16]
   1463c:	movw	r3, #7
   14640:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   14644:	str	r0, [fp, #-12]
   14648:	b	14660 <main@@Base+0x404>
   1464c:	ldr	r0, [sp]
   14650:	ldr	r1, [fp, #16]
   14654:	str	r0, [r1]
   14658:	ldr	r0, [sp, #20]
   1465c:	str	r0, [fp, #-12]
   14660:	ldr	r0, [fp, #-12]
   14664:	sub	sp, fp, #8
   14668:	pop	{r4, sl, fp, pc}

0001466c <flatcc_builder_default_alloc@@Base>:
   1466c:	push	{fp, lr}
   14670:	mov	fp, sp
   14674:	sub	sp, sp, #32
   14678:	ldr	ip, [fp, #8]
   1467c:	str	r0, [fp, #-8]
   14680:	str	r1, [fp, #-12]
   14684:	str	r2, [sp, #16]
   14688:	str	r3, [sp, #12]
   1468c:	ldr	r0, [sp, #16]
   14690:	cmp	r0, #0
   14694:	bne	146d8 <flatcc_builder_default_alloc@@Base+0x6c>
   14698:	ldr	r0, [fp, #-12]
   1469c:	ldr	r0, [r0]
   146a0:	movw	r1, #0
   146a4:	cmp	r0, r1
   146a8:	beq	146cc <flatcc_builder_default_alloc@@Base+0x60>
   146ac:	ldr	r0, [fp, #-12]
   146b0:	ldr	r0, [r0]
   146b4:	bl	128cc <free@plt>
   146b8:	ldr	r0, [fp, #-12]
   146bc:	movw	r1, #0
   146c0:	str	r1, [r0]
   146c4:	ldr	r0, [fp, #-12]
   146c8:	str	r1, [r0, #4]
   146cc:	movw	r0, #0
   146d0:	str	r0, [fp, #-4]
   146d4:	b	14844 <flatcc_builder_default_alloc@@Base+0x1d8>
   146d8:	ldr	r0, [fp, #8]
   146dc:	sub	r0, r0, #1
   146e0:	cmp	r0, #6
   146e4:	str	r0, [sp]
   146e8:	bhi	14748 <flatcc_builder_default_alloc@@Base+0xdc>
   146ec:	add	r0, pc, #8
   146f0:	ldr	r1, [sp]
   146f4:	ldr	r2, [r0, r1, lsl #2]
   146f8:	add	pc, r0, r2
   146fc:	andeq	r0, r0, ip, lsl r0
   14700:	andeq	r0, r0, ip, asr #32
   14704:	andeq	r0, r0, ip, asr #32
   14708:	andeq	r0, r0, r4, lsr r0
   1470c:	andeq	r0, r0, r8, lsr #32
   14710:	andeq	r0, r0, ip, asr #32
   14714:	andeq	r0, r0, r0, asr #32
   14718:	movw	r0, #256	; 0x100
   1471c:	str	r0, [sp, #4]
   14720:	b	14750 <flatcc_builder_default_alloc@@Base+0xe4>
   14724:	ldr	r0, [sp, #16]
   14728:	str	r0, [sp, #4]
   1472c:	b	14750 <flatcc_builder_default_alloc@@Base+0xe4>
   14730:	movw	r0, #288	; 0x120
   14734:	str	r0, [sp, #4]
   14738:	b	14750 <flatcc_builder_default_alloc@@Base+0xe4>
   1473c:	movw	r0, #64	; 0x40
   14740:	str	r0, [sp, #4]
   14744:	b	14750 <flatcc_builder_default_alloc@@Base+0xe4>
   14748:	movw	r0, #32
   1474c:	str	r0, [sp, #4]
   14750:	b	14754 <flatcc_builder_default_alloc@@Base+0xe8>
   14754:	ldr	r0, [sp, #4]
   14758:	ldr	r1, [sp, #16]
   1475c:	cmp	r0, r1
   14760:	bcs	14774 <flatcc_builder_default_alloc@@Base+0x108>
   14764:	ldr	r0, [sp, #4]
   14768:	lsl	r0, r0, #1
   1476c:	str	r0, [sp, #4]
   14770:	b	14754 <flatcc_builder_default_alloc@@Base+0xe8>
   14774:	ldr	r0, [sp, #16]
   14778:	ldr	r1, [fp, #-12]
   1477c:	ldr	r1, [r1, #4]
   14780:	cmp	r0, r1
   14784:	bhi	147ac <flatcc_builder_default_alloc@@Base+0x140>
   14788:	ldr	r0, [fp, #-12]
   1478c:	ldr	r0, [r0, #4]
   14790:	lsr	r0, r0, #1
   14794:	ldr	r1, [sp, #4]
   14798:	cmp	r0, r1
   1479c:	bcc	147ac <flatcc_builder_default_alloc@@Base+0x140>
   147a0:	movw	r0, #0
   147a4:	str	r0, [fp, #-4]
   147a8:	b	14844 <flatcc_builder_default_alloc@@Base+0x1d8>
   147ac:	ldr	r0, [fp, #-12]
   147b0:	ldr	r0, [r0]
   147b4:	ldr	r1, [sp, #4]
   147b8:	bl	12908 <realloc@plt>
   147bc:	str	r0, [sp, #8]
   147c0:	movw	r1, #0
   147c4:	cmp	r0, r1
   147c8:	bne	147d8 <flatcc_builder_default_alloc@@Base+0x16c>
   147cc:	mvn	r0, #0
   147d0:	str	r0, [fp, #-4]
   147d4:	b	14844 <flatcc_builder_default_alloc@@Base+0x1d8>
   147d8:	ldr	r0, [sp, #12]
   147dc:	cmp	r0, #0
   147e0:	beq	14824 <flatcc_builder_default_alloc@@Base+0x1b8>
   147e4:	ldr	r0, [fp, #-12]
   147e8:	ldr	r0, [r0, #4]
   147ec:	ldr	r1, [sp, #4]
   147f0:	cmp	r0, r1
   147f4:	bcs	14824 <flatcc_builder_default_alloc@@Base+0x1b8>
   147f8:	ldr	r0, [sp, #8]
   147fc:	ldr	r1, [fp, #-12]
   14800:	ldr	r1, [r1, #4]
   14804:	add	r0, r0, r1
   14808:	ldr	r1, [sp, #4]
   1480c:	ldr	r2, [fp, #-12]
   14810:	ldr	r2, [r2, #4]
   14814:	sub	r2, r1, r2
   14818:	movw	r1, #0
   1481c:	and	r1, r1, #255	; 0xff
   14820:	bl	1295c <memset@plt>
   14824:	ldr	r0, [sp, #8]
   14828:	ldr	r1, [fp, #-12]
   1482c:	str	r0, [r1]
   14830:	ldr	r0, [sp, #4]
   14834:	ldr	r1, [fp, #-12]
   14838:	str	r0, [r1, #4]
   1483c:	movw	r0, #0
   14840:	str	r0, [fp, #-4]
   14844:	ldr	r0, [fp, #-4]
   14848:	mov	sp, fp
   1484c:	pop	{fp, pc}

00014850 <flatcc_builder_flush_vtable_cache@@Base>:
   14850:	push	{fp, lr}
   14854:	mov	fp, sp
   14858:	sub	sp, sp, #8
   1485c:	str	r0, [sp, #4]
   14860:	ldr	r0, [sp, #4]
   14864:	add	r0, r0, #52	; 0x34
   14868:	add	r0, r0, #40	; 0x28
   1486c:	str	r0, [sp]
   14870:	ldr	r0, [sp, #4]
   14874:	ldr	r0, [r0, #116]	; 0x74
   14878:	cmp	r0, #0
   1487c:	bne	14884 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   14880:	b	148b8 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   14884:	ldr	r0, [sp]
   14888:	ldr	r0, [r0]
   1488c:	ldr	r1, [sp]
   14890:	ldr	r2, [r1, #4]
   14894:	movw	r1, #0
   14898:	and	r1, r1, #255	; 0xff
   1489c:	bl	1295c <memset@plt>
   148a0:	ldr	r0, [sp, #4]
   148a4:	movw	r1, #16
   148a8:	str	r1, [r0, #124]	; 0x7c
   148ac:	ldr	r0, [sp, #4]
   148b0:	movw	r1, #0
   148b4:	str	r1, [r0, #120]	; 0x78
   148b8:	mov	sp, fp
   148bc:	pop	{fp, pc}

000148c0 <flatcc_builder_custom_init@@Base>:
   148c0:	push	{fp, lr}
   148c4:	mov	fp, sp
   148c8:	sub	sp, sp, #24
   148cc:	ldr	ip, [fp, #8]
   148d0:	str	r0, [fp, #-4]
   148d4:	str	r1, [fp, #-8]
   148d8:	str	r2, [sp, #12]
   148dc:	str	r3, [sp, #8]
   148e0:	ldr	r0, [fp, #-4]
   148e4:	movw	r1, #0
   148e8:	and	r1, r1, #255	; 0xff
   148ec:	movw	r2, #232	; 0xe8
   148f0:	str	ip, [sp, #4]
   148f4:	bl	1295c <memset@plt>
   148f8:	ldr	r0, [fp, #-8]
   148fc:	movw	r1, #0
   14900:	cmp	r0, r1
   14904:	bne	1492c <flatcc_builder_custom_init@@Base+0x6c>
   14908:	ldr	r0, [pc, #116]	; 14984 <flatcc_builder_custom_init@@Base+0xc4>
   1490c:	ldr	r0, [pc, r0]
   14910:	ldr	r1, [fp, #-4]
   14914:	movw	r2, #1
   14918:	str	r2, [r1, #184]	; 0xb8
   1491c:	str	r0, [fp, #-8]
   14920:	ldr	r0, [fp, #-4]
   14924:	add	r0, r0, #188	; 0xbc
   14928:	str	r0, [sp, #12]
   1492c:	ldr	r0, [sp, #8]
   14930:	movw	r1, #0
   14934:	cmp	r0, r1
   14938:	bne	14948 <flatcc_builder_custom_init@@Base+0x88>
   1493c:	ldr	r0, [pc, #68]	; 14988 <flatcc_builder_custom_init@@Base+0xc8>
   14940:	ldr	r0, [pc, r0]
   14944:	str	r0, [sp, #8]
   14948:	ldr	r0, [fp, #8]
   1494c:	ldr	r1, [fp, #-4]
   14950:	str	r0, [r1, #40]	; 0x28
   14954:	ldr	r0, [sp, #8]
   14958:	ldr	r1, [fp, #-4]
   1495c:	str	r0, [r1, #48]	; 0x30
   14960:	ldr	r0, [sp, #12]
   14964:	ldr	r1, [fp, #-4]
   14968:	str	r0, [r1, #36]	; 0x24
   1496c:	ldr	r0, [fp, #-8]
   14970:	ldr	r1, [fp, #-4]
   14974:	str	r0, [r1, #44]	; 0x2c
   14978:	movw	r0, #0
   1497c:	mov	sp, fp
   14980:	pop	{fp, pc}
   14984:	andeq	r0, r2, r0, asr r7
   14988:	andeq	r0, r2, r8, lsl r7

0001498c <flatcc_builder_init@@Base>:
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	sub	sp, sp, #16
   14998:	str	r0, [fp, #-4]
   1499c:	ldr	r0, [fp, #-4]
   149a0:	movw	r1, #0
   149a4:	str	r1, [sp, #8]
   149a8:	ldr	r2, [sp, #8]
   149ac:	ldr	r3, [sp, #8]
   149b0:	ldr	ip, [sp, #8]
   149b4:	str	ip, [sp]
   149b8:	bl	148c0 <flatcc_builder_custom_init@@Base>
   149bc:	mov	sp, fp
   149c0:	pop	{fp, pc}

000149c4 <flatcc_builder_custom_reset@@Base>:
   149c4:	push	{r4, sl, fp, lr}
   149c8:	add	fp, sp, #8
   149cc:	sub	sp, sp, #40	; 0x28
   149d0:	str	r0, [fp, #-16]
   149d4:	str	r1, [fp, #-20]	; 0xffffffec
   149d8:	str	r2, [sp, #24]
   149dc:	movw	r0, #0
   149e0:	str	r0, [sp, #16]
   149e4:	ldr	r0, [sp, #16]
   149e8:	cmp	r0, #8
   149ec:	bge	14af8 <flatcc_builder_custom_reset@@Base+0x134>
   149f0:	ldr	r0, [fp, #-16]
   149f4:	add	r0, r0, #52	; 0x34
   149f8:	ldr	r1, [sp, #16]
   149fc:	add	r0, r0, r1, lsl #3
   14a00:	str	r0, [sp, #20]
   14a04:	ldr	r0, [sp, #20]
   14a08:	ldr	r0, [r0]
   14a0c:	movw	r1, #0
   14a10:	cmp	r0, r1
   14a14:	beq	14aac <flatcc_builder_custom_reset@@Base+0xe8>
   14a18:	ldr	r0, [sp, #16]
   14a1c:	cmp	r0, #5
   14a20:	beq	14a8c <flatcc_builder_custom_reset@@Base+0xc8>
   14a24:	ldr	r0, [sp, #24]
   14a28:	cmp	r0, #0
   14a2c:	beq	14a8c <flatcc_builder_custom_reset@@Base+0xc8>
   14a30:	ldr	r0, [fp, #-16]
   14a34:	ldr	r0, [r0, #48]	; 0x30
   14a38:	ldr	r1, [fp, #-16]
   14a3c:	ldr	r1, [r1, #40]	; 0x28
   14a40:	ldr	r2, [sp, #20]
   14a44:	ldr	r3, [sp, #16]
   14a48:	str	r0, [sp, #12]
   14a4c:	mov	r0, r1
   14a50:	mov	r1, r2
   14a54:	movw	r2, #1
   14a58:	str	r2, [sp, #8]
   14a5c:	ldr	ip, [sp, #8]
   14a60:	str	r3, [sp, #4]
   14a64:	mov	r3, ip
   14a68:	ldr	lr, [sp, #4]
   14a6c:	str	lr, [sp]
   14a70:	ldr	r4, [sp, #12]
   14a74:	blx	r4
   14a78:	cmp	r0, #0
   14a7c:	beq	14a8c <flatcc_builder_custom_reset@@Base+0xc8>
   14a80:	mvn	r0, #0
   14a84:	str	r0, [fp, #-12]
   14a88:	b	14bf4 <flatcc_builder_custom_reset@@Base+0x230>
   14a8c:	ldr	r0, [sp, #20]
   14a90:	ldr	r0, [r0]
   14a94:	ldr	r1, [sp, #20]
   14a98:	ldr	r2, [r1, #4]
   14a9c:	movw	r1, #0
   14aa0:	and	r1, r1, #255	; 0xff
   14aa4:	bl	1295c <memset@plt>
   14aa8:	b	14ae4 <flatcc_builder_custom_reset@@Base+0x120>
   14aac:	ldr	r0, [sp, #20]
   14ab0:	ldr	r0, [r0, #4]
   14ab4:	cmp	r0, #0
   14ab8:	bne	14ac0 <flatcc_builder_custom_reset@@Base+0xfc>
   14abc:	b	14ae0 <flatcc_builder_custom_reset@@Base+0x11c>
   14ac0:	ldr	r0, [pc, #312]	; 14c00 <flatcc_builder_custom_reset@@Base+0x23c>
   14ac4:	add	r0, pc, r0
   14ac8:	ldr	r1, [pc, #308]	; 14c04 <flatcc_builder_custom_reset@@Base+0x240>
   14acc:	add	r1, pc, r1
   14ad0:	ldr	r2, [pc, #304]	; 14c08 <flatcc_builder_custom_reset@@Base+0x244>
   14ad4:	add	r3, pc, r2
   14ad8:	movw	r2, #434	; 0x1b2
   14adc:	bl	1298c <__assert_fail@plt>
   14ae0:	b	14ae4 <flatcc_builder_custom_reset@@Base+0x120>
   14ae4:	b	14ae8 <flatcc_builder_custom_reset@@Base+0x124>
   14ae8:	ldr	r0, [sp, #16]
   14aec:	add	r0, r0, #1
   14af0:	str	r0, [sp, #16]
   14af4:	b	149e4 <flatcc_builder_custom_reset@@Base+0x20>
   14af8:	ldr	r0, [fp, #-16]
   14afc:	movw	r1, #0
   14b00:	str	r1, [r0, #120]	; 0x78
   14b04:	ldr	r0, [fp, #-16]
   14b08:	ldr	r0, [r0, #124]	; 0x7c
   14b0c:	cmp	r0, #0
   14b10:	bls	14b20 <flatcc_builder_custom_reset@@Base+0x15c>
   14b14:	ldr	r0, [fp, #-16]
   14b18:	movw	r1, #16
   14b1c:	str	r1, [r0, #124]	; 0x7c
   14b20:	ldr	r0, [fp, #-16]
   14b24:	movw	r1, #0
   14b28:	strh	r1, [r0, #128]	; 0x80
   14b2c:	ldr	r0, [fp, #-16]
   14b30:	movw	r1, #0
   14b34:	str	r1, [r0, #136]	; 0x88
   14b38:	ldr	r0, [fp, #-16]
   14b3c:	str	r1, [r0, #140]	; 0x8c
   14b40:	ldr	r0, [fp, #-16]
   14b44:	str	r1, [r0, #156]	; 0x9c
   14b48:	ldr	r0, [fp, #-16]
   14b4c:	str	r1, [r0, #160]	; 0xa0
   14b50:	ldr	r0, [fp, #-16]
   14b54:	str	r1, [r0, #20]
   14b58:	ldr	r0, [fp, #-16]
   14b5c:	str	r1, [r0, #24]
   14b60:	ldr	r0, [fp, #-16]
   14b64:	str	r1, [r0, #148]	; 0x94
   14b68:	ldr	r0, [fp, #-16]
   14b6c:	str	r1, [r0, #152]	; 0x98
   14b70:	ldr	r0, [fp, #-16]
   14b74:	ldr	r0, [r0, #60]	; 0x3c
   14b78:	ldr	r2, [fp, #-16]
   14b7c:	str	r0, [r2, #16]
   14b80:	ldr	r0, [fp, #-16]
   14b84:	ldr	r0, [r0, #76]	; 0x4c
   14b88:	ldr	r2, [fp, #-16]
   14b8c:	str	r0, [r2]
   14b90:	ldr	r0, [fp, #-16]
   14b94:	ldr	r0, [r0, #52]	; 0x34
   14b98:	ldr	r2, [fp, #-16]
   14b9c:	str	r0, [r2, #4]
   14ba0:	ldr	r0, [fp, #-16]
   14ba4:	str	r1, [r0, #32]
   14ba8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bac:	cmp	r0, #0
   14bb0:	beq	14bd0 <flatcc_builder_custom_reset@@Base+0x20c>
   14bb4:	ldr	r0, [fp, #-16]
   14bb8:	movw	r1, #0
   14bbc:	str	r1, [r0, #172]	; 0xac
   14bc0:	ldr	r0, [fp, #-16]
   14bc4:	str	r1, [r0, #176]	; 0xb0
   14bc8:	ldr	r0, [fp, #-16]
   14bcc:	str	r1, [r0, #180]	; 0xb4
   14bd0:	ldr	r0, [fp, #-16]
   14bd4:	ldr	r0, [r0, #184]	; 0xb8
   14bd8:	cmp	r0, #0
   14bdc:	beq	14bec <flatcc_builder_custom_reset@@Base+0x228>
   14be0:	ldr	r0, [fp, #-16]
   14be4:	add	r0, r0, #188	; 0xbc
   14be8:	bl	1a574 <flatcc_emitter_reset@@Base>
   14bec:	movw	r0, #0
   14bf0:	str	r0, [fp, #-12]
   14bf4:	ldr	r0, [fp, #-12]
   14bf8:	sub	sp, fp, #8
   14bfc:	pop	{r4, sl, fp, pc}
   14c00:	andeq	sp, r0, r2, lsr #17
   14c04:	andeq	sp, r0, ip, lsr #17
   14c08:	andeq	sp, r0, r1, lsl #18

00014c0c <flatcc_builder_reset@@Base>:
   14c0c:	push	{fp, lr}
   14c10:	mov	fp, sp
   14c14:	sub	sp, sp, #8
   14c18:	str	r0, [sp, #4]
   14c1c:	ldr	r0, [sp, #4]
   14c20:	movw	r1, #0
   14c24:	str	r1, [sp]
   14c28:	ldr	r2, [sp]
   14c2c:	bl	149c4 <flatcc_builder_custom_reset@@Base>
   14c30:	mov	sp, fp
   14c34:	pop	{fp, pc}

00014c38 <flatcc_builder_clear@@Base>:
   14c38:	push	{r4, sl, fp, lr}
   14c3c:	add	fp, sp, #8
   14c40:	sub	sp, sp, #32
   14c44:	str	r0, [fp, #-12]
   14c48:	movw	r0, #0
   14c4c:	str	r0, [sp, #20]
   14c50:	ldr	r0, [sp, #20]
   14c54:	cmp	r0, #8
   14c58:	bge	14cc8 <flatcc_builder_clear@@Base+0x90>
   14c5c:	ldr	r0, [fp, #-12]
   14c60:	add	r0, r0, #52	; 0x34
   14c64:	ldr	r1, [sp, #20]
   14c68:	add	r0, r0, r1, lsl #3
   14c6c:	str	r0, [fp, #-16]
   14c70:	ldr	r0, [fp, #-12]
   14c74:	ldr	r0, [r0, #48]	; 0x30
   14c78:	ldr	r1, [fp, #-12]
   14c7c:	ldr	r1, [r1, #40]	; 0x28
   14c80:	ldr	r2, [fp, #-16]
   14c84:	ldr	r3, [sp, #20]
   14c88:	str	r0, [sp, #16]
   14c8c:	mov	r0, r1
   14c90:	mov	r1, r2
   14c94:	movw	r2, #0
   14c98:	str	r2, [sp, #12]
   14c9c:	ldr	ip, [sp, #12]
   14ca0:	str	r3, [sp, #8]
   14ca4:	mov	r3, ip
   14ca8:	ldr	lr, [sp, #8]
   14cac:	str	lr, [sp]
   14cb0:	ldr	r4, [sp, #16]
   14cb4:	blx	r4
   14cb8:	ldr	r0, [sp, #20]
   14cbc:	add	r0, r0, #1
   14cc0:	str	r0, [sp, #20]
   14cc4:	b	14c50 <flatcc_builder_clear@@Base+0x18>
   14cc8:	ldr	r0, [fp, #-12]
   14ccc:	ldr	r0, [r0, #184]	; 0xb8
   14cd0:	cmp	r0, #0
   14cd4:	beq	14ce4 <flatcc_builder_clear@@Base+0xac>
   14cd8:	ldr	r0, [fp, #-12]
   14cdc:	add	r0, r0, #188	; 0xbc
   14ce0:	bl	1a70c <flatcc_emitter_clear@@Base>
   14ce4:	ldr	r0, [fp, #-12]
   14ce8:	movw	r1, #0
   14cec:	and	r1, r1, #255	; 0xff
   14cf0:	movw	r2, #232	; 0xe8
   14cf4:	bl	1295c <memset@plt>
   14cf8:	sub	sp, fp, #8
   14cfc:	pop	{r4, sl, fp, pc}

00014d00 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14d00:	push	{fp, lr}
   14d04:	mov	fp, sp
   14d08:	sub	sp, sp, #24
   14d0c:	str	r0, [fp, #-8]
   14d10:	str	r1, [sp, #12]
   14d14:	ldr	r0, [sp, #12]
   14d18:	add	r0, r0, #4
   14d1c:	sub	r0, r0, #1
   14d20:	mvn	r1, #3
   14d24:	and	r0, r0, r1
   14d28:	add	r0, r0, #4
   14d2c:	str	r0, [sp, #12]
   14d30:	ldr	r0, [fp, #-8]
   14d34:	ldr	r1, [fp, #-8]
   14d38:	ldr	r2, [r1, #228]	; 0xe4
   14d3c:	ldr	r3, [sp, #12]
   14d40:	movw	r1, #7
   14d44:	movw	ip, #0
   14d48:	str	ip, [sp]
   14d4c:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14d50:	str	r0, [sp, #8]
   14d54:	movw	r1, #0
   14d58:	cmp	r0, r1
   14d5c:	bne	14d6c <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   14d60:	movw	r0, #0
   14d64:	str	r0, [fp, #-4]
   14d68:	b	14dc8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   14d6c:	ldr	r0, [sp, #8]
   14d70:	ldr	r2, [sp, #12]
   14d74:	movw	r1, #0
   14d78:	and	r1, r1, #255	; 0xff
   14d7c:	bl	1295c <memset@plt>
   14d80:	ldr	r0, [fp, #-8]
   14d84:	ldr	r0, [r0, #224]	; 0xe0
   14d88:	ldr	r1, [sp, #8]
   14d8c:	add	r2, r1, #4
   14d90:	str	r2, [sp, #8]
   14d94:	str	r0, [r1]
   14d98:	ldr	r0, [fp, #-8]
   14d9c:	ldr	r0, [r0, #228]	; 0xe4
   14da0:	add	r0, r0, #4
   14da4:	ldr	r1, [fp, #-8]
   14da8:	str	r0, [r1, #224]	; 0xe0
   14dac:	ldr	r0, [sp, #12]
   14db0:	ldr	r1, [fp, #-8]
   14db4:	ldr	r2, [r1, #228]	; 0xe4
   14db8:	add	r0, r2, r0
   14dbc:	str	r0, [r1, #228]	; 0xe4
   14dc0:	ldr	r0, [sp, #8]
   14dc4:	str	r0, [fp, #-4]
   14dc8:	ldr	r0, [fp, #-4]
   14dcc:	mov	sp, fp
   14dd0:	pop	{fp, pc}
   14dd4:	push	{fp, lr}
   14dd8:	mov	fp, sp
   14ddc:	sub	sp, sp, #32
   14de0:	ldr	ip, [fp, #8]
   14de4:	str	r0, [fp, #-4]
   14de8:	str	r1, [fp, #-8]
   14dec:	str	r2, [fp, #-12]
   14df0:	str	r3, [sp, #16]
   14df4:	ldr	r0, [fp, #-4]
   14df8:	add	r0, r0, #52	; 0x34
   14dfc:	ldr	r1, [fp, #-8]
   14e00:	add	r0, r0, r1, lsl #3
   14e04:	str	r0, [sp, #12]
   14e08:	ldr	r0, [fp, #-12]
   14e0c:	ldr	r1, [sp, #16]
   14e10:	add	r0, r0, r1
   14e14:	ldr	r1, [sp, #12]
   14e18:	ldr	r1, [r1, #4]
   14e1c:	cmp	r0, r1
   14e20:	bls	14e98 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   14e24:	ldr	r0, [fp, #-4]
   14e28:	ldr	r0, [r0, #48]	; 0x30
   14e2c:	ldr	r1, [fp, #-4]
   14e30:	ldr	r1, [r1, #40]	; 0x28
   14e34:	ldr	r2, [sp, #12]
   14e38:	ldr	r3, [fp, #-12]
   14e3c:	ldr	ip, [sp, #16]
   14e40:	add	r3, r3, ip
   14e44:	ldr	ip, [fp, #8]
   14e48:	ldr	lr, [fp, #-8]
   14e4c:	str	r0, [sp, #8]
   14e50:	mov	r0, r1
   14e54:	mov	r1, r2
   14e58:	mov	r2, r3
   14e5c:	mov	r3, ip
   14e60:	str	lr, [sp]
   14e64:	ldr	ip, [sp, #8]
   14e68:	blx	ip
   14e6c:	cmp	r0, #0
   14e70:	beq	14e94 <flatcc_builder_enter_user_frame_ptr@@Base+0x194>
   14e74:	ldr	r0, [pc, #52]	; 14eb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b0>
   14e78:	add	r0, pc, r0
   14e7c:	ldr	r1, [pc, #48]	; 14eb4 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   14e80:	add	r1, pc, r1
   14e84:	ldr	r2, [pc, #44]	; 14eb8 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   14e88:	add	r3, pc, r2
   14e8c:	movw	r2, #308	; 0x134
   14e90:	bl	1298c <__assert_fail@plt>
   14e94:	b	14e98 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   14e98:	ldr	r0, [sp, #12]
   14e9c:	ldr	r0, [r0]
   14ea0:	ldr	r1, [fp, #-12]
   14ea4:	add	r0, r0, r1
   14ea8:	mov	sp, fp
   14eac:	pop	{fp, pc}
   14eb0:			; <UNDEFINED> instruction: 0x0000e6bd
   14eb4:	strdeq	sp, [r0], -r8
   14eb8:	andeq	lr, r0, r7, ror #9

00014ebc <flatcc_builder_enter_user_frame@@Base>:
   14ebc:	push	{fp, lr}
   14ec0:	mov	fp, sp
   14ec4:	sub	sp, sp, #24
   14ec8:	str	r0, [fp, #-8]
   14ecc:	str	r1, [sp, #12]
   14ed0:	ldr	r0, [sp, #12]
   14ed4:	add	r0, r0, #4
   14ed8:	sub	r0, r0, #1
   14edc:	mvn	r1, #3
   14ee0:	and	r0, r0, r1
   14ee4:	add	r0, r0, #4
   14ee8:	str	r0, [sp, #12]
   14eec:	ldr	r0, [fp, #-8]
   14ef0:	ldr	r1, [fp, #-8]
   14ef4:	ldr	r2, [r1, #228]	; 0xe4
   14ef8:	ldr	r3, [sp, #12]
   14efc:	movw	r1, #7
   14f00:	movw	ip, #0
   14f04:	str	ip, [sp]
   14f08:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14f0c:	str	r0, [sp, #8]
   14f10:	movw	r1, #0
   14f14:	cmp	r0, r1
   14f18:	bne	14f28 <flatcc_builder_enter_user_frame@@Base+0x6c>
   14f1c:	movw	r0, #0
   14f20:	str	r0, [fp, #-4]
   14f24:	b	14f88 <flatcc_builder_enter_user_frame@@Base+0xcc>
   14f28:	ldr	r0, [sp, #8]
   14f2c:	ldr	r2, [sp, #12]
   14f30:	movw	r1, #0
   14f34:	and	r1, r1, #255	; 0xff
   14f38:	bl	1295c <memset@plt>
   14f3c:	ldr	r0, [fp, #-8]
   14f40:	ldr	r0, [r0, #224]	; 0xe0
   14f44:	ldr	r1, [sp, #8]
   14f48:	add	r2, r1, #4
   14f4c:	str	r2, [sp, #8]
   14f50:	str	r0, [r1]
   14f54:	ldr	r0, [fp, #-8]
   14f58:	ldr	r0, [r0, #228]	; 0xe4
   14f5c:	add	r0, r0, #4
   14f60:	ldr	r1, [fp, #-8]
   14f64:	str	r0, [r1, #224]	; 0xe0
   14f68:	ldr	r0, [sp, #12]
   14f6c:	ldr	r1, [fp, #-8]
   14f70:	ldr	r2, [r1, #228]	; 0xe4
   14f74:	add	r0, r2, r0
   14f78:	str	r0, [r1, #228]	; 0xe4
   14f7c:	ldr	r0, [fp, #-8]
   14f80:	ldr	r0, [r0, #224]	; 0xe0
   14f84:	str	r0, [fp, #-4]
   14f88:	ldr	r0, [fp, #-4]
   14f8c:	mov	sp, fp
   14f90:	pop	{fp, pc}

00014f94 <flatcc_builder_exit_user_frame@@Base>:
   14f94:	push	{fp, lr}
   14f98:	mov	fp, sp
   14f9c:	sub	sp, sp, #8
   14fa0:	str	r0, [sp, #4]
   14fa4:	ldr	r0, [sp, #4]
   14fa8:	ldr	r0, [r0, #224]	; 0xe0
   14fac:	cmp	r0, #0
   14fb0:	bls	14fb8 <flatcc_builder_exit_user_frame@@Base+0x24>
   14fb4:	b	14fd8 <flatcc_builder_exit_user_frame@@Base+0x44>
   14fb8:	ldr	r0, [pc, #100]	; 15024 <flatcc_builder_exit_user_frame@@Base+0x90>
   14fbc:	add	r0, pc, r0
   14fc0:	ldr	r1, [pc, #96]	; 15028 <flatcc_builder_exit_user_frame@@Base+0x94>
   14fc4:	add	r1, pc, r1
   14fc8:	ldr	r2, [pc, #92]	; 1502c <flatcc_builder_exit_user_frame@@Base+0x98>
   14fcc:	add	r3, pc, r2
   14fd0:	movw	r2, #542	; 0x21e
   14fd4:	bl	1298c <__assert_fail@plt>
   14fd8:	ldr	r0, [sp, #4]
   14fdc:	ldr	r0, [r0, #108]	; 0x6c
   14fe0:	ldr	r1, [sp, #4]
   14fe4:	ldr	r1, [r1, #224]	; 0xe0
   14fe8:	add	r0, r0, r1
   14fec:	str	r0, [sp]
   14ff0:	ldr	r0, [sp, #4]
   14ff4:	ldr	r0, [r0, #224]	; 0xe0
   14ff8:	sub	r0, r0, #4
   14ffc:	ldr	r1, [sp, #4]
   15000:	str	r0, [r1, #228]	; 0xe4
   15004:	ldr	r0, [sp]
   15008:	mvn	r1, #3
   1500c:	add	r0, r0, r1
   15010:	ldr	r0, [r0]
   15014:	ldr	r1, [sp, #4]
   15018:	str	r0, [r1, #224]	; 0xe0
   1501c:	mov	sp, fp
   15020:	pop	{fp, pc}
   15024:	andeq	sp, r0, r7, asr r4
   15028:			; <UNDEFINED> instruction: 0x0000d3b4
   1502c:	andeq	sp, r0, r0, ror #8

00015030 <flatcc_builder_exit_user_frame_at@@Base>:
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	sub	sp, sp, #8
   1503c:	str	r0, [sp, #4]
   15040:	str	r1, [sp]
   15044:	ldr	r0, [sp, #4]
   15048:	ldr	r0, [r0, #224]	; 0xe0
   1504c:	ldr	r1, [sp]
   15050:	cmp	r0, r1
   15054:	bcc	1505c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   15058:	b	1507c <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   1505c:	ldr	r0, [pc, #52]	; 15098 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   15060:	add	r0, pc, r0
   15064:	ldr	r1, [pc, #48]	; 1509c <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   15068:	add	r1, pc, r1
   1506c:	ldr	r2, [pc, #44]	; 150a0 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   15070:	add	r3, pc, r2
   15074:	movw	r2, #551	; 0x227
   15078:	bl	1298c <__assert_fail@plt>
   1507c:	ldr	r0, [sp]
   15080:	ldr	r1, [sp, #4]
   15084:	str	r0, [r1, #224]	; 0xe0
   15088:	ldr	r0, [sp, #4]
   1508c:	bl	14f94 <flatcc_builder_exit_user_frame@@Base>
   15090:	mov	sp, fp
   15094:	pop	{fp, pc}
   15098:	andeq	sp, r0, r6, lsl #8
   1509c:	andeq	sp, r0, r0, lsl r3
   150a0:	andeq	sp, r0, r5, lsl r4

000150a4 <flatcc_builder_get_current_user_frame@@Base>:
   150a4:	sub	sp, sp, #4
   150a8:	str	r0, [sp]
   150ac:	ldr	r0, [sp]
   150b0:	ldr	r0, [r0, #224]	; 0xe0
   150b4:	add	sp, sp, #4
   150b8:	bx	lr

000150bc <flatcc_builder_get_user_frame_ptr@@Base>:
   150bc:	sub	sp, sp, #8
   150c0:	str	r0, [sp, #4]
   150c4:	str	r1, [sp]
   150c8:	ldr	r0, [sp, #4]
   150cc:	ldr	r0, [r0, #108]	; 0x6c
   150d0:	ldr	r1, [sp]
   150d4:	add	r0, r0, r1
   150d8:	add	sp, sp, #8
   150dc:	bx	lr

000150e0 <flatcc_builder_embed_buffer@@Base>:
   150e0:	push	{fp, lr}
   150e4:	mov	fp, sp
   150e8:	sub	sp, sp, #120	; 0x78
   150ec:	ldr	ip, [fp, #12]
   150f0:	ldr	lr, [fp, #8]
   150f4:	str	r0, [fp, #-8]
   150f8:	strh	r1, [fp, #-10]
   150fc:	str	r2, [fp, #-16]
   15100:	str	r3, [fp, #-20]	; 0xffffffec
   15104:	strh	lr, [fp, #-22]	; 0xffffffea
   15108:	ldr	r0, [fp, #12]
   1510c:	and	r0, r0, #2
   15110:	str	r0, [sp, #12]
   15114:	ldr	r0, [fp, #-8]
   15118:	ldrh	r1, [fp, #-10]
   1511c:	ldr	r2, [fp, #-8]
   15120:	ldr	r2, [r2, #152]	; 0x98
   15124:	cmp	r2, #0
   15128:	movw	r2, #0
   1512c:	moveq	r2, #1
   15130:	mvn	r3, #0
   15134:	eor	r2, r2, r3
   15138:	and	r3, r2, #1
   1513c:	sub	r2, fp, #22
   15140:	str	r1, [sp, #8]
   15144:	mov	r1, r2
   15148:	ldr	r2, [sp, #8]
   1514c:	uxth	r2, r2
   15150:	str	ip, [sp, #4]
   15154:	bl	152c8 <flatcc_builder_embed_buffer@@Base+0x1e8>
   15158:	cmp	r0, #0
   1515c:	beq	1516c <flatcc_builder_embed_buffer@@Base+0x8c>
   15160:	movw	r0, #0
   15164:	str	r0, [fp, #-4]
   15168:	b	152b8 <flatcc_builder_embed_buffer@@Base+0x1d8>
   1516c:	ldr	r0, [fp, #-8]
   15170:	ldr	r1, [fp, #-20]	; 0xffffffec
   15174:	ldr	r2, [sp, #12]
   15178:	cmp	r2, #0
   1517c:	movw	r2, #0
   15180:	movne	r2, #1
   15184:	tst	r2, #1
   15188:	movw	r2, #4
   1518c:	moveq	r2, #0
   15190:	add	r1, r1, r2
   15194:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15198:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   1519c:	str	r0, [fp, #-32]	; 0xffffffe0
   151a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   151a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   151a8:	add	r0, r0, r1
   151ac:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   151b0:	str	r0, [fp, #-28]	; 0xffffffe4
   151b4:	movw	r0, #0
   151b8:	str	r0, [sp, #16]
   151bc:	str	r0, [sp, #20]
   151c0:	ldr	r0, [fp, #-8]
   151c4:	ldr	r0, [r0, #152]	; 0x98
   151c8:	cmp	r0, #0
   151cc:	beq	1520c <flatcc_builder_embed_buffer@@Base+0x12c>
   151d0:	ldr	r0, [sp, #16]
   151d4:	add	r0, r0, #4
   151d8:	str	r0, [sp, #16]
   151dc:	add	r0, sp, #16
   151e0:	add	r0, r0, #8
   151e4:	ldr	r1, [sp, #20]
   151e8:	sub	r2, fp, #28
   151ec:	str	r2, [r0, r1, lsl #3]
   151f0:	ldr	r1, [sp, #20]
   151f4:	add	r0, r0, r1, lsl #3
   151f8:	movw	r1, #4
   151fc:	str	r1, [r0, #4]
   15200:	ldr	r0, [sp, #20]
   15204:	add	r0, r0, #1
   15208:	str	r0, [sp, #20]
   1520c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15210:	cmp	r0, #0
   15214:	bls	15258 <flatcc_builder_embed_buffer@@Base+0x178>
   15218:	ldr	r0, [fp, #-20]	; 0xffffffec
   1521c:	ldr	r1, [sp, #16]
   15220:	add	r0, r1, r0
   15224:	str	r0, [sp, #16]
   15228:	ldr	r0, [fp, #-16]
   1522c:	add	r1, sp, #16
   15230:	add	r1, r1, #8
   15234:	ldr	r2, [sp, #20]
   15238:	str	r0, [r1, r2, lsl #3]
   1523c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15240:	ldr	r2, [sp, #20]
   15244:	add	r1, r1, r2, lsl #3
   15248:	str	r0, [r1, #4]
   1524c:	ldr	r0, [sp, #20]
   15250:	add	r0, r0, #1
   15254:	str	r0, [sp, #20]
   15258:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1525c:	cmp	r0, #0
   15260:	bls	152a8 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15264:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15268:	ldr	r1, [sp, #16]
   1526c:	add	r0, r1, r0
   15270:	str	r0, [sp, #16]
   15274:	add	r0, sp, #16
   15278:	add	r0, r0, #8
   1527c:	ldr	r1, [sp, #20]
   15280:	ldr	r2, [pc, #60]	; 152c4 <flatcc_builder_embed_buffer@@Base+0x1e4>
   15284:	ldr	r2, [pc, r2]
   15288:	str	r2, [r0, r1, lsl #3]
   1528c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15290:	ldr	r2, [sp, #20]
   15294:	add	r0, r0, r2, lsl #3
   15298:	str	r1, [r0, #4]
   1529c:	ldr	r0, [sp, #20]
   152a0:	add	r0, r0, #1
   152a4:	str	r0, [sp, #20]
   152a8:	ldr	r0, [fp, #-8]
   152ac:	add	r1, sp, #16
   152b0:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   152b4:	str	r0, [fp, #-4]
   152b8:	ldr	r0, [fp, #-4]
   152bc:	mov	sp, fp
   152c0:	pop	{fp, pc}
   152c4:	andeq	pc, r1, r8, asr #27
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	sub	sp, sp, #104	; 0x68
   152d4:	str	r0, [fp, #-4]
   152d8:	str	r1, [fp, #-8]
   152dc:	strh	r2, [fp, #-10]
   152e0:	str	r3, [fp, #-16]
   152e4:	ldrh	r0, [fp, #-10]
   152e8:	cmp	r0, #0
   152ec:	beq	152fc <flatcc_builder_embed_buffer@@Base+0x21c>
   152f0:	ldrh	r0, [fp, #-10]
   152f4:	str	r0, [sp, #8]
   152f8:	b	15330 <flatcc_builder_embed_buffer@@Base+0x250>
   152fc:	ldr	r0, [fp, #-4]
   15300:	ldrh	r0, [r0, #132]	; 0x84
   15304:	cmp	r0, #0
   15308:	beq	1531c <flatcc_builder_embed_buffer@@Base+0x23c>
   1530c:	ldr	r0, [fp, #-4]
   15310:	ldrh	r0, [r0, #132]	; 0x84
   15314:	str	r0, [sp, #4]
   15318:	b	15328 <flatcc_builder_embed_buffer@@Base+0x248>
   1531c:	movw	r0, #1
   15320:	str	r0, [sp, #4]
   15324:	b	15328 <flatcc_builder_embed_buffer@@Base+0x248>
   15328:	ldr	r0, [sp, #4]
   1532c:	str	r0, [sp, #8]
   15330:	ldr	r0, [sp, #8]
   15334:	strh	r0, [fp, #-10]
   15338:	ldr	r0, [fp, #-8]
   1533c:	movw	r1, #4
   15340:	uxth	r1, r1
   15344:	bl	16e28 <flatcc_builder_start_vector@@Base+0xac>
   15348:	ldr	r0, [fp, #-8]
   1534c:	ldrh	r1, [fp, #-10]
   15350:	bl	16e28 <flatcc_builder_start_vector@@Base+0xac>
   15354:	ldr	r0, [fp, #-16]
   15358:	cmp	r0, #0
   1535c:	bne	15418 <flatcc_builder_embed_buffer@@Base+0x338>
   15360:	ldr	r0, [fp, #-4]
   15364:	ldrh	r1, [fp, #-10]
   15368:	bl	1a25c <flatcc_builder_get_emit_context@@Base+0x18>
   1536c:	str	r0, [fp, #-20]	; 0xffffffec
   15370:	ldr	r0, [fp, #-20]	; 0xffffffec
   15374:	cmp	r0, #0
   15378:	beq	15414 <flatcc_builder_embed_buffer@@Base+0x334>
   1537c:	movw	r0, #0
   15380:	str	r0, [sp, #12]
   15384:	str	r0, [sp, #16]
   15388:	ldr	r0, [fp, #-20]	; 0xffffffec
   1538c:	cmp	r0, #0
   15390:	bls	153d8 <flatcc_builder_embed_buffer@@Base+0x2f8>
   15394:	ldr	r0, [fp, #-20]	; 0xffffffec
   15398:	ldr	r1, [sp, #12]
   1539c:	add	r0, r1, r0
   153a0:	str	r0, [sp, #12]
   153a4:	add	r0, sp, #12
   153a8:	add	r0, r0, #8
   153ac:	ldr	r1, [sp, #16]
   153b0:	ldr	r2, [pc, #120]	; 15430 <flatcc_builder_embed_buffer@@Base+0x350>
   153b4:	ldr	r2, [pc, r2]
   153b8:	str	r2, [r0, r1, lsl #3]
   153bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   153c0:	ldr	r2, [sp, #16]
   153c4:	add	r0, r0, r2, lsl #3
   153c8:	str	r1, [r0, #4]
   153cc:	ldr	r0, [sp, #16]
   153d0:	add	r0, r0, #1
   153d4:	str	r0, [sp, #16]
   153d8:	ldr	r0, [fp, #-4]
   153dc:	add	r1, sp, #12
   153e0:	bl	1740c <flatcc_builder_create_vtable@@Base+0x104>
   153e4:	movw	r1, #0
   153e8:	cmp	r1, r0
   153ec:	bne	15410 <flatcc_builder_embed_buffer@@Base+0x330>
   153f0:	ldr	r0, [pc, #44]	; 15424 <flatcc_builder_embed_buffer@@Base+0x344>
   153f4:	add	r0, pc, r0
   153f8:	ldr	r1, [pc, #40]	; 15428 <flatcc_builder_embed_buffer@@Base+0x348>
   153fc:	add	r1, pc, r1
   15400:	ldr	r2, [pc, #36]	; 1542c <flatcc_builder_embed_buffer@@Base+0x34c>
   15404:	add	r3, pc, r2
   15408:	movw	r2, #702	; 0x2be
   1540c:	bl	1298c <__assert_fail@plt>
   15410:	b	15414 <flatcc_builder_embed_buffer@@Base+0x334>
   15414:	b	15418 <flatcc_builder_embed_buffer@@Base+0x338>
   15418:	movw	r0, #0
   1541c:	mov	sp, fp
   15420:	pop	{fp, pc}
   15424:	andeq	lr, r0, r1, asr #2
   15428:	andeq	ip, r0, ip, ror pc
   1542c:	andeq	sp, r0, lr, lsr #31
   15430:	muleq	r1, r8, ip
   15434:	sub	sp, sp, #12
   15438:	str	r0, [sp, #8]
   1543c:	str	r1, [sp, #4]
   15440:	strh	r2, [sp, #2]
   15444:	ldr	r0, [sp, #8]
   15448:	ldr	r0, [r0, #136]	; 0x88
   1544c:	ldr	r1, [sp, #4]
   15450:	sub	r0, r0, r1
   15454:	ldrh	r1, [sp, #2]
   15458:	sub	r1, r1, #1
   1545c:	and	r0, r0, r1
   15460:	add	sp, sp, #12
   15464:	bx	lr
   15468:	sub	sp, sp, #4
   1546c:	str	r0, [sp]
   15470:	ldr	r0, [sp]
   15474:	add	sp, sp, #4
   15478:	bx	lr
   1547c:	push	{fp, lr}
   15480:	mov	fp, sp
   15484:	sub	sp, sp, #24
   15488:	str	r0, [fp, #-4]
   1548c:	str	r1, [fp, #-8]
   15490:	ldr	r0, [fp, #-4]
   15494:	ldr	r0, [r0, #136]	; 0x88
   15498:	ldr	r1, [fp, #-8]
   1549c:	ldr	r1, [r1]
   154a0:	sub	r0, r0, r1
   154a4:	str	r0, [sp, #12]
   154a8:	ldr	r0, [fp, #-8]
   154ac:	ldr	r0, [r0]
   154b0:	cmp	r0, #16
   154b4:	bls	154cc <flatcc_builder_embed_buffer@@Base+0x3ec>
   154b8:	ldr	r0, [fp, #-8]
   154bc:	ldr	r0, [r0]
   154c0:	sub	r0, r0, #16
   154c4:	cmn	r0, #1
   154c8:	bhi	154e0 <flatcc_builder_embed_buffer@@Base+0x400>
   154cc:	ldr	r0, [sp, #12]
   154d0:	ldr	r1, [fp, #-4]
   154d4:	ldr	r1, [r1, #136]	; 0x88
   154d8:	cmp	r0, r1
   154dc:	blt	15500 <flatcc_builder_embed_buffer@@Base+0x420>
   154e0:	ldr	r0, [pc, #172]	; 15594 <flatcc_builder_embed_buffer@@Base+0x4b4>
   154e4:	add	r0, pc, r0
   154e8:	ldr	r1, [pc, #168]	; 15598 <flatcc_builder_embed_buffer@@Base+0x4b8>
   154ec:	add	r1, pc, r1
   154f0:	ldr	r2, [pc, #164]	; 1559c <flatcc_builder_embed_buffer@@Base+0x4bc>
   154f4:	add	r3, pc, r2
   154f8:	movw	r2, #647	; 0x287
   154fc:	bl	1298c <__assert_fail@plt>
   15500:	ldr	r0, [fp, #-4]
   15504:	ldr	r0, [r0, #44]	; 0x2c
   15508:	ldr	r1, [fp, #-4]
   1550c:	ldr	r1, [r1, #36]	; 0x24
   15510:	ldr	r2, [fp, #-8]
   15514:	add	r2, r2, #8
   15518:	ldr	r3, [fp, #-8]
   1551c:	ldr	r3, [r3, #4]
   15520:	ldr	ip, [sp, #12]
   15524:	ldr	lr, [fp, #-8]
   15528:	ldr	lr, [lr]
   1552c:	str	r0, [sp, #8]
   15530:	mov	r0, r1
   15534:	mov	r1, r2
   15538:	mov	r2, r3
   1553c:	mov	r3, ip
   15540:	str	lr, [sp]
   15544:	ldr	ip, [sp, #8]
   15548:	blx	ip
   1554c:	cmp	r0, #0
   15550:	beq	15574 <flatcc_builder_embed_buffer@@Base+0x494>
   15554:	ldr	r0, [pc, #44]	; 15588 <flatcc_builder_embed_buffer@@Base+0x4a8>
   15558:	add	r0, pc, r0
   1555c:	ldr	r1, [pc, #40]	; 1558c <flatcc_builder_embed_buffer@@Base+0x4ac>
   15560:	add	r1, pc, r1
   15564:	ldr	r2, [pc, #36]	; 15590 <flatcc_builder_embed_buffer@@Base+0x4b0>
   15568:	add	r3, pc, r2
   1556c:	movw	r2, #651	; 0x28b
   15570:	bl	1298c <__assert_fail@plt>
   15574:	ldr	r0, [sp, #12]
   15578:	ldr	r1, [fp, #-4]
   1557c:	str	r0, [r1, #136]	; 0x88
   15580:	mov	sp, fp
   15584:	pop	{fp, pc}
   15588:	ldrdeq	sp, [r0], -sp	; <UNPREDICTABLE>
   1558c:	andeq	ip, r0, r8, lsl lr
   15590:	andeq	sp, r0, ip, lsl #29
   15594:	andeq	lr, r0, r1, asr r0
   15598:	andeq	ip, r0, ip, lsl #29
   1559c:	andeq	sp, r0, r0, lsl #30

000155a0 <flatcc_builder_create_buffer@@Base>:
   155a0:	push	{fp, lr}
   155a4:	mov	fp, sp
   155a8:	sub	sp, sp, #152	; 0x98
   155ac:	ldr	ip, [fp, #12]
   155b0:	ldr	lr, [fp, #8]
   155b4:	str	r0, [fp, #-8]
   155b8:	str	r1, [fp, #-12]
   155bc:	strh	r2, [fp, #-14]
   155c0:	str	r3, [fp, #-20]	; 0xffffffec
   155c4:	strh	lr, [fp, #-22]	; 0xffffffea
   155c8:	movw	r0, #0
   155cc:	str	r0, [fp, #-36]	; 0xffffffdc
   155d0:	str	r0, [sp, #28]
   155d4:	ldr	r0, [fp, #12]
   155d8:	and	r0, r0, #1
   155dc:	cmp	r0, #0
   155e0:	movw	r0, #0
   155e4:	movne	r0, #1
   155e8:	and	r0, r0, #1
   155ec:	str	r0, [sp, #24]
   155f0:	ldr	r0, [fp, #12]
   155f4:	and	r0, r0, #2
   155f8:	cmp	r0, #0
   155fc:	movw	r0, #0
   15600:	movne	r0, #1
   15604:	and	r0, r0, #1
   15608:	str	r0, [sp, #20]
   1560c:	ldr	r0, [fp, #-8]
   15610:	ldrh	r1, [fp, #-14]
   15614:	ldr	r3, [sp, #24]
   15618:	sub	r2, fp, #22
   1561c:	str	r1, [sp, #16]
   15620:	mov	r1, r2
   15624:	ldr	r2, [sp, #16]
   15628:	uxth	r2, r2
   1562c:	str	ip, [sp, #12]
   15630:	bl	152c8 <flatcc_builder_embed_buffer@@Base+0x1e8>
   15634:	cmp	r0, #0
   15638:	beq	15648 <flatcc_builder_create_buffer@@Base+0xa8>
   1563c:	movw	r0, #0
   15640:	str	r0, [fp, #-4]
   15644:	b	1592c <flatcc_builder_create_buffer@@Base+0x38c>
   15648:	ldr	r0, [fp, #-8]
   1564c:	ldrh	r1, [fp, #-22]	; 0xffffffea
   15650:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   15654:	ldr	r0, [fp, #-12]
   15658:	movw	r1, #0
   1565c:	cmp	r0, r1
   15660:	beq	156a0 <flatcc_builder_create_buffer@@Base+0x100>
   15664:	ldr	r0, [fp, #-12]
   15668:	ldrb	r1, [r0]
   1566c:	strb	r1, [sp, #28]
   15670:	ldrb	r1, [r0, #1]
   15674:	strb	r1, [sp, #29]
   15678:	ldrb	r1, [r0, #2]
   1567c:	strb	r1, [sp, #30]
   15680:	ldrb	r0, [r0, #3]
   15684:	strb	r0, [sp, #31]
   15688:	ldr	r0, [sp, #28]
   1568c:	bl	1597c <flatcc_builder_create_buffer@@Base+0x3dc>
   15690:	str	r0, [sp, #28]
   15694:	ldr	r0, [sp, #28]
   15698:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   1569c:	str	r0, [sp, #28]
   156a0:	ldr	r0, [sp, #28]
   156a4:	cmp	r0, #0
   156a8:	movw	r0, #0
   156ac:	movne	r0, #1
   156b0:	tst	r0, #1
   156b4:	movw	r0, #4
   156b8:	mov	r1, r0
   156bc:	moveq	r1, #0
   156c0:	str	r1, [fp, #-36]	; 0xffffffdc
   156c4:	ldr	r1, [fp, #-8]
   156c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   156cc:	add	r2, r2, #4
   156d0:	ldr	r3, [sp, #20]
   156d4:	cmp	r3, #0
   156d8:	movw	r3, #0
   156dc:	movne	r3, #1
   156e0:	tst	r3, #1
   156e4:	moveq	r0, #0
   156e8:	add	r0, r2, r0
   156ec:	str	r0, [sp, #8]
   156f0:	mov	r0, r1
   156f4:	ldr	r1, [sp, #8]
   156f8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   156fc:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   15700:	str	r0, [fp, #-32]	; 0xffffffe0
   15704:	movw	r0, #0
   15708:	str	r0, [sp, #32]
   1570c:	str	r0, [sp, #36]	; 0x24
   15710:	ldr	r0, [sp, #24]
   15714:	cmp	r0, #0
   15718:	bne	15728 <flatcc_builder_create_buffer@@Base+0x188>
   1571c:	ldr	r0, [sp, #20]
   15720:	cmp	r0, #0
   15724:	beq	15764 <flatcc_builder_create_buffer@@Base+0x1c4>
   15728:	ldr	r0, [sp, #32]
   1572c:	add	r0, r0, #4
   15730:	str	r0, [sp, #32]
   15734:	add	r0, sp, #32
   15738:	add	r0, r0, #8
   1573c:	ldr	r1, [sp, #36]	; 0x24
   15740:	sub	r2, fp, #44	; 0x2c
   15744:	str	r2, [r0, r1, lsl #3]
   15748:	ldr	r1, [sp, #36]	; 0x24
   1574c:	add	r0, r0, r1, lsl #3
   15750:	movw	r1, #4
   15754:	str	r1, [r0, #4]
   15758:	ldr	r0, [sp, #36]	; 0x24
   1575c:	add	r0, r0, #1
   15760:	str	r0, [sp, #36]	; 0x24
   15764:	ldr	r0, [sp, #32]
   15768:	add	r0, r0, #4
   1576c:	str	r0, [sp, #32]
   15770:	add	r0, sp, #32
   15774:	add	r0, r0, #8
   15778:	ldr	r1, [sp, #36]	; 0x24
   1577c:	sub	r2, fp, #40	; 0x28
   15780:	str	r2, [r0, r1, lsl #3]
   15784:	ldr	r1, [sp, #36]	; 0x24
   15788:	add	r0, r0, r1, lsl #3
   1578c:	movw	r1, #4
   15790:	str	r1, [r0, #4]
   15794:	ldr	r0, [sp, #36]	; 0x24
   15798:	add	r0, r0, #1
   1579c:	str	r0, [sp, #36]	; 0x24
   157a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   157a4:	cmp	r0, #0
   157a8:	bls	157ec <flatcc_builder_create_buffer@@Base+0x24c>
   157ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   157b0:	ldr	r1, [sp, #32]
   157b4:	add	r0, r1, r0
   157b8:	str	r0, [sp, #32]
   157bc:	add	r0, sp, #32
   157c0:	add	r0, r0, #8
   157c4:	ldr	r1, [sp, #36]	; 0x24
   157c8:	add	r2, sp, #28
   157cc:	str	r2, [r0, r1, lsl #3]
   157d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   157d4:	ldr	r2, [sp, #36]	; 0x24
   157d8:	add	r0, r0, r2, lsl #3
   157dc:	str	r1, [r0, #4]
   157e0:	ldr	r0, [sp, #36]	; 0x24
   157e4:	add	r0, r0, #1
   157e8:	str	r0, [sp, #36]	; 0x24
   157ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   157f0:	cmp	r0, #0
   157f4:	bls	1583c <flatcc_builder_create_buffer@@Base+0x29c>
   157f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   157fc:	ldr	r1, [sp, #32]
   15800:	add	r0, r1, r0
   15804:	str	r0, [sp, #32]
   15808:	add	r0, sp, #32
   1580c:	add	r0, r0, #8
   15810:	ldr	r1, [sp, #36]	; 0x24
   15814:	ldr	r2, [pc, #296]	; 15944 <flatcc_builder_create_buffer@@Base+0x3a4>
   15818:	ldr	r2, [pc, r2]
   1581c:	str	r2, [r0, r1, lsl #3]
   15820:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15824:	ldr	r2, [sp, #36]	; 0x24
   15828:	add	r0, r0, r2, lsl #3
   1582c:	str	r1, [r0, #4]
   15830:	ldr	r0, [sp, #36]	; 0x24
   15834:	add	r0, r0, #1
   15838:	str	r0, [sp, #36]	; 0x24
   1583c:	ldr	r0, [fp, #-8]
   15840:	ldr	r0, [r0, #136]	; 0x88
   15844:	ldr	r1, [sp, #32]
   15848:	sub	r0, r0, r1
   1584c:	ldr	r1, [sp, #24]
   15850:	cmp	r1, #0
   15854:	movw	r1, #1
   15858:	str	r0, [sp, #4]
   1585c:	str	r1, [sp]
   15860:	bne	15878 <flatcc_builder_create_buffer@@Base+0x2d8>
   15864:	ldr	r0, [sp, #20]
   15868:	cmp	r0, #0
   1586c:	movw	r0, #0
   15870:	movne	r0, #1
   15874:	str	r0, [sp]
   15878:	ldr	r0, [sp]
   1587c:	tst	r0, #1
   15880:	movw	r0, #4
   15884:	moveq	r0, #0
   15888:	ldr	r1, [sp, #4]
   1588c:	add	r0, r1, r0
   15890:	str	r0, [fp, #-48]	; 0xffffffd0
   15894:	ldr	r0, [sp, #24]
   15898:	cmp	r0, #0
   1589c:	beq	158bc <flatcc_builder_create_buffer@@Base+0x31c>
   158a0:	ldr	r0, [fp, #-8]
   158a4:	ldr	r0, [r0, #144]	; 0x90
   158a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   158ac:	sub	r0, r0, r1
   158b0:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   158b4:	str	r0, [fp, #-44]	; 0xffffffd4
   158b8:	b	158d4 <flatcc_builder_create_buffer@@Base+0x334>
   158bc:	ldr	r0, [fp, #-8]
   158c0:	ldr	r0, [r0, #140]	; 0x8c
   158c4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   158c8:	sub	r0, r0, r1
   158cc:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   158d0:	str	r0, [fp, #-44]	; 0xffffffd4
   158d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   158d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   158dc:	sub	r0, r0, r1
   158e0:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   158e4:	str	r0, [fp, #-40]	; 0xffffffd8
   158e8:	ldr	r0, [fp, #-8]
   158ec:	add	r1, sp, #32
   158f0:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   158f4:	str	r0, [fp, #-28]	; 0xffffffe4
   158f8:	movw	r1, #0
   158fc:	cmp	r1, r0
   15900:	bne	15924 <flatcc_builder_create_buffer@@Base+0x384>
   15904:	ldr	r0, [pc, #44]	; 15938 <flatcc_builder_create_buffer@@Base+0x398>
   15908:	add	r0, pc, r0
   1590c:	ldr	r1, [pc, #40]	; 1593c <flatcc_builder_create_buffer@@Base+0x39c>
   15910:	add	r1, pc, r1
   15914:	ldr	r2, [pc, #36]	; 15940 <flatcc_builder_create_buffer@@Base+0x3a0>
   15918:	add	r3, pc, r2
   1591c:	movw	r2, #772	; 0x304
   15920:	bl	1298c <__assert_fail@plt>
   15924:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15928:	str	r0, [fp, #-4]
   1592c:	ldr	r0, [fp, #-4]
   15930:	mov	sp, fp
   15934:	pop	{fp, pc}
   15938:	andeq	sp, r0, sp, lsr #24
   1593c:	andeq	ip, r0, r8, ror #20
   15940:			; <UNDEFINED> instruction: 0x0000cbb2
   15944:	andeq	pc, r1, r4, lsr r8	; <UNPREDICTABLE>
   15948:	sub	sp, sp, #8
   1594c:	str	r0, [sp, #4]
   15950:	strh	r1, [sp, #2]
   15954:	ldr	r0, [sp, #4]
   15958:	ldrh	r0, [r0, #128]	; 0x80
   1595c:	ldrh	r1, [sp, #2]
   15960:	cmp	r0, r1
   15964:	bge	15974 <flatcc_builder_create_buffer@@Base+0x3d4>
   15968:	ldrh	r0, [sp, #2]
   1596c:	ldr	r1, [sp, #4]
   15970:	strh	r0, [r1, #128]	; 0x80
   15974:	add	sp, sp, #8
   15978:	bx	lr
   1597c:	sub	sp, sp, #4
   15980:	str	r0, [sp]
   15984:	ldr	r0, [sp]
   15988:	add	sp, sp, #4
   1598c:	bx	lr

00015990 <flatcc_builder_create_struct@@Base>:
   15990:	push	{fp, lr}
   15994:	mov	fp, sp
   15998:	sub	sp, sp, #96	; 0x60
   1599c:	str	r0, [fp, #-4]
   159a0:	str	r1, [fp, #-8]
   159a4:	str	r2, [fp, #-12]
   159a8:	strh	r3, [fp, #-14]
   159ac:	ldrh	r0, [fp, #-14]
   159b0:	cmp	r0, #1
   159b4:	blt	159bc <flatcc_builder_create_struct@@Base+0x2c>
   159b8:	b	159dc <flatcc_builder_create_struct@@Base+0x4c>
   159bc:	ldr	r0, [pc, #244]	; 15ab8 <flatcc_builder_create_struct@@Base+0x128>
   159c0:	add	r0, pc, r0
   159c4:	ldr	r1, [pc, #240]	; 15abc <flatcc_builder_create_struct@@Base+0x12c>
   159c8:	add	r1, pc, r1
   159cc:	ldr	r2, [pc, #236]	; 15ac0 <flatcc_builder_create_struct@@Base+0x130>
   159d0:	add	r3, pc, r2
   159d4:	movw	r2, #783	; 0x30f
   159d8:	bl	1298c <__assert_fail@plt>
   159dc:	ldr	r0, [fp, #-4]
   159e0:	ldrh	r1, [fp, #-14]
   159e4:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   159e8:	ldr	r0, [fp, #-4]
   159ec:	ldr	r1, [fp, #-12]
   159f0:	ldrh	r2, [fp, #-14]
   159f4:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   159f8:	str	r0, [fp, #-20]	; 0xffffffec
   159fc:	movw	r0, #0
   15a00:	str	r0, [sp, #4]
   15a04:	str	r0, [sp, #8]
   15a08:	ldr	r0, [fp, #-12]
   15a0c:	cmp	r0, #0
   15a10:	bls	15a54 <flatcc_builder_create_struct@@Base+0xc4>
   15a14:	ldr	r0, [fp, #-12]
   15a18:	ldr	r1, [sp, #4]
   15a1c:	add	r0, r1, r0
   15a20:	str	r0, [sp, #4]
   15a24:	ldr	r0, [fp, #-8]
   15a28:	add	r1, sp, #4
   15a2c:	add	r1, r1, #8
   15a30:	ldr	r2, [sp, #8]
   15a34:	str	r0, [r1, r2, lsl #3]
   15a38:	ldr	r0, [fp, #-12]
   15a3c:	ldr	r2, [sp, #8]
   15a40:	add	r1, r1, r2, lsl #3
   15a44:	str	r0, [r1, #4]
   15a48:	ldr	r0, [sp, #8]
   15a4c:	add	r0, r0, #1
   15a50:	str	r0, [sp, #8]
   15a54:	ldr	r0, [fp, #-20]	; 0xffffffec
   15a58:	cmp	r0, #0
   15a5c:	bls	15aa4 <flatcc_builder_create_struct@@Base+0x114>
   15a60:	ldr	r0, [fp, #-20]	; 0xffffffec
   15a64:	ldr	r1, [sp, #4]
   15a68:	add	r0, r1, r0
   15a6c:	str	r0, [sp, #4]
   15a70:	add	r0, sp, #4
   15a74:	add	r0, r0, #8
   15a78:	ldr	r1, [sp, #8]
   15a7c:	ldr	r2, [pc, #64]	; 15ac4 <flatcc_builder_create_struct@@Base+0x134>
   15a80:	ldr	r2, [pc, r2]
   15a84:	str	r2, [r0, r1, lsl #3]
   15a88:	ldr	r1, [fp, #-20]	; 0xffffffec
   15a8c:	ldr	r2, [sp, #8]
   15a90:	add	r0, r0, r2, lsl #3
   15a94:	str	r1, [r0, #4]
   15a98:	ldr	r0, [sp, #8]
   15a9c:	add	r0, r0, #1
   15aa0:	str	r0, [sp, #8]
   15aa4:	ldr	r0, [fp, #-4]
   15aa8:	add	r1, sp, #4
   15aac:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   15ab0:	mov	sp, fp
   15ab4:	pop	{fp, pc}
   15ab8:	andeq	ip, r0, sp, lsl #23
   15abc:			; <UNDEFINED> instruction: 0x0000c9b0
   15ac0:	andeq	ip, r0, r8, lsl #23
   15ac4:	andeq	pc, r1, ip, asr #11

00015ac8 <flatcc_builder_start_buffer@@Base>:
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	sub	sp, sp, #32
   15ad4:	str	r0, [fp, #-8]
   15ad8:	str	r1, [fp, #-12]
   15adc:	strh	r2, [fp, #-14]
   15ae0:	str	r3, [sp, #12]
   15ae4:	ldr	r0, [fp, #-8]
   15ae8:	ldr	r1, [fp, #-8]
   15aec:	ldrh	r1, [r1, #128]	; 0x80
   15af0:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   15af4:	cmp	r0, #0
   15af8:	beq	15b08 <flatcc_builder_start_buffer@@Base+0x40>
   15afc:	mvn	r0, #0
   15b00:	str	r0, [fp, #-4]
   15b04:	b	15c30 <flatcc_builder_start_buffer@@Base+0x168>
   15b08:	ldr	r0, [fp, #-8]
   15b0c:	movw	r1, #1
   15b10:	strh	r1, [r0, #128]	; 0x80
   15b14:	ldr	r0, [fp, #-8]
   15b18:	ldrh	r0, [r0, #132]	; 0x84
   15b1c:	ldr	r1, [fp, #-8]
   15b20:	ldr	r1, [r1, #32]
   15b24:	strh	r0, [r1, #34]	; 0x22
   15b28:	ldrh	r0, [fp, #-14]
   15b2c:	ldr	r1, [fp, #-8]
   15b30:	strh	r0, [r1, #132]	; 0x84
   15b34:	ldr	r0, [fp, #-8]
   15b38:	ldrh	r0, [r0, #164]	; 0xa4
   15b3c:	ldr	r1, [fp, #-8]
   15b40:	ldr	r1, [r1, #32]
   15b44:	strh	r0, [r1, #32]
   15b48:	ldr	r0, [sp, #12]
   15b4c:	ldr	r1, [fp, #-8]
   15b50:	strh	r0, [r1, #164]	; 0xa4
   15b54:	ldr	r0, [fp, #-8]
   15b58:	ldr	r0, [r0, #144]	; 0x90
   15b5c:	ldr	r1, [fp, #-8]
   15b60:	ldr	r1, [r1, #32]
   15b64:	str	r0, [r1, #20]
   15b68:	ldr	r0, [fp, #-8]
   15b6c:	ldr	r0, [r0, #152]	; 0x98
   15b70:	ldr	r1, [fp, #-8]
   15b74:	ldr	r1, [r1, #32]
   15b78:	str	r0, [r1, #28]
   15b7c:	ldr	r0, [fp, #-8]
   15b80:	ldr	r0, [r0, #136]	; 0x88
   15b84:	ldr	r1, [fp, #-8]
   15b88:	str	r0, [r1, #144]	; 0x90
   15b8c:	ldr	r0, [fp, #-8]
   15b90:	ldr	r1, [r0, #148]	; 0x94
   15b94:	add	r2, r1, #1
   15b98:	str	r2, [r0, #148]	; 0x94
   15b9c:	ldr	r0, [fp, #-8]
   15ba0:	str	r1, [r0, #152]	; 0x98
   15ba4:	ldr	r0, [fp, #-8]
   15ba8:	ldr	r0, [r0, #168]	; 0xa8
   15bac:	ldr	r1, [fp, #-8]
   15bb0:	ldr	r1, [r1, #32]
   15bb4:	str	r0, [r1, #16]
   15bb8:	ldr	r0, [fp, #-8]
   15bbc:	add	r0, r0, #168	; 0xa8
   15bc0:	ldr	r1, [fp, #-12]
   15bc4:	movw	r2, #0
   15bc8:	cmp	r1, r2
   15bcc:	str	r0, [sp, #8]
   15bd0:	beq	15be0 <flatcc_builder_start_buffer@@Base+0x118>
   15bd4:	ldr	r0, [fp, #-12]
   15bd8:	str	r0, [sp, #4]
   15bdc:	b	15bf0 <flatcc_builder_start_buffer@@Base+0x128>
   15be0:	ldr	r0, [pc, #84]	; 15c3c <flatcc_builder_start_buffer@@Base+0x174>
   15be4:	ldr	r0, [pc, r0]
   15be8:	str	r0, [sp, #4]
   15bec:	b	15bf0 <flatcc_builder_start_buffer@@Base+0x128>
   15bf0:	ldr	r0, [sp, #4]
   15bf4:	ldrb	r1, [r0]
   15bf8:	ldr	r2, [sp, #8]
   15bfc:	strb	r1, [r2]
   15c00:	ldrb	r1, [r0, #1]
   15c04:	strb	r1, [r2, #1]
   15c08:	ldrb	r1, [r0, #2]
   15c0c:	strb	r1, [r2, #2]
   15c10:	ldrb	r0, [r0, #3]
   15c14:	strb	r0, [r2, #3]
   15c18:	ldr	r0, [fp, #-8]
   15c1c:	ldr	r0, [r0, #32]
   15c20:	movw	r1, #1
   15c24:	strh	r1, [r0, #14]
   15c28:	movw	r0, #0
   15c2c:	str	r0, [fp, #-4]
   15c30:	ldr	r0, [fp, #-4]
   15c34:	mov	sp, fp
   15c38:	pop	{fp, pc}
   15c3c:	andeq	pc, r1, r8, ror #8
   15c40:	push	{fp, lr}
   15c44:	mov	fp, sp
   15c48:	sub	sp, sp, #24
   15c4c:	str	r0, [fp, #-8]
   15c50:	strh	r1, [fp, #-10]
   15c54:	ldr	r0, [fp, #-8]
   15c58:	ldr	r1, [r0, #156]	; 0x9c
   15c5c:	add	r1, r1, #1
   15c60:	str	r1, [r0, #156]	; 0x9c
   15c64:	ldr	r0, [fp, #-8]
   15c68:	ldr	r0, [r0, #160]	; 0xa0
   15c6c:	cmp	r1, r0
   15c70:	ble	15d5c <flatcc_builder_start_buffer@@Base+0x294>
   15c74:	ldr	r0, [fp, #-8]
   15c78:	ldr	r0, [r0, #176]	; 0xb0
   15c7c:	cmp	r0, #0
   15c80:	ble	15ca8 <flatcc_builder_start_buffer@@Base+0x1e0>
   15c84:	ldr	r0, [fp, #-8]
   15c88:	ldr	r0, [r0, #156]	; 0x9c
   15c8c:	ldr	r1, [fp, #-8]
   15c90:	ldr	r1, [r1, #176]	; 0xb0
   15c94:	cmp	r0, r1
   15c98:	ble	15ca8 <flatcc_builder_start_buffer@@Base+0x1e0>
   15c9c:	mvn	r0, #0
   15ca0:	str	r0, [fp, #-4]
   15ca4:	b	15e00 <flatcc_builder_start_buffer@@Base+0x338>
   15ca8:	ldr	r0, [fp, #-8]
   15cac:	ldr	r1, [fp, #-8]
   15cb0:	ldr	r1, [r1, #156]	; 0x9c
   15cb4:	sub	r1, r1, #1
   15cb8:	movw	r2, #36	; 0x24
   15cbc:	mul	r1, r1, r2
   15cc0:	movw	r3, #4
   15cc4:	str	r1, [sp, #8]
   15cc8:	mov	r1, r3
   15ccc:	ldr	r3, [sp, #8]
   15cd0:	str	r2, [sp, #4]
   15cd4:	mov	r2, r3
   15cd8:	ldr	r3, [sp, #4]
   15cdc:	movw	ip, #0
   15ce0:	str	ip, [sp]
   15ce4:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15ce8:	ldr	r1, [fp, #-8]
   15cec:	str	r0, [r1, #32]
   15cf0:	movw	r1, #0
   15cf4:	cmp	r0, r1
   15cf8:	bne	15d08 <flatcc_builder_start_buffer@@Base+0x240>
   15cfc:	mvn	r0, #0
   15d00:	str	r0, [fp, #-4]
   15d04:	b	15e00 <flatcc_builder_start_buffer@@Base+0x338>
   15d08:	ldr	r0, [fp, #-8]
   15d0c:	ldr	r0, [r0, #88]	; 0x58
   15d10:	movw	r1, #36	; 0x24
   15d14:	udiv	r0, r0, r1
   15d18:	ldr	r1, [fp, #-8]
   15d1c:	str	r0, [r1, #160]	; 0xa0
   15d20:	ldr	r0, [fp, #-8]
   15d24:	ldr	r0, [r0, #176]	; 0xb0
   15d28:	cmp	r0, #0
   15d2c:	ble	15d58 <flatcc_builder_start_buffer@@Base+0x290>
   15d30:	ldr	r0, [fp, #-8]
   15d34:	ldr	r0, [r0, #176]	; 0xb0
   15d38:	ldr	r1, [fp, #-8]
   15d3c:	ldr	r1, [r1, #160]	; 0xa0
   15d40:	cmp	r0, r1
   15d44:	bge	15d58 <flatcc_builder_start_buffer@@Base+0x290>
   15d48:	ldr	r0, [fp, #-8]
   15d4c:	ldr	r0, [r0, #176]	; 0xb0
   15d50:	ldr	r1, [fp, #-8]
   15d54:	str	r0, [r1, #160]	; 0xa0
   15d58:	b	15d6c <flatcc_builder_start_buffer@@Base+0x2a4>
   15d5c:	ldr	r0, [fp, #-8]
   15d60:	ldr	r1, [r0, #32]
   15d64:	add	r1, r1, #36	; 0x24
   15d68:	str	r1, [r0, #32]
   15d6c:	ldr	r0, [fp, #-8]
   15d70:	ldr	r0, [r0, #20]
   15d74:	ldr	r1, [fp, #-8]
   15d78:	ldr	r1, [r1, #32]
   15d7c:	str	r0, [r1, #8]
   15d80:	ldr	r0, [fp, #-8]
   15d84:	ldrh	r0, [r0, #130]	; 0x82
   15d88:	ldr	r1, [fp, #-8]
   15d8c:	ldr	r1, [r1, #32]
   15d90:	strh	r0, [r1, #12]
   15d94:	ldrh	r0, [fp, #-10]
   15d98:	ldr	r1, [fp, #-8]
   15d9c:	strh	r0, [r1, #130]	; 0x82
   15da0:	ldr	r0, [fp, #-8]
   15da4:	ldr	r0, [r0, #28]
   15da8:	ldr	r1, [fp, #-8]
   15dac:	ldr	r1, [r1, #32]
   15db0:	str	r0, [r1]
   15db4:	ldr	r0, [fp, #-8]
   15db8:	ldr	r0, [r0, #32]
   15dbc:	mvn	r1, #3
   15dc0:	str	r1, [r0, #4]
   15dc4:	ldr	r0, [fp, #-8]
   15dc8:	ldr	r0, [r0, #28]
   15dcc:	ldr	r1, [fp, #-8]
   15dd0:	ldr	r1, [r1, #20]
   15dd4:	add	r0, r0, r1
   15dd8:	add	r0, r0, #8
   15ddc:	sub	r0, r0, #1
   15de0:	mvn	r1, #7
   15de4:	and	r0, r0, r1
   15de8:	ldr	r1, [fp, #-8]
   15dec:	str	r0, [r1, #28]
   15df0:	ldr	r0, [fp, #-8]
   15df4:	movw	r1, #0
   15df8:	str	r1, [r0, #20]
   15dfc:	str	r1, [fp, #-4]
   15e00:	ldr	r0, [fp, #-4]
   15e04:	mov	sp, fp
   15e08:	pop	{fp, pc}

00015e0c <flatcc_builder_end_buffer@@Base>:
   15e0c:	push	{fp, lr}
   15e10:	mov	fp, sp
   15e14:	sub	sp, sp, #32
   15e18:	str	r0, [fp, #-8]
   15e1c:	str	r1, [fp, #-12]
   15e20:	ldr	r0, [fp, #-8]
   15e24:	ldrh	r0, [r0, #164]	; 0xa4
   15e28:	and	r0, r0, #2
   15e2c:	str	r0, [sp, #12]
   15e30:	ldr	r0, [fp, #-8]
   15e34:	ldr	r0, [r0, #152]	; 0x98
   15e38:	cmp	r0, #0
   15e3c:	movw	r0, #0
   15e40:	moveq	r0, #1
   15e44:	tst	r0, #1
   15e48:	movw	r0, #0
   15e4c:	moveq	r0, #1
   15e50:	ldr	r1, [sp, #12]
   15e54:	orr	r0, r1, r0
   15e58:	str	r0, [sp, #12]
   15e5c:	ldr	r0, [fp, #-8]
   15e60:	ldr	r0, [r0, #32]
   15e64:	ldrh	r0, [r0, #14]
   15e68:	cmp	r0, #1
   15e6c:	bne	15e74 <flatcc_builder_end_buffer@@Base+0x68>
   15e70:	b	15e94 <flatcc_builder_end_buffer@@Base+0x88>
   15e74:	ldr	r0, [pc, #232]	; 15f64 <flatcc_builder_end_buffer@@Base+0x158>
   15e78:	add	r0, pc, r0
   15e7c:	ldr	r1, [pc, #228]	; 15f68 <flatcc_builder_end_buffer@@Base+0x15c>
   15e80:	add	r1, pc, r1
   15e84:	ldr	r2, [pc, #224]	; 15f6c <flatcc_builder_end_buffer@@Base+0x160>
   15e88:	add	r3, pc, r2
   15e8c:	movw	r2, #838	; 0x346
   15e90:	bl	1298c <__assert_fail@plt>
   15e94:	ldr	r0, [fp, #-8]
   15e98:	ldr	r1, [fp, #-8]
   15e9c:	ldrh	r1, [r1, #132]	; 0x84
   15ea0:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   15ea4:	ldr	r0, [fp, #-8]
   15ea8:	ldr	r1, [fp, #-8]
   15eac:	add	r1, r1, #168	; 0xa8
   15eb0:	ldr	r2, [fp, #-8]
   15eb4:	ldrh	r2, [r2, #132]	; 0x84
   15eb8:	ldr	r3, [fp, #-12]
   15ebc:	ldr	ip, [fp, #-8]
   15ec0:	ldrh	ip, [ip, #128]	; 0x80
   15ec4:	ldr	lr, [sp, #12]
   15ec8:	uxth	r2, r2
   15ecc:	uxth	ip, ip
   15ed0:	str	ip, [sp]
   15ed4:	str	lr, [sp, #4]
   15ed8:	bl	155a0 <flatcc_builder_create_buffer@@Base>
   15edc:	str	r0, [sp, #16]
   15ee0:	movw	r1, #0
   15ee4:	cmp	r1, r0
   15ee8:	bne	15ef8 <flatcc_builder_end_buffer@@Base+0xec>
   15eec:	movw	r0, #0
   15ef0:	str	r0, [fp, #-4]
   15ef4:	b	15f58 <flatcc_builder_end_buffer@@Base+0x14c>
   15ef8:	ldr	r0, [fp, #-8]
   15efc:	ldr	r0, [r0, #32]
   15f00:	ldr	r0, [r0, #20]
   15f04:	ldr	r1, [fp, #-8]
   15f08:	str	r0, [r1, #144]	; 0x90
   15f0c:	ldr	r0, [fp, #-8]
   15f10:	ldr	r0, [r0, #32]
   15f14:	ldr	r0, [r0, #28]
   15f18:	ldr	r1, [fp, #-8]
   15f1c:	str	r0, [r1, #152]	; 0x98
   15f20:	ldr	r0, [fp, #-8]
   15f24:	ldr	r0, [r0, #32]
   15f28:	ldr	r0, [r0, #16]
   15f2c:	ldr	r1, [fp, #-8]
   15f30:	str	r0, [r1, #168]	; 0xa8
   15f34:	ldr	r0, [fp, #-8]
   15f38:	ldr	r0, [r0, #32]
   15f3c:	ldrh	r0, [r0, #32]
   15f40:	ldr	r1, [fp, #-8]
   15f44:	strh	r0, [r1, #164]	; 0xa4
   15f48:	ldr	r0, [fp, #-8]
   15f4c:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   15f50:	ldr	r0, [sp, #16]
   15f54:	str	r0, [fp, #-4]
   15f58:	ldr	r0, [fp, #-4]
   15f5c:	mov	sp, fp
   15f60:	pop	{fp, pc}
   15f64:	andeq	ip, r0, r6, asr #14
   15f68:	strdeq	ip, [r0], -r8
   15f6c:	andeq	ip, r0, r2, ror #14
   15f70:	push	{fp, lr}
   15f74:	mov	fp, sp
   15f78:	sub	sp, sp, #8
   15f7c:	str	r0, [sp, #4]
   15f80:	ldr	r0, [sp, #4]
   15f84:	ldr	r0, [r0, #16]
   15f88:	ldr	r1, [sp, #4]
   15f8c:	ldr	r2, [r1, #20]
   15f90:	movw	r1, #0
   15f94:	and	r1, r1, #255	; 0xff
   15f98:	bl	1295c <memset@plt>
   15f9c:	ldr	r0, [sp, #4]
   15fa0:	ldr	r0, [r0, #32]
   15fa4:	ldr	r0, [r0, #8]
   15fa8:	ldr	r1, [sp, #4]
   15fac:	str	r0, [r1, #20]
   15fb0:	ldr	r0, [sp, #4]
   15fb4:	ldr	r0, [r0, #32]
   15fb8:	ldr	r0, [r0]
   15fbc:	ldr	r1, [sp, #4]
   15fc0:	str	r0, [r1, #28]
   15fc4:	ldr	r0, [sp, #4]
   15fc8:	ldr	r1, [sp, #4]
   15fcc:	ldr	r1, [r1, #32]
   15fd0:	ldr	r1, [r1, #4]
   15fd4:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   15fd8:	ldr	r0, [sp, #4]
   15fdc:	ldr	r1, [sp, #4]
   15fe0:	ldrh	r1, [r1, #130]	; 0x82
   15fe4:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   15fe8:	ldr	r0, [sp, #4]
   15fec:	ldr	r0, [r0, #32]
   15ff0:	ldrh	r0, [r0, #12]
   15ff4:	ldr	r1, [sp, #4]
   15ff8:	strh	r0, [r1, #130]	; 0x82
   15ffc:	ldr	r0, [sp, #4]
   16000:	ldr	r1, [r0, #32]
   16004:	mvn	r2, #35	; 0x23
   16008:	add	r1, r1, r2
   1600c:	str	r1, [r0, #32]
   16010:	ldr	r0, [sp, #4]
   16014:	ldr	r1, [r0, #156]	; 0x9c
   16018:	mvn	r2, #0
   1601c:	add	r1, r1, r2
   16020:	str	r1, [r0, #156]	; 0x9c
   16024:	mov	sp, fp
   16028:	pop	{fp, pc}

0001602c <flatcc_builder_start_struct@@Base>:
   1602c:	push	{fp, lr}
   16030:	mov	fp, sp
   16034:	sub	sp, sp, #16
   16038:	str	r0, [sp, #8]
   1603c:	str	r1, [sp, #4]
   16040:	strh	r2, [sp, #2]
   16044:	ldr	r0, [sp, #8]
   16048:	ldrh	r1, [sp, #2]
   1604c:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   16050:	cmp	r0, #0
   16054:	beq	16064 <flatcc_builder_start_struct@@Base+0x38>
   16058:	movw	r0, #0
   1605c:	str	r0, [fp, #-4]
   16060:	b	16090 <flatcc_builder_start_struct@@Base+0x64>
   16064:	ldr	r0, [sp, #8]
   16068:	ldr	r0, [r0, #32]
   1606c:	movw	r1, #2
   16070:	strh	r1, [r0, #14]
   16074:	ldr	r0, [sp, #8]
   16078:	mvn	r1, #3
   1607c:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   16080:	ldr	r0, [sp, #8]
   16084:	ldr	r1, [sp, #4]
   16088:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   1608c:	str	r0, [fp, #-4]
   16090:	ldr	r0, [fp, #-4]
   16094:	mov	sp, fp
   16098:	pop	{fp, pc}
   1609c:	sub	sp, sp, #12
   160a0:	str	r0, [sp, #8]
   160a4:	str	r1, [sp, #4]
   160a8:	ldr	r0, [sp, #8]
   160ac:	add	r0, r0, #52	; 0x34
   160b0:	add	r0, r0, #8
   160b4:	str	r0, [sp]
   160b8:	ldr	r0, [sp, #8]
   160bc:	ldr	r0, [r0, #60]	; 0x3c
   160c0:	ldr	r1, [sp, #8]
   160c4:	ldr	r1, [r1, #28]
   160c8:	add	r0, r0, r1
   160cc:	ldr	r1, [sp, #8]
   160d0:	str	r0, [r1, #16]
   160d4:	ldr	r0, [sp]
   160d8:	ldr	r0, [r0, #4]
   160dc:	ldr	r1, [sp, #8]
   160e0:	ldr	r1, [r1, #28]
   160e4:	sub	r0, r0, r1
   160e8:	ldr	r1, [sp, #8]
   160ec:	str	r0, [r1, #24]
   160f0:	ldr	r0, [sp, #8]
   160f4:	ldr	r0, [r0, #24]
   160f8:	ldr	r1, [sp, #4]
   160fc:	cmp	r0, r1
   16100:	bls	16110 <flatcc_builder_start_struct@@Base+0xe4>
   16104:	ldr	r0, [sp, #4]
   16108:	ldr	r1, [sp, #8]
   1610c:	str	r0, [r1, #24]
   16110:	ldr	r0, [sp, #4]
   16114:	ldr	r1, [sp, #8]
   16118:	ldr	r1, [r1, #32]
   1611c:	str	r0, [r1, #4]
   16120:	add	sp, sp, #12
   16124:	bx	lr
   16128:	push	{fp, lr}
   1612c:	mov	fp, sp
   16130:	sub	sp, sp, #16
   16134:	str	r0, [sp, #8]
   16138:	str	r1, [sp, #4]
   1613c:	ldr	r0, [sp, #8]
   16140:	ldr	r0, [r0, #20]
   16144:	str	r0, [sp]
   16148:	ldr	r0, [sp, #4]
   1614c:	ldr	r1, [sp, #8]
   16150:	ldr	r2, [r1, #20]
   16154:	add	r0, r2, r0
   16158:	str	r0, [r1, #20]
   1615c:	ldr	r1, [sp, #8]
   16160:	ldr	r1, [r1, #24]
   16164:	cmp	r0, r1
   16168:	bcc	1619c <flatcc_builder_start_struct@@Base+0x170>
   1616c:	ldr	r0, [sp, #8]
   16170:	ldr	r1, [sp, #8]
   16174:	ldr	r1, [r1, #20]
   16178:	add	r1, r1, #1
   1617c:	mvn	r2, #3
   16180:	bl	1a284 <flatcc_builder_get_emit_context@@Base+0x40>
   16184:	cmp	r0, #0
   16188:	beq	16198 <flatcc_builder_start_struct@@Base+0x16c>
   1618c:	movw	r0, #0
   16190:	str	r0, [fp, #-4]
   16194:	b	161b0 <flatcc_builder_start_struct@@Base+0x184>
   16198:	b	1619c <flatcc_builder_start_struct@@Base+0x170>
   1619c:	ldr	r0, [sp, #8]
   161a0:	ldr	r0, [r0, #16]
   161a4:	ldr	r1, [sp]
   161a8:	add	r0, r0, r1
   161ac:	str	r0, [fp, #-4]
   161b0:	ldr	r0, [fp, #-4]
   161b4:	mov	sp, fp
   161b8:	pop	{fp, pc}

000161bc <flatcc_builder_struct_edit@@Base>:
   161bc:	sub	sp, sp, #4
   161c0:	str	r0, [sp]
   161c4:	ldr	r0, [sp]
   161c8:	ldr	r0, [r0, #16]
   161cc:	add	sp, sp, #4
   161d0:	bx	lr

000161d4 <flatcc_builder_end_struct@@Base>:
   161d4:	push	{fp, lr}
   161d8:	mov	fp, sp
   161dc:	sub	sp, sp, #16
   161e0:	str	r0, [sp, #8]
   161e4:	ldr	r0, [sp, #8]
   161e8:	ldr	r0, [r0, #32]
   161ec:	ldrh	r0, [r0, #14]
   161f0:	cmp	r0, #2
   161f4:	bne	161fc <flatcc_builder_end_struct@@Base+0x28>
   161f8:	b	1621c <flatcc_builder_end_struct@@Base+0x48>
   161fc:	ldr	r0, [pc, #112]	; 16274 <flatcc_builder_end_struct@@Base+0xa0>
   16200:	add	r0, pc, r0
   16204:	ldr	r1, [pc, #108]	; 16278 <flatcc_builder_end_struct@@Base+0xa4>
   16208:	add	r1, pc, r1
   1620c:	ldr	r2, [pc, #104]	; 1627c <flatcc_builder_end_struct@@Base+0xa8>
   16210:	add	r3, pc, r2
   16214:	movw	r2, #872	; 0x368
   16218:	bl	1298c <__assert_fail@plt>
   1621c:	ldr	r0, [sp, #8]
   16220:	ldr	r1, [sp, #8]
   16224:	ldr	r1, [r1, #16]
   16228:	ldr	r2, [sp, #8]
   1622c:	ldr	r2, [r2, #20]
   16230:	ldr	r3, [sp, #8]
   16234:	ldrh	r3, [r3, #130]	; 0x82
   16238:	bl	15990 <flatcc_builder_create_struct@@Base>
   1623c:	str	r0, [sp, #4]
   16240:	movw	r1, #0
   16244:	cmp	r1, r0
   16248:	bne	16258 <flatcc_builder_end_struct@@Base+0x84>
   1624c:	movw	r0, #0
   16250:	str	r0, [fp, #-4]
   16254:	b	16268 <flatcc_builder_end_struct@@Base+0x94>
   16258:	ldr	r0, [sp, #8]
   1625c:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   16260:	ldr	r0, [sp, #4]
   16264:	str	r0, [fp, #-4]
   16268:	ldr	r0, [fp, #-4]
   1626c:	mov	sp, fp
   16270:	pop	{fp, pc}
   16274:	andeq	ip, r0, r3, asr #8
   16278:	andeq	ip, r0, r0, ror r1
   1627c:	andeq	ip, r0, pc, asr r4

00016280 <flatcc_builder_extend_vector@@Base>:
   16280:	push	{fp, lr}
   16284:	mov	fp, sp
   16288:	sub	sp, sp, #16
   1628c:	str	r0, [sp, #8]
   16290:	str	r1, [sp, #4]
   16294:	ldr	r0, [sp, #8]
   16298:	ldr	r1, [sp, #4]
   1629c:	ldr	r2, [sp, #8]
   162a0:	ldr	r2, [r2, #32]
   162a4:	ldr	r2, [r2, #24]
   162a8:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   162ac:	cmp	r0, #0
   162b0:	beq	162c0 <flatcc_builder_extend_vector@@Base+0x40>
   162b4:	movw	r0, #0
   162b8:	str	r0, [fp, #-4]
   162bc:	b	162e0 <flatcc_builder_extend_vector@@Base+0x60>
   162c0:	ldr	r0, [sp, #8]
   162c4:	ldr	r1, [sp, #8]
   162c8:	ldr	r1, [r1, #32]
   162cc:	ldr	r1, [r1, #16]
   162d0:	ldr	r2, [sp, #4]
   162d4:	mul	r1, r1, r2
   162d8:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   162dc:	str	r0, [fp, #-4]
   162e0:	ldr	r0, [fp, #-4]
   162e4:	mov	sp, fp
   162e8:	pop	{fp, pc}
   162ec:	push	{fp, lr}
   162f0:	mov	fp, sp
   162f4:	sub	sp, sp, #24
   162f8:	str	r0, [fp, #-8]
   162fc:	str	r1, [sp, #12]
   16300:	str	r2, [sp, #8]
   16304:	ldr	r0, [fp, #-8]
   16308:	ldr	r0, [r0, #32]
   1630c:	ldr	r0, [r0, #20]
   16310:	str	r0, [sp, #4]
   16314:	ldr	r0, [sp, #4]
   16318:	ldr	r1, [sp, #12]
   1631c:	add	r0, r0, r1
   16320:	str	r0, [sp]
   16324:	ldr	r0, [sp, #4]
   16328:	ldr	r1, [sp]
   1632c:	cmp	r0, r1
   16330:	bhi	16344 <flatcc_builder_extend_vector@@Base+0xc4>
   16334:	ldr	r0, [sp]
   16338:	ldr	r1, [sp, #8]
   1633c:	cmp	r0, r1
   16340:	bls	16394 <flatcc_builder_extend_vector@@Base+0x114>
   16344:	ldr	r0, [sp, #4]
   16348:	ldr	r1, [sp]
   1634c:	cmp	r0, r1
   16350:	bhi	16368 <flatcc_builder_extend_vector@@Base+0xe8>
   16354:	ldr	r0, [sp]
   16358:	ldr	r1, [sp, #8]
   1635c:	cmp	r0, r1
   16360:	bhi	16368 <flatcc_builder_extend_vector@@Base+0xe8>
   16364:	b	16388 <flatcc_builder_extend_vector@@Base+0x108>
   16368:	ldr	r0, [pc, #72]	; 163b8 <flatcc_builder_extend_vector@@Base+0x138>
   1636c:	add	r0, pc, r0
   16370:	ldr	r1, [pc, #68]	; 163bc <flatcc_builder_extend_vector@@Base+0x13c>
   16374:	add	r1, pc, r1
   16378:	ldr	r2, [pc, #64]	; 163c0 <flatcc_builder_extend_vector@@Base+0x140>
   1637c:	add	r3, pc, r2
   16380:	movw	r2, #892	; 0x37c
   16384:	bl	1298c <__assert_fail@plt>
   16388:	mvn	r0, #0
   1638c:	str	r0, [fp, #-4]
   16390:	b	163ac <flatcc_builder_extend_vector@@Base+0x12c>
   16394:	ldr	r0, [sp]
   16398:	ldr	r1, [fp, #-8]
   1639c:	ldr	r1, [r1, #32]
   163a0:	str	r0, [r1, #20]
   163a4:	movw	r0, #0
   163a8:	str	r0, [fp, #-4]
   163ac:	ldr	r0, [fp, #-4]
   163b0:	mov	sp, fp
   163b4:	pop	{fp, pc}
   163b8:	ldrdeq	sp, [r0], -r2
   163bc:	andeq	ip, r0, r4
   163c0:	ldrdeq	sp, [r0], -sp	; <UNPREDICTABLE>

000163c4 <flatcc_builder_vector_push@@Base>:
   163c4:	push	{fp, lr}
   163c8:	mov	fp, sp
   163cc:	sub	sp, sp, #16
   163d0:	str	r0, [sp, #8]
   163d4:	str	r1, [sp, #4]
   163d8:	ldr	r0, [sp, #8]
   163dc:	ldr	r0, [r0, #32]
   163e0:	ldrh	r0, [r0, #14]
   163e4:	cmp	r0, #4
   163e8:	bne	163f0 <flatcc_builder_vector_push@@Base+0x2c>
   163ec:	b	16410 <flatcc_builder_vector_push@@Base+0x4c>
   163f0:	ldr	r0, [pc, #196]	; 164bc <flatcc_builder_vector_push@@Base+0xf8>
   163f4:	add	r0, pc, r0
   163f8:	ldr	r1, [pc, #192]	; 164c0 <flatcc_builder_vector_push@@Base+0xfc>
   163fc:	add	r1, pc, r1
   16400:	ldr	r2, [pc, #188]	; 164c4 <flatcc_builder_vector_push@@Base+0x100>
   16404:	add	r3, pc, r2
   16408:	movw	r2, #907	; 0x38b
   1640c:	bl	1298c <__assert_fail@plt>
   16410:	ldr	r0, [sp, #8]
   16414:	ldr	r0, [r0, #32]
   16418:	ldr	r0, [r0, #20]
   1641c:	ldr	r1, [sp, #8]
   16420:	ldr	r1, [r1, #32]
   16424:	ldr	r1, [r1, #24]
   16428:	cmp	r0, r1
   1642c:	bls	16480 <flatcc_builder_vector_push@@Base+0xbc>
   16430:	ldr	r0, [sp, #8]
   16434:	ldr	r0, [r0, #32]
   16438:	ldr	r0, [r0, #20]
   1643c:	ldr	r1, [sp, #8]
   16440:	ldr	r1, [r1, #32]
   16444:	ldr	r1, [r1, #24]
   16448:	cmp	r0, r1
   1644c:	bhi	16454 <flatcc_builder_vector_push@@Base+0x90>
   16450:	b	16474 <flatcc_builder_vector_push@@Base+0xb0>
   16454:	ldr	r0, [pc, #108]	; 164c8 <flatcc_builder_vector_push@@Base+0x104>
   16458:	add	r0, pc, r0
   1645c:	ldr	r1, [pc, #104]	; 164cc <flatcc_builder_vector_push@@Base+0x108>
   16460:	add	r1, pc, r1
   16464:	ldr	r2, [pc, #100]	; 164d0 <flatcc_builder_vector_push@@Base+0x10c>
   16468:	add	r3, pc, r2
   1646c:	movw	r2, #908	; 0x38c
   16470:	bl	1298c <__assert_fail@plt>
   16474:	movw	r0, #0
   16478:	str	r0, [fp, #-4]
   1647c:	b	164b0 <flatcc_builder_vector_push@@Base+0xec>
   16480:	ldr	r0, [sp, #8]
   16484:	ldr	r0, [r0, #32]
   16488:	ldr	r1, [r0, #20]
   1648c:	add	r1, r1, #1
   16490:	str	r1, [r0, #20]
   16494:	ldr	r0, [sp, #8]
   16498:	ldr	r1, [sp, #4]
   1649c:	ldr	r2, [sp, #8]
   164a0:	ldr	r2, [r2, #32]
   164a4:	ldr	r2, [r2, #16]
   164a8:	bl	164d4 <flatcc_builder_vector_push@@Base+0x110>
   164ac:	str	r0, [fp, #-4]
   164b0:	ldr	r0, [fp, #-4]
   164b4:	mov	sp, fp
   164b8:	pop	{fp, pc}
   164bc:			; <UNDEFINED> instruction: 0x0000c2be
   164c0:	andeq	fp, r0, ip, ror pc
   164c4:	ldrdeq	ip, [r0], -sl
   164c8:	andeq	ip, r0, r9, asr #5
   164cc:	andeq	fp, r0, r8, lsl pc
   164d0:	andeq	ip, r0, r6, ror r2
   164d4:	push	{fp, lr}
   164d8:	mov	fp, sp
   164dc:	sub	sp, sp, #24
   164e0:	str	r0, [fp, #-8]
   164e4:	str	r1, [sp, #12]
   164e8:	str	r2, [sp, #8]
   164ec:	ldr	r0, [fp, #-8]
   164f0:	ldr	r1, [sp, #8]
   164f4:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   164f8:	str	r0, [sp, #4]
   164fc:	movw	r1, #0
   16500:	cmp	r0, r1
   16504:	bne	16514 <flatcc_builder_vector_push@@Base+0x150>
   16508:	movw	r0, #0
   1650c:	str	r0, [fp, #-4]
   16510:	b	1652c <flatcc_builder_vector_push@@Base+0x168>
   16514:	ldr	r0, [sp, #4]
   16518:	ldr	r1, [sp, #12]
   1651c:	ldr	r2, [sp, #8]
   16520:	bl	128d8 <memcpy@plt>
   16524:	ldr	r0, [sp, #4]
   16528:	str	r0, [fp, #-4]
   1652c:	ldr	r0, [fp, #-4]
   16530:	mov	sp, fp
   16534:	pop	{fp, pc}

00016538 <flatcc_builder_append_vector@@Base>:
   16538:	push	{fp, lr}
   1653c:	mov	fp, sp
   16540:	sub	sp, sp, #16
   16544:	str	r0, [sp, #8]
   16548:	str	r1, [sp, #4]
   1654c:	str	r2, [sp]
   16550:	ldr	r0, [sp, #8]
   16554:	ldr	r0, [r0, #32]
   16558:	ldrh	r0, [r0, #14]
   1655c:	cmp	r0, #4
   16560:	bne	16568 <flatcc_builder_append_vector@@Base+0x30>
   16564:	b	16588 <flatcc_builder_append_vector@@Base+0x50>
   16568:	ldr	r0, [pc, #116]	; 165e4 <flatcc_builder_append_vector@@Base+0xac>
   1656c:	add	r0, pc, r0
   16570:	ldr	r1, [pc, #112]	; 165e8 <flatcc_builder_append_vector@@Base+0xb0>
   16574:	add	r1, pc, r1
   16578:	ldr	r2, [pc, #108]	; 165ec <flatcc_builder_append_vector@@Base+0xb4>
   1657c:	add	r3, pc, r2
   16580:	movw	r2, #915	; 0x393
   16584:	bl	1298c <__assert_fail@plt>
   16588:	ldr	r0, [sp, #8]
   1658c:	ldr	r1, [sp]
   16590:	ldr	r2, [sp, #8]
   16594:	ldr	r2, [r2, #32]
   16598:	ldr	r2, [r2, #24]
   1659c:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   165a0:	cmp	r0, #0
   165a4:	beq	165b4 <flatcc_builder_append_vector@@Base+0x7c>
   165a8:	movw	r0, #0
   165ac:	str	r0, [fp, #-4]
   165b0:	b	165d8 <flatcc_builder_append_vector@@Base+0xa0>
   165b4:	ldr	r0, [sp, #8]
   165b8:	ldr	r1, [sp, #4]
   165bc:	ldr	r2, [sp, #8]
   165c0:	ldr	r2, [r2, #32]
   165c4:	ldr	r2, [r2, #16]
   165c8:	ldr	r3, [sp]
   165cc:	mul	r2, r2, r3
   165d0:	bl	164d4 <flatcc_builder_vector_push@@Base+0x110>
   165d4:	str	r0, [fp, #-4]
   165d8:	ldr	r0, [fp, #-4]
   165dc:	mov	sp, fp
   165e0:	pop	{fp, pc}
   165e4:	andeq	ip, r0, r6, asr #2
   165e8:	andeq	fp, r0, r4, lsl #28
   165ec:	andeq	ip, r0, r2, ror #3

000165f0 <flatcc_builder_extend_offset_vector@@Base>:
   165f0:	push	{fp, lr}
   165f4:	mov	fp, sp
   165f8:	sub	sp, sp, #16
   165fc:	ldr	r2, [pc, #68]	; 16648 <flatcc_builder_extend_offset_vector@@Base+0x58>
   16600:	str	r0, [sp, #8]
   16604:	str	r1, [sp, #4]
   16608:	ldr	r0, [sp, #8]
   1660c:	ldr	r1, [sp, #4]
   16610:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   16614:	cmp	r0, #0
   16618:	beq	16628 <flatcc_builder_extend_offset_vector@@Base+0x38>
   1661c:	movw	r0, #0
   16620:	str	r0, [fp, #-4]
   16624:	b	1663c <flatcc_builder_extend_offset_vector@@Base+0x4c>
   16628:	ldr	r0, [sp, #8]
   1662c:	ldr	r1, [sp, #4]
   16630:	lsl	r1, r1, #2
   16634:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   16638:	str	r0, [fp, #-4]
   1663c:	ldr	r0, [fp, #-4]
   16640:	mov	sp, fp
   16644:	pop	{fp, pc}
   16648:	svccc	0x00ffffff

0001664c <flatcc_builder_offset_vector_push@@Base>:
   1664c:	push	{fp, lr}
   16650:	mov	fp, sp
   16654:	sub	sp, sp, #16
   16658:	str	r0, [sp, #8]
   1665c:	str	r1, [sp, #4]
   16660:	ldr	r0, [sp, #8]
   16664:	ldr	r0, [r0, #32]
   16668:	ldrh	r0, [r0, #14]
   1666c:	cmp	r0, #5
   16670:	bne	16678 <flatcc_builder_offset_vector_push@@Base+0x2c>
   16674:	b	16698 <flatcc_builder_offset_vector_push@@Base+0x4c>
   16678:	ldr	r0, [pc, #152]	; 16718 <flatcc_builder_offset_vector_push@@Base+0xcc>
   1667c:	add	r0, pc, r0
   16680:	ldr	r1, [pc, #148]	; 1671c <flatcc_builder_offset_vector_push@@Base+0xd0>
   16684:	add	r1, pc, r1
   16688:	ldr	r2, [pc, #144]	; 16720 <flatcc_builder_offset_vector_push@@Base+0xd4>
   1668c:	add	r3, pc, r2
   16690:	movw	r2, #934	; 0x3a6
   16694:	bl	1298c <__assert_fail@plt>
   16698:	ldr	r0, [pc, #132]	; 16724 <flatcc_builder_offset_vector_push@@Base+0xd8>
   1669c:	ldr	r1, [sp, #8]
   166a0:	ldr	r1, [r1, #32]
   166a4:	ldr	r1, [r1, #20]
   166a8:	cmp	r1, r0
   166ac:	bne	166bc <flatcc_builder_offset_vector_push@@Base+0x70>
   166b0:	movw	r0, #0
   166b4:	str	r0, [fp, #-4]
   166b8:	b	1670c <flatcc_builder_offset_vector_push@@Base+0xc0>
   166bc:	ldr	r0, [sp, #8]
   166c0:	ldr	r0, [r0, #32]
   166c4:	ldr	r1, [r0, #20]
   166c8:	add	r1, r1, #1
   166cc:	str	r1, [r0, #20]
   166d0:	ldr	r0, [sp, #8]
   166d4:	movw	r1, #4
   166d8:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   166dc:	str	r0, [sp]
   166e0:	movw	r1, #0
   166e4:	cmp	r1, r0
   166e8:	bne	166f8 <flatcc_builder_offset_vector_push@@Base+0xac>
   166ec:	movw	r0, #0
   166f0:	str	r0, [fp, #-4]
   166f4:	b	1670c <flatcc_builder_offset_vector_push@@Base+0xc0>
   166f8:	ldr	r0, [sp, #4]
   166fc:	ldr	r1, [sp]
   16700:	str	r0, [r1]
   16704:	ldr	r0, [sp]
   16708:	str	r0, [fp, #-4]
   1670c:	ldr	r0, [fp, #-4]
   16710:	mov	sp, fp
   16714:	pop	{fp, pc}
   16718:	andeq	ip, r0, pc, lsr #2
   1671c:	strdeq	fp, [r0], -r4
   16720:	andeq	ip, r0, r2, asr r1
   16724:	svccc	0x00ffffff

00016728 <flatcc_builder_append_offset_vector@@Base>:
   16728:	push	{fp, lr}
   1672c:	mov	fp, sp
   16730:	sub	sp, sp, #16
   16734:	str	r0, [sp, #8]
   16738:	str	r1, [sp, #4]
   1673c:	str	r2, [sp]
   16740:	ldr	r0, [sp, #8]
   16744:	ldr	r0, [r0, #32]
   16748:	ldrh	r0, [r0, #14]
   1674c:	cmp	r0, #5
   16750:	bne	16758 <flatcc_builder_append_offset_vector@@Base+0x30>
   16754:	b	16778 <flatcc_builder_append_offset_vector@@Base+0x50>
   16758:	ldr	r0, [pc, #96]	; 167c0 <flatcc_builder_append_offset_vector@@Base+0x98>
   1675c:	add	r0, pc, r0
   16760:	ldr	r1, [pc, #92]	; 167c4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   16764:	add	r1, pc, r1
   16768:	ldr	r2, [pc, #88]	; 167c8 <flatcc_builder_append_offset_vector@@Base+0xa0>
   1676c:	add	r3, pc, r2
   16770:	movw	r2, #948	; 0x3b4
   16774:	bl	1298c <__assert_fail@plt>
   16778:	ldr	r2, [pc, #76]	; 167cc <flatcc_builder_append_offset_vector@@Base+0xa4>
   1677c:	ldr	r0, [sp, #8]
   16780:	ldr	r1, [sp]
   16784:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   16788:	cmp	r0, #0
   1678c:	beq	1679c <flatcc_builder_append_offset_vector@@Base+0x74>
   16790:	movw	r0, #0
   16794:	str	r0, [fp, #-4]
   16798:	b	167b4 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1679c:	ldr	r0, [sp, #8]
   167a0:	ldr	r1, [sp, #4]
   167a4:	ldr	r2, [sp]
   167a8:	lsl	r2, r2, #2
   167ac:	bl	164d4 <flatcc_builder_vector_push@@Base+0x110>
   167b0:	str	r0, [fp, #-4]
   167b4:	ldr	r0, [fp, #-4]
   167b8:	mov	sp, fp
   167bc:	pop	{fp, pc}
   167c0:	andeq	ip, r0, pc, asr #32
   167c4:	andeq	fp, r0, r4, lsl ip
   167c8:	ldrdeq	ip, [r0], -r4
   167cc:	svccc	0x00ffffff

000167d0 <flatcc_builder_extend_string@@Base>:
   167d0:	push	{fp, lr}
   167d4:	mov	fp, sp
   167d8:	sub	sp, sp, #16
   167dc:	str	r0, [sp, #8]
   167e0:	str	r1, [sp, #4]
   167e4:	ldr	r0, [sp, #8]
   167e8:	ldr	r0, [r0, #32]
   167ec:	ldrh	r0, [r0, #14]
   167f0:	cmp	r0, #6
   167f4:	bne	167fc <flatcc_builder_extend_string@@Base+0x2c>
   167f8:	b	1681c <flatcc_builder_extend_string@@Base+0x4c>
   167fc:	ldr	r0, [pc, #88]	; 1685c <flatcc_builder_extend_string@@Base+0x8c>
   16800:	add	r0, pc, r0
   16804:	ldr	r1, [pc, #84]	; 16860 <flatcc_builder_extend_string@@Base+0x90>
   16808:	add	r1, pc, r1
   1680c:	ldr	r2, [pc, #80]	; 16864 <flatcc_builder_extend_string@@Base+0x94>
   16810:	add	r3, pc, r2
   16814:	movw	r2, #957	; 0x3bd
   16818:	bl	1298c <__assert_fail@plt>
   1681c:	ldr	r0, [sp, #8]
   16820:	ldr	r1, [sp, #4]
   16824:	mvn	r2, #0
   16828:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   1682c:	cmp	r0, #0
   16830:	beq	16840 <flatcc_builder_extend_string@@Base+0x70>
   16834:	movw	r0, #0
   16838:	str	r0, [fp, #-4]
   1683c:	b	16850 <flatcc_builder_extend_string@@Base+0x80>
   16840:	ldr	r0, [sp, #8]
   16844:	ldr	r1, [sp, #4]
   16848:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   1684c:	str	r0, [fp, #-4]
   16850:	ldr	r0, [fp, #-4]
   16854:	mov	sp, fp
   16858:	pop	{fp, pc}
   1685c:	strheq	ip, [r0], -r4
   16860:	andeq	fp, r0, r0, ror fp
   16864:	ldrdeq	ip, [r0], -r0

00016868 <flatcc_builder_append_string@@Base>:
   16868:	push	{fp, lr}
   1686c:	mov	fp, sp
   16870:	sub	sp, sp, #16
   16874:	str	r0, [sp, #8]
   16878:	str	r1, [sp, #4]
   1687c:	str	r2, [sp]
   16880:	ldr	r0, [sp, #8]
   16884:	ldr	r0, [r0, #32]
   16888:	ldrh	r0, [r0, #14]
   1688c:	cmp	r0, #6
   16890:	bne	16898 <flatcc_builder_append_string@@Base+0x30>
   16894:	b	168b8 <flatcc_builder_append_string@@Base+0x50>
   16898:	ldr	r0, [pc, #92]	; 168fc <flatcc_builder_append_string@@Base+0x94>
   1689c:	add	r0, pc, r0
   168a0:	ldr	r1, [pc, #88]	; 16900 <flatcc_builder_append_string@@Base+0x98>
   168a4:	add	r1, pc, r1
   168a8:	ldr	r2, [pc, #84]	; 16904 <flatcc_builder_append_string@@Base+0x9c>
   168ac:	add	r3, pc, r2
   168b0:	movw	r2, #966	; 0x3c6
   168b4:	bl	1298c <__assert_fail@plt>
   168b8:	ldr	r0, [sp, #8]
   168bc:	ldr	r1, [sp]
   168c0:	mvn	r2, #0
   168c4:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   168c8:	cmp	r0, #0
   168cc:	beq	168dc <flatcc_builder_append_string@@Base+0x74>
   168d0:	movw	r0, #0
   168d4:	str	r0, [fp, #-4]
   168d8:	b	168f0 <flatcc_builder_append_string@@Base+0x88>
   168dc:	ldr	r0, [sp, #8]
   168e0:	ldr	r1, [sp, #4]
   168e4:	ldr	r2, [sp]
   168e8:	bl	164d4 <flatcc_builder_vector_push@@Base+0x110>
   168ec:	str	r0, [fp, #-4]
   168f0:	ldr	r0, [fp, #-4]
   168f4:	mov	sp, fp
   168f8:	pop	{fp, pc}
   168fc:	andeq	ip, r0, r8, lsl r0
   16900:	ldrdeq	fp, [r0], -r4
   16904:	andeq	ip, r0, r3, ror r0

00016908 <flatcc_builder_append_string_str@@Base>:
   16908:	push	{fp, lr}
   1690c:	mov	fp, sp
   16910:	sub	sp, sp, #24
   16914:	str	r0, [fp, #-4]
   16918:	str	r1, [fp, #-8]
   1691c:	ldr	r0, [fp, #-4]
   16920:	ldr	r1, [fp, #-8]
   16924:	ldr	r2, [fp, #-8]
   16928:	str	r0, [sp, #12]
   1692c:	mov	r0, r2
   16930:	str	r1, [sp, #8]
   16934:	bl	12938 <strlen@plt>
   16938:	ldr	r1, [sp, #12]
   1693c:	str	r0, [sp, #4]
   16940:	mov	r0, r1
   16944:	ldr	r1, [sp, #8]
   16948:	ldr	r2, [sp, #4]
   1694c:	bl	16868 <flatcc_builder_append_string@@Base>
   16950:	mov	sp, fp
   16954:	pop	{fp, pc}

00016958 <flatcc_builder_append_string_strn@@Base>:
   16958:	push	{fp, lr}
   1695c:	mov	fp, sp
   16960:	sub	sp, sp, #24
   16964:	str	r0, [fp, #-4]
   16968:	str	r1, [fp, #-8]
   1696c:	str	r2, [sp, #12]
   16970:	ldr	r0, [fp, #-4]
   16974:	ldr	r1, [fp, #-8]
   16978:	ldr	r2, [fp, #-8]
   1697c:	ldr	r3, [sp, #12]
   16980:	str	r0, [sp, #8]
   16984:	mov	r0, r2
   16988:	str	r1, [sp, #4]
   1698c:	mov	r1, r3
   16990:	bl	169b4 <flatcc_builder_append_string_strn@@Base+0x5c>
   16994:	ldr	r1, [sp, #8]
   16998:	str	r0, [sp]
   1699c:	mov	r0, r1
   169a0:	ldr	r1, [sp, #4]
   169a4:	ldr	r2, [sp]
   169a8:	bl	16868 <flatcc_builder_append_string@@Base>
   169ac:	mov	sp, fp
   169b0:	pop	{fp, pc}
   169b4:	push	{fp, lr}
   169b8:	mov	fp, sp
   169bc:	sub	sp, sp, #16
   169c0:	str	r0, [fp, #-4]
   169c4:	str	r1, [sp, #8]
   169c8:	ldr	r0, [fp, #-4]
   169cc:	ldr	r2, [sp, #8]
   169d0:	mov	r1, #0
   169d4:	bl	12974 <memchr@plt>
   169d8:	str	r0, [sp, #4]
   169dc:	ldr	r0, [sp, #4]
   169e0:	movw	r1, #0
   169e4:	cmp	r0, r1
   169e8:	beq	16a00 <flatcc_builder_append_string_strn@@Base+0xa8>
   169ec:	ldr	r0, [sp, #4]
   169f0:	ldr	r1, [fp, #-4]
   169f4:	sub	r0, r0, r1
   169f8:	str	r0, [sp]
   169fc:	b	16a08 <flatcc_builder_append_string_strn@@Base+0xb0>
   16a00:	ldr	r0, [sp, #8]
   16a04:	str	r0, [sp]
   16a08:	ldr	r0, [sp]
   16a0c:	mov	sp, fp
   16a10:	pop	{fp, pc}

00016a14 <flatcc_builder_truncate_vector@@Base>:
   16a14:	push	{fp, lr}
   16a18:	mov	fp, sp
   16a1c:	sub	sp, sp, #16
   16a20:	str	r0, [sp, #8]
   16a24:	str	r1, [sp, #4]
   16a28:	ldr	r0, [sp, #8]
   16a2c:	ldr	r0, [r0, #32]
   16a30:	ldrh	r0, [r0, #14]
   16a34:	cmp	r0, #4
   16a38:	bne	16a40 <flatcc_builder_truncate_vector@@Base+0x2c>
   16a3c:	b	16a60 <flatcc_builder_truncate_vector@@Base+0x4c>
   16a40:	ldr	r0, [pc, #192]	; 16b08 <flatcc_builder_truncate_vector@@Base+0xf4>
   16a44:	add	r0, pc, r0
   16a48:	ldr	r1, [pc, #188]	; 16b0c <flatcc_builder_truncate_vector@@Base+0xf8>
   16a4c:	add	r1, pc, r1
   16a50:	ldr	r2, [pc, #184]	; 16b10 <flatcc_builder_truncate_vector@@Base+0xfc>
   16a54:	add	r3, pc, r2
   16a58:	movw	r2, #985	; 0x3d9
   16a5c:	bl	1298c <__assert_fail@plt>
   16a60:	ldr	r0, [sp, #8]
   16a64:	ldr	r0, [r0, #32]
   16a68:	ldr	r0, [r0, #20]
   16a6c:	ldr	r1, [sp, #4]
   16a70:	cmp	r0, r1
   16a74:	bcs	16ac0 <flatcc_builder_truncate_vector@@Base+0xac>
   16a78:	ldr	r0, [sp, #8]
   16a7c:	ldr	r0, [r0, #32]
   16a80:	ldr	r0, [r0, #20]
   16a84:	ldr	r1, [sp, #4]
   16a88:	cmp	r0, r1
   16a8c:	bcc	16a94 <flatcc_builder_truncate_vector@@Base+0x80>
   16a90:	b	16ab4 <flatcc_builder_truncate_vector@@Base+0xa0>
   16a94:	ldr	r0, [pc, #120]	; 16b14 <flatcc_builder_truncate_vector@@Base+0x100>
   16a98:	add	r0, pc, r0
   16a9c:	ldr	r1, [pc, #116]	; 16b18 <flatcc_builder_truncate_vector@@Base+0x104>
   16aa0:	add	r1, pc, r1
   16aa4:	ldr	r2, [pc, #112]	; 16b1c <flatcc_builder_truncate_vector@@Base+0x108>
   16aa8:	add	r3, pc, r2
   16aac:	movw	r2, #986	; 0x3da
   16ab0:	bl	1298c <__assert_fail@plt>
   16ab4:	mvn	r0, #0
   16ab8:	str	r0, [fp, #-4]
   16abc:	b	16afc <flatcc_builder_truncate_vector@@Base+0xe8>
   16ac0:	ldr	r0, [sp, #4]
   16ac4:	ldr	r1, [sp, #8]
   16ac8:	ldr	r1, [r1, #32]
   16acc:	ldr	r2, [r1, #20]
   16ad0:	sub	r0, r2, r0
   16ad4:	str	r0, [r1, #20]
   16ad8:	ldr	r0, [sp, #8]
   16adc:	ldr	r1, [sp, #8]
   16ae0:	ldr	r1, [r1, #32]
   16ae4:	ldr	r1, [r1, #16]
   16ae8:	ldr	r2, [sp, #4]
   16aec:	mul	r1, r1, r2
   16af0:	bl	16b20 <flatcc_builder_truncate_vector@@Base+0x10c>
   16af4:	movw	r0, #0
   16af8:	str	r0, [fp, #-4]
   16afc:	ldr	r0, [fp, #-4]
   16b00:	mov	sp, fp
   16b04:	pop	{fp, pc}
   16b08:	andeq	fp, r0, lr, ror #24
   16b0c:	andeq	fp, r0, ip, lsr #18
   16b10:	andeq	fp, r0, r8, lsl pc
   16b14:	andeq	fp, r0, r3, lsl pc
   16b18:	ldrdeq	fp, [r0], -r8
   16b1c:	andeq	fp, r0, r4, asr #29
   16b20:	push	{fp, lr}
   16b24:	mov	fp, sp
   16b28:	sub	sp, sp, #8
   16b2c:	str	r0, [sp, #4]
   16b30:	str	r1, [sp]
   16b34:	ldr	r0, [sp]
   16b38:	ldr	r1, [sp, #4]
   16b3c:	ldr	r2, [r1, #20]
   16b40:	sub	r0, r2, r0
   16b44:	str	r0, [r1, #20]
   16b48:	ldr	r0, [sp, #4]
   16b4c:	ldr	r0, [r0, #16]
   16b50:	ldr	r1, [sp, #4]
   16b54:	ldr	r1, [r1, #20]
   16b58:	add	r0, r0, r1
   16b5c:	ldr	r2, [sp]
   16b60:	movw	r1, #0
   16b64:	and	r1, r1, #255	; 0xff
   16b68:	bl	1295c <memset@plt>
   16b6c:	mov	sp, fp
   16b70:	pop	{fp, pc}

00016b74 <flatcc_builder_truncate_offset_vector@@Base>:
   16b74:	push	{fp, lr}
   16b78:	mov	fp, sp
   16b7c:	sub	sp, sp, #16
   16b80:	str	r0, [sp, #8]
   16b84:	str	r1, [sp, #4]
   16b88:	ldr	r0, [sp, #8]
   16b8c:	ldr	r0, [r0, #32]
   16b90:	ldrh	r0, [r0, #14]
   16b94:	cmp	r0, #5
   16b98:	bne	16ba0 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   16b9c:	b	16bc0 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16ba0:	ldr	r0, [pc, #192]	; 16c68 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16ba4:	add	r0, pc, r0
   16ba8:	ldr	r1, [pc, #188]	; 16c6c <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   16bac:	add	r1, pc, r1
   16bb0:	ldr	r2, [pc, #184]	; 16c70 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16bb4:	add	r3, pc, r2
   16bb8:	movw	r2, #994	; 0x3e2
   16bbc:	bl	1298c <__assert_fail@plt>
   16bc0:	ldr	r0, [sp, #8]
   16bc4:	ldr	r0, [r0, #32]
   16bc8:	ldr	r0, [r0, #20]
   16bcc:	ldr	r1, [sp, #4]
   16bd0:	cmp	r0, r1
   16bd4:	bcs	16c20 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16bd8:	ldr	r0, [sp, #8]
   16bdc:	ldr	r0, [r0, #32]
   16be0:	ldr	r0, [r0, #20]
   16be4:	ldr	r1, [sp, #4]
   16be8:	cmp	r0, r1
   16bec:	bcc	16bf4 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16bf0:	b	16c14 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16bf4:	ldr	r0, [pc, #120]	; 16c74 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16bf8:	add	r0, pc, r0
   16bfc:	ldr	r1, [pc, #116]	; 16c78 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16c00:	add	r1, pc, r1
   16c04:	ldr	r2, [pc, #112]	; 16c7c <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16c08:	add	r3, pc, r2
   16c0c:	movw	r2, #995	; 0x3e3
   16c10:	bl	1298c <__assert_fail@plt>
   16c14:	mvn	r0, #0
   16c18:	str	r0, [fp, #-4]
   16c1c:	b	16c5c <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16c20:	ldr	r0, [sp, #4]
   16c24:	ldr	r1, [sp, #8]
   16c28:	ldr	r1, [r1, #32]
   16c2c:	ldr	r2, [r1, #20]
   16c30:	sub	r0, r2, r0
   16c34:	str	r0, [r1, #20]
   16c38:	ldr	r0, [sp, #8]
   16c3c:	ldr	r1, [sp, #8]
   16c40:	ldr	r1, [r1, #32]
   16c44:	ldr	r1, [r1, #16]
   16c48:	ldr	r2, [sp, #4]
   16c4c:	mul	r1, r1, r2
   16c50:	bl	16b20 <flatcc_builder_truncate_vector@@Base+0x10c>
   16c54:	movw	r0, #0
   16c58:	str	r0, [fp, #-4]
   16c5c:	ldr	r0, [fp, #-4]
   16c60:	mov	sp, fp
   16c64:	pop	{fp, pc}
   16c68:	andeq	fp, r0, r7, lsl #24
   16c6c:	andeq	fp, r0, ip, asr #15
   16c70:	andeq	fp, r0, fp, lsl lr
   16c74:	andeq	fp, r0, sp, lsl lr
   16c78:	andeq	fp, r0, r8, ror r7
   16c7c:	andeq	fp, r0, r7, asr #27

00016c80 <flatcc_builder_truncate_string@@Base>:
   16c80:	push	{fp, lr}
   16c84:	mov	fp, sp
   16c88:	sub	sp, sp, #16
   16c8c:	str	r0, [sp, #8]
   16c90:	str	r1, [sp, #4]
   16c94:	ldr	r0, [sp, #8]
   16c98:	ldr	r0, [r0, #32]
   16c9c:	ldrh	r0, [r0, #14]
   16ca0:	cmp	r0, #6
   16ca4:	bne	16cac <flatcc_builder_truncate_string@@Base+0x2c>
   16ca8:	b	16ccc <flatcc_builder_truncate_string@@Base+0x4c>
   16cac:	ldr	r0, [pc, #176]	; 16d64 <flatcc_builder_truncate_string@@Base+0xe4>
   16cb0:	add	r0, pc, r0
   16cb4:	ldr	r1, [pc, #172]	; 16d68 <flatcc_builder_truncate_string@@Base+0xe8>
   16cb8:	add	r1, pc, r1
   16cbc:	ldr	r2, [pc, #168]	; 16d6c <flatcc_builder_truncate_string@@Base+0xec>
   16cc0:	add	r3, pc, r2
   16cc4:	movw	r2, #1003	; 0x3eb
   16cc8:	bl	1298c <__assert_fail@plt>
   16ccc:	ldr	r0, [sp, #8]
   16cd0:	ldr	r0, [r0, #32]
   16cd4:	ldr	r0, [r0, #20]
   16cd8:	ldr	r1, [sp, #4]
   16cdc:	cmp	r0, r1
   16ce0:	bcs	16d2c <flatcc_builder_truncate_string@@Base+0xac>
   16ce4:	ldr	r0, [sp, #8]
   16ce8:	ldr	r0, [r0, #32]
   16cec:	ldr	r0, [r0, #20]
   16cf0:	ldr	r1, [sp, #4]
   16cf4:	cmp	r0, r1
   16cf8:	bcc	16d00 <flatcc_builder_truncate_string@@Base+0x80>
   16cfc:	b	16d20 <flatcc_builder_truncate_string@@Base+0xa0>
   16d00:	ldr	r0, [pc, #104]	; 16d70 <flatcc_builder_truncate_string@@Base+0xf0>
   16d04:	add	r0, pc, r0
   16d08:	ldr	r1, [pc, #100]	; 16d74 <flatcc_builder_truncate_string@@Base+0xf4>
   16d0c:	add	r1, pc, r1
   16d10:	ldr	r2, [pc, #96]	; 16d78 <flatcc_builder_truncate_string@@Base+0xf8>
   16d14:	add	r3, pc, r2
   16d18:	movw	r2, #1004	; 0x3ec
   16d1c:	bl	1298c <__assert_fail@plt>
   16d20:	mvn	r0, #0
   16d24:	str	r0, [fp, #-4]
   16d28:	b	16d58 <flatcc_builder_truncate_string@@Base+0xd8>
   16d2c:	ldr	r0, [sp, #4]
   16d30:	ldr	r1, [sp, #8]
   16d34:	ldr	r1, [r1, #32]
   16d38:	ldr	r2, [r1, #20]
   16d3c:	sub	r0, r2, r0
   16d40:	str	r0, [r1, #20]
   16d44:	ldr	r0, [sp, #8]
   16d48:	ldr	r1, [sp, #4]
   16d4c:	bl	16b20 <flatcc_builder_truncate_vector@@Base+0x10c>
   16d50:	movw	r0, #0
   16d54:	str	r0, [fp, #-4]
   16d58:	ldr	r0, [fp, #-4]
   16d5c:	mov	sp, fp
   16d60:	pop	{fp, pc}
   16d64:	andeq	fp, r0, r4, lsl #24
   16d68:	andeq	fp, r0, r0, asr #13
   16d6c:	muleq	r0, r0, sp
   16d70:	andeq	fp, r0, fp, lsl #27
   16d74:	andeq	fp, r0, ip, ror #12
   16d78:	andeq	fp, r0, ip, lsr sp

00016d7c <flatcc_builder_start_vector@@Base>:
   16d7c:	push	{fp, lr}
   16d80:	mov	fp, sp
   16d84:	sub	sp, sp, #24
   16d88:	str	r0, [fp, #-8]
   16d8c:	str	r1, [sp, #12]
   16d90:	strh	r2, [sp, #10]
   16d94:	str	r3, [sp, #4]
   16d98:	add	r0, sp, #10
   16d9c:	movw	r1, #4
   16da0:	uxth	r1, r1
   16da4:	bl	16e28 <flatcc_builder_start_vector@@Base+0xac>
   16da8:	ldr	r0, [fp, #-8]
   16dac:	ldrh	r1, [sp, #10]
   16db0:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   16db4:	cmp	r0, #0
   16db8:	beq	16dc8 <flatcc_builder_start_vector@@Base+0x4c>
   16dbc:	mvn	r0, #0
   16dc0:	str	r0, [fp, #-4]
   16dc4:	b	16e1c <flatcc_builder_start_vector@@Base+0xa0>
   16dc8:	ldr	r0, [sp, #12]
   16dcc:	ldr	r1, [fp, #-8]
   16dd0:	ldr	r1, [r1, #32]
   16dd4:	str	r0, [r1, #16]
   16dd8:	ldr	r0, [fp, #-8]
   16ddc:	ldr	r0, [r0, #32]
   16de0:	movw	r1, #0
   16de4:	str	r1, [r0, #20]
   16de8:	ldr	r0, [sp, #4]
   16dec:	ldr	r1, [fp, #-8]
   16df0:	ldr	r1, [r1, #32]
   16df4:	str	r0, [r1, #24]
   16df8:	ldr	r0, [fp, #-8]
   16dfc:	ldr	r0, [r0, #32]
   16e00:	movw	r1, #4
   16e04:	strh	r1, [r0, #14]
   16e08:	ldr	r0, [fp, #-8]
   16e0c:	mvn	r1, #3
   16e10:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   16e14:	movw	r0, #0
   16e18:	str	r0, [fp, #-4]
   16e1c:	ldr	r0, [fp, #-4]
   16e20:	mov	sp, fp
   16e24:	pop	{fp, pc}
   16e28:	sub	sp, sp, #8
   16e2c:	str	r0, [sp, #4]
   16e30:	strh	r1, [sp, #2]
   16e34:	ldr	r0, [sp, #4]
   16e38:	ldrh	r0, [r0]
   16e3c:	ldrh	r1, [sp, #2]
   16e40:	cmp	r0, r1
   16e44:	bge	16e54 <flatcc_builder_start_vector@@Base+0xd8>
   16e48:	ldrh	r0, [sp, #2]
   16e4c:	ldr	r1, [sp, #4]
   16e50:	strh	r0, [r1]
   16e54:	add	sp, sp, #8
   16e58:	bx	lr

00016e5c <flatcc_builder_start_offset_vector@@Base>:
   16e5c:	push	{fp, lr}
   16e60:	mov	fp, sp
   16e64:	sub	sp, sp, #8
   16e68:	str	r0, [sp]
   16e6c:	ldr	r0, [sp]
   16e70:	movw	r1, #4
   16e74:	uxth	r1, r1
   16e78:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   16e7c:	cmp	r0, #0
   16e80:	beq	16e90 <flatcc_builder_start_offset_vector@@Base+0x34>
   16e84:	mvn	r0, #0
   16e88:	str	r0, [sp, #4]
   16e8c:	b	16ed4 <flatcc_builder_start_offset_vector@@Base+0x78>
   16e90:	ldr	r0, [sp]
   16e94:	ldr	r0, [r0, #32]
   16e98:	movw	r1, #4
   16e9c:	str	r1, [r0, #16]
   16ea0:	ldr	r0, [sp]
   16ea4:	ldr	r0, [r0, #32]
   16ea8:	movw	r1, #0
   16eac:	str	r1, [r0, #20]
   16eb0:	ldr	r0, [sp]
   16eb4:	ldr	r0, [r0, #32]
   16eb8:	movw	r1, #5
   16ebc:	strh	r1, [r0, #14]
   16ec0:	ldr	r0, [sp]
   16ec4:	mvn	r1, #3
   16ec8:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   16ecc:	movw	r0, #0
   16ed0:	str	r0, [sp, #4]
   16ed4:	ldr	r0, [sp, #4]
   16ed8:	mov	sp, fp
   16edc:	pop	{fp, pc}

00016ee0 <flatcc_builder_create_offset_vector@@Base>:
   16ee0:	push	{fp, lr}
   16ee4:	mov	fp, sp
   16ee8:	sub	sp, sp, #24
   16eec:	str	r0, [fp, #-8]
   16ef0:	str	r1, [sp, #12]
   16ef4:	str	r2, [sp, #8]
   16ef8:	ldr	r0, [fp, #-8]
   16efc:	bl	16e5c <flatcc_builder_start_offset_vector@@Base>
   16f00:	cmp	r0, #0
   16f04:	beq	16f14 <flatcc_builder_create_offset_vector@@Base+0x34>
   16f08:	movw	r0, #0
   16f0c:	str	r0, [fp, #-4]
   16f10:	b	16f5c <flatcc_builder_create_offset_vector@@Base+0x7c>
   16f14:	ldr	r0, [fp, #-8]
   16f18:	ldr	r1, [sp, #8]
   16f1c:	bl	165f0 <flatcc_builder_extend_offset_vector@@Base>
   16f20:	str	r0, [sp, #4]
   16f24:	movw	r1, #0
   16f28:	cmp	r0, r1
   16f2c:	bne	16f3c <flatcc_builder_create_offset_vector@@Base+0x5c>
   16f30:	movw	r0, #0
   16f34:	str	r0, [fp, #-4]
   16f38:	b	16f5c <flatcc_builder_create_offset_vector@@Base+0x7c>
   16f3c:	ldr	r0, [sp, #4]
   16f40:	ldr	r1, [sp, #12]
   16f44:	ldr	r2, [sp, #8]
   16f48:	lsl	r2, r2, #2
   16f4c:	bl	128d8 <memcpy@plt>
   16f50:	ldr	r0, [fp, #-8]
   16f54:	bl	16f68 <flatcc_builder_end_offset_vector@@Base>
   16f58:	str	r0, [fp, #-4]
   16f5c:	ldr	r0, [fp, #-4]
   16f60:	mov	sp, fp
   16f64:	pop	{fp, pc}

00016f68 <flatcc_builder_end_offset_vector@@Base>:
   16f68:	push	{fp, lr}
   16f6c:	mov	fp, sp
   16f70:	sub	sp, sp, #16
   16f74:	str	r0, [sp, #8]
   16f78:	ldr	r0, [sp, #8]
   16f7c:	ldr	r0, [r0, #32]
   16f80:	ldrh	r0, [r0, #14]
   16f84:	cmp	r0, #5
   16f88:	bne	16f90 <flatcc_builder_end_offset_vector@@Base+0x28>
   16f8c:	b	16fb0 <flatcc_builder_end_offset_vector@@Base+0x48>
   16f90:	ldr	r0, [pc, #108]	; 17004 <flatcc_builder_end_offset_vector@@Base+0x9c>
   16f94:	add	r0, pc, r0
   16f98:	ldr	r1, [pc, #104]	; 17008 <flatcc_builder_end_offset_vector@@Base+0xa0>
   16f9c:	add	r1, pc, r1
   16fa0:	ldr	r2, [pc, #100]	; 1700c <flatcc_builder_end_offset_vector@@Base+0xa4>
   16fa4:	add	r3, pc, r2
   16fa8:	movw	r2, #1480	; 0x5c8
   16fac:	bl	1298c <__assert_fail@plt>
   16fb0:	ldr	r0, [sp, #8]
   16fb4:	ldr	r1, [sp, #8]
   16fb8:	ldr	r1, [r1, #16]
   16fbc:	ldr	r2, [sp, #8]
   16fc0:	ldr	r2, [r2, #32]
   16fc4:	ldr	r2, [r2, #20]
   16fc8:	bl	18364 <flatcc_builder_create_offset_vector_direct@@Base>
   16fcc:	str	r0, [sp, #4]
   16fd0:	movw	r1, #0
   16fd4:	cmp	r1, r0
   16fd8:	bne	16fe8 <flatcc_builder_end_offset_vector@@Base+0x80>
   16fdc:	movw	r0, #0
   16fe0:	str	r0, [fp, #-4]
   16fe4:	b	16ff8 <flatcc_builder_end_offset_vector@@Base+0x90>
   16fe8:	ldr	r0, [sp, #8]
   16fec:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   16ff0:	ldr	r0, [sp, #4]
   16ff4:	str	r0, [fp, #-4]
   16ff8:	ldr	r0, [fp, #-4]
   16ffc:	mov	sp, fp
   17000:	pop	{fp, pc}
   17004:	andeq	fp, r0, r7, lsl r8
   17008:	ldrdeq	fp, [r0], -ip
   1700c:	andeq	fp, r0, r6, lsr lr

00017010 <flatcc_builder_start_string@@Base>:
   17010:	push	{fp, lr}
   17014:	mov	fp, sp
   17018:	sub	sp, sp, #8
   1701c:	str	r0, [sp]
   17020:	ldr	r0, [sp]
   17024:	movw	r1, #1
   17028:	uxth	r1, r1
   1702c:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   17030:	cmp	r0, #0
   17034:	beq	17044 <flatcc_builder_start_string@@Base+0x34>
   17038:	mvn	r0, #0
   1703c:	str	r0, [sp, #4]
   17040:	b	17088 <flatcc_builder_start_string@@Base+0x78>
   17044:	ldr	r0, [sp]
   17048:	ldr	r0, [r0, #32]
   1704c:	movw	r1, #1
   17050:	str	r1, [r0, #16]
   17054:	ldr	r0, [sp]
   17058:	ldr	r0, [r0, #32]
   1705c:	movw	r1, #0
   17060:	str	r1, [r0, #20]
   17064:	ldr	r0, [sp]
   17068:	ldr	r0, [r0, #32]
   1706c:	movw	r1, #6
   17070:	strh	r1, [r0, #14]
   17074:	ldr	r0, [sp]
   17078:	mvn	r1, #3
   1707c:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   17080:	movw	r0, #0
   17084:	str	r0, [sp, #4]
   17088:	ldr	r0, [sp, #4]
   1708c:	mov	sp, fp
   17090:	pop	{fp, pc}

00017094 <flatcc_builder_reserve_table@@Base>:
   17094:	push	{fp, lr}
   17098:	mov	fp, sp
   1709c:	sub	sp, sp, #8
   170a0:	str	r0, [sp, #4]
   170a4:	str	r1, [sp]
   170a8:	ldr	r0, [sp]
   170ac:	cmp	r0, #0
   170b0:	blt	170b8 <flatcc_builder_reserve_table@@Base+0x24>
   170b4:	b	170d8 <flatcc_builder_reserve_table@@Base+0x44>
   170b8:	ldr	r0, [pc, #44]	; 170ec <flatcc_builder_reserve_table@@Base+0x58>
   170bc:	add	r0, pc, r0
   170c0:	ldr	r1, [pc, #40]	; 170f0 <flatcc_builder_reserve_table@@Base+0x5c>
   170c4:	add	r1, pc, r1
   170c8:	ldr	r2, [pc, #36]	; 170f4 <flatcc_builder_reserve_table@@Base+0x60>
   170cc:	add	r3, pc, r2
   170d0:	movw	r2, #1065	; 0x429
   170d4:	bl	1298c <__assert_fail@plt>
   170d8:	ldr	r0, [sp, #4]
   170dc:	ldr	r1, [sp]
   170e0:	bl	170f8 <flatcc_builder_reserve_table@@Base+0x64>
   170e4:	mov	sp, fp
   170e8:	pop	{fp, pc}
   170ec:	andeq	fp, r0, r6, lsr sl
   170f0:			; <UNDEFINED> instruction: 0x0000b2b4
   170f4:	andeq	fp, r0, r5, ror #19
   170f8:	push	{fp, lr}
   170fc:	mov	fp, sp
   17100:	sub	sp, sp, #24
   17104:	str	r0, [fp, #-8]
   17108:	str	r1, [sp, #12]
   1710c:	ldr	r0, [fp, #-8]
   17110:	ldr	r0, [r0, #32]
   17114:	ldr	r1, [r0, #16]
   17118:	ldrh	r0, [r0, #28]
   1711c:	add	r0, r1, r0, lsl #1
   17120:	str	r0, [sp, #8]
   17124:	ldr	r0, [sp, #12]
   17128:	add	r0, r0, #2
   1712c:	lsl	r0, r0, #1
   17130:	str	r0, [sp, #4]
   17134:	ldr	r0, [fp, #-8]
   17138:	ldr	r2, [sp, #8]
   1713c:	ldr	r3, [sp, #4]
   17140:	movw	r1, #0
   17144:	movw	ip, #1
   17148:	str	ip, [sp]
   1714c:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   17150:	ldr	r1, [fp, #-8]
   17154:	str	r0, [r1, #4]
   17158:	movw	r1, #0
   1715c:	cmp	r0, r1
   17160:	bne	17170 <flatcc_builder_reserve_table@@Base+0xdc>
   17164:	mvn	r0, #0
   17168:	str	r0, [fp, #-4]
   1716c:	b	171e4 <flatcc_builder_reserve_table@@Base+0x150>
   17170:	ldr	r0, [fp, #-8]
   17174:	ldr	r1, [r0, #4]
   17178:	add	r1, r1, #4
   1717c:	str	r1, [r0, #4]
   17180:	ldr	r0, [fp, #-8]
   17184:	ldr	r0, [r0, #32]
   17188:	ldr	r0, [r0, #20]
   1718c:	str	r0, [sp, #8]
   17190:	ldr	r0, [sp, #12]
   17194:	lsl	r0, r0, #1
   17198:	add	r0, r0, #1
   1719c:	str	r0, [sp, #4]
   171a0:	ldr	r0, [fp, #-8]
   171a4:	ldr	r2, [sp, #8]
   171a8:	ldr	r3, [sp, #4]
   171ac:	movw	r1, #3
   171b0:	movw	ip, #0
   171b4:	str	ip, [sp]
   171b8:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   171bc:	ldr	r1, [fp, #-8]
   171c0:	str	r0, [r1]
   171c4:	movw	r1, #0
   171c8:	cmp	r0, r1
   171cc:	bne	171dc <flatcc_builder_reserve_table@@Base+0x148>
   171d0:	mvn	r0, #0
   171d4:	str	r0, [fp, #-4]
   171d8:	b	171e4 <flatcc_builder_reserve_table@@Base+0x150>
   171dc:	movw	r0, #0
   171e0:	str	r0, [fp, #-4]
   171e4:	ldr	r0, [fp, #-4]
   171e8:	mov	sp, fp
   171ec:	pop	{fp, pc}

000171f0 <flatcc_builder_start_table@@Base>:
   171f0:	push	{fp, lr}
   171f4:	mov	fp, sp
   171f8:	sub	sp, sp, #16
   171fc:	str	r0, [sp, #8]
   17200:	str	r1, [sp, #4]
   17204:	ldr	r0, [sp, #8]
   17208:	movw	r1, #4
   1720c:	uxth	r1, r1
   17210:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   17214:	cmp	r0, #0
   17218:	beq	17228 <flatcc_builder_start_table@@Base+0x38>
   1721c:	mvn	r0, #0
   17220:	str	r0, [fp, #-4]
   17224:	b	172f8 <flatcc_builder_start_table@@Base+0x108>
   17228:	ldr	r0, [pc, #212]	; 17304 <flatcc_builder_start_table@@Base+0x114>
   1722c:	ldr	r1, [sp, #8]
   17230:	ldr	r1, [r1, #4]
   17234:	ldr	r2, [sp, #8]
   17238:	ldr	r2, [r2, #52]	; 0x34
   1723c:	sub	r1, r1, r2
   17240:	ldr	r2, [sp, #8]
   17244:	ldr	r2, [r2, #32]
   17248:	str	r1, [r2, #16]
   1724c:	ldr	r1, [sp, #8]
   17250:	ldr	r1, [r1]
   17254:	ldr	r2, [sp, #8]
   17258:	ldr	r2, [r2, #76]	; 0x4c
   1725c:	sub	r1, r1, r2
   17260:	ldr	r2, [sp, #8]
   17264:	ldr	r2, [r2, #32]
   17268:	str	r1, [r2, #20]
   1726c:	ldr	r1, [sp, #8]
   17270:	ldr	r1, [r1, #12]
   17274:	ldr	r2, [sp, #8]
   17278:	ldr	r2, [r2, #32]
   1727c:	str	r1, [r2, #24]
   17280:	ldr	r1, [sp, #8]
   17284:	ldrh	r1, [r1, #8]
   17288:	ldr	r2, [sp, #8]
   1728c:	ldr	r2, [r2, #32]
   17290:	strh	r1, [r2, #28]
   17294:	ldr	r1, [sp, #8]
   17298:	movw	r2, #0
   1729c:	str	r2, [r1, #12]
   172a0:	ldr	r1, [sp, #8]
   172a4:	str	r0, [r1, #12]
   172a8:	ldr	r0, [sp, #8]
   172ac:	movw	r1, #0
   172b0:	strh	r1, [r0, #8]
   172b4:	ldr	r0, [sp, #8]
   172b8:	ldr	r0, [r0, #32]
   172bc:	movw	r1, #3
   172c0:	strh	r1, [r0, #14]
   172c4:	ldr	r0, [sp, #8]
   172c8:	ldr	r1, [sp, #4]
   172cc:	bl	170f8 <flatcc_builder_reserve_table@@Base+0x64>
   172d0:	cmp	r0, #0
   172d4:	beq	172e4 <flatcc_builder_start_table@@Base+0xf4>
   172d8:	mvn	r0, #0
   172dc:	str	r0, [fp, #-4]
   172e0:	b	172f8 <flatcc_builder_start_table@@Base+0x108>
   172e4:	ldr	r0, [sp, #8]
   172e8:	movw	r1, #65532	; 0xfffc
   172ec:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   172f0:	movw	r0, #0
   172f4:	str	r0, [fp, #-4]
   172f8:	ldr	r0, [fp, #-4]
   172fc:	mov	sp, fp
   17300:	pop	{fp, pc}
   17304:	svccs	0x00693b52

00017308 <flatcc_builder_create_vtable@@Base>:
   17308:	push	{fp, lr}
   1730c:	mov	fp, sp
   17310:	sub	sp, sp, #104	; 0x68
   17314:	str	r0, [fp, #-8]
   17318:	str	r1, [fp, #-12]
   1731c:	strh	r2, [fp, #-14]
   17320:	movw	r0, #0
   17324:	str	r0, [sp, #12]
   17328:	str	r0, [sp, #16]
   1732c:	ldrh	r0, [fp, #-14]
   17330:	cmp	r0, #0
   17334:	ble	17378 <flatcc_builder_create_vtable@@Base+0x70>
   17338:	ldrh	r0, [fp, #-14]
   1733c:	ldr	r1, [sp, #12]
   17340:	add	r0, r1, r0
   17344:	str	r0, [sp, #12]
   17348:	ldr	r0, [fp, #-12]
   1734c:	add	r1, sp, #12
   17350:	add	r1, r1, #8
   17354:	ldr	r2, [sp, #16]
   17358:	str	r0, [r1, r2, lsl #3]
   1735c:	ldrh	r0, [fp, #-14]
   17360:	ldr	r2, [sp, #16]
   17364:	add	r1, r1, r2, lsl #3
   17368:	str	r0, [r1, #4]
   1736c:	ldr	r0, [sp, #16]
   17370:	add	r0, r0, #1
   17374:	str	r0, [sp, #16]
   17378:	ldr	r0, [fp, #-8]
   1737c:	ldr	r0, [r0, #152]	; 0x98
   17380:	cmp	r0, #0
   17384:	bne	173c4 <flatcc_builder_create_vtable@@Base+0xbc>
   17388:	ldr	r0, [fp, #-8]
   1738c:	ldr	r0, [r0, #180]	; 0xb4
   17390:	cmp	r0, #0
   17394:	bne	173c4 <flatcc_builder_create_vtable@@Base+0xbc>
   17398:	ldr	r0, [fp, #-8]
   1739c:	add	r1, sp, #12
   173a0:	bl	1740c <flatcc_builder_create_vtable@@Base+0x104>
   173a4:	str	r0, [fp, #-20]	; 0xffffffec
   173a8:	movw	r1, #0
   173ac:	cmp	r1, r0
   173b0:	bne	173c0 <flatcc_builder_create_vtable@@Base+0xb8>
   173b4:	movw	r0, #0
   173b8:	str	r0, [fp, #-4]
   173bc:	b	17400 <flatcc_builder_create_vtable@@Base+0xf8>
   173c0:	b	173f8 <flatcc_builder_create_vtable@@Base+0xf0>
   173c4:	ldr	r0, [fp, #-8]
   173c8:	add	r1, sp, #12
   173cc:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   173d0:	str	r0, [fp, #-20]	; 0xffffffec
   173d4:	movw	r1, #0
   173d8:	cmp	r1, r0
   173dc:	bne	173ec <flatcc_builder_create_vtable@@Base+0xe4>
   173e0:	movw	r0, #0
   173e4:	str	r0, [fp, #-4]
   173e8:	b	17400 <flatcc_builder_create_vtable@@Base+0xf8>
   173ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   173f0:	add	r0, r0, #1
   173f4:	str	r0, [fp, #-20]	; 0xffffffec
   173f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   173fc:	str	r0, [fp, #-4]
   17400:	ldr	r0, [fp, #-4]
   17404:	mov	sp, fp
   17408:	pop	{fp, pc}
   1740c:	push	{fp, lr}
   17410:	mov	fp, sp
   17414:	sub	sp, sp, #24
   17418:	str	r0, [fp, #-4]
   1741c:	str	r1, [fp, #-8]
   17420:	ldr	r0, [fp, #-4]
   17424:	ldr	r0, [r0, #140]	; 0x8c
   17428:	str	r0, [sp, #12]
   1742c:	ldr	r0, [sp, #12]
   17430:	ldr	r1, [fp, #-8]
   17434:	ldr	r1, [r1]
   17438:	add	r0, r0, r1
   1743c:	ldr	r1, [fp, #-4]
   17440:	str	r0, [r1, #140]	; 0x8c
   17444:	ldr	r0, [fp, #-4]
   17448:	ldr	r0, [r0, #140]	; 0x8c
   1744c:	ldr	r1, [sp, #12]
   17450:	cmp	r0, r1
   17454:	bge	17478 <flatcc_builder_create_vtable@@Base+0x170>
   17458:	ldr	r0, [pc, #168]	; 17508 <flatcc_builder_create_vtable@@Base+0x200>
   1745c:	add	r0, pc, r0
   17460:	ldr	r1, [pc, #164]	; 1750c <flatcc_builder_create_vtable@@Base+0x204>
   17464:	add	r1, pc, r1
   17468:	ldr	r2, [pc, #160]	; 17510 <flatcc_builder_create_vtable@@Base+0x208>
   1746c:	add	r3, pc, r2
   17470:	movw	r2, #673	; 0x2a1
   17474:	bl	1298c <__assert_fail@plt>
   17478:	ldr	r0, [fp, #-4]
   1747c:	ldr	r0, [r0, #44]	; 0x2c
   17480:	ldr	r1, [fp, #-4]
   17484:	ldr	r1, [r1, #36]	; 0x24
   17488:	ldr	r2, [fp, #-8]
   1748c:	add	r2, r2, #8
   17490:	ldr	r3, [fp, #-8]
   17494:	ldr	r3, [r3, #4]
   17498:	ldr	ip, [sp, #12]
   1749c:	ldr	lr, [fp, #-8]
   174a0:	ldr	lr, [lr]
   174a4:	str	r0, [sp, #8]
   174a8:	mov	r0, r1
   174ac:	mov	r1, r2
   174b0:	mov	r2, r3
   174b4:	mov	r3, ip
   174b8:	str	lr, [sp]
   174bc:	ldr	ip, [sp, #8]
   174c0:	blx	ip
   174c4:	cmp	r0, #0
   174c8:	beq	174ec <flatcc_builder_create_vtable@@Base+0x1e4>
   174cc:	ldr	r0, [pc, #40]	; 174fc <flatcc_builder_create_vtable@@Base+0x1f4>
   174d0:	add	r0, pc, r0
   174d4:	ldr	r1, [pc, #36]	; 17500 <flatcc_builder_create_vtable@@Base+0x1f8>
   174d8:	add	r1, pc, r1
   174dc:	ldr	r2, [pc, #32]	; 17504 <flatcc_builder_create_vtable@@Base+0x1fc>
   174e0:	add	r3, pc, r2
   174e4:	movw	r2, #677	; 0x2a5
   174e8:	bl	1298c <__assert_fail@plt>
   174ec:	ldr	r0, [sp, #12]
   174f0:	add	r0, r0, #1
   174f4:	mov	sp, fp
   174f8:	pop	{fp, pc}
   174fc:	andeq	ip, r0, r5, rrx
   17500:	andeq	sl, r0, r0, lsr #29
   17504:	ldrdeq	fp, [r0], -r0
   17508:	ldrdeq	ip, [r0], -r9
   1750c:	andeq	sl, r0, r4, lsl pc
   17510:	andeq	ip, r0, r4, asr #32

00017514 <flatcc_builder_create_cached_vtable@@Base>:
   17514:	push	{fp, lr}
   17518:	mov	fp, sp
   1751c:	sub	sp, sp, #48	; 0x30
   17520:	str	r0, [fp, #-8]
   17524:	str	r1, [fp, #-12]
   17528:	strh	r2, [fp, #-14]
   1752c:	str	r3, [fp, #-20]	; 0xffffffec
   17530:	ldr	r0, [fp, #-8]
   17534:	ldr	r1, [fp, #-20]	; 0xffffffec
   17538:	bl	17820 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   1753c:	str	r0, [sp, #12]
   17540:	movw	r1, #0
   17544:	cmp	r0, r1
   17548:	bne	17558 <flatcc_builder_create_cached_vtable@@Base+0x44>
   1754c:	movw	r0, #0
   17550:	str	r0, [fp, #-4]
   17554:	b	17814 <flatcc_builder_create_cached_vtable@@Base+0x300>
   17558:	ldr	r0, [sp, #12]
   1755c:	str	r0, [sp, #16]
   17560:	ldr	r0, [sp, #16]
   17564:	ldr	r0, [r0]
   17568:	str	r0, [sp, #8]
   1756c:	movw	r0, #0
   17570:	str	r0, [sp, #20]
   17574:	ldr	r0, [sp, #8]
   17578:	cmp	r0, #0
   1757c:	beq	17680 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   17580:	ldr	r0, [fp, #-8]
   17584:	ldr	r0, [r0, #100]	; 0x64
   17588:	ldr	r1, [sp, #8]
   1758c:	add	r0, r0, r1
   17590:	str	r0, [sp, #24]
   17594:	ldr	r0, [fp, #-8]
   17598:	ldr	r0, [r0, #68]	; 0x44
   1759c:	ldr	r1, [sp, #24]
   175a0:	ldr	r1, [r1, #8]
   175a4:	add	r0, r0, r1
   175a8:	str	r0, [sp, #4]
   175ac:	ldr	r0, [sp, #4]
   175b0:	ldrh	r0, [r0]
   175b4:	ldrh	r1, [fp, #-14]
   175b8:	cmp	r0, r1
   175bc:	bne	175dc <flatcc_builder_create_cached_vtable@@Base+0xc8>
   175c0:	ldr	r0, [fp, #-12]
   175c4:	ldr	r1, [sp, #4]
   175c8:	ldrh	r2, [fp, #-14]
   175cc:	bl	128e4 <memcmp@plt>
   175d0:	movw	r1, #0
   175d4:	cmp	r1, r0
   175d8:	beq	175f8 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   175dc:	ldr	r0, [sp, #24]
   175e0:	add	r0, r0, #12
   175e4:	str	r0, [sp, #16]
   175e8:	ldr	r0, [sp, #24]
   175ec:	ldr	r0, [r0, #12]
   175f0:	str	r0, [sp, #8]
   175f4:	b	17574 <flatcc_builder_create_cached_vtable@@Base+0x60>
   175f8:	ldr	r0, [sp, #24]
   175fc:	ldr	r0, [r0, #4]
   17600:	ldr	r1, [fp, #-8]
   17604:	ldr	r1, [r1, #152]	; 0x98
   17608:	cmp	r0, r1
   1760c:	beq	17634 <flatcc_builder_create_cached_vtable@@Base+0x120>
   17610:	ldr	r0, [sp, #24]
   17614:	str	r0, [sp, #20]
   17618:	ldr	r0, [sp, #24]
   1761c:	add	r0, r0, #12
   17620:	str	r0, [sp, #16]
   17624:	ldr	r0, [sp, #24]
   17628:	ldr	r0, [r0, #12]
   1762c:	str	r0, [sp, #8]
   17630:	b	17574 <flatcc_builder_create_cached_vtable@@Base+0x60>
   17634:	ldr	r0, [sp, #16]
   17638:	ldr	r1, [sp, #12]
   1763c:	cmp	r0, r1
   17640:	beq	17670 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   17644:	ldr	r0, [sp, #24]
   17648:	ldr	r0, [r0, #12]
   1764c:	ldr	r1, [sp, #16]
   17650:	str	r0, [r1]
   17654:	ldr	r0, [sp, #12]
   17658:	ldr	r0, [r0]
   1765c:	ldr	r1, [sp, #24]
   17660:	str	r0, [r1, #12]
   17664:	ldr	r0, [sp, #8]
   17668:	ldr	r1, [sp, #12]
   1766c:	str	r0, [r1]
   17670:	ldr	r0, [sp, #24]
   17674:	ldr	r0, [r0]
   17678:	str	r0, [fp, #-4]
   1767c:	b	17814 <flatcc_builder_create_cached_vtable@@Base+0x300>
   17680:	ldr	r0, [fp, #-8]
   17684:	ldr	r1, [fp, #-8]
   17688:	ldr	r2, [r1, #124]	; 0x7c
   1768c:	movw	r1, #6
   17690:	movw	r3, #16
   17694:	movw	ip, #0
   17698:	str	ip, [sp]
   1769c:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   176a0:	str	r0, [sp, #24]
   176a4:	movw	r1, #0
   176a8:	cmp	r0, r1
   176ac:	bne	176bc <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   176b0:	movw	r0, #0
   176b4:	str	r0, [fp, #-4]
   176b8:	b	17814 <flatcc_builder_create_cached_vtable@@Base+0x300>
   176bc:	ldr	r0, [fp, #-8]
   176c0:	ldr	r0, [r0, #124]	; 0x7c
   176c4:	str	r0, [sp, #8]
   176c8:	ldr	r0, [fp, #-8]
   176cc:	ldr	r1, [r0, #124]	; 0x7c
   176d0:	add	r1, r1, #16
   176d4:	str	r1, [r0, #124]	; 0x7c
   176d8:	ldr	r0, [fp, #-8]
   176dc:	ldr	r0, [r0, #152]	; 0x98
   176e0:	ldr	r1, [sp, #24]
   176e4:	str	r0, [r1, #4]
   176e8:	ldr	r0, [sp, #12]
   176ec:	ldr	r0, [r0]
   176f0:	ldr	r1, [sp, #24]
   176f4:	str	r0, [r1, #12]
   176f8:	ldr	r0, [sp, #8]
   176fc:	ldr	r1, [sp, #12]
   17700:	str	r0, [r1]
   17704:	ldr	r0, [fp, #-8]
   17708:	ldr	r1, [fp, #-12]
   1770c:	ldrh	r2, [fp, #-14]
   17710:	bl	17308 <flatcc_builder_create_vtable@@Base>
   17714:	ldr	r1, [sp, #24]
   17718:	str	r0, [r1]
   1771c:	movw	r1, #0
   17720:	cmp	r1, r0
   17724:	bne	17734 <flatcc_builder_create_cached_vtable@@Base+0x220>
   17728:	movw	r0, #0
   1772c:	str	r0, [fp, #-4]
   17730:	b	17814 <flatcc_builder_create_cached_vtable@@Base+0x300>
   17734:	ldr	r0, [sp, #20]
   17738:	movw	r1, #0
   1773c:	cmp	r0, r1
   17740:	beq	17758 <flatcc_builder_create_cached_vtable@@Base+0x244>
   17744:	ldr	r0, [sp, #20]
   17748:	ldr	r0, [r0, #8]
   1774c:	ldr	r1, [sp, #24]
   17750:	str	r0, [r1, #8]
   17754:	b	17808 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   17758:	ldr	r0, [fp, #-8]
   1775c:	ldr	r0, [r0, #172]	; 0xac
   17760:	cmp	r0, #0
   17764:	beq	17794 <flatcc_builder_create_cached_vtable@@Base+0x280>
   17768:	ldr	r0, [fp, #-8]
   1776c:	ldr	r0, [r0, #172]	; 0xac
   17770:	ldr	r1, [fp, #-8]
   17774:	ldr	r1, [r1, #120]	; 0x78
   17778:	ldrh	r2, [fp, #-14]
   1777c:	add	r1, r1, r2
   17780:	cmp	r0, r1
   17784:	bcs	17794 <flatcc_builder_create_cached_vtable@@Base+0x280>
   17788:	ldr	r0, [fp, #-8]
   1778c:	bl	14850 <flatcc_builder_flush_vtable_cache@@Base>
   17790:	b	17804 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   17794:	ldr	r0, [fp, #-8]
   17798:	ldr	r1, [fp, #-8]
   1779c:	ldr	r2, [r1, #120]	; 0x78
   177a0:	ldrh	r3, [fp, #-14]
   177a4:	movw	r1, #2
   177a8:	movw	ip, #0
   177ac:	str	ip, [sp]
   177b0:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   177b4:	str	r0, [sp, #4]
   177b8:	movw	r1, #0
   177bc:	cmp	r0, r1
   177c0:	bne	177d0 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   177c4:	mvn	r0, #0
   177c8:	str	r0, [fp, #-4]
   177cc:	b	17814 <flatcc_builder_create_cached_vtable@@Base+0x300>
   177d0:	ldr	r0, [fp, #-8]
   177d4:	ldr	r0, [r0, #120]	; 0x78
   177d8:	ldr	r1, [sp, #24]
   177dc:	str	r0, [r1, #8]
   177e0:	ldrh	r0, [fp, #-14]
   177e4:	ldr	r1, [fp, #-8]
   177e8:	ldr	r2, [r1, #120]	; 0x78
   177ec:	add	r0, r2, r0
   177f0:	str	r0, [r1, #120]	; 0x78
   177f4:	ldr	r0, [sp, #4]
   177f8:	ldr	r1, [fp, #-12]
   177fc:	ldrh	r2, [fp, #-14]
   17800:	bl	128d8 <memcpy@plt>
   17804:	b	17808 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   17808:	ldr	r0, [sp, #24]
   1780c:	ldr	r0, [r0]
   17810:	str	r0, [fp, #-4]
   17814:	ldr	r0, [fp, #-4]
   17818:	mov	sp, fp
   1781c:	pop	{fp, pc}
   17820:	push	{fp, lr}
   17824:	mov	fp, sp
   17828:	sub	sp, sp, #16
   1782c:	str	r0, [sp, #8]
   17830:	str	r1, [sp, #4]
   17834:	ldr	r0, [sp, #8]
   17838:	ldr	r0, [r0, #116]	; 0x74
   1783c:	cmp	r0, #0
   17840:	bne	17864 <flatcc_builder_create_cached_vtable@@Base+0x350>
   17844:	ldr	r0, [sp, #8]
   17848:	bl	1a32c <flatcc_builder_get_emit_context@@Base+0xe8>
   1784c:	cmp	r0, #0
   17850:	beq	17860 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   17854:	movw	r0, #0
   17858:	str	r0, [fp, #-4]
   1785c:	b	17894 <flatcc_builder_create_cached_vtable@@Base+0x380>
   17860:	b	17864 <flatcc_builder_create_cached_vtable@@Base+0x350>
   17864:	ldr	r0, [sp, #8]
   17868:	ldr	r0, [r0, #92]	; 0x5c
   1786c:	str	r0, [sp]
   17870:	ldr	r0, [sp]
   17874:	ldr	r1, [sp, #4]
   17878:	ldr	r2, [sp, #8]
   1787c:	ldr	r2, [r2, #116]	; 0x74
   17880:	rsb	r2, r2, #32
   17884:	lsr	r1, r1, r2
   17888:	mov	r2, r1
   1788c:	add	r0, r0, r1, lsl #2
   17890:	str	r0, [fp, #-4]
   17894:	ldr	r0, [fp, #-4]
   17898:	mov	sp, fp
   1789c:	pop	{fp, pc}

000178a0 <flatcc_builder_create_table@@Base>:
   178a0:	push	{r4, sl, fp, lr}
   178a4:	add	fp, sp, #8
   178a8:	sub	sp, sp, #128	; 0x80
   178ac:	ldr	ip, [fp, #16]
   178b0:	ldr	lr, [fp, #12]
   178b4:	ldr	r4, [fp, #8]
   178b8:	str	r0, [fp, #-16]
   178bc:	str	r1, [fp, #-20]	; 0xffffffec
   178c0:	str	r2, [fp, #-24]	; 0xffffffe8
   178c4:	strh	r3, [fp, #-26]	; 0xffffffe6
   178c8:	ldr	r0, [fp, #12]
   178cc:	cmp	r0, #0
   178d0:	blt	178d8 <flatcc_builder_create_table@@Base+0x38>
   178d4:	b	178f8 <flatcc_builder_create_table@@Base+0x58>
   178d8:	ldr	r0, [pc, #616]	; 17b48 <flatcc_builder_create_table@@Base+0x2a8>
   178dc:	add	r0, pc, r0
   178e0:	ldr	r1, [pc, #612]	; 17b4c <flatcc_builder_create_table@@Base+0x2ac>
   178e4:	add	r1, pc, r1
   178e8:	ldr	r2, [pc, #608]	; 17b50 <flatcc_builder_create_table@@Base+0x2b0>
   178ec:	add	r3, pc, r2
   178f0:	movw	r2, #1237	; 0x4d5
   178f4:	bl	1298c <__assert_fail@plt>
   178f8:	ldr	r0, [fp, #16]
   178fc:	and	r0, r0, #1
   17900:	cmp	r0, #0
   17904:	beq	1790c <flatcc_builder_create_table@@Base+0x6c>
   17908:	b	1792c <flatcc_builder_create_table@@Base+0x8c>
   1790c:	ldr	r0, [pc, #576]	; 17b54 <flatcc_builder_create_table@@Base+0x2b4>
   17910:	add	r0, pc, r0
   17914:	ldr	r1, [pc, #572]	; 17b58 <flatcc_builder_create_table@@Base+0x2b8>
   17918:	add	r1, pc, r1
   1791c:	ldr	r2, [pc, #568]	; 17b5c <flatcc_builder_create_table@@Base+0x2bc>
   17920:	add	r3, pc, r2
   17924:	movw	r2, #1243	; 0x4db
   17928:	bl	1298c <__assert_fail@plt>
   1792c:	sub	r0, fp, #26
   17930:	movw	r1, #4
   17934:	uxth	r1, r1
   17938:	bl	16e28 <flatcc_builder_start_vector@@Base+0xac>
   1793c:	ldr	r0, [fp, #-16]
   17940:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   17944:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   17948:	ldr	r0, [fp, #-16]
   1794c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17950:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   17954:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   17958:	str	r0, [fp, #-36]	; 0xffffffdc
   1795c:	ldr	r0, [fp, #-16]
   17960:	ldr	r0, [r0, #136]	; 0x88
   17964:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17968:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1796c:	add	r1, r1, r2
   17970:	add	r1, r1, #4
   17974:	sub	r0, r0, r1
   17978:	str	r0, [fp, #-52]	; 0xffffffcc
   1797c:	ldr	r0, [fp, #16]
   17980:	sub	r0, r0, #1
   17984:	str	r0, [fp, #-48]	; 0xffffffd0
   17988:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1798c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17990:	sub	r0, r0, r1
   17994:	str	r0, [fp, #-40]	; 0xffffffd8
   17998:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1799c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   179a0:	sub	r0, r0, r1
   179a4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   179a8:	cmp	r0, r1
   179ac:	beq	179bc <flatcc_builder_create_table@@Base+0x11c>
   179b0:	mvn	r0, #0
   179b4:	str	r0, [fp, #-12]
   179b8:	b	17b3c <flatcc_builder_create_table@@Base+0x29c>
   179bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   179c0:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   179c4:	str	r0, [fp, #-44]	; 0xffffffd4
   179c8:	movw	r0, #0
   179cc:	str	r0, [fp, #-32]	; 0xffffffe0
   179d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179d4:	ldr	r1, [fp, #12]
   179d8:	cmp	r0, r1
   179dc:	bge	17a48 <flatcc_builder_create_table@@Base+0x1a8>
   179e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   179e4:	ldr	r1, [fp, #8]
   179e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   179ec:	add	r1, r1, r2, lsl #1
   179f0:	ldrh	r1, [r1]
   179f4:	add	r0, r0, r1
   179f8:	str	r0, [fp, #-60]	; 0xffffffc4
   179fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17a00:	ldr	r0, [r0]
   17a04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17a08:	sub	r0, r0, r1
   17a0c:	ldr	r1, [fp, #8]
   17a10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17a14:	add	r1, r1, r2, lsl #1
   17a18:	ldrh	r1, [r1]
   17a1c:	sub	r0, r0, r1
   17a20:	sub	r0, r0, #4
   17a24:	str	r0, [fp, #-56]	; 0xffffffc8
   17a28:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17a2c:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   17a30:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17a34:	str	r0, [r1]
   17a38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a3c:	add	r0, r0, #1
   17a40:	str	r0, [fp, #-32]	; 0xffffffe0
   17a44:	b	179d0 <flatcc_builder_create_table@@Base+0x130>
   17a48:	mov	r0, #0
   17a4c:	str	r0, [sp, #4]
   17a50:	str	r0, [sp, #8]
   17a54:	ldr	r0, [sp, #4]
   17a58:	add	r0, r0, #4
   17a5c:	str	r0, [sp, #4]
   17a60:	add	r0, sp, #4
   17a64:	add	r0, r0, #8
   17a68:	ldr	r1, [sp, #8]
   17a6c:	sub	r2, fp, #44	; 0x2c
   17a70:	str	r2, [r0, r1, lsl #3]
   17a74:	ldr	r1, [sp, #8]
   17a78:	add	r0, r0, r1, lsl #3
   17a7c:	movw	r1, #4
   17a80:	str	r1, [r0, #4]
   17a84:	ldr	r0, [sp, #8]
   17a88:	add	r0, r0, #1
   17a8c:	str	r0, [sp, #8]
   17a90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a94:	cmp	r0, #0
   17a98:	bls	17adc <flatcc_builder_create_table@@Base+0x23c>
   17a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17aa0:	ldr	r1, [sp, #4]
   17aa4:	add	r0, r1, r0
   17aa8:	str	r0, [sp, #4]
   17aac:	ldr	r0, [fp, #-20]	; 0xffffffec
   17ab0:	add	r1, sp, #4
   17ab4:	add	r1, r1, #8
   17ab8:	ldr	r2, [sp, #8]
   17abc:	str	r0, [r1, r2, lsl #3]
   17ac0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ac4:	ldr	r2, [sp, #8]
   17ac8:	add	r1, r1, r2, lsl #3
   17acc:	str	r0, [r1, #4]
   17ad0:	ldr	r0, [sp, #8]
   17ad4:	add	r0, r0, #1
   17ad8:	str	r0, [sp, #8]
   17adc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17ae0:	cmp	r0, #0
   17ae4:	bls	17b2c <flatcc_builder_create_table@@Base+0x28c>
   17ae8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17aec:	ldr	r1, [sp, #4]
   17af0:	add	r0, r1, r0
   17af4:	str	r0, [sp, #4]
   17af8:	add	r0, sp, #4
   17afc:	add	r0, r0, #8
   17b00:	ldr	r1, [sp, #8]
   17b04:	ldr	r2, [pc, #84]	; 17b60 <flatcc_builder_create_table@@Base+0x2c0>
   17b08:	ldr	r2, [pc, r2]
   17b0c:	str	r2, [r0, r1, lsl #3]
   17b10:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17b14:	ldr	r2, [sp, #8]
   17b18:	add	r0, r0, r2, lsl #3
   17b1c:	str	r1, [r0, #4]
   17b20:	ldr	r0, [sp, #8]
   17b24:	add	r0, r0, #1
   17b28:	str	r0, [sp, #8]
   17b2c:	ldr	r0, [fp, #-16]
   17b30:	add	r1, sp, #4
   17b34:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   17b38:	str	r0, [fp, #-12]
   17b3c:	ldr	r0, [fp, #-12]
   17b40:	sub	sp, fp, #8
   17b44:	pop	{r4, sl, fp, pc}
   17b48:	andeq	fp, r0, pc, lsl #4
   17b4c:	muleq	r0, r4, sl
   17b50:	andeq	fp, r0, r1, lsl r2
   17b54:	andeq	fp, r0, r9, lsl #5
   17b58:	andeq	sl, r0, r0, ror #20
   17b5c:	ldrdeq	fp, [r0], -sp
   17b60:	andeq	sp, r1, r4, asr #10

00017b64 <flatcc_builder_check_required_field@@Base>:
   17b64:	push	{fp, lr}
   17b68:	mov	fp, sp
   17b6c:	sub	sp, sp, #16
   17b70:	str	r0, [fp, #-4]
   17b74:	strh	r1, [fp, #-6]
   17b78:	ldr	r0, [fp, #-4]
   17b7c:	ldr	r0, [r0, #32]
   17b80:	ldrh	r0, [r0, #14]
   17b84:	cmp	r0, #3
   17b88:	bne	17b90 <flatcc_builder_check_required_field@@Base+0x2c>
   17b8c:	b	17bb0 <flatcc_builder_check_required_field@@Base+0x4c>
   17b90:	ldr	r0, [pc, #104]	; 17c00 <flatcc_builder_check_required_field@@Base+0x9c>
   17b94:	add	r0, pc, r0
   17b98:	ldr	r1, [pc, #100]	; 17c04 <flatcc_builder_check_required_field@@Base+0xa0>
   17b9c:	add	r1, pc, r1
   17ba0:	ldr	r2, [pc, #96]	; 17c08 <flatcc_builder_check_required_field@@Base+0xa4>
   17ba4:	add	r3, pc, r2
   17ba8:	movw	r2, #1272	; 0x4f8
   17bac:	bl	1298c <__assert_fail@plt>
   17bb0:	ldrh	r0, [fp, #-6]
   17bb4:	ldr	r1, [fp, #-4]
   17bb8:	ldrh	r1, [r1, #8]
   17bbc:	cmp	r0, r1
   17bc0:	movw	r0, #0
   17bc4:	str	r0, [sp, #4]
   17bc8:	bge	17bf0 <flatcc_builder_check_required_field@@Base+0x8c>
   17bcc:	ldr	r0, [fp, #-4]
   17bd0:	ldr	r0, [r0, #4]
   17bd4:	ldrh	r1, [fp, #-6]
   17bd8:	add	r0, r0, r1, lsl #1
   17bdc:	ldrh	r0, [r0]
   17be0:	cmp	r0, #0
   17be4:	movw	r0, #0
   17be8:	movne	r0, #1
   17bec:	str	r0, [sp, #4]
   17bf0:	ldr	r0, [sp, #4]
   17bf4:	and	r0, r0, #1
   17bf8:	mov	sp, fp
   17bfc:	pop	{fp, pc}
   17c00:	andeq	fp, r0, r0, lsl r0
   17c04:	ldrdeq	sl, [r0], -ip
   17c08:	andeq	fp, r0, fp, lsr #32

00017c0c <flatcc_builder_check_union_field@@Base>:
   17c0c:	push	{fp, lr}
   17c10:	mov	fp, sp
   17c14:	sub	sp, sp, #16
   17c18:	str	r0, [sp, #8]
   17c1c:	strh	r1, [sp, #6]
   17c20:	ldr	r0, [sp, #8]
   17c24:	ldr	r0, [r0, #32]
   17c28:	ldrh	r0, [r0, #14]
   17c2c:	cmp	r0, #3
   17c30:	bne	17c38 <flatcc_builder_check_union_field@@Base+0x2c>
   17c34:	b	17c58 <flatcc_builder_check_union_field@@Base+0x4c>
   17c38:	ldr	r0, [pc, #284]	; 17d5c <flatcc_builder_check_union_field@@Base+0x150>
   17c3c:	add	r0, pc, r0
   17c40:	ldr	r1, [pc, #280]	; 17d60 <flatcc_builder_check_union_field@@Base+0x154>
   17c44:	add	r1, pc, r1
   17c48:	ldr	r2, [pc, #276]	; 17d64 <flatcc_builder_check_union_field@@Base+0x158>
   17c4c:	add	r3, pc, r2
   17c50:	movw	r2, #1279	; 0x4ff
   17c54:	bl	1298c <__assert_fail@plt>
   17c58:	ldrh	r0, [sp, #6]
   17c5c:	cmp	r0, #0
   17c60:	beq	17c78 <flatcc_builder_check_union_field@@Base+0x6c>
   17c64:	ldrh	r0, [sp, #6]
   17c68:	ldr	r1, [sp, #8]
   17c6c:	ldrh	r1, [r1, #8]
   17c70:	cmp	r0, r1
   17c74:	blt	17c84 <flatcc_builder_check_union_field@@Base+0x78>
   17c78:	movw	r0, #0
   17c7c:	str	r0, [fp, #-4]
   17c80:	b	17d50 <flatcc_builder_check_union_field@@Base+0x144>
   17c84:	ldr	r0, [sp, #8]
   17c88:	ldr	r0, [r0, #4]
   17c8c:	ldrh	r1, [sp, #6]
   17c90:	sub	r1, r1, #1
   17c94:	add	r0, r0, r1, lsl #1
   17c98:	ldrh	r0, [r0]
   17c9c:	cmp	r0, #0
   17ca0:	bne	17cd0 <flatcc_builder_check_union_field@@Base+0xc4>
   17ca4:	ldr	r0, [sp, #8]
   17ca8:	ldr	r0, [r0, #4]
   17cac:	ldrh	r1, [sp, #6]
   17cb0:	add	r0, r0, r1, lsl #1
   17cb4:	ldrh	r0, [r0]
   17cb8:	cmp	r0, #0
   17cbc:	movw	r0, #0
   17cc0:	moveq	r0, #1
   17cc4:	and	r0, r0, #1
   17cc8:	str	r0, [fp, #-4]
   17ccc:	b	17d50 <flatcc_builder_check_union_field@@Base+0x144>
   17cd0:	ldr	r0, [sp, #8]
   17cd4:	ldr	r1, [r0, #4]
   17cd8:	ldr	r0, [r0, #16]
   17cdc:	ldrh	r2, [sp, #6]
   17ce0:	sub	r2, r2, #1
   17ce4:	add	r1, r1, r2, lsl #1
   17ce8:	ldrh	r1, [r1]
   17cec:	add	r0, r0, r1
   17cf0:	ldrsb	r0, [r0]
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d28 <flatcc_builder_check_union_field@@Base+0x11c>
   17cfc:	ldr	r0, [sp, #8]
   17d00:	ldr	r0, [r0, #4]
   17d04:	ldrh	r1, [sp, #6]
   17d08:	add	r0, r0, r1, lsl #1
   17d0c:	ldrh	r0, [r0]
   17d10:	cmp	r0, #0
   17d14:	movw	r0, #0
   17d18:	movne	r0, #1
   17d1c:	and	r0, r0, #1
   17d20:	str	r0, [fp, #-4]
   17d24:	b	17d50 <flatcc_builder_check_union_field@@Base+0x144>
   17d28:	ldr	r0, [sp, #8]
   17d2c:	ldr	r0, [r0, #4]
   17d30:	ldrh	r1, [sp, #6]
   17d34:	add	r0, r0, r1, lsl #1
   17d38:	ldrh	r0, [r0]
   17d3c:	cmp	r0, #0
   17d40:	movw	r0, #0
   17d44:	moveq	r0, #1
   17d48:	and	r0, r0, #1
   17d4c:	str	r0, [fp, #-4]
   17d50:	ldr	r0, [fp, #-4]
   17d54:	mov	sp, fp
   17d58:	pop	{fp, pc}
   17d5c:	andeq	sl, r0, r8, ror #30
   17d60:	andeq	sl, r0, r4, lsr r7
   17d64:	ldrdeq	sl, [r0], -r6

00017d68 <flatcc_builder_check_required@@Base>:
   17d68:	push	{fp, lr}
   17d6c:	mov	fp, sp
   17d70:	sub	sp, sp, #24
   17d74:	str	r0, [fp, #-8]
   17d78:	str	r1, [sp, #12]
   17d7c:	str	r2, [sp, #8]
   17d80:	ldr	r0, [fp, #-8]
   17d84:	ldr	r0, [r0, #32]
   17d88:	ldrh	r0, [r0, #14]
   17d8c:	cmp	r0, #3
   17d90:	bne	17d98 <flatcc_builder_check_required@@Base+0x30>
   17d94:	b	17db8 <flatcc_builder_check_required@@Base+0x50>
   17d98:	ldr	r0, [pc, #172]	; 17e4c <flatcc_builder_check_required@@Base+0xe4>
   17d9c:	add	r0, pc, r0
   17da0:	ldr	r1, [pc, #168]	; 17e50 <flatcc_builder_check_required@@Base+0xe8>
   17da4:	add	r1, pc, r1
   17da8:	ldr	r2, [pc, #164]	; 17e54 <flatcc_builder_check_required@@Base+0xec>
   17dac:	add	r3, pc, r2
   17db0:	movw	r2, #1297	; 0x511
   17db4:	bl	1298c <__assert_fail@plt>
   17db8:	ldr	r0, [fp, #-8]
   17dbc:	ldrh	r0, [r0, #8]
   17dc0:	ldr	r1, [sp, #8]
   17dc4:	cmp	r0, r1
   17dc8:	bge	17dd8 <flatcc_builder_check_required@@Base+0x70>
   17dcc:	movw	r0, #0
   17dd0:	str	r0, [fp, #-4]
   17dd4:	b	17e40 <flatcc_builder_check_required@@Base+0xd8>
   17dd8:	movw	r0, #0
   17ddc:	str	r0, [sp, #4]
   17de0:	ldr	r0, [sp, #4]
   17de4:	ldr	r1, [sp, #8]
   17de8:	cmp	r0, r1
   17dec:	bge	17e38 <flatcc_builder_check_required@@Base+0xd0>
   17df0:	ldr	r0, [fp, #-8]
   17df4:	ldr	r0, [r0, #4]
   17df8:	ldr	r1, [sp, #12]
   17dfc:	ldr	r2, [sp, #4]
   17e00:	add	r1, r1, r2, lsl #1
   17e04:	ldrh	r1, [r1]
   17e08:	add	r0, r0, r1, lsl #1
   17e0c:	ldrh	r0, [r0]
   17e10:	cmp	r0, #0
   17e14:	bne	17e24 <flatcc_builder_check_required@@Base+0xbc>
   17e18:	movw	r0, #0
   17e1c:	str	r0, [fp, #-4]
   17e20:	b	17e40 <flatcc_builder_check_required@@Base+0xd8>
   17e24:	b	17e28 <flatcc_builder_check_required@@Base+0xc0>
   17e28:	ldr	r0, [sp, #4]
   17e2c:	add	r0, r0, #1
   17e30:	str	r0, [sp, #4]
   17e34:	b	17de0 <flatcc_builder_check_required@@Base+0x78>
   17e38:	movw	r0, #1
   17e3c:	str	r0, [fp, #-4]
   17e40:	ldr	r0, [fp, #-4]
   17e44:	mov	sp, fp
   17e48:	pop	{fp, pc}
   17e4c:	andeq	sl, r0, r8, lsl #28
   17e50:	ldrdeq	sl, [r0], -r4
   17e54:	andeq	sl, r0, r6, asr #29

00017e58 <flatcc_builder_end_table@@Base>:
   17e58:	push	{r4, r5, fp, lr}
   17e5c:	add	fp, sp, #8
   17e60:	sub	sp, sp, #48	; 0x30
   17e64:	str	r0, [fp, #-16]
   17e68:	ldr	r0, [fp, #-16]
   17e6c:	ldr	r0, [r0, #32]
   17e70:	ldrh	r0, [r0, #14]
   17e74:	cmp	r0, #3
   17e78:	bne	17e80 <flatcc_builder_end_table@@Base+0x28>
   17e7c:	b	17ea0 <flatcc_builder_end_table@@Base+0x48>
   17e80:	ldr	r0, [pc, #500]	; 1807c <flatcc_builder_end_table@@Base+0x224>
   17e84:	add	r0, pc, r0
   17e88:	ldr	r1, [pc, #496]	; 18080 <flatcc_builder_end_table@@Base+0x228>
   17e8c:	add	r1, pc, r1
   17e90:	ldr	r2, [pc, #492]	; 18084 <flatcc_builder_end_table@@Base+0x22c>
   17e94:	add	r3, pc, r2
   17e98:	movw	r2, #1317	; 0x525
   17e9c:	bl	1298c <__assert_fail@plt>
   17ea0:	ldr	r0, [pc, #480]	; 18088 <flatcc_builder_end_table@@Base+0x230>
   17ea4:	ldr	r1, [fp, #-16]
   17ea8:	ldr	r1, [r1, #4]
   17eac:	sub	r1, r1, #4
   17eb0:	str	r1, [fp, #-20]	; 0xffffffec
   17eb4:	ldr	r1, [fp, #-16]
   17eb8:	ldrh	r1, [r1, #8]
   17ebc:	add	r1, r1, #2
   17ec0:	lsl	r1, r1, #1
   17ec4:	strh	r1, [fp, #-22]	; 0xffffffea
   17ec8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17ecc:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ed0:	strh	r1, [r2]
   17ed4:	ldr	r1, [fp, #-16]
   17ed8:	ldr	r1, [r1, #20]
   17edc:	uxth	r1, r1
   17ee0:	add	r1, r1, #4
   17ee4:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ee8:	strh	r1, [r2, #2]
   17eec:	ldr	r1, [fp, #-20]	; 0xffffffec
   17ef0:	ldrh	r1, [r1]
   17ef4:	ldr	r2, [fp, #-16]
   17ef8:	ldr	r2, [r2, #12]
   17efc:	eor	r1, r1, r2
   17f00:	mul	r1, r1, r0
   17f04:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f08:	ldrh	r2, [r2, #2]
   17f0c:	eor	r1, r1, r2
   17f10:	mul	r0, r1, r0
   17f14:	ldr	r1, [fp, #-16]
   17f18:	str	r0, [r1, #12]
   17f1c:	ldr	r0, [fp, #-16]
   17f20:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f24:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17f28:	ldr	r3, [fp, #-16]
   17f2c:	ldr	r3, [r3, #12]
   17f30:	uxth	r2, r2
   17f34:	bl	17514 <flatcc_builder_create_cached_vtable@@Base>
   17f38:	str	r0, [sp, #24]
   17f3c:	cmp	r0, #0
   17f40:	bne	17f50 <flatcc_builder_end_table@@Base+0xf8>
   17f44:	movw	r0, #0
   17f48:	str	r0, [fp, #-12]
   17f4c:	b	18070 <flatcc_builder_end_table@@Base+0x218>
   17f50:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f54:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17f58:	mov	r1, #0
   17f5c:	bl	1295c <memset@plt>
   17f60:	ldr	r1, [fp, #-16]
   17f64:	ldr	r2, [r1, #32]
   17f68:	ldr	r1, [r1, #76]	; 0x4c
   17f6c:	ldr	r2, [r2, #20]
   17f70:	add	r1, r1, r2
   17f74:	str	r1, [sp, #16]
   17f78:	ldr	r1, [fp, #-16]
   17f7c:	ldr	r1, [r1]
   17f80:	ldr	r2, [sp, #16]
   17f84:	sub	r1, r1, r2
   17f88:	asr	r1, r1, #1
   17f8c:	str	r1, [sp, #20]
   17f90:	ldr	r1, [fp, #-16]
   17f94:	ldr	r2, [fp, #-16]
   17f98:	ldr	r2, [r2, #16]
   17f9c:	ldr	r3, [fp, #-16]
   17fa0:	ldr	r3, [r3, #20]
   17fa4:	ldr	ip, [fp, #-16]
   17fa8:	ldrh	ip, [ip, #130]	; 0x82
   17fac:	ldr	lr, [sp, #16]
   17fb0:	ldr	r4, [sp, #20]
   17fb4:	ldr	r5, [sp, #24]
   17fb8:	str	r0, [sp, #12]
   17fbc:	mov	r0, r1
   17fc0:	mov	r1, r2
   17fc4:	mov	r2, r3
   17fc8:	uxth	r3, ip
   17fcc:	str	lr, [sp]
   17fd0:	str	r4, [sp, #4]
   17fd4:	str	r5, [sp, #8]
   17fd8:	bl	178a0 <flatcc_builder_create_table@@Base>
   17fdc:	str	r0, [sp, #28]
   17fe0:	movw	r1, #0
   17fe4:	cmp	r1, r0
   17fe8:	bne	17ff8 <flatcc_builder_end_table@@Base+0x1a0>
   17fec:	movw	r0, #0
   17ff0:	str	r0, [fp, #-12]
   17ff4:	b	18070 <flatcc_builder_end_table@@Base+0x218>
   17ff8:	ldr	r0, [fp, #-16]
   17ffc:	ldr	r0, [r0, #32]
   18000:	ldr	r0, [r0, #24]
   18004:	ldr	r1, [fp, #-16]
   18008:	str	r0, [r1, #12]
   1800c:	ldr	r0, [fp, #-16]
   18010:	ldr	r0, [r0, #32]
   18014:	ldrh	r0, [r0, #28]
   18018:	ldr	r1, [fp, #-16]
   1801c:	strh	r0, [r1, #8]
   18020:	ldr	r0, [fp, #-16]
   18024:	ldr	r0, [r0, #52]	; 0x34
   18028:	ldr	r1, [fp, #-16]
   1802c:	ldr	r1, [r1, #32]
   18030:	ldr	r1, [r1, #16]
   18034:	add	r0, r0, r1
   18038:	ldr	r1, [fp, #-16]
   1803c:	str	r0, [r1, #4]
   18040:	ldr	r0, [fp, #-16]
   18044:	ldr	r0, [r0, #76]	; 0x4c
   18048:	ldr	r1, [fp, #-16]
   1804c:	ldr	r1, [r1, #32]
   18050:	ldr	r1, [r1, #20]
   18054:	add	r0, r0, r1
   18058:	ldr	r1, [fp, #-16]
   1805c:	str	r0, [r1]
   18060:	ldr	r0, [fp, #-16]
   18064:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   18068:	ldr	r0, [sp, #28]
   1806c:	str	r0, [fp, #-12]
   18070:	ldr	r0, [fp, #-12]
   18074:	sub	sp, fp, #8
   18078:	pop	{r4, r5, fp, pc}
   1807c:	andeq	sl, r0, r0, lsr #26
   18080:	andeq	sl, r0, ip, ror #9
   18084:	andeq	sl, r0, r8, lsr lr
   18088:			; <UNDEFINED> instruction: 0x9e3779b1

0001808c <flatcc_builder_create_vector@@Base>:
   1808c:	push	{fp, lr}
   18090:	mov	fp, sp
   18094:	sub	sp, sp, #112	; 0x70
   18098:	ldr	ip, [fp, #12]
   1809c:	ldr	lr, [fp, #8]
   180a0:	str	r0, [fp, #-8]
   180a4:	str	r1, [fp, #-12]
   180a8:	str	r2, [fp, #-16]
   180ac:	str	r3, [fp, #-20]	; 0xffffffec
   180b0:	strh	lr, [fp, #-22]	; 0xffffffea
   180b4:	ldr	r0, [fp, #-16]
   180b8:	ldr	r1, [fp, #12]
   180bc:	cmp	r0, r1
   180c0:	bls	18104 <flatcc_builder_create_vector@@Base+0x78>
   180c4:	ldr	r0, [fp, #-16]
   180c8:	ldr	r1, [fp, #12]
   180cc:	cmp	r0, r1
   180d0:	bhi	180d8 <flatcc_builder_create_vector@@Base+0x4c>
   180d4:	b	180f8 <flatcc_builder_create_vector@@Base+0x6c>
   180d8:	ldr	r0, [pc, #364]	; 1824c <flatcc_builder_create_vector@@Base+0x1c0>
   180dc:	add	r0, pc, r0
   180e0:	ldr	r1, [pc, #360]	; 18250 <flatcc_builder_create_vector@@Base+0x1c4>
   180e4:	add	r1, pc, r1
   180e8:	ldr	r2, [pc, #356]	; 18254 <flatcc_builder_create_vector@@Base+0x1c8>
   180ec:	add	r3, pc, r2
   180f0:	movw	r2, #1365	; 0x555
   180f4:	bl	1298c <__assert_fail@plt>
   180f8:	movw	r0, #0
   180fc:	str	r0, [fp, #-4]
   18100:	b	18240 <flatcc_builder_create_vector@@Base+0x1b4>
   18104:	sub	r0, fp, #22
   18108:	mov	r1, #4
   1810c:	bl	16e28 <flatcc_builder_start_vector@@Base+0xac>
   18110:	ldr	r0, [fp, #-8]
   18114:	ldrh	r1, [fp, #-22]	; 0xffffffea
   18118:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   1811c:	ldr	r0, [fp, #-16]
   18120:	ldr	r1, [fp, #-20]	; 0xffffffec
   18124:	mul	r0, r0, r1
   18128:	str	r0, [fp, #-28]	; 0xffffffe4
   1812c:	ldr	r0, [fp, #-16]
   18130:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   18134:	str	r0, [fp, #-36]	; 0xffffffdc
   18138:	ldr	r0, [fp, #-8]
   1813c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18140:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18144:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   18148:	str	r0, [fp, #-32]	; 0xffffffe0
   1814c:	mov	r0, #0
   18150:	str	r0, [sp, #4]
   18154:	str	r0, [sp, #8]
   18158:	ldr	r0, [sp, #4]
   1815c:	add	r0, r0, #4
   18160:	str	r0, [sp, #4]
   18164:	add	r0, sp, #4
   18168:	add	r0, r0, #8
   1816c:	ldr	r1, [sp, #8]
   18170:	sub	r2, fp, #36	; 0x24
   18174:	str	r2, [r0, r1, lsl #3]
   18178:	ldr	r1, [sp, #8]
   1817c:	add	r0, r0, r1, lsl #3
   18180:	movw	r1, #4
   18184:	str	r1, [r0, #4]
   18188:	ldr	r0, [sp, #8]
   1818c:	add	r0, r0, #1
   18190:	str	r0, [sp, #8]
   18194:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18198:	cmp	r0, #0
   1819c:	bls	181e0 <flatcc_builder_create_vector@@Base+0x154>
   181a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   181a4:	ldr	r1, [sp, #4]
   181a8:	add	r0, r1, r0
   181ac:	str	r0, [sp, #4]
   181b0:	ldr	r0, [fp, #-12]
   181b4:	add	r1, sp, #4
   181b8:	add	r1, r1, #8
   181bc:	ldr	r2, [sp, #8]
   181c0:	str	r0, [r1, r2, lsl #3]
   181c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   181c8:	ldr	r2, [sp, #8]
   181cc:	add	r1, r1, r2, lsl #3
   181d0:	str	r0, [r1, #4]
   181d4:	ldr	r0, [sp, #8]
   181d8:	add	r0, r0, #1
   181dc:	str	r0, [sp, #8]
   181e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   181e4:	cmp	r0, #0
   181e8:	bls	18230 <flatcc_builder_create_vector@@Base+0x1a4>
   181ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   181f0:	ldr	r1, [sp, #4]
   181f4:	add	r0, r1, r0
   181f8:	str	r0, [sp, #4]
   181fc:	add	r0, sp, #4
   18200:	add	r0, r0, #8
   18204:	ldr	r1, [sp, #8]
   18208:	ldr	r2, [pc, #72]	; 18258 <flatcc_builder_create_vector@@Base+0x1cc>
   1820c:	ldr	r2, [pc, r2]
   18210:	str	r2, [r0, r1, lsl #3]
   18214:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18218:	ldr	r2, [sp, #8]
   1821c:	add	r0, r0, r2, lsl #3
   18220:	str	r1, [r0, #4]
   18224:	ldr	r0, [sp, #8]
   18228:	add	r0, r0, #1
   1822c:	str	r0, [sp, #8]
   18230:	ldr	r0, [fp, #-8]
   18234:	add	r1, sp, #4
   18238:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   1823c:	str	r0, [fp, #-4]
   18240:	ldr	r0, [fp, #-4]
   18244:	mov	sp, fp
   18248:	pop	{fp, pc}
   1824c:	andeq	sl, r0, r2, lsr ip
   18250:	muleq	r0, r4, r2
   18254:	andeq	sl, r0, r5, lsr ip
   18258:	andeq	ip, r1, r0, asr #28

0001825c <flatcc_builder_end_vector@@Base>:
   1825c:	push	{fp, lr}
   18260:	mov	fp, sp
   18264:	sub	sp, sp, #24
   18268:	str	r0, [fp, #-8]
   1826c:	ldr	r0, [fp, #-8]
   18270:	ldr	r0, [r0, #32]
   18274:	ldrh	r0, [r0, #14]
   18278:	cmp	r0, #4
   1827c:	bne	18284 <flatcc_builder_end_vector@@Base+0x28>
   18280:	b	182a4 <flatcc_builder_end_vector@@Base+0x48>
   18284:	ldr	r0, [pc, #152]	; 18324 <flatcc_builder_end_vector@@Base+0xc8>
   18288:	add	r0, pc, r0
   1828c:	ldr	r1, [pc, #148]	; 18328 <flatcc_builder_end_vector@@Base+0xcc>
   18290:	add	r1, pc, r1
   18294:	ldr	r2, [pc, #144]	; 1832c <flatcc_builder_end_vector@@Base+0xd0>
   18298:	add	r3, pc, r2
   1829c:	movw	r2, #1400	; 0x578
   182a0:	bl	1298c <__assert_fail@plt>
   182a4:	ldr	r0, [fp, #-8]
   182a8:	ldr	r1, [fp, #-8]
   182ac:	ldr	r1, [r1, #16]
   182b0:	ldr	r2, [fp, #-8]
   182b4:	ldr	r2, [r2, #32]
   182b8:	ldr	r2, [r2, #20]
   182bc:	ldr	r3, [fp, #-8]
   182c0:	ldr	r3, [r3, #32]
   182c4:	ldr	r3, [r3, #16]
   182c8:	ldr	ip, [fp, #-8]
   182cc:	ldrh	ip, [ip, #130]	; 0x82
   182d0:	ldr	lr, [fp, #-8]
   182d4:	ldr	lr, [lr, #32]
   182d8:	ldr	lr, [lr, #24]
   182dc:	uxth	ip, ip
   182e0:	str	ip, [sp]
   182e4:	str	lr, [sp, #4]
   182e8:	bl	1808c <flatcc_builder_create_vector@@Base>
   182ec:	str	r0, [sp, #12]
   182f0:	movw	r1, #0
   182f4:	cmp	r1, r0
   182f8:	bne	18308 <flatcc_builder_end_vector@@Base+0xac>
   182fc:	movw	r0, #0
   18300:	str	r0, [fp, #-4]
   18304:	b	18318 <flatcc_builder_end_vector@@Base+0xbc>
   18308:	ldr	r0, [fp, #-8]
   1830c:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   18310:	ldr	r0, [sp, #12]
   18314:	str	r0, [fp, #-4]
   18318:	ldr	r0, [fp, #-4]
   1831c:	mov	sp, fp
   18320:	pop	{fp, pc}
   18324:	andeq	sl, r0, sl, lsr #8
   18328:	andeq	sl, r0, r8, ror #1
   1832c:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>

00018330 <flatcc_builder_vector_count@@Base>:
   18330:	sub	sp, sp, #4
   18334:	str	r0, [sp]
   18338:	ldr	r0, [sp]
   1833c:	ldr	r0, [r0, #32]
   18340:	ldr	r0, [r0, #20]
   18344:	add	sp, sp, #4
   18348:	bx	lr

0001834c <flatcc_builder_vector_edit@@Base>:
   1834c:	sub	sp, sp, #4
   18350:	str	r0, [sp]
   18354:	ldr	r0, [sp]
   18358:	ldr	r0, [r0, #16]
   1835c:	add	sp, sp, #4
   18360:	bx	lr

00018364 <flatcc_builder_create_offset_vector_direct@@Base>:
   18364:	push	{fp, lr}
   18368:	mov	fp, sp
   1836c:	sub	sp, sp, #16
   18370:	str	r0, [fp, #-4]
   18374:	str	r1, [sp, #8]
   18378:	str	r2, [sp, #4]
   1837c:	ldr	r0, [fp, #-4]
   18380:	ldr	r1, [sp, #8]
   18384:	ldr	r2, [sp, #4]
   18388:	movw	r3, #0
   1838c:	bl	18398 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   18390:	mov	sp, fp
   18394:	pop	{fp, pc}
   18398:	push	{fp, lr}
   1839c:	mov	fp, sp
   183a0:	sub	sp, sp, #120	; 0x78
   183a4:	ldr	ip, [pc, #696]	; 18664 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   183a8:	str	r0, [fp, #-8]
   183ac:	str	r1, [fp, #-12]
   183b0:	str	r2, [fp, #-16]
   183b4:	str	r3, [fp, #-20]	; 0xffffffec
   183b8:	ldr	r0, [fp, #-16]
   183bc:	cmp	r0, ip
   183c0:	bls	183d0 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   183c4:	movw	r0, #0
   183c8:	str	r0, [fp, #-4]
   183cc:	b	18658 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   183d0:	ldr	r0, [fp, #-8]
   183d4:	mov	r1, #4
   183d8:	str	r1, [sp]
   183dc:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   183e0:	ldr	r0, [fp, #-16]
   183e4:	lsl	r0, r0, #2
   183e8:	str	r0, [fp, #-24]	; 0xffffffe8
   183ec:	ldr	r0, [fp, #-16]
   183f0:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   183f4:	str	r0, [fp, #-32]	; 0xffffffe0
   183f8:	ldr	r0, [fp, #-8]
   183fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18400:	ldr	r2, [sp]
   18404:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   18408:	str	r0, [fp, #-28]	; 0xffffffe4
   1840c:	mov	r0, #0
   18410:	str	r0, [sp, #4]
   18414:	str	r0, [sp, #8]
   18418:	ldr	r0, [sp, #4]
   1841c:	add	r0, r0, #4
   18420:	str	r0, [sp, #4]
   18424:	add	r0, sp, #4
   18428:	add	r0, r0, #8
   1842c:	ldr	r1, [sp, #8]
   18430:	sub	r2, fp, #32
   18434:	str	r2, [r0, r1, lsl #3]
   18438:	ldr	r1, [sp, #8]
   1843c:	add	r0, r0, r1, lsl #3
   18440:	movw	r1, #4
   18444:	str	r1, [r0, #4]
   18448:	ldr	r0, [sp, #8]
   1844c:	add	r0, r0, #1
   18450:	str	r0, [sp, #8]
   18454:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18458:	cmp	r0, #0
   1845c:	bls	184a0 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   18460:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18464:	ldr	r1, [sp, #4]
   18468:	add	r0, r1, r0
   1846c:	str	r0, [sp, #4]
   18470:	ldr	r0, [fp, #-12]
   18474:	add	r1, sp, #4
   18478:	add	r1, r1, #8
   1847c:	ldr	r2, [sp, #8]
   18480:	str	r0, [r1, r2, lsl #3]
   18484:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18488:	ldr	r2, [sp, #8]
   1848c:	add	r1, r1, r2, lsl #3
   18490:	str	r0, [r1, #4]
   18494:	ldr	r0, [sp, #8]
   18498:	add	r0, r0, #1
   1849c:	str	r0, [sp, #8]
   184a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   184a4:	cmp	r0, #0
   184a8:	bls	184f0 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   184ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   184b0:	ldr	r1, [sp, #4]
   184b4:	add	r0, r1, r0
   184b8:	str	r0, [sp, #4]
   184bc:	add	r0, sp, #4
   184c0:	add	r0, r0, #8
   184c4:	ldr	r1, [sp, #8]
   184c8:	ldr	r2, [pc, #444]	; 1868c <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   184cc:	ldr	r2, [pc, r2]
   184d0:	str	r2, [r0, r1, lsl #3]
   184d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   184d8:	ldr	r2, [sp, #8]
   184dc:	add	r0, r0, r2, lsl #3
   184e0:	str	r1, [r0, #4]
   184e4:	ldr	r0, [sp, #8]
   184e8:	add	r0, r0, #1
   184ec:	str	r0, [sp, #8]
   184f0:	ldr	r0, [fp, #-8]
   184f4:	ldr	r0, [r0, #136]	; 0x88
   184f8:	ldr	r1, [sp, #4]
   184fc:	sub	r0, r0, r1
   18500:	str	r0, [fp, #-36]	; 0xffffffdc
   18504:	movw	r0, #0
   18508:	str	r0, [fp, #-44]	; 0xffffffd4
   1850c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18510:	ldr	r1, [fp, #-16]
   18514:	cmp	r0, r1
   18518:	bcs	18648 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   1851c:	ldr	r0, [fp, #-12]
   18520:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18524:	add	r0, r0, r1, lsl #2
   18528:	ldr	r0, [r0]
   1852c:	cmp	r0, #0
   18530:	beq	185c0 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   18534:	ldr	r0, [fp, #-12]
   18538:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1853c:	ldr	r0, [r0, r1, lsl #2]
   18540:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18544:	sub	r0, r0, r2
   18548:	sub	r0, r0, r1, lsl #2
   1854c:	sub	r0, r0, #4
   18550:	str	r0, [fp, #-40]	; 0xffffffd8
   18554:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18558:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   1855c:	ldr	r1, [fp, #-12]
   18560:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18564:	add	r1, r1, r2, lsl #2
   18568:	str	r0, [r1]
   1856c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18570:	movw	r1, #0
   18574:	cmp	r0, r1
   18578:	beq	185bc <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   1857c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18580:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18584:	add	r0, r0, r1
   18588:	ldrb	r0, [r0]
   1858c:	cmp	r0, #0
   18590:	beq	18598 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   18594:	b	185b8 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   18598:	ldr	r0, [pc, #224]	; 18680 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   1859c:	add	r0, pc, r0
   185a0:	ldr	r1, [pc, #220]	; 18684 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   185a4:	add	r1, pc, r1
   185a8:	ldr	r2, [pc, #216]	; 18688 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   185ac:	add	r3, pc, r2
   185b0:	movw	r2, #1457	; 0x5b1
   185b4:	bl	1298c <__assert_fail@plt>
   185b8:	b	185bc <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   185bc:	b	18634 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   185c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   185c4:	movw	r1, #0
   185c8:	cmp	r0, r1
   185cc:	beq	18610 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   185d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   185d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   185d8:	add	r0, r0, r1
   185dc:	ldrb	r0, [r0]
   185e0:	cmp	r0, #0
   185e4:	bne	185ec <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   185e8:	b	1860c <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   185ec:	ldr	r0, [pc, #128]	; 18674 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   185f0:	add	r0, pc, r0
   185f4:	ldr	r1, [pc, #124]	; 18678 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   185f8:	add	r1, pc, r1
   185fc:	ldr	r2, [pc, #120]	; 1867c <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   18600:	add	r3, pc, r2
   18604:	movw	r2, #1461	; 0x5b5
   18608:	bl	1298c <__assert_fail@plt>
   1860c:	b	18630 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   18610:	ldr	r0, [pc, #80]	; 18668 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   18614:	add	r0, pc, r0
   18618:	ldr	r1, [pc, #76]	; 1866c <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   1861c:	add	r1, pc, r1
   18620:	ldr	r2, [pc, #72]	; 18670 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   18624:	add	r3, pc, r2
   18628:	movw	r2, #1463	; 0x5b7
   1862c:	bl	1298c <__assert_fail@plt>
   18630:	b	18634 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   18634:	b	18638 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   18638:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1863c:	add	r0, r0, #1
   18640:	str	r0, [fp, #-44]	; 0xffffffd4
   18644:	b	1850c <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   18648:	ldr	r0, [fp, #-8]
   1864c:	add	r1, sp, #4
   18650:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   18654:	str	r0, [fp, #-4]
   18658:	ldr	r0, [fp, #-4]
   1865c:	mov	sp, fp
   18660:	pop	{fp, pc}
   18664:	svccc	0x00ffffff
   18668:	andeq	sl, r0, r1, lsr #30
   1866c:	andeq	r9, r0, ip, asr sp
   18670:	andeq	sl, r0, r3, lsl pc
   18674:	andeq	sl, r0, sl, asr #31
   18678:	andeq	r9, r0, r0, lsl #27
   1867c:	andeq	sl, r0, r7, lsr pc
   18680:	andeq	sl, r0, sp, lsl #31
   18684:	ldrdeq	r9, [r0], -r4
   18688:	andeq	sl, r0, fp, lsl #31
   1868c:	andeq	ip, r1, r0, lsl #23

00018690 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   18690:	push	{fp, lr}
   18694:	mov	fp, sp
   18698:	sub	sp, sp, #16
   1869c:	str	r0, [sp, #8]
   186a0:	str	r1, [sp, #4]
   186a4:	ldr	r0, [sp, #8]
   186a8:	ldr	r0, [r0, #32]
   186ac:	ldrh	r0, [r0, #14]
   186b0:	cmp	r0, #5
   186b4:	bne	186bc <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   186b8:	b	186dc <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   186bc:	ldr	r0, [pc, #112]	; 18734 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   186c0:	add	r0, pc, r0
   186c4:	ldr	r1, [pc, #108]	; 18738 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   186c8:	add	r1, pc, r1
   186cc:	ldr	r2, [pc, #104]	; 1873c <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   186d0:	add	r3, pc, r2
   186d4:	movw	r2, #1493	; 0x5d5
   186d8:	bl	1298c <__assert_fail@plt>
   186dc:	ldr	r0, [sp, #8]
   186e0:	ldr	r1, [sp, #8]
   186e4:	ldr	r1, [r1, #16]
   186e8:	ldr	r2, [sp, #8]
   186ec:	ldr	r2, [r2, #32]
   186f0:	ldr	r2, [r2, #20]
   186f4:	ldr	r3, [sp, #4]
   186f8:	bl	18398 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   186fc:	str	r0, [sp]
   18700:	movw	r1, #0
   18704:	cmp	r1, r0
   18708:	bne	18718 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   1870c:	movw	r0, #0
   18710:	str	r0, [fp, #-4]
   18714:	b	18728 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   18718:	ldr	r0, [sp, #8]
   1871c:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   18720:	ldr	r0, [sp]
   18724:	str	r0, [fp, #-4]
   18728:	ldr	r0, [fp, #-4]
   1872c:	mov	sp, fp
   18730:	pop	{fp, pc}
   18734:	andeq	sl, r0, fp, ror #1
   18738:			; <UNDEFINED> instruction: 0x00009cb0
   1873c:	andeq	sl, r0, r4, asr r7

00018740 <flatcc_builder_offset_vector_edit@@Base>:
   18740:	sub	sp, sp, #4
   18744:	str	r0, [sp]
   18748:	ldr	r0, [sp]
   1874c:	ldr	r0, [r0, #16]
   18750:	add	sp, sp, #4
   18754:	bx	lr

00018758 <flatcc_builder_offset_vector_count@@Base>:
   18758:	sub	sp, sp, #4
   1875c:	str	r0, [sp]
   18760:	ldr	r0, [sp]
   18764:	ldr	r0, [r0, #32]
   18768:	ldr	r0, [r0, #20]
   1876c:	add	sp, sp, #4
   18770:	bx	lr

00018774 <flatcc_builder_table_add_union@@Base>:
   18774:	push	{fp, lr}
   18778:	mov	fp, sp
   1877c:	sub	sp, sp, #32
   18780:	str	r2, [fp, #-12]
   18784:	str	r3, [fp, #-8]
   18788:	str	r0, [sp, #16]
   1878c:	str	r1, [sp, #12]
   18790:	ldr	r0, [sp, #16]
   18794:	ldr	r0, [r0, #32]
   18798:	ldrh	r0, [r0, #14]
   1879c:	cmp	r0, #3
   187a0:	bne	187a8 <flatcc_builder_table_add_union@@Base+0x34>
   187a4:	b	187c8 <flatcc_builder_table_add_union@@Base+0x54>
   187a8:	ldr	r0, [pc, #388]	; 18934 <flatcc_builder_table_add_union@@Base+0x1c0>
   187ac:	add	r0, pc, r0
   187b0:	ldr	r1, [pc, #384]	; 18938 <flatcc_builder_table_add_union@@Base+0x1c4>
   187b4:	add	r1, pc, r1
   187b8:	ldr	r2, [pc, #380]	; 1893c <flatcc_builder_table_add_union@@Base+0x1c8>
   187bc:	add	r3, pc, r2
   187c0:	movw	r2, #1518	; 0x5ee
   187c4:	bl	1298c <__assert_fail@plt>
   187c8:	ldrb	r0, [fp, #-12]
   187cc:	cmp	r0, #0
   187d0:	bne	18828 <flatcc_builder_table_add_union@@Base+0xb4>
   187d4:	ldr	r0, [fp, #-8]
   187d8:	cmp	r0, #0
   187dc:	beq	18828 <flatcc_builder_table_add_union@@Base+0xb4>
   187e0:	ldrb	r0, [fp, #-12]
   187e4:	cmp	r0, #0
   187e8:	bne	187f8 <flatcc_builder_table_add_union@@Base+0x84>
   187ec:	ldr	r0, [fp, #-8]
   187f0:	cmp	r0, #0
   187f4:	bne	187fc <flatcc_builder_table_add_union@@Base+0x88>
   187f8:	b	1881c <flatcc_builder_table_add_union@@Base+0xa8>
   187fc:	ldr	r0, [pc, #316]	; 18940 <flatcc_builder_table_add_union@@Base+0x1cc>
   18800:	add	r0, pc, r0
   18804:	ldr	r1, [pc, #312]	; 18944 <flatcc_builder_table_add_union@@Base+0x1d0>
   18808:	add	r1, pc, r1
   1880c:	ldr	r2, [pc, #308]	; 18948 <flatcc_builder_table_add_union@@Base+0x1d4>
   18810:	add	r3, pc, r2
   18814:	movw	r2, #1519	; 0x5ef
   18818:	bl	1298c <__assert_fail@plt>
   1881c:	mvn	r0, #0
   18820:	str	r0, [fp, #-4]
   18824:	b	18928 <flatcc_builder_table_add_union@@Base+0x1b4>
   18828:	ldr	r0, [fp, #-8]
   1882c:	cmp	r0, #0
   18830:	beq	188a0 <flatcc_builder_table_add_union@@Base+0x12c>
   18834:	ldr	r0, [sp, #16]
   18838:	ldr	r1, [sp, #12]
   1883c:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   18840:	str	r0, [sp, #8]
   18844:	ldr	r0, [sp, #8]
   18848:	movw	r1, #0
   1884c:	cmp	r0, r1
   18850:	bne	18894 <flatcc_builder_table_add_union@@Base+0x120>
   18854:	ldr	r0, [sp, #8]
   18858:	movw	r1, #0
   1885c:	cmp	r0, r1
   18860:	beq	18868 <flatcc_builder_table_add_union@@Base+0xf4>
   18864:	b	18888 <flatcc_builder_table_add_union@@Base+0x114>
   18868:	ldr	r0, [pc, #220]	; 1894c <flatcc_builder_table_add_union@@Base+0x1d8>
   1886c:	add	r0, pc, r0
   18870:	ldr	r1, [pc, #216]	; 18950 <flatcc_builder_table_add_union@@Base+0x1dc>
   18874:	add	r1, pc, r1
   18878:	ldr	r2, [pc, #212]	; 18954 <flatcc_builder_table_add_union@@Base+0x1e0>
   1887c:	add	r3, pc, r2
   18880:	movw	r2, #1522	; 0x5f2
   18884:	bl	1298c <__assert_fail@plt>
   18888:	mvn	r0, #0
   1888c:	str	r0, [fp, #-4]
   18890:	b	18928 <flatcc_builder_table_add_union@@Base+0x1b4>
   18894:	ldr	r0, [fp, #-8]
   18898:	ldr	r1, [sp, #8]
   1889c:	str	r0, [r1]
   188a0:	ldr	r0, [sp, #16]
   188a4:	ldr	r1, [sp, #12]
   188a8:	sub	r1, r1, #1
   188ac:	movw	r2, #1
   188b0:	movw	r3, #1
   188b4:	uxth	r3, r3
   188b8:	bl	18a94 <flatcc_builder_table_add@@Base>
   188bc:	str	r0, [sp, #4]
   188c0:	ldr	r0, [sp, #4]
   188c4:	movw	r1, #0
   188c8:	cmp	r0, r1
   188cc:	bne	18910 <flatcc_builder_table_add_union@@Base+0x19c>
   188d0:	ldr	r0, [sp, #4]
   188d4:	movw	r1, #0
   188d8:	cmp	r0, r1
   188dc:	beq	188e4 <flatcc_builder_table_add_union@@Base+0x170>
   188e0:	b	18904 <flatcc_builder_table_add_union@@Base+0x190>
   188e4:	ldr	r0, [pc, #108]	; 18958 <flatcc_builder_table_add_union@@Base+0x1e4>
   188e8:	add	r0, pc, r0
   188ec:	ldr	r1, [pc, #104]	; 1895c <flatcc_builder_table_add_union@@Base+0x1e8>
   188f0:	add	r1, pc, r1
   188f4:	ldr	r2, [pc, #100]	; 18960 <flatcc_builder_table_add_union@@Base+0x1ec>
   188f8:	add	r3, pc, r2
   188fc:	movw	r2, #1526	; 0x5f6
   18900:	bl	1298c <__assert_fail@plt>
   18904:	mvn	r0, #0
   18908:	str	r0, [fp, #-4]
   1890c:	b	18928 <flatcc_builder_table_add_union@@Base+0x1b4>
   18910:	ldrb	r0, [fp, #-12]
   18914:	bl	18bfc <flatcc_builder_table_add@@Base+0x168>
   18918:	ldr	r1, [sp, #4]
   1891c:	strb	r0, [r1]
   18920:	movw	r0, #0
   18924:	str	r0, [fp, #-4]
   18928:	ldr	r0, [fp, #-4]
   1892c:	mov	sp, fp
   18930:	pop	{fp, pc}
   18934:	strdeq	sl, [r0], -r8
   18938:	andeq	r9, r0, r4, asr #23
   1893c:	ldrdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   18940:	andeq	sl, r0, lr, ror #13
   18944:	andeq	r9, r0, r0, ror fp
   18948:	andeq	sl, r0, r6, lsl #13
   1894c:	andeq	sl, r0, r4, lsr #13
   18950:	andeq	r9, r0, r4, lsl #22
   18954:	andeq	sl, r0, sl, lsl r6
   18958:	andeq	sl, r0, r2, lsr r6
   1895c:	andeq	r9, r0, r8, lsl #21
   18960:	muleq	r0, lr, r5

00018964 <flatcc_builder_table_add_offset@@Base>:
   18964:	push	{fp, lr}
   18968:	mov	fp, sp
   1896c:	sub	sp, sp, #8
   18970:	str	r0, [sp, #4]
   18974:	str	r1, [sp]
   18978:	ldr	r0, [sp, #4]
   1897c:	ldr	r0, [r0, #32]
   18980:	ldrh	r0, [r0, #14]
   18984:	cmp	r0, #3
   18988:	bne	18990 <flatcc_builder_table_add_offset@@Base+0x2c>
   1898c:	b	189b0 <flatcc_builder_table_add_offset@@Base+0x4c>
   18990:	ldr	r0, [pc, #212]	; 18a6c <flatcc_builder_table_add_offset@@Base+0x108>
   18994:	add	r0, pc, r0
   18998:	ldr	r1, [pc, #208]	; 18a70 <flatcc_builder_table_add_offset@@Base+0x10c>
   1899c:	add	r1, pc, r1
   189a0:	ldr	r2, [pc, #204]	; 18a74 <flatcc_builder_table_add_offset@@Base+0x110>
   189a4:	add	r3, pc, r2
   189a8:	movw	r2, #1811	; 0x713
   189ac:	bl	1298c <__assert_fail@plt>
   189b0:	ldr	r0, [sp]
   189b4:	cmp	r0, #0
   189b8:	blt	189d0 <flatcc_builder_table_add_offset@@Base+0x6c>
   189bc:	ldr	r0, [sp]
   189c0:	movw	r1, #32764	; 0x7ffc
   189c4:	cmp	r0, r1
   189c8:	bgt	189d0 <flatcc_builder_table_add_offset@@Base+0x6c>
   189cc:	b	189f0 <flatcc_builder_table_add_offset@@Base+0x8c>
   189d0:	ldr	r0, [pc, #160]	; 18a78 <flatcc_builder_table_add_offset@@Base+0x114>
   189d4:	add	r0, pc, r0
   189d8:	ldr	r1, [pc, #156]	; 18a7c <flatcc_builder_table_add_offset@@Base+0x118>
   189dc:	add	r1, pc, r1
   189e0:	ldr	r2, [pc, #152]	; 18a80 <flatcc_builder_table_add_offset@@Base+0x11c>
   189e4:	add	r3, pc, r2
   189e8:	movw	r2, #1812	; 0x714
   189ec:	bl	1298c <__assert_fail@plt>
   189f0:	ldr	r0, [sp, #4]
   189f4:	ldr	r0, [r0, #4]
   189f8:	ldr	r1, [sp]
   189fc:	add	r0, r0, r1, lsl #1
   18a00:	ldrh	r0, [r0]
   18a04:	cmp	r0, #0
   18a08:	beq	18a2c <flatcc_builder_table_add_offset@@Base+0xc8>
   18a0c:	ldr	r0, [pc, #116]	; 18a88 <flatcc_builder_table_add_offset@@Base+0x124>
   18a10:	add	r0, pc, r0
   18a14:	ldr	r1, [pc, #112]	; 18a8c <flatcc_builder_table_add_offset@@Base+0x128>
   18a18:	add	r1, pc, r1
   18a1c:	ldr	r2, [pc, #108]	; 18a90 <flatcc_builder_table_add_offset@@Base+0x12c>
   18a20:	add	r3, pc, r2
   18a24:	movw	r2, #1819	; 0x71b
   18a28:	bl	1298c <__assert_fail@plt>
   18a2c:	ldr	r0, [pc, #80]	; 18a84 <flatcc_builder_table_add_offset@@Base+0x120>
   18a30:	ldr	r1, [sp]
   18a34:	ldr	r2, [sp, #4]
   18a38:	ldr	r2, [r2, #12]
   18a3c:	eor	r1, r1, r2
   18a40:	mul	r1, r1, r0
   18a44:	eor	r1, r1, #4
   18a48:	mul	r0, r1, r0
   18a4c:	ldr	r1, [sp, #4]
   18a50:	str	r0, [r1, #12]
   18a54:	ldr	r0, [sp, #4]
   18a58:	ldr	r1, [sp]
   18a5c:	uxth	r1, r1
   18a60:	bl	19a24 <flatcc_builder_table_add_copy@@Base+0x64>
   18a64:	mov	sp, fp
   18a68:	pop	{fp, pc}
   18a6c:	andeq	sl, r0, r0, lsl r2
   18a70:	ldrdeq	r9, [r0], -ip
   18a74:	strdeq	sl, [r0], -r4
   18a78:	andeq	sl, r0, r4, asr #16
   18a7c:	muleq	r0, ip, r9
   18a80:			; <UNDEFINED> instruction: 0x0000a8b4
   18a84:			; <UNDEFINED> instruction: 0x9e3779b1
   18a88:	andeq	sl, r0, r5, lsr #22
   18a8c:	andeq	r9, r0, r0, ror #18
   18a90:	andeq	sl, r0, r8, ror r8

00018a94 <flatcc_builder_table_add@@Base>:
   18a94:	push	{fp, lr}
   18a98:	mov	fp, sp
   18a9c:	sub	sp, sp, #16
   18aa0:	str	r0, [fp, #-4]
   18aa4:	str	r1, [sp, #8]
   18aa8:	str	r2, [sp, #4]
   18aac:	strh	r3, [sp, #2]
   18ab0:	ldr	r0, [fp, #-4]
   18ab4:	ldr	r0, [r0, #32]
   18ab8:	ldrh	r0, [r0, #14]
   18abc:	cmp	r0, #3
   18ac0:	bne	18ac8 <flatcc_builder_table_add@@Base+0x34>
   18ac4:	b	18ae8 <flatcc_builder_table_add@@Base+0x54>
   18ac8:	ldr	r0, [pc, #260]	; 18bd4 <flatcc_builder_table_add@@Base+0x140>
   18acc:	add	r0, pc, r0
   18ad0:	ldr	r1, [pc, #256]	; 18bd8 <flatcc_builder_table_add@@Base+0x144>
   18ad4:	add	r1, pc, r1
   18ad8:	ldr	r2, [pc, #252]	; 18bdc <flatcc_builder_table_add@@Base+0x148>
   18adc:	add	r3, pc, r2
   18ae0:	movw	r2, #1773	; 0x6ed
   18ae4:	bl	1298c <__assert_fail@plt>
   18ae8:	ldr	r0, [sp, #8]
   18aec:	cmp	r0, #0
   18af0:	blt	18b08 <flatcc_builder_table_add@@Base+0x74>
   18af4:	ldr	r0, [sp, #8]
   18af8:	movw	r1, #32764	; 0x7ffc
   18afc:	cmp	r0, r1
   18b00:	bgt	18b08 <flatcc_builder_table_add@@Base+0x74>
   18b04:	b	18b28 <flatcc_builder_table_add@@Base+0x94>
   18b08:	ldr	r0, [pc, #208]	; 18be0 <flatcc_builder_table_add@@Base+0x14c>
   18b0c:	add	r0, pc, r0
   18b10:	ldr	r1, [pc, #204]	; 18be4 <flatcc_builder_table_add@@Base+0x150>
   18b14:	add	r1, pc, r1
   18b18:	ldr	r2, [pc, #200]	; 18be8 <flatcc_builder_table_add@@Base+0x154>
   18b1c:	add	r3, pc, r2
   18b20:	movw	r2, #1774	; 0x6ee
   18b24:	bl	1298c <__assert_fail@plt>
   18b28:	ldrh	r0, [sp, #2]
   18b2c:	ldr	r1, [fp, #-4]
   18b30:	ldrh	r1, [r1, #130]	; 0x82
   18b34:	cmp	r0, r1
   18b38:	ble	18b48 <flatcc_builder_table_add@@Base+0xb4>
   18b3c:	ldrh	r0, [sp, #2]
   18b40:	ldr	r1, [fp, #-4]
   18b44:	strh	r0, [r1, #130]	; 0x82
   18b48:	ldr	r0, [fp, #-4]
   18b4c:	ldr	r0, [r0, #4]
   18b50:	ldr	r1, [sp, #8]
   18b54:	add	r0, r0, r1, lsl #1
   18b58:	ldrh	r0, [r0]
   18b5c:	cmp	r0, #0
   18b60:	beq	18b84 <flatcc_builder_table_add@@Base+0xf0>
   18b64:	ldr	r0, [pc, #132]	; 18bf0 <flatcc_builder_table_add@@Base+0x15c>
   18b68:	add	r0, pc, r0
   18b6c:	ldr	r1, [pc, #128]	; 18bf4 <flatcc_builder_table_add@@Base+0x160>
   18b70:	add	r1, pc, r1
   18b74:	ldr	r2, [pc, #124]	; 18bf8 <flatcc_builder_table_add@@Base+0x164>
   18b78:	add	r3, pc, r2
   18b7c:	movw	r2, #1784	; 0x6f8
   18b80:	bl	1298c <__assert_fail@plt>
   18b84:	ldr	r0, [pc, #96]	; 18bec <flatcc_builder_table_add@@Base+0x158>
   18b88:	ldr	r1, [sp, #8]
   18b8c:	ldr	r2, [fp, #-4]
   18b90:	ldr	r2, [r2, #12]
   18b94:	eor	r1, r1, r2
   18b98:	mul	r1, r1, r0
   18b9c:	ldr	r2, [sp, #4]
   18ba0:	eor	r1, r1, r2
   18ba4:	mul	r0, r1, r0
   18ba8:	ldr	r1, [fp, #-4]
   18bac:	str	r0, [r1, #12]
   18bb0:	ldr	r0, [fp, #-4]
   18bb4:	ldr	r1, [sp, #4]
   18bb8:	ldrh	r2, [sp, #2]
   18bbc:	ldr	r3, [sp, #8]
   18bc0:	uxth	r2, r2
   18bc4:	uxth	r3, r3
   18bc8:	bl	19840 <flatcc_builder_string_len@@Base+0x1c>
   18bcc:	mov	sp, fp
   18bd0:	pop	{fp, pc}
   18bd4:	ldrdeq	sl, [r0], -r8
   18bd8:	andeq	r9, r0, r4, lsr #17
   18bdc:	strdeq	sl, [r0], -r2
   18be0:	andeq	sl, r0, ip, lsl #14
   18be4:	andeq	r9, r0, r4, ror #16
   18be8:			; <UNDEFINED> instruction: 0x0000a6b2
   18bec:			; <UNDEFINED> instruction: 0x9e3779b1
   18bf0:	andeq	sl, r0, sp, asr #19
   18bf4:	andeq	r9, r0, r8, lsl #16
   18bf8:	andeq	sl, r0, r6, asr r6
   18bfc:	sub	sp, sp, #4
   18c00:	strb	r0, [sp, #3]
   18c04:	ldrb	r0, [sp, #3]
   18c08:	add	sp, sp, #4
   18c0c:	bx	lr

00018c10 <flatcc_builder_table_add_union_vector@@Base>:
   18c10:	push	{fp, lr}
   18c14:	mov	fp, sp
   18c18:	sub	sp, sp, #24
   18c1c:	str	r2, [sp, #12]
   18c20:	str	r3, [sp, #16]
   18c24:	str	r0, [sp, #8]
   18c28:	str	r1, [sp, #4]
   18c2c:	ldr	r0, [sp, #8]
   18c30:	ldr	r0, [r0, #32]
   18c34:	ldrh	r0, [r0, #14]
   18c38:	cmp	r0, #3
   18c3c:	bne	18c44 <flatcc_builder_table_add_union_vector@@Base+0x34>
   18c40:	b	18c64 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18c44:	ldr	r0, [pc, #420]	; 18df0 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18c48:	add	r0, pc, r0
   18c4c:	ldr	r1, [pc, #416]	; 18df4 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18c50:	add	r1, pc, r1
   18c54:	ldr	r2, [pc, #412]	; 18df8 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18c58:	add	r3, pc, r2
   18c5c:	movw	r2, #1536	; 0x600
   18c60:	bl	1298c <__assert_fail@plt>
   18c64:	ldr	r0, [sp, #12]
   18c68:	cmp	r0, #0
   18c6c:	movw	r0, #0
   18c70:	moveq	r0, #1
   18c74:	and	r0, r0, #1
   18c78:	ldr	r1, [sp, #16]
   18c7c:	cmp	r1, #0
   18c80:	movw	r1, #0
   18c84:	moveq	r1, #1
   18c88:	and	r1, r1, #1
   18c8c:	cmp	r0, r1
   18c90:	beq	18cf4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18c94:	ldr	r0, [sp, #12]
   18c98:	cmp	r0, #0
   18c9c:	movw	r0, #0
   18ca0:	moveq	r0, #1
   18ca4:	and	r0, r0, #1
   18ca8:	ldr	r1, [sp, #16]
   18cac:	cmp	r1, #0
   18cb0:	movw	r1, #0
   18cb4:	moveq	r1, #1
   18cb8:	and	r1, r1, #1
   18cbc:	cmp	r0, r1
   18cc0:	bne	18cc8 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   18cc4:	b	18ce8 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18cc8:	ldr	r0, [pc, #300]	; 18dfc <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18ccc:	add	r0, pc, r0
   18cd0:	ldr	r1, [pc, #296]	; 18e00 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18cd4:	add	r1, pc, r1
   18cd8:	ldr	r2, [pc, #292]	; 18e04 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18cdc:	add	r3, pc, r2
   18ce0:	movw	r2, #1537	; 0x601
   18ce4:	bl	1298c <__assert_fail@plt>
   18ce8:	mvn	r0, #0
   18cec:	str	r0, [fp, #-4]
   18cf0:	b	18de4 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18cf4:	ldr	r0, [sp, #12]
   18cf8:	cmp	r0, #0
   18cfc:	beq	18ddc <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   18d00:	ldr	r0, [sp, #8]
   18d04:	ldr	r1, [sp, #4]
   18d08:	sub	r1, r1, #1
   18d0c:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   18d10:	str	r0, [sp]
   18d14:	ldr	r0, [sp]
   18d18:	movw	r1, #0
   18d1c:	cmp	r0, r1
   18d20:	bne	18d64 <flatcc_builder_table_add_union_vector@@Base+0x154>
   18d24:	ldr	r0, [sp]
   18d28:	movw	r1, #0
   18d2c:	cmp	r0, r1
   18d30:	beq	18d38 <flatcc_builder_table_add_union_vector@@Base+0x128>
   18d34:	b	18d58 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18d38:	ldr	r0, [pc, #200]	; 18e08 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18d3c:	add	r0, pc, r0
   18d40:	ldr	r1, [pc, #196]	; 18e0c <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18d44:	add	r1, pc, r1
   18d48:	ldr	r2, [pc, #192]	; 18e10 <flatcc_builder_table_add_union_vector@@Base+0x200>
   18d4c:	add	r3, pc, r2
   18d50:	movw	r2, #1540	; 0x604
   18d54:	bl	1298c <__assert_fail@plt>
   18d58:	mvn	r0, #0
   18d5c:	str	r0, [fp, #-4]
   18d60:	b	18de4 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18d64:	ldr	r0, [sp, #12]
   18d68:	ldr	r1, [sp]
   18d6c:	str	r0, [r1]
   18d70:	ldr	r0, [sp, #8]
   18d74:	ldr	r1, [sp, #4]
   18d78:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   18d7c:	str	r0, [sp]
   18d80:	ldr	r0, [sp]
   18d84:	movw	r1, #0
   18d88:	cmp	r0, r1
   18d8c:	bne	18dd0 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   18d90:	ldr	r0, [sp]
   18d94:	movw	r1, #0
   18d98:	cmp	r0, r1
   18d9c:	beq	18da4 <flatcc_builder_table_add_union_vector@@Base+0x194>
   18da0:	b	18dc4 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18da4:	ldr	r0, [pc, #104]	; 18e14 <flatcc_builder_table_add_union_vector@@Base+0x204>
   18da8:	add	r0, pc, r0
   18dac:	ldr	r1, [pc, #100]	; 18e18 <flatcc_builder_table_add_union_vector@@Base+0x208>
   18db0:	add	r1, pc, r1
   18db4:	ldr	r2, [pc, #96]	; 18e1c <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18db8:	add	r3, pc, r2
   18dbc:	movw	r2, #1544	; 0x608
   18dc0:	bl	1298c <__assert_fail@plt>
   18dc4:	mvn	r0, #0
   18dc8:	str	r0, [fp, #-4]
   18dcc:	b	18de4 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18dd0:	ldr	r0, [sp, #16]
   18dd4:	ldr	r1, [sp]
   18dd8:	str	r0, [r1]
   18ddc:	movw	r0, #0
   18de0:	str	r0, [fp, #-4]
   18de4:	ldr	r0, [fp, #-4]
   18de8:	mov	sp, fp
   18dec:	pop	{fp, pc}
   18df0:	andeq	r9, r0, ip, asr pc
   18df4:	andeq	r9, r0, r8, lsr #14
   18df8:	andeq	sl, r0, lr, asr #5
   18dfc:			; <UNDEFINED> instruction: 0x0000a2bd
   18e00:	andeq	r9, r0, r4, lsr #13
   18e04:	andeq	sl, r0, sl, asr #4
   18e08:	ldrdeq	sl, [r0], -r4
   18e0c:	andeq	r9, r0, r4, lsr r6
   18e10:	ldrdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   18e14:	andeq	sl, r0, r8, ror #2
   18e18:	andeq	r9, r0, r8, asr #11
   18e1c:	andeq	sl, r0, lr, ror #2

00018e20 <flatcc_builder_create_union_vector@@Base>:
   18e20:	push	{fp, lr}
   18e24:	mov	fp, sp
   18e28:	sub	sp, sp, #48	; 0x30
   18e2c:	str	r1, [fp, #-4]
   18e30:	str	r2, [fp, #-8]
   18e34:	str	r3, [fp, #-12]
   18e38:	mov	r1, r0
   18e3c:	str	r0, [sp, #12]
   18e40:	mov	r0, r1
   18e44:	movw	r1, #0
   18e48:	and	r1, r1, #255	; 0xff
   18e4c:	movw	r2, #8
   18e50:	bl	1295c <memset@plt>
   18e54:	ldr	r0, [fp, #-4]
   18e58:	bl	16e5c <flatcc_builder_start_offset_vector@@Base>
   18e5c:	cmp	r0, #0
   18e60:	beq	18e68 <flatcc_builder_create_union_vector@@Base+0x48>
   18e64:	b	18f4c <flatcc_builder_create_union_vector@@Base+0x12c>
   18e68:	ldr	r0, [fp, #-4]
   18e6c:	ldr	r1, [fp, #-12]
   18e70:	bl	165f0 <flatcc_builder_extend_offset_vector@@Base>
   18e74:	movw	r1, #0
   18e78:	cmp	r1, r0
   18e7c:	bne	18e84 <flatcc_builder_create_union_vector@@Base+0x64>
   18e80:	b	18f4c <flatcc_builder_create_union_vector@@Base+0x12c>
   18e84:	ldr	r0, [fp, #-4]
   18e88:	ldr	r1, [fp, #-12]
   18e8c:	mov	r2, r1
   18e90:	str	r2, [sp, #8]
   18e94:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   18e98:	str	r0, [fp, #-16]
   18e9c:	movw	r1, #0
   18ea0:	cmp	r1, r0
   18ea4:	bne	18eac <flatcc_builder_create_union_vector@@Base+0x8c>
   18ea8:	b	18f4c <flatcc_builder_create_union_vector@@Base+0x12c>
   18eac:	ldr	r0, [fp, #-4]
   18eb0:	bl	18740 <flatcc_builder_offset_vector_edit@@Base>
   18eb4:	str	r0, [fp, #-20]	; 0xffffffec
   18eb8:	movw	r0, #0
   18ebc:	str	r0, [sp, #24]
   18ec0:	ldr	r0, [sp, #24]
   18ec4:	ldr	r1, [fp, #-12]
   18ec8:	cmp	r0, r1
   18ecc:	bcs	18f10 <flatcc_builder_create_union_vector@@Base+0xf0>
   18ed0:	ldr	r0, [fp, #-8]
   18ed4:	ldr	r1, [sp, #24]
   18ed8:	ldrb	r0, [r0, r1, lsl #3]
   18edc:	ldr	r2, [fp, #-16]
   18ee0:	strb	r0, [r2, r1]
   18ee4:	ldr	r0, [fp, #-8]
   18ee8:	ldr	r1, [sp, #24]
   18eec:	add	r0, r0, r1, lsl #3
   18ef0:	ldr	r0, [r0, #4]
   18ef4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18ef8:	add	r1, r2, r1, lsl #2
   18efc:	str	r0, [r1]
   18f00:	ldr	r0, [sp, #24]
   18f04:	add	r0, r0, #1
   18f08:	str	r0, [sp, #24]
   18f0c:	b	18ec0 <flatcc_builder_create_union_vector@@Base+0xa0>
   18f10:	ldr	r1, [fp, #-4]
   18f14:	ldr	r2, [fp, #-16]
   18f18:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f1c:	ldr	r0, [fp, #-12]
   18f20:	mov	ip, sp
   18f24:	str	r0, [ip]
   18f28:	add	r0, sp, #16
   18f2c:	bl	18f54 <flatcc_builder_create_union_vector_direct@@Base>
   18f30:	ldr	r0, [sp, #16]
   18f34:	ldr	r1, [sp, #12]
   18f38:	str	r0, [r1]
   18f3c:	ldr	r0, [sp, #20]
   18f40:	str	r0, [r1, #4]
   18f44:	ldr	r0, [fp, #-4]
   18f48:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   18f4c:	mov	sp, fp
   18f50:	pop	{fp, pc}

00018f54 <flatcc_builder_create_union_vector_direct@@Base>:
   18f54:	push	{fp, lr}
   18f58:	mov	fp, sp
   18f5c:	sub	sp, sp, #32
   18f60:	ldr	ip, [fp, #8]
   18f64:	str	r1, [fp, #-4]
   18f68:	str	r2, [fp, #-8]
   18f6c:	str	r3, [fp, #-12]
   18f70:	mov	r1, r0
   18f74:	str	r0, [sp, #16]
   18f78:	mov	r0, r1
   18f7c:	movw	r1, #0
   18f80:	and	r1, r1, #255	; 0xff
   18f84:	movw	r2, #8
   18f88:	str	ip, [sp, #12]
   18f8c:	bl	1295c <memset@plt>
   18f90:	ldr	r0, [fp, #-4]
   18f94:	ldr	r1, [fp, #-12]
   18f98:	ldr	r2, [fp, #8]
   18f9c:	ldr	r3, [fp, #-8]
   18fa0:	bl	18398 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   18fa4:	ldr	r1, [sp, #16]
   18fa8:	str	r0, [r1, #4]
   18fac:	movw	r2, #0
   18fb0:	cmp	r2, r0
   18fb4:	bne	18fbc <flatcc_builder_create_union_vector_direct@@Base+0x68>
   18fb8:	b	19000 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18fbc:	ldr	r0, [fp, #-4]
   18fc0:	ldr	r1, [fp, #-8]
   18fc4:	ldr	r2, [fp, #8]
   18fc8:	movw	r3, #1
   18fcc:	movw	ip, #1
   18fd0:	uxth	ip, ip
   18fd4:	str	ip, [sp]
   18fd8:	mvn	ip, #0
   18fdc:	str	ip, [sp, #4]
   18fe0:	bl	1808c <flatcc_builder_create_vector@@Base>
   18fe4:	ldr	r1, [sp, #16]
   18fe8:	str	r0, [r1]
   18fec:	movw	r2, #0
   18ff0:	cmp	r2, r0
   18ff4:	bne	18ffc <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   18ff8:	b	19000 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18ffc:	b	19000 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   19000:	mov	sp, fp
   19004:	pop	{fp, pc}

00019008 <flatcc_builder_start_union_vector@@Base>:
   19008:	push	{fp, lr}
   1900c:	mov	fp, sp
   19010:	sub	sp, sp, #8
   19014:	str	r0, [sp]
   19018:	ldr	r0, [sp]
   1901c:	movw	r1, #4
   19020:	uxth	r1, r1
   19024:	bl	15c40 <flatcc_builder_start_buffer@@Base+0x178>
   19028:	cmp	r0, #0
   1902c:	beq	1903c <flatcc_builder_start_union_vector@@Base+0x34>
   19030:	mvn	r0, #0
   19034:	str	r0, [sp, #4]
   19038:	b	19080 <flatcc_builder_start_union_vector@@Base+0x78>
   1903c:	ldr	r0, [sp]
   19040:	ldr	r0, [r0, #32]
   19044:	movw	r1, #8
   19048:	str	r1, [r0, #16]
   1904c:	ldr	r0, [sp]
   19050:	ldr	r0, [r0, #32]
   19054:	movw	r1, #0
   19058:	str	r1, [r0, #20]
   1905c:	ldr	r0, [sp]
   19060:	ldr	r0, [r0, #32]
   19064:	movw	r1, #7
   19068:	strh	r1, [r0, #14]
   1906c:	ldr	r0, [sp]
   19070:	mvn	r1, #3
   19074:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   19078:	movw	r0, #0
   1907c:	str	r0, [sp, #4]
   19080:	ldr	r0, [sp, #4]
   19084:	mov	sp, fp
   19088:	pop	{fp, pc}

0001908c <flatcc_builder_end_union_vector@@Base>:
   1908c:	push	{fp, lr}
   19090:	mov	fp, sp
   19094:	sub	sp, sp, #40	; 0x28
   19098:	str	r1, [fp, #-4]
   1909c:	mov	r1, r0
   190a0:	str	r0, [sp, #4]
   190a4:	mov	r0, r1
   190a8:	movw	r1, #0
   190ac:	and	r1, r1, #255	; 0xff
   190b0:	movw	r2, #8
   190b4:	bl	1295c <memset@plt>
   190b8:	ldr	r0, [fp, #-4]
   190bc:	ldr	r0, [r0, #32]
   190c0:	ldrh	r0, [r0, #14]
   190c4:	cmp	r0, #7
   190c8:	bne	190d0 <flatcc_builder_end_union_vector@@Base+0x44>
   190cc:	b	190f0 <flatcc_builder_end_union_vector@@Base+0x64>
   190d0:	ldr	r0, [pc, #260]	; 191dc <flatcc_builder_end_union_vector@@Base+0x150>
   190d4:	add	r0, pc, r0
   190d8:	ldr	r1, [pc, #256]	; 191e0 <flatcc_builder_end_union_vector@@Base+0x154>
   190dc:	add	r1, pc, r1
   190e0:	ldr	r2, [pc, #252]	; 191e4 <flatcc_builder_end_union_vector@@Base+0x158>
   190e4:	add	r3, pc, r2
   190e8:	movw	r2, #1617	; 0x651
   190ec:	bl	1298c <__assert_fail@plt>
   190f0:	ldr	r0, [fp, #-4]
   190f4:	bl	191e8 <flatcc_builder_union_vector_count@@Base>
   190f8:	str	r0, [sp, #16]
   190fc:	ldr	r0, [fp, #-4]
   19100:	ldr	r1, [sp, #16]
   19104:	movw	r2, #5
   19108:	mul	r1, r1, r2
   1910c:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   19110:	str	r0, [fp, #-16]
   19114:	movw	r1, #0
   19118:	cmp	r1, r0
   1911c:	bne	19124 <flatcc_builder_end_union_vector@@Base+0x98>
   19120:	b	191d4 <flatcc_builder_end_union_vector@@Base+0x148>
   19124:	ldr	r0, [fp, #-16]
   19128:	ldr	r1, [sp, #16]
   1912c:	add	r0, r0, r1, lsl #2
   19130:	str	r0, [fp, #-8]
   19134:	ldr	r0, [fp, #-4]
   19138:	bl	19204 <flatcc_builder_union_vector_edit@@Base>
   1913c:	str	r0, [fp, #-12]
   19140:	movw	r0, #0
   19144:	str	r0, [sp, #20]
   19148:	ldr	r0, [sp, #20]
   1914c:	ldr	r1, [sp, #16]
   19150:	cmp	r0, r1
   19154:	bcs	19198 <flatcc_builder_end_union_vector@@Base+0x10c>
   19158:	ldr	r0, [fp, #-12]
   1915c:	ldr	r1, [sp, #20]
   19160:	ldrb	r0, [r0, r1, lsl #3]
   19164:	ldr	r2, [fp, #-8]
   19168:	strb	r0, [r2, r1]
   1916c:	ldr	r0, [fp, #-12]
   19170:	ldr	r1, [sp, #20]
   19174:	add	r0, r0, r1, lsl #3
   19178:	ldr	r0, [r0, #4]
   1917c:	ldr	r2, [fp, #-16]
   19180:	add	r1, r2, r1, lsl #2
   19184:	str	r0, [r1]
   19188:	ldr	r0, [sp, #20]
   1918c:	add	r0, r0, #1
   19190:	str	r0, [sp, #20]
   19194:	b	19148 <flatcc_builder_end_union_vector@@Base+0xbc>
   19198:	ldr	r1, [fp, #-4]
   1919c:	ldr	r2, [fp, #-8]
   191a0:	ldr	r3, [fp, #-16]
   191a4:	ldr	r0, [sp, #16]
   191a8:	mov	ip, sp
   191ac:	str	r0, [ip]
   191b0:	add	r0, sp, #8
   191b4:	bl	18f54 <flatcc_builder_create_union_vector_direct@@Base>
   191b8:	ldr	r0, [sp, #8]
   191bc:	ldr	r1, [sp, #4]
   191c0:	str	r0, [r1]
   191c4:	ldr	r0, [sp, #12]
   191c8:	str	r0, [r1, #4]
   191cc:	ldr	r0, [fp, #-4]
   191d0:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   191d4:	mov	sp, fp
   191d8:	pop	{fp, pc}
   191dc:	ldrdeq	r9, [r0], -sp
   191e0:	muleq	r0, ip, r2
   191e4:	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>

000191e8 <flatcc_builder_union_vector_count@@Base>:
   191e8:	sub	sp, sp, #4
   191ec:	str	r0, [sp]
   191f0:	ldr	r0, [sp]
   191f4:	ldr	r0, [r0, #32]
   191f8:	ldr	r0, [r0, #20]
   191fc:	add	sp, sp, #4
   19200:	bx	lr

00019204 <flatcc_builder_union_vector_edit@@Base>:
   19204:	sub	sp, sp, #4
   19208:	str	r0, [sp]
   1920c:	ldr	r0, [sp]
   19210:	ldr	r0, [r0, #16]
   19214:	add	sp, sp, #4
   19218:	bx	lr

0001921c <flatcc_builder_extend_union_vector@@Base>:
   1921c:	push	{fp, lr}
   19220:	mov	fp, sp
   19224:	sub	sp, sp, #16
   19228:	ldr	r2, [pc, #68]	; 19274 <flatcc_builder_extend_union_vector@@Base+0x58>
   1922c:	str	r0, [sp, #8]
   19230:	str	r1, [sp, #4]
   19234:	ldr	r0, [sp, #8]
   19238:	ldr	r1, [sp, #4]
   1923c:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   19240:	cmp	r0, #0
   19244:	beq	19254 <flatcc_builder_extend_union_vector@@Base+0x38>
   19248:	movw	r0, #0
   1924c:	str	r0, [fp, #-4]
   19250:	b	19268 <flatcc_builder_extend_union_vector@@Base+0x4c>
   19254:	ldr	r0, [sp, #8]
   19258:	ldr	r1, [sp, #4]
   1925c:	lsl	r1, r1, #3
   19260:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   19264:	str	r0, [fp, #-4]
   19268:	ldr	r0, [fp, #-4]
   1926c:	mov	sp, fp
   19270:	pop	{fp, pc}
   19274:	svcne	0x00ffffff

00019278 <flatcc_builder_truncate_union_vector@@Base>:
   19278:	push	{fp, lr}
   1927c:	mov	fp, sp
   19280:	sub	sp, sp, #16
   19284:	str	r0, [sp, #8]
   19288:	str	r1, [sp, #4]
   1928c:	ldr	r0, [sp, #8]
   19290:	ldr	r0, [r0, #32]
   19294:	ldrh	r0, [r0, #14]
   19298:	cmp	r0, #7
   1929c:	bne	192a4 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   192a0:	b	192c4 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   192a4:	ldr	r0, [pc, #192]	; 1936c <flatcc_builder_truncate_union_vector@@Base+0xf4>
   192a8:	add	r0, pc, r0
   192ac:	ldr	r1, [pc, #188]	; 19370 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   192b0:	add	r1, pc, r1
   192b4:	ldr	r2, [pc, #184]	; 19374 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   192b8:	add	r3, pc, r2
   192bc:	movw	r2, #1665	; 0x681
   192c0:	bl	1298c <__assert_fail@plt>
   192c4:	ldr	r0, [sp, #8]
   192c8:	ldr	r0, [r0, #32]
   192cc:	ldr	r0, [r0, #20]
   192d0:	ldr	r1, [sp, #4]
   192d4:	cmp	r0, r1
   192d8:	bcs	19324 <flatcc_builder_truncate_union_vector@@Base+0xac>
   192dc:	ldr	r0, [sp, #8]
   192e0:	ldr	r0, [r0, #32]
   192e4:	ldr	r0, [r0, #20]
   192e8:	ldr	r1, [sp, #4]
   192ec:	cmp	r0, r1
   192f0:	bcc	192f8 <flatcc_builder_truncate_union_vector@@Base+0x80>
   192f4:	b	19318 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   192f8:	ldr	r0, [pc, #120]	; 19378 <flatcc_builder_truncate_union_vector@@Base+0x100>
   192fc:	add	r0, pc, r0
   19300:	ldr	r1, [pc, #116]	; 1937c <flatcc_builder_truncate_union_vector@@Base+0x104>
   19304:	add	r1, pc, r1
   19308:	ldr	r2, [pc, #112]	; 19380 <flatcc_builder_truncate_union_vector@@Base+0x108>
   1930c:	add	r3, pc, r2
   19310:	movw	r2, #1666	; 0x682
   19314:	bl	1298c <__assert_fail@plt>
   19318:	mvn	r0, #0
   1931c:	str	r0, [fp, #-4]
   19320:	b	19360 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   19324:	ldr	r0, [sp, #4]
   19328:	ldr	r1, [sp, #8]
   1932c:	ldr	r1, [r1, #32]
   19330:	ldr	r2, [r1, #20]
   19334:	sub	r0, r2, r0
   19338:	str	r0, [r1, #20]
   1933c:	ldr	r0, [sp, #8]
   19340:	ldr	r1, [sp, #8]
   19344:	ldr	r1, [r1, #32]
   19348:	ldr	r1, [r1, #16]
   1934c:	ldr	r2, [sp, #4]
   19350:	mul	r1, r1, r2
   19354:	bl	16b20 <flatcc_builder_truncate_vector@@Base+0x10c>
   19358:	movw	r0, #0
   1935c:	str	r0, [fp, #-4]
   19360:	ldr	r0, [fp, #-4]
   19364:	mov	sp, fp
   19368:	pop	{fp, pc}
   1936c:	andeq	r9, r0, r9, lsl #26
   19370:	andeq	r9, r0, r8, asr #1
   19374:	andeq	r9, r0, lr, ror sp
   19378:	andeq	r9, r0, r9, lsl r7
   1937c:	andeq	r9, r0, r4, ror r0
   19380:	andeq	r9, r0, sl, lsr #26

00019384 <flatcc_builder_union_vector_push@@Base>:
   19384:	push	{fp, lr}
   19388:	mov	fp, sp
   1938c:	sub	sp, sp, #24
   19390:	str	r1, [sp, #12]
   19394:	str	r2, [sp, #16]
   19398:	str	r0, [sp, #8]
   1939c:	ldr	r0, [sp, #8]
   193a0:	ldr	r0, [r0, #32]
   193a4:	ldrh	r0, [r0, #14]
   193a8:	cmp	r0, #7
   193ac:	bne	193b4 <flatcc_builder_union_vector_push@@Base+0x30>
   193b0:	b	193d4 <flatcc_builder_union_vector_push@@Base+0x50>
   193b4:	ldr	r0, [pc, #160]	; 1945c <flatcc_builder_union_vector_push@@Base+0xd8>
   193b8:	add	r0, pc, r0
   193bc:	ldr	r1, [pc, #156]	; 19460 <flatcc_builder_union_vector_push@@Base+0xdc>
   193c0:	add	r1, pc, r1
   193c4:	ldr	r2, [pc, #152]	; 19464 <flatcc_builder_union_vector_push@@Base+0xe0>
   193c8:	add	r3, pc, r2
   193cc:	movw	r2, #1677	; 0x68d
   193d0:	bl	1298c <__assert_fail@plt>
   193d4:	ldr	r0, [pc, #140]	; 19468 <flatcc_builder_union_vector_push@@Base+0xe4>
   193d8:	ldr	r1, [sp, #8]
   193dc:	ldr	r1, [r1, #32]
   193e0:	ldr	r1, [r1, #20]
   193e4:	cmp	r1, r0
   193e8:	bne	193f8 <flatcc_builder_union_vector_push@@Base+0x74>
   193ec:	movw	r0, #0
   193f0:	str	r0, [fp, #-4]
   193f4:	b	19450 <flatcc_builder_union_vector_push@@Base+0xcc>
   193f8:	ldr	r0, [sp, #8]
   193fc:	ldr	r0, [r0, #32]
   19400:	ldr	r1, [r0, #20]
   19404:	add	r1, r1, #1
   19408:	str	r1, [r0, #20]
   1940c:	ldr	r0, [sp, #8]
   19410:	movw	r1, #8
   19414:	bl	16128 <flatcc_builder_start_struct@@Base+0xfc>
   19418:	str	r0, [sp, #4]
   1941c:	movw	r1, #0
   19420:	cmp	r1, r0
   19424:	bne	19434 <flatcc_builder_union_vector_push@@Base+0xb0>
   19428:	movw	r0, #0
   1942c:	str	r0, [fp, #-4]
   19430:	b	19450 <flatcc_builder_union_vector_push@@Base+0xcc>
   19434:	ldr	r0, [sp, #4]
   19438:	ldr	r1, [sp, #12]
   1943c:	str	r1, [r0]
   19440:	ldr	r1, [sp, #16]
   19444:	str	r1, [r0, #4]
   19448:	ldr	r0, [sp, #4]
   1944c:	str	r0, [fp, #-4]
   19450:	ldr	r0, [fp, #-4]
   19454:	mov	sp, fp
   19458:	pop	{fp, pc}
   1945c:	strdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   19460:			; <UNDEFINED> instruction: 0x00008fb8
   19464:			; <UNDEFINED> instruction: 0x00009cb3
   19468:	svcne	0x00ffffff

0001946c <flatcc_builder_append_union_vector@@Base>:
   1946c:	push	{fp, lr}
   19470:	mov	fp, sp
   19474:	sub	sp, sp, #16
   19478:	str	r0, [sp, #8]
   1947c:	str	r1, [sp, #4]
   19480:	str	r2, [sp]
   19484:	ldr	r0, [sp, #8]
   19488:	ldr	r0, [r0, #32]
   1948c:	ldrh	r0, [r0, #14]
   19490:	cmp	r0, #7
   19494:	bne	1949c <flatcc_builder_append_union_vector@@Base+0x30>
   19498:	b	194bc <flatcc_builder_append_union_vector@@Base+0x50>
   1949c:	ldr	r0, [pc, #96]	; 19504 <flatcc_builder_append_union_vector@@Base+0x98>
   194a0:	add	r0, pc, r0
   194a4:	ldr	r1, [pc, #92]	; 19508 <flatcc_builder_append_union_vector@@Base+0x9c>
   194a8:	add	r1, pc, r1
   194ac:	ldr	r2, [pc, #88]	; 1950c <flatcc_builder_append_union_vector@@Base+0xa0>
   194b0:	add	r3, pc, r2
   194b4:	movw	r2, #1692	; 0x69c
   194b8:	bl	1298c <__assert_fail@plt>
   194bc:	ldr	r2, [pc, #76]	; 19510 <flatcc_builder_append_union_vector@@Base+0xa4>
   194c0:	ldr	r0, [sp, #8]
   194c4:	ldr	r1, [sp]
   194c8:	bl	162ec <flatcc_builder_extend_vector@@Base+0x6c>
   194cc:	cmp	r0, #0
   194d0:	beq	194e0 <flatcc_builder_append_union_vector@@Base+0x74>
   194d4:	movw	r0, #0
   194d8:	str	r0, [fp, #-4]
   194dc:	b	194f8 <flatcc_builder_append_union_vector@@Base+0x8c>
   194e0:	ldr	r0, [sp, #8]
   194e4:	ldr	r1, [sp, #4]
   194e8:	ldr	r2, [sp]
   194ec:	lsl	r2, r2, #3
   194f0:	bl	164d4 <flatcc_builder_vector_push@@Base+0x110>
   194f4:	str	r0, [fp, #-4]
   194f8:	ldr	r0, [fp, #-4]
   194fc:	mov	sp, fp
   19500:	pop	{fp, pc}
   19504:	andeq	r9, r0, r1, lsl fp
   19508:	ldrdeq	r8, [r0], -r0
   1950c:	andeq	r9, r0, r8, lsr ip
   19510:	svcne	0x00ffffff

00019514 <flatcc_builder_create_string@@Base>:
   19514:	push	{fp, lr}
   19518:	mov	fp, sp
   1951c:	sub	sp, sp, #96	; 0x60
   19520:	str	r0, [fp, #-8]
   19524:	str	r1, [fp, #-12]
   19528:	str	r2, [fp, #-16]
   1952c:	ldr	r0, [fp, #-16]
   19530:	cmn	r0, #1
   19534:	bls	19544 <flatcc_builder_create_string@@Base+0x30>
   19538:	movw	r0, #0
   1953c:	str	r0, [fp, #-4]
   19540:	b	19660 <flatcc_builder_create_string@@Base+0x14c>
   19544:	ldr	r0, [fp, #-16]
   19548:	bl	15468 <flatcc_builder_embed_buffer@@Base+0x388>
   1954c:	str	r0, [fp, #-24]	; 0xffffffe8
   19550:	ldr	r0, [fp, #-8]
   19554:	ldr	r1, [fp, #-16]
   19558:	add	r1, r1, #1
   1955c:	mov	r2, #4
   19560:	bl	15434 <flatcc_builder_embed_buffer@@Base+0x354>
   19564:	add	r0, r0, #1
   19568:	str	r0, [fp, #-20]	; 0xffffffec
   1956c:	mov	r0, #0
   19570:	str	r0, [sp]
   19574:	str	r0, [sp, #4]
   19578:	ldr	r0, [sp]
   1957c:	add	r0, r0, #4
   19580:	str	r0, [sp]
   19584:	mov	r0, sp
   19588:	add	r0, r0, #8
   1958c:	ldr	r1, [sp, #4]
   19590:	sub	r2, fp, #24
   19594:	str	r2, [r0, r1, lsl #3]
   19598:	ldr	r1, [sp, #4]
   1959c:	add	r0, r0, r1, lsl #3
   195a0:	movw	r1, #4
   195a4:	str	r1, [r0, #4]
   195a8:	ldr	r0, [sp, #4]
   195ac:	add	r0, r0, #1
   195b0:	str	r0, [sp, #4]
   195b4:	ldr	r0, [fp, #-16]
   195b8:	cmp	r0, #0
   195bc:	bls	19600 <flatcc_builder_create_string@@Base+0xec>
   195c0:	ldr	r0, [fp, #-16]
   195c4:	ldr	r1, [sp]
   195c8:	add	r0, r1, r0
   195cc:	str	r0, [sp]
   195d0:	ldr	r0, [fp, #-12]
   195d4:	mov	r1, sp
   195d8:	add	r1, r1, #8
   195dc:	ldr	r2, [sp, #4]
   195e0:	str	r0, [r1, r2, lsl #3]
   195e4:	ldr	r0, [fp, #-16]
   195e8:	ldr	r2, [sp, #4]
   195ec:	add	r1, r1, r2, lsl #3
   195f0:	str	r0, [r1, #4]
   195f4:	ldr	r0, [sp, #4]
   195f8:	add	r0, r0, #1
   195fc:	str	r0, [sp, #4]
   19600:	ldr	r0, [fp, #-20]	; 0xffffffec
   19604:	cmp	r0, #0
   19608:	bls	19650 <flatcc_builder_create_string@@Base+0x13c>
   1960c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19610:	ldr	r1, [sp]
   19614:	add	r0, r1, r0
   19618:	str	r0, [sp]
   1961c:	mov	r0, sp
   19620:	add	r0, r0, #8
   19624:	ldr	r1, [sp, #4]
   19628:	ldr	r2, [pc, #60]	; 1966c <flatcc_builder_create_string@@Base+0x158>
   1962c:	ldr	r2, [pc, r2]
   19630:	str	r2, [r0, r1, lsl #3]
   19634:	ldr	r1, [fp, #-20]	; 0xffffffec
   19638:	ldr	r2, [sp, #4]
   1963c:	add	r0, r0, r2, lsl #3
   19640:	str	r1, [r0, #4]
   19644:	ldr	r0, [sp, #4]
   19648:	add	r0, r0, #1
   1964c:	str	r0, [sp, #4]
   19650:	ldr	r0, [fp, #-8]
   19654:	mov	r1, sp
   19658:	bl	1547c <flatcc_builder_embed_buffer@@Base+0x39c>
   1965c:	str	r0, [fp, #-4]
   19660:	ldr	r0, [fp, #-4]
   19664:	mov	sp, fp
   19668:	pop	{fp, pc}
   1966c:	andeq	fp, r1, r0, lsr #20

00019670 <flatcc_builder_create_string_str@@Base>:
   19670:	push	{fp, lr}
   19674:	mov	fp, sp
   19678:	sub	sp, sp, #24
   1967c:	str	r0, [fp, #-4]
   19680:	str	r1, [fp, #-8]
   19684:	ldr	r0, [fp, #-4]
   19688:	ldr	r1, [fp, #-8]
   1968c:	ldr	r2, [fp, #-8]
   19690:	str	r0, [sp, #12]
   19694:	mov	r0, r2
   19698:	str	r1, [sp, #8]
   1969c:	bl	12938 <strlen@plt>
   196a0:	ldr	r1, [sp, #12]
   196a4:	str	r0, [sp, #4]
   196a8:	mov	r0, r1
   196ac:	ldr	r1, [sp, #8]
   196b0:	ldr	r2, [sp, #4]
   196b4:	bl	19514 <flatcc_builder_create_string@@Base>
   196b8:	mov	sp, fp
   196bc:	pop	{fp, pc}

000196c0 <flatcc_builder_create_string_strn@@Base>:
   196c0:	push	{fp, lr}
   196c4:	mov	fp, sp
   196c8:	sub	sp, sp, #24
   196cc:	str	r0, [fp, #-4]
   196d0:	str	r1, [fp, #-8]
   196d4:	str	r2, [sp, #12]
   196d8:	ldr	r0, [fp, #-4]
   196dc:	ldr	r1, [fp, #-8]
   196e0:	ldr	r2, [fp, #-8]
   196e4:	ldr	r3, [sp, #12]
   196e8:	str	r0, [sp, #8]
   196ec:	mov	r0, r2
   196f0:	str	r1, [sp, #4]
   196f4:	mov	r1, r3
   196f8:	bl	169b4 <flatcc_builder_append_string_strn@@Base+0x5c>
   196fc:	ldr	r1, [sp, #8]
   19700:	str	r0, [sp]
   19704:	mov	r0, r1
   19708:	ldr	r1, [sp, #4]
   1970c:	ldr	r2, [sp]
   19710:	bl	19514 <flatcc_builder_create_string@@Base>
   19714:	mov	sp, fp
   19718:	pop	{fp, pc}

0001971c <flatcc_builder_end_string@@Base>:
   1971c:	push	{fp, lr}
   19720:	mov	fp, sp
   19724:	sub	sp, sp, #16
   19728:	str	r0, [sp, #8]
   1972c:	ldr	r0, [sp, #8]
   19730:	ldr	r0, [r0, #32]
   19734:	ldrh	r0, [r0, #14]
   19738:	cmp	r0, #6
   1973c:	bne	19744 <flatcc_builder_end_string@@Base+0x28>
   19740:	b	19764 <flatcc_builder_end_string@@Base+0x48>
   19744:	ldr	r0, [pc, #168]	; 197f4 <flatcc_builder_end_string@@Base+0xd8>
   19748:	add	r0, pc, r0
   1974c:	ldr	r1, [pc, #164]	; 197f8 <flatcc_builder_end_string@@Base+0xdc>
   19750:	add	r1, pc, r1
   19754:	ldr	r2, [pc, #160]	; 197fc <flatcc_builder_end_string@@Base+0xe0>
   19758:	add	r3, pc, r2
   1975c:	movw	r2, #1732	; 0x6c4
   19760:	bl	1298c <__assert_fail@plt>
   19764:	ldr	r0, [sp, #8]
   19768:	ldr	r0, [r0, #32]
   1976c:	ldr	r0, [r0, #20]
   19770:	ldr	r1, [sp, #8]
   19774:	ldr	r1, [r1, #20]
   19778:	cmp	r0, r1
   1977c:	bne	19784 <flatcc_builder_end_string@@Base+0x68>
   19780:	b	197a4 <flatcc_builder_end_string@@Base+0x88>
   19784:	ldr	r0, [pc, #116]	; 19800 <flatcc_builder_end_string@@Base+0xe4>
   19788:	add	r0, pc, r0
   1978c:	ldr	r1, [pc, #112]	; 19804 <flatcc_builder_end_string@@Base+0xe8>
   19790:	add	r1, pc, r1
   19794:	ldr	r2, [pc, #108]	; 19808 <flatcc_builder_end_string@@Base+0xec>
   19798:	add	r3, pc, r2
   1979c:	movw	r2, #1733	; 0x6c5
   197a0:	bl	1298c <__assert_fail@plt>
   197a4:	ldr	r0, [sp, #8]
   197a8:	ldr	r1, [sp, #8]
   197ac:	ldr	r1, [r1, #16]
   197b0:	ldr	r2, [sp, #8]
   197b4:	ldr	r2, [r2, #20]
   197b8:	bl	19514 <flatcc_builder_create_string@@Base>
   197bc:	str	r0, [sp, #4]
   197c0:	movw	r1, #0
   197c4:	cmp	r1, r0
   197c8:	bne	197d8 <flatcc_builder_end_string@@Base+0xbc>
   197cc:	movw	r0, #0
   197d0:	str	r0, [fp, #-4]
   197d4:	b	197e8 <flatcc_builder_end_string@@Base+0xcc>
   197d8:	ldr	r0, [sp, #8]
   197dc:	bl	15f70 <flatcc_builder_end_buffer@@Base+0x164>
   197e0:	ldr	r0, [sp, #4]
   197e4:	str	r0, [fp, #-4]
   197e8:	ldr	r0, [fp, #-4]
   197ec:	mov	sp, fp
   197f0:	pop	{fp, pc}
   197f4:	andeq	r9, r0, ip, ror #2
   197f8:	andeq	r8, r0, r8, lsr #24
   197fc:	andeq	r9, r0, pc, lsl #20
   19800:	andeq	r9, r0, r2, lsr #20
   19804:	andeq	r8, r0, r8, ror #23
   19808:	andeq	r9, r0, pc, asr #19

0001980c <flatcc_builder_string_edit@@Base>:
   1980c:	sub	sp, sp, #4
   19810:	str	r0, [sp]
   19814:	ldr	r0, [sp]
   19818:	ldr	r0, [r0, #16]
   1981c:	add	sp, sp, #4
   19820:	bx	lr

00019824 <flatcc_builder_string_len@@Base>:
   19824:	sub	sp, sp, #4
   19828:	str	r0, [sp]
   1982c:	ldr	r0, [sp]
   19830:	ldr	r0, [r0, #32]
   19834:	ldr	r0, [r0, #20]
   19838:	add	sp, sp, #4
   1983c:	bx	lr
   19840:	push	{fp, lr}
   19844:	mov	fp, sp
   19848:	sub	sp, sp, #24
   1984c:	str	r0, [fp, #-8]
   19850:	str	r1, [sp, #12]
   19854:	strh	r2, [sp, #10]
   19858:	strh	r3, [sp, #8]
   1985c:	ldr	r0, [fp, #-8]
   19860:	ldr	r0, [r0, #20]
   19864:	ldrh	r1, [sp, #10]
   19868:	add	r0, r0, r1
   1986c:	sub	r0, r0, #1
   19870:	ldrh	r1, [sp, #10]
   19874:	sub	r1, r1, #1
   19878:	mvn	r2, #0
   1987c:	eor	r1, r1, r2
   19880:	and	r0, r0, r1
   19884:	str	r0, [sp, #4]
   19888:	ldr	r0, [sp, #4]
   1988c:	ldr	r1, [sp, #12]
   19890:	add	r0, r0, r1
   19894:	ldr	r1, [fp, #-8]
   19898:	str	r0, [r1, #20]
   1989c:	ldr	r1, [fp, #-8]
   198a0:	ldr	r1, [r1, #24]
   198a4:	cmp	r0, r1
   198a8:	bcc	198dc <flatcc_builder_string_len@@Base+0xb8>
   198ac:	ldr	r0, [fp, #-8]
   198b0:	ldr	r1, [fp, #-8]
   198b4:	ldr	r1, [r1, #20]
   198b8:	add	r1, r1, #1
   198bc:	movw	r2, #65532	; 0xfffc
   198c0:	bl	1a284 <flatcc_builder_get_emit_context@@Base+0x40>
   198c4:	cmp	r0, #0
   198c8:	beq	198d8 <flatcc_builder_string_len@@Base+0xb4>
   198cc:	movw	r0, #0
   198d0:	str	r0, [fp, #-4]
   198d4:	b	19930 <flatcc_builder_string_len@@Base+0x10c>
   198d8:	b	198dc <flatcc_builder_string_len@@Base+0xb8>
   198dc:	ldr	r0, [sp, #4]
   198e0:	add	r0, r0, #4
   198e4:	ldr	r1, [fp, #-8]
   198e8:	ldr	r1, [r1, #4]
   198ec:	ldrh	r2, [sp, #8]
   198f0:	add	r1, r1, r2, lsl #1
   198f4:	strh	r0, [r1]
   198f8:	ldrh	r0, [sp, #8]
   198fc:	ldr	r1, [fp, #-8]
   19900:	ldrh	r1, [r1, #8]
   19904:	cmp	r0, r1
   19908:	blt	1991c <flatcc_builder_string_len@@Base+0xf8>
   1990c:	ldrh	r0, [sp, #8]
   19910:	add	r0, r0, #1
   19914:	ldr	r1, [fp, #-8]
   19918:	strh	r0, [r1, #8]
   1991c:	ldr	r0, [fp, #-8]
   19920:	ldr	r0, [r0, #16]
   19924:	ldr	r1, [sp, #4]
   19928:	add	r0, r0, r1
   1992c:	str	r0, [fp, #-4]
   19930:	ldr	r0, [fp, #-4]
   19934:	mov	sp, fp
   19938:	pop	{fp, pc}

0001993c <flatcc_builder_table_edit@@Base>:
   1993c:	push	{fp, lr}
   19940:	mov	fp, sp
   19944:	sub	sp, sp, #8
   19948:	str	r0, [sp, #4]
   1994c:	str	r1, [sp]
   19950:	ldr	r0, [sp, #4]
   19954:	ldr	r0, [r0, #32]
   19958:	ldrh	r0, [r0, #14]
   1995c:	cmp	r0, #3
   19960:	bne	19968 <flatcc_builder_table_edit@@Base+0x2c>
   19964:	b	19988 <flatcc_builder_table_edit@@Base+0x4c>
   19968:	ldr	r0, [pc, #68]	; 199b4 <flatcc_builder_table_edit@@Base+0x78>
   1996c:	add	r0, pc, r0
   19970:	ldr	r1, [pc, #64]	; 199b8 <flatcc_builder_table_edit@@Base+0x7c>
   19974:	add	r1, pc, r1
   19978:	ldr	r2, [pc, #60]	; 199bc <flatcc_builder_table_edit@@Base+0x80>
   1997c:	add	r3, pc, r2
   19980:	movw	r2, #1794	; 0x702
   19984:	bl	1298c <__assert_fail@plt>
   19988:	ldr	r0, [sp, #4]
   1998c:	ldr	r0, [r0, #16]
   19990:	ldr	r1, [sp, #4]
   19994:	ldr	r1, [r1, #20]
   19998:	add	r0, r0, r1
   1999c:	ldr	r1, [sp]
   199a0:	movw	r2, #0
   199a4:	sub	r1, r2, r1
   199a8:	add	r0, r0, r1
   199ac:	mov	sp, fp
   199b0:	pop	{fp, pc}
   199b4:	andeq	r9, r0, r8, lsr r2
   199b8:	andeq	r8, r0, r4, lsl #20
   199bc:	andeq	r9, r0, r0, ror #17

000199c0 <flatcc_builder_table_add_copy@@Base>:
   199c0:	push	{fp, lr}
   199c4:	mov	fp, sp
   199c8:	sub	sp, sp, #24
   199cc:	ldr	ip, [fp, #8]
   199d0:	str	r0, [fp, #-4]
   199d4:	str	r1, [fp, #-8]
   199d8:	str	r2, [sp, #12]
   199dc:	str	r3, [sp, #8]
   199e0:	strh	ip, [sp, #6]
   199e4:	ldr	r0, [fp, #-4]
   199e8:	ldr	r1, [fp, #-8]
   199ec:	ldr	r2, [sp, #8]
   199f0:	ldrh	r3, [sp, #6]
   199f4:	bl	18a94 <flatcc_builder_table_add@@Base>
   199f8:	str	r0, [sp]
   199fc:	movw	r1, #0
   19a00:	cmp	r0, r1
   19a04:	beq	19a18 <flatcc_builder_table_add_copy@@Base+0x58>
   19a08:	ldr	r0, [sp]
   19a0c:	ldr	r1, [sp, #12]
   19a10:	ldr	r2, [sp, #8]
   19a14:	bl	128d8 <memcpy@plt>
   19a18:	ldr	r0, [sp]
   19a1c:	mov	sp, fp
   19a20:	pop	{fp, pc}
   19a24:	push	{fp, lr}
   19a28:	mov	fp, sp
   19a2c:	sub	sp, sp, #16
   19a30:	str	r0, [sp, #8]
   19a34:	strh	r1, [sp, #6]
   19a38:	ldr	r0, [sp, #8]
   19a3c:	ldr	r0, [r0, #20]
   19a40:	add	r0, r0, #4
   19a44:	sub	r0, r0, #1
   19a48:	mvn	r1, #3
   19a4c:	and	r0, r0, r1
   19a50:	str	r0, [sp]
   19a54:	ldr	r0, [sp]
   19a58:	add	r0, r0, #4
   19a5c:	ldr	r1, [sp, #8]
   19a60:	str	r0, [r1, #20]
   19a64:	ldr	r1, [sp, #8]
   19a68:	ldr	r1, [r1, #24]
   19a6c:	cmp	r0, r1
   19a70:	bls	19aa0 <flatcc_builder_table_add_copy@@Base+0xe0>
   19a74:	ldr	r0, [sp, #8]
   19a78:	ldr	r1, [sp, #8]
   19a7c:	ldr	r1, [r1, #20]
   19a80:	movw	r2, #65532	; 0xfffc
   19a84:	bl	1a284 <flatcc_builder_get_emit_context@@Base+0x40>
   19a88:	cmp	r0, #0
   19a8c:	beq	19a9c <flatcc_builder_table_add_copy@@Base+0xdc>
   19a90:	movw	r0, #0
   19a94:	str	r0, [fp, #-4]
   19a98:	b	19b0c <flatcc_builder_table_add_copy@@Base+0x14c>
   19a9c:	b	19aa0 <flatcc_builder_table_add_copy@@Base+0xe0>
   19aa0:	ldr	r0, [sp]
   19aa4:	add	r0, r0, #4
   19aa8:	ldr	r1, [sp, #8]
   19aac:	ldr	r1, [r1, #4]
   19ab0:	ldrh	r2, [sp, #6]
   19ab4:	add	r1, r1, r2, lsl #1
   19ab8:	strh	r0, [r1]
   19abc:	ldrh	r0, [sp, #6]
   19ac0:	ldr	r1, [sp, #8]
   19ac4:	ldrh	r1, [r1, #8]
   19ac8:	cmp	r0, r1
   19acc:	blt	19ae0 <flatcc_builder_table_add_copy@@Base+0x120>
   19ad0:	ldrh	r0, [sp, #6]
   19ad4:	add	r0, r0, #1
   19ad8:	ldr	r1, [sp, #8]
   19adc:	strh	r0, [r1, #8]
   19ae0:	ldr	r0, [sp]
   19ae4:	ldr	r1, [sp, #8]
   19ae8:	ldr	r2, [r1]
   19aec:	add	r3, r2, #2
   19af0:	str	r3, [r1]
   19af4:	strh	r0, [r2]
   19af8:	ldr	r0, [sp, #8]
   19afc:	ldr	r0, [r0, #16]
   19b00:	ldr	r1, [sp]
   19b04:	add	r0, r0, r1
   19b08:	str	r0, [fp, #-4]
   19b0c:	ldr	r0, [fp, #-4]
   19b10:	mov	sp, fp
   19b14:	pop	{fp, pc}

00019b18 <flatcc_builder_push_buffer_alignment@@Base>:
   19b18:	sub	sp, sp, #8
   19b1c:	str	r0, [sp, #4]
   19b20:	ldr	r0, [sp, #4]
   19b24:	ldrh	r0, [r0, #128]	; 0x80
   19b28:	strh	r0, [sp, #2]
   19b2c:	ldr	r0, [sp, #4]
   19b30:	movw	r1, #4
   19b34:	strh	r1, [r0, #128]	; 0x80
   19b38:	ldrh	r0, [sp, #2]
   19b3c:	add	sp, sp, #8
   19b40:	bx	lr

00019b44 <flatcc_builder_pop_buffer_alignment@@Base>:
   19b44:	push	{fp, lr}
   19b48:	mov	fp, sp
   19b4c:	sub	sp, sp, #8
   19b50:	str	r0, [sp, #4]
   19b54:	strh	r1, [sp, #2]
   19b58:	ldr	r0, [sp, #4]
   19b5c:	ldrh	r1, [sp, #2]
   19b60:	bl	15948 <flatcc_builder_create_buffer@@Base+0x3a8>
   19b64:	mov	sp, fp
   19b68:	pop	{fp, pc}

00019b6c <flatcc_builder_get_buffer_alignment@@Base>:
   19b6c:	sub	sp, sp, #4
   19b70:	str	r0, [sp]
   19b74:	ldr	r0, [sp]
   19b78:	ldrh	r0, [r0, #128]	; 0x80
   19b7c:	add	sp, sp, #4
   19b80:	bx	lr

00019b84 <flatcc_builder_set_vtable_clustering@@Base>:
   19b84:	sub	sp, sp, #8
   19b88:	str	r0, [sp, #4]
   19b8c:	str	r1, [sp]
   19b90:	ldr	r0, [sp]
   19b94:	cmp	r0, #0
   19b98:	movw	r0, #0
   19b9c:	movne	r0, #1
   19ba0:	mvn	r1, #0
   19ba4:	eor	r0, r0, r1
   19ba8:	and	r0, r0, #1
   19bac:	ldr	r1, [sp, #4]
   19bb0:	str	r0, [r1, #180]	; 0xb4
   19bb4:	add	sp, sp, #8
   19bb8:	bx	lr

00019bbc <flatcc_builder_set_block_align@@Base>:
   19bbc:	sub	sp, sp, #8
   19bc0:	str	r0, [sp, #4]
   19bc4:	strh	r1, [sp, #2]
   19bc8:	ldrh	r0, [sp, #2]
   19bcc:	ldr	r1, [sp, #4]
   19bd0:	strh	r0, [r1, #132]	; 0x84
   19bd4:	add	sp, sp, #8
   19bd8:	bx	lr

00019bdc <flatcc_builder_get_level@@Base>:
   19bdc:	sub	sp, sp, #4
   19be0:	str	r0, [sp]
   19be4:	ldr	r0, [sp]
   19be8:	ldr	r0, [r0, #156]	; 0x9c
   19bec:	add	sp, sp, #4
   19bf0:	bx	lr

00019bf4 <flatcc_builder_set_max_level@@Base>:
   19bf4:	sub	sp, sp, #8
   19bf8:	str	r0, [sp, #4]
   19bfc:	str	r1, [sp]
   19c00:	ldr	r0, [sp]
   19c04:	ldr	r1, [sp, #4]
   19c08:	str	r0, [r1, #176]	; 0xb0
   19c0c:	ldr	r0, [sp, #4]
   19c10:	ldr	r0, [r0, #160]	; 0xa0
   19c14:	ldr	r1, [sp, #4]
   19c18:	ldr	r1, [r1, #176]	; 0xb0
   19c1c:	cmp	r0, r1
   19c20:	bge	19c34 <flatcc_builder_set_max_level@@Base+0x40>
   19c24:	ldr	r0, [sp, #4]
   19c28:	ldr	r0, [r0, #176]	; 0xb0
   19c2c:	ldr	r1, [sp, #4]
   19c30:	str	r0, [r1, #160]	; 0xa0
   19c34:	add	sp, sp, #8
   19c38:	bx	lr

00019c3c <flatcc_builder_get_buffer_size@@Base>:
   19c3c:	sub	sp, sp, #4
   19c40:	str	r0, [sp]
   19c44:	ldr	r0, [sp]
   19c48:	ldr	r0, [r0, #140]	; 0x8c
   19c4c:	ldr	r1, [sp]
   19c50:	ldr	r1, [r1, #136]	; 0x88
   19c54:	sub	r0, r0, r1
   19c58:	add	sp, sp, #4
   19c5c:	bx	lr

00019c60 <flatcc_builder_get_buffer_start@@Base>:
   19c60:	sub	sp, sp, #4
   19c64:	str	r0, [sp]
   19c68:	ldr	r0, [sp]
   19c6c:	ldr	r0, [r0, #136]	; 0x88
   19c70:	add	sp, sp, #4
   19c74:	bx	lr

00019c78 <flatcc_builder_get_buffer_end@@Base>:
   19c78:	sub	sp, sp, #4
   19c7c:	str	r0, [sp]
   19c80:	ldr	r0, [sp]
   19c84:	ldr	r0, [r0, #140]	; 0x8c
   19c88:	add	sp, sp, #4
   19c8c:	bx	lr

00019c90 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19c90:	sub	sp, sp, #8
   19c94:	str	r0, [sp, #4]
   19c98:	str	r1, [sp]
   19c9c:	ldr	r0, [sp]
   19ca0:	ldr	r1, [sp, #4]
   19ca4:	str	r0, [r1, #172]	; 0xac
   19ca8:	add	sp, sp, #8
   19cac:	bx	lr

00019cb0 <flatcc_builder_set_identifier@@Base>:
   19cb0:	sub	sp, sp, #16
   19cb4:	str	r0, [sp, #12]
   19cb8:	str	r1, [sp, #8]
   19cbc:	ldr	r0, [sp, #12]
   19cc0:	add	r0, r0, #168	; 0xa8
   19cc4:	ldr	r1, [sp, #8]
   19cc8:	movw	r2, #0
   19ccc:	cmp	r1, r2
   19cd0:	str	r0, [sp, #4]
   19cd4:	beq	19ce4 <flatcc_builder_set_identifier@@Base+0x34>
   19cd8:	ldr	r0, [sp, #8]
   19cdc:	str	r0, [sp]
   19ce0:	b	19cf4 <flatcc_builder_set_identifier@@Base+0x44>
   19ce4:	ldr	r0, [pc, #56]	; 19d24 <flatcc_builder_set_identifier@@Base+0x74>
   19ce8:	ldr	r0, [pc, r0]
   19cec:	str	r0, [sp]
   19cf0:	b	19cf4 <flatcc_builder_set_identifier@@Base+0x44>
   19cf4:	ldr	r0, [sp]
   19cf8:	ldrb	r1, [r0]
   19cfc:	ldr	r2, [sp, #4]
   19d00:	strb	r1, [r2]
   19d04:	ldrb	r1, [r0, #1]
   19d08:	strb	r1, [r2, #1]
   19d0c:	ldrb	r1, [r0, #2]
   19d10:	strb	r1, [r2, #2]
   19d14:	ldrb	r0, [r0, #3]
   19d18:	strb	r0, [r2, #3]
   19d1c:	add	sp, sp, #16
   19d20:	bx	lr
   19d24:	andeq	fp, r1, r4, ror #6

00019d28 <flatcc_builder_get_type@@Base>:
   19d28:	sub	sp, sp, #8
   19d2c:	str	r0, [sp, #4]
   19d30:	ldr	r0, [sp, #4]
   19d34:	ldr	r0, [r0, #32]
   19d38:	movw	r1, #0
   19d3c:	cmp	r0, r1
   19d40:	beq	19d58 <flatcc_builder_get_type@@Base+0x30>
   19d44:	ldr	r0, [sp, #4]
   19d48:	ldr	r0, [r0, #32]
   19d4c:	ldrh	r0, [r0, #14]
   19d50:	str	r0, [sp]
   19d54:	b	19d64 <flatcc_builder_get_type@@Base+0x3c>
   19d58:	movw	r0, #0
   19d5c:	str	r0, [sp]
   19d60:	b	19d64 <flatcc_builder_get_type@@Base+0x3c>
   19d64:	ldr	r0, [sp]
   19d68:	add	sp, sp, #8
   19d6c:	bx	lr

00019d70 <flatcc_builder_get_type_at@@Base>:
   19d70:	sub	sp, sp, #12
   19d74:	str	r0, [sp, #4]
   19d78:	str	r1, [sp]
   19d7c:	ldr	r0, [sp]
   19d80:	cmp	r0, #1
   19d84:	blt	19d9c <flatcc_builder_get_type_at@@Base+0x2c>
   19d88:	ldr	r0, [sp]
   19d8c:	ldr	r1, [sp, #4]
   19d90:	ldr	r1, [r1, #156]	; 0x9c
   19d94:	cmp	r0, r1
   19d98:	ble	19da8 <flatcc_builder_get_type_at@@Base+0x38>
   19d9c:	movw	r0, #0
   19da0:	str	r0, [sp, #8]
   19da4:	b	19dd4 <flatcc_builder_get_type_at@@Base+0x64>
   19da8:	ldr	r0, [sp, #4]
   19dac:	ldr	r0, [r0, #32]
   19db0:	ldr	r1, [sp]
   19db4:	ldr	r2, [sp, #4]
   19db8:	ldr	r2, [r2, #156]	; 0x9c
   19dbc:	sub	r1, r1, r2
   19dc0:	movw	r2, #36	; 0x24
   19dc4:	mul	r1, r1, r2
   19dc8:	add	r0, r0, r1
   19dcc:	ldrh	r0, [r0, #14]
   19dd0:	str	r0, [sp, #8]
   19dd4:	ldr	r0, [sp, #8]
   19dd8:	add	sp, sp, #12
   19ddc:	bx	lr

00019de0 <flatcc_builder_get_direct_buffer@@Base>:
   19de0:	push	{fp, lr}
   19de4:	mov	fp, sp
   19de8:	sub	sp, sp, #16
   19dec:	str	r0, [sp, #8]
   19df0:	str	r1, [sp, #4]
   19df4:	ldr	r0, [sp, #8]
   19df8:	ldr	r0, [r0, #184]	; 0xb8
   19dfc:	cmp	r0, #0
   19e00:	beq	19e1c <flatcc_builder_get_direct_buffer@@Base+0x3c>
   19e04:	ldr	r0, [sp, #8]
   19e08:	add	r0, r0, #188	; 0xbc
   19e0c:	ldr	r1, [sp, #4]
   19e10:	bl	19e50 <flatcc_builder_get_direct_buffer@@Base+0x70>
   19e14:	str	r0, [fp, #-4]
   19e18:	b	19e44 <flatcc_builder_get_direct_buffer@@Base+0x64>
   19e1c:	ldr	r0, [sp, #4]
   19e20:	movw	r1, #0
   19e24:	cmp	r0, r1
   19e28:	beq	19e38 <flatcc_builder_get_direct_buffer@@Base+0x58>
   19e2c:	ldr	r0, [sp, #4]
   19e30:	movw	r1, #0
   19e34:	str	r1, [r0]
   19e38:	b	19e3c <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19e3c:	movw	r0, #0
   19e40:	str	r0, [fp, #-4]
   19e44:	ldr	r0, [fp, #-4]
   19e48:	mov	sp, fp
   19e4c:	pop	{fp, pc}
   19e50:	sub	sp, sp, #12
   19e54:	str	r0, [sp, #4]
   19e58:	str	r1, [sp]
   19e5c:	ldr	r0, [sp, #4]
   19e60:	ldr	r0, [r0]
   19e64:	ldr	r1, [sp, #4]
   19e68:	ldr	r1, [r1, #4]
   19e6c:	cmp	r0, r1
   19e70:	bne	19ea4 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   19e74:	ldr	r0, [sp]
   19e78:	movw	r1, #0
   19e7c:	cmp	r0, r1
   19e80:	beq	19e94 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   19e84:	ldr	r0, [sp, #4]
   19e88:	ldr	r0, [r0, #24]
   19e8c:	ldr	r1, [sp]
   19e90:	str	r0, [r1]
   19e94:	ldr	r0, [sp, #4]
   19e98:	ldr	r0, [r0, #8]
   19e9c:	str	r0, [sp, #8]
   19ea0:	b	19ec8 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   19ea4:	ldr	r0, [sp]
   19ea8:	movw	r1, #0
   19eac:	cmp	r0, r1
   19eb0:	beq	19ec0 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   19eb4:	ldr	r0, [sp]
   19eb8:	movw	r1, #0
   19ebc:	str	r1, [r0]
   19ec0:	movw	r0, #0
   19ec4:	str	r0, [sp, #8]
   19ec8:	ldr	r0, [sp, #8]
   19ecc:	add	sp, sp, #12
   19ed0:	bx	lr

00019ed4 <flatcc_builder_copy_buffer@@Base>:
   19ed4:	push	{fp, lr}
   19ed8:	mov	fp, sp
   19edc:	sub	sp, sp, #16
   19ee0:	str	r0, [sp, #8]
   19ee4:	str	r1, [sp, #4]
   19ee8:	str	r2, [sp]
   19eec:	ldr	r0, [sp, #8]
   19ef0:	ldr	r0, [r0, #184]	; 0xb8
   19ef4:	cmp	r0, #0
   19ef8:	bne	19f08 <flatcc_builder_copy_buffer@@Base+0x34>
   19efc:	movw	r0, #0
   19f00:	str	r0, [fp, #-4]
   19f04:	b	19f5c <flatcc_builder_copy_buffer@@Base+0x88>
   19f08:	ldr	r0, [sp, #8]
   19f0c:	add	r0, r0, #188	; 0xbc
   19f10:	ldr	r1, [sp, #4]
   19f14:	ldr	r2, [sp]
   19f18:	bl	1abc4 <flatcc_emitter_copy_buffer@@Base>
   19f1c:	str	r0, [sp, #4]
   19f20:	ldr	r0, [sp, #4]
   19f24:	movw	r1, #0
   19f28:	cmp	r0, r1
   19f2c:	beq	19f34 <flatcc_builder_copy_buffer@@Base+0x60>
   19f30:	b	19f54 <flatcc_builder_copy_buffer@@Base+0x80>
   19f34:	ldr	r0, [pc, #44]	; 19f68 <flatcc_builder_copy_buffer@@Base+0x94>
   19f38:	add	r0, pc, r0
   19f3c:	ldr	r1, [pc, #40]	; 19f6c <flatcc_builder_copy_buffer@@Base+0x98>
   19f40:	add	r1, pc, r1
   19f44:	ldr	r2, [pc, #36]	; 19f70 <flatcc_builder_copy_buffer@@Base+0x9c>
   19f48:	add	r3, pc, r2
   19f4c:	movw	r2, #1926	; 0x786
   19f50:	bl	1298c <__assert_fail@plt>
   19f54:	ldr	r0, [sp, #4]
   19f58:	str	r0, [fp, #-4]
   19f5c:	ldr	r0, [fp, #-4]
   19f60:	mov	sp, fp
   19f64:	pop	{fp, pc}
   19f68:	andeq	r8, r0, fp, lsr #13
   19f6c:	andeq	r8, r0, r8, lsr r4
   19f70:	muleq	r0, pc, r3	; <UNPREDICTABLE>

00019f74 <flatcc_builder_finalize_buffer@@Base>:
   19f74:	push	{fp, lr}
   19f78:	mov	fp, sp
   19f7c:	sub	sp, sp, #16
   19f80:	str	r0, [fp, #-4]
   19f84:	str	r1, [sp, #8]
   19f88:	ldr	r0, [fp, #-4]
   19f8c:	bl	19c3c <flatcc_builder_get_buffer_size@@Base>
   19f90:	str	r0, [sp]
   19f94:	ldr	r0, [sp, #8]
   19f98:	movw	r1, #0
   19f9c:	cmp	r0, r1
   19fa0:	beq	19fb0 <flatcc_builder_finalize_buffer@@Base+0x3c>
   19fa4:	ldr	r0, [sp]
   19fa8:	ldr	r1, [sp, #8]
   19fac:	str	r0, [r1]
   19fb0:	ldr	r0, [sp]
   19fb4:	bl	12914 <malloc@plt>
   19fb8:	str	r0, [sp, #4]
   19fbc:	ldr	r0, [sp, #4]
   19fc0:	movw	r1, #0
   19fc4:	cmp	r0, r1
   19fc8:	bne	19fec <flatcc_builder_finalize_buffer@@Base+0x78>
   19fcc:	ldr	r0, [pc, #144]	; 1a064 <flatcc_builder_finalize_buffer@@Base+0xf0>
   19fd0:	add	r0, pc, r0
   19fd4:	ldr	r1, [pc, #140]	; 1a068 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19fd8:	add	r1, pc, r1
   19fdc:	ldr	r2, [pc, #136]	; 1a06c <flatcc_builder_finalize_buffer@@Base+0xf8>
   19fe0:	add	r3, pc, r2
   19fe4:	movw	r2, #1944	; 0x798
   19fe8:	bl	1298c <__assert_fail@plt>
   19fec:	ldr	r0, [fp, #-4]
   19ff0:	ldr	r1, [sp, #4]
   19ff4:	ldr	r2, [sp]
   19ff8:	bl	19ed4 <flatcc_builder_copy_buffer@@Base>
   19ffc:	movw	r1, #0
   1a000:	cmp	r0, r1
   1a004:	bne	1a028 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1a008:	ldr	r0, [pc, #96]	; 1a070 <flatcc_builder_finalize_buffer@@Base+0xfc>
   1a00c:	add	r0, pc, r0
   1a010:	ldr	r1, [pc, #92]	; 1a074 <flatcc_builder_finalize_buffer@@Base+0x100>
   1a014:	add	r1, pc, r1
   1a018:	ldr	r2, [pc, #88]	; 1a078 <flatcc_builder_finalize_buffer@@Base+0x104>
   1a01c:	add	r3, pc, r2
   1a020:	movw	r2, #1948	; 0x79c
   1a024:	bl	1298c <__assert_fail@plt>
   1a028:	b	1a02c <flatcc_builder_finalize_buffer@@Base+0xb8>
   1a02c:	ldr	r0, [sp, #4]
   1a030:	movw	r1, #0
   1a034:	cmp	r0, r1
   1a038:	bne	1a058 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1a03c:	ldr	r0, [sp, #8]
   1a040:	movw	r1, #0
   1a044:	cmp	r0, r1
   1a048:	beq	1a058 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1a04c:	ldr	r0, [sp, #8]
   1a050:	movw	r1, #0
   1a054:	str	r1, [r0]
   1a058:	ldr	r0, [sp, #4]
   1a05c:	mov	sp, fp
   1a060:	pop	{fp, pc}
   1a064:	andeq	r9, r0, r5, ror #10
   1a068:	andeq	r8, r0, r0, lsr #7
   1a06c:	andeq	r9, r0, ip, asr #6
   1a070:	andeq	r9, r0, r9, lsr #10
   1a074:	andeq	r8, r0, r4, ror #6
   1a078:	andeq	r9, r0, r0, lsl r3

0001a07c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1a07c:	push	{fp, lr}
   1a080:	mov	fp, sp
   1a084:	sub	sp, sp, #24
   1a088:	str	r0, [fp, #-4]
   1a08c:	str	r1, [fp, #-8]
   1a090:	ldr	r0, [fp, #-4]
   1a094:	bl	19c3c <flatcc_builder_get_buffer_size@@Base>
   1a098:	str	r0, [sp, #4]
   1a09c:	ldr	r0, [fp, #-8]
   1a0a0:	movw	r1, #0
   1a0a4:	cmp	r0, r1
   1a0a8:	beq	1a0b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1a0ac:	ldr	r0, [sp, #4]
   1a0b0:	ldr	r1, [fp, #-8]
   1a0b4:	str	r0, [r1]
   1a0b8:	ldr	r0, [fp, #-4]
   1a0bc:	bl	19b6c <flatcc_builder_get_buffer_alignment@@Base>
   1a0c0:	uxth	r0, r0
   1a0c4:	str	r0, [sp, #8]
   1a0c8:	ldr	r0, [sp, #4]
   1a0cc:	ldr	r1, [sp, #8]
   1a0d0:	add	r0, r0, r1
   1a0d4:	sub	r0, r0, #1
   1a0d8:	ldr	r1, [sp, #8]
   1a0dc:	sub	r1, r1, #1
   1a0e0:	mvn	r2, #0
   1a0e4:	eor	r1, r1, r2
   1a0e8:	and	r0, r0, r1
   1a0ec:	str	r0, [sp, #4]
   1a0f0:	ldr	r0, [sp, #8]
   1a0f4:	ldr	r1, [sp, #4]
   1a0f8:	bl	1a180 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1a0fc:	str	r0, [sp, #12]
   1a100:	ldr	r0, [sp, #12]
   1a104:	movw	r1, #0
   1a108:	cmp	r0, r1
   1a10c:	bne	1a114 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   1a110:	b	1a148 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a114:	ldr	r0, [fp, #-4]
   1a118:	ldr	r1, [sp, #12]
   1a11c:	ldr	r2, [sp, #4]
   1a120:	bl	19ed4 <flatcc_builder_copy_buffer@@Base>
   1a124:	movw	r1, #0
   1a128:	cmp	r0, r1
   1a12c:	bne	1a144 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   1a130:	ldr	r0, [sp, #12]
   1a134:	bl	128cc <free@plt>
   1a138:	movw	r0, #0
   1a13c:	str	r0, [sp, #12]
   1a140:	b	1a148 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a144:	b	1a148 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   1a148:	ldr	r0, [sp, #12]
   1a14c:	movw	r1, #0
   1a150:	cmp	r0, r1
   1a154:	bne	1a174 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1a158:	ldr	r0, [fp, #-8]
   1a15c:	movw	r1, #0
   1a160:	cmp	r0, r1
   1a164:	beq	1a174 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   1a168:	ldr	r0, [fp, #-8]
   1a16c:	movw	r1, #0
   1a170:	str	r1, [r0]
   1a174:	ldr	r0, [sp, #12]
   1a178:	mov	sp, fp
   1a17c:	pop	{fp, pc}
   1a180:	push	{fp, lr}
   1a184:	mov	fp, sp
   1a188:	sub	sp, sp, #16
   1a18c:	str	r0, [fp, #-4]
   1a190:	str	r1, [sp, #8]
   1a194:	movw	r0, #0
   1a198:	str	r0, [sp]
   1a19c:	ldr	r0, [fp, #-4]
   1a1a0:	cmp	r0, #4
   1a1a4:	bcs	1a1b0 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   1a1a8:	movw	r0, #4
   1a1ac:	str	r0, [fp, #-4]
   1a1b0:	ldr	r1, [fp, #-4]
   1a1b4:	ldr	r2, [sp, #8]
   1a1b8:	mov	r0, sp
   1a1bc:	bl	12950 <posix_memalign@plt>
   1a1c0:	str	r0, [sp, #4]
   1a1c4:	ldr	r0, [sp, #4]
   1a1c8:	cmp	r0, #0
   1a1cc:	beq	1a1f0 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1a1d0:	ldr	r0, [sp]
   1a1d4:	movw	r1, #0
   1a1d8:	cmp	r0, r1
   1a1dc:	beq	1a1f0 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   1a1e0:	ldr	r0, [sp]
   1a1e4:	bl	128cc <free@plt>
   1a1e8:	movw	r0, #0
   1a1ec:	str	r0, [sp]
   1a1f0:	ldr	r0, [sp]
   1a1f4:	mov	sp, fp
   1a1f8:	pop	{fp, pc}

0001a1fc <flatcc_builder_aligned_alloc@@Base>:
   1a1fc:	push	{fp, lr}
   1a200:	mov	fp, sp
   1a204:	sub	sp, sp, #8
   1a208:	str	r0, [sp, #4]
   1a20c:	str	r1, [sp]
   1a210:	ldr	r0, [sp, #4]
   1a214:	ldr	r1, [sp]
   1a218:	bl	1a180 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1a21c:	mov	sp, fp
   1a220:	pop	{fp, pc}

0001a224 <flatcc_builder_aligned_free@@Base>:
   1a224:	push	{fp, lr}
   1a228:	mov	fp, sp
   1a22c:	sub	sp, sp, #8
   1a230:	str	r0, [sp, #4]
   1a234:	ldr	r0, [sp, #4]
   1a238:	bl	128cc <free@plt>
   1a23c:	mov	sp, fp
   1a240:	pop	{fp, pc}

0001a244 <flatcc_builder_get_emit_context@@Base>:
   1a244:	sub	sp, sp, #4
   1a248:	str	r0, [sp]
   1a24c:	ldr	r0, [sp]
   1a250:	ldr	r0, [r0, #36]	; 0x24
   1a254:	add	sp, sp, #4
   1a258:	bx	lr
   1a25c:	sub	sp, sp, #8
   1a260:	str	r0, [sp, #4]
   1a264:	strh	r1, [sp, #2]
   1a268:	ldr	r0, [sp, #4]
   1a26c:	ldr	r0, [r0, #140]	; 0x8c
   1a270:	ldrh	r1, [sp, #2]
   1a274:	sub	r1, r1, #1
   1a278:	and	r0, r0, r1
   1a27c:	add	sp, sp, #8
   1a280:	bx	lr
   1a284:	push	{fp, lr}
   1a288:	mov	fp, sp
   1a28c:	sub	sp, sp, #32
   1a290:	str	r0, [fp, #-8]
   1a294:	str	r1, [fp, #-12]
   1a298:	str	r2, [sp, #16]
   1a29c:	ldr	r0, [fp, #-8]
   1a2a0:	add	r0, r0, #52	; 0x34
   1a2a4:	add	r0, r0, #8
   1a2a8:	str	r0, [sp, #12]
   1a2ac:	ldr	r0, [fp, #-8]
   1a2b0:	ldr	r0, [r0, #48]	; 0x30
   1a2b4:	ldr	r1, [fp, #-8]
   1a2b8:	ldr	r1, [r1, #40]	; 0x28
   1a2bc:	ldr	r2, [sp, #12]
   1a2c0:	ldr	r3, [fp, #-8]
   1a2c4:	ldr	r3, [r3, #28]
   1a2c8:	ldr	ip, [fp, #-12]
   1a2cc:	add	r3, r3, ip
   1a2d0:	str	r0, [sp, #8]
   1a2d4:	mov	r0, r1
   1a2d8:	mov	r1, r2
   1a2dc:	mov	r2, r3
   1a2e0:	movw	r3, #1
   1a2e4:	str	r3, [sp, #4]
   1a2e8:	ldr	ip, [sp, #4]
   1a2ec:	str	ip, [sp]
   1a2f0:	ldr	lr, [sp, #8]
   1a2f4:	blx	lr
   1a2f8:	cmp	r0, #0
   1a2fc:	beq	1a30c <flatcc_builder_get_emit_context@@Base+0xc8>
   1a300:	mvn	r0, #0
   1a304:	str	r0, [fp, #-4]
   1a308:	b	1a320 <flatcc_builder_get_emit_context@@Base+0xdc>
   1a30c:	ldr	r0, [fp, #-8]
   1a310:	ldr	r1, [sp, #16]
   1a314:	bl	1609c <flatcc_builder_start_struct@@Base+0x70>
   1a318:	movw	r0, #0
   1a31c:	str	r0, [fp, #-4]
   1a320:	ldr	r0, [fp, #-4]
   1a324:	mov	sp, fp
   1a328:	pop	{fp, pc}
   1a32c:	push	{fp, lr}
   1a330:	mov	fp, sp
   1a334:	sub	sp, sp, #32
   1a338:	str	r0, [fp, #-8]
   1a33c:	ldr	r0, [fp, #-8]
   1a340:	add	r0, r0, #52	; 0x34
   1a344:	add	r0, r0, #40	; 0x28
   1a348:	str	r0, [fp, #-12]
   1a34c:	ldr	r0, [fp, #-8]
   1a350:	ldr	r0, [r0, #124]	; 0x7c
   1a354:	cmp	r0, #0
   1a358:	bne	1a360 <flatcc_builder_get_emit_context@@Base+0x11c>
   1a35c:	b	1a380 <flatcc_builder_get_emit_context@@Base+0x13c>
   1a360:	ldr	r0, [pc, #320]	; 1a4a8 <flatcc_builder_get_emit_context@@Base+0x264>
   1a364:	add	r0, pc, r0
   1a368:	ldr	r1, [pc, #316]	; 1a4ac <flatcc_builder_get_emit_context@@Base+0x268>
   1a36c:	add	r1, pc, r1
   1a370:	ldr	r2, [pc, #312]	; 1a4b0 <flatcc_builder_get_emit_context@@Base+0x26c>
   1a374:	add	r3, pc, r2
   1a378:	movw	r2, #342	; 0x156
   1a37c:	bl	1298c <__assert_fail@plt>
   1a380:	ldr	r0, [fp, #-8]
   1a384:	ldr	r1, [fp, #-8]
   1a388:	ldr	r2, [r1, #124]	; 0x7c
   1a38c:	movw	r1, #6
   1a390:	movw	r3, #16
   1a394:	movw	ip, #0
   1a398:	str	ip, [sp]
   1a39c:	bl	14dd4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1a3a0:	movw	r1, #0
   1a3a4:	cmp	r0, r1
   1a3a8:	bne	1a3b8 <flatcc_builder_get_emit_context@@Base+0x174>
   1a3ac:	mvn	r0, #0
   1a3b0:	str	r0, [fp, #-4]
   1a3b4:	b	1a49c <flatcc_builder_get_emit_context@@Base+0x258>
   1a3b8:	ldr	r0, [fp, #-8]
   1a3bc:	movw	r1, #16
   1a3c0:	str	r1, [r0, #124]	; 0x7c
   1a3c4:	movw	r0, #256	; 0x100
   1a3c8:	str	r0, [sp, #16]
   1a3cc:	ldr	r0, [fp, #-8]
   1a3d0:	ldr	r0, [r0, #48]	; 0x30
   1a3d4:	ldr	r1, [fp, #-8]
   1a3d8:	ldr	r1, [r1, #40]	; 0x28
   1a3dc:	ldr	r2, [fp, #-12]
   1a3e0:	ldr	r3, [sp, #16]
   1a3e4:	str	r0, [sp, #8]
   1a3e8:	mov	r0, r1
   1a3ec:	mov	r1, r2
   1a3f0:	mov	r2, r3
   1a3f4:	movw	r3, #1
   1a3f8:	movw	ip, #5
   1a3fc:	str	ip, [sp]
   1a400:	ldr	ip, [sp, #8]
   1a404:	blx	ip
   1a408:	cmp	r0, #0
   1a40c:	beq	1a41c <flatcc_builder_get_emit_context@@Base+0x1d8>
   1a410:	mvn	r0, #0
   1a414:	str	r0, [fp, #-4]
   1a418:	b	1a49c <flatcc_builder_get_emit_context@@Base+0x258>
   1a41c:	b	1a420 <flatcc_builder_get_emit_context@@Base+0x1dc>
   1a420:	ldr	r0, [sp, #16]
   1a424:	lsl	r0, r0, #1
   1a428:	ldr	r1, [fp, #-12]
   1a42c:	ldr	r1, [r1, #4]
   1a430:	cmp	r0, r1
   1a434:	bhi	1a448 <flatcc_builder_get_emit_context@@Base+0x204>
   1a438:	ldr	r0, [sp, #16]
   1a43c:	lsl	r0, r0, #1
   1a440:	str	r0, [sp, #16]
   1a444:	b	1a420 <flatcc_builder_get_emit_context@@Base+0x1dc>
   1a448:	ldr	r0, [sp, #16]
   1a44c:	lsr	r0, r0, #2
   1a450:	str	r0, [sp, #16]
   1a454:	movw	r0, #0
   1a458:	str	r0, [sp, #12]
   1a45c:	ldr	r0, [sp, #12]
   1a460:	movw	r1, #1
   1a464:	lsl	r0, r1, r0
   1a468:	ldr	r1, [sp, #16]
   1a46c:	cmp	r0, r1
   1a470:	bcs	1a488 <flatcc_builder_get_emit_context@@Base+0x244>
   1a474:	b	1a478 <flatcc_builder_get_emit_context@@Base+0x234>
   1a478:	ldr	r0, [sp, #12]
   1a47c:	add	r0, r0, #1
   1a480:	str	r0, [sp, #12]
   1a484:	b	1a45c <flatcc_builder_get_emit_context@@Base+0x218>
   1a488:	ldr	r0, [sp, #12]
   1a48c:	ldr	r1, [fp, #-8]
   1a490:	str	r0, [r1, #116]	; 0x74
   1a494:	movw	r0, #0
   1a498:	str	r0, [fp, #-4]
   1a49c:	ldr	r0, [fp, #-4]
   1a4a0:	mov	sp, fp
   1a4a4:	pop	{fp, pc}
   1a4a8:	muleq	r0, r5, r1
   1a4ac:	andeq	r8, r0, ip
   1a4b0:	muleq	r0, r4, r1

0001a4b4 <flatcc_emitter_recycle_page@@Base>:
   1a4b4:	sub	sp, sp, #12
   1a4b8:	str	r0, [sp, #4]
   1a4bc:	str	r1, [sp]
   1a4c0:	ldr	r0, [sp]
   1a4c4:	ldr	r1, [sp, #4]
   1a4c8:	ldr	r1, [r1]
   1a4cc:	cmp	r0, r1
   1a4d0:	beq	1a4e8 <flatcc_emitter_recycle_page@@Base+0x34>
   1a4d4:	ldr	r0, [sp]
   1a4d8:	ldr	r1, [sp, #4]
   1a4dc:	ldr	r1, [r1, #4]
   1a4e0:	cmp	r0, r1
   1a4e4:	bne	1a4f4 <flatcc_emitter_recycle_page@@Base+0x40>
   1a4e8:	mvn	r0, #0
   1a4ec:	str	r0, [sp, #8]
   1a4f0:	b	1a568 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a4f4:	ldr	r0, [sp]
   1a4f8:	ldr	r0, [r0, #2948]	; 0xb84
   1a4fc:	ldr	r1, [sp]
   1a500:	ldr	r1, [r1, #2944]	; 0xb80
   1a504:	str	r0, [r1, #2948]	; 0xb84
   1a508:	ldr	r0, [sp]
   1a50c:	ldr	r0, [r0, #2944]	; 0xb80
   1a510:	ldr	r1, [sp]
   1a514:	ldr	r1, [r1, #2948]	; 0xb84
   1a518:	str	r0, [r1, #2944]	; 0xb80
   1a51c:	ldr	r0, [sp, #4]
   1a520:	ldr	r0, [r0]
   1a524:	ldr	r0, [r0, #2948]	; 0xb84
   1a528:	ldr	r1, [sp]
   1a52c:	str	r0, [r1, #2948]	; 0xb84
   1a530:	ldr	r0, [sp, #4]
   1a534:	ldr	r0, [r0]
   1a538:	ldr	r1, [sp]
   1a53c:	str	r0, [r1, #2944]	; 0xb80
   1a540:	ldr	r0, [sp]
   1a544:	ldr	r1, [sp]
   1a548:	ldr	r1, [r1, #2948]	; 0xb84
   1a54c:	str	r0, [r1, #2944]	; 0xb80
   1a550:	ldr	r0, [sp]
   1a554:	ldr	r1, [sp]
   1a558:	ldr	r1, [r1, #2944]	; 0xb80
   1a55c:	str	r0, [r1, #2948]	; 0xb84
   1a560:	movw	r0, #0
   1a564:	str	r0, [sp, #8]
   1a568:	ldr	r0, [sp, #8]
   1a56c:	add	sp, sp, #12
   1a570:	bx	lr

0001a574 <flatcc_emitter_reset@@Base>:
   1a574:	push	{fp, lr}
   1a578:	mov	fp, sp
   1a57c:	sub	sp, sp, #16
   1a580:	str	r0, [fp, #-4]
   1a584:	ldr	r0, [fp, #-4]
   1a588:	ldr	r0, [r0]
   1a58c:	str	r0, [sp, #8]
   1a590:	ldr	r0, [fp, #-4]
   1a594:	ldr	r0, [r0]
   1a598:	movw	r1, #0
   1a59c:	cmp	r0, r1
   1a5a0:	bne	1a5a8 <flatcc_emitter_reset@@Base+0x34>
   1a5a4:	b	1a704 <flatcc_emitter_reset@@Base+0x190>
   1a5a8:	ldr	r0, [fp, #-4]
   1a5ac:	ldr	r0, [r0]
   1a5b0:	ldr	r1, [fp, #-4]
   1a5b4:	str	r0, [r1, #4]
   1a5b8:	ldr	r0, [fp, #-4]
   1a5bc:	ldr	r0, [r0]
   1a5c0:	add	r0, r0, #1472	; 0x5c0
   1a5c4:	ldr	r1, [fp, #-4]
   1a5c8:	str	r0, [r1, #8]
   1a5cc:	ldr	r0, [fp, #-4]
   1a5d0:	ldr	r0, [r0, #8]
   1a5d4:	ldr	r1, [fp, #-4]
   1a5d8:	str	r0, [r1, #16]
   1a5dc:	ldr	r0, [fp, #-4]
   1a5e0:	movw	r1, #1472	; 0x5c0
   1a5e4:	str	r1, [r0, #12]
   1a5e8:	ldr	r0, [fp, #-4]
   1a5ec:	str	r1, [r0, #20]
   1a5f0:	ldr	r0, [fp, #-4]
   1a5f4:	ldr	r0, [r0, #12]
   1a5f8:	movw	r1, #0
   1a5fc:	sub	r0, r1, r0
   1a600:	ldr	r1, [fp, #-4]
   1a604:	ldr	r1, [r1]
   1a608:	str	r0, [r1, #2952]	; 0xb88
   1a60c:	ldr	r0, [fp, #-4]
   1a610:	ldr	r0, [r0, #32]
   1a614:	cmp	r0, #0
   1a618:	bne	1a62c <flatcc_emitter_reset@@Base+0xb8>
   1a61c:	ldr	r0, [fp, #-4]
   1a620:	ldr	r0, [r0, #24]
   1a624:	ldr	r1, [fp, #-4]
   1a628:	str	r0, [r1, #32]
   1a62c:	ldr	r0, [fp, #-4]
   1a630:	ldr	r1, [r0, #24]
   1a634:	ldr	r0, [r0, #32]
   1a638:	add	r0, r0, r0, lsl #1
   1a63c:	lsr	r0, r0, #2
   1a640:	lsr	r1, r1, #2
   1a644:	add	r0, r0, r1
   1a648:	ldr	r1, [fp, #-4]
   1a64c:	str	r0, [r1, #32]
   1a650:	ldr	r0, [fp, #-4]
   1a654:	movw	r1, #0
   1a658:	str	r1, [r0, #24]
   1a65c:	ldr	r0, [fp, #-4]
   1a660:	ldr	r0, [r0, #32]
   1a664:	lsl	r0, r0, #1
   1a668:	ldr	r1, [fp, #-4]
   1a66c:	ldr	r1, [r1, #28]
   1a670:	cmp	r0, r1
   1a674:	movw	r0, #0
   1a678:	str	r0, [sp, #4]
   1a67c:	bcs	1a6a4 <flatcc_emitter_reset@@Base+0x130>
   1a680:	ldr	r0, [fp, #-4]
   1a684:	ldr	r0, [r0, #4]
   1a688:	ldr	r0, [r0, #2944]	; 0xb80
   1a68c:	ldr	r1, [fp, #-4]
   1a690:	ldr	r1, [r1]
   1a694:	cmp	r0, r1
   1a698:	movw	r0, #0
   1a69c:	movne	r0, #1
   1a6a0:	str	r0, [sp, #4]
   1a6a4:	ldr	r0, [sp, #4]
   1a6a8:	tst	r0, #1
   1a6ac:	beq	1a704 <flatcc_emitter_reset@@Base+0x190>
   1a6b0:	ldr	r0, [fp, #-4]
   1a6b4:	ldr	r0, [r0, #4]
   1a6b8:	ldr	r0, [r0, #2944]	; 0xb80
   1a6bc:	str	r0, [sp, #8]
   1a6c0:	ldr	r0, [sp, #8]
   1a6c4:	ldr	r0, [r0, #2944]	; 0xb80
   1a6c8:	ldr	r1, [fp, #-4]
   1a6cc:	ldr	r1, [r1, #4]
   1a6d0:	str	r0, [r1, #2944]	; 0xb80
   1a6d4:	ldr	r0, [fp, #-4]
   1a6d8:	ldr	r0, [r0, #4]
   1a6dc:	ldr	r1, [sp, #8]
   1a6e0:	ldr	r1, [r1, #2944]	; 0xb80
   1a6e4:	str	r0, [r1, #2948]	; 0xb84
   1a6e8:	ldr	r0, [sp, #8]
   1a6ec:	bl	128cc <free@plt>
   1a6f0:	ldr	r0, [fp, #-4]
   1a6f4:	ldr	r1, [r0, #28]
   1a6f8:	sub	r1, r1, #2944	; 0xb80
   1a6fc:	str	r1, [r0, #28]
   1a700:	b	1a65c <flatcc_emitter_reset@@Base+0xe8>
   1a704:	mov	sp, fp
   1a708:	pop	{fp, pc}

0001a70c <flatcc_emitter_clear@@Base>:
   1a70c:	push	{fp, lr}
   1a710:	mov	fp, sp
   1a714:	sub	sp, sp, #8
   1a718:	str	r0, [sp, #4]
   1a71c:	ldr	r0, [sp, #4]
   1a720:	ldr	r0, [r0]
   1a724:	str	r0, [sp]
   1a728:	ldr	r0, [sp]
   1a72c:	movw	r1, #0
   1a730:	cmp	r0, r1
   1a734:	bne	1a73c <flatcc_emitter_clear@@Base+0x30>
   1a738:	b	1a798 <flatcc_emitter_clear@@Base+0x8c>
   1a73c:	ldr	r0, [sp]
   1a740:	ldr	r0, [r0, #2948]	; 0xb84
   1a744:	movw	r1, #0
   1a748:	str	r1, [r0, #2944]	; 0xb80
   1a74c:	ldr	r0, [sp]
   1a750:	ldr	r0, [r0, #2944]	; 0xb80
   1a754:	movw	r1, #0
   1a758:	cmp	r0, r1
   1a75c:	beq	1a77c <flatcc_emitter_clear@@Base+0x70>
   1a760:	ldr	r0, [sp]
   1a764:	ldr	r0, [r0, #2944]	; 0xb80
   1a768:	str	r0, [sp]
   1a76c:	ldr	r0, [sp]
   1a770:	ldr	r0, [r0, #2948]	; 0xb84
   1a774:	bl	128cc <free@plt>
   1a778:	b	1a74c <flatcc_emitter_clear@@Base+0x40>
   1a77c:	ldr	r0, [sp]
   1a780:	bl	128cc <free@plt>
   1a784:	ldr	r0, [sp, #4]
   1a788:	movw	r1, #0
   1a78c:	and	r1, r1, #255	; 0xff
   1a790:	movw	r2, #36	; 0x24
   1a794:	bl	1295c <memset@plt>
   1a798:	mov	sp, fp
   1a79c:	pop	{fp, pc}

0001a7a0 <flatcc_emitter@@Base>:
   1a7a0:	push	{fp, lr}
   1a7a4:	mov	fp, sp
   1a7a8:	sub	sp, sp, #32
   1a7ac:	ldr	ip, [fp, #8]
   1a7b0:	str	r0, [fp, #-8]
   1a7b4:	str	r1, [fp, #-12]
   1a7b8:	str	r2, [sp, #16]
   1a7bc:	str	r3, [sp, #12]
   1a7c0:	ldr	r0, [fp, #-8]
   1a7c4:	str	r0, [sp, #8]
   1a7c8:	ldr	r0, [fp, #8]
   1a7cc:	ldr	r1, [sp, #8]
   1a7d0:	ldr	r2, [r1, #24]
   1a7d4:	add	r0, r2, r0
   1a7d8:	str	r0, [r1, #24]
   1a7dc:	ldr	r0, [sp, #12]
   1a7e0:	cmp	r0, #0
   1a7e4:	bge	1a8a8 <flatcc_emitter@@Base+0x108>
   1a7e8:	ldr	r0, [fp, #8]
   1a7ec:	ldr	r1, [sp, #8]
   1a7f0:	ldr	r1, [r1, #12]
   1a7f4:	cmp	r0, r1
   1a7f8:	bhi	1a83c <flatcc_emitter@@Base+0x9c>
   1a7fc:	ldr	r0, [fp, #8]
   1a800:	ldr	r1, [sp, #8]
   1a804:	ldr	r2, [r1, #8]
   1a808:	movw	r3, #0
   1a80c:	sub	r0, r3, r0
   1a810:	add	r0, r2, r0
   1a814:	str	r0, [r1, #8]
   1a818:	ldr	r0, [fp, #8]
   1a81c:	ldr	r1, [sp, #8]
   1a820:	ldr	r2, [r1, #12]
   1a824:	sub	r0, r2, r0
   1a828:	str	r0, [r1, #12]
   1a82c:	ldr	r0, [sp, #8]
   1a830:	ldr	r0, [r0, #8]
   1a834:	str	r0, [sp, #4]
   1a838:	b	1a95c <flatcc_emitter@@Base+0x1bc>
   1a83c:	ldr	r0, [sp, #16]
   1a840:	ldr	r1, [fp, #-12]
   1a844:	add	r0, r1, r0, lsl #3
   1a848:	str	r0, [fp, #-12]
   1a84c:	ldr	r0, [sp, #16]
   1a850:	mvn	r1, #0
   1a854:	add	r1, r0, r1
   1a858:	str	r1, [sp, #16]
   1a85c:	cmp	r0, #0
   1a860:	beq	1a8a4 <flatcc_emitter@@Base+0x104>
   1a864:	ldr	r0, [fp, #-12]
   1a868:	mvn	r1, #7
   1a86c:	add	r0, r0, r1
   1a870:	str	r0, [fp, #-12]
   1a874:	ldr	r0, [sp, #8]
   1a878:	ldr	r1, [fp, #-12]
   1a87c:	ldr	r1, [r1]
   1a880:	ldr	r2, [fp, #-12]
   1a884:	ldr	r2, [r2, #4]
   1a888:	bl	1a9c8 <flatcc_emitter@@Base+0x228>
   1a88c:	cmp	r0, #0
   1a890:	beq	1a8a0 <flatcc_emitter@@Base+0x100>
   1a894:	mvn	r0, #0
   1a898:	str	r0, [fp, #-4]
   1a89c:	b	1a9bc <flatcc_emitter@@Base+0x21c>
   1a8a0:	b	1a84c <flatcc_emitter@@Base+0xac>
   1a8a4:	b	1a950 <flatcc_emitter@@Base+0x1b0>
   1a8a8:	ldr	r0, [fp, #8]
   1a8ac:	ldr	r1, [sp, #8]
   1a8b0:	ldr	r1, [r1, #20]
   1a8b4:	cmp	r0, r1
   1a8b8:	bhi	1a8f4 <flatcc_emitter@@Base+0x154>
   1a8bc:	ldr	r0, [sp, #8]
   1a8c0:	ldr	r0, [r0, #16]
   1a8c4:	str	r0, [sp, #4]
   1a8c8:	ldr	r0, [fp, #8]
   1a8cc:	ldr	r1, [sp, #8]
   1a8d0:	ldr	r2, [r1, #16]
   1a8d4:	add	r0, r2, r0
   1a8d8:	str	r0, [r1, #16]
   1a8dc:	ldr	r0, [fp, #8]
   1a8e0:	ldr	r1, [sp, #8]
   1a8e4:	ldr	r2, [r1, #20]
   1a8e8:	sub	r0, r2, r0
   1a8ec:	str	r0, [r1, #20]
   1a8f0:	b	1a95c <flatcc_emitter@@Base+0x1bc>
   1a8f4:	b	1a8f8 <flatcc_emitter@@Base+0x158>
   1a8f8:	ldr	r0, [sp, #16]
   1a8fc:	mvn	r1, #0
   1a900:	add	r1, r0, r1
   1a904:	str	r1, [sp, #16]
   1a908:	cmp	r0, #0
   1a90c:	beq	1a94c <flatcc_emitter@@Base+0x1ac>
   1a910:	ldr	r0, [sp, #8]
   1a914:	ldr	r1, [fp, #-12]
   1a918:	ldr	r1, [r1]
   1a91c:	ldr	r2, [fp, #-12]
   1a920:	ldr	r2, [r2, #4]
   1a924:	bl	1aad4 <flatcc_emitter@@Base+0x334>
   1a928:	cmp	r0, #0
   1a92c:	beq	1a93c <flatcc_emitter@@Base+0x19c>
   1a930:	mvn	r0, #0
   1a934:	str	r0, [fp, #-4]
   1a938:	b	1a9bc <flatcc_emitter@@Base+0x21c>
   1a93c:	ldr	r0, [fp, #-12]
   1a940:	add	r0, r0, #8
   1a944:	str	r0, [fp, #-12]
   1a948:	b	1a8f8 <flatcc_emitter@@Base+0x158>
   1a94c:	b	1a950 <flatcc_emitter@@Base+0x1b0>
   1a950:	movw	r0, #0
   1a954:	str	r0, [fp, #-4]
   1a958:	b	1a9bc <flatcc_emitter@@Base+0x21c>
   1a95c:	b	1a960 <flatcc_emitter@@Base+0x1c0>
   1a960:	ldr	r0, [sp, #16]
   1a964:	mvn	r1, #0
   1a968:	add	r1, r0, r1
   1a96c:	str	r1, [sp, #16]
   1a970:	cmp	r0, #0
   1a974:	beq	1a9b4 <flatcc_emitter@@Base+0x214>
   1a978:	ldr	r0, [sp, #4]
   1a97c:	ldr	r1, [fp, #-12]
   1a980:	ldr	r1, [r1]
   1a984:	ldr	r2, [fp, #-12]
   1a988:	ldr	r2, [r2, #4]
   1a98c:	bl	128d8 <memcpy@plt>
   1a990:	ldr	r0, [fp, #-12]
   1a994:	ldr	r0, [r0, #4]
   1a998:	ldr	r1, [sp, #4]
   1a99c:	add	r0, r1, r0
   1a9a0:	str	r0, [sp, #4]
   1a9a4:	ldr	r0, [fp, #-12]
   1a9a8:	add	r0, r0, #8
   1a9ac:	str	r0, [fp, #-12]
   1a9b0:	b	1a960 <flatcc_emitter@@Base+0x1c0>
   1a9b4:	movw	r0, #0
   1a9b8:	str	r0, [fp, #-4]
   1a9bc:	ldr	r0, [fp, #-4]
   1a9c0:	mov	sp, fp
   1a9c4:	pop	{fp, pc}
   1a9c8:	push	{fp, lr}
   1a9cc:	mov	fp, sp
   1a9d0:	sub	sp, sp, #24
   1a9d4:	str	r0, [fp, #-8]
   1a9d8:	str	r1, [sp, #12]
   1a9dc:	str	r2, [sp, #8]
   1a9e0:	ldr	r0, [sp, #8]
   1a9e4:	ldr	r1, [sp, #12]
   1a9e8:	add	r0, r1, r0
   1a9ec:	str	r0, [sp, #12]
   1a9f0:	ldr	r0, [sp, #8]
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1aac0 <flatcc_emitter@@Base+0x320>
   1a9fc:	ldr	r0, [sp, #8]
   1aa00:	str	r0, [sp, #4]
   1aa04:	ldr	r0, [sp, #4]
   1aa08:	ldr	r1, [fp, #-8]
   1aa0c:	ldr	r1, [r1, #12]
   1aa10:	cmp	r0, r1
   1aa14:	bls	1aa54 <flatcc_emitter@@Base+0x2b4>
   1aa18:	ldr	r0, [fp, #-8]
   1aa1c:	ldr	r0, [r0, #12]
   1aa20:	str	r0, [sp, #4]
   1aa24:	ldr	r0, [sp, #4]
   1aa28:	cmp	r0, #0
   1aa2c:	bne	1aa50 <flatcc_emitter@@Base+0x2b0>
   1aa30:	ldr	r0, [fp, #-8]
   1aa34:	bl	1ad10 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa4c <flatcc_emitter@@Base+0x2ac>
   1aa40:	mvn	r0, #0
   1aa44:	str	r0, [fp, #-4]
   1aa48:	b	1aac8 <flatcc_emitter@@Base+0x328>
   1aa4c:	b	1a9f0 <flatcc_emitter@@Base+0x250>
   1aa50:	b	1aa54 <flatcc_emitter@@Base+0x2b4>
   1aa54:	ldr	r0, [sp, #4]
   1aa58:	ldr	r1, [fp, #-8]
   1aa5c:	ldr	r2, [r1, #8]
   1aa60:	movw	r3, #0
   1aa64:	sub	r0, r3, r0
   1aa68:	add	r0, r2, r0
   1aa6c:	str	r0, [r1, #8]
   1aa70:	ldr	r0, [sp, #4]
   1aa74:	ldr	r1, [fp, #-8]
   1aa78:	ldr	r2, [r1, #12]
   1aa7c:	sub	r0, r2, r0
   1aa80:	str	r0, [r1, #12]
   1aa84:	ldr	r0, [sp, #4]
   1aa88:	ldr	r1, [sp, #12]
   1aa8c:	sub	r0, r3, r0
   1aa90:	add	r0, r1, r0
   1aa94:	str	r0, [sp, #12]
   1aa98:	ldr	r0, [sp, #4]
   1aa9c:	ldr	r1, [sp, #8]
   1aaa0:	sub	r0, r1, r0
   1aaa4:	str	r0, [sp, #8]
   1aaa8:	ldr	r0, [fp, #-8]
   1aaac:	ldr	r0, [r0, #8]
   1aab0:	ldr	r1, [sp, #12]
   1aab4:	ldr	r2, [sp, #4]
   1aab8:	bl	128d8 <memcpy@plt>
   1aabc:	b	1a9f0 <flatcc_emitter@@Base+0x250>
   1aac0:	movw	r0, #0
   1aac4:	str	r0, [fp, #-4]
   1aac8:	ldr	r0, [fp, #-4]
   1aacc:	mov	sp, fp
   1aad0:	pop	{fp, pc}
   1aad4:	push	{fp, lr}
   1aad8:	mov	fp, sp
   1aadc:	sub	sp, sp, #24
   1aae0:	str	r0, [fp, #-8]
   1aae4:	str	r1, [sp, #12]
   1aae8:	str	r2, [sp, #8]
   1aaec:	ldr	r0, [sp, #8]
   1aaf0:	cmp	r0, #0
   1aaf4:	beq	1abb0 <flatcc_emitter@@Base+0x410>
   1aaf8:	ldr	r0, [sp, #8]
   1aafc:	str	r0, [sp, #4]
   1ab00:	ldr	r0, [sp, #4]
   1ab04:	ldr	r1, [fp, #-8]
   1ab08:	ldr	r1, [r1, #20]
   1ab0c:	cmp	r0, r1
   1ab10:	bls	1ab50 <flatcc_emitter@@Base+0x3b0>
   1ab14:	ldr	r0, [fp, #-8]
   1ab18:	ldr	r0, [r0, #20]
   1ab1c:	str	r0, [sp, #4]
   1ab20:	ldr	r0, [sp, #4]
   1ab24:	cmp	r0, #0
   1ab28:	bne	1ab4c <flatcc_emitter@@Base+0x3ac>
   1ab2c:	ldr	r0, [fp, #-8]
   1ab30:	bl	1af10 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1ab34:	cmp	r0, #0
   1ab38:	beq	1ab48 <flatcc_emitter@@Base+0x3a8>
   1ab3c:	mvn	r0, #0
   1ab40:	str	r0, [fp, #-4]
   1ab44:	b	1abb8 <flatcc_emitter@@Base+0x418>
   1ab48:	b	1aaec <flatcc_emitter@@Base+0x34c>
   1ab4c:	b	1ab50 <flatcc_emitter@@Base+0x3b0>
   1ab50:	ldr	r0, [fp, #-8]
   1ab54:	ldr	r0, [r0, #16]
   1ab58:	ldr	r1, [sp, #12]
   1ab5c:	ldr	r2, [sp, #4]
   1ab60:	bl	128d8 <memcpy@plt>
   1ab64:	ldr	r0, [sp, #4]
   1ab68:	ldr	r1, [sp, #8]
   1ab6c:	sub	r0, r1, r0
   1ab70:	str	r0, [sp, #8]
   1ab74:	ldr	r0, [sp, #4]
   1ab78:	ldr	r1, [sp, #12]
   1ab7c:	add	r0, r1, r0
   1ab80:	str	r0, [sp, #12]
   1ab84:	ldr	r0, [sp, #4]
   1ab88:	ldr	r1, [fp, #-8]
   1ab8c:	ldr	r2, [r1, #16]
   1ab90:	add	r0, r2, r0
   1ab94:	str	r0, [r1, #16]
   1ab98:	ldr	r0, [sp, #4]
   1ab9c:	ldr	r1, [fp, #-8]
   1aba0:	ldr	r2, [r1, #20]
   1aba4:	sub	r0, r2, r0
   1aba8:	str	r0, [r1, #20]
   1abac:	b	1aaec <flatcc_emitter@@Base+0x34c>
   1abb0:	movw	r0, #0
   1abb4:	str	r0, [fp, #-4]
   1abb8:	ldr	r0, [fp, #-4]
   1abbc:	mov	sp, fp
   1abc0:	pop	{fp, pc}

0001abc4 <flatcc_emitter_copy_buffer@@Base>:
   1abc4:	push	{fp, lr}
   1abc8:	mov	fp, sp
   1abcc:	sub	sp, sp, #24
   1abd0:	str	r0, [fp, #-8]
   1abd4:	str	r1, [sp, #12]
   1abd8:	str	r2, [sp, #8]
   1abdc:	ldr	r0, [sp, #8]
   1abe0:	ldr	r1, [fp, #-8]
   1abe4:	ldr	r1, [r1, #24]
   1abe8:	cmp	r0, r1
   1abec:	bcs	1abfc <flatcc_emitter_copy_buffer@@Base+0x38>
   1abf0:	movw	r0, #0
   1abf4:	str	r0, [fp, #-4]
   1abf8:	b	1ad04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1abfc:	ldr	r0, [fp, #-8]
   1ac00:	ldr	r0, [r0]
   1ac04:	movw	r1, #0
   1ac08:	cmp	r0, r1
   1ac0c:	bne	1ac1c <flatcc_emitter_copy_buffer@@Base+0x58>
   1ac10:	movw	r0, #0
   1ac14:	str	r0, [fp, #-4]
   1ac18:	b	1ad04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1ac1c:	ldr	r0, [fp, #-8]
   1ac20:	ldr	r0, [r0]
   1ac24:	ldr	r1, [fp, #-8]
   1ac28:	ldr	r1, [r1, #4]
   1ac2c:	cmp	r0, r1
   1ac30:	bne	1ac58 <flatcc_emitter_copy_buffer@@Base+0x94>
   1ac34:	ldr	r0, [sp, #12]
   1ac38:	ldr	r1, [fp, #-8]
   1ac3c:	ldr	r1, [r1, #8]
   1ac40:	ldr	r2, [fp, #-8]
   1ac44:	ldr	r2, [r2, #24]
   1ac48:	bl	128d8 <memcpy@plt>
   1ac4c:	ldr	r0, [sp, #12]
   1ac50:	str	r0, [fp, #-4]
   1ac54:	b	1ad04 <flatcc_emitter_copy_buffer@@Base+0x140>
   1ac58:	ldr	r0, [fp, #-8]
   1ac5c:	ldr	r0, [r0, #12]
   1ac60:	movw	r1, #2944	; 0xb80
   1ac64:	sub	r0, r1, r0
   1ac68:	str	r0, [sp]
   1ac6c:	ldr	r0, [sp, #12]
   1ac70:	ldr	r1, [fp, #-8]
   1ac74:	ldr	r1, [r1, #8]
   1ac78:	ldr	r2, [sp]
   1ac7c:	bl	128d8 <memcpy@plt>
   1ac80:	ldr	r0, [sp, #12]
   1ac84:	ldr	r1, [sp]
   1ac88:	add	r0, r0, r1
   1ac8c:	str	r0, [sp, #12]
   1ac90:	ldr	r0, [fp, #-8]
   1ac94:	ldr	r0, [r0]
   1ac98:	ldr	r0, [r0, #2944]	; 0xb80
   1ac9c:	str	r0, [sp, #4]
   1aca0:	ldr	r0, [sp, #4]
   1aca4:	ldr	r1, [fp, #-8]
   1aca8:	ldr	r1, [r1, #4]
   1acac:	cmp	r0, r1
   1acb0:	beq	1ace0 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1acb4:	ldr	r0, [sp, #12]
   1acb8:	ldr	r1, [sp, #4]
   1acbc:	movw	r2, #2944	; 0xb80
   1acc0:	bl	128d8 <memcpy@plt>
   1acc4:	ldr	r0, [sp, #12]
   1acc8:	add	r0, r0, #2944	; 0xb80
   1accc:	str	r0, [sp, #12]
   1acd0:	ldr	r0, [sp, #4]
   1acd4:	ldr	r0, [r0, #2944]	; 0xb80
   1acd8:	str	r0, [sp, #4]
   1acdc:	b	1aca0 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1ace0:	ldr	r0, [sp, #12]
   1ace4:	ldr	r1, [sp, #4]
   1ace8:	ldr	r2, [fp, #-8]
   1acec:	ldr	r2, [r2, #20]
   1acf0:	movw	r3, #2944	; 0xb80
   1acf4:	sub	r2, r3, r2
   1acf8:	bl	128d8 <memcpy@plt>
   1acfc:	ldr	r0, [sp, #12]
   1ad00:	str	r0, [fp, #-4]
   1ad04:	ldr	r0, [fp, #-4]
   1ad08:	mov	sp, fp
   1ad0c:	pop	{fp, pc}
   1ad10:	push	{fp, lr}
   1ad14:	mov	fp, sp
   1ad18:	sub	sp, sp, #16
   1ad1c:	str	r0, [sp, #8]
   1ad20:	movw	r0, #0
   1ad24:	str	r0, [sp, #4]
   1ad28:	ldr	r1, [sp, #8]
   1ad2c:	ldr	r1, [r1]
   1ad30:	cmp	r1, r0
   1ad34:	beq	1ad8c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1ad38:	ldr	r0, [sp, #8]
   1ad3c:	ldr	r0, [r0]
   1ad40:	ldr	r0, [r0, #2948]	; 0xb84
   1ad44:	ldr	r1, [sp, #8]
   1ad48:	ldr	r1, [r1, #4]
   1ad4c:	cmp	r0, r1
   1ad50:	beq	1ad8c <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1ad54:	ldr	r0, [sp, #8]
   1ad58:	ldr	r0, [r0]
   1ad5c:	ldr	r0, [r0, #2952]	; 0xb88
   1ad60:	sub	r0, r0, #2944	; 0xb80
   1ad64:	ldr	r1, [sp, #8]
   1ad68:	ldr	r1, [r1]
   1ad6c:	ldr	r1, [r1, #2948]	; 0xb84
   1ad70:	str	r0, [r1, #2952]	; 0xb88
   1ad74:	ldr	r0, [sp, #8]
   1ad78:	ldr	r0, [r0]
   1ad7c:	ldr	r0, [r0, #2948]	; 0xb84
   1ad80:	ldr	r1, [sp, #8]
   1ad84:	str	r0, [r1]
   1ad88:	b	1aebc <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1ad8c:	movw	r0, #2956	; 0xb8c
   1ad90:	bl	12914 <malloc@plt>
   1ad94:	str	r0, [sp, #4]
   1ad98:	movw	r1, #0
   1ad9c:	cmp	r0, r1
   1ada0:	bne	1adb0 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1ada4:	mvn	r0, #0
   1ada8:	str	r0, [fp, #-4]
   1adac:	b	1af04 <flatcc_emitter_copy_buffer@@Base+0x340>
   1adb0:	ldr	r0, [sp, #8]
   1adb4:	ldr	r1, [r0, #28]
   1adb8:	add	r1, r1, #2944	; 0xb80
   1adbc:	str	r1, [r0, #28]
   1adc0:	ldr	r0, [sp, #8]
   1adc4:	ldr	r0, [r0]
   1adc8:	movw	r1, #0
   1adcc:	cmp	r0, r1
   1add0:	beq	1ae24 <flatcc_emitter_copy_buffer@@Base+0x260>
   1add4:	ldr	r0, [sp, #8]
   1add8:	ldr	r0, [r0, #4]
   1addc:	ldr	r1, [sp, #4]
   1ade0:	str	r0, [r1, #2948]	; 0xb84
   1ade4:	ldr	r0, [sp, #8]
   1ade8:	ldr	r0, [r0]
   1adec:	ldr	r1, [sp, #4]
   1adf0:	str	r0, [r1, #2944]	; 0xb80
   1adf4:	ldr	r0, [sp, #4]
   1adf8:	ldr	r1, [sp, #8]
   1adfc:	ldr	r1, [r1]
   1ae00:	str	r0, [r1, #2948]	; 0xb84
   1ae04:	ldr	r0, [sp, #4]
   1ae08:	ldr	r1, [sp, #8]
   1ae0c:	ldr	r1, [r1, #4]
   1ae10:	str	r0, [r1, #2944]	; 0xb80
   1ae14:	ldr	r0, [sp, #4]
   1ae18:	ldr	r1, [sp, #8]
   1ae1c:	str	r0, [r1]
   1ae20:	b	1aebc <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1ae24:	ldr	r0, [sp, #4]
   1ae28:	ldr	r1, [sp, #8]
   1ae2c:	str	r0, [r1]
   1ae30:	ldr	r0, [sp, #4]
   1ae34:	ldr	r1, [sp, #8]
   1ae38:	str	r0, [r1, #4]
   1ae3c:	ldr	r0, [sp, #4]
   1ae40:	ldr	r1, [sp, #4]
   1ae44:	str	r0, [r1, #2944]	; 0xb80
   1ae48:	ldr	r0, [sp, #4]
   1ae4c:	ldr	r1, [sp, #4]
   1ae50:	str	r0, [r1, #2948]	; 0xb84
   1ae54:	ldr	r0, [sp, #8]
   1ae58:	ldr	r0, [r0]
   1ae5c:	add	r0, r0, #1472	; 0x5c0
   1ae60:	ldr	r1, [sp, #8]
   1ae64:	str	r0, [r1, #8]
   1ae68:	ldr	r0, [sp, #8]
   1ae6c:	ldr	r0, [r0, #8]
   1ae70:	ldr	r1, [sp, #8]
   1ae74:	str	r0, [r1, #16]
   1ae78:	ldr	r0, [sp, #8]
   1ae7c:	movw	r1, #1472	; 0x5c0
   1ae80:	str	r1, [r0, #12]
   1ae84:	ldr	r0, [sp, #8]
   1ae88:	ldr	r0, [r0, #12]
   1ae8c:	movw	r1, #2944	; 0xb80
   1ae90:	sub	r0, r1, r0
   1ae94:	ldr	r1, [sp, #8]
   1ae98:	str	r0, [r1, #20]
   1ae9c:	ldr	r0, [sp, #8]
   1aea0:	ldr	r0, [r0, #12]
   1aea4:	movw	r1, #0
   1aea8:	sub	r0, r1, r0
   1aeac:	ldr	r2, [sp, #4]
   1aeb0:	str	r0, [r2, #2952]	; 0xb88
   1aeb4:	str	r1, [fp, #-4]
   1aeb8:	b	1af04 <flatcc_emitter_copy_buffer@@Base+0x340>
   1aebc:	ldr	r0, [sp, #8]
   1aec0:	ldr	r0, [r0]
   1aec4:	add	r0, r0, #2944	; 0xb80
   1aec8:	ldr	r1, [sp, #8]
   1aecc:	str	r0, [r1, #8]
   1aed0:	ldr	r0, [sp, #8]
   1aed4:	movw	r1, #2944	; 0xb80
   1aed8:	str	r1, [r0, #12]
   1aedc:	ldr	r0, [sp, #8]
   1aee0:	ldr	r0, [r0]
   1aee4:	ldr	r0, [r0, #2944]	; 0xb80
   1aee8:	ldr	r0, [r0, #2952]	; 0xb88
   1aeec:	sub	r0, r0, #2944	; 0xb80
   1aef0:	ldr	r1, [sp, #8]
   1aef4:	ldr	r1, [r1]
   1aef8:	str	r0, [r1, #2952]	; 0xb88
   1aefc:	movw	r0, #0
   1af00:	str	r0, [fp, #-4]
   1af04:	ldr	r0, [fp, #-4]
   1af08:	mov	sp, fp
   1af0c:	pop	{fp, pc}
   1af10:	push	{fp, lr}
   1af14:	mov	fp, sp
   1af18:	sub	sp, sp, #16
   1af1c:	str	r0, [sp, #8]
   1af20:	movw	r0, #0
   1af24:	str	r0, [sp, #4]
   1af28:	ldr	r1, [sp, #8]
   1af2c:	ldr	r1, [r1, #4]
   1af30:	cmp	r1, r0
   1af34:	beq	1af6c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1af38:	ldr	r0, [sp, #8]
   1af3c:	ldr	r0, [r0, #4]
   1af40:	ldr	r0, [r0, #2944]	; 0xb80
   1af44:	ldr	r1, [sp, #8]
   1af48:	ldr	r1, [r1]
   1af4c:	cmp	r0, r1
   1af50:	beq	1af6c <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1af54:	ldr	r0, [sp, #8]
   1af58:	ldr	r0, [r0, #4]
   1af5c:	ldr	r0, [r0, #2944]	; 0xb80
   1af60:	ldr	r1, [sp, #8]
   1af64:	str	r0, [r1, #4]
   1af68:	b	1b09c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1af6c:	movw	r0, #2956	; 0xb8c
   1af70:	bl	12914 <malloc@plt>
   1af74:	str	r0, [sp, #4]
   1af78:	movw	r1, #0
   1af7c:	cmp	r0, r1
   1af80:	bne	1af90 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1af84:	mvn	r0, #0
   1af88:	str	r0, [fp, #-4]
   1af8c:	b	1b0e0 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1af90:	ldr	r0, [sp, #8]
   1af94:	ldr	r1, [r0, #28]
   1af98:	add	r1, r1, #2944	; 0xb80
   1af9c:	str	r1, [r0, #28]
   1afa0:	ldr	r0, [sp, #8]
   1afa4:	ldr	r0, [r0, #4]
   1afa8:	movw	r1, #0
   1afac:	cmp	r0, r1
   1afb0:	beq	1b004 <flatcc_emitter_copy_buffer@@Base+0x440>
   1afb4:	ldr	r0, [sp, #8]
   1afb8:	ldr	r0, [r0, #4]
   1afbc:	ldr	r1, [sp, #4]
   1afc0:	str	r0, [r1, #2948]	; 0xb84
   1afc4:	ldr	r0, [sp, #8]
   1afc8:	ldr	r0, [r0]
   1afcc:	ldr	r1, [sp, #4]
   1afd0:	str	r0, [r1, #2944]	; 0xb80
   1afd4:	ldr	r0, [sp, #4]
   1afd8:	ldr	r1, [sp, #8]
   1afdc:	ldr	r1, [r1]
   1afe0:	str	r0, [r1, #2948]	; 0xb84
   1afe4:	ldr	r0, [sp, #4]
   1afe8:	ldr	r1, [sp, #8]
   1afec:	ldr	r1, [r1, #4]
   1aff0:	str	r0, [r1, #2944]	; 0xb80
   1aff4:	ldr	r0, [sp, #4]
   1aff8:	ldr	r1, [sp, #8]
   1affc:	str	r0, [r1, #4]
   1b000:	b	1b09c <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1b004:	ldr	r0, [sp, #4]
   1b008:	ldr	r1, [sp, #8]
   1b00c:	str	r0, [r1]
   1b010:	ldr	r0, [sp, #4]
   1b014:	ldr	r1, [sp, #8]
   1b018:	str	r0, [r1, #4]
   1b01c:	ldr	r0, [sp, #4]
   1b020:	ldr	r1, [sp, #4]
   1b024:	str	r0, [r1, #2944]	; 0xb80
   1b028:	ldr	r0, [sp, #4]
   1b02c:	ldr	r1, [sp, #4]
   1b030:	str	r0, [r1, #2948]	; 0xb84
   1b034:	ldr	r0, [sp, #8]
   1b038:	ldr	r0, [r0]
   1b03c:	add	r0, r0, #1472	; 0x5c0
   1b040:	ldr	r1, [sp, #8]
   1b044:	str	r0, [r1, #8]
   1b048:	ldr	r0, [sp, #8]
   1b04c:	ldr	r0, [r0, #8]
   1b050:	ldr	r1, [sp, #8]
   1b054:	str	r0, [r1, #16]
   1b058:	ldr	r0, [sp, #8]
   1b05c:	movw	r1, #1472	; 0x5c0
   1b060:	str	r1, [r0, #12]
   1b064:	ldr	r0, [sp, #8]
   1b068:	ldr	r0, [r0, #12]
   1b06c:	movw	r1, #2944	; 0xb80
   1b070:	sub	r0, r1, r0
   1b074:	ldr	r1, [sp, #8]
   1b078:	str	r0, [r1, #20]
   1b07c:	ldr	r0, [sp, #8]
   1b080:	ldr	r0, [r0, #12]
   1b084:	movw	r1, #0
   1b088:	sub	r0, r1, r0
   1b08c:	ldr	r2, [sp, #4]
   1b090:	str	r0, [r2, #2952]	; 0xb88
   1b094:	str	r1, [fp, #-4]
   1b098:	b	1b0e0 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1b09c:	ldr	r0, [sp, #8]
   1b0a0:	ldr	r0, [r0, #4]
   1b0a4:	ldr	r1, [sp, #8]
   1b0a8:	str	r0, [r1, #16]
   1b0ac:	ldr	r0, [sp, #8]
   1b0b0:	movw	r1, #2944	; 0xb80
   1b0b4:	str	r1, [r0, #20]
   1b0b8:	ldr	r0, [sp, #8]
   1b0bc:	ldr	r0, [r0, #4]
   1b0c0:	ldr	r0, [r0, #2948]	; 0xb84
   1b0c4:	ldr	r0, [r0, #2952]	; 0xb88
   1b0c8:	add	r0, r0, #2944	; 0xb80
   1b0cc:	ldr	r1, [sp, #8]
   1b0d0:	ldr	r1, [r1, #4]
   1b0d4:	str	r0, [r1, #2952]	; 0xb88
   1b0d8:	movw	r0, #0
   1b0dc:	str	r0, [fp, #-4]
   1b0e0:	ldr	r0, [fp, #-4]
   1b0e4:	mov	sp, fp
   1b0e8:	pop	{fp, pc}
   1b0ec:	andeq	r0, r0, r0

0001b0f0 <grisu3_diy_fp_encode_double@@Base>:
   1b0f0:	push	{r4, r5, r6, sl, fp, lr}
   1b0f4:	add	fp, sp, #16
   1b0f8:	sub	sp, sp, #256	; 0x100
   1b0fc:	ldr	ip, [fp, #12]
   1b100:	ldr	lr, [fp, #8]
   1b104:	str	r0, [fp, #-24]	; 0xffffffe8
   1b108:	str	r1, [fp, #-20]	; 0xffffffec
   1b10c:	str	r2, [fp, #-28]	; 0xffffffe4
   1b110:	str	r3, [fp, #-32]	; 0xffffffe0
   1b114:	mov	r0, #3
   1b118:	str	r0, [fp, #-36]	; 0xffffffdc
   1b11c:	mov	r0, #8
   1b120:	str	r0, [fp, #-40]	; 0xffffffd8
   1b124:	movw	r0, #64462	; 0xfbce
   1b128:	movt	r0, #65535	; 0xffff
   1b12c:	str	r0, [fp, #-44]	; 0xffffffd4
   1b130:	mov	r0, #1048576	; 0x100000
   1b134:	str	r0, [fp, #-52]	; 0xffffffcc
   1b138:	mov	r0, #0
   1b13c:	str	r0, [fp, #-56]	; 0xffffffc8
   1b140:	mov	r1, #64	; 0x40
   1b144:	str	r1, [fp, #-60]	; 0xffffffc4
   1b148:	mov	r1, #19
   1b14c:	str	r1, [fp, #-64]	; 0xffffffc0
   1b150:	ldr	r1, [fp, #8]
   1b154:	cmp	r1, #0
   1b158:	movwne	r1, #1
   1b15c:	lsl	r1, r1, #2
   1b160:	str	r1, [fp, #-68]	; 0xffffffbc
   1b164:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b168:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b16c:	sub	r1, r1, r2
   1b170:	str	r1, [fp, #-72]	; 0xffffffb8
   1b174:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b178:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b17c:	str	r2, [fp, #-92]	; 0xffffffa4
   1b180:	str	r1, [fp, #-96]	; 0xffffffa0
   1b184:	str	r0, [fp, #-88]	; 0xffffffa8
   1b188:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b18c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b190:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b194:	ldr	r1, [fp, #-84]	; 0xffffffac
   1b198:	mov	r4, sp
   1b19c:	str	r0, [r4]
   1b1a0:	str	r1, [r4, #4]
   1b1a4:	add	r0, sp, #112	; 0x70
   1b1a8:	str	ip, [sp, #48]	; 0x30
   1b1ac:	str	lr, [sp, #44]	; 0x2c
   1b1b0:	bl	1b648 <grisu3_diy_fp_encode_double@@Base+0x558>
   1b1b4:	ldr	r0, [sp, #112]	; 0x70
   1b1b8:	str	r0, [fp, #-96]	; 0xffffffa0
   1b1bc:	ldr	r0, [sp, #116]	; 0x74
   1b1c0:	str	r0, [fp, #-92]	; 0xffffffa4
   1b1c4:	ldr	r0, [sp, #120]	; 0x78
   1b1c8:	str	r0, [fp, #-88]	; 0xffffffa8
   1b1cc:	ldr	r0, [sp, #124]	; 0x7c
   1b1d0:	str	r0, [fp, #-84]	; 0xffffffac
   1b1d4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b1d8:	movw	r1, #0
   1b1dc:	sub	r0, r1, r0
   1b1e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b1e4:	lsl	r0, r1, r0
   1b1e8:	str	r0, [fp, #-68]	; 0xffffffbc
   1b1ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b1f0:	sub	r1, fp, #112	; 0x70
   1b1f4:	bl	1b780 <grisu3_diy_fp_encode_double@@Base+0x690>
   1b1f8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b1fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b200:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1b204:	cmp	r0, r1
   1b208:	beq	1b2f4 <grisu3_diy_fp_encode_double@@Base+0x204>
   1b20c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b210:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b214:	sub	r0, r0, r1
   1b218:	sub	r0, r0, #1
   1b21c:	str	r0, [sp, #108]	; 0x6c
   1b220:	ldr	r0, [sp, #108]	; 0x6c
   1b224:	cmp	r0, #0
   1b228:	blt	1b23c <grisu3_diy_fp_encode_double@@Base+0x14c>
   1b22c:	ldr	r0, [sp, #108]	; 0x6c
   1b230:	cmp	r0, #7
   1b234:	bge	1b23c <grisu3_diy_fp_encode_double@@Base+0x14c>
   1b238:	b	1b25c <grisu3_diy_fp_encode_double@@Base+0x16c>
   1b23c:	ldr	r0, [pc, #1004]	; 1b630 <grisu3_diy_fp_encode_double@@Base+0x540>
   1b240:	add	r0, pc, r0
   1b244:	ldr	r1, [pc, #1000]	; 1b634 <grisu3_diy_fp_encode_double@@Base+0x544>
   1b248:	add	r1, pc, r1
   1b24c:	ldr	r2, [pc, #996]	; 1b638 <grisu3_diy_fp_encode_double@@Base+0x548>
   1b250:	add	r3, pc, r2
   1b254:	movw	r2, #185	; 0xb9
   1b258:	bl	1298c <__assert_fail@plt>
   1b25c:	ldr	r0, [sp, #108]	; 0x6c
   1b260:	ldr	r1, [pc, #988]	; 1b644 <grisu3_diy_fp_encode_double@@Base+0x554>
   1b264:	add	r1, pc, r1
   1b268:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b26c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b270:	ldr	ip, [fp, #-88]	; 0xffffffa8
   1b274:	ldr	lr, [fp, #-84]	; 0xffffffac
   1b278:	ldr	r0, [r1, r0, lsl #4]!
   1b27c:	ldr	r4, [r1, #4]
   1b280:	ldr	r5, [r1, #8]
   1b284:	ldr	r1, [r1, #12]
   1b288:	mov	r6, sp
   1b28c:	str	r4, [r6, #12]
   1b290:	str	r0, [r6, #8]
   1b294:	str	r5, [r6, #16]
   1b298:	str	ip, [r6]
   1b29c:	str	r1, [r6, #20]
   1b2a0:	str	lr, [r6, #4]
   1b2a4:	add	r0, sp, #88	; 0x58
   1b2a8:	bl	1b924 <grisu3_diy_fp_encode_double@@Base+0x834>
   1b2ac:	ldr	r0, [sp, #88]	; 0x58
   1b2b0:	str	r0, [fp, #-96]	; 0xffffffa0
   1b2b4:	ldr	r0, [sp, #92]	; 0x5c
   1b2b8:	str	r0, [fp, #-92]	; 0xffffffa4
   1b2bc:	ldr	r0, [sp, #96]	; 0x60
   1b2c0:	str	r0, [fp, #-88]	; 0xffffffa8
   1b2c4:	ldr	r0, [sp, #100]	; 0x64
   1b2c8:	str	r0, [fp, #-84]	; 0xffffffac
   1b2cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b2d0:	add	r0, r0, #1
   1b2d4:	ldr	r1, [sp, #108]	; 0x6c
   1b2d8:	add	r0, r0, r1
   1b2dc:	cmp	r0, #19
   1b2e0:	ble	1b2f0 <grisu3_diy_fp_encode_double@@Base+0x200>
   1b2e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b2e8:	add	r0, r0, #4
   1b2ec:	str	r0, [fp, #-68]	; 0xffffffbc
   1b2f0:	b	1b2f4 <grisu3_diy_fp_encode_double@@Base+0x204>
   1b2f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b2f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b2fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b300:	ldr	r1, [fp, #-84]	; 0xffffffac
   1b304:	ldr	ip, [fp, #-112]	; 0xffffff90
   1b308:	ldr	lr, [fp, #-108]	; 0xffffff94
   1b30c:	ldr	r4, [fp, #-104]	; 0xffffff98
   1b310:	ldr	r5, [fp, #-100]	; 0xffffff9c
   1b314:	mov	r6, sp
   1b318:	str	r5, [r6, #20]
   1b31c:	str	r4, [r6, #16]
   1b320:	str	lr, [r6, #12]
   1b324:	str	ip, [r6, #8]
   1b328:	str	r1, [r6, #4]
   1b32c:	str	r0, [r6]
   1b330:	add	r0, sp, #72	; 0x48
   1b334:	str	r0, [sp, #40]	; 0x28
   1b338:	bl	1b924 <grisu3_diy_fp_encode_double@@Base+0x834>
   1b33c:	ldr	r0, [sp, #40]	; 0x28
   1b340:	vld1.64	{d16-d17}, [r0]
   1b344:	sub	r1, fp, #96	; 0x60
   1b348:	vst1.64	{d16-d17}, [r1]
   1b34c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b350:	add	r2, r1, #1
   1b354:	cmp	r1, #0
   1b358:	movne	r1, r2
   1b35c:	add	r1, r1, #8
   1b360:	str	r1, [fp, #-68]	; 0xffffffbc
   1b364:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b368:	str	r1, [fp, #-80]	; 0xffffffb0
   1b36c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b370:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b374:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b378:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b37c:	mov	lr, sp
   1b380:	str	r1, [lr]
   1b384:	str	ip, [lr, #4]
   1b388:	add	r0, sp, #56	; 0x38
   1b38c:	bl	1b648 <grisu3_diy_fp_encode_double@@Base+0x558>
   1b390:	ldr	r0, [pc, #676]	; 1b63c <grisu3_diy_fp_encode_double@@Base+0x54c>
   1b394:	ldr	r1, [sp, #56]	; 0x38
   1b398:	str	r1, [fp, #-96]	; 0xffffffa0
   1b39c:	ldr	r1, [sp, #60]	; 0x3c
   1b3a0:	str	r1, [fp, #-92]	; 0xffffffa4
   1b3a4:	ldr	r1, [sp, #64]	; 0x40
   1b3a8:	str	r1, [fp, #-88]	; 0xffffffa8
   1b3ac:	ldr	r1, [sp, #68]	; 0x44
   1b3b0:	str	r1, [fp, #-84]	; 0xffffffac
   1b3b4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1b3b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b3bc:	sub	r1, r1, r2
   1b3c0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b3c4:	lsl	r1, r2, r1
   1b3c8:	str	r1, [fp, #-68]	; 0xffffffbc
   1b3cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b3d0:	add	r1, r1, #64	; 0x40
   1b3d4:	str	r1, [fp, #-132]	; 0xffffff7c
   1b3d8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b3dc:	cmp	r1, r0
   1b3e0:	blt	1b3f0 <grisu3_diy_fp_encode_double@@Base+0x300>
   1b3e4:	movw	r0, #64	; 0x40
   1b3e8:	str	r0, [sp, #36]	; 0x24
   1b3ec:	b	1b424 <grisu3_diy_fp_encode_double@@Base+0x334>
   1b3f0:	ldr	r0, [pc, #584]	; 1b640 <grisu3_diy_fp_encode_double@@Base+0x550>
   1b3f4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b3f8:	cmp	r1, r0
   1b3fc:	bgt	1b40c <grisu3_diy_fp_encode_double@@Base+0x31c>
   1b400:	movw	r0, #0
   1b404:	str	r0, [sp, #32]
   1b408:	b	1b41c <grisu3_diy_fp_encode_double@@Base+0x32c>
   1b40c:	ldr	r0, [pc, #556]	; 1b640 <grisu3_diy_fp_encode_double@@Base+0x550>
   1b410:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1b414:	sub	r0, r1, r0
   1b418:	str	r0, [sp, #32]
   1b41c:	ldr	r0, [sp, #32]
   1b420:	str	r0, [sp, #36]	; 0x24
   1b424:	ldr	r0, [sp, #36]	; 0x24
   1b428:	str	r0, [fp, #-132]	; 0xffffff7c
   1b42c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1b430:	movw	r1, #64	; 0x40
   1b434:	sub	r0, r1, r0
   1b438:	str	r0, [sp, #136]	; 0x88
   1b43c:	ldr	r0, [sp, #136]	; 0x88
   1b440:	add	r0, r0, #3
   1b444:	cmp	r0, #64	; 0x40
   1b448:	blt	1b4c8 <grisu3_diy_fp_encode_double@@Base+0x3d8>
   1b44c:	ldr	r0, [sp, #136]	; 0x88
   1b450:	sub	r0, r0, #62	; 0x3e
   1b454:	str	r0, [sp, #52]	; 0x34
   1b458:	ldr	r0, [sp, #52]	; 0x34
   1b45c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   1b460:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b464:	lsr	r1, r1, r0
   1b468:	rsb	r3, r0, #32
   1b46c:	orr	r1, r1, r2, lsl r3
   1b470:	sub	r3, r0, #32
   1b474:	cmp	r3, #0
   1b478:	lsrpl	r1, r2, r3
   1b47c:	lsr	r0, r2, r0
   1b480:	cmp	r3, #0
   1b484:	movwpl	r0, #0
   1b488:	str	r0, [fp, #-92]	; 0xffffffa4
   1b48c:	str	r1, [fp, #-96]	; 0xffffffa0
   1b490:	ldr	r0, [sp, #52]	; 0x34
   1b494:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b498:	add	r0, r1, r0
   1b49c:	str	r0, [fp, #-88]	; 0xffffffa8
   1b4a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b4a4:	ldr	r1, [sp, #52]	; 0x34
   1b4a8:	asr	r0, r0, r1
   1b4ac:	add	r0, r0, #1
   1b4b0:	add	r0, r0, #8
   1b4b4:	str	r0, [fp, #-68]	; 0xffffffbc
   1b4b8:	ldr	r0, [sp, #52]	; 0x34
   1b4bc:	ldr	r1, [sp, #136]	; 0x88
   1b4c0:	sub	r0, r1, r0
   1b4c4:	str	r0, [sp, #136]	; 0x88
   1b4c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b4cc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1b4d0:	ldr	r2, [sp, #136]	; 0x88
   1b4d4:	lsr	r0, r0, r2
   1b4d8:	rsb	r3, r2, #32
   1b4dc:	orr	r0, r0, r1, lsl r3
   1b4e0:	sub	r3, r2, #32
   1b4e4:	cmp	r3, #0
   1b4e8:	lsrpl	r0, r1, r3
   1b4ec:	lsr	r1, r1, r2
   1b4f0:	cmp	r3, #0
   1b4f4:	movwpl	r1, #0
   1b4f8:	str	r1, [fp, #-124]	; 0xffffff84
   1b4fc:	str	r0, [fp, #-128]	; 0xffffff80
   1b500:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1b504:	ldr	r1, [sp, #136]	; 0x88
   1b508:	add	r0, r0, r1
   1b50c:	str	r0, [fp, #-120]	; 0xffffff88
   1b510:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b514:	ldr	r1, [sp, #136]	; 0x88
   1b518:	sub	r2, r1, #1
   1b51c:	mov	r3, #1
   1b520:	lsl	r2, r3, r2
   1b524:	sub	r1, r1, #33	; 0x21
   1b528:	cmp	r1, #0
   1b52c:	movwpl	r2, #0
   1b530:	and	r0, r0, r2
   1b534:	lsl	r0, r0, #3
   1b538:	str	r0, [sp, #132]	; 0x84
   1b53c:	ldr	r0, [sp, #136]	; 0x88
   1b540:	sub	r1, r0, #1
   1b544:	lsl	r1, r3, r1
   1b548:	sub	r0, r0, #33	; 0x21
   1b54c:	cmp	r0, #0
   1b550:	movwpl	r1, #0
   1b554:	lsl	r0, r1, #3
   1b558:	str	r0, [sp, #128]	; 0x80
   1b55c:	ldr	r0, [sp, #136]	; 0x88
   1b560:	ldr	r1, [sp, #128]	; 0x80
   1b564:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b568:	add	r1, r1, r2
   1b56c:	cmp	r0, r1
   1b570:	blt	1b5c4 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   1b574:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b578:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b57c:	adds	r0, r0, #1
   1b580:	adc	r1, r1, #0
   1b584:	str	r0, [fp, #-128]	; 0xffffff80
   1b588:	str	r1, [fp, #-124]	; 0xffffff84
   1b58c:	ldrb	r0, [fp, #-122]	; 0xffffff86
   1b590:	tst	r0, #32
   1b594:	beq	1b5c0 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   1b598:	b	1b59c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1b59c:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b5a0:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b5a4:	lsrs	r1, r1, #1
   1b5a8:	rrx	r0, r0
   1b5ac:	str	r1, [fp, #-124]	; 0xffffff84
   1b5b0:	str	r0, [fp, #-128]	; 0xffffff80
   1b5b4:	ldr	r0, [fp, #-120]	; 0xffffff88
   1b5b8:	add	r0, r0, #1
   1b5bc:	str	r0, [fp, #-120]	; 0xffffff88
   1b5c0:	b	1b5c4 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   1b5c4:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b5c8:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b5cc:	ldr	r2, [fp, #-120]	; 0xffffff88
   1b5d0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1b5d4:	bl	1bab8 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   1b5d8:	ldr	r0, [fp, #12]
   1b5dc:	vstr	d0, [r0]
   1b5e0:	ldr	r0, [sp, #128]	; 0x80
   1b5e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b5e8:	sub	r0, r0, r1
   1b5ec:	ldr	r1, [sp, #132]	; 0x84
   1b5f0:	cmp	r0, r1
   1b5f4:	movw	r0, #1
   1b5f8:	str	r0, [sp, #28]
   1b5fc:	bge	1b620 <grisu3_diy_fp_encode_double@@Base+0x530>
   1b600:	ldr	r0, [sp, #132]	; 0x84
   1b604:	ldr	r1, [sp, #128]	; 0x80
   1b608:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b60c:	add	r1, r1, r2
   1b610:	cmp	r0, r1
   1b614:	movw	r0, #0
   1b618:	movge	r0, #1
   1b61c:	str	r0, [sp, #28]
   1b620:	ldr	r0, [sp, #28]
   1b624:	and	r0, r0, #1
   1b628:	sub	sp, fp, #16
   1b62c:	pop	{r4, r5, r6, sl, fp, pc}
   1b630:	andeq	r8, r0, r8, lsl #7
   1b634:	muleq	r0, ip, r3
   1b638:	andeq	r8, r0, r2, lsl #8
   1b63c:			; <UNDEFINED> instruction: 0xfffffc0e
   1b640:			; <UNDEFINED> instruction: 0xfffffbce
   1b644:	andeq	r9, r1, r4, lsl #28
   1b648:	push	{fp, lr}
   1b64c:	mov	fp, sp
   1b650:	sub	sp, sp, #24
   1b654:	ldr	r1, [fp, #12]
   1b658:	ldr	ip, [fp, #8]
   1b65c:	str	r2, [sp, #8]
   1b660:	str	r3, [sp, #12]
   1b664:	str	ip, [sp, #16]
   1b668:	str	r1, [sp, #20]
   1b66c:	ldr	r1, [sp, #8]
   1b670:	ldr	r2, [sp, #12]
   1b674:	orr	r1, r1, r2
   1b678:	cmp	r1, #0
   1b67c:	str	r0, [sp, #4]
   1b680:	beq	1b68c <grisu3_diy_fp_encode_double@@Base+0x59c>
   1b684:	b	1b688 <grisu3_diy_fp_encode_double@@Base+0x598>
   1b688:	b	1b6ac <grisu3_diy_fp_encode_double@@Base+0x5bc>
   1b68c:	ldr	r0, [pc, #224]	; 1b774 <grisu3_diy_fp_encode_double@@Base+0x684>
   1b690:	add	r0, pc, r0
   1b694:	ldr	r1, [pc, #220]	; 1b778 <grisu3_diy_fp_encode_double@@Base+0x688>
   1b698:	add	r1, pc, r1
   1b69c:	ldr	r2, [pc, #216]	; 1b77c <grisu3_diy_fp_encode_double@@Base+0x68c>
   1b6a0:	add	r3, pc, r2
   1b6a4:	movw	r2, #260	; 0x104
   1b6a8:	bl	1298c <__assert_fail@plt>
   1b6ac:	b	1b6b0 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1b6b0:	ldrh	r0, [sp, #14]
   1b6b4:	bic	r0, r0, #63	; 0x3f
   1b6b8:	cmp	r0, #0
   1b6bc:	movwne	r0, #1
   1b6c0:	mvn	r1, #0
   1b6c4:	eor	r0, r0, r1
   1b6c8:	tst	r0, #1
   1b6cc:	beq	1b6fc <grisu3_diy_fp_encode_double@@Base+0x60c>
   1b6d0:	ldr	r0, [sp, #8]
   1b6d4:	ldr	r1, [sp, #12]
   1b6d8:	lsl	r1, r1, #10
   1b6dc:	orr	r1, r1, r0, lsr #22
   1b6e0:	lsl	r0, r0, #10
   1b6e4:	str	r0, [sp, #8]
   1b6e8:	str	r1, [sp, #12]
   1b6ec:	ldr	r0, [sp, #16]
   1b6f0:	sub	r0, r0, #10
   1b6f4:	str	r0, [sp, #16]
   1b6f8:	b	1b6b0 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1b6fc:	b	1b700 <grisu3_diy_fp_encode_double@@Base+0x610>
   1b700:	ldrb	r0, [sp, #15]
   1b704:	lsr	r0, r0, #7
   1b708:	mvn	r1, #0
   1b70c:	eor	r0, r0, r1
   1b710:	tst	r0, #1
   1b714:	beq	1b748 <grisu3_diy_fp_encode_double@@Base+0x658>
   1b718:	ldr	r0, [sp, #8]
   1b71c:	ldr	r1, [sp, #12]
   1b720:	lsl	r1, r1, #1
   1b724:	orr	r1, r1, r0, lsr #31
   1b728:	lsl	r0, r0, #1
   1b72c:	str	r0, [sp, #8]
   1b730:	str	r1, [sp, #12]
   1b734:	ldr	r0, [sp, #16]
   1b738:	mvn	r1, #0
   1b73c:	add	r0, r0, r1
   1b740:	str	r0, [sp, #16]
   1b744:	b	1b700 <grisu3_diy_fp_encode_double@@Base+0x610>
   1b748:	ldr	r0, [sp, #8]
   1b74c:	ldr	r1, [sp, #4]
   1b750:	str	r0, [r1]
   1b754:	ldr	r0, [sp, #12]
   1b758:	str	r0, [r1, #4]
   1b75c:	ldr	r0, [sp, #16]
   1b760:	str	r0, [r1, #8]
   1b764:	ldr	r0, [sp, #20]
   1b768:	str	r0, [r1, #12]
   1b76c:	mov	sp, fp
   1b770:	pop	{fp, pc}
   1b774:	andeq	r8, r0, r5, asr #9
   1b778:	andeq	r8, r0, r6, asr #9
   1b77c:	andeq	r8, r0, fp, lsr #10
   1b780:	push	{fp, lr}
   1b784:	mov	fp, sp
   1b788:	sub	sp, sp, #24
   1b78c:	ldr	r2, [pc, #340]	; 1b8e8 <grisu3_diy_fp_encode_double@@Base+0x7f8>
   1b790:	str	r0, [fp, #-4]
   1b794:	str	r1, [fp, #-8]
   1b798:	movw	r0, #348	; 0x15c
   1b79c:	str	r0, [sp, #12]
   1b7a0:	movw	r0, #8
   1b7a4:	str	r0, [sp, #8]
   1b7a8:	ldr	r0, [fp, #-4]
   1b7ac:	cmp	r2, r0
   1b7b0:	bgt	1b7b8 <grisu3_diy_fp_encode_double@@Base+0x6c8>
   1b7b4:	b	1b7d8 <grisu3_diy_fp_encode_double@@Base+0x6e8>
   1b7b8:	ldr	r0, [pc, #300]	; 1b8ec <grisu3_diy_fp_encode_double@@Base+0x7fc>
   1b7bc:	add	r0, pc, r0
   1b7c0:	ldr	r1, [pc, #296]	; 1b8f0 <grisu3_diy_fp_encode_double@@Base+0x800>
   1b7c4:	add	r1, pc, r1
   1b7c8:	ldr	r2, [pc, #292]	; 1b8f4 <grisu3_diy_fp_encode_double@@Base+0x804>
   1b7cc:	add	r3, pc, r2
   1b7d0:	movw	r2, #80	; 0x50
   1b7d4:	bl	1298c <__assert_fail@plt>
   1b7d8:	ldr	r0, [fp, #-4]
   1b7dc:	cmp	r0, #348	; 0x15c
   1b7e0:	bge	1b7e8 <grisu3_diy_fp_encode_double@@Base+0x6f8>
   1b7e4:	b	1b808 <grisu3_diy_fp_encode_double@@Base+0x718>
   1b7e8:	ldr	r0, [pc, #264]	; 1b8f8 <grisu3_diy_fp_encode_double@@Base+0x808>
   1b7ec:	add	r0, pc, r0
   1b7f0:	ldr	r1, [pc, #260]	; 1b8fc <grisu3_diy_fp_encode_double@@Base+0x80c>
   1b7f4:	add	r1, pc, r1
   1b7f8:	ldr	r2, [pc, #256]	; 1b900 <grisu3_diy_fp_encode_double@@Base+0x810>
   1b7fc:	add	r3, pc, r2
   1b800:	movw	r2, #81	; 0x51
   1b804:	bl	1298c <__assert_fail@plt>
   1b808:	ldr	r0, [pc, #244]	; 1b904 <grisu3_diy_fp_encode_double@@Base+0x814>
   1b80c:	add	r0, pc, r0
   1b810:	ldr	r1, [fp, #-4]
   1b814:	add	r1, r1, #348	; 0x15c
   1b818:	asr	r2, r1, #31
   1b81c:	add	r1, r1, r2, lsr #29
   1b820:	asr	r1, r1, #3
   1b824:	str	r1, [sp, #4]
   1b828:	ldr	r1, [sp, #4]
   1b82c:	ldr	r2, [pc, #236]	; 1b920 <grisu3_diy_fp_encode_double@@Base+0x830>
   1b830:	add	r2, pc, r2
   1b834:	add	r1, r2, r1, lsl #4
   1b838:	ldrsh	r1, [r1, #10]
   1b83c:	str	r1, [sp]
   1b840:	ldr	r1, [sp, #4]
   1b844:	mov	r3, r2
   1b848:	ldr	r1, [r3, r1, lsl #4]!
   1b84c:	ldr	r3, [r3, #4]
   1b850:	ldr	ip, [fp, #-8]
   1b854:	str	r3, [ip, #4]
   1b858:	str	r1, [ip]
   1b85c:	ldr	r1, [sp, #4]
   1b860:	add	r1, r2, r1, lsl #4
   1b864:	ldrsh	r1, [r1, #8]
   1b868:	ldr	r2, [fp, #-8]
   1b86c:	str	r1, [r2, #8]
   1b870:	ldr	r1, [sp]
   1b874:	ldr	r2, [fp, #-4]
   1b878:	cmp	r1, r2
   1b87c:	bgt	1b884 <grisu3_diy_fp_encode_double@@Base+0x794>
   1b880:	b	1b8a4 <grisu3_diy_fp_encode_double@@Base+0x7b4>
   1b884:	ldr	r0, [pc, #124]	; 1b908 <grisu3_diy_fp_encode_double@@Base+0x818>
   1b888:	add	r0, pc, r0
   1b88c:	ldr	r1, [pc, #120]	; 1b90c <grisu3_diy_fp_encode_double@@Base+0x81c>
   1b890:	add	r1, pc, r1
   1b894:	ldr	r2, [pc, #116]	; 1b910 <grisu3_diy_fp_encode_double@@Base+0x820>
   1b898:	add	r3, pc, r2
   1b89c:	movw	r2, #88	; 0x58
   1b8a0:	bl	1298c <__assert_fail@plt>
   1b8a4:	ldr	r0, [fp, #-4]
   1b8a8:	ldr	r1, [sp]
   1b8ac:	add	r1, r1, #8
   1b8b0:	cmp	r0, r1
   1b8b4:	bge	1b8bc <grisu3_diy_fp_encode_double@@Base+0x7cc>
   1b8b8:	b	1b8dc <grisu3_diy_fp_encode_double@@Base+0x7ec>
   1b8bc:	ldr	r0, [pc, #80]	; 1b914 <grisu3_diy_fp_encode_double@@Base+0x824>
   1b8c0:	add	r0, pc, r0
   1b8c4:	ldr	r1, [pc, #76]	; 1b918 <grisu3_diy_fp_encode_double@@Base+0x828>
   1b8c8:	add	r1, pc, r1
   1b8cc:	ldr	r2, [pc, #72]	; 1b91c <grisu3_diy_fp_encode_double@@Base+0x82c>
   1b8d0:	add	r3, pc, r2
   1b8d4:	movw	r2, #89	; 0x59
   1b8d8:	bl	1298c <__assert_fail@plt>
   1b8dc:	ldr	r0, [sp]
   1b8e0:	mov	sp, fp
   1b8e4:	pop	{fp, pc}
   1b8e8:			; <UNDEFINED> instruction: 0xfffffea4
   1b8ec:	andeq	r8, r0, r8, asr #8
   1b8f0:	andeq	r7, r0, r0, lsr #28
   1b8f4:	andeq	r8, r0, r7, asr r4
   1b8f8:	andeq	r8, r0, r0, ror r4
   1b8fc:	strdeq	r7, [r0], -r0
   1b900:	andeq	r8, r0, r7, lsr #8
   1b904:	andeq	r8, r0, ip, lsr #9
   1b908:	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   1b90c:	andeq	r7, r0, r4, asr sp
   1b910:	andeq	r8, r0, fp, lsl #7
   1b914:	ldrdeq	r8, [r0], -r6
   1b918:	andeq	r7, r0, ip, lsl sp
   1b91c:	andeq	r8, r0, r3, asr r3
   1b920:	andeq	r8, r0, r8, lsl #9
   1b924:	push	{r4, r5, r6, sl, fp, lr}
   1b928:	add	fp, sp, #16
   1b92c:	sub	sp, sp, #104	; 0x68
   1b930:	ldr	r1, [fp, #28]
   1b934:	ldr	ip, [fp, #24]
   1b938:	ldr	lr, [fp, #20]
   1b93c:	ldr	r4, [fp, #16]
   1b940:	ldr	r5, [fp, #12]
   1b944:	ldr	r6, [fp, #8]
   1b948:	str	r2, [fp, #-32]	; 0xffffffe0
   1b94c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b950:	str	r6, [fp, #-24]	; 0xffffffe8
   1b954:	str	r5, [fp, #-20]	; 0xffffffec
   1b958:	str	r1, [fp, #-36]	; 0xffffffdc
   1b95c:	str	ip, [fp, #-40]	; 0xffffffd8
   1b960:	str	lr, [fp, #-44]	; 0xffffffd4
   1b964:	str	r4, [fp, #-48]	; 0xffffffd0
   1b968:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b96c:	mov	r2, #0
   1b970:	str	r2, [fp, #-52]	; 0xffffffcc
   1b974:	str	r1, [fp, #-56]	; 0xffffffc8
   1b978:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b97c:	str	r2, [sp, #60]	; 0x3c
   1b980:	str	r1, [sp, #56]	; 0x38
   1b984:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b988:	str	r2, [sp, #52]	; 0x34
   1b98c:	str	r1, [sp, #48]	; 0x30
   1b990:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b994:	str	r2, [sp, #44]	; 0x2c
   1b998:	str	r1, [sp, #40]	; 0x28
   1b99c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1b9a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b9a4:	ldr	ip, [sp, #48]	; 0x30
   1b9a8:	ldr	lr, [sp, #52]	; 0x34
   1b9ac:	umull	r4, r5, r1, ip
   1b9b0:	mla	r1, r1, lr, r5
   1b9b4:	mla	r1, r3, ip, r1
   1b9b8:	str	r4, [sp, #32]
   1b9bc:	str	r1, [sp, #36]	; 0x24
   1b9c0:	ldr	r1, [sp, #56]	; 0x38
   1b9c4:	ldr	r3, [sp, #60]	; 0x3c
   1b9c8:	ldr	ip, [sp, #48]	; 0x30
   1b9cc:	ldr	lr, [sp, #52]	; 0x34
   1b9d0:	umull	r4, r5, r1, ip
   1b9d4:	mla	r1, r1, lr, r5
   1b9d8:	mla	r1, r3, ip, r1
   1b9dc:	str	r4, [sp, #24]
   1b9e0:	str	r1, [sp, #28]
   1b9e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1b9e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b9ec:	ldr	ip, [sp, #40]	; 0x28
   1b9f0:	ldr	lr, [sp, #44]	; 0x2c
   1b9f4:	umull	r4, r5, r1, ip
   1b9f8:	mla	r1, r1, lr, r5
   1b9fc:	mla	r1, r3, ip, r1
   1ba00:	str	r4, [sp, #16]
   1ba04:	str	r1, [sp, #20]
   1ba08:	ldr	r1, [sp, #56]	; 0x38
   1ba0c:	ldr	r3, [sp, #60]	; 0x3c
   1ba10:	ldr	ip, [sp, #40]	; 0x28
   1ba14:	ldr	lr, [sp, #44]	; 0x2c
   1ba18:	umull	r4, r5, r1, ip
   1ba1c:	mla	r1, r1, lr, r5
   1ba20:	mla	r1, r3, ip, r1
   1ba24:	str	r4, [sp, #8]
   1ba28:	str	r1, [sp, #12]
   1ba2c:	ldr	r1, [sp, #12]
   1ba30:	ldr	r3, [sp, #16]
   1ba34:	adds	r1, r1, r3
   1ba38:	adc	r2, r2, #0
   1ba3c:	ldr	r3, [sp, #24]
   1ba40:	adds	r1, r1, r3
   1ba44:	adc	r2, r2, #0
   1ba48:	str	r1, [sp]
   1ba4c:	str	r2, [sp, #4]
   1ba50:	ldr	r1, [sp]
   1ba54:	ldr	r2, [sp, #4]
   1ba58:	adds	r1, r1, #-2147483648	; 0x80000000
   1ba5c:	adc	r2, r2, #0
   1ba60:	str	r1, [sp]
   1ba64:	str	r2, [sp, #4]
   1ba68:	ldr	r1, [sp, #32]
   1ba6c:	ldr	r2, [sp, #36]	; 0x24
   1ba70:	ldr	r3, [sp, #20]
   1ba74:	adds	r1, r1, r3
   1ba78:	adc	r2, r2, #0
   1ba7c:	ldr	r3, [sp, #28]
   1ba80:	adds	r1, r1, r3
   1ba84:	adc	r2, r2, #0
   1ba88:	ldr	r3, [sp, #4]
   1ba8c:	adds	r1, r1, r3
   1ba90:	adc	r2, r2, #0
   1ba94:	str	r1, [r0]
   1ba98:	str	r2, [r0, #4]
   1ba9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1baa0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1baa4:	add	r1, r1, r2
   1baa8:	add	r1, r1, #64	; 0x40
   1baac:	str	r1, [r0, #8]
   1bab0:	sub	sp, fp, #16
   1bab4:	pop	{r4, r5, r6, sl, fp, pc}
   1bab8:	push	{fp, lr}
   1babc:	mov	fp, sp
   1bac0:	sub	sp, sp, #88	; 0x58
   1bac4:	ldr	ip, [pc, #412]	; 1bc68 <grisu3_diy_fp_encode_double@@Base+0xb78>
   1bac8:	str	r0, [fp, #-24]	; 0xffffffe8
   1bacc:	str	r1, [fp, #-20]	; 0xffffffec
   1bad0:	str	r2, [fp, #-16]
   1bad4:	str	r3, [fp, #-12]
   1bad8:	mov	r0, #1048576	; 0x100000
   1badc:	str	r0, [fp, #-28]	; 0xffffffe4
   1bae0:	mov	r0, #0
   1bae4:	str	r0, [fp, #-32]	; 0xffffffe0
   1bae8:	movw	r0, #65535	; 0xffff
   1baec:	movt	r0, #15
   1baf0:	str	r0, [fp, #-36]	; 0xffffffdc
   1baf4:	mvn	r0, #0
   1baf8:	str	r0, [fp, #-40]	; 0xffffffd8
   1bafc:	str	ip, [sp, #44]	; 0x2c
   1bb00:	movw	r0, #1075	; 0x433
   1bb04:	str	r0, [sp, #40]	; 0x28
   1bb08:	movw	r0, #52	; 0x34
   1bb0c:	str	r0, [sp, #36]	; 0x24
   1bb10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb14:	str	r0, [sp, #16]
   1bb18:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bb1c:	str	r0, [sp, #20]
   1bb20:	ldr	r0, [fp, #-16]
   1bb24:	str	r0, [sp, #24]
   1bb28:	ldr	r0, [fp, #-12]
   1bb2c:	str	r0, [sp, #28]
   1bb30:	ldr	r0, [sp, #20]
   1bb34:	cmp	r0, #2097152	; 0x200000
   1bb38:	bcc	1bb68 <grisu3_diy_fp_encode_double@@Base+0xa78>
   1bb3c:	b	1bb40 <grisu3_diy_fp_encode_double@@Base+0xa50>
   1bb40:	ldr	r0, [sp, #16]
   1bb44:	ldr	r1, [sp, #20]
   1bb48:	lsrs	r1, r1, #1
   1bb4c:	rrx	r0, r0
   1bb50:	str	r1, [sp, #20]
   1bb54:	str	r0, [sp, #16]
   1bb58:	ldr	r0, [sp, #24]
   1bb5c:	add	r0, r0, #1
   1bb60:	str	r0, [sp, #24]
   1bb64:	b	1bb30 <grisu3_diy_fp_encode_double@@Base+0xa40>
   1bb68:	ldr	r0, [pc, #248]	; 1bc68 <grisu3_diy_fp_encode_double@@Base+0xb78>
   1bb6c:	ldr	r1, [sp, #24]
   1bb70:	cmp	r1, r0
   1bb74:	bge	1bb84 <grisu3_diy_fp_encode_double@@Base+0xa94>
   1bb78:	vldr	d16, [pc, #224]	; 1bc60 <grisu3_diy_fp_encode_double@@Base+0xb70>
   1bb7c:	vstr	d16, [fp, #-8]
   1bb80:	b	1bc54 <grisu3_diy_fp_encode_double@@Base+0xb64>
   1bb84:	b	1bb88 <grisu3_diy_fp_encode_double@@Base+0xa98>
   1bb88:	ldr	r0, [pc, #216]	; 1bc68 <grisu3_diy_fp_encode_double@@Base+0xb78>
   1bb8c:	ldr	r1, [sp, #24]
   1bb90:	cmp	r1, r0
   1bb94:	movw	r0, #0
   1bb98:	str	r0, [sp, #4]
   1bb9c:	ble	1bbb4 <grisu3_diy_fp_encode_double@@Base+0xac4>
   1bba0:	ldrb	r0, [sp, #22]
   1bba4:	and	r0, r0, #16
   1bba8:	mov	r1, #1
   1bbac:	eor	r0, r1, r0, lsr #4
   1bbb0:	str	r0, [sp, #4]
   1bbb4:	ldr	r0, [sp, #4]
   1bbb8:	tst	r0, #1
   1bbbc:	beq	1bbf0 <grisu3_diy_fp_encode_double@@Base+0xb00>
   1bbc0:	ldr	r0, [sp, #16]
   1bbc4:	ldr	r1, [sp, #20]
   1bbc8:	lsl	r1, r1, #1
   1bbcc:	orr	r1, r1, r0, lsr #31
   1bbd0:	lsl	r0, r0, #1
   1bbd4:	str	r0, [sp, #16]
   1bbd8:	str	r1, [sp, #20]
   1bbdc:	ldr	r0, [sp, #24]
   1bbe0:	mvn	r1, #0
   1bbe4:	add	r0, r0, r1
   1bbe8:	str	r0, [sp, #24]
   1bbec:	b	1bb88 <grisu3_diy_fp_encode_double@@Base+0xa98>
   1bbf0:	ldr	r0, [pc, #112]	; 1bc68 <grisu3_diy_fp_encode_double@@Base+0xb78>
   1bbf4:	ldr	r1, [sp, #24]
   1bbf8:	cmp	r1, r0
   1bbfc:	bne	1bc20 <grisu3_diy_fp_encode_double@@Base+0xb30>
   1bc00:	ldrb	r0, [sp, #22]
   1bc04:	tst	r0, #16
   1bc08:	bne	1bc20 <grisu3_diy_fp_encode_double@@Base+0xb30>
   1bc0c:	b	1bc10 <grisu3_diy_fp_encode_double@@Base+0xb20>
   1bc10:	mov	r0, #0
   1bc14:	str	r0, [sp, #12]
   1bc18:	str	r0, [sp, #8]
   1bc1c:	b	1bc38 <grisu3_diy_fp_encode_double@@Base+0xb48>
   1bc20:	ldr	r0, [sp, #24]
   1bc24:	movw	r1, #1075	; 0x433
   1bc28:	add	r0, r0, r1
   1bc2c:	asr	r1, r0, #31
   1bc30:	str	r0, [sp, #8]
   1bc34:	str	r1, [sp, #12]
   1bc38:	ldr	r0, [sp, #16]
   1bc3c:	ldr	r1, [sp, #20]
   1bc40:	bfc	r1, #20, #12
   1bc44:	ldr	r2, [sp, #8]
   1bc48:	orr	r1, r1, r2, lsl #20
   1bc4c:	bl	2084c <flatcc_json_parser_struct_as_root@@Base+0x160>
   1bc50:	vstr	d0, [fp, #-8]
   1bc54:	vldr	d0, [fp, #-8]
   1bc58:	mov	sp, fp
   1bc5c:	pop	{fp, pc}
	...
   1bc68:			; <UNDEFINED> instruction: 0xfffffbce

0001bc6c <flatcc_json_parser_error_string@@Base>:
   1bc6c:	sub	sp, sp, #12
   1bc70:	str	r0, [sp, #4]
   1bc74:	ldr	r0, [sp, #4]
   1bc78:	cmp	r0, #34	; 0x22
   1bc7c:	str	r0, [sp]
   1bc80:	bhi	1bf50 <flatcc_json_parser_error_string@@Base+0x2e4>
   1bc84:	add	r0, pc, #8
   1bc88:	ldr	r1, [sp]
   1bc8c:	ldr	r2, [r0, r1, lsl #2]
   1bc90:	add	pc, r0, r2
   1bc94:	andeq	r0, r0, ip, lsl #1
   1bc98:	muleq	r0, ip, r0
   1bc9c:	andeq	r0, r0, ip, lsr #1
   1bca0:	strheq	r0, [r0], -ip
   1bca4:	andeq	r0, r0, ip, asr #1
   1bca8:	ldrdeq	r0, [r0], -ip
   1bcac:	andeq	r0, r0, ip, ror #1
   1bcb0:	strdeq	r0, [r0], -ip
   1bcb4:	andeq	r0, r0, ip, lsl #2
   1bcb8:	andeq	r0, r0, ip, lsl r1
   1bcbc:	andeq	r0, r0, ip, lsr #2
   1bcc0:	andeq	r0, r0, ip, lsr r1
   1bcc4:	andeq	r0, r0, ip, asr #2
   1bcc8:	andeq	r0, r0, ip, asr r1
   1bccc:	andeq	r0, r0, ip, ror #2
   1bcd0:	andeq	r0, r0, ip, ror r1
   1bcd4:	andeq	r0, r0, ip, lsl #3
   1bcd8:	muleq	r0, ip, r1
   1bcdc:	andeq	r0, r0, ip, lsr #3
   1bce0:			; <UNDEFINED> instruction: 0x000001bc
   1bce4:	andeq	r0, r0, ip, asr #3
   1bce8:	ldrdeq	r0, [r0], -ip
   1bcec:	andeq	r0, r0, ip, ror #3
   1bcf0:	strdeq	r0, [r0], -ip
   1bcf4:	andeq	r0, r0, ip, lsl #4
   1bcf8:	andeq	r0, r0, ip, lsl r2
   1bcfc:	andeq	r0, r0, ip, lsr #4
   1bd00:	andeq	r0, r0, ip, lsr r2
   1bd04:	andeq	r0, r0, ip, asr #4
   1bd08:	andeq	r0, r0, ip, asr r2
   1bd0c:	andeq	r0, r0, ip, ror #4
   1bd10:	andeq	r0, r0, ip, ror r2
   1bd14:	andeq	r0, r0, ip, lsl #5
   1bd18:	muleq	r0, ip, r2
   1bd1c:	andeq	r0, r0, ip, lsr #5
   1bd20:	ldr	r0, [pc, #712]	; 1bff0 <flatcc_json_parser_error_string@@Base+0x384>
   1bd24:	add	r0, pc, r0
   1bd28:	str	r0, [sp, #8]
   1bd2c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd30:	ldr	r0, [pc, #692]	; 1bfec <flatcc_json_parser_error_string@@Base+0x380>
   1bd34:	add	r0, pc, r0
   1bd38:	str	r0, [sp, #8]
   1bd3c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd40:	ldr	r0, [pc, #672]	; 1bfe8 <flatcc_json_parser_error_string@@Base+0x37c>
   1bd44:	add	r0, pc, r0
   1bd48:	str	r0, [sp, #8]
   1bd4c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd50:	ldr	r0, [pc, #652]	; 1bfe4 <flatcc_json_parser_error_string@@Base+0x378>
   1bd54:	add	r0, pc, r0
   1bd58:	str	r0, [sp, #8]
   1bd5c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd60:	ldr	r0, [pc, #632]	; 1bfe0 <flatcc_json_parser_error_string@@Base+0x374>
   1bd64:	add	r0, pc, r0
   1bd68:	str	r0, [sp, #8]
   1bd6c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd70:	ldr	r0, [pc, #612]	; 1bfdc <flatcc_json_parser_error_string@@Base+0x370>
   1bd74:	add	r0, pc, r0
   1bd78:	str	r0, [sp, #8]
   1bd7c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd80:	ldr	r0, [pc, #592]	; 1bfd8 <flatcc_json_parser_error_string@@Base+0x36c>
   1bd84:	add	r0, pc, r0
   1bd88:	str	r0, [sp, #8]
   1bd8c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bd90:	ldr	r0, [pc, #572]	; 1bfd4 <flatcc_json_parser_error_string@@Base+0x368>
   1bd94:	add	r0, pc, r0
   1bd98:	str	r0, [sp, #8]
   1bd9c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bda0:	ldr	r0, [pc, #552]	; 1bfd0 <flatcc_json_parser_error_string@@Base+0x364>
   1bda4:	add	r0, pc, r0
   1bda8:	str	r0, [sp, #8]
   1bdac:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bdb0:	ldr	r0, [pc, #532]	; 1bfcc <flatcc_json_parser_error_string@@Base+0x360>
   1bdb4:	add	r0, pc, r0
   1bdb8:	str	r0, [sp, #8]
   1bdbc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bdc0:	ldr	r0, [pc, #512]	; 1bfc8 <flatcc_json_parser_error_string@@Base+0x35c>
   1bdc4:	add	r0, pc, r0
   1bdc8:	str	r0, [sp, #8]
   1bdcc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bdd0:	ldr	r0, [pc, #492]	; 1bfc4 <flatcc_json_parser_error_string@@Base+0x358>
   1bdd4:	add	r0, pc, r0
   1bdd8:	str	r0, [sp, #8]
   1bddc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bde0:	ldr	r0, [pc, #472]	; 1bfc0 <flatcc_json_parser_error_string@@Base+0x354>
   1bde4:	add	r0, pc, r0
   1bde8:	str	r0, [sp, #8]
   1bdec:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bdf0:	ldr	r0, [pc, #452]	; 1bfbc <flatcc_json_parser_error_string@@Base+0x350>
   1bdf4:	add	r0, pc, r0
   1bdf8:	str	r0, [sp, #8]
   1bdfc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be00:	ldr	r0, [pc, #432]	; 1bfb8 <flatcc_json_parser_error_string@@Base+0x34c>
   1be04:	add	r0, pc, r0
   1be08:	str	r0, [sp, #8]
   1be0c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be10:	ldr	r0, [pc, #412]	; 1bfb4 <flatcc_json_parser_error_string@@Base+0x348>
   1be14:	add	r0, pc, r0
   1be18:	str	r0, [sp, #8]
   1be1c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be20:	ldr	r0, [pc, #392]	; 1bfb0 <flatcc_json_parser_error_string@@Base+0x344>
   1be24:	add	r0, pc, r0
   1be28:	str	r0, [sp, #8]
   1be2c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be30:	ldr	r0, [pc, #372]	; 1bfac <flatcc_json_parser_error_string@@Base+0x340>
   1be34:	add	r0, pc, r0
   1be38:	str	r0, [sp, #8]
   1be3c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be40:	ldr	r0, [pc, #352]	; 1bfa8 <flatcc_json_parser_error_string@@Base+0x33c>
   1be44:	add	r0, pc, r0
   1be48:	str	r0, [sp, #8]
   1be4c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be50:	ldr	r0, [pc, #332]	; 1bfa4 <flatcc_json_parser_error_string@@Base+0x338>
   1be54:	add	r0, pc, r0
   1be58:	str	r0, [sp, #8]
   1be5c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be60:	ldr	r0, [pc, #312]	; 1bfa0 <flatcc_json_parser_error_string@@Base+0x334>
   1be64:	add	r0, pc, r0
   1be68:	str	r0, [sp, #8]
   1be6c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be70:	ldr	r0, [pc, #292]	; 1bf9c <flatcc_json_parser_error_string@@Base+0x330>
   1be74:	add	r0, pc, r0
   1be78:	str	r0, [sp, #8]
   1be7c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be80:	ldr	r0, [pc, #272]	; 1bf98 <flatcc_json_parser_error_string@@Base+0x32c>
   1be84:	add	r0, pc, r0
   1be88:	str	r0, [sp, #8]
   1be8c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1be90:	ldr	r0, [pc, #252]	; 1bf94 <flatcc_json_parser_error_string@@Base+0x328>
   1be94:	add	r0, pc, r0
   1be98:	str	r0, [sp, #8]
   1be9c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bea0:	ldr	r0, [pc, #232]	; 1bf90 <flatcc_json_parser_error_string@@Base+0x324>
   1bea4:	add	r0, pc, r0
   1bea8:	str	r0, [sp, #8]
   1beac:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1beb0:	ldr	r0, [pc, #212]	; 1bf8c <flatcc_json_parser_error_string@@Base+0x320>
   1beb4:	add	r0, pc, r0
   1beb8:	str	r0, [sp, #8]
   1bebc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bec0:	ldr	r0, [pc, #192]	; 1bf88 <flatcc_json_parser_error_string@@Base+0x31c>
   1bec4:	add	r0, pc, r0
   1bec8:	str	r0, [sp, #8]
   1becc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bed0:	ldr	r0, [pc, #172]	; 1bf84 <flatcc_json_parser_error_string@@Base+0x318>
   1bed4:	add	r0, pc, r0
   1bed8:	str	r0, [sp, #8]
   1bedc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bee0:	ldr	r0, [pc, #152]	; 1bf80 <flatcc_json_parser_error_string@@Base+0x314>
   1bee4:	add	r0, pc, r0
   1bee8:	str	r0, [sp, #8]
   1beec:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bef0:	ldr	r0, [pc, #132]	; 1bf7c <flatcc_json_parser_error_string@@Base+0x310>
   1bef4:	add	r0, pc, r0
   1bef8:	str	r0, [sp, #8]
   1befc:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf00:	ldr	r0, [pc, #112]	; 1bf78 <flatcc_json_parser_error_string@@Base+0x30c>
   1bf04:	add	r0, pc, r0
   1bf08:	str	r0, [sp, #8]
   1bf0c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf10:	ldr	r0, [pc, #92]	; 1bf74 <flatcc_json_parser_error_string@@Base+0x308>
   1bf14:	add	r0, pc, r0
   1bf18:	str	r0, [sp, #8]
   1bf1c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf20:	ldr	r0, [pc, #72]	; 1bf70 <flatcc_json_parser_error_string@@Base+0x304>
   1bf24:	add	r0, pc, r0
   1bf28:	str	r0, [sp, #8]
   1bf2c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf30:	ldr	r0, [pc, #52]	; 1bf6c <flatcc_json_parser_error_string@@Base+0x300>
   1bf34:	add	r0, pc, r0
   1bf38:	str	r0, [sp, #8]
   1bf3c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf40:	ldr	r0, [pc, #32]	; 1bf68 <flatcc_json_parser_error_string@@Base+0x2fc>
   1bf44:	add	r0, pc, r0
   1bf48:	str	r0, [sp, #8]
   1bf4c:	b	1bf5c <flatcc_json_parser_error_string@@Base+0x2f0>
   1bf50:	ldr	r0, [pc, #156]	; 1bff4 <flatcc_json_parser_error_string@@Base+0x388>
   1bf54:	add	r0, pc, r0
   1bf58:	str	r0, [sp, #8]
   1bf5c:	ldr	r0, [sp, #8]
   1bf60:	add	sp, sp, #12
   1bf64:	bx	lr
   1bf68:	andeq	r7, r0, r6, asr #19
   1bf6c:	andeq	r7, r0, r8, asr #19
   1bf70:			; <UNDEFINED> instruction: 0x000079be
   1bf74:			; <UNDEFINED> instruction: 0x000079b7
   1bf78:	andeq	r7, r0, sl, lsr #19
   1bf7c:	andeq	r7, r0, r3, lsr #19
   1bf80:	muleq	r0, r9, r9
   1bf84:	andeq	r7, r0, lr, lsl #19
   1bf88:	andeq	r7, r0, pc, ror r9
   1bf8c:	andeq	r7, r0, r2, ror r9
   1bf90:	andeq	r7, r0, lr, ror #18
   1bf94:	andeq	r7, r0, sl, asr r9
   1bf98:	andeq	r7, r0, fp, asr r9
   1bf9c:	andeq	r7, r0, fp, asr r9
   1bfa0:	andeq	r7, r0, r7, asr r9
   1bfa4:	andeq	r7, r0, sl, asr r9
   1bfa8:	andeq	r7, r0, fp, asr r9
   1bfac:	andeq	r7, r0, r9, asr r9
   1bfb0:	andeq	r7, r0, r9, asr r9
   1bfb4:	andeq	r7, r0, r6, asr r9
   1bfb8:	andeq	r7, r0, sp, asr #18
   1bfbc:	andeq	r7, r0, lr, asr #18
   1bfc0:	andeq	r7, r0, sp, asr #18
   1bfc4:	andeq	r7, r0, lr, asr #18
   1bfc8:	andeq	r7, r0, ip, asr #18
   1bfcc:	andeq	r7, r0, fp, asr #18
   1bfd0:	andeq	r7, r0, r1, asr r9
   1bfd4:	andeq	r7, r0, r8, asr r9
   1bfd8:	andeq	r7, r0, r8, asr r9
   1bfdc:	andeq	r7, r0, r3, asr r9
   1bfe0:	andeq	r7, r0, r4, asr r9
   1bfe4:	andeq	r7, r0, r5, asr r9
   1bfe8:	andeq	r7, r0, r8, asr r9
   1bfec:	andeq	r7, r0, r4, ror #18
   1bff0:	andeq	r7, r0, r1, ror r9
   1bff4:	andeq	r7, r0, r4, asr #19

0001bff8 <flatcc_json_parser_set_error@@Base>:
   1bff8:	sub	sp, sp, #16
   1bffc:	str	r0, [sp, #12]
   1c000:	str	r1, [sp, #8]
   1c004:	str	r2, [sp, #4]
   1c008:	str	r3, [sp]
   1c00c:	ldr	r0, [sp, #12]
   1c010:	ldr	r0, [r0, #24]
   1c014:	cmp	r0, #0
   1c018:	bne	1c050 <flatcc_json_parser_set_error@@Base+0x58>
   1c01c:	ldr	r0, [sp]
   1c020:	ldr	r1, [sp, #12]
   1c024:	str	r0, [r1, #24]
   1c028:	ldr	r0, [sp, #8]
   1c02c:	ldr	r1, [sp, #12]
   1c030:	ldr	r1, [r1, #4]
   1c034:	sub	r0, r0, r1
   1c038:	add	r0, r0, #1
   1c03c:	ldr	r1, [sp, #12]
   1c040:	str	r0, [r1, #20]
   1c044:	ldr	r0, [sp, #8]
   1c048:	ldr	r1, [sp, #12]
   1c04c:	str	r0, [r1, #36]	; 0x24
   1c050:	ldr	r0, [sp, #4]
   1c054:	add	sp, sp, #16
   1c058:	bx	lr

0001c05c <flatcc_json_parser_string_part@@Base>:
   1c05c:	push	{fp, lr}
   1c060:	mov	fp, sp
   1c064:	sub	sp, sp, #24
   1c068:	str	r0, [fp, #-8]
   1c06c:	str	r1, [sp, #12]
   1c070:	str	r2, [sp, #8]
   1c074:	ldr	r0, [sp, #12]
   1c078:	ldr	r1, [sp, #8]
   1c07c:	cmp	r0, r1
   1c080:	movw	r0, #0
   1c084:	str	r0, [sp, #4]
   1c088:	beq	1c0d4 <flatcc_json_parser_string_part@@Base+0x78>
   1c08c:	ldr	r0, [sp, #12]
   1c090:	ldrb	r0, [r0]
   1c094:	cmp	r0, #34	; 0x22
   1c098:	movw	r0, #0
   1c09c:	str	r0, [sp, #4]
   1c0a0:	beq	1c0d4 <flatcc_json_parser_string_part@@Base+0x78>
   1c0a4:	ldr	r0, [sp, #12]
   1c0a8:	ldrb	r0, [r0]
   1c0ac:	cmp	r0, #32
   1c0b0:	movw	r0, #0
   1c0b4:	str	r0, [sp, #4]
   1c0b8:	blt	1c0d4 <flatcc_json_parser_string_part@@Base+0x78>
   1c0bc:	ldr	r0, [sp, #12]
   1c0c0:	ldrb	r0, [r0]
   1c0c4:	cmp	r0, #92	; 0x5c
   1c0c8:	movw	r0, #0
   1c0cc:	movne	r0, #1
   1c0d0:	str	r0, [sp, #4]
   1c0d4:	ldr	r0, [sp, #4]
   1c0d8:	tst	r0, #1
   1c0dc:	beq	1c0f0 <flatcc_json_parser_string_part@@Base+0x94>
   1c0e0:	ldr	r0, [sp, #12]
   1c0e4:	add	r0, r0, #1
   1c0e8:	str	r0, [sp, #12]
   1c0ec:	b	1c074 <flatcc_json_parser_string_part@@Base+0x18>
   1c0f0:	ldr	r0, [sp, #12]
   1c0f4:	ldr	r1, [sp, #8]
   1c0f8:	cmp	r0, r1
   1c0fc:	bne	1c11c <flatcc_json_parser_string_part@@Base+0xc0>
   1c100:	ldr	r0, [fp, #-8]
   1c104:	ldr	r1, [sp, #12]
   1c108:	ldr	r2, [sp, #8]
   1c10c:	movw	r3, #20
   1c110:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c114:	str	r0, [fp, #-4]
   1c118:	b	1c16c <flatcc_json_parser_string_part@@Base+0x110>
   1c11c:	ldr	r0, [sp, #12]
   1c120:	ldrb	r0, [r0]
   1c124:	cmp	r0, #34	; 0x22
   1c128:	bne	1c138 <flatcc_json_parser_string_part@@Base+0xdc>
   1c12c:	ldr	r0, [sp, #12]
   1c130:	str	r0, [fp, #-4]
   1c134:	b	1c16c <flatcc_json_parser_string_part@@Base+0x110>
   1c138:	ldr	r0, [sp, #12]
   1c13c:	ldrb	r0, [r0]
   1c140:	cmp	r0, #32
   1c144:	bge	1c164 <flatcc_json_parser_string_part@@Base+0x108>
   1c148:	ldr	r0, [fp, #-8]
   1c14c:	ldr	r1, [sp, #12]
   1c150:	ldr	r2, [sp, #8]
   1c154:	movw	r3, #17
   1c158:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c15c:	str	r0, [fp, #-4]
   1c160:	b	1c16c <flatcc_json_parser_string_part@@Base+0x110>
   1c164:	ldr	r0, [sp, #12]
   1c168:	str	r0, [fp, #-4]
   1c16c:	ldr	r0, [fp, #-4]
   1c170:	mov	sp, fp
   1c174:	pop	{fp, pc}

0001c178 <flatcc_json_parser_space_ext@@Base>:
   1c178:	push	{fp, lr}
   1c17c:	mov	fp, sp
   1c180:	sub	sp, sp, #32
   1c184:	str	r0, [fp, #-8]
   1c188:	str	r1, [fp, #-12]
   1c18c:	str	r2, [sp, #16]
   1c190:	b	1c194 <flatcc_json_parser_space_ext@@Base+0x1c>
   1c194:	ldr	r0, [fp, #-12]
   1c198:	ldr	r1, [sp, #16]
   1c19c:	cmp	r0, r1
   1c1a0:	movw	r0, #0
   1c1a4:	str	r0, [sp, #12]
   1c1a8:	beq	1c1c4 <flatcc_json_parser_space_ext@@Base+0x4c>
   1c1ac:	ldr	r0, [fp, #-12]
   1c1b0:	ldrb	r0, [r0]
   1c1b4:	cmp	r0, #32
   1c1b8:	movw	r0, #0
   1c1bc:	moveq	r0, #1
   1c1c0:	str	r0, [sp, #12]
   1c1c4:	ldr	r0, [sp, #12]
   1c1c8:	tst	r0, #1
   1c1cc:	beq	1c1e0 <flatcc_json_parser_space_ext@@Base+0x68>
   1c1d0:	ldr	r0, [fp, #-12]
   1c1d4:	add	r0, r0, #1
   1c1d8:	str	r0, [fp, #-12]
   1c1dc:	b	1c194 <flatcc_json_parser_space_ext@@Base+0x1c>
   1c1e0:	b	1c1e4 <flatcc_json_parser_space_ext@@Base+0x6c>
   1c1e4:	ldr	r0, [fp, #-12]
   1c1e8:	ldr	r1, [sp, #16]
   1c1ec:	cmp	r0, r1
   1c1f0:	movw	r0, #0
   1c1f4:	str	r0, [sp, #8]
   1c1f8:	beq	1c214 <flatcc_json_parser_space_ext@@Base+0x9c>
   1c1fc:	ldr	r0, [fp, #-12]
   1c200:	ldrb	r0, [r0]
   1c204:	cmp	r0, #32
   1c208:	movw	r0, #0
   1c20c:	movle	r0, #1
   1c210:	str	r0, [sp, #8]
   1c214:	ldr	r0, [sp, #8]
   1c218:	tst	r0, #1
   1c21c:	beq	1c348 <flatcc_json_parser_space_ext@@Base+0x1d0>
   1c220:	ldr	r0, [fp, #-12]
   1c224:	ldrb	r0, [r0]
   1c228:	sub	r0, r0, #9
   1c22c:	cmp	r0, #23
   1c230:	str	r0, [sp, #4]
   1c234:	bhi	1c32c <flatcc_json_parser_space_ext@@Base+0x1b4>
   1c238:	add	r0, pc, #8
   1c23c:	ldr	r1, [sp, #4]
   1c240:	ldr	r2, [r0, r1, lsl #2]
   1c244:	add	pc, r0, r2
   1c248:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1c24c:	andeq	r0, r0, r8, lsr #1
   1c250:	andeq	r0, r0, r4, ror #1
   1c254:	andeq	r0, r0, r4, ror #1
   1c258:	andeq	r0, r0, r0, rrx
   1c25c:	andeq	r0, r0, r4, ror #1
   1c260:	andeq	r0, r0, r4, ror #1
   1c264:	andeq	r0, r0, r4, ror #1
   1c268:	andeq	r0, r0, r4, ror #1
   1c26c:	andeq	r0, r0, r4, ror #1
   1c270:	andeq	r0, r0, r4, ror #1
   1c274:	andeq	r0, r0, r4, ror #1
   1c278:	andeq	r0, r0, r4, ror #1
   1c27c:	andeq	r0, r0, r4, ror #1
   1c280:	andeq	r0, r0, r4, ror #1
   1c284:	andeq	r0, r0, r4, ror #1
   1c288:	andeq	r0, r0, r4, ror #1
   1c28c:	andeq	r0, r0, r4, ror #1
   1c290:	andeq	r0, r0, r4, ror #1
   1c294:	andeq	r0, r0, r4, ror #1
   1c298:	andeq	r0, r0, r4, ror #1
   1c29c:	andeq	r0, r0, r4, ror #1
   1c2a0:	andeq	r0, r0, r4, ror #1
   1c2a4:	andeq	r0, r0, r0, ror #1
   1c2a8:	ldr	r0, [sp, #16]
   1c2ac:	ldr	r1, [fp, #-12]
   1c2b0:	sub	r0, r0, r1
   1c2b4:	cmp	r0, #1
   1c2b8:	movw	r0, #0
   1c2bc:	str	r0, [sp]
   1c2c0:	ble	1c2dc <flatcc_json_parser_space_ext@@Base+0x164>
   1c2c4:	ldr	r0, [fp, #-12]
   1c2c8:	ldrb	r0, [r0, #1]
   1c2cc:	cmp	r0, #10
   1c2d0:	movw	r0, #0
   1c2d4:	moveq	r0, #1
   1c2d8:	str	r0, [sp]
   1c2dc:	ldr	r0, [sp]
   1c2e0:	and	r0, r0, #1
   1c2e4:	ldr	r1, [fp, #-12]
   1c2e8:	add	r0, r1, r0
   1c2ec:	str	r0, [fp, #-12]
   1c2f0:	ldr	r0, [fp, #-8]
   1c2f4:	ldr	r1, [r0, #16]
   1c2f8:	add	r1, r1, #1
   1c2fc:	str	r1, [r0, #16]
   1c300:	ldr	r0, [fp, #-12]
   1c304:	add	r0, r0, #1
   1c308:	str	r0, [fp, #-12]
   1c30c:	ldr	r1, [fp, #-8]
   1c310:	str	r0, [r1, #4]
   1c314:	b	1c1e4 <flatcc_json_parser_space_ext@@Base+0x6c>
   1c318:	ldr	r0, [fp, #-12]
   1c31c:	add	r0, r0, #1
   1c320:	str	r0, [fp, #-12]
   1c324:	b	1c1e4 <flatcc_json_parser_space_ext@@Base+0x6c>
   1c328:	b	1c190 <flatcc_json_parser_space_ext@@Base+0x18>
   1c32c:	ldr	r0, [fp, #-8]
   1c330:	ldr	r1, [fp, #-12]
   1c334:	ldr	r2, [sp, #16]
   1c338:	movw	r3, #5
   1c33c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c340:	str	r0, [fp, #-4]
   1c344:	b	1c350 <flatcc_json_parser_space_ext@@Base+0x1d8>
   1c348:	ldr	r0, [fp, #-12]
   1c34c:	str	r0, [fp, #-4]
   1c350:	ldr	r0, [fp, #-4]
   1c354:	mov	sp, fp
   1c358:	pop	{fp, pc}

0001c35c <flatcc_json_parser_string_escape@@Base>:
   1c35c:	push	{fp, lr}
   1c360:	mov	fp, sp
   1c364:	sub	sp, sp, #32
   1c368:	str	r0, [fp, #-8]
   1c36c:	str	r1, [fp, #-12]
   1c370:	str	r2, [sp, #16]
   1c374:	str	r3, [sp, #12]
   1c378:	ldr	r0, [sp, #16]
   1c37c:	ldr	r1, [fp, #-12]
   1c380:	sub	r0, r0, r1
   1c384:	cmp	r0, #2
   1c388:	blt	1c39c <flatcc_json_parser_string_escape@@Base+0x40>
   1c38c:	ldr	r0, [fp, #-12]
   1c390:	ldrb	r0, [r0]
   1c394:	cmp	r0, #92	; 0x5c
   1c398:	beq	1c3c4 <flatcc_json_parser_string_escape@@Base+0x68>
   1c39c:	ldr	r0, [sp, #12]
   1c3a0:	movw	r1, #0
   1c3a4:	strb	r1, [r0]
   1c3a8:	ldr	r0, [fp, #-8]
   1c3ac:	ldr	r1, [fp, #-12]
   1c3b0:	ldr	r2, [sp, #16]
   1c3b4:	movw	r3, #18
   1c3b8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c3bc:	str	r0, [fp, #-4]
   1c3c0:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c3c4:	ldr	r0, [fp, #-12]
   1c3c8:	ldrb	r0, [r0, #1]
   1c3cc:	sub	r0, r0, #34	; 0x22
   1c3d0:	cmp	r0, #86	; 0x56
   1c3d4:	str	r0, [sp]
   1c3d8:	bhi	1cc50 <flatcc_json_parser_string_escape@@Base+0x8f4>
   1c3dc:	add	r0, pc, #8
   1c3e0:	ldr	r1, [sp]
   1c3e4:	ldr	r2, [r0, r1, lsl #2]
   1c3e8:	add	pc, r0, r2
   1c3ec:	andeq	r0, r0, ip, ror #15
   1c3f0:	andeq	r0, r0, r4, ror #16
   1c3f4:	andeq	r0, r0, r4, ror #16
   1c3f8:	andeq	r0, r0, r4, ror #16
   1c3fc:	andeq	r0, r0, r4, ror #16
   1c400:	andeq	r0, r0, r4, ror #16
   1c404:	andeq	r0, r0, r4, ror #16
   1c408:	andeq	r0, r0, r4, ror #16
   1c40c:	andeq	r0, r0, r4, ror #16
   1c410:	andeq	r0, r0, r4, ror #16
   1c414:	andeq	r0, r0, r4, ror #16
   1c418:	andeq	r0, r0, r4, ror #16
   1c41c:	andeq	r0, r0, r4, ror #16
   1c420:	andeq	r0, r0, ip, lsr r8
   1c424:	andeq	r0, r0, r4, ror #16
   1c428:	andeq	r0, r0, r4, ror #16
   1c42c:	andeq	r0, r0, r4, ror #16
   1c430:	andeq	r0, r0, r4, ror #16
   1c434:	andeq	r0, r0, r4, ror #16
   1c438:	andeq	r0, r0, r4, ror #16
   1c43c:	andeq	r0, r0, r4, ror #16
   1c440:	andeq	r0, r0, r4, ror #16
   1c444:	andeq	r0, r0, r4, ror #16
   1c448:	andeq	r0, r0, r4, ror #16
   1c44c:	andeq	r0, r0, r4, ror #16
   1c450:	andeq	r0, r0, r4, ror #16
   1c454:	andeq	r0, r0, r4, ror #16
   1c458:	andeq	r0, r0, r4, ror #16
   1c45c:	andeq	r0, r0, r4, ror #16
   1c460:	andeq	r0, r0, r4, ror #16
   1c464:	andeq	r0, r0, r4, ror #16
   1c468:	andeq	r0, r0, r4, ror #16
   1c46c:	andeq	r0, r0, r4, ror #16
   1c470:	andeq	r0, r0, r4, ror #16
   1c474:	andeq	r0, r0, r4, ror #16
   1c478:	andeq	r0, r0, r4, ror #16
   1c47c:	andeq	r0, r0, r4, ror #16
   1c480:	andeq	r0, r0, r4, ror #16
   1c484:	andeq	r0, r0, r4, ror #16
   1c488:	andeq	r0, r0, r4, ror #16
   1c48c:	andeq	r0, r0, r4, ror #16
   1c490:	andeq	r0, r0, r4, ror #16
   1c494:	andeq	r0, r0, r4, ror #16
   1c498:	andeq	r0, r0, r4, ror #16
   1c49c:	andeq	r0, r0, r4, ror #16
   1c4a0:	andeq	r0, r0, r4, ror #16
   1c4a4:	andeq	r0, r0, r4, ror #16
   1c4a8:	andeq	r0, r0, r4, ror #16
   1c4ac:	andeq	r0, r0, r4, ror #16
   1c4b0:	andeq	r0, r0, r4, ror #16
   1c4b4:	andeq	r0, r0, r4, ror #16
   1c4b8:	andeq	r0, r0, r4, ror #16
   1c4bc:	andeq	r0, r0, r4, ror #16
   1c4c0:	andeq	r0, r0, r4, ror #16
   1c4c4:	andeq	r0, r0, r4, ror #16
   1c4c8:	andeq	r0, r0, r4, ror #16
   1c4cc:	andeq	r0, r0, r4, ror #16
   1c4d0:	andeq	r0, r0, r4, ror #16
   1c4d4:	andeq	r0, r0, r4, lsl r8
   1c4d8:	andeq	r0, r0, r4, ror #16
   1c4dc:	andeq	r0, r0, r4, ror #16
   1c4e0:	andeq	r0, r0, r4, ror #16
   1c4e4:	andeq	r0, r0, r4, ror #16
   1c4e8:	andeq	r0, r0, r4, ror #16
   1c4ec:	muleq	r0, ip, r7
   1c4f0:	andeq	r0, r0, r4, ror #16
   1c4f4:	andeq	r0, r0, r4, ror #16
   1c4f8:	andeq	r0, r0, r4, ror #16
   1c4fc:	andeq	r0, r0, r4, asr #15
   1c500:	andeq	r0, r0, r4, ror #16
   1c504:	andeq	r0, r0, r4, ror #16
   1c508:	andeq	r0, r0, r4, ror #16
   1c50c:	andeq	r0, r0, r4, ror #16
   1c510:	andeq	r0, r0, r4, ror #16
   1c514:	andeq	r0, r0, r4, ror #16
   1c518:	andeq	r0, r0, r4, ror #16
   1c51c:	andeq	r0, r0, ip, asr #14
   1c520:	andeq	r0, r0, r4, ror #16
   1c524:	andeq	r0, r0, r4, ror #16
   1c528:	andeq	r0, r0, r4, ror #16
   1c52c:	andeq	r0, r0, r4, ror r7
   1c530:	andeq	r0, r0, r4, ror #16
   1c534:	andeq	r0, r0, r4, lsr #14
   1c538:	andeq	r0, r0, r0, lsr #6
   1c53c:	andeq	r0, r0, r4, ror #16
   1c540:	andeq	r0, r0, r4, ror #16
   1c544:	andeq	r0, r0, ip, asr r1
   1c548:	movw	r0, #0
   1c54c:	strb	r0, [sp, #10]
   1c550:	ldr	r0, [sp, #12]
   1c554:	movw	r1, #1
   1c558:	strb	r1, [r0]
   1c55c:	ldr	r0, [sp, #16]
   1c560:	ldr	r1, [fp, #-12]
   1c564:	sub	r0, r0, r1
   1c568:	cmp	r0, #4
   1c56c:	bge	1c598 <flatcc_json_parser_string_escape@@Base+0x23c>
   1c570:	ldr	r0, [sp, #12]
   1c574:	movw	r1, #0
   1c578:	strb	r1, [r0]
   1c57c:	ldr	r0, [fp, #-8]
   1c580:	ldr	r1, [fp, #-12]
   1c584:	ldr	r2, [sp, #16]
   1c588:	movw	r3, #18
   1c58c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c590:	str	r0, [fp, #-4]
   1c594:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c598:	ldr	r0, [fp, #-12]
   1c59c:	ldrb	r0, [r0, #2]
   1c5a0:	strb	r0, [sp, #11]
   1c5a4:	ldrb	r0, [sp, #11]
   1c5a8:	cmp	r0, #48	; 0x30
   1c5ac:	blt	1c5d8 <flatcc_json_parser_string_escape@@Base+0x27c>
   1c5b0:	ldrb	r0, [sp, #11]
   1c5b4:	cmp	r0, #57	; 0x39
   1c5b8:	bgt	1c5d8 <flatcc_json_parser_string_escape@@Base+0x27c>
   1c5bc:	ldrb	r0, [sp, #11]
   1c5c0:	sub	r0, r0, #48	; 0x30
   1c5c4:	lsl	r0, r0, #4
   1c5c8:	ldrb	r1, [sp, #10]
   1c5cc:	orr	r0, r1, r0
   1c5d0:	strb	r0, [sp, #10]
   1c5d4:	b	1c648 <flatcc_json_parser_string_escape@@Base+0x2ec>
   1c5d8:	ldrb	r0, [sp, #11]
   1c5dc:	orr	r0, r0, #32
   1c5e0:	strb	r0, [sp, #11]
   1c5e4:	ldrb	r0, [sp, #11]
   1c5e8:	cmp	r0, #97	; 0x61
   1c5ec:	blt	1c61c <flatcc_json_parser_string_escape@@Base+0x2c0>
   1c5f0:	ldrb	r0, [sp, #11]
   1c5f4:	cmp	r0, #102	; 0x66
   1c5f8:	bgt	1c61c <flatcc_json_parser_string_escape@@Base+0x2c0>
   1c5fc:	ldrb	r0, [sp, #11]
   1c600:	sub	r0, r0, #97	; 0x61
   1c604:	add	r0, r0, #10
   1c608:	lsl	r0, r0, #4
   1c60c:	ldrb	r1, [sp, #10]
   1c610:	orr	r0, r1, r0
   1c614:	strb	r0, [sp, #10]
   1c618:	b	1c644 <flatcc_json_parser_string_escape@@Base+0x2e8>
   1c61c:	ldr	r0, [sp, #12]
   1c620:	movw	r1, #0
   1c624:	strb	r1, [r0]
   1c628:	ldr	r0, [fp, #-8]
   1c62c:	ldr	r1, [fp, #-12]
   1c630:	ldr	r2, [sp, #16]
   1c634:	movw	r3, #18
   1c638:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c63c:	str	r0, [fp, #-4]
   1c640:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c644:	b	1c648 <flatcc_json_parser_string_escape@@Base+0x2ec>
   1c648:	ldr	r0, [fp, #-12]
   1c64c:	ldrb	r0, [r0, #3]
   1c650:	strb	r0, [sp, #11]
   1c654:	ldrb	r0, [sp, #11]
   1c658:	cmp	r0, #48	; 0x30
   1c65c:	blt	1c684 <flatcc_json_parser_string_escape@@Base+0x328>
   1c660:	ldrb	r0, [sp, #11]
   1c664:	cmp	r0, #57	; 0x39
   1c668:	bgt	1c684 <flatcc_json_parser_string_escape@@Base+0x328>
   1c66c:	ldrb	r0, [sp, #11]
   1c670:	sub	r0, r0, #48	; 0x30
   1c674:	ldrb	r1, [sp, #10]
   1c678:	orr	r0, r1, r0
   1c67c:	strb	r0, [sp, #10]
   1c680:	b	1c6f0 <flatcc_json_parser_string_escape@@Base+0x394>
   1c684:	ldrb	r0, [sp, #11]
   1c688:	orr	r0, r0, #32
   1c68c:	strb	r0, [sp, #11]
   1c690:	ldrb	r0, [sp, #11]
   1c694:	cmp	r0, #97	; 0x61
   1c698:	blt	1c6c4 <flatcc_json_parser_string_escape@@Base+0x368>
   1c69c:	ldrb	r0, [sp, #11]
   1c6a0:	cmp	r0, #102	; 0x66
   1c6a4:	bgt	1c6c4 <flatcc_json_parser_string_escape@@Base+0x368>
   1c6a8:	ldrb	r0, [sp, #11]
   1c6ac:	sub	r0, r0, #97	; 0x61
   1c6b0:	add	r0, r0, #10
   1c6b4:	ldrb	r1, [sp, #10]
   1c6b8:	orr	r0, r1, r0
   1c6bc:	strb	r0, [sp, #10]
   1c6c0:	b	1c6ec <flatcc_json_parser_string_escape@@Base+0x390>
   1c6c4:	ldr	r0, [sp, #12]
   1c6c8:	movw	r1, #0
   1c6cc:	strb	r1, [r0]
   1c6d0:	ldr	r0, [fp, #-8]
   1c6d4:	ldr	r1, [fp, #-12]
   1c6d8:	ldr	r2, [sp, #16]
   1c6dc:	movw	r3, #18
   1c6e0:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c6e4:	str	r0, [fp, #-4]
   1c6e8:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c6ec:	b	1c6f0 <flatcc_json_parser_string_escape@@Base+0x394>
   1c6f0:	ldrb	r0, [sp, #10]
   1c6f4:	ldr	r1, [sp, #12]
   1c6f8:	strb	r0, [r1, #1]
   1c6fc:	ldr	r0, [fp, #-12]
   1c700:	add	r0, r0, #4
   1c704:	str	r0, [fp, #-4]
   1c708:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c70c:	ldr	r0, [sp, #16]
   1c710:	ldr	r1, [fp, #-12]
   1c714:	sub	r0, r0, r1
   1c718:	cmp	r0, #6
   1c71c:	bge	1c748 <flatcc_json_parser_string_escape@@Base+0x3ec>
   1c720:	ldr	r0, [sp, #12]
   1c724:	movw	r1, #0
   1c728:	strb	r1, [r0]
   1c72c:	ldr	r0, [fp, #-8]
   1c730:	ldr	r1, [fp, #-12]
   1c734:	ldr	r2, [sp, #16]
   1c738:	movw	r3, #18
   1c73c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c740:	str	r0, [fp, #-4]
   1c744:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c748:	movw	r0, #0
   1c74c:	strh	r0, [sp, #8]
   1c750:	ldr	r0, [fp, #-12]
   1c754:	ldrb	r0, [r0, #2]
   1c758:	strb	r0, [sp, #11]
   1c75c:	ldrb	r0, [sp, #11]
   1c760:	cmp	r0, #48	; 0x30
   1c764:	blt	1c790 <flatcc_json_parser_string_escape@@Base+0x434>
   1c768:	ldrb	r0, [sp, #11]
   1c76c:	cmp	r0, #57	; 0x39
   1c770:	bgt	1c790 <flatcc_json_parser_string_escape@@Base+0x434>
   1c774:	ldrb	r0, [sp, #11]
   1c778:	sub	r0, r0, #48	; 0x30
   1c77c:	strh	r0, [sp, #6]
   1c780:	ldrh	r0, [sp, #6]
   1c784:	lsl	r0, r0, #12
   1c788:	strh	r0, [sp, #8]
   1c78c:	b	1c808 <flatcc_json_parser_string_escape@@Base+0x4ac>
   1c790:	ldrb	r0, [sp, #11]
   1c794:	orr	r0, r0, #32
   1c798:	strb	r0, [sp, #11]
   1c79c:	ldrb	r0, [sp, #11]
   1c7a0:	cmp	r0, #97	; 0x61
   1c7a4:	blt	1c7dc <flatcc_json_parser_string_escape@@Base+0x480>
   1c7a8:	ldrb	r0, [sp, #11]
   1c7ac:	cmp	r0, #102	; 0x66
   1c7b0:	bgt	1c7dc <flatcc_json_parser_string_escape@@Base+0x480>
   1c7b4:	ldrb	r0, [sp, #11]
   1c7b8:	sub	r0, r0, #97	; 0x61
   1c7bc:	add	r0, r0, #10
   1c7c0:	strh	r0, [sp, #6]
   1c7c4:	ldrh	r0, [sp, #6]
   1c7c8:	lsl	r0, r0, #12
   1c7cc:	ldrh	r1, [sp, #8]
   1c7d0:	orr	r0, r1, r0
   1c7d4:	strh	r0, [sp, #8]
   1c7d8:	b	1c804 <flatcc_json_parser_string_escape@@Base+0x4a8>
   1c7dc:	ldr	r0, [sp, #12]
   1c7e0:	movw	r1, #0
   1c7e4:	strb	r1, [r0]
   1c7e8:	ldr	r0, [fp, #-8]
   1c7ec:	ldr	r1, [fp, #-12]
   1c7f0:	ldr	r2, [sp, #16]
   1c7f4:	movw	r3, #18
   1c7f8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c7fc:	str	r0, [fp, #-4]
   1c800:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c804:	b	1c808 <flatcc_json_parser_string_escape@@Base+0x4ac>
   1c808:	ldr	r0, [fp, #-12]
   1c80c:	ldrb	r0, [r0, #3]
   1c810:	strb	r0, [sp, #11]
   1c814:	ldrb	r0, [sp, #11]
   1c818:	cmp	r0, #48	; 0x30
   1c81c:	blt	1c850 <flatcc_json_parser_string_escape@@Base+0x4f4>
   1c820:	ldrb	r0, [sp, #11]
   1c824:	cmp	r0, #57	; 0x39
   1c828:	bgt	1c850 <flatcc_json_parser_string_escape@@Base+0x4f4>
   1c82c:	ldrb	r0, [sp, #11]
   1c830:	sub	r0, r0, #48	; 0x30
   1c834:	strh	r0, [sp, #6]
   1c838:	ldrh	r0, [sp, #6]
   1c83c:	lsl	r0, r0, #8
   1c840:	ldrh	r1, [sp, #8]
   1c844:	orr	r0, r1, r0
   1c848:	strh	r0, [sp, #8]
   1c84c:	b	1c8c8 <flatcc_json_parser_string_escape@@Base+0x56c>
   1c850:	ldrb	r0, [sp, #11]
   1c854:	orr	r0, r0, #32
   1c858:	strb	r0, [sp, #11]
   1c85c:	ldrb	r0, [sp, #11]
   1c860:	cmp	r0, #97	; 0x61
   1c864:	blt	1c89c <flatcc_json_parser_string_escape@@Base+0x540>
   1c868:	ldrb	r0, [sp, #11]
   1c86c:	cmp	r0, #102	; 0x66
   1c870:	bgt	1c89c <flatcc_json_parser_string_escape@@Base+0x540>
   1c874:	ldrb	r0, [sp, #11]
   1c878:	sub	r0, r0, #97	; 0x61
   1c87c:	add	r0, r0, #10
   1c880:	strh	r0, [sp, #6]
   1c884:	ldrh	r0, [sp, #6]
   1c888:	lsl	r0, r0, #8
   1c88c:	ldrh	r1, [sp, #8]
   1c890:	orr	r0, r1, r0
   1c894:	strh	r0, [sp, #8]
   1c898:	b	1c8c4 <flatcc_json_parser_string_escape@@Base+0x568>
   1c89c:	ldr	r0, [sp, #12]
   1c8a0:	movw	r1, #0
   1c8a4:	strb	r1, [r0]
   1c8a8:	ldr	r0, [fp, #-8]
   1c8ac:	ldr	r1, [fp, #-12]
   1c8b0:	ldr	r2, [sp, #16]
   1c8b4:	movw	r3, #18
   1c8b8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c8bc:	str	r0, [fp, #-4]
   1c8c0:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c8c4:	b	1c8c8 <flatcc_json_parser_string_escape@@Base+0x56c>
   1c8c8:	ldr	r0, [fp, #-12]
   1c8cc:	ldrb	r0, [r0, #4]
   1c8d0:	strb	r0, [sp, #11]
   1c8d4:	ldrb	r0, [sp, #11]
   1c8d8:	cmp	r0, #48	; 0x30
   1c8dc:	blt	1c910 <flatcc_json_parser_string_escape@@Base+0x5b4>
   1c8e0:	ldrb	r0, [sp, #11]
   1c8e4:	cmp	r0, #57	; 0x39
   1c8e8:	bgt	1c910 <flatcc_json_parser_string_escape@@Base+0x5b4>
   1c8ec:	ldrb	r0, [sp, #11]
   1c8f0:	sub	r0, r0, #48	; 0x30
   1c8f4:	strh	r0, [sp, #6]
   1c8f8:	ldrh	r0, [sp, #6]
   1c8fc:	lsl	r0, r0, #4
   1c900:	ldrh	r1, [sp, #8]
   1c904:	orr	r0, r1, r0
   1c908:	strh	r0, [sp, #8]
   1c90c:	b	1c988 <flatcc_json_parser_string_escape@@Base+0x62c>
   1c910:	ldrb	r0, [sp, #11]
   1c914:	orr	r0, r0, #32
   1c918:	strb	r0, [sp, #11]
   1c91c:	ldrb	r0, [sp, #11]
   1c920:	cmp	r0, #97	; 0x61
   1c924:	blt	1c95c <flatcc_json_parser_string_escape@@Base+0x600>
   1c928:	ldrb	r0, [sp, #11]
   1c92c:	cmp	r0, #102	; 0x66
   1c930:	bgt	1c95c <flatcc_json_parser_string_escape@@Base+0x600>
   1c934:	ldrb	r0, [sp, #11]
   1c938:	sub	r0, r0, #97	; 0x61
   1c93c:	add	r0, r0, #10
   1c940:	strh	r0, [sp, #6]
   1c944:	ldrh	r0, [sp, #6]
   1c948:	lsl	r0, r0, #4
   1c94c:	ldrh	r1, [sp, #8]
   1c950:	orr	r0, r1, r0
   1c954:	strh	r0, [sp, #8]
   1c958:	b	1c984 <flatcc_json_parser_string_escape@@Base+0x628>
   1c95c:	ldr	r0, [sp, #12]
   1c960:	movw	r1, #0
   1c964:	strb	r1, [r0]
   1c968:	ldr	r0, [fp, #-8]
   1c96c:	ldr	r1, [fp, #-12]
   1c970:	ldr	r2, [sp, #16]
   1c974:	movw	r3, #18
   1c978:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1c97c:	str	r0, [fp, #-4]
   1c980:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1c984:	b	1c988 <flatcc_json_parser_string_escape@@Base+0x62c>
   1c988:	ldr	r0, [fp, #-12]
   1c98c:	ldrb	r0, [r0, #5]
   1c990:	strb	r0, [sp, #11]
   1c994:	ldrb	r0, [sp, #11]
   1c998:	cmp	r0, #48	; 0x30
   1c99c:	blt	1c9cc <flatcc_json_parser_string_escape@@Base+0x670>
   1c9a0:	ldrb	r0, [sp, #11]
   1c9a4:	cmp	r0, #57	; 0x39
   1c9a8:	bgt	1c9cc <flatcc_json_parser_string_escape@@Base+0x670>
   1c9ac:	ldrb	r0, [sp, #11]
   1c9b0:	sub	r0, r0, #48	; 0x30
   1c9b4:	strh	r0, [sp, #6]
   1c9b8:	ldrh	r0, [sp, #6]
   1c9bc:	ldrh	r1, [sp, #8]
   1c9c0:	orr	r0, r1, r0
   1c9c4:	strh	r0, [sp, #8]
   1c9c8:	b	1ca40 <flatcc_json_parser_string_escape@@Base+0x6e4>
   1c9cc:	ldrb	r0, [sp, #11]
   1c9d0:	orr	r0, r0, #32
   1c9d4:	strb	r0, [sp, #11]
   1c9d8:	ldrb	r0, [sp, #11]
   1c9dc:	cmp	r0, #97	; 0x61
   1c9e0:	blt	1ca14 <flatcc_json_parser_string_escape@@Base+0x6b8>
   1c9e4:	ldrb	r0, [sp, #11]
   1c9e8:	cmp	r0, #102	; 0x66
   1c9ec:	bgt	1ca14 <flatcc_json_parser_string_escape@@Base+0x6b8>
   1c9f0:	ldrb	r0, [sp, #11]
   1c9f4:	sub	r0, r0, #97	; 0x61
   1c9f8:	add	r0, r0, #10
   1c9fc:	strh	r0, [sp, #6]
   1ca00:	ldrh	r0, [sp, #6]
   1ca04:	ldrh	r1, [sp, #8]
   1ca08:	orr	r0, r1, r0
   1ca0c:	strh	r0, [sp, #8]
   1ca10:	b	1ca3c <flatcc_json_parser_string_escape@@Base+0x6e0>
   1ca14:	ldr	r0, [sp, #12]
   1ca18:	movw	r1, #0
   1ca1c:	strb	r1, [r0]
   1ca20:	ldr	r0, [fp, #-8]
   1ca24:	ldr	r1, [fp, #-12]
   1ca28:	ldr	r2, [sp, #16]
   1ca2c:	movw	r3, #18
   1ca30:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1ca34:	str	r0, [fp, #-4]
   1ca38:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1ca3c:	b	1ca40 <flatcc_json_parser_string_escape@@Base+0x6e4>
   1ca40:	ldrh	r0, [sp, #8]
   1ca44:	cmp	r0, #127	; 0x7f
   1ca48:	bgt	1ca68 <flatcc_json_parser_string_escape@@Base+0x70c>
   1ca4c:	ldr	r0, [sp, #12]
   1ca50:	movw	r1, #1
   1ca54:	strb	r1, [r0]
   1ca58:	ldrh	r0, [sp, #8]
   1ca5c:	ldr	r1, [sp, #12]
   1ca60:	strb	r0, [r1, #1]
   1ca64:	b	1cb00 <flatcc_json_parser_string_escape@@Base+0x7a4>
   1ca68:	ldrh	r0, [sp, #8]
   1ca6c:	movw	r1, #2047	; 0x7ff
   1ca70:	cmp	r0, r1
   1ca74:	bgt	1cab0 <flatcc_json_parser_string_escape@@Base+0x754>
   1ca78:	ldr	r0, [sp, #12]
   1ca7c:	movw	r1, #2
   1ca80:	strb	r1, [r0]
   1ca84:	ldrh	r0, [sp, #8]
   1ca88:	asr	r0, r0, #6
   1ca8c:	orr	r0, r0, #192	; 0xc0
   1ca90:	ldr	r1, [sp, #12]
   1ca94:	strb	r0, [r1, #1]
   1ca98:	ldrh	r0, [sp, #8]
   1ca9c:	and	r0, r0, #63	; 0x3f
   1caa0:	orr	r0, r0, #128	; 0x80
   1caa4:	ldr	r1, [sp, #12]
   1caa8:	strb	r0, [r1, #2]
   1caac:	b	1cafc <flatcc_json_parser_string_escape@@Base+0x7a0>
   1cab0:	ldr	r0, [sp, #12]
   1cab4:	movw	r1, #3
   1cab8:	strb	r1, [r0]
   1cabc:	ldrh	r0, [sp, #8]
   1cac0:	asr	r0, r0, #12
   1cac4:	orr	r0, r0, #224	; 0xe0
   1cac8:	ldr	r1, [sp, #12]
   1cacc:	strb	r0, [r1, #1]
   1cad0:	ldrh	r0, [sp, #8]
   1cad4:	asr	r0, r0, #6
   1cad8:	and	r0, r0, #63	; 0x3f
   1cadc:	orr	r0, r0, #128	; 0x80
   1cae0:	ldr	r1, [sp, #12]
   1cae4:	strb	r0, [r1, #2]
   1cae8:	ldrh	r0, [sp, #8]
   1caec:	and	r0, r0, #63	; 0x3f
   1caf0:	orr	r0, r0, #128	; 0x80
   1caf4:	ldr	r1, [sp, #12]
   1caf8:	strb	r0, [r1, #3]
   1cafc:	b	1cb00 <flatcc_json_parser_string_escape@@Base+0x7a4>
   1cb00:	ldr	r0, [fp, #-12]
   1cb04:	add	r0, r0, #6
   1cb08:	str	r0, [fp, #-4]
   1cb0c:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cb10:	ldr	r0, [sp, #12]
   1cb14:	movw	r1, #1
   1cb18:	strb	r1, [r0]
   1cb1c:	ldr	r0, [sp, #12]
   1cb20:	movw	r1, #9
   1cb24:	strb	r1, [r0, #1]
   1cb28:	ldr	r0, [fp, #-12]
   1cb2c:	add	r0, r0, #2
   1cb30:	str	r0, [fp, #-4]
   1cb34:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cb38:	ldr	r0, [sp, #12]
   1cb3c:	movw	r1, #1
   1cb40:	strb	r1, [r0]
   1cb44:	ldr	r0, [sp, #12]
   1cb48:	movw	r1, #10
   1cb4c:	strb	r1, [r0, #1]
   1cb50:	ldr	r0, [fp, #-12]
   1cb54:	add	r0, r0, #2
   1cb58:	str	r0, [fp, #-4]
   1cb5c:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cb60:	ldr	r0, [sp, #12]
   1cb64:	movw	r1, #1
   1cb68:	strb	r1, [r0]
   1cb6c:	ldr	r0, [sp, #12]
   1cb70:	movw	r1, #13
   1cb74:	strb	r1, [r0, #1]
   1cb78:	ldr	r0, [fp, #-12]
   1cb7c:	add	r0, r0, #2
   1cb80:	str	r0, [fp, #-4]
   1cb84:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cb88:	ldr	r0, [sp, #12]
   1cb8c:	movw	r1, #1
   1cb90:	strb	r1, [r0]
   1cb94:	ldr	r0, [sp, #12]
   1cb98:	movw	r1, #8
   1cb9c:	strb	r1, [r0, #1]
   1cba0:	ldr	r0, [fp, #-12]
   1cba4:	add	r0, r0, #2
   1cba8:	str	r0, [fp, #-4]
   1cbac:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cbb0:	ldr	r0, [sp, #12]
   1cbb4:	movw	r1, #1
   1cbb8:	strb	r1, [r0]
   1cbbc:	ldr	r0, [sp, #12]
   1cbc0:	movw	r1, #12
   1cbc4:	strb	r1, [r0, #1]
   1cbc8:	ldr	r0, [fp, #-12]
   1cbcc:	add	r0, r0, #2
   1cbd0:	str	r0, [fp, #-4]
   1cbd4:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cbd8:	ldr	r0, [sp, #12]
   1cbdc:	movw	r1, #1
   1cbe0:	strb	r1, [r0]
   1cbe4:	ldr	r0, [sp, #12]
   1cbe8:	movw	r1, #34	; 0x22
   1cbec:	strb	r1, [r0, #1]
   1cbf0:	ldr	r0, [fp, #-12]
   1cbf4:	add	r0, r0, #2
   1cbf8:	str	r0, [fp, #-4]
   1cbfc:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cc00:	ldr	r0, [sp, #12]
   1cc04:	movw	r1, #1
   1cc08:	strb	r1, [r0]
   1cc0c:	ldr	r0, [sp, #12]
   1cc10:	movw	r1, #92	; 0x5c
   1cc14:	strb	r1, [r0, #1]
   1cc18:	ldr	r0, [fp, #-12]
   1cc1c:	add	r0, r0, #2
   1cc20:	str	r0, [fp, #-4]
   1cc24:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cc28:	ldr	r0, [sp, #12]
   1cc2c:	movw	r1, #1
   1cc30:	strb	r1, [r0]
   1cc34:	ldr	r0, [sp, #12]
   1cc38:	movw	r1, #47	; 0x2f
   1cc3c:	strb	r1, [r0, #1]
   1cc40:	ldr	r0, [fp, #-12]
   1cc44:	add	r0, r0, #2
   1cc48:	str	r0, [fp, #-4]
   1cc4c:	b	1cc74 <flatcc_json_parser_string_escape@@Base+0x918>
   1cc50:	ldr	r0, [sp, #12]
   1cc54:	movw	r1, #0
   1cc58:	strb	r1, [r0]
   1cc5c:	ldr	r0, [fp, #-8]
   1cc60:	ldr	r1, [fp, #-12]
   1cc64:	ldr	r2, [sp, #16]
   1cc68:	movw	r3, #18
   1cc6c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1cc70:	str	r0, [fp, #-4]
   1cc74:	ldr	r0, [fp, #-4]
   1cc78:	mov	sp, fp
   1cc7c:	pop	{fp, pc}

0001cc80 <flatcc_json_parser_skip_constant@@Base>:
   1cc80:	push	{fp, lr}
   1cc84:	mov	fp, sp
   1cc88:	sub	sp, sp, #24
   1cc8c:	str	r0, [fp, #-8]
   1cc90:	str	r1, [sp, #12]
   1cc94:	str	r2, [sp, #8]
   1cc98:	ldr	r0, [sp, #12]
   1cc9c:	ldr	r1, [sp, #8]
   1cca0:	cmp	r0, r1
   1cca4:	beq	1cd70 <flatcc_json_parser_skip_constant@@Base+0xf0>
   1cca8:	ldr	r0, [sp, #12]
   1ccac:	ldrb	r0, [r0]
   1ccb0:	strb	r0, [sp, #7]
   1ccb4:	ldrb	r0, [sp, #7]
   1ccb8:	and	r0, r0, #128	; 0x80
   1ccbc:	cmp	r0, #0
   1ccc0:	bne	1ccf4 <flatcc_json_parser_skip_constant@@Base+0x74>
   1ccc4:	ldrb	r0, [sp, #7]
   1ccc8:	cmp	r0, #95	; 0x5f
   1cccc:	beq	1ccf4 <flatcc_json_parser_skip_constant@@Base+0x74>
   1ccd0:	ldrb	r0, [sp, #7]
   1ccd4:	cmp	r0, #48	; 0x30
   1ccd8:	blt	1cce8 <flatcc_json_parser_skip_constant@@Base+0x68>
   1ccdc:	ldrb	r0, [sp, #7]
   1cce0:	cmp	r0, #57	; 0x39
   1cce4:	ble	1ccf4 <flatcc_json_parser_skip_constant@@Base+0x74>
   1cce8:	ldrb	r0, [sp, #7]
   1ccec:	cmp	r0, #46	; 0x2e
   1ccf0:	bne	1cd04 <flatcc_json_parser_skip_constant@@Base+0x84>
   1ccf4:	ldr	r0, [sp, #12]
   1ccf8:	add	r0, r0, #1
   1ccfc:	str	r0, [sp, #12]
   1cd00:	b	1cc98 <flatcc_json_parser_skip_constant@@Base+0x18>
   1cd04:	ldrb	r0, [sp, #7]
   1cd08:	orr	r0, r0, #32
   1cd0c:	strb	r0, [sp, #7]
   1cd10:	ldrb	r0, [sp, #7]
   1cd14:	cmp	r0, #97	; 0x61
   1cd18:	blt	1cd38 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1cd1c:	ldrb	r0, [sp, #7]
   1cd20:	cmp	r0, #122	; 0x7a
   1cd24:	bgt	1cd38 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1cd28:	ldr	r0, [sp, #12]
   1cd2c:	add	r0, r0, #1
   1cd30:	str	r0, [sp, #12]
   1cd34:	b	1cc98 <flatcc_json_parser_skip_constant@@Base+0x18>
   1cd38:	ldr	r0, [fp, #-8]
   1cd3c:	ldr	r1, [sp, #12]
   1cd40:	str	r1, [sp]
   1cd44:	ldr	r2, [sp, #8]
   1cd48:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1cd4c:	str	r0, [sp, #12]
   1cd50:	ldr	r0, [sp, #12]
   1cd54:	ldr	r1, [sp]
   1cd58:	cmp	r0, r1
   1cd5c:	bne	1cd6c <flatcc_json_parser_skip_constant@@Base+0xec>
   1cd60:	ldr	r0, [sp, #12]
   1cd64:	str	r0, [fp, #-4]
   1cd68:	b	1cd78 <flatcc_json_parser_skip_constant@@Base+0xf8>
   1cd6c:	b	1cc98 <flatcc_json_parser_skip_constant@@Base+0x18>
   1cd70:	ldr	r0, [sp, #12]
   1cd74:	str	r0, [fp, #-4]
   1cd78:	ldr	r0, [fp, #-4]
   1cd7c:	mov	sp, fp
   1cd80:	pop	{fp, pc}
   1cd84:	push	{fp, lr}
   1cd88:	mov	fp, sp
   1cd8c:	sub	sp, sp, #16
   1cd90:	str	r0, [sp, #8]
   1cd94:	str	r1, [sp, #4]
   1cd98:	str	r2, [sp]
   1cd9c:	ldr	r0, [sp]
   1cda0:	ldr	r1, [sp, #4]
   1cda4:	sub	r0, r0, r1
   1cda8:	cmp	r0, #1
   1cdac:	ble	1ce00 <flatcc_json_parser_skip_constant@@Base+0x180>
   1cdb0:	ldr	r0, [sp, #4]
   1cdb4:	ldrb	r0, [r0]
   1cdb8:	cmp	r0, #32
   1cdbc:	ble	1cdcc <flatcc_json_parser_skip_constant@@Base+0x14c>
   1cdc0:	ldr	r0, [sp, #4]
   1cdc4:	str	r0, [fp, #-4]
   1cdc8:	b	1ce14 <flatcc_json_parser_skip_constant@@Base+0x194>
   1cdcc:	ldr	r0, [sp, #4]
   1cdd0:	ldrb	r0, [r0]
   1cdd4:	cmp	r0, #32
   1cdd8:	bne	1cdfc <flatcc_json_parser_skip_constant@@Base+0x17c>
   1cddc:	ldr	r0, [sp, #4]
   1cde0:	ldrb	r0, [r0, #1]
   1cde4:	cmp	r0, #32
   1cde8:	ble	1cdfc <flatcc_json_parser_skip_constant@@Base+0x17c>
   1cdec:	ldr	r0, [sp, #4]
   1cdf0:	add	r0, r0, #1
   1cdf4:	str	r0, [fp, #-4]
   1cdf8:	b	1ce14 <flatcc_json_parser_skip_constant@@Base+0x194>
   1cdfc:	b	1ce00 <flatcc_json_parser_skip_constant@@Base+0x180>
   1ce00:	ldr	r0, [sp, #8]
   1ce04:	ldr	r1, [sp, #4]
   1ce08:	ldr	r2, [sp]
   1ce0c:	bl	1c178 <flatcc_json_parser_space_ext@@Base>
   1ce10:	str	r0, [fp, #-4]
   1ce14:	ldr	r0, [fp, #-4]
   1ce18:	mov	sp, fp
   1ce1c:	pop	{fp, pc}

0001ce20 <flatcc_json_parser_match_constant@@Base>:
   1ce20:	push	{fp, lr}
   1ce24:	mov	fp, sp
   1ce28:	sub	sp, sp, #40	; 0x28
   1ce2c:	ldr	ip, [fp, #8]
   1ce30:	str	r0, [fp, #-8]
   1ce34:	str	r1, [fp, #-12]
   1ce38:	str	r2, [fp, #-16]
   1ce3c:	str	r3, [sp, #20]
   1ce40:	ldr	r0, [fp, #-12]
   1ce44:	str	r0, [sp, #16]
   1ce48:	ldr	r0, [fp, #-12]
   1ce4c:	ldr	r1, [sp, #20]
   1ce50:	add	r0, r0, r1
   1ce54:	str	r0, [sp, #12]
   1ce58:	ldr	r0, [fp, #-16]
   1ce5c:	ldr	r1, [fp, #-12]
   1ce60:	sub	r0, r0, r1
   1ce64:	ldr	r1, [sp, #20]
   1ce68:	cmp	r0, r1
   1ce6c:	bgt	1ce88 <flatcc_json_parser_match_constant@@Base+0x68>
   1ce70:	ldr	r0, [fp, #8]
   1ce74:	movw	r1, #0
   1ce78:	str	r1, [r0]
   1ce7c:	ldr	r0, [fp, #-12]
   1ce80:	str	r0, [fp, #-4]
   1ce84:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1ce88:	ldr	r0, [fp, #-8]
   1ce8c:	ldr	r0, [r0, #12]
   1ce90:	cmp	r0, #0
   1ce94:	beq	1cfb8 <flatcc_json_parser_match_constant@@Base+0x198>
   1ce98:	ldr	r0, [fp, #-8]
   1ce9c:	ldr	r1, [sp, #12]
   1cea0:	ldr	r2, [fp, #-16]
   1cea4:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1cea8:	str	r0, [fp, #-12]
   1ceac:	ldr	r0, [fp, #-12]
   1ceb0:	ldr	r1, [fp, #-16]
   1ceb4:	cmp	r0, r1
   1ceb8:	bne	1ced4 <flatcc_json_parser_match_constant@@Base+0xb4>
   1cebc:	ldr	r0, [fp, #8]
   1cec0:	movw	r1, #0
   1cec4:	str	r1, [r0]
   1cec8:	ldr	r0, [fp, #-12]
   1cecc:	str	r0, [fp, #-4]
   1ced0:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1ced4:	ldr	r0, [fp, #-12]
   1ced8:	ldr	r1, [sp, #12]
   1cedc:	cmp	r0, r1
   1cee0:	beq	1cf64 <flatcc_json_parser_match_constant@@Base+0x144>
   1cee4:	ldr	r0, [fp, #-12]
   1cee8:	ldrb	r0, [r0]
   1ceec:	strb	r0, [sp, #11]
   1cef0:	ldrb	r0, [sp, #11]
   1cef4:	cmp	r0, #95	; 0x5f
   1cef8:	beq	1cf0c <flatcc_json_parser_match_constant@@Base+0xec>
   1cefc:	ldrb	r0, [sp, #11]
   1cf00:	and	r0, r0, #128	; 0x80
   1cf04:	cmp	r0, #0
   1cf08:	beq	1cf24 <flatcc_json_parser_match_constant@@Base+0x104>
   1cf0c:	ldr	r0, [fp, #8]
   1cf10:	movw	r1, #1
   1cf14:	str	r1, [r0]
   1cf18:	ldr	r0, [fp, #-12]
   1cf1c:	str	r0, [fp, #-4]
   1cf20:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1cf24:	ldrb	r0, [sp, #11]
   1cf28:	orr	r0, r0, #32
   1cf2c:	strb	r0, [sp, #11]
   1cf30:	ldrb	r0, [sp, #11]
   1cf34:	cmp	r0, #97	; 0x61
   1cf38:	blt	1cf60 <flatcc_json_parser_match_constant@@Base+0x140>
   1cf3c:	ldrb	r0, [sp, #11]
   1cf40:	cmp	r0, #122	; 0x7a
   1cf44:	bgt	1cf60 <flatcc_json_parser_match_constant@@Base+0x140>
   1cf48:	ldr	r0, [fp, #8]
   1cf4c:	movw	r1, #1
   1cf50:	str	r1, [r0]
   1cf54:	ldr	r0, [fp, #-12]
   1cf58:	str	r0, [fp, #-4]
   1cf5c:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1cf60:	b	1cf64 <flatcc_json_parser_match_constant@@Base+0x144>
   1cf64:	ldr	r0, [fp, #8]
   1cf68:	movw	r1, #0
   1cf6c:	str	r1, [r0]
   1cf70:	ldr	r0, [fp, #-12]
   1cf74:	ldrb	r0, [r0]
   1cf78:	cmp	r0, #44	; 0x2c
   1cf7c:	beq	1cfa0 <flatcc_json_parser_match_constant@@Base+0x180>
   1cf80:	ldr	r0, [fp, #-12]
   1cf84:	ldrb	r0, [r0]
   1cf88:	cmp	r0, #125	; 0x7d
   1cf8c:	beq	1cfa0 <flatcc_json_parser_match_constant@@Base+0x180>
   1cf90:	ldr	r0, [fp, #-12]
   1cf94:	ldrb	r0, [r0]
   1cf98:	cmp	r0, #93	; 0x5d
   1cf9c:	bne	1cfac <flatcc_json_parser_match_constant@@Base+0x18c>
   1cfa0:	ldr	r0, [fp, #-12]
   1cfa4:	str	r0, [fp, #-4]
   1cfa8:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1cfac:	ldr	r0, [sp, #16]
   1cfb0:	str	r0, [fp, #-4]
   1cfb4:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1cfb8:	ldr	r0, [sp, #12]
   1cfbc:	str	r0, [fp, #-12]
   1cfc0:	ldr	r0, [fp, #-12]
   1cfc4:	ldrb	r0, [r0]
   1cfc8:	cmp	r0, #32
   1cfcc:	bne	1d07c <flatcc_json_parser_match_constant@@Base+0x25c>
   1cfd0:	ldr	r0, [fp, #-12]
   1cfd4:	add	r0, r0, #1
   1cfd8:	str	r0, [fp, #-12]
   1cfdc:	ldr	r0, [fp, #-12]
   1cfe0:	ldr	r1, [fp, #-16]
   1cfe4:	cmp	r0, r1
   1cfe8:	movw	r0, #0
   1cfec:	str	r0, [sp, #4]
   1cff0:	beq	1d00c <flatcc_json_parser_match_constant@@Base+0x1ec>
   1cff4:	ldr	r0, [fp, #-12]
   1cff8:	ldrb	r0, [r0]
   1cffc:	cmp	r0, #32
   1d000:	movw	r0, #0
   1d004:	moveq	r0, #1
   1d008:	str	r0, [sp, #4]
   1d00c:	ldr	r0, [sp, #4]
   1d010:	tst	r0, #1
   1d014:	beq	1d028 <flatcc_json_parser_match_constant@@Base+0x208>
   1d018:	ldr	r0, [fp, #-12]
   1d01c:	add	r0, r0, #1
   1d020:	str	r0, [fp, #-12]
   1d024:	b	1cfdc <flatcc_json_parser_match_constant@@Base+0x1bc>
   1d028:	ldr	r0, [fp, #-12]
   1d02c:	ldr	r1, [fp, #-16]
   1d030:	cmp	r0, r1
   1d034:	bne	1d050 <flatcc_json_parser_match_constant@@Base+0x230>
   1d038:	ldr	r0, [fp, #8]
   1d03c:	movw	r1, #0
   1d040:	str	r1, [r0]
   1d044:	ldr	r0, [fp, #-12]
   1d048:	str	r0, [fp, #-4]
   1d04c:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1d050:	ldr	r0, [fp, #-12]
   1d054:	ldrb	r0, [r0]
   1d058:	cmp	r0, #34	; 0x22
   1d05c:	beq	1d078 <flatcc_json_parser_match_constant@@Base+0x258>
   1d060:	ldr	r0, [fp, #8]
   1d064:	movw	r1, #1
   1d068:	str	r1, [r0]
   1d06c:	ldr	r0, [fp, #-12]
   1d070:	str	r0, [fp, #-4]
   1d074:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1d078:	b	1d07c <flatcc_json_parser_match_constant@@Base+0x25c>
   1d07c:	ldr	r0, [fp, #-12]
   1d080:	ldrb	r0, [r0]
   1d084:	mov	r1, r0
   1d088:	cmp	r0, #34	; 0x22
   1d08c:	str	r1, [sp]
   1d090:	beq	1d0d0 <flatcc_json_parser_match_constant@@Base+0x2b0>
   1d094:	b	1d098 <flatcc_json_parser_match_constant@@Base+0x278>
   1d098:	ldr	r0, [sp]
   1d09c:	cmp	r0, #92	; 0x5c
   1d0a0:	bne	1d100 <flatcc_json_parser_match_constant@@Base+0x2e0>
   1d0a4:	b	1d0a8 <flatcc_json_parser_match_constant@@Base+0x288>
   1d0a8:	ldr	r0, [fp, #8]
   1d0ac:	movw	r1, #0
   1d0b0:	str	r1, [r0]
   1d0b4:	ldr	r0, [fp, #-8]
   1d0b8:	ldr	r1, [fp, #-12]
   1d0bc:	ldr	r2, [fp, #-16]
   1d0c0:	movw	r3, #18
   1d0c4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d0c8:	str	r0, [fp, #-4]
   1d0cc:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1d0d0:	ldr	r0, [fp, #-8]
   1d0d4:	ldr	r1, [fp, #-12]
   1d0d8:	add	r1, r1, #1
   1d0dc:	movw	r2, #0
   1d0e0:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d0e4:	str	r0, [fp, #-12]
   1d0e8:	ldr	r0, [fp, #8]
   1d0ec:	movw	r1, #0
   1d0f0:	str	r1, [r0]
   1d0f4:	ldr	r0, [fp, #-12]
   1d0f8:	str	r0, [fp, #-4]
   1d0fc:	b	1d114 <flatcc_json_parser_match_constant@@Base+0x2f4>
   1d100:	ldr	r0, [fp, #8]
   1d104:	movw	r1, #0
   1d108:	str	r1, [r0]
   1d10c:	ldr	r0, [sp, #16]
   1d110:	str	r0, [fp, #-4]
   1d114:	ldr	r0, [fp, #-4]
   1d118:	mov	sp, fp
   1d11c:	pop	{fp, pc}

0001d120 <flatcc_json_parser_unmatched_symbol@@Base>:
   1d120:	push	{fp, lr}
   1d124:	mov	fp, sp
   1d128:	sub	sp, sp, #16
   1d12c:	str	r0, [sp, #8]
   1d130:	str	r1, [sp, #4]
   1d134:	str	r2, [sp]
   1d138:	ldr	r0, [sp, #8]
   1d13c:	ldr	r0, [r0, #8]
   1d140:	and	r0, r0, #1
   1d144:	cmp	r0, #0
   1d148:	beq	1d1ec <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1d14c:	ldr	r0, [sp, #8]
   1d150:	ldr	r1, [sp, #4]
   1d154:	ldr	r2, [sp]
   1d158:	bl	1d210 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1d15c:	str	r0, [sp, #4]
   1d160:	ldr	r0, [sp, #8]
   1d164:	ldr	r1, [sp, #4]
   1d168:	ldr	r2, [sp]
   1d16c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d170:	str	r0, [sp, #4]
   1d174:	ldr	r0, [sp, #4]
   1d178:	ldr	r1, [sp]
   1d17c:	cmp	r0, r1
   1d180:	beq	1d1b8 <flatcc_json_parser_unmatched_symbol@@Base+0x98>
   1d184:	ldr	r0, [sp, #4]
   1d188:	ldrb	r0, [r0]
   1d18c:	cmp	r0, #58	; 0x3a
   1d190:	bne	1d1b8 <flatcc_json_parser_unmatched_symbol@@Base+0x98>
   1d194:	ldr	r0, [sp, #4]
   1d198:	add	r0, r0, #1
   1d19c:	str	r0, [sp, #4]
   1d1a0:	ldr	r0, [sp, #8]
   1d1a4:	ldr	r1, [sp, #4]
   1d1a8:	ldr	r2, [sp]
   1d1ac:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d1b0:	str	r0, [sp, #4]
   1d1b4:	b	1d1d4 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   1d1b8:	ldr	r0, [sp, #8]
   1d1bc:	ldr	r1, [sp, #4]
   1d1c0:	ldr	r2, [sp]
   1d1c4:	movw	r3, #4
   1d1c8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d1cc:	str	r0, [fp, #-4]
   1d1d0:	b	1d204 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   1d1d4:	ldr	r0, [sp, #8]
   1d1d8:	ldr	r1, [sp, #4]
   1d1dc:	ldr	r2, [sp]
   1d1e0:	bl	1d424 <flatcc_json_parser_generic_json@@Base>
   1d1e4:	str	r0, [fp, #-4]
   1d1e8:	b	1d204 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   1d1ec:	ldr	r0, [sp, #8]
   1d1f0:	ldr	r1, [sp, #4]
   1d1f4:	ldr	r2, [sp]
   1d1f8:	movw	r3, #13
   1d1fc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d200:	str	r0, [fp, #-4]
   1d204:	ldr	r0, [fp, #-4]
   1d208:	mov	sp, fp
   1d20c:	pop	{fp, pc}
   1d210:	push	{fp, lr}
   1d214:	mov	fp, sp
   1d218:	sub	sp, sp, #32
   1d21c:	str	r0, [fp, #-8]
   1d220:	str	r1, [fp, #-12]
   1d224:	str	r2, [sp, #16]
   1d228:	movw	r0, #0
   1d22c:	strb	r0, [sp, #14]
   1d230:	ldr	r0, [fp, #-8]
   1d234:	ldr	r0, [r0, #12]
   1d238:	cmp	r0, #0
   1d23c:	beq	1d344 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   1d240:	b	1d244 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d244:	ldr	r0, [fp, #-12]
   1d248:	ldr	r1, [sp, #16]
   1d24c:	cmp	r0, r1
   1d250:	movw	r0, #0
   1d254:	str	r0, [sp, #8]
   1d258:	beq	1d274 <flatcc_json_parser_unmatched_symbol@@Base+0x154>
   1d25c:	ldr	r0, [fp, #-12]
   1d260:	ldrb	r0, [r0]
   1d264:	cmp	r0, #32
   1d268:	movw	r0, #0
   1d26c:	movgt	r0, #1
   1d270:	str	r0, [sp, #8]
   1d274:	ldr	r0, [sp, #8]
   1d278:	tst	r0, #1
   1d27c:	beq	1d318 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1d280:	ldr	r0, [fp, #-12]
   1d284:	ldrb	r0, [r0]
   1d288:	strb	r0, [sp, #15]
   1d28c:	strb	r0, [sp, #14]
   1d290:	ldrb	r0, [sp, #15]
   1d294:	cmp	r0, #95	; 0x5f
   1d298:	beq	1d2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d29c:	ldrb	r0, [sp, #15]
   1d2a0:	cmp	r0, #46	; 0x2e
   1d2a4:	beq	1d2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d2a8:	ldrb	r0, [sp, #15]
   1d2ac:	and	r0, r0, #128	; 0x80
   1d2b0:	cmp	r0, #0
   1d2b4:	bne	1d2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1d2b8:	ldrb	r0, [sp, #15]
   1d2bc:	cmp	r0, #48	; 0x30
   1d2c0:	blt	1d2e0 <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1d2c4:	ldrb	r0, [sp, #15]
   1d2c8:	cmp	r0, #57	; 0x39
   1d2cc:	bgt	1d2e0 <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1d2d0:	ldr	r0, [fp, #-12]
   1d2d4:	add	r0, r0, #1
   1d2d8:	str	r0, [fp, #-12]
   1d2dc:	b	1d244 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d2e0:	ldrb	r0, [sp, #15]
   1d2e4:	orr	r0, r0, #32
   1d2e8:	strb	r0, [sp, #15]
   1d2ec:	ldrb	r0, [sp, #15]
   1d2f0:	cmp	r0, #97	; 0x61
   1d2f4:	blt	1d314 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1d2f8:	ldrb	r0, [sp, #15]
   1d2fc:	cmp	r0, #122	; 0x7a
   1d300:	bgt	1d314 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1d304:	ldr	r0, [fp, #-12]
   1d308:	add	r0, r0, #1
   1d30c:	str	r0, [fp, #-12]
   1d310:	b	1d244 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   1d314:	b	1d318 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1d318:	ldrb	r0, [sp, #14]
   1d31c:	cmp	r0, #46	; 0x2e
   1d320:	bne	1d340 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   1d324:	ldr	r0, [fp, #-8]
   1d328:	ldr	r1, [fp, #-12]
   1d32c:	ldr	r2, [sp, #16]
   1d330:	movw	r3, #5
   1d334:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d338:	str	r0, [fp, #-4]
   1d33c:	b	1d418 <flatcc_json_parser_unmatched_symbol@@Base+0x2f8>
   1d340:	b	1d410 <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   1d344:	b	1d348 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1d348:	ldr	r0, [fp, #-12]
   1d34c:	ldr	r1, [sp, #16]
   1d350:	cmp	r0, r1
   1d354:	movw	r0, #0
   1d358:	str	r0, [sp, #4]
   1d35c:	beq	1d378 <flatcc_json_parser_unmatched_symbol@@Base+0x258>
   1d360:	ldr	r0, [fp, #-12]
   1d364:	ldrb	r0, [r0]
   1d368:	cmp	r0, #34	; 0x22
   1d36c:	movw	r0, #0
   1d370:	movne	r0, #1
   1d374:	str	r0, [sp, #4]
   1d378:	ldr	r0, [sp, #4]
   1d37c:	tst	r0, #1
   1d380:	beq	1d3c8 <flatcc_json_parser_unmatched_symbol@@Base+0x2a8>
   1d384:	ldr	r0, [fp, #-12]
   1d388:	ldrb	r0, [r0]
   1d38c:	cmp	r0, #92	; 0x5c
   1d390:	bne	1d3b8 <flatcc_json_parser_unmatched_symbol@@Base+0x298>
   1d394:	ldr	r0, [sp, #16]
   1d398:	ldr	r1, [fp, #-12]
   1d39c:	sub	r0, r0, r1
   1d3a0:	cmp	r0, #2
   1d3a4:	bge	1d3ac <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   1d3a8:	b	1d3c8 <flatcc_json_parser_unmatched_symbol@@Base+0x2a8>
   1d3ac:	ldr	r0, [fp, #-12]
   1d3b0:	add	r0, r0, #1
   1d3b4:	str	r0, [fp, #-12]
   1d3b8:	ldr	r0, [fp, #-12]
   1d3bc:	add	r0, r0, #1
   1d3c0:	str	r0, [fp, #-12]
   1d3c4:	b	1d348 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1d3c8:	ldr	r0, [fp, #-12]
   1d3cc:	ldr	r1, [sp, #16]
   1d3d0:	cmp	r0, r1
   1d3d4:	beq	1d3e8 <flatcc_json_parser_unmatched_symbol@@Base+0x2c8>
   1d3d8:	ldr	r0, [fp, #-12]
   1d3dc:	ldrb	r0, [r0]
   1d3e0:	cmp	r0, #34	; 0x22
   1d3e4:	beq	1d404 <flatcc_json_parser_unmatched_symbol@@Base+0x2e4>
   1d3e8:	ldr	r0, [fp, #-8]
   1d3ec:	ldr	r1, [fp, #-12]
   1d3f0:	ldr	r2, [sp, #16]
   1d3f4:	movw	r3, #20
   1d3f8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d3fc:	str	r0, [fp, #-4]
   1d400:	b	1d418 <flatcc_json_parser_unmatched_symbol@@Base+0x2f8>
   1d404:	ldr	r0, [fp, #-12]
   1d408:	add	r0, r0, #1
   1d40c:	str	r0, [fp, #-12]
   1d410:	ldr	r0, [fp, #-12]
   1d414:	str	r0, [fp, #-4]
   1d418:	ldr	r0, [fp, #-4]
   1d41c:	mov	sp, fp
   1d420:	pop	{fp, pc}

0001d424 <flatcc_json_parser_generic_json@@Base>:
   1d424:	push	{r4, r5, fp, lr}
   1d428:	add	fp, sp, #8
   1d42c:	sub	sp, sp, #560	; 0x230
   1d430:	add	r3, sp, #32
   1d434:	str	r0, [fp, #-16]
   1d438:	str	r1, [fp, #-20]	; 0xffffffec
   1d43c:	str	r2, [fp, #-24]	; 0xffffffe8
   1d440:	movw	r0, #0
   1d444:	str	r0, [sp, #12]
   1d448:	str	r3, [sp, #28]
   1d44c:	ldr	r0, [sp, #28]
   1d450:	add	r0, r0, #512	; 0x200
   1d454:	str	r0, [sp, #24]
   1d458:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d45c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d460:	cmp	r0, r1
   1d464:	bne	1d474 <flatcc_json_parser_generic_json@@Base+0x50>
   1d468:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d46c:	str	r0, [fp, #-12]
   1d470:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d474:	add	r0, sp, #32
   1d478:	ldr	r1, [sp, #28]
   1d47c:	cmp	r1, r0
   1d480:	beq	1d548 <flatcc_json_parser_generic_json@@Base+0x124>
   1d484:	ldr	r0, [sp, #28]
   1d488:	mvn	r1, #0
   1d48c:	add	r0, r0, r1
   1d490:	ldrb	r0, [r0]
   1d494:	cmp	r0, #125	; 0x7d
   1d498:	bne	1d548 <flatcc_json_parser_generic_json@@Base+0x124>
   1d49c:	ldr	r0, [fp, #-16]
   1d4a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d4a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4a8:	bl	1de34 <flatcc_json_parser_float@@Base+0x254>
   1d4ac:	str	r0, [fp, #-20]	; 0xffffffec
   1d4b0:	ldr	r0, [fp, #-16]
   1d4b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d4b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4bc:	bl	1d210 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1d4c0:	str	r0, [fp, #-20]	; 0xffffffec
   1d4c4:	ldr	r0, [fp, #-16]
   1d4c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d4cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4d0:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d4d4:	str	r0, [fp, #-20]	; 0xffffffec
   1d4d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d4dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d4e0:	cmp	r0, r1
   1d4e4:	bne	1d504 <flatcc_json_parser_generic_json@@Base+0xe0>
   1d4e8:	ldr	r0, [fp, #-16]
   1d4ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d4f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4f4:	movw	r3, #10
   1d4f8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d4fc:	str	r0, [fp, #-12]
   1d500:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d504:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d508:	ldrb	r0, [r0]
   1d50c:	cmp	r0, #58	; 0x3a
   1d510:	beq	1d530 <flatcc_json_parser_generic_json@@Base+0x10c>
   1d514:	ldr	r0, [fp, #-16]
   1d518:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d51c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d520:	movw	r3, #4
   1d524:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d528:	str	r0, [fp, #-12]
   1d52c:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d530:	ldr	r0, [fp, #-16]
   1d534:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d538:	add	r1, r1, #1
   1d53c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d540:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d544:	str	r0, [fp, #-20]	; 0xffffffec
   1d548:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d54c:	ldrb	r0, [r0]
   1d550:	sub	r0, r0, #34	; 0x22
   1d554:	cmp	r0, #89	; 0x59
   1d558:	str	r0, [sp, #8]
   1d55c:	bhi	1d8ac <flatcc_json_parser_generic_json@@Base+0x488>
   1d560:	add	r0, pc, #8
   1d564:	ldr	r1, [sp, #8]
   1d568:	ldr	r2, [r0, r1, lsl #2]
   1d56c:	add	pc, r0, r2
   1d570:	andeq	r0, r0, r8, ror #2
   1d574:	andeq	r0, r0, ip, lsr r3
   1d578:	andeq	r0, r0, ip, lsr r3
   1d57c:	andeq	r0, r0, ip, lsr r3
   1d580:	andeq	r0, r0, ip, lsr r3
   1d584:	andeq	r0, r0, ip, lsr r3
   1d588:	andeq	r0, r0, ip, lsr r3
   1d58c:	andeq	r0, r0, ip, lsr r3
   1d590:	andeq	r0, r0, ip, lsr r3
   1d594:	andeq	r0, r0, ip, lsr r3
   1d598:	andeq	r0, r0, ip, lsr r3
   1d59c:	andeq	r0, r0, r4, lsr #4
   1d5a0:	andeq	r0, r0, ip, lsr r3
   1d5a4:	andeq	r0, r0, ip, lsr r3
   1d5a8:	andeq	r0, r0, r4, lsr #4
   1d5ac:	andeq	r0, r0, r4, lsr #4
   1d5b0:	andeq	r0, r0, r4, lsr #4
   1d5b4:	andeq	r0, r0, r4, lsr #4
   1d5b8:	andeq	r0, r0, r4, lsr #4
   1d5bc:	andeq	r0, r0, r4, lsr #4
   1d5c0:	andeq	r0, r0, r4, lsr #4
   1d5c4:	andeq	r0, r0, r4, lsr #4
   1d5c8:	andeq	r0, r0, r4, lsr #4
   1d5cc:	andeq	r0, r0, r4, lsr #4
   1d5d0:	andeq	r0, r0, ip, lsr r3
   1d5d4:	andeq	r0, r0, ip, lsr r3
   1d5d8:	andeq	r0, r0, ip, lsr r3
   1d5dc:	andeq	r0, r0, ip, lsr r3
   1d5e0:	andeq	r0, r0, ip, lsr r3
   1d5e4:	andeq	r0, r0, ip, lsr r3
   1d5e8:	andeq	r0, r0, ip, lsr r3
   1d5ec:	andeq	r0, r0, ip, lsr r3
   1d5f0:	andeq	r0, r0, ip, lsr r3
   1d5f4:	andeq	r0, r0, ip, lsr r3
   1d5f8:	andeq	r0, r0, ip, lsr r3
   1d5fc:	andeq	r0, r0, ip, lsr r3
   1d600:	andeq	r0, r0, ip, lsr r3
   1d604:	andeq	r0, r0, ip, lsr r3
   1d608:	andeq	r0, r0, ip, lsr r3
   1d60c:	andeq	r0, r0, ip, lsr r3
   1d610:	andeq	r0, r0, ip, lsr r3
   1d614:	andeq	r0, r0, ip, lsr r3
   1d618:	andeq	r0, r0, ip, lsr r3
   1d61c:	andeq	r0, r0, ip, lsr r3
   1d620:	andeq	r0, r0, ip, lsr r3
   1d624:	andeq	r0, r0, ip, lsr r3
   1d628:	andeq	r0, r0, ip, lsr r3
   1d62c:	andeq	r0, r0, ip, lsr r3
   1d630:	andeq	r0, r0, ip, lsr r3
   1d634:	andeq	r0, r0, ip, lsr r3
   1d638:	andeq	r0, r0, ip, lsr r3
   1d63c:	andeq	r0, r0, ip, lsr r3
   1d640:	andeq	r0, r0, ip, lsr r3
   1d644:	andeq	r0, r0, ip, lsr r3
   1d648:	andeq	r0, r0, ip, lsr r3
   1d64c:	andeq	r0, r0, ip, lsr r3
   1d650:	andeq	r0, r0, ip, lsr r3
   1d654:	andeq	r0, r0, ip, lsr r2
   1d658:	andeq	r0, r0, ip, lsr r3
   1d65c:	andeq	r0, r0, ip, lsr r3
   1d660:	andeq	r0, r0, ip, lsr r3
   1d664:	andeq	r0, r0, ip, lsr r3
   1d668:	andeq	r0, r0, ip, lsr r3
   1d66c:	andeq	r0, r0, ip, lsr r3
   1d670:	andeq	r0, r0, ip, lsr r3
   1d674:	andeq	r0, r0, ip, lsr r3
   1d678:	andeq	r0, r0, ip, lsr r3
   1d67c:	andeq	r0, r0, ip, lsr r3
   1d680:	andeq	r0, r0, ip, lsr r3
   1d684:	andeq	r0, r0, ip, lsr r3
   1d688:	andeq	r0, r0, ip, lsr r3
   1d68c:	andeq	r0, r0, ip, lsr r3
   1d690:	andeq	r0, r0, ip, lsr r3
   1d694:	andeq	r0, r0, ip, lsr r3
   1d698:	andeq	r0, r0, ip, lsr r3
   1d69c:	andeq	r0, r0, ip, lsr r3
   1d6a0:	andeq	r0, r0, ip, lsr r3
   1d6a4:	andeq	r0, r0, ip, lsr r3
   1d6a8:	andeq	r0, r0, ip, lsr r3
   1d6ac:	andeq	r0, r0, ip, lsr r3
   1d6b0:	andeq	r0, r0, ip, lsr r3
   1d6b4:	andeq	r0, r0, ip, lsr r3
   1d6b8:	andeq	r0, r0, ip, lsr r3
   1d6bc:	andeq	r0, r0, ip, lsr r3
   1d6c0:	andeq	r0, r0, ip, lsr r3
   1d6c4:	andeq	r0, r0, ip, lsr r3
   1d6c8:	andeq	r0, r0, ip, lsr r3
   1d6cc:	andeq	r0, r0, ip, lsr r3
   1d6d0:	andeq	r0, r0, ip, lsr r3
   1d6d4:			; <UNDEFINED> instruction: 0x000002bc
   1d6d8:	ldr	r0, [fp, #-16]
   1d6dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d6e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d6e4:	bl	1dee0 <flatcc_json_parser_float@@Base+0x300>
   1d6e8:	str	r0, [fp, #-20]	; 0xffffffec
   1d6ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d6f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d6f4:	cmp	r0, r1
   1d6f8:	movw	r0, #0
   1d6fc:	str	r0, [sp, #4]
   1d700:	beq	1d71c <flatcc_json_parser_generic_json@@Base+0x2f8>
   1d704:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d708:	ldrb	r0, [r0]
   1d70c:	cmp	r0, #34	; 0x22
   1d710:	movw	r0, #0
   1d714:	movne	r0, #1
   1d718:	str	r0, [sp, #4]
   1d71c:	ldr	r0, [sp, #4]
   1d720:	tst	r0, #1
   1d724:	beq	1d77c <flatcc_json_parser_generic_json@@Base+0x358>
   1d728:	ldr	r0, [fp, #-16]
   1d72c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d730:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d734:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   1d738:	str	r0, [fp, #-20]	; 0xffffffec
   1d73c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d740:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d744:	cmp	r0, r1
   1d748:	beq	1d760 <flatcc_json_parser_generic_json@@Base+0x33c>
   1d74c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d750:	ldrb	r0, [r0]
   1d754:	cmp	r0, #34	; 0x22
   1d758:	bne	1d760 <flatcc_json_parser_generic_json@@Base+0x33c>
   1d75c:	b	1d77c <flatcc_json_parser_generic_json@@Base+0x358>
   1d760:	add	r3, sp, #16
   1d764:	ldr	r0, [fp, #-16]
   1d768:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d76c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d770:	bl	1c35c <flatcc_json_parser_string_escape@@Base>
   1d774:	str	r0, [fp, #-20]	; 0xffffffec
   1d778:	b	1d6ec <flatcc_json_parser_generic_json@@Base+0x2c8>
   1d77c:	ldr	r0, [fp, #-16]
   1d780:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d784:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d788:	bl	1df50 <flatcc_json_parser_float@@Base+0x370>
   1d78c:	str	r0, [fp, #-20]	; 0xffffffec
   1d790:	b	1d8f4 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d794:	ldr	r0, [fp, #-16]
   1d798:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d79c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d7a0:	bl	1dfc0 <flatcc_json_parser_float@@Base+0x3e0>
   1d7a4:	str	r0, [fp, #-20]	; 0xffffffec
   1d7a8:	b	1d8f4 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d7ac:	ldr	r0, [sp, #28]
   1d7b0:	ldr	r1, [sp, #24]
   1d7b4:	cmp	r0, r1
   1d7b8:	bne	1d7d8 <flatcc_json_parser_generic_json@@Base+0x3b4>
   1d7bc:	ldr	r0, [fp, #-16]
   1d7c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d7c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d7c8:	movw	r3, #2
   1d7cc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d7d0:	str	r0, [fp, #-12]
   1d7d4:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d7d8:	ldr	r0, [sp, #28]
   1d7dc:	add	r1, r0, #1
   1d7e0:	str	r1, [sp, #28]
   1d7e4:	movw	r1, #93	; 0x5d
   1d7e8:	strb	r1, [r0]
   1d7ec:	ldr	r0, [fp, #-16]
   1d7f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d7f4:	add	r1, r1, #1
   1d7f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d7fc:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d800:	str	r0, [fp, #-20]	; 0xffffffec
   1d804:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d808:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d80c:	cmp	r0, r1
   1d810:	beq	1d828 <flatcc_json_parser_generic_json@@Base+0x404>
   1d814:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d818:	ldrb	r0, [r0]
   1d81c:	cmp	r0, #93	; 0x5d
   1d820:	bne	1d828 <flatcc_json_parser_generic_json@@Base+0x404>
   1d824:	b	1d8f4 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d828:	b	1d458 <flatcc_json_parser_generic_json@@Base+0x34>
   1d82c:	ldr	r0, [sp, #28]
   1d830:	ldr	r1, [sp, #24]
   1d834:	cmp	r0, r1
   1d838:	bne	1d858 <flatcc_json_parser_generic_json@@Base+0x434>
   1d83c:	ldr	r0, [fp, #-16]
   1d840:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d844:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d848:	movw	r3, #2
   1d84c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d850:	str	r0, [fp, #-12]
   1d854:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d858:	ldr	r0, [sp, #28]
   1d85c:	add	r1, r0, #1
   1d860:	str	r1, [sp, #28]
   1d864:	movw	r1, #125	; 0x7d
   1d868:	strb	r1, [r0]
   1d86c:	ldr	r0, [fp, #-16]
   1d870:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d874:	add	r1, r1, #1
   1d878:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d87c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1d880:	str	r0, [fp, #-20]	; 0xffffffec
   1d884:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d888:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d88c:	cmp	r0, r1
   1d890:	beq	1d8a8 <flatcc_json_parser_generic_json@@Base+0x484>
   1d894:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d898:	ldrb	r0, [r0]
   1d89c:	cmp	r0, #125	; 0x7d
   1d8a0:	bne	1d8a8 <flatcc_json_parser_generic_json@@Base+0x484>
   1d8a4:	b	1d8f4 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d8a8:	b	1d458 <flatcc_json_parser_generic_json@@Base+0x34>
   1d8ac:	ldr	r0, [fp, #-16]
   1d8b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d8b4:	str	r1, [sp, #20]
   1d8b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d8bc:	bl	1cc80 <flatcc_json_parser_skip_constant@@Base>
   1d8c0:	str	r0, [fp, #-20]	; 0xffffffec
   1d8c4:	ldr	r0, [sp, #20]
   1d8c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d8cc:	cmp	r0, r1
   1d8d0:	bne	1d8f0 <flatcc_json_parser_generic_json@@Base+0x4cc>
   1d8d4:	ldr	r0, [fp, #-16]
   1d8d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d8dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d8e0:	movw	r3, #5
   1d8e4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1d8e8:	str	r0, [fp, #-12]
   1d8ec:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1d8f0:	b	1d8f4 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1d8f4:	b	1d8f8 <flatcc_json_parser_generic_json@@Base+0x4d4>
   1d8f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d8fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d900:	cmp	r0, r1
   1d904:	movw	r0, #0
   1d908:	str	r0, [sp]
   1d90c:	beq	1d928 <flatcc_json_parser_generic_json@@Base+0x504>
   1d910:	add	r0, sp, #32
   1d914:	ldr	r1, [sp, #28]
   1d918:	cmp	r1, r0
   1d91c:	movw	r0, #0
   1d920:	movne	r0, #1
   1d924:	str	r0, [sp]
   1d928:	ldr	r0, [sp]
   1d92c:	tst	r0, #1
   1d930:	beq	1d9a8 <flatcc_json_parser_generic_json@@Base+0x584>
   1d934:	ldr	r0, [sp, #28]
   1d938:	mvn	r1, #0
   1d93c:	add	r0, r0, r1
   1d940:	str	r0, [sp, #28]
   1d944:	ldr	r0, [sp, #28]
   1d948:	ldrb	r0, [r0]
   1d94c:	cmp	r0, #93	; 0x5d
   1d950:	bne	1d970 <flatcc_json_parser_generic_json@@Base+0x54c>
   1d954:	ldr	r0, [fp, #-16]
   1d958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d95c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d960:	add	r3, sp, #12
   1d964:	bl	1e404 <flatcc_json_parser_float@@Base+0x824>
   1d968:	str	r0, [fp, #-20]	; 0xffffffec
   1d96c:	b	1d988 <flatcc_json_parser_generic_json@@Base+0x564>
   1d970:	ldr	r0, [fp, #-16]
   1d974:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d978:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d97c:	add	r3, sp, #12
   1d980:	bl	1e568 <flatcc_json_parser_float@@Base+0x988>
   1d984:	str	r0, [fp, #-20]	; 0xffffffec
   1d988:	ldr	r0, [sp, #12]
   1d98c:	cmp	r0, #0
   1d990:	beq	1d9a4 <flatcc_json_parser_generic_json@@Base+0x580>
   1d994:	ldr	r0, [sp, #28]
   1d998:	add	r0, r0, #1
   1d99c:	str	r0, [sp, #28]
   1d9a0:	b	1d458 <flatcc_json_parser_generic_json@@Base+0x34>
   1d9a4:	b	1d8f8 <flatcc_json_parser_generic_json@@Base+0x4d4>
   1d9a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d9ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d9b0:	cmp	r0, r1
   1d9b4:	bne	1da08 <flatcc_json_parser_generic_json@@Base+0x5e4>
   1d9b8:	add	r0, sp, #32
   1d9bc:	ldr	r1, [sp, #28]
   1d9c0:	cmp	r1, r0
   1d9c4:	beq	1da08 <flatcc_json_parser_generic_json@@Base+0x5e4>
   1d9c8:	ldr	r0, [fp, #-16]
   1d9cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d9d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d9d4:	ldr	r3, [sp, #28]
   1d9d8:	mvn	ip, #0
   1d9dc:	add	r3, r3, ip
   1d9e0:	ldrb	r3, [r3]
   1d9e4:	cmp	r3, #93	; 0x5d
   1d9e8:	movw	r3, #0
   1d9ec:	moveq	r3, #1
   1d9f0:	tst	r3, #1
   1d9f4:	movw	r3, #9
   1d9f8:	moveq	r3, #10
   1d9fc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1da00:	str	r0, [fp, #-12]
   1da04:	b	1da10 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1da08:	ldr	r0, [fp, #-20]	; 0xffffffec
   1da0c:	str	r0, [fp, #-12]
   1da10:	ldr	r0, [fp, #-12]
   1da14:	sub	sp, fp, #8
   1da18:	pop	{r4, r5, fp, pc}
   1da1c:	nop	{0}

0001da20 <flatcc_json_parser_double@@Base>:
   1da20:	push	{fp, lr}
   1da24:	mov	fp, sp
   1da28:	sub	sp, sp, #32
   1da2c:	vldr	d16, [pc, #372]	; 1dba8 <flatcc_json_parser_double@@Base+0x188>
   1da30:	str	r0, [fp, #-8]
   1da34:	str	r1, [fp, #-12]
   1da38:	str	r2, [sp, #16]
   1da3c:	str	r3, [sp, #12]
   1da40:	ldr	r0, [sp, #12]
   1da44:	vstr	d16, [r0]
   1da48:	ldr	r0, [fp, #-12]
   1da4c:	ldr	r1, [sp, #16]
   1da50:	cmp	r0, r1
   1da54:	bne	1da64 <flatcc_json_parser_double@@Base+0x44>
   1da58:	ldr	r0, [fp, #-12]
   1da5c:	str	r0, [fp, #-4]
   1da60:	b	1db98 <flatcc_json_parser_double@@Base+0x178>
   1da64:	ldr	r0, [fp, #-12]
   1da68:	str	r0, [sp, #4]
   1da6c:	ldr	r0, [fp, #-12]
   1da70:	ldrb	r0, [r0]
   1da74:	cmp	r0, #45	; 0x2d
   1da78:	bne	1da88 <flatcc_json_parser_double@@Base+0x68>
   1da7c:	ldr	r0, [sp, #4]
   1da80:	add	r0, r0, #1
   1da84:	str	r0, [sp, #4]
   1da88:	ldr	r0, [sp, #16]
   1da8c:	ldr	r1, [sp, #4]
   1da90:	sub	r0, r0, r1
   1da94:	cmp	r0, #1
   1da98:	ble	1dae8 <flatcc_json_parser_double@@Base+0xc8>
   1da9c:	ldr	r0, [sp, #4]
   1daa0:	ldrb	r0, [r0]
   1daa4:	cmp	r0, #46	; 0x2e
   1daa8:	beq	1dacc <flatcc_json_parser_double@@Base+0xac>
   1daac:	ldr	r0, [sp, #4]
   1dab0:	ldrb	r0, [r0]
   1dab4:	cmp	r0, #48	; 0x30
   1dab8:	bne	1dae8 <flatcc_json_parser_double@@Base+0xc8>
   1dabc:	ldr	r0, [sp, #4]
   1dac0:	ldrb	r0, [r0, #1]
   1dac4:	cmp	r0, #48	; 0x30
   1dac8:	bne	1dae8 <flatcc_json_parser_double@@Base+0xc8>
   1dacc:	ldr	r0, [fp, #-8]
   1dad0:	ldr	r1, [fp, #-12]
   1dad4:	ldr	r2, [sp, #16]
   1dad8:	movw	r3, #6
   1dadc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1dae0:	str	r0, [fp, #-4]
   1dae4:	b	1db98 <flatcc_json_parser_double@@Base+0x178>
   1dae8:	ldr	r0, [fp, #-12]
   1daec:	ldr	r1, [sp, #16]
   1daf0:	ldr	r2, [fp, #-12]
   1daf4:	sub	r1, r1, r2
   1daf8:	ldr	r2, [sp, #12]
   1dafc:	bl	1dbb0 <flatcc_json_parser_double@@Base+0x190>
   1db00:	str	r0, [sp, #8]
   1db04:	ldr	r0, [sp, #8]
   1db08:	movw	r1, #0
   1db0c:	cmp	r0, r1
   1db10:	beq	1db24 <flatcc_json_parser_double@@Base+0x104>
   1db14:	ldr	r0, [sp, #8]
   1db18:	ldr	r1, [fp, #-12]
   1db1c:	cmp	r0, r1
   1db20:	bne	1db90 <flatcc_json_parser_double@@Base+0x170>
   1db24:	b	1db44 <flatcc_json_parser_double@@Base+0x124>
   1db28:	ldr	r0, [sp, #12]
   1db2c:	vldr	d16, [r0]
   1db30:	vcvt.f32.f64	s0, d16
   1db34:	bl	128f0 <__isinff@plt>
   1db38:	cmp	r0, #0
   1db3c:	bne	1db58 <flatcc_json_parser_double@@Base+0x138>
   1db40:	b	1db74 <flatcc_json_parser_double@@Base+0x154>
   1db44:	ldr	r0, [sp, #12]
   1db48:	vldr	d0, [r0]
   1db4c:	bl	128fc <__isinf@plt>
   1db50:	cmp	r0, #0
   1db54:	beq	1db74 <flatcc_json_parser_double@@Base+0x154>
   1db58:	ldr	r0, [fp, #-8]
   1db5c:	ldr	r1, [fp, #-12]
   1db60:	ldr	r2, [sp, #16]
   1db64:	movw	r3, #7
   1db68:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1db6c:	str	r0, [fp, #-4]
   1db70:	b	1db98 <flatcc_json_parser_double@@Base+0x178>
   1db74:	ldr	r0, [fp, #-8]
   1db78:	ldr	r1, [fp, #-12]
   1db7c:	ldr	r2, [sp, #16]
   1db80:	movw	r3, #6
   1db84:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1db88:	str	r0, [fp, #-4]
   1db8c:	b	1db98 <flatcc_json_parser_double@@Base+0x178>
   1db90:	ldr	r0, [sp, #8]
   1db94:	str	r0, [fp, #-4]
   1db98:	ldr	r0, [fp, #-4]
   1db9c:	mov	sp, fp
   1dba0:	pop	{fp, pc}
   1dba4:	nop	{0}
	...
   1dbb0:	push	{fp, lr}
   1dbb4:	mov	fp, sp
   1dbb8:	sub	sp, sp, #16
   1dbbc:	str	r0, [fp, #-4]
   1dbc0:	str	r1, [sp, #8]
   1dbc4:	str	r2, [sp, #4]
   1dbc8:	ldr	r0, [fp, #-4]
   1dbcc:	ldr	r1, [sp, #8]
   1dbd0:	ldr	r2, [sp, #4]
   1dbd4:	bl	20878 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   1dbd8:	mov	sp, fp
   1dbdc:	pop	{fp, pc}

0001dbe0 <flatcc_json_parser_float@@Base>:
   1dbe0:	push	{fp, lr}
   1dbe4:	mov	fp, sp
   1dbe8:	sub	sp, sp, #32
   1dbec:	vldr	s0, [pc, #368]	; 1dd64 <flatcc_json_parser_float@@Base+0x184>
   1dbf0:	str	r0, [fp, #-8]
   1dbf4:	str	r1, [fp, #-12]
   1dbf8:	str	r2, [sp, #16]
   1dbfc:	str	r3, [sp, #12]
   1dc00:	ldr	r0, [sp, #12]
   1dc04:	vstr	s0, [r0]
   1dc08:	ldr	r0, [fp, #-12]
   1dc0c:	ldr	r1, [sp, #16]
   1dc10:	cmp	r0, r1
   1dc14:	bne	1dc24 <flatcc_json_parser_float@@Base+0x44>
   1dc18:	ldr	r0, [fp, #-12]
   1dc1c:	str	r0, [fp, #-4]
   1dc20:	b	1dd58 <flatcc_json_parser_float@@Base+0x178>
   1dc24:	ldr	r0, [fp, #-12]
   1dc28:	str	r0, [sp, #4]
   1dc2c:	ldr	r0, [fp, #-12]
   1dc30:	ldrb	r0, [r0]
   1dc34:	cmp	r0, #45	; 0x2d
   1dc38:	bne	1dc48 <flatcc_json_parser_float@@Base+0x68>
   1dc3c:	ldr	r0, [sp, #4]
   1dc40:	add	r0, r0, #1
   1dc44:	str	r0, [sp, #4]
   1dc48:	ldr	r0, [sp, #16]
   1dc4c:	ldr	r1, [sp, #4]
   1dc50:	sub	r0, r0, r1
   1dc54:	cmp	r0, #1
   1dc58:	ble	1dca8 <flatcc_json_parser_float@@Base+0xc8>
   1dc5c:	ldr	r0, [sp, #4]
   1dc60:	ldrb	r0, [r0]
   1dc64:	cmp	r0, #46	; 0x2e
   1dc68:	beq	1dc8c <flatcc_json_parser_float@@Base+0xac>
   1dc6c:	ldr	r0, [sp, #4]
   1dc70:	ldrb	r0, [r0]
   1dc74:	cmp	r0, #48	; 0x30
   1dc78:	bne	1dca8 <flatcc_json_parser_float@@Base+0xc8>
   1dc7c:	ldr	r0, [sp, #4]
   1dc80:	ldrb	r0, [r0, #1]
   1dc84:	cmp	r0, #48	; 0x30
   1dc88:	bne	1dca8 <flatcc_json_parser_float@@Base+0xc8>
   1dc8c:	ldr	r0, [fp, #-8]
   1dc90:	ldr	r1, [fp, #-12]
   1dc94:	ldr	r2, [sp, #16]
   1dc98:	movw	r3, #6
   1dc9c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1dca0:	str	r0, [fp, #-4]
   1dca4:	b	1dd58 <flatcc_json_parser_float@@Base+0x178>
   1dca8:	ldr	r0, [fp, #-12]
   1dcac:	ldr	r1, [sp, #16]
   1dcb0:	ldr	r2, [fp, #-12]
   1dcb4:	sub	r1, r1, r2
   1dcb8:	ldr	r2, [sp, #12]
   1dcbc:	bl	1dd68 <flatcc_json_parser_float@@Base+0x188>
   1dcc0:	str	r0, [sp, #8]
   1dcc4:	ldr	r0, [sp, #8]
   1dcc8:	movw	r1, #0
   1dccc:	cmp	r0, r1
   1dcd0:	beq	1dce4 <flatcc_json_parser_float@@Base+0x104>
   1dcd4:	ldr	r0, [sp, #8]
   1dcd8:	ldr	r1, [fp, #-12]
   1dcdc:	cmp	r0, r1
   1dce0:	bne	1dd50 <flatcc_json_parser_float@@Base+0x170>
   1dce4:	b	1dce8 <flatcc_json_parser_float@@Base+0x108>
   1dce8:	ldr	r0, [sp, #12]
   1dcec:	vldr	s0, [r0]
   1dcf0:	bl	128f0 <__isinff@plt>
   1dcf4:	cmp	r0, #0
   1dcf8:	bne	1dd18 <flatcc_json_parser_float@@Base+0x138>
   1dcfc:	b	1dd34 <flatcc_json_parser_float@@Base+0x154>
   1dd00:	ldr	r0, [sp, #12]
   1dd04:	vldr	s0, [r0]
   1dd08:	vcvt.f64.f32	d0, s0
   1dd0c:	bl	128fc <__isinf@plt>
   1dd10:	cmp	r0, #0
   1dd14:	beq	1dd34 <flatcc_json_parser_float@@Base+0x154>
   1dd18:	ldr	r0, [fp, #-8]
   1dd1c:	ldr	r1, [fp, #-12]
   1dd20:	ldr	r2, [sp, #16]
   1dd24:	movw	r3, #7
   1dd28:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1dd2c:	str	r0, [fp, #-4]
   1dd30:	b	1dd58 <flatcc_json_parser_float@@Base+0x178>
   1dd34:	ldr	r0, [fp, #-8]
   1dd38:	ldr	r1, [fp, #-12]
   1dd3c:	ldr	r2, [sp, #16]
   1dd40:	movw	r3, #6
   1dd44:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1dd48:	str	r0, [fp, #-4]
   1dd4c:	b	1dd58 <flatcc_json_parser_float@@Base+0x178>
   1dd50:	ldr	r0, [sp, #8]
   1dd54:	str	r0, [fp, #-4]
   1dd58:	ldr	r0, [fp, #-4]
   1dd5c:	mov	sp, fp
   1dd60:	pop	{fp, pc}
   1dd64:	andeq	r0, r0, r0
   1dd68:	push	{fp, lr}
   1dd6c:	mov	fp, sp
   1dd70:	sub	sp, sp, #40	; 0x28
   1dd74:	ldr	r3, [pc, #180]	; 1de30 <flatcc_json_parser_float@@Base+0x250>
   1dd78:	str	r0, [fp, #-8]
   1dd7c:	str	r1, [fp, #-12]
   1dd80:	str	r2, [fp, #-16]
   1dd84:	str	r3, [sp, #4]
   1dd88:	ldr	r0, [fp, #-8]
   1dd8c:	ldr	r1, [fp, #-12]
   1dd90:	add	r2, sp, #8
   1dd94:	bl	1dbb0 <flatcc_json_parser_double@@Base+0x190>
   1dd98:	str	r0, [sp, #20]
   1dd9c:	vldr	d16, [sp, #8]
   1dda0:	vcvt.f32.f64	s0, d16
   1dda4:	ldr	r0, [fp, #-16]
   1dda8:	vstr	s0, [r0]
   1ddac:	ldr	r0, [fp, #-16]
   1ddb0:	vldr	s0, [r0]
   1ddb4:	bl	128f0 <__isinff@plt>
   1ddb8:	cmp	r0, #0
   1ddbc:	bne	1dddc <flatcc_json_parser_float@@Base+0x1fc>
   1ddc0:	b	1de1c <flatcc_json_parser_float@@Base+0x23c>
   1ddc4:	ldr	r0, [fp, #-16]
   1ddc8:	vldr	s0, [r0]
   1ddcc:	vcvt.f64.f32	d0, s0
   1ddd0:	bl	128fc <__isinf@plt>
   1ddd4:	cmp	r0, #0
   1ddd8:	beq	1de1c <flatcc_json_parser_float@@Base+0x23c>
   1dddc:	vldr	d16, [sp, #8]
   1dde0:	vcmpe.f64	d16, #0.0
   1dde4:	vmrs	APSR_nzcv, fpscr
   1dde8:	bpl	1ddfc <flatcc_json_parser_float@@Base+0x21c>
   1ddec:	vldr	s0, [sp, #4]
   1ddf0:	vneg.f32	s0, s0
   1ddf4:	vstr	s0, [sp]
   1ddf8:	b	1de04 <flatcc_json_parser_float@@Base+0x224>
   1ddfc:	vldr	s0, [sp, #4]
   1de00:	vstr	s0, [sp]
   1de04:	vldr	s0, [sp]
   1de08:	ldr	r0, [fp, #-16]
   1de0c:	vstr	s0, [r0]
   1de10:	ldr	r0, [fp, #-8]
   1de14:	str	r0, [fp, #-4]
   1de18:	b	1de24 <flatcc_json_parser_float@@Base+0x244>
   1de1c:	ldr	r0, [sp, #20]
   1de20:	str	r0, [fp, #-4]
   1de24:	ldr	r0, [fp, #-4]
   1de28:	mov	sp, fp
   1de2c:	pop	{fp, pc}
   1de30:	svcvc	0x00800000
   1de34:	push	{fp, lr}
   1de38:	mov	fp, sp
   1de3c:	sub	sp, sp, #16
   1de40:	str	r0, [sp, #8]
   1de44:	str	r1, [sp, #4]
   1de48:	str	r2, [sp]
   1de4c:	ldr	r0, [sp, #4]
   1de50:	ldr	r1, [sp]
   1de54:	cmp	r0, r1
   1de58:	bne	1de68 <flatcc_json_parser_float@@Base+0x288>
   1de5c:	ldr	r0, [sp, #4]
   1de60:	str	r0, [fp, #-4]
   1de64:	b	1ded4 <flatcc_json_parser_float@@Base+0x2f4>
   1de68:	ldr	r0, [sp, #4]
   1de6c:	ldrb	r0, [r0]
   1de70:	cmp	r0, #34	; 0x22
   1de74:	bne	1de94 <flatcc_json_parser_float@@Base+0x2b4>
   1de78:	ldr	r0, [sp, #4]
   1de7c:	add	r0, r0, #1
   1de80:	str	r0, [sp, #4]
   1de84:	ldr	r0, [sp, #8]
   1de88:	movw	r1, #0
   1de8c:	str	r1, [r0, #12]
   1de90:	b	1decc <flatcc_json_parser_float@@Base+0x2ec>
   1de94:	ldr	r0, [sp, #4]
   1de98:	ldrb	r0, [r0]
   1de9c:	cmp	r0, #46	; 0x2e
   1dea0:	bne	1dec0 <flatcc_json_parser_float@@Base+0x2e0>
   1dea4:	ldr	r0, [sp, #8]
   1dea8:	ldr	r1, [sp, #4]
   1deac:	ldr	r2, [sp]
   1deb0:	movw	r3, #5
   1deb4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1deb8:	str	r0, [fp, #-4]
   1debc:	b	1ded4 <flatcc_json_parser_float@@Base+0x2f4>
   1dec0:	ldr	r0, [sp, #8]
   1dec4:	movw	r1, #1
   1dec8:	str	r1, [r0, #12]
   1decc:	ldr	r0, [sp, #4]
   1ded0:	str	r0, [fp, #-4]
   1ded4:	ldr	r0, [fp, #-4]
   1ded8:	mov	sp, fp
   1dedc:	pop	{fp, pc}
   1dee0:	push	{fp, lr}
   1dee4:	mov	fp, sp
   1dee8:	sub	sp, sp, #16
   1deec:	str	r0, [sp, #8]
   1def0:	str	r1, [sp, #4]
   1def4:	str	r2, [sp]
   1def8:	ldr	r0, [sp, #4]
   1defc:	ldr	r1, [sp]
   1df00:	cmp	r0, r1
   1df04:	beq	1df18 <flatcc_json_parser_float@@Base+0x338>
   1df08:	ldr	r0, [sp, #4]
   1df0c:	ldrb	r0, [r0]
   1df10:	cmp	r0, #34	; 0x22
   1df14:	beq	1df34 <flatcc_json_parser_float@@Base+0x354>
   1df18:	ldr	r0, [sp, #8]
   1df1c:	ldr	r1, [sp, #4]
   1df20:	ldr	r2, [sp]
   1df24:	movw	r3, #16
   1df28:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1df2c:	str	r0, [fp, #-4]
   1df30:	b	1df44 <flatcc_json_parser_float@@Base+0x364>
   1df34:	ldr	r0, [sp, #4]
   1df38:	add	r0, r0, #1
   1df3c:	str	r0, [sp, #4]
   1df40:	str	r0, [fp, #-4]
   1df44:	ldr	r0, [fp, #-4]
   1df48:	mov	sp, fp
   1df4c:	pop	{fp, pc}
   1df50:	push	{fp, lr}
   1df54:	mov	fp, sp
   1df58:	sub	sp, sp, #16
   1df5c:	str	r0, [sp, #8]
   1df60:	str	r1, [sp, #4]
   1df64:	str	r2, [sp]
   1df68:	ldr	r0, [sp, #4]
   1df6c:	ldr	r1, [sp]
   1df70:	cmp	r0, r1
   1df74:	beq	1df88 <flatcc_json_parser_float@@Base+0x3a8>
   1df78:	ldr	r0, [sp, #4]
   1df7c:	ldrb	r0, [r0]
   1df80:	cmp	r0, #34	; 0x22
   1df84:	beq	1dfa4 <flatcc_json_parser_float@@Base+0x3c4>
   1df88:	ldr	r0, [sp, #8]
   1df8c:	ldr	r1, [sp, #4]
   1df90:	ldr	r2, [sp]
   1df94:	movw	r3, #20
   1df98:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1df9c:	str	r0, [fp, #-4]
   1dfa0:	b	1dfb4 <flatcc_json_parser_float@@Base+0x3d4>
   1dfa4:	ldr	r0, [sp, #4]
   1dfa8:	add	r0, r0, #1
   1dfac:	str	r0, [sp, #4]
   1dfb0:	str	r0, [fp, #-4]
   1dfb4:	ldr	r0, [fp, #-4]
   1dfb8:	mov	sp, fp
   1dfbc:	pop	{fp, pc}
   1dfc0:	push	{fp, lr}
   1dfc4:	mov	fp, sp
   1dfc8:	sub	sp, sp, #32
   1dfcc:	str	r0, [fp, #-8]
   1dfd0:	str	r1, [fp, #-12]
   1dfd4:	str	r2, [sp, #16]
   1dfd8:	ldr	r0, [fp, #-12]
   1dfdc:	ldr	r1, [sp, #16]
   1dfe0:	cmp	r0, r1
   1dfe4:	bne	1dff4 <flatcc_json_parser_float@@Base+0x414>
   1dfe8:	ldr	r0, [fp, #-12]
   1dfec:	str	r0, [fp, #-4]
   1dff0:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1dff4:	ldr	r0, [fp, #-12]
   1dff8:	ldrb	r0, [r0]
   1dffc:	cmp	r0, #45	; 0x2d
   1e000:	bne	1e040 <flatcc_json_parser_float@@Base+0x460>
   1e004:	ldr	r0, [fp, #-12]
   1e008:	add	r0, r0, #1
   1e00c:	str	r0, [fp, #-12]
   1e010:	ldr	r0, [fp, #-12]
   1e014:	ldr	r1, [sp, #16]
   1e018:	cmp	r0, r1
   1e01c:	bne	1e03c <flatcc_json_parser_float@@Base+0x45c>
   1e020:	ldr	r0, [fp, #-8]
   1e024:	ldr	r1, [fp, #-12]
   1e028:	ldr	r2, [sp, #16]
   1e02c:	movw	r3, #6
   1e030:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e034:	str	r0, [fp, #-4]
   1e038:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e03c:	b	1e040 <flatcc_json_parser_float@@Base+0x460>
   1e040:	ldr	r0, [fp, #-12]
   1e044:	ldrb	r0, [r0]
   1e048:	cmp	r0, #48	; 0x30
   1e04c:	bne	1e060 <flatcc_json_parser_float@@Base+0x480>
   1e050:	ldr	r0, [fp, #-12]
   1e054:	add	r0, r0, #1
   1e058:	str	r0, [fp, #-12]
   1e05c:	b	1e110 <flatcc_json_parser_float@@Base+0x530>
   1e060:	ldr	r0, [fp, #-12]
   1e064:	ldrb	r0, [r0]
   1e068:	cmp	r0, #49	; 0x31
   1e06c:	blt	1e080 <flatcc_json_parser_float@@Base+0x4a0>
   1e070:	ldr	r0, [fp, #-12]
   1e074:	ldrb	r0, [r0]
   1e078:	cmp	r0, #57	; 0x39
   1e07c:	ble	1e09c <flatcc_json_parser_float@@Base+0x4bc>
   1e080:	ldr	r0, [fp, #-8]
   1e084:	ldr	r1, [fp, #-12]
   1e088:	ldr	r2, [sp, #16]
   1e08c:	movw	r3, #6
   1e090:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e094:	str	r0, [fp, #-4]
   1e098:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e09c:	ldr	r0, [fp, #-12]
   1e0a0:	add	r0, r0, #1
   1e0a4:	str	r0, [fp, #-12]
   1e0a8:	ldr	r0, [fp, #-12]
   1e0ac:	ldr	r1, [sp, #16]
   1e0b0:	cmp	r0, r1
   1e0b4:	movw	r0, #0
   1e0b8:	str	r0, [sp, #12]
   1e0bc:	beq	1e0f0 <flatcc_json_parser_float@@Base+0x510>
   1e0c0:	ldr	r0, [fp, #-12]
   1e0c4:	ldrb	r0, [r0]
   1e0c8:	cmp	r0, #48	; 0x30
   1e0cc:	movw	r0, #0
   1e0d0:	str	r0, [sp, #12]
   1e0d4:	blt	1e0f0 <flatcc_json_parser_float@@Base+0x510>
   1e0d8:	ldr	r0, [fp, #-12]
   1e0dc:	ldrb	r0, [r0]
   1e0e0:	cmp	r0, #57	; 0x39
   1e0e4:	movw	r0, #0
   1e0e8:	movle	r0, #1
   1e0ec:	str	r0, [sp, #12]
   1e0f0:	ldr	r0, [sp, #12]
   1e0f4:	tst	r0, #1
   1e0f8:	beq	1e10c <flatcc_json_parser_float@@Base+0x52c>
   1e0fc:	ldr	r0, [fp, #-12]
   1e100:	add	r0, r0, #1
   1e104:	str	r0, [fp, #-12]
   1e108:	b	1e0a8 <flatcc_json_parser_float@@Base+0x4c8>
   1e10c:	b	1e110 <flatcc_json_parser_float@@Base+0x530>
   1e110:	ldr	r0, [fp, #-12]
   1e114:	ldr	r1, [sp, #16]
   1e118:	cmp	r0, r1
   1e11c:	beq	1e1f0 <flatcc_json_parser_float@@Base+0x610>
   1e120:	ldr	r0, [fp, #-12]
   1e124:	ldrb	r0, [r0]
   1e128:	cmp	r0, #46	; 0x2e
   1e12c:	bne	1e1ec <flatcc_json_parser_float@@Base+0x60c>
   1e130:	ldr	r0, [fp, #-12]
   1e134:	add	r0, r0, #1
   1e138:	str	r0, [fp, #-12]
   1e13c:	ldr	r0, [fp, #-12]
   1e140:	ldrb	r0, [r0]
   1e144:	cmp	r0, #48	; 0x30
   1e148:	blt	1e15c <flatcc_json_parser_float@@Base+0x57c>
   1e14c:	ldr	r0, [fp, #-12]
   1e150:	ldrb	r0, [r0]
   1e154:	cmp	r0, #57	; 0x39
   1e158:	ble	1e178 <flatcc_json_parser_float@@Base+0x598>
   1e15c:	ldr	r0, [fp, #-8]
   1e160:	ldr	r1, [fp, #-12]
   1e164:	ldr	r2, [sp, #16]
   1e168:	movw	r3, #6
   1e16c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e170:	str	r0, [fp, #-4]
   1e174:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e178:	ldr	r0, [fp, #-12]
   1e17c:	add	r0, r0, #1
   1e180:	str	r0, [fp, #-12]
   1e184:	ldr	r0, [fp, #-12]
   1e188:	ldr	r1, [sp, #16]
   1e18c:	cmp	r0, r1
   1e190:	movw	r0, #0
   1e194:	str	r0, [sp, #8]
   1e198:	beq	1e1cc <flatcc_json_parser_float@@Base+0x5ec>
   1e19c:	ldr	r0, [fp, #-12]
   1e1a0:	ldrb	r0, [r0]
   1e1a4:	cmp	r0, #48	; 0x30
   1e1a8:	movw	r0, #0
   1e1ac:	str	r0, [sp, #8]
   1e1b0:	blt	1e1cc <flatcc_json_parser_float@@Base+0x5ec>
   1e1b4:	ldr	r0, [fp, #-12]
   1e1b8:	ldrb	r0, [r0]
   1e1bc:	cmp	r0, #57	; 0x39
   1e1c0:	movw	r0, #0
   1e1c4:	movle	r0, #1
   1e1c8:	str	r0, [sp, #8]
   1e1cc:	ldr	r0, [sp, #8]
   1e1d0:	tst	r0, #1
   1e1d4:	beq	1e1e8 <flatcc_json_parser_float@@Base+0x608>
   1e1d8:	ldr	r0, [fp, #-12]
   1e1dc:	add	r0, r0, #1
   1e1e0:	str	r0, [fp, #-12]
   1e1e4:	b	1e184 <flatcc_json_parser_float@@Base+0x5a4>
   1e1e8:	b	1e1ec <flatcc_json_parser_float@@Base+0x60c>
   1e1ec:	b	1e1f0 <flatcc_json_parser_float@@Base+0x610>
   1e1f0:	ldr	r0, [fp, #-12]
   1e1f4:	ldr	r1, [sp, #16]
   1e1f8:	cmp	r0, r1
   1e1fc:	beq	1e344 <flatcc_json_parser_float@@Base+0x764>
   1e200:	ldr	r0, [fp, #-12]
   1e204:	ldrb	r0, [r0]
   1e208:	cmp	r0, #101	; 0x65
   1e20c:	beq	1e220 <flatcc_json_parser_float@@Base+0x640>
   1e210:	ldr	r0, [fp, #-12]
   1e214:	ldrb	r0, [r0]
   1e218:	cmp	r0, #69	; 0x45
   1e21c:	bne	1e344 <flatcc_json_parser_float@@Base+0x764>
   1e220:	ldr	r0, [fp, #-12]
   1e224:	add	r0, r0, #1
   1e228:	str	r0, [fp, #-12]
   1e22c:	ldr	r0, [fp, #-12]
   1e230:	ldr	r1, [sp, #16]
   1e234:	cmp	r0, r1
   1e238:	bne	1e258 <flatcc_json_parser_float@@Base+0x678>
   1e23c:	ldr	r0, [fp, #-8]
   1e240:	ldr	r1, [fp, #-12]
   1e244:	ldr	r2, [sp, #16]
   1e248:	movw	r3, #6
   1e24c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e250:	str	r0, [fp, #-4]
   1e254:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e258:	ldr	r0, [fp, #-12]
   1e25c:	ldrb	r0, [r0]
   1e260:	cmp	r0, #43	; 0x2b
   1e264:	beq	1e278 <flatcc_json_parser_float@@Base+0x698>
   1e268:	ldr	r0, [fp, #-12]
   1e26c:	ldrb	r0, [r0]
   1e270:	cmp	r0, #45	; 0x2d
   1e274:	bne	1e284 <flatcc_json_parser_float@@Base+0x6a4>
   1e278:	ldr	r0, [fp, #-12]
   1e27c:	add	r0, r0, #1
   1e280:	str	r0, [fp, #-12]
   1e284:	ldr	r0, [fp, #-12]
   1e288:	ldr	r1, [sp, #16]
   1e28c:	cmp	r0, r1
   1e290:	beq	1e2b4 <flatcc_json_parser_float@@Base+0x6d4>
   1e294:	ldr	r0, [fp, #-12]
   1e298:	ldrb	r0, [r0]
   1e29c:	cmp	r0, #48	; 0x30
   1e2a0:	blt	1e2b4 <flatcc_json_parser_float@@Base+0x6d4>
   1e2a4:	ldr	r0, [fp, #-12]
   1e2a8:	ldrb	r0, [r0]
   1e2ac:	cmp	r0, #57	; 0x39
   1e2b0:	ble	1e2d0 <flatcc_json_parser_float@@Base+0x6f0>
   1e2b4:	ldr	r0, [fp, #-8]
   1e2b8:	ldr	r1, [fp, #-12]
   1e2bc:	ldr	r2, [sp, #16]
   1e2c0:	movw	r3, #6
   1e2c4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e2c8:	str	r0, [fp, #-4]
   1e2cc:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e2d0:	ldr	r0, [fp, #-12]
   1e2d4:	add	r0, r0, #1
   1e2d8:	str	r0, [fp, #-12]
   1e2dc:	ldr	r0, [fp, #-12]
   1e2e0:	ldr	r1, [sp, #16]
   1e2e4:	cmp	r0, r1
   1e2e8:	movw	r0, #0
   1e2ec:	str	r0, [sp, #4]
   1e2f0:	beq	1e324 <flatcc_json_parser_float@@Base+0x744>
   1e2f4:	ldr	r0, [fp, #-12]
   1e2f8:	ldrb	r0, [r0]
   1e2fc:	cmp	r0, #48	; 0x30
   1e300:	movw	r0, #0
   1e304:	str	r0, [sp, #4]
   1e308:	blt	1e324 <flatcc_json_parser_float@@Base+0x744>
   1e30c:	ldr	r0, [fp, #-12]
   1e310:	ldrb	r0, [r0]
   1e314:	cmp	r0, #57	; 0x39
   1e318:	movw	r0, #0
   1e31c:	movle	r0, #1
   1e320:	str	r0, [sp, #4]
   1e324:	ldr	r0, [sp, #4]
   1e328:	tst	r0, #1
   1e32c:	beq	1e340 <flatcc_json_parser_float@@Base+0x760>
   1e330:	ldr	r0, [fp, #-12]
   1e334:	add	r0, r0, #1
   1e338:	str	r0, [fp, #-12]
   1e33c:	b	1e2dc <flatcc_json_parser_float@@Base+0x6fc>
   1e340:	b	1e344 <flatcc_json_parser_float@@Base+0x764>
   1e344:	ldr	r0, [fp, #-12]
   1e348:	ldr	r1, [sp, #16]
   1e34c:	cmp	r0, r1
   1e350:	beq	1e3e0 <flatcc_json_parser_float@@Base+0x800>
   1e354:	ldr	r0, [fp, #-12]
   1e358:	ldrb	r0, [r0]
   1e35c:	sub	r1, r0, #9
   1e360:	cmp	r1, #3
   1e364:	str	r0, [sp]
   1e368:	bcc	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e36c:	b	1e370 <flatcc_json_parser_float@@Base+0x790>
   1e370:	ldr	r0, [sp]
   1e374:	cmp	r0, #13
   1e378:	beq	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e37c:	b	1e380 <flatcc_json_parser_float@@Base+0x7a0>
   1e380:	ldr	r0, [sp]
   1e384:	cmp	r0, #32
   1e388:	beq	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e38c:	b	1e390 <flatcc_json_parser_float@@Base+0x7b0>
   1e390:	ldr	r0, [sp]
   1e394:	cmp	r0, #44	; 0x2c
   1e398:	beq	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e39c:	b	1e3a0 <flatcc_json_parser_float@@Base+0x7c0>
   1e3a0:	ldr	r0, [sp]
   1e3a4:	cmp	r0, #58	; 0x3a
   1e3a8:	beq	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e3ac:	b	1e3b0 <flatcc_json_parser_float@@Base+0x7d0>
   1e3b0:	ldr	r0, [sp]
   1e3b4:	cmp	r0, #93	; 0x5d
   1e3b8:	beq	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e3bc:	b	1e3c0 <flatcc_json_parser_float@@Base+0x7e0>
   1e3c0:	ldr	r0, [sp]
   1e3c4:	cmp	r0, #125	; 0x7d
   1e3c8:	bne	1e3dc <flatcc_json_parser_float@@Base+0x7fc>
   1e3cc:	b	1e3d0 <flatcc_json_parser_float@@Base+0x7f0>
   1e3d0:	ldr	r0, [fp, #-12]
   1e3d4:	str	r0, [fp, #-4]
   1e3d8:	b	1e3f8 <flatcc_json_parser_float@@Base+0x818>
   1e3dc:	b	1e3e0 <flatcc_json_parser_float@@Base+0x800>
   1e3e0:	ldr	r0, [fp, #-8]
   1e3e4:	ldr	r1, [fp, #-12]
   1e3e8:	ldr	r2, [sp, #16]
   1e3ec:	movw	r3, #6
   1e3f0:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e3f4:	str	r0, [fp, #-4]
   1e3f8:	ldr	r0, [fp, #-4]
   1e3fc:	mov	sp, fp
   1e400:	pop	{fp, pc}
   1e404:	push	{fp, lr}
   1e408:	mov	fp, sp
   1e40c:	sub	sp, sp, #24
   1e410:	str	r0, [fp, #-8]
   1e414:	str	r1, [sp, #12]
   1e418:	str	r2, [sp, #8]
   1e41c:	str	r3, [sp, #4]
   1e420:	ldr	r0, [fp, #-8]
   1e424:	ldr	r1, [sp, #12]
   1e428:	ldr	r2, [sp, #8]
   1e42c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e430:	str	r0, [sp, #12]
   1e434:	ldr	r0, [sp, #12]
   1e438:	ldr	r1, [sp, #8]
   1e43c:	cmp	r0, r1
   1e440:	bne	1e45c <flatcc_json_parser_float@@Base+0x87c>
   1e444:	ldr	r0, [sp, #4]
   1e448:	movw	r1, #0
   1e44c:	str	r1, [r0]
   1e450:	ldr	r0, [sp, #12]
   1e454:	str	r0, [fp, #-4]
   1e458:	b	1e55c <flatcc_json_parser_float@@Base+0x97c>
   1e45c:	ldr	r0, [sp, #12]
   1e460:	ldrb	r0, [r0]
   1e464:	cmp	r0, #44	; 0x2c
   1e468:	beq	1e4c0 <flatcc_json_parser_float@@Base+0x8e0>
   1e46c:	ldr	r0, [sp, #4]
   1e470:	movw	r1, #0
   1e474:	str	r1, [r0]
   1e478:	ldr	r0, [sp, #12]
   1e47c:	ldrb	r0, [r0]
   1e480:	cmp	r0, #93	; 0x5d
   1e484:	beq	1e4a4 <flatcc_json_parser_float@@Base+0x8c4>
   1e488:	ldr	r0, [fp, #-8]
   1e48c:	ldr	r1, [sp, #12]
   1e490:	ldr	r2, [sp, #8]
   1e494:	movw	r3, #9
   1e498:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e49c:	str	r0, [fp, #-4]
   1e4a0:	b	1e55c <flatcc_json_parser_float@@Base+0x97c>
   1e4a4:	ldr	r0, [fp, #-8]
   1e4a8:	ldr	r1, [sp, #12]
   1e4ac:	add	r1, r1, #1
   1e4b0:	ldr	r2, [sp, #8]
   1e4b4:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e4b8:	str	r0, [fp, #-4]
   1e4bc:	b	1e55c <flatcc_json_parser_float@@Base+0x97c>
   1e4c0:	ldr	r0, [fp, #-8]
   1e4c4:	ldr	r1, [sp, #12]
   1e4c8:	add	r1, r1, #1
   1e4cc:	ldr	r2, [sp, #8]
   1e4d0:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e4d4:	str	r0, [sp, #12]
   1e4d8:	ldr	r0, [sp, #12]
   1e4dc:	ldr	r1, [sp, #8]
   1e4e0:	cmp	r0, r1
   1e4e4:	bne	1e510 <flatcc_json_parser_float@@Base+0x930>
   1e4e8:	ldr	r0, [sp, #4]
   1e4ec:	movw	r1, #0
   1e4f0:	str	r1, [r0]
   1e4f4:	ldr	r0, [fp, #-8]
   1e4f8:	ldr	r1, [sp, #12]
   1e4fc:	ldr	r2, [sp, #8]
   1e500:	movw	r3, #9
   1e504:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e508:	str	r0, [fp, #-4]
   1e50c:	b	1e55c <flatcc_json_parser_float@@Base+0x97c>
   1e510:	ldr	r0, [sp, #12]
   1e514:	ldrb	r0, [r0]
   1e518:	cmp	r0, #93	; 0x5d
   1e51c:	bne	1e548 <flatcc_json_parser_float@@Base+0x968>
   1e520:	ldr	r0, [sp, #4]
   1e524:	movw	r1, #0
   1e528:	str	r1, [r0]
   1e52c:	ldr	r0, [fp, #-8]
   1e530:	ldr	r1, [sp, #12]
   1e534:	add	r1, r1, #1
   1e538:	ldr	r2, [sp, #8]
   1e53c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e540:	str	r0, [fp, #-4]
   1e544:	b	1e55c <flatcc_json_parser_float@@Base+0x97c>
   1e548:	ldr	r0, [sp, #4]
   1e54c:	movw	r1, #1
   1e550:	str	r1, [r0]
   1e554:	ldr	r0, [sp, #12]
   1e558:	str	r0, [fp, #-4]
   1e55c:	ldr	r0, [fp, #-4]
   1e560:	mov	sp, fp
   1e564:	pop	{fp, pc}
   1e568:	push	{fp, lr}
   1e56c:	mov	fp, sp
   1e570:	sub	sp, sp, #24
   1e574:	str	r0, [fp, #-8]
   1e578:	str	r1, [sp, #12]
   1e57c:	str	r2, [sp, #8]
   1e580:	str	r3, [sp, #4]
   1e584:	ldr	r0, [fp, #-8]
   1e588:	ldr	r1, [sp, #12]
   1e58c:	ldr	r2, [sp, #8]
   1e590:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e594:	str	r0, [sp, #12]
   1e598:	ldr	r0, [sp, #12]
   1e59c:	ldr	r1, [sp, #8]
   1e5a0:	cmp	r0, r1
   1e5a4:	bne	1e5c0 <flatcc_json_parser_float@@Base+0x9e0>
   1e5a8:	ldr	r0, [sp, #4]
   1e5ac:	movw	r1, #0
   1e5b0:	str	r1, [r0]
   1e5b4:	ldr	r0, [sp, #12]
   1e5b8:	str	r0, [fp, #-4]
   1e5bc:	b	1e6c0 <flatcc_json_parser_float@@Base+0xae0>
   1e5c0:	ldr	r0, [sp, #12]
   1e5c4:	ldrb	r0, [r0]
   1e5c8:	cmp	r0, #44	; 0x2c
   1e5cc:	beq	1e624 <flatcc_json_parser_float@@Base+0xa44>
   1e5d0:	ldr	r0, [sp, #4]
   1e5d4:	movw	r1, #0
   1e5d8:	str	r1, [r0]
   1e5dc:	ldr	r0, [sp, #12]
   1e5e0:	ldrb	r0, [r0]
   1e5e4:	cmp	r0, #125	; 0x7d
   1e5e8:	beq	1e608 <flatcc_json_parser_float@@Base+0xa28>
   1e5ec:	ldr	r0, [fp, #-8]
   1e5f0:	ldr	r1, [sp, #12]
   1e5f4:	ldr	r2, [sp, #8]
   1e5f8:	movw	r3, #10
   1e5fc:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e600:	str	r0, [fp, #-4]
   1e604:	b	1e6c0 <flatcc_json_parser_float@@Base+0xae0>
   1e608:	ldr	r0, [fp, #-8]
   1e60c:	ldr	r1, [sp, #12]
   1e610:	add	r1, r1, #1
   1e614:	ldr	r2, [sp, #8]
   1e618:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e61c:	str	r0, [fp, #-4]
   1e620:	b	1e6c0 <flatcc_json_parser_float@@Base+0xae0>
   1e624:	ldr	r0, [fp, #-8]
   1e628:	ldr	r1, [sp, #12]
   1e62c:	add	r1, r1, #1
   1e630:	ldr	r2, [sp, #8]
   1e634:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e638:	str	r0, [sp, #12]
   1e63c:	ldr	r0, [sp, #12]
   1e640:	ldr	r1, [sp, #8]
   1e644:	cmp	r0, r1
   1e648:	bne	1e674 <flatcc_json_parser_float@@Base+0xa94>
   1e64c:	ldr	r0, [sp, #4]
   1e650:	movw	r1, #0
   1e654:	str	r1, [r0]
   1e658:	ldr	r0, [fp, #-8]
   1e65c:	ldr	r1, [sp, #12]
   1e660:	ldr	r2, [sp, #8]
   1e664:	movw	r3, #10
   1e668:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e66c:	str	r0, [fp, #-4]
   1e670:	b	1e6c0 <flatcc_json_parser_float@@Base+0xae0>
   1e674:	ldr	r0, [sp, #12]
   1e678:	ldrb	r0, [r0]
   1e67c:	cmp	r0, #125	; 0x7d
   1e680:	bne	1e6ac <flatcc_json_parser_float@@Base+0xacc>
   1e684:	ldr	r0, [sp, #4]
   1e688:	movw	r1, #0
   1e68c:	str	r1, [r0]
   1e690:	ldr	r0, [fp, #-8]
   1e694:	ldr	r1, [sp, #12]
   1e698:	add	r1, r1, #1
   1e69c:	ldr	r2, [sp, #8]
   1e6a0:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   1e6a4:	str	r0, [fp, #-4]
   1e6a8:	b	1e6c0 <flatcc_json_parser_float@@Base+0xae0>
   1e6ac:	ldr	r0, [sp, #4]
   1e6b0:	movw	r1, #1
   1e6b4:	str	r1, [r0]
   1e6b8:	ldr	r0, [sp, #12]
   1e6bc:	str	r0, [fp, #-4]
   1e6c0:	ldr	r0, [fp, #-4]
   1e6c4:	mov	sp, fp
   1e6c8:	pop	{fp, pc}

0001e6cc <flatcc_json_parser_integer@@Base>:
   1e6cc:	push	{fp, lr}
   1e6d0:	mov	fp, sp
   1e6d4:	sub	sp, sp, #48	; 0x30
   1e6d8:	ldr	ip, [fp, #8]
   1e6dc:	str	r0, [fp, #-8]
   1e6e0:	str	r1, [fp, #-12]
   1e6e4:	str	r2, [fp, #-16]
   1e6e8:	str	r3, [fp, #-20]	; 0xffffffec
   1e6ec:	mov	r0, #0
   1e6f0:	str	r0, [sp, #12]
   1e6f4:	str	r0, [sp, #8]
   1e6f8:	ldr	r0, [fp, #-12]
   1e6fc:	ldr	r1, [fp, #-16]
   1e700:	cmp	r0, r1
   1e704:	bne	1e714 <flatcc_json_parser_integer@@Base+0x48>
   1e708:	ldr	r0, [fp, #-12]
   1e70c:	str	r0, [fp, #-4]
   1e710:	b	1e8e0 <flatcc_json_parser_integer@@Base+0x214>
   1e714:	ldr	r0, [fp, #-12]
   1e718:	str	r0, [sp, #4]
   1e71c:	ldr	r0, [fp, #-12]
   1e720:	ldrb	r0, [r0]
   1e724:	cmp	r0, #45	; 0x2d
   1e728:	movw	r0, #0
   1e72c:	moveq	r0, #1
   1e730:	and	r0, r0, #1
   1e734:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e738:	str	r0, [r1]
   1e73c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e740:	ldr	r0, [r0]
   1e744:	ldr	r1, [fp, #-12]
   1e748:	add	r0, r1, r0
   1e74c:	str	r0, [fp, #-12]
   1e750:	ldr	r0, [fp, #-12]
   1e754:	ldr	r1, [fp, #-16]
   1e758:	cmp	r0, r1
   1e75c:	movw	r0, #0
   1e760:	str	r0, [sp]
   1e764:	beq	1e798 <flatcc_json_parser_integer@@Base+0xcc>
   1e768:	ldr	r0, [fp, #-12]
   1e76c:	ldrb	r0, [r0]
   1e770:	cmp	r0, #48	; 0x30
   1e774:	movw	r0, #0
   1e778:	str	r0, [sp]
   1e77c:	blt	1e798 <flatcc_json_parser_integer@@Base+0xcc>
   1e780:	ldr	r0, [fp, #-12]
   1e784:	ldrb	r0, [r0]
   1e788:	cmp	r0, #57	; 0x39
   1e78c:	movw	r0, #0
   1e790:	movle	r0, #1
   1e794:	str	r0, [sp]
   1e798:	ldr	r0, [sp]
   1e79c:	tst	r0, #1
   1e7a0:	beq	1e84c <flatcc_json_parser_integer@@Base+0x180>
   1e7a4:	ldr	r0, [sp, #8]
   1e7a8:	ldr	r1, [sp, #12]
   1e7ac:	str	r1, [sp, #20]
   1e7b0:	str	r0, [sp, #16]
   1e7b4:	ldr	r0, [sp, #8]
   1e7b8:	ldr	r1, [sp, #12]
   1e7bc:	add	r1, r1, r1, lsl #2
   1e7c0:	lsl	r1, r1, #1
   1e7c4:	ldr	r2, [fp, #-12]
   1e7c8:	ldrb	r2, [r2]
   1e7cc:	mov	r3, #10
   1e7d0:	umlal	r2, r1, r0, r3
   1e7d4:	subs	r0, r2, #48	; 0x30
   1e7d8:	sbc	r1, r1, #0
   1e7dc:	str	r0, [sp, #8]
   1e7e0:	str	r1, [sp, #12]
   1e7e4:	ldr	r0, [sp, #16]
   1e7e8:	ldr	r1, [sp, #20]
   1e7ec:	ldr	r2, [sp, #8]
   1e7f0:	ldr	r3, [sp, #12]
   1e7f4:	subs	r0, r2, r0
   1e7f8:	sbcs	r1, r3, r1
   1e7fc:	bcs	1e83c <flatcc_json_parser_integer@@Base+0x170>
   1e800:	b	1e804 <flatcc_json_parser_integer@@Base+0x138>
   1e804:	ldr	r0, [fp, #-8]
   1e808:	ldr	r1, [fp, #-12]
   1e80c:	ldr	r2, [fp, #-16]
   1e810:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e814:	movw	ip, #0
   1e818:	cmp	r3, ip
   1e81c:	movw	r3, #0
   1e820:	movne	r3, #1
   1e824:	tst	r3, #1
   1e828:	movw	r3, #8
   1e82c:	moveq	r3, #7
   1e830:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e834:	str	r0, [fp, #-4]
   1e838:	b	1e8e0 <flatcc_json_parser_integer@@Base+0x214>
   1e83c:	ldr	r0, [fp, #-12]
   1e840:	add	r0, r0, #1
   1e844:	str	r0, [fp, #-12]
   1e848:	b	1e750 <flatcc_json_parser_integer@@Base+0x84>
   1e84c:	ldr	r0, [fp, #-12]
   1e850:	ldr	r1, [sp, #4]
   1e854:	cmp	r0, r1
   1e858:	bne	1e868 <flatcc_json_parser_integer@@Base+0x19c>
   1e85c:	ldr	r0, [fp, #-12]
   1e860:	str	r0, [fp, #-4]
   1e864:	b	1e8e0 <flatcc_json_parser_integer@@Base+0x214>
   1e868:	ldr	r0, [fp, #-12]
   1e86c:	ldr	r1, [fp, #-16]
   1e870:	cmp	r0, r1
   1e874:	beq	1e8c4 <flatcc_json_parser_integer@@Base+0x1f8>
   1e878:	ldr	r0, [fp, #-12]
   1e87c:	ldrb	r0, [r0]
   1e880:	cmp	r0, #101	; 0x65
   1e884:	beq	1e8a8 <flatcc_json_parser_integer@@Base+0x1dc>
   1e888:	ldr	r0, [fp, #-12]
   1e88c:	ldrb	r0, [r0]
   1e890:	cmp	r0, #69	; 0x45
   1e894:	beq	1e8a8 <flatcc_json_parser_integer@@Base+0x1dc>
   1e898:	ldr	r0, [fp, #-12]
   1e89c:	ldrb	r0, [r0]
   1e8a0:	cmp	r0, #46	; 0x2e
   1e8a4:	bne	1e8c4 <flatcc_json_parser_integer@@Base+0x1f8>
   1e8a8:	ldr	r0, [fp, #-8]
   1e8ac:	ldr	r1, [fp, #-12]
   1e8b0:	ldr	r2, [fp, #-16]
   1e8b4:	movw	r3, #12
   1e8b8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1e8bc:	str	r0, [fp, #-4]
   1e8c0:	b	1e8e0 <flatcc_json_parser_integer@@Base+0x214>
   1e8c4:	ldr	r0, [sp, #8]
   1e8c8:	ldr	r1, [sp, #12]
   1e8cc:	ldr	r2, [fp, #8]
   1e8d0:	str	r1, [r2, #4]
   1e8d4:	str	r0, [r2]
   1e8d8:	ldr	r0, [fp, #-12]
   1e8dc:	str	r0, [fp, #-4]
   1e8e0:	ldr	r0, [fp, #-4]
   1e8e4:	mov	sp, fp
   1e8e8:	pop	{fp, pc}

0001e8ec <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1e8ec:	push	{fp, lr}
   1e8f0:	mov	fp, sp
   1e8f4:	sub	sp, sp, #64	; 0x40
   1e8f8:	ldr	ip, [fp, #8]
   1e8fc:	str	r0, [fp, #-8]
   1e900:	str	r1, [fp, #-12]
   1e904:	str	r2, [fp, #-16]
   1e908:	str	r3, [fp, #-20]	; 0xffffffec
   1e90c:	ldr	r0, [fp, #8]
   1e910:	cmp	r0, #0
   1e914:	movw	r0, #0
   1e918:	movne	r0, #1
   1e91c:	tst	r0, #1
   1e920:	movw	r0, #1
   1e924:	moveq	r0, #0
   1e928:	str	r0, [sp, #20]
   1e92c:	ldr	r0, [fp, #-8]
   1e930:	ldr	r1, [fp, #-12]
   1e934:	ldr	r2, [fp, #-16]
   1e938:	str	ip, [sp, #12]
   1e93c:	bl	1dee0 <flatcc_json_parser_float@@Base+0x300>
   1e940:	str	r0, [fp, #-12]
   1e944:	ldr	r0, [fp, #-8]
   1e948:	ldr	r1, [fp, #-12]
   1e94c:	str	r1, [fp, #-24]	; 0xffffffe8
   1e950:	ldr	r2, [fp, #-16]
   1e954:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   1e958:	str	r0, [fp, #-12]
   1e95c:	ldr	r0, [fp, #-12]
   1e960:	ldr	r1, [fp, #-16]
   1e964:	cmp	r0, r1
   1e968:	beq	1e97c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1e96c:	ldr	r0, [fp, #-12]
   1e970:	ldrb	r0, [r0]
   1e974:	cmp	r0, #34	; 0x22
   1e978:	beq	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   1e97c:	b	1eb04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1e980:	ldr	r0, [fp, #-12]
   1e984:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e988:	sub	r0, r0, r1
   1e98c:	bl	1eb4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   1e990:	str	r0, [sp, #32]
   1e994:	ldr	r0, [fp, #-8]
   1e998:	ldr	r0, [r0]
   1e99c:	movw	r1, #1
   1e9a0:	movw	r2, #1
   1e9a4:	uxth	r2, r2
   1e9a8:	mvn	r3, #0
   1e9ac:	bl	16d7c <flatcc_builder_start_vector@@Base>
   1e9b0:	cmp	r0, #0
   1e9b4:	beq	1e9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd0>
   1e9b8:	b	1eadc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1e9bc:	ldr	r0, [fp, #-8]
   1e9c0:	ldr	r0, [r0]
   1e9c4:	ldr	r1, [sp, #32]
   1e9c8:	bl	16280 <flatcc_builder_extend_vector@@Base>
   1e9cc:	str	r0, [fp, #-28]	; 0xffffffe4
   1e9d0:	movw	r1, #0
   1e9d4:	cmp	r0, r1
   1e9d8:	bne	1e9e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf4>
   1e9dc:	b	1eadc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1e9e0:	ldr	r0, [fp, #-12]
   1e9e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e9e8:	sub	r0, r0, r1
   1e9ec:	str	r0, [sp, #24]
   1e9f0:	ldr	r0, [sp, #32]
   1e9f4:	str	r0, [sp, #28]
   1e9f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1e9fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ea00:	ldr	r2, [sp, #20]
   1ea04:	add	r3, sp, #28
   1ea08:	str	r2, [sp, #8]
   1ea0c:	mov	r2, r3
   1ea10:	add	r3, sp, #24
   1ea14:	ldr	ip, [sp, #8]
   1ea18:	str	ip, [sp]
   1ea1c:	bl	1ebdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   1ea20:	str	r0, [sp, #16]
   1ea24:	cmp	r0, #0
   1ea28:	beq	1ea40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   1ea2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ea30:	ldr	r1, [sp, #24]
   1ea34:	add	r0, r0, r1
   1ea38:	str	r0, [fp, #-12]
   1ea3c:	b	1eb04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1ea40:	ldr	r0, [sp, #24]
   1ea44:	ldr	r1, [fp, #-12]
   1ea48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ea4c:	sub	r1, r1, r2
   1ea50:	cmp	r0, r1
   1ea54:	beq	1ea6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1ea58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ea5c:	ldr	r1, [sp, #24]
   1ea60:	add	r0, r0, r1
   1ea64:	str	r0, [fp, #-12]
   1ea68:	b	1eb04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   1ea6c:	ldr	r0, [sp, #28]
   1ea70:	ldr	r1, [sp, #32]
   1ea74:	cmp	r0, r1
   1ea78:	bcs	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1ea7c:	ldr	r0, [fp, #-8]
   1ea80:	ldr	r0, [r0]
   1ea84:	ldr	r1, [sp, #32]
   1ea88:	ldr	r2, [sp, #28]
   1ea8c:	sub	r1, r1, r2
   1ea90:	bl	16a14 <flatcc_builder_truncate_vector@@Base>
   1ea94:	cmp	r0, #0
   1ea98:	beq	1eaa0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   1ea9c:	b	1eadc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eaa0:	b	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1eaa4:	ldr	r0, [fp, #-8]
   1eaa8:	ldr	r0, [r0]
   1eaac:	bl	1825c <flatcc_builder_end_vector@@Base>
   1eab0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1eab4:	str	r0, [r1]
   1eab8:	cmp	r0, #0
   1eabc:	bne	1eac4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   1eac0:	b	1eadc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eac4:	ldr	r0, [fp, #-8]
   1eac8:	ldr	r1, [fp, #-12]
   1eacc:	ldr	r2, [fp, #-16]
   1ead0:	bl	1df50 <flatcc_json_parser_float@@Base+0x370>
   1ead4:	str	r0, [fp, #-4]
   1ead8:	b	1eb40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   1eadc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1eae0:	movw	r1, #0
   1eae4:	str	r1, [r0]
   1eae8:	ldr	r0, [fp, #-8]
   1eaec:	ldr	r1, [fp, #-12]
   1eaf0:	ldr	r2, [fp, #-16]
   1eaf4:	movw	r3, #33	; 0x21
   1eaf8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1eafc:	str	r0, [fp, #-4]
   1eb00:	b	1eb40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   1eb04:	ldr	r0, [fp, #-20]	; 0xffffffec
   1eb08:	movw	r1, #0
   1eb0c:	str	r1, [r0]
   1eb10:	ldr	r0, [fp, #-8]
   1eb14:	ldr	r1, [fp, #-12]
   1eb18:	ldr	r2, [fp, #-16]
   1eb1c:	ldr	r3, [fp, #8]
   1eb20:	cmp	r3, #0
   1eb24:	movw	r3, #0
   1eb28:	movne	r3, #1
   1eb2c:	tst	r3, #1
   1eb30:	movw	r3, #32
   1eb34:	moveq	r3, #31
   1eb38:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1eb3c:	str	r0, [fp, #-4]
   1eb40:	ldr	r0, [fp, #-4]
   1eb44:	mov	sp, fp
   1eb48:	pop	{fp, pc}
   1eb4c:	sub	sp, sp, #20
   1eb50:	str	r0, [sp, #12]
   1eb54:	ldr	r0, [sp, #12]
   1eb58:	and	r0, r0, #3
   1eb5c:	str	r0, [sp, #8]
   1eb60:	ldr	r0, [sp, #12]
   1eb64:	lsr	r0, r0, #2
   1eb68:	add	r0, r0, r0, lsl #1
   1eb6c:	str	r0, [sp, #4]
   1eb70:	ldr	r0, [sp, #8]
   1eb74:	cmp	r0, #2
   1eb78:	str	r0, [sp]
   1eb7c:	bcc	1ebc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1eb80:	b	1eb84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   1eb84:	ldr	r0, [sp]
   1eb88:	cmp	r0, #2
   1eb8c:	beq	1ebb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1eb90:	b	1eb94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   1eb94:	ldr	r0, [sp]
   1eb98:	cmp	r0, #3
   1eb9c:	bne	1ebc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   1eba0:	b	1eba4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   1eba4:	ldr	r0, [sp, #4]
   1eba8:	add	r0, r0, #2
   1ebac:	str	r0, [sp, #16]
   1ebb0:	b	1ebd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1ebb4:	ldr	r0, [sp, #4]
   1ebb8:	add	r0, r0, #1
   1ebbc:	str	r0, [sp, #16]
   1ebc0:	b	1ebd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1ebc4:	b	1ebc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   1ebc8:	ldr	r0, [sp, #4]
   1ebcc:	str	r0, [sp, #16]
   1ebd0:	ldr	r0, [sp, #16]
   1ebd4:	add	sp, sp, #20
   1ebd8:	bx	lr
   1ebdc:	push	{fp, lr}
   1ebe0:	mov	fp, sp
   1ebe4:	sub	sp, sp, #68	; 0x44
   1ebe8:	ldr	ip, [fp, #8]
   1ebec:	ldr	lr, [pc, #1276]	; 1f0f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x804>
   1ebf0:	add	lr, pc, lr
   1ebf4:	str	r0, [fp, #-4]
   1ebf8:	str	r1, [fp, #-8]
   1ebfc:	str	r2, [fp, #-12]
   1ec00:	str	r3, [fp, #-16]
   1ec04:	movw	r0, #0
   1ec08:	str	r0, [fp, #-20]	; 0xffffffec
   1ec0c:	ldr	r1, [fp, #-4]
   1ec10:	str	r1, [sp, #32]
   1ec14:	mvn	r1, #0
   1ec18:	str	r1, [sp, #28]
   1ec1c:	str	r1, [sp, #24]
   1ec20:	str	lr, [sp, #16]
   1ec24:	ldr	r1, [fp, #8]
   1ec28:	and	r1, r1, #32
   1ec2c:	str	r1, [sp, #12]
   1ec30:	ldr	r1, [fp, #-16]
   1ec34:	cmp	r1, r0
   1ec38:	beq	1ec48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   1ec3c:	ldr	r0, [fp, #-16]
   1ec40:	ldr	r0, [r0]
   1ec44:	str	r0, [sp, #24]
   1ec48:	ldr	r0, [sp, #24]
   1ec4c:	str	r0, [sp, #20]
   1ec50:	ldr	r0, [fp, #8]
   1ec54:	bic	r0, r0, #224	; 0xe0
   1ec58:	str	r0, [fp, #8]
   1ec5c:	ldr	r0, [fp, #8]
   1ec60:	cmp	r0, #0
   1ec64:	str	r0, [sp, #8]
   1ec68:	beq	1ec80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   1ec6c:	b	1ec70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x384>
   1ec70:	ldr	r0, [sp, #8]
   1ec74:	cmp	r0, #1
   1ec78:	beq	1ecb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1ec7c:	b	1ece0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f4>
   1ec80:	ldr	r0, [pc, #1140]	; 1f0fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x810>
   1ec84:	add	r0, pc, r0
   1ec88:	ldr	r1, [pc, #1136]	; 1f100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x814>
   1ec8c:	add	r1, pc, r1
   1ec90:	ldr	r2, [sp, #12]
   1ec94:	cmp	r2, #0
   1ec98:	movw	r2, #0
   1ec9c:	movne	r2, #1
   1eca0:	tst	r2, #1
   1eca4:	movne	r1, r0
   1eca8:	str	r1, [sp, #16]
   1ecac:	b	1ecec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   1ecb0:	ldr	r0, [pc, #1084]	; 1f0f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x808>
   1ecb4:	add	r0, pc, r0
   1ecb8:	ldr	r1, [pc, #1080]	; 1f0f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x80c>
   1ecbc:	add	r1, pc, r1
   1ecc0:	ldr	r2, [sp, #12]
   1ecc4:	cmp	r2, #0
   1ecc8:	movw	r2, #0
   1eccc:	movne	r2, #1
   1ecd0:	tst	r2, #1
   1ecd4:	movne	r1, r0
   1ecd8:	str	r1, [sp, #16]
   1ecdc:	b	1ecec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   1ece0:	movw	r0, #3
   1ece4:	str	r0, [fp, #-20]	; 0xffffffec
   1ece8:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1ecec:	ldr	r0, [fp, #-12]
   1ecf0:	movw	r1, #0
   1ecf4:	cmp	r0, r1
   1ecf8:	beq	1ed18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x42c>
   1ecfc:	ldr	r0, [fp, #-12]
   1ed00:	ldr	r0, [r0]
   1ed04:	cmp	r0, #0
   1ed08:	bls	1ed18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x42c>
   1ed0c:	ldr	r0, [fp, #-12]
   1ed10:	ldr	r0, [r0]
   1ed14:	str	r0, [sp, #28]
   1ed18:	b	1ed1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x430>
   1ed1c:	ldr	r0, [sp, #28]
   1ed20:	cmp	r0, #0
   1ed24:	bls	1ef6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x680>
   1ed28:	movw	r0, #0
   1ed2c:	str	r0, [fp, #-24]	; 0xffffffe8
   1ed30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ed34:	cmp	r0, #4
   1ed38:	bcs	1eed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5e4>
   1ed3c:	ldr	r0, [sp, #24]
   1ed40:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ed44:	cmp	r0, r1
   1ed48:	bne	1ed68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x47c>
   1ed4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ed50:	str	r0, [fp, #-28]	; 0xffffffe4
   1ed54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ed58:	ldr	r1, [sp, #24]
   1ed5c:	sub	r0, r1, r0
   1ed60:	str	r0, [sp, #24]
   1ed64:	b	1efc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6d8>
   1ed68:	ldr	r0, [sp, #16]
   1ed6c:	ldr	r1, [fp, #-8]
   1ed70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ed74:	add	r1, r1, r2
   1ed78:	ldrb	r1, [r1]
   1ed7c:	add	r0, r0, r1
   1ed80:	ldrb	r0, [r0]
   1ed84:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ed88:	sub	r2, fp, #32
   1ed8c:	add	r1, r2, r1
   1ed90:	strb	r0, [r1]
   1ed94:	and	r0, r0, #255	; 0xff
   1ed98:	cmp	r0, #64	; 0x40
   1ed9c:	blt	1eebc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d0>
   1eda0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eda4:	sub	r1, fp, #32
   1eda8:	add	r0, r1, r0
   1edac:	ldrb	r0, [r0]
   1edb0:	cmp	r0, #65	; 0x41
   1edb4:	bne	1ede4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4f8>
   1edb8:	ldr	r0, [fp, #-8]
   1edbc:	add	r0, r0, #1
   1edc0:	str	r0, [fp, #-8]
   1edc4:	ldr	r0, [sp, #24]
   1edc8:	mvn	r1, #0
   1edcc:	add	r0, r0, r1
   1edd0:	str	r0, [sp, #24]
   1edd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1edd8:	add	r0, r0, r1
   1eddc:	str	r0, [fp, #-24]	; 0xffffffe8
   1ede0:	b	1eec0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d4>
   1ede4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ede8:	str	r0, [fp, #-28]	; 0xffffffe4
   1edec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1edf0:	sub	r1, fp, #32
   1edf4:	add	r0, r1, r0
   1edf8:	ldrb	r0, [r0]
   1edfc:	cmp	r0, #66	; 0x42
   1ee00:	bne	1eea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5bc>
   1ee04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee08:	add	r0, r0, #1
   1ee0c:	str	r0, [fp, #-24]	; 0xffffffe8
   1ee10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee14:	ldr	r1, [sp, #24]
   1ee18:	cmp	r0, r1
   1ee1c:	movw	r0, #0
   1ee20:	str	r0, [sp, #4]
   1ee24:	bcs	1ee3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x550>
   1ee28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee2c:	cmp	r0, #8
   1ee30:	movw	r0, #0
   1ee34:	movcc	r0, #1
   1ee38:	str	r0, [sp, #4]
   1ee3c:	ldr	r0, [sp, #4]
   1ee40:	tst	r0, #1
   1ee44:	beq	1eea4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5b8>
   1ee48:	ldr	r0, [sp, #16]
   1ee4c:	ldr	r1, [fp, #-8]
   1ee50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ee54:	add	r1, r1, r2
   1ee58:	ldrb	r1, [r1]
   1ee5c:	add	r0, r0, r1
   1ee60:	ldrb	r0, [r0]
   1ee64:	cmp	r0, #66	; 0x42
   1ee68:	beq	1ee94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5a8>
   1ee6c:	ldr	r0, [sp, #16]
   1ee70:	ldr	r1, [fp, #-8]
   1ee74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ee78:	add	r1, r1, r2
   1ee7c:	ldrb	r1, [r1]
   1ee80:	add	r0, r0, r1
   1ee84:	ldrb	r0, [r0]
   1ee88:	cmp	r0, #65	; 0x41
   1ee8c:	beq	1ee94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5a8>
   1ee90:	b	1eea4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5b8>
   1ee94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ee98:	add	r0, r0, #1
   1ee9c:	str	r0, [fp, #-24]	; 0xffffffe8
   1eea0:	b	1ee10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x524>
   1eea4:	b	1eea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5bc>
   1eea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eeac:	ldr	r1, [sp, #24]
   1eeb0:	sub	r0, r1, r0
   1eeb4:	str	r0, [sp, #24]
   1eeb8:	b	1efc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6d8>
   1eebc:	b	1eec0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5d4>
   1eec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eec4:	add	r0, r0, #1
   1eec8:	str	r0, [fp, #-24]	; 0xffffffe8
   1eecc:	b	1ed30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x444>
   1eed0:	ldr	r0, [sp, #28]
   1eed4:	cmp	r0, #3
   1eed8:	bcs	1eee0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x5f4>
   1eedc:	b	1f0e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7f8>
   1eee0:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1eee4:	lsl	r0, r0, #2
   1eee8:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1eeec:	asr	r1, r1, #4
   1eef0:	orr	r0, r0, r1
   1eef4:	ldr	r1, [fp, #-4]
   1eef8:	strb	r0, [r1]
   1eefc:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1ef00:	lsl	r0, r0, #4
   1ef04:	ldrb	r1, [fp, #-30]	; 0xffffffe2
   1ef08:	asr	r1, r1, #2
   1ef0c:	orr	r0, r0, r1
   1ef10:	ldr	r1, [fp, #-4]
   1ef14:	strb	r0, [r1, #1]
   1ef18:	ldrb	r0, [fp, #-30]	; 0xffffffe2
   1ef1c:	lsl	r0, r0, #6
   1ef20:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1ef24:	orr	r0, r0, r1
   1ef28:	ldr	r1, [fp, #-4]
   1ef2c:	strb	r0, [r1, #2]
   1ef30:	ldr	r0, [fp, #-4]
   1ef34:	add	r0, r0, #3
   1ef38:	str	r0, [fp, #-4]
   1ef3c:	ldr	r0, [fp, #-8]
   1ef40:	add	r0, r0, #4
   1ef44:	str	r0, [fp, #-8]
   1ef48:	ldr	r0, [sp, #28]
   1ef4c:	sub	r0, r0, #3
   1ef50:	str	r0, [sp, #28]
   1ef54:	ldr	r0, [sp, #24]
   1ef58:	sub	r0, r0, #4
   1ef5c:	str	r0, [sp, #24]
   1ef60:	ldr	r0, [sp, #24]
   1ef64:	str	r0, [sp, #20]
   1ef68:	b	1ed1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x430>
   1ef6c:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1ef70:	ldr	r0, [fp, #-12]
   1ef74:	movw	r1, #0
   1ef78:	cmp	r0, r1
   1ef7c:	beq	1ef94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6a8>
   1ef80:	ldr	r0, [fp, #-4]
   1ef84:	ldr	r1, [sp, #32]
   1ef88:	sub	r0, r0, r1
   1ef8c:	ldr	r1, [fp, #-12]
   1ef90:	str	r0, [r1]
   1ef94:	ldr	r0, [fp, #-16]
   1ef98:	movw	r1, #0
   1ef9c:	cmp	r0, r1
   1efa0:	beq	1efb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6cc>
   1efa4:	ldr	r0, [sp, #20]
   1efa8:	ldr	r1, [fp, #-16]
   1efac:	ldr	r2, [r1]
   1efb0:	sub	r0, r2, r0
   1efb4:	str	r0, [r1]
   1efb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1efbc:	mov	sp, fp
   1efc0:	pop	{fp, pc}
   1efc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1efc8:	cmp	r0, #0
   1efcc:	str	r0, [sp]
   1efd0:	beq	1eff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70c>
   1efd4:	b	1efd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6ec>
   1efd8:	ldr	r0, [sp]
   1efdc:	cmp	r0, #2
   1efe0:	beq	1effc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x710>
   1efe4:	b	1efe8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6fc>
   1efe8:	ldr	r0, [sp]
   1efec:	cmp	r0, #3
   1eff0:	beq	1f050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x764>
   1eff4:	b	1f0c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7d4>
   1eff8:	b	1f0cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e0>
   1effc:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1f000:	lsl	r0, r0, #4
   1f004:	and	r0, r0, #255	; 0xff
   1f008:	cmp	r0, #0
   1f00c:	beq	1f014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x728>
   1f010:	b	1f0d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7ec>
   1f014:	ldr	r0, [sp, #28]
   1f018:	cmp	r0, #1
   1f01c:	bcs	1f024 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x738>
   1f020:	b	1f0e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7f8>
   1f024:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1f028:	lsl	r0, r0, #2
   1f02c:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1f030:	asr	r1, r1, #4
   1f034:	orr	r0, r0, r1
   1f038:	ldr	r1, [fp, #-4]
   1f03c:	strb	r0, [r1]
   1f040:	ldr	r0, [fp, #-4]
   1f044:	add	r0, r0, #1
   1f048:	str	r0, [fp, #-4]
   1f04c:	b	1f0cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e0>
   1f050:	ldrb	r0, [fp, #-30]	; 0xffffffe2
   1f054:	lsl	r0, r0, #6
   1f058:	and	r0, r0, #255	; 0xff
   1f05c:	cmp	r0, #0
   1f060:	beq	1f068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x77c>
   1f064:	b	1f0d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7ec>
   1f068:	ldr	r0, [sp, #28]
   1f06c:	cmp	r0, #2
   1f070:	bcs	1f078 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78c>
   1f074:	b	1f0e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7f8>
   1f078:	ldrb	r0, [fp, #-32]	; 0xffffffe0
   1f07c:	lsl	r0, r0, #2
   1f080:	ldrb	r1, [fp, #-31]	; 0xffffffe1
   1f084:	asr	r1, r1, #4
   1f088:	orr	r0, r0, r1
   1f08c:	ldr	r1, [fp, #-4]
   1f090:	strb	r0, [r1]
   1f094:	ldrb	r0, [fp, #-31]	; 0xffffffe1
   1f098:	lsl	r0, r0, #4
   1f09c:	ldrb	r1, [fp, #-30]	; 0xffffffe2
   1f0a0:	asr	r1, r1, #2
   1f0a4:	orr	r0, r0, r1
   1f0a8:	ldr	r1, [fp, #-4]
   1f0ac:	strb	r0, [r1, #1]
   1f0b0:	ldr	r0, [fp, #-4]
   1f0b4:	add	r0, r0, #2
   1f0b8:	str	r0, [fp, #-4]
   1f0bc:	b	1f0cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x7e0>
   1f0c0:	movw	r0, #4
   1f0c4:	str	r0, [fp, #-20]	; 0xffffffec
   1f0c8:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1f0cc:	ldr	r0, [sp, #24]
   1f0d0:	str	r0, [sp, #20]
   1f0d4:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1f0d8:	movw	r0, #5
   1f0dc:	str	r0, [fp, #-20]	; 0xffffffec
   1f0e0:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1f0e4:	movw	r0, #1
   1f0e8:	str	r0, [fp, #-20]	; 0xffffffec
   1f0ec:	b	1ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x684>
   1f0f0:	andeq	r5, r0, fp, lsr r6
   1f0f4:	andeq	r5, r0, r7, ror r8
   1f0f8:	andeq	r5, r0, pc, ror #12
   1f0fc:	andeq	r5, r0, r7, lsr #15
   1f100:	muleq	r0, pc, r5	; <UNPREDICTABLE>

0001f104 <flatcc_json_parser_build_string@@Base>:
   1f104:	push	{fp, lr}
   1f108:	mov	fp, sp
   1f10c:	sub	sp, sp, #40	; 0x28
   1f110:	str	r0, [fp, #-8]
   1f114:	str	r1, [fp, #-12]
   1f118:	str	r2, [fp, #-16]
   1f11c:	str	r3, [sp, #20]
   1f120:	ldr	r0, [fp, #-8]
   1f124:	ldr	r1, [fp, #-12]
   1f128:	ldr	r2, [fp, #-16]
   1f12c:	bl	1dee0 <flatcc_json_parser_float@@Base+0x300>
   1f130:	str	r0, [fp, #-12]
   1f134:	ldr	r0, [fp, #-8]
   1f138:	ldr	r1, [fp, #-12]
   1f13c:	str	r1, [sp, #12]
   1f140:	ldr	r2, [fp, #-16]
   1f144:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   1f148:	str	r0, [fp, #-12]
   1f14c:	ldr	r0, [fp, #-12]
   1f150:	ldr	r1, [fp, #-16]
   1f154:	cmp	r0, r1
   1f158:	beq	1f194 <flatcc_json_parser_build_string@@Base+0x90>
   1f15c:	ldr	r0, [fp, #-12]
   1f160:	ldrb	r0, [r0]
   1f164:	cmp	r0, #34	; 0x22
   1f168:	bne	1f194 <flatcc_json_parser_build_string@@Base+0x90>
   1f16c:	ldr	r0, [fp, #-8]
   1f170:	ldr	r0, [r0]
   1f174:	ldr	r1, [sp, #12]
   1f178:	ldr	r2, [fp, #-12]
   1f17c:	ldr	r3, [sp, #12]
   1f180:	sub	r2, r2, r3
   1f184:	bl	19514 <flatcc_builder_create_string@@Base>
   1f188:	ldr	r1, [sp, #20]
   1f18c:	str	r0, [r1]
   1f190:	b	1f2d4 <flatcc_json_parser_build_string@@Base+0x1d0>
   1f194:	ldr	r0, [fp, #-8]
   1f198:	ldr	r0, [r0]
   1f19c:	bl	17010 <flatcc_builder_start_string@@Base>
   1f1a0:	cmp	r0, #0
   1f1a4:	bne	1f1d0 <flatcc_json_parser_build_string@@Base+0xcc>
   1f1a8:	ldr	r0, [fp, #-8]
   1f1ac:	ldr	r0, [r0]
   1f1b0:	ldr	r1, [sp, #12]
   1f1b4:	ldr	r2, [fp, #-12]
   1f1b8:	ldr	r3, [sp, #12]
   1f1bc:	sub	r2, r2, r3
   1f1c0:	bl	16868 <flatcc_builder_append_string@@Base>
   1f1c4:	movw	r1, #0
   1f1c8:	cmp	r1, r0
   1f1cc:	bne	1f1d4 <flatcc_json_parser_build_string@@Base+0xd0>
   1f1d0:	b	1f2ec <flatcc_json_parser_build_string@@Base+0x1e8>
   1f1d4:	b	1f1d8 <flatcc_json_parser_build_string@@Base+0xd4>
   1f1d8:	ldr	r0, [fp, #-12]
   1f1dc:	ldr	r1, [fp, #-16]
   1f1e0:	cmp	r0, r1
   1f1e4:	movw	r0, #0
   1f1e8:	str	r0, [sp, #8]
   1f1ec:	beq	1f208 <flatcc_json_parser_build_string@@Base+0x104>
   1f1f0:	ldr	r0, [fp, #-12]
   1f1f4:	ldrb	r0, [r0]
   1f1f8:	cmp	r0, #34	; 0x22
   1f1fc:	movw	r0, #0
   1f200:	movne	r0, #1
   1f204:	str	r0, [sp, #8]
   1f208:	ldr	r0, [sp, #8]
   1f20c:	tst	r0, #1
   1f210:	beq	1f2c0 <flatcc_json_parser_build_string@@Base+0x1bc>
   1f214:	add	r3, sp, #16
   1f218:	ldr	r0, [fp, #-8]
   1f21c:	ldr	r1, [fp, #-12]
   1f220:	ldr	r2, [fp, #-16]
   1f224:	bl	1c35c <flatcc_json_parser_string_escape@@Base>
   1f228:	add	r1, sp, #16
   1f22c:	str	r0, [fp, #-12]
   1f230:	ldr	r0, [fp, #-8]
   1f234:	ldr	r0, [r0]
   1f238:	add	r1, r1, #1
   1f23c:	ldrb	r2, [sp, #16]
   1f240:	bl	16868 <flatcc_builder_append_string@@Base>
   1f244:	movw	r1, #0
   1f248:	cmp	r1, r0
   1f24c:	bne	1f254 <flatcc_json_parser_build_string@@Base+0x150>
   1f250:	b	1f2ec <flatcc_json_parser_build_string@@Base+0x1e8>
   1f254:	ldr	r0, [fp, #-16]
   1f258:	ldr	r1, [fp, #-8]
   1f25c:	ldr	r2, [fp, #-12]
   1f260:	str	r2, [sp, #12]
   1f264:	ldr	r3, [fp, #-16]
   1f268:	str	r0, [sp, #4]
   1f26c:	mov	r0, r1
   1f270:	mov	r1, r2
   1f274:	mov	r2, r3
   1f278:	bl	1c05c <flatcc_json_parser_string_part@@Base>
   1f27c:	str	r0, [fp, #-12]
   1f280:	ldr	r1, [sp, #4]
   1f284:	cmp	r1, r0
   1f288:	beq	1f2bc <flatcc_json_parser_build_string@@Base+0x1b8>
   1f28c:	ldr	r0, [fp, #-8]
   1f290:	ldr	r0, [r0]
   1f294:	ldr	r1, [sp, #12]
   1f298:	ldr	r2, [fp, #-12]
   1f29c:	ldr	r3, [sp, #12]
   1f2a0:	sub	r2, r2, r3
   1f2a4:	bl	16868 <flatcc_builder_append_string@@Base>
   1f2a8:	movw	r1, #0
   1f2ac:	cmp	r1, r0
   1f2b0:	bne	1f2b8 <flatcc_json_parser_build_string@@Base+0x1b4>
   1f2b4:	b	1f2ec <flatcc_json_parser_build_string@@Base+0x1e8>
   1f2b8:	b	1f2bc <flatcc_json_parser_build_string@@Base+0x1b8>
   1f2bc:	b	1f1d8 <flatcc_json_parser_build_string@@Base+0xd4>
   1f2c0:	ldr	r0, [fp, #-8]
   1f2c4:	ldr	r0, [r0]
   1f2c8:	bl	1971c <flatcc_builder_end_string@@Base>
   1f2cc:	ldr	r1, [sp, #20]
   1f2d0:	str	r0, [r1]
   1f2d4:	ldr	r0, [fp, #-8]
   1f2d8:	ldr	r1, [fp, #-12]
   1f2dc:	ldr	r2, [fp, #-16]
   1f2e0:	bl	1df50 <flatcc_json_parser_float@@Base+0x370>
   1f2e4:	str	r0, [fp, #-4]
   1f2e8:	b	1f300 <flatcc_json_parser_build_string@@Base+0x1fc>
   1f2ec:	ldr	r0, [sp, #20]
   1f2f0:	movw	r1, #0
   1f2f4:	str	r1, [r0]
   1f2f8:	ldr	r0, [fp, #-12]
   1f2fc:	str	r0, [fp, #-4]
   1f300:	ldr	r0, [fp, #-4]
   1f304:	mov	sp, fp
   1f308:	pop	{fp, pc}

0001f30c <flatcc_json_parser_prepare_unions@@Base>:
   1f30c:	push	{fp, lr}
   1f310:	mov	fp, sp
   1f314:	sub	sp, sp, #32
   1f318:	ldr	ip, [fp, #8]
   1f31c:	str	r0, [fp, #-8]
   1f320:	str	r1, [fp, #-12]
   1f324:	str	r2, [sp, #16]
   1f328:	str	r3, [sp, #12]
   1f32c:	ldr	r0, [fp, #-8]
   1f330:	ldr	r0, [r0]
   1f334:	ldr	r1, [sp, #12]
   1f338:	sub	r1, r1, #1
   1f33c:	movw	r2, #24
   1f340:	mul	r1, r1, r2
   1f344:	add	r1, r1, #32
   1f348:	str	ip, [sp, #4]
   1f34c:	bl	14ebc <flatcc_builder_enter_user_frame@@Base>
   1f350:	ldr	r1, [fp, #8]
   1f354:	str	r0, [r1]
   1f358:	cmp	r0, #0
   1f35c:	bne	1f37c <flatcc_json_parser_prepare_unions@@Base+0x70>
   1f360:	ldr	r0, [fp, #-8]
   1f364:	ldr	r1, [fp, #-12]
   1f368:	ldr	r2, [sp, #16]
   1f36c:	movw	r3, #33	; 0x21
   1f370:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f374:	str	r0, [fp, #-4]
   1f378:	b	1f3a8 <flatcc_json_parser_prepare_unions@@Base+0x9c>
   1f37c:	ldr	r0, [fp, #-8]
   1f380:	ldr	r0, [r0]
   1f384:	ldr	r1, [fp, #8]
   1f388:	ldr	r1, [r1]
   1f38c:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1f390:	str	r0, [sp, #8]
   1f394:	ldr	r0, [sp, #12]
   1f398:	ldr	r1, [sp, #8]
   1f39c:	str	r0, [r1]
   1f3a0:	ldr	r0, [fp, #-12]
   1f3a4:	str	r0, [fp, #-4]
   1f3a8:	ldr	r0, [fp, #-4]
   1f3ac:	mov	sp, fp
   1f3b0:	pop	{fp, pc}

0001f3b4 <flatcc_json_parser_finalize_unions@@Base>:
   1f3b4:	push	{fp, lr}
   1f3b8:	mov	fp, sp
   1f3bc:	sub	sp, sp, #24
   1f3c0:	str	r0, [fp, #-4]
   1f3c4:	str	r1, [fp, #-8]
   1f3c8:	str	r2, [sp, #12]
   1f3cc:	str	r3, [sp, #8]
   1f3d0:	ldr	r0, [fp, #-4]
   1f3d4:	ldr	r0, [r0]
   1f3d8:	ldr	r1, [sp, #8]
   1f3dc:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1f3e0:	str	r0, [sp, #4]
   1f3e4:	ldr	r0, [sp, #4]
   1f3e8:	ldr	r0, [r0, #4]
   1f3ec:	cmp	r0, #0
   1f3f0:	beq	1f40c <flatcc_json_parser_finalize_unions@@Base+0x58>
   1f3f4:	ldr	r0, [fp, #-4]
   1f3f8:	ldr	r1, [fp, #-8]
   1f3fc:	ldr	r2, [sp, #12]
   1f400:	movw	r3, #27
   1f404:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f408:	str	r0, [fp, #-8]
   1f40c:	ldr	r0, [fp, #-4]
   1f410:	ldr	r0, [r0]
   1f414:	ldr	r1, [sp, #8]
   1f418:	bl	15030 <flatcc_builder_exit_user_frame_at@@Base>
   1f41c:	ldr	r1, [fp, #-8]
   1f420:	str	r0, [sp]
   1f424:	mov	r0, r1
   1f428:	mov	sp, fp
   1f42c:	pop	{fp, pc}

0001f430 <flatcc_json_parser_union@@Base>:
   1f430:	push	{r4, sl, fp, lr}
   1f434:	add	fp, sp, #8
   1f438:	sub	sp, sp, #56	; 0x38
   1f43c:	ldr	ip, [fp, #16]
   1f440:	ldr	lr, [fp, #12]
   1f444:	ldr	r4, [fp, #8]
   1f448:	str	r0, [fp, #-16]
   1f44c:	str	r1, [fp, #-20]	; 0xffffffec
   1f450:	str	r2, [fp, #-24]	; 0xffffffe8
   1f454:	str	r3, [fp, #-28]	; 0xffffffe4
   1f458:	strh	r4, [fp, #-30]	; 0xffffffe2
   1f45c:	ldr	r0, [fp, #-16]
   1f460:	ldr	r0, [r0]
   1f464:	ldr	r1, [fp, #12]
   1f468:	str	ip, [sp, #12]
   1f46c:	str	lr, [sp, #8]
   1f470:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1f474:	str	r0, [sp, #28]
   1f478:	ldr	r0, [sp, #28]
   1f47c:	add	r0, r0, #8
   1f480:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f484:	movw	r2, #24
   1f488:	mul	r1, r1, r2
   1f48c:	add	r0, r0, r1
   1f490:	str	r0, [sp, #24]
   1f494:	ldr	r0, [sp, #24]
   1f498:	ldr	r0, [r0]
   1f49c:	movw	r1, #0
   1f4a0:	cmp	r0, r1
   1f4a4:	beq	1f4c4 <flatcc_json_parser_union@@Base+0x94>
   1f4a8:	ldr	r0, [fp, #-16]
   1f4ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f4b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f4b4:	movw	r3, #28
   1f4b8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f4bc:	str	r0, [fp, #-12]
   1f4c0:	b	1f610 <flatcc_json_parser_union@@Base+0x1e0>
   1f4c4:	ldr	r0, [sp, #24]
   1f4c8:	ldrsb	r0, [r0, #12]
   1f4cc:	cmp	r0, #0
   1f4d0:	bne	1f524 <flatcc_json_parser_union@@Base+0xf4>
   1f4d4:	ldr	r0, [sp, #28]
   1f4d8:	ldr	r1, [r0, #4]
   1f4dc:	add	r1, r1, #1
   1f4e0:	str	r1, [r0, #4]
   1f4e4:	ldr	r0, [fp, #-16]
   1f4e8:	ldr	r0, [r0, #16]
   1f4ec:	ldr	r1, [sp, #24]
   1f4f0:	str	r0, [r1, #8]
   1f4f4:	ldr	r0, [fp, #-16]
   1f4f8:	ldr	r0, [r0, #4]
   1f4fc:	ldr	r1, [sp, #24]
   1f500:	str	r0, [r1, #4]
   1f504:	ldr	r0, [fp, #-16]
   1f508:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f50c:	ldr	r2, [sp, #24]
   1f510:	str	r1, [r2]
   1f514:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f518:	bl	1d424 <flatcc_json_parser_generic_json@@Base>
   1f51c:	str	r0, [fp, #-20]	; 0xffffffec
   1f520:	b	1f608 <flatcc_json_parser_union@@Base+0x1d8>
   1f524:	ldr	r0, [sp, #24]
   1f528:	ldrb	r0, [r0, #13]
   1f52c:	strb	r0, [sp, #16]
   1f530:	ldr	r0, [sp, #24]
   1f534:	ldrb	r0, [r0, #13]
   1f538:	cmp	r0, #0
   1f53c:	bne	1f55c <flatcc_json_parser_union@@Base+0x12c>
   1f540:	ldr	r0, [fp, #-16]
   1f544:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f548:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f54c:	movw	r3, #25
   1f550:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f554:	str	r0, [fp, #-12]
   1f558:	b	1f610 <flatcc_json_parser_union@@Base+0x1e0>
   1f55c:	ldr	r0, [sp, #28]
   1f560:	ldr	r1, [r0, #4]
   1f564:	mvn	r2, #0
   1f568:	add	r1, r1, r2
   1f56c:	str	r1, [r0, #4]
   1f570:	ldr	r0, [fp, #16]
   1f574:	ldr	r1, [fp, #-16]
   1f578:	ldr	r2, [fp, #-20]	; 0xffffffec
   1f57c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f580:	ldr	ip, [sp, #24]
   1f584:	ldrb	ip, [ip, #13]
   1f588:	add	lr, sp, #16
   1f58c:	add	lr, lr, #4
   1f590:	str	r0, [sp, #4]
   1f594:	mov	r0, r1
   1f598:	mov	r1, r2
   1f59c:	mov	r2, r3
   1f5a0:	and	r3, ip, #255	; 0xff
   1f5a4:	str	lr, [sp]
   1f5a8:	ldr	ip, [sp, #4]
   1f5ac:	blx	ip
   1f5b0:	str	r0, [fp, #-20]	; 0xffffffec
   1f5b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f5b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f5bc:	cmp	r0, r1
   1f5c0:	beq	1f604 <flatcc_json_parser_union@@Base+0x1d4>
   1f5c4:	ldr	r0, [fp, #-16]
   1f5c8:	ldr	r0, [r0]
   1f5cc:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1f5d0:	ldr	r2, [sp, #16]
   1f5d4:	ldr	r3, [sp, #20]
   1f5d8:	bl	18774 <flatcc_builder_table_add_union@@Base>
   1f5dc:	cmp	r0, #0
   1f5e0:	beq	1f600 <flatcc_json_parser_union@@Base+0x1d0>
   1f5e4:	ldr	r0, [fp, #-16]
   1f5e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f5ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f5f0:	movw	r3, #28
   1f5f4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f5f8:	str	r0, [fp, #-12]
   1f5fc:	b	1f610 <flatcc_json_parser_union@@Base+0x1e0>
   1f600:	b	1f604 <flatcc_json_parser_union@@Base+0x1d4>
   1f604:	b	1f608 <flatcc_json_parser_union@@Base+0x1d8>
   1f608:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f60c:	str	r0, [fp, #-12]
   1f610:	ldr	r0, [fp, #-12]
   1f614:	sub	sp, fp, #8
   1f618:	pop	{r4, sl, fp, pc}

0001f61c <flatcc_json_parser_union_type@@Base>:
   1f61c:	push	{r4, r5, fp, lr}
   1f620:	add	fp, sp, #8
   1f624:	sub	sp, sp, #80	; 0x50
   1f628:	ldr	ip, [fp, #20]
   1f62c:	ldr	lr, [fp, #16]
   1f630:	ldr	r4, [fp, #12]
   1f634:	ldr	r5, [fp, #8]
   1f638:	str	r0, [fp, #-16]
   1f63c:	str	r1, [fp, #-20]	; 0xffffffec
   1f640:	str	r2, [fp, #-24]	; 0xffffffe8
   1f644:	str	r3, [fp, #-28]	; 0xffffffe4
   1f648:	strh	r5, [fp, #-30]	; 0xffffffe2
   1f64c:	ldr	r0, [fp, #-16]
   1f650:	ldr	r0, [r0]
   1f654:	ldr	r1, [fp, #12]
   1f658:	str	ip, [sp, #24]
   1f65c:	str	lr, [sp, #20]
   1f660:	str	r4, [sp, #16]
   1f664:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1f668:	str	r0, [fp, #-36]	; 0xffffffdc
   1f66c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f670:	add	r0, r0, #8
   1f674:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f678:	movw	r2, #24
   1f67c:	mul	r1, r1, r2
   1f680:	add	r0, r0, r1
   1f684:	str	r0, [fp, #-40]	; 0xffffffd8
   1f688:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f68c:	ldrsb	r0, [r0, #12]
   1f690:	cmp	r0, #0
   1f694:	beq	1f6b4 <flatcc_json_parser_union_type@@Base+0x98>
   1f698:	ldr	r0, [fp, #-16]
   1f69c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f6a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f6a4:	movw	r3, #28
   1f6a8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f6ac:	str	r0, [fp, #-12]
   1f6b0:	b	1f8a8 <flatcc_json_parser_union_type@@Base+0x28c>
   1f6b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f6b8:	movw	r1, #1
   1f6bc:	strb	r1, [r0, #12]
   1f6c0:	ldr	r0, [fp, #-16]
   1f6c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f6c8:	str	r1, [sp, #36]	; 0x24
   1f6cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f6d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f6d4:	add	r3, r3, #13
   1f6d8:	bl	1f8c0 <flatcc_json_parser_union_type@@Base+0x2a4>
   1f6dc:	str	r0, [fp, #-20]	; 0xffffffec
   1f6e0:	ldr	r0, [sp, #36]	; 0x24
   1f6e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f6e8:	cmp	r0, r1
   1f6ec:	bne	1f714 <flatcc_json_parser_union_type@@Base+0xf8>
   1f6f0:	ldr	r0, [fp, #-16]
   1f6f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f6f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f6fc:	ldr	r3, [fp, #16]
   1f700:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1f704:	add	ip, ip, #13
   1f708:	str	ip, [sp]
   1f70c:	bl	1f99c <flatcc_json_parser_union_type@@Base+0x380>
   1f710:	str	r0, [fp, #-20]	; 0xffffffec
   1f714:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f718:	ldr	r0, [r0]
   1f71c:	movw	r1, #0
   1f720:	cmp	r0, r1
   1f724:	bne	1f75c <flatcc_json_parser_union_type@@Base+0x140>
   1f728:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f72c:	ldrb	r0, [r0, #13]
   1f730:	cmp	r0, #0
   1f734:	movw	r0, #0
   1f738:	movne	r0, #1
   1f73c:	and	r0, r0, #1
   1f740:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f744:	ldr	r2, [r1, #4]
   1f748:	add	r0, r2, r0
   1f74c:	str	r0, [r1, #4]
   1f750:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f754:	str	r0, [fp, #-12]
   1f758:	b	1f8a8 <flatcc_json_parser_union_type@@Base+0x28c>
   1f75c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f760:	ldr	r0, [r0, #4]
   1f764:	cmp	r0, #0
   1f768:	beq	1f770 <flatcc_json_parser_union_type@@Base+0x154>
   1f76c:	b	1f790 <flatcc_json_parser_union_type@@Base+0x174>
   1f770:	ldr	r0, [pc, #316]	; 1f8b4 <flatcc_json_parser_union_type@@Base+0x298>
   1f774:	add	r0, pc, r0
   1f778:	ldr	r1, [pc, #312]	; 1f8b8 <flatcc_json_parser_union_type@@Base+0x29c>
   1f77c:	add	r1, pc, r1
   1f780:	ldr	r2, [pc, #308]	; 1f8bc <flatcc_json_parser_union_type@@Base+0x2a0>
   1f784:	add	r3, pc, r2
   1f788:	movw	r2, #965	; 0x3c5
   1f78c:	bl	1298c <__assert_fail@plt>
   1f790:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f794:	ldr	r1, [r0, #4]
   1f798:	mvn	r2, #0
   1f79c:	add	r1, r1, r2
   1f7a0:	str	r1, [r0, #4]
   1f7a4:	ldr	r0, [fp, #-16]
   1f7a8:	ldr	r0, [r0, #16]
   1f7ac:	str	r0, [sp, #32]
   1f7b0:	ldr	r0, [fp, #-16]
   1f7b4:	ldr	r0, [r0, #4]
   1f7b8:	str	r0, [sp, #28]
   1f7bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f7c0:	ldr	r0, [r0, #8]
   1f7c4:	ldr	r1, [fp, #-16]
   1f7c8:	str	r0, [r1, #16]
   1f7cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f7d0:	ldr	r0, [r0, #4]
   1f7d4:	ldr	r1, [fp, #-16]
   1f7d8:	str	r0, [r1, #4]
   1f7dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f7e0:	ldrb	r0, [r0, #13]
   1f7e4:	strb	r0, [sp, #40]	; 0x28
   1f7e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f7ec:	ldr	r1, [fp, #20]
   1f7f0:	ldr	r2, [fp, #-16]
   1f7f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f7f8:	ldr	r3, [r3]
   1f7fc:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1f800:	ldr	lr, [fp, #-40]	; 0xffffffd8
   1f804:	ldrb	lr, [lr, #13]
   1f808:	add	r4, sp, #40	; 0x28
   1f80c:	add	r4, r4, #4
   1f810:	str	r0, [sp, #12]
   1f814:	mov	r0, r2
   1f818:	str	r1, [sp, #8]
   1f81c:	mov	r1, r3
   1f820:	mov	r2, ip
   1f824:	and	r3, lr, #255	; 0xff
   1f828:	str	r4, [sp]
   1f82c:	ldr	ip, [sp, #8]
   1f830:	blx	ip
   1f834:	ldr	r1, [sp, #12]
   1f838:	cmp	r1, r0
   1f83c:	bne	1f84c <flatcc_json_parser_union_type@@Base+0x230>
   1f840:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f844:	str	r0, [fp, #-12]
   1f848:	b	1f8a8 <flatcc_json_parser_union_type@@Base+0x28c>
   1f84c:	ldr	r0, [fp, #-16]
   1f850:	ldr	r0, [r0]
   1f854:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1f858:	ldr	r2, [sp, #40]	; 0x28
   1f85c:	ldr	r3, [sp, #44]	; 0x2c
   1f860:	bl	18774 <flatcc_builder_table_add_union@@Base>
   1f864:	cmp	r0, #0
   1f868:	beq	1f888 <flatcc_json_parser_union_type@@Base+0x26c>
   1f86c:	ldr	r0, [fp, #-16]
   1f870:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f874:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f878:	movw	r3, #28
   1f87c:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1f880:	str	r0, [fp, #-12]
   1f884:	b	1f8a8 <flatcc_json_parser_union_type@@Base+0x28c>
   1f888:	ldr	r0, [sp, #32]
   1f88c:	ldr	r1, [fp, #-16]
   1f890:	str	r0, [r1, #16]
   1f894:	ldr	r0, [sp, #28]
   1f898:	ldr	r1, [fp, #-16]
   1f89c:	str	r0, [r1, #4]
   1f8a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f8a4:	str	r0, [fp, #-12]
   1f8a8:	ldr	r0, [fp, #-12]
   1f8ac:	sub	sp, fp, #8
   1f8b0:	pop	{r4, r5, fp, pc}
   1f8b4:	andeq	r4, r0, ip, lsr #3
   1f8b8:			; <UNDEFINED> instruction: 0x000041b3
   1f8bc:	andeq	r4, r0, ip, lsl #4
   1f8c0:	push	{r4, r5, fp, lr}
   1f8c4:	add	fp, sp, #8
   1f8c8:	sub	sp, sp, #56	; 0x38
   1f8cc:	str	r0, [fp, #-16]
   1f8d0:	str	r1, [fp, #-20]	; 0xffffffec
   1f8d4:	str	r2, [fp, #-24]	; 0xffffffe8
   1f8d8:	str	r3, [fp, #-28]	; 0xffffffe4
   1f8dc:	mov	r0, #0
   1f8e0:	str	r0, [sp, #28]
   1f8e4:	str	r0, [sp, #24]
   1f8e8:	movw	r0, #0
   1f8ec:	str	r0, [sp, #20]
   1f8f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f8f4:	str	r0, [sp, #16]
   1f8f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f8fc:	movw	r1, #0
   1f900:	strb	r1, [r0]
   1f904:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f908:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f90c:	cmp	r0, r1
   1f910:	bne	1f920 <flatcc_json_parser_union_type@@Base+0x304>
   1f914:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f918:	str	r0, [fp, #-12]
   1f91c:	b	1f990 <flatcc_json_parser_union_type@@Base+0x374>
   1f920:	ldr	r0, [fp, #-16]
   1f924:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f928:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f92c:	add	r3, sp, #20
   1f930:	add	ip, sp, #24
   1f934:	str	ip, [sp]
   1f938:	bl	1e6cc <flatcc_json_parser_integer@@Base>
   1f93c:	str	r0, [fp, #-20]	; 0xffffffec
   1f940:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f944:	ldr	r1, [sp, #16]
   1f948:	cmp	r0, r1
   1f94c:	beq	1f988 <flatcc_json_parser_union_type@@Base+0x36c>
   1f950:	ldr	r0, [fp, #-16]
   1f954:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f958:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f95c:	ldr	r3, [sp, #20]
   1f960:	ldr	ip, [sp, #24]
   1f964:	ldr	lr, [sp, #28]
   1f968:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1f96c:	mov	r5, sp
   1f970:	str	r4, [r5, #8]
   1f974:	str	lr, [r5, #4]
   1f978:	str	ip, [r5]
   1f97c:	bl	21918 <flatcc_json_parser_struct_as_root@@Base+0x122c>
   1f980:	str	r0, [fp, #-12]
   1f984:	b	1f990 <flatcc_json_parser_union_type@@Base+0x374>
   1f988:	ldr	r0, [fp, #-20]	; 0xffffffec
   1f98c:	str	r0, [fp, #-12]
   1f990:	ldr	r0, [fp, #-12]
   1f994:	sub	sp, fp, #8
   1f998:	pop	{r4, r5, fp, pc}
   1f99c:	push	{r4, r5, r6, sl, fp, lr}
   1f9a0:	add	fp, sp, #16
   1f9a4:	sub	sp, sp, #88	; 0x58
   1f9a8:	ldr	ip, [fp, #8]
   1f9ac:	str	r0, [fp, #-24]	; 0xffffffe8
   1f9b0:	str	r1, [fp, #-28]	; 0xffffffe4
   1f9b4:	str	r2, [fp, #-32]	; 0xffffffe0
   1f9b8:	str	r3, [fp, #-36]	; 0xffffffdc
   1f9bc:	movw	r0, #0
   1f9c0:	strb	r0, [fp, #-45]	; 0xffffffd3
   1f9c4:	movw	r1, #0
   1f9c8:	str	r1, [sp, #36]	; 0x24
   1f9cc:	ldr	r1, [fp, #8]
   1f9d0:	strb	r0, [r1]
   1f9d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f9d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f9dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f9e0:	str	ip, [sp, #32]
   1f9e4:	bl	219c4 <flatcc_json_parser_struct_as_root@@Base+0x12d8>
   1f9e8:	str	r0, [fp, #-28]	; 0xffffffe4
   1f9ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f9f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1f9f4:	cmp	r0, r1
   1f9f8:	bne	1fa08 <flatcc_json_parser_union_type@@Base+0x3ec>
   1f9fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fa00:	str	r0, [fp, #-20]	; 0xffffffec
   1fa04:	b	1fbbc <flatcc_json_parser_union_type@@Base+0x5a0>
   1fa08:	b	1fa0c <flatcc_json_parser_union_type@@Base+0x3f0>
   1fa0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fa10:	str	r0, [fp, #-40]	; 0xffffffd8
   1fa14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fa18:	ldr	r0, [r0]
   1fa1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fa20:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1fa24:	str	r2, [fp, #-44]	; 0xffffffd4
   1fa28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1fa2c:	str	r0, [sp, #28]
   1fa30:	mov	r0, r1
   1fa34:	mov	r1, r2
   1fa38:	mov	r2, r3
   1fa3c:	add	r3, sp, #44	; 0x2c
   1fa40:	add	ip, sp, #48	; 0x30
   1fa44:	str	ip, [sp]
   1fa48:	add	ip, sp, #40	; 0x28
   1fa4c:	str	ip, [sp, #4]
   1fa50:	ldr	ip, [sp, #28]
   1fa54:	blx	ip
   1fa58:	str	r0, [fp, #-28]	; 0xffffffe4
   1fa5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fa60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1fa64:	cmp	r0, r1
   1fa68:	bne	1fa78 <flatcc_json_parser_union_type@@Base+0x45c>
   1fa6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fa70:	str	r0, [fp, #-20]	; 0xffffffec
   1fa74:	b	1fbbc <flatcc_json_parser_union_type@@Base+0x5a0>
   1fa78:	b	1fa7c <flatcc_json_parser_union_type@@Base+0x460>
   1fa7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fa80:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1fa84:	cmp	r0, r1
   1fa88:	movw	r0, #0
   1fa8c:	str	r0, [sp, #24]
   1fa90:	bne	1fab8 <flatcc_json_parser_union_type@@Base+0x49c>
   1fa94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fa98:	add	r1, r0, #4
   1fa9c:	str	r1, [fp, #-40]	; 0xffffffd8
   1faa0:	ldr	r0, [r0, #4]
   1faa4:	movw	r1, #0
   1faa8:	cmp	r0, r1
   1faac:	movw	r0, #0
   1fab0:	movne	r0, #1
   1fab4:	str	r0, [sp, #24]
   1fab8:	ldr	r0, [sp, #24]
   1fabc:	tst	r0, #1
   1fac0:	bne	1fa14 <flatcc_json_parser_union_type@@Base+0x3f8>
   1fac4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1fac8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1facc:	cmp	r0, r1
   1fad0:	bne	1faf0 <flatcc_json_parser_union_type@@Base+0x4d4>
   1fad4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fad8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fadc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fae0:	movw	r3, #23
   1fae4:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1fae8:	str	r0, [fp, #-20]	; 0xffffffec
   1faec:	b	1fbbc <flatcc_json_parser_union_type@@Base+0x5a0>
   1faf0:	ldr	r0, [sp, #36]	; 0x24
   1faf4:	add	r1, r0, #1
   1faf8:	str	r1, [sp, #36]	; 0x24
   1fafc:	cmp	r0, #0
   1fb00:	beq	1fb30 <flatcc_json_parser_union_type@@Base+0x514>
   1fb04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fb08:	ldr	r0, [r0, #12]
   1fb0c:	cmp	r0, #0
   1fb10:	beq	1fb30 <flatcc_json_parser_union_type@@Base+0x514>
   1fb14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1fb18:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fb1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fb20:	movw	r3, #14
   1fb24:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1fb28:	str	r0, [fp, #-20]	; 0xffffffec
   1fb2c:	b	1fbbc <flatcc_json_parser_union_type@@Base+0x5a0>
   1fb30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fb34:	mov	r1, r0
   1fb38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fb3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1fb40:	ldr	ip, [sp, #44]	; 0x2c
   1fb44:	ldr	lr, [sp, #48]	; 0x30
   1fb48:	ldr	r4, [sp, #52]	; 0x34
   1fb4c:	mov	r5, sp
   1fb50:	sub	r6, fp, #45	; 0x2d
   1fb54:	str	r6, [r5, #8]
   1fb58:	str	r4, [r5, #4]
   1fb5c:	str	lr, [r5]
   1fb60:	str	r0, [sp, #20]
   1fb64:	mov	r0, r2
   1fb68:	str	r1, [sp, #16]
   1fb6c:	mov	r1, r3
   1fb70:	ldr	r2, [sp, #20]
   1fb74:	mov	r3, ip
   1fb78:	bl	21918 <flatcc_json_parser_struct_as_root@@Base+0x122c>
   1fb7c:	ldr	r1, [sp, #16]
   1fb80:	cmp	r1, r0
   1fb84:	bne	1fb94 <flatcc_json_parser_union_type@@Base+0x578>
   1fb88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fb8c:	str	r0, [fp, #-20]	; 0xffffffec
   1fb90:	b	1fbbc <flatcc_json_parser_union_type@@Base+0x5a0>
   1fb94:	ldrb	r0, [fp, #-45]	; 0xffffffd3
   1fb98:	ldr	r1, [fp, #8]
   1fb9c:	ldrb	r2, [r1]
   1fba0:	add	r0, r2, r0
   1fba4:	strb	r0, [r1]
   1fba8:	ldr	r0, [sp, #40]	; 0x28
   1fbac:	cmp	r0, #0
   1fbb0:	bne	1fa0c <flatcc_json_parser_union_type@@Base+0x3f0>
   1fbb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1fbb8:	str	r0, [fp, #-20]	; 0xffffffec
   1fbbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fbc0:	sub	sp, fp, #16
   1fbc4:	pop	{r4, r5, r6, sl, fp, pc}

0001fbc8 <flatcc_json_parser_union_vector@@Base>:
   1fbc8:	push	{r4, sl, fp, lr}
   1fbcc:	add	fp, sp, #8
   1fbd0:	sub	sp, sp, #56	; 0x38
   1fbd4:	ldr	ip, [fp, #16]
   1fbd8:	ldr	lr, [fp, #12]
   1fbdc:	ldr	r4, [fp, #8]
   1fbe0:	str	r0, [fp, #-16]
   1fbe4:	str	r1, [fp, #-20]	; 0xffffffec
   1fbe8:	str	r2, [fp, #-24]	; 0xffffffe8
   1fbec:	str	r3, [fp, #-28]	; 0xffffffe4
   1fbf0:	strh	r4, [fp, #-30]	; 0xffffffe2
   1fbf4:	ldr	r0, [fp, #-16]
   1fbf8:	ldr	r0, [r0]
   1fbfc:	ldr	r1, [fp, #12]
   1fc00:	str	ip, [sp, #20]
   1fc04:	str	lr, [sp, #16]
   1fc08:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1fc0c:	str	r0, [sp, #28]
   1fc10:	ldr	r0, [sp, #28]
   1fc14:	add	r0, r0, #8
   1fc18:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fc1c:	movw	r2, #24
   1fc20:	mul	r1, r1, r2
   1fc24:	add	r0, r0, r1
   1fc28:	str	r0, [sp, #24]
   1fc2c:	ldr	r0, [sp, #24]
   1fc30:	ldr	r0, [r0]
   1fc34:	movw	r1, #0
   1fc38:	cmp	r0, r1
   1fc3c:	beq	1fc5c <flatcc_json_parser_union_vector@@Base+0x94>
   1fc40:	ldr	r0, [fp, #-16]
   1fc44:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fc48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fc4c:	movw	r3, #28
   1fc50:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1fc54:	str	r0, [fp, #-12]
   1fc58:	b	1fd14 <flatcc_json_parser_union_vector@@Base+0x14c>
   1fc5c:	ldr	r0, [sp, #24]
   1fc60:	ldrsb	r0, [r0, #12]
   1fc64:	cmp	r0, #0
   1fc68:	bne	1fcbc <flatcc_json_parser_union_vector@@Base+0xf4>
   1fc6c:	ldr	r0, [sp, #28]
   1fc70:	ldr	r1, [r0, #4]
   1fc74:	add	r1, r1, #1
   1fc78:	str	r1, [r0, #4]
   1fc7c:	ldr	r0, [fp, #-16]
   1fc80:	ldr	r0, [r0, #16]
   1fc84:	ldr	r1, [sp, #24]
   1fc88:	str	r0, [r1, #8]
   1fc8c:	ldr	r0, [fp, #-16]
   1fc90:	ldr	r0, [r0, #4]
   1fc94:	ldr	r1, [sp, #24]
   1fc98:	str	r0, [r1, #4]
   1fc9c:	ldr	r0, [fp, #-16]
   1fca0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fca4:	ldr	r2, [sp, #24]
   1fca8:	str	r1, [r2]
   1fcac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fcb0:	bl	1d424 <flatcc_json_parser_generic_json@@Base>
   1fcb4:	str	r0, [fp, #-20]	; 0xffffffec
   1fcb8:	b	1fd0c <flatcc_json_parser_union_vector@@Base+0x144>
   1fcbc:	ldr	r0, [sp, #28]
   1fcc0:	ldr	r1, [r0, #4]
   1fcc4:	mvn	r2, #0
   1fcc8:	add	r1, r1, r2
   1fccc:	str	r1, [r0, #4]
   1fcd0:	ldr	r0, [fp, #-16]
   1fcd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fcd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fcdc:	ldr	r3, [sp, #24]
   1fce0:	ldr	r3, [r3, #20]
   1fce4:	ldr	ip, [sp, #24]
   1fce8:	ldr	ip, [ip, #16]
   1fcec:	ldrh	lr, [fp, #-30]	; 0xffffffe2
   1fcf0:	ldr	r4, [fp, #16]
   1fcf4:	str	ip, [sp]
   1fcf8:	uxth	ip, lr
   1fcfc:	str	ip, [sp, #4]
   1fd00:	str	r4, [sp, #8]
   1fd04:	bl	1fd20 <flatcc_json_parser_union_vector@@Base+0x158>
   1fd08:	str	r0, [fp, #-20]	; 0xffffffec
   1fd0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fd10:	str	r0, [fp, #-12]
   1fd14:	ldr	r0, [fp, #-12]
   1fd18:	sub	sp, fp, #8
   1fd1c:	pop	{r4, sl, fp, pc}
   1fd20:	push	{r4, sl, fp, lr}
   1fd24:	add	fp, sp, #8
   1fd28:	sub	sp, sp, #64	; 0x40
   1fd2c:	ldr	ip, [fp, #16]
   1fd30:	ldr	lr, [fp, #12]
   1fd34:	ldr	r4, [fp, #8]
   1fd38:	str	r0, [fp, #-16]
   1fd3c:	str	r1, [fp, #-20]	; 0xffffffec
   1fd40:	str	r2, [fp, #-24]	; 0xffffffe8
   1fd44:	str	r3, [fp, #-28]	; 0xffffffe4
   1fd48:	strh	lr, [fp, #-30]	; 0xffffffe2
   1fd4c:	movw	r0, #0
   1fd50:	str	r0, [sp, #36]	; 0x24
   1fd54:	ldr	r0, [fp, #-16]
   1fd58:	ldr	r0, [r0]
   1fd5c:	str	ip, [sp, #16]
   1fd60:	str	r4, [sp, #12]
   1fd64:	bl	16e5c <flatcc_builder_start_offset_vector@@Base>
   1fd68:	cmp	r0, #0
   1fd6c:	beq	1fd74 <flatcc_json_parser_union_vector@@Base+0x1ac>
   1fd70:	b	1ff34 <flatcc_json_parser_union_vector@@Base+0x36c>
   1fd74:	ldr	r0, [fp, #-16]
   1fd78:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fd7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fd80:	add	r3, sp, #24
   1fd84:	bl	203e8 <flatcc_json_parser_union_type_vector@@Base+0x490>
   1fd88:	str	r0, [fp, #-20]	; 0xffffffec
   1fd8c:	movw	r0, #0
   1fd90:	str	r0, [sp, #20]
   1fd94:	ldr	r0, [sp, #24]
   1fd98:	cmp	r0, #0
   1fd9c:	beq	1fe98 <flatcc_json_parser_union_vector@@Base+0x2d0>
   1fda0:	ldr	r0, [sp, #20]
   1fda4:	ldr	r1, [fp, #8]
   1fda8:	cmp	r0, r1
   1fdac:	bne	1fdcc <flatcc_json_parser_union_vector@@Base+0x204>
   1fdb0:	ldr	r0, [fp, #-16]
   1fdb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fdb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fdbc:	movw	r3, #30
   1fdc0:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1fdc4:	str	r0, [fp, #-12]
   1fdc8:	b	1ff4c <flatcc_json_parser_union_vector@@Base+0x384>
   1fdcc:	ldr	r0, [fp, #-16]
   1fdd0:	ldr	r0, [r0]
   1fdd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fdd8:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1fddc:	str	r0, [sp, #28]
   1fde0:	ldr	r0, [fp, #16]
   1fde4:	ldr	r1, [fp, #-16]
   1fde8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1fdec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fdf0:	ldr	ip, [sp, #28]
   1fdf4:	ldr	lr, [sp, #20]
   1fdf8:	add	ip, ip, lr
   1fdfc:	str	r0, [sp, #8]
   1fe00:	mov	r0, r1
   1fe04:	mov	r1, r2
   1fe08:	mov	r2, r3
   1fe0c:	ldrb	r3, [ip]
   1fe10:	add	ip, sp, #36	; 0x24
   1fe14:	str	ip, [sp]
   1fe18:	ldr	ip, [sp, #8]
   1fe1c:	blx	ip
   1fe20:	str	r0, [fp, #-20]	; 0xffffffec
   1fe24:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fe28:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fe2c:	cmp	r0, r1
   1fe30:	bne	1fe40 <flatcc_json_parser_union_vector@@Base+0x278>
   1fe34:	ldr	r0, [fp, #-20]	; 0xffffffec
   1fe38:	str	r0, [fp, #-12]
   1fe3c:	b	1ff4c <flatcc_json_parser_union_vector@@Base+0x384>
   1fe40:	ldr	r0, [fp, #-16]
   1fe44:	ldr	r0, [r0]
   1fe48:	movw	r1, #1
   1fe4c:	bl	165f0 <flatcc_builder_extend_offset_vector@@Base>
   1fe50:	str	r0, [sp, #32]
   1fe54:	movw	r1, #0
   1fe58:	cmp	r0, r1
   1fe5c:	bne	1fe64 <flatcc_json_parser_union_vector@@Base+0x29c>
   1fe60:	b	1ff34 <flatcc_json_parser_union_vector@@Base+0x36c>
   1fe64:	ldr	r0, [sp, #36]	; 0x24
   1fe68:	ldr	r1, [sp, #32]
   1fe6c:	str	r0, [r1]
   1fe70:	ldr	r0, [fp, #-16]
   1fe74:	ldr	r1, [fp, #-20]	; 0xffffffec
   1fe78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fe7c:	add	r3, sp, #24
   1fe80:	bl	1e404 <flatcc_json_parser_float@@Base+0x824>
   1fe84:	str	r0, [fp, #-20]	; 0xffffffec
   1fe88:	ldr	r0, [sp, #20]
   1fe8c:	add	r0, r0, #1
   1fe90:	str	r0, [sp, #20]
   1fe94:	b	1fd94 <flatcc_json_parser_union_vector@@Base+0x1cc>
   1fe98:	ldr	r0, [sp, #20]
   1fe9c:	ldr	r1, [fp, #8]
   1fea0:	cmp	r0, r1
   1fea4:	beq	1fec4 <flatcc_json_parser_union_vector@@Base+0x2fc>
   1fea8:	ldr	r0, [fp, #-16]
   1feac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1feb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1feb4:	movw	r3, #30
   1feb8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1febc:	str	r0, [fp, #-12]
   1fec0:	b	1ff4c <flatcc_json_parser_union_vector@@Base+0x384>
   1fec4:	ldr	r0, [fp, #-16]
   1fec8:	ldr	r0, [r0]
   1fecc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fed0:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1fed4:	str	r0, [sp, #28]
   1fed8:	ldr	r0, [fp, #-16]
   1fedc:	ldr	r0, [r0]
   1fee0:	ldr	r1, [sp, #28]
   1fee4:	bl	18690 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1fee8:	str	r0, [sp, #36]	; 0x24
   1feec:	cmp	r0, #0
   1fef0:	bne	1fef8 <flatcc_json_parser_union_vector@@Base+0x330>
   1fef4:	b	1ff34 <flatcc_json_parser_union_vector@@Base+0x36c>
   1fef8:	ldr	r0, [fp, #-16]
   1fefc:	ldr	r0, [r0]
   1ff00:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1ff04:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   1ff08:	str	r0, [sp, #32]
   1ff0c:	movw	r1, #0
   1ff10:	cmp	r0, r1
   1ff14:	bne	1ff1c <flatcc_json_parser_union_vector@@Base+0x354>
   1ff18:	b	1ff34 <flatcc_json_parser_union_vector@@Base+0x36c>
   1ff1c:	ldr	r0, [sp, #36]	; 0x24
   1ff20:	ldr	r1, [sp, #32]
   1ff24:	str	r0, [r1]
   1ff28:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ff2c:	str	r0, [fp, #-12]
   1ff30:	b	1ff4c <flatcc_json_parser_union_vector@@Base+0x384>
   1ff34:	ldr	r0, [fp, #-16]
   1ff38:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ff3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ff40:	movw	r3, #33	; 0x21
   1ff44:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1ff48:	str	r0, [fp, #-12]
   1ff4c:	ldr	r0, [fp, #-12]
   1ff50:	sub	sp, fp, #8
   1ff54:	pop	{r4, sl, fp, pc}

0001ff58 <flatcc_json_parser_union_type_vector@@Base>:
   1ff58:	push	{r4, r5, r6, sl, fp, lr}
   1ff5c:	add	fp, sp, #16
   1ff60:	sub	sp, sp, #128	; 0x80
   1ff64:	ldr	ip, [fp, #24]
   1ff68:	ldr	lr, [fp, #20]
   1ff6c:	ldr	r4, [fp, #16]
   1ff70:	ldr	r5, [fp, #12]
   1ff74:	ldr	r6, [fp, #8]
   1ff78:	str	r0, [fp, #-24]	; 0xffffffe8
   1ff7c:	str	r1, [fp, #-28]	; 0xffffffe4
   1ff80:	str	r2, [fp, #-32]	; 0xffffffe0
   1ff84:	str	r3, [fp, #-36]	; 0xffffffdc
   1ff88:	strh	r6, [fp, #-38]	; 0xffffffda
   1ff8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ff90:	ldr	r0, [r0]
   1ff94:	ldr	r1, [fp, #12]
   1ff98:	str	ip, [sp, #44]	; 0x2c
   1ff9c:	str	lr, [sp, #40]	; 0x28
   1ffa0:	str	r4, [sp, #36]	; 0x24
   1ffa4:	str	r5, [sp, #32]
   1ffa8:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   1ffac:	str	r0, [fp, #-44]	; 0xffffffd4
   1ffb0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ffb4:	add	r0, r0, #8
   1ffb8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ffbc:	movw	r2, #24
   1ffc0:	mul	r1, r1, r2
   1ffc4:	add	r0, r0, r1
   1ffc8:	str	r0, [fp, #-48]	; 0xffffffd0
   1ffcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ffd0:	ldrsb	r0, [r0, #12]
   1ffd4:	cmp	r0, #0
   1ffd8:	beq	1fff8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1ffdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ffe0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ffe4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ffe8:	movw	r3, #28
   1ffec:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   1fff0:	str	r0, [fp, #-20]	; 0xffffffec
   1fff4:	b	203d0 <flatcc_json_parser_union_type_vector@@Base+0x478>
   1fff8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fffc:	movw	r1, #1
   20000:	strb	r1, [r0, #12]
   20004:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20008:	ldr	r0, [r0]
   2000c:	movw	r1, #1
   20010:	movw	r2, #1
   20014:	uxth	r2, r2
   20018:	mvn	r3, #0
   2001c:	bl	16d7c <flatcc_builder_start_vector@@Base>
   20020:	cmp	r0, #0
   20024:	beq	2002c <flatcc_json_parser_union_type_vector@@Base+0xd4>
   20028:	b	203b8 <flatcc_json_parser_union_type_vector@@Base+0x460>
   2002c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20030:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20034:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20038:	sub	r3, fp, #64	; 0x40
   2003c:	bl	203e8 <flatcc_json_parser_union_type_vector@@Base+0x490>
   20040:	str	r0, [fp, #-28]	; 0xffffffe4
   20044:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20048:	cmp	r0, #0
   2004c:	beq	2016c <flatcc_json_parser_union_type_vector@@Base+0x214>
   20050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20054:	ldr	r0, [r0]
   20058:	movw	r1, #1
   2005c:	bl	16280 <flatcc_builder_extend_vector@@Base>
   20060:	str	r0, [sp, #72]	; 0x48
   20064:	movw	r1, #0
   20068:	cmp	r0, r1
   2006c:	bne	20074 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   20070:	b	203b8 <flatcc_json_parser_union_type_vector@@Base+0x460>
   20074:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20078:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2007c:	str	r1, [fp, #-52]	; 0xffffffcc
   20080:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20084:	sub	r3, fp, #65	; 0x41
   20088:	bl	1f8c0 <flatcc_json_parser_union_type@@Base+0x2a4>
   2008c:	str	r0, [fp, #-28]	; 0xffffffe4
   20090:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20094:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20098:	cmp	r0, r1
   2009c:	bne	200ec <flatcc_json_parser_union_type_vector@@Base+0x194>
   200a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   200a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   200a8:	str	r1, [fp, #-52]	; 0xffffffcc
   200ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   200b0:	ldr	r3, [fp, #16]
   200b4:	sub	ip, fp, #65	; 0x41
   200b8:	str	ip, [sp]
   200bc:	bl	1f99c <flatcc_json_parser_union_type@@Base+0x380>
   200c0:	str	r0, [fp, #-28]	; 0xffffffe4
   200c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   200c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   200cc:	cmp	r0, r1
   200d0:	beq	200e4 <flatcc_json_parser_union_type_vector@@Base+0x18c>
   200d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   200d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   200dc:	cmp	r0, r1
   200e0:	bne	200e8 <flatcc_json_parser_union_type_vector@@Base+0x190>
   200e4:	b	203b8 <flatcc_json_parser_union_type_vector@@Base+0x460>
   200e8:	b	200ec <flatcc_json_parser_union_type_vector@@Base+0x194>
   200ec:	ldr	r0, [fp, #24]
   200f0:	ldrb	r1, [fp, #-65]	; 0xffffffbf
   200f4:	str	r0, [sp, #28]
   200f8:	mov	r0, r1
   200fc:	ldr	r1, [sp, #28]
   20100:	blx	r1
   20104:	cmp	r0, #0
   20108:	bne	20144 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   2010c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20110:	ldr	r0, [r0, #8]
   20114:	and	r0, r0, #1
   20118:	cmp	r0, #0
   2011c:	bne	2013c <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   20120:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20124:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20128:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2012c:	movw	r3, #15
   20130:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   20134:	str	r0, [fp, #-20]	; 0xffffffec
   20138:	b	203d0 <flatcc_json_parser_union_type_vector@@Base+0x478>
   2013c:	movw	r0, #0
   20140:	strb	r0, [fp, #-65]	; 0xffffffbf
   20144:	ldr	r0, [sp, #72]	; 0x48
   20148:	ldrb	r1, [fp, #-65]	; 0xffffffbf
   2014c:	bl	204cc <flatcc_json_parser_union_type_vector@@Base+0x574>
   20150:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20154:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20158:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2015c:	sub	r3, fp, #64	; 0x40
   20160:	bl	1e404 <flatcc_json_parser_float@@Base+0x824>
   20164:	str	r0, [fp, #-28]	; 0xffffffe4
   20168:	b	20044 <flatcc_json_parser_union_type_vector@@Base+0xec>
   2016c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20170:	ldr	r0, [r0]
   20174:	bl	18330 <flatcc_builder_vector_count@@Base>
   20178:	str	r0, [sp, #48]	; 0x30
   2017c:	ldr	r0, [sp, #48]	; 0x30
   20180:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20184:	str	r0, [r1, #16]
   20188:	ldr	r0, [sp, #48]	; 0x30
   2018c:	mov	r1, r0
   20190:	str	r0, [sp, #56]	; 0x38
   20194:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20198:	ldr	r0, [r0]
   2019c:	ldr	r2, [sp, #56]	; 0x38
   201a0:	str	r1, [sp, #24]
   201a4:	mov	r1, r2
   201a8:	bl	14ebc <flatcc_builder_enter_user_frame@@Base>
   201ac:	str	r0, [sp, #52]	; 0x34
   201b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   201b4:	ldr	r0, [r0]
   201b8:	ldr	r1, [sp, #52]	; 0x34
   201bc:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   201c0:	str	r0, [sp, #60]	; 0x3c
   201c4:	ldr	r0, [sp, #60]	; 0x3c
   201c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   201cc:	ldr	r1, [r1]
   201d0:	str	r0, [sp, #20]
   201d4:	mov	r0, r1
   201d8:	bl	1834c <flatcc_builder_vector_edit@@Base>
   201dc:	ldr	r2, [sp, #56]	; 0x38
   201e0:	ldr	r1, [sp, #20]
   201e4:	str	r0, [sp, #16]
   201e8:	mov	r0, r1
   201ec:	ldr	r1, [sp, #16]
   201f0:	bl	128d8 <memcpy@plt>
   201f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   201f8:	ldr	r0, [r0]
   201fc:	bl	1825c <flatcc_builder_end_vector@@Base>
   20200:	str	r0, [sp, #68]	; 0x44
   20204:	cmp	r0, #0
   20208:	bne	20210 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
   2020c:	b	203b8 <flatcc_json_parser_union_type_vector@@Base+0x460>
   20210:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20214:	ldr	r0, [r0]
   20218:	ldrh	r1, [fp, #-38]	; 0xffffffda
   2021c:	sub	r1, r1, #1
   20220:	bl	18964 <flatcc_builder_table_add_offset@@Base>
   20224:	str	r0, [sp, #64]	; 0x40
   20228:	movw	r1, #0
   2022c:	cmp	r0, r1
   20230:	bne	20238 <flatcc_json_parser_union_type_vector@@Base+0x2e0>
   20234:	b	203b8 <flatcc_json_parser_union_type_vector@@Base+0x460>
   20238:	ldr	r0, [sp, #68]	; 0x44
   2023c:	ldr	r1, [sp, #64]	; 0x40
   20240:	str	r0, [r1]
   20244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20248:	ldr	r0, [r0]
   2024c:	ldr	r1, [fp, #12]
   20250:	bl	150bc <flatcc_builder_get_user_frame_ptr@@Base>
   20254:	str	r0, [fp, #-44]	; 0xffffffd4
   20258:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2025c:	add	r0, r0, #8
   20260:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20264:	movw	r2, #24
   20268:	mul	r1, r1, r2
   2026c:	add	r0, r0, r1
   20270:	str	r0, [fp, #-48]	; 0xffffffd0
   20274:	ldr	r0, [sp, #52]	; 0x34
   20278:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2027c:	str	r0, [r1, #20]
   20280:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20284:	ldr	r0, [r0]
   20288:	movw	r1, #0
   2028c:	cmp	r0, r1
   20290:	bne	202b0 <flatcc_json_parser_union_type_vector@@Base+0x358>
   20294:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20298:	ldr	r1, [r0, #4]
   2029c:	add	r1, r1, #1
   202a0:	str	r1, [r0, #4]
   202a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   202a8:	str	r0, [fp, #-20]	; 0xffffffec
   202ac:	b	203d0 <flatcc_json_parser_union_type_vector@@Base+0x478>
   202b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   202b4:	ldr	r0, [r0, #4]
   202b8:	cmp	r0, #0
   202bc:	beq	202c4 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   202c0:	b	202e4 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   202c4:	ldr	r0, [pc, #272]	; 203dc <flatcc_json_parser_union_type_vector@@Base+0x484>
   202c8:	add	r0, pc, r0
   202cc:	ldr	r1, [pc, #268]	; 203e0 <flatcc_json_parser_union_type_vector@@Base+0x488>
   202d0:	add	r1, pc, r1
   202d4:	ldr	r2, [pc, #264]	; 203e4 <flatcc_json_parser_union_type_vector@@Base+0x48c>
   202d8:	add	r3, pc, r2
   202dc:	movw	r2, #1122	; 0x462
   202e0:	bl	1298c <__assert_fail@plt>
   202e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   202e8:	ldr	r1, [r0, #4]
   202ec:	mvn	r2, #0
   202f0:	add	r1, r1, r2
   202f4:	str	r1, [r0, #4]
   202f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   202fc:	ldr	r0, [r0, #16]
   20300:	str	r0, [fp, #-56]	; 0xffffffc8
   20304:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20308:	ldr	r0, [r0, #4]
   2030c:	str	r0, [fp, #-60]	; 0xffffffc4
   20310:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20314:	ldr	r0, [r0, #8]
   20318:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2031c:	str	r0, [r1, #16]
   20320:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20324:	ldr	r0, [r0, #4]
   20328:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2032c:	str	r0, [r1, #4]
   20330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20334:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20338:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2033c:	ldr	r2, [r2]
   20340:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20344:	ldr	ip, [sp, #52]	; 0x34
   20348:	ldr	lr, [sp, #48]	; 0x30
   2034c:	ldrh	r4, [fp, #-38]	; 0xffffffda
   20350:	ldr	r5, [fp, #20]
   20354:	str	r0, [sp, #12]
   20358:	mov	r0, r1
   2035c:	mov	r1, r2
   20360:	mov	r2, r3
   20364:	mov	r3, ip
   20368:	str	lr, [sp]
   2036c:	uxth	ip, r4
   20370:	str	ip, [sp, #4]
   20374:	str	r5, [sp, #8]
   20378:	bl	1fd20 <flatcc_json_parser_union_vector@@Base+0x158>
   2037c:	ldr	r1, [sp, #12]
   20380:	cmp	r1, r0
   20384:	bne	20394 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   20388:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2038c:	str	r0, [fp, #-20]	; 0xffffffec
   20390:	b	203d0 <flatcc_json_parser_union_type_vector@@Base+0x478>
   20394:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20398:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2039c:	str	r0, [r1, #16]
   203a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   203a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   203a8:	str	r0, [r1, #4]
   203ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   203b0:	str	r0, [fp, #-20]	; 0xffffffec
   203b4:	b	203d0 <flatcc_json_parser_union_type_vector@@Base+0x478>
   203b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   203bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   203c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   203c4:	movw	r3, #33	; 0x21
   203c8:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   203cc:	str	r0, [fp, #-20]	; 0xffffffec
   203d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   203d4:	sub	sp, fp, #16
   203d8:	pop	{r4, r5, r6, sl, fp, pc}
   203dc:	andeq	r3, r0, r8, asr r6
   203e0:	andeq	r3, r0, pc, asr r6
   203e4:	andeq	r3, r0, r4, lsl #15
   203e8:	push	{fp, lr}
   203ec:	mov	fp, sp
   203f0:	sub	sp, sp, #24
   203f4:	str	r0, [fp, #-8]
   203f8:	str	r1, [sp, #12]
   203fc:	str	r2, [sp, #8]
   20400:	str	r3, [sp, #4]
   20404:	ldr	r0, [sp, #12]
   20408:	ldr	r1, [sp, #8]
   2040c:	cmp	r0, r1
   20410:	beq	20424 <flatcc_json_parser_union_type_vector@@Base+0x4cc>
   20414:	ldr	r0, [sp, #12]
   20418:	ldrb	r0, [r0]
   2041c:	cmp	r0, #91	; 0x5b
   20420:	beq	2044c <flatcc_json_parser_union_type_vector@@Base+0x4f4>
   20424:	ldr	r0, [sp, #4]
   20428:	movw	r1, #0
   2042c:	str	r1, [r0]
   20430:	ldr	r0, [fp, #-8]
   20434:	ldr	r1, [sp, #12]
   20438:	ldr	r2, [sp, #8]
   2043c:	movw	r3, #22
   20440:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   20444:	str	r0, [fp, #-4]
   20448:	b	204c0 <flatcc_json_parser_union_type_vector@@Base+0x568>
   2044c:	ldr	r0, [fp, #-8]
   20450:	ldr	r1, [sp, #12]
   20454:	add	r1, r1, #1
   20458:	ldr	r2, [sp, #8]
   2045c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   20460:	str	r0, [sp, #12]
   20464:	ldr	r0, [sp, #12]
   20468:	ldr	r1, [sp, #8]
   2046c:	cmp	r0, r1
   20470:	beq	204ac <flatcc_json_parser_union_type_vector@@Base+0x554>
   20474:	ldr	r0, [sp, #12]
   20478:	ldrb	r0, [r0]
   2047c:	cmp	r0, #93	; 0x5d
   20480:	bne	204ac <flatcc_json_parser_union_type_vector@@Base+0x554>
   20484:	ldr	r0, [sp, #4]
   20488:	movw	r1, #0
   2048c:	str	r1, [r0]
   20490:	ldr	r0, [fp, #-8]
   20494:	ldr	r1, [sp, #12]
   20498:	add	r1, r1, #1
   2049c:	ldr	r2, [sp, #8]
   204a0:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   204a4:	str	r0, [fp, #-4]
   204a8:	b	204c0 <flatcc_json_parser_union_type_vector@@Base+0x568>
   204ac:	ldr	r0, [sp, #4]
   204b0:	movw	r1, #1
   204b4:	str	r1, [r0]
   204b8:	ldr	r0, [sp, #12]
   204bc:	str	r0, [fp, #-4]
   204c0:	ldr	r0, [fp, #-4]
   204c4:	mov	sp, fp
   204c8:	pop	{fp, pc}
   204cc:	push	{fp, lr}
   204d0:	mov	fp, sp
   204d4:	sub	sp, sp, #8
   204d8:	str	r0, [sp, #4]
   204dc:	strb	r1, [sp, #3]
   204e0:	ldrb	r0, [sp, #3]
   204e4:	bl	21a20 <flatcc_json_parser_struct_as_root@@Base+0x1334>
   204e8:	ldr	r1, [sp, #4]
   204ec:	strb	r0, [r1]
   204f0:	mov	sp, fp
   204f4:	pop	{fp, pc}

000204f8 <flatcc_json_parser_table_as_root@@Base>:
   204f8:	push	{r4, sl, fp, lr}
   204fc:	add	fp, sp, #8
   20500:	sub	sp, sp, #88	; 0x58
   20504:	ldr	ip, [fp, #16]
   20508:	ldr	lr, [fp, #12]
   2050c:	ldr	r4, [fp, #8]
   20510:	str	r0, [fp, #-16]
   20514:	str	r1, [fp, #-20]	; 0xffffffec
   20518:	str	r2, [fp, #-24]	; 0xffffffe8
   2051c:	str	r3, [fp, #-28]	; 0xffffffe4
   20520:	ldr	r0, [fp, #8]
   20524:	and	r0, r0, #4
   20528:	cmp	r0, #0
   2052c:	movw	r0, #0
   20530:	movne	r0, #1
   20534:	tst	r0, #1
   20538:	movw	r0, #2
   2053c:	moveq	r0, #0
   20540:	str	r0, [sp, #16]
   20544:	ldr	r0, [fp, #-20]	; 0xffffffec
   20548:	movw	r1, #0
   2054c:	cmp	r0, r1
   20550:	beq	20560 <flatcc_json_parser_table_as_root@@Base+0x68>
   20554:	ldr	r0, [fp, #-20]	; 0xffffffec
   20558:	str	r0, [sp, #12]
   2055c:	b	2056c <flatcc_json_parser_table_as_root@@Base+0x74>
   20560:	add	r0, sp, #24
   20564:	str	r0, [sp, #12]
   20568:	b	2056c <flatcc_json_parser_table_as_root@@Base+0x74>
   2056c:	ldr	r0, [sp, #12]
   20570:	str	r0, [fp, #-20]	; 0xffffffec
   20574:	ldr	r0, [fp, #-20]	; 0xffffffec
   20578:	ldr	r1, [fp, #-16]
   2057c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20584:	ldr	ip, [fp, #-28]	; 0xffffffe4
   20588:	add	r3, r3, ip
   2058c:	ldr	ip, [fp, #8]
   20590:	str	ip, [sp]
   20594:	bl	20658 <flatcc_json_parser_table_as_root@@Base+0x160>
   20598:	ldr	r0, [fp, #-16]
   2059c:	ldr	r1, [fp, #12]
   205a0:	ldr	r3, [sp, #16]
   205a4:	movw	r2, #0
   205a8:	uxth	r2, r2
   205ac:	bl	15ac8 <flatcc_builder_start_buffer@@Base>
   205b0:	cmp	r0, #0
   205b4:	beq	205c4 <flatcc_json_parser_table_as_root@@Base+0xcc>
   205b8:	mvn	r0, #0
   205bc:	str	r0, [fp, #-12]
   205c0:	b	2064c <flatcc_json_parser_table_as_root@@Base+0x154>
   205c4:	ldr	r0, [fp, #16]
   205c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   205cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   205d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   205d4:	ldr	ip, [fp, #-28]	; 0xffffffe4
   205d8:	add	r3, r3, ip
   205dc:	str	r0, [sp, #8]
   205e0:	mov	r0, r1
   205e4:	mov	r1, r2
   205e8:	mov	r2, r3
   205ec:	add	r3, sp, #20
   205f0:	ldr	ip, [sp, #8]
   205f4:	blx	ip
   205f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   205fc:	ldr	r1, [r1, #24]
   20600:	cmp	r1, #0
   20604:	beq	20618 <flatcc_json_parser_table_as_root@@Base+0x120>
   20608:	ldr	r0, [fp, #-20]	; 0xffffffec
   2060c:	ldr	r0, [r0, #24]
   20610:	str	r0, [fp, #-12]
   20614:	b	2064c <flatcc_json_parser_table_as_root@@Base+0x154>
   20618:	ldr	r0, [fp, #-16]
   2061c:	ldr	r1, [sp, #20]
   20620:	bl	15e0c <flatcc_builder_end_buffer@@Base>
   20624:	cmp	r0, #0
   20628:	bne	20638 <flatcc_json_parser_table_as_root@@Base+0x140>
   2062c:	mvn	r0, #0
   20630:	str	r0, [fp, #-12]
   20634:	b	2064c <flatcc_json_parser_table_as_root@@Base+0x154>
   20638:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2063c:	ldr	r1, [fp, #-20]	; 0xffffffec
   20640:	str	r0, [r1, #40]	; 0x28
   20644:	movw	r0, #0
   20648:	str	r0, [fp, #-12]
   2064c:	ldr	r0, [fp, #-12]
   20650:	sub	sp, fp, #8
   20654:	pop	{r4, sl, fp, pc}
   20658:	push	{fp, lr}
   2065c:	mov	fp, sp
   20660:	sub	sp, sp, #24
   20664:	ldr	ip, [fp, #8]
   20668:	str	r0, [fp, #-4]
   2066c:	str	r1, [fp, #-8]
   20670:	str	r2, [sp, #12]
   20674:	str	r3, [sp, #8]
   20678:	ldr	r0, [fp, #-4]
   2067c:	movw	r1, #0
   20680:	and	r1, r1, #255	; 0xff
   20684:	movw	r2, #44	; 0x2c
   20688:	str	ip, [sp, #4]
   2068c:	bl	1295c <memset@plt>
   20690:	ldr	r0, [fp, #-8]
   20694:	ldr	r1, [fp, #-4]
   20698:	str	r0, [r1]
   2069c:	ldr	r0, [sp, #12]
   206a0:	ldr	r1, [fp, #-4]
   206a4:	str	r0, [r1, #4]
   206a8:	ldr	r0, [fp, #-4]
   206ac:	movw	r1, #1
   206b0:	str	r1, [r0, #16]
   206b4:	ldr	r0, [fp, #8]
   206b8:	ldr	r1, [fp, #-4]
   206bc:	str	r0, [r1, #8]
   206c0:	ldr	r0, [sp, #12]
   206c4:	ldr	r1, [fp, #-4]
   206c8:	str	r0, [r1, #28]
   206cc:	ldr	r0, [sp, #8]
   206d0:	ldr	r1, [fp, #-4]
   206d4:	str	r0, [r1, #32]
   206d8:	ldr	r0, [sp, #12]
   206dc:	ldr	r1, [fp, #-4]
   206e0:	str	r0, [r1, #36]	; 0x24
   206e4:	mov	sp, fp
   206e8:	pop	{fp, pc}

000206ec <flatcc_json_parser_struct_as_root@@Base>:
   206ec:	push	{r4, sl, fp, lr}
   206f0:	add	fp, sp, #8
   206f4:	sub	sp, sp, #88	; 0x58
   206f8:	ldr	ip, [fp, #16]
   206fc:	ldr	lr, [fp, #12]
   20700:	ldr	r4, [fp, #8]
   20704:	str	r0, [fp, #-16]
   20708:	str	r1, [fp, #-20]	; 0xffffffec
   2070c:	str	r2, [fp, #-24]	; 0xffffffe8
   20710:	str	r3, [fp, #-28]	; 0xffffffe4
   20714:	ldr	r0, [fp, #8]
   20718:	and	r0, r0, #4
   2071c:	cmp	r0, #0
   20720:	movw	r0, #0
   20724:	movne	r0, #1
   20728:	tst	r0, #1
   2072c:	movw	r0, #2
   20730:	moveq	r0, #0
   20734:	str	r0, [sp, #16]
   20738:	ldr	r0, [fp, #-20]	; 0xffffffec
   2073c:	movw	r1, #0
   20740:	cmp	r0, r1
   20744:	beq	20754 <flatcc_json_parser_struct_as_root@@Base+0x68>
   20748:	ldr	r0, [fp, #-20]	; 0xffffffec
   2074c:	str	r0, [sp, #12]
   20750:	b	20760 <flatcc_json_parser_struct_as_root@@Base+0x74>
   20754:	add	r0, sp, #24
   20758:	str	r0, [sp, #12]
   2075c:	b	20760 <flatcc_json_parser_struct_as_root@@Base+0x74>
   20760:	ldr	r0, [sp, #12]
   20764:	str	r0, [fp, #-20]	; 0xffffffec
   20768:	ldr	r0, [fp, #-20]	; 0xffffffec
   2076c:	ldr	r1, [fp, #-16]
   20770:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20774:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20778:	ldr	ip, [fp, #-28]	; 0xffffffe4
   2077c:	add	r3, r3, ip
   20780:	ldr	ip, [fp, #8]
   20784:	str	ip, [sp]
   20788:	bl	20658 <flatcc_json_parser_table_as_root@@Base+0x160>
   2078c:	ldr	r0, [fp, #-16]
   20790:	ldr	r1, [fp, #12]
   20794:	ldr	r3, [sp, #16]
   20798:	movw	r2, #0
   2079c:	uxth	r2, r2
   207a0:	bl	15ac8 <flatcc_builder_start_buffer@@Base>
   207a4:	cmp	r0, #0
   207a8:	beq	207b8 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   207ac:	mvn	r0, #0
   207b0:	str	r0, [fp, #-12]
   207b4:	b	20840 <flatcc_json_parser_struct_as_root@@Base+0x154>
   207b8:	ldr	r0, [fp, #16]
   207bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   207c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   207c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   207c8:	ldr	ip, [fp, #-28]	; 0xffffffe4
   207cc:	add	r3, r3, ip
   207d0:	str	r0, [sp, #8]
   207d4:	mov	r0, r1
   207d8:	mov	r1, r2
   207dc:	mov	r2, r3
   207e0:	add	r3, sp, #20
   207e4:	ldr	ip, [sp, #8]
   207e8:	blx	ip
   207ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   207f0:	ldr	r1, [r1, #24]
   207f4:	cmp	r1, #0
   207f8:	beq	2080c <flatcc_json_parser_struct_as_root@@Base+0x120>
   207fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   20800:	ldr	r0, [r0, #24]
   20804:	str	r0, [fp, #-12]
   20808:	b	20840 <flatcc_json_parser_struct_as_root@@Base+0x154>
   2080c:	ldr	r0, [fp, #-16]
   20810:	ldr	r1, [sp, #20]
   20814:	bl	15e0c <flatcc_builder_end_buffer@@Base>
   20818:	cmp	r0, #0
   2081c:	bne	2082c <flatcc_json_parser_struct_as_root@@Base+0x140>
   20820:	mvn	r0, #0
   20824:	str	r0, [fp, #-12]
   20828:	b	20840 <flatcc_json_parser_struct_as_root@@Base+0x154>
   2082c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20830:	ldr	r1, [fp, #-20]	; 0xffffffec
   20834:	str	r0, [r1, #40]	; 0x28
   20838:	movw	r0, #0
   2083c:	str	r0, [fp, #-12]
   20840:	ldr	r0, [fp, #-12]
   20844:	sub	sp, fp, #8
   20848:	pop	{r4, sl, fp, pc}
   2084c:	sub	sp, sp, #16
   20850:	str	r0, [sp, #8]
   20854:	str	r1, [sp, #12]
   20858:	ldr	r0, [sp, #8]
   2085c:	ldr	r1, [sp, #12]
   20860:	str	r1, [sp, #4]
   20864:	str	r0, [sp]
   20868:	vldr	d0, [sp]
   2086c:	add	sp, sp, #16
   20870:	bx	lr
   20874:	nop	{0}
   20878:	push	{r4, r5, r6, r7, fp, lr}
   2087c:	add	fp, sp, #16
   20880:	sub	sp, sp, #136	; 0x88
   20884:	vldr	d16, [pc, #884]	; 20c00 <flatcc_json_parser_struct_as_root@@Base+0x514>
   20888:	str	r0, [fp, #-24]	; 0xffffffe8
   2088c:	str	r1, [fp, #-28]	; 0xffffffe4
   20890:	str	r2, [fp, #-32]	; 0xffffffe0
   20894:	mov	r0, #0
   20898:	str	r0, [fp, #-48]	; 0xffffffd0
   2089c:	str	r0, [fp, #-52]	; 0xffffffcc
   208a0:	str	r0, [fp, #-60]	; 0xffffffc4
   208a4:	str	r0, [fp, #-64]	; 0xffffffc0
   208a8:	movw	r0, #0
   208ac:	str	r0, [fp, #-68]	; 0xffffffbc
   208b0:	str	r0, [fp, #-72]	; 0xffffffb8
   208b4:	str	r0, [sp, #76]	; 0x4c
   208b8:	str	r0, [sp, #72]	; 0x48
   208bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   208c0:	vstr	d16, [r0]
   208c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   208cc:	add	r0, r0, r1
   208d0:	add	r0, r0, #1
   208d4:	str	r0, [fp, #-44]	; 0xffffffd4
   208d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   208dc:	cmp	r0, #1000	; 0x3e8
   208e0:	ble	208f4 <flatcc_json_parser_struct_as_root@@Base+0x208>
   208e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208e8:	add	r0, r0, #1000	; 0x3e8
   208ec:	add	r0, r0, #1
   208f0:	str	r0, [fp, #-44]	; 0xffffffd4
   208f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   208fc:	cmp	r0, r1
   20900:	bne	20910 <flatcc_json_parser_struct_as_root@@Base+0x224>
   20904:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20908:	str	r0, [fp, #-20]	; 0xffffffec
   2090c:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20910:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20914:	str	r0, [fp, #-36]	; 0xffffffdc
   20918:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2091c:	ldrb	r0, [r0]
   20920:	cmp	r0, #45	; 0x2d
   20924:	bne	2095c <flatcc_json_parser_struct_as_root@@Base+0x270>
   20928:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2092c:	add	r0, r0, #1
   20930:	str	r0, [fp, #-24]	; 0xffffffe8
   20934:	movw	r0, #1
   20938:	str	r0, [fp, #-48]	; 0xffffffd0
   2093c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20940:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20944:	cmp	r0, r1
   20948:	bne	20958 <flatcc_json_parser_struct_as_root@@Base+0x26c>
   2094c:	movw	r0, #0
   20950:	str	r0, [fp, #-20]	; 0xffffffec
   20954:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20958:	b	2095c <flatcc_json_parser_struct_as_root@@Base+0x270>
   2095c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20960:	ldrb	r0, [r0]
   20964:	cmp	r0, #48	; 0x30
   20968:	bne	20a30 <flatcc_json_parser_struct_as_root@@Base+0x344>
   2096c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20970:	add	r0, r0, #1
   20974:	str	r0, [fp, #-24]	; 0xffffffe8
   20978:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2097c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20980:	cmp	r0, r1
   20984:	beq	209dc <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   20988:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2098c:	ldrb	r0, [r0]
   20990:	orr	r0, r0, #32
   20994:	cmp	r0, #120	; 0x78
   20998:	bne	209dc <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   2099c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   209a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   209a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   209ac:	bl	211d0 <flatcc_json_parser_struct_as_root@@Base+0xae4>
   209b0:	str	r0, [fp, #-40]	; 0xffffffd8
   209b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   209b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   209bc:	cmp	r0, r1
   209c0:	bne	209d0 <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   209c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   209c8:	str	r0, [fp, #-20]	; 0xffffffec
   209cc:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   209d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   209d4:	str	r0, [fp, #-20]	; 0xffffffec
   209d8:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   209dc:	b	209e0 <flatcc_json_parser_struct_as_root@@Base+0x2f4>
   209e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   209e8:	cmp	r0, r1
   209ec:	movw	r0, #0
   209f0:	str	r0, [sp, #68]	; 0x44
   209f4:	beq	20a10 <flatcc_json_parser_struct_as_root@@Base+0x324>
   209f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209fc:	ldrb	r0, [r0]
   20a00:	cmp	r0, #48	; 0x30
   20a04:	movw	r0, #0
   20a08:	moveq	r0, #1
   20a0c:	str	r0, [sp, #68]	; 0x44
   20a10:	ldr	r0, [sp, #68]	; 0x44
   20a14:	tst	r0, #1
   20a18:	beq	20a2c <flatcc_json_parser_struct_as_root@@Base+0x340>
   20a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a20:	add	r0, r0, #1
   20a24:	str	r0, [fp, #-24]	; 0xffffffe8
   20a28:	b	209e0 <flatcc_json_parser_struct_as_root@@Base+0x2f4>
   20a2c:	b	20a9c <flatcc_json_parser_struct_as_root@@Base+0x3b0>
   20a30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a34:	ldrb	r0, [r0]
   20a38:	cmp	r0, #49	; 0x31
   20a3c:	blt	20a50 <flatcc_json_parser_struct_as_root@@Base+0x364>
   20a40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a44:	ldrb	r0, [r0]
   20a48:	cmp	r0, #57	; 0x39
   20a4c:	ble	20a7c <flatcc_json_parser_struct_as_root@@Base+0x390>
   20a50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20a54:	cmp	r0, #0
   20a58:	beq	20a68 <flatcc_json_parser_struct_as_root@@Base+0x37c>
   20a5c:	movw	r0, #0
   20a60:	str	r0, [sp, #64]	; 0x40
   20a64:	b	20a70 <flatcc_json_parser_struct_as_root@@Base+0x384>
   20a68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20a6c:	str	r0, [sp, #64]	; 0x40
   20a70:	ldr	r0, [sp, #64]	; 0x40
   20a74:	str	r0, [fp, #-20]	; 0xffffffec
   20a78:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20a7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a80:	add	r1, r0, #1
   20a84:	str	r1, [fp, #-24]	; 0xffffffe8
   20a88:	ldrb	r0, [r0]
   20a8c:	sub	r0, r0, #48	; 0x30
   20a90:	asr	r1, r0, #31
   20a94:	str	r0, [fp, #-64]	; 0xffffffc0
   20a98:	str	r1, [fp, #-60]	; 0xffffffc4
   20a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20aa0:	str	r0, [fp, #-40]	; 0xffffffd8
   20aa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20aa8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20aac:	cmp	r0, r1
   20ab0:	movw	r0, #0
   20ab4:	str	r0, [sp, #60]	; 0x3c
   20ab8:	beq	20aec <flatcc_json_parser_struct_as_root@@Base+0x400>
   20abc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ac0:	ldrb	r0, [r0]
   20ac4:	cmp	r0, #48	; 0x30
   20ac8:	movw	r0, #0
   20acc:	str	r0, [sp, #60]	; 0x3c
   20ad0:	blt	20aec <flatcc_json_parser_struct_as_root@@Base+0x400>
   20ad4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ad8:	ldrb	r0, [r0]
   20adc:	cmp	r0, #57	; 0x39
   20ae0:	movw	r0, #0
   20ae4:	movle	r0, #1
   20ae8:	str	r0, [sp, #60]	; 0x3c
   20aec:	ldr	r0, [sp, #60]	; 0x3c
   20af0:	tst	r0, #1
   20af4:	beq	20b98 <flatcc_json_parser_struct_as_root@@Base+0x4ac>
   20af8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20afc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20b00:	movw	r2, #39321	; 0x9999
   20b04:	movt	r2, #39321	; 0x9999
   20b08:	subs	r0, r0, r2
   20b0c:	movw	r2, #39321	; 0x9999
   20b10:	movt	r2, #6553	; 0x1999
   20b14:	sbcs	r1, r1, r2
   20b18:	bcc	20b5c <flatcc_json_parser_struct_as_root@@Base+0x470>
   20b1c:	b	20b20 <flatcc_json_parser_struct_as_root@@Base+0x434>
   20b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b24:	ldrb	r0, [r0]
   20b28:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20b2c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   20b30:	adds	r3, r1, #1
   20b34:	adc	ip, r2, #0
   20b38:	cmp	r0, #52	; 0x34
   20b3c:	movgt	r1, r3
   20b40:	cmp	r0, #52	; 0x34
   20b44:	movgt	r2, ip
   20b48:	str	r1, [fp, #-64]	; 0xffffffc0
   20b4c:	str	r2, [fp, #-60]	; 0xffffffc4
   20b50:	movw	r0, #1
   20b54:	str	r0, [sp, #72]	; 0x48
   20b58:	b	20b98 <flatcc_json_parser_struct_as_root@@Base+0x4ac>
   20b5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20b60:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20b64:	add	r1, r1, r1, lsl #2
   20b68:	lsl	r1, r1, #1
   20b6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20b70:	add	r3, r2, #1
   20b74:	str	r3, [fp, #-24]	; 0xffffffe8
   20b78:	ldrb	r2, [r2]
   20b7c:	mov	r3, #10
   20b80:	umlal	r2, r1, r0, r3
   20b84:	subs	r0, r2, #48	; 0x30
   20b88:	sbc	r1, r1, #0
   20b8c:	str	r0, [fp, #-64]	; 0xffffffc0
   20b90:	str	r1, [fp, #-60]	; 0xffffffc4
   20b94:	b	20aa4 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
   20b98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20b9c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20ba0:	sub	r0, r0, r1
   20ba4:	str	r0, [sp, #76]	; 0x4c
   20ba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20bac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20bb0:	cmp	r0, r1
   20bb4:	movw	r0, #0
   20bb8:	str	r0, [sp, #56]	; 0x38
   20bbc:	beq	20bd8 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   20bc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20bc4:	ldrb	r0, [r0]
   20bc8:	cmp	r0, #48	; 0x30
   20bcc:	movw	r0, #0
   20bd0:	moveq	r0, #1
   20bd4:	str	r0, [sp, #56]	; 0x38
   20bd8:	ldr	r0, [sp, #56]	; 0x38
   20bdc:	tst	r0, #1
   20be0:	beq	20c08 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   20be4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20be8:	add	r0, r0, #1
   20bec:	str	r0, [fp, #-68]	; 0xffffffbc
   20bf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20bf4:	add	r0, r0, #1
   20bf8:	str	r0, [fp, #-24]	; 0xffffffe8
   20bfc:	b	20ba8 <flatcc_json_parser_struct_as_root@@Base+0x4bc>
	...
   20c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20c10:	cmp	r0, r1
   20c14:	beq	20ccc <flatcc_json_parser_struct_as_root@@Base+0x5e0>
   20c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c1c:	ldrb	r0, [r0]
   20c20:	cmp	r0, #49	; 0x31
   20c24:	blt	20ccc <flatcc_json_parser_struct_as_root@@Base+0x5e0>
   20c28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c2c:	ldrb	r0, [r0]
   20c30:	cmp	r0, #57	; 0x39
   20c34:	bgt	20ccc <flatcc_json_parser_struct_as_root@@Base+0x5e0>
   20c38:	movw	r0, #1
   20c3c:	str	r0, [sp, #72]	; 0x48
   20c40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20c44:	add	r0, r0, #1
   20c48:	str	r0, [fp, #-68]	; 0xffffffbc
   20c4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c50:	add	r0, r0, #1
   20c54:	str	r0, [fp, #-24]	; 0xffffffe8
   20c58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20c60:	cmp	r0, r1
   20c64:	movw	r0, #0
   20c68:	str	r0, [sp, #52]	; 0x34
   20c6c:	beq	20ca0 <flatcc_json_parser_struct_as_root@@Base+0x5b4>
   20c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c74:	ldrb	r0, [r0]
   20c78:	cmp	r0, #48	; 0x30
   20c7c:	movw	r0, #0
   20c80:	str	r0, [sp, #52]	; 0x34
   20c84:	blt	20ca0 <flatcc_json_parser_struct_as_root@@Base+0x5b4>
   20c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20c8c:	ldrb	r0, [r0]
   20c90:	cmp	r0, #57	; 0x39
   20c94:	movw	r0, #0
   20c98:	movle	r0, #1
   20c9c:	str	r0, [sp, #52]	; 0x34
   20ca0:	ldr	r0, [sp, #52]	; 0x34
   20ca4:	tst	r0, #1
   20ca8:	beq	20cc8 <flatcc_json_parser_struct_as_root@@Base+0x5dc>
   20cac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20cb0:	add	r0, r0, #1
   20cb4:	str	r0, [fp, #-68]	; 0xffffffbc
   20cb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cbc:	add	r0, r0, #1
   20cc0:	str	r0, [fp, #-24]	; 0xffffffe8
   20cc4:	b	20c58 <flatcc_json_parser_struct_as_root@@Base+0x56c>
   20cc8:	b	20ccc <flatcc_json_parser_struct_as_root@@Base+0x5e0>
   20ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cd0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20cd4:	cmp	r0, r1
   20cd8:	beq	20f60 <flatcc_json_parser_struct_as_root@@Base+0x874>
   20cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ce0:	ldrb	r0, [r0]
   20ce4:	cmp	r0, #46	; 0x2e
   20ce8:	bne	20f60 <flatcc_json_parser_struct_as_root@@Base+0x874>
   20cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cf0:	add	r0, r0, #1
   20cf4:	str	r0, [fp, #-24]	; 0xffffffe8
   20cf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20cfc:	str	r0, [fp, #-40]	; 0xffffffd8
   20d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d04:	ldrb	r0, [r0]
   20d08:	cmp	r0, #48	; 0x30
   20d0c:	blt	20d20 <flatcc_json_parser_struct_as_root@@Base+0x634>
   20d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d14:	ldrb	r0, [r0]
   20d18:	cmp	r0, #57	; 0x39
   20d1c:	ble	20d2c <flatcc_json_parser_struct_as_root@@Base+0x640>
   20d20:	movw	r0, #0
   20d24:	str	r0, [fp, #-20]	; 0xffffffec
   20d28:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20d2c:	b	20d30 <flatcc_json_parser_struct_as_root@@Base+0x644>
   20d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d34:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20d38:	cmp	r0, r1
   20d3c:	movw	r0, #0
   20d40:	str	r0, [sp, #48]	; 0x30
   20d44:	beq	20d78 <flatcc_json_parser_struct_as_root@@Base+0x68c>
   20d48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d4c:	ldrb	r0, [r0]
   20d50:	cmp	r0, #48	; 0x30
   20d54:	movw	r0, #0
   20d58:	str	r0, [sp, #48]	; 0x30
   20d5c:	blt	20d78 <flatcc_json_parser_struct_as_root@@Base+0x68c>
   20d60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d64:	ldrb	r0, [r0]
   20d68:	cmp	r0, #57	; 0x39
   20d6c:	movw	r0, #0
   20d70:	movle	r0, #1
   20d74:	str	r0, [sp, #48]	; 0x30
   20d78:	ldr	r0, [sp, #48]	; 0x30
   20d7c:	tst	r0, #1
   20d80:	beq	20e40 <flatcc_json_parser_struct_as_root@@Base+0x754>
   20d84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20d88:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20d8c:	movw	r2, #39321	; 0x9999
   20d90:	movt	r2, #39321	; 0x9999
   20d94:	subs	r0, r0, r2
   20d98:	movw	r2, #39321	; 0x9999
   20d9c:	movt	r2, #6553	; 0x1999
   20da0:	sbcs	r1, r1, r2
   20da4:	bcc	20df4 <flatcc_json_parser_struct_as_root@@Base+0x708>
   20da8:	b	20dac <flatcc_json_parser_struct_as_root@@Base+0x6c0>
   20dac:	ldr	r0, [sp, #72]	; 0x48
   20db0:	cmp	r0, #0
   20db4:	bne	20df0 <flatcc_json_parser_struct_as_root@@Base+0x704>
   20db8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20dbc:	ldrb	r0, [r0]
   20dc0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20dc4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   20dc8:	adds	r3, r1, #1
   20dcc:	adc	ip, r2, #0
   20dd0:	cmp	r0, #52	; 0x34
   20dd4:	movgt	r1, r3
   20dd8:	cmp	r0, #52	; 0x34
   20ddc:	movgt	r2, ip
   20de0:	str	r1, [fp, #-64]	; 0xffffffc0
   20de4:	str	r2, [fp, #-60]	; 0xffffffc4
   20de8:	movw	r0, #1
   20dec:	str	r0, [sp, #72]	; 0x48
   20df0:	b	20e40 <flatcc_json_parser_struct_as_root@@Base+0x754>
   20df4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20df8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   20dfc:	add	r1, r1, r1, lsl #2
   20e00:	lsl	r1, r1, #1
   20e04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20e08:	add	r3, r2, #1
   20e0c:	str	r3, [fp, #-24]	; 0xffffffe8
   20e10:	ldrb	r2, [r2]
   20e14:	mov	r3, #10
   20e18:	umlal	r2, r1, r0, r3
   20e1c:	subs	r0, r2, #48	; 0x30
   20e20:	sbc	r1, r1, #0
   20e24:	str	r0, [fp, #-64]	; 0xffffffc0
   20e28:	str	r1, [fp, #-60]	; 0xffffffc4
   20e2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20e30:	mvn	r1, #0
   20e34:	add	r0, r0, r1
   20e38:	str	r0, [fp, #-68]	; 0xffffffbc
   20e3c:	b	20d30 <flatcc_json_parser_struct_as_root@@Base+0x644>
   20e40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e44:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20e48:	sub	r0, r0, r1
   20e4c:	ldr	r1, [sp, #76]	; 0x4c
   20e50:	add	r0, r1, r0
   20e54:	str	r0, [sp, #76]	; 0x4c
   20e58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20e60:	cmp	r0, r1
   20e64:	movw	r0, #0
   20e68:	str	r0, [sp, #44]	; 0x2c
   20e6c:	beq	20e88 <flatcc_json_parser_struct_as_root@@Base+0x79c>
   20e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e74:	ldrb	r0, [r0]
   20e78:	cmp	r0, #48	; 0x30
   20e7c:	movw	r0, #0
   20e80:	moveq	r0, #1
   20e84:	str	r0, [sp, #44]	; 0x2c
   20e88:	ldr	r0, [sp, #44]	; 0x2c
   20e8c:	tst	r0, #1
   20e90:	beq	20eb0 <flatcc_json_parser_struct_as_root@@Base+0x7c4>
   20e94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20e98:	add	r0, r0, #1
   20e9c:	str	r0, [fp, #-68]	; 0xffffffbc
   20ea0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ea4:	add	r0, r0, #1
   20ea8:	str	r0, [fp, #-24]	; 0xffffffe8
   20eac:	b	20e58 <flatcc_json_parser_struct_as_root@@Base+0x76c>
   20eb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20eb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20eb8:	cmp	r0, r1
   20ebc:	beq	20f5c <flatcc_json_parser_struct_as_root@@Base+0x870>
   20ec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ec4:	ldrb	r0, [r0]
   20ec8:	cmp	r0, #49	; 0x31
   20ecc:	blt	20f5c <flatcc_json_parser_struct_as_root@@Base+0x870>
   20ed0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ed4:	ldrb	r0, [r0]
   20ed8:	cmp	r0, #57	; 0x39
   20edc:	bgt	20f5c <flatcc_json_parser_struct_as_root@@Base+0x870>
   20ee0:	movw	r0, #1
   20ee4:	str	r0, [sp, #72]	; 0x48
   20ee8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20eec:	add	r0, r0, #1
   20ef0:	str	r0, [fp, #-24]	; 0xffffffe8
   20ef4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ef8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20efc:	cmp	r0, r1
   20f00:	movw	r0, #0
   20f04:	str	r0, [sp, #40]	; 0x28
   20f08:	beq	20f3c <flatcc_json_parser_struct_as_root@@Base+0x850>
   20f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f10:	ldrb	r0, [r0]
   20f14:	cmp	r0, #48	; 0x30
   20f18:	movw	r0, #0
   20f1c:	str	r0, [sp, #40]	; 0x28
   20f20:	blt	20f3c <flatcc_json_parser_struct_as_root@@Base+0x850>
   20f24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f28:	ldrb	r0, [r0]
   20f2c:	cmp	r0, #57	; 0x39
   20f30:	movw	r0, #0
   20f34:	movle	r0, #1
   20f38:	str	r0, [sp, #40]	; 0x28
   20f3c:	ldr	r0, [sp, #40]	; 0x28
   20f40:	tst	r0, #1
   20f44:	beq	20f58 <flatcc_json_parser_struct_as_root@@Base+0x86c>
   20f48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f4c:	add	r0, r0, #1
   20f50:	str	r0, [fp, #-24]	; 0xffffffe8
   20f54:	b	20ef4 <flatcc_json_parser_struct_as_root@@Base+0x808>
   20f58:	b	20f5c <flatcc_json_parser_struct_as_root@@Base+0x870>
   20f5c:	b	20f60 <flatcc_json_parser_struct_as_root@@Base+0x874>
   20f60:	ldr	r0, [sp, #76]	; 0x4c
   20f64:	ldr	r1, [fp, #-68]	; 0xffffffbc
   20f68:	add	r0, r1, r0
   20f6c:	str	r0, [fp, #-68]	; 0xffffffbc
   20f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20f78:	cmp	r0, r1
   20f7c:	beq	21120 <flatcc_json_parser_struct_as_root@@Base+0xa34>
   20f80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f84:	ldrb	r0, [r0]
   20f88:	orr	r0, r0, #32
   20f8c:	cmp	r0, #101	; 0x65
   20f90:	bne	21120 <flatcc_json_parser_struct_as_root@@Base+0xa34>
   20f94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20f98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20f9c:	sub	r0, r0, r1
   20fa0:	cmp	r0, #2
   20fa4:	bge	20fb4 <flatcc_json_parser_struct_as_root@@Base+0x8c8>
   20fa8:	movw	r0, #0
   20fac:	str	r0, [fp, #-20]	; 0xffffffec
   20fb0:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20fb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fb8:	add	r0, r0, #1
   20fbc:	str	r0, [fp, #-24]	; 0xffffffe8
   20fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fc4:	ldrb	r0, [r0]
   20fc8:	cmp	r0, #43	; 0x2b
   20fcc:	bne	20ffc <flatcc_json_parser_struct_as_root@@Base+0x910>
   20fd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fd4:	add	r0, r0, #1
   20fd8:	str	r0, [fp, #-24]	; 0xffffffe8
   20fdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fe0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   20fe4:	cmp	r0, r1
   20fe8:	bne	20ff8 <flatcc_json_parser_struct_as_root@@Base+0x90c>
   20fec:	movw	r0, #0
   20ff0:	str	r0, [fp, #-20]	; 0xffffffec
   20ff4:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   20ff8:	b	21044 <flatcc_json_parser_struct_as_root@@Base+0x958>
   20ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21000:	ldrb	r0, [r0]
   21004:	cmp	r0, #45	; 0x2d
   21008:	bne	21040 <flatcc_json_parser_struct_as_root@@Base+0x954>
   2100c:	movw	r0, #1
   21010:	str	r0, [fp, #-52]	; 0xffffffcc
   21014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21018:	add	r0, r0, #1
   2101c:	str	r0, [fp, #-24]	; 0xffffffe8
   21020:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21024:	ldr	r1, [fp, #-44]	; 0xffffffd4
   21028:	cmp	r0, r1
   2102c:	bne	2103c <flatcc_json_parser_struct_as_root@@Base+0x950>
   21030:	movw	r0, #0
   21034:	str	r0, [fp, #-20]	; 0xffffffec
   21038:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   2103c:	b	21040 <flatcc_json_parser_struct_as_root@@Base+0x954>
   21040:	b	21044 <flatcc_json_parser_struct_as_root@@Base+0x958>
   21044:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21048:	ldrb	r0, [r0]
   2104c:	cmp	r0, #48	; 0x30
   21050:	blt	21064 <flatcc_json_parser_struct_as_root@@Base+0x978>
   21054:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21058:	ldrb	r0, [r0]
   2105c:	cmp	r0, #57	; 0x39
   21060:	ble	21070 <flatcc_json_parser_struct_as_root@@Base+0x984>
   21064:	movw	r0, #0
   21068:	str	r0, [fp, #-20]	; 0xffffffec
   2106c:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   21070:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21074:	add	r1, r0, #1
   21078:	str	r1, [fp, #-24]	; 0xffffffe8
   2107c:	ldrb	r0, [r0]
   21080:	sub	r0, r0, #48	; 0x30
   21084:	str	r0, [fp, #-72]	; 0xffffffb8
   21088:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2108c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   21090:	cmp	r0, r1
   21094:	movw	r0, #0
   21098:	str	r0, [sp, #36]	; 0x24
   2109c:	beq	210d0 <flatcc_json_parser_struct_as_root@@Base+0x9e4>
   210a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210a4:	ldrb	r0, [r0]
   210a8:	cmp	r0, #48	; 0x30
   210ac:	movw	r0, #0
   210b0:	str	r0, [sp, #36]	; 0x24
   210b4:	blt	210d0 <flatcc_json_parser_struct_as_root@@Base+0x9e4>
   210b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   210bc:	ldrb	r0, [r0]
   210c0:	cmp	r0, #57	; 0x39
   210c4:	movw	r0, #0
   210c8:	movle	r0, #1
   210cc:	str	r0, [sp, #36]	; 0x24
   210d0:	ldr	r0, [sp, #36]	; 0x24
   210d4:	tst	r0, #1
   210d8:	beq	2111c <flatcc_json_parser_struct_as_root@@Base+0xa30>
   210dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   210e0:	movw	r1, #32767	; 0x7fff
   210e4:	cmp	r0, r1
   210e8:	bgt	2110c <flatcc_json_parser_struct_as_root@@Base+0xa20>
   210ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   210f0:	movw	r1, #10
   210f4:	mul	r0, r0, r1
   210f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   210fc:	ldrb	r1, [r1]
   21100:	add	r0, r0, r1
   21104:	sub	r0, r0, #48	; 0x30
   21108:	str	r0, [fp, #-72]	; 0xffffffb8
   2110c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21110:	add	r0, r0, #1
   21114:	str	r0, [fp, #-24]	; 0xffffffe8
   21118:	b	21088 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   2111c:	b	21120 <flatcc_json_parser_struct_as_root@@Base+0xa34>
   21120:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21124:	ldr	r1, [fp, #-52]	; 0xffffffcc
   21128:	cmp	r1, #0
   2112c:	str	r0, [sp, #32]
   21130:	beq	21148 <flatcc_json_parser_struct_as_root@@Base+0xa5c>
   21134:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21138:	movw	r1, #0
   2113c:	sub	r0, r1, r0
   21140:	str	r0, [sp, #28]
   21144:	b	21150 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   21148:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2114c:	str	r0, [sp, #28]
   21150:	ldr	r0, [sp, #28]
   21154:	ldr	r1, [sp, #32]
   21158:	add	r0, r1, r0
   2115c:	str	r0, [fp, #-68]	; 0xffffffbc
   21160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21164:	ldr	r2, [fp, #-44]	; 0xffffffd4
   21168:	cmp	r0, r2
   2116c:	bne	2117c <flatcc_json_parser_struct_as_root@@Base+0xa90>
   21170:	movw	r0, #0
   21174:	str	r0, [fp, #-20]	; 0xffffffec
   21178:	b	211c4 <flatcc_json_parser_struct_as_root@@Base+0xad8>
   2117c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   21180:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21184:	ldr	r2, [fp, #-48]	; 0xffffffd0
   21188:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2118c:	ldr	ip, [fp, #-60]	; 0xffffffc4
   21190:	ldr	lr, [fp, #-68]	; 0xffffffbc
   21194:	ldr	r4, [sp, #76]	; 0x4c
   21198:	ldr	r5, [sp, #72]	; 0x48
   2119c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   211a0:	mov	r7, sp
   211a4:	str	r6, [r7, #20]
   211a8:	str	r5, [r7, #16]
   211ac:	str	r4, [r7, #12]
   211b0:	str	lr, [r7, #8]
   211b4:	str	ip, [r7, #4]
   211b8:	str	r3, [r7]
   211bc:	bl	21208 <flatcc_json_parser_struct_as_root@@Base+0xb1c>
   211c0:	str	r0, [fp, #-20]	; 0xffffffec
   211c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   211c8:	sub	sp, fp, #16
   211cc:	pop	{r4, r5, r6, r7, fp, pc}
   211d0:	sub	sp, sp, #16
   211d4:	vldr	d16, [pc, #36]	; 21200 <flatcc_json_parser_struct_as_root@@Base+0xb14>
   211d8:	str	r0, [sp, #12]
   211dc:	str	r1, [sp, #8]
   211e0:	str	r2, [sp, #4]
   211e4:	str	r3, [sp]
   211e8:	ldr	r0, [sp]
   211ec:	vstr	d16, [r0]
   211f0:	ldr	r0, [sp, #12]
   211f4:	add	sp, sp, #16
   211f8:	bx	lr
   211fc:	nop	{0}
	...
   21208:	push	{r4, r5, r6, sl, fp, lr}
   2120c:	add	fp, sp, #16
   21210:	sub	sp, sp, #64	; 0x40
   21214:	ldr	r3, [fp, #12]
   21218:	ldr	ip, [fp, #8]
   2121c:	ldr	lr, [fp, #28]
   21220:	ldr	r4, [fp, #24]
   21224:	ldr	r5, [fp, #20]
   21228:	ldr	r6, [fp, #16]
   2122c:	str	r0, [fp, #-24]	; 0xffffffe8
   21230:	str	r1, [fp, #-28]	; 0xffffffe4
   21234:	str	r2, [fp, #-32]	; 0xffffffe0
   21238:	str	r3, [sp, #44]	; 0x2c
   2123c:	str	ip, [sp, #40]	; 0x28
   21240:	movw	r0, #309	; 0x135
   21244:	str	r0, [sp, #36]	; 0x24
   21248:	movw	r0, #65212	; 0xfebc
   2124c:	movt	r0, #65535	; 0xffff
   21250:	str	r0, [sp, #32]
   21254:	ldr	r0, [sp, #40]	; 0x28
   21258:	ldr	r1, [sp, #44]	; 0x2c
   2125c:	orr	r0, r0, r1
   21260:	cmp	r0, #0
   21264:	beq	21278 <flatcc_json_parser_struct_as_root@@Base+0xb8c>
   21268:	b	2126c <flatcc_json_parser_struct_as_root@@Base+0xb80>
   2126c:	ldr	r0, [fp, #16]
   21270:	cmn	r0, #324	; 0x144
   21274:	bge	21288 <flatcc_json_parser_struct_as_root@@Base+0xb9c>
   21278:	vldr	d16, [pc, #1008]	; 21670 <flatcc_json_parser_struct_as_root@@Base+0xf84>
   2127c:	ldr	r0, [fp, #28]
   21280:	vstr	d16, [r0]
   21284:	b	21838 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   21288:	ldr	r0, [fp, #16]
   2128c:	sub	r0, r0, #1
   21290:	movw	r1, #309	; 0x135
   21294:	cmp	r0, r1
   21298:	ble	212b8 <flatcc_json_parser_struct_as_root@@Base+0xbcc>
   2129c:	mov	r0, #0
   212a0:	movw	r1, #0
   212a4:	movt	r1, #32752	; 0x7ff0
   212a8:	bl	2084c <flatcc_json_parser_struct_as_root@@Base+0x160>
   212ac:	ldr	r0, [fp, #28]
   212b0:	vstr	d0, [r0]
   212b4:	b	21838 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   212b8:	ldr	r0, [sp, #44]	; 0x2c
   212bc:	mov	r1, #0
   212c0:	cmp	r1, r0, lsr #21
   212c4:	bne	217c8 <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   212c8:	b	212cc <flatcc_json_parser_struct_as_root@@Base+0xbe0>
   212cc:	ldr	r0, [fp, #16]
   212d0:	cmp	r0, #0
   212d4:	blt	217c8 <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   212d8:	ldr	r0, [fp, #16]
   212dc:	cmp	r0, #22
   212e0:	bgt	217c8 <flatcc_json_parser_struct_as_root@@Base+0x10dc>
   212e4:	ldr	r0, [sp, #40]	; 0x28
   212e8:	ldr	r1, [sp, #44]	; 0x2c
   212ec:	bl	21d80 <flatcc_json_parser_struct_as_root@@Base+0x1694>
   212f0:	str	r0, [sp, #16]
   212f4:	str	r1, [sp, #20]
   212f8:	ldr	r0, [fp, #16]
   212fc:	ldr	r1, [fp, #20]
   21300:	sub	r0, r0, r1
   21304:	add	r0, r0, #22
   21308:	cmp	r0, #44	; 0x2c
   2130c:	str	r0, [sp, #12]
   21310:	bhi	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21314:	add	r0, pc, #8
   21318:	ldr	r1, [sp, #12]
   2131c:	ldr	r2, [r0, r1, lsl #2]
   21320:	add	pc, r0, r2
   21324:	strheq	r0, [r0], -r4
   21328:	andeq	r0, r0, r8, asr #1
   2132c:	ldrdeq	r0, [r0], -ip
   21330:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   21334:	andeq	r0, r0, r4, lsl #2
   21338:	andeq	r0, r0, r8, lsl r1
   2133c:	andeq	r0, r0, ip, lsr #2
   21340:	andeq	r0, r0, r0, asr #2
   21344:	andeq	r0, r0, r4, asr r1
   21348:	andeq	r0, r0, r8, ror #2
   2134c:	andeq	r0, r0, ip, ror r1
   21350:	muleq	r0, r0, r1
   21354:	andeq	r0, r0, r4, lsr #3
   21358:			; <UNDEFINED> instruction: 0x000001b8
   2135c:	andeq	r0, r0, ip, asr #3
   21360:	andeq	r0, r0, r0, ror #3
   21364:	strdeq	r0, [r0], -r4
   21368:	andeq	r0, r0, r8, lsl #4
   2136c:	andeq	r0, r0, ip, lsl r2
   21370:	andeq	r0, r0, r0, lsr r2
   21374:	andeq	r0, r0, r4, asr #4
   21378:	andeq	r0, r0, r8, asr r2
   2137c:	andeq	r0, r0, ip, ror #4
   21380:	andeq	r0, r0, r0, ror r2
   21384:	andeq	r0, r0, r4, lsl #5
   21388:	muleq	r0, r8, r2
   2138c:	andeq	r0, r0, ip, lsr #5
   21390:	andeq	r0, r0, r0, asr #5
   21394:	ldrdeq	r0, [r0], -r4
   21398:	andeq	r0, r0, r8, ror #5
   2139c:	strdeq	r0, [r0], -ip
   213a0:	andeq	r0, r0, r0, lsl r3
   213a4:	andeq	r0, r0, r4, lsr #6
   213a8:	andeq	r0, r0, r8, lsr r3
   213ac:			; <UNDEFINED> instruction: 0x000003bc
   213b0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   213b4:	andeq	r0, r0, r4, ror #7
   213b8:	strdeq	r0, [r0], -r8
   213bc:	andeq	r0, r0, ip, lsl #8
   213c0:	andeq	r0, r0, r0, lsr #8
   213c4:	andeq	r0, r0, r4, lsr r4
   213c8:	andeq	r0, r0, r8, asr #8
   213cc:	andeq	r0, r0, ip, asr r4
   213d0:	andeq	r0, r0, r0, ror r4
   213d4:	andeq	r0, r0, r4, lsl #9
   213d8:	vldr	d16, [pc, #664]	; 21678 <flatcc_json_parser_struct_as_root@@Base+0xf8c>
   213dc:	vldr	d17, [sp, #16]
   213e0:	vdiv.f64	d16, d17, d16
   213e4:	vstr	d16, [sp, #16]
   213e8:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   213ec:	vldr	d16, [pc, #652]	; 21680 <flatcc_json_parser_struct_as_root@@Base+0xf94>
   213f0:	vldr	d17, [sp, #16]
   213f4:	vdiv.f64	d16, d17, d16
   213f8:	vstr	d16, [sp, #16]
   213fc:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21400:	vldr	d16, [pc, #640]	; 21688 <flatcc_json_parser_struct_as_root@@Base+0xf9c>
   21404:	vldr	d17, [sp, #16]
   21408:	vdiv.f64	d16, d17, d16
   2140c:	vstr	d16, [sp, #16]
   21410:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21414:	vldr	d16, [pc, #628]	; 21690 <flatcc_json_parser_struct_as_root@@Base+0xfa4>
   21418:	vldr	d17, [sp, #16]
   2141c:	vdiv.f64	d16, d17, d16
   21420:	vstr	d16, [sp, #16]
   21424:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21428:	vldr	d16, [pc, #616]	; 21698 <flatcc_json_parser_struct_as_root@@Base+0xfac>
   2142c:	vldr	d17, [sp, #16]
   21430:	vdiv.f64	d16, d17, d16
   21434:	vstr	d16, [sp, #16]
   21438:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2143c:	vldr	d16, [pc, #604]	; 216a0 <flatcc_json_parser_struct_as_root@@Base+0xfb4>
   21440:	vldr	d17, [sp, #16]
   21444:	vdiv.f64	d16, d17, d16
   21448:	vstr	d16, [sp, #16]
   2144c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21450:	vldr	d16, [pc, #592]	; 216a8 <flatcc_json_parser_struct_as_root@@Base+0xfbc>
   21454:	vldr	d17, [sp, #16]
   21458:	vdiv.f64	d16, d17, d16
   2145c:	vstr	d16, [sp, #16]
   21460:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21464:	vldr	d16, [pc, #580]	; 216b0 <flatcc_json_parser_struct_as_root@@Base+0xfc4>
   21468:	vldr	d17, [sp, #16]
   2146c:	vdiv.f64	d16, d17, d16
   21470:	vstr	d16, [sp, #16]
   21474:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21478:	vldr	d16, [pc, #568]	; 216b8 <flatcc_json_parser_struct_as_root@@Base+0xfcc>
   2147c:	vldr	d17, [sp, #16]
   21480:	vdiv.f64	d16, d17, d16
   21484:	vstr	d16, [sp, #16]
   21488:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2148c:	vldr	d16, [pc, #556]	; 216c0 <flatcc_json_parser_struct_as_root@@Base+0xfd4>
   21490:	vldr	d17, [sp, #16]
   21494:	vdiv.f64	d16, d17, d16
   21498:	vstr	d16, [sp, #16]
   2149c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   214a0:	vldr	d16, [pc, #544]	; 216c8 <flatcc_json_parser_struct_as_root@@Base+0xfdc>
   214a4:	vldr	d17, [sp, #16]
   214a8:	vdiv.f64	d16, d17, d16
   214ac:	vstr	d16, [sp, #16]
   214b0:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   214b4:	vldr	d16, [pc, #532]	; 216d0 <flatcc_json_parser_struct_as_root@@Base+0xfe4>
   214b8:	vldr	d17, [sp, #16]
   214bc:	vdiv.f64	d16, d17, d16
   214c0:	vstr	d16, [sp, #16]
   214c4:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   214c8:	vldr	d16, [pc, #520]	; 216d8 <flatcc_json_parser_struct_as_root@@Base+0xfec>
   214cc:	vldr	d17, [sp, #16]
   214d0:	vdiv.f64	d16, d17, d16
   214d4:	vstr	d16, [sp, #16]
   214d8:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   214dc:	vldr	d16, [pc, #1012]	; 218d8 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   214e0:	vldr	d17, [sp, #16]
   214e4:	vdiv.f64	d16, d17, d16
   214e8:	vstr	d16, [sp, #16]
   214ec:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   214f0:	vldr	d16, [pc, #1000]	; 218e0 <flatcc_json_parser_struct_as_root@@Base+0x11f4>
   214f4:	vldr	d17, [sp, #16]
   214f8:	vdiv.f64	d16, d17, d16
   214fc:	vstr	d16, [sp, #16]
   21500:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21504:	vldr	d16, [pc, #988]	; 218e8 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   21508:	vldr	d17, [sp, #16]
   2150c:	vdiv.f64	d16, d17, d16
   21510:	vstr	d16, [sp, #16]
   21514:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21518:	vldr	d16, [pc, #976]	; 218f0 <flatcc_json_parser_struct_as_root@@Base+0x1204>
   2151c:	vldr	d17, [sp, #16]
   21520:	vdiv.f64	d16, d17, d16
   21524:	vstr	d16, [sp, #16]
   21528:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2152c:	vldr	d16, [pc, #964]	; 218f8 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   21530:	vldr	d17, [sp, #16]
   21534:	vdiv.f64	d16, d17, d16
   21538:	vstr	d16, [sp, #16]
   2153c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21540:	vldr	d16, [pc, #952]	; 21900 <flatcc_json_parser_struct_as_root@@Base+0x1214>
   21544:	vldr	d17, [sp, #16]
   21548:	vdiv.f64	d16, d17, d16
   2154c:	vstr	d16, [sp, #16]
   21550:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21554:	vldr	d16, [pc, #940]	; 21908 <flatcc_json_parser_struct_as_root@@Base+0x121c>
   21558:	vldr	d17, [sp, #16]
   2155c:	vdiv.f64	d16, d17, d16
   21560:	vstr	d16, [sp, #16]
   21564:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21568:	vldr	d16, [pc, #928]	; 21910 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   2156c:	vldr	d17, [sp, #16]
   21570:	vdiv.f64	d16, d17, d16
   21574:	vstr	d16, [sp, #16]
   21578:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2157c:	vldr	d16, [sp, #16]
   21580:	vmov.f64	d17, #36	; 0x41200000  10.0
   21584:	vdiv.f64	d16, d16, d17
   21588:	vstr	d16, [sp, #16]
   2158c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21590:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21594:	vldr	d16, [sp, #16]
   21598:	vmov.f64	d17, #36	; 0x41200000  10.0
   2159c:	vmul.f64	d16, d16, d17
   215a0:	vstr	d16, [sp, #16]
   215a4:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   215a8:	vldr	d16, [pc, #864]	; 21910 <flatcc_json_parser_struct_as_root@@Base+0x1224>
   215ac:	vldr	d17, [sp, #16]
   215b0:	vmul.f64	d16, d17, d16
   215b4:	vstr	d16, [sp, #16]
   215b8:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   215bc:	vldr	d16, [pc, #836]	; 21908 <flatcc_json_parser_struct_as_root@@Base+0x121c>
   215c0:	vldr	d17, [sp, #16]
   215c4:	vmul.f64	d16, d17, d16
   215c8:	vstr	d16, [sp, #16]
   215cc:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   215d0:	vldr	d16, [pc, #808]	; 21900 <flatcc_json_parser_struct_as_root@@Base+0x1214>
   215d4:	vldr	d17, [sp, #16]
   215d8:	vmul.f64	d16, d17, d16
   215dc:	vstr	d16, [sp, #16]
   215e0:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   215e4:	vldr	d16, [pc, #780]	; 218f8 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   215e8:	vldr	d17, [sp, #16]
   215ec:	vmul.f64	d16, d17, d16
   215f0:	vstr	d16, [sp, #16]
   215f4:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   215f8:	vldr	d16, [pc, #752]	; 218f0 <flatcc_json_parser_struct_as_root@@Base+0x1204>
   215fc:	vldr	d17, [sp, #16]
   21600:	vmul.f64	d16, d17, d16
   21604:	vstr	d16, [sp, #16]
   21608:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2160c:	vldr	d16, [pc, #724]	; 218e8 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   21610:	vldr	d17, [sp, #16]
   21614:	vmul.f64	d16, d17, d16
   21618:	vstr	d16, [sp, #16]
   2161c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21620:	vldr	d16, [pc, #696]	; 218e0 <flatcc_json_parser_struct_as_root@@Base+0x11f4>
   21624:	vldr	d17, [sp, #16]
   21628:	vmul.f64	d16, d17, d16
   2162c:	vstr	d16, [sp, #16]
   21630:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21634:	vldr	d16, [pc, #668]	; 218d8 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   21638:	vldr	d17, [sp, #16]
   2163c:	vmul.f64	d16, d17, d16
   21640:	vstr	d16, [sp, #16]
   21644:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21648:	vldr	d16, [pc, #640]	; 218d0 <flatcc_json_parser_struct_as_root@@Base+0x11e4>
   2164c:	vldr	d17, [sp, #16]
   21650:	vmul.f64	d16, d17, d16
   21654:	vstr	d16, [sp, #16]
   21658:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2165c:	vldr	d16, [pc, #612]	; 218c8 <flatcc_json_parser_struct_as_root@@Base+0x11dc>
   21660:	vldr	d17, [sp, #16]
   21664:	vmul.f64	d16, d17, d16
   21668:	vstr	d16, [sp, #16]
   2166c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
	...
   21678:			; <UNDEFINED> instruction: 0x064dd592
   2167c:	strmi	pc, [r0], #207	; 0xcf
   21680:	usatle	lr, #2, r0, asr #30
   21684:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   21688:	ldmvc	r5!, {r6, sl, fp, pc}
   2168c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   21690:	addsvs	r3, r1, r0, lsl #26
   21694:	mvnmi	r5, #228, 16	; 0xe40000
   21698:	strbvs	ip, [lr, -r0, lsl #16]
   2169c:			; <UNDEFINED> instruction: 0x43abc16d
   216a0:	ldrbhi	sl, [r8]
   216a4:	cmnmi	r6, #1459617792	; 0x57000000
   216a8:	strbcc	r8, [r0, r0]!
   216ac:	movtmi	ip, #4985	; 0x1379
   216b0:	ldrtcs	r0, [r4], -r0
   216b4:	movwmi	r6, #52213	; 0xcbf5
   216b8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   216bc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   216c0:	strb	r0, [r0, #-0]
   216c4:	adcmi	r3, r2, #156	; 0x9c
   216c8:	andge	r0, r0, #0
   216cc:	rsbmi	r1, sp, #148, 20	; 0x94000
   216d0:	stmda	r0, {}	; <UNPREDICTABLE>
   216d4:	eorsmi	r4, r7, #7733248	; 0x760000
   216d8:	andcs	r0, r0, r0
   216dc:	andmi	sl, r2, #95	; 0x5f
   216e0:	vldr	d16, [pc, #472]	; 218c0 <flatcc_json_parser_struct_as_root@@Base+0x11d4>
   216e4:	vldr	d17, [sp, #16]
   216e8:	vmul.f64	d16, d17, d16
   216ec:	vstr	d16, [sp, #16]
   216f0:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   216f4:	vldr	d16, [pc, #444]	; 218b8 <flatcc_json_parser_struct_as_root@@Base+0x11cc>
   216f8:	vldr	d17, [sp, #16]
   216fc:	vmul.f64	d16, d17, d16
   21700:	vstr	d16, [sp, #16]
   21704:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21708:	vldr	d16, [pc, #416]	; 218b0 <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   2170c:	vldr	d17, [sp, #16]
   21710:	vmul.f64	d16, d17, d16
   21714:	vstr	d16, [sp, #16]
   21718:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2171c:	vldr	d16, [pc, #388]	; 218a8 <flatcc_json_parser_struct_as_root@@Base+0x11bc>
   21720:	vldr	d17, [sp, #16]
   21724:	vmul.f64	d16, d17, d16
   21728:	vstr	d16, [sp, #16]
   2172c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21730:	vldr	d16, [pc, #360]	; 218a0 <flatcc_json_parser_struct_as_root@@Base+0x11b4>
   21734:	vldr	d17, [sp, #16]
   21738:	vmul.f64	d16, d17, d16
   2173c:	vstr	d16, [sp, #16]
   21740:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21744:	vldr	d16, [pc, #332]	; 21898 <flatcc_json_parser_struct_as_root@@Base+0x11ac>
   21748:	vldr	d17, [sp, #16]
   2174c:	vmul.f64	d16, d17, d16
   21750:	vstr	d16, [sp, #16]
   21754:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21758:	vldr	d16, [pc, #304]	; 21890 <flatcc_json_parser_struct_as_root@@Base+0x11a4>
   2175c:	vldr	d17, [sp, #16]
   21760:	vmul.f64	d16, d17, d16
   21764:	vstr	d16, [sp, #16]
   21768:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   2176c:	vldr	d16, [pc, #276]	; 21888 <flatcc_json_parser_struct_as_root@@Base+0x119c>
   21770:	vldr	d17, [sp, #16]
   21774:	vmul.f64	d16, d17, d16
   21778:	vstr	d16, [sp, #16]
   2177c:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21780:	vldr	d16, [pc, #248]	; 21880 <flatcc_json_parser_struct_as_root@@Base+0x1194>
   21784:	vldr	d17, [sp, #16]
   21788:	vmul.f64	d16, d17, d16
   2178c:	vstr	d16, [sp, #16]
   21790:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   21794:	vldr	d16, [pc, #220]	; 21878 <flatcc_json_parser_struct_as_root@@Base+0x118c>
   21798:	vldr	d17, [sp, #16]
   2179c:	vmul.f64	d16, d17, d16
   217a0:	vstr	d16, [sp, #16]
   217a4:	b	217b8 <flatcc_json_parser_struct_as_root@@Base+0x10cc>
   217a8:	vldr	d16, [pc, #192]	; 21870 <flatcc_json_parser_struct_as_root@@Base+0x1184>
   217ac:	vldr	d17, [sp, #16]
   217b0:	vmul.f64	d16, d17, d16
   217b4:	vstr	d16, [sp, #16]
   217b8:	vldr	d16, [sp, #16]
   217bc:	ldr	r0, [fp, #28]
   217c0:	vstr	d16, [r0]
   217c4:	b	21838 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   217c8:	ldr	r0, [sp, #40]	; 0x28
   217cc:	ldr	r1, [sp, #44]	; 0x2c
   217d0:	ldr	r2, [fp, #16]
   217d4:	ldr	r3, [fp, #20]
   217d8:	ldr	ip, [fp, #24]
   217dc:	ldr	lr, [fp, #28]
   217e0:	mov	r4, sp
   217e4:	str	lr, [r4, #4]
   217e8:	str	ip, [r4]
   217ec:	bl	1b0f0 <grisu3_diy_fp_encode_double@@Base>
   217f0:	cmp	r0, #0
   217f4:	beq	217fc <flatcc_json_parser_struct_as_root@@Base+0x1110>
   217f8:	b	21838 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   217fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21800:	add	r1, sp, #28
   21804:	bl	12968 <strtod@plt>
   21808:	ldr	r0, [fp, #28]
   2180c:	vstr	d0, [r0]
   21810:	ldr	r0, [sp, #28]
   21814:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21818:	cmp	r0, r1
   2181c:	bcs	2182c <flatcc_json_parser_struct_as_root@@Base+0x1140>
   21820:	ldr	r0, [sp, #28]
   21824:	str	r0, [fp, #-20]	; 0xffffffec
   21828:	b	21860 <flatcc_json_parser_struct_as_root@@Base+0x1174>
   2182c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21830:	str	r0, [fp, #-20]	; 0xffffffec
   21834:	b	21860 <flatcc_json_parser_struct_as_root@@Base+0x1174>
   21838:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2183c:	cmp	r0, #0
   21840:	beq	21858 <flatcc_json_parser_struct_as_root@@Base+0x116c>
   21844:	ldr	r0, [fp, #28]
   21848:	vldr	d16, [r0]
   2184c:	vneg.f64	d16, d16
   21850:	ldr	r0, [fp, #28]
   21854:	vstr	d16, [r0]
   21858:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2185c:	str	r0, [fp, #-20]	; 0xffffffec
   21860:	ldr	r0, [fp, #-20]	; 0xffffffec
   21864:	sub	sp, fp, #16
   21868:	pop	{r4, r5, r6, sl, fp, pc}
   2186c:	nop	{0}
   21870:			; <UNDEFINED> instruction: 0x064dd592
   21874:	strmi	pc, [r0], #207	; 0xcf
   21878:	usatle	lr, #2, r0, asr #30
   2187c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   21880:	ldmvc	r5!, {r6, sl, fp, pc}
   21884:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   21888:	addsvs	r3, r1, r0, lsl #26
   2188c:	mvnmi	r5, #228, 16	; 0xe40000
   21890:	strbvs	ip, [lr, -r0, lsl #16]
   21894:			; <UNDEFINED> instruction: 0x43abc16d
   21898:	ldrbhi	sl, [r8]
   2189c:	cmnmi	r6, #1459617792	; 0x57000000
   218a0:	strbcc	r8, [r0, r0]!
   218a4:	movtmi	ip, #4985	; 0x1379
   218a8:	ldrtcs	r0, [r4], -r0
   218ac:	movwmi	r6, #52213	; 0xcbf5
   218b0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   218b4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   218b8:	strb	r0, [r0, #-0]
   218bc:	adcmi	r3, r2, #156	; 0x9c
   218c0:	andge	r0, r0, #0
   218c4:	rsbmi	r1, sp, #148, 20	; 0x94000
   218c8:	stmda	r0, {}	; <UNPREDICTABLE>
   218cc:	eorsmi	r4, r7, #7733248	; 0x760000
   218d0:	andcs	r0, r0, r0
   218d4:	andmi	sl, r2, #95	; 0x5f
   218d8:	andeq	r0, r0, r0
   218dc:	bicmi	ip, sp, r5, ror #26
   218e0:	andeq	r0, r0, r0
   218e4:	orrsmi	sp, r7, r4, lsl #15
   218e8:	andeq	r0, r0, r0
   218ec:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   218f0:	andeq	r0, r0, r0
   218f4:	smlawbmi	lr, r0, r4, r8
   218f8:	andeq	r0, r0, r0
   218fc:	rscsmi	r6, r8, r0, lsl #20
   21900:	andeq	r0, r0, r0
   21904:	sbcmi	r8, r3, r0, lsl #16
   21908:	andeq	r0, r0, r0
   2190c:	addmi	r4, pc, r0
   21910:	andeq	r0, r0, r0
   21914:	subsmi	r0, r9, r0
   21918:	push	{r4, sl, fp, lr}
   2191c:	add	fp, sp, #8
   21920:	sub	sp, sp, #32
   21924:	ldr	ip, [fp, #12]
   21928:	ldr	lr, [fp, #8]
   2192c:	ldr	r4, [fp, #16]
   21930:	str	r0, [fp, #-16]
   21934:	str	r1, [sp, #20]
   21938:	str	r2, [sp, #16]
   2193c:	str	r3, [sp, #12]
   21940:	str	ip, [sp, #4]
   21944:	str	lr, [sp]
   21948:	ldr	r0, [sp, #12]
   2194c:	cmp	r0, #0
   21950:	beq	21970 <flatcc_json_parser_struct_as_root@@Base+0x1284>
   21954:	ldr	r0, [fp, #-16]
   21958:	ldr	r1, [sp, #20]
   2195c:	ldr	r2, [sp, #16]
   21960:	movw	r3, #8
   21964:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   21968:	str	r0, [fp, #-12]
   2196c:	b	219b8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   21970:	ldr	r0, [sp]
   21974:	ldr	r1, [sp, #4]
   21978:	subs	r0, r0, #256	; 0x100
   2197c:	sbcs	r1, r1, #0
   21980:	bcc	219a4 <flatcc_json_parser_struct_as_root@@Base+0x12b8>
   21984:	b	21988 <flatcc_json_parser_struct_as_root@@Base+0x129c>
   21988:	ldr	r0, [fp, #-16]
   2198c:	ldr	r1, [sp, #20]
   21990:	ldr	r2, [sp, #16]
   21994:	movw	r3, #7
   21998:	bl	1bff8 <flatcc_json_parser_set_error@@Base>
   2199c:	str	r0, [fp, #-12]
   219a0:	b	219b8 <flatcc_json_parser_struct_as_root@@Base+0x12cc>
   219a4:	ldrb	r0, [sp]
   219a8:	ldr	r1, [fp, #16]
   219ac:	strb	r0, [r1]
   219b0:	ldr	r0, [sp, #20]
   219b4:	str	r0, [fp, #-12]
   219b8:	ldr	r0, [fp, #-12]
   219bc:	sub	sp, fp, #8
   219c0:	pop	{r4, sl, fp, pc}
   219c4:	push	{fp, lr}
   219c8:	mov	fp, sp
   219cc:	sub	sp, sp, #16
   219d0:	str	r0, [fp, #-4]
   219d4:	str	r1, [sp, #8]
   219d8:	str	r2, [sp, #4]
   219dc:	ldr	r0, [fp, #-4]
   219e0:	ldr	r1, [sp, #8]
   219e4:	ldr	r2, [sp, #4]
   219e8:	bl	1de34 <flatcc_json_parser_float@@Base+0x254>
   219ec:	str	r0, [sp, #8]
   219f0:	ldr	r0, [fp, #-4]
   219f4:	ldr	r0, [r0, #12]
   219f8:	cmp	r0, #0
   219fc:	bne	21a14 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   21a00:	ldr	r0, [fp, #-4]
   21a04:	ldr	r1, [sp, #8]
   21a08:	ldr	r2, [sp, #4]
   21a0c:	bl	1cd84 <flatcc_json_parser_skip_constant@@Base+0x104>
   21a10:	str	r0, [sp, #8]
   21a14:	ldr	r0, [sp, #8]
   21a18:	mov	sp, fp
   21a1c:	pop	{fp, pc}
   21a20:	sub	sp, sp, #4
   21a24:	strb	r0, [sp, #3]
   21a28:	ldrb	r0, [sp, #3]
   21a2c:	add	sp, sp, #4
   21a30:	bx	lr
   21a34:	eor	r1, r1, #-2147483648	; 0x80000000
   21a38:	b	21a40 <flatcc_json_parser_struct_as_root@@Base+0x1354>
   21a3c:	eor	r3, r3, #-2147483648	; 0x80000000
   21a40:	push	{r4, r5, lr}
   21a44:	lsl	r4, r1, #1
   21a48:	lsl	r5, r3, #1
   21a4c:	teq	r4, r5
   21a50:	teqeq	r0, r2
   21a54:	orrsne	ip, r4, r0
   21a58:	orrsne	ip, r5, r2
   21a5c:	mvnsne	ip, r4, asr #21
   21a60:	mvnsne	ip, r5, asr #21
   21a64:	beq	21c50 <flatcc_json_parser_struct_as_root@@Base+0x1564>
   21a68:	lsr	r4, r4, #21
   21a6c:	rsbs	r5, r4, r5, lsr #21
   21a70:	rsblt	r5, r5, #0
   21a74:	ble	21a94 <flatcc_json_parser_struct_as_root@@Base+0x13a8>
   21a78:	add	r4, r4, r5
   21a7c:	eor	r2, r0, r2
   21a80:	eor	r3, r1, r3
   21a84:	eor	r0, r2, r0
   21a88:	eor	r1, r3, r1
   21a8c:	eor	r2, r0, r2
   21a90:	eor	r3, r1, r3
   21a94:	cmp	r5, #54	; 0x36
   21a98:	pophi	{r4, r5, pc}
   21a9c:	tst	r1, #-2147483648	; 0x80000000
   21aa0:	lsl	r1, r1, #12
   21aa4:	mov	ip, #1048576	; 0x100000
   21aa8:	orr	r1, ip, r1, lsr #12
   21aac:	beq	21ab8 <flatcc_json_parser_struct_as_root@@Base+0x13cc>
   21ab0:	rsbs	r0, r0, #0
   21ab4:	rsc	r1, r1, #0
   21ab8:	tst	r3, #-2147483648	; 0x80000000
   21abc:	lsl	r3, r3, #12
   21ac0:	orr	r3, ip, r3, lsr #12
   21ac4:	beq	21ad0 <flatcc_json_parser_struct_as_root@@Base+0x13e4>
   21ac8:	rsbs	r2, r2, #0
   21acc:	rsc	r3, r3, #0
   21ad0:	teq	r4, r5
   21ad4:	beq	21c38 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   21ad8:	sub	r4, r4, #1
   21adc:	rsbs	lr, r5, #32
   21ae0:	blt	21afc <flatcc_json_parser_struct_as_root@@Base+0x1410>
   21ae4:	lsl	ip, r2, lr
   21ae8:	adds	r0, r0, r2, lsr r5
   21aec:	adc	r1, r1, #0
   21af0:	adds	r0, r0, r3, lsl lr
   21af4:	adcs	r1, r1, r3, asr r5
   21af8:	b	21b18 <flatcc_json_parser_struct_as_root@@Base+0x142c>
   21afc:	sub	r5, r5, #32
   21b00:	add	lr, lr, #32
   21b04:	cmp	r2, #1
   21b08:	lsl	ip, r3, lr
   21b0c:	orrcs	ip, ip, #2
   21b10:	adds	r0, r0, r3, asr r5
   21b14:	adcs	r1, r1, r3, asr #31
   21b18:	and	r5, r1, #-2147483648	; 0x80000000
   21b1c:	bpl	21b2c <flatcc_json_parser_struct_as_root@@Base+0x1440>
   21b20:	rsbs	ip, ip, #0
   21b24:	rscs	r0, r0, #0
   21b28:	rsc	r1, r1, #0
   21b2c:	cmp	r1, #1048576	; 0x100000
   21b30:	bcc	21b70 <flatcc_json_parser_struct_as_root@@Base+0x1484>
   21b34:	cmp	r1, #2097152	; 0x200000
   21b38:	bcc	21b58 <flatcc_json_parser_struct_as_root@@Base+0x146c>
   21b3c:	lsrs	r1, r1, #1
   21b40:	rrxs	r0, r0
   21b44:	rrx	ip, ip
   21b48:	add	r4, r4, #1
   21b4c:	lsl	r2, r4, #21
   21b50:	cmn	r2, #4194304	; 0x400000
   21b54:	bcs	21cb0 <flatcc_json_parser_struct_as_root@@Base+0x15c4>
   21b58:	cmp	ip, #-2147483648	; 0x80000000
   21b5c:	lsrseq	ip, r0, #1
   21b60:	adcs	r0, r0, #0
   21b64:	adc	r1, r1, r4, lsl #20
   21b68:	orr	r1, r1, r5
   21b6c:	pop	{r4, r5, pc}
   21b70:	lsls	ip, ip, #1
   21b74:	adcs	r0, r0, r0
   21b78:	adc	r1, r1, r1
   21b7c:	tst	r1, #1048576	; 0x100000
   21b80:	sub	r4, r4, #1
   21b84:	bne	21b58 <flatcc_json_parser_struct_as_root@@Base+0x146c>
   21b88:	teq	r1, #0
   21b8c:	moveq	r1, r0
   21b90:	moveq	r0, #0
   21b94:	clz	r3, r1
   21b98:	addeq	r3, r3, #32
   21b9c:	sub	r3, r3, #11
   21ba0:	subs	r2, r3, #32
   21ba4:	bge	21bc8 <flatcc_json_parser_struct_as_root@@Base+0x14dc>
   21ba8:	adds	r2, r2, #12
   21bac:	ble	21bc4 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   21bb0:	add	ip, r2, #20
   21bb4:	rsb	r2, r2, #12
   21bb8:	lsl	r0, r1, ip
   21bbc:	lsr	r1, r1, r2
   21bc0:	b	21bd8 <flatcc_json_parser_struct_as_root@@Base+0x14ec>
   21bc4:	add	r2, r2, #20
   21bc8:	rsble	ip, r2, #32
   21bcc:	lsl	r1, r1, r2
   21bd0:	orrle	r1, r1, r0, lsr ip
   21bd4:	lslle	r0, r0, r2
   21bd8:	subs	r4, r4, r3
   21bdc:	addge	r1, r1, r4, lsl #20
   21be0:	orrge	r1, r1, r5
   21be4:	popge	{r4, r5, pc}
   21be8:	mvn	r4, r4
   21bec:	subs	r4, r4, #31
   21bf0:	bge	21c2c <flatcc_json_parser_struct_as_root@@Base+0x1540>
   21bf4:	adds	r4, r4, #12
   21bf8:	bgt	21c14 <flatcc_json_parser_struct_as_root@@Base+0x1528>
   21bfc:	add	r4, r4, #20
   21c00:	rsb	r2, r4, #32
   21c04:	lsr	r0, r0, r4
   21c08:	orr	r0, r0, r1, lsl r2
   21c0c:	orr	r1, r5, r1, lsr r4
   21c10:	pop	{r4, r5, pc}
   21c14:	rsb	r4, r4, #12
   21c18:	rsb	r2, r4, #32
   21c1c:	lsr	r0, r0, r2
   21c20:	orr	r0, r0, r1, lsl r4
   21c24:	mov	r1, r5
   21c28:	pop	{r4, r5, pc}
   21c2c:	lsr	r0, r1, r4
   21c30:	mov	r1, r5
   21c34:	pop	{r4, r5, pc}
   21c38:	teq	r4, #0
   21c3c:	eor	r3, r3, #1048576	; 0x100000
   21c40:	eoreq	r1, r1, #1048576	; 0x100000
   21c44:	addeq	r4, r4, #1
   21c48:	subne	r5, r5, #1
   21c4c:	b	21ad8 <flatcc_json_parser_struct_as_root@@Base+0x13ec>
   21c50:	mvns	ip, r4, asr #21
   21c54:	mvnsne	ip, r5, asr #21
   21c58:	beq	21cc0 <flatcc_json_parser_struct_as_root@@Base+0x15d4>
   21c5c:	teq	r4, r5
   21c60:	teqeq	r0, r2
   21c64:	beq	21c78 <flatcc_json_parser_struct_as_root@@Base+0x158c>
   21c68:	orrs	ip, r4, r0
   21c6c:	moveq	r1, r3
   21c70:	moveq	r0, r2
   21c74:	pop	{r4, r5, pc}
   21c78:	teq	r1, r3
   21c7c:	movne	r1, #0
   21c80:	movne	r0, #0
   21c84:	popne	{r4, r5, pc}
   21c88:	lsrs	ip, r4, #21
   21c8c:	bne	21ca0 <flatcc_json_parser_struct_as_root@@Base+0x15b4>
   21c90:	lsls	r0, r0, #1
   21c94:	adcs	r1, r1, r1
   21c98:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21c9c:	pop	{r4, r5, pc}
   21ca0:	adds	r4, r4, #4194304	; 0x400000
   21ca4:	addcc	r1, r1, #1048576	; 0x100000
   21ca8:	popcc	{r4, r5, pc}
   21cac:	and	r5, r1, #-2147483648	; 0x80000000
   21cb0:	orr	r1, r5, #2130706432	; 0x7f000000
   21cb4:	orr	r1, r1, #15728640	; 0xf00000
   21cb8:	mov	r0, #0
   21cbc:	pop	{r4, r5, pc}
   21cc0:	mvns	ip, r4, asr #21
   21cc4:	movne	r1, r3
   21cc8:	movne	r0, r2
   21ccc:	mvnseq	ip, r5, asr #21
   21cd0:	movne	r3, r1
   21cd4:	movne	r2, r0
   21cd8:	orrs	r4, r0, r1, lsl #12
   21cdc:	orrseq	r5, r2, r3, lsl #12
   21ce0:	teqeq	r1, r3
   21ce4:	orrne	r1, r1, #524288	; 0x80000
   21ce8:	pop	{r4, r5, pc}
   21cec:	teq	r0, #0
   21cf0:	moveq	r1, #0
   21cf4:	bxeq	lr
   21cf8:	push	{r4, r5, lr}
   21cfc:	mov	r4, #1024	; 0x400
   21d00:	add	r4, r4, #50	; 0x32
   21d04:	mov	r5, #0
   21d08:	mov	r1, #0
   21d0c:	b	21b88 <flatcc_json_parser_struct_as_root@@Base+0x149c>
   21d10:	teq	r0, #0
   21d14:	moveq	r1, #0
   21d18:	bxeq	lr
   21d1c:	push	{r4, r5, lr}
   21d20:	mov	r4, #1024	; 0x400
   21d24:	add	r4, r4, #50	; 0x32
   21d28:	ands	r5, r0, #-2147483648	; 0x80000000
   21d2c:	rsbmi	r0, r0, #0
   21d30:	mov	r1, #0
   21d34:	b	21b88 <flatcc_json_parser_struct_as_root@@Base+0x149c>
   21d38:	lsls	r2, r0, #1
   21d3c:	asr	r1, r2, #3
   21d40:	rrx	r1, r1
   21d44:	lsl	r0, r2, #28
   21d48:	andsne	r3, r2, #-16777216	; 0xff000000
   21d4c:	teqne	r3, #-16777216	; 0xff000000
   21d50:	eorne	r1, r1, #939524096	; 0x38000000
   21d54:	bxne	lr
   21d58:	bics	r2, r2, #-16777216	; 0xff000000
   21d5c:	bxeq	lr
   21d60:	teq	r3, #-16777216	; 0xff000000
   21d64:	orreq	r1, r1, #524288	; 0x80000
   21d68:	bxeq	lr
   21d6c:	push	{r4, r5, lr}
   21d70:	mov	r4, #896	; 0x380
   21d74:	and	r5, r1, #-2147483648	; 0x80000000
   21d78:	bic	r1, r1, #-2147483648	; 0x80000000
   21d7c:	b	21b88 <flatcc_json_parser_struct_as_root@@Base+0x149c>
   21d80:	orrs	r2, r0, r1
   21d84:	bxeq	lr
   21d88:	push	{r4, r5, lr}
   21d8c:	mov	r5, #0
   21d90:	b	21db0 <flatcc_json_parser_struct_as_root@@Base+0x16c4>
   21d94:	orrs	r2, r0, r1
   21d98:	bxeq	lr
   21d9c:	push	{r4, r5, lr}
   21da0:	ands	r5, r1, #-2147483648	; 0x80000000
   21da4:	bpl	21db0 <flatcc_json_parser_struct_as_root@@Base+0x16c4>
   21da8:	rsbs	r0, r0, #0
   21dac:	rsc	r1, r1, #0
   21db0:	mov	r4, #1024	; 0x400
   21db4:	add	r4, r4, #50	; 0x32
   21db8:	lsrs	ip, r1, #22
   21dbc:	beq	21b2c <flatcc_json_parser_struct_as_root@@Base+0x1440>
   21dc0:	mov	r2, #3
   21dc4:	lsrs	ip, ip, #3
   21dc8:	addne	r2, r2, #3
   21dcc:	lsrs	ip, ip, #3
   21dd0:	addne	r2, r2, #3
   21dd4:	add	r2, r2, ip, lsr #3
   21dd8:	rsb	r3, r2, #32
   21ddc:	lsl	ip, r0, r3
   21de0:	lsr	r0, r0, r2
   21de4:	orr	r0, r0, r1, lsl r3
   21de8:	lsr	r1, r1, r2
   21dec:	add	r4, r4, r2
   21df0:	b	21b2c <flatcc_json_parser_struct_as_root@@Base+0x1440>

00021df4 <__libc_csu_init@@Base>:
   21df4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21df8:	mov	r7, r0
   21dfc:	ldr	r6, [pc, #72]	; 21e4c <__libc_csu_init@@Base+0x58>
   21e00:	ldr	r5, [pc, #72]	; 21e50 <__libc_csu_init@@Base+0x5c>
   21e04:	add	r6, pc, r6
   21e08:	add	r5, pc, r5
   21e0c:	sub	r6, r6, r5
   21e10:	mov	r8, r1
   21e14:	mov	r9, r2
   21e18:	bl	128ac <free@plt-0x20>
   21e1c:	asrs	r6, r6, #2
   21e20:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21e24:	mov	r4, #0
   21e28:	add	r4, r4, #1
   21e2c:	ldr	r3, [r5], #4
   21e30:	mov	r2, r9
   21e34:	mov	r1, r8
   21e38:	mov	r0, r7
   21e3c:	blx	r3
   21e40:	cmp	r6, r4
   21e44:	bne	21e28 <__libc_csu_init@@Base+0x34>
   21e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21e4c:	andeq	r3, r1, r0, lsl #2
   21e50:	strdeq	r3, [r1], -r8

00021e54 <__libc_csu_fini@@Base>:
   21e54:	bx	lr

Disassembly of section .fini:

00021e58 <.fini>:
   21e58:	push	{r3, lr}
   21e5c:	pop	{r3, pc}
