
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109e0 <.init>:
   109e0:	push	{r3, lr}
   109e4:	bl	10c04 <__assert_fail@plt+0x48>
   109e8:	pop	{r3, pc}

Disassembly of section .plt:

000109ec <calloc@plt-0x14>:
   109ec:	push	{lr}		; (str lr, [sp, #-4]!)
   109f0:	ldr	lr, [pc, #4]	; 109fc <calloc@plt-0x4>
   109f4:	add	lr, pc, lr
   109f8:	ldr	pc, [lr, #8]!
   109fc:	andeq	r8, r1, r4, lsl #12

00010a00 <calloc@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #24, 20	; 0x18000
   10a08:	ldr	pc, [ip, #1540]!	; 0x604

00010a0c <strcmp@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #24, 20	; 0x18000
   10a14:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a18 <printf@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #24, 20	; 0x18000
   10a20:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a24 <fopen@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #24, 20	; 0x18000
   10a2c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a30 <free@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #24, 20	; 0x18000
   10a38:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a3c <utf8proc_get_property@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #24, 20	; 0x18000
   10a44:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a48 <fgets@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #24, 20	; 0x18000
   10a50:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a54 <utf8proc_encode_char@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #24, 20	; 0x18000
   10a5c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a60 <strdup@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #24, 20	; 0x18000
   10a68:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a6c <rewind@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #24, 20	; 0x18000
   10a74:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a78 <unlink@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #24, 20	; 0x18000
   10a80:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a84 <utf8proc_tolower@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #24, 20	; 0x18000
   10a8c:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a90 <__xstat@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #24, 20	; 0x18000
   10a98:	ldr	pc, [ip, #1444]!	; 0x5a4

00010a9c <fwrite@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #24, 20	; 0x18000
   10aa4:	ldr	pc, [ip, #1436]!	; 0x59c

00010aa8 <fread@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #24, 20	; 0x18000
   10ab0:	ldr	pc, [ip, #1428]!	; 0x594

00010ab4 <utf8proc_iterate@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1420]!	; 0x58c

00010ac0 <puts@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1412]!	; 0x584

00010acc <malloc@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1404]!	; 0x57c

00010ad8 <__libc_start_main@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1396]!	; 0x574

00010ae4 <__sysv_signal@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1388]!	; 0x56c

00010af0 <__gmon_start__@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1380]!	; 0x564

00010afc <getpid@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1372]!	; 0x55c

00010b08 <exit@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1364]!	; 0x554

00010b14 <utf8proc_category@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1356]!	; 0x54c

00010b20 <strlen@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1348]!	; 0x544

00010b2c <fprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1340]!	; 0x53c

00010b38 <__isoc99_sscanf@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1332]!	; 0x534

00010b44 <fclose@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1324]!	; 0x52c

00010b50 <utf8proc_NFC@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1316]!	; 0x524

00010b5c <fputc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1308]!	; 0x51c

00010b68 <sprintf@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1300]!	; 0x514

00010b74 <atoi@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1292]!	; 0x50c

00010b80 <utf8proc_errmsg@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1284]!	; 0x504

00010b8c <fputs@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b98 <strncmp@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1268]!	; 0x4f4

00010ba4 <abort@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1260]!	; 0x4ec

00010bb0 <getc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1252]!	; 0x4e4

00010bbc <__assert_fail@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1244]!	; 0x4dc

Disassembly of section .text:

00010bc8 <error@@Base-0x1d88>:
   10bc8:	mov	fp, #0
   10bcc:	mov	lr, #0
   10bd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10bd4:	mov	r2, sp
   10bd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10be0:	ldr	ip, [pc, #16]	; 10bf8 <__assert_fail@plt+0x3c>
   10be4:	push	{ip}		; (str ip, [sp, #-4]!)
   10be8:	ldr	r0, [pc, #12]	; 10bfc <__assert_fail@plt+0x40>
   10bec:	ldr	r3, [pc, #12]	; 10c00 <__assert_fail@plt+0x44>
   10bf0:	bl	10ad8 <__libc_start_main@plt>
   10bf4:	bl	10ba4 <abort@plt>
   10bf8:	andeq	r4, r1, r4, ror #30
   10bfc:	andeq	r1, r1, r0, lsl #1
   10c00:	andeq	r4, r1, r4, lsl #30
   10c04:	ldr	r3, [pc, #20]	; 10c20 <__assert_fail@plt+0x64>
   10c08:	ldr	r2, [pc, #20]	; 10c24 <__assert_fail@plt+0x68>
   10c0c:	add	r3, pc, r3
   10c10:	ldr	r2, [r3, r2]
   10c14:	cmp	r2, #0
   10c18:	bxeq	lr
   10c1c:	b	10af0 <__gmon_start__@plt>
   10c20:	andeq	r8, r1, ip, ror #7
   10c24:	andeq	r0, r0, r4, asr #1
   10c28:	ldr	r0, [pc, #24]	; 10c48 <__assert_fail@plt+0x8c>
   10c2c:	ldr	r3, [pc, #24]	; 10c4c <__assert_fail@plt+0x90>
   10c30:	cmp	r3, r0
   10c34:	bxeq	lr
   10c38:	ldr	r3, [pc, #16]	; 10c50 <__assert_fail@plt+0x94>
   10c3c:	cmp	r3, #0
   10c40:	bxeq	lr
   10c44:	bx	r3
   10c48:	andeq	r9, r2, r8, lsl #2
   10c4c:	andeq	r9, r2, r8, lsl #2
   10c50:	andeq	r0, r0, r0
   10c54:	ldr	r0, [pc, #36]	; 10c80 <__assert_fail@plt+0xc4>
   10c58:	ldr	r1, [pc, #36]	; 10c84 <__assert_fail@plt+0xc8>
   10c5c:	sub	r1, r1, r0
   10c60:	asr	r1, r1, #2
   10c64:	add	r1, r1, r1, lsr #31
   10c68:	asrs	r1, r1, #1
   10c6c:	bxeq	lr
   10c70:	ldr	r3, [pc, #16]	; 10c88 <__assert_fail@plt+0xcc>
   10c74:	cmp	r3, #0
   10c78:	bxeq	lr
   10c7c:	bx	r3
   10c80:	andeq	r9, r2, r8, lsl #2
   10c84:	andeq	r9, r2, r8, lsl #2
   10c88:	andeq	r0, r0, r0
   10c8c:	push	{r4, lr}
   10c90:	ldr	r4, [pc, #24]	; 10cb0 <__assert_fail@plt+0xf4>
   10c94:	ldrb	r3, [r4]
   10c98:	cmp	r3, #0
   10c9c:	popne	{r4, pc}
   10ca0:	bl	10c28 <__assert_fail@plt+0x6c>
   10ca4:	mov	r3, #1
   10ca8:	strb	r3, [r4]
   10cac:	pop	{r4, pc}
   10cb0:	andeq	r9, r2, r8, lsl #2
   10cb4:	b	10c54 <__assert_fail@plt+0x98>
   10cb8:	str	r4, [sp, #-12]!
   10cbc:	str	fp, [sp, #4]
   10cc0:	str	lr, [sp, #8]
   10cc4:	add	fp, sp, #8
   10cc8:	sub	sp, sp, #20
   10ccc:	str	r0, [fp, #-24]	; 0xffffffe8
   10cd0:	ldr	r4, [pc, #212]	; 10dac <__assert_fail@plt+0x1f0>
   10cd4:	add	r4, pc, r4
   10cd8:	ldr	r3, [pc, #208]	; 10db0 <__assert_fail@plt+0x1f4>
   10cdc:	ldr	r3, [r4, r3]
   10ce0:	mov	r2, r3
   10ce4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10ce8:	ldr	r3, [pc, #196]	; 10db4 <__assert_fail@plt+0x1f8>
   10cec:	ldr	r3, [r4, r3]
   10cf0:	mov	r0, r3
   10cf4:	bl	148c8 <error@@Base+0x1f78>
   10cf8:	ldr	r3, [pc, #180]	; 10db4 <__assert_fail@plt+0x1f8>
   10cfc:	ldr	r3, [r4, r3]
   10d00:	mov	r1, r3
   10d04:	ldr	r3, [pc, #172]	; 10db8 <__assert_fail@plt+0x1fc>
   10d08:	ldr	r3, [r4, r3]
   10d0c:	mov	r0, r3
   10d10:	bl	1425c <error@@Base+0x190c>
   10d14:	ldr	r3, [pc, #156]	; 10db8 <__assert_fail@plt+0x1fc>
   10d18:	ldr	r3, [r4, r3]
   10d1c:	ldr	r3, [r3]
   10d20:	str	r3, [fp, #-16]
   10d24:	b	10d50 <__assert_fail@plt+0x194>
   10d28:	ldr	r3, [fp, #-16]
   10d2c:	ldr	r1, [r3, #8]
   10d30:	mov	r3, #0
   10d34:	mov	r2, #1
   10d38:	ldr	r0, [pc, #124]	; 10dbc <__assert_fail@plt+0x200>
   10d3c:	ldr	r0, [r4, r0]
   10d40:	bl	12b08 <error@@Base+0x1b8>
   10d44:	ldr	r3, [fp, #-16]
   10d48:	ldr	r3, [r3, #4]
   10d4c:	str	r3, [fp, #-16]
   10d50:	ldr	r3, [fp, #-16]
   10d54:	cmp	r3, #0
   10d58:	bne	10d28 <__assert_fail@plt+0x16c>
   10d5c:	ldr	r3, [pc, #92]	; 10dc0 <__assert_fail@plt+0x204>
   10d60:	ldr	r3, [r4, r3]
   10d64:	mov	r1, r3
   10d68:	ldr	r3, [pc, #68]	; 10db4 <__assert_fail@plt+0x1f8>
   10d6c:	ldr	r3, [r4, r3]
   10d70:	mov	r0, r3
   10d74:	bl	1152c <__assert_fail@plt+0x970>
   10d78:	ldr	r3, [pc, #68]	; 10dc4 <__assert_fail@plt+0x208>
   10d7c:	ldr	r3, [r4, r3]
   10d80:	mov	r1, r3
   10d84:	ldr	r3, [pc, #44]	; 10db8 <__assert_fail@plt+0x1fc>
   10d88:	ldr	r3, [r4, r3]
   10d8c:	mov	r0, r3
   10d90:	bl	1152c <__assert_fail@plt+0x970>
   10d94:	nop	{0}
   10d98:	sub	sp, fp, #8
   10d9c:	ldr	r4, [sp]
   10da0:	ldr	fp, [sp, #4]
   10da4:	add	sp, sp, #8
   10da8:	pop	{pc}		; (ldr pc, [sp], #4)
   10dac:	andeq	r8, r1, r4, lsr #6
   10db0:	strheq	r0, [r0], -r8
   10db4:	andeq	r0, r0, r4, lsr #1
   10db8:	strheq	r0, [r0], -ip
   10dbc:	ldrdeq	r0, [r0], -ip
   10dc0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10dc4:	andeq	r0, r0, r8, lsr #1
   10dc8:	str	fp, [sp, #-8]!
   10dcc:	str	lr, [sp, #4]
   10dd0:	add	fp, sp, #4
   10dd4:	sub	sp, sp, #8
   10dd8:	str	r0, [fp, #-8]
   10ddc:	str	r1, [fp, #-12]
   10de0:	ldr	r3, [fp, #-8]
   10de4:	ldr	r2, [r3, #8]
   10de8:	ldr	r3, [fp, #-12]
   10dec:	ldr	r3, [r3, #8]
   10df0:	mov	r1, r3
   10df4:	mov	r0, r2
   10df8:	bl	11d94 <__assert_fail@plt+0x11d8>
   10dfc:	mov	r3, r0
   10e00:	mov	r0, r3
   10e04:	sub	sp, fp, #4
   10e08:	ldr	fp, [sp]
   10e0c:	add	sp, sp, #4
   10e10:	pop	{pc}		; (ldr pc, [sp], #4)
   10e14:	str	fp, [sp, #-8]!
   10e18:	str	lr, [sp, #4]
   10e1c:	add	fp, sp, #4
   10e20:	sub	sp, sp, #8
   10e24:	str	r0, [fp, #-8]
   10e28:	str	r1, [fp, #-12]
   10e2c:	ldr	r3, [fp, #-8]
   10e30:	ldr	r2, [r3, #12]
   10e34:	ldr	r3, [fp, #-12]
   10e38:	ldr	r3, [r3, #12]
   10e3c:	cmp	r2, r3
   10e40:	beq	10e5c <__assert_fail@plt+0x2a0>
   10e44:	ldr	r3, [fp, #-12]
   10e48:	ldr	r2, [r3, #12]
   10e4c:	ldr	r3, [fp, #-8]
   10e50:	ldr	r3, [r3, #12]
   10e54:	sub	r3, r2, r3
   10e58:	b	10e6c <__assert_fail@plt+0x2b0>
   10e5c:	ldr	r1, [fp, #-12]
   10e60:	ldr	r0, [fp, #-8]
   10e64:	bl	10dc8 <__assert_fail@plt+0x20c>
   10e68:	mov	r3, r0
   10e6c:	mov	r0, r3
   10e70:	sub	sp, fp, #4
   10e74:	ldr	fp, [sp]
   10e78:	add	sp, sp, #4
   10e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   10e80:	str	r4, [sp, #-12]!
   10e84:	str	fp, [sp, #4]
   10e88:	str	lr, [sp, #8]
   10e8c:	add	fp, sp, #8
   10e90:	sub	sp, sp, #12
   10e94:	ldr	r4, [pc, #260]	; 10fa0 <__assert_fail@plt+0x3e4>
   10e98:	add	r4, pc, r4
   10e9c:	mov	r3, #0
   10ea0:	str	r3, [fp, #-20]	; 0xffffffec
   10ea4:	ldr	r3, [pc, #248]	; 10fa4 <__assert_fail@plt+0x3e8>
   10ea8:	add	r3, pc, r3
   10eac:	mov	r0, r3
   10eb0:	bl	10ac0 <puts@plt>
   10eb4:	mov	r3, #0
   10eb8:	str	r3, [fp, #-16]
   10ebc:	b	10f58 <__assert_fail@plt+0x39c>
   10ec0:	ldr	r3, [pc, #224]	; 10fa8 <__assert_fail@plt+0x3ec>
   10ec4:	ldr	r3, [r4, r3]
   10ec8:	add	r3, r3, #4096	; 0x1000
   10ecc:	ldr	r2, [r3, #3952]	; 0xf70
   10ed0:	ldr	r3, [fp, #-16]
   10ed4:	lsl	r3, r3, #2
   10ed8:	add	r3, r2, r3
   10edc:	ldr	r3, [r3]
   10ee0:	ldr	r1, [r3, #12]
   10ee4:	ldr	r3, [pc, #188]	; 10fa8 <__assert_fail@plt+0x3ec>
   10ee8:	ldr	r3, [r4, r3]
   10eec:	add	r3, r3, #4096	; 0x1000
   10ef0:	ldr	r2, [r3, #3952]	; 0xf70
   10ef4:	ldr	r3, [fp, #-16]
   10ef8:	lsl	r3, r3, #2
   10efc:	add	r3, r2, r3
   10f00:	ldr	r3, [r3]
   10f04:	ldr	r3, [r3, #8]
   10f08:	mov	r2, r3
   10f0c:	ldr	r3, [pc, #152]	; 10fac <__assert_fail@plt+0x3f0>
   10f10:	add	r3, pc, r3
   10f14:	mov	r0, r3
   10f18:	bl	10a18 <printf@plt>
   10f1c:	ldr	r3, [pc, #132]	; 10fa8 <__assert_fail@plt+0x3ec>
   10f20:	ldr	r3, [r4, r3]
   10f24:	add	r3, r3, #4096	; 0x1000
   10f28:	ldr	r2, [r3, #3952]	; 0xf70
   10f2c:	ldr	r3, [fp, #-16]
   10f30:	lsl	r3, r3, #2
   10f34:	add	r3, r2, r3
   10f38:	ldr	r3, [r3]
   10f3c:	ldr	r3, [r3, #12]
   10f40:	ldr	r2, [fp, #-20]	; 0xffffffec
   10f44:	add	r3, r2, r3
   10f48:	str	r3, [fp, #-20]	; 0xffffffec
   10f4c:	ldr	r3, [fp, #-16]
   10f50:	add	r3, r3, #1
   10f54:	str	r3, [fp, #-16]
   10f58:	ldr	r3, [pc, #72]	; 10fa8 <__assert_fail@plt+0x3ec>
   10f5c:	ldr	r3, [r4, r3]
   10f60:	add	r3, r3, #4096	; 0x1000
   10f64:	ldr	r3, [r3, #3956]	; 0xf74
   10f68:	ldr	r2, [fp, #-16]
   10f6c:	cmp	r2, r3
   10f70:	blt	10ec0 <__assert_fail@plt+0x304>
   10f74:	ldr	r1, [fp, #-20]	; 0xffffffec
   10f78:	ldr	r3, [pc, #48]	; 10fb0 <__assert_fail@plt+0x3f4>
   10f7c:	add	r3, pc, r3
   10f80:	mov	r0, r3
   10f84:	bl	10a18 <printf@plt>
   10f88:	nop	{0}
   10f8c:	sub	sp, fp, #8
   10f90:	ldr	r4, [sp]
   10f94:	ldr	fp, [sp, #4]
   10f98:	add	sp, sp, #8
   10f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa0:	andeq	r8, r1, r0, ror #2
   10fa4:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10fa8:	ldrdeq	r0, [r0], -ip
   10fac:	andeq	r4, r0, r8, ror r0
   10fb0:	andeq	r4, r0, r8, lsl r0
   10fb4:	strd	r4, [sp, #-16]!
   10fb8:	str	fp, [sp, #8]
   10fbc:	str	lr, [sp, #12]
   10fc0:	add	fp, sp, #12
   10fc4:	ldr	r4, [pc, #160]	; 1106c <__assert_fail@plt+0x4b0>
   10fc8:	add	r4, pc, r4
   10fcc:	ldr	r3, [pc, #156]	; 11070 <__assert_fail@plt+0x4b4>
   10fd0:	ldr	r3, [r4, r3]
   10fd4:	mov	r0, r3
   10fd8:	bl	11b9c <__assert_fail@plt+0xfe0>
   10fdc:	ldr	r3, [pc, #140]	; 11070 <__assert_fail@plt+0x4b4>
   10fe0:	ldr	r3, [r4, r3]
   10fe4:	add	r3, r3, #4096	; 0x1000
   10fe8:	ldr	r0, [r3, #3956]	; 0xf74
   10fec:	ldr	r3, [pc, #124]	; 11070 <__assert_fail@plt+0x4b4>
   10ff0:	ldr	r3, [r4, r3]
   10ff4:	add	r3, r3, #4096	; 0x1000
   10ff8:	ldr	r1, [r3, #3952]	; 0xf70
   10ffc:	ldr	r3, [pc, #112]	; 11074 <__assert_fail@plt+0x4b8>
   11000:	ldr	r3, [r4, r3]
   11004:	mov	r2, r3
   11008:	bl	117f4 <__assert_fail@plt+0xc38>
   1100c:	bl	10e80 <__assert_fail@plt+0x2c4>
   11010:	ldr	r3, [pc, #96]	; 11078 <__assert_fail@plt+0x4bc>
   11014:	add	r3, pc, r3
   11018:	mov	r0, r3
   1101c:	bl	10ac0 <puts@plt>
   11020:	ldr	r3, [pc, #72]	; 11070 <__assert_fail@plt+0x4b4>
   11024:	ldr	r3, [r4, r3]
   11028:	add	r3, r3, #4096	; 0x1000
   1102c:	ldr	r0, [r3, #3956]	; 0xf74
   11030:	ldr	r3, [pc, #56]	; 11070 <__assert_fail@plt+0x4b4>
   11034:	ldr	r3, [r4, r3]
   11038:	add	r3, r3, #4096	; 0x1000
   1103c:	ldr	r1, [r3, #3952]	; 0xf70
   11040:	ldr	r3, [pc, #52]	; 1107c <__assert_fail@plt+0x4c0>
   11044:	ldr	r3, [r4, r3]
   11048:	mov	r2, r3
   1104c:	bl	117f4 <__assert_fail@plt+0xc38>
   11050:	bl	10e80 <__assert_fail@plt+0x2c4>
   11054:	nop	{0}
   11058:	sub	sp, fp, #12
   1105c:	ldrd	r4, [sp]
   11060:	ldr	fp, [sp, #8]
   11064:	add	sp, sp, #12
   11068:	pop	{pc}		; (ldr pc, [sp], #4)
   1106c:	andeq	r8, r1, r0, lsr r0
   11070:	ldrdeq	r0, [r0], -ip
   11074:	andeq	r0, r0, r4, ror #1
   11078:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   1107c:	andeq	r0, r0, r8, ror #1
   11080:	str	fp, [sp, #-8]!
   11084:	str	lr, [sp, #4]
   11088:	add	fp, sp, #4
   1108c:	sub	sp, sp, #16
   11090:	str	r0, [fp, #-16]
   11094:	str	r1, [fp, #-20]	; 0xffffffec
   11098:	sub	r0, fp, #16
   1109c:	mov	r3, #0
   110a0:	ldr	r2, [pc, #112]	; 11118 <__assert_fail@plt+0x55c>
   110a4:	add	r2, pc, r2
   110a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   110ac:	bl	12864 <__assert_fail@plt+0x1ca8>
   110b0:	ldr	r3, [fp, #-16]
   110b4:	cmp	r3, #0
   110b8:	bne	110cc <__assert_fail@plt+0x510>
   110bc:	ldr	r3, [pc, #88]	; 1111c <__assert_fail@plt+0x560>
   110c0:	add	r3, pc, r3
   110c4:	mov	r0, r3
   110c8:	bl	12950 <error@@Base>
   110cc:	mov	r3, #0
   110d0:	str	r3, [fp, #-8]
   110d4:	b	11100 <__assert_fail@plt+0x544>
   110d8:	ldr	r3, [fp, #-8]
   110dc:	lsl	r3, r3, #2
   110e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   110e4:	add	r3, r2, r3
   110e8:	ldr	r3, [r3]
   110ec:	mov	r0, r3
   110f0:	bl	10cb8 <__assert_fail@plt+0xfc>
   110f4:	ldr	r3, [fp, #-8]
   110f8:	add	r3, r3, #1
   110fc:	str	r3, [fp, #-8]
   11100:	ldr	r3, [fp, #-16]
   11104:	ldr	r2, [fp, #-8]
   11108:	cmp	r2, r3
   1110c:	blt	110d8 <__assert_fail@plt+0x51c>
   11110:	bl	10fb4 <__assert_fail@plt+0x3f8>
   11114:	bl	1293c <__assert_fail@plt+0x1d80>
   11118:	andeq	r3, r0, r4, lsl #30
   1111c:	andeq	r3, r0, ip, lsl #30
   11120:	push	{fp}		; (str fp, [sp, #-4]!)
   11124:	add	fp, sp, #0
   11128:	sub	sp, sp, #12
   1112c:	str	r0, [fp, #-8]
   11130:	ldr	r3, [fp, #-8]
   11134:	mov	r2, #0
   11138:	str	r2, [r3, #4]
   1113c:	ldr	r3, [fp, #-8]
   11140:	ldr	r2, [r3, #4]
   11144:	ldr	r3, [fp, #-8]
   11148:	str	r2, [r3]
   1114c:	ldr	r3, [fp, #-8]
   11150:	mov	r2, #0
   11154:	str	r2, [r3, #8]
   11158:	ldr	r3, [fp, #-8]
   1115c:	mov	r2, #0
   11160:	str	r2, [r3, #12]
   11164:	nop	{0}
   11168:	add	sp, fp, #0
   1116c:	pop	{fp}		; (ldr fp, [sp], #4)
   11170:	bx	lr
   11174:	str	fp, [sp, #-8]!
   11178:	str	lr, [sp, #4]
   1117c:	add	fp, sp, #4
   11180:	sub	sp, sp, #8
   11184:	str	r0, [fp, #-8]
   11188:	ldr	r3, [fp, #-8]
   1118c:	ldr	r3, [r3, #8]
   11190:	cmp	r3, #0
   11194:	beq	111b4 <__assert_fail@plt+0x5f8>
   11198:	ldr	r3, [fp, #-8]
   1119c:	ldr	r3, [r3, #8]
   111a0:	mov	r0, r3
   111a4:	bl	10a30 <free@plt>
   111a8:	ldr	r3, [fp, #-8]
   111ac:	mov	r2, #0
   111b0:	str	r2, [r3, #8]
   111b4:	nop	{0}
   111b8:	sub	sp, fp, #4
   111bc:	ldr	fp, [sp]
   111c0:	add	sp, sp, #4
   111c4:	pop	{pc}		; (ldr pc, [sp], #4)
   111c8:	str	fp, [sp, #-8]!
   111cc:	str	lr, [sp, #4]
   111d0:	add	fp, sp, #4
   111d4:	sub	sp, sp, #16
   111d8:	str	r0, [fp, #-8]
   111dc:	str	r1, [fp, #-12]
   111e0:	str	r2, [fp, #-16]
   111e4:	str	r3, [fp, #-20]	; 0xffffffec
   111e8:	ldr	r3, [fp, #-16]
   111ec:	ldr	r2, [fp, #-12]
   111f0:	str	r2, [r3]
   111f4:	ldr	r3, [fp, #-16]
   111f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   111fc:	str	r2, [r3, #4]
   11200:	ldr	r3, [fp, #-12]
   11204:	cmp	r3, #0
   11208:	beq	1121c <__assert_fail@plt+0x660>
   1120c:	ldr	r3, [fp, #-12]
   11210:	ldr	r2, [fp, #-16]
   11214:	str	r2, [r3, #4]
   11218:	b	11228 <__assert_fail@plt+0x66c>
   1121c:	ldr	r3, [fp, #-8]
   11220:	ldr	r2, [fp, #-16]
   11224:	str	r2, [r3]
   11228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1122c:	cmp	r3, #0
   11230:	beq	11244 <__assert_fail@plt+0x688>
   11234:	ldr	r3, [fp, #-20]	; 0xffffffec
   11238:	ldr	r2, [fp, #-16]
   1123c:	str	r2, [r3]
   11240:	b	11250 <__assert_fail@plt+0x694>
   11244:	ldr	r3, [fp, #-8]
   11248:	ldr	r2, [fp, #-16]
   1124c:	str	r2, [r3, #4]
   11250:	ldr	r0, [fp, #-8]
   11254:	bl	11174 <__assert_fail@plt+0x5b8>
   11258:	ldr	r3, [fp, #-8]
   1125c:	ldr	r3, [r3, #12]
   11260:	add	r2, r3, #1
   11264:	ldr	r3, [fp, #-8]
   11268:	str	r2, [r3, #12]
   1126c:	nop	{0}
   11270:	sub	sp, fp, #4
   11274:	ldr	fp, [sp]
   11278:	add	sp, sp, #4
   1127c:	pop	{pc}		; (ldr pc, [sp], #4)
   11280:	str	fp, [sp, #-8]!
   11284:	str	lr, [sp, #4]
   11288:	add	fp, sp, #4
   1128c:	sub	sp, sp, #8
   11290:	str	r0, [fp, #-8]
   11294:	str	r1, [fp, #-12]
   11298:	ldr	r3, [fp, #-8]
   1129c:	ldr	r3, [r3]
   112a0:	ldr	r2, [fp, #-12]
   112a4:	mov	r1, #0
   112a8:	ldr	r0, [fp, #-8]
   112ac:	bl	111c8 <__assert_fail@plt+0x60c>
   112b0:	nop	{0}
   112b4:	sub	sp, fp, #4
   112b8:	ldr	fp, [sp]
   112bc:	add	sp, sp, #4
   112c0:	pop	{pc}		; (ldr pc, [sp], #4)
   112c4:	str	fp, [sp, #-8]!
   112c8:	str	lr, [sp, #4]
   112cc:	add	fp, sp, #4
   112d0:	sub	sp, sp, #8
   112d4:	str	r0, [fp, #-8]
   112d8:	str	r1, [fp, #-12]
   112dc:	ldr	r3, [fp, #-8]
   112e0:	ldr	r1, [r3, #4]
   112e4:	mov	r3, #0
   112e8:	ldr	r2, [fp, #-12]
   112ec:	ldr	r0, [fp, #-8]
   112f0:	bl	111c8 <__assert_fail@plt+0x60c>
   112f4:	nop	{0}
   112f8:	sub	sp, fp, #4
   112fc:	ldr	fp, [sp]
   11300:	add	sp, sp, #4
   11304:	pop	{pc}		; (ldr pc, [sp], #4)
   11308:	str	fp, [sp, #-8]!
   1130c:	str	lr, [sp, #4]
   11310:	add	fp, sp, #4
   11314:	sub	sp, sp, #16
   11318:	str	r0, [fp, #-8]
   1131c:	str	r1, [fp, #-12]
   11320:	str	r2, [fp, #-16]
   11324:	ldr	r3, [fp, #-16]
   11328:	ldr	r1, [r3]
   1132c:	ldr	r3, [fp, #-16]
   11330:	ldr	r2, [fp, #-12]
   11334:	ldr	r0, [fp, #-8]
   11338:	bl	111c8 <__assert_fail@plt+0x60c>
   1133c:	nop	{0}
   11340:	sub	sp, fp, #4
   11344:	ldr	fp, [sp]
   11348:	add	sp, sp, #4
   1134c:	pop	{pc}		; (ldr pc, [sp], #4)
   11350:	str	fp, [sp, #-8]!
   11354:	str	lr, [sp, #4]
   11358:	add	fp, sp, #4
   1135c:	sub	sp, sp, #16
   11360:	str	r0, [fp, #-8]
   11364:	str	r1, [fp, #-12]
   11368:	str	r2, [fp, #-16]
   1136c:	ldr	r3, [fp, #-12]
   11370:	ldr	r3, [r3, #4]
   11374:	ldr	r2, [fp, #-16]
   11378:	ldr	r1, [fp, #-12]
   1137c:	ldr	r0, [fp, #-8]
   11380:	bl	111c8 <__assert_fail@plt+0x60c>
   11384:	nop	{0}
   11388:	sub	sp, fp, #4
   1138c:	ldr	fp, [sp]
   11390:	add	sp, sp, #4
   11394:	pop	{pc}		; (ldr pc, [sp], #4)
   11398:	str	fp, [sp, #-8]!
   1139c:	str	lr, [sp, #4]
   113a0:	add	fp, sp, #4
   113a4:	sub	sp, sp, #8
   113a8:	str	r0, [fp, #-8]
   113ac:	str	r1, [fp, #-12]
   113b0:	ldr	r3, [fp, #-12]
   113b4:	ldr	r3, [r3]
   113b8:	cmp	r3, #0
   113bc:	beq	113d8 <__assert_fail@plt+0x81c>
   113c0:	ldr	r3, [fp, #-12]
   113c4:	ldr	r3, [r3]
   113c8:	ldr	r2, [fp, #-12]
   113cc:	ldr	r2, [r2, #4]
   113d0:	str	r2, [r3, #4]
   113d4:	b	113e8 <__assert_fail@plt+0x82c>
   113d8:	ldr	r3, [fp, #-12]
   113dc:	ldr	r2, [r3, #4]
   113e0:	ldr	r3, [fp, #-8]
   113e4:	str	r2, [r3]
   113e8:	ldr	r3, [fp, #-12]
   113ec:	ldr	r3, [r3, #4]
   113f0:	cmp	r3, #0
   113f4:	beq	11410 <__assert_fail@plt+0x854>
   113f8:	ldr	r3, [fp, #-12]
   113fc:	ldr	r3, [r3, #4]
   11400:	ldr	r2, [fp, #-12]
   11404:	ldr	r2, [r2]
   11408:	str	r2, [r3]
   1140c:	b	11420 <__assert_fail@plt+0x864>
   11410:	ldr	r3, [fp, #-12]
   11414:	ldr	r2, [r3]
   11418:	ldr	r3, [fp, #-8]
   1141c:	str	r2, [r3, #4]
   11420:	ldr	r3, [fp, #-12]
   11424:	mov	r2, #0
   11428:	str	r2, [r3, #4]
   1142c:	ldr	r3, [fp, #-12]
   11430:	ldr	r2, [r3, #4]
   11434:	ldr	r3, [fp, #-12]
   11438:	str	r2, [r3]
   1143c:	ldr	r0, [fp, #-8]
   11440:	bl	11174 <__assert_fail@plt+0x5b8>
   11444:	ldr	r3, [fp, #-8]
   11448:	ldr	r3, [r3, #12]
   1144c:	sub	r2, r3, #1
   11450:	ldr	r3, [fp, #-8]
   11454:	str	r2, [r3, #12]
   11458:	nop	{0}
   1145c:	sub	sp, fp, #4
   11460:	ldr	fp, [sp]
   11464:	add	sp, sp, #4
   11468:	pop	{pc}		; (ldr pc, [sp], #4)
   1146c:	str	fp, [sp, #-8]!
   11470:	str	lr, [sp, #4]
   11474:	add	fp, sp, #4
   11478:	sub	sp, sp, #16
   1147c:	str	r0, [fp, #-16]
   11480:	mov	r3, #0
   11484:	str	r3, [fp, #-12]
   11488:	ldr	r3, [fp, #-16]
   1148c:	ldr	r3, [r3, #8]
   11490:	cmp	r3, #0
   11494:	bne	11518 <__assert_fail@plt+0x95c>
   11498:	ldr	r3, [fp, #-16]
   1149c:	ldr	r3, [r3, #12]
   114a0:	cmp	r3, #0
   114a4:	beq	11518 <__assert_fail@plt+0x95c>
   114a8:	ldr	r3, [fp, #-16]
   114ac:	ldr	r3, [r3, #12]
   114b0:	mov	r1, #4
   114b4:	mov	r0, r3
   114b8:	bl	11d30 <__assert_fail@plt+0x1174>
   114bc:	mov	r2, r0
   114c0:	ldr	r3, [fp, #-16]
   114c4:	str	r2, [r3, #8]
   114c8:	ldr	r3, [fp, #-16]
   114cc:	ldr	r3, [r3]
   114d0:	str	r3, [fp, #-8]
   114d4:	b	11508 <__assert_fail@plt+0x94c>
   114d8:	ldr	r3, [fp, #-16]
   114dc:	ldr	r2, [r3, #8]
   114e0:	ldr	r3, [fp, #-12]
   114e4:	add	r1, r3, #1
   114e8:	str	r1, [fp, #-12]
   114ec:	lsl	r3, r3, #2
   114f0:	add	r3, r2, r3
   114f4:	ldr	r2, [fp, #-8]
   114f8:	str	r2, [r3]
   114fc:	ldr	r3, [fp, #-8]
   11500:	ldr	r3, [r3, #4]
   11504:	str	r3, [fp, #-8]
   11508:	ldr	r3, [fp, #-8]
   1150c:	cmp	r3, #0
   11510:	bne	114d8 <__assert_fail@plt+0x91c>
   11514:	b	1151c <__assert_fail@plt+0x960>
   11518:	nop	{0}
   1151c:	sub	sp, fp, #4
   11520:	ldr	fp, [sp]
   11524:	add	sp, sp, #4
   11528:	pop	{pc}		; (ldr pc, [sp], #4)
   1152c:	str	fp, [sp, #-8]!
   11530:	str	lr, [sp, #4]
   11534:	add	fp, sp, #4
   11538:	sub	sp, sp, #16
   1153c:	str	r0, [fp, #-16]
   11540:	str	r1, [fp, #-20]	; 0xffffffec
   11544:	b	1156c <__assert_fail@plt+0x9b0>
   11548:	ldr	r3, [fp, #-16]
   1154c:	ldr	r3, [r3]
   11550:	str	r3, [fp, #-8]
   11554:	ldr	r1, [fp, #-8]
   11558:	ldr	r0, [fp, #-16]
   1155c:	bl	11398 <__assert_fail@plt+0x7dc>
   11560:	ldr	r3, [fp, #-20]	; 0xffffffec
   11564:	ldr	r0, [fp, #-8]
   11568:	blx	r3
   1156c:	ldr	r3, [fp, #-16]
   11570:	ldr	r3, [r3]
   11574:	cmp	r3, #0
   11578:	bne	11548 <__assert_fail@plt+0x98c>
   1157c:	nop	{0}
   11580:	sub	sp, fp, #4
   11584:	ldr	fp, [sp]
   11588:	add	sp, sp, #4
   1158c:	pop	{pc}		; (ldr pc, [sp], #4)
   11590:	str	fp, [sp, #-8]!
   11594:	str	lr, [sp, #4]
   11598:	add	fp, sp, #4
   1159c:	sub	sp, sp, #24
   115a0:	str	r0, [fp, #-24]	; 0xffffffe8
   115a4:	str	r1, [fp, #-28]	; 0xffffffe4
   115a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	str	r3, [fp, #-8]
   115b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   115b4:	str	r3, [fp, #-12]
   115b8:	ldr	r3, [pc, #524]	; 117cc <__assert_fail@plt+0xc10>
   115bc:	add	r3, pc, r3
   115c0:	ldr	r2, [r3]
   115c4:	ldr	r3, [fp, #-8]
   115c8:	lsl	r3, r3, #2
   115cc:	add	r3, r2, r3
   115d0:	ldr	r3, [r3]
   115d4:	str	r3, [fp, #-16]
   115d8:	b	11738 <__assert_fail@plt+0xb7c>
   115dc:	ldr	r3, [fp, #-12]
   115e0:	sub	r3, r3, #1
   115e4:	str	r3, [fp, #-12]
   115e8:	ldr	r2, [fp, #-8]
   115ec:	ldr	r3, [fp, #-12]
   115f0:	cmp	r2, r3
   115f4:	bge	11638 <__assert_fail@plt+0xa7c>
   115f8:	ldr	r3, [pc, #464]	; 117d0 <__assert_fail@plt+0xc14>
   115fc:	add	r3, pc, r3
   11600:	ldr	r3, [r3]
   11604:	ldr	r2, [pc, #456]	; 117d4 <__assert_fail@plt+0xc18>
   11608:	add	r2, pc, r2
   1160c:	ldr	r1, [r2]
   11610:	ldr	r2, [fp, #-12]
   11614:	lsl	r2, r2, #2
   11618:	add	r2, r1, r2
   1161c:	ldr	r2, [r2]
   11620:	mov	r1, r2
   11624:	ldr	r0, [fp, #-16]
   11628:	blx	r3
   1162c:	mov	r3, r0
   11630:	cmp	r3, #0
   11634:	blt	115dc <__assert_fail@plt+0xa20>
   11638:	ldr	r2, [fp, #-8]
   1163c:	ldr	r3, [fp, #-12]
   11640:	cmp	r2, r3
   11644:	beq	11698 <__assert_fail@plt+0xadc>
   11648:	ldr	r3, [pc, #392]	; 117d8 <__assert_fail@plt+0xc1c>
   1164c:	add	r3, pc, r3
   11650:	ldr	r2, [r3]
   11654:	ldr	r3, [fp, #-12]
   11658:	lsl	r3, r3, #2
   1165c:	add	r2, r2, r3
   11660:	ldr	r3, [pc, #372]	; 117dc <__assert_fail@plt+0xc20>
   11664:	add	r3, pc, r3
   11668:	ldr	r1, [r3]
   1166c:	ldr	r3, [fp, #-8]
   11670:	add	r0, r3, #1
   11674:	str	r0, [fp, #-8]
   11678:	lsl	r3, r3, #2
   1167c:	add	r3, r1, r3
   11680:	ldr	r2, [r2]
   11684:	str	r2, [r3]
   11688:	b	11698 <__assert_fail@plt+0xadc>
   1168c:	ldr	r3, [fp, #-8]
   11690:	add	r3, r3, #1
   11694:	str	r3, [fp, #-8]
   11698:	ldr	r2, [fp, #-8]
   1169c:	ldr	r3, [fp, #-12]
   116a0:	cmp	r2, r3
   116a4:	bge	116e8 <__assert_fail@plt+0xb2c>
   116a8:	ldr	r3, [pc, #304]	; 117e0 <__assert_fail@plt+0xc24>
   116ac:	add	r3, pc, r3
   116b0:	ldr	r3, [r3]
   116b4:	ldr	r2, [pc, #296]	; 117e4 <__assert_fail@plt+0xc28>
   116b8:	add	r2, pc, r2
   116bc:	ldr	r1, [r2]
   116c0:	ldr	r2, [fp, #-8]
   116c4:	lsl	r2, r2, #2
   116c8:	add	r2, r1, r2
   116cc:	ldr	r2, [r2]
   116d0:	mov	r1, r2
   116d4:	ldr	r0, [fp, #-16]
   116d8:	blx	r3
   116dc:	mov	r3, r0
   116e0:	cmp	r3, #0
   116e4:	bgt	1168c <__assert_fail@plt+0xad0>
   116e8:	ldr	r2, [fp, #-8]
   116ec:	ldr	r3, [fp, #-12]
   116f0:	cmp	r2, r3
   116f4:	beq	11738 <__assert_fail@plt+0xb7c>
   116f8:	ldr	r3, [pc, #232]	; 117e8 <__assert_fail@plt+0xc2c>
   116fc:	add	r3, pc, r3
   11700:	ldr	r2, [r3]
   11704:	ldr	r3, [fp, #-8]
   11708:	lsl	r3, r3, #2
   1170c:	add	r2, r2, r3
   11710:	ldr	r3, [pc, #212]	; 117ec <__assert_fail@plt+0xc30>
   11714:	add	r3, pc, r3
   11718:	ldr	r1, [r3]
   1171c:	ldr	r3, [fp, #-12]
   11720:	sub	r0, r3, #1
   11724:	str	r0, [fp, #-12]
   11728:	lsl	r3, r3, #2
   1172c:	add	r3, r1, r3
   11730:	ldr	r2, [r2]
   11734:	str	r2, [r3]
   11738:	ldr	r2, [fp, #-8]
   1173c:	ldr	r3, [fp, #-12]
   11740:	cmp	r2, r3
   11744:	blt	115e8 <__assert_fail@plt+0xa2c>
   11748:	ldr	r3, [pc, #160]	; 117f0 <__assert_fail@plt+0xc34>
   1174c:	add	r3, pc, r3
   11750:	ldr	r2, [r3]
   11754:	ldr	r3, [fp, #-12]
   11758:	lsl	r3, r3, #2
   1175c:	add	r3, r2, r3
   11760:	ldr	r2, [fp, #-16]
   11764:	str	r2, [r3]
   11768:	ldr	r3, [fp, #-12]
   1176c:	sub	r3, r3, #1
   11770:	str	r3, [fp, #-12]
   11774:	ldr	r2, [fp, #-12]
   11778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1177c:	cmp	r2, r3
   11780:	ble	11790 <__assert_fail@plt+0xbd4>
   11784:	ldr	r1, [fp, #-12]
   11788:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1178c:	bl	11590 <__assert_fail@plt+0x9d4>
   11790:	ldr	r3, [fp, #-8]
   11794:	add	r3, r3, #1
   11798:	str	r3, [fp, #-8]
   1179c:	ldr	r2, [fp, #-8]
   117a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117a4:	cmp	r2, r3
   117a8:	bge	117b8 <__assert_fail@plt+0xbfc>
   117ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   117b0:	ldr	r0, [fp, #-8]
   117b4:	bl	11590 <__assert_fail@plt+0x9d4>
   117b8:	nop	{0}
   117bc:	sub	sp, fp, #4
   117c0:	ldr	fp, [sp]
   117c4:	add	sp, sp, #4
   117c8:	pop	{pc}		; (ldr pc, [sp], #4)
   117cc:	andeq	r7, r1, r8, asr #22
   117d0:	andeq	r7, r1, ip, lsl #22
   117d4:	strdeq	r7, [r1], -ip
   117d8:			; <UNDEFINED> instruction: 0x00017ab8
   117dc:	andeq	r7, r1, r0, lsr #21
   117e0:	andeq	r7, r1, ip, asr sl
   117e4:	andeq	r7, r1, ip, asr #20
   117e8:	andeq	r7, r1, r8, lsl #20
   117ec:	strdeq	r7, [r1], -r0
   117f0:			; <UNDEFINED> instruction: 0x000179b8
   117f4:	str	fp, [sp, #-8]!
   117f8:	str	lr, [sp, #4]
   117fc:	add	fp, sp, #4
   11800:	sub	sp, sp, #16
   11804:	str	r0, [fp, #-8]
   11808:	str	r1, [fp, #-12]
   1180c:	str	r2, [fp, #-16]
   11810:	ldr	r3, [fp, #-8]
   11814:	cmp	r3, #1
   11818:	ble	11854 <__assert_fail@plt+0xc98>
   1181c:	ldr	r3, [pc, #68]	; 11868 <__assert_fail@plt+0xcac>
   11820:	add	r3, pc, r3
   11824:	ldr	r2, [fp, #-12]
   11828:	str	r2, [r3]
   1182c:	ldr	r3, [pc, #56]	; 1186c <__assert_fail@plt+0xcb0>
   11830:	add	r3, pc, r3
   11834:	ldr	r2, [fp, #-16]
   11838:	str	r2, [r3]
   1183c:	ldr	r3, [fp, #-8]
   11840:	sub	r3, r3, #1
   11844:	mov	r1, r3
   11848:	mov	r0, #0
   1184c:	bl	11590 <__assert_fail@plt+0x9d4>
   11850:	b	11858 <__assert_fail@plt+0xc9c>
   11854:	nop	{0}
   11858:	sub	sp, fp, #4
   1185c:	ldr	fp, [sp]
   11860:	add	sp, sp, #4
   11864:	pop	{pc}		; (ldr pc, [sp], #4)
   11868:	andeq	r7, r1, r4, ror #17
   1186c:	ldrdeq	r7, [r1], -r8
   11870:	str	fp, [sp, #-8]!
   11874:	str	lr, [sp, #4]
   11878:	add	fp, sp, #4
   1187c:	sub	sp, sp, #16
   11880:	str	r0, [fp, #-16]
   11884:	mov	r3, #0
   11888:	strh	r3, [fp, #-6]
   1188c:	b	118bc <__assert_fail@plt+0xd00>
   11890:	ldrsh	r3, [fp, #-6]
   11894:	lsl	r3, r3, #4
   11898:	ldr	r2, [fp, #-16]
   1189c:	add	r3, r2, r3
   118a0:	mov	r0, r3
   118a4:	bl	11120 <__assert_fail@plt+0x564>
   118a8:	ldrsh	r3, [fp, #-6]
   118ac:	uxth	r3, r3
   118b0:	add	r3, r3, #1
   118b4:	uxth	r3, r3
   118b8:	strh	r3, [fp, #-6]
   118bc:	ldrsh	r3, [fp, #-6]
   118c0:	movw	r2, #502	; 0x1f6
   118c4:	cmp	r3, r2
   118c8:	ble	11890 <__assert_fail@plt+0xcd4>
   118cc:	ldr	r3, [fp, #-16]
   118d0:	add	r3, r3, #4096	; 0x1000
   118d4:	mov	r2, r3
   118d8:	mov	r3, #0
   118dc:	str	r3, [r2, #3952]	; 0xf70
   118e0:	ldr	r3, [fp, #-16]
   118e4:	add	r3, r3, #4096	; 0x1000
   118e8:	mov	r2, r3
   118ec:	mov	r3, #0
   118f0:	str	r3, [r2, #3956]	; 0xf74
   118f4:	nop	{0}
   118f8:	sub	sp, fp, #4
   118fc:	ldr	fp, [sp]
   11900:	add	sp, sp, #4
   11904:	pop	{pc}		; (ldr pc, [sp], #4)
   11908:	push	{fp}		; (str fp, [sp, #-4]!)
   1190c:	add	fp, sp, #0
   11910:	sub	sp, sp, #28
   11914:	str	r0, [fp, #-24]	; 0xffffffe8
   11918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1191c:	str	r3, [fp, #-16]
   11920:	mov	r3, #0
   11924:	str	r3, [fp, #-12]
   11928:	mov	r3, #0
   1192c:	str	r3, [fp, #-8]
   11930:	b	11960 <__assert_fail@plt+0xda4>
   11934:	ldr	r3, [fp, #-8]
   11938:	ldr	r2, [fp, #-16]
   1193c:	add	r3, r2, r3
   11940:	ldrb	r3, [r3]
   11944:	mov	r2, r3
   11948:	ldr	r3, [fp, #-12]
   1194c:	add	r3, r3, r2
   11950:	str	r3, [fp, #-12]
   11954:	ldr	r3, [fp, #-8]
   11958:	add	r3, r3, #1
   1195c:	str	r3, [fp, #-8]
   11960:	ldr	r3, [fp, #-8]
   11964:	ldr	r2, [fp, #-16]
   11968:	add	r3, r2, r3
   1196c:	ldrb	r3, [r3]
   11970:	cmp	r3, #0
   11974:	bne	11934 <__assert_fail@plt+0xd78>
   11978:	ldr	r3, [fp, #-12]
   1197c:	movw	r2, #20065	; 0x4e61
   11980:	movt	r2, #33354	; 0x824a
   11984:	smull	r1, r2, r2, r3
   11988:	add	r2, r2, r3
   1198c:	asr	r1, r2, #8
   11990:	asr	r2, r3, #31
   11994:	sub	r2, r1, r2
   11998:	movw	r1, #503	; 0x1f7
   1199c:	mul	r2, r1, r2
   119a0:	sub	r2, r3, r2
   119a4:	sxth	r3, r2
   119a8:	mov	r0, r3
   119ac:	add	sp, fp, #0
   119b0:	pop	{fp}		; (ldr fp, [sp], #4)
   119b4:	bx	lr
   119b8:	str	fp, [sp, #-8]!
   119bc:	str	lr, [sp, #4]
   119c0:	add	fp, sp, #4
   119c4:	sub	sp, sp, #16
   119c8:	str	r0, [fp, #-16]
   119cc:	str	r1, [fp, #-20]	; 0xffffffec
   119d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   119d4:	bl	11908 <__assert_fail@plt+0xd4c>
   119d8:	mov	r3, r0
   119dc:	mov	r2, r3
   119e0:	ldr	r3, [fp, #-16]
   119e4:	ldr	r3, [r3, r2, lsl #4]
   119e8:	str	r3, [fp, #-8]
   119ec:	b	119fc <__assert_fail@plt+0xe40>
   119f0:	ldr	r3, [fp, #-8]
   119f4:	ldr	r3, [r3, #4]
   119f8:	str	r3, [fp, #-8]
   119fc:	ldr	r3, [fp, #-8]
   11a00:	cmp	r3, #0
   11a04:	beq	11a28 <__assert_fail@plt+0xe6c>
   11a08:	ldr	r3, [fp, #-8]
   11a0c:	ldr	r3, [r3, #8]
   11a10:	mov	r1, r3
   11a14:	ldr	r0, [fp, #-20]	; 0xffffffec
   11a18:	bl	10a0c <strcmp@plt>
   11a1c:	mov	r3, r0
   11a20:	cmp	r3, #0
   11a24:	bne	119f0 <__assert_fail@plt+0xe34>
   11a28:	ldr	r3, [fp, #-8]
   11a2c:	mov	r0, r3
   11a30:	sub	sp, fp, #4
   11a34:	ldr	fp, [sp]
   11a38:	add	sp, sp, #4
   11a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a40:	str	fp, [sp, #-8]!
   11a44:	str	lr, [sp, #4]
   11a48:	add	fp, sp, #4
   11a4c:	sub	sp, sp, #8
   11a50:	str	r0, [fp, #-8]
   11a54:	ldr	r3, [fp, #-8]
   11a58:	add	r3, r3, #4096	; 0x1000
   11a5c:	ldr	r3, [r3, #3952]	; 0xf70
   11a60:	cmp	r3, #0
   11a64:	beq	11a90 <__assert_fail@plt+0xed4>
   11a68:	ldr	r3, [fp, #-8]
   11a6c:	add	r3, r3, #4096	; 0x1000
   11a70:	ldr	r3, [r3, #3952]	; 0xf70
   11a74:	mov	r0, r3
   11a78:	bl	10a30 <free@plt>
   11a7c:	ldr	r3, [fp, #-8]
   11a80:	add	r3, r3, #4096	; 0x1000
   11a84:	mov	r2, r3
   11a88:	mov	r3, #0
   11a8c:	str	r3, [r2, #3952]	; 0xf70
   11a90:	nop	{0}
   11a94:	sub	sp, fp, #4
   11a98:	ldr	fp, [sp]
   11a9c:	add	sp, sp, #4
   11aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   11aa4:	str	fp, [sp, #-8]!
   11aa8:	str	lr, [sp, #4]
   11aac:	add	fp, sp, #4
   11ab0:	sub	sp, sp, #8
   11ab4:	str	r0, [fp, #-8]
   11ab8:	str	r1, [fp, #-12]
   11abc:	ldr	r3, [fp, #-12]
   11ac0:	ldr	r3, [r3, #8]
   11ac4:	mov	r0, r3
   11ac8:	bl	11908 <__assert_fail@plt+0xd4c>
   11acc:	mov	r3, r0
   11ad0:	lsl	r3, r3, #4
   11ad4:	ldr	r2, [fp, #-8]
   11ad8:	add	r3, r2, r3
   11adc:	ldr	r1, [fp, #-12]
   11ae0:	mov	r0, r3
   11ae4:	bl	11280 <__assert_fail@plt+0x6c4>
   11ae8:	ldr	r0, [fp, #-8]
   11aec:	bl	11a40 <__assert_fail@plt+0xe84>
   11af0:	ldr	r3, [fp, #-8]
   11af4:	add	r3, r3, #4096	; 0x1000
   11af8:	ldr	r3, [r3, #3956]	; 0xf74
   11afc:	add	r3, r3, #1
   11b00:	ldr	r2, [fp, #-8]
   11b04:	add	r2, r2, #4096	; 0x1000
   11b08:	str	r3, [r2, #3956]	; 0xf74
   11b0c:	nop	{0}
   11b10:	sub	sp, fp, #4
   11b14:	ldr	fp, [sp]
   11b18:	add	sp, sp, #4
   11b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b20:	str	fp, [sp, #-8]!
   11b24:	str	lr, [sp, #4]
   11b28:	add	fp, sp, #4
   11b2c:	sub	sp, sp, #8
   11b30:	str	r0, [fp, #-8]
   11b34:	str	r1, [fp, #-12]
   11b38:	ldr	r3, [fp, #-12]
   11b3c:	ldr	r3, [r3, #8]
   11b40:	mov	r0, r3
   11b44:	bl	11908 <__assert_fail@plt+0xd4c>
   11b48:	mov	r3, r0
   11b4c:	lsl	r3, r3, #4
   11b50:	ldr	r2, [fp, #-8]
   11b54:	add	r3, r2, r3
   11b58:	ldr	r1, [fp, #-12]
   11b5c:	mov	r0, r3
   11b60:	bl	11398 <__assert_fail@plt+0x7dc>
   11b64:	ldr	r0, [fp, #-8]
   11b68:	bl	11a40 <__assert_fail@plt+0xe84>
   11b6c:	ldr	r3, [fp, #-8]
   11b70:	add	r3, r3, #4096	; 0x1000
   11b74:	ldr	r3, [r3, #3956]	; 0xf74
   11b78:	sub	r3, r3, #1
   11b7c:	ldr	r2, [fp, #-8]
   11b80:	add	r2, r2, #4096	; 0x1000
   11b84:	str	r3, [r2, #3956]	; 0xf74
   11b88:	nop	{0}
   11b8c:	sub	sp, fp, #4
   11b90:	ldr	fp, [sp]
   11b94:	add	sp, sp, #4
   11b98:	pop	{pc}		; (ldr pc, [sp], #4)
   11b9c:	str	fp, [sp, #-8]!
   11ba0:	str	lr, [sp, #4]
   11ba4:	add	fp, sp, #4
   11ba8:	sub	sp, sp, #24
   11bac:	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	mov	r3, #0
   11bb4:	str	r3, [fp, #-16]
   11bb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bbc:	add	r3, r3, #4096	; 0x1000
   11bc0:	ldr	r3, [r3, #3952]	; 0xf70
   11bc4:	cmp	r3, #0
   11bc8:	bne	11c88 <__assert_fail@plt+0x10cc>
   11bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bd0:	add	r3, r3, #4096	; 0x1000
   11bd4:	ldr	r3, [r3, #3956]	; 0xf74
   11bd8:	cmp	r3, #0
   11bdc:	beq	11c88 <__assert_fail@plt+0x10cc>
   11be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11be4:	add	r3, r3, #4096	; 0x1000
   11be8:	ldr	r3, [r3, #3956]	; 0xf74
   11bec:	mov	r1, #4
   11bf0:	mov	r0, r3
   11bf4:	bl	11d30 <__assert_fail@plt+0x1174>
   11bf8:	mov	r2, r0
   11bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c00:	add	r3, r3, #4096	; 0x1000
   11c04:	str	r2, [r3, #3952]	; 0xf70
   11c08:	mov	r3, #0
   11c0c:	str	r3, [fp, #-12]
   11c10:	b	11c74 <__assert_fail@plt+0x10b8>
   11c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c18:	ldr	r2, [fp, #-12]
   11c1c:	ldr	r3, [r3, r2, lsl #4]
   11c20:	str	r3, [fp, #-8]
   11c24:	b	11c5c <__assert_fail@plt+0x10a0>
   11c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c2c:	add	r3, r3, #4096	; 0x1000
   11c30:	ldr	r2, [r3, #3952]	; 0xf70
   11c34:	ldr	r3, [fp, #-16]
   11c38:	add	r1, r3, #1
   11c3c:	str	r1, [fp, #-16]
   11c40:	lsl	r3, r3, #2
   11c44:	add	r3, r2, r3
   11c48:	ldr	r2, [fp, #-8]
   11c4c:	str	r2, [r3]
   11c50:	ldr	r3, [fp, #-8]
   11c54:	ldr	r3, [r3, #4]
   11c58:	str	r3, [fp, #-8]
   11c5c:	ldr	r3, [fp, #-8]
   11c60:	cmp	r3, #0
   11c64:	bne	11c28 <__assert_fail@plt+0x106c>
   11c68:	ldr	r3, [fp, #-12]
   11c6c:	add	r3, r3, #1
   11c70:	str	r3, [fp, #-12]
   11c74:	ldr	r3, [fp, #-12]
   11c78:	movw	r2, #502	; 0x1f6
   11c7c:	cmp	r3, r2
   11c80:	ble	11c14 <__assert_fail@plt+0x1058>
   11c84:	b	11c8c <__assert_fail@plt+0x10d0>
   11c88:	nop	{0}
   11c8c:	sub	sp, fp, #4
   11c90:	ldr	fp, [sp]
   11c94:	add	sp, sp, #4
   11c98:	pop	{pc}		; (ldr pc, [sp], #4)
   11c9c:	str	fp, [sp, #-8]!
   11ca0:	str	lr, [sp, #4]
   11ca4:	add	fp, sp, #4
   11ca8:	sub	sp, sp, #16
   11cac:	str	r0, [fp, #-16]
   11cb0:	str	r1, [fp, #-20]	; 0xffffffec
   11cb4:	mov	r3, #0
   11cb8:	strh	r3, [fp, #-6]
   11cbc:	b	11cf0 <__assert_fail@plt+0x1134>
   11cc0:	ldrsh	r3, [fp, #-6]
   11cc4:	lsl	r3, r3, #4
   11cc8:	ldr	r2, [fp, #-16]
   11ccc:	add	r3, r2, r3
   11cd0:	ldr	r1, [fp, #-20]	; 0xffffffec
   11cd4:	mov	r0, r3
   11cd8:	bl	1152c <__assert_fail@plt+0x970>
   11cdc:	ldrsh	r3, [fp, #-6]
   11ce0:	uxth	r3, r3
   11ce4:	add	r3, r3, #1
   11ce8:	uxth	r3, r3
   11cec:	strh	r3, [fp, #-6]
   11cf0:	ldrsh	r3, [fp, #-6]
   11cf4:	movw	r2, #502	; 0x1f6
   11cf8:	cmp	r3, r2
   11cfc:	ble	11cc0 <__assert_fail@plt+0x1104>
   11d00:	ldr	r0, [fp, #-16]
   11d04:	bl	11a40 <__assert_fail@plt+0xe84>
   11d08:	ldr	r3, [fp, #-16]
   11d0c:	add	r3, r3, #4096	; 0x1000
   11d10:	mov	r2, r3
   11d14:	mov	r3, #0
   11d18:	str	r3, [r2, #3956]	; 0xf74
   11d1c:	nop	{0}
   11d20:	sub	sp, fp, #4
   11d24:	ldr	fp, [sp]
   11d28:	add	sp, sp, #4
   11d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d30:	str	fp, [sp, #-8]!
   11d34:	str	lr, [sp, #4]
   11d38:	add	fp, sp, #4
   11d3c:	sub	sp, sp, #16
   11d40:	str	r0, [fp, #-16]
   11d44:	str	r1, [fp, #-20]	; 0xffffffec
   11d48:	ldr	r1, [fp, #-20]	; 0xffffffec
   11d4c:	ldr	r0, [fp, #-16]
   11d50:	bl	10a00 <calloc@plt>
   11d54:	mov	r3, r0
   11d58:	str	r3, [fp, #-8]
   11d5c:	ldr	r3, [fp, #-8]
   11d60:	cmp	r3, #0
   11d64:	bne	11d78 <__assert_fail@plt+0x11bc>
   11d68:	ldr	r3, [pc, #32]	; 11d90 <__assert_fail@plt+0x11d4>
   11d6c:	add	r3, pc, r3
   11d70:	mov	r0, r3
   11d74:	bl	12950 <error@@Base>
   11d78:	ldr	r3, [fp, #-8]
   11d7c:	mov	r0, r3
   11d80:	sub	sp, fp, #4
   11d84:	ldr	fp, [sp]
   11d88:	add	sp, sp, #4
   11d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d90:	andeq	r3, r0, r8, ror r2
   11d94:	push	{fp}		; (str fp, [sp, #-4]!)
   11d98:	add	fp, sp, #0
   11d9c:	sub	sp, sp, #20
   11da0:	str	r0, [fp, #-16]
   11da4:	str	r1, [fp, #-20]	; 0xffffffec
   11da8:	mov	r3, #0
   11dac:	str	r3, [fp, #-8]
   11db0:	b	11dc0 <__assert_fail@plt+0x1204>
   11db4:	ldr	r3, [fp, #-8]
   11db8:	add	r3, r3, #1
   11dbc:	str	r3, [fp, #-8]
   11dc0:	ldr	r3, [fp, #-8]
   11dc4:	ldr	r2, [fp, #-16]
   11dc8:	add	r3, r2, r3
   11dcc:	ldrb	r3, [r3]
   11dd0:	cmp	r3, #0
   11dd4:	beq	11e00 <__assert_fail@plt+0x1244>
   11dd8:	ldr	r3, [fp, #-8]
   11ddc:	ldr	r2, [fp, #-16]
   11de0:	add	r3, r2, r3
   11de4:	ldrb	r2, [r3]
   11de8:	ldr	r3, [fp, #-8]
   11dec:	ldr	r1, [fp, #-20]	; 0xffffffec
   11df0:	add	r3, r1, r3
   11df4:	ldrb	r3, [r3]
   11df8:	cmp	r2, r3
   11dfc:	beq	11db4 <__assert_fail@plt+0x11f8>
   11e00:	ldr	r3, [fp, #-8]
   11e04:	ldr	r2, [fp, #-16]
   11e08:	add	r3, r2, r3
   11e0c:	ldrb	r3, [r3]
   11e10:	cmp	r3, #0
   11e14:	bne	11e30 <__assert_fail@plt+0x1274>
   11e18:	ldr	r3, [fp, #-8]
   11e1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11e20:	add	r3, r2, r3
   11e24:	ldrb	r3, [r3]
   11e28:	cmp	r3, #0
   11e2c:	beq	11e68 <__assert_fail@plt+0x12ac>
   11e30:	ldr	r3, [fp, #-8]
   11e34:	ldr	r2, [fp, #-16]
   11e38:	add	r3, r2, r3
   11e3c:	ldrb	r2, [r3]
   11e40:	ldr	r3, [fp, #-8]
   11e44:	ldr	r1, [fp, #-20]	; 0xffffffec
   11e48:	add	r3, r1, r3
   11e4c:	ldrb	r3, [r3]
   11e50:	cmp	r2, r3
   11e54:	bcs	11e60 <__assert_fail@plt+0x12a4>
   11e58:	mvn	r3, #0
   11e5c:	b	11e6c <__assert_fail@plt+0x12b0>
   11e60:	mov	r3, #1
   11e64:	b	11e6c <__assert_fail@plt+0x12b0>
   11e68:	mov	r3, #0
   11e6c:	mov	r0, r3
   11e70:	add	sp, fp, #0
   11e74:	pop	{fp}		; (ldr fp, [sp], #4)
   11e78:	bx	lr
   11e7c:	str	fp, [sp, #-8]!
   11e80:	str	lr, [sp, #4]
   11e84:	add	fp, sp, #4
   11e88:	sub	sp, sp, #16
   11e8c:	str	r0, [fp, #-16]
   11e90:	str	r1, [fp, #-20]	; 0xffffffec
   11e94:	ldr	r3, [pc, #172]	; 11f48 <__assert_fail@plt+0x138c>
   11e98:	add	r3, pc, r3
   11e9c:	ldr	r2, [fp, #-16]
   11ea0:	cmp	r2, #0
   11ea4:	bne	11ed8 <__assert_fail@plt+0x131c>
   11ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11eac:	ldrb	r2, [r2]
   11eb0:	cmp	r2, #114	; 0x72
   11eb4:	bne	11ec8 <__assert_fail@plt+0x130c>
   11eb8:	ldr	r2, [pc, #140]	; 11f4c <__assert_fail@plt+0x1390>
   11ebc:	ldr	r3, [r3, r2]
   11ec0:	ldr	r3, [r3]
   11ec4:	b	11f34 <__assert_fail@plt+0x1378>
   11ec8:	ldr	r2, [pc, #128]	; 11f50 <__assert_fail@plt+0x1394>
   11ecc:	ldr	r3, [r3, r2]
   11ed0:	ldr	r3, [r3]
   11ed4:	b	11f34 <__assert_fail@plt+0x1378>
   11ed8:	ldr	r1, [fp, #-20]	; 0xffffffec
   11edc:	ldr	r0, [fp, #-16]
   11ee0:	bl	10a24 <fopen@plt>
   11ee4:	str	r0, [fp, #-8]
   11ee8:	ldr	r3, [fp, #-8]
   11eec:	cmp	r3, #0
   11ef0:	beq	11efc <__assert_fail@plt+0x1340>
   11ef4:	ldr	r3, [fp, #-8]
   11ef8:	b	11f34 <__assert_fail@plt+0x1378>
   11efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f00:	ldrb	r3, [r3]
   11f04:	cmp	r3, #119	; 0x77
   11f08:	bne	11f20 <__assert_fail@plt+0x1364>
   11f0c:	ldr	r1, [fp, #-16]
   11f10:	ldr	r3, [pc, #60]	; 11f54 <__assert_fail@plt+0x1398>
   11f14:	add	r3, pc, r3
   11f18:	mov	r0, r3
   11f1c:	bl	129c0 <error@@Base+0x70>
   11f20:	ldr	r1, [fp, #-16]
   11f24:	ldr	r3, [pc, #44]	; 11f58 <__assert_fail@plt+0x139c>
   11f28:	add	r3, pc, r3
   11f2c:	mov	r0, r3
   11f30:	bl	129c0 <error@@Base+0x70>
   11f34:	mov	r0, r3
   11f38:	sub	sp, fp, #4
   11f3c:	ldr	fp, [sp]
   11f40:	add	sp, sp, #4
   11f44:	pop	{pc}		; (ldr pc, [sp], #4)
   11f48:	andeq	r7, r1, r0, ror #2
   11f4c:	ldrdeq	r0, [r0], -r4
   11f50:	ldrdeq	r0, [r0], -r8
   11f54:	andeq	r3, r0, ip, ror #1
   11f58:	strdeq	r3, [r0], -r0
   11f5c:	str	fp, [sp, #-8]!
   11f60:	str	lr, [sp, #4]
   11f64:	add	fp, sp, #4
   11f68:	sub	sp, sp, #8
   11f6c:	str	r0, [fp, #-8]
   11f70:	ldr	r3, [pc, #76]	; 11fc4 <__assert_fail@plt+0x1408>
   11f74:	add	r3, pc, r3
   11f78:	ldr	r2, [pc, #72]	; 11fc8 <__assert_fail@plt+0x140c>
   11f7c:	ldr	r2, [r3, r2]
   11f80:	ldr	r2, [r2]
   11f84:	ldr	r1, [fp, #-8]
   11f88:	cmp	r1, r2
   11f8c:	beq	11fb0 <__assert_fail@plt+0x13f4>
   11f90:	ldr	r2, [pc, #52]	; 11fcc <__assert_fail@plt+0x1410>
   11f94:	ldr	r3, [r3, r2]
   11f98:	ldr	r3, [r3]
   11f9c:	ldr	r2, [fp, #-8]
   11fa0:	cmp	r2, r3
   11fa4:	beq	11fb0 <__assert_fail@plt+0x13f4>
   11fa8:	ldr	r0, [fp, #-8]
   11fac:	bl	10b44 <fclose@plt>
   11fb0:	nop	{0}
   11fb4:	sub	sp, fp, #4
   11fb8:	ldr	fp, [sp]
   11fbc:	add	sp, sp, #4
   11fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc4:	andeq	r7, r1, r4, lsl #1
   11fc8:	ldrdeq	r0, [r0], -r4
   11fcc:	ldrdeq	r0, [r0], -r8
   11fd0:	str	fp, [sp, #-8]!
   11fd4:	str	lr, [sp, #4]
   11fd8:	add	fp, sp, #4
   11fdc:	sub	sp, sp, #96	; 0x60
   11fe0:	str	r0, [fp, #-96]	; 0xffffffa0
   11fe4:	sub	r3, fp, #92	; 0x5c
   11fe8:	mov	r1, r3
   11fec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11ff0:	bl	14f68 <error@@Base+0x2618>
   11ff4:	mov	r3, r0
   11ff8:	cmp	r3, #0
   11ffc:	moveq	r3, #1
   12000:	movne	r3, #0
   12004:	uxtb	r3, r3
   12008:	mov	r0, r3
   1200c:	sub	sp, fp, #4
   12010:	ldr	fp, [sp]
   12014:	add	sp, sp, #4
   12018:	pop	{pc}		; (ldr pc, [sp], #4)
   1201c:	str	r4, [sp, #-12]!
   12020:	str	fp, [sp, #4]
   12024:	str	lr, [sp, #8]
   12028:	add	fp, sp, #8
   1202c:	sub	sp, sp, #124	; 0x7c
   12030:	mov	r3, r0
   12034:	strh	r3, [fp, #-120]	; 0xffffff88
   12038:	ldr	r2, [pc, #92]	; 1209c <__assert_fail@plt+0x14e0>
   1203c:	add	r2, pc, r2
   12040:	ldr	r3, [pc, #88]	; 120a0 <__assert_fail@plt+0x14e4>
   12044:	ldr	r3, [r2, r3]
   12048:	ldr	r4, [r3]
   1204c:	bl	10afc <getpid@plt>
   12050:	mov	r2, r0
   12054:	ldrsh	r3, [fp, #-120]	; 0xffffff88
   12058:	sub	r0, fp, #112	; 0x70
   1205c:	str	r3, [sp]
   12060:	mov	r3, r2
   12064:	mov	r2, r4
   12068:	ldr	r1, [pc, #52]	; 120a4 <__assert_fail@plt+0x14e8>
   1206c:	add	r1, pc, r1
   12070:	bl	10b68 <sprintf@plt>
   12074:	sub	r3, fp, #112	; 0x70
   12078:	mov	r0, r3
   1207c:	bl	10a60 <strdup@plt>
   12080:	mov	r3, r0
   12084:	mov	r0, r3
   12088:	sub	sp, fp, #8
   1208c:	ldr	r4, [sp]
   12090:	ldr	fp, [sp, #4]
   12094:	add	sp, sp, #8
   12098:	pop	{pc}		; (ldr pc, [sp], #4)
   1209c:			; <UNDEFINED> instruction: 0x00016fbc
   120a0:	andeq	r0, r0, r8, asr #1
   120a4:	andeq	r2, r0, r0, asr #31
   120a8:	str	fp, [sp, #-8]!
   120ac:	str	lr, [sp, #4]
   120b0:	add	fp, sp, #4
   120b4:	sub	sp, sp, #8
   120b8:	ldr	r3, [pc, #88]	; 12118 <__assert_fail@plt+0x155c>
   120bc:	add	r3, pc, r3
   120c0:	ldrsh	r3, [r3]
   120c4:	uxth	r3, r3
   120c8:	add	r3, r3, #1
   120cc:	uxth	r3, r3
   120d0:	sxth	r2, r3
   120d4:	ldr	r3, [pc, #64]	; 1211c <__assert_fail@plt+0x1560>
   120d8:	add	r3, pc, r3
   120dc:	strh	r2, [r3]
   120e0:	ldr	r3, [pc, #56]	; 12120 <__assert_fail@plt+0x1564>
   120e4:	add	r3, pc, r3
   120e8:	ldrsh	r3, [r3]
   120ec:	mov	r0, r3
   120f0:	bl	1201c <__assert_fail@plt+0x1460>
   120f4:	str	r0, [fp, #-8]
   120f8:	ldr	r0, [fp, #-8]
   120fc:	bl	10a78 <unlink@plt>
   12100:	ldr	r3, [fp, #-8]
   12104:	mov	r0, r3
   12108:	sub	sp, fp, #4
   1210c:	ldr	fp, [sp]
   12110:	add	sp, sp, #4
   12114:	pop	{pc}		; (ldr pc, [sp], #4)
   12118:	andeq	r7, r1, r0, asr r0
   1211c:	andeq	r7, r1, r4, lsr r0
   12120:	andeq	r7, r1, r8, lsr #32
   12124:	str	fp, [sp, #-8]!
   12128:	str	lr, [sp, #4]
   1212c:	add	fp, sp, #4
   12130:	sub	sp, sp, #8
   12134:	mov	r3, #1
   12138:	strh	r3, [fp, #-6]
   1213c:	b	12174 <__assert_fail@plt+0x15b8>
   12140:	ldrsh	r3, [fp, #-6]
   12144:	mov	r0, r3
   12148:	bl	1201c <__assert_fail@plt+0x1460>
   1214c:	str	r0, [fp, #-12]
   12150:	ldr	r0, [fp, #-12]
   12154:	bl	10a78 <unlink@plt>
   12158:	ldr	r0, [fp, #-12]
   1215c:	bl	10a30 <free@plt>
   12160:	ldrsh	r3, [fp, #-6]
   12164:	uxth	r3, r3
   12168:	add	r3, r3, #1
   1216c:	uxth	r3, r3
   12170:	strh	r3, [fp, #-6]
   12174:	ldr	r3, [pc, #36]	; 121a0 <__assert_fail@plt+0x15e4>
   12178:	add	r3, pc, r3
   1217c:	ldrsh	r3, [r3]
   12180:	ldrsh	r2, [fp, #-6]
   12184:	cmp	r2, r3
   12188:	ble	12140 <__assert_fail@plt+0x1584>
   1218c:	nop	{0}
   12190:	sub	sp, fp, #4
   12194:	ldr	fp, [sp]
   12198:	add	sp, sp, #4
   1219c:	pop	{pc}		; (ldr pc, [sp], #4)
   121a0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   121a4:	str	fp, [sp, #-8]!
   121a8:	str	lr, [sp, #4]
   121ac:	add	fp, sp, #4
   121b0:	sub	sp, sp, #16
   121b4:	str	r0, [fp, #-16]
   121b8:	mov	r3, #47	; 0x2f
   121bc:	strb	r3, [fp, #-7]
   121c0:	ldr	r0, [fp, #-16]
   121c4:	bl	10b20 <strlen@plt>
   121c8:	mov	r3, r0
   121cc:	uxth	r3, r3
   121d0:	sub	r3, r3, #1
   121d4:	uxth	r3, r3
   121d8:	strh	r3, [fp, #-6]
   121dc:	b	121f4 <__assert_fail@plt+0x1638>
   121e0:	ldrsh	r3, [fp, #-6]
   121e4:	uxth	r3, r3
   121e8:	sub	r3, r3, #1
   121ec:	uxth	r3, r3
   121f0:	strh	r3, [fp, #-6]
   121f4:	ldrsh	r3, [fp, #-6]
   121f8:	cmp	r3, #0
   121fc:	blt	1221c <__assert_fail@plt+0x1660>
   12200:	ldrsh	r3, [fp, #-6]
   12204:	ldr	r2, [fp, #-16]
   12208:	add	r3, r2, r3
   1220c:	ldrb	r3, [r3]
   12210:	ldrb	r2, [fp, #-7]
   12214:	cmp	r2, r3
   12218:	bne	121e0 <__assert_fail@plt+0x1624>
   1221c:	ldrsh	r3, [fp, #-6]
   12220:	add	r3, r3, #1
   12224:	ldr	r2, [fp, #-16]
   12228:	add	r3, r2, r3
   1222c:	mov	r0, r3
   12230:	sub	sp, fp, #4
   12234:	ldr	fp, [sp]
   12238:	add	sp, sp, #4
   1223c:	pop	{pc}		; (ldr pc, [sp], #4)
   12240:	str	fp, [sp, #-8]!
   12244:	str	lr, [sp, #4]
   12248:	add	fp, sp, #4
   1224c:	sub	sp, sp, #8
   12250:	str	r0, [fp, #-8]
   12254:	ldr	r3, [pc, #64]	; 1229c <__assert_fail@plt+0x16e0>
   12258:	add	r3, pc, r3
   1225c:	ldrb	r3, [r3]
   12260:	cmp	r3, #0
   12264:	bne	12288 <__assert_fail@plt+0x16cc>
   12268:	ldr	r3, [pc, #48]	; 122a0 <__assert_fail@plt+0x16e4>
   1226c:	add	r3, pc, r3
   12270:	mov	r2, #1
   12274:	strb	r2, [r3]
   12278:	ldr	r3, [pc, #36]	; 122a4 <__assert_fail@plt+0x16e8>
   1227c:	add	r3, pc, r3
   12280:	mov	r0, r3
   12284:	bl	12950 <error@@Base>
   12288:	nop	{0}
   1228c:	sub	sp, fp, #4
   12290:	ldr	fp, [sp]
   12294:	add	sp, sp, #4
   12298:	pop	{pc}		; (ldr pc, [sp], #4)
   1229c:			; <UNDEFINED> instruction: 0x00016eb6
   122a0:	andeq	r6, r1, r2, lsr #29
   122a4:	andeq	r2, r0, r0, asr #27
   122a8:	str	fp, [sp, #-8]!
   122ac:	str	lr, [sp, #4]
   122b0:	add	fp, sp, #4
   122b4:	ldr	r3, [pc, #52]	; 122f0 <__assert_fail@plt+0x1734>
   122b8:	add	r3, pc, r3
   122bc:	mov	r1, r3
   122c0:	mov	r0, #2
   122c4:	bl	10ae4 <__sysv_signal@plt>
   122c8:	ldr	r3, [pc, #36]	; 122f4 <__assert_fail@plt+0x1738>
   122cc:	add	r3, pc, r3
   122d0:	mov	r1, r3
   122d4:	mov	r0, #15
   122d8:	bl	10ae4 <__sysv_signal@plt>
   122dc:	nop	{0}
   122e0:	sub	sp, fp, #4
   122e4:	ldr	fp, [sp]
   122e8:	add	sp, sp, #4
   122ec:	pop	{pc}		; (ldr pc, [sp], #4)
   122f0:			; <UNDEFINED> instruction: 0xffffff80
   122f4:			; <UNDEFINED> instruction: 0xffffff6c
   122f8:	str	fp, [sp, #-8]!
   122fc:	str	lr, [sp, #4]
   12300:	add	fp, sp, #4
   12304:	sub	sp, sp, #8
   12308:	str	r0, [fp, #-8]
   1230c:	ldr	r3, [pc, #84]	; 12368 <__assert_fail@plt+0x17ac>
   12310:	add	r3, pc, r3
   12314:	ldr	r2, [pc, #80]	; 1236c <__assert_fail@plt+0x17b0>
   12318:	ldr	r2, [r3, r2]
   1231c:	ldr	r2, [r2]
   12320:	cmp	r2, #0
   12324:	beq	1233c <__assert_fail@plt+0x1780>
   12328:	ldr	r2, [pc, #60]	; 1236c <__assert_fail@plt+0x17b0>
   1232c:	ldr	r3, [r3, r2]
   12330:	ldr	r3, [r3]
   12334:	blx	r3
   12338:	b	12364 <__assert_fail@plt+0x17a8>
   1233c:	ldr	r2, [pc, #44]	; 12370 <__assert_fail@plt+0x17b4>
   12340:	ldr	r2, [r3, r2]
   12344:	ldr	r0, [r2]
   12348:	ldr	r2, [pc, #36]	; 12374 <__assert_fail@plt+0x17b8>
   1234c:	ldr	r3, [r3, r2]
   12350:	ldr	r2, [r3]
   12354:	ldr	r3, [fp, #-8]
   12358:	ldr	r1, [pc, #24]	; 12378 <__assert_fail@plt+0x17bc>
   1235c:	add	r1, pc, r1
   12360:	bl	10b2c <fprintf@plt>
   12364:	bl	1293c <__assert_fail@plt+0x1d80>
   12368:	andeq	r6, r1, r8, ror #25
   1236c:	strheq	r0, [r0], -r4
   12370:	andeq	r0, r0, r0, asr #1
   12374:	andeq	r0, r0, r8, asr #1
   12378:	strdeq	r2, [r0], -r0
   1237c:	str	fp, [sp, #-8]!
   12380:	str	lr, [sp, #4]
   12384:	add	fp, sp, #4
   12388:	sub	sp, sp, #24
   1238c:	str	r0, [fp, #-16]
   12390:	str	r1, [fp, #-20]	; 0xffffffec
   12394:	str	r2, [fp, #-24]	; 0xffffffe8
   12398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1239c:	cmp	r3, #0
   123a0:	beq	125e0 <__assert_fail@plt+0x1a24>
   123a4:	mov	r3, #0
   123a8:	strh	r3, [fp, #-6]
   123ac:	b	123c4 <__assert_fail@plt+0x1808>
   123b0:	ldrsh	r3, [fp, #-6]
   123b4:	uxth	r3, r3
   123b8:	add	r3, r3, #1
   123bc:	uxth	r3, r3
   123c0:	strh	r3, [fp, #-6]
   123c4:	ldrsh	r2, [fp, #-6]
   123c8:	mov	r3, r2
   123cc:	lsl	r3, r3, #1
   123d0:	add	r3, r3, r2
   123d4:	lsl	r3, r3, #2
   123d8:	mov	r2, r3
   123dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e0:	add	r3, r3, r2
   123e4:	ldrb	r3, [r3]
   123e8:	cmp	r3, #0
   123ec:	beq	12428 <__assert_fail@plt+0x186c>
   123f0:	ldr	r3, [fp, #-16]
   123f4:	add	r3, r3, #1
   123f8:	ldrb	r1, [r3]
   123fc:	ldrsh	r2, [fp, #-6]
   12400:	mov	r3, r2
   12404:	lsl	r3, r3, #1
   12408:	add	r3, r3, r2
   1240c:	lsl	r3, r3, #2
   12410:	mov	r2, r3
   12414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12418:	add	r3, r3, r2
   1241c:	ldrb	r3, [r3]
   12420:	cmp	r1, r3
   12424:	bne	123b0 <__assert_fail@plt+0x17f4>
   12428:	ldrsh	r2, [fp, #-6]
   1242c:	mov	r3, r2
   12430:	lsl	r3, r3, #1
   12434:	add	r3, r3, r2
   12438:	lsl	r3, r3, #2
   1243c:	mov	r2, r3
   12440:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12444:	add	r3, r3, r2
   12448:	ldrb	r3, [r3]
   1244c:	cmp	r3, #0
   12450:	beq	125e8 <__assert_fail@plt+0x1a2c>
   12454:	ldrsh	r2, [fp, #-6]
   12458:	mov	r3, r2
   1245c:	lsl	r3, r3, #1
   12460:	add	r3, r3, r2
   12464:	lsl	r3, r3, #2
   12468:	mov	r2, r3
   1246c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12470:	add	r3, r3, r2
   12474:	ldr	r3, [r3, #4]
   12478:	cmp	r3, #0
   1247c:	beq	1253c <__assert_fail@plt+0x1980>
   12480:	ldr	r3, [fp, #-16]
   12484:	add	r3, r3, #2
   12488:	ldrb	r3, [r3]
   1248c:	cmp	r3, #0
   12490:	bne	124a0 <__assert_fail@plt+0x18e4>
   12494:	ldr	r3, [fp, #-20]	; 0xffffffec
   12498:	cmp	r3, #0
   1249c:	beq	1253c <__assert_fail@plt+0x1980>
   124a0:	ldrsh	r2, [fp, #-6]
   124a4:	mov	r3, r2
   124a8:	lsl	r3, r3, #1
   124ac:	add	r3, r3, r2
   124b0:	lsl	r3, r3, #2
   124b4:	mov	r2, r3
   124b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124bc:	add	r3, r3, r2
   124c0:	ldr	r3, [r3, #4]
   124c4:	ldr	r3, [r3]
   124c8:	cmp	r3, #0
   124cc:	bne	12608 <__assert_fail@plt+0x1a4c>
   124d0:	ldr	r3, [fp, #-16]
   124d4:	add	r3, r3, #2
   124d8:	ldrb	r3, [r3]
   124dc:	cmp	r3, #0
   124e0:	beq	124f0 <__assert_fail@plt+0x1934>
   124e4:	ldr	r3, [fp, #-16]
   124e8:	add	r2, r3, #2
   124ec:	b	124f4 <__assert_fail@plt+0x1938>
   124f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   124f4:	ldrsh	r1, [fp, #-6]
   124f8:	mov	r3, r1
   124fc:	lsl	r3, r3, #1
   12500:	add	r3, r3, r1
   12504:	lsl	r3, r3, #2
   12508:	mov	r1, r3
   1250c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12510:	add	r3, r3, r1
   12514:	ldr	r3, [r3, #4]
   12518:	str	r2, [r3]
   1251c:	ldr	r3, [fp, #-16]
   12520:	add	r3, r3, #2
   12524:	ldrb	r3, [r3]
   12528:	cmp	r3, #0
   1252c:	moveq	r3, #1
   12530:	movne	r3, #0
   12534:	uxtb	r3, r3
   12538:	b	12628 <__assert_fail@plt+0x1a6c>
   1253c:	ldrsh	r2, [fp, #-6]
   12540:	mov	r3, r2
   12544:	lsl	r3, r3, #1
   12548:	add	r3, r3, r2
   1254c:	lsl	r3, r3, #2
   12550:	mov	r2, r3
   12554:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12558:	add	r3, r3, r2
   1255c:	ldr	r3, [r3, #8]
   12560:	cmp	r3, #0
   12564:	beq	125f0 <__assert_fail@plt+0x1a34>
   12568:	ldr	r3, [fp, #-16]
   1256c:	add	r3, r3, #2
   12570:	ldrb	r3, [r3]
   12574:	cmp	r3, #0
   12578:	bne	125f0 <__assert_fail@plt+0x1a34>
   1257c:	ldrsh	r2, [fp, #-6]
   12580:	mov	r3, r2
   12584:	lsl	r3, r3, #1
   12588:	add	r3, r3, r2
   1258c:	lsl	r3, r3, #2
   12590:	mov	r2, r3
   12594:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12598:	add	r3, r3, r2
   1259c:	ldr	r3, [r3, #8]
   125a0:	ldrb	r3, [r3]
   125a4:	cmp	r3, #0
   125a8:	bne	12610 <__assert_fail@plt+0x1a54>
   125ac:	ldrsh	r2, [fp, #-6]
   125b0:	mov	r3, r2
   125b4:	lsl	r3, r3, #1
   125b8:	add	r3, r3, r2
   125bc:	lsl	r3, r3, #2
   125c0:	mov	r2, r3
   125c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125c8:	add	r3, r3, r2
   125cc:	ldr	r3, [r3, #8]
   125d0:	mov	r2, #1
   125d4:	strb	r2, [r3]
   125d8:	mov	r3, #0
   125dc:	b	12628 <__assert_fail@plt+0x1a6c>
   125e0:	nop	{0}
   125e4:	b	125f4 <__assert_fail@plt+0x1a38>
   125e8:	nop	{0}
   125ec:	b	125f4 <__assert_fail@plt+0x1a38>
   125f0:	nop	{0}
   125f4:	ldr	r1, [fp, #-16]
   125f8:	ldr	r3, [pc, #60]	; 1263c <__assert_fail@plt+0x1a80>
   125fc:	add	r3, pc, r3
   12600:	mov	r0, r3
   12604:	bl	129c0 <error@@Base+0x70>
   12608:	nop	{0}
   1260c:	b	12614 <__assert_fail@plt+0x1a58>
   12610:	nop	{0}
   12614:	ldr	r1, [fp, #-16]
   12618:	ldr	r3, [pc, #32]	; 12640 <__assert_fail@plt+0x1a84>
   1261c:	add	r3, pc, r3
   12620:	mov	r0, r3
   12624:	bl	129c0 <error@@Base+0x70>
   12628:	mov	r0, r3
   1262c:	sub	sp, fp, #4
   12630:	ldr	fp, [sp]
   12634:	add	sp, sp, #4
   12638:	pop	{pc}		; (ldr pc, [sp], #4)
   1263c:	andeq	r2, r0, r0, ror #20
   12640:	andeq	r2, r0, r0, asr sl
   12644:	str	r4, [sp, #-12]!
   12648:	str	fp, [sp, #4]
   1264c:	str	lr, [sp, #8]
   12650:	add	fp, sp, #8
   12654:	sub	sp, sp, #28
   12658:	str	r0, [fp, #-24]	; 0xffffffe8
   1265c:	str	r1, [fp, #-28]	; 0xffffffe4
   12660:	str	r2, [fp, #-32]	; 0xffffffe0
   12664:	str	r3, [fp, #-36]	; 0xffffffdc
   12668:	ldr	r2, [pc, #488]	; 12858 <__assert_fail@plt+0x1c9c>
   1266c:	add	r2, pc, r2
   12670:	mov	r3, #0
   12674:	strh	r3, [fp, #-16]
   12678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1267c:	ldr	r3, [r3]
   12680:	cmp	r3, #1
   12684:	bne	126a4 <__assert_fail@plt+0x1ae8>
   12688:	ldr	r3, [pc, #460]	; 1285c <__assert_fail@plt+0x1ca0>
   1268c:	ldr	r3, [r2, r3]
   12690:	ldrb	r3, [r3]
   12694:	cmp	r3, #0
   12698:	beq	126a4 <__assert_fail@plt+0x1ae8>
   1269c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   126a0:	bl	122f8 <__assert_fail@plt+0x173c>
   126a4:	mov	r3, #1
   126a8:	strh	r3, [fp, #-14]
   126ac:	b	12820 <__assert_fail@plt+0x1c64>
   126b0:	ldrsh	r3, [fp, #-14]
   126b4:	lsl	r3, r3, #2
   126b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   126bc:	add	r3, r2, r3
   126c0:	ldr	r3, [r3]
   126c4:	ldrb	r3, [r3]
   126c8:	cmp	r3, #45	; 0x2d
   126cc:	bne	127d0 <__assert_fail@plt+0x1c14>
   126d0:	ldrsh	r3, [fp, #-14]
   126d4:	lsl	r3, r3, #2
   126d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   126dc:	add	r3, r2, r3
   126e0:	ldr	r3, [r3]
   126e4:	add	r3, r3, #1
   126e8:	ldrb	r3, [r3]
   126ec:	cmp	r3, #0
   126f0:	beq	127d0 <__assert_fail@plt+0x1c14>
   126f4:	ldrsh	r3, [fp, #-14]
   126f8:	lsl	r3, r3, #2
   126fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12700:	add	r3, r2, r3
   12704:	ldr	r4, [r3]
   12708:	ldrsh	r3, [fp, #-14]
   1270c:	lsl	r3, r3, #2
   12710:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12714:	add	r3, r2, r3
   12718:	ldr	r3, [r3]
   1271c:	mov	r0, r3
   12720:	bl	10b20 <strlen@plt>
   12724:	mov	r3, r0
   12728:	mov	r2, r3
   1272c:	mov	r1, r4
   12730:	ldr	r3, [pc, #296]	; 12860 <__assert_fail@plt+0x1ca4>
   12734:	add	r3, pc, r3
   12738:	mov	r0, r3
   1273c:	bl	10b98 <strncmp@plt>
   12740:	mov	r3, r0
   12744:	cmp	r3, #0
   12748:	bne	12754 <__assert_fail@plt+0x1b98>
   1274c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12750:	bl	122f8 <__assert_fail@plt+0x173c>
   12754:	ldrsh	r3, [fp, #-14]
   12758:	lsl	r3, r3, #2
   1275c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12760:	add	r3, r2, r3
   12764:	ldr	r0, [r3]
   12768:	ldrsh	r3, [fp, #-14]
   1276c:	add	r2, r3, #1
   12770:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12774:	ldr	r3, [r3]
   12778:	cmp	r2, r3
   1277c:	bge	1279c <__assert_fail@plt+0x1be0>
   12780:	ldrsh	r3, [fp, #-14]
   12784:	add	r3, r3, #1
   12788:	lsl	r3, r3, #2
   1278c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12790:	add	r3, r2, r3
   12794:	ldr	r3, [r3]
   12798:	b	127a0 <__assert_fail@plt+0x1be4>
   1279c:	mov	r3, #0
   127a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   127a4:	mov	r1, r3
   127a8:	bl	1237c <__assert_fail@plt+0x17c0>
   127ac:	mov	r3, r0
   127b0:	cmp	r3, #0
   127b4:	beq	1280c <__assert_fail@plt+0x1c50>
   127b8:	ldrsh	r3, [fp, #-14]
   127bc:	uxth	r3, r3
   127c0:	add	r3, r3, #1
   127c4:	uxth	r3, r3
   127c8:	strh	r3, [fp, #-14]
   127cc:	b	1280c <__assert_fail@plt+0x1c50>
   127d0:	ldrsh	r3, [fp, #-14]
   127d4:	lsl	r3, r3, #2
   127d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   127dc:	add	r2, r2, r3
   127e0:	ldrsh	r1, [fp, #-16]
   127e4:	uxth	r3, r1
   127e8:	add	r3, r3, #1
   127ec:	uxth	r3, r3
   127f0:	strh	r3, [fp, #-16]
   127f4:	mov	r3, r1
   127f8:	lsl	r3, r3, #2
   127fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12800:	add	r3, r1, r3
   12804:	ldr	r2, [r2]
   12808:	str	r2, [r3]
   1280c:	ldrsh	r3, [fp, #-14]
   12810:	uxth	r3, r3
   12814:	add	r3, r3, #1
   12818:	uxth	r3, r3
   1281c:	strh	r3, [fp, #-14]
   12820:	ldrsh	r2, [fp, #-14]
   12824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12828:	ldr	r3, [r3]
   1282c:	cmp	r2, r3
   12830:	blt	126b0 <__assert_fail@plt+0x1af4>
   12834:	ldrsh	r2, [fp, #-16]
   12838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1283c:	str	r2, [r3]
   12840:	nop	{0}
   12844:	sub	sp, fp, #8
   12848:	ldr	r4, [sp]
   1284c:	ldr	fp, [sp, #4]
   12850:	add	sp, sp, #8
   12854:	pop	{pc}		; (ldr pc, [sp], #4)
   12858:	andeq	r6, r1, ip, lsl #19
   1285c:	andeq	r0, r0, ip, lsr #1
   12860:	andeq	r2, r0, ip, asr #18
   12864:	str	r4, [sp, #-12]!
   12868:	str	fp, [sp, #4]
   1286c:	str	lr, [sp, #8]
   12870:	add	fp, sp, #8
   12874:	sub	sp, sp, #20
   12878:	str	r0, [fp, #-16]
   1287c:	str	r1, [fp, #-20]	; 0xffffffec
   12880:	str	r2, [fp, #-24]	; 0xffffffe8
   12884:	str	r3, [fp, #-28]	; 0xffffffe4
   12888:	ldr	r4, [pc, #80]	; 128e0 <__assert_fail@plt+0x1d24>
   1288c:	add	r4, pc, r4
   12890:	ldr	r3, [fp, #-20]	; 0xffffffec
   12894:	ldr	r3, [r3]
   12898:	mov	r0, r3
   1289c:	bl	121a4 <__assert_fail@plt+0x15e8>
   128a0:	mov	r2, r0
   128a4:	ldr	r3, [pc, #56]	; 128e4 <__assert_fail@plt+0x1d28>
   128a8:	ldr	r3, [r4, r3]
   128ac:	str	r2, [r3]
   128b0:	bl	122a8 <__assert_fail@plt+0x16ec>
   128b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   128b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   128c0:	ldr	r0, [fp, #-16]
   128c4:	bl	12644 <__assert_fail@plt+0x1a88>
   128c8:	nop	{0}
   128cc:	sub	sp, fp, #8
   128d0:	ldr	r4, [sp]
   128d4:	ldr	fp, [sp, #4]
   128d8:	add	sp, sp, #8
   128dc:	pop	{pc}		; (ldr pc, [sp], #4)
   128e0:	andeq	r6, r1, ip, ror #14
   128e4:	andeq	r0, r0, r8, asr #1
   128e8:	str	fp, [sp, #-8]!
   128ec:	str	lr, [sp, #4]
   128f0:	add	fp, sp, #4
   128f4:	sub	sp, sp, #8
   128f8:	str	r0, [fp, #-8]
   128fc:	ldr	r3, [pc, #48]	; 12934 <__assert_fail@plt+0x1d78>
   12900:	add	r3, pc, r3
   12904:	ldr	r2, [pc, #44]	; 12938 <__assert_fail@plt+0x1d7c>
   12908:	ldr	r2, [r3, r2]
   1290c:	ldr	r2, [r2]
   12910:	cmp	r2, #0
   12914:	beq	12928 <__assert_fail@plt+0x1d6c>
   12918:	ldr	r2, [pc, #24]	; 12938 <__assert_fail@plt+0x1d7c>
   1291c:	ldr	r3, [r3, r2]
   12920:	ldr	r3, [r3]
   12924:	blx	r3
   12928:	bl	12124 <__assert_fail@plt+0x1568>
   1292c:	ldr	r0, [fp, #-8]
   12930:	bl	10b08 <exit@plt>
   12934:	strdeq	r6, [r1], -r8
   12938:	andeq	r0, r0, ip, asr #1
   1293c:	str	fp, [sp, #-8]!
   12940:	str	lr, [sp, #4]
   12944:	add	fp, sp, #4
   12948:	mov	r0, #0
   1294c:	bl	128e8 <__assert_fail@plt+0x1d2c>

00012950 <error@@Base>:
   12950:	str	r4, [sp, #-12]!
   12954:	str	fp, [sp, #4]
   12958:	str	lr, [sp, #8]
   1295c:	add	fp, sp, #8
   12960:	sub	sp, sp, #12
   12964:	str	r0, [fp, #-16]
   12968:	ldr	r4, [pc, #60]	; 129ac <error@@Base+0x5c>
   1296c:	add	r4, pc, r4
   12970:	ldr	r3, [pc, #56]	; 129b0 <error@@Base+0x60>
   12974:	ldr	r3, [r4, r3]
   12978:	ldr	r0, [r3]
   1297c:	ldr	r3, [pc, #48]	; 129b4 <error@@Base+0x64>
   12980:	ldr	r3, [r4, r3]
   12984:	ldr	r2, [r3]
   12988:	ldr	r3, [fp, #-16]
   1298c:	ldr	r1, [pc, #36]	; 129b8 <error@@Base+0x68>
   12990:	add	r1, pc, r1
   12994:	bl	10b2c <fprintf@plt>
   12998:	ldr	r3, [pc, #28]	; 129bc <error@@Base+0x6c>
   1299c:	ldr	r3, [r4, r3]
   129a0:	ldr	r3, [r3]
   129a4:	mov	r0, r3
   129a8:	bl	128e8 <__assert_fail@plt+0x1d2c>
   129ac:	andeq	r6, r1, ip, lsl #13
   129b0:	andeq	r0, r0, r0, asr #1
   129b4:	andeq	r0, r0, r8, asr #1
   129b8:	strdeq	r2, [r0], -r8
   129bc:	andeq	r0, r0, r0, ror #1
   129c0:	str	r4, [sp, #-12]!
   129c4:	str	fp, [sp, #4]
   129c8:	str	lr, [sp, #8]
   129cc:	add	fp, sp, #8
   129d0:	sub	sp, sp, #20
   129d4:	str	r0, [fp, #-16]
   129d8:	str	r1, [fp, #-20]	; 0xffffffec
   129dc:	ldr	r4, [pc, #68]	; 12a28 <error@@Base+0xd8>
   129e0:	add	r4, pc, r4
   129e4:	ldr	r3, [pc, #64]	; 12a2c <error@@Base+0xdc>
   129e8:	ldr	r3, [r4, r3]
   129ec:	ldr	r0, [r3]
   129f0:	ldr	r3, [pc, #56]	; 12a30 <error@@Base+0xe0>
   129f4:	ldr	r3, [r4, r3]
   129f8:	ldr	r2, [r3]
   129fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a00:	str	r3, [sp]
   12a04:	ldr	r3, [fp, #-16]
   12a08:	ldr	r1, [pc, #36]	; 12a34 <error@@Base+0xe4>
   12a0c:	add	r1, pc, r1
   12a10:	bl	10b2c <fprintf@plt>
   12a14:	ldr	r3, [pc, #28]	; 12a38 <error@@Base+0xe8>
   12a18:	ldr	r3, [r4, r3]
   12a1c:	ldr	r3, [r3]
   12a20:	mov	r0, r3
   12a24:	bl	128e8 <__assert_fail@plt+0x1d2c>
   12a28:	andeq	r6, r1, r8, lsl r6
   12a2c:	andeq	r0, r0, r0, asr #1
   12a30:	andeq	r0, r0, r8, asr #1
   12a34:	andeq	r2, r0, r4, lsl #13
   12a38:	andeq	r0, r0, r0, ror #1
   12a3c:	str	fp, [sp, #-8]!
   12a40:	str	lr, [sp, #4]
   12a44:	add	fp, sp, #4
   12a48:	sub	sp, sp, #16
   12a4c:	str	r0, [fp, #-8]
   12a50:	str	r1, [fp, #-12]
   12a54:	ldr	r3, [pc, #68]	; 12aa0 <error@@Base+0x150>
   12a58:	add	r3, pc, r3
   12a5c:	ldr	r2, [pc, #64]	; 12aa4 <error@@Base+0x154>
   12a60:	ldr	r2, [r3, r2]
   12a64:	ldr	r0, [r2]
   12a68:	ldr	r2, [pc, #56]	; 12aa8 <error@@Base+0x158>
   12a6c:	ldr	r3, [r3, r2]
   12a70:	ldr	r2, [r3]
   12a74:	ldr	r3, [fp, #-12]
   12a78:	str	r3, [sp]
   12a7c:	ldr	r3, [fp, #-8]
   12a80:	ldr	r1, [pc, #36]	; 12aac <error@@Base+0x15c>
   12a84:	add	r1, pc, r1
   12a88:	bl	10b2c <fprintf@plt>
   12a8c:	nop	{0}
   12a90:	sub	sp, fp, #4
   12a94:	ldr	fp, [sp]
   12a98:	add	sp, sp, #4
   12a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa0:	andeq	r6, r1, r0, lsr #11
   12aa4:	andeq	r0, r0, r0, asr #1
   12aa8:	andeq	r0, r0, r8, asr #1
   12aac:	andeq	r2, r0, ip, lsl #12
   12ab0:	push	{fp}		; (str fp, [sp, #-4]!)
   12ab4:	add	fp, sp, #0
   12ab8:	sub	sp, sp, #20
   12abc:	str	r0, [fp, #-8]
   12ac0:	str	r1, [fp, #-12]
   12ac4:	str	r2, [fp, #-16]
   12ac8:	ldr	r3, [fp, #-8]
   12acc:	ldr	r2, [r3]
   12ad0:	ldr	r3, [fp, #-12]
   12ad4:	add	r2, r2, r3
   12ad8:	ldr	r3, [fp, #-8]
   12adc:	str	r2, [r3]
   12ae0:	ldr	r3, [fp, #-8]
   12ae4:	ldr	r2, [r3, #4]
   12ae8:	ldr	r3, [fp, #-16]
   12aec:	add	r2, r2, r3
   12af0:	ldr	r3, [fp, #-8]
   12af4:	str	r2, [r3, #4]
   12af8:	nop	{0}
   12afc:	add	sp, fp, #0
   12b00:	pop	{fp}		; (ldr fp, [sp], #4)
   12b04:	bx	lr
   12b08:	str	fp, [sp, #-8]!
   12b0c:	str	lr, [sp, #4]
   12b10:	add	fp, sp, #4
   12b14:	sub	sp, sp, #24
   12b18:	str	r0, [fp, #-16]
   12b1c:	str	r1, [fp, #-20]	; 0xffffffec
   12b20:	str	r2, [fp, #-24]	; 0xffffffe8
   12b24:	str	r3, [fp, #-28]	; 0xffffffe4
   12b28:	ldr	r1, [fp, #-20]	; 0xffffffec
   12b2c:	ldr	r0, [fp, #-16]
   12b30:	bl	119b8 <__assert_fail@plt+0xdfc>
   12b34:	str	r0, [fp, #-8]
   12b38:	ldr	r3, [fp, #-8]
   12b3c:	cmp	r3, #0
   12b40:	bne	12b78 <error@@Base+0x228>
   12b44:	mov	r1, #20
   12b48:	mov	r0, #1
   12b4c:	bl	11d30 <__assert_fail@plt+0x1174>
   12b50:	str	r0, [fp, #-8]
   12b54:	ldr	r0, [fp, #-20]	; 0xffffffec
   12b58:	bl	10a60 <strdup@plt>
   12b5c:	mov	r3, r0
   12b60:	mov	r2, r3
   12b64:	ldr	r3, [fp, #-8]
   12b68:	str	r2, [r3, #8]
   12b6c:	ldr	r1, [fp, #-8]
   12b70:	ldr	r0, [fp, #-16]
   12b74:	bl	11aa4 <__assert_fail@plt+0xee8>
   12b78:	ldr	r3, [fp, #-8]
   12b7c:	add	r3, r3, #12
   12b80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12b84:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12b88:	mov	r0, r3
   12b8c:	bl	12ab0 <error@@Base+0x160>
   12b90:	nop	{0}
   12b94:	sub	sp, fp, #4
   12b98:	ldr	fp, [sp]
   12b9c:	add	sp, sp, #4
   12ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba4:	str	fp, [sp, #-8]!
   12ba8:	str	lr, [sp, #4]
   12bac:	add	fp, sp, #4
   12bb0:	sub	sp, sp, #8
   12bb4:	str	r0, [fp, #-8]
   12bb8:	ldr	r2, [fp, #-8]
   12bbc:	mov	r1, #99	; 0x63
   12bc0:	ldr	r3, [pc, #48]	; 12bf8 <error@@Base+0x2a8>
   12bc4:	add	r3, pc, r3
   12bc8:	mov	r0, r3
   12bcc:	bl	10a48 <fgets@plt>
   12bd0:	mov	r3, r0
   12bd4:	cmp	r3, #0
   12bd8:	movne	r3, #1
   12bdc:	moveq	r3, #0
   12be0:	uxtb	r3, r3
   12be4:	mov	r0, r3
   12be8:	sub	sp, fp, #4
   12bec:	ldr	fp, [sp]
   12bf0:	add	sp, sp, #4
   12bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf8:	andeq	r6, r1, ip, asr #10
   12bfc:	str	fp, [sp, #-8]!
   12c00:	str	lr, [sp, #4]
   12c04:	add	fp, sp, #4
   12c08:	sub	sp, sp, #8
   12c0c:	str	r0, [fp, #-8]
   12c10:	str	r1, [fp, #-12]
   12c14:	ldr	r0, [fp, #-8]
   12c18:	bl	12ba4 <error@@Base+0x254>
   12c1c:	mov	r3, r0
   12c20:	cmp	r3, #0
   12c24:	beq	12c5c <error@@Base+0x30c>
   12c28:	ldr	r2, [fp, #-12]
   12c2c:	ldr	r3, [pc, #68]	; 12c78 <error@@Base+0x328>
   12c30:	add	r3, pc, r3
   12c34:	mov	r1, r3
   12c38:	ldr	r3, [pc, #60]	; 12c7c <error@@Base+0x32c>
   12c3c:	add	r3, pc, r3
   12c40:	mov	r0, r3
   12c44:	bl	10b38 <__isoc99_sscanf@plt>
   12c48:	mov	r3, r0
   12c4c:	cmp	r3, #1
   12c50:	bne	12c5c <error@@Base+0x30c>
   12c54:	mov	r3, #1
   12c58:	b	12c60 <error@@Base+0x310>
   12c5c:	mov	r3, #0
   12c60:	uxtb	r3, r3
   12c64:	mov	r0, r3
   12c68:	sub	sp, fp, #4
   12c6c:	ldr	fp, [sp]
   12c70:	add	sp, sp, #4
   12c74:	pop	{pc}		; (ldr pc, [sp], #4)
   12c78:	andeq	r2, r0, r0, ror r4
   12c7c:	ldrdeq	r6, [r1], -r4
   12c80:	str	fp, [sp, #-8]!
   12c84:	str	lr, [sp, #4]
   12c88:	add	fp, sp, #4
   12c8c:	sub	sp, sp, #16
   12c90:	str	r0, [fp, #-8]
   12c94:	str	r1, [fp, #-12]
   12c98:	str	r2, [fp, #-16]
   12c9c:	ldr	r0, [fp, #-8]
   12ca0:	bl	12ba4 <error@@Base+0x254>
   12ca4:	mov	r3, r0
   12ca8:	cmp	r3, #0
   12cac:	beq	12ce0 <error@@Base+0x390>
   12cb0:	ldr	r3, [fp, #-16]
   12cb4:	ldr	r2, [fp, #-12]
   12cb8:	ldr	r1, [pc, #60]	; 12cfc <error@@Base+0x3ac>
   12cbc:	add	r1, pc, r1
   12cc0:	ldr	r0, [pc, #56]	; 12d00 <error@@Base+0x3b0>
   12cc4:	add	r0, pc, r0
   12cc8:	bl	10b38 <__isoc99_sscanf@plt>
   12ccc:	mov	r3, r0
   12cd0:	cmp	r3, #2
   12cd4:	bne	12ce0 <error@@Base+0x390>
   12cd8:	mov	r3, #1
   12cdc:	b	12ce4 <error@@Base+0x394>
   12ce0:	mov	r3, #0
   12ce4:	uxtb	r3, r3
   12ce8:	mov	r0, r3
   12cec:	sub	sp, fp, #4
   12cf0:	ldr	fp, [sp]
   12cf4:	add	sp, sp, #4
   12cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cfc:	andeq	r2, r0, r8, ror #7
   12d00:	andeq	r6, r1, ip, asr #8
   12d04:	str	fp, [sp, #-8]!
   12d08:	str	lr, [sp, #4]
   12d0c:	add	fp, sp, #4
   12d10:	sub	sp, sp, #24
   12d14:	str	r0, [fp, #-24]	; 0xffffffe8
   12d18:	str	r1, [fp, #-28]	; 0xffffffe4
   12d1c:	mov	r3, #0
   12d20:	str	r3, [fp, #-12]
   12d24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d28:	bl	12ba4 <error@@Base+0x254>
   12d2c:	mov	r3, r0
   12d30:	cmp	r3, #0
   12d34:	beq	12dec <error@@Base+0x49c>
   12d38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d3c:	bl	12ba4 <error@@Base+0x254>
   12d40:	mov	r3, r0
   12d44:	cmp	r3, #0
   12d48:	beq	12dec <error@@Base+0x49c>
   12d4c:	b	12dcc <error@@Base+0x47c>
   12d50:	ldr	r3, [pc, #172]	; 12e04 <error@@Base+0x4b4>
   12d54:	add	r3, pc, r3
   12d58:	add	r0, r3, #29
   12d5c:	bl	10b74 <atoi@plt>
   12d60:	str	r0, [fp, #-8]
   12d64:	ldr	r3, [fp, #-8]
   12d68:	cmp	r3, #0
   12d6c:	bne	12dac <error@@Base+0x45c>
   12d70:	ldr	r3, [pc, #144]	; 12e08 <error@@Base+0x4b8>
   12d74:	add	r3, pc, r3
   12d78:	mov	r1, r3
   12d7c:	ldr	r3, [pc, #136]	; 12e0c <error@@Base+0x4bc>
   12d80:	add	r3, pc, r3
   12d84:	add	r0, r3, #29
   12d88:	bl	10a0c <strcmp@plt>
   12d8c:	mov	r3, r0
   12d90:	cmp	r3, #0
   12d94:	bne	12da4 <error@@Base+0x454>
   12d98:	ldr	r3, [fp, #-16]
   12d9c:	str	r3, [fp, #-12]
   12da0:	b	12dac <error@@Base+0x45c>
   12da4:	mov	r3, #11
   12da8:	str	r3, [fp, #-8]
   12dac:	ldr	r3, [fp, #-8]
   12db0:	lsl	r3, r3, #3
   12db4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12db8:	add	r3, r2, r3
   12dbc:	ldr	r1, [fp, #-16]
   12dc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dc4:	mov	r0, r3
   12dc8:	bl	12ab0 <error@@Base+0x160>
   12dcc:	sub	r2, fp, #20
   12dd0:	sub	r3, fp, #16
   12dd4:	mov	r1, r3
   12dd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ddc:	bl	12c80 <error@@Base+0x330>
   12de0:	mov	r3, r0
   12de4:	cmp	r3, #0
   12de8:	bne	12d50 <error@@Base+0x400>
   12dec:	ldr	r3, [fp, #-12]
   12df0:	mov	r0, r3
   12df4:	sub	sp, fp, #4
   12df8:	ldr	fp, [sp]
   12dfc:	add	sp, sp, #4
   12e00:	pop	{pc}		; (ldr pc, [sp], #4)
   12e04:			; <UNDEFINED> instruction: 0x000163bc
   12e08:	andeq	r2, r0, r8, lsr r3
   12e0c:	muleq	r1, r0, r3
   12e10:	str	fp, [sp, #-8]!
   12e14:	str	lr, [sp, #4]
   12e18:	add	fp, sp, #4
   12e1c:	sub	sp, sp, #16
   12e20:	str	r0, [fp, #-16]
   12e24:	str	r1, [fp, #-20]	; 0xffffffec
   12e28:	ldr	r0, [fp, #-16]
   12e2c:	bl	12ba4 <error@@Base+0x254>
   12e30:	mov	r3, r0
   12e34:	cmp	r3, #0
   12e38:	beq	12eb8 <error@@Base+0x568>
   12e3c:	ldr	r0, [fp, #-16]
   12e40:	bl	12ba4 <error@@Base+0x254>
   12e44:	mov	r3, r0
   12e48:	cmp	r3, #0
   12e4c:	beq	12eb8 <error@@Base+0x568>
   12e50:	b	12e98 <error@@Base+0x548>
   12e54:	ldr	r3, [pc, #112]	; 12ecc <error@@Base+0x57c>
   12e58:	add	r3, pc, r3
   12e5c:	mov	r0, r3
   12e60:	bl	10b20 <strlen@plt>
   12e64:	mov	r3, r0
   12e68:	sub	r3, r3, #1
   12e6c:	ldr	r2, [pc, #92]	; 12ed0 <error@@Base+0x580>
   12e70:	add	r2, pc, r2
   12e74:	mov	r1, #0
   12e78:	strb	r1, [r2, r3]
   12e7c:	ldr	r2, [fp, #-8]
   12e80:	ldr	r3, [fp, #-12]
   12e84:	ldr	r1, [pc, #72]	; 12ed4 <error@@Base+0x584>
   12e88:	add	r1, pc, r1
   12e8c:	add	r1, r1, #29
   12e90:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e94:	bl	12b08 <error@@Base+0x1b8>
   12e98:	sub	r2, fp, #12
   12e9c:	sub	r3, fp, #8
   12ea0:	mov	r1, r3
   12ea4:	ldr	r0, [fp, #-16]
   12ea8:	bl	12c80 <error@@Base+0x330>
   12eac:	mov	r3, r0
   12eb0:	cmp	r3, #0
   12eb4:	bne	12e54 <error@@Base+0x504>
   12eb8:	nop	{0}
   12ebc:	sub	sp, fp, #4
   12ec0:	ldr	fp, [sp]
   12ec4:	add	sp, sp, #4
   12ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ecc:			; <UNDEFINED> instruction: 0x000162b8
   12ed0:	andeq	r6, r1, r0, lsr #5
   12ed4:	andeq	r6, r1, r8, lsl #5
   12ed8:	str	fp, [sp, #-8]!
   12edc:	str	lr, [sp, #4]
   12ee0:	add	fp, sp, #4
   12ee4:	sub	sp, sp, #32
   12ee8:	str	r0, [fp, #-32]	; 0xffffffe0
   12eec:	str	r1, [fp, #-36]	; 0xffffffdc
   12ef0:	ldr	r3, [pc, #508]	; 130f4 <error@@Base+0x7a4>
   12ef4:	add	r3, pc, r3
   12ef8:	mov	r1, r3
   12efc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12f00:	bl	11e7c <__assert_fail@plt+0x12c0>
   12f04:	str	r0, [fp, #-8]
   12f08:	ldr	r0, [fp, #-8]
   12f0c:	bl	12ba4 <error@@Base+0x254>
   12f10:	mov	r3, r0
   12f14:	cmp	r3, #0
   12f18:	beq	130a4 <error@@Base+0x754>
   12f1c:	mov	r2, #45	; 0x2d
   12f20:	ldr	r3, [pc, #464]	; 130f8 <error@@Base+0x7a8>
   12f24:	add	r3, pc, r3
   12f28:	mov	r1, r3
   12f2c:	ldr	r3, [pc, #456]	; 130fc <error@@Base+0x7ac>
   12f30:	add	r3, pc, r3
   12f34:	mov	r0, r3
   12f38:	bl	10b98 <strncmp@plt>
   12f3c:	mov	r3, r0
   12f40:	cmp	r3, #0
   12f44:	bne	130a4 <error@@Base+0x754>
   12f48:	ldr	r0, [fp, #-8]
   12f4c:	bl	12ba4 <error@@Base+0x254>
   12f50:	mov	r3, r0
   12f54:	cmp	r3, #0
   12f58:	beq	130a4 <error@@Base+0x754>
   12f5c:	ldr	r3, [pc, #412]	; 13100 <error@@Base+0x7b0>
   12f60:	add	r3, pc, r3
   12f64:	mov	r1, r3
   12f68:	ldr	r3, [pc, #404]	; 13104 <error@@Base+0x7b4>
   12f6c:	add	r3, pc, r3
   12f70:	mov	r0, r3
   12f74:	bl	10a0c <strcmp@plt>
   12f78:	mov	r3, r0
   12f7c:	cmp	r3, #0
   12f80:	bne	130a4 <error@@Base+0x754>
   12f84:	sub	r3, fp, #20
   12f88:	mov	r1, r3
   12f8c:	ldr	r0, [fp, #-8]
   12f90:	bl	12bfc <error@@Base+0x2ac>
   12f94:	mov	r3, r0
   12f98:	cmp	r3, #0
   12f9c:	beq	130a4 <error@@Base+0x754>
   12fa0:	sub	r3, fp, #24
   12fa4:	mov	r1, r3
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	bl	12bfc <error@@Base+0x2ac>
   12fb0:	mov	r3, r0
   12fb4:	cmp	r3, #0
   12fb8:	beq	130a4 <error@@Base+0x754>
   12fbc:	ldr	r0, [fp, #-8]
   12fc0:	bl	12ba4 <error@@Base+0x254>
   12fc4:	mov	r3, r0
   12fc8:	cmp	r3, #0
   12fcc:	beq	130a4 <error@@Base+0x754>
   12fd0:	ldr	r0, [fp, #-8]
   12fd4:	bl	12ba4 <error@@Base+0x254>
   12fd8:	mov	r3, r0
   12fdc:	cmp	r3, #0
   12fe0:	beq	130a4 <error@@Base+0x754>
   12fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fe8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12fec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ff0:	mov	r0, r3
   12ff4:	bl	12ab0 <error@@Base+0x160>
   12ff8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ffc:	add	r3, r3, #8
   13000:	mov	r1, r3
   13004:	ldr	r0, [fp, #-8]
   13008:	bl	12d04 <error@@Base+0x3b4>
   1300c:	str	r0, [fp, #-12]
   13010:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13014:	add	r3, r3, #416	; 0x1a0
   13018:	mov	r1, r3
   1301c:	ldr	r0, [fp, #-8]
   13020:	bl	12d04 <error@@Base+0x3b4>
   13024:	str	r0, [fp, #-16]
   13028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1302c:	add	r3, r3, #824	; 0x338
   13030:	mov	r1, r3
   13034:	ldr	r0, [fp, #-8]
   13038:	bl	12d04 <error@@Base+0x3b4>
   1303c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13040:	cmp	r3, #0
   13044:	ble	130d4 <error@@Base+0x784>
   13048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1304c:	add	r3, r3, #920	; 0x398
   13050:	mov	r1, r3
   13054:	ldr	r0, [fp, #-8]
   13058:	bl	12d04 <error@@Base+0x3b4>
   1305c:	ldr	r3, [fp, #-12]
   13060:	cmp	r3, #0
   13064:	ble	1307c <error@@Base+0x72c>
   13068:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1306c:	add	r3, r3, #992	; 0x3e0
   13070:	mov	r1, r3
   13074:	ldr	r0, [fp, #-8]
   13078:	bl	12e10 <error@@Base+0x4c0>
   1307c:	ldr	r3, [fp, #-16]
   13080:	cmp	r3, #0
   13084:	ble	130d4 <error@@Base+0x784>
   13088:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1308c:	add	r3, r3, #9024	; 0x2340
   13090:	add	r3, r3, #24
   13094:	mov	r1, r3
   13098:	ldr	r0, [fp, #-8]
   1309c:	bl	12e10 <error@@Base+0x4c0>
   130a0:	b	130d4 <error@@Base+0x784>
   130a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   130a8:	cmp	r3, #0
   130ac:	beq	130b8 <error@@Base+0x768>
   130b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   130b4:	b	130c0 <error@@Base+0x770>
   130b8:	ldr	r3, [pc, #72]	; 13108 <error@@Base+0x7b8>
   130bc:	add	r3, pc, r3
   130c0:	mov	r1, r3
   130c4:	ldr	r3, [pc, #64]	; 1310c <error@@Base+0x7bc>
   130c8:	add	r3, pc, r3
   130cc:	mov	r0, r3
   130d0:	bl	129c0 <error@@Base+0x70>
   130d4:	nop	{0}
   130d8:	ldr	r0, [fp, #-8]
   130dc:	bl	11f5c <__assert_fail@plt+0x13a0>
   130e0:	nop	{0}
   130e4:	sub	sp, fp, #4
   130e8:	ldr	fp, [sp]
   130ec:	add	sp, sp, #4
   130f0:	pop	{pc}		; (ldr pc, [sp], #4)
   130f4:	andeq	r2, r0, r0, asr #3
   130f8:	muleq	r0, r4, r1
   130fc:	andeq	r6, r1, r0, ror #3
   13100:	andeq	r2, r0, r8, lsl #3
   13104:	andeq	r6, r1, r4, lsr #3
   13108:	andeq	r2, r0, ip, asr r0
   1310c:	andeq	r2, r0, r8, asr r0
   13110:	str	fp, [sp, #-8]!
   13114:	str	lr, [sp, #4]
   13118:	add	fp, sp, #4
   1311c:	sub	sp, sp, #8
   13120:	str	r0, [fp, #-8]
   13124:	str	r1, [fp, #-12]
   13128:	ldr	r3, [fp, #-12]
   1312c:	ldr	r3, [r3]
   13130:	cmp	r3, #0
   13134:	bne	13154 <error@@Base+0x804>
   13138:	ldr	r3, [fp, #-8]
   1313c:	mov	r2, #8
   13140:	mov	r1, #1
   13144:	ldr	r0, [pc, #116]	; 131c0 <error@@Base+0x870>
   13148:	add	r0, pc, r0
   1314c:	bl	10a9c <fwrite@plt>
   13150:	b	131a0 <error@@Base+0x850>
   13154:	ldr	r3, [fp, #-12]
   13158:	ldr	r2, [r3]
   1315c:	ldr	r3, [fp, #-12]
   13160:	ldr	r3, [r3, #4]
   13164:	sub	r3, r2, r3
   13168:	vmov	s15, r3
   1316c:	vcvt.f64.s32	d7, s15
   13170:	vldr	d6, [pc, #64]	; 131b8 <error@@Base+0x868>
   13174:	vmul.f64	d6, d7, d6
   13178:	ldr	r3, [fp, #-12]
   1317c:	ldr	r3, [r3]
   13180:	vmov	s15, r3
   13184:	vcvt.f64.s32	d7, s15
   13188:	vdiv.f64	d5, d6, d7
   1318c:	vmov	r2, r3, d5
   13190:	ldr	r1, [pc, #44]	; 131c4 <error@@Base+0x874>
   13194:	add	r1, pc, r1
   13198:	ldr	r0, [fp, #-8]
   1319c:	bl	10b2c <fprintf@plt>
   131a0:	nop	{0}
   131a4:	sub	sp, fp, #4
   131a8:	ldr	fp, [sp]
   131ac:	add	sp, sp, #4
   131b0:	pop	{pc}		; (ldr pc, [sp], #4)
   131b4:	nop	{0}
   131b8:	andeq	r0, r0, r0
   131bc:	subsmi	r0, r9, r0
   131c0:	andeq	r1, r0, ip, ror #31
   131c4:	andeq	r1, r0, ip, lsr #31
   131c8:	str	fp, [sp, #-8]!
   131cc:	str	lr, [sp, #4]
   131d0:	add	fp, sp, #4
   131d4:	sub	sp, sp, #8
   131d8:	str	r0, [fp, #-8]
   131dc:	str	r1, [fp, #-12]
   131e0:	ldr	r3, [fp, #-12]
   131e4:	cmp	r3, #0
   131e8:	beq	1321c <error@@Base+0x8cc>
   131ec:	ldr	r3, [fp, #-12]
   131f0:	ldr	r2, [r3]
   131f4:	ldr	r3, [fp, #-12]
   131f8:	ldr	r3, [r3, #4]
   131fc:	ldr	r1, [pc, #92]	; 13260 <error@@Base+0x910>
   13200:	add	r1, pc, r1
   13204:	ldr	r0, [fp, #-8]
   13208:	bl	10b2c <fprintf@plt>
   1320c:	ldr	r1, [fp, #-12]
   13210:	ldr	r0, [fp, #-8]
   13214:	bl	13110 <error@@Base+0x7c0>
   13218:	b	13234 <error@@Base+0x8e4>
   1321c:	ldr	r3, [fp, #-8]
   13220:	mov	r2, #26
   13224:	mov	r1, #1
   13228:	ldr	r0, [pc, #52]	; 13264 <error@@Base+0x914>
   1322c:	add	r0, pc, r0
   13230:	bl	10a9c <fwrite@plt>
   13234:	ldr	r3, [fp, #-8]
   13238:	mov	r2, #3
   1323c:	mov	r1, #1
   13240:	ldr	r0, [pc, #32]	; 13268 <error@@Base+0x918>
   13244:	add	r0, pc, r0
   13248:	bl	10a9c <fwrite@plt>
   1324c:	nop	{0}
   13250:	sub	sp, fp, #4
   13254:	ldr	fp, [sp]
   13258:	add	sp, sp, #4
   1325c:	pop	{pc}		; (ldr pc, [sp], #4)
   13260:	andeq	r1, r0, r8, asr #30
   13264:	andeq	r1, r0, r8, lsr #30
   13268:	andeq	r1, r0, ip, lsr #30
   1326c:	str	fp, [sp, #-8]!
   13270:	str	lr, [sp, #4]
   13274:	add	fp, sp, #4
   13278:	sub	sp, sp, #32
   1327c:	str	r0, [fp, #-16]
   13280:	str	r1, [fp, #-20]	; 0xffffffec
   13284:	mov	r1, r2
   13288:	str	r3, [fp, #-28]	; 0xffffffe4
   1328c:	ldr	r2, [fp, #4]
   13290:	ldr	r3, [fp, #8]
   13294:	strh	r1, [fp, #-24]	; 0xffffffe8
   13298:	strb	r2, [fp, #-32]	; 0xffffffe0
   1329c:	strb	r3, [fp, #-36]	; 0xffffffdc
   132a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132a4:	ldr	r3, [pc, #384]	; 1342c <error@@Base+0xadc>
   132a8:	add	r3, pc, r3
   132ac:	mov	r1, r3
   132b0:	ldr	r0, [fp, #-16]
   132b4:	bl	10b2c <fprintf@plt>
   132b8:	mov	r1, #0
   132bc:	ldr	r0, [fp, #-16]
   132c0:	bl	131c8 <error@@Base+0x878>
   132c4:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   132c8:	cmp	r3, #0
   132cc:	beq	132dc <error@@Base+0x98c>
   132d0:	ldr	r3, [pc, #344]	; 13430 <error@@Base+0xae0>
   132d4:	add	r3, pc, r3
   132d8:	b	132e4 <error@@Base+0x994>
   132dc:	ldr	r3, [pc, #336]	; 13434 <error@@Base+0xae4>
   132e0:	add	r3, pc, r3
   132e4:	mov	r2, r3
   132e8:	ldr	r3, [pc, #328]	; 13438 <error@@Base+0xae8>
   132ec:	add	r3, pc, r3
   132f0:	mov	r1, r3
   132f4:	ldr	r0, [fp, #-16]
   132f8:	bl	10b2c <fprintf@plt>
   132fc:	mov	r3, #1
   13300:	strh	r3, [fp, #-6]
   13304:	b	13370 <error@@Base+0xa20>
   13308:	ldrsh	r3, [fp, #-6]
   1330c:	lsl	r3, r3, #3
   13310:	ldr	r2, [fp, #-20]	; 0xffffffec
   13314:	add	r3, r2, r3
   13318:	ldr	r3, [r3]
   1331c:	cmp	r3, #0
   13320:	ble	1335c <error@@Base+0xa0c>
   13324:	ldrsh	r3, [fp, #-6]
   13328:	lsl	r3, r3, #3
   1332c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13330:	add	r3, r2, r3
   13334:	mov	r1, r3
   13338:	ldr	r0, [fp, #-16]
   1333c:	bl	131c8 <error@@Base+0x878>
   13340:	ldrsh	r3, [fp, #-6]
   13344:	mov	r2, r3
   13348:	ldr	r3, [pc, #236]	; 1343c <error@@Base+0xaec>
   1334c:	add	r3, pc, r3
   13350:	mov	r1, r3
   13354:	ldr	r0, [fp, #-16]
   13358:	bl	10b2c <fprintf@plt>
   1335c:	ldrsh	r3, [fp, #-6]
   13360:	uxth	r3, r3
   13364:	add	r3, r3, #1
   13368:	uxth	r3, r3
   1336c:	strh	r3, [fp, #-6]
   13370:	ldrsh	r2, [fp, #-6]
   13374:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13378:	cmp	r2, r3
   1337c:	ble	13308 <error@@Base+0x9b8>
   13380:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   13384:	cmp	r3, #0
   13388:	beq	133e8 <error@@Base+0xa98>
   1338c:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13390:	add	r3, r3, #1
   13394:	lsl	r3, r3, #3
   13398:	ldr	r2, [fp, #-20]	; 0xffffffec
   1339c:	add	r3, r2, r3
   133a0:	ldr	r3, [r3]
   133a4:	cmp	r3, #0
   133a8:	ble	133e8 <error@@Base+0xa98>
   133ac:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   133b0:	add	r3, r3, #1
   133b4:	lsl	r3, r3, #3
   133b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   133bc:	add	r3, r2, r3
   133c0:	mov	r1, r3
   133c4:	ldr	r0, [fp, #-16]
   133c8:	bl	131c8 <error@@Base+0x878>
   133cc:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   133d0:	mov	r2, r3
   133d4:	ldr	r3, [pc, #100]	; 13440 <error@@Base+0xaf0>
   133d8:	add	r3, pc, r3
   133dc:	mov	r1, r3
   133e0:	ldr	r0, [fp, #-16]
   133e4:	bl	10b2c <fprintf@plt>
   133e8:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   133ec:	cmp	r3, #0
   133f0:	beq	13418 <error@@Base+0xac8>
   133f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   133f8:	ldr	r0, [fp, #-16]
   133fc:	bl	131c8 <error@@Base+0x878>
   13400:	ldr	r3, [fp, #-16]
   13404:	mov	r2, #7
   13408:	mov	r1, #1
   1340c:	ldr	r0, [pc, #48]	; 13444 <error@@Base+0xaf4>
   13410:	add	r0, pc, r0
   13414:	bl	10a9c <fwrite@plt>
   13418:	nop	{0}
   1341c:	sub	sp, fp, #4
   13420:	ldr	fp, [sp]
   13424:	add	sp, sp, #4
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	andeq	r1, r0, ip, asr #29
   13430:	andeq	r1, r0, r8, lsr #29
   13434:	andeq	r1, r0, r4, lsr #29
   13438:	andeq	r1, r0, r0, lsr #29
   1343c:	andeq	r1, r0, r4, asr #28
   13440:	andeq	r1, r0, r4, asr #27
   13444:	muleq	r0, ip, ip
   13448:	str	fp, [sp, #-8]!
   1344c:	str	lr, [sp, #4]
   13450:	add	fp, sp, #4
   13454:	sub	sp, sp, #8
   13458:	str	r0, [fp, #-8]
   1345c:	str	r1, [fp, #-12]
   13460:	ldr	r3, [fp, #-8]
   13464:	ldr	r2, [r3, #8]
   13468:	ldr	r3, [fp, #-12]
   1346c:	ldr	r3, [r3, #8]
   13470:	mov	r1, r3
   13474:	mov	r0, r2
   13478:	bl	11d94 <__assert_fail@plt+0x11d8>
   1347c:	mov	r3, r0
   13480:	mov	r0, r3
   13484:	sub	sp, fp, #4
   13488:	ldr	fp, [sp]
   1348c:	add	sp, sp, #4
   13490:	pop	{pc}		; (ldr pc, [sp], #4)
   13494:	str	fp, [sp, #-8]!
   13498:	str	lr, [sp, #4]
   1349c:	add	fp, sp, #4
   134a0:	sub	sp, sp, #24
   134a4:	str	r0, [fp, #-16]
   134a8:	str	r1, [fp, #-20]	; 0xffffffec
   134ac:	str	r2, [fp, #-24]	; 0xffffffe8
   134b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   134b4:	bl	11b9c <__assert_fail@plt+0xfe0>
   134b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134bc:	add	r3, r3, #4096	; 0x1000
   134c0:	ldr	r0, [r3, #3956]	; 0xf74
   134c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134c8:	add	r3, r3, #4096	; 0x1000
   134cc:	ldr	r3, [r3, #3952]	; 0xf70
   134d0:	ldr	r2, [pc, #224]	; 135b8 <error@@Base+0xc68>
   134d4:	add	r2, pc, r2
   134d8:	mov	r1, r3
   134dc:	bl	117f4 <__assert_fail@plt+0xc38>
   134e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   134e4:	ldr	r3, [pc, #208]	; 135bc <error@@Base+0xc6c>
   134e8:	add	r3, pc, r3
   134ec:	mov	r1, r3
   134f0:	ldr	r0, [fp, #-16]
   134f4:	bl	10b2c <fprintf@plt>
   134f8:	mov	r1, #0
   134fc:	ldr	r0, [fp, #-16]
   13500:	bl	131c8 <error@@Base+0x878>
   13504:	ldr	r1, [fp, #-16]
   13508:	mov	r0, #10
   1350c:	bl	10b5c <fputc@plt>
   13510:	mov	r3, #0
   13514:	str	r3, [fp, #-8]
   13518:	b	1358c <error@@Base+0xc3c>
   1351c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13520:	add	r3, r3, #4096	; 0x1000
   13524:	ldr	r2, [r3, #3952]	; 0xf70
   13528:	ldr	r3, [fp, #-8]
   1352c:	lsl	r3, r3, #2
   13530:	add	r3, r2, r3
   13534:	ldr	r3, [r3]
   13538:	add	r3, r3, #12
   1353c:	mov	r1, r3
   13540:	ldr	r0, [fp, #-16]
   13544:	bl	131c8 <error@@Base+0x878>
   13548:	ldr	r3, [fp, #-20]	; 0xffffffec
   1354c:	add	r3, r3, #4096	; 0x1000
   13550:	ldr	r2, [r3, #3952]	; 0xf70
   13554:	ldr	r3, [fp, #-8]
   13558:	lsl	r3, r3, #2
   1355c:	add	r3, r2, r3
   13560:	ldr	r3, [r3]
   13564:	ldr	r3, [r3, #8]
   13568:	mov	r2, r3
   1356c:	ldr	r3, [pc, #76]	; 135c0 <error@@Base+0xc70>
   13570:	add	r3, pc, r3
   13574:	mov	r1, r3
   13578:	ldr	r0, [fp, #-16]
   1357c:	bl	10b2c <fprintf@plt>
   13580:	ldr	r3, [fp, #-8]
   13584:	add	r3, r3, #1
   13588:	str	r3, [fp, #-8]
   1358c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13590:	add	r3, r3, #4096	; 0x1000
   13594:	ldr	r3, [r3, #3956]	; 0xf74
   13598:	ldr	r2, [fp, #-8]
   1359c:	cmp	r2, r3
   135a0:	blt	1351c <error@@Base+0xbcc>
   135a4:	nop	{0}
   135a8:	sub	sp, fp, #4
   135ac:	ldr	fp, [sp]
   135b0:	add	sp, sp, #4
   135b4:	pop	{pc}		; (ldr pc, [sp], #4)
   135b8:			; <UNDEFINED> instruction: 0xffffff6c
   135bc:	andeq	r1, r0, ip, lsl #25
   135c0:	andeq	r1, r0, ip, lsl ip
   135c4:	str	fp, [sp, #-8]!
   135c8:	str	lr, [sp, #4]
   135cc:	add	fp, sp, #4
   135d0:	sub	sp, sp, #24
   135d4:	str	r0, [fp, #-16]
   135d8:	str	r1, [fp, #-20]	; 0xffffffec
   135dc:	ldr	r3, [pc, #464]	; 137b4 <error@@Base+0xe64>
   135e0:	add	r3, pc, r3
   135e4:	mov	r1, r3
   135e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   135ec:	bl	11e7c <__assert_fail@plt+0x12c0>
   135f0:	str	r0, [fp, #-8]
   135f4:	ldr	r3, [pc, #444]	; 137b8 <error@@Base+0xe68>
   135f8:	add	r3, pc, r3
   135fc:	ldr	r2, [pc, #440]	; 137bc <error@@Base+0xe6c>
   13600:	add	r2, pc, r2
   13604:	ldr	r1, [pc, #436]	; 137c0 <error@@Base+0xe70>
   13608:	add	r1, pc, r1
   1360c:	ldr	r0, [fp, #-8]
   13610:	bl	10b2c <fprintf@plt>
   13614:	ldr	r3, [fp, #-16]
   13618:	ldr	r3, [r3]
   1361c:	mov	r2, r3
   13620:	ldr	r3, [pc, #412]	; 137c4 <error@@Base+0xe74>
   13624:	add	r3, pc, r3
   13628:	mov	r1, r3
   1362c:	ldr	r0, [fp, #-8]
   13630:	bl	10b2c <fprintf@plt>
   13634:	ldr	r3, [fp, #-16]
   13638:	ldr	r3, [r3, #4]
   1363c:	mov	r2, r3
   13640:	ldr	r3, [pc, #384]	; 137c8 <error@@Base+0xe78>
   13644:	add	r3, pc, r3
   13648:	mov	r1, r3
   1364c:	ldr	r0, [fp, #-8]
   13650:	bl	10b2c <fprintf@plt>
   13654:	ldr	r3, [fp, #-16]
   13658:	mov	r1, r3
   1365c:	ldr	r0, [fp, #-8]
   13660:	bl	13110 <error@@Base+0x7c0>
   13664:	ldr	r3, [fp, #-8]
   13668:	mov	r2, #12
   1366c:	mov	r1, #1
   13670:	ldr	r0, [pc, #340]	; 137cc <error@@Base+0xe7c>
   13674:	add	r0, pc, r0
   13678:	bl	10a9c <fwrite@plt>
   1367c:	ldr	r3, [fp, #-16]
   13680:	add	r1, r3, #8
   13684:	mov	r3, #1
   13688:	str	r3, [sp, #4]
   1368c:	mov	r3, #0
   13690:	str	r3, [sp]
   13694:	ldr	r3, [pc, #308]	; 137d0 <error@@Base+0xe80>
   13698:	add	r3, pc, r3
   1369c:	mov	r2, #50	; 0x32
   136a0:	ldr	r0, [fp, #-8]
   136a4:	bl	1326c <error@@Base+0x91c>
   136a8:	ldr	r3, [fp, #-16]
   136ac:	add	r1, r3, #416	; 0x1a0
   136b0:	mov	r3, #1
   136b4:	str	r3, [sp, #4]
   136b8:	mov	r3, #0
   136bc:	str	r3, [sp]
   136c0:	ldr	r3, [pc, #268]	; 137d4 <error@@Base+0xe84>
   136c4:	add	r3, pc, r3
   136c8:	mov	r2, #50	; 0x32
   136cc:	ldr	r0, [fp, #-8]
   136d0:	bl	1326c <error@@Base+0x91c>
   136d4:	ldr	r3, [fp, #-16]
   136d8:	add	r1, r3, #824	; 0x338
   136dc:	mov	r3, #1
   136e0:	str	r3, [sp, #4]
   136e4:	mov	r3, #1
   136e8:	str	r3, [sp]
   136ec:	ldr	r3, [pc, #228]	; 137d8 <error@@Base+0xe88>
   136f0:	add	r3, pc, r3
   136f4:	mov	r2, #10
   136f8:	ldr	r0, [fp, #-8]
   136fc:	bl	1326c <error@@Base+0x91c>
   13700:	ldr	r3, [fp, #-16]
   13704:	ldr	r3, [r3]
   13708:	cmp	r3, #0
   1370c:	ble	13798 <error@@Base+0xe48>
   13710:	ldr	r3, [fp, #-16]
   13714:	add	r1, r3, #920	; 0x398
   13718:	mov	r3, #0
   1371c:	str	r3, [sp, #4]
   13720:	mov	r3, #0
   13724:	str	r3, [sp]
   13728:	ldr	r3, [pc, #172]	; 137dc <error@@Base+0xe8c>
   1372c:	add	r3, pc, r3
   13730:	mov	r2, #8
   13734:	ldr	r0, [fp, #-8]
   13738:	bl	1326c <error@@Base+0x91c>
   1373c:	ldr	r3, [fp, #-16]
   13740:	ldr	r3, [r3, #8]
   13744:	cmp	r3, #0
   13748:	ble	13768 <error@@Base+0xe18>
   1374c:	ldr	r3, [fp, #-16]
   13750:	add	r3, r3, #992	; 0x3e0
   13754:	ldr	r2, [pc, #132]	; 137e0 <error@@Base+0xe90>
   13758:	add	r2, pc, r2
   1375c:	mov	r1, r3
   13760:	ldr	r0, [fp, #-8]
   13764:	bl	13494 <error@@Base+0xb44>
   13768:	ldr	r3, [fp, #-16]
   1376c:	ldr	r3, [r3, #416]	; 0x1a0
   13770:	cmp	r3, #0
   13774:	ble	13798 <error@@Base+0xe48>
   13778:	ldr	r3, [fp, #-16]
   1377c:	add	r3, r3, #9024	; 0x2340
   13780:	add	r3, r3, #24
   13784:	ldr	r2, [pc, #88]	; 137e4 <error@@Base+0xe94>
   13788:	add	r2, pc, r2
   1378c:	mov	r1, r3
   13790:	ldr	r0, [fp, #-8]
   13794:	bl	13494 <error@@Base+0xb44>
   13798:	ldr	r0, [fp, #-8]
   1379c:	bl	11f5c <__assert_fail@plt+0x13a0>
   137a0:	nop	{0}
   137a4:	sub	sp, fp, #4
   137a8:	ldr	fp, [sp]
   137ac:	add	sp, sp, #4
   137b0:	pop	{pc}		; (ldr pc, [sp], #4)
   137b4:	andeq	r1, r0, r8, asr #23
   137b8:	strdeq	r1, [r0], -r0
   137bc:			; <UNDEFINED> instruction: 0x00001ab8
   137c0:	andeq	r1, r0, r4, lsr #23
   137c4:	muleq	r0, r0, fp
   137c8:	andeq	r1, r0, r0, lsl #23
   137cc:	andeq	r1, r0, r8, ror #22
   137d0:	andeq	r1, r0, r4, asr fp
   137d4:	andeq	r1, r0, r4, lsr fp
   137d8:	andeq	r1, r0, r8, lsl fp
   137dc:	strdeq	r1, [r0], -r4
   137e0:	muleq	r0, r4, sl
   137e4:	andeq	r1, r0, r0, ror sl
   137e8:	str	fp, [sp, #-8]!
   137ec:	str	lr, [sp, #4]
   137f0:	add	fp, sp, #4
   137f4:	sub	sp, sp, #24
   137f8:	str	r0, [fp, #-16]
   137fc:	str	r1, [fp, #-20]	; 0xffffffec
   13800:	str	r2, [fp, #-24]	; 0xffffffe8
   13804:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1380c:	cmp	r2, r3
   13810:	bcs	1381c <error@@Base+0xecc>
   13814:	mov	r3, #0
   13818:	b	13914 <error@@Base+0xfc4>
   1381c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13820:	ldr	r3, [fp, #-20]	; 0xffffffec
   13824:	sub	r3, r2, r3
   13828:	lsr	r3, r3, #1
   1382c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13830:	add	r3, r2, r3
   13834:	str	r3, [fp, #-8]
   13838:	ldr	r2, [fp, #-8]
   1383c:	mov	r3, r2
   13840:	lsl	r3, r3, #1
   13844:	add	r3, r3, r2
   13848:	lsl	r3, r3, #2
   1384c:	ldr	r2, [pc, #212]	; 13928 <error@@Base+0xfd8>
   13850:	add	r2, pc, r2
   13854:	add	r3, r3, r2
   13858:	str	r3, [fp, #-12]
   1385c:	ldr	r3, [fp, #-12]
   13860:	ldr	r3, [r3]
   13864:	ldr	r2, [fp, #-16]
   13868:	cmp	r2, r3
   1386c:	bcs	13890 <error@@Base+0xf40>
   13870:	ldr	r3, [fp, #-8]
   13874:	sub	r3, r3, #1
   13878:	mov	r2, r3
   1387c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13880:	ldr	r0, [fp, #-16]
   13884:	bl	137e8 <error@@Base+0xe98>
   13888:	mov	r3, r0
   1388c:	b	13914 <error@@Base+0xfc4>
   13890:	ldr	r3, [fp, #-12]
   13894:	ldr	r3, [r3, #4]
   13898:	ldr	r2, [fp, #-16]
   1389c:	cmp	r2, r3
   138a0:	bls	138c4 <error@@Base+0xf74>
   138a4:	ldr	r3, [fp, #-8]
   138a8:	add	r3, r3, #1
   138ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   138b0:	mov	r1, r3
   138b4:	ldr	r0, [fp, #-16]
   138b8:	bl	137e8 <error@@Base+0xe98>
   138bc:	mov	r3, r0
   138c0:	b	13914 <error@@Base+0xfc4>
   138c4:	ldr	r3, [fp, #-12]
   138c8:	ldr	r3, [r3]
   138cc:	ldr	r2, [fp, #-16]
   138d0:	cmp	r2, r3
   138d4:	bcc	138ec <error@@Base+0xf9c>
   138d8:	ldr	r3, [fp, #-12]
   138dc:	ldr	r3, [r3, #4]
   138e0:	ldr	r2, [fp, #-16]
   138e4:	cmp	r2, r3
   138e8:	bls	1390c <error@@Base+0xfbc>
   138ec:	ldr	r3, [pc, #56]	; 1392c <error@@Base+0xfdc>
   138f0:	add	r3, pc, r3
   138f4:	mov	r2, #63	; 0x3f
   138f8:	ldr	r1, [pc, #48]	; 13930 <error@@Base+0xfe0>
   138fc:	add	r1, pc, r1
   13900:	ldr	r0, [pc, #44]	; 13934 <error@@Base+0xfe4>
   13904:	add	r0, pc, r0
   13908:	bl	10bbc <__assert_fail@plt>
   1390c:	ldr	r3, [fp, #-12]
   13910:	ldr	r3, [r3, #8]
   13914:	mov	r0, r3
   13918:	sub	sp, fp, #4
   1391c:	ldr	fp, [sp]
   13920:	add	sp, sp, #4
   13924:	pop	{pc}		; (ldr pc, [sp], #4)
   13928:	ldrdeq	r1, [r0], -r8
   1392c:	ldrdeq	r4, [r0], -ip
   13930:	andeq	r4, r0, r8, ror #24
   13934:	andeq	r4, r0, r8, ror #24
   13938:	str	fp, [sp, #-8]!
   1393c:	str	lr, [sp, #4]
   13940:	add	fp, sp, #4
   13944:	sub	sp, sp, #16
   13948:	str	r0, [fp, #-16]
   1394c:	movw	r3, #1093	; 0x445
   13950:	str	r3, [fp, #-8]
   13954:	ldr	r3, [fp, #-8]
   13958:	sub	r3, r3, #1
   1395c:	mov	r2, r3
   13960:	mov	r1, #0
   13964:	ldr	r0, [fp, #-16]
   13968:	bl	137e8 <error@@Base+0xe98>
   1396c:	mov	r3, r0
   13970:	mov	r0, r3
   13974:	sub	sp, fp, #4
   13978:	ldr	fp, [sp]
   1397c:	add	sp, sp, #4
   13980:	pop	{pc}		; (ldr pc, [sp], #4)
   13984:	str	fp, [sp, #-8]!
   13988:	str	lr, [sp, #4]
   1398c:	add	fp, sp, #4
   13990:	sub	sp, sp, #8
   13994:	str	r0, [fp, #-8]
   13998:	ldr	r3, [fp, #-8]
   1399c:	cmp	r3, #0
   139a0:	bne	139ac <error@@Base+0x105c>
   139a4:	mov	r3, #18
   139a8:	b	139c0 <error@@Base+0x1070>
   139ac:	ldr	r3, [fp, #-8]
   139b0:	ldr	r3, [r3, #12]
   139b4:	mov	r0, r3
   139b8:	bl	13938 <error@@Base+0xfe8>
   139bc:	mov	r3, r0
   139c0:	mov	r0, r3
   139c4:	sub	sp, fp, #4
   139c8:	ldr	fp, [sp]
   139cc:	add	sp, sp, #4
   139d0:	pop	{pc}		; (ldr pc, [sp], #4)
   139d4:	str	fp, [sp, #-8]!
   139d8:	str	lr, [sp, #4]
   139dc:	add	fp, sp, #4
   139e0:	sub	sp, sp, #8
   139e4:	str	r0, [fp, #-8]
   139e8:	ldr	r3, [fp, #-8]
   139ec:	cmp	r3, #0
   139f0:	bne	139fc <error@@Base+0x10ac>
   139f4:	mov	r3, #0
   139f8:	b	13a40 <error@@Base+0x10f0>
   139fc:	ldr	r3, [fp, #-8]
   13a00:	ldr	r3, [r3, #4]
   13a04:	str	r3, [fp, #-8]
   13a08:	ldr	r3, [fp, #-8]
   13a0c:	cmp	r3, #0
   13a10:	beq	13a3c <error@@Base+0x10ec>
   13a14:	ldr	r0, [fp, #-8]
   13a18:	bl	13984 <error@@Base+0x1034>
   13a1c:	mov	r3, r0
   13a20:	cmp	r3, #4
   13a24:	beq	139fc <error@@Base+0x10ac>
   13a28:	ldr	r0, [fp, #-8]
   13a2c:	bl	13984 <error@@Base+0x1034>
   13a30:	mov	r3, r0
   13a34:	cmp	r3, #6
   13a38:	beq	139fc <error@@Base+0x10ac>
   13a3c:	ldr	r3, [fp, #-8]
   13a40:	mov	r0, r3
   13a44:	sub	sp, fp, #4
   13a48:	ldr	fp, [sp]
   13a4c:	add	sp, sp, #4
   13a50:	pop	{pc}		; (ldr pc, [sp], #4)
   13a54:	str	fp, [sp, #-8]!
   13a58:	str	lr, [sp, #4]
   13a5c:	add	fp, sp, #4
   13a60:	sub	sp, sp, #8
   13a64:	str	r0, [fp, #-8]
   13a68:	ldr	r0, [fp, #-8]
   13a6c:	bl	139d4 <error@@Base+0x1084>
   13a70:	mov	r3, r0
   13a74:	mov	r0, r3
   13a78:	bl	139d4 <error@@Base+0x1084>
   13a7c:	mov	r3, r0
   13a80:	mov	r0, r3
   13a84:	sub	sp, fp, #4
   13a88:	ldr	fp, [sp]
   13a8c:	add	sp, sp, #4
   13a90:	pop	{pc}		; (ldr pc, [sp], #4)
   13a94:	str	fp, [sp, #-8]!
   13a98:	str	lr, [sp, #4]
   13a9c:	add	fp, sp, #4
   13aa0:	sub	sp, sp, #8
   13aa4:	str	r0, [fp, #-8]
   13aa8:	ldr	r3, [fp, #-8]
   13aac:	cmp	r3, #0
   13ab0:	bne	13ac8 <error@@Base+0x1178>
   13ab4:	mov	r3, #0
   13ab8:	b	13b14 <error@@Base+0x11c4>
   13abc:	ldr	r3, [fp, #-8]
   13ac0:	ldr	r3, [r3, #4]
   13ac4:	str	r3, [fp, #-8]
   13ac8:	ldr	r3, [fp, #-8]
   13acc:	ldr	r3, [r3, #4]
   13ad0:	cmp	r3, #0
   13ad4:	beq	13b10 <error@@Base+0x11c0>
   13ad8:	ldr	r3, [fp, #-8]
   13adc:	ldr	r3, [r3, #4]
   13ae0:	mov	r0, r3
   13ae4:	bl	13984 <error@@Base+0x1034>
   13ae8:	mov	r3, r0
   13aec:	cmp	r3, #4
   13af0:	beq	13abc <error@@Base+0x116c>
   13af4:	ldr	r3, [fp, #-8]
   13af8:	ldr	r3, [r3, #4]
   13afc:	mov	r0, r3
   13b00:	bl	13984 <error@@Base+0x1034>
   13b04:	mov	r3, r0
   13b08:	cmp	r3, #6
   13b0c:	beq	13abc <error@@Base+0x116c>
   13b10:	ldr	r3, [fp, #-8]
   13b14:	mov	r0, r3
   13b18:	sub	sp, fp, #4
   13b1c:	ldr	fp, [sp]
   13b20:	add	sp, sp, #4
   13b24:	pop	{pc}		; (ldr pc, [sp], #4)
   13b28:	str	fp, [sp, #-8]!
   13b2c:	str	lr, [sp, #4]
   13b30:	add	fp, sp, #4
   13b34:	sub	sp, sp, #48	; 0x30
   13b38:	str	r0, [fp, #-48]	; 0xffffffd0
   13b3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b40:	str	r3, [fp, #-36]	; 0xffffffdc
   13b44:	sub	r3, fp, #40	; 0x28
   13b48:	str	r3, [fp, #-8]
   13b4c:	mov	r3, #17
   13b50:	str	r3, [fp, #-12]
   13b54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b58:	cmp	r3, #0
   13b5c:	bne	13f28 <error@@Base+0x15d8>
   13b60:	mov	r3, #0
   13b64:	b	13f4c <error@@Base+0x15fc>
   13b68:	ldr	r0, [fp, #-8]
   13b6c:	bl	139d4 <error@@Base+0x1084>
   13b70:	str	r0, [fp, #-8]
   13b74:	ldr	r3, [fp, #-12]
   13b78:	str	r3, [fp, #-16]
   13b7c:	ldr	r0, [fp, #-8]
   13b80:	bl	13984 <error@@Base+0x1034>
   13b84:	str	r0, [fp, #-12]
   13b88:	ldr	r0, [fp, #-8]
   13b8c:	bl	139d4 <error@@Base+0x1084>
   13b90:	mov	r3, r0
   13b94:	mov	r0, r3
   13b98:	bl	13984 <error@@Base+0x1034>
   13b9c:	str	r0, [fp, #-20]	; 0xffffffec
   13ba0:	ldr	r0, [fp, #-8]
   13ba4:	bl	13a54 <error@@Base+0x1104>
   13ba8:	mov	r3, r0
   13bac:	mov	r0, r3
   13bb0:	bl	13984 <error@@Base+0x1034>
   13bb4:	str	r0, [fp, #-24]	; 0xffffffe8
   13bb8:	ldr	r3, [fp, #-12]
   13bbc:	cmp	r3, #1
   13bc0:	bne	13bd4 <error@@Base+0x1284>
   13bc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bc8:	cmp	r3, #2
   13bcc:	bne	13bd4 <error@@Base+0x1284>
   13bd0:	b	13f28 <error@@Base+0x15d8>
   13bd4:	ldr	r3, [fp, #-12]
   13bd8:	cmp	r3, #3
   13bdc:	beq	13f40 <error@@Base+0x15f0>
   13be0:	ldr	r3, [fp, #-12]
   13be4:	cmp	r3, #1
   13be8:	beq	13f40 <error@@Base+0x15f0>
   13bec:	ldr	r3, [fp, #-12]
   13bf0:	cmp	r3, #2
   13bf4:	beq	13f40 <error@@Base+0x15f0>
   13bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bfc:	cmp	r3, #3
   13c00:	beq	13f40 <error@@Base+0x15f0>
   13c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c08:	cmp	r3, #1
   13c0c:	beq	13f40 <error@@Base+0x15f0>
   13c10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c14:	cmp	r3, #2
   13c18:	beq	13f40 <error@@Base+0x15f0>
   13c1c:	ldr	r3, [fp, #-12]
   13c20:	cmp	r3, #9
   13c24:	beq	13c34 <error@@Base+0x12e4>
   13c28:	ldr	r3, [fp, #-12]
   13c2c:	cmp	r3, #8
   13c30:	bne	13c50 <error@@Base+0x1300>
   13c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c38:	cmp	r3, #9
   13c3c:	beq	13f28 <error@@Base+0x15d8>
   13c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c44:	cmp	r3, #8
   13c48:	bne	13c50 <error@@Base+0x1300>
   13c4c:	b	13f28 <error@@Base+0x15d8>
   13c50:	ldr	r3, [fp, #-12]
   13c54:	cmp	r3, #9
   13c58:	beq	13c68 <error@@Base+0x1318>
   13c5c:	ldr	r3, [fp, #-12]
   13c60:	cmp	r3, #8
   13c64:	bne	13ca8 <error@@Base+0x1358>
   13c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c6c:	cmp	r3, #13
   13c70:	beq	13c8c <error@@Base+0x133c>
   13c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c78:	cmp	r3, #12
   13c7c:	beq	13c8c <error@@Base+0x133c>
   13c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c84:	cmp	r3, #10
   13c88:	bne	13ca8 <error@@Base+0x1358>
   13c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c90:	cmp	r3, #9
   13c94:	beq	13f28 <error@@Base+0x15d8>
   13c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c9c:	cmp	r3, #8
   13ca0:	bne	13ca8 <error@@Base+0x1358>
   13ca4:	b	13f28 <error@@Base+0x15d8>
   13ca8:	ldr	r3, [fp, #-16]
   13cac:	cmp	r3, #9
   13cb0:	beq	13cc0 <error@@Base+0x1370>
   13cb4:	ldr	r3, [fp, #-16]
   13cb8:	cmp	r3, #8
   13cbc:	bne	13d00 <error@@Base+0x13b0>
   13cc0:	ldr	r3, [fp, #-12]
   13cc4:	cmp	r3, #13
   13cc8:	beq	13ce4 <error@@Base+0x1394>
   13ccc:	ldr	r3, [fp, #-12]
   13cd0:	cmp	r3, #12
   13cd4:	beq	13ce4 <error@@Base+0x1394>
   13cd8:	ldr	r3, [fp, #-12]
   13cdc:	cmp	r3, #10
   13ce0:	bne	13d00 <error@@Base+0x13b0>
   13ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ce8:	cmp	r3, #9
   13cec:	beq	13f28 <error@@Base+0x15d8>
   13cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf4:	cmp	r3, #8
   13cf8:	bne	13d00 <error@@Base+0x13b0>
   13cfc:	b	13f28 <error@@Base+0x15d8>
   13d00:	ldr	r3, [fp, #-12]
   13d04:	cmp	r3, #8
   13d08:	bne	13d1c <error@@Base+0x13cc>
   13d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d10:	cmp	r3, #10
   13d14:	bne	13d1c <error@@Base+0x13cc>
   13d18:	b	13f28 <error@@Base+0x15d8>
   13d1c:	ldr	r3, [fp, #-12]
   13d20:	cmp	r3, #8
   13d24:	bne	13d44 <error@@Base+0x13f4>
   13d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d2c:	cmp	r3, #11
   13d30:	bne	13d44 <error@@Base+0x13f4>
   13d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d38:	cmp	r3, #8
   13d3c:	bne	13d44 <error@@Base+0x13f4>
   13d40:	b	13f28 <error@@Base+0x15d8>
   13d44:	ldr	r3, [fp, #-16]
   13d48:	cmp	r3, #8
   13d4c:	bne	13d6c <error@@Base+0x141c>
   13d50:	ldr	r3, [fp, #-12]
   13d54:	cmp	r3, #11
   13d58:	bne	13d6c <error@@Base+0x141c>
   13d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d60:	cmp	r3, #8
   13d64:	bne	13d6c <error@@Base+0x141c>
   13d68:	b	13f28 <error@@Base+0x15d8>
   13d6c:	ldr	r3, [fp, #-12]
   13d70:	cmp	r3, #15
   13d74:	bne	13d88 <error@@Base+0x1438>
   13d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d7c:	cmp	r3, #15
   13d80:	bne	13d88 <error@@Base+0x1438>
   13d84:	b	13f28 <error@@Base+0x15d8>
   13d88:	ldr	r3, [fp, #-12]
   13d8c:	cmp	r3, #9
   13d90:	beq	13da0 <error@@Base+0x1450>
   13d94:	ldr	r3, [fp, #-12]
   13d98:	cmp	r3, #8
   13d9c:	bne	13db0 <error@@Base+0x1460>
   13da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13da4:	cmp	r3, #15
   13da8:	bne	13db0 <error@@Base+0x1460>
   13dac:	b	13f28 <error@@Base+0x15d8>
   13db0:	ldr	r3, [fp, #-12]
   13db4:	cmp	r3, #15
   13db8:	bne	13dd8 <error@@Base+0x1488>
   13dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dc0:	cmp	r3, #9
   13dc4:	beq	13f28 <error@@Base+0x15d8>
   13dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dcc:	cmp	r3, #8
   13dd0:	bne	13dd8 <error@@Base+0x1488>
   13dd4:	b	13f28 <error@@Base+0x15d8>
   13dd8:	ldr	r3, [fp, #-16]
   13ddc:	cmp	r3, #15
   13de0:	bne	13e18 <error@@Base+0x14c8>
   13de4:	ldr	r3, [fp, #-12]
   13de8:	cmp	r3, #14
   13dec:	beq	13e08 <error@@Base+0x14b8>
   13df0:	ldr	r3, [fp, #-12]
   13df4:	cmp	r3, #12
   13df8:	beq	13e08 <error@@Base+0x14b8>
   13dfc:	ldr	r3, [fp, #-12]
   13e00:	cmp	r3, #10
   13e04:	bne	13e18 <error@@Base+0x14c8>
   13e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e0c:	cmp	r3, #15
   13e10:	bne	13e18 <error@@Base+0x14c8>
   13e14:	b	13f28 <error@@Base+0x15d8>
   13e18:	ldr	r3, [fp, #-12]
   13e1c:	cmp	r3, #15
   13e20:	bne	13e58 <error@@Base+0x1508>
   13e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e28:	cmp	r3, #14
   13e2c:	beq	13e48 <error@@Base+0x14f8>
   13e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e34:	cmp	r3, #12
   13e38:	beq	13e48 <error@@Base+0x14f8>
   13e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e40:	cmp	r3, #10
   13e44:	bne	13e58 <error@@Base+0x1508>
   13e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e4c:	cmp	r3, #15
   13e50:	bne	13e58 <error@@Base+0x1508>
   13e54:	b	13f28 <error@@Base+0x15d8>
   13e58:	ldr	r3, [fp, #-12]
   13e5c:	cmp	r3, #7
   13e60:	bne	13e74 <error@@Base+0x1524>
   13e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e68:	cmp	r3, #7
   13e6c:	bne	13e74 <error@@Base+0x1524>
   13e70:	b	13f28 <error@@Base+0x15d8>
   13e74:	ldr	r3, [fp, #-12]
   13e78:	cmp	r3, #9
   13e7c:	beq	13eb0 <error@@Base+0x1560>
   13e80:	ldr	r3, [fp, #-12]
   13e84:	cmp	r3, #8
   13e88:	beq	13eb0 <error@@Base+0x1560>
   13e8c:	ldr	r3, [fp, #-12]
   13e90:	cmp	r3, #15
   13e94:	beq	13eb0 <error@@Base+0x1560>
   13e98:	ldr	r3, [fp, #-12]
   13e9c:	cmp	r3, #7
   13ea0:	beq	13eb0 <error@@Base+0x1560>
   13ea4:	ldr	r3, [fp, #-12]
   13ea8:	cmp	r3, #16
   13eac:	bne	13ec0 <error@@Base+0x1570>
   13eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eb4:	cmp	r3, #16
   13eb8:	bne	13ec0 <error@@Base+0x1570>
   13ebc:	b	13f28 <error@@Base+0x15d8>
   13ec0:	ldr	r3, [fp, #-12]
   13ec4:	cmp	r3, #16
   13ec8:	bne	13f0c <error@@Base+0x15bc>
   13ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ed0:	cmp	r3, #9
   13ed4:	beq	13f28 <error@@Base+0x15d8>
   13ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13edc:	cmp	r3, #8
   13ee0:	beq	13f28 <error@@Base+0x15d8>
   13ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee8:	cmp	r3, #15
   13eec:	beq	13f28 <error@@Base+0x15d8>
   13ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef4:	cmp	r3, #7
   13ef8:	beq	13f28 <error@@Base+0x15d8>
   13efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f00:	cmp	r3, #16
   13f04:	bne	13f0c <error@@Base+0x15bc>
   13f08:	b	13f28 <error@@Base+0x15d8>
   13f0c:	ldr	r3, [fp, #-12]
   13f10:	cmp	r3, #5
   13f14:	bne	13f3c <error@@Base+0x15ec>
   13f18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f1c:	cmp	r3, #5
   13f20:	bne	13f3c <error@@Base+0x15ec>
   13f24:	nop	{0}
   13f28:	ldr	r3, [fp, #-8]
   13f2c:	ldr	r3, [r3, #4]
   13f30:	cmp	r3, #0
   13f34:	bne	13b68 <error@@Base+0x1218>
   13f38:	b	13f40 <error@@Base+0x15f0>
   13f3c:	nop	{0}
   13f40:	ldr	r0, [fp, #-8]
   13f44:	bl	13a94 <error@@Base+0x1144>
   13f48:	mov	r3, r0
   13f4c:	mov	r0, r3
   13f50:	sub	sp, fp, #4
   13f54:	ldr	fp, [sp]
   13f58:	add	sp, sp, #4
   13f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f60:	str	fp, [sp, #-8]!
   13f64:	str	lr, [sp, #4]
   13f68:	add	fp, sp, #4
   13f6c:	sub	sp, sp, #24
   13f70:	str	r0, [fp, #-24]	; 0xffffffe8
   13f74:	str	r1, [fp, #-28]	; 0xffffffe4
   13f78:	mov	r3, #0
   13f7c:	str	r3, [fp, #-12]
   13f80:	mov	r3, #0
   13f84:	str	r3, [fp, #-16]
   13f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f8c:	str	r3, [fp, #-8]
   13f90:	b	1402c <error@@Base+0x16dc>
   13f94:	ldr	r3, [fp, #-8]
   13f98:	cmp	r3, #0
   13f9c:	bne	13fc0 <error@@Base+0x1670>
   13fa0:	ldr	r3, [pc, #172]	; 14054 <error@@Base+0x1704>
   13fa4:	add	r3, pc, r3
   13fa8:	mov	r2, #249	; 0xf9
   13fac:	ldr	r1, [pc, #164]	; 14058 <error@@Base+0x1708>
   13fb0:	add	r1, pc, r1
   13fb4:	ldr	r0, [pc, #160]	; 1405c <error@@Base+0x170c>
   13fb8:	add	r0, pc, r0
   13fbc:	bl	10bbc <__assert_fail@plt>
   13fc0:	ldr	r3, [fp, #-8]
   13fc4:	ldr	r3, [r3, #12]
   13fc8:	mov	r2, r3
   13fcc:	sub	r3, fp, #20
   13fd0:	mov	r1, r3
   13fd4:	mov	r0, r2
   13fd8:	bl	10a54 <utf8proc_encode_char@plt>
   13fdc:	mov	r3, r0
   13fe0:	str	r3, [fp, #-16]
   13fe4:	ldr	r3, [fp, #-16]
   13fe8:	cmp	r3, #0
   13fec:	bne	14010 <error@@Base+0x16c0>
   13ff0:	ldr	r3, [pc, #104]	; 14060 <error@@Base+0x1710>
   13ff4:	add	r3, pc, r3
   13ff8:	mov	r2, #253	; 0xfd
   13ffc:	ldr	r1, [pc, #96]	; 14064 <error@@Base+0x1714>
   14000:	add	r1, pc, r1
   14004:	ldr	r0, [pc, #92]	; 14068 <error@@Base+0x1718>
   14008:	add	r0, pc, r0
   1400c:	bl	10bbc <__assert_fail@plt>
   14010:	ldr	r2, [fp, #-12]
   14014:	ldr	r3, [fp, #-16]
   14018:	add	r3, r2, r3
   1401c:	str	r3, [fp, #-12]
   14020:	ldr	r3, [fp, #-8]
   14024:	ldr	r3, [r3, #4]
   14028:	str	r3, [fp, #-8]
   1402c:	ldr	r2, [fp, #-8]
   14030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14034:	cmp	r2, r3
   14038:	bne	13f94 <error@@Base+0x1644>
   1403c:	ldr	r3, [fp, #-12]
   14040:	mov	r0, r3
   14044:	sub	sp, fp, #4
   14048:	ldr	fp, [sp]
   1404c:	add	sp, sp, #4
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	andeq	r4, r0, ip, lsr r6
   14058:			; <UNDEFINED> instruction: 0x000045b4
   1405c:	strdeq	r4, [r0], -r0
   14060:	andeq	r4, r0, ip, ror #11
   14064:	andeq	r4, r0, r4, ror #10
   14068:			; <UNDEFINED> instruction: 0x000045b0
   1406c:	str	fp, [sp, #-8]!
   14070:	str	lr, [sp, #4]
   14074:	add	fp, sp, #4
   14078:	sub	sp, sp, #24
   1407c:	str	r0, [fp, #-16]
   14080:	str	r1, [fp, #-20]	; 0xffffffec
   14084:	str	r2, [fp, #-24]	; 0xffffffe8
   14088:	mov	r3, #0
   1408c:	str	r3, [fp, #-12]
   14090:	ldr	r3, [fp, #-20]	; 0xffffffec
   14094:	str	r3, [fp, #-8]
   14098:	b	14108 <error@@Base+0x17b8>
   1409c:	ldr	r3, [fp, #-8]
   140a0:	cmp	r3, #0
   140a4:	bne	140c8 <error@@Base+0x1778>
   140a8:	ldr	r3, [pc, #144]	; 14140 <error@@Base+0x17f0>
   140ac:	add	r3, pc, r3
   140b0:	movw	r2, #269	; 0x10d
   140b4:	ldr	r1, [pc, #136]	; 14144 <error@@Base+0x17f4>
   140b8:	add	r1, pc, r1
   140bc:	ldr	r0, [pc, #132]	; 14148 <error@@Base+0x17f8>
   140c0:	add	r0, pc, r0
   140c4:	bl	10bbc <__assert_fail@plt>
   140c8:	ldr	r3, [fp, #-8]
   140cc:	ldr	r3, [r3, #12]
   140d0:	mov	r0, r3
   140d4:	ldr	r2, [fp, #-16]
   140d8:	ldr	r3, [fp, #-12]
   140dc:	add	r3, r2, r3
   140e0:	mov	r1, r3
   140e4:	bl	10a54 <utf8proc_encode_char@plt>
   140e8:	mov	r3, r0
   140ec:	mov	r2, r3
   140f0:	ldr	r3, [fp, #-12]
   140f4:	add	r3, r3, r2
   140f8:	str	r3, [fp, #-12]
   140fc:	ldr	r3, [fp, #-8]
   14100:	ldr	r3, [r3, #4]
   14104:	str	r3, [fp, #-8]
   14108:	ldr	r2, [fp, #-8]
   1410c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14110:	cmp	r2, r3
   14114:	bne	1409c <error@@Base+0x174c>
   14118:	ldr	r2, [fp, #-16]
   1411c:	ldr	r3, [fp, #-12]
   14120:	add	r3, r2, r3
   14124:	mov	r2, #0
   14128:	strb	r2, [r3]
   1412c:	nop	{0}
   14130:	sub	sp, fp, #4
   14134:	ldr	fp, [sp]
   14138:	add	sp, sp, #4
   1413c:	pop	{pc}		; (ldr pc, [sp], #4)
   14140:	andeq	r4, r0, r8, asr #10
   14144:	andeq	r4, r0, ip, lsr #9
   14148:	andeq	r4, r0, r8, ror #9
   1414c:	str	fp, [sp, #-8]!
   14150:	str	lr, [sp, #4]
   14154:	add	fp, sp, #4
   14158:	sub	sp, sp, #32
   1415c:	str	r0, [fp, #-24]	; 0xffffffe8
   14160:	str	r1, [fp, #-28]	; 0xffffffe4
   14164:	str	r2, [fp, #-32]	; 0xffffffe0
   14168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1416c:	ldr	r3, [r3, #4]
   14170:	str	r3, [fp, #-8]
   14174:	ldr	r1, [fp, #-8]
   14178:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1417c:	bl	13f60 <error@@Base+0x1610>
   14180:	str	r0, [fp, #-12]
   14184:	ldr	r3, [fp, #-12]
   14188:	add	r3, r3, #1
   1418c:	mov	r0, r3
   14190:	bl	10acc <malloc@plt>
   14194:	mov	r3, r0
   14198:	str	r3, [fp, #-16]
   1419c:	ldr	r2, [fp, #-8]
   141a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   141a4:	ldr	r0, [fp, #-16]
   141a8:	bl	1406c <error@@Base+0x171c>
   141ac:	mov	r1, #12
   141b0:	mov	r0, #1
   141b4:	bl	11d30 <__assert_fail@plt+0x1174>
   141b8:	str	r0, [fp, #-20]	; 0xffffffec
   141bc:	ldr	r0, [fp, #-16]
   141c0:	bl	10b50 <utf8proc_NFC@plt>
   141c4:	mov	r2, r0
   141c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141cc:	str	r2, [r3, #8]
   141d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   141d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141d8:	bl	112c4 <__assert_fail@plt+0x708>
   141dc:	ldr	r0, [fp, #-16]
   141e0:	bl	10a30 <free@plt>
   141e4:	nop	{0}
   141e8:	sub	sp, fp, #4
   141ec:	ldr	fp, [sp]
   141f0:	add	sp, sp, #4
   141f4:	pop	{pc}		; (ldr pc, [sp], #4)
   141f8:	str	fp, [sp, #-8]!
   141fc:	str	lr, [sp, #4]
   14200:	add	fp, sp, #4
   14204:	sub	sp, sp, #16
   14208:	str	r0, [fp, #-16]
   1420c:	ldr	r3, [fp, #-16]
   14210:	mov	r0, r3
   14214:	bl	10a3c <utf8proc_get_property@plt>
   14218:	str	r0, [fp, #-8]
   1421c:	ldr	r3, [fp, #-8]
   14220:	ldrsh	r3, [r3]
   14224:	cmp	r3, #0
   14228:	ble	14244 <error@@Base+0x18f4>
   1422c:	cmp	r3, #12
   14230:	ble	1423c <error@@Base+0x18ec>
   14234:	cmp	r3, #29
   14238:	bne	14244 <error@@Base+0x18f4>
   1423c:	mov	r3, #1
   14240:	b	14248 <error@@Base+0x18f8>
   14244:	mov	r3, #0
   14248:	mov	r0, r3
   1424c:	sub	sp, fp, #4
   14250:	ldr	fp, [sp]
   14254:	add	sp, sp, #4
   14258:	pop	{pc}		; (ldr pc, [sp], #4)
   1425c:	str	fp, [sp, #-8]!
   14260:	str	lr, [sp, #4]
   14264:	add	fp, sp, #4
   14268:	sub	sp, sp, #16
   1426c:	str	r0, [fp, #-16]
   14270:	str	r1, [fp, #-20]	; 0xffffffec
   14274:	ldr	r3, [fp, #-20]	; 0xffffffec
   14278:	ldr	r3, [r3]
   1427c:	str	r3, [fp, #-8]
   14280:	b	142bc <error@@Base+0x196c>
   14284:	ldr	r3, [fp, #-8]
   14288:	ldr	r3, [r3, #12]
   1428c:	mov	r0, r3
   14290:	bl	141f8 <error@@Base+0x18a8>
   14294:	mov	r3, r0
   14298:	cmp	r3, #0
   1429c:	beq	142b0 <error@@Base+0x1960>
   142a0:	ldr	r2, [fp, #-12]
   142a4:	ldr	r1, [fp, #-8]
   142a8:	ldr	r0, [fp, #-16]
   142ac:	bl	1414c <error@@Base+0x17fc>
   142b0:	ldr	r3, [fp, #-12]
   142b4:	ldr	r3, [r3, #4]
   142b8:	str	r3, [fp, #-8]
   142bc:	ldr	r0, [fp, #-8]
   142c0:	bl	13b28 <error@@Base+0x11d8>
   142c4:	str	r0, [fp, #-12]
   142c8:	ldr	r3, [fp, #-12]
   142cc:	cmp	r3, #0
   142d0:	bne	14284 <error@@Base+0x1934>
   142d4:	nop	{0}
   142d8:	sub	sp, fp, #4
   142dc:	ldr	fp, [sp]
   142e0:	add	sp, sp, #4
   142e4:	pop	{pc}		; (ldr pc, [sp], #4)
   142e8:	str	fp, [sp, #-8]!
   142ec:	str	lr, [sp, #4]
   142f0:	add	fp, sp, #4
   142f4:	sub	sp, sp, #8
   142f8:	str	r0, [fp, #-8]
   142fc:	ldr	r3, [fp, #-8]
   14300:	ldr	r3, [r3, #8]
   14304:	mov	r0, r3
   14308:	bl	10a30 <free@plt>
   1430c:	ldr	r0, [fp, #-8]
   14310:	bl	10a30 <free@plt>
   14314:	nop	{0}
   14318:	sub	sp, fp, #4
   1431c:	ldr	fp, [sp]
   14320:	add	sp, sp, #4
   14324:	pop	{pc}		; (ldr pc, [sp], #4)
   14328:	str	fp, [sp, #-8]!
   1432c:	str	lr, [sp, #4]
   14330:	add	fp, sp, #4
   14334:	sub	sp, sp, #24
   14338:	str	r0, [fp, #-16]
   1433c:	mov	r3, r1
   14340:	str	r2, [fp, #-24]	; 0xffffffe8
   14344:	strb	r3, [fp, #-20]	; 0xffffffec
   14348:	mov	r1, #16
   1434c:	mov	r0, #1
   14350:	bl	11d30 <__assert_fail@plt+0x1174>
   14354:	str	r0, [fp, #-8]
   14358:	ldr	r3, [fp, #-8]
   1435c:	ldrb	r2, [fp, #-20]	; 0xffffffec
   14360:	strb	r2, [r3, #8]
   14364:	ldr	r3, [fp, #-8]
   14368:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1436c:	str	r2, [r3, #12]
   14370:	ldr	r1, [fp, #-8]
   14374:	ldr	r0, [fp, #-16]
   14378:	bl	112c4 <__assert_fail@plt+0x708>
   1437c:	nop	{0}
   14380:	sub	sp, fp, #4
   14384:	ldr	fp, [sp]
   14388:	add	sp, sp, #4
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	str	fp, [sp, #-8]!
   14394:	str	lr, [sp, #4]
   14398:	add	fp, sp, #4
   1439c:	sub	sp, sp, #112	; 0x70
   143a0:	str	r0, [fp, #-112]	; 0xffffff90
   143a4:	mov	r3, #0
   143a8:	strh	r3, [fp, #-6]
   143ac:	sub	r3, fp, #108	; 0x6c
   143b0:	ldr	r2, [fp, #-112]	; 0xffffff90
   143b4:	mov	r1, #99	; 0x63
   143b8:	mov	r0, r3
   143bc:	bl	10a48 <fgets@plt>
   143c0:	mov	r3, r0
   143c4:	cmp	r3, #0
   143c8:	beq	14460 <error@@Base+0x1b10>
   143cc:	sub	r3, fp, #108	; 0x6c
   143d0:	mov	r2, #51	; 0x33
   143d4:	ldr	r1, [pc, #164]	; 14480 <error@@Base+0x1b30>
   143d8:	add	r1, pc, r1
   143dc:	mov	r0, r3
   143e0:	bl	10b98 <strncmp@plt>
   143e4:	mov	r3, r0
   143e8:	cmp	r3, #0
   143ec:	bne	14460 <error@@Base+0x1b10>
   143f0:	b	1442c <error@@Base+0x1adc>
   143f4:	sub	r3, fp, #108	; 0x6c
   143f8:	ldr	r2, [pc, #132]	; 14484 <error@@Base+0x1b34>
   143fc:	add	r2, pc, r2
   14400:	mov	r1, r2
   14404:	mov	r0, r3
   14408:	bl	10a0c <strcmp@plt>
   1440c:	mov	r3, r0
   14410:	cmp	r3, #0
   14414:	bne	1442c <error@@Base+0x1adc>
   14418:	ldrsh	r3, [fp, #-6]
   1441c:	uxth	r3, r3
   14420:	add	r3, r3, #1
   14424:	uxth	r3, r3
   14428:	strh	r3, [fp, #-6]
   1442c:	ldrsh	r3, [fp, #-6]
   14430:	cmp	r3, #1
   14434:	bgt	14458 <error@@Base+0x1b08>
   14438:	sub	r3, fp, #108	; 0x6c
   1443c:	ldr	r2, [fp, #-112]	; 0xffffff90
   14440:	mov	r1, #99	; 0x63
   14444:	mov	r0, r3
   14448:	bl	10a48 <fgets@plt>
   1444c:	mov	r3, r0
   14450:	cmp	r3, #0
   14454:	bne	143f4 <error@@Base+0x1aa4>
   14458:	mov	r3, #1
   1445c:	b	1446c <error@@Base+0x1b1c>
   14460:	ldr	r0, [fp, #-112]	; 0xffffff90
   14464:	bl	10a6c <rewind@plt>
   14468:	mov	r3, #0
   1446c:	mov	r0, r3
   14470:	sub	sp, fp, #4
   14474:	ldr	fp, [sp]
   14478:	add	sp, sp, #4
   1447c:	pop	{pc}		; (ldr pc, [sp], #4)
   14480:	andeq	r4, r0, r0, lsr r2
   14484:	andeq	r4, r0, r4, asr #4
   14488:	str	r4, [sp, #-12]!
   1448c:	str	fp, [sp, #4]
   14490:	str	lr, [sp, #8]
   14494:	add	fp, sp, #8
   14498:	sub	sp, sp, #52	; 0x34
   1449c:	str	r0, [fp, #-48]	; 0xffffffd0
   144a0:	str	r1, [fp, #-52]	; 0xffffffcc
   144a4:	str	r3, [fp, #-60]	; 0xffffffc4
   144a8:	mov	r3, r2
   144ac:	strb	r3, [fp, #-56]	; 0xffffffc8
   144b0:	ldr	r4, [pc, #352]	; 14618 <error@@Base+0x1cc8>
   144b4:	add	r4, pc, r4
   144b8:	mov	r3, #0
   144bc:	strb	r3, [fp, #-13]
   144c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   144c4:	bl	10bb0 <getc@plt>
   144c8:	str	r0, [fp, #-20]	; 0xffffffec
   144cc:	b	145f4 <error@@Base+0x1ca4>
   144d0:	ldr	r3, [pc, #324]	; 1461c <error@@Base+0x1ccc>
   144d4:	ldr	r2, [r4, r3]
   144d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144dc:	add	r3, r2, r3
   144e0:	ldrsb	r3, [r3]
   144e4:	str	r3, [fp, #-24]	; 0xffffffe8
   144e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144ec:	cmp	r3, #0
   144f0:	bgt	14504 <error@@Base+0x1bb4>
   144f4:	ldr	r3, [pc, #292]	; 14620 <error@@Base+0x1cd0>
   144f8:	add	r3, pc, r3
   144fc:	mov	r0, r3
   14500:	bl	12950 <error@@Base>
   14504:	ldr	r3, [fp, #-20]	; 0xffffffec
   14508:	uxtb	r3, r3
   1450c:	strb	r3, [fp, #-36]	; 0xffffffdc
   14510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14514:	cmp	r3, #1
   14518:	ble	14568 <error@@Base+0x1c18>
   1451c:	sub	r0, fp, #36	; 0x24
   14520:	add	r0, r0, #1
   14524:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14528:	sub	r3, r3, #1
   1452c:	mov	r2, r3
   14530:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14534:	mov	r1, #1
   14538:	bl	10aa8 <fread@plt>
   1453c:	mov	r3, r0
   14540:	str	r3, [fp, #-28]	; 0xffffffe4
   14544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14548:	sub	r3, r3, #1
   1454c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14550:	cmp	r2, r3
   14554:	beq	14568 <error@@Base+0x1c18>
   14558:	ldr	r3, [pc, #196]	; 14624 <error@@Base+0x1cd4>
   1455c:	add	r3, pc, r3
   14560:	mov	r0, r3
   14564:	bl	12950 <error@@Base>
   14568:	sub	r2, fp, #40	; 0x28
   1456c:	sub	r3, fp, #36	; 0x24
   14570:	mov	r1, #4
   14574:	mov	r0, r3
   14578:	bl	10ab4 <utf8proc_iterate@plt>
   1457c:	str	r0, [fp, #-32]	; 0xffffffe0
   14580:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14588:	cmp	r2, r3
   1458c:	beq	145a4 <error@@Base+0x1c54>
   14590:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14594:	bl	10b80 <utf8proc_errmsg@plt>
   14598:	mov	r3, r0
   1459c:	mov	r0, r3
   145a0:	bl	12950 <error@@Base>
   145a4:	ldrb	r3, [fp, #-56]	; 0xffffffc8
   145a8:	cmp	r3, #0
   145ac:	beq	145cc <error@@Base+0x1c7c>
   145b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   145b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   145b8:	cmp	r2, r3
   145bc:	bne	145cc <error@@Base+0x1c7c>
   145c0:	mov	r3, #1
   145c4:	strb	r3, [fp, #-13]
   145c8:	b	145e8 <error@@Base+0x1c98>
   145cc:	ldrb	r3, [fp, #-13]
   145d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   145d4:	mov	r1, r3
   145d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   145dc:	bl	14328 <error@@Base+0x19d8>
   145e0:	mov	r3, #0
   145e4:	strb	r3, [fp, #-13]
   145e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145ec:	bl	10bb0 <getc@plt>
   145f0:	str	r0, [fp, #-20]	; 0xffffffec
   145f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   145f8:	cmn	r3, #1
   145fc:	bne	144d0 <error@@Base+0x1b80>
   14600:	nop	{0}
   14604:	sub	sp, fp, #8
   14608:	ldr	r4, [sp]
   1460c:	ldr	fp, [sp, #4]
   14610:	add	sp, sp, #8
   14614:	pop	{pc}		; (ldr pc, [sp], #4)
   14618:	andeq	r4, r1, r4, asr #22
   1461c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   14620:	andeq	r4, r0, r0, lsl #3
   14624:	andeq	r4, r0, r4, lsr r1
   14628:	str	fp, [sp, #-8]!
   1462c:	str	lr, [sp, #4]
   14630:	add	fp, sp, #4
   14634:	sub	sp, sp, #16
   14638:	str	r0, [fp, #-16]
   1463c:	ldr	r0, [fp, #-16]
   14640:	bl	10a3c <utf8proc_get_property@plt>
   14644:	str	r0, [fp, #-8]
   14648:	ldr	r3, [fp, #-16]
   1464c:	cmp	r3, #13
   14650:	bgt	1467c <error@@Base+0x1d2c>
   14654:	ldr	r3, [fp, #-16]
   14658:	cmp	r3, #11
   1465c:	bge	14694 <error@@Base+0x1d44>
   14660:	ldr	r3, [fp, #-16]
   14664:	cmp	r3, #9
   14668:	beq	14694 <error@@Base+0x1d44>
   1466c:	ldr	r3, [fp, #-16]
   14670:	cmp	r3, #10
   14674:	beq	1468c <error@@Base+0x1d3c>
   14678:	b	1469c <error@@Base+0x1d4c>
   1467c:	ldr	r3, [fp, #-16]
   14680:	cmp	r3, #160	; 0xa0
   14684:	beq	14694 <error@@Base+0x1d44>
   14688:	b	1469c <error@@Base+0x1d4c>
   1468c:	mov	r3, #0
   14690:	b	146bc <error@@Base+0x1d6c>
   14694:	mov	r3, #1
   14698:	b	146bc <error@@Base+0x1d6c>
   1469c:	ldr	r3, [fp, #-8]
   146a0:	ldrsh	r3, [r3]
   146a4:	sub	r3, r3, #23
   146a8:	cmp	r3, #2
   146ac:	bhi	146b8 <error@@Base+0x1d68>
   146b0:	mov	r3, #1
   146b4:	b	146bc <error@@Base+0x1d6c>
   146b8:	mov	r3, #0
   146bc:	mov	r0, r3
   146c0:	sub	sp, fp, #4
   146c4:	ldr	fp, [sp]
   146c8:	add	sp, sp, #4
   146cc:	pop	{pc}		; (ldr pc, [sp], #4)
   146d0:	str	fp, [sp, #-8]!
   146d4:	str	lr, [sp, #4]
   146d8:	add	fp, sp, #4
   146dc:	sub	sp, sp, #24
   146e0:	str	r0, [fp, #-24]	; 0xffffffe8
   146e4:	str	r1, [fp, #-28]	; 0xffffffe4
   146e8:	mov	r3, #0
   146ec:	strb	r3, [fp, #-5]
   146f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   146f4:	str	r3, [fp, #-12]
   146f8:	b	14730 <error@@Base+0x1de0>
   146fc:	ldr	r3, [fp, #-12]
   14700:	ldr	r3, [r3, #12]
   14704:	mov	r0, r3
   14708:	bl	14628 <error@@Base+0x1cd8>
   1470c:	mov	r3, r0
   14710:	cmp	r3, #0
   14714:	beq	14724 <error@@Base+0x1dd4>
   14718:	ldr	r3, [fp, #-12]
   1471c:	mov	r2, #32
   14720:	str	r2, [r3, #12]
   14724:	ldr	r3, [fp, #-12]
   14728:	ldr	r3, [r3, #4]
   1472c:	str	r3, [fp, #-12]
   14730:	ldr	r3, [fp, #-12]
   14734:	cmp	r3, #0
   14738:	bne	146fc <error@@Base+0x1dac>
   1473c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14740:	str	r3, [fp, #-12]
   14744:	b	1483c <error@@Base+0x1eec>
   14748:	ldr	r3, [fp, #-12]
   1474c:	ldr	r3, [r3, #4]
   14750:	str	r3, [fp, #-16]
   14754:	ldr	r3, [fp, #-12]
   14758:	ldr	r3, [r3, #12]
   1475c:	cmp	r3, #32
   14760:	bne	1479c <error@@Base+0x1e4c>
   14764:	ldrb	r3, [fp, #-5]
   14768:	cmp	r3, #0
   1476c:	beq	147b8 <error@@Base+0x1e68>
   14770:	ldr	r3, [fp, #-16]
   14774:	cmp	r3, #0
   14778:	beq	147b8 <error@@Base+0x1e68>
   1477c:	ldr	r3, [fp, #-16]
   14780:	ldr	r3, [r3, #12]
   14784:	cmp	r3, #32
   14788:	beq	147b8 <error@@Base+0x1e68>
   1478c:	ldr	r3, [fp, #-16]
   14790:	ldr	r3, [r3, #12]
   14794:	cmp	r3, #10
   14798:	beq	147b8 <error@@Base+0x1e68>
   1479c:	ldr	r3, [fp, #-12]
   147a0:	ldr	r3, [r3, #12]
   147a4:	cmp	r3, #10
   147a8:	bne	14818 <error@@Base+0x1ec8>
   147ac:	ldrb	r3, [fp, #-5]
   147b0:	cmp	r3, #0
   147b4:	bne	14818 <error@@Base+0x1ec8>
   147b8:	ldrb	r3, [fp, #-5]
   147bc:	cmp	r3, #0
   147c0:	beq	14800 <error@@Base+0x1eb0>
   147c4:	ldr	r3, [fp, #-16]
   147c8:	cmp	r3, #0
   147cc:	beq	14800 <error@@Base+0x1eb0>
   147d0:	ldr	r3, [fp, #-16]
   147d4:	ldr	r3, [r3, #12]
   147d8:	cmp	r3, #32
   147dc:	bne	14800 <error@@Base+0x1eb0>
   147e0:	ldr	r3, [fp, #-16]
   147e4:	ldrb	r2, [r3, #8]
   147e8:	ldr	r3, [fp, #-12]
   147ec:	ldrb	r3, [r3, #8]
   147f0:	orr	r3, r2, r3
   147f4:	uxtb	r2, r3
   147f8:	ldr	r3, [fp, #-16]
   147fc:	strb	r2, [r3, #8]
   14800:	ldr	r1, [fp, #-12]
   14804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14808:	bl	11398 <__assert_fail@plt+0x7dc>
   1480c:	ldr	r0, [fp, #-12]
   14810:	bl	10a30 <free@plt>
   14814:	b	14834 <error@@Base+0x1ee4>
   14818:	ldr	r3, [fp, #-12]
   1481c:	ldr	r3, [r3, #12]
   14820:	cmp	r3, #10
   14824:	movne	r3, #1
   14828:	moveq	r3, #0
   1482c:	uxtb	r3, r3
   14830:	strb	r3, [fp, #-5]
   14834:	ldr	r3, [fp, #-16]
   14838:	str	r3, [fp, #-12]
   1483c:	ldr	r3, [fp, #-12]
   14840:	cmp	r3, #0
   14844:	bne	14748 <error@@Base+0x1df8>
   14848:	nop	{0}
   1484c:	sub	sp, fp, #4
   14850:	ldr	fp, [sp]
   14854:	add	sp, sp, #4
   14858:	pop	{pc}		; (ldr pc, [sp], #4)
   1485c:	str	fp, [sp, #-8]!
   14860:	str	lr, [sp, #4]
   14864:	add	fp, sp, #4
   14868:	sub	sp, sp, #16
   1486c:	str	r0, [fp, #-16]
   14870:	ldr	r3, [fp, #-16]
   14874:	str	r3, [fp, #-8]
   14878:	b	148a8 <error@@Base+0x1f58>
   1487c:	ldr	r3, [fp, #-8]
   14880:	ldr	r3, [r3, #12]
   14884:	mov	r0, r3
   14888:	bl	10a84 <utf8proc_tolower@plt>
   1488c:	mov	r3, r0
   14890:	mov	r2, r3
   14894:	ldr	r3, [fp, #-8]
   14898:	str	r2, [r3, #12]
   1489c:	ldr	r3, [fp, #-8]
   148a0:	ldr	r3, [r3, #4]
   148a4:	str	r3, [fp, #-8]
   148a8:	ldr	r3, [fp, #-8]
   148ac:	cmp	r3, #0
   148b0:	bne	1487c <error@@Base+0x1f2c>
   148b4:	nop	{0}
   148b8:	sub	sp, fp, #4
   148bc:	ldr	fp, [sp]
   148c0:	add	sp, sp, #4
   148c4:	pop	{pc}		; (ldr pc, [sp], #4)
   148c8:	str	fp, [sp, #-8]!
   148cc:	str	lr, [sp, #4]
   148d0:	add	fp, sp, #4
   148d4:	sub	sp, sp, #24
   148d8:	str	r0, [fp, #-16]
   148dc:	str	r1, [fp, #-20]	; 0xffffffec
   148e0:	str	r2, [fp, #-24]	; 0xffffffe8
   148e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148e8:	ldrb	r3, [r3]
   148ec:	cmp	r3, #0
   148f0:	beq	1491c <error@@Base+0x1fcc>
   148f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148f8:	cmp	r3, #0
   148fc:	bne	1491c <error@@Base+0x1fcc>
   14900:	ldr	r3, [pc, #296]	; 14a30 <error@@Base+0x20e0>
   14904:	add	r3, pc, r3
   14908:	mov	r1, r3
   1490c:	ldr	r3, [pc, #288]	; 14a34 <error@@Base+0x20e4>
   14910:	add	r3, pc, r3
   14914:	mov	r0, r3
   14918:	bl	129c0 <error@@Base+0x70>
   1491c:	ldr	r3, [fp, #-16]
   14920:	ldr	r3, [r3, #4]
   14924:	str	r3, [fp, #-8]
   14928:	ldr	r3, [pc, #264]	; 14a38 <error@@Base+0x20e8>
   1492c:	add	r3, pc, r3
   14930:	mov	r1, r3
   14934:	ldr	r0, [fp, #-20]	; 0xffffffec
   14938:	bl	11e7c <__assert_fail@plt+0x12c0>
   1493c:	str	r0, [fp, #-12]
   14940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14944:	ldrb	r3, [r3]
   14948:	cmp	r3, #0
   1494c:	beq	14968 <error@@Base+0x2018>
   14950:	ldr	r0, [fp, #-12]
   14954:	bl	14390 <error@@Base+0x1a40>
   14958:	mov	r3, r0
   1495c:	mov	r2, r3
   14960:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14964:	strb	r2, [r3, #11]
   14968:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1496c:	ldrb	r3, [r3, #1]
   14970:	mov	r2, r3
   14974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14978:	ldr	r3, [r3, #4]
   1497c:	cmp	r3, #0
   14980:	beq	14990 <error@@Base+0x2040>
   14984:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14988:	ldr	r3, [r3, #4]
   1498c:	b	14994 <error@@Base+0x2044>
   14990:	mov	r3, #94	; 0x5e
   14994:	ldr	r1, [fp, #-16]
   14998:	ldr	r0, [fp, #-12]
   1499c:	bl	14488 <error@@Base+0x1b38>
   149a0:	ldr	r0, [fp, #-12]
   149a4:	bl	11f5c <__assert_fail@plt+0x13a0>
   149a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149ac:	ldrb	r3, [r3, #9]
   149b0:	cmp	r3, #0
   149b4:	beq	149e4 <error@@Base+0x2094>
   149b8:	ldr	r3, [fp, #-8]
   149bc:	cmp	r3, #0
   149c0:	beq	149d0 <error@@Base+0x2080>
   149c4:	ldr	r3, [fp, #-8]
   149c8:	ldr	r3, [r3, #4]
   149cc:	b	149d8 <error@@Base+0x2088>
   149d0:	ldr	r3, [fp, #-16]
   149d4:	ldr	r3, [r3]
   149d8:	mov	r1, r3
   149dc:	ldr	r0, [fp, #-16]
   149e0:	bl	146d0 <error@@Base+0x1d80>
   149e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149e8:	ldrb	r3, [r3, #10]
   149ec:	cmp	r3, #0
   149f0:	beq	14a1c <error@@Base+0x20cc>
   149f4:	ldr	r3, [fp, #-8]
   149f8:	cmp	r3, #0
   149fc:	beq	14a0c <error@@Base+0x20bc>
   14a00:	ldr	r3, [fp, #-8]
   14a04:	ldr	r3, [r3, #4]
   14a08:	b	14a14 <error@@Base+0x20c4>
   14a0c:	ldr	r3, [fp, #-16]
   14a10:	ldr	r3, [r3]
   14a14:	mov	r0, r3
   14a18:	bl	1485c <error@@Base+0x1f0c>
   14a1c:	nop	{0}
   14a20:	sub	sp, fp, #4
   14a24:	ldr	fp, [sp]
   14a28:	add	sp, sp, #4
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	andeq	r3, r0, r4, lsr #27
   14a34:	andeq	r3, r0, r4, lsr #27
   14a38:	muleq	r0, r8, sp
   14a3c:	str	fp, [sp, #-8]!
   14a40:	str	lr, [sp, #4]
   14a44:	add	fp, sp, #4
   14a48:	sub	sp, sp, #16
   14a4c:	str	r0, [fp, #-16]
   14a50:	str	r1, [fp, #-20]	; 0xffffffec
   14a54:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a58:	ldr	r0, [fp, #-16]
   14a5c:	bl	10a54 <utf8proc_encode_char@plt>
   14a60:	str	r0, [fp, #-8]
   14a64:	ldr	r3, [fp, #-8]
   14a68:	cmp	r3, #0
   14a6c:	bgt	14a80 <error@@Base+0x2130>
   14a70:	ldr	r3, [pc, #36]	; 14a9c <error@@Base+0x214c>
   14a74:	add	r3, pc, r3
   14a78:	mov	r0, r3
   14a7c:	bl	12950 <error@@Base>
   14a80:	ldr	r3, [fp, #-8]
   14a84:	sxtb	r3, r3
   14a88:	mov	r0, r3
   14a8c:	sub	sp, fp, #4
   14a90:	ldr	fp, [sp]
   14a94:	add	sp, sp, #4
   14a98:	pop	{pc}		; (ldr pc, [sp], #4)
   14a9c:	andeq	r3, r0, r4, asr ip
   14aa0:	str	fp, [sp, #-8]!
   14aa4:	str	lr, [sp, #4]
   14aa8:	add	fp, sp, #4
   14aac:	sub	sp, sp, #16
   14ab0:	str	r0, [fp, #-16]
   14ab4:	ldr	r0, [fp, #-16]
   14ab8:	bl	10a3c <utf8proc_get_property@plt>
   14abc:	str	r0, [fp, #-8]
   14ac0:	ldr	r3, [fp, #-16]
   14ac4:	cmp	r3, #32
   14ac8:	bne	14ad4 <error@@Base+0x2184>
   14acc:	mov	r3, #1
   14ad0:	b	14b00 <error@@Base+0x21b0>
   14ad4:	ldr	r3, [fp, #-8]
   14ad8:	ldrsh	r3, [r3]
   14adc:	cmp	r3, #0
   14ae0:	ble	14afc <error@@Base+0x21ac>
   14ae4:	cmp	r3, #22
   14ae8:	ble	14af4 <error@@Base+0x21a4>
   14aec:	cmp	r3, #29
   14af0:	bne	14afc <error@@Base+0x21ac>
   14af4:	mov	r3, #1
   14af8:	b	14b00 <error@@Base+0x21b0>
   14afc:	mov	r3, #0
   14b00:	mov	r0, r3
   14b04:	sub	sp, fp, #4
   14b08:	ldr	fp, [sp]
   14b0c:	add	sp, sp, #4
   14b10:	pop	{pc}		; (ldr pc, [sp], #4)
   14b14:	str	fp, [sp, #-8]!
   14b18:	str	lr, [sp, #4]
   14b1c:	add	fp, sp, #4
   14b20:	sub	sp, sp, #8
   14b24:	str	r0, [fp, #-8]
   14b28:	ldr	r0, [fp, #-8]
   14b2c:	bl	10b14 <utf8proc_category@plt>
   14b30:	mov	r3, r0
   14b34:	sub	r3, r3, #6
   14b38:	cmp	r3, #2
   14b3c:	bhi	14b48 <error@@Base+0x21f8>
   14b40:	mov	r3, #1
   14b44:	b	14b4c <error@@Base+0x21fc>
   14b48:	mov	r3, #0
   14b4c:	mov	r0, r3
   14b50:	sub	sp, fp, #4
   14b54:	ldr	fp, [sp]
   14b58:	add	sp, sp, #4
   14b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b60:	str	fp, [sp, #-8]!
   14b64:	str	lr, [sp, #4]
   14b68:	add	fp, sp, #4
   14b6c:	sub	sp, sp, #24
   14b70:	str	r1, [fp, #-20]	; 0xffffffec
   14b74:	str	r2, [fp, #-24]	; 0xffffffe8
   14b78:	mov	r2, r3
   14b7c:	mov	r3, r0
   14b80:	strb	r3, [fp, #-16]
   14b84:	mov	r3, r2
   14b88:	strb	r3, [fp, #-28]	; 0xffffffe4
   14b8c:	mov	r3, #0
   14b90:	strh	r3, [fp, #-6]
   14b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b98:	str	r3, [fp, #-12]
   14b9c:	ldrb	r3, [fp, #-16]
   14ba0:	cmp	r3, #0
   14ba4:	beq	14bcc <error@@Base+0x227c>
   14ba8:	ldr	r1, [fp, #-12]
   14bac:	mov	r0, #94	; 0x5e
   14bb0:	bl	14a3c <error@@Base+0x20ec>
   14bb4:	mov	r3, r0
   14bb8:	uxth	r2, r3
   14bbc:	ldrh	r3, [fp, #-6]
   14bc0:	add	r3, r2, r3
   14bc4:	uxth	r3, r3
   14bc8:	strh	r3, [fp, #-6]
   14bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd0:	cmp	r3, #10
   14bd4:	bne	14c14 <error@@Base+0x22c4>
   14bd8:	ldrsh	r3, [fp, #-6]
   14bdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14be0:	add	r2, r2, r3
   14be4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   14be8:	cmp	r3, #0
   14bec:	beq	14bfc <error@@Base+0x22ac>
   14bf0:	ldr	r3, [pc, #304]	; 14d28 <error@@Base+0x23d8>
   14bf4:	add	r3, pc, r3
   14bf8:	b	14c04 <error@@Base+0x22b4>
   14bfc:	ldr	r3, [pc, #296]	; 14d2c <error@@Base+0x23dc>
   14c00:	add	r3, pc, r3
   14c04:	mov	r1, r3
   14c08:	mov	r0, r2
   14c0c:	bl	10b68 <sprintf@plt>
   14c10:	b	14d14 <error@@Base+0x23c4>
   14c14:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c18:	bl	14aa0 <error@@Base+0x2150>
   14c1c:	mov	r3, r0
   14c20:	cmp	r3, #0
   14c24:	beq	14cc4 <error@@Base+0x2374>
   14c28:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c2c:	bl	14b14 <error@@Base+0x21c4>
   14c30:	mov	r3, r0
   14c34:	cmp	r3, #0
   14c38:	beq	14c6c <error@@Base+0x231c>
   14c3c:	ldrsh	r3, [fp, #-6]
   14c40:	ldr	r2, [fp, #-12]
   14c44:	add	r3, r2, r3
   14c48:	mov	r1, r3
   14c4c:	movw	r0, #9676	; 0x25cc
   14c50:	bl	14a3c <error@@Base+0x20ec>
   14c54:	mov	r3, r0
   14c58:	uxth	r2, r3
   14c5c:	ldrh	r3, [fp, #-6]
   14c60:	add	r3, r2, r3
   14c64:	uxth	r3, r3
   14c68:	strh	r3, [fp, #-6]
   14c6c:	ldrsh	r3, [fp, #-6]
   14c70:	ldr	r2, [fp, #-12]
   14c74:	add	r3, r2, r3
   14c78:	mov	r1, r3
   14c7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c80:	bl	14a3c <error@@Base+0x20ec>
   14c84:	mov	r3, r0
   14c88:	uxth	r2, r3
   14c8c:	ldrh	r3, [fp, #-6]
   14c90:	add	r3, r2, r3
   14c94:	uxth	r3, r3
   14c98:	strh	r3, [fp, #-6]
   14c9c:	ldrsh	r2, [fp, #-6]
   14ca0:	uxth	r3, r2
   14ca4:	add	r3, r3, #1
   14ca8:	uxth	r3, r3
   14cac:	strh	r3, [fp, #-6]
   14cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cb4:	add	r3, r3, r2
   14cb8:	mov	r2, #0
   14cbc:	strb	r2, [r3]
   14cc0:	b	14d14 <error@@Base+0x23c4>
   14cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc8:	cmp	r3, #255	; 0xff
   14ccc:	bhi	14cf4 <error@@Base+0x23a4>
   14cd0:	ldrsh	r3, [fp, #-6]
   14cd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14cd8:	add	r3, r2, r3
   14cdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ce0:	ldr	r1, [pc, #72]	; 14d30 <error@@Base+0x23e0>
   14ce4:	add	r1, pc, r1
   14ce8:	mov	r0, r3
   14cec:	bl	10b68 <sprintf@plt>
   14cf0:	b	14d14 <error@@Base+0x23c4>
   14cf4:	ldrsh	r3, [fp, #-6]
   14cf8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14cfc:	add	r3, r2, r3
   14d00:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d04:	ldr	r1, [pc, #40]	; 14d34 <error@@Base+0x23e4>
   14d08:	add	r1, pc, r1
   14d0c:	mov	r0, r3
   14d10:	bl	10b68 <sprintf@plt>
   14d14:	nop	{0}
   14d18:	sub	sp, fp, #4
   14d1c:	ldr	fp, [sp]
   14d20:	add	sp, sp, #4
   14d24:	pop	{pc}		; (ldr pc, [sp], #4)
   14d28:	andeq	r3, r0, ip, ror #21
   14d2c:	andeq	r3, r0, r8, ror #21
   14d30:	andeq	r3, r0, r8, lsl #20
   14d34:	andeq	r3, r0, ip, ror #19
   14d38:	str	fp, [sp, #-8]!
   14d3c:	str	lr, [sp, #4]
   14d40:	add	fp, sp, #4
   14d44:	sub	sp, sp, #40	; 0x28
   14d48:	str	r0, [fp, #-32]	; 0xffffffe0
   14d4c:	str	r1, [fp, #-36]	; 0xffffffdc
   14d50:	str	r2, [fp, #-40]	; 0xffffffd8
   14d54:	ldr	r3, [pc, #228]	; 14e40 <error@@Base+0x24f0>
   14d58:	add	r3, pc, r3
   14d5c:	mov	r1, r3
   14d60:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14d64:	bl	11e7c <__assert_fail@plt+0x12c0>
   14d68:	str	r0, [fp, #-12]
   14d6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d70:	cmp	r3, #0
   14d74:	beq	14dcc <error@@Base+0x247c>
   14d78:	ldr	r3, [fp, #-12]
   14d7c:	mov	r2, #55	; 0x37
   14d80:	mov	r1, #1
   14d84:	ldr	r0, [pc, #184]	; 14e44 <error@@Base+0x24f4>
   14d88:	add	r0, pc, r0
   14d8c:	bl	10a9c <fwrite@plt>
   14d90:	ldr	r3, [fp, #-12]
   14d94:	mov	r2, #55	; 0x37
   14d98:	mov	r1, #1
   14d9c:	ldr	r0, [pc, #164]	; 14e48 <error@@Base+0x24f8>
   14da0:	add	r0, pc, r0
   14da4:	bl	10a9c <fwrite@plt>
   14da8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14dac:	ldr	r0, [fp, #-12]
   14db0:	blx	r3
   14db4:	ldr	r3, [fp, #-12]
   14db8:	mov	r2, #55	; 0x37
   14dbc:	mov	r1, #1
   14dc0:	ldr	r0, [pc, #132]	; 14e4c <error@@Base+0x24fc>
   14dc4:	add	r0, pc, r0
   14dc8:	bl	10a9c <fwrite@plt>
   14dcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14dd0:	ldr	r3, [r3]
   14dd4:	str	r3, [fp, #-8]
   14dd8:	b	14e18 <error@@Base+0x24c8>
   14ddc:	ldr	r3, [fp, #-8]
   14de0:	ldrb	r3, [r3, #8]
   14de4:	mov	r0, r3
   14de8:	ldr	r3, [fp, #-8]
   14dec:	ldr	r1, [r3, #12]
   14df0:	sub	r2, fp, #24
   14df4:	mov	r3, #0
   14df8:	bl	14b60 <error@@Base+0x2210>
   14dfc:	sub	r3, fp, #24
   14e00:	ldr	r1, [fp, #-12]
   14e04:	mov	r0, r3
   14e08:	bl	10b8c <fputs@plt>
   14e0c:	ldr	r3, [fp, #-8]
   14e10:	ldr	r3, [r3, #4]
   14e14:	str	r3, [fp, #-8]
   14e18:	ldr	r3, [fp, #-8]
   14e1c:	cmp	r3, #0
   14e20:	bne	14ddc <error@@Base+0x248c>
   14e24:	ldr	r0, [fp, #-12]
   14e28:	bl	11f5c <__assert_fail@plt+0x13a0>
   14e2c:	nop	{0}
   14e30:	sub	sp, fp, #4
   14e34:	ldr	fp, [sp]
   14e38:	add	sp, sp, #4
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	andeq	r3, r0, r4, lsr #19
   14e44:	andeq	r3, r0, r0, lsl #17
   14e48:	andeq	r3, r0, r0, lsr #17
   14e4c:	andeq	r3, r0, ip, ror r8
   14e50:	str	fp, [sp, #-8]!
   14e54:	str	lr, [sp, #4]
   14e58:	add	fp, sp, #4
   14e5c:	sub	sp, sp, #24
   14e60:	str	r0, [fp, #-24]	; 0xffffffe8
   14e64:	str	r1, [fp, #-28]	; 0xffffffe4
   14e68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e6c:	str	r3, [fp, #-8]
   14e70:	mov	r3, #0
   14e74:	str	r3, [fp, #-12]
   14e78:	mov	r3, #0
   14e7c:	str	r3, [fp, #-16]
   14e80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e84:	str	r3, [fp, #-8]
   14e88:	b	14edc <error@@Base+0x258c>
   14e8c:	sub	r3, fp, #16
   14e90:	mov	r2, r3
   14e94:	mvn	r1, #0
   14e98:	ldr	r0, [fp, #-8]
   14e9c:	bl	10ab4 <utf8proc_iterate@plt>
   14ea0:	str	r0, [fp, #-12]
   14ea4:	ldr	r3, [fp, #-12]
   14ea8:	cmp	r3, #0
   14eac:	bgt	14eb8 <error@@Base+0x2568>
   14eb0:	mov	r3, #0
   14eb4:	b	14ef0 <error@@Base+0x25a0>
   14eb8:	ldr	r3, [fp, #-16]
   14ebc:	mov	r2, r3
   14ec0:	mov	r1, #0
   14ec4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ec8:	bl	14328 <error@@Base+0x19d8>
   14ecc:	ldr	r3, [fp, #-12]
   14ed0:	ldr	r2, [fp, #-8]
   14ed4:	add	r3, r2, r3
   14ed8:	str	r3, [fp, #-8]
   14edc:	ldr	r3, [fp, #-8]
   14ee0:	ldrb	r3, [r3]
   14ee4:	cmp	r3, #0
   14ee8:	bne	14e8c <error@@Base+0x253c>
   14eec:	mov	r3, #1
   14ef0:	mov	r0, r3
   14ef4:	sub	sp, fp, #4
   14ef8:	ldr	fp, [sp]
   14efc:	add	sp, sp, #4
   14f00:	pop	{pc}		; (ldr pc, [sp], #4)
   14f04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f08:	mov	r7, r0
   14f0c:	ldr	r6, [pc, #72]	; 14f5c <error@@Base+0x260c>
   14f10:	ldr	r5, [pc, #72]	; 14f60 <error@@Base+0x2610>
   14f14:	add	r6, pc, r6
   14f18:	add	r5, pc, r5
   14f1c:	sub	r6, r6, r5
   14f20:	mov	r8, r1
   14f24:	mov	r9, r2
   14f28:	bl	109e0 <calloc@plt-0x20>
   14f2c:	asrs	r6, r6, #2
   14f30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f34:	mov	r4, #0
   14f38:	add	r4, r4, #1
   14f3c:	ldr	r3, [r5], #4
   14f40:	mov	r2, r9
   14f44:	mov	r1, r8
   14f48:	mov	r0, r7
   14f4c:	blx	r3
   14f50:	cmp	r6, r4
   14f54:	bne	14f38 <error@@Base+0x25e8>
   14f58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f5c:	andeq	r3, r1, r8, ror #31
   14f60:	andeq	r3, r1, r0, ror #31
   14f64:	bx	lr
   14f68:	mov	r2, r1
   14f6c:	mov	r1, r0
   14f70:	mov	r0, #3
   14f74:	b	10a90 <__xstat@plt>

Disassembly of section .fini:

00014f78 <.fini>:
   14f78:	push	{r3, lr}
   14f7c:	pop	{r3, pc}
