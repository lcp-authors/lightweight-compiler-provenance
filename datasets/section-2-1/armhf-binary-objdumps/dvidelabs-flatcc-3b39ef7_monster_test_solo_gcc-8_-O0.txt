
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

00012268 <.init>:
   12268:	push	{r3, lr}
   1226c:	bl	1236c <_start@@Base+0x3c>
   12270:	pop	{r3, pc}

Disassembly of section .plt:

00012274 <free@plt-0x14>:
   12274:	push	{lr}		; (str lr, [sp, #-4]!)
   12278:	ldr	lr, [pc, #4]	; 12284 <free@plt-0x4>
   1227c:	add	lr, pc, lr
   12280:	ldr	pc, [lr, #8]!
   12284:	andeq	ip, r1, ip, ror sp

00012288 <free@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #28, 20	; 0x1c000
   12290:	ldr	pc, [ip, #3452]!	; 0xd7c

00012294 <memcpy@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #28, 20	; 0x1c000
   1229c:	ldr	pc, [ip, #3444]!	; 0xd74

000122a0 <memcmp@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #28, 20	; 0x1c000
   122a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000122ac <realloc@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #28, 20	; 0x1c000
   122b4:	ldr	pc, [ip, #3428]!	; 0xd64

000122b8 <malloc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #28, 20	; 0x1c000
   122c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000122c4 <__libc_start_main@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #28, 20	; 0x1c000
   122cc:	ldr	pc, [ip, #3412]!	; 0xd54

000122d0 <__gmon_start__@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #28, 20	; 0x1c000
   122d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000122dc <strlen@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #28, 20	; 0x1c000
   122e4:	ldr	pc, [ip, #3396]!	; 0xd44

000122e8 <posix_memalign@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #28, 20	; 0x1c000
   122f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000122f4 <memset@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #28, 20	; 0x1c000
   122fc:	ldr	pc, [ip, #3380]!	; 0xd34

00012300 <strncpy@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #28, 20	; 0x1c000
   12308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001230c <memchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #28, 20	; 0x1c000
   12314:	ldr	pc, [ip, #3364]!	; 0xd24

00012318 <abort@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #28, 20	; 0x1c000
   12320:	ldr	pc, [ip, #3356]!	; 0xd1c

00012324 <__assert_fail@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #28, 20	; 0x1c000
   1232c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00012330 <_start@@Base>:
   12330:	mov	fp, #0
   12334:	mov	lr, #0
   12338:	pop	{r1}		; (ldr r1, [sp], #4)
   1233c:	mov	r2, sp
   12340:	push	{r2}		; (str r2, [sp, #-4]!)
   12344:	push	{r0}		; (str r0, [sp, #-4]!)
   12348:	ldr	ip, [pc, #16]	; 12360 <_start@@Base+0x30>
   1234c:	push	{ip}		; (str ip, [sp, #-4]!)
   12350:	ldr	r0, [pc, #12]	; 12364 <_start@@Base+0x34>
   12354:	ldr	r3, [pc, #12]	; 12368 <_start@@Base+0x38>
   12358:	bl	122c4 <__libc_start_main@plt>
   1235c:	bl	12318 <abort@plt>
   12360:	andeq	sp, r1, r4, ror #13
   12364:	andeq	r3, r1, ip, lsl #25
   12368:	andeq	sp, r1, r4, lsl #13
   1236c:	ldr	r3, [pc, #20]	; 12388 <_start@@Base+0x58>
   12370:	ldr	r2, [pc, #20]	; 1238c <_start@@Base+0x5c>
   12374:	add	r3, pc, r3
   12378:	ldr	r2, [r3, r2]
   1237c:	cmp	r2, #0
   12380:	bxeq	lr
   12384:	b	122d0 <__gmon_start__@plt>
   12388:	andeq	ip, r1, r4, lsl #25
   1238c:	andeq	r0, r0, r8, asr #32
   12390:	ldr	r0, [pc, #24]	; 123b0 <_start@@Base+0x80>
   12394:	ldr	r3, [pc, #24]	; 123b4 <_start@@Base+0x84>
   12398:	cmp	r3, r0
   1239c:	bxeq	lr
   123a0:	ldr	r3, [pc, #16]	; 123b8 <_start@@Base+0x88>
   123a4:	cmp	r3, #0
   123a8:	bxeq	lr
   123ac:	bx	r3
   123b0:	andeq	pc, r2, r4, rrx
   123b4:	andeq	pc, r2, r4, rrx
   123b8:	andeq	r0, r0, r0
   123bc:	ldr	r0, [pc, #36]	; 123e8 <_start@@Base+0xb8>
   123c0:	ldr	r1, [pc, #36]	; 123ec <_start@@Base+0xbc>
   123c4:	sub	r1, r1, r0
   123c8:	asr	r1, r1, #2
   123cc:	add	r1, r1, r1, lsr #31
   123d0:	asrs	r1, r1, #1
   123d4:	bxeq	lr
   123d8:	ldr	r3, [pc, #16]	; 123f0 <_start@@Base+0xc0>
   123dc:	cmp	r3, #0
   123e0:	bxeq	lr
   123e4:	bx	r3
   123e8:	andeq	pc, r2, r4, rrx
   123ec:	andeq	pc, r2, r4, rrx
   123f0:	andeq	r0, r0, r0
   123f4:	push	{r4, lr}
   123f8:	ldr	r4, [pc, #24]	; 12418 <_start@@Base+0xe8>
   123fc:	ldrb	r3, [r4]
   12400:	cmp	r3, #0
   12404:	popne	{r4, pc}
   12408:	bl	12390 <_start@@Base+0x60>
   1240c:	mov	r3, #1
   12410:	strb	r3, [r4]
   12414:	pop	{r4, pc}
   12418:	andeq	pc, r2, r4, rrx
   1241c:	b	123bc <_start@@Base+0x8c>
   12420:	str	fp, [sp, #-8]!
   12424:	str	lr, [sp, #4]
   12428:	add	fp, sp, #4
   1242c:	sub	sp, sp, #8
   12430:	str	r0, [fp, #-8]
   12434:	str	r1, [fp, #-12]
   12438:	mov	r3, #0
   1243c:	mov	r2, #0
   12440:	ldr	r1, [fp, #-12]
   12444:	ldr	r0, [fp, #-8]
   12448:	bl	16124 <flatcc_builder_start_buffer@@Base>
   1244c:	mov	r3, r0
   12450:	mov	r0, r3
   12454:	sub	sp, fp, #4
   12458:	ldr	fp, [sp]
   1245c:	add	sp, sp, #4
   12460:	pop	{pc}		; (ldr pc, [sp], #4)
   12464:	str	fp, [sp, #-8]!
   12468:	str	lr, [sp, #4]
   1246c:	add	fp, sp, #4
   12470:	sub	sp, sp, #8
   12474:	str	r0, [fp, #-8]
   12478:	str	r1, [fp, #-12]
   1247c:	ldr	r1, [fp, #-12]
   12480:	ldr	r0, [fp, #-8]
   12484:	bl	16294 <flatcc_builder_end_buffer@@Base>
   12488:	mov	r3, r0
   1248c:	mov	r0, r3
   12490:	sub	sp, fp, #4
   12494:	ldr	fp, [sp]
   12498:	add	sp, sp, #4
   1249c:	pop	{pc}		; (ldr pc, [sp], #4)
   124a0:	str	fp, [sp, #-8]!
   124a4:	str	lr, [sp, #4]
   124a8:	add	fp, sp, #4
   124ac:	sub	sp, sp, #8
   124b0:	str	r0, [fp, #-8]
   124b4:	mov	r1, #36	; 0x24
   124b8:	ldr	r0, [fp, #-8]
   124bc:	bl	1725c <flatcc_builder_start_table@@Base>
   124c0:	mov	r3, r0
   124c4:	mov	r0, r3
   124c8:	sub	sp, fp, #4
   124cc:	ldr	fp, [sp]
   124d0:	add	sp, sp, #4
   124d4:	pop	{pc}		; (ldr pc, [sp], #4)
   124d8:	str	fp, [sp, #-8]!
   124dc:	str	lr, [sp, #4]
   124e0:	add	fp, sp, #4
   124e4:	sub	sp, sp, #8
   124e8:	str	r0, [fp, #-8]
   124ec:	mov	r2, #1
   124f0:	ldr	r3, [pc, #88]	; 12550 <_start@@Base+0x220>
   124f4:	add	r3, pc, r3
   124f8:	mov	r1, r3
   124fc:	ldr	r0, [fp, #-8]
   12500:	bl	17d1c <flatcc_builder_check_required@@Base>
   12504:	mov	r3, r0
   12508:	cmp	r3, #0
   1250c:	bne	12530 <_start@@Base+0x200>
   12510:	ldr	r3, [pc, #60]	; 12554 <_start@@Base+0x224>
   12514:	add	r3, pc, r3
   12518:	movw	r2, #2398	; 0x95e
   1251c:	ldr	r1, [pc, #52]	; 12558 <_start@@Base+0x228>
   12520:	add	r1, pc, r1
   12524:	ldr	r0, [pc, #48]	; 1255c <_start@@Base+0x22c>
   12528:	add	r0, pc, r0
   1252c:	bl	12324 <__assert_fail@plt>
   12530:	ldr	r0, [fp, #-8]
   12534:	bl	17e10 <flatcc_builder_end_table@@Base>
   12538:	mov	r3, r0
   1253c:	mov	r0, r3
   12540:	sub	sp, fp, #4
   12544:	ldr	fp, [sp]
   12548:	add	sp, sp, #4
   1254c:	pop	{pc}		; (ldr pc, [sp], #4)
   12550:	andeq	fp, r0, r0, lsr r2
   12554:	andeq	fp, r0, r0, asr r3
   12558:	andeq	fp, r0, r8, lsl #4
   1255c:	andeq	fp, r0, r8, ror r2
   12560:	str	fp, [sp, #-8]!
   12564:	str	lr, [sp, #4]
   12568:	add	fp, sp, #4
   1256c:	sub	sp, sp, #16
   12570:	str	r0, [fp, #-16]
   12574:	str	r1, [fp, #-20]	; 0xffffffec
   12578:	ldr	r3, [fp, #-20]	; 0xffffffec
   1257c:	cmp	r3, #0
   12580:	beq	125b4 <_start@@Base+0x284>
   12584:	mov	r1, #3
   12588:	ldr	r0, [fp, #-16]
   1258c:	bl	19ad0 <flatcc_builder_table_add_offset@@Base>
   12590:	str	r0, [fp, #-8]
   12594:	ldr	r3, [fp, #-8]
   12598:	cmp	r3, #0
   1259c:	beq	125b4 <_start@@Base+0x284>
   125a0:	ldr	r3, [fp, #-8]
   125a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125a8:	str	r2, [r3]
   125ac:	mov	r3, #0
   125b0:	b	125b8 <_start@@Base+0x288>
   125b4:	mvn	r3, #0
   125b8:	mov	r0, r3
   125bc:	sub	sp, fp, #4
   125c0:	ldr	fp, [sp]
   125c4:	add	sp, sp, #4
   125c8:	pop	{pc}		; (ldr pc, [sp], #4)
   125cc:	str	fp, [sp, #-8]!
   125d0:	str	lr, [sp, #4]
   125d4:	add	fp, sp, #4
   125d8:	sub	sp, sp, #8
   125dc:	str	r0, [fp, #-8]
   125e0:	str	r1, [fp, #-12]
   125e4:	ldr	r1, [fp, #-12]
   125e8:	ldr	r0, [fp, #-8]
   125ec:	bl	1967c <flatcc_builder_create_string_str@@Base>
   125f0:	mov	r3, r0
   125f4:	mov	r1, r3
   125f8:	ldr	r0, [fp, #-8]
   125fc:	bl	12560 <_start@@Base+0x230>
   12600:	mov	r3, r0
   12604:	mov	r0, r3
   12608:	sub	sp, fp, #4
   1260c:	ldr	fp, [sp]
   12610:	add	sp, sp, #4
   12614:	pop	{pc}		; (ldr pc, [sp], #4)
   12618:	str	fp, [sp, #-8]!
   1261c:	str	lr, [sp, #4]
   12620:	add	fp, sp, #4
   12624:	sub	sp, sp, #8
   12628:	str	r0, [fp, #-8]
   1262c:	ldr	r3, [pc, #64]	; 12674 <_start@@Base+0x344>
   12630:	add	r3, pc, r3
   12634:	mov	r1, r3
   12638:	ldr	r0, [fp, #-8]
   1263c:	bl	12420 <_start@@Base+0xf0>
   12640:	mov	r3, r0
   12644:	cmp	r3, #0
   12648:	bne	1265c <_start@@Base+0x32c>
   1264c:	ldr	r0, [fp, #-8]
   12650:	bl	124a0 <_start@@Base+0x170>
   12654:	mov	r3, r0
   12658:	b	12660 <_start@@Base+0x330>
   1265c:	mvn	r3, #0
   12660:	mov	r0, r3
   12664:	sub	sp, fp, #4
   12668:	ldr	fp, [sp]
   1266c:	add	sp, sp, #4
   12670:	pop	{pc}		; (ldr pc, [sp], #4)
   12674:	andeq	fp, r0, r0, lsr #4
   12678:	str	fp, [sp, #-8]!
   1267c:	str	lr, [sp, #4]
   12680:	add	fp, sp, #4
   12684:	sub	sp, sp, #8
   12688:	str	r0, [fp, #-8]
   1268c:	ldr	r0, [fp, #-8]
   12690:	bl	124d8 <_start@@Base+0x1a8>
   12694:	mov	r3, r0
   12698:	mov	r1, r3
   1269c:	ldr	r0, [fp, #-8]
   126a0:	bl	12464 <_start@@Base+0x134>
   126a4:	mov	r3, r0
   126a8:	mov	r0, r3
   126ac:	sub	sp, fp, #4
   126b0:	ldr	fp, [sp]
   126b4:	add	sp, sp, #4
   126b8:	pop	{pc}		; (ldr pc, [sp], #4)
   126bc:	str	fp, [sp, #-8]!
   126c0:	str	lr, [sp, #4]
   126c4:	add	fp, sp, #4
   126c8:	sub	sp, sp, #8
   126cc:	str	r0, [fp, #-8]
   126d0:	ldr	r3, [fp, #-8]
   126d4:	ldrb	r3, [r3, #12]
   126d8:	cmp	r3, #1
   126dc:	bne	126fc <_start@@Base+0x3cc>
   126e0:	ldr	r3, [pc, #44]	; 12714 <_start@@Base+0x3e4>
   126e4:	add	r3, pc, r3
   126e8:	mov	r1, r3
   126ec:	ldr	r0, [fp, #-8]
   126f0:	bl	1c980 <flatcc_verify_union_table@@Base>
   126f4:	mov	r3, r0
   126f8:	b	12700 <_start@@Base+0x3d0>
   126fc:	mov	r3, #0
   12700:	mov	r0, r3
   12704:	sub	sp, fp, #4
   12708:	ldr	fp, [sp]
   1270c:	add	sp, sp, #4
   12710:	pop	{pc}		; (ldr pc, [sp], #4)
   12714:	strdeq	r0, [r0], -ip
   12718:	str	fp, [sp, #-8]!
   1271c:	str	lr, [sp, #4]
   12720:	add	fp, sp, #4
   12724:	sub	sp, sp, #8
   12728:	str	r0, [fp, #-8]
   1272c:	ldr	r3, [fp, #-8]
   12730:	ldrb	r3, [r3, #12]
   12734:	sub	r3, r3, #1
   12738:	cmp	r3, #3
   1273c:	addls	pc, pc, r3, lsl #2
   12740:	b	127c4 <_start@@Base+0x494>
   12744:	b	12754 <_start@@Base+0x424>
   12748:	b	12770 <_start@@Base+0x440>
   1274c:	b	1278c <_start@@Base+0x45c>
   12750:	b	127a8 <_start@@Base+0x478>
   12754:	ldr	r3, [pc, #128]	; 127dc <_start@@Base+0x4ac>
   12758:	add	r3, pc, r3
   1275c:	mov	r1, r3
   12760:	ldr	r0, [fp, #-8]
   12764:	bl	1c980 <flatcc_verify_union_table@@Base>
   12768:	mov	r3, r0
   1276c:	b	127c8 <_start@@Base+0x498>
   12770:	ldr	r3, [pc, #104]	; 127e0 <_start@@Base+0x4b0>
   12774:	add	r3, pc, r3
   12778:	mov	r1, r3
   1277c:	ldr	r0, [fp, #-8]
   12780:	bl	1c980 <flatcc_verify_union_table@@Base>
   12784:	mov	r3, r0
   12788:	b	127c8 <_start@@Base+0x498>
   1278c:	ldr	r3, [pc, #80]	; 127e4 <_start@@Base+0x4b4>
   12790:	add	r3, pc, r3
   12794:	mov	r1, r3
   12798:	ldr	r0, [fp, #-8]
   1279c:	bl	1c980 <flatcc_verify_union_table@@Base>
   127a0:	mov	r3, r0
   127a4:	b	127c8 <_start@@Base+0x498>
   127a8:	ldr	r3, [pc, #56]	; 127e8 <_start@@Base+0x4b8>
   127ac:	add	r3, pc, r3
   127b0:	mov	r1, r3
   127b4:	ldr	r0, [fp, #-8]
   127b8:	bl	1c980 <flatcc_verify_union_table@@Base>
   127bc:	mov	r3, r0
   127c0:	b	127c8 <_start@@Base+0x498>
   127c4:	mov	r3, #0
   127c8:	mov	r0, r3
   127cc:	sub	sp, fp, #4
   127d0:	ldr	fp, [sp]
   127d4:	add	sp, sp, #4
   127d8:	pop	{pc}		; (ldr pc, [sp], #4)
   127dc:	andeq	r0, r0, r4, lsr sl
   127e0:	andeq	r0, r0, r0, lsr r2
   127e4:	andeq	r0, r0, r4, ror r1
   127e8:			; <UNDEFINED> instruction: 0x000004b4
   127ec:	str	fp, [sp, #-8]!
   127f0:	str	lr, [sp, #4]
   127f4:	add	fp, sp, #4
   127f8:	sub	sp, sp, #8
   127fc:	str	r0, [fp, #-8]
   12800:	ldr	r3, [fp, #-8]
   12804:	ldrb	r3, [r3, #12]
   12808:	cmp	r3, #9
   1280c:	beq	1287c <_start@@Base+0x54c>
   12810:	cmp	r3, #9
   12814:	bgt	1282c <_start@@Base+0x4fc>
   12818:	cmp	r3, #2
   1281c:	beq	12848 <_start@@Base+0x518>
   12820:	cmp	r3, #8
   12824:	beq	12864 <_start@@Base+0x534>
   12828:	b	128cc <_start@@Base+0x59c>
   1282c:	cmp	r3, #11
   12830:	beq	128ac <_start@@Base+0x57c>
   12834:	cmp	r3, #11
   12838:	blt	12894 <_start@@Base+0x564>
   1283c:	cmp	r3, #255	; 0xff
   12840:	beq	128bc <_start@@Base+0x58c>
   12844:	b	128cc <_start@@Base+0x59c>
   12848:	ldr	r3, [pc, #148]	; 128e4 <_start@@Base+0x5b4>
   1284c:	add	r3, pc, r3
   12850:	mov	r1, r3
   12854:	ldr	r0, [fp, #-8]
   12858:	bl	1c980 <flatcc_verify_union_table@@Base>
   1285c:	mov	r3, r0
   12860:	b	128d0 <_start@@Base+0x5a0>
   12864:	mov	r2, #2
   12868:	mov	r1, #2
   1286c:	ldr	r0, [fp, #-8]
   12870:	bl	1c9f0 <flatcc_verify_union_struct@@Base>
   12874:	mov	r3, r0
   12878:	b	128d0 <_start@@Base+0x5a0>
   1287c:	mov	r2, #4
   12880:	mov	r1, #4
   12884:	ldr	r0, [fp, #-8]
   12888:	bl	1c9f0 <flatcc_verify_union_struct@@Base>
   1288c:	mov	r3, r0
   12890:	b	128d0 <_start@@Base+0x5a0>
   12894:	mov	r2, #4
   12898:	mov	r1, #4
   1289c:	ldr	r0, [fp, #-8]
   128a0:	bl	1c9f0 <flatcc_verify_union_struct@@Base>
   128a4:	mov	r3, r0
   128a8:	b	128d0 <_start@@Base+0x5a0>
   128ac:	ldr	r0, [fp, #-8]
   128b0:	bl	1ca50 <flatcc_verify_union_string@@Base>
   128b4:	mov	r3, r0
   128b8:	b	128d0 <_start@@Base+0x5a0>
   128bc:	ldr	r0, [fp, #-8]
   128c0:	bl	1ca50 <flatcc_verify_union_string@@Base>
   128c4:	mov	r3, r0
   128c8:	b	128d0 <_start@@Base+0x5a0>
   128cc:	mov	r3, #0
   128d0:	mov	r0, r3
   128d4:	sub	sp, fp, #4
   128d8:	ldr	fp, [sp]
   128dc:	add	sp, sp, #4
   128e0:	pop	{pc}		; (ldr pc, [sp], #4)
   128e4:			; <UNDEFINED> instruction: 0x000012b0
   128e8:	push	{fp}		; (str fp, [sp, #-4]!)
   128ec:	add	fp, sp, #0
   128f0:	sub	sp, sp, #12
   128f4:	str	r0, [fp, #-8]
   128f8:	mov	r3, #0
   128fc:	mov	r0, r3
   12900:	add	sp, fp, #0
   12904:	pop	{fp}		; (ldr fp, [sp], #4)
   12908:	bx	lr
   1290c:	push	{fp}		; (str fp, [sp, #-4]!)
   12910:	add	fp, sp, #0
   12914:	sub	sp, sp, #12
   12918:	str	r0, [fp, #-8]
   1291c:	mov	r3, #0
   12920:	mov	r0, r3
   12924:	add	sp, fp, #0
   12928:	pop	{fp}		; (ldr fp, [sp], #4)
   1292c:	bx	lr
   12930:	push	{fp}		; (str fp, [sp, #-4]!)
   12934:	add	fp, sp, #0
   12938:	sub	sp, sp, #12
   1293c:	str	r0, [fp, #-8]
   12940:	mov	r3, #0
   12944:	mov	r0, r3
   12948:	add	sp, fp, #0
   1294c:	pop	{fp}		; (ldr fp, [sp], #4)
   12950:	bx	lr
   12954:	str	fp, [sp, #-8]!
   12958:	str	lr, [sp, #4]
   1295c:	add	fp, sp, #4
   12960:	sub	sp, sp, #16
   12964:	str	r0, [fp, #-16]
   12968:	mov	r3, #1
   1296c:	mov	r2, #0
   12970:	mov	r1, #0
   12974:	ldr	r0, [fp, #-16]
   12978:	bl	1c4d8 <flatcc_verify_field@@Base>
   1297c:	str	r0, [fp, #-8]
   12980:	ldr	r3, [fp, #-8]
   12984:	cmp	r3, #0
   12988:	beq	12994 <_start@@Base+0x664>
   1298c:	ldr	r3, [fp, #-8]
   12990:	b	12998 <_start@@Base+0x668>
   12994:	mov	r3, #0
   12998:	mov	r0, r3
   1299c:	sub	sp, fp, #4
   129a0:	ldr	fp, [sp]
   129a4:	add	sp, sp, #4
   129a8:	pop	{pc}		; (ldr pc, [sp], #4)
   129ac:	str	fp, [sp, #-8]!
   129b0:	str	lr, [sp, #4]
   129b4:	add	fp, sp, #4
   129b8:	sub	sp, sp, #16
   129bc:	str	r0, [fp, #-16]
   129c0:	mov	r3, #1
   129c4:	mov	r2, #1
   129c8:	mov	r1, #0
   129cc:	ldr	r0, [fp, #-16]
   129d0:	bl	1c4d8 <flatcc_verify_field@@Base>
   129d4:	str	r0, [fp, #-8]
   129d8:	ldr	r3, [fp, #-8]
   129dc:	cmp	r3, #0
   129e0:	beq	129ec <_start@@Base+0x6bc>
   129e4:	ldr	r3, [fp, #-8]
   129e8:	b	12a74 <_start@@Base+0x744>
   129ec:	mov	r3, #1
   129f0:	mov	r2, #1
   129f4:	mov	r1, #1
   129f8:	ldr	r0, [fp, #-16]
   129fc:	bl	1c4d8 <flatcc_verify_field@@Base>
   12a00:	str	r0, [fp, #-8]
   12a04:	ldr	r3, [fp, #-8]
   12a08:	cmp	r3, #0
   12a0c:	beq	12a18 <_start@@Base+0x6e8>
   12a10:	ldr	r3, [fp, #-8]
   12a14:	b	12a74 <_start@@Base+0x744>
   12a18:	mov	r3, #1
   12a1c:	mov	r2, #1
   12a20:	mov	r1, #2
   12a24:	ldr	r0, [fp, #-16]
   12a28:	bl	1c4d8 <flatcc_verify_field@@Base>
   12a2c:	str	r0, [fp, #-8]
   12a30:	ldr	r3, [fp, #-8]
   12a34:	cmp	r3, #0
   12a38:	beq	12a44 <_start@@Base+0x714>
   12a3c:	ldr	r3, [fp, #-8]
   12a40:	b	12a74 <_start@@Base+0x744>
   12a44:	mov	r3, #1
   12a48:	mov	r2, #1
   12a4c:	mov	r1, #3
   12a50:	ldr	r0, [fp, #-16]
   12a54:	bl	1c4d8 <flatcc_verify_field@@Base>
   12a58:	str	r0, [fp, #-8]
   12a5c:	ldr	r3, [fp, #-8]
   12a60:	cmp	r3, #0
   12a64:	beq	12a70 <_start@@Base+0x740>
   12a68:	ldr	r3, [fp, #-8]
   12a6c:	b	12a74 <_start@@Base+0x744>
   12a70:	mov	r3, #0
   12a74:	mov	r0, r3
   12a78:	sub	sp, fp, #4
   12a7c:	ldr	fp, [sp]
   12a80:	add	sp, sp, #4
   12a84:	pop	{pc}		; (ldr pc, [sp], #4)
   12a88:	str	fp, [sp, #-8]!
   12a8c:	str	lr, [sp, #4]
   12a90:	add	fp, sp, #4
   12a94:	sub	sp, sp, #16
   12a98:	str	r0, [fp, #-16]
   12a9c:	mov	r3, #1
   12aa0:	mov	r2, #0
   12aa4:	mov	r1, #0
   12aa8:	ldr	r0, [fp, #-16]
   12aac:	bl	1c4d8 <flatcc_verify_field@@Base>
   12ab0:	str	r0, [fp, #-8]
   12ab4:	ldr	r3, [fp, #-8]
   12ab8:	cmp	r3, #0
   12abc:	beq	12ac8 <_start@@Base+0x798>
   12ac0:	ldr	r3, [fp, #-8]
   12ac4:	b	12ba8 <_start@@Base+0x878>
   12ac8:	mov	r3, #8
   12acc:	mov	r2, #8
   12ad0:	mov	r1, #1
   12ad4:	ldr	r0, [fp, #-16]
   12ad8:	bl	1c4d8 <flatcc_verify_field@@Base>
   12adc:	str	r0, [fp, #-8]
   12ae0:	ldr	r3, [fp, #-8]
   12ae4:	cmp	r3, #0
   12ae8:	beq	12af4 <_start@@Base+0x7c4>
   12aec:	ldr	r3, [fp, #-8]
   12af0:	b	12ba8 <_start@@Base+0x878>
   12af4:	mov	r3, #8
   12af8:	mov	r2, #8
   12afc:	mov	r1, #2
   12b00:	ldr	r0, [fp, #-16]
   12b04:	bl	1c4d8 <flatcc_verify_field@@Base>
   12b08:	str	r0, [fp, #-8]
   12b0c:	ldr	r3, [fp, #-8]
   12b10:	cmp	r3, #0
   12b14:	beq	12b20 <_start@@Base+0x7f0>
   12b18:	ldr	r3, [fp, #-8]
   12b1c:	b	12ba8 <_start@@Base+0x878>
   12b20:	mov	r3, #4
   12b24:	mov	r2, #4
   12b28:	mov	r1, #3
   12b2c:	ldr	r0, [fp, #-16]
   12b30:	bl	1c4d8 <flatcc_verify_field@@Base>
   12b34:	str	r0, [fp, #-8]
   12b38:	ldr	r3, [fp, #-8]
   12b3c:	cmp	r3, #0
   12b40:	beq	12b4c <_start@@Base+0x81c>
   12b44:	ldr	r3, [fp, #-8]
   12b48:	b	12ba8 <_start@@Base+0x878>
   12b4c:	mov	r3, #8
   12b50:	mov	r2, #8
   12b54:	mov	r1, #4
   12b58:	ldr	r0, [fp, #-16]
   12b5c:	bl	1c4d8 <flatcc_verify_field@@Base>
   12b60:	str	r0, [fp, #-8]
   12b64:	ldr	r3, [fp, #-8]
   12b68:	cmp	r3, #0
   12b6c:	beq	12b78 <_start@@Base+0x848>
   12b70:	ldr	r3, [fp, #-8]
   12b74:	b	12ba8 <_start@@Base+0x878>
   12b78:	mov	r3, #8
   12b7c:	mov	r2, #8
   12b80:	mov	r1, #5
   12b84:	ldr	r0, [fp, #-16]
   12b88:	bl	1c4d8 <flatcc_verify_field@@Base>
   12b8c:	str	r0, [fp, #-8]
   12b90:	ldr	r3, [fp, #-8]
   12b94:	cmp	r3, #0
   12b98:	beq	12ba4 <_start@@Base+0x874>
   12b9c:	ldr	r3, [fp, #-8]
   12ba0:	b	12ba8 <_start@@Base+0x878>
   12ba4:	mov	r3, #0
   12ba8:	mov	r0, r3
   12bac:	sub	sp, fp, #4
   12bb0:	ldr	fp, [sp]
   12bb4:	add	sp, sp, #4
   12bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bbc:	str	fp, [sp, #-8]!
   12bc0:	str	lr, [sp, #4]
   12bc4:	add	fp, sp, #4
   12bc8:	sub	sp, sp, #16
   12bcc:	str	r0, [fp, #-16]
   12bd0:	mov	r2, #0
   12bd4:	mov	r1, #0
   12bd8:	ldr	r0, [fp, #-16]
   12bdc:	bl	1c568 <flatcc_verify_string_field@@Base>
   12be0:	str	r0, [fp, #-8]
   12be4:	ldr	r3, [fp, #-8]
   12be8:	cmp	r3, #0
   12bec:	beq	12bf8 <_start@@Base+0x8c8>
   12bf0:	ldr	r3, [fp, #-8]
   12bf4:	b	12c54 <_start@@Base+0x924>
   12bf8:	mov	r3, #8
   12bfc:	mov	r2, #8
   12c00:	mov	r1, #1
   12c04:	ldr	r0, [fp, #-16]
   12c08:	bl	1c4d8 <flatcc_verify_field@@Base>
   12c0c:	str	r0, [fp, #-8]
   12c10:	ldr	r3, [fp, #-8]
   12c14:	cmp	r3, #0
   12c18:	beq	12c24 <_start@@Base+0x8f4>
   12c1c:	ldr	r3, [fp, #-8]
   12c20:	b	12c54 <_start@@Base+0x924>
   12c24:	mov	r3, #2
   12c28:	mov	r2, #2
   12c2c:	mov	r1, #2
   12c30:	ldr	r0, [fp, #-16]
   12c34:	bl	1c4d8 <flatcc_verify_field@@Base>
   12c38:	str	r0, [fp, #-8]
   12c3c:	ldr	r3, [fp, #-8]
   12c40:	cmp	r3, #0
   12c44:	beq	12c50 <_start@@Base+0x920>
   12c48:	ldr	r3, [fp, #-8]
   12c4c:	b	12c54 <_start@@Base+0x924>
   12c50:	mov	r3, #0
   12c54:	mov	r0, r3
   12c58:	sub	sp, fp, #4
   12c5c:	ldr	fp, [sp]
   12c60:	add	sp, sp, #4
   12c64:	pop	{pc}		; (ldr pc, [sp], #4)
   12c68:	str	fp, [sp, #-8]!
   12c6c:	str	lr, [sp, #4]
   12c70:	add	fp, sp, #4
   12c74:	sub	sp, sp, #16
   12c78:	str	r0, [fp, #-16]
   12c7c:	ldr	r3, [pc, #160]	; 12d24 <_start@@Base+0x9f4>
   12c80:	add	r3, pc, r3
   12c84:	mov	r2, #0
   12c88:	mov	r1, #0
   12c8c:	ldr	r0, [fp, #-16]
   12c90:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   12c94:	str	r0, [fp, #-8]
   12c98:	ldr	r3, [fp, #-8]
   12c9c:	cmp	r3, #0
   12ca0:	beq	12cac <_start@@Base+0x97c>
   12ca4:	ldr	r3, [fp, #-8]
   12ca8:	b	12d10 <_start@@Base+0x9e0>
   12cac:	ldr	r3, [pc, #116]	; 12d28 <_start@@Base+0x9f8>
   12cb0:	add	r3, pc, r3
   12cb4:	mov	r2, #0
   12cb8:	mov	r1, #1
   12cbc:	ldr	r0, [fp, #-16]
   12cc0:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   12cc4:	str	r0, [fp, #-8]
   12cc8:	ldr	r3, [fp, #-8]
   12ccc:	cmp	r3, #0
   12cd0:	beq	12cdc <_start@@Base+0x9ac>
   12cd4:	ldr	r3, [fp, #-8]
   12cd8:	b	12d10 <_start@@Base+0x9e0>
   12cdc:	ldr	r3, [pc, #72]	; 12d2c <_start@@Base+0x9fc>
   12ce0:	add	r3, pc, r3
   12ce4:	mov	r2, #0
   12ce8:	mov	r1, #3
   12cec:	ldr	r0, [fp, #-16]
   12cf0:	bl	1d440 <flatcc_verify_union_vector_field@@Base>
   12cf4:	str	r0, [fp, #-8]
   12cf8:	ldr	r3, [fp, #-8]
   12cfc:	cmp	r3, #0
   12d00:	beq	12d0c <_start@@Base+0x9dc>
   12d04:	ldr	r3, [fp, #-8]
   12d08:	b	12d10 <_start@@Base+0x9e0>
   12d0c:	mov	r3, #0
   12d10:	mov	r0, r3
   12d14:	sub	sp, fp, #4
   12d18:	ldr	fp, [sp]
   12d1c:	add	sp, sp, #4
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	andeq	r0, r0, r8, lsr #1
   12d28:	andeq	r0, r0, r4, lsr #29
   12d2c:			; <UNDEFINED> instruction: 0xfffffa30
   12d30:	str	fp, [sp, #-8]!
   12d34:	str	lr, [sp, #4]
   12d38:	add	fp, sp, #4
   12d3c:	sub	sp, sp, #16
   12d40:	str	r0, [fp, #-16]
   12d44:	ldr	r3, [pc, #160]	; 12dec <_start@@Base+0xabc>
   12d48:	add	r3, pc, r3
   12d4c:	mov	r2, #0
   12d50:	mov	r1, #0
   12d54:	ldr	r0, [fp, #-16]
   12d58:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   12d5c:	str	r0, [fp, #-8]
   12d60:	ldr	r3, [fp, #-8]
   12d64:	cmp	r3, #0
   12d68:	beq	12d74 <_start@@Base+0xa44>
   12d6c:	ldr	r3, [fp, #-8]
   12d70:	b	12dd8 <_start@@Base+0xaa8>
   12d74:	ldr	r3, [pc, #116]	; 12df0 <_start@@Base+0xac0>
   12d78:	add	r3, pc, r3
   12d7c:	mov	r2, #0
   12d80:	mov	r1, #1
   12d84:	ldr	r0, [fp, #-16]
   12d88:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   12d8c:	str	r0, [fp, #-8]
   12d90:	ldr	r3, [fp, #-8]
   12d94:	cmp	r3, #0
   12d98:	beq	12da4 <_start@@Base+0xa74>
   12d9c:	ldr	r3, [fp, #-8]
   12da0:	b	12dd8 <_start@@Base+0xaa8>
   12da4:	ldr	r3, [pc, #72]	; 12df4 <_start@@Base+0xac4>
   12da8:	add	r3, pc, r3
   12dac:	mov	r2, #0
   12db0:	mov	r1, #2
   12db4:	ldr	r0, [fp, #-16]
   12db8:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   12dbc:	str	r0, [fp, #-8]
   12dc0:	ldr	r3, [fp, #-8]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12dd4 <_start@@Base+0xaa4>
   12dcc:	ldr	r3, [fp, #-8]
   12dd0:	b	12dd8 <_start@@Base+0xaa8>
   12dd4:	mov	r3, #0
   12dd8:	mov	r0, r3
   12ddc:	sub	sp, fp, #4
   12de0:	ldr	fp, [sp]
   12de4:	add	sp, sp, #4
   12de8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dec:	andeq	r0, r0, r8, lsr #1
   12df0:	andeq	r0, r0, r4, lsr #4
   12df4:	andeq	r0, r0, r8, ror r2
   12df8:	str	fp, [sp, #-8]!
   12dfc:	str	lr, [sp, #4]
   12e00:	add	fp, sp, #4
   12e04:	sub	sp, sp, #16
   12e08:	str	r0, [fp, #-16]
   12e0c:	mov	r2, #0
   12e10:	mov	r1, #0
   12e14:	ldr	r0, [fp, #-16]
   12e18:	bl	1c568 <flatcc_verify_string_field@@Base>
   12e1c:	str	r0, [fp, #-8]
   12e20:	ldr	r3, [fp, #-8]
   12e24:	cmp	r3, #0
   12e28:	beq	12e34 <_start@@Base+0xb04>
   12e2c:	ldr	r3, [fp, #-8]
   12e30:	b	12f90 <_start@@Base+0xc60>
   12e34:	mov	r3, #4
   12e38:	mov	r2, #4
   12e3c:	mov	r1, #1
   12e40:	ldr	r0, [fp, #-16]
   12e44:	bl	1c4d8 <flatcc_verify_field@@Base>
   12e48:	str	r0, [fp, #-8]
   12e4c:	ldr	r3, [fp, #-8]
   12e50:	cmp	r3, #0
   12e54:	beq	12e60 <_start@@Base+0xb30>
   12e58:	ldr	r3, [fp, #-8]
   12e5c:	b	12f90 <_start@@Base+0xc60>
   12e60:	mov	r2, #0
   12e64:	mov	r1, #2
   12e68:	ldr	r0, [fp, #-16]
   12e6c:	bl	1c568 <flatcc_verify_string_field@@Base>
   12e70:	str	r0, [fp, #-8]
   12e74:	ldr	r3, [fp, #-8]
   12e78:	cmp	r3, #0
   12e7c:	beq	12e88 <_start@@Base+0xb58>
   12e80:	ldr	r3, [fp, #-8]
   12e84:	b	12f90 <_start@@Base+0xc60>
   12e88:	mov	r3, #8
   12e8c:	mov	r2, #8
   12e90:	mov	r1, #3
   12e94:	ldr	r0, [fp, #-16]
   12e98:	bl	1c4d8 <flatcc_verify_field@@Base>
   12e9c:	str	r0, [fp, #-8]
   12ea0:	ldr	r3, [fp, #-8]
   12ea4:	cmp	r3, #0
   12ea8:	beq	12eb4 <_start@@Base+0xb84>
   12eac:	ldr	r3, [fp, #-8]
   12eb0:	b	12f90 <_start@@Base+0xc60>
   12eb4:	mov	r2, #0
   12eb8:	mov	r1, #4
   12ebc:	ldr	r0, [fp, #-16]
   12ec0:	bl	1c568 <flatcc_verify_string_field@@Base>
   12ec4:	str	r0, [fp, #-8]
   12ec8:	ldr	r3, [fp, #-8]
   12ecc:	cmp	r3, #0
   12ed0:	beq	12edc <_start@@Base+0xbac>
   12ed4:	ldr	r3, [fp, #-8]
   12ed8:	b	12f90 <_start@@Base+0xc60>
   12edc:	mov	r3, #8
   12ee0:	mov	r2, #8
   12ee4:	mov	r1, #5
   12ee8:	ldr	r0, [fp, #-16]
   12eec:	bl	1c4d8 <flatcc_verify_field@@Base>
   12ef0:	str	r0, [fp, #-8]
   12ef4:	ldr	r3, [fp, #-8]
   12ef8:	cmp	r3, #0
   12efc:	beq	12f08 <_start@@Base+0xbd8>
   12f00:	ldr	r3, [fp, #-8]
   12f04:	b	12f90 <_start@@Base+0xc60>
   12f08:	mov	r3, #4
   12f0c:	mov	r2, #4
   12f10:	mov	r1, #6
   12f14:	ldr	r0, [fp, #-16]
   12f18:	bl	1c4d8 <flatcc_verify_field@@Base>
   12f1c:	str	r0, [fp, #-8]
   12f20:	ldr	r3, [fp, #-8]
   12f24:	cmp	r3, #0
   12f28:	beq	12f34 <_start@@Base+0xc04>
   12f2c:	ldr	r3, [fp, #-8]
   12f30:	b	12f90 <_start@@Base+0xc60>
   12f34:	mov	r3, #8
   12f38:	mov	r2, #8
   12f3c:	mov	r1, #7
   12f40:	ldr	r0, [fp, #-16]
   12f44:	bl	1c4d8 <flatcc_verify_field@@Base>
   12f48:	str	r0, [fp, #-8]
   12f4c:	ldr	r3, [fp, #-8]
   12f50:	cmp	r3, #0
   12f54:	beq	12f60 <_start@@Base+0xc30>
   12f58:	ldr	r3, [fp, #-8]
   12f5c:	b	12f90 <_start@@Base+0xc60>
   12f60:	mov	r3, #4
   12f64:	mov	r2, #4
   12f68:	mov	r1, #8
   12f6c:	ldr	r0, [fp, #-16]
   12f70:	bl	1c4d8 <flatcc_verify_field@@Base>
   12f74:	str	r0, [fp, #-8]
   12f78:	ldr	r3, [fp, #-8]
   12f7c:	cmp	r3, #0
   12f80:	beq	12f8c <_start@@Base+0xc5c>
   12f84:	ldr	r3, [fp, #-8]
   12f88:	b	12f90 <_start@@Base+0xc60>
   12f8c:	mov	r3, #0
   12f90:	mov	r0, r3
   12f94:	sub	sp, fp, #4
   12f98:	ldr	fp, [sp]
   12f9c:	add	sp, sp, #4
   12fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa4:	str	fp, [sp, #-8]!
   12fa8:	str	lr, [sp, #4]
   12fac:	add	fp, sp, #4
   12fb0:	sub	sp, sp, #16
   12fb4:	str	r0, [fp, #-16]
   12fb8:	mov	r3, #8
   12fbc:	mov	r2, #8
   12fc0:	mov	r1, #0
   12fc4:	ldr	r0, [fp, #-16]
   12fc8:	bl	1c4d8 <flatcc_verify_field@@Base>
   12fcc:	str	r0, [fp, #-8]
   12fd0:	ldr	r3, [fp, #-8]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12fe4 <_start@@Base+0xcb4>
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	b	13014 <_start@@Base+0xce4>
   12fe4:	mov	r3, #4
   12fe8:	mov	r2, #4
   12fec:	mov	r1, #1
   12ff0:	ldr	r0, [fp, #-16]
   12ff4:	bl	1c4d8 <flatcc_verify_field@@Base>
   12ff8:	str	r0, [fp, #-8]
   12ffc:	ldr	r3, [fp, #-8]
   13000:	cmp	r3, #0
   13004:	beq	13010 <_start@@Base+0xce0>
   13008:	ldr	r3, [fp, #-8]
   1300c:	b	13014 <_start@@Base+0xce4>
   13010:	mov	r3, #0
   13014:	mov	r0, r3
   13018:	sub	sp, fp, #4
   1301c:	ldr	fp, [sp]
   13020:	add	sp, sp, #4
   13024:	pop	{pc}		; (ldr pc, [sp], #4)
   13028:	str	fp, [sp, #-8]!
   1302c:	str	lr, [sp, #4]
   13030:	add	fp, sp, #4
   13034:	sub	sp, sp, #16
   13038:	str	r0, [fp, #-16]
   1303c:	mov	r3, #8
   13040:	mov	r2, #8
   13044:	mov	r1, #0
   13048:	ldr	r0, [fp, #-16]
   1304c:	bl	1c4d8 <flatcc_verify_field@@Base>
   13050:	str	r0, [fp, #-8]
   13054:	ldr	r3, [fp, #-8]
   13058:	cmp	r3, #0
   1305c:	beq	13068 <_start@@Base+0xd38>
   13060:	ldr	r3, [fp, #-8]
   13064:	b	13098 <_start@@Base+0xd68>
   13068:	mov	r3, #4
   1306c:	mov	r2, #4
   13070:	mov	r1, #1
   13074:	ldr	r0, [fp, #-16]
   13078:	bl	1c4d8 <flatcc_verify_field@@Base>
   1307c:	str	r0, [fp, #-8]
   13080:	ldr	r3, [fp, #-8]
   13084:	cmp	r3, #0
   13088:	beq	13094 <_start@@Base+0xd64>
   1308c:	ldr	r3, [fp, #-8]
   13090:	b	13098 <_start@@Base+0xd68>
   13094:	mov	r3, #0
   13098:	mov	r0, r3
   1309c:	sub	sp, fp, #4
   130a0:	ldr	fp, [sp]
   130a4:	add	sp, sp, #4
   130a8:	pop	{pc}		; (ldr pc, [sp], #4)
   130ac:	str	fp, [sp, #-8]!
   130b0:	str	lr, [sp, #4]
   130b4:	add	fp, sp, #4
   130b8:	sub	sp, sp, #24
   130bc:	str	r0, [fp, #-16]
   130c0:	mvn	r3, #0
   130c4:	str	r3, [sp, #4]
   130c8:	mov	r3, #1
   130cc:	str	r3, [sp]
   130d0:	mov	r3, #1
   130d4:	mov	r2, #0
   130d8:	mov	r1, #0
   130dc:	ldr	r0, [fp, #-16]
   130e0:	bl	1c628 <flatcc_verify_vector_field@@Base>
   130e4:	str	r0, [fp, #-8]
   130e8:	ldr	r3, [fp, #-8]
   130ec:	cmp	r3, #0
   130f0:	beq	130fc <_start@@Base+0xdcc>
   130f4:	ldr	r3, [fp, #-8]
   130f8:	b	1317c <_start@@Base+0xe4c>
   130fc:	mvn	r3, #0
   13100:	str	r3, [sp, #4]
   13104:	mov	r3, #1
   13108:	str	r3, [sp]
   1310c:	mov	r3, #1
   13110:	mov	r2, #0
   13114:	mov	r1, #1
   13118:	ldr	r0, [fp, #-16]
   1311c:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13120:	str	r0, [fp, #-8]
   13124:	ldr	r3, [fp, #-8]
   13128:	cmp	r3, #0
   1312c:	beq	13138 <_start@@Base+0xe08>
   13130:	ldr	r3, [fp, #-8]
   13134:	b	1317c <_start@@Base+0xe4c>
   13138:	ldr	r3, [pc, #80]	; 13190 <_start@@Base+0xe60>
   1313c:	add	r3, pc, r3
   13140:	str	r3, [sp, #4]
   13144:	mov	r3, #1
   13148:	str	r3, [sp]
   1314c:	mov	r3, #0
   13150:	mov	r2, #0
   13154:	mov	r1, #2
   13158:	ldr	r0, [fp, #-16]
   1315c:	bl	1d068 <flatcc_verify_table_as_nested_root@@Base>
   13160:	str	r0, [fp, #-8]
   13164:	ldr	r3, [fp, #-8]
   13168:	cmp	r3, #0
   1316c:	beq	13178 <_start@@Base+0xe48>
   13170:	ldr	r3, [fp, #-8]
   13174:	b	1317c <_start@@Base+0xe4c>
   13178:	mov	r3, #0
   1317c:	mov	r0, r3
   13180:	sub	sp, fp, #4
   13184:	ldr	fp, [sp]
   13188:	add	sp, sp, #4
   1318c:	pop	{pc}		; (ldr pc, [sp], #4)
   13190:	andeq	r0, r0, r0, asr r0
   13194:	str	fp, [sp, #-8]!
   13198:	str	lr, [sp, #4]
   1319c:	add	fp, sp, #4
   131a0:	sub	sp, sp, #24
   131a4:	str	r0, [fp, #-16]
   131a8:	mov	r3, #16
   131ac:	mov	r2, #32
   131b0:	mov	r1, #0
   131b4:	ldr	r0, [fp, #-16]
   131b8:	bl	1c4d8 <flatcc_verify_field@@Base>
   131bc:	str	r0, [fp, #-8]
   131c0:	ldr	r3, [fp, #-8]
   131c4:	cmp	r3, #0
   131c8:	beq	131d4 <_start@@Base+0xea4>
   131cc:	ldr	r3, [fp, #-8]
   131d0:	b	13824 <_start@@Base+0x14f4>
   131d4:	mov	r3, #2
   131d8:	mov	r2, #2
   131dc:	mov	r1, #2
   131e0:	ldr	r0, [fp, #-16]
   131e4:	bl	1c4d8 <flatcc_verify_field@@Base>
   131e8:	str	r0, [fp, #-8]
   131ec:	ldr	r3, [fp, #-8]
   131f0:	cmp	r3, #0
   131f4:	beq	13200 <_start@@Base+0xed0>
   131f8:	ldr	r3, [fp, #-8]
   131fc:	b	13824 <_start@@Base+0x14f4>
   13200:	mov	r3, #2
   13204:	mov	r2, #2
   13208:	mov	r1, #1
   1320c:	ldr	r0, [fp, #-16]
   13210:	bl	1c4d8 <flatcc_verify_field@@Base>
   13214:	str	r0, [fp, #-8]
   13218:	ldr	r3, [fp, #-8]
   1321c:	cmp	r3, #0
   13220:	beq	1322c <_start@@Base+0xefc>
   13224:	ldr	r3, [fp, #-8]
   13228:	b	13824 <_start@@Base+0x14f4>
   1322c:	mov	r2, #1
   13230:	mov	r1, #3
   13234:	ldr	r0, [fp, #-16]
   13238:	bl	1c568 <flatcc_verify_string_field@@Base>
   1323c:	str	r0, [fp, #-8]
   13240:	ldr	r3, [fp, #-8]
   13244:	cmp	r3, #0
   13248:	beq	13254 <_start@@Base+0xf24>
   1324c:	ldr	r3, [fp, #-8]
   13250:	b	13824 <_start@@Base+0x14f4>
   13254:	mov	r3, #1
   13258:	mov	r2, #1
   1325c:	mov	r1, #6
   13260:	ldr	r0, [fp, #-16]
   13264:	bl	1c4d8 <flatcc_verify_field@@Base>
   13268:	str	r0, [fp, #-8]
   1326c:	ldr	r3, [fp, #-8]
   13270:	cmp	r3, #0
   13274:	beq	13280 <_start@@Base+0xf50>
   13278:	ldr	r3, [fp, #-8]
   1327c:	b	13824 <_start@@Base+0x14f4>
   13280:	mvn	r3, #0
   13284:	str	r3, [sp, #4]
   13288:	mov	r3, #1
   1328c:	str	r3, [sp]
   13290:	mov	r3, #1
   13294:	mov	r2, #0
   13298:	mov	r1, #5
   1329c:	ldr	r0, [fp, #-16]
   132a0:	bl	1c628 <flatcc_verify_vector_field@@Base>
   132a4:	str	r0, [fp, #-8]
   132a8:	ldr	r3, [fp, #-8]
   132ac:	cmp	r3, #0
   132b0:	beq	132bc <_start@@Base+0xf8c>
   132b4:	ldr	r3, [fp, #-8]
   132b8:	b	13824 <_start@@Base+0x14f4>
   132bc:	ldr	r3, [pc, #1396]	; 13838 <_start@@Base+0x1508>
   132c0:	add	r3, pc, r3
   132c4:	mov	r2, #0
   132c8:	mov	r1, #11
   132cc:	ldr	r0, [fp, #-16]
   132d0:	bl	1c8a4 <flatcc_verify_table_vector_field@@Base>
   132d4:	str	r0, [fp, #-8]
   132d8:	ldr	r3, [fp, #-8]
   132dc:	cmp	r3, #0
   132e0:	beq	132ec <_start@@Base+0xfbc>
   132e4:	ldr	r3, [fp, #-8]
   132e8:	b	13824 <_start@@Base+0x14f4>
   132ec:	mov	r2, #0
   132f0:	mov	r1, #10
   132f4:	ldr	r0, [fp, #-16]
   132f8:	bl	1c708 <flatcc_verify_string_vector_field@@Base>
   132fc:	str	r0, [fp, #-8]
   13300:	ldr	r3, [fp, #-8]
   13304:	cmp	r3, #0
   13308:	beq	13314 <_start@@Base+0xfe4>
   1330c:	ldr	r3, [fp, #-8]
   13310:	b	13824 <_start@@Base+0x14f4>
   13314:	mov	r2, #0
   13318:	mov	r1, #28
   1331c:	ldr	r0, [fp, #-16]
   13320:	bl	1c708 <flatcc_verify_string_vector_field@@Base>
   13324:	str	r0, [fp, #-8]
   13328:	ldr	r3, [fp, #-8]
   1332c:	cmp	r3, #0
   13330:	beq	1333c <_start@@Base+0x100c>
   13334:	ldr	r3, [fp, #-8]
   13338:	b	13824 <_start@@Base+0x14f4>
   1333c:	mvn	r3, #0
   13340:	str	r3, [sp, #4]
   13344:	mov	r3, #1
   13348:	str	r3, [sp]
   1334c:	mov	r3, #1
   13350:	mov	r2, #0
   13354:	mov	r1, #24
   13358:	ldr	r0, [fp, #-16]
   1335c:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13360:	str	r0, [fp, #-8]
   13364:	ldr	r3, [fp, #-8]
   13368:	cmp	r3, #0
   1336c:	beq	13378 <_start@@Base+0x1048>
   13370:	ldr	r3, [fp, #-8]
   13374:	b	13824 <_start@@Base+0x14f4>
   13378:	mvn	r3, #-536870912	; 0xe0000000
   1337c:	str	r3, [sp, #4]
   13380:	mov	r3, #4
   13384:	str	r3, [sp]
   13388:	mov	r3, #8
   1338c:	mov	r2, #0
   13390:	mov	r1, #29
   13394:	ldr	r0, [fp, #-16]
   13398:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1339c:	str	r0, [fp, #-8]
   133a0:	ldr	r3, [fp, #-8]
   133a4:	cmp	r3, #0
   133a8:	beq	133b4 <_start@@Base+0x1084>
   133ac:	ldr	r3, [fp, #-8]
   133b0:	b	13824 <_start@@Base+0x14f4>
   133b4:	ldr	r3, [pc, #1152]	; 1383c <_start@@Base+0x150c>
   133b8:	add	r3, pc, r3
   133bc:	mov	r2, #0
   133c0:	mov	r1, #12
   133c4:	ldr	r0, [fp, #-16]
   133c8:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   133cc:	str	r0, [fp, #-8]
   133d0:	ldr	r3, [fp, #-8]
   133d4:	cmp	r3, #0
   133d8:	beq	133e4 <_start@@Base+0x10b4>
   133dc:	ldr	r3, [fp, #-8]
   133e0:	b	13824 <_start@@Base+0x14f4>
   133e4:	ldr	r3, [pc, #1108]	; 13840 <_start@@Base+0x1510>
   133e8:	add	r3, pc, r3
   133ec:	mov	r2, #0
   133f0:	mov	r1, #8
   133f4:	ldr	r0, [fp, #-16]
   133f8:	bl	1d1d4 <flatcc_verify_union_field@@Base>
   133fc:	str	r0, [fp, #-8]
   13400:	ldr	r3, [fp, #-8]
   13404:	cmp	r3, #0
   13408:	beq	13414 <_start@@Base+0x10e4>
   1340c:	ldr	r3, [fp, #-8]
   13410:	b	13824 <_start@@Base+0x14f4>
   13414:	mvn	r3, #-1073741824	; 0xc0000000
   13418:	str	r3, [sp, #4]
   1341c:	mov	r3, #2
   13420:	str	r3, [sp]
   13424:	mov	r3, #4
   13428:	mov	r2, #0
   1342c:	mov	r1, #9
   13430:	ldr	r0, [fp, #-16]
   13434:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13438:	str	r0, [fp, #-8]
   1343c:	ldr	r3, [fp, #-8]
   13440:	cmp	r3, #0
   13444:	beq	13450 <_start@@Base+0x1120>
   13448:	ldr	r3, [fp, #-8]
   1344c:	b	13824 <_start@@Base+0x14f4>
   13450:	mvn	r3, #-1073741824	; 0xc0000000
   13454:	str	r3, [sp, #4]
   13458:	mov	r3, #2
   1345c:	str	r3, [sp]
   13460:	mov	r3, #4
   13464:	mov	r2, #0
   13468:	mov	r1, #31
   1346c:	ldr	r0, [fp, #-16]
   13470:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13474:	str	r0, [fp, #-8]
   13478:	ldr	r3, [fp, #-8]
   1347c:	cmp	r3, #0
   13480:	beq	1348c <_start@@Base+0x115c>
   13484:	ldr	r3, [fp, #-8]
   13488:	b	13824 <_start@@Base+0x14f4>
   1348c:	ldr	r3, [pc, #944]	; 13844 <_start@@Base+0x1514>
   13490:	add	r3, pc, r3
   13494:	str	r3, [sp, #4]
   13498:	mov	r3, #1
   1349c:	str	r3, [sp]
   134a0:	mov	r3, #0
   134a4:	mov	r2, #0
   134a8:	mov	r1, #13
   134ac:	ldr	r0, [fp, #-16]
   134b0:	bl	1d068 <flatcc_verify_table_as_nested_root@@Base>
   134b4:	str	r0, [fp, #-8]
   134b8:	ldr	r3, [fp, #-8]
   134bc:	cmp	r3, #0
   134c0:	beq	134cc <_start@@Base+0x119c>
   134c4:	ldr	r3, [fp, #-8]
   134c8:	b	13824 <_start@@Base+0x14f4>
   134cc:	ldr	r3, [pc, #884]	; 13848 <_start@@Base+0x1518>
   134d0:	add	r3, pc, r3
   134d4:	mov	r2, #0
   134d8:	mov	r1, #14
   134dc:	ldr	r0, [fp, #-16]
   134e0:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   134e4:	str	r0, [fp, #-8]
   134e8:	ldr	r3, [fp, #-8]
   134ec:	cmp	r3, #0
   134f0:	beq	134fc <_start@@Base+0x11cc>
   134f4:	ldr	r3, [fp, #-8]
   134f8:	b	13824 <_start@@Base+0x14f4>
   134fc:	mov	r3, #1
   13500:	mov	r2, #1
   13504:	mov	r1, #15
   13508:	ldr	r0, [fp, #-16]
   1350c:	bl	1c4d8 <flatcc_verify_field@@Base>
   13510:	str	r0, [fp, #-8]
   13514:	ldr	r3, [fp, #-8]
   13518:	cmp	r3, #0
   1351c:	beq	13528 <_start@@Base+0x11f8>
   13520:	ldr	r3, [fp, #-8]
   13524:	b	13824 <_start@@Base+0x14f4>
   13528:	mov	r3, #4
   1352c:	mov	r2, #4
   13530:	mov	r1, #16
   13534:	ldr	r0, [fp, #-16]
   13538:	bl	1c4d8 <flatcc_verify_field@@Base>
   1353c:	str	r0, [fp, #-8]
   13540:	ldr	r3, [fp, #-8]
   13544:	cmp	r3, #0
   13548:	beq	13554 <_start@@Base+0x1224>
   1354c:	ldr	r3, [fp, #-8]
   13550:	b	13824 <_start@@Base+0x14f4>
   13554:	mov	r3, #4
   13558:	mov	r2, #4
   1355c:	mov	r1, #17
   13560:	ldr	r0, [fp, #-16]
   13564:	bl	1c4d8 <flatcc_verify_field@@Base>
   13568:	str	r0, [fp, #-8]
   1356c:	ldr	r3, [fp, #-8]
   13570:	cmp	r3, #0
   13574:	beq	13580 <_start@@Base+0x1250>
   13578:	ldr	r3, [fp, #-8]
   1357c:	b	13824 <_start@@Base+0x14f4>
   13580:	mov	r3, #8
   13584:	mov	r2, #8
   13588:	mov	r1, #18
   1358c:	ldr	r0, [fp, #-16]
   13590:	bl	1c4d8 <flatcc_verify_field@@Base>
   13594:	str	r0, [fp, #-8]
   13598:	ldr	r3, [fp, #-8]
   1359c:	cmp	r3, #0
   135a0:	beq	135ac <_start@@Base+0x127c>
   135a4:	ldr	r3, [fp, #-8]
   135a8:	b	13824 <_start@@Base+0x14f4>
   135ac:	mov	r3, #8
   135b0:	mov	r2, #8
   135b4:	mov	r1, #19
   135b8:	ldr	r0, [fp, #-16]
   135bc:	bl	1c4d8 <flatcc_verify_field@@Base>
   135c0:	str	r0, [fp, #-8]
   135c4:	ldr	r3, [fp, #-8]
   135c8:	cmp	r3, #0
   135cc:	beq	135d8 <_start@@Base+0x12a8>
   135d0:	ldr	r3, [fp, #-8]
   135d4:	b	13824 <_start@@Base+0x14f4>
   135d8:	mov	r3, #4
   135dc:	mov	r2, #4
   135e0:	mov	r1, #20
   135e4:	ldr	r0, [fp, #-16]
   135e8:	bl	1c4d8 <flatcc_verify_field@@Base>
   135ec:	str	r0, [fp, #-8]
   135f0:	ldr	r3, [fp, #-8]
   135f4:	cmp	r3, #0
   135f8:	beq	13604 <_start@@Base+0x12d4>
   135fc:	ldr	r3, [fp, #-8]
   13600:	b	13824 <_start@@Base+0x14f4>
   13604:	mov	r3, #4
   13608:	mov	r2, #4
   1360c:	mov	r1, #21
   13610:	ldr	r0, [fp, #-16]
   13614:	bl	1c4d8 <flatcc_verify_field@@Base>
   13618:	str	r0, [fp, #-8]
   1361c:	ldr	r3, [fp, #-8]
   13620:	cmp	r3, #0
   13624:	beq	13630 <_start@@Base+0x1300>
   13628:	ldr	r3, [fp, #-8]
   1362c:	b	13824 <_start@@Base+0x14f4>
   13630:	mov	r3, #8
   13634:	mov	r2, #8
   13638:	mov	r1, #22
   1363c:	ldr	r0, [fp, #-16]
   13640:	bl	1c4d8 <flatcc_verify_field@@Base>
   13644:	str	r0, [fp, #-8]
   13648:	ldr	r3, [fp, #-8]
   1364c:	cmp	r3, #0
   13650:	beq	1365c <_start@@Base+0x132c>
   13654:	ldr	r3, [fp, #-8]
   13658:	b	13824 <_start@@Base+0x14f4>
   1365c:	mov	r3, #8
   13660:	mov	r2, #8
   13664:	mov	r1, #23
   13668:	ldr	r0, [fp, #-16]
   1366c:	bl	1c4d8 <flatcc_verify_field@@Base>
   13670:	str	r0, [fp, #-8]
   13674:	ldr	r3, [fp, #-8]
   13678:	cmp	r3, #0
   1367c:	beq	13688 <_start@@Base+0x1358>
   13680:	ldr	r3, [fp, #-8]
   13684:	b	13824 <_start@@Base+0x14f4>
   13688:	mov	r3, #4
   1368c:	mov	r2, #4
   13690:	mov	r1, #25
   13694:	ldr	r0, [fp, #-16]
   13698:	bl	1c4d8 <flatcc_verify_field@@Base>
   1369c:	str	r0, [fp, #-8]
   136a0:	ldr	r3, [fp, #-8]
   136a4:	cmp	r3, #0
   136a8:	beq	136b4 <_start@@Base+0x1384>
   136ac:	ldr	r3, [fp, #-8]
   136b0:	b	13824 <_start@@Base+0x14f4>
   136b4:	mov	r3, #4
   136b8:	mov	r2, #4
   136bc:	mov	r1, #26
   136c0:	ldr	r0, [fp, #-16]
   136c4:	bl	1c4d8 <flatcc_verify_field@@Base>
   136c8:	str	r0, [fp, #-8]
   136cc:	ldr	r3, [fp, #-8]
   136d0:	cmp	r3, #0
   136d4:	beq	136e0 <_start@@Base+0x13b0>
   136d8:	ldr	r3, [fp, #-8]
   136dc:	b	13824 <_start@@Base+0x14f4>
   136e0:	mov	r3, #4
   136e4:	mov	r2, #4
   136e8:	mov	r1, #27
   136ec:	ldr	r0, [fp, #-16]
   136f0:	bl	1c4d8 <flatcc_verify_field@@Base>
   136f4:	str	r0, [fp, #-8]
   136f8:	ldr	r3, [fp, #-8]
   136fc:	cmp	r3, #0
   13700:	beq	1370c <_start@@Base+0x13dc>
   13704:	ldr	r3, [fp, #-8]
   13708:	b	13824 <_start@@Base+0x14f4>
   1370c:	mvn	r3, #0
   13710:	str	r3, [sp, #4]
   13714:	mov	r3, #1
   13718:	str	r3, [sp]
   1371c:	mov	r3, #1
   13720:	mov	r2, #0
   13724:	mov	r1, #30
   13728:	ldr	r0, [fp, #-16]
   1372c:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13730:	str	r0, [fp, #-8]
   13734:	ldr	r3, [fp, #-8]
   13738:	cmp	r3, #0
   1373c:	beq	13748 <_start@@Base+0x1418>
   13740:	ldr	r3, [fp, #-8]
   13744:	b	13824 <_start@@Base+0x14f4>
   13748:	mvn	r3, #-536870912	; 0xe0000000
   1374c:	str	r3, [sp, #4]
   13750:	mov	r3, #8
   13754:	str	r3, [sp]
   13758:	mov	r3, #8
   1375c:	mov	r2, #0
   13760:	mov	r1, #32
   13764:	ldr	r0, [fp, #-16]
   13768:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1376c:	str	r0, [fp, #-8]
   13770:	ldr	r3, [fp, #-8]
   13774:	cmp	r3, #0
   13778:	beq	13784 <_start@@Base+0x1454>
   1377c:	ldr	r3, [fp, #-8]
   13780:	b	13824 <_start@@Base+0x14f4>
   13784:	mvn	r3, #-536870912	; 0xe0000000
   13788:	str	r3, [sp, #4]
   1378c:	mov	r3, #8
   13790:	str	r3, [sp]
   13794:	mov	r3, #8
   13798:	mov	r2, #0
   1379c:	mov	r1, #33	; 0x21
   137a0:	ldr	r0, [fp, #-16]
   137a4:	bl	1c628 <flatcc_verify_vector_field@@Base>
   137a8:	str	r0, [fp, #-8]
   137ac:	ldr	r3, [fp, #-8]
   137b0:	cmp	r3, #0
   137b4:	beq	137c0 <_start@@Base+0x1490>
   137b8:	ldr	r3, [fp, #-8]
   137bc:	b	13824 <_start@@Base+0x14f4>
   137c0:	ldr	r3, [pc, #132]	; 1384c <_start@@Base+0x151c>
   137c4:	add	r3, pc, r3
   137c8:	mov	r2, #0
   137cc:	mov	r1, #34	; 0x22
   137d0:	ldr	r0, [fp, #-16]
   137d4:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   137d8:	str	r0, [fp, #-8]
   137dc:	ldr	r3, [fp, #-8]
   137e0:	cmp	r3, #0
   137e4:	beq	137f0 <_start@@Base+0x14c0>
   137e8:	ldr	r3, [fp, #-8]
   137ec:	b	13824 <_start@@Base+0x14f4>
   137f0:	ldr	r3, [pc, #88]	; 13850 <_start@@Base+0x1520>
   137f4:	add	r3, pc, r3
   137f8:	mov	r2, #0
   137fc:	mov	r1, #35	; 0x23
   13800:	ldr	r0, [fp, #-16]
   13804:	bl	1c7c8 <flatcc_verify_table_field@@Base>
   13808:	str	r0, [fp, #-8]
   1380c:	ldr	r3, [fp, #-8]
   13810:	cmp	r3, #0
   13814:	beq	13820 <_start@@Base+0x14f0>
   13818:	ldr	r3, [fp, #-8]
   1381c:	b	13824 <_start@@Base+0x14f4>
   13820:	mov	r3, #0
   13824:	mov	r0, r3
   13828:	sub	sp, fp, #4
   1382c:	ldr	fp, [sp]
   13830:	add	sp, sp, #4
   13834:	pop	{pc}		; (ldr pc, [sp], #4)
   13838:			; <UNDEFINED> instruction: 0xfffffecc
   1383c:			; <UNDEFINED> instruction: 0xfffffdd4
   13840:			; <UNDEFINED> instruction: 0xfffff328
   13844:			; <UNDEFINED> instruction: 0xfffffcfc
   13848:			; <UNDEFINED> instruction: 0xfffff6e4
   1384c:			; <UNDEFINED> instruction: 0xfffff11c
   13850:			; <UNDEFINED> instruction: 0xfffff8b0
   13854:	str	fp, [sp, #-8]!
   13858:	str	lr, [sp, #4]
   1385c:	add	fp, sp, #4
   13860:	sub	sp, sp, #8
   13864:	str	r0, [fp, #-8]
   13868:	str	r1, [fp, #-12]
   1386c:	ldr	r3, [pc, #44]	; 138a0 <_start@@Base+0x1570>
   13870:	add	r3, pc, r3
   13874:	ldr	r2, [pc, #40]	; 138a4 <_start@@Base+0x1574>
   13878:	add	r2, pc, r2
   1387c:	ldr	r1, [fp, #-12]
   13880:	ldr	r0, [fp, #-8]
   13884:	bl	1ce0c <flatcc_verify_table_as_root@@Base>
   13888:	mov	r3, r0
   1388c:	mov	r0, r3
   13890:	sub	sp, fp, #4
   13894:	ldr	fp, [sp]
   13898:	add	sp, sp, #4
   1389c:	pop	{pc}		; (ldr pc, [sp], #4)
   138a0:			; <UNDEFINED> instruction: 0xfffff91c
   138a4:	ldrdeq	r9, [r0], -r8
   138a8:	str	fp, [sp, #-8]!
   138ac:	str	lr, [sp, #4]
   138b0:	add	fp, sp, #4
   138b4:	sub	sp, sp, #24
   138b8:	str	r0, [fp, #-16]
   138bc:	mov	r3, #1
   138c0:	mov	r2, #1
   138c4:	mov	r1, #0
   138c8:	ldr	r0, [fp, #-16]
   138cc:	bl	1c4d8 <flatcc_verify_field@@Base>
   138d0:	str	r0, [fp, #-8]
   138d4:	ldr	r3, [fp, #-8]
   138d8:	cmp	r3, #0
   138dc:	beq	138e8 <_start@@Base+0x15b8>
   138e0:	ldr	r3, [fp, #-8]
   138e4:	b	13af0 <_start@@Base+0x17c0>
   138e8:	mov	r3, #1
   138ec:	mov	r2, #1
   138f0:	mov	r1, #1
   138f4:	ldr	r0, [fp, #-16]
   138f8:	bl	1c4d8 <flatcc_verify_field@@Base>
   138fc:	str	r0, [fp, #-8]
   13900:	ldr	r3, [fp, #-8]
   13904:	cmp	r3, #0
   13908:	beq	13914 <_start@@Base+0x15e4>
   1390c:	ldr	r3, [fp, #-8]
   13910:	b	13af0 <_start@@Base+0x17c0>
   13914:	mov	r3, #2
   13918:	mov	r2, #2
   1391c:	mov	r1, #2
   13920:	ldr	r0, [fp, #-16]
   13924:	bl	1c4d8 <flatcc_verify_field@@Base>
   13928:	str	r0, [fp, #-8]
   1392c:	ldr	r3, [fp, #-8]
   13930:	cmp	r3, #0
   13934:	beq	13940 <_start@@Base+0x1610>
   13938:	ldr	r3, [fp, #-8]
   1393c:	b	13af0 <_start@@Base+0x17c0>
   13940:	mov	r3, #2
   13944:	mov	r2, #2
   13948:	mov	r1, #3
   1394c:	ldr	r0, [fp, #-16]
   13950:	bl	1c4d8 <flatcc_verify_field@@Base>
   13954:	str	r0, [fp, #-8]
   13958:	ldr	r3, [fp, #-8]
   1395c:	cmp	r3, #0
   13960:	beq	1396c <_start@@Base+0x163c>
   13964:	ldr	r3, [fp, #-8]
   13968:	b	13af0 <_start@@Base+0x17c0>
   1396c:	mov	r3, #4
   13970:	mov	r2, #4
   13974:	mov	r1, #4
   13978:	ldr	r0, [fp, #-16]
   1397c:	bl	1c4d8 <flatcc_verify_field@@Base>
   13980:	str	r0, [fp, #-8]
   13984:	ldr	r3, [fp, #-8]
   13988:	cmp	r3, #0
   1398c:	beq	13998 <_start@@Base+0x1668>
   13990:	ldr	r3, [fp, #-8]
   13994:	b	13af0 <_start@@Base+0x17c0>
   13998:	mov	r3, #4
   1399c:	mov	r2, #4
   139a0:	mov	r1, #5
   139a4:	ldr	r0, [fp, #-16]
   139a8:	bl	1c4d8 <flatcc_verify_field@@Base>
   139ac:	str	r0, [fp, #-8]
   139b0:	ldr	r3, [fp, #-8]
   139b4:	cmp	r3, #0
   139b8:	beq	139c4 <_start@@Base+0x1694>
   139bc:	ldr	r3, [fp, #-8]
   139c0:	b	13af0 <_start@@Base+0x17c0>
   139c4:	mov	r3, #8
   139c8:	mov	r2, #8
   139cc:	mov	r1, #6
   139d0:	ldr	r0, [fp, #-16]
   139d4:	bl	1c4d8 <flatcc_verify_field@@Base>
   139d8:	str	r0, [fp, #-8]
   139dc:	ldr	r3, [fp, #-8]
   139e0:	cmp	r3, #0
   139e4:	beq	139f0 <_start@@Base+0x16c0>
   139e8:	ldr	r3, [fp, #-8]
   139ec:	b	13af0 <_start@@Base+0x17c0>
   139f0:	mov	r3, #8
   139f4:	mov	r2, #8
   139f8:	mov	r1, #7
   139fc:	ldr	r0, [fp, #-16]
   13a00:	bl	1c4d8 <flatcc_verify_field@@Base>
   13a04:	str	r0, [fp, #-8]
   13a08:	ldr	r3, [fp, #-8]
   13a0c:	cmp	r3, #0
   13a10:	beq	13a1c <_start@@Base+0x16ec>
   13a14:	ldr	r3, [fp, #-8]
   13a18:	b	13af0 <_start@@Base+0x17c0>
   13a1c:	mov	r3, #4
   13a20:	mov	r2, #4
   13a24:	mov	r1, #8
   13a28:	ldr	r0, [fp, #-16]
   13a2c:	bl	1c4d8 <flatcc_verify_field@@Base>
   13a30:	str	r0, [fp, #-8]
   13a34:	ldr	r3, [fp, #-8]
   13a38:	cmp	r3, #0
   13a3c:	beq	13a48 <_start@@Base+0x1718>
   13a40:	ldr	r3, [fp, #-8]
   13a44:	b	13af0 <_start@@Base+0x17c0>
   13a48:	mov	r3, #8
   13a4c:	mov	r2, #8
   13a50:	mov	r1, #9
   13a54:	ldr	r0, [fp, #-16]
   13a58:	bl	1c4d8 <flatcc_verify_field@@Base>
   13a5c:	str	r0, [fp, #-8]
   13a60:	ldr	r3, [fp, #-8]
   13a64:	cmp	r3, #0
   13a68:	beq	13a74 <_start@@Base+0x1744>
   13a6c:	ldr	r3, [fp, #-8]
   13a70:	b	13af0 <_start@@Base+0x17c0>
   13a74:	mvn	r3, #0
   13a78:	str	r3, [sp, #4]
   13a7c:	mov	r3, #1
   13a80:	str	r3, [sp]
   13a84:	mov	r3, #1
   13a88:	mov	r2, #0
   13a8c:	mov	r1, #10
   13a90:	ldr	r0, [fp, #-16]
   13a94:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13a98:	str	r0, [fp, #-8]
   13a9c:	ldr	r3, [fp, #-8]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13ab0 <_start@@Base+0x1780>
   13aa8:	ldr	r3, [fp, #-8]
   13aac:	b	13af0 <_start@@Base+0x17c0>
   13ab0:	mvn	r3, #-536870912	; 0xe0000000
   13ab4:	str	r3, [sp, #4]
   13ab8:	mov	r3, #8
   13abc:	str	r3, [sp]
   13ac0:	mov	r3, #8
   13ac4:	mov	r2, #0
   13ac8:	mov	r1, #11
   13acc:	ldr	r0, [fp, #-16]
   13ad0:	bl	1c628 <flatcc_verify_vector_field@@Base>
   13ad4:	str	r0, [fp, #-8]
   13ad8:	ldr	r3, [fp, #-8]
   13adc:	cmp	r3, #0
   13ae0:	beq	13aec <_start@@Base+0x17bc>
   13ae4:	ldr	r3, [fp, #-8]
   13ae8:	b	13af0 <_start@@Base+0x17c0>
   13aec:	mov	r3, #0
   13af0:	mov	r0, r3
   13af4:	sub	sp, fp, #4
   13af8:	ldr	fp, [sp]
   13afc:	add	sp, sp, #4
   13b00:	pop	{pc}		; (ldr pc, [sp], #4)
   13b04:	str	fp, [sp, #-8]!
   13b08:	str	lr, [sp, #4]
   13b0c:	add	fp, sp, #4
   13b10:	sub	sp, sp, #16
   13b14:	str	r0, [fp, #-16]
   13b18:	mov	r3, #4
   13b1c:	mov	r2, #4
   13b20:	mov	r1, #0
   13b24:	ldr	r0, [fp, #-16]
   13b28:	bl	1c4d8 <flatcc_verify_field@@Base>
   13b2c:	str	r0, [fp, #-8]
   13b30:	ldr	r3, [fp, #-8]
   13b34:	cmp	r3, #0
   13b38:	beq	13b44 <_start@@Base+0x1814>
   13b3c:	ldr	r3, [fp, #-8]
   13b40:	b	13b48 <_start@@Base+0x1818>
   13b44:	mov	r3, #0
   13b48:	mov	r0, r3
   13b4c:	sub	sp, fp, #4
   13b50:	ldr	fp, [sp]
   13b54:	add	sp, sp, #4
   13b58:	pop	{pc}		; (ldr pc, [sp], #4)
   13b5c:	str	fp, [sp, #-8]!
   13b60:	str	lr, [sp, #4]
   13b64:	add	fp, sp, #4
   13b68:	sub	sp, sp, #16
   13b6c:	str	r0, [fp, #-16]
   13b70:	ldr	r3, [pc, #256]	; 13c78 <_start@@Base+0x1948>
   13b74:	add	r3, pc, r3
   13b78:	mov	r2, #0
   13b7c:	mov	r1, #1
   13b80:	ldr	r0, [fp, #-16]
   13b84:	bl	1d1d4 <flatcc_verify_union_field@@Base>
   13b88:	str	r0, [fp, #-8]
   13b8c:	ldr	r3, [fp, #-8]
   13b90:	cmp	r3, #0
   13b94:	beq	13ba0 <_start@@Base+0x1870>
   13b98:	ldr	r3, [fp, #-8]
   13b9c:	b	13c64 <_start@@Base+0x1934>
   13ba0:	ldr	r3, [pc, #212]	; 13c7c <_start@@Base+0x194c>
   13ba4:	add	r3, pc, r3
   13ba8:	mov	r2, #0
   13bac:	mov	r1, #3
   13bb0:	ldr	r0, [fp, #-16]
   13bb4:	bl	1d1d4 <flatcc_verify_union_field@@Base>
   13bb8:	str	r0, [fp, #-8]
   13bbc:	ldr	r3, [fp, #-8]
   13bc0:	cmp	r3, #0
   13bc4:	beq	13bd0 <_start@@Base+0x18a0>
   13bc8:	ldr	r3, [fp, #-8]
   13bcc:	b	13c64 <_start@@Base+0x1934>
   13bd0:	ldr	r3, [pc, #168]	; 13c80 <_start@@Base+0x1950>
   13bd4:	add	r3, pc, r3
   13bd8:	mov	r2, #0
   13bdc:	mov	r1, #5
   13be0:	ldr	r0, [fp, #-16]
   13be4:	bl	1d1d4 <flatcc_verify_union_field@@Base>
   13be8:	str	r0, [fp, #-8]
   13bec:	ldr	r3, [fp, #-8]
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c00 <_start@@Base+0x18d0>
   13bf8:	ldr	r3, [fp, #-8]
   13bfc:	b	13c64 <_start@@Base+0x1934>
   13c00:	ldr	r3, [pc, #124]	; 13c84 <_start@@Base+0x1954>
   13c04:	add	r3, pc, r3
   13c08:	mov	r2, #0
   13c0c:	mov	r1, #7
   13c10:	ldr	r0, [fp, #-16]
   13c14:	bl	1d1d4 <flatcc_verify_union_field@@Base>
   13c18:	str	r0, [fp, #-8]
   13c1c:	ldr	r3, [fp, #-8]
   13c20:	cmp	r3, #0
   13c24:	beq	13c30 <_start@@Base+0x1900>
   13c28:	ldr	r3, [fp, #-8]
   13c2c:	b	13c64 <_start@@Base+0x1934>
   13c30:	ldr	r3, [pc, #80]	; 13c88 <_start@@Base+0x1958>
   13c34:	add	r3, pc, r3
   13c38:	mov	r2, #0
   13c3c:	mov	r1, #9
   13c40:	ldr	r0, [fp, #-16]
   13c44:	bl	1d440 <flatcc_verify_union_vector_field@@Base>
   13c48:	str	r0, [fp, #-8]
   13c4c:	ldr	r3, [fp, #-8]
   13c50:	cmp	r3, #0
   13c54:	beq	13c60 <_start@@Base+0x1930>
   13c58:	ldr	r3, [fp, #-8]
   13c5c:	b	13c64 <_start@@Base+0x1934>
   13c60:	mov	r3, #0
   13c64:	mov	r0, r3
   13c68:	sub	sp, fp, #4
   13c6c:	ldr	fp, [sp]
   13c70:	add	sp, sp, #4
   13c74:	pop	{pc}		; (ldr pc, [sp], #4)
   13c78:			; <UNDEFINED> instruction: 0xffffec70
   13c7c:			; <UNDEFINED> instruction: 0xffffec40
   13c80:			; <UNDEFINED> instruction: 0xffffec10
   13c84:			; <UNDEFINED> instruction: 0xffffebe0
   13c88:			; <UNDEFINED> instruction: 0xffffebb0

00013c8c <main@@Base>:
   13c8c:	str	fp, [sp, #-8]!
   13c90:	str	lr, [sp, #4]
   13c94:	add	fp, sp, #4
   13c98:	sub	sp, sp, #256	; 0x100
   13c9c:	str	r0, [fp, #-256]	; 0xffffff00
   13ca0:	str	r1, [fp, #-260]	; 0xfffffefc
   13ca4:	sub	r3, fp, #252	; 0xfc
   13ca8:	str	r3, [fp, #-8]
   13cac:	ldr	r0, [fp, #-8]
   13cb0:	bl	14b1c <flatcc_builder_init@@Base>
   13cb4:	ldr	r0, [fp, #-8]
   13cb8:	bl	12618 <_start@@Base+0x2e8>
   13cbc:	ldr	r3, [pc, #92]	; 13d20 <main@@Base+0x94>
   13cc0:	add	r3, pc, r3
   13cc4:	mov	r1, r3
   13cc8:	ldr	r0, [fp, #-8]
   13ccc:	bl	125cc <_start@@Base+0x29c>
   13cd0:	ldr	r0, [fp, #-8]
   13cd4:	bl	12678 <_start@@Base+0x348>
   13cd8:	sub	r3, fp, #20
   13cdc:	mov	r1, r3
   13ce0:	ldr	r0, [fp, #-8]
   13ce4:	bl	19f90 <flatcc_builder_get_direct_buffer@@Base>
   13ce8:	str	r0, [fp, #-12]
   13cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf0:	mov	r1, r3
   13cf4:	ldr	r0, [fp, #-12]
   13cf8:	bl	13854 <_start@@Base+0x1524>
   13cfc:	str	r0, [fp, #-16]
   13d00:	ldr	r0, [fp, #-8]
   13d04:	bl	14df8 <flatcc_builder_clear@@Base>
   13d08:	ldr	r3, [fp, #-16]
   13d0c:	mov	r0, r3
   13d10:	sub	sp, fp, #4
   13d14:	ldr	fp, [sp]
   13d18:	add	sp, sp, #4
   13d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d20:	muleq	r0, r8, fp
   13d24:	str	fp, [sp, #-8]!
   13d28:	str	lr, [sp, #4]
   13d2c:	add	fp, sp, #4
   13d30:	sub	sp, sp, #16
   13d34:	str	r0, [fp, #-16]
   13d38:	str	r1, [fp, #-20]	; 0xffffffec
   13d3c:	mov	r3, #0
   13d40:	str	r3, [fp, #-12]
   13d44:	ldr	r3, [fp, #-16]
   13d48:	cmp	r3, #3
   13d4c:	bhi	13d58 <main@@Base+0xcc>
   13d50:	mov	r3, #4
   13d54:	str	r3, [fp, #-16]
   13d58:	sub	r3, fp, #12
   13d5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d60:	ldr	r1, [fp, #-16]
   13d64:	mov	r0, r3
   13d68:	bl	122e8 <posix_memalign@plt>
   13d6c:	str	r0, [fp, #-8]
   13d70:	ldr	r3, [fp, #-8]
   13d74:	cmp	r3, #0
   13d78:	beq	13d9c <main@@Base+0x110>
   13d7c:	ldr	r3, [fp, #-12]
   13d80:	cmp	r3, #0
   13d84:	beq	13d9c <main@@Base+0x110>
   13d88:	ldr	r3, [fp, #-12]
   13d8c:	mov	r0, r3
   13d90:	bl	12288 <free@plt>
   13d94:	mov	r3, #0
   13d98:	str	r3, [fp, #-12]
   13d9c:	ldr	r3, [fp, #-12]
   13da0:	mov	r0, r3
   13da4:	sub	sp, fp, #4
   13da8:	ldr	fp, [sp]
   13dac:	add	sp, sp, #4
   13db0:	pop	{pc}		; (ldr pc, [sp], #4)
   13db4:	push	{fp}		; (str fp, [sp, #-4]!)
   13db8:	add	fp, sp, #0
   13dbc:	sub	sp, sp, #12
   13dc0:	str	r0, [fp, #-8]
   13dc4:	ldr	r3, [fp, #-8]
   13dc8:	mov	r0, r3
   13dcc:	add	sp, fp, #0
   13dd0:	pop	{fp}		; (ldr fp, [sp], #4)
   13dd4:	bx	lr
   13dd8:	push	{fp}		; (str fp, [sp, #-4]!)
   13ddc:	add	fp, sp, #0
   13de0:	sub	sp, sp, #12
   13de4:	mov	r3, r0
   13de8:	strb	r3, [fp, #-5]
   13dec:	ldrb	r3, [fp, #-5]
   13df0:	mov	r0, r3
   13df4:	add	sp, fp, #0
   13df8:	pop	{fp}		; (ldr fp, [sp], #4)
   13dfc:	bx	lr
   13e00:	push	{fp}		; (str fp, [sp, #-4]!)
   13e04:	add	fp, sp, #0
   13e08:	sub	sp, sp, #12
   13e0c:	str	r0, [fp, #-8]
   13e10:	ldr	r3, [fp, #-8]
   13e14:	mov	r0, r3
   13e18:	add	sp, fp, #0
   13e1c:	pop	{fp}		; (ldr fp, [sp], #4)
   13e20:	bx	lr
   13e24:	push	{fp}		; (str fp, [sp, #-4]!)
   13e28:	add	fp, sp, #0
   13e2c:	sub	sp, sp, #12
   13e30:	str	r0, [fp, #-8]
   13e34:	str	r1, [fp, #-12]
   13e38:	ldr	r3, [fp, #-8]
   13e3c:	ldr	r2, [r3]
   13e40:	ldr	r3, [fp, #-8]
   13e44:	ldr	r3, [r3, #4]
   13e48:	cmp	r2, r3
   13e4c:	bne	13e78 <main@@Base+0x1ec>
   13e50:	ldr	r3, [fp, #-12]
   13e54:	cmp	r3, #0
   13e58:	beq	13e6c <main@@Base+0x1e0>
   13e5c:	ldr	r3, [fp, #-8]
   13e60:	ldr	r2, [r3, #24]
   13e64:	ldr	r3, [fp, #-12]
   13e68:	str	r2, [r3]
   13e6c:	ldr	r3, [fp, #-8]
   13e70:	ldr	r3, [r3, #8]
   13e74:	b	13e94 <main@@Base+0x208>
   13e78:	ldr	r3, [fp, #-12]
   13e7c:	cmp	r3, #0
   13e80:	beq	13e90 <main@@Base+0x204>
   13e84:	ldr	r3, [fp, #-12]
   13e88:	mov	r2, #0
   13e8c:	str	r2, [r3]
   13e90:	mov	r3, #0
   13e94:	mov	r0, r3
   13e98:	add	sp, fp, #0
   13e9c:	pop	{fp}		; (ldr fp, [sp], #4)
   13ea0:	bx	lr
   13ea4:	str	fp, [sp, #-8]!
   13ea8:	str	lr, [sp, #4]
   13eac:	add	fp, sp, #4
   13eb0:	sub	sp, sp, #16
   13eb4:	str	r0, [fp, #-16]
   13eb8:	str	r1, [fp, #-20]	; 0xffffffec
   13ebc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ec0:	mov	r1, #0
   13ec4:	ldr	r0, [fp, #-16]
   13ec8:	bl	1230c <memchr@plt>
   13ecc:	str	r0, [fp, #-8]
   13ed0:	ldr	r3, [fp, #-8]
   13ed4:	cmp	r3, #0
   13ed8:	beq	13eec <main@@Base+0x260>
   13edc:	ldr	r2, [fp, #-8]
   13ee0:	ldr	r3, [fp, #-16]
   13ee4:	sub	r3, r2, r3
   13ee8:	b	13ef0 <main@@Base+0x264>
   13eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef0:	mov	r0, r3
   13ef4:	sub	sp, fp, #4
   13ef8:	ldr	fp, [sp]
   13efc:	add	sp, sp, #4
   13f00:	pop	{pc}		; (ldr pc, [sp], #4)

00013f04 <flatcc_builder_default_alloc@@Base>:
   13f04:	str	fp, [sp, #-8]!
   13f08:	str	lr, [sp, #4]
   13f0c:	add	fp, sp, #4
   13f10:	sub	sp, sp, #24
   13f14:	str	r0, [fp, #-16]
   13f18:	str	r1, [fp, #-20]	; 0xffffffec
   13f1c:	str	r2, [fp, #-24]	; 0xffffffe8
   13f20:	str	r3, [fp, #-28]	; 0xffffffe4
   13f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f28:	cmp	r3, #0
   13f2c:	bne	13f70 <flatcc_builder_default_alloc@@Base+0x6c>
   13f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f34:	ldr	r3, [r3]
   13f38:	cmp	r3, #0
   13f3c:	beq	13f68 <flatcc_builder_default_alloc@@Base+0x64>
   13f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f44:	ldr	r3, [r3]
   13f48:	mov	r0, r3
   13f4c:	bl	12288 <free@plt>
   13f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f54:	mov	r2, #0
   13f58:	str	r2, [r3]
   13f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f60:	mov	r2, #0
   13f64:	str	r2, [r3, #4]
   13f68:	mov	r3, #0
   13f6c:	b	140c4 <flatcc_builder_default_alloc@@Base+0x1c0>
   13f70:	ldr	r3, [fp, #4]
   13f74:	sub	r3, r3, #1
   13f78:	cmp	r3, #6
   13f7c:	addls	pc, pc, r3, lsl #2
   13f80:	b	13fd0 <flatcc_builder_default_alloc@@Base+0xcc>
   13f84:	b	13fa0 <flatcc_builder_default_alloc@@Base+0x9c>
   13f88:	b	13fd0 <flatcc_builder_default_alloc@@Base+0xcc>
   13f8c:	b	13fd0 <flatcc_builder_default_alloc@@Base+0xcc>
   13f90:	b	13fb8 <flatcc_builder_default_alloc@@Base+0xb4>
   13f94:	b	13fac <flatcc_builder_default_alloc@@Base+0xa8>
   13f98:	b	13fd0 <flatcc_builder_default_alloc@@Base+0xcc>
   13f9c:	b	13fc4 <flatcc_builder_default_alloc@@Base+0xc0>
   13fa0:	mov	r3, #256	; 0x100
   13fa4:	str	r3, [fp, #-8]
   13fa8:	b	13fdc <flatcc_builder_default_alloc@@Base+0xd8>
   13fac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fb0:	str	r3, [fp, #-8]
   13fb4:	b	13fdc <flatcc_builder_default_alloc@@Base+0xd8>
   13fb8:	mov	r3, #288	; 0x120
   13fbc:	str	r3, [fp, #-8]
   13fc0:	b	13fdc <flatcc_builder_default_alloc@@Base+0xd8>
   13fc4:	mov	r3, #64	; 0x40
   13fc8:	str	r3, [fp, #-8]
   13fcc:	b	13fdc <flatcc_builder_default_alloc@@Base+0xd8>
   13fd0:	mov	r3, #32
   13fd4:	str	r3, [fp, #-8]
   13fd8:	nop	{0}
   13fdc:	b	13fec <flatcc_builder_default_alloc@@Base+0xe8>
   13fe0:	ldr	r3, [fp, #-8]
   13fe4:	lsl	r3, r3, #1
   13fe8:	str	r3, [fp, #-8]
   13fec:	ldr	r2, [fp, #-8]
   13ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ff4:	cmp	r2, r3
   13ff8:	bcc	13fe0 <flatcc_builder_default_alloc@@Base+0xdc>
   13ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14000:	ldr	r3, [r3, #4]
   14004:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14008:	cmp	r2, r3
   1400c:	bhi	14030 <flatcc_builder_default_alloc@@Base+0x12c>
   14010:	ldr	r3, [fp, #-20]	; 0xffffffec
   14014:	ldr	r3, [r3, #4]
   14018:	lsr	r3, r3, #1
   1401c:	ldr	r2, [fp, #-8]
   14020:	cmp	r2, r3
   14024:	bhi	14030 <flatcc_builder_default_alloc@@Base+0x12c>
   14028:	mov	r3, #0
   1402c:	b	140c4 <flatcc_builder_default_alloc@@Base+0x1c0>
   14030:	ldr	r3, [fp, #-20]	; 0xffffffec
   14034:	ldr	r3, [r3]
   14038:	ldr	r1, [fp, #-8]
   1403c:	mov	r0, r3
   14040:	bl	122ac <realloc@plt>
   14044:	str	r0, [fp, #-12]
   14048:	ldr	r3, [fp, #-12]
   1404c:	cmp	r3, #0
   14050:	bne	1405c <flatcc_builder_default_alloc@@Base+0x158>
   14054:	mvn	r3, #0
   14058:	b	140c4 <flatcc_builder_default_alloc@@Base+0x1c0>
   1405c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14060:	cmp	r3, #0
   14064:	beq	140a8 <flatcc_builder_default_alloc@@Base+0x1a4>
   14068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1406c:	ldr	r3, [r3, #4]
   14070:	ldr	r2, [fp, #-8]
   14074:	cmp	r2, r3
   14078:	bls	140a8 <flatcc_builder_default_alloc@@Base+0x1a4>
   1407c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14080:	ldr	r3, [r3, #4]
   14084:	ldr	r2, [fp, #-12]
   14088:	add	r0, r2, r3
   1408c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14090:	ldr	r3, [r3, #4]
   14094:	ldr	r2, [fp, #-8]
   14098:	sub	r3, r2, r3
   1409c:	mov	r2, r3
   140a0:	mov	r1, #0
   140a4:	bl	122f4 <memset@plt>
   140a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   140ac:	ldr	r2, [fp, #-12]
   140b0:	str	r2, [r3]
   140b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b8:	ldr	r2, [fp, #-8]
   140bc:	str	r2, [r3, #4]
   140c0:	mov	r3, #0
   140c4:	mov	r0, r3
   140c8:	sub	sp, fp, #4
   140cc:	ldr	fp, [sp]
   140d0:	add	sp, sp, #4
   140d4:	pop	{pc}		; (ldr pc, [sp], #4)
   140d8:	push	{fp}		; (str fp, [sp, #-4]!)
   140dc:	add	fp, sp, #0
   140e0:	sub	sp, sp, #20
   140e4:	str	r0, [fp, #-16]
   140e8:	str	r1, [fp, #-20]	; 0xffffffec
   140ec:	ldr	r3, [fp, #-16]
   140f0:	add	r3, r3, #52	; 0x34
   140f4:	add	r3, r3, #8
   140f8:	str	r3, [fp, #-8]
   140fc:	ldr	r3, [fp, #-16]
   14100:	ldr	r2, [r3, #60]	; 0x3c
   14104:	ldr	r3, [fp, #-16]
   14108:	ldr	r3, [r3, #28]
   1410c:	add	r2, r2, r3
   14110:	ldr	r3, [fp, #-16]
   14114:	str	r2, [r3, #16]
   14118:	ldr	r3, [fp, #-8]
   1411c:	ldr	r2, [r3, #4]
   14120:	ldr	r3, [fp, #-16]
   14124:	ldr	r3, [r3, #28]
   14128:	sub	r2, r2, r3
   1412c:	ldr	r3, [fp, #-16]
   14130:	str	r2, [r3, #24]
   14134:	ldr	r3, [fp, #-16]
   14138:	ldr	r3, [r3, #24]
   1413c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14140:	cmp	r2, r3
   14144:	bcs	14154 <flatcc_builder_default_alloc@@Base+0x250>
   14148:	ldr	r3, [fp, #-16]
   1414c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14150:	str	r2, [r3, #24]
   14154:	ldr	r3, [fp, #-16]
   14158:	ldr	r3, [r3, #32]
   1415c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14160:	str	r2, [r3, #4]
   14164:	nop	{0}
   14168:	add	sp, fp, #0
   1416c:	pop	{fp}		; (ldr fp, [sp], #4)
   14170:	bx	lr
   14174:	str	r4, [sp, #-12]!
   14178:	str	fp, [sp, #4]
   1417c:	str	lr, [sp, #8]
   14180:	add	fp, sp, #8
   14184:	sub	sp, sp, #36	; 0x24
   14188:	str	r0, [fp, #-24]	; 0xffffffe8
   1418c:	str	r1, [fp, #-28]	; 0xffffffe4
   14190:	str	r2, [fp, #-32]	; 0xffffffe0
   14194:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14198:	add	r3, r3, #52	; 0x34
   1419c:	add	r3, r3, #8
   141a0:	str	r3, [fp, #-16]
   141a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141a8:	ldr	r4, [r3, #48]	; 0x30
   141ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141b0:	ldr	r0, [r3, #40]	; 0x28
   141b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141b8:	ldr	r2, [r3, #28]
   141bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   141c0:	add	r2, r2, r3
   141c4:	mov	r3, #1
   141c8:	str	r3, [sp]
   141cc:	mov	r3, #1
   141d0:	ldr	r1, [fp, #-16]
   141d4:	blx	r4
   141d8:	mov	r3, r0
   141dc:	cmp	r3, #0
   141e0:	beq	141ec <flatcc_builder_default_alloc@@Base+0x2e8>
   141e4:	mvn	r3, #0
   141e8:	b	141fc <flatcc_builder_default_alloc@@Base+0x2f8>
   141ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   141f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141f4:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   141f8:	mov	r3, #0
   141fc:	mov	r0, r3
   14200:	sub	sp, fp, #8
   14204:	ldr	r4, [sp]
   14208:	ldr	fp, [sp, #4]
   1420c:	add	sp, sp, #8
   14210:	pop	{pc}		; (ldr pc, [sp], #4)
   14214:	str	fp, [sp, #-8]!
   14218:	str	lr, [sp, #4]
   1421c:	add	fp, sp, #4
   14220:	sub	sp, sp, #16
   14224:	str	r0, [fp, #-16]
   14228:	str	r1, [fp, #-20]	; 0xffffffec
   1422c:	ldr	r3, [fp, #-16]
   14230:	ldr	r3, [r3, #20]
   14234:	str	r3, [fp, #-8]
   14238:	ldr	r3, [fp, #-16]
   1423c:	ldr	r2, [r3, #20]
   14240:	ldr	r3, [fp, #-20]	; 0xffffffec
   14244:	add	r2, r2, r3
   14248:	ldr	r3, [fp, #-16]
   1424c:	str	r2, [r3, #20]
   14250:	ldr	r3, [fp, #-16]
   14254:	ldr	r2, [r3, #20]
   14258:	ldr	r3, [fp, #-16]
   1425c:	ldr	r3, [r3, #24]
   14260:	cmp	r2, r3
   14264:	bcc	14298 <flatcc_builder_default_alloc@@Base+0x394>
   14268:	ldr	r3, [fp, #-16]
   1426c:	ldr	r3, [r3, #20]
   14270:	add	r3, r3, #1
   14274:	mvn	r2, #3
   14278:	mov	r1, r3
   1427c:	ldr	r0, [fp, #-16]
   14280:	bl	14174 <flatcc_builder_default_alloc@@Base+0x270>
   14284:	mov	r3, r0
   14288:	cmp	r3, #0
   1428c:	beq	14298 <flatcc_builder_default_alloc@@Base+0x394>
   14290:	mov	r3, #0
   14294:	b	142a8 <flatcc_builder_default_alloc@@Base+0x3a4>
   14298:	ldr	r3, [fp, #-16]
   1429c:	ldr	r2, [r3, #16]
   142a0:	ldr	r3, [fp, #-8]
   142a4:	add	r3, r2, r3
   142a8:	mov	r0, r3
   142ac:	sub	sp, fp, #4
   142b0:	ldr	fp, [sp]
   142b4:	add	sp, sp, #4
   142b8:	pop	{pc}		; (ldr pc, [sp], #4)
   142bc:	str	fp, [sp, #-8]!
   142c0:	str	lr, [sp, #4]
   142c4:	add	fp, sp, #4
   142c8:	sub	sp, sp, #8
   142cc:	str	r0, [fp, #-8]
   142d0:	str	r1, [fp, #-12]
   142d4:	ldr	r3, [fp, #-8]
   142d8:	ldr	r2, [r3, #20]
   142dc:	ldr	r3, [fp, #-12]
   142e0:	sub	r2, r2, r3
   142e4:	ldr	r3, [fp, #-8]
   142e8:	str	r2, [r3, #20]
   142ec:	ldr	r3, [fp, #-8]
   142f0:	ldr	r2, [r3, #16]
   142f4:	ldr	r3, [fp, #-8]
   142f8:	ldr	r3, [r3, #20]
   142fc:	add	r3, r2, r3
   14300:	ldr	r2, [fp, #-12]
   14304:	mov	r1, #0
   14308:	mov	r0, r3
   1430c:	bl	122f4 <memset@plt>
   14310:	nop	{0}
   14314:	sub	sp, fp, #4
   14318:	ldr	fp, [sp]
   1431c:	add	sp, sp, #4
   14320:	pop	{pc}		; (ldr pc, [sp], #4)
   14324:	str	fp, [sp, #-8]!
   14328:	str	lr, [sp, #4]
   1432c:	add	fp, sp, #4
   14330:	sub	sp, sp, #24
   14334:	str	r0, [fp, #-16]
   14338:	str	r1, [fp, #-20]	; 0xffffffec
   1433c:	str	r2, [fp, #-24]	; 0xffffffe8
   14340:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14344:	ldr	r0, [fp, #-16]
   14348:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   1434c:	str	r0, [fp, #-8]
   14350:	ldr	r3, [fp, #-8]
   14354:	cmp	r3, #0
   14358:	bne	14364 <flatcc_builder_default_alloc@@Base+0x460>
   1435c:	mov	r3, #0
   14360:	b	14378 <flatcc_builder_default_alloc@@Base+0x474>
   14364:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14368:	ldr	r1, [fp, #-20]	; 0xffffffec
   1436c:	ldr	r0, [fp, #-8]
   14370:	bl	12294 <memcpy@plt>
   14374:	ldr	r3, [fp, #-8]
   14378:	mov	r0, r3
   1437c:	sub	sp, fp, #4
   14380:	ldr	fp, [sp]
   14384:	add	sp, sp, #4
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	str	fp, [sp, #-8]!
   14390:	str	lr, [sp, #4]
   14394:	add	fp, sp, #4
   14398:	sub	sp, sp, #24
   1439c:	str	r0, [fp, #-16]
   143a0:	str	r1, [fp, #-20]	; 0xffffffec
   143a4:	mov	r1, r2
   143a8:	mov	r2, r3
   143ac:	mov	r3, r1
   143b0:	strh	r3, [fp, #-22]	; 0xffffffea
   143b4:	mov	r3, r2
   143b8:	strh	r3, [fp, #-24]	; 0xffffffe8
   143bc:	ldr	r3, [fp, #-16]
   143c0:	ldr	r2, [r3, #20]
   143c4:	ldrh	r3, [fp, #-22]	; 0xffffffea
   143c8:	add	r3, r2, r3
   143cc:	sub	r3, r3, #1
   143d0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   143d4:	rsb	r2, r2, #0
   143d8:	and	r3, r3, r2
   143dc:	str	r3, [fp, #-8]
   143e0:	ldr	r2, [fp, #-8]
   143e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143e8:	add	r2, r2, r3
   143ec:	ldr	r3, [fp, #-16]
   143f0:	str	r2, [r3, #20]
   143f4:	ldr	r3, [fp, #-16]
   143f8:	ldr	r2, [r3, #20]
   143fc:	ldr	r3, [fp, #-16]
   14400:	ldr	r3, [r3, #24]
   14404:	cmp	r2, r3
   14408:	bcc	1443c <flatcc_builder_default_alloc@@Base+0x538>
   1440c:	ldr	r3, [fp, #-16]
   14410:	ldr	r3, [r3, #20]
   14414:	add	r3, r3, #1
   14418:	movw	r2, #65532	; 0xfffc
   1441c:	mov	r1, r3
   14420:	ldr	r0, [fp, #-16]
   14424:	bl	14174 <flatcc_builder_default_alloc@@Base+0x270>
   14428:	mov	r3, r0
   1442c:	cmp	r3, #0
   14430:	beq	1443c <flatcc_builder_default_alloc@@Base+0x538>
   14434:	mov	r3, #0
   14438:	b	1449c <flatcc_builder_default_alloc@@Base+0x598>
   1443c:	ldr	r3, [fp, #-8]
   14440:	uxth	r2, r3
   14444:	ldr	r3, [fp, #-16]
   14448:	ldr	r1, [r3, #4]
   1444c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   14450:	lsl	r3, r3, #1
   14454:	add	r3, r1, r3
   14458:	add	r2, r2, #4
   1445c:	uxth	r2, r2
   14460:	strh	r2, [r3]
   14464:	ldr	r3, [fp, #-16]
   14468:	ldrh	r3, [r3, #8]
   1446c:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   14470:	cmp	r2, r3
   14474:	bcc	1448c <flatcc_builder_default_alloc@@Base+0x588>
   14478:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   1447c:	add	r3, r3, #1
   14480:	uxth	r2, r3
   14484:	ldr	r3, [fp, #-16]
   14488:	strh	r2, [r3, #8]
   1448c:	ldr	r3, [fp, #-16]
   14490:	ldr	r2, [r3, #16]
   14494:	ldr	r3, [fp, #-8]
   14498:	add	r3, r2, r3
   1449c:	mov	r0, r3
   144a0:	sub	sp, fp, #4
   144a4:	ldr	fp, [sp]
   144a8:	add	sp, sp, #4
   144ac:	pop	{pc}		; (ldr pc, [sp], #4)
   144b0:	str	fp, [sp, #-8]!
   144b4:	str	lr, [sp, #4]
   144b8:	add	fp, sp, #4
   144bc:	sub	sp, sp, #16
   144c0:	str	r0, [fp, #-16]
   144c4:	mov	r3, r1
   144c8:	strh	r3, [fp, #-18]	; 0xffffffee
   144cc:	ldr	r3, [fp, #-16]
   144d0:	ldr	r3, [r3, #20]
   144d4:	add	r3, r3, #3
   144d8:	bic	r3, r3, #3
   144dc:	str	r3, [fp, #-8]
   144e0:	ldr	r3, [fp, #-8]
   144e4:	add	r2, r3, #4
   144e8:	ldr	r3, [fp, #-16]
   144ec:	str	r2, [r3, #20]
   144f0:	ldr	r3, [fp, #-16]
   144f4:	ldr	r2, [r3, #20]
   144f8:	ldr	r3, [fp, #-16]
   144fc:	ldr	r3, [r3, #24]
   14500:	cmp	r2, r3
   14504:	bls	14534 <flatcc_builder_default_alloc@@Base+0x630>
   14508:	ldr	r3, [fp, #-16]
   1450c:	ldr	r3, [r3, #20]
   14510:	movw	r2, #65532	; 0xfffc
   14514:	mov	r1, r3
   14518:	ldr	r0, [fp, #-16]
   1451c:	bl	14174 <flatcc_builder_default_alloc@@Base+0x270>
   14520:	mov	r3, r0
   14524:	cmp	r3, #0
   14528:	beq	14534 <flatcc_builder_default_alloc@@Base+0x630>
   1452c:	mov	r3, #0
   14530:	b	145b4 <flatcc_builder_default_alloc@@Base+0x6b0>
   14534:	ldr	r3, [fp, #-8]
   14538:	uxth	r2, r3
   1453c:	ldr	r3, [fp, #-16]
   14540:	ldr	r1, [r3, #4]
   14544:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14548:	lsl	r3, r3, #1
   1454c:	add	r3, r1, r3
   14550:	add	r2, r2, #4
   14554:	uxth	r2, r2
   14558:	strh	r2, [r3]
   1455c:	ldr	r3, [fp, #-16]
   14560:	ldrh	r3, [r3, #8]
   14564:	ldrh	r2, [fp, #-18]	; 0xffffffee
   14568:	cmp	r2, r3
   1456c:	bcc	14584 <flatcc_builder_default_alloc@@Base+0x680>
   14570:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14574:	add	r3, r3, #1
   14578:	uxth	r2, r3
   1457c:	ldr	r3, [fp, #-16]
   14580:	strh	r2, [r3, #8]
   14584:	ldr	r3, [fp, #-16]
   14588:	ldr	r3, [r3]
   1458c:	add	r1, r3, #2
   14590:	ldr	r2, [fp, #-16]
   14594:	str	r1, [r2]
   14598:	ldr	r2, [fp, #-8]
   1459c:	uxth	r2, r2
   145a0:	strh	r2, [r3]
   145a4:	ldr	r3, [fp, #-16]
   145a8:	ldr	r2, [r3, #16]
   145ac:	ldr	r3, [fp, #-8]
   145b0:	add	r3, r2, r3
   145b4:	mov	r0, r3
   145b8:	sub	sp, fp, #4
   145bc:	ldr	fp, [sp]
   145c0:	add	sp, sp, #4
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	str	r4, [sp, #-12]!
   145cc:	str	fp, [sp, #4]
   145d0:	str	lr, [sp, #8]
   145d4:	add	fp, sp, #8
   145d8:	sub	sp, sp, #36	; 0x24
   145dc:	str	r0, [fp, #-24]	; 0xffffffe8
   145e0:	str	r1, [fp, #-28]	; 0xffffffe4
   145e4:	str	r2, [fp, #-32]	; 0xffffffe0
   145e8:	str	r3, [fp, #-36]	; 0xffffffdc
   145ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145f0:	add	r2, r3, #52	; 0x34
   145f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   145f8:	lsl	r3, r3, #3
   145fc:	add	r3, r2, r3
   14600:	str	r3, [fp, #-16]
   14604:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14608:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1460c:	add	r2, r2, r3
   14610:	ldr	r3, [fp, #-16]
   14614:	ldr	r3, [r3, #4]
   14618:	cmp	r2, r3
   1461c:	bls	1467c <flatcc_builder_default_alloc@@Base+0x778>
   14620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14624:	ldr	r4, [r3, #48]	; 0x30
   14628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1462c:	ldr	r0, [r3, #40]	; 0x28
   14630:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14634:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14638:	add	r2, r2, r3
   1463c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14640:	str	r3, [sp]
   14644:	ldr	r3, [fp, #4]
   14648:	ldr	r1, [fp, #-16]
   1464c:	blx	r4
   14650:	mov	r3, r0
   14654:	cmp	r3, #0
   14658:	beq	1467c <flatcc_builder_default_alloc@@Base+0x778>
   1465c:	ldr	r3, [pc, #68]	; 146a8 <flatcc_builder_default_alloc@@Base+0x7a4>
   14660:	add	r3, pc, r3
   14664:	mov	r2, #308	; 0x134
   14668:	ldr	r1, [pc, #60]	; 146ac <flatcc_builder_default_alloc@@Base+0x7a8>
   1466c:	add	r1, pc, r1
   14670:	ldr	r0, [pc, #56]	; 146b0 <flatcc_builder_default_alloc@@Base+0x7ac>
   14674:	add	r0, pc, r0
   14678:	bl	12324 <__assert_fail@plt>
   1467c:	ldr	r3, [fp, #-16]
   14680:	ldr	r3, [r3]
   14684:	mov	r2, r3
   14688:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1468c:	add	r3, r2, r3
   14690:	mov	r0, r3
   14694:	sub	sp, fp, #8
   14698:	ldr	r4, [sp]
   1469c:	ldr	fp, [sp, #4]
   146a0:	add	sp, sp, #8
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	andeq	r9, r0, r8, asr r8
   146ac:	andeq	r9, r0, r8, lsl r4
   146b0:	andeq	r9, r0, r0, ror r4
   146b4:	str	fp, [sp, #-8]!
   146b8:	str	lr, [sp, #4]
   146bc:	add	fp, sp, #4
   146c0:	sub	sp, sp, #24
   146c4:	str	r0, [fp, #-16]
   146c8:	str	r1, [fp, #-20]	; 0xffffffec
   146cc:	ldr	r3, [fp, #-16]
   146d0:	ldr	r3, [r3, #32]
   146d4:	ldr	r2, [r3, #16]
   146d8:	ldr	r3, [fp, #-16]
   146dc:	ldr	r3, [r3, #32]
   146e0:	ldrh	r3, [r3, #28]
   146e4:	lsl	r3, r3, #1
   146e8:	add	r3, r2, r3
   146ec:	str	r3, [fp, #-8]
   146f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f4:	add	r3, r3, #2
   146f8:	lsl	r3, r3, #1
   146fc:	str	r3, [fp, #-12]
   14700:	mov	r3, #1
   14704:	str	r3, [sp]
   14708:	ldr	r3, [fp, #-12]
   1470c:	ldr	r2, [fp, #-8]
   14710:	mov	r1, #0
   14714:	ldr	r0, [fp, #-16]
   14718:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   1471c:	mov	r2, r0
   14720:	ldr	r3, [fp, #-16]
   14724:	str	r2, [r3, #4]
   14728:	ldr	r3, [fp, #-16]
   1472c:	ldr	r3, [r3, #4]
   14730:	cmp	r3, #0
   14734:	bne	14740 <flatcc_builder_default_alloc@@Base+0x83c>
   14738:	mvn	r3, #0
   1473c:	b	147b8 <flatcc_builder_default_alloc@@Base+0x8b4>
   14740:	ldr	r3, [fp, #-16]
   14744:	ldr	r3, [r3, #4]
   14748:	add	r2, r3, #4
   1474c:	ldr	r3, [fp, #-16]
   14750:	str	r2, [r3, #4]
   14754:	ldr	r3, [fp, #-16]
   14758:	ldr	r3, [r3, #32]
   1475c:	ldr	r3, [r3, #20]
   14760:	str	r3, [fp, #-8]
   14764:	ldr	r3, [fp, #-20]	; 0xffffffec
   14768:	lsl	r3, r3, #1
   1476c:	add	r3, r3, #1
   14770:	str	r3, [fp, #-12]
   14774:	mov	r3, #0
   14778:	str	r3, [sp]
   1477c:	ldr	r3, [fp, #-12]
   14780:	ldr	r2, [fp, #-8]
   14784:	mov	r1, #3
   14788:	ldr	r0, [fp, #-16]
   1478c:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   14790:	mov	r2, r0
   14794:	ldr	r3, [fp, #-16]
   14798:	str	r2, [r3]
   1479c:	ldr	r3, [fp, #-16]
   147a0:	ldr	r3, [r3]
   147a4:	cmp	r3, #0
   147a8:	bne	147b4 <flatcc_builder_default_alloc@@Base+0x8b0>
   147ac:	mvn	r3, #0
   147b0:	b	147b8 <flatcc_builder_default_alloc@@Base+0x8b4>
   147b4:	mov	r3, #0
   147b8:	mov	r0, r3
   147bc:	sub	sp, fp, #4
   147c0:	ldr	fp, [sp]
   147c4:	add	sp, sp, #4
   147c8:	pop	{pc}		; (ldr pc, [sp], #4)
   147cc:	str	r4, [sp, #-12]!
   147d0:	str	fp, [sp, #4]
   147d4:	str	lr, [sp, #8]
   147d8:	add	fp, sp, #8
   147dc:	sub	sp, sp, #36	; 0x24
   147e0:	str	r0, [fp, #-32]	; 0xffffffe0
   147e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   147e8:	add	r3, r3, #52	; 0x34
   147ec:	add	r3, r3, #40	; 0x28
   147f0:	str	r3, [fp, #-24]	; 0xffffffe8
   147f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   147f8:	ldr	r3, [r3, #124]	; 0x7c
   147fc:	cmp	r3, #0
   14800:	beq	14824 <flatcc_builder_default_alloc@@Base+0x920>
   14804:	ldr	r3, [pc, #292]	; 14930 <flatcc_builder_default_alloc@@Base+0xa2c>
   14808:	add	r3, pc, r3
   1480c:	movw	r2, #342	; 0x156
   14810:	ldr	r1, [pc, #284]	; 14934 <flatcc_builder_default_alloc@@Base+0xa30>
   14814:	add	r1, pc, r1
   14818:	ldr	r0, [pc, #280]	; 14938 <flatcc_builder_default_alloc@@Base+0xa34>
   1481c:	add	r0, pc, r0
   14820:	bl	12324 <__assert_fail@plt>
   14824:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14828:	ldr	r2, [r3, #124]	; 0x7c
   1482c:	mov	r3, #0
   14830:	str	r3, [sp]
   14834:	mov	r3, #16
   14838:	mov	r1, #6
   1483c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14840:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   14844:	mov	r3, r0
   14848:	cmp	r3, #0
   1484c:	bne	14858 <flatcc_builder_default_alloc@@Base+0x954>
   14850:	mvn	r3, #0
   14854:	b	14918 <flatcc_builder_default_alloc@@Base+0xa14>
   14858:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1485c:	mov	r2, #16
   14860:	str	r2, [r3, #124]	; 0x7c
   14864:	mov	r3, #256	; 0x100
   14868:	str	r3, [fp, #-16]
   1486c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14870:	ldr	r4, [r3, #48]	; 0x30
   14874:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14878:	ldr	r0, [r3, #40]	; 0x28
   1487c:	mov	r3, #5
   14880:	str	r3, [sp]
   14884:	mov	r3, #1
   14888:	ldr	r2, [fp, #-16]
   1488c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14890:	blx	r4
   14894:	mov	r3, r0
   14898:	cmp	r3, #0
   1489c:	beq	148b4 <flatcc_builder_default_alloc@@Base+0x9b0>
   148a0:	mvn	r3, #0
   148a4:	b	14918 <flatcc_builder_default_alloc@@Base+0xa14>
   148a8:	ldr	r3, [fp, #-16]
   148ac:	lsl	r3, r3, #1
   148b0:	str	r3, [fp, #-16]
   148b4:	ldr	r3, [fp, #-16]
   148b8:	lsl	r2, r3, #1
   148bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148c0:	ldr	r3, [r3, #4]
   148c4:	cmp	r2, r3
   148c8:	bls	148a8 <flatcc_builder_default_alloc@@Base+0x9a4>
   148cc:	ldr	r3, [fp, #-16]
   148d0:	lsr	r3, r3, #2
   148d4:	str	r3, [fp, #-16]
   148d8:	mov	r3, #0
   148dc:	str	r3, [fp, #-20]	; 0xffffffec
   148e0:	b	148f0 <flatcc_builder_default_alloc@@Base+0x9ec>
   148e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148e8:	add	r3, r3, #1
   148ec:	str	r3, [fp, #-20]	; 0xffffffec
   148f0:	mov	r2, #1
   148f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148f8:	lsl	r3, r2, r3
   148fc:	ldr	r2, [fp, #-16]
   14900:	cmp	r2, r3
   14904:	bhi	148e4 <flatcc_builder_default_alloc@@Base+0x9e0>
   14908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1490c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14910:	str	r2, [r3, #116]	; 0x74
   14914:	mov	r3, #0
   14918:	mov	r0, r3
   1491c:	sub	sp, fp, #8
   14920:	ldr	r4, [sp]
   14924:	ldr	fp, [sp, #4]
   14928:	add	sp, sp, #8
   1492c:	pop	{pc}		; (ldr pc, [sp], #4)
   14930:	andeq	r9, r0, r4, lsr #13
   14934:	andeq	r9, r0, r0, ror r2
   14938:	andeq	r9, r0, ip, asr #5
   1493c:	str	fp, [sp, #-8]!
   14940:	str	lr, [sp, #4]
   14944:	add	fp, sp, #4
   14948:	sub	sp, sp, #16
   1494c:	str	r0, [fp, #-16]
   14950:	str	r1, [fp, #-20]	; 0xffffffec
   14954:	ldr	r3, [fp, #-16]
   14958:	ldr	r3, [r3, #116]	; 0x74
   1495c:	cmp	r3, #0
   14960:	bne	14980 <flatcc_builder_default_alloc@@Base+0xa7c>
   14964:	ldr	r0, [fp, #-16]
   14968:	bl	147cc <flatcc_builder_default_alloc@@Base+0x8c8>
   1496c:	mov	r3, r0
   14970:	cmp	r3, #0
   14974:	beq	14980 <flatcc_builder_default_alloc@@Base+0xa7c>
   14978:	mov	r3, #0
   1497c:	b	149ac <flatcc_builder_default_alloc@@Base+0xaa8>
   14980:	ldr	r3, [fp, #-16]
   14984:	ldr	r3, [r3, #92]	; 0x5c
   14988:	str	r3, [fp, #-8]
   1498c:	ldr	r3, [fp, #-16]
   14990:	ldr	r3, [r3, #116]	; 0x74
   14994:	rsb	r3, r3, #32
   14998:	ldr	r2, [fp, #-20]	; 0xffffffec
   1499c:	lsr	r3, r2, r3
   149a0:	lsl	r3, r3, #2
   149a4:	ldr	r2, [fp, #-8]
   149a8:	add	r3, r2, r3
   149ac:	mov	r0, r3
   149b0:	sub	sp, fp, #4
   149b4:	ldr	fp, [sp]
   149b8:	add	sp, sp, #4
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)

000149c0 <flatcc_builder_flush_vtable_cache@@Base>:
   149c0:	str	fp, [sp, #-8]!
   149c4:	str	lr, [sp, #4]
   149c8:	add	fp, sp, #4
   149cc:	sub	sp, sp, #16
   149d0:	str	r0, [fp, #-16]
   149d4:	ldr	r3, [fp, #-16]
   149d8:	add	r3, r3, #52	; 0x34
   149dc:	add	r3, r3, #40	; 0x28
   149e0:	str	r3, [fp, #-8]
   149e4:	ldr	r3, [fp, #-16]
   149e8:	ldr	r3, [r3, #116]	; 0x74
   149ec:	cmp	r3, #0
   149f0:	beq	14a2c <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   149f4:	ldr	r3, [fp, #-8]
   149f8:	ldr	r0, [r3]
   149fc:	ldr	r3, [fp, #-8]
   14a00:	ldr	r3, [r3, #4]
   14a04:	mov	r2, r3
   14a08:	mov	r1, #0
   14a0c:	bl	122f4 <memset@plt>
   14a10:	ldr	r3, [fp, #-16]
   14a14:	mov	r2, #16
   14a18:	str	r2, [r3, #124]	; 0x7c
   14a1c:	ldr	r3, [fp, #-16]
   14a20:	mov	r2, #0
   14a24:	str	r2, [r3, #120]	; 0x78
   14a28:	b	14a30 <flatcc_builder_flush_vtable_cache@@Base+0x70>
   14a2c:	nop	{0}
   14a30:	sub	sp, fp, #4
   14a34:	ldr	fp, [sp]
   14a38:	add	sp, sp, #4
   14a3c:	pop	{pc}		; (ldr pc, [sp], #4)

00014a40 <flatcc_builder_custom_init@@Base>:
   14a40:	str	r4, [sp, #-12]!
   14a44:	str	fp, [sp, #4]
   14a48:	str	lr, [sp, #8]
   14a4c:	add	fp, sp, #8
   14a50:	sub	sp, sp, #20
   14a54:	str	r0, [fp, #-16]
   14a58:	str	r1, [fp, #-20]	; 0xffffffec
   14a5c:	str	r2, [fp, #-24]	; 0xffffffe8
   14a60:	str	r3, [fp, #-28]	; 0xffffffe4
   14a64:	ldr	r4, [pc, #164]	; 14b10 <flatcc_builder_custom_init@@Base+0xd0>
   14a68:	add	r4, pc, r4
   14a6c:	mov	r2, #232	; 0xe8
   14a70:	mov	r1, #0
   14a74:	ldr	r0, [fp, #-16]
   14a78:	bl	122f4 <memset@plt>
   14a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a80:	cmp	r3, #0
   14a84:	bne	14aac <flatcc_builder_custom_init@@Base+0x6c>
   14a88:	ldr	r3, [fp, #-16]
   14a8c:	mov	r2, #1
   14a90:	str	r2, [r3, #184]	; 0xb8
   14a94:	ldr	r3, [pc, #120]	; 14b14 <flatcc_builder_custom_init@@Base+0xd4>
   14a98:	ldr	r3, [r4, r3]
   14a9c:	str	r3, [fp, #-20]	; 0xffffffec
   14aa0:	ldr	r3, [fp, #-16]
   14aa4:	add	r3, r3, #188	; 0xbc
   14aa8:	str	r3, [fp, #-24]	; 0xffffffe8
   14aac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ab0:	cmp	r3, #0
   14ab4:	bne	14ac4 <flatcc_builder_custom_init@@Base+0x84>
   14ab8:	ldr	r3, [pc, #88]	; 14b18 <flatcc_builder_custom_init@@Base+0xd8>
   14abc:	ldr	r3, [r4, r3]
   14ac0:	str	r3, [fp, #-28]	; 0xffffffe4
   14ac4:	ldr	r3, [fp, #-16]
   14ac8:	ldr	r2, [fp, #4]
   14acc:	str	r2, [r3, #40]	; 0x28
   14ad0:	ldr	r3, [fp, #-16]
   14ad4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14ad8:	str	r2, [r3, #48]	; 0x30
   14adc:	ldr	r3, [fp, #-16]
   14ae0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14ae4:	str	r2, [r3, #36]	; 0x24
   14ae8:	ldr	r3, [fp, #-16]
   14aec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14af0:	str	r2, [r3, #44]	; 0x2c
   14af4:	mov	r3, #0
   14af8:	mov	r0, r3
   14afc:	sub	sp, fp, #8
   14b00:	ldr	r4, [sp]
   14b04:	ldr	fp, [sp, #4]
   14b08:	add	sp, sp, #8
   14b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b10:	muleq	r1, r0, r5
   14b14:	andeq	r0, r0, r0, asr r0
   14b18:	andeq	r0, r0, ip, asr #32

00014b1c <flatcc_builder_init@@Base>:
   14b1c:	str	fp, [sp, #-8]!
   14b20:	str	lr, [sp, #4]
   14b24:	add	fp, sp, #4
   14b28:	sub	sp, sp, #16
   14b2c:	str	r0, [fp, #-8]
   14b30:	mov	r3, #0
   14b34:	str	r3, [sp]
   14b38:	mov	r3, #0
   14b3c:	mov	r2, #0
   14b40:	mov	r1, #0
   14b44:	ldr	r0, [fp, #-8]
   14b48:	bl	14a40 <flatcc_builder_custom_init@@Base>
   14b4c:	mov	r3, r0
   14b50:	mov	r0, r3
   14b54:	sub	sp, fp, #4
   14b58:	ldr	fp, [sp]
   14b5c:	add	sp, sp, #4
   14b60:	pop	{pc}		; (ldr pc, [sp], #4)

00014b64 <flatcc_builder_custom_reset@@Base>:
   14b64:	str	r4, [sp, #-12]!
   14b68:	str	fp, [sp, #4]
   14b6c:	str	lr, [sp, #8]
   14b70:	add	fp, sp, #8
   14b74:	sub	sp, sp, #36	; 0x24
   14b78:	str	r0, [fp, #-24]	; 0xffffffe8
   14b7c:	str	r1, [fp, #-28]	; 0xffffffe4
   14b80:	str	r2, [fp, #-32]	; 0xffffffe0
   14b84:	mov	r3, #0
   14b88:	str	r3, [fp, #-16]
   14b8c:	b	14c68 <flatcc_builder_custom_reset@@Base+0x104>
   14b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b94:	add	r2, r3, #52	; 0x34
   14b98:	ldr	r3, [fp, #-16]
   14b9c:	lsl	r3, r3, #3
   14ba0:	add	r3, r2, r3
   14ba4:	str	r3, [fp, #-20]	; 0xffffffec
   14ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bac:	ldr	r3, [r3]
   14bb0:	cmp	r3, #0
   14bb4:	beq	14c2c <flatcc_builder_custom_reset@@Base+0xc8>
   14bb8:	ldr	r3, [fp, #-16]
   14bbc:	cmp	r3, #5
   14bc0:	beq	14c0c <flatcc_builder_custom_reset@@Base+0xa8>
   14bc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14bc8:	cmp	r3, #0
   14bcc:	beq	14c0c <flatcc_builder_custom_reset@@Base+0xa8>
   14bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bd4:	ldr	r4, [r3, #48]	; 0x30
   14bd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bdc:	ldr	r0, [r3, #40]	; 0x28
   14be0:	ldr	r3, [fp, #-16]
   14be4:	str	r3, [sp]
   14be8:	mov	r3, #1
   14bec:	mov	r2, #1
   14bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bf4:	blx	r4
   14bf8:	mov	r3, r0
   14bfc:	cmp	r3, #0
   14c00:	beq	14c0c <flatcc_builder_custom_reset@@Base+0xa8>
   14c04:	mvn	r3, #0
   14c08:	b	14d98 <flatcc_builder_custom_reset@@Base+0x234>
   14c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c10:	ldr	r0, [r3]
   14c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c18:	ldr	r3, [r3, #4]
   14c1c:	mov	r2, r3
   14c20:	mov	r1, #0
   14c24:	bl	122f4 <memset@plt>
   14c28:	b	14c5c <flatcc_builder_custom_reset@@Base+0xf8>
   14c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c30:	ldr	r3, [r3, #4]
   14c34:	cmp	r3, #0
   14c38:	beq	14c5c <flatcc_builder_custom_reset@@Base+0xf8>
   14c3c:	ldr	r3, [pc, #364]	; 14db0 <flatcc_builder_custom_reset@@Base+0x24c>
   14c40:	add	r3, pc, r3
   14c44:	movw	r2, #434	; 0x1b2
   14c48:	ldr	r1, [pc, #356]	; 14db4 <flatcc_builder_custom_reset@@Base+0x250>
   14c4c:	add	r1, pc, r1
   14c50:	ldr	r0, [pc, #352]	; 14db8 <flatcc_builder_custom_reset@@Base+0x254>
   14c54:	add	r0, pc, r0
   14c58:	bl	12324 <__assert_fail@plt>
   14c5c:	ldr	r3, [fp, #-16]
   14c60:	add	r3, r3, #1
   14c64:	str	r3, [fp, #-16]
   14c68:	ldr	r3, [fp, #-16]
   14c6c:	cmp	r3, #7
   14c70:	ble	14b90 <flatcc_builder_custom_reset@@Base+0x2c>
   14c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c78:	mov	r2, #0
   14c7c:	str	r2, [r3, #120]	; 0x78
   14c80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c84:	ldr	r3, [r3, #124]	; 0x7c
   14c88:	cmp	r3, #0
   14c8c:	beq	14c9c <flatcc_builder_custom_reset@@Base+0x138>
   14c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c94:	mov	r2, #16
   14c98:	str	r2, [r3, #124]	; 0x7c
   14c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ca0:	mov	r2, #0
   14ca4:	strh	r2, [r3, #128]	; 0x80
   14ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cac:	mov	r2, #0
   14cb0:	str	r2, [r3, #136]	; 0x88
   14cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cb8:	mov	r2, #0
   14cbc:	str	r2, [r3, #140]	; 0x8c
   14cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cc4:	mov	r2, #0
   14cc8:	str	r2, [r3, #156]	; 0x9c
   14ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cd0:	mov	r2, #0
   14cd4:	str	r2, [r3, #160]	; 0xa0
   14cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cdc:	mov	r2, #0
   14ce0:	str	r2, [r3, #20]
   14ce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ce8:	mov	r2, #0
   14cec:	str	r2, [r3, #24]
   14cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cf4:	mov	r2, #0
   14cf8:	str	r2, [r3, #148]	; 0x94
   14cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d00:	mov	r2, #0
   14d04:	str	r2, [r3, #152]	; 0x98
   14d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d0c:	ldr	r2, [r3, #60]	; 0x3c
   14d10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d14:	str	r2, [r3, #16]
   14d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d1c:	ldr	r2, [r3, #76]	; 0x4c
   14d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d24:	str	r2, [r3]
   14d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d2c:	ldr	r2, [r3, #52]	; 0x34
   14d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d34:	str	r2, [r3, #4]
   14d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d3c:	mov	r2, #0
   14d40:	str	r2, [r3, #32]
   14d44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d48:	cmp	r3, #0
   14d4c:	beq	14d74 <flatcc_builder_custom_reset@@Base+0x210>
   14d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d54:	mov	r2, #0
   14d58:	str	r2, [r3, #172]	; 0xac
   14d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d60:	mov	r2, #0
   14d64:	str	r2, [r3, #176]	; 0xb0
   14d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d6c:	mov	r2, #0
   14d70:	str	r2, [r3, #180]	; 0xb4
   14d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d78:	ldr	r3, [r3, #184]	; 0xb8
   14d7c:	cmp	r3, #0
   14d80:	beq	14d94 <flatcc_builder_custom_reset@@Base+0x230>
   14d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d88:	add	r3, r3, #188	; 0xbc
   14d8c:	mov	r0, r3
   14d90:	bl	1a9f8 <flatcc_emitter_reset@@Base>
   14d94:	mov	r3, #0
   14d98:	mov	r0, r3
   14d9c:	sub	sp, fp, #8
   14da0:	ldr	r4, [sp]
   14da4:	ldr	fp, [sp, #4]
   14da8:	add	sp, sp, #8
   14dac:	pop	{pc}		; (ldr pc, [sp], #4)
   14db0:	andeq	r9, r0, r8, lsl #5
   14db4:	andeq	r8, r0, r8, lsr lr
   14db8:	andeq	r8, r0, r4, lsr #29

00014dbc <flatcc_builder_reset@@Base>:
   14dbc:	str	fp, [sp, #-8]!
   14dc0:	str	lr, [sp, #4]
   14dc4:	add	fp, sp, #4
   14dc8:	sub	sp, sp, #8
   14dcc:	str	r0, [fp, #-8]
   14dd0:	mov	r2, #0
   14dd4:	mov	r1, #0
   14dd8:	ldr	r0, [fp, #-8]
   14ddc:	bl	14b64 <flatcc_builder_custom_reset@@Base>
   14de0:	mov	r3, r0
   14de4:	mov	r0, r3
   14de8:	sub	sp, fp, #4
   14dec:	ldr	fp, [sp]
   14df0:	add	sp, sp, #4
   14df4:	pop	{pc}		; (ldr pc, [sp], #4)

00014df8 <flatcc_builder_clear@@Base>:
   14df8:	str	r4, [sp, #-12]!
   14dfc:	str	fp, [sp, #4]
   14e00:	str	lr, [sp, #8]
   14e04:	add	fp, sp, #8
   14e08:	sub	sp, sp, #28
   14e0c:	str	r0, [fp, #-24]	; 0xffffffe8
   14e10:	mov	r3, #0
   14e14:	str	r3, [fp, #-16]
   14e18:	b	14e68 <flatcc_builder_clear@@Base+0x70>
   14e1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e20:	add	r2, r3, #52	; 0x34
   14e24:	ldr	r3, [fp, #-16]
   14e28:	lsl	r3, r3, #3
   14e2c:	add	r3, r2, r3
   14e30:	str	r3, [fp, #-20]	; 0xffffffec
   14e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e38:	ldr	r4, [r3, #48]	; 0x30
   14e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e40:	ldr	r0, [r3, #40]	; 0x28
   14e44:	ldr	r3, [fp, #-16]
   14e48:	str	r3, [sp]
   14e4c:	mov	r3, #0
   14e50:	mov	r2, #0
   14e54:	ldr	r1, [fp, #-20]	; 0xffffffec
   14e58:	blx	r4
   14e5c:	ldr	r3, [fp, #-16]
   14e60:	add	r3, r3, #1
   14e64:	str	r3, [fp, #-16]
   14e68:	ldr	r3, [fp, #-16]
   14e6c:	cmp	r3, #7
   14e70:	ble	14e1c <flatcc_builder_clear@@Base+0x24>
   14e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e78:	ldr	r3, [r3, #184]	; 0xb8
   14e7c:	cmp	r3, #0
   14e80:	beq	14e94 <flatcc_builder_clear@@Base+0x9c>
   14e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e88:	add	r3, r3, #188	; 0xbc
   14e8c:	mov	r0, r3
   14e90:	bl	1ab94 <flatcc_emitter_clear@@Base>
   14e94:	mov	r2, #232	; 0xe8
   14e98:	mov	r1, #0
   14e9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ea0:	bl	122f4 <memset@plt>
   14ea4:	nop	{0}
   14ea8:	sub	sp, fp, #8
   14eac:	ldr	r4, [sp]
   14eb0:	ldr	fp, [sp, #4]
   14eb4:	add	sp, sp, #8
   14eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ebc:	push	{fp}		; (str fp, [sp, #-4]!)
   14ec0:	add	fp, sp, #0
   14ec4:	sub	sp, sp, #12
   14ec8:	str	r0, [fp, #-8]
   14ecc:	mov	r3, r1
   14ed0:	strh	r3, [fp, #-10]
   14ed4:	ldr	r3, [fp, #-8]
   14ed8:	ldrh	r3, [r3, #128]	; 0x80
   14edc:	ldrh	r2, [fp, #-10]
   14ee0:	cmp	r2, r3
   14ee4:	bls	14ef4 <flatcc_builder_clear@@Base+0xfc>
   14ee8:	ldr	r3, [fp, #-8]
   14eec:	ldrh	r2, [fp, #-10]
   14ef0:	strh	r2, [r3, #128]	; 0x80
   14ef4:	nop	{0}
   14ef8:	add	sp, fp, #0
   14efc:	pop	{fp}		; (ldr fp, [sp], #4)
   14f00:	bx	lr
   14f04:	push	{fp}		; (str fp, [sp, #-4]!)
   14f08:	add	fp, sp, #0
   14f0c:	sub	sp, sp, #12
   14f10:	str	r0, [fp, #-8]
   14f14:	mov	r3, r1
   14f18:	strh	r3, [fp, #-10]
   14f1c:	ldr	r3, [fp, #-8]
   14f20:	ldrh	r3, [r3]
   14f24:	ldrh	r2, [fp, #-10]
   14f28:	cmp	r2, r3
   14f2c:	bls	14f3c <flatcc_builder_clear@@Base+0x144>
   14f30:	ldr	r3, [fp, #-8]
   14f34:	ldrh	r2, [fp, #-10]
   14f38:	strh	r2, [r3]
   14f3c:	nop	{0}
   14f40:	add	sp, fp, #0
   14f44:	pop	{fp}		; (ldr fp, [sp], #4)
   14f48:	bx	lr

00014f4c <flatcc_builder_enter_user_frame_ptr@@Base>:
   14f4c:	str	fp, [sp, #-8]!
   14f50:	str	lr, [sp, #4]
   14f54:	add	fp, sp, #4
   14f58:	sub	sp, sp, #24
   14f5c:	str	r0, [fp, #-16]
   14f60:	str	r1, [fp, #-20]	; 0xffffffec
   14f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f68:	add	r3, r3, #3
   14f6c:	bic	r3, r3, #3
   14f70:	add	r3, r3, #4
   14f74:	str	r3, [fp, #-20]	; 0xffffffec
   14f78:	ldr	r3, [fp, #-16]
   14f7c:	ldr	r2, [r3, #228]	; 0xe4
   14f80:	mov	r3, #0
   14f84:	str	r3, [sp]
   14f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f8c:	mov	r1, #7
   14f90:	ldr	r0, [fp, #-16]
   14f94:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   14f98:	str	r0, [fp, #-8]
   14f9c:	ldr	r3, [fp, #-8]
   14fa0:	cmp	r3, #0
   14fa4:	bne	14fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   14fa8:	mov	r3, #0
   14fac:	b	15008 <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   14fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fb4:	mov	r1, #0
   14fb8:	ldr	r0, [fp, #-8]
   14fbc:	bl	122f4 <memset@plt>
   14fc0:	ldr	r3, [fp, #-8]
   14fc4:	add	r2, r3, #4
   14fc8:	str	r2, [fp, #-8]
   14fcc:	ldr	r2, [fp, #-16]
   14fd0:	ldr	r2, [r2, #224]	; 0xe0
   14fd4:	str	r2, [r3]
   14fd8:	ldr	r3, [fp, #-16]
   14fdc:	ldr	r3, [r3, #228]	; 0xe4
   14fe0:	add	r2, r3, #4
   14fe4:	ldr	r3, [fp, #-16]
   14fe8:	str	r2, [r3, #224]	; 0xe0
   14fec:	ldr	r3, [fp, #-16]
   14ff0:	ldr	r2, [r3, #228]	; 0xe4
   14ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ff8:	add	r2, r2, r3
   14ffc:	ldr	r3, [fp, #-16]
   15000:	str	r2, [r3, #228]	; 0xe4
   15004:	ldr	r3, [fp, #-8]
   15008:	mov	r0, r3
   1500c:	sub	sp, fp, #4
   15010:	ldr	fp, [sp]
   15014:	add	sp, sp, #4
   15018:	pop	{pc}		; (ldr pc, [sp], #4)

0001501c <flatcc_builder_enter_user_frame@@Base>:
   1501c:	str	fp, [sp, #-8]!
   15020:	str	lr, [sp, #4]
   15024:	add	fp, sp, #4
   15028:	sub	sp, sp, #24
   1502c:	str	r0, [fp, #-16]
   15030:	str	r1, [fp, #-20]	; 0xffffffec
   15034:	ldr	r3, [fp, #-20]	; 0xffffffec
   15038:	add	r3, r3, #3
   1503c:	bic	r3, r3, #3
   15040:	add	r3, r3, #4
   15044:	str	r3, [fp, #-20]	; 0xffffffec
   15048:	ldr	r3, [fp, #-16]
   1504c:	ldr	r2, [r3, #228]	; 0xe4
   15050:	mov	r3, #0
   15054:	str	r3, [sp]
   15058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1505c:	mov	r1, #7
   15060:	ldr	r0, [fp, #-16]
   15064:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   15068:	str	r0, [fp, #-8]
   1506c:	ldr	r3, [fp, #-8]
   15070:	cmp	r3, #0
   15074:	bne	15080 <flatcc_builder_enter_user_frame@@Base+0x64>
   15078:	mov	r3, #0
   1507c:	b	150dc <flatcc_builder_enter_user_frame@@Base+0xc0>
   15080:	ldr	r2, [fp, #-20]	; 0xffffffec
   15084:	mov	r1, #0
   15088:	ldr	r0, [fp, #-8]
   1508c:	bl	122f4 <memset@plt>
   15090:	ldr	r3, [fp, #-8]
   15094:	add	r2, r3, #4
   15098:	str	r2, [fp, #-8]
   1509c:	ldr	r2, [fp, #-16]
   150a0:	ldr	r2, [r2, #224]	; 0xe0
   150a4:	str	r2, [r3]
   150a8:	ldr	r3, [fp, #-16]
   150ac:	ldr	r3, [r3, #228]	; 0xe4
   150b0:	add	r2, r3, #4
   150b4:	ldr	r3, [fp, #-16]
   150b8:	str	r2, [r3, #224]	; 0xe0
   150bc:	ldr	r3, [fp, #-16]
   150c0:	ldr	r2, [r3, #228]	; 0xe4
   150c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150c8:	add	r2, r2, r3
   150cc:	ldr	r3, [fp, #-16]
   150d0:	str	r2, [r3, #228]	; 0xe4
   150d4:	ldr	r3, [fp, #-16]
   150d8:	ldr	r3, [r3, #224]	; 0xe0
   150dc:	mov	r0, r3
   150e0:	sub	sp, fp, #4
   150e4:	ldr	fp, [sp]
   150e8:	add	sp, sp, #4
   150ec:	pop	{pc}		; (ldr pc, [sp], #4)

000150f0 <flatcc_builder_exit_user_frame@@Base>:
   150f0:	str	fp, [sp, #-8]!
   150f4:	str	lr, [sp, #4]
   150f8:	add	fp, sp, #4
   150fc:	sub	sp, sp, #16
   15100:	str	r0, [fp, #-16]
   15104:	ldr	r3, [fp, #-16]
   15108:	ldr	r3, [r3, #224]	; 0xe0
   1510c:	cmp	r3, #0
   15110:	bne	15134 <flatcc_builder_exit_user_frame@@Base+0x44>
   15114:	ldr	r3, [pc, #112]	; 1518c <flatcc_builder_exit_user_frame@@Base+0x9c>
   15118:	add	r3, pc, r3
   1511c:	movw	r2, #542	; 0x21e
   15120:	ldr	r1, [pc, #104]	; 15190 <flatcc_builder_exit_user_frame@@Base+0xa0>
   15124:	add	r1, pc, r1
   15128:	ldr	r0, [pc, #100]	; 15194 <flatcc_builder_exit_user_frame@@Base+0xa4>
   1512c:	add	r0, pc, r0
   15130:	bl	12324 <__assert_fail@plt>
   15134:	ldr	r3, [fp, #-16]
   15138:	ldr	r2, [r3, #108]	; 0x6c
   1513c:	ldr	r3, [fp, #-16]
   15140:	ldr	r3, [r3, #224]	; 0xe0
   15144:	add	r3, r2, r3
   15148:	str	r3, [fp, #-8]
   1514c:	ldr	r3, [fp, #-16]
   15150:	ldr	r3, [r3, #224]	; 0xe0
   15154:	sub	r2, r3, #4
   15158:	ldr	r3, [fp, #-16]
   1515c:	str	r2, [r3, #228]	; 0xe4
   15160:	ldr	r3, [fp, #-8]
   15164:	ldr	r2, [r3, #-4]
   15168:	ldr	r3, [fp, #-16]
   1516c:	str	r2, [r3, #224]	; 0xe0
   15170:	ldr	r3, [fp, #-16]
   15174:	ldr	r3, [r3, #224]	; 0xe0
   15178:	mov	r0, r3
   1517c:	sub	sp, fp, #4
   15180:	ldr	fp, [sp]
   15184:	add	sp, sp, #4
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	andeq	r8, r0, ip, asr #27
   15190:	andeq	r8, r0, r0, ror #18
   15194:	andeq	r8, r0, r0, ror #19

00015198 <flatcc_builder_exit_user_frame_at@@Base>:
   15198:	str	fp, [sp, #-8]!
   1519c:	str	lr, [sp, #4]
   151a0:	add	fp, sp, #4
   151a4:	sub	sp, sp, #8
   151a8:	str	r0, [fp, #-8]
   151ac:	str	r1, [fp, #-12]
   151b0:	ldr	r3, [fp, #-8]
   151b4:	ldr	r3, [r3, #224]	; 0xe0
   151b8:	ldr	r2, [fp, #-12]
   151bc:	cmp	r2, r3
   151c0:	bls	151e4 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   151c4:	ldr	r3, [pc, #68]	; 15210 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   151c8:	add	r3, pc, r3
   151cc:	movw	r2, #551	; 0x227
   151d0:	ldr	r1, [pc, #60]	; 15214 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   151d4:	add	r1, pc, r1
   151d8:	ldr	r0, [pc, #56]	; 15218 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   151dc:	add	r0, pc, r0
   151e0:	bl	12324 <__assert_fail@plt>
   151e4:	ldr	r3, [fp, #-8]
   151e8:	ldr	r2, [fp, #-12]
   151ec:	str	r2, [r3, #224]	; 0xe0
   151f0:	ldr	r0, [fp, #-8]
   151f4:	bl	150f0 <flatcc_builder_exit_user_frame@@Base>
   151f8:	mov	r3, r0
   151fc:	mov	r0, r3
   15200:	sub	sp, fp, #4
   15204:	ldr	fp, [sp]
   15208:	add	sp, sp, #4
   1520c:	pop	{pc}		; (ldr pc, [sp], #4)
   15210:	andeq	r8, r0, ip, lsr sp
   15214:			; <UNDEFINED> instruction: 0x000088b0
   15218:	andeq	r8, r0, ip, asr #18

0001521c <flatcc_builder_get_current_user_frame@@Base>:
   1521c:	push	{fp}		; (str fp, [sp, #-4]!)
   15220:	add	fp, sp, #0
   15224:	sub	sp, sp, #12
   15228:	str	r0, [fp, #-8]
   1522c:	ldr	r3, [fp, #-8]
   15230:	ldr	r3, [r3, #224]	; 0xe0
   15234:	mov	r0, r3
   15238:	add	sp, fp, #0
   1523c:	pop	{fp}		; (ldr fp, [sp], #4)
   15240:	bx	lr

00015244 <flatcc_builder_get_user_frame_ptr@@Base>:
   15244:	push	{fp}		; (str fp, [sp, #-4]!)
   15248:	add	fp, sp, #0
   1524c:	sub	sp, sp, #12
   15250:	str	r0, [fp, #-8]
   15254:	str	r1, [fp, #-12]
   15258:	ldr	r3, [fp, #-8]
   1525c:	ldr	r2, [r3, #108]	; 0x6c
   15260:	ldr	r3, [fp, #-12]
   15264:	add	r3, r2, r3
   15268:	mov	r0, r3
   1526c:	add	sp, fp, #0
   15270:	pop	{fp}		; (ldr fp, [sp], #4)
   15274:	bx	lr
   15278:	str	fp, [sp, #-8]!
   1527c:	str	lr, [sp, #4]
   15280:	add	fp, sp, #4
   15284:	sub	sp, sp, #16
   15288:	str	r0, [fp, #-8]
   1528c:	mov	r3, r1
   15290:	strh	r3, [fp, #-10]
   15294:	ldr	r3, [fp, #-8]
   15298:	ldr	r3, [r3, #156]	; 0x9c
   1529c:	add	r2, r3, #1
   152a0:	ldr	r3, [fp, #-8]
   152a4:	str	r2, [r3, #156]	; 0x9c
   152a8:	ldr	r3, [fp, #-8]
   152ac:	ldr	r2, [r3, #156]	; 0x9c
   152b0:	ldr	r3, [fp, #-8]
   152b4:	ldr	r3, [r3, #160]	; 0xa0
   152b8:	cmp	r2, r3
   152bc:	ble	153b0 <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   152c0:	ldr	r3, [fp, #-8]
   152c4:	ldr	r3, [r3, #176]	; 0xb0
   152c8:	cmp	r3, #0
   152cc:	ble	152f0 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   152d0:	ldr	r3, [fp, #-8]
   152d4:	ldr	r2, [r3, #156]	; 0x9c
   152d8:	ldr	r3, [fp, #-8]
   152dc:	ldr	r3, [r3, #176]	; 0xb0
   152e0:	cmp	r2, r3
   152e4:	ble	152f0 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   152e8:	mvn	r3, #0
   152ec:	b	15450 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   152f0:	ldr	r3, [fp, #-8]
   152f4:	ldr	r3, [r3, #156]	; 0x9c
   152f8:	sub	r3, r3, #1
   152fc:	mov	r2, r3
   15300:	mov	r3, r2
   15304:	lsl	r3, r3, #3
   15308:	add	r3, r3, r2
   1530c:	lsl	r3, r3, #2
   15310:	mov	r2, r3
   15314:	mov	r3, #0
   15318:	str	r3, [sp]
   1531c:	mov	r3, #36	; 0x24
   15320:	mov	r1, #4
   15324:	ldr	r0, [fp, #-8]
   15328:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   1532c:	mov	r2, r0
   15330:	ldr	r3, [fp, #-8]
   15334:	str	r2, [r3, #32]
   15338:	ldr	r3, [fp, #-8]
   1533c:	ldr	r3, [r3, #32]
   15340:	cmp	r3, #0
   15344:	bne	15350 <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   15348:	mvn	r3, #0
   1534c:	b	15450 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   15350:	ldr	r3, [fp, #-8]
   15354:	ldr	r2, [r3, #88]	; 0x58
   15358:	movw	r3, #36409	; 0x8e39
   1535c:	movt	r3, #14563	; 0x38e3
   15360:	umull	r2, r3, r3, r2
   15364:	lsr	r3, r3, #3
   15368:	mov	r2, r3
   1536c:	ldr	r3, [fp, #-8]
   15370:	str	r2, [r3, #160]	; 0xa0
   15374:	ldr	r3, [fp, #-8]
   15378:	ldr	r3, [r3, #176]	; 0xb0
   1537c:	cmp	r3, #0
   15380:	ble	153c4 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   15384:	ldr	r3, [fp, #-8]
   15388:	ldr	r2, [r3, #176]	; 0xb0
   1538c:	ldr	r3, [fp, #-8]
   15390:	ldr	r3, [r3, #160]	; 0xa0
   15394:	cmp	r2, r3
   15398:	bge	153c4 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   1539c:	ldr	r3, [fp, #-8]
   153a0:	ldr	r2, [r3, #176]	; 0xb0
   153a4:	ldr	r3, [fp, #-8]
   153a8:	str	r2, [r3, #160]	; 0xa0
   153ac:	b	153c4 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   153b0:	ldr	r3, [fp, #-8]
   153b4:	ldr	r3, [r3, #32]
   153b8:	add	r2, r3, #36	; 0x24
   153bc:	ldr	r3, [fp, #-8]
   153c0:	str	r2, [r3, #32]
   153c4:	ldr	r3, [fp, #-8]
   153c8:	ldr	r3, [r3, #32]
   153cc:	ldr	r2, [fp, #-8]
   153d0:	ldr	r2, [r2, #20]
   153d4:	str	r2, [r3, #8]
   153d8:	ldr	r3, [fp, #-8]
   153dc:	ldr	r3, [r3, #32]
   153e0:	ldr	r2, [fp, #-8]
   153e4:	ldrh	r2, [r2, #130]	; 0x82
   153e8:	strh	r2, [r3, #12]
   153ec:	ldr	r3, [fp, #-8]
   153f0:	ldrh	r2, [fp, #-10]
   153f4:	strh	r2, [r3, #130]	; 0x82
   153f8:	ldr	r3, [fp, #-8]
   153fc:	ldr	r3, [r3, #32]
   15400:	ldr	r2, [fp, #-8]
   15404:	ldr	r2, [r2, #28]
   15408:	str	r2, [r3]
   1540c:	ldr	r3, [fp, #-8]
   15410:	ldr	r3, [r3, #32]
   15414:	mvn	r2, #3
   15418:	str	r2, [r3, #4]
   1541c:	ldr	r3, [fp, #-8]
   15420:	ldr	r2, [r3, #28]
   15424:	ldr	r3, [fp, #-8]
   15428:	ldr	r3, [r3, #20]
   1542c:	add	r3, r2, r3
   15430:	add	r3, r3, #7
   15434:	bic	r2, r3, #7
   15438:	ldr	r3, [fp, #-8]
   1543c:	str	r2, [r3, #28]
   15440:	ldr	r3, [fp, #-8]
   15444:	mov	r2, #0
   15448:	str	r2, [r3, #20]
   1544c:	mov	r3, #0
   15450:	mov	r0, r3
   15454:	sub	sp, fp, #4
   15458:	ldr	fp, [sp]
   1545c:	add	sp, sp, #4
   15460:	pop	{pc}		; (ldr pc, [sp], #4)
   15464:	str	fp, [sp, #-8]!
   15468:	str	lr, [sp, #4]
   1546c:	add	fp, sp, #4
   15470:	sub	sp, sp, #8
   15474:	str	r0, [fp, #-8]
   15478:	ldr	r3, [fp, #-8]
   1547c:	ldr	r0, [r3, #16]
   15480:	ldr	r3, [fp, #-8]
   15484:	ldr	r3, [r3, #20]
   15488:	mov	r2, r3
   1548c:	mov	r1, #0
   15490:	bl	122f4 <memset@plt>
   15494:	ldr	r3, [fp, #-8]
   15498:	ldr	r3, [r3, #32]
   1549c:	ldr	r2, [r3, #8]
   154a0:	ldr	r3, [fp, #-8]
   154a4:	str	r2, [r3, #20]
   154a8:	ldr	r3, [fp, #-8]
   154ac:	ldr	r3, [r3, #32]
   154b0:	ldr	r2, [r3]
   154b4:	ldr	r3, [fp, #-8]
   154b8:	str	r2, [r3, #28]
   154bc:	ldr	r3, [fp, #-8]
   154c0:	ldr	r3, [r3, #32]
   154c4:	ldr	r3, [r3, #4]
   154c8:	mov	r1, r3
   154cc:	ldr	r0, [fp, #-8]
   154d0:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   154d4:	ldr	r3, [fp, #-8]
   154d8:	ldrh	r3, [r3, #130]	; 0x82
   154dc:	mov	r1, r3
   154e0:	ldr	r0, [fp, #-8]
   154e4:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   154e8:	ldr	r3, [fp, #-8]
   154ec:	ldr	r3, [r3, #32]
   154f0:	ldrh	r2, [r3, #12]
   154f4:	ldr	r3, [fp, #-8]
   154f8:	strh	r2, [r3, #130]	; 0x82
   154fc:	ldr	r3, [fp, #-8]
   15500:	ldr	r3, [r3, #32]
   15504:	sub	r2, r3, #36	; 0x24
   15508:	ldr	r3, [fp, #-8]
   1550c:	str	r2, [r3, #32]
   15510:	ldr	r3, [fp, #-8]
   15514:	ldr	r3, [r3, #156]	; 0x9c
   15518:	sub	r2, r3, #1
   1551c:	ldr	r3, [fp, #-8]
   15520:	str	r2, [r3, #156]	; 0x9c
   15524:	nop	{0}
   15528:	sub	sp, fp, #4
   1552c:	ldr	fp, [sp]
   15530:	add	sp, sp, #4
   15534:	pop	{pc}		; (ldr pc, [sp], #4)
   15538:	push	{fp}		; (str fp, [sp, #-4]!)
   1553c:	add	fp, sp, #0
   15540:	sub	sp, sp, #20
   15544:	str	r0, [fp, #-8]
   15548:	str	r1, [fp, #-12]
   1554c:	mov	r3, r2
   15550:	strh	r3, [fp, #-14]
   15554:	ldr	r3, [fp, #-8]
   15558:	ldr	r3, [r3, #136]	; 0x88
   1555c:	mov	r2, r3
   15560:	ldr	r3, [fp, #-12]
   15564:	sub	r3, r2, r3
   15568:	ldrh	r2, [fp, #-14]
   1556c:	sub	r2, r2, #1
   15570:	and	r3, r3, r2
   15574:	mov	r0, r3
   15578:	add	sp, fp, #0
   1557c:	pop	{fp}		; (ldr fp, [sp], #4)
   15580:	bx	lr
   15584:	push	{fp}		; (str fp, [sp, #-4]!)
   15588:	add	fp, sp, #0
   1558c:	sub	sp, sp, #12
   15590:	str	r0, [fp, #-8]
   15594:	mov	r3, r1
   15598:	strh	r3, [fp, #-10]
   1559c:	ldr	r3, [fp, #-8]
   155a0:	ldr	r2, [r3, #140]	; 0x8c
   155a4:	ldrh	r3, [fp, #-10]
   155a8:	sub	r3, r3, #1
   155ac:	and	r3, r3, r2
   155b0:	mov	r0, r3
   155b4:	add	sp, fp, #0
   155b8:	pop	{fp}		; (ldr fp, [sp], #4)
   155bc:	bx	lr
   155c0:	str	r4, [sp, #-12]!
   155c4:	str	fp, [sp, #4]
   155c8:	str	lr, [sp, #8]
   155cc:	add	fp, sp, #8
   155d0:	sub	sp, sp, #28
   155d4:	str	r0, [fp, #-24]	; 0xffffffe8
   155d8:	str	r1, [fp, #-28]	; 0xffffffe4
   155dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155e0:	ldr	r3, [r3, #136]	; 0x88
   155e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   155e8:	ldr	r2, [r2]
   155ec:	sub	r3, r3, r2
   155f0:	str	r3, [fp, #-16]
   155f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155f8:	ldr	r3, [r3, #136]	; 0x88
   155fc:	ldr	r2, [fp, #-16]
   15600:	cmp	r2, r3
   15604:	blt	15628 <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   15608:	ldr	r3, [pc, #164]	; 156b4 <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   1560c:	add	r3, pc, r3
   15610:	movw	r2, #647	; 0x287
   15614:	ldr	r1, [pc, #156]	; 156b8 <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   15618:	add	r1, pc, r1
   1561c:	ldr	r0, [pc, #152]	; 156bc <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   15620:	add	r0, pc, r0
   15624:	bl	12324 <__assert_fail@plt>
   15628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1562c:	ldr	r4, [r3, #44]	; 0x2c
   15630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15634:	ldr	r0, [r3, #36]	; 0x24
   15638:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1563c:	add	r1, r3, #8
   15640:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15644:	ldr	r2, [r3, #4]
   15648:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1564c:	ldr	r3, [r3]
   15650:	str	r3, [sp]
   15654:	ldr	r3, [fp, #-16]
   15658:	blx	r4
   1565c:	mov	r3, r0
   15660:	cmp	r3, #0
   15664:	beq	15688 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   15668:	ldr	r3, [pc, #80]	; 156c0 <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   1566c:	add	r3, pc, r3
   15670:	movw	r2, #651	; 0x28b
   15674:	ldr	r1, [pc, #72]	; 156c4 <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   15678:	add	r1, pc, r1
   1567c:	ldr	r0, [pc, #68]	; 156c8 <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   15680:	add	r0, pc, r0
   15684:	bl	12324 <__assert_fail@plt>
   15688:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1568c:	ldr	r2, [fp, #-16]
   15690:	str	r2, [r3, #136]	; 0x88
   15694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15698:	ldr	r3, [r3, #136]	; 0x88
   1569c:	mov	r0, r3
   156a0:	sub	sp, fp, #8
   156a4:	ldr	r4, [sp]
   156a8:	ldr	fp, [sp, #4]
   156ac:	add	sp, sp, #8
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	andeq	r8, r0, r8, lsr r9
   156b8:	andeq	r8, r0, ip, ror #8
   156bc:	andeq	r8, r0, r4, asr #9
   156c0:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   156c4:	andeq	r8, r0, ip, lsl #8
   156c8:	andeq	r8, r0, r4, ror #8
   156cc:	str	r4, [sp, #-12]!
   156d0:	str	fp, [sp, #4]
   156d4:	str	lr, [sp, #8]
   156d8:	add	fp, sp, #8
   156dc:	sub	sp, sp, #28
   156e0:	str	r0, [fp, #-24]	; 0xffffffe8
   156e4:	str	r1, [fp, #-28]	; 0xffffffe4
   156e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156ec:	ldr	r3, [r3, #140]	; 0x8c
   156f0:	str	r3, [fp, #-16]
   156f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156f8:	ldr	r3, [r3]
   156fc:	mov	r2, r3
   15700:	ldr	r3, [fp, #-16]
   15704:	add	r2, r2, r3
   15708:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1570c:	str	r2, [r3, #140]	; 0x8c
   15710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15714:	ldr	r3, [r3, #140]	; 0x8c
   15718:	ldr	r2, [fp, #-16]
   1571c:	cmp	r2, r3
   15720:	ble	15744 <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   15724:	ldr	r3, [pc, #152]	; 157c4 <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   15728:	add	r3, pc, r3
   1572c:	movw	r2, #673	; 0x2a1
   15730:	ldr	r1, [pc, #144]	; 157c8 <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   15734:	add	r1, pc, r1
   15738:	ldr	r0, [pc, #140]	; 157cc <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   1573c:	add	r0, pc, r0
   15740:	bl	12324 <__assert_fail@plt>
   15744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15748:	ldr	r4, [r3, #44]	; 0x2c
   1574c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15750:	ldr	r0, [r3, #36]	; 0x24
   15754:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15758:	add	r1, r3, #8
   1575c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15760:	ldr	r2, [r3, #4]
   15764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15768:	ldr	r3, [r3]
   1576c:	str	r3, [sp]
   15770:	ldr	r3, [fp, #-16]
   15774:	blx	r4
   15778:	mov	r3, r0
   1577c:	cmp	r3, #0
   15780:	beq	157a4 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   15784:	ldr	r3, [pc, #68]	; 157d0 <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   15788:	add	r3, pc, r3
   1578c:	movw	r2, #677	; 0x2a5
   15790:	ldr	r1, [pc, #60]	; 157d4 <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   15794:	add	r1, pc, r1
   15798:	ldr	r0, [pc, #56]	; 157d8 <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   1579c:	add	r0, pc, r0
   157a0:	bl	12324 <__assert_fail@plt>
   157a4:	ldr	r3, [fp, #-16]
   157a8:	add	r3, r3, #1
   157ac:	mov	r0, r3
   157b0:	sub	sp, fp, #8
   157b4:	ldr	r4, [sp]
   157b8:	ldr	fp, [sp, #4]
   157bc:	add	sp, sp, #8
   157c0:	pop	{pc}		; (ldr pc, [sp], #4)
   157c4:	andeq	r8, r0, r0, lsl r8
   157c8:	andeq	r8, r0, r0, asr r3
   157cc:	andeq	r8, r0, r8, lsr #7
   157d0:			; <UNDEFINED> instruction: 0x000087b0
   157d4:	strdeq	r8, [r0], -r0
   157d8:	andeq	r8, r0, r8, asr #6
   157dc:	str	r4, [sp, #-12]!
   157e0:	str	fp, [sp, #4]
   157e4:	str	lr, [sp, #8]
   157e8:	add	fp, sp, #8
   157ec:	sub	sp, sp, #100	; 0x64
   157f0:	str	r0, [fp, #-96]	; 0xffffffa0
   157f4:	str	r1, [fp, #-100]	; 0xffffff9c
   157f8:	str	r3, [fp, #-108]	; 0xffffff94
   157fc:	mov	r3, r2
   15800:	strh	r3, [fp, #-102]	; 0xffffff9a
   15804:	ldr	r4, [pc, #332]	; 15958 <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   15808:	add	r4, pc, r4
   1580c:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15810:	cmp	r3, #0
   15814:	bne	1583c <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   15818:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1581c:	ldrh	r3, [r3, #132]	; 0x84
   15820:	cmp	r3, #0
   15824:	beq	15834 <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   15828:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1582c:	ldrh	r3, [r3, #132]	; 0x84
   15830:	b	15840 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   15834:	mov	r3, #1
   15838:	b	15840 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   1583c:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15840:	strh	r3, [fp, #-102]	; 0xffffff9a
   15844:	mov	r1, #4
   15848:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1584c:	bl	14f04 <flatcc_builder_clear@@Base+0x10c>
   15850:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15854:	mov	r1, r3
   15858:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1585c:	bl	14f04 <flatcc_builder_clear@@Base+0x10c>
   15860:	ldr	r3, [fp, #-108]	; 0xffffff94
   15864:	cmp	r3, #0
   15868:	bne	1593c <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   1586c:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15870:	mov	r1, r3
   15874:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15878:	bl	15584 <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   1587c:	str	r0, [fp, #-16]
   15880:	ldr	r3, [fp, #-16]
   15884:	cmp	r3, #0
   15888:	beq	1593c <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   1588c:	mov	r3, #0
   15890:	str	r3, [fp, #-88]	; 0xffffffa8
   15894:	mov	r3, #0
   15898:	str	r3, [fp, #-84]	; 0xffffffac
   1589c:	ldr	r3, [fp, #-16]
   158a0:	cmp	r3, #0
   158a4:	beq	15900 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   158a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   158ac:	ldr	r3, [fp, #-16]
   158b0:	add	r3, r2, r3
   158b4:	str	r3, [fp, #-88]	; 0xffffffa8
   158b8:	ldr	r3, [fp, #-84]	; 0xffffffac
   158bc:	add	r3, r3, #1
   158c0:	lsl	r3, r3, #3
   158c4:	sub	r2, fp, #12
   158c8:	add	r3, r2, r3
   158cc:	ldr	r2, [pc, #136]	; 1595c <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   158d0:	ldr	r2, [r4, r2]
   158d4:	str	r2, [r3, #-76]	; 0xffffffb4
   158d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   158dc:	add	r3, r3, #1
   158e0:	lsl	r3, r3, #3
   158e4:	sub	r2, fp, #12
   158e8:	add	r3, r2, r3
   158ec:	ldr	r2, [fp, #-16]
   158f0:	str	r2, [r3, #-72]	; 0xffffffb8
   158f4:	ldr	r3, [fp, #-84]	; 0xffffffac
   158f8:	add	r3, r3, #1
   158fc:	str	r3, [fp, #-84]	; 0xffffffac
   15900:	sub	r3, fp, #88	; 0x58
   15904:	mov	r1, r3
   15908:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1590c:	bl	156cc <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   15910:	mov	r3, r0
   15914:	cmp	r3, #0
   15918:	bne	1593c <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   1591c:	ldr	r3, [pc, #60]	; 15960 <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   15920:	add	r3, pc, r3
   15924:	movw	r2, #702	; 0x2be
   15928:	ldr	r1, [pc, #52]	; 15964 <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   1592c:	add	r1, pc, r1
   15930:	ldr	r0, [pc, #48]	; 15968 <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   15934:	add	r0, pc, r0
   15938:	bl	12324 <__assert_fail@plt>
   1593c:	mov	r3, #0
   15940:	mov	r0, r3
   15944:	sub	sp, fp, #8
   15948:	ldr	r4, [sp]
   1594c:	ldr	fp, [sp, #4]
   15950:	add	sp, sp, #8
   15954:	pop	{pc}		; (ldr pc, [sp], #4)
   15958:	strdeq	r9, [r1], -r0
   1595c:	andeq	r0, r0, r4, asr #32
   15960:	andeq	r8, r0, r8, lsl #12
   15964:	andeq	r8, r0, r8, asr r1
   15968:			; <UNDEFINED> instruction: 0x000081b0

0001596c <flatcc_builder_embed_buffer@@Base>:
   1596c:	str	r4, [sp, #-12]!
   15970:	str	fp, [sp, #4]
   15974:	str	lr, [sp, #8]
   15978:	add	fp, sp, #8
   1597c:	sub	sp, sp, #108	; 0x6c
   15980:	str	r0, [fp, #-104]	; 0xffffff98
   15984:	str	r2, [fp, #-112]	; 0xffffff90
   15988:	str	r3, [fp, #-116]	; 0xffffff8c
   1598c:	mov	r3, r1
   15990:	strh	r3, [fp, #-106]	; 0xffffff96
   15994:	ldr	r4, [pc, #504]	; 15b94 <flatcc_builder_embed_buffer@@Base+0x228>
   15998:	add	r4, pc, r4
   1599c:	ldr	r3, [fp, #8]
   159a0:	and	r3, r3, #2
   159a4:	str	r3, [fp, #-16]
   159a8:	ldr	r3, [fp, #-104]	; 0xffffff98
   159ac:	ldr	r3, [r3, #152]	; 0x98
   159b0:	cmp	r3, #0
   159b4:	movne	r3, #1
   159b8:	moveq	r3, #0
   159bc:	uxtb	r3, r3
   159c0:	ldrh	r2, [fp, #-106]	; 0xffffff96
   159c4:	add	r1, fp, #4
   159c8:	ldr	r0, [fp, #-104]	; 0xffffff98
   159cc:	bl	157dc <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   159d0:	mov	r3, r0
   159d4:	cmp	r3, #0
   159d8:	beq	159e4 <flatcc_builder_embed_buffer@@Base+0x78>
   159dc:	mov	r3, #0
   159e0:	b	15b7c <flatcc_builder_embed_buffer@@Base+0x210>
   159e4:	ldr	r3, [fp, #-16]
   159e8:	cmp	r3, #0
   159ec:	beq	159f8 <flatcc_builder_embed_buffer@@Base+0x8c>
   159f0:	mov	r2, #4
   159f4:	b	159fc <flatcc_builder_embed_buffer@@Base+0x90>
   159f8:	mov	r2, #0
   159fc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15a00:	add	r3, r2, r3
   15a04:	ldrh	r2, [fp, #4]
   15a08:	mov	r1, r3
   15a0c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15a10:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15a14:	str	r0, [fp, #-20]	; 0xffffffec
   15a18:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a20:	add	r3, r2, r3
   15a24:	mov	r0, r3
   15a28:	bl	13db4 <main@@Base+0x128>
   15a2c:	mov	r3, r0
   15a30:	str	r3, [fp, #-24]	; 0xffffffe8
   15a34:	mov	r3, #0
   15a38:	str	r3, [fp, #-96]	; 0xffffffa0
   15a3c:	mov	r3, #0
   15a40:	str	r3, [fp, #-92]	; 0xffffffa4
   15a44:	ldr	r3, [fp, #-104]	; 0xffffff98
   15a48:	ldr	r3, [r3, #152]	; 0x98
   15a4c:	cmp	r3, #0
   15a50:	beq	15aa4 <flatcc_builder_embed_buffer@@Base+0x138>
   15a54:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15a58:	add	r3, r3, #4
   15a5c:	str	r3, [fp, #-96]	; 0xffffffa0
   15a60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a64:	add	r3, r3, #1
   15a68:	lsl	r3, r3, #3
   15a6c:	sub	r2, fp, #12
   15a70:	add	r3, r2, r3
   15a74:	sub	r2, fp, #24
   15a78:	str	r2, [r3, #-84]	; 0xffffffac
   15a7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a80:	add	r3, r3, #1
   15a84:	lsl	r3, r3, #3
   15a88:	sub	r2, fp, #12
   15a8c:	add	r3, r2, r3
   15a90:	mov	r2, #4
   15a94:	str	r2, [r3, #-80]	; 0xffffffb0
   15a98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a9c:	add	r3, r3, #1
   15aa0:	str	r3, [fp, #-92]	; 0xffffffa4
   15aa4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15aa8:	cmp	r3, #0
   15aac:	beq	15b04 <flatcc_builder_embed_buffer@@Base+0x198>
   15ab0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15ab4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15ab8:	add	r3, r2, r3
   15abc:	str	r3, [fp, #-96]	; 0xffffffa0
   15ac0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ac4:	add	r3, r3, #1
   15ac8:	lsl	r3, r3, #3
   15acc:	sub	r2, fp, #12
   15ad0:	add	r3, r2, r3
   15ad4:	ldr	r2, [fp, #-112]	; 0xffffff90
   15ad8:	str	r2, [r3, #-84]	; 0xffffffac
   15adc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ae0:	add	r3, r3, #1
   15ae4:	lsl	r3, r3, #3
   15ae8:	sub	r2, fp, #12
   15aec:	add	r3, r2, r3
   15af0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15af4:	str	r2, [r3, #-80]	; 0xffffffb0
   15af8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15afc:	add	r3, r3, #1
   15b00:	str	r3, [fp, #-92]	; 0xffffffa4
   15b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b08:	cmp	r3, #0
   15b0c:	beq	15b68 <flatcc_builder_embed_buffer@@Base+0x1fc>
   15b10:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b18:	add	r3, r2, r3
   15b1c:	str	r3, [fp, #-96]	; 0xffffffa0
   15b20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b24:	add	r3, r3, #1
   15b28:	lsl	r3, r3, #3
   15b2c:	sub	r2, fp, #12
   15b30:	add	r3, r2, r3
   15b34:	ldr	r2, [pc, #92]	; 15b98 <flatcc_builder_embed_buffer@@Base+0x22c>
   15b38:	ldr	r2, [r4, r2]
   15b3c:	str	r2, [r3, #-84]	; 0xffffffac
   15b40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b44:	add	r3, r3, #1
   15b48:	lsl	r3, r3, #3
   15b4c:	sub	r2, fp, #12
   15b50:	add	r3, r2, r3
   15b54:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b58:	str	r2, [r3, #-80]	; 0xffffffb0
   15b5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b60:	add	r3, r3, #1
   15b64:	str	r3, [fp, #-92]	; 0xffffffa4
   15b68:	sub	r3, fp, #96	; 0x60
   15b6c:	mov	r1, r3
   15b70:	ldr	r0, [fp, #-104]	; 0xffffff98
   15b74:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15b78:	mov	r3, r0
   15b7c:	mov	r0, r3
   15b80:	sub	sp, fp, #8
   15b84:	ldr	r4, [sp]
   15b88:	ldr	fp, [sp, #4]
   15b8c:	add	sp, sp, #8
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	andeq	r9, r1, r0, ror #12
   15b98:	andeq	r0, r0, r4, asr #32

00015b9c <flatcc_builder_create_buffer@@Base>:
   15b9c:	str	r4, [sp, #-12]!
   15ba0:	str	fp, [sp, #4]
   15ba4:	str	lr, [sp, #8]
   15ba8:	add	fp, sp, #8
   15bac:	sub	sp, sp, #132	; 0x84
   15bb0:	str	r0, [fp, #-128]	; 0xffffff80
   15bb4:	str	r1, [fp, #-132]	; 0xffffff7c
   15bb8:	str	r3, [fp, #-140]	; 0xffffff74
   15bbc:	mov	r3, r2
   15bc0:	strh	r3, [fp, #-134]	; 0xffffff7a
   15bc4:	ldr	r4, [pc, #944]	; 15f7c <flatcc_builder_create_buffer@@Base+0x3e0>
   15bc8:	add	r4, pc, r4
   15bcc:	mov	r3, #0
   15bd0:	str	r3, [fp, #-16]
   15bd4:	mov	r3, #0
   15bd8:	str	r3, [fp, #-120]	; 0xffffff88
   15bdc:	ldr	r3, [fp, #8]
   15be0:	and	r3, r3, #1
   15be4:	cmp	r3, #0
   15be8:	movne	r3, #1
   15bec:	moveq	r3, #0
   15bf0:	uxtb	r3, r3
   15bf4:	str	r3, [fp, #-20]	; 0xffffffec
   15bf8:	ldr	r3, [fp, #8]
   15bfc:	and	r3, r3, #2
   15c00:	cmp	r3, #0
   15c04:	movne	r3, #1
   15c08:	moveq	r3, #0
   15c0c:	uxtb	r3, r3
   15c10:	str	r3, [fp, #-24]	; 0xffffffe8
   15c14:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   15c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c1c:	add	r1, fp, #4
   15c20:	ldr	r0, [fp, #-128]	; 0xffffff80
   15c24:	bl	157dc <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   15c28:	mov	r3, r0
   15c2c:	cmp	r3, #0
   15c30:	beq	15c3c <flatcc_builder_create_buffer@@Base+0xa0>
   15c34:	mov	r3, #0
   15c38:	b	15f64 <flatcc_builder_create_buffer@@Base+0x3c8>
   15c3c:	ldrh	r3, [fp, #4]
   15c40:	mov	r1, r3
   15c44:	ldr	r0, [fp, #-128]	; 0xffffff80
   15c48:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   15c4c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15c50:	cmp	r3, #0
   15c54:	beq	15c8c <flatcc_builder_create_buffer@@Base+0xf0>
   15c58:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15c5c:	ldr	r3, [r3]
   15c60:	str	r3, [fp, #-120]	; 0xffffff88
   15c64:	ldr	r3, [fp, #-120]	; 0xffffff88
   15c68:	mov	r0, r3
   15c6c:	bl	13e00 <main@@Base+0x174>
   15c70:	mov	r3, r0
   15c74:	str	r3, [fp, #-120]	; 0xffffff88
   15c78:	ldr	r3, [fp, #-120]	; 0xffffff88
   15c7c:	mov	r0, r3
   15c80:	bl	13db4 <main@@Base+0x128>
   15c84:	mov	r3, r0
   15c88:	str	r3, [fp, #-120]	; 0xffffff88
   15c8c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15c90:	cmp	r3, #0
   15c94:	beq	15ca0 <flatcc_builder_create_buffer@@Base+0x104>
   15c98:	mov	r3, #4
   15c9c:	b	15ca4 <flatcc_builder_create_buffer@@Base+0x108>
   15ca0:	mov	r3, #0
   15ca4:	str	r3, [fp, #-16]
   15ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cac:	cmp	r3, #0
   15cb0:	beq	15cbc <flatcc_builder_create_buffer@@Base+0x120>
   15cb4:	mov	r2, #4
   15cb8:	b	15cc0 <flatcc_builder_create_buffer@@Base+0x124>
   15cbc:	mov	r2, #0
   15cc0:	ldr	r3, [fp, #-16]
   15cc4:	add	r3, r2, r3
   15cc8:	add	r3, r3, #4
   15ccc:	ldrh	r2, [fp, #4]
   15cd0:	mov	r1, r3
   15cd4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15cd8:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15cdc:	str	r0, [fp, #-28]	; 0xffffffe4
   15ce0:	mov	r3, #0
   15ce4:	str	r3, [fp, #-116]	; 0xffffff8c
   15ce8:	mov	r3, #0
   15cec:	str	r3, [fp, #-112]	; 0xffffff90
   15cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cf4:	cmp	r3, #0
   15cf8:	bne	15d08 <flatcc_builder_create_buffer@@Base+0x16c>
   15cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d00:	cmp	r3, #0
   15d04:	beq	15d58 <flatcc_builder_create_buffer@@Base+0x1bc>
   15d08:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15d0c:	add	r3, r3, #4
   15d10:	str	r3, [fp, #-116]	; 0xffffff8c
   15d14:	ldr	r3, [fp, #-112]	; 0xffffff90
   15d18:	add	r3, r3, #1
   15d1c:	lsl	r3, r3, #3
   15d20:	sub	r2, fp, #12
   15d24:	add	r3, r2, r3
   15d28:	sub	r2, fp, #44	; 0x2c
   15d2c:	str	r2, [r3, #-104]	; 0xffffff98
   15d30:	ldr	r3, [fp, #-112]	; 0xffffff90
   15d34:	add	r3, r3, #1
   15d38:	lsl	r3, r3, #3
   15d3c:	sub	r2, fp, #12
   15d40:	add	r3, r2, r3
   15d44:	mov	r2, #4
   15d48:	str	r2, [r3, #-100]	; 0xffffff9c
   15d4c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15d50:	add	r3, r3, #1
   15d54:	str	r3, [fp, #-112]	; 0xffffff90
   15d58:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15d5c:	add	r3, r3, #4
   15d60:	str	r3, [fp, #-116]	; 0xffffff8c
   15d64:	ldr	r3, [fp, #-112]	; 0xffffff90
   15d68:	add	r3, r3, #1
   15d6c:	lsl	r3, r3, #3
   15d70:	sub	r2, fp, #12
   15d74:	add	r3, r2, r3
   15d78:	sub	r2, fp, #40	; 0x28
   15d7c:	str	r2, [r3, #-104]	; 0xffffff98
   15d80:	ldr	r3, [fp, #-112]	; 0xffffff90
   15d84:	add	r3, r3, #1
   15d88:	lsl	r3, r3, #3
   15d8c:	sub	r2, fp, #12
   15d90:	add	r3, r2, r3
   15d94:	mov	r2, #4
   15d98:	str	r2, [r3, #-100]	; 0xffffff9c
   15d9c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15da0:	add	r3, r3, #1
   15da4:	str	r3, [fp, #-112]	; 0xffffff90
   15da8:	ldr	r3, [fp, #-16]
   15dac:	cmp	r3, #0
   15db0:	beq	15e08 <flatcc_builder_create_buffer@@Base+0x26c>
   15db4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15db8:	ldr	r3, [fp, #-16]
   15dbc:	add	r3, r2, r3
   15dc0:	str	r3, [fp, #-116]	; 0xffffff8c
   15dc4:	ldr	r3, [fp, #-112]	; 0xffffff90
   15dc8:	add	r3, r3, #1
   15dcc:	lsl	r3, r3, #3
   15dd0:	sub	r2, fp, #12
   15dd4:	add	r3, r2, r3
   15dd8:	sub	r2, fp, #120	; 0x78
   15ddc:	str	r2, [r3, #-104]	; 0xffffff98
   15de0:	ldr	r3, [fp, #-112]	; 0xffffff90
   15de4:	add	r3, r3, #1
   15de8:	lsl	r3, r3, #3
   15dec:	sub	r2, fp, #12
   15df0:	add	r3, r2, r3
   15df4:	ldr	r2, [fp, #-16]
   15df8:	str	r2, [r3, #-100]	; 0xffffff9c
   15dfc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e00:	add	r3, r3, #1
   15e04:	str	r3, [fp, #-112]	; 0xffffff90
   15e08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e0c:	cmp	r3, #0
   15e10:	beq	15e6c <flatcc_builder_create_buffer@@Base+0x2d0>
   15e14:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e1c:	add	r3, r2, r3
   15e20:	str	r3, [fp, #-116]	; 0xffffff8c
   15e24:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e28:	add	r3, r3, #1
   15e2c:	lsl	r3, r3, #3
   15e30:	sub	r2, fp, #12
   15e34:	add	r3, r2, r3
   15e38:	ldr	r2, [pc, #320]	; 15f80 <flatcc_builder_create_buffer@@Base+0x3e4>
   15e3c:	ldr	r2, [r4, r2]
   15e40:	str	r2, [r3, #-104]	; 0xffffff98
   15e44:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e48:	add	r3, r3, #1
   15e4c:	lsl	r3, r3, #3
   15e50:	sub	r2, fp, #12
   15e54:	add	r3, r2, r3
   15e58:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15e5c:	str	r2, [r3, #-100]	; 0xffffff9c
   15e60:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e64:	add	r3, r3, #1
   15e68:	str	r3, [fp, #-112]	; 0xffffff90
   15e6c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15e70:	ldr	r3, [r3, #136]	; 0x88
   15e74:	mov	r2, r3
   15e78:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15e7c:	sub	r3, r2, r3
   15e80:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e84:	cmp	r2, #0
   15e88:	bne	15e98 <flatcc_builder_create_buffer@@Base+0x2fc>
   15e8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e90:	cmp	r2, #0
   15e94:	beq	15ea0 <flatcc_builder_create_buffer@@Base+0x304>
   15e98:	mov	r2, #4
   15e9c:	b	15ea4 <flatcc_builder_create_buffer@@Base+0x308>
   15ea0:	mov	r2, #0
   15ea4:	add	r3, r2, r3
   15ea8:	str	r3, [fp, #-32]	; 0xffffffe0
   15eac:	ldr	r3, [fp, #-20]	; 0xffffffec
   15eb0:	cmp	r3, #0
   15eb4:	beq	15ee0 <flatcc_builder_create_buffer@@Base+0x344>
   15eb8:	ldr	r3, [fp, #-128]	; 0xffffff80
   15ebc:	ldr	r3, [r3, #144]	; 0x90
   15ec0:	mov	r2, r3
   15ec4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ec8:	sub	r3, r2, r3
   15ecc:	mov	r0, r3
   15ed0:	bl	13db4 <main@@Base+0x128>
   15ed4:	mov	r3, r0
   15ed8:	str	r3, [fp, #-44]	; 0xffffffd4
   15edc:	b	15f04 <flatcc_builder_create_buffer@@Base+0x368>
   15ee0:	ldr	r3, [fp, #-128]	; 0xffffff80
   15ee4:	ldr	r3, [r3, #140]	; 0x8c
   15ee8:	mov	r2, r3
   15eec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ef0:	sub	r3, r2, r3
   15ef4:	mov	r0, r3
   15ef8:	bl	13db4 <main@@Base+0x128>
   15efc:	mov	r3, r0
   15f00:	str	r3, [fp, #-44]	; 0xffffffd4
   15f04:	ldr	r2, [fp, #-140]	; 0xffffff74
   15f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f0c:	sub	r3, r2, r3
   15f10:	mov	r0, r3
   15f14:	bl	13db4 <main@@Base+0x128>
   15f18:	mov	r3, r0
   15f1c:	str	r3, [fp, #-40]	; 0xffffffd8
   15f20:	sub	r3, fp, #116	; 0x74
   15f24:	mov	r1, r3
   15f28:	ldr	r0, [fp, #-128]	; 0xffffff80
   15f2c:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15f30:	str	r0, [fp, #-36]	; 0xffffffdc
   15f34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f38:	cmp	r3, #0
   15f3c:	bne	15f60 <flatcc_builder_create_buffer@@Base+0x3c4>
   15f40:	ldr	r3, [pc, #60]	; 15f84 <flatcc_builder_create_buffer@@Base+0x3e8>
   15f44:	add	r3, pc, r3
   15f48:	mov	r2, #772	; 0x304
   15f4c:	ldr	r1, [pc, #52]	; 15f88 <flatcc_builder_create_buffer@@Base+0x3ec>
   15f50:	add	r1, pc, r1
   15f54:	ldr	r0, [pc, #48]	; 15f8c <flatcc_builder_create_buffer@@Base+0x3f0>
   15f58:	add	r0, pc, r0
   15f5c:	bl	12324 <__assert_fail@plt>
   15f60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f64:	mov	r0, r3
   15f68:	sub	sp, fp, #8
   15f6c:	ldr	r4, [sp]
   15f70:	ldr	fp, [sp, #4]
   15f74:	add	sp, sp, #8
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)
   15f7c:	andeq	r9, r1, r0, lsr r4
   15f80:	andeq	r0, r0, r4, asr #32
   15f84:	andeq	r8, r0, ip
   15f88:	andeq	r7, r0, r4, lsr fp
   15f8c:	andeq	r7, r0, ip, lsl #23

00015f90 <flatcc_builder_create_struct@@Base>:
   15f90:	str	r4, [sp, #-12]!
   15f94:	str	fp, [sp, #4]
   15f98:	str	lr, [sp, #8]
   15f9c:	add	fp, sp, #8
   15fa0:	sub	sp, sp, #100	; 0x64
   15fa4:	str	r0, [fp, #-96]	; 0xffffffa0
   15fa8:	str	r1, [fp, #-100]	; 0xffffff9c
   15fac:	str	r2, [fp, #-104]	; 0xffffff98
   15fb0:	strh	r3, [fp, #-106]	; 0xffffff96
   15fb4:	ldr	r4, [pc, #340]	; 16110 <flatcc_builder_create_struct@@Base+0x180>
   15fb8:	add	r4, pc, r4
   15fbc:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15fc0:	cmp	r3, #0
   15fc4:	bne	15fe8 <flatcc_builder_create_struct@@Base+0x58>
   15fc8:	ldr	r3, [pc, #324]	; 16114 <flatcc_builder_create_struct@@Base+0x184>
   15fcc:	add	r3, pc, r3
   15fd0:	movw	r2, #783	; 0x30f
   15fd4:	ldr	r1, [pc, #316]	; 16118 <flatcc_builder_create_struct@@Base+0x188>
   15fd8:	add	r1, pc, r1
   15fdc:	ldr	r0, [pc, #312]	; 1611c <flatcc_builder_create_struct@@Base+0x18c>
   15fe0:	add	r0, pc, r0
   15fe4:	bl	12324 <__assert_fail@plt>
   15fe8:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15fec:	mov	r1, r3
   15ff0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15ff4:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   15ff8:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15ffc:	mov	r2, r3
   16000:	ldr	r1, [fp, #-104]	; 0xffffff98
   16004:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16008:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1600c:	str	r0, [fp, #-16]
   16010:	mov	r3, #0
   16014:	str	r3, [fp, #-88]	; 0xffffffa8
   16018:	mov	r3, #0
   1601c:	str	r3, [fp, #-84]	; 0xffffffac
   16020:	ldr	r3, [fp, #-104]	; 0xffffff98
   16024:	cmp	r3, #0
   16028:	beq	16080 <flatcc_builder_create_struct@@Base+0xf0>
   1602c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16030:	ldr	r3, [fp, #-104]	; 0xffffff98
   16034:	add	r3, r2, r3
   16038:	str	r3, [fp, #-88]	; 0xffffffa8
   1603c:	ldr	r3, [fp, #-84]	; 0xffffffac
   16040:	add	r3, r3, #1
   16044:	lsl	r3, r3, #3
   16048:	sub	r2, fp, #12
   1604c:	add	r3, r2, r3
   16050:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16054:	str	r2, [r3, #-76]	; 0xffffffb4
   16058:	ldr	r3, [fp, #-84]	; 0xffffffac
   1605c:	add	r3, r3, #1
   16060:	lsl	r3, r3, #3
   16064:	sub	r2, fp, #12
   16068:	add	r3, r2, r3
   1606c:	ldr	r2, [fp, #-104]	; 0xffffff98
   16070:	str	r2, [r3, #-72]	; 0xffffffb8
   16074:	ldr	r3, [fp, #-84]	; 0xffffffac
   16078:	add	r3, r3, #1
   1607c:	str	r3, [fp, #-84]	; 0xffffffac
   16080:	ldr	r3, [fp, #-16]
   16084:	cmp	r3, #0
   16088:	beq	160e4 <flatcc_builder_create_struct@@Base+0x154>
   1608c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16090:	ldr	r3, [fp, #-16]
   16094:	add	r3, r2, r3
   16098:	str	r3, [fp, #-88]	; 0xffffffa8
   1609c:	ldr	r3, [fp, #-84]	; 0xffffffac
   160a0:	add	r3, r3, #1
   160a4:	lsl	r3, r3, #3
   160a8:	sub	r2, fp, #12
   160ac:	add	r3, r2, r3
   160b0:	ldr	r2, [pc, #104]	; 16120 <flatcc_builder_create_struct@@Base+0x190>
   160b4:	ldr	r2, [r4, r2]
   160b8:	str	r2, [r3, #-76]	; 0xffffffb4
   160bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   160c0:	add	r3, r3, #1
   160c4:	lsl	r3, r3, #3
   160c8:	sub	r2, fp, #12
   160cc:	add	r3, r2, r3
   160d0:	ldr	r2, [fp, #-16]
   160d4:	str	r2, [r3, #-72]	; 0xffffffb8
   160d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   160dc:	add	r3, r3, #1
   160e0:	str	r3, [fp, #-84]	; 0xffffffac
   160e4:	sub	r3, fp, #88	; 0x58
   160e8:	mov	r1, r3
   160ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   160f0:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   160f4:	mov	r3, r0
   160f8:	mov	r0, r3
   160fc:	sub	sp, fp, #8
   16100:	ldr	r4, [sp]
   16104:	ldr	fp, [sp, #4]
   16108:	add	sp, sp, #8
   1610c:	pop	{pc}		; (ldr pc, [sp], #4)
   16110:	andeq	r9, r1, r0, asr #32
   16114:	andeq	r7, r0, r4, lsr #31
   16118:	andeq	r7, r0, ip, lsr #21
   1611c:	andeq	r7, r0, r8, ror #22
   16120:	andeq	r0, r0, r4, asr #32

00016124 <flatcc_builder_start_buffer@@Base>:
   16124:	str	r4, [sp, #-12]!
   16128:	str	fp, [sp, #4]
   1612c:	str	lr, [sp, #8]
   16130:	add	fp, sp, #8
   16134:	sub	sp, sp, #20
   16138:	str	r0, [fp, #-16]
   1613c:	str	r1, [fp, #-20]	; 0xffffffec
   16140:	str	r3, [fp, #-28]	; 0xffffffe4
   16144:	mov	r3, r2
   16148:	strh	r3, [fp, #-22]	; 0xffffffea
   1614c:	ldr	r4, [pc, #312]	; 1628c <flatcc_builder_start_buffer@@Base+0x168>
   16150:	add	r4, pc, r4
   16154:	ldr	r3, [fp, #-16]
   16158:	ldrh	r3, [r3, #128]	; 0x80
   1615c:	mov	r1, r3
   16160:	ldr	r0, [fp, #-16]
   16164:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16168:	mov	r3, r0
   1616c:	cmp	r3, #0
   16170:	beq	1617c <flatcc_builder_start_buffer@@Base+0x58>
   16174:	mvn	r3, #0
   16178:	b	16274 <flatcc_builder_start_buffer@@Base+0x150>
   1617c:	ldr	r3, [fp, #-16]
   16180:	mov	r2, #1
   16184:	strh	r2, [r3, #128]	; 0x80
   16188:	ldr	r3, [fp, #-16]
   1618c:	ldr	r3, [r3, #32]
   16190:	ldr	r2, [fp, #-16]
   16194:	ldrh	r2, [r2, #132]	; 0x84
   16198:	strh	r2, [r3, #34]	; 0x22
   1619c:	ldr	r3, [fp, #-16]
   161a0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   161a4:	strh	r2, [r3, #132]	; 0x84
   161a8:	ldr	r3, [fp, #-16]
   161ac:	ldr	r3, [r3, #32]
   161b0:	ldr	r2, [fp, #-16]
   161b4:	ldrh	r2, [r2, #164]	; 0xa4
   161b8:	strh	r2, [r3, #32]
   161bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   161c0:	uxth	r2, r3
   161c4:	ldr	r3, [fp, #-16]
   161c8:	strh	r2, [r3, #164]	; 0xa4
   161cc:	ldr	r3, [fp, #-16]
   161d0:	ldr	r3, [r3, #32]
   161d4:	ldr	r2, [fp, #-16]
   161d8:	ldr	r2, [r2, #144]	; 0x90
   161dc:	str	r2, [r3, #20]
   161e0:	ldr	r3, [fp, #-16]
   161e4:	ldr	r3, [r3, #32]
   161e8:	ldr	r2, [fp, #-16]
   161ec:	ldr	r2, [r2, #152]	; 0x98
   161f0:	str	r2, [r3, #28]
   161f4:	ldr	r3, [fp, #-16]
   161f8:	ldr	r2, [r3, #136]	; 0x88
   161fc:	ldr	r3, [fp, #-16]
   16200:	str	r2, [r3, #144]	; 0x90
   16204:	ldr	r3, [fp, #-16]
   16208:	ldr	r3, [r3, #148]	; 0x94
   1620c:	add	r1, r3, #1
   16210:	ldr	r2, [fp, #-16]
   16214:	str	r1, [r2, #148]	; 0x94
   16218:	ldr	r2, [fp, #-16]
   1621c:	str	r3, [r2, #152]	; 0x98
   16220:	ldr	r3, [fp, #-16]
   16224:	ldr	r3, [r3, #32]
   16228:	ldr	r2, [fp, #-16]
   1622c:	ldr	r2, [r2, #168]	; 0xa8
   16230:	str	r2, [r3, #16]
   16234:	ldr	r3, [fp, #-16]
   16238:	add	r2, r3, #168	; 0xa8
   1623c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16240:	cmp	r3, #0
   16244:	beq	16250 <flatcc_builder_start_buffer@@Base+0x12c>
   16248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1624c:	b	16258 <flatcc_builder_start_buffer@@Base+0x134>
   16250:	ldr	r3, [pc, #56]	; 16290 <flatcc_builder_start_buffer@@Base+0x16c>
   16254:	ldr	r3, [r4, r3]
   16258:	ldr	r3, [r3]
   1625c:	str	r3, [r2]
   16260:	ldr	r3, [fp, #-16]
   16264:	ldr	r3, [r3, #32]
   16268:	mov	r2, #1
   1626c:	strh	r2, [r3, #14]
   16270:	mov	r3, #0
   16274:	mov	r0, r3
   16278:	sub	sp, fp, #8
   1627c:	ldr	r4, [sp]
   16280:	ldr	fp, [sp, #4]
   16284:	add	sp, sp, #8
   16288:	pop	{pc}		; (ldr pc, [sp], #4)
   1628c:	andeq	r8, r1, r8, lsr #29
   16290:	andeq	r0, r0, r4, asr #32

00016294 <flatcc_builder_end_buffer@@Base>:
   16294:	str	fp, [sp, #-8]!
   16298:	str	lr, [sp, #4]
   1629c:	add	fp, sp, #4
   162a0:	sub	sp, sp, #24
   162a4:	str	r0, [fp, #-16]
   162a8:	str	r1, [fp, #-20]	; 0xffffffec
   162ac:	ldr	r3, [fp, #-16]
   162b0:	ldrh	r3, [r3, #164]	; 0xa4
   162b4:	and	r3, r3, #2
   162b8:	str	r3, [fp, #-8]
   162bc:	ldr	r3, [fp, #-16]
   162c0:	ldr	r3, [r3, #152]	; 0x98
   162c4:	cmp	r3, #0
   162c8:	movne	r3, #1
   162cc:	moveq	r3, #0
   162d0:	uxtb	r3, r3
   162d4:	mov	r2, r3
   162d8:	ldr	r3, [fp, #-8]
   162dc:	orr	r3, r3, r2
   162e0:	str	r3, [fp, #-8]
   162e4:	ldr	r3, [fp, #-16]
   162e8:	ldr	r3, [r3, #32]
   162ec:	ldrh	r3, [r3, #14]
   162f0:	cmp	r3, #1
   162f4:	beq	16318 <flatcc_builder_end_buffer@@Base+0x84>
   162f8:	ldr	r3, [pc, #232]	; 163e8 <flatcc_builder_end_buffer@@Base+0x154>
   162fc:	add	r3, pc, r3
   16300:	movw	r2, #838	; 0x346
   16304:	ldr	r1, [pc, #224]	; 163ec <flatcc_builder_end_buffer@@Base+0x158>
   16308:	add	r1, pc, r1
   1630c:	ldr	r0, [pc, #220]	; 163f0 <flatcc_builder_end_buffer@@Base+0x15c>
   16310:	add	r0, pc, r0
   16314:	bl	12324 <__assert_fail@plt>
   16318:	ldr	r3, [fp, #-16]
   1631c:	ldrh	r3, [r3, #132]	; 0x84
   16320:	mov	r1, r3
   16324:	ldr	r0, [fp, #-16]
   16328:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   1632c:	ldr	r3, [fp, #-16]
   16330:	add	r1, r3, #168	; 0xa8
   16334:	ldr	r3, [fp, #-16]
   16338:	ldrh	r0, [r3, #132]	; 0x84
   1633c:	ldr	r3, [fp, #-16]
   16340:	ldrh	r3, [r3, #128]	; 0x80
   16344:	ldr	r2, [fp, #-8]
   16348:	str	r2, [sp, #4]
   1634c:	str	r3, [sp]
   16350:	ldr	r3, [fp, #-20]	; 0xffffffec
   16354:	mov	r2, r0
   16358:	ldr	r0, [fp, #-16]
   1635c:	bl	15b9c <flatcc_builder_create_buffer@@Base>
   16360:	str	r0, [fp, #-12]
   16364:	ldr	r3, [fp, #-12]
   16368:	cmp	r3, #0
   1636c:	bne	16378 <flatcc_builder_end_buffer@@Base+0xe4>
   16370:	mov	r3, #0
   16374:	b	163d4 <flatcc_builder_end_buffer@@Base+0x140>
   16378:	ldr	r3, [fp, #-16]
   1637c:	ldr	r3, [r3, #32]
   16380:	ldr	r2, [r3, #20]
   16384:	ldr	r3, [fp, #-16]
   16388:	str	r2, [r3, #144]	; 0x90
   1638c:	ldr	r3, [fp, #-16]
   16390:	ldr	r3, [r3, #32]
   16394:	ldr	r2, [r3, #28]
   16398:	ldr	r3, [fp, #-16]
   1639c:	str	r2, [r3, #152]	; 0x98
   163a0:	ldr	r3, [fp, #-16]
   163a4:	ldr	r3, [r3, #32]
   163a8:	ldr	r2, [r3, #16]
   163ac:	ldr	r3, [fp, #-16]
   163b0:	str	r2, [r3, #168]	; 0xa8
   163b4:	ldr	r3, [fp, #-16]
   163b8:	ldr	r3, [r3, #32]
   163bc:	ldrh	r2, [r3, #32]
   163c0:	ldr	r3, [fp, #-16]
   163c4:	strh	r2, [r3, #164]	; 0xa4
   163c8:	ldr	r0, [fp, #-16]
   163cc:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   163d0:	ldr	r3, [fp, #-12]
   163d4:	mov	r0, r3
   163d8:	sub	sp, fp, #4
   163dc:	ldr	fp, [sp]
   163e0:	add	sp, sp, #4
   163e4:	pop	{pc}		; (ldr pc, [sp], #4)
   163e8:	muleq	r0, r4, ip
   163ec:	andeq	r7, r0, ip, ror r7
   163f0:	andeq	r7, r0, r4, asr #16

000163f4 <flatcc_builder_start_struct@@Base>:
   163f4:	str	fp, [sp, #-8]!
   163f8:	str	lr, [sp, #4]
   163fc:	add	fp, sp, #4
   16400:	sub	sp, sp, #16
   16404:	str	r0, [fp, #-8]
   16408:	str	r1, [fp, #-12]
   1640c:	mov	r3, r2
   16410:	strh	r3, [fp, #-14]
   16414:	ldrh	r3, [fp, #-14]
   16418:	mov	r1, r3
   1641c:	ldr	r0, [fp, #-8]
   16420:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16424:	mov	r3, r0
   16428:	cmp	r3, #0
   1642c:	beq	16438 <flatcc_builder_start_struct@@Base+0x44>
   16430:	mov	r3, #0
   16434:	b	16464 <flatcc_builder_start_struct@@Base+0x70>
   16438:	ldr	r3, [fp, #-8]
   1643c:	ldr	r3, [r3, #32]
   16440:	mov	r2, #2
   16444:	strh	r2, [r3, #14]
   16448:	mvn	r1, #3
   1644c:	ldr	r0, [fp, #-8]
   16450:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   16454:	ldr	r1, [fp, #-12]
   16458:	ldr	r0, [fp, #-8]
   1645c:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   16460:	mov	r3, r0
   16464:	mov	r0, r3
   16468:	sub	sp, fp, #4
   1646c:	ldr	fp, [sp]
   16470:	add	sp, sp, #4
   16474:	pop	{pc}		; (ldr pc, [sp], #4)

00016478 <flatcc_builder_struct_edit@@Base>:
   16478:	push	{fp}		; (str fp, [sp, #-4]!)
   1647c:	add	fp, sp, #0
   16480:	sub	sp, sp, #12
   16484:	str	r0, [fp, #-8]
   16488:	ldr	r3, [fp, #-8]
   1648c:	ldr	r3, [r3, #16]
   16490:	mov	r0, r3
   16494:	add	sp, fp, #0
   16498:	pop	{fp}		; (ldr fp, [sp], #4)
   1649c:	bx	lr

000164a0 <flatcc_builder_end_struct@@Base>:
   164a0:	str	fp, [sp, #-8]!
   164a4:	str	lr, [sp, #4]
   164a8:	add	fp, sp, #4
   164ac:	sub	sp, sp, #16
   164b0:	str	r0, [fp, #-16]
   164b4:	ldr	r3, [fp, #-16]
   164b8:	ldr	r3, [r3, #32]
   164bc:	ldrh	r3, [r3, #14]
   164c0:	cmp	r3, #2
   164c4:	beq	164e8 <flatcc_builder_end_struct@@Base+0x48>
   164c8:	ldr	r3, [pc, #112]	; 16540 <flatcc_builder_end_struct@@Base+0xa0>
   164cc:	add	r3, pc, r3
   164d0:	mov	r2, #872	; 0x368
   164d4:	ldr	r1, [pc, #104]	; 16544 <flatcc_builder_end_struct@@Base+0xa4>
   164d8:	add	r1, pc, r1
   164dc:	ldr	r0, [pc, #100]	; 16548 <flatcc_builder_end_struct@@Base+0xa8>
   164e0:	add	r0, pc, r0
   164e4:	bl	12324 <__assert_fail@plt>
   164e8:	ldr	r3, [fp, #-16]
   164ec:	ldr	r1, [r3, #16]
   164f0:	ldr	r3, [fp, #-16]
   164f4:	ldr	r2, [r3, #20]
   164f8:	ldr	r3, [fp, #-16]
   164fc:	ldrh	r3, [r3, #130]	; 0x82
   16500:	ldr	r0, [fp, #-16]
   16504:	bl	15f90 <flatcc_builder_create_struct@@Base>
   16508:	str	r0, [fp, #-8]
   1650c:	ldr	r3, [fp, #-8]
   16510:	cmp	r3, #0
   16514:	bne	16520 <flatcc_builder_end_struct@@Base+0x80>
   16518:	mov	r3, #0
   1651c:	b	1652c <flatcc_builder_end_struct@@Base+0x8c>
   16520:	ldr	r0, [fp, #-16]
   16524:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   16528:	ldr	r3, [fp, #-8]
   1652c:	mov	r0, r3
   16530:	sub	sp, fp, #4
   16534:	ldr	fp, [sp]
   16538:	add	sp, sp, #4
   1653c:	pop	{pc}		; (ldr pc, [sp], #4)
   16540:	andeq	r7, r0, r0, ror #21
   16544:	andeq	r7, r0, ip, lsr #11
   16548:	andeq	r7, r0, r0, lsr #13
   1654c:	str	fp, [sp, #-8]!
   16550:	str	lr, [sp, #4]
   16554:	add	fp, sp, #4
   16558:	sub	sp, sp, #24
   1655c:	str	r0, [fp, #-16]
   16560:	str	r1, [fp, #-20]	; 0xffffffec
   16564:	str	r2, [fp, #-24]	; 0xffffffe8
   16568:	ldr	r3, [fp, #-16]
   1656c:	ldr	r3, [r3, #32]
   16570:	ldr	r3, [r3, #20]
   16574:	str	r3, [fp, #-8]
   16578:	ldr	r2, [fp, #-8]
   1657c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16580:	add	r3, r2, r3
   16584:	str	r3, [fp, #-12]
   16588:	ldr	r2, [fp, #-8]
   1658c:	ldr	r3, [fp, #-12]
   16590:	cmp	r2, r3
   16594:	bhi	165a8 <flatcc_builder_end_struct@@Base+0x108>
   16598:	ldr	r2, [fp, #-12]
   1659c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165a0:	cmp	r2, r3
   165a4:	bls	165f0 <flatcc_builder_end_struct@@Base+0x150>
   165a8:	ldr	r2, [fp, #-8]
   165ac:	ldr	r3, [fp, #-12]
   165b0:	cmp	r2, r3
   165b4:	bhi	165c8 <flatcc_builder_end_struct@@Base+0x128>
   165b8:	ldr	r2, [fp, #-12]
   165bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165c0:	cmp	r2, r3
   165c4:	bls	165e8 <flatcc_builder_end_struct@@Base+0x148>
   165c8:	ldr	r3, [pc, #72]	; 16618 <flatcc_builder_end_struct@@Base+0x178>
   165cc:	add	r3, pc, r3
   165d0:	mov	r2, #892	; 0x37c
   165d4:	ldr	r1, [pc, #64]	; 1661c <flatcc_builder_end_struct@@Base+0x17c>
   165d8:	add	r1, pc, r1
   165dc:	ldr	r0, [pc, #60]	; 16620 <flatcc_builder_end_struct@@Base+0x180>
   165e0:	add	r0, pc, r0
   165e4:	bl	12324 <__assert_fail@plt>
   165e8:	mvn	r3, #0
   165ec:	b	16604 <flatcc_builder_end_struct@@Base+0x164>
   165f0:	ldr	r3, [fp, #-16]
   165f4:	ldr	r3, [r3, #32]
   165f8:	ldr	r2, [fp, #-12]
   165fc:	str	r2, [r3, #20]
   16600:	mov	r3, #0
   16604:	mov	r0, r3
   16608:	sub	sp, fp, #4
   1660c:	ldr	fp, [sp]
   16610:	add	sp, sp, #4
   16614:	pop	{pc}		; (ldr pc, [sp], #4)
   16618:	strdeq	r7, [r0], -ip
   1661c:	andeq	r7, r0, ip, lsr #9
   16620:	andeq	r7, r0, ip, asr #11

00016624 <flatcc_builder_extend_vector@@Base>:
   16624:	str	fp, [sp, #-8]!
   16628:	str	lr, [sp, #4]
   1662c:	add	fp, sp, #4
   16630:	sub	sp, sp, #8
   16634:	str	r0, [fp, #-8]
   16638:	str	r1, [fp, #-12]
   1663c:	ldr	r3, [fp, #-8]
   16640:	ldr	r3, [r3, #32]
   16644:	ldr	r3, [r3, #24]
   16648:	mov	r2, r3
   1664c:	ldr	r1, [fp, #-12]
   16650:	ldr	r0, [fp, #-8]
   16654:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   16658:	mov	r3, r0
   1665c:	cmp	r3, #0
   16660:	beq	1666c <flatcc_builder_extend_vector@@Base+0x48>
   16664:	mov	r3, #0
   16668:	b	16690 <flatcc_builder_extend_vector@@Base+0x6c>
   1666c:	ldr	r3, [fp, #-8]
   16670:	ldr	r3, [r3, #32]
   16674:	ldr	r3, [r3, #16]
   16678:	ldr	r2, [fp, #-12]
   1667c:	mul	r3, r2, r3
   16680:	mov	r1, r3
   16684:	ldr	r0, [fp, #-8]
   16688:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   1668c:	mov	r3, r0
   16690:	mov	r0, r3
   16694:	sub	sp, fp, #4
   16698:	ldr	fp, [sp]
   1669c:	add	sp, sp, #4
   166a0:	pop	{pc}		; (ldr pc, [sp], #4)

000166a4 <flatcc_builder_vector_push@@Base>:
   166a4:	str	fp, [sp, #-8]!
   166a8:	str	lr, [sp, #4]
   166ac:	add	fp, sp, #4
   166b0:	sub	sp, sp, #8
   166b4:	str	r0, [fp, #-8]
   166b8:	str	r1, [fp, #-12]
   166bc:	ldr	r3, [fp, #-8]
   166c0:	ldr	r3, [r3, #32]
   166c4:	ldrh	r3, [r3, #14]
   166c8:	cmp	r3, #4
   166cc:	beq	166f0 <flatcc_builder_vector_push@@Base+0x4c>
   166d0:	ldr	r3, [pc, #208]	; 167a8 <flatcc_builder_vector_push@@Base+0x104>
   166d4:	add	r3, pc, r3
   166d8:	movw	r2, #907	; 0x38b
   166dc:	ldr	r1, [pc, #200]	; 167ac <flatcc_builder_vector_push@@Base+0x108>
   166e0:	add	r1, pc, r1
   166e4:	ldr	r0, [pc, #196]	; 167b0 <flatcc_builder_vector_push@@Base+0x10c>
   166e8:	add	r0, pc, r0
   166ec:	bl	12324 <__assert_fail@plt>
   166f0:	ldr	r3, [fp, #-8]
   166f4:	ldr	r3, [r3, #32]
   166f8:	ldr	r2, [r3, #20]
   166fc:	ldr	r3, [fp, #-8]
   16700:	ldr	r3, [r3, #32]
   16704:	ldr	r3, [r3, #24]
   16708:	cmp	r2, r3
   1670c:	bls	16758 <flatcc_builder_vector_push@@Base+0xb4>
   16710:	ldr	r3, [fp, #-8]
   16714:	ldr	r3, [r3, #32]
   16718:	ldr	r2, [r3, #20]
   1671c:	ldr	r3, [fp, #-8]
   16720:	ldr	r3, [r3, #32]
   16724:	ldr	r3, [r3, #24]
   16728:	cmp	r2, r3
   1672c:	bls	16750 <flatcc_builder_vector_push@@Base+0xac>
   16730:	ldr	r3, [pc, #124]	; 167b4 <flatcc_builder_vector_push@@Base+0x110>
   16734:	add	r3, pc, r3
   16738:	mov	r2, #908	; 0x38c
   1673c:	ldr	r1, [pc, #116]	; 167b8 <flatcc_builder_vector_push@@Base+0x114>
   16740:	add	r1, pc, r1
   16744:	ldr	r0, [pc, #112]	; 167bc <flatcc_builder_vector_push@@Base+0x118>
   16748:	add	r0, pc, r0
   1674c:	bl	12324 <__assert_fail@plt>
   16750:	mov	r3, #0
   16754:	b	16794 <flatcc_builder_vector_push@@Base+0xf0>
   16758:	ldr	r3, [fp, #-8]
   1675c:	ldr	r3, [r3, #32]
   16760:	ldr	r2, [r3, #20]
   16764:	ldr	r3, [fp, #-8]
   16768:	ldr	r3, [r3, #32]
   1676c:	add	r2, r2, #1
   16770:	str	r2, [r3, #20]
   16774:	ldr	r3, [fp, #-8]
   16778:	ldr	r3, [r3, #32]
   1677c:	ldr	r3, [r3, #16]
   16780:	mov	r2, r3
   16784:	ldr	r1, [fp, #-12]
   16788:	ldr	r0, [fp, #-8]
   1678c:	bl	14324 <flatcc_builder_default_alloc@@Base+0x420>
   16790:	mov	r3, r0
   16794:	mov	r0, r3
   16798:	sub	sp, fp, #4
   1679c:	ldr	fp, [sp]
   167a0:	add	sp, sp, #4
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	andeq	r7, r0, r8, lsl #18
   167ac:	andeq	r7, r0, r4, lsr #7
   167b0:	andeq	r7, r0, r0, ror #9
   167b4:	andeq	r7, r0, r8, lsr #17
   167b8:	andeq	r7, r0, r4, asr #6
   167bc:	andeq	r7, r0, ip, lsr #9

000167c0 <flatcc_builder_append_vector@@Base>:
   167c0:	str	fp, [sp, #-8]!
   167c4:	str	lr, [sp, #4]
   167c8:	add	fp, sp, #4
   167cc:	sub	sp, sp, #16
   167d0:	str	r0, [fp, #-8]
   167d4:	str	r1, [fp, #-12]
   167d8:	str	r2, [fp, #-16]
   167dc:	ldr	r3, [fp, #-8]
   167e0:	ldr	r3, [r3, #32]
   167e4:	ldrh	r3, [r3, #14]
   167e8:	cmp	r3, #4
   167ec:	beq	16810 <flatcc_builder_append_vector@@Base+0x50>
   167f0:	ldr	r3, [pc, #132]	; 1687c <flatcc_builder_append_vector@@Base+0xbc>
   167f4:	add	r3, pc, r3
   167f8:	movw	r2, #915	; 0x393
   167fc:	ldr	r1, [pc, #124]	; 16880 <flatcc_builder_append_vector@@Base+0xc0>
   16800:	add	r1, pc, r1
   16804:	ldr	r0, [pc, #120]	; 16884 <flatcc_builder_append_vector@@Base+0xc4>
   16808:	add	r0, pc, r0
   1680c:	bl	12324 <__assert_fail@plt>
   16810:	ldr	r3, [fp, #-8]
   16814:	ldr	r3, [r3, #32]
   16818:	ldr	r3, [r3, #24]
   1681c:	mov	r2, r3
   16820:	ldr	r1, [fp, #-16]
   16824:	ldr	r0, [fp, #-8]
   16828:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   1682c:	mov	r3, r0
   16830:	cmp	r3, #0
   16834:	beq	16840 <flatcc_builder_append_vector@@Base+0x80>
   16838:	mov	r3, #0
   1683c:	b	16868 <flatcc_builder_append_vector@@Base+0xa8>
   16840:	ldr	r3, [fp, #-8]
   16844:	ldr	r3, [r3, #32]
   16848:	ldr	r3, [r3, #16]
   1684c:	ldr	r2, [fp, #-16]
   16850:	mul	r3, r2, r3
   16854:	mov	r2, r3
   16858:	ldr	r1, [fp, #-12]
   1685c:	ldr	r0, [fp, #-8]
   16860:	bl	14324 <flatcc_builder_default_alloc@@Base+0x420>
   16864:	mov	r3, r0
   16868:	mov	r0, r3
   1686c:	sub	sp, fp, #4
   16870:	ldr	fp, [sp]
   16874:	add	sp, sp, #4
   16878:	pop	{pc}		; (ldr pc, [sp], #4)
   1687c:	andeq	r7, r0, r4, lsl #16
   16880:	andeq	r7, r0, r4, lsl #5
   16884:	andeq	r7, r0, r0, asr #7

00016888 <flatcc_builder_extend_offset_vector@@Base>:
   16888:	str	fp, [sp, #-8]!
   1688c:	str	lr, [sp, #4]
   16890:	add	fp, sp, #4
   16894:	sub	sp, sp, #8
   16898:	str	r0, [fp, #-8]
   1689c:	str	r1, [fp, #-12]
   168a0:	mvn	r2, #-1073741824	; 0xc0000000
   168a4:	ldr	r1, [fp, #-12]
   168a8:	ldr	r0, [fp, #-8]
   168ac:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   168b0:	mov	r3, r0
   168b4:	cmp	r3, #0
   168b8:	beq	168c4 <flatcc_builder_extend_offset_vector@@Base+0x3c>
   168bc:	mov	r3, #0
   168c0:	b	168dc <flatcc_builder_extend_offset_vector@@Base+0x54>
   168c4:	ldr	r3, [fp, #-12]
   168c8:	lsl	r3, r3, #2
   168cc:	mov	r1, r3
   168d0:	ldr	r0, [fp, #-8]
   168d4:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   168d8:	mov	r3, r0
   168dc:	mov	r0, r3
   168e0:	sub	sp, fp, #4
   168e4:	ldr	fp, [sp]
   168e8:	add	sp, sp, #4
   168ec:	pop	{pc}		; (ldr pc, [sp], #4)

000168f0 <flatcc_builder_offset_vector_push@@Base>:
   168f0:	str	fp, [sp, #-8]!
   168f4:	str	lr, [sp, #4]
   168f8:	add	fp, sp, #4
   168fc:	sub	sp, sp, #16
   16900:	str	r0, [fp, #-16]
   16904:	str	r1, [fp, #-20]	; 0xffffffec
   16908:	ldr	r3, [fp, #-16]
   1690c:	ldr	r3, [r3, #32]
   16910:	ldrh	r3, [r3, #14]
   16914:	cmp	r3, #5
   16918:	beq	1693c <flatcc_builder_offset_vector_push@@Base+0x4c>
   1691c:	ldr	r3, [pc, #152]	; 169bc <flatcc_builder_offset_vector_push@@Base+0xcc>
   16920:	add	r3, pc, r3
   16924:	movw	r2, #934	; 0x3a6
   16928:	ldr	r1, [pc, #144]	; 169c0 <flatcc_builder_offset_vector_push@@Base+0xd0>
   1692c:	add	r1, pc, r1
   16930:	ldr	r0, [pc, #140]	; 169c4 <flatcc_builder_offset_vector_push@@Base+0xd4>
   16934:	add	r0, pc, r0
   16938:	bl	12324 <__assert_fail@plt>
   1693c:	ldr	r3, [fp, #-16]
   16940:	ldr	r3, [r3, #32]
   16944:	ldr	r3, [r3, #20]
   16948:	cmn	r3, #-1073741823	; 0xc0000001
   1694c:	bne	16958 <flatcc_builder_offset_vector_push@@Base+0x68>
   16950:	mov	r3, #0
   16954:	b	169a8 <flatcc_builder_offset_vector_push@@Base+0xb8>
   16958:	ldr	r3, [fp, #-16]
   1695c:	ldr	r3, [r3, #32]
   16960:	ldr	r2, [r3, #20]
   16964:	ldr	r3, [fp, #-16]
   16968:	ldr	r3, [r3, #32]
   1696c:	add	r2, r2, #1
   16970:	str	r2, [r3, #20]
   16974:	mov	r1, #4
   16978:	ldr	r0, [fp, #-16]
   1697c:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   16980:	str	r0, [fp, #-8]
   16984:	ldr	r3, [fp, #-8]
   16988:	cmp	r3, #0
   1698c:	bne	16998 <flatcc_builder_offset_vector_push@@Base+0xa8>
   16990:	mov	r3, #0
   16994:	b	169a8 <flatcc_builder_offset_vector_push@@Base+0xb8>
   16998:	ldr	r3, [fp, #-8]
   1699c:	ldr	r2, [fp, #-20]	; 0xffffffec
   169a0:	str	r2, [r3]
   169a4:	ldr	r3, [fp, #-8]
   169a8:	mov	r0, r3
   169ac:	sub	sp, fp, #4
   169b0:	ldr	fp, [sp]
   169b4:	add	sp, sp, #4
   169b8:	pop	{pc}		; (ldr pc, [sp], #4)
   169bc:	strdeq	r7, [r0], -r8
   169c0:	andeq	r7, r0, r8, asr r1
   169c4:	andeq	r7, r0, r0, lsl #6

000169c8 <flatcc_builder_append_offset_vector@@Base>:
   169c8:	str	fp, [sp, #-8]!
   169cc:	str	lr, [sp, #4]
   169d0:	add	fp, sp, #4
   169d4:	sub	sp, sp, #16
   169d8:	str	r0, [fp, #-8]
   169dc:	str	r1, [fp, #-12]
   169e0:	str	r2, [fp, #-16]
   169e4:	ldr	r3, [fp, #-8]
   169e8:	ldr	r3, [r3, #32]
   169ec:	ldrh	r3, [r3, #14]
   169f0:	cmp	r3, #5
   169f4:	beq	16a18 <flatcc_builder_append_offset_vector@@Base+0x50>
   169f8:	ldr	r3, [pc, #108]	; 16a6c <flatcc_builder_append_offset_vector@@Base+0xa4>
   169fc:	add	r3, pc, r3
   16a00:	mov	r2, #948	; 0x3b4
   16a04:	ldr	r1, [pc, #100]	; 16a70 <flatcc_builder_append_offset_vector@@Base+0xa8>
   16a08:	add	r1, pc, r1
   16a0c:	ldr	r0, [pc, #96]	; 16a74 <flatcc_builder_append_offset_vector@@Base+0xac>
   16a10:	add	r0, pc, r0
   16a14:	bl	12324 <__assert_fail@plt>
   16a18:	mvn	r2, #-1073741824	; 0xc0000000
   16a1c:	ldr	r1, [fp, #-16]
   16a20:	ldr	r0, [fp, #-8]
   16a24:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   16a28:	mov	r3, r0
   16a2c:	cmp	r3, #0
   16a30:	beq	16a3c <flatcc_builder_append_offset_vector@@Base+0x74>
   16a34:	mov	r3, #0
   16a38:	b	16a58 <flatcc_builder_append_offset_vector@@Base+0x90>
   16a3c:	ldr	r3, [fp, #-16]
   16a40:	lsl	r3, r3, #2
   16a44:	mov	r2, r3
   16a48:	ldr	r1, [fp, #-12]
   16a4c:	ldr	r0, [fp, #-8]
   16a50:	bl	14324 <flatcc_builder_default_alloc@@Base+0x420>
   16a54:	mov	r3, r0
   16a58:	mov	r0, r3
   16a5c:	sub	sp, fp, #4
   16a60:	ldr	fp, [sp]
   16a64:	add	sp, sp, #4
   16a68:	pop	{pc}		; (ldr pc, [sp], #4)
   16a6c:	andeq	r7, r0, r0, asr #12
   16a70:	andeq	r7, r0, ip, ror r0
   16a74:	andeq	r7, r0, r4, lsr #4

00016a78 <flatcc_builder_extend_string@@Base>:
   16a78:	str	fp, [sp, #-8]!
   16a7c:	str	lr, [sp, #4]
   16a80:	add	fp, sp, #4
   16a84:	sub	sp, sp, #8
   16a88:	str	r0, [fp, #-8]
   16a8c:	str	r1, [fp, #-12]
   16a90:	ldr	r3, [fp, #-8]
   16a94:	ldr	r3, [r3, #32]
   16a98:	ldrh	r3, [r3, #14]
   16a9c:	cmp	r3, #6
   16aa0:	beq	16ac4 <flatcc_builder_extend_string@@Base+0x4c>
   16aa4:	ldr	r3, [pc, #96]	; 16b0c <flatcc_builder_extend_string@@Base+0x94>
   16aa8:	add	r3, pc, r3
   16aac:	movw	r2, #957	; 0x3bd
   16ab0:	ldr	r1, [pc, #88]	; 16b10 <flatcc_builder_extend_string@@Base+0x98>
   16ab4:	add	r1, pc, r1
   16ab8:	ldr	r0, [pc, #84]	; 16b14 <flatcc_builder_extend_string@@Base+0x9c>
   16abc:	add	r0, pc, r0
   16ac0:	bl	12324 <__assert_fail@plt>
   16ac4:	mvn	r2, #0
   16ac8:	ldr	r1, [fp, #-12]
   16acc:	ldr	r0, [fp, #-8]
   16ad0:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   16ad4:	mov	r3, r0
   16ad8:	cmp	r3, #0
   16adc:	beq	16ae8 <flatcc_builder_extend_string@@Base+0x70>
   16ae0:	mov	r3, #0
   16ae4:	b	16af8 <flatcc_builder_extend_string@@Base+0x80>
   16ae8:	ldr	r1, [fp, #-12]
   16aec:	ldr	r0, [fp, #-8]
   16af0:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   16af4:	mov	r3, r0
   16af8:	mov	r0, r3
   16afc:	sub	sp, fp, #4
   16b00:	ldr	fp, [sp]
   16b04:	add	sp, sp, #4
   16b08:	pop	{pc}		; (ldr pc, [sp], #4)
   16b0c:			; <UNDEFINED> instruction: 0x000075b8
   16b10:	ldrdeq	r6, [r0], -r0
   16b14:	andeq	r7, r0, ip, lsr #3

00016b18 <flatcc_builder_append_string@@Base>:
   16b18:	str	fp, [sp, #-8]!
   16b1c:	str	lr, [sp, #4]
   16b20:	add	fp, sp, #4
   16b24:	sub	sp, sp, #16
   16b28:	str	r0, [fp, #-8]
   16b2c:	str	r1, [fp, #-12]
   16b30:	str	r2, [fp, #-16]
   16b34:	ldr	r3, [fp, #-8]
   16b38:	ldr	r3, [r3, #32]
   16b3c:	ldrh	r3, [r3, #14]
   16b40:	cmp	r3, #6
   16b44:	beq	16b68 <flatcc_builder_append_string@@Base+0x50>
   16b48:	ldr	r3, [pc, #100]	; 16bb4 <flatcc_builder_append_string@@Base+0x9c>
   16b4c:	add	r3, pc, r3
   16b50:	movw	r2, #966	; 0x3c6
   16b54:	ldr	r1, [pc, #92]	; 16bb8 <flatcc_builder_append_string@@Base+0xa0>
   16b58:	add	r1, pc, r1
   16b5c:	ldr	r0, [pc, #88]	; 16bbc <flatcc_builder_append_string@@Base+0xa4>
   16b60:	add	r0, pc, r0
   16b64:	bl	12324 <__assert_fail@plt>
   16b68:	mvn	r2, #0
   16b6c:	ldr	r1, [fp, #-16]
   16b70:	ldr	r0, [fp, #-8]
   16b74:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   16b78:	mov	r3, r0
   16b7c:	cmp	r3, #0
   16b80:	beq	16b8c <flatcc_builder_append_string@@Base+0x74>
   16b84:	mov	r3, #0
   16b88:	b	16ba0 <flatcc_builder_append_string@@Base+0x88>
   16b8c:	ldr	r2, [fp, #-16]
   16b90:	ldr	r1, [fp, #-12]
   16b94:	ldr	r0, [fp, #-8]
   16b98:	bl	14324 <flatcc_builder_default_alloc@@Base+0x420>
   16b9c:	mov	r3, r0
   16ba0:	mov	r0, r3
   16ba4:	sub	sp, fp, #4
   16ba8:	ldr	fp, [sp]
   16bac:	add	sp, sp, #4
   16bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb4:	andeq	r7, r0, r4, lsr r5
   16bb8:	andeq	r6, r0, ip, lsr #30
   16bbc:	andeq	r7, r0, r8, lsl #2

00016bc0 <flatcc_builder_append_string_str@@Base>:
   16bc0:	str	fp, [sp, #-8]!
   16bc4:	str	lr, [sp, #4]
   16bc8:	add	fp, sp, #4
   16bcc:	sub	sp, sp, #8
   16bd0:	str	r0, [fp, #-8]
   16bd4:	str	r1, [fp, #-12]
   16bd8:	ldr	r0, [fp, #-12]
   16bdc:	bl	122dc <strlen@plt>
   16be0:	mov	r3, r0
   16be4:	mov	r2, r3
   16be8:	ldr	r1, [fp, #-12]
   16bec:	ldr	r0, [fp, #-8]
   16bf0:	bl	16b18 <flatcc_builder_append_string@@Base>
   16bf4:	mov	r3, r0
   16bf8:	mov	r0, r3
   16bfc:	sub	sp, fp, #4
   16c00:	ldr	fp, [sp]
   16c04:	add	sp, sp, #4
   16c08:	pop	{pc}		; (ldr pc, [sp], #4)

00016c0c <flatcc_builder_append_string_strn@@Base>:
   16c0c:	str	fp, [sp, #-8]!
   16c10:	str	lr, [sp, #4]
   16c14:	add	fp, sp, #4
   16c18:	sub	sp, sp, #16
   16c1c:	str	r0, [fp, #-8]
   16c20:	str	r1, [fp, #-12]
   16c24:	str	r2, [fp, #-16]
   16c28:	ldr	r1, [fp, #-16]
   16c2c:	ldr	r0, [fp, #-12]
   16c30:	bl	13ea4 <main@@Base+0x218>
   16c34:	mov	r3, r0
   16c38:	mov	r2, r3
   16c3c:	ldr	r1, [fp, #-12]
   16c40:	ldr	r0, [fp, #-8]
   16c44:	bl	16b18 <flatcc_builder_append_string@@Base>
   16c48:	mov	r3, r0
   16c4c:	mov	r0, r3
   16c50:	sub	sp, fp, #4
   16c54:	ldr	fp, [sp]
   16c58:	add	sp, sp, #4
   16c5c:	pop	{pc}		; (ldr pc, [sp], #4)

00016c60 <flatcc_builder_truncate_vector@@Base>:
   16c60:	str	fp, [sp, #-8]!
   16c64:	str	lr, [sp, #4]
   16c68:	add	fp, sp, #4
   16c6c:	sub	sp, sp, #8
   16c70:	str	r0, [fp, #-8]
   16c74:	str	r1, [fp, #-12]
   16c78:	ldr	r3, [fp, #-8]
   16c7c:	ldr	r3, [r3, #32]
   16c80:	ldrh	r3, [r3, #14]
   16c84:	cmp	r3, #4
   16c88:	beq	16cac <flatcc_builder_truncate_vector@@Base+0x4c>
   16c8c:	ldr	r3, [pc, #200]	; 16d5c <flatcc_builder_truncate_vector@@Base+0xfc>
   16c90:	add	r3, pc, r3
   16c94:	movw	r2, #985	; 0x3d9
   16c98:	ldr	r1, [pc, #192]	; 16d60 <flatcc_builder_truncate_vector@@Base+0x100>
   16c9c:	add	r1, pc, r1
   16ca0:	ldr	r0, [pc, #188]	; 16d64 <flatcc_builder_truncate_vector@@Base+0x104>
   16ca4:	add	r0, pc, r0
   16ca8:	bl	12324 <__assert_fail@plt>
   16cac:	ldr	r3, [fp, #-8]
   16cb0:	ldr	r3, [r3, #32]
   16cb4:	ldr	r3, [r3, #20]
   16cb8:	ldr	r2, [fp, #-12]
   16cbc:	cmp	r2, r3
   16cc0:	bls	16d04 <flatcc_builder_truncate_vector@@Base+0xa4>
   16cc4:	ldr	r3, [fp, #-8]
   16cc8:	ldr	r3, [r3, #32]
   16ccc:	ldr	r3, [r3, #20]
   16cd0:	ldr	r2, [fp, #-12]
   16cd4:	cmp	r2, r3
   16cd8:	bls	16cfc <flatcc_builder_truncate_vector@@Base+0x9c>
   16cdc:	ldr	r3, [pc, #132]	; 16d68 <flatcc_builder_truncate_vector@@Base+0x108>
   16ce0:	add	r3, pc, r3
   16ce4:	movw	r2, #986	; 0x3da
   16ce8:	ldr	r1, [pc, #124]	; 16d6c <flatcc_builder_truncate_vector@@Base+0x10c>
   16cec:	add	r1, pc, r1
   16cf0:	ldr	r0, [pc, #120]	; 16d70 <flatcc_builder_truncate_vector@@Base+0x110>
   16cf4:	add	r0, pc, r0
   16cf8:	bl	12324 <__assert_fail@plt>
   16cfc:	mvn	r3, #0
   16d00:	b	16d48 <flatcc_builder_truncate_vector@@Base+0xe8>
   16d04:	ldr	r3, [fp, #-8]
   16d08:	ldr	r3, [r3, #32]
   16d0c:	ldr	r1, [r3, #20]
   16d10:	ldr	r3, [fp, #-8]
   16d14:	ldr	r3, [r3, #32]
   16d18:	ldr	r2, [fp, #-12]
   16d1c:	sub	r2, r1, r2
   16d20:	str	r2, [r3, #20]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	ldr	r3, [r3, #32]
   16d2c:	ldr	r3, [r3, #16]
   16d30:	ldr	r2, [fp, #-12]
   16d34:	mul	r3, r2, r3
   16d38:	mov	r1, r3
   16d3c:	ldr	r0, [fp, #-8]
   16d40:	bl	142bc <flatcc_builder_default_alloc@@Base+0x3b8>
   16d44:	mov	r3, #0
   16d48:	mov	r0, r3
   16d4c:	sub	sp, fp, #4
   16d50:	ldr	fp, [sp]
   16d54:	add	sp, sp, #4
   16d58:	pop	{pc}		; (ldr pc, [sp], #4)
   16d5c:	andeq	r7, r0, r0, lsl r4
   16d60:	andeq	r6, r0, r8, ror #27
   16d64:	andeq	r6, r0, r4, lsr #30
   16d68:	andeq	r7, r0, r0, asr #7
   16d6c:	muleq	r0, r8, sp
   16d70:	andeq	r6, r0, r0, lsr #31

00016d74 <flatcc_builder_truncate_offset_vector@@Base>:
   16d74:	str	fp, [sp, #-8]!
   16d78:	str	lr, [sp, #4]
   16d7c:	add	fp, sp, #4
   16d80:	sub	sp, sp, #8
   16d84:	str	r0, [fp, #-8]
   16d88:	str	r1, [fp, #-12]
   16d8c:	ldr	r3, [fp, #-8]
   16d90:	ldr	r3, [r3, #32]
   16d94:	ldrh	r3, [r3, #14]
   16d98:	cmp	r3, #5
   16d9c:	beq	16dc0 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16da0:	ldr	r3, [pc, #200]	; 16e70 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16da4:	add	r3, pc, r3
   16da8:	movw	r2, #994	; 0x3e2
   16dac:	ldr	r1, [pc, #192]	; 16e74 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16db0:	add	r1, pc, r1
   16db4:	ldr	r0, [pc, #188]	; 16e78 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16db8:	add	r0, pc, r0
   16dbc:	bl	12324 <__assert_fail@plt>
   16dc0:	ldr	r3, [fp, #-8]
   16dc4:	ldr	r3, [r3, #32]
   16dc8:	ldr	r3, [r3, #20]
   16dcc:	ldr	r2, [fp, #-12]
   16dd0:	cmp	r2, r3
   16dd4:	bls	16e18 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   16dd8:	ldr	r3, [fp, #-8]
   16ddc:	ldr	r3, [r3, #32]
   16de0:	ldr	r3, [r3, #20]
   16de4:	ldr	r2, [fp, #-12]
   16de8:	cmp	r2, r3
   16dec:	bls	16e10 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   16df0:	ldr	r3, [pc, #132]	; 16e7c <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16df4:	add	r3, pc, r3
   16df8:	movw	r2, #995	; 0x3e3
   16dfc:	ldr	r1, [pc, #124]	; 16e80 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16e00:	add	r1, pc, r1
   16e04:	ldr	r0, [pc, #120]	; 16e84 <flatcc_builder_truncate_offset_vector@@Base+0x110>
   16e08:	add	r0, pc, r0
   16e0c:	bl	12324 <__assert_fail@plt>
   16e10:	mvn	r3, #0
   16e14:	b	16e5c <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16e18:	ldr	r3, [fp, #-8]
   16e1c:	ldr	r3, [r3, #32]
   16e20:	ldr	r1, [r3, #20]
   16e24:	ldr	r3, [fp, #-8]
   16e28:	ldr	r3, [r3, #32]
   16e2c:	ldr	r2, [fp, #-12]
   16e30:	sub	r2, r1, r2
   16e34:	str	r2, [r3, #20]
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	ldr	r3, [r3, #32]
   16e40:	ldr	r3, [r3, #16]
   16e44:	ldr	r2, [fp, #-12]
   16e48:	mul	r3, r2, r3
   16e4c:	mov	r1, r3
   16e50:	ldr	r0, [fp, #-8]
   16e54:	bl	142bc <flatcc_builder_default_alloc@@Base+0x3b8>
   16e58:	mov	r3, #0
   16e5c:	mov	r0, r3
   16e60:	sub	sp, fp, #4
   16e64:	ldr	fp, [sp]
   16e68:	add	sp, sp, #4
   16e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e70:	andeq	r7, r0, ip, lsl r3
   16e74:	ldrdeq	r6, [r0], -r4
   16e78:	andeq	r6, r0, ip, ror lr
   16e7c:	andeq	r7, r0, ip, asr #5
   16e80:	andeq	r6, r0, r4, lsl #25
   16e84:			; <UNDEFINED> instruction: 0x00006eb0

00016e88 <flatcc_builder_truncate_string@@Base>:
   16e88:	str	fp, [sp, #-8]!
   16e8c:	str	lr, [sp, #4]
   16e90:	add	fp, sp, #4
   16e94:	sub	sp, sp, #8
   16e98:	str	r0, [fp, #-8]
   16e9c:	str	r1, [fp, #-12]
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	ldr	r3, [r3, #32]
   16ea8:	ldrh	r3, [r3, #14]
   16eac:	cmp	r3, #6
   16eb0:	beq	16ed4 <flatcc_builder_truncate_string@@Base+0x4c>
   16eb4:	ldr	r3, [pc, #180]	; 16f70 <flatcc_builder_truncate_string@@Base+0xe8>
   16eb8:	add	r3, pc, r3
   16ebc:	movw	r2, #1003	; 0x3eb
   16ec0:	ldr	r1, [pc, #172]	; 16f74 <flatcc_builder_truncate_string@@Base+0xec>
   16ec4:	add	r1, pc, r1
   16ec8:	ldr	r0, [pc, #168]	; 16f78 <flatcc_builder_truncate_string@@Base+0xf0>
   16ecc:	add	r0, pc, r0
   16ed0:	bl	12324 <__assert_fail@plt>
   16ed4:	ldr	r3, [fp, #-8]
   16ed8:	ldr	r3, [r3, #32]
   16edc:	ldr	r3, [r3, #20]
   16ee0:	ldr	r2, [fp, #-12]
   16ee4:	cmp	r2, r3
   16ee8:	bls	16f2c <flatcc_builder_truncate_string@@Base+0xa4>
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	ldr	r3, [r3, #32]
   16ef4:	ldr	r3, [r3, #20]
   16ef8:	ldr	r2, [fp, #-12]
   16efc:	cmp	r2, r3
   16f00:	bls	16f24 <flatcc_builder_truncate_string@@Base+0x9c>
   16f04:	ldr	r3, [pc, #112]	; 16f7c <flatcc_builder_truncate_string@@Base+0xf4>
   16f08:	add	r3, pc, r3
   16f0c:	mov	r2, #1004	; 0x3ec
   16f10:	ldr	r1, [pc, #104]	; 16f80 <flatcc_builder_truncate_string@@Base+0xf8>
   16f14:	add	r1, pc, r1
   16f18:	ldr	r0, [pc, #100]	; 16f84 <flatcc_builder_truncate_string@@Base+0xfc>
   16f1c:	add	r0, pc, r0
   16f20:	bl	12324 <__assert_fail@plt>
   16f24:	mvn	r3, #0
   16f28:	b	16f5c <flatcc_builder_truncate_string@@Base+0xd4>
   16f2c:	ldr	r3, [fp, #-8]
   16f30:	ldr	r3, [r3, #32]
   16f34:	ldr	r1, [r3, #20]
   16f38:	ldr	r3, [fp, #-8]
   16f3c:	ldr	r3, [r3, #32]
   16f40:	ldr	r2, [fp, #-12]
   16f44:	sub	r2, r1, r2
   16f48:	str	r2, [r3, #20]
   16f4c:	ldr	r1, [fp, #-12]
   16f50:	ldr	r0, [fp, #-8]
   16f54:	bl	142bc <flatcc_builder_default_alloc@@Base+0x3b8>
   16f58:	mov	r3, #0
   16f5c:	mov	r0, r3
   16f60:	sub	sp, fp, #4
   16f64:	ldr	fp, [sp]
   16f68:	add	sp, sp, #4
   16f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f70:	andeq	r7, r0, r0, lsr r2
   16f74:	andeq	r6, r0, r0, asr #23
   16f78:	muleq	r0, ip, sp
   16f7c:	andeq	r7, r0, r0, ror #3
   16f80:	andeq	r6, r0, r0, ror fp
   16f84:	ldrdeq	r6, [r0], -r8

00016f88 <flatcc_builder_start_vector@@Base>:
   16f88:	str	fp, [sp, #-8]!
   16f8c:	str	lr, [sp, #4]
   16f90:	add	fp, sp, #4
   16f94:	sub	sp, sp, #16
   16f98:	str	r0, [fp, #-8]
   16f9c:	str	r1, [fp, #-12]
   16fa0:	str	r3, [fp, #-20]	; 0xffffffec
   16fa4:	mov	r3, r2
   16fa8:	strh	r3, [fp, #-14]
   16fac:	sub	r3, fp, #14
   16fb0:	mov	r1, #4
   16fb4:	mov	r0, r3
   16fb8:	bl	14f04 <flatcc_builder_clear@@Base+0x10c>
   16fbc:	ldrh	r3, [fp, #-14]
   16fc0:	mov	r1, r3
   16fc4:	ldr	r0, [fp, #-8]
   16fc8:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16fcc:	mov	r3, r0
   16fd0:	cmp	r3, #0
   16fd4:	beq	16fe0 <flatcc_builder_start_vector@@Base+0x58>
   16fd8:	mvn	r3, #0
   16fdc:	b	17030 <flatcc_builder_start_vector@@Base+0xa8>
   16fe0:	ldr	r3, [fp, #-8]
   16fe4:	ldr	r3, [r3, #32]
   16fe8:	ldr	r2, [fp, #-12]
   16fec:	str	r2, [r3, #16]
   16ff0:	ldr	r3, [fp, #-8]
   16ff4:	ldr	r3, [r3, #32]
   16ff8:	mov	r2, #0
   16ffc:	str	r2, [r3, #20]
   17000:	ldr	r3, [fp, #-8]
   17004:	ldr	r3, [r3, #32]
   17008:	ldr	r2, [fp, #-20]	; 0xffffffec
   1700c:	str	r2, [r3, #24]
   17010:	ldr	r3, [fp, #-8]
   17014:	ldr	r3, [r3, #32]
   17018:	mov	r2, #4
   1701c:	strh	r2, [r3, #14]
   17020:	mvn	r1, #3
   17024:	ldr	r0, [fp, #-8]
   17028:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   1702c:	mov	r3, #0
   17030:	mov	r0, r3
   17034:	sub	sp, fp, #4
   17038:	ldr	fp, [sp]
   1703c:	add	sp, sp, #4
   17040:	pop	{pc}		; (ldr pc, [sp], #4)

00017044 <flatcc_builder_start_offset_vector@@Base>:
   17044:	str	fp, [sp, #-8]!
   17048:	str	lr, [sp, #4]
   1704c:	add	fp, sp, #4
   17050:	sub	sp, sp, #8
   17054:	str	r0, [fp, #-8]
   17058:	mov	r1, #4
   1705c:	ldr	r0, [fp, #-8]
   17060:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17064:	mov	r3, r0
   17068:	cmp	r3, #0
   1706c:	beq	17078 <flatcc_builder_start_offset_vector@@Base+0x34>
   17070:	mvn	r3, #0
   17074:	b	170b8 <flatcc_builder_start_offset_vector@@Base+0x74>
   17078:	ldr	r3, [fp, #-8]
   1707c:	ldr	r3, [r3, #32]
   17080:	mov	r2, #4
   17084:	str	r2, [r3, #16]
   17088:	ldr	r3, [fp, #-8]
   1708c:	ldr	r3, [r3, #32]
   17090:	mov	r2, #0
   17094:	str	r2, [r3, #20]
   17098:	ldr	r3, [fp, #-8]
   1709c:	ldr	r3, [r3, #32]
   170a0:	mov	r2, #5
   170a4:	strh	r2, [r3, #14]
   170a8:	mvn	r1, #3
   170ac:	ldr	r0, [fp, #-8]
   170b0:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   170b4:	mov	r3, #0
   170b8:	mov	r0, r3
   170bc:	sub	sp, fp, #4
   170c0:	ldr	fp, [sp]
   170c4:	add	sp, sp, #4
   170c8:	pop	{pc}		; (ldr pc, [sp], #4)

000170cc <flatcc_builder_create_offset_vector@@Base>:
   170cc:	str	fp, [sp, #-8]!
   170d0:	str	lr, [sp, #4]
   170d4:	add	fp, sp, #4
   170d8:	sub	sp, sp, #24
   170dc:	str	r0, [fp, #-16]
   170e0:	str	r1, [fp, #-20]	; 0xffffffec
   170e4:	str	r2, [fp, #-24]	; 0xffffffe8
   170e8:	ldr	r0, [fp, #-16]
   170ec:	bl	17044 <flatcc_builder_start_offset_vector@@Base>
   170f0:	mov	r3, r0
   170f4:	cmp	r3, #0
   170f8:	beq	17104 <flatcc_builder_create_offset_vector@@Base+0x38>
   170fc:	mov	r3, #0
   17100:	b	1714c <flatcc_builder_create_offset_vector@@Base+0x80>
   17104:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17108:	ldr	r0, [fp, #-16]
   1710c:	bl	16888 <flatcc_builder_extend_offset_vector@@Base>
   17110:	str	r0, [fp, #-8]
   17114:	ldr	r3, [fp, #-8]
   17118:	cmp	r3, #0
   1711c:	bne	17128 <flatcc_builder_create_offset_vector@@Base+0x5c>
   17120:	mov	r3, #0
   17124:	b	1714c <flatcc_builder_create_offset_vector@@Base+0x80>
   17128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1712c:	lsl	r3, r3, #2
   17130:	mov	r2, r3
   17134:	ldr	r1, [fp, #-20]	; 0xffffffec
   17138:	ldr	r0, [fp, #-8]
   1713c:	bl	12294 <memcpy@plt>
   17140:	ldr	r0, [fp, #-16]
   17144:	bl	1874c <flatcc_builder_end_offset_vector@@Base>
   17148:	mov	r3, r0
   1714c:	mov	r0, r3
   17150:	sub	sp, fp, #4
   17154:	ldr	fp, [sp]
   17158:	add	sp, sp, #4
   1715c:	pop	{pc}		; (ldr pc, [sp], #4)

00017160 <flatcc_builder_start_string@@Base>:
   17160:	str	fp, [sp, #-8]!
   17164:	str	lr, [sp, #4]
   17168:	add	fp, sp, #4
   1716c:	sub	sp, sp, #8
   17170:	str	r0, [fp, #-8]
   17174:	mov	r1, #1
   17178:	ldr	r0, [fp, #-8]
   1717c:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17180:	mov	r3, r0
   17184:	cmp	r3, #0
   17188:	beq	17194 <flatcc_builder_start_string@@Base+0x34>
   1718c:	mvn	r3, #0
   17190:	b	171d4 <flatcc_builder_start_string@@Base+0x74>
   17194:	ldr	r3, [fp, #-8]
   17198:	ldr	r3, [r3, #32]
   1719c:	mov	r2, #1
   171a0:	str	r2, [r3, #16]
   171a4:	ldr	r3, [fp, #-8]
   171a8:	ldr	r3, [r3, #32]
   171ac:	mov	r2, #0
   171b0:	str	r2, [r3, #20]
   171b4:	ldr	r3, [fp, #-8]
   171b8:	ldr	r3, [r3, #32]
   171bc:	mov	r2, #6
   171c0:	strh	r2, [r3, #14]
   171c4:	mvn	r1, #3
   171c8:	ldr	r0, [fp, #-8]
   171cc:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   171d0:	mov	r3, #0
   171d4:	mov	r0, r3
   171d8:	sub	sp, fp, #4
   171dc:	ldr	fp, [sp]
   171e0:	add	sp, sp, #4
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)

000171e8 <flatcc_builder_reserve_table@@Base>:
   171e8:	str	fp, [sp, #-8]!
   171ec:	str	lr, [sp, #4]
   171f0:	add	fp, sp, #4
   171f4:	sub	sp, sp, #8
   171f8:	str	r0, [fp, #-8]
   171fc:	str	r1, [fp, #-12]
   17200:	ldr	r3, [fp, #-12]
   17204:	cmp	r3, #0
   17208:	bge	1722c <flatcc_builder_reserve_table@@Base+0x44>
   1720c:	ldr	r3, [pc, #60]	; 17250 <flatcc_builder_reserve_table@@Base+0x68>
   17210:	add	r3, pc, r3
   17214:	movw	r2, #1065	; 0x429
   17218:	ldr	r1, [pc, #52]	; 17254 <flatcc_builder_reserve_table@@Base+0x6c>
   1721c:	add	r1, pc, r1
   17220:	ldr	r0, [pc, #48]	; 17258 <flatcc_builder_reserve_table@@Base+0x70>
   17224:	add	r0, pc, r0
   17228:	bl	12324 <__assert_fail@plt>
   1722c:	ldr	r1, [fp, #-12]
   17230:	ldr	r0, [fp, #-8]
   17234:	bl	146b4 <flatcc_builder_default_alloc@@Base+0x7b0>
   17238:	mov	r3, r0
   1723c:	mov	r0, r3
   17240:	sub	sp, fp, #4
   17244:	ldr	fp, [sp]
   17248:	add	sp, sp, #4
   1724c:	pop	{pc}		; (ldr pc, [sp], #4)
   17250:	strdeq	r6, [r0], -r8
   17254:	andeq	r6, r0, r8, ror #16
   17258:	strdeq	r6, [r0], -r4

0001725c <flatcc_builder_start_table@@Base>:
   1725c:	str	fp, [sp, #-8]!
   17260:	str	lr, [sp, #4]
   17264:	add	fp, sp, #4
   17268:	sub	sp, sp, #8
   1726c:	str	r0, [fp, #-8]
   17270:	str	r1, [fp, #-12]
   17274:	mov	r1, #4
   17278:	ldr	r0, [fp, #-8]
   1727c:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17280:	mov	r3, r0
   17284:	cmp	r3, #0
   17288:	beq	17294 <flatcc_builder_start_table@@Base+0x38>
   1728c:	mvn	r3, #0
   17290:	b	17374 <flatcc_builder_start_table@@Base+0x118>
   17294:	ldr	r3, [fp, #-8]
   17298:	ldr	r3, [r3, #4]
   1729c:	mov	r1, r3
   172a0:	ldr	r3, [fp, #-8]
   172a4:	ldr	r3, [r3, #52]	; 0x34
   172a8:	mov	r2, r3
   172ac:	ldr	r3, [fp, #-8]
   172b0:	ldr	r3, [r3, #32]
   172b4:	sub	r2, r1, r2
   172b8:	str	r2, [r3, #16]
   172bc:	ldr	r3, [fp, #-8]
   172c0:	ldr	r3, [r3]
   172c4:	mov	r1, r3
   172c8:	ldr	r3, [fp, #-8]
   172cc:	ldr	r3, [r3, #76]	; 0x4c
   172d0:	mov	r2, r3
   172d4:	ldr	r3, [fp, #-8]
   172d8:	ldr	r3, [r3, #32]
   172dc:	sub	r2, r1, r2
   172e0:	str	r2, [r3, #20]
   172e4:	ldr	r3, [fp, #-8]
   172e8:	ldr	r3, [r3, #32]
   172ec:	ldr	r2, [fp, #-8]
   172f0:	ldr	r2, [r2, #12]
   172f4:	str	r2, [r3, #24]
   172f8:	ldr	r3, [fp, #-8]
   172fc:	ldr	r3, [r3, #32]
   17300:	ldr	r2, [fp, #-8]
   17304:	ldrh	r2, [r2, #8]
   17308:	strh	r2, [r3, #28]
   1730c:	ldr	r3, [fp, #-8]
   17310:	mov	r2, #0
   17314:	str	r2, [r3, #12]
   17318:	ldr	r2, [fp, #-8]
   1731c:	movw	r3, #15186	; 0x3b52
   17320:	movt	r3, #12137	; 0x2f69
   17324:	str	r3, [r2, #12]
   17328:	ldr	r3, [fp, #-8]
   1732c:	mov	r2, #0
   17330:	strh	r2, [r3, #8]
   17334:	ldr	r3, [fp, #-8]
   17338:	ldr	r3, [r3, #32]
   1733c:	mov	r2, #3
   17340:	strh	r2, [r3, #14]
   17344:	ldr	r1, [fp, #-12]
   17348:	ldr	r0, [fp, #-8]
   1734c:	bl	146b4 <flatcc_builder_default_alloc@@Base+0x7b0>
   17350:	mov	r3, r0
   17354:	cmp	r3, #0
   17358:	beq	17364 <flatcc_builder_start_table@@Base+0x108>
   1735c:	mvn	r3, #0
   17360:	b	17374 <flatcc_builder_start_table@@Base+0x118>
   17364:	movw	r1, #65532	; 0xfffc
   17368:	ldr	r0, [fp, #-8]
   1736c:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   17370:	mov	r3, #0
   17374:	mov	r0, r3
   17378:	sub	sp, fp, #4
   1737c:	ldr	fp, [sp]
   17380:	add	sp, sp, #4
   17384:	pop	{pc}		; (ldr pc, [sp], #4)

00017388 <flatcc_builder_create_vtable@@Base>:
   17388:	str	fp, [sp, #-8]!
   1738c:	str	lr, [sp, #4]
   17390:	add	fp, sp, #4
   17394:	sub	sp, sp, #96	; 0x60
   17398:	str	r0, [fp, #-88]	; 0xffffffa8
   1739c:	str	r1, [fp, #-92]	; 0xffffffa4
   173a0:	mov	r3, r2
   173a4:	strh	r3, [fp, #-94]	; 0xffffffa2
   173a8:	mov	r3, #0
   173ac:	str	r3, [fp, #-80]	; 0xffffffb0
   173b0:	mov	r3, #0
   173b4:	str	r3, [fp, #-76]	; 0xffffffb4
   173b8:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   173bc:	cmp	r3, #0
   173c0:	beq	17418 <flatcc_builder_create_vtable@@Base+0x90>
   173c4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   173c8:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   173cc:	add	r3, r2, r3
   173d0:	str	r3, [fp, #-80]	; 0xffffffb0
   173d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   173d8:	add	r3, r3, #1
   173dc:	lsl	r3, r3, #3
   173e0:	sub	r2, fp, #4
   173e4:	add	r3, r2, r3
   173e8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   173ec:	str	r2, [r3, #-76]	; 0xffffffb4
   173f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   173f4:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   173f8:	add	r3, r3, #1
   173fc:	lsl	r3, r3, #3
   17400:	sub	r1, fp, #4
   17404:	add	r3, r1, r3
   17408:	str	r2, [r3, #-72]	; 0xffffffb8
   1740c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17410:	add	r3, r3, #1
   17414:	str	r3, [fp, #-76]	; 0xffffffb4
   17418:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1741c:	ldr	r3, [r3, #152]	; 0x98
   17420:	cmp	r3, #0
   17424:	bne	17460 <flatcc_builder_create_vtable@@Base+0xd8>
   17428:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1742c:	ldr	r3, [r3, #180]	; 0xb4
   17430:	cmp	r3, #0
   17434:	bne	17460 <flatcc_builder_create_vtable@@Base+0xd8>
   17438:	sub	r3, fp, #80	; 0x50
   1743c:	mov	r1, r3
   17440:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17444:	bl	156cc <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   17448:	str	r0, [fp, #-8]
   1744c:	ldr	r3, [fp, #-8]
   17450:	cmp	r3, #0
   17454:	bne	17494 <flatcc_builder_create_vtable@@Base+0x10c>
   17458:	mov	r3, #0
   1745c:	b	17498 <flatcc_builder_create_vtable@@Base+0x110>
   17460:	sub	r3, fp, #80	; 0x50
   17464:	mov	r1, r3
   17468:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1746c:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17470:	str	r0, [fp, #-8]
   17474:	ldr	r3, [fp, #-8]
   17478:	cmp	r3, #0
   1747c:	bne	17488 <flatcc_builder_create_vtable@@Base+0x100>
   17480:	mov	r3, #0
   17484:	b	17498 <flatcc_builder_create_vtable@@Base+0x110>
   17488:	ldr	r3, [fp, #-8]
   1748c:	add	r3, r3, #1
   17490:	str	r3, [fp, #-8]
   17494:	ldr	r3, [fp, #-8]
   17498:	mov	r0, r3
   1749c:	sub	sp, fp, #4
   174a0:	ldr	fp, [sp]
   174a4:	add	sp, sp, #4
   174a8:	pop	{pc}		; (ldr pc, [sp], #4)

000174ac <flatcc_builder_create_cached_vtable@@Base>:
   174ac:	str	fp, [sp, #-8]!
   174b0:	str	lr, [sp, #4]
   174b4:	add	fp, sp, #4
   174b8:	sub	sp, sp, #48	; 0x30
   174bc:	str	r0, [fp, #-32]	; 0xffffffe0
   174c0:	str	r1, [fp, #-36]	; 0xffffffdc
   174c4:	str	r3, [fp, #-44]	; 0xffffffd4
   174c8:	mov	r3, r2
   174cc:	strh	r3, [fp, #-38]	; 0xffffffda
   174d0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   174d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174d8:	bl	1493c <flatcc_builder_default_alloc@@Base+0xa38>
   174dc:	str	r0, [fp, #-20]	; 0xffffffec
   174e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174e4:	cmp	r3, #0
   174e8:	bne	174f4 <flatcc_builder_create_cached_vtable@@Base+0x48>
   174ec:	mov	r3, #0
   174f0:	b	177b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   174f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   174f8:	str	r3, [fp, #-12]
   174fc:	ldr	r3, [fp, #-12]
   17500:	ldr	r3, [r3]
   17504:	str	r3, [fp, #-16]
   17508:	mov	r3, #0
   1750c:	str	r3, [fp, #-8]
   17510:	b	17614 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17514:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17518:	ldr	r2, [r3, #100]	; 0x64
   1751c:	ldr	r3, [fp, #-16]
   17520:	add	r3, r2, r3
   17524:	str	r3, [fp, #-24]	; 0xffffffe8
   17528:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1752c:	ldr	r2, [r3, #68]	; 0x44
   17530:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17534:	ldr	r3, [r3, #8]
   17538:	add	r3, r2, r3
   1753c:	str	r3, [fp, #-28]	; 0xffffffe4
   17540:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17544:	ldrh	r3, [r3]
   17548:	ldrh	r2, [fp, #-38]	; 0xffffffda
   1754c:	cmp	r2, r3
   17550:	bne	17574 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   17554:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17558:	mov	r2, r3
   1755c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17560:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17564:	bl	122a0 <memcmp@plt>
   17568:	mov	r3, r0
   1756c:	cmp	r3, #0
   17570:	beq	17590 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   17574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17578:	add	r3, r3, #12
   1757c:	str	r3, [fp, #-12]
   17580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17584:	ldr	r3, [r3, #12]
   17588:	str	r3, [fp, #-16]
   1758c:	b	17614 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17594:	ldr	r2, [r3, #4]
   17598:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1759c:	ldr	r3, [r3, #152]	; 0x98
   175a0:	cmp	r2, r3
   175a4:	beq	175cc <flatcc_builder_create_cached_vtable@@Base+0x120>
   175a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175ac:	str	r3, [fp, #-8]
   175b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175b4:	add	r3, r3, #12
   175b8:	str	r3, [fp, #-12]
   175bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c0:	ldr	r3, [r3, #12]
   175c4:	str	r3, [fp, #-16]
   175c8:	b	17614 <flatcc_builder_create_cached_vtable@@Base+0x168>
   175cc:	ldr	r2, [fp, #-12]
   175d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   175d4:	cmp	r2, r3
   175d8:	beq	17608 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   175dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e0:	ldr	r2, [r3, #12]
   175e4:	ldr	r3, [fp, #-12]
   175e8:	str	r2, [r3]
   175ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   175f0:	ldr	r2, [r3]
   175f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175f8:	str	r2, [r3, #12]
   175fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17600:	ldr	r2, [fp, #-16]
   17604:	str	r2, [r3]
   17608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1760c:	ldr	r3, [r3]
   17610:	b	177b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17614:	ldr	r3, [fp, #-16]
   17618:	cmp	r3, #0
   1761c:	bne	17514 <flatcc_builder_create_cached_vtable@@Base+0x68>
   17620:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17624:	ldr	r2, [r3, #124]	; 0x7c
   17628:	mov	r3, #0
   1762c:	str	r3, [sp]
   17630:	mov	r3, #16
   17634:	mov	r1, #6
   17638:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1763c:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   17640:	str	r0, [fp, #-24]	; 0xffffffe8
   17644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17648:	cmp	r3, #0
   1764c:	bne	17658 <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   17650:	mov	r3, #0
   17654:	b	177b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17658:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1765c:	ldr	r3, [r3, #124]	; 0x7c
   17660:	str	r3, [fp, #-16]
   17664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17668:	ldr	r3, [r3, #124]	; 0x7c
   1766c:	add	r2, r3, #16
   17670:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17674:	str	r2, [r3, #124]	; 0x7c
   17678:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1767c:	ldr	r2, [r3, #152]	; 0x98
   17680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17684:	str	r2, [r3, #4]
   17688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1768c:	ldr	r2, [r3]
   17690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17694:	str	r2, [r3, #12]
   17698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1769c:	ldr	r2, [fp, #-16]
   176a0:	str	r2, [r3]
   176a4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   176a8:	mov	r2, r3
   176ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   176b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176b4:	bl	17388 <flatcc_builder_create_vtable@@Base>
   176b8:	mov	r2, r0
   176bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c0:	str	r2, [r3]
   176c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c8:	ldr	r3, [r3]
   176cc:	cmp	r3, #0
   176d0:	bne	176dc <flatcc_builder_create_cached_vtable@@Base+0x230>
   176d4:	mov	r3, #0
   176d8:	b	177b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   176dc:	ldr	r3, [fp, #-8]
   176e0:	cmp	r3, #0
   176e4:	beq	176fc <flatcc_builder_create_cached_vtable@@Base+0x250>
   176e8:	ldr	r3, [fp, #-8]
   176ec:	ldr	r2, [r3, #8]
   176f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176f4:	str	r2, [r3, #8]
   176f8:	b	177b0 <flatcc_builder_create_cached_vtable@@Base+0x304>
   176fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17700:	ldr	r3, [r3, #172]	; 0xac
   17704:	cmp	r3, #0
   17708:	beq	17738 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1770c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17710:	ldr	r2, [r3, #172]	; 0xac
   17714:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17718:	ldr	r1, [r3, #120]	; 0x78
   1771c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17720:	add	r3, r1, r3
   17724:	cmp	r2, r3
   17728:	bcs	17738 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1772c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17730:	bl	149c0 <flatcc_builder_flush_vtable_cache@@Base>
   17734:	b	177b0 <flatcc_builder_create_cached_vtable@@Base+0x304>
   17738:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1773c:	ldr	r2, [r3, #120]	; 0x78
   17740:	ldrh	r1, [fp, #-38]	; 0xffffffda
   17744:	mov	r3, #0
   17748:	str	r3, [sp]
   1774c:	mov	r3, r1
   17750:	mov	r1, #2
   17754:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17758:	bl	145c8 <flatcc_builder_default_alloc@@Base+0x6c4>
   1775c:	str	r0, [fp, #-28]	; 0xffffffe4
   17760:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17764:	cmp	r3, #0
   17768:	bne	17774 <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   1776c:	mvn	r3, #0
   17770:	b	177b8 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17774:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17778:	ldr	r2, [r3, #120]	; 0x78
   1777c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17780:	str	r2, [r3, #8]
   17784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17788:	ldr	r2, [r3, #120]	; 0x78
   1778c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17790:	add	r2, r2, r3
   17794:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17798:	str	r2, [r3, #120]	; 0x78
   1779c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   177a0:	mov	r2, r3
   177a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   177a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   177ac:	bl	12294 <memcpy@plt>
   177b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177b4:	ldr	r3, [r3]
   177b8:	mov	r0, r3
   177bc:	sub	sp, fp, #4
   177c0:	ldr	fp, [sp]
   177c4:	add	sp, sp, #4
   177c8:	pop	{pc}		; (ldr pc, [sp], #4)

000177cc <flatcc_builder_create_table@@Base>:
   177cc:	str	r4, [sp, #-12]!
   177d0:	str	fp, [sp, #4]
   177d4:	str	lr, [sp, #8]
   177d8:	add	fp, sp, #8
   177dc:	sub	sp, sp, #124	; 0x7c
   177e0:	str	r0, [fp, #-120]	; 0xffffff88
   177e4:	str	r1, [fp, #-124]	; 0xffffff84
   177e8:	str	r2, [fp, #-128]	; 0xffffff80
   177ec:	strh	r3, [fp, #-130]	; 0xffffff7e
   177f0:	ldr	r4, [pc, #740]	; 17adc <flatcc_builder_create_table@@Base+0x310>
   177f4:	add	r4, pc, r4
   177f8:	ldr	r3, [fp, #8]
   177fc:	cmp	r3, #0
   17800:	bge	17824 <flatcc_builder_create_table@@Base+0x58>
   17804:	ldr	r3, [pc, #724]	; 17ae0 <flatcc_builder_create_table@@Base+0x314>
   17808:	add	r3, pc, r3
   1780c:	movw	r2, #1237	; 0x4d5
   17810:	ldr	r1, [pc, #716]	; 17ae4 <flatcc_builder_create_table@@Base+0x318>
   17814:	add	r1, pc, r1
   17818:	ldr	r0, [pc, #712]	; 17ae8 <flatcc_builder_create_table@@Base+0x31c>
   1781c:	add	r0, pc, r0
   17820:	bl	12324 <__assert_fail@plt>
   17824:	ldr	r3, [fp, #12]
   17828:	and	r3, r3, #1
   1782c:	cmp	r3, #0
   17830:	bne	17854 <flatcc_builder_create_table@@Base+0x88>
   17834:	ldr	r3, [pc, #688]	; 17aec <flatcc_builder_create_table@@Base+0x320>
   17838:	add	r3, pc, r3
   1783c:	movw	r2, #1243	; 0x4db
   17840:	ldr	r1, [pc, #680]	; 17af0 <flatcc_builder_create_table@@Base+0x324>
   17844:	add	r1, pc, r1
   17848:	ldr	r0, [pc, #676]	; 17af4 <flatcc_builder_create_table@@Base+0x328>
   1784c:	add	r0, pc, r0
   17850:	bl	12324 <__assert_fail@plt>
   17854:	sub	r3, fp, #130	; 0x82
   17858:	mov	r1, #4
   1785c:	mov	r0, r3
   17860:	bl	14f04 <flatcc_builder_clear@@Base+0x10c>
   17864:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   17868:	mov	r1, r3
   1786c:	ldr	r0, [fp, #-120]	; 0xffffff88
   17870:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   17874:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   17878:	mov	r2, r3
   1787c:	ldr	r1, [fp, #-128]	; 0xffffff80
   17880:	ldr	r0, [fp, #-120]	; 0xffffff88
   17884:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   17888:	str	r0, [fp, #-20]	; 0xffffffec
   1788c:	ldr	r3, [fp, #-120]	; 0xffffff88
   17890:	ldr	r3, [r3, #136]	; 0x88
   17894:	mov	r1, r3
   17898:	ldr	r2, [fp, #-20]	; 0xffffffec
   1789c:	ldr	r3, [fp, #-128]	; 0xffffff80
   178a0:	add	r3, r2, r3
   178a4:	sub	r3, r1, r3
   178a8:	sub	r3, r3, #4
   178ac:	str	r3, [fp, #-24]	; 0xffffffe8
   178b0:	ldr	r3, [fp, #12]
   178b4:	sub	r3, r3, #1
   178b8:	str	r3, [fp, #-28]	; 0xffffffe4
   178bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   178c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   178c4:	sub	r3, r2, r3
   178c8:	str	r3, [fp, #-32]	; 0xffffffe0
   178cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   178d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178d4:	sub	r3, r2, r3
   178d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   178dc:	cmp	r2, r3
   178e0:	beq	178ec <flatcc_builder_create_table@@Base+0x120>
   178e4:	mvn	r3, #0
   178e8:	b	17ac4 <flatcc_builder_create_table@@Base+0x2f8>
   178ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178f0:	bl	13db4 <main@@Base+0x128>
   178f4:	mov	r3, r0
   178f8:	str	r3, [fp, #-44]	; 0xffffffd4
   178fc:	mov	r3, #0
   17900:	str	r3, [fp, #-16]
   17904:	b	1797c <flatcc_builder_create_table@@Base+0x1b0>
   17908:	ldr	r3, [fp, #-16]
   1790c:	lsl	r3, r3, #1
   17910:	ldr	r2, [fp, #4]
   17914:	add	r3, r2, r3
   17918:	ldrh	r3, [r3]
   1791c:	mov	r2, r3
   17920:	ldr	r3, [fp, #-124]	; 0xffffff84
   17924:	add	r3, r2, r3
   17928:	str	r3, [fp, #-36]	; 0xffffffdc
   1792c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17930:	ldr	r2, [r3]
   17934:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17938:	sub	r3, r2, r3
   1793c:	ldr	r2, [fp, #-16]
   17940:	lsl	r2, r2, #1
   17944:	ldr	r1, [fp, #4]
   17948:	add	r2, r1, r2
   1794c:	ldrh	r2, [r2]
   17950:	sub	r3, r3, r2
   17954:	sub	r3, r3, #4
   17958:	str	r3, [fp, #-40]	; 0xffffffd8
   1795c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17960:	bl	13db4 <main@@Base+0x128>
   17964:	mov	r2, r0
   17968:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1796c:	str	r2, [r3]
   17970:	ldr	r3, [fp, #-16]
   17974:	add	r3, r3, #1
   17978:	str	r3, [fp, #-16]
   1797c:	ldr	r2, [fp, #-16]
   17980:	ldr	r3, [fp, #8]
   17984:	cmp	r2, r3
   17988:	blt	17908 <flatcc_builder_create_table@@Base+0x13c>
   1798c:	mov	r3, #0
   17990:	str	r3, [fp, #-116]	; 0xffffff8c
   17994:	mov	r3, #0
   17998:	str	r3, [fp, #-112]	; 0xffffff90
   1799c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   179a0:	add	r3, r3, #4
   179a4:	str	r3, [fp, #-116]	; 0xffffff8c
   179a8:	ldr	r3, [fp, #-112]	; 0xffffff90
   179ac:	add	r3, r3, #1
   179b0:	lsl	r3, r3, #3
   179b4:	sub	r2, fp, #12
   179b8:	add	r3, r2, r3
   179bc:	sub	r2, fp, #44	; 0x2c
   179c0:	str	r2, [r3, #-104]	; 0xffffff98
   179c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   179c8:	add	r3, r3, #1
   179cc:	lsl	r3, r3, #3
   179d0:	sub	r2, fp, #12
   179d4:	add	r3, r2, r3
   179d8:	mov	r2, #4
   179dc:	str	r2, [r3, #-100]	; 0xffffff9c
   179e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   179e4:	add	r3, r3, #1
   179e8:	str	r3, [fp, #-112]	; 0xffffff90
   179ec:	ldr	r3, [fp, #-128]	; 0xffffff80
   179f0:	cmp	r3, #0
   179f4:	beq	17a4c <flatcc_builder_create_table@@Base+0x280>
   179f8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   179fc:	ldr	r3, [fp, #-128]	; 0xffffff80
   17a00:	add	r3, r2, r3
   17a04:	str	r3, [fp, #-116]	; 0xffffff8c
   17a08:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a0c:	add	r3, r3, #1
   17a10:	lsl	r3, r3, #3
   17a14:	sub	r2, fp, #12
   17a18:	add	r3, r2, r3
   17a1c:	ldr	r2, [fp, #-124]	; 0xffffff84
   17a20:	str	r2, [r3, #-104]	; 0xffffff98
   17a24:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a28:	add	r3, r3, #1
   17a2c:	lsl	r3, r3, #3
   17a30:	sub	r2, fp, #12
   17a34:	add	r3, r2, r3
   17a38:	ldr	r2, [fp, #-128]	; 0xffffff80
   17a3c:	str	r2, [r3, #-100]	; 0xffffff9c
   17a40:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a44:	add	r3, r3, #1
   17a48:	str	r3, [fp, #-112]	; 0xffffff90
   17a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a50:	cmp	r3, #0
   17a54:	beq	17ab0 <flatcc_builder_create_table@@Base+0x2e4>
   17a58:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17a5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a60:	add	r3, r2, r3
   17a64:	str	r3, [fp, #-116]	; 0xffffff8c
   17a68:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a6c:	add	r3, r3, #1
   17a70:	lsl	r3, r3, #3
   17a74:	sub	r2, fp, #12
   17a78:	add	r3, r2, r3
   17a7c:	ldr	r2, [pc, #116]	; 17af8 <flatcc_builder_create_table@@Base+0x32c>
   17a80:	ldr	r2, [r4, r2]
   17a84:	str	r2, [r3, #-104]	; 0xffffff98
   17a88:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a8c:	add	r3, r3, #1
   17a90:	lsl	r3, r3, #3
   17a94:	sub	r2, fp, #12
   17a98:	add	r3, r2, r3
   17a9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17aa0:	str	r2, [r3, #-100]	; 0xffffff9c
   17aa4:	ldr	r3, [fp, #-112]	; 0xffffff90
   17aa8:	add	r3, r3, #1
   17aac:	str	r3, [fp, #-112]	; 0xffffff90
   17ab0:	sub	r3, fp, #116	; 0x74
   17ab4:	mov	r1, r3
   17ab8:	ldr	r0, [fp, #-120]	; 0xffffff88
   17abc:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17ac0:	mov	r3, r0
   17ac4:	mov	r0, r3
   17ac8:	sub	sp, fp, #8
   17acc:	ldr	r4, [sp]
   17ad0:	ldr	fp, [sp, #4]
   17ad4:	add	sp, sp, #8
   17ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   17adc:	andeq	r7, r1, r4, lsl #16
   17ae0:	andeq	r6, r0, r0, lsr #18
   17ae4:	andeq	r6, r0, r0, ror r2
   17ae8:	andeq	r6, r0, r8, lsl #10
   17aec:	strdeq	r6, [r0], -r0
   17af0:	andeq	r6, r0, r0, asr #4
   17af4:	andeq	r6, r0, ip, ror #9
   17af8:	andeq	r0, r0, r4, asr #32

00017afc <flatcc_builder_check_required_field@@Base>:
   17afc:	str	fp, [sp, #-8]!
   17b00:	str	lr, [sp, #4]
   17b04:	add	fp, sp, #4
   17b08:	sub	sp, sp, #8
   17b0c:	str	r0, [fp, #-8]
   17b10:	mov	r3, r1
   17b14:	strh	r3, [fp, #-10]
   17b18:	ldr	r3, [fp, #-8]
   17b1c:	ldr	r3, [r3, #32]
   17b20:	ldrh	r3, [r3, #14]
   17b24:	cmp	r3, #3
   17b28:	beq	17b4c <flatcc_builder_check_required_field@@Base+0x50>
   17b2c:	ldr	r3, [pc, #108]	; 17ba0 <flatcc_builder_check_required_field@@Base+0xa4>
   17b30:	add	r3, pc, r3
   17b34:	movw	r2, #1272	; 0x4f8
   17b38:	ldr	r1, [pc, #100]	; 17ba4 <flatcc_builder_check_required_field@@Base+0xa8>
   17b3c:	add	r1, pc, r1
   17b40:	ldr	r0, [pc, #96]	; 17ba8 <flatcc_builder_check_required_field@@Base+0xac>
   17b44:	add	r0, pc, r0
   17b48:	bl	12324 <__assert_fail@plt>
   17b4c:	ldr	r3, [fp, #-8]
   17b50:	ldrh	r3, [r3, #8]
   17b54:	ldrh	r2, [fp, #-10]
   17b58:	cmp	r2, r3
   17b5c:	bcs	17b88 <flatcc_builder_check_required_field@@Base+0x8c>
   17b60:	ldr	r3, [fp, #-8]
   17b64:	ldr	r2, [r3, #4]
   17b68:	ldrh	r3, [fp, #-10]
   17b6c:	lsl	r3, r3, #1
   17b70:	add	r3, r2, r3
   17b74:	ldrh	r3, [r3]
   17b78:	cmp	r3, #0
   17b7c:	beq	17b88 <flatcc_builder_check_required_field@@Base+0x8c>
   17b80:	mov	r3, #1
   17b84:	b	17b8c <flatcc_builder_check_required_field@@Base+0x90>
   17b88:	mov	r3, #0
   17b8c:	mov	r0, r3
   17b90:	sub	sp, fp, #4
   17b94:	ldr	fp, [sp]
   17b98:	add	sp, sp, #4
   17b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ba0:	andeq	r6, r0, r4, lsl r6
   17ba4:	andeq	r5, r0, r8, asr #30
   17ba8:	andeq	r6, r0, r0, lsl #4

00017bac <flatcc_builder_check_union_field@@Base>:
   17bac:	str	fp, [sp, #-8]!
   17bb0:	str	lr, [sp, #4]
   17bb4:	add	fp, sp, #4
   17bb8:	sub	sp, sp, #8
   17bbc:	str	r0, [fp, #-8]
   17bc0:	mov	r3, r1
   17bc4:	strh	r3, [fp, #-10]
   17bc8:	ldr	r3, [fp, #-8]
   17bcc:	ldr	r3, [r3, #32]
   17bd0:	ldrh	r3, [r3, #14]
   17bd4:	cmp	r3, #3
   17bd8:	beq	17bfc <flatcc_builder_check_union_field@@Base+0x50>
   17bdc:	ldr	r3, [pc, #300]	; 17d10 <flatcc_builder_check_union_field@@Base+0x164>
   17be0:	add	r3, pc, r3
   17be4:	movw	r2, #1279	; 0x4ff
   17be8:	ldr	r1, [pc, #292]	; 17d14 <flatcc_builder_check_union_field@@Base+0x168>
   17bec:	add	r1, pc, r1
   17bf0:	ldr	r0, [pc, #288]	; 17d18 <flatcc_builder_check_union_field@@Base+0x16c>
   17bf4:	add	r0, pc, r0
   17bf8:	bl	12324 <__assert_fail@plt>
   17bfc:	ldrh	r3, [fp, #-10]
   17c00:	cmp	r3, #0
   17c04:	beq	17c1c <flatcc_builder_check_union_field@@Base+0x70>
   17c08:	ldr	r3, [fp, #-8]
   17c0c:	ldrh	r3, [r3, #8]
   17c10:	ldrh	r2, [fp, #-10]
   17c14:	cmp	r2, r3
   17c18:	bcc	17c24 <flatcc_builder_check_union_field@@Base+0x78>
   17c1c:	mov	r3, #0
   17c20:	b	17cfc <flatcc_builder_check_union_field@@Base+0x150>
   17c24:	ldr	r3, [fp, #-8]
   17c28:	ldr	r2, [r3, #4]
   17c2c:	ldrh	r3, [fp, #-10]
   17c30:	sub	r3, r3, #-2147483647	; 0x80000001
   17c34:	lsl	r3, r3, #1
   17c38:	add	r3, r2, r3
   17c3c:	ldrh	r3, [r3]
   17c40:	cmp	r3, #0
   17c44:	bne	17c74 <flatcc_builder_check_union_field@@Base+0xc8>
   17c48:	ldr	r3, [fp, #-8]
   17c4c:	ldr	r2, [r3, #4]
   17c50:	ldrh	r3, [fp, #-10]
   17c54:	lsl	r3, r3, #1
   17c58:	add	r3, r2, r3
   17c5c:	ldrh	r3, [r3]
   17c60:	cmp	r3, #0
   17c64:	moveq	r3, #1
   17c68:	movne	r3, #0
   17c6c:	uxtb	r3, r3
   17c70:	b	17cfc <flatcc_builder_check_union_field@@Base+0x150>
   17c74:	ldr	r3, [fp, #-8]
   17c78:	ldr	r3, [r3, #16]
   17c7c:	ldr	r2, [fp, #-8]
   17c80:	ldr	r1, [r2, #4]
   17c84:	ldrh	r2, [fp, #-10]
   17c88:	sub	r2, r2, #-2147483647	; 0x80000001
   17c8c:	lsl	r2, r2, #1
   17c90:	add	r2, r1, r2
   17c94:	ldrh	r2, [r2]
   17c98:	add	r3, r3, r2
   17c9c:	ldrb	r3, [r3]
   17ca0:	cmp	r3, #0
   17ca4:	beq	17cd4 <flatcc_builder_check_union_field@@Base+0x128>
   17ca8:	ldr	r3, [fp, #-8]
   17cac:	ldr	r2, [r3, #4]
   17cb0:	ldrh	r3, [fp, #-10]
   17cb4:	lsl	r3, r3, #1
   17cb8:	add	r3, r2, r3
   17cbc:	ldrh	r3, [r3]
   17cc0:	cmp	r3, #0
   17cc4:	movne	r3, #1
   17cc8:	moveq	r3, #0
   17ccc:	uxtb	r3, r3
   17cd0:	b	17cfc <flatcc_builder_check_union_field@@Base+0x150>
   17cd4:	ldr	r3, [fp, #-8]
   17cd8:	ldr	r2, [r3, #4]
   17cdc:	ldrh	r3, [fp, #-10]
   17ce0:	lsl	r3, r3, #1
   17ce4:	add	r3, r2, r3
   17ce8:	ldrh	r3, [r3]
   17cec:	cmp	r3, #0
   17cf0:	moveq	r3, #1
   17cf4:	movne	r3, #0
   17cf8:	uxtb	r3, r3
   17cfc:	mov	r0, r3
   17d00:	sub	sp, fp, #4
   17d04:	ldr	fp, [sp]
   17d08:	add	sp, sp, #4
   17d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d10:	andeq	r6, r0, r8, lsl #11
   17d14:	muleq	r0, r8, lr
   17d18:	andeq	r6, r0, r0, asr r1

00017d1c <flatcc_builder_check_required@@Base>:
   17d1c:	str	fp, [sp, #-8]!
   17d20:	str	lr, [sp, #4]
   17d24:	add	fp, sp, #4
   17d28:	sub	sp, sp, #24
   17d2c:	str	r0, [fp, #-16]
   17d30:	str	r1, [fp, #-20]	; 0xffffffec
   17d34:	str	r2, [fp, #-24]	; 0xffffffe8
   17d38:	ldr	r3, [fp, #-16]
   17d3c:	ldr	r3, [r3, #32]
   17d40:	ldrh	r3, [r3, #14]
   17d44:	cmp	r3, #3
   17d48:	beq	17d6c <flatcc_builder_check_required@@Base+0x50>
   17d4c:	ldr	r3, [pc, #176]	; 17e04 <flatcc_builder_check_required@@Base+0xe8>
   17d50:	add	r3, pc, r3
   17d54:	movw	r2, #1297	; 0x511
   17d58:	ldr	r1, [pc, #168]	; 17e08 <flatcc_builder_check_required@@Base+0xec>
   17d5c:	add	r1, pc, r1
   17d60:	ldr	r0, [pc, #164]	; 17e0c <flatcc_builder_check_required@@Base+0xf0>
   17d64:	add	r0, pc, r0
   17d68:	bl	12324 <__assert_fail@plt>
   17d6c:	ldr	r3, [fp, #-16]
   17d70:	ldrh	r3, [r3, #8]
   17d74:	mov	r2, r3
   17d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d7c:	cmp	r3, r2
   17d80:	ble	17d8c <flatcc_builder_check_required@@Base+0x70>
   17d84:	mov	r3, #0
   17d88:	b	17df0 <flatcc_builder_check_required@@Base+0xd4>
   17d8c:	mov	r3, #0
   17d90:	str	r3, [fp, #-8]
   17d94:	b	17ddc <flatcc_builder_check_required@@Base+0xc0>
   17d98:	ldr	r3, [fp, #-16]
   17d9c:	ldr	r2, [r3, #4]
   17da0:	ldr	r3, [fp, #-8]
   17da4:	lsl	r3, r3, #1
   17da8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17dac:	add	r3, r1, r3
   17db0:	ldrh	r3, [r3]
   17db4:	lsl	r3, r3, #1
   17db8:	add	r3, r2, r3
   17dbc:	ldrh	r3, [r3]
   17dc0:	cmp	r3, #0
   17dc4:	bne	17dd0 <flatcc_builder_check_required@@Base+0xb4>
   17dc8:	mov	r3, #0
   17dcc:	b	17df0 <flatcc_builder_check_required@@Base+0xd4>
   17dd0:	ldr	r3, [fp, #-8]
   17dd4:	add	r3, r3, #1
   17dd8:	str	r3, [fp, #-8]
   17ddc:	ldr	r2, [fp, #-8]
   17de0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17de4:	cmp	r2, r3
   17de8:	blt	17d98 <flatcc_builder_check_required@@Base+0x7c>
   17dec:	mov	r3, #1
   17df0:	mov	r0, r3
   17df4:	sub	sp, fp, #4
   17df8:	ldr	fp, [sp]
   17dfc:	add	sp, sp, #4
   17e00:	pop	{pc}		; (ldr pc, [sp], #4)
   17e04:	andeq	r6, r0, ip, lsr r4
   17e08:	andeq	r5, r0, r8, lsr #26
   17e0c:	andeq	r5, r0, r0, ror #31

00017e10 <flatcc_builder_end_table@@Base>:
   17e10:	str	fp, [sp, #-8]!
   17e14:	str	lr, [sp, #4]
   17e18:	add	fp, sp, #4
   17e1c:	sub	sp, sp, #48	; 0x30
   17e20:	str	r0, [fp, #-32]	; 0xffffffe0
   17e24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e28:	ldr	r3, [r3, #32]
   17e2c:	ldrh	r3, [r3, #14]
   17e30:	cmp	r3, #3
   17e34:	beq	17e58 <flatcc_builder_end_table@@Base+0x48>
   17e38:	ldr	r3, [pc, #520]	; 18048 <flatcc_builder_end_table@@Base+0x238>
   17e3c:	add	r3, pc, r3
   17e40:	movw	r2, #1317	; 0x525
   17e44:	ldr	r1, [pc, #512]	; 1804c <flatcc_builder_end_table@@Base+0x23c>
   17e48:	add	r1, pc, r1
   17e4c:	ldr	r0, [pc, #508]	; 18050 <flatcc_builder_end_table@@Base+0x240>
   17e50:	add	r0, pc, r0
   17e54:	bl	12324 <__assert_fail@plt>
   17e58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e5c:	ldr	r3, [r3, #4]
   17e60:	sub	r3, r3, #4
   17e64:	str	r3, [fp, #-8]
   17e68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e6c:	ldrh	r3, [r3, #8]
   17e70:	add	r3, r3, #2
   17e74:	uxth	r3, r3
   17e78:	lsl	r3, r3, #1
   17e7c:	strh	r3, [fp, #-10]
   17e80:	ldr	r3, [fp, #-8]
   17e84:	ldrh	r2, [fp, #-10]
   17e88:	strh	r2, [r3]
   17e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e90:	ldr	r3, [r3, #20]
   17e94:	uxth	r2, r3
   17e98:	ldr	r3, [fp, #-8]
   17e9c:	add	r3, r3, #2
   17ea0:	add	r2, r2, #4
   17ea4:	uxth	r2, r2
   17ea8:	strh	r2, [r3]
   17eac:	ldr	r3, [fp, #-8]
   17eb0:	ldrh	r3, [r3]
   17eb4:	mov	r2, r3
   17eb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ebc:	ldr	r3, [r3, #12]
   17ec0:	eor	r2, r2, r3
   17ec4:	movw	r3, #31153	; 0x79b1
   17ec8:	movt	r3, #40503	; 0x9e37
   17ecc:	mul	r3, r3, r2
   17ed0:	ldr	r2, [fp, #-8]
   17ed4:	add	r2, r2, #2
   17ed8:	ldrh	r2, [r2]
   17edc:	eor	r2, r2, r3
   17ee0:	movw	r3, #31153	; 0x79b1
   17ee4:	movt	r3, #40503	; 0x9e37
   17ee8:	mul	r2, r3, r2
   17eec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ef0:	str	r2, [r3, #12]
   17ef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ef8:	ldr	r3, [r3, #12]
   17efc:	ldrh	r2, [fp, #-10]
   17f00:	ldr	r1, [fp, #-8]
   17f04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17f08:	bl	174ac <flatcc_builder_create_cached_vtable@@Base>
   17f0c:	str	r0, [fp, #-16]
   17f10:	ldr	r3, [fp, #-16]
   17f14:	cmp	r3, #0
   17f18:	bne	17f24 <flatcc_builder_end_table@@Base+0x114>
   17f1c:	mov	r3, #0
   17f20:	b	18034 <flatcc_builder_end_table@@Base+0x224>
   17f24:	ldrh	r3, [fp, #-10]
   17f28:	mov	r2, r3
   17f2c:	mov	r1, #0
   17f30:	ldr	r0, [fp, #-8]
   17f34:	bl	122f4 <memset@plt>
   17f38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f3c:	ldr	r2, [r3, #76]	; 0x4c
   17f40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f44:	ldr	r3, [r3, #32]
   17f48:	ldr	r3, [r3, #20]
   17f4c:	add	r3, r2, r3
   17f50:	str	r3, [fp, #-20]	; 0xffffffec
   17f54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f58:	ldr	r2, [r3]
   17f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f60:	sub	r3, r2, r3
   17f64:	asr	r3, r3, #1
   17f68:	str	r3, [fp, #-24]	; 0xffffffe8
   17f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f70:	ldr	r1, [r3, #16]
   17f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f78:	ldr	r2, [r3, #20]
   17f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f80:	ldrh	r0, [r3, #130]	; 0x82
   17f84:	ldr	r3, [fp, #-16]
   17f88:	str	r3, [sp, #8]
   17f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f90:	str	r3, [sp, #4]
   17f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f98:	str	r3, [sp]
   17f9c:	mov	r3, r0
   17fa0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17fa4:	bl	177cc <flatcc_builder_create_table@@Base>
   17fa8:	str	r0, [fp, #-28]	; 0xffffffe4
   17fac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17fb0:	cmp	r3, #0
   17fb4:	bne	17fc0 <flatcc_builder_end_table@@Base+0x1b0>
   17fb8:	mov	r3, #0
   17fbc:	b	18034 <flatcc_builder_end_table@@Base+0x224>
   17fc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fc4:	ldr	r3, [r3, #32]
   17fc8:	ldr	r2, [r3, #24]
   17fcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fd0:	str	r2, [r3, #12]
   17fd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fd8:	ldr	r3, [r3, #32]
   17fdc:	ldrh	r2, [r3, #28]
   17fe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fe4:	strh	r2, [r3, #8]
   17fe8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fec:	ldr	r2, [r3, #52]	; 0x34
   17ff0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ff4:	ldr	r3, [r3, #32]
   17ff8:	ldr	r3, [r3, #16]
   17ffc:	add	r2, r2, r3
   18000:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18004:	str	r2, [r3, #4]
   18008:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1800c:	ldr	r2, [r3, #76]	; 0x4c
   18010:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18014:	ldr	r3, [r3, #32]
   18018:	ldr	r3, [r3, #20]
   1801c:	add	r2, r2, r3
   18020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18024:	str	r2, [r3]
   18028:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1802c:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18034:	mov	r0, r3
   18038:	sub	sp, fp, #4
   1803c:	ldr	fp, [sp]
   18040:	add	sp, sp, #4
   18044:	pop	{pc}		; (ldr pc, [sp], #4)
   18048:	andeq	r6, r0, r0, ror r3
   1804c:	andeq	r5, r0, ip, lsr ip
   18050:	strdeq	r5, [r0], -r4

00018054 <flatcc_builder_create_vector@@Base>:
   18054:	str	r4, [sp, #-12]!
   18058:	str	fp, [sp, #4]
   1805c:	str	lr, [sp, #8]
   18060:	add	fp, sp, #8
   18064:	sub	sp, sp, #108	; 0x6c
   18068:	str	r0, [fp, #-104]	; 0xffffff98
   1806c:	str	r1, [fp, #-108]	; 0xffffff94
   18070:	str	r2, [fp, #-112]	; 0xffffff90
   18074:	str	r3, [fp, #-116]	; 0xffffff8c
   18078:	ldr	r4, [pc, #496]	; 18270 <flatcc_builder_create_vector@@Base+0x21c>
   1807c:	add	r4, pc, r4
   18080:	ldr	r2, [fp, #-112]	; 0xffffff90
   18084:	ldr	r3, [fp, #8]
   18088:	cmp	r2, r3
   1808c:	bls	180c8 <flatcc_builder_create_vector@@Base+0x74>
   18090:	ldr	r2, [fp, #-112]	; 0xffffff90
   18094:	ldr	r3, [fp, #8]
   18098:	cmp	r2, r3
   1809c:	bls	180c0 <flatcc_builder_create_vector@@Base+0x6c>
   180a0:	ldr	r3, [pc, #460]	; 18274 <flatcc_builder_create_vector@@Base+0x220>
   180a4:	add	r3, pc, r3
   180a8:	movw	r2, #1365	; 0x555
   180ac:	ldr	r1, [pc, #452]	; 18278 <flatcc_builder_create_vector@@Base+0x224>
   180b0:	add	r1, pc, r1
   180b4:	ldr	r0, [pc, #448]	; 1827c <flatcc_builder_create_vector@@Base+0x228>
   180b8:	add	r0, pc, r0
   180bc:	bl	12324 <__assert_fail@plt>
   180c0:	mov	r3, #0
   180c4:	b	18258 <flatcc_builder_create_vector@@Base+0x204>
   180c8:	mov	r1, #4
   180cc:	add	r3, fp, #4
   180d0:	mov	r0, r3
   180d4:	bl	14f04 <flatcc_builder_clear@@Base+0x10c>
   180d8:	ldrh	r3, [fp, #4]
   180dc:	mov	r1, r3
   180e0:	ldr	r0, [fp, #-104]	; 0xffffff98
   180e4:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   180e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   180ec:	ldr	r2, [fp, #-116]	; 0xffffff8c
   180f0:	mul	r3, r2, r3
   180f4:	str	r3, [fp, #-16]
   180f8:	ldr	r0, [fp, #-112]	; 0xffffff90
   180fc:	bl	13db4 <main@@Base+0x128>
   18100:	mov	r3, r0
   18104:	str	r3, [fp, #-24]	; 0xffffffe8
   18108:	ldrh	r3, [fp, #4]
   1810c:	mov	r2, r3
   18110:	ldr	r1, [fp, #-16]
   18114:	ldr	r0, [fp, #-104]	; 0xffffff98
   18118:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1811c:	str	r0, [fp, #-20]	; 0xffffffec
   18120:	mov	r3, #0
   18124:	str	r3, [fp, #-96]	; 0xffffffa0
   18128:	mov	r3, #0
   1812c:	str	r3, [fp, #-92]	; 0xffffffa4
   18130:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18134:	add	r3, r3, #4
   18138:	str	r3, [fp, #-96]	; 0xffffffa0
   1813c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18140:	add	r3, r3, #1
   18144:	lsl	r3, r3, #3
   18148:	sub	r2, fp, #12
   1814c:	add	r3, r2, r3
   18150:	sub	r2, fp, #24
   18154:	str	r2, [r3, #-84]	; 0xffffffac
   18158:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1815c:	add	r3, r3, #1
   18160:	lsl	r3, r3, #3
   18164:	sub	r2, fp, #12
   18168:	add	r3, r2, r3
   1816c:	mov	r2, #4
   18170:	str	r2, [r3, #-80]	; 0xffffffb0
   18174:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18178:	add	r3, r3, #1
   1817c:	str	r3, [fp, #-92]	; 0xffffffa4
   18180:	ldr	r3, [fp, #-16]
   18184:	cmp	r3, #0
   18188:	beq	181e0 <flatcc_builder_create_vector@@Base+0x18c>
   1818c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18190:	ldr	r3, [fp, #-16]
   18194:	add	r3, r2, r3
   18198:	str	r3, [fp, #-96]	; 0xffffffa0
   1819c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   181a0:	add	r3, r3, #1
   181a4:	lsl	r3, r3, #3
   181a8:	sub	r2, fp, #12
   181ac:	add	r3, r2, r3
   181b0:	ldr	r2, [fp, #-108]	; 0xffffff94
   181b4:	str	r2, [r3, #-84]	; 0xffffffac
   181b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   181bc:	add	r3, r3, #1
   181c0:	lsl	r3, r3, #3
   181c4:	sub	r2, fp, #12
   181c8:	add	r3, r2, r3
   181cc:	ldr	r2, [fp, #-16]
   181d0:	str	r2, [r3, #-80]	; 0xffffffb0
   181d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   181d8:	add	r3, r3, #1
   181dc:	str	r3, [fp, #-92]	; 0xffffffa4
   181e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181e4:	cmp	r3, #0
   181e8:	beq	18244 <flatcc_builder_create_vector@@Base+0x1f0>
   181ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   181f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181f4:	add	r3, r2, r3
   181f8:	str	r3, [fp, #-96]	; 0xffffffa0
   181fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18200:	add	r3, r3, #1
   18204:	lsl	r3, r3, #3
   18208:	sub	r2, fp, #12
   1820c:	add	r3, r2, r3
   18210:	ldr	r2, [pc, #104]	; 18280 <flatcc_builder_create_vector@@Base+0x22c>
   18214:	ldr	r2, [r4, r2]
   18218:	str	r2, [r3, #-84]	; 0xffffffac
   1821c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18220:	add	r3, r3, #1
   18224:	lsl	r3, r3, #3
   18228:	sub	r2, fp, #12
   1822c:	add	r3, r2, r3
   18230:	ldr	r2, [fp, #-20]	; 0xffffffec
   18234:	str	r2, [r3, #-80]	; 0xffffffb0
   18238:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1823c:	add	r3, r3, #1
   18240:	str	r3, [fp, #-92]	; 0xffffffa4
   18244:	sub	r3, fp, #96	; 0x60
   18248:	mov	r1, r3
   1824c:	ldr	r0, [fp, #-104]	; 0xffffff98
   18250:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   18254:	mov	r3, r0
   18258:	mov	r0, r3
   1825c:	sub	sp, fp, #8
   18260:	ldr	r4, [sp]
   18264:	ldr	fp, [sp, #4]
   18268:	add	sp, sp, #8
   1826c:	pop	{pc}		; (ldr pc, [sp], #4)
   18270:	andeq	r6, r1, ip, ror pc
   18274:	andeq	r6, r0, r4, lsr #2
   18278:	ldrdeq	r5, [r0], -r4
   1827c:			; <UNDEFINED> instruction: 0x00005cb8
   18280:	andeq	r0, r0, r4, asr #32

00018284 <flatcc_builder_end_vector@@Base>:
   18284:	str	fp, [sp, #-8]!
   18288:	str	lr, [sp, #4]
   1828c:	add	fp, sp, #4
   18290:	sub	sp, sp, #24
   18294:	str	r0, [fp, #-16]
   18298:	ldr	r3, [fp, #-16]
   1829c:	ldr	r3, [r3, #32]
   182a0:	ldrh	r3, [r3, #14]
   182a4:	cmp	r3, #4
   182a8:	beq	182cc <flatcc_builder_end_vector@@Base+0x48>
   182ac:	ldr	r3, [pc, #156]	; 18350 <flatcc_builder_end_vector@@Base+0xcc>
   182b0:	add	r3, pc, r3
   182b4:	movw	r2, #1400	; 0x578
   182b8:	ldr	r1, [pc, #148]	; 18354 <flatcc_builder_end_vector@@Base+0xd0>
   182bc:	add	r1, pc, r1
   182c0:	ldr	r0, [pc, #144]	; 18358 <flatcc_builder_end_vector@@Base+0xd4>
   182c4:	add	r0, pc, r0
   182c8:	bl	12324 <__assert_fail@plt>
   182cc:	ldr	r3, [fp, #-16]
   182d0:	ldr	r1, [r3, #16]
   182d4:	ldr	r3, [fp, #-16]
   182d8:	ldr	r3, [r3, #32]
   182dc:	ldr	r0, [r3, #20]
   182e0:	ldr	r3, [fp, #-16]
   182e4:	ldr	r3, [r3, #32]
   182e8:	ldr	ip, [r3, #16]
   182ec:	ldr	r3, [fp, #-16]
   182f0:	ldrh	r3, [r3, #130]	; 0x82
   182f4:	ldr	r2, [fp, #-16]
   182f8:	ldr	r2, [r2, #32]
   182fc:	ldr	r2, [r2, #24]
   18300:	str	r2, [sp, #4]
   18304:	str	r3, [sp]
   18308:	mov	r3, ip
   1830c:	mov	r2, r0
   18310:	ldr	r0, [fp, #-16]
   18314:	bl	18054 <flatcc_builder_create_vector@@Base>
   18318:	str	r0, [fp, #-8]
   1831c:	ldr	r3, [fp, #-8]
   18320:	cmp	r3, #0
   18324:	bne	18330 <flatcc_builder_end_vector@@Base+0xac>
   18328:	mov	r3, #0
   1832c:	b	1833c <flatcc_builder_end_vector@@Base+0xb8>
   18330:	ldr	r0, [fp, #-16]
   18334:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18338:	ldr	r3, [fp, #-8]
   1833c:	mov	r0, r3
   18340:	sub	sp, fp, #4
   18344:	ldr	fp, [sp]
   18348:	add	sp, sp, #4
   1834c:	pop	{pc}		; (ldr pc, [sp], #4)
   18350:	andeq	r5, r0, r8, lsr pc
   18354:	andeq	r5, r0, r8, asr #15
   18358:	andeq	r5, r0, r4, lsl #18

0001835c <flatcc_builder_vector_count@@Base>:
   1835c:	push	{fp}		; (str fp, [sp, #-4]!)
   18360:	add	fp, sp, #0
   18364:	sub	sp, sp, #12
   18368:	str	r0, [fp, #-8]
   1836c:	ldr	r3, [fp, #-8]
   18370:	ldr	r3, [r3, #32]
   18374:	ldr	r3, [r3, #20]
   18378:	mov	r0, r3
   1837c:	add	sp, fp, #0
   18380:	pop	{fp}		; (ldr fp, [sp], #4)
   18384:	bx	lr

00018388 <flatcc_builder_vector_edit@@Base>:
   18388:	push	{fp}		; (str fp, [sp, #-4]!)
   1838c:	add	fp, sp, #0
   18390:	sub	sp, sp, #12
   18394:	str	r0, [fp, #-8]
   18398:	ldr	r3, [fp, #-8]
   1839c:	ldr	r3, [r3, #16]
   183a0:	mov	r0, r3
   183a4:	add	sp, fp, #0
   183a8:	pop	{fp}		; (ldr fp, [sp], #4)
   183ac:	bx	lr
   183b0:	str	r4, [sp, #-12]!
   183b4:	str	fp, [sp, #4]
   183b8:	str	lr, [sp, #8]
   183bc:	add	fp, sp, #8
   183c0:	sub	sp, sp, #116	; 0x74
   183c4:	str	r0, [fp, #-112]	; 0xffffff90
   183c8:	str	r1, [fp, #-116]	; 0xffffff8c
   183cc:	str	r2, [fp, #-120]	; 0xffffff88
   183d0:	str	r3, [fp, #-124]	; 0xffffff84
   183d4:	ldr	r4, [pc, #764]	; 186d8 <flatcc_builder_vector_edit@@Base+0x350>
   183d8:	add	r4, pc, r4
   183dc:	ldr	r3, [fp, #-120]	; 0xffffff88
   183e0:	cmn	r3, #-1073741823	; 0xc0000001
   183e4:	bls	183f0 <flatcc_builder_vector_edit@@Base+0x68>
   183e8:	mov	r3, #0
   183ec:	b	186c0 <flatcc_builder_vector_edit@@Base+0x338>
   183f0:	mov	r1, #4
   183f4:	ldr	r0, [fp, #-112]	; 0xffffff90
   183f8:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   183fc:	ldr	r3, [fp, #-120]	; 0xffffff88
   18400:	lsl	r3, r3, #2
   18404:	str	r3, [fp, #-20]	; 0xffffffec
   18408:	ldr	r0, [fp, #-120]	; 0xffffff88
   1840c:	bl	13db4 <main@@Base+0x128>
   18410:	mov	r3, r0
   18414:	str	r3, [fp, #-36]	; 0xffffffdc
   18418:	mov	r2, #4
   1841c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18420:	ldr	r0, [fp, #-112]	; 0xffffff90
   18424:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   18428:	str	r0, [fp, #-24]	; 0xffffffe8
   1842c:	mov	r3, #0
   18430:	str	r3, [fp, #-108]	; 0xffffff94
   18434:	mov	r3, #0
   18438:	str	r3, [fp, #-104]	; 0xffffff98
   1843c:	ldr	r3, [fp, #-108]	; 0xffffff94
   18440:	add	r3, r3, #4
   18444:	str	r3, [fp, #-108]	; 0xffffff94
   18448:	ldr	r3, [fp, #-104]	; 0xffffff98
   1844c:	add	r3, r3, #1
   18450:	lsl	r3, r3, #3
   18454:	sub	r2, fp, #12
   18458:	add	r3, r2, r3
   1845c:	sub	r2, fp, #36	; 0x24
   18460:	str	r2, [r3, #-96]	; 0xffffffa0
   18464:	ldr	r3, [fp, #-104]	; 0xffffff98
   18468:	add	r3, r3, #1
   1846c:	lsl	r3, r3, #3
   18470:	sub	r2, fp, #12
   18474:	add	r3, r2, r3
   18478:	mov	r2, #4
   1847c:	str	r2, [r3, #-92]	; 0xffffffa4
   18480:	ldr	r3, [fp, #-104]	; 0xffffff98
   18484:	add	r3, r3, #1
   18488:	str	r3, [fp, #-104]	; 0xffffff98
   1848c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18490:	cmp	r3, #0
   18494:	beq	184ec <flatcc_builder_vector_edit@@Base+0x164>
   18498:	ldr	r2, [fp, #-108]	; 0xffffff94
   1849c:	ldr	r3, [fp, #-20]	; 0xffffffec
   184a0:	add	r3, r2, r3
   184a4:	str	r3, [fp, #-108]	; 0xffffff94
   184a8:	ldr	r3, [fp, #-104]	; 0xffffff98
   184ac:	add	r3, r3, #1
   184b0:	lsl	r3, r3, #3
   184b4:	sub	r2, fp, #12
   184b8:	add	r3, r2, r3
   184bc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   184c0:	str	r2, [r3, #-96]	; 0xffffffa0
   184c4:	ldr	r3, [fp, #-104]	; 0xffffff98
   184c8:	add	r3, r3, #1
   184cc:	lsl	r3, r3, #3
   184d0:	sub	r2, fp, #12
   184d4:	add	r3, r2, r3
   184d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   184dc:	str	r2, [r3, #-92]	; 0xffffffa4
   184e0:	ldr	r3, [fp, #-104]	; 0xffffff98
   184e4:	add	r3, r3, #1
   184e8:	str	r3, [fp, #-104]	; 0xffffff98
   184ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184f0:	cmp	r3, #0
   184f4:	beq	18550 <flatcc_builder_vector_edit@@Base+0x1c8>
   184f8:	ldr	r2, [fp, #-108]	; 0xffffff94
   184fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18500:	add	r3, r2, r3
   18504:	str	r3, [fp, #-108]	; 0xffffff94
   18508:	ldr	r3, [fp, #-104]	; 0xffffff98
   1850c:	add	r3, r3, #1
   18510:	lsl	r3, r3, #3
   18514:	sub	r2, fp, #12
   18518:	add	r3, r2, r3
   1851c:	ldr	r2, [pc, #440]	; 186dc <flatcc_builder_vector_edit@@Base+0x354>
   18520:	ldr	r2, [r4, r2]
   18524:	str	r2, [r3, #-96]	; 0xffffffa0
   18528:	ldr	r3, [fp, #-104]	; 0xffffff98
   1852c:	add	r3, r3, #1
   18530:	lsl	r3, r3, #3
   18534:	sub	r2, fp, #12
   18538:	add	r3, r2, r3
   1853c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18540:	str	r2, [r3, #-92]	; 0xffffffa4
   18544:	ldr	r3, [fp, #-104]	; 0xffffff98
   18548:	add	r3, r3, #1
   1854c:	str	r3, [fp, #-104]	; 0xffffff98
   18550:	ldr	r3, [fp, #-112]	; 0xffffff90
   18554:	ldr	r3, [r3, #136]	; 0x88
   18558:	mov	r2, r3
   1855c:	ldr	r3, [fp, #-108]	; 0xffffff94
   18560:	sub	r3, r2, r3
   18564:	str	r3, [fp, #-28]	; 0xffffffe4
   18568:	mov	r3, #0
   1856c:	str	r3, [fp, #-16]
   18570:	b	1869c <flatcc_builder_vector_edit@@Base+0x314>
   18574:	ldr	r3, [fp, #-16]
   18578:	lsl	r3, r3, #2
   1857c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18580:	add	r3, r2, r3
   18584:	ldr	r3, [r3]
   18588:	cmp	r3, #0
   1858c:	beq	1862c <flatcc_builder_vector_edit@@Base+0x2a4>
   18590:	ldr	r3, [fp, #-16]
   18594:	lsl	r3, r3, #2
   18598:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1859c:	add	r3, r2, r3
   185a0:	ldr	r3, [r3]
   185a4:	mov	r2, r3
   185a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185ac:	sub	r2, r2, r3
   185b0:	ldr	r3, [fp, #-16]
   185b4:	lsl	r3, r3, #2
   185b8:	sub	r3, r2, r3
   185bc:	sub	r3, r3, #4
   185c0:	str	r3, [fp, #-32]	; 0xffffffe0
   185c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   185c8:	bl	13db4 <main@@Base+0x128>
   185cc:	mov	r1, r0
   185d0:	ldr	r3, [fp, #-16]
   185d4:	lsl	r3, r3, #2
   185d8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   185dc:	add	r3, r2, r3
   185e0:	mov	r2, r1
   185e4:	str	r2, [r3]
   185e8:	ldr	r3, [fp, #-124]	; 0xffffff84
   185ec:	cmp	r3, #0
   185f0:	beq	18690 <flatcc_builder_vector_edit@@Base+0x308>
   185f4:	ldr	r2, [fp, #-124]	; 0xffffff84
   185f8:	ldr	r3, [fp, #-16]
   185fc:	add	r3, r2, r3
   18600:	ldrb	r3, [r3]
   18604:	cmp	r3, #0
   18608:	bne	18690 <flatcc_builder_vector_edit@@Base+0x308>
   1860c:	ldr	r3, [pc, #204]	; 186e0 <flatcc_builder_vector_edit@@Base+0x358>
   18610:	add	r3, pc, r3
   18614:	movw	r2, #1457	; 0x5b1
   18618:	ldr	r1, [pc, #196]	; 186e4 <flatcc_builder_vector_edit@@Base+0x35c>
   1861c:	add	r1, pc, r1
   18620:	ldr	r0, [pc, #192]	; 186e8 <flatcc_builder_vector_edit@@Base+0x360>
   18624:	add	r0, pc, r0
   18628:	bl	12324 <__assert_fail@plt>
   1862c:	ldr	r3, [fp, #-124]	; 0xffffff84
   18630:	cmp	r3, #0
   18634:	beq	18670 <flatcc_builder_vector_edit@@Base+0x2e8>
   18638:	ldr	r2, [fp, #-124]	; 0xffffff84
   1863c:	ldr	r3, [fp, #-16]
   18640:	add	r3, r2, r3
   18644:	ldrb	r3, [r3]
   18648:	cmp	r3, #0
   1864c:	beq	18690 <flatcc_builder_vector_edit@@Base+0x308>
   18650:	ldr	r3, [pc, #148]	; 186ec <flatcc_builder_vector_edit@@Base+0x364>
   18654:	add	r3, pc, r3
   18658:	movw	r2, #1461	; 0x5b5
   1865c:	ldr	r1, [pc, #140]	; 186f0 <flatcc_builder_vector_edit@@Base+0x368>
   18660:	add	r1, pc, r1
   18664:	ldr	r0, [pc, #136]	; 186f4 <flatcc_builder_vector_edit@@Base+0x36c>
   18668:	add	r0, pc, r0
   1866c:	bl	12324 <__assert_fail@plt>
   18670:	ldr	r3, [pc, #128]	; 186f8 <flatcc_builder_vector_edit@@Base+0x370>
   18674:	add	r3, pc, r3
   18678:	movw	r2, #1463	; 0x5b7
   1867c:	ldr	r1, [pc, #120]	; 186fc <flatcc_builder_vector_edit@@Base+0x374>
   18680:	add	r1, pc, r1
   18684:	ldr	r0, [pc, #116]	; 18700 <flatcc_builder_vector_edit@@Base+0x378>
   18688:	add	r0, pc, r0
   1868c:	bl	12324 <__assert_fail@plt>
   18690:	ldr	r3, [fp, #-16]
   18694:	add	r3, r3, #1
   18698:	str	r3, [fp, #-16]
   1869c:	ldr	r2, [fp, #-16]
   186a0:	ldr	r3, [fp, #-120]	; 0xffffff88
   186a4:	cmp	r2, r3
   186a8:	bcc	18574 <flatcc_builder_vector_edit@@Base+0x1ec>
   186ac:	sub	r3, fp, #108	; 0x6c
   186b0:	mov	r1, r3
   186b4:	ldr	r0, [fp, #-112]	; 0xffffff90
   186b8:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   186bc:	mov	r3, r0
   186c0:	mov	r0, r3
   186c4:	sub	sp, fp, #8
   186c8:	ldr	r4, [sp]
   186cc:	ldr	fp, [sp, #4]
   186d0:	add	sp, sp, #8
   186d4:	pop	{pc}		; (ldr pc, [sp], #4)
   186d8:	andeq	r6, r1, r0, lsr #24
   186dc:	andeq	r0, r0, r4, asr #32
   186e0:	strdeq	r5, [r0], -r4
   186e4:	andeq	r5, r0, r8, ror #8
   186e8:	andeq	r5, r0, r0, ror #14
   186ec:			; <UNDEFINED> instruction: 0x00005bb0
   186f0:	andeq	r5, r0, r4, lsr #8
   186f4:	andeq	r5, r0, ip, lsr #14
   186f8:	muleq	r0, r0, fp
   186fc:	andeq	r5, r0, r4, lsl #8
   18700:	andeq	r5, r0, ip, asr r4

00018704 <flatcc_builder_create_offset_vector_direct@@Base>:
   18704:	str	fp, [sp, #-8]!
   18708:	str	lr, [sp, #4]
   1870c:	add	fp, sp, #4
   18710:	sub	sp, sp, #16
   18714:	str	r0, [fp, #-8]
   18718:	str	r1, [fp, #-12]
   1871c:	str	r2, [fp, #-16]
   18720:	mov	r3, #0
   18724:	ldr	r2, [fp, #-16]
   18728:	ldr	r1, [fp, #-12]
   1872c:	ldr	r0, [fp, #-8]
   18730:	bl	183b0 <flatcc_builder_vector_edit@@Base+0x28>
   18734:	mov	r3, r0
   18738:	mov	r0, r3
   1873c:	sub	sp, fp, #4
   18740:	ldr	fp, [sp]
   18744:	add	sp, sp, #4
   18748:	pop	{pc}		; (ldr pc, [sp], #4)

0001874c <flatcc_builder_end_offset_vector@@Base>:
   1874c:	str	fp, [sp, #-8]!
   18750:	str	lr, [sp, #4]
   18754:	add	fp, sp, #4
   18758:	sub	sp, sp, #16
   1875c:	str	r0, [fp, #-16]
   18760:	ldr	r3, [fp, #-16]
   18764:	ldr	r3, [r3, #32]
   18768:	ldrh	r3, [r3, #14]
   1876c:	cmp	r3, #5
   18770:	beq	18794 <flatcc_builder_end_offset_vector@@Base+0x48>
   18774:	ldr	r3, [pc, #112]	; 187ec <flatcc_builder_end_offset_vector@@Base+0xa0>
   18778:	add	r3, pc, r3
   1877c:	movw	r2, #1480	; 0x5c8
   18780:	ldr	r1, [pc, #104]	; 187f0 <flatcc_builder_end_offset_vector@@Base+0xa4>
   18784:	add	r1, pc, r1
   18788:	ldr	r0, [pc, #100]	; 187f4 <flatcc_builder_end_offset_vector@@Base+0xa8>
   1878c:	add	r0, pc, r0
   18790:	bl	12324 <__assert_fail@plt>
   18794:	ldr	r3, [fp, #-16]
   18798:	ldr	r1, [r3, #16]
   1879c:	ldr	r3, [fp, #-16]
   187a0:	ldr	r3, [r3, #32]
   187a4:	ldr	r3, [r3, #20]
   187a8:	mov	r2, r3
   187ac:	ldr	r0, [fp, #-16]
   187b0:	bl	18704 <flatcc_builder_create_offset_vector_direct@@Base>
   187b4:	str	r0, [fp, #-8]
   187b8:	ldr	r3, [fp, #-8]
   187bc:	cmp	r3, #0
   187c0:	bne	187cc <flatcc_builder_end_offset_vector@@Base+0x80>
   187c4:	mov	r3, #0
   187c8:	b	187d8 <flatcc_builder_end_offset_vector@@Base+0x8c>
   187cc:	ldr	r0, [fp, #-16]
   187d0:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   187d4:	ldr	r3, [fp, #-8]
   187d8:	mov	r0, r3
   187dc:	sub	sp, fp, #4
   187e0:	ldr	fp, [sp]
   187e4:	add	sp, sp, #4
   187e8:	pop	{pc}		; (ldr pc, [sp], #4)
   187ec:	andeq	r5, r0, ip, lsr #21
   187f0:	andeq	r5, r0, r0, lsl #6
   187f4:	andeq	r5, r0, r8, lsr #9

000187f8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   187f8:	str	fp, [sp, #-8]!
   187fc:	str	lr, [sp, #4]
   18800:	add	fp, sp, #4
   18804:	sub	sp, sp, #16
   18808:	str	r0, [fp, #-16]
   1880c:	str	r1, [fp, #-20]	; 0xffffffec
   18810:	ldr	r3, [fp, #-16]
   18814:	ldr	r3, [r3, #32]
   18818:	ldrh	r3, [r3, #14]
   1881c:	cmp	r3, #5
   18820:	beq	18844 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   18824:	ldr	r3, [pc, #112]	; 1889c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   18828:	add	r3, pc, r3
   1882c:	movw	r2, #1493	; 0x5d5
   18830:	ldr	r1, [pc, #104]	; 188a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   18834:	add	r1, pc, r1
   18838:	ldr	r0, [pc, #100]	; 188a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   1883c:	add	r0, pc, r0
   18840:	bl	12324 <__assert_fail@plt>
   18844:	ldr	r3, [fp, #-16]
   18848:	ldr	r1, [r3, #16]
   1884c:	ldr	r3, [fp, #-16]
   18850:	ldr	r3, [r3, #32]
   18854:	ldr	r2, [r3, #20]
   18858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1885c:	ldr	r0, [fp, #-16]
   18860:	bl	183b0 <flatcc_builder_vector_edit@@Base+0x28>
   18864:	str	r0, [fp, #-8]
   18868:	ldr	r3, [fp, #-8]
   1886c:	cmp	r3, #0
   18870:	bne	1887c <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   18874:	mov	r3, #0
   18878:	b	18888 <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   1887c:	ldr	r0, [fp, #-16]
   18880:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18884:	ldr	r3, [fp, #-8]
   18888:	mov	r0, r3
   1888c:	sub	sp, fp, #4
   18890:	ldr	fp, [sp]
   18894:	add	sp, sp, #4
   18898:	pop	{pc}		; (ldr pc, [sp], #4)
   1889c:	andeq	r5, r0, r0, lsr #20
   188a0:	andeq	r5, r0, r0, asr r2
   188a4:	strdeq	r5, [r0], -r8

000188a8 <flatcc_builder_offset_vector_edit@@Base>:
   188a8:	push	{fp}		; (str fp, [sp, #-4]!)
   188ac:	add	fp, sp, #0
   188b0:	sub	sp, sp, #12
   188b4:	str	r0, [fp, #-8]
   188b8:	ldr	r3, [fp, #-8]
   188bc:	ldr	r3, [r3, #16]
   188c0:	mov	r0, r3
   188c4:	add	sp, fp, #0
   188c8:	pop	{fp}		; (ldr fp, [sp], #4)
   188cc:	bx	lr

000188d0 <flatcc_builder_offset_vector_count@@Base>:
   188d0:	push	{fp}		; (str fp, [sp, #-4]!)
   188d4:	add	fp, sp, #0
   188d8:	sub	sp, sp, #12
   188dc:	str	r0, [fp, #-8]
   188e0:	ldr	r3, [fp, #-8]
   188e4:	ldr	r3, [r3, #32]
   188e8:	ldr	r3, [r3, #20]
   188ec:	mov	r0, r3
   188f0:	add	sp, fp, #0
   188f4:	pop	{fp}		; (ldr fp, [sp], #4)
   188f8:	bx	lr

000188fc <flatcc_builder_table_add_union@@Base>:
   188fc:	str	fp, [sp, #-8]!
   18900:	str	lr, [sp, #4]
   18904:	add	fp, sp, #4
   18908:	sub	sp, sp, #24
   1890c:	str	r0, [fp, #-16]
   18910:	str	r1, [fp, #-20]	; 0xffffffec
   18914:	sub	r1, fp, #28
   18918:	stm	r1, {r2, r3}
   1891c:	ldr	r3, [fp, #-16]
   18920:	ldr	r3, [r3, #32]
   18924:	ldrh	r3, [r3, #14]
   18928:	cmp	r3, #3
   1892c:	beq	18950 <flatcc_builder_table_add_union@@Base+0x54>
   18930:	ldr	r3, [pc, #360]	; 18aa0 <flatcc_builder_table_add_union@@Base+0x1a4>
   18934:	add	r3, pc, r3
   18938:	movw	r2, #1518	; 0x5ee
   1893c:	ldr	r1, [pc, #352]	; 18aa4 <flatcc_builder_table_add_union@@Base+0x1a8>
   18940:	add	r1, pc, r1
   18944:	ldr	r0, [pc, #348]	; 18aa8 <flatcc_builder_table_add_union@@Base+0x1ac>
   18948:	add	r0, pc, r0
   1894c:	bl	12324 <__assert_fail@plt>
   18950:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18954:	cmp	r3, #0
   18958:	bne	189a8 <flatcc_builder_table_add_union@@Base+0xac>
   1895c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18960:	cmp	r3, #0
   18964:	beq	189a8 <flatcc_builder_table_add_union@@Base+0xac>
   18968:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1896c:	cmp	r3, #0
   18970:	bne	189a0 <flatcc_builder_table_add_union@@Base+0xa4>
   18974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18978:	cmp	r3, #0
   1897c:	beq	189a0 <flatcc_builder_table_add_union@@Base+0xa4>
   18980:	ldr	r3, [pc, #292]	; 18aac <flatcc_builder_table_add_union@@Base+0x1b0>
   18984:	add	r3, pc, r3
   18988:	movw	r2, #1519	; 0x5ef
   1898c:	ldr	r1, [pc, #284]	; 18ab0 <flatcc_builder_table_add_union@@Base+0x1b4>
   18990:	add	r1, pc, r1
   18994:	ldr	r0, [pc, #280]	; 18ab4 <flatcc_builder_table_add_union@@Base+0x1b8>
   18998:	add	r0, pc, r0
   1899c:	bl	12324 <__assert_fail@plt>
   189a0:	mvn	r3, #0
   189a4:	b	18a8c <flatcc_builder_table_add_union@@Base+0x190>
   189a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189ac:	cmp	r3, #0
   189b0:	beq	18a10 <flatcc_builder_table_add_union@@Base+0x114>
   189b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   189b8:	ldr	r0, [fp, #-16]
   189bc:	bl	19ad0 <flatcc_builder_table_add_offset@@Base>
   189c0:	str	r0, [fp, #-8]
   189c4:	ldr	r3, [fp, #-8]
   189c8:	cmp	r3, #0
   189cc:	bne	18a04 <flatcc_builder_table_add_union@@Base+0x108>
   189d0:	ldr	r3, [fp, #-8]
   189d4:	cmp	r3, #0
   189d8:	bne	189fc <flatcc_builder_table_add_union@@Base+0x100>
   189dc:	ldr	r3, [pc, #212]	; 18ab8 <flatcc_builder_table_add_union@@Base+0x1bc>
   189e0:	add	r3, pc, r3
   189e4:	movw	r2, #1522	; 0x5f2
   189e8:	ldr	r1, [pc, #204]	; 18abc <flatcc_builder_table_add_union@@Base+0x1c0>
   189ec:	add	r1, pc, r1
   189f0:	ldr	r0, [pc, #200]	; 18ac0 <flatcc_builder_table_add_union@@Base+0x1c4>
   189f4:	add	r0, pc, r0
   189f8:	bl	12324 <__assert_fail@plt>
   189fc:	mvn	r3, #0
   18a00:	b	18a8c <flatcc_builder_table_add_union@@Base+0x190>
   18a04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18a08:	ldr	r3, [fp, #-8]
   18a0c:	str	r2, [r3]
   18a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a14:	sub	r1, r3, #1
   18a18:	mov	r3, #1
   18a1c:	mov	r2, #1
   18a20:	ldr	r0, [fp, #-16]
   18a24:	bl	19860 <flatcc_builder_table_add@@Base>
   18a28:	str	r0, [fp, #-12]
   18a2c:	ldr	r3, [fp, #-12]
   18a30:	cmp	r3, #0
   18a34:	bne	18a6c <flatcc_builder_table_add_union@@Base+0x170>
   18a38:	ldr	r3, [fp, #-12]
   18a3c:	cmp	r3, #0
   18a40:	bne	18a64 <flatcc_builder_table_add_union@@Base+0x168>
   18a44:	ldr	r3, [pc, #120]	; 18ac4 <flatcc_builder_table_add_union@@Base+0x1c8>
   18a48:	add	r3, pc, r3
   18a4c:	movw	r2, #1526	; 0x5f6
   18a50:	ldr	r1, [pc, #112]	; 18ac8 <flatcc_builder_table_add_union@@Base+0x1cc>
   18a54:	add	r1, pc, r1
   18a58:	ldr	r0, [pc, #108]	; 18acc <flatcc_builder_table_add_union@@Base+0x1d0>
   18a5c:	add	r0, pc, r0
   18a60:	bl	12324 <__assert_fail@plt>
   18a64:	mvn	r3, #0
   18a68:	b	18a8c <flatcc_builder_table_add_union@@Base+0x190>
   18a6c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18a70:	mov	r0, r3
   18a74:	bl	13dd8 <main@@Base+0x14c>
   18a78:	mov	r3, r0
   18a7c:	mov	r2, r3
   18a80:	ldr	r3, [fp, #-12]
   18a84:	strb	r2, [r3]
   18a88:	mov	r3, #0
   18a8c:	mov	r0, r3
   18a90:	sub	sp, fp, #4
   18a94:	ldr	fp, [sp]
   18a98:	add	sp, sp, #4
   18a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa0:	andeq	r5, r0, r0, asr #18
   18aa4:	andeq	r5, r0, r4, asr #2
   18aa8:	strdeq	r5, [r0], -ip
   18aac:	strdeq	r5, [r0], -r0
   18ab0:	strdeq	r5, [r0], -r4
   18ab4:	andeq	r5, r0, ip, lsl #8
   18ab8:	muleq	r0, r4, r8
   18abc:	muleq	r0, r8, r0
   18ac0:	ldrdeq	r5, [r0], -r4
   18ac4:	andeq	r5, r0, ip, lsr #16
   18ac8:	andeq	r5, r0, r0, lsr r0
   18acc:	andeq	r5, r0, r8, ror r3

00018ad0 <flatcc_builder_table_add_union_vector@@Base>:
   18ad0:	str	fp, [sp, #-8]!
   18ad4:	str	lr, [sp, #4]
   18ad8:	add	fp, sp, #4
   18adc:	sub	sp, sp, #24
   18ae0:	str	r0, [fp, #-16]
   18ae4:	str	r1, [fp, #-20]	; 0xffffffec
   18ae8:	sub	r1, fp, #28
   18aec:	stm	r1, {r2, r3}
   18af0:	ldr	r3, [fp, #-16]
   18af4:	ldr	r3, [r3, #32]
   18af8:	ldrh	r3, [r3, #14]
   18afc:	cmp	r3, #3
   18b00:	beq	18b24 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18b04:	ldr	r3, [pc, #404]	; 18ca0 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   18b08:	add	r3, pc, r3
   18b0c:	mov	r2, #1536	; 0x600
   18b10:	ldr	r1, [pc, #396]	; 18ca4 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18b14:	add	r1, pc, r1
   18b18:	ldr	r0, [pc, #392]	; 18ca8 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18b1c:	add	r0, pc, r0
   18b20:	bl	12324 <__assert_fail@plt>
   18b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b28:	cmp	r3, #0
   18b2c:	moveq	r3, #1
   18b30:	movne	r3, #0
   18b34:	uxtb	r2, r3
   18b38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b3c:	cmp	r3, #0
   18b40:	moveq	r3, #1
   18b44:	movne	r3, #0
   18b48:	uxtb	r3, r3
   18b4c:	eor	r3, r3, r2
   18b50:	uxtb	r3, r3
   18b54:	cmp	r3, #0
   18b58:	beq	18bbc <flatcc_builder_table_add_union_vector@@Base+0xec>
   18b5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b60:	cmp	r3, #0
   18b64:	movne	r3, #1
   18b68:	moveq	r3, #0
   18b6c:	uxtb	r2, r3
   18b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b74:	cmp	r3, #0
   18b78:	moveq	r3, #1
   18b7c:	movne	r3, #0
   18b80:	uxtb	r3, r3
   18b84:	eor	r3, r3, r2
   18b88:	uxtb	r3, r3
   18b8c:	cmp	r3, #0
   18b90:	bne	18bb4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18b94:	ldr	r3, [pc, #272]	; 18cac <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   18b98:	add	r3, pc, r3
   18b9c:	movw	r2, #1537	; 0x601
   18ba0:	ldr	r1, [pc, #264]	; 18cb0 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18ba4:	add	r1, pc, r1
   18ba8:	ldr	r0, [pc, #260]	; 18cb4 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   18bac:	add	r0, pc, r0
   18bb0:	bl	12324 <__assert_fail@plt>
   18bb4:	mvn	r3, #0
   18bb8:	b	18c8c <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18bbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18bc0:	cmp	r3, #0
   18bc4:	beq	18c88 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bcc:	sub	r3, r3, #1
   18bd0:	mov	r1, r3
   18bd4:	ldr	r0, [fp, #-16]
   18bd8:	bl	19ad0 <flatcc_builder_table_add_offset@@Base>
   18bdc:	str	r0, [fp, #-8]
   18be0:	ldr	r3, [fp, #-8]
   18be4:	cmp	r3, #0
   18be8:	bne	18c20 <flatcc_builder_table_add_union_vector@@Base+0x150>
   18bec:	ldr	r3, [fp, #-8]
   18bf0:	cmp	r3, #0
   18bf4:	bne	18c18 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18bf8:	ldr	r3, [pc, #184]	; 18cb8 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18bfc:	add	r3, pc, r3
   18c00:	movw	r2, #1540	; 0x604
   18c04:	ldr	r1, [pc, #176]	; 18cbc <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18c08:	add	r1, pc, r1
   18c0c:	ldr	r0, [pc, #172]	; 18cc0 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18c10:	add	r0, pc, r0
   18c14:	bl	12324 <__assert_fail@plt>
   18c18:	mvn	r3, #0
   18c1c:	b	18c8c <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18c20:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18c24:	ldr	r3, [fp, #-8]
   18c28:	str	r2, [r3]
   18c2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18c30:	ldr	r0, [fp, #-16]
   18c34:	bl	19ad0 <flatcc_builder_table_add_offset@@Base>
   18c38:	str	r0, [fp, #-8]
   18c3c:	ldr	r3, [fp, #-8]
   18c40:	cmp	r3, #0
   18c44:	bne	18c7c <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   18c48:	ldr	r3, [fp, #-8]
   18c4c:	cmp	r3, #0
   18c50:	bne	18c74 <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   18c54:	ldr	r3, [pc, #104]	; 18cc4 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18c58:	add	r3, pc, r3
   18c5c:	movw	r2, #1544	; 0x608
   18c60:	ldr	r1, [pc, #96]	; 18cc8 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18c64:	add	r1, pc, r1
   18c68:	ldr	r0, [pc, #92]	; 18ccc <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18c6c:	add	r0, pc, r0
   18c70:	bl	12324 <__assert_fail@plt>
   18c74:	mvn	r3, #0
   18c78:	b	18c8c <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18c7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18c80:	ldr	r3, [fp, #-8]
   18c84:	str	r2, [r3]
   18c88:	mov	r3, #0
   18c8c:	mov	r0, r3
   18c90:	sub	sp, fp, #4
   18c94:	ldr	fp, [sp]
   18c98:	add	sp, sp, #4
   18c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18ca0:	andeq	r5, r0, ip, lsl #15
   18ca4:	andeq	r4, r0, r0, ror pc
   18ca8:	andeq	r5, r0, r8, lsr #4
   18cac:	strdeq	r5, [r0], -ip
   18cb0:	andeq	r4, r0, r0, ror #29
   18cb4:	andeq	r5, r0, r4, lsr r2
   18cb8:	muleq	r0, r8, r6
   18cbc:	andeq	r4, r0, ip, ror lr
   18cc0:			; <UNDEFINED> instruction: 0x000051b8
   18cc4:	andeq	r5, r0, ip, lsr r6
   18cc8:	andeq	r4, r0, r0, lsr #28
   18ccc:	andeq	r5, r0, ip, asr r1

00018cd0 <flatcc_builder_create_union_vector@@Base>:
   18cd0:	str	fp, [sp, #-8]!
   18cd4:	str	lr, [sp, #4]
   18cd8:	add	fp, sp, #4
   18cdc:	sub	sp, sp, #48	; 0x30
   18ce0:	str	r0, [fp, #-32]	; 0xffffffe0
   18ce4:	str	r1, [fp, #-36]	; 0xffffffdc
   18ce8:	str	r2, [fp, #-40]	; 0xffffffd8
   18cec:	str	r3, [fp, #-44]	; 0xffffffd4
   18cf0:	mov	r3, #0
   18cf4:	str	r3, [fp, #-24]	; 0xffffffe8
   18cf8:	mov	r3, #0
   18cfc:	str	r3, [fp, #-20]	; 0xffffffec
   18d00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18d04:	bl	17044 <flatcc_builder_start_offset_vector@@Base>
   18d08:	mov	r3, r0
   18d0c:	cmp	r3, #0
   18d10:	beq	18d2c <flatcc_builder_create_union_vector@@Base+0x5c>
   18d14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d18:	mov	r1, r3
   18d1c:	sub	r3, fp, #24
   18d20:	ldrd	r2, [r3]
   18d24:	strd	r2, [r1]
   18d28:	b	18e48 <flatcc_builder_create_union_vector@@Base+0x178>
   18d2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18d30:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18d34:	bl	16888 <flatcc_builder_extend_offset_vector@@Base>
   18d38:	mov	r3, r0
   18d3c:	cmp	r3, #0
   18d40:	bne	18d5c <flatcc_builder_create_union_vector@@Base+0x8c>
   18d44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d48:	mov	r1, r3
   18d4c:	sub	r3, fp, #24
   18d50:	ldrd	r2, [r3]
   18d54:	strd	r2, [r1]
   18d58:	b	18e48 <flatcc_builder_create_union_vector@@Base+0x178>
   18d5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18d60:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18d64:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   18d68:	str	r0, [fp, #-12]
   18d6c:	ldr	r3, [fp, #-12]
   18d70:	cmp	r3, #0
   18d74:	bne	18d90 <flatcc_builder_create_union_vector@@Base+0xc0>
   18d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d7c:	mov	r1, r3
   18d80:	sub	r3, fp, #24
   18d84:	ldrd	r2, [r3]
   18d88:	strd	r2, [r1]
   18d8c:	b	18e48 <flatcc_builder_create_union_vector@@Base+0x178>
   18d90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18d94:	bl	188a8 <flatcc_builder_offset_vector_edit@@Base>
   18d98:	str	r0, [fp, #-16]
   18d9c:	mov	r3, #0
   18da0:	str	r3, [fp, #-8]
   18da4:	b	18e00 <flatcc_builder_create_union_vector@@Base+0x130>
   18da8:	ldr	r3, [fp, #-8]
   18dac:	lsl	r3, r3, #3
   18db0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18db4:	add	r2, r2, r3
   18db8:	ldr	r1, [fp, #-12]
   18dbc:	ldr	r3, [fp, #-8]
   18dc0:	add	r3, r1, r3
   18dc4:	ldrb	r2, [r2]
   18dc8:	strb	r2, [r3]
   18dcc:	ldr	r3, [fp, #-8]
   18dd0:	lsl	r3, r3, #3
   18dd4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18dd8:	add	r2, r2, r3
   18ddc:	ldr	r3, [fp, #-8]
   18de0:	lsl	r3, r3, #2
   18de4:	ldr	r1, [fp, #-16]
   18de8:	add	r3, r1, r3
   18dec:	ldr	r2, [r2, #4]
   18df0:	str	r2, [r3]
   18df4:	ldr	r3, [fp, #-8]
   18df8:	add	r3, r3, #1
   18dfc:	str	r3, [fp, #-8]
   18e00:	ldr	r2, [fp, #-8]
   18e04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18e08:	cmp	r2, r3
   18e0c:	bcc	18da8 <flatcc_builder_create_union_vector@@Base+0xd8>
   18e10:	sub	r0, fp, #24
   18e14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18e18:	str	r3, [sp]
   18e1c:	ldr	r3, [fp, #-16]
   18e20:	ldr	r2, [fp, #-12]
   18e24:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18e28:	bl	18e5c <flatcc_builder_create_union_vector_direct@@Base>
   18e2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18e30:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18e34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e38:	mov	r1, r3
   18e3c:	sub	r3, fp, #24
   18e40:	ldrd	r2, [r3]
   18e44:	strd	r2, [r1]
   18e48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18e4c:	sub	sp, fp, #4
   18e50:	ldr	fp, [sp]
   18e54:	add	sp, sp, #4
   18e58:	pop	{pc}		; (ldr pc, [sp], #4)

00018e5c <flatcc_builder_create_union_vector_direct@@Base>:
   18e5c:	str	fp, [sp, #-8]!
   18e60:	str	lr, [sp, #4]
   18e64:	add	fp, sp, #4
   18e68:	sub	sp, sp, #32
   18e6c:	str	r0, [fp, #-16]
   18e70:	str	r1, [fp, #-20]	; 0xffffffec
   18e74:	str	r2, [fp, #-24]	; 0xffffffe8
   18e78:	str	r3, [fp, #-28]	; 0xffffffe4
   18e7c:	mov	r3, #0
   18e80:	str	r3, [fp, #-12]
   18e84:	mov	r3, #0
   18e88:	str	r3, [fp, #-8]
   18e8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e90:	ldr	r2, [fp, #4]
   18e94:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18e98:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e9c:	bl	183b0 <flatcc_builder_vector_edit@@Base+0x28>
   18ea0:	mov	r3, r0
   18ea4:	str	r3, [fp, #-8]
   18ea8:	ldr	r3, [fp, #-8]
   18eac:	cmp	r3, #0
   18eb0:	bne	18ecc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   18eb4:	ldr	r3, [fp, #-16]
   18eb8:	mov	r1, r3
   18ebc:	sub	r3, fp, #12
   18ec0:	ldrd	r2, [r3]
   18ec4:	strd	r2, [r1]
   18ec8:	b	18f30 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   18ecc:	mvn	r3, #0
   18ed0:	str	r3, [sp, #4]
   18ed4:	mov	r3, #1
   18ed8:	str	r3, [sp]
   18edc:	mov	r3, #1
   18ee0:	ldr	r2, [fp, #4]
   18ee4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18ee8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18eec:	bl	18054 <flatcc_builder_create_vector@@Base>
   18ef0:	mov	r3, r0
   18ef4:	str	r3, [fp, #-12]
   18ef8:	ldr	r3, [fp, #-12]
   18efc:	cmp	r3, #0
   18f00:	bne	18f1c <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   18f04:	ldr	r3, [fp, #-16]
   18f08:	mov	r1, r3
   18f0c:	sub	r3, fp, #12
   18f10:	ldrd	r2, [r3]
   18f14:	strd	r2, [r1]
   18f18:	b	18f30 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   18f1c:	ldr	r3, [fp, #-16]
   18f20:	mov	r1, r3
   18f24:	sub	r3, fp, #12
   18f28:	ldrd	r2, [r3]
   18f2c:	strd	r2, [r1]
   18f30:	ldr	r0, [fp, #-16]
   18f34:	sub	sp, fp, #4
   18f38:	ldr	fp, [sp]
   18f3c:	add	sp, sp, #4
   18f40:	pop	{pc}		; (ldr pc, [sp], #4)

00018f44 <flatcc_builder_start_union_vector@@Base>:
   18f44:	str	fp, [sp, #-8]!
   18f48:	str	lr, [sp, #4]
   18f4c:	add	fp, sp, #4
   18f50:	sub	sp, sp, #8
   18f54:	str	r0, [fp, #-8]
   18f58:	mov	r1, #4
   18f5c:	ldr	r0, [fp, #-8]
   18f60:	bl	15278 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18f64:	mov	r3, r0
   18f68:	cmp	r3, #0
   18f6c:	beq	18f78 <flatcc_builder_start_union_vector@@Base+0x34>
   18f70:	mvn	r3, #0
   18f74:	b	18fb8 <flatcc_builder_start_union_vector@@Base+0x74>
   18f78:	ldr	r3, [fp, #-8]
   18f7c:	ldr	r3, [r3, #32]
   18f80:	mov	r2, #8
   18f84:	str	r2, [r3, #16]
   18f88:	ldr	r3, [fp, #-8]
   18f8c:	ldr	r3, [r3, #32]
   18f90:	mov	r2, #0
   18f94:	str	r2, [r3, #20]
   18f98:	ldr	r3, [fp, #-8]
   18f9c:	ldr	r3, [r3, #32]
   18fa0:	mov	r2, #7
   18fa4:	strh	r2, [r3, #14]
   18fa8:	mvn	r1, #3
   18fac:	ldr	r0, [fp, #-8]
   18fb0:	bl	140d8 <flatcc_builder_default_alloc@@Base+0x1d4>
   18fb4:	mov	r3, #0
   18fb8:	mov	r0, r3
   18fbc:	sub	sp, fp, #4
   18fc0:	ldr	fp, [sp]
   18fc4:	add	sp, sp, #4
   18fc8:	pop	{pc}		; (ldr pc, [sp], #4)

00018fcc <flatcc_builder_end_union_vector@@Base>:
   18fcc:	str	fp, [sp, #-8]!
   18fd0:	str	lr, [sp, #4]
   18fd4:	add	fp, sp, #4
   18fd8:	sub	sp, sp, #48	; 0x30
   18fdc:	str	r0, [fp, #-40]	; 0xffffffd8
   18fe0:	str	r1, [fp, #-44]	; 0xffffffd4
   18fe4:	mov	r3, #0
   18fe8:	str	r3, [fp, #-32]	; 0xffffffe0
   18fec:	mov	r3, #0
   18ff0:	str	r3, [fp, #-28]	; 0xffffffe4
   18ff4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18ff8:	ldr	r3, [r3, #32]
   18ffc:	ldrh	r3, [r3, #14]
   19000:	cmp	r3, #7
   19004:	beq	19028 <flatcc_builder_end_union_vector@@Base+0x5c>
   19008:	ldr	r3, [pc, #328]	; 19158 <flatcc_builder_end_union_vector@@Base+0x18c>
   1900c:	add	r3, pc, r3
   19010:	movw	r2, #1617	; 0x651
   19014:	ldr	r1, [pc, #320]	; 1915c <flatcc_builder_end_union_vector@@Base+0x190>
   19018:	add	r1, pc, r1
   1901c:	ldr	r0, [pc, #316]	; 19160 <flatcc_builder_end_union_vector@@Base+0x194>
   19020:	add	r0, pc, r0
   19024:	bl	12324 <__assert_fail@plt>
   19028:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1902c:	bl	1918c <flatcc_builder_union_vector_count@@Base>
   19030:	str	r0, [fp, #-12]
   19034:	ldr	r2, [fp, #-12]
   19038:	mov	r3, r2
   1903c:	lsl	r3, r3, #2
   19040:	add	r3, r3, r2
   19044:	mov	r1, r3
   19048:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1904c:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   19050:	str	r0, [fp, #-16]
   19054:	ldr	r3, [fp, #-16]
   19058:	cmp	r3, #0
   1905c:	bne	19078 <flatcc_builder_end_union_vector@@Base+0xac>
   19060:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19064:	mov	r1, r3
   19068:	sub	r3, fp, #32
   1906c:	ldrd	r2, [r3]
   19070:	strd	r2, [r1]
   19074:	b	19144 <flatcc_builder_end_union_vector@@Base+0x178>
   19078:	ldr	r3, [fp, #-12]
   1907c:	lsl	r3, r3, #2
   19080:	ldr	r2, [fp, #-16]
   19084:	add	r3, r2, r3
   19088:	str	r3, [fp, #-20]	; 0xffffffec
   1908c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19090:	bl	19164 <flatcc_builder_union_vector_edit@@Base>
   19094:	str	r0, [fp, #-24]	; 0xffffffe8
   19098:	mov	r3, #0
   1909c:	str	r3, [fp, #-8]
   190a0:	b	190fc <flatcc_builder_end_union_vector@@Base+0x130>
   190a4:	ldr	r3, [fp, #-8]
   190a8:	lsl	r3, r3, #3
   190ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   190b0:	add	r2, r2, r3
   190b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   190b8:	ldr	r3, [fp, #-8]
   190bc:	add	r3, r1, r3
   190c0:	ldrb	r2, [r2]
   190c4:	strb	r2, [r3]
   190c8:	ldr	r3, [fp, #-8]
   190cc:	lsl	r3, r3, #3
   190d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   190d4:	add	r2, r2, r3
   190d8:	ldr	r3, [fp, #-8]
   190dc:	lsl	r3, r3, #2
   190e0:	ldr	r1, [fp, #-16]
   190e4:	add	r3, r1, r3
   190e8:	ldr	r2, [r2, #4]
   190ec:	str	r2, [r3]
   190f0:	ldr	r3, [fp, #-8]
   190f4:	add	r3, r3, #1
   190f8:	str	r3, [fp, #-8]
   190fc:	ldr	r2, [fp, #-8]
   19100:	ldr	r3, [fp, #-12]
   19104:	cmp	r2, r3
   19108:	bcc	190a4 <flatcc_builder_end_union_vector@@Base+0xd8>
   1910c:	sub	r0, fp, #32
   19110:	ldr	r3, [fp, #-12]
   19114:	str	r3, [sp]
   19118:	ldr	r3, [fp, #-16]
   1911c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19120:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19124:	bl	18e5c <flatcc_builder_create_union_vector_direct@@Base>
   19128:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1912c:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   19130:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19134:	mov	r1, r3
   19138:	sub	r3, fp, #32
   1913c:	ldrd	r2, [r3]
   19140:	strd	r2, [r1]
   19144:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19148:	sub	sp, fp, #4
   1914c:	ldr	fp, [sp]
   19150:	add	sp, sp, #4
   19154:	pop	{pc}		; (ldr pc, [sp], #4)
   19158:			; <UNDEFINED> instruction: 0x000052b0
   1915c:	andeq	r4, r0, ip, ror #20
   19160:	andeq	r4, r0, r8, ror #27

00019164 <flatcc_builder_union_vector_edit@@Base>:
   19164:	push	{fp}		; (str fp, [sp, #-4]!)
   19168:	add	fp, sp, #0
   1916c:	sub	sp, sp, #12
   19170:	str	r0, [fp, #-8]
   19174:	ldr	r3, [fp, #-8]
   19178:	ldr	r3, [r3, #16]
   1917c:	mov	r0, r3
   19180:	add	sp, fp, #0
   19184:	pop	{fp}		; (ldr fp, [sp], #4)
   19188:	bx	lr

0001918c <flatcc_builder_union_vector_count@@Base>:
   1918c:	push	{fp}		; (str fp, [sp, #-4]!)
   19190:	add	fp, sp, #0
   19194:	sub	sp, sp, #12
   19198:	str	r0, [fp, #-8]
   1919c:	ldr	r3, [fp, #-8]
   191a0:	ldr	r3, [r3, #32]
   191a4:	ldr	r3, [r3, #20]
   191a8:	mov	r0, r3
   191ac:	add	sp, fp, #0
   191b0:	pop	{fp}		; (ldr fp, [sp], #4)
   191b4:	bx	lr

000191b8 <flatcc_builder_extend_union_vector@@Base>:
   191b8:	str	fp, [sp, #-8]!
   191bc:	str	lr, [sp, #4]
   191c0:	add	fp, sp, #4
   191c4:	sub	sp, sp, #8
   191c8:	str	r0, [fp, #-8]
   191cc:	str	r1, [fp, #-12]
   191d0:	mvn	r2, #-536870912	; 0xe0000000
   191d4:	ldr	r1, [fp, #-12]
   191d8:	ldr	r0, [fp, #-8]
   191dc:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   191e0:	mov	r3, r0
   191e4:	cmp	r3, #0
   191e8:	beq	191f4 <flatcc_builder_extend_union_vector@@Base+0x3c>
   191ec:	mov	r3, #0
   191f0:	b	1920c <flatcc_builder_extend_union_vector@@Base+0x54>
   191f4:	ldr	r3, [fp, #-12]
   191f8:	lsl	r3, r3, #3
   191fc:	mov	r1, r3
   19200:	ldr	r0, [fp, #-8]
   19204:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   19208:	mov	r3, r0
   1920c:	mov	r0, r3
   19210:	sub	sp, fp, #4
   19214:	ldr	fp, [sp]
   19218:	add	sp, sp, #4
   1921c:	pop	{pc}		; (ldr pc, [sp], #4)

00019220 <flatcc_builder_truncate_union_vector@@Base>:
   19220:	str	fp, [sp, #-8]!
   19224:	str	lr, [sp, #4]
   19228:	add	fp, sp, #4
   1922c:	sub	sp, sp, #8
   19230:	str	r0, [fp, #-8]
   19234:	str	r1, [fp, #-12]
   19238:	ldr	r3, [fp, #-8]
   1923c:	ldr	r3, [r3, #32]
   19240:	ldrh	r3, [r3, #14]
   19244:	cmp	r3, #7
   19248:	beq	1926c <flatcc_builder_truncate_union_vector@@Base+0x4c>
   1924c:	ldr	r3, [pc, #200]	; 1931c <flatcc_builder_truncate_union_vector@@Base+0xfc>
   19250:	add	r3, pc, r3
   19254:	movw	r2, #1665	; 0x681
   19258:	ldr	r1, [pc, #192]	; 19320 <flatcc_builder_truncate_union_vector@@Base+0x100>
   1925c:	add	r1, pc, r1
   19260:	ldr	r0, [pc, #188]	; 19324 <flatcc_builder_truncate_union_vector@@Base+0x104>
   19264:	add	r0, pc, r0
   19268:	bl	12324 <__assert_fail@plt>
   1926c:	ldr	r3, [fp, #-8]
   19270:	ldr	r3, [r3, #32]
   19274:	ldr	r3, [r3, #20]
   19278:	ldr	r2, [fp, #-12]
   1927c:	cmp	r2, r3
   19280:	bls	192c4 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   19284:	ldr	r3, [fp, #-8]
   19288:	ldr	r3, [r3, #32]
   1928c:	ldr	r3, [r3, #20]
   19290:	ldr	r2, [fp, #-12]
   19294:	cmp	r2, r3
   19298:	bls	192bc <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1929c:	ldr	r3, [pc, #132]	; 19328 <flatcc_builder_truncate_union_vector@@Base+0x108>
   192a0:	add	r3, pc, r3
   192a4:	movw	r2, #1666	; 0x682
   192a8:	ldr	r1, [pc, #124]	; 1932c <flatcc_builder_truncate_union_vector@@Base+0x10c>
   192ac:	add	r1, pc, r1
   192b0:	ldr	r0, [pc, #120]	; 19330 <flatcc_builder_truncate_union_vector@@Base+0x110>
   192b4:	add	r0, pc, r0
   192b8:	bl	12324 <__assert_fail@plt>
   192bc:	mvn	r3, #0
   192c0:	b	19308 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   192c4:	ldr	r3, [fp, #-8]
   192c8:	ldr	r3, [r3, #32]
   192cc:	ldr	r1, [r3, #20]
   192d0:	ldr	r3, [fp, #-8]
   192d4:	ldr	r3, [r3, #32]
   192d8:	ldr	r2, [fp, #-12]
   192dc:	sub	r2, r1, r2
   192e0:	str	r2, [r3, #20]
   192e4:	ldr	r3, [fp, #-8]
   192e8:	ldr	r3, [r3, #32]
   192ec:	ldr	r3, [r3, #16]
   192f0:	ldr	r2, [fp, #-12]
   192f4:	mul	r3, r2, r3
   192f8:	mov	r1, r3
   192fc:	ldr	r0, [fp, #-8]
   19300:	bl	142bc <flatcc_builder_default_alloc@@Base+0x3b8>
   19304:	mov	r3, #0
   19308:	mov	r0, r3
   1930c:	sub	sp, fp, #4
   19310:	ldr	fp, [sp]
   19314:	add	sp, sp, #4
   19318:	pop	{pc}		; (ldr pc, [sp], #4)
   1931c:	andeq	r5, r0, ip, lsl #1
   19320:	andeq	r4, r0, r8, lsr #16
   19324:	andeq	r4, r0, r4, lsr #23
   19328:	andeq	r5, r0, ip, lsr r0
   1932c:	ldrdeq	r4, [r0], -r8
   19330:	andeq	r4, r0, r4, lsl #20

00019334 <flatcc_builder_union_vector_push@@Base>:
   19334:	str	fp, [sp, #-8]!
   19338:	str	lr, [sp, #4]
   1933c:	add	fp, sp, #4
   19340:	sub	sp, sp, #24
   19344:	str	r0, [fp, #-16]
   19348:	sub	r3, fp, #24
   1934c:	stm	r3, {r1, r2}
   19350:	ldr	r3, [fp, #-16]
   19354:	ldr	r3, [r3, #32]
   19358:	ldrh	r3, [r3, #14]
   1935c:	cmp	r3, #7
   19360:	beq	19384 <flatcc_builder_union_vector_push@@Base+0x50>
   19364:	ldr	r3, [pc, #160]	; 1940c <flatcc_builder_union_vector_push@@Base+0xd8>
   19368:	add	r3, pc, r3
   1936c:	movw	r2, #1677	; 0x68d
   19370:	ldr	r1, [pc, #152]	; 19410 <flatcc_builder_union_vector_push@@Base+0xdc>
   19374:	add	r1, pc, r1
   19378:	ldr	r0, [pc, #148]	; 19414 <flatcc_builder_union_vector_push@@Base+0xe0>
   1937c:	add	r0, pc, r0
   19380:	bl	12324 <__assert_fail@plt>
   19384:	ldr	r3, [fp, #-16]
   19388:	ldr	r3, [r3, #32]
   1938c:	ldr	r3, [r3, #20]
   19390:	cmn	r3, #-536870911	; 0xe0000001
   19394:	bne	193a0 <flatcc_builder_union_vector_push@@Base+0x6c>
   19398:	mov	r3, #0
   1939c:	b	193f8 <flatcc_builder_union_vector_push@@Base+0xc4>
   193a0:	ldr	r3, [fp, #-16]
   193a4:	ldr	r3, [r3, #32]
   193a8:	ldr	r2, [r3, #20]
   193ac:	ldr	r3, [fp, #-16]
   193b0:	ldr	r3, [r3, #32]
   193b4:	add	r2, r2, #1
   193b8:	str	r2, [r3, #20]
   193bc:	mov	r1, #8
   193c0:	ldr	r0, [fp, #-16]
   193c4:	bl	14214 <flatcc_builder_default_alloc@@Base+0x310>
   193c8:	str	r0, [fp, #-8]
   193cc:	ldr	r3, [fp, #-8]
   193d0:	cmp	r3, #0
   193d4:	bne	193e0 <flatcc_builder_union_vector_push@@Base+0xac>
   193d8:	mov	r3, #0
   193dc:	b	193f8 <flatcc_builder_union_vector_push@@Base+0xc4>
   193e0:	ldr	r3, [fp, #-8]
   193e4:	mov	r1, r3
   193e8:	sub	r3, fp, #24
   193ec:	ldrd	r2, [r3]
   193f0:	strd	r2, [r1]
   193f4:	ldr	r3, [fp, #-8]
   193f8:	mov	r0, r3
   193fc:	sub	sp, fp, #4
   19400:	ldr	fp, [sp]
   19404:	add	sp, sp, #4
   19408:	pop	{pc}		; (ldr pc, [sp], #4)
   1940c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   19410:	andeq	r4, r0, r0, lsl r7
   19414:	andeq	r4, r0, ip, lsl #21

00019418 <flatcc_builder_append_union_vector@@Base>:
   19418:	str	fp, [sp, #-8]!
   1941c:	str	lr, [sp, #4]
   19420:	add	fp, sp, #4
   19424:	sub	sp, sp, #16
   19428:	str	r0, [fp, #-8]
   1942c:	str	r1, [fp, #-12]
   19430:	str	r2, [fp, #-16]
   19434:	ldr	r3, [fp, #-8]
   19438:	ldr	r3, [r3, #32]
   1943c:	ldrh	r3, [r3, #14]
   19440:	cmp	r3, #7
   19444:	beq	19468 <flatcc_builder_append_union_vector@@Base+0x50>
   19448:	ldr	r3, [pc, #108]	; 194bc <flatcc_builder_append_union_vector@@Base+0xa4>
   1944c:	add	r3, pc, r3
   19450:	movw	r2, #1692	; 0x69c
   19454:	ldr	r1, [pc, #100]	; 194c0 <flatcc_builder_append_union_vector@@Base+0xa8>
   19458:	add	r1, pc, r1
   1945c:	ldr	r0, [pc, #96]	; 194c4 <flatcc_builder_append_union_vector@@Base+0xac>
   19460:	add	r0, pc, r0
   19464:	bl	12324 <__assert_fail@plt>
   19468:	mvn	r2, #-536870912	; 0xe0000000
   1946c:	ldr	r1, [fp, #-16]
   19470:	ldr	r0, [fp, #-8]
   19474:	bl	1654c <flatcc_builder_end_struct@@Base+0xac>
   19478:	mov	r3, r0
   1947c:	cmp	r3, #0
   19480:	beq	1948c <flatcc_builder_append_union_vector@@Base+0x74>
   19484:	mov	r3, #0
   19488:	b	194a8 <flatcc_builder_append_union_vector@@Base+0x90>
   1948c:	ldr	r3, [fp, #-16]
   19490:	lsl	r3, r3, #3
   19494:	mov	r2, r3
   19498:	ldr	r1, [fp, #-12]
   1949c:	ldr	r0, [fp, #-8]
   194a0:	bl	14324 <flatcc_builder_default_alloc@@Base+0x420>
   194a4:	mov	r3, r0
   194a8:	mov	r0, r3
   194ac:	sub	sp, fp, #4
   194b0:	ldr	fp, [sp]
   194b4:	add	sp, sp, #4
   194b8:	pop	{pc}		; (ldr pc, [sp], #4)
   194bc:	ldrdeq	r4, [r0], -ip
   194c0:	andeq	r4, r0, ip, lsr #12
   194c4:	andeq	r4, r0, r8, lsr #19

000194c8 <flatcc_builder_create_string@@Base>:
   194c8:	str	r4, [sp, #-12]!
   194cc:	str	fp, [sp, #4]
   194d0:	str	lr, [sp, #8]
   194d4:	add	fp, sp, #8
   194d8:	sub	sp, sp, #100	; 0x64
   194dc:	str	r0, [fp, #-96]	; 0xffffffa0
   194e0:	str	r1, [fp, #-100]	; 0xffffff9c
   194e4:	str	r2, [fp, #-104]	; 0xffffff98
   194e8:	ldr	r4, [pc, #388]	; 19674 <flatcc_builder_create_string@@Base+0x1ac>
   194ec:	add	r4, pc, r4
   194f0:	ldr	r0, [fp, #-104]	; 0xffffff98
   194f4:	bl	13db4 <main@@Base+0x128>
   194f8:	mov	r3, r0
   194fc:	str	r3, [fp, #-20]	; 0xffffffec
   19500:	ldr	r3, [fp, #-104]	; 0xffffff98
   19504:	add	r3, r3, #1
   19508:	mov	r2, #4
   1950c:	mov	r1, r3
   19510:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19514:	bl	15538 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   19518:	mov	r3, r0
   1951c:	add	r3, r3, #1
   19520:	str	r3, [fp, #-16]
   19524:	mov	r3, #0
   19528:	str	r3, [fp, #-92]	; 0xffffffa4
   1952c:	mov	r3, #0
   19530:	str	r3, [fp, #-88]	; 0xffffffa8
   19534:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19538:	add	r3, r3, #4
   1953c:	str	r3, [fp, #-92]	; 0xffffffa4
   19540:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19544:	add	r3, r3, #1
   19548:	lsl	r3, r3, #3
   1954c:	sub	r2, fp, #12
   19550:	add	r3, r2, r3
   19554:	sub	r2, fp, #20
   19558:	str	r2, [r3, #-80]	; 0xffffffb0
   1955c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19560:	add	r3, r3, #1
   19564:	lsl	r3, r3, #3
   19568:	sub	r2, fp, #12
   1956c:	add	r3, r2, r3
   19570:	mov	r2, #4
   19574:	str	r2, [r3, #-76]	; 0xffffffb4
   19578:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1957c:	add	r3, r3, #1
   19580:	str	r3, [fp, #-88]	; 0xffffffa8
   19584:	ldr	r3, [fp, #-104]	; 0xffffff98
   19588:	cmp	r3, #0
   1958c:	beq	195e4 <flatcc_builder_create_string@@Base+0x11c>
   19590:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19594:	ldr	r3, [fp, #-104]	; 0xffffff98
   19598:	add	r3, r2, r3
   1959c:	str	r3, [fp, #-92]	; 0xffffffa4
   195a0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   195a4:	add	r3, r3, #1
   195a8:	lsl	r3, r3, #3
   195ac:	sub	r2, fp, #12
   195b0:	add	r3, r2, r3
   195b4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   195b8:	str	r2, [r3, #-80]	; 0xffffffb0
   195bc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   195c0:	add	r3, r3, #1
   195c4:	lsl	r3, r3, #3
   195c8:	sub	r2, fp, #12
   195cc:	add	r3, r2, r3
   195d0:	ldr	r2, [fp, #-104]	; 0xffffff98
   195d4:	str	r2, [r3, #-76]	; 0xffffffb4
   195d8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   195dc:	add	r3, r3, #1
   195e0:	str	r3, [fp, #-88]	; 0xffffffa8
   195e4:	ldr	r3, [fp, #-16]
   195e8:	cmp	r3, #0
   195ec:	beq	19648 <flatcc_builder_create_string@@Base+0x180>
   195f0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   195f4:	ldr	r3, [fp, #-16]
   195f8:	add	r3, r2, r3
   195fc:	str	r3, [fp, #-92]	; 0xffffffa4
   19600:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19604:	add	r3, r3, #1
   19608:	lsl	r3, r3, #3
   1960c:	sub	r2, fp, #12
   19610:	add	r3, r2, r3
   19614:	ldr	r2, [pc, #92]	; 19678 <flatcc_builder_create_string@@Base+0x1b0>
   19618:	ldr	r2, [r4, r2]
   1961c:	str	r2, [r3, #-80]	; 0xffffffb0
   19620:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19624:	add	r3, r3, #1
   19628:	lsl	r3, r3, #3
   1962c:	sub	r2, fp, #12
   19630:	add	r3, r2, r3
   19634:	ldr	r2, [fp, #-16]
   19638:	str	r2, [r3, #-76]	; 0xffffffb4
   1963c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19640:	add	r3, r3, #1
   19644:	str	r3, [fp, #-88]	; 0xffffffa8
   19648:	sub	r3, fp, #92	; 0x5c
   1964c:	mov	r1, r3
   19650:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19654:	bl	155c0 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   19658:	mov	r3, r0
   1965c:	mov	r0, r3
   19660:	sub	sp, fp, #8
   19664:	ldr	r4, [sp]
   19668:	ldr	fp, [sp, #4]
   1966c:	add	sp, sp, #8
   19670:	pop	{pc}		; (ldr pc, [sp], #4)
   19674:	andeq	r5, r1, ip, lsl #22
   19678:	andeq	r0, r0, r4, asr #32

0001967c <flatcc_builder_create_string_str@@Base>:
   1967c:	str	fp, [sp, #-8]!
   19680:	str	lr, [sp, #4]
   19684:	add	fp, sp, #4
   19688:	sub	sp, sp, #8
   1968c:	str	r0, [fp, #-8]
   19690:	str	r1, [fp, #-12]
   19694:	ldr	r0, [fp, #-12]
   19698:	bl	122dc <strlen@plt>
   1969c:	mov	r3, r0
   196a0:	mov	r2, r3
   196a4:	ldr	r1, [fp, #-12]
   196a8:	ldr	r0, [fp, #-8]
   196ac:	bl	194c8 <flatcc_builder_create_string@@Base>
   196b0:	mov	r3, r0
   196b4:	mov	r0, r3
   196b8:	sub	sp, fp, #4
   196bc:	ldr	fp, [sp]
   196c0:	add	sp, sp, #4
   196c4:	pop	{pc}		; (ldr pc, [sp], #4)

000196c8 <flatcc_builder_create_string_strn@@Base>:
   196c8:	str	fp, [sp, #-8]!
   196cc:	str	lr, [sp, #4]
   196d0:	add	fp, sp, #4
   196d4:	sub	sp, sp, #16
   196d8:	str	r0, [fp, #-8]
   196dc:	str	r1, [fp, #-12]
   196e0:	str	r2, [fp, #-16]
   196e4:	ldr	r1, [fp, #-16]
   196e8:	ldr	r0, [fp, #-12]
   196ec:	bl	13ea4 <main@@Base+0x218>
   196f0:	mov	r3, r0
   196f4:	mov	r2, r3
   196f8:	ldr	r1, [fp, #-12]
   196fc:	ldr	r0, [fp, #-8]
   19700:	bl	194c8 <flatcc_builder_create_string@@Base>
   19704:	mov	r3, r0
   19708:	mov	r0, r3
   1970c:	sub	sp, fp, #4
   19710:	ldr	fp, [sp]
   19714:	add	sp, sp, #4
   19718:	pop	{pc}		; (ldr pc, [sp], #4)

0001971c <flatcc_builder_end_string@@Base>:
   1971c:	str	fp, [sp, #-8]!
   19720:	str	lr, [sp, #4]
   19724:	add	fp, sp, #4
   19728:	sub	sp, sp, #16
   1972c:	str	r0, [fp, #-16]
   19730:	ldr	r3, [fp, #-16]
   19734:	ldr	r3, [r3, #32]
   19738:	ldrh	r3, [r3, #14]
   1973c:	cmp	r3, #6
   19740:	beq	19764 <flatcc_builder_end_string@@Base+0x48>
   19744:	ldr	r3, [pc, #168]	; 197f4 <flatcc_builder_end_string@@Base+0xd8>
   19748:	add	r3, pc, r3
   1974c:	movw	r2, #1732	; 0x6c4
   19750:	ldr	r1, [pc, #160]	; 197f8 <flatcc_builder_end_string@@Base+0xdc>
   19754:	add	r1, pc, r1
   19758:	ldr	r0, [pc, #156]	; 197fc <flatcc_builder_end_string@@Base+0xe0>
   1975c:	add	r0, pc, r0
   19760:	bl	12324 <__assert_fail@plt>
   19764:	ldr	r3, [fp, #-16]
   19768:	ldr	r3, [r3, #32]
   1976c:	ldr	r2, [r3, #20]
   19770:	ldr	r3, [fp, #-16]
   19774:	ldr	r3, [r3, #20]
   19778:	cmp	r2, r3
   1977c:	beq	197a0 <flatcc_builder_end_string@@Base+0x84>
   19780:	ldr	r3, [pc, #120]	; 19800 <flatcc_builder_end_string@@Base+0xe4>
   19784:	add	r3, pc, r3
   19788:	movw	r2, #1733	; 0x6c5
   1978c:	ldr	r1, [pc, #112]	; 19804 <flatcc_builder_end_string@@Base+0xe8>
   19790:	add	r1, pc, r1
   19794:	ldr	r0, [pc, #108]	; 19808 <flatcc_builder_end_string@@Base+0xec>
   19798:	add	r0, pc, r0
   1979c:	bl	12324 <__assert_fail@plt>
   197a0:	ldr	r3, [fp, #-16]
   197a4:	ldr	r1, [r3, #16]
   197a8:	ldr	r3, [fp, #-16]
   197ac:	ldr	r3, [r3, #20]
   197b0:	mov	r2, r3
   197b4:	ldr	r0, [fp, #-16]
   197b8:	bl	194c8 <flatcc_builder_create_string@@Base>
   197bc:	str	r0, [fp, #-8]
   197c0:	ldr	r3, [fp, #-8]
   197c4:	cmp	r3, #0
   197c8:	bne	197d4 <flatcc_builder_end_string@@Base+0xb8>
   197cc:	mov	r3, #0
   197d0:	b	197e0 <flatcc_builder_end_string@@Base+0xc4>
   197d4:	ldr	r0, [fp, #-16]
   197d8:	bl	15464 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   197dc:	ldr	r3, [fp, #-8]
   197e0:	mov	r0, r3
   197e4:	sub	sp, fp, #4
   197e8:	ldr	fp, [sp]
   197ec:	add	sp, sp, #4
   197f0:	pop	{pc}		; (ldr pc, [sp], #4)
   197f4:	andeq	r4, r0, r4, lsl #24
   197f8:	andeq	r4, r0, r0, lsr r3
   197fc:	andeq	r4, r0, ip, lsl #10
   19800:	andeq	r4, r0, r8, asr #23
   19804:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   19808:	andeq	r4, r0, r4, lsr #13

0001980c <flatcc_builder_string_edit@@Base>:
   1980c:	push	{fp}		; (str fp, [sp, #-4]!)
   19810:	add	fp, sp, #0
   19814:	sub	sp, sp, #12
   19818:	str	r0, [fp, #-8]
   1981c:	ldr	r3, [fp, #-8]
   19820:	ldr	r3, [r3, #16]
   19824:	mov	r0, r3
   19828:	add	sp, fp, #0
   1982c:	pop	{fp}		; (ldr fp, [sp], #4)
   19830:	bx	lr

00019834 <flatcc_builder_string_len@@Base>:
   19834:	push	{fp}		; (str fp, [sp, #-4]!)
   19838:	add	fp, sp, #0
   1983c:	sub	sp, sp, #12
   19840:	str	r0, [fp, #-8]
   19844:	ldr	r3, [fp, #-8]
   19848:	ldr	r3, [r3, #32]
   1984c:	ldr	r3, [r3, #20]
   19850:	mov	r0, r3
   19854:	add	sp, fp, #0
   19858:	pop	{fp}		; (ldr fp, [sp], #4)
   1985c:	bx	lr

00019860 <flatcc_builder_table_add@@Base>:
   19860:	str	fp, [sp, #-8]!
   19864:	str	lr, [sp, #4]
   19868:	add	fp, sp, #4
   1986c:	sub	sp, sp, #16
   19870:	str	r0, [fp, #-8]
   19874:	str	r1, [fp, #-12]
   19878:	str	r2, [fp, #-16]
   1987c:	strh	r3, [fp, #-18]	; 0xffffffee
   19880:	ldr	r3, [fp, #-8]
   19884:	ldr	r3, [r3, #32]
   19888:	ldrh	r3, [r3, #14]
   1988c:	cmp	r3, #3
   19890:	beq	198b4 <flatcc_builder_table_add@@Base+0x54>
   19894:	ldr	r3, [pc, #284]	; 199b8 <flatcc_builder_table_add@@Base+0x158>
   19898:	add	r3, pc, r3
   1989c:	movw	r2, #1773	; 0x6ed
   198a0:	ldr	r1, [pc, #276]	; 199bc <flatcc_builder_table_add@@Base+0x15c>
   198a4:	add	r1, pc, r1
   198a8:	ldr	r0, [pc, #272]	; 199c0 <flatcc_builder_table_add@@Base+0x160>
   198ac:	add	r0, pc, r0
   198b0:	bl	12324 <__assert_fail@plt>
   198b4:	ldr	r3, [fp, #-12]
   198b8:	cmp	r3, #0
   198bc:	blt	198d0 <flatcc_builder_table_add@@Base+0x70>
   198c0:	ldr	r3, [fp, #-12]
   198c4:	movw	r2, #32764	; 0x7ffc
   198c8:	cmp	r3, r2
   198cc:	ble	198f0 <flatcc_builder_table_add@@Base+0x90>
   198d0:	ldr	r3, [pc, #236]	; 199c4 <flatcc_builder_table_add@@Base+0x164>
   198d4:	add	r3, pc, r3
   198d8:	movw	r2, #1774	; 0x6ee
   198dc:	ldr	r1, [pc, #228]	; 199c8 <flatcc_builder_table_add@@Base+0x168>
   198e0:	add	r1, pc, r1
   198e4:	ldr	r0, [pc, #224]	; 199cc <flatcc_builder_table_add@@Base+0x16c>
   198e8:	add	r0, pc, r0
   198ec:	bl	12324 <__assert_fail@plt>
   198f0:	ldr	r3, [fp, #-8]
   198f4:	ldrh	r3, [r3, #130]	; 0x82
   198f8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   198fc:	cmp	r2, r3
   19900:	bls	19910 <flatcc_builder_table_add@@Base+0xb0>
   19904:	ldr	r3, [fp, #-8]
   19908:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1990c:	strh	r2, [r3, #130]	; 0x82
   19910:	ldr	r3, [fp, #-8]
   19914:	ldr	r2, [r3, #4]
   19918:	ldr	r3, [fp, #-12]
   1991c:	lsl	r3, r3, #1
   19920:	add	r3, r2, r3
   19924:	ldrh	r3, [r3]
   19928:	cmp	r3, #0
   1992c:	beq	19950 <flatcc_builder_table_add@@Base+0xf0>
   19930:	ldr	r3, [pc, #152]	; 199d0 <flatcc_builder_table_add@@Base+0x170>
   19934:	add	r3, pc, r3
   19938:	movw	r2, #1784	; 0x6f8
   1993c:	ldr	r1, [pc, #144]	; 199d4 <flatcc_builder_table_add@@Base+0x174>
   19940:	add	r1, pc, r1
   19944:	ldr	r0, [pc, #140]	; 199d8 <flatcc_builder_table_add@@Base+0x178>
   19948:	add	r0, pc, r0
   1994c:	bl	12324 <__assert_fail@plt>
   19950:	ldr	r3, [fp, #-8]
   19954:	ldr	r2, [r3, #12]
   19958:	ldr	r3, [fp, #-12]
   1995c:	eor	r2, r2, r3
   19960:	movw	r3, #31153	; 0x79b1
   19964:	movt	r3, #40503	; 0x9e37
   19968:	mul	r2, r3, r2
   1996c:	ldr	r3, [fp, #-16]
   19970:	eor	r2, r2, r3
   19974:	movw	r3, #31153	; 0x79b1
   19978:	movt	r3, #40503	; 0x9e37
   1997c:	mul	r2, r3, r2
   19980:	ldr	r3, [fp, #-8]
   19984:	str	r2, [r3, #12]
   19988:	ldr	r3, [fp, #-12]
   1998c:	uxth	r3, r3
   19990:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19994:	ldr	r1, [fp, #-16]
   19998:	ldr	r0, [fp, #-8]
   1999c:	bl	1438c <flatcc_builder_default_alloc@@Base+0x488>
   199a0:	mov	r3, r0
   199a4:	mov	r0, r3
   199a8:	sub	sp, fp, #4
   199ac:	ldr	fp, [sp]
   199b0:	add	sp, sp, #4
   199b4:	pop	{pc}		; (ldr pc, [sp], #4)
   199b8:	ldrdeq	r4, [r0], -r0
   199bc:	andeq	r4, r0, r0, ror #3
   199c0:	muleq	r0, r8, r4
   199c4:	muleq	r0, r4, sl
   199c8:	andeq	r4, r0, r4, lsr #3
   199cc:	andeq	r4, r0, r8, ror r5
   199d0:	andeq	r4, r0, r4, lsr sl
   199d4:	andeq	r4, r0, r4, asr #2
   199d8:	muleq	r0, ip, r1

000199dc <flatcc_builder_table_edit@@Base>:
   199dc:	str	fp, [sp, #-8]!
   199e0:	str	lr, [sp, #4]
   199e4:	add	fp, sp, #4
   199e8:	sub	sp, sp, #8
   199ec:	str	r0, [fp, #-8]
   199f0:	str	r1, [fp, #-12]
   199f4:	ldr	r3, [fp, #-8]
   199f8:	ldr	r3, [r3, #32]
   199fc:	ldrh	r3, [r3, #14]
   19a00:	cmp	r3, #3
   19a04:	beq	19a28 <flatcc_builder_table_edit@@Base+0x4c>
   19a08:	ldr	r3, [pc, #72]	; 19a58 <flatcc_builder_table_edit@@Base+0x7c>
   19a0c:	add	r3, pc, r3
   19a10:	movw	r2, #1794	; 0x702
   19a14:	ldr	r1, [pc, #64]	; 19a5c <flatcc_builder_table_edit@@Base+0x80>
   19a18:	add	r1, pc, r1
   19a1c:	ldr	r0, [pc, #60]	; 19a60 <flatcc_builder_table_edit@@Base+0x84>
   19a20:	add	r0, pc, r0
   19a24:	bl	12324 <__assert_fail@plt>
   19a28:	ldr	r3, [fp, #-8]
   19a2c:	ldr	r2, [r3, #16]
   19a30:	ldr	r3, [fp, #-8]
   19a34:	ldr	r1, [r3, #20]
   19a38:	ldr	r3, [fp, #-12]
   19a3c:	sub	r3, r1, r3
   19a40:	add	r3, r2, r3
   19a44:	mov	r0, r3
   19a48:	sub	sp, fp, #4
   19a4c:	ldr	fp, [sp]
   19a50:	add	sp, sp, #4
   19a54:	pop	{pc}		; (ldr pc, [sp], #4)
   19a58:	andeq	r4, r0, r8, ror r9
   19a5c:	andeq	r4, r0, ip, rrx
   19a60:	andeq	r4, r0, r4, lsr #6

00019a64 <flatcc_builder_table_add_copy@@Base>:
   19a64:	str	fp, [sp, #-8]!
   19a68:	str	lr, [sp, #4]
   19a6c:	add	fp, sp, #4
   19a70:	sub	sp, sp, #24
   19a74:	str	r0, [fp, #-16]
   19a78:	str	r1, [fp, #-20]	; 0xffffffec
   19a7c:	str	r2, [fp, #-24]	; 0xffffffe8
   19a80:	str	r3, [fp, #-28]	; 0xffffffe4
   19a84:	ldrh	r3, [fp, #4]
   19a88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19a8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19a90:	ldr	r0, [fp, #-16]
   19a94:	bl	19860 <flatcc_builder_table_add@@Base>
   19a98:	str	r0, [fp, #-8]
   19a9c:	ldr	r3, [fp, #-8]
   19aa0:	cmp	r3, #0
   19aa4:	beq	19ab8 <flatcc_builder_table_add_copy@@Base+0x54>
   19aa8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19aac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19ab0:	ldr	r0, [fp, #-8]
   19ab4:	bl	12294 <memcpy@plt>
   19ab8:	ldr	r3, [fp, #-8]
   19abc:	mov	r0, r3
   19ac0:	sub	sp, fp, #4
   19ac4:	ldr	fp, [sp]
   19ac8:	add	sp, sp, #4
   19acc:	pop	{pc}		; (ldr pc, [sp], #4)

00019ad0 <flatcc_builder_table_add_offset@@Base>:
   19ad0:	str	fp, [sp, #-8]!
   19ad4:	str	lr, [sp, #4]
   19ad8:	add	fp, sp, #4
   19adc:	sub	sp, sp, #8
   19ae0:	str	r0, [fp, #-8]
   19ae4:	str	r1, [fp, #-12]
   19ae8:	ldr	r3, [fp, #-8]
   19aec:	ldr	r3, [r3, #32]
   19af0:	ldrh	r3, [r3, #14]
   19af4:	cmp	r3, #3
   19af8:	beq	19b1c <flatcc_builder_table_add_offset@@Base+0x4c>
   19afc:	ldr	r3, [pc, #244]	; 19bf8 <flatcc_builder_table_add_offset@@Base+0x128>
   19b00:	add	r3, pc, r3
   19b04:	movw	r2, #1811	; 0x713
   19b08:	ldr	r1, [pc, #236]	; 19bfc <flatcc_builder_table_add_offset@@Base+0x12c>
   19b0c:	add	r1, pc, r1
   19b10:	ldr	r0, [pc, #232]	; 19c00 <flatcc_builder_table_add_offset@@Base+0x130>
   19b14:	add	r0, pc, r0
   19b18:	bl	12324 <__assert_fail@plt>
   19b1c:	ldr	r3, [fp, #-12]
   19b20:	cmp	r3, #0
   19b24:	blt	19b38 <flatcc_builder_table_add_offset@@Base+0x68>
   19b28:	ldr	r3, [fp, #-12]
   19b2c:	movw	r2, #32764	; 0x7ffc
   19b30:	cmp	r3, r2
   19b34:	ble	19b58 <flatcc_builder_table_add_offset@@Base+0x88>
   19b38:	ldr	r3, [pc, #196]	; 19c04 <flatcc_builder_table_add_offset@@Base+0x134>
   19b3c:	add	r3, pc, r3
   19b40:	movw	r2, #1812	; 0x714
   19b44:	ldr	r1, [pc, #188]	; 19c08 <flatcc_builder_table_add_offset@@Base+0x138>
   19b48:	add	r1, pc, r1
   19b4c:	ldr	r0, [pc, #184]	; 19c0c <flatcc_builder_table_add_offset@@Base+0x13c>
   19b50:	add	r0, pc, r0
   19b54:	bl	12324 <__assert_fail@plt>
   19b58:	ldr	r3, [fp, #-8]
   19b5c:	ldr	r2, [r3, #4]
   19b60:	ldr	r3, [fp, #-12]
   19b64:	lsl	r3, r3, #1
   19b68:	add	r3, r2, r3
   19b6c:	ldrh	r3, [r3]
   19b70:	cmp	r3, #0
   19b74:	beq	19b98 <flatcc_builder_table_add_offset@@Base+0xc8>
   19b78:	ldr	r3, [pc, #144]	; 19c10 <flatcc_builder_table_add_offset@@Base+0x140>
   19b7c:	add	r3, pc, r3
   19b80:	movw	r2, #1819	; 0x71b
   19b84:	ldr	r1, [pc, #136]	; 19c14 <flatcc_builder_table_add_offset@@Base+0x144>
   19b88:	add	r1, pc, r1
   19b8c:	ldr	r0, [pc, #132]	; 19c18 <flatcc_builder_table_add_offset@@Base+0x148>
   19b90:	add	r0, pc, r0
   19b94:	bl	12324 <__assert_fail@plt>
   19b98:	ldr	r3, [fp, #-8]
   19b9c:	ldr	r2, [r3, #12]
   19ba0:	ldr	r3, [fp, #-12]
   19ba4:	eor	r2, r2, r3
   19ba8:	movw	r3, #31153	; 0x79b1
   19bac:	movt	r3, #40503	; 0x9e37
   19bb0:	mul	r3, r3, r2
   19bb4:	eor	r2, r3, #4
   19bb8:	movw	r3, #31153	; 0x79b1
   19bbc:	movt	r3, #40503	; 0x9e37
   19bc0:	mul	r2, r3, r2
   19bc4:	ldr	r3, [fp, #-8]
   19bc8:	str	r2, [r3, #12]
   19bcc:	ldr	r3, [fp, #-12]
   19bd0:	uxth	r3, r3
   19bd4:	mov	r1, r3
   19bd8:	ldr	r0, [fp, #-8]
   19bdc:	bl	144b0 <flatcc_builder_default_alloc@@Base+0x5ac>
   19be0:	mov	r3, r0
   19be4:	mov	r0, r3
   19be8:	sub	sp, fp, #4
   19bec:	ldr	fp, [sp]
   19bf0:	add	sp, sp, #4
   19bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   19bf8:	andeq	r4, r0, r0, lsr #17
   19bfc:	andeq	r3, r0, r8, ror pc
   19c00:	andeq	r4, r0, r0, lsr r2
   19c04:	andeq	r4, r0, r4, ror #16
   19c08:	andeq	r3, r0, ip, lsr pc
   19c0c:	andeq	r4, r0, r0, lsl r3
   19c10:	andeq	r4, r0, r4, lsr #16
   19c14:	strdeq	r3, [r0], -ip
   19c18:	andeq	r3, r0, r4, asr pc

00019c1c <flatcc_builder_push_buffer_alignment@@Base>:
   19c1c:	push	{fp}		; (str fp, [sp, #-4]!)
   19c20:	add	fp, sp, #0
   19c24:	sub	sp, sp, #20
   19c28:	str	r0, [fp, #-16]
   19c2c:	ldr	r3, [fp, #-16]
   19c30:	ldrh	r3, [r3, #128]	; 0x80
   19c34:	strh	r3, [fp, #-6]
   19c38:	ldr	r3, [fp, #-16]
   19c3c:	mov	r2, #4
   19c40:	strh	r2, [r3, #128]	; 0x80
   19c44:	ldrh	r3, [fp, #-6]
   19c48:	mov	r0, r3
   19c4c:	add	sp, fp, #0
   19c50:	pop	{fp}		; (ldr fp, [sp], #4)
   19c54:	bx	lr

00019c58 <flatcc_builder_pop_buffer_alignment@@Base>:
   19c58:	str	fp, [sp, #-8]!
   19c5c:	str	lr, [sp, #4]
   19c60:	add	fp, sp, #4
   19c64:	sub	sp, sp, #8
   19c68:	str	r0, [fp, #-8]
   19c6c:	mov	r3, r1
   19c70:	strh	r3, [fp, #-10]
   19c74:	ldrh	r3, [fp, #-10]
   19c78:	mov	r1, r3
   19c7c:	ldr	r0, [fp, #-8]
   19c80:	bl	14ebc <flatcc_builder_clear@@Base+0xc4>
   19c84:	nop	{0}
   19c88:	sub	sp, fp, #4
   19c8c:	ldr	fp, [sp]
   19c90:	add	sp, sp, #4
   19c94:	pop	{pc}		; (ldr pc, [sp], #4)

00019c98 <flatcc_builder_get_buffer_alignment@@Base>:
   19c98:	push	{fp}		; (str fp, [sp, #-4]!)
   19c9c:	add	fp, sp, #0
   19ca0:	sub	sp, sp, #12
   19ca4:	str	r0, [fp, #-8]
   19ca8:	ldr	r3, [fp, #-8]
   19cac:	ldrh	r3, [r3, #128]	; 0x80
   19cb0:	mov	r0, r3
   19cb4:	add	sp, fp, #0
   19cb8:	pop	{fp}		; (ldr fp, [sp], #4)
   19cbc:	bx	lr

00019cc0 <flatcc_builder_set_vtable_clustering@@Base>:
   19cc0:	push	{fp}		; (str fp, [sp, #-4]!)
   19cc4:	add	fp, sp, #0
   19cc8:	sub	sp, sp, #12
   19ccc:	str	r0, [fp, #-8]
   19cd0:	str	r1, [fp, #-12]
   19cd4:	ldr	r3, [fp, #-12]
   19cd8:	cmp	r3, #0
   19cdc:	moveq	r3, #1
   19ce0:	movne	r3, #0
   19ce4:	uxtb	r3, r3
   19ce8:	mov	r2, r3
   19cec:	ldr	r3, [fp, #-8]
   19cf0:	str	r2, [r3, #180]	; 0xb4
   19cf4:	nop	{0}
   19cf8:	add	sp, fp, #0
   19cfc:	pop	{fp}		; (ldr fp, [sp], #4)
   19d00:	bx	lr

00019d04 <flatcc_builder_set_block_align@@Base>:
   19d04:	push	{fp}		; (str fp, [sp, #-4]!)
   19d08:	add	fp, sp, #0
   19d0c:	sub	sp, sp, #12
   19d10:	str	r0, [fp, #-8]
   19d14:	mov	r3, r1
   19d18:	strh	r3, [fp, #-10]
   19d1c:	ldr	r3, [fp, #-8]
   19d20:	ldrh	r2, [fp, #-10]
   19d24:	strh	r2, [r3, #132]	; 0x84
   19d28:	nop	{0}
   19d2c:	add	sp, fp, #0
   19d30:	pop	{fp}		; (ldr fp, [sp], #4)
   19d34:	bx	lr

00019d38 <flatcc_builder_get_level@@Base>:
   19d38:	push	{fp}		; (str fp, [sp, #-4]!)
   19d3c:	add	fp, sp, #0
   19d40:	sub	sp, sp, #12
   19d44:	str	r0, [fp, #-8]
   19d48:	ldr	r3, [fp, #-8]
   19d4c:	ldr	r3, [r3, #156]	; 0x9c
   19d50:	mov	r0, r3
   19d54:	add	sp, fp, #0
   19d58:	pop	{fp}		; (ldr fp, [sp], #4)
   19d5c:	bx	lr

00019d60 <flatcc_builder_set_max_level@@Base>:
   19d60:	push	{fp}		; (str fp, [sp, #-4]!)
   19d64:	add	fp, sp, #0
   19d68:	sub	sp, sp, #12
   19d6c:	str	r0, [fp, #-8]
   19d70:	str	r1, [fp, #-12]
   19d74:	ldr	r3, [fp, #-8]
   19d78:	ldr	r2, [fp, #-12]
   19d7c:	str	r2, [r3, #176]	; 0xb0
   19d80:	ldr	r3, [fp, #-8]
   19d84:	ldr	r2, [r3, #160]	; 0xa0
   19d88:	ldr	r3, [fp, #-8]
   19d8c:	ldr	r3, [r3, #176]	; 0xb0
   19d90:	cmp	r2, r3
   19d94:	bge	19da8 <flatcc_builder_set_max_level@@Base+0x48>
   19d98:	ldr	r3, [fp, #-8]
   19d9c:	ldr	r2, [r3, #176]	; 0xb0
   19da0:	ldr	r3, [fp, #-8]
   19da4:	str	r2, [r3, #160]	; 0xa0
   19da8:	nop	{0}
   19dac:	add	sp, fp, #0
   19db0:	pop	{fp}		; (ldr fp, [sp], #4)
   19db4:	bx	lr

00019db8 <flatcc_builder_get_buffer_size@@Base>:
   19db8:	push	{fp}		; (str fp, [sp, #-4]!)
   19dbc:	add	fp, sp, #0
   19dc0:	sub	sp, sp, #12
   19dc4:	str	r0, [fp, #-8]
   19dc8:	ldr	r3, [fp, #-8]
   19dcc:	ldr	r2, [r3, #140]	; 0x8c
   19dd0:	ldr	r3, [fp, #-8]
   19dd4:	ldr	r3, [r3, #136]	; 0x88
   19dd8:	sub	r3, r2, r3
   19ddc:	mov	r0, r3
   19de0:	add	sp, fp, #0
   19de4:	pop	{fp}		; (ldr fp, [sp], #4)
   19de8:	bx	lr

00019dec <flatcc_builder_get_buffer_start@@Base>:
   19dec:	push	{fp}		; (str fp, [sp, #-4]!)
   19df0:	add	fp, sp, #0
   19df4:	sub	sp, sp, #12
   19df8:	str	r0, [fp, #-8]
   19dfc:	ldr	r3, [fp, #-8]
   19e00:	ldr	r3, [r3, #136]	; 0x88
   19e04:	mov	r0, r3
   19e08:	add	sp, fp, #0
   19e0c:	pop	{fp}		; (ldr fp, [sp], #4)
   19e10:	bx	lr

00019e14 <flatcc_builder_get_buffer_end@@Base>:
   19e14:	push	{fp}		; (str fp, [sp, #-4]!)
   19e18:	add	fp, sp, #0
   19e1c:	sub	sp, sp, #12
   19e20:	str	r0, [fp, #-8]
   19e24:	ldr	r3, [fp, #-8]
   19e28:	ldr	r3, [r3, #140]	; 0x8c
   19e2c:	mov	r0, r3
   19e30:	add	sp, fp, #0
   19e34:	pop	{fp}		; (ldr fp, [sp], #4)
   19e38:	bx	lr

00019e3c <flatcc_builder_set_vtable_cache_limit@@Base>:
   19e3c:	push	{fp}		; (str fp, [sp, #-4]!)
   19e40:	add	fp, sp, #0
   19e44:	sub	sp, sp, #12
   19e48:	str	r0, [fp, #-8]
   19e4c:	str	r1, [fp, #-12]
   19e50:	ldr	r3, [fp, #-8]
   19e54:	ldr	r2, [fp, #-12]
   19e58:	str	r2, [r3, #172]	; 0xac
   19e5c:	nop	{0}
   19e60:	add	sp, fp, #0
   19e64:	pop	{fp}		; (ldr fp, [sp], #4)
   19e68:	bx	lr

00019e6c <flatcc_builder_set_identifier@@Base>:
   19e6c:	push	{fp}		; (str fp, [sp, #-4]!)
   19e70:	add	fp, sp, #0
   19e74:	sub	sp, sp, #12
   19e78:	str	r0, [fp, #-8]
   19e7c:	str	r1, [fp, #-12]
   19e80:	ldr	r1, [pc, #60]	; 19ec4 <flatcc_builder_set_identifier@@Base+0x58>
   19e84:	add	r1, pc, r1
   19e88:	ldr	r3, [fp, #-8]
   19e8c:	add	r2, r3, #168	; 0xa8
   19e90:	ldr	r3, [fp, #-12]
   19e94:	cmp	r3, #0
   19e98:	beq	19ea4 <flatcc_builder_set_identifier@@Base+0x38>
   19e9c:	ldr	r3, [fp, #-12]
   19ea0:	b	19eac <flatcc_builder_set_identifier@@Base+0x40>
   19ea4:	ldr	r3, [pc, #28]	; 19ec8 <flatcc_builder_set_identifier@@Base+0x5c>
   19ea8:	ldr	r3, [r1, r3]
   19eac:	ldr	r3, [r3]
   19eb0:	str	r3, [r2]
   19eb4:	nop	{0}
   19eb8:	add	sp, fp, #0
   19ebc:	pop	{fp}		; (ldr fp, [sp], #4)
   19ec0:	bx	lr
   19ec4:	andeq	r5, r1, r4, ror r1
   19ec8:	andeq	r0, r0, r4, asr #32

00019ecc <flatcc_builder_get_type@@Base>:
   19ecc:	push	{fp}		; (str fp, [sp, #-4]!)
   19ed0:	add	fp, sp, #0
   19ed4:	sub	sp, sp, #12
   19ed8:	str	r0, [fp, #-8]
   19edc:	ldr	r3, [fp, #-8]
   19ee0:	ldr	r3, [r3, #32]
   19ee4:	cmp	r3, #0
   19ee8:	beq	19efc <flatcc_builder_get_type@@Base+0x30>
   19eec:	ldr	r3, [fp, #-8]
   19ef0:	ldr	r3, [r3, #32]
   19ef4:	ldrh	r3, [r3, #14]
   19ef8:	b	19f00 <flatcc_builder_get_type@@Base+0x34>
   19efc:	mov	r3, #0
   19f00:	mov	r0, r3
   19f04:	add	sp, fp, #0
   19f08:	pop	{fp}		; (ldr fp, [sp], #4)
   19f0c:	bx	lr

00019f10 <flatcc_builder_get_type_at@@Base>:
   19f10:	push	{fp}		; (str fp, [sp, #-4]!)
   19f14:	add	fp, sp, #0
   19f18:	sub	sp, sp, #12
   19f1c:	str	r0, [fp, #-8]
   19f20:	str	r1, [fp, #-12]
   19f24:	ldr	r3, [fp, #-12]
   19f28:	cmp	r3, #0
   19f2c:	ble	19f44 <flatcc_builder_get_type_at@@Base+0x34>
   19f30:	ldr	r3, [fp, #-8]
   19f34:	ldr	r3, [r3, #156]	; 0x9c
   19f38:	ldr	r2, [fp, #-12]
   19f3c:	cmp	r2, r3
   19f40:	ble	19f4c <flatcc_builder_get_type_at@@Base+0x3c>
   19f44:	mov	r3, #0
   19f48:	b	19f80 <flatcc_builder_get_type_at@@Base+0x70>
   19f4c:	ldr	r3, [fp, #-8]
   19f50:	ldr	r2, [r3, #32]
   19f54:	ldr	r3, [fp, #-8]
   19f58:	ldr	r3, [r3, #156]	; 0x9c
   19f5c:	ldr	r1, [fp, #-12]
   19f60:	sub	r3, r1, r3
   19f64:	mov	r1, r3
   19f68:	mov	r3, r1
   19f6c:	lsl	r3, r3, #3
   19f70:	add	r3, r3, r1
   19f74:	lsl	r3, r3, #2
   19f78:	add	r3, r2, r3
   19f7c:	ldrh	r3, [r3, #14]
   19f80:	mov	r0, r3
   19f84:	add	sp, fp, #0
   19f88:	pop	{fp}		; (ldr fp, [sp], #4)
   19f8c:	bx	lr

00019f90 <flatcc_builder_get_direct_buffer@@Base>:
   19f90:	str	fp, [sp, #-8]!
   19f94:	str	lr, [sp, #4]
   19f98:	add	fp, sp, #4
   19f9c:	sub	sp, sp, #8
   19fa0:	str	r0, [fp, #-8]
   19fa4:	str	r1, [fp, #-12]
   19fa8:	ldr	r3, [fp, #-8]
   19fac:	ldr	r3, [r3, #184]	; 0xb8
   19fb0:	cmp	r3, #0
   19fb4:	beq	19fd4 <flatcc_builder_get_direct_buffer@@Base+0x44>
   19fb8:	ldr	r3, [fp, #-8]
   19fbc:	add	r3, r3, #188	; 0xbc
   19fc0:	ldr	r1, [fp, #-12]
   19fc4:	mov	r0, r3
   19fc8:	bl	13e24 <main@@Base+0x198>
   19fcc:	mov	r3, r0
   19fd0:	b	19ff0 <flatcc_builder_get_direct_buffer@@Base+0x60>
   19fd4:	ldr	r3, [fp, #-12]
   19fd8:	cmp	r3, #0
   19fdc:	beq	19fec <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19fe0:	ldr	r3, [fp, #-12]
   19fe4:	mov	r2, #0
   19fe8:	str	r2, [r3]
   19fec:	mov	r3, #0
   19ff0:	mov	r0, r3
   19ff4:	sub	sp, fp, #4
   19ff8:	ldr	fp, [sp]
   19ffc:	add	sp, sp, #4
   1a000:	pop	{pc}		; (ldr pc, [sp], #4)

0001a004 <flatcc_builder_copy_buffer@@Base>:
   1a004:	str	fp, [sp, #-8]!
   1a008:	str	lr, [sp, #4]
   1a00c:	add	fp, sp, #4
   1a010:	sub	sp, sp, #16
   1a014:	str	r0, [fp, #-8]
   1a018:	str	r1, [fp, #-12]
   1a01c:	str	r2, [fp, #-16]
   1a020:	ldr	r3, [fp, #-8]
   1a024:	ldr	r3, [r3, #184]	; 0xb8
   1a028:	cmp	r3, #0
   1a02c:	bne	1a038 <flatcc_builder_copy_buffer@@Base+0x34>
   1a030:	mov	r3, #0
   1a034:	b	1a084 <flatcc_builder_copy_buffer@@Base+0x80>
   1a038:	ldr	r3, [fp, #-8]
   1a03c:	add	r3, r3, #188	; 0xbc
   1a040:	ldr	r2, [fp, #-16]
   1a044:	ldr	r1, [fp, #-12]
   1a048:	mov	r0, r3
   1a04c:	bl	1ae58 <flatcc_emitter_copy_buffer@@Base>
   1a050:	str	r0, [fp, #-12]
   1a054:	ldr	r3, [fp, #-12]
   1a058:	cmp	r3, #0
   1a05c:	bne	1a080 <flatcc_builder_copy_buffer@@Base+0x7c>
   1a060:	ldr	r3, [pc, #48]	; 1a098 <flatcc_builder_copy_buffer@@Base+0x94>
   1a064:	add	r3, pc, r3
   1a068:	movw	r2, #1926	; 0x786
   1a06c:	ldr	r1, [pc, #40]	; 1a09c <flatcc_builder_copy_buffer@@Base+0x98>
   1a070:	add	r1, pc, r1
   1a074:	ldr	r0, [pc, #36]	; 1a0a0 <flatcc_builder_copy_buffer@@Base+0x9c>
   1a078:	add	r0, pc, r0
   1a07c:	bl	12324 <__assert_fail@plt>
   1a080:	ldr	r3, [fp, #-12]
   1a084:	mov	r0, r3
   1a088:	sub	sp, fp, #4
   1a08c:	ldr	fp, [sp]
   1a090:	add	sp, sp, #4
   1a094:	pop	{pc}		; (ldr pc, [sp], #4)
   1a098:	andeq	r4, r0, ip, asr r3
   1a09c:	andeq	r3, r0, r4, lsl sl
   1a0a0:	andeq	r3, r0, ip, lsr #28

0001a0a4 <flatcc_builder_finalize_buffer@@Base>:
   1a0a4:	str	fp, [sp, #-8]!
   1a0a8:	str	lr, [sp, #4]
   1a0ac:	add	fp, sp, #4
   1a0b0:	sub	sp, sp, #16
   1a0b4:	str	r0, [fp, #-16]
   1a0b8:	str	r1, [fp, #-20]	; 0xffffffec
   1a0bc:	ldr	r0, [fp, #-16]
   1a0c0:	bl	19db8 <flatcc_builder_get_buffer_size@@Base>
   1a0c4:	str	r0, [fp, #-8]
   1a0c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0cc:	cmp	r3, #0
   1a0d0:	beq	1a0e0 <flatcc_builder_finalize_buffer@@Base+0x3c>
   1a0d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0d8:	ldr	r2, [fp, #-8]
   1a0dc:	str	r2, [r3]
   1a0e0:	ldr	r0, [fp, #-8]
   1a0e4:	bl	122b8 <malloc@plt>
   1a0e8:	mov	r3, r0
   1a0ec:	str	r3, [fp, #-12]
   1a0f0:	ldr	r3, [fp, #-12]
   1a0f4:	cmp	r3, #0
   1a0f8:	bne	1a11c <flatcc_builder_finalize_buffer@@Base+0x78>
   1a0fc:	ldr	r3, [pc, #148]	; 1a198 <flatcc_builder_finalize_buffer@@Base+0xf4>
   1a100:	add	r3, pc, r3
   1a104:	movw	r2, #1944	; 0x798
   1a108:	ldr	r1, [pc, #140]	; 1a19c <flatcc_builder_finalize_buffer@@Base+0xf8>
   1a10c:	add	r1, pc, r1
   1a110:	ldr	r0, [pc, #136]	; 1a1a0 <flatcc_builder_finalize_buffer@@Base+0xfc>
   1a114:	add	r0, pc, r0
   1a118:	bl	12324 <__assert_fail@plt>
   1a11c:	ldr	r2, [fp, #-8]
   1a120:	ldr	r1, [fp, #-12]
   1a124:	ldr	r0, [fp, #-16]
   1a128:	bl	1a004 <flatcc_builder_copy_buffer@@Base>
   1a12c:	mov	r3, r0
   1a130:	cmp	r3, #0
   1a134:	bne	1a158 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1a138:	ldr	r3, [pc, #100]	; 1a1a4 <flatcc_builder_finalize_buffer@@Base+0x100>
   1a13c:	add	r3, pc, r3
   1a140:	movw	r2, #1948	; 0x79c
   1a144:	ldr	r1, [pc, #92]	; 1a1a8 <flatcc_builder_finalize_buffer@@Base+0x104>
   1a148:	add	r1, pc, r1
   1a14c:	ldr	r0, [pc, #88]	; 1a1ac <flatcc_builder_finalize_buffer@@Base+0x108>
   1a150:	add	r0, pc, r0
   1a154:	bl	12324 <__assert_fail@plt>
   1a158:	nop	{0}
   1a15c:	ldr	r3, [fp, #-12]
   1a160:	cmp	r3, #0
   1a164:	bne	1a180 <flatcc_builder_finalize_buffer@@Base+0xdc>
   1a168:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a16c:	cmp	r3, #0
   1a170:	beq	1a180 <flatcc_builder_finalize_buffer@@Base+0xdc>
   1a174:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a178:	mov	r2, #0
   1a17c:	str	r2, [r3]
   1a180:	ldr	r3, [fp, #-12]
   1a184:	mov	r0, r3
   1a188:	sub	sp, fp, #4
   1a18c:	ldr	fp, [sp]
   1a190:	add	sp, sp, #4
   1a194:	pop	{pc}		; (ldr pc, [sp], #4)
   1a198:	ldrdeq	r4, [r0], -ip
   1a19c:	andeq	r3, r0, r8, ror r9
   1a1a0:	ldrdeq	r3, [r0], -r0
   1a1a4:	andeq	r4, r0, r0, lsr #5
   1a1a8:	andeq	r3, r0, ip, lsr r9
   1a1ac:	muleq	r0, r4, r9

0001a1b0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1a1b0:	str	fp, [sp, #-8]!
   1a1b4:	str	lr, [sp, #4]
   1a1b8:	add	fp, sp, #4
   1a1bc:	sub	sp, sp, #24
   1a1c0:	str	r0, [fp, #-24]	; 0xffffffe8
   1a1c4:	str	r1, [fp, #-28]	; 0xffffffe4
   1a1c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a1cc:	bl	19db8 <flatcc_builder_get_buffer_size@@Base>
   1a1d0:	str	r0, [fp, #-12]
   1a1d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1d8:	cmp	r3, #0
   1a1dc:	beq	1a1ec <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1a1e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1e4:	ldr	r2, [fp, #-12]
   1a1e8:	str	r2, [r3]
   1a1ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a1f0:	bl	19c98 <flatcc_builder_get_buffer_alignment@@Base>
   1a1f4:	mov	r3, r0
   1a1f8:	str	r3, [fp, #-16]
   1a1fc:	ldr	r2, [fp, #-12]
   1a200:	ldr	r3, [fp, #-16]
   1a204:	add	r3, r2, r3
   1a208:	sub	r2, r3, #1
   1a20c:	ldr	r3, [fp, #-16]
   1a210:	rsb	r3, r3, #0
   1a214:	and	r3, r3, r2
   1a218:	str	r3, [fp, #-12]
   1a21c:	ldr	r1, [fp, #-12]
   1a220:	ldr	r0, [fp, #-16]
   1a224:	bl	13d24 <main@@Base+0x98>
   1a228:	str	r0, [fp, #-8]
   1a22c:	ldr	r3, [fp, #-8]
   1a230:	cmp	r3, #0
   1a234:	beq	1a268 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1a238:	ldr	r2, [fp, #-12]
   1a23c:	ldr	r1, [fp, #-8]
   1a240:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a244:	bl	1a004 <flatcc_builder_copy_buffer@@Base>
   1a248:	mov	r3, r0
   1a24c:	cmp	r3, #0
   1a250:	bne	1a270 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   1a254:	ldr	r0, [fp, #-8]
   1a258:	bl	12288 <free@plt>
   1a25c:	mov	r3, #0
   1a260:	str	r3, [fp, #-8]
   1a264:	b	1a274 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1a268:	nop	{0}
   1a26c:	b	1a274 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1a270:	nop	{0}
   1a274:	ldr	r3, [fp, #-8]
   1a278:	cmp	r3, #0
   1a27c:	bne	1a298 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1a280:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a284:	cmp	r3, #0
   1a288:	beq	1a298 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1a28c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a290:	mov	r2, #0
   1a294:	str	r2, [r3]
   1a298:	ldr	r3, [fp, #-8]
   1a29c:	mov	r0, r3
   1a2a0:	sub	sp, fp, #4
   1a2a4:	ldr	fp, [sp]
   1a2a8:	add	sp, sp, #4
   1a2ac:	pop	{pc}		; (ldr pc, [sp], #4)

0001a2b0 <flatcc_builder_aligned_alloc@@Base>:
   1a2b0:	str	fp, [sp, #-8]!
   1a2b4:	str	lr, [sp, #4]
   1a2b8:	add	fp, sp, #4
   1a2bc:	sub	sp, sp, #8
   1a2c0:	str	r0, [fp, #-8]
   1a2c4:	str	r1, [fp, #-12]
   1a2c8:	ldr	r1, [fp, #-12]
   1a2cc:	ldr	r0, [fp, #-8]
   1a2d0:	bl	13d24 <main@@Base+0x98>
   1a2d4:	mov	r3, r0
   1a2d8:	mov	r0, r3
   1a2dc:	sub	sp, fp, #4
   1a2e0:	ldr	fp, [sp]
   1a2e4:	add	sp, sp, #4
   1a2e8:	pop	{pc}		; (ldr pc, [sp], #4)

0001a2ec <flatcc_builder_aligned_free@@Base>:
   1a2ec:	str	fp, [sp, #-8]!
   1a2f0:	str	lr, [sp, #4]
   1a2f4:	add	fp, sp, #4
   1a2f8:	sub	sp, sp, #8
   1a2fc:	str	r0, [fp, #-8]
   1a300:	ldr	r0, [fp, #-8]
   1a304:	bl	12288 <free@plt>
   1a308:	nop	{0}
   1a30c:	sub	sp, fp, #4
   1a310:	ldr	fp, [sp]
   1a314:	add	sp, sp, #4
   1a318:	pop	{pc}		; (ldr pc, [sp], #4)

0001a31c <flatcc_builder_get_emit_context@@Base>:
   1a31c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a320:	add	fp, sp, #0
   1a324:	sub	sp, sp, #12
   1a328:	str	r0, [fp, #-8]
   1a32c:	ldr	r3, [fp, #-8]
   1a330:	ldr	r3, [r3, #36]	; 0x24
   1a334:	mov	r0, r3
   1a338:	add	sp, fp, #0
   1a33c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a340:	bx	lr
   1a344:	str	fp, [sp, #-8]!
   1a348:	str	lr, [sp, #4]
   1a34c:	add	fp, sp, #4
   1a350:	sub	sp, sp, #16
   1a354:	str	r0, [fp, #-16]
   1a358:	mov	r3, #0
   1a35c:	str	r3, [fp, #-8]
   1a360:	ldr	r3, [fp, #-16]
   1a364:	ldr	r3, [r3]
   1a368:	cmp	r3, #0
   1a36c:	beq	1a3c4 <flatcc_builder_get_emit_context@@Base+0xa8>
   1a370:	ldr	r3, [fp, #-16]
   1a374:	ldr	r3, [r3]
   1a378:	ldr	r2, [r3, #2948]	; 0xb84
   1a37c:	ldr	r3, [fp, #-16]
   1a380:	ldr	r3, [r3, #4]
   1a384:	cmp	r2, r3
   1a388:	beq	1a3c4 <flatcc_builder_get_emit_context@@Base+0xa8>
   1a38c:	ldr	r3, [fp, #-16]
   1a390:	ldr	r3, [r3]
   1a394:	ldr	r2, [r3, #2952]	; 0xb88
   1a398:	ldr	r3, [fp, #-16]
   1a39c:	ldr	r3, [r3]
   1a3a0:	ldr	r3, [r3, #2948]	; 0xb84
   1a3a4:	sub	r2, r2, #2944	; 0xb80
   1a3a8:	str	r2, [r3, #2952]	; 0xb88
   1a3ac:	ldr	r3, [fp, #-16]
   1a3b0:	ldr	r3, [r3]
   1a3b4:	ldr	r2, [r3, #2948]	; 0xb84
   1a3b8:	ldr	r3, [fp, #-16]
   1a3bc:	str	r2, [r3]
   1a3c0:	b	1a4ec <flatcc_builder_get_emit_context@@Base+0x1d0>
   1a3c4:	movw	r0, #2956	; 0xb8c
   1a3c8:	bl	122b8 <malloc@plt>
   1a3cc:	mov	r3, r0
   1a3d0:	str	r3, [fp, #-8]
   1a3d4:	ldr	r3, [fp, #-8]
   1a3d8:	cmp	r3, #0
   1a3dc:	bne	1a3e8 <flatcc_builder_get_emit_context@@Base+0xcc>
   1a3e0:	mvn	r3, #0
   1a3e4:	b	1a530 <flatcc_builder_get_emit_context@@Base+0x214>
   1a3e8:	ldr	r3, [fp, #-16]
   1a3ec:	ldr	r3, [r3, #28]
   1a3f0:	add	r2, r3, #2944	; 0xb80
   1a3f4:	ldr	r3, [fp, #-16]
   1a3f8:	str	r2, [r3, #28]
   1a3fc:	ldr	r3, [fp, #-16]
   1a400:	ldr	r3, [r3]
   1a404:	cmp	r3, #0
   1a408:	beq	1a45c <flatcc_builder_get_emit_context@@Base+0x140>
   1a40c:	ldr	r3, [fp, #-16]
   1a410:	ldr	r2, [r3, #4]
   1a414:	ldr	r3, [fp, #-8]
   1a418:	str	r2, [r3, #2948]	; 0xb84
   1a41c:	ldr	r3, [fp, #-16]
   1a420:	ldr	r2, [r3]
   1a424:	ldr	r3, [fp, #-8]
   1a428:	str	r2, [r3, #2944]	; 0xb80
   1a42c:	ldr	r3, [fp, #-16]
   1a430:	ldr	r3, [r3]
   1a434:	ldr	r2, [fp, #-8]
   1a438:	str	r2, [r3, #2948]	; 0xb84
   1a43c:	ldr	r3, [fp, #-16]
   1a440:	ldr	r3, [r3, #4]
   1a444:	ldr	r2, [fp, #-8]
   1a448:	str	r2, [r3, #2944]	; 0xb80
   1a44c:	ldr	r3, [fp, #-16]
   1a450:	ldr	r2, [fp, #-8]
   1a454:	str	r2, [r3]
   1a458:	b	1a4ec <flatcc_builder_get_emit_context@@Base+0x1d0>
   1a45c:	ldr	r3, [fp, #-16]
   1a460:	ldr	r2, [fp, #-8]
   1a464:	str	r2, [r3]
   1a468:	ldr	r3, [fp, #-16]
   1a46c:	ldr	r2, [fp, #-8]
   1a470:	str	r2, [r3, #4]
   1a474:	ldr	r3, [fp, #-8]
   1a478:	ldr	r2, [fp, #-8]
   1a47c:	str	r2, [r3, #2944]	; 0xb80
   1a480:	ldr	r3, [fp, #-8]
   1a484:	ldr	r2, [fp, #-8]
   1a488:	str	r2, [r3, #2948]	; 0xb84
   1a48c:	ldr	r3, [fp, #-16]
   1a490:	ldr	r3, [r3]
   1a494:	add	r2, r3, #1472	; 0x5c0
   1a498:	ldr	r3, [fp, #-16]
   1a49c:	str	r2, [r3, #8]
   1a4a0:	ldr	r3, [fp, #-16]
   1a4a4:	ldr	r2, [r3, #8]
   1a4a8:	ldr	r3, [fp, #-16]
   1a4ac:	str	r2, [r3, #16]
   1a4b0:	ldr	r3, [fp, #-16]
   1a4b4:	mov	r2, #1472	; 0x5c0
   1a4b8:	str	r2, [r3, #12]
   1a4bc:	ldr	r3, [fp, #-16]
   1a4c0:	ldr	r3, [r3, #12]
   1a4c4:	rsb	r2, r3, #2944	; 0xb80
   1a4c8:	ldr	r3, [fp, #-16]
   1a4cc:	str	r2, [r3, #20]
   1a4d0:	ldr	r3, [fp, #-16]
   1a4d4:	ldr	r3, [r3, #12]
   1a4d8:	rsb	r2, r3, #0
   1a4dc:	ldr	r3, [fp, #-8]
   1a4e0:	str	r2, [r3, #2952]	; 0xb88
   1a4e4:	mov	r3, #0
   1a4e8:	b	1a530 <flatcc_builder_get_emit_context@@Base+0x214>
   1a4ec:	ldr	r3, [fp, #-16]
   1a4f0:	ldr	r3, [r3]
   1a4f4:	add	r2, r3, #2944	; 0xb80
   1a4f8:	ldr	r3, [fp, #-16]
   1a4fc:	str	r2, [r3, #8]
   1a500:	ldr	r3, [fp, #-16]
   1a504:	mov	r2, #2944	; 0xb80
   1a508:	str	r2, [r3, #12]
   1a50c:	ldr	r3, [fp, #-16]
   1a510:	ldr	r3, [r3]
   1a514:	ldr	r3, [r3, #2944]	; 0xb80
   1a518:	ldr	r2, [r3, #2952]	; 0xb88
   1a51c:	ldr	r3, [fp, #-16]
   1a520:	ldr	r3, [r3]
   1a524:	sub	r2, r2, #2944	; 0xb80
   1a528:	str	r2, [r3, #2952]	; 0xb88
   1a52c:	mov	r3, #0
   1a530:	mov	r0, r3
   1a534:	sub	sp, fp, #4
   1a538:	ldr	fp, [sp]
   1a53c:	add	sp, sp, #4
   1a540:	pop	{pc}		; (ldr pc, [sp], #4)
   1a544:	str	fp, [sp, #-8]!
   1a548:	str	lr, [sp, #4]
   1a54c:	add	fp, sp, #4
   1a550:	sub	sp, sp, #16
   1a554:	str	r0, [fp, #-16]
   1a558:	mov	r3, #0
   1a55c:	str	r3, [fp, #-8]
   1a560:	ldr	r3, [fp, #-16]
   1a564:	ldr	r3, [r3, #4]
   1a568:	cmp	r3, #0
   1a56c:	beq	1a5a4 <flatcc_builder_get_emit_context@@Base+0x288>
   1a570:	ldr	r3, [fp, #-16]
   1a574:	ldr	r3, [r3, #4]
   1a578:	ldr	r2, [r3, #2944]	; 0xb80
   1a57c:	ldr	r3, [fp, #-16]
   1a580:	ldr	r3, [r3]
   1a584:	cmp	r2, r3
   1a588:	beq	1a5a4 <flatcc_builder_get_emit_context@@Base+0x288>
   1a58c:	ldr	r3, [fp, #-16]
   1a590:	ldr	r3, [r3, #4]
   1a594:	ldr	r2, [r3, #2944]	; 0xb80
   1a598:	ldr	r3, [fp, #-16]
   1a59c:	str	r2, [r3, #4]
   1a5a0:	b	1a6cc <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a5a4:	movw	r0, #2956	; 0xb8c
   1a5a8:	bl	122b8 <malloc@plt>
   1a5ac:	mov	r3, r0
   1a5b0:	str	r3, [fp, #-8]
   1a5b4:	ldr	r3, [fp, #-8]
   1a5b8:	cmp	r3, #0
   1a5bc:	bne	1a5c8 <flatcc_builder_get_emit_context@@Base+0x2ac>
   1a5c0:	mvn	r3, #0
   1a5c4:	b	1a710 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a5c8:	ldr	r3, [fp, #-16]
   1a5cc:	ldr	r3, [r3, #28]
   1a5d0:	add	r2, r3, #2944	; 0xb80
   1a5d4:	ldr	r3, [fp, #-16]
   1a5d8:	str	r2, [r3, #28]
   1a5dc:	ldr	r3, [fp, #-16]
   1a5e0:	ldr	r3, [r3, #4]
   1a5e4:	cmp	r3, #0
   1a5e8:	beq	1a63c <flatcc_builder_get_emit_context@@Base+0x320>
   1a5ec:	ldr	r3, [fp, #-16]
   1a5f0:	ldr	r2, [r3, #4]
   1a5f4:	ldr	r3, [fp, #-8]
   1a5f8:	str	r2, [r3, #2948]	; 0xb84
   1a5fc:	ldr	r3, [fp, #-16]
   1a600:	ldr	r2, [r3]
   1a604:	ldr	r3, [fp, #-8]
   1a608:	str	r2, [r3, #2944]	; 0xb80
   1a60c:	ldr	r3, [fp, #-16]
   1a610:	ldr	r3, [r3]
   1a614:	ldr	r2, [fp, #-8]
   1a618:	str	r2, [r3, #2948]	; 0xb84
   1a61c:	ldr	r3, [fp, #-16]
   1a620:	ldr	r3, [r3, #4]
   1a624:	ldr	r2, [fp, #-8]
   1a628:	str	r2, [r3, #2944]	; 0xb80
   1a62c:	ldr	r3, [fp, #-16]
   1a630:	ldr	r2, [fp, #-8]
   1a634:	str	r2, [r3, #4]
   1a638:	b	1a6cc <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a63c:	ldr	r3, [fp, #-16]
   1a640:	ldr	r2, [fp, #-8]
   1a644:	str	r2, [r3]
   1a648:	ldr	r3, [fp, #-16]
   1a64c:	ldr	r2, [fp, #-8]
   1a650:	str	r2, [r3, #4]
   1a654:	ldr	r3, [fp, #-8]
   1a658:	ldr	r2, [fp, #-8]
   1a65c:	str	r2, [r3, #2944]	; 0xb80
   1a660:	ldr	r3, [fp, #-8]
   1a664:	ldr	r2, [fp, #-8]
   1a668:	str	r2, [r3, #2948]	; 0xb84
   1a66c:	ldr	r3, [fp, #-16]
   1a670:	ldr	r3, [r3]
   1a674:	add	r2, r3, #1472	; 0x5c0
   1a678:	ldr	r3, [fp, #-16]
   1a67c:	str	r2, [r3, #8]
   1a680:	ldr	r3, [fp, #-16]
   1a684:	ldr	r2, [r3, #8]
   1a688:	ldr	r3, [fp, #-16]
   1a68c:	str	r2, [r3, #16]
   1a690:	ldr	r3, [fp, #-16]
   1a694:	mov	r2, #1472	; 0x5c0
   1a698:	str	r2, [r3, #12]
   1a69c:	ldr	r3, [fp, #-16]
   1a6a0:	ldr	r3, [r3, #12]
   1a6a4:	rsb	r2, r3, #2944	; 0xb80
   1a6a8:	ldr	r3, [fp, #-16]
   1a6ac:	str	r2, [r3, #20]
   1a6b0:	ldr	r3, [fp, #-16]
   1a6b4:	ldr	r3, [r3, #12]
   1a6b8:	rsb	r2, r3, #0
   1a6bc:	ldr	r3, [fp, #-8]
   1a6c0:	str	r2, [r3, #2952]	; 0xb88
   1a6c4:	mov	r3, #0
   1a6c8:	b	1a710 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a6cc:	ldr	r3, [fp, #-16]
   1a6d0:	ldr	r3, [r3, #4]
   1a6d4:	mov	r2, r3
   1a6d8:	ldr	r3, [fp, #-16]
   1a6dc:	str	r2, [r3, #16]
   1a6e0:	ldr	r3, [fp, #-16]
   1a6e4:	mov	r2, #2944	; 0xb80
   1a6e8:	str	r2, [r3, #20]
   1a6ec:	ldr	r3, [fp, #-16]
   1a6f0:	ldr	r3, [r3, #4]
   1a6f4:	ldr	r3, [r3, #2948]	; 0xb84
   1a6f8:	ldr	r2, [r3, #2952]	; 0xb88
   1a6fc:	ldr	r3, [fp, #-16]
   1a700:	ldr	r3, [r3, #4]
   1a704:	add	r2, r2, #2944	; 0xb80
   1a708:	str	r2, [r3, #2952]	; 0xb88
   1a70c:	mov	r3, #0
   1a710:	mov	r0, r3
   1a714:	sub	sp, fp, #4
   1a718:	ldr	fp, [sp]
   1a71c:	add	sp, sp, #4
   1a720:	pop	{pc}		; (ldr pc, [sp], #4)
   1a724:	str	fp, [sp, #-8]!
   1a728:	str	lr, [sp, #4]
   1a72c:	add	fp, sp, #4
   1a730:	sub	sp, sp, #24
   1a734:	str	r0, [fp, #-16]
   1a738:	str	r1, [fp, #-20]	; 0xffffffec
   1a73c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a740:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a748:	add	r3, r2, r3
   1a74c:	str	r3, [fp, #-20]	; 0xffffffec
   1a750:	b	1a814 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a754:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a758:	str	r3, [fp, #-8]
   1a75c:	ldr	r3, [fp, #-16]
   1a760:	ldr	r3, [r3, #12]
   1a764:	ldr	r2, [fp, #-8]
   1a768:	cmp	r2, r3
   1a76c:	bls	1a7a4 <flatcc_builder_get_emit_context@@Base+0x488>
   1a770:	ldr	r3, [fp, #-16]
   1a774:	ldr	r3, [r3, #12]
   1a778:	str	r3, [fp, #-8]
   1a77c:	ldr	r3, [fp, #-8]
   1a780:	cmp	r3, #0
   1a784:	bne	1a7a4 <flatcc_builder_get_emit_context@@Base+0x488>
   1a788:	ldr	r0, [fp, #-16]
   1a78c:	bl	1a344 <flatcc_builder_get_emit_context@@Base+0x28>
   1a790:	mov	r3, r0
   1a794:	cmp	r3, #0
   1a798:	beq	1a814 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a79c:	mvn	r3, #0
   1a7a0:	b	1a824 <flatcc_builder_get_emit_context@@Base+0x508>
   1a7a4:	ldr	r3, [fp, #-16]
   1a7a8:	ldr	r2, [r3, #8]
   1a7ac:	ldr	r3, [fp, #-8]
   1a7b0:	rsb	r3, r3, #0
   1a7b4:	add	r2, r2, r3
   1a7b8:	ldr	r3, [fp, #-16]
   1a7bc:	str	r2, [r3, #8]
   1a7c0:	ldr	r3, [fp, #-16]
   1a7c4:	ldr	r2, [r3, #12]
   1a7c8:	ldr	r3, [fp, #-8]
   1a7cc:	sub	r2, r2, r3
   1a7d0:	ldr	r3, [fp, #-16]
   1a7d4:	str	r2, [r3, #12]
   1a7d8:	ldr	r3, [fp, #-8]
   1a7dc:	rsb	r3, r3, #0
   1a7e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a7e4:	add	r3, r2, r3
   1a7e8:	str	r3, [fp, #-20]	; 0xffffffec
   1a7ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a7f0:	ldr	r3, [fp, #-8]
   1a7f4:	sub	r3, r2, r3
   1a7f8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a7fc:	ldr	r3, [fp, #-16]
   1a800:	ldr	r3, [r3, #8]
   1a804:	ldr	r2, [fp, #-8]
   1a808:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a80c:	mov	r0, r3
   1a810:	bl	12294 <memcpy@plt>
   1a814:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a818:	cmp	r3, #0
   1a81c:	bne	1a754 <flatcc_builder_get_emit_context@@Base+0x438>
   1a820:	mov	r3, #0
   1a824:	mov	r0, r3
   1a828:	sub	sp, fp, #4
   1a82c:	ldr	fp, [sp]
   1a830:	add	sp, sp, #4
   1a834:	pop	{pc}		; (ldr pc, [sp], #4)
   1a838:	str	fp, [sp, #-8]!
   1a83c:	str	lr, [sp, #4]
   1a840:	add	fp, sp, #4
   1a844:	sub	sp, sp, #24
   1a848:	str	r0, [fp, #-16]
   1a84c:	str	r1, [fp, #-20]	; 0xffffffec
   1a850:	str	r2, [fp, #-24]	; 0xffffffe8
   1a854:	b	1a910 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a858:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a85c:	str	r3, [fp, #-8]
   1a860:	ldr	r3, [fp, #-16]
   1a864:	ldr	r3, [r3, #20]
   1a868:	ldr	r2, [fp, #-8]
   1a86c:	cmp	r2, r3
   1a870:	bls	1a8a8 <flatcc_builder_get_emit_context@@Base+0x58c>
   1a874:	ldr	r3, [fp, #-16]
   1a878:	ldr	r3, [r3, #20]
   1a87c:	str	r3, [fp, #-8]
   1a880:	ldr	r3, [fp, #-8]
   1a884:	cmp	r3, #0
   1a888:	bne	1a8a8 <flatcc_builder_get_emit_context@@Base+0x58c>
   1a88c:	ldr	r0, [fp, #-16]
   1a890:	bl	1a544 <flatcc_builder_get_emit_context@@Base+0x228>
   1a894:	mov	r3, r0
   1a898:	cmp	r3, #0
   1a89c:	beq	1a910 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a8a0:	mvn	r3, #0
   1a8a4:	b	1a920 <flatcc_builder_get_emit_context@@Base+0x604>
   1a8a8:	ldr	r3, [fp, #-16]
   1a8ac:	ldr	r3, [r3, #16]
   1a8b0:	ldr	r2, [fp, #-8]
   1a8b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a8b8:	mov	r0, r3
   1a8bc:	bl	12294 <memcpy@plt>
   1a8c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a8c4:	ldr	r3, [fp, #-8]
   1a8c8:	sub	r3, r2, r3
   1a8cc:	str	r3, [fp, #-24]	; 0xffffffe8
   1a8d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a8d4:	ldr	r3, [fp, #-8]
   1a8d8:	add	r3, r2, r3
   1a8dc:	str	r3, [fp, #-20]	; 0xffffffec
   1a8e0:	ldr	r3, [fp, #-16]
   1a8e4:	ldr	r2, [r3, #16]
   1a8e8:	ldr	r3, [fp, #-8]
   1a8ec:	add	r2, r2, r3
   1a8f0:	ldr	r3, [fp, #-16]
   1a8f4:	str	r2, [r3, #16]
   1a8f8:	ldr	r3, [fp, #-16]
   1a8fc:	ldr	r2, [r3, #20]
   1a900:	ldr	r3, [fp, #-8]
   1a904:	sub	r2, r2, r3
   1a908:	ldr	r3, [fp, #-16]
   1a90c:	str	r2, [r3, #20]
   1a910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a914:	cmp	r3, #0
   1a918:	bne	1a858 <flatcc_builder_get_emit_context@@Base+0x53c>
   1a91c:	mov	r3, #0
   1a920:	mov	r0, r3
   1a924:	sub	sp, fp, #4
   1a928:	ldr	fp, [sp]
   1a92c:	add	sp, sp, #4
   1a930:	pop	{pc}		; (ldr pc, [sp], #4)

0001a934 <flatcc_emitter_recycle_page@@Base>:
   1a934:	push	{fp}		; (str fp, [sp, #-4]!)
   1a938:	add	fp, sp, #0
   1a93c:	sub	sp, sp, #12
   1a940:	str	r0, [fp, #-8]
   1a944:	str	r1, [fp, #-12]
   1a948:	ldr	r3, [fp, #-8]
   1a94c:	ldr	r3, [r3]
   1a950:	ldr	r2, [fp, #-12]
   1a954:	cmp	r2, r3
   1a958:	beq	1a970 <flatcc_emitter_recycle_page@@Base+0x3c>
   1a95c:	ldr	r3, [fp, #-8]
   1a960:	ldr	r3, [r3, #4]
   1a964:	ldr	r2, [fp, #-12]
   1a968:	cmp	r2, r3
   1a96c:	bne	1a978 <flatcc_emitter_recycle_page@@Base+0x44>
   1a970:	mvn	r3, #0
   1a974:	b	1a9e8 <flatcc_emitter_recycle_page@@Base+0xb4>
   1a978:	ldr	r3, [fp, #-12]
   1a97c:	ldr	r3, [r3, #2944]	; 0xb80
   1a980:	ldr	r2, [fp, #-12]
   1a984:	ldr	r2, [r2, #2948]	; 0xb84
   1a988:	str	r2, [r3, #2948]	; 0xb84
   1a98c:	ldr	r3, [fp, #-12]
   1a990:	ldr	r3, [r3, #2948]	; 0xb84
   1a994:	ldr	r2, [fp, #-12]
   1a998:	ldr	r2, [r2, #2944]	; 0xb80
   1a99c:	str	r2, [r3, #2944]	; 0xb80
   1a9a0:	ldr	r3, [fp, #-8]
   1a9a4:	ldr	r3, [r3]
   1a9a8:	ldr	r2, [r3, #2948]	; 0xb84
   1a9ac:	ldr	r3, [fp, #-12]
   1a9b0:	str	r2, [r3, #2948]	; 0xb84
   1a9b4:	ldr	r3, [fp, #-8]
   1a9b8:	ldr	r2, [r3]
   1a9bc:	ldr	r3, [fp, #-12]
   1a9c0:	str	r2, [r3, #2944]	; 0xb80
   1a9c4:	ldr	r3, [fp, #-12]
   1a9c8:	ldr	r3, [r3, #2948]	; 0xb84
   1a9cc:	ldr	r2, [fp, #-12]
   1a9d0:	str	r2, [r3, #2944]	; 0xb80
   1a9d4:	ldr	r3, [fp, #-12]
   1a9d8:	ldr	r3, [r3, #2944]	; 0xb80
   1a9dc:	ldr	r2, [fp, #-12]
   1a9e0:	str	r2, [r3, #2948]	; 0xb84
   1a9e4:	mov	r3, #0
   1a9e8:	mov	r0, r3
   1a9ec:	add	sp, fp, #0
   1a9f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a9f4:	bx	lr

0001a9f8 <flatcc_emitter_reset@@Base>:
   1a9f8:	str	fp, [sp, #-8]!
   1a9fc:	str	lr, [sp, #4]
   1aa00:	add	fp, sp, #4
   1aa04:	sub	sp, sp, #16
   1aa08:	str	r0, [fp, #-16]
   1aa0c:	ldr	r3, [fp, #-16]
   1aa10:	ldr	r3, [r3]
   1aa14:	str	r3, [fp, #-8]
   1aa18:	ldr	r3, [fp, #-16]
   1aa1c:	ldr	r3, [r3]
   1aa20:	cmp	r3, #0
   1aa24:	beq	1ab80 <flatcc_emitter_reset@@Base+0x188>
   1aa28:	ldr	r3, [fp, #-16]
   1aa2c:	ldr	r2, [r3]
   1aa30:	ldr	r3, [fp, #-16]
   1aa34:	str	r2, [r3, #4]
   1aa38:	ldr	r3, [fp, #-16]
   1aa3c:	ldr	r3, [r3]
   1aa40:	add	r2, r3, #1472	; 0x5c0
   1aa44:	ldr	r3, [fp, #-16]
   1aa48:	str	r2, [r3, #8]
   1aa4c:	ldr	r3, [fp, #-16]
   1aa50:	ldr	r2, [r3, #8]
   1aa54:	ldr	r3, [fp, #-16]
   1aa58:	str	r2, [r3, #16]
   1aa5c:	ldr	r3, [fp, #-16]
   1aa60:	mov	r2, #1472	; 0x5c0
   1aa64:	str	r2, [r3, #12]
   1aa68:	ldr	r3, [fp, #-16]
   1aa6c:	mov	r2, #1472	; 0x5c0
   1aa70:	str	r2, [r3, #20]
   1aa74:	ldr	r3, [fp, #-16]
   1aa78:	ldr	r3, [r3, #12]
   1aa7c:	mov	r2, r3
   1aa80:	ldr	r3, [fp, #-16]
   1aa84:	ldr	r3, [r3]
   1aa88:	rsb	r2, r2, #0
   1aa8c:	str	r2, [r3, #2952]	; 0xb88
   1aa90:	ldr	r3, [fp, #-16]
   1aa94:	ldr	r3, [r3, #32]
   1aa98:	cmp	r3, #0
   1aa9c:	bne	1aab0 <flatcc_emitter_reset@@Base+0xb8>
   1aaa0:	ldr	r3, [fp, #-16]
   1aaa4:	ldr	r2, [r3, #24]
   1aaa8:	ldr	r3, [fp, #-16]
   1aaac:	str	r2, [r3, #32]
   1aab0:	ldr	r3, [fp, #-16]
   1aab4:	ldr	r2, [r3, #32]
   1aab8:	mov	r3, r2
   1aabc:	lsl	r3, r3, #1
   1aac0:	add	r3, r3, r2
   1aac4:	lsr	r2, r3, #2
   1aac8:	ldr	r3, [fp, #-16]
   1aacc:	ldr	r3, [r3, #24]
   1aad0:	lsr	r3, r3, #2
   1aad4:	add	r2, r2, r3
   1aad8:	ldr	r3, [fp, #-16]
   1aadc:	str	r2, [r3, #32]
   1aae0:	ldr	r3, [fp, #-16]
   1aae4:	mov	r2, #0
   1aae8:	str	r2, [r3, #24]
   1aaec:	b	1ab44 <flatcc_emitter_reset@@Base+0x14c>
   1aaf0:	ldr	r3, [fp, #-16]
   1aaf4:	ldr	r3, [r3, #4]
   1aaf8:	ldr	r3, [r3, #2944]	; 0xb80
   1aafc:	str	r3, [fp, #-8]
   1ab00:	ldr	r3, [fp, #-16]
   1ab04:	ldr	r3, [r3, #4]
   1ab08:	ldr	r2, [fp, #-8]
   1ab0c:	ldr	r2, [r2, #2944]	; 0xb80
   1ab10:	str	r2, [r3, #2944]	; 0xb80
   1ab14:	ldr	r3, [fp, #-8]
   1ab18:	ldr	r3, [r3, #2944]	; 0xb80
   1ab1c:	ldr	r2, [fp, #-16]
   1ab20:	ldr	r2, [r2, #4]
   1ab24:	str	r2, [r3, #2948]	; 0xb84
   1ab28:	ldr	r0, [fp, #-8]
   1ab2c:	bl	12288 <free@plt>
   1ab30:	ldr	r3, [fp, #-16]
   1ab34:	ldr	r3, [r3, #28]
   1ab38:	sub	r2, r3, #2944	; 0xb80
   1ab3c:	ldr	r3, [fp, #-16]
   1ab40:	str	r2, [r3, #28]
   1ab44:	ldr	r3, [fp, #-16]
   1ab48:	ldr	r3, [r3, #32]
   1ab4c:	lsl	r2, r3, #1
   1ab50:	ldr	r3, [fp, #-16]
   1ab54:	ldr	r3, [r3, #28]
   1ab58:	cmp	r2, r3
   1ab5c:	bcs	1ab84 <flatcc_emitter_reset@@Base+0x18c>
   1ab60:	ldr	r3, [fp, #-16]
   1ab64:	ldr	r3, [r3, #4]
   1ab68:	ldr	r2, [r3, #2944]	; 0xb80
   1ab6c:	ldr	r3, [fp, #-16]
   1ab70:	ldr	r3, [r3]
   1ab74:	cmp	r2, r3
   1ab78:	bne	1aaf0 <flatcc_emitter_reset@@Base+0xf8>
   1ab7c:	b	1ab84 <flatcc_emitter_reset@@Base+0x18c>
   1ab80:	nop	{0}
   1ab84:	sub	sp, fp, #4
   1ab88:	ldr	fp, [sp]
   1ab8c:	add	sp, sp, #4
   1ab90:	pop	{pc}		; (ldr pc, [sp], #4)

0001ab94 <flatcc_emitter_clear@@Base>:
   1ab94:	str	fp, [sp, #-8]!
   1ab98:	str	lr, [sp, #4]
   1ab9c:	add	fp, sp, #4
   1aba0:	sub	sp, sp, #16
   1aba4:	str	r0, [fp, #-16]
   1aba8:	ldr	r3, [fp, #-16]
   1abac:	ldr	r3, [r3]
   1abb0:	str	r3, [fp, #-8]
   1abb4:	ldr	r3, [fp, #-8]
   1abb8:	cmp	r3, #0
   1abbc:	beq	1ac1c <flatcc_emitter_clear@@Base+0x88>
   1abc0:	ldr	r3, [fp, #-8]
   1abc4:	ldr	r3, [r3, #2948]	; 0xb84
   1abc8:	mov	r2, #0
   1abcc:	str	r2, [r3, #2944]	; 0xb80
   1abd0:	b	1abf0 <flatcc_emitter_clear@@Base+0x5c>
   1abd4:	ldr	r3, [fp, #-8]
   1abd8:	ldr	r3, [r3, #2944]	; 0xb80
   1abdc:	str	r3, [fp, #-8]
   1abe0:	ldr	r3, [fp, #-8]
   1abe4:	ldr	r3, [r3, #2948]	; 0xb84
   1abe8:	mov	r0, r3
   1abec:	bl	12288 <free@plt>
   1abf0:	ldr	r3, [fp, #-8]
   1abf4:	ldr	r3, [r3, #2944]	; 0xb80
   1abf8:	cmp	r3, #0
   1abfc:	bne	1abd4 <flatcc_emitter_clear@@Base+0x40>
   1ac00:	ldr	r0, [fp, #-8]
   1ac04:	bl	12288 <free@plt>
   1ac08:	mov	r2, #36	; 0x24
   1ac0c:	mov	r1, #0
   1ac10:	ldr	r0, [fp, #-16]
   1ac14:	bl	122f4 <memset@plt>
   1ac18:	b	1ac20 <flatcc_emitter_clear@@Base+0x8c>
   1ac1c:	nop	{0}
   1ac20:	sub	sp, fp, #4
   1ac24:	ldr	fp, [sp]
   1ac28:	add	sp, sp, #4
   1ac2c:	pop	{pc}		; (ldr pc, [sp], #4)

0001ac30 <flatcc_emitter@@Base>:
   1ac30:	str	fp, [sp, #-8]!
   1ac34:	str	lr, [sp, #4]
   1ac38:	add	fp, sp, #4
   1ac3c:	sub	sp, sp, #24
   1ac40:	str	r0, [fp, #-16]
   1ac44:	str	r1, [fp, #-20]	; 0xffffffec
   1ac48:	str	r2, [fp, #-24]	; 0xffffffe8
   1ac4c:	str	r3, [fp, #-28]	; 0xffffffe4
   1ac50:	ldr	r3, [fp, #-16]
   1ac54:	str	r3, [fp, #-12]
   1ac58:	ldr	r3, [fp, #-12]
   1ac5c:	ldr	r2, [r3, #24]
   1ac60:	ldr	r3, [fp, #4]
   1ac64:	add	r2, r2, r3
   1ac68:	ldr	r3, [fp, #-12]
   1ac6c:	str	r2, [r3, #24]
   1ac70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ac74:	cmp	r3, #0
   1ac78:	bge	1ad40 <flatcc_emitter@@Base+0x110>
   1ac7c:	ldr	r3, [fp, #-12]
   1ac80:	ldr	r3, [r3, #12]
   1ac84:	ldr	r2, [fp, #4]
   1ac88:	cmp	r2, r3
   1ac8c:	bhi	1acd4 <flatcc_emitter@@Base+0xa4>
   1ac90:	ldr	r3, [fp, #-12]
   1ac94:	ldr	r2, [r3, #8]
   1ac98:	ldr	r3, [fp, #4]
   1ac9c:	rsb	r3, r3, #0
   1aca0:	add	r2, r2, r3
   1aca4:	ldr	r3, [fp, #-12]
   1aca8:	str	r2, [r3, #8]
   1acac:	ldr	r3, [fp, #-12]
   1acb0:	ldr	r2, [r3, #12]
   1acb4:	ldr	r3, [fp, #4]
   1acb8:	sub	r2, r2, r3
   1acbc:	ldr	r3, [fp, #-12]
   1acc0:	str	r2, [r3, #12]
   1acc4:	ldr	r3, [fp, #-12]
   1acc8:	ldr	r3, [r3, #8]
   1accc:	str	r3, [fp, #-8]
   1acd0:	b	1adec <flatcc_emitter@@Base+0x1bc>
   1acd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1acd8:	lsl	r3, r3, #3
   1acdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ace0:	add	r3, r2, r3
   1ace4:	str	r3, [fp, #-20]	; 0xffffffec
   1ace8:	b	1ad28 <flatcc_emitter@@Base+0xf8>
   1acec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acf0:	sub	r3, r3, #8
   1acf4:	str	r3, [fp, #-20]	; 0xffffffec
   1acf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acfc:	ldr	r1, [r3]
   1ad00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad04:	ldr	r3, [r3, #4]
   1ad08:	mov	r2, r3
   1ad0c:	ldr	r0, [fp, #-12]
   1ad10:	bl	1a724 <flatcc_builder_get_emit_context@@Base+0x408>
   1ad14:	mov	r3, r0
   1ad18:	cmp	r3, #0
   1ad1c:	beq	1ad28 <flatcc_emitter@@Base+0xf8>
   1ad20:	mvn	r3, #0
   1ad24:	b	1ae44 <flatcc_emitter@@Base+0x214>
   1ad28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ad2c:	sub	r2, r3, #1
   1ad30:	str	r2, [fp, #-24]	; 0xffffffe8
   1ad34:	cmp	r3, #0
   1ad38:	bne	1acec <flatcc_emitter@@Base+0xbc>
   1ad3c:	b	1ade4 <flatcc_emitter@@Base+0x1b4>
   1ad40:	ldr	r3, [fp, #-12]
   1ad44:	ldr	r3, [r3, #20]
   1ad48:	ldr	r2, [fp, #4]
   1ad4c:	cmp	r2, r3
   1ad50:	bhi	1add0 <flatcc_emitter@@Base+0x1a0>
   1ad54:	ldr	r3, [fp, #-12]
   1ad58:	ldr	r3, [r3, #16]
   1ad5c:	str	r3, [fp, #-8]
   1ad60:	ldr	r3, [fp, #-12]
   1ad64:	ldr	r2, [r3, #16]
   1ad68:	ldr	r3, [fp, #4]
   1ad6c:	add	r2, r2, r3
   1ad70:	ldr	r3, [fp, #-12]
   1ad74:	str	r2, [r3, #16]
   1ad78:	ldr	r3, [fp, #-12]
   1ad7c:	ldr	r2, [r3, #20]
   1ad80:	ldr	r3, [fp, #4]
   1ad84:	sub	r2, r2, r3
   1ad88:	ldr	r3, [fp, #-12]
   1ad8c:	str	r2, [r3, #20]
   1ad90:	b	1adec <flatcc_emitter@@Base+0x1bc>
   1ad94:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad98:	ldr	r1, [r3]
   1ad9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ada0:	ldr	r3, [r3, #4]
   1ada4:	mov	r2, r3
   1ada8:	ldr	r0, [fp, #-12]
   1adac:	bl	1a838 <flatcc_builder_get_emit_context@@Base+0x51c>
   1adb0:	mov	r3, r0
   1adb4:	cmp	r3, #0
   1adb8:	beq	1adc4 <flatcc_emitter@@Base+0x194>
   1adbc:	mvn	r3, #0
   1adc0:	b	1ae44 <flatcc_emitter@@Base+0x214>
   1adc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1adc8:	add	r3, r3, #8
   1adcc:	str	r3, [fp, #-20]	; 0xffffffec
   1add0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1add4:	sub	r2, r3, #1
   1add8:	str	r2, [fp, #-24]	; 0xffffffe8
   1addc:	cmp	r3, #0
   1ade0:	bne	1ad94 <flatcc_emitter@@Base+0x164>
   1ade4:	mov	r3, #0
   1ade8:	b	1ae44 <flatcc_emitter@@Base+0x214>
   1adec:	b	1ae2c <flatcc_emitter@@Base+0x1fc>
   1adf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1adf4:	ldr	r1, [r3]
   1adf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1adfc:	ldr	r3, [r3, #4]
   1ae00:	mov	r2, r3
   1ae04:	ldr	r0, [fp, #-8]
   1ae08:	bl	12294 <memcpy@plt>
   1ae0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae10:	ldr	r3, [r3, #4]
   1ae14:	ldr	r2, [fp, #-8]
   1ae18:	add	r3, r2, r3
   1ae1c:	str	r3, [fp, #-8]
   1ae20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae24:	add	r3, r3, #8
   1ae28:	str	r3, [fp, #-20]	; 0xffffffec
   1ae2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ae30:	sub	r2, r3, #1
   1ae34:	str	r2, [fp, #-24]	; 0xffffffe8
   1ae38:	cmp	r3, #0
   1ae3c:	bne	1adf0 <flatcc_emitter@@Base+0x1c0>
   1ae40:	mov	r3, #0
   1ae44:	mov	r0, r3
   1ae48:	sub	sp, fp, #4
   1ae4c:	ldr	fp, [sp]
   1ae50:	add	sp, sp, #4
   1ae54:	pop	{pc}		; (ldr pc, [sp], #4)

0001ae58 <flatcc_emitter_copy_buffer@@Base>:
   1ae58:	str	fp, [sp, #-8]!
   1ae5c:	str	lr, [sp, #4]
   1ae60:	add	fp, sp, #4
   1ae64:	sub	sp, sp, #24
   1ae68:	str	r0, [fp, #-16]
   1ae6c:	str	r1, [fp, #-20]	; 0xffffffec
   1ae70:	str	r2, [fp, #-24]	; 0xffffffe8
   1ae74:	ldr	r3, [fp, #-16]
   1ae78:	ldr	r3, [r3, #24]
   1ae7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae80:	cmp	r2, r3
   1ae84:	bcs	1ae90 <flatcc_emitter_copy_buffer@@Base+0x38>
   1ae88:	mov	r3, #0
   1ae8c:	b	1af90 <flatcc_emitter_copy_buffer@@Base+0x138>
   1ae90:	ldr	r3, [fp, #-16]
   1ae94:	ldr	r3, [r3]
   1ae98:	cmp	r3, #0
   1ae9c:	bne	1aea8 <flatcc_emitter_copy_buffer@@Base+0x50>
   1aea0:	mov	r3, #0
   1aea4:	b	1af90 <flatcc_emitter_copy_buffer@@Base+0x138>
   1aea8:	ldr	r3, [fp, #-16]
   1aeac:	ldr	r2, [r3]
   1aeb0:	ldr	r3, [fp, #-16]
   1aeb4:	ldr	r3, [r3, #4]
   1aeb8:	cmp	r2, r3
   1aebc:	bne	1aee4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1aec0:	ldr	r3, [fp, #-16]
   1aec4:	ldr	r1, [r3, #8]
   1aec8:	ldr	r3, [fp, #-16]
   1aecc:	ldr	r3, [r3, #24]
   1aed0:	mov	r2, r3
   1aed4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aed8:	bl	12294 <memcpy@plt>
   1aedc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aee0:	b	1af90 <flatcc_emitter_copy_buffer@@Base+0x138>
   1aee4:	ldr	r3, [fp, #-16]
   1aee8:	ldr	r3, [r3, #12]
   1aeec:	rsb	r3, r3, #2944	; 0xb80
   1aef0:	str	r3, [fp, #-12]
   1aef4:	ldr	r3, [fp, #-16]
   1aef8:	ldr	r3, [r3, #8]
   1aefc:	ldr	r2, [fp, #-12]
   1af00:	mov	r1, r3
   1af04:	ldr	r0, [fp, #-20]	; 0xffffffec
   1af08:	bl	12294 <memcpy@plt>
   1af0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af10:	ldr	r3, [fp, #-12]
   1af14:	add	r3, r2, r3
   1af18:	str	r3, [fp, #-20]	; 0xffffffec
   1af1c:	ldr	r3, [fp, #-16]
   1af20:	ldr	r3, [r3]
   1af24:	ldr	r3, [r3, #2944]	; 0xb80
   1af28:	str	r3, [fp, #-8]
   1af2c:	b	1af5c <flatcc_emitter_copy_buffer@@Base+0x104>
   1af30:	ldr	r3, [fp, #-8]
   1af34:	mov	r2, #2944	; 0xb80
   1af38:	mov	r1, r3
   1af3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1af40:	bl	12294 <memcpy@plt>
   1af44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af48:	add	r3, r3, #2944	; 0xb80
   1af4c:	str	r3, [fp, #-20]	; 0xffffffec
   1af50:	ldr	r3, [fp, #-8]
   1af54:	ldr	r3, [r3, #2944]	; 0xb80
   1af58:	str	r3, [fp, #-8]
   1af5c:	ldr	r3, [fp, #-16]
   1af60:	ldr	r3, [r3, #4]
   1af64:	ldr	r2, [fp, #-8]
   1af68:	cmp	r2, r3
   1af6c:	bne	1af30 <flatcc_emitter_copy_buffer@@Base+0xd8>
   1af70:	ldr	r1, [fp, #-8]
   1af74:	ldr	r3, [fp, #-16]
   1af78:	ldr	r3, [r3, #20]
   1af7c:	rsb	r3, r3, #2944	; 0xb80
   1af80:	mov	r2, r3
   1af84:	ldr	r0, [fp, #-20]	; 0xffffffec
   1af88:	bl	12294 <memcpy@plt>
   1af8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af90:	mov	r0, r3
   1af94:	sub	sp, fp, #4
   1af98:	ldr	fp, [sp]
   1af9c:	add	sp, sp, #4
   1afa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1afa4:	push	{fp}		; (str fp, [sp, #-4]!)
   1afa8:	add	fp, sp, #0
   1afac:	sub	sp, sp, #12
   1afb0:	str	r0, [fp, #-8]
   1afb4:	ldr	r3, [fp, #-8]
   1afb8:	mov	r0, r3
   1afbc:	add	sp, fp, #0
   1afc0:	pop	{fp}		; (ldr fp, [sp], #4)
   1afc4:	bx	lr
   1afc8:	str	fp, [sp, #-8]!
   1afcc:	str	lr, [sp, #4]
   1afd0:	add	fp, sp, #4
   1afd4:	sub	sp, sp, #8
   1afd8:	str	r0, [fp, #-8]
   1afdc:	ldr	r3, [fp, #-8]
   1afe0:	ldr	r3, [r3]
   1afe4:	mov	r0, r3
   1afe8:	bl	1afa4 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1afec:	mov	r3, r0
   1aff0:	mov	r0, r3
   1aff4:	sub	sp, fp, #4
   1aff8:	ldr	fp, [sp]
   1affc:	add	sp, sp, #4
   1b000:	pop	{pc}		; (ldr pc, [sp], #4)
   1b004:	push	{fp}		; (str fp, [sp, #-4]!)
   1b008:	add	fp, sp, #0
   1b00c:	sub	sp, sp, #12
   1b010:	mov	r3, r0
   1b014:	strh	r3, [fp, #-6]
   1b018:	ldrh	r3, [fp, #-6]
   1b01c:	mov	r0, r3
   1b020:	add	sp, fp, #0
   1b024:	pop	{fp}		; (ldr fp, [sp], #4)
   1b028:	bx	lr
   1b02c:	str	fp, [sp, #-8]!
   1b030:	str	lr, [sp, #4]
   1b034:	add	fp, sp, #4
   1b038:	sub	sp, sp, #8
   1b03c:	str	r0, [fp, #-8]
   1b040:	ldr	r3, [fp, #-8]
   1b044:	ldrh	r3, [r3]
   1b048:	mov	r0, r3
   1b04c:	bl	1b004 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   1b050:	mov	r3, r0
   1b054:	mov	r0, r3
   1b058:	sub	sp, fp, #4
   1b05c:	ldr	fp, [sp]
   1b060:	add	sp, sp, #4
   1b064:	pop	{pc}		; (ldr pc, [sp], #4)
   1b068:	push	{fp}		; (str fp, [sp, #-4]!)
   1b06c:	add	fp, sp, #0
   1b070:	sub	sp, sp, #12
   1b074:	str	r0, [fp, #-8]
   1b078:	ldr	r3, [fp, #-8]
   1b07c:	mov	r0, r3
   1b080:	add	sp, fp, #0
   1b084:	pop	{fp}		; (ldr fp, [sp], #4)
   1b088:	bx	lr
   1b08c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b090:	add	fp, sp, #0
   1b094:	sub	sp, sp, #12
   1b098:	str	r0, [fp, #-8]
   1b09c:	ldr	r3, [fp, #-8]
   1b0a0:	mov	r0, r3
   1b0a4:	add	sp, fp, #0
   1b0a8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b0ac:	bx	lr
   1b0b0:	str	fp, [sp, #-8]!
   1b0b4:	str	lr, [sp, #4]
   1b0b8:	add	fp, sp, #4
   1b0bc:	sub	sp, sp, #8
   1b0c0:	str	r0, [fp, #-8]
   1b0c4:	ldr	r3, [fp, #-8]
   1b0c8:	ldr	r3, [r3]
   1b0cc:	mov	r0, r3
   1b0d0:	bl	1b068 <flatcc_emitter_copy_buffer@@Base+0x210>
   1b0d4:	mov	r3, r0
   1b0d8:	mov	r0, r3
   1b0dc:	sub	sp, fp, #4
   1b0e0:	ldr	fp, [sp]
   1b0e4:	add	sp, sp, #4
   1b0e8:	pop	{pc}		; (ldr pc, [sp], #4)

0001b0ec <flatcc_verify_error_string@@Base>:
   1b0ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1b0f0:	add	fp, sp, #0
   1b0f4:	sub	sp, sp, #12
   1b0f8:	str	r0, [fp, #-8]
   1b0fc:	ldr	r3, [fp, #-8]
   1b100:	cmp	r3, #36	; 0x24
   1b104:	addls	pc, pc, r3, lsl #2
   1b108:	b	1b35c <flatcc_verify_error_string@@Base+0x270>
   1b10c:	b	1b1a0 <flatcc_verify_error_string@@Base+0xb4>
   1b110:	b	1b1ac <flatcc_verify_error_string@@Base+0xc0>
   1b114:	b	1b1b8 <flatcc_verify_error_string@@Base+0xcc>
   1b118:	b	1b1c4 <flatcc_verify_error_string@@Base+0xd8>
   1b11c:	b	1b1d0 <flatcc_verify_error_string@@Base+0xe4>
   1b120:	b	1b1dc <flatcc_verify_error_string@@Base+0xf0>
   1b124:	b	1b1e8 <flatcc_verify_error_string@@Base+0xfc>
   1b128:	b	1b1f4 <flatcc_verify_error_string@@Base+0x108>
   1b12c:	b	1b200 <flatcc_verify_error_string@@Base+0x114>
   1b130:	b	1b20c <flatcc_verify_error_string@@Base+0x120>
   1b134:	b	1b218 <flatcc_verify_error_string@@Base+0x12c>
   1b138:	b	1b224 <flatcc_verify_error_string@@Base+0x138>
   1b13c:	b	1b230 <flatcc_verify_error_string@@Base+0x144>
   1b140:	b	1b23c <flatcc_verify_error_string@@Base+0x150>
   1b144:	b	1b248 <flatcc_verify_error_string@@Base+0x15c>
   1b148:	b	1b254 <flatcc_verify_error_string@@Base+0x168>
   1b14c:	b	1b260 <flatcc_verify_error_string@@Base+0x174>
   1b150:	b	1b26c <flatcc_verify_error_string@@Base+0x180>
   1b154:	b	1b278 <flatcc_verify_error_string@@Base+0x18c>
   1b158:	b	1b284 <flatcc_verify_error_string@@Base+0x198>
   1b15c:	b	1b290 <flatcc_verify_error_string@@Base+0x1a4>
   1b160:	b	1b29c <flatcc_verify_error_string@@Base+0x1b0>
   1b164:	b	1b2a8 <flatcc_verify_error_string@@Base+0x1bc>
   1b168:	b	1b2b4 <flatcc_verify_error_string@@Base+0x1c8>
   1b16c:	b	1b2c0 <flatcc_verify_error_string@@Base+0x1d4>
   1b170:	b	1b2cc <flatcc_verify_error_string@@Base+0x1e0>
   1b174:	b	1b2d8 <flatcc_verify_error_string@@Base+0x1ec>
   1b178:	b	1b2e4 <flatcc_verify_error_string@@Base+0x1f8>
   1b17c:	b	1b2f0 <flatcc_verify_error_string@@Base+0x204>
   1b180:	b	1b2fc <flatcc_verify_error_string@@Base+0x210>
   1b184:	b	1b308 <flatcc_verify_error_string@@Base+0x21c>
   1b188:	b	1b314 <flatcc_verify_error_string@@Base+0x228>
   1b18c:	b	1b320 <flatcc_verify_error_string@@Base+0x234>
   1b190:	b	1b32c <flatcc_verify_error_string@@Base+0x240>
   1b194:	b	1b338 <flatcc_verify_error_string@@Base+0x24c>
   1b198:	b	1b344 <flatcc_verify_error_string@@Base+0x258>
   1b19c:	b	1b350 <flatcc_verify_error_string@@Base+0x264>
   1b1a0:	ldr	r3, [pc, #460]	; 1b374 <flatcc_verify_error_string@@Base+0x288>
   1b1a4:	add	r3, pc, r3
   1b1a8:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1ac:	ldr	r3, [pc, #452]	; 1b378 <flatcc_verify_error_string@@Base+0x28c>
   1b1b0:	add	r3, pc, r3
   1b1b4:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1b8:	ldr	r3, [pc, #444]	; 1b37c <flatcc_verify_error_string@@Base+0x290>
   1b1bc:	add	r3, pc, r3
   1b1c0:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1c4:	ldr	r3, [pc, #436]	; 1b380 <flatcc_verify_error_string@@Base+0x294>
   1b1c8:	add	r3, pc, r3
   1b1cc:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1d0:	ldr	r3, [pc, #428]	; 1b384 <flatcc_verify_error_string@@Base+0x298>
   1b1d4:	add	r3, pc, r3
   1b1d8:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1dc:	ldr	r3, [pc, #420]	; 1b388 <flatcc_verify_error_string@@Base+0x29c>
   1b1e0:	add	r3, pc, r3
   1b1e4:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1e8:	ldr	r3, [pc, #412]	; 1b38c <flatcc_verify_error_string@@Base+0x2a0>
   1b1ec:	add	r3, pc, r3
   1b1f0:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b1f4:	ldr	r3, [pc, #404]	; 1b390 <flatcc_verify_error_string@@Base+0x2a4>
   1b1f8:	add	r3, pc, r3
   1b1fc:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b200:	ldr	r3, [pc, #396]	; 1b394 <flatcc_verify_error_string@@Base+0x2a8>
   1b204:	add	r3, pc, r3
   1b208:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b20c:	ldr	r3, [pc, #388]	; 1b398 <flatcc_verify_error_string@@Base+0x2ac>
   1b210:	add	r3, pc, r3
   1b214:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b218:	ldr	r3, [pc, #380]	; 1b39c <flatcc_verify_error_string@@Base+0x2b0>
   1b21c:	add	r3, pc, r3
   1b220:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b224:	ldr	r3, [pc, #372]	; 1b3a0 <flatcc_verify_error_string@@Base+0x2b4>
   1b228:	add	r3, pc, r3
   1b22c:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b230:	ldr	r3, [pc, #364]	; 1b3a4 <flatcc_verify_error_string@@Base+0x2b8>
   1b234:	add	r3, pc, r3
   1b238:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b23c:	ldr	r3, [pc, #356]	; 1b3a8 <flatcc_verify_error_string@@Base+0x2bc>
   1b240:	add	r3, pc, r3
   1b244:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b248:	ldr	r3, [pc, #348]	; 1b3ac <flatcc_verify_error_string@@Base+0x2c0>
   1b24c:	add	r3, pc, r3
   1b250:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b254:	ldr	r3, [pc, #340]	; 1b3b0 <flatcc_verify_error_string@@Base+0x2c4>
   1b258:	add	r3, pc, r3
   1b25c:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b260:	ldr	r3, [pc, #332]	; 1b3b4 <flatcc_verify_error_string@@Base+0x2c8>
   1b264:	add	r3, pc, r3
   1b268:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b26c:	ldr	r3, [pc, #324]	; 1b3b8 <flatcc_verify_error_string@@Base+0x2cc>
   1b270:	add	r3, pc, r3
   1b274:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b278:	ldr	r3, [pc, #316]	; 1b3bc <flatcc_verify_error_string@@Base+0x2d0>
   1b27c:	add	r3, pc, r3
   1b280:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b284:	ldr	r3, [pc, #308]	; 1b3c0 <flatcc_verify_error_string@@Base+0x2d4>
   1b288:	add	r3, pc, r3
   1b28c:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b290:	ldr	r3, [pc, #300]	; 1b3c4 <flatcc_verify_error_string@@Base+0x2d8>
   1b294:	add	r3, pc, r3
   1b298:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b29c:	ldr	r3, [pc, #292]	; 1b3c8 <flatcc_verify_error_string@@Base+0x2dc>
   1b2a0:	add	r3, pc, r3
   1b2a4:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2a8:	ldr	r3, [pc, #284]	; 1b3cc <flatcc_verify_error_string@@Base+0x2e0>
   1b2ac:	add	r3, pc, r3
   1b2b0:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2b4:	ldr	r3, [pc, #276]	; 1b3d0 <flatcc_verify_error_string@@Base+0x2e4>
   1b2b8:	add	r3, pc, r3
   1b2bc:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2c0:	ldr	r3, [pc, #268]	; 1b3d4 <flatcc_verify_error_string@@Base+0x2e8>
   1b2c4:	add	r3, pc, r3
   1b2c8:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2cc:	ldr	r3, [pc, #260]	; 1b3d8 <flatcc_verify_error_string@@Base+0x2ec>
   1b2d0:	add	r3, pc, r3
   1b2d4:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2d8:	ldr	r3, [pc, #252]	; 1b3dc <flatcc_verify_error_string@@Base+0x2f0>
   1b2dc:	add	r3, pc, r3
   1b2e0:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2e4:	ldr	r3, [pc, #244]	; 1b3e0 <flatcc_verify_error_string@@Base+0x2f4>
   1b2e8:	add	r3, pc, r3
   1b2ec:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2f0:	ldr	r3, [pc, #236]	; 1b3e4 <flatcc_verify_error_string@@Base+0x2f8>
   1b2f4:	add	r3, pc, r3
   1b2f8:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b2fc:	ldr	r3, [pc, #228]	; 1b3e8 <flatcc_verify_error_string@@Base+0x2fc>
   1b300:	add	r3, pc, r3
   1b304:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b308:	ldr	r3, [pc, #220]	; 1b3ec <flatcc_verify_error_string@@Base+0x300>
   1b30c:	add	r3, pc, r3
   1b310:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b314:	ldr	r3, [pc, #212]	; 1b3f0 <flatcc_verify_error_string@@Base+0x304>
   1b318:	add	r3, pc, r3
   1b31c:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b320:	ldr	r3, [pc, #204]	; 1b3f4 <flatcc_verify_error_string@@Base+0x308>
   1b324:	add	r3, pc, r3
   1b328:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b32c:	ldr	r3, [pc, #196]	; 1b3f8 <flatcc_verify_error_string@@Base+0x30c>
   1b330:	add	r3, pc, r3
   1b334:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b338:	ldr	r3, [pc, #188]	; 1b3fc <flatcc_verify_error_string@@Base+0x310>
   1b33c:	add	r3, pc, r3
   1b340:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b344:	ldr	r3, [pc, #180]	; 1b400 <flatcc_verify_error_string@@Base+0x314>
   1b348:	add	r3, pc, r3
   1b34c:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b350:	ldr	r3, [pc, #172]	; 1b404 <flatcc_verify_error_string@@Base+0x318>
   1b354:	add	r3, pc, r3
   1b358:	b	1b364 <flatcc_verify_error_string@@Base+0x278>
   1b35c:	ldr	r3, [pc, #164]	; 1b408 <flatcc_verify_error_string@@Base+0x31c>
   1b360:	add	r3, pc, r3
   1b364:	mov	r0, r3
   1b368:	add	sp, fp, #0
   1b36c:	pop	{fp}		; (ldr fp, [sp], #4)
   1b370:	bx	lr
   1b374:	andeq	r3, r0, r0, ror #4
   1b378:	andeq	r3, r0, r8, asr r2
   1b37c:	andeq	r3, r0, r4, ror #4
   1b380:	andeq	r3, r0, ip, ror #4
   1b384:	andeq	r3, r0, ip, ror r2
   1b388:	andeq	r3, r0, r8, lsl #5
   1b38c:	andeq	r3, r0, r0, lsr #5
   1b390:			; <UNDEFINED> instruction: 0x000032b4
   1b394:	andeq	r3, r0, r4, asr #5
   1b398:	andeq	r3, r0, ip, asr #5
   1b39c:	ldrdeq	r3, [r0], -r4
   1b3a0:	andeq	r3, r0, r0, ror #5
   1b3a4:	andeq	r3, r0, r8, ror #5
   1b3a8:	strdeq	r3, [r0], -r4
   1b3ac:	andeq	r3, r0, r4, lsl #6
   1b3b0:	andeq	r3, r0, r4, lsl r3
   1b3b4:	andeq	r3, r0, r0, lsr r3
   1b3b8:	andeq	r3, r0, ip, asr #6
   1b3bc:	andeq	r3, r0, r8, ror #6
   1b3c0:	andeq	r3, r0, r0, ror r3
   1b3c4:	andeq	r3, r0, ip, lsl #7
   1b3c8:	muleq	r0, r8, r3
   1b3cc:			; <UNDEFINED> instruction: 0x000033b8
   1b3d0:	andeq	r3, r0, r0, ror #7
   1b3d4:	andeq	r3, r0, r0, lsl #8
   1b3d8:	andeq	r3, r0, r0, lsr #8
   1b3dc:	andeq	r3, r0, r4, asr #8
   1b3e0:	andeq	r3, r0, ip, asr #8
   1b3e4:	andeq	r3, r0, ip, asr r4
   1b3e8:	andeq	r3, r0, r8, ror #8
   1b3ec:	andeq	r3, r0, r4, lsl #9
   1b3f0:	andeq	r3, r0, r0, lsr #9
   1b3f4:	andeq	r3, r0, ip, lsr #9
   1b3f8:	andeq	r3, r0, r8, asr #9
   1b3fc:	andeq	r3, r0, r4, ror #9
   1b400:	andeq	r3, r0, ip, lsl #10
   1b404:	andeq	r3, r0, r8, lsr #10
   1b408:	andeq	r3, r0, ip, lsr #10
   1b40c:	str	fp, [sp, #-8]!
   1b410:	str	lr, [sp, #4]
   1b414:	add	fp, sp, #4
   1b418:	sub	sp, sp, #8
   1b41c:	str	r0, [fp, #-8]
   1b420:	str	r1, [fp, #-12]
   1b424:	ldr	r2, [fp, #-8]
   1b428:	ldr	r3, [fp, #-12]
   1b42c:	add	r3, r2, r3
   1b430:	mov	r0, r3
   1b434:	bl	1afc8 <flatcc_emitter_copy_buffer@@Base+0x170>
   1b438:	mov	r3, r0
   1b43c:	mov	r0, r3
   1b440:	sub	sp, fp, #4
   1b444:	ldr	fp, [sp]
   1b448:	add	sp, sp, #4
   1b44c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b450:	str	fp, [sp, #-8]!
   1b454:	str	lr, [sp, #4]
   1b458:	add	fp, sp, #4
   1b45c:	sub	sp, sp, #16
   1b460:	str	r0, [fp, #-16]
   1b464:	mov	r3, #0
   1b468:	str	r3, [fp, #-8]
   1b46c:	sub	r3, fp, #8
   1b470:	mov	r2, #4
   1b474:	ldr	r1, [fp, #-16]
   1b478:	mov	r0, r3
   1b47c:	bl	12300 <strncpy@plt>
   1b480:	ldr	r3, [fp, #-8]
   1b484:	mov	r0, r3
   1b488:	bl	1b08c <flatcc_emitter_copy_buffer@@Base+0x234>
   1b48c:	mov	r3, r0
   1b490:	mov	r0, r3
   1b494:	sub	sp, fp, #4
   1b498:	ldr	fp, [sp]
   1b49c:	add	sp, sp, #4
   1b4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4a4:	str	fp, [sp, #-8]!
   1b4a8:	str	lr, [sp, #4]
   1b4ac:	add	fp, sp, #4
   1b4b0:	sub	sp, sp, #8
   1b4b4:	str	r0, [fp, #-8]
   1b4b8:	str	r1, [fp, #-12]
   1b4bc:	ldr	r2, [fp, #-8]
   1b4c0:	ldr	r3, [fp, #-12]
   1b4c4:	add	r3, r2, r3
   1b4c8:	mov	r0, r3
   1b4cc:	bl	1b0b0 <flatcc_emitter_copy_buffer@@Base+0x258>
   1b4d0:	mov	r3, r0
   1b4d4:	mov	r0, r3
   1b4d8:	sub	sp, fp, #4
   1b4dc:	ldr	fp, [sp]
   1b4e0:	add	sp, sp, #4
   1b4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4e8:	str	fp, [sp, #-8]!
   1b4ec:	str	lr, [sp, #4]
   1b4f0:	add	fp, sp, #4
   1b4f4:	sub	sp, sp, #8
   1b4f8:	str	r0, [fp, #-8]
   1b4fc:	str	r1, [fp, #-12]
   1b500:	ldr	r2, [fp, #-8]
   1b504:	ldr	r3, [fp, #-12]
   1b508:	add	r3, r2, r3
   1b50c:	mov	r0, r3
   1b510:	bl	1b02c <flatcc_emitter_copy_buffer@@Base+0x1d4>
   1b514:	mov	r3, r0
   1b518:	mov	r0, r3
   1b51c:	sub	sp, fp, #4
   1b520:	ldr	fp, [sp]
   1b524:	add	sp, sp, #4
   1b528:	pop	{pc}		; (ldr pc, [sp], #4)
   1b52c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b530:	add	fp, sp, #0
   1b534:	sub	sp, sp, #28
   1b538:	str	r0, [fp, #-16]
   1b53c:	str	r1, [fp, #-20]	; 0xffffffec
   1b540:	str	r2, [fp, #-24]	; 0xffffffe8
   1b544:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b548:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b54c:	add	r3, r2, r3
   1b550:	str	r3, [fp, #-8]
   1b554:	ldr	r2, [fp, #-8]
   1b558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b55c:	cmp	r2, r3
   1b560:	bls	1b590 <flatcc_verify_error_string@@Base+0x4a4>
   1b564:	ldr	r3, [fp, #-8]
   1b568:	add	r3, r3, #4
   1b56c:	ldr	r2, [fp, #-16]
   1b570:	cmp	r2, r3
   1b574:	bcc	1b590 <flatcc_verify_error_string@@Base+0x4a4>
   1b578:	ldr	r3, [fp, #-8]
   1b57c:	and	r3, r3, #3
   1b580:	cmp	r3, #0
   1b584:	bne	1b590 <flatcc_verify_error_string@@Base+0x4a4>
   1b588:	mov	r3, #1
   1b58c:	b	1b594 <flatcc_verify_error_string@@Base+0x4a8>
   1b590:	mov	r3, #0
   1b594:	mov	r0, r3
   1b598:	add	sp, fp, #0
   1b59c:	pop	{fp}		; (ldr fp, [sp], #4)
   1b5a0:	bx	lr
   1b5a4:	push	{fp}		; (str fp, [sp, #-4]!)
   1b5a8:	add	fp, sp, #0
   1b5ac:	sub	sp, sp, #28
   1b5b0:	str	r0, [fp, #-16]
   1b5b4:	str	r1, [fp, #-20]	; 0xffffffec
   1b5b8:	str	r2, [fp, #-24]	; 0xffffffe8
   1b5bc:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b5c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b5c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b5c8:	add	r3, r2, r3
   1b5cc:	str	r3, [fp, #-8]
   1b5d0:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b5d4:	cmp	r3, #4
   1b5d8:	movcs	r3, r3
   1b5dc:	movcc	r3, #4
   1b5e0:	strh	r3, [fp, #-26]	; 0xffffffe6
   1b5e4:	ldr	r2, [fp, #-8]
   1b5e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b5ec:	cmp	r2, r3
   1b5f0:	bls	1b630 <flatcc_verify_error_string@@Base+0x544>
   1b5f4:	ldr	r3, [fp, #-8]
   1b5f8:	add	r3, r3, #4
   1b5fc:	ldr	r2, [fp, #-16]
   1b600:	cmp	r2, r3
   1b604:	bcc	1b630 <flatcc_verify_error_string@@Base+0x544>
   1b608:	ldr	r3, [fp, #-8]
   1b60c:	add	r2, r3, #4
   1b610:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1b614:	sub	r3, r3, #1
   1b618:	orr	r3, r3, #3
   1b61c:	and	r3, r3, r2
   1b620:	cmp	r3, #0
   1b624:	bne	1b630 <flatcc_verify_error_string@@Base+0x544>
   1b628:	mov	r3, #1
   1b62c:	b	1b634 <flatcc_verify_error_string@@Base+0x548>
   1b630:	mov	r3, #0
   1b634:	mov	r0, r3
   1b638:	add	sp, fp, #0
   1b63c:	pop	{fp}		; (ldr fp, [sp], #4)
   1b640:	bx	lr
   1b644:	push	{fp}		; (str fp, [sp, #-4]!)
   1b648:	add	fp, sp, #0
   1b64c:	sub	sp, sp, #36	; 0x24
   1b650:	str	r0, [fp, #-24]	; 0xffffffe8
   1b654:	str	r1, [fp, #-28]	; 0xffffffe4
   1b658:	str	r2, [fp, #-32]	; 0xffffffe0
   1b65c:	str	r3, [fp, #-36]	; 0xffffffdc
   1b660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b664:	cmp	r3, #0
   1b668:	beq	1b684 <flatcc_verify_error_string@@Base+0x598>
   1b66c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b670:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b674:	add	r3, r2, r3
   1b678:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b67c:	cmp	r2, r3
   1b680:	bcs	1b68c <flatcc_verify_error_string@@Base+0x5a0>
   1b684:	mov	r3, #18
   1b688:	b	1b74c <flatcc_verify_error_string@@Base+0x660>
   1b68c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b690:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b694:	add	r3, r2, r3
   1b698:	str	r3, [fp, #-28]	; 0xffffffe4
   1b69c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b6a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b6a4:	add	r3, r2, r3
   1b6a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b6ac:	cmp	r2, r3
   1b6b0:	movls	r3, #1
   1b6b4:	movhi	r3, #0
   1b6b8:	uxtb	r3, r3
   1b6bc:	str	r3, [fp, #-8]
   1b6c0:	ldr	r3, [fp, #-8]
   1b6c4:	cmp	r3, #0
   1b6c8:	bne	1b6d4 <flatcc_verify_error_string@@Base+0x5e8>
   1b6cc:	mov	r3, #10
   1b6d0:	b	1b74c <flatcc_verify_error_string@@Base+0x660>
   1b6d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b6d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b6dc:	add	r3, r2, r3
   1b6e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b6e4:	cmp	r2, r3
   1b6e8:	movcs	r3, #1
   1b6ec:	movcc	r3, #0
   1b6f0:	uxtb	r3, r3
   1b6f4:	str	r3, [fp, #-12]
   1b6f8:	ldr	r3, [fp, #-12]
   1b6fc:	cmp	r3, #0
   1b700:	bne	1b70c <flatcc_verify_error_string@@Base+0x620>
   1b704:	mov	r3, #9
   1b708:	b	1b74c <flatcc_verify_error_string@@Base+0x660>
   1b70c:	ldrh	r3, [fp, #4]
   1b710:	sub	r3, r3, #1
   1b714:	mov	r2, r3
   1b718:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b71c:	and	r3, r3, r2
   1b720:	cmp	r3, #0
   1b724:	moveq	r3, #1
   1b728:	movne	r3, #0
   1b72c:	uxtb	r3, r3
   1b730:	str	r3, [fp, #-16]
   1b734:	ldr	r3, [fp, #-16]
   1b738:	cmp	r3, #0
   1b73c:	bne	1b748 <flatcc_verify_error_string@@Base+0x65c>
   1b740:	mov	r3, #11
   1b744:	b	1b74c <flatcc_verify_error_string@@Base+0x660>
   1b748:	mov	r3, #0
   1b74c:	mov	r0, r3
   1b750:	add	sp, fp, #0
   1b754:	pop	{fp}		; (ldr fp, [sp], #4)
   1b758:	bx	lr
   1b75c:	str	fp, [sp, #-8]!
   1b760:	str	lr, [sp, #4]
   1b764:	add	fp, sp, #4
   1b768:	sub	sp, sp, #16
   1b76c:	str	r0, [fp, #-16]
   1b770:	mov	r3, r1
   1b774:	strh	r3, [fp, #-18]	; 0xffffffee
   1b778:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b77c:	add	r3, r3, #2
   1b780:	uxth	r3, r3
   1b784:	lsl	r3, r3, #1
   1b788:	strh	r3, [fp, #-6]
   1b78c:	ldr	r3, [fp, #-16]
   1b790:	ldrh	r3, [r3, #22]
   1b794:	ldrh	r2, [fp, #-6]
   1b798:	cmp	r2, r3
   1b79c:	bcc	1b7a8 <flatcc_verify_error_string@@Base+0x6bc>
   1b7a0:	mov	r3, #0
   1b7a4:	b	1b7c4 <flatcc_verify_error_string@@Base+0x6d8>
   1b7a8:	ldr	r3, [fp, #-16]
   1b7ac:	ldr	r3, [r3, #12]
   1b7b0:	ldrh	r2, [fp, #-6]
   1b7b4:	mov	r1, r2
   1b7b8:	mov	r0, r3
   1b7bc:	bl	1b4e8 <flatcc_verify_error_string@@Base+0x3fc>
   1b7c0:	mov	r3, r0
   1b7c4:	mov	r0, r3
   1b7c8:	sub	sp, fp, #4
   1b7cc:	ldr	fp, [sp]
   1b7d0:	add	sp, sp, #4
   1b7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7d8:	str	fp, [sp, #-8]!
   1b7dc:	str	lr, [sp, #4]
   1b7e0:	add	fp, sp, #4
   1b7e4:	sub	sp, sp, #16
   1b7e8:	str	r0, [fp, #-16]
   1b7ec:	mov	r3, r1
   1b7f0:	strh	r3, [fp, #-18]	; 0xffffffee
   1b7f4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b7f8:	mov	r1, r3
   1b7fc:	ldr	r0, [fp, #-16]
   1b800:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1b804:	mov	r3, r0
   1b808:	strh	r3, [fp, #-6]
   1b80c:	ldrh	r3, [fp, #-6]
   1b810:	cmp	r3, #0
   1b814:	beq	1b838 <flatcc_verify_error_string@@Base+0x74c>
   1b818:	ldr	r3, [fp, #-16]
   1b81c:	ldr	r2, [r3]
   1b820:	ldr	r3, [fp, #-16]
   1b824:	ldr	r1, [r3, #16]
   1b828:	ldrh	r3, [fp, #-6]
   1b82c:	add	r3, r1, r3
   1b830:	add	r3, r2, r3
   1b834:	b	1b83c <flatcc_verify_error_string@@Base+0x750>
   1b838:	mov	r3, #0
   1b83c:	mov	r0, r3
   1b840:	sub	sp, fp, #4
   1b844:	ldr	fp, [sp]
   1b848:	add	sp, sp, #4
   1b84c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b850:	str	fp, [sp, #-8]!
   1b854:	str	lr, [sp, #4]
   1b858:	add	fp, sp, #4
   1b85c:	sub	sp, sp, #48	; 0x30
   1b860:	str	r0, [fp, #-40]	; 0xffffffd8
   1b864:	str	r2, [fp, #-48]	; 0xffffffd0
   1b868:	str	r3, [fp, #-52]	; 0xffffffcc
   1b86c:	mov	r3, r1
   1b870:	strh	r3, [fp, #-42]	; 0xffffffd6
   1b874:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b878:	ldr	r3, [r3]
   1b87c:	str	r3, [fp, #-8]
   1b880:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   1b884:	mov	r1, r3
   1b888:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b88c:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1b890:	mov	r3, r0
   1b894:	strh	r3, [fp, #-10]
   1b898:	ldrh	r3, [fp, #-10]
   1b89c:	cmp	r3, #0
   1b8a0:	bne	1b8d8 <flatcc_verify_error_string@@Base+0x7ec>
   1b8a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b8a8:	cmp	r3, #0
   1b8ac:	moveq	r3, #1
   1b8b0:	movne	r3, #0
   1b8b4:	uxtb	r3, r3
   1b8b8:	str	r3, [fp, #-16]
   1b8bc:	ldr	r3, [fp, #-16]
   1b8c0:	cmp	r3, #0
   1b8c4:	bne	1b8d0 <flatcc_verify_error_string@@Base+0x7e4>
   1b8c8:	mov	r3, #4
   1b8cc:	b	1b9a0 <flatcc_verify_error_string@@Base+0x8b4>
   1b8d0:	mov	r3, #0
   1b8d4:	b	1b9a0 <flatcc_verify_error_string@@Base+0x8b4>
   1b8d8:	ldrh	r3, [fp, #-10]
   1b8dc:	str	r3, [fp, #-20]	; 0xffffffec
   1b8e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b8e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b8e8:	add	r3, r2, r3
   1b8ec:	str	r3, [fp, #-24]	; 0xffffffe8
   1b8f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b8f4:	ldrh	r3, [r3, #20]
   1b8f8:	mov	r2, r3
   1b8fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b900:	cmp	r3, r2
   1b904:	movls	r3, #1
   1b908:	movhi	r3, #0
   1b90c:	uxtb	r3, r3
   1b910:	str	r3, [fp, #-28]	; 0xffffffe4
   1b914:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b918:	cmp	r3, #0
   1b91c:	bne	1b928 <flatcc_verify_error_string@@Base+0x83c>
   1b920:	mov	r3, #13
   1b924:	b	1b9a0 <flatcc_verify_error_string@@Base+0x8b4>
   1b928:	mov	r3, #1
   1b92c:	str	r3, [fp, #-32]	; 0xffffffe0
   1b930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b934:	cmp	r3, #0
   1b938:	bne	1b944 <flatcc_verify_error_string@@Base+0x858>
   1b93c:	mov	r3, #14
   1b940:	b	1b9a0 <flatcc_verify_error_string@@Base+0x8b4>
   1b944:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b948:	ldr	r2, [r3, #16]
   1b94c:	ldr	r3, [fp, #-8]
   1b950:	add	r3, r2, r3
   1b954:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b958:	add	r3, r2, r3
   1b95c:	str	r3, [fp, #-20]	; 0xffffffec
   1b960:	ldrh	r3, [fp, #4]
   1b964:	sub	r3, r3, #1
   1b968:	mov	r2, r3
   1b96c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b970:	and	r3, r3, r2
   1b974:	cmp	r3, #0
   1b978:	moveq	r3, #1
   1b97c:	movne	r3, #0
   1b980:	uxtb	r3, r3
   1b984:	str	r3, [fp, #-36]	; 0xffffffdc
   1b988:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b98c:	cmp	r3, #0
   1b990:	bne	1b99c <flatcc_verify_error_string@@Base+0x8b0>
   1b994:	mov	r3, #12
   1b998:	b	1b9a0 <flatcc_verify_error_string@@Base+0x8b4>
   1b99c:	mov	r3, #0
   1b9a0:	mov	r0, r3
   1b9a4:	sub	sp, fp, #4
   1b9a8:	ldr	fp, [sp]
   1b9ac:	add	sp, sp, #4
   1b9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9b4:	str	fp, [sp, #-8]!
   1b9b8:	str	lr, [sp, #4]
   1b9bc:	add	fp, sp, #4
   1b9c0:	sub	sp, sp, #40	; 0x28
   1b9c4:	str	r0, [fp, #-32]	; 0xffffffe0
   1b9c8:	str	r2, [fp, #-40]	; 0xffffffd8
   1b9cc:	str	r3, [fp, #-44]	; 0xffffffd4
   1b9d0:	mov	r3, r1
   1b9d4:	strh	r3, [fp, #-34]	; 0xffffffde
   1b9d8:	ldrh	r3, [fp, #-34]	; 0xffffffde
   1b9dc:	mov	r1, r3
   1b9e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b9e4:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1b9e8:	mov	r3, r0
   1b9ec:	strh	r3, [fp, #-6]
   1b9f0:	ldrh	r3, [fp, #-6]
   1b9f4:	cmp	r3, #0
   1b9f8:	bne	1ba24 <flatcc_verify_error_string@@Base+0x938>
   1b9fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ba00:	mov	r2, #0
   1ba04:	str	r2, [r3]
   1ba08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ba0c:	cmp	r3, #0
   1ba10:	beq	1ba1c <flatcc_verify_error_string@@Base+0x930>
   1ba14:	mov	r3, #4
   1ba18:	b	1bae0 <flatcc_verify_error_string@@Base+0x9f4>
   1ba1c:	mov	r3, #0
   1ba20:	b	1bae0 <flatcc_verify_error_string@@Base+0x9f4>
   1ba24:	ldrh	r3, [fp, #-6]
   1ba28:	str	r3, [fp, #-12]
   1ba2c:	ldr	r3, [fp, #-12]
   1ba30:	add	r3, r3, #4
   1ba34:	str	r3, [fp, #-16]
   1ba38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ba3c:	ldrh	r3, [r3, #20]
   1ba40:	mov	r2, r3
   1ba44:	ldr	r3, [fp, #-16]
   1ba48:	cmp	r3, r2
   1ba4c:	movls	r3, #1
   1ba50:	movhi	r3, #0
   1ba54:	uxtb	r3, r3
   1ba58:	str	r3, [fp, #-20]	; 0xffffffec
   1ba5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba60:	cmp	r3, #0
   1ba64:	bne	1ba70 <flatcc_verify_error_string@@Base+0x984>
   1ba68:	mov	r3, #13
   1ba6c:	b	1bae0 <flatcc_verify_error_string@@Base+0x9f4>
   1ba70:	mov	r3, #1
   1ba74:	str	r3, [fp, #-24]	; 0xffffffe8
   1ba78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba7c:	cmp	r3, #0
   1ba80:	bne	1ba8c <flatcc_verify_error_string@@Base+0x9a0>
   1ba84:	mov	r3, #14
   1ba88:	b	1bae0 <flatcc_verify_error_string@@Base+0x9f4>
   1ba8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ba90:	ldr	r3, [r3, #16]
   1ba94:	ldr	r2, [fp, #-12]
   1ba98:	add	r3, r2, r3
   1ba9c:	str	r3, [fp, #-12]
   1baa0:	ldr	r3, [fp, #-12]
   1baa4:	and	r3, r3, #3
   1baa8:	cmp	r3, #0
   1baac:	moveq	r3, #1
   1bab0:	movne	r3, #0
   1bab4:	uxtb	r3, r3
   1bab8:	str	r3, [fp, #-28]	; 0xffffffe4
   1babc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bac0:	cmp	r3, #0
   1bac4:	bne	1bad0 <flatcc_verify_error_string@@Base+0x9e4>
   1bac8:	mov	r3, #12
   1bacc:	b	1bae0 <flatcc_verify_error_string@@Base+0x9f4>
   1bad0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1bad4:	ldr	r2, [fp, #-12]
   1bad8:	str	r2, [r3]
   1badc:	mov	r3, #0
   1bae0:	mov	r0, r3
   1bae4:	sub	sp, fp, #4
   1bae8:	ldr	fp, [sp]
   1baec:	add	sp, sp, #4
   1baf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1baf4:	str	fp, [sp, #-8]!
   1baf8:	str	lr, [sp, #4]
   1bafc:	add	fp, sp, #4
   1bb00:	sub	sp, sp, #32
   1bb04:	str	r0, [fp, #-24]	; 0xffffffe8
   1bb08:	str	r1, [fp, #-28]	; 0xffffffe4
   1bb0c:	str	r2, [fp, #-32]	; 0xffffffe0
   1bb10:	str	r3, [fp, #-36]	; 0xffffffdc
   1bb14:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bb18:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bb20:	bl	1b52c <flatcc_verify_error_string@@Base+0x440>
   1bb24:	str	r0, [fp, #-8]
   1bb28:	ldr	r3, [fp, #-8]
   1bb2c:	cmp	r3, #0
   1bb30:	bne	1bb3c <flatcc_verify_error_string@@Base+0xa50>
   1bb34:	mov	r3, #17
   1bb38:	b	1bbe8 <flatcc_verify_error_string@@Base+0xafc>
   1bb3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb44:	add	r3, r2, r3
   1bb48:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb4c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bb50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb54:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1bb58:	str	r0, [fp, #-12]
   1bb5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bb60:	add	r3, r3, #4
   1bb64:	str	r3, [fp, #-32]	; 0xffffffe0
   1bb68:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bb6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bb70:	sub	r2, r2, r3
   1bb74:	ldr	r3, [fp, #-12]
   1bb78:	add	r3, r3, #1
   1bb7c:	cmp	r2, r3
   1bb80:	movcs	r3, #1
   1bb84:	movcc	r3, #0
   1bb88:	uxtb	r3, r3
   1bb8c:	str	r3, [fp, #-16]
   1bb90:	ldr	r3, [fp, #-16]
   1bb94:	cmp	r3, #0
   1bb98:	bne	1bba4 <flatcc_verify_error_string@@Base+0xab8>
   1bb9c:	mov	r3, #8
   1bba0:	b	1bbe8 <flatcc_verify_error_string@@Base+0xafc>
   1bba4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bba8:	ldr	r3, [fp, #-12]
   1bbac:	add	r3, r2, r3
   1bbb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bbb4:	add	r3, r2, r3
   1bbb8:	ldrb	r3, [r3]
   1bbbc:	cmp	r3, #0
   1bbc0:	moveq	r3, #1
   1bbc4:	movne	r3, #0
   1bbc8:	uxtb	r3, r3
   1bbcc:	str	r3, [fp, #-20]	; 0xffffffec
   1bbd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbd4:	cmp	r3, #0
   1bbd8:	bne	1bbe4 <flatcc_verify_error_string@@Base+0xaf8>
   1bbdc:	mov	r3, #7
   1bbe0:	b	1bbe8 <flatcc_verify_error_string@@Base+0xafc>
   1bbe4:	mov	r3, #0
   1bbe8:	mov	r0, r3
   1bbec:	sub	sp, fp, #4
   1bbf0:	ldr	fp, [sp]
   1bbf4:	add	sp, sp, #4
   1bbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbfc:	str	fp, [sp, #-8]!
   1bc00:	str	lr, [sp, #4]
   1bc04:	add	fp, sp, #4
   1bc08:	sub	sp, sp, #32
   1bc0c:	str	r0, [fp, #-24]	; 0xffffffe8
   1bc10:	str	r1, [fp, #-28]	; 0xffffffe4
   1bc14:	str	r2, [fp, #-32]	; 0xffffffe0
   1bc18:	str	r3, [fp, #-36]	; 0xffffffdc
   1bc1c:	ldrh	r3, [fp, #8]
   1bc20:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bc24:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bc28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bc2c:	bl	1b5a4 <flatcc_verify_error_string@@Base+0x4b8>
   1bc30:	str	r0, [fp, #-8]
   1bc34:	ldr	r3, [fp, #-8]
   1bc38:	cmp	r3, #0
   1bc3c:	bne	1bc48 <flatcc_verify_error_string@@Base+0xb5c>
   1bc40:	mov	r3, #16
   1bc44:	b	1bce8 <flatcc_verify_error_string@@Base+0xbfc>
   1bc48:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bc4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bc50:	add	r3, r2, r3
   1bc54:	str	r3, [fp, #-32]	; 0xffffffe0
   1bc58:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bc5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bc60:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1bc64:	str	r0, [fp, #-12]
   1bc68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc6c:	add	r3, r3, #4
   1bc70:	str	r3, [fp, #-32]	; 0xffffffe0
   1bc74:	ldr	r2, [fp, #-12]
   1bc78:	ldr	r3, [fp, #12]
   1bc7c:	cmp	r2, r3
   1bc80:	movls	r3, #1
   1bc84:	movhi	r3, #0
   1bc88:	uxtb	r3, r3
   1bc8c:	str	r3, [fp, #-16]
   1bc90:	ldr	r3, [fp, #-16]
   1bc94:	cmp	r3, #0
   1bc98:	bne	1bca4 <flatcc_verify_error_string@@Base+0xbb8>
   1bc9c:	mov	r3, #25
   1bca0:	b	1bce8 <flatcc_verify_error_string@@Base+0xbfc>
   1bca4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bca8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bcac:	sub	r2, r2, r3
   1bcb0:	ldr	r3, [fp, #-12]
   1bcb4:	ldr	r1, [fp, #4]
   1bcb8:	mul	r3, r1, r3
   1bcbc:	cmp	r2, r3
   1bcc0:	movcs	r3, #1
   1bcc4:	movcc	r3, #0
   1bcc8:	uxtb	r3, r3
   1bccc:	str	r3, [fp, #-20]	; 0xffffffec
   1bcd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcd4:	cmp	r3, #0
   1bcd8:	bne	1bce4 <flatcc_verify_error_string@@Base+0xbf8>
   1bcdc:	mov	r3, #26
   1bce0:	b	1bce8 <flatcc_verify_error_string@@Base+0xbfc>
   1bce4:	mov	r3, #0
   1bce8:	mov	r0, r3
   1bcec:	sub	sp, fp, #4
   1bcf0:	ldr	fp, [sp]
   1bcf4:	add	sp, sp, #4
   1bcf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcfc:	str	fp, [sp, #-8]!
   1bd00:	str	lr, [sp, #4]
   1bd04:	add	fp, sp, #4
   1bd08:	sub	sp, sp, #40	; 0x28
   1bd0c:	str	r0, [fp, #-16]
   1bd10:	str	r1, [fp, #-20]	; 0xffffffec
   1bd14:	str	r2, [fp, #-24]	; 0xffffffe8
   1bd18:	str	r3, [fp, #-28]	; 0xffffffe4
   1bd1c:	mvn	r3, #-1073741824	; 0xc0000000
   1bd20:	str	r3, [sp, #8]
   1bd24:	mov	r3, #4
   1bd28:	str	r3, [sp, #4]
   1bd2c:	mov	r3, #4
   1bd30:	str	r3, [sp]
   1bd34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bd38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bd3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bd40:	ldr	r0, [fp, #-16]
   1bd44:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1bd48:	mov	r3, r0
   1bd4c:	cmp	r3, #0
   1bd50:	beq	1bd88 <flatcc_verify_error_string@@Base+0xc9c>
   1bd54:	mvn	r3, #-1073741824	; 0xc0000000
   1bd58:	str	r3, [sp, #8]
   1bd5c:	mov	r3, #4
   1bd60:	str	r3, [sp, #4]
   1bd64:	mov	r3, #4
   1bd68:	str	r3, [sp]
   1bd6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bd70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bd74:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bd78:	ldr	r0, [fp, #-16]
   1bd7c:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1bd80:	mov	r3, r0
   1bd84:	b	1be40 <flatcc_verify_error_string@@Base+0xd54>
   1bd88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bd8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bd90:	add	r3, r2, r3
   1bd94:	str	r3, [fp, #-24]	; 0xffffffe8
   1bd98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bd9c:	ldr	r0, [fp, #-16]
   1bda0:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1bda4:	str	r0, [fp, #-12]
   1bda8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bdac:	add	r3, r3, #4
   1bdb0:	str	r3, [fp, #-24]	; 0xffffffe8
   1bdb4:	mov	r3, #0
   1bdb8:	str	r3, [fp, #-8]
   1bdbc:	b	1be2c <flatcc_verify_error_string@@Base+0xd40>
   1bdc0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bdc4:	ldr	r0, [fp, #-16]
   1bdc8:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1bdcc:	mov	r3, r0
   1bdd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bdd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bdd8:	ldr	r0, [fp, #-16]
   1bddc:	bl	1baf4 <flatcc_verify_error_string@@Base+0xa08>
   1bde0:	mov	r3, r0
   1bde4:	cmp	r3, #0
   1bde8:	beq	1be14 <flatcc_verify_error_string@@Base+0xd28>
   1bdec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bdf0:	ldr	r0, [fp, #-16]
   1bdf4:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1bdf8:	mov	r3, r0
   1bdfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1be00:	ldr	r1, [fp, #-20]	; 0xffffffec
   1be04:	ldr	r0, [fp, #-16]
   1be08:	bl	1baf4 <flatcc_verify_error_string@@Base+0xa08>
   1be0c:	mov	r3, r0
   1be10:	b	1be40 <flatcc_verify_error_string@@Base+0xd54>
   1be14:	ldr	r3, [fp, #-8]
   1be18:	add	r3, r3, #1
   1be1c:	str	r3, [fp, #-8]
   1be20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be24:	add	r3, r3, #4
   1be28:	str	r3, [fp, #-24]	; 0xffffffe8
   1be2c:	ldr	r2, [fp, #-8]
   1be30:	ldr	r3, [fp, #-12]
   1be34:	cmp	r2, r3
   1be38:	bcc	1bdc0 <flatcc_verify_error_string@@Base+0xcd4>
   1be3c:	mov	r3, #0
   1be40:	mov	r0, r3
   1be44:	sub	sp, fp, #4
   1be48:	ldr	fp, [sp]
   1be4c:	add	sp, sp, #4
   1be50:	pop	{pc}		; (ldr pc, [sp], #4)
   1be54:	str	r4, [sp, #-12]!
   1be58:	str	fp, [sp, #4]
   1be5c:	str	lr, [sp, #8]
   1be60:	add	fp, sp, #8
   1be64:	sub	sp, sp, #84	; 0x54
   1be68:	str	r0, [fp, #-80]	; 0xffffffb0
   1be6c:	str	r1, [fp, #-84]	; 0xffffffac
   1be70:	str	r2, [fp, #-88]	; 0xffffffa8
   1be74:	str	r3, [fp, #-92]	; 0xffffffa4
   1be78:	ldr	r3, [fp, #4]
   1be7c:	sub	r3, r3, #1
   1be80:	str	r3, [fp, #-68]	; 0xffffffbc
   1be84:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1be88:	str	r3, [fp, #-16]
   1be8c:	ldr	r3, [fp, #-16]
   1be90:	cmp	r3, #0
   1be94:	bne	1bea0 <flatcc_verify_error_string@@Base+0xdb4>
   1be98:	mov	r3, #3
   1be9c:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bea0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1bea4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1bea8:	ldr	r0, [fp, #-84]	; 0xffffffac
   1beac:	bl	1b52c <flatcc_verify_error_string@@Base+0x440>
   1beb0:	str	r0, [fp, #-20]	; 0xffffffec
   1beb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1beb8:	cmp	r3, #0
   1bebc:	bne	1bec8 <flatcc_verify_error_string@@Base+0xddc>
   1bec0:	mov	r3, #15
   1bec4:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bec8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1becc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bed0:	add	r3, r2, r3
   1bed4:	str	r3, [fp, #-60]	; 0xffffffc4
   1bed8:	ldr	r4, [fp, #-60]	; 0xffffffc4
   1bedc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1bee0:	mov	r1, r3
   1bee4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1bee8:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1beec:	mov	r3, r0
   1bef0:	sub	r3, r4, r3
   1bef4:	str	r3, [fp, #-24]	; 0xffffffe8
   1bef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1befc:	cmp	r3, #0
   1bf00:	blt	1bf1c <flatcc_verify_error_string@@Base+0xe30>
   1bf04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf08:	and	r3, r3, #1
   1bf0c:	cmp	r3, #0
   1bf10:	bne	1bf1c <flatcc_verify_error_string@@Base+0xe30>
   1bf14:	mov	r3, #1
   1bf18:	b	1bf20 <flatcc_verify_error_string@@Base+0xe34>
   1bf1c:	mov	r3, #0
   1bf20:	str	r3, [fp, #-28]	; 0xffffffe4
   1bf24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf28:	cmp	r3, #0
   1bf2c:	bne	1bf38 <flatcc_verify_error_string@@Base+0xe4c>
   1bf30:	mov	r3, #29
   1bf34:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bf38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf3c:	add	r3, r3, #2
   1bf40:	ldr	r2, [fp, #-84]	; 0xffffffac
   1bf44:	cmp	r2, r3
   1bf48:	movcs	r3, #1
   1bf4c:	movcc	r3, #0
   1bf50:	uxtb	r3, r3
   1bf54:	str	r3, [fp, #-32]	; 0xffffffe0
   1bf58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf5c:	cmp	r3, #0
   1bf60:	bne	1bf6c <flatcc_verify_error_string@@Base+0xe80>
   1bf64:	mov	r3, #27
   1bf68:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bf6c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bf70:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1bf74:	bl	1b4e8 <flatcc_verify_error_string@@Base+0x3fc>
   1bf78:	mov	r3, r0
   1bf7c:	strh	r3, [fp, #-54]	; 0xffffffca
   1bf80:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1bf84:	mov	r2, r3
   1bf88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf8c:	add	r3, r3, r2
   1bf90:	str	r3, [fp, #-36]	; 0xffffffdc
   1bf94:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bf98:	ldr	r3, [fp, #-84]	; 0xffffffac
   1bf9c:	cmp	r2, r3
   1bfa0:	bhi	1bfbc <flatcc_verify_error_string@@Base+0xed0>
   1bfa4:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1bfa8:	and	r3, r3, #1
   1bfac:	cmp	r3, #0
   1bfb0:	bne	1bfbc <flatcc_verify_error_string@@Base+0xed0>
   1bfb4:	mov	r3, #1
   1bfb8:	b	1bfc0 <flatcc_verify_error_string@@Base+0xed4>
   1bfbc:	mov	r3, #0
   1bfc0:	str	r3, [fp, #-40]	; 0xffffffd8
   1bfc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1bfc8:	cmp	r3, #0
   1bfcc:	bne	1bfd8 <flatcc_verify_error_string@@Base+0xeec>
   1bfd0:	mov	r3, #30
   1bfd4:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bfd8:	mov	r3, #1
   1bfdc:	str	r3, [fp, #-44]	; 0xffffffd4
   1bfe0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1bfe4:	cmp	r3, #0
   1bfe8:	bne	1bff4 <flatcc_verify_error_string@@Base+0xf08>
   1bfec:	mov	r3, #31
   1bff0:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1bff4:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1bff8:	cmp	r3, #3
   1bffc:	movhi	r3, #1
   1c000:	movls	r3, #0
   1c004:	uxtb	r3, r3
   1c008:	str	r3, [fp, #-48]	; 0xffffffd0
   1c00c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c010:	cmp	r3, #0
   1c014:	bne	1c020 <flatcc_verify_error_string@@Base+0xf34>
   1c018:	mov	r3, #28
   1c01c:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1c020:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c024:	add	r3, r3, #2
   1c028:	mov	r1, r3
   1c02c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1c030:	bl	1b4e8 <flatcc_verify_error_string@@Base+0x3fc>
   1c034:	mov	r3, r0
   1c038:	strh	r3, [fp, #-56]	; 0xffffffc8
   1c03c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1c040:	ldr	r2, [fp, #-84]	; 0xffffffac
   1c044:	sub	r3, r2, r3
   1c048:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   1c04c:	cmp	r3, r2
   1c050:	movcs	r3, #1
   1c054:	movcc	r3, #0
   1c058:	uxtb	r3, r3
   1c05c:	str	r3, [fp, #-52]	; 0xffffffcc
   1c060:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c064:	cmp	r3, #0
   1c068:	bne	1c074 <flatcc_verify_error_string@@Base+0xf88>
   1c06c:	mov	r3, #20
   1c070:	b	1c0a8 <flatcc_verify_error_string@@Base+0xfbc>
   1c074:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1c078:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c07c:	add	r3, r2, r3
   1c080:	str	r3, [fp, #-64]	; 0xffffffc0
   1c084:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1c088:	str	r3, [fp, #-76]	; 0xffffffb4
   1c08c:	ldr	r3, [fp, #-84]	; 0xffffffac
   1c090:	str	r3, [fp, #-72]	; 0xffffffb8
   1c094:	sub	r2, fp, #76	; 0x4c
   1c098:	ldr	r3, [fp, #8]
   1c09c:	mov	r0, r2
   1c0a0:	blx	r3
   1c0a4:	mov	r3, r0
   1c0a8:	mov	r0, r3
   1c0ac:	sub	sp, fp, #8
   1c0b0:	ldr	r4, [sp]
   1c0b4:	ldr	fp, [sp, #4]
   1c0b8:	add	sp, sp, #8
   1c0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0c0:	str	fp, [sp, #-8]!
   1c0c4:	str	lr, [sp, #4]
   1c0c8:	add	fp, sp, #4
   1c0cc:	sub	sp, sp, #48	; 0x30
   1c0d0:	str	r0, [fp, #-24]	; 0xffffffe8
   1c0d4:	str	r1, [fp, #-28]	; 0xffffffe4
   1c0d8:	str	r2, [fp, #-32]	; 0xffffffe0
   1c0dc:	str	r3, [fp, #-36]	; 0xffffffdc
   1c0e0:	ldr	r3, [fp, #4]
   1c0e4:	sub	r2, r3, #1
   1c0e8:	str	r2, [fp, #4]
   1c0ec:	cmp	r3, #0
   1c0f0:	movgt	r3, #1
   1c0f4:	movle	r3, #0
   1c0f8:	uxtb	r3, r3
   1c0fc:	str	r3, [fp, #-12]
   1c100:	ldr	r3, [fp, #-12]
   1c104:	cmp	r3, #0
   1c108:	bne	1c114 <flatcc_verify_error_string@@Base+0x1028>
   1c10c:	mov	r3, #3
   1c110:	b	1c260 <flatcc_verify_error_string@@Base+0x1174>
   1c114:	mvn	r3, #-1073741824	; 0xc0000000
   1c118:	str	r3, [sp, #8]
   1c11c:	mov	r3, #4
   1c120:	str	r3, [sp, #4]
   1c124:	mov	r3, #4
   1c128:	str	r3, [sp]
   1c12c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c130:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c134:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c13c:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1c140:	mov	r3, r0
   1c144:	cmp	r3, #0
   1c148:	beq	1c180 <flatcc_verify_error_string@@Base+0x1094>
   1c14c:	mvn	r3, #-1073741824	; 0xc0000000
   1c150:	str	r3, [sp, #8]
   1c154:	mov	r3, #4
   1c158:	str	r3, [sp, #4]
   1c15c:	mov	r3, #4
   1c160:	str	r3, [sp]
   1c164:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c168:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c16c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c174:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1c178:	mov	r3, r0
   1c17c:	b	1c260 <flatcc_verify_error_string@@Base+0x1174>
   1c180:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c184:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c188:	add	r3, r2, r3
   1c18c:	str	r3, [fp, #-32]	; 0xffffffe0
   1c190:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c194:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c198:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c19c:	str	r0, [fp, #-16]
   1c1a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c1a4:	add	r3, r3, #4
   1c1a8:	str	r3, [fp, #-32]	; 0xffffffe0
   1c1ac:	mov	r3, #0
   1c1b0:	str	r3, [fp, #-8]
   1c1b4:	b	1c24c <flatcc_verify_error_string@@Base+0x1160>
   1c1b8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c1bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c1c0:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c1c4:	mov	r2, r0
   1c1c8:	ldr	r3, [fp, #8]
   1c1cc:	str	r3, [sp, #4]
   1c1d0:	ldr	r3, [fp, #4]
   1c1d4:	str	r3, [sp]
   1c1d8:	mov	r3, r2
   1c1dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c1e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c1e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c1e8:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1c1ec:	mov	r3, r0
   1c1f0:	cmp	r3, #0
   1c1f4:	beq	1c234 <flatcc_verify_error_string@@Base+0x1148>
   1c1f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c1fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c200:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c204:	mov	r2, r0
   1c208:	ldr	r3, [fp, #8]
   1c20c:	str	r3, [sp, #4]
   1c210:	ldr	r3, [fp, #4]
   1c214:	str	r3, [sp]
   1c218:	mov	r3, r2
   1c21c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c220:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c224:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c228:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1c22c:	mov	r3, r0
   1c230:	b	1c260 <flatcc_verify_error_string@@Base+0x1174>
   1c234:	ldr	r3, [fp, #-8]
   1c238:	add	r3, r3, #1
   1c23c:	str	r3, [fp, #-8]
   1c240:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c244:	add	r3, r3, #4
   1c248:	str	r3, [fp, #-32]	; 0xffffffe0
   1c24c:	ldr	r2, [fp, #-8]
   1c250:	ldr	r3, [fp, #-16]
   1c254:	cmp	r2, r3
   1c258:	bcc	1c1b8 <flatcc_verify_error_string@@Base+0x10cc>
   1c25c:	mov	r3, #0
   1c260:	mov	r0, r3
   1c264:	sub	sp, fp, #4
   1c268:	ldr	fp, [sp]
   1c26c:	add	sp, sp, #4
   1c270:	pop	{pc}		; (ldr pc, [sp], #4)
   1c274:	str	fp, [sp, #-8]!
   1c278:	str	lr, [sp, #4]
   1c27c:	add	fp, sp, #4
   1c280:	sub	sp, sp, #88	; 0x58
   1c284:	str	r0, [fp, #-64]	; 0xffffffc0
   1c288:	str	r1, [fp, #-68]	; 0xffffffbc
   1c28c:	str	r2, [fp, #-72]	; 0xffffffb8
   1c290:	str	r3, [fp, #-76]	; 0xffffffb4
   1c294:	ldr	r3, [fp, #12]
   1c298:	sub	r2, r3, #1
   1c29c:	str	r2, [fp, #12]
   1c2a0:	cmp	r3, #0
   1c2a4:	movgt	r3, #1
   1c2a8:	movle	r3, #0
   1c2ac:	uxtb	r3, r3
   1c2b0:	str	r3, [fp, #-12]
   1c2b4:	ldr	r3, [fp, #-12]
   1c2b8:	cmp	r3, #0
   1c2bc:	bne	1c2c8 <flatcc_verify_error_string@@Base+0x11dc>
   1c2c0:	mov	r3, #3
   1c2c4:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c2c8:	mvn	r3, #-1073741824	; 0xc0000000
   1c2cc:	str	r3, [sp, #8]
   1c2d0:	mov	r3, #4
   1c2d4:	str	r3, [sp, #4]
   1c2d8:	mov	r3, #4
   1c2dc:	str	r3, [sp]
   1c2e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c2e4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c2e8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1c2ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c2f0:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1c2f4:	mov	r3, r0
   1c2f8:	cmp	r3, #0
   1c2fc:	beq	1c334 <flatcc_verify_error_string@@Base+0x1248>
   1c300:	mvn	r3, #-1073741824	; 0xc0000000
   1c304:	str	r3, [sp, #8]
   1c308:	mov	r3, #4
   1c30c:	str	r3, [sp, #4]
   1c310:	mov	r3, #4
   1c314:	str	r3, [sp]
   1c318:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c31c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c320:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1c324:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c328:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1c32c:	mov	r3, r0
   1c330:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c334:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c338:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c33c:	add	r3, r2, r3
   1c340:	str	r3, [fp, #-72]	; 0xffffffb8
   1c344:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c348:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c34c:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c350:	str	r0, [fp, #-16]
   1c354:	ldr	r2, [fp, #-16]
   1c358:	ldr	r3, [fp, #4]
   1c35c:	cmp	r2, r3
   1c360:	moveq	r3, #1
   1c364:	movne	r3, #0
   1c368:	uxtb	r3, r3
   1c36c:	str	r3, [fp, #-20]	; 0xffffffec
   1c370:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c374:	cmp	r3, #0
   1c378:	bne	1c384 <flatcc_verify_error_string@@Base+0x1298>
   1c37c:	mov	r3, #34	; 0x22
   1c380:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c384:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c388:	add	r3, r3, #4
   1c38c:	str	r3, [fp, #-72]	; 0xffffffb8
   1c390:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c394:	str	r3, [fp, #-56]	; 0xffffffc8
   1c398:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1c39c:	str	r3, [fp, #-52]	; 0xffffffcc
   1c3a0:	ldr	r3, [fp, #12]
   1c3a4:	str	r3, [fp, #-48]	; 0xffffffd0
   1c3a8:	mov	r3, #0
   1c3ac:	str	r3, [fp, #-8]
   1c3b0:	b	1c4b0 <flatcc_verify_error_string@@Base+0x13c4>
   1c3b4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c3b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c3bc:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c3c0:	str	r0, [fp, #-24]	; 0xffffffe8
   1c3c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c3c8:	cmp	r3, #0
   1c3cc:	bne	1c408 <flatcc_verify_error_string@@Base+0x131c>
   1c3d0:	ldr	r2, [fp, #8]
   1c3d4:	ldr	r3, [fp, #-8]
   1c3d8:	add	r3, r2, r3
   1c3dc:	ldrb	r3, [r3]
   1c3e0:	cmp	r3, #0
   1c3e4:	moveq	r3, #1
   1c3e8:	movne	r3, #0
   1c3ec:	uxtb	r3, r3
   1c3f0:	str	r3, [fp, #-28]	; 0xffffffe4
   1c3f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c3f8:	cmp	r3, #0
   1c3fc:	bne	1c498 <flatcc_verify_error_string@@Base+0x13ac>
   1c400:	mov	r3, #32
   1c404:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c408:	ldr	r2, [fp, #8]
   1c40c:	ldr	r3, [fp, #-8]
   1c410:	add	r3, r2, r3
   1c414:	ldrb	r3, [r3]
   1c418:	cmp	r3, #0
   1c41c:	movne	r3, #1
   1c420:	moveq	r3, #0
   1c424:	uxtb	r3, r3
   1c428:	str	r3, [fp, #-32]	; 0xffffffe0
   1c42c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c430:	cmp	r3, #0
   1c434:	bne	1c440 <flatcc_verify_error_string@@Base+0x1354>
   1c438:	mov	r3, #33	; 0x21
   1c43c:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c440:	ldr	r2, [fp, #8]
   1c444:	ldr	r3, [fp, #-8]
   1c448:	add	r3, r2, r3
   1c44c:	ldrb	r3, [r3]
   1c450:	strb	r3, [fp, #-44]	; 0xffffffd4
   1c454:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c458:	str	r3, [fp, #-40]	; 0xffffffd8
   1c45c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c460:	str	r3, [fp, #-36]	; 0xffffffdc
   1c464:	sub	r2, fp, #56	; 0x38
   1c468:	ldr	r3, [fp, #16]
   1c46c:	mov	r0, r2
   1c470:	blx	r3
   1c474:	mov	r3, r0
   1c478:	cmp	r3, #0
   1c47c:	beq	1c498 <flatcc_verify_error_string@@Base+0x13ac>
   1c480:	sub	r2, fp, #56	; 0x38
   1c484:	ldr	r3, [fp, #16]
   1c488:	mov	r0, r2
   1c48c:	blx	r3
   1c490:	mov	r3, r0
   1c494:	b	1c4c4 <flatcc_verify_error_string@@Base+0x13d8>
   1c498:	ldr	r3, [fp, #-8]
   1c49c:	add	r3, r3, #1
   1c4a0:	str	r3, [fp, #-8]
   1c4a4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c4a8:	add	r3, r3, #4
   1c4ac:	str	r3, [fp, #-72]	; 0xffffffb8
   1c4b0:	ldr	r2, [fp, #-8]
   1c4b4:	ldr	r3, [fp, #-16]
   1c4b8:	cmp	r2, r3
   1c4bc:	bcc	1c3b4 <flatcc_verify_error_string@@Base+0x12c8>
   1c4c0:	mov	r3, #0
   1c4c4:	mov	r0, r3
   1c4c8:	sub	sp, fp, #4
   1c4cc:	ldr	fp, [sp]
   1c4d0:	add	sp, sp, #4
   1c4d4:	pop	{pc}		; (ldr pc, [sp], #4)

0001c4d8 <flatcc_verify_field@@Base>:
   1c4d8:	str	fp, [sp, #-8]!
   1c4dc:	str	lr, [sp, #4]
   1c4e0:	add	fp, sp, #4
   1c4e4:	sub	sp, sp, #24
   1c4e8:	str	r0, [fp, #-8]
   1c4ec:	str	r2, [fp, #-16]
   1c4f0:	mov	r2, r3
   1c4f4:	mov	r3, r1
   1c4f8:	strh	r3, [fp, #-10]
   1c4fc:	mov	r3, r2
   1c500:	strh	r3, [fp, #-12]
   1c504:	ldrh	r1, [fp, #-10]
   1c508:	ldrh	r3, [fp, #-12]
   1c50c:	str	r3, [sp]
   1c510:	ldr	r3, [fp, #-16]
   1c514:	mov	r2, #0
   1c518:	ldr	r0, [fp, #-8]
   1c51c:	bl	1b850 <flatcc_verify_error_string@@Base+0x764>
   1c520:	mov	r3, r0
   1c524:	cmp	r3, #0
   1c528:	beq	1c550 <flatcc_verify_field@@Base+0x78>
   1c52c:	ldrh	r1, [fp, #-10]
   1c530:	ldrh	r3, [fp, #-12]
   1c534:	str	r3, [sp]
   1c538:	ldr	r3, [fp, #-16]
   1c53c:	mov	r2, #0
   1c540:	ldr	r0, [fp, #-8]
   1c544:	bl	1b850 <flatcc_verify_error_string@@Base+0x764>
   1c548:	mov	r3, r0
   1c54c:	b	1c554 <flatcc_verify_field@@Base+0x7c>
   1c550:	mov	r3, #0
   1c554:	mov	r0, r3
   1c558:	sub	sp, fp, #4
   1c55c:	ldr	fp, [sp]
   1c560:	add	sp, sp, #4
   1c564:	pop	{pc}		; (ldr pc, [sp], #4)

0001c568 <flatcc_verify_string_field@@Base>:
   1c568:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c56c:	str	r6, [sp, #8]
   1c570:	str	fp, [sp, #12]
   1c574:	str	lr, [sp, #16]
   1c578:	add	fp, sp, #16
   1c57c:	sub	sp, sp, #28
   1c580:	str	r0, [fp, #-32]	; 0xffffffe0
   1c584:	mov	r3, r1
   1c588:	str	r2, [fp, #-40]	; 0xffffffd8
   1c58c:	strh	r3, [fp, #-34]	; 0xffffffde
   1c590:	sub	r3, fp, #28
   1c594:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c598:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c59c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c5a0:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1c5a4:	str	r0, [fp, #-24]	; 0xffffffe8
   1c5a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c5ac:	cmp	r3, #0
   1c5b0:	bne	1c5c0 <flatcc_verify_string_field@@Base+0x58>
   1c5b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c5b8:	cmp	r3, #0
   1c5bc:	bne	1c5c8 <flatcc_verify_string_field@@Base+0x60>
   1c5c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c5c4:	b	1c60c <flatcc_verify_string_field@@Base+0xa4>
   1c5c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5cc:	ldr	r4, [r3]
   1c5d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5d4:	ldr	r5, [r3, #4]
   1c5d8:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c5dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5e0:	ldr	r3, [r3]
   1c5e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c5e8:	mov	r1, r2
   1c5ec:	mov	r0, r3
   1c5f0:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c5f4:	mov	r3, r0
   1c5f8:	mov	r2, r6
   1c5fc:	mov	r1, r5
   1c600:	mov	r0, r4
   1c604:	bl	1baf4 <flatcc_verify_error_string@@Base+0xa08>
   1c608:	mov	r3, r0
   1c60c:	mov	r0, r3
   1c610:	sub	sp, fp, #16
   1c614:	ldrd	r4, [sp]
   1c618:	ldr	r6, [sp, #8]
   1c61c:	ldr	fp, [sp, #12]
   1c620:	add	sp, sp, #16
   1c624:	pop	{pc}		; (ldr pc, [sp], #4)

0001c628 <flatcc_verify_vector_field@@Base>:
   1c628:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c62c:	str	r6, [sp, #8]
   1c630:	str	fp, [sp, #12]
   1c634:	str	lr, [sp, #16]
   1c638:	add	fp, sp, #16
   1c63c:	sub	sp, sp, #44	; 0x2c
   1c640:	str	r0, [fp, #-32]	; 0xffffffe0
   1c644:	str	r2, [fp, #-40]	; 0xffffffd8
   1c648:	str	r3, [fp, #-44]	; 0xffffffd4
   1c64c:	mov	r3, r1
   1c650:	strh	r3, [fp, #-34]	; 0xffffffde
   1c654:	sub	r3, fp, #28
   1c658:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c65c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c660:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c664:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1c668:	str	r0, [fp, #-24]	; 0xffffffe8
   1c66c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c670:	cmp	r3, #0
   1c674:	bne	1c684 <flatcc_verify_vector_field@@Base+0x5c>
   1c678:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c67c:	cmp	r3, #0
   1c680:	bne	1c68c <flatcc_verify_vector_field@@Base+0x64>
   1c684:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c688:	b	1c6ec <flatcc_verify_vector_field@@Base+0xc4>
   1c68c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c690:	ldr	r4, [r3]
   1c694:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c698:	ldr	r5, [r3, #4]
   1c69c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c6a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c6a4:	ldr	r3, [r3]
   1c6a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c6ac:	mov	r1, r2
   1c6b0:	mov	r0, r3
   1c6b4:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c6b8:	mov	r2, r0
   1c6bc:	ldr	r3, [fp, #8]
   1c6c0:	str	r3, [sp, #8]
   1c6c4:	ldrh	r3, [fp, #4]
   1c6c8:	str	r3, [sp, #4]
   1c6cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c6d0:	str	r3, [sp]
   1c6d4:	mov	r3, r2
   1c6d8:	mov	r2, r6
   1c6dc:	mov	r1, r5
   1c6e0:	mov	r0, r4
   1c6e4:	bl	1bbfc <flatcc_verify_error_string@@Base+0xb10>
   1c6e8:	mov	r3, r0
   1c6ec:	mov	r0, r3
   1c6f0:	sub	sp, fp, #16
   1c6f4:	ldrd	r4, [sp]
   1c6f8:	ldr	r6, [sp, #8]
   1c6fc:	ldr	fp, [sp, #12]
   1c700:	add	sp, sp, #16
   1c704:	pop	{pc}		; (ldr pc, [sp], #4)

0001c708 <flatcc_verify_string_vector_field@@Base>:
   1c708:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c70c:	str	r6, [sp, #8]
   1c710:	str	fp, [sp, #12]
   1c714:	str	lr, [sp, #16]
   1c718:	add	fp, sp, #16
   1c71c:	sub	sp, sp, #28
   1c720:	str	r0, [fp, #-32]	; 0xffffffe0
   1c724:	mov	r3, r1
   1c728:	str	r2, [fp, #-40]	; 0xffffffd8
   1c72c:	strh	r3, [fp, #-34]	; 0xffffffde
   1c730:	sub	r3, fp, #28
   1c734:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c738:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c73c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c740:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1c744:	str	r0, [fp, #-24]	; 0xffffffe8
   1c748:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c74c:	cmp	r3, #0
   1c750:	bne	1c760 <flatcc_verify_string_vector_field@@Base+0x58>
   1c754:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c758:	cmp	r3, #0
   1c75c:	bne	1c768 <flatcc_verify_string_vector_field@@Base+0x60>
   1c760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c764:	b	1c7ac <flatcc_verify_string_vector_field@@Base+0xa4>
   1c768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c76c:	ldr	r4, [r3]
   1c770:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c774:	ldr	r5, [r3, #4]
   1c778:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c77c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c780:	ldr	r3, [r3]
   1c784:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c788:	mov	r1, r2
   1c78c:	mov	r0, r3
   1c790:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c794:	mov	r3, r0
   1c798:	mov	r2, r6
   1c79c:	mov	r1, r5
   1c7a0:	mov	r0, r4
   1c7a4:	bl	1bcfc <flatcc_verify_error_string@@Base+0xc10>
   1c7a8:	mov	r3, r0
   1c7ac:	mov	r0, r3
   1c7b0:	sub	sp, fp, #16
   1c7b4:	ldrd	r4, [sp]
   1c7b8:	ldr	r6, [sp, #8]
   1c7bc:	ldr	fp, [sp, #12]
   1c7c0:	add	sp, sp, #16
   1c7c4:	pop	{pc}		; (ldr pc, [sp], #4)

0001c7c8 <flatcc_verify_table_field@@Base>:
   1c7c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c7cc:	str	r6, [sp, #8]
   1c7d0:	str	fp, [sp, #12]
   1c7d4:	str	lr, [sp, #16]
   1c7d8:	add	fp, sp, #16
   1c7dc:	sub	sp, sp, #36	; 0x24
   1c7e0:	str	r0, [fp, #-32]	; 0xffffffe0
   1c7e4:	str	r2, [fp, #-40]	; 0xffffffd8
   1c7e8:	str	r3, [fp, #-44]	; 0xffffffd4
   1c7ec:	mov	r3, r1
   1c7f0:	strh	r3, [fp, #-34]	; 0xffffffde
   1c7f4:	sub	r3, fp, #28
   1c7f8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c7fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c800:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c804:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1c808:	str	r0, [fp, #-24]	; 0xffffffe8
   1c80c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c810:	cmp	r3, #0
   1c814:	bne	1c824 <flatcc_verify_table_field@@Base+0x5c>
   1c818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c81c:	cmp	r3, #0
   1c820:	bne	1c82c <flatcc_verify_table_field@@Base+0x64>
   1c824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c828:	b	1c888 <flatcc_verify_table_field@@Base+0xc0>
   1c82c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c830:	ldr	r4, [r3]
   1c834:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c838:	ldr	r5, [r3, #4]
   1c83c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c840:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c844:	ldr	r3, [r3]
   1c848:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c84c:	mov	r1, r2
   1c850:	mov	r0, r3
   1c854:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c858:	mov	r1, r0
   1c85c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c860:	ldr	r3, [r3, #8]
   1c864:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c868:	str	r2, [sp, #4]
   1c86c:	str	r3, [sp]
   1c870:	mov	r3, r1
   1c874:	mov	r2, r6
   1c878:	mov	r1, r5
   1c87c:	mov	r0, r4
   1c880:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1c884:	mov	r3, r0
   1c888:	mov	r0, r3
   1c88c:	sub	sp, fp, #16
   1c890:	ldrd	r4, [sp]
   1c894:	ldr	r6, [sp, #8]
   1c898:	ldr	fp, [sp, #12]
   1c89c:	add	sp, sp, #16
   1c8a0:	pop	{pc}		; (ldr pc, [sp], #4)

0001c8a4 <flatcc_verify_table_vector_field@@Base>:
   1c8a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c8a8:	str	r6, [sp, #8]
   1c8ac:	str	fp, [sp, #12]
   1c8b0:	str	lr, [sp, #16]
   1c8b4:	add	fp, sp, #16
   1c8b8:	sub	sp, sp, #36	; 0x24
   1c8bc:	str	r0, [fp, #-32]	; 0xffffffe0
   1c8c0:	str	r2, [fp, #-40]	; 0xffffffd8
   1c8c4:	str	r3, [fp, #-44]	; 0xffffffd4
   1c8c8:	mov	r3, r1
   1c8cc:	strh	r3, [fp, #-34]	; 0xffffffde
   1c8d0:	sub	r3, fp, #28
   1c8d4:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1c8d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c8dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c8e0:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1c8e4:	str	r0, [fp, #-24]	; 0xffffffe8
   1c8e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8ec:	cmp	r3, #0
   1c8f0:	bne	1c900 <flatcc_verify_table_vector_field@@Base+0x5c>
   1c8f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c8f8:	cmp	r3, #0
   1c8fc:	bne	1c908 <flatcc_verify_table_vector_field@@Base+0x64>
   1c900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c904:	b	1c964 <flatcc_verify_table_vector_field@@Base+0xc0>
   1c908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c90c:	ldr	r4, [r3]
   1c910:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c914:	ldr	r5, [r3, #4]
   1c918:	ldr	r6, [fp, #-28]	; 0xffffffe4
   1c91c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c920:	ldr	r3, [r3]
   1c924:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c928:	mov	r1, r2
   1c92c:	mov	r0, r3
   1c930:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1c934:	mov	r1, r0
   1c938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c93c:	ldr	r3, [r3, #8]
   1c940:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c944:	str	r2, [sp, #4]
   1c948:	str	r3, [sp]
   1c94c:	mov	r3, r1
   1c950:	mov	r2, r6
   1c954:	mov	r1, r5
   1c958:	mov	r0, r4
   1c95c:	bl	1c0c0 <flatcc_verify_error_string@@Base+0xfd4>
   1c960:	mov	r3, r0
   1c964:	mov	r0, r3
   1c968:	sub	sp, fp, #16
   1c96c:	ldrd	r4, [sp]
   1c970:	ldr	r6, [sp, #8]
   1c974:	ldr	fp, [sp, #12]
   1c978:	add	sp, sp, #16
   1c97c:	pop	{pc}		; (ldr pc, [sp], #4)

0001c980 <flatcc_verify_union_table@@Base>:
   1c980:	str	fp, [sp, #-8]!
   1c984:	str	lr, [sp, #4]
   1c988:	add	fp, sp, #4
   1c98c:	sub	sp, sp, #16
   1c990:	str	r0, [fp, #-8]
   1c994:	str	r1, [fp, #-12]
   1c998:	ldr	r3, [fp, #-8]
   1c99c:	ldr	r0, [r3]
   1c9a0:	ldr	r3, [fp, #-8]
   1c9a4:	ldr	r1, [r3, #4]
   1c9a8:	ldr	r3, [fp, #-8]
   1c9ac:	ldr	ip, [r3, #16]
   1c9b0:	ldr	r3, [fp, #-8]
   1c9b4:	ldr	lr, [r3, #20]
   1c9b8:	ldr	r3, [fp, #-8]
   1c9bc:	ldr	r3, [r3, #8]
   1c9c0:	ldr	r2, [fp, #-12]
   1c9c4:	str	r2, [sp, #4]
   1c9c8:	str	r3, [sp]
   1c9cc:	mov	r3, lr
   1c9d0:	mov	r2, ip
   1c9d4:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1c9d8:	mov	r3, r0
   1c9dc:	mov	r0, r3
   1c9e0:	sub	sp, fp, #4
   1c9e4:	ldr	fp, [sp]
   1c9e8:	add	sp, sp, #4
   1c9ec:	pop	{pc}		; (ldr pc, [sp], #4)

0001c9f0 <flatcc_verify_union_struct@@Base>:
   1c9f0:	str	fp, [sp, #-8]!
   1c9f4:	str	lr, [sp, #4]
   1c9f8:	add	fp, sp, #4
   1c9fc:	sub	sp, sp, #24
   1ca00:	str	r0, [fp, #-8]
   1ca04:	str	r1, [fp, #-12]
   1ca08:	mov	r3, r2
   1ca0c:	strh	r3, [fp, #-14]
   1ca10:	ldr	r3, [fp, #-8]
   1ca14:	ldr	r0, [r3, #4]
   1ca18:	ldr	r3, [fp, #-8]
   1ca1c:	ldr	r1, [r3, #16]
   1ca20:	ldr	r3, [fp, #-8]
   1ca24:	ldr	r2, [r3, #20]
   1ca28:	ldrh	r3, [fp, #-14]
   1ca2c:	str	r3, [sp]
   1ca30:	ldr	r3, [fp, #-12]
   1ca34:	bl	1b644 <flatcc_verify_error_string@@Base+0x558>
   1ca38:	mov	r3, r0
   1ca3c:	mov	r0, r3
   1ca40:	sub	sp, fp, #4
   1ca44:	ldr	fp, [sp]
   1ca48:	add	sp, sp, #4
   1ca4c:	pop	{pc}		; (ldr pc, [sp], #4)

0001ca50 <flatcc_verify_union_string@@Base>:
   1ca50:	str	fp, [sp, #-8]!
   1ca54:	str	lr, [sp, #4]
   1ca58:	add	fp, sp, #4
   1ca5c:	sub	sp, sp, #8
   1ca60:	str	r0, [fp, #-8]
   1ca64:	ldr	r3, [fp, #-8]
   1ca68:	ldr	r0, [r3]
   1ca6c:	ldr	r3, [fp, #-8]
   1ca70:	ldr	r1, [r3, #4]
   1ca74:	ldr	r3, [fp, #-8]
   1ca78:	ldr	r2, [r3, #16]
   1ca7c:	ldr	r3, [fp, #-8]
   1ca80:	ldr	r3, [r3, #20]
   1ca84:	bl	1baf4 <flatcc_verify_error_string@@Base+0xa08>
   1ca88:	mov	r3, r0
   1ca8c:	mov	r0, r3
   1ca90:	sub	sp, fp, #4
   1ca94:	ldr	fp, [sp]
   1ca98:	add	sp, sp, #4
   1ca9c:	pop	{pc}		; (ldr pc, [sp], #4)

0001caa0 <flatcc_verify_buffer_header@@Base>:
   1caa0:	str	fp, [sp, #-8]!
   1caa4:	str	lr, [sp, #4]
   1caa8:	add	fp, sp, #4
   1caac:	sub	sp, sp, #40	; 0x28
   1cab0:	str	r0, [fp, #-32]	; 0xffffffe0
   1cab4:	str	r1, [fp, #-36]	; 0xffffffdc
   1cab8:	str	r2, [fp, #-40]	; 0xffffffd8
   1cabc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cac0:	and	r3, r3, #3
   1cac4:	cmp	r3, #0
   1cac8:	moveq	r3, #1
   1cacc:	movne	r3, #0
   1cad0:	uxtb	r3, r3
   1cad4:	str	r3, [fp, #-8]
   1cad8:	ldr	r3, [fp, #-8]
   1cadc:	cmp	r3, #0
   1cae0:	bne	1caec <flatcc_verify_buffer_header@@Base+0x4c>
   1cae4:	mov	r3, #5
   1cae8:	b	1cbb0 <flatcc_verify_buffer_header@@Base+0x110>
   1caec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1caf0:	cmn	r3, #9
   1caf4:	movls	r3, #1
   1caf8:	movhi	r3, #0
   1cafc:	uxtb	r3, r3
   1cb00:	str	r3, [fp, #-12]
   1cb04:	ldr	r3, [fp, #-12]
   1cb08:	cmp	r3, #0
   1cb0c:	bne	1cb18 <flatcc_verify_buffer_header@@Base+0x78>
   1cb10:	mov	r3, #6
   1cb14:	b	1cbb0 <flatcc_verify_buffer_header@@Base+0x110>
   1cb18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1cb1c:	cmp	r3, #7
   1cb20:	movhi	r3, #1
   1cb24:	movls	r3, #0
   1cb28:	uxtb	r3, r3
   1cb2c:	str	r3, [fp, #-16]
   1cb30:	ldr	r3, [fp, #-16]
   1cb34:	cmp	r3, #0
   1cb38:	bne	1cb44 <flatcc_verify_buffer_header@@Base+0xa4>
   1cb3c:	mov	r3, #1
   1cb40:	b	1cbb0 <flatcc_verify_buffer_header@@Base+0x110>
   1cb44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1cb48:	cmp	r3, #0
   1cb4c:	beq	1cbac <flatcc_verify_buffer_header@@Base+0x10c>
   1cb50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cb54:	bl	1b450 <flatcc_verify_error_string@@Base+0x364>
   1cb58:	str	r0, [fp, #-20]	; 0xffffffec
   1cb5c:	mov	r1, #4
   1cb60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cb64:	bl	1b4a4 <flatcc_verify_error_string@@Base+0x3b8>
   1cb68:	str	r0, [fp, #-24]	; 0xffffffe8
   1cb6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cb70:	cmp	r3, #0
   1cb74:	beq	1cb88 <flatcc_verify_buffer_header@@Base+0xe8>
   1cb78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cb7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cb80:	cmp	r2, r3
   1cb84:	bne	1cb90 <flatcc_verify_buffer_header@@Base+0xf0>
   1cb88:	mov	r3, #1
   1cb8c:	b	1cb94 <flatcc_verify_buffer_header@@Base+0xf4>
   1cb90:	mov	r3, #0
   1cb94:	str	r3, [fp, #-28]	; 0xffffffe4
   1cb98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cb9c:	cmp	r3, #0
   1cba0:	bne	1cbac <flatcc_verify_buffer_header@@Base+0x10c>
   1cba4:	mov	r3, #2
   1cba8:	b	1cbb0 <flatcc_verify_buffer_header@@Base+0x110>
   1cbac:	mov	r3, #0
   1cbb0:	mov	r0, r3
   1cbb4:	sub	sp, fp, #4
   1cbb8:	ldr	fp, [sp]
   1cbbc:	add	sp, sp, #4
   1cbc0:	pop	{pc}		; (ldr pc, [sp], #4)

0001cbc4 <flatcc_verify_typed_buffer_header@@Base>:
   1cbc4:	str	fp, [sp, #-8]!
   1cbc8:	str	lr, [sp, #4]
   1cbcc:	add	fp, sp, #4
   1cbd0:	sub	sp, sp, #40	; 0x28
   1cbd4:	str	r0, [fp, #-32]	; 0xffffffe0
   1cbd8:	str	r1, [fp, #-36]	; 0xffffffdc
   1cbdc:	str	r2, [fp, #-40]	; 0xffffffd8
   1cbe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cbe4:	and	r3, r3, #3
   1cbe8:	cmp	r3, #0
   1cbec:	moveq	r3, #1
   1cbf0:	movne	r3, #0
   1cbf4:	uxtb	r3, r3
   1cbf8:	str	r3, [fp, #-8]
   1cbfc:	ldr	r3, [fp, #-8]
   1cc00:	cmp	r3, #0
   1cc04:	bne	1cc10 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   1cc08:	mov	r3, #5
   1cc0c:	b	1ccd0 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   1cc10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1cc14:	cmn	r3, #9
   1cc18:	movls	r3, #1
   1cc1c:	movhi	r3, #0
   1cc20:	uxtb	r3, r3
   1cc24:	str	r3, [fp, #-12]
   1cc28:	ldr	r3, [fp, #-12]
   1cc2c:	cmp	r3, #0
   1cc30:	bne	1cc3c <flatcc_verify_typed_buffer_header@@Base+0x78>
   1cc34:	mov	r3, #6
   1cc38:	b	1ccd0 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   1cc3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1cc40:	cmp	r3, #7
   1cc44:	movhi	r3, #1
   1cc48:	movls	r3, #0
   1cc4c:	uxtb	r3, r3
   1cc50:	str	r3, [fp, #-16]
   1cc54:	ldr	r3, [fp, #-16]
   1cc58:	cmp	r3, #0
   1cc5c:	bne	1cc68 <flatcc_verify_typed_buffer_header@@Base+0xa4>
   1cc60:	mov	r3, #1
   1cc64:	b	1ccd0 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   1cc68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1cc6c:	cmp	r3, #0
   1cc70:	beq	1cccc <flatcc_verify_typed_buffer_header@@Base+0x108>
   1cc74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1cc78:	str	r3, [fp, #-20]	; 0xffffffec
   1cc7c:	mov	r1, #4
   1cc80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cc84:	bl	1b4a4 <flatcc_verify_error_string@@Base+0x3b8>
   1cc88:	str	r0, [fp, #-24]	; 0xffffffe8
   1cc8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc90:	cmp	r3, #0
   1cc94:	beq	1cca8 <flatcc_verify_typed_buffer_header@@Base+0xe4>
   1cc98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cc9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cca0:	cmp	r2, r3
   1cca4:	bne	1ccb0 <flatcc_verify_typed_buffer_header@@Base+0xec>
   1cca8:	mov	r3, #1
   1ccac:	b	1ccb4 <flatcc_verify_typed_buffer_header@@Base+0xf0>
   1ccb0:	mov	r3, #0
   1ccb4:	str	r3, [fp, #-28]	; 0xffffffe4
   1ccb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ccbc:	cmp	r3, #0
   1ccc0:	bne	1cccc <flatcc_verify_typed_buffer_header@@Base+0x108>
   1ccc4:	mov	r3, #2
   1ccc8:	b	1ccd0 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   1cccc:	mov	r3, #0
   1ccd0:	mov	r0, r3
   1ccd4:	sub	sp, fp, #4
   1ccd8:	ldr	fp, [sp]
   1ccdc:	add	sp, sp, #4
   1cce0:	pop	{pc}		; (ldr pc, [sp], #4)

0001cce4 <flatcc_verify_struct_as_root@@Base>:
   1cce4:	str	fp, [sp, #-8]!
   1cce8:	str	lr, [sp, #4]
   1ccec:	add	fp, sp, #4
   1ccf0:	sub	sp, sp, #24
   1ccf4:	str	r0, [fp, #-8]
   1ccf8:	str	r1, [fp, #-12]
   1ccfc:	str	r2, [fp, #-16]
   1cd00:	str	r3, [fp, #-20]	; 0xffffffec
   1cd04:	ldr	r2, [fp, #-16]
   1cd08:	ldr	r1, [fp, #-12]
   1cd0c:	ldr	r0, [fp, #-8]
   1cd10:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1cd14:	mov	r3, r0
   1cd18:	cmp	r3, #0
   1cd1c:	beq	1cd38 <flatcc_verify_struct_as_root@@Base+0x54>
   1cd20:	ldr	r2, [fp, #-16]
   1cd24:	ldr	r1, [fp, #-12]
   1cd28:	ldr	r0, [fp, #-8]
   1cd2c:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1cd30:	mov	r3, r0
   1cd34:	b	1cd64 <flatcc_verify_struct_as_root@@Base+0x80>
   1cd38:	mov	r1, #0
   1cd3c:	ldr	r0, [fp, #-8]
   1cd40:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1cd44:	mov	r2, r0
   1cd48:	ldrh	r3, [fp, #4]
   1cd4c:	str	r3, [sp]
   1cd50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cd54:	mov	r1, #0
   1cd58:	ldr	r0, [fp, #-12]
   1cd5c:	bl	1b644 <flatcc_verify_error_string@@Base+0x558>
   1cd60:	mov	r3, r0
   1cd64:	mov	r0, r3
   1cd68:	sub	sp, fp, #4
   1cd6c:	ldr	fp, [sp]
   1cd70:	add	sp, sp, #4
   1cd74:	pop	{pc}		; (ldr pc, [sp], #4)

0001cd78 <flatcc_verify_struct_as_typed_root@@Base>:
   1cd78:	str	fp, [sp, #-8]!
   1cd7c:	str	lr, [sp, #4]
   1cd80:	add	fp, sp, #4
   1cd84:	sub	sp, sp, #24
   1cd88:	str	r0, [fp, #-8]
   1cd8c:	str	r1, [fp, #-12]
   1cd90:	str	r2, [fp, #-16]
   1cd94:	str	r3, [fp, #-20]	; 0xffffffec
   1cd98:	ldr	r2, [fp, #-16]
   1cd9c:	ldr	r1, [fp, #-12]
   1cda0:	ldr	r0, [fp, #-8]
   1cda4:	bl	1cbc4 <flatcc_verify_typed_buffer_header@@Base>
   1cda8:	mov	r3, r0
   1cdac:	cmp	r3, #0
   1cdb0:	beq	1cdcc <flatcc_verify_struct_as_typed_root@@Base+0x54>
   1cdb4:	ldr	r2, [fp, #-16]
   1cdb8:	ldr	r1, [fp, #-12]
   1cdbc:	ldr	r0, [fp, #-8]
   1cdc0:	bl	1cbc4 <flatcc_verify_typed_buffer_header@@Base>
   1cdc4:	mov	r3, r0
   1cdc8:	b	1cdf8 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   1cdcc:	mov	r1, #0
   1cdd0:	ldr	r0, [fp, #-8]
   1cdd4:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1cdd8:	mov	r2, r0
   1cddc:	ldrh	r3, [fp, #4]
   1cde0:	str	r3, [sp]
   1cde4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cde8:	mov	r1, #0
   1cdec:	ldr	r0, [fp, #-12]
   1cdf0:	bl	1b644 <flatcc_verify_error_string@@Base+0x558>
   1cdf4:	mov	r3, r0
   1cdf8:	mov	r0, r3
   1cdfc:	sub	sp, fp, #4
   1ce00:	ldr	fp, [sp]
   1ce04:	add	sp, sp, #4
   1ce08:	pop	{pc}		; (ldr pc, [sp], #4)

0001ce0c <flatcc_verify_table_as_root@@Base>:
   1ce0c:	str	fp, [sp, #-8]!
   1ce10:	str	lr, [sp, #4]
   1ce14:	add	fp, sp, #4
   1ce18:	sub	sp, sp, #24
   1ce1c:	str	r0, [fp, #-8]
   1ce20:	str	r1, [fp, #-12]
   1ce24:	str	r2, [fp, #-16]
   1ce28:	str	r3, [fp, #-20]	; 0xffffffec
   1ce2c:	ldr	r2, [fp, #-16]
   1ce30:	ldr	r1, [fp, #-12]
   1ce34:	ldr	r0, [fp, #-8]
   1ce38:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1ce3c:	mov	r3, r0
   1ce40:	cmp	r3, #0
   1ce44:	beq	1ce60 <flatcc_verify_table_as_root@@Base+0x54>
   1ce48:	ldr	r2, [fp, #-16]
   1ce4c:	ldr	r1, [fp, #-12]
   1ce50:	ldr	r0, [fp, #-8]
   1ce54:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1ce58:	mov	r3, r0
   1ce5c:	b	1ce98 <flatcc_verify_table_as_root@@Base+0x8c>
   1ce60:	mov	r1, #0
   1ce64:	ldr	r0, [fp, #-8]
   1ce68:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1ce6c:	mov	r2, r0
   1ce70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ce74:	str	r3, [sp, #4]
   1ce78:	mov	r3, #100	; 0x64
   1ce7c:	str	r3, [sp]
   1ce80:	mov	r3, r2
   1ce84:	mov	r2, #0
   1ce88:	ldr	r1, [fp, #-12]
   1ce8c:	ldr	r0, [fp, #-8]
   1ce90:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1ce94:	mov	r3, r0
   1ce98:	mov	r0, r3
   1ce9c:	sub	sp, fp, #4
   1cea0:	ldr	fp, [sp]
   1cea4:	add	sp, sp, #4
   1cea8:	pop	{pc}		; (ldr pc, [sp], #4)

0001ceac <flatcc_verify_table_as_typed_root@@Base>:
   1ceac:	str	fp, [sp, #-8]!
   1ceb0:	str	lr, [sp, #4]
   1ceb4:	add	fp, sp, #4
   1ceb8:	sub	sp, sp, #24
   1cebc:	str	r0, [fp, #-8]
   1cec0:	str	r1, [fp, #-12]
   1cec4:	str	r2, [fp, #-16]
   1cec8:	str	r3, [fp, #-20]	; 0xffffffec
   1cecc:	ldr	r2, [fp, #-16]
   1ced0:	ldr	r1, [fp, #-12]
   1ced4:	ldr	r0, [fp, #-8]
   1ced8:	bl	1cbc4 <flatcc_verify_typed_buffer_header@@Base>
   1cedc:	mov	r3, r0
   1cee0:	cmp	r3, #0
   1cee4:	beq	1cf00 <flatcc_verify_table_as_typed_root@@Base+0x54>
   1cee8:	ldr	r2, [fp, #-16]
   1ceec:	ldr	r1, [fp, #-12]
   1cef0:	ldr	r0, [fp, #-8]
   1cef4:	bl	1cbc4 <flatcc_verify_typed_buffer_header@@Base>
   1cef8:	mov	r3, r0
   1cefc:	b	1cf38 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   1cf00:	mov	r1, #0
   1cf04:	ldr	r0, [fp, #-8]
   1cf08:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1cf0c:	mov	r2, r0
   1cf10:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf14:	str	r3, [sp, #4]
   1cf18:	mov	r3, #100	; 0x64
   1cf1c:	str	r3, [sp]
   1cf20:	mov	r3, r2
   1cf24:	mov	r2, #0
   1cf28:	ldr	r1, [fp, #-12]
   1cf2c:	ldr	r0, [fp, #-8]
   1cf30:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1cf34:	mov	r3, r0
   1cf38:	mov	r0, r3
   1cf3c:	sub	sp, fp, #4
   1cf40:	ldr	fp, [sp]
   1cf44:	add	sp, sp, #4
   1cf48:	pop	{pc}		; (ldr pc, [sp], #4)

0001cf4c <flatcc_verify_struct_as_nested_root@@Base>:
   1cf4c:	str	fp, [sp, #-8]!
   1cf50:	str	lr, [sp, #4]
   1cf54:	add	fp, sp, #4
   1cf58:	sub	sp, sp, #32
   1cf5c:	str	r0, [fp, #-16]
   1cf60:	str	r2, [fp, #-24]	; 0xffffffe8
   1cf64:	str	r3, [fp, #-28]	; 0xffffffe4
   1cf68:	mov	r3, r1
   1cf6c:	strh	r3, [fp, #-18]	; 0xffffffee
   1cf70:	ldrh	r2, [fp, #8]
   1cf74:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1cf78:	mvn	r3, #0
   1cf7c:	str	r3, [sp, #4]
   1cf80:	mov	r3, #1
   1cf84:	str	r3, [sp]
   1cf88:	mov	r3, r2
   1cf8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cf90:	ldr	r0, [fp, #-16]
   1cf94:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1cf98:	mov	r3, r0
   1cf9c:	cmp	r3, #0
   1cfa0:	beq	1cfd4 <flatcc_verify_struct_as_nested_root@@Base+0x88>
   1cfa4:	ldrh	r2, [fp, #8]
   1cfa8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1cfac:	mvn	r3, #0
   1cfb0:	str	r3, [sp, #4]
   1cfb4:	mov	r3, #1
   1cfb8:	str	r3, [sp]
   1cfbc:	mov	r3, r2
   1cfc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cfc4:	ldr	r0, [fp, #-16]
   1cfc8:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1cfcc:	mov	r3, r0
   1cfd0:	b	1d054 <flatcc_verify_struct_as_nested_root@@Base+0x108>
   1cfd4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1cfd8:	mov	r1, r3
   1cfdc:	ldr	r0, [fp, #-16]
   1cfe0:	bl	1b7d8 <flatcc_verify_error_string@@Base+0x6ec>
   1cfe4:	str	r0, [fp, #-8]
   1cfe8:	ldr	r3, [fp, #-8]
   1cfec:	cmp	r3, #0
   1cff0:	bne	1cffc <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   1cff4:	mov	r3, #0
   1cff8:	b	1d054 <flatcc_verify_struct_as_nested_root@@Base+0x108>
   1cffc:	mov	r1, #0
   1d000:	ldr	r0, [fp, #-8]
   1d004:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d008:	mov	r2, r0
   1d00c:	ldr	r3, [fp, #-8]
   1d010:	add	r3, r2, r3
   1d014:	str	r3, [fp, #-8]
   1d018:	mov	r1, #0
   1d01c:	ldr	r0, [fp, #-8]
   1d020:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d024:	str	r0, [fp, #-12]
   1d028:	ldr	r3, [fp, #-8]
   1d02c:	add	r3, r3, #4
   1d030:	str	r3, [fp, #-8]
   1d034:	ldrh	r3, [fp, #8]
   1d038:	str	r3, [sp]
   1d03c:	ldr	r3, [fp, #4]
   1d040:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d044:	ldr	r1, [fp, #-12]
   1d048:	ldr	r0, [fp, #-8]
   1d04c:	bl	1cce4 <flatcc_verify_struct_as_root@@Base>
   1d050:	mov	r3, r0
   1d054:	mov	r0, r3
   1d058:	sub	sp, fp, #4
   1d05c:	ldr	fp, [sp]
   1d060:	add	sp, sp, #4
   1d064:	pop	{pc}		; (ldr pc, [sp], #4)

0001d068 <flatcc_verify_table_as_nested_root@@Base>:
   1d068:	str	fp, [sp, #-8]!
   1d06c:	str	lr, [sp, #4]
   1d070:	add	fp, sp, #4
   1d074:	sub	sp, sp, #32
   1d078:	str	r0, [fp, #-16]
   1d07c:	str	r2, [fp, #-24]	; 0xffffffe8
   1d080:	str	r3, [fp, #-28]	; 0xffffffe4
   1d084:	mov	r3, r1
   1d088:	strh	r3, [fp, #-18]	; 0xffffffee
   1d08c:	ldrh	r2, [fp, #4]
   1d090:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1d094:	mvn	r3, #0
   1d098:	str	r3, [sp, #4]
   1d09c:	mov	r3, #1
   1d0a0:	str	r3, [sp]
   1d0a4:	mov	r3, r2
   1d0a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d0ac:	ldr	r0, [fp, #-16]
   1d0b0:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1d0b4:	mov	r3, r0
   1d0b8:	cmp	r3, #0
   1d0bc:	beq	1d0f0 <flatcc_verify_table_as_nested_root@@Base+0x88>
   1d0c0:	ldrh	r2, [fp, #4]
   1d0c4:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1d0c8:	mvn	r3, #0
   1d0cc:	str	r3, [sp, #4]
   1d0d0:	mov	r3, #1
   1d0d4:	str	r3, [sp]
   1d0d8:	mov	r3, r2
   1d0dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d0e0:	ldr	r0, [fp, #-16]
   1d0e4:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1d0e8:	mov	r3, r0
   1d0ec:	b	1d1c0 <flatcc_verify_table_as_nested_root@@Base+0x158>
   1d0f0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d0f4:	mov	r1, r3
   1d0f8:	ldr	r0, [fp, #-16]
   1d0fc:	bl	1b7d8 <flatcc_verify_error_string@@Base+0x6ec>
   1d100:	str	r0, [fp, #-8]
   1d104:	ldr	r3, [fp, #-8]
   1d108:	cmp	r3, #0
   1d10c:	bne	1d118 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1d110:	mov	r3, #0
   1d114:	b	1d1c0 <flatcc_verify_table_as_nested_root@@Base+0x158>
   1d118:	mov	r1, #0
   1d11c:	ldr	r0, [fp, #-8]
   1d120:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d124:	mov	r2, r0
   1d128:	ldr	r3, [fp, #-8]
   1d12c:	add	r3, r2, r3
   1d130:	str	r3, [fp, #-8]
   1d134:	mov	r1, #0
   1d138:	ldr	r0, [fp, #-8]
   1d13c:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d140:	str	r0, [fp, #-12]
   1d144:	ldr	r3, [fp, #-8]
   1d148:	add	r3, r3, #4
   1d14c:	str	r3, [fp, #-8]
   1d150:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d154:	ldr	r1, [fp, #-12]
   1d158:	ldr	r0, [fp, #-8]
   1d15c:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1d160:	mov	r3, r0
   1d164:	cmp	r3, #0
   1d168:	beq	1d184 <flatcc_verify_table_as_nested_root@@Base+0x11c>
   1d16c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d170:	ldr	r1, [fp, #-12]
   1d174:	ldr	r0, [fp, #-8]
   1d178:	bl	1caa0 <flatcc_verify_buffer_header@@Base>
   1d17c:	mov	r3, r0
   1d180:	b	1d1c0 <flatcc_verify_table_as_nested_root@@Base+0x158>
   1d184:	mov	r1, #0
   1d188:	ldr	r0, [fp, #-8]
   1d18c:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d190:	mov	r1, r0
   1d194:	ldr	r3, [fp, #-16]
   1d198:	ldr	r3, [r3, #8]
   1d19c:	ldr	r2, [fp, #8]
   1d1a0:	str	r2, [sp, #4]
   1d1a4:	str	r3, [sp]
   1d1a8:	mov	r3, r1
   1d1ac:	mov	r2, #0
   1d1b0:	ldr	r1, [fp, #-12]
   1d1b4:	ldr	r0, [fp, #-8]
   1d1b8:	bl	1be54 <flatcc_verify_error_string@@Base+0xd68>
   1d1bc:	mov	r3, r0
   1d1c0:	mov	r0, r3
   1d1c4:	sub	sp, fp, #4
   1d1c8:	ldr	fp, [sp]
   1d1cc:	add	sp, sp, #4
   1d1d0:	pop	{pc}		; (ldr pc, [sp], #4)

0001d1d4 <flatcc_verify_union_field@@Base>:
   1d1d4:	str	fp, [sp, #-8]!
   1d1d8:	str	lr, [sp, #4]
   1d1dc:	add	fp, sp, #4
   1d1e0:	sub	sp, sp, #80	; 0x50
   1d1e4:	str	r0, [fp, #-64]	; 0xffffffc0
   1d1e8:	str	r2, [fp, #-72]	; 0xffffffb8
   1d1ec:	str	r3, [fp, #-76]	; 0xffffffb4
   1d1f0:	mov	r3, r1
   1d1f4:	strh	r3, [fp, #-66]	; 0xffffffbe
   1d1f8:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1d1fc:	sub	r3, r3, #1
   1d200:	uxth	r3, r3
   1d204:	mov	r1, r3
   1d208:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d20c:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1d210:	mov	r3, r0
   1d214:	strh	r3, [fp, #-6]
   1d218:	ldrh	r3, [fp, #-6]
   1d21c:	cmp	r3, #0
   1d220:	bne	1d29c <flatcc_verify_union_field@@Base+0xc8>
   1d224:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1d228:	mov	r1, r3
   1d22c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d230:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1d234:	mov	r3, r0
   1d238:	strh	r3, [fp, #-8]
   1d23c:	ldrh	r3, [fp, #-8]
   1d240:	cmp	r3, #0
   1d244:	moveq	r3, #1
   1d248:	movne	r3, #0
   1d24c:	uxtb	r3, r3
   1d250:	str	r3, [fp, #-12]
   1d254:	ldr	r3, [fp, #-12]
   1d258:	cmp	r3, #0
   1d25c:	bne	1d268 <flatcc_verify_union_field@@Base+0x94>
   1d260:	mov	r3, #23
   1d264:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d268:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1d26c:	cmp	r3, #0
   1d270:	moveq	r3, #1
   1d274:	movne	r3, #0
   1d278:	uxtb	r3, r3
   1d27c:	str	r3, [fp, #-16]
   1d280:	ldr	r3, [fp, #-16]
   1d284:	cmp	r3, #0
   1d288:	bne	1d294 <flatcc_verify_union_field@@Base+0xc0>
   1d28c:	mov	r3, #21
   1d290:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d294:	mov	r3, #0
   1d298:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d29c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1d2a0:	sub	r3, r3, #1
   1d2a4:	uxth	r1, r3
   1d2a8:	mov	r3, #1
   1d2ac:	str	r3, [sp]
   1d2b0:	mov	r3, #1
   1d2b4:	mov	r2, #0
   1d2b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d2bc:	bl	1b850 <flatcc_verify_error_string@@Base+0x764>
   1d2c0:	mov	r3, r0
   1d2c4:	cmp	r3, #0
   1d2c8:	beq	1d2f8 <flatcc_verify_union_field@@Base+0x124>
   1d2cc:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1d2d0:	sub	r3, r3, #1
   1d2d4:	uxth	r1, r3
   1d2d8:	mov	r3, #1
   1d2dc:	str	r3, [sp]
   1d2e0:	mov	r3, #1
   1d2e4:	mov	r2, #0
   1d2e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d2ec:	bl	1b850 <flatcc_verify_error_string@@Base+0x764>
   1d2f0:	mov	r3, r0
   1d2f4:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d2f8:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1d2fc:	mov	r1, r3
   1d300:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d304:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1d308:	mov	r3, r0
   1d30c:	strh	r3, [fp, #-8]
   1d310:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d314:	ldr	r2, [r3]
   1d318:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d31c:	ldr	r1, [r3, #16]
   1d320:	ldrh	r3, [fp, #-6]
   1d324:	add	r3, r1, r3
   1d328:	add	r3, r2, r3
   1d32c:	str	r3, [fp, #-20]	; 0xffffffec
   1d330:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d334:	ldrb	r3, [r3]
   1d338:	cmp	r3, #0
   1d33c:	bne	1d34c <flatcc_verify_union_field@@Base+0x178>
   1d340:	ldrh	r3, [fp, #-8]
   1d344:	cmp	r3, #0
   1d348:	bne	1d354 <flatcc_verify_union_field@@Base+0x180>
   1d34c:	mov	r3, #1
   1d350:	b	1d358 <flatcc_verify_union_field@@Base+0x184>
   1d354:	mov	r3, #0
   1d358:	str	r3, [fp, #-24]	; 0xffffffe8
   1d35c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d360:	cmp	r3, #0
   1d364:	bne	1d370 <flatcc_verify_union_field@@Base+0x19c>
   1d368:	mov	r3, #24
   1d36c:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d370:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d374:	ldrb	r3, [r3]
   1d378:	cmp	r3, #0
   1d37c:	bne	1d388 <flatcc_verify_union_field@@Base+0x1b4>
   1d380:	mov	r3, #0
   1d384:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d388:	sub	r3, fp, #32
   1d38c:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   1d390:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1d394:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d398:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1d39c:	str	r0, [fp, #-28]	; 0xffffffe4
   1d3a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d3a4:	cmp	r3, #0
   1d3a8:	bne	1d3b8 <flatcc_verify_union_field@@Base+0x1e4>
   1d3ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d3b0:	cmp	r3, #0
   1d3b4:	bne	1d3c0 <flatcc_verify_union_field@@Base+0x1ec>
   1d3b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d3bc:	b	1d42c <flatcc_verify_union_field@@Base+0x258>
   1d3c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d3c4:	ldr	r3, [r3]
   1d3c8:	str	r3, [fp, #-56]	; 0xffffffc8
   1d3cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d3d0:	ldr	r3, [r3, #4]
   1d3d4:	str	r3, [fp, #-52]	; 0xffffffcc
   1d3d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d3dc:	ldr	r3, [r3, #8]
   1d3e0:	str	r3, [fp, #-48]	; 0xffffffd0
   1d3e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d3e8:	str	r3, [fp, #-40]	; 0xffffffd8
   1d3ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d3f0:	ldr	r3, [r3]
   1d3f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d3f8:	mov	r1, r2
   1d3fc:	mov	r0, r3
   1d400:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d404:	mov	r3, r0
   1d408:	str	r3, [fp, #-36]	; 0xffffffdc
   1d40c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d410:	ldrb	r3, [r3]
   1d414:	strb	r3, [fp, #-44]	; 0xffffffd4
   1d418:	sub	r2, fp, #56	; 0x38
   1d41c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1d420:	mov	r0, r2
   1d424:	blx	r3
   1d428:	mov	r3, r0
   1d42c:	mov	r0, r3
   1d430:	sub	sp, fp, #4
   1d434:	ldr	fp, [sp]
   1d438:	add	sp, sp, #4
   1d43c:	pop	{pc}		; (ldr pc, [sp], #4)

0001d440 <flatcc_verify_union_vector_field@@Base>:
   1d440:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d444:	str	r6, [sp, #8]
   1d448:	str	fp, [sp, #12]
   1d44c:	str	lr, [sp, #16]
   1d450:	add	fp, sp, #16
   1d454:	sub	sp, sp, #68	; 0x44
   1d458:	str	r0, [fp, #-56]	; 0xffffffc8
   1d45c:	str	r2, [fp, #-64]	; 0xffffffc0
   1d460:	str	r3, [fp, #-68]	; 0xffffffbc
   1d464:	mov	r3, r1
   1d468:	strh	r3, [fp, #-58]	; 0xffffffc6
   1d46c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1d470:	sub	r3, r3, #1
   1d474:	uxth	r3, r3
   1d478:	mov	r1, r3
   1d47c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d480:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1d484:	mov	r3, r0
   1d488:	strh	r3, [fp, #-22]	; 0xffffffea
   1d48c:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1d490:	cmp	r3, #0
   1d494:	bne	1d4e8 <flatcc_verify_union_vector_field@@Base+0xa8>
   1d498:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1d49c:	mov	r1, r3
   1d4a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d4a4:	bl	1b75c <flatcc_verify_error_string@@Base+0x670>
   1d4a8:	mov	r3, r0
   1d4ac:	strh	r3, [fp, #-24]	; 0xffffffe8
   1d4b0:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   1d4b4:	cmp	r3, #0
   1d4b8:	bne	1d4e8 <flatcc_verify_union_vector_field@@Base+0xa8>
   1d4bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d4c0:	cmp	r3, #0
   1d4c4:	moveq	r3, #1
   1d4c8:	movne	r3, #0
   1d4cc:	uxtb	r3, r3
   1d4d0:	str	r3, [fp, #-28]	; 0xffffffe4
   1d4d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d4d8:	cmp	r3, #0
   1d4dc:	bne	1d4e8 <flatcc_verify_union_vector_field@@Base+0xa8>
   1d4e0:	mov	r3, #22
   1d4e4:	b	1d668 <flatcc_verify_union_vector_field@@Base+0x228>
   1d4e8:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1d4ec:	sub	r3, r3, #1
   1d4f0:	uxth	r1, r3
   1d4f4:	mvn	r3, #0
   1d4f8:	str	r3, [sp, #4]
   1d4fc:	mov	r3, #1
   1d500:	str	r3, [sp]
   1d504:	mov	r3, #1
   1d508:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1d50c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d510:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1d514:	mov	r3, r0
   1d518:	cmp	r3, #0
   1d51c:	beq	1d554 <flatcc_verify_union_vector_field@@Base+0x114>
   1d520:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1d524:	sub	r3, r3, #1
   1d528:	uxth	r1, r3
   1d52c:	mvn	r3, #0
   1d530:	str	r3, [sp, #4]
   1d534:	mov	r3, #1
   1d538:	str	r3, [sp]
   1d53c:	mov	r3, #1
   1d540:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1d544:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d548:	bl	1c628 <flatcc_verify_vector_field@@Base>
   1d54c:	mov	r3, r0
   1d550:	b	1d668 <flatcc_verify_union_vector_field@@Base+0x228>
   1d554:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1d558:	sub	r3, r3, #1
   1d55c:	uxth	r3, r3
   1d560:	mov	r1, r3
   1d564:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d568:	bl	1b7d8 <flatcc_verify_error_string@@Base+0x6ec>
   1d56c:	str	r0, [fp, #-32]	; 0xffffffe0
   1d570:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d574:	cmp	r3, #0
   1d578:	bne	1d584 <flatcc_verify_union_vector_field@@Base+0x144>
   1d57c:	mov	r3, #0
   1d580:	b	1d668 <flatcc_verify_union_vector_field@@Base+0x228>
   1d584:	mov	r1, #0
   1d588:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d58c:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d590:	mov	r2, r0
   1d594:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d598:	add	r3, r2, r3
   1d59c:	str	r3, [fp, #-32]	; 0xffffffe0
   1d5a0:	mov	r1, #0
   1d5a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d5a8:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d5ac:	str	r0, [fp, #-36]	; 0xffffffdc
   1d5b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d5b4:	add	r3, r3, #4
   1d5b8:	str	r3, [fp, #-32]	; 0xffffffe0
   1d5bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d5c0:	str	r3, [fp, #-40]	; 0xffffffd8
   1d5c4:	sub	r3, fp, #48	; 0x30
   1d5c8:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   1d5cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1d5d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d5d4:	bl	1b9b4 <flatcc_verify_error_string@@Base+0x8c8>
   1d5d8:	str	r0, [fp, #-44]	; 0xffffffd4
   1d5dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1d5e0:	cmp	r3, #0
   1d5e4:	bne	1d5f4 <flatcc_verify_union_vector_field@@Base+0x1b4>
   1d5e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d5ec:	cmp	r3, #0
   1d5f0:	bne	1d5fc <flatcc_verify_union_vector_field@@Base+0x1bc>
   1d5f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1d5f8:	b	1d668 <flatcc_verify_union_vector_field@@Base+0x228>
   1d5fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1d600:	ldr	r4, [r3]
   1d604:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1d608:	ldr	r5, [r3, #4]
   1d60c:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1d610:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1d614:	ldr	r3, [r3]
   1d618:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1d61c:	mov	r1, r2
   1d620:	mov	r0, r3
   1d624:	bl	1b40c <flatcc_verify_error_string@@Base+0x320>
   1d628:	mov	r1, r0
   1d62c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1d630:	ldr	r3, [r3, #8]
   1d634:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1d638:	str	r2, [sp, #12]
   1d63c:	str	r3, [sp, #8]
   1d640:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1d644:	str	r3, [sp, #4]
   1d648:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d64c:	str	r3, [sp]
   1d650:	mov	r3, r1
   1d654:	mov	r2, r6
   1d658:	mov	r1, r5
   1d65c:	mov	r0, r4
   1d660:	bl	1c274 <flatcc_verify_error_string@@Base+0x1188>
   1d664:	mov	r3, r0
   1d668:	mov	r0, r3
   1d66c:	sub	sp, fp, #16
   1d670:	ldrd	r4, [sp]
   1d674:	ldr	r6, [sp, #8]
   1d678:	ldr	fp, [sp, #12]
   1d67c:	add	sp, sp, #16
   1d680:	pop	{pc}		; (ldr pc, [sp], #4)

0001d684 <__libc_csu_init@@Base>:
   1d684:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d688:	mov	r7, r0
   1d68c:	ldr	r6, [pc, #72]	; 1d6dc <__libc_csu_init@@Base+0x58>
   1d690:	ldr	r5, [pc, #72]	; 1d6e0 <__libc_csu_init@@Base+0x5c>
   1d694:	add	r6, pc, r6
   1d698:	add	r5, pc, r5
   1d69c:	sub	r6, r6, r5
   1d6a0:	mov	r8, r1
   1d6a4:	mov	r9, r2
   1d6a8:	bl	12268 <free@plt-0x20>
   1d6ac:	asrs	r6, r6, #2
   1d6b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d6b4:	mov	r4, #0
   1d6b8:	add	r4, r4, #1
   1d6bc:	ldr	r3, [r5], #4
   1d6c0:	mov	r2, r9
   1d6c4:	mov	r1, r8
   1d6c8:	mov	r0, r7
   1d6cc:	blx	r3
   1d6d0:	cmp	r6, r4
   1d6d4:	bne	1d6b8 <__libc_csu_init@@Base+0x34>
   1d6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d6dc:	andeq	r1, r1, r8, ror r8
   1d6e0:	andeq	r1, r1, r0, ror r8

0001d6e4 <__libc_csu_fini@@Base>:
   1d6e4:	bx	lr

Disassembly of section .fini:

0001d6e8 <.fini>:
   1d6e8:	push	{r3, lr}
   1d6ec:	pop	{r3, pc}
