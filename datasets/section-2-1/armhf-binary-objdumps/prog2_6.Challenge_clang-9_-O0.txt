
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	106f8 <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <malloc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <exit@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__isoc99_scanf@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <abort@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

Disassembly of section .text:

000106bc <_start@@Base>:
   106bc:	mov	fp, #0
   106c0:	mov	lr, #0
   106c4:	pop	{r1}		; (ldr r1, [sp], #4)
   106c8:	mov	r2, sp
   106cc:	push	{r2}		; (str r2, [sp, #-4]!)
   106d0:	push	{r0}		; (str r0, [sp, #-4]!)
   106d4:	ldr	ip, [pc, #16]	; 106ec <_start@@Base+0x30>
   106d8:	push	{ip}		; (str ip, [sp, #-4]!)
   106dc:	ldr	r0, [pc, #12]	; 106f0 <_start@@Base+0x34>
   106e0:	ldr	r3, [pc, #12]	; 106f4 <_start@@Base+0x38>
   106e4:	bl	10680 <__libc_start_main@plt>
   106e8:	bl	106b0 <abort@plt>
   106ec:			; <UNDEFINED> instruction: 0x000109b0
   106f0:	andeq	r0, r1, ip, lsr #15
   106f4:	andeq	r0, r1, r0, asr r9
   106f8:	ldr	r3, [pc, #20]	; 10714 <_start@@Base+0x58>
   106fc:	ldr	r2, [pc, #20]	; 10718 <_start@@Base+0x5c>
   10700:	add	r3, pc, r3
   10704:	ldr	r2, [r3, r2]
   10708:	cmp	r2, #0
   1070c:	bxeq	lr
   10710:	b	1068c <__gmon_start__@plt>
   10714:	strdeq	r0, [r1], -r8
   10718:	andeq	r0, r0, r8, lsr #32
   1071c:	ldr	r0, [pc, #24]	; 1073c <_start@@Base+0x80>
   10720:	ldr	r3, [pc, #24]	; 10740 <_start@@Base+0x84>
   10724:	cmp	r3, r0
   10728:	bxeq	lr
   1072c:	ldr	r3, [pc, #16]	; 10744 <_start@@Base+0x88>
   10730:	cmp	r3, #0
   10734:	bxeq	lr
   10738:	bx	r3
   1073c:	andeq	r1, r2, r4, lsr r0
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r0, r0, r0
   10748:	ldr	r0, [pc, #36]	; 10774 <_start@@Base+0xb8>
   1074c:	ldr	r1, [pc, #36]	; 10778 <_start@@Base+0xbc>
   10750:	sub	r1, r1, r0
   10754:	asr	r1, r1, #2
   10758:	add	r1, r1, r1, lsr #31
   1075c:	asrs	r1, r1, #1
   10760:	bxeq	lr
   10764:	ldr	r3, [pc, #16]	; 1077c <_start@@Base+0xc0>
   10768:	cmp	r3, #0
   1076c:	bxeq	lr
   10770:	bx	r3
   10774:	andeq	r1, r2, r4, lsr r0
   10778:	andeq	r1, r2, r4, lsr r0
   1077c:	andeq	r0, r0, r0
   10780:	push	{r4, lr}
   10784:	ldr	r4, [pc, #24]	; 107a4 <_start@@Base+0xe8>
   10788:	ldrb	r3, [r4]
   1078c:	cmp	r3, #0
   10790:	popne	{r4, pc}
   10794:	bl	1071c <_start@@Base+0x60>
   10798:	mov	r3, #1
   1079c:	strb	r3, [r4]
   107a0:	pop	{r4, pc}
   107a4:	andeq	r1, r2, r4, lsr r0
   107a8:	b	10748 <_start@@Base+0x8c>

000107ac <main@@Base>:
   107ac:	push	{fp, lr}
   107b0:	mov	fp, sp
   107b4:	sub	sp, sp, #48	; 0x30
   107b8:	movw	r0, #0
   107bc:	str	r0, [fp, #-4]
   107c0:	ldr	r0, [pc, #368]	; 10938 <main@@Base+0x18c>
   107c4:	add	r0, pc, r0
   107c8:	sub	r1, fp, #8
   107cc:	bl	106a4 <__isoc99_scanf@plt>
   107d0:	ldr	r1, [fp, #-8]
   107d4:	cmp	r1, #0
   107d8:	bne	107e4 <main@@Base+0x38>
   107dc:	movw	r0, #0
   107e0:	bl	10698 <exit@plt>
   107e4:	ldr	r0, [fp, #-8]
   107e8:	lsl	r1, r0, #1
   107ec:	lsl	r0, r0, #3
   107f0:	str	r1, [sp, #16]
   107f4:	bl	10674 <malloc@plt>
   107f8:	str	r0, [sp, #24]
   107fc:	movw	r0, #0
   10800:	str	r0, [fp, #-16]
   10804:	ldr	r1, [fp, #-8]
   10808:	sub	r1, r1, #1
   1080c:	str	r1, [fp, #-20]	; 0xffffffec
   10810:	str	r0, [fp, #-12]
   10814:	ldr	r0, [fp, #-12]
   10818:	ldr	r1, [fp, #-8]
   1081c:	cmp	r0, r1
   10820:	bge	10848 <main@@Base+0x9c>
   10824:	ldr	r0, [fp, #-12]
   10828:	add	r1, r0, #1
   1082c:	ldr	r2, [sp, #24]
   10830:	add	r0, r2, r0, lsl #2
   10834:	str	r1, [r0]
   10838:	ldr	r0, [fp, #-12]
   1083c:	add	r0, r0, #1
   10840:	str	r0, [fp, #-12]
   10844:	b	10814 <main@@Base+0x68>
   10848:	ldr	r0, [pc, #236]	; 1093c <main@@Base+0x190>
   1084c:	add	r0, pc, r0
   10850:	ldr	r1, [fp, #-8]
   10854:	str	r1, [sp, #20]
   10858:	bl	10668 <printf@plt>
   1085c:	ldr	r0, [sp, #20]
   10860:	cmp	r0, #2
   10864:	ble	108d0 <main@@Base+0x124>
   10868:	ldr	r0, [sp, #24]
   1086c:	ldr	r1, [fp, #-16]
   10870:	ldr	r1, [r0, r1, lsl #2]
   10874:	ldr	r0, [pc, #200]	; 10944 <main@@Base+0x198>
   10878:	add	r0, pc, r0
   1087c:	bl	10668 <printf@plt>
   10880:	ldr	r1, [fp, #-16]
   10884:	add	r1, r1, #1
   10888:	str	r1, [fp, #-16]
   1088c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10890:	add	r1, r1, #1
   10894:	str	r1, [fp, #-20]	; 0xffffffec
   10898:	ldr	r1, [sp, #24]
   1089c:	ldr	r2, [fp, #-16]
   108a0:	ldr	r2, [r1, r2, lsl #2]
   108a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   108a8:	add	r1, r1, r3, lsl #2
   108ac:	str	r2, [r1]
   108b0:	ldr	r1, [fp, #-16]
   108b4:	add	r1, r1, #1
   108b8:	str	r1, [fp, #-16]
   108bc:	ldr	r1, [sp, #20]
   108c0:	mvn	r2, #0
   108c4:	add	r1, r1, r2
   108c8:	str	r1, [sp, #20]
   108cc:	b	1085c <main@@Base+0xb0>
   108d0:	ldr	r0, [pc, #104]	; 10940 <main@@Base+0x194>
   108d4:	add	r0, pc, r0
   108d8:	ldr	r1, [sp, #24]
   108dc:	ldr	r2, [fp, #-16]
   108e0:	add	r3, r2, #1
   108e4:	str	r3, [fp, #-16]
   108e8:	ldr	r1, [r1, r2, lsl #2]
   108ec:	ldr	r2, [pc, #84]	; 10948 <main@@Base+0x19c>
   108f0:	add	r2, pc, r2
   108f4:	str	r0, [sp, #12]
   108f8:	mov	r0, r2
   108fc:	bl	10668 <printf@plt>
   10900:	ldr	r1, [pc, #68]	; 1094c <main@@Base+0x1a0>
   10904:	add	r1, pc, r1
   10908:	str	r0, [sp, #8]
   1090c:	mov	r0, r1
   10910:	bl	10668 <printf@plt>
   10914:	ldr	r1, [sp, #24]
   10918:	ldr	r2, [fp, #-16]
   1091c:	add	r1, r1, r2, lsl #2
   10920:	ldr	r1, [r1]
   10924:	ldr	r2, [sp, #12]
   10928:	str	r0, [sp, #4]
   1092c:	mov	r0, r2
   10930:	bl	10668 <printf@plt>
   10934:	b	107c0 <main@@Base+0x14>
   10938:	strdeq	r0, [r0], -r4
   1093c:	andeq	r0, r0, pc, ror #2
   10940:	andeq	r0, r0, r0, lsl r1
   10944:	andeq	r0, r0, r5, asr r1
   10948:	andeq	r0, r0, r8, asr #1
   1094c:	andeq	r0, r0, lr, asr #1

00010950 <__libc_csu_init@@Base>:
   10950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10954:	mov	r7, r0
   10958:	ldr	r6, [pc, #72]	; 109a8 <__libc_csu_init@@Base+0x58>
   1095c:	ldr	r5, [pc, #72]	; 109ac <__libc_csu_init@@Base+0x5c>
   10960:	add	r6, pc, r6
   10964:	add	r5, pc, r5
   10968:	sub	r6, r6, r5
   1096c:	mov	r8, r1
   10970:	mov	r9, r2
   10974:	bl	10648 <printf@plt-0x20>
   10978:	asrs	r6, r6, #2
   1097c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10980:	mov	r4, #0
   10984:	add	r4, r4, #1
   10988:	ldr	r3, [r5], #4
   1098c:	mov	r2, r9
   10990:	mov	r1, r8
   10994:	mov	r0, r7
   10998:	blx	r3
   1099c:	cmp	r6, r4
   109a0:	bne	10984 <__libc_csu_init@@Base+0x34>
   109a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a8:	andeq	r0, r1, r4, lsr #11
   109ac:	muleq	r1, ip, r5

000109b0 <__libc_csu_fini@@Base>:
   109b0:	bx	lr

Disassembly of section .fini:

000109b4 <.fini>:
   109b4:	push	{r3, lr}
   109b8:	pop	{r3, pc}
