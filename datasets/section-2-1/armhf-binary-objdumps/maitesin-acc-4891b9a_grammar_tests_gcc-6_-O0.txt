
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011814 <.init>:
   11814:	push	{r3, lr}
   11818:	bl	11a2c <_start@@Base+0x3c>
   1181c:	pop	{r3, pc}

Disassembly of section .plt:

00011820 <fdopen@plt-0x14>:
   11820:	push	{lr}		; (str lr, [sp, #-4]!)
   11824:	ldr	lr, [pc, #4]	; 11830 <fdopen@plt-0x4>
   11828:	add	lr, pc, lr
   1182c:	ldr	pc, [lr, #8]!
   11830:	ldrdeq	ip, [r1], -r0

00011834 <fdopen@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #28, 20	; 0x1c000
   1183c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011840 <raise@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #28, 20	; 0x1c000
   11848:	ldr	pc, [ip, #1992]!	; 0x7c8

0001184c <setbuf@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #28, 20	; 0x1c000
   11854:	ldr	pc, [ip, #1984]!	; 0x7c0

00011858 <printf@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #28, 20	; 0x1c000
   11860:	ldr	pc, [ip, #1976]!	; 0x7b8

00011864 <fflush@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #28, 20	; 0x1c000
   1186c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011870 <free@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #28, 20	; 0x1c000
   11878:	ldr	pc, [ip, #1960]!	; 0x7a8

0001187c <memcpy@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #28, 20	; 0x1c000
   11884:	ldr	pc, [ip, #1952]!	; 0x7a0

00011888 <ftell@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #28, 20	; 0x1c000
   11890:	ldr	pc, [ip, #1944]!	; 0x798

00011894 <fwrite@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #28, 20	; 0x1c000
   1189c:	ldr	pc, [ip, #1936]!	; 0x790

000118a0 <strcpy@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #28, 20	; 0x1c000
   118a8:	ldr	pc, [ip, #1928]!	; 0x788

000118ac <fread@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #28, 20	; 0x1c000
   118b4:	ldr	pc, [ip, #1920]!	; 0x780

000118b8 <getenv@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #28, 20	; 0x1c000
   118c0:	ldr	pc, [ip, #1912]!	; 0x778

000118c4 <puts@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #28, 20	; 0x1c000
   118cc:	ldr	pc, [ip, #1904]!	; 0x770

000118d0 <malloc@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #28, 20	; 0x1c000
   118d8:	ldr	pc, [ip, #1896]!	; 0x768

000118dc <__libc_start_main@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #28, 20	; 0x1c000
   118e4:	ldr	pc, [ip, #1888]!	; 0x760

000118e8 <__fxstat@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #28, 20	; 0x1c000
   118f0:	ldr	pc, [ip, #1880]!	; 0x758

000118f4 <__gmon_start__@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #28, 20	; 0x1c000
   118fc:	ldr	pc, [ip, #1872]!	; 0x750

00011900 <open@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #28, 20	; 0x1c000
   11908:	ldr	pc, [ip, #1864]!	; 0x748

0001190c <getpid@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #28, 20	; 0x1c000
   11914:	ldr	pc, [ip, #1856]!	; 0x740

00011918 <exit@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #28, 20	; 0x1c000
   11920:	ldr	pc, [ip, #1848]!	; 0x738

00011924 <strlen@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #28, 20	; 0x1c000
   1192c:	ldr	pc, [ip, #1840]!	; 0x730

00011930 <fprintf@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #28, 20	; 0x1c000
   11938:	ldr	pc, [ip, #1832]!	; 0x728

0001193c <__errno_location@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #28, 20	; 0x1c000
   11944:	ldr	pc, [ip, #1824]!	; 0x720

00011948 <__cxa_atexit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #28, 20	; 0x1c000
   11950:	ldr	pc, [ip, #1816]!	; 0x718

00011954 <mkdir@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #28, 20	; 0x1c000
   1195c:	ldr	pc, [ip, #1808]!	; 0x710

00011960 <fcntl@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #28, 20	; 0x1c000
   11968:	ldr	pc, [ip, #1800]!	; 0x708

0001196c <memset@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #28, 20	; 0x1c000
   11974:	ldr	pc, [ip, #1792]!	; 0x700

00011978 <access@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #28, 20	; 0x1c000
   11980:	ldr	pc, [ip, #1784]!	; 0x6f8

00011984 <fclose@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #28, 20	; 0x1c000
   1198c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011990 <strnlen@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #28, 20	; 0x1c000
   11998:	ldr	pc, [ip, #1768]!	; 0x6e8

0001199c <vfprintf@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #28, 20	; 0x1c000
   119a4:	ldr	pc, [ip, #1760]!	; 0x6e0

000119a8 <atoi@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #28, 20	; 0x1c000
   119b0:	ldr	pc, [ip, #1752]!	; 0x6d8

000119b4 <fseek@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #28, 20	; 0x1c000
   119bc:	ldr	pc, [ip, #1744]!	; 0x6d0

000119c0 <strncmp@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #28, 20	; 0x1c000
   119c8:	ldr	pc, [ip, #1736]!	; 0x6c8

000119cc <abort@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #28, 20	; 0x1c000
   119d4:	ldr	pc, [ip, #1728]!	; 0x6c0

000119d8 <close@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #28, 20	; 0x1c000
   119e0:	ldr	pc, [ip, #1720]!	; 0x6b8

000119e4 <__assert_fail@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #28, 20	; 0x1c000
   119ec:	ldr	pc, [ip, #1712]!	; 0x6b0

Disassembly of section .text:

000119f0 <_start@@Base>:
   119f0:	mov	fp, #0
   119f4:	mov	lr, #0
   119f8:	pop	{r1}		; (ldr r1, [sp], #4)
   119fc:	mov	r2, sp
   11a00:	push	{r2}		; (str r2, [sp, #-4]!)
   11a04:	push	{r0}		; (str r0, [sp, #-4]!)
   11a08:	ldr	ip, [pc, #16]	; 11a20 <_start@@Base+0x30>
   11a0c:	push	{ip}		; (str ip, [sp, #-4]!)
   11a10:	ldr	r0, [pc, #12]	; 11a24 <_start@@Base+0x34>
   11a14:	ldr	r3, [pc, #12]	; 11a28 <_start@@Base+0x38>
   11a18:	bl	118dc <__libc_start_main@plt>
   11a1c:	bl	119cc <abort@plt>
   11a20:	andeq	ip, r1, r0, asr r7
   11a24:	andeq	r6, r1, ip, asr #32
   11a28:	strdeq	ip, [r1], -r0
   11a2c:	ldr	r3, [pc, #20]	; 11a48 <_start@@Base+0x58>
   11a30:	ldr	r2, [pc, #20]	; 11a4c <_start@@Base+0x5c>
   11a34:	add	r3, pc, r3
   11a38:	ldr	r2, [r3, r2]
   11a3c:	cmp	r2, #0
   11a40:	bxeq	lr
   11a44:	b	118f4 <__gmon_start__@plt>
   11a48:	andeq	ip, r1, r4, asr #11
   11a4c:	andeq	r0, r0, ip, lsr #1
   11a50:	ldr	r3, [pc, #28]	; 11a74 <_start@@Base+0x84>
   11a54:	ldr	r0, [pc, #28]	; 11a78 <_start@@Base+0x88>
   11a58:	sub	r3, r3, r0
   11a5c:	cmp	r3, #6
   11a60:	bxls	lr
   11a64:	ldr	r3, [pc, #16]	; 11a7c <_start@@Base+0x8c>
   11a68:	cmp	r3, #0
   11a6c:	bxeq	lr
   11a70:	bx	r3
   11a74:	muleq	r2, pc, r9	; <UNPREDICTABLE>
   11a78:	muleq	r2, ip, r9
   11a7c:	andeq	r0, r0, r0
   11a80:	ldr	r1, [pc, #36]	; 11aac <_start@@Base+0xbc>
   11a84:	ldr	r0, [pc, #36]	; 11ab0 <_start@@Base+0xc0>
   11a88:	sub	r1, r1, r0
   11a8c:	asr	r1, r1, #2
   11a90:	add	r1, r1, r1, lsr #31
   11a94:	asrs	r1, r1, #1
   11a98:	bxeq	lr
   11a9c:	ldr	r3, [pc, #16]	; 11ab4 <_start@@Base+0xc4>
   11aa0:	cmp	r3, #0
   11aa4:	bxeq	lr
   11aa8:	bx	r3
   11aac:	muleq	r2, ip, r9
   11ab0:	muleq	r2, ip, r9
   11ab4:	andeq	r0, r0, r0
   11ab8:	push	{r4, lr}
   11abc:	ldr	r4, [pc, #24]	; 11adc <_start@@Base+0xec>
   11ac0:	ldrb	r3, [r4]
   11ac4:	cmp	r3, #0
   11ac8:	popne	{r4, pc}
   11acc:	bl	11a50 <_start@@Base+0x60>
   11ad0:	mov	r3, #1
   11ad4:	strb	r3, [r4]
   11ad8:	pop	{r4, pc}
   11adc:	andeq	lr, r2, r0, lsr #19
   11ae0:	ldr	r0, [pc, #40]	; 11b10 <_start@@Base+0x120>
   11ae4:	ldr	r3, [r0]
   11ae8:	cmp	r3, #0
   11aec:	bne	11af4 <_start@@Base+0x104>
   11af0:	b	11a80 <_start@@Base+0x90>
   11af4:	ldr	r3, [pc, #24]	; 11b14 <_start@@Base+0x124>
   11af8:	cmp	r3, #0
   11afc:	beq	11af0 <_start@@Base+0x100>
   11b00:	push	{r4, lr}
   11b04:	blx	r3
   11b08:	pop	{r4, lr}
   11b0c:	b	11a80 <_start@@Base+0x90>
   11b10:	andeq	sp, r2, r4, lsl pc
   11b14:	andeq	r0, r0, r0

00011b18 <next@@Base>:
   11b18:	push	{fp, lr}
   11b1c:	add	fp, sp, #4
   11b20:	sub	sp, sp, #8
   11b24:	str	r0, [fp, #-8]
   11b28:	ldr	r3, [pc, #660]	; 11dc4 <next@@Base+0x2ac>
   11b2c:	add	r3, pc, r3
   11b30:	ldr	r1, [fp, #-8]
   11b34:	ldr	r2, [pc, #652]	; 11dc8 <next@@Base+0x2b0>
   11b38:	ldr	r2, [r3, r2]
   11b3c:	str	r1, [r2]
   11b40:	ldr	r2, [pc, #640]	; 11dc8 <next@@Base+0x2b0>
   11b44:	ldr	r2, [r3, r2]
   11b48:	ldr	r2, [r2, #204]	; 0xcc
   11b4c:	cmp	r2, #49	; 0x31
   11b50:	bhi	11b80 <next@@Base+0x68>
   11b54:	ldr	r2, [pc, #620]	; 11dc8 <next@@Base+0x2b0>
   11b58:	ldr	r2, [r3, r2]
   11b5c:	ldr	r2, [r2, #204]	; 0xcc
   11b60:	lsl	r2, r2, #2
   11b64:	ldr	r1, [pc, #604]	; 11dc8 <next@@Base+0x2b0>
   11b68:	ldr	r1, [r3, r1]
   11b6c:	add	r2, r2, r1
   11b70:	add	r2, r2, #4
   11b74:	ldr	r1, [fp, #-8]
   11b78:	str	r1, [r2]
   11b7c:	b	11bbc <next@@Base+0xa4>
   11b80:	ldr	r2, [pc, #576]	; 11dc8 <next@@Base+0x2b0>
   11b84:	ldr	r2, [r3, r2]
   11b88:	ldr	r2, [r2, #212]	; 0xd4
   11b8c:	add	r1, r2, #1
   11b90:	ldr	r2, [pc, #560]	; 11dc8 <next@@Base+0x2b0>
   11b94:	ldr	r2, [r3, r2]
   11b98:	str	r1, [r2, #212]	; 0xd4
   11b9c:	ldr	r2, [pc, #552]	; 11dcc <next@@Base+0x2b4>
   11ba0:	add	r2, pc, r2
   11ba4:	ldrd	r0, [r2]
   11ba8:	adds	r0, r0, #1
   11bac:	adc	r1, r1, #0
   11bb0:	ldr	r2, [pc, #536]	; 11dd0 <next@@Base+0x2b8>
   11bb4:	add	r2, pc, r2
   11bb8:	strd	r0, [r2]
   11bbc:	ldr	r2, [pc, #516]	; 11dc8 <next@@Base+0x2b0>
   11bc0:	ldr	r2, [r3, r2]
   11bc4:	ldr	r2, [r2, #204]	; 0xcc
   11bc8:	add	r1, r2, #1
   11bcc:	ldr	r2, [pc, #500]	; 11dc8 <next@@Base+0x2b0>
   11bd0:	ldr	r2, [r3, r2]
   11bd4:	str	r1, [r2, #204]	; 0xcc
   11bd8:	ldr	r2, [pc, #500]	; 11dd4 <next@@Base+0x2bc>
   11bdc:	ldr	r2, [r3, r2]
   11be0:	ldr	r2, [r2, #200]	; 0xc8
   11be4:	cmp	r2, #49	; 0x31
   11be8:	bhi	11c3c <next@@Base+0x124>
   11bec:	ldr	r2, [pc, #480]	; 11dd4 <next@@Base+0x2bc>
   11bf0:	ldr	r2, [r3, r2]
   11bf4:	ldr	r2, [r2, #200]	; 0xc8
   11bf8:	add	r0, r2, #1
   11bfc:	ldr	r1, [pc, #464]	; 11dd4 <next@@Base+0x2bc>
   11c00:	ldr	r1, [r3, r1]
   11c04:	str	r0, [r1, #200]	; 0xc8
   11c08:	ldr	r1, [pc, #452]	; 11dd4 <next@@Base+0x2bc>
   11c0c:	ldr	r1, [r3, r1]
   11c10:	ldr	r0, [pc, #448]	; 11dd8 <next@@Base+0x2c0>
   11c14:	ldr	r0, [r3, r0]
   11c18:	str	r0, [r1, r2, lsl #2]
   11c1c:	ldr	r2, [pc, #440]	; 11ddc <next@@Base+0x2c4>
   11c20:	add	r2, pc, r2
   11c24:	ldrd	r0, [r2, #8]
   11c28:	adds	r0, r0, #1
   11c2c:	adc	r1, r1, #0
   11c30:	ldr	r2, [pc, #424]	; 11de0 <next@@Base+0x2c8>
   11c34:	add	r2, pc, r2
   11c38:	strd	r0, [r2, #8]
   11c3c:	ldr	r2, [pc, #388]	; 11dc8 <next@@Base+0x2b0>
   11c40:	ldr	r2, [r3, r2]
   11c44:	ldr	r2, [r2, #232]	; 0xe8
   11c48:	cmp	r2, #0
   11c4c:	beq	11cb0 <next@@Base+0x198>
   11c50:	ldr	r2, [pc, #396]	; 11de4 <next@@Base+0x2cc>
   11c54:	add	r2, pc, r2
   11c58:	ldrd	r0, [r2, #16]
   11c5c:	adds	r0, r0, #1
   11c60:	adc	r1, r1, #0
   11c64:	ldr	r2, [pc, #380]	; 11de8 <next@@Base+0x2d0>
   11c68:	add	r2, pc, r2
   11c6c:	strd	r0, [r2, #16]
   11c70:	ldr	r2, [pc, #336]	; 11dc8 <next@@Base+0x2b0>
   11c74:	ldr	r3, [r3, r2]
   11c78:	ldr	r3, [r3, #232]	; 0xe8
   11c7c:	ldr	r2, [fp, #-8]
   11c80:	mov	r0, r2
   11c84:	blx	r3
   11c88:	mov	r3, r0
   11c8c:	ldr	r2, [pc, #344]	; 11dec <next@@Base+0x2d4>
   11c90:	add	r2, pc, r2
   11c94:	ldrd	r0, [r2, #24]
   11c98:	adds	r0, r0, #1
   11c9c:	adc	r1, r1, #0
   11ca0:	ldr	r2, [pc, #328]	; 11df0 <next@@Base+0x2d8>
   11ca4:	add	r2, pc, r2
   11ca8:	strd	r0, [r2, #24]
   11cac:	b	11db8 <next@@Base+0x2a0>
   11cb0:	ldr	r2, [pc, #272]	; 11dc8 <next@@Base+0x2b0>
   11cb4:	ldr	r2, [r3, r2]
   11cb8:	ldr	r2, [r2, #220]	; 0xdc
   11cbc:	cmp	r2, #0
   11cc0:	beq	11d8c <next@@Base+0x274>
   11cc4:	ldr	r2, [pc, #252]	; 11dc8 <next@@Base+0x2b0>
   11cc8:	ldr	r2, [r3, r2]
   11ccc:	ldr	r1, [r2, #224]	; 0xe0
   11cd0:	ldr	r2, [pc, #240]	; 11dc8 <next@@Base+0x2b0>
   11cd4:	ldr	r2, [r3, r2]
   11cd8:	ldr	r2, [r2, #220]	; 0xdc
   11cdc:	cmp	r1, r2
   11ce0:	bge	11d40 <next@@Base+0x228>
   11ce4:	ldr	r2, [pc, #220]	; 11dc8 <next@@Base+0x2b0>
   11ce8:	ldr	r2, [r3, r2]
   11cec:	ldr	r1, [r2, #228]	; 0xe4
   11cf0:	ldr	r2, [pc, #208]	; 11dc8 <next@@Base+0x2b0>
   11cf4:	ldr	r2, [r3, r2]
   11cf8:	ldr	r2, [r2, #224]	; 0xe0
   11cfc:	add	r0, r2, #1
   11d00:	ldr	ip, [pc, #192]	; 11dc8 <next@@Base+0x2b0>
   11d04:	ldr	r3, [r3, ip]
   11d08:	str	r0, [r3, #224]	; 0xe0
   11d0c:	mov	r3, r2
   11d10:	lsl	r3, r3, #2
   11d14:	add	r3, r1, r3
   11d18:	ldr	r3, [r3]
   11d1c:	ldr	r2, [pc, #208]	; 11df4 <next@@Base+0x2dc>
   11d20:	add	r2, pc, r2
   11d24:	ldrd	r0, [r2, #32]
   11d28:	adds	r0, r0, #1
   11d2c:	adc	r1, r1, #0
   11d30:	ldr	r2, [pc, #192]	; 11df8 <next@@Base+0x2e0>
   11d34:	add	r2, pc, r2
   11d38:	strd	r0, [r2, #32]
   11d3c:	b	11db8 <next@@Base+0x2a0>
   11d40:	ldr	r2, [pc, #128]	; 11dc8 <next@@Base+0x2b0>
   11d44:	ldr	r2, [r3, r2]
   11d48:	ldr	r2, [r2, #228]	; 0xe4
   11d4c:	ldr	r1, [pc, #116]	; 11dc8 <next@@Base+0x2b0>
   11d50:	ldr	r3, [r3, r1]
   11d54:	ldr	r3, [r3, #220]	; 0xdc
   11d58:	sub	r3, r3, #-1073741823	; 0xc0000001
   11d5c:	lsl	r3, r3, #2
   11d60:	add	r3, r2, r3
   11d64:	ldr	r3, [r3]
   11d68:	ldr	r2, [pc, #140]	; 11dfc <next@@Base+0x2e4>
   11d6c:	add	r2, pc, r2
   11d70:	ldrd	r0, [r2, #40]	; 0x28
   11d74:	adds	r0, r0, #1
   11d78:	adc	r1, r1, #0
   11d7c:	ldr	r2, [pc, #124]	; 11e00 <next@@Base+0x2e8>
   11d80:	add	r2, pc, r2
   11d84:	strd	r0, [r2, #40]	; 0x28
   11d88:	b	11db8 <next@@Base+0x2a0>
   11d8c:	ldr	r2, [pc, #52]	; 11dc8 <next@@Base+0x2b0>
   11d90:	ldr	r3, [r3, r2]
   11d94:	ldr	r3, [r3, #216]	; 0xd8
   11d98:	ldr	r2, [pc, #100]	; 11e04 <next@@Base+0x2ec>
   11d9c:	add	r2, pc, r2
   11da0:	ldrd	r0, [r2, #48]	; 0x30
   11da4:	adds	r0, r0, #1
   11da8:	adc	r1, r1, #0
   11dac:	ldr	r2, [pc, #84]	; 11e08 <next@@Base+0x2f0>
   11db0:	add	r2, pc, r2
   11db4:	strd	r0, [r2, #48]	; 0x30
   11db8:	mov	r0, r3
   11dbc:	sub	sp, fp, #4
   11dc0:	pop	{fp, pc}
   11dc4:	andeq	ip, r1, ip, asr #9
   11dc8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11dcc:	andeq	sp, r1, r8, ror r5
   11dd0:	andeq	sp, r1, r4, ror #10
   11dd4:	andeq	r0, r0, r4, asr #1
   11dd8:	andeq	r0, r0, r8, lsr #1
   11ddc:	strdeq	sp, [r1], -r8
   11de0:	andeq	sp, r1, r4, ror #9
   11de4:	andeq	sp, r1, r4, asr #9
   11de8:			; <UNDEFINED> instruction: 0x0001d4b0
   11dec:	andeq	sp, r1, r8, lsl #9
   11df0:	andeq	sp, r1, r4, ror r4
   11df4:	strdeq	sp, [r1], -r8
   11df8:	andeq	sp, r1, r4, ror #7
   11dfc:	andeq	sp, r1, ip, lsr #7
   11e00:	muleq	r1, r8, r3
   11e04:	andeq	sp, r1, ip, ror r3
   11e08:	andeq	sp, r1, r8, ror #6

00011e0c <next_reset@@Base>:
   11e0c:	push	{r4, r5, fp, lr}
   11e10:	add	fp, sp, #12
   11e14:	ldr	r4, [pc, #80]	; 11e6c <next_reset@@Base+0x60>
   11e18:	add	r4, pc, r4
   11e1c:	ldr	r3, [pc, #76]	; 11e70 <next_reset@@Base+0x64>
   11e20:	add	r3, pc, r3
   11e24:	ldrd	r2, [r3]
   11e28:	adds	r2, r2, #1
   11e2c:	adc	r3, r3, #0
   11e30:	ldr	r1, [pc, #60]	; 11e74 <next_reset@@Base+0x68>
   11e34:	add	r1, pc, r1
   11e38:	strd	r2, [r1]
   11e3c:	mov	r2, #236	; 0xec
   11e40:	mov	r1, #0
   11e44:	ldr	r3, [pc, #44]	; 11e78 <next_reset@@Base+0x6c>
   11e48:	ldr	r3, [r4, r3]
   11e4c:	mov	r0, r3
   11e50:	bl	1196c <memset@plt>
   11e54:	ldr	r3, [pc, #28]	; 11e78 <next_reset@@Base+0x6c>
   11e58:	ldr	r3, [r4, r3]
   11e5c:	mov	r2, #50	; 0x32
   11e60:	str	r2, [r3, #208]	; 0xd0
   11e64:	nop			; (mov r0, r0)
   11e68:	pop	{r4, r5, fp, pc}
   11e6c:	andeq	ip, r1, r0, ror #3
   11e70:	strdeq	sp, [r1], -r0
   11e74:	ldrdeq	sp, [r1], -ip
   11e78:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

00011e7c <push_back@@Base>:
   11e7c:	push	{fp, lr}
   11e80:	add	fp, sp, #4
   11e84:	sub	sp, sp, #8
   11e88:	str	r0, [fp, #-8]
   11e8c:	str	r1, [fp, #-12]
   11e90:	ldr	r3, [pc, #480]	; 12078 <push_back@@Base+0x1fc>
   11e94:	add	r3, pc, r3
   11e98:	ldr	r1, [fp, #-8]
   11e9c:	ldr	r2, [pc, #472]	; 1207c <push_back@@Base+0x200>
   11ea0:	ldr	r2, [r3, r2]
   11ea4:	str	r1, [r2]
   11ea8:	ldr	r1, [fp, #-12]
   11eac:	ldr	r2, [pc, #456]	; 1207c <push_back@@Base+0x200>
   11eb0:	ldr	r2, [r3, r2]
   11eb4:	str	r1, [r2, #204]	; 0xcc
   11eb8:	ldr	r2, [pc, #444]	; 1207c <push_back@@Base+0x200>
   11ebc:	ldr	r2, [r3, r2]
   11ec0:	ldr	r2, [r2, #408]	; 0x198
   11ec4:	cmp	r2, #49	; 0x31
   11ec8:	bhi	11f40 <push_back@@Base+0xc4>
   11ecc:	ldr	r2, [pc, #424]	; 1207c <push_back@@Base+0x200>
   11ed0:	ldr	r2, [r3, r2]
   11ed4:	ldr	r2, [r2, #408]	; 0x198
   11ed8:	lsl	r2, r2, #2
   11edc:	ldr	r1, [pc, #408]	; 1207c <push_back@@Base+0x200>
   11ee0:	ldr	r1, [r3, r1]
   11ee4:	add	r2, r2, r1
   11ee8:	add	r2, r2, #4
   11eec:	ldr	r1, [fp, #-8]
   11ef0:	str	r1, [r2]
   11ef4:	ldr	r2, [pc, #384]	; 1207c <push_back@@Base+0x200>
   11ef8:	ldr	r2, [r3, r2]
   11efc:	ldr	r2, [r2, #408]	; 0x198
   11f00:	add	r2, r2, #52	; 0x34
   11f04:	lsl	r2, r2, #2
   11f08:	ldr	r1, [pc, #364]	; 1207c <push_back@@Base+0x200>
   11f0c:	ldr	r1, [r3, r1]
   11f10:	add	r2, r2, r1
   11f14:	ldr	r1, [fp, #-12]
   11f18:	str	r1, [r2]
   11f1c:	ldr	r2, [pc, #348]	; 12080 <push_back@@Base+0x204>
   11f20:	add	r2, pc, r2
   11f24:	ldrd	r0, [r2]
   11f28:	adds	r0, r0, #1
   11f2c:	adc	r1, r1, #0
   11f30:	ldr	r2, [pc, #332]	; 12084 <push_back@@Base+0x208>
   11f34:	add	r2, pc, r2
   11f38:	strd	r0, [r2]
   11f3c:	b	11f7c <push_back@@Base+0x100>
   11f40:	ldr	r2, [pc, #308]	; 1207c <push_back@@Base+0x200>
   11f44:	ldr	r2, [r3, r2]
   11f48:	ldr	r2, [r2, #416]	; 0x1a0
   11f4c:	add	r1, r2, #1
   11f50:	ldr	r2, [pc, #292]	; 1207c <push_back@@Base+0x200>
   11f54:	ldr	r2, [r3, r2]
   11f58:	str	r1, [r2, #416]	; 0x1a0
   11f5c:	ldr	r2, [pc, #292]	; 12088 <push_back@@Base+0x20c>
   11f60:	add	r2, pc, r2
   11f64:	ldrd	r0, [r2, #8]
   11f68:	adds	r0, r0, #1
   11f6c:	adc	r1, r1, #0
   11f70:	ldr	r2, [pc, #276]	; 1208c <push_back@@Base+0x210>
   11f74:	add	r2, pc, r2
   11f78:	strd	r0, [r2, #8]
   11f7c:	ldr	r2, [pc, #248]	; 1207c <push_back@@Base+0x200>
   11f80:	ldr	r2, [r3, r2]
   11f84:	ldr	r2, [r2, #408]	; 0x198
   11f88:	add	r1, r2, #1
   11f8c:	ldr	r2, [pc, #232]	; 1207c <push_back@@Base+0x200>
   11f90:	ldr	r2, [r3, r2]
   11f94:	str	r1, [r2, #408]	; 0x198
   11f98:	ldr	r2, [pc, #240]	; 12090 <push_back@@Base+0x214>
   11f9c:	ldr	r2, [r3, r2]
   11fa0:	ldr	r2, [r2, #200]	; 0xc8
   11fa4:	cmp	r2, #49	; 0x31
   11fa8:	bhi	11ffc <push_back@@Base+0x180>
   11fac:	ldr	r2, [pc, #220]	; 12090 <push_back@@Base+0x214>
   11fb0:	ldr	r2, [r3, r2]
   11fb4:	ldr	r2, [r2, #200]	; 0xc8
   11fb8:	add	r0, r2, #1
   11fbc:	ldr	r1, [pc, #204]	; 12090 <push_back@@Base+0x214>
   11fc0:	ldr	r1, [r3, r1]
   11fc4:	str	r0, [r1, #200]	; 0xc8
   11fc8:	ldr	r1, [pc, #192]	; 12090 <push_back@@Base+0x214>
   11fcc:	ldr	r1, [r3, r1]
   11fd0:	ldr	r0, [pc, #188]	; 12094 <push_back@@Base+0x218>
   11fd4:	ldr	r0, [r3, r0]
   11fd8:	str	r0, [r1, r2, lsl #2]
   11fdc:	ldr	r2, [pc, #180]	; 12098 <push_back@@Base+0x21c>
   11fe0:	add	r2, pc, r2
   11fe4:	ldrd	r0, [r2, #16]
   11fe8:	adds	r0, r0, #1
   11fec:	adc	r1, r1, #0
   11ff0:	ldr	r2, [pc, #164]	; 1209c <push_back@@Base+0x220>
   11ff4:	add	r2, pc, r2
   11ff8:	strd	r0, [r2, #16]
   11ffc:	ldr	r2, [pc, #120]	; 1207c <push_back@@Base+0x200>
   12000:	ldr	r2, [r3, r2]
   12004:	ldr	r2, [r2, #420]	; 0x1a4
   12008:	cmp	r2, #0
   1200c:	beq	1206c <push_back@@Base+0x1f0>
   12010:	ldr	r2, [pc, #136]	; 120a0 <push_back@@Base+0x224>
   12014:	add	r2, pc, r2
   12018:	ldrd	r0, [r2, #24]
   1201c:	adds	r0, r0, #1
   12020:	adc	r1, r1, #0
   12024:	ldr	r2, [pc, #120]	; 120a4 <push_back@@Base+0x228>
   12028:	add	r2, pc, r2
   1202c:	strd	r0, [r2, #24]
   12030:	ldr	r2, [pc, #68]	; 1207c <push_back@@Base+0x200>
   12034:	ldr	r3, [r3, r2]
   12038:	ldr	r3, [r3, #420]	; 0x1a4
   1203c:	ldr	r2, [fp, #-8]
   12040:	ldr	r1, [fp, #-12]
   12044:	mov	r0, r2
   12048:	blx	r3
   1204c:	ldr	r3, [pc, #84]	; 120a8 <push_back@@Base+0x22c>
   12050:	add	r3, pc, r3
   12054:	ldrd	r2, [r3, #32]
   12058:	adds	r2, r2, #1
   1205c:	adc	r3, r3, #0
   12060:	ldr	r1, [pc, #68]	; 120ac <push_back@@Base+0x230>
   12064:	add	r1, pc, r1
   12068:	strd	r2, [r1, #32]
   1206c:	nop			; (mov r0, r0)
   12070:	sub	sp, fp, #4
   12074:	pop	{fp, pc}
   12078:	andeq	ip, r1, r4, ror #2
   1207c:	andeq	r0, r0, r0, lsr #1
   12080:	andeq	sp, r1, r8, asr #3
   12084:			; <UNDEFINED> instruction: 0x0001d1b4
   12088:	andeq	sp, r1, r8, lsl #3
   1208c:	andeq	sp, r1, r4, ror r1
   12090:	andeq	r0, r0, r4, asr #1
   12094:	andeq	r0, r0, r0, asr #1
   12098:	andeq	sp, r1, r8, lsl #2
   1209c:	strdeq	sp, [r1], -r4
   120a0:	ldrdeq	sp, [r1], -r4
   120a4:	andeq	sp, r1, r0, asr #1
   120a8:	muleq	r1, r8, r0
   120ac:	andeq	sp, r1, r4, lsl #1

000120b0 <push_back_reset@@Base>:
   120b0:	push	{r4, r5, fp, lr}
   120b4:	add	fp, sp, #12
   120b8:	ldr	r4, [pc, #80]	; 12110 <push_back_reset@@Base+0x60>
   120bc:	add	r4, pc, r4
   120c0:	ldr	r3, [pc, #76]	; 12114 <push_back_reset@@Base+0x64>
   120c4:	add	r3, pc, r3
   120c8:	ldrd	r2, [r3]
   120cc:	adds	r2, r2, #1
   120d0:	adc	r3, r3, #0
   120d4:	ldr	r1, [pc, #60]	; 12118 <push_back_reset@@Base+0x68>
   120d8:	add	r1, pc, r1
   120dc:	strd	r2, [r1]
   120e0:	mov	r2, #424	; 0x1a8
   120e4:	mov	r1, #0
   120e8:	ldr	r3, [pc, #44]	; 1211c <push_back_reset@@Base+0x6c>
   120ec:	ldr	r3, [r4, r3]
   120f0:	mov	r0, r3
   120f4:	bl	1196c <memset@plt>
   120f8:	ldr	r3, [pc, #28]	; 1211c <push_back_reset@@Base+0x6c>
   120fc:	ldr	r3, [r4, r3]
   12100:	mov	r2, #50	; 0x32
   12104:	str	r2, [r3, #412]	; 0x19c
   12108:	nop			; (mov r0, r0)
   1210c:	pop	{r4, r5, fp, pc}
   12110:	andeq	fp, r1, ip, lsr pc
   12114:	andeq	sp, r1, ip, lsl r0
   12118:	andeq	sp, r1, r8
   1211c:	andeq	r0, r0, r0, lsr #1

00012120 <setup@@Base>:
   12120:	push	{fp, lr}
   12124:	add	fp, sp, #4
   12128:	ldr	r3, [pc, #104]	; 12198 <setup@@Base+0x78>
   1212c:	add	r3, pc, r3
   12130:	ldrd	r2, [r3]
   12134:	adds	r2, r2, #1
   12138:	adc	r3, r3, #0
   1213c:	ldr	r1, [pc, #88]	; 1219c <setup@@Base+0x7c>
   12140:	add	r1, pc, r1
   12144:	strd	r2, [r1]
   12148:	bl	11e0c <next_reset@@Base>
   1214c:	ldr	r3, [pc, #76]	; 121a0 <setup@@Base+0x80>
   12150:	add	r3, pc, r3
   12154:	ldrd	r2, [r3, #8]
   12158:	adds	r2, r2, #1
   1215c:	adc	r3, r3, #0
   12160:	ldr	r1, [pc, #60]	; 121a4 <setup@@Base+0x84>
   12164:	add	r1, pc, r1
   12168:	strd	r2, [r1, #8]
   1216c:	bl	120b0 <push_back_reset@@Base>
   12170:	ldr	r3, [pc, #48]	; 121a8 <setup@@Base+0x88>
   12174:	add	r3, pc, r3
   12178:	ldrd	r2, [r3, #16]
   1217c:	adds	r2, r2, #1
   12180:	adc	r3, r3, #0
   12184:	ldr	r1, [pc, #32]	; 121ac <setup@@Base+0x8c>
   12188:	add	r1, pc, r1
   1218c:	strd	r2, [r1, #16]
   12190:	nop			; (mov r0, r0)
   12194:	pop	{fp, pc}
   12198:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1219c:	andeq	ip, r1, r8, lsl #31
   121a0:	andeq	ip, r1, r8, ror pc
   121a4:	andeq	ip, r1, r4, ror #30
   121a8:	andeq	ip, r1, r4, asr pc
   121ac:	andeq	ip, r1, r0, asr #30

000121b0 <no_int_as_first_stuff@@Base>:
   121b0:	push	{r4, fp, lr}
   121b4:	add	fp, sp, #8
   121b8:	sub	sp, sp, #28
   121bc:	ldr	r4, [pc, #384]	; 12344 <no_int_as_first_stuff@@Base+0x194>
   121c0:	add	r4, pc, r4
   121c4:	ldr	r3, [pc, #380]	; 12348 <no_int_as_first_stuff@@Base+0x198>
   121c8:	add	r3, pc, r3
   121cc:	ldrd	r2, [r3]
   121d0:	adds	r2, r2, #1
   121d4:	adc	r3, r3, #0
   121d8:	ldr	r1, [pc, #364]	; 1234c <no_int_as_first_stuff@@Base+0x19c>
   121dc:	add	r1, pc, r1
   121e0:	strd	r2, [r1]
   121e4:	sub	r2, fp, #32
   121e8:	sub	r3, fp, #36	; 0x24
   121ec:	mov	r1, r2
   121f0:	mov	r0, r3
   121f4:	bl	18930 <init_grammar@@Base>
   121f8:	ldr	r3, [pc, #336]	; 12350 <no_int_as_first_stuff@@Base+0x1a0>
   121fc:	add	r3, pc, r3
   12200:	ldrd	r2, [r3, #8]
   12204:	adds	r2, r2, #1
   12208:	adc	r3, r3, #0
   1220c:	ldr	r1, [pc, #320]	; 12354 <no_int_as_first_stuff@@Base+0x1a4>
   12210:	add	r1, pc, r1
   12214:	strd	r2, [r1, #8]
   12218:	mov	r3, #0
   1221c:	str	r3, [fp, #-16]
   12220:	mov	r0, #4
   12224:	bl	118d0 <malloc@plt>
   12228:	mov	r3, r0
   1222c:	str	r3, [fp, #-20]	; 0xffffffec
   12230:	ldr	r0, [fp, #-20]	; 0xffffffec
   12234:	bl	16fe8 <init_token_opar@@Base>
   12238:	ldr	r3, [pc, #280]	; 12358 <no_int_as_first_stuff@@Base+0x1a8>
   1223c:	add	r3, pc, r3
   12240:	ldrd	r2, [r3, #16]
   12244:	adds	r2, r2, #1
   12248:	adc	r3, r3, #0
   1224c:	ldr	r1, [pc, #264]	; 1235c <no_int_as_first_stuff@@Base+0x1ac>
   12250:	add	r1, pc, r1
   12254:	strd	r2, [r1, #16]
   12258:	ldr	r3, [pc, #256]	; 12360 <no_int_as_first_stuff@@Base+0x1b0>
   1225c:	ldr	r3, [r4, r3]
   12260:	ldr	r2, [fp, #-20]	; 0xffffffec
   12264:	str	r2, [r3, #216]	; 0xd8
   12268:	sub	r3, fp, #36	; 0x24
   1226c:	mov	r0, r3
   12270:	bl	18a48 <read_function_ast_node@@Base>
   12274:	str	r0, [fp, #-16]
   12278:	ldr	r3, [pc, #224]	; 12360 <no_int_as_first_stuff@@Base+0x1b0>
   1227c:	ldr	r3, [r4, r3]
   12280:	ldr	r3, [r3, #204]	; 0xcc
   12284:	cmp	r3, #1
   12288:	beq	122cc <no_int_as_first_stuff@@Base+0x11c>
   1228c:	ldr	r3, [pc, #208]	; 12364 <no_int_as_first_stuff@@Base+0x1b4>
   12290:	add	r3, pc, r3
   12294:	ldrd	r2, [r3, #24]
   12298:	adds	r2, r2, #1
   1229c:	adc	r3, r3, #0
   122a0:	ldr	r1, [pc, #192]	; 12368 <no_int_as_first_stuff@@Base+0x1b8>
   122a4:	add	r1, pc, r1
   122a8:	strd	r2, [r1, #24]
   122ac:	ldr	r3, [pc, #184]	; 1236c <no_int_as_first_stuff@@Base+0x1bc>
   122b0:	add	r3, pc, r3
   122b4:	mov	r2, #41	; 0x29
   122b8:	ldr	r1, [pc, #176]	; 12370 <no_int_as_first_stuff@@Base+0x1c0>
   122bc:	add	r1, pc, r1
   122c0:	ldr	r0, [pc, #172]	; 12374 <no_int_as_first_stuff@@Base+0x1c4>
   122c4:	add	r0, pc, r0
   122c8:	bl	119e4 <__assert_fail@plt>
   122cc:	ldr	r3, [fp, #-16]
   122d0:	cmp	r3, #0
   122d4:	beq	12318 <no_int_as_first_stuff@@Base+0x168>
   122d8:	ldr	r3, [pc, #152]	; 12378 <no_int_as_first_stuff@@Base+0x1c8>
   122dc:	add	r3, pc, r3
   122e0:	ldrd	r2, [r3, #40]	; 0x28
   122e4:	adds	r2, r2, #1
   122e8:	adc	r3, r3, #0
   122ec:	ldr	r1, [pc, #136]	; 1237c <no_int_as_first_stuff@@Base+0x1cc>
   122f0:	add	r1, pc, r1
   122f4:	strd	r2, [r1, #40]	; 0x28
   122f8:	ldr	r3, [pc, #128]	; 12380 <no_int_as_first_stuff@@Base+0x1d0>
   122fc:	add	r3, pc, r3
   12300:	mov	r2, #42	; 0x2a
   12304:	ldr	r1, [pc, #120]	; 12384 <no_int_as_first_stuff@@Base+0x1d4>
   12308:	add	r1, pc, r1
   1230c:	ldr	r0, [pc, #116]	; 12388 <no_int_as_first_stuff@@Base+0x1d8>
   12310:	add	r0, pc, r0
   12314:	bl	119e4 <__assert_fail@plt>
   12318:	ldr	r3, [pc, #108]	; 1238c <no_int_as_first_stuff@@Base+0x1dc>
   1231c:	add	r3, pc, r3
   12320:	ldrd	r2, [r3, #32]
   12324:	adds	r2, r2, #1
   12328:	adc	r3, r3, #0
   1232c:	ldr	r1, [pc, #92]	; 12390 <no_int_as_first_stuff@@Base+0x1e0>
   12330:	add	r1, pc, r1
   12334:	strd	r2, [r1, #32]
   12338:	nop			; (mov r0, r0)
   1233c:	sub	sp, fp, #8
   12340:	pop	{r4, fp, pc}
   12344:	andeq	fp, r1, r8, lsr lr
   12348:	ldrdeq	ip, [r1], -r0
   1234c:			; <UNDEFINED> instruction: 0x0001cebc
   12350:	muleq	r1, ip, lr
   12354:	andeq	ip, r1, r8, lsl #29
   12358:	andeq	ip, r1, ip, asr lr
   1235c:	andeq	ip, r1, r8, asr #28
   12360:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12364:	andeq	ip, r1, r8, lsl #28
   12368:	strdeq	ip, [r1], -r4
   1236c:	andeq	sl, r0, r8, ror r9
   12370:	andeq	sl, r0, r4, asr #9
   12374:	andeq	sl, r0, r8, lsl r5
   12378:			; <UNDEFINED> instruction: 0x0001cdbc
   1237c:	andeq	ip, r1, r8, lsr #27
   12380:	andeq	sl, r0, ip, lsr #18
   12384:	andeq	sl, r0, r8, ror r4
   12388:	andeq	sl, r0, r8, ror #9
   1238c:	andeq	ip, r1, ip, ror sp
   12390:	andeq	ip, r1, r8, ror #26

00012394 <int_but_not_followed_by_function@@Base>:
   12394:	push	{r4, r5, fp, lr}
   12398:	add	fp, sp, #12
   1239c:	sub	sp, sp, #24
   123a0:	ldr	r4, [pc, #508]	; 125a4 <int_but_not_followed_by_function@@Base+0x210>
   123a4:	add	r4, pc, r4
   123a8:	ldr	r3, [pc, #504]	; 125a8 <int_but_not_followed_by_function@@Base+0x214>
   123ac:	add	r3, pc, r3
   123b0:	ldrd	r2, [r3]
   123b4:	adds	r2, r2, #1
   123b8:	adc	r3, r3, #0
   123bc:	ldr	r1, [pc, #488]	; 125ac <int_but_not_followed_by_function@@Base+0x218>
   123c0:	add	r1, pc, r1
   123c4:	strd	r2, [r1]
   123c8:	mov	r3, #0
   123cc:	str	r3, [fp, #-16]
   123d0:	sub	r2, fp, #32
   123d4:	sub	r3, fp, #36	; 0x24
   123d8:	mov	r1, r2
   123dc:	mov	r0, r3
   123e0:	bl	18930 <init_grammar@@Base>
   123e4:	ldr	r3, [pc, #452]	; 125b0 <int_but_not_followed_by_function@@Base+0x21c>
   123e8:	add	r3, pc, r3
   123ec:	ldrd	r2, [r3, #8]
   123f0:	adds	r2, r2, #1
   123f4:	adc	r3, r3, #0
   123f8:	ldr	r1, [pc, #436]	; 125b4 <int_but_not_followed_by_function@@Base+0x220>
   123fc:	add	r1, pc, r1
   12400:	strd	r2, [r1, #8]
   12404:	mov	r0, #8
   12408:	bl	118d0 <malloc@plt>
   1240c:	mov	r3, r0
   12410:	str	r3, [fp, #-20]	; 0xffffffec
   12414:	mov	r0, #4
   12418:	bl	118d0 <malloc@plt>
   1241c:	mov	r3, r0
   12420:	mov	r2, r3
   12424:	ldr	r3, [fp, #-20]	; 0xffffffec
   12428:	str	r2, [r3]
   1242c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12430:	ldr	r3, [r3]
   12434:	mov	r0, r3
   12438:	bl	16ecc <init_token_int_type@@Base>
   1243c:	ldr	r3, [pc, #372]	; 125b8 <int_but_not_followed_by_function@@Base+0x224>
   12440:	add	r3, pc, r3
   12444:	ldrd	r2, [r3, #16]
   12448:	adds	r2, r2, #1
   1244c:	adc	r3, r3, #0
   12450:	ldr	r1, [pc, #356]	; 125bc <int_but_not_followed_by_function@@Base+0x228>
   12454:	add	r1, pc, r1
   12458:	strd	r2, [r1, #16]
   1245c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12460:	add	r5, r3, #4
   12464:	mov	r0, #4
   12468:	bl	118d0 <malloc@plt>
   1246c:	mov	r3, r0
   12470:	str	r3, [r5]
   12474:	ldr	r3, [fp, #-20]	; 0xffffffec
   12478:	add	r3, r3, #4
   1247c:	ldr	r3, [r3]
   12480:	mov	r0, r3
   12484:	bl	16fe8 <init_token_opar@@Base>
   12488:	ldr	r3, [pc, #304]	; 125c0 <int_but_not_followed_by_function@@Base+0x22c>
   1248c:	add	r3, pc, r3
   12490:	ldrd	r2, [r3, #24]
   12494:	adds	r2, r2, #1
   12498:	adc	r3, r3, #0
   1249c:	ldr	r1, [pc, #288]	; 125c4 <int_but_not_followed_by_function@@Base+0x230>
   124a0:	add	r1, pc, r1
   124a4:	strd	r2, [r1, #24]
   124a8:	ldr	r3, [pc, #280]	; 125c8 <int_but_not_followed_by_function@@Base+0x234>
   124ac:	ldr	r3, [r4, r3]
   124b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   124b4:	str	r2, [r3, #228]	; 0xe4
   124b8:	ldr	r3, [pc, #264]	; 125c8 <int_but_not_followed_by_function@@Base+0x234>
   124bc:	ldr	r3, [r4, r3]
   124c0:	mov	r2, #2
   124c4:	str	r2, [r3, #220]	; 0xdc
   124c8:	sub	r3, fp, #36	; 0x24
   124cc:	mov	r0, r3
   124d0:	bl	18a48 <read_function_ast_node@@Base>
   124d4:	str	r0, [fp, #-16]
   124d8:	ldr	r3, [pc, #232]	; 125c8 <int_but_not_followed_by_function@@Base+0x234>
   124dc:	ldr	r3, [r4, r3]
   124e0:	ldr	r3, [r3, #204]	; 0xcc
   124e4:	cmp	r3, #2
   124e8:	beq	1252c <int_but_not_followed_by_function@@Base+0x198>
   124ec:	ldr	r3, [pc, #216]	; 125cc <int_but_not_followed_by_function@@Base+0x238>
   124f0:	add	r3, pc, r3
   124f4:	ldrd	r2, [r3, #32]
   124f8:	adds	r2, r2, #1
   124fc:	adc	r3, r3, #0
   12500:	ldr	r1, [pc, #200]	; 125d0 <int_but_not_followed_by_function@@Base+0x23c>
   12504:	add	r1, pc, r1
   12508:	strd	r2, [r1, #32]
   1250c:	ldr	r3, [pc, #192]	; 125d4 <int_but_not_followed_by_function@@Base+0x240>
   12510:	add	r3, pc, r3
   12514:	mov	r2, #67	; 0x43
   12518:	ldr	r1, [pc, #184]	; 125d8 <int_but_not_followed_by_function@@Base+0x244>
   1251c:	add	r1, pc, r1
   12520:	ldr	r0, [pc, #180]	; 125dc <int_but_not_followed_by_function@@Base+0x248>
   12524:	add	r0, pc, r0
   12528:	bl	119e4 <__assert_fail@plt>
   1252c:	ldr	r3, [fp, #-16]
   12530:	cmp	r3, #0
   12534:	beq	12578 <int_but_not_followed_by_function@@Base+0x1e4>
   12538:	ldr	r3, [pc, #160]	; 125e0 <int_but_not_followed_by_function@@Base+0x24c>
   1253c:	add	r3, pc, r3
   12540:	ldrd	r2, [r3, #48]	; 0x30
   12544:	adds	r2, r2, #1
   12548:	adc	r3, r3, #0
   1254c:	ldr	r1, [pc, #144]	; 125e4 <int_but_not_followed_by_function@@Base+0x250>
   12550:	add	r1, pc, r1
   12554:	strd	r2, [r1, #48]	; 0x30
   12558:	ldr	r3, [pc, #136]	; 125e8 <int_but_not_followed_by_function@@Base+0x254>
   1255c:	add	r3, pc, r3
   12560:	mov	r2, #68	; 0x44
   12564:	ldr	r1, [pc, #128]	; 125ec <int_but_not_followed_by_function@@Base+0x258>
   12568:	add	r1, pc, r1
   1256c:	ldr	r0, [pc, #124]	; 125f0 <int_but_not_followed_by_function@@Base+0x25c>
   12570:	add	r0, pc, r0
   12574:	bl	119e4 <__assert_fail@plt>
   12578:	ldr	r3, [pc, #116]	; 125f4 <int_but_not_followed_by_function@@Base+0x260>
   1257c:	add	r3, pc, r3
   12580:	ldrd	r2, [r3, #40]	; 0x28
   12584:	adds	r2, r2, #1
   12588:	adc	r3, r3, #0
   1258c:	ldr	r1, [pc, #100]	; 125f8 <int_but_not_followed_by_function@@Base+0x264>
   12590:	add	r1, pc, r1
   12594:	strd	r2, [r1, #40]	; 0x28
   12598:	nop			; (mov r0, r0)
   1259c:	sub	sp, fp, #12
   125a0:	pop	{r4, r5, fp, pc}
   125a4:	andeq	fp, r1, r4, asr ip
   125a8:			; <UNDEFINED> instruction: 0x0001ccb4
   125ac:	andeq	ip, r1, r0, lsr #25
   125b0:	andeq	ip, r1, r8, ror ip
   125b4:	andeq	ip, r1, r4, ror #24
   125b8:	andeq	ip, r1, r0, lsr #24
   125bc:	andeq	ip, r1, ip, lsl #24
   125c0:	ldrdeq	ip, [r1], -r4
   125c4:	andeq	ip, r1, r0, asr #23
   125c8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   125cc:	andeq	ip, r1, r0, ror fp
   125d0:	andeq	ip, r1, ip, asr fp
   125d4:	andeq	sl, r0, r0, lsr r7
   125d8:	andeq	sl, r0, r4, ror #4
   125dc:	andeq	sl, r0, r0, ror #5
   125e0:	andeq	ip, r1, r4, lsr #22
   125e4:	andeq	ip, r1, r0, lsl fp
   125e8:	andeq	sl, r0, r4, ror #13
   125ec:	andeq	sl, r0, r8, lsl r2
   125f0:	andeq	sl, r0, r8, lsl #5
   125f4:	andeq	ip, r1, r4, ror #21
   125f8:	ldrdeq	ip, [r1], -r0

000125fc <boolean_expression_is_read_properly@@Base>:
   125fc:	push	{r4, r5, fp, lr}
   12600:	add	fp, sp, #12
   12604:	sub	sp, sp, #32
   12608:	ldr	r4, [pc, #908]	; 1299c <boolean_expression_is_read_properly@@Base+0x3a0>
   1260c:	add	r4, pc, r4
   12610:	ldr	r3, [pc, #904]	; 129a0 <boolean_expression_is_read_properly@@Base+0x3a4>
   12614:	add	r3, pc, r3
   12618:	ldrd	r2, [r3]
   1261c:	adds	r2, r2, #1
   12620:	adc	r3, r3, #0
   12624:	ldr	r1, [pc, #888]	; 129a4 <boolean_expression_is_read_properly@@Base+0x3a8>
   12628:	add	r1, pc, r1
   1262c:	strd	r2, [r1]
   12630:	mov	r3, #0
   12634:	str	r3, [fp, #-16]
   12638:	mov	r3, #0
   1263c:	str	r3, [fp, #-20]	; 0xffffffec
   12640:	mov	r0, #3
   12644:	bl	118d0 <malloc@plt>
   12648:	mov	r3, r0
   1264c:	str	r3, [fp, #-24]	; 0xffffffe8
   12650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12654:	mov	r2, #33	; 0x21
   12658:	strb	r2, [r3]
   1265c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12660:	add	r3, r3, #1
   12664:	mov	r2, #61	; 0x3d
   12668:	strb	r2, [r3]
   1266c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12670:	add	r3, r3, #2
   12674:	mov	r2, #0
   12678:	strb	r2, [r3]
   1267c:	sub	r2, fp, #40	; 0x28
   12680:	sub	r3, fp, #44	; 0x2c
   12684:	mov	r1, r2
   12688:	mov	r0, r3
   1268c:	bl	18930 <init_grammar@@Base>
   12690:	ldr	r3, [pc, #784]	; 129a8 <boolean_expression_is_read_properly@@Base+0x3ac>
   12694:	add	r3, pc, r3
   12698:	ldrd	r2, [r3, #8]
   1269c:	adds	r2, r2, #1
   126a0:	adc	r3, r3, #0
   126a4:	ldr	r1, [pc, #768]	; 129ac <boolean_expression_is_read_properly@@Base+0x3b0>
   126a8:	add	r1, pc, r1
   126ac:	strd	r2, [r1, #8]
   126b0:	mov	r0, #20
   126b4:	bl	118d0 <malloc@plt>
   126b8:	mov	r3, r0
   126bc:	str	r3, [fp, #-28]	; 0xffffffe4
   126c0:	mov	r0, #8
   126c4:	bl	118d0 <malloc@plt>
   126c8:	mov	r3, r0
   126cc:	mov	r2, r3
   126d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126d4:	str	r2, [r3]
   126d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126dc:	ldr	r3, [r3]
   126e0:	mov	r1, #2
   126e4:	mov	r0, r3
   126e8:	bl	16f20 <init_token_int_value@@Base>
   126ec:	ldr	r3, [pc, #700]	; 129b0 <boolean_expression_is_read_properly@@Base+0x3b4>
   126f0:	add	r3, pc, r3
   126f4:	ldrd	r2, [r3, #16]
   126f8:	adds	r2, r2, #1
   126fc:	adc	r3, r3, #0
   12700:	ldr	r1, [pc, #684]	; 129b4 <boolean_expression_is_read_properly@@Base+0x3b8>
   12704:	add	r1, pc, r1
   12708:	strd	r2, [r1, #16]
   1270c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12710:	add	r5, r3, #4
   12714:	mov	r0, #8
   12718:	bl	118d0 <malloc@plt>
   1271c:	mov	r3, r0
   12720:	str	r3, [r5]
   12724:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12728:	add	r3, r3, #4
   1272c:	ldr	r3, [r3]
   12730:	mov	r1, #2
   12734:	mov	r0, r3
   12738:	bl	16f20 <init_token_int_value@@Base>
   1273c:	ldr	r3, [pc, #628]	; 129b8 <boolean_expression_is_read_properly@@Base+0x3bc>
   12740:	add	r3, pc, r3
   12744:	ldrd	r2, [r3, #24]
   12748:	adds	r2, r2, #1
   1274c:	adc	r3, r3, #0
   12750:	ldr	r1, [pc, #612]	; 129bc <boolean_expression_is_read_properly@@Base+0x3c0>
   12754:	add	r1, pc, r1
   12758:	strd	r2, [r1, #24]
   1275c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12760:	add	r5, r3, #8
   12764:	mov	r0, #8
   12768:	bl	118d0 <malloc@plt>
   1276c:	mov	r3, r0
   12770:	str	r3, [r5]
   12774:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12778:	add	r3, r3, #8
   1277c:	ldr	r3, [r3]
   12780:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12784:	mov	r0, r3
   12788:	bl	172dc <init_token_boolean_op@@Base>
   1278c:	ldr	r3, [pc, #556]	; 129c0 <boolean_expression_is_read_properly@@Base+0x3c4>
   12790:	add	r3, pc, r3
   12794:	ldrd	r2, [r3, #32]
   12798:	adds	r2, r2, #1
   1279c:	adc	r3, r3, #0
   127a0:	ldr	r1, [pc, #540]	; 129c4 <boolean_expression_is_read_properly@@Base+0x3c8>
   127a4:	add	r1, pc, r1
   127a8:	strd	r2, [r1, #32]
   127ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127b0:	add	r5, r3, #12
   127b4:	mov	r0, #8
   127b8:	bl	118d0 <malloc@plt>
   127bc:	mov	r3, r0
   127c0:	str	r3, [r5]
   127c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127c8:	add	r3, r3, #12
   127cc:	ldr	r3, [r3]
   127d0:	mov	r1, #1
   127d4:	mov	r0, r3
   127d8:	bl	16f20 <init_token_int_value@@Base>
   127dc:	ldr	r3, [pc, #484]	; 129c8 <boolean_expression_is_read_properly@@Base+0x3cc>
   127e0:	add	r3, pc, r3
   127e4:	ldrd	r2, [r3, #40]	; 0x28
   127e8:	adds	r2, r2, #1
   127ec:	adc	r3, r3, #0
   127f0:	ldr	r1, [pc, #468]	; 129cc <boolean_expression_is_read_properly@@Base+0x3d0>
   127f4:	add	r1, pc, r1
   127f8:	strd	r2, [r1, #40]	; 0x28
   127fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12800:	add	r5, r3, #16
   12804:	mov	r0, #4
   12808:	bl	118d0 <malloc@plt>
   1280c:	mov	r3, r0
   12810:	str	r3, [r5]
   12814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12818:	add	r3, r3, #16
   1281c:	ldr	r3, [r3]
   12820:	mov	r0, r3
   12824:	bl	1703c <init_token_cpar@@Base>
   12828:	ldr	r3, [pc, #416]	; 129d0 <boolean_expression_is_read_properly@@Base+0x3d4>
   1282c:	add	r3, pc, r3
   12830:	ldrd	r2, [r3, #48]	; 0x30
   12834:	adds	r2, r2, #1
   12838:	adc	r3, r3, #0
   1283c:	ldr	r1, [pc, #400]	; 129d4 <boolean_expression_is_read_properly@@Base+0x3d8>
   12840:	add	r1, pc, r1
   12844:	strd	r2, [r1, #48]	; 0x30
   12848:	ldr	r3, [pc, #392]	; 129d8 <boolean_expression_is_read_properly@@Base+0x3dc>
   1284c:	ldr	r3, [r4, r3]
   12850:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12854:	str	r2, [r3, #228]	; 0xe4
   12858:	ldr	r3, [pc, #376]	; 129d8 <boolean_expression_is_read_properly@@Base+0x3dc>
   1285c:	ldr	r3, [r4, r3]
   12860:	mov	r2, #5
   12864:	str	r2, [r3, #220]	; 0xdc
   12868:	sub	r3, fp, #44	; 0x2c
   1286c:	mov	r0, r3
   12870:	bl	19714 <read_boolean_expression@@Base>
   12874:	str	r0, [fp, #-16]
   12878:	ldr	r3, [pc, #344]	; 129d8 <boolean_expression_is_read_properly@@Base+0x3dc>
   1287c:	ldr	r3, [r4, r3]
   12880:	ldr	r3, [r3, #204]	; 0xcc
   12884:	cmp	r3, #5
   12888:	beq	128cc <boolean_expression_is_read_properly@@Base+0x2d0>
   1288c:	ldr	r3, [pc, #328]	; 129dc <boolean_expression_is_read_properly@@Base+0x3e0>
   12890:	add	r3, pc, r3
   12894:	ldrd	r2, [r3, #56]	; 0x38
   12898:	adds	r2, r2, #1
   1289c:	adc	r3, r3, #0
   128a0:	ldr	r1, [pc, #312]	; 129e0 <boolean_expression_is_read_properly@@Base+0x3e4>
   128a4:	add	r1, pc, r1
   128a8:	strd	r2, [r1, #56]	; 0x38
   128ac:	ldr	r3, [pc, #304]	; 129e4 <boolean_expression_is_read_properly@@Base+0x3e8>
   128b0:	add	r3, pc, r3
   128b4:	mov	r2, #105	; 0x69
   128b8:	ldr	r1, [pc, #296]	; 129e8 <boolean_expression_is_read_properly@@Base+0x3ec>
   128bc:	add	r1, pc, r1
   128c0:	ldr	r0, [pc, #292]	; 129ec <boolean_expression_is_read_properly@@Base+0x3f0>
   128c4:	add	r0, pc, r0
   128c8:	bl	119e4 <__assert_fail@plt>
   128cc:	ldr	r3, [pc, #284]	; 129f0 <boolean_expression_is_read_properly@@Base+0x3f4>
   128d0:	ldr	r3, [r4, r3]
   128d4:	ldr	r3, [r3, #408]	; 0x198
   128d8:	cmp	r3, #1
   128dc:	beq	12920 <boolean_expression_is_read_properly@@Base+0x324>
   128e0:	ldr	r3, [pc, #268]	; 129f4 <boolean_expression_is_read_properly@@Base+0x3f8>
   128e4:	add	r3, pc, r3
   128e8:	ldrd	r2, [r3, #64]	; 0x40
   128ec:	adds	r2, r2, #1
   128f0:	adc	r3, r3, #0
   128f4:	ldr	r1, [pc, #252]	; 129f8 <boolean_expression_is_read_properly@@Base+0x3fc>
   128f8:	add	r1, pc, r1
   128fc:	strd	r2, [r1, #64]	; 0x40
   12900:	ldr	r3, [pc, #244]	; 129fc <boolean_expression_is_read_properly@@Base+0x400>
   12904:	add	r3, pc, r3
   12908:	mov	r2, #106	; 0x6a
   1290c:	ldr	r1, [pc, #236]	; 12a00 <boolean_expression_is_read_properly@@Base+0x404>
   12910:	add	r1, pc, r1
   12914:	ldr	r0, [pc, #232]	; 12a04 <boolean_expression_is_read_properly@@Base+0x408>
   12918:	add	r0, pc, r0
   1291c:	bl	119e4 <__assert_fail@plt>
   12920:	ldr	r3, [fp, #-16]
   12924:	ldr	r3, [r3]
   12928:	cmp	r3, #5
   1292c:	beq	12970 <boolean_expression_is_read_properly@@Base+0x374>
   12930:	ldr	r3, [pc, #208]	; 12a08 <boolean_expression_is_read_properly@@Base+0x40c>
   12934:	add	r3, pc, r3
   12938:	ldrd	r2, [r3, #80]	; 0x50
   1293c:	adds	r2, r2, #1
   12940:	adc	r3, r3, #0
   12944:	ldr	r1, [pc, #192]	; 12a0c <boolean_expression_is_read_properly@@Base+0x410>
   12948:	add	r1, pc, r1
   1294c:	strd	r2, [r1, #80]	; 0x50
   12950:	ldr	r3, [pc, #184]	; 12a10 <boolean_expression_is_read_properly@@Base+0x414>
   12954:	add	r3, pc, r3
   12958:	mov	r2, #107	; 0x6b
   1295c:	ldr	r1, [pc, #176]	; 12a14 <boolean_expression_is_read_properly@@Base+0x418>
   12960:	add	r1, pc, r1
   12964:	ldr	r0, [pc, #172]	; 12a18 <boolean_expression_is_read_properly@@Base+0x41c>
   12968:	add	r0, pc, r0
   1296c:	bl	119e4 <__assert_fail@plt>
   12970:	ldr	r3, [pc, #164]	; 12a1c <boolean_expression_is_read_properly@@Base+0x420>
   12974:	add	r3, pc, r3
   12978:	ldrd	r2, [r3, #72]	; 0x48
   1297c:	adds	r2, r2, #1
   12980:	adc	r3, r3, #0
   12984:	ldr	r1, [pc, #148]	; 12a20 <boolean_expression_is_read_properly@@Base+0x424>
   12988:	add	r1, pc, r1
   1298c:	strd	r2, [r1, #72]	; 0x48
   12990:	nop			; (mov r0, r0)
   12994:	sub	sp, fp, #12
   12998:	pop	{r4, r5, fp, pc}
   1299c:	andeq	fp, r1, ip, ror #19
   129a0:	strdeq	ip, [r1], -r4
   129a4:	andeq	ip, r1, r0, ror #19
   129a8:	andeq	ip, r1, r4, ror r9
   129ac:	andeq	ip, r1, r0, ror #18
   129b0:	andeq	ip, r1, r8, lsl r9
   129b4:	andeq	ip, r1, r4, lsl #18
   129b8:	andeq	ip, r1, r8, asr #17
   129bc:			; <UNDEFINED> instruction: 0x0001c8b4
   129c0:	andeq	ip, r1, r8, ror r8
   129c4:	andeq	ip, r1, r4, ror #16
   129c8:	andeq	ip, r1, r8, lsr #16
   129cc:	andeq	ip, r1, r4, lsl r8
   129d0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   129d4:	andeq	ip, r1, r8, asr #15
   129d8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   129dc:	andeq	ip, r1, r8, ror r7
   129e0:	andeq	ip, r1, r4, ror #14
   129e4:			; <UNDEFINED> instruction: 0x0000a3b4
   129e8:	andeq	r9, r0, r4, asr #29
   129ec:	andeq	r9, r0, ip, asr pc
   129f0:	andeq	r0, r0, r0, lsr #1
   129f4:	andeq	ip, r1, r4, lsr #14
   129f8:	andeq	ip, r1, r0, lsl r7
   129fc:	andeq	sl, r0, r0, ror #6
   12a00:	andeq	r9, r0, r0, ror lr
   12a04:	andeq	r9, r0, r4, lsr #30
   12a08:	ldrdeq	ip, [r1], -r4
   12a0c:	andeq	ip, r1, r0, asr #13
   12a10:	andeq	sl, r0, r0, lsl r3
   12a14:	andeq	r9, r0, r0, lsr #28
   12a18:	strdeq	r9, [r0], -r4
   12a1c:	muleq	r1, r4, r6
   12a20:	andeq	ip, r1, r0, lsl #13

00012a24 <boolean_expression_complex@@Base>:
   12a24:	push	{r4, r5, fp, lr}
   12a28:	add	fp, sp, #12
   12a2c:	sub	sp, sp, #40	; 0x28
   12a30:	ldr	r4, [pc, #1344]	; 12f78 <boolean_expression_complex@@Base+0x554>
   12a34:	add	r4, pc, r4
   12a38:	ldr	r3, [pc, #1340]	; 12f7c <boolean_expression_complex@@Base+0x558>
   12a3c:	add	r3, pc, r3
   12a40:	ldrd	r2, [r3]
   12a44:	adds	r2, r2, #1
   12a48:	adc	r3, r3, #0
   12a4c:	ldr	r1, [pc, #1324]	; 12f80 <boolean_expression_complex@@Base+0x55c>
   12a50:	add	r1, pc, r1
   12a54:	strd	r2, [r1]
   12a58:	mov	r3, #0
   12a5c:	str	r3, [fp, #-16]
   12a60:	mov	r3, #0
   12a64:	str	r3, [fp, #-20]	; 0xffffffec
   12a68:	mov	r0, #3
   12a6c:	bl	118d0 <malloc@plt>
   12a70:	mov	r3, r0
   12a74:	str	r3, [fp, #-24]	; 0xffffffe8
   12a78:	mov	r0, #3
   12a7c:	bl	118d0 <malloc@plt>
   12a80:	mov	r3, r0
   12a84:	str	r3, [fp, #-28]	; 0xffffffe4
   12a88:	mov	r0, #3
   12a8c:	bl	118d0 <malloc@plt>
   12a90:	mov	r3, r0
   12a94:	str	r3, [fp, #-32]	; 0xffffffe0
   12a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a9c:	mov	r2, #60	; 0x3c
   12aa0:	strb	r2, [r3]
   12aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12aa8:	add	r3, r3, #1
   12aac:	mov	r2, #61	; 0x3d
   12ab0:	strb	r2, [r3]
   12ab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ab8:	add	r3, r3, #2
   12abc:	mov	r2, #0
   12ac0:	strb	r2, [r3]
   12ac4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ac8:	mov	r2, #38	; 0x26
   12acc:	strb	r2, [r3]
   12ad0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ad4:	add	r3, r3, #1
   12ad8:	mov	r2, #38	; 0x26
   12adc:	strb	r2, [r3]
   12ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ae4:	add	r3, r3, #2
   12ae8:	mov	r2, #0
   12aec:	strb	r2, [r3]
   12af0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af4:	mov	r2, #61	; 0x3d
   12af8:	strb	r2, [r3]
   12afc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b00:	add	r3, r3, #1
   12b04:	mov	r2, #61	; 0x3d
   12b08:	strb	r2, [r3]
   12b0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b10:	add	r3, r3, #2
   12b14:	mov	r2, #0
   12b18:	strb	r2, [r3]
   12b1c:	sub	r2, fp, #48	; 0x30
   12b20:	sub	r3, fp, #52	; 0x34
   12b24:	mov	r1, r2
   12b28:	mov	r0, r3
   12b2c:	bl	18930 <init_grammar@@Base>
   12b30:	ldr	r3, [pc, #1100]	; 12f84 <boolean_expression_complex@@Base+0x560>
   12b34:	add	r3, pc, r3
   12b38:	ldrd	r2, [r3, #8]
   12b3c:	adds	r2, r2, #1
   12b40:	adc	r3, r3, #0
   12b44:	ldr	r1, [pc, #1084]	; 12f88 <boolean_expression_complex@@Base+0x564>
   12b48:	add	r1, pc, r1
   12b4c:	strd	r2, [r1, #8]
   12b50:	mov	r0, #40	; 0x28
   12b54:	bl	118d0 <malloc@plt>
   12b58:	mov	r3, r0
   12b5c:	str	r3, [fp, #-36]	; 0xffffffdc
   12b60:	mov	r0, #8
   12b64:	bl	118d0 <malloc@plt>
   12b68:	mov	r3, r0
   12b6c:	mov	r2, r3
   12b70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b74:	str	r2, [r3]
   12b78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b7c:	ldr	r3, [r3]
   12b80:	mov	r1, #2
   12b84:	mov	r0, r3
   12b88:	bl	16f20 <init_token_int_value@@Base>
   12b8c:	ldr	r3, [pc, #1016]	; 12f8c <boolean_expression_complex@@Base+0x568>
   12b90:	add	r3, pc, r3
   12b94:	ldrd	r2, [r3, #16]
   12b98:	adds	r2, r2, #1
   12b9c:	adc	r3, r3, #0
   12ba0:	ldr	r1, [pc, #1000]	; 12f90 <boolean_expression_complex@@Base+0x56c>
   12ba4:	add	r1, pc, r1
   12ba8:	strd	r2, [r1, #16]
   12bac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12bb0:	add	r5, r3, #4
   12bb4:	mov	r0, #8
   12bb8:	bl	118d0 <malloc@plt>
   12bbc:	mov	r3, r0
   12bc0:	str	r3, [r5]
   12bc4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12bc8:	add	r3, r3, #4
   12bcc:	ldr	r3, [r3]
   12bd0:	mov	r1, #2
   12bd4:	mov	r0, r3
   12bd8:	bl	16f20 <init_token_int_value@@Base>
   12bdc:	ldr	r3, [pc, #944]	; 12f94 <boolean_expression_complex@@Base+0x570>
   12be0:	add	r3, pc, r3
   12be4:	ldrd	r2, [r3, #24]
   12be8:	adds	r2, r2, #1
   12bec:	adc	r3, r3, #0
   12bf0:	ldr	r1, [pc, #928]	; 12f98 <boolean_expression_complex@@Base+0x574>
   12bf4:	add	r1, pc, r1
   12bf8:	strd	r2, [r1, #24]
   12bfc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c00:	add	r5, r3, #8
   12c04:	mov	r0, #8
   12c08:	bl	118d0 <malloc@plt>
   12c0c:	mov	r3, r0
   12c10:	str	r3, [r5]
   12c14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c18:	add	r3, r3, #8
   12c1c:	ldr	r3, [r3]
   12c20:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c24:	mov	r0, r3
   12c28:	bl	172dc <init_token_boolean_op@@Base>
   12c2c:	ldr	r3, [pc, #872]	; 12f9c <boolean_expression_complex@@Base+0x578>
   12c30:	add	r3, pc, r3
   12c34:	ldrd	r2, [r3, #32]
   12c38:	adds	r2, r2, #1
   12c3c:	adc	r3, r3, #0
   12c40:	ldr	r1, [pc, #856]	; 12fa0 <boolean_expression_complex@@Base+0x57c>
   12c44:	add	r1, pc, r1
   12c48:	strd	r2, [r1, #32]
   12c4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c50:	add	r5, r3, #12
   12c54:	mov	r0, #8
   12c58:	bl	118d0 <malloc@plt>
   12c5c:	mov	r3, r0
   12c60:	str	r3, [r5]
   12c64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c68:	add	r3, r3, #12
   12c6c:	ldr	r3, [r3]
   12c70:	mov	r1, #1
   12c74:	mov	r0, r3
   12c78:	bl	16f20 <init_token_int_value@@Base>
   12c7c:	ldr	r3, [pc, #800]	; 12fa4 <boolean_expression_complex@@Base+0x580>
   12c80:	add	r3, pc, r3
   12c84:	ldrd	r2, [r3, #40]	; 0x28
   12c88:	adds	r2, r2, #1
   12c8c:	adc	r3, r3, #0
   12c90:	ldr	r1, [pc, #784]	; 12fa8 <boolean_expression_complex@@Base+0x584>
   12c94:	add	r1, pc, r1
   12c98:	strd	r2, [r1, #40]	; 0x28
   12c9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ca0:	add	r5, r3, #16
   12ca4:	mov	r0, #8
   12ca8:	bl	118d0 <malloc@plt>
   12cac:	mov	r3, r0
   12cb0:	str	r3, [r5]
   12cb4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12cb8:	add	r3, r3, #16
   12cbc:	ldr	r3, [r3]
   12cc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12cc4:	mov	r0, r3
   12cc8:	bl	172dc <init_token_boolean_op@@Base>
   12ccc:	ldr	r3, [pc, #728]	; 12fac <boolean_expression_complex@@Base+0x588>
   12cd0:	add	r3, pc, r3
   12cd4:	ldrd	r2, [r3, #48]	; 0x30
   12cd8:	adds	r2, r2, #1
   12cdc:	adc	r3, r3, #0
   12ce0:	ldr	r1, [pc, #712]	; 12fb0 <boolean_expression_complex@@Base+0x58c>
   12ce4:	add	r1, pc, r1
   12ce8:	strd	r2, [r1, #48]	; 0x30
   12cec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12cf0:	add	r5, r3, #20
   12cf4:	mov	r0, #8
   12cf8:	bl	118d0 <malloc@plt>
   12cfc:	mov	r3, r0
   12d00:	str	r3, [r5]
   12d04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d08:	add	r3, r3, #20
   12d0c:	ldr	r3, [r3]
   12d10:	mov	r1, #4
   12d14:	mov	r0, r3
   12d18:	bl	16f20 <init_token_int_value@@Base>
   12d1c:	ldr	r3, [pc, #656]	; 12fb4 <boolean_expression_complex@@Base+0x590>
   12d20:	add	r3, pc, r3
   12d24:	ldrd	r2, [r3, #56]	; 0x38
   12d28:	adds	r2, r2, #1
   12d2c:	adc	r3, r3, #0
   12d30:	ldr	r1, [pc, #640]	; 12fb8 <boolean_expression_complex@@Base+0x594>
   12d34:	add	r1, pc, r1
   12d38:	strd	r2, [r1, #56]	; 0x38
   12d3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d40:	add	r5, r3, #24
   12d44:	mov	r0, #8
   12d48:	bl	118d0 <malloc@plt>
   12d4c:	mov	r3, r0
   12d50:	str	r3, [r5]
   12d54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d58:	add	r3, r3, #24
   12d5c:	ldr	r3, [r3]
   12d60:	mov	r1, #4
   12d64:	mov	r0, r3
   12d68:	bl	16f20 <init_token_int_value@@Base>
   12d6c:	ldr	r3, [pc, #584]	; 12fbc <boolean_expression_complex@@Base+0x598>
   12d70:	add	r3, pc, r3
   12d74:	ldrd	r2, [r3, #64]	; 0x40
   12d78:	adds	r2, r2, #1
   12d7c:	adc	r3, r3, #0
   12d80:	ldr	r1, [pc, #568]	; 12fc0 <boolean_expression_complex@@Base+0x59c>
   12d84:	add	r1, pc, r1
   12d88:	strd	r2, [r1, #64]	; 0x40
   12d8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d90:	add	r5, r3, #28
   12d94:	mov	r0, #8
   12d98:	bl	118d0 <malloc@plt>
   12d9c:	mov	r3, r0
   12da0:	str	r3, [r5]
   12da4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12da8:	add	r3, r3, #28
   12dac:	ldr	r3, [r3]
   12db0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12db4:	mov	r0, r3
   12db8:	bl	172dc <init_token_boolean_op@@Base>
   12dbc:	ldr	r3, [pc, #512]	; 12fc4 <boolean_expression_complex@@Base+0x5a0>
   12dc0:	add	r3, pc, r3
   12dc4:	ldrd	r2, [r3, #72]	; 0x48
   12dc8:	adds	r2, r2, #1
   12dcc:	adc	r3, r3, #0
   12dd0:	ldr	r1, [pc, #496]	; 12fc8 <boolean_expression_complex@@Base+0x5a4>
   12dd4:	add	r1, pc, r1
   12dd8:	strd	r2, [r1, #72]	; 0x48
   12ddc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12de0:	add	r5, r3, #32
   12de4:	mov	r0, #8
   12de8:	bl	118d0 <malloc@plt>
   12dec:	mov	r3, r0
   12df0:	str	r3, [r5]
   12df4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12df8:	add	r3, r3, #32
   12dfc:	ldr	r3, [r3]
   12e00:	mov	r1, #4
   12e04:	mov	r0, r3
   12e08:	bl	16f20 <init_token_int_value@@Base>
   12e0c:	ldr	r3, [pc, #440]	; 12fcc <boolean_expression_complex@@Base+0x5a8>
   12e10:	add	r3, pc, r3
   12e14:	ldrd	r2, [r3, #80]	; 0x50
   12e18:	adds	r2, r2, #1
   12e1c:	adc	r3, r3, #0
   12e20:	ldr	r1, [pc, #424]	; 12fd0 <boolean_expression_complex@@Base+0x5ac>
   12e24:	add	r1, pc, r1
   12e28:	strd	r2, [r1, #80]	; 0x50
   12e2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e30:	add	r5, r3, #36	; 0x24
   12e34:	mov	r0, #4
   12e38:	bl	118d0 <malloc@plt>
   12e3c:	mov	r3, r0
   12e40:	str	r3, [r5]
   12e44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e48:	add	r3, r3, #36	; 0x24
   12e4c:	ldr	r3, [r3]
   12e50:	mov	r0, r3
   12e54:	bl	1703c <init_token_cpar@@Base>
   12e58:	ldr	r3, [pc, #372]	; 12fd4 <boolean_expression_complex@@Base+0x5b0>
   12e5c:	add	r3, pc, r3
   12e60:	ldrd	r2, [r3, #88]	; 0x58
   12e64:	adds	r2, r2, #1
   12e68:	adc	r3, r3, #0
   12e6c:	ldr	r1, [pc, #356]	; 12fd8 <boolean_expression_complex@@Base+0x5b4>
   12e70:	add	r1, pc, r1
   12e74:	strd	r2, [r1, #88]	; 0x58
   12e78:	ldr	r3, [pc, #348]	; 12fdc <boolean_expression_complex@@Base+0x5b8>
   12e7c:	ldr	r3, [r4, r3]
   12e80:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12e84:	str	r2, [r3, #228]	; 0xe4
   12e88:	ldr	r3, [pc, #332]	; 12fdc <boolean_expression_complex@@Base+0x5b8>
   12e8c:	ldr	r3, [r4, r3]
   12e90:	mov	r2, #10
   12e94:	str	r2, [r3, #220]	; 0xdc
   12e98:	sub	r3, fp, #52	; 0x34
   12e9c:	mov	r0, r3
   12ea0:	bl	19714 <read_boolean_expression@@Base>
   12ea4:	str	r0, [fp, #-16]
   12ea8:	ldr	r3, [pc, #300]	; 12fdc <boolean_expression_complex@@Base+0x5b8>
   12eac:	ldr	r3, [r4, r3]
   12eb0:	ldr	r3, [r3, #204]	; 0xcc
   12eb4:	cmp	r3, #10
   12eb8:	beq	12efc <boolean_expression_complex@@Base+0x4d8>
   12ebc:	ldr	r3, [pc, #284]	; 12fe0 <boolean_expression_complex@@Base+0x5bc>
   12ec0:	add	r3, pc, r3
   12ec4:	ldrd	r2, [r3, #96]	; 0x60
   12ec8:	adds	r2, r2, #1
   12ecc:	adc	r3, r3, #0
   12ed0:	ldr	r1, [pc, #268]	; 12fe4 <boolean_expression_complex@@Base+0x5c0>
   12ed4:	add	r1, pc, r1
   12ed8:	strd	r2, [r1, #96]	; 0x60
   12edc:	ldr	r3, [pc, #260]	; 12fe8 <boolean_expression_complex@@Base+0x5c4>
   12ee0:	add	r3, pc, r3
   12ee4:	mov	r2, #166	; 0xa6
   12ee8:	ldr	r1, [pc, #252]	; 12fec <boolean_expression_complex@@Base+0x5c8>
   12eec:	add	r1, pc, r1
   12ef0:	ldr	r0, [pc, #248]	; 12ff0 <boolean_expression_complex@@Base+0x5cc>
   12ef4:	add	r0, pc, r0
   12ef8:	bl	119e4 <__assert_fail@plt>
   12efc:	ldr	r3, [fp, #-16]
   12f00:	ldr	r3, [r3]
   12f04:	cmp	r3, #5
   12f08:	beq	12f4c <boolean_expression_complex@@Base+0x528>
   12f0c:	ldr	r3, [pc, #224]	; 12ff4 <boolean_expression_complex@@Base+0x5d0>
   12f10:	add	r3, pc, r3
   12f14:	ldrd	r2, [r3, #112]	; 0x70
   12f18:	adds	r2, r2, #1
   12f1c:	adc	r3, r3, #0
   12f20:	ldr	r1, [pc, #208]	; 12ff8 <boolean_expression_complex@@Base+0x5d4>
   12f24:	add	r1, pc, r1
   12f28:	strd	r2, [r1, #112]	; 0x70
   12f2c:	ldr	r3, [pc, #200]	; 12ffc <boolean_expression_complex@@Base+0x5d8>
   12f30:	add	r3, pc, r3
   12f34:	mov	r2, #167	; 0xa7
   12f38:	ldr	r1, [pc, #192]	; 13000 <boolean_expression_complex@@Base+0x5dc>
   12f3c:	add	r1, pc, r1
   12f40:	ldr	r0, [pc, #188]	; 13004 <boolean_expression_complex@@Base+0x5e0>
   12f44:	add	r0, pc, r0
   12f48:	bl	119e4 <__assert_fail@plt>
   12f4c:	ldr	r3, [pc, #180]	; 13008 <boolean_expression_complex@@Base+0x5e4>
   12f50:	add	r3, pc, r3
   12f54:	ldrd	r2, [r3, #104]	; 0x68
   12f58:	adds	r2, r2, #1
   12f5c:	adc	r3, r3, #0
   12f60:	ldr	r1, [pc, #164]	; 1300c <boolean_expression_complex@@Base+0x5e8>
   12f64:	add	r1, pc, r1
   12f68:	strd	r2, [r1, #104]	; 0x68
   12f6c:	nop			; (mov r0, r0)
   12f70:	sub	sp, fp, #12
   12f74:	pop	{r4, r5, fp, pc}
   12f78:	andeq	fp, r1, r4, asr #11
   12f7c:	andeq	ip, r1, r4, asr r5
   12f80:	andeq	ip, r1, r0, asr #10
   12f84:	andeq	ip, r1, ip, asr r4
   12f88:	andeq	ip, r1, r8, asr #8
   12f8c:	andeq	ip, r1, r0, lsl #8
   12f90:	andeq	ip, r1, ip, ror #7
   12f94:			; <UNDEFINED> instruction: 0x0001c3b0
   12f98:	muleq	r1, ip, r3
   12f9c:	andeq	ip, r1, r0, ror #6
   12fa0:	andeq	ip, r1, ip, asr #6
   12fa4:	andeq	ip, r1, r0, lsl r3
   12fa8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12fac:	andeq	ip, r1, r0, asr #5
   12fb0:	andeq	ip, r1, ip, lsr #5
   12fb4:	andeq	ip, r1, r0, ror r2
   12fb8:	andeq	ip, r1, ip, asr r2
   12fbc:	andeq	ip, r1, r0, lsr #4
   12fc0:	andeq	ip, r1, ip, lsl #4
   12fc4:	ldrdeq	ip, [r1], -r0
   12fc8:			; <UNDEFINED> instruction: 0x0001c1bc
   12fcc:	andeq	ip, r1, r0, lsl #3
   12fd0:	andeq	ip, r1, ip, ror #2
   12fd4:	andeq	ip, r1, r4, lsr r1
   12fd8:	andeq	ip, r1, r0, lsr #2
   12fdc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12fe0:	ldrdeq	ip, [r1], -r0
   12fe4:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   12fe8:	andeq	r9, r0, r8, lsr #27
   12fec:	muleq	r0, r4, r8
   12ff0:	andeq	r9, r0, r8, lsl #19
   12ff4:	andeq	ip, r1, r0, lsl #1
   12ff8:	andeq	ip, r1, ip, rrx
   12ffc:	andeq	r9, r0, r8, asr sp
   13000:	andeq	r9, r0, r4, asr #16
   13004:	andeq	r9, r0, r8, lsl r9
   13008:	andeq	ip, r1, r0, asr #32
   1300c:	andeq	ip, r1, ip, lsr #32

00013010 <boolean_binary_operator_is_read_properly@@Base>:
   13010:	push	{r4, r5, fp, lr}
   13014:	add	fp, sp, #12
   13018:	sub	sp, sp, #32
   1301c:	ldr	r4, [pc, #924]	; 133c0 <boolean_binary_operator_is_read_properly@@Base+0x3b0>
   13020:	add	r4, pc, r4
   13024:	ldr	r3, [pc, #920]	; 133c4 <boolean_binary_operator_is_read_properly@@Base+0x3b4>
   13028:	add	r3, pc, r3
   1302c:	ldrd	r2, [r3]
   13030:	adds	r2, r2, #1
   13034:	adc	r3, r3, #0
   13038:	ldr	r1, [pc, #904]	; 133c8 <boolean_binary_operator_is_read_properly@@Base+0x3b8>
   1303c:	add	r1, pc, r1
   13040:	strd	r2, [r1]
   13044:	mov	r3, #0
   13048:	str	r3, [fp, #-16]
   1304c:	mov	r3, #0
   13050:	str	r3, [fp, #-20]	; 0xffffffec
   13054:	mov	r0, #3
   13058:	bl	118d0 <malloc@plt>
   1305c:	mov	r3, r0
   13060:	str	r3, [fp, #-24]	; 0xffffffe8
   13064:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13068:	mov	r2, #33	; 0x21
   1306c:	strb	r2, [r3]
   13070:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13074:	add	r3, r3, #1
   13078:	mov	r2, #61	; 0x3d
   1307c:	strb	r2, [r3]
   13080:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13084:	add	r3, r3, #2
   13088:	mov	r2, #0
   1308c:	strb	r2, [r3]
   13090:	sub	r2, fp, #40	; 0x28
   13094:	sub	r3, fp, #44	; 0x2c
   13098:	mov	r1, r2
   1309c:	mov	r0, r3
   130a0:	bl	18930 <init_grammar@@Base>
   130a4:	ldr	r3, [pc, #800]	; 133cc <boolean_binary_operator_is_read_properly@@Base+0x3bc>
   130a8:	add	r3, pc, r3
   130ac:	ldrd	r2, [r3, #8]
   130b0:	adds	r2, r2, #1
   130b4:	adc	r3, r3, #0
   130b8:	ldr	r1, [pc, #784]	; 133d0 <boolean_binary_operator_is_read_properly@@Base+0x3c0>
   130bc:	add	r1, pc, r1
   130c0:	strd	r2, [r1, #8]
   130c4:	mov	r0, #12
   130c8:	bl	118d0 <malloc@plt>
   130cc:	mov	r3, r0
   130d0:	str	r3, [fp, #-28]	; 0xffffffe4
   130d4:	mov	r0, #8
   130d8:	bl	118d0 <malloc@plt>
   130dc:	mov	r3, r0
   130e0:	mov	r2, r3
   130e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130e8:	str	r2, [r3]
   130ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130f0:	ldr	r3, [r3]
   130f4:	mov	r1, #2
   130f8:	mov	r0, r3
   130fc:	bl	16f20 <init_token_int_value@@Base>
   13100:	ldr	r3, [pc, #716]	; 133d4 <boolean_binary_operator_is_read_properly@@Base+0x3c4>
   13104:	add	r3, pc, r3
   13108:	ldrd	r2, [r3, #16]
   1310c:	adds	r2, r2, #1
   13110:	adc	r3, r3, #0
   13114:	ldr	r1, [pc, #700]	; 133d8 <boolean_binary_operator_is_read_properly@@Base+0x3c8>
   13118:	add	r1, pc, r1
   1311c:	strd	r2, [r1, #16]
   13120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13124:	add	r5, r3, #4
   13128:	mov	r0, #8
   1312c:	bl	118d0 <malloc@plt>
   13130:	mov	r3, r0
   13134:	str	r3, [r5]
   13138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1313c:	add	r3, r3, #4
   13140:	ldr	r3, [r3]
   13144:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13148:	mov	r0, r3
   1314c:	bl	172dc <init_token_boolean_op@@Base>
   13150:	ldr	r3, [pc, #644]	; 133dc <boolean_binary_operator_is_read_properly@@Base+0x3cc>
   13154:	add	r3, pc, r3
   13158:	ldrd	r2, [r3, #24]
   1315c:	adds	r2, r2, #1
   13160:	adc	r3, r3, #0
   13164:	ldr	r1, [pc, #628]	; 133e0 <boolean_binary_operator_is_read_properly@@Base+0x3d0>
   13168:	add	r1, pc, r1
   1316c:	strd	r2, [r1, #24]
   13170:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13174:	add	r5, r3, #8
   13178:	mov	r0, #8
   1317c:	bl	118d0 <malloc@plt>
   13180:	mov	r3, r0
   13184:	str	r3, [r5]
   13188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1318c:	add	r3, r3, #8
   13190:	ldr	r3, [r3]
   13194:	mov	r1, #1
   13198:	mov	r0, r3
   1319c:	bl	16f20 <init_token_int_value@@Base>
   131a0:	ldr	r3, [pc, #572]	; 133e4 <boolean_binary_operator_is_read_properly@@Base+0x3d4>
   131a4:	add	r3, pc, r3
   131a8:	ldrd	r2, [r3, #32]
   131ac:	adds	r2, r2, #1
   131b0:	adc	r3, r3, #0
   131b4:	ldr	r1, [pc, #556]	; 133e8 <boolean_binary_operator_is_read_properly@@Base+0x3d8>
   131b8:	add	r1, pc, r1
   131bc:	strd	r2, [r1, #32]
   131c0:	ldr	r3, [pc, #548]	; 133ec <boolean_binary_operator_is_read_properly@@Base+0x3dc>
   131c4:	ldr	r3, [r4, r3]
   131c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   131cc:	str	r2, [r3, #228]	; 0xe4
   131d0:	ldr	r3, [pc, #532]	; 133ec <boolean_binary_operator_is_read_properly@@Base+0x3dc>
   131d4:	ldr	r3, [r4, r3]
   131d8:	mov	r2, #3
   131dc:	str	r2, [r3, #220]	; 0xdc
   131e0:	sub	r3, fp, #44	; 0x2c
   131e4:	mov	r0, r3
   131e8:	bl	19c98 <read_boolean_binary_expression@@Base>
   131ec:	str	r0, [fp, #-16]
   131f0:	ldr	r3, [pc, #500]	; 133ec <boolean_binary_operator_is_read_properly@@Base+0x3dc>
   131f4:	ldr	r3, [r4, r3]
   131f8:	ldr	r3, [r3, #204]	; 0xcc
   131fc:	cmp	r3, #3
   13200:	beq	13244 <boolean_binary_operator_is_read_properly@@Base+0x234>
   13204:	ldr	r3, [pc, #484]	; 133f0 <boolean_binary_operator_is_read_properly@@Base+0x3e0>
   13208:	add	r3, pc, r3
   1320c:	ldrd	r2, [r3, #40]	; 0x28
   13210:	adds	r2, r2, #1
   13214:	adc	r3, r3, #0
   13218:	ldr	r1, [pc, #468]	; 133f4 <boolean_binary_operator_is_read_properly@@Base+0x3e4>
   1321c:	add	r1, pc, r1
   13220:	strd	r2, [r1, #40]	; 0x28
   13224:	ldr	r3, [pc, #460]	; 133f8 <boolean_binary_operator_is_read_properly@@Base+0x3e8>
   13228:	add	r3, pc, r3
   1322c:	mov	r2, #200	; 0xc8
   13230:	ldr	r1, [pc, #452]	; 133fc <boolean_binary_operator_is_read_properly@@Base+0x3ec>
   13234:	add	r1, pc, r1
   13238:	ldr	r0, [pc, #448]	; 13400 <boolean_binary_operator_is_read_properly@@Base+0x3f0>
   1323c:	add	r0, pc, r0
   13240:	bl	119e4 <__assert_fail@plt>
   13244:	ldr	r3, [fp, #-16]
   13248:	ldr	r3, [r3]
   1324c:	cmp	r3, #5
   13250:	beq	13294 <boolean_binary_operator_is_read_properly@@Base+0x284>
   13254:	ldr	r3, [pc, #424]	; 13404 <boolean_binary_operator_is_read_properly@@Base+0x3f4>
   13258:	add	r3, pc, r3
   1325c:	ldrd	r2, [r3, #48]	; 0x30
   13260:	adds	r2, r2, #1
   13264:	adc	r3, r3, #0
   13268:	ldr	r1, [pc, #408]	; 13408 <boolean_binary_operator_is_read_properly@@Base+0x3f8>
   1326c:	add	r1, pc, r1
   13270:	strd	r2, [r1, #48]	; 0x30
   13274:	ldr	r3, [pc, #400]	; 1340c <boolean_binary_operator_is_read_properly@@Base+0x3fc>
   13278:	add	r3, pc, r3
   1327c:	mov	r2, #201	; 0xc9
   13280:	ldr	r1, [pc, #392]	; 13410 <boolean_binary_operator_is_read_properly@@Base+0x400>
   13284:	add	r1, pc, r1
   13288:	ldr	r0, [pc, #388]	; 13414 <boolean_binary_operator_is_read_properly@@Base+0x404>
   1328c:	add	r0, pc, r0
   13290:	bl	119e4 <__assert_fail@plt>
   13294:	ldr	r3, [fp, #-16]
   13298:	str	r3, [fp, #-20]	; 0xffffffec
   1329c:	ldr	r3, [fp, #-20]	; 0xffffffec
   132a0:	ldr	r3, [r3, #8]
   132a4:	ldr	r3, [r3]
   132a8:	cmp	r3, #1
   132ac:	beq	132f0 <boolean_binary_operator_is_read_properly@@Base+0x2e0>
   132b0:	ldr	r3, [pc, #352]	; 13418 <boolean_binary_operator_is_read_properly@@Base+0x408>
   132b4:	add	r3, pc, r3
   132b8:	ldrd	r2, [r3, #56]	; 0x38
   132bc:	adds	r2, r2, #1
   132c0:	adc	r3, r3, #0
   132c4:	ldr	r1, [pc, #336]	; 1341c <boolean_binary_operator_is_read_properly@@Base+0x40c>
   132c8:	add	r1, pc, r1
   132cc:	strd	r2, [r1, #56]	; 0x38
   132d0:	ldr	r3, [pc, #328]	; 13420 <boolean_binary_operator_is_read_properly@@Base+0x410>
   132d4:	add	r3, pc, r3
   132d8:	mov	r2, #203	; 0xcb
   132dc:	ldr	r1, [pc, #320]	; 13424 <boolean_binary_operator_is_read_properly@@Base+0x414>
   132e0:	add	r1, pc, r1
   132e4:	ldr	r0, [pc, #316]	; 13428 <boolean_binary_operator_is_read_properly@@Base+0x418>
   132e8:	add	r0, pc, r0
   132ec:	bl	119e4 <__assert_fail@plt>
   132f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132f4:	ldr	r3, [r3, #16]
   132f8:	cmp	r3, #1
   132fc:	beq	13340 <boolean_binary_operator_is_read_properly@@Base+0x330>
   13300:	ldr	r3, [pc, #292]	; 1342c <boolean_binary_operator_is_read_properly@@Base+0x41c>
   13304:	add	r3, pc, r3
   13308:	ldrd	r2, [r3, #64]	; 0x40
   1330c:	adds	r2, r2, #1
   13310:	adc	r3, r3, #0
   13314:	ldr	r1, [pc, #276]	; 13430 <boolean_binary_operator_is_read_properly@@Base+0x420>
   13318:	add	r1, pc, r1
   1331c:	strd	r2, [r1, #64]	; 0x40
   13320:	ldr	r3, [pc, #268]	; 13434 <boolean_binary_operator_is_read_properly@@Base+0x424>
   13324:	add	r3, pc, r3
   13328:	mov	r2, #204	; 0xcc
   1332c:	ldr	r1, [pc, #260]	; 13438 <boolean_binary_operator_is_read_properly@@Base+0x428>
   13330:	add	r1, pc, r1
   13334:	ldr	r0, [pc, #256]	; 1343c <boolean_binary_operator_is_read_properly@@Base+0x42c>
   13338:	add	r0, pc, r0
   1333c:	bl	119e4 <__assert_fail@plt>
   13340:	ldr	r3, [fp, #-20]	; 0xffffffec
   13344:	ldr	r3, [r3, #12]
   13348:	ldr	r3, [r3]
   1334c:	cmp	r3, #1
   13350:	beq	13394 <boolean_binary_operator_is_read_properly@@Base+0x384>
   13354:	ldr	r3, [pc, #228]	; 13440 <boolean_binary_operator_is_read_properly@@Base+0x430>
   13358:	add	r3, pc, r3
   1335c:	ldrd	r2, [r3, #80]	; 0x50
   13360:	adds	r2, r2, #1
   13364:	adc	r3, r3, #0
   13368:	ldr	r1, [pc, #212]	; 13444 <boolean_binary_operator_is_read_properly@@Base+0x434>
   1336c:	add	r1, pc, r1
   13370:	strd	r2, [r1, #80]	; 0x50
   13374:	ldr	r3, [pc, #204]	; 13448 <boolean_binary_operator_is_read_properly@@Base+0x438>
   13378:	add	r3, pc, r3
   1337c:	mov	r2, #205	; 0xcd
   13380:	ldr	r1, [pc, #196]	; 1344c <boolean_binary_operator_is_read_properly@@Base+0x43c>
   13384:	add	r1, pc, r1
   13388:	ldr	r0, [pc, #192]	; 13450 <boolean_binary_operator_is_read_properly@@Base+0x440>
   1338c:	add	r0, pc, r0
   13390:	bl	119e4 <__assert_fail@plt>
   13394:	ldr	r3, [pc, #184]	; 13454 <boolean_binary_operator_is_read_properly@@Base+0x444>
   13398:	add	r3, pc, r3
   1339c:	ldrd	r2, [r3, #72]	; 0x48
   133a0:	adds	r2, r2, #1
   133a4:	adc	r3, r3, #0
   133a8:	ldr	r1, [pc, #168]	; 13458 <boolean_binary_operator_is_read_properly@@Base+0x448>
   133ac:	add	r1, pc, r1
   133b0:	strd	r2, [r1, #72]	; 0x48
   133b4:	nop			; (mov r0, r0)
   133b8:	sub	sp, fp, #12
   133bc:	pop	{r4, r5, fp, pc}
   133c0:	ldrdeq	sl, [r1], -r8
   133c4:	andeq	fp, r1, r0, lsl pc
   133c8:	strdeq	fp, [r1], -ip
   133cc:	muleq	r1, r0, lr
   133d0:	andeq	fp, r1, ip, ror lr
   133d4:	andeq	fp, r1, r4, lsr lr
   133d8:	andeq	fp, r1, r0, lsr #28
   133dc:	andeq	fp, r1, r4, ror #27
   133e0:	ldrdeq	fp, [r1], -r0
   133e4:	muleq	r1, r4, sp
   133e8:	andeq	fp, r1, r0, lsl #27
   133ec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   133f0:	andeq	fp, r1, r0, lsr sp
   133f4:	andeq	fp, r1, ip, lsl sp
   133f8:	andeq	r9, r0, ip, ror sl
   133fc:	andeq	r9, r0, ip, asr #10
   13400:	andeq	r9, r0, ip, asr r6
   13404:	andeq	fp, r1, r0, ror #25
   13408:	andeq	fp, r1, ip, asr #25
   1340c:	andeq	r9, r0, ip, lsr #20
   13410:	strdeq	r9, [r0], -ip
   13414:	ldrdeq	r9, [r0], -r0
   13418:	andeq	fp, r1, r4, lsl #25
   1341c:	andeq	fp, r1, r0, ror ip
   13420:	ldrdeq	r9, [r0], -r0
   13424:	andeq	r9, r0, r0, lsr #9
   13428:	andeq	r9, r0, ip, asr #11
   1342c:	andeq	fp, r1, r4, lsr ip
   13430:	andeq	fp, r1, r0, lsr #24
   13434:	andeq	r9, r0, r0, lsl #19
   13438:	andeq	r9, r0, r0, asr r4
   1343c:	muleq	r0, r8, r5
   13440:	andeq	fp, r1, r0, ror #23
   13444:	andeq	fp, r1, ip, asr #23
   13448:	andeq	r9, r0, ip, lsr #18
   1344c:	strdeq	r9, [r0], -ip
   13450:	andeq	r9, r0, r0, ror #10
   13454:	andeq	fp, r1, r0, lsr #23
   13458:	andeq	fp, r1, ip, lsl #23

0001345c <boolean_unary_operator_is_read_properly@@Base>:
   1345c:	push	{r4, r5, fp, lr}
   13460:	add	fp, sp, #12
   13464:	sub	sp, sp, #32
   13468:	ldr	r4, [pc, #824]	; 137a8 <boolean_unary_operator_is_read_properly@@Base+0x34c>
   1346c:	add	r4, pc, r4
   13470:	ldr	r3, [pc, #820]	; 137ac <boolean_unary_operator_is_read_properly@@Base+0x350>
   13474:	add	r3, pc, r3
   13478:	ldrd	r2, [r3]
   1347c:	adds	r2, r2, #1
   13480:	adc	r3, r3, #0
   13484:	ldr	r1, [pc, #804]	; 137b0 <boolean_unary_operator_is_read_properly@@Base+0x354>
   13488:	add	r1, pc, r1
   1348c:	strd	r2, [r1]
   13490:	mov	r3, #0
   13494:	str	r3, [fp, #-16]
   13498:	mov	r3, #0
   1349c:	str	r3, [fp, #-20]	; 0xffffffec
   134a0:	mov	r0, #2
   134a4:	bl	118d0 <malloc@plt>
   134a8:	mov	r3, r0
   134ac:	str	r3, [fp, #-24]	; 0xffffffe8
   134b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   134b4:	mov	r2, #33	; 0x21
   134b8:	strb	r2, [r3]
   134bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   134c0:	add	r3, r3, #1
   134c4:	mov	r2, #0
   134c8:	strb	r2, [r3]
   134cc:	sub	r2, fp, #40	; 0x28
   134d0:	sub	r3, fp, #44	; 0x2c
   134d4:	mov	r1, r2
   134d8:	mov	r0, r3
   134dc:	bl	18930 <init_grammar@@Base>
   134e0:	ldr	r3, [pc, #716]	; 137b4 <boolean_unary_operator_is_read_properly@@Base+0x358>
   134e4:	add	r3, pc, r3
   134e8:	ldrd	r2, [r3, #8]
   134ec:	adds	r2, r2, #1
   134f0:	adc	r3, r3, #0
   134f4:	ldr	r1, [pc, #700]	; 137b8 <boolean_unary_operator_is_read_properly@@Base+0x35c>
   134f8:	add	r1, pc, r1
   134fc:	strd	r2, [r1, #8]
   13500:	mov	r0, #8
   13504:	bl	118d0 <malloc@plt>
   13508:	mov	r3, r0
   1350c:	str	r3, [fp, #-28]	; 0xffffffe4
   13510:	mov	r0, #8
   13514:	bl	118d0 <malloc@plt>
   13518:	mov	r3, r0
   1351c:	mov	r2, r3
   13520:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13524:	str	r2, [r3]
   13528:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1352c:	ldr	r3, [r3]
   13530:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13534:	mov	r0, r3
   13538:	bl	172dc <init_token_boolean_op@@Base>
   1353c:	ldr	r3, [pc, #632]	; 137bc <boolean_unary_operator_is_read_properly@@Base+0x360>
   13540:	add	r3, pc, r3
   13544:	ldrd	r2, [r3, #16]
   13548:	adds	r2, r2, #1
   1354c:	adc	r3, r3, #0
   13550:	ldr	r1, [pc, #616]	; 137c0 <boolean_unary_operator_is_read_properly@@Base+0x364>
   13554:	add	r1, pc, r1
   13558:	strd	r2, [r1, #16]
   1355c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13560:	add	r5, r3, #4
   13564:	mov	r0, #8
   13568:	bl	118d0 <malloc@plt>
   1356c:	mov	r3, r0
   13570:	str	r3, [r5]
   13574:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13578:	add	r3, r3, #4
   1357c:	ldr	r3, [r3]
   13580:	mov	r1, #1
   13584:	mov	r0, r3
   13588:	bl	16f20 <init_token_int_value@@Base>
   1358c:	ldr	r3, [pc, #560]	; 137c4 <boolean_unary_operator_is_read_properly@@Base+0x368>
   13590:	add	r3, pc, r3
   13594:	ldrd	r2, [r3, #24]
   13598:	adds	r2, r2, #1
   1359c:	adc	r3, r3, #0
   135a0:	ldr	r1, [pc, #544]	; 137c8 <boolean_unary_operator_is_read_properly@@Base+0x36c>
   135a4:	add	r1, pc, r1
   135a8:	strd	r2, [r1, #24]
   135ac:	ldr	r3, [pc, #536]	; 137cc <boolean_unary_operator_is_read_properly@@Base+0x370>
   135b0:	ldr	r3, [r4, r3]
   135b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   135b8:	str	r2, [r3, #228]	; 0xe4
   135bc:	ldr	r3, [pc, #520]	; 137cc <boolean_unary_operator_is_read_properly@@Base+0x370>
   135c0:	ldr	r3, [r4, r3]
   135c4:	mov	r2, #2
   135c8:	str	r2, [r3, #220]	; 0xdc
   135cc:	sub	r3, fp, #44	; 0x2c
   135d0:	mov	r0, r3
   135d4:	bl	1a168 <read_boolean_unary_expression@@Base>
   135d8:	str	r0, [fp, #-16]
   135dc:	ldr	r3, [pc, #488]	; 137cc <boolean_unary_operator_is_read_properly@@Base+0x370>
   135e0:	ldr	r3, [r4, r3]
   135e4:	ldr	r3, [r3, #204]	; 0xcc
   135e8:	cmp	r3, #2
   135ec:	beq	13630 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   135f0:	ldr	r3, [pc, #472]	; 137d0 <boolean_unary_operator_is_read_properly@@Base+0x374>
   135f4:	add	r3, pc, r3
   135f8:	ldrd	r2, [r3, #32]
   135fc:	adds	r2, r2, #1
   13600:	adc	r3, r3, #0
   13604:	ldr	r1, [pc, #456]	; 137d4 <boolean_unary_operator_is_read_properly@@Base+0x378>
   13608:	add	r1, pc, r1
   1360c:	strd	r2, [r1, #32]
   13610:	ldr	r3, [pc, #448]	; 137d8 <boolean_unary_operator_is_read_properly@@Base+0x37c>
   13614:	add	r3, pc, r3
   13618:	mov	r2, #235	; 0xeb
   1361c:	ldr	r1, [pc, #440]	; 137dc <boolean_unary_operator_is_read_properly@@Base+0x380>
   13620:	add	r1, pc, r1
   13624:	ldr	r0, [pc, #436]	; 137e0 <boolean_unary_operator_is_read_properly@@Base+0x384>
   13628:	add	r0, pc, r0
   1362c:	bl	119e4 <__assert_fail@plt>
   13630:	ldr	r3, [fp, #-16]
   13634:	ldr	r3, [r3]
   13638:	cmp	r3, #5
   1363c:	beq	13680 <boolean_unary_operator_is_read_properly@@Base+0x224>
   13640:	ldr	r3, [pc, #412]	; 137e4 <boolean_unary_operator_is_read_properly@@Base+0x388>
   13644:	add	r3, pc, r3
   13648:	ldrd	r2, [r3, #40]	; 0x28
   1364c:	adds	r2, r2, #1
   13650:	adc	r3, r3, #0
   13654:	ldr	r1, [pc, #396]	; 137e8 <boolean_unary_operator_is_read_properly@@Base+0x38c>
   13658:	add	r1, pc, r1
   1365c:	strd	r2, [r1, #40]	; 0x28
   13660:	ldr	r3, [pc, #388]	; 137ec <boolean_unary_operator_is_read_properly@@Base+0x390>
   13664:	add	r3, pc, r3
   13668:	mov	r2, #236	; 0xec
   1366c:	ldr	r1, [pc, #380]	; 137f0 <boolean_unary_operator_is_read_properly@@Base+0x394>
   13670:	add	r1, pc, r1
   13674:	ldr	r0, [pc, #376]	; 137f4 <boolean_unary_operator_is_read_properly@@Base+0x398>
   13678:	add	r0, pc, r0
   1367c:	bl	119e4 <__assert_fail@plt>
   13680:	ldr	r3, [fp, #-16]
   13684:	str	r3, [fp, #-20]	; 0xffffffec
   13688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1368c:	ldr	r3, [r3, #8]
   13690:	ldr	r3, [r3]
   13694:	cmp	r3, #1
   13698:	beq	136dc <boolean_unary_operator_is_read_properly@@Base+0x280>
   1369c:	ldr	r3, [pc, #340]	; 137f8 <boolean_unary_operator_is_read_properly@@Base+0x39c>
   136a0:	add	r3, pc, r3
   136a4:	ldrd	r2, [r3, #48]	; 0x30
   136a8:	adds	r2, r2, #1
   136ac:	adc	r3, r3, #0
   136b0:	ldr	r1, [pc, #324]	; 137fc <boolean_unary_operator_is_read_properly@@Base+0x3a0>
   136b4:	add	r1, pc, r1
   136b8:	strd	r2, [r1, #48]	; 0x30
   136bc:	ldr	r3, [pc, #316]	; 13800 <boolean_unary_operator_is_read_properly@@Base+0x3a4>
   136c0:	add	r3, pc, r3
   136c4:	mov	r2, #238	; 0xee
   136c8:	ldr	r1, [pc, #308]	; 13804 <boolean_unary_operator_is_read_properly@@Base+0x3a8>
   136cc:	add	r1, pc, r1
   136d0:	ldr	r0, [pc, #304]	; 13808 <boolean_unary_operator_is_read_properly@@Base+0x3ac>
   136d4:	add	r0, pc, r0
   136d8:	bl	119e4 <__assert_fail@plt>
   136dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e0:	ldr	r3, [r3, #16]
   136e4:	cmp	r3, #8
   136e8:	beq	1372c <boolean_unary_operator_is_read_properly@@Base+0x2d0>
   136ec:	ldr	r3, [pc, #280]	; 1380c <boolean_unary_operator_is_read_properly@@Base+0x3b0>
   136f0:	add	r3, pc, r3
   136f4:	ldrd	r2, [r3, #56]	; 0x38
   136f8:	adds	r2, r2, #1
   136fc:	adc	r3, r3, #0
   13700:	ldr	r1, [pc, #264]	; 13810 <boolean_unary_operator_is_read_properly@@Base+0x3b4>
   13704:	add	r1, pc, r1
   13708:	strd	r2, [r1, #56]	; 0x38
   1370c:	ldr	r3, [pc, #256]	; 13814 <boolean_unary_operator_is_read_properly@@Base+0x3b8>
   13710:	add	r3, pc, r3
   13714:	mov	r2, #239	; 0xef
   13718:	ldr	r1, [pc, #248]	; 13818 <boolean_unary_operator_is_read_properly@@Base+0x3bc>
   1371c:	add	r1, pc, r1
   13720:	ldr	r0, [pc, #244]	; 1381c <boolean_unary_operator_is_read_properly@@Base+0x3c0>
   13724:	add	r0, pc, r0
   13728:	bl	119e4 <__assert_fail@plt>
   1372c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13730:	ldr	r3, [r3, #12]
   13734:	cmp	r3, #0
   13738:	beq	1377c <boolean_unary_operator_is_read_properly@@Base+0x320>
   1373c:	ldr	r3, [pc, #220]	; 13820 <boolean_unary_operator_is_read_properly@@Base+0x3c4>
   13740:	add	r3, pc, r3
   13744:	ldrd	r2, [r3, #72]	; 0x48
   13748:	adds	r2, r2, #1
   1374c:	adc	r3, r3, #0
   13750:	ldr	r1, [pc, #204]	; 13824 <boolean_unary_operator_is_read_properly@@Base+0x3c8>
   13754:	add	r1, pc, r1
   13758:	strd	r2, [r1, #72]	; 0x48
   1375c:	ldr	r3, [pc, #196]	; 13828 <boolean_unary_operator_is_read_properly@@Base+0x3cc>
   13760:	add	r3, pc, r3
   13764:	mov	r2, #240	; 0xf0
   13768:	ldr	r1, [pc, #188]	; 1382c <boolean_unary_operator_is_read_properly@@Base+0x3d0>
   1376c:	add	r1, pc, r1
   13770:	ldr	r0, [pc, #184]	; 13830 <boolean_unary_operator_is_read_properly@@Base+0x3d4>
   13774:	add	r0, pc, r0
   13778:	bl	119e4 <__assert_fail@plt>
   1377c:	ldr	r3, [pc, #176]	; 13834 <boolean_unary_operator_is_read_properly@@Base+0x3d8>
   13780:	add	r3, pc, r3
   13784:	ldrd	r2, [r3, #64]	; 0x40
   13788:	adds	r2, r2, #1
   1378c:	adc	r3, r3, #0
   13790:	ldr	r1, [pc, #160]	; 13838 <boolean_unary_operator_is_read_properly@@Base+0x3dc>
   13794:	add	r1, pc, r1
   13798:	strd	r2, [r1, #64]	; 0x40
   1379c:	nop			; (mov r0, r0)
   137a0:	sub	sp, fp, #12
   137a4:	pop	{r4, r5, fp, pc}
   137a8:	andeq	sl, r1, ip, lsl #23
   137ac:	andeq	fp, r1, r4, ror sl
   137b0:	andeq	fp, r1, r0, ror #20
   137b4:	andeq	fp, r1, r4, lsl #20
   137b8:	strdeq	fp, [r1], -r0
   137bc:	andeq	fp, r1, r8, lsr #19
   137c0:	muleq	r1, r4, r9
   137c4:	andeq	fp, r1, r8, asr r9
   137c8:	andeq	fp, r1, r4, asr #18
   137cc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   137d0:	strdeq	fp, [r1], -r4
   137d4:	andeq	fp, r1, r0, ror #17
   137d8:			; <UNDEFINED> instruction: 0x000096bc
   137dc:	andeq	r9, r0, r0, ror #2
   137e0:	ldrdeq	r9, [r0], -ip
   137e4:	andeq	fp, r1, r4, lsr #17
   137e8:	muleq	r1, r0, r8
   137ec:	andeq	r9, r0, ip, ror #12
   137f0:	andeq	r9, r0, r0, lsl r1
   137f4:	andeq	r9, r0, r4, ror #3
   137f8:	andeq	fp, r1, r8, asr #16
   137fc:	andeq	fp, r1, r4, lsr r8
   13800:	andeq	r9, r0, r0, lsl r6
   13804:	strheq	r9, [r0], -r4
   13808:	andeq	r9, r0, r0, ror #3
   1380c:	strdeq	fp, [r1], -r8
   13810:	andeq	fp, r1, r4, ror #15
   13814:	andeq	r9, r0, r0, asr #11
   13818:	andeq	r9, r0, r4, rrx
   1381c:	andeq	r9, r0, r4, ror #3
   13820:	andeq	fp, r1, r8, lsr #15
   13824:	muleq	r1, r4, r7
   13828:	andeq	r9, r0, r0, ror r5
   1382c:	andeq	r9, r0, r4, lsl r0
   13830:	andeq	r9, r0, r8, lsr #3
   13834:	andeq	fp, r1, r8, ror #14
   13838:	andeq	fp, r1, r4, asr r7

0001383c <if_statement_only@@Base>:
   1383c:	push	{r4, r5, fp, lr}
   13840:	add	fp, sp, #12
   13844:	sub	sp, sp, #32
   13848:	ldr	r4, [pc, #1196]	; 13cfc <if_statement_only@@Base+0x4c0>
   1384c:	add	r4, pc, r4
   13850:	ldr	r3, [pc, #1192]	; 13d00 <if_statement_only@@Base+0x4c4>
   13854:	add	r3, pc, r3
   13858:	ldrd	r2, [r3]
   1385c:	adds	r2, r2, #1
   13860:	adc	r3, r3, #0
   13864:	ldr	r1, [pc, #1176]	; 13d04 <if_statement_only@@Base+0x4c8>
   13868:	add	r1, pc, r1
   1386c:	strd	r2, [r1]
   13870:	mov	r3, #0
   13874:	str	r3, [fp, #-16]
   13878:	sub	r2, fp, #36	; 0x24
   1387c:	sub	r3, fp, #40	; 0x28
   13880:	mov	r1, r2
   13884:	mov	r0, r3
   13888:	bl	18930 <init_grammar@@Base>
   1388c:	ldr	r3, [pc, #1140]	; 13d08 <if_statement_only@@Base+0x4cc>
   13890:	add	r3, pc, r3
   13894:	ldrd	r2, [r3, #8]
   13898:	adds	r2, r2, #1
   1389c:	adc	r3, r3, #0
   138a0:	ldr	r1, [pc, #1124]	; 13d0c <if_statement_only@@Base+0x4d0>
   138a4:	add	r1, pc, r1
   138a8:	strd	r2, [r1, #8]
   138ac:	mov	r0, #3
   138b0:	bl	118d0 <malloc@plt>
   138b4:	mov	r3, r0
   138b8:	str	r3, [fp, #-20]	; 0xffffffec
   138bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   138c0:	mov	r2, #33	; 0x21
   138c4:	strb	r2, [r3]
   138c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138cc:	add	r3, r3, #1
   138d0:	mov	r2, #61	; 0x3d
   138d4:	strb	r2, [r3]
   138d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138dc:	add	r3, r3, #2
   138e0:	mov	r2, #0
   138e4:	strb	r2, [r3]
   138e8:	mov	r0, #36	; 0x24
   138ec:	bl	118d0 <malloc@plt>
   138f0:	mov	r3, r0
   138f4:	str	r3, [fp, #-24]	; 0xffffffe8
   138f8:	mov	r0, #4
   138fc:	bl	118d0 <malloc@plt>
   13900:	mov	r3, r0
   13904:	mov	r2, r3
   13908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1390c:	str	r2, [r3]
   13910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13914:	ldr	r3, [r3]
   13918:	mov	r0, r3
   1391c:	bl	16fe8 <init_token_opar@@Base>
   13920:	ldr	r3, [pc, #1000]	; 13d10 <if_statement_only@@Base+0x4d4>
   13924:	add	r3, pc, r3
   13928:	ldrd	r2, [r3, #16]
   1392c:	adds	r2, r2, #1
   13930:	adc	r3, r3, #0
   13934:	ldr	r1, [pc, #984]	; 13d14 <if_statement_only@@Base+0x4d8>
   13938:	add	r1, pc, r1
   1393c:	strd	r2, [r1, #16]
   13940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13944:	add	r5, r3, #4
   13948:	mov	r0, #8
   1394c:	bl	118d0 <malloc@plt>
   13950:	mov	r3, r0
   13954:	str	r3, [r5]
   13958:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1395c:	add	r3, r3, #4
   13960:	ldr	r3, [r3]
   13964:	mov	r1, #1
   13968:	mov	r0, r3
   1396c:	bl	16f20 <init_token_int_value@@Base>
   13970:	ldr	r3, [pc, #928]	; 13d18 <if_statement_only@@Base+0x4dc>
   13974:	add	r3, pc, r3
   13978:	ldrd	r2, [r3, #24]
   1397c:	adds	r2, r2, #1
   13980:	adc	r3, r3, #0
   13984:	ldr	r1, [pc, #912]	; 13d1c <if_statement_only@@Base+0x4e0>
   13988:	add	r1, pc, r1
   1398c:	strd	r2, [r1, #24]
   13990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13994:	add	r5, r3, #8
   13998:	mov	r0, #8
   1399c:	bl	118d0 <malloc@plt>
   139a0:	mov	r3, r0
   139a4:	str	r3, [r5]
   139a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139ac:	add	r3, r3, #8
   139b0:	ldr	r3, [r3]
   139b4:	mov	r1, #1
   139b8:	mov	r0, r3
   139bc:	bl	16f20 <init_token_int_value@@Base>
   139c0:	ldr	r3, [pc, #856]	; 13d20 <if_statement_only@@Base+0x4e4>
   139c4:	add	r3, pc, r3
   139c8:	ldrd	r2, [r3, #32]
   139cc:	adds	r2, r2, #1
   139d0:	adc	r3, r3, #0
   139d4:	ldr	r1, [pc, #840]	; 13d24 <if_statement_only@@Base+0x4e8>
   139d8:	add	r1, pc, r1
   139dc:	strd	r2, [r1, #32]
   139e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139e4:	add	r5, r3, #12
   139e8:	mov	r0, #8
   139ec:	bl	118d0 <malloc@plt>
   139f0:	mov	r3, r0
   139f4:	str	r3, [r5]
   139f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139fc:	add	r3, r3, #12
   13a00:	ldr	r3, [r3]
   13a04:	ldr	r1, [fp, #-20]	; 0xffffffec
   13a08:	mov	r0, r3
   13a0c:	bl	172dc <init_token_boolean_op@@Base>
   13a10:	ldr	r3, [pc, #784]	; 13d28 <if_statement_only@@Base+0x4ec>
   13a14:	add	r3, pc, r3
   13a18:	ldrd	r2, [r3, #40]	; 0x28
   13a1c:	adds	r2, r2, #1
   13a20:	adc	r3, r3, #0
   13a24:	ldr	r1, [pc, #768]	; 13d2c <if_statement_only@@Base+0x4f0>
   13a28:	add	r1, pc, r1
   13a2c:	strd	r2, [r1, #40]	; 0x28
   13a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a34:	add	r5, r3, #16
   13a38:	mov	r0, #8
   13a3c:	bl	118d0 <malloc@plt>
   13a40:	mov	r3, r0
   13a44:	str	r3, [r5]
   13a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a4c:	add	r3, r3, #16
   13a50:	ldr	r3, [r3]
   13a54:	mov	r1, #1
   13a58:	mov	r0, r3
   13a5c:	bl	16f20 <init_token_int_value@@Base>
   13a60:	ldr	r3, [pc, #712]	; 13d30 <if_statement_only@@Base+0x4f4>
   13a64:	add	r3, pc, r3
   13a68:	ldrd	r2, [r3, #48]	; 0x30
   13a6c:	adds	r2, r2, #1
   13a70:	adc	r3, r3, #0
   13a74:	ldr	r1, [pc, #696]	; 13d34 <if_statement_only@@Base+0x4f8>
   13a78:	add	r1, pc, r1
   13a7c:	strd	r2, [r1, #48]	; 0x30
   13a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a84:	add	r5, r3, #20
   13a88:	mov	r0, #4
   13a8c:	bl	118d0 <malloc@plt>
   13a90:	mov	r3, r0
   13a94:	str	r3, [r5]
   13a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a9c:	add	r3, r3, #20
   13aa0:	ldr	r3, [r3]
   13aa4:	mov	r0, r3
   13aa8:	bl	1703c <init_token_cpar@@Base>
   13aac:	ldr	r3, [pc, #644]	; 13d38 <if_statement_only@@Base+0x4fc>
   13ab0:	add	r3, pc, r3
   13ab4:	ldrd	r2, [r3, #56]	; 0x38
   13ab8:	adds	r2, r2, #1
   13abc:	adc	r3, r3, #0
   13ac0:	ldr	r1, [pc, #628]	; 13d3c <if_statement_only@@Base+0x500>
   13ac4:	add	r1, pc, r1
   13ac8:	strd	r2, [r1, #56]	; 0x38
   13acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ad0:	add	r5, r3, #24
   13ad4:	mov	r0, #4
   13ad8:	bl	118d0 <malloc@plt>
   13adc:	mov	r3, r0
   13ae0:	str	r3, [r5]
   13ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ae8:	add	r3, r3, #24
   13aec:	ldr	r3, [r3]
   13af0:	mov	r0, r3
   13af4:	bl	17090 <init_token_obra@@Base>
   13af8:	ldr	r3, [pc, #576]	; 13d40 <if_statement_only@@Base+0x504>
   13afc:	add	r3, pc, r3
   13b00:	ldrd	r2, [r3, #64]	; 0x40
   13b04:	adds	r2, r2, #1
   13b08:	adc	r3, r3, #0
   13b0c:	ldr	r1, [pc, #560]	; 13d44 <if_statement_only@@Base+0x508>
   13b10:	add	r1, pc, r1
   13b14:	strd	r2, [r1, #64]	; 0x40
   13b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b1c:	add	r5, r3, #28
   13b20:	mov	r0, #4
   13b24:	bl	118d0 <malloc@plt>
   13b28:	mov	r3, r0
   13b2c:	str	r3, [r5]
   13b30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b34:	add	r3, r3, #28
   13b38:	ldr	r3, [r3]
   13b3c:	mov	r0, r3
   13b40:	bl	170e4 <init_token_cbra@@Base>
   13b44:	ldr	r3, [pc, #508]	; 13d48 <if_statement_only@@Base+0x50c>
   13b48:	add	r3, pc, r3
   13b4c:	ldrd	r2, [r3, #72]	; 0x48
   13b50:	adds	r2, r2, #1
   13b54:	adc	r3, r3, #0
   13b58:	ldr	r1, [pc, #492]	; 13d4c <if_statement_only@@Base+0x510>
   13b5c:	add	r1, pc, r1
   13b60:	strd	r2, [r1, #72]	; 0x48
   13b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b68:	add	r5, r3, #32
   13b6c:	mov	r0, #4
   13b70:	bl	118d0 <malloc@plt>
   13b74:	mov	r3, r0
   13b78:	str	r3, [r5]
   13b7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b80:	add	r3, r3, #32
   13b84:	ldr	r3, [r3]
   13b88:	mov	r0, r3
   13b8c:	bl	171e0 <init_token_eof@@Base>
   13b90:	ldr	r3, [pc, #440]	; 13d50 <if_statement_only@@Base+0x514>
   13b94:	add	r3, pc, r3
   13b98:	ldrd	r2, [r3, #80]	; 0x50
   13b9c:	adds	r2, r2, #1
   13ba0:	adc	r3, r3, #0
   13ba4:	ldr	r1, [pc, #424]	; 13d54 <if_statement_only@@Base+0x518>
   13ba8:	add	r1, pc, r1
   13bac:	strd	r2, [r1, #80]	; 0x50
   13bb0:	ldr	r3, [pc, #416]	; 13d58 <if_statement_only@@Base+0x51c>
   13bb4:	ldr	r3, [r4, r3]
   13bb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13bbc:	str	r2, [r3, #228]	; 0xe4
   13bc0:	ldr	r3, [pc, #400]	; 13d58 <if_statement_only@@Base+0x51c>
   13bc4:	ldr	r3, [r4, r3]
   13bc8:	mov	r2, #9
   13bcc:	str	r2, [r3, #220]	; 0xdc
   13bd0:	sub	r3, fp, #40	; 0x28
   13bd4:	mov	r0, r3
   13bd8:	bl	19428 <read_if_statement@@Base>
   13bdc:	str	r0, [fp, #-16]
   13be0:	ldr	r3, [pc, #368]	; 13d58 <if_statement_only@@Base+0x51c>
   13be4:	ldr	r3, [r4, r3]
   13be8:	ldr	r3, [r3, #204]	; 0xcc
   13bec:	cmp	r3, #9
   13bf0:	beq	13c34 <if_statement_only@@Base+0x3f8>
   13bf4:	ldr	r3, [pc, #352]	; 13d5c <if_statement_only@@Base+0x520>
   13bf8:	add	r3, pc, r3
   13bfc:	ldrd	r2, [r3, #88]	; 0x58
   13c00:	adds	r2, r2, #1
   13c04:	adc	r3, r3, #0
   13c08:	ldr	r1, [pc, #336]	; 13d60 <if_statement_only@@Base+0x524>
   13c0c:	add	r1, pc, r1
   13c10:	strd	r2, [r1, #88]	; 0x58
   13c14:	ldr	r3, [pc, #328]	; 13d64 <if_statement_only@@Base+0x528>
   13c18:	add	r3, pc, r3
   13c1c:	ldr	r2, [pc, #324]	; 13d68 <if_statement_only@@Base+0x52c>
   13c20:	ldr	r1, [pc, #324]	; 13d6c <if_statement_only@@Base+0x530>
   13c24:	add	r1, pc, r1
   13c28:	ldr	r0, [pc, #320]	; 13d70 <if_statement_only@@Base+0x534>
   13c2c:	add	r0, pc, r0
   13c30:	bl	119e4 <__assert_fail@plt>
   13c34:	ldr	r3, [fp, #-16]
   13c38:	cmp	r3, #0
   13c3c:	bne	13c80 <if_statement_only@@Base+0x444>
   13c40:	ldr	r3, [pc, #300]	; 13d74 <if_statement_only@@Base+0x538>
   13c44:	add	r3, pc, r3
   13c48:	ldrd	r2, [r3, #96]	; 0x60
   13c4c:	adds	r2, r2, #1
   13c50:	adc	r3, r3, #0
   13c54:	ldr	r1, [pc, #284]	; 13d78 <if_statement_only@@Base+0x53c>
   13c58:	add	r1, pc, r1
   13c5c:	strd	r2, [r1, #96]	; 0x60
   13c60:	ldr	r3, [pc, #276]	; 13d7c <if_statement_only@@Base+0x540>
   13c64:	add	r3, pc, r3
   13c68:	mov	r2, #284	; 0x11c
   13c6c:	ldr	r1, [pc, #268]	; 13d80 <if_statement_only@@Base+0x544>
   13c70:	add	r1, pc, r1
   13c74:	ldr	r0, [pc, #264]	; 13d84 <if_statement_only@@Base+0x548>
   13c78:	add	r0, pc, r0
   13c7c:	bl	119e4 <__assert_fail@plt>
   13c80:	ldr	r3, [fp, #-16]
   13c84:	ldr	r3, [r3]
   13c88:	cmp	r3, #4
   13c8c:	beq	13cd0 <if_statement_only@@Base+0x494>
   13c90:	ldr	r3, [pc, #240]	; 13d88 <if_statement_only@@Base+0x54c>
   13c94:	add	r3, pc, r3
   13c98:	ldrd	r2, [r3, #112]	; 0x70
   13c9c:	adds	r2, r2, #1
   13ca0:	adc	r3, r3, #0
   13ca4:	ldr	r1, [pc, #224]	; 13d8c <if_statement_only@@Base+0x550>
   13ca8:	add	r1, pc, r1
   13cac:	strd	r2, [r1, #112]	; 0x70
   13cb0:	ldr	r3, [pc, #216]	; 13d90 <if_statement_only@@Base+0x554>
   13cb4:	add	r3, pc, r3
   13cb8:	ldr	r2, [pc, #212]	; 13d94 <if_statement_only@@Base+0x558>
   13cbc:	ldr	r1, [pc, #212]	; 13d98 <if_statement_only@@Base+0x55c>
   13cc0:	add	r1, pc, r1
   13cc4:	ldr	r0, [pc, #208]	; 13d9c <if_statement_only@@Base+0x560>
   13cc8:	add	r0, pc, r0
   13ccc:	bl	119e4 <__assert_fail@plt>
   13cd0:	ldr	r3, [pc, #200]	; 13da0 <if_statement_only@@Base+0x564>
   13cd4:	add	r3, pc, r3
   13cd8:	ldrd	r2, [r3, #104]	; 0x68
   13cdc:	adds	r2, r2, #1
   13ce0:	adc	r3, r3, #0
   13ce4:	ldr	r1, [pc, #184]	; 13da4 <if_statement_only@@Base+0x568>
   13ce8:	add	r1, pc, r1
   13cec:	strd	r2, [r1, #104]	; 0x68
   13cf0:	nop			; (mov r0, r0)
   13cf4:	sub	sp, fp, #12
   13cf8:	pop	{r4, r5, fp, pc}
   13cfc:	andeq	sl, r1, ip, lsr #15
   13d00:	andeq	fp, r1, ip, lsl r6
   13d04:	andeq	fp, r1, r8, lsl #12
   13d08:	andeq	fp, r1, r0, ror #11
   13d0c:	andeq	fp, r1, ip, asr #11
   13d10:	andeq	fp, r1, ip, asr #10
   13d14:	andeq	fp, r1, r8, lsr r5
   13d18:	strdeq	fp, [r1], -ip
   13d1c:	andeq	fp, r1, r8, ror #9
   13d20:	andeq	fp, r1, ip, lsr #9
   13d24:	muleq	r1, r8, r4
   13d28:	andeq	fp, r1, ip, asr r4
   13d2c:	andeq	fp, r1, r8, asr #8
   13d30:	andeq	fp, r1, ip, lsl #8
   13d34:	strdeq	fp, [r1], -r8
   13d38:	andeq	fp, r1, r0, asr #7
   13d3c:	andeq	fp, r1, ip, lsr #7
   13d40:	andeq	fp, r1, r4, ror r3
   13d44:	andeq	fp, r1, r0, ror #6
   13d48:	andeq	fp, r1, r8, lsr #6
   13d4c:	andeq	fp, r1, r4, lsl r3
   13d50:	ldrdeq	fp, [r1], -ip
   13d54:	andeq	fp, r1, r8, asr #5
   13d58:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   13d5c:	andeq	fp, r1, r8, ror r2
   13d60:	andeq	fp, r1, r4, ror #4
   13d64:	andeq	r9, r0, r0, ror #1
   13d68:	andeq	r0, r0, fp, lsl r1
   13d6c:	andeq	r8, r0, ip, asr fp
   13d70:	andeq	r8, r0, r8, lsl #26
   13d74:	andeq	fp, r1, ip, lsr #4
   13d78:	andeq	fp, r1, r8, lsl r2
   13d7c:	muleq	r0, r4, r0
   13d80:	andeq	r8, r0, r0, lsl fp
   13d84:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   13d88:	ldrdeq	fp, [r1], -ip
   13d8c:	andeq	fp, r1, r8, asr #3
   13d90:	andeq	r9, r0, r4, asr #32
   13d94:	andeq	r0, r0, sp, lsl r1
   13d98:	andeq	r8, r0, r0, asr #21
   13d9c:	muleq	r0, r4, ip
   13da0:	muleq	r1, ip, r1
   13da4:	andeq	fp, r1, r8, lsl #3

00013da8 <if_else_statements@@Base>:
   13da8:	push	{r4, r5, fp, lr}
   13dac:	add	fp, sp, #12
   13db0:	sub	sp, sp, #32
   13db4:	ldr	r4, [pc, #1348]	; 14300 <if_else_statements@@Base+0x558>
   13db8:	add	r4, pc, r4
   13dbc:	ldr	r3, [pc, #1344]	; 14304 <if_else_statements@@Base+0x55c>
   13dc0:	add	r3, pc, r3
   13dc4:	ldrd	r2, [r3]
   13dc8:	adds	r2, r2, #1
   13dcc:	adc	r3, r3, #0
   13dd0:	ldr	r1, [pc, #1328]	; 14308 <if_else_statements@@Base+0x560>
   13dd4:	add	r1, pc, r1
   13dd8:	strd	r2, [r1]
   13ddc:	mov	r3, #0
   13de0:	str	r3, [fp, #-16]
   13de4:	sub	r2, fp, #36	; 0x24
   13de8:	sub	r3, fp, #40	; 0x28
   13dec:	mov	r1, r2
   13df0:	mov	r0, r3
   13df4:	bl	18930 <init_grammar@@Base>
   13df8:	ldr	r3, [pc, #1292]	; 1430c <if_else_statements@@Base+0x564>
   13dfc:	add	r3, pc, r3
   13e00:	ldrd	r2, [r3, #8]
   13e04:	adds	r2, r2, #1
   13e08:	adc	r3, r3, #0
   13e0c:	ldr	r1, [pc, #1276]	; 14310 <if_else_statements@@Base+0x568>
   13e10:	add	r1, pc, r1
   13e14:	strd	r2, [r1, #8]
   13e18:	mov	r0, #3
   13e1c:	bl	118d0 <malloc@plt>
   13e20:	mov	r3, r0
   13e24:	str	r3, [fp, #-20]	; 0xffffffec
   13e28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e2c:	mov	r2, #33	; 0x21
   13e30:	strb	r2, [r3]
   13e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e38:	add	r3, r3, #1
   13e3c:	mov	r2, #61	; 0x3d
   13e40:	strb	r2, [r3]
   13e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e48:	add	r3, r3, #2
   13e4c:	mov	r2, #0
   13e50:	strb	r2, [r3]
   13e54:	mov	r0, #44	; 0x2c
   13e58:	bl	118d0 <malloc@plt>
   13e5c:	mov	r3, r0
   13e60:	str	r3, [fp, #-24]	; 0xffffffe8
   13e64:	mov	r0, #4
   13e68:	bl	118d0 <malloc@plt>
   13e6c:	mov	r3, r0
   13e70:	mov	r2, r3
   13e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e78:	str	r2, [r3]
   13e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e80:	ldr	r3, [r3]
   13e84:	mov	r0, r3
   13e88:	bl	16fe8 <init_token_opar@@Base>
   13e8c:	ldr	r3, [pc, #1152]	; 14314 <if_else_statements@@Base+0x56c>
   13e90:	add	r3, pc, r3
   13e94:	ldrd	r2, [r3, #16]
   13e98:	adds	r2, r2, #1
   13e9c:	adc	r3, r3, #0
   13ea0:	ldr	r1, [pc, #1136]	; 14318 <if_else_statements@@Base+0x570>
   13ea4:	add	r1, pc, r1
   13ea8:	strd	r2, [r1, #16]
   13eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eb0:	add	r5, r3, #4
   13eb4:	mov	r0, #8
   13eb8:	bl	118d0 <malloc@plt>
   13ebc:	mov	r3, r0
   13ec0:	str	r3, [r5]
   13ec4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ec8:	add	r3, r3, #4
   13ecc:	ldr	r3, [r3]
   13ed0:	mov	r1, #1
   13ed4:	mov	r0, r3
   13ed8:	bl	16f20 <init_token_int_value@@Base>
   13edc:	ldr	r3, [pc, #1080]	; 1431c <if_else_statements@@Base+0x574>
   13ee0:	add	r3, pc, r3
   13ee4:	ldrd	r2, [r3, #24]
   13ee8:	adds	r2, r2, #1
   13eec:	adc	r3, r3, #0
   13ef0:	ldr	r1, [pc, #1064]	; 14320 <if_else_statements@@Base+0x578>
   13ef4:	add	r1, pc, r1
   13ef8:	strd	r2, [r1, #24]
   13efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f00:	add	r5, r3, #8
   13f04:	mov	r0, #8
   13f08:	bl	118d0 <malloc@plt>
   13f0c:	mov	r3, r0
   13f10:	str	r3, [r5]
   13f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f18:	add	r3, r3, #8
   13f1c:	ldr	r3, [r3]
   13f20:	mov	r1, #1
   13f24:	mov	r0, r3
   13f28:	bl	16f20 <init_token_int_value@@Base>
   13f2c:	ldr	r3, [pc, #1008]	; 14324 <if_else_statements@@Base+0x57c>
   13f30:	add	r3, pc, r3
   13f34:	ldrd	r2, [r3, #32]
   13f38:	adds	r2, r2, #1
   13f3c:	adc	r3, r3, #0
   13f40:	ldr	r1, [pc, #992]	; 14328 <if_else_statements@@Base+0x580>
   13f44:	add	r1, pc, r1
   13f48:	strd	r2, [r1, #32]
   13f4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f50:	add	r5, r3, #12
   13f54:	mov	r0, #8
   13f58:	bl	118d0 <malloc@plt>
   13f5c:	mov	r3, r0
   13f60:	str	r3, [r5]
   13f64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f68:	add	r3, r3, #12
   13f6c:	ldr	r3, [r3]
   13f70:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f74:	mov	r0, r3
   13f78:	bl	172dc <init_token_boolean_op@@Base>
   13f7c:	ldr	r3, [pc, #936]	; 1432c <if_else_statements@@Base+0x584>
   13f80:	add	r3, pc, r3
   13f84:	ldrd	r2, [r3, #40]	; 0x28
   13f88:	adds	r2, r2, #1
   13f8c:	adc	r3, r3, #0
   13f90:	ldr	r1, [pc, #920]	; 14330 <if_else_statements@@Base+0x588>
   13f94:	add	r1, pc, r1
   13f98:	strd	r2, [r1, #40]	; 0x28
   13f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fa0:	add	r5, r3, #16
   13fa4:	mov	r0, #8
   13fa8:	bl	118d0 <malloc@plt>
   13fac:	mov	r3, r0
   13fb0:	str	r3, [r5]
   13fb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fb8:	add	r3, r3, #16
   13fbc:	ldr	r3, [r3]
   13fc0:	mov	r1, #1
   13fc4:	mov	r0, r3
   13fc8:	bl	16f20 <init_token_int_value@@Base>
   13fcc:	ldr	r3, [pc, #864]	; 14334 <if_else_statements@@Base+0x58c>
   13fd0:	add	r3, pc, r3
   13fd4:	ldrd	r2, [r3, #48]	; 0x30
   13fd8:	adds	r2, r2, #1
   13fdc:	adc	r3, r3, #0
   13fe0:	ldr	r1, [pc, #848]	; 14338 <if_else_statements@@Base+0x590>
   13fe4:	add	r1, pc, r1
   13fe8:	strd	r2, [r1, #48]	; 0x30
   13fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ff0:	add	r5, r3, #20
   13ff4:	mov	r0, #4
   13ff8:	bl	118d0 <malloc@plt>
   13ffc:	mov	r3, r0
   14000:	str	r3, [r5]
   14004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14008:	add	r3, r3, #20
   1400c:	ldr	r3, [r3]
   14010:	mov	r0, r3
   14014:	bl	1703c <init_token_cpar@@Base>
   14018:	ldr	r3, [pc, #796]	; 1433c <if_else_statements@@Base+0x594>
   1401c:	add	r3, pc, r3
   14020:	ldrd	r2, [r3, #56]	; 0x38
   14024:	adds	r2, r2, #1
   14028:	adc	r3, r3, #0
   1402c:	ldr	r1, [pc, #780]	; 14340 <if_else_statements@@Base+0x598>
   14030:	add	r1, pc, r1
   14034:	strd	r2, [r1, #56]	; 0x38
   14038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1403c:	add	r5, r3, #24
   14040:	mov	r0, #4
   14044:	bl	118d0 <malloc@plt>
   14048:	mov	r3, r0
   1404c:	str	r3, [r5]
   14050:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14054:	add	r3, r3, #24
   14058:	ldr	r3, [r3]
   1405c:	mov	r0, r3
   14060:	bl	17090 <init_token_obra@@Base>
   14064:	ldr	r3, [pc, #728]	; 14344 <if_else_statements@@Base+0x59c>
   14068:	add	r3, pc, r3
   1406c:	ldrd	r2, [r3, #64]	; 0x40
   14070:	adds	r2, r2, #1
   14074:	adc	r3, r3, #0
   14078:	ldr	r1, [pc, #712]	; 14348 <if_else_statements@@Base+0x5a0>
   1407c:	add	r1, pc, r1
   14080:	strd	r2, [r1, #64]	; 0x40
   14084:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14088:	add	r5, r3, #28
   1408c:	mov	r0, #4
   14090:	bl	118d0 <malloc@plt>
   14094:	mov	r3, r0
   14098:	str	r3, [r5]
   1409c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140a0:	add	r3, r3, #28
   140a4:	ldr	r3, [r3]
   140a8:	mov	r0, r3
   140ac:	bl	170e4 <init_token_cbra@@Base>
   140b0:	ldr	r3, [pc, #660]	; 1434c <if_else_statements@@Base+0x5a4>
   140b4:	add	r3, pc, r3
   140b8:	ldrd	r2, [r3, #72]	; 0x48
   140bc:	adds	r2, r2, #1
   140c0:	adc	r3, r3, #0
   140c4:	ldr	r1, [pc, #644]	; 14350 <if_else_statements@@Base+0x5a8>
   140c8:	add	r1, pc, r1
   140cc:	strd	r2, [r1, #72]	; 0x48
   140d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140d4:	add	r5, r3, #32
   140d8:	mov	r0, #4
   140dc:	bl	118d0 <malloc@plt>
   140e0:	mov	r3, r0
   140e4:	str	r3, [r5]
   140e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140ec:	add	r3, r3, #32
   140f0:	ldr	r3, [r3]
   140f4:	mov	r0, r3
   140f8:	bl	17288 <init_token_else@@Base>
   140fc:	ldr	r3, [pc, #592]	; 14354 <if_else_statements@@Base+0x5ac>
   14100:	add	r3, pc, r3
   14104:	ldrd	r2, [r3, #80]	; 0x50
   14108:	adds	r2, r2, #1
   1410c:	adc	r3, r3, #0
   14110:	ldr	r1, [pc, #576]	; 14358 <if_else_statements@@Base+0x5b0>
   14114:	add	r1, pc, r1
   14118:	strd	r2, [r1, #80]	; 0x50
   1411c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14120:	add	r5, r3, #36	; 0x24
   14124:	mov	r0, #4
   14128:	bl	118d0 <malloc@plt>
   1412c:	mov	r3, r0
   14130:	str	r3, [r5]
   14134:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14138:	add	r3, r3, #36	; 0x24
   1413c:	ldr	r3, [r3]
   14140:	mov	r0, r3
   14144:	bl	17090 <init_token_obra@@Base>
   14148:	ldr	r3, [pc, #524]	; 1435c <if_else_statements@@Base+0x5b4>
   1414c:	add	r3, pc, r3
   14150:	ldrd	r2, [r3, #88]	; 0x58
   14154:	adds	r2, r2, #1
   14158:	adc	r3, r3, #0
   1415c:	ldr	r1, [pc, #508]	; 14360 <if_else_statements@@Base+0x5b8>
   14160:	add	r1, pc, r1
   14164:	strd	r2, [r1, #88]	; 0x58
   14168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1416c:	add	r5, r3, #40	; 0x28
   14170:	mov	r0, #4
   14174:	bl	118d0 <malloc@plt>
   14178:	mov	r3, r0
   1417c:	str	r3, [r5]
   14180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14184:	add	r3, r3, #40	; 0x28
   14188:	ldr	r3, [r3]
   1418c:	mov	r0, r3
   14190:	bl	170e4 <init_token_cbra@@Base>
   14194:	ldr	r3, [pc, #456]	; 14364 <if_else_statements@@Base+0x5bc>
   14198:	add	r3, pc, r3
   1419c:	ldrd	r2, [r3, #96]	; 0x60
   141a0:	adds	r2, r2, #1
   141a4:	adc	r3, r3, #0
   141a8:	ldr	r1, [pc, #440]	; 14368 <if_else_statements@@Base+0x5c0>
   141ac:	add	r1, pc, r1
   141b0:	strd	r2, [r1, #96]	; 0x60
   141b4:	ldr	r3, [pc, #432]	; 1436c <if_else_statements@@Base+0x5c4>
   141b8:	ldr	r3, [r4, r3]
   141bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   141c0:	str	r2, [r3, #228]	; 0xe4
   141c4:	ldr	r3, [pc, #416]	; 1436c <if_else_statements@@Base+0x5c4>
   141c8:	ldr	r3, [r4, r3]
   141cc:	mov	r2, #11
   141d0:	str	r2, [r3, #220]	; 0xdc
   141d4:	sub	r3, fp, #40	; 0x28
   141d8:	mov	r0, r3
   141dc:	bl	19428 <read_if_statement@@Base>
   141e0:	str	r0, [fp, #-16]
   141e4:	ldr	r3, [pc, #384]	; 1436c <if_else_statements@@Base+0x5c4>
   141e8:	ldr	r3, [r4, r3]
   141ec:	ldr	r3, [r3, #204]	; 0xcc
   141f0:	cmp	r3, #11
   141f4:	beq	14238 <if_else_statements@@Base+0x490>
   141f8:	ldr	r3, [pc, #368]	; 14370 <if_else_statements@@Base+0x5c8>
   141fc:	add	r3, pc, r3
   14200:	ldrd	r2, [r3, #104]	; 0x68
   14204:	adds	r2, r2, #1
   14208:	adc	r3, r3, #0
   1420c:	ldr	r1, [pc, #352]	; 14374 <if_else_statements@@Base+0x5cc>
   14210:	add	r1, pc, r1
   14214:	strd	r2, [r1, #104]	; 0x68
   14218:	ldr	r3, [pc, #344]	; 14378 <if_else_statements@@Base+0x5d0>
   1421c:	add	r3, pc, r3
   14220:	mov	r2, #332	; 0x14c
   14224:	ldr	r1, [pc, #336]	; 1437c <if_else_statements@@Base+0x5d4>
   14228:	add	r1, pc, r1
   1422c:	ldr	r0, [pc, #332]	; 14380 <if_else_statements@@Base+0x5d8>
   14230:	add	r0, pc, r0
   14234:	bl	119e4 <__assert_fail@plt>
   14238:	ldr	r3, [fp, #-16]
   1423c:	cmp	r3, #0
   14240:	bne	14284 <if_else_statements@@Base+0x4dc>
   14244:	ldr	r3, [pc, #312]	; 14384 <if_else_statements@@Base+0x5dc>
   14248:	add	r3, pc, r3
   1424c:	ldrd	r2, [r3, #112]	; 0x70
   14250:	adds	r2, r2, #1
   14254:	adc	r3, r3, #0
   14258:	ldr	r1, [pc, #296]	; 14388 <if_else_statements@@Base+0x5e0>
   1425c:	add	r1, pc, r1
   14260:	strd	r2, [r1, #112]	; 0x70
   14264:	ldr	r3, [pc, #288]	; 1438c <if_else_statements@@Base+0x5e4>
   14268:	add	r3, pc, r3
   1426c:	ldr	r2, [pc, #284]	; 14390 <if_else_statements@@Base+0x5e8>
   14270:	ldr	r1, [pc, #284]	; 14394 <if_else_statements@@Base+0x5ec>
   14274:	add	r1, pc, r1
   14278:	ldr	r0, [pc, #280]	; 14398 <if_else_statements@@Base+0x5f0>
   1427c:	add	r0, pc, r0
   14280:	bl	119e4 <__assert_fail@plt>
   14284:	ldr	r3, [fp, #-16]
   14288:	ldr	r3, [r3]
   1428c:	cmp	r3, #4
   14290:	beq	142d4 <if_else_statements@@Base+0x52c>
   14294:	ldr	r3, [pc, #256]	; 1439c <if_else_statements@@Base+0x5f4>
   14298:	add	r3, pc, r3
   1429c:	ldrd	r2, [r3, #128]	; 0x80
   142a0:	adds	r2, r2, #1
   142a4:	adc	r3, r3, #0
   142a8:	ldr	r1, [pc, #240]	; 143a0 <if_else_statements@@Base+0x5f8>
   142ac:	add	r1, pc, r1
   142b0:	strd	r2, [r1, #128]	; 0x80
   142b4:	ldr	r3, [pc, #232]	; 143a4 <if_else_statements@@Base+0x5fc>
   142b8:	add	r3, pc, r3
   142bc:	ldr	r2, [pc, #228]	; 143a8 <if_else_statements@@Base+0x600>
   142c0:	ldr	r1, [pc, #228]	; 143ac <if_else_statements@@Base+0x604>
   142c4:	add	r1, pc, r1
   142c8:	ldr	r0, [pc, #224]	; 143b0 <if_else_statements@@Base+0x608>
   142cc:	add	r0, pc, r0
   142d0:	bl	119e4 <__assert_fail@plt>
   142d4:	ldr	r3, [pc, #216]	; 143b4 <if_else_statements@@Base+0x60c>
   142d8:	add	r3, pc, r3
   142dc:	ldrd	r2, [r3, #120]	; 0x78
   142e0:	adds	r2, r2, #1
   142e4:	adc	r3, r3, #0
   142e8:	ldr	r1, [pc, #200]	; 143b8 <if_else_statements@@Base+0x610>
   142ec:	add	r1, pc, r1
   142f0:	strd	r2, [r1, #120]	; 0x78
   142f4:	nop			; (mov r0, r0)
   142f8:	sub	sp, fp, #12
   142fc:	pop	{r4, r5, fp, pc}
   14300:	andeq	sl, r1, r0, asr #4
   14304:	andeq	fp, r1, r8, lsr #32
   14308:	andeq	fp, r1, r4, lsl r0
   1430c:	andeq	sl, r1, ip, ror #31
   14310:	ldrdeq	sl, [r1], -r8
   14314:	andeq	sl, r1, r8, asr pc
   14318:	andeq	sl, r1, r4, asr #30
   1431c:	andeq	sl, r1, r8, lsl #30
   14320:	strdeq	sl, [r1], -r4
   14324:			; <UNDEFINED> instruction: 0x0001aeb8
   14328:	andeq	sl, r1, r4, lsr #29
   1432c:	andeq	sl, r1, r8, ror #28
   14330:	andeq	sl, r1, r4, asr lr
   14334:	andeq	sl, r1, r8, lsl lr
   14338:	andeq	sl, r1, r4, lsl #28
   1433c:	andeq	sl, r1, ip, asr #27
   14340:			; <UNDEFINED> instruction: 0x0001adb8
   14344:	andeq	sl, r1, r0, lsl #27
   14348:	andeq	sl, r1, ip, ror #26
   1434c:	andeq	sl, r1, r4, lsr sp
   14350:	andeq	sl, r1, r0, lsr #26
   14354:	andeq	sl, r1, r8, ror #25
   14358:	ldrdeq	sl, [r1], -r4
   1435c:	muleq	r1, ip, ip
   14360:	andeq	sl, r1, r8, lsl #25
   14364:	andeq	sl, r1, r0, asr ip
   14368:	andeq	sl, r1, ip, lsr ip
   1436c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14370:	andeq	sl, r1, ip, ror #23
   14374:	ldrdeq	sl, [r1], -r8
   14378:	strdeq	r8, [r0], -r0
   1437c:	andeq	r8, r0, r8, asr r5
   14380:	andeq	r8, r0, r0, asr #14
   14384:	andeq	sl, r1, r0, lsr #23
   14388:	andeq	sl, r1, ip, lsl #23
   1438c:	andeq	r8, r0, r4, lsr #21
   14390:	andeq	r0, r0, sp, asr #2
   14394:	andeq	r8, r0, ip, lsl #10
   14398:	ldrdeq	r8, [r0], -r4
   1439c:	andeq	sl, r1, r0, asr fp
   143a0:	andeq	sl, r1, ip, lsr fp
   143a4:	andeq	r8, r0, r4, asr sl
   143a8:	andeq	r0, r0, lr, asr #2
   143ac:			; <UNDEFINED> instruction: 0x000084bc
   143b0:	muleq	r0, r0, r6
   143b4:	andeq	sl, r1, r0, lsl fp
   143b8:	strdeq	sl, [r1], -ip

000143bc <body_with_two_returns@@Base>:
   143bc:	push	{r4, r5, fp, lr}
   143c0:	add	fp, sp, #12
   143c4:	sub	sp, sp, #24
   143c8:	ldr	r4, [pc, #1220]	; 14894 <body_with_two_returns@@Base+0x4d8>
   143cc:	add	r4, pc, r4
   143d0:	ldr	r3, [pc, #1216]	; 14898 <body_with_two_returns@@Base+0x4dc>
   143d4:	add	r3, pc, r3
   143d8:	ldrd	r2, [r3]
   143dc:	adds	r2, r2, #1
   143e0:	adc	r3, r3, #0
   143e4:	ldr	r1, [pc, #1200]	; 1489c <body_with_two_returns@@Base+0x4e0>
   143e8:	add	r1, pc, r1
   143ec:	strd	r2, [r1]
   143f0:	mov	r3, #0
   143f4:	str	r3, [fp, #-16]
   143f8:	sub	r2, fp, #32
   143fc:	sub	r3, fp, #36	; 0x24
   14400:	mov	r1, r2
   14404:	mov	r0, r3
   14408:	bl	18930 <init_grammar@@Base>
   1440c:	ldr	r3, [pc, #1164]	; 148a0 <body_with_two_returns@@Base+0x4e4>
   14410:	add	r3, pc, r3
   14414:	ldrd	r2, [r3, #8]
   14418:	adds	r2, r2, #1
   1441c:	adc	r3, r3, #0
   14420:	ldr	r1, [pc, #1148]	; 148a4 <body_with_two_returns@@Base+0x4e8>
   14424:	add	r1, pc, r1
   14428:	strd	r2, [r1, #8]
   1442c:	mov	r0, #32
   14430:	bl	118d0 <malloc@plt>
   14434:	mov	r3, r0
   14438:	str	r3, [fp, #-20]	; 0xffffffec
   1443c:	mov	r0, #4
   14440:	bl	118d0 <malloc@plt>
   14444:	mov	r3, r0
   14448:	mov	r2, r3
   1444c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14450:	str	r2, [r3]
   14454:	ldr	r3, [fp, #-20]	; 0xffffffec
   14458:	ldr	r3, [r3]
   1445c:	mov	r0, r3
   14460:	bl	17090 <init_token_obra@@Base>
   14464:	ldr	r3, [pc, #1084]	; 148a8 <body_with_two_returns@@Base+0x4ec>
   14468:	add	r3, pc, r3
   1446c:	ldrd	r2, [r3, #16]
   14470:	adds	r2, r2, #1
   14474:	adc	r3, r3, #0
   14478:	ldr	r1, [pc, #1068]	; 148ac <body_with_two_returns@@Base+0x4f0>
   1447c:	add	r1, pc, r1
   14480:	strd	r2, [r1, #16]
   14484:	ldr	r3, [fp, #-20]	; 0xffffffec
   14488:	add	r5, r3, #4
   1448c:	mov	r0, #4
   14490:	bl	118d0 <malloc@plt>
   14494:	mov	r3, r0
   14498:	str	r3, [r5]
   1449c:	ldr	r3, [fp, #-20]	; 0xffffffec
   144a0:	add	r3, r3, #4
   144a4:	ldr	r3, [r3]
   144a8:	mov	r0, r3
   144ac:	bl	17138 <init_token_return@@Base>
   144b0:	ldr	r3, [pc, #1016]	; 148b0 <body_with_two_returns@@Base+0x4f4>
   144b4:	add	r3, pc, r3
   144b8:	ldrd	r2, [r3, #24]
   144bc:	adds	r2, r2, #1
   144c0:	adc	r3, r3, #0
   144c4:	ldr	r1, [pc, #1000]	; 148b4 <body_with_two_returns@@Base+0x4f8>
   144c8:	add	r1, pc, r1
   144cc:	strd	r2, [r1, #24]
   144d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d4:	add	r5, r3, #8
   144d8:	mov	r0, #8
   144dc:	bl	118d0 <malloc@plt>
   144e0:	mov	r3, r0
   144e4:	str	r3, [r5]
   144e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144ec:	add	r3, r3, #8
   144f0:	ldr	r3, [r3]
   144f4:	mov	r1, #1
   144f8:	mov	r0, r3
   144fc:	bl	16f20 <init_token_int_value@@Base>
   14500:	ldr	r3, [pc, #944]	; 148b8 <body_with_two_returns@@Base+0x4fc>
   14504:	add	r3, pc, r3
   14508:	ldrd	r2, [r3, #32]
   1450c:	adds	r2, r2, #1
   14510:	adc	r3, r3, #0
   14514:	ldr	r1, [pc, #928]	; 148bc <body_with_two_returns@@Base+0x500>
   14518:	add	r1, pc, r1
   1451c:	strd	r2, [r1, #32]
   14520:	ldr	r3, [fp, #-20]	; 0xffffffec
   14524:	add	r5, r3, #12
   14528:	mov	r0, #4
   1452c:	bl	118d0 <malloc@plt>
   14530:	mov	r3, r0
   14534:	str	r3, [r5]
   14538:	ldr	r3, [fp, #-20]	; 0xffffffec
   1453c:	add	r3, r3, #12
   14540:	ldr	r3, [r3]
   14544:	mov	r0, r3
   14548:	bl	1718c <init_token_semicolon@@Base>
   1454c:	ldr	r3, [pc, #876]	; 148c0 <body_with_two_returns@@Base+0x504>
   14550:	add	r3, pc, r3
   14554:	ldrd	r2, [r3, #40]	; 0x28
   14558:	adds	r2, r2, #1
   1455c:	adc	r3, r3, #0
   14560:	ldr	r1, [pc, #860]	; 148c4 <body_with_two_returns@@Base+0x508>
   14564:	add	r1, pc, r1
   14568:	strd	r2, [r1, #40]	; 0x28
   1456c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14570:	add	r5, r3, #16
   14574:	mov	r0, #4
   14578:	bl	118d0 <malloc@plt>
   1457c:	mov	r3, r0
   14580:	str	r3, [r5]
   14584:	ldr	r3, [fp, #-20]	; 0xffffffec
   14588:	add	r3, r3, #16
   1458c:	ldr	r3, [r3]
   14590:	mov	r0, r3
   14594:	bl	17138 <init_token_return@@Base>
   14598:	ldr	r3, [pc, #808]	; 148c8 <body_with_two_returns@@Base+0x50c>
   1459c:	add	r3, pc, r3
   145a0:	ldrd	r2, [r3, #48]	; 0x30
   145a4:	adds	r2, r2, #1
   145a8:	adc	r3, r3, #0
   145ac:	ldr	r1, [pc, #792]	; 148cc <body_with_two_returns@@Base+0x510>
   145b0:	add	r1, pc, r1
   145b4:	strd	r2, [r1, #48]	; 0x30
   145b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145bc:	add	r5, r3, #20
   145c0:	mov	r0, #8
   145c4:	bl	118d0 <malloc@plt>
   145c8:	mov	r3, r0
   145cc:	str	r3, [r5]
   145d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145d4:	add	r3, r3, #20
   145d8:	ldr	r3, [r3]
   145dc:	mov	r1, #1
   145e0:	mov	r0, r3
   145e4:	bl	16f20 <init_token_int_value@@Base>
   145e8:	ldr	r3, [pc, #736]	; 148d0 <body_with_two_returns@@Base+0x514>
   145ec:	add	r3, pc, r3
   145f0:	ldrd	r2, [r3, #56]	; 0x38
   145f4:	adds	r2, r2, #1
   145f8:	adc	r3, r3, #0
   145fc:	ldr	r1, [pc, #720]	; 148d4 <body_with_two_returns@@Base+0x518>
   14600:	add	r1, pc, r1
   14604:	strd	r2, [r1, #56]	; 0x38
   14608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1460c:	add	r5, r3, #24
   14610:	mov	r0, #4
   14614:	bl	118d0 <malloc@plt>
   14618:	mov	r3, r0
   1461c:	str	r3, [r5]
   14620:	ldr	r3, [fp, #-20]	; 0xffffffec
   14624:	add	r3, r3, #24
   14628:	ldr	r3, [r3]
   1462c:	mov	r0, r3
   14630:	bl	1718c <init_token_semicolon@@Base>
   14634:	ldr	r3, [pc, #668]	; 148d8 <body_with_two_returns@@Base+0x51c>
   14638:	add	r3, pc, r3
   1463c:	ldrd	r2, [r3, #64]	; 0x40
   14640:	adds	r2, r2, #1
   14644:	adc	r3, r3, #0
   14648:	ldr	r1, [pc, #652]	; 148dc <body_with_two_returns@@Base+0x520>
   1464c:	add	r1, pc, r1
   14650:	strd	r2, [r1, #64]	; 0x40
   14654:	ldr	r3, [fp, #-20]	; 0xffffffec
   14658:	add	r5, r3, #28
   1465c:	mov	r0, #4
   14660:	bl	118d0 <malloc@plt>
   14664:	mov	r3, r0
   14668:	str	r3, [r5]
   1466c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14670:	add	r3, r3, #28
   14674:	ldr	r3, [r3]
   14678:	mov	r0, r3
   1467c:	bl	170e4 <init_token_cbra@@Base>
   14680:	ldr	r3, [pc, #600]	; 148e0 <body_with_two_returns@@Base+0x524>
   14684:	add	r3, pc, r3
   14688:	ldrd	r2, [r3, #72]	; 0x48
   1468c:	adds	r2, r2, #1
   14690:	adc	r3, r3, #0
   14694:	ldr	r1, [pc, #584]	; 148e4 <body_with_two_returns@@Base+0x528>
   14698:	add	r1, pc, r1
   1469c:	strd	r2, [r1, #72]	; 0x48
   146a0:	ldr	r3, [pc, #576]	; 148e8 <body_with_two_returns@@Base+0x52c>
   146a4:	ldr	r3, [r4, r3]
   146a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   146ac:	str	r2, [r3, #228]	; 0xe4
   146b0:	ldr	r3, [pc, #560]	; 148e8 <body_with_two_returns@@Base+0x52c>
   146b4:	ldr	r3, [r4, r3]
   146b8:	mov	r2, #8
   146bc:	str	r2, [r3, #220]	; 0xdc
   146c0:	sub	r3, fp, #36	; 0x24
   146c4:	mov	r0, r3
   146c8:	bl	18dec <read_body@@Base>
   146cc:	str	r0, [fp, #-16]
   146d0:	ldr	r3, [pc, #528]	; 148e8 <body_with_two_returns@@Base+0x52c>
   146d4:	ldr	r3, [r4, r3]
   146d8:	ldr	r3, [r3, #204]	; 0xcc
   146dc:	cmp	r3, #8
   146e0:	beq	14724 <body_with_two_returns@@Base+0x368>
   146e4:	ldr	r3, [pc, #512]	; 148ec <body_with_two_returns@@Base+0x530>
   146e8:	add	r3, pc, r3
   146ec:	ldrd	r2, [r3, #80]	; 0x50
   146f0:	adds	r2, r2, #1
   146f4:	adc	r3, r3, #0
   146f8:	ldr	r1, [pc, #496]	; 148f0 <body_with_two_returns@@Base+0x534>
   146fc:	add	r1, pc, r1
   14700:	strd	r2, [r1, #80]	; 0x50
   14704:	ldr	r3, [pc, #488]	; 148f4 <body_with_two_returns@@Base+0x538>
   14708:	add	r3, pc, r3
   1470c:	ldr	r2, [pc, #484]	; 148f8 <body_with_two_returns@@Base+0x53c>
   14710:	ldr	r1, [pc, #484]	; 148fc <body_with_two_returns@@Base+0x540>
   14714:	add	r1, pc, r1
   14718:	ldr	r0, [pc, #480]	; 14900 <body_with_two_returns@@Base+0x544>
   1471c:	add	r0, pc, r0
   14720:	bl	119e4 <__assert_fail@plt>
   14724:	ldr	r3, [fp, #-16]
   14728:	cmp	r3, #0
   1472c:	bne	14770 <body_with_two_returns@@Base+0x3b4>
   14730:	ldr	r3, [pc, #460]	; 14904 <body_with_two_returns@@Base+0x548>
   14734:	add	r3, pc, r3
   14738:	ldrd	r2, [r3, #88]	; 0x58
   1473c:	adds	r2, r2, #1
   14740:	adc	r3, r3, #0
   14744:	ldr	r1, [pc, #444]	; 14908 <body_with_two_returns@@Base+0x54c>
   14748:	add	r1, pc, r1
   1474c:	strd	r2, [r1, #88]	; 0x58
   14750:	ldr	r3, [pc, #436]	; 1490c <body_with_two_returns@@Base+0x550>
   14754:	add	r3, pc, r3
   14758:	mov	r2, #372	; 0x174
   1475c:	ldr	r1, [pc, #428]	; 14910 <body_with_two_returns@@Base+0x554>
   14760:	add	r1, pc, r1
   14764:	ldr	r0, [pc, #424]	; 14914 <body_with_two_returns@@Base+0x558>
   14768:	add	r0, pc, r0
   1476c:	bl	119e4 <__assert_fail@plt>
   14770:	ldr	r3, [fp, #-16]
   14774:	ldr	r3, [r3]
   14778:	cmp	r3, #3
   1477c:	beq	147c0 <body_with_two_returns@@Base+0x404>
   14780:	ldr	r3, [pc, #400]	; 14918 <body_with_two_returns@@Base+0x55c>
   14784:	add	r3, pc, r3
   14788:	ldrd	r2, [r3, #96]	; 0x60
   1478c:	adds	r2, r2, #1
   14790:	adc	r3, r3, #0
   14794:	ldr	r1, [pc, #384]	; 1491c <body_with_two_returns@@Base+0x560>
   14798:	add	r1, pc, r1
   1479c:	strd	r2, [r1, #96]	; 0x60
   147a0:	ldr	r3, [pc, #376]	; 14920 <body_with_two_returns@@Base+0x564>
   147a4:	add	r3, pc, r3
   147a8:	ldr	r2, [pc, #372]	; 14924 <body_with_two_returns@@Base+0x568>
   147ac:	ldr	r1, [pc, #372]	; 14928 <body_with_two_returns@@Base+0x56c>
   147b0:	add	r1, pc, r1
   147b4:	ldr	r0, [pc, #368]	; 1492c <body_with_two_returns@@Base+0x570>
   147b8:	add	r0, pc, r0
   147bc:	bl	119e4 <__assert_fail@plt>
   147c0:	ldr	r3, [fp, #-16]
   147c4:	ldr	r3, [r3, #4]
   147c8:	ldr	r3, [r3]
   147cc:	cmp	r3, #3
   147d0:	beq	14814 <body_with_two_returns@@Base+0x458>
   147d4:	ldr	r3, [pc, #340]	; 14930 <body_with_two_returns@@Base+0x574>
   147d8:	add	r3, pc, r3
   147dc:	ldrd	r2, [r3, #104]	; 0x68
   147e0:	adds	r2, r2, #1
   147e4:	adc	r3, r3, #0
   147e8:	ldr	r1, [pc, #324]	; 14934 <body_with_two_returns@@Base+0x578>
   147ec:	add	r1, pc, r1
   147f0:	strd	r2, [r1, #104]	; 0x68
   147f4:	ldr	r3, [pc, #316]	; 14938 <body_with_two_returns@@Base+0x57c>
   147f8:	add	r3, pc, r3
   147fc:	ldr	r2, [pc, #312]	; 1493c <body_with_two_returns@@Base+0x580>
   14800:	ldr	r1, [pc, #312]	; 14940 <body_with_two_returns@@Base+0x584>
   14804:	add	r1, pc, r1
   14808:	ldr	r0, [pc, #308]	; 14944 <body_with_two_returns@@Base+0x588>
   1480c:	add	r0, pc, r0
   14810:	bl	119e4 <__assert_fail@plt>
   14814:	ldr	r3, [fp, #-16]
   14818:	ldr	r3, [r3, #4]
   1481c:	ldr	r3, [r3, #4]
   14820:	cmp	r3, #0
   14824:	beq	14868 <body_with_two_returns@@Base+0x4ac>
   14828:	ldr	r3, [pc, #280]	; 14948 <body_with_two_returns@@Base+0x58c>
   1482c:	add	r3, pc, r3
   14830:	ldrd	r2, [r3, #120]	; 0x78
   14834:	adds	r2, r2, #1
   14838:	adc	r3, r3, #0
   1483c:	ldr	r1, [pc, #264]	; 1494c <body_with_two_returns@@Base+0x590>
   14840:	add	r1, pc, r1
   14844:	strd	r2, [r1, #120]	; 0x78
   14848:	ldr	r3, [pc, #256]	; 14950 <body_with_two_returns@@Base+0x594>
   1484c:	add	r3, pc, r3
   14850:	ldr	r2, [pc, #252]	; 14954 <body_with_two_returns@@Base+0x598>
   14854:	ldr	r1, [pc, #252]	; 14958 <body_with_two_returns@@Base+0x59c>
   14858:	add	r1, pc, r1
   1485c:	ldr	r0, [pc, #248]	; 1495c <body_with_two_returns@@Base+0x5a0>
   14860:	add	r0, pc, r0
   14864:	bl	119e4 <__assert_fail@plt>
   14868:	ldr	r3, [pc, #240]	; 14960 <body_with_two_returns@@Base+0x5a4>
   1486c:	add	r3, pc, r3
   14870:	ldrd	r2, [r3, #112]	; 0x70
   14874:	adds	r2, r2, #1
   14878:	adc	r3, r3, #0
   1487c:	ldr	r1, [pc, #224]	; 14964 <body_with_two_returns@@Base+0x5a8>
   14880:	add	r1, pc, r1
   14884:	strd	r2, [r1, #112]	; 0x70
   14888:	nop			; (mov r0, r0)
   1488c:	sub	sp, fp, #12
   14890:	pop	{r4, r5, fp, pc}
   14894:	andeq	r9, r1, ip, lsr #24
   14898:	muleq	r1, r4, r9
   1489c:	andeq	sl, r1, r0, lsl #19
   148a0:	andeq	sl, r1, r8, asr r9
   148a4:	andeq	sl, r1, r4, asr #18
   148a8:	andeq	sl, r1, r0, lsl #18
   148ac:	andeq	sl, r1, ip, ror #17
   148b0:			; <UNDEFINED> instruction: 0x0001a8b4
   148b4:	andeq	sl, r1, r0, lsr #17
   148b8:	andeq	sl, r1, r4, ror #16
   148bc:	andeq	sl, r1, r0, asr r8
   148c0:	andeq	sl, r1, r8, lsl r8
   148c4:	andeq	sl, r1, r4, lsl #16
   148c8:	andeq	sl, r1, ip, asr #15
   148cc:			; <UNDEFINED> instruction: 0x0001a7b8
   148d0:	andeq	sl, r1, ip, ror r7
   148d4:	andeq	sl, r1, r8, ror #14
   148d8:	andeq	sl, r1, r0, lsr r7
   148dc:	andeq	sl, r1, ip, lsl r7
   148e0:	andeq	sl, r1, r4, ror #13
   148e4:	ldrdeq	sl, [r1], -r0
   148e8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   148ec:	andeq	sl, r1, r0, lsl #13
   148f0:	andeq	sl, r1, ip, ror #12
   148f4:	andeq	r8, r0, r8, lsl r6
   148f8:	andeq	r0, r0, r3, ror r1
   148fc:	andeq	r8, r0, ip, rrx
   14900:	andeq	r8, r0, r0, ror r2
   14904:	andeq	sl, r1, r4, lsr r6
   14908:	andeq	sl, r1, r0, lsr #12
   1490c:	andeq	r8, r0, ip, asr #11
   14910:	andeq	r8, r0, r0, lsr #32
   14914:	andeq	r8, r0, r8, ror #3
   14918:	andeq	sl, r1, r4, ror #11
   1491c:	ldrdeq	sl, [r1], -r0
   14920:	andeq	r8, r0, ip, ror r5
   14924:	andeq	r0, r0, r5, ror r1
   14928:	ldrdeq	r7, [r0], -r0
   1492c:	strdeq	r8, [r0], -r0
   14930:	muleq	r1, r0, r5
   14934:	andeq	sl, r1, ip, ror r5
   14938:	andeq	r8, r0, r8, lsr #10
   1493c:	andeq	r0, r0, r6, ror r1
   14940:	andeq	r7, r0, ip, ror pc
   14944:			; <UNDEFINED> instruction: 0x000081b4
   14948:	andeq	sl, r1, ip, lsr r5
   1494c:	andeq	sl, r1, r8, lsr #10
   14950:	ldrdeq	r8, [r0], -r4
   14954:	andeq	r0, r0, r7, ror r1
   14958:	andeq	r7, r0, r8, lsr #30
   1495c:	andeq	r8, r0, ip, ror r1
   14960:	strdeq	sl, [r1], -ip
   14964:	andeq	sl, r1, r8, ror #9

00014968 <body_with_one_return@@Base>:
   14968:	push	{r4, r5, fp, lr}
   1496c:	add	fp, sp, #12
   14970:	sub	sp, sp, #24
   14974:	ldr	r4, [pc, #900]	; 14d00 <body_with_one_return@@Base+0x398>
   14978:	add	r4, pc, r4
   1497c:	ldr	r3, [pc, #896]	; 14d04 <body_with_one_return@@Base+0x39c>
   14980:	add	r3, pc, r3
   14984:	ldrd	r2, [r3]
   14988:	adds	r2, r2, #1
   1498c:	adc	r3, r3, #0
   14990:	ldr	r1, [pc, #880]	; 14d08 <body_with_one_return@@Base+0x3a0>
   14994:	add	r1, pc, r1
   14998:	strd	r2, [r1]
   1499c:	mov	r3, #0
   149a0:	str	r3, [fp, #-16]
   149a4:	sub	r2, fp, #32
   149a8:	sub	r3, fp, #36	; 0x24
   149ac:	mov	r1, r2
   149b0:	mov	r0, r3
   149b4:	bl	18930 <init_grammar@@Base>
   149b8:	ldr	r3, [pc, #844]	; 14d0c <body_with_one_return@@Base+0x3a4>
   149bc:	add	r3, pc, r3
   149c0:	ldrd	r2, [r3, #8]
   149c4:	adds	r2, r2, #1
   149c8:	adc	r3, r3, #0
   149cc:	ldr	r1, [pc, #828]	; 14d10 <body_with_one_return@@Base+0x3a8>
   149d0:	add	r1, pc, r1
   149d4:	strd	r2, [r1, #8]
   149d8:	mov	r0, #20
   149dc:	bl	118d0 <malloc@plt>
   149e0:	mov	r3, r0
   149e4:	str	r3, [fp, #-20]	; 0xffffffec
   149e8:	mov	r0, #4
   149ec:	bl	118d0 <malloc@plt>
   149f0:	mov	r3, r0
   149f4:	mov	r2, r3
   149f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   149fc:	str	r2, [r3]
   14a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a04:	ldr	r3, [r3]
   14a08:	mov	r0, r3
   14a0c:	bl	17090 <init_token_obra@@Base>
   14a10:	ldr	r3, [pc, #764]	; 14d14 <body_with_one_return@@Base+0x3ac>
   14a14:	add	r3, pc, r3
   14a18:	ldrd	r2, [r3, #16]
   14a1c:	adds	r2, r2, #1
   14a20:	adc	r3, r3, #0
   14a24:	ldr	r1, [pc, #748]	; 14d18 <body_with_one_return@@Base+0x3b0>
   14a28:	add	r1, pc, r1
   14a2c:	strd	r2, [r1, #16]
   14a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a34:	add	r5, r3, #4
   14a38:	mov	r0, #4
   14a3c:	bl	118d0 <malloc@plt>
   14a40:	mov	r3, r0
   14a44:	str	r3, [r5]
   14a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a4c:	add	r3, r3, #4
   14a50:	ldr	r3, [r3]
   14a54:	mov	r0, r3
   14a58:	bl	17138 <init_token_return@@Base>
   14a5c:	ldr	r3, [pc, #696]	; 14d1c <body_with_one_return@@Base+0x3b4>
   14a60:	add	r3, pc, r3
   14a64:	ldrd	r2, [r3, #24]
   14a68:	adds	r2, r2, #1
   14a6c:	adc	r3, r3, #0
   14a70:	ldr	r1, [pc, #680]	; 14d20 <body_with_one_return@@Base+0x3b8>
   14a74:	add	r1, pc, r1
   14a78:	strd	r2, [r1, #24]
   14a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a80:	add	r5, r3, #8
   14a84:	mov	r0, #8
   14a88:	bl	118d0 <malloc@plt>
   14a8c:	mov	r3, r0
   14a90:	str	r3, [r5]
   14a94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a98:	add	r3, r3, #8
   14a9c:	ldr	r3, [r3]
   14aa0:	mov	r1, #1
   14aa4:	mov	r0, r3
   14aa8:	bl	16f20 <init_token_int_value@@Base>
   14aac:	ldr	r3, [pc, #624]	; 14d24 <body_with_one_return@@Base+0x3bc>
   14ab0:	add	r3, pc, r3
   14ab4:	ldrd	r2, [r3, #32]
   14ab8:	adds	r2, r2, #1
   14abc:	adc	r3, r3, #0
   14ac0:	ldr	r1, [pc, #608]	; 14d28 <body_with_one_return@@Base+0x3c0>
   14ac4:	add	r1, pc, r1
   14ac8:	strd	r2, [r1, #32]
   14acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ad0:	add	r5, r3, #12
   14ad4:	mov	r0, #4
   14ad8:	bl	118d0 <malloc@plt>
   14adc:	mov	r3, r0
   14ae0:	str	r3, [r5]
   14ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ae8:	add	r3, r3, #12
   14aec:	ldr	r3, [r3]
   14af0:	mov	r0, r3
   14af4:	bl	1718c <init_token_semicolon@@Base>
   14af8:	ldr	r3, [pc, #556]	; 14d2c <body_with_one_return@@Base+0x3c4>
   14afc:	add	r3, pc, r3
   14b00:	ldrd	r2, [r3, #40]	; 0x28
   14b04:	adds	r2, r2, #1
   14b08:	adc	r3, r3, #0
   14b0c:	ldr	r1, [pc, #540]	; 14d30 <body_with_one_return@@Base+0x3c8>
   14b10:	add	r1, pc, r1
   14b14:	strd	r2, [r1, #40]	; 0x28
   14b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b1c:	add	r5, r3, #16
   14b20:	mov	r0, #4
   14b24:	bl	118d0 <malloc@plt>
   14b28:	mov	r3, r0
   14b2c:	str	r3, [r5]
   14b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b34:	add	r3, r3, #16
   14b38:	ldr	r3, [r3]
   14b3c:	mov	r0, r3
   14b40:	bl	170e4 <init_token_cbra@@Base>
   14b44:	ldr	r3, [pc, #488]	; 14d34 <body_with_one_return@@Base+0x3cc>
   14b48:	add	r3, pc, r3
   14b4c:	ldrd	r2, [r3, #48]	; 0x30
   14b50:	adds	r2, r2, #1
   14b54:	adc	r3, r3, #0
   14b58:	ldr	r1, [pc, #472]	; 14d38 <body_with_one_return@@Base+0x3d0>
   14b5c:	add	r1, pc, r1
   14b60:	strd	r2, [r1, #48]	; 0x30
   14b64:	ldr	r3, [pc, #464]	; 14d3c <body_with_one_return@@Base+0x3d4>
   14b68:	ldr	r3, [r4, r3]
   14b6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b70:	str	r2, [r3, #228]	; 0xe4
   14b74:	ldr	r3, [pc, #448]	; 14d3c <body_with_one_return@@Base+0x3d4>
   14b78:	ldr	r3, [r4, r3]
   14b7c:	mov	r2, #5
   14b80:	str	r2, [r3, #220]	; 0xdc
   14b84:	sub	r3, fp, #36	; 0x24
   14b88:	mov	r0, r3
   14b8c:	bl	18dec <read_body@@Base>
   14b90:	str	r0, [fp, #-16]
   14b94:	ldr	r3, [pc, #416]	; 14d3c <body_with_one_return@@Base+0x3d4>
   14b98:	ldr	r3, [r4, r3]
   14b9c:	ldr	r3, [r3, #204]	; 0xcc
   14ba0:	cmp	r3, #5
   14ba4:	beq	14be8 <body_with_one_return@@Base+0x280>
   14ba8:	ldr	r3, [pc, #400]	; 14d40 <body_with_one_return@@Base+0x3d8>
   14bac:	add	r3, pc, r3
   14bb0:	ldrd	r2, [r3, #56]	; 0x38
   14bb4:	adds	r2, r2, #1
   14bb8:	adc	r3, r3, #0
   14bbc:	ldr	r1, [pc, #384]	; 14d44 <body_with_one_return@@Base+0x3dc>
   14bc0:	add	r1, pc, r1
   14bc4:	strd	r2, [r1, #56]	; 0x38
   14bc8:	ldr	r3, [pc, #376]	; 14d48 <body_with_one_return@@Base+0x3e0>
   14bcc:	add	r3, pc, r3
   14bd0:	ldr	r2, [pc, #372]	; 14d4c <body_with_one_return@@Base+0x3e4>
   14bd4:	ldr	r1, [pc, #372]	; 14d50 <body_with_one_return@@Base+0x3e8>
   14bd8:	add	r1, pc, r1
   14bdc:	ldr	r0, [pc, #368]	; 14d54 <body_with_one_return@@Base+0x3ec>
   14be0:	add	r0, pc, r0
   14be4:	bl	119e4 <__assert_fail@plt>
   14be8:	ldr	r3, [fp, #-16]
   14bec:	cmp	r3, #0
   14bf0:	bne	14c34 <body_with_one_return@@Base+0x2cc>
   14bf4:	ldr	r3, [pc, #348]	; 14d58 <body_with_one_return@@Base+0x3f0>
   14bf8:	add	r3, pc, r3
   14bfc:	ldrd	r2, [r3, #64]	; 0x40
   14c00:	adds	r2, r2, #1
   14c04:	adc	r3, r3, #0
   14c08:	ldr	r1, [pc, #332]	; 14d5c <body_with_one_return@@Base+0x3f4>
   14c0c:	add	r1, pc, r1
   14c10:	strd	r2, [r1, #64]	; 0x40
   14c14:	ldr	r3, [pc, #324]	; 14d60 <body_with_one_return@@Base+0x3f8>
   14c18:	add	r3, pc, r3
   14c1c:	ldr	r2, [pc, #320]	; 14d64 <body_with_one_return@@Base+0x3fc>
   14c20:	ldr	r1, [pc, #320]	; 14d68 <body_with_one_return@@Base+0x400>
   14c24:	add	r1, pc, r1
   14c28:	ldr	r0, [pc, #316]	; 14d6c <body_with_one_return@@Base+0x404>
   14c2c:	add	r0, pc, r0
   14c30:	bl	119e4 <__assert_fail@plt>
   14c34:	ldr	r3, [fp, #-16]
   14c38:	ldr	r3, [r3]
   14c3c:	cmp	r3, #3
   14c40:	beq	14c84 <body_with_one_return@@Base+0x31c>
   14c44:	ldr	r3, [pc, #292]	; 14d70 <body_with_one_return@@Base+0x408>
   14c48:	add	r3, pc, r3
   14c4c:	ldrd	r2, [r3, #72]	; 0x48
   14c50:	adds	r2, r2, #1
   14c54:	adc	r3, r3, #0
   14c58:	ldr	r1, [pc, #276]	; 14d74 <body_with_one_return@@Base+0x40c>
   14c5c:	add	r1, pc, r1
   14c60:	strd	r2, [r1, #72]	; 0x48
   14c64:	ldr	r3, [pc, #268]	; 14d78 <body_with_one_return@@Base+0x410>
   14c68:	add	r3, pc, r3
   14c6c:	mov	r2, #408	; 0x198
   14c70:	ldr	r1, [pc, #260]	; 14d7c <body_with_one_return@@Base+0x414>
   14c74:	add	r1, pc, r1
   14c78:	ldr	r0, [pc, #256]	; 14d80 <body_with_one_return@@Base+0x418>
   14c7c:	add	r0, pc, r0
   14c80:	bl	119e4 <__assert_fail@plt>
   14c84:	ldr	r3, [fp, #-16]
   14c88:	ldr	r3, [r3, #4]
   14c8c:	cmp	r3, #0
   14c90:	beq	14cd4 <body_with_one_return@@Base+0x36c>
   14c94:	ldr	r3, [pc, #232]	; 14d84 <body_with_one_return@@Base+0x41c>
   14c98:	add	r3, pc, r3
   14c9c:	ldrd	r2, [r3, #88]	; 0x58
   14ca0:	adds	r2, r2, #1
   14ca4:	adc	r3, r3, #0
   14ca8:	ldr	r1, [pc, #216]	; 14d88 <body_with_one_return@@Base+0x420>
   14cac:	add	r1, pc, r1
   14cb0:	strd	r2, [r1, #88]	; 0x58
   14cb4:	ldr	r3, [pc, #208]	; 14d8c <body_with_one_return@@Base+0x424>
   14cb8:	add	r3, pc, r3
   14cbc:	ldr	r2, [pc, #204]	; 14d90 <body_with_one_return@@Base+0x428>
   14cc0:	ldr	r1, [pc, #204]	; 14d94 <body_with_one_return@@Base+0x42c>
   14cc4:	add	r1, pc, r1
   14cc8:	ldr	r0, [pc, #200]	; 14d98 <body_with_one_return@@Base+0x430>
   14ccc:	add	r0, pc, r0
   14cd0:	bl	119e4 <__assert_fail@plt>
   14cd4:	ldr	r3, [pc, #192]	; 14d9c <body_with_one_return@@Base+0x434>
   14cd8:	add	r3, pc, r3
   14cdc:	ldrd	r2, [r3, #80]	; 0x50
   14ce0:	adds	r2, r2, #1
   14ce4:	adc	r3, r3, #0
   14ce8:	ldr	r1, [pc, #176]	; 14da0 <body_with_one_return@@Base+0x438>
   14cec:	add	r1, pc, r1
   14cf0:	strd	r2, [r1, #80]	; 0x50
   14cf4:	nop			; (mov r0, r0)
   14cf8:	sub	sp, fp, #12
   14cfc:	pop	{r4, r5, fp, pc}
   14d00:	andeq	r9, r1, r0, lsl #13
   14d04:	andeq	sl, r1, r8, lsl #7
   14d08:	andeq	sl, r1, r4, ror r3
   14d0c:	andeq	sl, r1, ip, asr #6
   14d10:	andeq	sl, r1, r8, lsr r3
   14d14:	strdeq	sl, [r1], -r4
   14d18:	andeq	sl, r1, r0, ror #5
   14d1c:	andeq	sl, r1, r8, lsr #5
   14d20:	muleq	r1, r4, r2
   14d24:	andeq	sl, r1, r8, asr r2
   14d28:	andeq	sl, r1, r4, asr #4
   14d2c:	andeq	sl, r1, ip, lsl #4
   14d30:	strdeq	sl, [r1], -r8
   14d34:	andeq	sl, r1, r0, asr #3
   14d38:	andeq	sl, r1, ip, lsr #3
   14d3c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   14d40:	andeq	sl, r1, ip, asr r1
   14d44:	andeq	sl, r1, r8, asr #2
   14d48:	andeq	r8, r0, ip, ror #2
   14d4c:	muleq	r0, r6, r1
   14d50:	andeq	r7, r0, r8, lsr #23
   14d54:	andeq	r7, r0, r0, asr #24
   14d58:	andeq	sl, r1, r0, lsl r1
   14d5c:	strdeq	sl, [r1], -ip
   14d60:	andeq	r8, r0, r0, lsr #2
   14d64:	muleq	r0, r7, r1
   14d68:	andeq	r7, r0, ip, asr fp
   14d6c:	andeq	r7, r0, r4, lsr #26
   14d70:	andeq	sl, r1, r0, asr #1
   14d74:	andeq	sl, r1, ip, lsr #1
   14d78:	ldrdeq	r8, [r0], -r0
   14d7c:	andeq	r7, r0, ip, lsl #22
   14d80:	andeq	r7, r0, ip, lsr #26
   14d84:	andeq	sl, r1, r0, ror r0
   14d88:	andeq	sl, r1, ip, asr r0
   14d8c:	andeq	r8, r0, r0, lsl #1
   14d90:	muleq	r0, r9, r1
   14d94:			; <UNDEFINED> instruction: 0x00007abc
   14d98:	andeq	r7, r0, r8, lsr #26
   14d9c:	andeq	sl, r1, r0, lsr r0
   14da0:	andeq	sl, r1, ip, lsl r0

00014da4 <if_statement_inside_if_statement@@Base>:
   14da4:	push	{r4, r5, fp, lr}
   14da8:	add	fp, sp, #12
   14dac:	sub	sp, sp, #32
   14db0:	ldr	r4, [pc, #2032]	; 155a8 <if_statement_inside_if_statement@@Base+0x804>
   14db4:	add	r4, pc, r4
   14db8:	ldr	r3, [pc, #2028]	; 155ac <if_statement_inside_if_statement@@Base+0x808>
   14dbc:	add	r3, pc, r3
   14dc0:	ldrd	r2, [r3]
   14dc4:	adds	r2, r2, #1
   14dc8:	adc	r3, r3, #0
   14dcc:	ldr	r1, [pc, #2012]	; 155b0 <if_statement_inside_if_statement@@Base+0x80c>
   14dd0:	add	r1, pc, r1
   14dd4:	strd	r2, [r1]
   14dd8:	mov	r3, #0
   14ddc:	str	r3, [fp, #-16]
   14de0:	sub	r2, fp, #40	; 0x28
   14de4:	sub	r3, fp, #44	; 0x2c
   14de8:	mov	r1, r2
   14dec:	mov	r0, r3
   14df0:	bl	18930 <init_grammar@@Base>
   14df4:	ldr	r3, [pc, #1976]	; 155b4 <if_statement_inside_if_statement@@Base+0x810>
   14df8:	add	r3, pc, r3
   14dfc:	ldrd	r2, [r3, #8]
   14e00:	adds	r2, r2, #1
   14e04:	adc	r3, r3, #0
   14e08:	ldr	r1, [pc, #1960]	; 155b8 <if_statement_inside_if_statement@@Base+0x814>
   14e0c:	add	r1, pc, r1
   14e10:	strd	r2, [r1, #8]
   14e14:	mov	r0, #3
   14e18:	bl	118d0 <malloc@plt>
   14e1c:	mov	r3, r0
   14e20:	str	r3, [fp, #-20]	; 0xffffffec
   14e24:	mov	r0, #3
   14e28:	bl	118d0 <malloc@plt>
   14e2c:	mov	r3, r0
   14e30:	str	r3, [fp, #-24]	; 0xffffffe8
   14e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e38:	mov	r2, #33	; 0x21
   14e3c:	strb	r2, [r3]
   14e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e44:	add	r3, r3, #1
   14e48:	mov	r2, #61	; 0x3d
   14e4c:	strb	r2, [r3]
   14e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e54:	add	r3, r3, #2
   14e58:	mov	r2, #0
   14e5c:	strb	r2, [r3]
   14e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e64:	mov	r2, #33	; 0x21
   14e68:	strb	r2, [r3]
   14e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e70:	add	r3, r3, #1
   14e74:	mov	r2, #61	; 0x3d
   14e78:	strb	r2, [r3]
   14e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e80:	add	r3, r3, #2
   14e84:	mov	r2, #0
   14e88:	strb	r2, [r3]
   14e8c:	mov	r0, #76	; 0x4c
   14e90:	bl	118d0 <malloc@plt>
   14e94:	mov	r3, r0
   14e98:	str	r3, [fp, #-28]	; 0xffffffe4
   14e9c:	mov	r0, #4
   14ea0:	bl	118d0 <malloc@plt>
   14ea4:	mov	r3, r0
   14ea8:	mov	r2, r3
   14eac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14eb0:	str	r2, [r3]
   14eb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14eb8:	ldr	r3, [r3]
   14ebc:	mov	r0, r3
   14ec0:	bl	16fe8 <init_token_opar@@Base>
   14ec4:	ldr	r3, [pc, #1776]	; 155bc <if_statement_inside_if_statement@@Base+0x818>
   14ec8:	add	r3, pc, r3
   14ecc:	ldrd	r2, [r3, #16]
   14ed0:	adds	r2, r2, #1
   14ed4:	adc	r3, r3, #0
   14ed8:	ldr	r1, [pc, #1760]	; 155c0 <if_statement_inside_if_statement@@Base+0x81c>
   14edc:	add	r1, pc, r1
   14ee0:	strd	r2, [r1, #16]
   14ee4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ee8:	add	r5, r3, #4
   14eec:	mov	r0, #8
   14ef0:	bl	118d0 <malloc@plt>
   14ef4:	mov	r3, r0
   14ef8:	str	r3, [r5]
   14efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f00:	add	r3, r3, #4
   14f04:	ldr	r3, [r3]
   14f08:	mov	r1, #1
   14f0c:	mov	r0, r3
   14f10:	bl	16f20 <init_token_int_value@@Base>
   14f14:	ldr	r3, [pc, #1704]	; 155c4 <if_statement_inside_if_statement@@Base+0x820>
   14f18:	add	r3, pc, r3
   14f1c:	ldrd	r2, [r3, #24]
   14f20:	adds	r2, r2, #1
   14f24:	adc	r3, r3, #0
   14f28:	ldr	r1, [pc, #1688]	; 155c8 <if_statement_inside_if_statement@@Base+0x824>
   14f2c:	add	r1, pc, r1
   14f30:	strd	r2, [r1, #24]
   14f34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f38:	add	r5, r3, #8
   14f3c:	mov	r0, #8
   14f40:	bl	118d0 <malloc@plt>
   14f44:	mov	r3, r0
   14f48:	str	r3, [r5]
   14f4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f50:	add	r3, r3, #8
   14f54:	ldr	r3, [r3]
   14f58:	mov	r1, #1
   14f5c:	mov	r0, r3
   14f60:	bl	16f20 <init_token_int_value@@Base>
   14f64:	ldr	r3, [pc, #1632]	; 155cc <if_statement_inside_if_statement@@Base+0x828>
   14f68:	add	r3, pc, r3
   14f6c:	ldrd	r2, [r3, #32]
   14f70:	adds	r2, r2, #1
   14f74:	adc	r3, r3, #0
   14f78:	ldr	r1, [pc, #1616]	; 155d0 <if_statement_inside_if_statement@@Base+0x82c>
   14f7c:	add	r1, pc, r1
   14f80:	strd	r2, [r1, #32]
   14f84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f88:	add	r5, r3, #12
   14f8c:	mov	r0, #8
   14f90:	bl	118d0 <malloc@plt>
   14f94:	mov	r3, r0
   14f98:	str	r3, [r5]
   14f9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fa0:	add	r3, r3, #12
   14fa4:	ldr	r3, [r3]
   14fa8:	ldr	r1, [fp, #-20]	; 0xffffffec
   14fac:	mov	r0, r3
   14fb0:	bl	172dc <init_token_boolean_op@@Base>
   14fb4:	ldr	r3, [pc, #1560]	; 155d4 <if_statement_inside_if_statement@@Base+0x830>
   14fb8:	add	r3, pc, r3
   14fbc:	ldrd	r2, [r3, #40]	; 0x28
   14fc0:	adds	r2, r2, #1
   14fc4:	adc	r3, r3, #0
   14fc8:	ldr	r1, [pc, #1544]	; 155d8 <if_statement_inside_if_statement@@Base+0x834>
   14fcc:	add	r1, pc, r1
   14fd0:	strd	r2, [r1, #40]	; 0x28
   14fd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fd8:	add	r5, r3, #16
   14fdc:	mov	r0, #8
   14fe0:	bl	118d0 <malloc@plt>
   14fe4:	mov	r3, r0
   14fe8:	str	r3, [r5]
   14fec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ff0:	add	r3, r3, #16
   14ff4:	ldr	r3, [r3]
   14ff8:	mov	r1, #1
   14ffc:	mov	r0, r3
   15000:	bl	16f20 <init_token_int_value@@Base>
   15004:	ldr	r3, [pc, #1488]	; 155dc <if_statement_inside_if_statement@@Base+0x838>
   15008:	add	r3, pc, r3
   1500c:	ldrd	r2, [r3, #48]	; 0x30
   15010:	adds	r2, r2, #1
   15014:	adc	r3, r3, #0
   15018:	ldr	r1, [pc, #1472]	; 155e0 <if_statement_inside_if_statement@@Base+0x83c>
   1501c:	add	r1, pc, r1
   15020:	strd	r2, [r1, #48]	; 0x30
   15024:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15028:	add	r5, r3, #20
   1502c:	mov	r0, #4
   15030:	bl	118d0 <malloc@plt>
   15034:	mov	r3, r0
   15038:	str	r3, [r5]
   1503c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15040:	add	r3, r3, #20
   15044:	ldr	r3, [r3]
   15048:	mov	r0, r3
   1504c:	bl	1703c <init_token_cpar@@Base>
   15050:	ldr	r3, [pc, #1420]	; 155e4 <if_statement_inside_if_statement@@Base+0x840>
   15054:	add	r3, pc, r3
   15058:	ldrd	r2, [r3, #56]	; 0x38
   1505c:	adds	r2, r2, #1
   15060:	adc	r3, r3, #0
   15064:	ldr	r1, [pc, #1404]	; 155e8 <if_statement_inside_if_statement@@Base+0x844>
   15068:	add	r1, pc, r1
   1506c:	strd	r2, [r1, #56]	; 0x38
   15070:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15074:	add	r5, r3, #24
   15078:	mov	r0, #4
   1507c:	bl	118d0 <malloc@plt>
   15080:	mov	r3, r0
   15084:	str	r3, [r5]
   15088:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1508c:	add	r3, r3, #24
   15090:	ldr	r3, [r3]
   15094:	mov	r0, r3
   15098:	bl	17090 <init_token_obra@@Base>
   1509c:	ldr	r3, [pc, #1352]	; 155ec <if_statement_inside_if_statement@@Base+0x848>
   150a0:	add	r3, pc, r3
   150a4:	ldrd	r2, [r3, #64]	; 0x40
   150a8:	adds	r2, r2, #1
   150ac:	adc	r3, r3, #0
   150b0:	ldr	r1, [pc, #1336]	; 155f0 <if_statement_inside_if_statement@@Base+0x84c>
   150b4:	add	r1, pc, r1
   150b8:	strd	r2, [r1, #64]	; 0x40
   150bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150c0:	add	r5, r3, #28
   150c4:	mov	r0, #4
   150c8:	bl	118d0 <malloc@plt>
   150cc:	mov	r3, r0
   150d0:	str	r3, [r5]
   150d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150d8:	add	r3, r3, #28
   150dc:	ldr	r3, [r3]
   150e0:	mov	r0, r3
   150e4:	bl	17234 <init_token_if@@Base>
   150e8:	ldr	r3, [pc, #1284]	; 155f4 <if_statement_inside_if_statement@@Base+0x850>
   150ec:	add	r3, pc, r3
   150f0:	ldrd	r2, [r3, #72]	; 0x48
   150f4:	adds	r2, r2, #1
   150f8:	adc	r3, r3, #0
   150fc:	ldr	r1, [pc, #1268]	; 155f8 <if_statement_inside_if_statement@@Base+0x854>
   15100:	add	r1, pc, r1
   15104:	strd	r2, [r1, #72]	; 0x48
   15108:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1510c:	add	r5, r3, #32
   15110:	mov	r0, #4
   15114:	bl	118d0 <malloc@plt>
   15118:	mov	r3, r0
   1511c:	str	r3, [r5]
   15120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15124:	add	r3, r3, #32
   15128:	ldr	r3, [r3]
   1512c:	mov	r0, r3
   15130:	bl	16fe8 <init_token_opar@@Base>
   15134:	ldr	r3, [pc, #1216]	; 155fc <if_statement_inside_if_statement@@Base+0x858>
   15138:	add	r3, pc, r3
   1513c:	ldrd	r2, [r3, #80]	; 0x50
   15140:	adds	r2, r2, #1
   15144:	adc	r3, r3, #0
   15148:	ldr	r1, [pc, #1200]	; 15600 <if_statement_inside_if_statement@@Base+0x85c>
   1514c:	add	r1, pc, r1
   15150:	strd	r2, [r1, #80]	; 0x50
   15154:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15158:	add	r5, r3, #36	; 0x24
   1515c:	mov	r0, #8
   15160:	bl	118d0 <malloc@plt>
   15164:	mov	r3, r0
   15168:	str	r3, [r5]
   1516c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15170:	add	r3, r3, #36	; 0x24
   15174:	ldr	r3, [r3]
   15178:	mov	r1, #1
   1517c:	mov	r0, r3
   15180:	bl	16f20 <init_token_int_value@@Base>
   15184:	ldr	r3, [pc, #1144]	; 15604 <if_statement_inside_if_statement@@Base+0x860>
   15188:	add	r3, pc, r3
   1518c:	ldrd	r2, [r3, #88]	; 0x58
   15190:	adds	r2, r2, #1
   15194:	adc	r3, r3, #0
   15198:	ldr	r1, [pc, #1128]	; 15608 <if_statement_inside_if_statement@@Base+0x864>
   1519c:	add	r1, pc, r1
   151a0:	strd	r2, [r1, #88]	; 0x58
   151a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151a8:	add	r5, r3, #40	; 0x28
   151ac:	mov	r0, #8
   151b0:	bl	118d0 <malloc@plt>
   151b4:	mov	r3, r0
   151b8:	str	r3, [r5]
   151bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151c0:	add	r3, r3, #40	; 0x28
   151c4:	ldr	r3, [r3]
   151c8:	mov	r1, #1
   151cc:	mov	r0, r3
   151d0:	bl	16f20 <init_token_int_value@@Base>
   151d4:	ldr	r3, [pc, #1072]	; 1560c <if_statement_inside_if_statement@@Base+0x868>
   151d8:	add	r3, pc, r3
   151dc:	ldrd	r2, [r3, #96]	; 0x60
   151e0:	adds	r2, r2, #1
   151e4:	adc	r3, r3, #0
   151e8:	ldr	r1, [pc, #1056]	; 15610 <if_statement_inside_if_statement@@Base+0x86c>
   151ec:	add	r1, pc, r1
   151f0:	strd	r2, [r1, #96]	; 0x60
   151f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151f8:	add	r5, r3, #44	; 0x2c
   151fc:	mov	r0, #8
   15200:	bl	118d0 <malloc@plt>
   15204:	mov	r3, r0
   15208:	str	r3, [r5]
   1520c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15210:	add	r3, r3, #44	; 0x2c
   15214:	ldr	r3, [r3]
   15218:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1521c:	mov	r0, r3
   15220:	bl	172dc <init_token_boolean_op@@Base>
   15224:	ldr	r3, [pc, #1000]	; 15614 <if_statement_inside_if_statement@@Base+0x870>
   15228:	add	r3, pc, r3
   1522c:	ldrd	r2, [r3, #104]	; 0x68
   15230:	adds	r2, r2, #1
   15234:	adc	r3, r3, #0
   15238:	ldr	r1, [pc, #984]	; 15618 <if_statement_inside_if_statement@@Base+0x874>
   1523c:	add	r1, pc, r1
   15240:	strd	r2, [r1, #104]	; 0x68
   15244:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15248:	add	r5, r3, #48	; 0x30
   1524c:	mov	r0, #8
   15250:	bl	118d0 <malloc@plt>
   15254:	mov	r3, r0
   15258:	str	r3, [r5]
   1525c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15260:	add	r3, r3, #48	; 0x30
   15264:	ldr	r3, [r3]
   15268:	mov	r1, #1
   1526c:	mov	r0, r3
   15270:	bl	16f20 <init_token_int_value@@Base>
   15274:	ldr	r3, [pc, #928]	; 1561c <if_statement_inside_if_statement@@Base+0x878>
   15278:	add	r3, pc, r3
   1527c:	ldrd	r2, [r3, #112]	; 0x70
   15280:	adds	r2, r2, #1
   15284:	adc	r3, r3, #0
   15288:	ldr	r1, [pc, #912]	; 15620 <if_statement_inside_if_statement@@Base+0x87c>
   1528c:	add	r1, pc, r1
   15290:	strd	r2, [r1, #112]	; 0x70
   15294:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15298:	add	r5, r3, #52	; 0x34
   1529c:	mov	r0, #4
   152a0:	bl	118d0 <malloc@plt>
   152a4:	mov	r3, r0
   152a8:	str	r3, [r5]
   152ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152b0:	add	r3, r3, #52	; 0x34
   152b4:	ldr	r3, [r3]
   152b8:	mov	r0, r3
   152bc:	bl	1703c <init_token_cpar@@Base>
   152c0:	ldr	r3, [pc, #860]	; 15624 <if_statement_inside_if_statement@@Base+0x880>
   152c4:	add	r3, pc, r3
   152c8:	ldrd	r2, [r3, #120]	; 0x78
   152cc:	adds	r2, r2, #1
   152d0:	adc	r3, r3, #0
   152d4:	ldr	r1, [pc, #844]	; 15628 <if_statement_inside_if_statement@@Base+0x884>
   152d8:	add	r1, pc, r1
   152dc:	strd	r2, [r1, #120]	; 0x78
   152e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152e4:	add	r5, r3, #56	; 0x38
   152e8:	mov	r0, #4
   152ec:	bl	118d0 <malloc@plt>
   152f0:	mov	r3, r0
   152f4:	str	r3, [r5]
   152f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152fc:	add	r3, r3, #56	; 0x38
   15300:	ldr	r3, [r3]
   15304:	mov	r0, r3
   15308:	bl	17090 <init_token_obra@@Base>
   1530c:	ldr	r3, [pc, #792]	; 1562c <if_statement_inside_if_statement@@Base+0x888>
   15310:	add	r3, pc, r3
   15314:	ldrd	r2, [r3, #128]	; 0x80
   15318:	adds	r2, r2, #1
   1531c:	adc	r3, r3, #0
   15320:	ldr	r1, [pc, #776]	; 15630 <if_statement_inside_if_statement@@Base+0x88c>
   15324:	add	r1, pc, r1
   15328:	strd	r2, [r1, #128]	; 0x80
   1532c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15330:	add	r5, r3, #60	; 0x3c
   15334:	mov	r0, #4
   15338:	bl	118d0 <malloc@plt>
   1533c:	mov	r3, r0
   15340:	str	r3, [r5]
   15344:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15348:	add	r3, r3, #60	; 0x3c
   1534c:	ldr	r3, [r3]
   15350:	mov	r0, r3
   15354:	bl	170e4 <init_token_cbra@@Base>
   15358:	ldr	r3, [pc, #724]	; 15634 <if_statement_inside_if_statement@@Base+0x890>
   1535c:	add	r3, pc, r3
   15360:	ldrd	r2, [r3, #136]	; 0x88
   15364:	adds	r2, r2, #1
   15368:	adc	r3, r3, #0
   1536c:	ldr	r1, [pc, #708]	; 15638 <if_statement_inside_if_statement@@Base+0x894>
   15370:	add	r1, pc, r1
   15374:	strd	r2, [r1, #136]	; 0x88
   15378:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1537c:	add	r5, r3, #64	; 0x40
   15380:	mov	r0, #4
   15384:	bl	118d0 <malloc@plt>
   15388:	mov	r3, r0
   1538c:	str	r3, [r5]
   15390:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15394:	add	r3, r3, #64	; 0x40
   15398:	ldr	r3, [r3]
   1539c:	mov	r0, r3
   153a0:	bl	170e4 <init_token_cbra@@Base>
   153a4:	ldr	r3, [pc, #656]	; 1563c <if_statement_inside_if_statement@@Base+0x898>
   153a8:	add	r3, pc, r3
   153ac:	ldrd	r2, [r3, #144]	; 0x90
   153b0:	adds	r2, r2, #1
   153b4:	adc	r3, r3, #0
   153b8:	ldr	r1, [pc, #640]	; 15640 <if_statement_inside_if_statement@@Base+0x89c>
   153bc:	add	r1, pc, r1
   153c0:	strd	r2, [r1, #144]	; 0x90
   153c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153c8:	add	r5, r3, #68	; 0x44
   153cc:	mov	r0, #4
   153d0:	bl	118d0 <malloc@plt>
   153d4:	mov	r3, r0
   153d8:	str	r3, [r5]
   153dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153e0:	add	r3, r3, #68	; 0x44
   153e4:	ldr	r3, [r3]
   153e8:	mov	r0, r3
   153ec:	bl	170e4 <init_token_cbra@@Base>
   153f0:	ldr	r3, [pc, #588]	; 15644 <if_statement_inside_if_statement@@Base+0x8a0>
   153f4:	add	r3, pc, r3
   153f8:	ldrd	r2, [r3, #152]	; 0x98
   153fc:	adds	r2, r2, #1
   15400:	adc	r3, r3, #0
   15404:	ldr	r1, [pc, #572]	; 15648 <if_statement_inside_if_statement@@Base+0x8a4>
   15408:	add	r1, pc, r1
   1540c:	strd	r2, [r1, #152]	; 0x98
   15410:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15414:	add	r5, r3, #72	; 0x48
   15418:	mov	r0, #4
   1541c:	bl	118d0 <malloc@plt>
   15420:	mov	r3, r0
   15424:	str	r3, [r5]
   15428:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1542c:	add	r3, r3, #72	; 0x48
   15430:	ldr	r3, [r3]
   15434:	mov	r0, r3
   15438:	bl	171e0 <init_token_eof@@Base>
   1543c:	ldr	r3, [pc, #520]	; 1564c <if_statement_inside_if_statement@@Base+0x8a8>
   15440:	add	r3, pc, r3
   15444:	ldrd	r2, [r3, #160]	; 0xa0
   15448:	adds	r2, r2, #1
   1544c:	adc	r3, r3, #0
   15450:	ldr	r1, [pc, #504]	; 15650 <if_statement_inside_if_statement@@Base+0x8ac>
   15454:	add	r1, pc, r1
   15458:	strd	r2, [r1, #160]	; 0xa0
   1545c:	ldr	r3, [pc, #496]	; 15654 <if_statement_inside_if_statement@@Base+0x8b0>
   15460:	ldr	r3, [r4, r3]
   15464:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15468:	str	r2, [r3, #228]	; 0xe4
   1546c:	ldr	r3, [pc, #480]	; 15654 <if_statement_inside_if_statement@@Base+0x8b0>
   15470:	ldr	r3, [r4, r3]
   15474:	mov	r2, #19
   15478:	str	r2, [r3, #220]	; 0xdc
   1547c:	sub	r3, fp, #44	; 0x2c
   15480:	mov	r0, r3
   15484:	bl	19428 <read_if_statement@@Base>
   15488:	str	r0, [fp, #-16]
   1548c:	ldr	r3, [pc, #448]	; 15654 <if_statement_inside_if_statement@@Base+0x8b0>
   15490:	ldr	r3, [r4, r3]
   15494:	ldr	r3, [r3, #204]	; 0xcc
   15498:	cmp	r3, #19
   1549c:	beq	154e0 <if_statement_inside_if_statement@@Base+0x73c>
   154a0:	ldr	r3, [pc, #432]	; 15658 <if_statement_inside_if_statement@@Base+0x8b4>
   154a4:	add	r3, pc, r3
   154a8:	ldrd	r2, [r3, #168]	; 0xa8
   154ac:	adds	r2, r2, #1
   154b0:	adc	r3, r3, #0
   154b4:	ldr	r1, [pc, #416]	; 1565c <if_statement_inside_if_statement@@Base+0x8b8>
   154b8:	add	r1, pc, r1
   154bc:	strd	r2, [r1, #168]	; 0xa8
   154c0:	ldr	r3, [pc, #408]	; 15660 <if_statement_inside_if_statement@@Base+0x8bc>
   154c4:	add	r3, pc, r3
   154c8:	mov	r2, #480	; 0x1e0
   154cc:	ldr	r1, [pc, #400]	; 15664 <if_statement_inside_if_statement@@Base+0x8c0>
   154d0:	add	r1, pc, r1
   154d4:	ldr	r0, [pc, #396]	; 15668 <if_statement_inside_if_statement@@Base+0x8c4>
   154d8:	add	r0, pc, r0
   154dc:	bl	119e4 <__assert_fail@plt>
   154e0:	ldr	r3, [fp, #-16]
   154e4:	cmp	r3, #0
   154e8:	bne	1552c <if_statement_inside_if_statement@@Base+0x788>
   154ec:	ldr	r3, [pc, #376]	; 1566c <if_statement_inside_if_statement@@Base+0x8c8>
   154f0:	add	r3, pc, r3
   154f4:	ldrd	r2, [r3, #176]	; 0xb0
   154f8:	adds	r2, r2, #1
   154fc:	adc	r3, r3, #0
   15500:	ldr	r1, [pc, #360]	; 15670 <if_statement_inside_if_statement@@Base+0x8cc>
   15504:	add	r1, pc, r1
   15508:	strd	r2, [r1, #176]	; 0xb0
   1550c:	ldr	r3, [pc, #352]	; 15674 <if_statement_inside_if_statement@@Base+0x8d0>
   15510:	add	r3, pc, r3
   15514:	ldr	r2, [pc, #348]	; 15678 <if_statement_inside_if_statement@@Base+0x8d4>
   15518:	ldr	r1, [pc, #348]	; 1567c <if_statement_inside_if_statement@@Base+0x8d8>
   1551c:	add	r1, pc, r1
   15520:	ldr	r0, [pc, #344]	; 15680 <if_statement_inside_if_statement@@Base+0x8dc>
   15524:	add	r0, pc, r0
   15528:	bl	119e4 <__assert_fail@plt>
   1552c:	ldr	r3, [fp, #-16]
   15530:	ldr	r3, [r3]
   15534:	cmp	r3, #4
   15538:	beq	1557c <if_statement_inside_if_statement@@Base+0x7d8>
   1553c:	ldr	r3, [pc, #320]	; 15684 <if_statement_inside_if_statement@@Base+0x8e0>
   15540:	add	r3, pc, r3
   15544:	ldrd	r2, [r3, #192]	; 0xc0
   15548:	adds	r2, r2, #1
   1554c:	adc	r3, r3, #0
   15550:	ldr	r1, [pc, #304]	; 15688 <if_statement_inside_if_statement@@Base+0x8e4>
   15554:	add	r1, pc, r1
   15558:	strd	r2, [r1, #192]	; 0xc0
   1555c:	ldr	r3, [pc, #296]	; 1568c <if_statement_inside_if_statement@@Base+0x8e8>
   15560:	add	r3, pc, r3
   15564:	ldr	r2, [pc, #292]	; 15690 <if_statement_inside_if_statement@@Base+0x8ec>
   15568:	ldr	r1, [pc, #292]	; 15694 <if_statement_inside_if_statement@@Base+0x8f0>
   1556c:	add	r1, pc, r1
   15570:	ldr	r0, [pc, #288]	; 15698 <if_statement_inside_if_statement@@Base+0x8f4>
   15574:	add	r0, pc, r0
   15578:	bl	119e4 <__assert_fail@plt>
   1557c:	ldr	r3, [pc, #280]	; 1569c <if_statement_inside_if_statement@@Base+0x8f8>
   15580:	add	r3, pc, r3
   15584:	ldrd	r2, [r3, #184]	; 0xb8
   15588:	adds	r2, r2, #1
   1558c:	adc	r3, r3, #0
   15590:	ldr	r1, [pc, #264]	; 156a0 <if_statement_inside_if_statement@@Base+0x8fc>
   15594:	add	r1, pc, r1
   15598:	strd	r2, [r1, #184]	; 0xb8
   1559c:	nop			; (mov r0, r0)
   155a0:	sub	sp, fp, #12
   155a4:	pop	{r4, r5, fp, pc}
   155a8:	andeq	r9, r1, r4, asr #4
   155ac:	andeq	r9, r1, r4, lsl #29
   155b0:	andeq	r9, r1, r0, ror lr
   155b4:	andeq	r9, r1, r8, asr #28
   155b8:	andeq	r9, r1, r4, lsr lr
   155bc:	andeq	r9, r1, r8, ror sp
   155c0:	andeq	r9, r1, r4, ror #26
   155c4:	andeq	r9, r1, r8, lsr #26
   155c8:	andeq	r9, r1, r4, lsl sp
   155cc:	ldrdeq	r9, [r1], -r8
   155d0:	andeq	r9, r1, r4, asr #25
   155d4:	andeq	r9, r1, r8, lsl #25
   155d8:	andeq	r9, r1, r4, ror ip
   155dc:	andeq	r9, r1, r8, lsr ip
   155e0:	andeq	r9, r1, r4, lsr #24
   155e4:	andeq	r9, r1, ip, ror #23
   155e8:	ldrdeq	r9, [r1], -r8
   155ec:	andeq	r9, r1, r0, lsr #23
   155f0:	andeq	r9, r1, ip, lsl #23
   155f4:	andeq	r9, r1, r4, asr fp
   155f8:	andeq	r9, r1, r0, asr #22
   155fc:	andeq	r9, r1, r8, lsl #22
   15600:	strdeq	r9, [r1], -r4
   15604:			; <UNDEFINED> instruction: 0x00019ab8
   15608:	andeq	r9, r1, r4, lsr #21
   1560c:	andeq	r9, r1, r8, ror #20
   15610:	andeq	r9, r1, r4, asr sl
   15614:	andeq	r9, r1, r8, lsl sl
   15618:	andeq	r9, r1, r4, lsl #20
   1561c:	andeq	r9, r1, r8, asr #19
   15620:			; <UNDEFINED> instruction: 0x000199b4
   15624:	andeq	r9, r1, ip, ror r9
   15628:	andeq	r9, r1, r8, ror #18
   1562c:	andeq	r9, r1, r0, lsr r9
   15630:	andeq	r9, r1, ip, lsl r9
   15634:	andeq	r9, r1, r4, ror #17
   15638:	ldrdeq	r9, [r1], -r0
   1563c:	muleq	r1, r8, r8
   15640:	andeq	r9, r1, r4, lsl #17
   15644:	andeq	r9, r1, ip, asr #16
   15648:	andeq	r9, r1, r8, lsr r8
   1564c:	andeq	r9, r1, r0, lsl #16
   15650:	andeq	r9, r1, ip, ror #15
   15654:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15658:	muleq	r1, ip, r7
   1565c:	andeq	r9, r1, r8, lsl #15
   15660:	andeq	r7, r0, ip, lsl #17
   15664:			; <UNDEFINED> instruction: 0x000072b0
   15668:	andeq	r7, r0, r0, lsr r5
   1566c:	andeq	r9, r1, r0, asr r7
   15670:	andeq	r9, r1, ip, lsr r7
   15674:	andeq	r7, r0, r0, asr #16
   15678:	andeq	r0, r0, r1, ror #3
   1567c:	andeq	r7, r0, r4, ror #4
   15680:	andeq	r7, r0, ip, lsr #8
   15684:	andeq	r9, r1, r0, lsl #14
   15688:	andeq	r9, r1, ip, ror #13
   1568c:	strdeq	r7, [r0], -r0
   15690:	andeq	r0, r0, r2, ror #3
   15694:	andeq	r7, r0, r4, lsl r2
   15698:	andeq	r7, r0, r8, ror #7
   1569c:	andeq	r9, r1, r0, asr #13
   156a0:	andeq	r9, r1, ip, lsr #13

000156a4 <if_statement_inside_else_statement@@Base>:
   156a4:	push	{r4, r5, fp, lr}
   156a8:	add	fp, sp, #12
   156ac:	sub	sp, sp, #32
   156b0:	ldr	r4, [pc, #2184]	; 15f40 <if_statement_inside_else_statement@@Base+0x89c>
   156b4:	add	r4, pc, r4
   156b8:	ldr	r3, [pc, #2180]	; 15f44 <if_statement_inside_else_statement@@Base+0x8a0>
   156bc:	add	r3, pc, r3
   156c0:	ldrd	r2, [r3]
   156c4:	adds	r2, r2, #1
   156c8:	adc	r3, r3, #0
   156cc:	ldr	r1, [pc, #2164]	; 15f48 <if_statement_inside_else_statement@@Base+0x8a4>
   156d0:	add	r1, pc, r1
   156d4:	strd	r2, [r1]
   156d8:	mov	r3, #0
   156dc:	str	r3, [fp, #-16]
   156e0:	sub	r2, fp, #40	; 0x28
   156e4:	sub	r3, fp, #44	; 0x2c
   156e8:	mov	r1, r2
   156ec:	mov	r0, r3
   156f0:	bl	18930 <init_grammar@@Base>
   156f4:	ldr	r3, [pc, #2128]	; 15f4c <if_statement_inside_else_statement@@Base+0x8a8>
   156f8:	add	r3, pc, r3
   156fc:	ldrd	r2, [r3, #8]
   15700:	adds	r2, r2, #1
   15704:	adc	r3, r3, #0
   15708:	ldr	r1, [pc, #2112]	; 15f50 <if_statement_inside_else_statement@@Base+0x8ac>
   1570c:	add	r1, pc, r1
   15710:	strd	r2, [r1, #8]
   15714:	mov	r0, #3
   15718:	bl	118d0 <malloc@plt>
   1571c:	mov	r3, r0
   15720:	str	r3, [fp, #-20]	; 0xffffffec
   15724:	mov	r0, #3
   15728:	bl	118d0 <malloc@plt>
   1572c:	mov	r3, r0
   15730:	str	r3, [fp, #-24]	; 0xffffffe8
   15734:	ldr	r3, [fp, #-20]	; 0xffffffec
   15738:	mov	r2, #33	; 0x21
   1573c:	strb	r2, [r3]
   15740:	ldr	r3, [fp, #-20]	; 0xffffffec
   15744:	add	r3, r3, #1
   15748:	mov	r2, #61	; 0x3d
   1574c:	strb	r2, [r3]
   15750:	ldr	r3, [fp, #-20]	; 0xffffffec
   15754:	add	r3, r3, #2
   15758:	mov	r2, #0
   1575c:	strb	r2, [r3]
   15760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15764:	mov	r2, #33	; 0x21
   15768:	strb	r2, [r3]
   1576c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15770:	add	r3, r3, #1
   15774:	mov	r2, #61	; 0x3d
   15778:	strb	r2, [r3]
   1577c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15780:	add	r3, r3, #2
   15784:	mov	r2, #0
   15788:	strb	r2, [r3]
   1578c:	mov	r0, #84	; 0x54
   15790:	bl	118d0 <malloc@plt>
   15794:	mov	r3, r0
   15798:	str	r3, [fp, #-28]	; 0xffffffe4
   1579c:	mov	r0, #4
   157a0:	bl	118d0 <malloc@plt>
   157a4:	mov	r3, r0
   157a8:	mov	r2, r3
   157ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157b0:	str	r2, [r3]
   157b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157b8:	ldr	r3, [r3]
   157bc:	mov	r0, r3
   157c0:	bl	16fe8 <init_token_opar@@Base>
   157c4:	ldr	r3, [pc, #1928]	; 15f54 <if_statement_inside_else_statement@@Base+0x8b0>
   157c8:	add	r3, pc, r3
   157cc:	ldrd	r2, [r3, #16]
   157d0:	adds	r2, r2, #1
   157d4:	adc	r3, r3, #0
   157d8:	ldr	r1, [pc, #1912]	; 15f58 <if_statement_inside_else_statement@@Base+0x8b4>
   157dc:	add	r1, pc, r1
   157e0:	strd	r2, [r1, #16]
   157e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157e8:	add	r5, r3, #4
   157ec:	mov	r0, #8
   157f0:	bl	118d0 <malloc@plt>
   157f4:	mov	r3, r0
   157f8:	str	r3, [r5]
   157fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15800:	add	r3, r3, #4
   15804:	ldr	r3, [r3]
   15808:	mov	r1, #1
   1580c:	mov	r0, r3
   15810:	bl	16f20 <init_token_int_value@@Base>
   15814:	ldr	r3, [pc, #1856]	; 15f5c <if_statement_inside_else_statement@@Base+0x8b8>
   15818:	add	r3, pc, r3
   1581c:	ldrd	r2, [r3, #24]
   15820:	adds	r2, r2, #1
   15824:	adc	r3, r3, #0
   15828:	ldr	r1, [pc, #1840]	; 15f60 <if_statement_inside_else_statement@@Base+0x8bc>
   1582c:	add	r1, pc, r1
   15830:	strd	r2, [r1, #24]
   15834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15838:	add	r5, r3, #8
   1583c:	mov	r0, #8
   15840:	bl	118d0 <malloc@plt>
   15844:	mov	r3, r0
   15848:	str	r3, [r5]
   1584c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15850:	add	r3, r3, #8
   15854:	ldr	r3, [r3]
   15858:	mov	r1, #1
   1585c:	mov	r0, r3
   15860:	bl	16f20 <init_token_int_value@@Base>
   15864:	ldr	r3, [pc, #1784]	; 15f64 <if_statement_inside_else_statement@@Base+0x8c0>
   15868:	add	r3, pc, r3
   1586c:	ldrd	r2, [r3, #32]
   15870:	adds	r2, r2, #1
   15874:	adc	r3, r3, #0
   15878:	ldr	r1, [pc, #1768]	; 15f68 <if_statement_inside_else_statement@@Base+0x8c4>
   1587c:	add	r1, pc, r1
   15880:	strd	r2, [r1, #32]
   15884:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15888:	add	r5, r3, #12
   1588c:	mov	r0, #8
   15890:	bl	118d0 <malloc@plt>
   15894:	mov	r3, r0
   15898:	str	r3, [r5]
   1589c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158a0:	add	r3, r3, #12
   158a4:	ldr	r3, [r3]
   158a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   158ac:	mov	r0, r3
   158b0:	bl	172dc <init_token_boolean_op@@Base>
   158b4:	ldr	r3, [pc, #1712]	; 15f6c <if_statement_inside_else_statement@@Base+0x8c8>
   158b8:	add	r3, pc, r3
   158bc:	ldrd	r2, [r3, #40]	; 0x28
   158c0:	adds	r2, r2, #1
   158c4:	adc	r3, r3, #0
   158c8:	ldr	r1, [pc, #1696]	; 15f70 <if_statement_inside_else_statement@@Base+0x8cc>
   158cc:	add	r1, pc, r1
   158d0:	strd	r2, [r1, #40]	; 0x28
   158d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158d8:	add	r5, r3, #16
   158dc:	mov	r0, #8
   158e0:	bl	118d0 <malloc@plt>
   158e4:	mov	r3, r0
   158e8:	str	r3, [r5]
   158ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158f0:	add	r3, r3, #16
   158f4:	ldr	r3, [r3]
   158f8:	mov	r1, #1
   158fc:	mov	r0, r3
   15900:	bl	16f20 <init_token_int_value@@Base>
   15904:	ldr	r3, [pc, #1640]	; 15f74 <if_statement_inside_else_statement@@Base+0x8d0>
   15908:	add	r3, pc, r3
   1590c:	ldrd	r2, [r3, #48]	; 0x30
   15910:	adds	r2, r2, #1
   15914:	adc	r3, r3, #0
   15918:	ldr	r1, [pc, #1624]	; 15f78 <if_statement_inside_else_statement@@Base+0x8d4>
   1591c:	add	r1, pc, r1
   15920:	strd	r2, [r1, #48]	; 0x30
   15924:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15928:	add	r5, r3, #20
   1592c:	mov	r0, #4
   15930:	bl	118d0 <malloc@plt>
   15934:	mov	r3, r0
   15938:	str	r3, [r5]
   1593c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15940:	add	r3, r3, #20
   15944:	ldr	r3, [r3]
   15948:	mov	r0, r3
   1594c:	bl	1703c <init_token_cpar@@Base>
   15950:	ldr	r3, [pc, #1572]	; 15f7c <if_statement_inside_else_statement@@Base+0x8d8>
   15954:	add	r3, pc, r3
   15958:	ldrd	r2, [r3, #56]	; 0x38
   1595c:	adds	r2, r2, #1
   15960:	adc	r3, r3, #0
   15964:	ldr	r1, [pc, #1556]	; 15f80 <if_statement_inside_else_statement@@Base+0x8dc>
   15968:	add	r1, pc, r1
   1596c:	strd	r2, [r1, #56]	; 0x38
   15970:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15974:	add	r5, r3, #24
   15978:	mov	r0, #4
   1597c:	bl	118d0 <malloc@plt>
   15980:	mov	r3, r0
   15984:	str	r3, [r5]
   15988:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1598c:	add	r3, r3, #24
   15990:	ldr	r3, [r3]
   15994:	mov	r0, r3
   15998:	bl	17090 <init_token_obra@@Base>
   1599c:	ldr	r3, [pc, #1504]	; 15f84 <if_statement_inside_else_statement@@Base+0x8e0>
   159a0:	add	r3, pc, r3
   159a4:	ldrd	r2, [r3, #64]	; 0x40
   159a8:	adds	r2, r2, #1
   159ac:	adc	r3, r3, #0
   159b0:	ldr	r1, [pc, #1488]	; 15f88 <if_statement_inside_else_statement@@Base+0x8e4>
   159b4:	add	r1, pc, r1
   159b8:	strd	r2, [r1, #64]	; 0x40
   159bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   159c0:	add	r5, r3, #28
   159c4:	mov	r0, #4
   159c8:	bl	118d0 <malloc@plt>
   159cc:	mov	r3, r0
   159d0:	str	r3, [r5]
   159d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   159d8:	add	r3, r3, #28
   159dc:	ldr	r3, [r3]
   159e0:	mov	r0, r3
   159e4:	bl	170e4 <init_token_cbra@@Base>
   159e8:	ldr	r3, [pc, #1436]	; 15f8c <if_statement_inside_else_statement@@Base+0x8e8>
   159ec:	add	r3, pc, r3
   159f0:	ldrd	r2, [r3, #72]	; 0x48
   159f4:	adds	r2, r2, #1
   159f8:	adc	r3, r3, #0
   159fc:	ldr	r1, [pc, #1420]	; 15f90 <if_statement_inside_else_statement@@Base+0x8ec>
   15a00:	add	r1, pc, r1
   15a04:	strd	r2, [r1, #72]	; 0x48
   15a08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a0c:	add	r5, r3, #32
   15a10:	mov	r0, #4
   15a14:	bl	118d0 <malloc@plt>
   15a18:	mov	r3, r0
   15a1c:	str	r3, [r5]
   15a20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a24:	add	r3, r3, #32
   15a28:	ldr	r3, [r3]
   15a2c:	mov	r0, r3
   15a30:	bl	17288 <init_token_else@@Base>
   15a34:	ldr	r3, [pc, #1368]	; 15f94 <if_statement_inside_else_statement@@Base+0x8f0>
   15a38:	add	r3, pc, r3
   15a3c:	ldrd	r2, [r3, #80]	; 0x50
   15a40:	adds	r2, r2, #1
   15a44:	adc	r3, r3, #0
   15a48:	ldr	r1, [pc, #1352]	; 15f98 <if_statement_inside_else_statement@@Base+0x8f4>
   15a4c:	add	r1, pc, r1
   15a50:	strd	r2, [r1, #80]	; 0x50
   15a54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a58:	add	r5, r3, #36	; 0x24
   15a5c:	mov	r0, #4
   15a60:	bl	118d0 <malloc@plt>
   15a64:	mov	r3, r0
   15a68:	str	r3, [r5]
   15a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a70:	add	r3, r3, #36	; 0x24
   15a74:	ldr	r3, [r3]
   15a78:	mov	r0, r3
   15a7c:	bl	17090 <init_token_obra@@Base>
   15a80:	ldr	r3, [pc, #1300]	; 15f9c <if_statement_inside_else_statement@@Base+0x8f8>
   15a84:	add	r3, pc, r3
   15a88:	ldrd	r2, [r3, #88]	; 0x58
   15a8c:	adds	r2, r2, #1
   15a90:	adc	r3, r3, #0
   15a94:	ldr	r1, [pc, #1284]	; 15fa0 <if_statement_inside_else_statement@@Base+0x8fc>
   15a98:	add	r1, pc, r1
   15a9c:	strd	r2, [r1, #88]	; 0x58
   15aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15aa4:	add	r5, r3, #40	; 0x28
   15aa8:	mov	r0, #4
   15aac:	bl	118d0 <malloc@plt>
   15ab0:	mov	r3, r0
   15ab4:	str	r3, [r5]
   15ab8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15abc:	add	r3, r3, #40	; 0x28
   15ac0:	ldr	r3, [r3]
   15ac4:	mov	r0, r3
   15ac8:	bl	17234 <init_token_if@@Base>
   15acc:	ldr	r3, [pc, #1232]	; 15fa4 <if_statement_inside_else_statement@@Base+0x900>
   15ad0:	add	r3, pc, r3
   15ad4:	ldrd	r2, [r3, #96]	; 0x60
   15ad8:	adds	r2, r2, #1
   15adc:	adc	r3, r3, #0
   15ae0:	ldr	r1, [pc, #1216]	; 15fa8 <if_statement_inside_else_statement@@Base+0x904>
   15ae4:	add	r1, pc, r1
   15ae8:	strd	r2, [r1, #96]	; 0x60
   15aec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15af0:	add	r5, r3, #44	; 0x2c
   15af4:	mov	r0, #4
   15af8:	bl	118d0 <malloc@plt>
   15afc:	mov	r3, r0
   15b00:	str	r3, [r5]
   15b04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b08:	add	r3, r3, #44	; 0x2c
   15b0c:	ldr	r3, [r3]
   15b10:	mov	r0, r3
   15b14:	bl	16fe8 <init_token_opar@@Base>
   15b18:	ldr	r3, [pc, #1164]	; 15fac <if_statement_inside_else_statement@@Base+0x908>
   15b1c:	add	r3, pc, r3
   15b20:	ldrd	r2, [r3, #104]	; 0x68
   15b24:	adds	r2, r2, #1
   15b28:	adc	r3, r3, #0
   15b2c:	ldr	r1, [pc, #1148]	; 15fb0 <if_statement_inside_else_statement@@Base+0x90c>
   15b30:	add	r1, pc, r1
   15b34:	strd	r2, [r1, #104]	; 0x68
   15b38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b3c:	add	r5, r3, #48	; 0x30
   15b40:	mov	r0, #8
   15b44:	bl	118d0 <malloc@plt>
   15b48:	mov	r3, r0
   15b4c:	str	r3, [r5]
   15b50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b54:	add	r3, r3, #48	; 0x30
   15b58:	ldr	r3, [r3]
   15b5c:	mov	r1, #1
   15b60:	mov	r0, r3
   15b64:	bl	16f20 <init_token_int_value@@Base>
   15b68:	ldr	r3, [pc, #1092]	; 15fb4 <if_statement_inside_else_statement@@Base+0x910>
   15b6c:	add	r3, pc, r3
   15b70:	ldrd	r2, [r3, #112]	; 0x70
   15b74:	adds	r2, r2, #1
   15b78:	adc	r3, r3, #0
   15b7c:	ldr	r1, [pc, #1076]	; 15fb8 <if_statement_inside_else_statement@@Base+0x914>
   15b80:	add	r1, pc, r1
   15b84:	strd	r2, [r1, #112]	; 0x70
   15b88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b8c:	add	r5, r3, #52	; 0x34
   15b90:	mov	r0, #8
   15b94:	bl	118d0 <malloc@plt>
   15b98:	mov	r3, r0
   15b9c:	str	r3, [r5]
   15ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ba4:	add	r3, r3, #52	; 0x34
   15ba8:	ldr	r3, [r3]
   15bac:	mov	r1, #1
   15bb0:	mov	r0, r3
   15bb4:	bl	16f20 <init_token_int_value@@Base>
   15bb8:	ldr	r3, [pc, #1020]	; 15fbc <if_statement_inside_else_statement@@Base+0x918>
   15bbc:	add	r3, pc, r3
   15bc0:	ldrd	r2, [r3, #120]	; 0x78
   15bc4:	adds	r2, r2, #1
   15bc8:	adc	r3, r3, #0
   15bcc:	ldr	r1, [pc, #1004]	; 15fc0 <if_statement_inside_else_statement@@Base+0x91c>
   15bd0:	add	r1, pc, r1
   15bd4:	strd	r2, [r1, #120]	; 0x78
   15bd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bdc:	add	r5, r3, #56	; 0x38
   15be0:	mov	r0, #8
   15be4:	bl	118d0 <malloc@plt>
   15be8:	mov	r3, r0
   15bec:	str	r3, [r5]
   15bf0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bf4:	add	r3, r3, #56	; 0x38
   15bf8:	ldr	r3, [r3]
   15bfc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c00:	mov	r0, r3
   15c04:	bl	172dc <init_token_boolean_op@@Base>
   15c08:	ldr	r3, [pc, #948]	; 15fc4 <if_statement_inside_else_statement@@Base+0x920>
   15c0c:	add	r3, pc, r3
   15c10:	ldrd	r2, [r3, #128]	; 0x80
   15c14:	adds	r2, r2, #1
   15c18:	adc	r3, r3, #0
   15c1c:	ldr	r1, [pc, #932]	; 15fc8 <if_statement_inside_else_statement@@Base+0x924>
   15c20:	add	r1, pc, r1
   15c24:	strd	r2, [r1, #128]	; 0x80
   15c28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c2c:	add	r5, r3, #60	; 0x3c
   15c30:	mov	r0, #8
   15c34:	bl	118d0 <malloc@plt>
   15c38:	mov	r3, r0
   15c3c:	str	r3, [r5]
   15c40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c44:	add	r3, r3, #60	; 0x3c
   15c48:	ldr	r3, [r3]
   15c4c:	mov	r1, #1
   15c50:	mov	r0, r3
   15c54:	bl	16f20 <init_token_int_value@@Base>
   15c58:	ldr	r3, [pc, #876]	; 15fcc <if_statement_inside_else_statement@@Base+0x928>
   15c5c:	add	r3, pc, r3
   15c60:	ldrd	r2, [r3, #136]	; 0x88
   15c64:	adds	r2, r2, #1
   15c68:	adc	r3, r3, #0
   15c6c:	ldr	r1, [pc, #860]	; 15fd0 <if_statement_inside_else_statement@@Base+0x92c>
   15c70:	add	r1, pc, r1
   15c74:	strd	r2, [r1, #136]	; 0x88
   15c78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c7c:	add	r5, r3, #64	; 0x40
   15c80:	mov	r0, #4
   15c84:	bl	118d0 <malloc@plt>
   15c88:	mov	r3, r0
   15c8c:	str	r3, [r5]
   15c90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c94:	add	r3, r3, #64	; 0x40
   15c98:	ldr	r3, [r3]
   15c9c:	mov	r0, r3
   15ca0:	bl	1703c <init_token_cpar@@Base>
   15ca4:	ldr	r3, [pc, #808]	; 15fd4 <if_statement_inside_else_statement@@Base+0x930>
   15ca8:	add	r3, pc, r3
   15cac:	ldrd	r2, [r3, #144]	; 0x90
   15cb0:	adds	r2, r2, #1
   15cb4:	adc	r3, r3, #0
   15cb8:	ldr	r1, [pc, #792]	; 15fd8 <if_statement_inside_else_statement@@Base+0x934>
   15cbc:	add	r1, pc, r1
   15cc0:	strd	r2, [r1, #144]	; 0x90
   15cc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cc8:	add	r5, r3, #68	; 0x44
   15ccc:	mov	r0, #4
   15cd0:	bl	118d0 <malloc@plt>
   15cd4:	mov	r3, r0
   15cd8:	str	r3, [r5]
   15cdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ce0:	add	r3, r3, #68	; 0x44
   15ce4:	ldr	r3, [r3]
   15ce8:	mov	r0, r3
   15cec:	bl	17090 <init_token_obra@@Base>
   15cf0:	ldr	r3, [pc, #740]	; 15fdc <if_statement_inside_else_statement@@Base+0x938>
   15cf4:	add	r3, pc, r3
   15cf8:	ldrd	r2, [r3, #152]	; 0x98
   15cfc:	adds	r2, r2, #1
   15d00:	adc	r3, r3, #0
   15d04:	ldr	r1, [pc, #724]	; 15fe0 <if_statement_inside_else_statement@@Base+0x93c>
   15d08:	add	r1, pc, r1
   15d0c:	strd	r2, [r1, #152]	; 0x98
   15d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d14:	add	r5, r3, #72	; 0x48
   15d18:	mov	r0, #4
   15d1c:	bl	118d0 <malloc@plt>
   15d20:	mov	r3, r0
   15d24:	str	r3, [r5]
   15d28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d2c:	add	r3, r3, #72	; 0x48
   15d30:	ldr	r3, [r3]
   15d34:	mov	r0, r3
   15d38:	bl	170e4 <init_token_cbra@@Base>
   15d3c:	ldr	r3, [pc, #672]	; 15fe4 <if_statement_inside_else_statement@@Base+0x940>
   15d40:	add	r3, pc, r3
   15d44:	ldrd	r2, [r3, #160]	; 0xa0
   15d48:	adds	r2, r2, #1
   15d4c:	adc	r3, r3, #0
   15d50:	ldr	r1, [pc, #656]	; 15fe8 <if_statement_inside_else_statement@@Base+0x944>
   15d54:	add	r1, pc, r1
   15d58:	strd	r2, [r1, #160]	; 0xa0
   15d5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d60:	add	r5, r3, #76	; 0x4c
   15d64:	mov	r0, #4
   15d68:	bl	118d0 <malloc@plt>
   15d6c:	mov	r3, r0
   15d70:	str	r3, [r5]
   15d74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d78:	add	r3, r3, #76	; 0x4c
   15d7c:	ldr	r3, [r3]
   15d80:	mov	r0, r3
   15d84:	bl	170e4 <init_token_cbra@@Base>
   15d88:	ldr	r3, [pc, #604]	; 15fec <if_statement_inside_else_statement@@Base+0x948>
   15d8c:	add	r3, pc, r3
   15d90:	ldrd	r2, [r3, #168]	; 0xa8
   15d94:	adds	r2, r2, #1
   15d98:	adc	r3, r3, #0
   15d9c:	ldr	r1, [pc, #588]	; 15ff0 <if_statement_inside_else_statement@@Base+0x94c>
   15da0:	add	r1, pc, r1
   15da4:	strd	r2, [r1, #168]	; 0xa8
   15da8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15dac:	add	r5, r3, #80	; 0x50
   15db0:	mov	r0, #4
   15db4:	bl	118d0 <malloc@plt>
   15db8:	mov	r3, r0
   15dbc:	str	r3, [r5]
   15dc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15dc4:	add	r3, r3, #80	; 0x50
   15dc8:	ldr	r3, [r3]
   15dcc:	mov	r0, r3
   15dd0:	bl	170e4 <init_token_cbra@@Base>
   15dd4:	ldr	r3, [pc, #536]	; 15ff4 <if_statement_inside_else_statement@@Base+0x950>
   15dd8:	add	r3, pc, r3
   15ddc:	ldrd	r2, [r3, #176]	; 0xb0
   15de0:	adds	r2, r2, #1
   15de4:	adc	r3, r3, #0
   15de8:	ldr	r1, [pc, #520]	; 15ff8 <if_statement_inside_else_statement@@Base+0x954>
   15dec:	add	r1, pc, r1
   15df0:	strd	r2, [r1, #176]	; 0xb0
   15df4:	ldr	r3, [pc, #512]	; 15ffc <if_statement_inside_else_statement@@Base+0x958>
   15df8:	ldr	r3, [r4, r3]
   15dfc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15e00:	str	r2, [r3, #228]	; 0xe4
   15e04:	ldr	r3, [pc, #496]	; 15ffc <if_statement_inside_else_statement@@Base+0x958>
   15e08:	ldr	r3, [r4, r3]
   15e0c:	mov	r2, #21
   15e10:	str	r2, [r3, #220]	; 0xdc
   15e14:	sub	r3, fp, #44	; 0x2c
   15e18:	mov	r0, r3
   15e1c:	bl	19428 <read_if_statement@@Base>
   15e20:	str	r0, [fp, #-16]
   15e24:	ldr	r3, [pc, #464]	; 15ffc <if_statement_inside_else_statement@@Base+0x958>
   15e28:	ldr	r3, [r4, r3]
   15e2c:	ldr	r3, [r3, #204]	; 0xcc
   15e30:	cmp	r3, #21
   15e34:	beq	15e78 <if_statement_inside_else_statement@@Base+0x7d4>
   15e38:	ldr	r3, [pc, #448]	; 16000 <if_statement_inside_else_statement@@Base+0x95c>
   15e3c:	add	r3, pc, r3
   15e40:	ldrd	r2, [r3, #184]	; 0xb8
   15e44:	adds	r2, r2, #1
   15e48:	adc	r3, r3, #0
   15e4c:	ldr	r1, [pc, #432]	; 16004 <if_statement_inside_else_statement@@Base+0x960>
   15e50:	add	r1, pc, r1
   15e54:	strd	r2, [r1, #184]	; 0xb8
   15e58:	ldr	r3, [pc, #424]	; 16008 <if_statement_inside_else_statement@@Base+0x964>
   15e5c:	add	r3, pc, r3
   15e60:	ldr	r2, [pc, #420]	; 1600c <if_statement_inside_else_statement@@Base+0x968>
   15e64:	ldr	r1, [pc, #420]	; 16010 <if_statement_inside_else_statement@@Base+0x96c>
   15e68:	add	r1, pc, r1
   15e6c:	ldr	r0, [pc, #416]	; 16014 <if_statement_inside_else_statement@@Base+0x970>
   15e70:	add	r0, pc, r0
   15e74:	bl	119e4 <__assert_fail@plt>
   15e78:	ldr	r3, [fp, #-16]
   15e7c:	cmp	r3, #0
   15e80:	bne	15ec4 <if_statement_inside_else_statement@@Base+0x820>
   15e84:	ldr	r3, [pc, #396]	; 16018 <if_statement_inside_else_statement@@Base+0x974>
   15e88:	add	r3, pc, r3
   15e8c:	ldrd	r2, [r3, #192]	; 0xc0
   15e90:	adds	r2, r2, #1
   15e94:	adc	r3, r3, #0
   15e98:	ldr	r1, [pc, #380]	; 1601c <if_statement_inside_else_statement@@Base+0x978>
   15e9c:	add	r1, pc, r1
   15ea0:	strd	r2, [r1, #192]	; 0xc0
   15ea4:	ldr	r3, [pc, #372]	; 16020 <if_statement_inside_else_statement@@Base+0x97c>
   15ea8:	add	r3, pc, r3
   15eac:	ldr	r2, [pc, #368]	; 16024 <if_statement_inside_else_statement@@Base+0x980>
   15eb0:	ldr	r1, [pc, #368]	; 16028 <if_statement_inside_else_statement@@Base+0x984>
   15eb4:	add	r1, pc, r1
   15eb8:	ldr	r0, [pc, #364]	; 1602c <if_statement_inside_else_statement@@Base+0x988>
   15ebc:	add	r0, pc, r0
   15ec0:	bl	119e4 <__assert_fail@plt>
   15ec4:	ldr	r3, [fp, #-16]
   15ec8:	ldr	r3, [r3]
   15ecc:	cmp	r3, #4
   15ed0:	beq	15f14 <if_statement_inside_else_statement@@Base+0x870>
   15ed4:	ldr	r3, [pc, #340]	; 16030 <if_statement_inside_else_statement@@Base+0x98c>
   15ed8:	add	r3, pc, r3
   15edc:	ldrd	r2, [r3, #208]	; 0xd0
   15ee0:	adds	r2, r2, #1
   15ee4:	adc	r3, r3, #0
   15ee8:	ldr	r1, [pc, #324]	; 16034 <if_statement_inside_else_statement@@Base+0x990>
   15eec:	add	r1, pc, r1
   15ef0:	strd	r2, [r1, #208]	; 0xd0
   15ef4:	ldr	r3, [pc, #316]	; 16038 <if_statement_inside_else_statement@@Base+0x994>
   15ef8:	add	r3, pc, r3
   15efc:	mov	r2, #560	; 0x230
   15f00:	ldr	r1, [pc, #308]	; 1603c <if_statement_inside_else_statement@@Base+0x998>
   15f04:	add	r1, pc, r1
   15f08:	ldr	r0, [pc, #304]	; 16040 <if_statement_inside_else_statement@@Base+0x99c>
   15f0c:	add	r0, pc, r0
   15f10:	bl	119e4 <__assert_fail@plt>
   15f14:	ldr	r3, [pc, #296]	; 16044 <if_statement_inside_else_statement@@Base+0x9a0>
   15f18:	add	r3, pc, r3
   15f1c:	ldrd	r2, [r3, #200]	; 0xc8
   15f20:	adds	r2, r2, #1
   15f24:	adc	r3, r3, #0
   15f28:	ldr	r1, [pc, #280]	; 16048 <if_statement_inside_else_statement@@Base+0x9a4>
   15f2c:	add	r1, pc, r1
   15f30:	strd	r2, [r1, #200]	; 0xc8
   15f34:	nop			; (mov r0, r0)
   15f38:	sub	sp, fp, #12
   15f3c:	pop	{r4, r5, fp, pc}
   15f40:	andeq	r8, r1, r4, asr #18
   15f44:	andeq	r9, r1, ip, lsr #9
   15f48:	muleq	r1, r8, r4
   15f4c:	andeq	r9, r1, r0, ror r4
   15f50:	andeq	r9, r1, ip, asr r4
   15f54:	andeq	r9, r1, r0, lsr #7
   15f58:	andeq	r9, r1, ip, lsl #7
   15f5c:	andeq	r9, r1, r0, asr r3
   15f60:	andeq	r9, r1, ip, lsr r3
   15f64:	andeq	r9, r1, r0, lsl #6
   15f68:	andeq	r9, r1, ip, ror #5
   15f6c:			; <UNDEFINED> instruction: 0x000192b0
   15f70:	muleq	r1, ip, r2
   15f74:	andeq	r9, r1, r0, ror #4
   15f78:	andeq	r9, r1, ip, asr #4
   15f7c:	andeq	r9, r1, r4, lsl r2
   15f80:	andeq	r9, r1, r0, lsl #4
   15f84:	andeq	r9, r1, r8, asr #3
   15f88:			; <UNDEFINED> instruction: 0x000191b4
   15f8c:	andeq	r9, r1, ip, ror r1
   15f90:	andeq	r9, r1, r8, ror #2
   15f94:	andeq	r9, r1, r0, lsr r1
   15f98:	andeq	r9, r1, ip, lsl r1
   15f9c:	andeq	r9, r1, r4, ror #1
   15fa0:	ldrdeq	r9, [r1], -r0
   15fa4:	muleq	r1, r8, r0
   15fa8:	andeq	r9, r1, r4, lsl #1
   15fac:	andeq	r9, r1, ip, asr #32
   15fb0:	andeq	r9, r1, r8, lsr r0
   15fb4:	strdeq	r8, [r1], -ip
   15fb8:	andeq	r8, r1, r8, ror #31
   15fbc:	andeq	r8, r1, ip, lsr #31
   15fc0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15fc4:	andeq	r8, r1, ip, asr pc
   15fc8:	andeq	r8, r1, r8, asr #30
   15fcc:	andeq	r8, r1, ip, lsl #30
   15fd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15fd4:	andeq	r8, r1, r0, asr #29
   15fd8:	andeq	r8, r1, ip, lsr #29
   15fdc:	andeq	r8, r1, r4, ror lr
   15fe0:	andeq	r8, r1, r0, ror #28
   15fe4:	andeq	r8, r1, r8, lsr #28
   15fe8:	andeq	r8, r1, r4, lsl lr
   15fec:	ldrdeq	r8, [r1], -ip
   15ff0:	andeq	r8, r1, r8, asr #27
   15ff4:	muleq	r1, r0, sp
   15ff8:	andeq	r8, r1, ip, ror sp
   15ffc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16000:	andeq	r8, r1, ip, lsr #26
   16004:	andeq	r8, r1, r8, lsl sp
   16008:	andeq	r6, r0, r8, lsl pc
   1600c:	andeq	r0, r0, lr, lsr #4
   16010:	andeq	r6, r0, r8, lsl r9
   16014:			; <UNDEFINED> instruction: 0x00006bb4
   16018:	andeq	r8, r1, r0, ror #25
   1601c:	andeq	r8, r1, ip, asr #25
   16020:	andeq	r6, r0, ip, asr #29
   16024:	andeq	r0, r0, pc, lsr #4
   16028:	andeq	r6, r0, ip, asr #17
   1602c:	muleq	r0, r4, sl
   16030:	muleq	r1, r0, ip
   16034:	andeq	r8, r1, ip, ror ip
   16038:	andeq	r6, r0, ip, ror lr
   1603c:	andeq	r6, r0, ip, ror r8
   16040:	andeq	r6, r0, r0, asr sl
   16044:	andeq	r8, r1, r0, asr ip
   16048:	andeq	r8, r1, ip, lsr ip

0001604c <main@@Base>:
   1604c:	push	{r4, r5, fp, lr}
   16050:	add	fp, sp, #12
   16054:	ldr	r4, [pc, #2984]	; 16c04 <main@@Base+0xbb8>
   16058:	add	r4, pc, r4
   1605c:	ldr	r3, [pc, #2980]	; 16c08 <main@@Base+0xbbc>
   16060:	add	r3, pc, r3
   16064:	ldrd	r2, [r3]
   16068:	adds	r2, r2, #1
   1606c:	adc	r3, r3, #0
   16070:	ldr	r1, [pc, #2964]	; 16c0c <main@@Base+0xbc0>
   16074:	add	r1, pc, r1
   16078:	strd	r2, [r1]
   1607c:	ldr	r3, [pc, #2956]	; 16c10 <main@@Base+0xbc4>
   16080:	ldr	r3, [r4, r3]
   16084:	ldr	r3, [r3]
   16088:	mov	r1, #0
   1608c:	mov	r0, r3
   16090:	bl	1184c <setbuf@plt>
   16094:	ldr	r3, [pc, #2936]	; 16c14 <main@@Base+0xbc8>
   16098:	add	r3, pc, r3
   1609c:	ldrd	r2, [r3, #8]
   160a0:	adds	r2, r2, #1
   160a4:	adc	r3, r3, #0
   160a8:	ldr	r1, [pc, #2920]	; 16c18 <main@@Base+0xbcc>
   160ac:	add	r1, pc, r1
   160b0:	strd	r2, [r1, #8]
   160b4:	ldr	r3, [pc, #2900]	; 16c10 <main@@Base+0xbc4>
   160b8:	ldr	r3, [r4, r3]
   160bc:	ldr	r3, [r3]
   160c0:	mov	r2, #14
   160c4:	mov	r1, #1
   160c8:	ldr	r0, [pc, #2892]	; 16c1c <main@@Base+0xbd0>
   160cc:	add	r0, pc, r0
   160d0:	bl	11894 <fwrite@plt>
   160d4:	ldr	r3, [pc, #2884]	; 16c20 <main@@Base+0xbd4>
   160d8:	add	r3, pc, r3
   160dc:	ldrd	r2, [r3, #16]
   160e0:	adds	r2, r2, #1
   160e4:	adc	r3, r3, #0
   160e8:	ldr	r1, [pc, #2868]	; 16c24 <main@@Base+0xbd8>
   160ec:	add	r1, pc, r1
   160f0:	strd	r2, [r1, #16]
   160f4:	ldr	r3, [pc, #2836]	; 16c10 <main@@Base+0xbc4>
   160f8:	ldr	r3, [r4, r3]
   160fc:	ldr	r3, [r3]
   16100:	mov	r2, #14
   16104:	mov	r1, #1
   16108:	ldr	r0, [pc, #2840]	; 16c28 <main@@Base+0xbdc>
   1610c:	add	r0, pc, r0
   16110:	bl	11894 <fwrite@plt>
   16114:	ldr	r3, [pc, #2832]	; 16c2c <main@@Base+0xbe0>
   16118:	add	r3, pc, r3
   1611c:	ldrd	r2, [r3, #24]
   16120:	adds	r2, r2, #1
   16124:	adc	r3, r3, #0
   16128:	ldr	r1, [pc, #2816]	; 16c30 <main@@Base+0xbe4>
   1612c:	add	r1, pc, r1
   16130:	strd	r2, [r1, #24]
   16134:	ldr	r3, [pc, #2772]	; 16c10 <main@@Base+0xbc4>
   16138:	ldr	r3, [r4, r3]
   1613c:	ldr	r3, [r3]
   16140:	mov	r2, #15
   16144:	mov	r1, #1
   16148:	ldr	r0, [pc, #2788]	; 16c34 <main@@Base+0xbe8>
   1614c:	add	r0, pc, r0
   16150:	bl	11894 <fwrite@plt>
   16154:	ldr	r3, [pc, #2780]	; 16c38 <main@@Base+0xbec>
   16158:	add	r3, pc, r3
   1615c:	ldrd	r2, [r3, #32]
   16160:	adds	r2, r2, #1
   16164:	adc	r3, r3, #0
   16168:	ldr	r1, [pc, #2764]	; 16c3c <main@@Base+0xbf0>
   1616c:	add	r1, pc, r1
   16170:	strd	r2, [r1, #32]
   16174:	mov	r0, #0
   16178:	bl	11864 <fflush@plt>
   1617c:	ldr	r3, [pc, #2748]	; 16c40 <main@@Base+0xbf4>
   16180:	add	r3, pc, r3
   16184:	ldrd	r2, [r3, #40]	; 0x28
   16188:	adds	r2, r2, #1
   1618c:	adc	r3, r3, #0
   16190:	ldr	r1, [pc, #2732]	; 16c44 <main@@Base+0xbf8>
   16194:	add	r1, pc, r1
   16198:	strd	r2, [r1, #40]	; 0x28
   1619c:	ldr	r3, [pc, #2724]	; 16c48 <main@@Base+0xbfc>
   161a0:	add	r3, pc, r3
   161a4:	mov	r2, r3
   161a8:	ldr	r3, [pc, #2716]	; 16c4c <main@@Base+0xc00>
   161ac:	add	r3, pc, r3
   161b0:	mov	r1, r3
   161b4:	ldr	r3, [pc, #2708]	; 16c50 <main@@Base+0xc04>
   161b8:	add	r3, pc, r3
   161bc:	mov	r0, r3
   161c0:	bl	11858 <printf@plt>
   161c4:	ldr	r3, [pc, #2696]	; 16c54 <main@@Base+0xc08>
   161c8:	add	r3, pc, r3
   161cc:	ldrd	r2, [r3, #48]	; 0x30
   161d0:	adds	r2, r2, #1
   161d4:	adc	r3, r3, #0
   161d8:	ldr	r1, [pc, #2680]	; 16c58 <main@@Base+0xc0c>
   161dc:	add	r1, pc, r1
   161e0:	strd	r2, [r1, #48]	; 0x30
   161e4:	bl	12120 <setup@@Base>
   161e8:	ldr	r3, [pc, #2668]	; 16c5c <main@@Base+0xc10>
   161ec:	add	r3, pc, r3
   161f0:	ldrd	r2, [r3, #56]	; 0x38
   161f4:	adds	r2, r2, #1
   161f8:	adc	r3, r3, #0
   161fc:	ldr	r1, [pc, #2652]	; 16c60 <main@@Base+0xc14>
   16200:	add	r1, pc, r1
   16204:	strd	r2, [r1, #56]	; 0x38
   16208:	bl	121b0 <no_int_as_first_stuff@@Base>
   1620c:	ldr	r3, [pc, #2640]	; 16c64 <main@@Base+0xc18>
   16210:	add	r3, pc, r3
   16214:	ldrd	r2, [r3, #64]	; 0x40
   16218:	adds	r2, r2, #1
   1621c:	adc	r3, r3, #0
   16220:	ldr	r1, [pc, #2624]	; 16c68 <main@@Base+0xc1c>
   16224:	add	r1, pc, r1
   16228:	strd	r2, [r1, #64]	; 0x40
   1622c:	ldr	r3, [pc, #2616]	; 16c6c <main@@Base+0xc20>
   16230:	add	r3, pc, r3
   16234:	mov	r0, r3
   16238:	bl	118c4 <puts@plt>
   1623c:	ldr	r3, [pc, #2604]	; 16c70 <main@@Base+0xc24>
   16240:	add	r3, pc, r3
   16244:	ldrd	r2, [r3, #72]	; 0x48
   16248:	adds	r2, r2, #1
   1624c:	adc	r3, r3, #0
   16250:	ldr	r1, [pc, #2588]	; 16c74 <main@@Base+0xc28>
   16254:	add	r1, pc, r1
   16258:	strd	r2, [r1, #72]	; 0x48
   1625c:	ldr	r3, [pc, #2580]	; 16c78 <main@@Base+0xc2c>
   16260:	add	r3, pc, r3
   16264:	mov	r2, r3
   16268:	ldr	r3, [pc, #2572]	; 16c7c <main@@Base+0xc30>
   1626c:	add	r3, pc, r3
   16270:	mov	r1, r3
   16274:	ldr	r3, [pc, #2564]	; 16c80 <main@@Base+0xc34>
   16278:	add	r3, pc, r3
   1627c:	mov	r0, r3
   16280:	bl	11858 <printf@plt>
   16284:	ldr	r3, [pc, #2552]	; 16c84 <main@@Base+0xc38>
   16288:	add	r3, pc, r3
   1628c:	ldrd	r2, [r3, #80]	; 0x50
   16290:	adds	r2, r2, #1
   16294:	adc	r3, r3, #0
   16298:	ldr	r1, [pc, #2536]	; 16c88 <main@@Base+0xc3c>
   1629c:	add	r1, pc, r1
   162a0:	strd	r2, [r1, #80]	; 0x50
   162a4:	bl	12120 <setup@@Base>
   162a8:	ldr	r3, [pc, #2524]	; 16c8c <main@@Base+0xc40>
   162ac:	add	r3, pc, r3
   162b0:	ldrd	r2, [r3, #88]	; 0x58
   162b4:	adds	r2, r2, #1
   162b8:	adc	r3, r3, #0
   162bc:	ldr	r1, [pc, #2508]	; 16c90 <main@@Base+0xc44>
   162c0:	add	r1, pc, r1
   162c4:	strd	r2, [r1, #88]	; 0x58
   162c8:	bl	12394 <int_but_not_followed_by_function@@Base>
   162cc:	ldr	r3, [pc, #2496]	; 16c94 <main@@Base+0xc48>
   162d0:	add	r3, pc, r3
   162d4:	ldrd	r2, [r3, #96]	; 0x60
   162d8:	adds	r2, r2, #1
   162dc:	adc	r3, r3, #0
   162e0:	ldr	r1, [pc, #2480]	; 16c98 <main@@Base+0xc4c>
   162e4:	add	r1, pc, r1
   162e8:	strd	r2, [r1, #96]	; 0x60
   162ec:	ldr	r3, [pc, #2472]	; 16c9c <main@@Base+0xc50>
   162f0:	add	r3, pc, r3
   162f4:	mov	r0, r3
   162f8:	bl	118c4 <puts@plt>
   162fc:	ldr	r3, [pc, #2460]	; 16ca0 <main@@Base+0xc54>
   16300:	add	r3, pc, r3
   16304:	ldrd	r2, [r3, #104]	; 0x68
   16308:	adds	r2, r2, #1
   1630c:	adc	r3, r3, #0
   16310:	ldr	r1, [pc, #2444]	; 16ca4 <main@@Base+0xc58>
   16314:	add	r1, pc, r1
   16318:	strd	r2, [r1, #104]	; 0x68
   1631c:	ldr	r3, [pc, #2436]	; 16ca8 <main@@Base+0xc5c>
   16320:	add	r3, pc, r3
   16324:	mov	r2, r3
   16328:	ldr	r3, [pc, #2428]	; 16cac <main@@Base+0xc60>
   1632c:	add	r3, pc, r3
   16330:	mov	r1, r3
   16334:	ldr	r3, [pc, #2420]	; 16cb0 <main@@Base+0xc64>
   16338:	add	r3, pc, r3
   1633c:	mov	r0, r3
   16340:	bl	11858 <printf@plt>
   16344:	ldr	r3, [pc, #2408]	; 16cb4 <main@@Base+0xc68>
   16348:	add	r3, pc, r3
   1634c:	ldrd	r2, [r3, #112]	; 0x70
   16350:	adds	r2, r2, #1
   16354:	adc	r3, r3, #0
   16358:	ldr	r1, [pc, #2392]	; 16cb8 <main@@Base+0xc6c>
   1635c:	add	r1, pc, r1
   16360:	strd	r2, [r1, #112]	; 0x70
   16364:	bl	12120 <setup@@Base>
   16368:	ldr	r3, [pc, #2380]	; 16cbc <main@@Base+0xc70>
   1636c:	add	r3, pc, r3
   16370:	ldrd	r2, [r3, #120]	; 0x78
   16374:	adds	r2, r2, #1
   16378:	adc	r3, r3, #0
   1637c:	ldr	r1, [pc, #2364]	; 16cc0 <main@@Base+0xc74>
   16380:	add	r1, pc, r1
   16384:	strd	r2, [r1, #120]	; 0x78
   16388:	bl	1345c <boolean_unary_operator_is_read_properly@@Base>
   1638c:	ldr	r3, [pc, #2352]	; 16cc4 <main@@Base+0xc78>
   16390:	add	r3, pc, r3
   16394:	ldrd	r2, [r3, #128]	; 0x80
   16398:	adds	r2, r2, #1
   1639c:	adc	r3, r3, #0
   163a0:	ldr	r1, [pc, #2336]	; 16cc8 <main@@Base+0xc7c>
   163a4:	add	r1, pc, r1
   163a8:	strd	r2, [r1, #128]	; 0x80
   163ac:	ldr	r3, [pc, #2328]	; 16ccc <main@@Base+0xc80>
   163b0:	add	r3, pc, r3
   163b4:	mov	r0, r3
   163b8:	bl	118c4 <puts@plt>
   163bc:	ldr	r3, [pc, #2316]	; 16cd0 <main@@Base+0xc84>
   163c0:	add	r3, pc, r3
   163c4:	ldrd	r2, [r3, #136]	; 0x88
   163c8:	adds	r2, r2, #1
   163cc:	adc	r3, r3, #0
   163d0:	ldr	r1, [pc, #2300]	; 16cd4 <main@@Base+0xc88>
   163d4:	add	r1, pc, r1
   163d8:	strd	r2, [r1, #136]	; 0x88
   163dc:	ldr	r3, [pc, #2292]	; 16cd8 <main@@Base+0xc8c>
   163e0:	add	r3, pc, r3
   163e4:	mov	r2, r3
   163e8:	ldr	r3, [pc, #2284]	; 16cdc <main@@Base+0xc90>
   163ec:	add	r3, pc, r3
   163f0:	mov	r1, r3
   163f4:	ldr	r3, [pc, #2276]	; 16ce0 <main@@Base+0xc94>
   163f8:	add	r3, pc, r3
   163fc:	mov	r0, r3
   16400:	bl	11858 <printf@plt>
   16404:	ldr	r3, [pc, #2264]	; 16ce4 <main@@Base+0xc98>
   16408:	add	r3, pc, r3
   1640c:	ldrd	r2, [r3, #144]	; 0x90
   16410:	adds	r2, r2, #1
   16414:	adc	r3, r3, #0
   16418:	ldr	r1, [pc, #2248]	; 16ce8 <main@@Base+0xc9c>
   1641c:	add	r1, pc, r1
   16420:	strd	r2, [r1, #144]	; 0x90
   16424:	bl	12120 <setup@@Base>
   16428:	ldr	r3, [pc, #2236]	; 16cec <main@@Base+0xca0>
   1642c:	add	r3, pc, r3
   16430:	ldrd	r2, [r3, #152]	; 0x98
   16434:	adds	r2, r2, #1
   16438:	adc	r3, r3, #0
   1643c:	ldr	r1, [pc, #2220]	; 16cf0 <main@@Base+0xca4>
   16440:	add	r1, pc, r1
   16444:	strd	r2, [r1, #152]	; 0x98
   16448:	bl	13010 <boolean_binary_operator_is_read_properly@@Base>
   1644c:	ldr	r3, [pc, #2208]	; 16cf4 <main@@Base+0xca8>
   16450:	add	r3, pc, r3
   16454:	ldrd	r2, [r3, #160]	; 0xa0
   16458:	adds	r2, r2, #1
   1645c:	adc	r3, r3, #0
   16460:	ldr	r1, [pc, #2192]	; 16cf8 <main@@Base+0xcac>
   16464:	add	r1, pc, r1
   16468:	strd	r2, [r1, #160]	; 0xa0
   1646c:	ldr	r3, [pc, #2184]	; 16cfc <main@@Base+0xcb0>
   16470:	add	r3, pc, r3
   16474:	mov	r0, r3
   16478:	bl	118c4 <puts@plt>
   1647c:	ldr	r3, [pc, #2172]	; 16d00 <main@@Base+0xcb4>
   16480:	add	r3, pc, r3
   16484:	ldrd	r2, [r3, #168]	; 0xa8
   16488:	adds	r2, r2, #1
   1648c:	adc	r3, r3, #0
   16490:	ldr	r1, [pc, #2156]	; 16d04 <main@@Base+0xcb8>
   16494:	add	r1, pc, r1
   16498:	strd	r2, [r1, #168]	; 0xa8
   1649c:	ldr	r3, [pc, #2148]	; 16d08 <main@@Base+0xcbc>
   164a0:	add	r3, pc, r3
   164a4:	mov	r2, r3
   164a8:	ldr	r3, [pc, #2140]	; 16d0c <main@@Base+0xcc0>
   164ac:	add	r3, pc, r3
   164b0:	mov	r1, r3
   164b4:	ldr	r3, [pc, #2132]	; 16d10 <main@@Base+0xcc4>
   164b8:	add	r3, pc, r3
   164bc:	mov	r0, r3
   164c0:	bl	11858 <printf@plt>
   164c4:	ldr	r3, [pc, #2120]	; 16d14 <main@@Base+0xcc8>
   164c8:	add	r3, pc, r3
   164cc:	ldrd	r2, [r3, #176]	; 0xb0
   164d0:	adds	r2, r2, #1
   164d4:	adc	r3, r3, #0
   164d8:	ldr	r1, [pc, #2104]	; 16d18 <main@@Base+0xccc>
   164dc:	add	r1, pc, r1
   164e0:	strd	r2, [r1, #176]	; 0xb0
   164e4:	bl	12120 <setup@@Base>
   164e8:	ldr	r3, [pc, #2092]	; 16d1c <main@@Base+0xcd0>
   164ec:	add	r3, pc, r3
   164f0:	ldrd	r2, [r3, #184]	; 0xb8
   164f4:	adds	r2, r2, #1
   164f8:	adc	r3, r3, #0
   164fc:	ldr	r1, [pc, #2076]	; 16d20 <main@@Base+0xcd4>
   16500:	add	r1, pc, r1
   16504:	strd	r2, [r1, #184]	; 0xb8
   16508:	bl	125fc <boolean_expression_is_read_properly@@Base>
   1650c:	ldr	r3, [pc, #2064]	; 16d24 <main@@Base+0xcd8>
   16510:	add	r3, pc, r3
   16514:	ldrd	r2, [r3, #192]	; 0xc0
   16518:	adds	r2, r2, #1
   1651c:	adc	r3, r3, #0
   16520:	ldr	r1, [pc, #2048]	; 16d28 <main@@Base+0xcdc>
   16524:	add	r1, pc, r1
   16528:	strd	r2, [r1, #192]	; 0xc0
   1652c:	ldr	r3, [pc, #2040]	; 16d2c <main@@Base+0xce0>
   16530:	add	r3, pc, r3
   16534:	mov	r0, r3
   16538:	bl	118c4 <puts@plt>
   1653c:	ldr	r3, [pc, #2028]	; 16d30 <main@@Base+0xce4>
   16540:	add	r3, pc, r3
   16544:	ldrd	r2, [r3, #200]	; 0xc8
   16548:	adds	r2, r2, #1
   1654c:	adc	r3, r3, #0
   16550:	ldr	r1, [pc, #2012]	; 16d34 <main@@Base+0xce8>
   16554:	add	r1, pc, r1
   16558:	strd	r2, [r1, #200]	; 0xc8
   1655c:	ldr	r3, [pc, #2004]	; 16d38 <main@@Base+0xcec>
   16560:	add	r3, pc, r3
   16564:	mov	r2, r3
   16568:	ldr	r3, [pc, #1996]	; 16d3c <main@@Base+0xcf0>
   1656c:	add	r3, pc, r3
   16570:	mov	r1, r3
   16574:	ldr	r3, [pc, #1988]	; 16d40 <main@@Base+0xcf4>
   16578:	add	r3, pc, r3
   1657c:	mov	r0, r3
   16580:	bl	11858 <printf@plt>
   16584:	ldr	r3, [pc, #1976]	; 16d44 <main@@Base+0xcf8>
   16588:	add	r3, pc, r3
   1658c:	ldrd	r2, [r3, #208]	; 0xd0
   16590:	adds	r2, r2, #1
   16594:	adc	r3, r3, #0
   16598:	ldr	r1, [pc, #1960]	; 16d48 <main@@Base+0xcfc>
   1659c:	add	r1, pc, r1
   165a0:	strd	r2, [r1, #208]	; 0xd0
   165a4:	bl	12120 <setup@@Base>
   165a8:	ldr	r3, [pc, #1948]	; 16d4c <main@@Base+0xd00>
   165ac:	add	r3, pc, r3
   165b0:	ldrd	r2, [r3, #216]	; 0xd8
   165b4:	adds	r2, r2, #1
   165b8:	adc	r3, r3, #0
   165bc:	ldr	r1, [pc, #1932]	; 16d50 <main@@Base+0xd04>
   165c0:	add	r1, pc, r1
   165c4:	strd	r2, [r1, #216]	; 0xd8
   165c8:	bl	12a24 <boolean_expression_complex@@Base>
   165cc:	ldr	r3, [pc, #1920]	; 16d54 <main@@Base+0xd08>
   165d0:	add	r3, pc, r3
   165d4:	ldrd	r2, [r3, #224]	; 0xe0
   165d8:	adds	r2, r2, #1
   165dc:	adc	r3, r3, #0
   165e0:	ldr	r1, [pc, #1904]	; 16d58 <main@@Base+0xd0c>
   165e4:	add	r1, pc, r1
   165e8:	strd	r2, [r1, #224]	; 0xe0
   165ec:	ldr	r3, [pc, #1896]	; 16d5c <main@@Base+0xd10>
   165f0:	add	r3, pc, r3
   165f4:	mov	r0, r3
   165f8:	bl	118c4 <puts@plt>
   165fc:	ldr	r3, [pc, #1884]	; 16d60 <main@@Base+0xd14>
   16600:	add	r3, pc, r3
   16604:	ldrd	r2, [r3, #232]	; 0xe8
   16608:	adds	r2, r2, #1
   1660c:	adc	r3, r3, #0
   16610:	ldr	r1, [pc, #1868]	; 16d64 <main@@Base+0xd18>
   16614:	add	r1, pc, r1
   16618:	strd	r2, [r1, #232]	; 0xe8
   1661c:	ldr	r3, [pc, #1860]	; 16d68 <main@@Base+0xd1c>
   16620:	add	r3, pc, r3
   16624:	mov	r2, r3
   16628:	ldr	r3, [pc, #1852]	; 16d6c <main@@Base+0xd20>
   1662c:	add	r3, pc, r3
   16630:	mov	r1, r3
   16634:	ldr	r3, [pc, #1844]	; 16d70 <main@@Base+0xd24>
   16638:	add	r3, pc, r3
   1663c:	mov	r0, r3
   16640:	bl	11858 <printf@plt>
   16644:	ldr	r3, [pc, #1832]	; 16d74 <main@@Base+0xd28>
   16648:	add	r3, pc, r3
   1664c:	ldrd	r2, [r3, #240]	; 0xf0
   16650:	adds	r2, r2, #1
   16654:	adc	r3, r3, #0
   16658:	ldr	r1, [pc, #1816]	; 16d78 <main@@Base+0xd2c>
   1665c:	add	r1, pc, r1
   16660:	strd	r2, [r1, #240]	; 0xf0
   16664:	bl	12120 <setup@@Base>
   16668:	ldr	r3, [pc, #1804]	; 16d7c <main@@Base+0xd30>
   1666c:	add	r3, pc, r3
   16670:	ldrd	r2, [r3, #248]	; 0xf8
   16674:	adds	r2, r2, #1
   16678:	adc	r3, r3, #0
   1667c:	ldr	r1, [pc, #1788]	; 16d80 <main@@Base+0xd34>
   16680:	add	r1, pc, r1
   16684:	strd	r2, [r1, #248]	; 0xf8
   16688:	bl	1383c <if_statement_only@@Base>
   1668c:	ldr	r3, [pc, #1776]	; 16d84 <main@@Base+0xd38>
   16690:	add	r3, pc, r3
   16694:	add	r3, r3, #256	; 0x100
   16698:	ldrd	r2, [r3]
   1669c:	adds	r2, r2, #1
   166a0:	adc	r3, r3, #0
   166a4:	ldr	r1, [pc, #1756]	; 16d88 <main@@Base+0xd3c>
   166a8:	add	r1, pc, r1
   166ac:	add	r1, r1, #256	; 0x100
   166b0:	strd	r2, [r1]
   166b4:	ldr	r3, [pc, #1744]	; 16d8c <main@@Base+0xd40>
   166b8:	add	r3, pc, r3
   166bc:	mov	r0, r3
   166c0:	bl	118c4 <puts@plt>
   166c4:	ldr	r3, [pc, #1732]	; 16d90 <main@@Base+0xd44>
   166c8:	add	r3, pc, r3
   166cc:	add	r3, r3, #272	; 0x110
   166d0:	ldrd	r2, [r3, #-8]
   166d4:	adds	r2, r2, #1
   166d8:	adc	r3, r3, #0
   166dc:	ldr	r1, [pc, #1712]	; 16d94 <main@@Base+0xd48>
   166e0:	add	r1, pc, r1
   166e4:	add	r1, r1, #272	; 0x110
   166e8:	strd	r2, [r1, #-8]
   166ec:	ldr	r3, [pc, #1700]	; 16d98 <main@@Base+0xd4c>
   166f0:	add	r3, pc, r3
   166f4:	mov	r2, r3
   166f8:	ldr	r3, [pc, #1692]	; 16d9c <main@@Base+0xd50>
   166fc:	add	r3, pc, r3
   16700:	mov	r1, r3
   16704:	ldr	r3, [pc, #1684]	; 16da0 <main@@Base+0xd54>
   16708:	add	r3, pc, r3
   1670c:	mov	r0, r3
   16710:	bl	11858 <printf@plt>
   16714:	ldr	r3, [pc, #1672]	; 16da4 <main@@Base+0xd58>
   16718:	add	r3, pc, r3
   1671c:	add	r3, r3, #272	; 0x110
   16720:	ldrd	r2, [r3]
   16724:	adds	r2, r2, #1
   16728:	adc	r3, r3, #0
   1672c:	ldr	r1, [pc, #1652]	; 16da8 <main@@Base+0xd5c>
   16730:	add	r1, pc, r1
   16734:	add	r1, r1, #272	; 0x110
   16738:	strd	r2, [r1]
   1673c:	bl	12120 <setup@@Base>
   16740:	ldr	r3, [pc, #1636]	; 16dac <main@@Base+0xd60>
   16744:	add	r3, pc, r3
   16748:	add	r3, r3, #288	; 0x120
   1674c:	ldrd	r2, [r3, #-8]
   16750:	adds	r2, r2, #1
   16754:	adc	r3, r3, #0
   16758:	ldr	r1, [pc, #1616]	; 16db0 <main@@Base+0xd64>
   1675c:	add	r1, pc, r1
   16760:	add	r1, r1, #288	; 0x120
   16764:	strd	r2, [r1, #-8]
   16768:	bl	13da8 <if_else_statements@@Base>
   1676c:	ldr	r3, [pc, #1600]	; 16db4 <main@@Base+0xd68>
   16770:	add	r3, pc, r3
   16774:	add	r3, r3, #288	; 0x120
   16778:	ldrd	r2, [r3]
   1677c:	adds	r2, r2, #1
   16780:	adc	r3, r3, #0
   16784:	ldr	r1, [pc, #1580]	; 16db8 <main@@Base+0xd6c>
   16788:	add	r1, pc, r1
   1678c:	add	r1, r1, #288	; 0x120
   16790:	strd	r2, [r1]
   16794:	ldr	r3, [pc, #1568]	; 16dbc <main@@Base+0xd70>
   16798:	add	r3, pc, r3
   1679c:	mov	r0, r3
   167a0:	bl	118c4 <puts@plt>
   167a4:	ldr	r3, [pc, #1556]	; 16dc0 <main@@Base+0xd74>
   167a8:	add	r3, pc, r3
   167ac:	add	r3, r3, #304	; 0x130
   167b0:	ldrd	r2, [r3, #-8]
   167b4:	adds	r2, r2, #1
   167b8:	adc	r3, r3, #0
   167bc:	ldr	r1, [pc, #1536]	; 16dc4 <main@@Base+0xd78>
   167c0:	add	r1, pc, r1
   167c4:	add	r1, r1, #304	; 0x130
   167c8:	strd	r2, [r1, #-8]
   167cc:	ldr	r3, [pc, #1524]	; 16dc8 <main@@Base+0xd7c>
   167d0:	add	r3, pc, r3
   167d4:	mov	r2, r3
   167d8:	ldr	r3, [pc, #1516]	; 16dcc <main@@Base+0xd80>
   167dc:	add	r3, pc, r3
   167e0:	mov	r1, r3
   167e4:	ldr	r3, [pc, #1508]	; 16dd0 <main@@Base+0xd84>
   167e8:	add	r3, pc, r3
   167ec:	mov	r0, r3
   167f0:	bl	11858 <printf@plt>
   167f4:	ldr	r3, [pc, #1496]	; 16dd4 <main@@Base+0xd88>
   167f8:	add	r3, pc, r3
   167fc:	add	r3, r3, #304	; 0x130
   16800:	ldrd	r2, [r3]
   16804:	adds	r2, r2, #1
   16808:	adc	r3, r3, #0
   1680c:	ldr	r1, [pc, #1476]	; 16dd8 <main@@Base+0xd8c>
   16810:	add	r1, pc, r1
   16814:	add	r1, r1, #304	; 0x130
   16818:	strd	r2, [r1]
   1681c:	bl	12120 <setup@@Base>
   16820:	ldr	r3, [pc, #1460]	; 16ddc <main@@Base+0xd90>
   16824:	add	r3, pc, r3
   16828:	add	r3, r3, #320	; 0x140
   1682c:	ldrd	r2, [r3, #-8]
   16830:	adds	r2, r2, #1
   16834:	adc	r3, r3, #0
   16838:	ldr	r1, [pc, #1440]	; 16de0 <main@@Base+0xd94>
   1683c:	add	r1, pc, r1
   16840:	add	r1, r1, #320	; 0x140
   16844:	strd	r2, [r1, #-8]
   16848:	bl	14da4 <if_statement_inside_if_statement@@Base>
   1684c:	ldr	r3, [pc, #1424]	; 16de4 <main@@Base+0xd98>
   16850:	add	r3, pc, r3
   16854:	add	r3, r3, #320	; 0x140
   16858:	ldrd	r2, [r3]
   1685c:	adds	r2, r2, #1
   16860:	adc	r3, r3, #0
   16864:	ldr	r1, [pc, #1404]	; 16de8 <main@@Base+0xd9c>
   16868:	add	r1, pc, r1
   1686c:	add	r1, r1, #320	; 0x140
   16870:	strd	r2, [r1]
   16874:	ldr	r3, [pc, #1392]	; 16dec <main@@Base+0xda0>
   16878:	add	r3, pc, r3
   1687c:	mov	r0, r3
   16880:	bl	118c4 <puts@plt>
   16884:	ldr	r3, [pc, #1380]	; 16df0 <main@@Base+0xda4>
   16888:	add	r3, pc, r3
   1688c:	add	r3, r3, #336	; 0x150
   16890:	ldrd	r2, [r3, #-8]
   16894:	adds	r2, r2, #1
   16898:	adc	r3, r3, #0
   1689c:	ldr	r1, [pc, #1360]	; 16df4 <main@@Base+0xda8>
   168a0:	add	r1, pc, r1
   168a4:	add	r1, r1, #336	; 0x150
   168a8:	strd	r2, [r1, #-8]
   168ac:	ldr	r3, [pc, #1348]	; 16df8 <main@@Base+0xdac>
   168b0:	add	r3, pc, r3
   168b4:	mov	r2, r3
   168b8:	ldr	r3, [pc, #1340]	; 16dfc <main@@Base+0xdb0>
   168bc:	add	r3, pc, r3
   168c0:	mov	r1, r3
   168c4:	ldr	r3, [pc, #1332]	; 16e00 <main@@Base+0xdb4>
   168c8:	add	r3, pc, r3
   168cc:	mov	r0, r3
   168d0:	bl	11858 <printf@plt>
   168d4:	ldr	r3, [pc, #1320]	; 16e04 <main@@Base+0xdb8>
   168d8:	add	r3, pc, r3
   168dc:	add	r3, r3, #336	; 0x150
   168e0:	ldrd	r2, [r3]
   168e4:	adds	r2, r2, #1
   168e8:	adc	r3, r3, #0
   168ec:	ldr	r1, [pc, #1300]	; 16e08 <main@@Base+0xdbc>
   168f0:	add	r1, pc, r1
   168f4:	add	r1, r1, #336	; 0x150
   168f8:	strd	r2, [r1]
   168fc:	bl	12120 <setup@@Base>
   16900:	ldr	r3, [pc, #1284]	; 16e0c <main@@Base+0xdc0>
   16904:	add	r3, pc, r3
   16908:	add	r3, r3, #352	; 0x160
   1690c:	ldrd	r2, [r3, #-8]
   16910:	adds	r2, r2, #1
   16914:	adc	r3, r3, #0
   16918:	ldr	r1, [pc, #1264]	; 16e10 <main@@Base+0xdc4>
   1691c:	add	r1, pc, r1
   16920:	add	r1, r1, #352	; 0x160
   16924:	strd	r2, [r1, #-8]
   16928:	bl	156a4 <if_statement_inside_else_statement@@Base>
   1692c:	ldr	r3, [pc, #1248]	; 16e14 <main@@Base+0xdc8>
   16930:	add	r3, pc, r3
   16934:	add	r3, r3, #352	; 0x160
   16938:	ldrd	r2, [r3]
   1693c:	adds	r2, r2, #1
   16940:	adc	r3, r3, #0
   16944:	ldr	r1, [pc, #1228]	; 16e18 <main@@Base+0xdcc>
   16948:	add	r1, pc, r1
   1694c:	add	r1, r1, #352	; 0x160
   16950:	strd	r2, [r1]
   16954:	ldr	r3, [pc, #1216]	; 16e1c <main@@Base+0xdd0>
   16958:	add	r3, pc, r3
   1695c:	mov	r0, r3
   16960:	bl	118c4 <puts@plt>
   16964:	ldr	r3, [pc, #1204]	; 16e20 <main@@Base+0xdd4>
   16968:	add	r3, pc, r3
   1696c:	add	r3, r3, #368	; 0x170
   16970:	ldrd	r2, [r3, #-8]
   16974:	adds	r2, r2, #1
   16978:	adc	r3, r3, #0
   1697c:	ldr	r1, [pc, #1184]	; 16e24 <main@@Base+0xdd8>
   16980:	add	r1, pc, r1
   16984:	add	r1, r1, #368	; 0x170
   16988:	strd	r2, [r1, #-8]
   1698c:	ldr	r3, [pc, #1172]	; 16e28 <main@@Base+0xddc>
   16990:	add	r3, pc, r3
   16994:	mov	r2, r3
   16998:	ldr	r3, [pc, #1164]	; 16e2c <main@@Base+0xde0>
   1699c:	add	r3, pc, r3
   169a0:	mov	r1, r3
   169a4:	ldr	r3, [pc, #1156]	; 16e30 <main@@Base+0xde4>
   169a8:	add	r3, pc, r3
   169ac:	mov	r0, r3
   169b0:	bl	11858 <printf@plt>
   169b4:	ldr	r3, [pc, #1144]	; 16e34 <main@@Base+0xde8>
   169b8:	add	r3, pc, r3
   169bc:	add	r3, r3, #368	; 0x170
   169c0:	ldrd	r2, [r3]
   169c4:	adds	r2, r2, #1
   169c8:	adc	r3, r3, #0
   169cc:	ldr	r1, [pc, #1124]	; 16e38 <main@@Base+0xdec>
   169d0:	add	r1, pc, r1
   169d4:	add	r1, r1, #368	; 0x170
   169d8:	strd	r2, [r1]
   169dc:	bl	12120 <setup@@Base>
   169e0:	ldr	r3, [pc, #1108]	; 16e3c <main@@Base+0xdf0>
   169e4:	add	r3, pc, r3
   169e8:	add	r3, r3, #384	; 0x180
   169ec:	ldrd	r2, [r3, #-8]
   169f0:	adds	r2, r2, #1
   169f4:	adc	r3, r3, #0
   169f8:	ldr	r1, [pc, #1088]	; 16e40 <main@@Base+0xdf4>
   169fc:	add	r1, pc, r1
   16a00:	add	r1, r1, #384	; 0x180
   16a04:	strd	r2, [r1, #-8]
   16a08:	bl	14968 <body_with_one_return@@Base>
   16a0c:	ldr	r3, [pc, #1072]	; 16e44 <main@@Base+0xdf8>
   16a10:	add	r3, pc, r3
   16a14:	add	r3, r3, #384	; 0x180
   16a18:	ldrd	r2, [r3]
   16a1c:	adds	r2, r2, #1
   16a20:	adc	r3, r3, #0
   16a24:	ldr	r1, [pc, #1052]	; 16e48 <main@@Base+0xdfc>
   16a28:	add	r1, pc, r1
   16a2c:	add	r1, r1, #384	; 0x180
   16a30:	strd	r2, [r1]
   16a34:	ldr	r3, [pc, #1040]	; 16e4c <main@@Base+0xe00>
   16a38:	add	r3, pc, r3
   16a3c:	mov	r0, r3
   16a40:	bl	118c4 <puts@plt>
   16a44:	ldr	r3, [pc, #1028]	; 16e50 <main@@Base+0xe04>
   16a48:	add	r3, pc, r3
   16a4c:	add	r3, r3, #400	; 0x190
   16a50:	ldrd	r2, [r3, #-8]
   16a54:	adds	r2, r2, #1
   16a58:	adc	r3, r3, #0
   16a5c:	ldr	r1, [pc, #1008]	; 16e54 <main@@Base+0xe08>
   16a60:	add	r1, pc, r1
   16a64:	add	r1, r1, #400	; 0x190
   16a68:	strd	r2, [r1, #-8]
   16a6c:	ldr	r3, [pc, #996]	; 16e58 <main@@Base+0xe0c>
   16a70:	add	r3, pc, r3
   16a74:	mov	r2, r3
   16a78:	ldr	r3, [pc, #988]	; 16e5c <main@@Base+0xe10>
   16a7c:	add	r3, pc, r3
   16a80:	mov	r1, r3
   16a84:	ldr	r3, [pc, #980]	; 16e60 <main@@Base+0xe14>
   16a88:	add	r3, pc, r3
   16a8c:	mov	r0, r3
   16a90:	bl	11858 <printf@plt>
   16a94:	ldr	r3, [pc, #968]	; 16e64 <main@@Base+0xe18>
   16a98:	add	r3, pc, r3
   16a9c:	add	r3, r3, #400	; 0x190
   16aa0:	ldrd	r2, [r3]
   16aa4:	adds	r2, r2, #1
   16aa8:	adc	r3, r3, #0
   16aac:	ldr	r1, [pc, #948]	; 16e68 <main@@Base+0xe1c>
   16ab0:	add	r1, pc, r1
   16ab4:	add	r1, r1, #400	; 0x190
   16ab8:	strd	r2, [r1]
   16abc:	bl	12120 <setup@@Base>
   16ac0:	ldr	r3, [pc, #932]	; 16e6c <main@@Base+0xe20>
   16ac4:	add	r3, pc, r3
   16ac8:	add	r3, r3, #416	; 0x1a0
   16acc:	ldrd	r2, [r3, #-8]
   16ad0:	adds	r2, r2, #1
   16ad4:	adc	r3, r3, #0
   16ad8:	ldr	r1, [pc, #912]	; 16e70 <main@@Base+0xe24>
   16adc:	add	r1, pc, r1
   16ae0:	add	r1, r1, #416	; 0x1a0
   16ae4:	strd	r2, [r1, #-8]
   16ae8:	bl	143bc <body_with_two_returns@@Base>
   16aec:	ldr	r3, [pc, #896]	; 16e74 <main@@Base+0xe28>
   16af0:	add	r3, pc, r3
   16af4:	add	r3, r3, #416	; 0x1a0
   16af8:	ldrd	r2, [r3]
   16afc:	adds	r2, r2, #1
   16b00:	adc	r3, r3, #0
   16b04:	ldr	r1, [pc, #876]	; 16e78 <main@@Base+0xe2c>
   16b08:	add	r1, pc, r1
   16b0c:	add	r1, r1, #416	; 0x1a0
   16b10:	strd	r2, [r1]
   16b14:	ldr	r3, [pc, #864]	; 16e7c <main@@Base+0xe30>
   16b18:	add	r3, pc, r3
   16b1c:	mov	r0, r3
   16b20:	bl	118c4 <puts@plt>
   16b24:	ldr	r3, [pc, #852]	; 16e80 <main@@Base+0xe34>
   16b28:	add	r3, pc, r3
   16b2c:	add	r3, r3, #432	; 0x1b0
   16b30:	ldrd	r2, [r3, #-8]
   16b34:	adds	r2, r2, #1
   16b38:	adc	r3, r3, #0
   16b3c:	ldr	r1, [pc, #832]	; 16e84 <main@@Base+0xe38>
   16b40:	add	r1, pc, r1
   16b44:	add	r1, r1, #432	; 0x1b0
   16b48:	strd	r2, [r1, #-8]
   16b4c:	ldr	r3, [pc, #820]	; 16e88 <main@@Base+0xe3c>
   16b50:	add	r3, pc, r3
   16b54:	mov	r0, r3
   16b58:	bl	118c4 <puts@plt>
   16b5c:	ldr	r3, [pc, #808]	; 16e8c <main@@Base+0xe40>
   16b60:	add	r3, pc, r3
   16b64:	add	r3, r3, #432	; 0x1b0
   16b68:	ldrd	r2, [r3]
   16b6c:	adds	r2, r2, #1
   16b70:	adc	r3, r3, #0
   16b74:	ldr	r1, [pc, #788]	; 16e90 <main@@Base+0xe44>
   16b78:	add	r1, pc, r1
   16b7c:	add	r1, r1, #432	; 0x1b0
   16b80:	strd	r2, [r1]
   16b84:	ldr	r3, [pc, #776]	; 16e94 <main@@Base+0xe48>
   16b88:	add	r3, pc, r3
   16b8c:	mov	r0, r3
   16b90:	bl	118c4 <puts@plt>
   16b94:	ldr	r3, [pc, #764]	; 16e98 <main@@Base+0xe4c>
   16b98:	add	r3, pc, r3
   16b9c:	add	r3, r3, #448	; 0x1c0
   16ba0:	ldrd	r2, [r3, #-8]
   16ba4:	adds	r2, r2, #1
   16ba8:	adc	r3, r3, #0
   16bac:	ldr	r1, [pc, #744]	; 16e9c <main@@Base+0xe50>
   16bb0:	add	r1, pc, r1
   16bb4:	add	r1, r1, #448	; 0x1c0
   16bb8:	strd	r2, [r1, #-8]
   16bbc:	ldr	r3, [pc, #732]	; 16ea0 <main@@Base+0xe54>
   16bc0:	add	r3, pc, r3
   16bc4:	mov	r0, r3
   16bc8:	bl	118c4 <puts@plt>
   16bcc:	mov	r0, #0
   16bd0:	ldr	r3, [pc, #716]	; 16ea4 <main@@Base+0xe58>
   16bd4:	add	r3, pc, r3
   16bd8:	add	r3, r3, #448	; 0x1c0
   16bdc:	ldrd	r2, [r3]
   16be0:	adds	r2, r2, #1
   16be4:	adc	r3, r3, #0
   16be8:	ldr	r1, [pc, #696]	; 16ea8 <main@@Base+0xe5c>
   16bec:	add	r1, pc, r1
   16bf0:	add	r1, r1, #448	; 0x1c0
   16bf4:	strd	r2, [r1]
   16bf8:	mov	r3, r0
   16bfc:	mov	r0, r3
   16c00:	pop	{r4, r5, fp, pc}
   16c04:	andeq	r7, r1, r0, lsr #31
   16c08:	andeq	r8, r1, r0, asr #18
   16c0c:	andeq	r8, r1, ip, lsr #18
   16c10:	strheq	r0, [r0], -ip
   16c14:	andeq	r8, r1, r8, lsl #18
   16c18:	strdeq	r8, [r1], -r4
   16c1c:	andeq	r6, r0, r4, ror r9
   16c20:	andeq	r8, r1, r8, asr #17
   16c24:			; <UNDEFINED> instruction: 0x000188b4
   16c28:	andeq	r6, r0, r4, asr #18
   16c2c:	andeq	r8, r1, r8, lsl #17
   16c30:	andeq	r8, r1, r4, ror r8
   16c34:	andeq	r6, r0, r4, lsl r9
   16c38:	andeq	r8, r1, r8, asr #16
   16c3c:	andeq	r8, r1, r4, lsr r8
   16c40:	andeq	r8, r1, r0, lsr #16
   16c44:	andeq	r8, r1, ip, lsl #16
   16c48:	ldrdeq	r6, [r0], -r0
   16c4c:	ldrdeq	r6, [r0], -ip
   16c50:	ldrdeq	r6, [r0], -ip
   16c54:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16c58:	andeq	r8, r1, r4, asr #15
   16c5c:			; <UNDEFINED> instruction: 0x000187b4
   16c60:	andeq	r8, r1, r0, lsr #15
   16c64:	muleq	r1, r0, r7
   16c68:	andeq	r8, r1, ip, ror r7
   16c6c:	andeq	r6, r0, r8, ror r8
   16c70:	andeq	r8, r1, r0, ror #14
   16c74:	andeq	r8, r1, ip, asr #14
   16c78:	andeq	r6, r0, r4, asr r8
   16c7c:	andeq	r6, r0, ip, lsl r8
   16c80:	andeq	r6, r0, ip, lsl r8
   16c84:	andeq	r8, r1, r8, lsl r7
   16c88:	andeq	r8, r1, r4, lsl #14
   16c8c:	strdeq	r8, [r1], -r4
   16c90:	andeq	r8, r1, r0, ror #13
   16c94:	ldrdeq	r8, [r1], -r0
   16c98:			; <UNDEFINED> instruction: 0x000186bc
   16c9c:			; <UNDEFINED> instruction: 0x000067b8
   16ca0:	andeq	r8, r1, r0, lsr #13
   16ca4:	andeq	r8, r1, ip, lsl #13
   16ca8:			; <UNDEFINED> instruction: 0x000067b8
   16cac:	andeq	r6, r0, ip, asr r7
   16cb0:	andeq	r6, r0, ip, asr r7
   16cb4:	andeq	r8, r1, r8, asr r6
   16cb8:	andeq	r8, r1, r4, asr #12
   16cbc:	andeq	r8, r1, r4, lsr r6
   16cc0:	andeq	r8, r1, r0, lsr #12
   16cc4:	andeq	r8, r1, r0, lsl r6
   16cc8:	strdeq	r8, [r1], -ip
   16ccc:	strdeq	r6, [r0], -r8
   16cd0:	andeq	r8, r1, r0, ror #11
   16cd4:	andeq	r8, r1, ip, asr #11
   16cd8:	andeq	r6, r0, r0, lsr #14
   16cdc:	muleq	r0, ip, r6
   16ce0:	muleq	r0, ip, r6
   16ce4:	muleq	r1, r8, r5
   16ce8:	andeq	r8, r1, r4, lsl #11
   16cec:	andeq	r8, r1, r4, ror r5
   16cf0:	andeq	r8, r1, r0, ror #10
   16cf4:	andeq	r8, r1, r0, asr r5
   16cf8:	andeq	r8, r1, ip, lsr r5
   16cfc:	andeq	r6, r0, r8, lsr r6
   16d00:	andeq	r8, r1, r0, lsr #10
   16d04:	andeq	r8, r1, ip, lsl #10
   16d08:	andeq	r6, r0, ip, lsl #13
   16d0c:	ldrdeq	r6, [r0], -ip
   16d10:	ldrdeq	r6, [r0], -ip
   16d14:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d18:	andeq	r8, r1, r4, asr #9
   16d1c:			; <UNDEFINED> instruction: 0x000184b4
   16d20:	andeq	r8, r1, r0, lsr #9
   16d24:	muleq	r1, r0, r4
   16d28:	andeq	r8, r1, ip, ror r4
   16d2c:	andeq	r6, r0, r8, ror r5
   16d30:	andeq	r8, r1, r0, ror #8
   16d34:	andeq	r8, r1, ip, asr #8
   16d38:	strdeq	r6, [r0], -r0
   16d3c:	andeq	r6, r0, ip, lsl r5
   16d40:	andeq	r6, r0, ip, lsl r5
   16d44:	andeq	r8, r1, r8, lsl r4
   16d48:	andeq	r8, r1, r4, lsl #8
   16d4c:	strdeq	r8, [r1], -r4
   16d50:	andeq	r8, r1, r0, ror #7
   16d54:	ldrdeq	r8, [r1], -r0
   16d58:			; <UNDEFINED> instruction: 0x000183bc
   16d5c:			; <UNDEFINED> instruction: 0x000064b8
   16d60:	andeq	r8, r1, r0, lsr #7
   16d64:	andeq	r8, r1, ip, lsl #7
   16d68:	andeq	r6, r0, ip, asr #10
   16d6c:	andeq	r6, r0, ip, asr r4
   16d70:	andeq	r6, r0, ip, asr r4
   16d74:	andeq	r8, r1, r8, asr r3
   16d78:	andeq	r8, r1, r4, asr #6
   16d7c:	andeq	r8, r1, r4, lsr r3
   16d80:	andeq	r8, r1, r0, lsr #6
   16d84:	andeq	r8, r1, r0, lsl r3
   16d88:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d8c:	strdeq	r6, [r0], -r0
   16d90:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d94:	andeq	r8, r1, r0, asr #5
   16d98:	muleq	r0, r0, r4
   16d9c:	andeq	r6, r0, ip, lsl #7
   16da0:	andeq	r6, r0, ip, lsl #7
   16da4:	andeq	r8, r1, r8, lsl #5
   16da8:	andeq	r8, r1, r0, ror r2
   16dac:	andeq	r8, r1, ip, asr r2
   16db0:	andeq	r8, r1, r4, asr #4
   16db4:	andeq	r8, r1, r0, lsr r2
   16db8:	andeq	r8, r1, r8, lsl r2
   16dbc:	andeq	r6, r0, r0, lsl r3
   16dc0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dc4:	andeq	r8, r1, r0, ror #3
   16dc8:	andeq	r6, r0, r4, asr #7
   16dcc:	andeq	r6, r0, ip, lsr #5
   16dd0:	andeq	r6, r0, ip, lsr #5
   16dd4:	andeq	r8, r1, r8, lsr #3
   16dd8:	muleq	r1, r0, r1
   16ddc:	andeq	r8, r1, ip, ror r1
   16de0:	andeq	r8, r1, r4, ror #2
   16de4:	andeq	r8, r1, r0, asr r1
   16de8:	andeq	r8, r1, r8, lsr r1
   16dec:	andeq	r6, r0, r0, lsr r2
   16df0:	andeq	r8, r1, r8, lsl r1
   16df4:	andeq	r8, r1, r0, lsl #2
   16df8:	andeq	r6, r0, r8, lsl #6
   16dfc:	andeq	r6, r0, ip, asr #3
   16e00:	andeq	r6, r0, ip, asr #3
   16e04:	andeq	r8, r1, r8, asr #1
   16e08:	strheq	r8, [r1], -r0
   16e0c:	muleq	r1, ip, r0
   16e10:	andeq	r8, r1, r4, lsl #1
   16e14:	andeq	r8, r1, r0, ror r0
   16e18:	andeq	r8, r1, r8, asr r0
   16e1c:	andeq	r6, r0, r0, asr r1
   16e20:	andeq	r8, r1, r8, lsr r0
   16e24:	andeq	r8, r1, r0, lsr #32
   16e28:	andeq	r6, r0, ip, asr #4
   16e2c:	andeq	r6, r0, ip, ror #1
   16e30:	andeq	r6, r0, ip, ror #1
   16e34:	andeq	r7, r1, r8, ror #31
   16e38:	ldrdeq	r7, [r1], -r0
   16e3c:			; <UNDEFINED> instruction: 0x00017fbc
   16e40:	andeq	r7, r1, r4, lsr #31
   16e44:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16e48:	andeq	r7, r1, r8, ror pc
   16e4c:	andeq	r6, r0, r0, ror r0
   16e50:	andeq	r7, r1, r8, asr pc
   16e54:	andeq	r7, r1, r0, asr #30
   16e58:	andeq	r6, r0, r4, lsl #3
   16e5c:	andeq	r6, r0, ip
   16e60:	andeq	r6, r0, ip
   16e64:	andeq	r7, r1, r8, lsl #30
   16e68:	strdeq	r7, [r1], -r0
   16e6c:	ldrdeq	r7, [r1], -ip
   16e70:	andeq	r7, r1, r4, asr #29
   16e74:			; <UNDEFINED> instruction: 0x00017eb0
   16e78:	muleq	r1, r8, lr
   16e7c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   16e80:	andeq	r7, r1, r8, ror lr
   16e84:	andeq	r7, r1, r0, ror #28
   16e88:	strheq	r6, [r0], -ip
   16e8c:	andeq	r7, r1, r0, asr #28
   16e90:	andeq	r7, r1, r8, lsr #28
   16e94:	muleq	r0, r4, r0
   16e98:	andeq	r7, r1, r8, lsl #28
   16e9c:	strdeq	r7, [r1], -r0
   16ea0:	andeq	r5, r0, r0, lsl #29
   16ea4:	andeq	r7, r1, ip, asr #27
   16ea8:			; <UNDEFINED> instruction: 0x00017db4
   16eac:	push	{fp, lr}
   16eb0:	add	fp, sp, #4
   16eb4:	ldr	r3, [pc, #12]	; 16ec8 <main@@Base+0xe7c>
   16eb8:	add	r3, pc, r3
   16ebc:	mov	r0, r3
   16ec0:	bl	1c3c4 <__gcov_sort_n_vals@@Base+0x458>
   16ec4:	pop	{fp, pc}
   16ec8:	andeq	r7, r1, r8, lsl #8

00016ecc <init_token_int_type@@Base>:
   16ecc:	push	{fp}		; (str fp, [sp, #-4]!)
   16ed0:	add	fp, sp, #0
   16ed4:	sub	sp, sp, #12
   16ed8:	str	r0, [fp, #-8]
   16edc:	ldr	r3, [pc, #52]	; 16f18 <init_token_int_type@@Base+0x4c>
   16ee0:	add	r3, pc, r3
   16ee4:	ldrd	r2, [r3]
   16ee8:	adds	r2, r2, #1
   16eec:	adc	r3, r3, #0
   16ef0:	ldr	r1, [pc, #36]	; 16f1c <init_token_int_type@@Base+0x50>
   16ef4:	add	r1, pc, r1
   16ef8:	strd	r2, [r1]
   16efc:	ldr	r3, [fp, #-8]
   16f00:	mov	r2, #0
   16f04:	str	r2, [r3]
   16f08:	nop			; (mov r0, r0)
   16f0c:	add	sp, fp, #0
   16f10:	pop	{fp}		; (ldr fp, [sp], #4)
   16f14:	bx	lr
   16f18:	andeq	r8, r1, r0, asr #6
   16f1c:	andeq	r8, r1, ip, lsr #6

00016f20 <init_token_int_value@@Base>:
   16f20:	push	{fp}		; (str fp, [sp, #-4]!)
   16f24:	add	fp, sp, #0
   16f28:	sub	sp, sp, #12
   16f2c:	str	r0, [fp, #-8]
   16f30:	str	r1, [fp, #-12]
   16f34:	ldr	r3, [pc, #64]	; 16f7c <init_token_int_value@@Base+0x5c>
   16f38:	add	r3, pc, r3
   16f3c:	ldrd	r2, [r3]
   16f40:	adds	r2, r2, #1
   16f44:	adc	r3, r3, #0
   16f48:	ldr	r1, [pc, #48]	; 16f80 <init_token_int_value@@Base+0x60>
   16f4c:	add	r1, pc, r1
   16f50:	strd	r2, [r1]
   16f54:	ldr	r3, [fp, #-8]
   16f58:	mov	r2, #1
   16f5c:	str	r2, [r3]
   16f60:	ldr	r3, [fp, #-8]
   16f64:	ldr	r2, [fp, #-12]
   16f68:	str	r2, [r3, #4]
   16f6c:	nop			; (mov r0, r0)
   16f70:	add	sp, fp, #0
   16f74:	pop	{fp}		; (ldr fp, [sp], #4)
   16f78:	bx	lr
   16f7c:	andeq	r8, r1, r0, ror #5
   16f80:	andeq	r8, r1, ip, asr #5

00016f84 <init_token_function@@Base>:
   16f84:	push	{fp}		; (str fp, [sp, #-4]!)
   16f88:	add	fp, sp, #0
   16f8c:	sub	sp, sp, #12
   16f90:	str	r0, [fp, #-8]
   16f94:	str	r1, [fp, #-12]
   16f98:	ldr	r3, [pc, #64]	; 16fe0 <init_token_function@@Base+0x5c>
   16f9c:	add	r3, pc, r3
   16fa0:	ldrd	r2, [r3]
   16fa4:	adds	r2, r2, #1
   16fa8:	adc	r3, r3, #0
   16fac:	ldr	r1, [pc, #48]	; 16fe4 <init_token_function@@Base+0x60>
   16fb0:	add	r1, pc, r1
   16fb4:	strd	r2, [r1]
   16fb8:	ldr	r3, [fp, #-8]
   16fbc:	mov	r2, #2
   16fc0:	str	r2, [r3]
   16fc4:	ldr	r3, [fp, #-8]
   16fc8:	ldr	r2, [fp, #-12]
   16fcc:	str	r2, [r3, #4]
   16fd0:	nop			; (mov r0, r0)
   16fd4:	add	sp, fp, #0
   16fd8:	pop	{fp}		; (ldr fp, [sp], #4)
   16fdc:	bx	lr
   16fe0:	andeq	r8, r1, r4, ror r2
   16fe4:	andeq	r8, r1, r0, ror #4

00016fe8 <init_token_opar@@Base>:
   16fe8:	push	{fp}		; (str fp, [sp, #-4]!)
   16fec:	add	fp, sp, #0
   16ff0:	sub	sp, sp, #12
   16ff4:	str	r0, [fp, #-8]
   16ff8:	ldr	r3, [pc, #52]	; 17034 <init_token_opar@@Base+0x4c>
   16ffc:	add	r3, pc, r3
   17000:	ldrd	r2, [r3]
   17004:	adds	r2, r2, #1
   17008:	adc	r3, r3, #0
   1700c:	ldr	r1, [pc, #36]	; 17038 <init_token_opar@@Base+0x50>
   17010:	add	r1, pc, r1
   17014:	strd	r2, [r1]
   17018:	ldr	r3, [fp, #-8]
   1701c:	mov	r2, #3
   17020:	str	r2, [r3]
   17024:	nop			; (mov r0, r0)
   17028:	add	sp, fp, #0
   1702c:	pop	{fp}		; (ldr fp, [sp], #4)
   17030:	bx	lr
   17034:	andeq	r8, r1, ip, lsl #4
   17038:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001703c <init_token_cpar@@Base>:
   1703c:	push	{fp}		; (str fp, [sp, #-4]!)
   17040:	add	fp, sp, #0
   17044:	sub	sp, sp, #12
   17048:	str	r0, [fp, #-8]
   1704c:	ldr	r3, [pc, #52]	; 17088 <init_token_cpar@@Base+0x4c>
   17050:	add	r3, pc, r3
   17054:	ldrd	r2, [r3]
   17058:	adds	r2, r2, #1
   1705c:	adc	r3, r3, #0
   17060:	ldr	r1, [pc, #36]	; 1708c <init_token_cpar@@Base+0x50>
   17064:	add	r1, pc, r1
   17068:	strd	r2, [r1]
   1706c:	ldr	r3, [fp, #-8]
   17070:	mov	r2, #4
   17074:	str	r2, [r3]
   17078:	nop			; (mov r0, r0)
   1707c:	add	sp, fp, #0
   17080:	pop	{fp}		; (ldr fp, [sp], #4)
   17084:	bx	lr
   17088:			; <UNDEFINED> instruction: 0x000181b0
   1708c:	muleq	r1, ip, r1

00017090 <init_token_obra@@Base>:
   17090:	push	{fp}		; (str fp, [sp, #-4]!)
   17094:	add	fp, sp, #0
   17098:	sub	sp, sp, #12
   1709c:	str	r0, [fp, #-8]
   170a0:	ldr	r3, [pc, #52]	; 170dc <init_token_obra@@Base+0x4c>
   170a4:	add	r3, pc, r3
   170a8:	ldrd	r2, [r3]
   170ac:	adds	r2, r2, #1
   170b0:	adc	r3, r3, #0
   170b4:	ldr	r1, [pc, #36]	; 170e0 <init_token_obra@@Base+0x50>
   170b8:	add	r1, pc, r1
   170bc:	strd	r2, [r1]
   170c0:	ldr	r3, [fp, #-8]
   170c4:	mov	r2, #5
   170c8:	str	r2, [r3]
   170cc:	nop			; (mov r0, r0)
   170d0:	add	sp, fp, #0
   170d4:	pop	{fp}		; (ldr fp, [sp], #4)
   170d8:	bx	lr
   170dc:	andeq	r8, r1, r4, asr r1
   170e0:	andeq	r8, r1, r0, asr #2

000170e4 <init_token_cbra@@Base>:
   170e4:	push	{fp}		; (str fp, [sp, #-4]!)
   170e8:	add	fp, sp, #0
   170ec:	sub	sp, sp, #12
   170f0:	str	r0, [fp, #-8]
   170f4:	ldr	r3, [pc, #52]	; 17130 <init_token_cbra@@Base+0x4c>
   170f8:	add	r3, pc, r3
   170fc:	ldrd	r2, [r3]
   17100:	adds	r2, r2, #1
   17104:	adc	r3, r3, #0
   17108:	ldr	r1, [pc, #36]	; 17134 <init_token_cbra@@Base+0x50>
   1710c:	add	r1, pc, r1
   17110:	strd	r2, [r1]
   17114:	ldr	r3, [fp, #-8]
   17118:	mov	r2, #6
   1711c:	str	r2, [r3]
   17120:	nop			; (mov r0, r0)
   17124:	add	sp, fp, #0
   17128:	pop	{fp}		; (ldr fp, [sp], #4)
   1712c:	bx	lr
   17130:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17134:	andeq	r8, r1, r4, ror #1

00017138 <init_token_return@@Base>:
   17138:	push	{fp}		; (str fp, [sp, #-4]!)
   1713c:	add	fp, sp, #0
   17140:	sub	sp, sp, #12
   17144:	str	r0, [fp, #-8]
   17148:	ldr	r3, [pc, #52]	; 17184 <init_token_return@@Base+0x4c>
   1714c:	add	r3, pc, r3
   17150:	ldrd	r2, [r3]
   17154:	adds	r2, r2, #1
   17158:	adc	r3, r3, #0
   1715c:	ldr	r1, [pc, #36]	; 17188 <init_token_return@@Base+0x50>
   17160:	add	r1, pc, r1
   17164:	strd	r2, [r1]
   17168:	ldr	r3, [fp, #-8]
   1716c:	mov	r2, #7
   17170:	str	r2, [r3]
   17174:	nop			; (mov r0, r0)
   17178:	add	sp, fp, #0
   1717c:	pop	{fp}		; (ldr fp, [sp], #4)
   17180:	bx	lr
   17184:	muleq	r1, ip, r0
   17188:	andeq	r8, r1, r8, lsl #1

0001718c <init_token_semicolon@@Base>:
   1718c:	push	{fp}		; (str fp, [sp, #-4]!)
   17190:	add	fp, sp, #0
   17194:	sub	sp, sp, #12
   17198:	str	r0, [fp, #-8]
   1719c:	ldr	r3, [pc, #52]	; 171d8 <init_token_semicolon@@Base+0x4c>
   171a0:	add	r3, pc, r3
   171a4:	ldrd	r2, [r3]
   171a8:	adds	r2, r2, #1
   171ac:	adc	r3, r3, #0
   171b0:	ldr	r1, [pc, #36]	; 171dc <init_token_semicolon@@Base+0x50>
   171b4:	add	r1, pc, r1
   171b8:	strd	r2, [r1]
   171bc:	ldr	r3, [fp, #-8]
   171c0:	mov	r2, #8
   171c4:	str	r2, [r3]
   171c8:	nop			; (mov r0, r0)
   171cc:	add	sp, fp, #0
   171d0:	pop	{fp}		; (ldr fp, [sp], #4)
   171d4:	bx	lr
   171d8:	andeq	r8, r1, r0, asr #32
   171dc:	andeq	r8, r1, ip, lsr #32

000171e0 <init_token_eof@@Base>:
   171e0:	push	{fp}		; (str fp, [sp, #-4]!)
   171e4:	add	fp, sp, #0
   171e8:	sub	sp, sp, #12
   171ec:	str	r0, [fp, #-8]
   171f0:	ldr	r3, [pc, #52]	; 1722c <init_token_eof@@Base+0x4c>
   171f4:	add	r3, pc, r3
   171f8:	ldrd	r2, [r3]
   171fc:	adds	r2, r2, #1
   17200:	adc	r3, r3, #0
   17204:	ldr	r1, [pc, #36]	; 17230 <init_token_eof@@Base+0x50>
   17208:	add	r1, pc, r1
   1720c:	strd	r2, [r1]
   17210:	ldr	r3, [fp, #-8]
   17214:	mov	r2, #9
   17218:	str	r2, [r3]
   1721c:	nop			; (mov r0, r0)
   17220:	add	sp, fp, #0
   17224:	pop	{fp}		; (ldr fp, [sp], #4)
   17228:	bx	lr
   1722c:	andeq	r7, r1, r4, ror #31
   17230:	ldrdeq	r7, [r1], -r0

00017234 <init_token_if@@Base>:
   17234:	push	{fp}		; (str fp, [sp, #-4]!)
   17238:	add	fp, sp, #0
   1723c:	sub	sp, sp, #12
   17240:	str	r0, [fp, #-8]
   17244:	ldr	r3, [pc, #52]	; 17280 <init_token_if@@Base+0x4c>
   17248:	add	r3, pc, r3
   1724c:	ldrd	r2, [r3]
   17250:	adds	r2, r2, #1
   17254:	adc	r3, r3, #0
   17258:	ldr	r1, [pc, #36]	; 17284 <init_token_if@@Base+0x50>
   1725c:	add	r1, pc, r1
   17260:	strd	r2, [r1]
   17264:	ldr	r3, [fp, #-8]
   17268:	mov	r2, #10
   1726c:	str	r2, [r3]
   17270:	nop			; (mov r0, r0)
   17274:	add	sp, fp, #0
   17278:	pop	{fp}		; (ldr fp, [sp], #4)
   1727c:	bx	lr
   17280:	andeq	r7, r1, r8, lsl #31
   17284:	andeq	r7, r1, r4, ror pc

00017288 <init_token_else@@Base>:
   17288:	push	{fp}		; (str fp, [sp, #-4]!)
   1728c:	add	fp, sp, #0
   17290:	sub	sp, sp, #12
   17294:	str	r0, [fp, #-8]
   17298:	ldr	r3, [pc, #52]	; 172d4 <init_token_else@@Base+0x4c>
   1729c:	add	r3, pc, r3
   172a0:	ldrd	r2, [r3]
   172a4:	adds	r2, r2, #1
   172a8:	adc	r3, r3, #0
   172ac:	ldr	r1, [pc, #36]	; 172d8 <init_token_else@@Base+0x50>
   172b0:	add	r1, pc, r1
   172b4:	strd	r2, [r1]
   172b8:	ldr	r3, [fp, #-8]
   172bc:	mov	r2, #11
   172c0:	str	r2, [r3]
   172c4:	nop			; (mov r0, r0)
   172c8:	add	sp, fp, #0
   172cc:	pop	{fp}		; (ldr fp, [sp], #4)
   172d0:	bx	lr
   172d4:	andeq	r7, r1, ip, lsr #30
   172d8:	andeq	r7, r1, r8, lsl pc

000172dc <init_token_boolean_op@@Base>:
   172dc:	push	{fp}		; (str fp, [sp, #-4]!)
   172e0:	add	fp, sp, #0
   172e4:	sub	sp, sp, #12
   172e8:	str	r0, [fp, #-8]
   172ec:	str	r1, [fp, #-12]
   172f0:	ldr	r3, [pc, #64]	; 17338 <init_token_boolean_op@@Base+0x5c>
   172f4:	add	r3, pc, r3
   172f8:	ldrd	r2, [r3]
   172fc:	adds	r2, r2, #1
   17300:	adc	r3, r3, #0
   17304:	ldr	r1, [pc, #48]	; 1733c <init_token_boolean_op@@Base+0x60>
   17308:	add	r1, pc, r1
   1730c:	strd	r2, [r1]
   17310:	ldr	r3, [fp, #-8]
   17314:	mov	r2, #12
   17318:	str	r2, [r3]
   1731c:	ldr	r3, [fp, #-8]
   17320:	ldr	r2, [fp, #-12]
   17324:	str	r2, [r3, #4]
   17328:	nop			; (mov r0, r0)
   1732c:	add	sp, fp, #0
   17330:	pop	{fp}		; (ldr fp, [sp], #4)
   17334:	bx	lr
   17338:	andeq	r7, r1, ip, asr #29
   1733c:			; <UNDEFINED> instruction: 0x00017eb8

00017340 <free_token_int_type@@Base>:
   17340:	push	{fp, lr}
   17344:	add	fp, sp, #4
   17348:	sub	sp, sp, #8
   1734c:	str	r0, [fp, #-8]
   17350:	ldr	r3, [pc, #44]	; 17384 <free_token_int_type@@Base+0x44>
   17354:	add	r3, pc, r3
   17358:	ldrd	r2, [r3]
   1735c:	adds	r2, r2, #1
   17360:	adc	r3, r3, #0
   17364:	ldr	r1, [pc, #28]	; 17388 <free_token_int_type@@Base+0x48>
   17368:	add	r1, pc, r1
   1736c:	strd	r2, [r1]
   17370:	ldr	r0, [fp, #-8]
   17374:	bl	11870 <free@plt>
   17378:	nop			; (mov r0, r0)
   1737c:	sub	sp, fp, #4
   17380:	pop	{fp, pc}
   17384:	andeq	r7, r1, r4, ror #28
   17388:	andeq	r7, r1, r0, asr lr

0001738c <free_token_int_value@@Base>:
   1738c:	push	{fp, lr}
   17390:	add	fp, sp, #4
   17394:	sub	sp, sp, #8
   17398:	str	r0, [fp, #-8]
   1739c:	ldr	r3, [pc, #44]	; 173d0 <free_token_int_value@@Base+0x44>
   173a0:	add	r3, pc, r3
   173a4:	ldrd	r2, [r3]
   173a8:	adds	r2, r2, #1
   173ac:	adc	r3, r3, #0
   173b0:	ldr	r1, [pc, #28]	; 173d4 <free_token_int_value@@Base+0x48>
   173b4:	add	r1, pc, r1
   173b8:	strd	r2, [r1]
   173bc:	ldr	r0, [fp, #-8]
   173c0:	bl	11870 <free@plt>
   173c4:	nop			; (mov r0, r0)
   173c8:	sub	sp, fp, #4
   173cc:	pop	{fp, pc}
   173d0:	andeq	r7, r1, r0, lsl lr
   173d4:	strdeq	r7, [r1], -ip

000173d8 <free_token_function@@Base>:
   173d8:	push	{fp, lr}
   173dc:	add	fp, sp, #4
   173e0:	sub	sp, sp, #8
   173e4:	str	r0, [fp, #-8]
   173e8:	ldr	r3, [pc, #44]	; 1741c <free_token_function@@Base+0x44>
   173ec:	add	r3, pc, r3
   173f0:	ldrd	r2, [r3]
   173f4:	adds	r2, r2, #1
   173f8:	adc	r3, r3, #0
   173fc:	ldr	r1, [pc, #28]	; 17420 <free_token_function@@Base+0x48>
   17400:	add	r1, pc, r1
   17404:	strd	r2, [r1]
   17408:	ldr	r0, [fp, #-8]
   1740c:	bl	11870 <free@plt>
   17410:	nop			; (mov r0, r0)
   17414:	sub	sp, fp, #4
   17418:	pop	{fp, pc}
   1741c:			; <UNDEFINED> instruction: 0x00017dbc
   17420:	andeq	r7, r1, r8, lsr #27

00017424 <free_token_opar@@Base>:
   17424:	push	{fp, lr}
   17428:	add	fp, sp, #4
   1742c:	sub	sp, sp, #8
   17430:	str	r0, [fp, #-8]
   17434:	ldr	r3, [pc, #44]	; 17468 <free_token_opar@@Base+0x44>
   17438:	add	r3, pc, r3
   1743c:	ldrd	r2, [r3]
   17440:	adds	r2, r2, #1
   17444:	adc	r3, r3, #0
   17448:	ldr	r1, [pc, #28]	; 1746c <free_token_opar@@Base+0x48>
   1744c:	add	r1, pc, r1
   17450:	strd	r2, [r1]
   17454:	ldr	r0, [fp, #-8]
   17458:	bl	11870 <free@plt>
   1745c:	nop			; (mov r0, r0)
   17460:	sub	sp, fp, #4
   17464:	pop	{fp, pc}
   17468:	andeq	r7, r1, r8, ror #26
   1746c:	andeq	r7, r1, r4, asr sp

00017470 <free_token_cpar@@Base>:
   17470:	push	{fp, lr}
   17474:	add	fp, sp, #4
   17478:	sub	sp, sp, #8
   1747c:	str	r0, [fp, #-8]
   17480:	ldr	r3, [pc, #44]	; 174b4 <free_token_cpar@@Base+0x44>
   17484:	add	r3, pc, r3
   17488:	ldrd	r2, [r3]
   1748c:	adds	r2, r2, #1
   17490:	adc	r3, r3, #0
   17494:	ldr	r1, [pc, #28]	; 174b8 <free_token_cpar@@Base+0x48>
   17498:	add	r1, pc, r1
   1749c:	strd	r2, [r1]
   174a0:	ldr	r0, [fp, #-8]
   174a4:	bl	11870 <free@plt>
   174a8:	nop			; (mov r0, r0)
   174ac:	sub	sp, fp, #4
   174b0:	pop	{fp, pc}
   174b4:	andeq	r7, r1, r4, lsl sp
   174b8:	andeq	r7, r1, r0, lsl #26

000174bc <free_token_obra@@Base>:
   174bc:	push	{fp, lr}
   174c0:	add	fp, sp, #4
   174c4:	sub	sp, sp, #8
   174c8:	str	r0, [fp, #-8]
   174cc:	ldr	r3, [pc, #44]	; 17500 <free_token_obra@@Base+0x44>
   174d0:	add	r3, pc, r3
   174d4:	ldrd	r2, [r3]
   174d8:	adds	r2, r2, #1
   174dc:	adc	r3, r3, #0
   174e0:	ldr	r1, [pc, #28]	; 17504 <free_token_obra@@Base+0x48>
   174e4:	add	r1, pc, r1
   174e8:	strd	r2, [r1]
   174ec:	ldr	r0, [fp, #-8]
   174f0:	bl	11870 <free@plt>
   174f4:	nop			; (mov r0, r0)
   174f8:	sub	sp, fp, #4
   174fc:	pop	{fp, pc}
   17500:	andeq	r7, r1, r0, asr #25
   17504:	andeq	r7, r1, ip, lsr #25

00017508 <free_token_cbra@@Base>:
   17508:	push	{fp, lr}
   1750c:	add	fp, sp, #4
   17510:	sub	sp, sp, #8
   17514:	str	r0, [fp, #-8]
   17518:	ldr	r3, [pc, #44]	; 1754c <free_token_cbra@@Base+0x44>
   1751c:	add	r3, pc, r3
   17520:	ldrd	r2, [r3]
   17524:	adds	r2, r2, #1
   17528:	adc	r3, r3, #0
   1752c:	ldr	r1, [pc, #28]	; 17550 <free_token_cbra@@Base+0x48>
   17530:	add	r1, pc, r1
   17534:	strd	r2, [r1]
   17538:	ldr	r0, [fp, #-8]
   1753c:	bl	11870 <free@plt>
   17540:	nop			; (mov r0, r0)
   17544:	sub	sp, fp, #4
   17548:	pop	{fp, pc}
   1754c:	andeq	r7, r1, ip, ror #24
   17550:	andeq	r7, r1, r8, asr ip

00017554 <free_token_return@@Base>:
   17554:	push	{fp, lr}
   17558:	add	fp, sp, #4
   1755c:	sub	sp, sp, #8
   17560:	str	r0, [fp, #-8]
   17564:	ldr	r3, [pc, #44]	; 17598 <free_token_return@@Base+0x44>
   17568:	add	r3, pc, r3
   1756c:	ldrd	r2, [r3]
   17570:	adds	r2, r2, #1
   17574:	adc	r3, r3, #0
   17578:	ldr	r1, [pc, #28]	; 1759c <free_token_return@@Base+0x48>
   1757c:	add	r1, pc, r1
   17580:	strd	r2, [r1]
   17584:	ldr	r0, [fp, #-8]
   17588:	bl	11870 <free@plt>
   1758c:	nop			; (mov r0, r0)
   17590:	sub	sp, fp, #4
   17594:	pop	{fp, pc}
   17598:	andeq	r7, r1, r8, lsl ip
   1759c:	andeq	r7, r1, r4, lsl #24

000175a0 <free_token_semicolon@@Base>:
   175a0:	push	{fp, lr}
   175a4:	add	fp, sp, #4
   175a8:	sub	sp, sp, #8
   175ac:	str	r0, [fp, #-8]
   175b0:	ldr	r3, [pc, #44]	; 175e4 <free_token_semicolon@@Base+0x44>
   175b4:	add	r3, pc, r3
   175b8:	ldrd	r2, [r3]
   175bc:	adds	r2, r2, #1
   175c0:	adc	r3, r3, #0
   175c4:	ldr	r1, [pc, #28]	; 175e8 <free_token_semicolon@@Base+0x48>
   175c8:	add	r1, pc, r1
   175cc:	strd	r2, [r1]
   175d0:	ldr	r0, [fp, #-8]
   175d4:	bl	11870 <free@plt>
   175d8:	nop			; (mov r0, r0)
   175dc:	sub	sp, fp, #4
   175e0:	pop	{fp, pc}
   175e4:	andeq	r7, r1, r4, asr #23
   175e8:			; <UNDEFINED> instruction: 0x00017bb0

000175ec <free_token_eof@@Base>:
   175ec:	push	{fp, lr}
   175f0:	add	fp, sp, #4
   175f4:	sub	sp, sp, #8
   175f8:	str	r0, [fp, #-8]
   175fc:	ldr	r3, [pc, #44]	; 17630 <free_token_eof@@Base+0x44>
   17600:	add	r3, pc, r3
   17604:	ldrd	r2, [r3]
   17608:	adds	r2, r2, #1
   1760c:	adc	r3, r3, #0
   17610:	ldr	r1, [pc, #28]	; 17634 <free_token_eof@@Base+0x48>
   17614:	add	r1, pc, r1
   17618:	strd	r2, [r1]
   1761c:	ldr	r0, [fp, #-8]
   17620:	bl	11870 <free@plt>
   17624:	nop			; (mov r0, r0)
   17628:	sub	sp, fp, #4
   1762c:	pop	{fp, pc}
   17630:	andeq	r7, r1, r0, ror fp
   17634:	andeq	r7, r1, ip, asr fp

00017638 <free_token_if@@Base>:
   17638:	push	{fp, lr}
   1763c:	add	fp, sp, #4
   17640:	sub	sp, sp, #8
   17644:	str	r0, [fp, #-8]
   17648:	ldr	r3, [pc, #44]	; 1767c <free_token_if@@Base+0x44>
   1764c:	add	r3, pc, r3
   17650:	ldrd	r2, [r3]
   17654:	adds	r2, r2, #1
   17658:	adc	r3, r3, #0
   1765c:	ldr	r1, [pc, #28]	; 17680 <free_token_if@@Base+0x48>
   17660:	add	r1, pc, r1
   17664:	strd	r2, [r1]
   17668:	ldr	r0, [fp, #-8]
   1766c:	bl	11870 <free@plt>
   17670:	nop			; (mov r0, r0)
   17674:	sub	sp, fp, #4
   17678:	pop	{fp, pc}
   1767c:	andeq	r7, r1, ip, lsl fp
   17680:	andeq	r7, r1, r8, lsl #22

00017684 <free_token_else@@Base>:
   17684:	push	{fp, lr}
   17688:	add	fp, sp, #4
   1768c:	sub	sp, sp, #8
   17690:	str	r0, [fp, #-8]
   17694:	ldr	r3, [pc, #44]	; 176c8 <free_token_else@@Base+0x44>
   17698:	add	r3, pc, r3
   1769c:	ldrd	r2, [r3]
   176a0:	adds	r2, r2, #1
   176a4:	adc	r3, r3, #0
   176a8:	ldr	r1, [pc, #28]	; 176cc <free_token_else@@Base+0x48>
   176ac:	add	r1, pc, r1
   176b0:	strd	r2, [r1]
   176b4:	ldr	r0, [fp, #-8]
   176b8:	bl	11870 <free@plt>
   176bc:	nop			; (mov r0, r0)
   176c0:	sub	sp, fp, #4
   176c4:	pop	{fp, pc}
   176c8:	andeq	r7, r1, r8, asr #21
   176cc:			; <UNDEFINED> instruction: 0x00017ab4

000176d0 <free_token_boolean_op@@Base>:
   176d0:	push	{fp, lr}
   176d4:	add	fp, sp, #4
   176d8:	sub	sp, sp, #8
   176dc:	str	r0, [fp, #-8]
   176e0:	ldr	r3, [pc, #108]	; 17754 <free_token_boolean_op@@Base+0x84>
   176e4:	add	r3, pc, r3
   176e8:	ldrd	r2, [r3]
   176ec:	adds	r2, r2, #1
   176f0:	adc	r3, r3, #0
   176f4:	ldr	r1, [pc, #92]	; 17758 <free_token_boolean_op@@Base+0x88>
   176f8:	add	r1, pc, r1
   176fc:	strd	r2, [r1]
   17700:	ldr	r3, [fp, #-8]
   17704:	ldr	r3, [r3, #4]
   17708:	cmp	r3, #0
   1770c:	beq	17740 <free_token_boolean_op@@Base+0x70>
   17710:	ldr	r3, [fp, #-8]
   17714:	ldr	r3, [r3, #4]
   17718:	mov	r0, r3
   1771c:	bl	11870 <free@plt>
   17720:	ldr	r3, [pc, #52]	; 1775c <free_token_boolean_op@@Base+0x8c>
   17724:	add	r3, pc, r3
   17728:	ldrd	r2, [r3, #8]
   1772c:	adds	r2, r2, #1
   17730:	adc	r3, r3, #0
   17734:	ldr	r1, [pc, #36]	; 17760 <free_token_boolean_op@@Base+0x90>
   17738:	add	r1, pc, r1
   1773c:	strd	r2, [r1, #8]
   17740:	ldr	r0, [fp, #-8]
   17744:	bl	11870 <free@plt>
   17748:	nop			; (mov r0, r0)
   1774c:	sub	sp, fp, #4
   17750:	pop	{fp, pc}
   17754:	andeq	r7, r1, ip, ror #20
   17758:	andeq	r7, r1, r8, asr sl
   1775c:	andeq	r7, r1, ip, lsr #20
   17760:	andeq	r7, r1, r8, lsl sl
   17764:	push	{fp, lr}
   17768:	add	fp, sp, #4
   1776c:	ldr	r3, [pc, #12]	; 17780 <free_token_boolean_op@@Base+0xb0>
   17770:	add	r3, pc, r3
   17774:	mov	r0, r3
   17778:	bl	1c3c4 <__gcov_sort_n_vals@@Base+0x458>
   1777c:	pop	{fp, pc}
   17780:	andeq	r6, r1, r8, ror #28

00017784 <init_ast_base@@Base>:
   17784:	push	{fp}		; (str fp, [sp, #-4]!)
   17788:	add	fp, sp, #0
   1778c:	sub	sp, sp, #20
   17790:	str	r0, [fp, #-8]
   17794:	str	r1, [fp, #-12]
   17798:	str	r2, [fp, #-16]
   1779c:	ldr	r3, [pc, #64]	; 177e4 <init_ast_base@@Base+0x60>
   177a0:	add	r3, pc, r3
   177a4:	ldrd	r2, [r3]
   177a8:	adds	r2, r2, #1
   177ac:	adc	r3, r3, #0
   177b0:	ldr	r1, [pc, #48]	; 177e8 <init_ast_base@@Base+0x64>
   177b4:	add	r1, pc, r1
   177b8:	strd	r2, [r1]
   177bc:	ldr	r3, [fp, #-8]
   177c0:	ldr	r2, [fp, #-12]
   177c4:	str	r2, [r3]
   177c8:	ldr	r3, [fp, #-8]
   177cc:	ldr	r2, [fp, #-16]
   177d0:	str	r2, [r3, #4]
   177d4:	nop			; (mov r0, r0)
   177d8:	add	sp, fp, #0
   177dc:	pop	{fp}		; (ldr fp, [sp], #4)
   177e0:	bx	lr
   177e4:	muleq	r1, r0, ip
   177e8:	andeq	r7, r1, ip, ror ip

000177ec <init_ast_base_single@@Base>:
   177ec:	push	{fp, lr}
   177f0:	add	fp, sp, #4
   177f4:	sub	sp, sp, #8
   177f8:	str	r0, [fp, #-8]
   177fc:	str	r1, [fp, #-12]
   17800:	ldr	r3, [pc, #84]	; 1785c <init_ast_base_single@@Base+0x70>
   17804:	add	r3, pc, r3
   17808:	ldrd	r2, [r3]
   1780c:	adds	r2, r2, #1
   17810:	adc	r3, r3, #0
   17814:	ldr	r1, [pc, #68]	; 17860 <init_ast_base_single@@Base+0x74>
   17818:	add	r1, pc, r1
   1781c:	strd	r2, [r1]
   17820:	mov	r2, #0
   17824:	ldr	r1, [fp, #-12]
   17828:	ldr	r0, [fp, #-8]
   1782c:	bl	17784 <init_ast_base@@Base>
   17830:	ldr	r3, [pc, #44]	; 17864 <init_ast_base_single@@Base+0x78>
   17834:	add	r3, pc, r3
   17838:	ldrd	r2, [r3, #8]
   1783c:	adds	r2, r2, #1
   17840:	adc	r3, r3, #0
   17844:	ldr	r1, [pc, #28]	; 17868 <init_ast_base_single@@Base+0x7c>
   17848:	add	r1, pc, r1
   1784c:	strd	r2, [r1, #8]
   17850:	nop			; (mov r0, r0)
   17854:	sub	sp, fp, #4
   17858:	pop	{fp, pc}
   1785c:	andeq	r7, r1, ip, lsl ip
   17860:	andeq	r7, r1, r8, lsl #24
   17864:	andeq	r7, r1, ip, ror #23
   17868:	ldrdeq	r7, [r1], -r8

0001786c <init_node_id@@Base>:
   1786c:	push	{fp, lr}
   17870:	add	fp, sp, #4
   17874:	sub	sp, sp, #8
   17878:	str	r0, [fp, #-8]
   1787c:	str	r1, [fp, #-12]
   17880:	ldr	r3, [pc, #96]	; 178e8 <init_node_id@@Base+0x7c>
   17884:	add	r3, pc, r3
   17888:	ldrd	r2, [r3]
   1788c:	adds	r2, r2, #1
   17890:	adc	r3, r3, #0
   17894:	ldr	r1, [pc, #80]	; 178ec <init_node_id@@Base+0x80>
   17898:	add	r1, pc, r1
   1789c:	strd	r2, [r1]
   178a0:	ldr	r3, [fp, #-8]
   178a4:	mov	r1, #0
   178a8:	mov	r0, r3
   178ac:	bl	177ec <init_ast_base_single@@Base>
   178b0:	ldr	r3, [pc, #56]	; 178f0 <init_node_id@@Base+0x84>
   178b4:	add	r3, pc, r3
   178b8:	ldrd	r2, [r3, #8]
   178bc:	adds	r2, r2, #1
   178c0:	adc	r3, r3, #0
   178c4:	ldr	r1, [pc, #40]	; 178f4 <init_node_id@@Base+0x88>
   178c8:	add	r1, pc, r1
   178cc:	strd	r2, [r1, #8]
   178d0:	ldr	r3, [fp, #-8]
   178d4:	ldr	r2, [fp, #-12]
   178d8:	str	r2, [r3, #8]
   178dc:	nop			; (mov r0, r0)
   178e0:	sub	sp, fp, #4
   178e4:	pop	{fp, pc}
   178e8:	andeq	r7, r1, ip, lsl #23
   178ec:	andeq	r7, r1, r8, ror fp
   178f0:	andeq	r7, r1, ip, asr fp
   178f4:	andeq	r7, r1, r8, asr #22

000178f8 <init_node_int@@Base>:
   178f8:	push	{fp, lr}
   178fc:	add	fp, sp, #4
   17900:	sub	sp, sp, #8
   17904:	str	r0, [fp, #-8]
   17908:	str	r1, [fp, #-12]
   1790c:	ldr	r3, [pc, #96]	; 17974 <init_node_int@@Base+0x7c>
   17910:	add	r3, pc, r3
   17914:	ldrd	r2, [r3]
   17918:	adds	r2, r2, #1
   1791c:	adc	r3, r3, #0
   17920:	ldr	r1, [pc, #80]	; 17978 <init_node_int@@Base+0x80>
   17924:	add	r1, pc, r1
   17928:	strd	r2, [r1]
   1792c:	ldr	r3, [fp, #-8]
   17930:	mov	r1, #1
   17934:	mov	r0, r3
   17938:	bl	177ec <init_ast_base_single@@Base>
   1793c:	ldr	r3, [pc, #56]	; 1797c <init_node_int@@Base+0x84>
   17940:	add	r3, pc, r3
   17944:	ldrd	r2, [r3, #8]
   17948:	adds	r2, r2, #1
   1794c:	adc	r3, r3, #0
   17950:	ldr	r1, [pc, #40]	; 17980 <init_node_int@@Base+0x88>
   17954:	add	r1, pc, r1
   17958:	strd	r2, [r1, #8]
   1795c:	ldr	r3, [fp, #-8]
   17960:	ldr	r2, [fp, #-12]
   17964:	str	r2, [r3, #8]
   17968:	nop			; (mov r0, r0)
   1796c:	sub	sp, fp, #4
   17970:	pop	{fp, pc}
   17974:	strdeq	r7, [r1], -r0
   17978:	ldrdeq	r7, [r1], -ip
   1797c:	andeq	r7, r1, r0, asr #21
   17980:	andeq	r7, r1, ip, lsr #21

00017984 <init_node_function@@Base>:
   17984:	push	{fp, lr}
   17988:	add	fp, sp, #4
   1798c:	sub	sp, sp, #16
   17990:	str	r0, [fp, #-8]
   17994:	str	r1, [fp, #-12]
   17998:	str	r2, [fp, #-16]
   1799c:	ldr	r3, [pc, #108]	; 17a10 <init_node_function@@Base+0x8c>
   179a0:	add	r3, pc, r3
   179a4:	ldrd	r2, [r3]
   179a8:	adds	r2, r2, #1
   179ac:	adc	r3, r3, #0
   179b0:	ldr	r1, [pc, #92]	; 17a14 <init_node_function@@Base+0x90>
   179b4:	add	r1, pc, r1
   179b8:	strd	r2, [r1]
   179bc:	ldr	r3, [fp, #-8]
   179c0:	mov	r1, #2
   179c4:	mov	r0, r3
   179c8:	bl	177ec <init_ast_base_single@@Base>
   179cc:	ldr	r3, [pc, #68]	; 17a18 <init_node_function@@Base+0x94>
   179d0:	add	r3, pc, r3
   179d4:	ldrd	r2, [r3, #8]
   179d8:	adds	r2, r2, #1
   179dc:	adc	r3, r3, #0
   179e0:	ldr	r1, [pc, #52]	; 17a1c <init_node_function@@Base+0x98>
   179e4:	add	r1, pc, r1
   179e8:	strd	r2, [r1, #8]
   179ec:	ldr	r3, [fp, #-8]
   179f0:	ldr	r2, [fp, #-12]
   179f4:	str	r2, [r3, #8]
   179f8:	ldr	r3, [fp, #-8]
   179fc:	ldr	r2, [fp, #-16]
   17a00:	str	r2, [r3, #12]
   17a04:	nop			; (mov r0, r0)
   17a08:	sub	sp, fp, #4
   17a0c:	pop	{fp, pc}
   17a10:	andeq	r7, r1, r0, asr sl
   17a14:	andeq	r7, r1, ip, lsr sl
   17a18:	andeq	r7, r1, r0, lsr #20
   17a1c:	andeq	r7, r1, ip, lsl #20

00017a20 <init_node_return@@Base>:
   17a20:	push	{fp, lr}
   17a24:	add	fp, sp, #4
   17a28:	sub	sp, sp, #8
   17a2c:	str	r0, [fp, #-8]
   17a30:	str	r1, [fp, #-12]
   17a34:	ldr	r3, [pc, #96]	; 17a9c <init_node_return@@Base+0x7c>
   17a38:	add	r3, pc, r3
   17a3c:	ldrd	r2, [r3]
   17a40:	adds	r2, r2, #1
   17a44:	adc	r3, r3, #0
   17a48:	ldr	r1, [pc, #80]	; 17aa0 <init_node_return@@Base+0x80>
   17a4c:	add	r1, pc, r1
   17a50:	strd	r2, [r1]
   17a54:	ldr	r3, [fp, #-8]
   17a58:	mov	r1, #3
   17a5c:	mov	r0, r3
   17a60:	bl	177ec <init_ast_base_single@@Base>
   17a64:	ldr	r3, [pc, #56]	; 17aa4 <init_node_return@@Base+0x84>
   17a68:	add	r3, pc, r3
   17a6c:	ldrd	r2, [r3, #8]
   17a70:	adds	r2, r2, #1
   17a74:	adc	r3, r3, #0
   17a78:	ldr	r1, [pc, #40]	; 17aa8 <init_node_return@@Base+0x88>
   17a7c:	add	r1, pc, r1
   17a80:	strd	r2, [r1, #8]
   17a84:	ldr	r3, [fp, #-8]
   17a88:	ldr	r2, [fp, #-12]
   17a8c:	str	r2, [r3, #8]
   17a90:	nop			; (mov r0, r0)
   17a94:	sub	sp, fp, #4
   17a98:	pop	{fp, pc}
   17a9c:	andeq	r7, r1, r8, lsr #19
   17aa0:	muleq	r1, r4, r9
   17aa4:	andeq	r7, r1, r8, ror r9
   17aa8:	andeq	r7, r1, r4, ror #18

00017aac <init_node_if@@Base>:
   17aac:	push	{fp, lr}
   17ab0:	add	fp, sp, #4
   17ab4:	sub	sp, sp, #16
   17ab8:	str	r0, [fp, #-8]
   17abc:	str	r1, [fp, #-12]
   17ac0:	str	r2, [fp, #-16]
   17ac4:	str	r3, [fp, #-20]	; 0xffffffec
   17ac8:	ldr	r3, [pc, #120]	; 17b48 <init_node_if@@Base+0x9c>
   17acc:	add	r3, pc, r3
   17ad0:	ldrd	r2, [r3]
   17ad4:	adds	r2, r2, #1
   17ad8:	adc	r3, r3, #0
   17adc:	ldr	r1, [pc, #104]	; 17b4c <init_node_if@@Base+0xa0>
   17ae0:	add	r1, pc, r1
   17ae4:	strd	r2, [r1]
   17ae8:	ldr	r3, [fp, #-8]
   17aec:	mov	r1, #4
   17af0:	mov	r0, r3
   17af4:	bl	177ec <init_ast_base_single@@Base>
   17af8:	ldr	r3, [pc, #80]	; 17b50 <init_node_if@@Base+0xa4>
   17afc:	add	r3, pc, r3
   17b00:	ldrd	r2, [r3, #8]
   17b04:	adds	r2, r2, #1
   17b08:	adc	r3, r3, #0
   17b0c:	ldr	r1, [pc, #64]	; 17b54 <init_node_if@@Base+0xa8>
   17b10:	add	r1, pc, r1
   17b14:	strd	r2, [r1, #8]
   17b18:	ldr	r3, [fp, #-8]
   17b1c:	ldr	r2, [fp, #-12]
   17b20:	str	r2, [r3, #8]
   17b24:	ldr	r3, [fp, #-8]
   17b28:	ldr	r2, [fp, #-16]
   17b2c:	str	r2, [r3, #12]
   17b30:	ldr	r3, [fp, #-8]
   17b34:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b38:	str	r2, [r3, #16]
   17b3c:	nop			; (mov r0, r0)
   17b40:	sub	sp, fp, #4
   17b44:	pop	{fp, pc}
   17b48:	andeq	r7, r1, r4, lsl #18
   17b4c:	strdeq	r7, [r1], -r0
   17b50:	ldrdeq	r7, [r1], -r4
   17b54:	andeq	r7, r1, r0, asr #17

00017b58 <init_node_boolean_operator@@Base>:
   17b58:	push	{fp, lr}
   17b5c:	add	fp, sp, #4
   17b60:	sub	sp, sp, #16
   17b64:	str	r0, [fp, #-8]
   17b68:	str	r1, [fp, #-12]
   17b6c:	str	r2, [fp, #-16]
   17b70:	str	r3, [fp, #-20]	; 0xffffffec
   17b74:	ldr	r3, [pc, #132]	; 17c00 <init_node_boolean_operator@@Base+0xa8>
   17b78:	add	r3, pc, r3
   17b7c:	ldrd	r2, [r3]
   17b80:	adds	r2, r2, #1
   17b84:	adc	r3, r3, #0
   17b88:	ldr	r1, [pc, #116]	; 17c04 <init_node_boolean_operator@@Base+0xac>
   17b8c:	add	r1, pc, r1
   17b90:	strd	r2, [r1]
   17b94:	ldr	r3, [fp, #-8]
   17b98:	mov	r1, #0
   17b9c:	mov	r0, r3
   17ba0:	bl	177ec <init_ast_base_single@@Base>
   17ba4:	ldr	r3, [pc, #92]	; 17c08 <init_node_boolean_operator@@Base+0xb0>
   17ba8:	add	r3, pc, r3
   17bac:	ldrd	r2, [r3, #8]
   17bb0:	adds	r2, r2, #1
   17bb4:	adc	r3, r3, #0
   17bb8:	ldr	r1, [pc, #76]	; 17c0c <init_node_boolean_operator@@Base+0xb4>
   17bbc:	add	r1, pc, r1
   17bc0:	strd	r2, [r1, #8]
   17bc4:	ldr	r3, [fp, #-8]
   17bc8:	mov	r2, #5
   17bcc:	str	r2, [r3]
   17bd0:	ldr	r3, [fp, #-8]
   17bd4:	ldr	r2, [fp, #-12]
   17bd8:	str	r2, [r3, #16]
   17bdc:	ldr	r3, [fp, #-8]
   17be0:	ldr	r2, [fp, #-16]
   17be4:	str	r2, [r3, #8]
   17be8:	ldr	r3, [fp, #-8]
   17bec:	ldr	r2, [fp, #-20]	; 0xffffffec
   17bf0:	str	r2, [r3, #12]
   17bf4:	nop			; (mov r0, r0)
   17bf8:	sub	sp, fp, #4
   17bfc:	pop	{fp, pc}
   17c00:	andeq	r7, r1, r8, asr #16
   17c04:	andeq	r7, r1, r4, lsr r8
   17c08:	andeq	r7, r1, r8, lsl r8
   17c0c:	andeq	r7, r1, r4, lsl #16

00017c10 <free_node@@Base>:
   17c10:	push	{fp, lr}
   17c14:	add	fp, sp, #4
   17c18:	sub	sp, sp, #8
   17c1c:	str	r0, [fp, #-8]
   17c20:	ldr	r1, [pc, #640]	; 17ea8 <free_node@@Base+0x298>
   17c24:	add	r1, pc, r1
   17c28:	ldr	r3, [fp, #-8]
   17c2c:	ldr	r3, [r3]
   17c30:	cmp	r3, #5
   17c34:	addls	pc, pc, r3, lsl #2
   17c38:	b	17e34 <free_node@@Base+0x224>
   17c3c:	b	17c54 <free_node@@Base+0x44>
   17c40:	b	17ca4 <free_node@@Base+0x94>
   17c44:	b	17cf4 <free_node@@Base+0xe4>
   17c48:	b	17d44 <free_node@@Base+0x134>
   17c4c:	b	17d94 <free_node@@Base+0x184>
   17c50:	b	17de4 <free_node@@Base+0x1d4>
   17c54:	ldr	r3, [pc, #592]	; 17eac <free_node@@Base+0x29c>
   17c58:	add	r3, pc, r3
   17c5c:	ldrd	r2, [r3, #8]
   17c60:	adds	r2, r2, #1
   17c64:	adc	r3, r3, #0
   17c68:	ldr	r1, [pc, #576]	; 17eb0 <free_node@@Base+0x2a0>
   17c6c:	add	r1, pc, r1
   17c70:	strd	r2, [r1, #8]
   17c74:	ldr	r0, [fp, #-8]
   17c78:	bl	17f24 <free_node_id@@Base>
   17c7c:	nop			; (mov r0, r0)
   17c80:	ldr	r3, [pc, #556]	; 17eb4 <free_node@@Base+0x2a4>
   17c84:	add	r3, pc, r3
   17c88:	ldrd	r2, [r3, #104]	; 0x68
   17c8c:	adds	r2, r2, #1
   17c90:	adc	r3, r3, #0
   17c94:	ldr	r1, [pc, #540]	; 17eb8 <free_node@@Base+0x2a8>
   17c98:	add	r1, pc, r1
   17c9c:	strd	r2, [r1, #104]	; 0x68
   17ca0:	b	17e9c <free_node@@Base+0x28c>
   17ca4:	ldr	r3, [pc, #528]	; 17ebc <free_node@@Base+0x2ac>
   17ca8:	add	r3, pc, r3
   17cac:	ldrd	r2, [r3, #16]
   17cb0:	adds	r2, r2, #1
   17cb4:	adc	r3, r3, #0
   17cb8:	ldr	r1, [pc, #512]	; 17ec0 <free_node@@Base+0x2b0>
   17cbc:	add	r1, pc, r1
   17cc0:	strd	r2, [r1, #16]
   17cc4:	ldr	r0, [fp, #-8]
   17cc8:	bl	17fe0 <free_node_int@@Base>
   17ccc:	nop			; (mov r0, r0)
   17cd0:	ldr	r3, [pc, #492]	; 17ec4 <free_node@@Base+0x2b4>
   17cd4:	add	r3, pc, r3
   17cd8:	ldrd	r2, [r3, #56]	; 0x38
   17cdc:	adds	r2, r2, #1
   17ce0:	adc	r3, r3, #0
   17ce4:	ldr	r1, [pc, #476]	; 17ec8 <free_node@@Base+0x2b8>
   17ce8:	add	r1, pc, r1
   17cec:	strd	r2, [r1, #56]	; 0x38
   17cf0:	b	17e9c <free_node@@Base+0x28c>
   17cf4:	ldr	r3, [pc, #464]	; 17ecc <free_node@@Base+0x2bc>
   17cf8:	add	r3, pc, r3
   17cfc:	ldrd	r2, [r3, #24]
   17d00:	adds	r2, r2, #1
   17d04:	adc	r3, r3, #0
   17d08:	ldr	r1, [pc, #448]	; 17ed0 <free_node@@Base+0x2c0>
   17d0c:	add	r1, pc, r1
   17d10:	strd	r2, [r1, #24]
   17d14:	ldr	r0, [fp, #-8]
   17d18:	bl	1809c <free_node_function@@Base>
   17d1c:	nop			; (mov r0, r0)
   17d20:	ldr	r3, [pc, #428]	; 17ed4 <free_node@@Base+0x2c4>
   17d24:	add	r3, pc, r3
   17d28:	ldrd	r2, [r3, #64]	; 0x40
   17d2c:	adds	r2, r2, #1
   17d30:	adc	r3, r3, #0
   17d34:	ldr	r1, [pc, #412]	; 17ed8 <free_node@@Base+0x2c8>
   17d38:	add	r1, pc, r1
   17d3c:	strd	r2, [r1, #64]	; 0x40
   17d40:	b	17e9c <free_node@@Base+0x28c>
   17d44:	ldr	r3, [pc, #400]	; 17edc <free_node@@Base+0x2cc>
   17d48:	add	r3, pc, r3
   17d4c:	ldrd	r2, [r3, #32]
   17d50:	adds	r2, r2, #1
   17d54:	adc	r3, r3, #0
   17d58:	ldr	r1, [pc, #384]	; 17ee0 <free_node@@Base+0x2d0>
   17d5c:	add	r1, pc, r1
   17d60:	strd	r2, [r1, #32]
   17d64:	ldr	r0, [fp, #-8]
   17d68:	bl	18168 <free_node_return@@Base>
   17d6c:	nop			; (mov r0, r0)
   17d70:	ldr	r3, [pc, #364]	; 17ee4 <free_node@@Base+0x2d4>
   17d74:	add	r3, pc, r3
   17d78:	ldrd	r2, [r3, #72]	; 0x48
   17d7c:	adds	r2, r2, #1
   17d80:	adc	r3, r3, #0
   17d84:	ldr	r1, [pc, #348]	; 17ee8 <free_node@@Base+0x2d8>
   17d88:	add	r1, pc, r1
   17d8c:	strd	r2, [r1, #72]	; 0x48
   17d90:	b	17e9c <free_node@@Base+0x28c>
   17d94:	ldr	r3, [pc, #336]	; 17eec <free_node@@Base+0x2dc>
   17d98:	add	r3, pc, r3
   17d9c:	ldrd	r2, [r3, #40]	; 0x28
   17da0:	adds	r2, r2, #1
   17da4:	adc	r3, r3, #0
   17da8:	ldr	r1, [pc, #320]	; 17ef0 <free_node@@Base+0x2e0>
   17dac:	add	r1, pc, r1
   17db0:	strd	r2, [r1, #40]	; 0x28
   17db4:	ldr	r0, [fp, #-8]
   17db8:	bl	18224 <free_node_if@@Base>
   17dbc:	nop			; (mov r0, r0)
   17dc0:	ldr	r3, [pc, #300]	; 17ef4 <free_node@@Base+0x2e4>
   17dc4:	add	r3, pc, r3
   17dc8:	ldrd	r2, [r3, #80]	; 0x50
   17dcc:	adds	r2, r2, #1
   17dd0:	adc	r3, r3, #0
   17dd4:	ldr	r1, [pc, #284]	; 17ef8 <free_node@@Base+0x2e8>
   17dd8:	add	r1, pc, r1
   17ddc:	strd	r2, [r1, #80]	; 0x50
   17de0:	b	17e9c <free_node@@Base+0x28c>
   17de4:	ldr	r3, [pc, #272]	; 17efc <free_node@@Base+0x2ec>
   17de8:	add	r3, pc, r3
   17dec:	ldrd	r2, [r3, #48]	; 0x30
   17df0:	adds	r2, r2, #1
   17df4:	adc	r3, r3, #0
   17df8:	ldr	r1, [pc, #256]	; 17f00 <free_node@@Base+0x2f0>
   17dfc:	add	r1, pc, r1
   17e00:	strd	r2, [r1, #48]	; 0x30
   17e04:	ldr	r0, [fp, #-8]
   17e08:	bl	18388 <free_node_boolean_operator@@Base>
   17e0c:	nop			; (mov r0, r0)
   17e10:	ldr	r3, [pc, #236]	; 17f04 <free_node@@Base+0x2f4>
   17e14:	add	r3, pc, r3
   17e18:	ldrd	r2, [r3, #88]	; 0x58
   17e1c:	adds	r2, r2, #1
   17e20:	adc	r3, r3, #0
   17e24:	ldr	r1, [pc, #220]	; 17f08 <free_node@@Base+0x2f8>
   17e28:	add	r1, pc, r1
   17e2c:	strd	r2, [r1, #88]	; 0x58
   17e30:	b	17e9c <free_node@@Base+0x28c>
   17e34:	ldr	r3, [pc, #208]	; 17f0c <free_node@@Base+0x2fc>
   17e38:	add	r3, pc, r3
   17e3c:	ldrd	r2, [r3]
   17e40:	adds	r2, r2, #1
   17e44:	adc	r3, r3, #0
   17e48:	ldr	r0, [pc, #192]	; 17f10 <free_node@@Base+0x300>
   17e4c:	add	r0, pc, r0
   17e50:	strd	r2, [r0]
   17e54:	ldr	r3, [pc, #184]	; 17f14 <free_node@@Base+0x304>
   17e58:	ldr	r3, [r1, r3]
   17e5c:	ldr	r3, [r3]
   17e60:	mov	r2, #31
   17e64:	mov	r1, #1
   17e68:	ldr	r0, [pc, #168]	; 17f18 <free_node@@Base+0x308>
   17e6c:	add	r0, pc, r0
   17e70:	bl	11894 <fwrite@plt>
   17e74:	ldr	r3, [pc, #160]	; 17f1c <free_node@@Base+0x30c>
   17e78:	add	r3, pc, r3
   17e7c:	ldrd	r2, [r3, #96]	; 0x60
   17e80:	adds	r2, r2, #1
   17e84:	adc	r3, r3, #0
   17e88:	ldr	r1, [pc, #144]	; 17f20 <free_node@@Base+0x310>
   17e8c:	add	r1, pc, r1
   17e90:	strd	r2, [r1, #96]	; 0x60
   17e94:	mov	r0, #1
   17e98:	bl	11918 <exit@plt>
   17e9c:	nop			; (mov r0, r0)
   17ea0:	sub	sp, fp, #4
   17ea4:	pop	{fp, pc}
   17ea8:	ldrdeq	r6, [r1], -r4
   17eac:	strdeq	r7, [r1], -r8
   17eb0:	andeq	r7, r1, r4, ror #13
   17eb4:	andeq	r7, r1, ip, asr #13
   17eb8:			; <UNDEFINED> instruction: 0x000176b8
   17ebc:	andeq	r7, r1, r8, lsr #13
   17ec0:	muleq	r1, r4, r6
   17ec4:	andeq	r7, r1, ip, ror r6
   17ec8:	andeq	r7, r1, r8, ror #12
   17ecc:	andeq	r7, r1, r8, asr r6
   17ed0:	andeq	r7, r1, r4, asr #12
   17ed4:	andeq	r7, r1, ip, lsr #12
   17ed8:	andeq	r7, r1, r8, lsl r6
   17edc:	andeq	r7, r1, r8, lsl #12
   17ee0:	strdeq	r7, [r1], -r4
   17ee4:	ldrdeq	r7, [r1], -ip
   17ee8:	andeq	r7, r1, r8, asr #11
   17eec:			; <UNDEFINED> instruction: 0x000175b8
   17ef0:	andeq	r7, r1, r4, lsr #11
   17ef4:	andeq	r7, r1, ip, lsl #11
   17ef8:	andeq	r7, r1, r8, ror r5
   17efc:	andeq	r7, r1, r8, ror #10
   17f00:	andeq	r7, r1, r4, asr r5
   17f04:	andeq	r7, r1, ip, lsr r5
   17f08:	andeq	r7, r1, r8, lsr #10
   17f0c:	andeq	r7, r1, r8, lsl r5
   17f10:	andeq	r7, r1, r4, lsl #10
   17f14:	andeq	r0, r0, r4, lsr #1
   17f18:	andeq	r5, r0, r0, lsr #32
   17f1c:	ldrdeq	r7, [r1], -r8
   17f20:	andeq	r7, r1, r4, asr #9

00017f24 <free_node_id@@Base>:
   17f24:	push	{fp, lr}
   17f28:	add	fp, sp, #4
   17f2c:	sub	sp, sp, #8
   17f30:	str	r0, [fp, #-8]
   17f34:	ldr	r3, [pc, #140]	; 17fc8 <free_node_id@@Base+0xa4>
   17f38:	add	r3, pc, r3
   17f3c:	ldrd	r2, [r3]
   17f40:	adds	r2, r2, #1
   17f44:	adc	r3, r3, #0
   17f48:	ldr	r1, [pc, #124]	; 17fcc <free_node_id@@Base+0xa8>
   17f4c:	add	r1, pc, r1
   17f50:	strd	r2, [r1]
   17f54:	ldr	r3, [fp, #-8]
   17f58:	ldr	r3, [r3, #4]
   17f5c:	cmp	r3, #0
   17f60:	beq	17fb4 <free_node_id@@Base+0x90>
   17f64:	ldr	r3, [pc, #100]	; 17fd0 <free_node_id@@Base+0xac>
   17f68:	add	r3, pc, r3
   17f6c:	ldrd	r2, [r3, #8]
   17f70:	adds	r2, r2, #1
   17f74:	adc	r3, r3, #0
   17f78:	ldr	r1, [pc, #84]	; 17fd4 <free_node_id@@Base+0xb0>
   17f7c:	add	r1, pc, r1
   17f80:	strd	r2, [r1, #8]
   17f84:	ldr	r3, [fp, #-8]
   17f88:	ldr	r3, [r3, #4]
   17f8c:	mov	r0, r3
   17f90:	bl	17c10 <free_node@@Base>
   17f94:	ldr	r3, [pc, #60]	; 17fd8 <free_node_id@@Base+0xb4>
   17f98:	add	r3, pc, r3
   17f9c:	ldrd	r2, [r3, #16]
   17fa0:	adds	r2, r2, #1
   17fa4:	adc	r3, r3, #0
   17fa8:	ldr	r1, [pc, #44]	; 17fdc <free_node_id@@Base+0xb8>
   17fac:	add	r1, pc, r1
   17fb0:	strd	r2, [r1, #16]
   17fb4:	ldr	r0, [fp, #-8]
   17fb8:	bl	11870 <free@plt>
   17fbc:	nop			; (mov r0, r0)
   17fc0:	sub	sp, fp, #4
   17fc4:	pop	{fp, pc}
   17fc8:	andeq	r7, r1, r0, lsl #8
   17fcc:	andeq	r7, r1, ip, ror #7
   17fd0:	ldrdeq	r7, [r1], -r0
   17fd4:			; <UNDEFINED> instruction: 0x000173bc
   17fd8:	andeq	r7, r1, r0, lsr #7
   17fdc:	andeq	r7, r1, ip, lsl #7

00017fe0 <free_node_int@@Base>:
   17fe0:	push	{fp, lr}
   17fe4:	add	fp, sp, #4
   17fe8:	sub	sp, sp, #8
   17fec:	str	r0, [fp, #-8]
   17ff0:	ldr	r3, [pc, #140]	; 18084 <free_node_int@@Base+0xa4>
   17ff4:	add	r3, pc, r3
   17ff8:	ldrd	r2, [r3]
   17ffc:	adds	r2, r2, #1
   18000:	adc	r3, r3, #0
   18004:	ldr	r1, [pc, #124]	; 18088 <free_node_int@@Base+0xa8>
   18008:	add	r1, pc, r1
   1800c:	strd	r2, [r1]
   18010:	ldr	r3, [fp, #-8]
   18014:	ldr	r3, [r3, #4]
   18018:	cmp	r3, #0
   1801c:	beq	18070 <free_node_int@@Base+0x90>
   18020:	ldr	r3, [pc, #100]	; 1808c <free_node_int@@Base+0xac>
   18024:	add	r3, pc, r3
   18028:	ldrd	r2, [r3, #8]
   1802c:	adds	r2, r2, #1
   18030:	adc	r3, r3, #0
   18034:	ldr	r1, [pc, #84]	; 18090 <free_node_int@@Base+0xb0>
   18038:	add	r1, pc, r1
   1803c:	strd	r2, [r1, #8]
   18040:	ldr	r3, [fp, #-8]
   18044:	ldr	r3, [r3, #4]
   18048:	mov	r0, r3
   1804c:	bl	17c10 <free_node@@Base>
   18050:	ldr	r3, [pc, #60]	; 18094 <free_node_int@@Base+0xb4>
   18054:	add	r3, pc, r3
   18058:	ldrd	r2, [r3, #16]
   1805c:	adds	r2, r2, #1
   18060:	adc	r3, r3, #0
   18064:	ldr	r1, [pc, #44]	; 18098 <free_node_int@@Base+0xb8>
   18068:	add	r1, pc, r1
   1806c:	strd	r2, [r1, #16]
   18070:	ldr	r0, [fp, #-8]
   18074:	bl	11870 <free@plt>
   18078:	nop			; (mov r0, r0)
   1807c:	sub	sp, fp, #4
   18080:	pop	{fp, pc}
   18084:	andeq	r7, r1, ip, lsr #6
   18088:	andeq	r7, r1, r8, lsl r3
   1808c:	strdeq	r7, [r1], -ip
   18090:	andeq	r7, r1, r8, ror #5
   18094:	andeq	r7, r1, ip, asr #5
   18098:			; <UNDEFINED> instruction: 0x000172b8

0001809c <free_node_function@@Base>:
   1809c:	push	{fp, lr}
   180a0:	add	fp, sp, #4
   180a4:	sub	sp, sp, #8
   180a8:	str	r0, [fp, #-8]
   180ac:	ldr	r3, [pc, #156]	; 18150 <free_node_function@@Base+0xb4>
   180b0:	add	r3, pc, r3
   180b4:	ldrd	r2, [r3]
   180b8:	adds	r2, r2, #1
   180bc:	adc	r3, r3, #0
   180c0:	ldr	r1, [pc, #140]	; 18154 <free_node_function@@Base+0xb8>
   180c4:	add	r1, pc, r1
   180c8:	strd	r2, [r1]
   180cc:	ldr	r3, [fp, #-8]
   180d0:	ldr	r3, [r3, #4]
   180d4:	cmp	r3, #0
   180d8:	beq	1812c <free_node_function@@Base+0x90>
   180dc:	ldr	r3, [pc, #116]	; 18158 <free_node_function@@Base+0xbc>
   180e0:	add	r3, pc, r3
   180e4:	ldrd	r2, [r3, #8]
   180e8:	adds	r2, r2, #1
   180ec:	adc	r3, r3, #0
   180f0:	ldr	r1, [pc, #100]	; 1815c <free_node_function@@Base+0xc0>
   180f4:	add	r1, pc, r1
   180f8:	strd	r2, [r1, #8]
   180fc:	ldr	r3, [fp, #-8]
   18100:	ldr	r3, [r3, #4]
   18104:	mov	r0, r3
   18108:	bl	17c10 <free_node@@Base>
   1810c:	ldr	r3, [pc, #76]	; 18160 <free_node_function@@Base+0xc4>
   18110:	add	r3, pc, r3
   18114:	ldrd	r2, [r3, #16]
   18118:	adds	r2, r2, #1
   1811c:	adc	r3, r3, #0
   18120:	ldr	r1, [pc, #60]	; 18164 <free_node_function@@Base+0xc8>
   18124:	add	r1, pc, r1
   18128:	strd	r2, [r1, #16]
   1812c:	ldr	r3, [fp, #-8]
   18130:	ldr	r3, [r3, #8]
   18134:	mov	r0, r3
   18138:	bl	11870 <free@plt>
   1813c:	ldr	r0, [fp, #-8]
   18140:	bl	11870 <free@plt>
   18144:	nop			; (mov r0, r0)
   18148:	sub	sp, fp, #4
   1814c:	pop	{fp, pc}
   18150:	andeq	r7, r1, r8, asr r2
   18154:	andeq	r7, r1, r4, asr #4
   18158:	andeq	r7, r1, r8, lsr #4
   1815c:	andeq	r7, r1, r4, lsl r2
   18160:	strdeq	r7, [r1], -r8
   18164:	andeq	r7, r1, r4, ror #3

00018168 <free_node_return@@Base>:
   18168:	push	{fp, lr}
   1816c:	add	fp, sp, #4
   18170:	sub	sp, sp, #8
   18174:	str	r0, [fp, #-8]
   18178:	ldr	r3, [pc, #140]	; 1820c <free_node_return@@Base+0xa4>
   1817c:	add	r3, pc, r3
   18180:	ldrd	r2, [r3]
   18184:	adds	r2, r2, #1
   18188:	adc	r3, r3, #0
   1818c:	ldr	r1, [pc, #124]	; 18210 <free_node_return@@Base+0xa8>
   18190:	add	r1, pc, r1
   18194:	strd	r2, [r1]
   18198:	ldr	r3, [fp, #-8]
   1819c:	ldr	r3, [r3, #4]
   181a0:	cmp	r3, #0
   181a4:	beq	181f8 <free_node_return@@Base+0x90>
   181a8:	ldr	r3, [pc, #100]	; 18214 <free_node_return@@Base+0xac>
   181ac:	add	r3, pc, r3
   181b0:	ldrd	r2, [r3, #8]
   181b4:	adds	r2, r2, #1
   181b8:	adc	r3, r3, #0
   181bc:	ldr	r1, [pc, #84]	; 18218 <free_node_return@@Base+0xb0>
   181c0:	add	r1, pc, r1
   181c4:	strd	r2, [r1, #8]
   181c8:	ldr	r3, [fp, #-8]
   181cc:	ldr	r3, [r3, #4]
   181d0:	mov	r0, r3
   181d4:	bl	17c10 <free_node@@Base>
   181d8:	ldr	r3, [pc, #60]	; 1821c <free_node_return@@Base+0xb4>
   181dc:	add	r3, pc, r3
   181e0:	ldrd	r2, [r3, #16]
   181e4:	adds	r2, r2, #1
   181e8:	adc	r3, r3, #0
   181ec:	ldr	r1, [pc, #44]	; 18220 <free_node_return@@Base+0xb8>
   181f0:	add	r1, pc, r1
   181f4:	strd	r2, [r1, #16]
   181f8:	ldr	r0, [fp, #-8]
   181fc:	bl	11870 <free@plt>
   18200:	nop			; (mov r0, r0)
   18204:	sub	sp, fp, #4
   18208:	pop	{fp, pc}
   1820c:	andeq	r7, r1, r4, ror r1
   18210:	andeq	r7, r1, r0, ror #2
   18214:	andeq	r7, r1, r4, asr #2
   18218:	andeq	r7, r1, r0, lsr r1
   1821c:	andeq	r7, r1, r4, lsl r1
   18220:	andeq	r7, r1, r0, lsl #2

00018224 <free_node_if@@Base>:
   18224:	push	{fp, lr}
   18228:	add	fp, sp, #4
   1822c:	sub	sp, sp, #8
   18230:	str	r0, [fp, #-8]
   18234:	ldr	r3, [pc, #284]	; 18358 <free_node_if@@Base+0x134>
   18238:	add	r3, pc, r3
   1823c:	ldrd	r2, [r3]
   18240:	adds	r2, r2, #1
   18244:	adc	r3, r3, #0
   18248:	ldr	r1, [pc, #268]	; 1835c <free_node_if@@Base+0x138>
   1824c:	add	r1, pc, r1
   18250:	strd	r2, [r1]
   18254:	ldr	r3, [fp, #-8]
   18258:	ldr	r3, [r3, #4]
   1825c:	cmp	r3, #0
   18260:	beq	182b4 <free_node_if@@Base+0x90>
   18264:	ldr	r3, [pc, #244]	; 18360 <free_node_if@@Base+0x13c>
   18268:	add	r3, pc, r3
   1826c:	ldrd	r2, [r3, #8]
   18270:	adds	r2, r2, #1
   18274:	adc	r3, r3, #0
   18278:	ldr	r1, [pc, #228]	; 18364 <free_node_if@@Base+0x140>
   1827c:	add	r1, pc, r1
   18280:	strd	r2, [r1, #8]
   18284:	ldr	r3, [fp, #-8]
   18288:	ldr	r3, [r3, #4]
   1828c:	mov	r0, r3
   18290:	bl	17c10 <free_node@@Base>
   18294:	ldr	r3, [pc, #204]	; 18368 <free_node_if@@Base+0x144>
   18298:	add	r3, pc, r3
   1829c:	ldrd	r2, [r3, #16]
   182a0:	adds	r2, r2, #1
   182a4:	adc	r3, r3, #0
   182a8:	ldr	r1, [pc, #188]	; 1836c <free_node_if@@Base+0x148>
   182ac:	add	r1, pc, r1
   182b0:	strd	r2, [r1, #16]
   182b4:	ldr	r3, [fp, #-8]
   182b8:	ldr	r3, [r3, #8]
   182bc:	mov	r0, r3
   182c0:	bl	17c10 <free_node@@Base>
   182c4:	ldr	r3, [pc, #164]	; 18370 <free_node_if@@Base+0x14c>
   182c8:	add	r3, pc, r3
   182cc:	ldrd	r2, [r3, #24]
   182d0:	adds	r2, r2, #1
   182d4:	adc	r3, r3, #0
   182d8:	ldr	r1, [pc, #148]	; 18374 <free_node_if@@Base+0x150>
   182dc:	add	r1, pc, r1
   182e0:	strd	r2, [r1, #24]
   182e4:	ldr	r3, [fp, #-8]
   182e8:	ldr	r3, [r3, #12]
   182ec:	mov	r0, r3
   182f0:	bl	17c10 <free_node@@Base>
   182f4:	ldr	r3, [pc, #124]	; 18378 <free_node_if@@Base+0x154>
   182f8:	add	r3, pc, r3
   182fc:	ldrd	r2, [r3, #32]
   18300:	adds	r2, r2, #1
   18304:	adc	r3, r3, #0
   18308:	ldr	r1, [pc, #108]	; 1837c <free_node_if@@Base+0x158>
   1830c:	add	r1, pc, r1
   18310:	strd	r2, [r1, #32]
   18314:	ldr	r3, [fp, #-8]
   18318:	ldr	r3, [r3, #16]
   1831c:	mov	r0, r3
   18320:	bl	17c10 <free_node@@Base>
   18324:	ldr	r3, [pc, #84]	; 18380 <free_node_if@@Base+0x15c>
   18328:	add	r3, pc, r3
   1832c:	ldrd	r2, [r3, #40]	; 0x28
   18330:	adds	r2, r2, #1
   18334:	adc	r3, r3, #0
   18338:	ldr	r1, [pc, #68]	; 18384 <free_node_if@@Base+0x160>
   1833c:	add	r1, pc, r1
   18340:	strd	r2, [r1, #40]	; 0x28
   18344:	ldr	r0, [fp, #-8]
   18348:	bl	11870 <free@plt>
   1834c:	nop			; (mov r0, r0)
   18350:	sub	sp, fp, #4
   18354:	pop	{fp, pc}
   18358:	andeq	r7, r1, r8, lsl #1
   1835c:	andeq	r7, r1, r4, ror r0
   18360:	andeq	r7, r1, r8, asr r0
   18364:	andeq	r7, r1, r4, asr #32
   18368:	andeq	r7, r1, r8, lsr #32
   1836c:	andeq	r7, r1, r4, lsl r0
   18370:	strdeq	r6, [r1], -r8
   18374:	andeq	r6, r1, r4, ror #31
   18378:	andeq	r6, r1, r8, asr #31
   1837c:			; <UNDEFINED> instruction: 0x00016fb4
   18380:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   18384:	andeq	r6, r1, r4, lsl #31

00018388 <free_node_boolean_operator@@Base>:
   18388:	push	{fp, lr}
   1838c:	add	fp, sp, #4
   18390:	sub	sp, sp, #8
   18394:	str	r0, [fp, #-8]
   18398:	ldr	r3, [pc, #236]	; 1848c <free_node_boolean_operator@@Base+0x104>
   1839c:	add	r3, pc, r3
   183a0:	ldrd	r2, [r3]
   183a4:	adds	r2, r2, #1
   183a8:	adc	r3, r3, #0
   183ac:	ldr	r1, [pc, #220]	; 18490 <free_node_boolean_operator@@Base+0x108>
   183b0:	add	r1, pc, r1
   183b4:	strd	r2, [r1]
   183b8:	ldr	r3, [fp, #-8]
   183bc:	ldr	r3, [r3, #4]
   183c0:	cmp	r3, #0
   183c4:	beq	18418 <free_node_boolean_operator@@Base+0x90>
   183c8:	ldr	r3, [pc, #196]	; 18494 <free_node_boolean_operator@@Base+0x10c>
   183cc:	add	r3, pc, r3
   183d0:	ldrd	r2, [r3, #8]
   183d4:	adds	r2, r2, #1
   183d8:	adc	r3, r3, #0
   183dc:	ldr	r1, [pc, #180]	; 18498 <free_node_boolean_operator@@Base+0x110>
   183e0:	add	r1, pc, r1
   183e4:	strd	r2, [r1, #8]
   183e8:	ldr	r3, [fp, #-8]
   183ec:	ldr	r3, [r3, #4]
   183f0:	mov	r0, r3
   183f4:	bl	17c10 <free_node@@Base>
   183f8:	ldr	r3, [pc, #156]	; 1849c <free_node_boolean_operator@@Base+0x114>
   183fc:	add	r3, pc, r3
   18400:	ldrd	r2, [r3, #16]
   18404:	adds	r2, r2, #1
   18408:	adc	r3, r3, #0
   1840c:	ldr	r1, [pc, #140]	; 184a0 <free_node_boolean_operator@@Base+0x118>
   18410:	add	r1, pc, r1
   18414:	strd	r2, [r1, #16]
   18418:	ldr	r3, [fp, #-8]
   1841c:	ldr	r3, [r3, #8]
   18420:	mov	r0, r3
   18424:	bl	17c10 <free_node@@Base>
   18428:	ldr	r3, [pc, #116]	; 184a4 <free_node_boolean_operator@@Base+0x11c>
   1842c:	add	r3, pc, r3
   18430:	ldrd	r2, [r3, #24]
   18434:	adds	r2, r2, #1
   18438:	adc	r3, r3, #0
   1843c:	ldr	r1, [pc, #100]	; 184a8 <free_node_boolean_operator@@Base+0x120>
   18440:	add	r1, pc, r1
   18444:	strd	r2, [r1, #24]
   18448:	ldr	r3, [fp, #-8]
   1844c:	ldr	r3, [r3, #12]
   18450:	mov	r0, r3
   18454:	bl	17c10 <free_node@@Base>
   18458:	ldr	r3, [pc, #76]	; 184ac <free_node_boolean_operator@@Base+0x124>
   1845c:	add	r3, pc, r3
   18460:	ldrd	r2, [r3, #32]
   18464:	adds	r2, r2, #1
   18468:	adc	r3, r3, #0
   1846c:	ldr	r1, [pc, #60]	; 184b0 <free_node_boolean_operator@@Base+0x128>
   18470:	add	r1, pc, r1
   18474:	strd	r2, [r1, #32]
   18478:	ldr	r0, [fp, #-8]
   1847c:	bl	11870 <free@plt>
   18480:	nop			; (mov r0, r0)
   18484:	sub	sp, fp, #4
   18488:	pop	{fp, pc}
   1848c:	strdeq	r6, [r1], -ip
   18490:	andeq	r6, r1, r8, ror #29
   18494:	andeq	r6, r1, ip, asr #29
   18498:			; <UNDEFINED> instruction: 0x00016eb8
   1849c:	muleq	r1, ip, lr
   184a0:	andeq	r6, r1, r8, lsl #29
   184a4:	andeq	r6, r1, ip, ror #28
   184a8:	andeq	r6, r1, r8, asr lr
   184ac:	andeq	r6, r1, ip, lsr lr
   184b0:	andeq	r6, r1, r8, lsr #28

000184b4 <get_boolean_op_value@@Base>:
   184b4:	push	{r4, fp, lr}
   184b8:	add	fp, sp, #8
   184bc:	sub	sp, sp, #20
   184c0:	str	r0, [fp, #-24]	; 0xffffffe8
   184c4:	ldr	r4, [pc, #940]	; 18878 <get_boolean_op_value@@Base+0x3c4>
   184c8:	add	r4, pc, r4
   184cc:	ldr	r3, [pc, #936]	; 1887c <get_boolean_op_value@@Base+0x3c8>
   184d0:	add	r3, pc, r3
   184d4:	ldrd	r2, [r3]
   184d8:	adds	r2, r2, #1
   184dc:	adc	r3, r3, #0
   184e0:	ldr	r1, [pc, #920]	; 18880 <get_boolean_op_value@@Base+0x3cc>
   184e4:	add	r1, pc, r1
   184e8:	strd	r2, [r1]
   184ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184f0:	ldr	r3, [r3, #4]
   184f4:	mov	r1, #2
   184f8:	mov	r0, r3
   184fc:	bl	11990 <strnlen@plt>
   18500:	str	r0, [fp, #-16]
   18504:	ldr	r3, [fp, #-16]
   18508:	cmp	r3, #2
   1850c:	bne	18760 <get_boolean_op_value@@Base+0x2ac>
   18510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18514:	ldr	r3, [r3, #4]
   18518:	mov	r2, #2
   1851c:	ldr	r1, [pc, #864]	; 18884 <get_boolean_op_value@@Base+0x3d0>
   18520:	add	r1, pc, r1
   18524:	mov	r0, r3
   18528:	bl	119c0 <strncmp@plt>
   1852c:	mov	r3, r0
   18530:	cmp	r3, #0
   18534:	bne	18560 <get_boolean_op_value@@Base+0xac>
   18538:	mov	r3, #0
   1853c:	ldr	r2, [pc, #836]	; 18888 <get_boolean_op_value@@Base+0x3d4>
   18540:	add	r2, pc, r2
   18544:	ldrd	r0, [r2, #8]
   18548:	adds	r0, r0, #1
   1854c:	adc	r1, r1, #0
   18550:	ldr	r2, [pc, #820]	; 1888c <get_boolean_op_value@@Base+0x3d8>
   18554:	add	r2, pc, r2
   18558:	strd	r0, [r2, #8]
   1855c:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   18560:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18564:	ldr	r3, [r3, #4]
   18568:	mov	r2, #2
   1856c:	ldr	r1, [pc, #796]	; 18890 <get_boolean_op_value@@Base+0x3dc>
   18570:	add	r1, pc, r1
   18574:	mov	r0, r3
   18578:	bl	119c0 <strncmp@plt>
   1857c:	mov	r3, r0
   18580:	cmp	r3, #0
   18584:	bne	185b0 <get_boolean_op_value@@Base+0xfc>
   18588:	mov	r3, #1
   1858c:	ldr	r2, [pc, #768]	; 18894 <get_boolean_op_value@@Base+0x3e0>
   18590:	add	r2, pc, r2
   18594:	ldrd	r0, [r2, #16]
   18598:	adds	r0, r0, #1
   1859c:	adc	r1, r1, #0
   185a0:	ldr	r2, [pc, #752]	; 18898 <get_boolean_op_value@@Base+0x3e4>
   185a4:	add	r2, pc, r2
   185a8:	strd	r0, [r2, #16]
   185ac:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   185b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185b4:	ldr	r3, [r3, #4]
   185b8:	mov	r2, #2
   185bc:	ldr	r1, [pc, #728]	; 1889c <get_boolean_op_value@@Base+0x3e8>
   185c0:	add	r1, pc, r1
   185c4:	mov	r0, r3
   185c8:	bl	119c0 <strncmp@plt>
   185cc:	mov	r3, r0
   185d0:	cmp	r3, #0
   185d4:	bne	18600 <get_boolean_op_value@@Base+0x14c>
   185d8:	mov	r3, #2
   185dc:	ldr	r2, [pc, #700]	; 188a0 <get_boolean_op_value@@Base+0x3ec>
   185e0:	add	r2, pc, r2
   185e4:	ldrd	r0, [r2, #24]
   185e8:	adds	r0, r0, #1
   185ec:	adc	r1, r1, #0
   185f0:	ldr	r2, [pc, #684]	; 188a4 <get_boolean_op_value@@Base+0x3f0>
   185f4:	add	r2, pc, r2
   185f8:	strd	r0, [r2, #24]
   185fc:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   18600:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18604:	ldr	r3, [r3, #4]
   18608:	mov	r2, #2
   1860c:	ldr	r1, [pc, #660]	; 188a8 <get_boolean_op_value@@Base+0x3f4>
   18610:	add	r1, pc, r1
   18614:	mov	r0, r3
   18618:	bl	119c0 <strncmp@plt>
   1861c:	mov	r3, r0
   18620:	cmp	r3, #0
   18624:	bne	18650 <get_boolean_op_value@@Base+0x19c>
   18628:	mov	r3, #3
   1862c:	ldr	r2, [pc, #632]	; 188ac <get_boolean_op_value@@Base+0x3f8>
   18630:	add	r2, pc, r2
   18634:	ldrd	r0, [r2, #32]
   18638:	adds	r0, r0, #1
   1863c:	adc	r1, r1, #0
   18640:	ldr	r2, [pc, #616]	; 188b0 <get_boolean_op_value@@Base+0x3fc>
   18644:	add	r2, pc, r2
   18648:	strd	r0, [r2, #32]
   1864c:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   18650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18654:	ldr	r3, [r3, #4]
   18658:	mov	r2, #2
   1865c:	ldr	r1, [pc, #592]	; 188b4 <get_boolean_op_value@@Base+0x400>
   18660:	add	r1, pc, r1
   18664:	mov	r0, r3
   18668:	bl	119c0 <strncmp@plt>
   1866c:	mov	r3, r0
   18670:	cmp	r3, #0
   18674:	bne	186a0 <get_boolean_op_value@@Base+0x1ec>
   18678:	mov	r3, #4
   1867c:	ldr	r2, [pc, #564]	; 188b8 <get_boolean_op_value@@Base+0x404>
   18680:	add	r2, pc, r2
   18684:	ldrd	r0, [r2, #40]	; 0x28
   18688:	adds	r0, r0, #1
   1868c:	adc	r1, r1, #0
   18690:	ldr	r2, [pc, #548]	; 188bc <get_boolean_op_value@@Base+0x408>
   18694:	add	r2, pc, r2
   18698:	strd	r0, [r2, #40]	; 0x28
   1869c:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   186a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186a4:	ldr	r3, [r3, #4]
   186a8:	mov	r2, #2
   186ac:	ldr	r1, [pc, #524]	; 188c0 <get_boolean_op_value@@Base+0x40c>
   186b0:	add	r1, pc, r1
   186b4:	mov	r0, r3
   186b8:	bl	119c0 <strncmp@plt>
   186bc:	mov	r3, r0
   186c0:	cmp	r3, #0
   186c4:	bne	186f0 <get_boolean_op_value@@Base+0x23c>
   186c8:	mov	r3, #5
   186cc:	ldr	r2, [pc, #496]	; 188c4 <get_boolean_op_value@@Base+0x410>
   186d0:	add	r2, pc, r2
   186d4:	ldrd	r0, [r2, #56]	; 0x38
   186d8:	adds	r0, r0, #1
   186dc:	adc	r1, r1, #0
   186e0:	ldr	r2, [pc, #480]	; 188c8 <get_boolean_op_value@@Base+0x414>
   186e4:	add	r2, pc, r2
   186e8:	strd	r0, [r2, #56]	; 0x38
   186ec:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   186f0:	ldr	r3, [pc, #468]	; 188cc <get_boolean_op_value@@Base+0x418>
   186f4:	add	r3, pc, r3
   186f8:	ldrd	r2, [r3, #48]	; 0x30
   186fc:	adds	r2, r2, #1
   18700:	adc	r3, r3, #0
   18704:	ldr	r1, [pc, #452]	; 188d0 <get_boolean_op_value@@Base+0x41c>
   18708:	add	r1, pc, r1
   1870c:	strd	r2, [r1, #48]	; 0x30
   18710:	ldr	r3, [pc, #444]	; 188d4 <get_boolean_op_value@@Base+0x420>
   18714:	ldr	r3, [r4, r3]
   18718:	ldr	r0, [r3]
   1871c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18720:	ldr	r3, [r3, #4]
   18724:	mov	r2, r3
   18728:	ldr	r3, [pc, #424]	; 188d8 <get_boolean_op_value@@Base+0x424>
   1872c:	add	r3, pc, r3
   18730:	mov	r1, r3
   18734:	bl	11930 <fprintf@plt>
   18738:	ldr	r3, [pc, #412]	; 188dc <get_boolean_op_value@@Base+0x428>
   1873c:	add	r3, pc, r3
   18740:	ldrd	r2, [r3, #64]	; 0x40
   18744:	adds	r2, r2, #1
   18748:	adc	r3, r3, #0
   1874c:	ldr	r1, [pc, #396]	; 188e0 <get_boolean_op_value@@Base+0x42c>
   18750:	add	r1, pc, r1
   18754:	strd	r2, [r1, #64]	; 0x40
   18758:	mov	r0, #1
   1875c:	bl	11918 <exit@plt>
   18760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18764:	ldr	r3, [r3, #4]
   18768:	ldrb	r3, [r3]
   1876c:	cmp	r3, #60	; 0x3c
   18770:	beq	187ac <get_boolean_op_value@@Base+0x2f8>
   18774:	cmp	r3, #62	; 0x3e
   18778:	beq	187d4 <get_boolean_op_value@@Base+0x320>
   1877c:	cmp	r3, #33	; 0x21
   18780:	bne	187fc <get_boolean_op_value@@Base+0x348>
   18784:	mov	r3, #8
   18788:	ldr	r2, [pc, #340]	; 188e4 <get_boolean_op_value@@Base+0x430>
   1878c:	add	r2, pc, r2
   18790:	ldrd	r0, [r2, #80]	; 0x50
   18794:	adds	r0, r0, #1
   18798:	adc	r1, r1, #0
   1879c:	ldr	r2, [pc, #324]	; 188e8 <get_boolean_op_value@@Base+0x434>
   187a0:	add	r2, pc, r2
   187a4:	strd	r0, [r2, #80]	; 0x50
   187a8:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   187ac:	mov	r3, #6
   187b0:	ldr	r2, [pc, #308]	; 188ec <get_boolean_op_value@@Base+0x438>
   187b4:	add	r2, pc, r2
   187b8:	ldrd	r0, [r2, #88]	; 0x58
   187bc:	adds	r0, r0, #1
   187c0:	adc	r1, r1, #0
   187c4:	ldr	r2, [pc, #292]	; 188f0 <get_boolean_op_value@@Base+0x43c>
   187c8:	add	r2, pc, r2
   187cc:	strd	r0, [r2, #88]	; 0x58
   187d0:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   187d4:	mov	r3, #7
   187d8:	ldr	r2, [pc, #276]	; 188f4 <get_boolean_op_value@@Base+0x440>
   187dc:	add	r2, pc, r2
   187e0:	ldrd	r0, [r2, #96]	; 0x60
   187e4:	adds	r0, r0, #1
   187e8:	adc	r1, r1, #0
   187ec:	ldr	r2, [pc, #260]	; 188f8 <get_boolean_op_value@@Base+0x444>
   187f0:	add	r2, pc, r2
   187f4:	strd	r0, [r2, #96]	; 0x60
   187f8:	b	1886c <get_boolean_op_value@@Base+0x3b8>
   187fc:	ldr	r3, [pc, #248]	; 188fc <get_boolean_op_value@@Base+0x448>
   18800:	add	r3, pc, r3
   18804:	ldrd	r2, [r3, #72]	; 0x48
   18808:	adds	r2, r2, #1
   1880c:	adc	r3, r3, #0
   18810:	ldr	r1, [pc, #232]	; 18900 <get_boolean_op_value@@Base+0x44c>
   18814:	add	r1, pc, r1
   18818:	strd	r2, [r1, #72]	; 0x48
   1881c:	ldr	r3, [pc, #176]	; 188d4 <get_boolean_op_value@@Base+0x420>
   18820:	ldr	r3, [r4, r3]
   18824:	ldr	r0, [r3]
   18828:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1882c:	ldr	r3, [r3, #4]
   18830:	mov	r2, r3
   18834:	ldr	r3, [pc, #200]	; 18904 <get_boolean_op_value@@Base+0x450>
   18838:	add	r3, pc, r3
   1883c:	mov	r1, r3
   18840:	bl	11930 <fprintf@plt>
   18844:	ldr	r3, [pc, #188]	; 18908 <get_boolean_op_value@@Base+0x454>
   18848:	add	r3, pc, r3
   1884c:	ldrd	r2, [r3, #104]	; 0x68
   18850:	adds	r2, r2, #1
   18854:	adc	r3, r3, #0
   18858:	ldr	r1, [pc, #172]	; 1890c <get_boolean_op_value@@Base+0x458>
   1885c:	add	r1, pc, r1
   18860:	strd	r2, [r1, #104]	; 0x68
   18864:	mov	r0, #1
   18868:	bl	11918 <exit@plt>
   1886c:	mov	r0, r3
   18870:	sub	sp, fp, #8
   18874:	pop	{r4, fp, pc}
   18878:	andeq	r5, r1, r0, lsr fp
   1887c:	andeq	r6, r1, r8, asr sp
   18880:	andeq	r6, r1, r4, asr #26
   18884:	andeq	r4, r0, ip, lsl #19
   18888:	andeq	r6, r1, r8, ror #25
   1888c:	ldrdeq	r6, [r1], -r4
   18890:	andeq	r4, r0, r0, asr #18
   18894:	muleq	r1, r8, ip
   18898:	andeq	r6, r1, r4, lsl #25
   1889c:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   188a0:	andeq	r6, r1, r8, asr #24
   188a4:	andeq	r6, r1, r4, lsr ip
   188a8:	andeq	r4, r0, r8, lsr #17
   188ac:	strdeq	r6, [r1], -r8
   188b0:	andeq	r6, r1, r4, ror #23
   188b4:	andeq	r4, r0, ip, asr r8
   188b8:	andeq	r6, r1, r8, lsr #23
   188bc:	muleq	r1, r4, fp
   188c0:	andeq	r4, r0, r0, lsl r8
   188c4:	andeq	r6, r1, r8, asr fp
   188c8:	andeq	r6, r1, r4, asr #22
   188cc:	andeq	r6, r1, r4, lsr fp
   188d0:	andeq	r6, r1, r0, lsr #22
   188d4:	andeq	r0, r0, r4, lsr #1
   188d8:	muleq	r0, r8, r7
   188dc:	andeq	r6, r1, ip, ror #21
   188e0:	ldrdeq	r6, [r1], -r8
   188e4:	muleq	r1, ip, sl
   188e8:	andeq	r6, r1, r8, lsl #21
   188ec:	andeq	r6, r1, r4, ror sl
   188f0:	andeq	r6, r1, r0, ror #20
   188f4:	andeq	r6, r1, ip, asr #20
   188f8:	andeq	r6, r1, r8, lsr sl
   188fc:	andeq	r6, r1, r8, lsr #20
   18900:	andeq	r6, r1, r4, lsl sl
   18904:	andeq	r4, r0, ip, lsl #13
   18908:	andeq	r6, r1, r0, ror #19
   1890c:	andeq	r6, r1, ip, asr #19
   18910:	push	{fp, lr}
   18914:	add	fp, sp, #4
   18918:	ldr	r3, [pc, #12]	; 1892c <get_boolean_op_value@@Base+0x478>
   1891c:	add	r3, pc, r3
   18920:	mov	r0, r3
   18924:	bl	1c3c4 <__gcov_sort_n_vals@@Base+0x458>
   18928:	pop	{fp, pc}
   1892c:			; <UNDEFINED> instruction: 0x00015ebc

00018930 <init_grammar@@Base>:
   18930:	push	{fp}		; (str fp, [sp, #-4]!)
   18934:	add	fp, sp, #0
   18938:	sub	sp, sp, #12
   1893c:	str	r0, [fp, #-8]
   18940:	str	r1, [fp, #-12]
   18944:	ldr	r3, [pc, #52]	; 18980 <init_grammar@@Base+0x50>
   18948:	add	r3, pc, r3
   1894c:	ldrd	r2, [r3]
   18950:	adds	r2, r2, #1
   18954:	adc	r3, r3, #0
   18958:	ldr	r1, [pc, #36]	; 18984 <init_grammar@@Base+0x54>
   1895c:	add	r1, pc, r1
   18960:	strd	r2, [r1]
   18964:	ldr	r3, [fp, #-8]
   18968:	ldr	r2, [fp, #-12]
   1896c:	str	r2, [r3]
   18970:	nop			; (mov r0, r0)
   18974:	add	sp, fp, #0
   18978:	pop	{fp}		; (ldr fp, [sp], #4)
   1897c:	bx	lr
   18980:	andeq	r6, r1, r0, asr #28
   18984:	andeq	r6, r1, ip, lsr #28

00018988 <destroy_grammar@@Base>:
   18988:	push	{fp}		; (str fp, [sp, #-4]!)
   1898c:	add	fp, sp, #0
   18990:	sub	sp, sp, #12
   18994:	str	r0, [fp, #-8]
   18998:	ldr	r3, [pc, #40]	; 189c8 <destroy_grammar@@Base+0x40>
   1899c:	add	r3, pc, r3
   189a0:	ldrd	r2, [r3]
   189a4:	adds	r2, r2, #1
   189a8:	adc	r3, r3, #0
   189ac:	ldr	r1, [pc, #24]	; 189cc <destroy_grammar@@Base+0x44>
   189b0:	add	r1, pc, r1
   189b4:	strd	r2, [r1]
   189b8:	nop			; (mov r0, r0)
   189bc:	add	sp, fp, #0
   189c0:	pop	{fp}		; (ldr fp, [sp], #4)
   189c4:	bx	lr
   189c8:	andeq	r6, r1, r4, ror #27
   189cc:	ldrdeq	r6, [r1], -r0

000189d0 <build_ast@@Base>:
   189d0:	push	{fp, lr}
   189d4:	add	fp, sp, #4
   189d8:	sub	sp, sp, #8
   189dc:	str	r0, [fp, #-8]
   189e0:	ldr	r3, [pc, #80]	; 18a38 <build_ast@@Base+0x68>
   189e4:	add	r3, pc, r3
   189e8:	ldrd	r2, [r3]
   189ec:	adds	r2, r2, #1
   189f0:	adc	r3, r3, #0
   189f4:	ldr	r1, [pc, #64]	; 18a3c <build_ast@@Base+0x6c>
   189f8:	add	r1, pc, r1
   189fc:	strd	r2, [r1]
   18a00:	ldr	r0, [fp, #-8]
   18a04:	bl	18a48 <read_function_ast_node@@Base>
   18a08:	ldr	r3, [pc, #48]	; 18a40 <build_ast@@Base+0x70>
   18a0c:	add	r3, pc, r3
   18a10:	ldrd	r2, [r3, #8]
   18a14:	adds	r2, r2, #1
   18a18:	adc	r3, r3, #0
   18a1c:	ldr	r1, [pc, #32]	; 18a44 <build_ast@@Base+0x74>
   18a20:	add	r1, pc, r1
   18a24:	strd	r2, [r1, #8]
   18a28:	mov	r3, r0
   18a2c:	mov	r0, r3
   18a30:	sub	sp, fp, #4
   18a34:	pop	{fp, pc}
   18a38:	andeq	r6, r1, ip, lsl #27
   18a3c:	andeq	r6, r1, r8, ror sp
   18a40:	andeq	r6, r1, r4, ror #26
   18a44:	andeq	r6, r1, r0, asr sp

00018a48 <read_function_ast_node@@Base>:
   18a48:	push	{fp, lr}
   18a4c:	add	fp, sp, #4
   18a50:	sub	sp, sp, #24
   18a54:	str	r0, [fp, #-24]	; 0xffffffe8
   18a58:	ldr	r3, [pc, #788]	; 18d74 <read_function_ast_node@@Base+0x32c>
   18a5c:	add	r3, pc, r3
   18a60:	ldrd	r2, [r3]
   18a64:	adds	r2, r2, #1
   18a68:	adc	r3, r3, #0
   18a6c:	ldr	r1, [pc, #772]	; 18d78 <read_function_ast_node@@Base+0x330>
   18a70:	add	r1, pc, r1
   18a74:	strd	r2, [r1]
   18a78:	mov	r3, #0
   18a7c:	str	r3, [fp, #-8]
   18a80:	mov	r3, #0
   18a84:	str	r3, [fp, #-12]
   18a88:	mov	r3, #0
   18a8c:	str	r3, [fp, #-16]
   18a90:	mov	r3, #0
   18a94:	str	r3, [fp, #-20]	; 0xffffffec
   18a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a9c:	ldr	r3, [r3]
   18aa0:	mov	r0, r3
   18aa4:	bl	11b18 <next@@Base>
   18aa8:	str	r0, [fp, #-16]
   18aac:	ldr	r3, [fp, #-16]
   18ab0:	ldr	r3, [r3]
   18ab4:	cmp	r3, #0
   18ab8:	beq	18ae4 <read_function_ast_node@@Base+0x9c>
   18abc:	mov	r3, #0
   18ac0:	ldr	r2, [pc, #692]	; 18d7c <read_function_ast_node@@Base+0x334>
   18ac4:	add	r2, pc, r2
   18ac8:	ldrd	r0, [r2, #16]
   18acc:	adds	r0, r0, #1
   18ad0:	adc	r1, r1, #0
   18ad4:	ldr	r2, [pc, #676]	; 18d80 <read_function_ast_node@@Base+0x338>
   18ad8:	add	r2, pc, r2
   18adc:	strd	r0, [r2, #16]
   18ae0:	b	18d68 <read_function_ast_node@@Base+0x320>
   18ae4:	ldr	r3, [pc, #664]	; 18d84 <read_function_ast_node@@Base+0x33c>
   18ae8:	add	r3, pc, r3
   18aec:	ldrd	r2, [r3, #8]
   18af0:	adds	r2, r2, #1
   18af4:	adc	r3, r3, #0
   18af8:	ldr	r1, [pc, #648]	; 18d88 <read_function_ast_node@@Base+0x340>
   18afc:	add	r1, pc, r1
   18b00:	strd	r2, [r1, #8]
   18b04:	ldr	r0, [fp, #-16]
   18b08:	bl	17340 <free_token_int_type@@Base>
   18b0c:	ldr	r3, [pc, #632]	; 18d8c <read_function_ast_node@@Base+0x344>
   18b10:	add	r3, pc, r3
   18b14:	ldrd	r2, [r3, #24]
   18b18:	adds	r2, r2, #1
   18b1c:	adc	r3, r3, #0
   18b20:	ldr	r1, [pc, #616]	; 18d90 <read_function_ast_node@@Base+0x348>
   18b24:	add	r1, pc, r1
   18b28:	strd	r2, [r1, #24]
   18b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b30:	ldr	r3, [r3]
   18b34:	mov	r0, r3
   18b38:	bl	11b18 <next@@Base>
   18b3c:	str	r0, [fp, #-16]
   18b40:	ldr	r3, [fp, #-16]
   18b44:	ldr	r3, [r3]
   18b48:	cmp	r3, #2
   18b4c:	beq	18b78 <read_function_ast_node@@Base+0x130>
   18b50:	mov	r3, #0
   18b54:	ldr	r2, [pc, #568]	; 18d94 <read_function_ast_node@@Base+0x34c>
   18b58:	add	r2, pc, r2
   18b5c:	ldrd	r0, [r2, #40]	; 0x28
   18b60:	adds	r0, r0, #1
   18b64:	adc	r1, r1, #0
   18b68:	ldr	r2, [pc, #552]	; 18d98 <read_function_ast_node@@Base+0x350>
   18b6c:	add	r2, pc, r2
   18b70:	strd	r0, [r2, #40]	; 0x28
   18b74:	b	18d68 <read_function_ast_node@@Base+0x320>
   18b78:	ldr	r3, [pc, #540]	; 18d9c <read_function_ast_node@@Base+0x354>
   18b7c:	add	r3, pc, r3
   18b80:	ldrd	r2, [r3, #32]
   18b84:	adds	r2, r2, #1
   18b88:	adc	r3, r3, #0
   18b8c:	ldr	r1, [pc, #524]	; 18da0 <read_function_ast_node@@Base+0x358>
   18b90:	add	r1, pc, r1
   18b94:	strd	r2, [r1, #32]
   18b98:	ldr	r3, [fp, #-16]
   18b9c:	str	r3, [fp, #-20]	; 0xffffffec
   18ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ba4:	ldr	r3, [r3]
   18ba8:	mov	r0, r3
   18bac:	bl	11b18 <next@@Base>
   18bb0:	str	r0, [fp, #-16]
   18bb4:	ldr	r3, [fp, #-16]
   18bb8:	ldr	r3, [r3]
   18bbc:	cmp	r3, #3
   18bc0:	beq	18bec <read_function_ast_node@@Base+0x1a4>
   18bc4:	mov	r3, #0
   18bc8:	ldr	r2, [pc, #468]	; 18da4 <read_function_ast_node@@Base+0x35c>
   18bcc:	add	r2, pc, r2
   18bd0:	ldrd	r0, [r2, #56]	; 0x38
   18bd4:	adds	r0, r0, #1
   18bd8:	adc	r1, r1, #0
   18bdc:	ldr	r2, [pc, #452]	; 18da8 <read_function_ast_node@@Base+0x360>
   18be0:	add	r2, pc, r2
   18be4:	strd	r0, [r2, #56]	; 0x38
   18be8:	b	18d68 <read_function_ast_node@@Base+0x320>
   18bec:	ldr	r3, [pc, #440]	; 18dac <read_function_ast_node@@Base+0x364>
   18bf0:	add	r3, pc, r3
   18bf4:	ldrd	r2, [r3, #48]	; 0x30
   18bf8:	adds	r2, r2, #1
   18bfc:	adc	r3, r3, #0
   18c00:	ldr	r1, [pc, #424]	; 18db0 <read_function_ast_node@@Base+0x368>
   18c04:	add	r1, pc, r1
   18c08:	strd	r2, [r1, #48]	; 0x30
   18c0c:	ldr	r0, [fp, #-16]
   18c10:	bl	17424 <free_token_opar@@Base>
   18c14:	ldr	r3, [pc, #408]	; 18db4 <read_function_ast_node@@Base+0x36c>
   18c18:	add	r3, pc, r3
   18c1c:	ldrd	r2, [r3, #64]	; 0x40
   18c20:	adds	r2, r2, #1
   18c24:	adc	r3, r3, #0
   18c28:	ldr	r1, [pc, #392]	; 18db8 <read_function_ast_node@@Base+0x370>
   18c2c:	add	r1, pc, r1
   18c30:	strd	r2, [r1, #64]	; 0x40
   18c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c38:	ldr	r3, [r3]
   18c3c:	mov	r0, r3
   18c40:	bl	11b18 <next@@Base>
   18c44:	str	r0, [fp, #-16]
   18c48:	ldr	r3, [fp, #-16]
   18c4c:	ldr	r3, [r3]
   18c50:	cmp	r3, #4
   18c54:	beq	18c80 <read_function_ast_node@@Base+0x238>
   18c58:	mov	r3, #0
   18c5c:	ldr	r2, [pc, #344]	; 18dbc <read_function_ast_node@@Base+0x374>
   18c60:	add	r2, pc, r2
   18c64:	ldrd	r0, [r2, #80]	; 0x50
   18c68:	adds	r0, r0, #1
   18c6c:	adc	r1, r1, #0
   18c70:	ldr	r2, [pc, #328]	; 18dc0 <read_function_ast_node@@Base+0x378>
   18c74:	add	r2, pc, r2
   18c78:	strd	r0, [r2, #80]	; 0x50
   18c7c:	b	18d68 <read_function_ast_node@@Base+0x320>
   18c80:	ldr	r3, [pc, #316]	; 18dc4 <read_function_ast_node@@Base+0x37c>
   18c84:	add	r3, pc, r3
   18c88:	ldrd	r2, [r3, #72]	; 0x48
   18c8c:	adds	r2, r2, #1
   18c90:	adc	r3, r3, #0
   18c94:	ldr	r1, [pc, #300]	; 18dc8 <read_function_ast_node@@Base+0x380>
   18c98:	add	r1, pc, r1
   18c9c:	strd	r2, [r1, #72]	; 0x48
   18ca0:	ldr	r0, [fp, #-16]
   18ca4:	bl	17470 <free_token_cpar@@Base>
   18ca8:	ldr	r3, [pc, #284]	; 18dcc <read_function_ast_node@@Base+0x384>
   18cac:	add	r3, pc, r3
   18cb0:	ldrd	r2, [r3, #88]	; 0x58
   18cb4:	adds	r2, r2, #1
   18cb8:	adc	r3, r3, #0
   18cbc:	ldr	r1, [pc, #268]	; 18dd0 <read_function_ast_node@@Base+0x388>
   18cc0:	add	r1, pc, r1
   18cc4:	strd	r2, [r1, #88]	; 0x58
   18cc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ccc:	bl	18dec <read_body@@Base>
   18cd0:	str	r0, [fp, #-12]
   18cd4:	ldr	r3, [pc, #248]	; 18dd4 <read_function_ast_node@@Base+0x38c>
   18cd8:	add	r3, pc, r3
   18cdc:	ldrd	r2, [r3, #96]	; 0x60
   18ce0:	adds	r2, r2, #1
   18ce4:	adc	r3, r3, #0
   18ce8:	ldr	r1, [pc, #232]	; 18dd8 <read_function_ast_node@@Base+0x390>
   18cec:	add	r1, pc, r1
   18cf0:	strd	r2, [r1, #96]	; 0x60
   18cf4:	mov	r0, #16
   18cf8:	bl	118d0 <malloc@plt>
   18cfc:	mov	r3, r0
   18d00:	str	r3, [fp, #-8]
   18d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d08:	ldr	r3, [r3, #4]
   18d0c:	ldr	r2, [fp, #-12]
   18d10:	mov	r1, r3
   18d14:	ldr	r0, [fp, #-8]
   18d18:	bl	17984 <init_node_function@@Base>
   18d1c:	ldr	r3, [pc, #184]	; 18ddc <read_function_ast_node@@Base+0x394>
   18d20:	add	r3, pc, r3
   18d24:	ldrd	r2, [r3, #104]	; 0x68
   18d28:	adds	r2, r2, #1
   18d2c:	adc	r3, r3, #0
   18d30:	ldr	r1, [pc, #168]	; 18de0 <read_function_ast_node@@Base+0x398>
   18d34:	add	r1, pc, r1
   18d38:	strd	r2, [r1, #104]	; 0x68
   18d3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18d40:	bl	173d8 <free_token_function@@Base>
   18d44:	ldr	r3, [fp, #-8]
   18d48:	ldr	r2, [pc, #148]	; 18de4 <read_function_ast_node@@Base+0x39c>
   18d4c:	add	r2, pc, r2
   18d50:	ldrd	r0, [r2, #112]	; 0x70
   18d54:	adds	r0, r0, #1
   18d58:	adc	r1, r1, #0
   18d5c:	ldr	r2, [pc, #132]	; 18de8 <read_function_ast_node@@Base+0x3a0>
   18d60:	add	r2, pc, r2
   18d64:	strd	r0, [r2, #112]	; 0x70
   18d68:	mov	r0, r3
   18d6c:	sub	sp, fp, #4
   18d70:	pop	{fp, pc}
   18d74:	muleq	r1, ip, ip
   18d78:	andeq	r6, r1, r8, lsl #25
   18d7c:	andeq	r6, r1, r4, lsr ip
   18d80:	andeq	r6, r1, r0, lsr #24
   18d84:	andeq	r6, r1, r0, lsl ip
   18d88:	strdeq	r6, [r1], -ip
   18d8c:	andeq	r6, r1, r8, ror #23
   18d90:	ldrdeq	r6, [r1], -r4
   18d94:	andeq	r6, r1, r0, lsr #23
   18d98:	andeq	r6, r1, ip, lsl #23
   18d9c:	andeq	r6, r1, ip, ror fp
   18da0:	andeq	r6, r1, r8, ror #22
   18da4:	andeq	r6, r1, ip, lsr #22
   18da8:	andeq	r6, r1, r8, lsl fp
   18dac:	andeq	r6, r1, r8, lsl #22
   18db0:	strdeq	r6, [r1], -r4
   18db4:	andeq	r6, r1, r0, ror #21
   18db8:	andeq	r6, r1, ip, asr #21
   18dbc:	muleq	r1, r8, sl
   18dc0:	andeq	r6, r1, r4, lsl #21
   18dc4:	andeq	r6, r1, r4, ror sl
   18dc8:	andeq	r6, r1, r0, ror #20
   18dcc:	andeq	r6, r1, ip, asr #20
   18dd0:	andeq	r6, r1, r8, lsr sl
   18dd4:	andeq	r6, r1, r0, lsr #20
   18dd8:	andeq	r6, r1, ip, lsl #20
   18ddc:	ldrdeq	r6, [r1], -r8
   18de0:	andeq	r6, r1, r4, asr #19
   18de4:	andeq	r6, r1, ip, lsr #19
   18de8:	muleq	r1, r8, r9

00018dec <read_body@@Base>:
   18dec:	push	{fp, lr}
   18df0:	add	fp, sp, #4
   18df4:	sub	sp, sp, #24
   18df8:	str	r0, [fp, #-24]	; 0xffffffe8
   18dfc:	ldr	r3, [pc, #840]	; 1914c <read_body@@Base+0x360>
   18e00:	add	r3, pc, r3
   18e04:	ldrd	r2, [r3]
   18e08:	adds	r2, r2, #1
   18e0c:	adc	r3, r3, #0
   18e10:	ldr	r1, [pc, #824]	; 19150 <read_body@@Base+0x364>
   18e14:	add	r1, pc, r1
   18e18:	strd	r2, [r1]
   18e1c:	mov	r3, #0
   18e20:	str	r3, [fp, #-8]
   18e24:	mov	r3, #0
   18e28:	str	r3, [fp, #-12]
   18e2c:	mov	r3, #0
   18e30:	str	r3, [fp, #-16]
   18e34:	mov	r3, #0
   18e38:	str	r3, [fp, #-20]	; 0xffffffec
   18e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e40:	ldr	r3, [r3]
   18e44:	mov	r0, r3
   18e48:	bl	11b18 <next@@Base>
   18e4c:	str	r0, [fp, #-20]	; 0xffffffec
   18e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e54:	ldr	r3, [r3]
   18e58:	cmp	r3, #5
   18e5c:	beq	18e88 <read_body@@Base+0x9c>
   18e60:	mov	r1, #0
   18e64:	ldr	r3, [pc, #744]	; 19154 <read_body@@Base+0x368>
   18e68:	add	r3, pc, r3
   18e6c:	ldrd	r2, [r3, #16]
   18e70:	adds	r2, r2, #1
   18e74:	adc	r3, r3, #0
   18e78:	ldr	r0, [pc, #728]	; 19158 <read_body@@Base+0x36c>
   18e7c:	add	r0, pc, r0
   18e80:	strd	r2, [r0, #16]
   18e84:	b	1913c <read_body@@Base+0x350>
   18e88:	ldr	r3, [pc, #716]	; 1915c <read_body@@Base+0x370>
   18e8c:	add	r3, pc, r3
   18e90:	ldrd	r2, [r3, #8]
   18e94:	adds	r2, r2, #1
   18e98:	adc	r3, r3, #0
   18e9c:	ldr	r1, [pc, #700]	; 19160 <read_body@@Base+0x374>
   18ea0:	add	r1, pc, r1
   18ea4:	strd	r2, [r1, #8]
   18ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18eac:	bl	174bc <free_token_obra@@Base>
   18eb0:	ldr	r3, [pc, #684]	; 19164 <read_body@@Base+0x378>
   18eb4:	add	r3, pc, r3
   18eb8:	ldrd	r2, [r3, #24]
   18ebc:	adds	r2, r2, #1
   18ec0:	adc	r3, r3, #0
   18ec4:	ldr	r1, [pc, #668]	; 19168 <read_body@@Base+0x37c>
   18ec8:	add	r1, pc, r1
   18ecc:	strd	r2, [r1, #24]
   18ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ed4:	ldr	r3, [r3]
   18ed8:	mov	r0, r3
   18edc:	bl	11b18 <next@@Base>
   18ee0:	str	r0, [fp, #-20]	; 0xffffffec
   18ee4:	nop			; (mov r0, r0)
   18ee8:	ldr	r3, [pc, #636]	; 1916c <read_body@@Base+0x380>
   18eec:	add	r3, pc, r3
   18ef0:	ldrd	r2, [r3, #32]
   18ef4:	adds	r2, r2, #1
   18ef8:	adc	r3, r3, #0
   18efc:	ldr	r1, [pc, #620]	; 19170 <read_body@@Base+0x384>
   18f00:	add	r1, pc, r1
   18f04:	strd	r2, [r1, #32]
   18f08:	b	190e0 <read_body@@Base+0x2f4>
   18f0c:	ldr	r3, [pc, #608]	; 19174 <read_body@@Base+0x388>
   18f10:	add	r3, pc, r3
   18f14:	ldrd	r2, [r3, #104]	; 0x68
   18f18:	adds	r2, r2, #1
   18f1c:	adc	r3, r3, #0
   18f20:	ldr	r1, [pc, #592]	; 19178 <read_body@@Base+0x38c>
   18f24:	add	r1, pc, r1
   18f28:	strd	r2, [r1, #104]	; 0x68
   18f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f30:	ldr	r3, [r3]
   18f34:	cmp	r3, #7
   18f38:	beq	18f48 <read_body@@Base+0x15c>
   18f3c:	cmp	r3, #10
   18f40:	beq	18fc4 <read_body@@Base+0x1d8>
   18f44:	b	1901c <read_body@@Base+0x230>
   18f48:	ldr	r3, [pc, #556]	; 1917c <read_body@@Base+0x390>
   18f4c:	add	r3, pc, r3
   18f50:	ldrd	r2, [r3, #40]	; 0x28
   18f54:	adds	r2, r2, #1
   18f58:	adc	r3, r3, #0
   18f5c:	ldr	r1, [pc, #540]	; 19180 <read_body@@Base+0x394>
   18f60:	add	r1, pc, r1
   18f64:	strd	r2, [r1, #40]	; 0x28
   18f68:	ldr	r0, [fp, #-20]	; 0xffffffec
   18f6c:	bl	17554 <free_token_return@@Base>
   18f70:	ldr	r3, [pc, #524]	; 19184 <read_body@@Base+0x398>
   18f74:	add	r3, pc, r3
   18f78:	ldrd	r2, [r3, #56]	; 0x38
   18f7c:	adds	r2, r2, #1
   18f80:	adc	r3, r3, #0
   18f84:	ldr	r1, [pc, #508]	; 19188 <read_body@@Base+0x39c>
   18f88:	add	r1, pc, r1
   18f8c:	strd	r2, [r1, #56]	; 0x38
   18f90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f94:	bl	191cc <read_return_expression@@Base>
   18f98:	str	r0, [fp, #-12]
   18f9c:	nop			; (mov r0, r0)
   18fa0:	ldr	r3, [pc, #484]	; 1918c <read_body@@Base+0x3a0>
   18fa4:	add	r3, pc, r3
   18fa8:	ldrd	r2, [r3, #80]	; 0x50
   18fac:	adds	r2, r2, #1
   18fb0:	adc	r3, r3, #0
   18fb4:	ldr	r1, [pc, #468]	; 19190 <read_body@@Base+0x3a4>
   18fb8:	add	r1, pc, r1
   18fbc:	strd	r2, [r1, #80]	; 0x50
   18fc0:	b	19058 <read_body@@Base+0x26c>
   18fc4:	ldr	r3, [pc, #456]	; 19194 <read_body@@Base+0x3a8>
   18fc8:	add	r3, pc, r3
   18fcc:	ldrd	r2, [r3, #48]	; 0x30
   18fd0:	adds	r2, r2, #1
   18fd4:	adc	r3, r3, #0
   18fd8:	ldr	r1, [pc, #440]	; 19198 <read_body@@Base+0x3ac>
   18fdc:	add	r1, pc, r1
   18fe0:	strd	r2, [r1, #48]	; 0x30
   18fe4:	ldr	r0, [fp, #-20]	; 0xffffffec
   18fe8:	bl	17638 <free_token_if@@Base>
   18fec:	ldr	r3, [pc, #424]	; 1919c <read_body@@Base+0x3b0>
   18ff0:	add	r3, pc, r3
   18ff4:	ldrd	r2, [r3, #64]	; 0x40
   18ff8:	adds	r2, r2, #1
   18ffc:	adc	r3, r3, #0
   19000:	ldr	r1, [pc, #408]	; 191a0 <read_body@@Base+0x3b4>
   19004:	add	r1, pc, r1
   19008:	strd	r2, [r1, #64]	; 0x40
   1900c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19010:	bl	19428 <read_if_statement@@Base>
   19014:	str	r0, [fp, #-12]
   19018:	b	19058 <read_body@@Base+0x26c>
   1901c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19020:	ldr	r3, [r3]
   19024:	ldr	r1, [fp, #-20]	; 0xffffffec
   19028:	mov	r0, r3
   1902c:	bl	11e7c <push_back@@Base>
   19030:	ldr	r1, [fp, #-8]
   19034:	ldr	r3, [pc, #360]	; 191a4 <read_body@@Base+0x3b8>
   19038:	add	r3, pc, r3
   1903c:	ldrd	r2, [r3, #72]	; 0x48
   19040:	adds	r2, r2, #1
   19044:	adc	r3, r3, #0
   19048:	ldr	r0, [pc, #344]	; 191a8 <read_body@@Base+0x3bc>
   1904c:	add	r0, pc, r0
   19050:	strd	r2, [r0, #72]	; 0x48
   19054:	b	1913c <read_body@@Base+0x350>
   19058:	ldr	r3, [fp, #-8]
   1905c:	cmp	r3, #0
   19060:	beq	1909c <read_body@@Base+0x2b0>
   19064:	ldr	r3, [fp, #-16]
   19068:	ldr	r2, [fp, #-12]
   1906c:	str	r2, [r3, #4]
   19070:	ldr	r3, [fp, #-12]
   19074:	str	r3, [fp, #-16]
   19078:	ldr	r3, [pc, #300]	; 191ac <read_body@@Base+0x3c0>
   1907c:	add	r3, pc, r3
   19080:	ldrd	r2, [r3, #88]	; 0x58
   19084:	adds	r2, r2, #1
   19088:	adc	r3, r3, #0
   1908c:	ldr	r1, [pc, #284]	; 191b0 <read_body@@Base+0x3c4>
   19090:	add	r1, pc, r1
   19094:	strd	r2, [r1, #88]	; 0x58
   19098:	b	190cc <read_body@@Base+0x2e0>
   1909c:	ldr	r3, [fp, #-12]
   190a0:	str	r3, [fp, #-8]
   190a4:	ldr	r3, [fp, #-12]
   190a8:	str	r3, [fp, #-16]
   190ac:	ldr	r3, [pc, #256]	; 191b4 <read_body@@Base+0x3c8>
   190b0:	add	r3, pc, r3
   190b4:	ldrd	r2, [r3, #96]	; 0x60
   190b8:	adds	r2, r2, #1
   190bc:	adc	r3, r3, #0
   190c0:	ldr	r1, [pc, #240]	; 191b8 <read_body@@Base+0x3cc>
   190c4:	add	r1, pc, r1
   190c8:	strd	r2, [r1, #96]	; 0x60
   190cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   190d0:	ldr	r3, [r3]
   190d4:	mov	r0, r3
   190d8:	bl	11b18 <next@@Base>
   190dc:	str	r0, [fp, #-20]	; 0xffffffec
   190e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   190e4:	ldr	r3, [r3]
   190e8:	cmp	r3, #6
   190ec:	bne	18f0c <read_body@@Base+0x120>
   190f0:	ldr	r3, [pc, #196]	; 191bc <read_body@@Base+0x3d0>
   190f4:	add	r3, pc, r3
   190f8:	ldrd	r2, [r3, #112]	; 0x70
   190fc:	adds	r2, r2, #1
   19100:	adc	r3, r3, #0
   19104:	ldr	r1, [pc, #180]	; 191c0 <read_body@@Base+0x3d4>
   19108:	add	r1, pc, r1
   1910c:	strd	r2, [r1, #112]	; 0x70
   19110:	ldr	r0, [fp, #-20]	; 0xffffffec
   19114:	bl	17508 <free_token_cbra@@Base>
   19118:	ldr	r1, [fp, #-8]
   1911c:	ldr	r3, [pc, #160]	; 191c4 <read_body@@Base+0x3d8>
   19120:	add	r3, pc, r3
   19124:	ldrd	r2, [r3, #120]	; 0x78
   19128:	adds	r2, r2, #1
   1912c:	adc	r3, r3, #0
   19130:	ldr	r0, [pc, #144]	; 191c8 <read_body@@Base+0x3dc>
   19134:	add	r0, pc, r0
   19138:	strd	r2, [r0, #120]	; 0x78
   1913c:	mov	r3, r1
   19140:	mov	r0, r3
   19144:	sub	sp, fp, #4
   19148:	pop	{fp, pc}
   1914c:	andeq	r6, r1, r8, ror r8
   19150:	andeq	r6, r1, r4, ror #16
   19154:	andeq	r6, r1, r0, lsl r8
   19158:	strdeq	r6, [r1], -ip
   1915c:	andeq	r6, r1, ip, ror #15
   19160:	ldrdeq	r6, [r1], -r8
   19164:	andeq	r6, r1, r4, asr #15
   19168:			; <UNDEFINED> instruction: 0x000167b0
   1916c:	andeq	r6, r1, ip, lsl #15
   19170:	andeq	r6, r1, r8, ror r7
   19174:	andeq	r6, r1, r8, ror #14
   19178:	andeq	r6, r1, r4, asr r7
   1917c:	andeq	r6, r1, ip, lsr #14
   19180:	andeq	r6, r1, r8, lsl r7
   19184:	andeq	r6, r1, r4, lsl #14
   19188:	strdeq	r6, [r1], -r0
   1918c:	ldrdeq	r6, [r1], -r4
   19190:	andeq	r6, r1, r0, asr #13
   19194:			; <UNDEFINED> instruction: 0x000166b0
   19198:	muleq	r1, ip, r6
   1919c:	andeq	r6, r1, r8, lsl #13
   191a0:	andeq	r6, r1, r4, ror r6
   191a4:	andeq	r6, r1, r0, asr #12
   191a8:	andeq	r6, r1, ip, lsr #12
   191ac:	strdeq	r6, [r1], -ip
   191b0:	andeq	r6, r1, r8, ror #11
   191b4:	andeq	r6, r1, r8, asr #11
   191b8:			; <UNDEFINED> instruction: 0x000165b4
   191bc:	andeq	r6, r1, r4, lsl #11
   191c0:	andeq	r6, r1, r0, ror r5
   191c4:	andeq	r6, r1, r8, asr r5
   191c8:	andeq	r6, r1, r4, asr #10

000191cc <read_return_expression@@Base>:
   191cc:	push	{fp, lr}
   191d0:	add	fp, sp, #4
   191d4:	sub	sp, sp, #24
   191d8:	str	r0, [fp, #-24]	; 0xffffffe8
   191dc:	ldr	r3, [pc, #508]	; 193e0 <read_return_expression@@Base+0x214>
   191e0:	add	r3, pc, r3
   191e4:	ldrd	r2, [r3]
   191e8:	adds	r2, r2, #1
   191ec:	adc	r3, r3, #0
   191f0:	ldr	r1, [pc, #492]	; 193e4 <read_return_expression@@Base+0x218>
   191f4:	add	r1, pc, r1
   191f8:	strd	r2, [r1]
   191fc:	mov	r3, #0
   19200:	str	r3, [fp, #-8]
   19204:	mov	r3, #0
   19208:	str	r3, [fp, #-12]
   1920c:	mov	r3, #0
   19210:	str	r3, [fp, #-16]
   19214:	mov	r3, #0
   19218:	str	r3, [fp, #-20]	; 0xffffffec
   1921c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19220:	ldr	r3, [r3]
   19224:	mov	r0, r3
   19228:	bl	11b18 <next@@Base>
   1922c:	str	r0, [fp, #-16]
   19230:	ldr	r3, [fp, #-16]
   19234:	ldr	r3, [r3]
   19238:	cmp	r3, #1
   1923c:	beq	19268 <read_return_expression@@Base+0x9c>
   19240:	mov	r1, #0
   19244:	ldr	r3, [pc, #412]	; 193e8 <read_return_expression@@Base+0x21c>
   19248:	add	r3, pc, r3
   1924c:	ldrd	r2, [r3, #16]
   19250:	adds	r2, r2, #1
   19254:	adc	r3, r3, #0
   19258:	ldr	r0, [pc, #396]	; 193ec <read_return_expression@@Base+0x220>
   1925c:	add	r0, pc, r0
   19260:	strd	r2, [r0, #16]
   19264:	b	193d0 <read_return_expression@@Base+0x204>
   19268:	ldr	r3, [pc, #384]	; 193f0 <read_return_expression@@Base+0x224>
   1926c:	add	r3, pc, r3
   19270:	ldrd	r2, [r3, #8]
   19274:	adds	r2, r2, #1
   19278:	adc	r3, r3, #0
   1927c:	ldr	r1, [pc, #368]	; 193f4 <read_return_expression@@Base+0x228>
   19280:	add	r1, pc, r1
   19284:	strd	r2, [r1, #8]
   19288:	ldr	r3, [fp, #-16]
   1928c:	str	r3, [fp, #-20]	; 0xffffffec
   19290:	mov	r0, #12
   19294:	bl	118d0 <malloc@plt>
   19298:	mov	r3, r0
   1929c:	str	r3, [fp, #-12]
   192a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   192a4:	ldr	r3, [r3, #4]
   192a8:	mov	r1, r3
   192ac:	ldr	r0, [fp, #-12]
   192b0:	bl	178f8 <init_node_int@@Base>
   192b4:	ldr	r3, [pc, #316]	; 193f8 <read_return_expression@@Base+0x22c>
   192b8:	add	r3, pc, r3
   192bc:	ldrd	r2, [r3, #24]
   192c0:	adds	r2, r2, #1
   192c4:	adc	r3, r3, #0
   192c8:	ldr	r1, [pc, #300]	; 193fc <read_return_expression@@Base+0x230>
   192cc:	add	r1, pc, r1
   192d0:	strd	r2, [r1, #24]
   192d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   192d8:	bl	1738c <free_token_int_value@@Base>
   192dc:	ldr	r3, [pc, #284]	; 19400 <read_return_expression@@Base+0x234>
   192e0:	add	r3, pc, r3
   192e4:	ldrd	r2, [r3, #32]
   192e8:	adds	r2, r2, #1
   192ec:	adc	r3, r3, #0
   192f0:	ldr	r1, [pc, #268]	; 19404 <read_return_expression@@Base+0x238>
   192f4:	add	r1, pc, r1
   192f8:	strd	r2, [r1, #32]
   192fc:	mov	r0, #12
   19300:	bl	118d0 <malloc@plt>
   19304:	mov	r3, r0
   19308:	str	r3, [fp, #-8]
   1930c:	ldr	r1, [fp, #-12]
   19310:	ldr	r0, [fp, #-8]
   19314:	bl	17a20 <init_node_return@@Base>
   19318:	ldr	r3, [pc, #232]	; 19408 <read_return_expression@@Base+0x23c>
   1931c:	add	r3, pc, r3
   19320:	ldrd	r2, [r3, #40]	; 0x28
   19324:	adds	r2, r2, #1
   19328:	adc	r3, r3, #0
   1932c:	ldr	r1, [pc, #216]	; 1940c <read_return_expression@@Base+0x240>
   19330:	add	r1, pc, r1
   19334:	strd	r2, [r1, #40]	; 0x28
   19338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1933c:	ldr	r3, [r3]
   19340:	mov	r0, r3
   19344:	bl	11b18 <next@@Base>
   19348:	str	r0, [fp, #-16]
   1934c:	ldr	r3, [fp, #-16]
   19350:	ldr	r3, [r3]
   19354:	cmp	r3, #8
   19358:	beq	19384 <read_return_expression@@Base+0x1b8>
   1935c:	mov	r1, #0
   19360:	ldr	r3, [pc, #168]	; 19410 <read_return_expression@@Base+0x244>
   19364:	add	r3, pc, r3
   19368:	ldrd	r2, [r3, #56]	; 0x38
   1936c:	adds	r2, r2, #1
   19370:	adc	r3, r3, #0
   19374:	ldr	r0, [pc, #152]	; 19414 <read_return_expression@@Base+0x248>
   19378:	add	r0, pc, r0
   1937c:	strd	r2, [r0, #56]	; 0x38
   19380:	b	193d0 <read_return_expression@@Base+0x204>
   19384:	ldr	r3, [pc, #140]	; 19418 <read_return_expression@@Base+0x24c>
   19388:	add	r3, pc, r3
   1938c:	ldrd	r2, [r3, #48]	; 0x30
   19390:	adds	r2, r2, #1
   19394:	adc	r3, r3, #0
   19398:	ldr	r1, [pc, #124]	; 1941c <read_return_expression@@Base+0x250>
   1939c:	add	r1, pc, r1
   193a0:	strd	r2, [r1, #48]	; 0x30
   193a4:	ldr	r0, [fp, #-16]
   193a8:	bl	175a0 <free_token_semicolon@@Base>
   193ac:	ldr	r1, [fp, #-8]
   193b0:	ldr	r3, [pc, #104]	; 19420 <read_return_expression@@Base+0x254>
   193b4:	add	r3, pc, r3
   193b8:	ldrd	r2, [r3, #64]	; 0x40
   193bc:	adds	r2, r2, #1
   193c0:	adc	r3, r3, #0
   193c4:	ldr	r0, [pc, #88]	; 19424 <read_return_expression@@Base+0x258>
   193c8:	add	r0, pc, r0
   193cc:	strd	r2, [r0, #64]	; 0x40
   193d0:	mov	r3, r1
   193d4:	mov	r0, r3
   193d8:	sub	sp, fp, #4
   193dc:	pop	{fp, pc}
   193e0:	andeq	r6, r1, r0, asr r4
   193e4:	andeq	r6, r1, ip, lsr r4
   193e8:	andeq	r6, r1, r8, ror #7
   193ec:	ldrdeq	r6, [r1], -r4
   193f0:	andeq	r6, r1, r4, asr #7
   193f4:			; <UNDEFINED> instruction: 0x000163b0
   193f8:	andeq	r6, r1, r8, ror r3
   193fc:	andeq	r6, r1, r4, ror #6
   19400:	andeq	r6, r1, r0, asr r3
   19404:	andeq	r6, r1, ip, lsr r3
   19408:	andeq	r6, r1, r4, lsl r3
   1940c:	andeq	r6, r1, r0, lsl #6
   19410:	andeq	r6, r1, ip, asr #5
   19414:			; <UNDEFINED> instruction: 0x000162b8
   19418:	andeq	r6, r1, r8, lsr #5
   1941c:	muleq	r1, r4, r2
   19420:	andeq	r6, r1, ip, ror r2
   19424:	andeq	r6, r1, r8, ror #4

00019428 <read_if_statement@@Base>:
   19428:	push	{fp, lr}
   1942c:	add	fp, sp, #4
   19430:	sub	sp, sp, #32
   19434:	str	r0, [fp, #-32]	; 0xffffffe0
   19438:	ldr	r3, [pc, #628]	; 196b4 <read_if_statement@@Base+0x28c>
   1943c:	add	r3, pc, r3
   19440:	ldrd	r2, [r3]
   19444:	adds	r2, r2, #1
   19448:	adc	r3, r3, #0
   1944c:	ldr	r1, [pc, #612]	; 196b8 <read_if_statement@@Base+0x290>
   19450:	add	r1, pc, r1
   19454:	strd	r2, [r1]
   19458:	mov	r3, #0
   1945c:	str	r3, [fp, #-12]
   19460:	mov	r3, #0
   19464:	str	r3, [fp, #-16]
   19468:	mov	r3, #0
   1946c:	str	r3, [fp, #-20]	; 0xffffffec
   19470:	mov	r3, #0
   19474:	str	r3, [fp, #-8]
   19478:	mov	r3, #0
   1947c:	str	r3, [fp, #-24]	; 0xffffffe8
   19480:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19484:	ldr	r3, [r3]
   19488:	mov	r0, r3
   1948c:	bl	11b18 <next@@Base>
   19490:	str	r0, [fp, #-24]	; 0xffffffe8
   19494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19498:	ldr	r3, [r3]
   1949c:	cmp	r3, #3
   194a0:	beq	194cc <read_if_statement@@Base+0xa4>
   194a4:	mov	r0, #0
   194a8:	ldr	r3, [pc, #524]	; 196bc <read_if_statement@@Base+0x294>
   194ac:	add	r3, pc, r3
   194b0:	ldrd	r2, [r3, #16]
   194b4:	adds	r2, r2, #1
   194b8:	adc	r3, r3, #0
   194bc:	ldr	r1, [pc, #508]	; 196c0 <read_if_statement@@Base+0x298>
   194c0:	add	r1, pc, r1
   194c4:	strd	r2, [r1, #16]
   194c8:	b	196a4 <read_if_statement@@Base+0x27c>
   194cc:	ldr	r3, [pc, #496]	; 196c4 <read_if_statement@@Base+0x29c>
   194d0:	add	r3, pc, r3
   194d4:	ldrd	r2, [r3, #8]
   194d8:	adds	r2, r2, #1
   194dc:	adc	r3, r3, #0
   194e0:	ldr	r1, [pc, #480]	; 196c8 <read_if_statement@@Base+0x2a0>
   194e4:	add	r1, pc, r1
   194e8:	strd	r2, [r1, #8]
   194ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   194f0:	bl	17424 <free_token_opar@@Base>
   194f4:	ldr	r3, [pc, #464]	; 196cc <read_if_statement@@Base+0x2a4>
   194f8:	add	r3, pc, r3
   194fc:	ldrd	r2, [r3, #24]
   19500:	adds	r2, r2, #1
   19504:	adc	r3, r3, #0
   19508:	ldr	r1, [pc, #448]	; 196d0 <read_if_statement@@Base+0x2a8>
   1950c:	add	r1, pc, r1
   19510:	strd	r2, [r1, #24]
   19514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19518:	bl	19714 <read_boolean_expression@@Base>
   1951c:	str	r0, [fp, #-16]
   19520:	ldr	r3, [pc, #428]	; 196d4 <read_if_statement@@Base+0x2ac>
   19524:	add	r3, pc, r3
   19528:	ldrd	r2, [r3, #32]
   1952c:	adds	r2, r2, #1
   19530:	adc	r3, r3, #0
   19534:	ldr	r1, [pc, #412]	; 196d8 <read_if_statement@@Base+0x2b0>
   19538:	add	r1, pc, r1
   1953c:	strd	r2, [r1, #32]
   19540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19544:	bl	18dec <read_body@@Base>
   19548:	str	r0, [fp, #-20]	; 0xffffffec
   1954c:	ldr	r3, [pc, #392]	; 196dc <read_if_statement@@Base+0x2b4>
   19550:	add	r3, pc, r3
   19554:	ldrd	r2, [r3, #40]	; 0x28
   19558:	adds	r2, r2, #1
   1955c:	adc	r3, r3, #0
   19560:	ldr	r1, [pc, #376]	; 196e0 <read_if_statement@@Base+0x2b8>
   19564:	add	r1, pc, r1
   19568:	strd	r2, [r1, #40]	; 0x28
   1956c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19570:	ldr	r3, [r3]
   19574:	mov	r0, r3
   19578:	bl	11b18 <next@@Base>
   1957c:	str	r0, [fp, #-24]	; 0xffffffe8
   19580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19584:	ldr	r3, [r3]
   19588:	cmp	r3, #11
   1958c:	bne	19608 <read_if_statement@@Base+0x1e0>
   19590:	ldr	r3, [pc, #332]	; 196e4 <read_if_statement@@Base+0x2bc>
   19594:	add	r3, pc, r3
   19598:	ldrd	r2, [r3, #48]	; 0x30
   1959c:	adds	r2, r2, #1
   195a0:	adc	r3, r3, #0
   195a4:	ldr	r1, [pc, #316]	; 196e8 <read_if_statement@@Base+0x2c0>
   195a8:	add	r1, pc, r1
   195ac:	strd	r2, [r1, #48]	; 0x30
   195b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   195b4:	bl	17684 <free_token_else@@Base>
   195b8:	ldr	r3, [pc, #300]	; 196ec <read_if_statement@@Base+0x2c4>
   195bc:	add	r3, pc, r3
   195c0:	ldrd	r2, [r3, #64]	; 0x40
   195c4:	adds	r2, r2, #1
   195c8:	adc	r3, r3, #0
   195cc:	ldr	r1, [pc, #284]	; 196f0 <read_if_statement@@Base+0x2c8>
   195d0:	add	r1, pc, r1
   195d4:	strd	r2, [r1, #64]	; 0x40
   195d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195dc:	bl	18dec <read_body@@Base>
   195e0:	str	r0, [fp, #-8]
   195e4:	ldr	r3, [pc, #264]	; 196f4 <read_if_statement@@Base+0x2cc>
   195e8:	add	r3, pc, r3
   195ec:	ldrd	r2, [r3, #72]	; 0x48
   195f0:	adds	r2, r2, #1
   195f4:	adc	r3, r3, #0
   195f8:	ldr	r1, [pc, #248]	; 196f8 <read_if_statement@@Base+0x2d0>
   195fc:	add	r1, pc, r1
   19600:	strd	r2, [r1, #72]	; 0x48
   19604:	b	1965c <read_if_statement@@Base+0x234>
   19608:	ldr	r3, [pc, #236]	; 196fc <read_if_statement@@Base+0x2d4>
   1960c:	add	r3, pc, r3
   19610:	ldrd	r2, [r3, #56]	; 0x38
   19614:	adds	r2, r2, #1
   19618:	adc	r3, r3, #0
   1961c:	ldr	r1, [pc, #220]	; 19700 <read_if_statement@@Base+0x2d8>
   19620:	add	r1, pc, r1
   19624:	strd	r2, [r1, #56]	; 0x38
   19628:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1962c:	ldr	r3, [r3]
   19630:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19634:	mov	r0, r3
   19638:	bl	11e7c <push_back@@Base>
   1963c:	ldr	r3, [pc, #192]	; 19704 <read_if_statement@@Base+0x2dc>
   19640:	add	r3, pc, r3
   19644:	ldrd	r2, [r3, #80]	; 0x50
   19648:	adds	r2, r2, #1
   1964c:	adc	r3, r3, #0
   19650:	ldr	r1, [pc, #176]	; 19708 <read_if_statement@@Base+0x2e0>
   19654:	add	r1, pc, r1
   19658:	strd	r2, [r1, #80]	; 0x50
   1965c:	mov	r0, #20
   19660:	bl	118d0 <malloc@plt>
   19664:	mov	r3, r0
   19668:	str	r3, [fp, #-12]
   1966c:	ldr	r3, [fp, #-8]
   19670:	ldr	r2, [fp, #-20]	; 0xffffffec
   19674:	ldr	r1, [fp, #-16]
   19678:	ldr	r0, [fp, #-12]
   1967c:	bl	17aac <init_node_if@@Base>
   19680:	ldr	r0, [fp, #-12]
   19684:	ldr	r3, [pc, #128]	; 1970c <read_if_statement@@Base+0x2e4>
   19688:	add	r3, pc, r3
   1968c:	ldrd	r2, [r3, #88]	; 0x58
   19690:	adds	r2, r2, #1
   19694:	adc	r3, r3, #0
   19698:	ldr	r1, [pc, #112]	; 19710 <read_if_statement@@Base+0x2e8>
   1969c:	add	r1, pc, r1
   196a0:	strd	r2, [r1, #88]	; 0x58
   196a4:	mov	r3, r0
   196a8:	mov	r0, r3
   196ac:	sub	sp, fp, #4
   196b0:	pop	{fp, pc}
   196b4:	muleq	r1, r4, r1
   196b8:	andeq	r6, r1, r0, lsl #3
   196bc:	andeq	r6, r1, r4, lsr #2
   196c0:	andeq	r6, r1, r0, lsl r1
   196c4:	andeq	r6, r1, r0, lsl #2
   196c8:	andeq	r6, r1, ip, ror #1
   196cc:	ldrdeq	r6, [r1], -r8
   196d0:	andeq	r6, r1, r4, asr #1
   196d4:	andeq	r6, r1, ip, lsr #1
   196d8:	muleq	r1, r8, r0
   196dc:	andeq	r6, r1, r0, lsl #1
   196e0:	andeq	r6, r1, ip, rrx
   196e4:	andeq	r6, r1, ip, lsr r0
   196e8:	andeq	r6, r1, r8, lsr #32
   196ec:	andeq	r6, r1, r4, lsl r0
   196f0:	andeq	r6, r1, r0
   196f4:	andeq	r5, r1, r8, ror #31
   196f8:	ldrdeq	r5, [r1], -r4
   196fc:	andeq	r5, r1, r4, asr #31
   19700:			; <UNDEFINED> instruction: 0x00015fb0
   19704:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19708:	andeq	r5, r1, ip, ror pc
   1970c:	andeq	r5, r1, r8, asr #30
   19710:	andeq	r5, r1, r4, lsr pc

00019714 <read_boolean_expression@@Base>:
   19714:	push	{r4, fp, lr}
   19718:	add	fp, sp, #8
   1971c:	sub	sp, sp, #28
   19720:	str	r0, [fp, #-32]	; 0xffffffe0
   19724:	ldr	r4, [pc, #712]	; 199f4 <read_boolean_expression@@Base+0x2e0>
   19728:	add	r4, pc, r4
   1972c:	ldr	r3, [pc, #708]	; 199f8 <read_boolean_expression@@Base+0x2e4>
   19730:	add	r3, pc, r3
   19734:	ldrd	r2, [r3]
   19738:	adds	r2, r2, #1
   1973c:	adc	r3, r3, #0
   19740:	ldr	r1, [pc, #692]	; 199fc <read_boolean_expression@@Base+0x2e8>
   19744:	add	r1, pc, r1
   19748:	strd	r2, [r1]
   1974c:	mov	r3, #0
   19750:	str	r3, [fp, #-16]
   19754:	mov	r3, #0
   19758:	str	r3, [fp, #-20]	; 0xffffffec
   1975c:	mov	r3, #0
   19760:	str	r3, [fp, #-28]	; 0xffffffe4
   19764:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19768:	ldr	r3, [r3]
   1976c:	mov	r0, r3
   19770:	bl	11b18 <next@@Base>
   19774:	str	r0, [fp, #-20]	; 0xffffffec
   19778:	nop			; (mov r0, r0)
   1977c:	ldr	r3, [pc, #636]	; 19a00 <read_boolean_expression@@Base+0x2ec>
   19780:	add	r3, pc, r3
   19784:	ldrd	r2, [r3, #8]
   19788:	adds	r2, r2, #1
   1978c:	adc	r3, r3, #0
   19790:	ldr	r1, [pc, #620]	; 19a04 <read_boolean_expression@@Base+0x2f0>
   19794:	add	r1, pc, r1
   19798:	strd	r2, [r1, #8]
   1979c:	b	19988 <read_boolean_expression@@Base+0x274>
   197a0:	ldr	r3, [pc, #608]	; 19a08 <read_boolean_expression@@Base+0x2f4>
   197a4:	add	r3, pc, r3
   197a8:	ldrd	r2, [r3, #80]	; 0x50
   197ac:	adds	r2, r2, #1
   197b0:	adc	r3, r3, #0
   197b4:	ldr	r1, [pc, #592]	; 19a0c <read_boolean_expression@@Base+0x2f8>
   197b8:	add	r1, pc, r1
   197bc:	strd	r2, [r1, #80]	; 0x50
   197c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   197c4:	ldr	r3, [r3]
   197c8:	cmp	r3, #3
   197cc:	beq	198cc <read_boolean_expression@@Base+0x1b8>
   197d0:	cmp	r3, #12
   197d4:	beq	19874 <read_boolean_expression@@Base+0x160>
   197d8:	cmp	r3, #1
   197dc:	bne	1992c <read_boolean_expression@@Base+0x218>
   197e0:	ldr	r3, [pc, #552]	; 19a10 <read_boolean_expression@@Base+0x2fc>
   197e4:	add	r3, pc, r3
   197e8:	ldrd	r2, [r3, #16]
   197ec:	adds	r2, r2, #1
   197f0:	adc	r3, r3, #0
   197f4:	ldr	r1, [pc, #536]	; 19a14 <read_boolean_expression@@Base+0x300>
   197f8:	add	r1, pc, r1
   197fc:	strd	r2, [r1, #16]
   19800:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19804:	ldr	r3, [r3]
   19808:	ldr	r1, [fp, #-20]	; 0xffffffec
   1980c:	mov	r0, r3
   19810:	bl	11e7c <push_back@@Base>
   19814:	ldr	r3, [pc, #508]	; 19a18 <read_boolean_expression@@Base+0x304>
   19818:	add	r3, pc, r3
   1981c:	ldrd	r2, [r3, #40]	; 0x28
   19820:	adds	r2, r2, #1
   19824:	adc	r3, r3, #0
   19828:	ldr	r1, [pc, #492]	; 19a1c <read_boolean_expression@@Base+0x308>
   1982c:	add	r1, pc, r1
   19830:	strd	r2, [r1, #40]	; 0x28
   19834:	sub	r2, fp, #28
   19838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1983c:	ldr	r1, [fp, #-16]
   19840:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19844:	bl	19a68 <read_single_boolean_expression@@Base>
   19848:	str	r0, [fp, #-16]
   1984c:	nop			; (mov r0, r0)
   19850:	ldr	r3, [pc, #456]	; 19a20 <read_boolean_expression@@Base+0x30c>
   19854:	add	r3, pc, r3
   19858:	ldrd	r2, [r3, #72]	; 0x48
   1985c:	adds	r2, r2, #1
   19860:	adc	r3, r3, #0
   19864:	ldr	r1, [pc, #440]	; 19a24 <read_boolean_expression@@Base+0x310>
   19868:	add	r1, pc, r1
   1986c:	strd	r2, [r1, #72]	; 0x48
   19870:	b	19974 <read_boolean_expression@@Base+0x260>
   19874:	ldr	r3, [pc, #428]	; 19a28 <read_boolean_expression@@Base+0x314>
   19878:	add	r3, pc, r3
   1987c:	ldrd	r2, [r3, #32]
   19880:	adds	r2, r2, #1
   19884:	adc	r3, r3, #0
   19888:	ldr	r1, [pc, #412]	; 19a2c <read_boolean_expression@@Base+0x318>
   1988c:	add	r1, pc, r1
   19890:	strd	r2, [r1, #32]
   19894:	ldr	r0, [fp, #-20]	; 0xffffffec
   19898:	bl	184b4 <get_boolean_op_value@@Base>
   1989c:	str	r0, [fp, #-24]	; 0xffffffe8
   198a0:	mov	r3, #1
   198a4:	str	r3, [fp, #-28]	; 0xffffffe4
   198a8:	ldr	r3, [pc, #384]	; 19a30 <read_boolean_expression@@Base+0x31c>
   198ac:	add	r3, pc, r3
   198b0:	ldrd	r2, [r3, #48]	; 0x30
   198b4:	adds	r2, r2, #1
   198b8:	adc	r3, r3, #0
   198bc:	ldr	r1, [pc, #368]	; 19a34 <read_boolean_expression@@Base+0x320>
   198c0:	add	r1, pc, r1
   198c4:	strd	r2, [r1, #48]	; 0x30
   198c8:	b	19974 <read_boolean_expression@@Base+0x260>
   198cc:	ldr	r3, [pc, #356]	; 19a38 <read_boolean_expression@@Base+0x324>
   198d0:	add	r3, pc, r3
   198d4:	ldrd	r2, [r3, #24]
   198d8:	adds	r2, r2, #1
   198dc:	adc	r3, r3, #0
   198e0:	ldr	r1, [pc, #340]	; 19a3c <read_boolean_expression@@Base+0x328>
   198e4:	add	r1, pc, r1
   198e8:	strd	r2, [r1, #24]
   198ec:	sub	r2, fp, #28
   198f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   198f4:	ldr	r1, [fp, #-16]
   198f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198fc:	bl	19a68 <read_single_boolean_expression@@Base>
   19900:	str	r0, [fp, #-16]
   19904:	nop			; (mov r0, r0)
   19908:	ldr	r3, [pc, #304]	; 19a40 <read_boolean_expression@@Base+0x32c>
   1990c:	add	r3, pc, r3
   19910:	ldrd	r2, [r3, #56]	; 0x38
   19914:	adds	r2, r2, #1
   19918:	adc	r3, r3, #0
   1991c:	ldr	r1, [pc, #288]	; 19a44 <read_boolean_expression@@Base+0x330>
   19920:	add	r1, pc, r1
   19924:	strd	r2, [r1, #56]	; 0x38
   19928:	b	19974 <read_boolean_expression@@Base+0x260>
   1992c:	ldr	r3, [pc, #276]	; 19a48 <read_boolean_expression@@Base+0x334>
   19930:	ldr	r3, [r4, r3]
   19934:	ldr	r3, [r3]
   19938:	mov	r2, #33	; 0x21
   1993c:	mov	r1, #1
   19940:	ldr	r0, [pc, #260]	; 19a4c <read_boolean_expression@@Base+0x338>
   19944:	add	r0, pc, r0
   19948:	bl	11894 <fwrite@plt>
   1994c:	ldr	r3, [pc, #252]	; 19a50 <read_boolean_expression@@Base+0x33c>
   19950:	add	r3, pc, r3
   19954:	ldrd	r2, [r3, #64]	; 0x40
   19958:	adds	r2, r2, #1
   1995c:	adc	r3, r3, #0
   19960:	ldr	r1, [pc, #236]	; 19a54 <read_boolean_expression@@Base+0x340>
   19964:	add	r1, pc, r1
   19968:	strd	r2, [r1, #64]	; 0x40
   1996c:	mov	r0, #1
   19970:	bl	11918 <exit@plt>
   19974:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19978:	ldr	r3, [r3]
   1997c:	mov	r0, r3
   19980:	bl	11b18 <next@@Base>
   19984:	str	r0, [fp, #-20]	; 0xffffffec
   19988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1998c:	ldr	r3, [r3]
   19990:	cmp	r3, #4
   19994:	bne	197a0 <read_boolean_expression@@Base+0x8c>
   19998:	ldr	r3, [pc, #184]	; 19a58 <read_boolean_expression@@Base+0x344>
   1999c:	add	r3, pc, r3
   199a0:	ldrd	r2, [r3, #88]	; 0x58
   199a4:	adds	r2, r2, #1
   199a8:	adc	r3, r3, #0
   199ac:	ldr	r1, [pc, #168]	; 19a5c <read_boolean_expression@@Base+0x348>
   199b0:	add	r1, pc, r1
   199b4:	strd	r2, [r1, #88]	; 0x58
   199b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   199bc:	bl	17470 <free_token_cpar@@Base>
   199c0:	ldr	r0, [fp, #-16]
   199c4:	ldr	r3, [pc, #148]	; 19a60 <read_boolean_expression@@Base+0x34c>
   199c8:	add	r3, pc, r3
   199cc:	ldrd	r2, [r3, #96]	; 0x60
   199d0:	adds	r2, r2, #1
   199d4:	adc	r3, r3, #0
   199d8:	ldr	r1, [pc, #132]	; 19a64 <read_boolean_expression@@Base+0x350>
   199dc:	add	r1, pc, r1
   199e0:	strd	r2, [r1, #96]	; 0x60
   199e4:	mov	r3, r0
   199e8:	mov	r0, r3
   199ec:	sub	sp, fp, #8
   199f0:	pop	{r4, fp, pc}
   199f4:	ldrdeq	r4, [r1], -r0
   199f8:	andeq	r5, r1, r8, lsr lr
   199fc:	andeq	r5, r1, r4, lsr #28
   19a00:	andeq	r5, r1, r8, ror #27
   19a04:	ldrdeq	r5, [r1], -r4
   19a08:	andeq	r5, r1, r4, asr #27
   19a0c:			; <UNDEFINED> instruction: 0x00015db0
   19a10:	andeq	r5, r1, r4, lsl #27
   19a14:	andeq	r5, r1, r0, ror sp
   19a18:	andeq	r5, r1, r0, asr sp
   19a1c:	andeq	r5, r1, ip, lsr sp
   19a20:	andeq	r5, r1, r4, lsl sp
   19a24:	andeq	r5, r1, r0, lsl #26
   19a28:	strdeq	r5, [r1], -r0
   19a2c:	ldrdeq	r5, [r1], -ip
   19a30:			; <UNDEFINED> instruction: 0x00015cbc
   19a34:	andeq	r5, r1, r8, lsr #25
   19a38:	muleq	r1, r8, ip
   19a3c:	andeq	r5, r1, r4, lsl #25
   19a40:	andeq	r5, r1, ip, asr ip
   19a44:	andeq	r5, r1, r8, asr #24
   19a48:	andeq	r0, r0, r4, lsr #1
   19a4c:	andeq	r3, r0, r8, lsr #12
   19a50:	andeq	r5, r1, r8, lsl ip
   19a54:	andeq	r5, r1, r4, lsl #24
   19a58:	andeq	r5, r1, ip, asr #23
   19a5c:			; <UNDEFINED> instruction: 0x00015bb8
   19a60:	andeq	r5, r1, r0, lsr #23
   19a64:	andeq	r5, r1, ip, lsl #23

00019a68 <read_single_boolean_expression@@Base>:
   19a68:	push	{fp, lr}
   19a6c:	add	fp, sp, #4
   19a70:	sub	sp, sp, #40	; 0x28
   19a74:	str	r0, [fp, #-32]	; 0xffffffe0
   19a78:	str	r1, [fp, #-36]	; 0xffffffdc
   19a7c:	str	r2, [fp, #-40]	; 0xffffffd8
   19a80:	str	r3, [fp, #-44]	; 0xffffffd4
   19a84:	ldr	r1, [pc, #456]	; 19c54 <read_single_boolean_expression@@Base+0x1ec>
   19a88:	add	r1, pc, r1
   19a8c:	mov	r3, #0
   19a90:	str	r3, [fp, #-12]
   19a94:	mov	r3, #0
   19a98:	str	r3, [fp, #-8]
   19a9c:	mov	r3, #0
   19aa0:	str	r3, [fp, #-16]
   19aa4:	mov	r3, #0
   19aa8:	str	r3, [fp, #-20]	; 0xffffffec
   19aac:	mov	r3, #0
   19ab0:	str	r3, [fp, #-24]	; 0xffffffe8
   19ab4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19ab8:	cmp	r3, #0
   19abc:	bne	19af0 <read_single_boolean_expression@@Base+0x88>
   19ac0:	ldr	r3, [pc, #400]	; 19c58 <read_single_boolean_expression@@Base+0x1f0>
   19ac4:	add	r3, pc, r3
   19ac8:	ldrd	r2, [r3]
   19acc:	adds	r2, r2, #1
   19ad0:	adc	r3, r3, #0
   19ad4:	ldr	r1, [pc, #384]	; 19c5c <read_single_boolean_expression@@Base+0x1f4>
   19ad8:	add	r1, pc, r1
   19adc:	strd	r2, [r1]
   19ae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19ae4:	bl	19c98 <read_boolean_binary_expression@@Base>
   19ae8:	str	r0, [fp, #-8]
   19aec:	b	19c20 <read_single_boolean_expression@@Base+0x1b8>
   19af0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19af4:	ldr	r3, [r3]
   19af8:	cmp	r3, #0
   19afc:	beq	19bb0 <read_single_boolean_expression@@Base+0x148>
   19b00:	ldr	r3, [pc, #344]	; 19c60 <read_single_boolean_expression@@Base+0x1f8>
   19b04:	add	r3, pc, r3
   19b08:	ldrd	r2, [r3, #8]
   19b0c:	adds	r2, r2, #1
   19b10:	adc	r3, r3, #0
   19b14:	ldr	r1, [pc, #328]	; 19c64 <read_single_boolean_expression@@Base+0x1fc>
   19b18:	add	r1, pc, r1
   19b1c:	strd	r2, [r1, #8]
   19b20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19b24:	bl	19c98 <read_boolean_binary_expression@@Base>
   19b28:	str	r0, [fp, #-16]
   19b2c:	ldr	r3, [pc, #308]	; 19c68 <read_single_boolean_expression@@Base+0x200>
   19b30:	add	r3, pc, r3
   19b34:	ldrd	r2, [r3, #24]
   19b38:	adds	r2, r2, #1
   19b3c:	adc	r3, r3, #0
   19b40:	ldr	r1, [pc, #292]	; 19c6c <read_single_boolean_expression@@Base+0x204>
   19b44:	add	r1, pc, r1
   19b48:	strd	r2, [r1, #24]
   19b4c:	ldr	r3, [fp, #-8]
   19b50:	str	r3, [fp, #-20]	; 0xffffffec
   19b54:	ldr	r3, [fp, #-16]
   19b58:	str	r3, [fp, #-24]	; 0xffffffe8
   19b5c:	mov	r0, #20
   19b60:	bl	118d0 <malloc@plt>
   19b64:	mov	r3, r0
   19b68:	str	r3, [fp, #-8]
   19b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b70:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19b78:	ldr	r0, [fp, #-8]
   19b7c:	bl	17b58 <init_node_boolean_operator@@Base>
   19b80:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19b84:	mov	r2, #0
   19b88:	str	r2, [r3]
   19b8c:	ldr	r3, [pc, #220]	; 19c70 <read_single_boolean_expression@@Base+0x208>
   19b90:	add	r3, pc, r3
   19b94:	ldrd	r2, [r3, #32]
   19b98:	adds	r2, r2, #1
   19b9c:	adc	r3, r3, #0
   19ba0:	ldr	r1, [pc, #204]	; 19c74 <read_single_boolean_expression@@Base+0x20c>
   19ba4:	add	r1, pc, r1
   19ba8:	strd	r2, [r1, #32]
   19bac:	b	19c20 <read_single_boolean_expression@@Base+0x1b8>
   19bb0:	ldr	r3, [pc, #192]	; 19c78 <read_single_boolean_expression@@Base+0x210>
   19bb4:	add	r3, pc, r3
   19bb8:	ldrd	r2, [r3, #16]
   19bbc:	adds	r2, r2, #1
   19bc0:	adc	r3, r3, #0
   19bc4:	ldr	r0, [pc, #176]	; 19c7c <read_single_boolean_expression@@Base+0x214>
   19bc8:	add	r0, pc, r0
   19bcc:	strd	r2, [r0, #16]
   19bd0:	ldr	r3, [pc, #168]	; 19c80 <read_single_boolean_expression@@Base+0x218>
   19bd4:	ldr	r3, [r1, r3]
   19bd8:	ldr	r0, [r3]
   19bdc:	ldr	r3, [fp, #-12]
   19be0:	ldr	r3, [r3, #4]
   19be4:	mov	r2, r3
   19be8:	ldr	r3, [pc, #148]	; 19c84 <read_single_boolean_expression@@Base+0x21c>
   19bec:	add	r3, pc, r3
   19bf0:	mov	r1, r3
   19bf4:	bl	11930 <fprintf@plt>
   19bf8:	ldr	r3, [pc, #136]	; 19c88 <read_single_boolean_expression@@Base+0x220>
   19bfc:	add	r3, pc, r3
   19c00:	ldrd	r2, [r3, #40]	; 0x28
   19c04:	adds	r2, r2, #1
   19c08:	adc	r3, r3, #0
   19c0c:	ldr	r1, [pc, #120]	; 19c8c <read_single_boolean_expression@@Base+0x224>
   19c10:	add	r1, pc, r1
   19c14:	strd	r2, [r1, #40]	; 0x28
   19c18:	mov	r0, #1
   19c1c:	bl	11918 <exit@plt>
   19c20:	ldr	r0, [fp, #-8]
   19c24:	ldr	r3, [pc, #100]	; 19c90 <read_single_boolean_expression@@Base+0x228>
   19c28:	add	r3, pc, r3
   19c2c:	ldrd	r2, [r3, #48]	; 0x30
   19c30:	adds	r2, r2, #1
   19c34:	adc	r3, r3, #0
   19c38:	ldr	r1, [pc, #84]	; 19c94 <read_single_boolean_expression@@Base+0x22c>
   19c3c:	add	r1, pc, r1
   19c40:	strd	r2, [r1, #48]	; 0x30
   19c44:	mov	r3, r0
   19c48:	mov	r0, r3
   19c4c:	sub	sp, fp, #4
   19c50:	pop	{fp, pc}
   19c54:	andeq	r4, r1, r0, ror r5
   19c58:	andeq	r5, r1, ip, ror #20
   19c5c:	andeq	r5, r1, r8, asr sl
   19c60:	andeq	r5, r1, ip, lsr #20
   19c64:	andeq	r5, r1, r8, lsl sl
   19c68:	andeq	r5, r1, r0, lsl #20
   19c6c:	andeq	r5, r1, ip, ror #19
   19c70:	andeq	r5, r1, r0, lsr #19
   19c74:	andeq	r5, r1, ip, lsl #19
   19c78:	andeq	r5, r1, ip, ror r9
   19c7c:	andeq	r5, r1, r8, ror #18
   19c80:	andeq	r0, r0, r4, lsr #1
   19c84:	andeq	r3, r0, r4, lsr #7
   19c88:	andeq	r5, r1, r4, lsr r9
   19c8c:	andeq	r5, r1, r0, lsr #18
   19c90:	andeq	r5, r1, r8, lsl #18
   19c94:	strdeq	r5, [r1], -r4

00019c98 <read_boolean_binary_expression@@Base>:
   19c98:	push	{fp, lr}
   19c9c:	add	fp, sp, #4
   19ca0:	sub	sp, sp, #40	; 0x28
   19ca4:	str	r0, [fp, #-40]	; 0xffffffd8
   19ca8:	ldr	r3, [pc, #1056]	; 1a0d0 <read_boolean_binary_expression@@Base+0x438>
   19cac:	add	r3, pc, r3
   19cb0:	ldrd	r2, [r3]
   19cb4:	adds	r2, r2, #1
   19cb8:	adc	r3, r3, #0
   19cbc:	ldr	r1, [pc, #1040]	; 1a0d4 <read_boolean_binary_expression@@Base+0x43c>
   19cc0:	add	r1, pc, r1
   19cc4:	strd	r2, [r1]
   19cc8:	mov	r3, #0
   19ccc:	str	r3, [fp, #-8]
   19cd0:	mov	r3, #0
   19cd4:	str	r3, [fp, #-12]
   19cd8:	mov	r3, #0
   19cdc:	str	r3, [fp, #-16]
   19ce0:	mov	r3, #0
   19ce4:	str	r3, [fp, #-20]	; 0xffffffec
   19ce8:	mov	r3, #0
   19cec:	str	r3, [fp, #-24]	; 0xffffffe8
   19cf0:	mov	r3, #0
   19cf4:	str	r3, [fp, #-28]	; 0xffffffe4
   19cf8:	mov	r3, #0
   19cfc:	str	r3, [fp, #-32]	; 0xffffffe0
   19d00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d04:	ldr	r3, [r3]
   19d08:	mov	r0, r3
   19d0c:	bl	11b18 <next@@Base>
   19d10:	str	r0, [fp, #-24]	; 0xffffffe8
   19d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19d18:	ldr	r3, [r3]
   19d1c:	cmp	r3, #1
   19d20:	beq	19de0 <read_boolean_binary_expression@@Base+0x148>
   19d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19d28:	ldr	r3, [r3]
   19d2c:	cmp	r3, #12
   19d30:	bne	19db8 <read_boolean_binary_expression@@Base+0x120>
   19d34:	ldr	r3, [pc, #924]	; 1a0d8 <read_boolean_binary_expression@@Base+0x440>
   19d38:	add	r3, pc, r3
   19d3c:	ldrd	r2, [r3, #16]
   19d40:	adds	r2, r2, #1
   19d44:	adc	r3, r3, #0
   19d48:	ldr	r1, [pc, #908]	; 1a0dc <read_boolean_binary_expression@@Base+0x444>
   19d4c:	add	r1, pc, r1
   19d50:	strd	r2, [r1, #16]
   19d54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d58:	ldr	r3, [r3]
   19d5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19d60:	mov	r0, r3
   19d64:	bl	11e7c <push_back@@Base>
   19d68:	ldr	r3, [pc, #880]	; 1a0e0 <read_boolean_binary_expression@@Base+0x448>
   19d6c:	add	r3, pc, r3
   19d70:	ldrd	r2, [r3, #24]
   19d74:	adds	r2, r2, #1
   19d78:	adc	r3, r3, #0
   19d7c:	ldr	r1, [pc, #864]	; 1a0e4 <read_boolean_binary_expression@@Base+0x44c>
   19d80:	add	r1, pc, r1
   19d84:	strd	r2, [r1, #24]
   19d88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19d8c:	bl	1a168 <read_boolean_unary_expression@@Base>
   19d90:	mov	r3, r0
   19d94:	ldr	r2, [pc, #844]	; 1a0e8 <read_boolean_binary_expression@@Base+0x450>
   19d98:	add	r2, pc, r2
   19d9c:	ldrd	r0, [r2, #32]
   19da0:	adds	r0, r0, #1
   19da4:	adc	r1, r1, #0
   19da8:	ldr	r2, [pc, #828]	; 1a0ec <read_boolean_binary_expression@@Base+0x454>
   19dac:	add	r2, pc, r2
   19db0:	strd	r0, [r2, #32]
   19db4:	b	1a0c4 <read_boolean_binary_expression@@Base+0x42c>
   19db8:	mov	r3, #0
   19dbc:	ldr	r2, [pc, #812]	; 1a0f0 <read_boolean_binary_expression@@Base+0x458>
   19dc0:	add	r2, pc, r2
   19dc4:	ldrd	r0, [r2, #40]	; 0x28
   19dc8:	adds	r0, r0, #1
   19dcc:	adc	r1, r1, #0
   19dd0:	ldr	r2, [pc, #796]	; 1a0f4 <read_boolean_binary_expression@@Base+0x45c>
   19dd4:	add	r2, pc, r2
   19dd8:	strd	r0, [r2, #40]	; 0x28
   19ddc:	b	1a0c4 <read_boolean_binary_expression@@Base+0x42c>
   19de0:	ldr	r3, [pc, #784]	; 1a0f8 <read_boolean_binary_expression@@Base+0x460>
   19de4:	add	r3, pc, r3
   19de8:	ldrd	r2, [r3, #8]
   19dec:	adds	r2, r2, #1
   19df0:	adc	r3, r3, #0
   19df4:	ldr	r1, [pc, #768]	; 1a0fc <read_boolean_binary_expression@@Base+0x464>
   19df8:	add	r1, pc, r1
   19dfc:	strd	r2, [r1, #8]
   19e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e04:	str	r3, [fp, #-28]	; 0xffffffe4
   19e08:	mov	r0, #12
   19e0c:	bl	118d0 <malloc@plt>
   19e10:	mov	r3, r0
   19e14:	str	r3, [fp, #-12]
   19e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19e1c:	ldr	r3, [r3, #4]
   19e20:	mov	r1, r3
   19e24:	ldr	r0, [fp, #-12]
   19e28:	bl	178f8 <init_node_int@@Base>
   19e2c:	ldr	r3, [pc, #716]	; 1a100 <read_boolean_binary_expression@@Base+0x468>
   19e30:	add	r3, pc, r3
   19e34:	ldrd	r2, [r3, #48]	; 0x30
   19e38:	adds	r2, r2, #1
   19e3c:	adc	r3, r3, #0
   19e40:	ldr	r1, [pc, #700]	; 1a104 <read_boolean_binary_expression@@Base+0x46c>
   19e44:	add	r1, pc, r1
   19e48:	strd	r2, [r1, #48]	; 0x30
   19e4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19e50:	bl	1738c <free_token_int_value@@Base>
   19e54:	ldr	r3, [pc, #684]	; 1a108 <read_boolean_binary_expression@@Base+0x470>
   19e58:	add	r3, pc, r3
   19e5c:	ldrd	r2, [r3, #56]	; 0x38
   19e60:	adds	r2, r2, #1
   19e64:	adc	r3, r3, #0
   19e68:	ldr	r1, [pc, #668]	; 1a10c <read_boolean_binary_expression@@Base+0x474>
   19e6c:	add	r1, pc, r1
   19e70:	strd	r2, [r1, #56]	; 0x38
   19e74:	ldr	r3, [fp, #-12]
   19e78:	str	r3, [fp, #-16]
   19e7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e80:	ldr	r3, [r3]
   19e84:	mov	r0, r3
   19e88:	bl	11b18 <next@@Base>
   19e8c:	str	r0, [fp, #-24]	; 0xffffffe8
   19e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e94:	ldr	r3, [r3]
   19e98:	cmp	r3, #12
   19e9c:	beq	19ef0 <read_boolean_binary_expression@@Base+0x258>
   19ea0:	ldr	r3, [pc, #616]	; 1a110 <read_boolean_binary_expression@@Base+0x478>
   19ea4:	add	r3, pc, r3
   19ea8:	ldrd	r2, [r3, #64]	; 0x40
   19eac:	adds	r2, r2, #1
   19eb0:	adc	r3, r3, #0
   19eb4:	ldr	r1, [pc, #600]	; 1a114 <read_boolean_binary_expression@@Base+0x47c>
   19eb8:	add	r1, pc, r1
   19ebc:	strd	r2, [r1, #64]	; 0x40
   19ec0:	ldr	r0, [fp, #-16]
   19ec4:	bl	17c10 <free_node@@Base>
   19ec8:	mov	r3, #0
   19ecc:	ldr	r2, [pc, #580]	; 1a118 <read_boolean_binary_expression@@Base+0x480>
   19ed0:	add	r2, pc, r2
   19ed4:	ldrd	r0, [r2, #80]	; 0x50
   19ed8:	adds	r0, r0, #1
   19edc:	adc	r1, r1, #0
   19ee0:	ldr	r2, [pc, #564]	; 1a11c <read_boolean_binary_expression@@Base+0x484>
   19ee4:	add	r2, pc, r2
   19ee8:	strd	r0, [r2, #80]	; 0x50
   19eec:	b	1a0c4 <read_boolean_binary_expression@@Base+0x42c>
   19ef0:	ldr	r3, [pc, #552]	; 1a120 <read_boolean_binary_expression@@Base+0x488>
   19ef4:	add	r3, pc, r3
   19ef8:	ldrd	r2, [r3, #72]	; 0x48
   19efc:	adds	r2, r2, #1
   19f00:	adc	r3, r3, #0
   19f04:	ldr	r1, [pc, #536]	; 1a124 <read_boolean_binary_expression@@Base+0x48c>
   19f08:	add	r1, pc, r1
   19f0c:	strd	r2, [r1, #72]	; 0x48
   19f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f14:	str	r3, [fp, #-32]	; 0xffffffe0
   19f18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19f1c:	bl	184b4 <get_boolean_op_value@@Base>
   19f20:	str	r0, [fp, #-36]	; 0xffffffdc
   19f24:	ldr	r3, [pc, #508]	; 1a128 <read_boolean_binary_expression@@Base+0x490>
   19f28:	add	r3, pc, r3
   19f2c:	ldrd	r2, [r3, #88]	; 0x58
   19f30:	adds	r2, r2, #1
   19f34:	adc	r3, r3, #0
   19f38:	ldr	r1, [pc, #492]	; 1a12c <read_boolean_binary_expression@@Base+0x494>
   19f3c:	add	r1, pc, r1
   19f40:	strd	r2, [r1, #88]	; 0x58
   19f44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19f48:	bl	176d0 <free_token_boolean_op@@Base>
   19f4c:	ldr	r3, [pc, #476]	; 1a130 <read_boolean_binary_expression@@Base+0x498>
   19f50:	add	r3, pc, r3
   19f54:	ldrd	r2, [r3, #96]	; 0x60
   19f58:	adds	r2, r2, #1
   19f5c:	adc	r3, r3, #0
   19f60:	ldr	r1, [pc, #460]	; 1a134 <read_boolean_binary_expression@@Base+0x49c>
   19f64:	add	r1, pc, r1
   19f68:	strd	r2, [r1, #96]	; 0x60
   19f6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19f70:	ldr	r3, [r3]
   19f74:	mov	r0, r3
   19f78:	bl	11b18 <next@@Base>
   19f7c:	str	r0, [fp, #-24]	; 0xffffffe8
   19f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f84:	ldr	r3, [r3]
   19f88:	cmp	r3, #1
   19f8c:	beq	19fe0 <read_boolean_binary_expression@@Base+0x348>
   19f90:	ldr	r3, [pc, #416]	; 1a138 <read_boolean_binary_expression@@Base+0x4a0>
   19f94:	add	r3, pc, r3
   19f98:	ldrd	r2, [r3, #104]	; 0x68
   19f9c:	adds	r2, r2, #1
   19fa0:	adc	r3, r3, #0
   19fa4:	ldr	r1, [pc, #400]	; 1a13c <read_boolean_binary_expression@@Base+0x4a4>
   19fa8:	add	r1, pc, r1
   19fac:	strd	r2, [r1, #104]	; 0x68
   19fb0:	ldr	r0, [fp, #-16]
   19fb4:	bl	17c10 <free_node@@Base>
   19fb8:	mov	r3, #0
   19fbc:	ldr	r2, [pc, #380]	; 1a140 <read_boolean_binary_expression@@Base+0x4a8>
   19fc0:	add	r2, pc, r2
   19fc4:	ldrd	r0, [r2, #120]	; 0x78
   19fc8:	adds	r0, r0, #1
   19fcc:	adc	r1, r1, #0
   19fd0:	ldr	r2, [pc, #364]	; 1a144 <read_boolean_binary_expression@@Base+0x4ac>
   19fd4:	add	r2, pc, r2
   19fd8:	strd	r0, [r2, #120]	; 0x78
   19fdc:	b	1a0c4 <read_boolean_binary_expression@@Base+0x42c>
   19fe0:	ldr	r3, [pc, #352]	; 1a148 <read_boolean_binary_expression@@Base+0x4b0>
   19fe4:	add	r3, pc, r3
   19fe8:	ldrd	r2, [r3, #112]	; 0x70
   19fec:	adds	r2, r2, #1
   19ff0:	adc	r3, r3, #0
   19ff4:	ldr	r1, [pc, #336]	; 1a14c <read_boolean_binary_expression@@Base+0x4b4>
   19ff8:	add	r1, pc, r1
   19ffc:	strd	r2, [r1, #112]	; 0x70
   1a000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a004:	str	r3, [fp, #-28]	; 0xffffffe4
   1a008:	mov	r0, #12
   1a00c:	bl	118d0 <malloc@plt>
   1a010:	mov	r3, r0
   1a014:	str	r3, [fp, #-12]
   1a018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a01c:	ldr	r3, [r3, #4]
   1a020:	mov	r1, r3
   1a024:	ldr	r0, [fp, #-12]
   1a028:	bl	178f8 <init_node_int@@Base>
   1a02c:	ldr	r3, [pc, #284]	; 1a150 <read_boolean_binary_expression@@Base+0x4b8>
   1a030:	add	r3, pc, r3
   1a034:	ldrd	r2, [r3, #128]	; 0x80
   1a038:	adds	r2, r2, #1
   1a03c:	adc	r3, r3, #0
   1a040:	ldr	r1, [pc, #268]	; 1a154 <read_boolean_binary_expression@@Base+0x4bc>
   1a044:	add	r1, pc, r1
   1a048:	strd	r2, [r1, #128]	; 0x80
   1a04c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a050:	bl	1738c <free_token_int_value@@Base>
   1a054:	ldr	r3, [pc, #252]	; 1a158 <read_boolean_binary_expression@@Base+0x4c0>
   1a058:	add	r3, pc, r3
   1a05c:	ldrd	r2, [r3, #136]	; 0x88
   1a060:	adds	r2, r2, #1
   1a064:	adc	r3, r3, #0
   1a068:	ldr	r1, [pc, #236]	; 1a15c <read_boolean_binary_expression@@Base+0x4c4>
   1a06c:	add	r1, pc, r1
   1a070:	strd	r2, [r1, #136]	; 0x88
   1a074:	ldr	r3, [fp, #-12]
   1a078:	str	r3, [fp, #-20]	; 0xffffffec
   1a07c:	mov	r0, #20
   1a080:	bl	118d0 <malloc@plt>
   1a084:	mov	r3, r0
   1a088:	str	r3, [fp, #-8]
   1a08c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a090:	ldr	r2, [fp, #-16]
   1a094:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a098:	ldr	r0, [fp, #-8]
   1a09c:	bl	17b58 <init_node_boolean_operator@@Base>
   1a0a0:	ldr	r3, [fp, #-8]
   1a0a4:	ldr	r2, [pc, #180]	; 1a160 <read_boolean_binary_expression@@Base+0x4c8>
   1a0a8:	add	r2, pc, r2
   1a0ac:	ldrd	r0, [r2, #144]	; 0x90
   1a0b0:	adds	r0, r0, #1
   1a0b4:	adc	r1, r1, #0
   1a0b8:	ldr	r2, [pc, #164]	; 1a164 <read_boolean_binary_expression@@Base+0x4cc>
   1a0bc:	add	r2, pc, r2
   1a0c0:	strd	r0, [r2, #144]	; 0x90
   1a0c4:	mov	r0, r3
   1a0c8:	sub	sp, fp, #4
   1a0cc:	pop	{fp, pc}
   1a0d0:	andeq	r5, r1, ip, ror #15
   1a0d4:	ldrdeq	r5, [r1], -r8
   1a0d8:	andeq	r5, r1, r0, ror #14
   1a0dc:	andeq	r5, r1, ip, asr #14
   1a0e0:	andeq	r5, r1, ip, lsr #14
   1a0e4:	andeq	r5, r1, r8, lsl r7
   1a0e8:	andeq	r5, r1, r0, lsl #14
   1a0ec:	andeq	r5, r1, ip, ror #13
   1a0f0:	ldrdeq	r5, [r1], -r8
   1a0f4:	andeq	r5, r1, r4, asr #13
   1a0f8:			; <UNDEFINED> instruction: 0x000156b4
   1a0fc:	andeq	r5, r1, r0, lsr #13
   1a100:	andeq	r5, r1, r8, ror #12
   1a104:	andeq	r5, r1, r4, asr r6
   1a108:	andeq	r5, r1, r0, asr #12
   1a10c:	andeq	r5, r1, ip, lsr #12
   1a110:	strdeq	r5, [r1], -r4
   1a114:	andeq	r5, r1, r0, ror #11
   1a118:	andeq	r5, r1, r8, asr #11
   1a11c:			; <UNDEFINED> instruction: 0x000155b4
   1a120:	andeq	r5, r1, r4, lsr #11
   1a124:	muleq	r1, r0, r5
   1a128:	andeq	r5, r1, r0, ror r5
   1a12c:	andeq	r5, r1, ip, asr r5
   1a130:	andeq	r5, r1, r8, asr #10
   1a134:	andeq	r5, r1, r4, lsr r5
   1a138:	andeq	r5, r1, r4, lsl #10
   1a13c:	strdeq	r5, [r1], -r0
   1a140:	ldrdeq	r5, [r1], -r8
   1a144:	andeq	r5, r1, r4, asr #9
   1a148:			; <UNDEFINED> instruction: 0x000154b4
   1a14c:	andeq	r5, r1, r0, lsr #9
   1a150:	andeq	r5, r1, r8, ror #8
   1a154:	andeq	r5, r1, r4, asr r4
   1a158:	andeq	r5, r1, r0, asr #8
   1a15c:	andeq	r5, r1, ip, lsr #8
   1a160:	strdeq	r5, [r1], -r0
   1a164:	ldrdeq	r5, [r1], -ip

0001a168 <read_boolean_unary_expression@@Base>:
   1a168:	push	{fp, lr}
   1a16c:	add	fp, sp, #4
   1a170:	sub	sp, sp, #32
   1a174:	str	r0, [fp, #-32]	; 0xffffffe0
   1a178:	ldr	r3, [pc, #656]	; 1a410 <read_boolean_unary_expression@@Base+0x2a8>
   1a17c:	add	r3, pc, r3
   1a180:	ldrd	r2, [r3]
   1a184:	adds	r2, r2, #1
   1a188:	adc	r3, r3, #0
   1a18c:	ldr	r1, [pc, #640]	; 1a414 <read_boolean_unary_expression@@Base+0x2ac>
   1a190:	add	r1, pc, r1
   1a194:	strd	r2, [r1]
   1a198:	mov	r3, #0
   1a19c:	str	r3, [fp, #-8]
   1a1a0:	mov	r3, #0
   1a1a4:	str	r3, [fp, #-12]
   1a1a8:	mov	r3, #0
   1a1ac:	str	r3, [fp, #-16]
   1a1b0:	mov	r3, #0
   1a1b4:	str	r3, [fp, #-20]	; 0xffffffec
   1a1b8:	mov	r3, #0
   1a1bc:	str	r3, [fp, #-24]	; 0xffffffe8
   1a1c0:	mov	r0, #20
   1a1c4:	bl	118d0 <malloc@plt>
   1a1c8:	mov	r3, r0
   1a1cc:	str	r3, [fp, #-8]
   1a1d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1d4:	ldr	r3, [r3]
   1a1d8:	mov	r0, r3
   1a1dc:	bl	11b18 <next@@Base>
   1a1e0:	str	r0, [fp, #-20]	; 0xffffffec
   1a1e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1e8:	ldr	r3, [r3]
   1a1ec:	cmp	r3, #12
   1a1f0:	beq	1a244 <read_boolean_unary_expression@@Base+0xdc>
   1a1f4:	ldr	r3, [pc, #540]	; 1a418 <read_boolean_unary_expression@@Base+0x2b0>
   1a1f8:	add	r3, pc, r3
   1a1fc:	ldrd	r2, [r3, #8]
   1a200:	adds	r2, r2, #1
   1a204:	adc	r3, r3, #0
   1a208:	ldr	r1, [pc, #524]	; 1a41c <read_boolean_unary_expression@@Base+0x2b4>
   1a20c:	add	r1, pc, r1
   1a210:	strd	r2, [r1, #8]
   1a214:	ldr	r0, [fp, #-8]
   1a218:	bl	18388 <free_node_boolean_operator@@Base>
   1a21c:	mov	r1, #0
   1a220:	ldr	r3, [pc, #504]	; 1a420 <read_boolean_unary_expression@@Base+0x2b8>
   1a224:	add	r3, pc, r3
   1a228:	ldrd	r2, [r3, #24]
   1a22c:	adds	r2, r2, #1
   1a230:	adc	r3, r3, #0
   1a234:	ldr	r0, [pc, #488]	; 1a424 <read_boolean_unary_expression@@Base+0x2bc>
   1a238:	add	r0, pc, r0
   1a23c:	strd	r2, [r0, #24]
   1a240:	b	1a400 <read_boolean_unary_expression@@Base+0x298>
   1a244:	ldr	r3, [pc, #476]	; 1a428 <read_boolean_unary_expression@@Base+0x2c0>
   1a248:	add	r3, pc, r3
   1a24c:	ldrd	r2, [r3, #16]
   1a250:	adds	r2, r2, #1
   1a254:	adc	r3, r3, #0
   1a258:	ldr	r1, [pc, #460]	; 1a42c <read_boolean_unary_expression@@Base+0x2c4>
   1a25c:	add	r1, pc, r1
   1a260:	strd	r2, [r1, #16]
   1a264:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a268:	bl	184b4 <get_boolean_op_value@@Base>
   1a26c:	str	r0, [fp, #-28]	; 0xffffffe4
   1a270:	ldr	r3, [pc, #440]	; 1a430 <read_boolean_unary_expression@@Base+0x2c8>
   1a274:	add	r3, pc, r3
   1a278:	ldrd	r2, [r3, #32]
   1a27c:	adds	r2, r2, #1
   1a280:	adc	r3, r3, #0
   1a284:	ldr	r1, [pc, #424]	; 1a434 <read_boolean_unary_expression@@Base+0x2cc>
   1a288:	add	r1, pc, r1
   1a28c:	strd	r2, [r1, #32]
   1a290:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a294:	bl	176d0 <free_token_boolean_op@@Base>
   1a298:	ldr	r3, [pc, #408]	; 1a438 <read_boolean_unary_expression@@Base+0x2d0>
   1a29c:	add	r3, pc, r3
   1a2a0:	ldrd	r2, [r3, #40]	; 0x28
   1a2a4:	adds	r2, r2, #1
   1a2a8:	adc	r3, r3, #0
   1a2ac:	ldr	r1, [pc, #392]	; 1a43c <read_boolean_unary_expression@@Base+0x2d4>
   1a2b0:	add	r1, pc, r1
   1a2b4:	strd	r2, [r1, #40]	; 0x28
   1a2b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2bc:	ldr	r3, [r3]
   1a2c0:	mov	r0, r3
   1a2c4:	bl	11b18 <next@@Base>
   1a2c8:	str	r0, [fp, #-20]	; 0xffffffec
   1a2cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2d0:	ldr	r3, [r3]
   1a2d4:	cmp	r3, #1
   1a2d8:	beq	1a32c <read_boolean_unary_expression@@Base+0x1c4>
   1a2dc:	ldr	r3, [pc, #348]	; 1a440 <read_boolean_unary_expression@@Base+0x2d8>
   1a2e0:	add	r3, pc, r3
   1a2e4:	ldrd	r2, [r3, #48]	; 0x30
   1a2e8:	adds	r2, r2, #1
   1a2ec:	adc	r3, r3, #0
   1a2f0:	ldr	r1, [pc, #332]	; 1a444 <read_boolean_unary_expression@@Base+0x2dc>
   1a2f4:	add	r1, pc, r1
   1a2f8:	strd	r2, [r1, #48]	; 0x30
   1a2fc:	ldr	r0, [fp, #-8]
   1a300:	bl	18388 <free_node_boolean_operator@@Base>
   1a304:	mov	r1, #0
   1a308:	ldr	r3, [pc, #312]	; 1a448 <read_boolean_unary_expression@@Base+0x2e0>
   1a30c:	add	r3, pc, r3
   1a310:	ldrd	r2, [r3, #64]	; 0x40
   1a314:	adds	r2, r2, #1
   1a318:	adc	r3, r3, #0
   1a31c:	ldr	r0, [pc, #296]	; 1a44c <read_boolean_unary_expression@@Base+0x2e4>
   1a320:	add	r0, pc, r0
   1a324:	strd	r2, [r0, #64]	; 0x40
   1a328:	b	1a400 <read_boolean_unary_expression@@Base+0x298>
   1a32c:	ldr	r3, [pc, #284]	; 1a450 <read_boolean_unary_expression@@Base+0x2e8>
   1a330:	add	r3, pc, r3
   1a334:	ldrd	r2, [r3, #56]	; 0x38
   1a338:	adds	r2, r2, #1
   1a33c:	adc	r3, r3, #0
   1a340:	ldr	r1, [pc, #268]	; 1a454 <read_boolean_unary_expression@@Base+0x2ec>
   1a344:	add	r1, pc, r1
   1a348:	strd	r2, [r1, #56]	; 0x38
   1a34c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a350:	str	r3, [fp, #-24]	; 0xffffffe8
   1a354:	mov	r0, #12
   1a358:	bl	118d0 <malloc@plt>
   1a35c:	mov	r3, r0
   1a360:	str	r3, [fp, #-12]
   1a364:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a368:	ldr	r3, [r3, #4]
   1a36c:	mov	r1, r3
   1a370:	ldr	r0, [fp, #-12]
   1a374:	bl	178f8 <init_node_int@@Base>
   1a378:	ldr	r3, [pc, #216]	; 1a458 <read_boolean_unary_expression@@Base+0x2f0>
   1a37c:	add	r3, pc, r3
   1a380:	ldrd	r2, [r3, #72]	; 0x48
   1a384:	adds	r2, r2, #1
   1a388:	adc	r3, r3, #0
   1a38c:	ldr	r1, [pc, #200]	; 1a45c <read_boolean_unary_expression@@Base+0x2f4>
   1a390:	add	r1, pc, r1
   1a394:	strd	r2, [r1, #72]	; 0x48
   1a398:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a39c:	bl	1738c <free_token_int_value@@Base>
   1a3a0:	ldr	r3, [pc, #184]	; 1a460 <read_boolean_unary_expression@@Base+0x2f8>
   1a3a4:	add	r3, pc, r3
   1a3a8:	ldrd	r2, [r3, #80]	; 0x50
   1a3ac:	adds	r2, r2, #1
   1a3b0:	adc	r3, r3, #0
   1a3b4:	ldr	r1, [pc, #168]	; 1a464 <read_boolean_unary_expression@@Base+0x2fc>
   1a3b8:	add	r1, pc, r1
   1a3bc:	strd	r2, [r1, #80]	; 0x50
   1a3c0:	ldr	r3, [fp, #-12]
   1a3c4:	str	r3, [fp, #-16]
   1a3c8:	mov	r3, #0
   1a3cc:	ldr	r2, [fp, #-16]
   1a3d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a3d4:	ldr	r0, [fp, #-8]
   1a3d8:	bl	17b58 <init_node_boolean_operator@@Base>
   1a3dc:	ldr	r1, [fp, #-8]
   1a3e0:	ldr	r3, [pc, #128]	; 1a468 <read_boolean_unary_expression@@Base+0x300>
   1a3e4:	add	r3, pc, r3
   1a3e8:	ldrd	r2, [r3, #88]	; 0x58
   1a3ec:	adds	r2, r2, #1
   1a3f0:	adc	r3, r3, #0
   1a3f4:	ldr	r0, [pc, #112]	; 1a46c <read_boolean_unary_expression@@Base+0x304>
   1a3f8:	add	r0, pc, r0
   1a3fc:	strd	r2, [r0, #88]	; 0x58
   1a400:	mov	r3, r1
   1a404:	mov	r0, r3
   1a408:	sub	sp, fp, #4
   1a40c:	pop	{fp, pc}
   1a410:			; <UNDEFINED> instruction: 0x000152bc
   1a414:	andeq	r5, r1, r8, lsr #5
   1a418:	andeq	r5, r1, r0, asr #4
   1a41c:	andeq	r5, r1, ip, lsr #4
   1a420:	andeq	r5, r1, r4, lsl r2
   1a424:	andeq	r5, r1, r0, lsl #4
   1a428:	strdeq	r5, [r1], -r0
   1a42c:	ldrdeq	r5, [r1], -ip
   1a430:	andeq	r5, r1, r4, asr #3
   1a434:			; <UNDEFINED> instruction: 0x000151b0
   1a438:	muleq	r1, ip, r1
   1a43c:	andeq	r5, r1, r8, lsl #3
   1a440:	andeq	r5, r1, r8, asr r1
   1a444:	andeq	r5, r1, r4, asr #2
   1a448:	andeq	r5, r1, ip, lsr #2
   1a44c:	andeq	r5, r1, r8, lsl r1
   1a450:	andeq	r5, r1, r8, lsl #2
   1a454:	strdeq	r5, [r1], -r4
   1a458:	strheq	r5, [r1], -ip
   1a45c:	andeq	r5, r1, r8, lsr #1
   1a460:	muleq	r1, r4, r0
   1a464:	andeq	r5, r1, r0, lsl #1
   1a468:	andeq	r5, r1, r4, asr r0
   1a46c:	andeq	r5, r1, r0, asr #32
   1a470:	push	{fp, lr}
   1a474:	add	fp, sp, #4
   1a478:	ldr	r3, [pc, #12]	; 1a48c <read_boolean_unary_expression@@Base+0x324>
   1a47c:	add	r3, pc, r3
   1a480:	mov	r0, r3
   1a484:	bl	1c3c4 <__gcov_sort_n_vals@@Base+0x458>
   1a488:	pop	{fp, pc}
   1a48c:	ldrdeq	r4, [r1], -r0
   1a490:	b	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1a494:	push	{r4, r5, r6, lr}
   1a498:	subs	r5, r1, #0
   1a49c:	popeq	{r4, r5, r6, pc}
   1a4a0:	mov	r4, r0
   1a4a4:	bl	1a490 <read_boolean_unary_expression@@Base+0x328>
   1a4a8:	ldrd	r2, [r4]
   1a4ac:	adds	r0, r0, r2
   1a4b0:	adc	r1, r1, r3
   1a4b4:	subs	r5, r5, #1
   1a4b8:	strd	r0, [r4], #8
   1a4bc:	bne	1a4a4 <read_boolean_unary_expression@@Base+0x33c>
   1a4c0:	pop	{r4, r5, r6, pc}
   1a4c4:	ldr	r3, [pc, #20]	; 1a4e0 <read_boolean_unary_expression@@Base+0x378>
   1a4c8:	ldr	r2, [pc, #20]	; 1a4e4 <read_boolean_unary_expression@@Base+0x37c>
   1a4cc:	add	r3, pc, r3
   1a4d0:	ldr	r3, [r3, r2]
   1a4d4:	ldmib	r3, {r0, r3}
   1a4d8:	add	r0, r0, r3
   1a4dc:	bx	lr
   1a4e0:	andeq	r3, r1, ip, lsr #22
   1a4e4:	strheq	r0, [r0], -r8
   1a4e8:	ldr	r3, [pc, #28]	; 1a50c <read_boolean_unary_expression@@Base+0x3a4>
   1a4ec:	ldr	r2, [pc, #28]	; 1a510 <read_boolean_unary_expression@@Base+0x3a8>
   1a4f0:	add	r3, pc, r3
   1a4f4:	ldr	r3, [r3, r2]
   1a4f8:	ldr	r2, [r3]
   1a4fc:	cmp	r2, #0
   1a500:	ldrne	r0, [r3, #20]
   1a504:	moveq	r0, #1
   1a508:	bx	lr
   1a50c:	andeq	r3, r1, r8, lsl #22
   1a510:	strheq	r0, [r0], -r8
   1a514:	bx	lr
   1a518:	ldr	ip, [pc, #32]	; 1a540 <read_boolean_unary_expression@@Base+0x3d8>
   1a51c:	mov	r3, #32
   1a520:	teq	r0, r1
   1a524:	movmi	r2, ip
   1a528:	movpl	r2, #0
   1a52c:	subs	r3, r3, #1
   1a530:	lsl	r1, r1, #1
   1a534:	eor	r0, r2, r0, lsl #1
   1a538:	bne	1a520 <read_boolean_unary_expression@@Base+0x3b8>
   1a53c:	bx	lr
   1a540:	strbeq	r1, [r1], #3511	; 0xdb7
   1a544:	ldr	r3, [pc, #76]	; 1a598 <read_boolean_unary_expression@@Base+0x430>
   1a548:	ldr	r1, [pc, #76]	; 1a59c <read_boolean_unary_expression@@Base+0x434>
   1a54c:	add	r3, pc, r3
   1a550:	push	{r4, r5, r6, lr}
   1a554:	mov	r5, r0
   1a558:	ldr	r4, [r3, r1]
   1a55c:	lsl	r1, r0, #2
   1a560:	mov	r0, r4
   1a564:	mov	r2, #1
   1a568:	ldr	r3, [r0], #28
   1a56c:	bl	11894 <fwrite@plt>
   1a570:	cmp	r0, #1
   1a574:	movne	r3, #1
   1a578:	ldr	r0, [r4, #8]
   1a57c:	strne	r3, [r4, #20]
   1a580:	ldr	r3, [r4, #4]
   1a584:	sub	r0, r0, r5
   1a588:	add	r3, r3, r5
   1a58c:	str	r3, [r4, #4]
   1a590:	str	r0, [r4, #8]
   1a594:	pop	{r4, r5, r6, pc}
   1a598:	andeq	r3, r1, ip, lsr #21
   1a59c:	strheq	r0, [r0], -r8
   1a5a0:	ldr	r3, [pc, #76]	; 1a5f4 <read_boolean_unary_expression@@Base+0x48c>
   1a5a4:	ldr	r2, [pc, #76]	; 1a5f8 <read_boolean_unary_expression@@Base+0x490>
   1a5a8:	add	r3, pc, r3
   1a5ac:	push	{r4, r5, r6, lr}
   1a5b0:	mov	r5, r0
   1a5b4:	ldr	r4, [r3, r2]
   1a5b8:	ldr	r3, [r4, #8]
   1a5bc:	cmp	r3, #1024	; 0x400
   1a5c0:	bcc	1a5e0 <read_boolean_unary_expression@@Base+0x478>
   1a5c4:	mov	r0, #1024	; 0x400
   1a5c8:	bl	1a544 <read_boolean_unary_expression@@Base+0x3dc>
   1a5cc:	ldr	r3, [r4, #8]
   1a5d0:	cmp	r3, #0
   1a5d4:	addne	r2, r4, #4096	; 0x1000
   1a5d8:	ldrne	r2, [r2, #28]
   1a5dc:	strne	r2, [r4, #28]
   1a5e0:	add	r0, r3, #7
   1a5e4:	add	r3, r5, r3
   1a5e8:	str	r3, [r4, #8]
   1a5ec:	add	r0, r4, r0, lsl #2
   1a5f0:	pop	{r4, r5, r6, pc}
   1a5f4:	andeq	r3, r1, r0, asr sl
   1a5f8:	strheq	r0, [r0], -r8
   1a5fc:	ldr	r3, [pc, #172]	; 1a6b0 <read_boolean_unary_expression@@Base+0x548>
   1a600:	ldr	r2, [pc, #172]	; 1a6b4 <read_boolean_unary_expression@@Base+0x54c>
   1a604:	add	r3, pc, r3
   1a608:	push	{r4, r5, r6, lr}
   1a60c:	mov	r5, r0
   1a610:	ldr	r4, [r3, r2]
   1a614:	ldr	r3, [r4, #8]
   1a618:	ldr	ip, [r4, #12]
   1a61c:	sub	ip, ip, r3
   1a620:	cmp	ip, r0
   1a624:	bcs	1a680 <read_boolean_unary_expression@@Base+0x518>
   1a628:	ldr	r2, [r4, #4]
   1a62c:	cmp	ip, #0
   1a630:	add	r2, r2, r3
   1a634:	str	r2, [r4, #4]
   1a638:	addne	r2, r4, #28
   1a63c:	mov	r0, r4
   1a640:	ldrne	r3, [r2, r3, lsl #2]
   1a644:	mov	r6, #0
   1a648:	strne	r3, [r4, #28]
   1a64c:	ldr	r3, [r0], #28
   1a650:	mov	r2, #4096	; 0x1000
   1a654:	add	r0, r0, ip, lsl #2
   1a658:	mov	r1, #1
   1a65c:	str	ip, [r4, #12]
   1a660:	str	r6, [r4, #8]
   1a664:	bl	118ac <fread@plt>
   1a668:	ldr	r3, [r4, #12]
   1a66c:	add	r0, r3, r0, lsr #2
   1a670:	cmp	r5, r0
   1a674:	str	r0, [r4, #12]
   1a678:	bhi	1a694 <read_boolean_unary_expression@@Base+0x52c>
   1a67c:	ldr	r3, [r4, #8]
   1a680:	add	r0, r3, #7
   1a684:	add	r5, r5, r3
   1a688:	add	r0, r4, r0, lsl #2
   1a68c:	str	r5, [r4, #8]
   1a690:	pop	{r4, r5, r6, pc}
   1a694:	ldr	r3, [r4, #16]
   1a698:	str	r6, [r4, #12]
   1a69c:	add	r5, r5, r3
   1a6a0:	sub	r5, r5, r0
   1a6a4:	str	r5, [r4, #16]
   1a6a8:	mov	r0, r6
   1a6ac:	pop	{r4, r5, r6, pc}
   1a6b0:	strdeq	r3, [r1], -r4
   1a6b4:	strheq	r0, [r0], -r8
   1a6b8:	push	{r0, r1, r2, r3}
   1a6bc:	ldr	r3, [pc, #52]	; 1a6f8 <read_boolean_unary_expression@@Base+0x590>
   1a6c0:	ldr	r1, [pc, #52]	; 1a6fc <read_boolean_unary_expression@@Base+0x594>
   1a6c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6c8:	add	r3, pc, r3
   1a6cc:	sub	sp, sp, #12
   1a6d0:	add	r2, sp, #20
   1a6d4:	str	r2, [sp, #4]
   1a6d8:	ldr	r0, [r3, r1]
   1a6dc:	ldr	r1, [sp, #16]
   1a6e0:	ldr	r0, [r0]
   1a6e4:	bl	1199c <vfprintf@plt>
   1a6e8:	add	sp, sp, #12
   1a6ec:	pop	{lr}		; (ldr lr, [sp], #4)
   1a6f0:	add	sp, sp, #16
   1a6f4:	bx	lr
   1a6f8:	andeq	r3, r1, r0, lsr r9
   1a6fc:	andeq	r0, r0, r4, lsr #1
   1a700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a704:	subs	r6, r1, #0
   1a708:	beq	1a764 <read_boolean_unary_expression@@Base+0x5fc>
   1a70c:	cmp	r2, #0
   1a710:	movne	r3, #0
   1a714:	mov	r7, r2
   1a718:	ldr	r8, [r6]
   1a71c:	addne	r5, r0, #12
   1a720:	movne	r4, r3
   1a724:	beq	1a754 <read_boolean_unary_expression@@Base+0x5ec>
   1a728:	ldr	r0, [r5, #4]!
   1a72c:	add	r2, r6, r3, lsl #3
   1a730:	cmp	r0, #0
   1a734:	add	r9, r3, #1
   1a738:	add	r4, r4, #1
   1a73c:	beq	1a74c <read_boolean_unary_expression@@Base+0x5e4>
   1a740:	ldr	r0, [r2, #28]
   1a744:	bl	11870 <free@plt>
   1a748:	mov	r3, r9
   1a74c:	cmp	r7, r4
   1a750:	bne	1a728 <read_boolean_unary_expression@@Base+0x5c0>
   1a754:	mov	r0, r6
   1a758:	bl	11870 <free@plt>
   1a75c:	mov	r0, r8
   1a760:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a764:	mov	r8, r6
   1a768:	b	1a75c <read_boolean_unary_expression@@Base+0x5f4>
   1a76c:	push	{r4, r5}
   1a770:	mov	r4, r0
   1a774:	mov	r5, r1
   1a778:	orrs	r3, r4, r5
   1a77c:	beq	1a7c0 <read_boolean_unary_expression@@Base+0x658>
   1a780:	cmp	r1, #0
   1a784:	clzeq	r1, r0
   1a788:	addeq	r1, r1, #32
   1a78c:	clzne	r1, r1
   1a790:	rsb	r3, r1, #63	; 0x3f
   1a794:	cmp	r3, #1
   1a798:	bls	1a7c0 <read_boolean_unary_expression@@Base+0x658>
   1a79c:	rsb	r2, r1, #61	; 0x3d
   1a7a0:	rsb	r0, r2, #32
   1a7a4:	lsr	r3, r4, r2
   1a7a8:	sub	r2, r2, #32
   1a7ac:	orr	r3, r3, r5, lsl r0
   1a7b0:	orr	r3, r3, r5, lsr r2
   1a7b4:	rsb	r1, r1, #1073741886	; 0x4000003e
   1a7b8:	and	r0, r3, #3
   1a7bc:	add	r0, r0, r1, lsl #2
   1a7c0:	pop	{r4, r5}
   1a7c4:	bx	lr
   1a7c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7cc:	mov	r1, r3
   1a7d0:	mov	sl, r0
   1a7d4:	mov	r0, r2
   1a7d8:	mov	r8, r2
   1a7dc:	mov	r9, r3
   1a7e0:	bl	1a76c <read_boolean_unary_expression@@Base+0x604>
   1a7e4:	add	r0, r0, r0, lsl #1
   1a7e8:	lsl	r0, r0, #3
   1a7ec:	add	r3, sl, r0
   1a7f0:	ldr	r2, [sl, r0]
   1a7f4:	ldrd	r4, [r3, #16]
   1a7f8:	ldrd	r6, [r3, #8]
   1a7fc:	add	r2, r2, #1
   1a800:	adds	r4, r4, r8
   1a804:	adc	r5, r5, r9
   1a808:	cmp	r8, r6
   1a80c:	sbcs	r1, r9, r7
   1a810:	str	r2, [sl, r0]
   1a814:	strd	r4, [r3, #16]
   1a818:	strdlt	r8, [r3, #8]
   1a81c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a820:	ldr	r3, [r1, #8]
   1a824:	cmp	r3, #0
   1a828:	bxeq	lr
   1a82c:	push	{r4, r5, r6, r7, r8, lr}
   1a830:	add	r2, r1, #6016	; 0x1780
   1a834:	mov	r8, r1
   1a838:	mov	r7, r0
   1a83c:	ldrd	r0, [r1, #24]
   1a840:	add	r2, r2, #32
   1a844:	mov	r3, r8
   1a848:	mov	ip, #0
   1a84c:	mov	r4, #0
   1a850:	mov	r5, #0
   1a854:	str	ip, [r3, #40]	; 0x28
   1a858:	strd	r0, [r3, #48]	; 0x30
   1a85c:	strd	r4, [r3, #56]	; 0x38
   1a860:	add	r3, r3, #24
   1a864:	cmp	r2, r3
   1a868:	bne	1a854 <read_boolean_unary_expression@@Base+0x6ec>
   1a86c:	cmp	r7, #0
   1a870:	popeq	{r4, r5, r6, r7, r8, pc}
   1a874:	add	r8, r8, #40	; 0x28
   1a878:	ldr	r3, [r7, #16]
   1a87c:	cmp	r3, #0
   1a880:	beq	1a908 <read_boolean_unary_expression@@Base+0x7a0>
   1a884:	ldr	r2, [r7, #56]	; 0x38
   1a888:	cmp	r2, #0
   1a88c:	beq	1a908 <read_boolean_unary_expression@@Base+0x7a0>
   1a890:	mov	r6, #0
   1a894:	b	1a8a4 <read_boolean_unary_expression@@Base+0x73c>
   1a898:	add	r6, r6, #1
   1a89c:	cmp	r2, r6
   1a8a0:	beq	1a908 <read_boolean_unary_expression@@Base+0x7a0>
   1a8a4:	ldr	r3, [r7, #60]	; 0x3c
   1a8a8:	ldr	r4, [r3, r6, lsl #2]
   1a8ac:	cmp	r4, #0
   1a8b0:	beq	1a898 <read_boolean_unary_expression@@Base+0x730>
   1a8b4:	ldr	r3, [r4]
   1a8b8:	cmp	r3, r7
   1a8bc:	bne	1a898 <read_boolean_unary_expression@@Base+0x730>
   1a8c0:	ldr	r3, [r4, #16]
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a898 <read_boolean_unary_expression@@Base+0x730>
   1a8cc:	mov	r5, #0
   1a8d0:	ldr	r2, [r4, #20]
   1a8d4:	lsl	r3, r5, #3
   1a8d8:	add	r2, r2, r3
   1a8dc:	mov	r0, r8
   1a8e0:	ldrd	r2, [r2]
   1a8e4:	bl	1a7c8 <read_boolean_unary_expression@@Base+0x660>
   1a8e8:	ldr	r3, [r4, #16]
   1a8ec:	add	r5, r5, #1
   1a8f0:	cmp	r3, r5
   1a8f4:	bhi	1a8d0 <read_boolean_unary_expression@@Base+0x768>
   1a8f8:	ldr	r2, [r7, #56]	; 0x38
   1a8fc:	add	r6, r6, #1
   1a900:	cmp	r2, r6
   1a904:	bne	1a8a4 <read_boolean_unary_expression@@Base+0x73c>
   1a908:	ldr	r7, [r7, #4]
   1a90c:	cmp	r7, #0
   1a910:	bne	1a878 <read_boolean_unary_expression@@Base+0x710>
   1a914:	pop	{r4, r5, r6, r7, r8, pc}
   1a918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a91c:	sub	sp, sp, #12
   1a920:	mov	r5, r0
   1a924:	str	r0, [sp, #4]
   1a928:	mov	r6, r2
   1a92c:	str	r2, [sp]
   1a930:	mov	r0, r1
   1a934:	mov	r4, r1
   1a938:	ldr	r2, [pc, #344]	; 1aa98 <read_boolean_unary_expression@@Base+0x930>
   1a93c:	mov	r1, #0
   1a940:	bl	1196c <memset@plt>
   1a944:	subs	r3, r5, #0
   1a948:	mov	r5, #0
   1a94c:	str	r5, [r6]
   1a950:	beq	1aa7c <read_boolean_unary_expression@@Base+0x914>
   1a954:	mov	r7, r5
   1a958:	mov	r9, r5
   1a95c:	mov	r8, r3
   1a960:	ldr	r0, [r8, #12]
   1a964:	bl	11924 <strlen@plt>
   1a968:	cmp	r5, r0
   1a96c:	ldrcc	r3, [sp]
   1a970:	strcc	r0, [r3]
   1a974:	mov	r0, r7
   1a978:	ldr	r1, [r8, #8]
   1a97c:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a980:	ldr	r6, [r8, #56]	; 0x38
   1a984:	mov	r1, r6
   1a988:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a98c:	cmp	r6, #0
   1a990:	mov	r7, r0
   1a994:	beq	1aa64 <read_boolean_unary_expression@@Base+0x8fc>
   1a998:	ldr	r5, [r8, #60]	; 0x3c
   1a99c:	add	r6, r5, r6, lsl #2
   1a9a0:	b	1a9c4 <read_boolean_unary_expression@@Base+0x85c>
   1a9a4:	mov	r0, r7
   1a9a8:	mov	r1, r9
   1a9ac:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a9b0:	mov	r1, r9
   1a9b4:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a9b8:	mov	r7, r0
   1a9bc:	cmp	r6, r5
   1a9c0:	beq	1aa64 <read_boolean_unary_expression@@Base+0x8fc>
   1a9c4:	ldr	fp, [r5], #4
   1a9c8:	cmp	fp, #0
   1a9cc:	beq	1a9a4 <read_boolean_unary_expression@@Base+0x83c>
   1a9d0:	ldr	r3, [fp]
   1a9d4:	cmp	r3, r8
   1a9d8:	bne	1a9a4 <read_boolean_unary_expression@@Base+0x83c>
   1a9dc:	mov	r0, r7
   1a9e0:	ldr	r1, [fp, #12]
   1a9e4:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a9e8:	ldr	r1, [fp, #8]
   1a9ec:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1a9f0:	ldr	r3, [r8, #16]
   1a9f4:	cmp	r3, #0
   1a9f8:	mov	r7, r0
   1a9fc:	beq	1a9bc <read_boolean_unary_expression@@Base+0x854>
   1aa00:	ldr	sl, [fp, #16]
   1aa04:	ldr	r3, [r4, #8]
   1aa08:	mov	r1, sl
   1aa0c:	add	r3, r3, sl
   1aa10:	str	r3, [r4, #8]
   1aa14:	bl	1a518 <read_boolean_unary_expression@@Base+0x3b0>
   1aa18:	cmp	sl, #0
   1aa1c:	mov	r7, r0
   1aa20:	beq	1a9bc <read_boolean_unary_expression@@Base+0x854>
   1aa24:	ldr	ip, [fp, #20]
   1aa28:	ldrd	r2, [r4, #16]
   1aa2c:	add	lr, ip, sl, lsl #3
   1aa30:	ldrd	r0, [ip]
   1aa34:	ldrd	sl, [r4, #24]
   1aa38:	adds	r2, r2, r0
   1aa3c:	adc	r3, r3, r1
   1aa40:	strd	r2, [r4, #16]
   1aa44:	ldrd	r0, [ip], #8
   1aa48:	cmp	sl, r0
   1aa4c:	sbcs	sl, fp, r1
   1aa50:	strdlt	r0, [r4, #24]
   1aa54:	cmp	lr, ip
   1aa58:	bne	1aa30 <read_boolean_unary_expression@@Base+0x8c8>
   1aa5c:	cmp	r6, r5
   1aa60:	bne	1a9c4 <read_boolean_unary_expression@@Base+0x85c>
   1aa64:	ldr	r8, [r8, #4]
   1aa68:	cmp	r8, #0
   1aa6c:	beq	1aa80 <read_boolean_unary_expression@@Base+0x918>
   1aa70:	ldr	r3, [sp]
   1aa74:	ldr	r5, [r3]
   1aa78:	b	1a960 <read_boolean_unary_expression@@Base+0x7f8>
   1aa7c:	ldr	r7, [sp, #4]
   1aa80:	ldr	r0, [sp, #4]
   1aa84:	mov	r1, r4
   1aa88:	bl	1a820 <read_boolean_unary_expression@@Base+0x6b8>
   1aa8c:	mov	r0, r7
   1aa90:	add	sp, sp, #12
   1aa94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa98:	andeq	r1, r0, r8, asr #15
   1aa9c:	push	{r4, r5, r6, lr}
   1aaa0:	mov	r4, r0
   1aaa4:	ldr	r0, [pc, #172]	; 1ab58 <read_boolean_unary_expression@@Base+0x9f0>
   1aaa8:	add	r0, pc, r0
   1aaac:	bl	118b8 <getenv@plt>
   1aab0:	subs	r3, r0, #0
   1aab4:	beq	1aac0 <read_boolean_unary_expression@@Base+0x958>
   1aab8:	bl	119a8 <atoi@plt>
   1aabc:	bic	r3, r0, r0, asr #31
   1aac0:	ldr	r0, [pc, #148]	; 1ab5c <read_boolean_unary_expression@@Base+0x9f4>
   1aac4:	str	r3, [r4, #8]
   1aac8:	add	r0, pc, r0
   1aacc:	bl	118b8 <getenv@plt>
   1aad0:	subs	r6, r0, #0
   1aad4:	beq	1ab28 <read_boolean_unary_expression@@Base+0x9c0>
   1aad8:	bl	11924 <strlen@plt>
   1aadc:	subs	r5, r0, #0
   1aae0:	beq	1ab28 <read_boolean_unary_expression@@Base+0x9c0>
   1aae4:	sub	r3, r5, #1
   1aae8:	ldrb	r2, [r6, r3]
   1aaec:	cmp	r2, #47	; 0x2f
   1aaf0:	beq	1ab1c <read_boolean_unary_expression@@Base+0x9b4>
   1aaf4:	ldr	r0, [r4, #4]
   1aaf8:	str	r5, [r4, #12]
   1aafc:	add	r0, r0, #2
   1ab00:	add	r0, r0, r5
   1ab04:	bl	118d0 <malloc@plt>
   1ab08:	mov	r2, r5
   1ab0c:	mov	r1, r6
   1ab10:	str	r0, [r4]
   1ab14:	pop	{r4, r5, r6, lr}
   1ab18:	b	1187c <memcpy@plt>
   1ab1c:	cmp	r3, #0
   1ab20:	movne	r5, r3
   1ab24:	bne	1aaf4 <read_boolean_unary_expression@@Base+0x98c>
   1ab28:	ldr	r3, [r4, #8]
   1ab2c:	cmp	r3, #0
   1ab30:	ldrne	r6, [pc, #40]	; 1ab60 <read_boolean_unary_expression@@Base+0x9f8>
   1ab34:	movne	r5, #1
   1ab38:	addne	r6, pc, r6
   1ab3c:	bne	1aaf4 <read_boolean_unary_expression@@Base+0x98c>
   1ab40:	ldr	r0, [r4, #4]
   1ab44:	str	r3, [r4, #12]
   1ab48:	add	r0, r0, #2
   1ab4c:	bl	118d0 <malloc@plt>
   1ab50:	str	r0, [r4]
   1ab54:	pop	{r4, r5, r6, pc}
   1ab58:	muleq	r0, r8, r5
   1ab5c:	andeq	r2, r0, ip, lsl #11
   1ab60:	andeq	r2, r0, r4, lsl #10
   1ab64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab68:	sub	sp, sp, #6080	; 0x17c0
   1ab6c:	sub	sp, sp, #44	; 0x2c
   1ab70:	add	r3, sp, #72	; 0x48
   1ab74:	mov	r4, r0
   1ab78:	str	r0, [sp, #64]	; 0x40
   1ab7c:	str	r1, [sp, #60]	; 0x3c
   1ab80:	mov	r0, r3
   1ab84:	ldr	r2, [pc, #1068]	; 1afb8 <read_boolean_unary_expression@@Base+0xe50>
   1ab88:	mov	r1, #0
   1ab8c:	str	r3, [sp, #68]	; 0x44
   1ab90:	bl	1196c <memset@plt>
   1ab94:	add	r3, r4, #6016	; 0x1780
   1ab98:	add	r3, r3, #8
   1ab9c:	add	r2, sp, #2016	; 0x7e0
   1aba0:	mov	sl, #251	; 0xfb
   1aba4:	add	r2, r2, #8
   1aba8:	mov	fp, #0
   1abac:	str	r3, [sp, #56]	; 0x38
   1abb0:	add	r3, sp, #72	; 0x48
   1abb4:	str	r2, [sp, #44]	; 0x2c
   1abb8:	str	r3, [sp, #48]	; 0x30
   1abbc:	mov	r2, #0
   1abc0:	mov	r3, #0
   1abc4:	mov	r5, sl
   1abc8:	mov	r0, fp
   1abcc:	strd	r2, [sp, #24]
   1abd0:	str	sl, [sp, #52]	; 0x34
   1abd4:	ldr	r9, [sp, #56]	; 0x38
   1abd8:	str	r5, [sp, #40]	; 0x28
   1abdc:	ldr	sl, [sp, #60]	; 0x3c
   1abe0:	ldrd	r2, [r9, #16]
   1abe4:	ldr	r4, [r9]
   1abe8:	str	r4, [sp, #4]
   1abec:	strd	r2, [sp, #8]
   1abf0:	ldr	r3, [sp, #4]
   1abf4:	cmp	r3, #0
   1abf8:	beq	1aea4 <read_boolean_unary_expression@@Base+0xd3c>
   1abfc:	cmp	fp, #0
   1ac00:	bne	1ad88 <read_boolean_unary_expression@@Base+0xc20>
   1ac04:	ldr	r5, [sp, #40]	; 0x28
   1ac08:	cmp	r5, #0
   1ac0c:	blt	1af94 <read_boolean_unary_expression@@Base+0xe2c>
   1ac10:	add	ip, r5, r5, lsl #1
   1ac14:	ldr	fp, [sl, ip, lsl #3]
   1ac18:	add	ip, sl, ip, lsl #3
   1ac1c:	cmp	fp, #0
   1ac20:	bne	1af88 <read_boolean_unary_expression@@Base+0xe20>
   1ac24:	mov	r3, ip
   1ac28:	ldr	r4, [sp, #4]
   1ac2c:	b	1ac40 <read_boolean_unary_expression@@Base+0xad8>
   1ac30:	ldr	fp, [r3]
   1ac34:	mov	ip, r3
   1ac38:	cmp	fp, #0
   1ac3c:	bne	1af80 <read_boolean_unary_expression@@Base+0xe18>
   1ac40:	subs	r5, r5, #1
   1ac44:	sub	r3, r3, #24
   1ac48:	bcs	1ac30 <read_boolean_unary_expression@@Base+0xac8>
   1ac4c:	ldr	sl, [sp, #52]	; 0x34
   1ac50:	mov	r8, r0
   1ac54:	mov	r5, r4
   1ac58:	lsl	r4, sl, #1
   1ac5c:	ldr	r3, [sp, #44]	; 0x2c
   1ac60:	add	lr, r4, sl
   1ac64:	sub	ip, r3, #1952	; 0x7a0
   1ac68:	lsl	lr, lr, #3
   1ac6c:	add	ip, ip, lr
   1ac70:	ldrd	r0, [sp, #8]
   1ac74:	add	lr, r3, lr
   1ac78:	ldrd	r2, [ip, #16]
   1ac7c:	ldr	r6, [lr, #-1952]	; 0xfffff860
   1ac80:	adds	r0, r0, r2
   1ac84:	adc	r1, r1, r3
   1ac88:	mov	r2, r0
   1ac8c:	mov	r3, r1
   1ac90:	ldrd	r0, [ip, #8]
   1ac94:	strd	r2, [ip, #16]
   1ac98:	ldr	r3, [sp, #56]	; 0x38
   1ac9c:	add	r5, r6, r5
   1aca0:	str	r5, [lr, #-1952]	; 0xfffff860
   1aca4:	orrs	lr, r0, r1
   1aca8:	ldrd	r2, [r3, #8]
   1acac:	beq	1acbc <read_boolean_unary_expression@@Base+0xb54>
   1acb0:	cmp	r2, r0
   1acb4:	sbcs	r1, r3, r1
   1acb8:	bge	1acd0 <read_boolean_unary_expression@@Base+0xb68>
   1acbc:	ldr	r1, [sp, #44]	; 0x2c
   1acc0:	add	r0, r4, sl
   1acc4:	sub	r1, r1, #1952	; 0x7a0
   1acc8:	add	r1, r1, r0, lsl #3
   1accc:	strd	r2, [r1, #8]
   1acd0:	add	lr, r4, sl
   1acd4:	ldr	r3, [sp, #68]	; 0x44
   1acd8:	lsl	lr, lr, #3
   1acdc:	add	ip, r3, lr
   1ace0:	ldr	r3, [sp, #64]	; 0x40
   1ace4:	add	lr, r3, lr
   1ace8:	b	1ad38 <read_boolean_unary_expression@@Base+0xbd0>
   1acec:	ldrd	r0, [ip, #-8]
   1acf0:	ldrd	r2, [lr, #-8]
   1acf4:	ldrd	r4, [ip, #-16]
   1acf8:	adds	r6, r0, r2
   1acfc:	adc	r7, r1, r3
   1ad00:	ldr	r2, [lr, #-24]	; 0xffffffe8
   1ad04:	ldr	r3, [ip, #-24]	; 0xffffffe8
   1ad08:	orrs	r1, r4, r5
   1ad0c:	add	r3, r3, r2
   1ad10:	str	r3, [ip, #-24]	; 0xffffffe8
   1ad14:	strd	r6, [ip, #-8]
   1ad18:	ldrd	r2, [lr, #-16]
   1ad1c:	beq	1ad2c <read_boolean_unary_expression@@Base+0xbc4>
   1ad20:	cmp	r2, r4
   1ad24:	sbcs	r1, r3, r5
   1ad28:	bge	1ad30 <read_boolean_unary_expression@@Base+0xbc8>
   1ad2c:	strd	r2, [ip, #-16]
   1ad30:	sub	ip, ip, #24
   1ad34:	sub	lr, lr, #24
   1ad38:	subs	sl, sl, #1
   1ad3c:	bpl	1acec <read_boolean_unary_expression@@Base+0xb84>
   1ad40:	ldr	r3, [sp, #44]	; 0x2c
   1ad44:	add	r0, r8, r8, lsl #1
   1ad48:	sub	r3, r3, #1952	; 0x7a0
   1ad4c:	add	r3, r3, r0, lsl #3
   1ad50:	ldrd	r6, [sp, #24]
   1ad54:	ldrd	r4, [r3, #16]
   1ad58:	ldr	r1, [sp, #68]	; 0x44
   1ad5c:	ldr	r0, [sp, #64]	; 0x40
   1ad60:	adds	r6, r6, r4
   1ad64:	adc	r7, r7, r5
   1ad68:	mov	r4, r6
   1ad6c:	mov	r5, r7
   1ad70:	ldr	r2, [pc, #576]	; 1afb8 <read_boolean_unary_expression@@Base+0xe50>
   1ad74:	strd	r4, [r3, #16]
   1ad78:	bl	1187c <memcpy@plt>
   1ad7c:	add	sp, sp, #6080	; 0x17c0
   1ad80:	add	sp, sp, #44	; 0x2c
   1ad84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad88:	ldr	r3, [sp, #40]	; 0x28
   1ad8c:	add	ip, r3, r3, lsl #1
   1ad90:	add	ip, sl, ip, lsl #3
   1ad94:	ldr	lr, [sp, #4]
   1ad98:	cmp	fp, lr
   1ad9c:	bcc	1af14 <read_boolean_unary_expression@@Base+0xdac>
   1ada0:	ldrd	r2, [r9, #8]
   1ada4:	ldrd	r0, [ip, #8]
   1ada8:	adds	r4, r2, r0
   1adac:	adc	r5, r3, r1
   1adb0:	cmp	fp, lr
   1adb4:	strd	r4, [sp, #16]
   1adb8:	bls	1afa4 <read_boolean_unary_expression@@Base+0xe3c>
   1adbc:	ldrd	r6, [sp, #24]
   1adc0:	mov	r2, fp
   1adc4:	mov	r3, #0
   1adc8:	umull	r0, r1, lr, r6
   1adcc:	mla	r1, lr, r7, r1
   1add0:	bl	1c4a0 <__gcov_sort_n_vals@@Base+0x534>
   1add4:	mov	r2, r0
   1add8:	subs	r0, r6, r2
   1addc:	mov	r3, r1
   1ade0:	sbc	r1, r7, r3
   1ade4:	strd	r0, [sp, #24]
   1ade8:	ldr	r1, [sp, #4]
   1adec:	mov	r0, #0
   1adf0:	sub	fp, fp, r1
   1adf4:	mov	r8, r1
   1adf8:	mov	r1, #0
   1adfc:	str	r1, [sp, #4]
   1ae00:	mov	r1, #0
   1ae04:	ldrd	r6, [sp, #8]
   1ae08:	strd	r0, [sp, #8]
   1ae0c:	adds	r4, r2, r6
   1ae10:	adc	r5, r3, r7
   1ae14:	ldrd	r0, [sp, #16]
   1ae18:	strd	r4, [sp, #32]
   1ae1c:	bl	1a76c <read_boolean_unary_expression@@Base+0x604>
   1ae20:	ldr	r3, [sp, #48]	; 0x30
   1ae24:	ldrd	r4, [sp, #32]
   1ae28:	add	r1, r0, r0, lsl #1
   1ae2c:	lsl	r1, r1, #3
   1ae30:	add	ip, r3, r1
   1ae34:	ldr	r3, [sp, #44]	; 0x2c
   1ae38:	ldrd	r6, [ip, #8]
   1ae3c:	add	r1, r3, r1
   1ae40:	ldrd	r2, [ip, #16]
   1ae44:	adds	r2, r2, r4
   1ae48:	adc	r3, r3, r5
   1ae4c:	strd	r2, [sp, #32]
   1ae50:	ldrd	r2, [sp, #16]
   1ae54:	cmp	r2, r6
   1ae58:	sbcs	lr, r3, r7
   1ae5c:	movlt	lr, #1
   1ae60:	movge	lr, #0
   1ae64:	orrs	r4, r6, r7
   1ae68:	ldr	r4, [r1, #-1952]	; 0xfffff860
   1ae6c:	orreq	lr, lr, #1
   1ae70:	add	r8, r4, r8
   1ae74:	ldrd	r4, [sp, #32]
   1ae78:	cmp	lr, #0
   1ae7c:	str	r8, [r1, #-1952]	; 0xfffff860
   1ae80:	strd	r4, [ip, #16]
   1ae84:	strdne	r2, [ip, #8]
   1ae88:	cmp	fp, #0
   1ae8c:	ldreq	r3, [sp, #40]	; 0x28
   1ae90:	subeq	r3, r3, #1
   1ae94:	streq	r3, [sp, #40]	; 0x28
   1ae98:	ldr	r3, [sp, #4]
   1ae9c:	cmp	r3, #0
   1aea0:	bne	1abfc <read_boolean_unary_expression@@Base+0xa94>
   1aea4:	ldr	r3, [sp, #52]	; 0x34
   1aea8:	ldr	r5, [sp, #40]	; 0x28
   1aeac:	sub	r3, r3, #1
   1aeb0:	str	r3, [sp, #52]	; 0x34
   1aeb4:	cmn	r3, #1
   1aeb8:	ldr	r3, [sp, #56]	; 0x38
   1aebc:	sub	r3, r3, #24
   1aec0:	str	r3, [sp, #56]	; 0x38
   1aec4:	bne	1abd4 <read_boolean_unary_expression@@Base+0xa6c>
   1aec8:	cmp	fp, #0
   1aecc:	mov	r9, r5
   1aed0:	subne	r9, r5, #1
   1aed4:	cmp	r9, #0
   1aed8:	mov	r8, r0
   1aedc:	blt	1ad40 <read_boolean_unary_expression@@Base+0xbd8>
   1aee0:	ldr	r2, [sp, #60]	; 0x3c
   1aee4:	add	r3, r9, r9, lsl #1
   1aee8:	sub	r0, r2, #24
   1aeec:	add	r1, r2, r3, lsl #3
   1aef0:	ldrd	r2, [sp, #24]
   1aef4:	ldrd	r4, [r1, #16]
   1aef8:	sub	r1, r1, #24
   1aefc:	adds	r2, r2, r4
   1af00:	adc	r3, r3, r5
   1af04:	cmp	r0, r1
   1af08:	bne	1aef4 <read_boolean_unary_expression@@Base+0xd8c>
   1af0c:	strd	r2, [sp, #24]
   1af10:	b	1ad40 <read_boolean_unary_expression@@Base+0xbd8>
   1af14:	ldrd	r2, [sp, #8]
   1af18:	ldrd	r6, [ip, #8]
   1af1c:	ldrd	r4, [r9, #8]
   1af20:	umull	r0, r1, fp, r2
   1af24:	ldr	r8, [sp, #4]
   1af28:	adds	r4, r4, r6
   1af2c:	adc	r5, r5, r7
   1af30:	mla	r1, fp, r3, r1
   1af34:	mov	r2, r8
   1af38:	mov	r3, #0
   1af3c:	strd	r4, [sp, #16]
   1af40:	bl	1c4a0 <__gcov_sort_n_vals@@Base+0x534>
   1af44:	sub	r3, r8, fp
   1af48:	str	r3, [sp, #4]
   1af4c:	ldrd	r2, [sp, #8]
   1af50:	mov	r8, fp
   1af54:	mov	fp, #0
   1af58:	subs	r2, r2, r0
   1af5c:	sbc	r3, r3, r1
   1af60:	mov	r6, r0
   1af64:	mov	r7, r1
   1af68:	mov	r0, #0
   1af6c:	mov	r1, #0
   1af70:	strd	r2, [sp, #8]
   1af74:	ldrd	r2, [sp, #24]
   1af78:	strd	r0, [sp, #24]
   1af7c:	b	1ae0c <read_boolean_unary_expression@@Base+0xca4>
   1af80:	str	r5, [sp, #40]	; 0x28
   1af84:	str	r4, [sp, #4]
   1af88:	ldrd	r2, [ip, #16]
   1af8c:	strd	r2, [sp, #24]
   1af90:	b	1ad94 <read_boolean_unary_expression@@Base+0xc2c>
   1af94:	ldr	sl, [sp, #52]	; 0x34
   1af98:	mov	r8, r0
   1af9c:	ldr	r5, [sp, #4]
   1afa0:	b	1ac58 <read_boolean_unary_expression@@Base+0xaf0>
   1afa4:	mov	r0, #0
   1afa8:	mov	r1, #0
   1afac:	ldrd	r2, [sp, #24]
   1afb0:	strd	r0, [sp, #24]
   1afb4:	b	1ade8 <read_boolean_unary_expression@@Base+0xc80>
   1afb8:	andeq	r1, r0, r0, lsr #15
   1afbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afc0:	ldrb	r4, [r0]
   1afc4:	cmp	r4, #47	; 0x2f
   1afc8:	addeq	r5, r0, #1
   1afcc:	ldrbeq	r4, [r0, #1]
   1afd0:	movne	r5, r0
   1afd4:	cmp	r4, #0
   1afd8:	beq	1b02c <read_boolean_unary_expression@@Base+0xec4>
   1afdc:	mov	r6, r0
   1afe0:	ldr	sl, [pc, #144]	; 1b078 <read_boolean_unary_expression@@Base+0xf10>
   1afe4:	mov	r8, #0
   1afe8:	mov	r7, #47	; 0x2f
   1afec:	b	1affc <read_boolean_unary_expression@@Base+0xe94>
   1aff0:	ldrb	r4, [r5, #1]!
   1aff4:	cmp	r4, #0
   1aff8:	beq	1b02c <read_boolean_unary_expression@@Base+0xec4>
   1affc:	cmp	r4, #47	; 0x2f
   1b000:	bne	1aff0 <read_boolean_unary_expression@@Base+0xe88>
   1b004:	strb	r8, [r5]
   1b008:	mov	r1, #0
   1b00c:	mov	r0, r6
   1b010:	bl	11978 <access@plt>
   1b014:	cmn	r0, #1
   1b018:	beq	1b038 <read_boolean_unary_expression@@Base+0xed0>
   1b01c:	strb	r7, [r5]
   1b020:	ldrb	r4, [r5, #1]!
   1b024:	cmp	r4, #0
   1b028:	bne	1affc <read_boolean_unary_expression@@Base+0xe94>
   1b02c:	mov	r9, #0
   1b030:	mov	r0, r9
   1b034:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b038:	mov	r1, sl
   1b03c:	mov	r0, r6
   1b040:	bl	11954 <mkdir@plt>
   1b044:	cmn	r0, #1
   1b048:	mov	r9, r0
   1b04c:	bne	1b01c <read_boolean_unary_expression@@Base+0xeb4>
   1b050:	bl	1193c <__errno_location@plt>
   1b054:	ldr	r3, [r0]
   1b058:	cmp	r3, #17
   1b05c:	beq	1b01c <read_boolean_unary_expression@@Base+0xeb4>
   1b060:	ldr	r0, [pc, #20]	; 1b07c <read_boolean_unary_expression@@Base+0xf14>
   1b064:	mov	r1, r6
   1b068:	add	r0, pc, r0
   1b06c:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b070:	strb	r4, [r5]
   1b074:	b	1b030 <read_boolean_unary_expression@@Base+0xec8>
   1b078:	andeq	r0, r0, sp, ror #3
   1b07c:	strdeq	r1, [r0], -r8
   1b080:	ldr	r3, [pc, #124]	; 1b104 <read_boolean_unary_expression@@Base+0xf9c>
   1b084:	cmp	r1, r3
   1b088:	beq	1b0fc <read_boolean_unary_expression@@Base+0xf94>
   1b08c:	cmp	r2, #0
   1b090:	push	{r4, r5, lr}
   1b094:	sub	sp, sp, #12
   1b098:	ldreq	r2, [r0]
   1b09c:	lsr	r3, r1, #24
   1b0a0:	ldr	r0, [pc, #96]	; 1b108 <read_boolean_unary_expression@@Base+0xfa0>
   1b0a4:	lsr	r5, r1, #16
   1b0a8:	lsr	r4, r1, #8
   1b0ac:	strb	r1, [sp, #3]
   1b0b0:	strb	r3, [sp]
   1b0b4:	mov	r1, #53	; 0x35
   1b0b8:	mov	r3, #42	; 0x2a
   1b0bc:	mov	lr, #54	; 0x36
   1b0c0:	mov	ip, #48	; 0x30
   1b0c4:	strb	r1, [sp, #6]
   1b0c8:	strb	r3, [sp, #7]
   1b0cc:	mov	r1, r2
   1b0d0:	mov	r3, sp
   1b0d4:	add	r2, sp, #4
   1b0d8:	add	r0, pc, r0
   1b0dc:	strb	r5, [sp, #1]
   1b0e0:	strb	r4, [sp, #2]
   1b0e4:	strb	lr, [sp, #4]
   1b0e8:	strb	ip, [sp, #5]
   1b0ec:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b0f0:	mov	r0, #0
   1b0f4:	add	sp, sp, #12
   1b0f8:	pop	{r4, r5, pc}
   1b0fc:	mov	r0, #1
   1b100:	bx	lr
   1b104:	ldrtcc	r3, [r0], -sl, lsr #10
   1b108:			; <UNDEFINED> instruction: 0x00001fb0
   1b10c:	ldr	r2, [r2, #16]
   1b110:	push	{r4, r5, r6, lr}
   1b114:	cmp	r2, #0
   1b118:	mov	r6, r3
   1b11c:	ldr	ip, [sp, #16]
   1b120:	beq	1b1ec <read_boolean_unary_expression@@Base+0x1084>
   1b124:	ldr	r3, [r3, #12]
   1b128:	cmp	r1, #0
   1b12c:	addeq	r2, r3, #1
   1b130:	streq	r2, [r6, #12]
   1b134:	cmp	r3, #0
   1b138:	beq	1b190 <read_boolean_unary_expression@@Base+0x1028>
   1b13c:	ldrd	r0, [ip, #16]
   1b140:	ldrd	r2, [r6, #16]
   1b144:	ldrd	r4, [r6, #24]
   1b148:	adds	r2, r2, r0
   1b14c:	adc	r3, r3, r1
   1b150:	strd	r2, [r6, #16]
   1b154:	ldrd	r0, [ip, #24]
   1b158:	cmp	r4, r0
   1b15c:	sbcs	r3, r5, r1
   1b160:	blt	1b210 <read_boolean_unary_expression@@Base+0x10a8>
   1b164:	ldrd	r2, [r6, #32]
   1b168:	adds	r2, r2, r0
   1b16c:	adc	r3, r3, r1
   1b170:	strd	r2, [r6, #32]
   1b174:	add	r1, ip, #40	; 0x28
   1b178:	add	r0, r6, #40	; 0x28
   1b17c:	bl	1ab64 <read_boolean_unary_expression@@Base+0x9fc>
   1b180:	ldr	r3, [sp, #20]
   1b184:	mov	r0, #0
   1b188:	str	r3, [r6]
   1b18c:	pop	{r4, r5, r6, pc}
   1b190:	ldr	r1, [ip, #8]
   1b194:	ldrd	r2, [r6, #16]
   1b198:	str	r1, [r6, #8]
   1b19c:	ldrd	r0, [ip, #16]
   1b1a0:	ldrd	r4, [r6, #24]
   1b1a4:	adds	r2, r2, r0
   1b1a8:	adc	r3, r3, r1
   1b1ac:	strd	r2, [r6, #16]
   1b1b0:	ldrd	r0, [ip, #24]
   1b1b4:	cmp	r4, r0
   1b1b8:	sbcs	r3, r5, r1
   1b1bc:	bge	1b22c <read_boolean_unary_expression@@Base+0x10c4>
   1b1c0:	ldrd	r2, [r6, #32]
   1b1c4:	strd	r0, [r6, #24]
   1b1c8:	ldrd	r0, [ip, #24]
   1b1cc:	adds	r2, r2, r0
   1b1d0:	adc	r3, r3, r1
   1b1d4:	strd	r2, [r6, #32]
   1b1d8:	add	r1, ip, #40	; 0x28
   1b1dc:	ldr	r2, [pc, #92]	; 1b240 <read_boolean_unary_expression@@Base+0x10d8>
   1b1e0:	add	r0, r6, #40	; 0x28
   1b1e4:	bl	1187c <memcpy@plt>
   1b1e8:	b	1b180 <read_boolean_unary_expression@@Base+0x1018>
   1b1ec:	ldr	r3, [r3, #12]
   1b1f0:	cmp	r3, #0
   1b1f4:	beq	1b180 <read_boolean_unary_expression@@Base+0x1018>
   1b1f8:	mov	r1, r0
   1b1fc:	ldr	r0, [pc, #64]	; 1b244 <read_boolean_unary_expression@@Base+0x10dc>
   1b200:	add	r0, pc, r0
   1b204:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b208:	mvn	r0, #0
   1b20c:	pop	{r4, r5, r6, pc}
   1b210:	ldrd	r2, [r6, #32]
   1b214:	strd	r0, [r6, #24]
   1b218:	ldrd	r0, [ip, #24]
   1b21c:	adds	r2, r2, r0
   1b220:	adc	r3, r3, r1
   1b224:	strd	r2, [r6, #32]
   1b228:	b	1b174 <read_boolean_unary_expression@@Base+0x100c>
   1b22c:	ldrd	r2, [r6, #32]
   1b230:	adds	r2, r2, r0
   1b234:	adc	r3, r3, r1
   1b238:	strd	r2, [r6, #32]
   1b23c:	b	1b1d8 <read_boolean_unary_expression@@Base+0x1070>
   1b240:	andeq	r1, r0, r0, lsr #15
   1b244:	andeq	r1, r0, r0, asr #29
   1b248:	ldr	ip, [pc, #52]	; 1b284 <read_boolean_unary_expression@@Base+0x111c>
   1b24c:	ldr	r3, [pc, #52]	; 1b288 <read_boolean_unary_expression@@Base+0x1120>
   1b250:	add	ip, pc, ip
   1b254:	push	{r4, lr}
   1b258:	mov	lr, #0
   1b25c:	ldr	r3, [ip, r3]
   1b260:	mvn	r4, #0
   1b264:	mov	r2, lr
   1b268:	mov	r1, lr
   1b26c:	str	r4, [r3, #24]
   1b270:	str	lr, [r3, #4]
   1b274:	str	lr, [r3, #8]
   1b278:	ldr	r0, [r3]
   1b27c:	pop	{r4, lr}
   1b280:	b	119b4 <fseek@plt>
   1b284:	andeq	r2, r1, r8, lsr #27
   1b288:	strheq	r0, [r0], -r8
   1b28c:	push	{r4, r5, r6, r7, lr}
   1b290:	sub	sp, sp, #108	; 0x6c
   1b294:	mov	r4, #0
   1b298:	mov	r7, r0
   1b29c:	strh	r4, [sp, #2]
   1b2a0:	str	r4, [sp, #4]
   1b2a4:	str	r4, [sp, #8]
   1b2a8:	bl	1190c <getpid@plt>
   1b2ac:	ldr	r3, [pc, #240]	; 1b3a4 <read_boolean_unary_expression@@Base+0x123c>
   1b2b0:	ldr	ip, [pc, #240]	; 1b3a8 <read_boolean_unary_expression@@Base+0x1240>
   1b2b4:	add	r3, pc, r3
   1b2b8:	mvn	lr, #0
   1b2bc:	mov	r6, #1
   1b2c0:	ldr	r2, [pc, #228]	; 1b3ac <read_boolean_unary_expression@@Base+0x1244>
   1b2c4:	mov	r1, #66	; 0x42
   1b2c8:	str	r0, [sp, #12]
   1b2cc:	ldr	r5, [r3, ip]
   1b2d0:	mov	r0, r7
   1b2d4:	strh	r6, [sp]
   1b2d8:	str	r4, [r5, #4]
   1b2dc:	str	r4, [r5, #12]
   1b2e0:	str	r4, [r5, #8]
   1b2e4:	str	r4, [r5, #20]
   1b2e8:	str	lr, [r5, #16]
   1b2ec:	bl	11900 <open@plt>
   1b2f0:	subs	r6, r0, #0
   1b2f4:	movlt	r0, r4
   1b2f8:	blt	1b378 <read_boolean_unary_expression@@Base+0x1210>
   1b2fc:	mov	r7, sp
   1b300:	mov	r4, #7
   1b304:	mov	r2, r7
   1b308:	mov	r1, r4
   1b30c:	mov	r0, r6
   1b310:	bl	11960 <fcntl@plt>
   1b314:	cmp	r0, #0
   1b318:	beq	1b32c <read_boolean_unary_expression@@Base+0x11c4>
   1b31c:	bl	1193c <__errno_location@plt>
   1b320:	ldr	r3, [r0]
   1b324:	cmp	r3, #4
   1b328:	beq	1b304 <read_boolean_unary_expression@@Base+0x119c>
   1b32c:	ldr	r1, [pc, #124]	; 1b3b0 <read_boolean_unary_expression@@Base+0x1248>
   1b330:	mov	r0, r6
   1b334:	add	r1, pc, r1
   1b338:	bl	11834 <fdopen@plt>
   1b33c:	mov	r4, r0
   1b340:	cmp	r4, #0
   1b344:	mov	r0, r6
   1b348:	str	r4, [r5]
   1b34c:	beq	1b380 <read_boolean_unary_expression@@Base+0x1218>
   1b350:	add	r1, sp, #16
   1b354:	bl	1c76c <__libc_csu_fini@@Base+0x1c>
   1b358:	cmp	r0, #0
   1b35c:	blt	1b38c <read_boolean_unary_expression@@Base+0x1224>
   1b360:	mov	r4, #1
   1b364:	ldr	r0, [r5]
   1b368:	mov	r1, #0
   1b36c:	str	r4, [r5, #24]
   1b370:	bl	1184c <setbuf@plt>
   1b374:	mov	r0, r4
   1b378:	add	sp, sp, #108	; 0x6c
   1b37c:	pop	{r4, r5, r6, r7, pc}
   1b380:	bl	119d8 <close@plt>
   1b384:	mov	r0, r4
   1b388:	b	1b378 <read_boolean_unary_expression@@Base+0x1210>
   1b38c:	mov	r4, #0
   1b390:	ldr	r0, [r5]
   1b394:	bl	11984 <fclose@plt>
   1b398:	str	r4, [r5]
   1b39c:	mov	r0, r4
   1b3a0:	b	1b378 <read_boolean_unary_expression@@Base+0x1210>
   1b3a4:	andeq	r2, r1, r4, asr #26
   1b3a8:	strheq	r0, [r0], -r8
   1b3ac:			; <UNDEFINED> instruction: 0x000001b6
   1b3b0:			; <UNDEFINED> instruction: 0x00001db8
   1b3b4:	push	{r4, r5, r6, lr}
   1b3b8:	mov	r4, r1
   1b3bc:	ldr	r5, [pc, #244]	; 1b4b8 <read_boolean_unary_expression@@Base+0x1350>
   1b3c0:	ldr	ip, [r4, #8]
   1b3c4:	ldr	lr, [r4, #12]
   1b3c8:	ldr	r6, [r4]
   1b3cc:	cmp	ip, #0
   1b3d0:	mov	r1, r0
   1b3d4:	add	r5, pc, r5
   1b3d8:	add	r0, r6, lr
   1b3dc:	ble	1b418 <read_boolean_unary_expression@@Base+0x12b0>
   1b3e0:	ldrb	r3, [r1]
   1b3e4:	cmp	r3, #47	; 0x2f
   1b3e8:	addeq	r2, r1, #1
   1b3ec:	ldrbeq	r3, [r1, #1]
   1b3f0:	movne	r2, r1
   1b3f4:	cmp	r3, #0
   1b3f8:	beq	1b418 <read_boolean_unary_expression@@Base+0x12b0>
   1b3fc:	cmp	r3, #47	; 0x2f
   1b400:	moveq	r1, r2
   1b404:	ldrb	r3, [r2, #1]!
   1b408:	subeq	ip, ip, #1
   1b40c:	cmp	r3, #0
   1b410:	cmpne	ip, #0
   1b414:	bne	1b3fc <read_boolean_unary_expression@@Base+0x1294>
   1b418:	cmp	lr, #0
   1b41c:	beq	1b434 <read_boolean_unary_expression@@Base+0x12cc>
   1b420:	ldrb	r3, [r1]
   1b424:	cmp	r3, #47	; 0x2f
   1b428:	addne	r0, r0, #1
   1b42c:	movne	r3, #47	; 0x2f
   1b430:	strbne	r3, [r6, lr]
   1b434:	bl	118a0 <strcpy@plt>
   1b438:	ldr	r0, [r4]
   1b43c:	bl	1b28c <read_boolean_unary_expression@@Base+0x1124>
   1b440:	cmp	r0, #0
   1b444:	beq	1b450 <read_boolean_unary_expression@@Base+0x12e8>
   1b448:	mov	r0, #0
   1b44c:	pop	{r4, r5, r6, pc}
   1b450:	ldr	r0, [r4]
   1b454:	bl	1afbc <read_boolean_unary_expression@@Base+0xe54>
   1b458:	cmp	r0, #0
   1b45c:	bne	1b494 <read_boolean_unary_expression@@Base+0x132c>
   1b460:	ldr	r0, [r4]
   1b464:	bl	1b28c <read_boolean_unary_expression@@Base+0x1124>
   1b468:	cmp	r0, #0
   1b46c:	bne	1b448 <read_boolean_unary_expression@@Base+0x12e0>
   1b470:	ldr	r3, [pc, #68]	; 1b4bc <read_boolean_unary_expression@@Base+0x1354>
   1b474:	ldr	r1, [pc, #68]	; 1b4c0 <read_boolean_unary_expression@@Base+0x1358>
   1b478:	ldr	r2, [r4]
   1b47c:	ldr	r3, [r5, r3]
   1b480:	add	r1, pc, r1
   1b484:	ldr	r0, [r3]
   1b488:	bl	11930 <fprintf@plt>
   1b48c:	mvn	r0, #0
   1b490:	pop	{r4, r5, r6, pc}
   1b494:	ldr	r3, [pc, #32]	; 1b4bc <read_boolean_unary_expression@@Base+0x1354>
   1b498:	ldr	r1, [pc, #36]	; 1b4c4 <read_boolean_unary_expression@@Base+0x135c>
   1b49c:	ldr	r2, [r4]
   1b4a0:	ldr	r3, [r5, r3]
   1b4a4:	add	r1, pc, r1
   1b4a8:	ldr	r0, [r3]
   1b4ac:	bl	11930 <fprintf@plt>
   1b4b0:	mvn	r0, #0
   1b4b4:	pop	{r4, r5, r6, pc}
   1b4b8:	andeq	r2, r1, r4, lsr #24
   1b4bc:	andeq	r0, r0, r4, lsr #1
   1b4c0:	andeq	r1, r0, r4, lsl #25
   1b4c4:	andeq	r1, r0, ip, asr #24
   1b4c8:	ldr	r3, [pc, #96]	; 1b530 <read_boolean_unary_expression@@Base+0x13c8>
   1b4cc:	ldr	r2, [pc, #96]	; 1b534 <read_boolean_unary_expression@@Base+0x13cc>
   1b4d0:	add	r3, pc, r3
   1b4d4:	push	{r4, lr}
   1b4d8:	ldr	r4, [r3, r2]
   1b4dc:	ldr	r0, [r4]
   1b4e0:	cmp	r0, #0
   1b4e4:	beq	1b504 <read_boolean_unary_expression@@Base+0x139c>
   1b4e8:	ldr	r3, [r4, #8]
   1b4ec:	cmp	r3, #0
   1b4f0:	bne	1b514 <read_boolean_unary_expression@@Base+0x13ac>
   1b4f4:	bl	11984 <fclose@plt>
   1b4f8:	mov	r3, #0
   1b4fc:	str	r3, [r4]
   1b500:	str	r3, [r4, #12]
   1b504:	mov	r3, #0
   1b508:	str	r3, [r4, #24]
   1b50c:	ldr	r0, [r4, #20]
   1b510:	pop	{r4, pc}
   1b514:	ldr	r2, [r4, #24]
   1b518:	cmp	r2, #0
   1b51c:	bge	1b4f4 <read_boolean_unary_expression@@Base+0x138c>
   1b520:	mov	r0, r3
   1b524:	bl	1a544 <read_boolean_unary_expression@@Base+0x3dc>
   1b528:	ldr	r0, [r4]
   1b52c:	b	1b4f4 <read_boolean_unary_expression@@Base+0x138c>
   1b530:	andeq	r2, r1, r8, lsr #22
   1b534:	strheq	r0, [r0], -r8
   1b538:	push	{r4, lr}
   1b53c:	mov	r4, r0
   1b540:	mov	r0, #1
   1b544:	bl	1a5a0 <read_boolean_unary_expression@@Base+0x438>
   1b548:	str	r4, [r0]
   1b54c:	pop	{r4, pc}
   1b550:	push	{r4, r5, r6, lr}
   1b554:	mov	r5, r0
   1b558:	mov	r0, #2
   1b55c:	mov	r4, r1
   1b560:	bl	1a5a0 <read_boolean_unary_expression@@Base+0x438>
   1b564:	str	r5, [r0]
   1b568:	str	r4, [r0, #4]
   1b56c:	pop	{r4, r5, r6, pc}
   1b570:	push	{r4, r5, r6, lr}
   1b574:	mov	r5, r0
   1b578:	mov	r0, #2
   1b57c:	mov	r4, r1
   1b580:	bl	1a5a0 <read_boolean_unary_expression@@Base+0x438>
   1b584:	str	r5, [r0]
   1b588:	str	r4, [r0, #4]
   1b58c:	pop	{r4, r5, r6, pc}
   1b590:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b594:	sub	sp, sp, #32
   1b598:	mov	r7, sp
   1b59c:	mov	r5, r1
   1b5a0:	mov	r6, sp
   1b5a4:	add	r2, sp, #32
   1b5a8:	mov	r3, #0
   1b5ac:	str	r3, [r6], #4
   1b5b0:	cmp	r2, r6
   1b5b4:	bne	1b5ac <read_boolean_unary_expression@@Base+0x1444>
   1b5b8:	mov	r8, #0
   1b5bc:	mov	r3, r8
   1b5c0:	mov	r4, r5
   1b5c4:	mov	r1, r5
   1b5c8:	mov	r9, #1
   1b5cc:	lsr	r2, r3, #5
   1b5d0:	ldr	lr, [r1, #40]	; 0x28
   1b5d4:	add	ip, sp, #32
   1b5d8:	cmp	lr, #0
   1b5dc:	add	r2, ip, r2, lsl #2
   1b5e0:	and	sl, r3, #31
   1b5e4:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   1b5e8:	add	r3, r3, #1
   1b5ec:	orrne	ip, ip, r9, lsl sl
   1b5f0:	addne	r8, r8, #1
   1b5f4:	strne	ip, [r2, #-32]	; 0xffffffe0
   1b5f8:	cmp	r3, #252	; 0xfc
   1b5fc:	add	r1, r1, #24
   1b600:	bne	1b5cc <read_boolean_unary_expression@@Base+0x1464>
   1b604:	add	r8, r8, r8, lsl #2
   1b608:	add	r1, r8, #17
   1b60c:	bl	1b570 <read_boolean_unary_expression@@Base+0x1408>
   1b610:	ldr	r0, [r5]
   1b614:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1b618:	ldr	r0, [r5, #8]
   1b61c:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1b620:	ldr	r0, [r5, #12]
   1b624:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1b628:	ldrd	r0, [r5, #16]
   1b62c:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1b630:	ldrd	r0, [r5, #24]
   1b634:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1b638:	ldrd	r0, [r5, #32]
   1b63c:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1b640:	ldr	r0, [r7], #4
   1b644:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1b648:	cmp	r7, r6
   1b64c:	bne	1b640 <read_boolean_unary_expression@@Base+0x14d8>
   1b650:	add	r5, r5, #6016	; 0x1780
   1b654:	add	r5, r5, #32
   1b658:	b	1b668 <read_boolean_unary_expression@@Base+0x1500>
   1b65c:	add	r4, r4, #24
   1b660:	cmp	r4, r5
   1b664:	beq	1b694 <read_boolean_unary_expression@@Base+0x152c>
   1b668:	ldr	r0, [r4, #40]	; 0x28
   1b66c:	cmp	r0, #0
   1b670:	beq	1b65c <read_boolean_unary_expression@@Base+0x14f4>
   1b674:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1b678:	ldrd	r0, [r4, #48]	; 0x30
   1b67c:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1b680:	add	r4, r4, #24
   1b684:	ldrd	r0, [r4, #32]
   1b688:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1b68c:	cmp	r4, r5
   1b690:	bne	1b668 <read_boolean_unary_expression@@Base+0x1500>
   1b694:	add	sp, sp, #32
   1b698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b69c:	push	{r4, lr}
   1b6a0:	mov	r0, #1
   1b6a4:	bl	1a5fc <read_boolean_unary_expression@@Base+0x494>
   1b6a8:	subs	r3, r0, #0
   1b6ac:	popeq	{r4, pc}
   1b6b0:	ldr	r0, [r3]
   1b6b4:	pop	{r4, lr}
   1b6b8:	b	1a514 <read_boolean_unary_expression@@Base+0x3ac>
   1b6bc:	push	{r4, r5, r6, lr}
   1b6c0:	mov	r0, #2
   1b6c4:	bl	1a5fc <read_boolean_unary_expression@@Base+0x494>
   1b6c8:	subs	r3, r0, #0
   1b6cc:	beq	1b6fc <read_boolean_unary_expression@@Base+0x1594>
   1b6d0:	ldr	r0, [r3]
   1b6d4:	bl	1a514 <read_boolean_unary_expression@@Base+0x3ac>
   1b6d8:	mov	r5, #0
   1b6dc:	mov	r4, r0
   1b6e0:	ldr	r0, [r3, #4]
   1b6e4:	bl	1a514 <read_boolean_unary_expression@@Base+0x3ac>
   1b6e8:	mov	r2, #0
   1b6ec:	mov	r3, r0
   1b6f0:	orr	r1, r3, r5
   1b6f4:	orr	r0, r2, r4
   1b6f8:	pop	{r4, r5, r6, pc}
   1b6fc:	mov	r0, #0
   1b700:	mov	r1, #0
   1b704:	pop	{r4, r5, r6, pc}
   1b708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b70c:	sub	sp, sp, #28
   1b710:	mov	r4, #0
   1b714:	str	r1, [sp, #8]
   1b718:	str	r3, [sp, #12]
   1b71c:	add	r3, r1, #56	; 0x38
   1b720:	add	r1, r1, #16
   1b724:	str	r0, [sp, #16]
   1b728:	str	r2, [sp, #20]
   1b72c:	ldr	r2, [r3, #-4]!
   1b730:	cmp	r2, #0
   1b734:	addne	r4, r4, #1
   1b738:	cmp	r3, r1
   1b73c:	bne	1b72c <read_boolean_unary_expression@@Base+0x15c4>
   1b740:	add	r4, r4, #4
   1b744:	lsl	r4, r4, #3
   1b748:	mov	r0, r4
   1b74c:	bl	118d0 <malloc@plt>
   1b750:	subs	r8, r0, #0
   1b754:	beq	1b818 <read_boolean_unary_expression@@Base+0x16b0>
   1b758:	ldr	r3, [sp, #12]
   1b75c:	mov	r4, #0
   1b760:	str	r3, [r8, #4]
   1b764:	str	r4, [r8]
   1b768:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b76c:	ldr	r3, [sp, #8]
   1b770:	ldr	r5, [pc, #272]	; 1b888 <read_boolean_unary_expression@@Base+0x1720>
   1b774:	add	r6, r3, #12
   1b778:	mov	r7, r4
   1b77c:	str	r0, [r8, #12]
   1b780:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b784:	str	r0, [r8, #16]
   1b788:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b78c:	str	r0, [r8, #20]
   1b790:	ldr	r3, [r6, #4]!
   1b794:	cmp	r3, #0
   1b798:	beq	1b7f4 <read_boolean_unary_expression@@Base+0x168c>
   1b79c:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b7a0:	cmp	r5, r0
   1b7a4:	bne	1b86c <read_boolean_unary_expression@@Base+0x1704>
   1b7a8:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b7ac:	lsr	r9, r0, #1
   1b7b0:	lsl	fp, r9, #3
   1b7b4:	mov	r0, fp
   1b7b8:	bl	118d0 <malloc@plt>
   1b7bc:	subs	sl, r0, #0
   1b7c0:	beq	1b87c <read_boolean_unary_expression@@Base+0x1714>
   1b7c4:	add	r3, r8, r7, lsl #3
   1b7c8:	cmp	r9, #0
   1b7cc:	str	r9, [r3, #24]
   1b7d0:	str	sl, [r3, #28]
   1b7d4:	sub	r9, r9, #1
   1b7d8:	beq	1b7f0 <read_boolean_unary_expression@@Base+0x1688>
   1b7dc:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b7e0:	sub	r9, r9, #1
   1b7e4:	cmn	r9, #1
   1b7e8:	strd	r0, [sl], #8
   1b7ec:	bne	1b7dc <read_boolean_unary_expression@@Base+0x1674>
   1b7f0:	add	r7, r7, #1
   1b7f4:	add	r4, r4, #1
   1b7f8:	cmp	r4, #10
   1b7fc:	add	r5, r5, #131072	; 0x20000
   1b800:	bne	1b790 <read_boolean_unary_expression@@Base+0x1628>
   1b804:	ldr	r3, [sp, #20]
   1b808:	mov	r0, r8
   1b80c:	str	r8, [r3]
   1b810:	add	sp, sp, #28
   1b814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b818:	mvn	r5, #0
   1b81c:	cmp	r4, #0
   1b820:	beq	1b85c <read_boolean_unary_expression@@Base+0x16f4>
   1b824:	ldr	r3, [pc, #96]	; 1b88c <read_boolean_unary_expression@@Base+0x1724>
   1b828:	add	r3, pc, r3
   1b82c:	ldr	r0, [pc, #92]	; 1b890 <read_boolean_unary_expression@@Base+0x1728>
   1b830:	ldr	r2, [sp, #12]
   1b834:	ldr	r1, [sp, #16]
   1b838:	str	r4, [sp]
   1b83c:	add	r0, pc, r0
   1b840:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b844:	mov	r2, r5
   1b848:	mov	r1, r8
   1b84c:	ldr	r0, [sp, #8]
   1b850:	add	sp, sp, #28
   1b854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b858:	b	1a700 <read_boolean_unary_expression@@Base+0x598>
   1b85c:	ldr	r3, [pc, #48]	; 1b894 <read_boolean_unary_expression@@Base+0x172c>
   1b860:	mov	r4, r5
   1b864:	add	r3, pc, r3
   1b868:	b	1b82c <read_boolean_unary_expression@@Base+0x16c4>
   1b86c:	ldr	r3, [pc, #36]	; 1b898 <read_boolean_unary_expression@@Base+0x1730>
   1b870:	mov	r5, r4
   1b874:	add	r3, pc, r3
   1b878:	b	1b82c <read_boolean_unary_expression@@Base+0x16c4>
   1b87c:	mov	r5, r4
   1b880:	mov	r4, fp
   1b884:	b	1b81c <read_boolean_unary_expression@@Base+0x16b4>
   1b888:			; <UNDEFINED> instruction: 0x01a10000
   1b88c:	strdeq	r1, [r0], -r8
   1b890:	andeq	r1, r0, r8, lsl #18
   1b894:	andeq	r1, r0, ip, asr #17
   1b898:			; <UNDEFINED> instruction: 0x000018bc
   1b89c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8a0:	sub	sp, sp, #44	; 0x2c
   1b8a4:	mov	r9, r0
   1b8a8:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b8ac:	mov	r7, #0
   1b8b0:	add	sl, sp, #8
   1b8b4:	mov	r4, sl
   1b8b8:	add	r5, sp, #40	; 0x28
   1b8bc:	str	r0, [r9]
   1b8c0:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b8c4:	str	r0, [r9, #8]
   1b8c8:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b8cc:	str	r0, [r9, #12]
   1b8d0:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b8d4:	strd	r0, [r9, #16]
   1b8d8:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b8dc:	strd	r0, [r9, #24]
   1b8e0:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b8e4:	ldr	r2, [pc, #244]	; 1b9e0 <read_boolean_unary_expression@@Base+0x1878>
   1b8e8:	strd	r0, [r9, #32]
   1b8ec:	add	r0, r9, #40	; 0x28
   1b8f0:	mov	r1, r7
   1b8f4:	bl	1196c <memset@plt>
   1b8f8:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b8fc:	str	r0, [r4], #4
   1b900:	bl	1c584 <__gcov_sort_n_vals@@Base+0x618>
   1b904:	cmp	r5, r4
   1b908:	add	r7, r7, r0
   1b90c:	bne	1b8f8 <read_boolean_unary_expression@@Base+0x1790>
   1b910:	cmp	r7, #0
   1b914:	sub	r7, r7, #1
   1b918:	beq	1b9cc <read_boolean_unary_expression@@Base+0x1864>
   1b91c:	ldr	r8, [pc, #192]	; 1b9e4 <read_boolean_unary_expression@@Base+0x187c>
   1b920:	mov	r4, #0
   1b924:	ldr	r3, [pc, #188]	; 1b9e8 <read_boolean_unary_expression@@Base+0x1880>
   1b928:	add	r8, pc, r8
   1b92c:	mov	r5, r4
   1b930:	mov	r6, r4
   1b934:	add	r3, pc, r3
   1b938:	str	r3, [sp, #4]
   1b93c:	cmp	r4, #0
   1b940:	addeq	r6, sl, r5, lsl #2
   1b944:	beq	1b950 <read_boolean_unary_expression@@Base+0x17e8>
   1b948:	b	1b978 <read_boolean_unary_expression@@Base+0x1810>
   1b94c:	mov	r5, r3
   1b950:	cmp	r5, #7
   1b954:	bls	1b960 <read_boolean_unary_expression@@Base+0x17f8>
   1b958:	mov	r0, r8
   1b95c:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b960:	ldr	r4, [r6], #4
   1b964:	add	r3, r5, #1
   1b968:	cmp	r4, #0
   1b96c:	beq	1b94c <read_boolean_unary_expression@@Base+0x17e4>
   1b970:	lsl	r6, r5, #5
   1b974:	mov	r5, r3
   1b978:	tst	r4, #1
   1b97c:	bne	1b990 <read_boolean_unary_expression@@Base+0x1828>
   1b980:	lsr	r4, r4, #1
   1b984:	tst	r4, #1
   1b988:	add	r6, r6, #1
   1b98c:	beq	1b980 <read_boolean_unary_expression@@Base+0x1818>
   1b990:	cmp	r6, #251	; 0xfb
   1b994:	bhi	1b9d4 <read_boolean_unary_expression@@Base+0x186c>
   1b998:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1b99c:	add	r3, r6, r6, lsl #1
   1b9a0:	sub	r7, r7, #1
   1b9a4:	add	fp, r9, r3, lsl #3
   1b9a8:	lsr	r4, r4, #1
   1b9ac:	add	r6, r6, #1
   1b9b0:	str	r0, [fp, #40]	; 0x28
   1b9b4:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b9b8:	strd	r0, [fp, #48]	; 0x30
   1b9bc:	bl	1b6bc <read_boolean_unary_expression@@Base+0x1554>
   1b9c0:	cmn	r7, #1
   1b9c4:	strd	r0, [fp, #56]	; 0x38
   1b9c8:	bne	1b93c <read_boolean_unary_expression@@Base+0x17d4>
   1b9cc:	add	sp, sp, #44	; 0x2c
   1b9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9d4:	ldr	r0, [sp, #4]
   1b9d8:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1b9dc:	b	1b998 <read_boolean_unary_expression@@Base+0x1830>
   1b9e0:	andeq	r1, r0, r0, lsr #15
   1b9e4:	andeq	r1, r0, ip, ror r8
   1b9e8:	andeq	r1, r0, r4, lsr r8
   1b9ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9f0:	sub	sp, sp, #6080	; 0x17c0
   1b9f4:	sub	sp, sp, #28
   1b9f8:	mov	r4, r1
   1b9fc:	stmib	sp, {r2, r3}
   1ba00:	add	r3, sp, #6144	; 0x1800
   1ba04:	mov	sl, r0
   1ba08:	ldr	r7, [r3]
   1ba0c:	add	r3, sp, #6144	; 0x1800
   1ba10:	add	r3, r3, #4
   1ba14:	ldr	r6, [r3]
   1ba18:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1ba1c:	add	r3, r4, #12
   1ba20:	mov	r2, sl
   1ba24:	str	r3, [sp, #12]
   1ba28:	mov	r1, r0
   1ba2c:	mov	r0, r3
   1ba30:	bl	1b080 <read_boolean_unary_expression@@Base+0xf18>
   1ba34:	cmp	r0, #0
   1ba38:	beq	1bcb8 <read_boolean_unary_expression@@Base+0x1b50>
   1ba3c:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1ba40:	ldr	r3, [r4, #8]
   1ba44:	cmp	r0, r3
   1ba48:	beq	1ba5c <read_boolean_unary_expression@@Base+0x18f4>
   1ba4c:	mov	r0, #0
   1ba50:	add	sp, sp, #6080	; 0x17c0
   1ba54:	add	sp, sp, #28
   1ba58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba5c:	ldr	fp, [pc, #628]	; 1bcd8 <read_boolean_unary_expression@@Base+0x1b70>
   1ba60:	add	r9, sp, #2000	; 0x7d0
   1ba64:	add	r5, sp, #16
   1ba68:	add	fp, pc, fp
   1ba6c:	add	r9, r9, #8
   1ba70:	bl	1a4c4 <read_boolean_unary_expression@@Base+0x35c>
   1ba74:	str	r0, [r6]
   1ba78:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1ba7c:	cmp	r0, #-1560281088	; 0xa3000000
   1ba80:	bne	1bb24 <read_boolean_unary_expression@@Base+0x19bc>
   1ba84:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1ba88:	mov	r0, r5
   1ba8c:	bl	1b89c <read_boolean_unary_expression@@Base+0x1734>
   1ba90:	bl	1a4e8 <read_boolean_unary_expression@@Base+0x380>
   1ba94:	subs	r8, r0, #0
   1ba98:	bne	1bc58 <read_boolean_unary_expression@@Base+0x1af0>
   1ba9c:	ldr	r3, [r7]
   1baa0:	cmp	r3, #0
   1baa4:	bne	1baf0 <read_boolean_unary_expression@@Base+0x1988>
   1baa8:	add	r2, sp, #6144	; 0x1800
   1baac:	add	r2, r2, #8
   1bab0:	ldr	r3, [r9, #-1992]	; 0xfffff838
   1bab4:	ldr	r2, [r2]
   1bab8:	cmp	r3, r2
   1babc:	bne	1ba70 <read_boolean_unary_expression@@Base+0x1908>
   1bac0:	ldr	r3, [sp, #8]
   1bac4:	ldr	ip, [r9, #-1984]	; 0xfffff840
   1bac8:	ldr	r2, [pc, #524]	; 1bcdc <read_boolean_unary_expression@@Base+0x1b74>
   1bacc:	ldr	r3, [r3, #8]
   1bad0:	mov	r1, r5
   1bad4:	cmp	ip, r3
   1bad8:	ldr	r0, [sp, #4]
   1badc:	bne	1ba70 <read_boolean_unary_expression@@Base+0x1908>
   1bae0:	bl	1187c <memcpy@plt>
   1bae4:	ldr	r3, [r6]
   1bae8:	str	r3, [r7]
   1baec:	b	1ba70 <read_boolean_unary_expression@@Base+0x1908>
   1baf0:	ldr	r0, [pc, #488]	; 1bce0 <read_boolean_unary_expression@@Base+0x1b78>
   1baf4:	bl	118d0 <malloc@plt>
   1baf8:	ldr	r2, [pc, #476]	; 1bcdc <read_boolean_unary_expression@@Base+0x1b74>
   1bafc:	mov	r1, r5
   1bb00:	mov	r3, r0
   1bb04:	str	r0, [fp]
   1bb08:	add	r0, r0, #8
   1bb0c:	str	r3, [sp]
   1bb10:	bl	1187c <memcpy@plt>
   1bb14:	ldr	r3, [sp]
   1bb18:	str	r8, [r3]
   1bb1c:	ldr	fp, [fp]
   1bb20:	b	1ba70 <read_boolean_unary_expression@@Base+0x1908>
   1bb24:	ldr	r5, [r4, #56]	; 0x38
   1bb28:	cmp	r5, #0
   1bb2c:	beq	1bcc0 <read_boolean_unary_expression@@Base+0x1b58>
   1bb30:	ldr	r3, [r4, #60]	; 0x3c
   1bb34:	cmp	r0, #16777216	; 0x1000000
   1bb38:	ldr	r8, [r3]
   1bb3c:	bne	1bc88 <read_boolean_unary_expression@@Base+0x1b20>
   1bb40:	ldr	r6, [pc, #412]	; 1bce4 <read_boolean_unary_expression@@Base+0x1b7c>
   1bb44:	mov	r5, #0
   1bb48:	add	r6, pc, r6
   1bb4c:	add	r6, r6, #4
   1bb50:	b	1bb94 <read_boolean_unary_expression@@Base+0x1a2c>
   1bb54:	mov	r2, r6
   1bb58:	mov	r3, r5
   1bb5c:	mov	r1, r4
   1bb60:	mov	r0, sl
   1bb64:	bl	1b708 <read_boolean_unary_expression@@Base+0x15a0>
   1bb68:	subs	r6, r0, #0
   1bb6c:	beq	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bb70:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bb74:	ldr	r3, [r4, #56]	; 0x38
   1bb78:	add	r5, r5, #1
   1bb7c:	cmp	r3, r5
   1bb80:	beq	1bcc0 <read_boolean_unary_expression@@Base+0x1b58>
   1bb84:	ldr	r3, [r4, #60]	; 0x3c
   1bb88:	cmp	r0, #16777216	; 0x1000000
   1bb8c:	ldr	r8, [r3, r5, lsl #2]
   1bb90:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bb94:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bb70 <read_boolean_unary_expression@@Base+0x1a08>
   1bba0:	cmp	r0, #3
   1bba4:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bba8:	cmp	r8, #0
   1bbac:	beq	1bb54 <read_boolean_unary_expression@@Base+0x19ec>
   1bbb0:	ldr	r3, [r8]
   1bbb4:	cmp	r4, r3
   1bbb8:	bne	1bb54 <read_boolean_unary_expression@@Base+0x19ec>
   1bbbc:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bbc0:	ldr	r3, [r8, #4]
   1bbc4:	cmp	r0, r3
   1bbc8:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bbcc:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bbd0:	ldr	r3, [r8, #8]
   1bbd4:	cmp	r0, r3
   1bbd8:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bbdc:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bbe0:	ldr	r3, [r8, #12]
   1bbe4:	cmp	r0, r3
   1bbe8:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bbec:	ldr	r7, [pc, #244]	; 1bce8 <read_boolean_unary_expression@@Base+0x1b80>
   1bbf0:	ldr	fp, [sp, #12]
   1bbf4:	add	r8, r8, #16
   1bbf8:	ldr	r9, [fp, #4]!
   1bbfc:	cmp	r9, #0
   1bc00:	beq	1bc38 <read_boolean_unary_expression@@Base+0x1ad0>
   1bc04:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bc08:	str	r0, [sp]
   1bc0c:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1bc10:	ldr	r3, [sp]
   1bc14:	cmp	r3, r7
   1bc18:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bc1c:	ldr	r3, [r8]
   1bc20:	mov	r1, r3
   1bc24:	cmp	r0, r3, lsl #1
   1bc28:	bne	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bc2c:	ldr	r0, [r8, #4]
   1bc30:	blx	r9
   1bc34:	add	r8, r8, #8
   1bc38:	ldr	r3, [pc, #172]	; 1bcec <read_boolean_unary_expression@@Base+0x1b84>
   1bc3c:	add	r7, r7, #131072	; 0x20000
   1bc40:	cmp	r7, r3
   1bc44:	bne	1bbf8 <read_boolean_unary_expression@@Base+0x1a90>
   1bc48:	bl	1a4e8 <read_boolean_unary_expression@@Base+0x380>
   1bc4c:	cmp	r0, #0
   1bc50:	beq	1bb70 <read_boolean_unary_expression@@Base+0x1a08>
   1bc54:	mov	r8, r0
   1bc58:	cmp	r8, #0
   1bc5c:	blt	1bccc <read_boolean_unary_expression@@Base+0x1b64>
   1bc60:	ldr	r2, [pc, #136]	; 1bcf0 <read_boolean_unary_expression@@Base+0x1b88>
   1bc64:	add	r2, pc, r2
   1bc68:	ldr	r0, [pc, #132]	; 1bcf4 <read_boolean_unary_expression@@Base+0x1b8c>
   1bc6c:	mov	r1, sl
   1bc70:	add	r0, pc, r0
   1bc74:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1bc78:	mvn	r0, #0
   1bc7c:	add	sp, sp, #6080	; 0x17c0
   1bc80:	add	sp, sp, #28
   1bc84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc88:	mov	r5, #0
   1bc8c:	ldr	r2, [pc, #100]	; 1bcf8 <read_boolean_unary_expression@@Base+0x1b90>
   1bc90:	ldr	r0, [pc, #100]	; 1bcfc <read_boolean_unary_expression@@Base+0x1b94>
   1bc94:	mov	r3, r5
   1bc98:	mov	r1, sl
   1bc9c:	add	r2, pc, r2
   1bca0:	add	r0, pc, r0
   1bca4:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1bca8:	mvn	r0, #0
   1bcac:	add	sp, sp, #6080	; 0x17c0
   1bcb0:	add	sp, sp, #28
   1bcb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcb8:	mvn	r0, #0
   1bcbc:	b	1ba50 <read_boolean_unary_expression@@Base+0x18e8>
   1bcc0:	cmp	r0, #0
   1bcc4:	beq	1ba4c <read_boolean_unary_expression@@Base+0x18e4>
   1bcc8:	b	1bc8c <read_boolean_unary_expression@@Base+0x1b24>
   1bccc:	ldr	r2, [pc, #44]	; 1bd00 <read_boolean_unary_expression@@Base+0x1b98>
   1bcd0:	add	r2, pc, r2
   1bcd4:	b	1bc68 <read_boolean_unary_expression@@Base+0x1b00>
   1bcd8:	andeq	r3, r1, r8, lsr #26
   1bcdc:	andeq	r1, r0, r8, asr #15
   1bce0:	ldrdeq	r1, [r0], -r0
   1bce4:	andeq	r3, r1, r8, asr #24
   1bce8:			; <UNDEFINED> instruction: 0x01a10000
   1bcec:			; <UNDEFINED> instruction: 0x01b50000
   1bcf0:	andeq	r1, r0, ip, lsl #11
   1bcf4:			; <UNDEFINED> instruction: 0x000015bc
   1bcf8:	andeq	r1, r0, ip, asr r5
   1bcfc:	andeq	r1, r0, r4, ror #10
   1bd00:	andeq	r1, r0, r4, lsl r5
   1bd04:	ldr	r3, [pc, #68]	; 1bd50 <read_boolean_unary_expression@@Base+0x1be8>
   1bd08:	ldr	r2, [pc, #68]	; 1bd54 <read_boolean_unary_expression@@Base+0x1bec>
   1bd0c:	add	r3, pc, r3
   1bd10:	push	{r4, r5, r6, lr}
   1bd14:	mov	r5, r0
   1bd18:	ldr	r4, [r3, r2]
   1bd1c:	ldr	r0, [r4, #8]
   1bd20:	cmp	r0, #0
   1bd24:	beq	1bd2c <read_boolean_unary_expression@@Base+0x1bc4>
   1bd28:	bl	1a544 <read_boolean_unary_expression@@Base+0x3dc>
   1bd2c:	lsl	r1, r5, #2
   1bd30:	mov	r2, #0
   1bd34:	ldr	r0, [r4]
   1bd38:	bl	119b4 <fseek@plt>
   1bd3c:	ldr	r0, [r4]
   1bd40:	bl	11888 <ftell@plt>
   1bd44:	asr	r0, r0, #2
   1bd48:	str	r0, [r4, #4]
   1bd4c:	pop	{r4, r5, r6, pc}
   1bd50:	andeq	r2, r1, ip, ror #5
   1bd54:	strheq	r0, [r0], -r8
   1bd58:	cmp	r2, #0
   1bd5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd60:	mov	r9, r0
   1bd64:	sub	sp, sp, #20
   1bd68:	mov	r5, r1
   1bd6c:	mov	r4, r3
   1bd70:	beq	1bf28 <read_boolean_unary_expression@@Base+0x1dc0>
   1bd74:	cmp	r4, #0
   1bd78:	bne	1bf44 <read_boolean_unary_expression@@Base+0x1ddc>
   1bd7c:	mov	r1, r5
   1bd80:	ldr	r5, [pc, #456]	; 1bf50 <read_boolean_unary_expression@@Base+0x1de8>
   1bd84:	mov	r0, #-1560281088	; 0xa3000000
   1bd88:	add	r5, pc, r5
   1bd8c:	bl	1b590 <read_boolean_unary_expression@@Base+0x1428>
   1bd90:	ldr	r4, [r5]
   1bd94:	cmp	r4, #0
   1bd98:	movne	r6, #-1560281088	; 0xa3000000
   1bd9c:	beq	1bdc8 <read_boolean_unary_expression@@Base+0x1c60>
   1bda0:	add	r1, r4, #8
   1bda4:	mov	r0, r6
   1bda8:	bl	1b590 <read_boolean_unary_expression@@Base+0x1428>
   1bdac:	ldr	r3, [r5]
   1bdb0:	mov	r0, r3
   1bdb4:	ldr	r4, [r3]
   1bdb8:	bl	11870 <free@plt>
   1bdbc:	cmp	r4, #0
   1bdc0:	str	r4, [r5]
   1bdc4:	bne	1bda0 <read_boolean_unary_expression@@Base+0x1c38>
   1bdc8:	ldr	r3, [r9, #56]	; 0x38
   1bdcc:	cmp	r3, #0
   1bdd0:	beq	1bf0c <read_boolean_unary_expression@@Base+0x1da4>
   1bdd4:	ldr	r3, [pc, #376]	; 1bf54 <read_boolean_unary_expression@@Base+0x1dec>
   1bdd8:	ldr	r8, [pc, #376]	; 1bf58 <read_boolean_unary_expression@@Base+0x1df0>
   1bddc:	add	r3, pc, r3
   1bde0:	str	r3, [sp, #4]
   1bde4:	ldr	r3, [pc, #368]	; 1bf5c <read_boolean_unary_expression@@Base+0x1df4>
   1bde8:	mov	r7, #0
   1bdec:	add	r3, pc, r3
   1bdf0:	str	r3, [sp, #12]
   1bdf4:	b	1be30 <read_boolean_unary_expression@@Base+0x1cc8>
   1bdf8:	ldr	r3, [r9, #60]	; 0x3c
   1bdfc:	ldr	r4, [r3, r7, lsl #2]
   1be00:	cmp	r4, #0
   1be04:	beq	1be14 <read_boolean_unary_expression@@Base+0x1cac>
   1be08:	ldr	r3, [r4]
   1be0c:	cmp	r9, r3
   1be10:	beq	1bf1c <read_boolean_unary_expression@@Base+0x1db4>
   1be14:	mov	r1, #0
   1be18:	mov	r0, #16777216	; 0x1000000
   1be1c:	bl	1b570 <read_boolean_unary_expression@@Base+0x1408>
   1be20:	ldr	r3, [r9, #56]	; 0x38
   1be24:	add	r7, r7, #1
   1be28:	cmp	r3, r7
   1be2c:	beq	1bf0c <read_boolean_unary_expression@@Base+0x1da4>
   1be30:	ldr	r3, [sp, #4]
   1be34:	ldr	r4, [r3, #4]
   1be38:	cmp	r4, #0
   1be3c:	beq	1bdf8 <read_boolean_unary_expression@@Base+0x1c90>
   1be40:	ldr	r3, [r4, #4]
   1be44:	cmp	r3, r7
   1be48:	moveq	r3, #1
   1be4c:	addeq	r4, r4, #8
   1be50:	streq	r3, [sp, #8]
   1be54:	bne	1bdf8 <read_boolean_unary_expression@@Base+0x1c90>
   1be58:	mov	r1, #3
   1be5c:	mov	r0, #16777216	; 0x1000000
   1be60:	bl	1b570 <read_boolean_unary_expression@@Base+0x1408>
   1be64:	ldr	r0, [r4, #4]
   1be68:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1be6c:	ldr	r0, [r4, #8]
   1be70:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1be74:	ldr	r0, [r4, #12]
   1be78:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1be7c:	ldr	r5, [pc, #220]	; 1bf60 <read_boolean_unary_expression@@Base+0x1df8>
   1be80:	add	r4, r4, #16
   1be84:	add	r6, r9, #12
   1be88:	ldr	r3, [r6, #4]!
   1be8c:	cmp	r3, #0
   1be90:	beq	1becc <read_boolean_unary_expression@@Base+0x1d64>
   1be94:	ldr	fp, [r4]
   1be98:	mov	r0, r5
   1be9c:	sub	sl, fp, #1
   1bea0:	lsl	r1, fp, #1
   1bea4:	bl	1b570 <read_boolean_unary_expression@@Base+0x1408>
   1bea8:	cmp	fp, #0
   1beac:	ldr	fp, [r4, #4]
   1beb0:	beq	1bec8 <read_boolean_unary_expression@@Base+0x1d60>
   1beb4:	sub	sl, sl, #1
   1beb8:	ldrd	r0, [fp], #8
   1bebc:	bl	1b550 <read_boolean_unary_expression@@Base+0x13e8>
   1bec0:	cmn	sl, #1
   1bec4:	bne	1beb4 <read_boolean_unary_expression@@Base+0x1d4c>
   1bec8:	add	r4, r4, #8
   1becc:	add	r5, r5, #131072	; 0x20000
   1bed0:	cmp	r5, r8
   1bed4:	bne	1be88 <read_boolean_unary_expression@@Base+0x1d20>
   1bed8:	ldr	r3, [sp, #8]
   1bedc:	cmp	r3, #0
   1bee0:	beq	1be20 <read_boolean_unary_expression@@Base+0x1cb8>
   1bee4:	ldr	r4, [sp, #12]
   1bee8:	mov	r2, #10
   1beec:	mov	r0, r9
   1bef0:	ldr	r1, [r4, #4]
   1bef4:	bl	1a700 <read_boolean_unary_expression@@Base+0x598>
   1bef8:	ldr	r3, [r9, #56]	; 0x38
   1befc:	add	r7, r7, #1
   1bf00:	cmp	r3, r7
   1bf04:	str	r0, [r4, #4]
   1bf08:	bne	1be30 <read_boolean_unary_expression@@Base+0x1cc8>
   1bf0c:	mov	r0, #0
   1bf10:	add	sp, sp, #20
   1bf14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf18:	b	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1bf1c:	mov	r3, #0
   1bf20:	str	r3, [sp, #8]
   1bf24:	b	1be58 <read_boolean_unary_expression@@Base+0x1cf0>
   1bf28:	ldr	r1, [pc, #52]	; 1bf64 <read_boolean_unary_expression@@Base+0x1dfc>
   1bf2c:	ldr	r0, [pc, #52]	; 1bf68 <read_boolean_unary_expression@@Base+0x1e00>
   1bf30:	bl	1b570 <read_boolean_unary_expression@@Base+0x1408>
   1bf34:	ldr	r0, [r9, #8]
   1bf38:	bl	1b538 <read_boolean_unary_expression@@Base+0x13d0>
   1bf3c:	cmp	r4, #0
   1bf40:	beq	1bd7c <read_boolean_unary_expression@@Base+0x1c14>
   1bf44:	mov	r0, r4
   1bf48:	bl	1bd04 <read_boolean_unary_expression@@Base+0x1b9c>
   1bf4c:	b	1bd7c <read_boolean_unary_expression@@Base+0x1c14>
   1bf50:	andeq	r3, r1, r8, lsl #20
   1bf54:			; <UNDEFINED> instruction: 0x000139b4
   1bf58:			; <UNDEFINED> instruction: 0x01b50000
   1bf5c:	andeq	r3, r1, r4, lsr #19
   1bf60:			; <UNDEFINED> instruction: 0x01a10000
   1bf64:	ldrtcc	r3, [r0], -sl, lsr #10
   1bf68:	strbvs	r6, [r3, -r1, ror #8]!

0001bf6c <__gcov_sort_n_vals@@Base>:
   1bf6c:	cmp	r1, #2
   1bf70:	bxle	lr
   1bf74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf78:	sub	lr, r1, #3
   1bf7c:	mov	ip, #0
   1bf80:	lsr	lr, lr, #1
   1bf84:	add	r1, r0, #8
   1bf88:	add	lr, r0, lr, lsl #4
   1bf8c:	add	lr, lr, #24
   1bf90:	ldrd	r4, [r1, #16]
   1bf94:	ldrd	r6, [r1]
   1bf98:	ldrd	r8, [r1, #8]
   1bf9c:	mov	r2, ip
   1bfa0:	cmp	r6, r4
   1bfa4:	sbcs	r3, r7, r5
   1bfa8:	mov	fp, ip
   1bfac:	bge	1bff4 <__gcov_sort_n_vals@@Base+0x88>
   1bfb0:	add	r3, r1, #8
   1bfb4:	mov	sl, #0
   1bfb8:	b	1bfd0 <__gcov_sort_n_vals@@Base+0x64>
   1bfbc:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   1bfc0:	sub	r3, r3, #16
   1bfc4:	cmp	r6, r4
   1bfc8:	sbcs	r6, r7, r5
   1bfcc:	bge	1bff4 <__gcov_sort_n_vals@@Base+0x88>
   1bfd0:	ldrd	r6, [r3, #-16]
   1bfd4:	subs	r2, r2, #2
   1bfd8:	mov	fp, r2
   1bfdc:	strd	r6, [r3]
   1bfe0:	ldrd	r6, [r1, sl]
   1bfe4:	sub	sl, sl, #16
   1bfe8:	strd	r6, [r3, #8]
   1bfec:	mov	r6, r3
   1bff0:	bpl	1bfbc <__gcov_sort_n_vals@@Base+0x50>
   1bff4:	add	fp, fp, #2
   1bff8:	mov	r3, r0
   1bffc:	add	r1, r1, #16
   1c000:	lsl	fp, fp, #3
   1c004:	cmp	lr, r1
   1c008:	strd	r8, [r3, fp]!
   1c00c:	add	ip, ip, #2
   1c010:	strd	r4, [r3, #8]
   1c014:	bne	1bf90 <__gcov_sort_n_vals@@Base+0x24>
   1c018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c01c:	push	{r4, r5, r6, r7, r8, lr}
   1c020:	ldr	r6, [r0]
   1c024:	ldr	r4, [pc, #76]	; 1c078 <__gcov_sort_n_vals@@Base+0x10c>
   1c028:	smull	r2, r3, r4, r6
   1c02c:	asr	r4, r6, #31
   1c030:	rsb	r4, r4, r3, asr #1
   1c034:	add	r4, r4, r4, lsl #3
   1c038:	subs	r4, r6, r4
   1c03c:	bne	1c074 <__gcov_sort_n_vals@@Base+0x108>
   1c040:	cmp	r6, #0
   1c044:	ldr	r5, [r0, #4]
   1c048:	pople	{r4, r5, r6, r7, r8, pc}
   1c04c:	add	r5, r5, #8
   1c050:	mov	r7, #8
   1c054:	mov	r0, r5
   1c058:	add	r4, r4, #9
   1c05c:	mov	r1, r7
   1c060:	bl	1bf6c <__gcov_sort_n_vals@@Base>
   1c064:	cmp	r6, r4
   1c068:	add	r5, r5, #72	; 0x48
   1c06c:	bgt	1c054 <__gcov_sort_n_vals@@Base+0xe8>
   1c070:	pop	{r4, r5, r6, r7, r8, pc}
   1c074:	bl	119cc <abort@plt>
   1c078:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1c07c:	ldr	r3, [r0, #52]	; 0x34
   1c080:	cmp	r3, #0
   1c084:	bxeq	lr
   1c088:	ldr	ip, [r0, #56]	; 0x38
   1c08c:	cmp	ip, #0
   1c090:	bxeq	lr
   1c094:	push	{r4, r5, r6, lr}
   1c098:	mov	r5, r0
   1c09c:	mov	r4, #0
   1c0a0:	add	r6, r0, #12
   1c0a4:	ldr	r1, [r5, #60]	; 0x3c
   1c0a8:	mov	r2, r6
   1c0ac:	mov	r3, #0
   1c0b0:	ldr	r0, [r1, r4, lsl #2]
   1c0b4:	add	r0, r0, #16
   1c0b8:	ldr	r1, [r2, #4]!
   1c0bc:	cmp	r1, #0
   1c0c0:	beq	1c0d0 <__gcov_sort_n_vals@@Base+0x164>
   1c0c4:	cmp	r3, #9
   1c0c8:	beq	1c0ec <__gcov_sort_n_vals@@Base+0x180>
   1c0cc:	add	r0, r0, #8
   1c0d0:	add	r3, r3, #1
   1c0d4:	cmp	r3, #10
   1c0d8:	bne	1c0b8 <__gcov_sort_n_vals@@Base+0x14c>
   1c0dc:	add	r4, r4, #1
   1c0e0:	cmp	ip, r4
   1c0e4:	bne	1c0a4 <__gcov_sort_n_vals@@Base+0x138>
   1c0e8:	pop	{r4, r5, r6, pc}
   1c0ec:	bl	1c01c <__gcov_sort_n_vals@@Base+0xb0>
   1c0f0:	ldr	ip, [r5, #56]	; 0x38
   1c0f4:	add	r4, r4, #1
   1c0f8:	cmp	ip, r4
   1c0fc:	bne	1c0a4 <__gcov_sort_n_vals@@Base+0x138>
   1c100:	b	1c0e8 <__gcov_sort_n_vals@@Base+0x17c>
   1c104:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c108:	sub	sp, sp, #6080	; 0x17c0
   1c10c:	ldr	ip, [pc, #388]	; 1c298 <__gcov_sort_n_vals@@Base+0x32c>
   1c110:	sub	sp, sp, #36	; 0x24
   1c114:	add	ip, pc, ip
   1c118:	add	r5, sp, #2016	; 0x7e0
   1c11c:	mov	r4, r0
   1c120:	mov	r7, r1
   1c124:	mov	r1, #0
   1c128:	str	r1, [ip, #4]
   1c12c:	str	r1, [ip]
   1c130:	mov	r8, r2
   1c134:	mov	r6, r3
   1c138:	str	r1, [r5, #-2000]	; 0xfffff830
   1c13c:	str	r1, [r5, #-1996]	; 0xfffff834
   1c140:	bl	1c07c <__gcov_sort_n_vals@@Base+0x110>
   1c144:	mov	r1, r7
   1c148:	ldr	r0, [r4, #12]
   1c14c:	bl	1b3b4 <read_boolean_unary_expression@@Base+0x124c>
   1c150:	cmn	r0, #1
   1c154:	beq	1c1d4 <__gcov_sort_n_vals@@Base+0x268>
   1c158:	bl	1b69c <read_boolean_unary_expression@@Base+0x1534>
   1c15c:	cmp	r0, #0
   1c160:	beq	1c1e0 <__gcov_sort_n_vals@@Base+0x274>
   1c164:	ldr	r3, [pc, #304]	; 1c29c <__gcov_sort_n_vals@@Base+0x330>
   1c168:	cmp	r0, r3
   1c16c:	beq	1c238 <__gcov_sort_n_vals@@Base+0x2cc>
   1c170:	ldr	r0, [pc, #296]	; 1c2a0 <__gcov_sort_n_vals@@Base+0x334>
   1c174:	ldr	r1, [r7]
   1c178:	add	r0, pc, r0
   1c17c:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1c180:	ldr	r5, [pc, #284]	; 1c2a4 <__gcov_sort_n_vals@@Base+0x338>
   1c184:	add	r5, pc, r5
   1c188:	ldr	r1, [r5, #4]
   1c18c:	cmp	r1, #0
   1c190:	movne	r6, #10
   1c194:	beq	1c1b4 <__gcov_sort_n_vals@@Base+0x248>
   1c198:	mov	r2, r6
   1c19c:	mov	r0, r4
   1c1a0:	bl	1a700 <read_boolean_unary_expression@@Base+0x598>
   1c1a4:	cmp	r0, #0
   1c1a8:	mov	r1, r0
   1c1ac:	str	r0, [r5, #4]
   1c1b0:	bne	1c198 <__gcov_sort_n_vals@@Base+0x22c>
   1c1b4:	bl	1b4c8 <read_boolean_unary_expression@@Base+0x1360>
   1c1b8:	cmp	r0, #0
   1c1bc:	beq	1c1d4 <__gcov_sort_n_vals@@Base+0x268>
   1c1c0:	blt	1c274 <__gcov_sort_n_vals@@Base+0x308>
   1c1c4:	ldr	r0, [pc, #220]	; 1c2a8 <__gcov_sort_n_vals@@Base+0x33c>
   1c1c8:	add	r0, pc, r0
   1c1cc:	ldr	r1, [r7]
   1c1d0:	bl	1a6b8 <read_boolean_unary_expression@@Base+0x550>
   1c1d4:	add	sp, sp, #6080	; 0x17c0
   1c1d8:	add	sp, sp, #36	; 0x24
   1c1dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c1e0:	add	r9, sp, #24
   1c1e4:	bl	1b248 <read_boolean_unary_expression@@Base+0x10e0>
   1c1e8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1c1ec:	cmp	r1, #0
   1c1f0:	beq	1c280 <__gcov_sort_n_vals@@Base+0x314>
   1c1f4:	add	r3, sp, #6144	; 0x1800
   1c1f8:	ldr	r0, [r7]
   1c1fc:	str	r6, [sp, #4]
   1c200:	ldr	r3, [r3]
   1c204:	mov	r1, r8
   1c208:	str	r3, [sp]
   1c20c:	mov	r2, r4
   1c210:	mov	r3, r9
   1c214:	bl	1b10c <read_boolean_unary_expression@@Base+0xfa4>
   1c218:	cmn	r0, #1
   1c21c:	beq	1c180 <__gcov_sort_n_vals@@Base+0x214>
   1c220:	mov	r1, r9
   1c224:	ldr	r3, [r5, #-2000]	; 0xfffff830
   1c228:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1c22c:	mov	r0, r4
   1c230:	bl	1bd58 <read_boolean_unary_expression@@Base+0x1bf0>
   1c234:	b	1c180 <__gcov_sort_n_vals@@Base+0x214>
   1c238:	add	r3, sp, #16
   1c23c:	ldr	r0, [r7]
   1c240:	str	r3, [sp]
   1c244:	add	r3, sp, #6144	; 0x1800
   1c248:	add	r1, sp, #20
   1c24c:	add	r9, sp, #24
   1c250:	str	r1, [sp, #4]
   1c254:	str	r6, [sp, #8]
   1c258:	mov	r2, r9
   1c25c:	ldr	r3, [r3]
   1c260:	mov	r1, r4
   1c264:	bl	1b9ec <read_boolean_unary_expression@@Base+0x1884>
   1c268:	cmn	r0, #1
   1c26c:	bne	1c1e4 <__gcov_sort_n_vals@@Base+0x278>
   1c270:	b	1c180 <__gcov_sort_n_vals@@Base+0x214>
   1c274:	ldr	r0, [pc, #48]	; 1c2ac <__gcov_sort_n_vals@@Base+0x340>
   1c278:	add	r0, pc, r0
   1c27c:	b	1c1cc <__gcov_sort_n_vals@@Base+0x260>
   1c280:	ldr	r2, [pc, #40]	; 1c2b0 <__gcov_sort_n_vals@@Base+0x344>
   1c284:	mov	r0, r9
   1c288:	bl	1196c <memset@plt>
   1c28c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1c290:	str	r3, [r5, #-2000]	; 0xfffff830
   1c294:	b	1c1f4 <__gcov_sort_n_vals@@Base+0x288>
   1c298:	andeq	r3, r1, ip, ror r6
   1c29c:	strbvs	r6, [r3, -r1, ror #8]!
   1c2a0:	andeq	r1, r0, ip, lsl #2
   1c2a4:	andeq	r3, r1, ip, lsl #12
   1c2a8:	andeq	r1, r0, r0, lsr #1
   1c2ac:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1c2b0:	andeq	r1, r0, r8, asr #15
   1c2b4:	push	{r4, r5, r6, r7, r8, lr}
   1c2b8:	sub	sp, sp, #6080	; 0x17c0
   1c2bc:	sub	sp, sp, #32
   1c2c0:	add	r6, sp, #24
   1c2c4:	add	r2, sp, #12
   1c2c8:	mov	r8, r1
   1c2cc:	mov	r1, r6
   1c2d0:	mov	r4, r0
   1c2d4:	bl	1a918 <read_boolean_unary_expression@@Base+0x7b0>
   1c2d8:	add	r5, sp, #8
   1c2dc:	mov	r7, r0
   1c2e0:	mov	r0, r5
   1c2e4:	bl	1aa9c <read_boolean_unary_expression@@Base+0x934>
   1c2e8:	cmp	r4, #0
   1c2ec:	beq	1c314 <__gcov_sort_n_vals@@Base+0x3a8>
   1c2f0:	mov	r0, r4
   1c2f4:	str	r6, [sp]
   1c2f8:	mov	r3, r7
   1c2fc:	mov	r2, r8
   1c300:	mov	r1, r5
   1c304:	bl	1c104 <__gcov_sort_n_vals@@Base+0x198>
   1c308:	ldr	r4, [r4, #4]
   1c30c:	cmp	r4, #0
   1c310:	bne	1c2f0 <__gcov_sort_n_vals@@Base+0x384>
   1c314:	ldr	r0, [sp, #8]
   1c318:	bl	11870 <free@plt>
   1c31c:	add	sp, sp, #6080	; 0x17c0
   1c320:	add	sp, sp, #32
   1c324:	pop	{r4, r5, r6, r7, r8, pc}
   1c328:	ldrb	r1, [r0, #4]
   1c32c:	tst	r1, #1
   1c330:	bxne	lr
   1c334:	push	{r4, lr}
   1c338:	lsr	r1, r1, #1
   1c33c:	mov	r4, r0
   1c340:	and	r1, r1, #1
   1c344:	ldr	r0, [r0]
   1c348:	bl	1c2b4 <__gcov_sort_n_vals@@Base+0x348>
   1c34c:	ldrb	r3, [r4, #4]
   1c350:	orr	r3, r3, #3
   1c354:	strb	r3, [r4, #4]
   1c358:	pop	{r4, pc}
   1c35c:	push	{r4, r5, r6, lr}
   1c360:	ldr	r4, [pc, #76]	; 1c3b4 <__gcov_sort_n_vals@@Base+0x448>
   1c364:	ldr	r5, [pc, #76]	; 1c3b8 <__gcov_sort_n_vals@@Base+0x44c>
   1c368:	add	r4, pc, r4
   1c36c:	mov	r0, r4
   1c370:	bl	1c328 <__gcov_sort_n_vals@@Base+0x3bc>
   1c374:	ldr	r3, [r4, #8]
   1c378:	add	r5, pc, r5
   1c37c:	cmp	r3, #0
   1c380:	ldrne	r2, [r4, #12]
   1c384:	strne	r2, [r3, #12]
   1c388:	ldr	r2, [pc, #44]	; 1c3bc <__gcov_sort_n_vals@@Base+0x450>
   1c38c:	add	r2, pc, r2
   1c390:	ldr	r2, [r2, #12]
   1c394:	cmp	r2, #0
   1c398:	beq	1c3a4 <__gcov_sort_n_vals@@Base+0x438>
   1c39c:	str	r3, [r2, #8]
   1c3a0:	pop	{r4, r5, r6, pc}
   1c3a4:	ldr	r2, [pc, #20]	; 1c3c0 <__gcov_sort_n_vals@@Base+0x454>
   1c3a8:	ldr	r2, [r5, r2]
   1c3ac:	str	r3, [r2, #4]
   1c3b0:	pop	{r4, r5, r6, pc}
   1c3b4:	muleq	r1, r0, r7
   1c3b8:	andeq	r1, r1, r0, lsl #25
   1c3bc:	andeq	r3, r1, ip, ror #14
   1c3c0:	strheq	r0, [r0], -r4
   1c3c4:	ldr	r1, [r0]
   1c3c8:	push	{r4, r5, r6, lr}
   1c3cc:	cmp	r1, #0
   1c3d0:	ldr	r5, [pc, #168]	; 1c480 <__gcov_sort_n_vals@@Base+0x514>
   1c3d4:	add	r5, pc, r5
   1c3d8:	popeq	{r4, r5, r6, pc}
   1c3dc:	ldr	r3, [r0, #56]	; 0x38
   1c3e0:	cmp	r3, #0
   1c3e4:	popeq	{r4, r5, r6, pc}
   1c3e8:	mov	r4, r0
   1c3ec:	mov	r2, #0
   1c3f0:	add	r0, r0, #12
   1c3f4:	bl	1b080 <read_boolean_unary_expression@@Base+0xf18>
   1c3f8:	cmp	r0, #0
   1c3fc:	popeq	{r4, r5, r6, pc}
   1c400:	ldr	r6, [pc, #124]	; 1c484 <__gcov_sort_n_vals@@Base+0x518>
   1c404:	add	r6, pc, r6
   1c408:	ldr	r2, [r6]
   1c40c:	cmp	r2, #0
   1c410:	beq	1c428 <__gcov_sort_n_vals@@Base+0x4bc>
   1c414:	ldr	r3, [pc, #108]	; 1c488 <__gcov_sort_n_vals@@Base+0x51c>
   1c418:	str	r2, [r4, #4]
   1c41c:	add	r3, pc, r3
   1c420:	str	r4, [r3]
   1c424:	pop	{r4, r5, r6, pc}
   1c428:	ldr	r3, [pc, #92]	; 1c48c <__gcov_sort_n_vals@@Base+0x520>
   1c42c:	ldr	r2, [pc, #92]	; 1c490 <__gcov_sort_n_vals@@Base+0x524>
   1c430:	mov	r0, #12
   1c434:	ldr	r5, [r5, r3]
   1c438:	add	r2, pc, r2
   1c43c:	ldr	r1, [r5]
   1c440:	bl	1b080 <read_boolean_unary_expression@@Base+0xf18>
   1c444:	cmp	r0, #0
   1c448:	beq	1c468 <__gcov_sort_n_vals@@Base+0x4fc>
   1c44c:	ldr	r3, [r5, #4]
   1c450:	cmp	r3, #0
   1c454:	str	r3, [r6, #8]
   1c458:	strne	r6, [r3, #12]
   1c45c:	ldr	r3, [pc, #48]	; 1c494 <__gcov_sort_n_vals@@Base+0x528>
   1c460:	add	r3, pc, r3
   1c464:	str	r3, [r5, #4]
   1c468:	ldr	r0, [pc, #40]	; 1c498 <__gcov_sort_n_vals@@Base+0x52c>
   1c46c:	add	r0, pc, r0
   1c470:	bl	1c754 <__libc_csu_fini@@Base+0x4>
   1c474:	ldr	r3, [pc, #32]	; 1c49c <__gcov_sort_n_vals@@Base+0x530>
   1c478:	ldr	r2, [pc, r3]
   1c47c:	b	1c414 <__gcov_sort_n_vals@@Base+0x4a8>
   1c480:	andeq	r1, r1, r4, lsr #24
   1c484:	strdeq	r3, [r1], -r4
   1c488:	ldrdeq	r3, [r1], -ip
   1c48c:	strheq	r0, [r0], -r4
   1c490:	andeq	r0, r0, r0, ror lr
   1c494:	muleq	r1, r8, r6
   1c498:			; <UNDEFINED> instruction: 0xfffffee8
   1c49c:	andeq	r3, r1, r0, lsl #13
   1c4a0:	cmp	r3, #0
   1c4a4:	cmpeq	r2, #0
   1c4a8:	bne	1c4cc <__gcov_sort_n_vals@@Base+0x560>
   1c4ac:	cmp	r1, #0
   1c4b0:	movlt	r1, #-2147483648	; 0x80000000
   1c4b4:	movlt	r0, #0
   1c4b8:	blt	1c4c8 <__gcov_sort_n_vals@@Base+0x55c>
   1c4bc:	cmpeq	r0, #0
   1c4c0:	mvnne	r1, #-2147483648	; 0x80000000
   1c4c4:	mvnne	r0, #0
   1c4c8:	b	1c574 <__gcov_sort_n_vals@@Base+0x608>
   1c4cc:	sub	sp, sp, #8
   1c4d0:	push	{sp, lr}
   1c4d4:	cmp	r1, #0
   1c4d8:	blt	1c4f8 <__gcov_sort_n_vals@@Base+0x58c>
   1c4dc:	cmp	r3, #0
   1c4e0:	blt	1c52c <__gcov_sort_n_vals@@Base+0x5c0>
   1c4e4:	bl	1c5c8 <__gcov_sort_n_vals@@Base+0x65c>
   1c4e8:	ldr	lr, [sp, #4]
   1c4ec:	add	sp, sp, #8
   1c4f0:	pop	{r2, r3}
   1c4f4:	bx	lr
   1c4f8:	rsbs	r0, r0, #0
   1c4fc:	sbc	r1, r1, r1, lsl #1
   1c500:	cmp	r3, #0
   1c504:	blt	1c550 <__gcov_sort_n_vals@@Base+0x5e4>
   1c508:	bl	1c5c8 <__gcov_sort_n_vals@@Base+0x65c>
   1c50c:	ldr	lr, [sp, #4]
   1c510:	add	sp, sp, #8
   1c514:	pop	{r2, r3}
   1c518:	rsbs	r0, r0, #0
   1c51c:	sbc	r1, r1, r1, lsl #1
   1c520:	rsbs	r2, r2, #0
   1c524:	sbc	r3, r3, r3, lsl #1
   1c528:	bx	lr
   1c52c:	rsbs	r2, r2, #0
   1c530:	sbc	r3, r3, r3, lsl #1
   1c534:	bl	1c5c8 <__gcov_sort_n_vals@@Base+0x65c>
   1c538:	ldr	lr, [sp, #4]
   1c53c:	add	sp, sp, #8
   1c540:	pop	{r2, r3}
   1c544:	rsbs	r0, r0, #0
   1c548:	sbc	r1, r1, r1, lsl #1
   1c54c:	bx	lr
   1c550:	rsbs	r2, r2, #0
   1c554:	sbc	r3, r3, r3, lsl #1
   1c558:	bl	1c5c8 <__gcov_sort_n_vals@@Base+0x65c>
   1c55c:	ldr	lr, [sp, #4]
   1c560:	add	sp, sp, #8
   1c564:	pop	{r2, r3}
   1c568:	rsbs	r2, r2, #0
   1c56c:	sbc	r3, r3, r3, lsl #1
   1c570:	bx	lr
   1c574:	push	{r1, lr}
   1c578:	mov	r0, #8
   1c57c:	bl	11840 <raise@plt>
   1c580:	pop	{r1, pc}
   1c584:	ldr	r3, [pc, #48]	; 1c5bc <__gcov_sort_n_vals@@Base+0x650>
   1c588:	ldr	r2, [pc, #48]	; 1c5c0 <__gcov_sort_n_vals@@Base+0x654>
   1c58c:	and	r3, r3, r0, lsr #1
   1c590:	sub	r0, r0, r3
   1c594:	and	r3, r0, r2
   1c598:	and	r0, r2, r0, lsr #2
   1c59c:	add	r3, r3, r0
   1c5a0:	ldr	r0, [pc, #28]	; 1c5c4 <__gcov_sort_n_vals@@Base+0x658>
   1c5a4:	add	r3, r3, r3, lsr #4
   1c5a8:	and	r0, r0, r3
   1c5ac:	add	r0, r0, r0, lsl #8
   1c5b0:	add	r0, r0, r0, lsl #16
   1c5b4:	lsr	r0, r0, #24
   1c5b8:	bx	lr
   1c5bc:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1c5c0:	teqcc	r3, #-872415232	; 0xcc000000
   1c5c4:	svceq	0x000f0f0f
   1c5c8:	cmp	r1, r3
   1c5cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c5d0:	cmpeq	r0, r2
   1c5d4:	mov	r4, r0
   1c5d8:	mov	r5, r1
   1c5dc:	ldr	r9, [sp, #28]
   1c5e0:	movcc	r0, #0
   1c5e4:	movcc	r1, #0
   1c5e8:	bcc	1c6e0 <__gcov_sort_n_vals@@Base+0x774>
   1c5ec:	cmp	r3, #0
   1c5f0:	clzeq	ip, r2
   1c5f4:	clzne	ip, r3
   1c5f8:	addeq	ip, ip, #32
   1c5fc:	cmp	r5, #0
   1c600:	clzeq	r1, r4
   1c604:	addeq	r1, r1, #32
   1c608:	clzne	r1, r5
   1c60c:	sub	ip, ip, r1
   1c610:	sub	lr, ip, #32
   1c614:	lsl	r7, r3, ip
   1c618:	rsb	r8, ip, #32
   1c61c:	orr	r7, r7, r2, lsl lr
   1c620:	orr	r7, r7, r2, lsr r8
   1c624:	lsl	r6, r2, ip
   1c628:	cmp	r5, r7
   1c62c:	cmpeq	r4, r6
   1c630:	movcc	r0, #0
   1c634:	movcc	r1, #0
   1c638:	bcc	1c654 <__gcov_sort_n_vals@@Base+0x6e8>
   1c63c:	mov	r3, #1
   1c640:	subs	r4, r4, r6
   1c644:	lsl	r1, r3, lr
   1c648:	lsl	r0, r3, ip
   1c64c:	orr	r1, r1, r3, lsr r8
   1c650:	sbc	r5, r5, r7
   1c654:	cmp	ip, #0
   1c658:	beq	1c6e0 <__gcov_sort_n_vals@@Base+0x774>
   1c65c:	lsrs	r3, r7, #1
   1c660:	rrx	r2, r6
   1c664:	mov	r6, ip
   1c668:	b	1c68c <__gcov_sort_n_vals@@Base+0x720>
   1c66c:	subs	r4, r4, r2
   1c670:	sbc	r5, r5, r3
   1c674:	adds	r4, r4, r4
   1c678:	adc	r5, r5, r5
   1c67c:	adds	r4, r4, #1
   1c680:	adc	r5, r5, #0
   1c684:	subs	r6, r6, #1
   1c688:	beq	1c6a8 <__gcov_sort_n_vals@@Base+0x73c>
   1c68c:	cmp	r5, r3
   1c690:	cmpeq	r4, r2
   1c694:	bcs	1c66c <__gcov_sort_n_vals@@Base+0x700>
   1c698:	adds	r4, r4, r4
   1c69c:	adc	r5, r5, r5
   1c6a0:	subs	r6, r6, #1
   1c6a4:	bne	1c68c <__gcov_sort_n_vals@@Base+0x720>
   1c6a8:	lsr	r6, r4, ip
   1c6ac:	lsr	r7, r5, ip
   1c6b0:	orr	r6, r6, r5, lsl r8
   1c6b4:	adds	r2, r0, r4
   1c6b8:	orr	r6, r6, r5, lsr lr
   1c6bc:	adc	r3, r1, r5
   1c6c0:	lsl	r1, r7, ip
   1c6c4:	orr	r1, r1, r6, lsl lr
   1c6c8:	lsl	r0, r6, ip
   1c6cc:	orr	r1, r1, r6, lsr r8
   1c6d0:	subs	r0, r2, r0
   1c6d4:	mov	r4, r6
   1c6d8:	mov	r5, r7
   1c6dc:	sbc	r1, r3, r1
   1c6e0:	cmp	r9, #0
   1c6e4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1c6e8:	strd	r4, [r9]
   1c6ec:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001c6f0 <__libc_csu_init@@Base>:
   1c6f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6f4:	mov	r7, r0
   1c6f8:	ldr	r6, [pc, #72]	; 1c748 <__libc_csu_init@@Base+0x58>
   1c6fc:	ldr	r5, [pc, #72]	; 1c74c <__libc_csu_init@@Base+0x5c>
   1c700:	add	r6, pc, r6
   1c704:	add	r5, pc, r5
   1c708:	sub	r6, r6, r5
   1c70c:	mov	r8, r1
   1c710:	mov	r9, r2
   1c714:	bl	11814 <fdopen@plt-0x20>
   1c718:	asrs	r6, r6, #2
   1c71c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c720:	mov	r4, #0
   1c724:	add	r4, r4, #1
   1c728:	ldr	r3, [r5], #4
   1c72c:	mov	r2, r9
   1c730:	mov	r1, r8
   1c734:	mov	r0, r7
   1c738:	blx	r3
   1c73c:	cmp	r6, r4
   1c740:	bne	1c724 <__libc_csu_init@@Base+0x34>
   1c744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c748:	andeq	r1, r1, r8, lsl #16
   1c74c:	strdeq	r1, [r1], -r0

0001c750 <__libc_csu_fini@@Base>:
   1c750:	bx	lr
   1c754:	ldr	r3, [pc, #12]	; 1c768 <__libc_csu_fini@@Base+0x18>
   1c758:	mov	r1, #0
   1c75c:	add	r3, pc, r3
   1c760:	ldr	r2, [r3]
   1c764:	b	11948 <__cxa_atexit@plt>
   1c768:	andeq	r1, r1, r8, ror #18
   1c76c:	mov	r2, r1
   1c770:	mov	r1, r0
   1c774:	mov	r0, #3
   1c778:	b	118e8 <__fxstat@plt>

Disassembly of section .fini:

0001c77c <.fini>:
   1c77c:	push	{r3, lr}
   1c780:	pop	{r3, pc}
