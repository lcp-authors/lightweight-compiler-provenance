
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108b8 <.init>:
   108b8:	push	{r3, lr}
   108bc:	bl	10a04 <_start@@Base+0x3c>
   108c0:	pop	{r3, pc}

Disassembly of section .plt:

000108c4 <coda_match_filefilter@plt-0x14>:
   108c4:	push	{lr}		; (str lr, [sp, #-4]!)
   108c8:	ldr	lr, [pc, #4]	; 108d4 <coda_match_filefilter@plt-0x4>
   108cc:	add	lr, pc, lr
   108d0:	ldr	pc, [lr, #8]!
   108d4:	andeq	r1, r1, ip, lsr #14

000108d8 <coda_match_filefilter@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1836]!	; 0x72c

000108e4 <strcmp@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1828]!	; 0x724

000108f0 <printf@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1820]!	; 0x71c

000108fc <coda_set_definition_path_conditional@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1812]!	; 0x714

00010908 <coda_set_definition_path@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1804]!	; 0x70c

00010914 <fwrite@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1796]!	; 0x704

00010920 <coda_done@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1788]!	; 0x6fc

0001092c <puts@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1780]!	; 0x6f4

00010938 <__libc_start_main@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1772]!	; 0x6ec

00010944 <__gmon_start__@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1764]!	; 0x6e4

00010950 <exit@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1756]!	; 0x6dc

0001095c <fprintf@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1748]!	; 0x6d4

00010968 <coda_init@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1740]!	; 0x6cc

00010974 <coda_set_option_perform_conversions@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1732]!	; 0x6c4

00010980 <putchar@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1724]!	; 0x6bc

0001098c <coda_errno_to_string@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1716]!	; 0x6b4

00010998 <coda_get_libcoda_version@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #69632	; 0x11000
   109a0:	ldr	pc, [ip, #1708]!	; 0x6ac

000109a4 <coda_get_errno@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #69632	; 0x11000
   109ac:	ldr	pc, [ip, #1700]!	; 0x6a4

000109b0 <abort@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #69632	; 0x11000
   109b8:	ldr	pc, [ip, #1692]!	; 0x69c

000109bc <__assert_fail@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #69632	; 0x11000
   109c4:	ldr	pc, [ip, #1684]!	; 0x694

Disassembly of section .text:

000109c8 <_start@@Base>:
   109c8:	mov	fp, #0
   109cc:	mov	lr, #0
   109d0:	pop	{r1}		; (ldr r1, [sp], #4)
   109d4:	mov	r2, sp
   109d8:	push	{r2}		; (str r2, [sp, #-4]!)
   109dc:	push	{r0}		; (str r0, [sp, #-4]!)
   109e0:	ldr	ip, [pc, #16]	; 109f8 <_start@@Base+0x30>
   109e4:	push	{ip}		; (str ip, [sp, #-4]!)
   109e8:	ldr	r0, [pc, #12]	; 109fc <_start@@Base+0x34>
   109ec:	ldr	r3, [pc, #12]	; 10a00 <_start@@Base+0x38>
   109f0:	bl	10938 <__libc_start_main@plt>
   109f4:	bl	109b0 <abort@plt>
   109f8:	andeq	r1, r1, ip, lsr #10
   109fc:	andeq	r0, r1, r0, lsl pc
   10a00:	andeq	r1, r1, ip, asr #9
   10a04:	ldr	r3, [pc, #20]	; 10a20 <_start@@Base+0x58>
   10a08:	ldr	r2, [pc, #20]	; 10a24 <_start@@Base+0x5c>
   10a0c:	add	r3, pc, r3
   10a10:	ldr	r2, [r3, r2]
   10a14:	cmp	r2, #0
   10a18:	bxeq	lr
   10a1c:	b	10944 <__gmon_start__@plt>
   10a20:	andeq	r1, r1, ip, ror #11
   10a24:	andeq	r0, r0, r0, rrx
   10a28:	ldr	r3, [pc, #28]	; 10a4c <_start@@Base+0x84>
   10a2c:	ldr	r0, [pc, #28]	; 10a50 <_start@@Base+0x88>
   10a30:	sub	r3, r3, r0
   10a34:	cmp	r3, #6
   10a38:	bxls	lr
   10a3c:	ldr	r3, [pc, #16]	; 10a54 <_start@@Base+0x8c>
   10a40:	cmp	r3, #0
   10a44:	bxeq	lr
   10a48:	bx	r3
   10a4c:	andeq	r2, r2, r3, ror r0
   10a50:	andeq	r2, r2, r0, ror r0
   10a54:	andeq	r0, r0, r0
   10a58:	ldr	r1, [pc, #36]	; 10a84 <_start@@Base+0xbc>
   10a5c:	ldr	r0, [pc, #36]	; 10a88 <_start@@Base+0xc0>
   10a60:	sub	r1, r1, r0
   10a64:	asr	r1, r1, #2
   10a68:	add	r1, r1, r1, lsr #31
   10a6c:	asrs	r1, r1, #1
   10a70:	bxeq	lr
   10a74:	ldr	r3, [pc, #16]	; 10a8c <_start@@Base+0xc4>
   10a78:	cmp	r3, #0
   10a7c:	bxeq	lr
   10a80:	bx	r3
   10a84:	andeq	r2, r2, r0, ror r0
   10a88:	andeq	r2, r2, r0, ror r0
   10a8c:	andeq	r0, r0, r0
   10a90:	push	{r4, lr}
   10a94:	ldr	r4, [pc, #24]	; 10ab4 <_start@@Base+0xec>
   10a98:	ldrb	r3, [r4]
   10a9c:	cmp	r3, #0
   10aa0:	popne	{r4, pc}
   10aa4:	bl	10a28 <_start@@Base+0x60>
   10aa8:	mov	r3, #1
   10aac:	strb	r3, [r4]
   10ab0:	pop	{r4, pc}
   10ab4:	andeq	r2, r2, r0, ror r0
   10ab8:	ldr	r0, [pc, #40]	; 10ae8 <_start@@Base+0x120>
   10abc:	ldr	r3, [r0]
   10ac0:	cmp	r3, #0
   10ac4:	bne	10acc <_start@@Base+0x104>
   10ac8:	b	10a58 <_start@@Base+0x90>
   10acc:	ldr	r3, [pc, #24]	; 10aec <_start@@Base+0x124>
   10ad0:	cmp	r3, #0
   10ad4:	beq	10ac8 <_start@@Base+0x100>
   10ad8:	push	{r4, lr}
   10adc:	blx	r3
   10ae0:	pop	{r4, lr}
   10ae4:	b	10a58 <_start@@Base+0x90>
   10ae8:	strdeq	r1, [r2], -ip
   10aec:	andeq	r0, r0, r0
   10af0:	push	{fp, lr}
   10af4:	add	fp, sp, #4
   10af8:	bl	10998 <coda_get_libcoda_version@plt>
   10afc:	mov	r3, r0
   10b00:	mov	r1, r3
   10b04:	ldr	r3, [pc, #40]	; 10b34 <_start@@Base+0x16c>
   10b08:	add	r3, pc, r3
   10b0c:	mov	r0, r3
   10b10:	bl	108f0 <printf@plt>
   10b14:	ldr	r3, [pc, #28]	; 10b38 <_start@@Base+0x170>
   10b18:	add	r3, pc, r3
   10b1c:	mov	r0, r3
   10b20:	bl	1092c <puts@plt>
   10b24:	mov	r0, #10
   10b28:	bl	10980 <putchar@plt>
   10b2c:	nop			; (mov r0, r0)
   10b30:	pop	{fp, pc}
   10b34:	andeq	r0, r0, ip, lsr #20
   10b38:	andeq	r0, r0, ip, lsr #20
   10b3c:	push	{fp, lr}
   10b40:	add	fp, sp, #4
   10b44:	ldr	r3, [pc, #424]	; 10cf4 <_start@@Base+0x32c>
   10b48:	add	r3, pc, r3
   10b4c:	mov	r0, r3
   10b50:	bl	1092c <puts@plt>
   10b54:	ldr	r3, [pc, #412]	; 10cf8 <_start@@Base+0x330>
   10b58:	add	r3, pc, r3
   10b5c:	mov	r0, r3
   10b60:	bl	1092c <puts@plt>
   10b64:	ldr	r3, [pc, #400]	; 10cfc <_start@@Base+0x334>
   10b68:	add	r3, pc, r3
   10b6c:	mov	r0, r3
   10b70:	bl	1092c <puts@plt>
   10b74:	ldr	r3, [pc, #388]	; 10d00 <_start@@Base+0x338>
   10b78:	add	r3, pc, r3
   10b7c:	mov	r0, r3
   10b80:	bl	1092c <puts@plt>
   10b84:	mov	r0, #10
   10b88:	bl	10980 <putchar@plt>
   10b8c:	ldr	r3, [pc, #368]	; 10d04 <_start@@Base+0x33c>
   10b90:	add	r3, pc, r3
   10b94:	mov	r0, r3
   10b98:	bl	1092c <puts@plt>
   10b9c:	ldr	r3, [pc, #356]	; 10d08 <_start@@Base+0x340>
   10ba0:	add	r3, pc, r3
   10ba4:	mov	r0, r3
   10ba8:	bl	1092c <puts@plt>
   10bac:	ldr	r3, [pc, #344]	; 10d0c <_start@@Base+0x344>
   10bb0:	add	r3, pc, r3
   10bb4:	mov	r0, r3
   10bb8:	bl	1092c <puts@plt>
   10bbc:	ldr	r3, [pc, #332]	; 10d10 <_start@@Base+0x348>
   10bc0:	add	r3, pc, r3
   10bc4:	mov	r0, r3
   10bc8:	bl	1092c <puts@plt>
   10bcc:	ldr	r3, [pc, #320]	; 10d14 <_start@@Base+0x34c>
   10bd0:	add	r3, pc, r3
   10bd4:	mov	r0, r3
   10bd8:	bl	1092c <puts@plt>
   10bdc:	ldr	r3, [pc, #308]	; 10d18 <_start@@Base+0x350>
   10be0:	add	r3, pc, r3
   10be4:	mov	r0, r3
   10be8:	bl	1092c <puts@plt>
   10bec:	ldr	r3, [pc, #296]	; 10d1c <_start@@Base+0x354>
   10bf0:	add	r3, pc, r3
   10bf4:	mov	r0, r3
   10bf8:	bl	1092c <puts@plt>
   10bfc:	ldr	r3, [pc, #284]	; 10d20 <_start@@Base+0x358>
   10c00:	add	r3, pc, r3
   10c04:	mov	r0, r3
   10c08:	bl	1092c <puts@plt>
   10c0c:	ldr	r3, [pc, #272]	; 10d24 <_start@@Base+0x35c>
   10c10:	add	r3, pc, r3
   10c14:	mov	r0, r3
   10c18:	bl	1092c <puts@plt>
   10c1c:	mov	r0, #10
   10c20:	bl	10980 <putchar@plt>
   10c24:	ldr	r3, [pc, #252]	; 10d28 <_start@@Base+0x360>
   10c28:	add	r3, pc, r3
   10c2c:	mov	r0, r3
   10c30:	bl	1092c <puts@plt>
   10c34:	ldr	r3, [pc, #240]	; 10d2c <_start@@Base+0x364>
   10c38:	add	r3, pc, r3
   10c3c:	mov	r0, r3
   10c40:	bl	1092c <puts@plt>
   10c44:	mov	r0, #10
   10c48:	bl	10980 <putchar@plt>
   10c4c:	ldr	r3, [pc, #220]	; 10d30 <_start@@Base+0x368>
   10c50:	add	r3, pc, r3
   10c54:	mov	r0, r3
   10c58:	bl	1092c <puts@plt>
   10c5c:	ldr	r3, [pc, #208]	; 10d34 <_start@@Base+0x36c>
   10c60:	add	r3, pc, r3
   10c64:	mov	r0, r3
   10c68:	bl	1092c <puts@plt>
   10c6c:	mov	r0, #10
   10c70:	bl	10980 <putchar@plt>
   10c74:	ldr	r3, [pc, #188]	; 10d38 <_start@@Base+0x370>
   10c78:	add	r3, pc, r3
   10c7c:	mov	r0, r3
   10c80:	bl	1092c <puts@plt>
   10c84:	ldr	r3, [pc, #176]	; 10d3c <_start@@Base+0x374>
   10c88:	add	r3, pc, r3
   10c8c:	mov	r0, r3
   10c90:	bl	1092c <puts@plt>
   10c94:	ldr	r3, [pc, #164]	; 10d40 <_start@@Base+0x378>
   10c98:	add	r3, pc, r3
   10c9c:	mov	r0, r3
   10ca0:	bl	1092c <puts@plt>
   10ca4:	ldr	r3, [pc, #152]	; 10d44 <_start@@Base+0x37c>
   10ca8:	add	r3, pc, r3
   10cac:	mov	r0, r3
   10cb0:	bl	1092c <puts@plt>
   10cb4:	ldr	r3, [pc, #140]	; 10d48 <_start@@Base+0x380>
   10cb8:	add	r3, pc, r3
   10cbc:	mov	r0, r3
   10cc0:	bl	1092c <puts@plt>
   10cc4:	ldr	r3, [pc, #128]	; 10d4c <_start@@Base+0x384>
   10cc8:	add	r3, pc, r3
   10ccc:	mov	r0, r3
   10cd0:	bl	1092c <puts@plt>
   10cd4:	ldr	r3, [pc, #116]	; 10d50 <_start@@Base+0x388>
   10cd8:	add	r3, pc, r3
   10cdc:	mov	r0, r3
   10ce0:	bl	1092c <puts@plt>
   10ce4:	mov	r0, #10
   10ce8:	bl	10980 <putchar@plt>
   10cec:	nop			; (mov r0, r0)
   10cf0:	pop	{fp, pc}
   10cf4:	andeq	r0, r0, ip, lsr #20
   10cf8:	andeq	r0, r0, r4, lsr #20
   10cfc:	andeq	r0, r0, r8, asr sl
   10d00:	muleq	r0, r8, sl
   10d04:	muleq	r0, r8, sl
   10d08:	muleq	r0, ip, sl
   10d0c:			; <UNDEFINED> instruction: 0x00000ab4
   10d10:	andeq	r0, r0, r0, ror #21
   10d14:	andeq	r0, r0, r0, lsl #22
   10d18:	andeq	r0, r0, r8, lsr fp
   10d1c:	andeq	r0, r0, r8, ror fp
   10d20:	muleq	r0, r4, fp
   10d24:	andeq	r0, r0, r0, lsr #23
   10d28:	andeq	r0, r0, r0, asr #23
   10d2c:	andeq	r0, r0, r8, asr #23
   10d30:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10d34:	ldrdeq	r0, [r0], -ip
   10d38:	strdeq	r0, [r0], -r8
   10d3c:	andeq	r0, r0, r8, lsr ip
   10d40:	andeq	r0, r0, r4, ror ip
   10d44:	muleq	r0, r0, ip
   10d48:	andeq	r0, r0, ip, asr #25
   10d4c:	andeq	r0, r0, r4, lsl #26
   10d50:	andeq	r0, r0, r4, lsr sp

00010d54 <callback@@Base>:
   10d54:	push	{fp, lr}
   10d58:	add	fp, sp, #4
   10d5c:	sub	sp, sp, #16
   10d60:	str	r0, [fp, #-8]
   10d64:	str	r1, [fp, #-12]
   10d68:	str	r2, [fp, #-16]
   10d6c:	str	r3, [fp, #-20]	; 0xffffffec
   10d70:	ldr	r3, [pc, #356]	; 10edc <callback@@Base+0x188>
   10d74:	add	r3, pc, r3
   10d78:	ldr	r2, [fp, #-12]
   10d7c:	cmp	r2, #0
   10d80:	bne	10da8 <callback@@Base+0x54>
   10d84:	ldr	r2, [pc, #340]	; 10ee0 <callback@@Base+0x18c>
   10d88:	ldr	r3, [r3, r2]
   10d8c:	ldr	r0, [r3]
   10d90:	ldr	r3, [fp, #-16]
   10d94:	ldr	r2, [fp, #-8]
   10d98:	ldr	r1, [pc, #324]	; 10ee4 <callback@@Base+0x190>
   10d9c:	add	r1, pc, r1
   10da0:	bl	1095c <fprintf@plt>
   10da4:	b	10ecc <callback@@Base+0x178>
   10da8:	ldr	r2, [fp, #-12]
   10dac:	cmp	r2, #2
   10db0:	bne	10dd8 <callback@@Base+0x84>
   10db4:	ldr	r2, [pc, #292]	; 10ee0 <callback@@Base+0x18c>
   10db8:	ldr	r3, [r3, r2]
   10dbc:	ldr	r3, [r3]
   10dc0:	ldr	r2, [fp, #-8]
   10dc4:	ldr	r1, [pc, #284]	; 10ee8 <callback@@Base+0x194>
   10dc8:	add	r1, pc, r1
   10dcc:	mov	r0, r3
   10dd0:	bl	1095c <fprintf@plt>
   10dd4:	b	10ecc <callback@@Base+0x178>
   10dd8:	ldr	r2, [fp, #-12]
   10ddc:	cmp	r2, #1
   10de0:	bne	10e08 <callback@@Base+0xb4>
   10de4:	ldr	r2, [pc, #244]	; 10ee0 <callback@@Base+0x18c>
   10de8:	ldr	r3, [r3, r2]
   10dec:	ldr	r0, [r3]
   10df0:	ldr	r3, [fp, #-16]
   10df4:	ldr	r2, [fp, #-8]
   10df8:	ldr	r1, [pc, #236]	; 10eec <callback@@Base+0x198>
   10dfc:	add	r1, pc, r1
   10e00:	bl	1095c <fprintf@plt>
   10e04:	b	10ecc <callback@@Base+0x178>
   10e08:	ldr	r3, [pc, #224]	; 10ef0 <callback@@Base+0x19c>
   10e0c:	add	r3, pc, r3
   10e10:	ldr	r3, [r3]
   10e14:	cmp	r3, #0
   10e18:	beq	10eb8 <callback@@Base+0x164>
   10e1c:	ldr	r1, [fp, #-8]
   10e20:	ldr	r3, [pc, #204]	; 10ef4 <callback@@Base+0x1a0>
   10e24:	add	r3, pc, r3
   10e28:	mov	r0, r3
   10e2c:	bl	108f0 <printf@plt>
   10e30:	ldr	r3, [fp, #-12]
   10e34:	cmp	r3, #5
   10e38:	addls	pc, pc, r3, lsl #2
   10e3c:	b	10ecc <callback@@Base+0x178>
   10e40:	b	10e58 <callback@@Base+0x104>
   10e44:	b	10e58 <callback@@Base+0x104>
   10e48:	b	10e58 <callback@@Base+0x104>
   10e4c:	b	10e78 <callback@@Base+0x124>
   10e50:	b	10ea0 <callback@@Base+0x14c>
   10e54:	b	10e8c <callback@@Base+0x138>
   10e58:	ldr	r3, [pc, #152]	; 10ef8 <callback@@Base+0x1a4>
   10e5c:	add	r3, pc, r3
   10e60:	mov	r2, #110	; 0x6e
   10e64:	ldr	r1, [pc, #144]	; 10efc <callback@@Base+0x1a8>
   10e68:	add	r1, pc, r1
   10e6c:	ldr	r0, [pc, #140]	; 10f00 <callback@@Base+0x1ac>
   10e70:	add	r0, pc, r0
   10e74:	bl	109bc <__assert_fail@plt>
   10e78:	ldr	r3, [pc, #132]	; 10f04 <callback@@Base+0x1b0>
   10e7c:	add	r3, pc, r3
   10e80:	mov	r0, r3
   10e84:	bl	1092c <puts@plt>
   10e88:	b	10ecc <callback@@Base+0x178>
   10e8c:	ldr	r3, [pc, #116]	; 10f08 <callback@@Base+0x1b4>
   10e90:	add	r3, pc, r3
   10e94:	mov	r0, r3
   10e98:	bl	1092c <puts@plt>
   10e9c:	b	10ecc <callback@@Base+0x178>
   10ea0:	ldr	r3, [pc, #100]	; 10f0c <callback@@Base+0x1b8>
   10ea4:	add	r3, pc, r3
   10ea8:	mov	r0, r3
   10eac:	bl	1092c <puts@plt>
   10eb0:	nop			; (mov r0, r0)
   10eb4:	b	10ecc <callback@@Base+0x178>
   10eb8:	ldr	r3, [fp, #-12]
   10ebc:	cmp	r3, #4
   10ec0:	bne	10ecc <callback@@Base+0x178>
   10ec4:	ldr	r0, [fp, #-8]
   10ec8:	bl	1092c <puts@plt>
   10ecc:	mov	r3, #0
   10ed0:	mov	r0, r3
   10ed4:	sub	sp, fp, #4
   10ed8:	pop	{fp, pc}
   10edc:	andeq	r1, r1, r4, lsl #5
   10ee0:	andeq	r0, r0, ip, asr r0
   10ee4:			; <UNDEFINED> instruction: 0x00000cb0
   10ee8:	andeq	r0, r0, ip, lsl #25
   10eec:	andeq	r0, r0, r8, ror ip
   10ef0:	andeq	r1, r1, r0, ror #4
   10ef4:	andeq	r0, r0, r0, ror ip
   10ef8:	andeq	r0, r0, r8, ror #26
   10efc:	andeq	r0, r0, r4, lsr ip
   10f00:	andeq	r0, r0, r8, lsl #25
   10f04:	andeq	r0, r0, r0, lsl #25
   10f08:	andeq	r0, r0, r0, lsl #25
   10f0c:	andeq	r0, r0, r8, ror ip

00010f10 <main@@Base>:
   10f10:	push	{r4, fp, lr}
   10f14:	add	fp, sp, #8
   10f18:	sub	sp, sp, #36	; 0x24
   10f1c:	str	r0, [fp, #-32]	; 0xffffffe0
   10f20:	str	r1, [fp, #-36]	; 0xffffffdc
   10f24:	ldr	r4, [pc, #1352]	; 11474 <main@@Base+0x564>
   10f28:	add	r4, pc, r4
   10f2c:	mov	r3, #0
   10f30:	str	r3, [fp, #-16]
   10f34:	ldr	r3, [pc, #1340]	; 11478 <main@@Base+0x568>
   10f38:	add	r3, pc, r3
   10f3c:	mov	r2, #0
   10f40:	str	r2, [r3]
   10f44:	mov	r3, #1
   10f48:	str	r3, [fp, #-20]	; 0xffffffec
   10f4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10f50:	cmp	r3, #1
   10f54:	beq	10fb0 <main@@Base+0xa0>
   10f58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10f5c:	add	r3, r3, #4
   10f60:	ldr	r3, [r3]
   10f64:	ldr	r2, [pc, #1296]	; 1147c <main@@Base+0x56c>
   10f68:	add	r2, pc, r2
   10f6c:	mov	r1, r2
   10f70:	mov	r0, r3
   10f74:	bl	108e4 <strcmp@plt>
   10f78:	mov	r3, r0
   10f7c:	cmp	r3, #0
   10f80:	beq	10fb0 <main@@Base+0xa0>
   10f84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10f88:	add	r3, r3, #4
   10f8c:	ldr	r3, [r3]
   10f90:	ldr	r2, [pc, #1256]	; 11480 <main@@Base+0x570>
   10f94:	add	r2, pc, r2
   10f98:	mov	r1, r2
   10f9c:	mov	r0, r3
   10fa0:	bl	108e4 <strcmp@plt>
   10fa4:	mov	r3, r0
   10fa8:	cmp	r3, #0
   10fac:	bne	10fbc <main@@Base+0xac>
   10fb0:	bl	10b3c <_start@@Base+0x174>
   10fb4:	mov	r0, #0
   10fb8:	bl	10950 <exit@plt>
   10fbc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10fc0:	add	r3, r3, #4
   10fc4:	ldr	r3, [r3]
   10fc8:	ldr	r2, [pc, #1204]	; 11484 <main@@Base+0x574>
   10fcc:	add	r2, pc, r2
   10fd0:	mov	r1, r2
   10fd4:	mov	r0, r3
   10fd8:	bl	108e4 <strcmp@plt>
   10fdc:	mov	r3, r0
   10fe0:	cmp	r3, #0
   10fe4:	beq	11014 <main@@Base+0x104>
   10fe8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10fec:	add	r3, r3, #4
   10ff0:	ldr	r3, [r3]
   10ff4:	ldr	r2, [pc, #1164]	; 11488 <main@@Base+0x578>
   10ff8:	add	r2, pc, r2
   10ffc:	mov	r1, r2
   11000:	mov	r0, r3
   11004:	bl	108e4 <strcmp@plt>
   11008:	mov	r3, r0
   1100c:	cmp	r3, #0
   11010:	bne	11020 <main@@Base+0x110>
   11014:	bl	10af0 <_start@@Base+0x128>
   11018:	mov	r0, #0
   1101c:	bl	10950 <exit@plt>
   11020:	mov	r3, #1
   11024:	str	r3, [fp, #-24]	; 0xffffffe8
   11028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1102c:	add	r2, r3, #1
   11030:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11034:	cmp	r2, r3
   11038:	bge	110a0 <main@@Base+0x190>
   1103c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11040:	lsl	r3, r3, #2
   11044:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11048:	add	r3, r2, r3
   1104c:	ldr	r3, [r3]
   11050:	ldr	r2, [pc, #1076]	; 1148c <main@@Base+0x57c>
   11054:	add	r2, pc, r2
   11058:	mov	r1, r2
   1105c:	mov	r0, r3
   11060:	bl	108e4 <strcmp@plt>
   11064:	mov	r3, r0
   11068:	cmp	r3, #0
   1106c:	bne	110a0 <main@@Base+0x190>
   11070:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11074:	add	r3, r3, #1
   11078:	lsl	r3, r3, #2
   1107c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11080:	add	r3, r2, r3
   11084:	ldr	r3, [r3]
   11088:	mov	r0, r3
   1108c:	bl	10908 <coda_set_definition_path@plt>
   11090:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11094:	add	r3, r3, #2
   11098:	str	r3, [fp, #-24]	; 0xffffffe8
   1109c:	b	11114 <main@@Base+0x204>
   110a0:	ldr	r3, [pc, #1000]	; 11490 <main@@Base+0x580>
   110a4:	add	r3, pc, r3
   110a8:	str	r3, [fp, #-28]	; 0xffffffe4
   110ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   110b0:	ldr	r3, [r3]
   110b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   110b8:	mov	r1, #0
   110bc:	mov	r0, r3
   110c0:	bl	108fc <coda_set_definition_path_conditional@plt>
   110c4:	mov	r3, r0
   110c8:	cmp	r3, #0
   110cc:	beq	1132c <main@@Base+0x41c>
   110d0:	ldr	r3, [pc, #956]	; 11494 <main@@Base+0x584>
   110d4:	ldr	r3, [r4, r3]
   110d8:	ldr	r4, [r3]
   110dc:	bl	109a4 <coda_get_errno@plt>
   110e0:	mov	r3, r0
   110e4:	ldr	r3, [r3]
   110e8:	mov	r0, r3
   110ec:	bl	1098c <coda_errno_to_string@plt>
   110f0:	mov	r3, r0
   110f4:	mov	r2, r3
   110f8:	ldr	r3, [pc, #920]	; 11498 <main@@Base+0x588>
   110fc:	add	r3, pc, r3
   11100:	mov	r1, r3
   11104:	mov	r0, r4
   11108:	bl	1095c <fprintf@plt>
   1110c:	mov	r0, #1
   11110:	bl	10950 <exit@plt>
   11114:	b	1132c <main@@Base+0x41c>
   11118:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1111c:	lsl	r3, r3, #2
   11120:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11124:	add	r3, r2, r3
   11128:	ldr	r3, [r3]
   1112c:	ldr	r2, [pc, #872]	; 1149c <main@@Base+0x58c>
   11130:	add	r2, pc, r2
   11134:	mov	r1, r2
   11138:	mov	r0, r3
   1113c:	bl	108e4 <strcmp@plt>
   11140:	mov	r3, r0
   11144:	cmp	r3, #0
   11148:	beq	11180 <main@@Base+0x270>
   1114c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	lsl	r3, r3, #2
   11154:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11158:	add	r3, r2, r3
   1115c:	ldr	r3, [r3]
   11160:	ldr	r2, [pc, #824]	; 114a0 <main@@Base+0x590>
   11164:	add	r2, pc, r2
   11168:	mov	r1, r2
   1116c:	mov	r0, r3
   11170:	bl	108e4 <strcmp@plt>
   11174:	mov	r3, r0
   11178:	cmp	r3, #0
   1117c:	bne	1118c <main@@Base+0x27c>
   11180:	mov	r3, #0
   11184:	str	r3, [fp, #-20]	; 0xffffffec
   11188:	b	11320 <main@@Base+0x410>
   1118c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11190:	lsl	r3, r3, #2
   11194:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11198:	add	r3, r2, r3
   1119c:	ldr	r3, [r3]
   111a0:	ldr	r2, [pc, #764]	; 114a4 <main@@Base+0x594>
   111a4:	add	r2, pc, r2
   111a8:	mov	r1, r2
   111ac:	mov	r0, r3
   111b0:	bl	108e4 <strcmp@plt>
   111b4:	mov	r3, r0
   111b8:	cmp	r3, #0
   111bc:	beq	111f4 <main@@Base+0x2e4>
   111c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   111c4:	lsl	r3, r3, #2
   111c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   111cc:	add	r3, r2, r3
   111d0:	ldr	r3, [r3]
   111d4:	ldr	r2, [pc, #716]	; 114a8 <main@@Base+0x598>
   111d8:	add	r2, pc, r2
   111dc:	mov	r1, r2
   111e0:	mov	r0, r3
   111e4:	bl	108e4 <strcmp@plt>
   111e8:	mov	r3, r0
   111ec:	cmp	r3, #0
   111f0:	bne	11258 <main@@Base+0x348>
   111f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	add	r2, r3, #1
   111fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11200:	cmp	r2, r3
   11204:	bge	11258 <main@@Base+0x348>
   11208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1120c:	add	r3, r3, #1
   11210:	lsl	r3, r3, #2
   11214:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11218:	add	r3, r2, r3
   1121c:	ldr	r3, [r3]
   11220:	ldrb	r3, [r3]
   11224:	cmp	r3, #45	; 0x2d
   11228:	beq	11258 <main@@Base+0x348>
   1122c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	add	r3, r3, #1
   11234:	lsl	r3, r3, #2
   11238:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1123c:	add	r3, r2, r3
   11240:	ldr	r3, [r3]
   11244:	str	r3, [fp, #-16]
   11248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1124c:	add	r3, r3, #1
   11250:	str	r3, [fp, #-24]	; 0xffffffe8
   11254:	b	11320 <main@@Base+0x410>
   11258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1125c:	lsl	r3, r3, #2
   11260:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11264:	add	r3, r2, r3
   11268:	ldr	r3, [r3]
   1126c:	ldr	r2, [pc, #568]	; 114ac <main@@Base+0x59c>
   11270:	add	r2, pc, r2
   11274:	mov	r1, r2
   11278:	mov	r0, r3
   1127c:	bl	108e4 <strcmp@plt>
   11280:	mov	r3, r0
   11284:	cmp	r3, #0
   11288:	beq	112c0 <main@@Base+0x3b0>
   1128c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11290:	lsl	r3, r3, #2
   11294:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11298:	add	r3, r2, r3
   1129c:	ldr	r3, [r3]
   112a0:	ldr	r2, [pc, #520]	; 114b0 <main@@Base+0x5a0>
   112a4:	add	r2, pc, r2
   112a8:	mov	r1, r2
   112ac:	mov	r0, r3
   112b0:	bl	108e4 <strcmp@plt>
   112b4:	mov	r3, r0
   112b8:	cmp	r3, #0
   112bc:	bne	112d4 <main@@Base+0x3c4>
   112c0:	ldr	r3, [pc, #492]	; 114b4 <main@@Base+0x5a4>
   112c4:	add	r3, pc, r3
   112c8:	mov	r2, #1
   112cc:	str	r2, [r3]
   112d0:	b	11320 <main@@Base+0x410>
   112d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   112d8:	lsl	r3, r3, #2
   112dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   112e0:	add	r3, r2, r3
   112e4:	ldr	r3, [r3]
   112e8:	ldrb	r3, [r3]
   112ec:	cmp	r3, #45	; 0x2d
   112f0:	bne	11340 <main@@Base+0x430>
   112f4:	ldr	r3, [pc, #408]	; 11494 <main@@Base+0x584>
   112f8:	ldr	r3, [r4, r3]
   112fc:	ldr	r3, [r3]
   11300:	mov	r2, #25
   11304:	mov	r1, #1
   11308:	ldr	r0, [pc, #424]	; 114b8 <main@@Base+0x5a8>
   1130c:	add	r0, pc, r0
   11310:	bl	10914 <fwrite@plt>
   11314:	bl	10b3c <_start@@Base+0x174>
   11318:	mov	r0, #1
   1131c:	bl	10950 <exit@plt>
   11320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11324:	add	r3, r3, #1
   11328:	str	r3, [fp, #-24]	; 0xffffffe8
   1132c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11330:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11334:	cmp	r2, r3
   11338:	blt	11118 <main@@Base+0x208>
   1133c:	b	11344 <main@@Base+0x434>
   11340:	nop			; (mov r0, r0)
   11344:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11348:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1134c:	cmp	r2, r3
   11350:	bne	11380 <main@@Base+0x470>
   11354:	ldr	r3, [pc, #312]	; 11494 <main@@Base+0x584>
   11358:	ldr	r3, [r4, r3]
   1135c:	ldr	r3, [r3]
   11360:	mov	r2, #25
   11364:	mov	r1, #1
   11368:	ldr	r0, [pc, #332]	; 114bc <main@@Base+0x5ac>
   1136c:	add	r0, pc, r0
   11370:	bl	10914 <fwrite@plt>
   11374:	bl	10b3c <_start@@Base+0x174>
   11378:	mov	r0, #1
   1137c:	bl	10950 <exit@plt>
   11380:	bl	10968 <coda_init@plt>
   11384:	mov	r3, r0
   11388:	cmp	r3, #0
   1138c:	beq	113d4 <main@@Base+0x4c4>
   11390:	ldr	r3, [pc, #252]	; 11494 <main@@Base+0x584>
   11394:	ldr	r3, [r4, r3]
   11398:	ldr	r4, [r3]
   1139c:	bl	109a4 <coda_get_errno@plt>
   113a0:	mov	r3, r0
   113a4:	ldr	r3, [r3]
   113a8:	mov	r0, r3
   113ac:	bl	1098c <coda_errno_to_string@plt>
   113b0:	mov	r3, r0
   113b4:	mov	r2, r3
   113b8:	ldr	r3, [pc, #256]	; 114c0 <main@@Base+0x5b0>
   113bc:	add	r3, pc, r3
   113c0:	mov	r1, r3
   113c4:	mov	r0, r4
   113c8:	bl	1095c <fprintf@plt>
   113cc:	mov	r0, #1
   113d0:	bl	10950 <exit@plt>
   113d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   113d8:	bl	10974 <coda_set_option_perform_conversions@plt>
   113dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   113e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113e4:	sub	r1, r2, r3
   113e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113ec:	lsl	r3, r3, #2
   113f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   113f4:	add	r2, r2, r3
   113f8:	mov	r3, #0
   113fc:	str	r3, [sp]
   11400:	ldr	r3, [pc, #188]	; 114c4 <main@@Base+0x5b4>
   11404:	ldr	r3, [r4, r3]
   11408:	ldr	r0, [fp, #-16]
   1140c:	bl	108d8 <coda_match_filefilter@plt>
   11410:	mov	r3, r0
   11414:	cmp	r3, #0
   11418:	beq	11460 <main@@Base+0x550>
   1141c:	ldr	r3, [pc, #112]	; 11494 <main@@Base+0x584>
   11420:	ldr	r3, [r4, r3]
   11424:	ldr	r4, [r3]
   11428:	bl	109a4 <coda_get_errno@plt>
   1142c:	mov	r3, r0
   11430:	ldr	r3, [r3]
   11434:	mov	r0, r3
   11438:	bl	1098c <coda_errno_to_string@plt>
   1143c:	mov	r3, r0
   11440:	mov	r2, r3
   11444:	ldr	r3, [pc, #124]	; 114c8 <main@@Base+0x5b8>
   11448:	add	r3, pc, r3
   1144c:	mov	r1, r3
   11450:	mov	r0, r4
   11454:	bl	1095c <fprintf@plt>
   11458:	mov	r0, #1
   1145c:	bl	10950 <exit@plt>
   11460:	bl	10920 <coda_done@plt>
   11464:	mov	r3, #0
   11468:	mov	r0, r3
   1146c:	sub	sp, fp, #8
   11470:	pop	{r4, fp, pc}
   11474:	ldrdeq	r1, [r1], -r0
   11478:	andeq	r1, r1, r4, lsr r1
   1147c:			; <UNDEFINED> instruction: 0x00000bbc
   11480:	muleq	r0, r4, fp
   11484:	andeq	r0, r0, r4, ror #22
   11488:	andeq	r0, r0, ip, lsr fp
   1148c:	andeq	r0, r0, ip, ror #21
   11490:	andeq	r0, r0, r0, lsr #21
   11494:	andeq	r0, r0, ip, asr r0
   11498:	andeq	r0, r0, r4, ror #20
   1149c:	andeq	r0, r0, ip, lsr sl
   114a0:	andeq	r0, r0, ip, lsl #20
   114a4:	andeq	r0, r0, r4, ror #19
   114a8:			; <UNDEFINED> instruction: 0x000009b4
   114ac:	andeq	r0, r0, r8, lsr #18
   114b0:	strdeq	r0, [r0], -r8
   114b4:	andeq	r0, r1, r8, lsr #27
   114b8:	muleq	r0, ip, r8
   114bc:	andeq	r0, r0, ip, lsr r8
   114c0:	andeq	r0, r0, r4, lsr #15
   114c4:	andeq	r0, r0, r4, rrx
   114c8:	andeq	r0, r0, r8, lsl r7

000114cc <__libc_csu_init@@Base>:
   114cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114d0:	mov	r7, r0
   114d4:	ldr	r6, [pc, #72]	; 11524 <__libc_csu_init@@Base+0x58>
   114d8:	ldr	r5, [pc, #72]	; 11528 <__libc_csu_init@@Base+0x5c>
   114dc:	add	r6, pc, r6
   114e0:	add	r5, pc, r5
   114e4:	sub	r6, r6, r5
   114e8:	mov	r8, r1
   114ec:	mov	r9, r2
   114f0:	bl	108b8 <coda_match_filefilter@plt-0x20>
   114f4:	asrs	r6, r6, #2
   114f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   114fc:	mov	r4, #0
   11500:	add	r4, r4, #1
   11504:	ldr	r3, [r5], #4
   11508:	mov	r2, r9
   1150c:	mov	r1, r8
   11510:	mov	r0, r7
   11514:	blx	r3
   11518:	cmp	r6, r4
   1151c:	bne	11500 <__libc_csu_init@@Base+0x34>
   11520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11524:	andeq	r0, r1, r4, lsl sl
   11528:	andeq	r0, r1, ip, lsl #20

0001152c <__libc_csu_fini@@Base>:
   1152c:	bx	lr

Disassembly of section .fini:

00011530 <.fini>:
   11530:	push	{r3, lr}
   11534:	pop	{r3, pc}
