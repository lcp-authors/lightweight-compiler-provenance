
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

00010890 <.init>:
   10890:	push	{r3, lr}
   10894:	bl	10e3c <_start@@Base+0x3c>
   10898:	pop	{r3, pc}

Disassembly of section .plt:

0001089c <coda_match_filefilter@plt-0x14>:
   1089c:	push	{lr}		; (str lr, [sp, #-4]!)
   108a0:	ldr	lr, [pc, #4]	; 108ac <coda_match_filefilter@plt-0x4>
   108a4:	add	lr, pc, lr
   108a8:	ldr	pc, [lr, #8]!
   108ac:	andeq	r1, r1, r4, asr r7

000108b0 <coda_match_filefilter@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #69632	; 0x11000
   108b8:	ldr	pc, [ip, #1876]!	; 0x754

000108bc <strcmp@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #69632	; 0x11000
   108c4:	ldr	pc, [ip, #1868]!	; 0x74c

000108c8 <printf@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #69632	; 0x11000
   108d0:	ldr	pc, [ip, #1860]!	; 0x744

000108d4 <coda_set_definition_path_conditional@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #69632	; 0x11000
   108dc:	ldr	pc, [ip, #1852]!	; 0x73c

000108e0 <coda_set_definition_path@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #69632	; 0x11000
   108e8:	ldr	pc, [ip, #1844]!	; 0x734

000108ec <fwrite@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #69632	; 0x11000
   108f4:	ldr	pc, [ip, #1836]!	; 0x72c

000108f8 <coda_done@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #69632	; 0x11000
   10900:	ldr	pc, [ip, #1828]!	; 0x724

00010904 <puts@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #69632	; 0x11000
   1090c:	ldr	pc, [ip, #1820]!	; 0x71c

00010910 <__libc_start_main@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #69632	; 0x11000
   10918:	ldr	pc, [ip, #1812]!	; 0x714

0001091c <__gmon_start__@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #69632	; 0x11000
   10924:	ldr	pc, [ip, #1804]!	; 0x70c

00010928 <exit@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #69632	; 0x11000
   10930:	ldr	pc, [ip, #1796]!	; 0x704

00010934 <fprintf@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #69632	; 0x11000
   1093c:	ldr	pc, [ip, #1788]!	; 0x6fc

00010940 <coda_init@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #69632	; 0x11000
   10948:	ldr	pc, [ip, #1780]!	; 0x6f4

0001094c <coda_set_option_perform_conversions@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #69632	; 0x11000
   10954:	ldr	pc, [ip, #1772]!	; 0x6ec

00010958 <putchar@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #69632	; 0x11000
   10960:	ldr	pc, [ip, #1764]!	; 0x6e4

00010964 <coda_errno_to_string@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #69632	; 0x11000
   1096c:	ldr	pc, [ip, #1756]!	; 0x6dc

00010970 <coda_get_libcoda_version@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #69632	; 0x11000
   10978:	ldr	pc, [ip, #1748]!	; 0x6d4

0001097c <coda_get_errno@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #69632	; 0x11000
   10984:	ldr	pc, [ip, #1740]!	; 0x6cc

00010988 <abort@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #69632	; 0x11000
   10990:	ldr	pc, [ip, #1732]!	; 0x6c4

00010994 <__assert_fail@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #69632	; 0x11000
   1099c:	ldr	pc, [ip, #1724]!	; 0x6bc

Disassembly of section .text:

000109a0 <main@@Base>:
   109a0:	ldr	r3, [pc, #1012]	; 10d9c <main@@Base+0x3fc>
   109a4:	cmp	r0, #1
   109a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   109ac:	strd	r6, [sp, #8]
   109b0:	ldr	r7, [pc, #1000]	; 10da0 <main@@Base+0x400>
   109b4:	strd	r8, [sp, #16]
   109b8:	mov	r8, #0
   109bc:	add	r3, pc, r3
   109c0:	strd	sl, [sp, #24]
   109c4:	str	lr, [sp, #32]
   109c8:	sub	sp, sp, #44	; 0x2c
   109cc:	str	r8, [r3]
   109d0:	add	r7, pc, r7
   109d4:	beq	109fc <main@@Base+0x5c>
   109d8:	mov	r6, r1
   109dc:	ldr	r1, [pc, #960]	; 10da4 <main@@Base+0x404>
   109e0:	mov	r4, r0
   109e4:	ldr	r5, [r6, #4]
   109e8:	add	r1, pc, r1
   109ec:	mov	r0, r5
   109f0:	bl	108bc <strcmp@plt>
   109f4:	cmp	r0, r8
   109f8:	bne	10a08 <main@@Base+0x68>
   109fc:	bl	10ef0 <_start@@Base+0xf0>
   10a00:	mov	r0, #0
   10a04:	bl	10928 <exit@plt>
   10a08:	ldr	r1, [pc, #920]	; 10da8 <main@@Base+0x408>
   10a0c:	mov	r0, r5
   10a10:	add	r1, pc, r1
   10a14:	bl	108bc <strcmp@plt>
   10a18:	cmp	r0, r8
   10a1c:	beq	109fc <main@@Base+0x5c>
   10a20:	ldr	r1, [pc, #900]	; 10dac <main@@Base+0x40c>
   10a24:	mov	r0, r5
   10a28:	add	r1, pc, r1
   10a2c:	bl	108bc <strcmp@plt>
   10a30:	cmp	r0, #0
   10a34:	beq	10b88 <main@@Base+0x1e8>
   10a38:	ldr	r1, [pc, #880]	; 10db0 <main@@Base+0x410>
   10a3c:	mov	r0, r5
   10a40:	add	r1, pc, r1
   10a44:	bl	108bc <strcmp@plt>
   10a48:	cmp	r0, #0
   10a4c:	beq	10b88 <main@@Base+0x1e8>
   10a50:	cmp	r4, #2
   10a54:	ble	10bb8 <main@@Base+0x218>
   10a58:	ldr	r1, [pc, #852]	; 10db4 <main@@Base+0x414>
   10a5c:	mov	r0, r5
   10a60:	add	r1, pc, r1
   10a64:	bl	108bc <strcmp@plt>
   10a68:	subs	r5, r0, #0
   10a6c:	beq	10cb4 <main@@Base+0x314>
   10a70:	ldr	r2, [pc, #832]	; 10db8 <main@@Base+0x418>
   10a74:	mov	r1, r8
   10a78:	ldr	r0, [r6]
   10a7c:	add	r2, pc, r2
   10a80:	bl	108d4 <coda_set_definition_path_conditional@plt>
   10a84:	cmp	r0, #0
   10a88:	bne	10d00 <main@@Base+0x360>
   10a8c:	mov	fp, #1
   10a90:	ldr	r2, [pc, #804]	; 10dbc <main@@Base+0x41c>
   10a94:	mov	r3, #0
   10a98:	mov	sl, #1
   10a9c:	str	r3, [sp, #24]
   10aa0:	ldr	r3, [pc, #792]	; 10dc0 <main@@Base+0x420>
   10aa4:	str	r7, [sp, #36]	; 0x24
   10aa8:	add	r2, pc, r2
   10aac:	ldr	r9, [pc, #784]	; 10dc4 <main@@Base+0x424>
   10ab0:	str	r2, [sp, #12]
   10ab4:	ldr	r2, [pc, #780]	; 10dc8 <main@@Base+0x428>
   10ab8:	add	r3, pc, r3
   10abc:	mov	r7, r3
   10ac0:	add	r9, pc, r9
   10ac4:	add	r2, pc, r2
   10ac8:	str	r2, [sp, #16]
   10acc:	ldr	r2, [pc, #760]	; 10dcc <main@@Base+0x42c>
   10ad0:	add	r2, pc, r2
   10ad4:	str	r2, [sp, #20]
   10ad8:	ldr	r2, [pc, #752]	; 10dd0 <main@@Base+0x430>
   10adc:	add	r2, pc, r2
   10ae0:	str	r2, [sp, #32]
   10ae4:	ldr	r2, [pc, #744]	; 10dd4 <main@@Base+0x434>
   10ae8:	add	r2, pc, r2
   10aec:	str	r2, [sp, #28]
   10af0:	b	10b64 <main@@Base+0x1c4>
   10af4:	mov	r1, r7
   10af8:	mov	r0, r5
   10afc:	bl	108bc <strcmp@plt>
   10b00:	cmp	r0, #0
   10b04:	beq	10b80 <main@@Base+0x1e0>
   10b08:	mov	r0, r5
   10b0c:	ldr	r1, [sp, #12]
   10b10:	bl	108bc <strcmp@plt>
   10b14:	cmp	r0, #0
   10b18:	beq	10b30 <main@@Base+0x190>
   10b1c:	mov	r0, r5
   10b20:	ldr	r1, [sp, #28]
   10b24:	bl	108bc <strcmp@plt>
   10b28:	cmp	r0, #0
   10b2c:	bne	10c44 <main@@Base+0x2a4>
   10b30:	add	r2, fp, #1
   10b34:	cmp	r2, r4
   10b38:	bge	10c44 <main@@Base+0x2a4>
   10b3c:	add	r8, r6, r8
   10b40:	ldr	r1, [r8, #4]
   10b44:	ldrb	r0, [r1]
   10b48:	cmp	r0, #45	; 0x2d
   10b4c:	movne	fp, r2
   10b50:	strne	r1, [sp, #24]
   10b54:	beq	10c44 <main@@Base+0x2a4>
   10b58:	add	fp, fp, #1
   10b5c:	cmp	r4, fp
   10b60:	ble	10c7c <main@@Base+0x2dc>
   10b64:	ldr	r5, [r6, fp, lsl #2]
   10b68:	mov	r1, r9
   10b6c:	lsl	r8, fp, #2
   10b70:	mov	r0, r5
   10b74:	bl	108bc <strcmp@plt>
   10b78:	cmp	r0, #0
   10b7c:	bne	10af4 <main@@Base+0x154>
   10b80:	mov	sl, r0
   10b84:	b	10b58 <main@@Base+0x1b8>
   10b88:	bl	10970 <coda_get_libcoda_version@plt>
   10b8c:	mov	r1, r0
   10b90:	ldr	r0, [pc, #576]	; 10dd8 <main@@Base+0x438>
   10b94:	add	r0, pc, r0
   10b98:	bl	108c8 <printf@plt>
   10b9c:	ldr	r0, [pc, #568]	; 10ddc <main@@Base+0x43c>
   10ba0:	add	r0, pc, r0
   10ba4:	bl	10904 <puts@plt>
   10ba8:	mov	r0, #10
   10bac:	bl	10958 <putchar@plt>
   10bb0:	mov	r0, #0
   10bb4:	bl	10928 <exit@plt>
   10bb8:	ldr	r2, [pc, #544]	; 10de0 <main@@Base+0x440>
   10bbc:	mov	r1, r8
   10bc0:	ldr	r0, [r6]
   10bc4:	add	r2, pc, r2
   10bc8:	bl	108d4 <coda_set_definition_path_conditional@plt>
   10bcc:	cmp	r0, #0
   10bd0:	bne	10d00 <main@@Base+0x360>
   10bd4:	cmp	r4, #2
   10bd8:	movne	fp, #1
   10bdc:	movne	sl, fp
   10be0:	strne	r0, [sp, #24]
   10be4:	beq	10a8c <main@@Base+0xec>
   10be8:	bl	10940 <coda_init@plt>
   10bec:	subs	r5, r0, #0
   10bf0:	bne	10d68 <main@@Base+0x3c8>
   10bf4:	mov	r0, sl
   10bf8:	bl	1094c <coda_set_option_perform_conversions@plt>
   10bfc:	ldr	ip, [pc, #480]	; 10de4 <main@@Base+0x444>
   10c00:	sub	r1, r4, fp
   10c04:	add	r2, r6, fp, lsl #2
   10c08:	ldr	r0, [sp, #24]
   10c0c:	ldr	r3, [r7, ip]
   10c10:	str	r5, [sp]
   10c14:	bl	108b0 <coda_match_filefilter@plt>
   10c18:	subs	r4, r0, #0
   10c1c:	bne	10d34 <main@@Base+0x394>
   10c20:	bl	108f8 <coda_done@plt>
   10c24:	mov	r0, r4
   10c28:	add	sp, sp, #44	; 0x2c
   10c2c:	ldrd	r4, [sp]
   10c30:	ldrd	r6, [sp, #8]
   10c34:	ldrd	r8, [sp, #16]
   10c38:	ldrd	sl, [sp, #24]
   10c3c:	add	sp, sp, #32
   10c40:	pop	{pc}		; (ldr pc, [sp], #4)
   10c44:	mov	r0, r5
   10c48:	ldr	r1, [sp, #16]
   10c4c:	bl	108bc <strcmp@plt>
   10c50:	cmp	r0, #0
   10c54:	beq	10c6c <main@@Base+0x2cc>
   10c58:	mov	r0, r5
   10c5c:	ldr	r1, [sp, #32]
   10c60:	bl	108bc <strcmp@plt>
   10c64:	cmp	r0, #0
   10c68:	bne	10cd8 <main@@Base+0x338>
   10c6c:	ldr	r3, [sp, #20]
   10c70:	mov	r2, #1
   10c74:	str	r2, [r3]
   10c78:	b	10b58 <main@@Base+0x1b8>
   10c7c:	ldr	r7, [sp, #36]	; 0x24
   10c80:	cmp	r4, fp
   10c84:	bne	10be8 <main@@Base+0x248>
   10c88:	ldr	r0, [pc, #344]	; 10de8 <main@@Base+0x448>
   10c8c:	mov	r2, #25
   10c90:	mov	r1, #1
   10c94:	ldr	r3, [pc, #336]	; 10dec <main@@Base+0x44c>
   10c98:	add	r0, pc, r0
   10c9c:	ldr	r3, [r7, r3]
   10ca0:	ldr	r3, [r3]
   10ca4:	bl	108ec <fwrite@plt>
   10ca8:	bl	10ef0 <_start@@Base+0xf0>
   10cac:	mov	r0, #1
   10cb0:	bl	10928 <exit@plt>
   10cb4:	ldr	r0, [r6, #8]
   10cb8:	bl	108e0 <coda_set_definition_path@plt>
   10cbc:	cmp	r4, #3
   10cc0:	moveq	fp, r4
   10cc4:	moveq	sl, #1
   10cc8:	streq	r5, [sp, #24]
   10ccc:	beq	10c80 <main@@Base+0x2e0>
   10cd0:	mov	fp, #3
   10cd4:	b	10a90 <main@@Base+0xf0>
   10cd8:	ldrb	r2, [r5]
   10cdc:	ldr	r7, [sp, #36]	; 0x24
   10ce0:	cmp	r2, #45	; 0x2d
   10ce4:	bne	10be8 <main@@Base+0x248>
   10ce8:	ldr	r0, [pc, #256]	; 10df0 <main@@Base+0x450>
   10cec:	mov	r2, #25
   10cf0:	mov	r1, #1
   10cf4:	ldr	r3, [pc, #240]	; 10dec <main@@Base+0x44c>
   10cf8:	add	r0, pc, r0
   10cfc:	b	10c9c <main@@Base+0x2fc>
   10d00:	ldr	r3, [pc, #228]	; 10dec <main@@Base+0x44c>
   10d04:	ldr	r3, [r7, r3]
   10d08:	ldr	r4, [r3]
   10d0c:	bl	1097c <coda_get_errno@plt>
   10d10:	ldr	r0, [r0]
   10d14:	bl	10964 <coda_errno_to_string@plt>
   10d18:	ldr	r1, [pc, #212]	; 10df4 <main@@Base+0x454>
   10d1c:	mov	r2, r0
   10d20:	mov	r0, r4
   10d24:	add	r1, pc, r1
   10d28:	bl	10934 <fprintf@plt>
   10d2c:	mov	r0, #1
   10d30:	bl	10928 <exit@plt>
   10d34:	ldr	r3, [pc, #176]	; 10dec <main@@Base+0x44c>
   10d38:	ldr	r3, [r7, r3]
   10d3c:	ldr	r4, [r3]
   10d40:	bl	1097c <coda_get_errno@plt>
   10d44:	ldr	r0, [r0]
   10d48:	bl	10964 <coda_errno_to_string@plt>
   10d4c:	ldr	r1, [pc, #164]	; 10df8 <main@@Base+0x458>
   10d50:	mov	r2, r0
   10d54:	mov	r0, r4
   10d58:	add	r1, pc, r1
   10d5c:	bl	10934 <fprintf@plt>
   10d60:	mov	r0, #1
   10d64:	bl	10928 <exit@plt>
   10d68:	ldr	r3, [pc, #124]	; 10dec <main@@Base+0x44c>
   10d6c:	ldr	r3, [r7, r3]
   10d70:	ldr	r4, [r3]
   10d74:	bl	1097c <coda_get_errno@plt>
   10d78:	ldr	r0, [r0]
   10d7c:	bl	10964 <coda_errno_to_string@plt>
   10d80:	ldr	r1, [pc, #116]	; 10dfc <main@@Base+0x45c>
   10d84:	mov	r2, r0
   10d88:	mov	r0, r4
   10d8c:	add	r1, pc, r1
   10d90:	bl	10934 <fprintf@plt>
   10d94:	mov	r0, #1
   10d98:	bl	10928 <exit@plt>
   10d9c:			; <UNDEFINED> instruction: 0x000116b0
   10da0:	andeq	r1, r1, r8, lsr #12
   10da4:	andeq	r0, r0, r8, lsl #29
   10da8:	andeq	r0, r0, r4, ror #28
   10dac:	andeq	r0, r0, r4, asr lr
   10db0:	andeq	r0, r0, r0, asr #28
   10db4:	andeq	r0, r0, ip, ror #28
   10db8:	andeq	r0, r0, r4, asr lr
   10dbc:	andeq	r0, r0, r4, asr lr
   10dc0:	andeq	r0, r0, r0, ror #17
   10dc4:	andeq	r0, r0, r8, lsr lr
   10dc8:	andeq	r0, r0, r8, asr #28
   10dcc:	muleq	r1, ip, r5
   10dd0:	andeq	r0, r0, r4, lsr lr
   10dd4:	andeq	r0, r0, r8, lsl lr
   10dd8:	strdeq	r0, [r0], -r8
   10ddc:	strdeq	r0, [r0], -ip
   10de0:	andeq	r0, r0, ip, lsl #26
   10de4:	andeq	r0, r0, r4, rrx
   10de8:	andeq	r0, r0, r4, lsl #25
   10dec:	andeq	r0, r0, ip, asr r0
   10df0:	andeq	r0, r0, r4, lsr #24
   10df4:	andeq	r0, r0, r8, asr #23
   10df8:	muleq	r0, r4, fp
   10dfc:	andeq	r0, r0, r0, ror #22

00010e00 <_start@@Base>:
   10e00:	mov	fp, #0
   10e04:	mov	lr, #0
   10e08:	pop	{r1}		; (ldr r1, [sp], #4)
   10e0c:	mov	r2, sp
   10e10:	push	{r2}		; (str r2, [sp, #-4]!)
   10e14:	push	{r0}		; (str r0, [sp, #-4]!)
   10e18:	ldr	ip, [pc, #16]	; 10e30 <_start@@Base+0x30>
   10e1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e20:	ldr	r0, [pc, #12]	; 10e34 <_start@@Base+0x34>
   10e24:	ldr	r3, [pc, #12]	; 10e38 <_start@@Base+0x38>
   10e28:	bl	10910 <__libc_start_main@plt>
   10e2c:	bl	10988 <abort@plt>
   10e30:	andeq	r1, r1, ip, lsr #5
   10e34:	andeq	r0, r1, r0, lsr #19
   10e38:	andeq	r1, r1, ip, asr #4
   10e3c:	ldr	r3, [pc, #20]	; 10e58 <_start@@Base+0x58>
   10e40:	ldr	r2, [pc, #20]	; 10e5c <_start@@Base+0x5c>
   10e44:	add	r3, pc, r3
   10e48:	ldr	r2, [r3, r2]
   10e4c:	cmp	r2, #0
   10e50:	bxeq	lr
   10e54:	b	1091c <__gmon_start__@plt>
   10e58:			; <UNDEFINED> instruction: 0x000111b4
   10e5c:	andeq	r0, r0, r0, rrx
   10e60:	ldr	r0, [pc, #24]	; 10e80 <_start@@Base+0x80>
   10e64:	ldr	r3, [pc, #24]	; 10e84 <_start@@Base+0x84>
   10e68:	cmp	r3, r0
   10e6c:	bxeq	lr
   10e70:	ldr	r3, [pc, #16]	; 10e88 <_start@@Base+0x88>
   10e74:	cmp	r3, #0
   10e78:	bxeq	lr
   10e7c:	bx	r3
   10e80:	andeq	r2, r2, r0, ror r0
   10e84:	andeq	r2, r2, r0, ror r0
   10e88:	andeq	r0, r0, r0
   10e8c:	ldr	r0, [pc, #36]	; 10eb8 <_start@@Base+0xb8>
   10e90:	ldr	r1, [pc, #36]	; 10ebc <_start@@Base+0xbc>
   10e94:	sub	r1, r1, r0
   10e98:	asr	r1, r1, #2
   10e9c:	add	r1, r1, r1, lsr #31
   10ea0:	asrs	r1, r1, #1
   10ea4:	bxeq	lr
   10ea8:	ldr	r3, [pc, #16]	; 10ec0 <_start@@Base+0xc0>
   10eac:	cmp	r3, #0
   10eb0:	bxeq	lr
   10eb4:	bx	r3
   10eb8:	andeq	r2, r2, r0, ror r0
   10ebc:	andeq	r2, r2, r0, ror r0
   10ec0:	andeq	r0, r0, r0
   10ec4:	push	{r4, lr}
   10ec8:	ldr	r4, [pc, #24]	; 10ee8 <_start@@Base+0xe8>
   10ecc:	ldrb	r3, [r4]
   10ed0:	cmp	r3, #0
   10ed4:	popne	{r4, pc}
   10ed8:	bl	10e60 <_start@@Base+0x60>
   10edc:	mov	r3, #1
   10ee0:	strb	r3, [r4]
   10ee4:	pop	{r4, pc}
   10ee8:	andeq	r2, r2, r0, ror r0
   10eec:	b	10e8c <_start@@Base+0x8c>
   10ef0:	ldr	r0, [pc, #340]	; 1104c <_start@@Base+0x24c>
   10ef4:	str	r4, [sp, #-8]!
   10ef8:	str	lr, [sp, #4]
   10efc:	add	r0, pc, r0
   10f00:	bl	10904 <puts@plt>
   10f04:	ldr	r0, [pc, #324]	; 11050 <_start@@Base+0x250>
   10f08:	add	r0, pc, r0
   10f0c:	bl	10904 <puts@plt>
   10f10:	ldr	r0, [pc, #316]	; 11054 <_start@@Base+0x254>
   10f14:	add	r0, pc, r0
   10f18:	bl	10904 <puts@plt>
   10f1c:	ldr	r0, [pc, #308]	; 11058 <_start@@Base+0x258>
   10f20:	add	r0, pc, r0
   10f24:	bl	10904 <puts@plt>
   10f28:	mov	r0, #10
   10f2c:	bl	10958 <putchar@plt>
   10f30:	ldr	r0, [pc, #292]	; 1105c <_start@@Base+0x25c>
   10f34:	add	r0, pc, r0
   10f38:	bl	10904 <puts@plt>
   10f3c:	ldr	r0, [pc, #284]	; 11060 <_start@@Base+0x260>
   10f40:	add	r0, pc, r0
   10f44:	bl	10904 <puts@plt>
   10f48:	ldr	r0, [pc, #276]	; 11064 <_start@@Base+0x264>
   10f4c:	add	r0, pc, r0
   10f50:	bl	10904 <puts@plt>
   10f54:	ldr	r0, [pc, #268]	; 11068 <_start@@Base+0x268>
   10f58:	add	r0, pc, r0
   10f5c:	bl	10904 <puts@plt>
   10f60:	ldr	r0, [pc, #260]	; 1106c <_start@@Base+0x26c>
   10f64:	add	r0, pc, r0
   10f68:	bl	10904 <puts@plt>
   10f6c:	ldr	r0, [pc, #252]	; 11070 <_start@@Base+0x270>
   10f70:	add	r0, pc, r0
   10f74:	bl	10904 <puts@plt>
   10f78:	ldr	r0, [pc, #244]	; 11074 <_start@@Base+0x274>
   10f7c:	add	r0, pc, r0
   10f80:	bl	10904 <puts@plt>
   10f84:	ldr	r0, [pc, #236]	; 11078 <_start@@Base+0x278>
   10f88:	add	r0, pc, r0
   10f8c:	bl	10904 <puts@plt>
   10f90:	ldr	r0, [pc, #228]	; 1107c <_start@@Base+0x27c>
   10f94:	add	r0, pc, r0
   10f98:	bl	10904 <puts@plt>
   10f9c:	mov	r0, #10
   10fa0:	bl	10958 <putchar@plt>
   10fa4:	ldr	r0, [pc, #212]	; 11080 <_start@@Base+0x280>
   10fa8:	add	r0, pc, r0
   10fac:	bl	10904 <puts@plt>
   10fb0:	ldr	r0, [pc, #204]	; 11084 <_start@@Base+0x284>
   10fb4:	add	r0, pc, r0
   10fb8:	bl	10904 <puts@plt>
   10fbc:	mov	r0, #10
   10fc0:	bl	10958 <putchar@plt>
   10fc4:	ldr	r0, [pc, #188]	; 11088 <_start@@Base+0x288>
   10fc8:	add	r0, pc, r0
   10fcc:	bl	10904 <puts@plt>
   10fd0:	ldr	r0, [pc, #180]	; 1108c <_start@@Base+0x28c>
   10fd4:	add	r0, pc, r0
   10fd8:	bl	10904 <puts@plt>
   10fdc:	mov	r0, #10
   10fe0:	bl	10958 <putchar@plt>
   10fe4:	ldr	r0, [pc, #164]	; 11090 <_start@@Base+0x290>
   10fe8:	add	r0, pc, r0
   10fec:	bl	10904 <puts@plt>
   10ff0:	ldr	r0, [pc, #156]	; 11094 <_start@@Base+0x294>
   10ff4:	add	r0, pc, r0
   10ff8:	bl	10904 <puts@plt>
   10ffc:	ldr	r0, [pc, #148]	; 11098 <_start@@Base+0x298>
   11000:	add	r0, pc, r0
   11004:	bl	10904 <puts@plt>
   11008:	ldr	r0, [pc, #140]	; 1109c <_start@@Base+0x29c>
   1100c:	add	r0, pc, r0
   11010:	bl	10904 <puts@plt>
   11014:	ldr	r0, [pc, #132]	; 110a0 <_start@@Base+0x2a0>
   11018:	add	r0, pc, r0
   1101c:	bl	10904 <puts@plt>
   11020:	ldr	r0, [pc, #124]	; 110a4 <_start@@Base+0x2a4>
   11024:	add	r0, pc, r0
   11028:	bl	10904 <puts@plt>
   1102c:	ldr	r0, [pc, #116]	; 110a8 <_start@@Base+0x2a8>
   11030:	add	r0, pc, r0
   11034:	bl	10904 <puts@plt>
   11038:	mov	r0, #10
   1103c:	ldr	r4, [sp]
   11040:	ldr	lr, [sp, #4]
   11044:	add	sp, sp, #8
   11048:	b	10958 <putchar@plt>
   1104c:	andeq	r0, r0, r4, asr #7
   11050:	andeq	r0, r0, r0, asr #7
   11054:	strdeq	r0, [r0], -r8
   11058:	andeq	r0, r0, ip, lsr r4
   1105c:	andeq	r0, r0, r0, asr #8
   11060:	andeq	r0, r0, r8, asr #8
   11064:	andeq	r0, r0, r4, ror #8
   11068:	muleq	r0, r4, r4
   1106c:			; <UNDEFINED> instruction: 0x000004b8
   11070:	strdeq	r0, [r0], -r4
   11074:	andeq	r0, r0, r8, lsr r5
   11078:	andeq	r0, r0, r8, asr r5
   1107c:	andeq	r0, r0, r8, ror #10
   11080:	andeq	r0, r0, ip, lsl #11
   11084:	muleq	r0, r8, r5
   11088:	andeq	r0, r0, r4, lsr #11
   1108c:			; <UNDEFINED> instruction: 0x000005b4
   11090:	ldrdeq	r0, [r0], -r4
   11094:	andeq	r0, r0, r8, lsl r6
   11098:	andeq	r0, r0, r8, asr r6
   1109c:	andeq	r0, r0, r8, ror r6
   110a0:			; <UNDEFINED> instruction: 0x000006b8
   110a4:	strdeq	r0, [r0], -r4
   110a8:	andeq	r0, r0, r8, lsr #14

000110ac <callback@@Base>:
   110ac:	ldr	ip, [pc, #356]	; 11218 <callback@@Base+0x16c>
   110b0:	str	r4, [sp, #-8]!
   110b4:	subs	r4, r1, #0
   110b8:	mov	r1, r0
   110bc:	str	lr, [sp, #4]
   110c0:	add	ip, pc, ip
   110c4:	beq	11104 <callback@@Base+0x58>
   110c8:	cmp	r4, #2
   110cc:	beq	11194 <callback@@Base+0xe8>
   110d0:	cmp	r4, #1
   110d4:	beq	11134 <callback@@Base+0x88>
   110d8:	ldr	r3, [pc, #316]	; 1121c <callback@@Base+0x170>
   110dc:	add	r3, pc, r3
   110e0:	ldr	r3, [r3]
   110e4:	cmp	r3, #0
   110e8:	bne	11164 <callback@@Base+0xb8>
   110ec:	cmp	r4, #4
   110f0:	beq	111c0 <callback@@Base+0x114>
   110f4:	ldr	r4, [sp]
   110f8:	add	sp, sp, #4
   110fc:	mov	r0, #0
   11100:	pop	{pc}		; (ldr pc, [sp], #4)
   11104:	ldr	r0, [pc, #276]	; 11220 <callback@@Base+0x174>
   11108:	mov	r3, r2
   1110c:	mov	r2, r1
   11110:	ldr	r1, [pc, #268]	; 11224 <callback@@Base+0x178>
   11114:	ldr	r0, [ip, r0]
   11118:	add	r1, pc, r1
   1111c:	ldr	r0, [r0]
   11120:	bl	10934 <fprintf@plt>
   11124:	ldr	r4, [sp]
   11128:	add	sp, sp, #4
   1112c:	mov	r0, #0
   11130:	pop	{pc}		; (ldr pc, [sp], #4)
   11134:	ldr	r0, [pc, #228]	; 11220 <callback@@Base+0x174>
   11138:	mov	r3, r2
   1113c:	mov	r2, r1
   11140:	ldr	r1, [pc, #224]	; 11228 <callback@@Base+0x17c>
   11144:	ldr	r0, [ip, r0]
   11148:	add	r1, pc, r1
   1114c:	ldr	r0, [r0]
   11150:	bl	10934 <fprintf@plt>
   11154:	ldr	r4, [sp]
   11158:	add	sp, sp, #4
   1115c:	mov	r0, #0
   11160:	pop	{pc}		; (ldr pc, [sp], #4)
   11164:	ldr	r0, [pc, #192]	; 1122c <callback@@Base+0x180>
   11168:	add	r0, pc, r0
   1116c:	bl	108c8 <printf@plt>
   11170:	cmp	r4, #5
   11174:	addls	pc, pc, r4, lsl #2
   11178:	b	110f4 <callback@@Base+0x48>
   1117c:	b	111f8 <callback@@Base+0x14c>
   11180:	b	110f4 <callback@@Base+0x48>
   11184:	b	110f4 <callback@@Base+0x48>
   11188:	b	111e8 <callback@@Base+0x13c>
   1118c:	b	111d8 <callback@@Base+0x12c>
   11190:	b	111c8 <callback@@Base+0x11c>
   11194:	ldr	r3, [pc, #132]	; 11220 <callback@@Base+0x174>
   11198:	mov	r2, r0
   1119c:	ldr	r1, [pc, #140]	; 11230 <callback@@Base+0x184>
   111a0:	ldr	r3, [ip, r3]
   111a4:	add	r1, pc, r1
   111a8:	ldr	r0, [r3]
   111ac:	bl	10934 <fprintf@plt>
   111b0:	ldr	r4, [sp]
   111b4:	add	sp, sp, #4
   111b8:	mov	r0, #0
   111bc:	pop	{pc}		; (ldr pc, [sp], #4)
   111c0:	bl	10904 <puts@plt>
   111c4:	b	110f4 <callback@@Base+0x48>
   111c8:	ldr	r0, [pc, #100]	; 11234 <callback@@Base+0x188>
   111cc:	add	r0, pc, r0
   111d0:	bl	10904 <puts@plt>
   111d4:	b	110f4 <callback@@Base+0x48>
   111d8:	ldr	r0, [pc, #88]	; 11238 <callback@@Base+0x18c>
   111dc:	add	r0, pc, r0
   111e0:	bl	10904 <puts@plt>
   111e4:	b	110f4 <callback@@Base+0x48>
   111e8:	ldr	r0, [pc, #76]	; 1123c <callback@@Base+0x190>
   111ec:	add	r0, pc, r0
   111f0:	bl	10904 <puts@plt>
   111f4:	b	110f4 <callback@@Base+0x48>
   111f8:	ldr	r3, [pc, #64]	; 11240 <callback@@Base+0x194>
   111fc:	mov	r2, #110	; 0x6e
   11200:	ldr	r1, [pc, #60]	; 11244 <callback@@Base+0x198>
   11204:	ldr	r0, [pc, #60]	; 11248 <callback@@Base+0x19c>
   11208:	add	r3, pc, r3
   1120c:	add	r1, pc, r1
   11210:	add	r0, pc, r0
   11214:	bl	10994 <__assert_fail@plt>
   11218:	andeq	r0, r1, r8, lsr pc
   1121c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11220:	andeq	r0, r0, ip, asr r0
   11224:	andeq	r0, r0, r0, lsl #13
   11228:	andeq	r0, r0, r8, ror r6
   1122c:	andeq	r0, r0, r8, ror r6
   11230:	strdeq	r0, [r0], -ip
   11234:	muleq	r0, r0, r6
   11238:	andeq	r0, r0, ip, lsl #13
   1123c:	andeq	r0, r0, ip, asr r6
   11240:	andeq	r0, r0, ip, lsr #1
   11244:	ldrdeq	r0, [r0], -ip
   11248:	andeq	r0, r0, r4, lsr r6

0001124c <__libc_csu_init@@Base>:
   1124c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11250:	mov	r7, r0
   11254:	ldr	r6, [pc, #72]	; 112a4 <__libc_csu_init@@Base+0x58>
   11258:	ldr	r5, [pc, #72]	; 112a8 <__libc_csu_init@@Base+0x5c>
   1125c:	add	r6, pc, r6
   11260:	add	r5, pc, r5
   11264:	sub	r6, r6, r5
   11268:	mov	r8, r1
   1126c:	mov	r9, r2
   11270:	bl	10890 <coda_match_filefilter@plt-0x20>
   11274:	asrs	r6, r6, #2
   11278:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1127c:	mov	r4, #0
   11280:	add	r4, r4, #1
   11284:	ldr	r3, [r5], #4
   11288:	mov	r2, r9
   1128c:	mov	r1, r8
   11290:	mov	r0, r7
   11294:	blx	r3
   11298:	cmp	r6, r4
   1129c:	bne	11280 <__libc_csu_init@@Base+0x34>
   112a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112a4:	muleq	r1, r8, ip
   112a8:	muleq	r1, r0, ip

000112ac <__libc_csu_fini@@Base>:
   112ac:	bx	lr

Disassembly of section .fini:

000112b0 <.fini>:
   112b0:	push	{r3, lr}
   112b4:	pop	{r3, pc}
