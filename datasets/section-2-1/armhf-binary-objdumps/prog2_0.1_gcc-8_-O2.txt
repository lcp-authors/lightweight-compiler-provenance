
../repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

00010554 <.init>:
   10554:	push	{r3, lr}
   10558:	bl	106e4 <_start@@Base+0x3c>
   1055c:	pop	{r3, pc}

Disassembly of section .plt:

00010560 <printf@plt-0x14>:
   10560:	push	{lr}		; (str lr, [sp, #-4]!)
   10564:	ldr	lr, [pc, #4]	; 10570 <printf@plt-0x4>
   10568:	add	lr, pc, lr
   1056c:	ldr	pc, [lr, #8]!
   10570:	muleq	r1, r0, sl

00010574 <printf@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2704]!	; 0xa90

00010580 <__libc_start_main@plt>:
   10580:	add	ip, pc, #0, 12
   10584:	add	ip, ip, #16, 20	; 0x10000
   10588:	ldr	pc, [ip, #2696]!	; 0xa88

0001058c <__gmon_start__@plt>:
   1058c:	add	ip, pc, #0, 12
   10590:	add	ip, ip, #16, 20	; 0x10000
   10594:	ldr	pc, [ip, #2688]!	; 0xa80

00010598 <__isoc99_scanf@plt>:
   10598:	add	ip, pc, #0, 12
   1059c:	add	ip, ip, #16, 20	; 0x10000
   105a0:	ldr	pc, [ip, #2680]!	; 0xa78

000105a4 <abort@plt>:
   105a4:	add	ip, pc, #0, 12
   105a8:	add	ip, ip, #16, 20	; 0x10000
   105ac:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000105b0 <main@@Base>:
   105b0:	ldr	r0, [pc, #220]	; 10694 <main@@Base+0xe4>
   105b4:	str	r4, [sp, #-8]!
   105b8:	ldr	r4, [pc, #216]	; 10698 <main@@Base+0xe8>
   105bc:	str	lr, [sp, #4]
   105c0:	sub	sp, sp, #24
   105c4:	add	r0, pc, r0
   105c8:	bl	10574 <printf@plt>
   105cc:	add	r4, pc, r4
   105d0:	add	r1, sp, #20
   105d4:	mov	r0, r4
   105d8:	bl	10598 <__isoc99_scanf@plt>
   105dc:	ldr	r0, [pc, #184]	; 1069c <main@@Base+0xec>
   105e0:	add	r0, pc, r0
   105e4:	bl	10574 <printf@plt>
   105e8:	add	r1, sp, #8
   105ec:	mov	r0, r4
   105f0:	bl	10598 <__isoc99_scanf@plt>
   105f4:	add	r1, sp, #12
   105f8:	mov	r0, r4
   105fc:	bl	10598 <__isoc99_scanf@plt>
   10600:	ldr	r0, [pc, #152]	; 106a0 <main@@Base+0xf0>
   10604:	add	r0, pc, r0
   10608:	bl	10574 <printf@plt>
   1060c:	mov	r0, r4
   10610:	add	r1, sp, #16
   10614:	bl	10598 <__isoc99_scanf@plt>
   10618:	vldr	s15, [pc, #112]	; 10690 <main@@Base+0xe0>
   1061c:	vldr	s14, [sp, #12]
   10620:	vstr	s15, [sp, #8]
   10624:	vcmpe.f32	s14, s15
   10628:	vmrs	APSR_nzcv, fpscr
   1062c:	blt	1067c <main@@Base+0xcc>
   10630:	ldr	r4, [pc, #108]	; 106a4 <main@@Base+0xf4>
   10634:	add	r4, pc, r4
   10638:	vldr	s14, [sp, #20]
   1063c:	vcvt.f64.f32	d6, s15
   10640:	mov	r0, r4
   10644:	vmul.f32	s14, s15, s14
   10648:	vmov	r2, r3, d6
   1064c:	vmul.f32	s15, s14, s15
   10650:	vcvt.f64.f32	d7, s15
   10654:	vstr	d7, [sp]
   10658:	bl	10574 <printf@plt>
   1065c:	vldr	s15, [sp, #8]
   10660:	vldr	s14, [sp, #12]
   10664:	vldr	s13, [sp, #16]
   10668:	vadd.f32	s15, s15, s13
   1066c:	vcmpe.f32	s15, s14
   10670:	vstr	s15, [sp, #8]
   10674:	vmrs	APSR_nzcv, fpscr
   10678:	bls	10638 <main@@Base+0x88>
   1067c:	mov	r0, #0
   10680:	add	sp, sp, #24
   10684:	ldr	r4, [sp]
   10688:	add	sp, sp, #4
   1068c:	pop	{pc}		; (ldr pc, [sp], #4)
   10690:	andeq	r0, r0, r0
   10694:	andeq	r0, r0, ip, lsr r2
   10698:	andeq	r0, r0, r8, asr #4
   1069c:	andeq	r0, r0, r8, lsr r2
   106a0:	andeq	r0, r0, r8, lsr #4
   106a4:	andeq	r0, r0, ip, lsl #4

000106a8 <_start@@Base>:
   106a8:	mov	fp, #0
   106ac:	mov	lr, #0
   106b0:	pop	{r1}		; (ldr r1, [sp], #4)
   106b4:	mov	r2, sp
   106b8:	push	{r2}		; (str r2, [sp, #-4]!)
   106bc:	push	{r0}		; (str r0, [sp, #-4]!)
   106c0:	ldr	ip, [pc, #16]	; 106d8 <_start@@Base+0x30>
   106c4:	push	{ip}		; (str ip, [sp, #-4]!)
   106c8:	ldr	r0, [pc, #12]	; 106dc <_start@@Base+0x34>
   106cc:	ldr	r3, [pc, #12]	; 106e0 <_start@@Base+0x38>
   106d0:	bl	10580 <__libc_start_main@plt>
   106d4:	bl	105a4 <abort@plt>
   106d8:	strdeq	r0, [r1], -r8
   106dc:			; <UNDEFINED> instruction: 0x000105b0
   106e0:	muleq	r1, r8, r7
   106e4:	ldr	r3, [pc, #20]	; 10700 <_start@@Base+0x58>
   106e8:	ldr	r2, [pc, #20]	; 10704 <_start@@Base+0x5c>
   106ec:	add	r3, pc, r3
   106f0:	ldr	r2, [r3, r2]
   106f4:	cmp	r2, #0
   106f8:	bxeq	lr
   106fc:	b	1058c <__gmon_start__@plt>
   10700:	andeq	r0, r1, ip, lsl #18
   10704:	andeq	r0, r0, r0, lsr #32
   10708:	ldr	r0, [pc, #24]	; 10728 <_start@@Base+0x80>
   1070c:	ldr	r3, [pc, #24]	; 1072c <_start@@Base+0x84>
   10710:	cmp	r3, r0
   10714:	bxeq	lr
   10718:	ldr	r3, [pc, #16]	; 10730 <_start@@Base+0x88>
   1071c:	cmp	r3, #0
   10720:	bxeq	lr
   10724:	bx	r3
   10728:	andeq	r1, r2, ip, lsr #32
   1072c:	andeq	r1, r2, ip, lsr #32
   10730:	andeq	r0, r0, r0
   10734:	ldr	r0, [pc, #36]	; 10760 <_start@@Base+0xb8>
   10738:	ldr	r1, [pc, #36]	; 10764 <_start@@Base+0xbc>
   1073c:	sub	r1, r1, r0
   10740:	asr	r1, r1, #2
   10744:	add	r1, r1, r1, lsr #31
   10748:	asrs	r1, r1, #1
   1074c:	bxeq	lr
   10750:	ldr	r3, [pc, #16]	; 10768 <_start@@Base+0xc0>
   10754:	cmp	r3, #0
   10758:	bxeq	lr
   1075c:	bx	r3
   10760:	andeq	r1, r2, ip, lsr #32
   10764:	andeq	r1, r2, ip, lsr #32
   10768:	andeq	r0, r0, r0
   1076c:	push	{r4, lr}
   10770:	ldr	r4, [pc, #24]	; 10790 <_start@@Base+0xe8>
   10774:	ldrb	r3, [r4]
   10778:	cmp	r3, #0
   1077c:	popne	{r4, pc}
   10780:	bl	10708 <_start@@Base+0x60>
   10784:	mov	r3, #1
   10788:	strb	r3, [r4]
   1078c:	pop	{r4, pc}
   10790:	andeq	r1, r2, ip, lsr #32
   10794:	b	10734 <_start@@Base+0x8c>

00010798 <__libc_csu_init@@Base>:
   10798:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1079c:	mov	r7, r0
   107a0:	ldr	r6, [pc, #72]	; 107f0 <__libc_csu_init@@Base+0x58>
   107a4:	ldr	r5, [pc, #72]	; 107f4 <__libc_csu_init@@Base+0x5c>
   107a8:	add	r6, pc, r6
   107ac:	add	r5, pc, r5
   107b0:	sub	r6, r6, r5
   107b4:	mov	r8, r1
   107b8:	mov	r9, r2
   107bc:	bl	10554 <printf@plt-0x20>
   107c0:	asrs	r6, r6, #2
   107c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107c8:	mov	r4, #0
   107cc:	add	r4, r4, #1
   107d0:	ldr	r3, [r5], #4
   107d4:	mov	r2, r9
   107d8:	mov	r1, r8
   107dc:	mov	r0, r7
   107e0:	blx	r3
   107e4:	cmp	r6, r4
   107e8:	bne	107cc <__libc_csu_init@@Base+0x34>
   107ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107f0:	andeq	r0, r1, r4, ror #14
   107f4:	andeq	r0, r1, ip, asr r7

000107f8 <__libc_csu_fini@@Base>:
   107f8:	bx	lr

Disassembly of section .fini:

000107fc <.fini>:
   107fc:	push	{r3, lr}
   10800:	pop	{r3, pc}
