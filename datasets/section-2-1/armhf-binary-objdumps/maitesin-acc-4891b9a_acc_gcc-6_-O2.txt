
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

000118b0 <.init>:
   118b0:	push	{r3, lr}
   118b4:	bl	11cbc <_start@@Base+0x3c>
   118b8:	pop	{r3, pc}

Disassembly of section .plt:

000118bc <fdopen@plt-0x14>:
   118bc:	push	{lr}		; (str lr, [sp, #-4]!)
   118c0:	ldr	lr, [pc, #4]	; 118cc <fdopen@plt-0x4>
   118c4:	add	lr, pc, lr
   118c8:	ldr	pc, [lr, #8]!
   118cc:	andeq	r7, r1, r4, lsr r7

000118d0 <fdopen@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #94208	; 0x17000
   118d8:	ldr	pc, [ip, #1844]!	; 0x734

000118dc <raise@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #94208	; 0x17000
   118e4:	ldr	pc, [ip, #1836]!	; 0x72c

000118e8 <setbuf@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #94208	; 0x17000
   118f0:	ldr	pc, [ip, #1828]!	; 0x724

000118f4 <strtol@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #94208	; 0x17000
   118fc:	ldr	pc, [ip, #1820]!	; 0x71c

00011900 <fopen@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #94208	; 0x17000
   11908:	ldr	pc, [ip, #1812]!	; 0x714

0001190c <free@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #94208	; 0x17000
   11914:	ldr	pc, [ip, #1804]!	; 0x70c

00011918 <memcpy@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #94208	; 0x17000
   11920:	ldr	pc, [ip, #1796]!	; 0x704

00011924 <ftell@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #94208	; 0x17000
   1192c:	ldr	pc, [ip, #1788]!	; 0x6fc

00011930 <fwrite@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #94208	; 0x17000
   11938:	ldr	pc, [ip, #1780]!	; 0x6f4

0001193c <strcpy@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #94208	; 0x17000
   11944:	ldr	pc, [ip, #1772]!	; 0x6ec

00011948 <fread@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #94208	; 0x17000
   11950:	ldr	pc, [ip, #1764]!	; 0x6e4

00011954 <getenv@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #94208	; 0x17000
   1195c:	ldr	pc, [ip, #1756]!	; 0x6dc

00011960 <malloc@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #94208	; 0x17000
   11968:	ldr	pc, [ip, #1748]!	; 0x6d4

0001196c <__libc_start_main@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #94208	; 0x17000
   11974:	ldr	pc, [ip, #1740]!	; 0x6cc

00011978 <__fxstat@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #94208	; 0x17000
   11980:	ldr	pc, [ip, #1732]!	; 0x6c4

00011984 <__gmon_start__@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #94208	; 0x17000
   1198c:	ldr	pc, [ip, #1724]!	; 0x6bc

00011990 <open@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #94208	; 0x17000
   11998:	ldr	pc, [ip, #1716]!	; 0x6b4

0001199c <getpid@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #94208	; 0x17000
   119a4:	ldr	pc, [ip, #1708]!	; 0x6ac

000119a8 <exit@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #94208	; 0x17000
   119b0:	ldr	pc, [ip, #1700]!	; 0x6a4

000119b4 <strlen@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #94208	; 0x17000
   119bc:	ldr	pc, [ip, #1692]!	; 0x69c

000119c0 <getopt@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #94208	; 0x17000
   119c8:	ldr	pc, [ip, #1684]!	; 0x694

000119cc <fprintf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #94208	; 0x17000
   119d4:	ldr	pc, [ip, #1676]!	; 0x68c

000119d8 <__errno_location@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #94208	; 0x17000
   119e0:	ldr	pc, [ip, #1668]!	; 0x684

000119e4 <__cxa_atexit@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #94208	; 0x17000
   119ec:	ldr	pc, [ip, #1660]!	; 0x67c

000119f0 <mkdir@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #94208	; 0x17000
   119f8:	ldr	pc, [ip, #1652]!	; 0x674

000119fc <fcntl@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #94208	; 0x17000
   11a04:	ldr	pc, [ip, #1644]!	; 0x66c

00011a08 <memset@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #94208	; 0x17000
   11a10:	ldr	pc, [ip, #1636]!	; 0x664

00011a14 <strncpy@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #94208	; 0x17000
   11a1c:	ldr	pc, [ip, #1628]!	; 0x65c

00011a20 <access@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #94208	; 0x17000
   11a28:	ldr	pc, [ip, #1620]!	; 0x654

00011a2c <fclose@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #94208	; 0x17000
   11a34:	ldr	pc, [ip, #1612]!	; 0x64c

00011a38 <strnlen@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #94208	; 0x17000
   11a40:	ldr	pc, [ip, #1604]!	; 0x644

00011a44 <vfprintf@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #94208	; 0x17000
   11a4c:	ldr	pc, [ip, #1596]!	; 0x63c

00011a50 <fputc@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #94208	; 0x17000
   11a58:	ldr	pc, [ip, #1588]!	; 0x634

00011a5c <atoi@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #94208	; 0x17000
   11a64:	ldr	pc, [ip, #1580]!	; 0x62c

00011a68 <fseek@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #94208	; 0x17000
   11a70:	ldr	pc, [ip, #1572]!	; 0x624

00011a74 <strncmp@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #94208	; 0x17000
   11a7c:	ldr	pc, [ip, #1564]!	; 0x61c

00011a80 <abort@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #94208	; 0x17000
   11a88:	ldr	pc, [ip, #1556]!	; 0x614

00011a8c <close@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #94208	; 0x17000
   11a94:	ldr	pc, [ip, #1548]!	; 0x60c

Disassembly of section .text:

00011a98 <main@@Base>:
   11a98:	ldr	ip, [pc, #336]	; 11bf0 <main@@Base+0x158>
   11a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11aa0:	add	ip, pc, ip
   11aa4:	ldr	r7, [pc, #328]	; 11bf4 <main@@Base+0x15c>
   11aa8:	ldrd	r2, [ip, #192]	; 0xc0
   11aac:	ldr	r4, [pc, #324]	; 11bf8 <main@@Base+0x160>
   11ab0:	ldr	r9, [pc, #324]	; 11bfc <main@@Base+0x164>
   11ab4:	adds	r2, r2, #1
   11ab8:	adc	r3, r3, #0
   11abc:	mov	r6, r0
   11ac0:	mov	r5, r1
   11ac4:	mov	r8, #0
   11ac8:	add	r7, pc, r7
   11acc:	add	r4, pc, r4
   11ad0:	add	r9, pc, r9
   11ad4:	strd	r2, [ip, #192]	; 0xc0
   11ad8:	mov	r2, r7
   11adc:	mov	r1, r5
   11ae0:	mov	r0, r6
   11ae4:	bl	119c0 <getopt@plt>
   11ae8:	cmn	r0, #1
   11aec:	beq	11b28 <main@@Base+0x90>
   11af0:	ldrd	r2, [r4, #208]	; 0xd0
   11af4:	adds	r2, r2, #1
   11af8:	adc	r3, r3, #0
   11afc:	cmp	r0, #111	; 0x6f
   11b00:	strd	r2, [r4, #208]	; 0xd0
   11b04:	bne	11ad8 <main@@Base+0x40>
   11b08:	ldrd	r2, [r4, #200]	; 0xc8
   11b0c:	ldr	r1, [pc, #236]	; 11c00 <main@@Base+0x168>
   11b10:	adds	r2, r2, #1
   11b14:	ldr	r1, [r9, r1]
   11b18:	adc	r3, r3, #0
   11b1c:	ldr	r8, [r1]
   11b20:	strd	r2, [r4, #200]	; 0xc8
   11b24:	b	11ad8 <main@@Base+0x40>
   11b28:	ldr	r3, [pc, #212]	; 11c04 <main@@Base+0x16c>
   11b2c:	ldr	r3, [r9, r3]
   11b30:	ldr	r3, [r3]
   11b34:	cmp	r6, r3
   11b38:	ble	11ba0 <main@@Base+0x108>
   11b3c:	ldr	ip, [pc, #196]	; 11c08 <main@@Base+0x170>
   11b40:	ldr	r0, [r5, r3, lsl #2]
   11b44:	add	ip, pc, ip
   11b48:	ldrd	r2, [ip, #216]	; 0xd8
   11b4c:	adds	r2, r2, #1
   11b50:	adc	r3, r3, #0
   11b54:	cmp	r8, #0
   11b58:	strd	r2, [ip, #216]	; 0xd8
   11b5c:	movne	r1, r8
   11b60:	beq	11b84 <main@@Base+0xec>
   11b64:	bl	11fec <my_main@@Base>
   11b68:	ldr	r1, [pc, #156]	; 11c0c <main@@Base+0x174>
   11b6c:	add	r1, pc, r1
   11b70:	ldrd	r2, [r1, #240]	; 0xf0
   11b74:	adds	r2, r2, #1
   11b78:	adc	r3, r3, #0
   11b7c:	strd	r2, [r1, #240]	; 0xf0
   11b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b84:	ldrd	r2, [ip, #232]	; 0xe8
   11b88:	ldr	r1, [pc, #128]	; 11c10 <main@@Base+0x178>
   11b8c:	adds	r2, r2, #1
   11b90:	adc	r3, r3, #0
   11b94:	add	r1, pc, r1
   11b98:	strd	r2, [ip, #232]	; 0xe8
   11b9c:	b	11b64 <main@@Base+0xcc>
   11ba0:	ldr	r6, [pc, #108]	; 11c14 <main@@Base+0x17c>
   11ba4:	ldr	r3, [pc, #108]	; 11c18 <main@@Base+0x180>
   11ba8:	add	r6, pc, r6
   11bac:	ldr	r0, [pc, #104]	; 11c1c <main@@Base+0x184>
   11bb0:	ldrd	r4, [r6, #224]	; 0xe0
   11bb4:	mov	r2, #45	; 0x2d
   11bb8:	mov	r1, #1
   11bbc:	adds	r4, r4, #1
   11bc0:	adc	r5, r5, #0
   11bc4:	add	r0, pc, r0
   11bc8:	strd	r4, [r6, #224]	; 0xe0
   11bcc:	ldr	r3, [r9, r3]
   11bd0:	ldr	r3, [r3]
   11bd4:	bl	11930 <fwrite@plt>
   11bd8:	ldrd	r2, [r6, #248]	; 0xf8
   11bdc:	mov	r0, #1
   11be0:	adds	r2, r2, #1
   11be4:	adc	r3, r3, #0
   11be8:	strd	r2, [r6, #248]	; 0xf8
   11bec:	bl	119a8 <exit@plt>
   11bf0:	andeq	r8, r1, r8, lsl r0
   11bf4:	muleq	r0, ip, r0
   11bf8:	andeq	r7, r1, ip, ror #31
   11bfc:	andeq	r7, r1, r8, lsr #10
   11c00:	strheq	r0, [r0], -r8
   11c04:	andeq	r0, r0, r4, lsr #1
   11c08:	andeq	r7, r1, r4, ror pc
   11c0c:	andeq	r7, r1, ip, asr #30
   11c10:	andeq	r5, r0, ip, asr #31
   11c14:	andeq	r7, r1, r0, lsl pc
   11c18:	andeq	r0, r0, r8, lsr #1
   11c1c:	andeq	r5, r0, r4, lsr #31
   11c20:	ldr	r0, [pc, #4]	; 11c2c <main@@Base+0x194>
   11c24:	add	r0, pc, r0
   11c28:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c2c:	muleq	r1, r8, r4
   11c30:	ldr	r0, [pc, #4]	; 11c3c <main@@Base+0x1a4>
   11c34:	add	r0, pc, r0
   11c38:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c3c:	andeq	r7, r1, ip, lsl r5
   11c40:	ldr	r0, [pc, #4]	; 11c4c <main@@Base+0x1b4>
   11c44:	add	r0, pc, r0
   11c48:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c4c:	andeq	r7, r1, r4, lsr #16
   11c50:	ldr	r0, [pc, #4]	; 11c5c <main@@Base+0x1c4>
   11c54:	add	r0, pc, r0
   11c58:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c5c:	andeq	r7, r1, r4, lsr r9
   11c60:	ldr	r0, [pc, #4]	; 11c6c <main@@Base+0x1d4>
   11c64:	add	r0, pc, r0
   11c68:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c6c:	andeq	r7, r1, r4, lsr #22
   11c70:	ldr	r0, [pc, #4]	; 11c7c <main@@Base+0x1e4>
   11c74:	add	r0, pc, r0
   11c78:	b	17724 <__gcov_sort_n_vals@@Base+0x458>
   11c7c:	andeq	r7, r1, r8, lsl #25

00011c80 <_start@@Base>:
   11c80:	mov	fp, #0
   11c84:	mov	lr, #0
   11c88:	pop	{r1}		; (ldr r1, [sp], #4)
   11c8c:	mov	r2, sp
   11c90:	push	{r2}		; (str r2, [sp, #-4]!)
   11c94:	push	{r0}		; (str r0, [sp, #-4]!)
   11c98:	ldr	ip, [pc, #16]	; 11cb0 <_start@@Base+0x30>
   11c9c:	push	{ip}		; (str ip, [sp, #-4]!)
   11ca0:	ldr	r0, [pc, #12]	; 11cb4 <_start@@Base+0x34>
   11ca4:	ldr	r3, [pc, #12]	; 11cb8 <_start@@Base+0x38>
   11ca8:	bl	1196c <__libc_start_main@plt>
   11cac:	bl	11a80 <abort@plt>
   11cb0:			; <UNDEFINED> instruction: 0x00017ab0
   11cb4:	muleq	r1, r8, sl
   11cb8:	andeq	r7, r1, r0, asr sl
   11cbc:	ldr	r3, [pc, #20]	; 11cd8 <_start@@Base+0x58>
   11cc0:	ldr	r2, [pc, #20]	; 11cdc <_start@@Base+0x5c>
   11cc4:	add	r3, pc, r3
   11cc8:	ldr	r2, [r3, r2]
   11ccc:	cmp	r2, #0
   11cd0:	bxeq	lr
   11cd4:	b	11984 <__gmon_start__@plt>
   11cd8:	andeq	r7, r1, r4, lsr r3
   11cdc:	andeq	r0, r0, ip, lsr #1
   11ce0:	ldr	r3, [pc, #28]	; 11d04 <_start@@Base+0x84>
   11ce4:	ldr	r0, [pc, #28]	; 11d08 <_start@@Base+0x88>
   11ce8:	sub	r3, r3, r0
   11cec:	cmp	r3, #6
   11cf0:	bxls	lr
   11cf4:	ldr	r3, [pc, #16]	; 11d0c <_start@@Base+0x8c>
   11cf8:	cmp	r3, #0
   11cfc:	bxeq	lr
   11d00:	bx	r3
   11d04:			; <UNDEFINED> instruction: 0x00029abb
   11d08:			; <UNDEFINED> instruction: 0x00029ab8
   11d0c:	andeq	r0, r0, r0
   11d10:	ldr	r1, [pc, #36]	; 11d3c <_start@@Base+0xbc>
   11d14:	ldr	r0, [pc, #36]	; 11d40 <_start@@Base+0xc0>
   11d18:	sub	r1, r1, r0
   11d1c:	asr	r1, r1, #2
   11d20:	add	r1, r1, r1, lsr #31
   11d24:	asrs	r1, r1, #1
   11d28:	bxeq	lr
   11d2c:	ldr	r3, [pc, #16]	; 11d44 <_start@@Base+0xc4>
   11d30:	cmp	r3, #0
   11d34:	bxeq	lr
   11d38:	bx	r3
   11d3c:			; <UNDEFINED> instruction: 0x00029ab8
   11d40:			; <UNDEFINED> instruction: 0x00029ab8
   11d44:	andeq	r0, r0, r0
   11d48:	push	{r4, lr}
   11d4c:	ldr	r4, [pc, #24]	; 11d6c <_start@@Base+0xec>
   11d50:	ldrb	r3, [r4]
   11d54:	cmp	r3, #0
   11d58:	popne	{r4, pc}
   11d5c:	bl	11ce0 <_start@@Base+0x60>
   11d60:	mov	r3, #1
   11d64:	strb	r3, [r4]
   11d68:	pop	{r4, pc}
   11d6c:			; <UNDEFINED> instruction: 0x00029ab8
   11d70:	ldr	r0, [pc, #40]	; 11da0 <_start@@Base+0x120>
   11d74:	ldr	r3, [r0]
   11d78:	cmp	r3, #0
   11d7c:	bne	11d84 <_start@@Base+0x104>
   11d80:	b	11d10 <_start@@Base+0x90>
   11d84:	ldr	r3, [pc, #24]	; 11da4 <_start@@Base+0x124>
   11d88:	cmp	r3, #0
   11d8c:	beq	11d80 <_start@@Base+0x100>
   11d90:	push	{r4, lr}
   11d94:	blx	r3
   11d98:	pop	{r4, lr}
   11d9c:	b	11d10 <_start@@Base+0x90>
   11da0:	andeq	r8, r2, r4, lsl pc
   11da4:	andeq	r0, r0, r0

00011da8 <load_file@@Base>:
   11da8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dac:	mov	r8, r0
   11db0:	ldr	r4, [pc, #532]	; 11fcc <load_file@@Base+0x224>
   11db4:	ldr	r1, [pc, #532]	; 11fd0 <load_file@@Base+0x228>
   11db8:	add	r4, pc, r4
   11dbc:	add	r1, pc, r1
   11dc0:	ldrd	r2, [r4]
   11dc4:	ldr	r5, [pc, #520]	; 11fd4 <load_file@@Base+0x22c>
   11dc8:	adds	r2, r2, #1
   11dcc:	adc	r3, r3, #0
   11dd0:	add	r5, pc, r5
   11dd4:	strd	r2, [r4]
   11dd8:	bl	11900 <fopen@plt>
   11ddc:	ldrd	r2, [r4, #8]
   11de0:	adds	r2, r2, #1
   11de4:	adc	r3, r3, #0
   11de8:	strd	r2, [r4, #8]
   11dec:	subs	r9, r0, #0
   11df0:	beq	11ef0 <load_file@@Base+0x148>
   11df4:	ldrd	r6, [r4, #16]
   11df8:	mov	r2, #2
   11dfc:	mov	r1, #0
   11e00:	adds	r6, r6, #1
   11e04:	adc	r7, r7, #0
   11e08:	strd	r6, [r4, #16]
   11e0c:	bl	11a68 <fseek@plt>
   11e10:	ldrd	r2, [r4, #24]
   11e14:	adds	r2, r2, #1
   11e18:	adc	r3, r3, #0
   11e1c:	strd	r2, [r4, #24]
   11e20:	subs	r7, r0, #0
   11e24:	bne	11ec4 <load_file@@Base+0x11c>
   11e28:	ldrd	r2, [r4, #32]
   11e2c:	mov	r0, r9
   11e30:	adds	r2, r2, #1
   11e34:	adc	r3, r3, #0
   11e38:	strd	r2, [r4, #32]
   11e3c:	bl	11924 <ftell@plt>
   11e40:	cmn	r0, #1
   11e44:	mov	sl, r0
   11e48:	beq	11ef8 <load_file@@Base+0x150>
   11e4c:	ldrd	r2, [r4, #48]	; 0x30
   11e50:	add	r0, r0, #1
   11e54:	adds	r2, r2, #1
   11e58:	adc	r3, r3, #0
   11e5c:	strd	r2, [r4, #48]	; 0x30
   11e60:	bl	11960 <malloc@plt>
   11e64:	mov	r2, r7
   11e68:	mov	r1, r7
   11e6c:	mov	r6, r0
   11e70:	mov	r0, r9
   11e74:	bl	11a68 <fseek@plt>
   11e78:	subs	r7, r0, #0
   11e7c:	bne	11f40 <load_file@@Base+0x198>
   11e80:	ldrd	r0, [r4, #72]	; 0x48
   11e84:	mov	r2, sl
   11e88:	mov	r3, r9
   11e8c:	adds	sl, r0, #1
   11e90:	adc	fp, r1, #0
   11e94:	mov	r0, r6
   11e98:	mov	r1, #1
   11e9c:	strd	sl, [r4, #72]	; 0x48
   11ea0:	bl	11948 <fread@plt>
   11ea4:	cmp	r0, #0
   11ea8:	beq	11f88 <load_file@@Base+0x1e0>
   11eac:	ldrd	r2, [r4, #104]	; 0x68
   11eb0:	strb	r7, [r6, r0]
   11eb4:	adds	r2, r2, #1
   11eb8:	adc	r3, r3, #0
   11ebc:	strd	r2, [r4, #104]	; 0x68
   11ec0:	b	11ec8 <load_file@@Base+0x120>
   11ec4:	mov	r6, #0
   11ec8:	mov	r0, r9
   11ecc:	bl	11a2c <fclose@plt>
   11ed0:	ldr	r1, [pc, #256]	; 11fd8 <load_file@@Base+0x230>
   11ed4:	add	r1, pc, r1
   11ed8:	ldrd	r2, [r1, #112]	; 0x70
   11edc:	adds	r2, r2, #1
   11ee0:	adc	r3, r3, #0
   11ee4:	strd	r2, [r1, #112]	; 0x70
   11ee8:	mov	r0, r6
   11eec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef0:	mov	r6, r9
   11ef4:	b	11ee8 <load_file@@Base+0x140>
   11ef8:	ldrd	r6, [r4, #40]	; 0x28
   11efc:	ldr	r3, [pc, #216]	; 11fdc <load_file@@Base+0x234>
   11f00:	ldr	r0, [pc, #216]	; 11fe0 <load_file@@Base+0x238>
   11f04:	adds	r6, r6, #1
   11f08:	adc	r7, r7, #0
   11f0c:	mov	r2, #51	; 0x33
   11f10:	strd	r6, [r4, #40]	; 0x28
   11f14:	ldr	r3, [r5, r3]
   11f18:	mov	r1, #1
   11f1c:	add	r0, pc, r0
   11f20:	ldr	r3, [r3]
   11f24:	bl	11930 <fwrite@plt>
   11f28:	ldrd	r2, [r4, #56]	; 0x38
   11f2c:	mov	r0, #1
   11f30:	adds	r2, r2, #1
   11f34:	adc	r3, r3, #0
   11f38:	strd	r2, [r4, #56]	; 0x38
   11f3c:	bl	119a8 <exit@plt>
   11f40:	ldrd	r6, [r4, #64]	; 0x40
   11f44:	ldr	r3, [pc, #144]	; 11fdc <load_file@@Base+0x234>
   11f48:	ldr	r0, [pc, #148]	; 11fe4 <load_file@@Base+0x23c>
   11f4c:	adds	r6, r6, #1
   11f50:	adc	r7, r7, #0
   11f54:	mov	r2, #49	; 0x31
   11f58:	strd	r6, [r4, #64]	; 0x40
   11f5c:	ldr	r3, [r5, r3]
   11f60:	mov	r1, #1
   11f64:	add	r0, pc, r0
   11f68:	ldr	r3, [r3]
   11f6c:	bl	11930 <fwrite@plt>
   11f70:	ldrd	r2, [r4, #80]	; 0x50
   11f74:	mov	r0, #1
   11f78:	adds	r2, r2, #1
   11f7c:	adc	r3, r3, #0
   11f80:	strd	r2, [r4, #80]	; 0x50
   11f84:	bl	119a8 <exit@plt>
   11f88:	ldrd	r6, [r4, #88]	; 0x58
   11f8c:	ldr	r3, [pc, #72]	; 11fdc <load_file@@Base+0x234>
   11f90:	ldr	r1, [pc, #80]	; 11fe8 <load_file@@Base+0x240>
   11f94:	adds	r6, r6, #1
   11f98:	adc	r7, r7, #0
   11f9c:	mov	r2, r8
   11fa0:	strd	r6, [r4, #88]	; 0x58
   11fa4:	ldr	r3, [r5, r3]
   11fa8:	add	r1, pc, r1
   11fac:	ldr	r0, [r3]
   11fb0:	bl	119cc <fprintf@plt>
   11fb4:	ldrd	r2, [r4, #96]	; 0x60
   11fb8:	mov	r0, #1
   11fbc:	adds	r2, r2, #1
   11fc0:	adc	r3, r3, #0
   11fc4:	strd	r2, [r4, #96]	; 0x60
   11fc8:	bl	119a8 <exit@plt>
   11fcc:	andeq	r7, r1, r0, lsl #26
   11fd0:	andeq	r6, r0, ip, lsl #9
   11fd4:	andeq	r7, r1, r8, lsr #4
   11fd8:	andeq	r7, r1, r4, ror #23
   11fdc:	andeq	r0, r0, r8, lsr #1
   11fe0:	andeq	r5, r0, r4, asr #23
   11fe4:			; <UNDEFINED> instruction: 0x00005bb0
   11fe8:	andeq	r5, r0, r0, lsr #23

00011fec <my_main@@Base>:
   11fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff0:	sub	sp, sp, #36	; 0x24
   11ff4:	ldr	r4, [pc, #256]	; 120fc <my_main@@Base+0x110>
   11ff8:	mov	fp, r1
   11ffc:	add	r4, pc, r4
   12000:	add	r5, sp, #4
   12004:	ldrd	r2, [r4, #120]	; 0x78
   12008:	adds	r2, r2, #1
   1200c:	adc	r3, r3, #0
   12010:	strd	r2, [r4, #120]	; 0x78
   12014:	bl	11da8 <load_file@@Base>
   12018:	ldrd	r6, [r4, #128]	; 0x80
   1201c:	adds	r6, r6, #1
   12020:	adc	r7, r7, #0
   12024:	strd	r6, [r4, #128]	; 0x80
   12028:	add	r7, sp, #16
   1202c:	mov	sl, r0
   12030:	mov	r1, r0
   12034:	mov	r0, r5
   12038:	bl	124f0 <init_lexer@@Base>
   1203c:	ldrd	r8, [r4, #136]	; 0x88
   12040:	mov	r1, r5
   12044:	mov	r0, sp
   12048:	adds	r8, r8, #1
   1204c:	adc	r9, r9, #0
   12050:	strd	r8, [r4, #136]	; 0x88
   12054:	bl	13f14 <init_grammar@@Base>
   12058:	ldrd	r8, [r4, #144]	; 0x90
   1205c:	mov	r1, sp
   12060:	mov	r2, fp
   12064:	adds	r8, r8, #1
   12068:	adc	r9, r9, #0
   1206c:	mov	r0, r7
   12070:	strd	r8, [r4, #144]	; 0x90
   12074:	bl	14c90 <init_generator@@Base>
   12078:	ldrd	r2, [r4, #152]	; 0x98
   1207c:	mov	r0, r7
   12080:	adds	r2, r2, #1
   12084:	adc	r3, r3, #0
   12088:	strd	r2, [r4, #152]	; 0x98
   1208c:	bl	15774 <generate_code@@Base>
   12090:	ldrd	r2, [r4, #160]	; 0xa0
   12094:	mov	r0, r7
   12098:	adds	r2, r2, #1
   1209c:	adc	r3, r3, #0
   120a0:	strd	r2, [r4, #160]	; 0xa0
   120a4:	bl	14cf0 <destroy_generator@@Base>
   120a8:	ldrd	r2, [r4, #168]	; 0xa8
   120ac:	mov	r0, sp
   120b0:	adds	r2, r2, #1
   120b4:	adc	r3, r3, #0
   120b8:	strd	r2, [r4, #168]	; 0xa8
   120bc:	bl	13f38 <destroy_grammar@@Base>
   120c0:	ldrd	r2, [r4, #176]	; 0xb0
   120c4:	mov	r0, r5
   120c8:	adds	r2, r2, #1
   120cc:	adc	r3, r3, #0
   120d0:	strd	r2, [r4, #176]	; 0xb0
   120d4:	bl	12540 <destroy_lexer@@Base>
   120d8:	ldrd	r2, [r4, #184]	; 0xb8
   120dc:	mov	r0, sl
   120e0:	adds	r2, r2, #1
   120e4:	adc	r3, r3, #0
   120e8:	strd	r2, [r4, #184]	; 0xb8
   120ec:	bl	1190c <free@plt>
   120f0:	mov	r0, #0
   120f4:	add	sp, sp, #36	; 0x24
   120f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120fc:			; <UNDEFINED> instruction: 0x00017abc

00012100 <init_token_int_type@@Base>:
   12100:	ldr	r1, [pc, #28]	; 12124 <init_token_int_type@@Base+0x24>
   12104:	mov	ip, #0
   12108:	add	r1, pc, r1
   1210c:	str	ip, [r0]
   12110:	ldrd	r2, [r1]
   12114:	adds	r2, r2, #1
   12118:	adc	r3, r3, #0
   1211c:	strd	r2, [r1]
   12120:	bx	lr
   12124:			; <UNDEFINED> instruction: 0x00017ab0

00012128 <init_token_int_value@@Base>:
   12128:	ldr	ip, [pc, #36]	; 12154 <init_token_int_value@@Base+0x2c>
   1212c:	push	{lr}		; (str lr, [sp, #-4]!)
   12130:	add	ip, pc, ip
   12134:	mov	lr, #1
   12138:	ldrd	r2, [ip, #8]
   1213c:	str	r1, [r0, #4]
   12140:	str	lr, [r0]
   12144:	adds	r2, r2, #1
   12148:	adc	r3, r3, #0
   1214c:	strd	r2, [ip, #8]
   12150:	pop	{pc}		; (ldr pc, [sp], #4)
   12154:	andeq	r7, r1, r8, lsl #21

00012158 <init_token_function@@Base>:
   12158:	ldr	ip, [pc, #36]	; 12184 <init_token_function@@Base+0x2c>
   1215c:	push	{lr}		; (str lr, [sp, #-4]!)
   12160:	add	ip, pc, ip
   12164:	mov	lr, #2
   12168:	ldrd	r2, [ip, #16]
   1216c:	str	r1, [r0, #4]
   12170:	str	lr, [r0]
   12174:	adds	r2, r2, #1
   12178:	adc	r3, r3, #0
   1217c:	strd	r2, [ip, #16]
   12180:	pop	{pc}		; (ldr pc, [sp], #4)
   12184:	andeq	r7, r1, r8, asr sl

00012188 <init_token_opar@@Base>:
   12188:	ldr	r1, [pc, #28]	; 121ac <init_token_opar@@Base+0x24>
   1218c:	mov	r3, #3
   12190:	add	r1, pc, r1
   12194:	str	r3, [r0]
   12198:	ldrd	r2, [r1, #24]
   1219c:	adds	r2, r2, #1
   121a0:	adc	r3, r3, #0
   121a4:	strd	r2, [r1, #24]
   121a8:	bx	lr
   121ac:	andeq	r7, r1, r8, lsr #20

000121b0 <init_token_cpar@@Base>:
   121b0:	ldr	r1, [pc, #28]	; 121d4 <init_token_cpar@@Base+0x24>
   121b4:	mov	r3, #4
   121b8:	add	r1, pc, r1
   121bc:	str	r3, [r0]
   121c0:	ldrd	r2, [r1, #32]
   121c4:	adds	r2, r2, #1
   121c8:	adc	r3, r3, #0
   121cc:	strd	r2, [r1, #32]
   121d0:	bx	lr
   121d4:	andeq	r7, r1, r0, lsl #20

000121d8 <init_token_obra@@Base>:
   121d8:	ldr	r1, [pc, #28]	; 121fc <init_token_obra@@Base+0x24>
   121dc:	mov	r3, #5
   121e0:	add	r1, pc, r1
   121e4:	str	r3, [r0]
   121e8:	ldrd	r2, [r1, #40]	; 0x28
   121ec:	adds	r2, r2, #1
   121f0:	adc	r3, r3, #0
   121f4:	strd	r2, [r1, #40]	; 0x28
   121f8:	bx	lr
   121fc:	ldrdeq	r7, [r1], -r8

00012200 <init_token_cbra@@Base>:
   12200:	ldr	r1, [pc, #28]	; 12224 <init_token_cbra@@Base+0x24>
   12204:	mov	r3, #6
   12208:	add	r1, pc, r1
   1220c:	str	r3, [r0]
   12210:	ldrd	r2, [r1, #48]	; 0x30
   12214:	adds	r2, r2, #1
   12218:	adc	r3, r3, #0
   1221c:	strd	r2, [r1, #48]	; 0x30
   12220:	bx	lr
   12224:			; <UNDEFINED> instruction: 0x000179b0

00012228 <init_token_return@@Base>:
   12228:	ldr	r1, [pc, #28]	; 1224c <init_token_return@@Base+0x24>
   1222c:	mov	r3, #7
   12230:	add	r1, pc, r1
   12234:	str	r3, [r0]
   12238:	ldrd	r2, [r1, #56]	; 0x38
   1223c:	adds	r2, r2, #1
   12240:	adc	r3, r3, #0
   12244:	strd	r2, [r1, #56]	; 0x38
   12248:	bx	lr
   1224c:	andeq	r7, r1, r8, lsl #19

00012250 <init_token_semicolon@@Base>:
   12250:	ldr	r1, [pc, #28]	; 12274 <init_token_semicolon@@Base+0x24>
   12254:	mov	r3, #8
   12258:	add	r1, pc, r1
   1225c:	str	r3, [r0]
   12260:	ldrd	r2, [r1, #64]	; 0x40
   12264:	adds	r2, r2, #1
   12268:	adc	r3, r3, #0
   1226c:	strd	r2, [r1, #64]	; 0x40
   12270:	bx	lr
   12274:	andeq	r7, r1, r0, ror #18

00012278 <init_token_eof@@Base>:
   12278:	ldr	r1, [pc, #28]	; 1229c <init_token_eof@@Base+0x24>
   1227c:	mov	r3, #9
   12280:	add	r1, pc, r1
   12284:	str	r3, [r0]
   12288:	ldrd	r2, [r1, #72]	; 0x48
   1228c:	adds	r2, r2, #1
   12290:	adc	r3, r3, #0
   12294:	strd	r2, [r1, #72]	; 0x48
   12298:	bx	lr
   1229c:	andeq	r7, r1, r8, lsr r9

000122a0 <init_token_if@@Base>:
   122a0:	ldr	r1, [pc, #28]	; 122c4 <init_token_if@@Base+0x24>
   122a4:	mov	r3, #10
   122a8:	add	r1, pc, r1
   122ac:	str	r3, [r0]
   122b0:	ldrd	r2, [r1, #80]	; 0x50
   122b4:	adds	r2, r2, #1
   122b8:	adc	r3, r3, #0
   122bc:	strd	r2, [r1, #80]	; 0x50
   122c0:	bx	lr
   122c4:	andeq	r7, r1, r0, lsl r9

000122c8 <init_token_else@@Base>:
   122c8:	ldr	r1, [pc, #28]	; 122ec <init_token_else@@Base+0x24>
   122cc:	mov	r3, #11
   122d0:	add	r1, pc, r1
   122d4:	str	r3, [r0]
   122d8:	ldrd	r2, [r1, #88]	; 0x58
   122dc:	adds	r2, r2, #1
   122e0:	adc	r3, r3, #0
   122e4:	strd	r2, [r1, #88]	; 0x58
   122e8:	bx	lr
   122ec:	andeq	r7, r1, r8, ror #17

000122f0 <init_token_boolean_op@@Base>:
   122f0:	ldr	ip, [pc, #36]	; 1231c <init_token_boolean_op@@Base+0x2c>
   122f4:	push	{lr}		; (str lr, [sp, #-4]!)
   122f8:	add	ip, pc, ip
   122fc:	mov	lr, #12
   12300:	ldrd	r2, [ip, #96]	; 0x60
   12304:	str	r1, [r0, #4]
   12308:	str	lr, [r0]
   1230c:	adds	r2, r2, #1
   12310:	adc	r3, r3, #0
   12314:	strd	r2, [ip, #96]	; 0x60
   12318:	pop	{pc}		; (ldr pc, [sp], #4)
   1231c:	andeq	r7, r1, r0, asr #17

00012320 <free_token_int_type@@Base>:
   12320:	ldr	r1, [pc, #20]	; 1233c <free_token_int_type@@Base+0x1c>
   12324:	add	r1, pc, r1
   12328:	ldrd	r2, [r1, #104]	; 0x68
   1232c:	adds	r2, r2, #1
   12330:	adc	r3, r3, #0
   12334:	strd	r2, [r1, #104]	; 0x68
   12338:	b	1190c <free@plt>
   1233c:	muleq	r1, r4, r8

00012340 <free_token_int_value@@Base>:
   12340:	ldr	r1, [pc, #20]	; 1235c <free_token_int_value@@Base+0x1c>
   12344:	add	r1, pc, r1
   12348:	ldrd	r2, [r1, #112]	; 0x70
   1234c:	adds	r2, r2, #1
   12350:	adc	r3, r3, #0
   12354:	strd	r2, [r1, #112]	; 0x70
   12358:	b	1190c <free@plt>
   1235c:	andeq	r7, r1, r4, ror r8

00012360 <free_token_function@@Base>:
   12360:	ldr	r1, [pc, #20]	; 1237c <free_token_function@@Base+0x1c>
   12364:	add	r1, pc, r1
   12368:	ldrd	r2, [r1, #120]	; 0x78
   1236c:	adds	r2, r2, #1
   12370:	adc	r3, r3, #0
   12374:	strd	r2, [r1, #120]	; 0x78
   12378:	b	1190c <free@plt>
   1237c:	andeq	r7, r1, r4, asr r8

00012380 <free_token_opar@@Base>:
   12380:	ldr	r1, [pc, #20]	; 1239c <free_token_opar@@Base+0x1c>
   12384:	add	r1, pc, r1
   12388:	ldrd	r2, [r1, #128]	; 0x80
   1238c:	adds	r2, r2, #1
   12390:	adc	r3, r3, #0
   12394:	strd	r2, [r1, #128]	; 0x80
   12398:	b	1190c <free@plt>
   1239c:	andeq	r7, r1, r4, lsr r8

000123a0 <free_token_cpar@@Base>:
   123a0:	ldr	r1, [pc, #20]	; 123bc <free_token_cpar@@Base+0x1c>
   123a4:	add	r1, pc, r1
   123a8:	ldrd	r2, [r1, #136]	; 0x88
   123ac:	adds	r2, r2, #1
   123b0:	adc	r3, r3, #0
   123b4:	strd	r2, [r1, #136]	; 0x88
   123b8:	b	1190c <free@plt>
   123bc:	andeq	r7, r1, r4, lsl r8

000123c0 <free_token_obra@@Base>:
   123c0:	ldr	r1, [pc, #20]	; 123dc <free_token_obra@@Base+0x1c>
   123c4:	add	r1, pc, r1
   123c8:	ldrd	r2, [r1, #144]	; 0x90
   123cc:	adds	r2, r2, #1
   123d0:	adc	r3, r3, #0
   123d4:	strd	r2, [r1, #144]	; 0x90
   123d8:	b	1190c <free@plt>
   123dc:	strdeq	r7, [r1], -r4

000123e0 <free_token_cbra@@Base>:
   123e0:	ldr	r1, [pc, #20]	; 123fc <free_token_cbra@@Base+0x1c>
   123e4:	add	r1, pc, r1
   123e8:	ldrd	r2, [r1, #152]	; 0x98
   123ec:	adds	r2, r2, #1
   123f0:	adc	r3, r3, #0
   123f4:	strd	r2, [r1, #152]	; 0x98
   123f8:	b	1190c <free@plt>
   123fc:	ldrdeq	r7, [r1], -r4

00012400 <free_token_return@@Base>:
   12400:	ldr	r1, [pc, #20]	; 1241c <free_token_return@@Base+0x1c>
   12404:	add	r1, pc, r1
   12408:	ldrd	r2, [r1, #160]	; 0xa0
   1240c:	adds	r2, r2, #1
   12410:	adc	r3, r3, #0
   12414:	strd	r2, [r1, #160]	; 0xa0
   12418:	b	1190c <free@plt>
   1241c:			; <UNDEFINED> instruction: 0x000177b4

00012420 <free_token_semicolon@@Base>:
   12420:	ldr	r1, [pc, #20]	; 1243c <free_token_semicolon@@Base+0x1c>
   12424:	add	r1, pc, r1
   12428:	ldrd	r2, [r1, #168]	; 0xa8
   1242c:	adds	r2, r2, #1
   12430:	adc	r3, r3, #0
   12434:	strd	r2, [r1, #168]	; 0xa8
   12438:	b	1190c <free@plt>
   1243c:	muleq	r1, r4, r7

00012440 <free_token_eof@@Base>:
   12440:	ldr	r1, [pc, #20]	; 1245c <free_token_eof@@Base+0x1c>
   12444:	add	r1, pc, r1
   12448:	ldrd	r2, [r1, #176]	; 0xb0
   1244c:	adds	r2, r2, #1
   12450:	adc	r3, r3, #0
   12454:	strd	r2, [r1, #176]	; 0xb0
   12458:	b	1190c <free@plt>
   1245c:	andeq	r7, r1, r4, ror r7

00012460 <free_token_if@@Base>:
   12460:	ldr	r1, [pc, #20]	; 1247c <free_token_if@@Base+0x1c>
   12464:	add	r1, pc, r1
   12468:	ldrd	r2, [r1, #184]	; 0xb8
   1246c:	adds	r2, r2, #1
   12470:	adc	r3, r3, #0
   12474:	strd	r2, [r1, #184]	; 0xb8
   12478:	b	1190c <free@plt>
   1247c:	andeq	r7, r1, r4, asr r7

00012480 <free_token_else@@Base>:
   12480:	ldr	r1, [pc, #20]	; 1249c <free_token_else@@Base+0x1c>
   12484:	add	r1, pc, r1
   12488:	ldrd	r2, [r1, #192]	; 0xc0
   1248c:	adds	r2, r2, #1
   12490:	adc	r3, r3, #0
   12494:	strd	r2, [r1, #192]	; 0xc0
   12498:	b	1190c <free@plt>
   1249c:	andeq	r7, r1, r4, lsr r7

000124a0 <free_token_boolean_op@@Base>:
   124a0:	push	{r4, r5, r6, lr}
   124a4:	mov	r5, r0
   124a8:	ldr	r4, [pc, #60]	; 124ec <free_token_boolean_op@@Base+0x4c>
   124ac:	ldr	r0, [r0, #4]
   124b0:	add	r4, pc, r4
   124b4:	ldrd	r2, [r4, #200]	; 0xc8
   124b8:	adds	r2, r2, #1
   124bc:	adc	r3, r3, #0
   124c0:	cmp	r0, #0
   124c4:	strd	r2, [r4, #200]	; 0xc8
   124c8:	beq	124e0 <free_token_boolean_op@@Base+0x40>
   124cc:	bl	1190c <free@plt>
   124d0:	ldrd	r2, [r4, #208]	; 0xd0
   124d4:	adds	r2, r2, #1
   124d8:	adc	r3, r3, #0
   124dc:	strd	r2, [r4, #208]	; 0xd0
   124e0:	mov	r0, r5
   124e4:	pop	{r4, r5, r6, lr}
   124e8:	b	1190c <free@plt>
   124ec:	andeq	r7, r1, r8, lsl #14

000124f0 <init_lexer@@Base>:
   124f0:	ldr	ip, [pc, #36]	; 1251c <init_lexer@@Base+0x2c>
   124f4:	push	{lr}		; (str lr, [sp, #-4]!)
   124f8:	add	ip, pc, ip
   124fc:	mov	lr, #0
   12500:	ldrd	r2, [ip]
   12504:	stm	r0, {r1, lr}
   12508:	str	lr, [r0, #8]
   1250c:	adds	r2, r2, #1
   12510:	adc	r3, r3, #0
   12514:	strd	r2, [ip]
   12518:	pop	{pc}		; (ldr pc, [sp], #4)
   1251c:	muleq	r1, r8, r7

00012520 <free_stack_base@@Base>:
   12520:	ldr	r1, [pc, #20]	; 1253c <free_stack_base@@Base+0x1c>
   12524:	add	r1, pc, r1
   12528:	ldrd	r2, [r1, #8]
   1252c:	adds	r2, r2, #1
   12530:	adc	r3, r3, #0
   12534:	strd	r2, [r1, #8]
   12538:	b	1190c <free@plt>
   1253c:	andeq	r7, r1, ip, ror #14

00012540 <destroy_lexer@@Base>:
   12540:	push	{r4, lr}
   12544:	ldr	r4, [pc, #68]	; 12590 <destroy_lexer@@Base+0x50>
   12548:	ldr	r0, [r0, #4]
   1254c:	add	r4, pc, r4
   12550:	ldrd	r2, [r4, #16]
   12554:	adds	r2, r2, #1
   12558:	adc	r3, r3, #0
   1255c:	cmp	r0, #0
   12560:	strd	r2, [r4, #16]
   12564:	popeq	{r4, pc}
   12568:	ldrd	r2, [r4, #24]
   1256c:	adds	r2, r2, #1
   12570:	adc	r3, r3, #0
   12574:	strd	r2, [r4, #24]
   12578:	bl	12520 <free_stack_base@@Base>
   1257c:	ldrd	r2, [r4, #32]
   12580:	adds	r2, r2, #1
   12584:	adc	r3, r3, #0
   12588:	strd	r2, [r4, #32]
   1258c:	pop	{r4, pc}
   12590:	andeq	r7, r1, r4, asr #14

00012594 <push_back@@Base>:
   12594:	ldr	ip, [pc, #52]	; 125d0 <push_back@@Base+0x3c>
   12598:	push	{r4, r5, r6, lr}
   1259c:	add	ip, pc, ip
   125a0:	mov	r4, r0
   125a4:	ldrd	r2, [ip, #40]	; 0x28
   125a8:	mov	r0, #8
   125ac:	mov	r5, r1
   125b0:	adds	r2, r2, #1
   125b4:	adc	r3, r3, #0
   125b8:	strd	r2, [ip, #40]	; 0x28
   125bc:	bl	11960 <malloc@plt>
   125c0:	ldr	r3, [r4, #4]
   125c4:	str	r0, [r4, #4]
   125c8:	stm	r0, {r3, r5}
   125cc:	pop	{r4, r5, r6, pc}
   125d0:	strdeq	r7, [r1], -r4

000125d4 <get_char@@Base>:
   125d4:	ldr	ip, [pc, #44]	; 12608 <get_char@@Base+0x34>
   125d8:	push	{r4, lr}
   125dc:	add	ip, pc, ip
   125e0:	ldr	r1, [r0, #8]
   125e4:	ldrd	r2, [ip, #48]	; 0x30
   125e8:	ldr	lr, [r0]
   125ec:	add	r4, r1, #1
   125f0:	adds	r2, r2, #1
   125f4:	adc	r3, r3, #0
   125f8:	str	r4, [r0, #8]
   125fc:	strd	r2, [ip, #48]	; 0x30
   12600:	ldrb	r0, [lr, r1]
   12604:	pop	{r4, pc}
   12608:			; <UNDEFINED> instruction: 0x000176b4

0001260c <push_back_chars@@Base>:
   1260c:	ldr	r3, [r0, #8]
   12610:	ldr	ip, [pc, #128]	; 12698 <push_back_chars@@Base+0x8c>
   12614:	cmp	r3, r1
   12618:	add	ip, pc, ip
   1261c:	bcc	12644 <push_back_chars@@Base+0x38>
   12620:	ldr	ip, [pc, #116]	; 1269c <push_back_chars@@Base+0x90>
   12624:	sub	r3, r3, r1
   12628:	add	ip, pc, ip
   1262c:	str	r3, [r0, #8]
   12630:	ldrd	r2, [ip, #56]	; 0x38
   12634:	adds	r2, r2, #1
   12638:	adc	r3, r3, #0
   1263c:	strd	r2, [ip, #56]	; 0x38
   12640:	bx	lr
   12644:	push	{r4, r5, r6, lr}
   12648:	mov	r2, #32
   1264c:	ldr	r6, [pc, #76]	; 126a0 <push_back_chars@@Base+0x94>
   12650:	ldr	r3, [pc, #76]	; 126a4 <push_back_chars@@Base+0x98>
   12654:	add	r6, pc, r6
   12658:	ldr	r0, [pc, #72]	; 126a8 <push_back_chars@@Base+0x9c>
   1265c:	ldrd	r4, [r6, #64]	; 0x40
   12660:	mov	r1, #1
   12664:	add	r0, pc, r0
   12668:	adds	r4, r4, #1
   1266c:	adc	r5, r5, #0
   12670:	strd	r4, [r6, #64]	; 0x40
   12674:	ldr	r3, [ip, r3]
   12678:	ldr	r3, [r3]
   1267c:	bl	11930 <fwrite@plt>
   12680:	ldrd	r2, [r6, #72]	; 0x48
   12684:	mov	r0, #1
   12688:	adds	r2, r2, #1
   1268c:	adc	r3, r3, #0
   12690:	strd	r2, [r6, #72]	; 0x48
   12694:	bl	119a8 <exit@plt>
   12698:	andeq	r6, r1, r0, ror #19
   1269c:	andeq	r7, r1, r8, ror #12
   126a0:	andeq	r7, r1, ip, lsr r6
   126a4:	andeq	r0, r0, r8, lsr #1
   126a8:	andeq	r5, r0, r4, lsl #12

000126ac <push_back_one_char@@Base>:
   126ac:	push	{r4, lr}
   126b0:	mov	r1, #1
   126b4:	ldr	r4, [pc, #40]	; 126e4 <push_back_one_char@@Base+0x38>
   126b8:	add	r4, pc, r4
   126bc:	ldrd	r2, [r4, #80]	; 0x50
   126c0:	adds	r2, r2, #1
   126c4:	adc	r3, r3, #0
   126c8:	strd	r2, [r4, #80]	; 0x50
   126cc:	bl	1260c <push_back_chars@@Base>
   126d0:	ldrd	r2, [r4, #88]	; 0x58
   126d4:	adds	r2, r2, #1
   126d8:	adc	r3, r3, #0
   126dc:	strd	r2, [r4, #88]	; 0x58
   126e0:	pop	{r4, pc}
   126e4:	ldrdeq	r7, [r1], -r8

000126e8 <next@@Base>:
   126e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ec:	mov	r7, r0
   126f0:	ldr	r8, [r0, #4]
   126f4:	ldr	r4, [pc, #3320]	; 133f4 <next@@Base+0xd0c>
   126f8:	cmp	r8, #0
   126fc:	add	r4, pc, r4
   12700:	sub	sp, sp, #532	; 0x214
   12704:	beq	12758 <next@@Base+0x70>
   12708:	ldr	r5, [pc, #3304]	; 133f8 <next@@Base+0xd10>
   1270c:	ldr	r0, [r8]
   12710:	add	r5, pc, r5
   12714:	mov	r1, #0
   12718:	ldrd	r2, [r5, #96]	; 0x60
   1271c:	str	r0, [r7, #4]
   12720:	ldr	r4, [r8, #4]
   12724:	adds	r2, r2, #1
   12728:	adc	r3, r3, #0
   1272c:	mov	r0, r8
   12730:	str	r1, [r8, #4]
   12734:	strd	r2, [r5, #96]	; 0x60
   12738:	bl	12520 <free_stack_base@@Base>
   1273c:	ldrd	r2, [r5, #112]	; 0x70
   12740:	mov	r0, r4
   12744:	adds	r2, r2, #1
   12748:	adc	r3, r3, #0
   1274c:	strd	r2, [r5, #112]	; 0x70
   12750:	add	sp, sp, #532	; 0x214
   12754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12758:	ldr	r1, [pc, #3228]	; 133fc <next@@Base+0xd14>
   1275c:	ldr	r9, [pc, #3228]	; 13400 <next@@Base+0xd18>
   12760:	add	r1, pc, r1
   12764:	add	r9, pc, r9
   12768:	ldrd	r2, [r1, #104]	; 0x68
   1276c:	add	ip, r9, #816	; 0x330
   12770:	str	ip, [sp, #4]
   12774:	adds	r2, r2, #1
   12778:	ldr	ip, [pc, #3204]	; 13404 <next@@Base+0xd1c>
   1277c:	adc	r3, r3, #0
   12780:	add	ip, pc, ip
   12784:	mov	sl, r1
   12788:	add	r5, r1, #816	; 0x330
   1278c:	str	ip, [sp, #8]
   12790:	strd	r2, [r1, #104]	; 0x68
   12794:	bl	125d4 <get_char@@Base>
   12798:	ldr	fp, [pc, #3176]	; 13408 <next@@Base+0xd20>
   1279c:	add	fp, pc, fp
   127a0:	add	fp, fp, #304	; 0x130
   127a4:	mov	r6, r0
   127a8:	mov	r0, r8
   127ac:	ldrd	r2, [r5, #-8]
   127b0:	adds	r2, r2, #1
   127b4:	adc	r3, r3, #0
   127b8:	cmp	r6, #0
   127bc:	strd	r2, [r5, #-8]
   127c0:	beq	12e2c <next@@Base+0x744>
   127c4:	ldrd	r2, [r5]
   127c8:	sub	r0, r0, #1
   127cc:	adds	r2, r2, #1
   127d0:	adc	r3, r3, #0
   127d4:	cmp	r0, #4
   127d8:	addls	pc, pc, r0, lsl #2
   127dc:	b	12918 <next@@Base+0x230>
   127e0:	b	12a0c <next@@Base+0x324>
   127e4:	b	12b1c <next@@Base+0x434>
   127e8:	b	12bb0 <next@@Base+0x4c8>
   127ec:	b	127f4 <next@@Base+0x10c>
   127f0:	b	12cb0 <next@@Base+0x5c8>
   127f4:	ldr	r4, [pc, #3088]	; 1340c <next@@Base+0xd24>
   127f8:	cmp	r6, #101	; 0x65
   127fc:	add	r4, pc, r4
   12800:	add	r1, r4, #816	; 0x330
   12804:	strd	r2, [r1]
   12808:	bne	131e8 <next@@Base+0xb00>
   1280c:	add	r9, r4, #672	; 0x2a0
   12810:	add	r1, sp, #528	; 0x210
   12814:	ldrd	r2, [r9, #-8]
   12818:	add	r1, r1, r8
   1281c:	mov	r0, r7
   12820:	adds	r2, r2, #1
   12824:	adc	r3, r3, #0
   12828:	strb	r6, [r1, #-512]	; 0xfffffe00
   1282c:	strd	r2, [r9, #-8]
   12830:	bl	125d4 <get_char@@Base>
   12834:	add	r5, r8, #1
   12838:	cmp	r0, #116	; 0x74
   1283c:	bne	131d0 <next@@Base+0xae8>
   12840:	add	r6, r4, #688	; 0x2b0
   12844:	add	r3, sp, #528	; 0x210
   12848:	add	r5, r3, r5
   1284c:	ldrd	r2, [r6, #-8]
   12850:	strb	r0, [r5, #-512]	; 0xfffffe00
   12854:	mov	r0, r7
   12858:	adds	r2, r2, #1
   1285c:	adc	r3, r3, #0
   12860:	add	r5, r8, #2
   12864:	strd	r2, [r6, #-8]
   12868:	bl	125d4 <get_char@@Base>
   1286c:	cmp	r0, #117	; 0x75
   12870:	bne	131f0 <next@@Base+0xb08>
   12874:	add	r6, r4, #704	; 0x2c0
   12878:	add	r3, sp, #528	; 0x210
   1287c:	add	r5, r3, r5
   12880:	ldrd	r2, [r6, #-8]
   12884:	strb	r0, [r5, #-512]	; 0xfffffe00
   12888:	mov	r0, r7
   1288c:	adds	r2, r2, #1
   12890:	adc	r3, r3, #0
   12894:	add	r8, r8, #3
   12898:	strd	r2, [r6, #-8]
   1289c:	bl	125d4 <get_char@@Base>
   128a0:	cmp	r0, #114	; 0x72
   128a4:	mov	r1, r0
   128a8:	bne	131f0 <next@@Base+0xb08>
   128ac:	add	r5, r4, #720	; 0x2d0
   128b0:	add	r3, sp, #528	; 0x210
   128b4:	add	r8, r3, r8
   128b8:	ldrd	r2, [r5, #-8]
   128bc:	mov	r0, r7
   128c0:	strb	r1, [r8, #-512]	; 0xfffffe00
   128c4:	adds	r2, r2, #1
   128c8:	adc	r3, r3, #0
   128cc:	strd	r2, [r5, #-8]
   128d0:	bl	125d4 <get_char@@Base>
   128d4:	cmp	r0, #110	; 0x6e
   128d8:	bne	131b8 <next@@Base+0xad0>
   128dc:	add	r4, r4, #736	; 0x2e0
   128e0:	mov	r0, #4
   128e4:	ldrd	r2, [r4, #-8]
   128e8:	adds	r2, r2, #1
   128ec:	adc	r3, r3, #0
   128f0:	strd	r2, [r4, #-8]
   128f4:	bl	11960 <malloc@plt>
   128f8:	mov	r5, r0
   128fc:	bl	12228 <init_token_return@@Base>
   12900:	ldrd	r2, [r4]
   12904:	mov	r0, r5
   12908:	adds	r2, r2, #1
   1290c:	adc	r3, r3, #0
   12910:	strd	r2, [r4]
   12914:	b	12750 <next@@Base+0x68>
   12918:	ldr	r0, [sp, #4]
   1291c:	cmp	r6, #32
   12920:	cmpne	r6, #9
   12924:	moveq	r1, #1
   12928:	movne	r1, #0
   1292c:	strd	r2, [r0]
   12930:	beq	12d64 <next@@Base+0x67c>
   12934:	ldrd	r2, [r9, #128]	; 0x80
   12938:	adds	r2, r2, #1
   1293c:	adc	r3, r3, #0
   12940:	cmp	r6, #10
   12944:	strd	r2, [r9, #128]	; 0x80
   12948:	beq	12d64 <next@@Base+0x67c>
   1294c:	cmp	r6, #48	; 0x30
   12950:	beq	12fa8 <next@@Base+0x8c0>
   12954:	sub	r3, r6, #49	; 0x31
   12958:	uxtb	r3, r3
   1295c:	cmp	r3, #8
   12960:	bls	12de8 <next@@Base+0x700>
   12964:	cmp	r6, #40	; 0x28
   12968:	beq	12f70 <next@@Base+0x888>
   1296c:	cmp	r6, #41	; 0x29
   12970:	beq	13090 <next@@Base+0x9a8>
   12974:	cmp	r6, #123	; 0x7b
   12978:	beq	13058 <next@@Base+0x970>
   1297c:	cmp	r6, #125	; 0x7d
   12980:	beq	13020 <next@@Base+0x938>
   12984:	cmp	r6, #59	; 0x3b
   12988:	beq	12fe8 <next@@Base+0x900>
   1298c:	cmp	r6, #101	; 0x65
   12990:	beq	12ec0 <next@@Base+0x7d8>
   12994:	cmp	r6, #105	; 0x69
   12998:	beq	12e68 <next@@Base+0x780>
   1299c:	cmp	r6, #109	; 0x6d
   129a0:	beq	12f1c <next@@Base+0x834>
   129a4:	cmp	r6, #114	; 0x72
   129a8:	bne	130e4 <next@@Base+0x9fc>
   129ac:	ldrd	r2, [fp, #-8]
   129b0:	add	r1, sp, #528	; 0x210
   129b4:	add	r1, r1, r8
   129b8:	adds	r2, r2, #1
   129bc:	adc	r3, r3, #0
   129c0:	mov	r0, r7
   129c4:	strb	r6, [r1, #-512]	; 0xfffffe00
   129c8:	strd	r2, [fp, #-8]
   129cc:	bl	125d4 <get_char@@Base>
   129d0:	ldrd	r2, [fp]
   129d4:	add	r8, r8, #1
   129d8:	adds	r2, r2, #1
   129dc:	adc	r3, r3, #0
   129e0:	strd	r2, [fp]
   129e4:	mov	r6, r0
   129e8:	mov	r0, #4
   129ec:	ldr	r1, [pc, #2588]	; 13410 <next@@Base+0xd28>
   129f0:	add	r1, pc, r1
   129f4:	add	r1, r1, #800	; 0x320
   129f8:	ldrd	r2, [r1]
   129fc:	adds	r2, r2, #1
   12a00:	adc	r3, r3, #0
   12a04:	strd	r2, [r1]
   12a08:	b	127ac <next@@Base+0xc4>
   12a0c:	ldr	sl, [pc, #2560]	; 13414 <next@@Base+0xd2c>
   12a10:	sub	ip, r6, #48	; 0x30
   12a14:	add	sl, pc, sl
   12a18:	uxtb	ip, ip
   12a1c:	ldrd	r0, [sl, #120]	; 0x78
   12a20:	add	lr, sl, #816	; 0x330
   12a24:	add	r9, sp, #16
   12a28:	adds	r0, r0, #1
   12a2c:	adc	r1, r1, #0
   12a30:	cmp	ip, #9
   12a34:	subls	fp, r8, #1
   12a38:	strd	r0, [sl, #120]	; 0x78
   12a3c:	strd	r2, [lr]
   12a40:	addls	sl, sl, #512	; 0x200
   12a44:	addls	fp, r9, fp
   12a48:	bhi	12a80 <next@@Base+0x398>
   12a4c:	ldrd	r4, [sl, #-8]
   12a50:	strb	r6, [fp, #1]!
   12a54:	mov	r0, r7
   12a58:	adds	r4, r4, #1
   12a5c:	adc	r5, r5, #0
   12a60:	add	r8, r8, #1
   12a64:	strd	r4, [sl, #-8]
   12a68:	bl	125d4 <get_char@@Base>
   12a6c:	sub	r3, r0, #48	; 0x30
   12a70:	mov	r6, r0
   12a74:	uxtb	r3, r3
   12a78:	cmp	r3, #9
   12a7c:	bls	12a4c <next@@Base+0x364>
   12a80:	ldr	r4, [pc, #2448]	; 13418 <next@@Base+0xd30>
   12a84:	mov	r0, r7
   12a88:	add	r4, pc, r4
   12a8c:	add	r1, r4, #512	; 0x200
   12a90:	add	r6, r4, #528	; 0x210
   12a94:	ldrd	r2, [r1]
   12a98:	mov	r5, #0
   12a9c:	add	r4, r4, #544	; 0x220
   12aa0:	adds	r2, r2, #1
   12aa4:	adc	r3, r3, #0
   12aa8:	strd	r2, [r1]
   12aac:	bl	126ac <push_back_one_char@@Base>
   12ab0:	ldrd	r2, [r6, #-8]
   12ab4:	add	r1, sp, #528	; 0x210
   12ab8:	add	r8, r1, r8
   12abc:	adds	r2, r2, #1
   12ac0:	adc	r3, r3, #0
   12ac4:	mov	r0, #8
   12ac8:	strd	r2, [r6, #-8]
   12acc:	strb	r5, [r8, #-512]	; 0xfffffe00
   12ad0:	bl	11960 <malloc@plt>
   12ad4:	mov	r1, r5
   12ad8:	mov	r2, #10
   12adc:	mov	r7, r0
   12ae0:	mov	r0, r9
   12ae4:	bl	118f4 <strtol@plt>
   12ae8:	ldrd	r2, [r6]
   12aec:	adds	r2, r2, #1
   12af0:	adc	r3, r3, #0
   12af4:	strd	r2, [r6]
   12af8:	mov	r1, r0
   12afc:	mov	r0, r7
   12b00:	bl	12128 <init_token_int_value@@Base>
   12b04:	ldrd	r2, [r4, #-8]
   12b08:	mov	r0, r7
   12b0c:	adds	r2, r2, #1
   12b10:	adc	r3, r3, #0
   12b14:	strd	r2, [r4, #-8]
   12b18:	b	12750 <next@@Base+0x68>
   12b1c:	ldr	r4, [pc, #2296]	; 1341c <next@@Base+0xd34>
   12b20:	cmp	r6, #102	; 0x66
   12b24:	add	r4, pc, r4
   12b28:	add	r1, r4, #816	; 0x330
   12b2c:	strd	r2, [r1]
   12b30:	beq	12d94 <next@@Base+0x6ac>
   12b34:	cmp	r6, #110	; 0x6e
   12b38:	bne	12d78 <next@@Base+0x690>
   12b3c:	add	r1, r4, #560	; 0x230
   12b40:	add	r3, sp, #528	; 0x210
   12b44:	add	r8, r3, r8
   12b48:	ldrd	r2, [r1]
   12b4c:	mov	r0, r7
   12b50:	strb	r6, [r8, #-512]	; 0xfffffe00
   12b54:	adds	r2, r2, #1
   12b58:	adc	r3, r3, #0
   12b5c:	strd	r2, [r1]
   12b60:	bl	125d4 <get_char@@Base>
   12b64:	cmp	r0, #116	; 0x74
   12b68:	addne	r4, r4, #576	; 0x240
   12b6c:	bne	130cc <next@@Base+0x9e4>
   12b70:	add	r1, r4, #576	; 0x240
   12b74:	mov	r0, #4
   12b78:	ldrd	r2, [r1]
   12b7c:	add	r4, r4, #592	; 0x250
   12b80:	adds	r2, r2, #1
   12b84:	adc	r3, r3, #0
   12b88:	strd	r2, [r1]
   12b8c:	bl	11960 <malloc@plt>
   12b90:	mov	r5, r0
   12b94:	bl	12100 <init_token_int_type@@Base>
   12b98:	ldrd	r2, [r4, #-8]
   12b9c:	mov	r0, r5
   12ba0:	adds	r2, r2, #1
   12ba4:	adc	r3, r3, #0
   12ba8:	strd	r2, [r4, #-8]
   12bac:	b	12750 <next@@Base+0x68>
   12bb0:	ldr	r4, [pc, #2152]	; 13420 <next@@Base+0xd38>
   12bb4:	cmp	r6, #97	; 0x61
   12bb8:	add	r4, pc, r4
   12bbc:	add	r1, r4, #816	; 0x330
   12bc0:	addne	r4, r4, #608	; 0x260
   12bc4:	strd	r2, [r1]
   12bc8:	bne	130cc <next@@Base+0x9e4>
   12bcc:	add	ip, r4, #608	; 0x260
   12bd0:	add	r1, sp, #528	; 0x210
   12bd4:	ldrd	r2, [ip]
   12bd8:	add	r1, r1, r8
   12bdc:	mov	r0, r7
   12be0:	adds	r2, r2, #1
   12be4:	adc	r3, r3, #0
   12be8:	strb	r6, [r1, #-512]	; 0xfffffe00
   12bec:	strd	r2, [ip]
   12bf0:	bl	125d4 <get_char@@Base>
   12bf4:	add	r5, r8, #1
   12bf8:	cmp	r0, #105	; 0x69
   12bfc:	mov	ip, r0
   12c00:	addne	r4, r4, #624	; 0x270
   12c04:	bne	130cc <next@@Base+0x9e4>
   12c08:	add	r1, r4, #624	; 0x270
   12c0c:	add	r3, sp, #528	; 0x210
   12c10:	add	r5, r3, r5
   12c14:	ldrd	r2, [r1]
   12c18:	mov	r0, r7
   12c1c:	strb	ip, [r5, #-512]	; 0xfffffe00
   12c20:	adds	r2, r2, #1
   12c24:	adc	r3, r3, #0
   12c28:	add	r6, r8, #2
   12c2c:	strd	r2, [r1]
   12c30:	bl	125d4 <get_char@@Base>
   12c34:	cmp	r0, #110	; 0x6e
   12c38:	mov	ip, r0
   12c3c:	addne	r4, r4, #640	; 0x280
   12c40:	bne	130cc <next@@Base+0x9e4>
   12c44:	add	r1, r4, #640	; 0x280
   12c48:	add	r0, sp, #528	; 0x210
   12c4c:	ldrd	r2, [r1]
   12c50:	add	r6, r0, r6
   12c54:	add	r5, r8, #3
   12c58:	adds	r2, r2, #1
   12c5c:	strb	ip, [r6, #-512]	; 0xfffffe00
   12c60:	add	ip, sp, #528	; 0x210
   12c64:	add	ip, ip, r5
   12c68:	adc	r3, r3, #0
   12c6c:	mov	r7, #0
   12c70:	add	r0, r8, #4
   12c74:	strd	r2, [r1]
   12c78:	strb	r7, [ip, #-512]	; 0xfffffe00
   12c7c:	bl	11960 <malloc@plt>
   12c80:	mov	r2, r5
   12c84:	add	r1, sp, #16
   12c88:	add	r4, r4, #656	; 0x290
   12c8c:	mov	r6, r0
   12c90:	bl	11a14 <strncpy@plt>
   12c94:	strb	r7, [r6, r5]
   12c98:	mov	r0, #8
   12c9c:	bl	11960 <malloc@plt>
   12ca0:	mov	r1, r6
   12ca4:	mov	r5, r0
   12ca8:	bl	12158 <init_token_function@@Base>
   12cac:	b	12b98 <next@@Base+0x4b0>
   12cb0:	ldr	r4, [pc, #1900]	; 13424 <next@@Base+0xd3c>
   12cb4:	cmp	r6, #108	; 0x6c
   12cb8:	add	r4, pc, r4
   12cbc:	add	r1, r4, #816	; 0x330
   12cc0:	addne	r4, r4, #752	; 0x2f0
   12cc4:	strd	r2, [r1]
   12cc8:	bne	130cc <next@@Base+0x9e4>
   12ccc:	add	r1, r4, #752	; 0x2f0
   12cd0:	add	r3, sp, #528	; 0x210
   12cd4:	add	r0, r3, r8
   12cd8:	ldrd	r2, [r1]
   12cdc:	strb	r6, [r0, #-512]	; 0xfffffe00
   12ce0:	mov	r0, r7
   12ce4:	adds	r2, r2, #1
   12ce8:	adc	r3, r3, #0
   12cec:	add	r8, r8, #1
   12cf0:	strd	r2, [r1]
   12cf4:	bl	125d4 <get_char@@Base>
   12cf8:	cmp	r0, #115	; 0x73
   12cfc:	mov	ip, r0
   12d00:	addne	r4, r4, #768	; 0x300
   12d04:	bne	130cc <next@@Base+0x9e4>
   12d08:	add	r1, r4, #768	; 0x300
   12d0c:	add	r3, sp, #528	; 0x210
   12d10:	add	r8, r3, r8
   12d14:	ldrd	r2, [r1]
   12d18:	mov	r0, r7
   12d1c:	strb	ip, [r8, #-512]	; 0xfffffe00
   12d20:	adds	r2, r2, #1
   12d24:	adc	r3, r3, #0
   12d28:	strd	r2, [r1]
   12d2c:	bl	125d4 <get_char@@Base>
   12d30:	cmp	r0, #101	; 0x65
   12d34:	bne	130c8 <next@@Base+0x9e0>
   12d38:	add	r1, r4, #784	; 0x310
   12d3c:	mov	r0, #4
   12d40:	ldrd	r2, [r1]
   12d44:	add	r4, r4, #800	; 0x320
   12d48:	adds	r2, r2, #1
   12d4c:	adc	r3, r3, #0
   12d50:	strd	r2, [r1]
   12d54:	bl	11960 <malloc@plt>
   12d58:	mov	r5, r0
   12d5c:	bl	122c8 <init_token_else@@Base>
   12d60:	b	12b98 <next@@Base+0x4b0>
   12d64:	mov	r0, r7
   12d68:	bl	125d4 <get_char@@Base>
   12d6c:	mov	r6, r0
   12d70:	mov	r0, #0
   12d74:	b	129ec <next@@Base+0x304>
   12d78:	add	r4, r4, #544	; 0x220
   12d7c:	ldrd	r2, [r4]
   12d80:	mov	r0, #1
   12d84:	adds	r2, r2, #1
   12d88:	adc	r3, r3, #0
   12d8c:	strd	r2, [r4]
   12d90:	bl	119a8 <exit@plt>
   12d94:	add	r1, r4, #560	; 0x230
   12d98:	add	r3, sp, #528	; 0x210
   12d9c:	add	r8, r3, r8
   12da0:	ldrd	r2, [r1, #-8]
   12da4:	mov	ip, #0
   12da8:	mov	r0, #4
   12dac:	adds	r2, r2, #1
   12db0:	adc	r3, r3, #0
   12db4:	strb	ip, [r8, #-511]	; 0xfffffe01
   12db8:	strd	r2, [r1, #-8]
   12dbc:	strb	r6, [r8, #-512]	; 0xfffffe00
   12dc0:	bl	11960 <malloc@plt>
   12dc4:	add	r4, r4, #592	; 0x250
   12dc8:	mov	r5, r0
   12dcc:	bl	122a0 <init_token_if@@Base>
   12dd0:	ldrd	r2, [r4]
   12dd4:	mov	r0, r5
   12dd8:	adds	r2, r2, #1
   12ddc:	adc	r3, r3, #0
   12de0:	strd	r2, [r4]
   12de4:	b	12750 <next@@Base+0x68>
   12de8:	ldrd	r2, [r9, #152]	; 0x98
   12dec:	add	r1, sp, #528	; 0x210
   12df0:	add	r1, r1, r8
   12df4:	adds	r2, r2, #1
   12df8:	adc	r3, r3, #0
   12dfc:	mov	r0, r7
   12e00:	strb	r6, [r1, #-512]	; 0xfffffe00
   12e04:	strd	r2, [r9, #152]	; 0x98
   12e08:	bl	125d4 <get_char@@Base>
   12e0c:	ldrd	r2, [r9, #160]	; 0xa0
   12e10:	add	r8, r8, #1
   12e14:	adds	r2, r2, #1
   12e18:	adc	r3, r3, #0
   12e1c:	strd	r2, [r9, #160]	; 0xa0
   12e20:	mov	r6, r0
   12e24:	mov	r0, #1
   12e28:	b	129ec <next@@Base+0x304>
   12e2c:	add	sl, sl, #832	; 0x340
   12e30:	mov	r0, #4
   12e34:	ldrd	r2, [sl, #-8]
   12e38:	adds	r2, r2, #1
   12e3c:	adc	r3, r3, #0
   12e40:	strd	r2, [sl, #-8]
   12e44:	bl	11960 <malloc@plt>
   12e48:	mov	r4, r0
   12e4c:	bl	12278 <init_token_eof@@Base>
   12e50:	ldrd	r2, [sl]
   12e54:	mov	r0, r4
   12e58:	adds	r2, r2, #1
   12e5c:	adc	r3, r3, #0
   12e60:	strd	r2, [sl]
   12e64:	b	12750 <next@@Base+0x68>
   12e68:	ldr	r1, [pc, #1464]	; 13428 <next@@Base+0xd40>
   12e6c:	add	r3, sp, #528	; 0x210
   12e70:	add	r1, pc, r1
   12e74:	add	r1, r1, #272	; 0x110
   12e78:	add	r3, r3, r8
   12e7c:	mov	r0, r7
   12e80:	strb	r6, [r3, #-512]	; 0xfffffe00
   12e84:	ldrd	r2, [r1, #-8]
   12e88:	str	r1, [sp, #12]
   12e8c:	add	r8, r8, #1
   12e90:	adds	r2, r2, #1
   12e94:	adc	r3, r3, #0
   12e98:	strd	r2, [r1, #-8]
   12e9c:	bl	125d4 <get_char@@Base>
   12ea0:	ldr	r1, [sp, #12]
   12ea4:	ldrd	r2, [r1]
   12ea8:	adds	r2, r2, #1
   12eac:	adc	r3, r3, #0
   12eb0:	strd	r2, [r1]
   12eb4:	mov	r6, r0
   12eb8:	mov	r0, #2
   12ebc:	b	129ec <next@@Base+0x304>
   12ec0:	ldr	r1, [pc, #1380]	; 1342c <next@@Base+0xd44>
   12ec4:	add	r3, sp, #528	; 0x210
   12ec8:	add	r1, pc, r1
   12ecc:	add	r0, r3, r8
   12ed0:	ldrd	r2, [r1, #248]	; 0xf8
   12ed4:	mov	ip, #101	; 0x65
   12ed8:	strb	ip, [r0, #-512]	; 0xfffffe00
   12edc:	adds	r2, r2, #1
   12ee0:	adc	r3, r3, #0
   12ee4:	mov	r0, r7
   12ee8:	strd	r2, [r1, #248]	; 0xf8
   12eec:	str	r1, [sp, #12]
   12ef0:	bl	125d4 <get_char@@Base>
   12ef4:	ldr	r1, [sp, #12]
   12ef8:	add	r8, r8, #1
   12efc:	add	r1, r1, #256	; 0x100
   12f00:	ldrd	r2, [r1]
   12f04:	adds	r2, r2, #1
   12f08:	adc	r3, r3, #0
   12f0c:	strd	r2, [r1]
   12f10:	mov	r6, r0
   12f14:	mov	r0, #5
   12f18:	b	129ec <next@@Base+0x304>
   12f1c:	ldr	r3, [sp, #8]
   12f20:	add	r1, r3, #288	; 0x120
   12f24:	add	r3, sp, #528	; 0x210
   12f28:	add	r0, r3, r8
   12f2c:	ldrd	r2, [r1, #-8]
   12f30:	strb	r6, [r0, #-512]	; 0xfffffe00
   12f34:	mov	r0, r7
   12f38:	adds	r2, r2, #1
   12f3c:	adc	r3, r3, #0
   12f40:	str	r1, [sp, #12]
   12f44:	strd	r2, [r1, #-8]
   12f48:	bl	125d4 <get_char@@Base>
   12f4c:	ldr	r1, [sp, #12]
   12f50:	add	r8, r8, #1
   12f54:	ldrd	r2, [r1]
   12f58:	adds	r2, r2, #1
   12f5c:	adc	r3, r3, #0
   12f60:	strd	r2, [r1]
   12f64:	mov	r6, r0
   12f68:	mov	r0, #3
   12f6c:	b	129ec <next@@Base+0x304>
   12f70:	ldrd	r2, [r9, #168]	; 0xa8
   12f74:	mov	r0, #4
   12f78:	adds	r2, r2, #1
   12f7c:	adc	r3, r3, #0
   12f80:	strd	r2, [r9, #168]	; 0xa8
   12f84:	bl	11960 <malloc@plt>
   12f88:	mov	r4, r0
   12f8c:	bl	12188 <init_token_opar@@Base>
   12f90:	ldrd	r2, [r9, #176]	; 0xb0
   12f94:	mov	r0, r4
   12f98:	adds	r2, r2, #1
   12f9c:	adc	r3, r3, #0
   12fa0:	strd	r2, [r9, #176]	; 0xb0
   12fa4:	b	12750 <next@@Base+0x68>
   12fa8:	ldrd	r2, [r9, #136]	; 0x88
   12fac:	mov	r0, #8
   12fb0:	str	r1, [sp, #4]
   12fb4:	adds	r2, r2, #1
   12fb8:	adc	r3, r3, #0
   12fbc:	strd	r2, [r9, #136]	; 0x88
   12fc0:	bl	11960 <malloc@plt>
   12fc4:	ldr	r1, [sp, #4]
   12fc8:	mov	r4, r0
   12fcc:	bl	12128 <init_token_int_value@@Base>
   12fd0:	ldrd	r2, [r9, #144]	; 0x90
   12fd4:	mov	r0, r4
   12fd8:	adds	r2, r2, #1
   12fdc:	adc	r3, r3, #0
   12fe0:	strd	r2, [r9, #144]	; 0x90
   12fe4:	b	12750 <next@@Base+0x68>
   12fe8:	ldrd	r2, [r9, #232]	; 0xe8
   12fec:	mov	r0, #4
   12ff0:	adds	r2, r2, #1
   12ff4:	adc	r3, r3, #0
   12ff8:	strd	r2, [r9, #232]	; 0xe8
   12ffc:	bl	11960 <malloc@plt>
   13000:	mov	r4, r0
   13004:	bl	12250 <init_token_semicolon@@Base>
   13008:	ldrd	r2, [r9, #240]	; 0xf0
   1300c:	mov	r0, r4
   13010:	adds	r2, r2, #1
   13014:	adc	r3, r3, #0
   13018:	strd	r2, [r9, #240]	; 0xf0
   1301c:	b	12750 <next@@Base+0x68>
   13020:	ldrd	r2, [r9, #216]	; 0xd8
   13024:	mov	r0, #4
   13028:	adds	r2, r2, #1
   1302c:	adc	r3, r3, #0
   13030:	strd	r2, [r9, #216]	; 0xd8
   13034:	bl	11960 <malloc@plt>
   13038:	mov	r4, r0
   1303c:	bl	12200 <init_token_cbra@@Base>
   13040:	ldrd	r2, [r9, #224]	; 0xe0
   13044:	mov	r0, r4
   13048:	adds	r2, r2, #1
   1304c:	adc	r3, r3, #0
   13050:	strd	r2, [r9, #224]	; 0xe0
   13054:	b	12750 <next@@Base+0x68>
   13058:	ldrd	r2, [r9, #200]	; 0xc8
   1305c:	mov	r0, #4
   13060:	adds	r2, r2, #1
   13064:	adc	r3, r3, #0
   13068:	strd	r2, [r9, #200]	; 0xc8
   1306c:	bl	11960 <malloc@plt>
   13070:	mov	r4, r0
   13074:	bl	121d8 <init_token_obra@@Base>
   13078:	ldrd	r2, [r9, #208]	; 0xd0
   1307c:	mov	r0, r4
   13080:	adds	r2, r2, #1
   13084:	adc	r3, r3, #0
   13088:	strd	r2, [r9, #208]	; 0xd0
   1308c:	b	12750 <next@@Base+0x68>
   13090:	ldrd	r2, [r9, #184]	; 0xb8
   13094:	mov	r0, #4
   13098:	adds	r2, r2, #1
   1309c:	adc	r3, r3, #0
   130a0:	strd	r2, [r9, #184]	; 0xb8
   130a4:	bl	11960 <malloc@plt>
   130a8:	mov	r4, r0
   130ac:	bl	121b0 <init_token_cpar@@Base>
   130b0:	ldrd	r2, [r9, #192]	; 0xc0
   130b4:	mov	r0, r4
   130b8:	adds	r2, r2, #1
   130bc:	adc	r3, r3, #0
   130c0:	strd	r2, [r9, #192]	; 0xc0
   130c4:	b	12750 <next@@Base+0x68>
   130c8:	add	r4, r4, #784	; 0x310
   130cc:	ldrd	r2, [r4, #-8]
   130d0:	mov	r0, #1
   130d4:	adds	r2, r2, #1
   130d8:	adc	r3, r3, #0
   130dc:	strd	r2, [r4, #-8]
   130e0:	bl	119a8 <exit@plt>
   130e4:	cmp	r6, #33	; 0x21
   130e8:	beq	13458 <next@@Base+0xd70>
   130ec:	and	r3, r6, #253	; 0xfd
   130f0:	cmp	r3, #60	; 0x3c
   130f4:	beq	13338 <next@@Base+0xc50>
   130f8:	cmp	r6, #61	; 0x3d
   130fc:	beq	132e8 <next@@Base+0xc00>
   13100:	cmp	r6, #124	; 0x7c
   13104:	beq	1325c <next@@Base+0xb74>
   13108:	cmp	r6, #38	; 0x26
   1310c:	bne	13208 <next@@Base+0xb20>
   13110:	ldr	r4, [pc, #792]	; 13430 <next@@Base+0xd48>
   13114:	add	r3, sp, #528	; 0x210
   13118:	add	r4, pc, r4
   1311c:	add	r1, r4, #464	; 0x1d0
   13120:	add	r8, r3, r8
   13124:	ldrd	r2, [r1, #-8]
   13128:	mov	r0, r7
   1312c:	strb	r6, [r8, #-512]	; 0xfffffe00
   13130:	adds	r2, r2, #1
   13134:	adc	r3, r3, #0
   13138:	strd	r2, [r1, #-8]
   1313c:	bl	125d4 <get_char@@Base>
   13140:	mov	r7, r0
   13144:	mov	r0, #8
   13148:	bl	11960 <malloc@plt>
   1314c:	cmp	r7, #38	; 0x26
   13150:	addne	r4, r4, #480	; 0x1e0
   13154:	mov	r5, r0
   13158:	bne	130cc <next@@Base+0x9e4>
   1315c:	add	r1, r4, #480	; 0x1e0
   13160:	mov	r0, #3
   13164:	ldrd	r2, [r1]
   13168:	adds	r2, r2, #1
   1316c:	adc	r3, r3, #0
   13170:	strd	r2, [r1]
   13174:	bl	11960 <malloc@plt>
   13178:	ldrb	ip, [sp, #16]
   1317c:	mov	r2, #0
   13180:	mov	r3, r0
   13184:	mov	r1, r0
   13188:	strb	r6, [r3, #1]
   1318c:	mov	r0, r5
   13190:	strb	ip, [r3]
   13194:	strb	r2, [r3, #2]
   13198:	bl	122f0 <init_token_boolean_op@@Base>
   1319c:	add	r3, r4, #496	; 0x1f0
   131a0:	mov	r0, r5
   131a4:	ldrd	r4, [r3, #-8]
   131a8:	adds	r4, r4, #1
   131ac:	adc	r5, r5, #0
   131b0:	strd	r4, [r3, #-8]
   131b4:	b	12750 <next@@Base+0x68>
   131b8:	ldrd	r2, [r5]
   131bc:	mov	r0, #1
   131c0:	adds	r2, r2, #1
   131c4:	adc	r3, r3, #0
   131c8:	strd	r2, [r5]
   131cc:	bl	119a8 <exit@plt>
   131d0:	ldrd	r2, [r9]
   131d4:	mov	r0, #1
   131d8:	adds	r2, r2, #1
   131dc:	adc	r3, r3, #0
   131e0:	strd	r2, [r9]
   131e4:	bl	119a8 <exit@plt>
   131e8:	add	r4, r4, #656	; 0x290
   131ec:	b	12d7c <next@@Base+0x694>
   131f0:	ldrd	r2, [r6]
   131f4:	mov	r0, #1
   131f8:	adds	r2, r2, #1
   131fc:	adc	r3, r3, #0
   13200:	strd	r2, [r6]
   13204:	bl	119a8 <exit@plt>
   13208:	ldr	r5, [pc, #548]	; 13434 <next@@Base+0xd4c>
   1320c:	mov	r2, r6
   13210:	add	r5, pc, r5
   13214:	add	r0, r5, #464	; 0x1d0
   13218:	ldr	r3, [pc, #536]	; 13438 <next@@Base+0xd50>
   1321c:	ldrd	r6, [r0]
   13220:	ldr	r1, [pc, #532]	; 1343c <next@@Base+0xd54>
   13224:	add	r5, r5, #496	; 0x1f0
   13228:	adds	r6, r6, #1
   1322c:	adc	r7, r7, #0
   13230:	add	r1, pc, r1
   13234:	strd	r6, [r0]
   13238:	ldr	r3, [r4, r3]
   1323c:	ldr	r0, [r3]
   13240:	bl	119cc <fprintf@plt>
   13244:	ldrd	r2, [r5]
   13248:	mov	r0, #1
   1324c:	adds	r2, r2, #1
   13250:	adc	r3, r3, #0
   13254:	strd	r2, [r5]
   13258:	bl	119a8 <exit@plt>
   1325c:	ldr	r4, [pc, #476]	; 13440 <next@@Base+0xd58>
   13260:	add	r3, sp, #528	; 0x210
   13264:	add	r4, pc, r4
   13268:	add	r9, r4, #432	; 0x1b0
   1326c:	add	r8, r3, r8
   13270:	ldrd	r2, [r9, #-8]
   13274:	mov	r0, r7
   13278:	strb	r6, [r8, #-512]	; 0xfffffe00
   1327c:	adds	r2, r2, #1
   13280:	adc	r3, r3, #0
   13284:	strd	r2, [r9, #-8]
   13288:	bl	125d4 <get_char@@Base>
   1328c:	mov	r7, r0
   13290:	mov	r0, #8
   13294:	bl	11960 <malloc@plt>
   13298:	cmp	r7, #124	; 0x7c
   1329c:	mov	r5, r0
   132a0:	bne	131d0 <next@@Base+0xae8>
   132a4:	add	r4, r4, #448	; 0x1c0
   132a8:	ldrd	r2, [r4, #-8]
   132ac:	mov	r0, #3
   132b0:	adds	r2, r2, #1
   132b4:	adc	r3, r3, #0
   132b8:	strd	r2, [r4, #-8]
   132bc:	bl	11960 <malloc@plt>
   132c0:	ldrb	ip, [sp, #16]
   132c4:	mov	r2, #0
   132c8:	mov	r3, r0
   132cc:	mov	r1, r0
   132d0:	strb	r6, [r3, #1]
   132d4:	mov	r0, r5
   132d8:	strb	ip, [r3]
   132dc:	strb	r2, [r3, #2]
   132e0:	bl	122f0 <init_token_boolean_op@@Base>
   132e4:	b	12900 <next@@Base+0x218>
   132e8:	ldr	r4, [pc, #340]	; 13444 <next@@Base+0xd5c>
   132ec:	add	r3, sp, #528	; 0x210
   132f0:	add	r4, pc, r4
   132f4:	add	r9, r4, #400	; 0x190
   132f8:	add	r8, r3, r8
   132fc:	ldrd	r2, [r9, #-8]
   13300:	mov	r0, r7
   13304:	strb	r6, [r8, #-512]	; 0xfffffe00
   13308:	adds	r2, r2, #1
   1330c:	adc	r3, r3, #0
   13310:	strd	r2, [r9, #-8]
   13314:	bl	125d4 <get_char@@Base>
   13318:	mov	r7, r0
   1331c:	mov	r0, #8
   13320:	bl	11960 <malloc@plt>
   13324:	cmp	r7, #61	; 0x3d
   13328:	mov	r5, r0
   1332c:	bne	131d0 <next@@Base+0xae8>
   13330:	add	r4, r4, #416	; 0x1a0
   13334:	b	132a8 <next@@Base+0xbc0>
   13338:	ldr	r4, [pc, #264]	; 13448 <next@@Base+0xd60>
   1333c:	add	r3, sp, #528	; 0x210
   13340:	add	r4, pc, r4
   13344:	add	r1, r4, #352	; 0x160
   13348:	add	r8, r3, r8
   1334c:	ldrd	r2, [r1]
   13350:	mov	r0, r7
   13354:	strb	r6, [r8, #-512]	; 0xfffffe00
   13358:	adds	r2, r2, #1
   1335c:	adc	r3, r3, #0
   13360:	strd	r2, [r1]
   13364:	bl	125d4 <get_char@@Base>
   13368:	mov	r6, r0
   1336c:	mov	r0, #8
   13370:	bl	11960 <malloc@plt>
   13374:	cmp	r6, #61	; 0x3d
   13378:	mov	r5, r0
   1337c:	beq	13514 <next@@Base+0xe2c>
   13380:	add	r4, r4, #368	; 0x170
   13384:	mov	r0, r7
   13388:	ldrd	r2, [r4, #-8]
   1338c:	adds	r2, r2, #1
   13390:	adc	r3, r3, #0
   13394:	strd	r2, [r4, #-8]
   13398:	bl	126ac <push_back_one_char@@Base>
   1339c:	mov	r0, #2
   133a0:	bl	11960 <malloc@plt>
   133a4:	ldrd	r2, [r4]
   133a8:	ldrb	ip, [sp, #16]
   133ac:	mov	r1, #0
   133b0:	adds	r2, r2, #1
   133b4:	adc	r3, r3, #0
   133b8:	strd	r2, [r4]
   133bc:	strb	ip, [r0]
   133c0:	strb	r1, [r0, #1]
   133c4:	mov	r1, r0
   133c8:	mov	r0, r5
   133cc:	bl	122f0 <init_token_boolean_op@@Base>
   133d0:	ldr	r3, [pc, #116]	; 1344c <next@@Base+0xd64>
   133d4:	mov	r0, r5
   133d8:	add	r3, pc, r3
   133dc:	add	r3, r3, #384	; 0x180
   133e0:	ldrd	r4, [r3]
   133e4:	adds	r4, r4, #1
   133e8:	adc	r5, r5, #0
   133ec:	strd	r4, [r3]
   133f0:	b	12750 <next@@Base+0x68>
   133f4:	strdeq	r6, [r1], -ip
   133f8:	andeq	r7, r1, r0, lsl #11
   133fc:	andeq	r7, r1, r0, lsr r5
   13400:	andeq	r7, r1, ip, lsr #10
   13404:	andeq	r7, r1, r0, lsl r5
   13408:	strdeq	r7, [r1], -r4
   1340c:	muleq	r1, r4, r4
   13410:	andeq	r7, r1, r0, lsr #5
   13414:	andeq	r7, r1, ip, ror r2
   13418:	andeq	r7, r1, r8, lsl #4
   1341c:	andeq	r7, r1, ip, ror #2
   13420:	ldrdeq	r7, [r1], -r8
   13424:	ldrdeq	r6, [r1], -r8
   13428:	andeq	r6, r1, r0, lsr #28
   1342c:	andeq	r6, r1, r8, asr #27
   13430:	andeq	r6, r1, r8, ror fp
   13434:	andeq	r6, r1, r0, lsl #21
   13438:	andeq	r0, r0, r8, lsr #1
   1343c:	andeq	r4, r0, ip, asr sl
   13440:	andeq	r6, r1, ip, lsr #20
   13444:	andeq	r6, r1, r0, lsr #19
   13448:	andeq	r6, r1, r0, asr r9
   1344c:			; <UNDEFINED> instruction: 0x000168b8
   13450:	andeq	r6, r1, r0, lsr r8
   13454:	muleq	r1, r8, r7
   13458:	ldr	r4, [pc, #-16]	; 13450 <next@@Base+0xd68>
   1345c:	add	r3, sp, #528	; 0x210
   13460:	add	r4, pc, r4
   13464:	add	r9, r4, #320	; 0x140
   13468:	add	r8, r3, r8
   1346c:	ldrd	r2, [r9, #-8]
   13470:	mov	r0, r7
   13474:	strb	r6, [r8, #-512]	; 0xfffffe00
   13478:	adds	r2, r2, #1
   1347c:	adc	r3, r3, #0
   13480:	strd	r2, [r9, #-8]
   13484:	bl	125d4 <get_char@@Base>
   13488:	mov	r6, r0
   1348c:	mov	r0, #8
   13490:	bl	11960 <malloc@plt>
   13494:	cmp	r6, #61	; 0x3d
   13498:	mov	r5, r0
   1349c:	beq	13548 <next@@Base+0xe60>
   134a0:	ldrd	r2, [r9]
   134a4:	mov	r0, r7
   134a8:	add	r4, r4, #336	; 0x150
   134ac:	adds	r2, r2, #1
   134b0:	adc	r3, r3, #0
   134b4:	strd	r2, [r9]
   134b8:	bl	126ac <push_back_one_char@@Base>
   134bc:	mov	r0, #2
   134c0:	bl	11960 <malloc@plt>
   134c4:	ldrd	r2, [r4, #-8]
   134c8:	ldrb	ip, [sp, #16]
   134cc:	mov	r1, #0
   134d0:	adds	r2, r2, #1
   134d4:	adc	r3, r3, #0
   134d8:	strd	r2, [r4, #-8]
   134dc:	strb	ip, [r0]
   134e0:	strb	r1, [r0, #1]
   134e4:	mov	r1, r0
   134e8:	mov	r0, r5
   134ec:	bl	122f0 <init_token_boolean_op@@Base>
   134f0:	ldr	r3, [pc, #-164]	; 13454 <next@@Base+0xd6c>
   134f4:	mov	r0, r5
   134f8:	add	r3, pc, r3
   134fc:	add	r3, r3, #352	; 0x160
   13500:	ldrd	r4, [r3, #-8]
   13504:	adds	r4, r4, #1
   13508:	adc	r5, r5, #0
   1350c:	strd	r4, [r3, #-8]
   13510:	b	12750 <next@@Base+0x68>
   13514:	mov	r0, #3
   13518:	bl	11960 <malloc@plt>
   1351c:	add	r4, r4, #384	; 0x180
   13520:	ldrb	ip, [sp, #16]
   13524:	ldrd	r2, [r4, #-8]
   13528:	mov	r1, #0
   1352c:	adds	r2, r2, #1
   13530:	adc	r3, r3, #0
   13534:	strd	r2, [r4, #-8]
   13538:	strb	r6, [r0, #1]
   1353c:	strb	ip, [r0]
   13540:	strb	r1, [r0, #2]
   13544:	b	133c4 <next@@Base+0xcdc>
   13548:	mov	r0, #3
   1354c:	bl	11960 <malloc@plt>
   13550:	add	r4, r4, #336	; 0x150
   13554:	ldrb	ip, [sp, #16]
   13558:	ldrd	r2, [r4]
   1355c:	mov	r1, #0
   13560:	adds	r2, r2, #1
   13564:	adc	r3, r3, #0
   13568:	strd	r2, [r4]
   1356c:	strb	r6, [r0, #1]
   13570:	strb	ip, [r0]
   13574:	strb	r1, [r0, #2]
   13578:	b	134e4 <next@@Base+0xdfc>

0001357c <init_ast_base@@Base>:
   1357c:	ldr	r3, [pc, #32]	; 135a4 <init_ast_base@@Base+0x28>
   13580:	push	{r4, r5}
   13584:	add	r3, pc, r3
   13588:	stm	r0, {r1, r2}
   1358c:	ldrd	r4, [r3]
   13590:	adds	r4, r4, #1
   13594:	adc	r5, r5, #0
   13598:	strd	r4, [r3]
   1359c:	pop	{r4, r5}
   135a0:	bx	lr
   135a4:	andeq	r6, r1, r4, asr sl

000135a8 <init_ast_base_single@@Base>:
   135a8:	push	{r4, r6, r7, lr}
   135ac:	mov	r2, #0
   135b0:	ldr	r4, [pc, #40]	; 135e0 <init_ast_base_single@@Base+0x38>
   135b4:	add	r4, pc, r4
   135b8:	ldrd	r6, [r4, #8]
   135bc:	adds	r6, r6, #1
   135c0:	adc	r7, r7, #0
   135c4:	strd	r6, [r4, #8]
   135c8:	bl	1357c <init_ast_base@@Base>
   135cc:	ldrd	r2, [r4, #16]
   135d0:	adds	r2, r2, #1
   135d4:	adc	r3, r3, #0
   135d8:	strd	r2, [r4, #16]
   135dc:	pop	{r4, r6, r7, pc}
   135e0:	andeq	r6, r1, r4, lsr #20

000135e4 <init_node_id@@Base>:
   135e4:	push	{r4, r5, r6, lr}
   135e8:	mov	r6, r1
   135ec:	ldr	r4, [pc, #52]	; 13628 <init_node_id@@Base+0x44>
   135f0:	mov	r1, #0
   135f4:	add	r4, pc, r4
   135f8:	mov	r5, r0
   135fc:	ldrd	r2, [r4, #24]
   13600:	adds	r2, r2, #1
   13604:	adc	r3, r3, #0
   13608:	strd	r2, [r4, #24]
   1360c:	bl	135a8 <init_ast_base_single@@Base>
   13610:	ldrd	r2, [r4, #32]
   13614:	str	r6, [r5, #8]
   13618:	adds	r2, r2, #1
   1361c:	adc	r3, r3, #0
   13620:	strd	r2, [r4, #32]
   13624:	pop	{r4, r5, r6, pc}
   13628:	andeq	r6, r1, r4, ror #19

0001362c <init_node_int@@Base>:
   1362c:	push	{r4, r5, r6, lr}
   13630:	mov	r6, r1
   13634:	ldr	r4, [pc, #52]	; 13670 <init_node_int@@Base+0x44>
   13638:	mov	r1, #1
   1363c:	add	r4, pc, r4
   13640:	mov	r5, r0
   13644:	ldrd	r2, [r4, #40]	; 0x28
   13648:	adds	r2, r2, #1
   1364c:	adc	r3, r3, #0
   13650:	strd	r2, [r4, #40]	; 0x28
   13654:	bl	135a8 <init_ast_base_single@@Base>
   13658:	ldrd	r2, [r4, #48]	; 0x30
   1365c:	str	r6, [r5, #8]
   13660:	adds	r2, r2, #1
   13664:	adc	r3, r3, #0
   13668:	strd	r2, [r4, #48]	; 0x30
   1366c:	pop	{r4, r5, r6, pc}
   13670:	muleq	r1, ip, r9

00013674 <init_node_function@@Base>:
   13674:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13678:	mov	r8, r1
   1367c:	ldr	r4, [pc, #60]	; 136c0 <init_node_function@@Base+0x4c>
   13680:	mov	r1, #2
   13684:	add	r4, pc, r4
   13688:	mov	r5, r0
   1368c:	ldrd	r6, [r4, #56]	; 0x38
   13690:	mov	r9, r2
   13694:	adds	r6, r6, #1
   13698:	adc	r7, r7, #0
   1369c:	strd	r6, [r4, #56]	; 0x38
   136a0:	bl	135a8 <init_ast_base_single@@Base>
   136a4:	ldrd	r0, [r4, #64]	; 0x40
   136a8:	str	r8, [r5, #8]
   136ac:	str	r9, [r5, #12]
   136b0:	adds	r0, r0, #1
   136b4:	adc	r1, r1, #0
   136b8:	strd	r0, [r4, #64]	; 0x40
   136bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136c0:	andeq	r6, r1, r4, asr r9

000136c4 <init_node_return@@Base>:
   136c4:	push	{r4, r5, r6, lr}
   136c8:	mov	r6, r1
   136cc:	ldr	r4, [pc, #52]	; 13708 <init_node_return@@Base+0x44>
   136d0:	mov	r1, #3
   136d4:	add	r4, pc, r4
   136d8:	mov	r5, r0
   136dc:	ldrd	r2, [r4, #72]	; 0x48
   136e0:	adds	r2, r2, #1
   136e4:	adc	r3, r3, #0
   136e8:	strd	r2, [r4, #72]	; 0x48
   136ec:	bl	135a8 <init_ast_base_single@@Base>
   136f0:	ldrd	r2, [r4, #80]	; 0x50
   136f4:	str	r6, [r5, #8]
   136f8:	adds	r2, r2, #1
   136fc:	adc	r3, r3, #0
   13700:	strd	r2, [r4, #80]	; 0x50
   13704:	pop	{r4, r5, r6, pc}
   13708:	andeq	r6, r1, r4, lsl #18

0001370c <init_node_if@@Base>:
   1370c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13710:	mov	r9, r1
   13714:	ldr	r4, [pc, #68]	; 13760 <init_node_if@@Base+0x54>
   13718:	mov	r1, #4
   1371c:	add	r4, pc, r4
   13720:	mov	r5, r0
   13724:	ldrd	r6, [r4, #88]	; 0x58
   13728:	mov	sl, r2
   1372c:	mov	r8, r3
   13730:	adds	r6, r6, #1
   13734:	adc	r7, r7, #0
   13738:	strd	r6, [r4, #88]	; 0x58
   1373c:	bl	135a8 <init_ast_base_single@@Base>
   13740:	ldrd	r0, [r4, #96]	; 0x60
   13744:	str	r9, [r5, #8]
   13748:	str	sl, [r5, #12]
   1374c:	adds	r0, r0, #1
   13750:	adc	r1, r1, #0
   13754:	str	r8, [r5, #16]
   13758:	strd	r0, [r4, #96]	; 0x60
   1375c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13760:			; <UNDEFINED> instruction: 0x000168bc

00013764 <init_node_boolean_operator@@Base>:
   13764:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13768:	mov	r9, r1
   1376c:	ldr	r5, [pc, #76]	; 137c0 <init_node_boolean_operator@@Base+0x5c>
   13770:	mov	r1, #0
   13774:	add	r5, pc, r5
   13778:	mov	r4, r0
   1377c:	ldrd	r6, [r5, #104]	; 0x68
   13780:	mov	r8, r3
   13784:	mov	sl, r2
   13788:	adds	r6, r6, #1
   1378c:	adc	r7, r7, #0
   13790:	strd	r6, [r5, #104]	; 0x68
   13794:	bl	135a8 <init_ast_base_single@@Base>
   13798:	ldrd	r0, [r5, #112]	; 0x70
   1379c:	mov	r3, #5
   137a0:	str	r9, [r4, #16]
   137a4:	adds	r0, r0, #1
   137a8:	adc	r1, r1, #0
   137ac:	str	sl, [r4, #8]
   137b0:	str	r8, [r4, #12]
   137b4:	strd	r0, [r5, #112]	; 0x70
   137b8:	str	r3, [r4]
   137bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137c0:	andeq	r6, r1, r4, ror #16

000137c4 <free_node_boolean_operator@@Base>:
   137c4:	push	{r4, r5, r6, lr}
   137c8:	mov	r5, r0
   137cc:	ldr	r4, [pc, #132]	; 13858 <free_node_boolean_operator@@Base+0x94>
   137d0:	ldr	r0, [r0, #4]
   137d4:	add	r4, pc, r4
   137d8:	ldrd	r2, [r4, #120]	; 0x78
   137dc:	adds	r2, r2, #1
   137e0:	adc	r3, r3, #0
   137e4:	cmp	r0, #0
   137e8:	strd	r2, [r4, #120]	; 0x78
   137ec:	beq	13814 <free_node_boolean_operator@@Base+0x50>
   137f0:	ldrd	r2, [r4, #128]	; 0x80
   137f4:	adds	r2, r2, #1
   137f8:	adc	r3, r3, #0
   137fc:	strd	r2, [r4, #128]	; 0x80
   13800:	bl	13860 <free_node@@Base>
   13804:	ldrd	r2, [r4, #136]	; 0x88
   13808:	adds	r2, r2, #1
   1380c:	adc	r3, r3, #0
   13810:	strd	r2, [r4, #136]	; 0x88
   13814:	ldr	r4, [pc, #64]	; 1385c <free_node_boolean_operator@@Base+0x98>
   13818:	ldr	r0, [r5, #8]
   1381c:	add	r4, pc, r4
   13820:	bl	13860 <free_node@@Base>
   13824:	ldrd	r2, [r4, #144]	; 0x90
   13828:	ldr	r0, [r5, #12]
   1382c:	adds	r2, r2, #1
   13830:	adc	r3, r3, #0
   13834:	strd	r2, [r4, #144]	; 0x90
   13838:	bl	13860 <free_node@@Base>
   1383c:	ldrd	r2, [r4, #152]	; 0x98
   13840:	mov	r0, r5
   13844:	adds	r2, r2, #1
   13848:	adc	r3, r3, #0
   1384c:	strd	r2, [r4, #152]	; 0x98
   13850:	pop	{r4, r5, r6, lr}
   13854:	b	1190c <free@plt>
   13858:	andeq	r6, r1, r4, lsl #16
   1385c:			; <UNDEFINED> instruction: 0x000167bc

00013860 <free_node@@Base>:
   13860:	ldr	ip, [pc, #420]	; 13a0c <free_node@@Base+0x1ac>
   13864:	ldr	r3, [r0]
   13868:	push	{r4, r5, r6, lr}
   1386c:	add	ip, pc, ip
   13870:	cmp	r3, #5
   13874:	addls	pc, pc, r3, lsl #2
   13878:	b	139b8 <free_node@@Base+0x158>
   1387c:	b	138c4 <free_node@@Base+0x64>
   13880:	b	138f8 <free_node@@Base+0x98>
   13884:	b	13928 <free_node@@Base+0xc8>
   13888:	b	13958 <free_node@@Base+0xf8>
   1388c:	b	13988 <free_node@@Base+0x128>
   13890:	b	13894 <free_node@@Base+0x34>
   13894:	ldr	r4, [pc, #372]	; 13a10 <free_node@@Base+0x1b0>
   13898:	add	r4, pc, r4
   1389c:	ldrd	r2, [r4, #208]	; 0xd0
   138a0:	adds	r2, r2, #1
   138a4:	adc	r3, r3, #0
   138a8:	strd	r2, [r4, #208]	; 0xd0
   138ac:	bl	137c4 <free_node_boolean_operator@@Base>
   138b0:	ldrd	r2, [r4, #248]	; 0xf8
   138b4:	adds	r2, r2, #1
   138b8:	adc	r3, r3, #0
   138bc:	strd	r2, [r4, #248]	; 0xf8
   138c0:	pop	{r4, r5, r6, pc}
   138c4:	ldr	r4, [pc, #328]	; 13a14 <free_node@@Base+0x1b4>
   138c8:	add	r4, pc, r4
   138cc:	add	r4, r4, #272	; 0x110
   138d0:	ldrd	r2, [r4, #-104]	; 0xffffff98
   138d4:	adds	r2, r2, #1
   138d8:	adc	r3, r3, #0
   138dc:	strd	r2, [r4, #-104]	; 0xffffff98
   138e0:	bl	13c24 <free_node_id@@Base>
   138e4:	ldrd	r2, [r4, #-8]
   138e8:	adds	r2, r2, #1
   138ec:	adc	r3, r3, #0
   138f0:	strd	r2, [r4, #-8]
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	ldr	r4, [pc, #280]	; 13a18 <free_node@@Base+0x1b8>
   138fc:	add	r4, pc, r4
   13900:	ldrd	r2, [r4, #176]	; 0xb0
   13904:	adds	r2, r2, #1
   13908:	adc	r3, r3, #0
   1390c:	strd	r2, [r4, #176]	; 0xb0
   13910:	bl	13bc0 <free_node_int@@Base>
   13914:	ldrd	r2, [r4, #216]	; 0xd8
   13918:	adds	r2, r2, #1
   1391c:	adc	r3, r3, #0
   13920:	strd	r2, [r4, #216]	; 0xd8
   13924:	pop	{r4, r5, r6, pc}
   13928:	ldr	r4, [pc, #236]	; 13a1c <free_node@@Base+0x1bc>
   1392c:	add	r4, pc, r4
   13930:	ldrd	r2, [r4, #184]	; 0xb8
   13934:	adds	r2, r2, #1
   13938:	adc	r3, r3, #0
   1393c:	strd	r2, [r4, #184]	; 0xb8
   13940:	bl	13b54 <free_node_function@@Base>
   13944:	ldrd	r2, [r4, #224]	; 0xe0
   13948:	adds	r2, r2, #1
   1394c:	adc	r3, r3, #0
   13950:	strd	r2, [r4, #224]	; 0xe0
   13954:	pop	{r4, r5, r6, pc}
   13958:	ldr	r4, [pc, #192]	; 13a20 <free_node@@Base+0x1c0>
   1395c:	add	r4, pc, r4
   13960:	ldrd	r2, [r4, #192]	; 0xc0
   13964:	adds	r2, r2, #1
   13968:	adc	r3, r3, #0
   1396c:	strd	r2, [r4, #192]	; 0xc0
   13970:	bl	13af0 <free_node_return@@Base>
   13974:	ldrd	r2, [r4, #232]	; 0xe8
   13978:	adds	r2, r2, #1
   1397c:	adc	r3, r3, #0
   13980:	strd	r2, [r4, #232]	; 0xe8
   13984:	pop	{r4, r5, r6, pc}
   13988:	ldr	r4, [pc, #148]	; 13a24 <free_node@@Base+0x1c4>
   1398c:	add	r4, pc, r4
   13990:	ldrd	r2, [r4, #200]	; 0xc8
   13994:	adds	r2, r2, #1
   13998:	adc	r3, r3, #0
   1399c:	strd	r2, [r4, #200]	; 0xc8
   139a0:	bl	13a34 <free_node_if@@Base>
   139a4:	ldrd	r2, [r4, #240]	; 0xf0
   139a8:	adds	r2, r2, #1
   139ac:	adc	r3, r3, #0
   139b0:	strd	r2, [r4, #240]	; 0xf0
   139b4:	pop	{r4, r5, r6, pc}
   139b8:	ldr	r6, [pc, #104]	; 13a28 <free_node@@Base+0x1c8>
   139bc:	ldr	r3, [pc, #104]	; 13a2c <free_node@@Base+0x1cc>
   139c0:	add	r6, pc, r6
   139c4:	ldr	r0, [pc, #100]	; 13a30 <free_node@@Base+0x1d0>
   139c8:	ldrd	r4, [r6, #160]	; 0xa0
   139cc:	add	r6, r6, #256	; 0x100
   139d0:	mov	r2, #31
   139d4:	adds	r4, r4, #1
   139d8:	adc	r5, r5, #0
   139dc:	mov	r1, #1
   139e0:	strd	r4, [r6, #-96]	; 0xffffffa0
   139e4:	ldr	r3, [ip, r3]
   139e8:	add	r0, pc, r0
   139ec:	ldr	r3, [r3]
   139f0:	bl	11930 <fwrite@plt>
   139f4:	ldrd	r2, [r6]
   139f8:	mov	r0, #1
   139fc:	adds	r2, r2, #1
   13a00:	adc	r3, r3, #0
   13a04:	strd	r2, [r6]
   13a08:	bl	119a8 <exit@plt>
   13a0c:	andeq	r5, r1, ip, lsl #15
   13a10:	andeq	r6, r1, r0, asr #14
   13a14:	andeq	r6, r1, r0, lsl r7
   13a18:	ldrdeq	r6, [r1], -ip
   13a1c:	andeq	r6, r1, ip, lsr #13
   13a20:	andeq	r6, r1, ip, ror r6
   13a24:	andeq	r6, r1, ip, asr #12
   13a28:	andeq	r6, r1, r8, lsl r6
   13a2c:	andeq	r0, r0, r8, lsr #1
   13a30:	andeq	r4, r0, r4, lsr r3

00013a34 <free_node_if@@Base>:
   13a34:	push	{r4, r5, r6, lr}
   13a38:	mov	r5, r0
   13a3c:	ldr	r4, [pc, #164]	; 13ae8 <free_node_if@@Base+0xb4>
   13a40:	ldr	r0, [r0, #4]
   13a44:	add	r4, pc, r4
   13a48:	add	r4, r4, #272	; 0x110
   13a4c:	ldrd	r2, [r4]
   13a50:	adds	r2, r2, #1
   13a54:	adc	r3, r3, #0
   13a58:	cmp	r0, #0
   13a5c:	strd	r2, [r4]
   13a60:	beq	13a88 <free_node_if@@Base+0x54>
   13a64:	ldrd	r2, [r4, #8]
   13a68:	adds	r2, r2, #1
   13a6c:	adc	r3, r3, #0
   13a70:	strd	r2, [r4, #8]
   13a74:	bl	13860 <free_node@@Base>
   13a78:	ldrd	r2, [r4, #16]
   13a7c:	adds	r2, r2, #1
   13a80:	adc	r3, r3, #0
   13a84:	strd	r2, [r4, #16]
   13a88:	ldr	r4, [pc, #92]	; 13aec <free_node_if@@Base+0xb8>
   13a8c:	ldr	r0, [r5, #8]
   13a90:	add	r4, pc, r4
   13a94:	add	r4, r4, #272	; 0x110
   13a98:	bl	13860 <free_node@@Base>
   13a9c:	ldrd	r2, [r4, #24]
   13aa0:	ldr	r0, [r5, #12]
   13aa4:	adds	r2, r2, #1
   13aa8:	adc	r3, r3, #0
   13aac:	strd	r2, [r4, #24]
   13ab0:	bl	13860 <free_node@@Base>
   13ab4:	ldrd	r2, [r4, #32]
   13ab8:	ldr	r0, [r5, #16]
   13abc:	adds	r2, r2, #1
   13ac0:	adc	r3, r3, #0
   13ac4:	strd	r2, [r4, #32]
   13ac8:	bl	13860 <free_node@@Base>
   13acc:	ldrd	r2, [r4, #40]	; 0x28
   13ad0:	mov	r0, r5
   13ad4:	adds	r2, r2, #1
   13ad8:	adc	r3, r3, #0
   13adc:	strd	r2, [r4, #40]	; 0x28
   13ae0:	pop	{r4, r5, r6, lr}
   13ae4:	b	1190c <free@plt>
   13ae8:	muleq	r1, r4, r5
   13aec:	andeq	r6, r1, r8, asr #10

00013af0 <free_node_return@@Base>:
   13af0:	push	{r4, r5, r6, lr}
   13af4:	mov	r5, r0
   13af8:	ldr	r4, [pc, #80]	; 13b50 <free_node_return@@Base+0x60>
   13afc:	ldr	r0, [r0, #4]
   13b00:	add	r4, pc, r4
   13b04:	add	r4, r4, #320	; 0x140
   13b08:	ldrd	r2, [r4]
   13b0c:	adds	r2, r2, #1
   13b10:	adc	r3, r3, #0
   13b14:	cmp	r0, #0
   13b18:	strd	r2, [r4]
   13b1c:	beq	13b44 <free_node_return@@Base+0x54>
   13b20:	ldrd	r2, [r4, #8]
   13b24:	adds	r2, r2, #1
   13b28:	adc	r3, r3, #0
   13b2c:	strd	r2, [r4, #8]
   13b30:	bl	13860 <free_node@@Base>
   13b34:	ldrd	r2, [r4, #16]
   13b38:	adds	r2, r2, #1
   13b3c:	adc	r3, r3, #0
   13b40:	strd	r2, [r4, #16]
   13b44:	mov	r0, r5
   13b48:	pop	{r4, r5, r6, lr}
   13b4c:	b	1190c <free@plt>
   13b50:	ldrdeq	r6, [r1], -r8

00013b54 <free_node_function@@Base>:
   13b54:	push	{r4, r5, r6, lr}
   13b58:	mov	r5, r0
   13b5c:	ldr	r4, [pc, #88]	; 13bbc <free_node_function@@Base+0x68>
   13b60:	ldr	r0, [r0, #4]
   13b64:	add	r4, pc, r4
   13b68:	add	r4, r4, #352	; 0x160
   13b6c:	ldrd	r2, [r4, #-8]
   13b70:	adds	r2, r2, #1
   13b74:	adc	r3, r3, #0
   13b78:	cmp	r0, #0
   13b7c:	strd	r2, [r4, #-8]
   13b80:	beq	13ba8 <free_node_function@@Base+0x54>
   13b84:	ldrd	r2, [r4]
   13b88:	adds	r2, r2, #1
   13b8c:	adc	r3, r3, #0
   13b90:	strd	r2, [r4]
   13b94:	bl	13860 <free_node@@Base>
   13b98:	ldrd	r2, [r4, #8]
   13b9c:	adds	r2, r2, #1
   13ba0:	adc	r3, r3, #0
   13ba4:	strd	r2, [r4, #8]
   13ba8:	ldr	r0, [r5, #8]
   13bac:	bl	1190c <free@plt>
   13bb0:	mov	r0, r5
   13bb4:	pop	{r4, r5, r6, lr}
   13bb8:	b	1190c <free@plt>
   13bbc:	andeq	r6, r1, r4, ror r4

00013bc0 <free_node_int@@Base>:
   13bc0:	push	{r4, r5, r6, lr}
   13bc4:	mov	r5, r0
   13bc8:	ldr	r4, [pc, #80]	; 13c20 <free_node_int@@Base+0x60>
   13bcc:	ldr	r0, [r0, #4]
   13bd0:	add	r4, pc, r4
   13bd4:	add	r4, r4, #368	; 0x170
   13bd8:	ldrd	r2, [r4]
   13bdc:	adds	r2, r2, #1
   13be0:	adc	r3, r3, #0
   13be4:	cmp	r0, #0
   13be8:	strd	r2, [r4]
   13bec:	beq	13c14 <free_node_int@@Base+0x54>
   13bf0:	ldrd	r2, [r4, #8]
   13bf4:	adds	r2, r2, #1
   13bf8:	adc	r3, r3, #0
   13bfc:	strd	r2, [r4, #8]
   13c00:	bl	13860 <free_node@@Base>
   13c04:	ldrd	r2, [r4, #16]
   13c08:	adds	r2, r2, #1
   13c0c:	adc	r3, r3, #0
   13c10:	strd	r2, [r4, #16]
   13c14:	mov	r0, r5
   13c18:	pop	{r4, r5, r6, lr}
   13c1c:	b	1190c <free@plt>
   13c20:	andeq	r6, r1, r8, lsl #8

00013c24 <free_node_id@@Base>:
   13c24:	push	{r4, r5, r6, lr}
   13c28:	mov	r5, r0
   13c2c:	ldr	r4, [pc, #80]	; 13c84 <free_node_id@@Base+0x60>
   13c30:	ldr	r0, [r0, #4]
   13c34:	add	r4, pc, r4
   13c38:	add	r4, r4, #400	; 0x190
   13c3c:	ldrd	r2, [r4, #-8]
   13c40:	adds	r2, r2, #1
   13c44:	adc	r3, r3, #0
   13c48:	cmp	r0, #0
   13c4c:	strd	r2, [r4, #-8]
   13c50:	beq	13c78 <free_node_id@@Base+0x54>
   13c54:	ldrd	r2, [r4]
   13c58:	adds	r2, r2, #1
   13c5c:	adc	r3, r3, #0
   13c60:	strd	r2, [r4]
   13c64:	bl	13860 <free_node@@Base>
   13c68:	ldrd	r2, [r4, #8]
   13c6c:	adds	r2, r2, #1
   13c70:	adc	r3, r3, #0
   13c74:	strd	r2, [r4, #8]
   13c78:	mov	r0, r5
   13c7c:	pop	{r4, r5, r6, lr}
   13c80:	b	1190c <free@plt>
   13c84:	andeq	r6, r1, r4, lsr #7

00013c88 <get_boolean_op_value@@Base>:
   13c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c8c:	mov	r1, #2
   13c90:	ldr	r4, [pc, #592]	; 13ee8 <get_boolean_op_value@@Base+0x260>
   13c94:	ldr	r5, [r0, #4]
   13c98:	add	r4, pc, r4
   13c9c:	add	r4, r4, #416	; 0x1a0
   13ca0:	mov	r0, r5
   13ca4:	ldrd	r2, [r4]
   13ca8:	ldr	r6, [pc, #572]	; 13eec <get_boolean_op_value@@Base+0x264>
   13cac:	adds	r2, r2, #1
   13cb0:	adc	r3, r3, #0
   13cb4:	add	r6, pc, r6
   13cb8:	strd	r2, [r4]
   13cbc:	bl	11a38 <strnlen@plt>
   13cc0:	cmp	r0, #2
   13cc4:	beq	13d38 <get_boolean_op_value@@Base+0xb0>
   13cc8:	ldrd	r2, [r4, #16]
   13ccc:	ldrb	r1, [r5]
   13cd0:	adds	r2, r2, #1
   13cd4:	adc	r3, r3, #0
   13cd8:	cmp	r1, #60	; 0x3c
   13cdc:	strd	r2, [r4, #16]
   13ce0:	beq	13de8 <get_boolean_op_value@@Base+0x160>
   13ce4:	cmp	r1, #62	; 0x3e
   13ce8:	beq	13dc8 <get_boolean_op_value@@Base+0x140>
   13cec:	cmp	r1, #33	; 0x21
   13cf0:	beq	13de0 <get_boolean_op_value@@Base+0x158>
   13cf4:	ldrd	r8, [r4, #80]	; 0x50
   13cf8:	ldr	r3, [pc, #496]	; 13ef0 <get_boolean_op_value@@Base+0x268>
   13cfc:	ldr	r1, [pc, #496]	; 13ef4 <get_boolean_op_value@@Base+0x26c>
   13d00:	adds	r8, r8, #1
   13d04:	adc	r9, r9, #0
   13d08:	mov	r2, r5
   13d0c:	strd	r8, [r4, #80]	; 0x50
   13d10:	ldr	r3, [r6, r3]
   13d14:	add	r1, pc, r1
   13d18:	ldr	r0, [r3]
   13d1c:	bl	119cc <fprintf@plt>
   13d20:	ldrd	r2, [r4, #104]	; 0x68
   13d24:	mov	r0, #1
   13d28:	adds	r2, r2, #1
   13d2c:	adc	r3, r3, #0
   13d30:	strd	r2, [r4, #104]	; 0x68
   13d34:	bl	119a8 <exit@plt>
   13d38:	ldrd	r8, [r4, #8]
   13d3c:	ldr	r1, [pc, #436]	; 13ef8 <get_boolean_op_value@@Base+0x270>
   13d40:	mov	r2, r0
   13d44:	adds	r8, r8, #1
   13d48:	adc	r9, r9, #0
   13d4c:	mov	r7, r0
   13d50:	add	r1, pc, r1
   13d54:	mov	r0, r5
   13d58:	strd	r8, [r4, #8]
   13d5c:	bl	11a74 <strncmp@plt>
   13d60:	cmp	r0, #0
   13d64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d68:	ldrd	r8, [r4, #24]
   13d6c:	ldr	r1, [pc, #392]	; 13efc <get_boolean_op_value@@Base+0x274>
   13d70:	mov	r2, r7
   13d74:	adds	r8, r8, #1
   13d78:	adc	r9, r9, #0
   13d7c:	add	r1, pc, r1
   13d80:	mov	r0, r5
   13d84:	strd	r8, [r4, #24]
   13d88:	bl	11a74 <strncmp@plt>
   13d8c:	cmp	r0, #0
   13d90:	beq	13e00 <get_boolean_op_value@@Base+0x178>
   13d94:	ldrd	r8, [r4, #32]
   13d98:	ldr	r1, [pc, #352]	; 13f00 <get_boolean_op_value@@Base+0x278>
   13d9c:	mov	r2, r7
   13da0:	adds	r8, r8, #1
   13da4:	adc	r9, r9, #0
   13da8:	add	r1, pc, r1
   13dac:	mov	r0, r5
   13db0:	strd	r8, [r4, #32]
   13db4:	bl	11a74 <strncmp@plt>
   13db8:	cmp	r0, #0
   13dbc:	bne	13e08 <get_boolean_op_value@@Base+0x180>
   13dc0:	mov	r0, r7
   13dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dc8:	ldrd	r2, [r4, #96]	; 0x60
   13dcc:	mov	r0, #7
   13dd0:	adds	r2, r2, #1
   13dd4:	adc	r3, r3, #0
   13dd8:	strd	r2, [r4, #96]	; 0x60
   13ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13de0:	mov	r0, #8
   13de4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13de8:	ldrd	r2, [r4, #88]	; 0x58
   13dec:	mov	r0, #6
   13df0:	adds	r2, r2, #1
   13df4:	adc	r3, r3, #0
   13df8:	strd	r2, [r4, #88]	; 0x58
   13dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e00:	mov	r0, #1
   13e04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e08:	ldrd	r8, [r4, #40]	; 0x28
   13e0c:	ldr	r1, [pc, #240]	; 13f04 <get_boolean_op_value@@Base+0x27c>
   13e10:	mov	r2, r7
   13e14:	adds	r8, r8, #1
   13e18:	adc	r9, r9, #0
   13e1c:	add	r1, pc, r1
   13e20:	mov	r0, r5
   13e24:	strd	r8, [r4, #40]	; 0x28
   13e28:	bl	11a74 <strncmp@plt>
   13e2c:	cmp	r0, #0
   13e30:	bne	13e3c <get_boolean_op_value@@Base+0x1b4>
   13e34:	mov	r0, #3
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e3c:	ldrd	r8, [r4, #48]	; 0x30
   13e40:	ldr	r1, [pc, #192]	; 13f08 <get_boolean_op_value@@Base+0x280>
   13e44:	mov	r2, r7
   13e48:	adds	r8, r8, #1
   13e4c:	adc	r9, r9, #0
   13e50:	add	r1, pc, r1
   13e54:	mov	r0, r5
   13e58:	strd	r8, [r4, #48]	; 0x30
   13e5c:	bl	11a74 <strncmp@plt>
   13e60:	cmp	r0, #0
   13e64:	bne	13e70 <get_boolean_op_value@@Base+0x1e8>
   13e68:	mov	r0, #4
   13e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e70:	ldrd	r8, [r4, #56]	; 0x38
   13e74:	ldr	r1, [pc, #144]	; 13f0c <get_boolean_op_value@@Base+0x284>
   13e78:	mov	r2, r7
   13e7c:	adds	r8, r8, #1
   13e80:	adc	r9, r9, #0
   13e84:	add	r1, pc, r1
   13e88:	mov	r0, r5
   13e8c:	strd	r8, [r4, #56]	; 0x38
   13e90:	bl	11a74 <strncmp@plt>
   13e94:	cmp	r0, #0
   13e98:	bne	13ea4 <get_boolean_op_value@@Base+0x21c>
   13e9c:	mov	r0, #5
   13ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ea4:	ldrd	r8, [r4, #64]	; 0x40
   13ea8:	ldr	r3, [pc, #64]	; 13ef0 <get_boolean_op_value@@Base+0x268>
   13eac:	ldr	r1, [pc, #92]	; 13f10 <get_boolean_op_value@@Base+0x288>
   13eb0:	adds	r8, r8, #1
   13eb4:	adc	r9, r9, #0
   13eb8:	mov	r2, r5
   13ebc:	strd	r8, [r4, #64]	; 0x40
   13ec0:	ldr	r3, [r6, r3]
   13ec4:	add	r1, pc, r1
   13ec8:	ldr	r0, [r3]
   13ecc:	bl	119cc <fprintf@plt>
   13ed0:	ldrd	r2, [r4, #72]	; 0x48
   13ed4:	mov	r0, #1
   13ed8:	adds	r2, r2, #1
   13edc:	adc	r3, r3, #0
   13ee0:	strd	r2, [r4, #72]	; 0x48
   13ee4:	bl	119a8 <exit@plt>
   13ee8:	andeq	r6, r1, r0, asr #6
   13eec:	andeq	r5, r1, r4, asr #6
   13ef0:	andeq	r0, r0, r8, lsr #1
   13ef4:	andeq	r4, r0, r0, asr #32
   13ef8:	andeq	r3, r0, ip, ror #31
   13efc:	andeq	r3, r0, r4, asr #31
   13f00:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   13f04:	andeq	r3, r0, ip, lsr #30
   13f08:	strdeq	r3, [r0], -ip
   13f0c:	andeq	r3, r0, ip, asr #29
   13f10:	muleq	r0, r0, lr

00013f14 <init_grammar@@Base>:
   13f14:	ldr	ip, [pc, #24]	; 13f34 <init_grammar@@Base+0x20>
   13f18:	str	r1, [r0]
   13f1c:	add	ip, pc, ip
   13f20:	ldrd	r2, [ip]
   13f24:	adds	r2, r2, #1
   13f28:	adc	r3, r3, #0
   13f2c:	strd	r2, [ip]
   13f30:	bx	lr
   13f34:	andeq	r6, r1, ip, asr #5

00013f38 <destroy_grammar@@Base>:
   13f38:	ldr	r1, [pc, #20]	; 13f54 <destroy_grammar@@Base+0x1c>
   13f3c:	add	r1, pc, r1
   13f40:	ldrd	r2, [r1, #8]
   13f44:	adds	r2, r2, #1
   13f48:	adc	r3, r3, #0
   13f4c:	strd	r2, [r1, #8]
   13f50:	bx	lr
   13f54:	andeq	r6, r1, ip, lsr #5

00013f58 <read_return_expression@@Base>:
   13f58:	push	{r4, r5, r6, r7, r8, lr}
   13f5c:	mov	r5, r0
   13f60:	ldr	r4, [pc, #260]	; 1406c <read_return_expression@@Base+0x114>
   13f64:	ldr	r0, [r0]
   13f68:	add	r4, pc, r4
   13f6c:	ldrd	r2, [r4, #16]
   13f70:	adds	r2, r2, #1
   13f74:	adc	r3, r3, #0
   13f78:	strd	r2, [r4, #16]
   13f7c:	bl	126e8 <next@@Base>
   13f80:	ldrd	r2, [r4, #24]
   13f84:	adds	r2, r2, #1
   13f88:	adc	r3, r3, #0
   13f8c:	strd	r2, [r4, #24]
   13f90:	ldr	r1, [r0]
   13f94:	cmp	r1, #1
   13f98:	bne	14060 <read_return_expression@@Base+0x108>
   13f9c:	ldrd	r2, [r4, #32]
   13fa0:	mov	r6, r0
   13fa4:	mov	r0, #12
   13fa8:	adds	r2, r2, #1
   13fac:	adc	r3, r3, #0
   13fb0:	strd	r2, [r4, #32]
   13fb4:	bl	11960 <malloc@plt>
   13fb8:	ldr	r1, [r6, #4]
   13fbc:	mov	r7, r0
   13fc0:	bl	1362c <init_node_int@@Base>
   13fc4:	ldrd	r2, [r4, #40]	; 0x28
   13fc8:	mov	r0, r6
   13fcc:	adds	r2, r2, #1
   13fd0:	adc	r3, r3, #0
   13fd4:	strd	r2, [r4, #40]	; 0x28
   13fd8:	bl	12340 <free_token_int_value@@Base>
   13fdc:	ldrd	r2, [r4, #48]	; 0x30
   13fe0:	mov	r0, #12
   13fe4:	adds	r2, r2, #1
   13fe8:	adc	r3, r3, #0
   13fec:	strd	r2, [r4, #48]	; 0x30
   13ff0:	bl	11960 <malloc@plt>
   13ff4:	mov	r1, r7
   13ff8:	mov	r6, r0
   13ffc:	bl	136c4 <init_node_return@@Base>
   14000:	ldrd	r2, [r4, #56]	; 0x38
   14004:	ldr	r0, [r5]
   14008:	adds	r2, r2, #1
   1400c:	adc	r3, r3, #0
   14010:	strd	r2, [r4, #56]	; 0x38
   14014:	bl	126e8 <next@@Base>
   14018:	ldrd	r2, [r4, #64]	; 0x40
   1401c:	adds	r2, r2, #1
   14020:	adc	r3, r3, #0
   14024:	strd	r2, [r4, #64]	; 0x40
   14028:	ldr	r3, [r0]
   1402c:	cmp	r3, #8
   14030:	bne	14060 <read_return_expression@@Base+0x108>
   14034:	ldrd	r2, [r4, #72]	; 0x48
   14038:	adds	r2, r2, #1
   1403c:	adc	r3, r3, #0
   14040:	strd	r2, [r4, #72]	; 0x48
   14044:	bl	12420 <free_token_semicolon@@Base>
   14048:	ldrd	r2, [r4, #80]	; 0x50
   1404c:	mov	r0, r6
   14050:	adds	r2, r2, #1
   14054:	adc	r3, r3, #0
   14058:	strd	r2, [r4, #80]	; 0x50
   1405c:	pop	{r4, r5, r6, r7, r8, pc}
   14060:	mov	r6, #0
   14064:	mov	r0, r6
   14068:	pop	{r4, r5, r6, r7, r8, pc}
   1406c:	andeq	r6, r1, r0, lsl #5

00014070 <read_boolean_unary_expression@@Base>:
   14070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14074:	mov	r6, r0
   14078:	ldr	r4, [pc, #364]	; 141ec <read_boolean_unary_expression@@Base+0x17c>
   1407c:	mov	r0, #20
   14080:	add	r4, pc, r4
   14084:	ldrd	r2, [r4, #88]	; 0x58
   14088:	adds	r2, r2, #1
   1408c:	adc	r3, r3, #0
   14090:	strd	r2, [r4, #88]	; 0x58
   14094:	bl	11960 <malloc@plt>
   14098:	mov	r5, r0
   1409c:	ldr	r0, [r6]
   140a0:	bl	126e8 <next@@Base>
   140a4:	ldr	r7, [r0]
   140a8:	cmp	r7, #12
   140ac:	bne	14184 <read_boolean_unary_expression@@Base+0x114>
   140b0:	ldrd	r2, [r4, #104]	; 0x68
   140b4:	mov	r9, r0
   140b8:	adds	r2, r2, #1
   140bc:	adc	r3, r3, #0
   140c0:	strd	r2, [r4, #104]	; 0x68
   140c4:	bl	13c88 <get_boolean_op_value@@Base>
   140c8:	ldrd	r2, [r4, #120]	; 0x78
   140cc:	adds	r2, r2, #1
   140d0:	adc	r3, r3, #0
   140d4:	strd	r2, [r4, #120]	; 0x78
   140d8:	mov	r8, r0
   140dc:	mov	r0, r9
   140e0:	bl	124a0 <free_token_boolean_op@@Base>
   140e4:	ldrd	r2, [r4, #128]	; 0x80
   140e8:	ldr	r0, [r6]
   140ec:	adds	r2, r2, #1
   140f0:	adc	r3, r3, #0
   140f4:	strd	r2, [r4, #128]	; 0x80
   140f8:	bl	126e8 <next@@Base>
   140fc:	ldr	r3, [r0]
   14100:	mov	r9, r0
   14104:	cmp	r3, #1
   14108:	bne	141b8 <read_boolean_unary_expression@@Base+0x148>
   1410c:	ldrd	r2, [r4, #144]	; 0x90
   14110:	mov	r0, r7
   14114:	adds	r2, r2, #1
   14118:	adc	r3, r3, #0
   1411c:	strd	r2, [r4, #144]	; 0x90
   14120:	bl	11960 <malloc@plt>
   14124:	ldr	r1, [r9, #4]
   14128:	mov	sl, r0
   1412c:	bl	1362c <init_node_int@@Base>
   14130:	ldrd	r6, [r4, #160]	; 0xa0
   14134:	mov	r0, r9
   14138:	adds	r6, r6, #1
   1413c:	adc	r7, r7, #0
   14140:	strd	r6, [r4, #160]	; 0xa0
   14144:	bl	12340 <free_token_int_value@@Base>
   14148:	ldrd	r6, [r4, #168]	; 0xa8
   1414c:	mov	r2, sl
   14150:	mov	r0, r5
   14154:	adds	r6, r6, #1
   14158:	adc	r7, r7, #0
   1415c:	mov	r1, r8
   14160:	mov	r3, #0
   14164:	strd	r6, [r4, #168]	; 0xa8
   14168:	bl	13764 <init_node_boolean_operator@@Base>
   1416c:	ldrd	r2, [r4, #176]	; 0xb0
   14170:	mov	r0, r5
   14174:	adds	r2, r2, #1
   14178:	adc	r3, r3, #0
   1417c:	strd	r2, [r4, #176]	; 0xb0
   14180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14184:	ldrd	r2, [r4, #96]	; 0x60
   14188:	mov	r0, r5
   1418c:	mov	r5, #0
   14190:	adds	r2, r2, #1
   14194:	adc	r3, r3, #0
   14198:	strd	r2, [r4, #96]	; 0x60
   1419c:	bl	137c4 <free_node_boolean_operator@@Base>
   141a0:	ldrd	r2, [r4, #112]	; 0x70
   141a4:	mov	r0, r5
   141a8:	adds	r2, r2, #1
   141ac:	adc	r3, r3, #0
   141b0:	strd	r2, [r4, #112]	; 0x70
   141b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141b8:	ldrd	r2, [r4, #136]	; 0x88
   141bc:	mov	r0, r5
   141c0:	mov	r5, #0
   141c4:	adds	r2, r2, #1
   141c8:	adc	r3, r3, #0
   141cc:	strd	r2, [r4, #136]	; 0x88
   141d0:	bl	137c4 <free_node_boolean_operator@@Base>
   141d4:	ldrd	r2, [r4, #152]	; 0x98
   141d8:	mov	r0, r5
   141dc:	adds	r2, r2, #1
   141e0:	adc	r3, r3, #0
   141e4:	strd	r2, [r4, #152]	; 0x98
   141e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141ec:	andeq	r6, r1, r8, ror #2

000141f0 <read_boolean_binary_expression@@Base>:
   141f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141f4:	mov	r5, r0
   141f8:	ldr	r4, [pc, #588]	; 1444c <read_boolean_binary_expression@@Base+0x25c>
   141fc:	ldr	r0, [r0]
   14200:	add	r4, pc, r4
   14204:	ldrd	r2, [r4, #184]	; 0xb8
   14208:	adds	r2, r2, #1
   1420c:	adc	r3, r3, #0
   14210:	strd	r2, [r4, #184]	; 0xb8
   14214:	bl	126e8 <next@@Base>
   14218:	ldr	r1, [r0]
   1421c:	mov	r7, r0
   14220:	cmp	r1, #1
   14224:	beq	14294 <read_boolean_binary_expression@@Base+0xa4>
   14228:	ldrd	r2, [r4, #192]	; 0xc0
   1422c:	adds	r2, r2, #1
   14230:	adc	r3, r3, #0
   14234:	cmp	r1, #12
   14238:	strd	r2, [r4, #192]	; 0xc0
   1423c:	movne	r5, #0
   14240:	bne	1428c <read_boolean_binary_expression@@Base+0x9c>
   14244:	ldrd	r2, [r4, #208]	; 0xd0
   14248:	mov	r1, r0
   1424c:	ldr	r0, [r5]
   14250:	adds	r2, r2, #1
   14254:	adc	r3, r3, #0
   14258:	strd	r2, [r4, #208]	; 0xd0
   1425c:	bl	12594 <push_back@@Base>
   14260:	ldrd	r2, [r4, #216]	; 0xd8
   14264:	mov	r0, r5
   14268:	adds	r2, r2, #1
   1426c:	adc	r3, r3, #0
   14270:	strd	r2, [r4, #216]	; 0xd8
   14274:	bl	14070 <read_boolean_unary_expression@@Base>
   14278:	ldrd	r2, [r4, #224]	; 0xe0
   1427c:	adds	r2, r2, #1
   14280:	adc	r3, r3, #0
   14284:	strd	r2, [r4, #224]	; 0xe0
   14288:	mov	r5, r0
   1428c:	mov	r0, r5
   14290:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14294:	ldrd	r2, [r4, #200]	; 0xc8
   14298:	mov	r0, #12
   1429c:	adds	r2, r2, #1
   142a0:	adc	r3, r3, #0
   142a4:	strd	r2, [r4, #200]	; 0xc8
   142a8:	bl	11960 <malloc@plt>
   142ac:	ldr	r1, [r7, #4]
   142b0:	mov	r6, r0
   142b4:	bl	1362c <init_node_int@@Base>
   142b8:	ldrd	r2, [r4, #232]	; 0xe8
   142bc:	mov	r0, r7
   142c0:	adds	r2, r2, #1
   142c4:	adc	r3, r3, #0
   142c8:	strd	r2, [r4, #232]	; 0xe8
   142cc:	bl	12340 <free_token_int_value@@Base>
   142d0:	ldrd	r2, [r4, #240]	; 0xf0
   142d4:	ldr	r0, [r5]
   142d8:	adds	r2, r2, #1
   142dc:	adc	r3, r3, #0
   142e0:	strd	r2, [r4, #240]	; 0xf0
   142e4:	bl	126e8 <next@@Base>
   142e8:	ldr	r8, [r0]
   142ec:	mov	r9, r0
   142f0:	cmp	r8, #12
   142f4:	bne	143e4 <read_boolean_binary_expression@@Base+0x1f4>
   142f8:	add	r1, r4, #256	; 0x100
   142fc:	add	r7, r4, #288	; 0x120
   14300:	ldrd	r2, [r1]
   14304:	adds	r2, r2, #1
   14308:	adc	r3, r3, #0
   1430c:	strd	r2, [r1]
   14310:	bl	13c88 <get_boolean_op_value@@Base>
   14314:	add	r1, r4, #272	; 0x110
   14318:	ldrd	r2, [r1]
   1431c:	adds	r2, r2, #1
   14320:	adc	r3, r3, #0
   14324:	strd	r2, [r1]
   14328:	mov	sl, r0
   1432c:	mov	r0, r9
   14330:	bl	124a0 <free_token_boolean_op@@Base>
   14334:	ldrd	r2, [r7, #-8]
   14338:	ldr	r0, [r5]
   1433c:	adds	r2, r2, #1
   14340:	adc	r3, r3, #0
   14344:	strd	r2, [r7, #-8]
   14348:	bl	126e8 <next@@Base>
   1434c:	ldr	r3, [r0]
   14350:	mov	r9, r0
   14354:	cmp	r3, #1
   14358:	bne	14418 <read_boolean_binary_expression@@Base+0x228>
   1435c:	add	r1, r4, #304	; 0x130
   14360:	mov	r0, r8
   14364:	ldrd	r2, [r1, #-8]
   14368:	add	r5, r4, #320	; 0x140
   1436c:	add	r4, r4, #336	; 0x150
   14370:	adds	r2, r2, #1
   14374:	adc	r3, r3, #0
   14378:	strd	r2, [r1, #-8]
   1437c:	bl	11960 <malloc@plt>
   14380:	ldr	r1, [r9, #4]
   14384:	mov	r7, r0
   14388:	bl	1362c <init_node_int@@Base>
   1438c:	ldrd	r2, [r5, #-8]
   14390:	mov	r0, r9
   14394:	adds	r2, r2, #1
   14398:	adc	r3, r3, #0
   1439c:	strd	r2, [r5, #-8]
   143a0:	bl	12340 <free_token_int_value@@Base>
   143a4:	ldrd	r2, [r5]
   143a8:	mov	r0, #20
   143ac:	adds	r2, r2, #1
   143b0:	adc	r3, r3, #0
   143b4:	strd	r2, [r5]
   143b8:	bl	11960 <malloc@plt>
   143bc:	mov	r3, r7
   143c0:	mov	r2, r6
   143c4:	mov	r1, sl
   143c8:	mov	r5, r0
   143cc:	bl	13764 <init_node_boolean_operator@@Base>
   143d0:	ldrd	r2, [r4, #-8]
   143d4:	adds	r2, r2, #1
   143d8:	adc	r3, r3, #0
   143dc:	strd	r2, [r4, #-8]
   143e0:	b	1428c <read_boolean_binary_expression@@Base+0x9c>
   143e4:	ldrd	r2, [r4, #248]	; 0xf8
   143e8:	add	r4, r4, #272	; 0x110
   143ec:	mov	r0, r6
   143f0:	adds	r2, r2, #1
   143f4:	adc	r3, r3, #0
   143f8:	mov	r5, #0
   143fc:	strd	r2, [r4, #-24]	; 0xffffffe8
   14400:	bl	13860 <free_node@@Base>
   14404:	ldrd	r2, [r4, #-8]
   14408:	adds	r2, r2, #1
   1440c:	adc	r3, r3, #0
   14410:	strd	r2, [r4, #-8]
   14414:	b	1428c <read_boolean_binary_expression@@Base+0x9c>
   14418:	ldrd	r2, [r7]
   1441c:	add	r4, r4, #304	; 0x130
   14420:	mov	r0, r6
   14424:	adds	r2, r2, #1
   14428:	adc	r3, r3, #0
   1442c:	mov	r5, #0
   14430:	strd	r2, [r7]
   14434:	bl	13860 <free_node@@Base>
   14438:	ldrd	r2, [r4]
   1443c:	adds	r2, r2, #1
   14440:	adc	r3, r3, #0
   14444:	strd	r2, [r4]
   14448:	b	1428c <read_boolean_binary_expression@@Base+0x9c>
   1444c:	andeq	r5, r1, r8, ror #31

00014450 <read_single_boolean_expression@@Base>:
   14450:	cmp	r1, #0
   14454:	push	{r4, r5, r6, r7, r8, lr}
   14458:	beq	144e0 <read_single_boolean_expression@@Base+0x90>
   1445c:	mov	r6, r3
   14460:	ldr	r3, [r2]
   14464:	mov	r5, r2
   14468:	cmp	r3, #0
   1446c:	beq	14518 <read_single_boolean_expression@@Base+0xc8>
   14470:	ldr	r4, [pc, #196]	; 1453c <read_single_boolean_expression@@Base+0xec>
   14474:	add	r4, pc, r4
   14478:	add	r4, r4, #336	; 0x150
   1447c:	ldrd	r2, [r4, #16]
   14480:	adds	r2, r2, #1
   14484:	adc	r3, r3, #0
   14488:	strd	r2, [r4, #16]
   1448c:	bl	141f0 <read_boolean_binary_expression@@Base>
   14490:	ldrd	r2, [r4, #32]
   14494:	adds	r2, r2, #1
   14498:	adc	r3, r3, #0
   1449c:	strd	r2, [r4, #32]
   144a0:	mov	r8, r0
   144a4:	mov	r0, #20
   144a8:	bl	11960 <malloc@plt>
   144ac:	mov	r3, r8
   144b0:	mov	r1, r6
   144b4:	mov	r2, #0
   144b8:	mov	r7, r0
   144bc:	bl	13764 <init_node_boolean_operator@@Base>
   144c0:	ldrd	r2, [r4, #40]	; 0x28
   144c4:	mov	r1, #0
   144c8:	str	r1, [r5]
   144cc:	adds	r2, r2, #1
   144d0:	adc	r3, r3, #0
   144d4:	strd	r2, [r4, #40]	; 0x28
   144d8:	mov	r0, r7
   144dc:	pop	{r4, r5, r6, r7, r8, pc}
   144e0:	ldr	r4, [pc, #88]	; 14540 <read_single_boolean_expression@@Base+0xf0>
   144e4:	add	r4, pc, r4
   144e8:	add	r4, r4, #336	; 0x150
   144ec:	ldrd	r2, [r4]
   144f0:	adds	r2, r2, #1
   144f4:	adc	r3, r3, #0
   144f8:	strd	r2, [r4]
   144fc:	bl	141f0 <read_boolean_binary_expression@@Base>
   14500:	ldrd	r2, [r4, #8]
   14504:	adds	r2, r2, #1
   14508:	adc	r3, r3, #0
   1450c:	strd	r2, [r4, #8]
   14510:	mov	r7, r0
   14514:	b	144d8 <read_single_boolean_expression@@Base+0x88>
   14518:	ldr	r2, [pc, #36]	; 14544 <read_single_boolean_expression@@Base+0xf4>
   1451c:	ldr	r3, [r3, #4]
   14520:	add	r2, pc, r2
   14524:	add	r3, r2, #336	; 0x150
   14528:	ldrd	r0, [r3, #24]
   1452c:	adds	r0, r0, #1
   14530:	adc	r1, r1, #0
   14534:	strd	r0, [r3, #24]
   14538:	udf	#0
   1453c:	andeq	r5, r1, r4, ror sp
   14540:	andeq	r5, r1, r4, lsl #26
   14544:	andeq	r5, r1, r8, asr #25

00014548 <read_boolean_expression@@Base>:
   14548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1454c:	sub	sp, sp, #12
   14550:	ldr	r4, [pc, #452]	; 1471c <read_boolean_expression@@Base+0x1d4>
   14554:	mov	r8, r0
   14558:	add	r4, pc, r4
   1455c:	add	r4, r4, #400	; 0x190
   14560:	ldr	r0, [r0]
   14564:	ldrd	r2, [r4, #-8]
   14568:	mov	r5, #0
   1456c:	str	r5, [sp, #4]
   14570:	adds	r2, r2, #1
   14574:	adc	r3, r3, #0
   14578:	ldr	fp, [pc, #416]	; 14720 <read_boolean_expression@@Base+0x1d8>
   1457c:	strd	r2, [r4, #-8]
   14580:	bl	126e8 <next@@Base>
   14584:	ldrd	r6, [r4]
   14588:	add	fp, pc, fp
   1458c:	adds	r6, r6, #1
   14590:	adc	r7, r7, #0
   14594:	strd	r6, [r4]
   14598:	ldr	r3, [r0]
   1459c:	cmp	r3, #4
   145a0:	beq	14654 <read_boolean_expression@@Base+0x10c>
   145a4:	add	sl, sp, #4
   145a8:	ldrd	r6, [r4, #72]	; 0x48
   145ac:	adds	r6, r6, #1
   145b0:	adc	r7, r7, #0
   145b4:	cmp	r3, #3
   145b8:	strd	r6, [r4, #72]	; 0x48
   145bc:	beq	14608 <read_boolean_expression@@Base+0xc0>
   145c0:	cmp	r3, #12
   145c4:	beq	146e8 <read_boolean_expression@@Base+0x1a0>
   145c8:	cmp	r3, #1
   145cc:	beq	14690 <read_boolean_expression@@Base+0x148>
   145d0:	ldr	r3, [pc, #332]	; 14724 <read_boolean_expression@@Base+0x1dc>
   145d4:	ldr	r0, [pc, #332]	; 14728 <read_boolean_expression@@Base+0x1e0>
   145d8:	mov	r2, #33	; 0x21
   145dc:	ldr	r3, [fp, r3]
   145e0:	mov	r1, #1
   145e4:	add	r0, pc, r0
   145e8:	ldr	r3, [r3]
   145ec:	bl	11930 <fwrite@plt>
   145f0:	ldrd	r2, [r4, #56]	; 0x38
   145f4:	mov	r0, #1
   145f8:	adds	r2, r2, #1
   145fc:	adc	r3, r3, #0
   14600:	strd	r2, [r4, #56]	; 0x38
   14604:	bl	119a8 <exit@plt>
   14608:	ldrd	r6, [r4, #16]
   1460c:	mov	r1, r5
   14610:	mov	r3, r9
   14614:	adds	r6, r6, #1
   14618:	adc	r7, r7, #0
   1461c:	mov	r2, sl
   14620:	mov	r0, r8
   14624:	strd	r6, [r4, #16]
   14628:	bl	14450 <read_single_boolean_expression@@Base>
   1462c:	ldrd	r2, [r4, #48]	; 0x30
   14630:	adds	r2, r2, #1
   14634:	adc	r3, r3, #0
   14638:	strd	r2, [r4, #48]	; 0x30
   1463c:	mov	r5, r0
   14640:	ldr	r0, [r8]
   14644:	bl	126e8 <next@@Base>
   14648:	ldr	r3, [r0]
   1464c:	cmp	r3, #4
   14650:	bne	145a8 <read_boolean_expression@@Base+0x60>
   14654:	ldr	r4, [pc, #208]	; 1472c <read_boolean_expression@@Base+0x1e4>
   14658:	add	r4, pc, r4
   1465c:	add	r4, r4, #400	; 0x190
   14660:	ldrd	r2, [r4, #80]	; 0x50
   14664:	adds	r2, r2, #1
   14668:	adc	r3, r3, #0
   1466c:	strd	r2, [r4, #80]	; 0x50
   14670:	bl	123a0 <free_token_cpar@@Base>
   14674:	ldrd	r2, [r4, #88]	; 0x58
   14678:	mov	r0, r5
   1467c:	adds	r2, r2, #1
   14680:	adc	r3, r3, #0
   14684:	strd	r2, [r4, #88]	; 0x58
   14688:	add	sp, sp, #12
   1468c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14690:	ldrd	r2, [r4, #8]
   14694:	mov	r1, r0
   14698:	ldr	r0, [r8]
   1469c:	adds	r2, r2, #1
   146a0:	adc	r3, r3, #0
   146a4:	strd	r2, [r4, #8]
   146a8:	bl	12594 <push_back@@Base>
   146ac:	ldrd	r6, [r4, #32]
   146b0:	mov	r1, r5
   146b4:	mov	r3, r9
   146b8:	adds	r6, r6, #1
   146bc:	adc	r7, r7, #0
   146c0:	mov	r2, sl
   146c4:	mov	r0, r8
   146c8:	strd	r6, [r4, #32]
   146cc:	bl	14450 <read_single_boolean_expression@@Base>
   146d0:	ldrd	r2, [r4, #64]	; 0x40
   146d4:	adds	r2, r2, #1
   146d8:	adc	r3, r3, #0
   146dc:	strd	r2, [r4, #64]	; 0x40
   146e0:	mov	r5, r0
   146e4:	b	14640 <read_boolean_expression@@Base+0xf8>
   146e8:	ldrd	r2, [r4, #24]
   146ec:	adds	r2, r2, #1
   146f0:	adc	r3, r3, #0
   146f4:	strd	r2, [r4, #24]
   146f8:	bl	13c88 <get_boolean_op_value@@Base>
   146fc:	ldrd	r2, [r4, #40]	; 0x28
   14700:	mov	r1, #1
   14704:	str	r1, [sp, #4]
   14708:	adds	r2, r2, #1
   1470c:	adc	r3, r3, #0
   14710:	strd	r2, [r4, #40]	; 0x28
   14714:	mov	r9, r0
   14718:	b	14640 <read_boolean_expression@@Base+0xf8>
   1471c:	muleq	r1, r0, ip
   14720:	andeq	r4, r1, r0, ror sl
   14724:	andeq	r0, r0, r8, lsr #1
   14728:	andeq	r3, r0, r0, lsl r8
   1472c:	muleq	r1, r0, fp

00014730 <read_if_statement@@Base>:
   14730:	push	{r4, r5, r6, r7, r8, lr}
   14734:	mov	r5, r0
   14738:	ldr	r4, [pc, #352]	; 148a0 <read_if_statement@@Base+0x170>
   1473c:	ldr	r0, [r0]
   14740:	add	r4, pc, r4
   14744:	add	r4, r4, #496	; 0x1f0
   14748:	ldrd	r2, [r4]
   1474c:	adds	r2, r2, #1
   14750:	adc	r3, r3, #0
   14754:	strd	r2, [r4]
   14758:	bl	126e8 <next@@Base>
   1475c:	ldrd	r2, [r4, #8]
   14760:	adds	r2, r2, #1
   14764:	adc	r3, r3, #0
   14768:	strd	r2, [r4, #8]
   1476c:	ldr	r3, [r0]
   14770:	cmp	r3, #3
   14774:	movne	r4, #0
   14778:	bne	14854 <read_if_statement@@Base+0x124>
   1477c:	ldrd	r2, [r4, #16]
   14780:	adds	r2, r2, #1
   14784:	adc	r3, r3, #0
   14788:	strd	r2, [r4, #16]
   1478c:	bl	12380 <free_token_opar@@Base>
   14790:	ldrd	r2, [r4, #24]
   14794:	mov	r0, r5
   14798:	adds	r2, r2, #1
   1479c:	adc	r3, r3, #0
   147a0:	strd	r2, [r4, #24]
   147a4:	bl	14548 <read_boolean_expression@@Base>
   147a8:	ldrd	r2, [r4, #32]
   147ac:	adds	r2, r2, #1
   147b0:	adc	r3, r3, #0
   147b4:	strd	r2, [r4, #32]
   147b8:	mov	r7, r0
   147bc:	mov	r0, r5
   147c0:	bl	148a8 <read_body@@Base>
   147c4:	ldrd	r2, [r4, #40]	; 0x28
   147c8:	adds	r2, r2, #1
   147cc:	adc	r3, r3, #0
   147d0:	strd	r2, [r4, #40]	; 0x28
   147d4:	mov	r6, r0
   147d8:	ldr	r0, [r5]
   147dc:	bl	126e8 <next@@Base>
   147e0:	ldr	r3, [r0]
   147e4:	mov	r1, r0
   147e8:	cmp	r3, #11
   147ec:	beq	1485c <read_if_statement@@Base+0x12c>
   147f0:	ldrd	r2, [r4, #56]	; 0x38
   147f4:	ldr	r0, [r5]
   147f8:	mov	r5, #0
   147fc:	adds	r2, r2, #1
   14800:	adc	r3, r3, #0
   14804:	strd	r2, [r4, #56]	; 0x38
   14808:	bl	12594 <push_back@@Base>
   1480c:	ldrd	r2, [r4, #80]	; 0x50
   14810:	adds	r2, r2, #1
   14814:	adc	r3, r3, #0
   14818:	strd	r2, [r4, #80]	; 0x50
   1481c:	mov	r0, #20
   14820:	bl	11960 <malloc@plt>
   14824:	mov	r3, r5
   14828:	mov	r1, r7
   1482c:	mov	r2, r6
   14830:	mov	r4, r0
   14834:	bl	1370c <init_node_if@@Base>
   14838:	ldr	r3, [pc, #100]	; 148a4 <read_if_statement@@Base+0x174>
   1483c:	add	r3, pc, r3
   14840:	add	r3, r3, #496	; 0x1f0
   14844:	ldrd	r0, [r3, #88]	; 0x58
   14848:	adds	r0, r0, #1
   1484c:	adc	r1, r1, #0
   14850:	strd	r0, [r3, #88]	; 0x58
   14854:	mov	r0, r4
   14858:	pop	{r4, r5, r6, r7, r8, pc}
   1485c:	ldrd	r2, [r4, #48]	; 0x30
   14860:	adds	r2, r2, #1
   14864:	adc	r3, r3, #0
   14868:	strd	r2, [r4, #48]	; 0x30
   1486c:	bl	12480 <free_token_else@@Base>
   14870:	ldrd	r2, [r4, #64]	; 0x40
   14874:	mov	r0, r5
   14878:	adds	r2, r2, #1
   1487c:	adc	r3, r3, #0
   14880:	strd	r2, [r4, #64]	; 0x40
   14884:	bl	148a8 <read_body@@Base>
   14888:	ldrd	r2, [r4, #72]	; 0x48
   1488c:	adds	r2, r2, #1
   14890:	adc	r3, r3, #0
   14894:	strd	r2, [r4, #72]	; 0x48
   14898:	mov	r5, r0
   1489c:	b	1481c <read_if_statement@@Base+0xec>
   148a0:	andeq	r5, r1, r8, lsr #21
   148a4:	andeq	r5, r1, ip, lsr #19

000148a8 <read_body@@Base>:
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148ac:	mov	r5, r0
   148b0:	ldr	r4, [pc, #488]	; 14aa0 <read_body@@Base+0x1f8>
   148b4:	ldr	r0, [r0]
   148b8:	add	r4, pc, r4
   148bc:	add	r4, r4, #592	; 0x250
   148c0:	ldrd	r2, [r4]
   148c4:	adds	r2, r2, #1
   148c8:	adc	r3, r3, #0
   148cc:	strd	r2, [r4]
   148d0:	bl	126e8 <next@@Base>
   148d4:	ldrd	r2, [r4, #8]
   148d8:	adds	r2, r2, #1
   148dc:	adc	r3, r3, #0
   148e0:	strd	r2, [r4, #8]
   148e4:	ldr	r3, [r0]
   148e8:	cmp	r3, #5
   148ec:	movne	r6, #0
   148f0:	bne	14a28 <read_body@@Base+0x180>
   148f4:	ldrd	r2, [r4, #16]
   148f8:	adds	r2, r2, #1
   148fc:	adc	r3, r3, #0
   14900:	strd	r2, [r4, #16]
   14904:	bl	123c0 <free_token_obra@@Base>
   14908:	ldrd	r2, [r4, #24]
   1490c:	ldr	r0, [r5]
   14910:	adds	r2, r2, #1
   14914:	adc	r3, r3, #0
   14918:	strd	r2, [r4, #24]
   1491c:	bl	126e8 <next@@Base>
   14920:	ldrd	r2, [r4, #32]
   14924:	adds	r2, r2, #1
   14928:	adc	r3, r3, #0
   1492c:	strd	r2, [r4, #32]
   14930:	ldr	ip, [r0]
   14934:	mov	r1, r0
   14938:	cmp	ip, #6
   1493c:	beq	14a98 <read_body@@Base+0x1f0>
   14940:	ldr	r7, [pc, #348]	; 14aa4 <read_body@@Base+0x1fc>
   14944:	mov	r8, #0
   14948:	add	r7, pc, r7
   1494c:	add	r7, r7, #592	; 0x250
   14950:	mov	r6, r8
   14954:	ldrd	r2, [r4, #104]	; 0x68
   14958:	adds	r2, r2, #1
   1495c:	adc	r3, r3, #0
   14960:	cmp	ip, #7
   14964:	strd	r2, [r4, #104]	; 0x68
   14968:	beq	14a50 <read_body@@Base+0x1a8>
   1496c:	cmp	ip, #10
   14970:	mov	r0, r1
   14974:	bne	14a30 <read_body@@Base+0x188>
   14978:	ldrd	r2, [r4, #48]	; 0x30
   1497c:	adds	r2, r2, #1
   14980:	adc	r3, r3, #0
   14984:	strd	r2, [r4, #48]	; 0x30
   14988:	bl	12460 <free_token_if@@Base>
   1498c:	ldrd	r2, [r4, #64]	; 0x40
   14990:	mov	r0, r5
   14994:	adds	r2, r2, #1
   14998:	adc	r3, r3, #0
   1499c:	strd	r2, [r4, #64]	; 0x40
   149a0:	bl	14730 <read_if_statement@@Base>
   149a4:	ldrd	r2, [r4, #72]	; 0x48
   149a8:	adds	r2, r2, #1
   149ac:	adc	r3, r3, #0
   149b0:	strd	r2, [r4, #72]	; 0x48
   149b4:	mov	r9, r0
   149b8:	cmp	r6, #0
   149bc:	moveq	r6, r9
   149c0:	beq	149d8 <read_body@@Base+0x130>
   149c4:	ldrd	r2, [r7, #96]	; 0x60
   149c8:	str	r9, [r8, #4]
   149cc:	adds	r2, r2, #1
   149d0:	adc	r3, r3, #0
   149d4:	strd	r2, [r7, #96]	; 0x60
   149d8:	ldr	r0, [r5]
   149dc:	bl	126e8 <next@@Base>
   149e0:	mov	r8, r9
   149e4:	ldr	ip, [r0]
   149e8:	mov	r1, r0
   149ec:	cmp	ip, #6
   149f0:	bne	14954 <read_body@@Base+0xac>
   149f4:	ldr	r4, [pc, #172]	; 14aa8 <read_body@@Base+0x200>
   149f8:	mov	r0, r1
   149fc:	add	r4, pc, r4
   14a00:	add	r4, r4, #592	; 0x250
   14a04:	ldrd	r2, [r4, #112]	; 0x70
   14a08:	adds	r2, r2, #1
   14a0c:	adc	r3, r3, #0
   14a10:	strd	r2, [r4, #112]	; 0x70
   14a14:	bl	123e0 <free_token_cbra@@Base>
   14a18:	ldrd	r2, [r4, #120]	; 0x78
   14a1c:	adds	r2, r2, #1
   14a20:	adc	r3, r3, #0
   14a24:	strd	r2, [r4, #120]	; 0x78
   14a28:	mov	r0, r6
   14a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a30:	ldr	r0, [r5]
   14a34:	bl	12594 <push_back@@Base>
   14a38:	ldrd	r2, [r4, #80]	; 0x50
   14a3c:	mov	r0, r6
   14a40:	adds	r2, r2, #1
   14a44:	adc	r3, r3, #0
   14a48:	strd	r2, [r4, #80]	; 0x50
   14a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a50:	ldrd	r2, [r4, #40]	; 0x28
   14a54:	mov	r0, r1
   14a58:	adds	r2, r2, #1
   14a5c:	adc	r3, r3, #0
   14a60:	strd	r2, [r4, #40]	; 0x28
   14a64:	bl	12400 <free_token_return@@Base>
   14a68:	ldrd	r2, [r4, #56]	; 0x38
   14a6c:	mov	r0, r5
   14a70:	adds	r2, r2, #1
   14a74:	adc	r3, r3, #0
   14a78:	strd	r2, [r4, #56]	; 0x38
   14a7c:	bl	13f58 <read_return_expression@@Base>
   14a80:	ldrd	r2, [r4, #88]	; 0x58
   14a84:	adds	r2, r2, #1
   14a88:	adc	r3, r3, #0
   14a8c:	strd	r2, [r4, #88]	; 0x58
   14a90:	mov	r9, r0
   14a94:	b	149b8 <read_body@@Base+0x110>
   14a98:	mov	r6, #0
   14a9c:	b	149f4 <read_body@@Base+0x14c>
   14aa0:	andeq	r5, r1, r0, lsr r9
   14aa4:	andeq	r5, r1, r0, lsr #17
   14aa8:	andeq	r5, r1, ip, ror #15

00014aac <read_function_ast_node@@Base>:
   14aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ab0:	mov	r5, r0
   14ab4:	ldr	r4, [pc, #404]	; 14c50 <read_function_ast_node@@Base+0x1a4>
   14ab8:	ldr	r0, [r0]
   14abc:	add	r4, pc, r4
   14ac0:	add	r4, r4, #720	; 0x2d0
   14ac4:	ldrd	r2, [r4]
   14ac8:	adds	r2, r2, #1
   14acc:	adc	r3, r3, #0
   14ad0:	strd	r2, [r4]
   14ad4:	bl	126e8 <next@@Base>
   14ad8:	ldrd	r2, [r4, #8]
   14adc:	adds	r2, r2, #1
   14ae0:	adc	r3, r3, #0
   14ae4:	strd	r2, [r4, #8]
   14ae8:	ldr	r3, [r0]
   14aec:	cmp	r3, #0
   14af0:	bne	14c44 <read_function_ast_node@@Base+0x198>
   14af4:	ldrd	r2, [r4, #16]
   14af8:	adds	r2, r2, #1
   14afc:	adc	r3, r3, #0
   14b00:	strd	r2, [r4, #16]
   14b04:	bl	12320 <free_token_int_type@@Base>
   14b08:	ldrd	r2, [r4, #24]
   14b0c:	ldr	r0, [r5]
   14b10:	adds	r2, r2, #1
   14b14:	adc	r3, r3, #0
   14b18:	strd	r2, [r4, #24]
   14b1c:	bl	126e8 <next@@Base>
   14b20:	ldrd	r2, [r4, #32]
   14b24:	adds	r2, r2, #1
   14b28:	adc	r3, r3, #0
   14b2c:	strd	r2, [r4, #32]
   14b30:	ldr	r1, [r0]
   14b34:	mov	r6, r0
   14b38:	cmp	r1, #2
   14b3c:	bne	14c44 <read_function_ast_node@@Base+0x198>
   14b40:	ldrd	r2, [r4, #40]	; 0x28
   14b44:	ldr	r0, [r5]
   14b48:	adds	r2, r2, #1
   14b4c:	adc	r3, r3, #0
   14b50:	strd	r2, [r4, #40]	; 0x28
   14b54:	bl	126e8 <next@@Base>
   14b58:	ldrd	r2, [r4, #48]	; 0x30
   14b5c:	adds	r2, r2, #1
   14b60:	adc	r3, r3, #0
   14b64:	strd	r2, [r4, #48]	; 0x30
   14b68:	ldr	r3, [r0]
   14b6c:	cmp	r3, #3
   14b70:	bne	14c44 <read_function_ast_node@@Base+0x198>
   14b74:	ldrd	r2, [r4, #56]	; 0x38
   14b78:	adds	r2, r2, #1
   14b7c:	adc	r3, r3, #0
   14b80:	strd	r2, [r4, #56]	; 0x38
   14b84:	bl	12380 <free_token_opar@@Base>
   14b88:	ldrd	r2, [r4, #64]	; 0x40
   14b8c:	ldr	r0, [r5]
   14b90:	adds	r2, r2, #1
   14b94:	adc	r3, r3, #0
   14b98:	strd	r2, [r4, #64]	; 0x40
   14b9c:	bl	126e8 <next@@Base>
   14ba0:	ldrd	r2, [r4, #72]	; 0x48
   14ba4:	adds	r2, r2, #1
   14ba8:	adc	r3, r3, #0
   14bac:	strd	r2, [r4, #72]	; 0x48
   14bb0:	ldr	r3, [r0]
   14bb4:	cmp	r3, #4
   14bb8:	bne	14c44 <read_function_ast_node@@Base+0x198>
   14bbc:	ldrd	r2, [r4, #80]	; 0x50
   14bc0:	adds	r2, r2, #1
   14bc4:	adc	r3, r3, #0
   14bc8:	strd	r2, [r4, #80]	; 0x50
   14bcc:	bl	123a0 <free_token_cpar@@Base>
   14bd0:	ldrd	r2, [r4, #88]	; 0x58
   14bd4:	mov	r0, r5
   14bd8:	adds	r2, r2, #1
   14bdc:	adc	r3, r3, #0
   14be0:	strd	r2, [r4, #88]	; 0x58
   14be4:	bl	148a8 <read_body@@Base>
   14be8:	ldrd	r8, [r4, #96]	; 0x60
   14bec:	adds	r8, r8, #1
   14bf0:	adc	r9, r9, #0
   14bf4:	strd	r8, [r4, #96]	; 0x60
   14bf8:	mov	r7, r0
   14bfc:	mov	r0, #16
   14c00:	bl	11960 <malloc@plt>
   14c04:	mov	r2, r7
   14c08:	ldr	r1, [r6, #4]
   14c0c:	mov	r5, r0
   14c10:	bl	13674 <init_node_function@@Base>
   14c14:	ldrd	r2, [r4, #104]	; 0x68
   14c18:	mov	r0, r6
   14c1c:	adds	r2, r2, #1
   14c20:	adc	r3, r3, #0
   14c24:	strd	r2, [r4, #104]	; 0x68
   14c28:	bl	12360 <free_token_function@@Base>
   14c2c:	ldrd	r2, [r4, #112]	; 0x70
   14c30:	mov	r0, r5
   14c34:	adds	r2, r2, #1
   14c38:	adc	r3, r3, #0
   14c3c:	strd	r2, [r4, #112]	; 0x70
   14c40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c44:	mov	r5, #0
   14c48:	mov	r0, r5
   14c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c50:	andeq	r5, r1, ip, lsr #14

00014c54 <build_ast@@Base>:
   14c54:	push	{r4, lr}
   14c58:	ldr	r4, [pc, #44]	; 14c8c <build_ast@@Base+0x38>
   14c5c:	add	r4, pc, r4
   14c60:	add	r4, r4, #848	; 0x350
   14c64:	ldrd	r2, [r4, #-8]
   14c68:	adds	r2, r2, #1
   14c6c:	adc	r3, r3, #0
   14c70:	strd	r2, [r4, #-8]
   14c74:	bl	14aac <read_function_ast_node@@Base>
   14c78:	ldrd	r2, [r4]
   14c7c:	adds	r2, r2, #1
   14c80:	adc	r3, r3, #0
   14c84:	strd	r2, [r4]
   14c88:	pop	{r4, pc}
   14c8c:	andeq	r5, r1, ip, lsl #11

00014c90 <init_generator@@Base>:
   14c90:	push	{r4, r5, r6, r7, r8, lr}
   14c94:	mov	r5, r0
   14c98:	ldr	r4, [pc, #72]	; 14ce8 <init_generator@@Base+0x58>
   14c9c:	mov	r0, r2
   14ca0:	add	r4, pc, r4
   14ca4:	str	r1, [r5]
   14ca8:	ldrd	r2, [r4]
   14cac:	ldr	r1, [pc, #56]	; 14cec <init_generator@@Base+0x5c>
   14cb0:	mov	r6, #0
   14cb4:	adds	r2, r2, #1
   14cb8:	adc	r3, r3, #0
   14cbc:	add	r1, pc, r1
   14cc0:	strd	r2, [r4]
   14cc4:	bl	11900 <fopen@plt>
   14cc8:	ldrd	r2, [r4, #8]
   14ccc:	mov	r7, #0
   14cd0:	adds	r2, r2, #1
   14cd4:	adc	r3, r3, #0
   14cd8:	strd	r6, [r5, #8]
   14cdc:	strd	r2, [r4, #8]
   14ce0:	str	r0, [r5, #4]
   14ce4:	pop	{r4, r5, r6, r7, r8, pc}
   14ce8:	andeq	r5, r1, r0, lsr #17
   14cec:	andeq	r3, r0, r8, asr #3

00014cf0 <destroy_generator@@Base>:
   14cf0:	push	{r4, lr}
   14cf4:	ldr	r4, [pc, #44]	; 14d28 <destroy_generator@@Base+0x38>
   14cf8:	ldr	r0, [r0, #4]
   14cfc:	add	r4, pc, r4
   14d00:	ldrd	r2, [r4, #16]
   14d04:	adds	r2, r2, #1
   14d08:	adc	r3, r3, #0
   14d0c:	strd	r2, [r4, #16]
   14d10:	bl	11a2c <fclose@plt>
   14d14:	ldrd	r2, [r4, #24]
   14d18:	adds	r2, r2, #1
   14d1c:	adc	r3, r3, #0
   14d20:	strd	r2, [r4, #24]
   14d24:	pop	{r4, pc}
   14d28:	andeq	r5, r1, r4, asr #16

00014d2c <__generate_code_for_int@@Base>:
   14d2c:	push	{r4, r6, r7, lr}
   14d30:	ldr	r4, [pc, #56]	; 14d70 <__generate_code_for_int@@Base+0x44>
   14d34:	ldr	r2, [r1, #8]
   14d38:	add	r4, pc, r4
   14d3c:	ldr	r1, [pc, #48]	; 14d74 <__generate_code_for_int@@Base+0x48>
   14d40:	ldrd	r6, [r4, #32]
   14d44:	ldr	r0, [r0, #4]
   14d48:	add	r1, pc, r1
   14d4c:	adds	r6, r6, #1
   14d50:	adc	r7, r7, #0
   14d54:	strd	r6, [r4, #32]
   14d58:	bl	119cc <fprintf@plt>
   14d5c:	ldrd	r2, [r4, #40]	; 0x28
   14d60:	adds	r2, r2, #1
   14d64:	adc	r3, r3, #0
   14d68:	strd	r2, [r4, #40]	; 0x28
   14d6c:	pop	{r4, r6, r7, pc}
   14d70:	andeq	r5, r1, r8, lsl #16
   14d74:	andeq	r3, r0, r0, asr #2

00014d78 <__generate_code_for_return@@Base>:
   14d78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d7c:	mov	r5, r0
   14d80:	ldr	r4, [pc, #224]	; 14e68 <__generate_code_for_return@@Base+0xf0>
   14d84:	ldr	r8, [r1, #8]
   14d88:	add	r4, pc, r4
   14d8c:	ldr	r3, [r0, #4]
   14d90:	ldrd	r6, [r4, #48]	; 0x30
   14d94:	ldr	r0, [pc, #208]	; 14e6c <__generate_code_for_return@@Base+0xf4>
   14d98:	mov	r2, #9
   14d9c:	adds	r6, r6, #1
   14da0:	adc	r7, r7, #0
   14da4:	mov	r1, #1
   14da8:	add	r0, pc, r0
   14dac:	strd	r6, [r4, #48]	; 0x30
   14db0:	bl	11930 <fwrite@plt>
   14db4:	ldr	r9, [r8]
   14db8:	ldr	r3, [pc, #176]	; 14e70 <__generate_code_for_return@@Base+0xf8>
   14dbc:	cmp	r9, #1
   14dc0:	add	r3, pc, r3
   14dc4:	bne	14e20 <__generate_code_for_return@@Base+0xa8>
   14dc8:	ldrd	r2, [r4, #64]	; 0x40
   14dcc:	mov	r1, r8
   14dd0:	mov	r0, r5
   14dd4:	adds	r2, r2, #1
   14dd8:	adc	r3, r3, #0
   14ddc:	strd	r2, [r4, #64]	; 0x40
   14de0:	bl	14d2c <__generate_code_for_int@@Base>
   14de4:	ldrd	r6, [r4, #72]	; 0x48
   14de8:	ldr	r0, [pc, #132]	; 14e74 <__generate_code_for_return@@Base+0xfc>
   14dec:	ldr	r3, [r5, #4]
   14df0:	adds	r6, r6, #1
   14df4:	adc	r7, r7, #0
   14df8:	mov	r2, #8
   14dfc:	mov	r1, r9
   14e00:	add	r0, pc, r0
   14e04:	strd	r6, [r4, #72]	; 0x48
   14e08:	bl	11930 <fwrite@plt>
   14e0c:	ldrd	r2, [r4, #80]	; 0x50
   14e10:	adds	r2, r2, #1
   14e14:	adc	r3, r3, #0
   14e18:	strd	r2, [r4, #80]	; 0x50
   14e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e20:	ldrd	r6, [r4, #56]	; 0x38
   14e24:	ldr	r0, [pc, #76]	; 14e78 <__generate_code_for_return@@Base+0x100>
   14e28:	mov	r2, #37	; 0x25
   14e2c:	adds	r6, r6, #1
   14e30:	adc	r7, r7, #0
   14e34:	mov	r1, #1
   14e38:	strd	r6, [r4, #56]	; 0x38
   14e3c:	ldr	r3, [r3, r0]
   14e40:	ldr	r0, [pc, #52]	; 14e7c <__generate_code_for_return@@Base+0x104>
   14e44:	ldr	r3, [r3]
   14e48:	add	r0, pc, r0
   14e4c:	bl	11930 <fwrite@plt>
   14e50:	ldrd	r2, [r4, #88]	; 0x58
   14e54:	mov	r0, #1
   14e58:	adds	r2, r2, #1
   14e5c:	adc	r3, r3, #0
   14e60:	strd	r2, [r4, #88]	; 0x58
   14e64:	bl	119a8 <exit@plt>
   14e68:			; <UNDEFINED> instruction: 0x000157b8
   14e6c:	andeq	r3, r0, r4, ror #1
   14e70:	andeq	r4, r1, r8, lsr r2
   14e74:	muleq	r0, r8, r0
   14e78:	andeq	r0, r0, r8, lsr #1
   14e7c:	andeq	r3, r0, ip, asr r0

00014e80 <__generate_code_for_binary_boolean_expression@@Base>:
   14e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e84:	sub	sp, sp, #12
   14e88:	ldr	r4, [pc, #820]	; 151c4 <__generate_code_for_binary_boolean_expression@@Base+0x344>
   14e8c:	mov	r5, r0
   14e90:	add	r4, pc, r4
   14e94:	strd	r2, [sp]
   14e98:	ldrd	r8, [r4, #96]	; 0x60
   14e9c:	ldr	r3, [r0, #4]
   14ea0:	ldr	r0, [pc, #800]	; 151c8 <__generate_code_for_binary_boolean_expression@@Base+0x348>
   14ea4:	adds	r8, r8, #1
   14ea8:	mov	r6, r1
   14eac:	adc	r9, r9, #0
   14eb0:	mov	r1, #1
   14eb4:	mov	r2, #9
   14eb8:	add	r0, pc, r0
   14ebc:	strd	r8, [r4, #96]	; 0x60
   14ec0:	ldr	r7, [r6, #8]
   14ec4:	ldr	r8, [r6, #12]
   14ec8:	bl	11930 <fwrite@plt>
   14ecc:	ldrd	r2, [r4, #104]	; 0x68
   14ed0:	mov	r1, r7
   14ed4:	mov	r0, r5
   14ed8:	adds	r2, r2, #1
   14edc:	adc	r3, r3, #0
   14ee0:	ldr	r7, [pc, #740]	; 151cc <__generate_code_for_binary_boolean_expression@@Base+0x34c>
   14ee4:	strd	r2, [r4, #104]	; 0x68
   14ee8:	bl	14d2c <__generate_code_for_int@@Base>
   14eec:	ldrd	r2, [r4, #112]	; 0x70
   14ef0:	ldr	r1, [r5, #4]
   14ef4:	mov	r0, #10
   14ef8:	adds	r2, r2, #1
   14efc:	adc	r3, r3, #0
   14f00:	add	r7, pc, r7
   14f04:	strd	r2, [r4, #112]	; 0x70
   14f08:	bl	11a50 <fputc@plt>
   14f0c:	ldrd	sl, [r4, #120]	; 0x78
   14f10:	ldr	r0, [pc, #696]	; 151d0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   14f14:	ldr	r3, [r5, #4]
   14f18:	adds	sl, sl, #1
   14f1c:	adc	fp, fp, #0
   14f20:	mov	r2, #9
   14f24:	mov	r1, #1
   14f28:	add	r0, pc, r0
   14f2c:	strd	sl, [r4, #120]	; 0x78
   14f30:	bl	11930 <fwrite@plt>
   14f34:	ldrd	r2, [r4, #128]	; 0x80
   14f38:	mov	r1, r8
   14f3c:	mov	r0, r5
   14f40:	adds	r2, r2, #1
   14f44:	adc	r3, r3, #0
   14f48:	strd	r2, [r4, #128]	; 0x80
   14f4c:	bl	14d2c <__generate_code_for_int@@Base>
   14f50:	ldrd	r2, [r4, #136]	; 0x88
   14f54:	ldr	r1, [r5, #4]
   14f58:	mov	r0, #10
   14f5c:	adds	r2, r2, #1
   14f60:	adc	r3, r3, #0
   14f64:	strd	r2, [r4, #136]	; 0x88
   14f68:	bl	11a50 <fputc@plt>
   14f6c:	ldrd	r8, [r4, #144]	; 0x90
   14f70:	ldr	r0, [pc, #604]	; 151d4 <__generate_code_for_binary_boolean_expression@@Base+0x354>
   14f74:	ldr	r3, [r5, #4]
   14f78:	adds	r8, r8, #1
   14f7c:	adc	r9, r9, #0
   14f80:	mov	r2, #12
   14f84:	mov	r1, #1
   14f88:	add	r0, pc, r0
   14f8c:	strd	r8, [r4, #144]	; 0x90
   14f90:	bl	11930 <fwrite@plt>
   14f94:	ldrd	r2, [r4, #152]	; 0x98
   14f98:	ldr	r1, [r6, #16]
   14f9c:	adds	r2, r2, #1
   14fa0:	adc	r3, r3, #0
   14fa4:	strd	r2, [r4, #152]	; 0x98
   14fa8:	cmp	r1, #7
   14fac:	addls	pc, pc, r1, lsl #2
   14fb0:	b	15170 <__generate_code_for_binary_boolean_expression@@Base+0x2f0>
   14fb4:	b	1505c <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   14fb8:	b	150a4 <__generate_code_for_binary_boolean_expression@@Base+0x224>
   14fbc:	b	150e8 <__generate_code_for_binary_boolean_expression@@Base+0x268>
   14fc0:	b	14fd4 <__generate_code_for_binary_boolean_expression@@Base+0x154>
   14fc4:	b	15010 <__generate_code_for_binary_boolean_expression@@Base+0x190>
   14fc8:	b	15010 <__generate_code_for_binary_boolean_expression@@Base+0x190>
   14fcc:	b	15018 <__generate_code_for_binary_boolean_expression@@Base+0x198>
   14fd0:	b	1512c <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   14fd4:	ldr	r4, [pc, #508]	; 151d8 <__generate_code_for_binary_boolean_expression@@Base+0x358>
   14fd8:	ldr	r1, [pc, #508]	; 151dc <__generate_code_for_binary_boolean_expression@@Base+0x35c>
   14fdc:	add	r4, pc, r4
   14fe0:	ldrd	r2, [sp]
   14fe4:	ldrd	r6, [r4, #192]	; 0xc0
   14fe8:	ldr	r0, [r5, #4]
   14fec:	add	r1, pc, r1
   14ff0:	adds	r6, r6, #1
   14ff4:	adc	r7, r7, #0
   14ff8:	strd	r6, [r4, #192]	; 0xc0
   14ffc:	bl	119cc <fprintf@plt>
   15000:	ldrd	r2, [r4, #232]	; 0xe8
   15004:	adds	r2, r2, #1
   15008:	adc	r3, r3, #0
   1500c:	strd	r2, [r4, #232]	; 0xe8
   15010:	add	sp, sp, #12
   15014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15018:	ldr	r4, [pc, #448]	; 151e0 <__generate_code_for_binary_boolean_expression@@Base+0x360>
   1501c:	ldr	r1, [pc, #448]	; 151e4 <__generate_code_for_binary_boolean_expression@@Base+0x364>
   15020:	add	r4, pc, r4
   15024:	ldrd	r2, [sp]
   15028:	ldrd	r6, [r4, #208]	; 0xd0
   1502c:	ldr	r0, [r5, #4]
   15030:	add	r1, pc, r1
   15034:	adds	r6, r6, #1
   15038:	adc	r7, r7, #0
   1503c:	strd	r6, [r4, #208]	; 0xd0
   15040:	bl	119cc <fprintf@plt>
   15044:	ldrd	r2, [r4, #240]	; 0xf0
   15048:	adds	r2, r2, #1
   1504c:	adc	r3, r3, #0
   15050:	strd	r2, [r4, #240]	; 0xf0
   15054:	add	sp, sp, #12
   15058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1505c:	ldr	r4, [pc, #388]	; 151e8 <__generate_code_for_binary_boolean_expression@@Base+0x368>
   15060:	ldr	r1, [pc, #388]	; 151ec <__generate_code_for_binary_boolean_expression@@Base+0x36c>
   15064:	add	r4, pc, r4
   15068:	ldrd	r2, [sp]
   1506c:	ldrd	r6, [r4, #168]	; 0xa8
   15070:	ldr	r0, [r5, #4]
   15074:	add	r1, pc, r1
   15078:	adds	r6, r6, #1
   1507c:	adc	r7, r7, #0
   15080:	add	r4, r4, #272	; 0x110
   15084:	strd	r6, [r4, #-104]	; 0xffffff98
   15088:	bl	119cc <fprintf@plt>
   1508c:	ldrd	r2, [r4, #-8]
   15090:	adds	r2, r2, #1
   15094:	adc	r3, r3, #0
   15098:	strd	r2, [r4, #-8]
   1509c:	add	sp, sp, #12
   150a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a4:	ldr	r4, [pc, #324]	; 151f0 <__generate_code_for_binary_boolean_expression@@Base+0x370>
   150a8:	ldr	r1, [pc, #324]	; 151f4 <__generate_code_for_binary_boolean_expression@@Base+0x374>
   150ac:	add	r4, pc, r4
   150b0:	ldrd	r2, [sp]
   150b4:	ldrd	r6, [r4, #176]	; 0xb0
   150b8:	ldr	r0, [r5, #4]
   150bc:	add	r1, pc, r1
   150c0:	adds	r6, r6, #1
   150c4:	adc	r7, r7, #0
   150c8:	strd	r6, [r4, #176]	; 0xb0
   150cc:	bl	119cc <fprintf@plt>
   150d0:	ldrd	r2, [r4, #216]	; 0xd8
   150d4:	adds	r2, r2, #1
   150d8:	adc	r3, r3, #0
   150dc:	strd	r2, [r4, #216]	; 0xd8
   150e0:	add	sp, sp, #12
   150e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	ldr	r4, [pc, #264]	; 151f8 <__generate_code_for_binary_boolean_expression@@Base+0x378>
   150ec:	ldr	r1, [pc, #264]	; 151fc <__generate_code_for_binary_boolean_expression@@Base+0x37c>
   150f0:	add	r4, pc, r4
   150f4:	ldrd	r2, [sp]
   150f8:	ldrd	r6, [r4, #184]	; 0xb8
   150fc:	ldr	r0, [r5, #4]
   15100:	add	r1, pc, r1
   15104:	adds	r6, r6, #1
   15108:	adc	r7, r7, #0
   1510c:	strd	r6, [r4, #184]	; 0xb8
   15110:	bl	119cc <fprintf@plt>
   15114:	ldrd	r2, [r4, #224]	; 0xe0
   15118:	adds	r2, r2, #1
   1511c:	adc	r3, r3, #0
   15120:	strd	r2, [r4, #224]	; 0xe0
   15124:	add	sp, sp, #12
   15128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1512c:	ldr	r4, [pc, #204]	; 15200 <__generate_code_for_binary_boolean_expression@@Base+0x380>
   15130:	ldr	r1, [pc, #204]	; 15204 <__generate_code_for_binary_boolean_expression@@Base+0x384>
   15134:	add	r4, pc, r4
   15138:	ldrd	r2, [sp]
   1513c:	ldrd	r6, [r4, #200]	; 0xc8
   15140:	ldr	r0, [r5, #4]
   15144:	add	r1, pc, r1
   15148:	adds	r6, r6, #1
   1514c:	adc	r7, r7, #0
   15150:	strd	r6, [r4, #200]	; 0xc8
   15154:	bl	119cc <fprintf@plt>
   15158:	ldrd	r2, [r4, #248]	; 0xf8
   1515c:	adds	r2, r2, #1
   15160:	adc	r3, r3, #0
   15164:	strd	r2, [r4, #248]	; 0xf8
   15168:	add	sp, sp, #12
   1516c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15170:	ldr	r6, [pc, #144]	; 15208 <__generate_code_for_binary_boolean_expression@@Base+0x388>
   15174:	ldr	r3, [pc, #144]	; 1520c <__generate_code_for_binary_boolean_expression@@Base+0x38c>
   15178:	add	r6, pc, r6
   1517c:	ldr	r0, [pc, #140]	; 15210 <__generate_code_for_binary_boolean_expression@@Base+0x390>
   15180:	ldrd	r4, [r6, #160]	; 0xa0
   15184:	add	r6, r6, #256	; 0x100
   15188:	mov	r2, #31
   1518c:	adds	r4, r4, #1
   15190:	adc	r5, r5, #0
   15194:	mov	r1, #1
   15198:	strd	r4, [r6, #-96]	; 0xffffffa0
   1519c:	ldr	r3, [r7, r3]
   151a0:	add	r0, pc, r0
   151a4:	ldr	r3, [r3]
   151a8:	bl	11930 <fwrite@plt>
   151ac:	ldrd	r2, [r6]
   151b0:	mov	r0, #1
   151b4:	adds	r2, r2, #1
   151b8:	adc	r3, r3, #0
   151bc:	strd	r2, [r6]
   151c0:	bl	119a8 <exit@plt>
   151c4:			; <UNDEFINED> instruction: 0x000156b0
   151c8:	ldrdeq	r2, [r0], -r4
   151cc:	strdeq	r4, [r1], -r8
   151d0:	andeq	r2, r0, r4, lsr #31
   151d4:	andeq	r2, r0, r0, asr pc
   151d8:	andeq	r5, r1, r4, ror #10
   151dc:	andeq	r2, r0, r8, lsr pc
   151e0:	andeq	r5, r1, r0, lsr #10
   151e4:	andeq	r2, r0, r8, lsl #30
   151e8:	ldrdeq	r5, [r1], -ip
   151ec:	andeq	r2, r0, r4, ror lr
   151f0:	muleq	r1, r4, r4
   151f4:	andeq	r2, r0, r0, asr #28
   151f8:	andeq	r5, r1, r0, asr r4
   151fc:	andeq	r2, r0, r0, lsl lr
   15200:	andeq	r5, r1, ip, lsl #8
   15204:	andeq	r2, r0, r8, lsl #28
   15208:	andeq	r5, r1, r8, asr #7
   1520c:	andeq	r0, r0, r8, lsr #1
   15210:	andeq	r2, r0, r0, asr #27

00015214 <__generate_code_for_unary_boolean_expression@@Base>:
   15214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15218:	sub	sp, sp, #8
   1521c:	ldr	r4, [pc, #280]	; 1533c <__generate_code_for_unary_boolean_expression@@Base+0x128>
   15220:	mov	r5, r0
   15224:	add	r4, pc, r4
   15228:	add	r4, r4, #272	; 0x110
   1522c:	strd	r2, [sp]
   15230:	ldrd	r6, [r4]
   15234:	ldr	r3, [r0, #4]
   15238:	ldr	r0, [pc, #256]	; 15340 <__generate_code_for_unary_boolean_expression@@Base+0x12c>
   1523c:	adds	r6, r6, #1
   15240:	mov	sl, r1
   15244:	adc	r7, r7, #0
   15248:	mov	r1, #1
   1524c:	mov	r2, #11
   15250:	add	r0, pc, r0
   15254:	strd	r6, [r4]
   15258:	ldr	r6, [sl, #8]
   1525c:	bl	11930 <fwrite@plt>
   15260:	ldrd	r8, [r4, #8]
   15264:	ldr	r0, [pc, #216]	; 15344 <__generate_code_for_unary_boolean_expression@@Base+0x130>
   15268:	ldr	r3, [r5, #4]
   1526c:	adds	r8, r8, #1
   15270:	adc	r9, r9, #0
   15274:	mov	r2, #9
   15278:	mov	r1, #1
   1527c:	add	r0, pc, r0
   15280:	strd	r8, [r4, #8]
   15284:	bl	11930 <fwrite@plt>
   15288:	ldrd	r2, [r4, #16]
   1528c:	mov	r1, r6
   15290:	mov	r0, r5
   15294:	adds	r2, r2, #1
   15298:	adc	r3, r3, #0
   1529c:	ldr	r6, [pc, #164]	; 15348 <__generate_code_for_unary_boolean_expression@@Base+0x134>
   152a0:	strd	r2, [r4, #16]
   152a4:	bl	14d2c <__generate_code_for_int@@Base>
   152a8:	ldr	r3, [sl, #16]
   152ac:	add	r6, pc, r6
   152b0:	cmp	r3, #8
   152b4:	bne	152f4 <__generate_code_for_unary_boolean_expression@@Base+0xe0>
   152b8:	ldrd	r6, [r4, #32]
   152bc:	ldr	r1, [pc, #136]	; 1534c <__generate_code_for_unary_boolean_expression@@Base+0x138>
   152c0:	ldrd	r2, [sp]
   152c4:	adds	r6, r6, #1
   152c8:	adc	r7, r7, #0
   152cc:	ldr	r0, [r5, #4]
   152d0:	add	r1, pc, r1
   152d4:	strd	r6, [r4, #32]
   152d8:	bl	119cc <fprintf@plt>
   152dc:	ldrd	r2, [r4, #40]	; 0x28
   152e0:	adds	r2, r2, #1
   152e4:	adc	r3, r3, #0
   152e8:	strd	r2, [r4, #40]	; 0x28
   152ec:	add	sp, sp, #8
   152f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152f4:	ldrd	r8, [r4, #24]
   152f8:	ldr	r3, [pc, #80]	; 15350 <__generate_code_for_unary_boolean_expression@@Base+0x13c>
   152fc:	ldr	r0, [pc, #80]	; 15354 <__generate_code_for_unary_boolean_expression@@Base+0x140>
   15300:	adds	r8, r8, #1
   15304:	adc	r9, r9, #0
   15308:	mov	r2, #31
   1530c:	strd	r8, [r4, #24]
   15310:	ldr	r3, [r6, r3]
   15314:	mov	r1, #1
   15318:	add	r0, pc, r0
   1531c:	ldr	r3, [r3]
   15320:	bl	11930 <fwrite@plt>
   15324:	ldrd	r2, [r4, #48]	; 0x30
   15328:	mov	r0, #1
   1532c:	adds	r2, r2, #1
   15330:	adc	r3, r3, #0
   15334:	strd	r2, [r4, #48]	; 0x30
   15338:	bl	119a8 <exit@plt>
   1533c:	andeq	r5, r1, ip, lsl r3
   15340:	andeq	r2, r0, r0, lsr sp
   15344:	andeq	r2, r0, r0, asr ip
   15348:	andeq	r3, r1, ip, asr #26
   1534c:	andeq	r2, r0, ip, lsr #24
   15350:	andeq	r0, r0, r8, lsr #1
   15354:	andeq	r2, r0, r8, asr #24

00015358 <__generate_code_for_if_expression@@Base>:
   15358:	ldr	ip, [r1, #16]
   1535c:	push	{r4, r6, r7, lr}
   15360:	cmp	ip, #8
   15364:	beq	1539c <__generate_code_for_if_expression@@Base+0x44>
   15368:	ldr	r4, [pc, #96]	; 153d0 <__generate_code_for_if_expression@@Base+0x78>
   1536c:	add	r4, pc, r4
   15370:	add	r4, r4, #336	; 0x150
   15374:	ldrd	r6, [r4, #-8]
   15378:	adds	r6, r6, #1
   1537c:	adc	r7, r7, #0
   15380:	strd	r6, [r4, #-8]
   15384:	bl	14e80 <__generate_code_for_binary_boolean_expression@@Base>
   15388:	ldrd	r2, [r4, #16]
   1538c:	adds	r2, r2, #1
   15390:	adc	r3, r3, #0
   15394:	strd	r2, [r4, #16]
   15398:	pop	{r4, r6, r7, pc}
   1539c:	ldr	r4, [pc, #48]	; 153d4 <__generate_code_for_if_expression@@Base+0x7c>
   153a0:	add	r4, pc, r4
   153a4:	add	r4, r4, #336	; 0x150
   153a8:	ldrd	r6, [r4]
   153ac:	adds	r6, r6, #1
   153b0:	adc	r7, r7, #0
   153b4:	strd	r6, [r4]
   153b8:	bl	15214 <__generate_code_for_unary_boolean_expression@@Base>
   153bc:	ldrd	r2, [r4, #8]
   153c0:	adds	r2, r2, #1
   153c4:	adc	r3, r3, #0
   153c8:	strd	r2, [r4, #8]
   153cc:	pop	{r4, r6, r7, pc}
   153d0:	ldrdeq	r5, [r1], -r4
   153d4:	andeq	r5, r1, r0, lsr #3

000153d8 <__generate_code_for_body@@Base>:
   153d8:	push	{r4, r5, r6, r7, r8, lr}
   153dc:	cmp	r1, #0
   153e0:	ldr	r8, [pc, #248]	; 154e0 <__generate_code_for_body@@Base+0x108>
   153e4:	add	r8, pc, r8
   153e8:	beq	1545c <__generate_code_for_body@@Base+0x84>
   153ec:	ldr	r4, [pc, #240]	; 154e4 <__generate_code_for_body@@Base+0x10c>
   153f0:	ldr	r5, [pc, #240]	; 154e8 <__generate_code_for_body@@Base+0x110>
   153f4:	add	r4, pc, r4
   153f8:	add	r5, pc, r5
   153fc:	mov	r7, r0
   15400:	add	r4, r4, #368	; 0x170
   15404:	add	r5, r5, #368	; 0x170
   15408:	ldrd	r2, [r4, #32]
   1540c:	ldm	r1, {r0, r6}
   15410:	adds	r2, r2, #1
   15414:	adc	r3, r3, #0
   15418:	cmp	r0, #3
   1541c:	strd	r2, [r4, #32]
   15420:	beq	1547c <__generate_code_for_body@@Base+0xa4>
   15424:	cmp	r0, #4
   15428:	bne	154a8 <__generate_code_for_body@@Base+0xd0>
   1542c:	ldrd	r2, [r4]
   15430:	mov	r0, r7
   15434:	adds	r2, r2, #1
   15438:	adc	r3, r3, #0
   1543c:	strd	r2, [r4]
   15440:	bl	154f8 <__generate_code_for_if@@Base>
   15444:	ldrd	r2, [r5, #24]
   15448:	adds	r2, r2, #1
   1544c:	adc	r3, r3, #0
   15450:	subs	r1, r6, #0
   15454:	strd	r2, [r5, #24]
   15458:	bne	15408 <__generate_code_for_body@@Base+0x30>
   1545c:	ldr	r3, [pc, #136]	; 154ec <__generate_code_for_body@@Base+0x114>
   15460:	add	r3, pc, r3
   15464:	add	r3, r3, #368	; 0x170
   15468:	ldrd	r0, [r3, #40]	; 0x28
   1546c:	adds	r0, r0, #1
   15470:	adc	r1, r1, #0
   15474:	strd	r0, [r3, #40]	; 0x28
   15478:	pop	{r4, r5, r6, r7, r8, pc}
   1547c:	ldrd	r2, [r4, #-8]
   15480:	mov	r0, r7
   15484:	adds	r2, r2, #1
   15488:	adc	r3, r3, #0
   1548c:	strd	r2, [r4, #-8]
   15490:	bl	14d78 <__generate_code_for_return@@Base>
   15494:	ldrd	r2, [r4, #16]
   15498:	adds	r2, r2, #1
   1549c:	adc	r3, r3, #0
   154a0:	strd	r2, [r4, #16]
   154a4:	b	15444 <__generate_code_for_body@@Base+0x6c>
   154a8:	ldr	r3, [pc, #64]	; 154f0 <__generate_code_for_body@@Base+0x118>
   154ac:	ldr	r0, [pc, #64]	; 154f4 <__generate_code_for_body@@Base+0x11c>
   154b0:	mov	r2, #52	; 0x34
   154b4:	ldr	r3, [r8, r3]
   154b8:	mov	r1, #1
   154bc:	add	r0, pc, r0
   154c0:	ldr	r3, [r3]
   154c4:	bl	11930 <fwrite@plt>
   154c8:	ldrd	r2, [r4, #8]
   154cc:	mov	r0, #1
   154d0:	adds	r2, r2, #1
   154d4:	adc	r3, r3, #0
   154d8:	strd	r2, [r4, #8]
   154dc:	bl	119a8 <exit@plt>
   154e0:	andeq	r3, r1, r4, lsl ip
   154e4:	andeq	r5, r1, ip, asr #2
   154e8:	andeq	r5, r1, r8, asr #2
   154ec:	andeq	r5, r1, r0, ror #1
   154f0:	andeq	r0, r0, r8, lsr #1
   154f4:	ldrdeq	r2, [r0], -r0

000154f8 <__generate_code_for_if@@Base>:
   154f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154fc:	mov	sl, r1
   15500:	ldr	r4, [pc, #196]	; 155cc <__generate_code_for_if@@Base+0xd4>
   15504:	ldrd	r8, [r0, #8]
   15508:	add	r4, pc, r4
   1550c:	add	r4, r4, #416	; 0x1a0
   15510:	adds	r6, r8, #1
   15514:	ldrd	r2, [r4]
   15518:	adc	r7, r9, #0
   1551c:	ldr	r1, [r1, #8]
   15520:	adds	r2, r2, #1
   15524:	adc	r3, r3, #0
   15528:	strd	r6, [r0, #8]
   1552c:	strd	r2, [r4]
   15530:	mov	r2, r8
   15534:	mov	r3, r9
   15538:	mov	r5, r0
   1553c:	bl	15358 <__generate_code_for_if_expression@@Base>
   15540:	ldrd	r2, [r4, #8]
   15544:	ldr	r1, [sl, #12]
   15548:	mov	r0, r5
   1554c:	adds	r2, r2, #1
   15550:	adc	r3, r3, #0
   15554:	strd	r2, [r4, #8]
   15558:	bl	153d8 <__generate_code_for_body@@Base>
   1555c:	ldrd	r6, [r4, #16]
   15560:	ldr	r1, [pc, #104]	; 155d0 <__generate_code_for_if@@Base+0xd8>
   15564:	mov	r2, r8
   15568:	adds	r6, r6, #1
   1556c:	adc	r7, r7, #0
   15570:	mov	r3, r9
   15574:	add	r1, pc, r1
   15578:	ldr	r0, [r5, #4]
   1557c:	strd	r6, [r4, #16]
   15580:	bl	119cc <fprintf@plt>
   15584:	ldrd	r2, [r4, #24]
   15588:	ldr	r1, [sl, #16]
   1558c:	adds	r2, r2, #1
   15590:	adc	r3, r3, #0
   15594:	cmp	r1, #0
   15598:	strd	r2, [r4, #24]
   1559c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   155a0:	ldrd	r2, [r4, #32]
   155a4:	mov	r0, r5
   155a8:	adds	r2, r2, #1
   155ac:	adc	r3, r3, #0
   155b0:	strd	r2, [r4, #32]
   155b4:	bl	153d8 <__generate_code_for_body@@Base>
   155b8:	ldrd	r2, [r4, #40]	; 0x28
   155bc:	adds	r2, r2, #1
   155c0:	adc	r3, r3, #0
   155c4:	strd	r2, [r4, #40]	; 0x28
   155c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155cc:	andeq	r5, r1, r8, lsr r0
   155d0:	andeq	r2, r0, r0, asr sl

000155d4 <__generate_code_for_function@@Base>:
   155d4:	push	{r4, r5, r6, r7, r8, lr}
   155d8:	mov	r8, r1
   155dc:	ldr	r4, [pc, #92]	; 15640 <__generate_code_for_function@@Base+0x6c>
   155e0:	ldr	r2, [r1, #8]
   155e4:	add	r4, pc, r4
   155e8:	add	r4, r4, #464	; 0x1d0
   155ec:	ldr	r1, [pc, #80]	; 15644 <__generate_code_for_function@@Base+0x70>
   155f0:	ldrd	r6, [r4]
   155f4:	mov	r5, r0
   155f8:	add	r1, pc, r1
   155fc:	adds	r6, r6, #1
   15600:	adc	r7, r7, #0
   15604:	ldr	r0, [r0, #4]
   15608:	strd	r6, [r4]
   1560c:	bl	119cc <fprintf@plt>
   15610:	ldrd	r2, [r4, #8]
   15614:	ldr	r1, [r8, #12]
   15618:	mov	r0, r5
   1561c:	adds	r2, r2, #1
   15620:	adc	r3, r3, #0
   15624:	strd	r2, [r4, #8]
   15628:	bl	153d8 <__generate_code_for_body@@Base>
   1562c:	ldrd	r2, [r4, #16]
   15630:	adds	r2, r2, #1
   15634:	adc	r3, r3, #0
   15638:	strd	r2, [r4, #16]
   1563c:	pop	{r4, r5, r6, r7, r8, pc}
   15640:	andeq	r4, r1, ip, asr pc
   15644:	ldrdeq	r2, [r0], -ip

00015648 <__generate_code_for_main@@Base>:
   15648:	ldr	r2, [r1]
   1564c:	ldr	r3, [pc, #148]	; 156e8 <__generate_code_for_main@@Base+0xa0>
   15650:	cmp	r2, #2
   15654:	push	{r4, r5, r6, lr}
   15658:	add	r3, pc, r3
   1565c:	bne	15694 <__generate_code_for_main@@Base+0x4c>
   15660:	ldr	r4, [pc, #132]	; 156ec <__generate_code_for_main@@Base+0xa4>
   15664:	add	r4, pc, r4
   15668:	add	r4, r4, #496	; 0x1f0
   1566c:	ldrd	r2, [r4]
   15670:	adds	r2, r2, #1
   15674:	adc	r3, r3, #0
   15678:	strd	r2, [r4]
   1567c:	bl	155d4 <__generate_code_for_function@@Base>
   15680:	ldrd	r2, [r4, #8]
   15684:	adds	r2, r2, #1
   15688:	adc	r3, r3, #0
   1568c:	strd	r2, [r4, #8]
   15690:	pop	{r4, r5, r6, pc}
   15694:	ldr	r6, [pc, #84]	; 156f0 <__generate_code_for_main@@Base+0xa8>
   15698:	ldr	ip, [pc, #84]	; 156f4 <__generate_code_for_main@@Base+0xac>
   1569c:	add	r6, pc, r6
   156a0:	add	r6, r6, #496	; 0x1f0
   156a4:	ldr	r0, [pc, #76]	; 156f8 <__generate_code_for_main@@Base+0xb0>
   156a8:	ldrd	r4, [r6, #-8]
   156ac:	mov	r2, #46	; 0x2e
   156b0:	mov	r1, #1
   156b4:	adds	r4, r4, #1
   156b8:	adc	r5, r5, #0
   156bc:	add	r0, pc, r0
   156c0:	strd	r4, [r6, #-8]
   156c4:	ldr	r3, [r3, ip]
   156c8:	ldr	r3, [r3]
   156cc:	bl	11930 <fwrite@plt>
   156d0:	ldrd	r2, [r6, #16]
   156d4:	mov	r0, #1
   156d8:	adds	r2, r2, #1
   156dc:	adc	r3, r3, #0
   156e0:	strd	r2, [r6, #16]
   156e4:	bl	119a8 <exit@plt>
   156e8:	andeq	r3, r1, r0, lsr #19
   156ec:	ldrdeq	r4, [r1], -ip
   156f0:	andeq	r4, r1, r4, lsr #29
   156f4:	andeq	r0, r0, r8, lsr #1
   156f8:	andeq	r2, r0, r0, lsr #18

000156fc <__generate_code@@Base>:
   156fc:	push	{r4, r5, r6, r8, r9, lr}
   15700:	mov	r5, r0
   15704:	ldr	r4, [pc, #96]	; 1576c <__generate_code@@Base+0x70>
   15708:	ldr	r3, [r0, #4]
   1570c:	add	r4, pc, r4
   15710:	add	r4, r4, #528	; 0x210
   15714:	ldr	r0, [pc, #84]	; 15770 <__generate_code@@Base+0x74>
   15718:	ldrd	r8, [r4, #-8]
   1571c:	mov	r6, r1
   15720:	mov	r2, #21
   15724:	adds	r8, r8, #1
   15728:	adc	r9, r9, #0
   1572c:	mov	r1, #1
   15730:	add	r0, pc, r0
   15734:	strd	r8, [r4, #-8]
   15738:	bl	11930 <fwrite@plt>
   1573c:	ldrd	r2, [r4]
   15740:	mov	r1, r6
   15744:	mov	r0, r5
   15748:	adds	r2, r2, #1
   1574c:	adc	r3, r3, #0
   15750:	strd	r2, [r4]
   15754:	bl	15648 <__generate_code_for_main@@Base>
   15758:	ldrd	r2, [r4, #8]
   1575c:	adds	r2, r2, #1
   15760:	adc	r3, r3, #0
   15764:	strd	r2, [r4, #8]
   15768:	pop	{r4, r5, r6, r8, r9, pc}
   1576c:	andeq	r4, r1, r4, lsr lr
   15770:	ldrdeq	r2, [r0], -ip

00015774 <generate_code@@Base>:
   15774:	push	{r4, r5, r6, lr}
   15778:	mov	r6, r0
   1577c:	ldr	r4, [pc, #104]	; 157ec <generate_code@@Base+0x78>
   15780:	ldr	r0, [r0]
   15784:	add	r4, pc, r4
   15788:	add	r4, r4, #544	; 0x220
   1578c:	ldrd	r2, [r4]
   15790:	adds	r2, r2, #1
   15794:	adc	r3, r3, #0
   15798:	strd	r2, [r4]
   1579c:	bl	14c54 <build_ast@@Base>
   157a0:	ldrd	r2, [r4, #8]
   157a4:	adds	r2, r2, #1
   157a8:	adc	r3, r3, #0
   157ac:	strd	r2, [r4, #8]
   157b0:	mov	r5, r0
   157b4:	mov	r1, r5
   157b8:	mov	r0, r6
   157bc:	bl	156fc <__generate_code@@Base>
   157c0:	ldrd	r2, [r4, #16]
   157c4:	mov	r0, r5
   157c8:	adds	r2, r2, #1
   157cc:	adc	r3, r3, #0
   157d0:	strd	r2, [r4, #16]
   157d4:	bl	13860 <free_node@@Base>
   157d8:	ldrd	r2, [r4, #24]
   157dc:	adds	r2, r2, #1
   157e0:	adc	r3, r3, #0
   157e4:	strd	r2, [r4, #24]
   157e8:	pop	{r4, r5, r6, pc}
   157ec:			; <UNDEFINED> instruction: 0x00014dbc
   157f0:	b	16a1c <generate_code@@Base+0x12a8>
   157f4:	push	{r4, r5, r6, lr}
   157f8:	subs	r5, r1, #0
   157fc:	popeq	{r4, r5, r6, pc}
   15800:	mov	r4, r0
   15804:	bl	157f0 <generate_code@@Base+0x7c>
   15808:	ldrd	r2, [r4]
   1580c:	adds	r0, r0, r2
   15810:	adc	r1, r1, r3
   15814:	subs	r5, r5, #1
   15818:	strd	r0, [r4], #8
   1581c:	bne	15804 <generate_code@@Base+0x90>
   15820:	pop	{r4, r5, r6, pc}
   15824:	ldr	r3, [pc, #20]	; 15840 <generate_code@@Base+0xcc>
   15828:	ldr	r2, [pc, #20]	; 15844 <generate_code@@Base+0xd0>
   1582c:	add	r3, pc, r3
   15830:	ldr	r3, [r3, r2]
   15834:	ldmib	r3, {r0, r3}
   15838:	add	r0, r0, r3
   1583c:	bx	lr
   15840:	andeq	r3, r1, ip, asr #15
   15844:	strheq	r0, [r0], -r4
   15848:	ldr	r3, [pc, #28]	; 1586c <generate_code@@Base+0xf8>
   1584c:	ldr	r2, [pc, #28]	; 15870 <generate_code@@Base+0xfc>
   15850:	add	r3, pc, r3
   15854:	ldr	r3, [r3, r2]
   15858:	ldr	r2, [r3]
   1585c:	cmp	r2, #0
   15860:	ldrne	r0, [r3, #20]
   15864:	moveq	r0, #1
   15868:	bx	lr
   1586c:	andeq	r3, r1, r8, lsr #15
   15870:	strheq	r0, [r0], -r4
   15874:	bx	lr
   15878:	ldr	ip, [pc, #32]	; 158a0 <generate_code@@Base+0x12c>
   1587c:	mov	r3, #32
   15880:	teq	r0, r1
   15884:	movmi	r2, ip
   15888:	movpl	r2, #0
   1588c:	subs	r3, r3, #1
   15890:	lsl	r1, r1, #1
   15894:	eor	r0, r2, r0, lsl #1
   15898:	bne	15880 <generate_code@@Base+0x10c>
   1589c:	bx	lr
   158a0:	strbeq	r1, [r1], #3511	; 0xdb7
   158a4:	ldr	r3, [pc, #76]	; 158f8 <generate_code@@Base+0x184>
   158a8:	ldr	r1, [pc, #76]	; 158fc <generate_code@@Base+0x188>
   158ac:	add	r3, pc, r3
   158b0:	push	{r4, r5, r6, lr}
   158b4:	mov	r5, r0
   158b8:	ldr	r4, [r3, r1]
   158bc:	lsl	r1, r0, #2
   158c0:	mov	r0, r4
   158c4:	mov	r2, #1
   158c8:	ldr	r3, [r0], #28
   158cc:	bl	11930 <fwrite@plt>
   158d0:	cmp	r0, #1
   158d4:	movne	r3, #1
   158d8:	ldr	r0, [r4, #8]
   158dc:	strne	r3, [r4, #20]
   158e0:	ldr	r3, [r4, #4]
   158e4:	sub	r0, r0, r5
   158e8:	add	r3, r3, r5
   158ec:	str	r3, [r4, #4]
   158f0:	str	r0, [r4, #8]
   158f4:	pop	{r4, r5, r6, pc}
   158f8:	andeq	r3, r1, ip, asr #14
   158fc:	strheq	r0, [r0], -r4
   15900:	ldr	r3, [pc, #76]	; 15954 <generate_code@@Base+0x1e0>
   15904:	ldr	r2, [pc, #76]	; 15958 <generate_code@@Base+0x1e4>
   15908:	add	r3, pc, r3
   1590c:	push	{r4, r5, r6, lr}
   15910:	mov	r5, r0
   15914:	ldr	r4, [r3, r2]
   15918:	ldr	r3, [r4, #8]
   1591c:	cmp	r3, #1024	; 0x400
   15920:	bcc	15940 <generate_code@@Base+0x1cc>
   15924:	mov	r0, #1024	; 0x400
   15928:	bl	158a4 <generate_code@@Base+0x130>
   1592c:	ldr	r3, [r4, #8]
   15930:	cmp	r3, #0
   15934:	addne	r2, r4, #4096	; 0x1000
   15938:	ldrne	r2, [r2, #28]
   1593c:	strne	r2, [r4, #28]
   15940:	add	r0, r3, #7
   15944:	add	r3, r5, r3
   15948:	str	r3, [r4, #8]
   1594c:	add	r0, r4, r0, lsl #2
   15950:	pop	{r4, r5, r6, pc}
   15954:	strdeq	r3, [r1], -r0
   15958:	strheq	r0, [r0], -r4
   1595c:	ldr	r3, [pc, #172]	; 15a10 <generate_code@@Base+0x29c>
   15960:	ldr	r2, [pc, #172]	; 15a14 <generate_code@@Base+0x2a0>
   15964:	add	r3, pc, r3
   15968:	push	{r4, r5, r6, lr}
   1596c:	mov	r5, r0
   15970:	ldr	r4, [r3, r2]
   15974:	ldr	r3, [r4, #8]
   15978:	ldr	ip, [r4, #12]
   1597c:	sub	ip, ip, r3
   15980:	cmp	ip, r0
   15984:	bcs	159e0 <generate_code@@Base+0x26c>
   15988:	ldr	r2, [r4, #4]
   1598c:	cmp	ip, #0
   15990:	add	r2, r2, r3
   15994:	str	r2, [r4, #4]
   15998:	addne	r2, r4, #28
   1599c:	mov	r0, r4
   159a0:	ldrne	r3, [r2, r3, lsl #2]
   159a4:	mov	r6, #0
   159a8:	strne	r3, [r4, #28]
   159ac:	ldr	r3, [r0], #28
   159b0:	mov	r2, #4096	; 0x1000
   159b4:	add	r0, r0, ip, lsl #2
   159b8:	mov	r1, #1
   159bc:	str	ip, [r4, #12]
   159c0:	str	r6, [r4, #8]
   159c4:	bl	11948 <fread@plt>
   159c8:	ldr	r3, [r4, #12]
   159cc:	add	r0, r3, r0, lsr #2
   159d0:	cmp	r5, r0
   159d4:	str	r0, [r4, #12]
   159d8:	bhi	159f4 <generate_code@@Base+0x280>
   159dc:	ldr	r3, [r4, #8]
   159e0:	add	r0, r3, #7
   159e4:	add	r5, r5, r3
   159e8:	add	r0, r4, r0, lsl #2
   159ec:	str	r5, [r4, #8]
   159f0:	pop	{r4, r5, r6, pc}
   159f4:	ldr	r3, [r4, #16]
   159f8:	str	r6, [r4, #12]
   159fc:	add	r5, r5, r3
   15a00:	sub	r5, r5, r0
   15a04:	str	r5, [r4, #16]
   15a08:	mov	r0, r6
   15a0c:	pop	{r4, r5, r6, pc}
   15a10:	muleq	r1, r4, r6
   15a14:	strheq	r0, [r0], -r4
   15a18:	push	{r0, r1, r2, r3}
   15a1c:	ldr	r3, [pc, #52]	; 15a58 <generate_code@@Base+0x2e4>
   15a20:	ldr	r1, [pc, #52]	; 15a5c <generate_code@@Base+0x2e8>
   15a24:	push	{lr}		; (str lr, [sp, #-4]!)
   15a28:	add	r3, pc, r3
   15a2c:	sub	sp, sp, #12
   15a30:	add	r2, sp, #20
   15a34:	str	r2, [sp, #4]
   15a38:	ldr	r0, [r3, r1]
   15a3c:	ldr	r1, [sp, #16]
   15a40:	ldr	r0, [r0]
   15a44:	bl	11a44 <vfprintf@plt>
   15a48:	add	sp, sp, #12
   15a4c:	pop	{lr}		; (ldr lr, [sp], #4)
   15a50:	add	sp, sp, #16
   15a54:	bx	lr
   15a58:	ldrdeq	r3, [r1], -r0
   15a5c:	andeq	r0, r0, r8, lsr #1
   15a60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a64:	subs	r6, r1, #0
   15a68:	beq	15ac4 <generate_code@@Base+0x350>
   15a6c:	cmp	r2, #0
   15a70:	movne	r3, #0
   15a74:	mov	r7, r2
   15a78:	ldr	r8, [r6]
   15a7c:	addne	r5, r0, #12
   15a80:	movne	r4, r3
   15a84:	beq	15ab4 <generate_code@@Base+0x340>
   15a88:	ldr	r0, [r5, #4]!
   15a8c:	add	r2, r6, r3, lsl #3
   15a90:	cmp	r0, #0
   15a94:	add	r9, r3, #1
   15a98:	add	r4, r4, #1
   15a9c:	beq	15aac <generate_code@@Base+0x338>
   15aa0:	ldr	r0, [r2, #28]
   15aa4:	bl	1190c <free@plt>
   15aa8:	mov	r3, r9
   15aac:	cmp	r7, r4
   15ab0:	bne	15a88 <generate_code@@Base+0x314>
   15ab4:	mov	r0, r6
   15ab8:	bl	1190c <free@plt>
   15abc:	mov	r0, r8
   15ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ac4:	mov	r8, r6
   15ac8:	b	15abc <generate_code@@Base+0x348>
   15acc:	push	{r4, r5}
   15ad0:	mov	r4, r0
   15ad4:	mov	r5, r1
   15ad8:	orrs	r3, r4, r5
   15adc:	beq	15b20 <generate_code@@Base+0x3ac>
   15ae0:	cmp	r1, #0
   15ae4:	clzeq	r1, r0
   15ae8:	addeq	r1, r1, #32
   15aec:	clzne	r1, r1
   15af0:	rsb	r3, r1, #63	; 0x3f
   15af4:	cmp	r3, #1
   15af8:	bls	15b20 <generate_code@@Base+0x3ac>
   15afc:	rsb	r2, r1, #61	; 0x3d
   15b00:	rsb	r0, r2, #32
   15b04:	lsr	r3, r4, r2
   15b08:	sub	r2, r2, #32
   15b0c:	orr	r3, r3, r5, lsl r0
   15b10:	orr	r3, r3, r5, lsr r2
   15b14:	rsb	r1, r1, #1073741886	; 0x4000003e
   15b18:	and	r0, r3, #3
   15b1c:	add	r0, r0, r1, lsl #2
   15b20:	pop	{r4, r5}
   15b24:	bx	lr
   15b28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b2c:	mov	r1, r3
   15b30:	mov	sl, r0
   15b34:	mov	r0, r2
   15b38:	mov	r8, r2
   15b3c:	mov	r9, r3
   15b40:	bl	15acc <generate_code@@Base+0x358>
   15b44:	add	r0, r0, r0, lsl #1
   15b48:	lsl	r0, r0, #3
   15b4c:	add	r3, sl, r0
   15b50:	ldr	r2, [sl, r0]
   15b54:	ldrd	r4, [r3, #16]
   15b58:	ldrd	r6, [r3, #8]
   15b5c:	add	r2, r2, #1
   15b60:	adds	r4, r4, r8
   15b64:	adc	r5, r5, r9
   15b68:	cmp	r8, r6
   15b6c:	sbcs	r1, r9, r7
   15b70:	str	r2, [sl, r0]
   15b74:	strd	r4, [r3, #16]
   15b78:	strdlt	r8, [r3, #8]
   15b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b80:	ldr	r3, [r1, #8]
   15b84:	cmp	r3, #0
   15b88:	bxeq	lr
   15b8c:	push	{r4, r5, r6, r7, r8, lr}
   15b90:	add	r2, r1, #6016	; 0x1780
   15b94:	mov	r8, r1
   15b98:	mov	r7, r0
   15b9c:	ldrd	r0, [r1, #24]
   15ba0:	add	r2, r2, #32
   15ba4:	mov	r3, r8
   15ba8:	mov	ip, #0
   15bac:	mov	r4, #0
   15bb0:	mov	r5, #0
   15bb4:	str	ip, [r3, #40]	; 0x28
   15bb8:	strd	r0, [r3, #48]	; 0x30
   15bbc:	strd	r4, [r3, #56]	; 0x38
   15bc0:	add	r3, r3, #24
   15bc4:	cmp	r2, r3
   15bc8:	bne	15bb4 <generate_code@@Base+0x440>
   15bcc:	cmp	r7, #0
   15bd0:	popeq	{r4, r5, r6, r7, r8, pc}
   15bd4:	add	r8, r8, #40	; 0x28
   15bd8:	ldr	r3, [r7, #16]
   15bdc:	cmp	r3, #0
   15be0:	beq	15c68 <generate_code@@Base+0x4f4>
   15be4:	ldr	r2, [r7, #56]	; 0x38
   15be8:	cmp	r2, #0
   15bec:	beq	15c68 <generate_code@@Base+0x4f4>
   15bf0:	mov	r6, #0
   15bf4:	b	15c04 <generate_code@@Base+0x490>
   15bf8:	add	r6, r6, #1
   15bfc:	cmp	r2, r6
   15c00:	beq	15c68 <generate_code@@Base+0x4f4>
   15c04:	ldr	r3, [r7, #60]	; 0x3c
   15c08:	ldr	r4, [r3, r6, lsl #2]
   15c0c:	cmp	r4, #0
   15c10:	beq	15bf8 <generate_code@@Base+0x484>
   15c14:	ldr	r3, [r4]
   15c18:	cmp	r3, r7
   15c1c:	bne	15bf8 <generate_code@@Base+0x484>
   15c20:	ldr	r3, [r4, #16]
   15c24:	cmp	r3, #0
   15c28:	beq	15bf8 <generate_code@@Base+0x484>
   15c2c:	mov	r5, #0
   15c30:	ldr	r2, [r4, #20]
   15c34:	lsl	r3, r5, #3
   15c38:	add	r2, r2, r3
   15c3c:	mov	r0, r8
   15c40:	ldrd	r2, [r2]
   15c44:	bl	15b28 <generate_code@@Base+0x3b4>
   15c48:	ldr	r3, [r4, #16]
   15c4c:	add	r5, r5, #1
   15c50:	cmp	r3, r5
   15c54:	bhi	15c30 <generate_code@@Base+0x4bc>
   15c58:	ldr	r2, [r7, #56]	; 0x38
   15c5c:	add	r6, r6, #1
   15c60:	cmp	r2, r6
   15c64:	bne	15c04 <generate_code@@Base+0x490>
   15c68:	ldr	r7, [r7, #4]
   15c6c:	cmp	r7, #0
   15c70:	bne	15bd8 <generate_code@@Base+0x464>
   15c74:	pop	{r4, r5, r6, r7, r8, pc}
   15c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c7c:	sub	sp, sp, #12
   15c80:	mov	r5, r0
   15c84:	str	r0, [sp, #4]
   15c88:	mov	r6, r2
   15c8c:	str	r2, [sp]
   15c90:	mov	r0, r1
   15c94:	mov	r4, r1
   15c98:	ldr	r2, [pc, #344]	; 15df8 <generate_code@@Base+0x684>
   15c9c:	mov	r1, #0
   15ca0:	bl	11a08 <memset@plt>
   15ca4:	subs	r3, r5, #0
   15ca8:	mov	r5, #0
   15cac:	str	r5, [r6]
   15cb0:	beq	15ddc <generate_code@@Base+0x668>
   15cb4:	mov	r7, r5
   15cb8:	mov	r9, r5
   15cbc:	mov	r8, r3
   15cc0:	ldr	r0, [r8, #12]
   15cc4:	bl	119b4 <strlen@plt>
   15cc8:	cmp	r5, r0
   15ccc:	ldrcc	r3, [sp]
   15cd0:	strcc	r0, [r3]
   15cd4:	mov	r0, r7
   15cd8:	ldr	r1, [r8, #8]
   15cdc:	bl	15878 <generate_code@@Base+0x104>
   15ce0:	ldr	r6, [r8, #56]	; 0x38
   15ce4:	mov	r1, r6
   15ce8:	bl	15878 <generate_code@@Base+0x104>
   15cec:	cmp	r6, #0
   15cf0:	mov	r7, r0
   15cf4:	beq	15dc4 <generate_code@@Base+0x650>
   15cf8:	ldr	r5, [r8, #60]	; 0x3c
   15cfc:	add	r6, r5, r6, lsl #2
   15d00:	b	15d24 <generate_code@@Base+0x5b0>
   15d04:	mov	r0, r7
   15d08:	mov	r1, r9
   15d0c:	bl	15878 <generate_code@@Base+0x104>
   15d10:	mov	r1, r9
   15d14:	bl	15878 <generate_code@@Base+0x104>
   15d18:	mov	r7, r0
   15d1c:	cmp	r6, r5
   15d20:	beq	15dc4 <generate_code@@Base+0x650>
   15d24:	ldr	fp, [r5], #4
   15d28:	cmp	fp, #0
   15d2c:	beq	15d04 <generate_code@@Base+0x590>
   15d30:	ldr	r3, [fp]
   15d34:	cmp	r3, r8
   15d38:	bne	15d04 <generate_code@@Base+0x590>
   15d3c:	mov	r0, r7
   15d40:	ldr	r1, [fp, #12]
   15d44:	bl	15878 <generate_code@@Base+0x104>
   15d48:	ldr	r1, [fp, #8]
   15d4c:	bl	15878 <generate_code@@Base+0x104>
   15d50:	ldr	r3, [r8, #16]
   15d54:	cmp	r3, #0
   15d58:	mov	r7, r0
   15d5c:	beq	15d1c <generate_code@@Base+0x5a8>
   15d60:	ldr	sl, [fp, #16]
   15d64:	ldr	r3, [r4, #8]
   15d68:	mov	r1, sl
   15d6c:	add	r3, r3, sl
   15d70:	str	r3, [r4, #8]
   15d74:	bl	15878 <generate_code@@Base+0x104>
   15d78:	cmp	sl, #0
   15d7c:	mov	r7, r0
   15d80:	beq	15d1c <generate_code@@Base+0x5a8>
   15d84:	ldr	ip, [fp, #20]
   15d88:	ldrd	r2, [r4, #16]
   15d8c:	add	lr, ip, sl, lsl #3
   15d90:	ldrd	r0, [ip]
   15d94:	ldrd	sl, [r4, #24]
   15d98:	adds	r2, r2, r0
   15d9c:	adc	r3, r3, r1
   15da0:	strd	r2, [r4, #16]
   15da4:	ldrd	r0, [ip], #8
   15da8:	cmp	sl, r0
   15dac:	sbcs	sl, fp, r1
   15db0:	strdlt	r0, [r4, #24]
   15db4:	cmp	lr, ip
   15db8:	bne	15d90 <generate_code@@Base+0x61c>
   15dbc:	cmp	r6, r5
   15dc0:	bne	15d24 <generate_code@@Base+0x5b0>
   15dc4:	ldr	r8, [r8, #4]
   15dc8:	cmp	r8, #0
   15dcc:	beq	15de0 <generate_code@@Base+0x66c>
   15dd0:	ldr	r3, [sp]
   15dd4:	ldr	r5, [r3]
   15dd8:	b	15cc0 <generate_code@@Base+0x54c>
   15ddc:	ldr	r7, [sp, #4]
   15de0:	ldr	r0, [sp, #4]
   15de4:	mov	r1, r4
   15de8:	bl	15b80 <generate_code@@Base+0x40c>
   15dec:	mov	r0, r7
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df8:	andeq	r1, r0, r8, asr #15
   15dfc:	push	{r4, r5, r6, lr}
   15e00:	mov	r4, r0
   15e04:	ldr	r0, [pc, #172]	; 15eb8 <generate_code@@Base+0x744>
   15e08:	add	r0, pc, r0
   15e0c:	bl	11954 <getenv@plt>
   15e10:	subs	r3, r0, #0
   15e14:	beq	15e20 <generate_code@@Base+0x6ac>
   15e18:	bl	11a5c <atoi@plt>
   15e1c:	bic	r3, r0, r0, asr #31
   15e20:	ldr	r0, [pc, #148]	; 15ebc <generate_code@@Base+0x748>
   15e24:	str	r3, [r4, #8]
   15e28:	add	r0, pc, r0
   15e2c:	bl	11954 <getenv@plt>
   15e30:	subs	r6, r0, #0
   15e34:	beq	15e88 <generate_code@@Base+0x714>
   15e38:	bl	119b4 <strlen@plt>
   15e3c:	subs	r5, r0, #0
   15e40:	beq	15e88 <generate_code@@Base+0x714>
   15e44:	sub	r3, r5, #1
   15e48:	ldrb	r2, [r6, r3]
   15e4c:	cmp	r2, #47	; 0x2f
   15e50:	beq	15e7c <generate_code@@Base+0x708>
   15e54:	ldr	r0, [r4, #4]
   15e58:	str	r5, [r4, #12]
   15e5c:	add	r0, r0, #2
   15e60:	add	r0, r0, r5
   15e64:	bl	11960 <malloc@plt>
   15e68:	mov	r2, r5
   15e6c:	mov	r1, r6
   15e70:	str	r0, [r4]
   15e74:	pop	{r4, r5, r6, lr}
   15e78:	b	11918 <memcpy@plt>
   15e7c:	cmp	r3, #0
   15e80:	movne	r5, r3
   15e84:	bne	15e54 <generate_code@@Base+0x6e0>
   15e88:	ldr	r3, [r4, #8]
   15e8c:	cmp	r3, #0
   15e90:	ldrne	r6, [pc, #40]	; 15ec0 <generate_code@@Base+0x74c>
   15e94:	movne	r5, #1
   15e98:	addne	r6, pc, r6
   15e9c:	bne	15e54 <generate_code@@Base+0x6e0>
   15ea0:	ldr	r0, [r4, #4]
   15ea4:	str	r3, [r4, #12]
   15ea8:	add	r0, r0, #2
   15eac:	bl	11960 <malloc@plt>
   15eb0:	str	r0, [r4]
   15eb4:	pop	{r4, r5, r6, pc}
   15eb8:	andeq	r2, r0, ip, lsl #5
   15ebc:	andeq	r2, r0, r0, lsl #5
   15ec0:	strdeq	r2, [r0], -r8
   15ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec8:	sub	sp, sp, #6080	; 0x17c0
   15ecc:	sub	sp, sp, #44	; 0x2c
   15ed0:	add	r3, sp, #72	; 0x48
   15ed4:	mov	r4, r0
   15ed8:	str	r0, [sp, #64]	; 0x40
   15edc:	str	r1, [sp, #60]	; 0x3c
   15ee0:	mov	r0, r3
   15ee4:	ldr	r2, [pc, #1068]	; 16318 <generate_code@@Base+0xba4>
   15ee8:	mov	r1, #0
   15eec:	str	r3, [sp, #68]	; 0x44
   15ef0:	bl	11a08 <memset@plt>
   15ef4:	add	r3, r4, #6016	; 0x1780
   15ef8:	add	r3, r3, #8
   15efc:	add	r2, sp, #2016	; 0x7e0
   15f00:	mov	sl, #251	; 0xfb
   15f04:	add	r2, r2, #8
   15f08:	mov	fp, #0
   15f0c:	str	r3, [sp, #56]	; 0x38
   15f10:	add	r3, sp, #72	; 0x48
   15f14:	str	r2, [sp, #44]	; 0x2c
   15f18:	str	r3, [sp, #48]	; 0x30
   15f1c:	mov	r2, #0
   15f20:	mov	r3, #0
   15f24:	mov	r5, sl
   15f28:	mov	r0, fp
   15f2c:	strd	r2, [sp, #24]
   15f30:	str	sl, [sp, #52]	; 0x34
   15f34:	ldr	r9, [sp, #56]	; 0x38
   15f38:	str	r5, [sp, #40]	; 0x28
   15f3c:	ldr	sl, [sp, #60]	; 0x3c
   15f40:	ldrd	r2, [r9, #16]
   15f44:	ldr	r4, [r9]
   15f48:	str	r4, [sp, #4]
   15f4c:	strd	r2, [sp, #8]
   15f50:	ldr	r3, [sp, #4]
   15f54:	cmp	r3, #0
   15f58:	beq	16204 <generate_code@@Base+0xa90>
   15f5c:	cmp	fp, #0
   15f60:	bne	160e8 <generate_code@@Base+0x974>
   15f64:	ldr	r5, [sp, #40]	; 0x28
   15f68:	cmp	r5, #0
   15f6c:	blt	162f4 <generate_code@@Base+0xb80>
   15f70:	add	ip, r5, r5, lsl #1
   15f74:	ldr	fp, [sl, ip, lsl #3]
   15f78:	add	ip, sl, ip, lsl #3
   15f7c:	cmp	fp, #0
   15f80:	bne	162e8 <generate_code@@Base+0xb74>
   15f84:	mov	r3, ip
   15f88:	ldr	r4, [sp, #4]
   15f8c:	b	15fa0 <generate_code@@Base+0x82c>
   15f90:	ldr	fp, [r3]
   15f94:	mov	ip, r3
   15f98:	cmp	fp, #0
   15f9c:	bne	162e0 <generate_code@@Base+0xb6c>
   15fa0:	subs	r5, r5, #1
   15fa4:	sub	r3, r3, #24
   15fa8:	bcs	15f90 <generate_code@@Base+0x81c>
   15fac:	ldr	sl, [sp, #52]	; 0x34
   15fb0:	mov	r8, r0
   15fb4:	mov	r5, r4
   15fb8:	lsl	r4, sl, #1
   15fbc:	ldr	r3, [sp, #44]	; 0x2c
   15fc0:	add	lr, r4, sl
   15fc4:	sub	ip, r3, #1952	; 0x7a0
   15fc8:	lsl	lr, lr, #3
   15fcc:	add	ip, ip, lr
   15fd0:	ldrd	r0, [sp, #8]
   15fd4:	add	lr, r3, lr
   15fd8:	ldrd	r2, [ip, #16]
   15fdc:	ldr	r6, [lr, #-1952]	; 0xfffff860
   15fe0:	adds	r0, r0, r2
   15fe4:	adc	r1, r1, r3
   15fe8:	mov	r2, r0
   15fec:	mov	r3, r1
   15ff0:	ldrd	r0, [ip, #8]
   15ff4:	strd	r2, [ip, #16]
   15ff8:	ldr	r3, [sp, #56]	; 0x38
   15ffc:	add	r5, r6, r5
   16000:	str	r5, [lr, #-1952]	; 0xfffff860
   16004:	orrs	lr, r0, r1
   16008:	ldrd	r2, [r3, #8]
   1600c:	beq	1601c <generate_code@@Base+0x8a8>
   16010:	cmp	r2, r0
   16014:	sbcs	r1, r3, r1
   16018:	bge	16030 <generate_code@@Base+0x8bc>
   1601c:	ldr	r1, [sp, #44]	; 0x2c
   16020:	add	r0, r4, sl
   16024:	sub	r1, r1, #1952	; 0x7a0
   16028:	add	r1, r1, r0, lsl #3
   1602c:	strd	r2, [r1, #8]
   16030:	add	lr, r4, sl
   16034:	ldr	r3, [sp, #68]	; 0x44
   16038:	lsl	lr, lr, #3
   1603c:	add	ip, r3, lr
   16040:	ldr	r3, [sp, #64]	; 0x40
   16044:	add	lr, r3, lr
   16048:	b	16098 <generate_code@@Base+0x924>
   1604c:	ldrd	r0, [ip, #-8]
   16050:	ldrd	r2, [lr, #-8]
   16054:	ldrd	r4, [ip, #-16]
   16058:	adds	r6, r0, r2
   1605c:	adc	r7, r1, r3
   16060:	ldr	r2, [lr, #-24]	; 0xffffffe8
   16064:	ldr	r3, [ip, #-24]	; 0xffffffe8
   16068:	orrs	r1, r4, r5
   1606c:	add	r3, r3, r2
   16070:	str	r3, [ip, #-24]	; 0xffffffe8
   16074:	strd	r6, [ip, #-8]
   16078:	ldrd	r2, [lr, #-16]
   1607c:	beq	1608c <generate_code@@Base+0x918>
   16080:	cmp	r2, r4
   16084:	sbcs	r1, r3, r5
   16088:	bge	16090 <generate_code@@Base+0x91c>
   1608c:	strd	r2, [ip, #-16]
   16090:	sub	ip, ip, #24
   16094:	sub	lr, lr, #24
   16098:	subs	sl, sl, #1
   1609c:	bpl	1604c <generate_code@@Base+0x8d8>
   160a0:	ldr	r3, [sp, #44]	; 0x2c
   160a4:	add	r0, r8, r8, lsl #1
   160a8:	sub	r3, r3, #1952	; 0x7a0
   160ac:	add	r3, r3, r0, lsl #3
   160b0:	ldrd	r6, [sp, #24]
   160b4:	ldrd	r4, [r3, #16]
   160b8:	ldr	r1, [sp, #68]	; 0x44
   160bc:	ldr	r0, [sp, #64]	; 0x40
   160c0:	adds	r6, r6, r4
   160c4:	adc	r7, r7, r5
   160c8:	mov	r4, r6
   160cc:	mov	r5, r7
   160d0:	ldr	r2, [pc, #576]	; 16318 <generate_code@@Base+0xba4>
   160d4:	strd	r4, [r3, #16]
   160d8:	bl	11918 <memcpy@plt>
   160dc:	add	sp, sp, #6080	; 0x17c0
   160e0:	add	sp, sp, #44	; 0x2c
   160e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160e8:	ldr	r3, [sp, #40]	; 0x28
   160ec:	add	ip, r3, r3, lsl #1
   160f0:	add	ip, sl, ip, lsl #3
   160f4:	ldr	lr, [sp, #4]
   160f8:	cmp	fp, lr
   160fc:	bcc	16274 <generate_code@@Base+0xb00>
   16100:	ldrd	r2, [r9, #8]
   16104:	ldrd	r0, [ip, #8]
   16108:	adds	r4, r2, r0
   1610c:	adc	r5, r3, r1
   16110:	cmp	fp, lr
   16114:	strd	r4, [sp, #16]
   16118:	bls	16304 <generate_code@@Base+0xb90>
   1611c:	ldrd	r6, [sp, #24]
   16120:	mov	r2, fp
   16124:	mov	r3, #0
   16128:	umull	r0, r1, lr, r6
   1612c:	mla	r1, lr, r7, r1
   16130:	bl	17800 <__gcov_sort_n_vals@@Base+0x534>
   16134:	mov	r2, r0
   16138:	subs	r0, r6, r2
   1613c:	mov	r3, r1
   16140:	sbc	r1, r7, r3
   16144:	strd	r0, [sp, #24]
   16148:	ldr	r1, [sp, #4]
   1614c:	mov	r0, #0
   16150:	sub	fp, fp, r1
   16154:	mov	r8, r1
   16158:	mov	r1, #0
   1615c:	str	r1, [sp, #4]
   16160:	mov	r1, #0
   16164:	ldrd	r6, [sp, #8]
   16168:	strd	r0, [sp, #8]
   1616c:	adds	r4, r2, r6
   16170:	adc	r5, r3, r7
   16174:	ldrd	r0, [sp, #16]
   16178:	strd	r4, [sp, #32]
   1617c:	bl	15acc <generate_code@@Base+0x358>
   16180:	ldr	r3, [sp, #48]	; 0x30
   16184:	ldrd	r4, [sp, #32]
   16188:	add	r1, r0, r0, lsl #1
   1618c:	lsl	r1, r1, #3
   16190:	add	ip, r3, r1
   16194:	ldr	r3, [sp, #44]	; 0x2c
   16198:	ldrd	r6, [ip, #8]
   1619c:	add	r1, r3, r1
   161a0:	ldrd	r2, [ip, #16]
   161a4:	adds	r2, r2, r4
   161a8:	adc	r3, r3, r5
   161ac:	strd	r2, [sp, #32]
   161b0:	ldrd	r2, [sp, #16]
   161b4:	cmp	r2, r6
   161b8:	sbcs	lr, r3, r7
   161bc:	movlt	lr, #1
   161c0:	movge	lr, #0
   161c4:	orrs	r4, r6, r7
   161c8:	ldr	r4, [r1, #-1952]	; 0xfffff860
   161cc:	orreq	lr, lr, #1
   161d0:	add	r8, r4, r8
   161d4:	ldrd	r4, [sp, #32]
   161d8:	cmp	lr, #0
   161dc:	str	r8, [r1, #-1952]	; 0xfffff860
   161e0:	strd	r4, [ip, #16]
   161e4:	strdne	r2, [ip, #8]
   161e8:	cmp	fp, #0
   161ec:	ldreq	r3, [sp, #40]	; 0x28
   161f0:	subeq	r3, r3, #1
   161f4:	streq	r3, [sp, #40]	; 0x28
   161f8:	ldr	r3, [sp, #4]
   161fc:	cmp	r3, #0
   16200:	bne	15f5c <generate_code@@Base+0x7e8>
   16204:	ldr	r3, [sp, #52]	; 0x34
   16208:	ldr	r5, [sp, #40]	; 0x28
   1620c:	sub	r3, r3, #1
   16210:	str	r3, [sp, #52]	; 0x34
   16214:	cmn	r3, #1
   16218:	ldr	r3, [sp, #56]	; 0x38
   1621c:	sub	r3, r3, #24
   16220:	str	r3, [sp, #56]	; 0x38
   16224:	bne	15f34 <generate_code@@Base+0x7c0>
   16228:	cmp	fp, #0
   1622c:	mov	r9, r5
   16230:	subne	r9, r5, #1
   16234:	cmp	r9, #0
   16238:	mov	r8, r0
   1623c:	blt	160a0 <generate_code@@Base+0x92c>
   16240:	ldr	r2, [sp, #60]	; 0x3c
   16244:	add	r3, r9, r9, lsl #1
   16248:	sub	r0, r2, #24
   1624c:	add	r1, r2, r3, lsl #3
   16250:	ldrd	r2, [sp, #24]
   16254:	ldrd	r4, [r1, #16]
   16258:	sub	r1, r1, #24
   1625c:	adds	r2, r2, r4
   16260:	adc	r3, r3, r5
   16264:	cmp	r0, r1
   16268:	bne	16254 <generate_code@@Base+0xae0>
   1626c:	strd	r2, [sp, #24]
   16270:	b	160a0 <generate_code@@Base+0x92c>
   16274:	ldrd	r2, [sp, #8]
   16278:	ldrd	r6, [ip, #8]
   1627c:	ldrd	r4, [r9, #8]
   16280:	umull	r0, r1, fp, r2
   16284:	ldr	r8, [sp, #4]
   16288:	adds	r4, r4, r6
   1628c:	adc	r5, r5, r7
   16290:	mla	r1, fp, r3, r1
   16294:	mov	r2, r8
   16298:	mov	r3, #0
   1629c:	strd	r4, [sp, #16]
   162a0:	bl	17800 <__gcov_sort_n_vals@@Base+0x534>
   162a4:	sub	r3, r8, fp
   162a8:	str	r3, [sp, #4]
   162ac:	ldrd	r2, [sp, #8]
   162b0:	mov	r8, fp
   162b4:	mov	fp, #0
   162b8:	subs	r2, r2, r0
   162bc:	sbc	r3, r3, r1
   162c0:	mov	r6, r0
   162c4:	mov	r7, r1
   162c8:	mov	r0, #0
   162cc:	mov	r1, #0
   162d0:	strd	r2, [sp, #8]
   162d4:	ldrd	r2, [sp, #24]
   162d8:	strd	r0, [sp, #24]
   162dc:	b	1616c <generate_code@@Base+0x9f8>
   162e0:	str	r5, [sp, #40]	; 0x28
   162e4:	str	r4, [sp, #4]
   162e8:	ldrd	r2, [ip, #16]
   162ec:	strd	r2, [sp, #24]
   162f0:	b	160f4 <generate_code@@Base+0x980>
   162f4:	ldr	sl, [sp, #52]	; 0x34
   162f8:	mov	r8, r0
   162fc:	ldr	r5, [sp, #4]
   16300:	b	15fb8 <generate_code@@Base+0x844>
   16304:	mov	r0, #0
   16308:	mov	r1, #0
   1630c:	ldrd	r2, [sp, #24]
   16310:	strd	r0, [sp, #24]
   16314:	b	16148 <generate_code@@Base+0x9d4>
   16318:	andeq	r1, r0, r0, lsr #15
   1631c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16320:	ldrb	r4, [r0]
   16324:	cmp	r4, #47	; 0x2f
   16328:	addeq	r5, r0, #1
   1632c:	ldrbeq	r4, [r0, #1]
   16330:	movne	r5, r0
   16334:	cmp	r4, #0
   16338:	beq	1638c <generate_code@@Base+0xc18>
   1633c:	mov	r6, r0
   16340:	ldr	sl, [pc, #144]	; 163d8 <generate_code@@Base+0xc64>
   16344:	mov	r8, #0
   16348:	mov	r7, #47	; 0x2f
   1634c:	b	1635c <generate_code@@Base+0xbe8>
   16350:	ldrb	r4, [r5, #1]!
   16354:	cmp	r4, #0
   16358:	beq	1638c <generate_code@@Base+0xc18>
   1635c:	cmp	r4, #47	; 0x2f
   16360:	bne	16350 <generate_code@@Base+0xbdc>
   16364:	strb	r8, [r5]
   16368:	mov	r1, #0
   1636c:	mov	r0, r6
   16370:	bl	11a20 <access@plt>
   16374:	cmn	r0, #1
   16378:	beq	16398 <generate_code@@Base+0xc24>
   1637c:	strb	r7, [r5]
   16380:	ldrb	r4, [r5, #1]!
   16384:	cmp	r4, #0
   16388:	bne	1635c <generate_code@@Base+0xbe8>
   1638c:	mov	r9, #0
   16390:	mov	r0, r9
   16394:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16398:	mov	r1, sl
   1639c:	mov	r0, r6
   163a0:	bl	119f0 <mkdir@plt>
   163a4:	cmn	r0, #1
   163a8:	mov	r9, r0
   163ac:	bne	1637c <generate_code@@Base+0xc08>
   163b0:	bl	119d8 <__errno_location@plt>
   163b4:	ldr	r3, [r0]
   163b8:	cmp	r3, #17
   163bc:	beq	1637c <generate_code@@Base+0xc08>
   163c0:	ldr	r0, [pc, #20]	; 163dc <generate_code@@Base+0xc68>
   163c4:	mov	r1, r6
   163c8:	add	r0, pc, r0
   163cc:	bl	15a18 <generate_code@@Base+0x2a4>
   163d0:	strb	r4, [r5]
   163d4:	b	16390 <generate_code@@Base+0xc1c>
   163d8:	andeq	r0, r0, sp, ror #3
   163dc:	andeq	r1, r0, ip, ror #25
   163e0:	ldr	r3, [pc, #124]	; 16464 <generate_code@@Base+0xcf0>
   163e4:	cmp	r1, r3
   163e8:	beq	1645c <generate_code@@Base+0xce8>
   163ec:	cmp	r2, #0
   163f0:	push	{r4, r5, lr}
   163f4:	sub	sp, sp, #12
   163f8:	ldreq	r2, [r0]
   163fc:	lsr	r3, r1, #24
   16400:	ldr	r0, [pc, #96]	; 16468 <generate_code@@Base+0xcf4>
   16404:	lsr	r5, r1, #16
   16408:	lsr	r4, r1, #8
   1640c:	strb	r1, [sp, #3]
   16410:	strb	r3, [sp]
   16414:	mov	r1, #53	; 0x35
   16418:	mov	r3, #42	; 0x2a
   1641c:	mov	lr, #54	; 0x36
   16420:	mov	ip, #48	; 0x30
   16424:	strb	r1, [sp, #6]
   16428:	strb	r3, [sp, #7]
   1642c:	mov	r1, r2
   16430:	mov	r3, sp
   16434:	add	r2, sp, #4
   16438:	add	r0, pc, r0
   1643c:	strb	r5, [sp, #1]
   16440:	strb	r4, [sp, #2]
   16444:	strb	lr, [sp, #4]
   16448:	strb	ip, [sp, #5]
   1644c:	bl	15a18 <generate_code@@Base+0x2a4>
   16450:	mov	r0, #0
   16454:	add	sp, sp, #12
   16458:	pop	{r4, r5, pc}
   1645c:	mov	r0, #1
   16460:	bx	lr
   16464:	ldrtcc	r3, [r0], -sl, lsr #10
   16468:	andeq	r1, r0, r4, lsr #25
   1646c:	ldr	r2, [r2, #16]
   16470:	push	{r4, r5, r6, lr}
   16474:	cmp	r2, #0
   16478:	mov	r6, r3
   1647c:	ldr	ip, [sp, #16]
   16480:	beq	1654c <generate_code@@Base+0xdd8>
   16484:	ldr	r3, [r3, #12]
   16488:	cmp	r1, #0
   1648c:	addeq	r2, r3, #1
   16490:	streq	r2, [r6, #12]
   16494:	cmp	r3, #0
   16498:	beq	164f0 <generate_code@@Base+0xd7c>
   1649c:	ldrd	r0, [ip, #16]
   164a0:	ldrd	r2, [r6, #16]
   164a4:	ldrd	r4, [r6, #24]
   164a8:	adds	r2, r2, r0
   164ac:	adc	r3, r3, r1
   164b0:	strd	r2, [r6, #16]
   164b4:	ldrd	r0, [ip, #24]
   164b8:	cmp	r4, r0
   164bc:	sbcs	r3, r5, r1
   164c0:	blt	16570 <generate_code@@Base+0xdfc>
   164c4:	ldrd	r2, [r6, #32]
   164c8:	adds	r2, r2, r0
   164cc:	adc	r3, r3, r1
   164d0:	strd	r2, [r6, #32]
   164d4:	add	r1, ip, #40	; 0x28
   164d8:	add	r0, r6, #40	; 0x28
   164dc:	bl	15ec4 <generate_code@@Base+0x750>
   164e0:	ldr	r3, [sp, #20]
   164e4:	mov	r0, #0
   164e8:	str	r3, [r6]
   164ec:	pop	{r4, r5, r6, pc}
   164f0:	ldr	r1, [ip, #8]
   164f4:	ldrd	r2, [r6, #16]
   164f8:	str	r1, [r6, #8]
   164fc:	ldrd	r0, [ip, #16]
   16500:	ldrd	r4, [r6, #24]
   16504:	adds	r2, r2, r0
   16508:	adc	r3, r3, r1
   1650c:	strd	r2, [r6, #16]
   16510:	ldrd	r0, [ip, #24]
   16514:	cmp	r4, r0
   16518:	sbcs	r3, r5, r1
   1651c:	bge	1658c <generate_code@@Base+0xe18>
   16520:	ldrd	r2, [r6, #32]
   16524:	strd	r0, [r6, #24]
   16528:	ldrd	r0, [ip, #24]
   1652c:	adds	r2, r2, r0
   16530:	adc	r3, r3, r1
   16534:	strd	r2, [r6, #32]
   16538:	add	r1, ip, #40	; 0x28
   1653c:	ldr	r2, [pc, #92]	; 165a0 <generate_code@@Base+0xe2c>
   16540:	add	r0, r6, #40	; 0x28
   16544:	bl	11918 <memcpy@plt>
   16548:	b	164e0 <generate_code@@Base+0xd6c>
   1654c:	ldr	r3, [r3, #12]
   16550:	cmp	r3, #0
   16554:	beq	164e0 <generate_code@@Base+0xd6c>
   16558:	mov	r1, r0
   1655c:	ldr	r0, [pc, #64]	; 165a4 <generate_code@@Base+0xe30>
   16560:	add	r0, pc, r0
   16564:	bl	15a18 <generate_code@@Base+0x2a4>
   16568:	mvn	r0, #0
   1656c:	pop	{r4, r5, r6, pc}
   16570:	ldrd	r2, [r6, #32]
   16574:	strd	r0, [r6, #24]
   16578:	ldrd	r0, [ip, #24]
   1657c:	adds	r2, r2, r0
   16580:	adc	r3, r3, r1
   16584:	strd	r2, [r6, #32]
   16588:	b	164d4 <generate_code@@Base+0xd60>
   1658c:	ldrd	r2, [r6, #32]
   16590:	adds	r2, r2, r0
   16594:	adc	r3, r3, r1
   16598:	strd	r2, [r6, #32]
   1659c:	b	16538 <generate_code@@Base+0xdc4>
   165a0:	andeq	r1, r0, r0, lsr #15
   165a4:			; <UNDEFINED> instruction: 0x00001bb4
   165a8:	ldr	ip, [pc, #52]	; 165e4 <generate_code@@Base+0xe70>
   165ac:	ldr	r3, [pc, #52]	; 165e8 <generate_code@@Base+0xe74>
   165b0:	add	ip, pc, ip
   165b4:	push	{r4, lr}
   165b8:	mov	lr, #0
   165bc:	ldr	r3, [ip, r3]
   165c0:	mvn	r4, #0
   165c4:	mov	r2, lr
   165c8:	mov	r1, lr
   165cc:	str	r4, [r3, #24]
   165d0:	str	lr, [r3, #4]
   165d4:	str	lr, [r3, #8]
   165d8:	ldr	r0, [r3]
   165dc:	pop	{r4, lr}
   165e0:	b	11a68 <fseek@plt>
   165e4:	andeq	r2, r1, r8, asr #20
   165e8:	strheq	r0, [r0], -r4
   165ec:	push	{r4, r5, r6, r7, lr}
   165f0:	sub	sp, sp, #108	; 0x6c
   165f4:	mov	r4, #0
   165f8:	mov	r7, r0
   165fc:	strh	r4, [sp, #2]
   16600:	str	r4, [sp, #4]
   16604:	str	r4, [sp, #8]
   16608:	bl	1199c <getpid@plt>
   1660c:	ldr	r3, [pc, #240]	; 16704 <generate_code@@Base+0xf90>
   16610:	ldr	ip, [pc, #240]	; 16708 <generate_code@@Base+0xf94>
   16614:	add	r3, pc, r3
   16618:	mvn	lr, #0
   1661c:	mov	r6, #1
   16620:	ldr	r2, [pc, #228]	; 1670c <generate_code@@Base+0xf98>
   16624:	mov	r1, #66	; 0x42
   16628:	str	r0, [sp, #12]
   1662c:	ldr	r5, [r3, ip]
   16630:	mov	r0, r7
   16634:	strh	r6, [sp]
   16638:	str	r4, [r5, #4]
   1663c:	str	r4, [r5, #12]
   16640:	str	r4, [r5, #8]
   16644:	str	r4, [r5, #20]
   16648:	str	lr, [r5, #16]
   1664c:	bl	11990 <open@plt>
   16650:	subs	r6, r0, #0
   16654:	movlt	r0, r4
   16658:	blt	166d8 <generate_code@@Base+0xf64>
   1665c:	mov	r7, sp
   16660:	mov	r4, #7
   16664:	mov	r2, r7
   16668:	mov	r1, r4
   1666c:	mov	r0, r6
   16670:	bl	119fc <fcntl@plt>
   16674:	cmp	r0, #0
   16678:	beq	1668c <generate_code@@Base+0xf18>
   1667c:	bl	119d8 <__errno_location@plt>
   16680:	ldr	r3, [r0]
   16684:	cmp	r3, #4
   16688:	beq	16664 <generate_code@@Base+0xef0>
   1668c:	ldr	r1, [pc, #124]	; 16710 <generate_code@@Base+0xf9c>
   16690:	mov	r0, r6
   16694:	add	r1, pc, r1
   16698:	bl	118d0 <fdopen@plt>
   1669c:	mov	r4, r0
   166a0:	cmp	r4, #0
   166a4:	mov	r0, r6
   166a8:	str	r4, [r5]
   166ac:	beq	166e0 <generate_code@@Base+0xf6c>
   166b0:	add	r1, sp, #16
   166b4:	bl	17acc <__libc_csu_fini@@Base+0x1c>
   166b8:	cmp	r0, #0
   166bc:	blt	166ec <generate_code@@Base+0xf78>
   166c0:	mov	r4, #1
   166c4:	ldr	r0, [r5]
   166c8:	mov	r1, #0
   166cc:	str	r4, [r5, #24]
   166d0:	bl	118e8 <setbuf@plt>
   166d4:	mov	r0, r4
   166d8:	add	sp, sp, #108	; 0x6c
   166dc:	pop	{r4, r5, r6, r7, pc}
   166e0:	bl	11a8c <close@plt>
   166e4:	mov	r0, r4
   166e8:	b	166d8 <generate_code@@Base+0xf64>
   166ec:	mov	r4, #0
   166f0:	ldr	r0, [r5]
   166f4:	bl	11a2c <fclose@plt>
   166f8:	str	r4, [r5]
   166fc:	mov	r0, r4
   16700:	b	166d8 <generate_code@@Base+0xf64>
   16704:	andeq	r2, r1, r4, ror #19
   16708:	strheq	r0, [r0], -r4
   1670c:			; <UNDEFINED> instruction: 0x000001b6
   16710:	andeq	r1, r0, ip, lsr #21
   16714:	push	{r4, r5, r6, lr}
   16718:	mov	r4, r1
   1671c:	ldr	r5, [pc, #244]	; 16818 <generate_code@@Base+0x10a4>
   16720:	ldr	ip, [r4, #8]
   16724:	ldr	lr, [r4, #12]
   16728:	ldr	r6, [r4]
   1672c:	cmp	ip, #0
   16730:	mov	r1, r0
   16734:	add	r5, pc, r5
   16738:	add	r0, r6, lr
   1673c:	ble	16778 <generate_code@@Base+0x1004>
   16740:	ldrb	r3, [r1]
   16744:	cmp	r3, #47	; 0x2f
   16748:	addeq	r2, r1, #1
   1674c:	ldrbeq	r3, [r1, #1]
   16750:	movne	r2, r1
   16754:	cmp	r3, #0
   16758:	beq	16778 <generate_code@@Base+0x1004>
   1675c:	cmp	r3, #47	; 0x2f
   16760:	moveq	r1, r2
   16764:	ldrb	r3, [r2, #1]!
   16768:	subeq	ip, ip, #1
   1676c:	cmp	r3, #0
   16770:	cmpne	ip, #0
   16774:	bne	1675c <generate_code@@Base+0xfe8>
   16778:	cmp	lr, #0
   1677c:	beq	16794 <generate_code@@Base+0x1020>
   16780:	ldrb	r3, [r1]
   16784:	cmp	r3, #47	; 0x2f
   16788:	addne	r0, r0, #1
   1678c:	movne	r3, #47	; 0x2f
   16790:	strbne	r3, [r6, lr]
   16794:	bl	1193c <strcpy@plt>
   16798:	ldr	r0, [r4]
   1679c:	bl	165ec <generate_code@@Base+0xe78>
   167a0:	cmp	r0, #0
   167a4:	beq	167b0 <generate_code@@Base+0x103c>
   167a8:	mov	r0, #0
   167ac:	pop	{r4, r5, r6, pc}
   167b0:	ldr	r0, [r4]
   167b4:	bl	1631c <generate_code@@Base+0xba8>
   167b8:	cmp	r0, #0
   167bc:	bne	167f4 <generate_code@@Base+0x1080>
   167c0:	ldr	r0, [r4]
   167c4:	bl	165ec <generate_code@@Base+0xe78>
   167c8:	cmp	r0, #0
   167cc:	bne	167a8 <generate_code@@Base+0x1034>
   167d0:	ldr	r3, [pc, #68]	; 1681c <generate_code@@Base+0x10a8>
   167d4:	ldr	r1, [pc, #68]	; 16820 <generate_code@@Base+0x10ac>
   167d8:	ldr	r2, [r4]
   167dc:	ldr	r3, [r5, r3]
   167e0:	add	r1, pc, r1
   167e4:	ldr	r0, [r3]
   167e8:	bl	119cc <fprintf@plt>
   167ec:	mvn	r0, #0
   167f0:	pop	{r4, r5, r6, pc}
   167f4:	ldr	r3, [pc, #32]	; 1681c <generate_code@@Base+0x10a8>
   167f8:	ldr	r1, [pc, #36]	; 16824 <generate_code@@Base+0x10b0>
   167fc:	ldr	r2, [r4]
   16800:	ldr	r3, [r5, r3]
   16804:	add	r1, pc, r1
   16808:	ldr	r0, [r3]
   1680c:	bl	119cc <fprintf@plt>
   16810:	mvn	r0, #0
   16814:	pop	{r4, r5, r6, pc}
   16818:	andeq	r2, r1, r4, asr #17
   1681c:	andeq	r0, r0, r8, lsr #1
   16820:	andeq	r1, r0, r8, ror r9
   16824:	andeq	r1, r0, r0, asr #18
   16828:	ldr	r3, [pc, #96]	; 16890 <generate_code@@Base+0x111c>
   1682c:	ldr	r2, [pc, #96]	; 16894 <generate_code@@Base+0x1120>
   16830:	add	r3, pc, r3
   16834:	push	{r4, lr}
   16838:	ldr	r4, [r3, r2]
   1683c:	ldr	r0, [r4]
   16840:	cmp	r0, #0
   16844:	beq	16864 <generate_code@@Base+0x10f0>
   16848:	ldr	r3, [r4, #8]
   1684c:	cmp	r3, #0
   16850:	bne	16874 <generate_code@@Base+0x1100>
   16854:	bl	11a2c <fclose@plt>
   16858:	mov	r3, #0
   1685c:	str	r3, [r4]
   16860:	str	r3, [r4, #12]
   16864:	mov	r3, #0
   16868:	str	r3, [r4, #24]
   1686c:	ldr	r0, [r4, #20]
   16870:	pop	{r4, pc}
   16874:	ldr	r2, [r4, #24]
   16878:	cmp	r2, #0
   1687c:	bge	16854 <generate_code@@Base+0x10e0>
   16880:	mov	r0, r3
   16884:	bl	158a4 <generate_code@@Base+0x130>
   16888:	ldr	r0, [r4]
   1688c:	b	16854 <generate_code@@Base+0x10e0>
   16890:	andeq	r2, r1, r8, asr #15
   16894:	strheq	r0, [r0], -r4
   16898:	push	{r4, lr}
   1689c:	mov	r4, r0
   168a0:	mov	r0, #1
   168a4:	bl	15900 <generate_code@@Base+0x18c>
   168a8:	str	r4, [r0]
   168ac:	pop	{r4, pc}
   168b0:	push	{r4, r5, r6, lr}
   168b4:	mov	r5, r0
   168b8:	mov	r0, #2
   168bc:	mov	r4, r1
   168c0:	bl	15900 <generate_code@@Base+0x18c>
   168c4:	str	r5, [r0]
   168c8:	str	r4, [r0, #4]
   168cc:	pop	{r4, r5, r6, pc}
   168d0:	push	{r4, r5, r6, lr}
   168d4:	mov	r5, r0
   168d8:	mov	r0, #2
   168dc:	mov	r4, r1
   168e0:	bl	15900 <generate_code@@Base+0x18c>
   168e4:	str	r5, [r0]
   168e8:	str	r4, [r0, #4]
   168ec:	pop	{r4, r5, r6, pc}
   168f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   168f4:	sub	sp, sp, #32
   168f8:	mov	r7, sp
   168fc:	mov	r5, r1
   16900:	mov	r6, sp
   16904:	add	r2, sp, #32
   16908:	mov	r3, #0
   1690c:	str	r3, [r6], #4
   16910:	cmp	r2, r6
   16914:	bne	1690c <generate_code@@Base+0x1198>
   16918:	mov	r8, #0
   1691c:	mov	r3, r8
   16920:	mov	r4, r5
   16924:	mov	r1, r5
   16928:	mov	r9, #1
   1692c:	lsr	r2, r3, #5
   16930:	ldr	lr, [r1, #40]	; 0x28
   16934:	add	ip, sp, #32
   16938:	cmp	lr, #0
   1693c:	add	r2, ip, r2, lsl #2
   16940:	and	sl, r3, #31
   16944:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   16948:	add	r3, r3, #1
   1694c:	orrne	ip, ip, r9, lsl sl
   16950:	addne	r8, r8, #1
   16954:	strne	ip, [r2, #-32]	; 0xffffffe0
   16958:	cmp	r3, #252	; 0xfc
   1695c:	add	r1, r1, #24
   16960:	bne	1692c <generate_code@@Base+0x11b8>
   16964:	add	r8, r8, r8, lsl #2
   16968:	add	r1, r8, #17
   1696c:	bl	168d0 <generate_code@@Base+0x115c>
   16970:	ldr	r0, [r5]
   16974:	bl	16898 <generate_code@@Base+0x1124>
   16978:	ldr	r0, [r5, #8]
   1697c:	bl	16898 <generate_code@@Base+0x1124>
   16980:	ldr	r0, [r5, #12]
   16984:	bl	16898 <generate_code@@Base+0x1124>
   16988:	ldrd	r0, [r5, #16]
   1698c:	bl	168b0 <generate_code@@Base+0x113c>
   16990:	ldrd	r0, [r5, #24]
   16994:	bl	168b0 <generate_code@@Base+0x113c>
   16998:	ldrd	r0, [r5, #32]
   1699c:	bl	168b0 <generate_code@@Base+0x113c>
   169a0:	ldr	r0, [r7], #4
   169a4:	bl	16898 <generate_code@@Base+0x1124>
   169a8:	cmp	r7, r6
   169ac:	bne	169a0 <generate_code@@Base+0x122c>
   169b0:	add	r5, r5, #6016	; 0x1780
   169b4:	add	r5, r5, #32
   169b8:	b	169c8 <generate_code@@Base+0x1254>
   169bc:	add	r4, r4, #24
   169c0:	cmp	r4, r5
   169c4:	beq	169f4 <generate_code@@Base+0x1280>
   169c8:	ldr	r0, [r4, #40]	; 0x28
   169cc:	cmp	r0, #0
   169d0:	beq	169bc <generate_code@@Base+0x1248>
   169d4:	bl	16898 <generate_code@@Base+0x1124>
   169d8:	ldrd	r0, [r4, #48]	; 0x30
   169dc:	bl	168b0 <generate_code@@Base+0x113c>
   169e0:	add	r4, r4, #24
   169e4:	ldrd	r0, [r4, #32]
   169e8:	bl	168b0 <generate_code@@Base+0x113c>
   169ec:	cmp	r4, r5
   169f0:	bne	169c8 <generate_code@@Base+0x1254>
   169f4:	add	sp, sp, #32
   169f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169fc:	push	{r4, lr}
   16a00:	mov	r0, #1
   16a04:	bl	1595c <generate_code@@Base+0x1e8>
   16a08:	subs	r3, r0, #0
   16a0c:	popeq	{r4, pc}
   16a10:	ldr	r0, [r3]
   16a14:	pop	{r4, lr}
   16a18:	b	15874 <generate_code@@Base+0x100>
   16a1c:	push	{r4, r5, r6, lr}
   16a20:	mov	r0, #2
   16a24:	bl	1595c <generate_code@@Base+0x1e8>
   16a28:	subs	r3, r0, #0
   16a2c:	beq	16a5c <generate_code@@Base+0x12e8>
   16a30:	ldr	r0, [r3]
   16a34:	bl	15874 <generate_code@@Base+0x100>
   16a38:	mov	r5, #0
   16a3c:	mov	r4, r0
   16a40:	ldr	r0, [r3, #4]
   16a44:	bl	15874 <generate_code@@Base+0x100>
   16a48:	mov	r2, #0
   16a4c:	mov	r3, r0
   16a50:	orr	r1, r3, r5
   16a54:	orr	r0, r2, r4
   16a58:	pop	{r4, r5, r6, pc}
   16a5c:	mov	r0, #0
   16a60:	mov	r1, #0
   16a64:	pop	{r4, r5, r6, pc}
   16a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a6c:	sub	sp, sp, #28
   16a70:	mov	r4, #0
   16a74:	str	r1, [sp, #8]
   16a78:	str	r3, [sp, #12]
   16a7c:	add	r3, r1, #56	; 0x38
   16a80:	add	r1, r1, #16
   16a84:	str	r0, [sp, #16]
   16a88:	str	r2, [sp, #20]
   16a8c:	ldr	r2, [r3, #-4]!
   16a90:	cmp	r2, #0
   16a94:	addne	r4, r4, #1
   16a98:	cmp	r3, r1
   16a9c:	bne	16a8c <generate_code@@Base+0x1318>
   16aa0:	add	r4, r4, #4
   16aa4:	lsl	r4, r4, #3
   16aa8:	mov	r0, r4
   16aac:	bl	11960 <malloc@plt>
   16ab0:	subs	r8, r0, #0
   16ab4:	beq	16b78 <generate_code@@Base+0x1404>
   16ab8:	ldr	r3, [sp, #12]
   16abc:	mov	r4, #0
   16ac0:	str	r3, [r8, #4]
   16ac4:	str	r4, [r8]
   16ac8:	bl	169fc <generate_code@@Base+0x1288>
   16acc:	ldr	r3, [sp, #8]
   16ad0:	ldr	r5, [pc, #272]	; 16be8 <generate_code@@Base+0x1474>
   16ad4:	add	r6, r3, #12
   16ad8:	mov	r7, r4
   16adc:	str	r0, [r8, #12]
   16ae0:	bl	169fc <generate_code@@Base+0x1288>
   16ae4:	str	r0, [r8, #16]
   16ae8:	bl	169fc <generate_code@@Base+0x1288>
   16aec:	str	r0, [r8, #20]
   16af0:	ldr	r3, [r6, #4]!
   16af4:	cmp	r3, #0
   16af8:	beq	16b54 <generate_code@@Base+0x13e0>
   16afc:	bl	169fc <generate_code@@Base+0x1288>
   16b00:	cmp	r5, r0
   16b04:	bne	16bcc <generate_code@@Base+0x1458>
   16b08:	bl	169fc <generate_code@@Base+0x1288>
   16b0c:	lsr	r9, r0, #1
   16b10:	lsl	fp, r9, #3
   16b14:	mov	r0, fp
   16b18:	bl	11960 <malloc@plt>
   16b1c:	subs	sl, r0, #0
   16b20:	beq	16bdc <generate_code@@Base+0x1468>
   16b24:	add	r3, r8, r7, lsl #3
   16b28:	cmp	r9, #0
   16b2c:	str	r9, [r3, #24]
   16b30:	str	sl, [r3, #28]
   16b34:	sub	r9, r9, #1
   16b38:	beq	16b50 <generate_code@@Base+0x13dc>
   16b3c:	bl	16a1c <generate_code@@Base+0x12a8>
   16b40:	sub	r9, r9, #1
   16b44:	cmn	r9, #1
   16b48:	strd	r0, [sl], #8
   16b4c:	bne	16b3c <generate_code@@Base+0x13c8>
   16b50:	add	r7, r7, #1
   16b54:	add	r4, r4, #1
   16b58:	cmp	r4, #10
   16b5c:	add	r5, r5, #131072	; 0x20000
   16b60:	bne	16af0 <generate_code@@Base+0x137c>
   16b64:	ldr	r3, [sp, #20]
   16b68:	mov	r0, r8
   16b6c:	str	r8, [r3]
   16b70:	add	sp, sp, #28
   16b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b78:	mvn	r5, #0
   16b7c:	cmp	r4, #0
   16b80:	beq	16bbc <generate_code@@Base+0x1448>
   16b84:	ldr	r3, [pc, #96]	; 16bec <generate_code@@Base+0x1478>
   16b88:	add	r3, pc, r3
   16b8c:	ldr	r0, [pc, #92]	; 16bf0 <generate_code@@Base+0x147c>
   16b90:	ldr	r2, [sp, #12]
   16b94:	ldr	r1, [sp, #16]
   16b98:	str	r4, [sp]
   16b9c:	add	r0, pc, r0
   16ba0:	bl	15a18 <generate_code@@Base+0x2a4>
   16ba4:	mov	r2, r5
   16ba8:	mov	r1, r8
   16bac:	ldr	r0, [sp, #8]
   16bb0:	add	sp, sp, #28
   16bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb8:	b	15a60 <generate_code@@Base+0x2ec>
   16bbc:	ldr	r3, [pc, #48]	; 16bf4 <generate_code@@Base+0x1480>
   16bc0:	mov	r4, r5
   16bc4:	add	r3, pc, r3
   16bc8:	b	16b8c <generate_code@@Base+0x1418>
   16bcc:	ldr	r3, [pc, #36]	; 16bf8 <generate_code@@Base+0x1484>
   16bd0:	mov	r5, r4
   16bd4:	add	r3, pc, r3
   16bd8:	b	16b8c <generate_code@@Base+0x1418>
   16bdc:	mov	r5, r4
   16be0:	mov	r4, fp
   16be4:	b	16b7c <generate_code@@Base+0x1408>
   16be8:			; <UNDEFINED> instruction: 0x01a10000
   16bec:	andeq	r1, r0, ip, ror #11
   16bf0:	strdeq	r1, [r0], -ip
   16bf4:	andeq	r1, r0, r0, asr #11
   16bf8:			; <UNDEFINED> instruction: 0x000015b0
   16bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c00:	sub	sp, sp, #44	; 0x2c
   16c04:	mov	r9, r0
   16c08:	bl	169fc <generate_code@@Base+0x1288>
   16c0c:	mov	r7, #0
   16c10:	add	sl, sp, #8
   16c14:	mov	r4, sl
   16c18:	add	r5, sp, #40	; 0x28
   16c1c:	str	r0, [r9]
   16c20:	bl	169fc <generate_code@@Base+0x1288>
   16c24:	str	r0, [r9, #8]
   16c28:	bl	169fc <generate_code@@Base+0x1288>
   16c2c:	str	r0, [r9, #12]
   16c30:	bl	16a1c <generate_code@@Base+0x12a8>
   16c34:	strd	r0, [r9, #16]
   16c38:	bl	16a1c <generate_code@@Base+0x12a8>
   16c3c:	strd	r0, [r9, #24]
   16c40:	bl	16a1c <generate_code@@Base+0x12a8>
   16c44:	ldr	r2, [pc, #244]	; 16d40 <generate_code@@Base+0x15cc>
   16c48:	strd	r0, [r9, #32]
   16c4c:	add	r0, r9, #40	; 0x28
   16c50:	mov	r1, r7
   16c54:	bl	11a08 <memset@plt>
   16c58:	bl	169fc <generate_code@@Base+0x1288>
   16c5c:	str	r0, [r4], #4
   16c60:	bl	178e4 <__gcov_sort_n_vals@@Base+0x618>
   16c64:	cmp	r5, r4
   16c68:	add	r7, r7, r0
   16c6c:	bne	16c58 <generate_code@@Base+0x14e4>
   16c70:	cmp	r7, #0
   16c74:	sub	r7, r7, #1
   16c78:	beq	16d2c <generate_code@@Base+0x15b8>
   16c7c:	ldr	r8, [pc, #192]	; 16d44 <generate_code@@Base+0x15d0>
   16c80:	mov	r4, #0
   16c84:	ldr	r3, [pc, #188]	; 16d48 <generate_code@@Base+0x15d4>
   16c88:	add	r8, pc, r8
   16c8c:	mov	r5, r4
   16c90:	mov	r6, r4
   16c94:	add	r3, pc, r3
   16c98:	str	r3, [sp, #4]
   16c9c:	cmp	r4, #0
   16ca0:	addeq	r6, sl, r5, lsl #2
   16ca4:	beq	16cb0 <generate_code@@Base+0x153c>
   16ca8:	b	16cd8 <generate_code@@Base+0x1564>
   16cac:	mov	r5, r3
   16cb0:	cmp	r5, #7
   16cb4:	bls	16cc0 <generate_code@@Base+0x154c>
   16cb8:	mov	r0, r8
   16cbc:	bl	15a18 <generate_code@@Base+0x2a4>
   16cc0:	ldr	r4, [r6], #4
   16cc4:	add	r3, r5, #1
   16cc8:	cmp	r4, #0
   16ccc:	beq	16cac <generate_code@@Base+0x1538>
   16cd0:	lsl	r6, r5, #5
   16cd4:	mov	r5, r3
   16cd8:	tst	r4, #1
   16cdc:	bne	16cf0 <generate_code@@Base+0x157c>
   16ce0:	lsr	r4, r4, #1
   16ce4:	tst	r4, #1
   16ce8:	add	r6, r6, #1
   16cec:	beq	16ce0 <generate_code@@Base+0x156c>
   16cf0:	cmp	r6, #251	; 0xfb
   16cf4:	bhi	16d34 <generate_code@@Base+0x15c0>
   16cf8:	bl	169fc <generate_code@@Base+0x1288>
   16cfc:	add	r3, r6, r6, lsl #1
   16d00:	sub	r7, r7, #1
   16d04:	add	fp, r9, r3, lsl #3
   16d08:	lsr	r4, r4, #1
   16d0c:	add	r6, r6, #1
   16d10:	str	r0, [fp, #40]	; 0x28
   16d14:	bl	16a1c <generate_code@@Base+0x12a8>
   16d18:	strd	r0, [fp, #48]	; 0x30
   16d1c:	bl	16a1c <generate_code@@Base+0x12a8>
   16d20:	cmn	r7, #1
   16d24:	strd	r0, [fp, #56]	; 0x38
   16d28:	bne	16c9c <generate_code@@Base+0x1528>
   16d2c:	add	sp, sp, #44	; 0x2c
   16d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d34:	ldr	r0, [sp, #4]
   16d38:	bl	15a18 <generate_code@@Base+0x2a4>
   16d3c:	b	16cf8 <generate_code@@Base+0x1584>
   16d40:	andeq	r1, r0, r0, lsr #15
   16d44:	andeq	r1, r0, r0, ror r5
   16d48:	andeq	r1, r0, r8, lsr #10
   16d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d50:	sub	sp, sp, #6080	; 0x17c0
   16d54:	sub	sp, sp, #28
   16d58:	mov	r4, r1
   16d5c:	stmib	sp, {r2, r3}
   16d60:	add	r3, sp, #6144	; 0x1800
   16d64:	mov	sl, r0
   16d68:	ldr	r7, [r3]
   16d6c:	add	r3, sp, #6144	; 0x1800
   16d70:	add	r3, r3, #4
   16d74:	ldr	r6, [r3]
   16d78:	bl	169fc <generate_code@@Base+0x1288>
   16d7c:	add	r3, r4, #12
   16d80:	mov	r2, sl
   16d84:	str	r3, [sp, #12]
   16d88:	mov	r1, r0
   16d8c:	mov	r0, r3
   16d90:	bl	163e0 <generate_code@@Base+0xc6c>
   16d94:	cmp	r0, #0
   16d98:	beq	17018 <generate_code@@Base+0x18a4>
   16d9c:	bl	169fc <generate_code@@Base+0x1288>
   16da0:	ldr	r3, [r4, #8]
   16da4:	cmp	r0, r3
   16da8:	beq	16dbc <generate_code@@Base+0x1648>
   16dac:	mov	r0, #0
   16db0:	add	sp, sp, #6080	; 0x17c0
   16db4:	add	sp, sp, #28
   16db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dbc:	ldr	fp, [pc, #628]	; 17038 <generate_code@@Base+0x18c4>
   16dc0:	add	r9, sp, #2000	; 0x7d0
   16dc4:	add	r5, sp, #16
   16dc8:	add	fp, pc, fp
   16dcc:	add	r9, r9, #8
   16dd0:	bl	15824 <generate_code@@Base+0xb0>
   16dd4:	str	r0, [r6]
   16dd8:	bl	169fc <generate_code@@Base+0x1288>
   16ddc:	cmp	r0, #-1560281088	; 0xa3000000
   16de0:	bne	16e84 <generate_code@@Base+0x1710>
   16de4:	bl	169fc <generate_code@@Base+0x1288>
   16de8:	mov	r0, r5
   16dec:	bl	16bfc <generate_code@@Base+0x1488>
   16df0:	bl	15848 <generate_code@@Base+0xd4>
   16df4:	subs	r8, r0, #0
   16df8:	bne	16fb8 <generate_code@@Base+0x1844>
   16dfc:	ldr	r3, [r7]
   16e00:	cmp	r3, #0
   16e04:	bne	16e50 <generate_code@@Base+0x16dc>
   16e08:	add	r2, sp, #6144	; 0x1800
   16e0c:	add	r2, r2, #8
   16e10:	ldr	r3, [r9, #-1992]	; 0xfffff838
   16e14:	ldr	r2, [r2]
   16e18:	cmp	r3, r2
   16e1c:	bne	16dd0 <generate_code@@Base+0x165c>
   16e20:	ldr	r3, [sp, #8]
   16e24:	ldr	ip, [r9, #-1984]	; 0xfffff840
   16e28:	ldr	r2, [pc, #524]	; 1703c <generate_code@@Base+0x18c8>
   16e2c:	ldr	r3, [r3, #8]
   16e30:	mov	r1, r5
   16e34:	cmp	ip, r3
   16e38:	ldr	r0, [sp, #4]
   16e3c:	bne	16dd0 <generate_code@@Base+0x165c>
   16e40:	bl	11918 <memcpy@plt>
   16e44:	ldr	r3, [r6]
   16e48:	str	r3, [r7]
   16e4c:	b	16dd0 <generate_code@@Base+0x165c>
   16e50:	ldr	r0, [pc, #488]	; 17040 <generate_code@@Base+0x18cc>
   16e54:	bl	11960 <malloc@plt>
   16e58:	ldr	r2, [pc, #476]	; 1703c <generate_code@@Base+0x18c8>
   16e5c:	mov	r1, r5
   16e60:	mov	r3, r0
   16e64:	str	r0, [fp]
   16e68:	add	r0, r0, #8
   16e6c:	str	r3, [sp]
   16e70:	bl	11918 <memcpy@plt>
   16e74:	ldr	r3, [sp]
   16e78:	str	r8, [r3]
   16e7c:	ldr	fp, [fp]
   16e80:	b	16dd0 <generate_code@@Base+0x165c>
   16e84:	ldr	r5, [r4, #56]	; 0x38
   16e88:	cmp	r5, #0
   16e8c:	beq	17020 <generate_code@@Base+0x18ac>
   16e90:	ldr	r3, [r4, #60]	; 0x3c
   16e94:	cmp	r0, #16777216	; 0x1000000
   16e98:	ldr	r8, [r3]
   16e9c:	bne	16fe8 <generate_code@@Base+0x1874>
   16ea0:	ldr	r6, [pc, #412]	; 17044 <generate_code@@Base+0x18d0>
   16ea4:	mov	r5, #0
   16ea8:	add	r6, pc, r6
   16eac:	add	r6, r6, #4
   16eb0:	b	16ef4 <generate_code@@Base+0x1780>
   16eb4:	mov	r2, r6
   16eb8:	mov	r3, r5
   16ebc:	mov	r1, r4
   16ec0:	mov	r0, sl
   16ec4:	bl	16a68 <generate_code@@Base+0x12f4>
   16ec8:	subs	r6, r0, #0
   16ecc:	beq	16fec <generate_code@@Base+0x1878>
   16ed0:	bl	169fc <generate_code@@Base+0x1288>
   16ed4:	ldr	r3, [r4, #56]	; 0x38
   16ed8:	add	r5, r5, #1
   16edc:	cmp	r3, r5
   16ee0:	beq	17020 <generate_code@@Base+0x18ac>
   16ee4:	ldr	r3, [r4, #60]	; 0x3c
   16ee8:	cmp	r0, #16777216	; 0x1000000
   16eec:	ldr	r8, [r3, r5, lsl #2]
   16ef0:	bne	16fec <generate_code@@Base+0x1878>
   16ef4:	bl	169fc <generate_code@@Base+0x1288>
   16ef8:	cmp	r0, #0
   16efc:	beq	16ed0 <generate_code@@Base+0x175c>
   16f00:	cmp	r0, #3
   16f04:	bne	16fec <generate_code@@Base+0x1878>
   16f08:	cmp	r8, #0
   16f0c:	beq	16eb4 <generate_code@@Base+0x1740>
   16f10:	ldr	r3, [r8]
   16f14:	cmp	r4, r3
   16f18:	bne	16eb4 <generate_code@@Base+0x1740>
   16f1c:	bl	169fc <generate_code@@Base+0x1288>
   16f20:	ldr	r3, [r8, #4]
   16f24:	cmp	r0, r3
   16f28:	bne	16fec <generate_code@@Base+0x1878>
   16f2c:	bl	169fc <generate_code@@Base+0x1288>
   16f30:	ldr	r3, [r8, #8]
   16f34:	cmp	r0, r3
   16f38:	bne	16fec <generate_code@@Base+0x1878>
   16f3c:	bl	169fc <generate_code@@Base+0x1288>
   16f40:	ldr	r3, [r8, #12]
   16f44:	cmp	r0, r3
   16f48:	bne	16fec <generate_code@@Base+0x1878>
   16f4c:	ldr	r7, [pc, #244]	; 17048 <generate_code@@Base+0x18d4>
   16f50:	ldr	fp, [sp, #12]
   16f54:	add	r8, r8, #16
   16f58:	ldr	r9, [fp, #4]!
   16f5c:	cmp	r9, #0
   16f60:	beq	16f98 <generate_code@@Base+0x1824>
   16f64:	bl	169fc <generate_code@@Base+0x1288>
   16f68:	str	r0, [sp]
   16f6c:	bl	169fc <generate_code@@Base+0x1288>
   16f70:	ldr	r3, [sp]
   16f74:	cmp	r3, r7
   16f78:	bne	16fec <generate_code@@Base+0x1878>
   16f7c:	ldr	r3, [r8]
   16f80:	mov	r1, r3
   16f84:	cmp	r0, r3, lsl #1
   16f88:	bne	16fec <generate_code@@Base+0x1878>
   16f8c:	ldr	r0, [r8, #4]
   16f90:	blx	r9
   16f94:	add	r8, r8, #8
   16f98:	ldr	r3, [pc, #172]	; 1704c <generate_code@@Base+0x18d8>
   16f9c:	add	r7, r7, #131072	; 0x20000
   16fa0:	cmp	r7, r3
   16fa4:	bne	16f58 <generate_code@@Base+0x17e4>
   16fa8:	bl	15848 <generate_code@@Base+0xd4>
   16fac:	cmp	r0, #0
   16fb0:	beq	16ed0 <generate_code@@Base+0x175c>
   16fb4:	mov	r8, r0
   16fb8:	cmp	r8, #0
   16fbc:	blt	1702c <generate_code@@Base+0x18b8>
   16fc0:	ldr	r2, [pc, #136]	; 17050 <generate_code@@Base+0x18dc>
   16fc4:	add	r2, pc, r2
   16fc8:	ldr	r0, [pc, #132]	; 17054 <generate_code@@Base+0x18e0>
   16fcc:	mov	r1, sl
   16fd0:	add	r0, pc, r0
   16fd4:	bl	15a18 <generate_code@@Base+0x2a4>
   16fd8:	mvn	r0, #0
   16fdc:	add	sp, sp, #6080	; 0x17c0
   16fe0:	add	sp, sp, #28
   16fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fe8:	mov	r5, #0
   16fec:	ldr	r2, [pc, #100]	; 17058 <generate_code@@Base+0x18e4>
   16ff0:	ldr	r0, [pc, #100]	; 1705c <generate_code@@Base+0x18e8>
   16ff4:	mov	r3, r5
   16ff8:	mov	r1, sl
   16ffc:	add	r2, pc, r2
   17000:	add	r0, pc, r0
   17004:	bl	15a18 <generate_code@@Base+0x2a4>
   17008:	mvn	r0, #0
   1700c:	add	sp, sp, #6080	; 0x17c0
   17010:	add	sp, sp, #28
   17014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17018:	mvn	r0, #0
   1701c:	b	16db0 <generate_code@@Base+0x163c>
   17020:	cmp	r0, #0
   17024:	beq	16dac <generate_code@@Base+0x1638>
   17028:	b	16fec <generate_code@@Base+0x1878>
   1702c:	ldr	r2, [pc, #44]	; 17060 <generate_code@@Base+0x18ec>
   17030:	add	r2, pc, r2
   17034:	b	16fc8 <generate_code@@Base+0x1854>
   17038:			; <UNDEFINED> instruction: 0x000139b8
   1703c:	andeq	r1, r0, r8, asr #15
   17040:	ldrdeq	r1, [r0], -r0
   17044:	ldrdeq	r3, [r1], -r8
   17048:			; <UNDEFINED> instruction: 0x01a10000
   1704c:			; <UNDEFINED> instruction: 0x01b50000
   17050:	andeq	r1, r0, r0, lsl #5
   17054:			; <UNDEFINED> instruction: 0x000012b0
   17058:	andeq	r1, r0, r0, asr r2
   1705c:	andeq	r1, r0, r8, asr r2
   17060:	andeq	r1, r0, r8, lsl #4
   17064:	ldr	r3, [pc, #68]	; 170b0 <generate_code@@Base+0x193c>
   17068:	ldr	r2, [pc, #68]	; 170b4 <generate_code@@Base+0x1940>
   1706c:	add	r3, pc, r3
   17070:	push	{r4, r5, r6, lr}
   17074:	mov	r5, r0
   17078:	ldr	r4, [r3, r2]
   1707c:	ldr	r0, [r4, #8]
   17080:	cmp	r0, #0
   17084:	beq	1708c <generate_code@@Base+0x1918>
   17088:	bl	158a4 <generate_code@@Base+0x130>
   1708c:	lsl	r1, r5, #2
   17090:	mov	r2, #0
   17094:	ldr	r0, [r4]
   17098:	bl	11a68 <fseek@plt>
   1709c:	ldr	r0, [r4]
   170a0:	bl	11924 <ftell@plt>
   170a4:	asr	r0, r0, #2
   170a8:	str	r0, [r4, #4]
   170ac:	pop	{r4, r5, r6, pc}
   170b0:	andeq	r1, r1, ip, lsl #31
   170b4:	strheq	r0, [r0], -r4
   170b8:	cmp	r2, #0
   170bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170c0:	mov	r9, r0
   170c4:	sub	sp, sp, #20
   170c8:	mov	r5, r1
   170cc:	mov	r4, r3
   170d0:	beq	17288 <generate_code@@Base+0x1b14>
   170d4:	cmp	r4, #0
   170d8:	bne	172a4 <generate_code@@Base+0x1b30>
   170dc:	mov	r1, r5
   170e0:	ldr	r5, [pc, #456]	; 172b0 <generate_code@@Base+0x1b3c>
   170e4:	mov	r0, #-1560281088	; 0xa3000000
   170e8:	add	r5, pc, r5
   170ec:	bl	168f0 <generate_code@@Base+0x117c>
   170f0:	ldr	r4, [r5]
   170f4:	cmp	r4, #0
   170f8:	movne	r6, #-1560281088	; 0xa3000000
   170fc:	beq	17128 <generate_code@@Base+0x19b4>
   17100:	add	r1, r4, #8
   17104:	mov	r0, r6
   17108:	bl	168f0 <generate_code@@Base+0x117c>
   1710c:	ldr	r3, [r5]
   17110:	mov	r0, r3
   17114:	ldr	r4, [r3]
   17118:	bl	1190c <free@plt>
   1711c:	cmp	r4, #0
   17120:	str	r4, [r5]
   17124:	bne	17100 <generate_code@@Base+0x198c>
   17128:	ldr	r3, [r9, #56]	; 0x38
   1712c:	cmp	r3, #0
   17130:	beq	1726c <generate_code@@Base+0x1af8>
   17134:	ldr	r3, [pc, #376]	; 172b4 <generate_code@@Base+0x1b40>
   17138:	ldr	r8, [pc, #376]	; 172b8 <generate_code@@Base+0x1b44>
   1713c:	add	r3, pc, r3
   17140:	str	r3, [sp, #4]
   17144:	ldr	r3, [pc, #368]	; 172bc <generate_code@@Base+0x1b48>
   17148:	mov	r7, #0
   1714c:	add	r3, pc, r3
   17150:	str	r3, [sp, #12]
   17154:	b	17190 <generate_code@@Base+0x1a1c>
   17158:	ldr	r3, [r9, #60]	; 0x3c
   1715c:	ldr	r4, [r3, r7, lsl #2]
   17160:	cmp	r4, #0
   17164:	beq	17174 <generate_code@@Base+0x1a00>
   17168:	ldr	r3, [r4]
   1716c:	cmp	r9, r3
   17170:	beq	1727c <generate_code@@Base+0x1b08>
   17174:	mov	r1, #0
   17178:	mov	r0, #16777216	; 0x1000000
   1717c:	bl	168d0 <generate_code@@Base+0x115c>
   17180:	ldr	r3, [r9, #56]	; 0x38
   17184:	add	r7, r7, #1
   17188:	cmp	r3, r7
   1718c:	beq	1726c <generate_code@@Base+0x1af8>
   17190:	ldr	r3, [sp, #4]
   17194:	ldr	r4, [r3, #4]
   17198:	cmp	r4, #0
   1719c:	beq	17158 <generate_code@@Base+0x19e4>
   171a0:	ldr	r3, [r4, #4]
   171a4:	cmp	r3, r7
   171a8:	moveq	r3, #1
   171ac:	addeq	r4, r4, #8
   171b0:	streq	r3, [sp, #8]
   171b4:	bne	17158 <generate_code@@Base+0x19e4>
   171b8:	mov	r1, #3
   171bc:	mov	r0, #16777216	; 0x1000000
   171c0:	bl	168d0 <generate_code@@Base+0x115c>
   171c4:	ldr	r0, [r4, #4]
   171c8:	bl	16898 <generate_code@@Base+0x1124>
   171cc:	ldr	r0, [r4, #8]
   171d0:	bl	16898 <generate_code@@Base+0x1124>
   171d4:	ldr	r0, [r4, #12]
   171d8:	bl	16898 <generate_code@@Base+0x1124>
   171dc:	ldr	r5, [pc, #220]	; 172c0 <generate_code@@Base+0x1b4c>
   171e0:	add	r4, r4, #16
   171e4:	add	r6, r9, #12
   171e8:	ldr	r3, [r6, #4]!
   171ec:	cmp	r3, #0
   171f0:	beq	1722c <generate_code@@Base+0x1ab8>
   171f4:	ldr	fp, [r4]
   171f8:	mov	r0, r5
   171fc:	sub	sl, fp, #1
   17200:	lsl	r1, fp, #1
   17204:	bl	168d0 <generate_code@@Base+0x115c>
   17208:	cmp	fp, #0
   1720c:	ldr	fp, [r4, #4]
   17210:	beq	17228 <generate_code@@Base+0x1ab4>
   17214:	sub	sl, sl, #1
   17218:	ldrd	r0, [fp], #8
   1721c:	bl	168b0 <generate_code@@Base+0x113c>
   17220:	cmn	sl, #1
   17224:	bne	17214 <generate_code@@Base+0x1aa0>
   17228:	add	r4, r4, #8
   1722c:	add	r5, r5, #131072	; 0x20000
   17230:	cmp	r5, r8
   17234:	bne	171e8 <generate_code@@Base+0x1a74>
   17238:	ldr	r3, [sp, #8]
   1723c:	cmp	r3, #0
   17240:	beq	17180 <generate_code@@Base+0x1a0c>
   17244:	ldr	r4, [sp, #12]
   17248:	mov	r2, #10
   1724c:	mov	r0, r9
   17250:	ldr	r1, [r4, #4]
   17254:	bl	15a60 <generate_code@@Base+0x2ec>
   17258:	ldr	r3, [r9, #56]	; 0x38
   1725c:	add	r7, r7, #1
   17260:	cmp	r3, r7
   17264:	str	r0, [r4, #4]
   17268:	bne	17190 <generate_code@@Base+0x1a1c>
   1726c:	mov	r0, #0
   17270:	add	sp, sp, #20
   17274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17278:	b	16898 <generate_code@@Base+0x1124>
   1727c:	mov	r3, #0
   17280:	str	r3, [sp, #8]
   17284:	b	171b8 <generate_code@@Base+0x1a44>
   17288:	ldr	r1, [pc, #52]	; 172c4 <generate_code@@Base+0x1b50>
   1728c:	ldr	r0, [pc, #52]	; 172c8 <generate_code@@Base+0x1b54>
   17290:	bl	168d0 <generate_code@@Base+0x115c>
   17294:	ldr	r0, [r9, #8]
   17298:	bl	16898 <generate_code@@Base+0x1124>
   1729c:	cmp	r4, #0
   172a0:	beq	170dc <generate_code@@Base+0x1968>
   172a4:	mov	r0, r4
   172a8:	bl	17064 <generate_code@@Base+0x18f0>
   172ac:	b	170dc <generate_code@@Base+0x1968>
   172b0:	muleq	r1, r8, r6
   172b4:	andeq	r3, r1, r4, asr #12
   172b8:			; <UNDEFINED> instruction: 0x01b50000
   172bc:	andeq	r3, r1, r4, lsr r6
   172c0:			; <UNDEFINED> instruction: 0x01a10000
   172c4:	ldrtcc	r3, [r0], -sl, lsr #10
   172c8:	strbvs	r6, [r3, -r1, ror #8]!

000172cc <__gcov_sort_n_vals@@Base>:
   172cc:	cmp	r1, #2
   172d0:	bxle	lr
   172d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d8:	sub	lr, r1, #3
   172dc:	mov	ip, #0
   172e0:	lsr	lr, lr, #1
   172e4:	add	r1, r0, #8
   172e8:	add	lr, r0, lr, lsl #4
   172ec:	add	lr, lr, #24
   172f0:	ldrd	r4, [r1, #16]
   172f4:	ldrd	r6, [r1]
   172f8:	ldrd	r8, [r1, #8]
   172fc:	mov	r2, ip
   17300:	cmp	r6, r4
   17304:	sbcs	r3, r7, r5
   17308:	mov	fp, ip
   1730c:	bge	17354 <__gcov_sort_n_vals@@Base+0x88>
   17310:	add	r3, r1, #8
   17314:	mov	sl, #0
   17318:	b	17330 <__gcov_sort_n_vals@@Base+0x64>
   1731c:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   17320:	sub	r3, r3, #16
   17324:	cmp	r6, r4
   17328:	sbcs	r6, r7, r5
   1732c:	bge	17354 <__gcov_sort_n_vals@@Base+0x88>
   17330:	ldrd	r6, [r3, #-16]
   17334:	subs	r2, r2, #2
   17338:	mov	fp, r2
   1733c:	strd	r6, [r3]
   17340:	ldrd	r6, [r1, sl]
   17344:	sub	sl, sl, #16
   17348:	strd	r6, [r3, #8]
   1734c:	mov	r6, r3
   17350:	bpl	1731c <__gcov_sort_n_vals@@Base+0x50>
   17354:	add	fp, fp, #2
   17358:	mov	r3, r0
   1735c:	add	r1, r1, #16
   17360:	lsl	fp, fp, #3
   17364:	cmp	lr, r1
   17368:	strd	r8, [r3, fp]!
   1736c:	add	ip, ip, #2
   17370:	strd	r4, [r3, #8]
   17374:	bne	172f0 <__gcov_sort_n_vals@@Base+0x24>
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1737c:	push	{r4, r5, r6, r7, r8, lr}
   17380:	ldr	r6, [r0]
   17384:	ldr	r4, [pc, #76]	; 173d8 <__gcov_sort_n_vals@@Base+0x10c>
   17388:	smull	r2, r3, r4, r6
   1738c:	asr	r4, r6, #31
   17390:	rsb	r4, r4, r3, asr #1
   17394:	add	r4, r4, r4, lsl #3
   17398:	subs	r4, r6, r4
   1739c:	bne	173d4 <__gcov_sort_n_vals@@Base+0x108>
   173a0:	cmp	r6, #0
   173a4:	ldr	r5, [r0, #4]
   173a8:	pople	{r4, r5, r6, r7, r8, pc}
   173ac:	add	r5, r5, #8
   173b0:	mov	r7, #8
   173b4:	mov	r0, r5
   173b8:	add	r4, r4, #9
   173bc:	mov	r1, r7
   173c0:	bl	172cc <__gcov_sort_n_vals@@Base>
   173c4:	cmp	r6, r4
   173c8:	add	r5, r5, #72	; 0x48
   173cc:	bgt	173b4 <__gcov_sort_n_vals@@Base+0xe8>
   173d0:	pop	{r4, r5, r6, r7, r8, pc}
   173d4:	bl	11a80 <abort@plt>
   173d8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   173dc:	ldr	r3, [r0, #52]	; 0x34
   173e0:	cmp	r3, #0
   173e4:	bxeq	lr
   173e8:	ldr	ip, [r0, #56]	; 0x38
   173ec:	cmp	ip, #0
   173f0:	bxeq	lr
   173f4:	push	{r4, r5, r6, lr}
   173f8:	mov	r5, r0
   173fc:	mov	r4, #0
   17400:	add	r6, r0, #12
   17404:	ldr	r1, [r5, #60]	; 0x3c
   17408:	mov	r2, r6
   1740c:	mov	r3, #0
   17410:	ldr	r0, [r1, r4, lsl #2]
   17414:	add	r0, r0, #16
   17418:	ldr	r1, [r2, #4]!
   1741c:	cmp	r1, #0
   17420:	beq	17430 <__gcov_sort_n_vals@@Base+0x164>
   17424:	cmp	r3, #9
   17428:	beq	1744c <__gcov_sort_n_vals@@Base+0x180>
   1742c:	add	r0, r0, #8
   17430:	add	r3, r3, #1
   17434:	cmp	r3, #10
   17438:	bne	17418 <__gcov_sort_n_vals@@Base+0x14c>
   1743c:	add	r4, r4, #1
   17440:	cmp	ip, r4
   17444:	bne	17404 <__gcov_sort_n_vals@@Base+0x138>
   17448:	pop	{r4, r5, r6, pc}
   1744c:	bl	1737c <__gcov_sort_n_vals@@Base+0xb0>
   17450:	ldr	ip, [r5, #56]	; 0x38
   17454:	add	r4, r4, #1
   17458:	cmp	ip, r4
   1745c:	bne	17404 <__gcov_sort_n_vals@@Base+0x138>
   17460:	b	17448 <__gcov_sort_n_vals@@Base+0x17c>
   17464:	push	{r4, r5, r6, r7, r8, r9, lr}
   17468:	sub	sp, sp, #6080	; 0x17c0
   1746c:	ldr	ip, [pc, #388]	; 175f8 <__gcov_sort_n_vals@@Base+0x32c>
   17470:	sub	sp, sp, #36	; 0x24
   17474:	add	ip, pc, ip
   17478:	add	r5, sp, #2016	; 0x7e0
   1747c:	mov	r4, r0
   17480:	mov	r7, r1
   17484:	mov	r1, #0
   17488:	str	r1, [ip, #4]
   1748c:	str	r1, [ip]
   17490:	mov	r8, r2
   17494:	mov	r6, r3
   17498:	str	r1, [r5, #-2000]	; 0xfffff830
   1749c:	str	r1, [r5, #-1996]	; 0xfffff834
   174a0:	bl	173dc <__gcov_sort_n_vals@@Base+0x110>
   174a4:	mov	r1, r7
   174a8:	ldr	r0, [r4, #12]
   174ac:	bl	16714 <generate_code@@Base+0xfa0>
   174b0:	cmn	r0, #1
   174b4:	beq	17534 <__gcov_sort_n_vals@@Base+0x268>
   174b8:	bl	169fc <generate_code@@Base+0x1288>
   174bc:	cmp	r0, #0
   174c0:	beq	17540 <__gcov_sort_n_vals@@Base+0x274>
   174c4:	ldr	r3, [pc, #304]	; 175fc <__gcov_sort_n_vals@@Base+0x330>
   174c8:	cmp	r0, r3
   174cc:	beq	17598 <__gcov_sort_n_vals@@Base+0x2cc>
   174d0:	ldr	r0, [pc, #296]	; 17600 <__gcov_sort_n_vals@@Base+0x334>
   174d4:	ldr	r1, [r7]
   174d8:	add	r0, pc, r0
   174dc:	bl	15a18 <generate_code@@Base+0x2a4>
   174e0:	ldr	r5, [pc, #284]	; 17604 <__gcov_sort_n_vals@@Base+0x338>
   174e4:	add	r5, pc, r5
   174e8:	ldr	r1, [r5, #4]
   174ec:	cmp	r1, #0
   174f0:	movne	r6, #10
   174f4:	beq	17514 <__gcov_sort_n_vals@@Base+0x248>
   174f8:	mov	r2, r6
   174fc:	mov	r0, r4
   17500:	bl	15a60 <generate_code@@Base+0x2ec>
   17504:	cmp	r0, #0
   17508:	mov	r1, r0
   1750c:	str	r0, [r5, #4]
   17510:	bne	174f8 <__gcov_sort_n_vals@@Base+0x22c>
   17514:	bl	16828 <generate_code@@Base+0x10b4>
   17518:	cmp	r0, #0
   1751c:	beq	17534 <__gcov_sort_n_vals@@Base+0x268>
   17520:	blt	175d4 <__gcov_sort_n_vals@@Base+0x308>
   17524:	ldr	r0, [pc, #220]	; 17608 <__gcov_sort_n_vals@@Base+0x33c>
   17528:	add	r0, pc, r0
   1752c:	ldr	r1, [r7]
   17530:	bl	15a18 <generate_code@@Base+0x2a4>
   17534:	add	sp, sp, #6080	; 0x17c0
   17538:	add	sp, sp, #36	; 0x24
   1753c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17540:	add	r9, sp, #24
   17544:	bl	165a8 <generate_code@@Base+0xe34>
   17548:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1754c:	cmp	r1, #0
   17550:	beq	175e0 <__gcov_sort_n_vals@@Base+0x314>
   17554:	add	r3, sp, #6144	; 0x1800
   17558:	ldr	r0, [r7]
   1755c:	str	r6, [sp, #4]
   17560:	ldr	r3, [r3]
   17564:	mov	r1, r8
   17568:	str	r3, [sp]
   1756c:	mov	r2, r4
   17570:	mov	r3, r9
   17574:	bl	1646c <generate_code@@Base+0xcf8>
   17578:	cmn	r0, #1
   1757c:	beq	174e0 <__gcov_sort_n_vals@@Base+0x214>
   17580:	mov	r1, r9
   17584:	ldr	r3, [r5, #-2000]	; 0xfffff830
   17588:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1758c:	mov	r0, r4
   17590:	bl	170b8 <generate_code@@Base+0x1944>
   17594:	b	174e0 <__gcov_sort_n_vals@@Base+0x214>
   17598:	add	r3, sp, #16
   1759c:	ldr	r0, [r7]
   175a0:	str	r3, [sp]
   175a4:	add	r3, sp, #6144	; 0x1800
   175a8:	add	r1, sp, #20
   175ac:	add	r9, sp, #24
   175b0:	str	r1, [sp, #4]
   175b4:	str	r6, [sp, #8]
   175b8:	mov	r2, r9
   175bc:	ldr	r3, [r3]
   175c0:	mov	r1, r4
   175c4:	bl	16d4c <generate_code@@Base+0x15d8>
   175c8:	cmn	r0, #1
   175cc:	bne	17544 <__gcov_sort_n_vals@@Base+0x278>
   175d0:	b	174e0 <__gcov_sort_n_vals@@Base+0x214>
   175d4:	ldr	r0, [pc, #48]	; 1760c <__gcov_sort_n_vals@@Base+0x340>
   175d8:	add	r0, pc, r0
   175dc:	b	1752c <__gcov_sort_n_vals@@Base+0x260>
   175e0:	ldr	r2, [pc, #40]	; 17610 <__gcov_sort_n_vals@@Base+0x344>
   175e4:	mov	r0, r9
   175e8:	bl	11a08 <memset@plt>
   175ec:	ldr	r3, [r5, #-1996]	; 0xfffff834
   175f0:	str	r3, [r5, #-2000]	; 0xfffff830
   175f4:	b	17554 <__gcov_sort_n_vals@@Base+0x288>
   175f8:	andeq	r3, r1, ip, lsl #6
   175fc:	strbvs	r6, [r3, -r1, ror #8]!
   17600:	andeq	r0, r0, r0, lsl #28
   17604:	muleq	r1, ip, r2
   17608:	muleq	r0, r4, sp
   1760c:	andeq	r0, r0, r4, asr #25
   17610:	andeq	r1, r0, r8, asr #15
   17614:	push	{r4, r5, r6, r7, r8, lr}
   17618:	sub	sp, sp, #6080	; 0x17c0
   1761c:	sub	sp, sp, #32
   17620:	add	r6, sp, #24
   17624:	add	r2, sp, #12
   17628:	mov	r8, r1
   1762c:	mov	r1, r6
   17630:	mov	r4, r0
   17634:	bl	15c78 <generate_code@@Base+0x504>
   17638:	add	r5, sp, #8
   1763c:	mov	r7, r0
   17640:	mov	r0, r5
   17644:	bl	15dfc <generate_code@@Base+0x688>
   17648:	cmp	r4, #0
   1764c:	beq	17674 <__gcov_sort_n_vals@@Base+0x3a8>
   17650:	mov	r0, r4
   17654:	str	r6, [sp]
   17658:	mov	r3, r7
   1765c:	mov	r2, r8
   17660:	mov	r1, r5
   17664:	bl	17464 <__gcov_sort_n_vals@@Base+0x198>
   17668:	ldr	r4, [r4, #4]
   1766c:	cmp	r4, #0
   17670:	bne	17650 <__gcov_sort_n_vals@@Base+0x384>
   17674:	ldr	r0, [sp, #8]
   17678:	bl	1190c <free@plt>
   1767c:	add	sp, sp, #6080	; 0x17c0
   17680:	add	sp, sp, #32
   17684:	pop	{r4, r5, r6, r7, r8, pc}
   17688:	ldrb	r1, [r0, #4]
   1768c:	tst	r1, #1
   17690:	bxne	lr
   17694:	push	{r4, lr}
   17698:	lsr	r1, r1, #1
   1769c:	mov	r4, r0
   176a0:	and	r1, r1, #1
   176a4:	ldr	r0, [r0]
   176a8:	bl	17614 <__gcov_sort_n_vals@@Base+0x348>
   176ac:	ldrb	r3, [r4, #4]
   176b0:	orr	r3, r3, #3
   176b4:	strb	r3, [r4, #4]
   176b8:	pop	{r4, pc}
   176bc:	push	{r4, r5, r6, lr}
   176c0:	ldr	r4, [pc, #76]	; 17714 <__gcov_sort_n_vals@@Base+0x448>
   176c4:	ldr	r5, [pc, #76]	; 17718 <__gcov_sort_n_vals@@Base+0x44c>
   176c8:	add	r4, pc, r4
   176cc:	mov	r0, r4
   176d0:	bl	17688 <__gcov_sort_n_vals@@Base+0x3bc>
   176d4:	ldr	r3, [r4, #8]
   176d8:	add	r5, pc, r5
   176dc:	cmp	r3, #0
   176e0:	ldrne	r2, [r4, #12]
   176e4:	strne	r2, [r3, #12]
   176e8:	ldr	r2, [pc, #44]	; 1771c <__gcov_sort_n_vals@@Base+0x450>
   176ec:	add	r2, pc, r2
   176f0:	ldr	r2, [r2, #12]
   176f4:	cmp	r2, #0
   176f8:	beq	17704 <__gcov_sort_n_vals@@Base+0x438>
   176fc:	str	r3, [r2, #8]
   17700:	pop	{r4, r5, r6, pc}
   17704:	ldr	r2, [pc, #20]	; 17720 <__gcov_sort_n_vals@@Base+0x454>
   17708:	ldr	r2, [r5, r2]
   1770c:	str	r3, [r2, #4]
   17710:	pop	{r4, r5, r6, pc}
   17714:	andeq	r3, r1, r0, asr #1
   17718:	andeq	r1, r1, r0, lsr #18
   1771c:	muleq	r1, ip, r0
   17720:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17724:	ldr	r1, [r0]
   17728:	push	{r4, r5, r6, lr}
   1772c:	cmp	r1, #0
   17730:	ldr	r5, [pc, #168]	; 177e0 <__gcov_sort_n_vals@@Base+0x514>
   17734:	add	r5, pc, r5
   17738:	popeq	{r4, r5, r6, pc}
   1773c:	ldr	r3, [r0, #56]	; 0x38
   17740:	cmp	r3, #0
   17744:	popeq	{r4, r5, r6, pc}
   17748:	mov	r4, r0
   1774c:	mov	r2, #0
   17750:	add	r0, r0, #12
   17754:	bl	163e0 <generate_code@@Base+0xc6c>
   17758:	cmp	r0, #0
   1775c:	popeq	{r4, r5, r6, pc}
   17760:	ldr	r6, [pc, #124]	; 177e4 <__gcov_sort_n_vals@@Base+0x518>
   17764:	add	r6, pc, r6
   17768:	ldr	r2, [r6]
   1776c:	cmp	r2, #0
   17770:	beq	17788 <__gcov_sort_n_vals@@Base+0x4bc>
   17774:	ldr	r3, [pc, #108]	; 177e8 <__gcov_sort_n_vals@@Base+0x51c>
   17778:	str	r2, [r4, #4]
   1777c:	add	r3, pc, r3
   17780:	str	r4, [r3]
   17784:	pop	{r4, r5, r6, pc}
   17788:	ldr	r3, [pc, #92]	; 177ec <__gcov_sort_n_vals@@Base+0x520>
   1778c:	ldr	r2, [pc, #92]	; 177f0 <__gcov_sort_n_vals@@Base+0x524>
   17790:	mov	r0, #12
   17794:	ldr	r5, [r5, r3]
   17798:	add	r2, pc, r2
   1779c:	ldr	r1, [r5]
   177a0:	bl	163e0 <generate_code@@Base+0xc6c>
   177a4:	cmp	r0, #0
   177a8:	beq	177c8 <__gcov_sort_n_vals@@Base+0x4fc>
   177ac:	ldr	r3, [r5, #4]
   177b0:	cmp	r3, #0
   177b4:	str	r3, [r6, #8]
   177b8:	strne	r6, [r3, #12]
   177bc:	ldr	r3, [pc, #48]	; 177f4 <__gcov_sort_n_vals@@Base+0x528>
   177c0:	add	r3, pc, r3
   177c4:	str	r3, [r5, #4]
   177c8:	ldr	r0, [pc, #40]	; 177f8 <__gcov_sort_n_vals@@Base+0x52c>
   177cc:	add	r0, pc, r0
   177d0:	bl	17ab4 <__libc_csu_fini@@Base+0x4>
   177d4:	ldr	r3, [pc, #32]	; 177fc <__gcov_sort_n_vals@@Base+0x530>
   177d8:	ldr	r2, [pc, r3]
   177dc:	b	17774 <__gcov_sort_n_vals@@Base+0x4a8>
   177e0:	andeq	r1, r1, r4, asr #17
   177e4:	andeq	r3, r1, r4, lsr #32
   177e8:	andeq	r3, r1, ip
   177ec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   177f0:	andeq	r0, r0, r4, ror #22
   177f4:	andeq	r2, r1, r8, asr #31
   177f8:			; <UNDEFINED> instruction: 0xfffffee8
   177fc:			; <UNDEFINED> instruction: 0x00012fb0
   17800:	cmp	r3, #0
   17804:	cmpeq	r2, #0
   17808:	bne	1782c <__gcov_sort_n_vals@@Base+0x560>
   1780c:	cmp	r1, #0
   17810:	movlt	r1, #-2147483648	; 0x80000000
   17814:	movlt	r0, #0
   17818:	blt	17828 <__gcov_sort_n_vals@@Base+0x55c>
   1781c:	cmpeq	r0, #0
   17820:	mvnne	r1, #-2147483648	; 0x80000000
   17824:	mvnne	r0, #0
   17828:	b	178d4 <__gcov_sort_n_vals@@Base+0x608>
   1782c:	sub	sp, sp, #8
   17830:	push	{sp, lr}
   17834:	cmp	r1, #0
   17838:	blt	17858 <__gcov_sort_n_vals@@Base+0x58c>
   1783c:	cmp	r3, #0
   17840:	blt	1788c <__gcov_sort_n_vals@@Base+0x5c0>
   17844:	bl	17928 <__gcov_sort_n_vals@@Base+0x65c>
   17848:	ldr	lr, [sp, #4]
   1784c:	add	sp, sp, #8
   17850:	pop	{r2, r3}
   17854:	bx	lr
   17858:	rsbs	r0, r0, #0
   1785c:	sbc	r1, r1, r1, lsl #1
   17860:	cmp	r3, #0
   17864:	blt	178b0 <__gcov_sort_n_vals@@Base+0x5e4>
   17868:	bl	17928 <__gcov_sort_n_vals@@Base+0x65c>
   1786c:	ldr	lr, [sp, #4]
   17870:	add	sp, sp, #8
   17874:	pop	{r2, r3}
   17878:	rsbs	r0, r0, #0
   1787c:	sbc	r1, r1, r1, lsl #1
   17880:	rsbs	r2, r2, #0
   17884:	sbc	r3, r3, r3, lsl #1
   17888:	bx	lr
   1788c:	rsbs	r2, r2, #0
   17890:	sbc	r3, r3, r3, lsl #1
   17894:	bl	17928 <__gcov_sort_n_vals@@Base+0x65c>
   17898:	ldr	lr, [sp, #4]
   1789c:	add	sp, sp, #8
   178a0:	pop	{r2, r3}
   178a4:	rsbs	r0, r0, #0
   178a8:	sbc	r1, r1, r1, lsl #1
   178ac:	bx	lr
   178b0:	rsbs	r2, r2, #0
   178b4:	sbc	r3, r3, r3, lsl #1
   178b8:	bl	17928 <__gcov_sort_n_vals@@Base+0x65c>
   178bc:	ldr	lr, [sp, #4]
   178c0:	add	sp, sp, #8
   178c4:	pop	{r2, r3}
   178c8:	rsbs	r2, r2, #0
   178cc:	sbc	r3, r3, r3, lsl #1
   178d0:	bx	lr
   178d4:	push	{r1, lr}
   178d8:	mov	r0, #8
   178dc:	bl	118dc <raise@plt>
   178e0:	pop	{r1, pc}
   178e4:	ldr	r3, [pc, #48]	; 1791c <__gcov_sort_n_vals@@Base+0x650>
   178e8:	ldr	r2, [pc, #48]	; 17920 <__gcov_sort_n_vals@@Base+0x654>
   178ec:	and	r3, r3, r0, lsr #1
   178f0:	sub	r0, r0, r3
   178f4:	and	r3, r0, r2
   178f8:	and	r0, r2, r0, lsr #2
   178fc:	add	r3, r3, r0
   17900:	ldr	r0, [pc, #28]	; 17924 <__gcov_sort_n_vals@@Base+0x658>
   17904:	add	r3, r3, r3, lsr #4
   17908:	and	r0, r0, r3
   1790c:	add	r0, r0, r0, lsl #8
   17910:	add	r0, r0, r0, lsl #16
   17914:	lsr	r0, r0, #24
   17918:	bx	lr
   1791c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   17920:	teqcc	r3, #-872415232	; 0xcc000000
   17924:	svceq	0x000f0f0f
   17928:	cmp	r1, r3
   1792c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17930:	cmpeq	r0, r2
   17934:	mov	r4, r0
   17938:	mov	r5, r1
   1793c:	ldr	r9, [sp, #28]
   17940:	movcc	r0, #0
   17944:	movcc	r1, #0
   17948:	bcc	17a40 <__gcov_sort_n_vals@@Base+0x774>
   1794c:	cmp	r3, #0
   17950:	clzeq	ip, r2
   17954:	clzne	ip, r3
   17958:	addeq	ip, ip, #32
   1795c:	cmp	r5, #0
   17960:	clzeq	r1, r4
   17964:	addeq	r1, r1, #32
   17968:	clzne	r1, r5
   1796c:	sub	ip, ip, r1
   17970:	sub	lr, ip, #32
   17974:	lsl	r7, r3, ip
   17978:	rsb	r8, ip, #32
   1797c:	orr	r7, r7, r2, lsl lr
   17980:	orr	r7, r7, r2, lsr r8
   17984:	lsl	r6, r2, ip
   17988:	cmp	r5, r7
   1798c:	cmpeq	r4, r6
   17990:	movcc	r0, #0
   17994:	movcc	r1, #0
   17998:	bcc	179b4 <__gcov_sort_n_vals@@Base+0x6e8>
   1799c:	mov	r3, #1
   179a0:	subs	r4, r4, r6
   179a4:	lsl	r1, r3, lr
   179a8:	lsl	r0, r3, ip
   179ac:	orr	r1, r1, r3, lsr r8
   179b0:	sbc	r5, r5, r7
   179b4:	cmp	ip, #0
   179b8:	beq	17a40 <__gcov_sort_n_vals@@Base+0x774>
   179bc:	lsrs	r3, r7, #1
   179c0:	rrx	r2, r6
   179c4:	mov	r6, ip
   179c8:	b	179ec <__gcov_sort_n_vals@@Base+0x720>
   179cc:	subs	r4, r4, r2
   179d0:	sbc	r5, r5, r3
   179d4:	adds	r4, r4, r4
   179d8:	adc	r5, r5, r5
   179dc:	adds	r4, r4, #1
   179e0:	adc	r5, r5, #0
   179e4:	subs	r6, r6, #1
   179e8:	beq	17a08 <__gcov_sort_n_vals@@Base+0x73c>
   179ec:	cmp	r5, r3
   179f0:	cmpeq	r4, r2
   179f4:	bcs	179cc <__gcov_sort_n_vals@@Base+0x700>
   179f8:	adds	r4, r4, r4
   179fc:	adc	r5, r5, r5
   17a00:	subs	r6, r6, #1
   17a04:	bne	179ec <__gcov_sort_n_vals@@Base+0x720>
   17a08:	lsr	r6, r4, ip
   17a0c:	lsr	r7, r5, ip
   17a10:	orr	r6, r6, r5, lsl r8
   17a14:	adds	r2, r0, r4
   17a18:	orr	r6, r6, r5, lsr lr
   17a1c:	adc	r3, r1, r5
   17a20:	lsl	r1, r7, ip
   17a24:	orr	r1, r1, r6, lsl lr
   17a28:	lsl	r0, r6, ip
   17a2c:	orr	r1, r1, r6, lsr r8
   17a30:	subs	r0, r2, r0
   17a34:	mov	r4, r6
   17a38:	mov	r5, r7
   17a3c:	sbc	r1, r3, r1
   17a40:	cmp	r9, #0
   17a44:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17a48:	strd	r4, [r9]
   17a4c:	pop	{r4, r5, r6, r7, r8, r9, pc}

00017a50 <__libc_csu_init@@Base>:
   17a50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a54:	mov	r7, r0
   17a58:	ldr	r6, [pc, #72]	; 17aa8 <__libc_csu_init@@Base+0x58>
   17a5c:	ldr	r5, [pc, #72]	; 17aac <__libc_csu_init@@Base+0x5c>
   17a60:	add	r6, pc, r6
   17a64:	add	r5, pc, r5
   17a68:	sub	r6, r6, r5
   17a6c:	mov	r8, r1
   17a70:	mov	r9, r2
   17a74:	bl	118b0 <fdopen@plt-0x20>
   17a78:	asrs	r6, r6, #2
   17a7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a80:	mov	r4, #0
   17a84:	add	r4, r4, #1
   17a88:	ldr	r3, [r5], #4
   17a8c:	mov	r2, r9
   17a90:	mov	r1, r8
   17a94:	mov	r0, r7
   17a98:	blx	r3
   17a9c:	cmp	r6, r4
   17aa0:	bne	17a84 <__libc_csu_init@@Base+0x34>
   17aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17aa8:	andeq	r1, r1, r8, lsr #9
   17aac:	andeq	r1, r1, r8, lsl #9

00017ab0 <__libc_csu_fini@@Base>:
   17ab0:	bx	lr
   17ab4:	ldr	r3, [pc, #12]	; 17ac8 <__libc_csu_fini@@Base+0x18>
   17ab8:	mov	r1, #0
   17abc:	add	r3, pc, r3
   17ac0:	ldr	r2, [r3]
   17ac4:	b	119e4 <__cxa_atexit@plt>
   17ac8:	strdeq	r1, [r1], -ip
   17acc:	mov	r2, r1
   17ad0:	mov	r1, r0
   17ad4:	mov	r0, #3
   17ad8:	b	11978 <__fxstat@plt>

Disassembly of section .fini:

00017adc <.fini>:
   17adc:	push	{r3, lr}
   17ae0:	pop	{r3, pc}
