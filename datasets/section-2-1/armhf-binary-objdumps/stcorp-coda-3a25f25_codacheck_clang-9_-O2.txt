
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010d18 <.init>:
   10d18:	push	{r3, lr}
   10d1c:	bl	10ee8 <_start@@Base+0x3c>
   10d20:	pop	{r3, pc}

Disassembly of section .plt:

00010d24 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10d24:	push	{lr}		; (str lr, [sp, #-4]!)
   10d28:	ldr	lr, [pc, #4]	; 10d34 <coda_set_option_perform_boundary_checks@plt-0x4>
   10d2c:	add	lr, pc, lr
   10d30:	ldr	pc, [lr, #8]!
   10d34:	andeq	r2, r1, ip, asr #5

00010d38 <coda_set_option_perform_boundary_checks@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #716]!	; 0x2cc

00010d44 <strcmp@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d50 <printf@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #700]!	; 0x2bc

00010d5c <coda_set_error@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #692]!	; 0x2b4

00010d68 <coda_open@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #684]!	; 0x2ac

00010d74 <fflush@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #676]!	; 0x2a4

00010d80 <coda_set_option_use_mmap@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #668]!	; 0x29c

00010d8c <coda_cursor_print_path@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #660]!	; 0x294

00010d98 <coda_set_definition_path_conditional@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #652]!	; 0x28c

00010da4 <coda_set_definition_path@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #644]!	; 0x284

00010db0 <coda_recognize_file@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #636]!	; 0x27c

00010dbc <fwrite@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #628]!	; 0x274

00010dc8 <coda_type_get_format_name@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #620]!	; 0x26c

00010dd4 <coda_done@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #612]!	; 0x264

00010de0 <puts@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #604]!	; 0x25c

00010dec <coda_product_check@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #596]!	; 0x254

00010df8 <__libc_start_main@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #588]!	; 0x24c

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #580]!	; 0x244

00010e10 <exit@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #572]!	; 0x23c

00010e1c <fprintf@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #564]!	; 0x234

00010e28 <coda_init@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #556]!	; 0x22c

00010e34 <ungetc@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #548]!	; 0x224

00010e40 <coda_set_option_perform_conversions@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #540]!	; 0x21c

00010e4c <putchar@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #532]!	; 0x214

00010e58 <coda_close@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #524]!	; 0x20c

00010e64 <coda_errno_to_string@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #516]!	; 0x204

00010e70 <coda_get_libcoda_version@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #508]!	; 0x1fc

00010e7c <coda_get_errno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #500]!	; 0x1f4

00010e88 <abort@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #73728	; 0x12000
   10e90:	ldr	pc, [ip, #492]!	; 0x1ec

00010e94 <getc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #73728	; 0x12000
   10e9c:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea0 <__assert_fail@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #73728	; 0x12000
   10ea8:	ldr	pc, [ip, #476]!	; 0x1dc

Disassembly of section .text:

00010eac <_start@@Base>:
   10eac:	mov	fp, #0
   10eb0:	mov	lr, #0
   10eb4:	pop	{r1}		; (ldr r1, [sp], #4)
   10eb8:	mov	r2, sp
   10ebc:	push	{r2}		; (str r2, [sp, #-4]!)
   10ec0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ec4:	ldr	ip, [pc, #16]	; 10edc <_start@@Base+0x30>
   10ec8:	push	{ip}		; (str ip, [sp, #-4]!)
   10ecc:	ldr	r0, [pc, #12]	; 10ee0 <_start@@Base+0x34>
   10ed0:	ldr	r3, [pc, #12]	; 10ee4 <_start@@Base+0x38>
   10ed4:	bl	10df8 <__libc_start_main@plt>
   10ed8:	bl	10e88 <abort@plt>
   10edc:	andeq	r1, r1, r4, asr r9
   10ee0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   10ee4:	strdeq	r1, [r1], -r4
   10ee8:	ldr	r3, [pc, #20]	; 10f04 <_start@@Base+0x58>
   10eec:	ldr	r2, [pc, #20]	; 10f08 <_start@@Base+0x5c>
   10ef0:	add	r3, pc, r3
   10ef4:	ldr	r2, [r3, r2]
   10ef8:	cmp	r2, #0
   10efc:	bxeq	lr
   10f00:	b	10e04 <__gmon_start__@plt>
   10f04:	andeq	r2, r1, r8, lsl #2
   10f08:	muleq	r0, ip, r0
   10f0c:	ldr	r0, [pc, #24]	; 10f2c <_start@@Base+0x80>
   10f10:	ldr	r3, [pc, #24]	; 10f30 <_start@@Base+0x84>
   10f14:	cmp	r3, r0
   10f18:	bxeq	lr
   10f1c:	ldr	r3, [pc, #16]	; 10f34 <_start@@Base+0x88>
   10f20:	cmp	r3, #0
   10f24:	bxeq	lr
   10f28:	bx	r3
   10f2c:	strheq	r3, [r2], -r0
   10f30:	strheq	r3, [r2], -r0
   10f34:	andeq	r0, r0, r0
   10f38:	ldr	r0, [pc, #36]	; 10f64 <_start@@Base+0xb8>
   10f3c:	ldr	r1, [pc, #36]	; 10f68 <_start@@Base+0xbc>
   10f40:	sub	r1, r1, r0
   10f44:	asr	r1, r1, #2
   10f48:	add	r1, r1, r1, lsr #31
   10f4c:	asrs	r1, r1, #1
   10f50:	bxeq	lr
   10f54:	ldr	r3, [pc, #16]	; 10f6c <_start@@Base+0xc0>
   10f58:	cmp	r3, #0
   10f5c:	bxeq	lr
   10f60:	bx	r3
   10f64:	strheq	r3, [r2], -r0
   10f68:	strheq	r3, [r2], -r0
   10f6c:	andeq	r0, r0, r0
   10f70:	push	{r4, lr}
   10f74:	ldr	r4, [pc, #24]	; 10f94 <_start@@Base+0xe8>
   10f78:	ldrb	r3, [r4]
   10f7c:	cmp	r3, #0
   10f80:	popne	{r4, pc}
   10f84:	bl	10f0c <_start@@Base+0x60>
   10f88:	mov	r3, #1
   10f8c:	strb	r3, [r4]
   10f90:	pop	{r4, pc}
   10f94:	strheq	r3, [r2], -r0
   10f98:	b	10f38 <_start@@Base+0x8c>

00010f9c <main@@Base>:
   10f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fa0:	add	fp, sp, #28
   10fa4:	sub	sp, sp, #1004	; 0x3ec
   10fa8:	mov	r5, r1
   10fac:	ldr	r1, [pc, #984]	; 1138c <main@@Base+0x3f0>
   10fb0:	mov	r4, r0
   10fb4:	mov	r0, #0
   10fb8:	cmp	r4, #1
   10fbc:	ldr	r1, [pc, r1]
   10fc0:	str	r0, [r1]
   10fc4:	ldr	r9, [pc, #964]	; 11390 <main@@Base+0x3f4>
   10fc8:	ldr	r9, [pc, r9]
   10fcc:	str	r0, [r9]
   10fd0:	ldr	r1, [pc, #956]	; 11394 <main@@Base+0x3f8>
   10fd4:	ldr	r1, [pc, r1]
   10fd8:	str	r0, [r1]
   10fdc:	beq	11340 <main@@Base+0x3a4>
   10fe0:	ldr	r6, [r5, #4]
   10fe4:	ldr	r1, [pc, #940]	; 11398 <main@@Base+0x3fc>
   10fe8:	add	r1, pc, r1
   10fec:	mov	r0, r6
   10ff0:	bl	10d44 <strcmp@plt>
   10ff4:	cmp	r0, #0
   10ff8:	beq	11340 <main@@Base+0x3a4>
   10ffc:	ldr	r1, [pc, #920]	; 1139c <main@@Base+0x400>
   11000:	mov	r0, r6
   11004:	add	r1, pc, r1
   11008:	bl	10d44 <strcmp@plt>
   1100c:	cmp	r0, #0
   11010:	beq	11340 <main@@Base+0x3a4>
   11014:	ldr	r1, [pc, #900]	; 113a0 <main@@Base+0x404>
   11018:	mov	r0, r6
   1101c:	add	r1, pc, r1
   11020:	bl	10d44 <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	beq	1134c <main@@Base+0x3b0>
   1102c:	ldr	r1, [pc, #880]	; 113a4 <main@@Base+0x408>
   11030:	mov	r0, r6
   11034:	add	r1, pc, r1
   11038:	bl	10d44 <strcmp@plt>
   1103c:	cmp	r0, #0
   11040:	beq	1134c <main@@Base+0x3b0>
   11044:	cmp	r4, #3
   11048:	blt	11064 <main@@Base+0xc8>
   1104c:	ldr	r1, [pc, #852]	; 113a8 <main@@Base+0x40c>
   11050:	mov	r0, r6
   11054:	add	r1, pc, r1
   11058:	bl	10d44 <strcmp@plt>
   1105c:	cmp	r0, #0
   11060:	beq	112c8 <main@@Base+0x32c>
   11064:	ldr	r0, [r5]
   11068:	ldr	r2, [pc, #828]	; 113ac <main@@Base+0x410>
   1106c:	mov	r1, #0
   11070:	add	r2, pc, r2
   11074:	bl	10d98 <coda_set_definition_path_conditional@plt>
   11078:	mov	r8, #1
   1107c:	cmp	r0, #0
   11080:	bne	11358 <main@@Base+0x3bc>
   11084:	mov	sl, #0
   11088:	mov	r6, #1
   1108c:	cmp	r8, r4
   11090:	bge	111a4 <main@@Base+0x208>
   11094:	ldr	r7, [pc, #788]	; 113b0 <main@@Base+0x414>
   11098:	rsb	r8, r8, #0
   1109c:	mov	r6, #1
   110a0:	add	r7, pc, r7
   110a4:	ldr	sl, [r5, -r8, lsl #2]
   110a8:	mov	r1, r7
   110ac:	mov	r0, sl
   110b0:	bl	10d44 <strcmp@plt>
   110b4:	cmp	r0, #0
   110b8:	mov	r0, r9
   110bc:	beq	1117c <main@@Base+0x1e0>
   110c0:	ldr	r1, [pc, #748]	; 113b4 <main@@Base+0x418>
   110c4:	mov	r0, sl
   110c8:	add	r1, pc, r1
   110cc:	bl	10d44 <strcmp@plt>
   110d0:	cmp	r0, #0
   110d4:	mov	r0, r9
   110d8:	beq	1117c <main@@Base+0x1e0>
   110dc:	ldr	r1, [pc, #724]	; 113b8 <main@@Base+0x41c>
   110e0:	mov	r0, sl
   110e4:	add	r1, pc, r1
   110e8:	bl	10d44 <strcmp@plt>
   110ec:	cmp	r0, #0
   110f0:	ldr	r0, [pc, #708]	; 113bc <main@@Base+0x420>
   110f4:	ldr	r0, [pc, r0]
   110f8:	beq	1117c <main@@Base+0x1e0>
   110fc:	ldr	r1, [pc, #700]	; 113c0 <main@@Base+0x424>
   11100:	mov	r0, sl
   11104:	add	r1, pc, r1
   11108:	bl	10d44 <strcmp@plt>
   1110c:	cmp	r0, #0
   11110:	ldr	r0, [pc, #684]	; 113c4 <main@@Base+0x428>
   11114:	ldr	r0, [pc, r0]
   11118:	beq	1117c <main@@Base+0x1e0>
   1111c:	ldr	r1, [pc, #676]	; 113c8 <main@@Base+0x42c>
   11120:	mov	r0, sl
   11124:	add	r1, pc, r1
   11128:	bl	10d44 <strcmp@plt>
   1112c:	cmp	r0, #0
   11130:	ldr	r0, [pc, #660]	; 113cc <main@@Base+0x430>
   11134:	ldr	r0, [pc, r0]
   11138:	beq	1117c <main@@Base+0x1e0>
   1113c:	ldr	r1, [pc, #652]	; 113d0 <main@@Base+0x434>
   11140:	mov	r0, sl
   11144:	add	r1, pc, r1
   11148:	bl	10d44 <strcmp@plt>
   1114c:	cmp	r0, #0
   11150:	ldr	r0, [pc, #636]	; 113d4 <main@@Base+0x438>
   11154:	ldr	r0, [pc, r0]
   11158:	beq	1117c <main@@Base+0x1e0>
   1115c:	ldr	r1, [pc, #628]	; 113d8 <main@@Base+0x43c>
   11160:	mov	r0, sl
   11164:	add	r1, pc, r1
   11168:	bl	10d44 <strcmp@plt>
   1116c:	mov	r1, #0
   11170:	cmp	r0, #0
   11174:	beq	11188 <main@@Base+0x1ec>
   11178:	b	112d8 <main@@Base+0x33c>
   1117c:	mov	r1, #1
   11180:	str	r1, [r0]
   11184:	mov	r1, r6
   11188:	sub	r8, r8, #1
   1118c:	mov	r6, r1
   11190:	adds	r0, r4, r8
   11194:	bne	110a4 <main@@Base+0x108>
   11198:	mov	r8, r4
   1119c:	mov	r6, r1
   111a0:	mov	sl, #0
   111a4:	bl	10e28 <coda_init@plt>
   111a8:	cmp	r0, #0
   111ac:	bne	11358 <main@@Base+0x3bc>
   111b0:	mov	r0, #0
   111b4:	mov	r7, #0
   111b8:	bl	10d38 <coda_set_option_perform_boundary_checks@plt>
   111bc:	mov	r0, #0
   111c0:	bl	10e40 <coda_set_option_perform_conversions@plt>
   111c4:	mov	r0, r6
   111c8:	bl	10d80 <coda_set_option_use_mmap@plt>
   111cc:	cmp	sl, #0
   111d0:	beq	11278 <main@@Base+0x2dc>
   111d4:	ldr	r5, [pc, #528]	; 113ec <main@@Base+0x450>
   111d8:	mov	r4, sp
   111dc:	ldr	r5, [pc, r5]
   111e0:	b	111f4 <main@@Base+0x258>
   111e4:	strb	r0, [r4, r7]
   111e8:	add	r7, r7, #1
   111ec:	cmp	r7, #1000	; 0x3e8
   111f0:	beq	11258 <main@@Base+0x2bc>
   111f4:	ldr	r0, [r5]
   111f8:	bl	10e94 <getc@plt>
   111fc:	uxtb	r1, r0
   11200:	cmp	r1, #10
   11204:	beq	1122c <main@@Base+0x290>
   11208:	cmp	r1, #13
   1120c:	bne	111e4 <main@@Base+0x248>
   11210:	ldr	r0, [r5]
   11214:	bl	10e94 <getc@plt>
   11218:	uxtb	r0, r0
   1121c:	cmp	r0, #10
   11220:	beq	1122c <main@@Base+0x290>
   11224:	ldr	r1, [r5]
   11228:	bl	10e34 <ungetc@plt>
   1122c:	mov	r0, #0
   11230:	cmp	r7, #0
   11234:	strb	r0, [r4, r7]
   11238:	mov	r7, #0
   1123c:	beq	111f4 <main@@Base+0x258>
   11240:	mov	r0, r4
   11244:	bl	11404 <main@@Base+0x468>
   11248:	mov	r0, #0
   1124c:	mov	r7, #0
   11250:	bl	10d74 <fflush@plt>
   11254:	b	111f4 <main@@Base+0x258>
   11258:	ldr	r0, [pc, #400]	; 113f0 <main@@Base+0x454>
   1125c:	ldr	r1, [pc, #400]	; 113f4 <main@@Base+0x458>
   11260:	ldr	r3, [pc, #400]	; 113f8 <main@@Base+0x45c>
   11264:	mov	r2, #316	; 0x13c
   11268:	add	r0, pc, r0
   1126c:	add	r1, pc, r1
   11270:	add	r3, pc, r3
   11274:	bl	10ea0 <__assert_fail@plt>
   11278:	cmp	r8, r4
   1127c:	bge	112a0 <main@@Base+0x304>
   11280:	add	r5, r5, r8, lsl #2
   11284:	sub	r4, r4, r8
   11288:	ldr	r0, [r5], #4
   1128c:	bl	11404 <main@@Base+0x468>
   11290:	mov	r0, #0
   11294:	bl	10d74 <fflush@plt>
   11298:	subs	r4, r4, #1
   1129c:	bne	11288 <main@@Base+0x2ec>
   112a0:	bl	10dd4 <coda_done@plt>
   112a4:	ldr	r0, [pc, #316]	; 113e8 <main@@Base+0x44c>
   112a8:	ldr	r0, [pc, r0]
   112ac:	ldr	r0, [r0]
   112b0:	cmp	r0, #0
   112b4:	moveq	r0, #0
   112b8:	subeq	sp, fp, #28
   112bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112c0:	mov	r0, #1
   112c4:	bl	10e10 <exit@plt>
   112c8:	ldr	r0, [r5, #8]
   112cc:	bl	10da4 <coda_set_definition_path@plt>
   112d0:	mov	r8, #3
   112d4:	b	11084 <main@@Base+0xe8>
   112d8:	ldr	r1, [pc, #252]	; 113dc <main@@Base+0x440>
   112dc:	mov	r0, sl
   112e0:	add	r1, pc, r1
   112e4:	bl	10d44 <strcmp@plt>
   112e8:	add	r1, r4, r8
   112ec:	rsb	r8, r8, #0
   112f0:	cmp	r1, #1
   112f4:	cmpeq	r0, #0
   112f8:	beq	11338 <main@@Base+0x39c>
   112fc:	ldrb	r0, [sl]
   11300:	mov	sl, #0
   11304:	cmp	r0, #45	; 0x2d
   11308:	bne	111a4 <main@@Base+0x208>
   1130c:	ldr	r0, [pc, #204]	; 113e0 <main@@Base+0x444>
   11310:	mov	r1, #25
   11314:	mov	r2, #1
   11318:	ldr	r0, [pc, r0]
   1131c:	ldr	r3, [r0]
   11320:	ldr	r0, [pc, #188]	; 113e4 <main@@Base+0x448>
   11324:	add	r0, pc, r0
   11328:	bl	10dbc <fwrite@plt>
   1132c:	bl	1165c <main@@Base+0x6c0>
   11330:	mov	r0, #1
   11334:	bl	10e10 <exit@plt>
   11338:	mov	sl, #1
   1133c:	b	111a4 <main@@Base+0x208>
   11340:	bl	1165c <main@@Base+0x6c0>
   11344:	mov	r0, #0
   11348:	bl	10e10 <exit@plt>
   1134c:	bl	11850 <main@@Base+0x8b4>
   11350:	mov	r0, #0
   11354:	bl	10e10 <exit@plt>
   11358:	ldr	r0, [pc, #156]	; 113fc <main@@Base+0x460>
   1135c:	ldr	r0, [pc, r0]
   11360:	ldr	r4, [r0]
   11364:	bl	10e7c <coda_get_errno@plt>
   11368:	ldr	r0, [r0]
   1136c:	bl	10e64 <coda_errno_to_string@plt>
   11370:	ldr	r1, [pc, #136]	; 11400 <main@@Base+0x464>
   11374:	mov	r2, r0
   11378:	mov	r0, r4
   1137c:	add	r1, pc, r1
   11380:	bl	10e1c <fprintf@plt>
   11384:	mov	r0, #1
   11388:	bl	10e10 <exit@plt>
   1138c:	andeq	r2, r1, r0, ror #1
   11390:	andeq	r2, r1, r4, asr #1
   11394:	strheq	r2, [r1], -r0
   11398:	andeq	r0, r0, r4, ror r9
   1139c:	strdeq	r0, [r0], -r9
   113a0:	andeq	r0, r0, r3, asr #18
   113a4:	andeq	r0, r0, r0, lsl #28
   113a8:	andeq	r0, r0, lr, lsl #18
   113ac:	strdeq	r0, [r0], -r5
   113b0:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   113b4:	andeq	r0, r0, r5, lsl ip
   113b8:	muleq	r0, lr, r8
   113bc:	andeq	r1, r1, r8, lsr #31
   113c0:	andeq	r0, r0, ip, asr #22
   113c4:	andeq	r1, r1, r8, lsl #31
   113c8:	andeq	r0, r0, r1, ror #16
   113cc:	andeq	r1, r1, r0, asr pc
   113d0:	andeq	r0, r0, r1, lsl sl
   113d4:	andeq	r1, r1, r0, lsr pc
   113d8:	ldrdeq	r0, [r0], -r4
   113dc:	andeq	r0, r0, r8, lsr #13
   113e0:	andeq	r1, r1, r8, ror sp
   113e4:	andeq	r0, r0, r6, ror #12
   113e8:	andeq	r1, r1, r0, ror #27
   113ec:			; <UNDEFINED> instruction: 0x00011ebc
   113f0:	andeq	r0, r0, ip, lsr r7
   113f4:	andeq	r0, r0, r1, asr #14
   113f8:	muleq	r0, fp, r7
   113fc:	andeq	r1, r1, r4, lsr sp
   11400:	andeq	r0, r0, ip, ror #13
   11404:	push	{r4, sl, fp, lr}
   11408:	add	fp, sp, #8
   1140c:	sub	sp, sp, #40	; 0x28
   11410:	mov	r4, r0
   11414:	bl	10de0 <puts@plt>
   11418:	add	r0, sp, #12
   1141c:	add	r1, sp, #16
   11420:	sub	r2, fp, #16
   11424:	add	r3, sp, #20
   11428:	str	r1, [sp]
   1142c:	str	r0, [sp, #4]
   11430:	add	r1, sp, #24
   11434:	mov	r0, r4
   11438:	bl	10db0 <coda_recognize_file@plt>
   1143c:	cmp	r0, #0
   11440:	beq	11470 <main@@Base+0x4d4>
   11444:	bl	10e7c <coda_get_errno@plt>
   11448:	ldr	r0, [r0]
   1144c:	bl	10e64 <coda_errno_to_string@plt>
   11450:	mov	r1, r0
   11454:	ldr	r0, [pc, #460]	; 11628 <main@@Base+0x68c>
   11458:	add	r0, pc, r0
   1145c:	bl	10d50 <printf@plt>
   11460:	mov	r0, #0
   11464:	mov	r1, #0
   11468:	bl	10d5c <coda_set_error@plt>
   1146c:	b	11568 <main@@Base+0x5cc>
   11470:	ldr	r0, [pc, #436]	; 1162c <main@@Base+0x690>
   11474:	ldr	r0, [pc, r0]
   11478:	ldr	r0, [r0]
   1147c:	cmp	r0, #0
   11480:	beq	114a8 <main@@Base+0x50c>
   11484:	ldr	r0, [sp, #20]
   11488:	cmp	r0, #0
   1148c:	ldrne	r0, [sp, #16]
   11490:	cmpne	r0, #0
   11494:	bne	114a8 <main@@Base+0x50c>
   11498:	ldr	r0, [pc, #400]	; 11630 <main@@Base+0x694>
   1149c:	add	r0, pc, r0
   114a0:	bl	10de0 <puts@plt>
   114a4:	b	11568 <main@@Base+0x5cc>
   114a8:	ldr	r0, [pc, #388]	; 11634 <main@@Base+0x698>
   114ac:	ldr	r0, [pc, r0]
   114b0:	ldr	r0, [r0]
   114b4:	cmp	r0, #0
   114b8:	beq	11500 <main@@Base+0x564>
   114bc:	ldr	r0, [fp, #-16]
   114c0:	bl	10dc8 <coda_type_get_format_name@plt>
   114c4:	mov	r1, r0
   114c8:	ldr	r0, [pc, #360]	; 11638 <main@@Base+0x69c>
   114cc:	add	r0, pc, r0
   114d0:	bl	10d50 <printf@plt>
   114d4:	ldr	r1, [sp, #20]
   114d8:	cmp	r1, #0
   114dc:	ldrne	r2, [sp, #16]
   114e0:	cmpne	r2, #0
   114e4:	beq	114f8 <main@@Base+0x55c>
   114e8:	ldr	r3, [sp, #12]
   114ec:	ldr	r0, [pc, #328]	; 1163c <main@@Base+0x6a0>
   114f0:	add	r0, pc, r0
   114f4:	bl	10d50 <printf@plt>
   114f8:	mov	r0, #10
   114fc:	bl	10e4c <putchar@plt>
   11500:	sub	r1, fp, #12
   11504:	mov	r0, r4
   11508:	bl	10d68 <coda_open@plt>
   1150c:	cmp	r0, #0
   11510:	beq	11580 <main@@Base+0x5e4>
   11514:	bl	10e7c <coda_get_errno@plt>
   11518:	ldr	r0, [r0]
   1151c:	cmn	r0, #21
   11520:	bne	1154c <main@@Base+0x5b0>
   11524:	mov	r0, #0
   11528:	bl	10d80 <coda_set_option_use_mmap@plt>
   1152c:	sub	r1, fp, #12
   11530:	mov	r0, r4
   11534:	bl	10d68 <coda_open@plt>
   11538:	mov	r4, r0
   1153c:	mov	r0, #1
   11540:	bl	10d80 <coda_set_option_use_mmap@plt>
   11544:	cmp	r4, #0
   11548:	beq	11580 <main@@Base+0x5e4>
   1154c:	bl	10e7c <coda_get_errno@plt>
   11550:	ldr	r0, [r0]
   11554:	bl	10e64 <coda_errno_to_string@plt>
   11558:	mov	r1, r0
   1155c:	ldr	r0, [pc, #220]	; 11640 <main@@Base+0x6a4>
   11560:	add	r0, pc, r0
   11564:	bl	10d50 <printf@plt>
   11568:	ldr	r0, [pc, #212]	; 11644 <main@@Base+0x6a8>
   1156c:	mov	r1, #1
   11570:	ldr	r0, [pc, r0]
   11574:	str	r1, [r0]
   11578:	sub	sp, fp, #8
   1157c:	pop	{r4, sl, fp, pc}
   11580:	ldr	r0, [pc, #192]	; 11648 <main@@Base+0x6ac>
   11584:	mov	r3, #0
   11588:	ldr	r0, [pc, r0]
   1158c:	ldr	r1, [r0]
   11590:	ldr	r0, [fp, #-12]
   11594:	ldr	r2, [pc, #176]	; 1164c <main@@Base+0x6b0>
   11598:	clz	r1, r1
   1159c:	add	r2, pc, r2
   115a0:	lsr	r1, r1, #5
   115a4:	bl	10dec <coda_product_check@plt>
   115a8:	cmp	r0, #0
   115ac:	beq	115ec <main@@Base+0x650>
   115b0:	bl	10e7c <coda_get_errno@plt>
   115b4:	ldr	r0, [r0]
   115b8:	bl	10e64 <coda_errno_to_string@plt>
   115bc:	mov	r1, r0
   115c0:	ldr	r0, [pc, #136]	; 11650 <main@@Base+0x6b4>
   115c4:	add	r0, pc, r0
   115c8:	bl	10d50 <printf@plt>
   115cc:	ldr	r0, [pc, #128]	; 11654 <main@@Base+0x6b8>
   115d0:	mov	r1, #1
   115d4:	ldr	r0, [pc, r0]
   115d8:	str	r1, [r0]
   115dc:	ldr	r0, [fp, #-12]
   115e0:	bl	10e58 <coda_close@plt>
   115e4:	sub	sp, fp, #8
   115e8:	pop	{r4, sl, fp, pc}
   115ec:	ldr	r0, [fp, #-12]
   115f0:	bl	10e58 <coda_close@plt>
   115f4:	cmp	r0, #0
   115f8:	beq	11618 <main@@Base+0x67c>
   115fc:	bl	10e7c <coda_get_errno@plt>
   11600:	ldr	r0, [r0]
   11604:	bl	10e64 <coda_errno_to_string@plt>
   11608:	mov	r1, r0
   1160c:	ldr	r0, [pc, #68]	; 11658 <main@@Base+0x6bc>
   11610:	add	r0, pc, r0
   11614:	b	11564 <main@@Base+0x5c8>
   11618:	mov	r0, #10
   1161c:	bl	10e4c <putchar@plt>
   11620:	sub	sp, fp, #8
   11624:	pop	{r4, sl, fp, pc}
   11628:	andeq	r0, r0, r0, ror #11
   1162c:	andeq	r1, r1, r0, lsl ip
   11630:	andeq	r0, r0, r8, ror #11
   11634:	andeq	r1, r1, r0, ror #23
   11638:	andeq	r0, r0, sl, ror r5
   1163c:	andeq	r0, r0, fp, ror #10
   11640:	ldrdeq	r0, [r0], -r8
   11644:	andeq	r1, r1, r8, lsl fp
   11648:	andeq	r1, r1, r4, lsl fp
   1164c:	andeq	r0, r0, r8, ror #5
   11650:	andeq	r0, r0, r4, ror r4
   11654:			; <UNDEFINED> instruction: 0x00011ab4
   11658:	andeq	r0, r0, r6, asr r4
   1165c:	push	{fp, lr}
   11660:	mov	fp, sp
   11664:	ldr	r0, [pc, #372]	; 117e0 <main@@Base+0x844>
   11668:	add	r0, pc, r0
   1166c:	bl	10de0 <puts@plt>
   11670:	ldr	r0, [pc, #364]	; 117e4 <main@@Base+0x848>
   11674:	add	r0, pc, r0
   11678:	bl	10de0 <puts@plt>
   1167c:	ldr	r0, [pc, #356]	; 117e8 <main@@Base+0x84c>
   11680:	add	r0, pc, r0
   11684:	bl	10de0 <puts@plt>
   11688:	ldr	r0, [pc, #348]	; 117ec <main@@Base+0x850>
   1168c:	add	r0, pc, r0
   11690:	bl	10de0 <puts@plt>
   11694:	ldr	r0, [pc, #340]	; 117f0 <main@@Base+0x854>
   11698:	add	r0, pc, r0
   1169c:	bl	10de0 <puts@plt>
   116a0:	ldr	r0, [pc, #332]	; 117f4 <main@@Base+0x858>
   116a4:	add	r0, pc, r0
   116a8:	bl	10de0 <puts@plt>
   116ac:	ldr	r0, [pc, #324]	; 117f8 <main@@Base+0x85c>
   116b0:	add	r0, pc, r0
   116b4:	bl	10de0 <puts@plt>
   116b8:	ldr	r0, [pc, #316]	; 117fc <main@@Base+0x860>
   116bc:	add	r0, pc, r0
   116c0:	bl	10de0 <puts@plt>
   116c4:	ldr	r0, [pc, #308]	; 11800 <main@@Base+0x864>
   116c8:	add	r0, pc, r0
   116cc:	bl	10de0 <puts@plt>
   116d0:	ldr	r0, [pc, #300]	; 11804 <main@@Base+0x868>
   116d4:	add	r0, pc, r0
   116d8:	bl	10de0 <puts@plt>
   116dc:	ldr	r0, [pc, #292]	; 11808 <main@@Base+0x86c>
   116e0:	add	r0, pc, r0
   116e4:	bl	10de0 <puts@plt>
   116e8:	ldr	r0, [pc, #284]	; 1180c <main@@Base+0x870>
   116ec:	add	r0, pc, r0
   116f0:	bl	10de0 <puts@plt>
   116f4:	ldr	r0, [pc, #276]	; 11810 <main@@Base+0x874>
   116f8:	add	r0, pc, r0
   116fc:	bl	10de0 <puts@plt>
   11700:	ldr	r0, [pc, #268]	; 11814 <main@@Base+0x878>
   11704:	add	r0, pc, r0
   11708:	bl	10de0 <puts@plt>
   1170c:	ldr	r0, [pc, #260]	; 11818 <main@@Base+0x87c>
   11710:	add	r0, pc, r0
   11714:	bl	10de0 <puts@plt>
   11718:	mov	r0, #10
   1171c:	bl	10e4c <putchar@plt>
   11720:	ldr	r0, [pc, #244]	; 1181c <main@@Base+0x880>
   11724:	add	r0, pc, r0
   11728:	bl	10de0 <puts@plt>
   1172c:	ldr	r0, [pc, #236]	; 11820 <main@@Base+0x884>
   11730:	add	r0, pc, r0
   11734:	bl	10de0 <puts@plt>
   11738:	mov	r0, #10
   1173c:	bl	10e4c <putchar@plt>
   11740:	ldr	r0, [pc, #220]	; 11824 <main@@Base+0x888>
   11744:	add	r0, pc, r0
   11748:	bl	10de0 <puts@plt>
   1174c:	ldr	r0, [pc, #212]	; 11828 <main@@Base+0x88c>
   11750:	add	r0, pc, r0
   11754:	bl	10de0 <puts@plt>
   11758:	mov	r0, #10
   1175c:	bl	10e4c <putchar@plt>
   11760:	ldr	r0, [pc, #196]	; 1182c <main@@Base+0x890>
   11764:	add	r0, pc, r0
   11768:	bl	10de0 <puts@plt>
   1176c:	ldr	r0, [pc, #188]	; 11830 <main@@Base+0x894>
   11770:	add	r0, pc, r0
   11774:	bl	10de0 <puts@plt>
   11778:	mov	r0, #10
   1177c:	bl	10e4c <putchar@plt>
   11780:	ldr	r0, [pc, #172]	; 11834 <main@@Base+0x898>
   11784:	add	r0, pc, r0
   11788:	bl	10de0 <puts@plt>
   1178c:	ldr	r0, [pc, #164]	; 11838 <main@@Base+0x89c>
   11790:	add	r0, pc, r0
   11794:	bl	10de0 <puts@plt>
   11798:	ldr	r0, [pc, #156]	; 1183c <main@@Base+0x8a0>
   1179c:	add	r0, pc, r0
   117a0:	bl	10de0 <puts@plt>
   117a4:	ldr	r0, [pc, #148]	; 11840 <main@@Base+0x8a4>
   117a8:	add	r0, pc, r0
   117ac:	bl	10de0 <puts@plt>
   117b0:	ldr	r0, [pc, #140]	; 11844 <main@@Base+0x8a8>
   117b4:	add	r0, pc, r0
   117b8:	bl	10de0 <puts@plt>
   117bc:	ldr	r0, [pc, #132]	; 11848 <main@@Base+0x8ac>
   117c0:	add	r0, pc, r0
   117c4:	bl	10de0 <puts@plt>
   117c8:	ldr	r0, [pc, #124]	; 1184c <main@@Base+0x8b0>
   117cc:	add	r0, pc, r0
   117d0:	bl	10de0 <puts@plt>
   117d4:	mov	r0, #10
   117d8:	pop	{fp, lr}
   117dc:	b	10e4c <putchar@plt>
   117e0:	andeq	r0, r0, r7, asr #8
   117e4:	andeq	r0, r0, r2, asr #8
   117e8:	andeq	r0, r0, ip, ror #8
   117ec:	andeq	r0, r0, r8, lsr #9
   117f0:	andeq	r0, r0, sp, lsr #9
   117f4:			; <UNDEFINED> instruction: 0x000004be
   117f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   117fc:	andeq	r0, r0, r8, lsr r5
   11800:	andeq	r0, r0, r8, ror r5
   11804:	andeq	r0, r0, r4, lsl #11
   11808:			; <UNDEFINED> instruction: 0x000005b6
   1180c:	andeq	r0, r0, r1, ror #11
   11810:	andeq	r0, r0, pc, ror #11
   11814:	andeq	r0, r0, r8, lsr #12
   11818:	andeq	r0, r0, r2, lsr r6
   1181c:	andeq	r0, r0, sp, asr r6
   11820:	muleq	r0, pc, r6	; <UNPREDICTABLE>
   11824:	andeq	r0, r0, r7, lsr #13
   11828:			; <UNDEFINED> instruction: 0x000006b4
   1182c:			; <UNDEFINED> instruction: 0x000006be
   11830:	andeq	r0, r0, lr, asr #13
   11834:	andeq	r0, r0, ip, ror #13
   11838:	andeq	r0, r0, lr, lsr #14
   1183c:	andeq	r0, r0, fp, ror #14
   11840:	andeq	r0, r0, sl, lsl #15
   11844:	andeq	r0, r0, sl, asr #15
   11848:	andeq	r0, r0, r4, lsl #16
   1184c:	andeq	r0, r0, r7, lsr r8
   11850:	push	{fp, lr}
   11854:	mov	fp, sp
   11858:	bl	10e70 <coda_get_libcoda_version@plt>
   1185c:	mov	r1, r0
   11860:	ldr	r0, [pc, #28]	; 11884 <main@@Base+0x8e8>
   11864:	add	r0, pc, r0
   11868:	bl	10d50 <printf@plt>
   1186c:	ldr	r0, [pc, #20]	; 11888 <main@@Base+0x8ec>
   11870:	add	r0, pc, r0
   11874:	bl	10de0 <puts@plt>
   11878:	mov	r0, #10
   1187c:	pop	{fp, lr}
   11880:	b	10e4c <putchar@plt>
   11884:			; <UNDEFINED> instruction: 0x000001be
   11888:	ldrdeq	r0, [r0], -r3
   1188c:	push	{r4, sl, fp, lr}
   11890:	add	fp, sp, #8
   11894:	mov	r4, r0
   11898:	ldr	r0, [pc, #68]	; 118e4 <main@@Base+0x948>
   1189c:	add	r0, pc, r0
   118a0:	bl	10d50 <printf@plt>
   118a4:	cmp	r4, #0
   118a8:	beq	118c8 <main@@Base+0x92c>
   118ac:	ldr	r0, [pc, #52]	; 118e8 <main@@Base+0x94c>
   118b0:	add	r0, pc, r0
   118b4:	bl	10d50 <printf@plt>
   118b8:	ldr	r1, [pc, #44]	; 118ec <main@@Base+0x950>
   118bc:	mov	r0, r4
   118c0:	ldr	r1, [pc, r1]
   118c4:	bl	10d8c <coda_cursor_print_path@plt>
   118c8:	mov	r0, #10
   118cc:	bl	10e4c <putchar@plt>
   118d0:	ldr	r0, [pc, #24]	; 118f0 <main@@Base+0x954>
   118d4:	mov	r1, #1
   118d8:	ldr	r0, [pc, r0]
   118dc:	str	r1, [r0]
   118e0:	pop	{r4, sl, fp, pc}
   118e4:	ldrdeq	r0, [r0], -r7
   118e8:	andeq	r0, r0, pc, asr #3
   118ec:	andeq	r1, r1, r0, asr #15
   118f0:			; <UNDEFINED> instruction: 0x000117b0

000118f4 <__libc_csu_init@@Base>:
   118f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   118f8:	mov	r7, r0
   118fc:	ldr	r6, [pc, #72]	; 1194c <__libc_csu_init@@Base+0x58>
   11900:	ldr	r5, [pc, #72]	; 11950 <__libc_csu_init@@Base+0x5c>
   11904:	add	r6, pc, r6
   11908:	add	r5, pc, r5
   1190c:	sub	r6, r6, r5
   11910:	mov	r8, r1
   11914:	mov	r9, r2
   11918:	bl	10d18 <coda_set_option_perform_boundary_checks@plt-0x20>
   1191c:	asrs	r6, r6, #2
   11920:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11924:	mov	r4, #0
   11928:	add	r4, r4, #1
   1192c:	ldr	r3, [r5], #4
   11930:	mov	r2, r9
   11934:	mov	r1, r8
   11938:	mov	r0, r7
   1193c:	blx	r3
   11940:	cmp	r6, r4
   11944:	bne	11928 <__libc_csu_init@@Base+0x34>
   11948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1194c:	andeq	r1, r1, r8, ror #11
   11950:	andeq	r1, r1, r0, ror #11

00011954 <__libc_csu_fini@@Base>:
   11954:	bx	lr

Disassembly of section .fini:

00011958 <.fini>:
   11958:	push	{r3, lr}
   1195c:	pop	{r3, pc}
