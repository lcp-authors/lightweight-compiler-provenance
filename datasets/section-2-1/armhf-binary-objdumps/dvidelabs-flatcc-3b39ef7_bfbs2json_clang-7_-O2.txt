
../repos/dvidelabs-flatcc-3b39ef7/samples/reflection/bfbs2json:     file format elf32-littlearm


Disassembly of section .init:

00010938 <.init>:
   10938:	push	{r3, lr}
   1093c:	bl	10a6c <_start@@Base+0x3c>
   10940:	pop	{r3, pc}

Disassembly of section .plt:

00010944 <printf@plt-0x14>:
   10944:	push	{lr}		; (str lr, [sp, #-4]!)
   10948:	ldr	lr, [pc, #4]	; 10954 <printf@plt-0x4>
   1094c:	add	lr, pc, lr
   10950:	ldr	pc, [lr, #8]!
   10954:	andeq	r2, r1, ip, lsr #13

00010958 <printf@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #73728	; 0x12000
   10960:	ldr	pc, [ip, #1708]!	; 0x6ac

00010964 <fopen@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #73728	; 0x12000
   1096c:	ldr	pc, [ip, #1700]!	; 0x6a4

00010970 <free@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #73728	; 0x12000
   10978:	ldr	pc, [ip, #1692]!	; 0x69c

0001097c <ftell@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #73728	; 0x12000
   10984:	ldr	pc, [ip, #1684]!	; 0x694

00010988 <rewind@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #73728	; 0x12000
   10990:	ldr	pc, [ip, #1676]!	; 0x68c

00010994 <fwrite@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #73728	; 0x12000
   1099c:	ldr	pc, [ip, #1668]!	; 0x684

000109a0 <puts@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #73728	; 0x12000
   109a8:	ldr	pc, [ip, #1660]!	; 0x67c

000109ac <malloc@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #73728	; 0x12000
   109b4:	ldr	pc, [ip, #1652]!	; 0x674

000109b8 <__libc_start_main@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #73728	; 0x12000
   109c0:	ldr	pc, [ip, #1644]!	; 0x66c

000109c4 <__gmon_start__@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #73728	; 0x12000
   109cc:	ldr	pc, [ip, #1636]!	; 0x664

000109d0 <exit@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #73728	; 0x12000
   109d8:	ldr	pc, [ip, #1628]!	; 0x65c

000109dc <fprintf@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #73728	; 0x12000
   109e4:	ldr	pc, [ip, #1620]!	; 0x654

000109e8 <putchar@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #73728	; 0x12000
   109f0:	ldr	pc, [ip, #1612]!	; 0x64c

000109f4 <fclose@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #73728	; 0x12000
   109fc:	ldr	pc, [ip, #1604]!	; 0x644

00010a00 <fread_unlocked@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #73728	; 0x12000
   10a08:	ldr	pc, [ip, #1596]!	; 0x63c

00010a0c <fseek@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #73728	; 0x12000
   10a14:	ldr	pc, [ip, #1588]!	; 0x634

00010a18 <abort@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #73728	; 0x12000
   10a20:	ldr	pc, [ip, #1580]!	; 0x62c

00010a24 <__assert_fail@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #73728	; 0x12000
   10a2c:	ldr	pc, [ip, #1572]!	; 0x624

Disassembly of section .text:

00010a30 <_start@@Base>:
   10a30:	mov	fp, #0
   10a34:	mov	lr, #0
   10a38:	pop	{r1}		; (ldr r1, [sp], #4)
   10a3c:	mov	r2, sp
   10a40:	push	{r2}		; (str r2, [sp, #-4]!)
   10a44:	push	{r0}		; (str r0, [sp, #-4]!)
   10a48:	ldr	ip, [pc, #16]	; 10a60 <_start@@Base+0x30>
   10a4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10a50:	ldr	r0, [pc, #12]	; 10a64 <_start@@Base+0x34>
   10a54:	ldr	r3, [pc, #12]	; 10a68 <_start@@Base+0x38>
   10a58:	bl	109b8 <__libc_start_main@plt>
   10a5c:	bl	10a18 <abort@plt>
   10a60:	andeq	r1, r1, ip, lsl #22
   10a64:	andeq	r1, r1, ip, lsr #20
   10a68:	andeq	r1, r1, ip, lsr #21
   10a6c:	ldr	r3, [pc, #20]	; 10a88 <_start@@Base+0x58>
   10a70:	ldr	r2, [pc, #20]	; 10a8c <_start@@Base+0x5c>
   10a74:	add	r3, pc, r3
   10a78:	ldr	r2, [r3, r2]
   10a7c:	cmp	r2, #0
   10a80:	bxeq	lr
   10a84:	b	109c4 <__gmon_start__@plt>
   10a88:	andeq	r2, r1, r4, lsl #11
   10a8c:	andeq	r0, r0, r8, asr r0
   10a90:	ldr	r0, [pc, #24]	; 10ab0 <_start@@Base+0x80>
   10a94:	ldr	r3, [pc, #24]	; 10ab4 <_start@@Base+0x84>
   10a98:	cmp	r3, r0
   10a9c:	bxeq	lr
   10aa0:	ldr	r3, [pc, #16]	; 10ab8 <_start@@Base+0x88>
   10aa4:	cmp	r3, #0
   10aa8:	bxeq	lr
   10aac:	bx	r3
   10ab0:	andeq	r3, r2, r4, rrx
   10ab4:	andeq	r3, r2, r4, rrx
   10ab8:	andeq	r0, r0, r0
   10abc:	ldr	r0, [pc, #36]	; 10ae8 <_start@@Base+0xb8>
   10ac0:	ldr	r1, [pc, #36]	; 10aec <_start@@Base+0xbc>
   10ac4:	sub	r1, r1, r0
   10ac8:	asr	r1, r1, #2
   10acc:	add	r1, r1, r1, lsr #31
   10ad0:	asrs	r1, r1, #1
   10ad4:	bxeq	lr
   10ad8:	ldr	r3, [pc, #16]	; 10af0 <_start@@Base+0xc0>
   10adc:	cmp	r3, #0
   10ae0:	bxeq	lr
   10ae4:	bx	r3
   10ae8:	andeq	r3, r2, r4, rrx
   10aec:	andeq	r3, r2, r4, rrx
   10af0:	andeq	r0, r0, r0
   10af4:	push	{r4, lr}
   10af8:	ldr	r4, [pc, #24]	; 10b18 <_start@@Base+0xe8>
   10afc:	ldrb	r3, [r4]
   10b00:	cmp	r3, #0
   10b04:	popne	{r4, pc}
   10b08:	bl	10a90 <_start@@Base+0x60>
   10b0c:	mov	r3, #1
   10b10:	strb	r3, [r4]
   10b14:	pop	{r4, pc}
   10b18:	andeq	r3, r2, r4, rrx
   10b1c:	b	10abc <_start@@Base+0x8c>

00010b20 <print_type@@Base>:
   10b20:	push	{r4, sl, fp, lr}
   10b24:	add	fp, sp, #8
   10b28:	mov	r4, r0
   10b2c:	mov	r0, #123	; 0x7b
   10b30:	bl	109e8 <putchar@plt>
   10b34:	cmp	r4, #0
   10b38:	beq	10c98 <print_type@@Base+0x178>
   10b3c:	ldr	r1, [r4]
   10b40:	mov	r0, r4
   10b44:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10b48:	cmp	r1, #6
   10b4c:	bcc	10c8c <print_type@@Base+0x16c>
   10b50:	ldrh	r1, [r0, #4]
   10b54:	cmp	r1, #0
   10b58:	beq	10b7c <print_type@@Base+0x5c>
   10b5c:	add	r0, r4, r1
   10b60:	ldrsb	r0, [r0]
   10b64:	cmp	r0, #16
   10b68:	bhi	10b84 <print_type@@Base+0x64>
   10b6c:	ldr	r1, [pc, #328]	; 10cbc <print_type@@Base+0x19c>
   10b70:	add	r1, pc, r1
   10b74:	ldr	r1, [r1, r0, lsl #2]
   10b78:	b	10b8c <print_type@@Base+0x6c>
   10b7c:	mov	r1, #1
   10b80:	b	10ba4 <print_type@@Base+0x84>
   10b84:	ldr	r1, [pc, #300]	; 10cb8 <print_type@@Base+0x198>
   10b88:	add	r1, pc, r1
   10b8c:	ldr	r0, [pc, #300]	; 10cc0 <print_type@@Base+0x1a0>
   10b90:	add	r0, pc, r0
   10b94:	bl	10958 <printf@plt>
   10b98:	ldr	r0, [r4]
   10b9c:	mov	r1, #0
   10ba0:	sub	r0, r4, r0
   10ba4:	ldrh	r2, [r0]
   10ba8:	cmp	r2, #8
   10bac:	bcc	10c8c <print_type@@Base+0x16c>
   10bb0:	ldrh	r2, [r0, #6]
   10bb4:	cmp	r2, #0
   10bb8:	beq	10c34 <print_type@@Base+0x114>
   10bbc:	cmp	r1, #0
   10bc0:	bne	10bd4 <print_type@@Base+0xb4>
   10bc4:	mov	r0, #44	; 0x2c
   10bc8:	bl	109e8 <putchar@plt>
   10bcc:	ldr	r0, [r4]
   10bd0:	sub	r0, r4, r0
   10bd4:	ldrh	r2, [r0]
   10bd8:	ldr	r1, [pc, #228]	; 10cc4 <print_type@@Base+0x1a4>
   10bdc:	add	r1, pc, r1
   10be0:	cmp	r2, #6
   10be4:	bcc	10c1c <print_type@@Base+0xfc>
   10be8:	ldrh	r0, [r0, #4]
   10bec:	cmp	r0, #0
   10bf0:	beq	10c1c <print_type@@Base+0xfc>
   10bf4:	add	r0, r4, r0
   10bf8:	ldrsb	r0, [r0]
   10bfc:	cmp	r0, #16
   10c00:	bhi	10c14 <print_type@@Base+0xf4>
   10c04:	ldr	r1, [pc, #192]	; 10ccc <print_type@@Base+0x1ac>
   10c08:	add	r1, pc, r1
   10c0c:	ldr	r1, [r1, r0, lsl #2]
   10c10:	b	10c1c <print_type@@Base+0xfc>
   10c14:	ldr	r1, [pc, #172]	; 10cc8 <print_type@@Base+0x1a8>
   10c18:	add	r1, pc, r1
   10c1c:	ldr	r0, [pc, #172]	; 10cd0 <print_type@@Base+0x1b0>
   10c20:	add	r0, pc, r0
   10c24:	bl	10958 <printf@plt>
   10c28:	ldr	r0, [r4]
   10c2c:	mov	r1, #0
   10c30:	sub	r0, r4, r0
   10c34:	ldrh	r2, [r0]
   10c38:	cmp	r2, #10
   10c3c:	bcc	10c8c <print_type@@Base+0x16c>
   10c40:	ldrh	r2, [r0, #8]
   10c44:	cmp	r2, #0
   10c48:	beq	10c8c <print_type@@Base+0x16c>
   10c4c:	cmp	r1, #0
   10c50:	bne	10c64 <print_type@@Base+0x144>
   10c54:	mov	r0, #44	; 0x2c
   10c58:	bl	109e8 <putchar@plt>
   10c5c:	ldr	r0, [r4]
   10c60:	sub	r0, r4, r0
   10c64:	ldrh	r2, [r0]
   10c68:	mvn	r1, #0
   10c6c:	cmp	r2, #10
   10c70:	bcc	10c80 <print_type@@Base+0x160>
   10c74:	ldrh	r0, [r0, #8]
   10c78:	cmp	r0, #0
   10c7c:	ldrne	r1, [r4, r0]
   10c80:	ldr	r0, [pc, #76]	; 10cd4 <print_type@@Base+0x1b4>
   10c84:	add	r0, pc, r0
   10c88:	bl	10958 <printf@plt>
   10c8c:	mov	r0, #125	; 0x7d
   10c90:	pop	{r4, sl, fp, lr}
   10c94:	b	109e8 <putchar@plt>
   10c98:	ldr	r0, [pc, #56]	; 10cd8 <print_type@@Base+0x1b8>
   10c9c:	ldr	r1, [pc, #56]	; 10cdc <print_type@@Base+0x1bc>
   10ca0:	ldr	r3, [pc, #56]	; 10ce0 <print_type@@Base+0x1c0>
   10ca4:	mov	r2, #147	; 0x93
   10ca8:	add	r0, pc, r0
   10cac:	add	r1, pc, r1
   10cb0:	add	r3, pc, r3
   10cb4:	bl	10a24 <__assert_fail@plt>
   10cb8:	strdeq	r1, [r0], -r7
   10cbc:	andeq	r2, r1, r8, asr #6
   10cc0:	andeq	r0, r0, r4, lsl #31
   10cc4:	andeq	r1, r0, r6, lsr r3
   10cc8:	andeq	r1, r0, r7, ror #2
   10ccc:			; <UNDEFINED> instruction: 0x000122b0
   10cd0:	andeq	r0, r0, r5, lsl #30
   10cd4:			; <UNDEFINED> instruction: 0x00000eb0
   10cd8:	andeq	r1, r0, sp, lsl #3
   10cdc:	andeq	r1, r0, pc, lsr #3
   10ce0:	andeq	r1, r0, r0, lsr #4

00010ce4 <print_object@@Base>:
   10ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ce8:	add	fp, sp, #28
   10cec:	sub	sp, sp, #4
   10cf0:	cmp	r0, #0
   10cf4:	beq	1110c <print_object@@Base+0x428>
   10cf8:	ldr	r1, [r0]
   10cfc:	mov	r4, r0
   10d00:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10d04:	cmp	r1, #8
   10d08:	bcc	11100 <print_object@@Base+0x41c>
   10d0c:	ldrh	r5, [r0, #6]
   10d10:	cmp	r5, #0
   10d14:	beq	11100 <print_object@@Base+0x41c>
   10d18:	ldrh	r0, [r0, #4]
   10d1c:	cmp	r0, #0
   10d20:	beq	1112c <print_object@@Base+0x448>
   10d24:	mov	r1, r4
   10d28:	ldr	r6, [r1, r5]!
   10d2c:	add	r1, r1, r6
   10d30:	add	r8, r1, #4
   10d34:	mov	r1, r4
   10d38:	ldr	r0, [r1, r0]!
   10d3c:	add	r0, r1, r0
   10d40:	add	r1, r0, #4
   10d44:	ldr	r0, [pc, #1040]	; 1115c <print_object@@Base+0x478>
   10d48:	add	r0, pc, r0
   10d4c:	bl	10958 <printf@plt>
   10d50:	ldr	r0, [pc, #1032]	; 11160 <print_object@@Base+0x47c>
   10d54:	add	r0, pc, r0
   10d58:	bl	10958 <printf@plt>
   10d5c:	ldr	r0, [r8, #-4]
   10d60:	cmp	r0, #0
   10d64:	beq	10fd4 <print_object@@Base+0x2f0>
   10d68:	add	r1, r6, r5
   10d6c:	ldr	r5, [pc, #1008]	; 11164 <print_object@@Base+0x480>
   10d70:	mov	sl, #0
   10d74:	add	r1, r4, r1
   10d78:	add	r9, r1, #8
   10d7c:	add	r5, pc, r5
   10d80:	cmp	sl, #0
   10d84:	beq	10d94 <print_object@@Base+0xb0>
   10d88:	mov	r0, #44	; 0x2c
   10d8c:	bl	109e8 <putchar@plt>
   10d90:	ldr	r0, [r8, #-4]
   10d94:	cmp	r0, sl
   10d98:	bls	110c0 <print_object@@Base+0x3dc>
   10d9c:	ldr	r7, [r9, #-4]
   10da0:	add	r6, r9, r7
   10da4:	cmp	r6, #4
   10da8:	beq	110e0 <print_object@@Base+0x3fc>
   10dac:	ldr	r0, [r6, #-4]
   10db0:	sub	r0, r7, r0
   10db4:	add	r0, r9, r0
   10db8:	ldrh	r1, [r0, #-4]
   10dbc:	cmp	r1, #6
   10dc0:	bcc	11094 <print_object@@Base+0x3b0>
   10dc4:	ldrh	r0, [r0]
   10dc8:	cmp	r0, #0
   10dcc:	beq	11094 <print_object@@Base+0x3b0>
   10dd0:	add	r1, r7, r0
   10dd4:	add	r1, r9, r1
   10dd8:	ldr	r1, [r1, #-4]
   10ddc:	add	r1, r1, r7
   10de0:	add	r0, r1, r0
   10de4:	add	r1, r9, r0
   10de8:	mov	r0, r5
   10dec:	bl	10958 <printf@plt>
   10df0:	ldr	r0, [r6, #-4]
   10df4:	sub	r0, r7, r0
   10df8:	add	r0, r9, r0
   10dfc:	ldrh	r1, [r0, #-4]
   10e00:	cmp	r1, #8
   10e04:	bcc	110a0 <print_object@@Base+0x3bc>
   10e08:	ldrh	r0, [r0, #2]
   10e0c:	cmp	r0, #0
   10e10:	beq	110a0 <print_object@@Base+0x3bc>
   10e14:	add	r1, r7, r0
   10e18:	add	r1, r9, r1
   10e1c:	ldr	r1, [r1, #-4]
   10e20:	add	r1, r1, r7
   10e24:	add	r0, r1, r0
   10e28:	add	r0, r9, r0
   10e2c:	sub	r0, r0, #4
   10e30:	bl	10b20 <print_type@@Base>
   10e34:	ldr	r0, [r6, #-4]
   10e38:	sub	r1, r7, r0
   10e3c:	add	r1, r9, r1
   10e40:	ldrh	r2, [r1, #-4]
   10e44:	cmp	r2, #10
   10e48:	bcc	10fb8 <print_object@@Base+0x2d4>
   10e4c:	ldrh	r1, [r1, #4]
   10e50:	cmp	r1, #0
   10e54:	beq	10e84 <print_object@@Base+0x1a0>
   10e58:	add	r0, r7, r1
   10e5c:	add	r0, r9, r0
   10e60:	ldrh	r1, [r0, #-4]
   10e64:	ldr	r0, [pc, #780]	; 11178 <print_object@@Base+0x494>
   10e68:	add	r0, pc, r0
   10e6c:	bl	10958 <printf@plt>
   10e70:	ldr	r0, [r6, #-4]
   10e74:	sub	r0, r7, r0
   10e78:	add	r0, r9, r0
   10e7c:	sub	r0, r0, #4
   10e80:	b	10e90 <print_object@@Base+0x1ac>
   10e84:	add	r1, r8, sl, lsl #2
   10e88:	add	r1, r1, r7
   10e8c:	sub	r0, r1, r0
   10e90:	ldrh	r1, [r0]
   10e94:	cmp	r1, #14
   10e98:	bcc	10fb8 <print_object@@Base+0x2d4>
   10e9c:	ldrh	r1, [r0, #12]
   10ea0:	cmp	r1, #0
   10ea4:	beq	10ed4 <print_object@@Base+0x1f0>
   10ea8:	add	r0, r7, r1
   10eac:	mov	r1, r9
   10eb0:	ldr	r3, [r1, r0]!
   10eb4:	ldr	r2, [r1, #-4]
   10eb8:	ldr	r0, [pc, #700]	; 1117c <print_object@@Base+0x498>
   10ebc:	add	r0, pc, r0
   10ec0:	bl	10958 <printf@plt>
   10ec4:	ldr	r0, [r6, #-4]
   10ec8:	sub	r0, r7, r0
   10ecc:	add	r0, r9, r0
   10ed0:	sub	r0, r0, #4
   10ed4:	ldrh	r1, [r0]
   10ed8:	cmp	r1, #16
   10edc:	bcc	10fb8 <print_object@@Base+0x2d4>
   10ee0:	ldrh	r1, [r0, #14]
   10ee4:	cmp	r1, #0
   10ee8:	beq	10f18 <print_object@@Base+0x234>
   10eec:	add	r0, r7, r1
   10ef0:	add	r0, r9, r0
   10ef4:	vldr	d16, [r0, #-4]
   10ef8:	ldr	r0, [pc, #640]	; 11180 <print_object@@Base+0x49c>
   10efc:	vmov	r2, r3, d16
   10f00:	add	r0, pc, r0
   10f04:	bl	10958 <printf@plt>
   10f08:	ldr	r0, [r6, #-4]
   10f0c:	sub	r0, r7, r0
   10f10:	add	r0, r9, r0
   10f14:	sub	r0, r0, #4
   10f18:	ldrh	r1, [r0]
   10f1c:	cmp	r1, #20
   10f20:	bcc	10fb8 <print_object@@Base+0x2d4>
   10f24:	ldrh	r1, [r0, #18]
   10f28:	cmp	r1, #0
   10f2c:	beq	10f70 <print_object@@Base+0x28c>
   10f30:	add	r0, r7, r1
   10f34:	add	r0, r9, r0
   10f38:	ldrb	r0, [r0, #-4]
   10f3c:	ldr	r1, [pc, #576]	; 11184 <print_object@@Base+0x4a0>
   10f40:	cmp	r0, #0
   10f44:	ldr	r0, [pc, #572]	; 11188 <print_object@@Base+0x4a4>
   10f48:	add	r1, pc, r1
   10f4c:	add	r0, pc, r0
   10f50:	moveq	r1, r0
   10f54:	ldr	r0, [pc, #560]	; 1118c <print_object@@Base+0x4a8>
   10f58:	add	r0, pc, r0
   10f5c:	bl	10958 <printf@plt>
   10f60:	ldr	r0, [r6, #-4]
   10f64:	sub	r0, r7, r0
   10f68:	add	r0, r9, r0
   10f6c:	sub	r0, r0, #4
   10f70:	ldrh	r1, [r0]
   10f74:	cmp	r1, #22
   10f78:	bcc	10fb8 <print_object@@Base+0x2d4>
   10f7c:	ldrh	r0, [r0, #20]
   10f80:	cmp	r0, #0
   10f84:	beq	10fb8 <print_object@@Base+0x2d4>
   10f88:	add	r0, r7, r0
   10f8c:	add	r0, r9, r0
   10f90:	ldrb	r0, [r0, #-4]
   10f94:	ldr	r1, [pc, #500]	; 11190 <print_object@@Base+0x4ac>
   10f98:	cmp	r0, #0
   10f9c:	ldr	r0, [pc, #496]	; 11194 <print_object@@Base+0x4b0>
   10fa0:	add	r1, pc, r1
   10fa4:	add	r0, pc, r0
   10fa8:	moveq	r1, r0
   10fac:	ldr	r0, [pc, #484]	; 11198 <print_object@@Base+0x4b4>
   10fb0:	add	r0, pc, r0
   10fb4:	bl	10958 <printf@plt>
   10fb8:	mov	r0, #125	; 0x7d
   10fbc:	bl	109e8 <putchar@plt>
   10fc0:	ldr	r0, [r8, #-4]
   10fc4:	add	sl, sl, #1
   10fc8:	add	r9, r9, #4
   10fcc:	cmp	sl, r0
   10fd0:	bcc	10d80 <print_object@@Base+0x9c>
   10fd4:	mov	r0, #93	; 0x5d
   10fd8:	bl	109e8 <putchar@plt>
   10fdc:	ldr	r1, [r4]
   10fe0:	mov	r0, r4
   10fe4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10fe8:	cmp	r1, #10
   10fec:	bcc	11084 <print_object@@Base+0x3a0>
   10ff0:	ldrh	r1, [r0, #8]
   10ff4:	cmp	r1, #0
   10ff8:	beq	1102c <print_object@@Base+0x348>
   10ffc:	ldrb	r0, [r4, r1]
   11000:	ldr	r2, [pc, #404]	; 1119c <print_object@@Base+0x4b8>
   11004:	ldr	r1, [pc, #404]	; 111a0 <print_object@@Base+0x4bc>
   11008:	cmp	r0, #0
   1100c:	ldr	r0, [pc, #400]	; 111a4 <print_object@@Base+0x4c0>
   11010:	add	r2, pc, r2
   11014:	add	r1, pc, r1
   11018:	moveq	r1, r2
   1101c:	add	r0, pc, r0
   11020:	bl	10958 <printf@plt>
   11024:	ldr	r0, [r4]
   11028:	sub	r0, r4, r0
   1102c:	ldrh	r1, [r0]
   11030:	cmp	r1, #12
   11034:	bcc	11084 <print_object@@Base+0x3a0>
   11038:	ldrh	r1, [r0, #10]
   1103c:	cmp	r1, #0
   11040:	beq	1105c <print_object@@Base+0x378>
   11044:	ldr	r1, [r4, r1]
   11048:	ldr	r0, [pc, #344]	; 111a8 <print_object@@Base+0x4c4>
   1104c:	add	r0, pc, r0
   11050:	bl	10958 <printf@plt>
   11054:	ldr	r0, [r4]
   11058:	sub	r0, r4, r0
   1105c:	ldrh	r1, [r0]
   11060:	cmp	r1, #14
   11064:	bcc	11084 <print_object@@Base+0x3a0>
   11068:	ldrh	r0, [r0, #12]
   1106c:	cmp	r0, #0
   11070:	beq	11084 <print_object@@Base+0x3a0>
   11074:	ldr	r1, [r4, r0]
   11078:	ldr	r0, [pc, #300]	; 111ac <print_object@@Base+0x4c8>
   1107c:	add	r0, pc, r0
   11080:	bl	10958 <printf@plt>
   11084:	mov	r0, #125	; 0x7d
   11088:	sub	sp, fp, #28
   1108c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11090:	b	109e8 <putchar@plt>
   11094:	ldr	r0, [pc, #216]	; 11174 <print_object@@Base+0x490>
   11098:	add	r0, pc, r0
   1109c:	b	110e8 <print_object@@Base+0x404>
   110a0:	ldr	r0, [pc, #288]	; 111c8 <print_object@@Base+0x4e4>
   110a4:	ldr	r1, [pc, #288]	; 111cc <print_object@@Base+0x4e8>
   110a8:	ldr	r3, [pc, #288]	; 111d0 <print_object@@Base+0x4ec>
   110ac:	mov	r2, #201	; 0xc9
   110b0:	add	r0, pc, r0
   110b4:	add	r1, pc, r1
   110b8:	add	r3, pc, r3
   110bc:	bl	10a24 <__assert_fail@plt>
   110c0:	ldr	r0, [pc, #244]	; 111bc <print_object@@Base+0x4d8>
   110c4:	ldr	r1, [pc, #244]	; 111c0 <print_object@@Base+0x4dc>
   110c8:	ldr	r3, [pc, #244]	; 111c4 <print_object@@Base+0x4e0>
   110cc:	mov	r2, #192	; 0xc0
   110d0:	add	r0, pc, r0
   110d4:	add	r1, pc, r1
   110d8:	add	r3, pc, r3
   110dc:	bl	10a24 <__assert_fail@plt>
   110e0:	ldr	r0, [pc, #128]	; 11168 <print_object@@Base+0x484>
   110e4:	add	r0, pc, r0
   110e8:	ldr	r1, [pc, #124]	; 1116c <print_object@@Base+0x488>
   110ec:	ldr	r3, [pc, #124]	; 11170 <print_object@@Base+0x48c>
   110f0:	mov	r2, #195	; 0xc3
   110f4:	add	r1, pc, r1
   110f8:	add	r3, pc, r3
   110fc:	bl	10a24 <__assert_fail@plt>
   11100:	ldr	r0, [pc, #80]	; 11158 <print_object@@Base+0x474>
   11104:	add	r0, pc, r0
   11108:	b	11114 <print_object@@Base+0x430>
   1110c:	ldr	r0, [pc, #56]	; 1114c <print_object@@Base+0x468>
   11110:	add	r0, pc, r0
   11114:	ldr	r1, [pc, #52]	; 11150 <print_object@@Base+0x46c>
   11118:	ldr	r3, [pc, #52]	; 11154 <print_object@@Base+0x470>
   1111c:	mov	r2, #224	; 0xe0
   11120:	add	r1, pc, r1
   11124:	add	r3, pc, r3
   11128:	bl	10a24 <__assert_fail@plt>
   1112c:	ldr	r0, [pc, #124]	; 111b0 <print_object@@Base+0x4cc>
   11130:	ldr	r1, [pc, #124]	; 111b4 <print_object@@Base+0x4d0>
   11134:	ldr	r3, [pc, #124]	; 111b8 <print_object@@Base+0x4d4>
   11138:	mov	r2, #218	; 0xda
   1113c:	add	r0, pc, r0
   11140:	add	r1, pc, r1
   11144:	add	r3, pc, r3
   11148:	bl	10a24 <__assert_fail@plt>
   1114c:	andeq	r0, r0, r5, lsr #26
   11150:	andeq	r0, r0, fp, lsr sp
   11154:	andeq	r0, r0, fp, lsr lr
   11158:	andeq	r0, r0, r6, lsr #29
   1115c:	strdeq	r0, [r0], -r7
   11160:	strdeq	r0, [r0], -r8
   11164:	ldrdeq	r0, [r0], -ip
   11168:	andeq	r0, r0, r1, asr sp
   1116c:	andeq	r0, r0, r7, ror #26
   11170:	andeq	r0, r0, r2, lsr #31
   11174:	andeq	r0, r0, r2, lsl pc
   11178:	andeq	r0, r0, r5, lsl #26
   1117c:			; <UNDEFINED> instruction: 0x00000cbb
   11180:	andeq	r0, r0, pc, lsl #25
   11184:	andeq	r0, r0, sp, ror #24
   11188:	andeq	r0, r0, lr, ror #24
   1118c:	andeq	r0, r0, lr, asr #24
   11190:	andeq	r0, r0, r5, lsl ip
   11194:	andeq	r0, r0, r6, lsl ip
   11198:	andeq	r0, r0, r0, lsl ip
   1119c:	andeq	r0, r0, sl, lsr #23
   111a0:	andeq	r0, r0, r1, lsr #23
   111a4:	andeq	r0, r0, lr, lsr #23
   111a8:	andeq	r0, r0, lr, lsl #23
   111ac:	andeq	r0, r0, sp, ror #22
   111b0:	andeq	r0, r0, lr, ror #28
   111b4:	andeq	r0, r0, fp, lsl sp
   111b8:	andeq	r0, r0, r7, lsl #29
   111bc:	andeq	r0, r0, r2, asr #30
   111c0:	andeq	r0, r0, r7, lsl #27
   111c4:	andeq	r0, r0, r1, ror pc
   111c8:	strdeq	r0, [r0], -sl
   111cc:	andeq	r0, r0, r7, lsr #27
   111d0:	andeq	r1, r0, r7, lsr #32

000111d4 <print_enum@@Base>:
   111d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111d8:	add	fp, sp, #28
   111dc:	sub	sp, sp, #4
   111e0:	cmp	r0, #0
   111e4:	beq	114e8 <print_enum@@Base+0x314>
   111e8:	ldr	r1, [r0]
   111ec:	mov	sl, r0
   111f0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   111f4:	cmp	r1, #6
   111f8:	bcc	1149c <print_enum@@Base+0x2c8>
   111fc:	ldrh	r0, [r0, #4]
   11200:	cmp	r0, #0
   11204:	beq	1149c <print_enum@@Base+0x2c8>
   11208:	mov	r1, sl
   1120c:	ldr	r0, [r1, r0]!
   11210:	add	r0, r1, r0
   11214:	add	r1, r0, #4
   11218:	ldr	r0, [pc, #760]	; 11518 <print_enum@@Base+0x344>
   1121c:	add	r0, pc, r0
   11220:	bl	10958 <printf@plt>
   11224:	ldr	r1, [sl]
   11228:	mov	r0, sl
   1122c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11230:	cmp	r1, #8
   11234:	bcc	114a8 <print_enum@@Base+0x2d4>
   11238:	ldrh	r4, [r0, #6]
   1123c:	cmp	r4, #0
   11240:	beq	114a8 <print_enum@@Base+0x2d4>
   11244:	mov	r6, sl
   11248:	ldr	r5, [r6, r4]!
   1124c:	ldr	r0, [pc, #712]	; 1151c <print_enum@@Base+0x348>
   11250:	add	r0, pc, r0
   11254:	bl	10958 <printf@plt>
   11258:	ldr	r0, [r6, r5]!
   1125c:	cmp	r0, #0
   11260:	beq	113d8 <print_enum@@Base+0x204>
   11264:	add	r0, r5, r4
   11268:	ldr	r5, [pc, #688]	; 11520 <print_enum@@Base+0x34c>
   1126c:	add	r6, r6, #4
   11270:	mov	r4, #0
   11274:	add	r0, sl, r0
   11278:	add	r7, r0, #8
   1127c:	add	r5, pc, r5
   11280:	ldr	r8, [r7, #-4]
   11284:	cmp	r4, #0
   11288:	add	r9, r7, r8
   1128c:	beq	11298 <print_enum@@Base+0xc4>
   11290:	mov	r0, #44	; 0x2c
   11294:	bl	109e8 <putchar@plt>
   11298:	cmp	r9, #4
   1129c:	beq	1147c <print_enum@@Base+0x2a8>
   112a0:	ldr	r0, [r9, #-4]
   112a4:	sub	r0, r8, r0
   112a8:	add	r0, r7, r0
   112ac:	ldrh	r1, [r0, #-4]
   112b0:	cmp	r1, #6
   112b4:	bcc	11470 <print_enum@@Base+0x29c>
   112b8:	ldrh	r0, [r0]
   112bc:	cmp	r0, #0
   112c0:	beq	11470 <print_enum@@Base+0x29c>
   112c4:	add	r1, r8, r0
   112c8:	add	r1, r7, r1
   112cc:	ldr	r1, [r1, #-4]
   112d0:	add	r1, r1, r8
   112d4:	add	r0, r1, r0
   112d8:	add	r1, r7, r0
   112dc:	mov	r0, r5
   112e0:	bl	10958 <printf@plt>
   112e4:	ldr	r0, [r9, #-4]
   112e8:	sub	r1, r8, r0
   112ec:	add	r1, r7, r1
   112f0:	ldrh	r2, [r1, #-4]
   112f4:	cmp	r2, #8
   112f8:	bcc	113bc <print_enum@@Base+0x1e8>
   112fc:	ldrh	r1, [r1, #2]
   11300:	cmp	r1, #0
   11304:	beq	11338 <print_enum@@Base+0x164>
   11308:	add	r0, r8, r1
   1130c:	mov	r1, r7
   11310:	ldr	r3, [r1, r0]!
   11314:	ldr	r2, [r1, #-4]
   11318:	ldr	r0, [pc, #532]	; 11534 <print_enum@@Base+0x360>
   1131c:	add	r0, pc, r0
   11320:	bl	10958 <printf@plt>
   11324:	ldr	r0, [r9, #-4]
   11328:	sub	r1, r8, r0
   1132c:	add	r1, r7, r1
   11330:	sub	r1, r1, #4
   11334:	b	11344 <print_enum@@Base+0x170>
   11338:	add	r1, r6, r4, lsl #2
   1133c:	add	r1, r1, r8
   11340:	sub	r1, r1, r0
   11344:	ldrh	r1, [r1]
   11348:	rsb	r0, r0, #0
   1134c:	cmp	r1, #10
   11350:	bcc	113bc <print_enum@@Base+0x1e8>
   11354:	add	r0, r0, r8
   11358:	add	r0, r7, r0
   1135c:	ldrh	r0, [r0, #4]
   11360:	cmp	r0, #0
   11364:	beq	113bc <print_enum@@Base+0x1e8>
   11368:	ldr	r0, [pc, #456]	; 11538 <print_enum@@Base+0x364>
   1136c:	add	r0, pc, r0
   11370:	bl	10958 <printf@plt>
   11374:	ldr	r0, [r9, #-4]
   11378:	sub	r0, r8, r0
   1137c:	add	r1, r7, r0
   11380:	mov	r0, #0
   11384:	ldrh	r2, [r1, #-4]
   11388:	cmp	r2, #10
   1138c:	bcc	113b8 <print_enum@@Base+0x1e4>
   11390:	ldrh	r1, [r1, #4]
   11394:	cmp	r1, #0
   11398:	beq	113b8 <print_enum@@Base+0x1e4>
   1139c:	add	r0, r8, r1
   113a0:	add	r0, r7, r0
   113a4:	ldr	r0, [r0, #-4]
   113a8:	add	r0, r0, r8
   113ac:	add	r0, r0, r1
   113b0:	add	r0, r7, r0
   113b4:	sub	r0, r0, #4
   113b8:	bl	10ce4 <print_object@@Base>
   113bc:	mov	r0, #125	; 0x7d
   113c0:	bl	109e8 <putchar@plt>
   113c4:	ldr	r0, [r6, #-4]
   113c8:	add	r4, r4, #1
   113cc:	add	r7, r7, #4
   113d0:	cmp	r4, r0
   113d4:	bcc	11280 <print_enum@@Base+0xac>
   113d8:	mov	r0, #93	; 0x5d
   113dc:	bl	109e8 <putchar@plt>
   113e0:	ldr	r1, [sl]
   113e4:	mov	r0, sl
   113e8:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   113ec:	cmp	r1, #10
   113f0:	bcc	11428 <print_enum@@Base+0x254>
   113f4:	ldrh	r0, [r0, #8]
   113f8:	cmp	r0, #0
   113fc:	beq	11428 <print_enum@@Base+0x254>
   11400:	ldrb	r0, [sl, r0]
   11404:	ldr	r2, [pc, #304]	; 1153c <print_enum@@Base+0x368>
   11408:	ldr	r1, [pc, #304]	; 11540 <print_enum@@Base+0x36c>
   1140c:	cmp	r0, #0
   11410:	ldr	r0, [pc, #300]	; 11544 <print_enum@@Base+0x370>
   11414:	add	r2, pc, r2
   11418:	add	r1, pc, r1
   1141c:	moveq	r1, r2
   11420:	add	r0, pc, r0
   11424:	bl	10958 <printf@plt>
   11428:	ldr	r0, [pc, #280]	; 11548 <print_enum@@Base+0x374>
   1142c:	add	r0, pc, r0
   11430:	bl	10958 <printf@plt>
   11434:	ldr	r1, [sl]
   11438:	mov	r0, sl
   1143c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11440:	cmp	r1, #12
   11444:	bcc	114c8 <print_enum@@Base+0x2f4>
   11448:	ldrh	r0, [r0, #10]
   1144c:	cmp	r0, #0
   11450:	beq	114c8 <print_enum@@Base+0x2f4>
   11454:	ldr	r0, [sl, r0]!
   11458:	add	r0, sl, r0
   1145c:	bl	10b20 <print_type@@Base>
   11460:	mov	r0, #125	; 0x7d
   11464:	sub	sp, fp, #28
   11468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1146c:	b	109e8 <putchar@plt>
   11470:	ldr	r0, [pc, #184]	; 11530 <print_enum@@Base+0x35c>
   11474:	add	r0, pc, r0
   11478:	b	11484 <print_enum@@Base+0x2b0>
   1147c:	ldr	r0, [pc, #160]	; 11524 <print_enum@@Base+0x350>
   11480:	add	r0, pc, r0
   11484:	ldr	r1, [pc, #156]	; 11528 <print_enum@@Base+0x354>
   11488:	ldr	r3, [pc, #156]	; 1152c <print_enum@@Base+0x358>
   1148c:	mov	r2, #159	; 0x9f
   11490:	add	r1, pc, r1
   11494:	add	r3, pc, r3
   11498:	bl	10a24 <__assert_fail@plt>
   1149c:	ldr	r0, [pc, #112]	; 11514 <print_enum@@Base+0x340>
   114a0:	add	r0, pc, r0
   114a4:	b	114f0 <print_enum@@Base+0x31c>
   114a8:	ldr	r0, [pc, #156]	; 1154c <print_enum@@Base+0x378>
   114ac:	ldr	r1, [pc, #156]	; 11550 <print_enum@@Base+0x37c>
   114b0:	ldr	r3, [pc, #156]	; 11554 <print_enum@@Base+0x380>
   114b4:	mov	r2, #183	; 0xb7
   114b8:	add	r0, pc, r0
   114bc:	add	r1, pc, r1
   114c0:	add	r3, pc, r3
   114c4:	bl	10a24 <__assert_fail@plt>
   114c8:	ldr	r0, [pc, #136]	; 11558 <print_enum@@Base+0x384>
   114cc:	ldr	r1, [pc, #136]	; 1155c <print_enum@@Base+0x388>
   114d0:	ldr	r3, [pc, #136]	; 11560 <print_enum@@Base+0x38c>
   114d4:	mov	r2, #185	; 0xb9
   114d8:	add	r0, pc, r0
   114dc:	add	r1, pc, r1
   114e0:	add	r3, pc, r3
   114e4:	bl	10a24 <__assert_fail@plt>
   114e8:	ldr	r0, [pc, #24]	; 11508 <print_enum@@Base+0x334>
   114ec:	add	r0, pc, r0
   114f0:	ldr	r1, [pc, #20]	; 1150c <print_enum@@Base+0x338>
   114f4:	ldr	r3, [pc, #20]	; 11510 <print_enum@@Base+0x33c>
   114f8:	mov	r2, #177	; 0xb1
   114fc:	add	r1, pc, r1
   11500:	add	r3, pc, r3
   11504:	bl	10a24 <__assert_fail@plt>
   11508:	andeq	r0, r0, r9, asr #18
   1150c:	andeq	r0, r0, pc, asr r9
   11510:	andeq	r0, r0, r7, lsr #24
   11514:	andeq	r0, r0, sl, lsl #22
   11518:	andeq	r0, r0, r3, lsr #18
   1151c:	andeq	r0, r0, r8, lsr #19
   11520:	andeq	r0, r0, r3, asr #17
   11524:			; <UNDEFINED> instruction: 0x000009b5
   11528:	andeq	r0, r0, fp, asr #19
   1152c:	andeq	r0, r0, pc, lsl sp
   11530:	andeq	r0, r0, r6, lsr fp
   11534:	andeq	r0, r0, r8, ror #17
   11538:	andeq	r0, r0, r6, lsr #17
   1153c:	andeq	r0, r0, r6, lsr #15
   11540:	muleq	r0, sp, r7
   11544:	strdeq	r0, [r0], -sp
   11548:	andeq	r0, r0, r0, lsl #16
   1154c:	strdeq	r0, [r0], -r2
   11550:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   11554:	andeq	r0, r0, sl, lsr #25
   11558:	ldrdeq	r0, [r0], -r2
   1155c:	andeq	r0, r0, pc, ror r9
   11560:	andeq	r0, r0, ip, lsl sp

00011564 <print_schema@@Base>:
   11564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11568:	add	fp, sp, #24
   1156c:	cmp	r0, #0
   11570:	beq	11800 <print_schema@@Base+0x29c>
   11574:	ldr	r1, [r0]
   11578:	mov	r8, r0
   1157c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11580:	cmp	r1, #6
   11584:	bcc	117d4 <print_schema@@Base+0x270>
   11588:	ldrh	r4, [r0, #4]
   1158c:	cmp	r4, #0
   11590:	beq	117d4 <print_schema@@Base+0x270>
   11594:	mov	r5, r8
   11598:	mov	r0, #123	; 0x7b
   1159c:	ldr	r9, [r5, r4]!
   115a0:	bl	109e8 <putchar@plt>
   115a4:	ldr	r0, [pc, #644]	; 11830 <print_schema@@Base+0x2cc>
   115a8:	add	r0, pc, r0
   115ac:	bl	10958 <printf@plt>
   115b0:	ldr	r0, [r5, r9]
   115b4:	cmp	r0, #0
   115b8:	beq	11610 <print_schema@@Base+0xac>
   115bc:	add	r1, r9, r4
   115c0:	mov	r4, #0
   115c4:	mov	r6, #0
   115c8:	add	r1, r8, r1
   115cc:	add	r7, r1, #4
   115d0:	cmp	r6, #0
   115d4:	beq	115e4 <print_schema@@Base+0x80>
   115d8:	mov	r0, #44	; 0x2c
   115dc:	bl	109e8 <putchar@plt>
   115e0:	ldr	r0, [r5, r9]
   115e4:	cmp	r0, r6
   115e8:	bls	11794 <print_schema@@Base+0x230>
   115ec:	ldr	r0, [r7, r6, lsl #2]
   115f0:	add	r0, r4, r0
   115f4:	add	r0, r7, r0
   115f8:	bl	10ce4 <print_object@@Base>
   115fc:	ldr	r0, [r5, r9]
   11600:	add	r6, r6, #1
   11604:	add	r4, r4, #4
   11608:	cmp	r6, r0
   1160c:	bcc	115d0 <print_schema@@Base+0x6c>
   11610:	mov	r0, #93	; 0x5d
   11614:	bl	109e8 <putchar@plt>
   11618:	ldr	r1, [r8]
   1161c:	mov	r0, r8
   11620:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11624:	cmp	r1, #8
   11628:	bcc	117e0 <print_schema@@Base+0x27c>
   1162c:	ldrh	r4, [r0, #6]
   11630:	cmp	r4, #0
   11634:	beq	117e0 <print_schema@@Base+0x27c>
   11638:	mov	r5, r8
   1163c:	ldr	r9, [r5, r4]!
   11640:	ldr	r0, [pc, #492]	; 11834 <print_schema@@Base+0x2d0>
   11644:	add	r0, pc, r0
   11648:	bl	10958 <printf@plt>
   1164c:	ldr	r0, [r5, r9]
   11650:	cmp	r0, #0
   11654:	beq	116ac <print_schema@@Base+0x148>
   11658:	add	r1, r9, r4
   1165c:	mov	r4, #0
   11660:	mov	r6, #0
   11664:	add	r1, r8, r1
   11668:	add	r7, r1, #4
   1166c:	cmp	r6, #0
   11670:	beq	11680 <print_schema@@Base+0x11c>
   11674:	mov	r0, #44	; 0x2c
   11678:	bl	109e8 <putchar@plt>
   1167c:	ldr	r0, [r5, r9]
   11680:	cmp	r0, r6
   11684:	bls	117b4 <print_schema@@Base+0x250>
   11688:	ldr	r0, [r7, r6, lsl #2]
   1168c:	add	r0, r4, r0
   11690:	add	r0, r7, r0
   11694:	bl	111d4 <print_enum@@Base>
   11698:	ldr	r0, [r5, r9]
   1169c:	add	r6, r6, #1
   116a0:	add	r4, r4, #4
   116a4:	cmp	r6, r0
   116a8:	bcc	1166c <print_schema@@Base+0x108>
   116ac:	mov	r0, #93	; 0x5d
   116b0:	bl	109e8 <putchar@plt>
   116b4:	ldr	r1, [r8]
   116b8:	mov	r0, r8
   116bc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   116c0:	cmp	r1, #10
   116c4:	bcc	11784 <print_schema@@Base+0x220>
   116c8:	ldrh	r1, [r0, #8]
   116cc:	cmp	r1, #0
   116d0:	beq	116f8 <print_schema@@Base+0x194>
   116d4:	mov	r0, r8
   116d8:	ldr	r1, [r0, r1]!
   116dc:	add	r0, r0, r1
   116e0:	add	r1, r0, #4
   116e4:	ldr	r0, [pc, #332]	; 11838 <print_schema@@Base+0x2d4>
   116e8:	add	r0, pc, r0
   116ec:	bl	10958 <printf@plt>
   116f0:	ldr	r0, [r8]
   116f4:	sub	r0, r8, r0
   116f8:	ldrh	r1, [r0]
   116fc:	cmp	r1, #12
   11700:	bcc	11784 <print_schema@@Base+0x220>
   11704:	ldrh	r1, [r0, #10]
   11708:	cmp	r1, #0
   1170c:	beq	11734 <print_schema@@Base+0x1d0>
   11710:	mov	r0, r8
   11714:	ldr	r1, [r0, r1]!
   11718:	add	r0, r0, r1
   1171c:	add	r1, r0, #4
   11720:	ldr	r0, [pc, #276]	; 1183c <print_schema@@Base+0x2d8>
   11724:	add	r0, pc, r0
   11728:	bl	10958 <printf@plt>
   1172c:	ldr	r0, [r8]
   11730:	sub	r0, r8, r0
   11734:	ldrh	r1, [r0]
   11738:	cmp	r1, #14
   1173c:	bcc	11784 <print_schema@@Base+0x220>
   11740:	ldrh	r0, [r0, #12]
   11744:	cmp	r0, #0
   11748:	beq	11784 <print_schema@@Base+0x220>
   1174c:	ldr	r0, [pc, #236]	; 11840 <print_schema@@Base+0x2dc>
   11750:	add	r0, pc, r0
   11754:	bl	10958 <printf@plt>
   11758:	ldr	r0, [r8]
   1175c:	mov	r1, r8
   11760:	ldrh	r2, [r1, -r0]!
   11764:	mov	r0, #0
   11768:	cmp	r2, #14
   1176c:	bcc	11780 <print_schema@@Base+0x21c>
   11770:	ldrh	r1, [r1, #12]
   11774:	cmp	r1, #0
   11778:	ldrne	r0, [r8, r1]!
   1177c:	addne	r0, r8, r0
   11780:	bl	10ce4 <print_object@@Base>
   11784:	ldr	r0, [pc, #184]	; 11844 <print_schema@@Base+0x2e0>
   11788:	add	r0, pc, r0
   1178c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11790:	b	109a0 <puts@plt>
   11794:	ldr	r0, [pc, #172]	; 11848 <print_schema@@Base+0x2e4>
   11798:	ldr	r1, [pc, #172]	; 1184c <print_schema@@Base+0x2e8>
   1179c:	ldr	r3, [pc, #172]	; 11850 <print_schema@@Base+0x2ec>
   117a0:	mov	r2, #215	; 0xd7
   117a4:	add	r0, pc, r0
   117a8:	add	r1, pc, r1
   117ac:	add	r3, pc, r3
   117b0:	bl	10a24 <__assert_fail@plt>
   117b4:	ldr	r0, [pc, #164]	; 11860 <print_schema@@Base+0x2fc>
   117b8:	ldr	r1, [pc, #164]	; 11864 <print_schema@@Base+0x300>
   117bc:	ldr	r3, [pc, #164]	; 11868 <print_schema@@Base+0x304>
   117c0:	mov	r2, #174	; 0xae
   117c4:	add	r0, pc, r0
   117c8:	add	r1, pc, r1
   117cc:	add	r3, pc, r3
   117d0:	bl	10a24 <__assert_fail@plt>
   117d4:	ldr	r0, [pc, #80]	; 1182c <print_schema@@Base+0x2c8>
   117d8:	add	r0, pc, r0
   117dc:	b	11808 <print_schema@@Base+0x2a4>
   117e0:	ldr	r0, [pc, #108]	; 11854 <print_schema@@Base+0x2f0>
   117e4:	ldr	r1, [pc, #108]	; 11858 <print_schema@@Base+0x2f4>
   117e8:	ldr	r3, [pc, #108]	; 1185c <print_schema@@Base+0x2f8>
   117ec:	mov	r2, #238	; 0xee
   117f0:	add	r0, pc, r0
   117f4:	add	r1, pc, r1
   117f8:	add	r3, pc, r3
   117fc:	bl	10a24 <__assert_fail@plt>
   11800:	ldr	r0, [pc, #24]	; 11820 <print_schema@@Base+0x2bc>
   11804:	add	r0, pc, r0
   11808:	ldr	r1, [pc, #20]	; 11824 <print_schema@@Base+0x2c0>
   1180c:	ldr	r3, [pc, #20]	; 11828 <print_schema@@Base+0x2c4>
   11810:	mov	r2, #237	; 0xed
   11814:	add	r1, pc, r1
   11818:	add	r3, pc, r3
   1181c:	bl	10a24 <__assert_fail@plt>
   11820:	andeq	r0, r0, r1, lsr r6
   11824:	andeq	r0, r0, r7, asr #12
   11828:	andeq	r0, r0, r5, lsr sl
   1182c:	ldrdeq	r0, [r0], -r2
   11830:	muleq	r0, r8, r6
   11834:	andeq	r0, r0, r8, lsl #12
   11838:	andeq	r0, r0, pc, ror #10
   1183c:	andeq	r0, r0, r6, asr #10
   11840:	andeq	r0, r0, fp, lsr #10
   11844:	andeq	r0, r0, r0, lsl #24
   11848:	andeq	r0, r0, lr, ror #16
   1184c:			; <UNDEFINED> instruction: 0x000006b3
   11850:	andeq	r0, r0, lr, ror #21
   11854:			; <UNDEFINED> instruction: 0x000007ba
   11858:	andeq	r0, r0, r7, ror #12
   1185c:	strdeq	r0, [r0], -r6
   11860:	andeq	r0, r0, lr, asr #16
   11864:	muleq	r0, r3, r6
   11868:	andeq	r0, r0, fp, ror #22

0001186c <load_and_dump_schema@@Base>:
   1186c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11870:	add	fp, sp, #24
   11874:	ldr	r1, [pc, #396]	; 11a08 <load_and_dump_schema@@Base+0x19c>
   11878:	mov	r8, r0
   1187c:	add	r1, pc, r1
   11880:	bl	10964 <fopen@plt>
   11884:	cmp	r0, #0
   11888:	beq	11964 <load_and_dump_schema@@Base+0xf8>
   1188c:	mov	r1, #0
   11890:	mov	r2, #2
   11894:	mov	r6, r0
   11898:	bl	10a0c <fseek@plt>
   1189c:	mov	r0, r6
   118a0:	bl	1097c <ftell@plt>
   118a4:	mov	r7, r0
   118a8:	movw	r0, #10000	; 0x2710
   118ac:	cmp	r7, r0
   118b0:	bhi	11950 <load_and_dump_schema@@Base+0xe4>
   118b4:	mov	r0, r6
   118b8:	bl	10988 <rewind@plt>
   118bc:	cmp	r7, #0
   118c0:	mov	r0, r7
   118c4:	movweq	r0, #1
   118c8:	bl	109ac <malloc@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	11950 <load_and_dump_schema@@Base+0xe4>
   118d4:	mov	r4, r0
   118d8:	mov	r1, #0
   118dc:	mov	r5, r1
   118e0:	add	r0, r4, r1
   118e4:	sub	r2, r7, r1
   118e8:	mov	r1, #1
   118ec:	mov	r3, r6
   118f0:	bl	10a00 <fread_unlocked@plt>
   118f4:	add	r1, r0, r5
   118f8:	cmp	r0, #0
   118fc:	bne	118dc <load_and_dump_schema@@Base+0x70>
   11900:	mov	r0, r6
   11904:	bl	109f4 <fclose@plt>
   11908:	cmp	r7, r5
   1190c:	bne	1195c <load_and_dump_schema@@Base+0xf0>
   11910:	cmp	r7, #11
   11914:	bls	1198c <load_and_dump_schema@@Base+0x120>
   11918:	mov	r5, r4
   1191c:	movw	r0, #17986	; 0x4642
   11920:	ldr	r6, [r5, #4]!
   11924:	movt	r0, #21314	; 0x5342
   11928:	cmp	r6, r0
   1192c:	bne	119ac <load_and_dump_schema@@Base+0x140>
   11930:	ldr	r0, [r4]
   11934:	add	r0, r4, r0
   11938:	bl	11564 <print_schema@@Base>
   1193c:	mov	r5, #0
   11940:	mov	r0, r4
   11944:	bl	10970 <free@plt>
   11948:	mov	r0, r5
   1194c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11950:	mov	r0, r6
   11954:	bl	109f4 <fclose@plt>
   11958:	b	11964 <load_and_dump_schema@@Base+0xf8>
   1195c:	mov	r0, r4
   11960:	bl	10970 <free@plt>
   11964:	ldr	r0, [pc, #176]	; 11a1c <load_and_dump_schema@@Base+0x1b0>
   11968:	mov	r2, r8
   1196c:	ldr	r0, [pc, r0]
   11970:	ldr	r0, [r0]
   11974:	ldr	r1, [pc, #164]	; 11a20 <load_and_dump_schema@@Base+0x1b4>
   11978:	add	r1, pc, r1
   1197c:	bl	109dc <fprintf@plt>
   11980:	mvn	r5, #0
   11984:	mov	r0, r5
   11988:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1198c:	ldr	r0, [pc, #120]	; 11a0c <load_and_dump_schema@@Base+0x1a0>
   11990:	mov	r2, r8
   11994:	ldr	r0, [pc, r0]
   11998:	ldr	r0, [r0]
   1199c:	ldr	r1, [pc, #108]	; 11a10 <load_and_dump_schema@@Base+0x1a4>
   119a0:	add	r1, pc, r1
   119a4:	bl	109dc <fprintf@plt>
   119a8:	b	11a00 <load_and_dump_schema@@Base+0x194>
   119ac:	ldr	r1, [r4, #8]
   119b0:	cmp	r1, r0
   119b4:	bne	119e0 <load_and_dump_schema@@Base+0x174>
   119b8:	ldr	r0, [pc, #84]	; 11a14 <load_and_dump_schema@@Base+0x1a8>
   119bc:	mov	r1, #40	; 0x28
   119c0:	mov	r2, #1
   119c4:	ldr	r0, [pc, r0]
   119c8:	ldr	r3, [r0]
   119cc:	ldr	r0, [pc, #68]	; 11a18 <load_and_dump_schema@@Base+0x1ac>
   119d0:	add	r0, pc, r0
   119d4:	bl	10994 <fwrite@plt>
   119d8:	add	r0, r5, r6
   119dc:	b	11938 <load_and_dump_schema@@Base+0xcc>
   119e0:	ldr	r0, [pc, #60]	; 11a24 <load_and_dump_schema@@Base+0x1b8>
   119e4:	mov	r1, #27
   119e8:	mov	r2, #1
   119ec:	ldr	r0, [pc, r0]
   119f0:	ldr	r3, [r0]
   119f4:	ldr	r0, [pc, #44]	; 11a28 <load_and_dump_schema@@Base+0x1bc>
   119f8:	add	r0, pc, r0
   119fc:	bl	10994 <fwrite@plt>
   11a00:	mvn	r5, #0
   11a04:	b	11940 <load_and_dump_schema@@Base+0xd4>
   11a08:	andeq	r0, r0, r9, lsl #22
   11a0c:			; <UNDEFINED> instruction: 0x000116b8
   11a10:	andeq	r0, r0, r3, lsl r3
   11a14:	andeq	r1, r1, r8, lsl #13
   11a18:	andeq	r0, r0, r3, lsl #6
   11a1c:	andeq	r1, r1, r0, ror #13
   11a20:	andeq	r0, r0, r2, lsl r3
   11a24:	andeq	r1, r1, r0, ror #12
   11a28:	andeq	r0, r0, r4, lsl #6

00011a2c <main@@Base>:
   11a2c:	cmp	r0, #2
   11a30:	bne	11a3c <main@@Base+0x10>
   11a34:	ldr	r0, [r1, #4]
   11a38:	b	1186c <load_and_dump_schema@@Base>
   11a3c:	push	{r4, sl, fp, lr}
   11a40:	add	fp, sp, #8
   11a44:	ldr	r4, [pc, #80]	; 11a9c <main@@Base+0x70>
   11a48:	mov	r1, #28
   11a4c:	mov	r2, #1
   11a50:	ldr	r4, [pc, r4]
   11a54:	ldr	r3, [r4]
   11a58:	ldr	r0, [pc, #64]	; 11aa0 <main@@Base+0x74>
   11a5c:	add	r0, pc, r0
   11a60:	bl	10994 <fwrite@plt>
   11a64:	ldr	r3, [r4]
   11a68:	ldr	r0, [pc, #52]	; 11aa4 <main@@Base+0x78>
   11a6c:	mov	r1, #74	; 0x4a
   11a70:	mov	r2, #1
   11a74:	add	r0, pc, r0
   11a78:	bl	10994 <fwrite@plt>
   11a7c:	ldr	r3, [r4]
   11a80:	ldr	r0, [pc, #32]	; 11aa8 <main@@Base+0x7c>
   11a84:	mov	r1, #180	; 0xb4
   11a88:	mov	r2, #1
   11a8c:	add	r0, pc, r0
   11a90:	bl	10994 <fwrite@plt>
   11a94:	mvn	r0, #0
   11a98:	bl	109d0 <exit@plt>
   11a9c:	strdeq	r1, [r1], -ip
   11aa0:			; <UNDEFINED> instruction: 0x000002bc
   11aa4:	andeq	r0, r0, r1, asr #5
   11aa8:	strdeq	r0, [r0], -r4

00011aac <__libc_csu_init@@Base>:
   11aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ab0:	mov	r7, r0
   11ab4:	ldr	r6, [pc, #72]	; 11b04 <__libc_csu_init@@Base+0x58>
   11ab8:	ldr	r5, [pc, #72]	; 11b08 <__libc_csu_init@@Base+0x5c>
   11abc:	add	r6, pc, r6
   11ac0:	add	r5, pc, r5
   11ac4:	sub	r6, r6, r5
   11ac8:	mov	r8, r1
   11acc:	mov	r9, r2
   11ad0:	bl	10938 <printf@plt-0x20>
   11ad4:	asrs	r6, r6, #2
   11ad8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11adc:	mov	r4, #0
   11ae0:	add	r4, r4, #1
   11ae4:	ldr	r3, [r5], #4
   11ae8:	mov	r2, r9
   11aec:	mov	r1, r8
   11af0:	mov	r0, r7
   11af4:	blx	r3
   11af8:	cmp	r6, r4
   11afc:	bne	11ae0 <__libc_csu_init@@Base+0x34>
   11b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b04:	strdeq	r1, [r1], -r8
   11b08:	strdeq	r1, [r1], -r0

00011b0c <__libc_csu_fini@@Base>:
   11b0c:	bx	lr

Disassembly of section .fini:

00011b10 <.fini>:
   11b10:	push	{r3, lr}
   11b14:	pop	{r3, pc}
