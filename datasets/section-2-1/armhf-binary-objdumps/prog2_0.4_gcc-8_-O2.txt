
../repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105bc <.init>:
   105bc:	push	{r3, lr}
   105c0:	bl	107d4 <_start@@Base+0x3c>
   105c4:	pop	{r3, pc}

Disassembly of section .plt:

000105c8 <printf@plt-0x14>:
   105c8:	push	{lr}		; (str lr, [sp, #-4]!)
   105cc:	ldr	lr, [pc, #4]	; 105d8 <printf@plt-0x4>
   105d0:	add	lr, pc, lr
   105d4:	ldr	pc, [lr, #8]!
   105d8:	andeq	r0, r1, r8, lsr #20

000105dc <printf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2600]!	; 0xa28

000105e8 <puts@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2592]!	; 0xa20

000105f4 <malloc@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2584]!	; 0xa18

00010600 <__libc_start_main@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2576]!	; 0xa10

0001060c <__gmon_start__@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2568]!	; 0xa08

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2560]!	; 0xa00

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

00010630 <main@@Base>:
   10630:	ldr	r0, [pc, #316]	; 10774 <main@@Base+0x144>
   10634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10638:	strd	r6, [sp, #8]
   1063c:	str	r8, [sp, #16]
   10640:	str	lr, [sp, #20]
   10644:	sub	sp, sp, #8
   10648:	add	r0, pc, r0
   1064c:	bl	105dc <printf@plt>
   10650:	ldr	r0, [pc, #288]	; 10778 <main@@Base+0x148>
   10654:	add	r1, sp, #4
   10658:	add	r0, pc, r0
   1065c:	bl	10618 <__isoc99_scanf@plt>
   10660:	ldr	r0, [sp, #4]
   10664:	cmp	r0, #100	; 0x64
   10668:	bgt	10758 <main@@Base+0x128>
   1066c:	lsl	r0, r0, #2
   10670:	bl	105f4 <malloc@plt>
   10674:	ldr	r1, [sp, #4]
   10678:	mov	r8, r0
   1067c:	cmp	r1, #0
   10680:	ble	106c8 <main@@Base+0x98>
   10684:	ldr	r7, [pc, #240]	; 1077c <main@@Base+0x14c>
   10688:	mov	r5, r0
   1068c:	mov	r4, #0
   10690:	ldr	r6, [pc, #232]	; 10780 <main@@Base+0x150>
   10694:	add	r7, pc, r7
   10698:	add	r6, pc, r6
   1069c:	add	r4, r4, #1
   106a0:	mov	r0, r7
   106a4:	mov	r1, r4
   106a8:	bl	105dc <printf@plt>
   106ac:	mov	r1, r5
   106b0:	mov	r0, r6
   106b4:	bl	10618 <__isoc99_scanf@plt>
   106b8:	ldr	r1, [sp, #4]
   106bc:	add	r5, r5, #4
   106c0:	cmp	r4, r1
   106c4:	blt	1069c <main@@Base+0x6c>
   106c8:	mov	r0, r8
   106cc:	bl	10888 <ordenado@@Base>
   106d0:	cmp	r0, #0
   106d4:	beq	10748 <main@@Base+0x118>
   106d8:	ldr	r0, [pc, #164]	; 10784 <main@@Base+0x154>
   106dc:	add	r0, pc, r0
   106e0:	bl	105dc <printf@plt>
   106e4:	ldr	r4, [sp, #4]
   106e8:	sub	r3, r4, #1
   106ec:	cmp	r3, #0
   106f0:	ble	1071c <main@@Base+0xec>
   106f4:	ldr	r6, [pc, #140]	; 10788 <main@@Base+0x158>
   106f8:	add	r4, r8, r4, lsl #2
   106fc:	add	r5, r8, #4
   10700:	add	r6, pc, r6
   10704:	ldr	r1, [r4, #-4]!
   10708:	mov	r0, r6
   1070c:	bl	105dc <printf@plt>
   10710:	cmp	r5, r4
   10714:	bne	10704 <main@@Base+0xd4>
   10718:	mov	r3, #0
   1071c:	ldr	r0, [pc, #104]	; 1078c <main@@Base+0x15c>
   10720:	ldr	r1, [r8, r3, lsl #2]
   10724:	add	r0, pc, r0
   10728:	bl	105dc <printf@plt>
   1072c:	mov	r0, #0
   10730:	add	sp, sp, #8
   10734:	ldrd	r4, [sp]
   10738:	ldrd	r6, [sp, #8]
   1073c:	ldr	r8, [sp, #16]
   10740:	add	sp, sp, #20
   10744:	pop	{pc}		; (ldr pc, [sp], #4)
   10748:	ldr	r0, [pc, #64]	; 10790 <main@@Base+0x160>
   1074c:	add	r0, pc, r0
   10750:	bl	105e8 <puts@plt>
   10754:	b	1072c <main@@Base+0xfc>
   10758:	ldr	r0, [pc, #52]	; 10794 <main@@Base+0x164>
   1075c:	add	r0, pc, r0
   10760:	bl	105dc <printf@plt>
   10764:	mov	r3, #100	; 0x64
   10768:	mov	r0, r3
   1076c:	str	r3, [sp, #4]
   10770:	b	1066c <main@@Base+0x3c>
   10774:	strdeq	r0, [r0], -r8
   10778:	andeq	r0, r0, ip, lsl #6
   1077c:	andeq	r0, r0, r4, lsl #6
   10780:	andeq	r0, r0, ip, asr #5
   10784:	ldrdeq	r0, [r0], -r4
   10788:	strdeq	r0, [r0], -r4
   1078c:	ldrdeq	r0, [r0], -r4
   10790:			; <UNDEFINED> instruction: 0x000002b4
   10794:	andeq	r0, r0, ip, lsl #4

00010798 <_start@@Base>:
   10798:	mov	fp, #0
   1079c:	mov	lr, #0
   107a0:	pop	{r1}		; (ldr r1, [sp], #4)
   107a4:	mov	r2, sp
   107a8:	push	{r2}		; (str r2, [sp, #-4]!)
   107ac:	push	{r0}		; (str r0, [sp, #-4]!)
   107b0:	ldr	ip, [pc, #16]	; 107c8 <_start@@Base+0x30>
   107b4:	push	{ip}		; (str ip, [sp, #-4]!)
   107b8:	ldr	r0, [pc, #12]	; 107cc <_start@@Base+0x34>
   107bc:	ldr	r3, [pc, #12]	; 107d0 <_start@@Base+0x38>
   107c0:	bl	10600 <__libc_start_main@plt>
   107c4:	bl	10624 <abort@plt>
   107c8:	andeq	r0, r1, r8, lsr r9
   107cc:	andeq	r0, r1, r0, lsr r6
   107d0:	ldrdeq	r0, [r1], -r8
   107d4:	ldr	r3, [pc, #20]	; 107f0 <_start@@Base+0x58>
   107d8:	ldr	r2, [pc, #20]	; 107f4 <_start@@Base+0x5c>
   107dc:	add	r3, pc, r3
   107e0:	ldr	r2, [r3, r2]
   107e4:	cmp	r2, #0
   107e8:	bxeq	lr
   107ec:	b	1060c <__gmon_start__@plt>
   107f0:	andeq	r0, r1, ip, lsl r8
   107f4:	andeq	r0, r0, r8, lsr #32
   107f8:	ldr	r0, [pc, #24]	; 10818 <_start@@Base+0x80>
   107fc:	ldr	r3, [pc, #24]	; 1081c <_start@@Base+0x84>
   10800:	cmp	r3, r0
   10804:	bxeq	lr
   10808:	ldr	r3, [pc, #16]	; 10820 <_start@@Base+0x88>
   1080c:	cmp	r3, #0
   10810:	bxeq	lr
   10814:	bx	r3
   10818:	andeq	r1, r2, r4, lsr r0
   1081c:	andeq	r1, r2, r4, lsr r0
   10820:	andeq	r0, r0, r0
   10824:	ldr	r0, [pc, #36]	; 10850 <_start@@Base+0xb8>
   10828:	ldr	r1, [pc, #36]	; 10854 <_start@@Base+0xbc>
   1082c:	sub	r1, r1, r0
   10830:	asr	r1, r1, #2
   10834:	add	r1, r1, r1, lsr #31
   10838:	asrs	r1, r1, #1
   1083c:	bxeq	lr
   10840:	ldr	r3, [pc, #16]	; 10858 <_start@@Base+0xc0>
   10844:	cmp	r3, #0
   10848:	bxeq	lr
   1084c:	bx	r3
   10850:	andeq	r1, r2, r4, lsr r0
   10854:	andeq	r1, r2, r4, lsr r0
   10858:	andeq	r0, r0, r0
   1085c:	push	{r4, lr}
   10860:	ldr	r4, [pc, #24]	; 10880 <_start@@Base+0xe8>
   10864:	ldrb	r3, [r4]
   10868:	cmp	r3, #0
   1086c:	popne	{r4, pc}
   10870:	bl	107f8 <_start@@Base+0x60>
   10874:	mov	r3, #1
   10878:	strb	r3, [r4]
   1087c:	pop	{r4, pc}
   10880:	andeq	r1, r2, r4, lsr r0
   10884:	b	10824 <_start@@Base+0x8c>

00010888 <ordenado@@Base>:
   10888:	cmp	r1, #1
   1088c:	ldr	r3, [r0]
   10890:	ble	108c8 <ordenado@@Base+0x40>
   10894:	ldr	ip, [r0, #4]
   10898:	cmp	r3, ip
   1089c:	bgt	108d0 <ordenado@@Base+0x48>
   108a0:	add	r0, r0, #4
   108a4:	mov	r3, #1
   108a8:	b	108bc <ordenado@@Base+0x34>
   108ac:	ldr	r2, [r0, #4]!
   108b0:	cmp	r2, ip
   108b4:	mov	ip, r2
   108b8:	blt	108d0 <ordenado@@Base+0x48>
   108bc:	add	r3, r3, #1
   108c0:	cmp	r1, r3
   108c4:	bne	108ac <ordenado@@Base+0x24>
   108c8:	mov	r0, #1
   108cc:	bx	lr
   108d0:	mov	r0, #0
   108d4:	bx	lr

000108d8 <__libc_csu_init@@Base>:
   108d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108dc:	mov	r7, r0
   108e0:	ldr	r6, [pc, #72]	; 10930 <__libc_csu_init@@Base+0x58>
   108e4:	ldr	r5, [pc, #72]	; 10934 <__libc_csu_init@@Base+0x5c>
   108e8:	add	r6, pc, r6
   108ec:	add	r5, pc, r5
   108f0:	sub	r6, r6, r5
   108f4:	mov	r8, r1
   108f8:	mov	r9, r2
   108fc:	bl	105bc <printf@plt-0x20>
   10900:	asrs	r6, r6, #2
   10904:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10908:	mov	r4, #0
   1090c:	add	r4, r4, #1
   10910:	ldr	r3, [r5], #4
   10914:	mov	r2, r9
   10918:	mov	r1, r8
   1091c:	mov	r0, r7
   10920:	blx	r3
   10924:	cmp	r6, r4
   10928:	bne	1090c <__libc_csu_init@@Base+0x34>
   1092c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10930:	andeq	r0, r1, r4, lsr #12
   10934:	andeq	r0, r1, ip, lsl r6

00010938 <__libc_csu_fini@@Base>:
   10938:	bx	lr

Disassembly of section .fini:

0001093c <.fini>:
   1093c:	push	{r3, lr}
   10940:	pop	{r3, pc}
