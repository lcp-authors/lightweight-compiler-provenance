
../repos/prog2/0.9:     file format elf32-littlearm


Disassembly of section .init:

0001063c <.init>:
   1063c:	push	{r3, lr}
   10640:	bl	107b4 <_start@@Base+0x3c>
   10644:	pop	{r3, pc}

Disassembly of section .plt:

00010648 <strcmp@plt-0x14>:
   10648:	push	{lr}		; (str lr, [sp, #-4]!)
   1064c:	ldr	lr, [pc, #4]	; 10658 <strcmp@plt-0x4>
   10650:	add	lr, pc, lr
   10654:	ldr	pc, [lr, #8]!
   10658:	andeq	r0, r1, r8, lsr #19

0001065c <strcmp@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2472]!	; 0x9a8

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2464]!	; 0x9a0

00010674 <strcpy@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2456]!	; 0x998

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2448]!	; 0x990

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2440]!	; 0x988

00010698 <strlen@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2432]!	; 0x980

000106a4 <__isoc99_scanf@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2424]!	; 0x978

000106b0 <abort@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2416]!	; 0x970

Disassembly of section .text:

000106bc <main@@Base>:
   106bc:	strd	r4, [sp, #-16]!
   106c0:	str	r6, [sp, #8]
   106c4:	str	lr, [sp, #12]
   106c8:	sub	sp, sp, #20736	; 0x5100
   106cc:	sub	sp, sp, #64	; 0x40
   106d0:	ldr	r6, [pc, #144]	; 10768 <main@@Base+0xac>
   106d4:	mov	r4, sp
   106d8:	mov	r0, r4
   106dc:	bl	10868 <ler_albuns@@Base>
   106e0:	mov	r5, r0
   106e4:	mov	r1, r0
   106e8:	mov	r0, r4
   106ec:	add	r6, pc, r6
   106f0:	bl	1092c <lista_albuns@@Base>
   106f4:	ldr	r0, [pc, #112]	; 1076c <main@@Base+0xb0>
   106f8:	mov	r1, r5
   106fc:	add	r0, pc, r0
   10700:	bl	10668 <printf@plt>
   10704:	mov	r2, r6
   10708:	mov	r1, r5
   1070c:	mov	r3, #1
   10710:	mov	r0, r4
   10714:	bl	10998 <albuns_artista@@Base>
   10718:	mov	r1, r0
   1071c:	ldr	r0, [pc, #76]	; 10770 <main@@Base+0xb4>
   10720:	add	r0, pc, r0
   10724:	bl	10668 <printf@plt>
   10728:	mov	r2, r6
   1072c:	mov	r1, r5
   10730:	mov	r3, #0
   10734:	mov	r0, r4
   10738:	bl	10998 <albuns_artista@@Base>
   1073c:	mov	r1, r0
   10740:	ldr	r0, [pc, #44]	; 10774 <main@@Base+0xb8>
   10744:	add	r0, pc, r0
   10748:	bl	10668 <printf@plt>
   1074c:	mov	r0, #0
   10750:	add	sp, sp, #20736	; 0x5100
   10754:	add	sp, sp, #64	; 0x40
   10758:	ldrd	r4, [sp]
   1075c:	ldr	r6, [sp, #8]
   10760:	add	sp, sp, #12
   10764:	pop	{pc}		; (ldr pc, [sp], #4)
   10768:	andeq	r0, r0, r4, lsl r4
   1076c:	andeq	r0, r0, r4, ror #7
   10770:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10774:	andeq	r0, r0, r4, lsl #8

00010778 <_start@@Base>:
   10778:	mov	fp, #0
   1077c:	mov	lr, #0
   10780:	pop	{r1}		; (ldr r1, [sp], #4)
   10784:	mov	r2, sp
   10788:	push	{r2}		; (str r2, [sp, #-4]!)
   1078c:	push	{r0}		; (str r0, [sp, #-4]!)
   10790:	ldr	ip, [pc, #16]	; 107a8 <_start@@Base+0x30>
   10794:	push	{ip}		; (str ip, [sp, #-4]!)
   10798:	ldr	r0, [pc, #12]	; 107ac <_start@@Base+0x34>
   1079c:	ldr	r3, [pc, #12]	; 107b0 <_start@@Base+0x38>
   107a0:	bl	10680 <__libc_start_main@plt>
   107a4:	bl	106b0 <abort@plt>
   107a8:			; <UNDEFINED> instruction: 0x00010ab8
   107ac:			; <UNDEFINED> instruction: 0x000106bc
   107b0:	andeq	r0, r1, r8, asr sl
   107b4:	ldr	r3, [pc, #20]	; 107d0 <_start@@Base+0x58>
   107b8:	ldr	r2, [pc, #20]	; 107d4 <_start@@Base+0x5c>
   107bc:	add	r3, pc, r3
   107c0:	ldr	r2, [r3, r2]
   107c4:	cmp	r2, #0
   107c8:	bxeq	lr
   107cc:	b	1068c <__gmon_start__@plt>
   107d0:	andeq	r0, r1, ip, lsr r8
   107d4:	andeq	r0, r0, ip, lsr #32
   107d8:	ldr	r0, [pc, #24]	; 107f8 <_start@@Base+0x80>
   107dc:	ldr	r3, [pc, #24]	; 107fc <_start@@Base+0x84>
   107e0:	cmp	r3, r0
   107e4:	bxeq	lr
   107e8:	ldr	r3, [pc, #16]	; 10800 <_start@@Base+0x88>
   107ec:	cmp	r3, #0
   107f0:	bxeq	lr
   107f4:	bx	r3
   107f8:	andeq	r1, r2, r8, lsr r0
   107fc:	andeq	r1, r2, r8, lsr r0
   10800:	andeq	r0, r0, r0
   10804:	ldr	r0, [pc, #36]	; 10830 <_start@@Base+0xb8>
   10808:	ldr	r1, [pc, #36]	; 10834 <_start@@Base+0xbc>
   1080c:	sub	r1, r1, r0
   10810:	asr	r1, r1, #2
   10814:	add	r1, r1, r1, lsr #31
   10818:	asrs	r1, r1, #1
   1081c:	bxeq	lr
   10820:	ldr	r3, [pc, #16]	; 10838 <_start@@Base+0xc0>
   10824:	cmp	r3, #0
   10828:	bxeq	lr
   1082c:	bx	r3
   10830:	andeq	r1, r2, r8, lsr r0
   10834:	andeq	r1, r2, r8, lsr r0
   10838:	andeq	r0, r0, r0
   1083c:	push	{r4, lr}
   10840:	ldr	r4, [pc, #24]	; 10860 <_start@@Base+0xe8>
   10844:	ldrb	r3, [r4]
   10848:	cmp	r3, #0
   1084c:	popne	{r4, pc}
   10850:	bl	107d8 <_start@@Base+0x60>
   10854:	mov	r3, #1
   10858:	strb	r3, [r4]
   1085c:	pop	{r4, pc}
   10860:	andeq	r1, r2, r8, lsr r0
   10864:	b	10804 <_start@@Base+0x8c>

00010868 <ler_albuns@@Base>:
   10868:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1086c:	mov	r3, #0
   10870:	mov	r4, r0
   10874:	strd	r6, [sp, #8]
   10878:	mov	r6, r3
   1087c:	strd	r8, [sp, #16]
   10880:	mov	r9, #32
   10884:	ldr	r8, [pc, #156]	; 10928 <ler_albuns@@Base+0xc0>
   10888:	str	lr, [sp, #24]
   1088c:	sub	sp, sp, #28
   10890:	add	r7, sp, #8
   10894:	str	r3, [r7, #4]
   10898:	str	r3, [r7, #8]
   1089c:	add	r8, pc, r8
   108a0:	str	r3, [sp, #8]
   108a4:	str	r3, [r7, #11]
   108a8:	b	108d4 <ler_albuns@@Base+0x6c>
   108ac:	cmp	r6, #100	; 0x64
   108b0:	beq	1090c <ler_albuns@@Base+0xa4>
   108b4:	bl	10698 <strlen@plt>
   108b8:	mov	r3, r0
   108bc:	add	r0, r0, #1
   108c0:	mov	r1, r7
   108c4:	add	r0, r5, r0
   108c8:	strb	r9, [r5, r3]
   108cc:	add	r6, r6, #1
   108d0:	bl	10674 <strcpy@plt>
   108d4:	add	ip, r4, #204	; 0xcc
   108d8:	add	lr, r4, #200	; 0xc8
   108dc:	add	r3, r4, #100	; 0x64
   108e0:	mov	r1, r4
   108e4:	mov	r2, r7
   108e8:	mov	r0, r8
   108ec:	str	lr, [sp]
   108f0:	str	ip, [sp, #4]
   108f4:	mov	r5, r4
   108f8:	add	r4, r4, #208	; 0xd0
   108fc:	bl	106a4 <__isoc99_scanf@plt>
   10900:	cmp	r0, #5
   10904:	mov	r0, r5
   10908:	beq	108ac <ler_albuns@@Base+0x44>
   1090c:	mov	r0, r6
   10910:	add	sp, sp, #28
   10914:	ldrd	r4, [sp]
   10918:	ldrd	r6, [sp, #8]
   1091c:	ldrd	r8, [sp, #16]
   10920:	add	sp, sp, #24
   10924:	pop	{pc}		; (ldr pc, [sp], #4)
   10928:	andeq	r0, r0, r4, lsr #4

0001092c <lista_albuns@@Base>:
   1092c:	strd	r4, [sp, #-16]!
   10930:	subs	r5, r1, #0
   10934:	str	r6, [sp, #8]
   10938:	str	lr, [sp, #12]
   1093c:	sub	sp, sp, #8
   10940:	ble	10980 <lista_albuns@@Base+0x54>
   10944:	ldr	r6, [pc, #72]	; 10994 <lista_albuns@@Base+0x68>
   10948:	mov	r1, #208	; 0xd0
   1094c:	mov	r4, r0
   10950:	mla	r5, r1, r5, r0
   10954:	add	r6, pc, r6
   10958:	add	r2, r4, #100	; 0x64
   1095c:	mov	r1, r4
   10960:	ldr	r3, [r4, #200]	; 0xc8
   10964:	mov	r0, r6
   10968:	add	r4, r4, #208	; 0xd0
   1096c:	ldr	ip, [r4, #-4]
   10970:	str	ip, [sp]
   10974:	bl	10668 <printf@plt>
   10978:	cmp	r4, r5
   1097c:	bne	10958 <lista_albuns@@Base+0x2c>
   10980:	add	sp, sp, #8
   10984:	ldrd	r4, [sp]
   10988:	ldr	r6, [sp, #8]
   1098c:	add	sp, sp, #12
   10990:	pop	{pc}		; (ldr pc, [sp], #4)
   10994:	andeq	r0, r0, ip, ror r1

00010998 <albuns_artista@@Base>:
   10998:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1099c:	strd	r6, [sp, #8]
   109a0:	mov	r6, r2
   109a4:	str	r8, [sp, #16]
   109a8:	subs	r8, r3, #0
   109ac:	str	lr, [sp, #20]
   109b0:	beq	10a14 <albuns_artista@@Base+0x7c>
   109b4:	cmp	r1, #0
   109b8:	movle	r7, #0
   109bc:	ble	109fc <albuns_artista@@Base+0x64>
   109c0:	mov	r5, #208	; 0xd0
   109c4:	mov	r4, r0
   109c8:	mov	r7, #0
   109cc:	mla	r5, r5, r1, r0
   109d0:	mov	r1, r4
   109d4:	mov	r0, r6
   109d8:	bl	1065c <strcmp@plt>
   109dc:	cmp	r0, #0
   109e0:	bne	109f0 <albuns_artista@@Base+0x58>
   109e4:	ldr	r3, [r4, #204]	; 0xcc
   109e8:	cmp	r8, r3
   109ec:	addeq	r7, r7, #1
   109f0:	add	r4, r4, #208	; 0xd0
   109f4:	cmp	r5, r4
   109f8:	bne	109d0 <albuns_artista@@Base+0x38>
   109fc:	mov	r0, r7
   10a00:	ldrd	r4, [sp]
   10a04:	ldrd	r6, [sp, #8]
   10a08:	ldr	r8, [sp, #16]
   10a0c:	add	sp, sp, #20
   10a10:	pop	{pc}		; (ldr pc, [sp], #4)
   10a14:	cmp	r1, #0
   10a18:	ble	10a50 <albuns_artista@@Base+0xb8>
   10a1c:	mov	r5, #208	; 0xd0
   10a20:	mov	r4, r0
   10a24:	mov	r7, r8
   10a28:	mla	r5, r5, r1, r0
   10a2c:	mov	r1, r4
   10a30:	mov	r0, r6
   10a34:	bl	1065c <strcmp@plt>
   10a38:	cmp	r0, #0
   10a3c:	add	r4, r4, #208	; 0xd0
   10a40:	addeq	r7, r7, #1
   10a44:	cmp	r5, r4
   10a48:	bne	10a2c <albuns_artista@@Base+0x94>
   10a4c:	b	109fc <albuns_artista@@Base+0x64>
   10a50:	mov	r7, r8
   10a54:	b	109fc <albuns_artista@@Base+0x64>

00010a58 <__libc_csu_init@@Base>:
   10a58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a5c:	mov	r7, r0
   10a60:	ldr	r6, [pc, #72]	; 10ab0 <__libc_csu_init@@Base+0x58>
   10a64:	ldr	r5, [pc, #72]	; 10ab4 <__libc_csu_init@@Base+0x5c>
   10a68:	add	r6, pc, r6
   10a6c:	add	r5, pc, r5
   10a70:	sub	r6, r6, r5
   10a74:	mov	r8, r1
   10a78:	mov	r9, r2
   10a7c:	bl	1063c <strcmp@plt-0x20>
   10a80:	asrs	r6, r6, #2
   10a84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a88:	mov	r4, #0
   10a8c:	add	r4, r4, #1
   10a90:	ldr	r3, [r5], #4
   10a94:	mov	r2, r9
   10a98:	mov	r1, r8
   10a9c:	mov	r0, r7
   10aa0:	blx	r3
   10aa4:	cmp	r6, r4
   10aa8:	bne	10a8c <__libc_csu_init@@Base+0x34>
   10aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab0:	andeq	r0, r1, r4, lsr #9
   10ab4:	muleq	r1, ip, r4

00010ab8 <__libc_csu_fini@@Base>:
   10ab8:	bx	lr

Disassembly of section .fini:

00010abc <.fini>:
   10abc:	push	{r3, lr}
   10ac0:	pop	{r3, pc}
