
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

00010478 <.init>:
   10478:	push	{r3, lr}
   1047c:	bl	10540 <strcmp@plt+0x48>
   10480:	pop	{r3, pc}

Disassembly of section .plt:

00010484 <abort@plt-0x14>:
   10484:	push	{lr}		; (str lr, [sp, #-4]!)
   10488:	ldr	lr, [pc, #4]	; 10494 <abort@plt-0x4>
   1048c:	add	lr, pc, lr
   10490:	ldr	pc, [lr, #8]!
   10494:	andeq	r0, r1, ip, ror #22

00010498 <abort@plt>:
   10498:	add	ip, pc, #0, 12
   1049c:	add	ip, ip, #16, 20	; 0x10000
   104a0:	ldr	pc, [ip, #2924]!	; 0xb6c

000104a4 <__libc_start_main@plt>:
   104a4:	add	ip, pc, #0, 12
   104a8:	add	ip, ip, #16, 20	; 0x10000
   104ac:	ldr	pc, [ip, #2916]!	; 0xb64

000104b0 <__gmon_start__@plt>:
   104b0:	add	ip, pc, #0, 12
   104b4:	add	ip, ip, #16, 20	; 0x10000
   104b8:	ldr	pc, [ip, #2908]!	; 0xb5c

000104bc <memset@plt>:
   104bc:	add	ip, pc, #0, 12
   104c0:	add	ip, ip, #16, 20	; 0x10000
   104c4:	ldr	pc, [ip, #2900]!	; 0xb54

000104c8 <perror@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2892]!	; 0xb4c

000104d4 <printf@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2884]!	; 0xb44

000104e0 <fprintf@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2876]!	; 0xb3c

000104ec <rb_get_ssl_certfp_file@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2868]!	; 0xb34

000104f8 <strcmp@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2860]!	; 0xb2c

Disassembly of section .text:

00010504 <.text>:
   10504:	mov	fp, #0
   10508:	mov	lr, #0
   1050c:	pop	{r1}		; (ldr r1, [sp], #4)
   10510:	mov	r2, sp
   10514:	push	{r2}		; (str r2, [sp, #-4]!)
   10518:	push	{r0}		; (str r0, [sp, #-4]!)
   1051c:	ldr	ip, [pc, #16]	; 10534 <strcmp@plt+0x3c>
   10520:	push	{ip}		; (str ip, [sp, #-4]!)
   10524:	ldr	r0, [pc, #12]	; 10538 <strcmp@plt+0x40>
   10528:	ldr	r3, [pc, #12]	; 1053c <strcmp@plt+0x44>
   1052c:	bl	104a4 <__libc_start_main@plt>
   10530:	bl	10498 <abort@plt>
   10534:	andeq	r0, r1, r4, lsl r9
   10538:	strdeq	r0, [r1], -r4
   1053c:			; <UNDEFINED> instruction: 0x000108b4
   10540:	ldr	r3, [pc, #20]	; 1055c <strcmp@plt+0x64>
   10544:	ldr	r2, [pc, #20]	; 10560 <strcmp@plt+0x68>
   10548:	add	r3, pc, r3
   1054c:	ldr	r2, [r3, r2]
   10550:	cmp	r2, #0
   10554:	bxeq	lr
   10558:	b	104b0 <__gmon_start__@plt>
   1055c:			; <UNDEFINED> instruction: 0x00010ab0
   10560:	andeq	r0, r0, r0, lsr r0
   10564:	ldr	r0, [pc, #24]	; 10584 <strcmp@plt+0x8c>
   10568:	ldr	r3, [pc, #24]	; 10588 <strcmp@plt+0x90>
   1056c:	cmp	r3, r0
   10570:	bxeq	lr
   10574:	ldr	r3, [pc, #16]	; 1058c <strcmp@plt+0x94>
   10578:	cmp	r3, #0
   1057c:	bxeq	lr
   10580:	bx	r3
   10584:	andeq	r1, r2, r0, asr #32
   10588:	andeq	r1, r2, r0, asr #32
   1058c:	andeq	r0, r0, r0
   10590:	ldr	r0, [pc, #36]	; 105bc <strcmp@plt+0xc4>
   10594:	ldr	r1, [pc, #36]	; 105c0 <strcmp@plt+0xc8>
   10598:	sub	r1, r1, r0
   1059c:	asr	r1, r1, #2
   105a0:	add	r1, r1, r1, lsr #31
   105a4:	asrs	r1, r1, #1
   105a8:	bxeq	lr
   105ac:	ldr	r3, [pc, #16]	; 105c4 <strcmp@plt+0xcc>
   105b0:	cmp	r3, #0
   105b4:	bxeq	lr
   105b8:	bx	r3
   105bc:	andeq	r1, r2, r0, asr #32
   105c0:	andeq	r1, r2, r0, asr #32
   105c4:	andeq	r0, r0, r0
   105c8:	push	{r4, lr}
   105cc:	ldr	r4, [pc, #24]	; 105ec <strcmp@plt+0xf4>
   105d0:	ldrb	r3, [r4]
   105d4:	cmp	r3, #0
   105d8:	popne	{r4, pc}
   105dc:	bl	10564 <strcmp@plt+0x6c>
   105e0:	mov	r3, #1
   105e4:	strb	r3, [r4]
   105e8:	pop	{r4, pc}
   105ec:	andeq	r1, r2, r0, asr #32
   105f0:	b	10590 <strcmp@plt+0x98>
   105f4:	push	{fp, lr}
   105f8:	mov	fp, sp
   105fc:	sub	sp, sp, #112	; 0x70
   10600:	movw	r2, #0
   10604:	str	r2, [fp, #-4]
   10608:	str	r0, [fp, #-8]
   1060c:	str	r1, [fp, #-12]
   10610:	add	r0, sp, #35	; 0x23
   10614:	movw	r1, #0
   10618:	and	r1, r1, #255	; 0xff
   1061c:	movw	r2, #65	; 0x41
   10620:	bl	104bc <memset@plt>
   10624:	ldr	r0, [fp, #-8]
   10628:	cmp	r0, #3
   1062c:	beq	1065c <strcmp@plt+0x164>
   10630:	ldr	r0, [pc, #612]	; 1089c <strcmp@plt+0x3a4>
   10634:	add	r0, pc, r0
   10638:	bl	104d4 <printf@plt>
   1063c:	ldr	r1, [pc, #596]	; 10898 <strcmp@plt+0x3a0>
   10640:	add	r1, pc, r1
   10644:	str	r0, [sp, #4]
   10648:	mov	r0, r1
   1064c:	bl	104d4 <printf@plt>
   10650:	movw	r1, #1
   10654:	str	r1, [fp, #-4]
   10658:	b	10860 <strcmp@plt+0x368>
   1065c:	ldr	r0, [fp, #-12]
   10660:	ldr	r0, [r0, #4]
   10664:	str	r0, [sp, #28]
   10668:	ldr	r0, [fp, #-12]
   1066c:	ldr	r0, [r0, #8]
   10670:	str	r0, [sp, #24]
   10674:	ldr	r0, [sp, #28]
   10678:	ldr	r1, [pc, #544]	; 108a0 <strcmp@plt+0x3a8>
   1067c:	add	r1, pc, r1
   10680:	bl	104f8 <strcmp@plt>
   10684:	cmp	r0, #0
   10688:	bne	106a4 <strcmp@plt+0x1ac>
   1068c:	ldr	r0, [pc, #472]	; 1086c <strcmp@plt+0x374>
   10690:	add	r0, pc, r0
   10694:	movw	r1, #0
   10698:	str	r1, [sp, #20]
   1069c:	str	r0, [sp, #16]
   106a0:	b	10790 <strcmp@plt+0x298>
   106a4:	ldr	r0, [sp, #28]
   106a8:	ldr	r1, [pc, #500]	; 108a4 <strcmp@plt+0x3ac>
   106ac:	add	r1, pc, r1
   106b0:	bl	104f8 <strcmp@plt>
   106b4:	cmp	r0, #0
   106b8:	bne	106d4 <strcmp@plt+0x1dc>
   106bc:	ldr	r0, [pc, #428]	; 10870 <strcmp@plt+0x378>
   106c0:	add	r0, pc, r0
   106c4:	movw	r1, #1
   106c8:	str	r1, [sp, #20]
   106cc:	str	r0, [sp, #16]
   106d0:	b	1078c <strcmp@plt+0x294>
   106d4:	ldr	r0, [sp, #28]
   106d8:	ldr	r1, [pc, #456]	; 108a8 <strcmp@plt+0x3b0>
   106dc:	add	r1, pc, r1
   106e0:	bl	104f8 <strcmp@plt>
   106e4:	cmp	r0, #0
   106e8:	bne	10704 <strcmp@plt+0x20c>
   106ec:	ldr	r0, [pc, #384]	; 10874 <strcmp@plt+0x37c>
   106f0:	add	r0, pc, r0
   106f4:	movw	r1, #2
   106f8:	str	r1, [sp, #20]
   106fc:	str	r0, [sp, #16]
   10700:	b	10788 <strcmp@plt+0x290>
   10704:	ldr	r0, [sp, #28]
   10708:	ldr	r1, [pc, #412]	; 108ac <strcmp@plt+0x3b4>
   1070c:	add	r1, pc, r1
   10710:	bl	104f8 <strcmp@plt>
   10714:	cmp	r0, #0
   10718:	bne	10734 <strcmp@plt+0x23c>
   1071c:	ldr	r0, [pc, #340]	; 10878 <strcmp@plt+0x380>
   10720:	add	r0, pc, r0
   10724:	movw	r1, #4097	; 0x1001
   10728:	str	r1, [sp, #20]
   1072c:	str	r0, [sp, #16]
   10730:	b	10784 <strcmp@plt+0x28c>
   10734:	ldr	r0, [sp, #28]
   10738:	ldr	r1, [pc, #368]	; 108b0 <strcmp@plt+0x3b8>
   1073c:	add	r1, pc, r1
   10740:	bl	104f8 <strcmp@plt>
   10744:	cmp	r0, #0
   10748:	bne	10764 <strcmp@plt+0x26c>
   1074c:	ldr	r0, [pc, #296]	; 1087c <strcmp@plt+0x384>
   10750:	add	r0, pc, r0
   10754:	movw	r1, #4098	; 0x1002
   10758:	str	r1, [sp, #20]
   1075c:	str	r0, [sp, #16]
   10760:	b	10780 <strcmp@plt+0x288>
   10764:	ldr	r0, [pc, #296]	; 10894 <strcmp@plt+0x39c>
   10768:	add	r0, pc, r0
   1076c:	ldr	r1, [sp, #28]
   10770:	bl	104d4 <printf@plt>
   10774:	movw	r1, #1
   10778:	str	r1, [fp, #-4]
   1077c:	b	10860 <strcmp@plt+0x368>
   10780:	b	10784 <strcmp@plt+0x28c>
   10784:	b	10788 <strcmp@plt+0x290>
   10788:	b	1078c <strcmp@plt+0x294>
   1078c:	b	10790 <strcmp@plt+0x298>
   10790:	add	r1, sp, #35	; 0x23
   10794:	ldr	r0, [sp, #24]
   10798:	ldr	r2, [sp, #20]
   1079c:	bl	104ec <rb_get_ssl_certfp_file@plt>
   107a0:	str	r0, [sp, #12]
   107a4:	ldr	r0, [sp, #12]
   107a8:	cmp	r0, #0
   107ac:	bge	107c4 <strcmp@plt+0x2cc>
   107b0:	ldr	r0, [sp, #24]
   107b4:	bl	104c8 <perror@plt>
   107b8:	movw	r0, #1
   107bc:	str	r0, [fp, #-4]
   107c0:	b	10860 <strcmp@plt+0x368>
   107c4:	ldr	r0, [sp, #12]
   107c8:	cmp	r0, #0
   107cc:	bne	107f4 <strcmp@plt+0x2fc>
   107d0:	ldr	r0, [pc, #180]	; 1088c <strcmp@plt+0x394>
   107d4:	add	r1, pc, r0
   107d8:	ldr	r0, [pc, #176]	; 10890 <strcmp@plt+0x398>
   107dc:	ldr	r0, [pc, r0]
   107e0:	ldr	r0, [r0]
   107e4:	bl	104e0 <fprintf@plt>
   107e8:	movw	r1, #1
   107ec:	str	r1, [fp, #-4]
   107f0:	b	10860 <strcmp@plt+0x368>
   107f4:	b	107f8 <strcmp@plt+0x300>
   107f8:	ldr	r0, [pc, #128]	; 10880 <strcmp@plt+0x388>
   107fc:	add	r0, pc, r0
   10800:	ldr	r1, [sp, #16]
   10804:	bl	104d4 <printf@plt>
   10808:	movw	r1, #0
   1080c:	str	r1, [sp, #8]
   10810:	ldr	r0, [sp, #8]
   10814:	ldr	r1, [sp, #12]
   10818:	cmp	r0, r1
   1081c:	bge	1084c <strcmp@plt+0x354>
   10820:	ldr	r0, [pc, #96]	; 10888 <strcmp@plt+0x390>
   10824:	add	r0, pc, r0
   10828:	ldr	r1, [sp, #8]
   1082c:	add	r2, sp, #35	; 0x23
   10830:	add	r1, r2, r1
   10834:	ldrb	r1, [r1]
   10838:	bl	104d4 <printf@plt>
   1083c:	ldr	r0, [sp, #8]
   10840:	add	r0, r0, #1
   10844:	str	r0, [sp, #8]
   10848:	b	10810 <strcmp@plt+0x318>
   1084c:	ldr	r0, [pc, #48]	; 10884 <strcmp@plt+0x38c>
   10850:	add	r0, pc, r0
   10854:	bl	104d4 <printf@plt>
   10858:	movw	r1, #0
   1085c:	str	r1, [fp, #-4]
   10860:	ldr	r0, [fp, #-4]
   10864:	mov	sp, fp
   10868:	pop	{fp, pc}
   1086c:	andeq	r0, r0, pc, ror #5
   10870:			; <UNDEFINED> instruction: 0x000002bf
   10874:	andeq	r0, r0, pc, lsl #5
   10878:	andeq	r0, r0, r1, ror r2
   1087c:	andeq	r0, r0, ip, asr r2
   10880:	andeq	r0, r0, r2, ror #3
   10884:	andeq	r0, r0, lr, lsr #2
   10888:			; <UNDEFINED> instruction: 0x000001bd
   1088c:	strdeq	r0, [r0], -fp
   10890:	andeq	r0, r1, r0, asr r8
   10894:	andeq	r0, r0, r3, asr r2
   10898:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1089c:	andeq	r0, r0, r8, ror #5
   108a0:	andeq	r0, r0, r4, lsl #6
   108a4:	ldrdeq	r0, [r0], -lr
   108a8:	andeq	r0, r0, r9, asr #5
   108ac:	andeq	r0, r0, r9, ror r2
   108b0:	andeq	r0, r0, r4, ror #4
   108b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108b8:	mov	r7, r0
   108bc:	ldr	r6, [pc, #72]	; 1090c <strcmp@plt+0x414>
   108c0:	ldr	r5, [pc, #72]	; 10910 <strcmp@plt+0x418>
   108c4:	add	r6, pc, r6
   108c8:	add	r5, pc, r5
   108cc:	sub	r6, r6, r5
   108d0:	mov	r8, r1
   108d4:	mov	r9, r2
   108d8:	bl	10478 <abort@plt-0x20>
   108dc:	asrs	r6, r6, #2
   108e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e4:	mov	r4, #0
   108e8:	add	r4, r4, #1
   108ec:	ldr	r3, [r5], #4
   108f0:	mov	r2, r9
   108f4:	mov	r1, r8
   108f8:	mov	r0, r7
   108fc:	blx	r3
   10900:	cmp	r6, r4
   10904:	bne	108e8 <strcmp@plt+0x3f0>
   10908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1090c:	andeq	r0, r1, r8, lsr #12
   10910:	andeq	r0, r1, r0, lsr #12
   10914:	bx	lr

Disassembly of section .fini:

00010918 <.fini>:
   10918:	push	{r3, lr}
   1091c:	pop	{r3, pc}
