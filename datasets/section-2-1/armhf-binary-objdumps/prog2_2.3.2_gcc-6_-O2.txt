
../repos/prog2/2.3.2:     file format elf32-littlearm


Disassembly of section .init:

000109bc <.init>:
   109bc:	push	{r3, lr}
   109c0:	bl	10c44 <_start@@Base+0x3c>
   109c4:	pop	{r3, pc}

Disassembly of section .plt:

000109c8 <calloc@plt-0x14>:
   109c8:	push	{lr}		; (str lr, [sp, #-4]!)
   109cc:	ldr	lr, [pc, #4]	; 109d8 <calloc@plt-0x4>
   109d0:	add	lr, pc, lr
   109d4:	ldr	pc, [lr, #8]!
   109d8:	andeq	r1, r1, r8, lsr #12

000109dc <calloc@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #69632	; 0x11000
   109e4:	ldr	pc, [ip, #1576]!	; 0x628

000109e8 <raise@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #69632	; 0x11000
   109f0:	ldr	pc, [ip, #1568]!	; 0x620

000109f4 <strcmp@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #69632	; 0x11000
   109fc:	ldr	pc, [ip, #1560]!	; 0x618

00010a00 <printf@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #69632	; 0x11000
   10a08:	ldr	pc, [ip, #1552]!	; 0x610

00010a0c <free@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #69632	; 0x11000
   10a14:	ldr	pc, [ip, #1544]!	; 0x608

00010a18 <fgets@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #69632	; 0x11000
   10a20:	ldr	pc, [ip, #1536]!	; 0x600

00010a24 <time@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #69632	; 0x11000
   10a2c:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a30 <realloc@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #69632	; 0x11000
   10a38:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a3c <strcat@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #69632	; 0x11000
   10a44:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a48 <strcpy@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #69632	; 0x11000
   10a50:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a54 <puts@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #69632	; 0x11000
   10a5c:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a60 <malloc@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #69632	; 0x11000
   10a68:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a6c <__libc_start_main@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #69632	; 0x11000
   10a74:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a78 <__gmon_start__@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #69632	; 0x11000
   10a80:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a84 <strlen@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #69632	; 0x11000
   10a8c:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a90 <srand@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #69632	; 0x11000
   10a98:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a9c <rand@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #69632	; 0x11000
   10aa4:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa8 <__isoc99_scanf@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #69632	; 0x11000
   10ab0:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab4 <abort@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #69632	; 0x11000
   10abc:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00010ac0 <main@@Base>:
   10ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ac4:	sub	sp, sp, #108	; 0x6c
   10ac8:	bl	10d74 <vetor_novo@@Base>
   10acc:	ldr	r3, [pc, #276]	; 10be8 <main@@Base+0x128>
   10ad0:	ldr	r2, [pc, #276]	; 10bec <main@@Base+0x12c>
   10ad4:	add	r3, pc, r3
   10ad8:	ldr	fp, [pc, #272]	; 10bf0 <main@@Base+0x130>
   10adc:	mov	r4, #0
   10ae0:	add	fp, pc, fp
   10ae4:	ldr	sl, [r3, r2]
   10ae8:	mov	r9, r4
   10aec:	add	r5, sp, #4
   10af0:	mov	r8, #100	; 0x64
   10af4:	mov	r7, r0
   10af8:	add	r6, r4, #1
   10afc:	mov	r1, r6
   10b00:	mov	r0, fp
   10b04:	bl	10a00 <printf@plt>
   10b08:	ldr	r2, [sl]
   10b0c:	mov	r1, r8
   10b10:	mov	r0, r5
   10b14:	bl	10a18 <fgets@plt>
   10b18:	mov	r0, r5
   10b1c:	bl	10a84 <strlen@plt>
   10b20:	add	r3, sp, #104	; 0x68
   10b24:	mov	r2, r4
   10b28:	mov	r1, r5
   10b2c:	mov	r4, r6
   10b30:	add	r3, r3, r0
   10b34:	mov	r0, r7
   10b38:	strb	r9, [r3, #-101]	; 0xffffff9b
   10b3c:	bl	10ebc <vetor_insere@@Base>
   10b40:	cmp	r6, #5
   10b44:	bne	10af8 <main@@Base+0x38>
   10b48:	mov	r0, r7
   10b4c:	bl	10d30 <imprime@@Base>
   10b50:	ldr	r0, [pc, #156]	; 10bf4 <main@@Base+0x134>
   10b54:	add	r0, pc, r0
   10b58:	bl	10a00 <printf@plt>
   10b5c:	ldr	r0, [pc, #148]	; 10bf8 <main@@Base+0x138>
   10b60:	mov	r1, r5
   10b64:	add	r0, pc, r0
   10b68:	bl	10aa8 <__isoc99_scanf@plt>
   10b6c:	mov	r1, r5
   10b70:	mov	r0, r7
   10b74:	bl	11018 <vetor_pesquisa@@Base>
   10b78:	mov	r1, r0
   10b7c:	mov	r0, r7
   10b80:	bl	10f98 <vetor_remove@@Base>
   10b84:	cmp	r0, #0
   10b88:	beq	10bdc <main@@Base+0x11c>
   10b8c:	ldr	r0, [pc, #104]	; 10bfc <main@@Base+0x13c>
   10b90:	add	r0, pc, r0
   10b94:	bl	10a54 <puts@plt>
   10b98:	mov	r0, r7
   10b9c:	bl	11078 <vetor_ordena@@Base>
   10ba0:	cmp	r0, #0
   10ba4:	beq	10bb4 <main@@Base+0xf4>
   10ba8:	ldr	r0, [pc, #80]	; 10c00 <main@@Base+0x140>
   10bac:	add	r0, pc, r0
   10bb0:	bl	10a00 <printf@plt>
   10bb4:	ldr	r0, [pc, #72]	; 10c04 <main@@Base+0x144>
   10bb8:	add	r0, pc, r0
   10bbc:	bl	10a54 <puts@plt>
   10bc0:	mov	r0, r7
   10bc4:	bl	10d30 <imprime@@Base>
   10bc8:	mov	r0, r7
   10bcc:	bl	10d98 <vetor_apaga@@Base>
   10bd0:	mov	r0, #0
   10bd4:	add	sp, sp, #108	; 0x6c
   10bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bdc:	mov	r0, r7
   10be0:	bl	10d30 <imprime@@Base>
   10be4:	b	10b98 <main@@Base+0xd8>
   10be8:	andeq	r1, r1, r4, lsr #10
   10bec:	andeq	r0, r0, ip, asr r0
   10bf0:	andeq	r0, r0, r4, lsr #20
   10bf4:	andeq	r0, r0, r4, asr #19
   10bf8:	ldrdeq	r0, [r0], -r4
   10bfc:	andeq	r0, r0, ip, lsr #19
   10c00:	andeq	r0, r0, r8, lsr #19
   10c04:	andeq	r0, r0, r0, asr #19

00010c08 <_start@@Base>:
   10c08:	mov	fp, #0
   10c0c:	mov	lr, #0
   10c10:	pop	{r1}		; (ldr r1, [sp], #4)
   10c14:	mov	r2, sp
   10c18:	push	{r2}		; (str r2, [sp, #-4]!)
   10c1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c20:	ldr	ip, [pc, #16]	; 10c38 <_start@@Base+0x30>
   10c24:	push	{ip}		; (str ip, [sp, #-4]!)
   10c28:	ldr	r0, [pc, #12]	; 10c3c <_start@@Base+0x34>
   10c2c:	ldr	r3, [pc, #12]	; 10c40 <_start@@Base+0x38>
   10c30:	bl	10a6c <__libc_start_main@plt>
   10c34:	bl	10ab4 <abort@plt>
   10c38:	ldrdeq	r1, [r1], -ip
   10c3c:	andeq	r0, r1, r0, asr #21
   10c40:	andeq	r1, r1, ip, ror r4
   10c44:	ldr	r3, [pc, #20]	; 10c60 <_start@@Base+0x58>
   10c48:	ldr	r2, [pc, #20]	; 10c64 <_start@@Base+0x5c>
   10c4c:	add	r3, pc, r3
   10c50:	ldr	r2, [r3, r2]
   10c54:	cmp	r2, #0
   10c58:	bxeq	lr
   10c5c:	b	10a78 <__gmon_start__@plt>
   10c60:	andeq	r1, r1, ip, lsr #7
   10c64:	andeq	r0, r0, r8, asr r0
   10c68:	ldr	r3, [pc, #28]	; 10c8c <_start@@Base+0x84>
   10c6c:	ldr	r0, [pc, #28]	; 10c90 <_start@@Base+0x88>
   10c70:	sub	r3, r3, r0
   10c74:	cmp	r3, #6
   10c78:	bxls	lr
   10c7c:	ldr	r3, [pc, #16]	; 10c94 <_start@@Base+0x8c>
   10c80:	cmp	r3, #0
   10c84:	bxeq	lr
   10c88:	bx	r3
   10c8c:	andeq	r2, r2, fp, rrx
   10c90:	andeq	r2, r2, r8, rrx
   10c94:	andeq	r0, r0, r0
   10c98:	ldr	r1, [pc, #36]	; 10cc4 <_start@@Base+0xbc>
   10c9c:	ldr	r0, [pc, #36]	; 10cc8 <_start@@Base+0xc0>
   10ca0:	sub	r1, r1, r0
   10ca4:	asr	r1, r1, #2
   10ca8:	add	r1, r1, r1, lsr #31
   10cac:	asrs	r1, r1, #1
   10cb0:	bxeq	lr
   10cb4:	ldr	r3, [pc, #16]	; 10ccc <_start@@Base+0xc4>
   10cb8:	cmp	r3, #0
   10cbc:	bxeq	lr
   10cc0:	bx	r3
   10cc4:	andeq	r2, r2, r8, rrx
   10cc8:	andeq	r2, r2, r8, rrx
   10ccc:	andeq	r0, r0, r0
   10cd0:	push	{r4, lr}
   10cd4:	ldr	r4, [pc, #24]	; 10cf4 <_start@@Base+0xec>
   10cd8:	ldrb	r3, [r4]
   10cdc:	cmp	r3, #0
   10ce0:	popne	{r4, pc}
   10ce4:	bl	10c68 <_start@@Base+0x60>
   10ce8:	mov	r3, #1
   10cec:	strb	r3, [r4]
   10cf0:	pop	{r4, pc}
   10cf4:	andeq	r2, r2, r8, rrx
   10cf8:	ldr	r0, [pc, #40]	; 10d28 <_start@@Base+0x120>
   10cfc:	ldr	r3, [r0]
   10d00:	cmp	r3, #0
   10d04:	bne	10d0c <_start@@Base+0x104>
   10d08:	b	10c98 <_start@@Base+0x90>
   10d0c:	ldr	r3, [pc, #24]	; 10d2c <_start@@Base+0x124>
   10d10:	cmp	r3, #0
   10d14:	beq	10d08 <_start@@Base+0x100>
   10d18:	push	{r4, lr}
   10d1c:	blx	r3
   10d20:	pop	{r4, lr}
   10d24:	b	10c98 <_start@@Base+0x90>
   10d28:	andeq	r1, r2, r4, lsl pc
   10d2c:	andeq	r0, r0, r0

00010d30 <imprime@@Base>:
   10d30:	push	{r4, r5, r6, lr}
   10d34:	mov	r1, #0
   10d38:	ldr	r6, [pc, #48]	; 10d70 <imprime@@Base+0x40>
   10d3c:	mov	r5, r0
   10d40:	add	r6, pc, r6
   10d44:	mov	r0, r5
   10d48:	add	r4, r1, #1
   10d4c:	bl	10e88 <vetor_elemento@@Base>
   10d50:	mov	r1, r4
   10d54:	mov	r2, r0
   10d58:	mov	r0, r6
   10d5c:	bl	10a00 <printf@plt>
   10d60:	cmp	r4, #5
   10d64:	mov	r1, r4
   10d68:	bne	10d44 <imprime@@Base+0x14>
   10d6c:	pop	{r4, r5, r6, pc}
   10d70:	andeq	r0, r0, r4, lsr #15

00010d74 <vetor_novo@@Base>:
   10d74:	push	{r4, lr}
   10d78:	mov	r0, #12
   10d7c:	bl	10a60 <malloc@plt>
   10d80:	cmp	r0, #0
   10d84:	movne	r3, #0
   10d88:	strne	r3, [r0]
   10d8c:	strne	r3, [r0, #4]
   10d90:	strne	r3, [r0, #8]
   10d94:	pop	{r4, pc}

00010d98 <vetor_apaga@@Base>:
   10d98:	push	{r4, r5, r6, lr}
   10d9c:	subs	r5, r0, #0
   10da0:	popeq	{r4, r5, r6, pc}
   10da4:	ldr	r3, [r5]
   10da8:	cmp	r3, #0
   10dac:	movgt	r4, #0
   10db0:	ble	10dd0 <vetor_apaga@@Base+0x38>
   10db4:	ldr	r3, [r5, #8]
   10db8:	ldr	r0, [r3, r4, lsl #2]
   10dbc:	bl	10a0c <free@plt>
   10dc0:	ldr	r3, [r5]
   10dc4:	add	r4, r4, #1
   10dc8:	cmp	r3, r4
   10dcc:	bgt	10db4 <vetor_apaga@@Base+0x1c>
   10dd0:	ldr	r0, [r5, #8]
   10dd4:	bl	10a0c <free@plt>
   10dd8:	mov	r0, r5
   10ddc:	pop	{r4, r5, r6, lr}
   10de0:	b	10a0c <free@plt>

00010de4 <vetor_atribui@@Base>:
   10de4:	clz	r3, r0
   10de8:	lsr	r3, r3, #5
   10dec:	orrs	r3, r3, r1, lsr #31
   10df0:	bne	10e70 <vetor_atribui@@Base+0x8c>
   10df4:	ldr	r3, [r0]
   10df8:	cmp	r1, r3
   10dfc:	bge	10e70 <vetor_atribui@@Base+0x8c>
   10e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e04:	mov	r5, r0
   10e08:	mov	r0, r2
   10e0c:	mov	r4, r1
   10e10:	mov	r6, r2
   10e14:	bl	10a84 <strlen@plt>
   10e18:	ldr	r8, [r5, #8]
   10e1c:	ldr	r7, [r8, r4, lsl #2]
   10e20:	mov	r9, r0
   10e24:	mov	r0, r7
   10e28:	bl	10a84 <strlen@plt>
   10e2c:	cmp	r9, r0
   10e30:	bls	10e54 <vetor_atribui@@Base+0x70>
   10e34:	mov	r0, r7
   10e38:	add	r1, r9, #1
   10e3c:	bl	10a30 <realloc@plt>
   10e40:	ldr	r3, [r5, #8]
   10e44:	str	r0, [r8, r4, lsl #2]
   10e48:	ldr	r7, [r3, r4, lsl #2]
   10e4c:	cmp	r7, #0
   10e50:	beq	10e68 <vetor_atribui@@Base+0x84>
   10e54:	mov	r1, r6
   10e58:	mov	r0, r7
   10e5c:	bl	10a48 <strcpy@plt>
   10e60:	mov	r0, r4
   10e64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e68:	mvn	r0, #0
   10e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e70:	mvn	r0, #0
   10e74:	bx	lr

00010e78 <vetor_tamanho@@Base>:
   10e78:	cmp	r0, #0
   10e7c:	ldrne	r0, [r0]
   10e80:	mvneq	r0, #0
   10e84:	bx	lr

00010e88 <vetor_elemento@@Base>:
   10e88:	lsr	r3, r1, #31
   10e8c:	cmp	r0, #0
   10e90:	orreq	r3, r3, #1
   10e94:	cmp	r3, #0
   10e98:	bne	10eb4 <vetor_elemento@@Base+0x2c>
   10e9c:	ldr	r2, [r0]
   10ea0:	cmp	r1, r2
   10ea4:	bge	10eb4 <vetor_elemento@@Base+0x2c>
   10ea8:	ldr	r3, [r0, #8]
   10eac:	ldr	r0, [r3, r1, lsl #2]
   10eb0:	bx	lr
   10eb4:	mov	r0, #0
   10eb8:	bx	lr

00010ebc <vetor_insere@@Base>:
   10ebc:	clz	r3, r0
   10ec0:	lsr	r3, r3, #5
   10ec4:	orrs	r3, r3, r2, lsr #31
   10ec8:	bne	10f90 <vetor_insere@@Base+0xd4>
   10ecc:	push	{r4, r5, r6, r7, r8, lr}
   10ed0:	ldr	r7, [r0]
   10ed4:	cmp	r2, r7
   10ed8:	bgt	10f88 <vetor_insere@@Base+0xcc>
   10edc:	ldr	r3, [r0, #4]
   10ee0:	mov	r6, r0
   10ee4:	cmp	r7, r3
   10ee8:	mov	r8, r1
   10eec:	mov	r4, r2
   10ef0:	beq	10f50 <vetor_insere@@Base+0x94>
   10ef4:	ldr	r5, [r0, #8]
   10ef8:	cmp	r4, r7
   10efc:	addlt	r3, r5, r7, lsl #2
   10f00:	addlt	r2, r5, r4, lsl #2
   10f04:	bge	10f18 <vetor_insere@@Base+0x5c>
   10f08:	ldr	ip, [r3, #-4]
   10f0c:	str	ip, [r3], #-4
   10f10:	cmp	r2, r3
   10f14:	bne	10f08 <vetor_insere@@Base+0x4c>
   10f18:	mov	r0, r8
   10f1c:	bl	10a84 <strlen@plt>
   10f20:	mov	r1, #1
   10f24:	add	r0, r0, r1
   10f28:	bl	109dc <calloc@plt>
   10f2c:	cmp	r0, #0
   10f30:	str	r0, [r5, r4, lsl #2]
   10f34:	beq	10f88 <vetor_insere@@Base+0xcc>
   10f38:	mov	r1, r8
   10f3c:	bl	10a48 <strcpy@plt>
   10f40:	add	r3, r7, #1
   10f44:	mov	r0, r4
   10f48:	str	r3, [r6]
   10f4c:	pop	{r4, r5, r6, r7, r8, pc}
   10f50:	cmp	r7, #0
   10f54:	moveq	r3, #1
   10f58:	lslne	r3, r7, #1
   10f5c:	streq	r3, [r0, #4]
   10f60:	strne	r3, [r0, #4]
   10f64:	moveq	r1, #4
   10f68:	lslne	r1, r7, #3
   10f6c:	ldr	r0, [r0, #8]
   10f70:	bl	10a30 <realloc@plt>
   10f74:	cmp	r0, #0
   10f78:	str	r0, [r6, #8]
   10f7c:	ldrne	r7, [r6]
   10f80:	movne	r5, r0
   10f84:	bne	10ef8 <vetor_insere@@Base+0x3c>
   10f88:	mvn	r0, #0
   10f8c:	pop	{r4, r5, r6, r7, r8, pc}
   10f90:	mvn	r0, #0
   10f94:	bx	lr

00010f98 <vetor_remove@@Base>:
   10f98:	clz	r3, r0
   10f9c:	lsr	r3, r3, #5
   10fa0:	orrs	r3, r3, r1, lsr #31
   10fa4:	bne	11010 <vetor_remove@@Base+0x78>
   10fa8:	ldr	r3, [r0]
   10fac:	cmp	r1, r3
   10fb0:	bge	11010 <vetor_remove@@Base+0x78>
   10fb4:	ldr	r3, [r0, #8]
   10fb8:	push	{r4, r5, r6, lr}
   10fbc:	mov	r6, r0
   10fc0:	ldr	r0, [r3, r1, lsl #2]
   10fc4:	mov	r5, r1
   10fc8:	lsl	r4, r1, #2
   10fcc:	bl	10a0c <free@plt>
   10fd0:	ldr	r0, [r6]
   10fd4:	add	r1, r5, #1
   10fd8:	cmp	r1, r0
   10fdc:	bge	11000 <vetor_remove@@Base+0x68>
   10fe0:	ldr	r2, [r6, #8]
   10fe4:	sub	r1, r0, #-1073741823	; 0xc0000001
   10fe8:	add	r3, r2, r4
   10fec:	add	r1, r2, r1, lsl #2
   10ff0:	ldr	r2, [r3, #4]
   10ff4:	str	r2, [r3], #4
   10ff8:	cmp	r3, r1
   10ffc:	bne	10ff0 <vetor_remove@@Base+0x58>
   11000:	sub	r0, r0, #1
   11004:	str	r0, [r6]
   11008:	mov	r0, #0
   1100c:	pop	{r4, r5, r6, pc}
   11010:	mvn	r0, #0
   11014:	bx	lr

00011018 <vetor_pesquisa@@Base>:
   11018:	cmp	r0, #0
   1101c:	push	{r4, r5, r6, r7, r8, lr}
   11020:	beq	1106c <vetor_pesquisa@@Base+0x54>
   11024:	ldr	r7, [r0]
   11028:	cmp	r7, #0
   1102c:	ble	1106c <vetor_pesquisa@@Base+0x54>
   11030:	ldr	r5, [r0, #8]
   11034:	mov	r6, r1
   11038:	mov	r4, #0
   1103c:	sub	r5, r5, #4
   11040:	b	11050 <vetor_pesquisa@@Base+0x38>
   11044:	add	r4, r4, #1
   11048:	cmp	r4, r7
   1104c:	beq	1106c <vetor_pesquisa@@Base+0x54>
   11050:	mov	r1, r6
   11054:	ldr	r0, [r5, #4]!
   11058:	bl	109f4 <strcmp@plt>
   1105c:	cmp	r0, #0
   11060:	bne	11044 <vetor_pesquisa@@Base+0x2c>
   11064:	mov	r0, r4
   11068:	pop	{r4, r5, r6, r7, r8, pc}
   1106c:	mvn	r4, #0
   11070:	mov	r0, r4
   11074:	pop	{r4, r5, r6, r7, r8, pc}

00011078 <vetor_ordena@@Base>:
   11078:	cmp	r0, #0
   1107c:	beq	110f4 <vetor_ordena@@Base+0x7c>
   11080:	ldr	r3, [r0]
   11084:	cmp	r3, #1
   11088:	ble	110ec <vetor_ordena@@Base+0x74>
   1108c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11090:	sub	r3, r3, #-1073741823	; 0xc0000001
   11094:	ldr	sl, [r0, #8]
   11098:	mov	r8, #1
   1109c:	mov	r7, sl
   110a0:	add	r9, sl, r3, lsl #2
   110a4:	ldr	r6, [r7, #4]!
   110a8:	mov	r5, r8
   110ac:	mov	r4, r7
   110b0:	ldr	r1, [r4, #-4]
   110b4:	mov	r0, r6
   110b8:	bl	109f4 <strcmp@plt>
   110bc:	cmp	r0, #0
   110c0:	bge	110d4 <vetor_ordena@@Base+0x5c>
   110c4:	ldr	r3, [r4, #-4]!
   110c8:	subs	r5, r5, #1
   110cc:	str	r3, [r4, #4]
   110d0:	bne	110b0 <vetor_ordena@@Base+0x38>
   110d4:	cmp	r9, r7
   110d8:	str	r6, [sl, r5, lsl #2]
   110dc:	add	r8, r8, #1
   110e0:	bne	110a4 <vetor_ordena@@Base+0x2c>
   110e4:	mov	r0, #0
   110e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110ec:	mov	r0, #0
   110f0:	bx	lr
   110f4:	mvn	r0, #0
   110f8:	bx	lr

000110fc <vetor_concatena@@Base>:
   110fc:	cmp	r1, #0
   11100:	cmpne	r0, #0
   11104:	push	{r4, r5, r6, lr}
   11108:	moveq	r6, #0
   1110c:	beq	11160 <vetor_concatena@@Base+0x64>
   11110:	mov	r4, r1
   11114:	mov	r5, r0
   11118:	bl	10d74 <vetor_novo@@Base>
   1111c:	ldm	r5, {r2, r3}
   11120:	ldr	r1, [r4]
   11124:	mov	r6, r0
   11128:	add	r0, r2, r1, lsl #2
   1112c:	str	r0, [r6, #8]
   11130:	ldr	r0, [r4, #4]
   11134:	ldr	ip, [r5, #8]
   11138:	add	r3, r3, r0
   1113c:	ldr	r0, [r2, r1, lsl #2]
   11140:	ldr	r1, [ip]
   11144:	str	r3, [r6, #4]
   11148:	bl	10a48 <strcpy@plt>
   1114c:	ldr	r2, [r4, #8]
   11150:	ldr	r3, [r6, #8]
   11154:	ldr	r1, [r2]
   11158:	ldr	r0, [r3]
   1115c:	bl	10a3c <strcat@plt>
   11160:	mov	r0, r6
   11164:	pop	{r4, r5, r6, pc}

00011168 <vetor_inverte@@Base>:
   11168:	push	{r4, r5, r6, lr}
   1116c:	mov	r4, r0
   11170:	bl	10e78 <vetor_tamanho@@Base>
   11174:	cmp	r0, #0
   11178:	ble	111bc <vetor_inverte@@Base+0x54>
   1117c:	ldr	r2, [r4, #8]
   11180:	mov	r3, r0
   11184:	sub	ip, r2, #4
   11188:	mov	r1, #0
   1118c:	add	r2, r2, r0, lsl #2
   11190:	sub	r3, r3, #1
   11194:	cmp	r0, r3
   11198:	ldr	lr, [ip, #4]
   1119c:	ldr	r4, [r2]
   111a0:	add	r1, r1, #1
   111a4:	movlt	r5, r0
   111a8:	movge	r5, r3
   111ac:	cmp	r5, r1
   111b0:	str	r4, [ip, #4]!
   111b4:	str	lr, [r2], #-4
   111b8:	bgt	11190 <vetor_inverte@@Base+0x28>
   111bc:	mov	r0, #0
   111c0:	pop	{r4, r5, r6, pc}

000111c4 <vetor_baralha@@Base>:
   111c4:	push	{r4, r5, r6, r7, r8, lr}
   111c8:	sub	sp, sp, #8
   111cc:	ldr	r6, [r0]
   111d0:	bl	10d74 <vetor_novo@@Base>
   111d4:	mov	r7, r0
   111d8:	add	r0, sp, #4
   111dc:	bl	10a24 <time@plt>
   111e0:	bl	10a90 <srand@plt>
   111e4:	cmp	r6, #0
   111e8:	ble	11220 <vetor_baralha@@Base+0x5c>
   111ec:	add	r8, r6, #1
   111f0:	mov	r4, #0
   111f4:	bl	10a9c <rand@plt>
   111f8:	mov	r1, r8
   111fc:	bl	1144c <vetor_baralha@@Base+0x288>
   11200:	ldr	r5, [r7, #8]
   11204:	ldr	r3, [r5, r4, lsl #2]
   11208:	ldr	r2, [r5, r1, lsl #2]
   1120c:	str	r2, [r5, r4, lsl #2]
   11210:	add	r4, r4, #1
   11214:	cmp	r6, r4
   11218:	str	r3, [r5, r1, lsl #2]
   1121c:	bne	111f4 <vetor_baralha@@Base+0x30>
   11220:	mov	r0, r7
   11224:	add	sp, sp, #8
   11228:	pop	{r4, r5, r6, r7, r8, pc}
   1122c:	cmp	r1, #0
   11230:	beq	1143c <vetor_baralha@@Base+0x278>
   11234:	eor	ip, r0, r1
   11238:	rsbmi	r1, r1, #0
   1123c:	subs	r2, r1, #1
   11240:	beq	11408 <vetor_baralha@@Base+0x244>
   11244:	movs	r3, r0
   11248:	rsbmi	r3, r0, #0
   1124c:	cmp	r3, r1
   11250:	bls	11414 <vetor_baralha@@Base+0x250>
   11254:	tst	r1, r2
   11258:	beq	11424 <vetor_baralha@@Base+0x260>
   1125c:	clz	r2, r3
   11260:	clz	r0, r1
   11264:	sub	r2, r0, r2
   11268:	rsbs	r2, r2, #31
   1126c:	addne	r2, r2, r2, lsl #1
   11270:	mov	r0, #0
   11274:	addne	pc, pc, r2, lsl #2
   11278:	nop			; (mov r0, r0)
   1127c:	cmp	r3, r1, lsl #31
   11280:	adc	r0, r0, r0
   11284:	subcs	r3, r3, r1, lsl #31
   11288:	cmp	r3, r1, lsl #30
   1128c:	adc	r0, r0, r0
   11290:	subcs	r3, r3, r1, lsl #30
   11294:	cmp	r3, r1, lsl #29
   11298:	adc	r0, r0, r0
   1129c:	subcs	r3, r3, r1, lsl #29
   112a0:	cmp	r3, r1, lsl #28
   112a4:	adc	r0, r0, r0
   112a8:	subcs	r3, r3, r1, lsl #28
   112ac:	cmp	r3, r1, lsl #27
   112b0:	adc	r0, r0, r0
   112b4:	subcs	r3, r3, r1, lsl #27
   112b8:	cmp	r3, r1, lsl #26
   112bc:	adc	r0, r0, r0
   112c0:	subcs	r3, r3, r1, lsl #26
   112c4:	cmp	r3, r1, lsl #25
   112c8:	adc	r0, r0, r0
   112cc:	subcs	r3, r3, r1, lsl #25
   112d0:	cmp	r3, r1, lsl #24
   112d4:	adc	r0, r0, r0
   112d8:	subcs	r3, r3, r1, lsl #24
   112dc:	cmp	r3, r1, lsl #23
   112e0:	adc	r0, r0, r0
   112e4:	subcs	r3, r3, r1, lsl #23
   112e8:	cmp	r3, r1, lsl #22
   112ec:	adc	r0, r0, r0
   112f0:	subcs	r3, r3, r1, lsl #22
   112f4:	cmp	r3, r1, lsl #21
   112f8:	adc	r0, r0, r0
   112fc:	subcs	r3, r3, r1, lsl #21
   11300:	cmp	r3, r1, lsl #20
   11304:	adc	r0, r0, r0
   11308:	subcs	r3, r3, r1, lsl #20
   1130c:	cmp	r3, r1, lsl #19
   11310:	adc	r0, r0, r0
   11314:	subcs	r3, r3, r1, lsl #19
   11318:	cmp	r3, r1, lsl #18
   1131c:	adc	r0, r0, r0
   11320:	subcs	r3, r3, r1, lsl #18
   11324:	cmp	r3, r1, lsl #17
   11328:	adc	r0, r0, r0
   1132c:	subcs	r3, r3, r1, lsl #17
   11330:	cmp	r3, r1, lsl #16
   11334:	adc	r0, r0, r0
   11338:	subcs	r3, r3, r1, lsl #16
   1133c:	cmp	r3, r1, lsl #15
   11340:	adc	r0, r0, r0
   11344:	subcs	r3, r3, r1, lsl #15
   11348:	cmp	r3, r1, lsl #14
   1134c:	adc	r0, r0, r0
   11350:	subcs	r3, r3, r1, lsl #14
   11354:	cmp	r3, r1, lsl #13
   11358:	adc	r0, r0, r0
   1135c:	subcs	r3, r3, r1, lsl #13
   11360:	cmp	r3, r1, lsl #12
   11364:	adc	r0, r0, r0
   11368:	subcs	r3, r3, r1, lsl #12
   1136c:	cmp	r3, r1, lsl #11
   11370:	adc	r0, r0, r0
   11374:	subcs	r3, r3, r1, lsl #11
   11378:	cmp	r3, r1, lsl #10
   1137c:	adc	r0, r0, r0
   11380:	subcs	r3, r3, r1, lsl #10
   11384:	cmp	r3, r1, lsl #9
   11388:	adc	r0, r0, r0
   1138c:	subcs	r3, r3, r1, lsl #9
   11390:	cmp	r3, r1, lsl #8
   11394:	adc	r0, r0, r0
   11398:	subcs	r3, r3, r1, lsl #8
   1139c:	cmp	r3, r1, lsl #7
   113a0:	adc	r0, r0, r0
   113a4:	subcs	r3, r3, r1, lsl #7
   113a8:	cmp	r3, r1, lsl #6
   113ac:	adc	r0, r0, r0
   113b0:	subcs	r3, r3, r1, lsl #6
   113b4:	cmp	r3, r1, lsl #5
   113b8:	adc	r0, r0, r0
   113bc:	subcs	r3, r3, r1, lsl #5
   113c0:	cmp	r3, r1, lsl #4
   113c4:	adc	r0, r0, r0
   113c8:	subcs	r3, r3, r1, lsl #4
   113cc:	cmp	r3, r1, lsl #3
   113d0:	adc	r0, r0, r0
   113d4:	subcs	r3, r3, r1, lsl #3
   113d8:	cmp	r3, r1, lsl #2
   113dc:	adc	r0, r0, r0
   113e0:	subcs	r3, r3, r1, lsl #2
   113e4:	cmp	r3, r1, lsl #1
   113e8:	adc	r0, r0, r0
   113ec:	subcs	r3, r3, r1, lsl #1
   113f0:	cmp	r3, r1
   113f4:	adc	r0, r0, r0
   113f8:	subcs	r3, r3, r1
   113fc:	cmp	ip, #0
   11400:	rsbmi	r0, r0, #0
   11404:	bx	lr
   11408:	teq	ip, r0
   1140c:	rsbmi	r0, r0, #0
   11410:	bx	lr
   11414:	movcc	r0, #0
   11418:	asreq	r0, ip, #31
   1141c:	orreq	r0, r0, #1
   11420:	bx	lr
   11424:	clz	r2, r1
   11428:	rsb	r2, r2, #31
   1142c:	cmp	ip, #0
   11430:	lsr	r0, r3, r2
   11434:	rsbmi	r0, r0, #0
   11438:	bx	lr
   1143c:	cmp	r0, #0
   11440:	mvngt	r0, #-2147483648	; 0x80000000
   11444:	movlt	r0, #-2147483648	; 0x80000000
   11448:	b	1146c <vetor_baralha@@Base+0x2a8>
   1144c:	cmp	r1, #0
   11450:	beq	1143c <vetor_baralha@@Base+0x278>
   11454:	push	{r0, r1, lr}
   11458:	bl	11234 <vetor_baralha@@Base+0x70>
   1145c:	pop	{r1, r2, lr}
   11460:	mul	r3, r2, r0
   11464:	sub	r1, r1, r3
   11468:	bx	lr
   1146c:	push	{r1, lr}
   11470:	mov	r0, #8
   11474:	bl	109e8 <raise@plt>
   11478:	pop	{r1, pc}

0001147c <__libc_csu_init@@Base>:
   1147c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11480:	mov	r7, r0
   11484:	ldr	r6, [pc, #72]	; 114d4 <__libc_csu_init@@Base+0x58>
   11488:	ldr	r5, [pc, #72]	; 114d8 <__libc_csu_init@@Base+0x5c>
   1148c:	add	r6, pc, r6
   11490:	add	r5, pc, r5
   11494:	sub	r6, r6, r5
   11498:	mov	r8, r1
   1149c:	mov	r9, r2
   114a0:	bl	109bc <calloc@plt-0x20>
   114a4:	asrs	r6, r6, #2
   114a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   114ac:	mov	r4, #0
   114b0:	add	r4, r4, #1
   114b4:	ldr	r3, [r5], #4
   114b8:	mov	r2, r9
   114bc:	mov	r1, r8
   114c0:	mov	r0, r7
   114c4:	blx	r3
   114c8:	cmp	r6, r4
   114cc:	bne	114b0 <__libc_csu_init@@Base+0x34>
   114d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114d4:	andeq	r0, r1, ip, ror sl
   114d8:	andeq	r0, r1, r4, ror sl

000114dc <__libc_csu_fini@@Base>:
   114dc:	bx	lr

Disassembly of section .fini:

000114e0 <.fini>:
   114e0:	push	{r3, lr}
   114e4:	pop	{r3, pc}
