
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

000125c4 <.init>:
   125c4:	push	{r3, lr}
   125c8:	bl	1280c <_start@@Base+0x3c>
   125cc:	pop	{r3, pc}

Disassembly of section .plt:

000125d0 <fdopen@plt-0x14>:
   125d0:	push	{lr}		; (str lr, [sp, #-4]!)
   125d4:	ldr	lr, [pc, #4]	; 125e0 <fdopen@plt-0x4>
   125d8:	add	lr, pc, lr
   125dc:	ldr	pc, [lr, #8]!
   125e0:	andeq	lr, r1, r0, lsr #20

000125e4 <fdopen@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #122880	; 0x1e000
   125ec:	ldr	pc, [ip, #2592]!	; 0xa20

000125f0 <strtol@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #122880	; 0x1e000
   125f8:	ldr	pc, [ip, #2584]!	; 0xa18

000125fc <longjmp@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #122880	; 0x1e000
   12604:	ldr	pc, [ip, #2576]!	; 0xa10

00012608 <fflush@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #122880	; 0x1e000
   12610:	ldr	pc, [ip, #2568]!	; 0xa08

00012614 <_setjmp@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #122880	; 0x1e000
   1261c:	ldr	pc, [ip, #2560]!	; 0xa00

00012620 <free@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #122880	; 0x1e000
   12628:	ldr	pc, [ip, #2552]!	; 0x9f8

0001262c <__isnanf@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #122880	; 0x1e000
   12634:	ldr	pc, [ip, #2544]!	; 0x9f0

00012638 <memcpy@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #122880	; 0x1e000
   12640:	ldr	pc, [ip, #2536]!	; 0x9e8

00012644 <mmap64@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #122880	; 0x1e000
   1264c:	ldr	pc, [ip, #2528]!	; 0x9e0

00012650 <ftell@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #122880	; 0x1e000
   12658:	ldr	pc, [ip, #2520]!	; 0x9d8

0001265c <uname@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #122880	; 0x1e000
   12664:	ldr	pc, [ip, #2512]!	; 0x9d0

00012668 <strdup@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #122880	; 0x1e000
   12670:	ldr	pc, [ip, #2504]!	; 0x9c8

00012674 <__isinff@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #122880	; 0x1e000
   1267c:	ldr	pc, [ip, #2496]!	; 0x9c0

00012680 <realloc@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #122880	; 0x1e000
   12688:	ldr	pc, [ip, #2488]!	; 0x9b8

0001268c <fwrite@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #122880	; 0x1e000
   12694:	ldr	pc, [ip, #2480]!	; 0x9b0

00012698 <open64@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #122880	; 0x1e000
   126a0:	ldr	pc, [ip, #2472]!	; 0x9a8

000126a4 <getenv@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #122880	; 0x1e000
   126ac:	ldr	pc, [ip, #2464]!	; 0x9a0

000126b0 <malloc@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #122880	; 0x1e000
   126b8:	ldr	pc, [ip, #2456]!	; 0x998

000126bc <__libc_start_main@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #122880	; 0x1e000
   126c4:	ldr	pc, [ip, #2448]!	; 0x990

000126c8 <strerror@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #122880	; 0x1e000
   126d0:	ldr	pc, [ip, #2440]!	; 0x988

000126d4 <__gmon_start__@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #122880	; 0x1e000
   126dc:	ldr	pc, [ip, #2432]!	; 0x980

000126e0 <getpid@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #122880	; 0x1e000
   126e8:	ldr	pc, [ip, #2424]!	; 0x978

000126ec <exit@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #122880	; 0x1e000
   126f4:	ldr	pc, [ip, #2416]!	; 0x970

000126f8 <strlen@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #122880	; 0x1e000
   12700:	ldr	pc, [ip, #2408]!	; 0x968

00012704 <strchr@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #122880	; 0x1e000
   1270c:	ldr	pc, [ip, #2400]!	; 0x960

00012710 <fprintf@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #122880	; 0x1e000
   12718:	ldr	pc, [ip, #2392]!	; 0x958

0001271c <__errno_location@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #122880	; 0x1e000
   12724:	ldr	pc, [ip, #2384]!	; 0x950

00012728 <__cxa_atexit@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #122880	; 0x1e000
   12730:	ldr	pc, [ip, #2376]!	; 0x948

00012734 <mkdir@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #122880	; 0x1e000
   1273c:	ldr	pc, [ip, #2368]!	; 0x940

00012740 <memset@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #122880	; 0x1e000
   12748:	ldr	pc, [ip, #2360]!	; 0x938

0001274c <strncpy@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #122880	; 0x1e000
   12754:	ldr	pc, [ip, #2352]!	; 0x930

00012758 <prctl@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #122880	; 0x1e000
   12760:	ldr	pc, [ip, #2344]!	; 0x928

00012764 <fclose@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #122880	; 0x1e000
   1276c:	ldr	pc, [ip, #2336]!	; 0x920

00012770 <munmap@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #122880	; 0x1e000
   12778:	ldr	pc, [ip, #2328]!	; 0x918

0001277c <fcntl64@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #122880	; 0x1e000
   12784:	ldr	pc, [ip, #2320]!	; 0x910

00012788 <strrchr@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #122880	; 0x1e000
   12790:	ldr	pc, [ip, #2312]!	; 0x908

00012794 <msync@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #122880	; 0x1e000
   1279c:	ldr	pc, [ip, #2304]!	; 0x900

000127a0 <putc@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #122880	; 0x1e000
   127a8:	ldr	pc, [ip, #2296]!	; 0x8f8

000127ac <fseek@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #122880	; 0x1e000
   127b4:	ldr	pc, [ip, #2288]!	; 0x8f0

000127b8 <abort@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #122880	; 0x1e000
   127c0:	ldr	pc, [ip, #2280]!	; 0x8e8

Disassembly of section .text:

000127d0 <_start@@Base>:
   127d0:	mov	fp, #0
   127d4:	mov	lr, #0
   127d8:	pop	{r1}		; (ldr r1, [sp], #4)
   127dc:	mov	r2, sp
   127e0:	push	{r2}		; (str r2, [sp, #-4]!)
   127e4:	push	{r0}		; (str r0, [sp, #-4]!)
   127e8:	ldr	ip, [pc, #16]	; 12800 <_start@@Base+0x30>
   127ec:	push	{ip}		; (str ip, [sp, #-4]!)
   127f0:	ldr	r0, [pc, #12]	; 12804 <_start@@Base+0x34>
   127f4:	ldr	r3, [pc, #12]	; 12808 <_start@@Base+0x38>
   127f8:	bl	126bc <__libc_start_main@plt>
   127fc:	bl	127b8 <abort@plt>
   12800:	andeq	lr, r1, ip, lsl #13
   12804:	andeq	r3, r1, r0, ror pc
   12808:	andeq	lr, r1, ip, lsr #12
   1280c:	ldr	r3, [pc, #20]	; 12828 <_start@@Base+0x58>
   12810:	ldr	r2, [pc, #20]	; 1282c <_start@@Base+0x5c>
   12814:	add	r3, pc, r3
   12818:	ldr	r2, [r3, r2]
   1281c:	cmp	r2, #0
   12820:	bxeq	lr
   12824:	b	126d4 <__gmon_start__@plt>
   12828:	andeq	lr, r1, r4, ror #15
   1282c:	andeq	r0, r0, r8, lsr #2
   12830:	ldr	r0, [pc, #24]	; 12850 <_start@@Base+0x80>
   12834:	ldr	r3, [pc, #24]	; 12854 <_start@@Base+0x84>
   12838:	cmp	r3, r0
   1283c:	bxeq	lr
   12840:	ldr	r3, [pc, #16]	; 12858 <_start@@Base+0x88>
   12844:	cmp	r3, #0
   12848:	bxeq	lr
   1284c:	bx	r3
   12850:			; <UNDEFINED> instruction: 0x000311b0
   12854:			; <UNDEFINED> instruction: 0x000311b0
   12858:	andeq	r0, r0, r0
   1285c:	ldr	r0, [pc, #36]	; 12888 <_start@@Base+0xb8>
   12860:	ldr	r1, [pc, #36]	; 1288c <_start@@Base+0xbc>
   12864:	sub	r1, r1, r0
   12868:	asr	r1, r1, #2
   1286c:	add	r1, r1, r1, lsr #31
   12870:	asrs	r1, r1, #1
   12874:	bxeq	lr
   12878:	ldr	r3, [pc, #16]	; 12890 <_start@@Base+0xc0>
   1287c:	cmp	r3, #0
   12880:	bxeq	lr
   12884:	bx	r3
   12888:			; <UNDEFINED> instruction: 0x000311b0
   1288c:			; <UNDEFINED> instruction: 0x000311b0
   12890:	andeq	r0, r0, r0
   12894:	push	{r4, lr}
   12898:	ldr	r4, [pc, #24]	; 128b8 <_start@@Base+0xe8>
   1289c:	ldrb	r3, [r4]
   128a0:	cmp	r3, #0
   128a4:	popne	{r4, pc}
   128a8:	bl	12830 <_start@@Base+0x60>
   128ac:	mov	r3, #1
   128b0:	strb	r3, [r4]
   128b4:	pop	{r4, pc}
   128b8:			; <UNDEFINED> instruction: 0x000311b0
   128bc:	b	1285c <_start@@Base+0x8c>

000128c0 <simple_file_only_main@@Base>:
   128c0:	push	{r4, r5, fp, lr}
   128c4:	add	fp, sp, #8
   128c8:	sub	sp, sp, #16
   128cc:	ldr	r0, [pc, #396]	; 12a60 <simple_file_only_main@@Base+0x1a0>
   128d0:	add	r1, pc, #376	; 0x178
   128d4:	add	r4, sp, #4
   128d8:	vld1.64	{d16-d17}, [r1 :128]
   128dc:	add	r0, pc, r0
   128e0:	vld1.64	{d18-d19}, [r0 :128]
   128e4:	vadd.i64	q8, q9, q8
   128e8:	vst1.64	{d16-d17}, [r0 :128]
   128ec:	mov	r0, r4
   128f0:	ldr	r1, [pc, #364]	; 12a64 <simple_file_only_main@@Base+0x1a4>
   128f4:	add	r1, pc, r1
   128f8:	bl	199f0 <init_lexer@@Base>
   128fc:	mov	r0, r4
   12900:	bl	19dc0 <next@@Base>
   12904:	ldr	r1, [r0]
   12908:	mov	r5, #148	; 0x94
   1290c:	mov	r0, #0
   12910:	mov	r2, #0
   12914:	mov	r3, #23
   12918:	str	r5, [sp]
   1291c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12920:	mov	r0, r4
   12924:	bl	19dc0 <next@@Base>
   12928:	ldr	r1, [r0]
   1292c:	mov	r0, #2
   12930:	mov	r2, #0
   12934:	mov	r3, #25
   12938:	str	r5, [sp]
   1293c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12940:	mov	r0, r4
   12944:	bl	19dc0 <next@@Base>
   12948:	ldr	r1, [r0]
   1294c:	mov	r0, #3
   12950:	mov	r2, #0
   12954:	mov	r3, #27
   12958:	str	r5, [sp]
   1295c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12960:	mov	r0, r4
   12964:	bl	19dc0 <next@@Base>
   12968:	ldr	r1, [r0]
   1296c:	mov	r0, #4
   12970:	mov	r2, #0
   12974:	mov	r3, #29
   12978:	str	r5, [sp]
   1297c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12980:	mov	r0, r4
   12984:	bl	19dc0 <next@@Base>
   12988:	ldr	r1, [r0]
   1298c:	mov	r0, #5
   12990:	mov	r2, #0
   12994:	mov	r3, #31
   12998:	str	r5, [sp]
   1299c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   129a0:	mov	r0, r4
   129a4:	bl	19dc0 <next@@Base>
   129a8:	ldr	r1, [r0]
   129ac:	mov	r0, #7
   129b0:	mov	r2, #0
   129b4:	mov	r3, #33	; 0x21
   129b8:	str	r5, [sp]
   129bc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   129c0:	mov	r0, r4
   129c4:	bl	19dc0 <next@@Base>
   129c8:	ldr	r1, [r0]
   129cc:	mov	r0, #1
   129d0:	mov	r2, #0
   129d4:	mov	r3, #35	; 0x23
   129d8:	str	r5, [sp]
   129dc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   129e0:	mov	r0, r4
   129e4:	bl	19dc0 <next@@Base>
   129e8:	ldr	r1, [r0]
   129ec:	mov	r0, #8
   129f0:	mov	r2, #0
   129f4:	mov	r3, #37	; 0x25
   129f8:	str	r5, [sp]
   129fc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12a00:	mov	r0, r4
   12a04:	bl	19dc0 <next@@Base>
   12a08:	ldr	r1, [r0]
   12a0c:	mov	r0, #6
   12a10:	mov	r2, #0
   12a14:	mov	r3, #39	; 0x27
   12a18:	str	r5, [sp]
   12a1c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12a20:	mov	r0, r4
   12a24:	bl	19dc0 <next@@Base>
   12a28:	ldr	r1, [r0]
   12a2c:	mov	r0, #9
   12a30:	mov	r2, #0
   12a34:	mov	r3, #41	; 0x29
   12a38:	str	r5, [sp]
   12a3c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12a40:	mov	r0, r4
   12a44:	bl	19a40 <destroy_lexer@@Base>
   12a48:	sub	sp, fp, #8
   12a4c:	pop	{r4, r5, fp, pc}
   12a50:	andeq	r0, r0, r1
   12a54:	andeq	r0, r0, r0
   12a58:	andeq	r0, r0, r1
   12a5c:	andeq	r0, r0, r0
   12a60:	ldrdeq	lr, [r1], -ip
   12a64:			; <UNDEFINED> instruction: 0x0000bdb8
   12a68:	nop	{0}
   12a6c:	nop	{0}

00012a70 <push_token_to_stack@@Base>:
   12a70:	push	{r4, r5, fp, lr}
   12a74:	add	fp, sp, #8
   12a78:	sub	sp, sp, #16
   12a7c:	ldr	r0, [pc, #140]	; 12b10 <push_token_to_stack@@Base+0xa0>
   12a80:	add	r1, pc, #120	; 0x78
   12a84:	add	r4, sp, #4
   12a88:	vld1.64	{d16-d17}, [r1 :128]
   12a8c:	add	r0, pc, r0
   12a90:	vld1.64	{d18-d19}, [r0 :128]
   12a94:	vadd.i64	q8, q9, q8
   12a98:	vst1.64	{d16-d17}, [r0 :128]
   12a9c:	mov	r0, r4
   12aa0:	ldr	r1, [pc, #108]	; 12b14 <push_token_to_stack@@Base+0xa4>
   12aa4:	add	r1, pc, r1
   12aa8:	bl	199f0 <init_lexer@@Base>
   12aac:	mov	r0, #8
   12ab0:	bl	126b0 <malloc@plt>
   12ab4:	mov	r5, r0
   12ab8:	mov	r0, r4
   12abc:	mov	r1, r5
   12ac0:	bl	19b50 <push_back@@Base>
   12ac4:	ldr	r0, [sp, #8]
   12ac8:	mov	r1, #148	; 0x94
   12acc:	mov	r2, #0
   12ad0:	mov	r3, #62	; 0x3e
   12ad4:	ldr	r0, [r0, #4]
   12ad8:	str	r1, [sp]
   12adc:	mov	r1, r5
   12ae0:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12ae4:	mov	r0, r4
   12ae8:	bl	19a40 <destroy_lexer@@Base>
   12aec:	mov	r0, r5
   12af0:	bl	12620 <free@plt>
   12af4:	sub	sp, fp, #8
   12af8:	pop	{r4, r5, fp, pc}
   12afc:	nop	{0}
   12b00:	andeq	r0, r0, r1
   12b04:	andeq	r0, r0, r0
   12b08:	andeq	r0, r0, r1
   12b0c:	andeq	r0, r0, r0
   12b10:	andeq	lr, r1, ip, lsr r7
   12b14:	andeq	fp, r0, r8, lsl #24
   12b18:	nop	{0}
   12b1c:	nop	{0}

00012b20 <push_two_tokens_to_stack@@Base>:
   12b20:	push	{r4, r5, r6, r7, fp, lr}
   12b24:	add	fp, sp, #16
   12b28:	sub	sp, sp, #16
   12b2c:	ldr	r0, [pc, #204]	; 12c00 <push_two_tokens_to_stack@@Base+0xe0>
   12b30:	add	r1, pc, #184	; 0xb8
   12b34:	add	r4, sp, #4
   12b38:	vld1.64	{d16-d17}, [r1 :128]
   12b3c:	add	r0, pc, r0
   12b40:	vld1.64	{d18-d19}, [r0 :128]
   12b44:	vadd.i64	q8, q9, q8
   12b48:	vst1.64	{d16-d17}, [r0 :128]
   12b4c:	mov	r0, r4
   12b50:	ldr	r1, [pc, #172]	; 12c04 <push_two_tokens_to_stack@@Base+0xe4>
   12b54:	add	r1, pc, r1
   12b58:	bl	199f0 <init_lexer@@Base>
   12b5c:	mov	r0, #8
   12b60:	bl	126b0 <malloc@plt>
   12b64:	mov	r5, r0
   12b68:	mov	r0, #8
   12b6c:	bl	126b0 <malloc@plt>
   12b70:	mov	r6, r0
   12b74:	mov	r0, r4
   12b78:	mov	r1, r5
   12b7c:	bl	19b50 <push_back@@Base>
   12b80:	ldr	r0, [sp, #8]
   12b84:	mov	r7, #148	; 0x94
   12b88:	mov	r1, r5
   12b8c:	mov	r2, #0
   12b90:	mov	r3, #86	; 0x56
   12b94:	ldr	r0, [r0, #4]
   12b98:	str	r7, [sp]
   12b9c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12ba0:	mov	r0, r4
   12ba4:	mov	r1, r6
   12ba8:	bl	19b50 <push_back@@Base>
   12bac:	ldr	r0, [sp, #8]
   12bb0:	mov	r1, r6
   12bb4:	mov	r2, #0
   12bb8:	mov	r3, #88	; 0x58
   12bbc:	ldr	r0, [r0, #4]
   12bc0:	str	r7, [sp]
   12bc4:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12bc8:	mov	r0, r4
   12bcc:	bl	19a40 <destroy_lexer@@Base>
   12bd0:	mov	r0, r5
   12bd4:	bl	12620 <free@plt>
   12bd8:	mov	r0, r6
   12bdc:	bl	12620 <free@plt>
   12be0:	sub	sp, fp, #16
   12be4:	pop	{r4, r5, r6, r7, fp, pc}
   12be8:	nop	{0}
   12bec:	nop	{0}
   12bf0:	andeq	r0, r0, r1
   12bf4:	andeq	r0, r0, r0
   12bf8:	andeq	r0, r0, r1
   12bfc:	andeq	r0, r0, r0
   12c00:	muleq	r1, ip, r6
   12c04:	andeq	fp, r0, r8, asr fp
   12c08:	nop	{0}
   12c0c:	nop	{0}

00012c10 <push_token_and_call_next@@Base>:
   12c10:	push	{r4, r5, fp, lr}
   12c14:	add	fp, sp, #8
   12c18:	sub	sp, sp, #16
   12c1c:	ldr	r0, [pc, #140]	; 12cb0 <push_token_and_call_next@@Base+0xa0>
   12c20:	add	r1, pc, #120	; 0x78
   12c24:	add	r4, sp, #4
   12c28:	vld1.64	{d16-d17}, [r1 :128]
   12c2c:	add	r0, pc, r0
   12c30:	vld1.64	{d18-d19}, [r0 :128]
   12c34:	vadd.i64	q8, q9, q8
   12c38:	vst1.64	{d16-d17}, [r0 :128]
   12c3c:	mov	r0, r4
   12c40:	ldr	r1, [pc, #108]	; 12cb4 <push_token_and_call_next@@Base+0xa4>
   12c44:	add	r1, pc, r1
   12c48:	bl	199f0 <init_lexer@@Base>
   12c4c:	mov	r0, #8
   12c50:	bl	126b0 <malloc@plt>
   12c54:	mov	r5, r0
   12c58:	mov	r0, r4
   12c5c:	mov	r1, r5
   12c60:	bl	19b50 <push_back@@Base>
   12c64:	mov	r0, r4
   12c68:	bl	19dc0 <next@@Base>
   12c6c:	mov	r1, r0
   12c70:	mov	r0, #148	; 0x94
   12c74:	mov	r2, #0
   12c78:	mov	r3, #113	; 0x71
   12c7c:	str	r0, [sp]
   12c80:	mov	r0, r5
   12c84:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12c88:	mov	r0, r4
   12c8c:	bl	19a40 <destroy_lexer@@Base>
   12c90:	mov	r0, r5
   12c94:	bl	12620 <free@plt>
   12c98:	sub	sp, fp, #8
   12c9c:	pop	{r4, r5, fp, pc}
   12ca0:	andeq	r0, r0, r1
   12ca4:	andeq	r0, r0, r0
   12ca8:	andeq	r0, r0, r1
   12cac:	andeq	r0, r0, r0
   12cb0:			; <UNDEFINED> instruction: 0x0001e5bc
   12cb4:	andeq	fp, r0, r8, ror #20
   12cb8:	nop	{0}
   12cbc:	nop	{0}

00012cc0 <if_without_else@@Base>:
   12cc0:	push	{r4, r5, fp, lr}
   12cc4:	add	fp, sp, #8
   12cc8:	sub	sp, sp, #16
   12ccc:	ldr	r0, [pc, #748]	; 12fc0 <if_without_else@@Base+0x300>
   12cd0:	add	r1, pc, #728	; 0x2d8
   12cd4:	add	r4, sp, #4
   12cd8:	vld1.64	{d16-d17}, [r1 :128]
   12cdc:	add	r0, pc, r0
   12ce0:	vld1.64	{d18-d19}, [r0 :128]
   12ce4:	vadd.i64	q8, q9, q8
   12ce8:	vst1.64	{d16-d17}, [r0 :128]
   12cec:	mov	r0, r4
   12cf0:	ldr	r1, [pc, #716]	; 12fc4 <if_without_else@@Base+0x304>
   12cf4:	add	r1, pc, r1
   12cf8:	bl	199f0 <init_lexer@@Base>
   12cfc:	mov	r0, r4
   12d00:	bl	19dc0 <next@@Base>
   12d04:	ldr	r1, [r0]
   12d08:	mov	r5, #148	; 0x94
   12d0c:	mov	r0, #0
   12d10:	mov	r2, #0
   12d14:	mov	r3, #140	; 0x8c
   12d18:	str	r5, [sp]
   12d1c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12d20:	mov	r0, r4
   12d24:	bl	19dc0 <next@@Base>
   12d28:	ldr	r1, [r0]
   12d2c:	mov	r0, #2
   12d30:	mov	r2, #0
   12d34:	mov	r3, #142	; 0x8e
   12d38:	str	r5, [sp]
   12d3c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12d40:	mov	r0, r4
   12d44:	bl	19dc0 <next@@Base>
   12d48:	ldr	r1, [r0]
   12d4c:	mov	r0, #3
   12d50:	mov	r2, #0
   12d54:	mov	r3, #144	; 0x90
   12d58:	str	r5, [sp]
   12d5c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12d60:	mov	r0, r4
   12d64:	bl	19dc0 <next@@Base>
   12d68:	ldr	r1, [r0]
   12d6c:	mov	r0, #4
   12d70:	mov	r2, #0
   12d74:	mov	r3, #146	; 0x92
   12d78:	str	r5, [sp]
   12d7c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12d80:	mov	r0, r4
   12d84:	bl	19dc0 <next@@Base>
   12d88:	ldr	r1, [r0]
   12d8c:	mov	r0, #5
   12d90:	mov	r2, #0
   12d94:	mov	r3, #148	; 0x94
   12d98:	str	r5, [sp]
   12d9c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12da0:	mov	r0, r4
   12da4:	bl	19dc0 <next@@Base>
   12da8:	ldr	r1, [r0]
   12dac:	mov	r0, #10
   12db0:	mov	r2, #0
   12db4:	mov	r3, #150	; 0x96
   12db8:	str	r5, [sp]
   12dbc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12dc0:	mov	r0, r4
   12dc4:	bl	19dc0 <next@@Base>
   12dc8:	ldr	r1, [r0]
   12dcc:	mov	r0, #3
   12dd0:	mov	r2, #0
   12dd4:	mov	r3, #152	; 0x98
   12dd8:	str	r5, [sp]
   12ddc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12de0:	mov	r0, r4
   12de4:	bl	19dc0 <next@@Base>
   12de8:	ldr	r1, [r0]
   12dec:	mov	r0, #1
   12df0:	mov	r2, #0
   12df4:	mov	r3, #154	; 0x9a
   12df8:	str	r5, [sp]
   12dfc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12e00:	mov	r0, r4
   12e04:	bl	19dc0 <next@@Base>
   12e08:	ldr	r1, [r0]
   12e0c:	mov	r0, #12
   12e10:	mov	r2, #0
   12e14:	mov	r3, #156	; 0x9c
   12e18:	str	r5, [sp]
   12e1c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12e20:	mov	r0, r4
   12e24:	bl	19dc0 <next@@Base>
   12e28:	ldr	r1, [r0]
   12e2c:	mov	r0, #1
   12e30:	mov	r2, #0
   12e34:	mov	r3, #158	; 0x9e
   12e38:	str	r5, [sp]
   12e3c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12e40:	mov	r0, r4
   12e44:	bl	19dc0 <next@@Base>
   12e48:	ldr	r1, [r0]
   12e4c:	mov	r0, #4
   12e50:	mov	r2, #0
   12e54:	mov	r3, #160	; 0xa0
   12e58:	str	r5, [sp]
   12e5c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12e60:	mov	r0, r4
   12e64:	bl	19dc0 <next@@Base>
   12e68:	ldr	r1, [r0]
   12e6c:	mov	r0, #5
   12e70:	mov	r2, #0
   12e74:	mov	r3, #162	; 0xa2
   12e78:	str	r5, [sp]
   12e7c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12e80:	mov	r0, r4
   12e84:	bl	19dc0 <next@@Base>
   12e88:	ldr	r1, [r0]
   12e8c:	mov	r0, #7
   12e90:	mov	r2, #0
   12e94:	mov	r3, #164	; 0xa4
   12e98:	str	r5, [sp]
   12e9c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12ea0:	mov	r0, r4
   12ea4:	bl	19dc0 <next@@Base>
   12ea8:	ldr	r1, [r0]
   12eac:	mov	r0, #1
   12eb0:	mov	r2, #0
   12eb4:	mov	r3, #166	; 0xa6
   12eb8:	str	r5, [sp]
   12ebc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12ec0:	mov	r0, r4
   12ec4:	bl	19dc0 <next@@Base>
   12ec8:	ldr	r1, [r0]
   12ecc:	mov	r0, #8
   12ed0:	mov	r2, #0
   12ed4:	mov	r3, #168	; 0xa8
   12ed8:	str	r5, [sp]
   12edc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12ee0:	mov	r0, r4
   12ee4:	bl	19dc0 <next@@Base>
   12ee8:	ldr	r1, [r0]
   12eec:	mov	r0, #6
   12ef0:	mov	r2, #0
   12ef4:	mov	r3, #170	; 0xaa
   12ef8:	str	r5, [sp]
   12efc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12f00:	mov	r0, r4
   12f04:	bl	19dc0 <next@@Base>
   12f08:	ldr	r1, [r0]
   12f0c:	mov	r0, #7
   12f10:	mov	r2, #0
   12f14:	mov	r3, #172	; 0xac
   12f18:	str	r5, [sp]
   12f1c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12f20:	mov	r0, r4
   12f24:	bl	19dc0 <next@@Base>
   12f28:	ldr	r1, [r0]
   12f2c:	mov	r0, #1
   12f30:	mov	r2, #0
   12f34:	mov	r3, #174	; 0xae
   12f38:	str	r5, [sp]
   12f3c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12f40:	mov	r0, r4
   12f44:	bl	19dc0 <next@@Base>
   12f48:	ldr	r1, [r0]
   12f4c:	mov	r0, #8
   12f50:	mov	r2, #0
   12f54:	mov	r3, #176	; 0xb0
   12f58:	str	r5, [sp]
   12f5c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12f60:	mov	r0, r4
   12f64:	bl	19dc0 <next@@Base>
   12f68:	ldr	r1, [r0]
   12f6c:	mov	r0, #6
   12f70:	mov	r2, #0
   12f74:	mov	r3, #178	; 0xb2
   12f78:	str	r5, [sp]
   12f7c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12f80:	mov	r0, r4
   12f84:	bl	19dc0 <next@@Base>
   12f88:	ldr	r1, [r0]
   12f8c:	mov	r0, #9
   12f90:	mov	r2, #0
   12f94:	mov	r3, #180	; 0xb4
   12f98:	str	r5, [sp]
   12f9c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   12fa0:	mov	r0, r4
   12fa4:	bl	19a40 <destroy_lexer@@Base>
   12fa8:	sub	sp, fp, #8
   12fac:	pop	{r4, r5, fp, pc}
   12fb0:	andeq	r0, r0, r1
   12fb4:	andeq	r0, r0, r0
   12fb8:	andeq	r0, r0, r1
   12fbc:	andeq	r0, r0, r0
   12fc0:	andeq	lr, r1, ip, lsl r5
   12fc4:	ldrdeq	fp, [r0], -r2
   12fc8:	nop	{0}
   12fcc:	nop	{0}

00012fd0 <if_with_else@@Base>:
   12fd0:	push	{r4, r5, fp, lr}
   12fd4:	add	fp, sp, #8
   12fd8:	sub	sp, sp, #16
   12fdc:	ldr	r0, [pc, #940]	; 13390 <if_with_else@@Base+0x3c0>
   12fe0:	add	r1, pc, #920	; 0x398
   12fe4:	add	r4, sp, #4
   12fe8:	vld1.64	{d16-d17}, [r1 :128]
   12fec:	add	r0, pc, r0
   12ff0:	vld1.64	{d18-d19}, [r0 :128]
   12ff4:	vadd.i64	q8, q9, q8
   12ff8:	vst1.64	{d16-d17}, [r0 :128]
   12ffc:	mov	r0, r4
   13000:	ldr	r1, [pc, #908]	; 13394 <if_with_else@@Base+0x3c4>
   13004:	add	r1, pc, r1
   13008:	bl	199f0 <init_lexer@@Base>
   1300c:	mov	r0, r4
   13010:	bl	19dc0 <next@@Base>
   13014:	ldr	r1, [r0]
   13018:	mov	r5, #148	; 0x94
   1301c:	mov	r0, #0
   13020:	mov	r2, #0
   13024:	mov	r3, #210	; 0xd2
   13028:	str	r5, [sp]
   1302c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13030:	mov	r0, r4
   13034:	bl	19dc0 <next@@Base>
   13038:	ldr	r1, [r0]
   1303c:	mov	r0, #2
   13040:	mov	r2, #0
   13044:	mov	r3, #212	; 0xd4
   13048:	str	r5, [sp]
   1304c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13050:	mov	r0, r4
   13054:	bl	19dc0 <next@@Base>
   13058:	ldr	r1, [r0]
   1305c:	mov	r0, #3
   13060:	mov	r2, #0
   13064:	mov	r3, #214	; 0xd6
   13068:	str	r5, [sp]
   1306c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13070:	mov	r0, r4
   13074:	bl	19dc0 <next@@Base>
   13078:	ldr	r1, [r0]
   1307c:	mov	r0, #4
   13080:	mov	r2, #0
   13084:	mov	r3, #216	; 0xd8
   13088:	str	r5, [sp]
   1308c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13090:	mov	r0, r4
   13094:	bl	19dc0 <next@@Base>
   13098:	ldr	r1, [r0]
   1309c:	mov	r0, #5
   130a0:	mov	r2, #0
   130a4:	mov	r3, #218	; 0xda
   130a8:	str	r5, [sp]
   130ac:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   130b0:	mov	r0, r4
   130b4:	bl	19dc0 <next@@Base>
   130b8:	ldr	r1, [r0]
   130bc:	mov	r0, #10
   130c0:	mov	r2, #0
   130c4:	mov	r3, #220	; 0xdc
   130c8:	str	r5, [sp]
   130cc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   130d0:	mov	r0, r4
   130d4:	bl	19dc0 <next@@Base>
   130d8:	ldr	r1, [r0]
   130dc:	mov	r0, #3
   130e0:	mov	r2, #0
   130e4:	mov	r3, #222	; 0xde
   130e8:	str	r5, [sp]
   130ec:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   130f0:	mov	r0, r4
   130f4:	bl	19dc0 <next@@Base>
   130f8:	ldr	r1, [r0]
   130fc:	mov	r0, #1
   13100:	mov	r2, #0
   13104:	mov	r3, #224	; 0xe0
   13108:	str	r5, [sp]
   1310c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13110:	mov	r0, r4
   13114:	bl	19dc0 <next@@Base>
   13118:	ldr	r1, [r0]
   1311c:	mov	r0, #12
   13120:	mov	r2, #0
   13124:	mov	r3, #226	; 0xe2
   13128:	str	r5, [sp]
   1312c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13130:	mov	r0, r4
   13134:	bl	19dc0 <next@@Base>
   13138:	ldr	r1, [r0]
   1313c:	mov	r0, #1
   13140:	mov	r2, #0
   13144:	mov	r3, #228	; 0xe4
   13148:	str	r5, [sp]
   1314c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13150:	mov	r0, r4
   13154:	bl	19dc0 <next@@Base>
   13158:	ldr	r1, [r0]
   1315c:	mov	r0, #4
   13160:	mov	r2, #0
   13164:	mov	r3, #230	; 0xe6
   13168:	str	r5, [sp]
   1316c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13170:	mov	r0, r4
   13174:	bl	19dc0 <next@@Base>
   13178:	ldr	r1, [r0]
   1317c:	mov	r0, #5
   13180:	mov	r2, #0
   13184:	mov	r3, #232	; 0xe8
   13188:	str	r5, [sp]
   1318c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13190:	mov	r0, r4
   13194:	bl	19dc0 <next@@Base>
   13198:	ldr	r1, [r0]
   1319c:	mov	r0, #7
   131a0:	mov	r2, #0
   131a4:	mov	r3, #234	; 0xea
   131a8:	str	r5, [sp]
   131ac:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   131b0:	mov	r0, r4
   131b4:	bl	19dc0 <next@@Base>
   131b8:	ldr	r1, [r0]
   131bc:	mov	r0, #1
   131c0:	mov	r2, #0
   131c4:	mov	r3, #236	; 0xec
   131c8:	str	r5, [sp]
   131cc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   131d0:	mov	r0, r4
   131d4:	bl	19dc0 <next@@Base>
   131d8:	ldr	r1, [r0]
   131dc:	mov	r0, #8
   131e0:	mov	r2, #0
   131e4:	mov	r3, #238	; 0xee
   131e8:	str	r5, [sp]
   131ec:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   131f0:	mov	r0, r4
   131f4:	bl	19dc0 <next@@Base>
   131f8:	ldr	r1, [r0]
   131fc:	mov	r0, #6
   13200:	mov	r2, #0
   13204:	mov	r3, #240	; 0xf0
   13208:	str	r5, [sp]
   1320c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13210:	mov	r0, r4
   13214:	bl	19dc0 <next@@Base>
   13218:	ldr	r1, [r0]
   1321c:	mov	r0, #11
   13220:	mov	r2, #0
   13224:	mov	r3, #242	; 0xf2
   13228:	str	r5, [sp]
   1322c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13230:	mov	r0, r4
   13234:	bl	19dc0 <next@@Base>
   13238:	ldr	r1, [r0]
   1323c:	mov	r0, #5
   13240:	mov	r2, #0
   13244:	mov	r3, #244	; 0xf4
   13248:	str	r5, [sp]
   1324c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13250:	mov	r0, r4
   13254:	bl	19dc0 <next@@Base>
   13258:	ldr	r1, [r0]
   1325c:	mov	r0, #7
   13260:	mov	r2, #0
   13264:	mov	r3, #246	; 0xf6
   13268:	str	r5, [sp]
   1326c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13270:	mov	r0, r4
   13274:	bl	19dc0 <next@@Base>
   13278:	ldr	r1, [r0]
   1327c:	mov	r0, #1
   13280:	mov	r2, #0
   13284:	mov	r3, #248	; 0xf8
   13288:	str	r5, [sp]
   1328c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13290:	mov	r0, r4
   13294:	bl	19dc0 <next@@Base>
   13298:	ldr	r1, [r0]
   1329c:	mov	r0, #8
   132a0:	mov	r2, #0
   132a4:	mov	r3, #250	; 0xfa
   132a8:	str	r5, [sp]
   132ac:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   132b0:	mov	r0, r4
   132b4:	bl	19dc0 <next@@Base>
   132b8:	ldr	r1, [r0]
   132bc:	mov	r0, #6
   132c0:	mov	r2, #0
   132c4:	mov	r3, #252	; 0xfc
   132c8:	str	r5, [sp]
   132cc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   132d0:	mov	r0, r4
   132d4:	bl	19dc0 <next@@Base>
   132d8:	ldr	r1, [r0]
   132dc:	mov	r0, #7
   132e0:	mov	r2, #0
   132e4:	mov	r3, #254	; 0xfe
   132e8:	str	r5, [sp]
   132ec:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   132f0:	mov	r0, r4
   132f4:	bl	19dc0 <next@@Base>
   132f8:	ldr	r1, [r0]
   132fc:	mov	r0, #1
   13300:	mov	r2, #0
   13304:	mov	r3, #256	; 0x100
   13308:	str	r5, [sp]
   1330c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13310:	mov	r0, r4
   13314:	bl	19dc0 <next@@Base>
   13318:	ldr	r1, [r0]
   1331c:	mov	r0, #8
   13320:	mov	r2, #0
   13324:	movw	r3, #258	; 0x102
   13328:	str	r5, [sp]
   1332c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13330:	mov	r0, r4
   13334:	bl	19dc0 <next@@Base>
   13338:	ldr	r1, [r0]
   1333c:	mov	r0, #6
   13340:	mov	r2, #0
   13344:	mov	r3, #260	; 0x104
   13348:	str	r5, [sp]
   1334c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13350:	mov	r0, r4
   13354:	bl	19dc0 <next@@Base>
   13358:	ldr	r1, [r0]
   1335c:	mov	r0, #9
   13360:	mov	r2, #0
   13364:	movw	r3, #262	; 0x106
   13368:	str	r5, [sp]
   1336c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13370:	mov	r0, r4
   13374:	bl	19a40 <destroy_lexer@@Base>
   13378:	sub	sp, fp, #8
   1337c:	pop	{r4, r5, fp, pc}
   13380:	andeq	r0, r0, r1
   13384:	andeq	r0, r0, r0
   13388:	andeq	r0, r0, r1
   1338c:	andeq	r0, r0, r0
   13390:	andeq	lr, r1, ip, lsl r2
   13394:	strdeq	fp, [r0], -fp	; <UNPREDICTABLE>
   13398:	nop	{0}
   1339c:	nop	{0}

000133a0 <read_token_int_type@@Base>:
   133a0:	push	{r4, sl, fp, lr}
   133a4:	add	fp, sp, #8
   133a8:	sub	sp, sp, #16
   133ac:	ldr	r0, [pc, #108]	; 13420 <read_token_int_type@@Base+0x80>
   133b0:	add	r1, pc, #88	; 0x58
   133b4:	add	r4, sp, #4
   133b8:	vld1.64	{d16-d17}, [r1 :128]
   133bc:	add	r0, pc, r0
   133c0:	vld1.64	{d18-d19}, [r0 :128]
   133c4:	vadd.i64	q8, q9, q8
   133c8:	vst1.64	{d16-d17}, [r0 :128]
   133cc:	mov	r0, r4
   133d0:	ldr	r1, [pc, #76]	; 13424 <read_token_int_type@@Base+0x84>
   133d4:	add	r1, pc, r1
   133d8:	bl	199f0 <init_lexer@@Base>
   133dc:	mov	r0, r4
   133e0:	bl	19dc0 <next@@Base>
   133e4:	ldr	r1, [r0]
   133e8:	mov	r0, #148	; 0x94
   133ec:	mov	r2, #0
   133f0:	movw	r3, #279	; 0x117
   133f4:	str	r0, [sp]
   133f8:	mov	r0, #0
   133fc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13400:	mov	r0, r4
   13404:	bl	19a40 <destroy_lexer@@Base>
   13408:	sub	sp, fp, #8
   1340c:	pop	{r4, sl, fp, pc}
   13410:	andeq	r0, r0, r1
   13414:	andeq	r0, r0, r0
   13418:	andeq	r0, r0, r1
   1341c:	andeq	r0, r0, r0
   13420:	andeq	sp, r1, ip, asr lr
   13424:	andeq	fp, r0, pc, ror #24
   13428:	nop	{0}
   1342c:	nop	{0}

00013430 <read_token_int_value@@Base>:
   13430:	push	{r4, sl, fp, lr}
   13434:	add	fp, sp, #8
   13438:	sub	sp, sp, #16
   1343c:	ldr	r0, [pc, #108]	; 134b0 <read_token_int_value@@Base+0x80>
   13440:	add	r1, pc, #88	; 0x58
   13444:	add	r4, sp, #4
   13448:	vld1.64	{d16-d17}, [r1 :128]
   1344c:	add	r0, pc, r0
   13450:	vld1.64	{d18-d19}, [r0 :128]
   13454:	vadd.i64	q8, q9, q8
   13458:	vst1.64	{d16-d17}, [r0 :128]
   1345c:	mov	r0, r4
   13460:	ldr	r1, [pc, #76]	; 134b4 <read_token_int_value@@Base+0x84>
   13464:	add	r1, pc, r1
   13468:	bl	199f0 <init_lexer@@Base>
   1346c:	mov	r0, r4
   13470:	bl	19dc0 <next@@Base>
   13474:	ldr	r1, [r0]
   13478:	mov	r0, #148	; 0x94
   1347c:	mov	r2, #0
   13480:	mov	r3, #296	; 0x128
   13484:	str	r0, [sp]
   13488:	mov	r0, #1
   1348c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13490:	mov	r0, r4
   13494:	bl	19a40 <destroy_lexer@@Base>
   13498:	sub	sp, fp, #8
   1349c:	pop	{r4, sl, fp, pc}
   134a0:	andeq	r0, r0, r1
   134a4:	andeq	r0, r0, r0
   134a8:	andeq	r0, r0, r1
   134ac:	andeq	r0, r0, r0
   134b0:	ldrdeq	sp, [r1], -ip
   134b4:	andeq	fp, r0, ip, ror #5
   134b8:	nop	{0}
   134bc:	nop	{0}

000134c0 <read_token_function@@Base>:
   134c0:	push	{r4, sl, fp, lr}
   134c4:	add	fp, sp, #8
   134c8:	sub	sp, sp, #16
   134cc:	ldr	r0, [pc, #108]	; 13540 <read_token_function@@Base+0x80>
   134d0:	add	r1, pc, #88	; 0x58
   134d4:	add	r4, sp, #4
   134d8:	vld1.64	{d16-d17}, [r1 :128]
   134dc:	add	r0, pc, r0
   134e0:	vld1.64	{d18-d19}, [r0 :128]
   134e4:	vadd.i64	q8, q9, q8
   134e8:	vst1.64	{d16-d17}, [r0 :128]
   134ec:	mov	r0, r4
   134f0:	ldr	r1, [pc, #76]	; 13544 <read_token_function@@Base+0x84>
   134f4:	add	r1, pc, r1
   134f8:	bl	199f0 <init_lexer@@Base>
   134fc:	mov	r0, r4
   13500:	bl	19dc0 <next@@Base>
   13504:	ldr	r1, [r0]
   13508:	mov	r0, #148	; 0x94
   1350c:	mov	r2, #0
   13510:	movw	r3, #313	; 0x139
   13514:	str	r0, [sp]
   13518:	mov	r0, #2
   1351c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13520:	mov	r0, r4
   13524:	bl	19a40 <destroy_lexer@@Base>
   13528:	sub	sp, fp, #8
   1352c:	pop	{r4, sl, fp, pc}
   13530:	andeq	r0, r0, r1
   13534:	andeq	r0, r0, r0
   13538:	andeq	r0, r0, r1
   1353c:	andeq	r0, r0, r0
   13540:	andeq	sp, r1, ip, asr sp
   13544:	andeq	fp, r0, pc, lsl #7
   13548:	nop	{0}
   1354c:	nop	{0}

00013550 <read_token_opar@@Base>:
   13550:	push	{r4, sl, fp, lr}
   13554:	add	fp, sp, #8
   13558:	sub	sp, sp, #16
   1355c:	ldr	r0, [pc, #108]	; 135d0 <read_token_opar@@Base+0x80>
   13560:	add	r1, pc, #88	; 0x58
   13564:	add	r4, sp, #4
   13568:	vld1.64	{d16-d17}, [r1 :128]
   1356c:	add	r0, pc, r0
   13570:	vld1.64	{d18-d19}, [r0 :128]
   13574:	vadd.i64	q8, q9, q8
   13578:	vst1.64	{d16-d17}, [r0 :128]
   1357c:	mov	r0, r4
   13580:	ldr	r1, [pc, #76]	; 135d4 <read_token_opar@@Base+0x84>
   13584:	add	r1, pc, r1
   13588:	bl	199f0 <init_lexer@@Base>
   1358c:	mov	r0, r4
   13590:	bl	19dc0 <next@@Base>
   13594:	ldr	r1, [r0]
   13598:	mov	r0, #148	; 0x94
   1359c:	mov	r2, #0
   135a0:	movw	r3, #330	; 0x14a
   135a4:	str	r0, [sp]
   135a8:	mov	r0, #3
   135ac:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   135b0:	mov	r0, r4
   135b4:	bl	19a40 <destroy_lexer@@Base>
   135b8:	sub	sp, fp, #8
   135bc:	pop	{r4, sl, fp, pc}
   135c0:	andeq	r0, r0, r1
   135c4:	andeq	r0, r0, r0
   135c8:	andeq	r0, r0, r1
   135cc:	andeq	r0, r0, r0
   135d0:	ldrdeq	sp, [r1], -ip
   135d4:	ldrdeq	fp, [r0], -r1
   135d8:	nop	{0}
   135dc:	nop	{0}

000135e0 <read_token_cpar@@Base>:
   135e0:	push	{r4, sl, fp, lr}
   135e4:	add	fp, sp, #8
   135e8:	sub	sp, sp, #16
   135ec:	ldr	r0, [pc, #108]	; 13660 <read_token_cpar@@Base+0x80>
   135f0:	add	r1, pc, #88	; 0x58
   135f4:	add	r4, sp, #4
   135f8:	vld1.64	{d16-d17}, [r1 :128]
   135fc:	add	r0, pc, r0
   13600:	vld1.64	{d18-d19}, [r0 :128]
   13604:	vadd.i64	q8, q9, q8
   13608:	vst1.64	{d16-d17}, [r0 :128]
   1360c:	mov	r0, r4
   13610:	ldr	r1, [pc, #76]	; 13664 <read_token_cpar@@Base+0x84>
   13614:	add	r1, pc, r1
   13618:	bl	199f0 <init_lexer@@Base>
   1361c:	mov	r0, r4
   13620:	bl	19dc0 <next@@Base>
   13624:	ldr	r1, [r0]
   13628:	mov	r0, #148	; 0x94
   1362c:	mov	r2, #0
   13630:	movw	r3, #347	; 0x15b
   13634:	str	r0, [sp]
   13638:	mov	r0, #4
   1363c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13640:	mov	r0, r4
   13644:	bl	19a40 <destroy_lexer@@Base>
   13648:	sub	sp, fp, #8
   1364c:	pop	{r4, sl, fp, pc}
   13650:	andeq	r0, r0, r1
   13654:	andeq	r0, r0, r0
   13658:	andeq	r0, r0, r1
   1365c:	andeq	r0, r0, r0
   13660:	andeq	sp, r1, ip, asr ip
   13664:	andeq	fp, r0, r3, asr #2
   13668:	nop	{0}
   1366c:	nop	{0}

00013670 <read_token_obra@@Base>:
   13670:	push	{r4, sl, fp, lr}
   13674:	add	fp, sp, #8
   13678:	sub	sp, sp, #16
   1367c:	ldr	r0, [pc, #108]	; 136f0 <read_token_obra@@Base+0x80>
   13680:	add	r1, pc, #88	; 0x58
   13684:	add	r4, sp, #4
   13688:	vld1.64	{d16-d17}, [r1 :128]
   1368c:	add	r0, pc, r0
   13690:	vld1.64	{d18-d19}, [r0 :128]
   13694:	vadd.i64	q8, q9, q8
   13698:	vst1.64	{d16-d17}, [r0 :128]
   1369c:	mov	r0, r4
   136a0:	ldr	r1, [pc, #76]	; 136f4 <read_token_obra@@Base+0x84>
   136a4:	add	r1, pc, r1
   136a8:	bl	199f0 <init_lexer@@Base>
   136ac:	mov	r0, r4
   136b0:	bl	19dc0 <next@@Base>
   136b4:	ldr	r1, [r0]
   136b8:	mov	r0, #148	; 0x94
   136bc:	mov	r2, #0
   136c0:	mov	r3, #364	; 0x16c
   136c4:	str	r0, [sp]
   136c8:	mov	r0, #5
   136cc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   136d0:	mov	r0, r4
   136d4:	bl	19a40 <destroy_lexer@@Base>
   136d8:	sub	sp, fp, #8
   136dc:	pop	{r4, sl, fp, pc}
   136e0:	andeq	r0, r0, r1
   136e4:	andeq	r0, r0, r0
   136e8:	andeq	r0, r0, r1
   136ec:	andeq	r0, r0, r0
   136f0:	ldrdeq	sp, [r1], -ip
   136f4:	strheq	fp, [r0], -r5
   136f8:	nop	{0}
   136fc:	nop	{0}

00013700 <read_token_cbra@@Base>:
   13700:	push	{r4, sl, fp, lr}
   13704:	add	fp, sp, #8
   13708:	sub	sp, sp, #16
   1370c:	ldr	r0, [pc, #108]	; 13780 <read_token_cbra@@Base+0x80>
   13710:	add	r1, pc, #88	; 0x58
   13714:	add	r4, sp, #4
   13718:	vld1.64	{d16-d17}, [r1 :128]
   1371c:	add	r0, pc, r0
   13720:	vld1.64	{d18-d19}, [r0 :128]
   13724:	vadd.i64	q8, q9, q8
   13728:	vst1.64	{d16-d17}, [r0 :128]
   1372c:	mov	r0, r4
   13730:	ldr	r1, [pc, #76]	; 13784 <read_token_cbra@@Base+0x84>
   13734:	add	r1, pc, r1
   13738:	bl	199f0 <init_lexer@@Base>
   1373c:	mov	r0, r4
   13740:	bl	19dc0 <next@@Base>
   13744:	ldr	r1, [r0]
   13748:	mov	r0, #148	; 0x94
   1374c:	mov	r2, #0
   13750:	movw	r3, #382	; 0x17e
   13754:	str	r0, [sp]
   13758:	mov	r0, #6
   1375c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13760:	mov	r0, r4
   13764:	bl	19a40 <destroy_lexer@@Base>
   13768:	sub	sp, fp, #8
   1376c:	pop	{r4, sl, fp, pc}
   13770:	andeq	r0, r0, r1
   13774:	andeq	r0, r0, r0
   13778:	andeq	r0, r0, r1
   1377c:	andeq	r0, r0, r0
   13780:	andeq	sp, r1, ip, asr fp
   13784:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   13788:	nop	{0}
   1378c:	nop	{0}

00013790 <read_token_return@@Base>:
   13790:	push	{r4, sl, fp, lr}
   13794:	add	fp, sp, #8
   13798:	sub	sp, sp, #16
   1379c:	ldr	r0, [pc, #108]	; 13810 <read_token_return@@Base+0x80>
   137a0:	add	r1, pc, #88	; 0x58
   137a4:	add	r4, sp, #4
   137a8:	vld1.64	{d16-d17}, [r1 :128]
   137ac:	add	r0, pc, r0
   137b0:	vld1.64	{d18-d19}, [r0 :128]
   137b4:	vadd.i64	q8, q9, q8
   137b8:	vst1.64	{d16-d17}, [r0 :128]
   137bc:	mov	r0, r4
   137c0:	ldr	r1, [pc, #76]	; 13814 <read_token_return@@Base+0x84>
   137c4:	add	r1, pc, r1
   137c8:	bl	199f0 <init_lexer@@Base>
   137cc:	mov	r0, r4
   137d0:	bl	19dc0 <next@@Base>
   137d4:	ldr	r1, [r0]
   137d8:	mov	r0, #148	; 0x94
   137dc:	mov	r2, #0
   137e0:	movw	r3, #399	; 0x18f
   137e4:	str	r0, [sp]
   137e8:	mov	r0, #7
   137ec:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   137f0:	mov	r0, r4
   137f4:	bl	19a40 <destroy_lexer@@Base>
   137f8:	sub	sp, fp, #8
   137fc:	pop	{r4, sl, fp, pc}
   13800:	andeq	r0, r0, r1
   13804:	andeq	r0, r0, r0
   13808:	andeq	r0, r0, r1
   1380c:	andeq	r0, r0, r0
   13810:	ldrdeq	sp, [r1], -ip
   13814:	muleq	r0, r7, pc	; <UNPREDICTABLE>
   13818:	nop	{0}
   1381c:	nop	{0}

00013820 <read_token_semicolon@@Base>:
   13820:	push	{r4, sl, fp, lr}
   13824:	add	fp, sp, #8
   13828:	sub	sp, sp, #16
   1382c:	ldr	r0, [pc, #108]	; 138a0 <read_token_semicolon@@Base+0x80>
   13830:	add	r1, pc, #88	; 0x58
   13834:	add	r4, sp, #4
   13838:	vld1.64	{d16-d17}, [r1 :128]
   1383c:	add	r0, pc, r0
   13840:	vld1.64	{d18-d19}, [r0 :128]
   13844:	vadd.i64	q8, q9, q8
   13848:	vst1.64	{d16-d17}, [r0 :128]
   1384c:	mov	r0, r4
   13850:	ldr	r1, [pc, #76]	; 138a4 <read_token_semicolon@@Base+0x84>
   13854:	add	r1, pc, r1
   13858:	bl	199f0 <init_lexer@@Base>
   1385c:	mov	r0, r4
   13860:	bl	19dc0 <next@@Base>
   13864:	ldr	r1, [r0]
   13868:	mov	r0, #148	; 0x94
   1386c:	mov	r2, #0
   13870:	mov	r3, #416	; 0x1a0
   13874:	str	r0, [sp]
   13878:	mov	r0, #8
   1387c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13880:	mov	r0, r4
   13884:	bl	19a40 <destroy_lexer@@Base>
   13888:	sub	sp, fp, #8
   1388c:	pop	{r4, sl, fp, pc}
   13890:	andeq	r0, r0, r1
   13894:	andeq	r0, r0, r0
   13898:	andeq	r0, r0, r1
   1389c:	andeq	r0, r0, r0
   138a0:	andeq	sp, r1, ip, asr sl
   138a4:	andeq	sl, r0, lr, lsl #30
   138a8:	nop	{0}
   138ac:	nop	{0}

000138b0 <read_token_eof@@Base>:
   138b0:	push	{r4, sl, fp, lr}
   138b4:	add	fp, sp, #8
   138b8:	sub	sp, sp, #16
   138bc:	ldr	r0, [pc, #108]	; 13930 <read_token_eof@@Base+0x80>
   138c0:	add	r1, pc, #88	; 0x58
   138c4:	add	r4, sp, #4
   138c8:	vld1.64	{d16-d17}, [r1 :128]
   138cc:	add	r0, pc, r0
   138d0:	vld1.64	{d18-d19}, [r0 :128]
   138d4:	vadd.i64	q8, q9, q8
   138d8:	vst1.64	{d16-d17}, [r0 :128]
   138dc:	mov	r0, r4
   138e0:	ldr	r1, [pc, #76]	; 13934 <read_token_eof@@Base+0x84>
   138e4:	add	r1, pc, r1
   138e8:	bl	199f0 <init_lexer@@Base>
   138ec:	mov	r0, r4
   138f0:	bl	19dc0 <next@@Base>
   138f4:	ldr	r1, [r0]
   138f8:	mov	r0, #148	; 0x94
   138fc:	mov	r2, #0
   13900:	movw	r3, #433	; 0x1b1
   13904:	str	r0, [sp]
   13908:	mov	r0, #9
   1390c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13910:	mov	r0, r4
   13914:	bl	19a40 <destroy_lexer@@Base>
   13918:	sub	sp, fp, #8
   1391c:	pop	{r4, sl, fp, pc}
   13920:	andeq	r0, r0, r1
   13924:	andeq	r0, r0, r0
   13928:	andeq	r0, r0, r1
   1392c:	andeq	r0, r0, r0
   13930:	ldrdeq	sp, [r1], -ip
   13934:	andeq	fp, r0, r5, asr #26
   13938:	nop	{0}
   1393c:	nop	{0}

00013940 <read_token_if@@Base>:
   13940:	push	{r4, sl, fp, lr}
   13944:	add	fp, sp, #8
   13948:	sub	sp, sp, #16
   1394c:	ldr	r0, [pc, #108]	; 139c0 <read_token_if@@Base+0x80>
   13950:	add	r1, pc, #88	; 0x58
   13954:	add	r4, sp, #4
   13958:	vld1.64	{d16-d17}, [r1 :128]
   1395c:	add	r0, pc, r0
   13960:	vld1.64	{d18-d19}, [r0 :128]
   13964:	vadd.i64	q8, q9, q8
   13968:	vst1.64	{d16-d17}, [r0 :128]
   1396c:	mov	r0, r4
   13970:	ldr	r1, [pc, #76]	; 139c4 <read_token_if@@Base+0x84>
   13974:	add	r1, pc, r1
   13978:	bl	199f0 <init_lexer@@Base>
   1397c:	mov	r0, r4
   13980:	bl	19dc0 <next@@Base>
   13984:	ldr	r1, [r0]
   13988:	mov	r0, #148	; 0x94
   1398c:	mov	r2, #0
   13990:	movw	r3, #450	; 0x1c2
   13994:	str	r0, [sp]
   13998:	mov	r0, #10
   1399c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   139a0:	mov	r0, r4
   139a4:	bl	19a40 <destroy_lexer@@Base>
   139a8:	sub	sp, fp, #8
   139ac:	pop	{r4, sl, fp, pc}
   139b0:	andeq	r0, r0, r1
   139b4:	andeq	r0, r0, r0
   139b8:	andeq	r0, r0, r1
   139bc:	andeq	r0, r0, r0
   139c0:	andeq	sp, r1, ip, asr r9
   139c4:	ldrdeq	sl, [r0], -sp
   139c8:	nop	{0}
   139cc:	nop	{0}

000139d0 <read_token_else@@Base>:
   139d0:	push	{r4, sl, fp, lr}
   139d4:	add	fp, sp, #8
   139d8:	sub	sp, sp, #16
   139dc:	ldr	r0, [pc, #108]	; 13a50 <read_token_else@@Base+0x80>
   139e0:	add	r1, pc, #88	; 0x58
   139e4:	add	r4, sp, #4
   139e8:	vld1.64	{d16-d17}, [r1 :128]
   139ec:	add	r0, pc, r0
   139f0:	vld1.64	{d18-d19}, [r0 :128]
   139f4:	vadd.i64	q8, q9, q8
   139f8:	vst1.64	{d16-d17}, [r0 :128]
   139fc:	mov	r0, r4
   13a00:	ldr	r1, [pc, #76]	; 13a54 <read_token_else@@Base+0x84>
   13a04:	add	r1, pc, r1
   13a08:	bl	199f0 <init_lexer@@Base>
   13a0c:	mov	r0, r4
   13a10:	bl	19dc0 <next@@Base>
   13a14:	ldr	r1, [r0]
   13a18:	mov	r0, #148	; 0x94
   13a1c:	mov	r2, #0
   13a20:	movw	r3, #467	; 0x1d3
   13a24:	str	r0, [sp]
   13a28:	mov	r0, #11
   13a2c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13a30:	mov	r0, r4
   13a34:	bl	19a40 <destroy_lexer@@Base>
   13a38:	sub	sp, fp, #8
   13a3c:	pop	{r4, sl, fp, pc}
   13a40:	andeq	r0, r0, r1
   13a44:	andeq	r0, r0, r0
   13a48:	andeq	r0, r0, r1
   13a4c:	andeq	r0, r0, r0
   13a50:	ldrdeq	sp, [r1], -ip
   13a54:	andeq	sl, r0, lr, ror #27
   13a58:	nop	{0}
   13a5c:	nop	{0}

00013a60 <read_token_equalequal@@Base>:
   13a60:	push	{r4, sl, fp, lr}
   13a64:	add	fp, sp, #8
   13a68:	sub	sp, sp, #16
   13a6c:	ldr	r0, [pc, #108]	; 13ae0 <read_token_equalequal@@Base+0x80>
   13a70:	add	r1, pc, #88	; 0x58
   13a74:	add	r4, sp, #4
   13a78:	vld1.64	{d16-d17}, [r1 :128]
   13a7c:	add	r0, pc, r0
   13a80:	vld1.64	{d18-d19}, [r0 :128]
   13a84:	vadd.i64	q8, q9, q8
   13a88:	vst1.64	{d16-d17}, [r0 :128]
   13a8c:	mov	r0, r4
   13a90:	ldr	r1, [pc, #76]	; 13ae4 <read_token_equalequal@@Base+0x84>
   13a94:	add	r1, pc, r1
   13a98:	bl	199f0 <init_lexer@@Base>
   13a9c:	mov	r0, r4
   13aa0:	bl	19dc0 <next@@Base>
   13aa4:	ldr	r1, [r0]
   13aa8:	mov	r0, #148	; 0x94
   13aac:	mov	r2, #0
   13ab0:	mov	r3, #484	; 0x1e4
   13ab4:	str	r0, [sp]
   13ab8:	mov	r0, #12
   13abc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13ac0:	mov	r0, r4
   13ac4:	bl	19a40 <destroy_lexer@@Base>
   13ac8:	sub	sp, fp, #8
   13acc:	pop	{r4, sl, fp, pc}
   13ad0:	andeq	r0, r0, r1
   13ad4:	andeq	r0, r0, r0
   13ad8:	andeq	r0, r0, r1
   13adc:	andeq	r0, r0, r0
   13ae0:	andeq	sp, r1, ip, asr r8
   13ae4:	ldrdeq	sl, [r0], -r0
   13ae8:	nop	{0}
   13aec:	nop	{0}

00013af0 <read_token_notequal@@Base>:
   13af0:	push	{r4, sl, fp, lr}
   13af4:	add	fp, sp, #8
   13af8:	sub	sp, sp, #16
   13afc:	ldr	r0, [pc, #108]	; 13b70 <read_token_notequal@@Base+0x80>
   13b00:	add	r1, pc, #88	; 0x58
   13b04:	add	r4, sp, #4
   13b08:	vld1.64	{d16-d17}, [r1 :128]
   13b0c:	add	r0, pc, r0
   13b10:	vld1.64	{d18-d19}, [r0 :128]
   13b14:	vadd.i64	q8, q9, q8
   13b18:	vst1.64	{d16-d17}, [r0 :128]
   13b1c:	mov	r0, r4
   13b20:	ldr	r1, [pc, #76]	; 13b74 <read_token_notequal@@Base+0x84>
   13b24:	add	r1, pc, r1
   13b28:	bl	199f0 <init_lexer@@Base>
   13b2c:	mov	r0, r4
   13b30:	bl	19dc0 <next@@Base>
   13b34:	ldr	r1, [r0]
   13b38:	mov	r0, #148	; 0x94
   13b3c:	mov	r2, #0
   13b40:	movw	r3, #501	; 0x1f5
   13b44:	str	r0, [sp]
   13b48:	mov	r0, #12
   13b4c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13b50:	mov	r0, r4
   13b54:	bl	19a40 <destroy_lexer@@Base>
   13b58:	sub	sp, fp, #8
   13b5c:	pop	{r4, sl, fp, pc}
   13b60:	andeq	r0, r0, r1
   13b64:	andeq	r0, r0, r0
   13b68:	andeq	r0, r0, r1
   13b6c:	andeq	r0, r0, r0
   13b70:	ldrdeq	sp, [r1], -ip
   13b74:	andeq	sl, r0, r3, asr #24
   13b78:	nop	{0}
   13b7c:	nop	{0}

00013b80 <read_token_lessequalthan@@Base>:
   13b80:	push	{r4, sl, fp, lr}
   13b84:	add	fp, sp, #8
   13b88:	sub	sp, sp, #16
   13b8c:	ldr	r0, [pc, #108]	; 13c00 <read_token_lessequalthan@@Base+0x80>
   13b90:	add	r1, pc, #88	; 0x58
   13b94:	add	r4, sp, #4
   13b98:	vld1.64	{d16-d17}, [r1 :128]
   13b9c:	add	r0, pc, r0
   13ba0:	vld1.64	{d18-d19}, [r0 :128]
   13ba4:	vadd.i64	q8, q9, q8
   13ba8:	vst1.64	{d16-d17}, [r0 :128]
   13bac:	mov	r0, r4
   13bb0:	ldr	r1, [pc, #76]	; 13c04 <read_token_lessequalthan@@Base+0x84>
   13bb4:	add	r1, pc, r1
   13bb8:	bl	199f0 <init_lexer@@Base>
   13bbc:	mov	r0, r4
   13bc0:	bl	19dc0 <next@@Base>
   13bc4:	ldr	r1, [r0]
   13bc8:	mov	r0, #148	; 0x94
   13bcc:	mov	r2, #0
   13bd0:	movw	r3, #518	; 0x206
   13bd4:	str	r0, [sp]
   13bd8:	mov	r0, #12
   13bdc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13be0:	mov	r0, r4
   13be4:	bl	19a40 <destroy_lexer@@Base>
   13be8:	sub	sp, fp, #8
   13bec:	pop	{r4, sl, fp, pc}
   13bf0:	andeq	r0, r0, r1
   13bf4:	andeq	r0, r0, r0
   13bf8:	andeq	r0, r0, r1
   13bfc:	andeq	r0, r0, r0
   13c00:	andeq	sp, r1, ip, asr r7
   13c04:			; <UNDEFINED> instruction: 0x0000abb6
   13c08:	nop	{0}
   13c0c:	nop	{0}

00013c10 <read_token_oror@@Base>:
   13c10:	push	{r4, sl, fp, lr}
   13c14:	add	fp, sp, #8
   13c18:	sub	sp, sp, #16
   13c1c:	ldr	r0, [pc, #108]	; 13c90 <read_token_oror@@Base+0x80>
   13c20:	add	r1, pc, #88	; 0x58
   13c24:	add	r4, sp, #4
   13c28:	vld1.64	{d16-d17}, [r1 :128]
   13c2c:	add	r0, pc, r0
   13c30:	vld1.64	{d18-d19}, [r0 :128]
   13c34:	vadd.i64	q8, q9, q8
   13c38:	vst1.64	{d16-d17}, [r0 :128]
   13c3c:	mov	r0, r4
   13c40:	ldr	r1, [pc, #76]	; 13c94 <read_token_oror@@Base+0x84>
   13c44:	add	r1, pc, r1
   13c48:	bl	199f0 <init_lexer@@Base>
   13c4c:	mov	r0, r4
   13c50:	bl	19dc0 <next@@Base>
   13c54:	ldr	r1, [r0]
   13c58:	mov	r0, #148	; 0x94
   13c5c:	mov	r2, #0
   13c60:	movw	r3, #535	; 0x217
   13c64:	str	r0, [sp]
   13c68:	mov	r0, #12
   13c6c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13c70:	mov	r0, r4
   13c74:	bl	19a40 <destroy_lexer@@Base>
   13c78:	sub	sp, fp, #8
   13c7c:	pop	{r4, sl, fp, pc}
   13c80:	andeq	r0, r0, r1
   13c84:	andeq	r0, r0, r0
   13c88:	andeq	r0, r0, r1
   13c8c:	andeq	r0, r0, r0
   13c90:	ldrdeq	sp, [r1], -ip
   13c94:	andeq	sl, r0, r9, lsr #22
   13c98:	nop	{0}
   13c9c:	nop	{0}

00013ca0 <read_token_andand@@Base>:
   13ca0:	push	{r4, sl, fp, lr}
   13ca4:	add	fp, sp, #8
   13ca8:	sub	sp, sp, #16
   13cac:	ldr	r0, [pc, #108]	; 13d20 <read_token_andand@@Base+0x80>
   13cb0:	add	r1, pc, #88	; 0x58
   13cb4:	add	r4, sp, #4
   13cb8:	vld1.64	{d16-d17}, [r1 :128]
   13cbc:	add	r0, pc, r0
   13cc0:	vld1.64	{d18-d19}, [r0 :128]
   13cc4:	vadd.i64	q8, q9, q8
   13cc8:	vst1.64	{d16-d17}, [r0 :128]
   13ccc:	mov	r0, r4
   13cd0:	ldr	r1, [pc, #76]	; 13d24 <read_token_andand@@Base+0x84>
   13cd4:	add	r1, pc, r1
   13cd8:	bl	199f0 <init_lexer@@Base>
   13cdc:	mov	r0, r4
   13ce0:	bl	19dc0 <next@@Base>
   13ce4:	ldr	r1, [r0]
   13ce8:	mov	r0, #148	; 0x94
   13cec:	mov	r2, #0
   13cf0:	mov	r3, #552	; 0x228
   13cf4:	str	r0, [sp]
   13cf8:	mov	r0, #12
   13cfc:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13d00:	mov	r0, r4
   13d04:	bl	19a40 <destroy_lexer@@Base>
   13d08:	sub	sp, fp, #8
   13d0c:	pop	{r4, sl, fp, pc}
   13d10:	andeq	r0, r0, r1
   13d14:	andeq	r0, r0, r0
   13d18:	andeq	r0, r0, r1
   13d1c:	andeq	r0, r0, r0
   13d20:	andeq	sp, r1, ip, asr r6
   13d24:	muleq	r0, ip, sl
   13d28:	nop	{0}
   13d2c:	nop	{0}

00013d30 <read_token_greaterequalthan@@Base>:
   13d30:	push	{r4, sl, fp, lr}
   13d34:	add	fp, sp, #8
   13d38:	sub	sp, sp, #16
   13d3c:	ldr	r0, [pc, #108]	; 13db0 <read_token_greaterequalthan@@Base+0x80>
   13d40:	add	r1, pc, #88	; 0x58
   13d44:	add	r4, sp, #4
   13d48:	vld1.64	{d16-d17}, [r1 :128]
   13d4c:	add	r0, pc, r0
   13d50:	vld1.64	{d18-d19}, [r0 :128]
   13d54:	vadd.i64	q8, q9, q8
   13d58:	vst1.64	{d16-d17}, [r0 :128]
   13d5c:	mov	r0, r4
   13d60:	ldr	r1, [pc, #76]	; 13db4 <read_token_greaterequalthan@@Base+0x84>
   13d64:	add	r1, pc, r1
   13d68:	bl	199f0 <init_lexer@@Base>
   13d6c:	mov	r0, r4
   13d70:	bl	19dc0 <next@@Base>
   13d74:	ldr	r1, [r0]
   13d78:	mov	r0, #148	; 0x94
   13d7c:	mov	r2, #0
   13d80:	movw	r3, #569	; 0x239
   13d84:	str	r0, [sp]
   13d88:	mov	r0, #12
   13d8c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13d90:	mov	r0, r4
   13d94:	bl	19a40 <destroy_lexer@@Base>
   13d98:	sub	sp, fp, #8
   13d9c:	pop	{r4, sl, fp, pc}
   13da0:	andeq	r0, r0, r1
   13da4:	andeq	r0, r0, r0
   13da8:	andeq	r0, r0, r1
   13dac:	andeq	r0, r0, r0
   13db0:	ldrdeq	sp, [r1], -ip
   13db4:	andeq	sl, r0, pc, lsl #20
   13db8:	nop	{0}
   13dbc:	nop	{0}

00013dc0 <read_token_lessthan@@Base>:
   13dc0:	push	{r4, sl, fp, lr}
   13dc4:	add	fp, sp, #8
   13dc8:	sub	sp, sp, #16
   13dcc:	ldr	r0, [pc, #108]	; 13e40 <read_token_lessthan@@Base+0x80>
   13dd0:	add	r1, pc, #88	; 0x58
   13dd4:	add	r4, sp, #4
   13dd8:	vld1.64	{d16-d17}, [r1 :128]
   13ddc:	add	r0, pc, r0
   13de0:	vld1.64	{d18-d19}, [r0 :128]
   13de4:	vadd.i64	q8, q9, q8
   13de8:	vst1.64	{d16-d17}, [r0 :128]
   13dec:	mov	r0, r4
   13df0:	ldr	r1, [pc, #76]	; 13e44 <read_token_lessthan@@Base+0x84>
   13df4:	add	r1, pc, r1
   13df8:	bl	199f0 <init_lexer@@Base>
   13dfc:	mov	r0, r4
   13e00:	bl	19dc0 <next@@Base>
   13e04:	ldr	r1, [r0]
   13e08:	mov	r0, #148	; 0x94
   13e0c:	mov	r2, #0
   13e10:	movw	r3, #586	; 0x24a
   13e14:	str	r0, [sp]
   13e18:	mov	r0, #12
   13e1c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13e20:	mov	r0, r4
   13e24:	bl	19a40 <destroy_lexer@@Base>
   13e28:	sub	sp, fp, #8
   13e2c:	pop	{r4, sl, fp, pc}
   13e30:	andeq	r0, r0, r1
   13e34:	andeq	r0, r0, r0
   13e38:	andeq	r0, r0, r1
   13e3c:	andeq	r0, r0, r0
   13e40:	andeq	sp, r1, ip, asr r5
   13e44:	andeq	sl, r0, r2, lsl #19
   13e48:	nop	{0}
   13e4c:	nop	{0}

00013e50 <read_token_greaterthan@@Base>:
   13e50:	push	{r4, sl, fp, lr}
   13e54:	add	fp, sp, #8
   13e58:	sub	sp, sp, #16
   13e5c:	ldr	r0, [pc, #108]	; 13ed0 <read_token_greaterthan@@Base+0x80>
   13e60:	add	r1, pc, #88	; 0x58
   13e64:	add	r4, sp, #4
   13e68:	vld1.64	{d16-d17}, [r1 :128]
   13e6c:	add	r0, pc, r0
   13e70:	vld1.64	{d18-d19}, [r0 :128]
   13e74:	vadd.i64	q8, q9, q8
   13e78:	vst1.64	{d16-d17}, [r0 :128]
   13e7c:	mov	r0, r4
   13e80:	ldr	r1, [pc, #76]	; 13ed4 <read_token_greaterthan@@Base+0x84>
   13e84:	add	r1, pc, r1
   13e88:	bl	199f0 <init_lexer@@Base>
   13e8c:	mov	r0, r4
   13e90:	bl	19dc0 <next@@Base>
   13e94:	ldr	r1, [r0]
   13e98:	mov	r0, #148	; 0x94
   13e9c:	mov	r2, #0
   13ea0:	movw	r3, #603	; 0x25b
   13ea4:	str	r0, [sp]
   13ea8:	mov	r0, #12
   13eac:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13eb0:	mov	r0, r4
   13eb4:	bl	19a40 <destroy_lexer@@Base>
   13eb8:	sub	sp, fp, #8
   13ebc:	pop	{r4, sl, fp, pc}
   13ec0:	andeq	r0, r0, r1
   13ec4:	andeq	r0, r0, r0
   13ec8:	andeq	r0, r0, r1
   13ecc:	andeq	r0, r0, r0
   13ed0:	ldrdeq	sp, [r1], -ip
   13ed4:	strdeq	sl, [r0], -r4
   13ed8:	nop	{0}
   13edc:	nop	{0}

00013ee0 <read_token_not@@Base>:
   13ee0:	push	{r4, sl, fp, lr}
   13ee4:	add	fp, sp, #8
   13ee8:	sub	sp, sp, #16
   13eec:	ldr	r0, [pc, #108]	; 13f60 <read_token_not@@Base+0x80>
   13ef0:	add	r1, pc, #88	; 0x58
   13ef4:	add	r4, sp, #4
   13ef8:	vld1.64	{d16-d17}, [r1 :128]
   13efc:	add	r0, pc, r0
   13f00:	vld1.64	{d18-d19}, [r0 :128]
   13f04:	vadd.i64	q8, q9, q8
   13f08:	vst1.64	{d16-d17}, [r0 :128]
   13f0c:	mov	r0, r4
   13f10:	ldr	r1, [pc, #76]	; 13f64 <read_token_not@@Base+0x84>
   13f14:	add	r1, pc, r1
   13f18:	bl	199f0 <init_lexer@@Base>
   13f1c:	mov	r0, r4
   13f20:	bl	19dc0 <next@@Base>
   13f24:	ldr	r1, [r0]
   13f28:	mov	r0, #148	; 0x94
   13f2c:	mov	r2, #0
   13f30:	mov	r3, #620	; 0x26c
   13f34:	str	r0, [sp]
   13f38:	mov	r0, #12
   13f3c:	bl	15ab0 <UnityAssertEqualNumber@@Base>
   13f40:	mov	r0, r4
   13f44:	bl	19a40 <destroy_lexer@@Base>
   13f48:	sub	sp, fp, #8
   13f4c:	pop	{r4, sl, fp, pc}
   13f50:	andeq	r0, r0, r1
   13f54:	andeq	r0, r0, r0
   13f58:	andeq	r0, r0, r1
   13f5c:	andeq	r0, r0, r0
   13f60:	andeq	sp, r1, ip, asr r4
   13f64:	andeq	sl, r0, r6, ror #16
   13f68:	nop	{0}
   13f6c:	nop	{0}

00013f70 <main@@Base>:
   13f70:	push	{fp, lr}
   13f74:	mov	fp, sp
   13f78:	ldr	r0, [pc, #704]	; 14240 <main@@Base+0x2d0>
   13f7c:	add	r1, pc, #684	; 0x2ac
   13f80:	vld1.64	{d16-d17}, [r1 :128]
   13f84:	add	r0, pc, r0
   13f88:	vld1.64	{d18-d19}, [r0 :128]
   13f8c:	vadd.i64	q8, q9, q8
   13f90:	vst1.64	{d16-d17}, [r0 :128]
   13f94:	ldr	r0, [pc, #680]	; 14244 <main@@Base+0x2d4>
   13f98:	add	r0, pc, r0
   13f9c:	bl	18770 <UnityBegin@@Base>
   13fa0:	ldr	r0, [pc, #672]	; 14248 <main@@Base+0x2d8>
   13fa4:	movw	r2, #629	; 0x275
   13fa8:	ldr	r0, [pc, r0]
   13fac:	ldr	r1, [pc, #664]	; 1424c <main@@Base+0x2dc>
   13fb0:	add	r1, pc, r1
   13fb4:	bl	18644 <UnityDefaultTestRun@@Base>
   13fb8:	ldr	r0, [pc, #656]	; 14250 <main@@Base+0x2e0>
   13fbc:	movw	r2, #630	; 0x276
   13fc0:	ldr	r0, [pc, r0]
   13fc4:	ldr	r1, [pc, #648]	; 14254 <main@@Base+0x2e4>
   13fc8:	add	r1, pc, r1
   13fcc:	bl	18644 <UnityDefaultTestRun@@Base>
   13fd0:	ldr	r0, [pc, #640]	; 14258 <main@@Base+0x2e8>
   13fd4:	movw	r2, #631	; 0x277
   13fd8:	ldr	r0, [pc, r0]
   13fdc:	ldr	r1, [pc, #632]	; 1425c <main@@Base+0x2ec>
   13fe0:	add	r1, pc, r1
   13fe4:	bl	18644 <UnityDefaultTestRun@@Base>
   13fe8:	ldr	r0, [pc, #624]	; 14260 <main@@Base+0x2f0>
   13fec:	mov	r2, #632	; 0x278
   13ff0:	ldr	r0, [pc, r0]
   13ff4:	ldr	r1, [pc, #616]	; 14264 <main@@Base+0x2f4>
   13ff8:	add	r1, pc, r1
   13ffc:	bl	18644 <UnityDefaultTestRun@@Base>
   14000:	ldr	r0, [pc, #608]	; 14268 <main@@Base+0x2f8>
   14004:	movw	r2, #633	; 0x279
   14008:	ldr	r0, [pc, r0]
   1400c:	ldr	r1, [pc, #600]	; 1426c <main@@Base+0x2fc>
   14010:	add	r1, pc, r1
   14014:	bl	18644 <UnityDefaultTestRun@@Base>
   14018:	ldr	r0, [pc, #592]	; 14270 <main@@Base+0x300>
   1401c:	movw	r2, #634	; 0x27a
   14020:	ldr	r0, [pc, r0]
   14024:	ldr	r1, [pc, #584]	; 14274 <main@@Base+0x304>
   14028:	add	r1, pc, r1
   1402c:	bl	18644 <UnityDefaultTestRun@@Base>
   14030:	ldr	r0, [pc, #576]	; 14278 <main@@Base+0x308>
   14034:	movw	r2, #635	; 0x27b
   14038:	ldr	r0, [pc, r0]
   1403c:	ldr	r1, [pc, #568]	; 1427c <main@@Base+0x30c>
   14040:	add	r1, pc, r1
   14044:	bl	18644 <UnityDefaultTestRun@@Base>
   14048:	ldr	r0, [pc, #560]	; 14280 <main@@Base+0x310>
   1404c:	mov	r2, #636	; 0x27c
   14050:	ldr	r0, [pc, r0]
   14054:	ldr	r1, [pc, #552]	; 14284 <main@@Base+0x314>
   14058:	add	r1, pc, r1
   1405c:	bl	18644 <UnityDefaultTestRun@@Base>
   14060:	ldr	r0, [pc, #544]	; 14288 <main@@Base+0x318>
   14064:	movw	r2, #637	; 0x27d
   14068:	ldr	r0, [pc, r0]
   1406c:	ldr	r1, [pc, #536]	; 1428c <main@@Base+0x31c>
   14070:	add	r1, pc, r1
   14074:	bl	18644 <UnityDefaultTestRun@@Base>
   14078:	ldr	r0, [pc, #528]	; 14290 <main@@Base+0x320>
   1407c:	movw	r2, #638	; 0x27e
   14080:	ldr	r0, [pc, r0]
   14084:	ldr	r1, [pc, #520]	; 14294 <main@@Base+0x324>
   14088:	add	r1, pc, r1
   1408c:	bl	18644 <UnityDefaultTestRun@@Base>
   14090:	ldr	r0, [pc, #512]	; 14298 <main@@Base+0x328>
   14094:	movw	r2, #639	; 0x27f
   14098:	ldr	r0, [pc, r0]
   1409c:	ldr	r1, [pc, #504]	; 1429c <main@@Base+0x32c>
   140a0:	add	r1, pc, r1
   140a4:	bl	18644 <UnityDefaultTestRun@@Base>
   140a8:	ldr	r0, [pc, #496]	; 142a0 <main@@Base+0x330>
   140ac:	mov	r2, #640	; 0x280
   140b0:	ldr	r0, [pc, r0]
   140b4:	ldr	r1, [pc, #488]	; 142a4 <main@@Base+0x334>
   140b8:	add	r1, pc, r1
   140bc:	bl	18644 <UnityDefaultTestRun@@Base>
   140c0:	ldr	r0, [pc, #480]	; 142a8 <main@@Base+0x338>
   140c4:	movw	r2, #641	; 0x281
   140c8:	ldr	r0, [pc, r0]
   140cc:	ldr	r1, [pc, #472]	; 142ac <main@@Base+0x33c>
   140d0:	add	r1, pc, r1
   140d4:	bl	18644 <UnityDefaultTestRun@@Base>
   140d8:	ldr	r0, [pc, #464]	; 142b0 <main@@Base+0x340>
   140dc:	movw	r2, #642	; 0x282
   140e0:	ldr	r0, [pc, r0]
   140e4:	ldr	r1, [pc, #456]	; 142b4 <main@@Base+0x344>
   140e8:	add	r1, pc, r1
   140ec:	bl	18644 <UnityDefaultTestRun@@Base>
   140f0:	ldr	r0, [pc, #448]	; 142b8 <main@@Base+0x348>
   140f4:	movw	r2, #643	; 0x283
   140f8:	ldr	r0, [pc, r0]
   140fc:	ldr	r1, [pc, #440]	; 142bc <main@@Base+0x34c>
   14100:	add	r1, pc, r1
   14104:	bl	18644 <UnityDefaultTestRun@@Base>
   14108:	ldr	r0, [pc, #432]	; 142c0 <main@@Base+0x350>
   1410c:	mov	r2, #644	; 0x284
   14110:	ldr	r0, [pc, r0]
   14114:	ldr	r1, [pc, #424]	; 142c4 <main@@Base+0x354>
   14118:	add	r1, pc, r1
   1411c:	bl	18644 <UnityDefaultTestRun@@Base>
   14120:	ldr	r0, [pc, #416]	; 142c8 <main@@Base+0x358>
   14124:	movw	r2, #645	; 0x285
   14128:	ldr	r0, [pc, r0]
   1412c:	ldr	r1, [pc, #408]	; 142cc <main@@Base+0x35c>
   14130:	add	r1, pc, r1
   14134:	bl	18644 <UnityDefaultTestRun@@Base>
   14138:	ldr	r0, [pc, #400]	; 142d0 <main@@Base+0x360>
   1413c:	movw	r2, #646	; 0x286
   14140:	ldr	r0, [pc, r0]
   14144:	ldr	r1, [pc, #392]	; 142d4 <main@@Base+0x364>
   14148:	add	r1, pc, r1
   1414c:	bl	18644 <UnityDefaultTestRun@@Base>
   14150:	ldr	r0, [pc, #384]	; 142d8 <main@@Base+0x368>
   14154:	movw	r2, #647	; 0x287
   14158:	ldr	r0, [pc, r0]
   1415c:	ldr	r1, [pc, #376]	; 142dc <main@@Base+0x36c>
   14160:	add	r1, pc, r1
   14164:	bl	18644 <UnityDefaultTestRun@@Base>
   14168:	ldr	r0, [pc, #368]	; 142e0 <main@@Base+0x370>
   1416c:	mov	r2, #648	; 0x288
   14170:	ldr	r0, [pc, r0]
   14174:	ldr	r1, [pc, #360]	; 142e4 <main@@Base+0x374>
   14178:	add	r1, pc, r1
   1417c:	bl	18644 <UnityDefaultTestRun@@Base>
   14180:	ldr	r0, [pc, #352]	; 142e8 <main@@Base+0x378>
   14184:	movw	r2, #649	; 0x289
   14188:	ldr	r0, [pc, r0]
   1418c:	ldr	r1, [pc, #344]	; 142ec <main@@Base+0x37c>
   14190:	add	r1, pc, r1
   14194:	bl	18644 <UnityDefaultTestRun@@Base>
   14198:	ldr	r0, [pc, #336]	; 142f0 <main@@Base+0x380>
   1419c:	movw	r2, #650	; 0x28a
   141a0:	ldr	r0, [pc, r0]
   141a4:	ldr	r1, [pc, #328]	; 142f4 <main@@Base+0x384>
   141a8:	add	r1, pc, r1
   141ac:	bl	18644 <UnityDefaultTestRun@@Base>
   141b0:	ldr	r0, [pc, #320]	; 142f8 <main@@Base+0x388>
   141b4:	movw	r2, #651	; 0x28b
   141b8:	ldr	r0, [pc, r0]
   141bc:	ldr	r1, [pc, #312]	; 142fc <main@@Base+0x38c>
   141c0:	add	r1, pc, r1
   141c4:	bl	18644 <UnityDefaultTestRun@@Base>
   141c8:	ldr	r0, [pc, #304]	; 14300 <main@@Base+0x390>
   141cc:	mov	r2, #652	; 0x28c
   141d0:	ldr	r0, [pc, r0]
   141d4:	ldr	r1, [pc, #296]	; 14304 <main@@Base+0x394>
   141d8:	add	r1, pc, r1
   141dc:	bl	18644 <UnityDefaultTestRun@@Base>
   141e0:	ldr	r0, [pc, #288]	; 14308 <main@@Base+0x398>
   141e4:	movw	r2, #653	; 0x28d
   141e8:	ldr	r0, [pc, r0]
   141ec:	ldr	r1, [pc, #280]	; 1430c <main@@Base+0x39c>
   141f0:	add	r1, pc, r1
   141f4:	bl	18644 <UnityDefaultTestRun@@Base>
   141f8:	ldr	r0, [pc, #272]	; 14310 <main@@Base+0x3a0>
   141fc:	movw	r2, #654	; 0x28e
   14200:	ldr	r0, [pc, r0]
   14204:	ldr	r1, [pc, #264]	; 14314 <main@@Base+0x3a4>
   14208:	add	r1, pc, r1
   1420c:	bl	18644 <UnityDefaultTestRun@@Base>
   14210:	ldr	r0, [pc, #256]	; 14318 <main@@Base+0x3a8>
   14214:	movw	r2, #655	; 0x28f
   14218:	ldr	r0, [pc, r0]
   1421c:	ldr	r1, [pc, #248]	; 1431c <main@@Base+0x3ac>
   14220:	add	r1, pc, r1
   14224:	bl	18644 <UnityDefaultTestRun@@Base>
   14228:	pop	{fp, lr}
   1422c:	b	187e0 <UnityEnd@@Base>
   14230:	andeq	r0, r0, r1
   14234:	andeq	r0, r0, r0
   14238:	andeq	r0, r0, r1
   1423c:	andeq	r0, r0, r0
   14240:	andeq	sp, r1, r4, ror #7
   14244:	andeq	sl, r0, r4, ror #15
   14248:	andeq	sp, r1, r4, asr #3
   1424c:	andeq	sl, r0, r8, asr r9
   14250:			; <UNDEFINED> instruction: 0x0001d1bc
   14254:	andeq	sl, r0, r0, ror #18
   14258:	andeq	sp, r1, r4, ror r1
   1425c:	andeq	sl, r0, r8, ror #18
   14260:	andeq	sp, r1, r8, asr #2
   14264:	andeq	sl, r0, r0, ror r9
   14268:	andeq	sp, r1, ip, asr r1
   1426c:	andeq	sl, r0, sl, asr #15
   14270:	andeq	sp, r1, ip, lsr #1
   14274:	andeq	sl, r0, r2, asr #15
   14278:	andeq	sp, r1, r4, asr #1
   1427c:	andeq	sl, r0, r8, asr #18
   14280:	ldrdeq	sp, [r1], -r8
   14284:	andeq	sl, r0, r0, asr r9
   14288:	andeq	sp, r1, ip, lsl #2
   1428c:	andeq	sl, r0, r8, asr r9
   14290:	muleq	r1, r0, r0
   14294:	andeq	sl, r0, pc, ror #14
   14298:	andeq	sp, r1, r8, lsr #1
   1429c:	andeq	sl, r0, r7, ror #14
   142a0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   142a4:	andeq	sl, r0, pc, asr r7
   142a8:	andeq	sp, r1, r0, lsr #1
   142ac:	andeq	sl, r0, r7, asr r7
   142b0:	andeq	sp, r1, ip, asr r0
   142b4:	andeq	sl, r0, r0, lsl #18
   142b8:	andeq	sp, r1, r0
   142bc:	andeq	sl, r0, r8, lsl #18
   142c0:	andeq	ip, r1, r0, lsr #31
   142c4:	andeq	sl, r0, pc, lsl r7
   142c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   142cc:	andeq	sl, r0, r6, lsl r7
   142d0:	andeq	sp, r1, r8, lsl r0
   142d4:	andeq	sl, r0, ip, lsl #14
   142d8:	andeq	sp, r1, r8, lsr #32
   142dc:	andeq	sl, r0, r8, asr #17
   142e0:	andeq	sp, r1, r8
   142e4:	ldrdeq	sl, [r0], -r0
   142e8:	andeq	ip, r1, ip, lsl pc
   142ec:	ldrdeq	sl, [r0], -r8
   142f0:	andeq	ip, r1, r4, ror pc
   142f4:	andeq	sl, r0, r0, lsl #18
   142f8:	andeq	ip, r1, ip, lsl #30
   142fc:	andeq	sl, r0, r4, lsr #13
   14300:	andeq	ip, r1, r0, lsl #30
   14304:			; <UNDEFINED> instruction: 0x0000a8b0
   14308:	andeq	ip, r1, r4, ror pc
   1430c:	ldrdeq	sl, [r0], -r8
   14310:	andeq	ip, r1, ip, ror #29
   14314:	andeq	sl, r0, r0, ror #17
   14318:	andeq	ip, r1, r4, lsl pc
   1431c:	andeq	sl, r0, r4, asr r6
   14320:	push	{r4, r5, r6, lr}
   14324:	sub	sp, sp, #8
   14328:	ldr	r0, [pc, #112]	; 143a0 <main@@Base+0x430>
   1432c:	ldr	r1, [pc, #112]	; 143a4 <main@@Base+0x434>
   14330:	movw	r2, #42282	; 0xa52a
   14334:	movt	r2, #15831	; 0x3dd7
   14338:	add	r0, pc, r0
   1433c:	add	r1, pc, r1
   14340:	bl	1b72c <next@@Base+0x196c>
   14344:	ldr	r0, [pc, #92]	; 143a8 <main@@Base+0x438>
   14348:	ldr	r6, [pc, #92]	; 143ac <main@@Base+0x43c>
   1434c:	mov	r5, #0
   14350:	add	r0, pc, r0
   14354:	add	r6, pc, r6
   14358:	add	r4, r0, #4
   1435c:	mov	r3, r6
   14360:	ldr	r0, [r3, r5]!
   14364:	ldr	r1, [r3, #16]
   14368:	str	r1, [sp]
   1436c:	ldmib	r3, {r1, r2}
   14370:	ldrb	r3, [r3, #12]
   14374:	bl	1be90 <next@@Base+0x20d0>
   14378:	ldrd	r0, [r4, #-4]
   1437c:	bl	1c744 <next@@Base+0x2984>
   14380:	add	r5, r5, #20
   14384:	add	r4, r4, #8
   14388:	cmp	r5, #560	; 0x230
   1438c:	bne	1435c <main@@Base+0x3ec>
   14390:	bl	1cec0 <next@@Base+0x3100>
   14394:	add	sp, sp, #8
   14398:	pop	{r4, r5, r6, lr}
   1439c:	b	1dc2c <next@@Base+0x3e6c>
   143a0:	andeq	sl, r0, r0, asr r5
   143a4:	muleq	r0, r9, r4
   143a8:	andeq	ip, r1, r8, ror r2
   143ac:	andeq	ip, r1, r4, asr #32
   143b0:	push	{fp, lr}
   143b4:	bl	14320 <main@@Base+0x3b0>
   143b8:	ldr	r0, [pc, #336]	; 14510 <main@@Base+0x5a0>
   143bc:	vmov.i32	q8, #0	; 0x00000000
   143c0:	add	r0, pc, r0
   143c4:	vst1.64	{d16-d17}, [r0 :128]
   143c8:	ldr	r0, [pc, #324]	; 14514 <main@@Base+0x5a4>
   143cc:	add	r0, pc, r0
   143d0:	vst1.64	{d16-d17}, [r0 :128]
   143d4:	ldr	r0, [pc, #316]	; 14518 <main@@Base+0x5a8>
   143d8:	add	r0, pc, r0
   143dc:	vst1.64	{d16-d17}, [r0 :128]
   143e0:	ldr	r0, [pc, #308]	; 1451c <main@@Base+0x5ac>
   143e4:	add	r0, pc, r0
   143e8:	vst1.64	{d16-d17}, [r0 :128]
   143ec:	ldr	r0, [pc, #300]	; 14520 <main@@Base+0x5b0>
   143f0:	add	r0, pc, r0
   143f4:	vst1.64	{d16-d17}, [r0 :128]
   143f8:	ldr	r0, [pc, #292]	; 14524 <main@@Base+0x5b4>
   143fc:	add	r0, pc, r0
   14400:	vst1.64	{d16-d17}, [r0 :128]
   14404:	ldr	r0, [pc, #284]	; 14528 <main@@Base+0x5b8>
   14408:	add	r0, pc, r0
   1440c:	vst1.64	{d16-d17}, [r0 :128]
   14410:	ldr	r0, [pc, #276]	; 1452c <main@@Base+0x5bc>
   14414:	add	r0, pc, r0
   14418:	vst1.64	{d16-d17}, [r0 :128]
   1441c:	ldr	r0, [pc, #268]	; 14530 <main@@Base+0x5c0>
   14420:	add	r0, pc, r0
   14424:	vst1.64	{d16-d17}, [r0 :128]
   14428:	ldr	r0, [pc, #260]	; 14534 <main@@Base+0x5c4>
   1442c:	add	r0, pc, r0
   14430:	vst1.64	{d16-d17}, [r0 :128]
   14434:	ldr	r0, [pc, #252]	; 14538 <main@@Base+0x5c8>
   14438:	add	r0, pc, r0
   1443c:	vst1.64	{d16-d17}, [r0 :128]
   14440:	ldr	r0, [pc, #244]	; 1453c <main@@Base+0x5cc>
   14444:	add	r0, pc, r0
   14448:	vst1.64	{d16-d17}, [r0 :128]
   1444c:	ldr	r0, [pc, #236]	; 14540 <main@@Base+0x5d0>
   14450:	add	r0, pc, r0
   14454:	vst1.64	{d16-d17}, [r0 :128]
   14458:	ldr	r0, [pc, #228]	; 14544 <main@@Base+0x5d4>
   1445c:	add	r0, pc, r0
   14460:	vst1.64	{d16-d17}, [r0 :128]
   14464:	ldr	r0, [pc, #220]	; 14548 <main@@Base+0x5d8>
   14468:	add	r0, pc, r0
   1446c:	vst1.64	{d16-d17}, [r0 :128]
   14470:	ldr	r0, [pc, #212]	; 1454c <main@@Base+0x5dc>
   14474:	add	r0, pc, r0
   14478:	vst1.64	{d16-d17}, [r0 :128]
   1447c:	ldr	r0, [pc, #204]	; 14550 <main@@Base+0x5e0>
   14480:	add	r0, pc, r0
   14484:	vst1.64	{d16-d17}, [r0 :128]
   14488:	ldr	r0, [pc, #196]	; 14554 <main@@Base+0x5e4>
   1448c:	add	r0, pc, r0
   14490:	vst1.64	{d16-d17}, [r0 :128]
   14494:	ldr	r0, [pc, #188]	; 14558 <main@@Base+0x5e8>
   14498:	add	r0, pc, r0
   1449c:	vst1.64	{d16-d17}, [r0 :128]
   144a0:	ldr	r0, [pc, #180]	; 1455c <main@@Base+0x5ec>
   144a4:	add	r0, pc, r0
   144a8:	vst1.64	{d16-d17}, [r0 :128]
   144ac:	ldr	r0, [pc, #172]	; 14560 <main@@Base+0x5f0>
   144b0:	add	r0, pc, r0
   144b4:	vst1.64	{d16-d17}, [r0 :128]
   144b8:	ldr	r0, [pc, #164]	; 14564 <main@@Base+0x5f4>
   144bc:	add	r0, pc, r0
   144c0:	vst1.64	{d16-d17}, [r0 :128]
   144c4:	ldr	r0, [pc, #156]	; 14568 <main@@Base+0x5f8>
   144c8:	add	r0, pc, r0
   144cc:	vst1.64	{d16-d17}, [r0 :128]
   144d0:	ldr	r0, [pc, #148]	; 1456c <main@@Base+0x5fc>
   144d4:	add	r0, pc, r0
   144d8:	vst1.64	{d16-d17}, [r0 :128]
   144dc:	ldr	r0, [pc, #140]	; 14570 <main@@Base+0x600>
   144e0:	add	r0, pc, r0
   144e4:	vst1.64	{d16-d17}, [r0 :128]
   144e8:	ldr	r0, [pc, #132]	; 14574 <main@@Base+0x604>
   144ec:	add	r0, pc, r0
   144f0:	vst1.64	{d16-d17}, [r0 :128]
   144f4:	ldr	r0, [pc, #124]	; 14578 <main@@Base+0x608>
   144f8:	add	r0, pc, r0
   144fc:	vst1.64	{d16-d17}, [r0 :128]
   14500:	ldr	r0, [pc, #116]	; 1457c <main@@Base+0x60c>
   14504:	add	r0, pc, r0
   14508:	vst1.64	{d16-d17}, [r0 :128]
   1450c:	pop	{fp, pc}
   14510:	andeq	ip, r1, r8, lsl #28
   14514:	andeq	ip, r1, ip, ror #27
   14518:	andeq	ip, r1, r0, lsl #28
   1451c:	andeq	ip, r1, r4, lsl #28
   14520:	andeq	ip, r1, r8, lsl #28
   14524:	andeq	ip, r1, ip, lsl #28
   14528:	andeq	ip, r1, r0, lsl lr
   1452c:	andeq	ip, r1, r4, lsl lr
   14530:	andeq	ip, r1, r8, lsl lr
   14534:	andeq	ip, r1, ip, lsl lr
   14538:	andeq	ip, r1, r0, lsr #28
   1453c:	andeq	ip, r1, r4, lsr #28
   14540:	andeq	ip, r1, r8, lsr #28
   14544:	andeq	ip, r1, ip, lsr #28
   14548:	andeq	ip, r1, r0, lsr lr
   1454c:	andeq	ip, r1, r4, lsr lr
   14550:	andeq	ip, r1, r8, lsr lr
   14554:	andeq	ip, r1, ip, lsr lr
   14558:	andeq	ip, r1, r0, asr #28
   1455c:	andeq	ip, r1, r4, asr #28
   14560:	andeq	ip, r1, r8, asr #28
   14564:	andeq	ip, r1, ip, asr #28
   14568:	andeq	ip, r1, r0, asr lr
   1456c:	andeq	ip, r1, r4, asr lr
   14570:	andeq	ip, r1, r8, asr lr
   14574:	andeq	ip, r1, ip, asr lr
   14578:	andeq	ip, r1, r0, ror #28
   1457c:	andeq	ip, r1, r4, ror #28
   14580:	ldr	r0, [pc, #12]	; 14594 <main@@Base+0x624>
   14584:	ldr	r1, [pc, #12]	; 14598 <main@@Base+0x628>
   14588:	add	r0, pc, r0
   1458c:	add	r1, pc, r1
   14590:	b	1e0dc <__gcov_flush@@Base+0xb4>
   14594:			; <UNDEFINED> instruction: 0xfffffd90
   14598:			; <UNDEFINED> instruction: 0xfffffe1c
   1459c:	andeq	r0, r0, r0

000145a0 <UnityPrint@@Base>:
   145a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145a4:	add	fp, sp, #24
   145a8:	vpush	{d8-d9}
   145ac:	ldr	r4, [pc, #700]	; 14870 <UnityPrint@@Base+0x2d0>
   145b0:	ldr	r1, [pc, #700]	; 14874 <UnityPrint@@Base+0x2d4>
   145b4:	ldr	r1, [pc, r1]
   145b8:	add	r4, pc, r4
   145bc:	mov	r2, r4
   145c0:	adds	r1, r1, #1
   145c4:	str	r1, [r4]
   145c8:	ldr	r1, [r4, #4]
   145cc:	adc	r1, r1, #0
   145d0:	cmp	r0, #0
   145d4:	str	r1, [r4, #4]
   145d8:	mov	r1, #16
   145dc:	movwne	r1, #8
   145e0:	ldr	r1, [r2, r1]!
   145e4:	adds	r1, r1, #1
   145e8:	str	r1, [r2]
   145ec:	ldr	r1, [r2, #4]
   145f0:	adc	r1, r1, #0
   145f4:	cmp	r0, #0
   145f8:	str	r1, [r2, #4]
   145fc:	beq	14840 <UnityPrint@@Base+0x2a0>
   14600:	ldrb	r1, [r0]
   14604:	mov	r2, #32
   14608:	mov	r3, r4
   1460c:	cmp	r1, #0
   14610:	movwne	r2, #24
   14614:	ldr	r2, [r3, r2]!
   14618:	adds	r2, r2, #1
   1461c:	str	r2, [r3]
   14620:	ldr	r2, [r3, #4]
   14624:	adc	r2, r2, #0
   14628:	cmp	r1, #0
   1462c:	str	r2, [r3, #4]
   14630:	beq	14840 <UnityPrint@@Base+0x2a0>
   14634:	ldr	r6, [pc, #572]	; 14878 <UnityPrint@@Base+0x2d8>
   14638:	ldr	r8, [pc, #572]	; 1487c <UnityPrint@@Base+0x2dc>
   1463c:	add	r5, r0, #1
   14640:	ldr	r8, [pc, r8]
   14644:	add	r6, pc, r6
   14648:	uxtb	r0, r1
   1464c:	mov	r1, #48	; 0x30
   14650:	mov	r2, r4
   14654:	cmp	r0, #127	; 0x7f
   14658:	movwcc	r1, #40	; 0x28
   1465c:	ldr	r1, [r2, r1]!
   14660:	adds	r1, r1, #1
   14664:	str	r1, [r2]
   14668:	ldr	r1, [r2, #4]
   1466c:	adc	r1, r1, #0
   14670:	cmp	r0, #126	; 0x7e
   14674:	str	r1, [r2, #4]
   14678:	bhi	146dc <UnityPrint@@Base+0x13c>
   1467c:	cmp	r0, #31
   14680:	mov	r1, #64	; 0x40
   14684:	mov	r2, r4
   14688:	movwhi	r1, #56	; 0x38
   1468c:	ldr	r1, [r2, r1]!
   14690:	adds	r1, r1, #1
   14694:	str	r1, [r2]
   14698:	ldr	r1, [r2, #4]
   1469c:	adc	r1, r1, #0
   146a0:	cmp	r0, #32
   146a4:	str	r1, [r2, #4]
   146a8:	bcc	146dc <UnityPrint@@Base+0x13c>
   146ac:	add	r1, pc, #428	; 0x1ac
   146b0:	ldrd	r2, [r4, #72]	; 0x48
   146b4:	vld1.64	{d18-d19}, [r6 :128]
   146b8:	vld1.64	{d16-d17}, [r1 :128]
   146bc:	ldr	r1, [r8]
   146c0:	adds	r2, r2, #1
   146c4:	vadd.i64	q8, q9, q8
   146c8:	adc	r3, r3, #0
   146cc:	vst1.64	{d16-d17}, [r6 :128]
   146d0:	strd	r2, [r4, #72]	; 0x48
   146d4:	bl	127a0 <putc@plt>
   146d8:	b	147fc <UnityPrint@@Base+0x25c>
   146dc:	ldrb	r7, [r5, #-1]
   146e0:	mov	r0, #88	; 0x58
   146e4:	mov	r1, r4
   146e8:	cmp	r7, #13
   146ec:	movweq	r0, #80	; 0x50
   146f0:	ldr	r0, [r1, r0]!
   146f4:	adds	r0, r0, #1
   146f8:	str	r0, [r1]
   146fc:	ldr	r0, [r1, #4]
   14700:	adc	r0, r0, #0
   14704:	cmp	r7, #13
   14708:	str	r0, [r1, #4]
   1470c:	bne	1475c <UnityPrint@@Base+0x1bc>
   14710:	add	r0, pc, #328	; 0x148
   14714:	vld1.64	{d16-d17}, [r6 :128]
   14718:	vld1.64	{d8-d9}, [r0 :128]
   1471c:	ldrd	r0, [r4, #96]	; 0x60
   14720:	adds	r0, r0, #1
   14724:	vadd.i64	q8, q8, q4
   14728:	adc	r1, r1, #0
   1472c:	vst1.64	{d16-d17}, [r6 :128]
   14730:	strd	r0, [r4, #96]	; 0x60
   14734:	ldr	r1, [r8]
   14738:	mov	r0, #92	; 0x5c
   1473c:	bl	127a0 <putc@plt>
   14740:	vld1.64	{d16-d17}, [r6 :128]
   14744:	ldr	r1, [r8]
   14748:	mov	r0, #114	; 0x72
   1474c:	vadd.i64	q8, q8, q4
   14750:	vst1.64	{d16-d17}, [r6 :128]
   14754:	bl	127a0 <putc@plt>
   14758:	b	147fc <UnityPrint@@Base+0x25c>
   1475c:	add	r0, pc, #252	; 0xfc
   14760:	vld1.64	{d18-d19}, [r6 :128]
   14764:	ldr	r1, [r8]
   14768:	vld1.64	{d16-d17}, [r0 :128]
   1476c:	mov	r0, #92	; 0x5c
   14770:	vadd.i64	q8, q9, q8
   14774:	vst1.64	{d16-d17}, [r6 :128]
   14778:	bl	127a0 <putc@plt>
   1477c:	cmp	r7, #10
   14780:	mov	r0, #112	; 0x70
   14784:	mov	r1, r4
   14788:	movweq	r0, #104	; 0x68
   1478c:	ldr	r0, [r1, r0]!
   14790:	adds	r0, r0, #1
   14794:	str	r0, [r1]
   14798:	ldr	r0, [r1, #4]
   1479c:	adc	r0, r0, #0
   147a0:	cmp	r7, #10
   147a4:	str	r0, [r1, #4]
   147a8:	bne	147e0 <UnityPrint@@Base+0x240>
   147ac:	add	r0, pc, #172	; 0xac
   147b0:	vld1.64	{d18-d19}, [r6 :128]
   147b4:	vld1.64	{d16-d17}, [r0 :128]
   147b8:	ldrd	r0, [r4, #120]	; 0x78
   147bc:	adds	r0, r0, #1
   147c0:	vadd.i64	q8, q9, q8
   147c4:	adc	r1, r1, #0
   147c8:	vst1.64	{d16-d17}, [r6 :128]
   147cc:	strd	r0, [r4, #120]	; 0x78
   147d0:	ldr	r1, [r8]
   147d4:	mov	r0, #110	; 0x6e
   147d8:	bl	127a0 <putc@plt>
   147dc:	b	147fc <UnityPrint@@Base+0x25c>
   147e0:	ldrd	r0, [r4, #128]	; 0x80
   147e4:	adds	r0, r0, #1
   147e8:	adc	r1, r1, #0
   147ec:	strd	r0, [r4, #128]	; 0x80
   147f0:	mov	r1, #2
   147f4:	ldrb	r0, [r5, #-1]
   147f8:	bl	14880 <UnityPrintNumberHex@@Base>
   147fc:	ldrd	r0, [r4, #136]	; 0x88
   14800:	mov	r2, r4
   14804:	adds	r0, r0, #1
   14808:	adc	r1, r1, #0
   1480c:	strd	r0, [r4, #136]	; 0x88
   14810:	mov	r0, #32
   14814:	ldrb	r1, [r5], #1
   14818:	cmp	r1, #0
   1481c:	movwne	r0, #24
   14820:	ldr	r0, [r2, r0]!
   14824:	adds	r0, r0, #1
   14828:	str	r0, [r2]
   1482c:	ldr	r0, [r2, #4]
   14830:	adc	r0, r0, #0
   14834:	cmp	r1, #0
   14838:	str	r0, [r2, #4]
   1483c:	bne	14648 <UnityPrint@@Base+0xa8>
   14840:	ldrd	r0, [r4, #144]	; 0x90
   14844:	adds	r0, r0, #1
   14848:	adc	r1, r1, #0
   1484c:	strd	r0, [r4, #144]	; 0x90
   14850:	vpop	{d8-d9}
   14854:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14858:	nop	{0}
   1485c:	nop	{0}
   14860:	andeq	r0, r0, r1
   14864:	andeq	r0, r0, r0
   14868:	andeq	r0, r0, r1
   1486c:	andeq	r0, r0, r0
   14870:	andeq	ip, r1, r0, asr #27
   14874:	andeq	ip, r1, r4, asr #27
   14878:	ldrdeq	ip, [r1], -r4
   1487c:	andeq	ip, r1, r8, lsl #22

00014880 <UnityPrintNumberHex@@Base>:
   14880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14884:	add	fp, sp, #28
   14888:	sub	sp, sp, #4
   1488c:	vpush	{d8-d9}
   14890:	ldr	r7, [pc, #408]	; 14a30 <UnityPrintNumberHex@@Base+0x1b0>
   14894:	mov	sl, r0
   14898:	add	r0, pc, #384	; 0x180
   1489c:	cmp	r1, #0
   148a0:	mov	r4, r1
   148a4:	vld1.64	{d8-d9}, [r0 :128]
   148a8:	mov	r0, #24
   148ac:	movwne	r0, #16
   148b0:	add	r7, pc, r7
   148b4:	vld1.64	{d16-d17}, [r7 :128]
   148b8:	ldr	r6, [pc, #372]	; 14a34 <UnityPrintNumberHex@@Base+0x1b4>
   148bc:	add	r6, pc, r6
   148c0:	vadd.i64	q8, q8, q4
   148c4:	vld1.64	{d18-d19}, [r6 :128]
   148c8:	vst1.64	{d16-d17}, [r7 :128]
   148cc:	mov	r5, r6
   148d0:	vadd.i64	q8, q9, q4
   148d4:	vst1.64	{d16-d17}, [r5 :128], r0
   148d8:	mov	r0, #48	; 0x30
   148dc:	ldr	r8, [pc, #340]	; 14a38 <UnityPrintNumberHex@@Base+0x1b8>
   148e0:	ldr	r8, [pc, r8]
   148e4:	ldr	r1, [r8]
   148e8:	bl	127a0 <putc@plt>
   148ec:	vld1.64	{d16-d17}, [r7 :128]
   148f0:	ldr	r1, [r8]
   148f4:	mov	r0, #120	; 0x78
   148f8:	vadd.i64	q8, q8, q4
   148fc:	vst1.64	{d16-d17}, [r7 :128]
   14900:	bl	127a0 <putc@plt>
   14904:	ldrd	r0, [r5]
   14908:	adds	r0, r0, #1
   1490c:	adc	r1, r1, #0
   14910:	cmp	r4, #0
   14914:	strd	r0, [r5]
   14918:	beq	14a00 <UnityPrintNumberHex@@Base+0x180>
   1491c:	mov	r9, #15
   14920:	sub	r4, r4, #1
   14924:	mov	r1, #40	; 0x28
   14928:	mov	r2, r6
   1492c:	uxtb	r5, r4
   14930:	lsl	r0, r5, #2
   14934:	and	r0, r9, sl, lsr r0
   14938:	cmp	r0, #10
   1493c:	movwcc	r1, #32
   14940:	ldr	r1, [r2, r1]!
   14944:	adds	r1, r1, #1
   14948:	str	r1, [r2]
   1494c:	ldr	r1, [r2, #4]
   14950:	adc	r1, r1, #0
   14954:	cmp	r0, #9
   14958:	str	r1, [r2, #4]
   1495c:	bhi	14990 <UnityPrintNumberHex@@Base+0x110>
   14960:	add	r1, pc, #184	; 0xb8
   14964:	ldrd	r2, [r6, #48]	; 0x30
   14968:	vld1.64	{d18-d19}, [r7 :128]
   1496c:	orr	r0, r0, #48	; 0x30
   14970:	vld1.64	{d16-d17}, [r1 :128]
   14974:	ldr	r1, [r8]
   14978:	adds	r2, r2, #1
   1497c:	vadd.i64	q8, q9, q8
   14980:	adc	r3, r3, #0
   14984:	vst1.64	{d16-d17}, [r7 :128]
   14988:	strd	r2, [r6, #48]	; 0x30
   1498c:	b	149bc <UnityPrintNumberHex@@Base+0x13c>
   14990:	add	r1, pc, #136	; 0x88
   14994:	ldrd	r2, [r6, #56]	; 0x38
   14998:	vld1.64	{d18-d19}, [r7 :128]
   1499c:	add	r0, r0, #55	; 0x37
   149a0:	vld1.64	{d16-d17}, [r1 :128]
   149a4:	ldr	r1, [r8]
   149a8:	adds	r2, r2, #1
   149ac:	vadd.i64	q8, q9, q8
   149b0:	adc	r3, r3, #0
   149b4:	vst1.64	{d16-d17}, [r7 :128]
   149b8:	strd	r2, [r6, #56]	; 0x38
   149bc:	bl	127a0 <putc@plt>
   149c0:	ldrd	r0, [r6, #64]	; 0x40
   149c4:	adds	r0, r0, #1
   149c8:	adc	r1, r1, #0
   149cc:	cmp	r5, #0
   149d0:	strd	r0, [r6, #64]	; 0x40
   149d4:	mov	r0, #24
   149d8:	mov	r1, r6
   149dc:	movwne	r0, #16
   149e0:	ldr	r0, [r1, r0]!
   149e4:	adds	r0, r0, #1
   149e8:	str	r0, [r1]
   149ec:	ldr	r0, [r1, #4]
   149f0:	adc	r0, r0, #0
   149f4:	cmp	r5, #0
   149f8:	str	r0, [r1, #4]
   149fc:	bne	14920 <UnityPrintNumberHex@@Base+0xa0>
   14a00:	ldrd	r0, [r6, #72]	; 0x48
   14a04:	adds	r0, r0, #1
   14a08:	adc	r1, r1, #0
   14a0c:	strd	r0, [r6, #72]	; 0x48
   14a10:	vpop	{d8-d9}
   14a14:	add	sp, sp, #4
   14a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a1c:	nop	{0}
   14a20:	andeq	r0, r0, r1
   14a24:	andeq	r0, r0, r0
   14a28:	andeq	r0, r0, r1
   14a2c:	andeq	r0, r0, r0
   14a30:	andeq	ip, r1, r8, ror #22
   14a34:	andeq	ip, r1, ip, ror #22
   14a38:	andeq	ip, r1, r8, ror #16
   14a3c:	nop	{0}

00014a40 <UnityPrintLen@@Base>:
   14a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a44:	add	fp, sp, #28
   14a48:	sub	sp, sp, #4
   14a4c:	vpush	{d8-d9}
   14a50:	ldr	r6, [pc, #760]	; 14d50 <UnityPrintLen@@Base+0x310>
   14a54:	mov	r9, r0
   14a58:	ldr	r0, [pc, #756]	; 14d54 <UnityPrintLen@@Base+0x314>
   14a5c:	mov	r4, r1
   14a60:	ldr	r0, [pc, r0]
   14a64:	add	r6, pc, r6
   14a68:	mov	r1, r6
   14a6c:	adds	r0, r0, #1
   14a70:	str	r0, [r6]
   14a74:	ldr	r0, [r6, #4]
   14a78:	adc	r0, r0, #0
   14a7c:	cmp	r9, #0
   14a80:	str	r0, [r6, #4]
   14a84:	mov	r0, #16
   14a88:	movwne	r0, #8
   14a8c:	ldr	r0, [r1, r0]!
   14a90:	adds	r0, r0, #1
   14a94:	str	r0, [r1]
   14a98:	ldr	r0, [r1, #4]
   14a9c:	adc	r0, r0, #0
   14aa0:	cmp	r9, #0
   14aa4:	str	r0, [r1, #4]
   14aa8:	beq	14d20 <UnityPrintLen@@Base+0x2e0>
   14aac:	ldrb	r0, [r9]
   14ab0:	mov	r1, #32
   14ab4:	mov	r2, r6
   14ab8:	cmp	r0, #0
   14abc:	movwne	r1, #24
   14ac0:	ldr	r1, [r2, r1]!
   14ac4:	adds	r1, r1, #1
   14ac8:	str	r1, [r2]
   14acc:	ldr	r1, [r2, #4]
   14ad0:	adc	r1, r1, #0
   14ad4:	cmp	r0, #0
   14ad8:	str	r1, [r2, #4]
   14adc:	beq	14d20 <UnityPrintLen@@Base+0x2e0>
   14ae0:	ldr	sl, [pc, #624]	; 14d58 <UnityPrintLen@@Base+0x318>
   14ae4:	ldr	r8, [pc, #624]	; 14d5c <UnityPrintLen@@Base+0x31c>
   14ae8:	mov	r5, r9
   14aec:	ldr	r8, [pc, r8]
   14af0:	add	sl, pc, sl
   14af4:	sub	r1, r5, r9
   14af8:	mov	r2, #48	; 0x30
   14afc:	mov	r3, r6
   14b00:	cmp	r1, r4
   14b04:	movwcc	r2, #40	; 0x28
   14b08:	ldr	r2, [r3, r2]!
   14b0c:	adds	r2, r2, #1
   14b10:	str	r2, [r3]
   14b14:	ldr	r2, [r3, #4]
   14b18:	adc	r2, r2, #0
   14b1c:	cmp	r1, r4
   14b20:	str	r2, [r3, #4]
   14b24:	bcs	14d20 <UnityPrintLen@@Base+0x2e0>
   14b28:	uxtb	r0, r0
   14b2c:	mov	r1, #64	; 0x40
   14b30:	mov	r2, r6
   14b34:	cmp	r0, #127	; 0x7f
   14b38:	movwcc	r1, #56	; 0x38
   14b3c:	ldr	r1, [r2, r1]!
   14b40:	adds	r1, r1, #1
   14b44:	str	r1, [r2]
   14b48:	ldr	r1, [r2, #4]
   14b4c:	adc	r1, r1, #0
   14b50:	cmp	r0, #126	; 0x7e
   14b54:	str	r1, [r2, #4]
   14b58:	bhi	14bbc <UnityPrintLen@@Base+0x17c>
   14b5c:	cmp	r0, #31
   14b60:	mov	r1, #80	; 0x50
   14b64:	mov	r2, r6
   14b68:	movwhi	r1, #72	; 0x48
   14b6c:	ldr	r1, [r2, r1]!
   14b70:	adds	r1, r1, #1
   14b74:	str	r1, [r2]
   14b78:	ldr	r1, [r2, #4]
   14b7c:	adc	r1, r1, #0
   14b80:	cmp	r0, #32
   14b84:	str	r1, [r2, #4]
   14b88:	bcc	14bbc <UnityPrintLen@@Base+0x17c>
   14b8c:	add	r1, pc, #428	; 0x1ac
   14b90:	ldrd	r2, [r6, #88]	; 0x58
   14b94:	vld1.64	{d18-d19}, [sl :128]
   14b98:	vld1.64	{d16-d17}, [r1 :128]
   14b9c:	ldr	r1, [r8]
   14ba0:	adds	r2, r2, #1
   14ba4:	vadd.i64	q8, q9, q8
   14ba8:	adc	r3, r3, #0
   14bac:	vst1.64	{d16-d17}, [sl :128]
   14bb0:	strd	r2, [r6, #88]	; 0x58
   14bb4:	bl	127a0 <putc@plt>
   14bb8:	b	14cdc <UnityPrintLen@@Base+0x29c>
   14bbc:	ldrb	r7, [r5]
   14bc0:	mov	r0, #104	; 0x68
   14bc4:	mov	r1, r6
   14bc8:	cmp	r7, #13
   14bcc:	movweq	r0, #96	; 0x60
   14bd0:	ldr	r0, [r1, r0]!
   14bd4:	adds	r0, r0, #1
   14bd8:	str	r0, [r1]
   14bdc:	ldr	r0, [r1, #4]
   14be0:	adc	r0, r0, #0
   14be4:	cmp	r7, #13
   14be8:	str	r0, [r1, #4]
   14bec:	bne	14c3c <UnityPrintLen@@Base+0x1fc>
   14bf0:	add	r0, pc, #328	; 0x148
   14bf4:	vld1.64	{d16-d17}, [sl :128]
   14bf8:	vld1.64	{d8-d9}, [r0 :128]
   14bfc:	ldrd	r0, [r6, #112]	; 0x70
   14c00:	adds	r0, r0, #1
   14c04:	vadd.i64	q8, q8, q4
   14c08:	adc	r1, r1, #0
   14c0c:	vst1.64	{d16-d17}, [sl :128]
   14c10:	strd	r0, [r6, #112]	; 0x70
   14c14:	ldr	r1, [r8]
   14c18:	mov	r0, #92	; 0x5c
   14c1c:	bl	127a0 <putc@plt>
   14c20:	vld1.64	{d16-d17}, [sl :128]
   14c24:	ldr	r1, [r8]
   14c28:	mov	r0, #114	; 0x72
   14c2c:	vadd.i64	q8, q8, q4
   14c30:	vst1.64	{d16-d17}, [sl :128]
   14c34:	bl	127a0 <putc@plt>
   14c38:	b	14cdc <UnityPrintLen@@Base+0x29c>
   14c3c:	add	r0, pc, #252	; 0xfc
   14c40:	vld1.64	{d18-d19}, [sl :128]
   14c44:	ldr	r1, [r8]
   14c48:	vld1.64	{d16-d17}, [r0 :128]
   14c4c:	mov	r0, #92	; 0x5c
   14c50:	vadd.i64	q8, q9, q8
   14c54:	vst1.64	{d16-d17}, [sl :128]
   14c58:	bl	127a0 <putc@plt>
   14c5c:	cmp	r7, #10
   14c60:	mov	r0, #128	; 0x80
   14c64:	mov	r1, r6
   14c68:	movweq	r0, #120	; 0x78
   14c6c:	ldr	r0, [r1, r0]!
   14c70:	adds	r0, r0, #1
   14c74:	str	r0, [r1]
   14c78:	ldr	r0, [r1, #4]
   14c7c:	adc	r0, r0, #0
   14c80:	cmp	r7, #10
   14c84:	str	r0, [r1, #4]
   14c88:	bne	14cc0 <UnityPrintLen@@Base+0x280>
   14c8c:	add	r0, pc, #172	; 0xac
   14c90:	vld1.64	{d18-d19}, [sl :128]
   14c94:	vld1.64	{d16-d17}, [r0 :128]
   14c98:	ldrd	r0, [r6, #136]	; 0x88
   14c9c:	adds	r0, r0, #1
   14ca0:	vadd.i64	q8, q9, q8
   14ca4:	adc	r1, r1, #0
   14ca8:	vst1.64	{d16-d17}, [sl :128]
   14cac:	strd	r0, [r6, #136]	; 0x88
   14cb0:	ldr	r1, [r8]
   14cb4:	mov	r0, #110	; 0x6e
   14cb8:	bl	127a0 <putc@plt>
   14cbc:	b	14cdc <UnityPrintLen@@Base+0x29c>
   14cc0:	ldrd	r0, [r6, #144]	; 0x90
   14cc4:	adds	r0, r0, #1
   14cc8:	adc	r1, r1, #0
   14ccc:	strd	r0, [r6, #144]	; 0x90
   14cd0:	mov	r1, #2
   14cd4:	ldrb	r0, [r5]
   14cd8:	bl	14880 <UnityPrintNumberHex@@Base>
   14cdc:	ldrd	r0, [r6, #152]	; 0x98
   14ce0:	mov	r2, r6
   14ce4:	adds	r0, r0, #1
   14ce8:	adc	r1, r1, #0
   14cec:	strd	r0, [r6, #152]	; 0x98
   14cf0:	mov	r1, #32
   14cf4:	ldrb	r0, [r5, #1]!
   14cf8:	cmp	r0, #0
   14cfc:	movwne	r1, #24
   14d00:	ldr	r1, [r2, r1]!
   14d04:	adds	r1, r1, #1
   14d08:	str	r1, [r2]
   14d0c:	ldr	r1, [r2, #4]
   14d10:	adc	r1, r1, #0
   14d14:	cmp	r0, #0
   14d18:	str	r1, [r2, #4]
   14d1c:	bne	14af4 <UnityPrintLen@@Base+0xb4>
   14d20:	ldrd	r0, [r6, #160]	; 0xa0
   14d24:	adds	r0, r0, #1
   14d28:	adc	r1, r1, #0
   14d2c:	strd	r0, [r6, #160]	; 0xa0
   14d30:	vpop	{d8-d9}
   14d34:	add	sp, sp, #4
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d3c:	nop	{0}
   14d40:	andeq	r0, r0, r1
   14d44:	andeq	r0, r0, r0
   14d48:	andeq	r0, r0, r1
   14d4c:	andeq	r0, r0, r0
   14d50:	andeq	ip, r1, r4, lsl sl
   14d54:	andeq	ip, r1, r8, lsl sl
   14d58:	andeq	ip, r1, r8, lsr #18
   14d5c:	andeq	ip, r1, ip, asr r6

00014d60 <UnityPrintNumberByStyle@@Base>:
   14d60:	push	{r4, r5, r6, sl, fp, lr}
   14d64:	add	fp, sp, #16
   14d68:	ldr	r6, [pc, #240]	; 14e60 <UnityPrintNumberByStyle@@Base+0x100>
   14d6c:	ldr	r2, [pc, #240]	; 14e64 <UnityPrintNumberByStyle@@Base+0x104>
   14d70:	mov	r3, #16
   14d74:	ldr	r2, [pc, r2]
   14d78:	add	r6, pc, r6
   14d7c:	mov	r4, r6
   14d80:	adds	r2, r2, #1
   14d84:	str	r2, [r6]
   14d88:	ldr	r2, [r6, #4]
   14d8c:	adc	r2, r2, #0
   14d90:	str	r2, [r6, #4]
   14d94:	ands	r2, r1, #16
   14d98:	movwne	r3, #8
   14d9c:	ldr	r3, [r4, r3]!
   14da0:	adds	r3, r3, #1
   14da4:	str	r3, [r4]
   14da8:	ldr	r3, [r4, #4]
   14dac:	adc	r3, r3, #0
   14db0:	cmp	r2, #0
   14db4:	str	r3, [r4, #4]
   14db8:	beq	14dd4 <UnityPrintNumberByStyle@@Base+0x74>
   14dbc:	ldrd	r2, [r6, #24]
   14dc0:	adds	r2, r2, #1
   14dc4:	adc	r3, r3, #0
   14dc8:	strd	r2, [r6, #24]
   14dcc:	bl	14e70 <UnityPrintNumber@@Base>
   14dd0:	b	14e4c <UnityPrintNumberByStyle@@Base+0xec>
   14dd4:	ands	r2, r1, #32
   14dd8:	mov	r3, #40	; 0x28
   14ddc:	mov	r5, r6
   14de0:	and	r1, r1, #15
   14de4:	movwne	r3, #32
   14de8:	ldr	r3, [r5, r3]!
   14dec:	adds	r3, r3, #1
   14df0:	str	r3, [r5]
   14df4:	ldr	r3, [r5, #4]
   14df8:	adc	r3, r3, #0
   14dfc:	cmp	r2, #0
   14e00:	str	r3, [r5, #4]
   14e04:	beq	14e34 <UnityPrintNumberByStyle@@Base+0xd4>
   14e08:	ldrd	r2, [r6, #48]	; 0x30
   14e0c:	adds	r2, r2, #1
   14e10:	adc	r3, r3, #0
   14e14:	strd	r2, [r6, #48]	; 0x30
   14e18:	ldr	r2, [pc, #72]	; 14e68 <UnityPrintNumberByStyle@@Base+0x108>
   14e1c:	ldr	r2, [pc, r2]
   14e20:	add	r1, r2, r1, lsl #2
   14e24:	ldr	r1, [r1, #-4]
   14e28:	and	r0, r1, r0
   14e2c:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   14e30:	b	14e4c <UnityPrintNumberByStyle@@Base+0xec>
   14e34:	ldrd	r2, [r6, #56]	; 0x38
   14e38:	lsl	r1, r1, #1
   14e3c:	adds	r2, r2, #1
   14e40:	adc	r3, r3, #0
   14e44:	strd	r2, [r6, #56]	; 0x38
   14e48:	bl	14880 <UnityPrintNumberHex@@Base>
   14e4c:	ldrd	r0, [r6, #64]	; 0x40
   14e50:	adds	r0, r0, #1
   14e54:	adc	r1, r1, #0
   14e58:	strd	r0, [r6, #64]	; 0x40
   14e5c:	pop	{r4, r5, r6, sl, fp, pc}
   14e60:			; <UNDEFINED> instruction: 0x0001c7b0
   14e64:			; <UNDEFINED> instruction: 0x0001c7b4
   14e68:	andeq	ip, r1, ip, lsr #5
   14e6c:	nop	{0}

00014e70 <UnityPrintNumber@@Base>:
   14e70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e74:	add	fp, sp, #24
   14e78:	ldr	r8, [pc, #560]	; 150b0 <UnityPrintNumber@@Base+0x240>
   14e7c:	mov	r9, r0
   14e80:	ldr	r0, [pc, #556]	; 150b4 <UnityPrintNumber@@Base+0x244>
   14e84:	ldr	r0, [pc, r0]
   14e88:	add	r8, pc, r8
   14e8c:	mov	r1, r8
   14e90:	adds	r0, r0, #1
   14e94:	str	r0, [r8]
   14e98:	ldr	r0, [r8, #4]
   14e9c:	adc	r0, r0, #0
   14ea0:	cmp	r9, #0
   14ea4:	str	r0, [r8, #4]
   14ea8:	mov	r0, #16
   14eac:	movwlt	r0, #8
   14eb0:	ldr	r0, [r1, r0]!
   14eb4:	adds	r0, r0, #1
   14eb8:	str	r0, [r1]
   14ebc:	ldr	r0, [r1, #4]
   14ec0:	adc	r0, r0, #0
   14ec4:	cmn	r9, #1
   14ec8:	str	r0, [r1, #4]
   14ecc:	ble	14ee4 <UnityPrintNumber@@Base+0x74>
   14ed0:	ldrd	r0, [r8, #32]
   14ed4:	adds	r0, r0, #1
   14ed8:	adc	r1, r1, #0
   14edc:	strd	r0, [r8, #32]
   14ee0:	b	14f28 <UnityPrintNumber@@Base+0xb8>
   14ee4:	ldr	r0, [pc, #460]	; 150b8 <UnityPrintNumber@@Base+0x248>
   14ee8:	add	r1, pc, #432	; 0x1b0
   14eec:	ldrd	r2, [r8, #24]
   14ef0:	vld1.64	{d16-d17}, [r1 :128]
   14ef4:	add	r0, pc, r0
   14ef8:	adds	r2, r2, #1
   14efc:	vld1.64	{d18-d19}, [r0 :128]
   14f00:	adc	r3, r3, #0
   14f04:	strd	r2, [r8, #24]
   14f08:	vadd.i64	q8, q9, q8
   14f0c:	vst1.64	{d16-d17}, [r0 :128]
   14f10:	ldr	r0, [pc, #420]	; 150bc <UnityPrintNumber@@Base+0x24c>
   14f14:	ldr	r0, [pc, r0]
   14f18:	ldr	r1, [r0]
   14f1c:	mov	r0, #45	; 0x2d
   14f20:	bl	127a0 <putc@plt>
   14f24:	rsb	r9, r9, #0
   14f28:	ldrd	r0, [r8, #40]	; 0x28
   14f2c:	mov	r6, #1
   14f30:	adds	r0, r0, #1
   14f34:	adc	r1, r1, #0
   14f38:	cmp	r9, #9
   14f3c:	strd	r0, [r8, #40]	; 0x28
   14f40:	mov	r0, #56	; 0x38
   14f44:	mov	r1, r8
   14f48:	movwhi	r0, #48	; 0x30
   14f4c:	ldr	r0, [r1, r0]!
   14f50:	adds	r0, r0, #1
   14f54:	str	r0, [r1]
   14f58:	ldr	r0, [r1, #4]
   14f5c:	adc	r0, r0, #0
   14f60:	cmp	r9, #10
   14f64:	str	r0, [r1, #4]
   14f68:	bcc	14fec <UnityPrintNumber@@Base+0x17c>
   14f6c:	mov	r6, #1
   14f70:	add	r0, r6, r6, lsl #2
   14f74:	mov	r1, #72	; 0x48
   14f78:	mov	r2, r8
   14f7c:	cmp	r6, r0, lsl #1
   14f80:	movwcc	r1, #64	; 0x40
   14f84:	ldr	r1, [r2, r1]!
   14f88:	adds	r1, r1, #1
   14f8c:	str	r1, [r2]
   14f90:	ldr	r1, [r2, #4]
   14f94:	adc	r1, r1, #0
   14f98:	cmp	r6, r0, lsl #1
   14f9c:	str	r1, [r2, #4]
   14fa0:	bcs	14fec <UnityPrintNumber@@Base+0x17c>
   14fa4:	lsl	r6, r0, #1
   14fa8:	ldrd	r0, [r8, #80]	; 0x50
   14fac:	mov	r2, r8
   14fb0:	adds	r0, r0, #1
   14fb4:	adc	r1, r1, #0
   14fb8:	strd	r0, [r8, #80]	; 0x50
   14fbc:	udiv	r0, r9, r6
   14fc0:	mov	r1, #56	; 0x38
   14fc4:	cmp	r0, #9
   14fc8:	movwhi	r1, #48	; 0x30
   14fcc:	ldr	r1, [r2, r1]!
   14fd0:	adds	r1, r1, #1
   14fd4:	str	r1, [r2]
   14fd8:	ldr	r1, [r2, #4]
   14fdc:	adc	r1, r1, #0
   14fe0:	cmp	r0, #9
   14fe4:	str	r1, [r2, #4]
   14fe8:	bhi	14f70 <UnityPrintNumber@@Base+0x100>
   14fec:	ldrd	r0, [r8, #88]	; 0x58
   14ff0:	movw	r5, #52429	; 0xcccd
   14ff4:	movt	r5, #52428	; 0xcccc
   14ff8:	adds	r0, r0, #1
   14ffc:	adc	r1, r1, #0
   15000:	strd	r0, [r8, #88]	; 0x58
   15004:	ldr	r7, [pc, #180]	; 150c0 <UnityPrintNumber@@Base+0x250>
   15008:	ldr	r4, [pc, #180]	; 150c4 <UnityPrintNumber@@Base+0x254>
   1500c:	ldr	r4, [pc, r4]
   15010:	add	r7, pc, r7
   15014:	add	r0, pc, #132	; 0x84
   15018:	vld1.64	{d18-d19}, [r7 :128]
   1501c:	vld1.64	{d16-d17}, [r0 :128]
   15020:	udiv	r0, r9, r6
   15024:	umull	r1, r2, r0, r5
   15028:	lsr	r1, r2, #3
   1502c:	add	r1, r1, r1, lsl #2
   15030:	sub	r0, r0, r1, lsl #1
   15034:	ldr	r1, [r4]
   15038:	vadd.i64	q8, q9, q8
   1503c:	orr	r0, r0, #48	; 0x30
   15040:	vst1.64	{d16-d17}, [r7 :128]
   15044:	bl	127a0 <putc@plt>
   15048:	cmp	r6, #9
   1504c:	mov	r0, #104	; 0x68
   15050:	mov	r1, r8
   15054:	movwhi	r0, #96	; 0x60
   15058:	ldr	r0, [r1, r0]!
   1505c:	adds	r0, r0, #1
   15060:	str	r0, [r1]
   15064:	ldr	r0, [r1, #4]
   15068:	adc	r0, r0, #0
   1506c:	cmp	r6, #9
   15070:	str	r0, [r1, #4]
   15074:	umull	r0, r1, r6, r5
   15078:	lsr	r0, r1, #3
   1507c:	mov	r6, r0
   15080:	bhi	15014 <UnityPrintNumber@@Base+0x1a4>
   15084:	ldrd	r0, [r8, #112]	; 0x70
   15088:	adds	r0, r0, #1
   1508c:	adc	r1, r1, #0
   15090:	strd	r0, [r8, #112]	; 0x70
   15094:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15098:	nop	{0}
   1509c:	nop	{0}
   150a0:	andeq	r0, r0, r1
   150a4:	andeq	r0, r0, r0
   150a8:	andeq	r0, r0, r1
   150ac:	andeq	r0, r0, r0
   150b0:	strdeq	ip, [r1], -r0
   150b4:	strdeq	ip, [r1], -r4
   150b8:	andeq	ip, r1, r4, lsr #10
   150bc:	andeq	ip, r1, r4, lsr r2
   150c0:	andeq	ip, r1, r8, lsl #8
   150c4:	andeq	ip, r1, ip, lsr r1
   150c8:	nop	{0}
   150cc:	nop	{0}

000150d0 <UnityPrintNumberUnsigned@@Base>:
   150d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150d4:	add	fp, sp, #24
   150d8:	ldr	r8, [pc, #384]	; 15260 <UnityPrintNumberUnsigned@@Base+0x190>
   150dc:	mov	r4, r0
   150e0:	add	r0, pc, #360	; 0x168
   150e4:	mov	r6, #1
   150e8:	vld1.64	{d16-d17}, [r0 :128]
   150ec:	mov	r0, #24
   150f0:	cmp	r4, #9
   150f4:	movwhi	r0, #16
   150f8:	add	r8, pc, r8
   150fc:	vld1.64	{d18-d19}, [r8 :128]
   15100:	mov	r1, r8
   15104:	vadd.i64	q8, q9, q8
   15108:	vst1.64	{d16-d17}, [r1 :128], r0
   1510c:	ldm	r1, {r0, r3}
   15110:	adds	r0, r0, #1
   15114:	adc	r3, r3, #0
   15118:	cmp	r4, #10
   1511c:	stm	r1, {r0, r3}
   15120:	bcc	151a4 <UnityPrintNumberUnsigned@@Base+0xd4>
   15124:	mov	r6, #1
   15128:	add	r0, r6, r6, lsl #2
   1512c:	mov	r1, #40	; 0x28
   15130:	mov	r2, r8
   15134:	cmp	r6, r0, lsl #1
   15138:	movwcc	r1, #32
   1513c:	ldr	r1, [r2, r1]!
   15140:	adds	r1, r1, #1
   15144:	str	r1, [r2]
   15148:	ldr	r1, [r2, #4]
   1514c:	adc	r1, r1, #0
   15150:	cmp	r6, r0, lsl #1
   15154:	str	r1, [r2, #4]
   15158:	bcs	151a4 <UnityPrintNumberUnsigned@@Base+0xd4>
   1515c:	lsl	r6, r0, #1
   15160:	ldrd	r0, [r8, #48]	; 0x30
   15164:	mov	r2, r8
   15168:	adds	r0, r0, #1
   1516c:	adc	r1, r1, #0
   15170:	strd	r0, [r8, #48]	; 0x30
   15174:	udiv	r0, r4, r6
   15178:	mov	r1, #24
   1517c:	cmp	r0, #9
   15180:	movwhi	r1, #16
   15184:	ldr	r1, [r2, r1]!
   15188:	adds	r1, r1, #1
   1518c:	str	r1, [r2]
   15190:	ldr	r1, [r2, #4]
   15194:	adc	r1, r1, #0
   15198:	cmp	r0, #9
   1519c:	str	r1, [r2, #4]
   151a0:	bhi	15128 <UnityPrintNumberUnsigned@@Base+0x58>
   151a4:	ldrd	r0, [r8, #56]	; 0x38
   151a8:	movw	r5, #52429	; 0xcccd
   151ac:	movt	r5, #52428	; 0xcccc
   151b0:	adds	r0, r0, #1
   151b4:	adc	r1, r1, #0
   151b8:	strd	r0, [r8, #56]	; 0x38
   151bc:	ldr	r7, [pc, #160]	; 15264 <UnityPrintNumberUnsigned@@Base+0x194>
   151c0:	ldr	r9, [pc, #160]	; 15268 <UnityPrintNumberUnsigned@@Base+0x198>
   151c4:	ldr	r9, [pc, r9]
   151c8:	add	r7, pc, r7
   151cc:	add	r0, pc, #124	; 0x7c
   151d0:	vld1.64	{d18-d19}, [r7 :128]
   151d4:	vld1.64	{d16-d17}, [r0 :128]
   151d8:	udiv	r0, r4, r6
   151dc:	umull	r1, r2, r0, r5
   151e0:	lsr	r1, r2, #3
   151e4:	add	r1, r1, r1, lsl #2
   151e8:	sub	r0, r0, r1, lsl #1
   151ec:	ldr	r1, [r9]
   151f0:	vadd.i64	q8, q9, q8
   151f4:	orr	r0, r0, #48	; 0x30
   151f8:	vst1.64	{d16-d17}, [r7 :128]
   151fc:	bl	127a0 <putc@plt>
   15200:	cmp	r6, #9
   15204:	mov	r0, #72	; 0x48
   15208:	mov	r1, r8
   1520c:	movwhi	r0, #64	; 0x40
   15210:	ldr	r0, [r1, r0]!
   15214:	adds	r0, r0, #1
   15218:	str	r0, [r1]
   1521c:	ldr	r0, [r1, #4]
   15220:	adc	r0, r0, #0
   15224:	cmp	r6, #9
   15228:	str	r0, [r1, #4]
   1522c:	umull	r0, r1, r6, r5
   15230:	lsr	r0, r1, #3
   15234:	mov	r6, r0
   15238:	bhi	151cc <UnityPrintNumberUnsigned@@Base+0xfc>
   1523c:	ldrd	r0, [r8, #80]	; 0x50
   15240:	adds	r0, r0, #1
   15244:	adc	r1, r1, #0
   15248:	strd	r0, [r8, #80]	; 0x50
   1524c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15250:	andeq	r0, r0, r1
   15254:	andeq	r0, r0, r0
   15258:	andeq	r0, r0, r1
   1525c:	andeq	r0, r0, r0
   15260:	andeq	ip, r1, r0, lsl #10
   15264:	andeq	ip, r1, r0, asr r2
   15268:	andeq	fp, r1, r4, lsl #31
   1526c:	nop	{0}

00015270 <UnityPrintMask@@Base>:
   15270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15274:	add	fp, sp, #28
   15278:	sub	sp, sp, #4
   1527c:	ldr	r6, [pc, #428]	; 15430 <UnityPrintMask@@Base+0x1c0>
   15280:	mov	r9, r0
   15284:	add	r0, pc, #404	; 0x194
   15288:	mov	r8, r1
   1528c:	mov	r7, #-2147483648	; 0x80000000
   15290:	mov	r4, #1
   15294:	vld1.64	{d16-d17}, [r0 :128]
   15298:	add	r6, pc, r6
   1529c:	vld1.64	{d18-d19}, [r6 :128]
   152a0:	mov	r0, r6
   152a4:	vadd.i64	q8, q9, q8
   152a8:	vst1.64	{d16-d17}, [r0 :128]!
   152ac:	ldrd	r2, [r0]
   152b0:	adds	r2, r2, #1
   152b4:	adc	r3, r3, #0
   152b8:	strd	r2, [r0]
   152bc:	ldr	r5, [pc, #368]	; 15434 <UnityPrintMask@@Base+0x1c4>
   152c0:	ldr	sl, [pc, #368]	; 15438 <UnityPrintMask@@Base+0x1c8>
   152c4:	ldr	sl, [pc, sl]
   152c8:	add	r5, pc, r5
   152cc:	ands	r0, r7, r9
   152d0:	mov	r1, #40	; 0x28
   152d4:	mov	r2, r6
   152d8:	movwne	r1, #32
   152dc:	ldr	r1, [r2, r1]!
   152e0:	adds	r1, r1, #1
   152e4:	str	r1, [r2]
   152e8:	ldr	r1, [r2, #4]
   152ec:	adc	r1, r1, #0
   152f0:	cmp	r0, #0
   152f4:	str	r1, [r2, #4]
   152f8:	beq	1535c <UnityPrintMask@@Base+0xec>
   152fc:	ands	r0, r7, r8
   15300:	mov	r1, #56	; 0x38
   15304:	mov	r2, r6
   15308:	movwne	r1, #48	; 0x30
   1530c:	ldr	r1, [r2, r1]!
   15310:	adds	r1, r1, #1
   15314:	str	r1, [r2]
   15318:	ldr	r1, [r2, #4]
   1531c:	adc	r1, r1, #0
   15320:	cmp	r0, #0
   15324:	str	r1, [r2, #4]
   15328:	beq	1538c <UnityPrintMask@@Base+0x11c>
   1532c:	add	r0, pc, #236	; 0xec
   15330:	vld1.64	{d18-d19}, [r5 :128]
   15334:	vld1.64	{d16-d17}, [r0 :128]
   15338:	ldrd	r0, [r6, #64]	; 0x40
   1533c:	adds	r0, r0, #1
   15340:	vadd.i64	q8, q9, q8
   15344:	adc	r1, r1, #0
   15348:	vst1.64	{d16-d17}, [r5 :128]
   1534c:	strd	r0, [r6, #64]	; 0x40
   15350:	ldr	r1, [sl]
   15354:	mov	r0, #49	; 0x31
   15358:	b	153b8 <UnityPrintMask@@Base+0x148>
   1535c:	add	r0, pc, #188	; 0xbc
   15360:	vld1.64	{d18-d19}, [r5 :128]
   15364:	vld1.64	{d16-d17}, [r0 :128]
   15368:	ldrd	r0, [r6, #80]	; 0x50
   1536c:	adds	r0, r0, #1
   15370:	vadd.i64	q8, q9, q8
   15374:	adc	r1, r1, #0
   15378:	vst1.64	{d16-d17}, [r5 :128]
   1537c:	strd	r0, [r6, #80]	; 0x50
   15380:	ldr	r1, [sl]
   15384:	mov	r0, #88	; 0x58
   15388:	b	153b8 <UnityPrintMask@@Base+0x148>
   1538c:	add	r0, pc, #140	; 0x8c
   15390:	vld1.64	{d18-d19}, [r5 :128]
   15394:	vld1.64	{d16-d17}, [r0 :128]
   15398:	ldrd	r0, [r6, #72]	; 0x48
   1539c:	adds	r0, r0, #1
   153a0:	vadd.i64	q8, q9, q8
   153a4:	adc	r1, r1, #0
   153a8:	vst1.64	{d16-d17}, [r5 :128]
   153ac:	strd	r0, [r6, #72]	; 0x48
   153b0:	ldr	r1, [sl]
   153b4:	mov	r0, #48	; 0x30
   153b8:	bl	127a0 <putc@plt>
   153bc:	ldrd	r0, [r6, #88]	; 0x58
   153c0:	lsr	r7, r7, #1
   153c4:	adds	r0, r0, #1
   153c8:	adc	r1, r1, #0
   153cc:	cmp	r4, #32
   153d0:	add	r4, r4, #1
   153d4:	strd	r0, [r6, #88]	; 0x58
   153d8:	mov	r0, #24
   153dc:	mov	r1, r6
   153e0:	movwcc	r0, #16
   153e4:	ldr	r0, [r1, r0]!
   153e8:	adds	r0, r0, #1
   153ec:	str	r0, [r1]
   153f0:	ldr	r0, [r1, #4]
   153f4:	adc	r0, r0, #0
   153f8:	cmp	r4, #33	; 0x21
   153fc:	str	r0, [r1, #4]
   15400:	bne	152cc <UnityPrintMask@@Base+0x5c>
   15404:	ldrd	r0, [r6, #96]	; 0x60
   15408:	adds	r0, r0, #1
   1540c:	adc	r1, r1, #0
   15410:	strd	r0, [r6, #96]	; 0x60
   15414:	sub	sp, fp, #28
   15418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1541c:	nop	{0}
   15420:	andeq	r0, r0, r1
   15424:	andeq	r0, r0, r0
   15428:	andeq	r0, r0, r1
   1542c:	andeq	r0, r0, r0
   15430:	andeq	ip, r1, r0, asr #7
   15434:	andeq	ip, r1, r0, asr r1
   15438:	andeq	fp, r1, r4, lsl #29
   1543c:	nop	{0}

00015440 <UnityPrintFail@@Base>:
   15440:	ldr	r0, [pc, #56]	; 15480 <UnityPrintFail@@Base+0x40>
   15444:	add	r1, pc, #36	; 0x24
   15448:	vld1.64	{d16-d17}, [r1 :128]
   1544c:	add	r0, pc, r0
   15450:	vld1.64	{d18-d19}, [r0 :128]
   15454:	vadd.i64	q8, q9, q8
   15458:	vst1.64	{d16-d17}, [r0 :128]
   1545c:	ldr	r0, [pc, #32]	; 15484 <UnityPrintFail@@Base+0x44>
   15460:	ldr	r0, [pc, r0]
   15464:	b	145a0 <UnityPrint@@Base>
   15468:	nop	{0}
   1546c:	nop	{0}
   15470:	andeq	r0, r0, r1
   15474:	andeq	r0, r0, r0
   15478:	andeq	r0, r0, r1
   1547c:	andeq	r0, r0, r0
   15480:	andeq	ip, r1, ip, ror r2
   15484:	andeq	fp, r1, r4, asr #25
   15488:	nop	{0}
   1548c:	nop	{0}

00015490 <UnityPrintOk@@Base>:
   15490:	ldr	r0, [pc, #56]	; 154d0 <UnityPrintOk@@Base+0x40>
   15494:	add	r1, pc, #36	; 0x24
   15498:	vld1.64	{d16-d17}, [r1 :128]
   1549c:	add	r0, pc, r0
   154a0:	vld1.64	{d18-d19}, [r0 :128]
   154a4:	vadd.i64	q8, q9, q8
   154a8:	vst1.64	{d16-d17}, [r0 :128]
   154ac:	ldr	r0, [pc, #32]	; 154d4 <UnityPrintOk@@Base+0x44>
   154b0:	ldr	r0, [pc, r0]
   154b4:	b	145a0 <UnityPrint@@Base>
   154b8:	nop	{0}
   154bc:	nop	{0}
   154c0:	andeq	r0, r0, r1
   154c4:	andeq	r0, r0, r0
   154c8:	andeq	r0, r0, r1
   154cc:	andeq	r0, r0, r0
   154d0:	andeq	ip, r1, ip, lsr r2
   154d4:	andeq	fp, r1, r0, lsl ip
   154d8:	nop	{0}
   154dc:	nop	{0}

000154e0 <UnityConcludeTest@@Base>:
   154e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154e4:	add	fp, sp, #24
   154e8:	vpush	{d8-d9}
   154ec:	ldr	r5, [pc, #476]	; 156d0 <UnityConcludeTest@@Base+0x1f0>
   154f0:	ldr	r0, [pc, #476]	; 156d4 <UnityConcludeTest@@Base+0x1f4>
   154f4:	mov	r1, #16
   154f8:	ldr	r0, [pc, r0]
   154fc:	add	r5, pc, r5
   15500:	mov	r2, r5
   15504:	adds	r0, r0, #1
   15508:	str	r0, [r5]
   1550c:	ldr	r0, [r5, #4]
   15510:	adc	r0, r0, #0
   15514:	str	r0, [r5, #4]
   15518:	ldr	r6, [pc, #440]	; 156d8 <UnityConcludeTest@@Base+0x1f8>
   1551c:	ldr	r6, [pc, r6]
   15520:	ldr	r0, [r6, #36]	; 0x24
   15524:	cmp	r0, #0
   15528:	movwne	r1, #8
   1552c:	ldr	r1, [r2, r1]!
   15530:	adds	r1, r1, #1
   15534:	str	r1, [r2]
   15538:	ldr	r1, [r2, #4]
   1553c:	adc	r1, r1, #0
   15540:	cmp	r0, #0
   15544:	str	r1, [r2, #4]
   15548:	beq	1556c <UnityConcludeTest@@Base+0x8c>
   1554c:	ldrd	r0, [r5, #24]
   15550:	adds	r0, r0, #1
   15554:	adc	r1, r1, #0
   15558:	strd	r0, [r5, #24]
   1555c:	ldr	r0, [r6, #28]
   15560:	add	r0, r0, #1
   15564:	str	r0, [r6, #28]
   15568:	b	1566c <UnityConcludeTest@@Base+0x18c>
   1556c:	ldr	r0, [r6, #32]
   15570:	mov	r1, #40	; 0x28
   15574:	mov	r2, r5
   15578:	cmp	r0, #0
   1557c:	movwne	r1, #32
   15580:	ldr	r1, [r2, r1]!
   15584:	adds	r1, r1, #1
   15588:	str	r1, [r2]
   1558c:	ldr	r1, [r2, #4]
   15590:	adc	r1, r1, #0
   15594:	cmp	r0, #0
   15598:	str	r1, [r2, #4]
   1559c:	beq	155c0 <UnityConcludeTest@@Base+0xe0>
   155a0:	ldrd	r0, [r5, #56]	; 0x38
   155a4:	adds	r0, r0, #1
   155a8:	adc	r1, r1, #0
   155ac:	strd	r0, [r5, #56]	; 0x38
   155b0:	ldr	r0, [r6, #24]
   155b4:	add	r0, r0, #1
   155b8:	str	r0, [r6, #24]
   155bc:	b	1566c <UnityConcludeTest@@Base+0x18c>
   155c0:	ldr	r0, [pc, #276]	; 156dc <UnityConcludeTest@@Base+0x1fc>
   155c4:	add	r1, pc, #244	; 0xf4
   155c8:	ldrd	r2, [r5, #48]	; 0x30
   155cc:	ldr	r4, [r6, #16]
   155d0:	vld1.64	{d8-d9}, [r1 :128]
   155d4:	add	r0, pc, r0
   155d8:	adds	r2, r2, #1
   155dc:	vld1.64	{d16-d17}, [r0 :128]
   155e0:	adc	r3, r3, #0
   155e4:	strd	r2, [r5, #48]	; 0x30
   155e8:	vadd.i64	q8, q8, q4
   155ec:	vst1.64	{d16-d17}, [r0 :128]
   155f0:	ldr	r0, [r6]
   155f4:	bl	145a0 <UnityPrint@@Base>
   155f8:	ldr	r7, [pc, #224]	; 156e0 <UnityConcludeTest@@Base+0x200>
   155fc:	mov	r0, #58	; 0x3a
   15600:	add	r7, pc, r7
   15604:	vld1.64	{d16-d17}, [r7 :128]
   15608:	vadd.i64	q8, q8, q4
   1560c:	vst1.64	{d16-d17}, [r7 :128]
   15610:	ldr	r8, [pc, #204]	; 156e4 <UnityConcludeTest@@Base+0x204>
   15614:	ldr	r8, [pc, r8]
   15618:	ldr	r1, [r8]
   1561c:	bl	127a0 <putc@plt>
   15620:	mov	r0, r4
   15624:	bl	14e70 <UnityPrintNumber@@Base>
   15628:	vld1.64	{d16-d17}, [r7 :128]
   1562c:	ldr	r1, [r8]
   15630:	mov	r0, #58	; 0x3a
   15634:	vadd.i64	q8, q8, q4
   15638:	vst1.64	{d16-d17}, [r7 :128]
   1563c:	bl	127a0 <putc@plt>
   15640:	ldr	r0, [r6, #4]
   15644:	bl	145a0 <UnityPrint@@Base>
   15648:	vld1.64	{d16-d17}, [r7 :128]
   1564c:	ldr	r1, [r8]
   15650:	mov	r0, #58	; 0x3a
   15654:	vadd.i64	q8, q8, q4
   15658:	vst1.64	{d16-d17}, [r7 :128]
   1565c:	bl	127a0 <putc@plt>
   15660:	ldr	r0, [pc, #128]	; 156e8 <UnityConcludeTest@@Base+0x208>
   15664:	ldr	r0, [pc, r0]
   15668:	bl	145a0 <UnityPrint@@Base>
   1566c:	ldr	r0, [pc, #120]	; 156ec <UnityConcludeTest@@Base+0x20c>
   15670:	add	r1, pc, #72	; 0x48
   15674:	ldrd	r2, [r5, #64]	; 0x40
   15678:	vld1.64	{d16-d17}, [r1 :128]
   1567c:	mov	r1, #0
   15680:	str	r1, [r6, #32]
   15684:	str	r1, [r6, #36]	; 0x24
   15688:	add	r0, pc, r0
   1568c:	adds	r2, r2, #1
   15690:	vld1.64	{d18-d19}, [r0 :128]
   15694:	adc	r3, r3, #0
   15698:	strd	r2, [r5, #64]	; 0x40
   1569c:	vadd.i64	q8, q9, q8
   156a0:	vst1.64	{d16-d17}, [r0 :128]
   156a4:	ldr	r0, [pc, #68]	; 156f0 <UnityConcludeTest@@Base+0x210>
   156a8:	ldr	r0, [pc, r0]
   156ac:	ldr	r1, [r0]
   156b0:	mov	r0, #10
   156b4:	vpop	{d8-d9}
   156b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   156bc:	b	127a0 <putc@plt>
   156c0:	andeq	r0, r0, r1
   156c4:	andeq	r0, r0, r0
   156c8:	andeq	r0, r0, r1
   156cc:	andeq	r0, r0, r0
   156d0:	andeq	ip, r1, ip, ror #3
   156d4:	strdeq	ip, [r1], -r0
   156d8:	andeq	fp, r1, r4, lsl ip
   156dc:	andeq	ip, r1, r4, ror #2
   156e0:	andeq	fp, r1, r8, lsl lr
   156e4:	andeq	fp, r1, r4, lsr fp
   156e8:	andeq	fp, r1, r4, asr #20
   156ec:	muleq	r1, r0, sp
   156f0:	andeq	fp, r1, r0, lsr #21

000156f4 <UnityAssertBits@@Base>:
   156f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156f8:	add	fp, sp, #24
   156fc:	mov	r6, r0
   15700:	ldr	r0, [pc, #256]	; 15808 <UnityAssertBits@@Base+0x114>
   15704:	mov	r7, r1
   15708:	ldr	r1, [pc, #252]	; 1580c <UnityAssertBits@@Base+0x118>
   1570c:	mov	r8, r3
   15710:	mov	r5, r2
   15714:	ldr	r1, [pc, r1]
   15718:	add	r0, pc, r0
   1571c:	adds	r1, r1, #1
   15720:	str	r1, [r0]
   15724:	ldr	r1, [r0, #4]
   15728:	adc	r1, r1, #0
   1572c:	str	r1, [r0, #4]
   15730:	ldr	r4, [pc, #216]	; 15810 <UnityAssertBits@@Base+0x11c>
   15734:	ldr	r4, [pc, r4]
   15738:	ldrd	r2, [r4, #32]
   1573c:	orrs	r1, r3, r2
   15740:	mov	r2, #16
   15744:	mov	r3, r0
   15748:	movwne	r2, #8
   1574c:	ldr	r2, [r3, r2]!
   15750:	adds	r2, r2, #1
   15754:	str	r2, [r3]
   15758:	ldr	r2, [r3, #4]
   1575c:	adc	r2, r2, #0
   15760:	cmp	r1, #0
   15764:	str	r2, [r3, #4]
   15768:	bne	157a0 <UnityAssertBits@@Base+0xac>
   1576c:	eor	r1, r5, r7
   15770:	mov	r2, #32
   15774:	mov	r3, r0
   15778:	ands	r1, r1, r6
   1577c:	movwne	r2, #24
   15780:	ldr	r2, [r3, r2]!
   15784:	adds	r2, r2, #1
   15788:	str	r2, [r3]
   1578c:	ldr	r2, [r3, #4]
   15790:	adc	r2, r2, #0
   15794:	cmp	r1, #0
   15798:	str	r2, [r3, #4]
   1579c:	bne	157b4 <UnityAssertBits@@Base+0xc0>
   157a0:	ldrd	r2, [r0, #40]	; 0x28
   157a4:	adds	r2, r2, #1
   157a8:	adc	r3, r3, #0
   157ac:	strd	r2, [r0, #40]	; 0x28
   157b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157b4:	ldr	r0, [fp, #8]
   157b8:	bl	15820 <UnityAssertBits@@Base+0x12c>
   157bc:	ldr	r0, [pc, #80]	; 15814 <UnityAssertBits@@Base+0x120>
   157c0:	ldr	r0, [pc, r0]
   157c4:	bl	145a0 <UnityPrint@@Base>
   157c8:	mov	r0, r6
   157cc:	mov	r1, r7
   157d0:	bl	15270 <UnityPrintMask@@Base>
   157d4:	ldr	r0, [pc, #60]	; 15818 <UnityAssertBits@@Base+0x124>
   157d8:	ldr	r0, [pc, r0]
   157dc:	bl	145a0 <UnityPrint@@Base>
   157e0:	mov	r0, r6
   157e4:	mov	r1, r5
   157e8:	bl	15270 <UnityPrintMask@@Base>
   157ec:	mov	r0, r8
   157f0:	bl	15938 <UnityAssertBits@@Base+0x244>
   157f4:	mov	r0, #1
   157f8:	mov	r1, #1
   157fc:	str	r0, [r4, #32]
   15800:	add	r0, r4, #40	; 0x28
   15804:	bl	125fc <longjmp@plt>
   15808:	andeq	ip, r1, r0, lsr r0
   1580c:	andeq	ip, r1, r4, lsr r0
   15810:	strdeq	fp, [r1], -ip
   15814:	andeq	fp, r1, r0, lsr r9
   15818:	andeq	fp, r1, ip, ror r9
   1581c:	nop	{0}
   15820:	push	{r4, r5, r6, r7, fp, lr}
   15824:	add	fp, sp, #16
   15828:	vpush	{d8-d9}
   1582c:	mov	r4, r0
   15830:	ldr	r0, [pc, #232]	; 15920 <UnityAssertBits@@Base+0x22c>
   15834:	ldr	r1, [pc, #232]	; 15924 <UnityAssertBits@@Base+0x230>
   15838:	add	r2, pc, #208	; 0xd0
   1583c:	vld1.64	{d8-d9}, [r2 :128]
   15840:	add	r0, pc, r0
   15844:	add	r1, pc, r1
   15848:	vld1.64	{d16-d17}, [r1 :128]
   1584c:	vld1.64	{d18-d19}, [r0 :128]
   15850:	vadd.i64	q8, q8, q4
   15854:	vadd.i64	q9, q9, q4
   15858:	vst1.64	{d16-d17}, [r1 :128]
   1585c:	vst1.64	{d18-d19}, [r0 :128]
   15860:	ldr	r7, [pc, #192]	; 15928 <UnityAssertBits@@Base+0x234>
   15864:	ldr	r7, [pc, r7]
   15868:	ldr	r0, [r7]
   1586c:	bl	145a0 <UnityPrint@@Base>
   15870:	ldr	r5, [pc, #180]	; 1592c <UnityAssertBits@@Base+0x238>
   15874:	mov	r0, #58	; 0x3a
   15878:	add	r5, pc, r5
   1587c:	vld1.64	{d16-d17}, [r5 :128]
   15880:	vadd.i64	q8, q8, q4
   15884:	vst1.64	{d16-d17}, [r5 :128]
   15888:	ldr	r6, [pc, #160]	; 15930 <UnityAssertBits@@Base+0x23c>
   1588c:	ldr	r6, [pc, r6]
   15890:	ldr	r1, [r6]
   15894:	bl	127a0 <putc@plt>
   15898:	mov	r0, r4
   1589c:	bl	14e70 <UnityPrintNumber@@Base>
   158a0:	vld1.64	{d16-d17}, [r5 :128]
   158a4:	ldr	r1, [r6]
   158a8:	mov	r0, #58	; 0x3a
   158ac:	vadd.i64	q8, q8, q4
   158b0:	vst1.64	{d16-d17}, [r5 :128]
   158b4:	bl	127a0 <putc@plt>
   158b8:	ldr	r0, [r7, #4]
   158bc:	bl	145a0 <UnityPrint@@Base>
   158c0:	vld1.64	{d16-d17}, [r5 :128]
   158c4:	ldr	r1, [r6]
   158c8:	mov	r0, #58	; 0x3a
   158cc:	vadd.i64	q8, q8, q4
   158d0:	vst1.64	{d16-d17}, [r5 :128]
   158d4:	bl	127a0 <putc@plt>
   158d8:	ldr	r0, [pc, #84]	; 15934 <UnityAssertBits@@Base+0x240>
   158dc:	ldr	r0, [pc, r0]
   158e0:	bl	145a0 <UnityPrint@@Base>
   158e4:	vld1.64	{d16-d17}, [r5 :128]
   158e8:	ldr	r1, [r6]
   158ec:	mov	r0, #58	; 0x3a
   158f0:	vadd.i64	q8, q8, q4
   158f4:	vst1.64	{d16-d17}, [r5 :128]
   158f8:	vpop	{d8-d9}
   158fc:	pop	{r4, r5, r6, r7, fp, lr}
   15900:	b	127a0 <putc@plt>
   15904:	nop	{0}
   15908:	nop	{0}
   1590c:	nop	{0}
   15910:	andeq	r0, r0, r1
   15914:	andeq	r0, r0, r0
   15918:	andeq	r0, r0, r1
   1591c:	andeq	r0, r0, r0
   15920:	strdeq	fp, [r1], -r8
   15924:	andeq	fp, r1, r4, lsr pc
   15928:	andeq	fp, r1, ip, asr #17
   1592c:	andeq	fp, r1, r0, lsr #23
   15930:			; <UNDEFINED> instruction: 0x0001b8bc
   15934:	andeq	fp, r1, r8, asr #16
   15938:	push	{r4, r5, r6, sl, fp, lr}
   1593c:	add	fp, sp, #16
   15940:	ldr	r5, [pc, #332]	; 15a94 <UnityAssertBits@@Base+0x3a0>
   15944:	mov	r4, r0
   15948:	ldr	r0, [pc, #328]	; 15a98 <UnityAssertBits@@Base+0x3a4>
   1594c:	ldr	r0, [pc, r0]
   15950:	add	r5, pc, r5
   15954:	mov	r1, r5
   15958:	adds	r0, r0, #1
   1595c:	str	r0, [r5]
   15960:	ldr	r0, [r5, #4]
   15964:	adc	r0, r0, #0
   15968:	cmp	r4, #0
   1596c:	str	r0, [r5, #4]
   15970:	mov	r0, #16
   15974:	movwne	r0, #8
   15978:	ldr	r0, [r1, r0]!
   1597c:	adds	r0, r0, #1
   15980:	str	r0, [r1]
   15984:	ldr	r0, [r1, #4]
   15988:	adc	r0, r0, #0
   1598c:	cmp	r4, #0
   15990:	str	r0, [r1, #4]
   15994:	beq	15a80 <UnityAssertBits@@Base+0x38c>
   15998:	ldr	r0, [pc, #252]	; 15a9c <UnityAssertBits@@Base+0x3a8>
   1599c:	ldr	r0, [pc, r0]
   159a0:	bl	145a0 <UnityPrint@@Base>
   159a4:	ldr	r6, [pc, #244]	; 15aa0 <UnityAssertBits@@Base+0x3ac>
   159a8:	mov	r1, #32
   159ac:	mov	r2, r5
   159b0:	ldr	r6, [pc, r6]
   159b4:	ldr	r0, [r6, #8]
   159b8:	cmp	r0, #0
   159bc:	movwne	r1, #24
   159c0:	ldr	r1, [r2, r1]!
   159c4:	adds	r1, r1, #1
   159c8:	str	r1, [r2]
   159cc:	ldr	r1, [r2, #4]
   159d0:	adc	r1, r1, #0
   159d4:	cmp	r0, #0
   159d8:	str	r1, [r2, #4]
   159dc:	beq	15a68 <UnityAssertBits@@Base+0x374>
   159e0:	ldr	r0, [pc, #188]	; 15aa4 <UnityAssertBits@@Base+0x3b0>
   159e4:	ldr	r0, [pc, r0]
   159e8:	bl	145a0 <UnityPrint@@Base>
   159ec:	ldr	r0, [r6, #8]
   159f0:	bl	145a0 <UnityPrint@@Base>
   159f4:	ldr	r0, [r6, #12]
   159f8:	mov	r1, #48	; 0x30
   159fc:	mov	r2, r5
   15a00:	cmp	r0, #0
   15a04:	movwne	r1, #40	; 0x28
   15a08:	ldr	r1, [r2, r1]!
   15a0c:	adds	r1, r1, #1
   15a10:	str	r1, [r2]
   15a14:	ldr	r1, [r2, #4]
   15a18:	adc	r1, r1, #0
   15a1c:	cmp	r0, #0
   15a20:	str	r1, [r2, #4]
   15a24:	beq	15a4c <UnityAssertBits@@Base+0x358>
   15a28:	ldrd	r0, [r5, #56]	; 0x38
   15a2c:	adds	r0, r0, #1
   15a30:	adc	r1, r1, #0
   15a34:	strd	r0, [r5, #56]	; 0x38
   15a38:	ldr	r0, [pc, #104]	; 15aa8 <UnityAssertBits@@Base+0x3b4>
   15a3c:	ldr	r0, [pc, r0]
   15a40:	bl	145a0 <UnityPrint@@Base>
   15a44:	ldr	r0, [r6, #12]
   15a48:	bl	145a0 <UnityPrint@@Base>
   15a4c:	ldrd	r0, [r5, #64]	; 0x40
   15a50:	adds	r0, r0, #1
   15a54:	adc	r1, r1, #0
   15a58:	strd	r0, [r5, #64]	; 0x40
   15a5c:	ldr	r0, [pc, #72]	; 15aac <UnityAssertBits@@Base+0x3b8>
   15a60:	ldr	r0, [pc, r0]
   15a64:	bl	145a0 <UnityPrint@@Base>
   15a68:	ldrd	r0, [r5, #72]	; 0x48
   15a6c:	adds	r0, r0, #1
   15a70:	adc	r1, r1, #0
   15a74:	strd	r0, [r5, #72]	; 0x48
   15a78:	mov	r0, r4
   15a7c:	bl	145a0 <UnityPrint@@Base>
   15a80:	ldrd	r0, [r5, #80]	; 0x50
   15a84:	adds	r0, r0, #1
   15a88:	adc	r1, r1, #0
   15a8c:	strd	r0, [r5, #80]	; 0x50
   15a90:	pop	{r4, r5, r6, sl, fp, pc}
   15a94:	andeq	fp, r1, r8, lsr lr
   15a98:	andeq	fp, r1, ip, lsr lr
   15a9c:	andeq	fp, r1, r4, asr #15
   15aa0:	andeq	fp, r1, r0, lsl #15
   15aa4:	andeq	fp, r1, ip, ror #14
   15aa8:	andeq	fp, r1, r4, asr #13
   15aac:	andeq	fp, r1, r0, lsl #14

00015ab0 <UnityAssertEqualNumber@@Base>:
   15ab0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15ab4:	add	fp, sp, #24
   15ab8:	ldr	r4, [pc, #260]	; 15bc4 <UnityAssertEqualNumber@@Base+0x114>
   15abc:	mov	r5, r1
   15ac0:	ldr	r1, [pc, #256]	; 15bc8 <UnityAssertEqualNumber@@Base+0x118>
   15ac4:	mov	r9, r2
   15ac8:	mov	r6, r0
   15acc:	ldr	r1, [pc, r1]
   15ad0:	add	r4, pc, r4
   15ad4:	mov	r0, r4
   15ad8:	adds	r1, r1, #1
   15adc:	str	r1, [r4]
   15ae0:	ldr	r1, [r4, #4]
   15ae4:	adc	r1, r1, #0
   15ae8:	str	r1, [r4, #4]
   15aec:	ldr	r7, [pc, #216]	; 15bcc <UnityAssertEqualNumber@@Base+0x11c>
   15af0:	ldr	r7, [pc, r7]
   15af4:	ldr	r2, [r7, #32]
   15af8:	ldr	r1, [r7, #36]	; 0x24
   15afc:	orrs	r1, r1, r2
   15b00:	mov	r2, #16
   15b04:	movwne	r2, #8
   15b08:	ldr	r2, [r0, r2]!
   15b0c:	adds	r2, r2, #1
   15b10:	str	r2, [r0]
   15b14:	ldr	r2, [r0, #4]
   15b18:	adc	r2, r2, #0
   15b1c:	cmp	r1, #0
   15b20:	str	r2, [r0, #4]
   15b24:	bne	15b58 <UnityAssertEqualNumber@@Base+0xa8>
   15b28:	mov	r0, #32
   15b2c:	cmp	r6, r5
   15b30:	mov	r1, r4
   15b34:	movwne	r0, #24
   15b38:	ldr	r0, [r1, r0]!
   15b3c:	adds	r0, r0, #1
   15b40:	str	r0, [r1]
   15b44:	ldr	r0, [r1, #4]
   15b48:	adc	r0, r0, #0
   15b4c:	cmp	r6, r5
   15b50:	str	r0, [r1, #4]
   15b54:	bne	15b6c <UnityAssertEqualNumber@@Base+0xbc>
   15b58:	ldrd	r0, [r4, #40]	; 0x28
   15b5c:	adds	r0, r0, #1
   15b60:	adc	r1, r1, #0
   15b64:	strd	r0, [r4, #40]	; 0x28
   15b68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b6c:	ldr	r8, [fp, #8]
   15b70:	mov	r0, r3
   15b74:	bl	15820 <UnityAssertBits@@Base+0x12c>
   15b78:	ldr	r0, [pc, #80]	; 15bd0 <UnityAssertEqualNumber@@Base+0x120>
   15b7c:	ldr	r0, [pc, r0]
   15b80:	bl	145a0 <UnityPrint@@Base>
   15b84:	mov	r0, r6
   15b88:	mov	r1, r8
   15b8c:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   15b90:	ldr	r0, [pc, #60]	; 15bd4 <UnityAssertEqualNumber@@Base+0x124>
   15b94:	ldr	r0, [pc, r0]
   15b98:	bl	145a0 <UnityPrint@@Base>
   15b9c:	mov	r0, r5
   15ba0:	mov	r1, r8
   15ba4:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   15ba8:	mov	r0, r9
   15bac:	bl	15938 <UnityAssertBits@@Base+0x244>
   15bb0:	mov	r0, #1
   15bb4:	mov	r1, #1
   15bb8:	str	r0, [r7, #32]
   15bbc:	add	r0, r7, #40	; 0x28
   15bc0:	bl	125fc <longjmp@plt>
   15bc4:	andeq	fp, r1, r8, lsl sp
   15bc8:	andeq	fp, r1, ip, lsl sp
   15bcc:	andeq	fp, r1, r0, asr #12
   15bd0:	andeq	fp, r1, r4, ror r5
   15bd4:	andeq	fp, r1, r0, asr #11
   15bd8:	nop	{0}
   15bdc:	nop	{0}

00015be0 <UnityAssertEqualIntArray@@Base>:
   15be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15be4:	add	fp, sp, #28
   15be8:	sub	sp, sp, #4
   15bec:	ldr	sl, [pc, #1484]	; 161c0 <UnityAssertEqualIntArray@@Base+0x5e0>
   15bf0:	mov	r6, r0
   15bf4:	ldr	r0, [pc, #1480]	; 161c4 <UnityAssertEqualIntArray@@Base+0x5e4>
   15bf8:	mov	r5, r1
   15bfc:	mov	r9, r2
   15c00:	ldr	r0, [pc, r0]
   15c04:	add	sl, pc, sl
   15c08:	mov	r2, sl
   15c0c:	adds	r0, r0, #1
   15c10:	str	r0, [sl]
   15c14:	ldr	r0, [sl, #4]
   15c18:	adc	r0, r0, #0
   15c1c:	str	r0, [sl, #4]
   15c20:	ldr	r4, [pc, #1440]	; 161c8 <UnityAssertEqualIntArray@@Base+0x5e8>
   15c24:	ldr	r4, [pc, r4]
   15c28:	ldrd	r0, [r4, #32]
   15c2c:	orrs	r0, r1, r0
   15c30:	mov	r1, #16
   15c34:	movwne	r1, #8
   15c38:	ldr	r1, [r2, r1]!
   15c3c:	adds	r1, r1, #1
   15c40:	str	r1, [r2]
   15c44:	ldr	r1, [r2, #4]
   15c48:	adc	r1, r1, #0
   15c4c:	cmp	r0, #0
   15c50:	str	r1, [r2, #4]
   15c54:	beq	15c6c <UnityAssertEqualIntArray@@Base+0x8c>
   15c58:	ldrd	r0, [sl, #24]
   15c5c:	adds	r0, r0, #1
   15c60:	adc	r1, r1, #0
   15c64:	strd	r0, [sl, #24]
   15c68:	b	16054 <UnityAssertEqualIntArray@@Base+0x474>
   15c6c:	mov	r0, #40	; 0x28
   15c70:	cmp	r9, #0
   15c74:	mov	r1, sl
   15c78:	ldr	r2, [fp, #8]
   15c7c:	mov	r7, r3
   15c80:	movweq	r0, #32
   15c84:	ldr	r0, [r1, r0]!
   15c88:	adds	r0, r0, #1
   15c8c:	str	r0, [r1]
   15c90:	ldr	r0, [r1, #4]
   15c94:	adc	r0, r0, #0
   15c98:	cmp	r9, #0
   15c9c:	str	r0, [r1, #4]
   15ca0:	beq	16180 <UnityAssertEqualIntArray@@Base+0x5a0>
   15ca4:	mov	r0, r6
   15ca8:	mov	r1, r5
   15cac:	mov	r3, r7
   15cb0:	bl	16218 <UnityAssertEqualIntArray@@Base+0x638>
   15cb4:	mov	r1, #56	; 0x38
   15cb8:	cmp	r0, #1
   15cbc:	mov	r2, sl
   15cc0:	movweq	r1, #48	; 0x30
   15cc4:	ldr	r1, [r2, r1]!
   15cc8:	adds	r1, r1, #1
   15ccc:	str	r1, [r2]
   15cd0:	ldr	r1, [r2, #4]
   15cd4:	adc	r1, r1, #0
   15cd8:	cmp	r0, #1
   15cdc:	str	r1, [r2, #4]
   15ce0:	bne	15cf8 <UnityAssertEqualIntArray@@Base+0x118>
   15ce4:	ldrd	r0, [sl, #64]	; 0x40
   15ce8:	adds	r0, r0, #1
   15cec:	adc	r1, r1, #0
   15cf0:	strd	r0, [sl, #64]	; 0x40
   15cf4:	b	16054 <UnityAssertEqualIntArray@@Base+0x474>
   15cf8:	str	r7, [sp]
   15cfc:	ldr	r1, [fp, #12]
   15d00:	mov	r4, #0
   15d04:	ldr	r0, [pc, #1216]	; 161cc <UnityAssertEqualIntArray@@Base+0x5ec>
   15d08:	add	r0, pc, r0
   15d0c:	str	r4, [r0]
   15d10:	bic	r0, r1, #128	; 0x80
   15d14:	sub	r0, r0, #17
   15d18:	cmp	r0, #49	; 0x31
   15d1c:	bhi	15f74 <UnityAssertEqualIntArray@@Base+0x394>
   15d20:	add	r1, pc, #4
   15d24:	ldr	r0, [r1, r0, lsl #2]
   15d28:	add	pc, r1, r0
   15d2c:	andeq	r0, r0, r8, asr #1
   15d30:	andeq	r0, r0, r8, lsl #3
   15d34:	andeq	r0, r0, r8, asr #4
   15d38:	andeq	r0, r0, r8, asr #4
   15d3c:	andeq	r0, r0, r8, asr #4
   15d40:	andeq	r0, r0, r8, asr #4
   15d44:	andeq	r0, r0, r8, asr #4
   15d48:	andeq	r0, r0, r8, asr #4
   15d4c:	andeq	r0, r0, r8, asr #4
   15d50:	andeq	r0, r0, r8, asr #4
   15d54:	andeq	r0, r0, r8, asr #4
   15d58:	andeq	r0, r0, r8, asr #4
   15d5c:	andeq	r0, r0, r8, asr #4
   15d60:	andeq	r0, r0, r8, asr #4
   15d64:	andeq	r0, r0, r8, asr #4
   15d68:	andeq	r0, r0, r8, asr #4
   15d6c:	andeq	r0, r0, r8, asr #1
   15d70:	andeq	r0, r0, r8, lsl #3
   15d74:	andeq	r0, r0, r8, asr #4
   15d78:	andeq	r0, r0, r8, asr #4
   15d7c:	andeq	r0, r0, r8, asr #4
   15d80:	andeq	r0, r0, r8, asr #4
   15d84:	andeq	r0, r0, r8, asr #4
   15d88:	andeq	r0, r0, r8, asr #4
   15d8c:	andeq	r0, r0, r8, asr #4
   15d90:	andeq	r0, r0, r8, asr #4
   15d94:	andeq	r0, r0, r8, asr #4
   15d98:	andeq	r0, r0, r8, asr #4
   15d9c:	andeq	r0, r0, r8, asr #4
   15da0:	andeq	r0, r0, r8, asr #4
   15da4:	andeq	r0, r0, r8, asr #4
   15da8:	andeq	r0, r0, r8, asr #4
   15dac:	andeq	r0, r0, r8, asr #4
   15db0:	andeq	r0, r0, r8, asr #4
   15db4:	andeq	r0, r0, r8, asr #4
   15db8:	andeq	r0, r0, r8, asr #4
   15dbc:	andeq	r0, r0, r8, asr #4
   15dc0:	andeq	r0, r0, r8, asr #4
   15dc4:	andeq	r0, r0, r8, asr #4
   15dc8:	andeq	r0, r0, r8, asr #4
   15dcc:	andeq	r0, r0, r8, asr #4
   15dd0:	andeq	r0, r0, r8, asr #4
   15dd4:	andeq	r0, r0, r8, asr #4
   15dd8:	andeq	r0, r0, r8, asr #4
   15ddc:	andeq	r0, r0, r8, asr #4
   15de0:	andeq	r0, r0, r8, asr #4
   15de4:	andeq	r0, r0, r8, asr #4
   15de8:	andeq	r0, r0, r8, asr #4
   15dec:	andeq	r0, r0, r8, asr #1
   15df0:	andeq	r0, r0, r8, lsl #3
   15df4:	ldr	r0, [pc, #980]	; 161d0 <UnityAssertEqualIntArray@@Base+0x5f0>
   15df8:	add	r0, pc, r0
   15dfc:	add	r1, r0, #4
   15e00:	ldr	r0, [pc, #972]	; 161d4 <UnityAssertEqualIntArray@@Base+0x5f4>
   15e04:	add	r0, pc, r0
   15e08:	bl	189e4 <UnityEnd@@Base+0x204>
   15e0c:	add	r1, pc, #924	; 0x39c
   15e10:	add	r0, sl, #128	; 0x80
   15e14:	mov	r4, #0
   15e18:	vld1.64	{d16-d17}, [r1 :128]
   15e1c:	vld1.64	{d18-d19}, [r0 :128]
   15e20:	vadd.i64	q8, q9, q8
   15e24:	vst1.64	{d16-d17}, [r0 :128]
   15e28:	sub	r0, r9, #1
   15e2c:	ldrb	r1, [r5]
   15e30:	ldrb	r2, [r6]
   15e34:	mov	r3, #160	; 0xa0
   15e38:	mov	r7, sl
   15e3c:	cmp	r2, r1
   15e40:	movwne	r3, #152	; 0x98
   15e44:	ldr	r3, [r7, r3]!
   15e48:	adds	r3, r3, #1
   15e4c:	str	r3, [r7]
   15e50:	ldr	r3, [r7, #4]
   15e54:	adc	r3, r3, #0
   15e58:	cmp	r2, r1
   15e5c:	str	r3, [r7, #4]
   15e60:	bne	16074 <UnityAssertEqualIntArray@@Base+0x494>
   15e64:	ldrd	r2, [sl, #168]	; 0xa8
   15e68:	mov	r1, #144	; 0x90
   15e6c:	add	r5, r5, #1
   15e70:	add	r6, r6, #1
   15e74:	adds	r2, r2, #1
   15e78:	adc	r3, r3, #0
   15e7c:	cmp	r0, r4
   15e80:	add	r4, r4, #1
   15e84:	strd	r2, [sl, #168]	; 0xa8
   15e88:	movwne	r1, #136	; 0x88
   15e8c:	mov	r2, sl
   15e90:	ldr	r1, [r2, r1]!
   15e94:	adds	r1, r1, #1
   15e98:	str	r1, [r2]
   15e9c:	ldr	r1, [r2, #4]
   15ea0:	adc	r1, r1, #0
   15ea4:	cmp	r9, r4
   15ea8:	str	r1, [r2, #4]
   15eac:	bne	15e2c <UnityAssertEqualIntArray@@Base+0x24c>
   15eb0:	b	1603c <UnityAssertEqualIntArray@@Base+0x45c>
   15eb4:	ldr	r0, [pc, #812]	; 161e8 <UnityAssertEqualIntArray@@Base+0x608>
   15eb8:	add	r0, pc, r0
   15ebc:	add	r1, r0, #8
   15ec0:	ldr	r0, [pc, #804]	; 161ec <UnityAssertEqualIntArray@@Base+0x60c>
   15ec4:	add	r0, pc, r0
   15ec8:	bl	189e4 <UnityEnd@@Base+0x204>
   15ecc:	add	r1, pc, #732	; 0x2dc
   15ed0:	add	r0, sl, #176	; 0xb0
   15ed4:	mov	r4, #0
   15ed8:	vld1.64	{d16-d17}, [r1 :128]
   15edc:	vld1.64	{d18-d19}, [r0 :128]
   15ee0:	vadd.i64	q8, q9, q8
   15ee4:	vst1.64	{d16-d17}, [r0 :128]
   15ee8:	sub	r0, r9, #1
   15eec:	ldrh	r1, [r5]
   15ef0:	ldrh	r2, [r6]
   15ef4:	mov	r3, #208	; 0xd0
   15ef8:	mov	r7, sl
   15efc:	cmp	r2, r1
   15f00:	movwne	r3, #200	; 0xc8
   15f04:	ldr	r3, [r7, r3]!
   15f08:	adds	r3, r3, #1
   15f0c:	str	r3, [r7]
   15f10:	ldr	r3, [r7, #4]
   15f14:	adc	r3, r3, #0
   15f18:	cmp	r2, r1
   15f1c:	str	r3, [r7, #4]
   15f20:	bne	160c0 <UnityAssertEqualIntArray@@Base+0x4e0>
   15f24:	ldrd	r2, [sl, #216]	; 0xd8
   15f28:	mov	r1, #192	; 0xc0
   15f2c:	add	r5, r5, #2
   15f30:	add	r6, r6, #2
   15f34:	adds	r2, r2, #1
   15f38:	adc	r3, r3, #0
   15f3c:	cmp	r0, r4
   15f40:	add	r4, r4, #1
   15f44:	strd	r2, [sl, #216]	; 0xd8
   15f48:	movwne	r1, #184	; 0xb8
   15f4c:	mov	r2, sl
   15f50:	ldr	r1, [r2, r1]!
   15f54:	adds	r1, r1, #1
   15f58:	str	r1, [r2]
   15f5c:	ldr	r1, [r2, #4]
   15f60:	adc	r1, r1, #0
   15f64:	cmp	r9, r4
   15f68:	str	r1, [r2, #4]
   15f6c:	bne	15eec <UnityAssertEqualIntArray@@Base+0x30c>
   15f70:	b	1603c <UnityAssertEqualIntArray@@Base+0x45c>
   15f74:	ldr	r0, [pc, #640]	; 161fc <UnityAssertEqualIntArray@@Base+0x61c>
   15f78:	ldr	r7, [pc, #640]	; 16200 <UnityAssertEqualIntArray@@Base+0x620>
   15f7c:	add	r7, pc, r7
   15f80:	add	r0, pc, r0
   15f84:	mov	r1, r7
   15f88:	bl	189e4 <UnityEnd@@Base+0x204>
   15f8c:	ldrd	r0, [sl, #224]	; 0xe0
   15f90:	sub	r8, r9, #1
   15f94:	adds	r0, r0, #1
   15f98:	adc	r1, r1, #0
   15f9c:	strd	r0, [sl, #224]	; 0xe0
   15fa0:	ldr	r0, [r5]
   15fa4:	ldr	r1, [r6]
   15fa8:	mov	r2, #248	; 0xf8
   15fac:	mov	r3, sl
   15fb0:	cmp	r1, r0
   15fb4:	movwne	r2, #240	; 0xf0
   15fb8:	ldr	r2, [r3, r2]!
   15fbc:	adds	r2, r2, #1
   15fc0:	str	r2, [r3]
   15fc4:	ldr	r2, [r3, #4]
   15fc8:	adc	r2, r2, #0
   15fcc:	cmp	r1, r0
   15fd0:	str	r2, [r3, #4]
   15fd4:	bne	1610c <UnityAssertEqualIntArray@@Base+0x52c>
   15fd8:	ldr	r0, [sl, #256]	; 0x100
   15fdc:	ldr	r1, [sl, #260]	; 0x104
   15fe0:	adds	r0, r0, #1
   15fe4:	adc	r1, r1, #0
   15fe8:	str	r0, [sl, #256]	; 0x100
   15fec:	str	r1, [sl, #260]	; 0x104
   15ff0:	mov	r1, r7
   15ff4:	ldr	r0, [pc, #532]	; 16210 <UnityAssertEqualIntArray@@Base+0x630>
   15ff8:	add	r0, pc, r0
   15ffc:	bl	189e4 <UnityEnd@@Base+0x204>
   16000:	cmp	r8, r4
   16004:	mov	r0, #232	; 0xe8
   16008:	mov	r1, sl
   1600c:	add	r4, r4, #1
   16010:	add	r5, r5, #4
   16014:	add	r6, r6, #4
   16018:	movwne	r0, #224	; 0xe0
   1601c:	ldr	r0, [r1, r0]!
   16020:	adds	r0, r0, #1
   16024:	str	r0, [r1]
   16028:	ldr	r0, [r1, #4]
   1602c:	adc	r0, r0, #0
   16030:	cmp	r9, r4
   16034:	str	r0, [r1, #4]
   16038:	bne	15fa0 <UnityAssertEqualIntArray@@Base+0x3c0>
   1603c:	ldr	r0, [sl, #264]	; 0x108
   16040:	ldr	r1, [sl, #268]	; 0x10c
   16044:	adds	r0, r0, #1
   16048:	adc	r1, r1, #0
   1604c:	str	r0, [sl, #264]	; 0x108
   16050:	str	r1, [sl, #268]	; 0x10c
   16054:	ldr	r0, [sl, #272]	; 0x110
   16058:	ldr	r1, [sl, #276]	; 0x114
   1605c:	adds	r0, r0, #1
   16060:	adc	r1, r1, #0
   16064:	str	r0, [sl, #272]	; 0x110
   16068:	str	r1, [sl, #276]	; 0x114
   1606c:	sub	sp, fp, #28
   16070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16074:	ldr	r0, [fp, #8]
   16078:	bl	15820 <UnityAssertBits@@Base+0x12c>
   1607c:	ldr	r0, [pc, #340]	; 161d8 <UnityAssertEqualIntArray@@Base+0x5f8>
   16080:	ldr	r0, [pc, r0]
   16084:	bl	145a0 <UnityPrint@@Base>
   16088:	mov	r0, r4
   1608c:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   16090:	ldr	r0, [pc, #324]	; 161dc <UnityAssertEqualIntArray@@Base+0x5fc>
   16094:	ldr	r0, [pc, r0]
   16098:	bl	145a0 <UnityPrint@@Base>
   1609c:	ldr	r4, [fp, #12]
   160a0:	ldrsb	r0, [r6]
   160a4:	mov	r1, r4
   160a8:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   160ac:	ldr	r0, [pc, #300]	; 161e0 <UnityAssertEqualIntArray@@Base+0x600>
   160b0:	ldr	r0, [pc, r0]
   160b4:	bl	145a0 <UnityPrint@@Base>
   160b8:	ldrsb	r0, [r5]
   160bc:	b	16154 <UnityAssertEqualIntArray@@Base+0x574>
   160c0:	ldr	r0, [fp, #8]
   160c4:	bl	15820 <UnityAssertBits@@Base+0x12c>
   160c8:	ldr	r0, [pc, #288]	; 161f0 <UnityAssertEqualIntArray@@Base+0x610>
   160cc:	ldr	r0, [pc, r0]
   160d0:	bl	145a0 <UnityPrint@@Base>
   160d4:	mov	r0, r4
   160d8:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   160dc:	ldr	r0, [pc, #272]	; 161f4 <UnityAssertEqualIntArray@@Base+0x614>
   160e0:	ldr	r0, [pc, r0]
   160e4:	bl	145a0 <UnityPrint@@Base>
   160e8:	ldr	r4, [fp, #12]
   160ec:	ldrsh	r0, [r6]
   160f0:	mov	r1, r4
   160f4:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   160f8:	ldr	r0, [pc, #248]	; 161f8 <UnityAssertEqualIntArray@@Base+0x618>
   160fc:	ldr	r0, [pc, r0]
   16100:	bl	145a0 <UnityPrint@@Base>
   16104:	ldrsh	r0, [r5]
   16108:	b	16154 <UnityAssertEqualIntArray@@Base+0x574>
   1610c:	ldr	r0, [fp, #8]
   16110:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16114:	ldr	r0, [pc, #232]	; 16204 <UnityAssertEqualIntArray@@Base+0x624>
   16118:	ldr	r0, [pc, r0]
   1611c:	bl	145a0 <UnityPrint@@Base>
   16120:	mov	r0, r4
   16124:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   16128:	ldr	r0, [pc, #216]	; 16208 <UnityAssertEqualIntArray@@Base+0x628>
   1612c:	ldr	r0, [pc, r0]
   16130:	bl	145a0 <UnityPrint@@Base>
   16134:	ldr	r4, [fp, #12]
   16138:	ldr	r0, [r6]
   1613c:	mov	r1, r4
   16140:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   16144:	ldr	r0, [pc, #192]	; 1620c <UnityAssertEqualIntArray@@Base+0x62c>
   16148:	ldr	r0, [pc, r0]
   1614c:	bl	145a0 <UnityPrint@@Base>
   16150:	ldr	r0, [r5]
   16154:	mov	r1, r4
   16158:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   1615c:	ldr	r0, [sp]
   16160:	bl	15938 <UnityAssertBits@@Base+0x244>
   16164:	ldr	r1, [pc, #120]	; 161e4 <UnityAssertEqualIntArray@@Base+0x604>
   16168:	mov	r0, #1
   1616c:	ldr	r1, [pc, r1]
   16170:	str	r0, [r1, #32]
   16174:	add	r0, r1, #40	; 0x28
   16178:	mov	r1, #1
   1617c:	bl	125fc <longjmp@plt>
   16180:	mov	r0, r2
   16184:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16188:	ldr	r0, [pc, #132]	; 16214 <UnityAssertEqualIntArray@@Base+0x634>
   1618c:	ldr	r0, [pc, r0]
   16190:	bl	145a0 <UnityPrint@@Base>
   16194:	mov	r0, r7
   16198:	bl	15938 <UnityAssertBits@@Base+0x244>
   1619c:	mov	r0, #1
   161a0:	mov	r1, #1
   161a4:	str	r0, [r4, #32]
   161a8:	add	r0, r4, #40	; 0x28
   161ac:	bl	125fc <longjmp@plt>
   161b0:	andeq	r0, r0, r1
   161b4:	andeq	r0, r0, r0
   161b8:	andeq	r0, r0, r1
   161bc:	andeq	r0, r0, r0
   161c0:	andeq	fp, r1, r4, lsl ip
   161c4:	andeq	fp, r1, r8, lsl ip
   161c8:	andeq	fp, r1, ip, lsl #10
   161cc:	andeq	fp, r1, ip, lsl #9
   161d0:	andeq	sl, r1, r0, asr #17
   161d4:	muleq	r1, r0, r3
   161d8:	muleq	r1, ip, r0
   161dc:	andeq	fp, r1, ip, asr r0
   161e0:	andeq	fp, r1, r4, lsr #1
   161e4:	andeq	sl, r1, r4, asr #31
   161e8:	andeq	sl, r1, r0, lsl #16
   161ec:	ldrdeq	fp, [r1], -r0
   161f0:	andeq	fp, r1, r0, asr r0
   161f4:	andeq	fp, r1, r0, lsl r0
   161f8:	andeq	fp, r1, r8, asr r0
   161fc:	andeq	fp, r1, r4, lsl r2
   16200:	andeq	sl, r1, ip, lsr r7
   16204:	andeq	fp, r1, r4
   16208:	andeq	sl, r1, r4, asr #31
   1620c:	andeq	fp, r1, ip
   16210:	muleq	r1, ip, r1
   16214:	andeq	sl, r1, r4, ror #31
   16218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1621c:	add	fp, sp, #24
   16220:	ldr	r7, [pc, #316]	; 16364 <UnityAssertEqualIntArray@@Base+0x784>
   16224:	ldr	r4, [pc, #316]	; 16368 <UnityAssertEqualIntArray@@Base+0x788>
   16228:	mov	r5, #16
   1622c:	mov	r8, r3
   16230:	ldr	r4, [pc, r4]
   16234:	add	r7, pc, r7
   16238:	mov	r3, r7
   1623c:	adds	r4, r4, #1
   16240:	str	r4, [r7]
   16244:	ldr	r4, [r7, #4]
   16248:	adc	r4, r4, #0
   1624c:	str	r4, [r7, #4]
   16250:	orrs	r4, r0, r1
   16254:	movweq	r5, #8
   16258:	ldr	r5, [r3, r5]!
   1625c:	adds	r5, r5, #1
   16260:	str	r5, [r3]
   16264:	ldr	r5, [r3, #4]
   16268:	adc	r5, r5, #0
   1626c:	cmp	r4, #0
   16270:	str	r5, [r3, #4]
   16274:	bne	16290 <UnityAssertEqualIntArray@@Base+0x6b0>
   16278:	ldrd	r0, [r7, #24]
   1627c:	adds	r0, r0, #1
   16280:	adc	r1, r1, #0
   16284:	strd	r0, [r7, #24]
   16288:	mov	r0, #1
   1628c:	b	16304 <UnityAssertEqualIntArray@@Base+0x724>
   16290:	mov	r3, #40	; 0x28
   16294:	cmp	r0, #0
   16298:	mov	r6, r7
   1629c:	movweq	r3, #32
   162a0:	ldr	r3, [r6, r3]!
   162a4:	adds	r3, r3, #1
   162a8:	str	r3, [r6]
   162ac:	ldr	r3, [r6, #4]
   162b0:	adc	r3, r3, #0
   162b4:	cmp	r0, #0
   162b8:	str	r3, [r6, #4]
   162bc:	beq	16318 <UnityAssertEqualIntArray@@Base+0x738>
   162c0:	mov	r0, #56	; 0x38
   162c4:	cmp	r1, #0
   162c8:	mov	r3, r7
   162cc:	movweq	r0, #48	; 0x30
   162d0:	ldr	r0, [r3, r0]!
   162d4:	adds	r0, r0, #1
   162d8:	str	r0, [r3]
   162dc:	ldr	r0, [r3, #4]
   162e0:	adc	r0, r0, #0
   162e4:	cmp	r1, #0
   162e8:	str	r0, [r3, #4]
   162ec:	beq	1632c <UnityAssertEqualIntArray@@Base+0x74c>
   162f0:	ldrd	r0, [r7, #64]	; 0x40
   162f4:	adds	r0, r0, #1
   162f8:	adc	r1, r1, #0
   162fc:	strd	r0, [r7, #64]	; 0x40
   16300:	mov	r0, #0
   16304:	ldrd	r2, [r7, #72]	; 0x48
   16308:	adds	r2, r2, #1
   1630c:	adc	r3, r3, #0
   16310:	strd	r2, [r7, #72]	; 0x48
   16314:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16318:	mov	r0, r2
   1631c:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16320:	ldr	r0, [pc, #68]	; 1636c <UnityAssertEqualIntArray@@Base+0x78c>
   16324:	ldr	r0, [pc, r0]
   16328:	b	1633c <UnityAssertEqualIntArray@@Base+0x75c>
   1632c:	mov	r0, r2
   16330:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16334:	ldr	r0, [pc, #56]	; 16374 <UnityAssertEqualIntArray@@Base+0x794>
   16338:	ldr	r0, [pc, r0]
   1633c:	bl	145a0 <UnityPrint@@Base>
   16340:	mov	r0, r8
   16344:	bl	15938 <UnityAssertBits@@Base+0x244>
   16348:	ldr	r0, [pc, #32]	; 16370 <UnityAssertEqualIntArray@@Base+0x790>
   1634c:	mov	r1, #1
   16350:	ldr	r0, [pc, r0]
   16354:	str	r1, [r0, #32]
   16358:	add	r0, r0, #40	; 0x28
   1635c:	mov	r1, #1
   16360:	bl	125fc <longjmp@plt>
   16364:	andeq	fp, r1, r4, lsl #14
   16368:	andeq	fp, r1, r8, lsl #14
   1636c:	andeq	sl, r1, r4, ror #28
   16370:	andeq	sl, r1, r0, ror #27
   16374:	andeq	sl, r1, ip, lsl #28

00016378 <UnityAssertEqualFloatArray@@Base>:
   16378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1637c:	add	fp, sp, #28
   16380:	sub	sp, sp, #4
   16384:	ldr	r8, [pc, #840]	; 166d4 <UnityAssertEqualFloatArray@@Base+0x35c>
   16388:	mov	r7, r0
   1638c:	ldr	r0, [pc, #836]	; 166d8 <UnityAssertEqualFloatArray@@Base+0x360>
   16390:	mov	r6, r1
   16394:	mov	sl, r2
   16398:	ldr	r0, [pc, r0]
   1639c:	add	r8, pc, r8
   163a0:	mov	r2, r8
   163a4:	adds	r0, r0, #1
   163a8:	str	r0, [r8]
   163ac:	ldr	r0, [r8, #4]
   163b0:	adc	r0, r0, #0
   163b4:	str	r0, [r8, #4]
   163b8:	ldr	r5, [pc, #796]	; 166dc <UnityAssertEqualFloatArray@@Base+0x364>
   163bc:	ldr	r5, [pc, r5]
   163c0:	ldrd	r0, [r5, #32]
   163c4:	orrs	r0, r1, r0
   163c8:	mov	r1, #16
   163cc:	movwne	r1, #8
   163d0:	ldr	r1, [r2, r1]!
   163d4:	adds	r1, r1, #1
   163d8:	str	r1, [r2]
   163dc:	ldr	r1, [r2, #4]
   163e0:	adc	r1, r1, #0
   163e4:	cmp	r0, #0
   163e8:	str	r1, [r2, #4]
   163ec:	beq	16404 <UnityAssertEqualFloatArray@@Base+0x8c>
   163f0:	ldrd	r0, [r8, #24]
   163f4:	adds	r0, r0, #1
   163f8:	adc	r1, r1, #0
   163fc:	strd	r0, [r8, #24]
   16400:	b	1663c <UnityAssertEqualFloatArray@@Base+0x2c4>
   16404:	mov	r0, #40	; 0x28
   16408:	cmp	sl, #0
   1640c:	mov	r1, r8
   16410:	ldr	r4, [fp, #8]
   16414:	mov	r9, r3
   16418:	movweq	r0, #32
   1641c:	ldr	r0, [r1, r0]!
   16420:	adds	r0, r0, #1
   16424:	str	r0, [r1]
   16428:	ldr	r0, [r1, #4]
   1642c:	adc	r0, r0, #0
   16430:	cmp	sl, #0
   16434:	str	r0, [r1, #4]
   16438:	beq	1669c <UnityAssertEqualFloatArray@@Base+0x324>
   1643c:	mov	r0, r7
   16440:	mov	r1, r6
   16444:	mov	r2, r4
   16448:	mov	r3, r9
   1644c:	bl	16218 <UnityAssertEqualIntArray@@Base+0x638>
   16450:	mov	r1, #56	; 0x38
   16454:	cmp	r0, #1
   16458:	mov	r2, r8
   1645c:	movweq	r1, #48	; 0x30
   16460:	ldr	r1, [r2, r1]!
   16464:	adds	r1, r1, #1
   16468:	str	r1, [r2]
   1646c:	ldr	r1, [r2, #4]
   16470:	adc	r1, r1, #0
   16474:	cmp	r0, #1
   16478:	str	r1, [r2, #4]
   1647c:	bne	16494 <UnityAssertEqualFloatArray@@Base+0x11c>
   16480:	ldrd	r0, [r8, #64]	; 0x40
   16484:	adds	r0, r0, #1
   16488:	adc	r1, r1, #0
   1648c:	strd	r0, [r8, #64]	; 0x40
   16490:	b	1663c <UnityAssertEqualFloatArray@@Base+0x2c4>
   16494:	ldr	r2, [r8, #72]	; 0x48
   16498:	ldr	r1, [r8, #76]	; 0x4c
   1649c:	vldr	s0, [pc, #552]	; 166cc <UnityAssertEqualFloatArray@@Base+0x354>
   164a0:	vldr	s2, [pc, #552]	; 166d0 <UnityAssertEqualFloatArray@@Base+0x358>
   164a4:	mov	r0, r4
   164a8:	sub	r5, sl, #1
   164ac:	mov	r4, #0
   164b0:	adds	r2, r2, #1
   164b4:	adc	r1, r1, #0
   164b8:	str	r2, [r8, #72]	; 0x48
   164bc:	str	r1, [r8, #76]	; 0x4c
   164c0:	vldr	s4, [r6]
   164c4:	vldr	s6, [r7]
   164c8:	mov	r1, #96	; 0x60
   164cc:	mov	r2, r8
   164d0:	vsub.f32	s4, s6, s4
   164d4:	vcmpe.f32	s4, #0.0
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	vcmpe.f32	s4, #0.0
   164e0:	movwmi	r1, #88	; 0x58
   164e4:	ldr	r1, [r2, r1]!
   164e8:	adds	r1, r1, #1
   164ec:	str	r1, [r2]
   164f0:	ldr	r1, [r2, #4]
   164f4:	adc	r1, r1, #0
   164f8:	vmrs	APSR_nzcv, fpscr
   164fc:	str	r1, [r2, #4]
   16500:	bpl	16518 <UnityAssertEqualFloatArray@@Base+0x1a0>
   16504:	ldrd	r2, [r8, #104]	; 0x68
   16508:	vsub.f32	s4, s0, s4
   1650c:	adds	r2, r2, #1
   16510:	adc	r3, r3, #0
   16514:	strd	r2, [r8, #104]	; 0x68
   16518:	vldr	s6, [r7]
   1651c:	mov	r1, #120	; 0x78
   16520:	mov	r2, r8
   16524:	vmul.f32	s6, s6, s2
   16528:	vcmpe.f32	s6, #0.0
   1652c:	vmrs	APSR_nzcv, fpscr
   16530:	vcmpe.f32	s6, #0.0
   16534:	movwmi	r1, #112	; 0x70
   16538:	ldr	r1, [r2, r1]!
   1653c:	adds	r1, r1, #1
   16540:	str	r1, [r2]
   16544:	ldr	r1, [r2, #4]
   16548:	adc	r1, r1, #0
   1654c:	vmrs	APSR_nzcv, fpscr
   16550:	str	r1, [r2, #4]
   16554:	bpl	1656c <UnityAssertEqualFloatArray@@Base+0x1f4>
   16558:	ldrd	r2, [r8, #128]	; 0x80
   1655c:	vsub.f32	s6, s0, s6
   16560:	adds	r2, r2, #1
   16564:	adc	r3, r3, #0
   16568:	strd	r2, [r8, #128]	; 0x80
   1656c:	vmul.f32	s8, s4, s0
   16570:	mov	r1, #144	; 0x90
   16574:	mov	r2, r8
   16578:	vcmp.f32	s8, #0.0
   1657c:	vmrs	APSR_nzcv, fpscr
   16580:	vcmp.f32	s8, #0.0
   16584:	movwne	r1, #136	; 0x88
   16588:	ldr	r1, [r2, r1]!
   1658c:	adds	r1, r1, #1
   16590:	str	r1, [r2]
   16594:	ldr	r1, [r2, #4]
   16598:	adc	r1, r1, #0
   1659c:	vmrs	APSR_nzcv, fpscr
   165a0:	str	r1, [r2, #4]
   165a4:	bne	16654 <UnityAssertEqualFloatArray@@Base+0x2dc>
   165a8:	vcmpe.f32	s4, s6
   165ac:	mov	r1, #160	; 0xa0
   165b0:	mov	r2, r8
   165b4:	vmrs	APSR_nzcv, fpscr
   165b8:	vcmpe.f32	s4, s6
   165bc:	movwgt	r1, #152	; 0x98
   165c0:	ldr	r1, [r2, r1]!
   165c4:	adds	r1, r1, #1
   165c8:	str	r1, [r2]
   165cc:	ldr	r1, [r2, #4]
   165d0:	adc	r1, r1, #0
   165d4:	vmrs	APSR_nzcv, fpscr
   165d8:	str	r1, [r2, #4]
   165dc:	bgt	16654 <UnityAssertEqualFloatArray@@Base+0x2dc>
   165e0:	ldrd	r2, [r8, #168]	; 0xa8
   165e4:	mov	r1, #80	; 0x50
   165e8:	add	r6, r6, #4
   165ec:	add	r7, r7, #4
   165f0:	adds	r2, r2, #1
   165f4:	adc	r3, r3, #0
   165f8:	cmp	r5, r4
   165fc:	add	r4, r4, #1
   16600:	strd	r2, [r8, #168]	; 0xa8
   16604:	movwne	r1, #72	; 0x48
   16608:	mov	r2, r8
   1660c:	ldr	r1, [r2, r1]!
   16610:	adds	r1, r1, #1
   16614:	str	r1, [r2]
   16618:	ldr	r1, [r2, #4]
   1661c:	adc	r1, r1, #0
   16620:	cmp	sl, r4
   16624:	str	r1, [r2, #4]
   16628:	bne	164c0 <UnityAssertEqualFloatArray@@Base+0x148>
   1662c:	ldrd	r0, [r8, #176]	; 0xb0
   16630:	adds	r0, r0, #1
   16634:	adc	r1, r1, #0
   16638:	strd	r0, [r8, #176]	; 0xb0
   1663c:	ldrd	r0, [r8, #184]	; 0xb8
   16640:	adds	r0, r0, #1
   16644:	adc	r1, r1, #0
   16648:	strd	r0, [r8, #184]	; 0xb8
   1664c:	sub	sp, fp, #28
   16650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16654:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16658:	ldr	r0, [pc, #132]	; 166e4 <UnityAssertEqualFloatArray@@Base+0x36c>
   1665c:	ldr	r0, [pc, r0]
   16660:	bl	145a0 <UnityPrint@@Base>
   16664:	mov	r0, r4
   16668:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   1666c:	ldr	r0, [pc, #116]	; 166e8 <UnityAssertEqualFloatArray@@Base+0x370>
   16670:	ldr	r0, [pc, r0]
   16674:	bl	145a0 <UnityPrint@@Base>
   16678:	mov	r0, r9
   1667c:	bl	15938 <UnityAssertBits@@Base+0x244>
   16680:	ldr	r1, [pc, #100]	; 166ec <UnityAssertEqualFloatArray@@Base+0x374>
   16684:	mov	r0, #1
   16688:	ldr	r1, [pc, r1]
   1668c:	str	r0, [r1, #32]
   16690:	add	r0, r1, #40	; 0x28
   16694:	mov	r1, #1
   16698:	bl	125fc <longjmp@plt>
   1669c:	mov	r0, r4
   166a0:	bl	15820 <UnityAssertBits@@Base+0x12c>
   166a4:	ldr	r0, [pc, #52]	; 166e0 <UnityAssertEqualFloatArray@@Base+0x368>
   166a8:	ldr	r0, [pc, r0]
   166ac:	bl	145a0 <UnityPrint@@Base>
   166b0:	mov	r0, r9
   166b4:	bl	15938 <UnityAssertBits@@Base+0x244>
   166b8:	mov	r0, #1
   166bc:	mov	r1, #1
   166c0:	str	r0, [r5, #32]
   166c4:	add	r0, r5, #40	; 0x28
   166c8:	bl	125fc <longjmp@plt>
   166cc:	andeq	r0, r0, r0
   166d0:	strcc	ip, [r7, -ip, lsr #11]!
   166d4:	andeq	fp, r1, ip, ror #11
   166d8:	strdeq	fp, [r1], -r0
   166dc:	andeq	sl, r1, r4, ror sp
   166e0:	andeq	sl, r1, r8, asr #21
   166e4:	andeq	sl, r1, r0, asr #21
   166e8:	muleq	r1, ip, sl
   166ec:	andeq	sl, r1, r8, lsr #21

000166f0 <UnityAssertFloatsWithin@@Base>:
   166f0:	push	{r4, r5, r6, sl, fp, lr}
   166f4:	add	fp, sp, #16
   166f8:	ldr	r4, [pc, #500]	; 168f4 <UnityAssertFloatsWithin@@Base+0x204>
   166fc:	ldr	r2, [pc, #500]	; 168f8 <UnityAssertFloatsWithin@@Base+0x208>
   16700:	mov	r6, r0
   16704:	ldr	r2, [pc, r2]
   16708:	add	r4, pc, r4
   1670c:	mov	r0, r4
   16710:	adds	r2, r2, #1
   16714:	str	r2, [r4]
   16718:	ldr	r2, [r4, #4]
   1671c:	adc	r2, r2, #0
   16720:	str	r2, [r4, #4]
   16724:	ldr	r5, [pc, #464]	; 168fc <UnityAssertFloatsWithin@@Base+0x20c>
   16728:	ldr	r5, [pc, r5]
   1672c:	ldrd	r2, [r5, #32]
   16730:	orrs	r2, r3, r2
   16734:	mov	r3, #16
   16738:	movwne	r3, #8
   1673c:	ldr	r3, [r0, r3]!
   16740:	adds	r3, r3, #1
   16744:	str	r3, [r0]
   16748:	ldr	r3, [r0, #4]
   1674c:	adc	r3, r3, #0
   16750:	cmp	r2, #0
   16754:	str	r3, [r0, #4]
   16758:	beq	16770 <UnityAssertFloatsWithin@@Base+0x80>
   1675c:	ldrd	r0, [r4, #24]
   16760:	adds	r0, r0, #1
   16764:	adc	r1, r1, #0
   16768:	strd	r0, [r4, #24]
   1676c:	b	168ac <UnityAssertFloatsWithin@@Base+0x1bc>
   16770:	vsub.f32	s2, s2, s1
   16774:	mov	r0, #40	; 0x28
   16778:	mov	r2, r4
   1677c:	vcmpe.f32	s2, #0.0
   16780:	vmrs	APSR_nzcv, fpscr
   16784:	vcmpe.f32	s2, #0.0
   16788:	movwmi	r0, #32
   1678c:	ldr	r0, [r2, r0]!
   16790:	adds	r0, r0, #1
   16794:	str	r0, [r2]
   16798:	ldr	r0, [r2, #4]
   1679c:	adc	r0, r0, #0
   167a0:	vmrs	APSR_nzcv, fpscr
   167a4:	str	r0, [r2, #4]
   167a8:	bpl	167cc <UnityAssertFloatsWithin@@Base+0xdc>
   167ac:	ldr	r0, [r4, #48]	; 0x30
   167b0:	vldr	s4, [pc, #312]	; 168f0 <UnityAssertFloatsWithin@@Base+0x200>
   167b4:	ldr	r3, [r4, #52]	; 0x34
   167b8:	adds	r0, r0, #1
   167bc:	vsub.f32	s2, s4, s2
   167c0:	adc	r3, r3, #0
   167c4:	str	r0, [r4, #48]	; 0x30
   167c8:	str	r3, [r4, #52]	; 0x34
   167cc:	vcmpe.f32	s0, #0.0
   167d0:	mov	r0, #64	; 0x40
   167d4:	mov	r2, r4
   167d8:	vmrs	APSR_nzcv, fpscr
   167dc:	vcmpe.f32	s0, #0.0
   167e0:	movwmi	r0, #56	; 0x38
   167e4:	ldr	r0, [r2, r0]!
   167e8:	adds	r0, r0, #1
   167ec:	str	r0, [r2]
   167f0:	ldr	r0, [r2, #4]
   167f4:	adc	r0, r0, #0
   167f8:	vmrs	APSR_nzcv, fpscr
   167fc:	str	r0, [r2, #4]
   16800:	bpl	16824 <UnityAssertFloatsWithin@@Base+0x134>
   16804:	ldr	r0, [r4, #72]	; 0x48
   16808:	vldr	s4, [pc, #224]	; 168f0 <UnityAssertFloatsWithin@@Base+0x200>
   1680c:	ldr	r3, [r4, #76]	; 0x4c
   16810:	adds	r0, r0, #1
   16814:	vsub.f32	s0, s4, s0
   16818:	adc	r3, r3, #0
   1681c:	str	r0, [r4, #72]	; 0x48
   16820:	str	r3, [r4, #76]	; 0x4c
   16824:	vldr	s4, [pc, #196]	; 168f0 <UnityAssertFloatsWithin@@Base+0x200>
   16828:	mov	r0, #88	; 0x58
   1682c:	mov	r2, r4
   16830:	vmul.f32	s4, s2, s4
   16834:	vcmp.f32	s4, #0.0
   16838:	vmrs	APSR_nzcv, fpscr
   1683c:	vcmp.f32	s4, #0.0
   16840:	movwne	r0, #80	; 0x50
   16844:	ldr	r0, [r2, r0]!
   16848:	adds	r0, r0, #1
   1684c:	str	r0, [r2]
   16850:	ldr	r0, [r2, #4]
   16854:	adc	r0, r0, #0
   16858:	vmrs	APSR_nzcv, fpscr
   1685c:	str	r0, [r2, #4]
   16860:	bne	168c0 <UnityAssertFloatsWithin@@Base+0x1d0>
   16864:	vcmpe.f32	s0, s2
   16868:	mov	r0, #104	; 0x68
   1686c:	mov	r2, r4
   16870:	vmrs	APSR_nzcv, fpscr
   16874:	vcmpe.f32	s0, s2
   16878:	movwmi	r0, #96	; 0x60
   1687c:	ldr	r0, [r2, r0]!
   16880:	adds	r0, r0, #1
   16884:	str	r0, [r2]
   16888:	ldr	r0, [r2, #4]
   1688c:	adc	r0, r0, #0
   16890:	vmrs	APSR_nzcv, fpscr
   16894:	str	r0, [r2, #4]
   16898:	bmi	168c0 <UnityAssertFloatsWithin@@Base+0x1d0>
   1689c:	ldrd	r0, [r4, #112]	; 0x70
   168a0:	adds	r0, r0, #1
   168a4:	adc	r1, r1, #0
   168a8:	strd	r0, [r4, #112]	; 0x70
   168ac:	ldrd	r0, [r4, #120]	; 0x78
   168b0:	adds	r0, r0, #1
   168b4:	adc	r1, r1, #0
   168b8:	strd	r0, [r4, #120]	; 0x78
   168bc:	pop	{r4, r5, r6, sl, fp, pc}
   168c0:	mov	r0, r1
   168c4:	bl	15820 <UnityAssertBits@@Base+0x12c>
   168c8:	ldr	r0, [pc, #48]	; 16900 <UnityAssertFloatsWithin@@Base+0x210>
   168cc:	ldr	r0, [pc, r0]
   168d0:	bl	145a0 <UnityPrint@@Base>
   168d4:	mov	r0, r6
   168d8:	bl	15938 <UnityAssertBits@@Base+0x244>
   168dc:	mov	r0, #1
   168e0:	mov	r1, #1
   168e4:	str	r0, [r5, #32]
   168e8:	add	r0, r5, #40	; 0x28
   168ec:	bl	125fc <longjmp@plt>
   168f0:	andeq	r0, r0, r0
   168f4:	andeq	fp, r1, r0, asr #6
   168f8:	andeq	fp, r1, r4, asr #6
   168fc:	andeq	sl, r1, r8, lsl #20
   16900:	andeq	sl, r1, r0, asr #16

00016904 <UnityAssertFloatSpecial@@Base>:
   16904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16908:	add	fp, sp, #28
   1690c:	sub	sp, sp, #4
   16910:	vpush	{d8}
   16914:	sub	sp, sp, #24
   16918:	ldr	r7, [pc, #940]	; 16ccc <UnityAssertFloatSpecial@@Base+0x3c8>
   1691c:	mov	r5, r1
   16920:	ldr	r1, [pc, #936]	; 16cd0 <UnityAssertFloatSpecial@@Base+0x3cc>
   16924:	add	sl, sp, #8
   16928:	ldr	r1, [pc, r1]
   1692c:	add	r7, pc, r7
   16930:	mov	r3, r7
   16934:	adds	r1, r1, #1
   16938:	str	r1, [r7]
   1693c:	ldr	r1, [r7, #4]
   16940:	adc	r1, r1, #0
   16944:	str	r1, [r7, #4]
   16948:	ldr	r1, [pc, #900]	; 16cd4 <UnityAssertFloatSpecial@@Base+0x3d0>
   1694c:	add	r1, pc, r1
   16950:	vld1.64	{d16-d17}, [r1]
   16954:	vst1.64	{d16-d17}, [sl]
   16958:	ldr	r9, [pc, #888]	; 16cd8 <UnityAssertFloatSpecial@@Base+0x3d4>
   1695c:	ldr	r9, [pc, r9]
   16960:	ldr	r4, [r9, #32]
   16964:	ldr	r1, [r9, #36]	; 0x24
   16968:	orrs	r6, r1, r4
   1696c:	mov	r1, #16
   16970:	movwne	r1, #8
   16974:	ldr	r1, [r3, r1]!
   16978:	adds	r1, r1, #1
   1697c:	str	r1, [r3]
   16980:	ldr	r1, [r3, #4]
   16984:	adc	r1, r1, #0
   16988:	cmp	r6, #0
   1698c:	str	r1, [r3, #4]
   16990:	beq	1699c <UnityAssertFloatSpecial@@Base+0x98>
   16994:	add	r0, r7, #24
   16998:	b	16bbc <UnityAssertFloatSpecial@@Base+0x2b8>
   1699c:	ldr	r1, [pc, #824]	; 16cdc <UnityAssertFloatSpecial@@Base+0x3d8>
   169a0:	and	r4, r2, #1
   169a4:	mov	r8, #0
   169a8:	cmp	r2, #7
   169ac:	str	r0, [sp, #4]
   169b0:	add	r1, pc, r1
   169b4:	str	r8, [r1]
   169b8:	bhi	16b38 <UnityAssertFloatSpecial@@Base+0x234>
   169bc:	add	r0, pc, #8
   169c0:	vmov.f32	s16, s0
   169c4:	ldr	r1, [r0, r2, lsl #2]
   169c8:	add	pc, r0, r1
   169cc:	andeq	r0, r0, r0, lsr #32
   169d0:	andeq	r0, r0, r0, lsr #32
   169d4:	andeq	r0, r0, r0, lsr #2
   169d8:	andeq	r0, r0, r0, lsr #2
   169dc:	andeq	r0, r0, ip, rrx
   169e0:	andeq	r0, r0, ip, rrx
   169e4:	andeq	r0, r0, r8, lsr #1
   169e8:	andeq	r0, r0, r8, lsr #1
   169ec:	ldr	r0, [pc, #748]	; 16ce0 <UnityAssertFloatSpecial@@Base+0x3dc>
   169f0:	add	r0, pc, r0
   169f4:	add	r1, r0, #4
   169f8:	ldr	r0, [pc, #740]	; 16ce4 <UnityAssertFloatSpecial@@Base+0x3e0>
   169fc:	add	r0, pc, r0
   16a00:	bl	189e4 <UnityEnd@@Base+0x204>
   16a04:	ldrd	r0, [r7, #104]	; 0x68
   16a08:	vcmpe.f32	s16, #0.0
   16a0c:	vmov.f32	s0, s16
   16a10:	mov	r6, #0
   16a14:	mov	r8, #0
   16a18:	adds	r0, r0, #1
   16a1c:	adc	r1, r1, #0
   16a20:	vmrs	APSR_nzcv, fpscr
   16a24:	strd	r0, [r7, #104]	; 0x68
   16a28:	movwgt	r6, #1
   16a2c:	bl	12674 <__isinff@plt>
   16a30:	and	r6, r0, r6
   16a34:	b	16b88 <UnityAssertFloatSpecial@@Base+0x284>
   16a38:	ldr	r0, [pc, #688]	; 16cf0 <UnityAssertFloatSpecial@@Base+0x3ec>
   16a3c:	add	r0, pc, r0
   16a40:	add	r1, r0, #12
   16a44:	ldr	r0, [pc, #680]	; 16cf4 <UnityAssertFloatSpecial@@Base+0x3f0>
   16a48:	add	r0, pc, r0
   16a4c:	bl	189e4 <UnityEnd@@Base+0x204>
   16a50:	ldrd	r0, [r7, #120]	; 0x78
   16a54:	vmov.f32	s0, s16
   16a58:	adds	r0, r0, #1
   16a5c:	adc	r1, r1, #0
   16a60:	strd	r0, [r7, #120]	; 0x78
   16a64:	bl	1262c <__isnanf@plt>
   16a68:	mov	r6, r0
   16a6c:	mov	r8, #2
   16a70:	b	16b88 <UnityAssertFloatSpecial@@Base+0x284>
   16a74:	ldr	r0, [pc, #636]	; 16cf8 <UnityAssertFloatSpecial@@Base+0x3f4>
   16a78:	add	r0, pc, r0
   16a7c:	add	r1, r0, #16
   16a80:	ldr	r0, [pc, #628]	; 16cfc <UnityAssertFloatSpecial@@Base+0x3f8>
   16a84:	add	r0, pc, r0
   16a88:	bl	189e4 <UnityEnd@@Base+0x204>
   16a8c:	vmov.f32	s0, s16
   16a90:	bl	12674 <__isinff@plt>
   16a94:	vmov.f32	s0, s16
   16a98:	mov	r6, r0
   16a9c:	bl	1262c <__isnanf@plt>
   16aa0:	orrs	r0, r0, r6
   16aa4:	mov	r1, #136	; 0x88
   16aa8:	mov	r2, r7
   16aac:	movwne	r1, #128	; 0x80
   16ab0:	ldr	r1, [r2, r1]!
   16ab4:	adds	r1, r1, #1
   16ab8:	str	r1, [r2]
   16abc:	ldr	r1, [r2, #4]
   16ac0:	adc	r1, r1, #0
   16ac4:	cmp	r0, #0
   16ac8:	str	r1, [r2, #4]
   16acc:	beq	16b70 <UnityAssertFloatSpecial@@Base+0x26c>
   16ad0:	ldrd	r0, [r7, #144]	; 0x90
   16ad4:	mov	r8, #3
   16ad8:	mov	r6, #0
   16adc:	adds	r0, r0, #1
   16ae0:	adc	r1, r1, #0
   16ae4:	strd	r0, [r7, #144]	; 0x90
   16ae8:	b	16b88 <UnityAssertFloatSpecial@@Base+0x284>
   16aec:	ldr	r0, [pc, #500]	; 16ce8 <UnityAssertFloatSpecial@@Base+0x3e4>
   16af0:	add	r0, pc, r0
   16af4:	add	r1, r0, #8
   16af8:	ldr	r0, [pc, #492]	; 16cec <UnityAssertFloatSpecial@@Base+0x3e8>
   16afc:	add	r0, pc, r0
   16b00:	bl	189e4 <UnityEnd@@Base+0x204>
   16b04:	ldrd	r0, [r7, #112]	; 0x70
   16b08:	vcmpe.f32	s16, #0.0
   16b0c:	vmov.f32	s0, s16
   16b10:	mov	r6, #0
   16b14:	adds	r0, r0, #1
   16b18:	adc	r1, r1, #0
   16b1c:	vmrs	APSR_nzcv, fpscr
   16b20:	strd	r0, [r7, #112]	; 0x70
   16b24:	movwmi	r6, #1
   16b28:	bl	12674 <__isinff@plt>
   16b2c:	and	r6, r0, r6
   16b30:	mov	r8, #1
   16b34:	b	16b88 <UnityAssertFloatSpecial@@Base+0x284>
   16b38:	ldr	r0, [pc, #448]	; 16d00 <UnityAssertFloatSpecial@@Base+0x3fc>
   16b3c:	ldr	r1, [pc, #448]	; 16d04 <UnityAssertFloatSpecial@@Base+0x400>
   16b40:	eor	r6, r4, #1
   16b44:	add	r0, pc, r0
   16b48:	add	r1, pc, r1
   16b4c:	bl	189e4 <UnityEnd@@Base+0x204>
   16b50:	ldrd	r0, [r7, #160]	; 0xa0
   16b54:	adds	r0, r0, #1
   16b58:	adc	r1, r1, #0
   16b5c:	strd	r0, [r7, #160]	; 0xa0
   16b60:	ldr	r0, [pc, #416]	; 16d08 <UnityAssertFloatSpecial@@Base+0x404>
   16b64:	ldr	r0, [pc, r0]
   16b68:	str	r0, [sp, #8]
   16b6c:	b	16b88 <UnityAssertFloatSpecial@@Base+0x284>
   16b70:	ldrd	r0, [r7, #152]	; 0x98
   16b74:	mov	r8, #3
   16b78:	mov	r6, #1
   16b7c:	adds	r0, r0, #1
   16b80:	adc	r1, r1, #0
   16b84:	strd	r0, [r7, #152]	; 0x98
   16b88:	mov	r0, #176	; 0xb0
   16b8c:	cmp	r6, r4
   16b90:	mov	r1, r7
   16b94:	movwne	r0, #168	; 0xa8
   16b98:	ldr	r0, [r1, r0]!
   16b9c:	adds	r0, r0, #1
   16ba0:	str	r0, [r1]
   16ba4:	ldr	r0, [r1, #4]
   16ba8:	adc	r0, r0, #0
   16bac:	cmp	r6, r4
   16bb0:	str	r0, [r1, #4]
   16bb4:	bne	16bec <UnityAssertFloatSpecial@@Base+0x2e8>
   16bb8:	add	r0, r7, #232	; 0xe8
   16bbc:	ldrd	r2, [r0]
   16bc0:	adds	r2, r2, #1
   16bc4:	adc	r3, r3, #0
   16bc8:	strd	r2, [r0]
   16bcc:	ldrd	r0, [r7, #240]	; 0xf0
   16bd0:	adds	r0, r0, #1
   16bd4:	adc	r1, r1, #0
   16bd8:	strd	r0, [r7, #240]	; 0xf0
   16bdc:	sub	sp, fp, #40	; 0x28
   16be0:	vpop	{d8}
   16be4:	add	sp, sp, #4
   16be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bec:	mov	r0, r5
   16bf0:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16bf4:	ldr	r0, [pc, #272]	; 16d0c <UnityAssertFloatSpecial@@Base+0x408>
   16bf8:	ldr	r0, [pc, r0]
   16bfc:	bl	145a0 <UnityPrint@@Base>
   16c00:	mov	r0, #192	; 0xc0
   16c04:	cmp	r4, #0
   16c08:	mov	r1, r7
   16c0c:	movwne	r0, #184	; 0xb8
   16c10:	ldr	r0, [r1, r0]!
   16c14:	adds	r0, r0, #1
   16c18:	str	r0, [r1]
   16c1c:	ldr	r0, [r1, #4]
   16c20:	adc	r0, r0, #0
   16c24:	cmp	r4, #0
   16c28:	str	r0, [r1, #4]
   16c2c:	bne	16c4c <UnityAssertFloatSpecial@@Base+0x348>
   16c30:	ldrd	r0, [r7, #200]	; 0xc8
   16c34:	adds	r0, r0, #1
   16c38:	adc	r1, r1, #0
   16c3c:	strd	r0, [r7, #200]	; 0xc8
   16c40:	ldr	r0, [pc, #200]	; 16d10 <UnityAssertFloatSpecial@@Base+0x40c>
   16c44:	ldr	r0, [pc, r0]
   16c48:	bl	145a0 <UnityPrint@@Base>
   16c4c:	ldr	r5, [sl, r8, lsl #2]
   16c50:	mov	r0, r5
   16c54:	bl	145a0 <UnityPrint@@Base>
   16c58:	ldr	r0, [pc, #180]	; 16d14 <UnityAssertFloatSpecial@@Base+0x410>
   16c5c:	ldr	r0, [pc, r0]
   16c60:	bl	145a0 <UnityPrint@@Base>
   16c64:	eor	r0, r4, #27
   16c68:	mov	r1, r7
   16c6c:	ldr	r0, [r1, r0, lsl #3]!
   16c70:	adds	r0, r0, #1
   16c74:	str	r0, [r1]
   16c78:	ldr	r0, [r1, #4]
   16c7c:	adc	r0, r0, #0
   16c80:	cmp	r4, #0
   16c84:	str	r0, [r1, #4]
   16c88:	beq	16ca8 <UnityAssertFloatSpecial@@Base+0x3a4>
   16c8c:	ldrd	r0, [r7, #224]	; 0xe0
   16c90:	adds	r0, r0, #1
   16c94:	adc	r1, r1, #0
   16c98:	strd	r0, [r7, #224]	; 0xe0
   16c9c:	ldr	r0, [pc, #116]	; 16d18 <UnityAssertFloatSpecial@@Base+0x414>
   16ca0:	ldr	r0, [pc, r0]
   16ca4:	bl	145a0 <UnityPrint@@Base>
   16ca8:	mov	r0, r5
   16cac:	bl	145a0 <UnityPrint@@Base>
   16cb0:	ldr	r0, [sp, #4]
   16cb4:	bl	15938 <UnityAssertBits@@Base+0x244>
   16cb8:	mov	r0, #1
   16cbc:	mov	r1, #1
   16cc0:	str	r0, [r9, #32]
   16cc4:	add	r0, r9, #40	; 0x28
   16cc8:	bl	125fc <longjmp@plt>
   16ccc:	muleq	r1, ip, r1
   16cd0:	andeq	fp, r1, r0, lsr #3
   16cd4:	andeq	r9, r1, ip, asr sp
   16cd8:	ldrdeq	sl, [r1], -r4
   16cdc:	andeq	sl, r1, r8, ror #15
   16ce0:	ldrdeq	r9, [r1], -r8
   16ce4:	muleq	r1, ip, r7
   16ce8:	ldrdeq	r9, [r1], -r8
   16cec:	muleq	r1, ip, r6
   16cf0:	andeq	r9, r1, ip, lsl #25
   16cf4:	andeq	sl, r1, r0, asr r7
   16cf8:	andeq	r9, r1, r0, asr ip
   16cfc:	andeq	sl, r1, r4, lsl r7
   16d00:	andeq	sl, r1, r4, asr r6
   16d04:	andeq	r9, r1, r0, lsl #23
   16d08:	andeq	sl, r1, r0, ror r5
   16d0c:	strdeq	sl, [r1], -r8
   16d10:			; <UNDEFINED> instruction: 0x0001a4b0
   16d14:	strdeq	sl, [r1], -r8
   16d18:	andeq	sl, r1, r4, asr r4

00016d1c <UnityAssertNumbersWithin@@Base>:
   16d1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d20:	add	fp, sp, #24
   16d24:	mov	r7, r0
   16d28:	ldr	r0, [pc, #524]	; 16f3c <UnityAssertNumbersWithin@@Base+0x220>
   16d2c:	mov	r6, r1
   16d30:	ldr	r1, [pc, #520]	; 16f40 <UnityAssertNumbersWithin@@Base+0x224>
   16d34:	mov	r9, r3
   16d38:	mov	r5, r2
   16d3c:	ldr	r1, [pc, r1]
   16d40:	add	r0, pc, r0
   16d44:	adds	r1, r1, #1
   16d48:	str	r1, [r0]
   16d4c:	ldr	r1, [r0, #4]
   16d50:	adc	r1, r1, #0
   16d54:	str	r1, [r0, #4]
   16d58:	ldr	r4, [pc, #484]	; 16f44 <UnityAssertNumbersWithin@@Base+0x228>
   16d5c:	ldr	r4, [pc, r4]
   16d60:	ldrd	r2, [r4, #32]
   16d64:	orrs	r1, r3, r2
   16d68:	mov	r2, #16
   16d6c:	mov	r3, r0
   16d70:	movwne	r2, #8
   16d74:	ldr	r2, [r3, r2]!
   16d78:	adds	r2, r2, #1
   16d7c:	str	r2, [r3]
   16d80:	ldr	r2, [r3, #4]
   16d84:	adc	r2, r2, #0
   16d88:	cmp	r1, #0
   16d8c:	str	r2, [r3, #4]
   16d90:	bne	16ebc <UnityAssertNumbersWithin@@Base+0x1a0>
   16d94:	ldr	r8, [fp, #12]
   16d98:	mov	r2, #32
   16d9c:	mov	r3, r0
   16da0:	ands	r1, r8, #16
   16da4:	movwne	r2, #24
   16da8:	ldr	r2, [r3, r2]!
   16dac:	adds	r2, r2, #1
   16db0:	str	r2, [r3]
   16db4:	ldr	r2, [r3, #4]
   16db8:	adc	r2, r2, #0
   16dbc:	cmp	r1, #0
   16dc0:	str	r2, [r3, #4]
   16dc4:	beq	16e10 <UnityAssertNumbersWithin@@Base+0xf4>
   16dc8:	mov	r1, #48	; 0x30
   16dcc:	cmp	r5, r6
   16dd0:	mov	r2, r0
   16dd4:	movwgt	r1, #40	; 0x28
   16dd8:	ldr	r1, [r2, r1]!
   16ddc:	adds	r1, r1, #1
   16de0:	str	r1, [r2]
   16de4:	ldr	r1, [r2, #4]
   16de8:	adc	r1, r1, #0
   16dec:	cmp	r5, r6
   16df0:	str	r1, [r2, #4]
   16df4:	ble	16e58 <UnityAssertNumbersWithin@@Base+0x13c>
   16df8:	ldrd	r2, [r0, #56]	; 0x38
   16dfc:	sub	r1, r5, r6
   16e00:	adds	r2, r2, #1
   16e04:	adc	r3, r3, #0
   16e08:	strd	r2, [r0, #56]	; 0x38
   16e0c:	b	16e80 <UnityAssertNumbersWithin@@Base+0x164>
   16e10:	mov	r1, #80	; 0x50
   16e14:	cmp	r5, r6
   16e18:	mov	r2, r0
   16e1c:	movwhi	r1, #72	; 0x48
   16e20:	ldr	r1, [r2, r1]!
   16e24:	adds	r1, r1, #1
   16e28:	str	r1, [r2]
   16e2c:	ldr	r1, [r2, #4]
   16e30:	adc	r1, r1, #0
   16e34:	cmp	r5, r6
   16e38:	str	r1, [r2, #4]
   16e3c:	bls	16e6c <UnityAssertNumbersWithin@@Base+0x150>
   16e40:	ldrd	r2, [r0, #88]	; 0x58
   16e44:	sub	r1, r5, r6
   16e48:	adds	r2, r2, #1
   16e4c:	adc	r3, r3, #0
   16e50:	strd	r2, [r0, #88]	; 0x58
   16e54:	b	16e80 <UnityAssertNumbersWithin@@Base+0x164>
   16e58:	ldrd	r2, [r0, #64]	; 0x40
   16e5c:	adds	r2, r2, #1
   16e60:	adc	r3, r3, #0
   16e64:	strd	r2, [r0, #64]	; 0x40
   16e68:	b	16e7c <UnityAssertNumbersWithin@@Base+0x160>
   16e6c:	ldrd	r2, [r0, #96]	; 0x60
   16e70:	adds	r2, r2, #1
   16e74:	adc	r3, r3, #0
   16e78:	strd	r2, [r0, #96]	; 0x60
   16e7c:	sub	r1, r6, r5
   16e80:	mov	r2, #0
   16e84:	cmp	r1, r7
   16e88:	mov	r3, r0
   16e8c:	movwhi	r2, #1
   16e90:	str	r2, [r4, #32]
   16e94:	mov	r2, #112	; 0x70
   16e98:	movwhi	r2, #104	; 0x68
   16e9c:	ldr	r2, [r3, r2]!
   16ea0:	adds	r2, r2, #1
   16ea4:	str	r2, [r3]
   16ea8:	ldr	r2, [r3, #4]
   16eac:	adc	r2, r2, #0
   16eb0:	cmp	r1, r7
   16eb4:	str	r2, [r3, #4]
   16eb8:	bhi	16ed0 <UnityAssertNumbersWithin@@Base+0x1b4>
   16ebc:	ldrd	r2, [r0, #120]	; 0x78
   16ec0:	adds	r2, r2, #1
   16ec4:	adc	r3, r3, #0
   16ec8:	strd	r2, [r0, #120]	; 0x78
   16ecc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ed0:	ldr	r0, [fp, #8]
   16ed4:	bl	15820 <UnityAssertBits@@Base+0x12c>
   16ed8:	ldr	r0, [pc, #104]	; 16f48 <UnityAssertNumbersWithin@@Base+0x22c>
   16edc:	ldr	r0, [pc, r0]
   16ee0:	bl	145a0 <UnityPrint@@Base>
   16ee4:	mov	r0, r7
   16ee8:	mov	r1, r8
   16eec:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   16ef0:	ldr	r0, [pc, #84]	; 16f4c <UnityAssertNumbersWithin@@Base+0x230>
   16ef4:	ldr	r0, [pc, r0]
   16ef8:	bl	145a0 <UnityPrint@@Base>
   16efc:	mov	r0, r6
   16f00:	mov	r1, r8
   16f04:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   16f08:	ldr	r0, [pc, #64]	; 16f50 <UnityAssertNumbersWithin@@Base+0x234>
   16f0c:	ldr	r0, [pc, r0]
   16f10:	bl	145a0 <UnityPrint@@Base>
   16f14:	mov	r0, r5
   16f18:	mov	r1, r8
   16f1c:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   16f20:	mov	r0, r9
   16f24:	bl	15938 <UnityAssertBits@@Base+0x244>
   16f28:	mov	r0, #1
   16f2c:	mov	r1, #1
   16f30:	str	r0, [r4, #32]
   16f34:	add	r0, r4, #40	; 0x28
   16f38:	bl	125fc <longjmp@plt>
   16f3c:	andeq	sl, r1, r8, lsl #29
   16f40:	andeq	sl, r1, ip, lsl #29
   16f44:	ldrdeq	sl, [r1], -r4
   16f48:	andeq	sl, r1, r0, lsr r2
   16f4c:	strdeq	sl, [r1], -ip
   16f50:	andeq	sl, r1, r8, asr #4

00016f54 <UnityAssertEqualString@@Base>:
   16f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f58:	add	fp, sp, #28
   16f5c:	sub	sp, sp, #4
   16f60:	ldr	lr, [pc, #660]	; 171fc <UnityAssertEqualString@@Base+0x2a8>
   16f64:	mov	sl, r1
   16f68:	ldr	r1, [pc, #656]	; 17200 <UnityAssertEqualString@@Base+0x2ac>
   16f6c:	mov	r9, r0
   16f70:	mov	r6, #16
   16f74:	ldr	r1, [pc, r1]
   16f78:	add	lr, pc, lr
   16f7c:	mov	r5, lr
   16f80:	adds	r1, r1, #1
   16f84:	str	r1, [lr]
   16f88:	ldr	r1, [lr, #4]
   16f8c:	adc	r1, r1, #0
   16f90:	str	r1, [lr, #4]
   16f94:	ldr	r0, [pc, #616]	; 17204 <UnityAssertEqualString@@Base+0x2b0>
   16f98:	ldr	r0, [pc, r0]
   16f9c:	ldr	r8, [r0, #32]
   16fa0:	ldr	r1, [r0, #36]	; 0x24
   16fa4:	orrs	r1, r1, r8
   16fa8:	movwne	r6, #8
   16fac:	ldr	r6, [r5, r6]!
   16fb0:	adds	r6, r6, #1
   16fb4:	str	r6, [r5]
   16fb8:	ldr	r6, [r5, #4]
   16fbc:	adc	r6, r6, #0
   16fc0:	cmp	r1, #0
   16fc4:	str	r6, [r5, #4]
   16fc8:	beq	16fe0 <UnityAssertEqualString@@Base+0x8c>
   16fcc:	ldrd	r2, [lr, #24]
   16fd0:	adds	r2, r2, #1
   16fd4:	adc	r3, r3, #0
   16fd8:	strd	r2, [lr, #24]
   16fdc:	b	171dc <UnityAssertEqualString@@Base+0x288>
   16fe0:	cmp	sl, #0
   16fe4:	mov	r1, sl
   16fe8:	mov	r4, r9
   16fec:	mov	r6, #40	; 0x28
   16ff0:	mov	r5, lr
   16ff4:	str	r2, [sp]
   16ff8:	movwne	r1, #1
   16ffc:	cmp	r9, #0
   17000:	movwne	r4, #1
   17004:	ands	r1, r4, r1
   17008:	movwne	r6, #32
   1700c:	ldr	r6, [r5, r6]!
   17010:	adds	r6, r6, #1
   17014:	str	r6, [r5]
   17018:	ldr	r6, [r5, #4]
   1701c:	adc	r6, r6, #0
   17020:	cmp	r1, #1
   17024:	str	r6, [r5, #4]
   17028:	bne	1716c <UnityAssertEqualString@@Base+0x218>
   1702c:	ldrd	r4, [lr, #48]	; 0x30
   17030:	add	ip, lr, #104	; 0x68
   17034:	mov	r6, r9
   17038:	adds	r4, r4, #1
   1703c:	adc	r5, r5, #0
   17040:	strd	r4, [lr, #48]	; 0x30
   17044:	mov	r5, sl
   17048:	b	17064 <UnityAssertEqualString@@Base+0x110>
   1704c:	ldrd	r0, [lr, #112]	; 0x70
   17050:	add	r6, r6, #1
   17054:	add	r5, r5, #1
   17058:	adds	r0, r0, #1
   1705c:	adc	r1, r1, #0
   17060:	strd	r0, [lr, #112]	; 0x70
   17064:	ldrb	r4, [r6]
   17068:	mov	r1, #64	; 0x40
   1706c:	mov	r0, lr
   17070:	cmp	r4, #0
   17074:	movwne	r1, #56	; 0x38
   17078:	ldr	r1, [r0, r1]!
   1707c:	adds	r1, r1, #1
   17080:	str	r1, [r0]
   17084:	ldr	r1, [r0, #4]
   17088:	adc	r1, r1, #0
   1708c:	cmp	r4, #0
   17090:	str	r1, [r0, #4]
   17094:	bne	170cc <UnityAssertEqualString@@Base+0x178>
   17098:	ldrb	r0, [r5]
   1709c:	mov	r1, #80	; 0x50
   170a0:	mov	r7, lr
   170a4:	cmp	r0, #0
   170a8:	movwne	r1, #72	; 0x48
   170ac:	ldr	r1, [r7, r1]!
   170b0:	adds	r1, r1, #1
   170b4:	str	r1, [r7]
   170b8:	ldr	r1, [r7, #4]
   170bc:	adc	r1, r1, #0
   170c0:	cmp	r0, #0
   170c4:	str	r1, [r7, #4]
   170c8:	beq	1719c <UnityAssertEqualString@@Base+0x248>
   170cc:	ldrb	r0, [r5]
   170d0:	ldrb	r1, [r6]
   170d4:	mov	r4, #96	; 0x60
   170d8:	mov	r7, lr
   170dc:	cmp	r1, r0
   170e0:	movwne	r4, #88	; 0x58
   170e4:	ldr	r4, [r7, r4]!
   170e8:	adds	r4, r4, #1
   170ec:	str	r4, [r7]
   170f0:	ldr	r4, [r7, #4]
   170f4:	adc	r4, r4, #0
   170f8:	cmp	r1, r0
   170fc:	str	r4, [r7, #4]
   17100:	beq	1704c <UnityAssertEqualString@@Base+0xf8>
   17104:	ldrd	r0, [ip]
   17108:	adds	r0, r0, #1
   1710c:	adc	r1, r1, #0
   17110:	strd	r0, [ip]
   17114:	mov	r0, #1
   17118:	ldr	r1, [pc, #232]	; 17208 <UnityAssertEqualString@@Base+0x2b4>
   1711c:	ldr	r1, [pc, r1]
   17120:	str	r0, [r1, #32]
   17124:	ldrd	r0, [lr, #144]	; 0x90
   17128:	adds	r0, r0, #1
   1712c:	adc	r1, r1, #0
   17130:	strd	r0, [lr, #144]	; 0x90
   17134:	mov	r0, r3
   17138:	bl	15820 <UnityAssertBits@@Base+0x12c>
   1713c:	mov	r0, r9
   17140:	mov	r1, sl
   17144:	bl	17210 <UnityAssertEqualString@@Base+0x2bc>
   17148:	ldr	r0, [sp]
   1714c:	bl	15938 <UnityAssertBits@@Base+0x244>
   17150:	ldr	r1, [pc, #180]	; 1720c <UnityAssertEqualString@@Base+0x2b8>
   17154:	mov	r0, #1
   17158:	ldr	r1, [pc, r1]
   1715c:	str	r0, [r1, #32]
   17160:	add	r0, r1, #40	; 0x28
   17164:	mov	r1, #1
   17168:	bl	125fc <longjmp@plt>
   1716c:	mov	r0, #128	; 0x80
   17170:	cmp	r9, sl
   17174:	mov	r1, lr
   17178:	movwne	r0, #120	; 0x78
   1717c:	ldr	r0, [r1, r0]!
   17180:	adds	r0, r0, #1
   17184:	str	r0, [r1]
   17188:	ldr	r0, [r1, #4]
   1718c:	adc	r0, r0, #0
   17190:	cmp	r9, sl
   17194:	str	r0, [r1, #4]
   17198:	bne	171f4 <UnityAssertEqualString@@Base+0x2a0>
   1719c:	mov	r0, #152	; 0x98
   171a0:	cmp	r8, #0
   171a4:	mov	r1, lr
   171a8:	movwne	r0, #144	; 0x90
   171ac:	ldr	r0, [r1, r0]!
   171b0:	adds	r0, r0, #1
   171b4:	str	r0, [r1]
   171b8:	ldr	r0, [r1, #4]
   171bc:	adc	r0, r0, #0
   171c0:	cmp	r8, #0
   171c4:	str	r0, [r1, #4]
   171c8:	bne	17134 <UnityAssertEqualString@@Base+0x1e0>
   171cc:	ldrd	r0, [lr, #160]	; 0xa0
   171d0:	adds	r0, r0, #1
   171d4:	adc	r1, r1, #0
   171d8:	strd	r0, [lr, #160]	; 0xa0
   171dc:	ldrd	r0, [lr, #168]	; 0xa8
   171e0:	adds	r0, r0, #1
   171e4:	adc	r1, r1, #0
   171e8:	strd	r0, [lr, #168]	; 0xa8
   171ec:	sub	sp, fp, #28
   171f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f4:	add	ip, lr, #136	; 0x88
   171f8:	b	17104 <UnityAssertEqualString@@Base+0x1b0>
   171fc:	ldrdeq	sl, [r1], -r0
   17200:	ldrdeq	sl, [r1], -r4
   17204:	muleq	r1, r8, r1
   17208:	andeq	sl, r1, r4, lsl r0
   1720c:	ldrdeq	r9, [r1], -r8
   17210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17214:	add	fp, sp, #24
   17218:	vpush	{d8-d9}
   1721c:	ldr	r6, [pc, #460]	; 173f0 <UnityAssertEqualString@@Base+0x49c>
   17220:	mov	r5, r0
   17224:	ldr	r0, [pc, #456]	; 173f4 <UnityAssertEqualString@@Base+0x4a0>
   17228:	mov	r4, r1
   1722c:	ldr	r0, [pc, r0]
   17230:	add	r6, pc, r6
   17234:	adds	r0, r0, #1
   17238:	str	r0, [r6]
   1723c:	ldr	r0, [r6, #4]
   17240:	adc	r0, r0, #0
   17244:	str	r0, [r6, #4]
   17248:	ldr	r0, [pc, #424]	; 173f8 <UnityAssertEqualString@@Base+0x4a4>
   1724c:	ldr	r0, [pc, r0]
   17250:	bl	145a0 <UnityPrint@@Base>
   17254:	mov	r0, #16
   17258:	cmp	r5, #0
   1725c:	mov	r1, r6
   17260:	movwne	r0, #8
   17264:	ldr	r0, [r1, r0]!
   17268:	adds	r0, r0, #1
   1726c:	str	r0, [r1]
   17270:	ldr	r0, [r1, #4]
   17274:	adc	r0, r0, #0
   17278:	cmp	r5, #0
   1727c:	str	r0, [r1, #4]
   17280:	beq	172e8 <UnityAssertEqualString@@Base+0x394>
   17284:	ldr	r7, [pc, #368]	; 173fc <UnityAssertEqualString@@Base+0x4a8>
   17288:	add	r0, pc, #336	; 0x150
   1728c:	vld1.64	{d8-d9}, [r0 :128]
   17290:	ldrd	r0, [r6, #24]
   17294:	add	r7, pc, r7
   17298:	vld1.64	{d16-d17}, [r7 :128]
   1729c:	adds	r0, r0, #1
   172a0:	adc	r1, r1, #0
   172a4:	strd	r0, [r6, #24]
   172a8:	mov	r0, #39	; 0x27
   172ac:	vadd.i64	q8, q8, q4
   172b0:	vst1.64	{d16-d17}, [r7 :128]
   172b4:	ldr	r8, [pc, #324]	; 17400 <UnityAssertEqualString@@Base+0x4ac>
   172b8:	ldr	r8, [pc, r8]
   172bc:	ldr	r1, [r8]
   172c0:	bl	127a0 <putc@plt>
   172c4:	mov	r0, r5
   172c8:	bl	145a0 <UnityPrint@@Base>
   172cc:	vld1.64	{d16-d17}, [r7 :128]
   172d0:	ldr	r1, [r8]
   172d4:	mov	r0, #39	; 0x27
   172d8:	vadd.i64	q8, q8, q4
   172dc:	vst1.64	{d16-d17}, [r7 :128]
   172e0:	bl	127a0 <putc@plt>
   172e4:	b	17304 <UnityAssertEqualString@@Base+0x3b0>
   172e8:	ldrd	r0, [r6, #32]
   172ec:	adds	r0, r0, #1
   172f0:	adc	r1, r1, #0
   172f4:	strd	r0, [r6, #32]
   172f8:	ldr	r0, [pc, #260]	; 17404 <UnityAssertEqualString@@Base+0x4b0>
   172fc:	ldr	r0, [pc, r0]
   17300:	bl	145a0 <UnityPrint@@Base>
   17304:	ldr	r0, [pc, #252]	; 17408 <UnityAssertEqualString@@Base+0x4b4>
   17308:	ldr	r0, [pc, r0]
   1730c:	bl	145a0 <UnityPrint@@Base>
   17310:	mov	r0, #48	; 0x30
   17314:	cmp	r4, #0
   17318:	mov	r1, r6
   1731c:	movwne	r0, #40	; 0x28
   17320:	ldr	r0, [r1, r0]!
   17324:	adds	r0, r0, #1
   17328:	str	r0, [r1]
   1732c:	ldr	r0, [r1, #4]
   17330:	adc	r0, r0, #0
   17334:	cmp	r4, #0
   17338:	str	r0, [r1, #4]
   1733c:	beq	173a4 <UnityAssertEqualString@@Base+0x450>
   17340:	ldr	r5, [pc, #196]	; 1740c <UnityAssertEqualString@@Base+0x4b8>
   17344:	add	r0, pc, #148	; 0x94
   17348:	vld1.64	{d8-d9}, [r0 :128]
   1734c:	ldrd	r0, [r6, #56]	; 0x38
   17350:	add	r5, pc, r5
   17354:	vld1.64	{d16-d17}, [r5 :128]
   17358:	adds	r0, r0, #1
   1735c:	adc	r1, r1, #0
   17360:	strd	r0, [r6, #56]	; 0x38
   17364:	mov	r0, #39	; 0x27
   17368:	vadd.i64	q8, q8, q4
   1736c:	vst1.64	{d16-d17}, [r5 :128]
   17370:	ldr	r7, [pc, #152]	; 17410 <UnityAssertEqualString@@Base+0x4bc>
   17374:	ldr	r7, [pc, r7]
   17378:	ldr	r1, [r7]
   1737c:	bl	127a0 <putc@plt>
   17380:	mov	r0, r4
   17384:	bl	145a0 <UnityPrint@@Base>
   17388:	vld1.64	{d16-d17}, [r5 :128]
   1738c:	ldr	r1, [r7]
   17390:	mov	r0, #39	; 0x27
   17394:	vadd.i64	q8, q8, q4
   17398:	vst1.64	{d16-d17}, [r5 :128]
   1739c:	bl	127a0 <putc@plt>
   173a0:	b	173c0 <UnityAssertEqualString@@Base+0x46c>
   173a4:	ldrd	r0, [r6, #64]	; 0x40
   173a8:	adds	r0, r0, #1
   173ac:	adc	r1, r1, #0
   173b0:	strd	r0, [r6, #64]	; 0x40
   173b4:	ldr	r0, [pc, #88]	; 17414 <UnityAssertEqualString@@Base+0x4c0>
   173b8:	ldr	r0, [pc, r0]
   173bc:	bl	145a0 <UnityPrint@@Base>
   173c0:	ldrd	r0, [r6, #72]	; 0x48
   173c4:	adds	r0, r0, #1
   173c8:	adc	r1, r1, #0
   173cc:	strd	r0, [r6, #72]	; 0x48
   173d0:	vpop	{d8-d9}
   173d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   173d8:	nop	{0}
   173dc:	nop	{0}
   173e0:	andeq	r0, r0, r1
   173e4:	andeq	r0, r0, r0
   173e8:	andeq	r0, r0, r1
   173ec:	andeq	r0, r0, r0
   173f0:	andeq	sl, r1, r8, asr #21
   173f4:	andeq	sl, r1, ip, asr #21
   173f8:	andeq	r9, r1, r4, lsr #29
   173fc:	andeq	sl, r1, r4, lsl #3
   17400:	muleq	r1, r0, lr
   17404:	andeq	r9, r1, r8, lsr lr
   17408:	andeq	r9, r1, ip, asr #28
   1740c:	andeq	sl, r1, r8, asr #1
   17410:	ldrdeq	r9, [r1], -r4
   17414:	andeq	r9, r1, ip, ror sp

00017418 <UnityAssertEqualStringLen@@Base>:
   17418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1741c:	add	fp, sp, #28
   17420:	sub	sp, sp, #4
   17424:	ldr	r6, [pc, #692]	; 176e0 <UnityAssertEqualStringLen@@Base+0x2c8>
   17428:	mov	sl, r1
   1742c:	ldr	r1, [pc, #688]	; 176e4 <UnityAssertEqualStringLen@@Base+0x2cc>
   17430:	mov	r8, r3
   17434:	mov	r7, r0
   17438:	ldr	r1, [pc, r1]
   1743c:	add	r6, pc, r6
   17440:	mov	r0, r6
   17444:	adds	r1, r1, #1
   17448:	str	r1, [r6]
   1744c:	ldr	r1, [r6, #4]
   17450:	adc	r1, r1, #0
   17454:	str	r1, [r6, #4]
   17458:	ldr	r9, [pc, #648]	; 176e8 <UnityAssertEqualStringLen@@Base+0x2d0>
   1745c:	ldr	r9, [pc, r9]
   17460:	ldr	lr, [r9, #32]
   17464:	ldr	r3, [r9, #36]	; 0x24
   17468:	orrs	r1, r3, lr
   1746c:	mov	r3, #16
   17470:	movwne	r3, #8
   17474:	ldr	r3, [r0, r3]!
   17478:	adds	r3, r3, #1
   1747c:	str	r3, [r0]
   17480:	ldr	r3, [r0, #4]
   17484:	adc	r3, r3, #0
   17488:	cmp	r1, #0
   1748c:	str	r3, [r0, #4]
   17490:	beq	174a8 <UnityAssertEqualStringLen@@Base+0x90>
   17494:	ldrd	r0, [r6, #24]
   17498:	adds	r0, r0, #1
   1749c:	adc	r1, r1, #0
   174a0:	strd	r0, [r6, #24]
   174a4:	b	176c0 <UnityAssertEqualStringLen@@Base+0x2a8>
   174a8:	cmp	sl, #0
   174ac:	mov	r0, sl
   174b0:	mov	r1, r7
   174b4:	mov	r3, r6
   174b8:	mov	r5, r2
   174bc:	movwne	r0, #1
   174c0:	cmp	r7, #0
   174c4:	movwne	r1, #1
   174c8:	ands	r0, r1, r0
   174cc:	mov	r1, #40	; 0x28
   174d0:	movwne	r1, #32
   174d4:	ldr	r1, [r3, r1]!
   174d8:	adds	r1, r1, #1
   174dc:	str	r1, [r3]
   174e0:	ldr	r1, [r3, #4]
   174e4:	adc	r1, r1, #0
   174e8:	cmp	r0, #1
   174ec:	str	r1, [r3, #4]
   174f0:	bne	17650 <UnityAssertEqualStringLen@@Base+0x238>
   174f4:	ldrd	r0, [r6, #48]	; 0x30
   174f8:	mov	r3, #0
   174fc:	add	ip, r6, #120	; 0x78
   17500:	adds	r0, r0, #1
   17504:	adc	r1, r1, #0
   17508:	strd	r0, [r6, #48]	; 0x30
   1750c:	b	17524 <UnityAssertEqualStringLen@@Base+0x10c>
   17510:	ldrd	r0, [r6, #128]	; 0x80
   17514:	add	r3, r3, #1
   17518:	adds	r0, r0, #1
   1751c:	adc	r1, r1, #0
   17520:	strd	r0, [r6, #128]	; 0x80
   17524:	ldrb	r0, [r7, r3]
   17528:	mov	r1, #64	; 0x40
   1752c:	mov	r4, r6
   17530:	cmp	r0, #0
   17534:	movwne	r1, #56	; 0x38
   17538:	ldr	r1, [r4, r1]!
   1753c:	adds	r1, r1, #1
   17540:	str	r1, [r4]
   17544:	ldr	r1, [r4, #4]
   17548:	adc	r1, r1, #0
   1754c:	cmp	r0, #0
   17550:	str	r1, [r4, #4]
   17554:	bne	1758c <UnityAssertEqualStringLen@@Base+0x174>
   17558:	ldrb	r0, [sl, r3]
   1755c:	mov	r1, #80	; 0x50
   17560:	mov	r4, r6
   17564:	cmp	r0, #0
   17568:	movwne	r1, #72	; 0x48
   1756c:	ldr	r1, [r4, r1]!
   17570:	adds	r1, r1, #1
   17574:	str	r1, [r4]
   17578:	ldr	r1, [r4, #4]
   1757c:	adc	r1, r1, #0
   17580:	cmp	r0, #0
   17584:	str	r1, [r4, #4]
   17588:	beq	17680 <UnityAssertEqualStringLen@@Base+0x268>
   1758c:	cmp	r3, r5
   17590:	mov	r0, #96	; 0x60
   17594:	mov	r1, r6
   17598:	movwcc	r0, #88	; 0x58
   1759c:	ldr	r0, [r1, r0]!
   175a0:	adds	r0, r0, #1
   175a4:	str	r0, [r1]
   175a8:	ldr	r0, [r1, #4]
   175ac:	adc	r0, r0, #0
   175b0:	cmp	r3, r5
   175b4:	str	r0, [r1, #4]
   175b8:	bcs	17680 <UnityAssertEqualStringLen@@Base+0x268>
   175bc:	ldrb	r0, [sl, r3]
   175c0:	ldrb	r1, [r7, r3]
   175c4:	mov	r4, #112	; 0x70
   175c8:	mov	r2, r6
   175cc:	cmp	r1, r0
   175d0:	movwne	r4, #104	; 0x68
   175d4:	ldr	r4, [r2, r4]!
   175d8:	adds	r4, r4, #1
   175dc:	str	r4, [r2]
   175e0:	ldr	r4, [r2, #4]
   175e4:	adc	r4, r4, #0
   175e8:	cmp	r1, r0
   175ec:	str	r4, [r2, #4]
   175f0:	beq	17510 <UnityAssertEqualStringLen@@Base+0xf8>
   175f4:	ldrd	r0, [ip]
   175f8:	adds	r0, r0, #1
   175fc:	adc	r1, r1, #0
   17600:	strd	r0, [ip]
   17604:	mov	r0, #1
   17608:	str	r0, [r9, #32]
   1760c:	ldrd	r0, [r6, #160]	; 0xa0
   17610:	adds	r0, r0, #1
   17614:	adc	r1, r1, #0
   17618:	strd	r0, [r6, #160]	; 0xa0
   1761c:	ldr	r0, [fp, #8]
   17620:	bl	15820 <UnityAssertBits@@Base+0x12c>
   17624:	mov	r0, r7
   17628:	mov	r1, sl
   1762c:	mov	r2, r5
   17630:	bl	176f0 <UnityAssertEqualStringLen@@Base+0x2d8>
   17634:	mov	r0, r8
   17638:	bl	15938 <UnityAssertBits@@Base+0x244>
   1763c:	mov	r0, #1
   17640:	mov	r1, #1
   17644:	str	r0, [r9, #32]
   17648:	add	r0, r9, #40	; 0x28
   1764c:	bl	125fc <longjmp@plt>
   17650:	mov	r0, #144	; 0x90
   17654:	cmp	r7, sl
   17658:	mov	r1, r6
   1765c:	movwne	r0, #136	; 0x88
   17660:	ldr	r0, [r1, r0]!
   17664:	adds	r0, r0, #1
   17668:	str	r0, [r1]
   1766c:	ldr	r0, [r1, #4]
   17670:	adc	r0, r0, #0
   17674:	cmp	r7, sl
   17678:	str	r0, [r1, #4]
   1767c:	bne	176d8 <UnityAssertEqualStringLen@@Base+0x2c0>
   17680:	mov	r0, #168	; 0xa8
   17684:	cmp	lr, #0
   17688:	mov	r1, r6
   1768c:	movwne	r0, #160	; 0xa0
   17690:	ldr	r0, [r1, r0]!
   17694:	adds	r0, r0, #1
   17698:	str	r0, [r1]
   1769c:	ldr	r0, [r1, #4]
   176a0:	adc	r0, r0, #0
   176a4:	cmp	lr, #0
   176a8:	str	r0, [r1, #4]
   176ac:	bne	1761c <UnityAssertEqualStringLen@@Base+0x204>
   176b0:	ldrd	r0, [r6, #176]	; 0xb0
   176b4:	adds	r0, r0, #1
   176b8:	adc	r1, r1, #0
   176bc:	strd	r0, [r6, #176]	; 0xb0
   176c0:	ldrd	r0, [r6, #184]	; 0xb8
   176c4:	adds	r0, r0, #1
   176c8:	adc	r1, r1, #0
   176cc:	strd	r0, [r6, #184]	; 0xb8
   176d0:	sub	sp, fp, #28
   176d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d8:	add	ip, r6, #152	; 0x98
   176dc:	b	175f4 <UnityAssertEqualStringLen@@Base+0x1dc>
   176e0:	andeq	sl, r1, ip, lsl #18
   176e4:	andeq	sl, r1, r0, lsl r9
   176e8:	ldrdeq	r9, [r1], -r4
   176ec:	nop	{0}
   176f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   176f4:	add	fp, sp, #24
   176f8:	vpush	{d8-d9}
   176fc:	ldr	r7, [pc, #476]	; 178e0 <UnityAssertEqualStringLen@@Base+0x4c8>
   17700:	mov	r6, r0
   17704:	ldr	r0, [pc, #472]	; 178e4 <UnityAssertEqualStringLen@@Base+0x4cc>
   17708:	mov	r8, r2
   1770c:	mov	r5, r1
   17710:	ldr	r0, [pc, r0]
   17714:	add	r7, pc, r7
   17718:	adds	r0, r0, #1
   1771c:	str	r0, [r7]
   17720:	ldr	r0, [r7, #4]
   17724:	adc	r0, r0, #0
   17728:	str	r0, [r7, #4]
   1772c:	ldr	r0, [pc, #436]	; 178e8 <UnityAssertEqualStringLen@@Base+0x4d0>
   17730:	ldr	r0, [pc, r0]
   17734:	bl	145a0 <UnityPrint@@Base>
   17738:	mov	r0, #16
   1773c:	cmp	r6, #0
   17740:	mov	r1, r7
   17744:	movwne	r0, #8
   17748:	ldr	r0, [r1, r0]!
   1774c:	adds	r0, r0, #1
   17750:	str	r0, [r1]
   17754:	ldr	r0, [r1, #4]
   17758:	adc	r0, r0, #0
   1775c:	cmp	r6, #0
   17760:	str	r0, [r1, #4]
   17764:	beq	177d0 <UnityAssertEqualStringLen@@Base+0x3b8>
   17768:	ldr	r4, [pc, #380]	; 178ec <UnityAssertEqualStringLen@@Base+0x4d4>
   1776c:	add	r0, pc, #348	; 0x15c
   17770:	vld1.64	{d8-d9}, [r0 :128]
   17774:	ldrd	r0, [r7, #24]
   17778:	add	r4, pc, r4
   1777c:	vld1.64	{d16-d17}, [r4 :128]
   17780:	adds	r0, r0, #1
   17784:	adc	r1, r1, #0
   17788:	strd	r0, [r7, #24]
   1778c:	mov	r0, #39	; 0x27
   17790:	vadd.i64	q8, q8, q4
   17794:	vst1.64	{d16-d17}, [r4 :128]
   17798:	ldr	r9, [pc, #336]	; 178f0 <UnityAssertEqualStringLen@@Base+0x4d8>
   1779c:	ldr	r9, [pc, r9]
   177a0:	ldr	r1, [r9]
   177a4:	bl	127a0 <putc@plt>
   177a8:	mov	r0, r6
   177ac:	mov	r1, r8
   177b0:	bl	14a40 <UnityPrintLen@@Base>
   177b4:	vld1.64	{d16-d17}, [r4 :128]
   177b8:	ldr	r1, [r9]
   177bc:	mov	r0, #39	; 0x27
   177c0:	vadd.i64	q8, q8, q4
   177c4:	vst1.64	{d16-d17}, [r4 :128]
   177c8:	bl	127a0 <putc@plt>
   177cc:	b	177ec <UnityAssertEqualStringLen@@Base+0x3d4>
   177d0:	ldrd	r0, [r7, #32]
   177d4:	adds	r0, r0, #1
   177d8:	adc	r1, r1, #0
   177dc:	strd	r0, [r7, #32]
   177e0:	ldr	r0, [pc, #268]	; 178f4 <UnityAssertEqualStringLen@@Base+0x4dc>
   177e4:	ldr	r0, [pc, r0]
   177e8:	bl	145a0 <UnityPrint@@Base>
   177ec:	ldr	r0, [pc, #260]	; 178f8 <UnityAssertEqualStringLen@@Base+0x4e0>
   177f0:	ldr	r0, [pc, r0]
   177f4:	bl	145a0 <UnityPrint@@Base>
   177f8:	mov	r0, #48	; 0x30
   177fc:	cmp	r5, #0
   17800:	mov	r1, r7
   17804:	movwne	r0, #40	; 0x28
   17808:	ldr	r0, [r1, r0]!
   1780c:	adds	r0, r0, #1
   17810:	str	r0, [r1]
   17814:	ldr	r0, [r1, #4]
   17818:	adc	r0, r0, #0
   1781c:	cmp	r5, #0
   17820:	str	r0, [r1, #4]
   17824:	beq	17890 <UnityAssertEqualStringLen@@Base+0x478>
   17828:	ldr	r4, [pc, #204]	; 178fc <UnityAssertEqualStringLen@@Base+0x4e4>
   1782c:	add	r0, pc, #156	; 0x9c
   17830:	vld1.64	{d8-d9}, [r0 :128]
   17834:	ldrd	r0, [r7, #56]	; 0x38
   17838:	add	r4, pc, r4
   1783c:	vld1.64	{d16-d17}, [r4 :128]
   17840:	adds	r0, r0, #1
   17844:	adc	r1, r1, #0
   17848:	strd	r0, [r7, #56]	; 0x38
   1784c:	mov	r0, #39	; 0x27
   17850:	vadd.i64	q8, q8, q4
   17854:	vst1.64	{d16-d17}, [r4 :128]
   17858:	ldr	r6, [pc, #160]	; 17900 <UnityAssertEqualStringLen@@Base+0x4e8>
   1785c:	ldr	r6, [pc, r6]
   17860:	ldr	r1, [r6]
   17864:	bl	127a0 <putc@plt>
   17868:	mov	r0, r5
   1786c:	mov	r1, r8
   17870:	bl	14a40 <UnityPrintLen@@Base>
   17874:	vld1.64	{d16-d17}, [r4 :128]
   17878:	ldr	r1, [r6]
   1787c:	mov	r0, #39	; 0x27
   17880:	vadd.i64	q8, q8, q4
   17884:	vst1.64	{d16-d17}, [r4 :128]
   17888:	bl	127a0 <putc@plt>
   1788c:	b	178ac <UnityAssertEqualStringLen@@Base+0x494>
   17890:	ldrd	r0, [r7, #64]	; 0x40
   17894:	adds	r0, r0, #1
   17898:	adc	r1, r1, #0
   1789c:	strd	r0, [r7, #64]	; 0x40
   178a0:	ldr	r0, [pc, #92]	; 17904 <UnityAssertEqualStringLen@@Base+0x4ec>
   178a4:	ldr	r0, [pc, r0]
   178a8:	bl	145a0 <UnityPrint@@Base>
   178ac:	ldrd	r0, [r7, #72]	; 0x48
   178b0:	adds	r0, r0, #1
   178b4:	adc	r1, r1, #0
   178b8:	strd	r0, [r7, #72]	; 0x48
   178bc:	vpop	{d8-d9}
   178c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178c4:	nop	{0}
   178c8:	nop	{0}
   178cc:	nop	{0}
   178d0:	andeq	r0, r0, r1
   178d4:	andeq	r0, r0, r0
   178d8:	andeq	r0, r0, r1
   178dc:	andeq	r0, r0, r0
   178e0:	strdeq	sl, [r1], -r4
   178e4:	strdeq	sl, [r1], -r8
   178e8:	andeq	r9, r1, r0, asr #19
   178ec:	andeq	r9, r1, r0, lsr #25
   178f0:	andeq	r9, r1, ip, lsr #19
   178f4:	andeq	r9, r1, r0, asr r9
   178f8:	andeq	r9, r1, r4, ror #18
   178fc:	andeq	r9, r1, r0, ror #23
   17900:	andeq	r9, r1, ip, ror #17
   17904:	muleq	r1, r0, r8

00017908 <UnityAssertEqualStringArray@@Base>:
   17908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1790c:	add	fp, sp, #28
   17910:	sub	sp, sp, #4
   17914:	ldr	r8, [pc, #1024]	; 17d1c <UnityAssertEqualStringArray@@Base+0x414>
   17918:	mov	r5, r0
   1791c:	ldr	r0, [pc, #1020]	; 17d20 <UnityAssertEqualStringArray@@Base+0x418>
   17920:	mov	r6, r1
   17924:	mov	r9, r2
   17928:	ldr	r0, [pc, r0]
   1792c:	add	r8, pc, r8
   17930:	mov	r2, r8
   17934:	adds	r0, r0, #1
   17938:	str	r0, [r8]
   1793c:	ldr	r0, [r8, #4]
   17940:	adc	r0, r0, #0
   17944:	str	r0, [r8, #4]
   17948:	ldr	sl, [pc, #980]	; 17d24 <UnityAssertEqualStringArray@@Base+0x41c>
   1794c:	ldr	sl, [pc, sl]
   17950:	ldrd	r0, [sl, #32]
   17954:	orrs	r0, r1, r0
   17958:	mov	r1, #16
   1795c:	movwne	r1, #8
   17960:	ldr	r1, [r2, r1]!
   17964:	adds	r1, r1, #1
   17968:	str	r1, [r2]
   1796c:	ldr	r1, [r2, #4]
   17970:	adc	r1, r1, #0
   17974:	cmp	r0, #0
   17978:	str	r1, [r2, #4]
   1797c:	beq	17994 <UnityAssertEqualStringArray@@Base+0x8c>
   17980:	ldrd	r0, [r8, #24]
   17984:	adds	r0, r0, #1
   17988:	adc	r1, r1, #0
   1798c:	strd	r0, [r8, #24]
   17990:	b	17c28 <UnityAssertEqualStringArray@@Base+0x320>
   17994:	mov	r0, #40	; 0x28
   17998:	cmp	r9, #0
   1799c:	mov	r1, r8
   179a0:	ldr	r2, [fp, #8]
   179a4:	mov	r4, r3
   179a8:	movweq	r0, #32
   179ac:	ldr	r0, [r1, r0]!
   179b0:	adds	r0, r0, #1
   179b4:	str	r0, [r1]
   179b8:	ldr	r0, [r1, #4]
   179bc:	adc	r0, r0, #0
   179c0:	cmp	r9, #0
   179c4:	str	r0, [r1, #4]
   179c8:	beq	17d00 <UnityAssertEqualStringArray@@Base+0x3f8>
   179cc:	mov	r0, r5
   179d0:	mov	r1, r6
   179d4:	mov	r3, r4
   179d8:	bl	16218 <UnityAssertEqualIntArray@@Base+0x638>
   179dc:	mov	r1, #56	; 0x38
   179e0:	cmp	r0, #1
   179e4:	mov	r2, r8
   179e8:	movweq	r1, #48	; 0x30
   179ec:	ldr	r1, [r2, r1]!
   179f0:	adds	r1, r1, #1
   179f4:	str	r1, [r2]
   179f8:	ldr	r1, [r2, #4]
   179fc:	adc	r1, r1, #0
   17a00:	cmp	r0, #1
   17a04:	str	r1, [r2, #4]
   17a08:	bne	17a20 <UnityAssertEqualStringArray@@Base+0x118>
   17a0c:	ldrd	r0, [r8, #64]	; 0x40
   17a10:	adds	r0, r0, #1
   17a14:	adc	r1, r1, #0
   17a18:	strd	r0, [r8, #64]	; 0x40
   17a1c:	b	17c28 <UnityAssertEqualStringArray@@Base+0x320>
   17a20:	str	r4, [sp]
   17a24:	mov	r4, #0
   17a28:	ldr	r0, [r5, r4, lsl #2]
   17a2c:	mov	r1, #80	; 0x50
   17a30:	mov	r2, r8
   17a34:	cmp	r0, #0
   17a38:	movwne	r1, #72	; 0x48
   17a3c:	ldr	r1, [r2, r1]!
   17a40:	adds	r1, r1, #1
   17a44:	str	r1, [r2]
   17a48:	ldr	r1, [r2, #4]
   17a4c:	adc	r1, r1, #0
   17a50:	cmp	r0, #0
   17a54:	str	r1, [r2, #4]
   17a58:	beq	17b70 <UnityAssertEqualStringArray@@Base+0x268>
   17a5c:	ldr	r0, [r6, r4, lsl #2]
   17a60:	mov	r1, #96	; 0x60
   17a64:	mov	r2, r8
   17a68:	cmp	r0, #0
   17a6c:	movwne	r1, #88	; 0x58
   17a70:	ldr	r1, [r2, r1]!
   17a74:	adds	r1, r1, #1
   17a78:	str	r1, [r2]
   17a7c:	ldr	r1, [r2, #4]
   17a80:	adc	r1, r1, #0
   17a84:	cmp	r0, #0
   17a88:	str	r1, [r2, #4]
   17a8c:	beq	17b70 <UnityAssertEqualStringArray@@Base+0x268>
   17a90:	ldrd	r0, [r8, #104]	; 0x68
   17a94:	adds	r0, r0, #1
   17a98:	adc	r1, r1, #0
   17a9c:	strd	r0, [r8, #104]	; 0x68
   17aa0:	mov	r0, #0
   17aa4:	b	17abc <UnityAssertEqualStringArray@@Base+0x1b4>
   17aa8:	ldrd	r2, [r8, #168]	; 0xa8
   17aac:	add	r0, r0, #1
   17ab0:	adds	r2, r2, #1
   17ab4:	adc	r3, r3, #0
   17ab8:	strd	r2, [r8, #168]	; 0xa8
   17abc:	ldr	r1, [r5, r4, lsl #2]
   17ac0:	mov	r2, #120	; 0x78
   17ac4:	mov	r3, r8
   17ac8:	ldrb	r1, [r1, r0]
   17acc:	cmp	r1, #0
   17ad0:	movwne	r2, #112	; 0x70
   17ad4:	ldr	r2, [r3, r2]!
   17ad8:	adds	r2, r2, #1
   17adc:	str	r2, [r3]
   17ae0:	ldr	r2, [r3, #4]
   17ae4:	adc	r2, r2, #0
   17ae8:	cmp	r1, #0
   17aec:	str	r2, [r3, #4]
   17af0:	bne	17b2c <UnityAssertEqualStringArray@@Base+0x224>
   17af4:	ldr	r1, [r6, r4, lsl #2]
   17af8:	mov	r2, #136	; 0x88
   17afc:	mov	r3, r8
   17b00:	ldrb	r1, [r1, r0]
   17b04:	cmp	r1, #0
   17b08:	movwne	r2, #128	; 0x80
   17b0c:	ldr	r2, [r3, r2]!
   17b10:	adds	r2, r2, #1
   17b14:	str	r2, [r3]
   17b18:	ldr	r2, [r3, #4]
   17b1c:	adc	r2, r2, #0
   17b20:	cmp	r1, #0
   17b24:	str	r2, [r3, #4]
   17b28:	beq	17ba8 <UnityAssertEqualStringArray@@Base+0x2a0>
   17b2c:	ldr	r1, [r6, r4, lsl #2]
   17b30:	ldr	r2, [r5, r4, lsl #2]
   17b34:	mov	r3, #152	; 0x98
   17b38:	mov	r7, r8
   17b3c:	ldrb	r1, [r1, r0]
   17b40:	ldrb	r2, [r2, r0]
   17b44:	cmp	r2, r1
   17b48:	movwne	r3, #144	; 0x90
   17b4c:	ldr	r3, [r7, r3]!
   17b50:	adds	r3, r3, #1
   17b54:	str	r3, [r7]
   17b58:	ldr	r3, [r7, #4]
   17b5c:	adc	r3, r3, #0
   17b60:	cmp	r2, r1
   17b64:	str	r3, [r7, #4]
   17b68:	beq	17aa8 <UnityAssertEqualStringArray@@Base+0x1a0>
   17b6c:	b	17c48 <UnityAssertEqualStringArray@@Base+0x340>
   17b70:	ldr	r0, [r6, r4, lsl #2]
   17b74:	ldr	r1, [r5, r4, lsl #2]
   17b78:	mov	r2, #184	; 0xb8
   17b7c:	mov	r3, r8
   17b80:	cmp	r1, r0
   17b84:	movwne	r2, #176	; 0xb0
   17b88:	ldr	r2, [r3, r2]!
   17b8c:	adds	r2, r2, #1
   17b90:	str	r2, [r3]
   17b94:	ldr	r2, [r3, #4]
   17b98:	adc	r2, r2, #0
   17b9c:	cmp	r1, r0
   17ba0:	str	r2, [r3, #4]
   17ba4:	bne	17cf8 <UnityAssertEqualStringArray@@Base+0x3f0>
   17ba8:	ldr	r0, [sl, #32]
   17bac:	mov	r1, #208	; 0xd0
   17bb0:	mov	r2, r8
   17bb4:	cmp	r0, #0
   17bb8:	movwne	r1, #200	; 0xc8
   17bbc:	ldr	r1, [r2, r1]!
   17bc0:	adds	r1, r1, #1
   17bc4:	str	r1, [r2]
   17bc8:	ldr	r1, [r2, #4]
   17bcc:	adc	r1, r1, #0
   17bd0:	cmp	r0, #0
   17bd4:	str	r1, [r2, #4]
   17bd8:	bne	17c74 <UnityAssertEqualStringArray@@Base+0x36c>
   17bdc:	add	r4, r4, #1
   17be0:	mov	r0, #248	; 0xf8
   17be4:	mov	r1, r8
   17be8:	cmp	r4, r9
   17bec:	movwcc	r0, #240	; 0xf0
   17bf0:	ldr	r0, [r1, r0]!
   17bf4:	adds	r0, r0, #1
   17bf8:	str	r0, [r1]
   17bfc:	ldr	r0, [r1, #4]
   17c00:	adc	r0, r0, #0
   17c04:	cmp	r4, r9
   17c08:	str	r0, [r1, #4]
   17c0c:	bcc	17a28 <UnityAssertEqualStringArray@@Base+0x120>
   17c10:	ldr	r0, [r8, #256]	; 0x100
   17c14:	ldr	r1, [r8, #260]	; 0x104
   17c18:	adds	r0, r0, #1
   17c1c:	adc	r1, r1, #0
   17c20:	str	r0, [r8, #256]	; 0x100
   17c24:	str	r1, [r8, #260]	; 0x104
   17c28:	ldr	r0, [r8, #264]	; 0x108
   17c2c:	ldr	r1, [r8, #268]	; 0x10c
   17c30:	adds	r0, r0, #1
   17c34:	adc	r1, r1, #0
   17c38:	str	r0, [r8, #264]	; 0x108
   17c3c:	str	r1, [r8, #268]	; 0x10c
   17c40:	sub	sp, fp, #28
   17c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c48:	add	r0, r8, #160	; 0xa0
   17c4c:	ldrd	r2, [r0]
   17c50:	adds	r2, r2, #1
   17c54:	adc	r3, r3, #0
   17c58:	strd	r2, [r0]
   17c5c:	mov	r0, #1
   17c60:	str	r0, [sl, #32]
   17c64:	ldrd	r0, [r8, #200]	; 0xc8
   17c68:	adds	r0, r0, #1
   17c6c:	adc	r1, r1, #0
   17c70:	strd	r0, [r8, #200]	; 0xc8
   17c74:	ldr	r0, [fp, #8]
   17c78:	bl	15820 <UnityAssertBits@@Base+0x12c>
   17c7c:	mov	r0, #224	; 0xe0
   17c80:	cmp	r9, #1
   17c84:	mov	r1, r8
   17c88:	movwhi	r0, #216	; 0xd8
   17c8c:	ldr	r0, [r1, r0]!
   17c90:	adds	r0, r0, #1
   17c94:	str	r0, [r1]
   17c98:	ldr	r0, [r1, #4]
   17c9c:	adc	r0, r0, #0
   17ca0:	cmp	r9, #2
   17ca4:	str	r0, [r1, #4]
   17ca8:	bcc	17cd0 <UnityAssertEqualStringArray@@Base+0x3c8>
   17cac:	ldrd	r0, [r8, #232]	; 0xe8
   17cb0:	adds	r0, r0, #1
   17cb4:	adc	r1, r1, #0
   17cb8:	strd	r0, [r8, #232]	; 0xe8
   17cbc:	ldr	r0, [pc, #104]	; 17d2c <UnityAssertEqualStringArray@@Base+0x424>
   17cc0:	ldr	r0, [pc, r0]
   17cc4:	bl	145a0 <UnityPrint@@Base>
   17cc8:	mov	r0, r4
   17ccc:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   17cd0:	ldr	r1, [r6, r4, lsl #2]
   17cd4:	ldr	r0, [r5, r4, lsl #2]
   17cd8:	bl	17210 <UnityAssertEqualString@@Base+0x2bc>
   17cdc:	ldr	r0, [sp]
   17ce0:	bl	15938 <UnityAssertBits@@Base+0x244>
   17ce4:	mov	r0, #1
   17ce8:	mov	r1, #1
   17cec:	str	r0, [sl, #32]
   17cf0:	add	r0, sl, #40	; 0x28
   17cf4:	bl	125fc <longjmp@plt>
   17cf8:	add	r0, r8, #192	; 0xc0
   17cfc:	b	17c4c <UnityAssertEqualStringArray@@Base+0x344>
   17d00:	mov	r0, r2
   17d04:	bl	15820 <UnityAssertBits@@Base+0x12c>
   17d08:	ldr	r0, [pc, #24]	; 17d28 <UnityAssertEqualStringArray@@Base+0x420>
   17d0c:	ldr	r0, [pc, r0]
   17d10:	bl	145a0 <UnityPrint@@Base>
   17d14:	mov	r0, r4
   17d18:	b	17ce0 <UnityAssertEqualStringArray@@Base+0x3d8>
   17d1c:	andeq	sl, r1, ip, lsr #10
   17d20:	andeq	sl, r1, r0, lsr r5
   17d24:	andeq	r9, r1, r4, ror #15
   17d28:	andeq	r9, r1, r4, ror #8
   17d2c:	andeq	r9, r1, ip, asr r4

00017d30 <UnityAssertEqualMemory@@Base>:
   17d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d34:	add	fp, sp, #28
   17d38:	sub	sp, sp, #4
   17d3c:	ldr	sl, [pc, #844]	; 18090 <UnityAssertEqualMemory@@Base+0x360>
   17d40:	mov	r6, r0
   17d44:	ldr	r0, [pc, #840]	; 18094 <UnityAssertEqualMemory@@Base+0x364>
   17d48:	mov	r4, r1
   17d4c:	mov	r5, r2
   17d50:	ldr	r0, [pc, r0]
   17d54:	add	sl, pc, sl
   17d58:	mov	r2, sl
   17d5c:	adds	r0, r0, #1
   17d60:	str	r0, [sl]
   17d64:	ldr	r0, [sl, #4]
   17d68:	adc	r0, r0, #0
   17d6c:	str	r0, [sl, #4]
   17d70:	ldr	r9, [pc, #800]	; 18098 <UnityAssertEqualMemory@@Base+0x368>
   17d74:	ldr	r9, [pc, r9]
   17d78:	ldrd	r0, [r9, #32]
   17d7c:	orrs	r0, r1, r0
   17d80:	mov	r1, #16
   17d84:	movwne	r1, #8
   17d88:	ldr	r1, [r2, r1]!
   17d8c:	adds	r1, r1, #1
   17d90:	str	r1, [r2]
   17d94:	ldr	r1, [r2, #4]
   17d98:	adc	r1, r1, #0
   17d9c:	cmp	r0, #0
   17da0:	str	r1, [r2, #4]
   17da4:	beq	17dbc <UnityAssertEqualMemory@@Base+0x8c>
   17da8:	ldrd	r0, [sl, #24]
   17dac:	adds	r0, r0, #1
   17db0:	adc	r1, r1, #0
   17db4:	strd	r0, [sl, #24]
   17db8:	b	17f60 <UnityAssertEqualMemory@@Base+0x230>
   17dbc:	clz	r0, r3
   17dc0:	clz	r1, r5
   17dc4:	mov	r7, r3
   17dc8:	mov	r3, sl
   17dcc:	ldr	r2, [fp, #12]
   17dd0:	ldr	r8, [fp, #8]
   17dd4:	lsr	r0, r0, #5
   17dd8:	lsr	r1, r1, #5
   17ddc:	orrs	r0, r1, r0
   17de0:	mov	r1, #40	; 0x28
   17de4:	movwne	r1, #32
   17de8:	ldr	r1, [r3, r1]!
   17dec:	adds	r1, r1, #1
   17df0:	str	r1, [r3]
   17df4:	ldr	r1, [r3, #4]
   17df8:	adc	r1, r1, #0
   17dfc:	cmp	r0, #1
   17e00:	str	r1, [r3, #4]
   17e04:	beq	18050 <UnityAssertEqualMemory@@Base+0x320>
   17e08:	mov	r0, r6
   17e0c:	mov	r1, r4
   17e10:	mov	r3, r8
   17e14:	bl	16218 <UnityAssertEqualIntArray@@Base+0x638>
   17e18:	mov	r1, #56	; 0x38
   17e1c:	cmp	r0, #1
   17e20:	mov	r2, sl
   17e24:	movweq	r1, #48	; 0x30
   17e28:	ldr	r1, [r2, r1]!
   17e2c:	adds	r1, r1, #1
   17e30:	str	r1, [r2]
   17e34:	ldr	r1, [r2, #4]
   17e38:	adc	r1, r1, #0
   17e3c:	cmp	r0, #1
   17e40:	str	r1, [r2, #4]
   17e44:	bne	17e5c <UnityAssertEqualMemory@@Base+0x12c>
   17e48:	ldrd	r0, [sl, #64]	; 0x40
   17e4c:	adds	r0, r0, #1
   17e50:	adc	r1, r1, #0
   17e54:	strd	r0, [sl, #64]	; 0x40
   17e58:	b	17f60 <UnityAssertEqualMemory@@Base+0x230>
   17e5c:	ldrd	r0, [sl, #72]	; 0x48
   17e60:	add	ip, sl, #88	; 0x58
   17e64:	str	r7, [sp]
   17e68:	mov	lr, r7
   17e6c:	adds	r0, r0, #1
   17e70:	adc	r1, r1, #0
   17e74:	strd	r0, [sl, #72]	; 0x48
   17e78:	sub	r0, r5, #1
   17e7c:	add	r2, pc, #508	; 0x1fc
   17e80:	vld1.64	{d18-d19}, [ip]
   17e84:	mov	r8, lr
   17e88:	sub	lr, lr, #1
   17e8c:	mov	r7, #0
   17e90:	vld1.64	{d16-d17}, [r2 :128]
   17e94:	vadd.i64	q8, q9, q8
   17e98:	vst1.64	{d16-d17}, [ip]
   17e9c:	ldrb	r3, [r4]
   17ea0:	ldrb	r1, [r6]
   17ea4:	mov	r2, #120	; 0x78
   17ea8:	mov	r9, sl
   17eac:	cmp	r1, r3
   17eb0:	movwne	r2, #112	; 0x70
   17eb4:	ldr	r2, [r9, r2]!
   17eb8:	adds	r2, r2, #1
   17ebc:	str	r2, [r9]
   17ec0:	ldr	r2, [r9, #4]
   17ec4:	adc	r2, r2, #0
   17ec8:	cmp	r1, r3
   17ecc:	str	r2, [r9, #4]
   17ed0:	bne	17f78 <UnityAssertEqualMemory@@Base+0x248>
   17ed4:	ldrd	r2, [sl, #152]	; 0x98
   17ed8:	mov	r1, #104	; 0x68
   17edc:	add	r4, r4, #1
   17ee0:	add	r6, r6, #1
   17ee4:	adds	r2, r2, #1
   17ee8:	adc	r3, r3, #0
   17eec:	cmp	r0, r7
   17ef0:	add	r7, r7, #1
   17ef4:	strd	r2, [sl, #152]	; 0x98
   17ef8:	movwne	r1, #96	; 0x60
   17efc:	mov	r2, sl
   17f00:	ldr	r1, [r2, r1]!
   17f04:	adds	r1, r1, #1
   17f08:	str	r1, [r2]
   17f0c:	ldr	r1, [r2, #4]
   17f10:	adc	r1, r1, #0
   17f14:	cmp	r5, r7
   17f18:	str	r1, [r2, #4]
   17f1c:	bne	17e9c <UnityAssertEqualMemory@@Base+0x16c>
   17f20:	cmp	lr, #0
   17f24:	mov	r3, #80	; 0x50
   17f28:	mov	r7, sl
   17f2c:	movwne	r3, #72	; 0x48
   17f30:	ldr	r3, [r7, r3]!
   17f34:	adds	r3, r3, #1
   17f38:	str	r3, [r7]
   17f3c:	ldr	r3, [r7, #4]
   17f40:	adc	r3, r3, #0
   17f44:	cmp	lr, #0
   17f48:	str	r3, [r7, #4]
   17f4c:	bne	17e7c <UnityAssertEqualMemory@@Base+0x14c>
   17f50:	ldrd	r0, [sl, #160]	; 0xa0
   17f54:	adds	r0, r0, #1
   17f58:	adc	r1, r1, #0
   17f5c:	strd	r0, [sl, #160]	; 0xa0
   17f60:	ldrd	r0, [sl, #168]	; 0xa8
   17f64:	adds	r0, r0, #1
   17f68:	adc	r1, r1, #0
   17f6c:	strd	r0, [sl, #168]	; 0xa8
   17f70:	sub	sp, fp, #28
   17f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f78:	ldr	r0, [fp, #12]
   17f7c:	bl	15820 <UnityAssertBits@@Base+0x12c>
   17f80:	ldr	r0, [pc, #276]	; 1809c <UnityAssertEqualMemory@@Base+0x36c>
   17f84:	ldr	r0, [pc, r0]
   17f88:	bl	145a0 <UnityPrint@@Base>
   17f8c:	ldr	r2, [sp]
   17f90:	mov	r0, #136	; 0x88
   17f94:	mov	r1, sl
   17f98:	cmp	r2, #1
   17f9c:	movwhi	r0, #128	; 0x80
   17fa0:	ldr	r0, [r1, r0]!
   17fa4:	adds	r0, r0, #1
   17fa8:	str	r0, [r1]
   17fac:	ldr	r0, [r1, #4]
   17fb0:	adc	r0, r0, #0
   17fb4:	cmp	r2, #2
   17fb8:	str	r0, [r1, #4]
   17fbc:	bcc	17fe8 <UnityAssertEqualMemory@@Base+0x2b8>
   17fc0:	ldrd	r0, [sl, #144]	; 0x90
   17fc4:	adds	r0, r0, #1
   17fc8:	adc	r1, r1, #0
   17fcc:	strd	r0, [sl, #144]	; 0x90
   17fd0:	ldr	r0, [pc, #200]	; 180a0 <UnityAssertEqualMemory@@Base+0x370>
   17fd4:	ldr	r0, [pc, r0]
   17fd8:	bl	145a0 <UnityPrint@@Base>
   17fdc:	ldr	r0, [sp]
   17fe0:	sub	r0, r0, r8
   17fe4:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   17fe8:	ldr	r0, [pc, #180]	; 180a4 <UnityAssertEqualMemory@@Base+0x374>
   17fec:	ldr	r0, [pc, r0]
   17ff0:	bl	145a0 <UnityPrint@@Base>
   17ff4:	mov	r0, r7
   17ff8:	bl	150d0 <UnityPrintNumberUnsigned@@Base>
   17ffc:	ldr	r0, [pc, #164]	; 180a8 <UnityAssertEqualMemory@@Base+0x378>
   18000:	ldr	r0, [pc, r0]
   18004:	bl	145a0 <UnityPrint@@Base>
   18008:	ldrb	r0, [r6]
   1800c:	mov	r1, #65	; 0x41
   18010:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   18014:	ldr	r0, [pc, #144]	; 180ac <UnityAssertEqualMemory@@Base+0x37c>
   18018:	ldr	r0, [pc, r0]
   1801c:	bl	145a0 <UnityPrint@@Base>
   18020:	ldrb	r0, [r4]
   18024:	mov	r1, #65	; 0x41
   18028:	bl	14d60 <UnityPrintNumberByStyle@@Base>
   1802c:	ldr	r0, [fp, #8]
   18030:	bl	15938 <UnityAssertBits@@Base+0x244>
   18034:	ldr	r1, [pc, #116]	; 180b0 <UnityAssertEqualMemory@@Base+0x380>
   18038:	mov	r0, #1
   1803c:	ldr	r1, [pc, r1]
   18040:	str	r0, [r1, #32]
   18044:	add	r0, r1, #40	; 0x28
   18048:	mov	r1, #1
   1804c:	bl	125fc <longjmp@plt>
   18050:	mov	r0, r2
   18054:	bl	15820 <UnityAssertBits@@Base+0x12c>
   18058:	ldr	r0, [pc, #84]	; 180b4 <UnityAssertEqualMemory@@Base+0x384>
   1805c:	ldr	r0, [pc, r0]
   18060:	bl	145a0 <UnityPrint@@Base>
   18064:	mov	r0, r8
   18068:	bl	15938 <UnityAssertBits@@Base+0x244>
   1806c:	mov	r0, #1
   18070:	mov	r1, #1
   18074:	str	r0, [r9, #32]
   18078:	add	r0, r9, #40	; 0x28
   1807c:	bl	125fc <longjmp@plt>
   18080:	andeq	r0, r0, r1
   18084:	andeq	r0, r0, r0
   18088:	andeq	r0, r0, r1
   1808c:	andeq	r0, r0, r0
   18090:	andeq	sl, r1, r4, lsl r2
   18094:	andeq	sl, r1, r8, lsl r2
   18098:			; <UNDEFINED> instruction: 0x000193bc
   1809c:	andeq	r9, r1, r8, asr r1
   180a0:	andeq	r9, r1, r8, asr #2
   180a4:	ldrdeq	r9, [r1], -r0
   180a8:	strdeq	r9, [r1], -r0
   180ac:	andeq	r9, r1, ip, lsr r1
   180b0:	strdeq	r9, [r1], -r4
   180b4:	andeq	r9, r1, r4, lsl r1
   180b8:	nop	{0}
   180bc:	nop	{0}

000180c0 <UnityFail@@Base>:
   180c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   180c4:	add	fp, sp, #24
   180c8:	vpush	{d8-d9}
   180cc:	ldr	r6, [pc, #732]	; 183b0 <UnityFail@@Base+0x2f0>
   180d0:	mov	r4, r0
   180d4:	ldr	r0, [pc, #728]	; 183b4 <UnityFail@@Base+0x2f4>
   180d8:	mov	r5, r1
   180dc:	ldr	r0, [pc, r0]
   180e0:	add	r6, pc, r6
   180e4:	mov	r2, r6
   180e8:	adds	r0, r0, #1
   180ec:	str	r0, [r6]
   180f0:	ldr	r0, [r6, #4]
   180f4:	adc	r0, r0, #0
   180f8:	str	r0, [r6, #4]
   180fc:	ldr	r7, [pc, #692]	; 183b8 <UnityFail@@Base+0x2f8>
   18100:	ldr	r7, [pc, r7]
   18104:	ldrd	r0, [r7, #32]
   18108:	orrs	r0, r1, r0
   1810c:	mov	r1, #16
   18110:	movwne	r1, #8
   18114:	ldr	r1, [r2, r1]!
   18118:	adds	r1, r1, #1
   1811c:	str	r1, [r2]
   18120:	ldr	r1, [r2, #4]
   18124:	adc	r1, r1, #0
   18128:	cmp	r0, #0
   1812c:	str	r1, [r2, #4]
   18130:	beq	1814c <UnityFail@@Base+0x8c>
   18134:	ldrd	r0, [r6, #24]
   18138:	adds	r0, r0, #1
   1813c:	adc	r1, r1, #0
   18140:	strd	r0, [r6, #24]
   18144:	vpop	{d8-d9}
   18148:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1814c:	ldr	r0, [pc, #616]	; 183bc <UnityFail@@Base+0x2fc>
   18150:	add	r1, pc, #584	; 0x248
   18154:	vld1.64	{d8-d9}, [r1 :128]
   18158:	add	r0, pc, r0
   1815c:	vld1.64	{d16-d17}, [r0 :128]
   18160:	vadd.i64	q8, q8, q4
   18164:	vst1.64	{d16-d17}, [r0 :128]
   18168:	ldr	r0, [r7]
   1816c:	bl	145a0 <UnityPrint@@Base>
   18170:	ldr	r8, [pc, #584]	; 183c0 <UnityFail@@Base+0x300>
   18174:	mov	r0, #58	; 0x3a
   18178:	add	r8, pc, r8
   1817c:	vld1.64	{d16-d17}, [r8 :128]
   18180:	vadd.i64	q8, q8, q4
   18184:	vst1.64	{d16-d17}, [r8 :128]
   18188:	ldr	r9, [pc, #564]	; 183c4 <UnityFail@@Base+0x304>
   1818c:	ldr	r9, [pc, r9]
   18190:	ldr	r1, [r9]
   18194:	bl	127a0 <putc@plt>
   18198:	mov	r0, r5
   1819c:	bl	14e70 <UnityPrintNumber@@Base>
   181a0:	vld1.64	{d16-d17}, [r8 :128]
   181a4:	ldr	r1, [r9]
   181a8:	mov	r0, #58	; 0x3a
   181ac:	vadd.i64	q8, q8, q4
   181b0:	vst1.64	{d16-d17}, [r8 :128]
   181b4:	bl	127a0 <putc@plt>
   181b8:	ldr	r0, [r7, #4]
   181bc:	bl	145a0 <UnityPrint@@Base>
   181c0:	vld1.64	{d16-d17}, [r8 :128]
   181c4:	ldr	r1, [r9]
   181c8:	mov	r0, #58	; 0x3a
   181cc:	vadd.i64	q8, q8, q4
   181d0:	vst1.64	{d16-d17}, [r8 :128]
   181d4:	bl	127a0 <putc@plt>
   181d8:	ldr	r0, [pc, #488]	; 183c8 <UnityFail@@Base+0x308>
   181dc:	add	r0, pc, r0
   181e0:	vld1.64	{d16-d17}, [r0 :128]
   181e4:	vadd.i64	q8, q8, q4
   181e8:	vst1.64	{d16-d17}, [r0 :128]
   181ec:	ldr	r0, [pc, #472]	; 183cc <UnityFail@@Base+0x30c>
   181f0:	ldr	r0, [pc, r0]
   181f4:	bl	145a0 <UnityPrint@@Base>
   181f8:	mov	r0, #40	; 0x28
   181fc:	cmp	r4, #0
   18200:	mov	r1, r6
   18204:	movwne	r0, #32
   18208:	ldr	r0, [r1, r0]!
   1820c:	adds	r0, r0, #1
   18210:	str	r0, [r1]
   18214:	ldr	r0, [r1, #4]
   18218:	adc	r0, r0, #0
   1821c:	cmp	r4, #0
   18220:	str	r0, [r1, #4]
   18224:	beq	18380 <UnityFail@@Base+0x2c0>
   18228:	add	r0, pc, #368	; 0x170
   1822c:	vld1.64	{d18-d19}, [r8 :128]
   18230:	ldr	r1, [r9]
   18234:	vld1.64	{d16-d17}, [r0 :128]
   18238:	mov	r0, #58	; 0x3a
   1823c:	vadd.i64	q8, q9, q8
   18240:	vst1.64	{d16-d17}, [r8 :128]
   18244:	bl	127a0 <putc@plt>
   18248:	ldr	r0, [r7, #8]
   1824c:	mov	r1, #56	; 0x38
   18250:	mov	r2, r6
   18254:	cmp	r0, #0
   18258:	movwne	r1, #48	; 0x30
   1825c:	ldr	r1, [r2, r1]!
   18260:	adds	r1, r1, #1
   18264:	str	r1, [r2]
   18268:	ldr	r1, [r2, #4]
   1826c:	adc	r1, r1, #0
   18270:	cmp	r0, #0
   18274:	str	r1, [r2, #4]
   18278:	beq	18304 <UnityFail@@Base+0x244>
   1827c:	ldr	r0, [pc, #332]	; 183d0 <UnityFail@@Base+0x310>
   18280:	ldr	r0, [pc, r0]
   18284:	bl	145a0 <UnityPrint@@Base>
   18288:	ldr	r0, [r7, #8]
   1828c:	bl	145a0 <UnityPrint@@Base>
   18290:	ldr	r0, [r7, #12]
   18294:	mov	r1, #72	; 0x48
   18298:	mov	r2, r6
   1829c:	cmp	r0, #0
   182a0:	movwne	r1, #64	; 0x40
   182a4:	ldr	r1, [r2, r1]!
   182a8:	adds	r1, r1, #1
   182ac:	str	r1, [r2]
   182b0:	ldr	r1, [r2, #4]
   182b4:	adc	r1, r1, #0
   182b8:	cmp	r0, #0
   182bc:	str	r1, [r2, #4]
   182c0:	beq	182e8 <UnityFail@@Base+0x228>
   182c4:	ldrd	r0, [r6, #80]	; 0x50
   182c8:	adds	r0, r0, #1
   182cc:	adc	r1, r1, #0
   182d0:	strd	r0, [r6, #80]	; 0x50
   182d4:	ldr	r0, [pc, #248]	; 183d4 <UnityFail@@Base+0x314>
   182d8:	ldr	r0, [pc, r0]
   182dc:	bl	145a0 <UnityPrint@@Base>
   182e0:	ldr	r0, [r7, #12]
   182e4:	bl	145a0 <UnityPrint@@Base>
   182e8:	ldrd	r0, [r6, #88]	; 0x58
   182ec:	adds	r0, r0, #1
   182f0:	adc	r1, r1, #0
   182f4:	strd	r0, [r6, #88]	; 0x58
   182f8:	ldr	r0, [pc, #216]	; 183d8 <UnityFail@@Base+0x318>
   182fc:	ldr	r0, [pc, r0]
   18300:	bl	145a0 <UnityPrint@@Base>
   18304:	ldrb	r0, [r4]
   18308:	mov	r1, #104	; 0x68
   1830c:	mov	r2, r6
   18310:	cmp	r0, #32
   18314:	movwne	r1, #96	; 0x60
   18318:	ldr	r1, [r2, r1]!
   1831c:	adds	r1, r1, #1
   18320:	str	r1, [r2]
   18324:	ldr	r1, [r2, #4]
   18328:	adc	r1, r1, #0
   1832c:	cmp	r0, #32
   18330:	str	r1, [r2, #4]
   18334:	beq	18368 <UnityFail@@Base+0x2a8>
   18338:	add	r0, pc, #96	; 0x60
   1833c:	vld1.64	{d18-d19}, [r8 :128]
   18340:	vld1.64	{d16-d17}, [r0 :128]
   18344:	ldrd	r0, [r6, #112]	; 0x70
   18348:	adds	r0, r0, #1
   1834c:	vadd.i64	q8, q9, q8
   18350:	adc	r1, r1, #0
   18354:	vst1.64	{d16-d17}, [r8 :128]
   18358:	strd	r0, [r6, #112]	; 0x70
   1835c:	ldr	r1, [r9]
   18360:	mov	r0, #32
   18364:	bl	127a0 <putc@plt>
   18368:	ldrd	r0, [r6, #120]	; 0x78
   1836c:	adds	r0, r0, #1
   18370:	adc	r1, r1, #0
   18374:	strd	r0, [r6, #120]	; 0x78
   18378:	mov	r0, r4
   1837c:	bl	145a0 <UnityPrint@@Base>
   18380:	mov	r0, #1
   18384:	mov	r1, #1
   18388:	str	r0, [r7, #32]
   1838c:	add	r0, r7, #40	; 0x28
   18390:	bl	125fc <longjmp@plt>
   18394:	nop	{0}
   18398:	nop	{0}
   1839c:	nop	{0}
   183a0:	andeq	r0, r0, r1
   183a4:	andeq	r0, r0, r0
   183a8:	andeq	r0, r0, r1
   183ac:	andeq	r0, r0, r0
   183b0:	andeq	r9, r1, r8, lsr pc
   183b4:	andeq	r9, r1, ip, lsr pc
   183b8:	andeq	r9, r1, r0, lsr r0
   183bc:	andeq	r9, r1, r0, ror #11
   183c0:	andeq	r9, r1, r0, lsr #5
   183c4:			; <UNDEFINED> instruction: 0x00018fbc
   183c8:	andeq	r9, r1, ip, ror #9
   183cc:	andeq	r8, r1, r4, lsr pc
   183d0:	ldrdeq	r8, [r1], -r0
   183d4:	andeq	r8, r1, r8, lsr #28
   183d8:	andeq	r8, r1, r4, ror #28
   183dc:	nop	{0}

000183e0 <UnityIgnore@@Base>:
   183e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   183e4:	add	fp, sp, #24
   183e8:	vpush	{d8-d9}
   183ec:	ldr	r7, [pc, #444]	; 185b0 <UnityIgnore@@Base+0x1d0>
   183f0:	mov	r4, r0
   183f4:	ldr	r0, [pc, #440]	; 185b4 <UnityIgnore@@Base+0x1d4>
   183f8:	mov	r5, r1
   183fc:	ldr	r0, [pc, r0]
   18400:	add	r7, pc, r7
   18404:	mov	r2, r7
   18408:	adds	r0, r0, #1
   1840c:	str	r0, [r7]
   18410:	ldr	r0, [r7, #4]
   18414:	adc	r0, r0, #0
   18418:	str	r0, [r7, #4]
   1841c:	ldr	r6, [pc, #404]	; 185b8 <UnityIgnore@@Base+0x1d8>
   18420:	ldr	r6, [pc, r6]
   18424:	ldrd	r0, [r6, #32]
   18428:	orrs	r0, r1, r0
   1842c:	mov	r1, #16
   18430:	movwne	r1, #8
   18434:	ldr	r1, [r2, r1]!
   18438:	adds	r1, r1, #1
   1843c:	str	r1, [r2]
   18440:	ldr	r1, [r2, #4]
   18444:	adc	r1, r1, #0
   18448:	cmp	r0, #0
   1844c:	str	r1, [r2, #4]
   18450:	beq	1846c <UnityIgnore@@Base+0x8c>
   18454:	ldrd	r0, [r7, #24]
   18458:	adds	r0, r0, #1
   1845c:	adc	r1, r1, #0
   18460:	strd	r0, [r7, #24]
   18464:	vpop	{d8-d9}
   18468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1846c:	ldr	r0, [pc, #328]	; 185bc <UnityIgnore@@Base+0x1dc>
   18470:	add	r1, pc, #296	; 0x128
   18474:	vld1.64	{d8-d9}, [r1 :128]
   18478:	add	r0, pc, r0
   1847c:	vld1.64	{d16-d17}, [r0 :128]
   18480:	vadd.i64	q8, q8, q4
   18484:	vst1.64	{d16-d17}, [r0 :128]
   18488:	ldr	r0, [r6]
   1848c:	bl	145a0 <UnityPrint@@Base>
   18490:	ldr	r8, [pc, #296]	; 185c0 <UnityIgnore@@Base+0x1e0>
   18494:	mov	r0, #58	; 0x3a
   18498:	add	r8, pc, r8
   1849c:	vld1.64	{d16-d17}, [r8 :128]
   184a0:	vadd.i64	q8, q8, q4
   184a4:	vst1.64	{d16-d17}, [r8 :128]
   184a8:	ldr	r9, [pc, #276]	; 185c4 <UnityIgnore@@Base+0x1e4>
   184ac:	ldr	r9, [pc, r9]
   184b0:	ldr	r1, [r9]
   184b4:	bl	127a0 <putc@plt>
   184b8:	mov	r0, r5
   184bc:	bl	14e70 <UnityPrintNumber@@Base>
   184c0:	vld1.64	{d16-d17}, [r8 :128]
   184c4:	ldr	r1, [r9]
   184c8:	mov	r0, #58	; 0x3a
   184cc:	vadd.i64	q8, q8, q4
   184d0:	vst1.64	{d16-d17}, [r8 :128]
   184d4:	bl	127a0 <putc@plt>
   184d8:	ldr	r0, [r6, #4]
   184dc:	bl	145a0 <UnityPrint@@Base>
   184e0:	vld1.64	{d16-d17}, [r8 :128]
   184e4:	ldr	r1, [r9]
   184e8:	mov	r0, #58	; 0x3a
   184ec:	vadd.i64	q8, q8, q4
   184f0:	vst1.64	{d16-d17}, [r8 :128]
   184f4:	bl	127a0 <putc@plt>
   184f8:	ldr	r0, [pc, #200]	; 185c8 <UnityIgnore@@Base+0x1e8>
   184fc:	ldr	r0, [pc, r0]
   18500:	bl	145a0 <UnityPrint@@Base>
   18504:	mov	r0, #40	; 0x28
   18508:	cmp	r4, #0
   1850c:	mov	r1, r7
   18510:	movwne	r0, #32
   18514:	ldr	r0, [r1, r0]!
   18518:	adds	r0, r0, #1
   1851c:	str	r0, [r1]
   18520:	ldr	r0, [r1, #4]
   18524:	adc	r0, r0, #0
   18528:	cmp	r4, #0
   1852c:	str	r0, [r1, #4]
   18530:	beq	18584 <UnityIgnore@@Base+0x1a4>
   18534:	add	r0, pc, #100	; 0x64
   18538:	vld1.64	{d16-d17}, [r8 :128]
   1853c:	vld1.64	{d8-d9}, [r0 :128]
   18540:	ldrd	r0, [r7, #48]	; 0x30
   18544:	adds	r0, r0, #1
   18548:	vadd.i64	q8, q8, q4
   1854c:	adc	r1, r1, #0
   18550:	vst1.64	{d16-d17}, [r8 :128]
   18554:	strd	r0, [r7, #48]	; 0x30
   18558:	ldr	r1, [r9]
   1855c:	mov	r0, #58	; 0x3a
   18560:	bl	127a0 <putc@plt>
   18564:	vld1.64	{d16-d17}, [r8 :128]
   18568:	ldr	r1, [r9]
   1856c:	mov	r0, #32
   18570:	vadd.i64	q8, q8, q4
   18574:	vst1.64	{d16-d17}, [r8 :128]
   18578:	bl	127a0 <putc@plt>
   1857c:	mov	r0, r4
   18580:	bl	145a0 <UnityPrint@@Base>
   18584:	mov	r0, #1
   18588:	mov	r1, #1
   1858c:	str	r0, [r6, #36]	; 0x24
   18590:	add	r0, r6, #40	; 0x28
   18594:	bl	125fc <longjmp@plt>
   18598:	nop	{0}
   1859c:	nop	{0}
   185a0:	andeq	r0, r0, r1
   185a4:	andeq	r0, r0, r0
   185a8:	andeq	r0, r0, r1
   185ac:	andeq	r0, r0, r0
   185b0:	muleq	r1, r8, ip
   185b4:	muleq	r1, ip, ip
   185b8:	andeq	r8, r1, r0, lsl sp
   185bc:	andeq	r9, r1, r0, asr #5
   185c0:	andeq	r8, r1, r0, lsl #31
   185c4:	muleq	r1, ip, ip
   185c8:	andeq	r8, r1, r8, lsl #25
   185cc:	nop	{0}

000185d0 <setUp@@Base>:
   185d0:	ldr	r0, [pc, #40]	; 18600 <setUp@@Base+0x30>
   185d4:	add	r1, pc, #20
   185d8:	vld1.64	{d16-d17}, [r1 :128]
   185dc:	add	r0, pc, r0
   185e0:	vld1.64	{d18-d19}, [r0 :128]
   185e4:	vadd.i64	q8, q9, q8
   185e8:	vst1.64	{d16-d17}, [r0 :128]
   185ec:	bx	lr
   185f0:	andeq	r0, r0, r1
   185f4:	andeq	r0, r0, r0
   185f8:	andeq	r0, r0, r1
   185fc:	andeq	r0, r0, r0
   18600:	strdeq	r9, [r1], -ip
   18604:	nop	{0}
   18608:	nop	{0}
   1860c:	nop	{0}

00018610 <tearDown@@Base>:
   18610:	ldr	r0, [pc, #40]	; 18640 <tearDown@@Base+0x30>
   18614:	add	r1, pc, #20
   18618:	vld1.64	{d16-d17}, [r1 :128]
   1861c:	add	r0, pc, r0
   18620:	vld1.64	{d18-d19}, [r0 :128]
   18624:	vadd.i64	q8, q9, q8
   18628:	vst1.64	{d16-d17}, [r0 :128]
   1862c:	bx	lr
   18630:	andeq	r0, r0, r1
   18634:	andeq	r0, r0, r0
   18638:	andeq	r0, r0, r1
   1863c:	andeq	r0, r0, r0
   18640:	andeq	r9, r1, ip, asr #21

00018644 <UnityDefaultTestRun@@Base>:
   18644:	push	{r4, r5, r6, r7, fp, lr}
   18648:	add	fp, sp, #16
   1864c:	ldr	r7, [pc, #260]	; 18758 <UnityDefaultTestRun@@Base+0x114>
   18650:	mov	r4, r0
   18654:	mov	r0, #0
   18658:	ldr	r7, [pc, r7]
   1865c:	str	r1, [r7, #4]
   18660:	str	r2, [r7, #16]
   18664:	str	r0, [r7, #8]
   18668:	str	r0, [r7, #12]
   1866c:	add	r5, r7, #40	; 0x28
   18670:	ldr	r6, [pc, #228]	; 1875c <UnityDefaultTestRun@@Base+0x118>
   18674:	ldr	r0, [pc, #228]	; 18760 <UnityDefaultTestRun@@Base+0x11c>
   18678:	ldr	r0, [pc, r0]
   1867c:	add	r6, pc, r6
   18680:	adds	r0, r0, #1
   18684:	str	r0, [r6]
   18688:	ldr	r0, [r6, #4]
   1868c:	adc	r0, r0, #0
   18690:	str	r0, [r6, #4]
   18694:	ldr	r0, [r7, #20]
   18698:	add	r0, r0, #1
   1869c:	str	r0, [r7, #20]
   186a0:	mov	r0, r5
   186a4:	bl	12614 <_setjmp@plt>
   186a8:	mov	r1, #16
   186ac:	cmp	r0, #0
   186b0:	mov	r2, r6
   186b4:	movweq	r1, #8
   186b8:	ldr	r1, [r2, r1]!
   186bc:	adds	r1, r1, #1
   186c0:	str	r1, [r2]
   186c4:	ldr	r1, [r2, #4]
   186c8:	adc	r1, r1, #0
   186cc:	cmp	r0, #0
   186d0:	str	r1, [r2, #4]
   186d4:	bne	186f0 <UnityDefaultTestRun@@Base+0xac>
   186d8:	ldrd	r0, [r6, #24]
   186dc:	adds	r0, r0, #1
   186e0:	adc	r1, r1, #0
   186e4:	strd	r0, [r6, #24]
   186e8:	bl	185d0 <setUp@@Base>
   186ec:	blx	r4
   186f0:	mov	r0, r5
   186f4:	bl	12614 <_setjmp@plt>
   186f8:	ldr	r1, [r7, #36]	; 0x24
   186fc:	mov	r2, r6
   18700:	orrs	r0, r1, r0
   18704:	mov	r1, #40	; 0x28
   18708:	movwne	r1, #32
   1870c:	ldr	r1, [r2, r1]!
   18710:	adds	r1, r1, #1
   18714:	str	r1, [r2]
   18718:	ldr	r1, [r2, #4]
   1871c:	adc	r1, r1, #0
   18720:	cmp	r0, #0
   18724:	str	r1, [r2, #4]
   18728:	bne	18740 <UnityDefaultTestRun@@Base+0xfc>
   1872c:	ldrd	r0, [r6, #48]	; 0x30
   18730:	adds	r0, r0, #1
   18734:	adc	r1, r1, #0
   18738:	strd	r0, [r6, #48]	; 0x30
   1873c:	bl	18610 <tearDown@@Base>
   18740:	ldrd	r0, [r6, #56]	; 0x38
   18744:	adds	r0, r0, #1
   18748:	adc	r1, r1, #0
   1874c:	strd	r0, [r6, #56]	; 0x38
   18750:	bl	154e0 <UnityConcludeTest@@Base>
   18754:	pop	{r4, r5, r6, r7, fp, pc}
   18758:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1875c:	andeq	r9, r1, ip, ror sl
   18760:	andeq	r9, r1, r0, lsl #21
   18764:	nop	{0}
   18768:	nop	{0}
   1876c:	nop	{0}

00018770 <UnityBegin@@Base>:
   18770:	ldr	r1, [pc, #88]	; 187d0 <UnityBegin@@Base+0x60>
   18774:	add	r2, pc, #68	; 0x44
   18778:	vmov.i32	q10, #0	; 0x00000000
   1877c:	vld1.64	{d16-d17}, [r2 :128]
   18780:	add	r1, pc, r1
   18784:	vld1.64	{d18-d19}, [r1 :128]
   18788:	ldr	r2, [pc, #68]	; 187d4 <UnityBegin@@Base+0x64>
   1878c:	ldr	r2, [pc, r2]
   18790:	vadd.i64	q8, q9, q8
   18794:	vst1.64	{d16-d17}, [r1 :128]
   18798:	str	r0, [r2]
   1879c:	mov	r0, #0
   187a0:	str	r0, [r2, #36]	; 0x24
   187a4:	add	r0, r2, #20
   187a8:	vst1.32	{d20-d21}, [r0]
   187ac:	add	r0, r2, #4
   187b0:	vst1.32	{d20-d21}, [r0]
   187b4:	bx	lr
   187b8:	nop	{0}
   187bc:	nop	{0}
   187c0:	andeq	r0, r0, r1
   187c4:	andeq	r0, r0, r0
   187c8:	andeq	r0, r0, r1
   187cc:	andeq	r0, r0, r0
   187d0:			; <UNDEFINED> instruction: 0x000199b8
   187d4:	andeq	r8, r1, r4, lsr #19
   187d8:	nop	{0}
   187dc:	nop	{0}

000187e0 <UnityEnd@@Base>:
   187e0:	push	{r4, r5, r6, r7, fp, lr}
   187e4:	add	fp, sp, #16
   187e8:	vpush	{d8-d9}
   187ec:	ldr	r4, [pc, #444]	; 189b0 <UnityEnd@@Base+0x1d0>
   187f0:	add	r0, pc, #424	; 0x1a8
   187f4:	vld1.64	{d8-d9}, [r0 :128]
   187f8:	add	r4, pc, r4
   187fc:	vld1.64	{d16-d17}, [r4 :128]
   18800:	ldr	r5, [pc, #428]	; 189b4 <UnityEnd@@Base+0x1d4>
   18804:	ldr	r0, [pc, #428]	; 189b8 <UnityEnd@@Base+0x1d8>
   18808:	ldr	r0, [pc, r0]
   1880c:	add	r5, pc, r5
   18810:	vadd.i64	q8, q8, q4
   18814:	vst1.64	{d16-d17}, [r4 :128]
   18818:	adds	r0, r0, #1
   1881c:	str	r0, [r5]
   18820:	ldr	r0, [r5, #4]
   18824:	adc	r0, r0, #0
   18828:	str	r0, [r5, #4]
   1882c:	mov	r0, #10
   18830:	ldr	r6, [pc, #388]	; 189bc <UnityEnd@@Base+0x1dc>
   18834:	ldr	r6, [pc, r6]
   18838:	ldr	r1, [r6]
   1883c:	bl	127a0 <putc@plt>
   18840:	ldr	r0, [pc, #376]	; 189c0 <UnityEnd@@Base+0x1e0>
   18844:	ldr	r0, [pc, r0]
   18848:	bl	145a0 <UnityPrint@@Base>
   1884c:	vld1.64	{d16-d17}, [r4 :128]
   18850:	ldr	r1, [r6]
   18854:	mov	r0, #10
   18858:	vadd.i64	q8, q8, q4
   1885c:	vst1.64	{d16-d17}, [r4 :128]
   18860:	bl	127a0 <putc@plt>
   18864:	ldr	r7, [pc, #344]	; 189c4 <UnityEnd@@Base+0x1e4>
   18868:	ldr	r7, [pc, r7]
   1886c:	ldr	r0, [r7, #20]
   18870:	bl	14e70 <UnityPrintNumber@@Base>
   18874:	ldr	r0, [pc, #332]	; 189c8 <UnityEnd@@Base+0x1e8>
   18878:	ldr	r0, [pc, r0]
   1887c:	bl	145a0 <UnityPrint@@Base>
   18880:	ldr	r0, [r7, #24]
   18884:	bl	14e70 <UnityPrintNumber@@Base>
   18888:	ldr	r0, [pc, #316]	; 189cc <UnityEnd@@Base+0x1ec>
   1888c:	ldr	r0, [pc, r0]
   18890:	bl	145a0 <UnityPrint@@Base>
   18894:	ldr	r0, [r7, #28]
   18898:	bl	14e70 <UnityPrintNumber@@Base>
   1889c:	ldr	r0, [pc, #300]	; 189d0 <UnityEnd@@Base+0x1f0>
   188a0:	ldr	r0, [pc, r0]
   188a4:	bl	145a0 <UnityPrint@@Base>
   188a8:	vld1.64	{d16-d17}, [r4 :128]
   188ac:	ldr	r1, [r6]
   188b0:	mov	r0, #10
   188b4:	vadd.i64	q8, q8, q4
   188b8:	vst1.64	{d16-d17}, [r4 :128]
   188bc:	bl	127a0 <putc@plt>
   188c0:	ldr	r0, [r7, #24]
   188c4:	mov	r1, #16
   188c8:	mov	r2, r5
   188cc:	cmp	r0, #0
   188d0:	movweq	r1, #8
   188d4:	ldr	r1, [r2, r1]!
   188d8:	adds	r1, r1, #1
   188dc:	str	r1, [r2]
   188e0:	ldr	r1, [r2, #4]
   188e4:	adc	r1, r1, #0
   188e8:	cmp	r0, #0
   188ec:	str	r1, [r2, #4]
   188f0:	beq	1892c <UnityEnd@@Base+0x14c>
   188f4:	ldr	r0, [pc, #224]	; 189dc <UnityEnd@@Base+0x1fc>
   188f8:	add	r1, pc, #160	; 0xa0
   188fc:	ldrd	r2, [r5, #32]
   18900:	vld1.64	{d16-d17}, [r1 :128]
   18904:	add	r0, pc, r0
   18908:	adds	r2, r2, #1
   1890c:	vld1.64	{d18-d19}, [r0 :128]
   18910:	adc	r3, r3, #0
   18914:	strd	r2, [r5, #32]
   18918:	vadd.i64	q8, q9, q8
   1891c:	vst1.64	{d16-d17}, [r0 :128]
   18920:	ldr	r0, [pc, #184]	; 189e0 <UnityEnd@@Base+0x200>
   18924:	ldr	r0, [pc, r0]
   18928:	b	18960 <UnityEnd@@Base+0x180>
   1892c:	ldr	r0, [pc, #160]	; 189d4 <UnityEnd@@Base+0x1f4>
   18930:	add	r1, pc, #104	; 0x68
   18934:	ldrd	r2, [r5, #24]
   18938:	vld1.64	{d16-d17}, [r1 :128]
   1893c:	add	r0, pc, r0
   18940:	adds	r2, r2, #1
   18944:	vld1.64	{d18-d19}, [r0 :128]
   18948:	adc	r3, r3, #0
   1894c:	strd	r2, [r5, #24]
   18950:	vadd.i64	q8, q9, q8
   18954:	vst1.64	{d16-d17}, [r0 :128]
   18958:	ldr	r0, [pc, #120]	; 189d8 <UnityEnd@@Base+0x1f8>
   1895c:	ldr	r0, [pc, r0]
   18960:	bl	145a0 <UnityPrint@@Base>
   18964:	add	r0, pc, #52	; 0x34
   18968:	vld1.64	{d18-d19}, [r4 :128]
   1896c:	vld1.64	{d16-d17}, [r0 :128]
   18970:	ldrd	r0, [r5, #40]	; 0x28
   18974:	adds	r0, r0, #1
   18978:	vadd.i64	q8, q9, q8
   1897c:	adc	r1, r1, #0
   18980:	vst1.64	{d16-d17}, [r4 :128]
   18984:	strd	r0, [r5, #40]	; 0x28
   18988:	ldr	r1, [r6]
   1898c:	mov	r0, #10
   18990:	bl	127a0 <putc@plt>
   18994:	ldr	r0, [r7, #24]
   18998:	vpop	{d8-d9}
   1899c:	pop	{r4, r5, r6, r7, fp, pc}
   189a0:	andeq	r0, r0, r1
   189a4:	andeq	r0, r0, r0
   189a8:	andeq	r0, r0, r1
   189ac:	andeq	r0, r0, r0
   189b0:	andeq	r8, r1, r0, lsr #24
   189b4:	andeq	r9, r1, ip, lsr r9
   189b8:	andeq	r9, r1, r0, asr #18
   189bc:	andeq	r8, r1, r4, lsl r9
   189c0:	ldrdeq	r8, [r1], -r4
   189c4:	andeq	r8, r1, r8, asr #17
   189c8:	andeq	r8, r1, r0, ror r8
   189cc:	andeq	r8, r1, r8, asr r8
   189d0:	andeq	r8, r1, r8, lsl r8
   189d4:	muleq	r1, ip, sp
   189d8:	andeq	r8, r1, r4, ror #14
   189dc:	andeq	r8, r1, r4, asr #27
   189e0:	andeq	r8, r1, r0, lsl #16
   189e4:	ldr	r0, [r0]
   189e8:	cmn	r0, #1
   189ec:	ldrne	r0, [r1, r0, lsl #2]
   189f0:	cmpne	r0, #0
   189f4:	bne	189fc <UnityEnd@@Base+0x21c>
   189f8:	bx	lr
   189fc:	ldrd	r2, [r0]
   18a00:	adds	r2, r2, #1
   18a04:	adc	r3, r3, #0
   18a08:	strd	r2, [r0]
   18a0c:	bx	lr
   18a10:	push	{r4, r5, r6, lr}
   18a14:	sub	sp, sp, #8
   18a18:	ldr	r0, [pc, #112]	; 18a90 <UnityEnd@@Base+0x2b0>
   18a1c:	ldr	r1, [pc, #112]	; 18a94 <UnityEnd@@Base+0x2b4>
   18a20:	movw	r2, #878	; 0x36e
   18a24:	movt	r2, #49498	; 0xc15a
   18a28:	add	r0, pc, r0
   18a2c:	add	r1, pc, r1
   18a30:	bl	1b72c <next@@Base+0x196c>
   18a34:	ldr	r0, [pc, #92]	; 18a98 <UnityEnd@@Base+0x2b8>
   18a38:	ldr	r6, [pc, #92]	; 18a9c <UnityEnd@@Base+0x2bc>
   18a3c:	mov	r5, #0
   18a40:	add	r0, pc, r0
   18a44:	add	r6, pc, r6
   18a48:	add	r4, r0, #4
   18a4c:	mov	r3, r6
   18a50:	ldr	r0, [r3, r5]!
   18a54:	ldr	r1, [r3, #16]
   18a58:	str	r1, [sp]
   18a5c:	ldmib	r3, {r1, r2}
   18a60:	ldrb	r3, [r3, #12]
   18a64:	bl	1be90 <next@@Base+0x20d0>
   18a68:	ldrd	r0, [r4, #-4]
   18a6c:	bl	1c744 <next@@Base+0x2984>
   18a70:	add	r5, r5, #20
   18a74:	add	r4, r4, #8
   18a78:	cmp	r5, #700	; 0x2bc
   18a7c:	bne	18a4c <UnityEnd@@Base+0x26c>
   18a80:	bl	1cec0 <next@@Base+0x3100>
   18a84:	add	sp, sp, #8
   18a88:	pop	{r4, r5, r6, lr}
   18a8c:	b	1dc2c <next@@Base+0x3e6c>
   18a90:	andeq	r6, r0, r0, asr #5
   18a94:	andeq	r5, r0, r9, lsr #27
   18a98:	andeq	r7, r1, r8, ror #30
   18a9c:	andeq	r7, r1, r4, lsr #25
   18aa0:	push	{r4, r5, r6, r7, fp, lr}
   18aa4:	vpush	{d8-d9}
   18aa8:	bl	18a10 <UnityEnd@@Base+0x230>
   18aac:	ldr	r0, [pc, #1132]	; 18f20 <UnityEnd@@Base+0x740>
   18ab0:	mov	r1, #0
   18ab4:	mov	r2, #152	; 0x98
   18ab8:	mov	r4, #0
   18abc:	add	r0, pc, r0
   18ac0:	bl	12740 <memset@plt>
   18ac4:	ldr	r0, [pc, #1112]	; 18f24 <UnityEnd@@Base+0x744>
   18ac8:	vmov.i32	q4, #0	; 0x00000000
   18acc:	mov	r5, #64	; 0x40
   18ad0:	mov	r2, #168	; 0xa8
   18ad4:	add	r0, pc, r0
   18ad8:	vst1.64	{d8-d9}, [r0 :128]
   18adc:	ldr	r0, [pc, #1092]	; 18f28 <UnityEnd@@Base+0x748>
   18ae0:	add	r0, pc, r0
   18ae4:	add	r1, r0, #48	; 0x30
   18ae8:	vst1.64	{d8-d9}, [r1 :128]
   18aec:	add	r1, r0, #32
   18af0:	vst1.64	{d8-d9}, [r1 :128]
   18af4:	add	r1, r0, #16
   18af8:	vst1.64	{d8-d9}, [r0 :128], r5
   18afc:	vst1.64	{d8-d9}, [r1 :128]
   18b00:	vst1.64	{d8-d9}, [r0 :128]
   18b04:	mov	r1, #0
   18b08:	ldr	r0, [pc, #1052]	; 18f2c <UnityEnd@@Base+0x74c>
   18b0c:	add	r0, pc, r0
   18b10:	bl	12740 <memset@plt>
   18b14:	ldr	r1, [pc, #1044]	; 18f30 <UnityEnd@@Base+0x750>
   18b18:	mov	r6, #32
   18b1c:	add	r1, pc, r1
   18b20:	add	r0, r1, #64	; 0x40
   18b24:	vst1.64	{d8-d9}, [r0 :128]
   18b28:	add	r0, r1, #48	; 0x30
   18b2c:	vst1.64	{d8-d9}, [r0 :128]
   18b30:	add	r0, r1, #32
   18b34:	vst1.64	{d8-d9}, [r0 :128]
   18b38:	add	r0, r1, #16
   18b3c:	vst1.64	{d8-d9}, [r0 :128]
   18b40:	ldr	r0, [pc, #1004]	; 18f34 <UnityEnd@@Base+0x754>
   18b44:	add	r0, pc, r0
   18b48:	add	r2, r0, #96	; 0x60
   18b4c:	str	r4, [r0, #112]	; 0x70
   18b50:	vst1.64	{d8-d9}, [r2 :128]
   18b54:	add	r2, r0, #80	; 0x50
   18b58:	vst1.64	{d8-d9}, [r2 :128]
   18b5c:	add	r2, r0, #64	; 0x40
   18b60:	vst1.64	{d8-d9}, [r2 :128]
   18b64:	add	r2, r0, #48	; 0x30
   18b68:	vst1.64	{d8-d9}, [r2 :128]
   18b6c:	add	r2, r0, #32
   18b70:	vst1.64	{d8-d9}, [r2 :128]
   18b74:	add	r2, r0, #16
   18b78:	vst1.64	{d8-d9}, [r2 :128]
   18b7c:	ldr	r3, [pc, #948]	; 18f38 <UnityEnd@@Base+0x758>
   18b80:	str	r4, [r1, #80]	; 0x50
   18b84:	add	r3, pc, r3
   18b88:	add	r2, r3, #48	; 0x30
   18b8c:	str	r4, [r3, #64]	; 0x40
   18b90:	vst1.64	{d8-d9}, [r2 :128]
   18b94:	add	r2, r3, #32
   18b98:	vst1.64	{d8-d9}, [r2 :128]
   18b9c:	add	r2, r3, #16
   18ba0:	vst1.64	{d8-d9}, [r2 :128]
   18ba4:	mov	r2, #116	; 0x74
   18ba8:	vst1.64	{d8-d9}, [r0 :128], r2
   18bac:	mov	r2, #68	; 0x44
   18bb0:	str	r4, [r0]
   18bb4:	mov	r0, #84	; 0x54
   18bb8:	vst1.64	{d8-d9}, [r3 :128], r2
   18bbc:	vst1.64	{d8-d9}, [r1 :128], r0
   18bc0:	str	r4, [r3]
   18bc4:	str	r4, [r1]
   18bc8:	ldr	r1, [pc, #876]	; 18f3c <UnityEnd@@Base+0x75c>
   18bcc:	add	r1, pc, r1
   18bd0:	add	r3, r1, #80	; 0x50
   18bd4:	str	r4, [r1, #96]	; 0x60
   18bd8:	vst1.64	{d8-d9}, [r3 :128]
   18bdc:	add	r3, r1, #64	; 0x40
   18be0:	vst1.64	{d8-d9}, [r3 :128]
   18be4:	add	r3, r1, #48	; 0x30
   18be8:	vst1.64	{d8-d9}, [r3 :128]
   18bec:	add	r3, r1, #32
   18bf0:	vst1.64	{d8-d9}, [r3 :128]
   18bf4:	add	r3, r1, #16
   18bf8:	vst1.64	{d8-d9}, [r3 :128]
   18bfc:	mov	r3, #100	; 0x64
   18c00:	vst1.64	{d8-d9}, [r1 :128], r3
   18c04:	str	r4, [r1]
   18c08:	ldr	r1, [pc, #816]	; 18f40 <UnityEnd@@Base+0x760>
   18c0c:	add	r1, pc, r1
   18c10:	vst1.64	{d8-d9}, [r1 :128]
   18c14:	ldr	r1, [pc, #808]	; 18f44 <UnityEnd@@Base+0x764>
   18c18:	add	r1, pc, r1
   18c1c:	vst1.64	{d8-d9}, [r1 :128]
   18c20:	ldr	r1, [pc, #800]	; 18f48 <UnityEnd@@Base+0x768>
   18c24:	add	r1, pc, r1
   18c28:	add	r3, r1, #48	; 0x30
   18c2c:	str	r4, [r1, #64]	; 0x40
   18c30:	vst1.64	{d8-d9}, [r3 :128]
   18c34:	add	r3, r1, #32
   18c38:	vst1.64	{d8-d9}, [r3 :128]
   18c3c:	add	r3, r1, #16
   18c40:	vst1.64	{d8-d9}, [r1 :128], r2
   18c44:	vst1.64	{d8-d9}, [r3 :128]
   18c48:	str	r4, [r1]
   18c4c:	ldr	r1, [pc, #760]	; 18f4c <UnityEnd@@Base+0x76c>
   18c50:	add	r1, pc, r1
   18c54:	vst1.64	{d8-d9}, [r1 :128]
   18c58:	ldr	r1, [pc, #752]	; 18f50 <UnityEnd@@Base+0x770>
   18c5c:	add	r1, pc, r1
   18c60:	add	r2, r1, #16
   18c64:	vst1.64	{d8-d9}, [r1 :128], r6
   18c68:	vst1.64	{d8-d9}, [r2 :128]
   18c6c:	vst1.64	{d8-d9}, [r1 :128]
   18c70:	ldr	r1, [pc, #732]	; 18f54 <UnityEnd@@Base+0x774>
   18c74:	add	r1, pc, r1
   18c78:	vst1.64	{d8-d9}, [r1 :128]
   18c7c:	ldr	r1, [pc, #724]	; 18f58 <UnityEnd@@Base+0x778>
   18c80:	add	r1, pc, r1
   18c84:	add	r2, r1, #64	; 0x40
   18c88:	str	r4, [r1, #80]	; 0x50
   18c8c:	vst1.64	{d8-d9}, [r2 :128]
   18c90:	add	r2, r1, #48	; 0x30
   18c94:	vst1.64	{d8-d9}, [r2 :128]
   18c98:	add	r2, r1, #32
   18c9c:	vst1.64	{d8-d9}, [r2 :128]
   18ca0:	add	r2, r1, #16
   18ca4:	vst1.64	{d8-d9}, [r1 :128], r0
   18ca8:	vst1.64	{d8-d9}, [r2 :128]
   18cac:	str	r4, [r1]
   18cb0:	mov	r2, #280	; 0x118
   18cb4:	ldr	r0, [pc, #672]	; 18f5c <UnityEnd@@Base+0x77c>
   18cb8:	add	r0, pc, r0
   18cbc:	add	r1, r0, #16
   18cc0:	vst1.64	{d8-d9}, [r0 :128], r6
   18cc4:	vst1.64	{d8-d9}, [r1 :128]
   18cc8:	vst1.64	{d8-d9}, [r0 :128]
   18ccc:	mov	r1, #0
   18cd0:	ldr	r0, [pc, #648]	; 18f60 <UnityEnd@@Base+0x780>
   18cd4:	add	r0, pc, r0
   18cd8:	bl	12740 <memset@plt>
   18cdc:	ldr	r0, [pc, #640]	; 18f64 <UnityEnd@@Base+0x784>
   18ce0:	mov	r2, #192	; 0xc0
   18ce4:	add	r0, pc, r0
   18ce8:	add	r1, r0, #48	; 0x30
   18cec:	vst1.64	{d8-d9}, [r1 :128]
   18cf0:	add	r1, r0, #32
   18cf4:	vst1.64	{d8-d9}, [r1 :128]
   18cf8:	add	r1, r0, #16
   18cfc:	vst1.64	{d8-d9}, [r0 :128], r5
   18d00:	vst1.64	{d8-d9}, [r1 :128]
   18d04:	vst1.64	{d8-d9}, [r0 :128]
   18d08:	mov	r1, #0
   18d0c:	ldr	r0, [pc, #596]	; 18f68 <UnityEnd@@Base+0x788>
   18d10:	add	r0, pc, r0
   18d14:	bl	12740 <memset@plt>
   18d18:	ldr	r0, [pc, #588]	; 18f6c <UnityEnd@@Base+0x78c>
   18d1c:	mov	r7, #112	; 0x70
   18d20:	mov	r2, #248	; 0xf8
   18d24:	add	r0, pc, r0
   18d28:	add	r1, r0, #96	; 0x60
   18d2c:	vst1.64	{d8-d9}, [r1 :128]
   18d30:	add	r1, r0, #80	; 0x50
   18d34:	vst1.64	{d8-d9}, [r1 :128]
   18d38:	add	r1, r0, #64	; 0x40
   18d3c:	vst1.64	{d8-d9}, [r1 :128]
   18d40:	add	r1, r0, #48	; 0x30
   18d44:	vst1.64	{d8-d9}, [r1 :128]
   18d48:	add	r1, r0, #32
   18d4c:	vst1.64	{d8-d9}, [r1 :128]
   18d50:	add	r1, r0, #16
   18d54:	vst1.64	{d8-d9}, [r0 :128], r7
   18d58:	vst1.64	{d8-d9}, [r1 :128]
   18d5c:	vst1.64	{d8-d9}, [r0 :128]
   18d60:	mov	r1, #0
   18d64:	ldr	r0, [pc, #516]	; 18f70 <UnityEnd@@Base+0x790>
   18d68:	add	r0, pc, r0
   18d6c:	bl	12740 <memset@plt>
   18d70:	ldr	r0, [pc, #508]	; 18f74 <UnityEnd@@Base+0x794>
   18d74:	mov	r2, #176	; 0xb0
   18d78:	add	r0, pc, r0
   18d7c:	add	r1, r0, #96	; 0x60
   18d80:	vst1.64	{d8-d9}, [r1 :128]
   18d84:	add	r1, r0, #80	; 0x50
   18d88:	vst1.64	{d8-d9}, [r1 :128]
   18d8c:	add	r1, r0, #64	; 0x40
   18d90:	vst1.64	{d8-d9}, [r1 :128]
   18d94:	add	r1, r0, #48	; 0x30
   18d98:	vst1.64	{d8-d9}, [r1 :128]
   18d9c:	add	r1, r0, #32
   18da0:	vst1.64	{d8-d9}, [r1 :128]
   18da4:	add	r1, r0, #16
   18da8:	vst1.64	{d8-d9}, [r0 :128], r7
   18dac:	vst1.64	{d8-d9}, [r1 :128]
   18db0:	vst1.64	{d8-d9}, [r0 :128]
   18db4:	mov	r1, #0
   18db8:	ldr	r0, [pc, #440]	; 18f78 <UnityEnd@@Base+0x798>
   18dbc:	add	r0, pc, r0
   18dc0:	bl	12740 <memset@plt>
   18dc4:	ldr	r0, [pc, #432]	; 18f7c <UnityEnd@@Base+0x79c>
   18dc8:	mov	r2, #192	; 0xc0
   18dcc:	add	r0, pc, r0
   18dd0:	add	r1, r0, #48	; 0x30
   18dd4:	vst1.64	{d8-d9}, [r1 :128]
   18dd8:	add	r1, r0, #32
   18ddc:	vst1.64	{d8-d9}, [r1 :128]
   18de0:	add	r1, r0, #16
   18de4:	vst1.64	{d8-d9}, [r0 :128], r5
   18de8:	vst1.64	{d8-d9}, [r1 :128]
   18dec:	vst1.64	{d8-d9}, [r0 :128]
   18df0:	mov	r1, #0
   18df4:	ldr	r0, [pc, #388]	; 18f80 <UnityEnd@@Base+0x7a0>
   18df8:	add	r0, pc, r0
   18dfc:	bl	12740 <memset@plt>
   18e00:	ldr	r0, [pc, #380]	; 18f84 <UnityEnd@@Base+0x7a4>
   18e04:	mov	r2, #272	; 0x110
   18e08:	add	r0, pc, r0
   18e0c:	add	r1, r0, #48	; 0x30
   18e10:	vst1.64	{d8-d9}, [r1 :128]
   18e14:	add	r1, r0, #32
   18e18:	vst1.64	{d8-d9}, [r1 :128]
   18e1c:	add	r1, r0, #16
   18e20:	vst1.64	{d8-d9}, [r0 :128], r5
   18e24:	vst1.64	{d8-d9}, [r1 :128]
   18e28:	vst1.64	{d8-d9}, [r0 :128]
   18e2c:	mov	r1, #0
   18e30:	ldr	r0, [pc, #336]	; 18f88 <UnityEnd@@Base+0x7a8>
   18e34:	add	r0, pc, r0
   18e38:	bl	12740 <memset@plt>
   18e3c:	ldr	r0, [pc, #328]	; 18f8c <UnityEnd@@Base+0x7ac>
   18e40:	mov	r1, #0
   18e44:	mov	r2, #176	; 0xb0
   18e48:	add	r0, pc, r0
   18e4c:	bl	12740 <memset@plt>
   18e50:	ldr	r0, [pc, #312]	; 18f90 <UnityEnd@@Base+0x7b0>
   18e54:	add	r0, pc, r0
   18e58:	add	r1, r0, #32
   18e5c:	vst1.64	{d8-d9}, [r1 :128]
   18e60:	add	r1, r0, #16
   18e64:	vst1.64	{d8-d9}, [r1 :128]
   18e68:	ldr	r1, [pc, #292]	; 18f94 <UnityEnd@@Base+0x7b4>
   18e6c:	add	r1, pc, r1
   18e70:	add	r2, r1, #32
   18e74:	str	r4, [r1, #48]	; 0x30
   18e78:	vst1.64	{d8-d9}, [r2 :128]
   18e7c:	add	r2, r1, #16
   18e80:	vst1.64	{d8-d9}, [r2 :128]
   18e84:	ldr	r2, [pc, #268]	; 18f98 <UnityEnd@@Base+0x7b8>
   18e88:	add	r2, pc, r2
   18e8c:	add	r3, r2, #96	; 0x60
   18e90:	vst1.64	{d8-d9}, [r3 :128]
   18e94:	add	r3, r2, #80	; 0x50
   18e98:	vst1.64	{d8-d9}, [r3 :128]
   18e9c:	add	r3, r2, #64	; 0x40
   18ea0:	vst1.64	{d8-d9}, [r3 :128]
   18ea4:	add	r3, r2, #48	; 0x30
   18ea8:	vst1.64	{d8-d9}, [r3 :128]
   18eac:	add	r3, r2, #32
   18eb0:	vst1.64	{d8-d9}, [r3 :128]
   18eb4:	add	r3, r2, #16
   18eb8:	vst1.64	{d8-d9}, [r3 :128]
   18ebc:	ldr	r3, [pc, #216]	; 18f9c <UnityEnd@@Base+0x7bc>
   18ec0:	add	r3, pc, r3
   18ec4:	vst1.64	{d8-d9}, [r3 :128]
   18ec8:	ldr	r3, [pc, #208]	; 18fa0 <UnityEnd@@Base+0x7c0>
   18ecc:	vst1.64	{d8-d9}, [r2 :128], r7
   18ed0:	vst1.64	{d8-d9}, [r2 :128]
   18ed4:	add	r3, pc, r3
   18ed8:	vst1.64	{d8-d9}, [r3 :128]
   18edc:	mov	r3, #48	; 0x30
   18ee0:	vst1.64	{d8-d9}, [r0 :128], r3
   18ee4:	vst1.64	{d8-d9}, [r0 :128]
   18ee8:	mov	r0, #52	; 0x34
   18eec:	vst1.64	{d8-d9}, [r1 :128], r0
   18ef0:	str	r4, [r1]
   18ef4:	ldr	r0, [pc, #168]	; 18fa4 <UnityEnd@@Base+0x7c4>
   18ef8:	add	r0, pc, r0
   18efc:	vst1.64	{d8-d9}, [r0 :128]
   18f00:	ldr	r0, [pc, #160]	; 18fa8 <UnityEnd@@Base+0x7c8>
   18f04:	add	r0, pc, r0
   18f08:	add	r1, r0, #16
   18f0c:	vst1.64	{d8-d9}, [r0 :128], r6
   18f10:	vst1.64	{d8-d9}, [r1 :128]
   18f14:	vst1.64	{d8-d9}, [r0 :128]
   18f18:	vpop	{d8-d9}
   18f1c:	pop	{r4, r5, r6, r7, fp, pc}
   18f20:			; <UNDEFINED> instruction: 0x000188bc
   18f24:	andeq	r8, r1, r4, asr #18
   18f28:	andeq	r8, r1, r8, asr #18
   18f2c:	andeq	r8, r1, ip, ror #18
   18f30:	ldrdeq	r8, [r1], -ip
   18f34:	andeq	r8, r1, r4, lsr sl
   18f38:	andeq	r8, r1, r4, lsr #19
   18f3c:	andeq	r8, r1, ip, lsl #21
   18f40:			; <UNDEFINED> instruction: 0x00018abc
   18f44:	andeq	r8, r1, r0, asr #21
   18f48:	andeq	r8, r1, r4, asr #21
   18f4c:	andeq	r8, r1, r8, ror #21
   18f50:	andeq	r8, r1, ip, ror #21
   18f54:	andeq	r8, r1, r4, lsl #22
   18f58:	andeq	r8, r1, r8, lsl #22
   18f5c:	andeq	r8, r1, r0, lsr fp
   18f60:	andeq	r8, r1, r4, asr #22
   18f64:	andeq	r8, r1, r4, asr ip
   18f68:	andeq	r8, r1, r8, ror ip
   18f6c:	andeq	r8, r1, r4, lsr #26
   18f70:	andeq	r8, r1, r0, ror #26
   18f74:	andeq	r8, r1, r0, asr lr
   18f78:	andeq	r8, r1, ip, lsl #29
   18f7c:	andeq	r8, r1, ip, lsr #30
   18f80:	andeq	r8, r1, r0, asr pc
   18f84:	andeq	r9, r1, r0
   18f88:	andeq	r9, r1, r4, lsr #32
   18f8c:	andeq	r9, r1, r0, lsr #2
   18f90:	andeq	r9, r1, r4, lsr #5
   18f94:	andeq	r9, r1, ip, lsr #4
   18f98:	muleq	r1, r0, r1
   18f9c:	andeq	r9, r1, r8, lsl r2
   18fa0:	andeq	r9, r1, r4, lsl r2
   18fa4:	andeq	r9, r1, r0, asr #4
   18fa8:	andeq	r9, r1, r4, asr #4
   18fac:	ldr	r0, [pc, #12]	; 18fc0 <UnityEnd@@Base+0x7e0>
   18fb0:	ldr	r1, [pc, #12]	; 18fc4 <UnityEnd@@Base+0x7e4>
   18fb4:	add	r0, pc, r0
   18fb8:	add	r1, pc, r1
   18fbc:	b	1e0dc <__gcov_flush@@Base+0xb4>
   18fc0:			; <UNDEFINED> instruction: 0xfffffa54
   18fc4:			; <UNDEFINED> instruction: 0xfffffae0
	...

00018fd0 <init_token_int_type@@Base>:
   18fd0:	ldr	r1, [pc, #56]	; 19010 <init_token_int_type@@Base+0x40>
   18fd4:	add	r2, pc, #36	; 0x24
   18fd8:	vld1.64	{d16-d17}, [r2 :128]
   18fdc:	add	r1, pc, r1
   18fe0:	vld1.64	{d18-d19}, [r1 :128]
   18fe4:	vadd.i64	q8, q9, q8
   18fe8:	vst1.64	{d16-d17}, [r1 :128]
   18fec:	mov	r1, #0
   18ff0:	str	r1, [r0]
   18ff4:	bx	lr
   18ff8:	nop	{0}
   18ffc:	nop	{0}
   19000:	andeq	r0, r0, r1
   19004:	andeq	r0, r0, r0
   19008:	andeq	r0, r0, r1
   1900c:	andeq	r0, r0, r0
   19010:	muleq	r1, ip, r1
   19014:	nop	{0}
   19018:	nop	{0}
   1901c:	nop	{0}

00019020 <init_token_int_value@@Base>:
   19020:	ldr	r2, [pc, #56]	; 19060 <init_token_int_value@@Base+0x40>
   19024:	add	r3, pc, #36	; 0x24
   19028:	vld1.64	{d16-d17}, [r3 :128]
   1902c:	add	r2, pc, r2
   19030:	vld1.64	{d18-d19}, [r2 :128]
   19034:	vadd.i64	q8, q9, q8
   19038:	vst1.64	{d16-d17}, [r2 :128]
   1903c:	mov	r2, #1
   19040:	str	r2, [r0]
   19044:	str	r1, [r0, #4]
   19048:	bx	lr
   1904c:	nop	{0}
   19050:	andeq	r0, r0, r1
   19054:	andeq	r0, r0, r0
   19058:	andeq	r0, r0, r1
   1905c:	andeq	r0, r0, r0
   19060:	andeq	r9, r1, ip, asr r1
   19064:	nop	{0}
   19068:	nop	{0}
   1906c:	nop	{0}

00019070 <init_token_function@@Base>:
   19070:	ldr	r2, [pc, #56]	; 190b0 <init_token_function@@Base+0x40>
   19074:	add	r3, pc, #36	; 0x24
   19078:	vld1.64	{d16-d17}, [r3 :128]
   1907c:	add	r2, pc, r2
   19080:	vld1.64	{d18-d19}, [r2 :128]
   19084:	vadd.i64	q8, q9, q8
   19088:	vst1.64	{d16-d17}, [r2 :128]
   1908c:	mov	r2, #2
   19090:	str	r2, [r0]
   19094:	str	r1, [r0, #4]
   19098:	bx	lr
   1909c:	nop	{0}
   190a0:	andeq	r0, r0, r1
   190a4:	andeq	r0, r0, r0
   190a8:	andeq	r0, r0, r1
   190ac:	andeq	r0, r0, r0
   190b0:	andeq	r9, r1, ip, lsl r1
   190b4:	nop	{0}
   190b8:	nop	{0}
   190bc:	nop	{0}

000190c0 <init_token_opar@@Base>:
   190c0:	ldr	r1, [pc, #56]	; 19100 <init_token_opar@@Base+0x40>
   190c4:	add	r2, pc, #36	; 0x24
   190c8:	vld1.64	{d16-d17}, [r2 :128]
   190cc:	add	r1, pc, r1
   190d0:	vld1.64	{d18-d19}, [r1 :128]
   190d4:	vadd.i64	q8, q9, q8
   190d8:	vst1.64	{d16-d17}, [r1 :128]
   190dc:	mov	r1, #3
   190e0:	str	r1, [r0]
   190e4:	bx	lr
   190e8:	nop	{0}
   190ec:	nop	{0}
   190f0:	andeq	r0, r0, r1
   190f4:	andeq	r0, r0, r0
   190f8:	andeq	r0, r0, r1
   190fc:	andeq	r0, r0, r0
   19100:	ldrdeq	r9, [r1], -ip
   19104:	nop	{0}
   19108:	nop	{0}
   1910c:	nop	{0}

00019110 <init_token_cpar@@Base>:
   19110:	ldr	r1, [pc, #56]	; 19150 <init_token_cpar@@Base+0x40>
   19114:	add	r2, pc, #36	; 0x24
   19118:	vld1.64	{d16-d17}, [r2 :128]
   1911c:	add	r1, pc, r1
   19120:	vld1.64	{d18-d19}, [r1 :128]
   19124:	vadd.i64	q8, q9, q8
   19128:	vst1.64	{d16-d17}, [r1 :128]
   1912c:	mov	r1, #4
   19130:	str	r1, [r0]
   19134:	bx	lr
   19138:	nop	{0}
   1913c:	nop	{0}
   19140:	andeq	r0, r0, r1
   19144:	andeq	r0, r0, r0
   19148:	andeq	r0, r0, r1
   1914c:	andeq	r0, r0, r0
   19150:	muleq	r1, ip, r0
   19154:	nop	{0}
   19158:	nop	{0}
   1915c:	nop	{0}

00019160 <init_token_obra@@Base>:
   19160:	ldr	r1, [pc, #56]	; 191a0 <init_token_obra@@Base+0x40>
   19164:	add	r2, pc, #36	; 0x24
   19168:	vld1.64	{d16-d17}, [r2 :128]
   1916c:	add	r1, pc, r1
   19170:	vld1.64	{d18-d19}, [r1 :128]
   19174:	vadd.i64	q8, q9, q8
   19178:	vst1.64	{d16-d17}, [r1 :128]
   1917c:	mov	r1, #5
   19180:	str	r1, [r0]
   19184:	bx	lr
   19188:	nop	{0}
   1918c:	nop	{0}
   19190:	andeq	r0, r0, r1
   19194:	andeq	r0, r0, r0
   19198:	andeq	r0, r0, r1
   1919c:	andeq	r0, r0, r0
   191a0:	andeq	r9, r1, ip, asr r0
   191a4:	nop	{0}
   191a8:	nop	{0}
   191ac:	nop	{0}

000191b0 <init_token_cbra@@Base>:
   191b0:	ldr	r1, [pc, #56]	; 191f0 <init_token_cbra@@Base+0x40>
   191b4:	add	r2, pc, #36	; 0x24
   191b8:	vld1.64	{d16-d17}, [r2 :128]
   191bc:	add	r1, pc, r1
   191c0:	vld1.64	{d18-d19}, [r1 :128]
   191c4:	vadd.i64	q8, q9, q8
   191c8:	vst1.64	{d16-d17}, [r1 :128]
   191cc:	mov	r1, #6
   191d0:	str	r1, [r0]
   191d4:	bx	lr
   191d8:	nop	{0}
   191dc:	nop	{0}
   191e0:	andeq	r0, r0, r1
   191e4:	andeq	r0, r0, r0
   191e8:	andeq	r0, r0, r1
   191ec:	andeq	r0, r0, r0
   191f0:	andeq	r9, r1, ip, lsl r0
   191f4:	nop	{0}
   191f8:	nop	{0}
   191fc:	nop	{0}

00019200 <init_token_return@@Base>:
   19200:	ldr	r1, [pc, #56]	; 19240 <init_token_return@@Base+0x40>
   19204:	add	r2, pc, #36	; 0x24
   19208:	vld1.64	{d16-d17}, [r2 :128]
   1920c:	add	r1, pc, r1
   19210:	vld1.64	{d18-d19}, [r1 :128]
   19214:	vadd.i64	q8, q9, q8
   19218:	vst1.64	{d16-d17}, [r1 :128]
   1921c:	mov	r1, #7
   19220:	str	r1, [r0]
   19224:	bx	lr
   19228:	nop	{0}
   1922c:	nop	{0}
   19230:	andeq	r0, r0, r1
   19234:	andeq	r0, r0, r0
   19238:	andeq	r0, r0, r1
   1923c:	andeq	r0, r0, r0
   19240:	ldrdeq	r8, [r1], -ip
   19244:	nop	{0}
   19248:	nop	{0}
   1924c:	nop	{0}

00019250 <init_token_semicolon@@Base>:
   19250:	ldr	r1, [pc, #56]	; 19290 <init_token_semicolon@@Base+0x40>
   19254:	add	r2, pc, #36	; 0x24
   19258:	vld1.64	{d16-d17}, [r2 :128]
   1925c:	add	r1, pc, r1
   19260:	vld1.64	{d18-d19}, [r1 :128]
   19264:	vadd.i64	q8, q9, q8
   19268:	vst1.64	{d16-d17}, [r1 :128]
   1926c:	mov	r1, #8
   19270:	str	r1, [r0]
   19274:	bx	lr
   19278:	nop	{0}
   1927c:	nop	{0}
   19280:	andeq	r0, r0, r1
   19284:	andeq	r0, r0, r0
   19288:	andeq	r0, r0, r1
   1928c:	andeq	r0, r0, r0
   19290:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19294:	nop	{0}
   19298:	nop	{0}
   1929c:	nop	{0}

000192a0 <init_token_eof@@Base>:
   192a0:	ldr	r1, [pc, #56]	; 192e0 <init_token_eof@@Base+0x40>
   192a4:	add	r2, pc, #36	; 0x24
   192a8:	vld1.64	{d16-d17}, [r2 :128]
   192ac:	add	r1, pc, r1
   192b0:	vld1.64	{d18-d19}, [r1 :128]
   192b4:	vadd.i64	q8, q9, q8
   192b8:	vst1.64	{d16-d17}, [r1 :128]
   192bc:	mov	r1, #9
   192c0:	str	r1, [r0]
   192c4:	bx	lr
   192c8:	nop	{0}
   192cc:	nop	{0}
   192d0:	andeq	r0, r0, r1
   192d4:	andeq	r0, r0, r0
   192d8:	andeq	r0, r0, r1
   192dc:	andeq	r0, r0, r0
   192e0:	andeq	r8, r1, ip, asr pc
   192e4:	nop	{0}
   192e8:	nop	{0}
   192ec:	nop	{0}

000192f0 <init_token_if@@Base>:
   192f0:	ldr	r1, [pc, #56]	; 19330 <init_token_if@@Base+0x40>
   192f4:	add	r2, pc, #36	; 0x24
   192f8:	vld1.64	{d16-d17}, [r2 :128]
   192fc:	add	r1, pc, r1
   19300:	vld1.64	{d18-d19}, [r1 :128]
   19304:	vadd.i64	q8, q9, q8
   19308:	vst1.64	{d16-d17}, [r1 :128]
   1930c:	mov	r1, #10
   19310:	str	r1, [r0]
   19314:	bx	lr
   19318:	nop	{0}
   1931c:	nop	{0}
   19320:	andeq	r0, r0, r1
   19324:	andeq	r0, r0, r0
   19328:	andeq	r0, r0, r1
   1932c:	andeq	r0, r0, r0
   19330:	andeq	r8, r1, ip, lsl pc
   19334:	nop	{0}
   19338:	nop	{0}
   1933c:	nop	{0}

00019340 <init_token_else@@Base>:
   19340:	ldr	r1, [pc, #56]	; 19380 <init_token_else@@Base+0x40>
   19344:	add	r2, pc, #36	; 0x24
   19348:	vld1.64	{d16-d17}, [r2 :128]
   1934c:	add	r1, pc, r1
   19350:	vld1.64	{d18-d19}, [r1 :128]
   19354:	vadd.i64	q8, q9, q8
   19358:	vst1.64	{d16-d17}, [r1 :128]
   1935c:	mov	r1, #11
   19360:	str	r1, [r0]
   19364:	bx	lr
   19368:	nop	{0}
   1936c:	nop	{0}
   19370:	andeq	r0, r0, r1
   19374:	andeq	r0, r0, r0
   19378:	andeq	r0, r0, r1
   1937c:	andeq	r0, r0, r0
   19380:	ldrdeq	r8, [r1], -ip
   19384:	nop	{0}
   19388:	nop	{0}
   1938c:	nop	{0}

00019390 <init_token_boolean_op@@Base>:
   19390:	ldr	r2, [pc, #56]	; 193d0 <init_token_boolean_op@@Base+0x40>
   19394:	add	r3, pc, #36	; 0x24
   19398:	vld1.64	{d16-d17}, [r3 :128]
   1939c:	add	r2, pc, r2
   193a0:	vld1.64	{d18-d19}, [r2 :128]
   193a4:	vadd.i64	q8, q9, q8
   193a8:	vst1.64	{d16-d17}, [r2 :128]
   193ac:	mov	r2, #12
   193b0:	str	r2, [r0]
   193b4:	str	r1, [r0, #4]
   193b8:	bx	lr
   193bc:	nop	{0}
   193c0:	andeq	r0, r0, r1
   193c4:	andeq	r0, r0, r0
   193c8:	andeq	r0, r0, r1
   193cc:	andeq	r0, r0, r0
   193d0:	muleq	r1, ip, lr
   193d4:	nop	{0}
   193d8:	nop	{0}
   193dc:	nop	{0}

000193e0 <free_token_int_type@@Base>:
   193e0:	ldr	r1, [pc, #40]	; 19410 <free_token_int_type@@Base+0x30>
   193e4:	add	r2, pc, #20
   193e8:	vld1.64	{d16-d17}, [r2 :128]
   193ec:	add	r1, pc, r1
   193f0:	vld1.64	{d18-d19}, [r1 :128]
   193f4:	vadd.i64	q8, q9, q8
   193f8:	vst1.64	{d16-d17}, [r1 :128]
   193fc:	b	12620 <free@plt>
   19400:	andeq	r0, r0, r1
   19404:	andeq	r0, r0, r0
   19408:	andeq	r0, r0, r1
   1940c:	andeq	r0, r0, r0
   19410:	andeq	r8, r1, ip, asr lr
   19414:	nop	{0}
   19418:	nop	{0}
   1941c:	nop	{0}

00019420 <free_token_int_value@@Base>:
   19420:	ldr	r1, [pc, #40]	; 19450 <free_token_int_value@@Base+0x30>
   19424:	add	r2, pc, #20
   19428:	vld1.64	{d16-d17}, [r2 :128]
   1942c:	add	r1, pc, r1
   19430:	vld1.64	{d18-d19}, [r1 :128]
   19434:	vadd.i64	q8, q9, q8
   19438:	vst1.64	{d16-d17}, [r1 :128]
   1943c:	b	12620 <free@plt>
   19440:	andeq	r0, r0, r1
   19444:	andeq	r0, r0, r0
   19448:	andeq	r0, r0, r1
   1944c:	andeq	r0, r0, r0
   19450:	andeq	r8, r1, ip, lsr #28
   19454:	nop	{0}
   19458:	nop	{0}
   1945c:	nop	{0}

00019460 <free_token_function@@Base>:
   19460:	ldr	r1, [pc, #40]	; 19490 <free_token_function@@Base+0x30>
   19464:	add	r2, pc, #20
   19468:	vld1.64	{d16-d17}, [r2 :128]
   1946c:	add	r1, pc, r1
   19470:	vld1.64	{d18-d19}, [r1 :128]
   19474:	vadd.i64	q8, q9, q8
   19478:	vst1.64	{d16-d17}, [r1 :128]
   1947c:	b	12620 <free@plt>
   19480:	andeq	r0, r0, r1
   19484:	andeq	r0, r0, r0
   19488:	andeq	r0, r0, r1
   1948c:	andeq	r0, r0, r0
   19490:	strdeq	r8, [r1], -ip
   19494:	nop	{0}
   19498:	nop	{0}
   1949c:	nop	{0}

000194a0 <free_token_opar@@Base>:
   194a0:	ldr	r1, [pc, #40]	; 194d0 <free_token_opar@@Base+0x30>
   194a4:	add	r2, pc, #20
   194a8:	vld1.64	{d16-d17}, [r2 :128]
   194ac:	add	r1, pc, r1
   194b0:	vld1.64	{d18-d19}, [r1 :128]
   194b4:	vadd.i64	q8, q9, q8
   194b8:	vst1.64	{d16-d17}, [r1 :128]
   194bc:	b	12620 <free@plt>
   194c0:	andeq	r0, r0, r1
   194c4:	andeq	r0, r0, r0
   194c8:	andeq	r0, r0, r1
   194cc:	andeq	r0, r0, r0
   194d0:	andeq	r8, r1, ip, asr #27
   194d4:	nop	{0}
   194d8:	nop	{0}
   194dc:	nop	{0}

000194e0 <free_token_cpar@@Base>:
   194e0:	ldr	r1, [pc, #40]	; 19510 <free_token_cpar@@Base+0x30>
   194e4:	add	r2, pc, #20
   194e8:	vld1.64	{d16-d17}, [r2 :128]
   194ec:	add	r1, pc, r1
   194f0:	vld1.64	{d18-d19}, [r1 :128]
   194f4:	vadd.i64	q8, q9, q8
   194f8:	vst1.64	{d16-d17}, [r1 :128]
   194fc:	b	12620 <free@plt>
   19500:	andeq	r0, r0, r1
   19504:	andeq	r0, r0, r0
   19508:	andeq	r0, r0, r1
   1950c:	andeq	r0, r0, r0
   19510:	muleq	r1, ip, sp
   19514:	nop	{0}
   19518:	nop	{0}
   1951c:	nop	{0}

00019520 <free_token_obra@@Base>:
   19520:	ldr	r1, [pc, #40]	; 19550 <free_token_obra@@Base+0x30>
   19524:	add	r2, pc, #20
   19528:	vld1.64	{d16-d17}, [r2 :128]
   1952c:	add	r1, pc, r1
   19530:	vld1.64	{d18-d19}, [r1 :128]
   19534:	vadd.i64	q8, q9, q8
   19538:	vst1.64	{d16-d17}, [r1 :128]
   1953c:	b	12620 <free@plt>
   19540:	andeq	r0, r0, r1
   19544:	andeq	r0, r0, r0
   19548:	andeq	r0, r0, r1
   1954c:	andeq	r0, r0, r0
   19550:	andeq	r8, r1, ip, ror #26
   19554:	nop	{0}
   19558:	nop	{0}
   1955c:	nop	{0}

00019560 <free_token_cbra@@Base>:
   19560:	ldr	r1, [pc, #40]	; 19590 <free_token_cbra@@Base+0x30>
   19564:	add	r2, pc, #20
   19568:	vld1.64	{d16-d17}, [r2 :128]
   1956c:	add	r1, pc, r1
   19570:	vld1.64	{d18-d19}, [r1 :128]
   19574:	vadd.i64	q8, q9, q8
   19578:	vst1.64	{d16-d17}, [r1 :128]
   1957c:	b	12620 <free@plt>
   19580:	andeq	r0, r0, r1
   19584:	andeq	r0, r0, r0
   19588:	andeq	r0, r0, r1
   1958c:	andeq	r0, r0, r0
   19590:	andeq	r8, r1, ip, lsr sp
   19594:	nop	{0}
   19598:	nop	{0}
   1959c:	nop	{0}

000195a0 <free_token_return@@Base>:
   195a0:	ldr	r1, [pc, #40]	; 195d0 <free_token_return@@Base+0x30>
   195a4:	add	r2, pc, #20
   195a8:	vld1.64	{d16-d17}, [r2 :128]
   195ac:	add	r1, pc, r1
   195b0:	vld1.64	{d18-d19}, [r1 :128]
   195b4:	vadd.i64	q8, q9, q8
   195b8:	vst1.64	{d16-d17}, [r1 :128]
   195bc:	b	12620 <free@plt>
   195c0:	andeq	r0, r0, r1
   195c4:	andeq	r0, r0, r0
   195c8:	andeq	r0, r0, r1
   195cc:	andeq	r0, r0, r0
   195d0:	andeq	r8, r1, ip, lsl #26
   195d4:	nop	{0}
   195d8:	nop	{0}
   195dc:	nop	{0}

000195e0 <free_token_semicolon@@Base>:
   195e0:	ldr	r1, [pc, #40]	; 19610 <free_token_semicolon@@Base+0x30>
   195e4:	add	r2, pc, #20
   195e8:	vld1.64	{d16-d17}, [r2 :128]
   195ec:	add	r1, pc, r1
   195f0:	vld1.64	{d18-d19}, [r1 :128]
   195f4:	vadd.i64	q8, q9, q8
   195f8:	vst1.64	{d16-d17}, [r1 :128]
   195fc:	b	12620 <free@plt>
   19600:	andeq	r0, r0, r1
   19604:	andeq	r0, r0, r0
   19608:	andeq	r0, r0, r1
   1960c:	andeq	r0, r0, r0
   19610:	ldrdeq	r8, [r1], -ip
   19614:	nop	{0}
   19618:	nop	{0}
   1961c:	nop	{0}

00019620 <free_token_eof@@Base>:
   19620:	ldr	r1, [pc, #40]	; 19650 <free_token_eof@@Base+0x30>
   19624:	add	r2, pc, #20
   19628:	vld1.64	{d16-d17}, [r2 :128]
   1962c:	add	r1, pc, r1
   19630:	vld1.64	{d18-d19}, [r1 :128]
   19634:	vadd.i64	q8, q9, q8
   19638:	vst1.64	{d16-d17}, [r1 :128]
   1963c:	b	12620 <free@plt>
   19640:	andeq	r0, r0, r1
   19644:	andeq	r0, r0, r0
   19648:	andeq	r0, r0, r1
   1964c:	andeq	r0, r0, r0
   19650:	andeq	r8, r1, ip, lsr #25
   19654:	nop	{0}
   19658:	nop	{0}
   1965c:	nop	{0}

00019660 <free_token_if@@Base>:
   19660:	ldr	r1, [pc, #40]	; 19690 <free_token_if@@Base+0x30>
   19664:	add	r2, pc, #20
   19668:	vld1.64	{d16-d17}, [r2 :128]
   1966c:	add	r1, pc, r1
   19670:	vld1.64	{d18-d19}, [r1 :128]
   19674:	vadd.i64	q8, q9, q8
   19678:	vst1.64	{d16-d17}, [r1 :128]
   1967c:	b	12620 <free@plt>
   19680:	andeq	r0, r0, r1
   19684:	andeq	r0, r0, r0
   19688:	andeq	r0, r0, r1
   1968c:	andeq	r0, r0, r0
   19690:	andeq	r8, r1, ip, ror ip
   19694:	nop	{0}
   19698:	nop	{0}
   1969c:	nop	{0}

000196a0 <free_token_else@@Base>:
   196a0:	ldr	r1, [pc, #40]	; 196d0 <free_token_else@@Base+0x30>
   196a4:	add	r2, pc, #20
   196a8:	vld1.64	{d16-d17}, [r2 :128]
   196ac:	add	r1, pc, r1
   196b0:	vld1.64	{d18-d19}, [r1 :128]
   196b4:	vadd.i64	q8, q9, q8
   196b8:	vst1.64	{d16-d17}, [r1 :128]
   196bc:	b	12620 <free@plt>
   196c0:	andeq	r0, r0, r1
   196c4:	andeq	r0, r0, r0
   196c8:	andeq	r0, r0, r1
   196cc:	andeq	r0, r0, r0
   196d0:	andeq	r8, r1, ip, asr #24

000196d4 <free_token_boolean_op@@Base>:
   196d4:	push	{r4, r5, fp, lr}
   196d8:	add	fp, sp, #8
   196dc:	ldr	r5, [pc, #132]	; 19768 <free_token_boolean_op@@Base+0x94>
   196e0:	mov	r4, r0
   196e4:	ldr	r0, [pc, #128]	; 1976c <free_token_boolean_op@@Base+0x98>
   196e8:	mov	r1, #16
   196ec:	ldr	r0, [pc, r0]
   196f0:	add	r5, pc, r5
   196f4:	mov	r2, r5
   196f8:	adds	r0, r0, #1
   196fc:	str	r0, [r5]
   19700:	ldr	r0, [r5, #4]
   19704:	adc	r0, r0, #0
   19708:	str	r0, [r5, #4]
   1970c:	ldr	r0, [r4, #4]
   19710:	cmp	r0, #0
   19714:	movwne	r1, #8
   19718:	ldr	r1, [r2, r1]!
   1971c:	adds	r1, r1, #1
   19720:	str	r1, [r2]
   19724:	ldr	r1, [r2, #4]
   19728:	adc	r1, r1, #0
   1972c:	cmp	r0, #0
   19730:	str	r1, [r2, #4]
   19734:	beq	1974c <free_token_boolean_op@@Base+0x78>
   19738:	ldrd	r2, [r5, #24]
   1973c:	adds	r2, r2, #1
   19740:	adc	r3, r3, #0
   19744:	strd	r2, [r5, #24]
   19748:	bl	12620 <free@plt>
   1974c:	ldrd	r0, [r5, #32]
   19750:	adds	r0, r0, #1
   19754:	adc	r1, r1, #0
   19758:	strd	r0, [r5, #32]
   1975c:	mov	r0, r4
   19760:	pop	{r4, r5, fp, lr}
   19764:	b	12620 <free@plt>
   19768:	andeq	r8, r1, r8, lsl ip
   1976c:	andeq	r8, r1, ip, lsl ip
   19770:	push	{r4, r5, r6, lr}
   19774:	sub	sp, sp, #8
   19778:	ldr	r0, [pc, #112]	; 197f0 <free_token_boolean_op@@Base+0x11c>
   1977c:	ldr	r1, [pc, #112]	; 197f4 <free_token_boolean_op@@Base+0x120>
   19780:	movw	r2, #10327	; 0x2857
   19784:	movt	r2, #23326	; 0x5b1e
   19788:	add	r0, pc, r0
   1978c:	add	r1, pc, r1
   19790:	bl	1b72c <next@@Base+0x196c>
   19794:	ldr	r0, [pc, #92]	; 197f8 <free_token_boolean_op@@Base+0x124>
   19798:	ldr	r6, [pc, #92]	; 197fc <free_token_boolean_op@@Base+0x128>
   1979c:	mov	r5, #0
   197a0:	add	r0, pc, r0
   197a4:	add	r6, pc, r6
   197a8:	add	r4, r0, #4
   197ac:	mov	r3, r6
   197b0:	ldr	r0, [r3, r5]!
   197b4:	ldr	r1, [r3, #16]
   197b8:	str	r1, [sp]
   197bc:	ldmib	r3, {r1, r2}
   197c0:	ldrb	r3, [r3, #12]
   197c4:	bl	1be90 <next@@Base+0x20d0>
   197c8:	ldrd	r0, [r4, #-4]
   197cc:	bl	1c744 <next@@Base+0x2984>
   197d0:	add	r5, r5, #20
   197d4:	add	r4, r4, #8
   197d8:	cmp	r5, #520	; 0x208
   197dc:	bne	197ac <free_token_boolean_op@@Base+0xd8>
   197e0:	bl	1cec0 <next@@Base+0x3100>
   197e4:	add	sp, sp, #8
   197e8:	pop	{r4, r5, r6, lr}
   197ec:	b	1dc2c <next@@Base+0x3e6c>
   197f0:	andeq	r5, r0, r0, asr r9
   197f4:	andeq	r5, r0, r9, asr #32
   197f8:	andeq	r7, r1, r8, lsr r5
   197fc:	andeq	r7, r1, r4, lsr #6
   19800:	push	{fp, lr}
   19804:	bl	19770 <free_token_boolean_op@@Base+0x9c>
   19808:	ldr	r0, [pc, #336]	; 19960 <free_token_boolean_op@@Base+0x28c>
   1980c:	vmov.i32	q8, #0	; 0x00000000
   19810:	mov	r1, #0
   19814:	add	r0, pc, r0
   19818:	vst1.64	{d16-d17}, [r0 :128]
   1981c:	ldr	r0, [pc, #320]	; 19964 <free_token_boolean_op@@Base+0x290>
   19820:	add	r0, pc, r0
   19824:	vst1.64	{d16-d17}, [r0 :128]
   19828:	ldr	r0, [pc, #312]	; 19968 <free_token_boolean_op@@Base+0x294>
   1982c:	add	r0, pc, r0
   19830:	vst1.64	{d16-d17}, [r0 :128]
   19834:	ldr	r0, [pc, #304]	; 1996c <free_token_boolean_op@@Base+0x298>
   19838:	add	r0, pc, r0
   1983c:	vst1.64	{d16-d17}, [r0 :128]
   19840:	ldr	r0, [pc, #296]	; 19970 <free_token_boolean_op@@Base+0x29c>
   19844:	add	r0, pc, r0
   19848:	vst1.64	{d16-d17}, [r0 :128]
   1984c:	ldr	r0, [pc, #288]	; 19974 <free_token_boolean_op@@Base+0x2a0>
   19850:	add	r0, pc, r0
   19854:	vst1.64	{d16-d17}, [r0 :128]
   19858:	ldr	r0, [pc, #280]	; 19978 <free_token_boolean_op@@Base+0x2a4>
   1985c:	add	r0, pc, r0
   19860:	vst1.64	{d16-d17}, [r0 :128]
   19864:	ldr	r0, [pc, #272]	; 1997c <free_token_boolean_op@@Base+0x2a8>
   19868:	add	r0, pc, r0
   1986c:	vst1.64	{d16-d17}, [r0 :128]
   19870:	ldr	r0, [pc, #264]	; 19980 <free_token_boolean_op@@Base+0x2ac>
   19874:	add	r0, pc, r0
   19878:	vst1.64	{d16-d17}, [r0 :128]
   1987c:	ldr	r0, [pc, #256]	; 19984 <free_token_boolean_op@@Base+0x2b0>
   19880:	add	r0, pc, r0
   19884:	vst1.64	{d16-d17}, [r0 :128]
   19888:	ldr	r0, [pc, #248]	; 19988 <free_token_boolean_op@@Base+0x2b4>
   1988c:	add	r0, pc, r0
   19890:	vst1.64	{d16-d17}, [r0 :128]
   19894:	ldr	r0, [pc, #240]	; 1998c <free_token_boolean_op@@Base+0x2b8>
   19898:	add	r0, pc, r0
   1989c:	vst1.64	{d16-d17}, [r0 :128]
   198a0:	ldr	r0, [pc, #232]	; 19990 <free_token_boolean_op@@Base+0x2bc>
   198a4:	add	r0, pc, r0
   198a8:	vst1.64	{d16-d17}, [r0 :128]
   198ac:	ldr	r0, [pc, #224]	; 19994 <free_token_boolean_op@@Base+0x2c0>
   198b0:	add	r0, pc, r0
   198b4:	vst1.64	{d16-d17}, [r0 :128]
   198b8:	ldr	r0, [pc, #216]	; 19998 <free_token_boolean_op@@Base+0x2c4>
   198bc:	add	r0, pc, r0
   198c0:	vst1.64	{d16-d17}, [r0 :128]
   198c4:	ldr	r0, [pc, #208]	; 1999c <free_token_boolean_op@@Base+0x2c8>
   198c8:	add	r0, pc, r0
   198cc:	vst1.64	{d16-d17}, [r0 :128]
   198d0:	ldr	r0, [pc, #200]	; 199a0 <free_token_boolean_op@@Base+0x2cc>
   198d4:	add	r0, pc, r0
   198d8:	vst1.64	{d16-d17}, [r0 :128]
   198dc:	ldr	r0, [pc, #192]	; 199a4 <free_token_boolean_op@@Base+0x2d0>
   198e0:	add	r0, pc, r0
   198e4:	vst1.64	{d16-d17}, [r0 :128]
   198e8:	ldr	r0, [pc, #184]	; 199a8 <free_token_boolean_op@@Base+0x2d4>
   198ec:	add	r0, pc, r0
   198f0:	vst1.64	{d16-d17}, [r0 :128]
   198f4:	ldr	r0, [pc, #176]	; 199ac <free_token_boolean_op@@Base+0x2d8>
   198f8:	add	r0, pc, r0
   198fc:	vst1.64	{d16-d17}, [r0 :128]
   19900:	ldr	r0, [pc, #168]	; 199b0 <free_token_boolean_op@@Base+0x2dc>
   19904:	add	r0, pc, r0
   19908:	vst1.64	{d16-d17}, [r0 :128]
   1990c:	ldr	r0, [pc, #160]	; 199b4 <free_token_boolean_op@@Base+0x2e0>
   19910:	add	r0, pc, r0
   19914:	vst1.64	{d16-d17}, [r0 :128]
   19918:	ldr	r0, [pc, #152]	; 199b8 <free_token_boolean_op@@Base+0x2e4>
   1991c:	add	r0, pc, r0
   19920:	vst1.64	{d16-d17}, [r0 :128]
   19924:	ldr	r0, [pc, #144]	; 199bc <free_token_boolean_op@@Base+0x2e8>
   19928:	add	r0, pc, r0
   1992c:	vst1.64	{d16-d17}, [r0 :128]
   19930:	ldr	r0, [pc, #136]	; 199c0 <free_token_boolean_op@@Base+0x2ec>
   19934:	add	r0, pc, r0
   19938:	vst1.64	{d16-d17}, [r0 :128]
   1993c:	ldr	r0, [pc, #128]	; 199c4 <free_token_boolean_op@@Base+0x2f0>
   19940:	add	r0, pc, r0
   19944:	add	r2, r0, #16
   19948:	str	r1, [r0, #32]
   1994c:	vst1.64	{d16-d17}, [r2 :128]
   19950:	mov	r2, #36	; 0x24
   19954:	vst1.64	{d16-d17}, [r0 :128], r2
   19958:	str	r1, [r0]
   1995c:	pop	{fp, pc}
   19960:	andeq	r8, r1, r4, ror r9
   19964:	andeq	r8, r1, r8, asr r9
   19968:	andeq	r8, r1, ip, ror #18
   1996c:	andeq	r8, r1, r0, ror r9
   19970:	andeq	r8, r1, r4, ror r9
   19974:	andeq	r8, r1, r8, ror r9
   19978:	andeq	r8, r1, ip, ror r9
   1997c:	andeq	r8, r1, r0, lsl #19
   19980:	andeq	r8, r1, r4, lsl #19
   19984:	andeq	r8, r1, r8, lsl #19
   19988:	andeq	r8, r1, ip, lsl #19
   1998c:	muleq	r1, r0, r9
   19990:	muleq	r1, r4, r9
   19994:	muleq	r1, r8, r9
   19998:	muleq	r1, ip, r9
   1999c:	andeq	r8, r1, r0, lsr #19
   199a0:	andeq	r8, r1, r4, lsr #19
   199a4:	andeq	r8, r1, r8, lsr #19
   199a8:	andeq	r8, r1, ip, lsr #19
   199ac:			; <UNDEFINED> instruction: 0x000189b0
   199b0:			; <UNDEFINED> instruction: 0x000189b4
   199b4:			; <UNDEFINED> instruction: 0x000189b8
   199b8:			; <UNDEFINED> instruction: 0x000189bc
   199bc:	andeq	r8, r1, r0, asr #19
   199c0:	andeq	r8, r1, r4, asr #19
   199c4:	andeq	r8, r1, r8, asr #19
   199c8:	ldr	r0, [pc, #12]	; 199dc <free_token_boolean_op@@Base+0x308>
   199cc:	ldr	r1, [pc, #12]	; 199e0 <free_token_boolean_op@@Base+0x30c>
   199d0:	add	r0, pc, r0
   199d4:	add	r1, pc, r1
   199d8:	b	1e0dc <__gcov_flush@@Base+0xb4>
   199dc:			; <UNDEFINED> instruction: 0xfffffd98
   199e0:			; <UNDEFINED> instruction: 0xfffffe24
	...

000199f0 <init_lexer@@Base>:
   199f0:	ldr	r2, [pc, #56]	; 19a30 <init_lexer@@Base+0x40>
   199f4:	add	r3, pc, #36	; 0x24
   199f8:	vld1.64	{d16-d17}, [r3 :128]
   199fc:	add	r2, pc, r2
   19a00:	vld1.64	{d18-d19}, [r2 :128]
   19a04:	vadd.i64	q8, q9, q8
   19a08:	vst1.64	{d16-d17}, [r2 :128]
   19a0c:	mov	r2, #0
   19a10:	stm	r0, {r1, r2}
   19a14:	str	r2, [r0, #8]
   19a18:	bx	lr
   19a1c:	nop	{0}
   19a20:	andeq	r0, r0, r1
   19a24:	andeq	r0, r0, r0
   19a28:	andeq	r0, r0, r1
   19a2c:	andeq	r0, r0, r0
   19a30:	andeq	r8, r1, ip, lsr r9
   19a34:	nop	{0}
   19a38:	nop	{0}
   19a3c:	nop	{0}

00019a40 <destroy_lexer@@Base>:
   19a40:	push	{r4, sl, fp, lr}
   19a44:	add	fp, sp, #8
   19a48:	ldr	r4, [pc, #176]	; 19b00 <destroy_lexer@@Base+0xc0>
   19a4c:	ldr	r1, [pc, #176]	; 19b04 <destroy_lexer@@Base+0xc4>
   19a50:	ldr	r1, [pc, r1]
   19a54:	add	r4, pc, r4
   19a58:	mov	r2, r4
   19a5c:	adds	r1, r1, #1
   19a60:	str	r1, [r4]
   19a64:	ldr	r1, [r4, #4]
   19a68:	adc	r1, r1, #0
   19a6c:	str	r1, [r4, #4]
   19a70:	mov	r1, #16
   19a74:	ldr	r0, [r0, #4]
   19a78:	cmp	r0, #0
   19a7c:	movwne	r1, #8
   19a80:	ldr	r1, [r2, r1]!
   19a84:	adds	r1, r1, #1
   19a88:	str	r1, [r2]
   19a8c:	ldr	r1, [r2, #4]
   19a90:	adc	r1, r1, #0
   19a94:	cmp	r0, #0
   19a98:	str	r1, [r2, #4]
   19a9c:	beq	19ad0 <destroy_lexer@@Base+0x90>
   19aa0:	ldr	r1, [pc, #96]	; 19b08 <destroy_lexer@@Base+0xc8>
   19aa4:	add	r2, pc, #68	; 0x44
   19aa8:	vld1.64	{d16-d17}, [r2 :128]
   19aac:	ldrd	r2, [r4, #24]
   19ab0:	add	r1, pc, r1
   19ab4:	vld1.64	{d18-d19}, [r1 :128]
   19ab8:	adds	r2, r2, #1
   19abc:	adc	r3, r3, #0
   19ac0:	strd	r2, [r4, #24]
   19ac4:	vadd.i64	q8, q9, q8
   19ac8:	vst1.64	{d16-d17}, [r1 :128]
   19acc:	bl	12620 <free@plt>
   19ad0:	ldrd	r0, [r4, #32]
   19ad4:	adds	r0, r0, #1
   19ad8:	adc	r1, r1, #0
   19adc:	strd	r0, [r4, #32]
   19ae0:	pop	{r4, sl, fp, pc}
   19ae4:	nop	{0}
   19ae8:	nop	{0}
   19aec:	nop	{0}
   19af0:	andeq	r0, r0, r1
   19af4:	andeq	r0, r0, r0
   19af8:	andeq	r0, r0, r1
   19afc:	andeq	r0, r0, r0
   19b00:	strdeq	r8, [r1], -r4
   19b04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19b08:	andeq	r8, r1, r8, asr #17
   19b0c:	nop	{0}

00019b10 <free_stack_base@@Base>:
   19b10:	ldr	r1, [pc, #40]	; 19b40 <free_stack_base@@Base+0x30>
   19b14:	add	r2, pc, #20
   19b18:	vld1.64	{d16-d17}, [r2 :128]
   19b1c:	add	r1, pc, r1
   19b20:	vld1.64	{d18-d19}, [r1 :128]
   19b24:	vadd.i64	q8, q9, q8
   19b28:	vst1.64	{d16-d17}, [r1 :128]
   19b2c:	b	12620 <free@plt>
   19b30:	andeq	r0, r0, r1
   19b34:	andeq	r0, r0, r0
   19b38:	andeq	r0, r0, r1
   19b3c:	andeq	r0, r0, r0
   19b40:	andeq	r8, r1, ip, asr r8
   19b44:	nop	{0}
   19b48:	nop	{0}
   19b4c:	nop	{0}

00019b50 <push_back@@Base>:
   19b50:	push	{r4, r5, fp, lr}
   19b54:	add	fp, sp, #8
   19b58:	mov	r5, r0
   19b5c:	ldr	r0, [pc, #76]	; 19bb0 <push_back@@Base+0x60>
   19b60:	mov	r4, r1
   19b64:	add	r1, pc, #52	; 0x34
   19b68:	vld1.64	{d16-d17}, [r1 :128]
   19b6c:	add	r0, pc, r0
   19b70:	vld1.64	{d18-d19}, [r0 :128]
   19b74:	vadd.i64	q8, q9, q8
   19b78:	vst1.64	{d16-d17}, [r0 :128]
   19b7c:	mov	r0, #8
   19b80:	bl	126b0 <malloc@plt>
   19b84:	ldr	r1, [r5, #4]
   19b88:	stm	r0, {r1, r4}
   19b8c:	str	r0, [r5, #4]
   19b90:	pop	{r4, r5, fp, pc}
   19b94:	nop	{0}
   19b98:	nop	{0}
   19b9c:	nop	{0}
   19ba0:	andeq	r0, r0, r1
   19ba4:	andeq	r0, r0, r0
   19ba8:	andeq	r0, r0, r1
   19bac:	andeq	r0, r0, r0
   19bb0:	andeq	r8, r1, ip, lsl r8
   19bb4:	nop	{0}
   19bb8:	nop	{0}
   19bbc:	nop	{0}

00019bc0 <get_char@@Base>:
   19bc0:	ldr	r1, [pc, #72]	; 19c10 <get_char@@Base+0x50>
   19bc4:	add	r2, pc, #52	; 0x34
   19bc8:	vld1.64	{d16-d17}, [r2 :128]
   19bcc:	add	r1, pc, r1
   19bd0:	vld1.64	{d18-d19}, [r1 :128]
   19bd4:	vadd.i64	q8, q9, q8
   19bd8:	vst1.64	{d16-d17}, [r1 :128]
   19bdc:	ldr	r2, [r0, #8]
   19be0:	ldr	r1, [r0]
   19be4:	add	r3, r2, #1
   19be8:	str	r3, [r0, #8]
   19bec:	ldrb	r0, [r1, r2]
   19bf0:	bx	lr
   19bf4:	nop	{0}
   19bf8:	nop	{0}
   19bfc:	nop	{0}
   19c00:	andeq	r0, r0, r1
   19c04:	andeq	r0, r0, r0
   19c08:	andeq	r0, r0, r1
   19c0c:	andeq	r0, r0, r0
   19c10:	andeq	r8, r1, ip, asr #15

00019c14 <push_back_chars@@Base>:
   19c14:	push	{fp, lr}
   19c18:	mov	fp, sp
   19c1c:	ldr	ip, [pc, #148]	; 19cb8 <push_back_chars@@Base+0xa4>
   19c20:	ldr	r3, [pc, #148]	; 19cbc <push_back_chars@@Base+0xa8>
   19c24:	mov	r2, #16
   19c28:	ldr	r3, [pc, r3]
   19c2c:	add	ip, pc, ip
   19c30:	adds	r3, r3, #1
   19c34:	str	r3, [ip]
   19c38:	ldr	r3, [ip, #4]
   19c3c:	adc	r3, r3, #0
   19c40:	str	r3, [ip, #4]
   19c44:	mov	r3, ip
   19c48:	ldr	lr, [r0, #8]
   19c4c:	cmp	lr, r1
   19c50:	movwcs	r2, #8
   19c54:	ldr	r2, [r3, r2]!
   19c58:	adds	r2, r2, #1
   19c5c:	str	r2, [r3]
   19c60:	ldr	r2, [r3, #4]
   19c64:	adc	r2, r2, #0
   19c68:	cmp	lr, r1
   19c6c:	str	r2, [r3, #4]
   19c70:	bcc	19c90 <push_back_chars@@Base+0x7c>
   19c74:	ldrd	r2, [ip, #24]
   19c78:	sub	r1, lr, r1
   19c7c:	adds	r2, r2, #1
   19c80:	adc	r3, r3, #0
   19c84:	strd	r2, [ip, #24]
   19c88:	str	r1, [r0, #8]
   19c8c:	pop	{fp, pc}
   19c90:	ldr	r0, [pc, #40]	; 19cc0 <push_back_chars@@Base+0xac>
   19c94:	mov	r1, #32
   19c98:	mov	r2, #1
   19c9c:	ldr	r0, [pc, r0]
   19ca0:	ldr	r3, [r0]
   19ca4:	ldr	r0, [pc, #24]	; 19cc4 <push_back_chars@@Base+0xb0>
   19ca8:	add	r0, pc, r0
   19cac:	bl	1268c <fwrite@plt>
   19cb0:	mov	r0, #1
   19cb4:	bl	126ec <exit@plt>
   19cb8:	andeq	r8, r1, ip, ror r7
   19cbc:	andeq	r8, r1, r0, lsl #15
   19cc0:	andeq	r7, r1, ip, ror #8
   19cc4:	strdeq	r5, [r0], -r0
   19cc8:	nop	{0}
   19ccc:	nop	{0}

00019cd0 <push_back_one_char@@Base>:
   19cd0:	push	{r4, r5, fp, lr}
   19cd4:	add	fp, sp, #8
   19cd8:	ldr	r2, [pc, #192]	; 19da0 <push_back_one_char@@Base+0xd0>
   19cdc:	add	r1, pc, #172	; 0xac
   19ce0:	vld1.64	{d16-d17}, [r1 :128]
   19ce4:	add	r2, pc, r2
   19ce8:	vld1.64	{d18-d19}, [r2 :128]
   19cec:	ldr	ip, [pc, #176]	; 19da4 <push_back_one_char@@Base+0xd4>
   19cf0:	ldr	r3, [pc, #176]	; 19da8 <push_back_one_char@@Base+0xd8>
   19cf4:	ldr	r3, [pc, r3]
   19cf8:	add	ip, pc, ip
   19cfc:	vadd.i64	q8, q9, q8
   19d00:	vst1.64	{d16-d17}, [r2 :128]
   19d04:	mov	r1, ip
   19d08:	adds	r3, r3, #1
   19d0c:	str	r3, [ip]
   19d10:	ldr	r3, [ip, #4]
   19d14:	adc	r3, r3, #0
   19d18:	str	r3, [ip, #4]
   19d1c:	mov	r3, #16
   19d20:	ldr	r2, [r0, #8]
   19d24:	cmp	r2, #0
   19d28:	movwne	r3, #8
   19d2c:	ldr	r3, [r1, r3]!
   19d30:	adds	r3, r3, #1
   19d34:	str	r3, [r1]
   19d38:	ldr	r3, [r1, #4]
   19d3c:	adc	r3, r3, #0
   19d40:	cmp	r2, #0
   19d44:	str	r3, [r1, #4]
   19d48:	beq	19d68 <push_back_one_char@@Base+0x98>
   19d4c:	ldrd	r4, [ip, #24]
   19d50:	sub	r1, r2, #1
   19d54:	adds	r4, r4, #1
   19d58:	adc	r5, r5, #0
   19d5c:	strd	r4, [ip, #24]
   19d60:	str	r1, [r0, #8]
   19d64:	pop	{r4, r5, fp, pc}
   19d68:	ldr	r0, [pc, #60]	; 19dac <push_back_one_char@@Base+0xdc>
   19d6c:	mov	r1, #32
   19d70:	mov	r2, #1
   19d74:	ldr	r0, [pc, r0]
   19d78:	ldr	r3, [r0]
   19d7c:	ldr	r0, [pc, #44]	; 19db0 <push_back_one_char@@Base+0xe0>
   19d80:	add	r0, pc, r0
   19d84:	bl	1268c <fwrite@plt>
   19d88:	mov	r0, #1
   19d8c:	bl	126ec <exit@plt>
   19d90:	andeq	r0, r0, r1
   19d94:	andeq	r0, r0, r0
   19d98:	andeq	r0, r0, r1
   19d9c:	andeq	r0, r0, r0
   19da0:	andeq	r8, r1, r4, ror #13
   19da4:			; <UNDEFINED> instruction: 0x000186b0
   19da8:			; <UNDEFINED> instruction: 0x000186b4
   19dac:	muleq	r1, r4, r3
   19db0:	andeq	r5, r0, r8, lsl r6
   19db4:	nop	{0}
   19db8:	nop	{0}
   19dbc:	nop	{0}

00019dc0 <next@@Base>:
   19dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc4:	add	fp, sp, #28
   19dc8:	sub	sp, sp, #524	; 0x20c
   19dcc:	ldr	r7, [pc, #4008]	; 1ad7c <next@@Base+0xfbc>
   19dd0:	mov	r4, r0
   19dd4:	ldr	r0, [pc, #4004]	; 1ad80 <next@@Base+0xfc0>
   19dd8:	mov	r1, #16
   19ddc:	ldr	r0, [pc, r0]
   19de0:	add	r7, pc, r7
   19de4:	mov	r2, r7
   19de8:	adds	r0, r0, #1
   19dec:	str	r0, [r7]
   19df0:	ldr	r0, [r7, #4]
   19df4:	adc	r0, r0, #0
   19df8:	str	r0, [r7, #4]
   19dfc:	ldr	r0, [r4, #4]
   19e00:	cmp	r0, #0
   19e04:	movwne	r1, #8
   19e08:	ldr	r1, [r2, r1]!
   19e0c:	adds	r1, r1, #1
   19e10:	str	r1, [r2]
   19e14:	ldr	r1, [r2, #4]
   19e18:	adc	r1, r1, #0
   19e1c:	cmp	r0, #0
   19e20:	str	r1, [r2, #4]
   19e24:	beq	19e80 <next@@Base+0xc0>
   19e28:	ldrd	r2, [r7, #24]
   19e2c:	adds	r2, r2, #1
   19e30:	adc	r3, r3, #0
   19e34:	strd	r2, [r7, #24]
   19e38:	ldr	r1, [r0]
   19e3c:	str	r1, [r4, #4]
   19e40:	mov	r1, #0
   19e44:	ldr	r6, [r0, #4]
   19e48:	str	r1, [r0, #4]
   19e4c:	ldr	r1, [pc, #3888]	; 1ad84 <next@@Base+0xfc4>
   19e50:	add	r2, pc, #24
   19e54:	vld1.64	{d16-d17}, [r2 :128]
   19e58:	add	r1, pc, r1
   19e5c:	vld1.64	{d18-d19}, [r1 :128]
   19e60:	vadd.i64	q8, q9, q8
   19e64:	vst1.64	{d16-d17}, [r1 :128]
   19e68:	bl	12620 <free@plt>
   19e6c:	b	1a40c <next@@Base+0x64c>
   19e70:	andeq	r0, r0, r1
   19e74:	andeq	r0, r0, r0
   19e78:	andeq	r0, r0, r1
   19e7c:	andeq	r0, r0, r0
   19e80:	ldr	r5, [pc, #3840]	; 1ad88 <next@@Base+0xfc8>
   19e84:	sub	r0, pc, #28
   19e88:	vld1.64	{d16-d17}, [r0 :128]
   19e8c:	ldrd	r0, [r7, #32]
   19e90:	add	r5, pc, r5
   19e94:	vld1.64	{d18-d19}, [r5 :128]
   19e98:	adds	r0, r0, #1
   19e9c:	adc	r1, r1, #0
   19ea0:	strd	r0, [r7, #32]
   19ea4:	vadd.i64	q8, q9, q8
   19ea8:	vst1.64	{d16-d17}, [r5 :128]
   19eac:	ldr	r1, [r4, #8]
   19eb0:	ldr	r0, [r4]
   19eb4:	add	r2, r1, #1
   19eb8:	str	r2, [r4, #8]
   19ebc:	ldrb	r8, [r0, r1]
   19ec0:	mov	r0, #48	; 0x30
   19ec4:	mov	r1, r7
   19ec8:	cmp	r8, #0
   19ecc:	movwne	r0, #40	; 0x28
   19ed0:	ldr	r0, [r1, r0]!
   19ed4:	adds	r0, r0, #1
   19ed8:	str	r0, [r1]
   19edc:	ldr	r0, [r1, #4]
   19ee0:	adc	r0, r0, #0
   19ee4:	cmp	r8, #0
   19ee8:	str	r0, [r1, #4]
   19eec:	beq	1a3e4 <next@@Base+0x624>
   19ef0:	ldr	r6, [pc, #3732]	; 1ad8c <next@@Base+0xfcc>
   19ef4:	mov	r0, #0
   19ef8:	mov	r9, #0
   19efc:	mov	sl, #0
   19f00:	str	r0, [sp, #4]
   19f04:	add	r6, pc, r6
   19f08:	b	1a27c <next@@Base+0x4bc>
   19f0c:	cmp	r2, #48	; 0x30
   19f10:	mov	r0, #176	; 0xb0
   19f14:	mov	r1, r7
   19f18:	ldr	sl, [sp, #4]
   19f1c:	movweq	r0, #168	; 0xa8
   19f20:	ldr	r0, [r1, r0]!
   19f24:	adds	r0, r0, #1
   19f28:	str	r0, [r1]
   19f2c:	ldr	r0, [r1, #4]
   19f30:	adc	r0, r0, #0
   19f34:	cmp	r2, #48	; 0x30
   19f38:	str	r0, [r1, #4]
   19f3c:	beq	1ac20 <next@@Base+0xe60>
   19f40:	mov	r0, #200	; 0xc8
   19f44:	mov	r1, r7
   19f48:	movwhi	r0, #192	; 0xc0
   19f4c:	ldr	r0, [r1, r0]!
   19f50:	adds	r0, r0, #1
   19f54:	str	r0, [r1]
   19f58:	ldr	r0, [r1, #4]
   19f5c:	adc	r0, r0, #0
   19f60:	cmp	r2, #49	; 0x31
   19f64:	str	r0, [r1, #4]
   19f68:	bcc	1ac48 <next@@Base+0xe88>
   19f6c:	cmp	r2, #58	; 0x3a
   19f70:	mov	r0, #216	; 0xd8
   19f74:	mov	r1, r7
   19f78:	movwcc	r0, #208	; 0xd0
   19f7c:	ldr	r0, [r1, r0]!
   19f80:	adds	r0, r0, #1
   19f84:	str	r0, [r1]
   19f88:	ldr	r0, [r1, #4]
   19f8c:	adc	r0, r0, #0
   19f90:	cmp	r2, #57	; 0x39
   19f94:	str	r0, [r1, #4]
   19f98:	bhi	19fd8 <next@@Base+0x218>
   19f9c:	sub	r0, pc, #308	; 0x134
   19fa0:	vld1.64	{d18-d19}, [r5 :128]
   19fa4:	vld1.64	{d16-d17}, [r0 :128]
   19fa8:	add	r0, sp, #8
   19fac:	strb	r8, [r0, sl]
   19fb0:	ldrd	r0, [r7, #224]	; 0xe0
   19fb4:	add	sl, sl, #1
   19fb8:	str	sl, [sp, #4]
   19fbc:	mov	sl, #1
   19fc0:	vadd.i64	q8, q9, q8
   19fc4:	adds	r0, r0, #1
   19fc8:	vst1.64	{d16-d17}, [r5 :128]
   19fcc:	adc	r1, r1, #0
   19fd0:	strd	r0, [r7, #224]	; 0xe0
   19fd4:	b	1a378 <next@@Base+0x5b8>
   19fd8:	ldrd	r0, [r7, #240]	; 0xf0
   19fdc:	ldr	r3, [r7, #264]	; 0x108
   19fe0:	mov	ip, r5
   19fe4:	ldr	r5, [r7, #268]	; 0x10c
   19fe8:	adds	r0, r0, #1
   19fec:	adc	r1, r1, #0
   19ff0:	adds	r3, r3, #1
   19ff4:	str	r3, [r7, #264]	; 0x108
   19ff8:	strd	r0, [r7, #240]	; 0xf0
   19ffc:	adc	r0, r5, #0
   1a000:	cmp	r2, #123	; 0x7b
   1a004:	mov	r1, r7
   1a008:	str	r0, [r7, #268]	; 0x10c
   1a00c:	mov	r0, #288	; 0x120
   1a010:	movweq	r0, #280	; 0x118
   1a014:	ldr	r0, [r1, r0]!
   1a018:	adds	r0, r0, #1
   1a01c:	str	r0, [r1]
   1a020:	ldr	r0, [r1, #4]
   1a024:	adc	r0, r0, #0
   1a028:	cmp	r2, #123	; 0x7b
   1a02c:	str	r0, [r1, #4]
   1a030:	beq	1acf8 <next@@Base+0xf38>
   1a034:	cmp	r2, #125	; 0x7d
   1a038:	mov	r0, #312	; 0x138
   1a03c:	mov	r1, r7
   1a040:	movweq	r0, #304	; 0x130
   1a044:	ldr	r0, [r1, r0]!
   1a048:	adds	r0, r0, #1
   1a04c:	str	r0, [r1]
   1a050:	ldr	r0, [r1, #4]
   1a054:	adc	r0, r0, #0
   1a058:	cmp	r2, #125	; 0x7d
   1a05c:	str	r0, [r1, #4]
   1a060:	beq	1ad24 <next@@Base+0xf64>
   1a064:	cmp	r2, #59	; 0x3b
   1a068:	mov	r0, #336	; 0x150
   1a06c:	mov	r1, r7
   1a070:	movweq	r0, #328	; 0x148
   1a074:	ldr	r0, [r1, r0]!
   1a078:	adds	r0, r0, #1
   1a07c:	str	r0, [r1]
   1a080:	ldr	r0, [r1, #4]
   1a084:	adc	r0, r0, #0
   1a088:	cmp	r2, #59	; 0x3b
   1a08c:	str	r0, [r1, #4]
   1a090:	beq	1ad50 <next@@Base+0xf90>
   1a094:	cmp	r2, #101	; 0x65
   1a098:	mov	r0, #360	; 0x168
   1a09c:	mov	r1, r7
   1a0a0:	movweq	r0, #352	; 0x160
   1a0a4:	ldr	r0, [r1, r0]!
   1a0a8:	adds	r0, r0, #1
   1a0ac:	str	r0, [r1]
   1a0b0:	ldr	r0, [r1, #4]
   1a0b4:	adc	r0, r0, #0
   1a0b8:	cmp	r2, #101	; 0x65
   1a0bc:	str	r0, [r1, #4]
   1a0c0:	bne	1a110 <next@@Base+0x350>
   1a0c4:	sub	r0, pc, #604	; 0x25c
   1a0c8:	mov	r1, #101	; 0x65
   1a0cc:	vld1.64	{d18-d19}, [ip :128]
   1a0d0:	mov	r5, ip
   1a0d4:	vld1.64	{d16-d17}, [r0 :128]
   1a0d8:	add	r0, sp, #8
   1a0dc:	strb	r1, [r0, sl]
   1a0e0:	ldr	r0, [r7, #368]	; 0x170
   1a0e4:	ldr	r1, [r7, #372]	; 0x174
   1a0e8:	add	sl, sl, #1
   1a0ec:	str	sl, [sp, #4]
   1a0f0:	mov	sl, #5
   1a0f4:	vadd.i64	q8, q9, q8
   1a0f8:	adds	r0, r0, #1
   1a0fc:	vst1.64	{d16-d17}, [r5 :128]
   1a100:	adc	r1, r1, #0
   1a104:	str	r0, [r7, #368]	; 0x170
   1a108:	str	r1, [r7, #372]	; 0x174
   1a10c:	b	1a378 <next@@Base+0x5b8>
   1a110:	cmp	r2, #105	; 0x69
   1a114:	mov	r0, #384	; 0x180
   1a118:	mov	r1, r7
   1a11c:	mov	r5, ip
   1a120:	movweq	r0, #376	; 0x178
   1a124:	ldr	r0, [r1, r0]!
   1a128:	adds	r0, r0, #1
   1a12c:	str	r0, [r1]
   1a130:	ldr	r0, [r1, #4]
   1a134:	adc	r0, r0, #0
   1a138:	cmp	r2, #105	; 0x69
   1a13c:	str	r0, [r1, #4]
   1a140:	bne	1a18c <next@@Base+0x3cc>
   1a144:	sub	r0, pc, #732	; 0x2dc
   1a148:	mov	r1, #105	; 0x69
   1a14c:	vld1.64	{d18-d19}, [r5 :128]
   1a150:	vld1.64	{d16-d17}, [r0 :128]
   1a154:	add	r0, sp, #8
   1a158:	strb	r1, [r0, sl]
   1a15c:	ldr	r0, [r7, #392]	; 0x188
   1a160:	ldr	r1, [r7, #396]	; 0x18c
   1a164:	add	sl, sl, #1
   1a168:	str	sl, [sp, #4]
   1a16c:	mov	sl, #2
   1a170:	vadd.i64	q8, q9, q8
   1a174:	adds	r0, r0, #1
   1a178:	vst1.64	{d16-d17}, [r5 :128]
   1a17c:	adc	r1, r1, #0
   1a180:	str	r0, [r7, #392]	; 0x188
   1a184:	str	r1, [r7, #396]	; 0x18c
   1a188:	b	1a378 <next@@Base+0x5b8>
   1a18c:	cmp	r2, #109	; 0x6d
   1a190:	mov	r0, #408	; 0x198
   1a194:	mov	r1, r7
   1a198:	movweq	r0, #400	; 0x190
   1a19c:	ldr	r0, [r1, r0]!
   1a1a0:	adds	r0, r0, #1
   1a1a4:	str	r0, [r1]
   1a1a8:	ldr	r0, [r1, #4]
   1a1ac:	adc	r0, r0, #0
   1a1b0:	cmp	r2, #109	; 0x6d
   1a1b4:	str	r0, [r1, #4]
   1a1b8:	bne	1a204 <next@@Base+0x444>
   1a1bc:	sub	r0, pc, #852	; 0x354
   1a1c0:	mov	r1, #109	; 0x6d
   1a1c4:	vld1.64	{d18-d19}, [r5 :128]
   1a1c8:	vld1.64	{d16-d17}, [r0 :128]
   1a1cc:	add	r0, sp, #8
   1a1d0:	strb	r1, [r0, sl]
   1a1d4:	ldr	r0, [r7, #416]	; 0x1a0
   1a1d8:	ldr	r1, [r7, #420]	; 0x1a4
   1a1dc:	add	sl, sl, #1
   1a1e0:	str	sl, [sp, #4]
   1a1e4:	mov	sl, #3
   1a1e8:	vadd.i64	q8, q9, q8
   1a1ec:	adds	r0, r0, #1
   1a1f0:	vst1.64	{d16-d17}, [r5 :128]
   1a1f4:	adc	r1, r1, #0
   1a1f8:	str	r0, [r7, #416]	; 0x1a0
   1a1fc:	str	r1, [r7, #420]	; 0x1a4
   1a200:	b	1a378 <next@@Base+0x5b8>
   1a204:	cmp	r2, #114	; 0x72
   1a208:	mov	r0, #432	; 0x1b0
   1a20c:	mov	r1, r7
   1a210:	movweq	r0, #424	; 0x1a8
   1a214:	ldr	r0, [r1, r0]!
   1a218:	adds	r0, r0, #1
   1a21c:	str	r0, [r1]
   1a220:	ldr	r0, [r1, #4]
   1a224:	adc	r0, r0, #0
   1a228:	cmp	r2, #114	; 0x72
   1a22c:	str	r0, [r1, #4]
   1a230:	bne	1b13c <next@@Base+0x137c>
   1a234:	sub	r0, pc, #972	; 0x3cc
   1a238:	mov	r1, #114	; 0x72
   1a23c:	vld1.64	{d18-d19}, [r5 :128]
   1a240:	vld1.64	{d16-d17}, [r0 :128]
   1a244:	add	r0, sp, #8
   1a248:	strb	r1, [r0, sl]
   1a24c:	ldr	r0, [r7, #440]	; 0x1b8
   1a250:	ldr	r1, [r7, #444]	; 0x1bc
   1a254:	add	sl, sl, #1
   1a258:	str	sl, [sp, #4]
   1a25c:	mov	sl, #4
   1a260:	vadd.i64	q8, q9, q8
   1a264:	adds	r0, r0, #1
   1a268:	vst1.64	{d16-d17}, [r5 :128]
   1a26c:	adc	r1, r1, #0
   1a270:	str	r0, [r7, #440]	; 0x1b8
   1a274:	str	r1, [r7, #444]	; 0x1bc
   1a278:	b	1a378 <next@@Base+0x5b8>
   1a27c:	ldr	r0, [pc, #3764]	; 1b138 <next@@Base+0x1378>
   1a280:	cmp	sl, #5
   1a284:	add	r0, pc, r0
   1a288:	str	r9, [r0]
   1a28c:	bhi	1a390 <next@@Base+0x5d0>
   1a290:	add	r0, pc, #4
   1a294:	ldr	r1, [r0, sl, lsl #2]
   1a298:	add	pc, r0, r1
   1a29c:	andeq	r0, r0, r8, lsl r0
   1a2a0:	muleq	r0, r4, r1
   1a2a4:	andeq	r0, r0, ip, lsr #14
   1a2a8:	andeq	r0, r0, r4, ror r3
   1a2ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a2b0:	strdeq	r0, [r0], -r4
   1a2b4:	add	r0, r6, #8
   1a2b8:	bl	1b580 <next@@Base+0x17c0>
   1a2bc:	uxtb	r2, r8
   1a2c0:	mov	r0, #120	; 0x78
   1a2c4:	mov	r1, r7
   1a2c8:	cmp	r2, #9
   1a2cc:	movweq	r0, #112	; 0x70
   1a2d0:	ldr	r0, [r1, r0]!
   1a2d4:	adds	r0, r0, #1
   1a2d8:	str	r0, [r1]
   1a2dc:	ldr	r0, [r1, #4]
   1a2e0:	adc	r0, r0, #0
   1a2e4:	cmp	r2, #9
   1a2e8:	str	r0, [r1, #4]
   1a2ec:	beq	1a350 <next@@Base+0x590>
   1a2f0:	cmp	r2, #32
   1a2f4:	mov	r0, #136	; 0x88
   1a2f8:	mov	r1, r7
   1a2fc:	movweq	r0, #128	; 0x80
   1a300:	ldr	r0, [r1, r0]!
   1a304:	adds	r0, r0, #1
   1a308:	str	r0, [r1]
   1a30c:	ldr	r0, [r1, #4]
   1a310:	adc	r0, r0, #0
   1a314:	cmp	r2, #32
   1a318:	str	r0, [r1, #4]
   1a31c:	beq	1a350 <next@@Base+0x590>
   1a320:	cmp	r2, #10
   1a324:	mov	r0, #152	; 0x98
   1a328:	mov	r1, r7
   1a32c:	movweq	r0, #144	; 0x90
   1a330:	ldr	r0, [r1, r0]!
   1a334:	adds	r0, r0, #1
   1a338:	str	r0, [r1]
   1a33c:	ldr	r0, [r1, #4]
   1a340:	adc	r0, r0, #0
   1a344:	cmp	r2, #10
   1a348:	str	r0, [r1, #4]
   1a34c:	bne	19f0c <next@@Base+0x14c>
   1a350:	add	r0, pc, #680	; 0x2a8
   1a354:	vld1.64	{d18-d19}, [r5 :128]
   1a358:	mov	sl, #0
   1a35c:	vld1.64	{d16-d17}, [r0 :128]
   1a360:	ldrd	r0, [r7, #160]	; 0xa0
   1a364:	adds	r0, r0, #1
   1a368:	vadd.i64	q8, q9, q8
   1a36c:	adc	r1, r1, #0
   1a370:	vst1.64	{d16-d17}, [r5 :128]
   1a374:	strd	r0, [r7, #160]	; 0xa0
   1a378:	ldr	r1, [r4, #8]
   1a37c:	ldr	r0, [r4]
   1a380:	add	r2, r1, #1
   1a384:	add	r0, r0, r1
   1a388:	str	r2, [r4, #8]
   1a38c:	ldrb	r8, [r0]
   1a390:	mov	r0, r6
   1a394:	bl	1b580 <next@@Base+0x17c0>
   1a398:	ldr	r0, [r7, #984]	; 0x3d8
   1a39c:	ldr	r1, [r7, #988]	; 0x3dc
   1a3a0:	mov	r2, r7
   1a3a4:	adds	r0, r0, #1
   1a3a8:	adc	r1, r1, #0
   1a3ac:	str	r0, [r7, #984]	; 0x3d8
   1a3b0:	uxtb	r0, r8
   1a3b4:	str	r1, [r7, #988]	; 0x3dc
   1a3b8:	cmp	r0, #0
   1a3bc:	mov	r1, #48	; 0x30
   1a3c0:	movwne	r1, #40	; 0x28
   1a3c4:	ldr	r1, [r2, r1]!
   1a3c8:	adds	r1, r1, #1
   1a3cc:	str	r1, [r2]
   1a3d0:	ldr	r1, [r2, #4]
   1a3d4:	adc	r1, r1, #0
   1a3d8:	cmp	r0, #0
   1a3dc:	str	r1, [r2, #4]
   1a3e0:	bne	1a27c <next@@Base+0x4bc>
   1a3e4:	ldr	r0, [r7, #992]	; 0x3e0
   1a3e8:	ldr	r1, [r7, #996]	; 0x3e4
   1a3ec:	adds	r0, r0, #1
   1a3f0:	adc	r1, r1, #0
   1a3f4:	str	r0, [r7, #992]	; 0x3e0
   1a3f8:	mov	r0, #4
   1a3fc:	str	r1, [r7, #996]	; 0x3e4
   1a400:	bl	126b0 <malloc@plt>
   1a404:	mov	r6, r0
   1a408:	bl	192a0 <init_token_eof@@Base>
   1a40c:	ldr	r0, [r7, #1000]	; 0x3e8
   1a410:	ldr	r1, [r7, #1004]	; 0x3ec
   1a414:	adds	r0, r0, #1
   1a418:	adc	r1, r1, #0
   1a41c:	str	r0, [r7, #1000]	; 0x3e8
   1a420:	mov	r0, r6
   1a424:	str	r1, [r7, #1004]	; 0x3ec
   1a428:	sub	sp, fp, #28
   1a42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a430:	add	sl, r6, #16
   1a434:	mov	r0, sl
   1a438:	bl	1b580 <next@@Base+0x17c0>
   1a43c:	sub	r0, r8, #48	; 0x30
   1a440:	mov	r1, #704	; 0x2c0
   1a444:	mov	r2, r7
   1a448:	ldr	r6, [sp, #4]
   1a44c:	add	r9, sp, #8
   1a450:	uxtb	r0, r0
   1a454:	cmp	r0, #10
   1a458:	movwcc	r1, #696	; 0x2b8
   1a45c:	ldr	r1, [r2, r1]!
   1a460:	adds	r1, r1, #1
   1a464:	str	r1, [r2]
   1a468:	ldr	r1, [r2, #4]
   1a46c:	adc	r1, r1, #0
   1a470:	cmp	r0, #9
   1a474:	str	r1, [r2, #4]
   1a478:	bhi	1a504 <next@@Base+0x744>
   1a47c:	add	r0, pc, #380	; 0x17c
   1a480:	vld1.64	{d18-d19}, [r5 :128]
   1a484:	ldr	r1, [r7, #716]	; 0x2cc
   1a488:	strb	r8, [r9, r6]
   1a48c:	vld1.64	{d16-d17}, [r0 :128]
   1a490:	ldr	r0, [r7, #712]	; 0x2c8
   1a494:	adds	r0, r0, #1
   1a498:	vadd.i64	q8, q9, q8
   1a49c:	adc	r1, r1, #0
   1a4a0:	vst1.64	{d16-d17}, [r5 :128]
   1a4a4:	str	r0, [r7, #712]	; 0x2c8
   1a4a8:	str	r1, [r7, #716]	; 0x2cc
   1a4ac:	ldr	r1, [r4, #8]
   1a4b0:	ldr	r0, [r4]
   1a4b4:	add	r2, r1, #1
   1a4b8:	str	r2, [r4, #8]
   1a4bc:	ldrb	r8, [r0, r1]
   1a4c0:	mov	r0, sl
   1a4c4:	bl	1b580 <next@@Base+0x17c0>
   1a4c8:	sub	r0, r8, #48	; 0x30
   1a4cc:	mov	r1, #704	; 0x2c0
   1a4d0:	mov	r2, r7
   1a4d4:	add	r6, r6, #1
   1a4d8:	uxtb	r0, r0
   1a4dc:	cmp	r0, #10
   1a4e0:	movwcc	r1, #696	; 0x2b8
   1a4e4:	ldr	r1, [r2, r1]!
   1a4e8:	adds	r1, r1, #1
   1a4ec:	str	r1, [r2]
   1a4f0:	ldr	r1, [r2, #4]
   1a4f4:	adc	r1, r1, #0
   1a4f8:	cmp	r0, #10
   1a4fc:	str	r1, [r2, #4]
   1a500:	bcc	1a47c <next@@Base+0x6bc>
   1a504:	ldr	r1, [pc, #4072]	; 1b4f4 <next@@Base+0x1734>
   1a508:	add	r0, pc, #240	; 0xf0
   1a50c:	vld1.64	{d16-d17}, [r0 :128]
   1a510:	add	r1, pc, r1
   1a514:	vld1.64	{d18-d19}, [r1 :128]
   1a518:	ldr	r0, [pc, #4056]	; 1b4f8 <next@@Base+0x1738>
   1a51c:	ldr	r2, [pc, #4056]	; 1b4fc <next@@Base+0x173c>
   1a520:	ldr	r2, [pc, r2]
   1a524:	add	r0, pc, r0
   1a528:	ldr	r3, [r7, #720]	; 0x2d0
   1a52c:	ldr	r5, [r7, #724]	; 0x2d4
   1a530:	vadd.i64	q8, q9, q8
   1a534:	vst1.64	{d16-d17}, [r1 :128]
   1a538:	adds	r2, r2, #1
   1a53c:	str	r2, [r0]
   1a540:	ldr	r2, [r0, #4]
   1a544:	adc	r2, r2, #0
   1a548:	adds	r3, r3, #1
   1a54c:	adc	r1, r5, #0
   1a550:	str	r2, [r0, #4]
   1a554:	str	r3, [r7, #720]	; 0x2d0
   1a558:	mov	r2, #16
   1a55c:	mov	r3, r0
   1a560:	str	r1, [r7, #724]	; 0x2d4
   1a564:	ldr	r1, [r4, #8]
   1a568:	cmp	r1, #0
   1a56c:	movwne	r2, #8
   1a570:	ldr	r2, [r3, r2]!
   1a574:	adds	r2, r2, #1
   1a578:	str	r2, [r3]
   1a57c:	ldr	r2, [r3, #4]
   1a580:	adc	r2, r2, #0
   1a584:	cmp	r1, #0
   1a588:	str	r2, [r3, #4]
   1a58c:	beq	1b4bc <next@@Base+0x16fc>
   1a590:	ldrd	r2, [r0, #24]
   1a594:	adds	r2, r2, #1
   1a598:	adc	r3, r3, #0
   1a59c:	strd	r2, [r0, #24]
   1a5a0:	sub	r0, r1, #1
   1a5a4:	str	r0, [r4, #8]
   1a5a8:	mov	r0, #0
   1a5ac:	strb	r0, [r9, r6]
   1a5b0:	mov	r0, #8
   1a5b4:	bl	126b0 <malloc@plt>
   1a5b8:	mov	r6, r0
   1a5bc:	ldr	r0, [pc, #3980]	; 1b550 <next@@Base+0x1790>
   1a5c0:	add	r1, pc, #56	; 0x38
   1a5c4:	mov	r2, #10
   1a5c8:	vld1.64	{d16-d17}, [r1 :128]
   1a5cc:	mov	r1, #0
   1a5d0:	add	r0, pc, r0
   1a5d4:	vld1.64	{d18-d19}, [r0 :128]
   1a5d8:	vadd.i64	q8, q9, q8
   1a5dc:	vst1.64	{d16-d17}, [r0 :128]
   1a5e0:	mov	r0, r9
   1a5e4:	bl	125f0 <strtol@plt>
   1a5e8:	mov	r1, r0
   1a5ec:	mov	r0, r6
   1a5f0:	bl	19020 <init_token_int_value@@Base>
   1a5f4:	b	1a40c <next@@Base+0x64c>
   1a5f8:	nop	{0}
   1a5fc:	nop	{0}
   1a600:	andeq	r0, r0, r1
   1a604:	andeq	r0, r0, r0
   1a608:	andeq	r0, r0, r1
   1a60c:	andeq	r0, r0, r0
   1a610:	add	r0, r6, #32
   1a614:	bl	1b580 <next@@Base+0x17c0>
   1a618:	uxtb	r0, r8
   1a61c:	mov	r1, #792	; 0x318
   1a620:	mov	r2, r7
   1a624:	ldr	r6, [sp, #4]
   1a628:	cmp	r0, #97	; 0x61
   1a62c:	movwne	r1, #784	; 0x310
   1a630:	ldr	r1, [r2, r1]!
   1a634:	adds	r1, r1, #1
   1a638:	str	r1, [r2]
   1a63c:	ldr	r1, [r2, #4]
   1a640:	adc	r1, r1, #0
   1a644:	cmp	r0, #97	; 0x61
   1a648:	str	r1, [r2, #4]
   1a64c:	bne	1b4dc <next@@Base+0x171c>
   1a650:	sub	r0, pc, #88	; 0x58
   1a654:	vld1.64	{d16-d17}, [r5 :128]
   1a658:	add	r8, sp, #8
   1a65c:	vld1.64	{d18-d19}, [r0 :128]
   1a660:	mov	r0, #97	; 0x61
   1a664:	strb	r0, [r8, r6]
   1a668:	vadd.i64	q9, q8, q9
   1a66c:	vst1.64	{d18-d19}, [r5 :128]
   1a670:	ldr	r1, [r4, #8]
   1a674:	ldr	r0, [r4]
   1a678:	add	r2, r1, #1
   1a67c:	str	r2, [r4, #8]
   1a680:	mov	r2, r7
   1a684:	ldrb	r0, [r0, r1]
   1a688:	mov	r1, #808	; 0x328
   1a68c:	cmp	r0, #105	; 0x69
   1a690:	movwne	r1, #800	; 0x320
   1a694:	ldr	r1, [r2, r1]!
   1a698:	adds	r1, r1, #1
   1a69c:	str	r1, [r2]
   1a6a0:	ldr	r1, [r2, #4]
   1a6a4:	adc	r1, r1, #0
   1a6a8:	cmp	r0, #105	; 0x69
   1a6ac:	str	r1, [r2, #4]
   1a6b0:	bne	1b4dc <next@@Base+0x171c>
   1a6b4:	add	r0, r8, r6
   1a6b8:	mov	r1, #105	; 0x69
   1a6bc:	strb	r1, [r0, #1]
   1a6c0:	vmov.32	r1, d16[0]
   1a6c4:	adds	r1, r1, #2
   1a6c8:	str	r1, [r5]
   1a6cc:	vmov.32	r1, d16[1]
   1a6d0:	adc	r1, r1, #0
   1a6d4:	str	r1, [r5, #4]
   1a6d8:	ldrd	r2, [r5, #8]
   1a6dc:	adds	r1, r2, #1
   1a6e0:	str	r1, [r5, #8]
   1a6e4:	adc	r1, r3, #0
   1a6e8:	str	r1, [r5, #12]
   1a6ec:	ldr	r2, [r4, #8]
   1a6f0:	ldr	r1, [r4]
   1a6f4:	add	r3, r2, #1
   1a6f8:	str	r3, [r4, #8]
   1a6fc:	mov	r3, r7
   1a700:	ldrb	r1, [r1, r2]
   1a704:	mov	r2, #824	; 0x338
   1a708:	cmp	r1, #110	; 0x6e
   1a70c:	movwne	r2, #816	; 0x330
   1a710:	ldr	r2, [r3, r2]!
   1a714:	adds	r2, r2, #1
   1a718:	str	r2, [r3]
   1a71c:	ldr	r2, [r3, #4]
   1a720:	adc	r2, r2, #0
   1a724:	cmp	r1, #110	; 0x6e
   1a728:	str	r2, [r3, #4]
   1a72c:	bne	1b4dc <next@@Base+0x171c>
   1a730:	mov	r1, #110	; 0x6e
   1a734:	strh	r1, [r0, #2]
   1a738:	ldr	r0, [r7, #832]	; 0x340
   1a73c:	ldr	r1, [r7, #836]	; 0x344
   1a740:	adds	r0, r0, #1
   1a744:	adc	r1, r1, #0
   1a748:	str	r0, [r7, #832]	; 0x340
   1a74c:	add	r0, r6, #4
   1a750:	str	r1, [r7, #836]	; 0x344
   1a754:	bl	126b0 <malloc@plt>
   1a758:	add	r6, r6, #3
   1a75c:	mov	r1, r8
   1a760:	mov	r4, r0
   1a764:	mov	r2, r6
   1a768:	bl	1274c <strncpy@plt>
   1a76c:	mov	r0, #0
   1a770:	strb	r0, [r4, r6]
   1a774:	mov	r0, #8
   1a778:	bl	126b0 <malloc@plt>
   1a77c:	mov	r1, r4
   1a780:	mov	r6, r0
   1a784:	bl	19070 <init_token_function@@Base>
   1a788:	b	1a40c <next@@Base+0x64c>
   1a78c:	add	r0, r6, #40	; 0x28
   1a790:	bl	1b580 <next@@Base+0x17c0>
   1a794:	uxtb	r0, r8
   1a798:	mov	r1, #848	; 0x350
   1a79c:	mov	r2, r7
   1a7a0:	ldr	r6, [sp, #4]
   1a7a4:	cmp	r0, #101	; 0x65
   1a7a8:	movwne	r1, #840	; 0x348
   1a7ac:	ldr	r1, [r2, r1]!
   1a7b0:	adds	r1, r1, #1
   1a7b4:	str	r1, [r2]
   1a7b8:	ldr	r1, [r2, #4]
   1a7bc:	adc	r1, r1, #0
   1a7c0:	cmp	r0, #101	; 0x65
   1a7c4:	str	r1, [r2, #4]
   1a7c8:	bne	1b4dc <next@@Base+0x171c>
   1a7cc:	sub	r0, pc, #468	; 0x1d4
   1a7d0:	vld1.64	{d16-d17}, [r5 :128]
   1a7d4:	add	r3, sp, #8
   1a7d8:	vld1.64	{d18-d19}, [r0 :128]
   1a7dc:	mov	r0, #101	; 0x65
   1a7e0:	strb	r0, [r3, r6]
   1a7e4:	vadd.i64	q9, q8, q9
   1a7e8:	vst1.64	{d18-d19}, [r5 :128]
   1a7ec:	ldr	r1, [r4, #8]
   1a7f0:	ldr	r0, [r4]
   1a7f4:	add	r2, r1, #1
   1a7f8:	str	r2, [r4, #8]
   1a7fc:	mov	r2, r7
   1a800:	ldrb	r0, [r0, r1]
   1a804:	mov	r1, #864	; 0x360
   1a808:	cmp	r0, #116	; 0x74
   1a80c:	movwne	r1, #856	; 0x358
   1a810:	ldr	r1, [r2, r1]!
   1a814:	adds	r1, r1, #1
   1a818:	str	r1, [r2]
   1a81c:	ldr	r1, [r2, #4]
   1a820:	adc	r1, r1, #0
   1a824:	cmp	r0, #116	; 0x74
   1a828:	str	r1, [r2, #4]
   1a82c:	bne	1b4dc <next@@Base+0x171c>
   1a830:	add	ip, r3, r6
   1a834:	mov	r1, #116	; 0x74
   1a838:	vmov.32	r2, d16[0]
   1a83c:	vmov.32	r0, d16[1]
   1a840:	strb	r1, [ip, #1]
   1a844:	adds	r1, r2, #2
   1a848:	adc	r3, r0, #0
   1a84c:	str	r1, [r5]
   1a850:	mov	r1, r5
   1a854:	str	r3, [r5, #4]
   1a858:	ldr	r6, [r5, #8]
   1a85c:	ldr	r3, [r5, #12]
   1a860:	adds	r6, r6, #1
   1a864:	adc	r3, r3, #0
   1a868:	str	r6, [r5, #8]
   1a86c:	str	r3, [r5, #12]
   1a870:	ldr	r6, [r4, #8]
   1a874:	ldr	r3, [r4]
   1a878:	add	r5, r6, #1
   1a87c:	str	r5, [r4, #8]
   1a880:	mov	r5, r7
   1a884:	ldrb	r3, [r3, r6]
   1a888:	mov	r6, #880	; 0x370
   1a88c:	cmp	r3, #117	; 0x75
   1a890:	movwne	r6, #872	; 0x368
   1a894:	ldr	r6, [r5, r6]!
   1a898:	adds	r6, r6, #1
   1a89c:	str	r6, [r5]
   1a8a0:	ldr	r6, [r5, #4]
   1a8a4:	adc	r6, r6, #0
   1a8a8:	cmp	r3, #117	; 0x75
   1a8ac:	str	r6, [r5, #4]
   1a8b0:	bne	1b4dc <next@@Base+0x171c>
   1a8b4:	adds	r3, r2, #3
   1a8b8:	str	r3, [r1]
   1a8bc:	mov	r3, #117	; 0x75
   1a8c0:	strb	r3, [ip, #2]
   1a8c4:	adc	r3, r0, #0
   1a8c8:	str	r3, [r1, #4]
   1a8cc:	ldr	r6, [r1, #8]
   1a8d0:	ldr	r3, [r1, #12]
   1a8d4:	adds	r6, r6, #1
   1a8d8:	adc	r3, r3, #0
   1a8dc:	str	r6, [r1, #8]
   1a8e0:	str	r3, [r1, #12]
   1a8e4:	ldr	r6, [r4, #8]
   1a8e8:	ldr	r3, [r4]
   1a8ec:	add	r5, r6, #1
   1a8f0:	str	r5, [r4, #8]
   1a8f4:	mov	r5, r7
   1a8f8:	ldrb	r3, [r3, r6]
   1a8fc:	mov	r6, #896	; 0x380
   1a900:	cmp	r3, #114	; 0x72
   1a904:	movwne	r6, #888	; 0x378
   1a908:	ldr	r6, [r5, r6]!
   1a90c:	adds	r6, r6, #1
   1a910:	str	r6, [r5]
   1a914:	ldr	r6, [r5, #4]
   1a918:	adc	r6, r6, #0
   1a91c:	cmp	r3, #114	; 0x72
   1a920:	str	r6, [r5, #4]
   1a924:	bne	1b4dc <next@@Base+0x171c>
   1a928:	adds	r2, r2, #4
   1a92c:	str	r2, [r1]
   1a930:	mov	r2, #114	; 0x72
   1a934:	adc	r0, r0, #0
   1a938:	strb	r2, [ip, #3]
   1a93c:	str	r0, [r1, #4]
   1a940:	ldr	r0, [r1, #8]
   1a944:	ldr	r3, [r1, #12]
   1a948:	adds	r0, r0, #1
   1a94c:	str	r0, [r1, #8]
   1a950:	adc	r0, r3, #0
   1a954:	str	r0, [r1, #12]
   1a958:	ldr	r1, [r4, #8]
   1a95c:	ldr	r0, [r4]
   1a960:	add	r2, r1, #1
   1a964:	str	r2, [r4, #8]
   1a968:	mov	r2, r7
   1a96c:	ldrb	r0, [r0, r1]
   1a970:	mov	r1, #912	; 0x390
   1a974:	cmp	r0, #110	; 0x6e
   1a978:	movwne	r1, #904	; 0x388
   1a97c:	ldr	r1, [r2, r1]!
   1a980:	adds	r1, r1, #1
   1a984:	str	r1, [r2]
   1a988:	ldr	r1, [r2, #4]
   1a98c:	adc	r1, r1, #0
   1a990:	cmp	r0, #110	; 0x6e
   1a994:	str	r1, [r2, #4]
   1a998:	bne	1b4dc <next@@Base+0x171c>
   1a99c:	ldr	r0, [r7, #920]	; 0x398
   1a9a0:	ldr	r1, [r7, #924]	; 0x39c
   1a9a4:	adds	r0, r0, #1
   1a9a8:	adc	r1, r1, #0
   1a9ac:	str	r0, [r7, #920]	; 0x398
   1a9b0:	mov	r0, #4
   1a9b4:	str	r1, [r7, #924]	; 0x39c
   1a9b8:	bl	126b0 <malloc@plt>
   1a9bc:	mov	r6, r0
   1a9c0:	bl	19200 <init_token_return@@Base>
   1a9c4:	b	1a40c <next@@Base+0x64c>
   1a9c8:	add	r0, r6, #24
   1a9cc:	bl	1b580 <next@@Base+0x17c0>
   1a9d0:	ldr	r1, [pc, #2972]	; 1b574 <next@@Base+0x17b4>
   1a9d4:	ldr	r9, [sp, #4]
   1a9d8:	mov	r0, #1
   1a9dc:	add	r1, pc, r1
   1a9e0:	str	r0, [r1]
   1a9e4:	uxtb	r0, r8
   1a9e8:	cmp	r0, #102	; 0x66
   1a9ec:	beq	1abdc <next@@Base+0xe1c>
   1a9f0:	cmp	r0, #110	; 0x6e
   1a9f4:	add	r8, sp, #8
   1a9f8:	bne	1b4e4 <next@@Base+0x1724>
   1a9fc:	add	r0, r6, #64	; 0x40
   1aa00:	bl	1b580 <next@@Base+0x17c0>
   1aa04:	add	r0, pc, #900	; 0x384
   1aa08:	vld1.64	{d18-d19}, [r5 :128]
   1aa0c:	vld1.64	{d16-d17}, [r0 :128]
   1aa10:	mov	r0, #110	; 0x6e
   1aa14:	strb	r0, [r8, r9]
   1aa18:	vadd.i64	q8, q9, q8
   1aa1c:	vst1.64	{d16-d17}, [r5 :128]
   1aa20:	ldr	r1, [r4, #8]
   1aa24:	ldr	r0, [r4]
   1aa28:	add	r2, r1, #1
   1aa2c:	str	r2, [r4, #8]
   1aa30:	mov	r2, r7
   1aa34:	ldrb	r0, [r0, r1]
   1aa38:	mov	r1, #760	; 0x2f8
   1aa3c:	cmp	r0, #116	; 0x74
   1aa40:	movwne	r1, #752	; 0x2f0
   1aa44:	ldr	r1, [r2, r1]!
   1aa48:	adds	r1, r1, #1
   1aa4c:	str	r1, [r2]
   1aa50:	ldr	r1, [r2, #4]
   1aa54:	adc	r1, r1, #0
   1aa58:	cmp	r0, #116	; 0x74
   1aa5c:	str	r1, [r2, #4]
   1aa60:	bne	1b4dc <next@@Base+0x171c>
   1aa64:	ldr	r0, [r7, #768]	; 0x300
   1aa68:	ldr	r1, [r7, #772]	; 0x304
   1aa6c:	adds	r0, r0, #1
   1aa70:	adc	r1, r1, #0
   1aa74:	str	r0, [r7, #768]	; 0x300
   1aa78:	mov	r0, #4
   1aa7c:	str	r1, [r7, #772]	; 0x304
   1aa80:	bl	126b0 <malloc@plt>
   1aa84:	mov	r6, r0
   1aa88:	bl	18fd0 <init_token_int_type@@Base>
   1aa8c:	b	1a40c <next@@Base+0x64c>
   1aa90:	add	r0, r6, #48	; 0x30
   1aa94:	bl	1b580 <next@@Base+0x17c0>
   1aa98:	uxtb	r0, r8
   1aa9c:	mov	r1, #936	; 0x3a8
   1aaa0:	mov	r2, r7
   1aaa4:	ldr	r6, [sp, #4]
   1aaa8:	cmp	r0, #108	; 0x6c
   1aaac:	movwne	r1, #928	; 0x3a0
   1aab0:	ldr	r1, [r2, r1]!
   1aab4:	adds	r1, r1, #1
   1aab8:	str	r1, [r2]
   1aabc:	ldr	r1, [r2, #4]
   1aac0:	adc	r1, r1, #0
   1aac4:	cmp	r0, #108	; 0x6c
   1aac8:	str	r1, [r2, #4]
   1aacc:	bne	1b4dc <next@@Base+0x171c>
   1aad0:	add	r0, pc, #696	; 0x2b8
   1aad4:	vld1.64	{d16-d17}, [r5 :128]
   1aad8:	add	r3, sp, #8
   1aadc:	vld1.64	{d18-d19}, [r0 :128]
   1aae0:	mov	r0, #108	; 0x6c
   1aae4:	strb	r0, [r3, r6]
   1aae8:	vadd.i64	q9, q8, q9
   1aaec:	vst1.64	{d18-d19}, [r5 :128]
   1aaf0:	ldr	r1, [r4, #8]
   1aaf4:	ldr	r0, [r4]
   1aaf8:	add	r2, r1, #1
   1aafc:	str	r2, [r4, #8]
   1ab00:	mov	r2, r7
   1ab04:	ldrb	r0, [r0, r1]
   1ab08:	mov	r1, #952	; 0x3b8
   1ab0c:	cmp	r0, #115	; 0x73
   1ab10:	movwne	r1, #944	; 0x3b0
   1ab14:	ldr	r1, [r2, r1]!
   1ab18:	adds	r1, r1, #1
   1ab1c:	str	r1, [r2]
   1ab20:	ldr	r1, [r2, #4]
   1ab24:	adc	r1, r1, #0
   1ab28:	cmp	r0, #115	; 0x73
   1ab2c:	str	r1, [r2, #4]
   1ab30:	bne	1b4dc <next@@Base+0x171c>
   1ab34:	add	r0, r3, r6
   1ab38:	mov	r1, #115	; 0x73
   1ab3c:	strb	r1, [r0, #1]
   1ab40:	vmov.32	r0, d16[0]
   1ab44:	adds	r0, r0, #2
   1ab48:	str	r0, [r5]
   1ab4c:	vmov.32	r0, d16[1]
   1ab50:	adc	r0, r0, #0
   1ab54:	str	r0, [r5, #4]
   1ab58:	ldrd	r0, [r5, #8]
   1ab5c:	adds	r0, r0, #1
   1ab60:	str	r0, [r5, #8]
   1ab64:	adc	r0, r1, #0
   1ab68:	str	r0, [r5, #12]
   1ab6c:	ldr	r1, [r4, #8]
   1ab70:	ldr	r0, [r4]
   1ab74:	add	r2, r1, #1
   1ab78:	str	r2, [r4, #8]
   1ab7c:	mov	r2, r7
   1ab80:	ldrb	r0, [r0, r1]
   1ab84:	mov	r1, #968	; 0x3c8
   1ab88:	cmp	r0, #101	; 0x65
   1ab8c:	movwne	r1, #960	; 0x3c0
   1ab90:	ldr	r1, [r2, r1]!
   1ab94:	adds	r1, r1, #1
   1ab98:	str	r1, [r2]
   1ab9c:	ldr	r1, [r2, #4]
   1aba0:	adc	r1, r1, #0
   1aba4:	cmp	r0, #101	; 0x65
   1aba8:	str	r1, [r2, #4]
   1abac:	bne	1b4dc <next@@Base+0x171c>
   1abb0:	ldr	r0, [r7, #976]	; 0x3d0
   1abb4:	ldr	r1, [r7, #980]	; 0x3d4
   1abb8:	adds	r0, r0, #1
   1abbc:	adc	r1, r1, #0
   1abc0:	str	r0, [r7, #976]	; 0x3d0
   1abc4:	mov	r0, #4
   1abc8:	str	r1, [r7, #980]	; 0x3d4
   1abcc:	bl	126b0 <malloc@plt>
   1abd0:	mov	r6, r0
   1abd4:	bl	19340 <init_token_else@@Base>
   1abd8:	b	1a40c <next@@Base+0x64c>
   1abdc:	add	r0, r6, #72	; 0x48
   1abe0:	bl	1b580 <next@@Base+0x17c0>
   1abe4:	add	r0, sp, #8
   1abe8:	mov	r1, #102	; 0x66
   1abec:	add	r0, r0, r9
   1abf0:	strh	r1, [r0]
   1abf4:	ldr	r0, [r7, #776]	; 0x308
   1abf8:	ldr	r1, [r7, #780]	; 0x30c
   1abfc:	adds	r0, r0, #1
   1ac00:	adc	r1, r1, #0
   1ac04:	str	r0, [r7, #776]	; 0x308
   1ac08:	mov	r0, #4
   1ac0c:	str	r1, [r7, #780]	; 0x30c
   1ac10:	bl	126b0 <malloc@plt>
   1ac14:	mov	r6, r0
   1ac18:	bl	192f0 <init_token_if@@Base>
   1ac1c:	b	1a40c <next@@Base+0x64c>
   1ac20:	ldrd	r0, [r7, #184]	; 0xb8
   1ac24:	adds	r0, r0, #1
   1ac28:	adc	r1, r1, #0
   1ac2c:	strd	r0, [r7, #184]	; 0xb8
   1ac30:	mov	r0, #8
   1ac34:	bl	126b0 <malloc@plt>
   1ac38:	mov	r1, #0
   1ac3c:	mov	r6, r0
   1ac40:	bl	19020 <init_token_int_value@@Base>
   1ac44:	b	1a40c <next@@Base+0x64c>
   1ac48:	mov	r0, #240	; 0xf0
   1ac4c:	cmp	r2, #40	; 0x28
   1ac50:	mov	r1, r7
   1ac54:	movweq	r0, #232	; 0xe8
   1ac58:	ldr	r0, [r1, r0]!
   1ac5c:	adds	r0, r0, #1
   1ac60:	str	r0, [r1]
   1ac64:	ldr	r0, [r1, #4]
   1ac68:	adc	r0, r0, #0
   1ac6c:	cmp	r2, #40	; 0x28
   1ac70:	str	r0, [r1, #4]
   1ac74:	bne	1ac9c <next@@Base+0xedc>
   1ac78:	ldrd	r0, [r7, #248]	; 0xf8
   1ac7c:	adds	r0, r0, #1
   1ac80:	adc	r1, r1, #0
   1ac84:	strd	r0, [r7, #248]	; 0xf8
   1ac88:	mov	r0, #4
   1ac8c:	bl	126b0 <malloc@plt>
   1ac90:	mov	r6, r0
   1ac94:	bl	190c0 <init_token_opar@@Base>
   1ac98:	b	1a40c <next@@Base+0x64c>
   1ac9c:	mov	r0, #264	; 0x108
   1aca0:	cmp	r2, #41	; 0x29
   1aca4:	mov	r1, r7
   1aca8:	movweq	r0, #256	; 0x100
   1acac:	ldr	r0, [r1, r0]!
   1acb0:	adds	r0, r0, #1
   1acb4:	str	r0, [r1]
   1acb8:	ldr	r0, [r1, #4]
   1acbc:	adc	r0, r0, #0
   1acc0:	cmp	r2, #41	; 0x29
   1acc4:	str	r0, [r1, #4]
   1acc8:	bne	1ada0 <next@@Base+0xfe0>
   1accc:	ldr	r0, [r7, #272]	; 0x110
   1acd0:	ldr	r1, [r7, #276]	; 0x114
   1acd4:	adds	r0, r0, #1
   1acd8:	adc	r1, r1, #0
   1acdc:	str	r0, [r7, #272]	; 0x110
   1ace0:	mov	r0, #4
   1ace4:	str	r1, [r7, #276]	; 0x114
   1ace8:	bl	126b0 <malloc@plt>
   1acec:	mov	r6, r0
   1acf0:	bl	19110 <init_token_cpar@@Base>
   1acf4:	b	1a40c <next@@Base+0x64c>
   1acf8:	ldr	r0, [r7, #296]	; 0x128
   1acfc:	ldr	r1, [r7, #300]	; 0x12c
   1ad00:	adds	r0, r0, #1
   1ad04:	adc	r1, r1, #0
   1ad08:	str	r0, [r7, #296]	; 0x128
   1ad0c:	mov	r0, #4
   1ad10:	str	r1, [r7, #300]	; 0x12c
   1ad14:	bl	126b0 <malloc@plt>
   1ad18:	mov	r6, r0
   1ad1c:	bl	19160 <init_token_obra@@Base>
   1ad20:	b	1a40c <next@@Base+0x64c>
   1ad24:	ldr	r0, [r7, #320]	; 0x140
   1ad28:	ldr	r1, [r7, #324]	; 0x144
   1ad2c:	adds	r0, r0, #1
   1ad30:	adc	r1, r1, #0
   1ad34:	str	r0, [r7, #320]	; 0x140
   1ad38:	mov	r0, #4
   1ad3c:	str	r1, [r7, #324]	; 0x144
   1ad40:	bl	126b0 <malloc@plt>
   1ad44:	mov	r6, r0
   1ad48:	bl	191b0 <init_token_cbra@@Base>
   1ad4c:	b	1a40c <next@@Base+0x64c>
   1ad50:	ldr	r0, [r7, #344]	; 0x158
   1ad54:	ldr	r1, [r7, #348]	; 0x15c
   1ad58:	adds	r0, r0, #1
   1ad5c:	adc	r1, r1, #0
   1ad60:	str	r0, [r7, #344]	; 0x158
   1ad64:	mov	r0, #4
   1ad68:	str	r1, [r7, #348]	; 0x15c
   1ad6c:	bl	126b0 <malloc@plt>
   1ad70:	mov	r6, r0
   1ad74:	bl	19250 <init_token_semicolon@@Base>
   1ad78:	b	1a40c <next@@Base+0x64c>
   1ad7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1ad80:	strdeq	r8, [r1], -ip
   1ad84:	andeq	r8, r1, r0, lsr #10
   1ad88:	andeq	r8, r1, r8, lsl #10
   1ad8c:	andeq	r6, r1, r4, lsr #29
   1ad90:	andeq	r0, r0, r1
   1ad94:	andeq	r0, r0, r0
   1ad98:	andeq	r0, r0, r1
   1ad9c:	andeq	r0, r0, r0
   1ada0:	ldr	r0, [r7, #408]	; 0x198
   1ada4:	ldr	r1, [r7, #412]	; 0x19c
   1ada8:	ldr	r6, [r7, #388]	; 0x184
   1adac:	mov	r9, r5
   1adb0:	ldr	r5, [r7, #360]	; 0x168
   1adb4:	adds	r3, r0, #1
   1adb8:	ldr	r0, [r7, #364]	; 0x16c
   1adbc:	adc	ip, r1, #0
   1adc0:	ldr	r1, [r7, #384]	; 0x180
   1adc4:	adds	r1, r1, #1
   1adc8:	adc	lr, r6, #0
   1adcc:	ldr	r6, [r7, #336]	; 0x150
   1add0:	adds	r5, r5, #1
   1add4:	adc	r8, r0, #0
   1add8:	adds	r6, r6, #1
   1addc:	str	r6, [r7, #336]	; 0x150
   1ade0:	str	r5, [r7, #360]	; 0x168
   1ade4:	str	r1, [r7, #384]	; 0x180
   1ade8:	str	r3, [r7, #408]	; 0x198
   1adec:	ldr	r1, [r7, #340]	; 0x154
   1adf0:	ldr	r6, [r7, #312]	; 0x138
   1adf4:	ldr	r3, [r7, #288]	; 0x120
   1adf8:	ldr	r5, [r7, #292]	; 0x124
   1adfc:	ldr	r0, [r7, #316]	; 0x13c
   1ae00:	adc	r1, r1, #0
   1ae04:	adds	r6, r6, #1
   1ae08:	str	r6, [r7, #312]	; 0x138
   1ae0c:	adc	r0, r0, #0
   1ae10:	adds	r3, r3, #1
   1ae14:	ldr	r6, [r7, #432]	; 0x1b0
   1ae18:	adc	r5, r5, #0
   1ae1c:	adds	r6, r6, #1
   1ae20:	str	r6, [r7, #432]	; 0x1b0
   1ae24:	str	r3, [r7, #288]	; 0x120
   1ae28:	str	r5, [r7, #292]	; 0x124
   1ae2c:	str	r0, [r7, #316]	; 0x13c
   1ae30:	str	r1, [r7, #340]	; 0x154
   1ae34:	str	r8, [r7, #364]	; 0x16c
   1ae38:	str	lr, [r7, #388]	; 0x184
   1ae3c:	str	ip, [r7, #412]	; 0x19c
   1ae40:	mov	r1, r7
   1ae44:	ldr	r0, [r7, #436]	; 0x1b4
   1ae48:	adc	r0, r0, #0
   1ae4c:	cmp	r2, #33	; 0x21
   1ae50:	str	r0, [r7, #436]	; 0x1b4
   1ae54:	mov	r0, #456	; 0x1c8
   1ae58:	movweq	r0, #448	; 0x1c0
   1ae5c:	ldr	r0, [r1, r0]!
   1ae60:	adds	r0, r0, #1
   1ae64:	str	r0, [r1]
   1ae68:	ldr	r0, [r1, #4]
   1ae6c:	adc	r0, r0, #0
   1ae70:	cmp	r2, #33	; 0x21
   1ae74:	str	r0, [r1, #4]
   1ae78:	bne	1afa8 <next@@Base+0x11e8>
   1ae7c:	sub	r0, pc, #244	; 0xf4
   1ae80:	vld1.64	{d18-d19}, [r9 :128]
   1ae84:	add	r1, sp, #8
   1ae88:	mov	r5, #472	; 0x1d8
   1ae8c:	vld1.64	{d16-d17}, [r0 :128]
   1ae90:	mov	r0, #33	; 0x21
   1ae94:	strb	r0, [r1, sl]
   1ae98:	vadd.i64	q8, q9, q8
   1ae9c:	vst1.64	{d16-d17}, [r9 :128]
   1aea0:	ldr	r1, [r4, #8]
   1aea4:	ldr	r0, [r4]
   1aea8:	add	r2, r1, #1
   1aeac:	str	r2, [r4, #8]
   1aeb0:	ldrb	r8, [r0, r1]
   1aeb4:	mov	r0, #8
   1aeb8:	cmp	r8, #61	; 0x3d
   1aebc:	movwne	r5, #464	; 0x1d0
   1aec0:	bl	126b0 <malloc@plt>
   1aec4:	mov	r6, r0
   1aec8:	mov	r0, r7
   1aecc:	ldr	r1, [r0, r5]!
   1aed0:	adds	r1, r1, #1
   1aed4:	str	r1, [r0]
   1aed8:	ldr	r1, [r0, #4]
   1aedc:	adc	r1, r1, #0
   1aee0:	cmp	r8, #61	; 0x3d
   1aee4:	str	r1, [r0, #4]
   1aee8:	beq	1b0dc <next@@Base+0x131c>
   1aeec:	ldr	r1, [pc, #1632]	; 1b554 <next@@Base+0x1794>
   1aef0:	sub	r0, pc, #360	; 0x168
   1aef4:	vld1.64	{d16-d17}, [r0 :128]
   1aef8:	add	r1, pc, r1
   1aefc:	vld1.64	{d18-d19}, [r1 :128]
   1af00:	ldr	r0, [pc, #1616]	; 1b558 <next@@Base+0x1798>
   1af04:	ldr	r2, [pc, #1616]	; 1b55c <next@@Base+0x179c>
   1af08:	ldr	r2, [pc, r2]
   1af0c:	add	r0, pc, r0
   1af10:	ldr	r3, [r7, #480]	; 0x1e0
   1af14:	ldr	r5, [r7, #484]	; 0x1e4
   1af18:	vadd.i64	q8, q9, q8
   1af1c:	vst1.64	{d16-d17}, [r1 :128]
   1af20:	adds	r2, r2, #1
   1af24:	str	r2, [r0]
   1af28:	ldr	r2, [r0, #4]
   1af2c:	adc	r2, r2, #0
   1af30:	adds	r3, r3, #1
   1af34:	adc	r1, r5, #0
   1af38:	str	r2, [r0, #4]
   1af3c:	str	r3, [r7, #480]	; 0x1e0
   1af40:	mov	r2, #16
   1af44:	mov	r3, r0
   1af48:	str	r1, [r7, #484]	; 0x1e4
   1af4c:	ldr	r1, [r4, #8]
   1af50:	cmp	r1, #0
   1af54:	movwne	r2, #8
   1af58:	ldr	r2, [r3, r2]!
   1af5c:	adds	r2, r2, #1
   1af60:	str	r2, [r3]
   1af64:	ldr	r2, [r3, #4]
   1af68:	adc	r2, r2, #0
   1af6c:	cmp	r1, #0
   1af70:	str	r2, [r3, #4]
   1af74:	beq	1b4bc <next@@Base+0x16fc>
   1af78:	ldrd	r2, [r0, #24]
   1af7c:	adds	r2, r2, #1
   1af80:	adc	r3, r3, #0
   1af84:	strd	r2, [r0, #24]
   1af88:	sub	r0, r1, #1
   1af8c:	str	r0, [r4, #8]
   1af90:	mov	r0, #2
   1af94:	bl	126b0 <malloc@plt>
   1af98:	ldrb	r2, [sp, #8]
   1af9c:	mov	r1, r0
   1afa0:	strb	r2, [r0], #1
   1afa4:	b	1b114 <next@@Base+0x1354>
   1afa8:	ldr	r0, [r7, #584]	; 0x248
   1afac:	ldr	r1, [r7, #588]	; 0x24c
   1afb0:	ldr	r5, [r7, #528]	; 0x210
   1afb4:	ldr	r3, [r7, #512]	; 0x200
   1afb8:	ldr	r6, [r7, #516]	; 0x204
   1afbc:	adds	ip, r0, #1
   1afc0:	ldr	r0, [r7, #532]	; 0x214
   1afc4:	adc	lr, r1, #0
   1afc8:	ldr	r1, [r7, #624]	; 0x270
   1afcc:	adds	r5, r5, #1
   1afd0:	adc	r0, r0, #0
   1afd4:	adds	r3, r3, #1
   1afd8:	adc	r6, r6, #0
   1afdc:	adds	r1, r1, #1
   1afe0:	str	r1, [r7, #624]	; 0x270
   1afe4:	str	r3, [r7, #512]	; 0x200
   1afe8:	str	r6, [r7, #516]	; 0x204
   1afec:	str	r5, [r7, #528]	; 0x210
   1aff0:	str	r0, [r7, #532]	; 0x214
   1aff4:	str	ip, [r7, #584]	; 0x248
   1aff8:	str	lr, [r7, #588]	; 0x24c
   1affc:	mov	r1, r7
   1b000:	ldr	r0, [r7, #628]	; 0x274
   1b004:	adc	r0, r0, #0
   1b008:	cmp	r2, #38	; 0x26
   1b00c:	str	r0, [r7, #628]	; 0x274
   1b010:	mov	r0, #664	; 0x298
   1b014:	movweq	r0, #656	; 0x290
   1b018:	ldr	r0, [r1, r0]!
   1b01c:	adds	r0, r0, #1
   1b020:	str	r0, [r1]
   1b024:	ldr	r0, [r1, #4]
   1b028:	adc	r0, r0, #0
   1b02c:	cmp	r2, #38	; 0x26
   1b030:	str	r0, [r1, #4]
   1b034:	bne	1b518 <next@@Base+0x1758>
   1b038:	sub	r0, pc, #688	; 0x2b0
   1b03c:	vld1.64	{d18-d19}, [r9 :128]
   1b040:	mov	r8, #38	; 0x26
   1b044:	mov	r5, #680	; 0x2a8
   1b048:	vld1.64	{d16-d17}, [r0 :128]
   1b04c:	add	r0, sp, #8
   1b050:	strb	r8, [r0, sl]
   1b054:	vadd.i64	q8, q9, q8
   1b058:	vst1.64	{d16-d17}, [r9 :128]
   1b05c:	ldr	r1, [r4, #8]
   1b060:	ldr	r0, [r4]
   1b064:	add	r2, r1, #1
   1b068:	str	r2, [r4, #8]
   1b06c:	ldrb	r4, [r0, r1]
   1b070:	mov	r0, #8
   1b074:	cmp	r4, #38	; 0x26
   1b078:	movwne	r5, #672	; 0x2a0
   1b07c:	bl	126b0 <malloc@plt>
   1b080:	mov	r6, r0
   1b084:	mov	r0, r7
   1b088:	ldr	r1, [r0, r5]!
   1b08c:	adds	r1, r1, #1
   1b090:	str	r1, [r0]
   1b094:	ldr	r1, [r0, #4]
   1b098:	adc	r1, r1, #0
   1b09c:	cmp	r4, #38	; 0x26
   1b0a0:	str	r1, [r0, #4]
   1b0a4:	bne	1b4dc <next@@Base+0x171c>
   1b0a8:	ldr	r0, [r7, #688]	; 0x2b0
   1b0ac:	ldr	r1, [r7, #692]	; 0x2b4
   1b0b0:	adds	r0, r0, #1
   1b0b4:	adc	r1, r1, #0
   1b0b8:	str	r0, [r7, #688]	; 0x2b0
   1b0bc:	str	r1, [r7, #692]	; 0x2b4
   1b0c0:	mov	r0, #3
   1b0c4:	bl	126b0 <malloc@plt>
   1b0c8:	mov	r1, r0
   1b0cc:	ldrb	r0, [sp, #8]
   1b0d0:	strh	r8, [r1, #1]
   1b0d4:	strb	r0, [r1]
   1b0d8:	b	1b334 <next@@Base+0x1574>
   1b0dc:	ldr	r0, [r7, #488]	; 0x1e8
   1b0e0:	ldr	r1, [r7, #492]	; 0x1ec
   1b0e4:	adds	r0, r0, #1
   1b0e8:	adc	r1, r1, #0
   1b0ec:	str	r0, [r7, #488]	; 0x1e8
   1b0f0:	mov	r0, #3
   1b0f4:	str	r1, [r7, #492]	; 0x1ec
   1b0f8:	bl	126b0 <malloc@plt>
   1b0fc:	mov	r1, r0
   1b100:	ldrb	r0, [sp, #8]
   1b104:	mov	r2, #61	; 0x3d
   1b108:	strb	r2, [r1, #1]
   1b10c:	strb	r0, [r1]
   1b110:	add	r0, r1, #2
   1b114:	mov	r2, #0
   1b118:	strb	r2, [r0]
   1b11c:	ldr	r0, [r7, #496]	; 0x1f0
   1b120:	ldr	r2, [r7, #500]	; 0x1f4
   1b124:	adds	r0, r0, #1
   1b128:	adc	r2, r2, #0
   1b12c:	str	r0, [r7, #496]	; 0x1f0
   1b130:	str	r2, [r7, #500]	; 0x1f4
   1b134:	b	1b334 <next@@Base+0x1574>
   1b138:	andeq	r6, r1, r8, lsl pc
   1b13c:	ldr	r0, [r7, #456]	; 0x1c8
   1b140:	ldr	r1, [r7, #460]	; 0x1cc
   1b144:	adds	r0, r0, #1
   1b148:	adc	r1, r1, #0
   1b14c:	str	r0, [r7, #456]	; 0x1c8
   1b150:	mov	r0, #512	; 0x200
   1b154:	cmp	r2, #60	; 0x3c
   1b158:	str	r1, [r7, #460]	; 0x1cc
   1b15c:	movweq	r0, #504	; 0x1f8
   1b160:	mov	r1, r7
   1b164:	ldr	r0, [r1, r0]!
   1b168:	adds	r0, r0, #1
   1b16c:	str	r0, [r1]
   1b170:	ldr	r0, [r1, #4]
   1b174:	adc	r0, r0, #0
   1b178:	cmp	r2, #60	; 0x3c
   1b17c:	str	r0, [r1, #4]
   1b180:	beq	1b1b4 <next@@Base+0x13f4>
   1b184:	mov	r0, #528	; 0x210
   1b188:	cmp	r2, #62	; 0x3e
   1b18c:	mov	r1, r7
   1b190:	movweq	r0, #520	; 0x208
   1b194:	ldr	r0, [r1, r0]!
   1b198:	adds	r0, r0, #1
   1b19c:	str	r0, [r1]
   1b1a0:	ldr	r0, [r1, #4]
   1b1a4:	adc	r0, r0, #0
   1b1a8:	cmp	r2, #62	; 0x3e
   1b1ac:	str	r0, [r1, #4]
   1b1b0:	bne	1b340 <next@@Base+0x1580>
   1b1b4:	add	r0, pc, #900	; 0x384
   1b1b8:	vld1.64	{d18-d19}, [r5 :128]
   1b1bc:	vld1.64	{d16-d17}, [r0 :128]
   1b1c0:	add	r0, sp, #8
   1b1c4:	strb	r8, [r0, sl]
   1b1c8:	vadd.i64	q8, q9, q8
   1b1cc:	vst1.64	{d16-d17}, [r5 :128]
   1b1d0:	mov	r5, #544	; 0x220
   1b1d4:	ldr	r1, [r4, #8]
   1b1d8:	ldr	r0, [r4]
   1b1dc:	add	r2, r1, #1
   1b1e0:	str	r2, [r4, #8]
   1b1e4:	ldrb	r8, [r0, r1]
   1b1e8:	mov	r0, #8
   1b1ec:	cmp	r8, #61	; 0x3d
   1b1f0:	movwne	r5, #536	; 0x218
   1b1f4:	bl	126b0 <malloc@plt>
   1b1f8:	mov	r6, r0
   1b1fc:	mov	r0, r7
   1b200:	ldr	r1, [r0, r5]!
   1b204:	adds	r1, r1, #1
   1b208:	str	r1, [r0]
   1b20c:	ldr	r1, [r0, #4]
   1b210:	adc	r1, r1, #0
   1b214:	cmp	r8, #61	; 0x3d
   1b218:	str	r1, [r0, #4]
   1b21c:	beq	1b2dc <next@@Base+0x151c>
   1b220:	ldr	r1, [pc, #824]	; 1b560 <next@@Base+0x17a0>
   1b224:	add	r0, pc, #788	; 0x314
   1b228:	vld1.64	{d16-d17}, [r0 :128]
   1b22c:	add	r1, pc, r1
   1b230:	vld1.64	{d18-d19}, [r1 :128]
   1b234:	ldr	r0, [pc, #808]	; 1b564 <next@@Base+0x17a4>
   1b238:	ldr	r2, [pc, #808]	; 1b568 <next@@Base+0x17a8>
   1b23c:	ldr	r2, [pc, r2]
   1b240:	add	r0, pc, r0
   1b244:	ldr	r3, [r7, #552]	; 0x228
   1b248:	ldr	r5, [r7, #556]	; 0x22c
   1b24c:	vadd.i64	q8, q9, q8
   1b250:	vst1.64	{d16-d17}, [r1 :128]
   1b254:	adds	r2, r2, #1
   1b258:	str	r2, [r0]
   1b25c:	ldr	r2, [r0, #4]
   1b260:	adc	r2, r2, #0
   1b264:	adds	r3, r3, #1
   1b268:	adc	r1, r5, #0
   1b26c:	str	r2, [r0, #4]
   1b270:	str	r3, [r7, #552]	; 0x228
   1b274:	mov	r2, #16
   1b278:	mov	r3, r0
   1b27c:	str	r1, [r7, #556]	; 0x22c
   1b280:	ldr	r1, [r4, #8]
   1b284:	cmp	r1, #0
   1b288:	movwne	r2, #8
   1b28c:	ldr	r2, [r3, r2]!
   1b290:	adds	r2, r2, #1
   1b294:	str	r2, [r3]
   1b298:	ldr	r2, [r3, #4]
   1b29c:	adc	r2, r2, #0
   1b2a0:	cmp	r1, #0
   1b2a4:	str	r2, [r3, #4]
   1b2a8:	beq	1b4bc <next@@Base+0x16fc>
   1b2ac:	ldrd	r2, [r0, #24]
   1b2b0:	adds	r2, r2, #1
   1b2b4:	adc	r3, r3, #0
   1b2b8:	strd	r2, [r0, #24]
   1b2bc:	sub	r0, r1, #1
   1b2c0:	str	r0, [r4, #8]
   1b2c4:	mov	r0, #2
   1b2c8:	bl	126b0 <malloc@plt>
   1b2cc:	ldrb	r2, [sp, #8]
   1b2d0:	mov	r1, r0
   1b2d4:	strb	r2, [r0], #1
   1b2d8:	b	1b314 <next@@Base+0x1554>
   1b2dc:	ldr	r0, [r7, #560]	; 0x230
   1b2e0:	ldr	r1, [r7, #564]	; 0x234
   1b2e4:	adds	r0, r0, #1
   1b2e8:	adc	r1, r1, #0
   1b2ec:	str	r0, [r7, #560]	; 0x230
   1b2f0:	mov	r0, #3
   1b2f4:	str	r1, [r7, #564]	; 0x234
   1b2f8:	bl	126b0 <malloc@plt>
   1b2fc:	mov	r1, r0
   1b300:	ldrb	r0, [sp, #8]
   1b304:	mov	r2, #61	; 0x3d
   1b308:	strb	r2, [r1, #1]
   1b30c:	strb	r0, [r1]
   1b310:	add	r0, r1, #2
   1b314:	mov	r2, #0
   1b318:	strb	r2, [r0]
   1b31c:	ldr	r0, [r7, #568]	; 0x238
   1b320:	ldr	r2, [r7, #572]	; 0x23c
   1b324:	adds	r0, r0, #1
   1b328:	adc	r2, r2, #0
   1b32c:	str	r0, [r7, #568]	; 0x238
   1b330:	str	r2, [r7, #572]	; 0x23c
   1b334:	mov	r0, r6
   1b338:	bl	19390 <init_token_boolean_op@@Base>
   1b33c:	b	1a40c <next@@Base+0x64c>
   1b340:	mov	r0, #584	; 0x248
   1b344:	cmp	r2, #61	; 0x3d
   1b348:	mov	r1, r7
   1b34c:	movweq	r0, #576	; 0x240
   1b350:	ldr	r0, [r1, r0]!
   1b354:	adds	r0, r0, #1
   1b358:	str	r0, [r1]
   1b35c:	ldr	r0, [r1, #4]
   1b360:	adc	r0, r0, #0
   1b364:	cmp	r2, #61	; 0x3d
   1b368:	str	r0, [r1, #4]
   1b36c:	bne	1b3fc <next@@Base+0x163c>
   1b370:	add	r0, pc, #456	; 0x1c8
   1b374:	vld1.64	{d18-d19}, [r5 :128]
   1b378:	mov	r8, #61	; 0x3d
   1b37c:	vld1.64	{d16-d17}, [r0 :128]
   1b380:	add	r0, sp, #8
   1b384:	strb	r8, [r0, sl]
   1b388:	vadd.i64	q8, q9, q8
   1b38c:	vst1.64	{d16-d17}, [r5 :128]
   1b390:	mov	r5, #600	; 0x258
   1b394:	ldr	r1, [r4, #8]
   1b398:	ldr	r0, [r4]
   1b39c:	add	r2, r1, #1
   1b3a0:	str	r2, [r4, #8]
   1b3a4:	ldrb	r4, [r0, r1]
   1b3a8:	mov	r0, #8
   1b3ac:	cmp	r4, #61	; 0x3d
   1b3b0:	movwne	r5, #592	; 0x250
   1b3b4:	bl	126b0 <malloc@plt>
   1b3b8:	mov	r6, r0
   1b3bc:	mov	r0, r7
   1b3c0:	ldr	r1, [r0, r5]!
   1b3c4:	adds	r1, r1, #1
   1b3c8:	str	r1, [r0]
   1b3cc:	ldr	r1, [r0, #4]
   1b3d0:	adc	r1, r1, #0
   1b3d4:	cmp	r4, #61	; 0x3d
   1b3d8:	str	r1, [r0, #4]
   1b3dc:	bne	1b4dc <next@@Base+0x171c>
   1b3e0:	ldr	r0, [r7, #608]	; 0x260
   1b3e4:	ldr	r1, [r7, #612]	; 0x264
   1b3e8:	adds	r0, r0, #1
   1b3ec:	adc	r1, r1, #0
   1b3f0:	str	r0, [r7, #608]	; 0x260
   1b3f4:	str	r1, [r7, #612]	; 0x264
   1b3f8:	b	1b0c0 <next@@Base+0x1300>
   1b3fc:	mov	r0, #624	; 0x270
   1b400:	cmp	r2, #124	; 0x7c
   1b404:	mov	r1, r7
   1b408:	movweq	r0, #616	; 0x268
   1b40c:	ldr	r0, [r1, r0]!
   1b410:	adds	r0, r0, #1
   1b414:	str	r0, [r1]
   1b418:	ldr	r0, [r1, #4]
   1b41c:	adc	r0, r0, #0
   1b420:	cmp	r2, #124	; 0x7c
   1b424:	str	r0, [r1, #4]
   1b428:	bne	1b500 <next@@Base+0x1740>
   1b42c:	add	r0, pc, #268	; 0x10c
   1b430:	vld1.64	{d18-d19}, [ip :128]
   1b434:	ldr	r1, [sp, #4]
   1b438:	mov	r8, #124	; 0x7c
   1b43c:	mov	r5, #640	; 0x280
   1b440:	vld1.64	{d16-d17}, [r0 :128]
   1b444:	add	r0, sp, #8
   1b448:	strb	r8, [r0, r1]
   1b44c:	vadd.i64	q8, q9, q8
   1b450:	vst1.64	{d16-d17}, [ip :128]
   1b454:	ldr	r1, [r4, #8]
   1b458:	ldr	r0, [r4]
   1b45c:	add	r2, r1, #1
   1b460:	str	r2, [r4, #8]
   1b464:	ldrb	r4, [r0, r1]
   1b468:	mov	r0, #8
   1b46c:	cmp	r4, #124	; 0x7c
   1b470:	movwne	r5, #632	; 0x278
   1b474:	bl	126b0 <malloc@plt>
   1b478:	mov	r6, r0
   1b47c:	mov	r0, r7
   1b480:	ldr	r1, [r0, r5]!
   1b484:	adds	r1, r1, #1
   1b488:	str	r1, [r0]
   1b48c:	ldr	r1, [r0, #4]
   1b490:	adc	r1, r1, #0
   1b494:	cmp	r4, #124	; 0x7c
   1b498:	str	r1, [r0, #4]
   1b49c:	bne	1b4dc <next@@Base+0x171c>
   1b4a0:	ldr	r0, [r7, #648]	; 0x288
   1b4a4:	ldr	r1, [r7, #652]	; 0x28c
   1b4a8:	adds	r0, r0, #1
   1b4ac:	adc	r1, r1, #0
   1b4b0:	str	r0, [r7, #648]	; 0x288
   1b4b4:	str	r1, [r7, #652]	; 0x28c
   1b4b8:	b	1b0c0 <next@@Base+0x1300>
   1b4bc:	ldr	r0, [pc, #180]	; 1b578 <next@@Base+0x17b8>
   1b4c0:	mov	r1, #32
   1b4c4:	mov	r2, #1
   1b4c8:	ldr	r0, [pc, r0]
   1b4cc:	ldr	r3, [r0]
   1b4d0:	ldr	r0, [pc, #164]	; 1b57c <next@@Base+0x17bc>
   1b4d4:	add	r0, pc, r0
   1b4d8:	bl	1268c <fwrite@plt>
   1b4dc:	mov	r0, #1
   1b4e0:	bl	126ec <exit@plt>
   1b4e4:	add	r0, r6, #56	; 0x38
   1b4e8:	bl	1b580 <next@@Base+0x17c0>
   1b4ec:	mov	r0, #1
   1b4f0:	bl	126ec <exit@plt>
   1b4f4:			; <UNDEFINED> instruction: 0x00017eb8
   1b4f8:	andeq	r7, r1, r4, lsl #29
   1b4fc:	andeq	r7, r1, r8, lsl #29
   1b500:	ldr	r0, [r7, #664]	; 0x298
   1b504:	ldr	r1, [r7, #668]	; 0x29c
   1b508:	adds	r0, r0, #1
   1b50c:	adc	r1, r1, #0
   1b510:	str	r0, [r7, #664]	; 0x298
   1b514:	str	r1, [r7, #668]	; 0x29c
   1b518:	ldr	r0, [pc, #76]	; 1b56c <next@@Base+0x17ac>
   1b51c:	ldr	r0, [pc, r0]
   1b520:	ldr	r0, [r0]
   1b524:	ldr	r1, [pc, #68]	; 1b570 <next@@Base+0x17b0>
   1b528:	add	r1, pc, r1
   1b52c:	bl	12710 <fprintf@plt>
   1b530:	mov	r0, #1
   1b534:	bl	126ec <exit@plt>
   1b538:	nop	{0}
   1b53c:	nop	{0}
   1b540:	andeq	r0, r0, r1
   1b544:	andeq	r0, r0, r0
   1b548:	andeq	r0, r0, r1
   1b54c:	andeq	r0, r0, r0
   1b550:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1b554:	ldrdeq	r7, [r1], -r0
   1b558:	muleq	r1, ip, r4
   1b55c:	andeq	r7, r1, r0, lsr #9
   1b560:	muleq	r1, ip, r1
   1b564:	andeq	r7, r1, r8, ror #2
   1b568:	andeq	r7, r1, ip, ror #2
   1b56c:	andeq	r5, r1, ip, ror #23
   1b570:	muleq	r0, r1, lr
   1b574:	andeq	r6, r1, r0, asr #15
   1b578:	andeq	r5, r1, r0, asr #24
   1b57c:	andeq	r3, r0, r4, asr #29
   1b580:	ldr	r1, [pc, #40]	; 1b5b0 <next@@Base+0x17f0>
   1b584:	ldr	r1, [pc, r1]
   1b588:	cmn	r1, #1
   1b58c:	ldrne	r0, [r0, r1, lsl #2]
   1b590:	cmpne	r0, #0
   1b594:	bne	1b59c <next@@Base+0x17dc>
   1b598:	bx	lr
   1b59c:	ldrd	r2, [r0]
   1b5a0:	adds	r2, r2, #1
   1b5a4:	adc	r3, r3, #0
   1b5a8:	strd	r2, [r0]
   1b5ac:	bx	lr
   1b5b0:	andeq	r5, r1, r8, lsl ip
   1b5b4:	push	{r4, r5, r6, lr}
   1b5b8:	sub	sp, sp, #8
   1b5bc:	ldr	r0, [pc, #112]	; 1b634 <next@@Base+0x1874>
   1b5c0:	ldr	r1, [pc, #112]	; 1b638 <next@@Base+0x1878>
   1b5c4:	movw	r2, #3328	; 0xd00
   1b5c8:	movt	r2, #1285	; 0x505
   1b5cc:	add	r0, pc, r0
   1b5d0:	add	r1, pc, r1
   1b5d4:	bl	1b72c <next@@Base+0x196c>
   1b5d8:	ldr	r0, [pc, #92]	; 1b63c <next@@Base+0x187c>
   1b5dc:	ldr	r6, [pc, #92]	; 1b640 <next@@Base+0x1880>
   1b5e0:	mov	r5, #0
   1b5e4:	add	r0, pc, r0
   1b5e8:	add	r6, pc, r6
   1b5ec:	add	r4, r0, #4
   1b5f0:	mov	r3, r6
   1b5f4:	ldr	r0, [r3, r5]!
   1b5f8:	ldr	r1, [r3, #16]
   1b5fc:	str	r1, [sp]
   1b600:	ldmib	r3, {r1, r2}
   1b604:	ldrb	r3, [r3, #12]
   1b608:	bl	1be90 <next@@Base+0x20d0>
   1b60c:	ldrd	r0, [r4, #-4]
   1b610:	bl	1c744 <next@@Base+0x2984>
   1b614:	add	r5, r5, #20
   1b618:	add	r4, r4, #8
   1b61c:	cmp	r5, #180	; 0xb4
   1b620:	bne	1b5f0 <next@@Base+0x1830>
   1b624:	bl	1cec0 <next@@Base+0x3100>
   1b628:	add	sp, sp, #8
   1b62c:	pop	{r4, r5, r6, lr}
   1b630:	b	1dc2c <next@@Base+0x3e6c>
   1b634:	andeq	r3, r0, ip, ror #28
   1b638:	andeq	r3, r0, r5, lsl #4
   1b63c:	ldrdeq	r5, [r1], -r4
   1b640:	andeq	r5, r1, r0, lsl r8
   1b644:	push	{fp, lr}
   1b648:	vpush	{d8-d9}
   1b64c:	bl	1b5b4 <next@@Base+0x17f4>
   1b650:	ldr	r0, [pc, #148]	; 1b6ec <next@@Base+0x192c>
   1b654:	vmov.i32	q4, #0	; 0x00000000
   1b658:	add	r0, pc, r0
   1b65c:	add	r1, r0, #16
   1b660:	vst1.64	{d8-d9}, [r1 :128]
   1b664:	ldr	r1, [pc, #132]	; 1b6f0 <next@@Base+0x1930>
   1b668:	add	r1, pc, r1
   1b66c:	vst1.64	{d8-d9}, [r1 :128]
   1b670:	mov	r1, #0
   1b674:	str	r1, [r0, #32]
   1b678:	ldr	r2, [pc, #116]	; 1b6f4 <next@@Base+0x1934>
   1b67c:	add	r2, pc, r2
   1b680:	vst1.64	{d8-d9}, [r2 :128]
   1b684:	ldr	r2, [pc, #108]	; 1b6f8 <next@@Base+0x1938>
   1b688:	add	r2, pc, r2
   1b68c:	vst1.64	{d8-d9}, [r2 :128]
   1b690:	ldr	r2, [pc, #100]	; 1b6fc <next@@Base+0x193c>
   1b694:	add	r2, pc, r2
   1b698:	vst1.64	{d8-d9}, [r2 :128]
   1b69c:	ldr	r2, [pc, #92]	; 1b700 <next@@Base+0x1940>
   1b6a0:	add	r2, pc, r2
   1b6a4:	vst1.64	{d8-d9}, [r2 :128]
   1b6a8:	mov	r2, #36	; 0x24
   1b6ac:	vst1.64	{d8-d9}, [r0 :128], r2
   1b6b0:	mov	r2, #1008	; 0x3f0
   1b6b4:	str	r1, [r0]
   1b6b8:	mov	r1, #0
   1b6bc:	ldr	r0, [pc, #64]	; 1b704 <next@@Base+0x1944>
   1b6c0:	add	r0, pc, r0
   1b6c4:	vst1.64	{d8-d9}, [r0 :128]!
   1b6c8:	vst1.64	{d8-d9}, [r0 :128]
   1b6cc:	ldr	r0, [pc, #52]	; 1b708 <next@@Base+0x1948>
   1b6d0:	add	r0, pc, r0
   1b6d4:	bl	12740 <memset@plt>
   1b6d8:	ldr	r0, [pc, #44]	; 1b70c <next@@Base+0x194c>
   1b6dc:	add	r0, pc, r0
   1b6e0:	vst1.64	{d8-d9}, [r0 :128]
   1b6e4:	vpop	{d8-d9}
   1b6e8:	pop	{fp, pc}
   1b6ec:	strdeq	r6, [r1], -r0
   1b6f0:	ldrdeq	r6, [r1], -r0
   1b6f4:	strdeq	r6, [r1], -ip
   1b6f8:	andeq	r6, r1, r0, lsl #26
   1b6fc:	andeq	r6, r1, r4, lsl #26
   1b700:	andeq	r6, r1, r8, lsr #26
   1b704:	andeq	r6, r1, r8, ror #25
   1b708:	andeq	r6, r1, r8, lsl #26
   1b70c:	andeq	r7, r1, ip, ror #1
   1b710:	ldr	r0, [pc, #12]	; 1b724 <next@@Base+0x1964>
   1b714:	ldr	r1, [pc, #12]	; 1b728 <next@@Base+0x1968>
   1b718:	add	r0, pc, r0
   1b71c:	add	r1, pc, r1
   1b720:	b	1e0dc <__gcov_flush@@Base+0xb4>
   1b724:			; <UNDEFINED> instruction: 0xfffffe94
   1b728:			; <UNDEFINED> instruction: 0xffffff20
   1b72c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b730:	add	fp, sp, #28
   1b734:	sub	sp, sp, #36	; 0x24
   1b738:	mov	r9, r1
   1b73c:	mov	r6, r0
   1b740:	add	r0, sp, #28
   1b744:	add	r1, sp, #32
   1b748:	mov	r8, r2
   1b74c:	bl	1e488 <__gcov_flush@@Base+0x460>
   1b750:	cmp	r0, #0
   1b754:	beq	1b798 <next@@Base+0x19d8>
   1b758:	mov	r4, r0
   1b75c:	mov	r0, r6
   1b760:	ldr	r5, [sp, #32]
   1b764:	bl	126f8 <strlen@plt>
   1b768:	add	r0, r5, r0
   1b76c:	add	r0, r0, #2
   1b770:	bl	126b0 <malloc@plt>
   1b774:	mov	r7, r0
   1b778:	ldr	r0, [sp, #28]
   1b77c:	mov	r1, r6
   1b780:	mov	r2, r4
   1b784:	str	r0, [sp]
   1b788:	mov	r0, r7
   1b78c:	mov	r3, r5
   1b790:	bl	1e51c <__gcov_flush@@Base+0x4f4>
   1b794:	b	1b7a4 <next@@Base+0x19e4>
   1b798:	mov	r0, r6
   1b79c:	bl	12668 <strdup@plt>
   1b7a0:	mov	r7, r0
   1b7a4:	ldr	r0, [pc, #1548]	; 1bdb8 <next@@Base+0x1ff8>
   1b7a8:	ldr	r6, [pc, #1548]	; 1bdbc <next@@Base+0x1ffc>
   1b7ac:	mov	r1, #2
   1b7b0:	add	r0, pc, r0
   1b7b4:	add	r6, pc, r6
   1b7b8:	str	r7, [r0]
   1b7bc:	mov	r0, r7
   1b7c0:	mov	r4, #0
   1b7c4:	strb	r4, [r6]
   1b7c8:	bl	12698 <open64@plt>
   1b7cc:	ldr	r5, [pc, #1516]	; 1bdc0 <next@@Base+0x2000>
   1b7d0:	cmn	r0, #1
   1b7d4:	add	r5, pc, r5
   1b7d8:	str	r0, [r5]
   1b7dc:	beq	1b7ec <next@@Base+0x1a2c>
   1b7e0:	ldr	r6, [pc, #1500]	; 1bdc4 <next@@Base+0x2004>
   1b7e4:	add	r6, pc, r6
   1b7e8:	b	1b848 <next@@Base+0x1a88>
   1b7ec:	mov	r0, #1
   1b7f0:	strb	r0, [r6]
   1b7f4:	ldr	r0, [pc, #1508]	; 1bde0 <next@@Base+0x2020>
   1b7f8:	mov	r1, #66	; 0x42
   1b7fc:	mov	r2, #420	; 0x1a4
   1b800:	ldr	r0, [pc, r0]
   1b804:	bl	12698 <open64@plt>
   1b808:	ldr	r6, [pc, #1492]	; 1bde4 <next@@Base+0x2024>
   1b80c:	cmn	r0, #1
   1b810:	str	r0, [r5]
   1b814:	add	r6, pc, r6
   1b818:	bne	1b848 <next@@Base+0x1a88>
   1b81c:	ldr	r0, [pc, #1476]	; 1bde8 <next@@Base+0x2028>
   1b820:	ldr	r0, [pc, r0]
   1b824:	bl	1e1f0 <__gcov_flush@@Base+0x1c8>
   1b828:	ldr	r0, [pc, #1468]	; 1bdec <next@@Base+0x202c>
   1b82c:	mov	r1, #66	; 0x42
   1b830:	mov	r2, #420	; 0x1a4
   1b834:	ldr	r0, [pc, r0]
   1b838:	bl	12698 <open64@plt>
   1b83c:	cmn	r0, #1
   1b840:	str	r0, [r5]
   1b844:	beq	1bd70 <next@@Base+0x1fb0>
   1b848:	str	r9, [sp, #20]
   1b84c:	bl	1e2bc <__gcov_flush@@Base+0x294>
   1b850:	ldr	r0, [pc, #1392]	; 1bdc8 <next@@Base+0x2008>
   1b854:	mov	r1, r6
   1b858:	ldr	r0, [pc, r0]
   1b85c:	bl	125e4 <fdopen@plt>
   1b860:	ldr	r5, [pc, #1380]	; 1bdcc <next@@Base+0x200c>
   1b864:	ldr	r9, [pc, #1380]	; 1bdd0 <next@@Base+0x2010>
   1b868:	ldr	r1, [pc, #1380]	; 1bdd4 <next@@Base+0x2014>
   1b86c:	ldr	sl, [pc, #1380]	; 1bdd8 <next@@Base+0x2018>
   1b870:	add	r5, pc, r5
   1b874:	add	r9, pc, r9
   1b878:	add	r1, pc, r1
   1b87c:	add	sl, pc, sl
   1b880:	str	r4, [r5]
   1b884:	str	r4, [r5, #4]
   1b888:	str	r4, [r9]
   1b88c:	str	r4, [r9, #4]
   1b890:	str	r0, [r1]
   1b894:	str	r4, [sl]
   1b898:	ldr	r6, [pc, #1340]	; 1bddc <next@@Base+0x201c>
   1b89c:	ldr	r2, [pc, #1292]	; 1bdb0 <next@@Base+0x1ff0>
   1b8a0:	str	r8, [sp, #24]
   1b8a4:	add	r6, pc, r6
   1b8a8:	ldrb	r1, [r6]
   1b8ac:	mov	r6, r2
   1b8b0:	cmp	r1, #1
   1b8b4:	bne	1b8dc <next@@Base+0x1b1c>
   1b8b8:	mov	r0, #131072	; 0x20000
   1b8bc:	mov	r4, #131072	; 0x20000
   1b8c0:	bl	126b0 <malloc@plt>
   1b8c4:	mov	r1, #0
   1b8c8:	str	r4, [r5]
   1b8cc:	str	r1, [r5, #4]
   1b8d0:	mov	r8, r0
   1b8d4:	str	r0, [sl]
   1b8d8:	b	1ba6c <next@@Base+0x1cac>
   1b8dc:	mov	r1, #0
   1b8e0:	mov	r2, #2
   1b8e4:	mov	r8, #0
   1b8e8:	bl	127ac <fseek@plt>
   1b8ec:	ldr	r0, [pc, #1288]	; 1bdfc <next@@Base+0x203c>
   1b8f0:	ldr	r0, [pc, r0]
   1b8f4:	bl	12650 <ftell@plt>
   1b8f8:	mov	r2, r0
   1b8fc:	ldr	r0, [pc, #1276]	; 1be00 <next@@Base+0x2040>
   1b900:	asr	r3, r2, #31
   1b904:	add	r0, pc, r0
   1b908:	cmp	r2, #0
   1b90c:	strd	r2, [r0]
   1b910:	beq	1b9e0 <next@@Base+0x1c20>
   1b914:	ldr	r0, [pc, #1256]	; 1be04 <next@@Base+0x2044>
   1b918:	mov	r1, r2
   1b91c:	mov	r2, #3
   1b920:	mov	r3, #1
   1b924:	ldr	r0, [pc, r0]
   1b928:	str	r8, [sp, #8]
   1b92c:	str	r8, [sp, #12]
   1b930:	str	r0, [sp]
   1b934:	mov	r0, #0
   1b938:	bl	12644 <mmap64@plt>
   1b93c:	ldr	r1, [pc, #1220]	; 1be08 <next@@Base+0x2048>
   1b940:	cmn	r0, #1
   1b944:	add	r1, pc, r1
   1b948:	str	r0, [r1]
   1b94c:	beq	1b9a8 <next@@Base+0x1be8>
   1b950:	ldr	r1, [pc, #1232]	; 1be28 <next@@Base+0x2068>
   1b954:	add	r1, pc, r1
   1b958:	ldrb	r1, [r1]
   1b95c:	cmp	r1, #0
   1b960:	beq	1b96c <next@@Base+0x1bac>
   1b964:	mov	r8, r0
   1b968:	b	1ba78 <next@@Base+0x1cb8>
   1b96c:	ldr	ip, [r9, #4]
   1b970:	ldr	r5, [pc, #1236]	; 1be4c <next@@Base+0x208c>
   1b974:	mov	r4, r0
   1b978:	lsr	r2, r6, #16
   1b97c:	ldr	r5, [pc, r5]
   1b980:	lsr	r1, r6, #24
   1b984:	lsr	r3, r6, #8
   1b988:	strb	r6, [r4, r5]!
   1b98c:	strb	r2, [r4, #2]
   1b990:	adds	r2, r5, #4
   1b994:	adc	ip, ip, #0
   1b998:	strb	r1, [r4, #3]
   1b99c:	strb	r3, [r4, #1]
   1b9a0:	stm	r9, {r2, ip}
   1b9a4:	b	1bb40 <next@@Base+0x1d80>
   1b9a8:	bl	1271c <__errno_location@plt>
   1b9ac:	ldr	r1, [pc, #1112]	; 1be0c <next@@Base+0x204c>
   1b9b0:	ldr	r1, [pc, r1]
   1b9b4:	ldr	r0, [r0]
   1b9b8:	ldr	r4, [r1]
   1b9bc:	ldr	r7, [pc, #1100]	; 1be10 <next@@Base+0x2050>
   1b9c0:	ldr	r7, [pc, r7]
   1b9c4:	bl	126c8 <strerror@plt>
   1b9c8:	ldr	r1, [pc, #1092]	; 1be14 <next@@Base+0x2054>
   1b9cc:	mov	r3, r0
   1b9d0:	mov	r0, r4
   1b9d4:	add	r1, pc, r1
   1b9d8:	mov	r2, r7
   1b9dc:	bl	12710 <fprintf@plt>
   1b9e0:	str	r8, [r5]
   1b9e4:	str	r8, [r5, #4]
   1b9e8:	ldr	r0, [pc, #1064]	; 1be18 <next@@Base+0x2058>
   1b9ec:	mov	r2, #16646144	; 0xfe0000
   1b9f0:	orr	r2, r2, #-16777216	; 0xff000000
   1b9f4:	add	r0, pc, r0
   1b9f8:	mvn	r3, #0
   1b9fc:	str	r8, [r0]
   1ba00:	ldr	r1, [pc, #1044]	; 1be1c <next@@Base+0x205c>
   1ba04:	mov	r0, #1
   1ba08:	add	r1, pc, r1
   1ba0c:	strb	r0, [r1]
   1ba10:	ldr	r0, [r9, #4]
   1ba14:	ldr	r1, [pc, #1028]	; 1be20 <next@@Base+0x2060>
   1ba18:	eor	r3, r0, r3
   1ba1c:	ldr	r1, [pc, r1]
   1ba20:	eor	r2, r1, r2
   1ba24:	orrs	r2, r2, r3
   1ba28:	beq	1ba68 <next@@Base+0x1ca8>
   1ba2c:	ldr	r2, [pc, #896]	; 1bdb4 <next@@Base+0x1ff4>
   1ba30:	adds	r1, r1, r2
   1ba34:	adc	r0, r0, #0
   1ba38:	mvn	r2, #0
   1ba3c:	and	r7, r0, r2
   1ba40:	mov	r0, #16646144	; 0xfe0000
   1ba44:	orr	r0, r0, #-16777216	; 0xff000000
   1ba48:	and	r4, r1, r0
   1ba4c:	mov	r0, r4
   1ba50:	bl	126b0 <malloc@plt>
   1ba54:	stm	r5, {r4, r7}
   1ba58:	mov	r8, r0
   1ba5c:	ldr	r0, [pc, #960]	; 1be24 <next@@Base+0x2064>
   1ba60:	add	r0, pc, r0
   1ba64:	str	r8, [r0]
   1ba68:	mov	r0, r8
   1ba6c:	mov	r1, #0
   1ba70:	mov	r2, #131072	; 0x20000
   1ba74:	bl	12740 <memset@plt>
   1ba78:	ldr	r0, [r9, #4]
   1ba7c:	ldr	r1, [pc, #936]	; 1be2c <next@@Base+0x206c>
   1ba80:	mov	sl, r5
   1ba84:	mov	r7, #7
   1ba88:	orr	r7, r7, #131072	; 0x20000
   1ba8c:	ldr	r1, [pc, r1]
   1ba90:	ldr	r4, [r5, #4]
   1ba94:	ldr	r5, [pc, #916]	; 1be30 <next@@Base+0x2070>
   1ba98:	adds	r2, r1, #4
   1ba9c:	adc	r3, r0, #0
   1baa0:	ldr	r5, [pc, r5]
   1baa4:	subs	r2, r5, r2
   1baa8:	sbcs	r2, r4, r3
   1baac:	bcs	1bb84 <next@@Base+0x1dc4>
   1bab0:	adds	r1, r1, r7
   1bab4:	adc	r0, r0, #0
   1bab8:	subs	r1, r1, #4
   1babc:	sbc	r0, r0, #0
   1bac0:	mvn	r2, #0
   1bac4:	and	r5, r0, r2
   1bac8:	mov	r0, #16646144	; 0xfe0000
   1bacc:	orr	r0, r0, #-16777216	; 0xff000000
   1bad0:	and	r4, r1, r0
   1bad4:	mov	r0, r8
   1bad8:	mov	r1, r4
   1badc:	bl	12680 <realloc@plt>
   1bae0:	strd	r4, [sl]
   1bae4:	ldr	r1, [pc, #844]	; 1be38 <next@@Base+0x2078>
   1bae8:	mov	r7, r6
   1baec:	lsr	r2, r6, #24
   1baf0:	add	r1, pc, r1
   1baf4:	mov	r3, r0
   1baf8:	str	r0, [r1]
   1bafc:	ldr	r6, [pc, #824]	; 1be3c <next@@Base+0x207c>
   1bb00:	ldr	r1, [r9, #4]
   1bb04:	lsr	r5, r7, #16
   1bb08:	add	r6, pc, r6
   1bb0c:	ldrb	r6, [r6]
   1bb10:	ldr	r4, [pc, #808]	; 1be40 <next@@Base+0x2080>
   1bb14:	ldr	r4, [pc, r4]
   1bb18:	strb	r7, [r3, r4]!
   1bb1c:	strb	r2, [r3, #3]
   1bb20:	lsr	r2, r7, #8
   1bb24:	strb	r2, [r3, #1]
   1bb28:	adds	r2, r4, #4
   1bb2c:	adc	ip, r1, #0
   1bb30:	cmp	r6, #1
   1bb34:	strb	r5, [r3, #2]
   1bb38:	stm	r9, {r2, ip}
   1bb3c:	beq	1bbc4 <next@@Base+0x1e04>
   1bb40:	ldr	r4, [sp, #20]
   1bb44:	mov	r5, r0
   1bb48:	mov	lr, r9
   1bb4c:	ldrb	r1, [r4]
   1bb50:	ldrb	r3, [r4, #1]
   1bb54:	ldrb	r7, [r4, #2]
   1bb58:	ldrb	r6, [r4, #3]
   1bb5c:	strb	r1, [r5, r2]!
   1bb60:	adds	r4, r2, #4
   1bb64:	adc	r1, ip, #0
   1bb68:	strb	r6, [r5, #3]
   1bb6c:	strb	r7, [r5, #2]
   1bb70:	strb	r3, [r5, #1]
   1bb74:	str	r4, [lr]
   1bb78:	str	r1, [lr, #4]
   1bb7c:	ldr	r6, [sp, #24]
   1bb80:	b	1bd40 <next@@Base+0x1f80>
   1bb84:	ldr	r1, [r9, #4]
   1bb88:	ldr	r4, [pc, #676]	; 1be34 <next@@Base+0x2074>
   1bb8c:	mov	r5, r6
   1bb90:	lsr	r0, r6, #24
   1bb94:	ldr	r4, [pc, r4]
   1bb98:	lsr	r2, r6, #16
   1bb9c:	lsr	r3, r6, #8
   1bba0:	mov	r6, r8
   1bba4:	strb	r5, [r6, r4]!
   1bba8:	strb	r2, [r6, #2]
   1bbac:	adds	r2, r4, #4
   1bbb0:	adc	ip, r1, #0
   1bbb4:	strb	r0, [r6, #3]
   1bbb8:	strb	r3, [r6, #1]
   1bbbc:	stm	r9, {r2, ip}
   1bbc0:	mov	r0, r8
   1bbc4:	ldr	r7, [sl, #4]
   1bbc8:	ldr	r3, [pc, #628]	; 1be44 <next@@Base+0x2084>
   1bbcc:	adds	r6, r4, #8
   1bbd0:	mov	r8, r9
   1bbd4:	adc	r5, r1, #0
   1bbd8:	ldr	r3, [pc, r3]
   1bbdc:	mov	r9, sl
   1bbe0:	subs	r3, r3, r6
   1bbe4:	sbcs	r3, r7, r5
   1bbe8:	bcs	1bc8c <next@@Base+0x1ecc>
   1bbec:	mov	r2, #7
   1bbf0:	orr	r2, r2, #131072	; 0x20000
   1bbf4:	adds	r2, r4, r2
   1bbf8:	adc	r4, r1, #0
   1bbfc:	mov	r1, #16646144	; 0xfe0000
   1bc00:	orr	r1, r1, #-16777216	; 0xff000000
   1bc04:	and	r6, r2, r1
   1bc08:	mov	r1, r6
   1bc0c:	bl	12680 <realloc@plt>
   1bc10:	ldr	sl, [pc, #568]	; 1be50 <next@@Base+0x2090>
   1bc14:	mvn	r1, #0
   1bc18:	and	r7, r4, r1
   1bc1c:	add	sl, pc, sl
   1bc20:	strd	r6, [r9]
   1bc24:	str	r0, [sl]
   1bc28:	ldr	r1, [pc, #548]	; 1be54 <next@@Base+0x2094>
   1bc2c:	ldr	r2, [sp, #20]
   1bc30:	ldr	ip, [r8, #4]
   1bc34:	add	r1, pc, r1
   1bc38:	mov	lr, r8
   1bc3c:	ldrb	r3, [r1]
   1bc40:	ldrb	r1, [r2]
   1bc44:	ldrb	r7, [r2, #1]
   1bc48:	ldrb	r6, [r2, #2]
   1bc4c:	ldrb	r5, [r2, #3]
   1bc50:	ldr	r2, [pc, #512]	; 1be58 <next@@Base+0x2098>
   1bc54:	ldr	r2, [pc, r2]
   1bc58:	adds	r4, r2, #4
   1bc5c:	strb	r1, [r0, r2]
   1bc60:	add	r1, r0, r2
   1bc64:	strb	r5, [r1, #3]
   1bc68:	strb	r6, [r1, #2]
   1bc6c:	strb	r7, [r1, #1]
   1bc70:	adc	r1, ip, #0
   1bc74:	str	r4, [lr]
   1bc78:	str	r1, [lr, #4]
   1bc7c:	ldr	r6, [sp, #24]
   1bc80:	cmp	r3, #1
   1bc84:	beq	1bcd4 <next@@Base+0x1f14>
   1bc88:	b	1bd40 <next@@Base+0x1f80>
   1bc8c:	ldr	r6, [sp, #20]
   1bc90:	mov	r5, r0
   1bc94:	adds	r4, r2, #4
   1bc98:	ldrb	r1, [r6]
   1bc9c:	ldrb	r3, [r6, #1]
   1bca0:	ldrb	r7, [r6, #2]
   1bca4:	ldrb	r6, [r6, #3]
   1bca8:	strb	r1, [r5, r2]!
   1bcac:	adc	r1, ip, #0
   1bcb0:	strb	r3, [r5, #1]
   1bcb4:	mov	r3, r8
   1bcb8:	strb	r6, [r5, #3]
   1bcbc:	strb	r7, [r5, #2]
   1bcc0:	str	r4, [r3]
   1bcc4:	str	r1, [r3, #4]
   1bcc8:	ldr	r6, [sp, #24]
   1bccc:	ldr	sl, [pc, #372]	; 1be48 <next@@Base+0x2088>
   1bcd0:	add	sl, pc, sl
   1bcd4:	ldr	r7, [r9, #4]
   1bcd8:	ldr	r5, [pc, #380]	; 1be5c <next@@Base+0x209c>
   1bcdc:	adds	r3, r2, #8
   1bce0:	adc	lr, ip, #0
   1bce4:	ldr	r5, [pc, r5]
   1bce8:	subs	r3, r5, r3
   1bcec:	sbcs	r3, r7, lr
   1bcf0:	bcs	1bd3c <next@@Base+0x1f7c>
   1bcf4:	mov	r1, #7
   1bcf8:	orr	r1, r1, #131072	; 0x20000
   1bcfc:	adds	r1, r2, r1
   1bd00:	adc	r2, ip, #0
   1bd04:	mvn	r3, #0
   1bd08:	and	r5, r2, r3
   1bd0c:	mov	r2, #16646144	; 0xfe0000
   1bd10:	orr	r2, r2, #-16777216	; 0xff000000
   1bd14:	and	r4, r1, r2
   1bd18:	mov	r1, r4
   1bd1c:	bl	12680 <realloc@plt>
   1bd20:	strd	r4, [r9]
   1bd24:	str	r0, [sl]
   1bd28:	ldr	r1, [r8, #4]
   1bd2c:	ldr	r4, [pc, #300]	; 1be60 <next@@Base+0x20a0>
   1bd30:	mov	lr, r8
   1bd34:	ldr	r4, [pc, r4]
   1bd38:	b	1bd40 <next@@Base+0x1f80>
   1bd3c:	mov	lr, r8
   1bd40:	lsr	r2, r6, #24
   1bd44:	strb	r6, [r0, r4]!
   1bd48:	lsr	r3, r6, #16
   1bd4c:	lsr	r7, r6, #8
   1bd50:	strb	r2, [r0, #3]
   1bd54:	strb	r3, [r0, #2]
   1bd58:	strb	r7, [r0, #1]
   1bd5c:	adds	r0, r4, #4
   1bd60:	adc	r1, r1, #0
   1bd64:	strd	r0, [lr]
   1bd68:	sub	sp, fp, #28
   1bd6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd70:	bl	1271c <__errno_location@plt>
   1bd74:	ldr	r1, [pc, #116]	; 1bdf0 <next@@Base+0x2030>
   1bd78:	ldr	r1, [pc, r1]
   1bd7c:	ldr	r0, [r0]
   1bd80:	ldr	r4, [r1]
   1bd84:	ldr	r5, [pc, #104]	; 1bdf4 <next@@Base+0x2034>
   1bd88:	ldr	r5, [pc, r5]
   1bd8c:	bl	126c8 <strerror@plt>
   1bd90:	ldr	r1, [pc, #96]	; 1bdf8 <next@@Base+0x2038>
   1bd94:	mov	r3, r0
   1bd98:	mov	r0, r4
   1bd9c:	add	r1, pc, r1
   1bda0:	mov	r2, r5
   1bda4:	bl	12710 <fprintf@plt>
   1bda8:	sub	sp, fp, #28
   1bdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdb0:	strbvs	r6, [r3, -r1, ror #8]!
   1bdb4:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1bdb8:	andeq	r7, r1, r8, lsr #32
   1bdbc:	andeq	r7, r1, r8, lsr #32
   1bdc0:	andeq	r5, r1, ip, asr #19
   1bdc4:	andeq	r3, r0, r4, ror #25
   1bdc8:	andeq	r5, r1, r8, asr #18
   1bdcc:	andeq	r6, r1, r8, ror pc
   1bdd0:	andeq	r6, r1, ip, ror pc
   1bdd4:	andeq	r6, r1, r8, ror #30
   1bdd8:	andeq	r6, r1, r8, ror #30
   1bddc:	andeq	r6, r1, r8, lsr pc
   1bde0:	ldrdeq	r6, [r1], -r8
   1bde4:			; <UNDEFINED> instruction: 0x00003cb8
   1bde8:			; <UNDEFINED> instruction: 0x00016fb8
   1bdec:	andeq	r6, r1, r4, lsr #31
   1bdf0:	muleq	r1, r0, r3
   1bdf4:	andeq	r6, r1, r0, asr sl
   1bdf8:	andeq	r3, r0, r4, lsr r7
   1bdfc:	strdeq	r6, [r1], -r0
   1be00:	andeq	r6, r1, r4, lsl #30
   1be04:	andeq	r5, r1, ip, ror r8
   1be08:	andeq	r6, r1, r0, lsr #29
   1be0c:	andeq	r5, r1, r8, asr r7
   1be10:	andeq	r6, r1, r8, lsl lr
   1be14:	andeq	r3, r0, r6, asr ip
   1be18:	strdeq	r6, [r1], -r0
   1be1c:	ldrdeq	r6, [r1], -r4
   1be20:	ldrdeq	r6, [r1], -r4
   1be24:	andeq	r6, r1, r4, lsl #27
   1be28:	andeq	r6, r1, r8, lsl #29
   1be2c:	andeq	r6, r1, r4, ror #26
   1be30:	andeq	r6, r1, r8, asr #26
   1be34:	andeq	r6, r1, ip, asr ip
   1be38:	strdeq	r6, [r1], -r4
   1be3c:	ldrdeq	r6, [r1], -r4
   1be40:	ldrdeq	r6, [r1], -ip
   1be44:	andeq	r6, r1, r0, lsl ip
   1be48:	andeq	r6, r1, r4, lsl fp
   1be4c:	andeq	r6, r1, r4, ror lr
   1be50:	andeq	r6, r1, r8, asr #23
   1be54:	andeq	r6, r1, r8, lsr #23
   1be58:	muleq	r1, ip, fp
   1be5c:	andeq	r6, r1, r4, lsl #22
   1be60:			; <UNDEFINED> instruction: 0x00016abc
   1be64:	ldr	r0, [r0]
   1be68:	cmn	r0, #1
   1be6c:	beq	1be8c <next@@Base+0x20cc>
   1be70:	ldr	r0, [r1, r0, lsl #2]
   1be74:	cmp	r0, #0
   1be78:	bxeq	lr
   1be7c:	ldrd	r2, [r0]
   1be80:	adds	r2, r2, #1
   1be84:	adc	r3, r3, #0
   1be88:	strd	r2, [r0]
   1be8c:	bx	lr
   1be90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be94:	add	fp, sp, #28
   1be98:	sub	sp, sp, #12
   1be9c:	mov	r9, r0
   1bea0:	ldr	r0, [pc, #2000]	; 1c678 <next@@Base+0x28b8>
   1bea4:	mov	sl, #2
   1bea8:	cmp	r3, #0
   1beac:	movne	sl, #3
   1beb0:	ldr	r0, [pc, r0]
   1beb4:	cmp	r0, #0
   1beb8:	beq	1c670 <next@@Base+0x28b0>
   1bebc:	stm	sp, {r2, r3}
   1bec0:	ldr	r0, [pc, #1972]	; 1c67c <next@@Base+0x28bc>
   1bec4:	str	r1, [sp, #8]
   1bec8:	add	r0, pc, r0
   1becc:	ldrb	r0, [r0]
   1bed0:	cmp	r0, #1
   1bed4:	bne	1bf64 <next@@Base+0x21a4>
   1bed8:	ldr	r0, [pc, #1952]	; 1c680 <next@@Base+0x28c0>
   1bedc:	ldr	r4, [pc, #1952]	; 1c684 <next@@Base+0x28c4>
   1bee0:	add	r0, pc, r0
   1bee4:	add	r4, pc, r4
   1bee8:	ldr	r0, [r0, #4]
   1beec:	ldr	r5, [pc, #1940]	; 1c688 <next@@Base+0x28c8>
   1bef0:	ldr	r5, [pc, r5]
   1bef4:	ldr	r7, [r4, #4]
   1bef8:	ldr	r6, [pc, #1932]	; 1c68c <next@@Base+0x28cc>
   1befc:	adds	r2, r5, #4
   1bf00:	adc	r3, r0, #0
   1bf04:	ldr	r6, [pc, r6]
   1bf08:	subs	r2, r6, r2
   1bf0c:	sbcs	r2, r7, r3
   1bf10:	bcs	1bf64 <next@@Base+0x21a4>
   1bf14:	mov	r2, #7
   1bf18:	orr	r2, r2, #131072	; 0x20000
   1bf1c:	adds	r1, r5, r2
   1bf20:	adc	r0, r0, #0
   1bf24:	subs	r1, r1, #4
   1bf28:	sbc	r0, r0, #0
   1bf2c:	mvn	r2, #0
   1bf30:	and	r7, r0, r2
   1bf34:	mov	r0, #16646144	; 0xfe0000
   1bf38:	orr	r0, r0, #-16777216	; 0xff000000
   1bf3c:	ldr	r8, [pc, #1868]	; 1c690 <next@@Base+0x28d0>
   1bf40:	and	r6, r1, r0
   1bf44:	ldr	r0, [pc, #1864]	; 1c694 <next@@Base+0x28d4>
   1bf48:	mov	r1, r6
   1bf4c:	add	r8, pc, r8
   1bf50:	ldr	r0, [pc, r0]
   1bf54:	bl	12680 <realloc@plt>
   1bf58:	ldr	r1, [sp, #8]
   1bf5c:	strd	r6, [r4]
   1bf60:	str	r0, [r8]
   1bf64:	ldr	r3, [pc, #1836]	; 1c698 <next@@Base+0x28d8>
   1bf68:	ldr	r7, [pc, #1836]	; 1c69c <next@@Base+0x28dc>
   1bf6c:	mov	r0, #0
   1bf70:	add	r3, pc, r3
   1bf74:	mov	r2, #1
   1bf78:	ldr	r7, [pc, r7]
   1bf7c:	ldr	r8, [pc, #1820]	; 1c6a0 <next@@Base+0x28e0>
   1bf80:	adds	r4, r7, #4
   1bf84:	ldr	r8, [pc, r8]
   1bf88:	ldr	r6, [r3, #4]
   1bf8c:	mov	r5, r8
   1bf90:	strb	r0, [r5, r7]!
   1bf94:	strb	r2, [r5, #3]
   1bf98:	strb	r0, [r5, #2]
   1bf9c:	strb	r0, [r5, #1]
   1bfa0:	adc	r5, r6, #0
   1bfa4:	cmp	r1, #0
   1bfa8:	strd	r4, [r3]
   1bfac:	beq	1bfc0 <next@@Base+0x2200>
   1bfb0:	mov	r0, r1
   1bfb4:	bl	126f8 <strlen@plt>
   1bfb8:	add	r0, sl, r0, lsr #2
   1bfbc:	add	sl, r0, #2
   1bfc0:	ldr	r0, [pc, #1756]	; 1c6a4 <next@@Base+0x28e4>
   1bfc4:	add	r0, pc, r0
   1bfc8:	ldrb	r0, [r0]
   1bfcc:	cmp	r0, #0
   1bfd0:	beq	1c0b0 <next@@Base+0x22f0>
   1bfd4:	ldr	lr, [pc, #1744]	; 1c6ac <next@@Base+0x28ec>
   1bfd8:	adds	r0, r7, #8
   1bfdc:	adc	r1, r6, #0
   1bfe0:	add	lr, pc, lr
   1bfe4:	ldr	r2, [lr, #4]
   1bfe8:	ldr	r3, [pc, #1728]	; 1c6b0 <next@@Base+0x28f0>
   1bfec:	ldr	r3, [pc, r3]
   1bff0:	subs	r0, r3, r0
   1bff4:	sbcs	r0, r2, r1
   1bff8:	bcs	1c300 <next@@Base+0x2540>
   1bffc:	mov	r0, #7
   1c000:	orr	r0, r0, #131072	; 0x20000
   1c004:	adds	r0, r7, r0
   1c008:	adc	r1, r6, #0
   1c00c:	mvn	r2, #0
   1c010:	and	r5, r1, r2
   1c014:	mov	r1, #16646144	; 0xfe0000
   1c018:	orr	r1, r1, #-16777216	; 0xff000000
   1c01c:	and	r6, r0, r1
   1c020:	ldr	r4, [pc, #1680]	; 1c6b8 <next@@Base+0x28f8>
   1c024:	mov	r0, r8
   1c028:	mov	r1, r6
   1c02c:	add	r4, pc, r4
   1c030:	mov	r7, lr
   1c034:	bl	12680 <realloc@plt>
   1c038:	mov	lr, r7
   1c03c:	mov	r8, r0
   1c040:	str	r6, [lr]
   1c044:	str	r5, [lr, #4]
   1c048:	str	r8, [r4]
   1c04c:	ldr	r1, [pc, #1640]	; 1c6bc <next@@Base+0x28fc>
   1c050:	lsr	r0, sl, #24
   1c054:	add	r1, pc, r1
   1c058:	lsr	r3, sl, #16
   1c05c:	ldrb	r2, [r1]
   1c060:	ldr	r1, [pc, #1624]	; 1c6c0 <next@@Base+0x2900>
   1c064:	add	r1, pc, r1
   1c068:	mov	r7, r1
   1c06c:	ldr	r5, [r1, #4]
   1c070:	ldr	r4, [pc, #1612]	; 1c6c4 <next@@Base+0x2904>
   1c074:	mov	r1, r8
   1c078:	ldr	r4, [pc, r4]
   1c07c:	strb	sl, [r1, r4]!
   1c080:	ldr	ip, [sp, #8]
   1c084:	strb	r0, [r1, #3]
   1c088:	lsr	r0, sl, #8
   1c08c:	strb	r0, [r1, #1]
   1c090:	adds	r0, r4, #4
   1c094:	strb	r3, [r1, #2]
   1c098:	adc	r1, r5, #0
   1c09c:	mov	sl, r7
   1c0a0:	cmp	r2, #1
   1c0a4:	strd	r0, [sl]
   1c0a8:	bne	1c0e8 <next@@Base+0x2328>
   1c0ac:	b	1c338 <next@@Base+0x2578>
   1c0b0:	mov	r3, r8
   1c0b4:	lsr	r0, sl, #24
   1c0b8:	strb	sl, [r3, r4]!
   1c0bc:	lsr	r1, sl, #16
   1c0c0:	lsr	r2, sl, #8
   1c0c4:	strb	r0, [r3, #3]
   1c0c8:	strb	r1, [r3, #2]
   1c0cc:	strb	r2, [r3, #1]
   1c0d0:	ldr	sl, [pc, #1488]	; 1c6a8 <next@@Base+0x28e8>
   1c0d4:	ldr	ip, [sp, #8]
   1c0d8:	adds	r0, r7, #8
   1c0dc:	adc	r1, r6, #0
   1c0e0:	add	sl, pc, sl
   1c0e4:	strd	r0, [sl]
   1c0e8:	mov	r6, r8
   1c0ec:	lsr	r2, r9, #24
   1c0f0:	strb	r9, [r6, r0]!
   1c0f4:	lsr	r3, r9, #16
   1c0f8:	strb	r2, [r6, #3]
   1c0fc:	adds	r2, r0, #4
   1c100:	lsr	r7, r9, #8
   1c104:	strb	r3, [r6, #2]
   1c108:	adc	r3, r1, #0
   1c10c:	strb	r7, [r6, #1]
   1c110:	strd	r2, [sl]
   1c114:	ldr	r5, [sp]
   1c118:	mov	r6, r8
   1c11c:	adds	r4, r2, #4
   1c120:	lsr	r7, r5, #8
   1c124:	strb	r5, [r6, r2]!
   1c128:	lsr	r0, r5, #24
   1c12c:	lsr	r1, r5, #16
   1c130:	strb	r7, [r6, #1]
   1c134:	adc	r7, r3, #0
   1c138:	strb	r0, [r6, #3]
   1c13c:	strb	r1, [r6, #2]
   1c140:	stm	sl, {r4, r7}
   1c144:	ldr	r0, [sp, #4]
   1c148:	cmp	r0, #0
   1c14c:	beq	1c224 <next@@Base+0x2464>
   1c150:	ldr	r0, [pc, #1420]	; 1c6e4 <next@@Base+0x2924>
   1c154:	ldr	sl, [fp, #8]
   1c158:	add	r0, pc, r0
   1c15c:	ldrb	r0, [r0]
   1c160:	cmp	r0, #1
   1c164:	bne	1c1f0 <next@@Base+0x2430>
   1c168:	ldr	r9, [pc, #1400]	; 1c6e8 <next@@Base+0x2928>
   1c16c:	adds	r0, r2, #8
   1c170:	adc	r1, r3, #0
   1c174:	add	r9, pc, r9
   1c178:	ldr	r6, [r9, #4]
   1c17c:	ldr	r5, [pc, #1384]	; 1c6ec <next@@Base+0x292c>
   1c180:	ldr	r5, [pc, r5]
   1c184:	subs	r0, r5, r0
   1c188:	sbcs	r0, r6, r1
   1c18c:	bcs	1c1f0 <next@@Base+0x2430>
   1c190:	mov	r0, #7
   1c194:	orr	r0, r0, #131072	; 0x20000
   1c198:	adds	r0, r2, r0
   1c19c:	adc	r1, r3, #0
   1c1a0:	mvn	r2, #0
   1c1a4:	and	r5, r1, r2
   1c1a8:	mov	r1, #16646144	; 0xfe0000
   1c1ac:	orr	r1, r1, #-16777216	; 0xff000000
   1c1b0:	and	r6, r0, r1
   1c1b4:	ldr	r4, [pc, #1332]	; 1c6f0 <next@@Base+0x2930>
   1c1b8:	mov	r0, r8
   1c1bc:	mov	r1, r6
   1c1c0:	add	r4, pc, r4
   1c1c4:	bl	12680 <realloc@plt>
   1c1c8:	ldr	ip, [sp, #8]
   1c1cc:	str	r6, [r9]
   1c1d0:	str	r5, [r9, #4]
   1c1d4:	mov	r8, r0
   1c1d8:	ldr	r0, [pc, #1300]	; 1c6f4 <next@@Base+0x2934>
   1c1dc:	str	r8, [r4]
   1c1e0:	add	r0, pc, r0
   1c1e4:	ldr	r7, [r0, #4]
   1c1e8:	ldr	r4, [pc, #1288]	; 1c6f8 <next@@Base+0x2938>
   1c1ec:	ldr	r4, [pc, r4]
   1c1f0:	mov	r3, r8
   1c1f4:	lsr	r0, sl, #24
   1c1f8:	strb	sl, [r3, r4]!
   1c1fc:	lsr	r1, sl, #16
   1c200:	lsr	r2, sl, #8
   1c204:	strb	r0, [r3, #3]
   1c208:	strb	r1, [r3, #2]
   1c20c:	strb	r2, [r3, #1]
   1c210:	ldr	sl, [pc, #1252]	; 1c6fc <next@@Base+0x293c>
   1c214:	adds	r4, r4, #4
   1c218:	adc	r7, r7, #0
   1c21c:	add	sl, pc, sl
   1c220:	stm	sl, {r4, r7}
   1c224:	cmp	ip, #0
   1c228:	beq	1c670 <next@@Base+0x28b0>
   1c22c:	mov	r0, ip
   1c230:	bl	126f8 <strlen@plt>
   1c234:	mov	r9, #1
   1c238:	add	r5, r9, r0, lsr #2
   1c23c:	ldr	r0, [pc, #1212]	; 1c700 <next@@Base+0x2940>
   1c240:	add	r0, pc, r0
   1c244:	ldrb	r0, [r0]
   1c248:	cmp	r0, #1
   1c24c:	bne	1c2f0 <next@@Base+0x2530>
   1c250:	ldr	sl, [pc, #1196]	; 1c704 <next@@Base+0x2944>
   1c254:	adds	r0, r4, #4
   1c258:	adc	r1, r7, #0
   1c25c:	add	sl, pc, sl
   1c260:	ldr	r2, [sl, #4]
   1c264:	ldr	r3, [pc, #1180]	; 1c708 <next@@Base+0x2948>
   1c268:	ldr	r3, [pc, r3]
   1c26c:	subs	r0, r3, r0
   1c270:	sbcs	r0, r2, r1
   1c274:	bcs	1c4a4 <next@@Base+0x26e4>
   1c278:	mov	r0, #0
   1c27c:	str	r0, [sp, #4]
   1c280:	mov	r0, #7
   1c284:	orr	r0, r0, #131072	; 0x20000
   1c288:	adds	r0, r4, r0
   1c28c:	adc	r1, r7, #0
   1c290:	subs	r0, r0, #4
   1c294:	sbc	r1, r1, #0
   1c298:	mvn	r2, #0
   1c29c:	and	r7, r1, r2
   1c2a0:	mov	r1, #16646144	; 0xfe0000
   1c2a4:	orr	r1, r1, #-16777216	; 0xff000000
   1c2a8:	and	r4, r0, r1
   1c2ac:	ldr	r6, [pc, #1116]	; 1c710 <next@@Base+0x2950>
   1c2b0:	mov	r0, r8
   1c2b4:	mov	r1, r4
   1c2b8:	add	r6, pc, r6
   1c2bc:	bl	12680 <realloc@plt>
   1c2c0:	stm	sl, {r4, r7}
   1c2c4:	str	r0, [r6]
   1c2c8:	ldr	sl, [pc, #1092]	; 1c714 <next@@Base+0x2954>
   1c2cc:	mov	r8, r0
   1c2d0:	add	sl, pc, sl
   1c2d4:	ldr	r7, [sl, #4]
   1c2d8:	ldr	r0, [pc, #1080]	; 1c718 <next@@Base+0x2958>
   1c2dc:	add	r0, pc, r0
   1c2e0:	ldrb	r9, [r0]
   1c2e4:	ldr	r4, [pc, #1072]	; 1c71c <next@@Base+0x295c>
   1c2e8:	ldr	r4, [pc, r4]
   1c2ec:	b	1c4b4 <next@@Base+0x26f4>
   1c2f0:	mov	r0, #0
   1c2f4:	str	r0, [sp, #4]
   1c2f8:	mov	r9, #0
   1c2fc:	b	1c4b4 <next@@Base+0x26f4>
   1c300:	mov	r3, r8
   1c304:	lsr	r0, sl, #24
   1c308:	strb	sl, [r3, r4]!
   1c30c:	lsr	r1, sl, #16
   1c310:	lsr	r2, sl, #8
   1c314:	strb	r0, [r3, #3]
   1c318:	strb	r1, [r3, #2]
   1c31c:	strb	r2, [r3, #1]
   1c320:	ldr	sl, [pc, #908]	; 1c6b4 <next@@Base+0x28f4>
   1c324:	adds	r0, r7, #8
   1c328:	adc	r1, r6, #0
   1c32c:	add	sl, pc, sl
   1c330:	ldr	ip, [sp, #8]
   1c334:	strd	r0, [sl]
   1c338:	ldr	r7, [lr, #4]
   1c33c:	ldr	r6, [pc, #900]	; 1c6c8 <next@@Base+0x2908>
   1c340:	adds	r2, r4, #8
   1c344:	adc	r3, r5, #0
   1c348:	ldr	r6, [pc, r6]
   1c34c:	subs	r2, r6, r2
   1c350:	sbcs	r2, r7, r3
   1c354:	bcs	1c3f8 <next@@Base+0x2638>
   1c358:	mov	r0, #7
   1c35c:	orr	r0, r0, #131072	; 0x20000
   1c360:	adds	r0, r4, r0
   1c364:	adc	r1, r5, #0
   1c368:	mvn	r2, #0
   1c36c:	and	r5, r1, r2
   1c370:	mov	r1, #16646144	; 0xfe0000
   1c374:	orr	r1, r1, #-16777216	; 0xff000000
   1c378:	and	r4, r0, r1
   1c37c:	ldr	r6, [pc, #840]	; 1c6cc <next@@Base+0x290c>
   1c380:	mov	r0, r8
   1c384:	mov	r1, r4
   1c388:	add	r6, pc, r6
   1c38c:	mov	r7, lr
   1c390:	bl	12680 <realloc@plt>
   1c394:	mov	lr, r7
   1c398:	str	r0, [r6]
   1c39c:	strd	r4, [lr]
   1c3a0:	mov	r8, r0
   1c3a4:	ldr	ip, [sp, #8]
   1c3a8:	ldr	r0, [pc, #800]	; 1c6d0 <next@@Base+0x2910>
   1c3ac:	ldr	r1, [sl, #4]
   1c3b0:	mov	r3, r8
   1c3b4:	add	r0, pc, r0
   1c3b8:	lsr	r2, r9, #24
   1c3bc:	ldrb	r7, [r0]
   1c3c0:	ldr	r0, [pc, #780]	; 1c6d4 <next@@Base+0x2914>
   1c3c4:	lsr	r6, r9, #16
   1c3c8:	ldr	r0, [pc, r0]
   1c3cc:	strb	r9, [r3, r0]!
   1c3d0:	strb	r2, [r3, #3]
   1c3d4:	lsr	r2, r9, #8
   1c3d8:	strb	r2, [r3, #1]
   1c3dc:	adds	r2, r0, #4
   1c3e0:	strb	r6, [r3, #2]
   1c3e4:	adc	r3, r1, #0
   1c3e8:	cmp	r7, #1
   1c3ec:	strd	r2, [sl]
   1c3f0:	bne	1c114 <next@@Base+0x2354>
   1c3f4:	b	1c424 <next@@Base+0x2664>
   1c3f8:	mov	r6, r8
   1c3fc:	lsr	r2, r9, #24
   1c400:	strb	r9, [r6, r0]!
   1c404:	lsr	r3, r9, #16
   1c408:	strb	r2, [r6, #3]
   1c40c:	adds	r2, r0, #4
   1c410:	lsr	r7, r9, #8
   1c414:	strb	r3, [r6, #2]
   1c418:	adc	r3, r1, #0
   1c41c:	strb	r7, [r6, #1]
   1c420:	strd	r2, [sl]
   1c424:	ldr	r5, [lr, #4]
   1c428:	ldr	r4, [pc, #680]	; 1c6d8 <next@@Base+0x2918>
   1c42c:	adds	r7, r0, #8
   1c430:	adc	r6, r1, #0
   1c434:	ldr	r4, [pc, r4]
   1c438:	subs	r7, r4, r7
   1c43c:	sbcs	r7, r5, r6
   1c440:	bcs	1c114 <next@@Base+0x2354>
   1c444:	mov	r2, #7
   1c448:	orr	r2, r2, #131072	; 0x20000
   1c44c:	adds	r0, r0, r2
   1c450:	adc	r1, r1, #0
   1c454:	mvn	r2, #0
   1c458:	and	r5, r1, r2
   1c45c:	mov	r1, #16646144	; 0xfe0000
   1c460:	orr	r1, r1, #-16777216	; 0xff000000
   1c464:	and	r6, r0, r1
   1c468:	ldr	r4, [pc, #620]	; 1c6dc <next@@Base+0x291c>
   1c46c:	mov	r0, r8
   1c470:	mov	r1, r6
   1c474:	add	r4, pc, r4
   1c478:	mov	r7, lr
   1c47c:	bl	12680 <realloc@plt>
   1c480:	ldr	ip, [sp, #8]
   1c484:	str	r6, [r7]
   1c488:	str	r5, [r7, #4]
   1c48c:	str	r0, [r4]
   1c490:	ldr	r3, [sl, #4]
   1c494:	ldr	r2, [pc, #580]	; 1c6e0 <next@@Base+0x2920>
   1c498:	mov	r8, r0
   1c49c:	ldr	r2, [pc, r2]
   1c4a0:	b	1c114 <next@@Base+0x2354>
   1c4a4:	mov	r0, #0
   1c4a8:	str	r0, [sp, #4]
   1c4ac:	ldr	sl, [pc, #600]	; 1c70c <next@@Base+0x294c>
   1c4b0:	add	sl, pc, sl
   1c4b4:	mov	r3, r8
   1c4b8:	ldr	r0, [sp, #8]
   1c4bc:	strb	r5, [r3, r4]!
   1c4c0:	adds	r4, r4, #4
   1c4c4:	lsr	r6, r5, #24
   1c4c8:	lsr	r1, r5, #16
   1c4cc:	lsr	r2, r5, #8
   1c4d0:	adc	r5, r7, #0
   1c4d4:	strb	r6, [r3, #3]
   1c4d8:	strb	r1, [r3, #2]
   1c4dc:	strb	r2, [r3, #1]
   1c4e0:	strd	r4, [sl]
   1c4e4:	bl	126f8 <strlen@plt>
   1c4e8:	mov	r7, r0
   1c4ec:	cmp	r9, #0
   1c4f0:	beq	1c590 <next@@Base+0x27d0>
   1c4f4:	ldr	r6, [pc, #548]	; 1c720 <next@@Base+0x2960>
   1c4f8:	adds	r0, r4, r7
   1c4fc:	adc	r1, r5, #0
   1c500:	add	r6, pc, r6
   1c504:	ldr	r2, [r6, #4]
   1c508:	ldr	r3, [pc, #532]	; 1c724 <next@@Base+0x2964>
   1c50c:	ldr	r3, [pc, r3]
   1c510:	subs	r3, r3, r0
   1c514:	sbcs	r2, r2, r1
   1c518:	bcs	1c588 <next@@Base+0x27c8>
   1c51c:	mov	r2, #7
   1c520:	orr	r2, r2, #131072	; 0x20000
   1c524:	adds	r0, r0, r2
   1c528:	adc	r1, r1, #0
   1c52c:	subs	r0, r0, #8
   1c530:	sbc	r1, r1, #0
   1c534:	mvn	r2, #0
   1c538:	and	r5, r1, r2
   1c53c:	mov	r1, #16646144	; 0xfe0000
   1c540:	orr	r1, r1, #-16777216	; 0xff000000
   1c544:	and	r4, r0, r1
   1c548:	ldr	r9, [pc, #472]	; 1c728 <next@@Base+0x2968>
   1c54c:	mov	r0, r8
   1c550:	mov	r1, r4
   1c554:	add	r9, pc, r9
   1c558:	bl	12680 <realloc@plt>
   1c55c:	strd	r4, [r6]
   1c560:	str	r0, [r9]
   1c564:	mov	r8, r0
   1c568:	ldr	r5, [sl, #4]
   1c56c:	ldr	r0, [pc, #440]	; 1c72c <next@@Base+0x296c>
   1c570:	add	r0, pc, r0
   1c574:	ldrb	r0, [r0]
   1c578:	str	r0, [sp, #4]
   1c57c:	ldr	r4, [pc, #428]	; 1c730 <next@@Base+0x2970>
   1c580:	ldr	r4, [pc, r4]
   1c584:	b	1c590 <next@@Base+0x27d0>
   1c588:	mov	r0, #1
   1c58c:	str	r0, [sp, #4]
   1c590:	ldr	r9, [sp, #8]
   1c594:	add	r0, r8, r4
   1c598:	mov	r2, r7
   1c59c:	mov	r1, r9
   1c5a0:	bl	12638 <memcpy@plt>
   1c5a4:	adds	r6, r4, r7
   1c5a8:	mov	r0, r9
   1c5ac:	adc	r5, r5, #0
   1c5b0:	str	r6, [sl]
   1c5b4:	str	r5, [sl, #4]
   1c5b8:	bl	126f8 <strlen@plt>
   1c5bc:	and	r0, r0, #3
   1c5c0:	rsb	r4, r0, #4
   1c5c4:	ldr	r0, [sp, #4]
   1c5c8:	cmp	r0, #0
   1c5cc:	beq	1c654 <next@@Base+0x2894>
   1c5d0:	ldr	r7, [pc, #348]	; 1c734 <next@@Base+0x2974>
   1c5d4:	adds	r0, r6, r4
   1c5d8:	adc	r1, r5, #0
   1c5dc:	add	r7, pc, r7
   1c5e0:	ldr	r2, [r7, #4]
   1c5e4:	ldr	r3, [pc, #332]	; 1c738 <next@@Base+0x2978>
   1c5e8:	ldr	r3, [pc, r3]
   1c5ec:	subs	r3, r3, r0
   1c5f0:	sbcs	r2, r2, r1
   1c5f4:	bcs	1c654 <next@@Base+0x2894>
   1c5f8:	mov	r2, #7
   1c5fc:	orr	r2, r2, #131072	; 0x20000
   1c600:	adds	r0, r0, r2
   1c604:	adc	r1, r1, #0
   1c608:	subs	r0, r0, #8
   1c60c:	sbc	r1, r1, #0
   1c610:	mvn	r2, #0
   1c614:	and	r5, r1, r2
   1c618:	mov	r1, #16646144	; 0xfe0000
   1c61c:	orr	r1, r1, #-16777216	; 0xff000000
   1c620:	and	r6, r0, r1
   1c624:	ldr	r9, [pc, #272]	; 1c73c <next@@Base+0x297c>
   1c628:	mov	r0, r8
   1c62c:	mov	r1, r6
   1c630:	add	r9, pc, r9
   1c634:	bl	12680 <realloc@plt>
   1c638:	str	r6, [r7]
   1c63c:	str	r5, [r7, #4]
   1c640:	str	r0, [r9]
   1c644:	ldr	r5, [sl, #4]
   1c648:	ldr	r6, [pc, #240]	; 1c740 <next@@Base+0x2980>
   1c64c:	mov	r8, r0
   1c650:	ldr	r6, [pc, r6]
   1c654:	add	r0, r8, r6
   1c658:	mov	r1, #0
   1c65c:	mov	r2, r4
   1c660:	bl	12740 <memset@plt>
   1c664:	adds	r0, r6, r4
   1c668:	adc	r1, r5, #0
   1c66c:	strd	r0, [sl]
   1c670:	sub	sp, fp, #28
   1c674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c678:	andeq	r6, r1, r0, lsr r9
   1c67c:	andeq	r6, r1, r4, lsl r9
   1c680:	andeq	r6, r1, r0, lsl r9
   1c684:	andeq	r6, r1, r4, lsl #18
   1c688:	andeq	r6, r1, r0, lsl #18
   1c68c:	andeq	r6, r1, r4, ror #17
   1c690:	muleq	r1, r8, r8
   1c694:	muleq	r1, r4, r8
   1c698:	andeq	r6, r1, r0, lsl #17
   1c69c:	andeq	r6, r1, r8, ror r8
   1c6a0:	andeq	r6, r1, r0, ror #16
   1c6a4:	andeq	r6, r1, r8, lsl r8
   1c6a8:	andeq	r6, r1, r0, lsl r7
   1c6ac:	andeq	r6, r1, r8, lsl #16
   1c6b0:	strdeq	r6, [r1], -ip
   1c6b4:	andeq	r6, r1, r4, asr #9
   1c6b8:			; <UNDEFINED> instruction: 0x000167b8
   1c6bc:	andeq	r6, r1, r8, lsl #15
   1c6c0:	andeq	r6, r1, ip, lsl #15
   1c6c4:	andeq	r6, r1, r8, ror r7
   1c6c8:	andeq	r6, r1, r0, lsr #9
   1c6cc:	andeq	r6, r1, ip, asr r4
   1c6d0:	andeq	r6, r1, r8, lsr #8
   1c6d4:	andeq	r6, r1, r8, lsr #8
   1c6d8:			; <UNDEFINED> instruction: 0x000163b4
   1c6dc:	andeq	r6, r1, r0, ror r3
   1c6e0:	andeq	r6, r1, r4, asr r3
   1c6e4:	andeq	r6, r1, r4, lsl #13
   1c6e8:	andeq	r6, r1, r4, ror r6
   1c6ec:	andeq	r6, r1, r8, ror #12
   1c6f0:	andeq	r6, r1, r4, lsr #12
   1c6f4:	andeq	r6, r1, r0, lsl r6
   1c6f8:	andeq	r6, r1, r4, lsl #12
   1c6fc:	ldrdeq	r6, [r1], -r4
   1c700:	muleq	r1, ip, r5
   1c704:	andeq	r6, r1, ip, lsl #11
   1c708:	andeq	r6, r1, r0, lsl #11
   1c70c:	andeq	r6, r1, r0, asr #6
   1c710:	andeq	r6, r1, ip, lsr #10
   1c714:	andeq	r6, r1, r0, lsr #10
   1c718:	andeq	r6, r1, r0, lsl #10
   1c71c:	andeq	r6, r1, r8, lsl #10
   1c720:	andeq	r6, r1, r8, ror #5
   1c724:	ldrdeq	r6, [r1], -ip
   1c728:	muleq	r1, r0, r2
   1c72c:	andeq	r6, r1, ip, ror #4
   1c730:	andeq	r6, r1, r0, ror r2
   1c734:	andeq	r6, r1, ip, lsl #4
   1c738:	andeq	r6, r1, r0, lsl #4
   1c73c:			; <UNDEFINED> instruction: 0x000161b4
   1c740:	andeq	r6, r1, r0, lsr #3
   1c744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c748:	add	fp, sp, #28
   1c74c:	sub	sp, sp, #28
   1c750:	mov	ip, r0
   1c754:	ldr	r0, [pc, #1728]	; 1ce1c <next@@Base+0x305c>
   1c758:	ldr	r0, [pc, r0]
   1c75c:	cmp	r0, #0
   1c760:	beq	1c87c <next@@Base+0x2abc>
   1c764:	ldr	r2, [pc, #1716]	; 1ce20 <next@@Base+0x3060>
   1c768:	mov	sl, r1
   1c76c:	add	r2, pc, r2
   1c770:	ldr	r3, [r2, #4]
   1c774:	ldr	r4, [pc, #1704]	; 1ce24 <next@@Base+0x3064>
   1c778:	ldr	r4, [pc, r4]
   1c77c:	ldr	r6, [pc, #1700]	; 1ce28 <next@@Base+0x3068>
   1c780:	add	r6, pc, r6
   1c784:	ldrb	r0, [r6]
   1c788:	cmp	r0, #0
   1c78c:	beq	1c884 <next@@Base+0x2ac4>
   1c790:	ldr	r8, [pc, #1720]	; 1ce50 <next@@Base+0x3090>
   1c794:	mov	r5, #10551296	; 0xa10000
   1c798:	adds	r9, r4, #4
   1c79c:	add	r8, pc, r8
   1c7a0:	adc	r2, r3, #0
   1c7a4:	ldr	r0, [r8, #4]
   1c7a8:	ldr	r1, [pc, #1700]	; 1ce54 <next@@Base+0x3094>
   1c7ac:	orr	r5, r5, #16777216	; 0x1000000
   1c7b0:	ldr	r1, [pc, r1]
   1c7b4:	subs	r1, r1, r9
   1c7b8:	sbcs	r0, r0, r2
   1c7bc:	bcs	1c994 <next@@Base+0x2bd4>
   1c7c0:	mov	r0, #3
   1c7c4:	orr	r0, r0, #131072	; 0x20000
   1c7c8:	adds	r0, r4, r0
   1c7cc:	adc	r1, r3, #0
   1c7d0:	mvn	r2, #0
   1c7d4:	and	r9, r1, r2
   1c7d8:	mov	r1, #16646144	; 0xfe0000
   1c7dc:	orr	r1, r1, #-16777216	; 0xff000000
   1c7e0:	and	r4, r0, r1
   1c7e4:	ldr	r0, [pc, #1652]	; 1ce60 <next@@Base+0x30a0>
   1c7e8:	mov	r1, r4
   1c7ec:	mov	r7, ip
   1c7f0:	ldr	r0, [pc, r0]
   1c7f4:	bl	12680 <realloc@plt>
   1c7f8:	ldr	ip, [pc, #1636]	; 1ce64 <next@@Base+0x30a4>
   1c7fc:	ldr	lr, [pc, #1636]	; 1ce68 <next@@Base+0x30a8>
   1c800:	stm	r8, {r4, r9}
   1c804:	ldr	r1, [pc, #1632]	; 1ce6c <next@@Base+0x30ac>
   1c808:	add	ip, pc, ip
   1c80c:	add	lr, pc, lr
   1c810:	add	r1, pc, r1
   1c814:	mov	r2, r0
   1c818:	str	r2, [r1]
   1c81c:	mov	r6, ip
   1c820:	ldrb	ip, [ip]
   1c824:	ldr	r3, [lr, #4]
   1c828:	ldr	r4, [pc, #1600]	; 1ce70 <next@@Base+0x30b0>
   1c82c:	lsr	r0, r5, #24
   1c830:	mov	r1, r8
   1c834:	ldr	r4, [pc, r4]
   1c838:	str	r2, [sp, #20]
   1c83c:	lsl	r8, r7, #1
   1c840:	strb	r5, [r2, r4]!
   1c844:	adds	r9, r4, #4
   1c848:	strb	r0, [r2, #3]
   1c84c:	lsr	r0, r5, #16
   1c850:	strb	r0, [r2, #2]
   1c854:	lsr	r0, r5, #8
   1c858:	strb	r0, [r2, #1]
   1c85c:	adc	r5, r3, #0
   1c860:	mov	r0, #0
   1c864:	cmp	ip, #1
   1c868:	str	r3, [sp, #16]
   1c86c:	str	r9, [lr]
   1c870:	str	r5, [lr, #4]
   1c874:	beq	1c9e8 <next@@Base+0x2c28>
   1c878:	b	1cb38 <next@@Base+0x2d78>
   1c87c:	sub	sp, fp, #28
   1c880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c884:	ldr	r0, [pc, #1440]	; 1ce2c <next@@Base+0x306c>
   1c888:	mov	r7, r3
   1c88c:	adds	r9, r4, #4
   1c890:	mov	lr, r2
   1c894:	ldr	r0, [pc, r0]
   1c898:	str	r0, [sp, #20]
   1c89c:	ldrb	r1, [r0, r4]!
   1c8a0:	str	r7, [sp, #16]
   1c8a4:	ldrb	r5, [r0, #1]
   1c8a8:	ldrb	r3, [r0, #2]
   1c8ac:	ldrb	r0, [r0, #3]
   1c8b0:	orr	r1, r1, r5, lsl #8
   1c8b4:	orr	r1, r1, r3, lsl #16
   1c8b8:	orr	r3, r1, r0, lsl #24
   1c8bc:	adc	r5, r7, #0
   1c8c0:	mov	r7, #0
   1c8c4:	cmn	r3, #1
   1c8c8:	str	r9, [r2]
   1c8cc:	str	r5, [r2, #4]
   1c8d0:	beq	1ca94 <next@@Base+0x2cd4>
   1c8d4:	mov	r0, #10551296	; 0xa10000
   1c8d8:	orr	r0, r0, #16777216	; 0x1000000
   1c8dc:	cmp	r3, r0
   1c8e0:	bne	1caa0 <next@@Base+0x2ce0>
   1c8e4:	str	r5, [sp, #8]
   1c8e8:	ldr	r0, [sp, #20]
   1c8ec:	str	r4, [sp, #4]
   1c8f0:	adds	r5, r4, #8
   1c8f4:	ldr	r3, [r0, r9]
   1c8f8:	ldr	r0, [sp, #16]
   1c8fc:	mov	r1, r9
   1c900:	adc	r9, r0, #0
   1c904:	cmn	r3, #1
   1c908:	stm	lr, {r5, r9}
   1c90c:	beq	1caac <next@@Base+0x2cec>
   1c910:	lsr	r0, r3, #1
   1c914:	mov	r7, ip
   1c918:	cmp	r0, ip
   1c91c:	bne	1caac <next@@Base+0x2cec>
   1c920:	lsl	r0, r7, #3
   1c924:	mov	r4, r1
   1c928:	bl	126b0 <malloc@plt>
   1c92c:	mov	r1, r0
   1c930:	cmp	r7, #0
   1c934:	beq	1cad4 <next@@Base+0x2d14>
   1c938:	mov	r0, r7
   1c93c:	str	r7, [sp, #24]
   1c940:	str	r1, [sp, #12]
   1c944:	ldr	r2, [sp, #20]
   1c948:	ldr	r3, [r2, r5]!
   1c94c:	adds	r5, r5, #8
   1c950:	ldr	r2, [r2, #4]
   1c954:	str	r3, [r1]
   1c958:	adc	r9, r9, #0
   1c95c:	str	r2, [r1, #4]
   1c960:	subs	r0, r0, #1
   1c964:	add	r1, r1, #8
   1c968:	bne	1c944 <next@@Base+0x2b84>
   1c96c:	ldr	lr, [pc, #1236]	; 1ce48 <next@@Base+0x3088>
   1c970:	add	lr, pc, lr
   1c974:	mov	r0, lr
   1c978:	stm	r0, {r5, r9}
   1c97c:	ldr	ip, [pc, #1224]	; 1ce4c <next@@Base+0x308c>
   1c980:	ldr	r0, [sp, #12]
   1c984:	add	ip, pc, ip
   1c988:	mov	r6, ip
   1c98c:	ldr	ip, [sp, #24]
   1c990:	b	1caf0 <next@@Base+0x2d30>
   1c994:	str	r3, [sp, #16]
   1c998:	ldr	r3, [pc, #1208]	; 1ce58 <next@@Base+0x3098>
   1c99c:	mov	lr, r5
   1c9a0:	mov	r7, ip
   1c9a4:	lsr	ip, r5, #16
   1c9a8:	ldr	r3, [pc, r3]
   1c9ac:	lsr	r1, r5, #8
   1c9b0:	str	r3, [sp, #20]
   1c9b4:	strb	lr, [r3, r4]!
   1c9b8:	lsr	r0, lr, #24
   1c9bc:	strb	r1, [r3, #1]
   1c9c0:	strb	r0, [r3, #3]
   1c9c4:	strb	ip, [r3, #2]
   1c9c8:	ldr	lr, [pc, #1164]	; 1ce5c <next@@Base+0x309c>
   1c9cc:	lsl	r5, r7, #1
   1c9d0:	add	lr, pc, lr
   1c9d4:	mov	r1, r8
   1c9d8:	mov	r8, r5
   1c9dc:	str	r9, [lr]
   1c9e0:	str	r2, [lr, #4]
   1c9e4:	mov	r5, r2
   1c9e8:	str	r8, [sp, #24]
   1c9ec:	mov	r8, r1
   1c9f0:	ldr	r0, [sp, #16]
   1c9f4:	ldr	r2, [r8, #4]
   1c9f8:	ldr	r3, [pc, #1140]	; 1ce74 <next@@Base+0x30b4>
   1c9fc:	adds	ip, r4, #8
   1ca00:	adc	r1, r0, #0
   1ca04:	mov	r0, #0
   1ca08:	ldr	r3, [pc, r3]
   1ca0c:	subs	r3, r3, ip
   1ca10:	sbcs	r1, r2, r1
   1ca14:	bcs	1ca8c <next@@Base+0x2ccc>
   1ca18:	ldr	r5, [pc, #1112]	; 1ce78 <next@@Base+0x30b8>
   1ca1c:	mov	r0, #3
   1ca20:	ldr	r1, [sp, #16]
   1ca24:	orr	r0, r0, #131072	; 0x20000
   1ca28:	adds	r0, r4, r0
   1ca2c:	adc	r1, r1, #0
   1ca30:	adds	r0, r0, #4
   1ca34:	adc	r1, r1, #0
   1ca38:	mvn	r2, #0
   1ca3c:	and	r9, r1, r2
   1ca40:	mov	r1, #16646144	; 0xfe0000
   1ca44:	orr	r1, r1, #-16777216	; 0xff000000
   1ca48:	and	r4, r0, r1
   1ca4c:	ldr	r0, [sp, #20]
   1ca50:	mov	r1, r4
   1ca54:	add	r5, pc, r5
   1ca58:	bl	12680 <realloc@plt>
   1ca5c:	ldr	ip, [pc, #1048]	; 1ce7c <next@@Base+0x30bc>
   1ca60:	ldr	lr, [pc, #1048]	; 1ce80 <next@@Base+0x30c0>
   1ca64:	stm	r8, {r4, r9}
   1ca68:	add	lr, pc, lr
   1ca6c:	str	r0, [r5]
   1ca70:	str	r0, [sp, #20]
   1ca74:	ldr	r5, [lr, #4]
   1ca78:	ldr	r9, [pc, #1028]	; 1ce84 <next@@Base+0x30c4>
   1ca7c:	add	ip, pc, ip
   1ca80:	mov	r6, ip
   1ca84:	mov	r0, #0
   1ca88:	ldr	r9, [pc, r9]
   1ca8c:	ldr	r8, [sp, #24]
   1ca90:	b	1cb38 <next@@Base+0x2d78>
   1ca94:	ldr	r1, [sp, #16]
   1ca98:	mov	r0, #0
   1ca9c:	b	1cb04 <next@@Base+0x2d44>
   1caa0:	ldr	r1, [pc, #904]	; 1ce30 <next@@Base+0x3070>
   1caa4:	add	r1, pc, r1
   1caa8:	b	1cab4 <next@@Base+0x2cf4>
   1caac:	ldr	r1, [pc, #904]	; 1ce3c <next@@Base+0x307c>
   1cab0:	add	r1, pc, r1
   1cab4:	ldr	r0, [pc, #888]	; 1ce34 <next@@Base+0x3074>
   1cab8:	ldr	r0, [pc, r0]
   1cabc:	ldr	r0, [r0]
   1cac0:	ldr	r2, [pc, #880]	; 1ce38 <next@@Base+0x3078>
   1cac4:	ldr	r2, [pc, r2]
   1cac8:	sub	sp, fp, #28
   1cacc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cad0:	b	12710 <fprintf@plt>
   1cad4:	ldr	lr, [pc, #868]	; 1ce40 <next@@Base+0x3080>
   1cad8:	ldr	ip, [pc, #868]	; 1ce44 <next@@Base+0x3084>
   1cadc:	mov	r0, r1
   1cae0:	add	lr, pc, lr
   1cae4:	add	ip, pc, ip
   1cae8:	mov	r6, ip
   1caec:	mov	ip, r7
   1caf0:	mov	r9, r4
   1caf4:	ldr	r5, [sp, #8]
   1caf8:	ldr	r4, [sp, #4]
   1cafc:	ldr	r1, [sp, #16]
   1cb00:	mov	r7, #0
   1cb04:	str	r4, [lr]
   1cb08:	str	r1, [lr, #4]
   1cb0c:	ldr	r2, [sp, #20]
   1cb10:	mov	r1, #1
   1cb14:	lsl	r8, ip, #1
   1cb18:	strb	r7, [r2, r4]!
   1cb1c:	strb	r1, [r2, #3]
   1cb20:	mov	r1, #161	; 0xa1
   1cb24:	strb	r7, [r2, #1]
   1cb28:	strb	r1, [r2, #2]
   1cb2c:	str	r9, [lr]
   1cb30:	str	r5, [lr, #4]
   1cb34:	mov	r7, ip
   1cb38:	ldr	r3, [sp, #20]
   1cb3c:	lsr	r1, r8, #16
   1cb40:	mov	ip, r3
   1cb44:	strb	r8, [r3, r9]!
   1cb48:	lsr	r4, r8, #24
   1cb4c:	lsr	r2, r8, #8
   1cb50:	adds	r8, r9, #4
   1cb54:	strb	r1, [r3, #2]
   1cb58:	adc	r1, r5, #0
   1cb5c:	cmp	r7, #0
   1cb60:	strb	r4, [r3, #3]
   1cb64:	strb	r2, [r3, #1]
   1cb68:	str	r8, [lr]
   1cb6c:	str	r1, [lr, #4]
   1cb70:	str	r7, [sp, #24]
   1cb74:	beq	1ce10 <next@@Base+0x3050>
   1cb78:	ldr	r7, [pc, #776]	; 1ce88 <next@@Base+0x30c8>
   1cb7c:	mov	r4, lr
   1cb80:	mov	r2, r0
   1cb84:	add	r7, pc, r7
   1cb88:	str	r0, [sp, #12]
   1cb8c:	cmp	r0, #0
   1cb90:	mov	r0, r4
   1cb94:	str	r2, [sp, #16]
   1cb98:	beq	1cba4 <next@@Base+0x2de4>
   1cb9c:	ldrd	r2, [r2]
   1cba0:	b	1cbac <next@@Base+0x2dec>
   1cba4:	mov	r2, #0
   1cba8:	mov	r3, #0
   1cbac:	ldrd	r4, [sl]
   1cbb0:	adds	r4, r4, r2
   1cbb4:	adc	r5, r5, r3
   1cbb8:	strd	r4, [sl]
   1cbbc:	ldrb	r2, [r6]
   1cbc0:	str	sl, [sp, #20]
   1cbc4:	cmp	r2, #0
   1cbc8:	beq	1cc94 <next@@Base+0x2ed4>
   1cbcc:	ldr	r3, [r7, #4]
   1cbd0:	ldr	r6, [pc, #692]	; 1ce8c <next@@Base+0x30cc>
   1cbd4:	adds	r2, r8, #4
   1cbd8:	adc	r9, r1, #0
   1cbdc:	ldr	r6, [pc, r6]
   1cbe0:	subs	r2, r6, r2
   1cbe4:	sbcs	r2, r3, r9
   1cbe8:	bcs	1ccd0 <next@@Base+0x2f10>
   1cbec:	mov	r2, #3
   1cbf0:	orr	r2, r2, #131072	; 0x20000
   1cbf4:	adds	r0, r8, r2
   1cbf8:	adc	r1, r1, #0
   1cbfc:	mvn	r2, #0
   1cc00:	and	r8, r1, r2
   1cc04:	mov	r1, #16646144	; 0xfe0000
   1cc08:	orr	r1, r1, #-16777216	; 0xff000000
   1cc0c:	and	r6, r0, r1
   1cc10:	mov	r0, ip
   1cc14:	mov	r1, r6
   1cc18:	bl	12680 <realloc@plt>
   1cc1c:	ldr	ip, [pc, #620]	; 1ce90 <next@@Base+0x30d0>
   1cc20:	ldr	lr, [pc, #620]	; 1ce94 <next@@Base+0x30d4>
   1cc24:	stm	r7, {r6, r8}
   1cc28:	mov	r3, r0
   1cc2c:	ldr	r0, [pc, #612]	; 1ce98 <next@@Base+0x30d8>
   1cc30:	add	lr, pc, lr
   1cc34:	mov	r9, lr
   1cc38:	add	r0, pc, r0
   1cc3c:	add	ip, pc, ip
   1cc40:	str	r3, [r0]
   1cc44:	mov	lr, ip
   1cc48:	ldrb	ip, [ip]
   1cc4c:	ldr	r1, [r9, #4]
   1cc50:	ldr	r8, [pc, #580]	; 1ce9c <next@@Base+0x30dc>
   1cc54:	mov	r7, r3
   1cc58:	lsr	r2, r4, #24
   1cc5c:	ldr	r8, [pc, r8]
   1cc60:	lsr	r6, r4, #16
   1cc64:	strb	r4, [r7, r8]!
   1cc68:	strb	r2, [r7, #3]
   1cc6c:	lsr	r2, r4, #8
   1cc70:	strb	r2, [r7, #1]
   1cc74:	adds	r2, r8, #4
   1cc78:	mov	r4, r9
   1cc7c:	adc	r9, r1, #0
   1cc80:	cmp	ip, #1
   1cc84:	strb	r6, [r7, #2]
   1cc88:	stm	r4, {r2, r9}
   1cc8c:	beq	1cd04 <next@@Base+0x2f44>
   1cc90:	b	1cdb0 <next@@Base+0x2ff0>
   1cc94:	mov	r7, ip
   1cc98:	lsr	r2, r4, #24
   1cc9c:	strb	r4, [r7, r8]!
   1cca0:	lsr	r9, r4, #16
   1cca4:	strb	r2, [r7, #3]
   1cca8:	adds	r2, r8, #4
   1ccac:	mov	lr, r6
   1ccb0:	lsr	r6, r4, #8
   1ccb4:	strb	r9, [r7, #2]
   1ccb8:	adc	r9, r1, #0
   1ccbc:	mov	r4, r0
   1ccc0:	strb	r6, [r7, #1]
   1ccc4:	mov	r3, ip
   1ccc8:	stm	r4, {r2, r9}
   1cccc:	b	1cdb0 <next@@Base+0x2ff0>
   1ccd0:	mov	r6, ip
   1ccd4:	lsr	r2, r4, #24
   1ccd8:	strb	r4, [r6, r8]!
   1ccdc:	lsr	r9, r4, #16
   1cce0:	strb	r2, [r6, #3]
   1cce4:	adds	r2, r8, #4
   1cce8:	lsr	r7, r4, #8
   1ccec:	strb	r9, [r6, #2]
   1ccf0:	adc	r9, r1, #0
   1ccf4:	mov	r4, r0
   1ccf8:	strb	r7, [r6, #1]
   1ccfc:	mov	r3, ip
   1cd00:	stm	r4, {r2, r9}
   1cd04:	ldr	lr, [pc, #404]	; 1cea0 <next@@Base+0x30e0>
   1cd08:	mov	r0, r4
   1cd0c:	adds	r7, r8, #8
   1cd10:	add	lr, pc, lr
   1cd14:	adc	ip, r1, #0
   1cd18:	ldr	r4, [lr, #4]
   1cd1c:	ldr	r6, [pc, #384]	; 1cea4 <next@@Base+0x30e4>
   1cd20:	ldr	r6, [pc, r6]
   1cd24:	subs	r7, r6, r7
   1cd28:	sbcs	r7, r4, ip
   1cd2c:	bcs	1cda4 <next@@Base+0x2fe4>
   1cd30:	mov	r2, #3
   1cd34:	orr	r2, r2, #131072	; 0x20000
   1cd38:	adds	r0, r8, r2
   1cd3c:	adc	r1, r1, #0
   1cd40:	adds	r0, r0, #4
   1cd44:	adc	r1, r1, #0
   1cd48:	mvn	r2, #0
   1cd4c:	and	r7, r1, r2
   1cd50:	mov	r1, #16646144	; 0xfe0000
   1cd54:	orr	r1, r1, #-16777216	; 0xff000000
   1cd58:	and	r6, r0, r1
   1cd5c:	mov	r0, r3
   1cd60:	mov	r1, r6
   1cd64:	mov	r8, lr
   1cd68:	bl	12680 <realloc@plt>
   1cd6c:	ldr	lr, [pc, #312]	; 1ceac <next@@Base+0x30ec>
   1cd70:	strd	r6, [r8]
   1cd74:	mov	r3, r0
   1cd78:	add	lr, pc, lr
   1cd7c:	mov	r4, lr
   1cd80:	ldr	r9, [lr, #4]
   1cd84:	ldr	r0, [pc, #292]	; 1ceb0 <next@@Base+0x30f0>
   1cd88:	add	r0, pc, r0
   1cd8c:	str	r3, [r0]
   1cd90:	ldr	r2, [pc, #284]	; 1ceb4 <next@@Base+0x30f4>
   1cd94:	ldr	r2, [pc, r2]
   1cd98:	ldr	lr, [pc, #280]	; 1ceb8 <next@@Base+0x30f8>
   1cd9c:	add	lr, pc, lr
   1cda0:	b	1cdb0 <next@@Base+0x2ff0>
   1cda4:	ldr	lr, [pc, #252]	; 1cea8 <next@@Base+0x30e8>
   1cda8:	mov	r4, r0
   1cdac:	add	lr, pc, lr
   1cdb0:	mov	ip, r3
   1cdb4:	lsr	r1, r5, #16
   1cdb8:	strb	r5, [r3, r2]!
   1cdbc:	lsr	r0, r5, #24
   1cdc0:	lsr	r7, r5, #8
   1cdc4:	adds	r8, r2, #4
   1cdc8:	strb	r1, [r3, #2]
   1cdcc:	adc	r1, r9, #0
   1cdd0:	strb	r0, [r3, #3]
   1cdd4:	strb	r7, [r3, #1]
   1cdd8:	str	r8, [r4]
   1cddc:	str	r1, [r4, #4]
   1cde0:	ldr	r0, [sp, #24]
   1cde4:	mov	r6, lr
   1cde8:	subs	r0, r0, #1
   1cdec:	str	r0, [sp, #24]
   1cdf0:	ldr	sl, [sp, #20]
   1cdf4:	ldr	r2, [sp, #16]
   1cdf8:	ldr	r0, [sp, #12]
   1cdfc:	ldr	r7, [pc, #184]	; 1cebc <next@@Base+0x30fc>
   1ce00:	add	sl, sl, #8
   1ce04:	add	r2, r2, #8
   1ce08:	add	r7, pc, r7
   1ce0c:	bne	1cb8c <next@@Base+0x2dcc>
   1ce10:	sub	sp, fp, #28
   1ce14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce18:	b	12620 <free@plt>
   1ce1c:	andeq	r6, r1, r8, lsl #1
   1ce20:	andeq	r6, r1, r4, lsl #1
   1ce24:	andeq	r6, r1, r8, ror r0
   1ce28:	andeq	r6, r1, ip, asr r0
   1ce2c:	andeq	r5, r1, r0, asr pc
   1ce30:	andeq	r2, r0, ip, asr #20
   1ce34:	andeq	r4, r1, r0, asr r6
   1ce38:	andeq	r5, r1, r4, lsl sp
   1ce3c:	andeq	r2, r0, sl, lsl #21
   1ce40:	andeq	r5, r1, r0, lsl sp
   1ce44:	strdeq	r5, [r1], -r8
   1ce48:	andeq	r5, r1, r0, lsl #29
   1ce4c:	andeq	r5, r1, r8, asr lr
   1ce50:	andeq	r6, r1, ip, asr #32
   1ce54:	andeq	r6, r1, r8, lsr r0
   1ce58:	andeq	r5, r1, ip, lsr lr
   1ce5c:	andeq	r5, r1, r0, lsr #28
   1ce60:	strdeq	r5, [r1], -r4
   1ce64:	ldrdeq	r5, [r1], -r4
   1ce68:	andeq	r5, r1, r4, ror #31
   1ce6c:	ldrdeq	r5, [r1], -r4
   1ce70:			; <UNDEFINED> instruction: 0x00015fbc
   1ce74:	andeq	r5, r1, r0, ror #27
   1ce78:	muleq	r1, r0, sp
   1ce7c:	andeq	r5, r1, r0, ror #26
   1ce80:	andeq	r5, r1, r8, lsl #27
   1ce84:	andeq	r5, r1, r8, ror #26
   1ce88:	andeq	r5, r1, r4, ror #24
   1ce8c:	andeq	r5, r1, ip, lsl #24
   1ce90:	andeq	r5, r1, r0, lsr #23
   1ce94:	andeq	r5, r1, r0, asr #23
   1ce98:	andeq	r5, r1, ip, lsr #23
   1ce9c:	muleq	r1, r4, fp
   1cea0:	ldrdeq	r5, [r1], -r8
   1cea4:	andeq	r5, r1, r8, asr #21
   1cea8:	andeq	r5, r1, r0, lsr sl
   1ceac:	andeq	r5, r1, r8, ror sl
   1ceb0:	andeq	r5, r1, ip, asr sl
   1ceb4:	andeq	r5, r1, ip, asr sl
   1ceb8:	andeq	r5, r1, r0, asr #20
   1cebc:	andeq	r5, r1, r0, ror #19
   1cec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cec4:	add	fp, sp, #28
   1cec8:	sub	sp, sp, #4
   1cecc:	ldr	r0, [pc, #3180]	; 1db40 <next@@Base+0x3d80>
   1ced0:	ldr	r0, [pc, r0]
   1ced4:	cmp	r0, #0
   1ced8:	beq	1d534 <next@@Base+0x3774>
   1cedc:	ldr	sl, [pc, #3168]	; 1db44 <next@@Base+0x3d84>
   1cee0:	add	sl, pc, sl
   1cee4:	ldr	r6, [sl, #4]
   1cee8:	ldr	r5, [pc, #3160]	; 1db48 <next@@Base+0x3d88>
   1ceec:	ldr	r5, [pc, r5]
   1cef0:	ldr	r8, [pc, #3156]	; 1db4c <next@@Base+0x3d8c>
   1cef4:	add	r8, pc, r8
   1cef8:	ldrb	r0, [r8]
   1cefc:	cmp	r0, #0
   1cf00:	beq	1cfc4 <next@@Base+0x3204>
   1cf04:	ldr	r9, [pc, #3164]	; 1db68 <next@@Base+0x3da8>
   1cf08:	adds	r2, r5, #4
   1cf0c:	adc	ip, r6, #0
   1cf10:	add	r9, pc, r9
   1cf14:	ldr	r0, [r9, #4]
   1cf18:	ldr	r3, [pc, #3148]	; 1db6c <next@@Base+0x3dac>
   1cf1c:	ldr	r3, [pc, r3]
   1cf20:	subs	r3, r3, r2
   1cf24:	sbcs	r0, r0, ip
   1cf28:	bcs	1d018 <next@@Base+0x3258>
   1cf2c:	mov	r0, #7
   1cf30:	orr	r0, r0, #131072	; 0x20000
   1cf34:	adds	r0, r5, r0
   1cf38:	adc	r1, r6, #0
   1cf3c:	subs	r0, r0, #4
   1cf40:	sbc	r1, r1, #0
   1cf44:	mvn	r2, #0
   1cf48:	and	r5, r1, r2
   1cf4c:	mov	r1, #16646144	; 0xfe0000
   1cf50:	orr	r1, r1, #-16777216	; 0xff000000
   1cf54:	ldr	r4, [pc, #3096]	; 1db74 <next@@Base+0x3db4>
   1cf58:	and	r6, r0, r1
   1cf5c:	ldr	r0, [pc, #3092]	; 1db78 <next@@Base+0x3db8>
   1cf60:	mov	r1, r6
   1cf64:	add	r4, pc, r4
   1cf68:	ldr	r0, [pc, r0]
   1cf6c:	bl	12680 <realloc@plt>
   1cf70:	str	r6, [r9]
   1cf74:	str	r5, [r9, #4]
   1cf78:	str	r0, [r4]
   1cf7c:	ldrb	r3, [r8]
   1cf80:	ldr	r6, [sl, #4]
   1cf84:	ldr	r5, [pc, #3056]	; 1db7c <next@@Base+0x3dbc>
   1cf88:	mov	r2, r0
   1cf8c:	mov	r1, #0
   1cf90:	mov	r7, #161	; 0xa1
   1cf94:	ldr	r5, [pc, r5]
   1cf98:	strb	r1, [r2, r5]!
   1cf9c:	strb	r7, [r2, #3]
   1cfa0:	strb	r1, [r2, #2]
   1cfa4:	strb	r1, [r2, #1]
   1cfa8:	adds	r2, r5, #4
   1cfac:	adc	ip, r6, #0
   1cfb0:	mov	r7, #1
   1cfb4:	cmp	r3, #1
   1cfb8:	stm	sl, {r2, ip}
   1cfbc:	beq	1d040 <next@@Base+0x3280>
   1cfc0:	b	1d218 <next@@Base+0x3458>
   1cfc4:	ldr	r0, [pc, #2948]	; 1db50 <next@@Base+0x3d90>
   1cfc8:	ldr	r0, [pc, r0]
   1cfcc:	mov	r1, r0
   1cfd0:	ldrb	r2, [r1, r5]!
   1cfd4:	ldrb	r3, [r1, #1]
   1cfd8:	ldrb	r7, [r1, #2]
   1cfdc:	ldrb	r1, [r1, #3]
   1cfe0:	orr	r2, r2, r3, lsl #8
   1cfe4:	orr	r2, r2, r7, lsl #16
   1cfe8:	orr	r3, r2, r1, lsl #24
   1cfec:	adds	r2, r5, #4
   1cff0:	adc	ip, r6, #0
   1cff4:	cmp	r3, #-1593835520	; 0xa1000000
   1cff8:	stm	sl, {r2, ip}
   1cffc:	beq	1d1b8 <next@@Base+0x33f8>
   1d000:	mov	r7, #1
   1d004:	cmn	r3, #1
   1d008:	beq	1d1f8 <next@@Base+0x3438>
   1d00c:	ldr	r1, [pc, #2880]	; 1db54 <next@@Base+0x3d94>
   1d010:	add	r1, pc, r1
   1d014:	b	1d8f8 <next@@Base+0x3b38>
   1d018:	ldr	r0, [pc, #2896]	; 1db70 <next@@Base+0x3db0>
   1d01c:	mov	r3, #0
   1d020:	mov	r4, #161	; 0xa1
   1d024:	ldr	r0, [pc, r0]
   1d028:	mov	r7, r0
   1d02c:	strb	r3, [r7, r5]!
   1d030:	strb	r4, [r7, #3]
   1d034:	strb	r3, [r7, #2]
   1d038:	strb	r3, [r7, #1]
   1d03c:	stm	sl, {r2, ip}
   1d040:	ldr	r4, [r9, #4]
   1d044:	ldr	r1, [pc, #2868]	; 1db80 <next@@Base+0x3dc0>
   1d048:	adds	r3, r5, #8
   1d04c:	adc	r7, r6, #0
   1d050:	ldr	r1, [pc, r1]
   1d054:	subs	r1, r1, r3
   1d058:	sbcs	r1, r4, r7
   1d05c:	bcs	1d0e8 <next@@Base+0x3328>
   1d060:	mov	r1, #7
   1d064:	orr	r1, r1, #131072	; 0x20000
   1d068:	adds	r1, r5, r1
   1d06c:	adc	r2, r6, #0
   1d070:	mvn	r3, #0
   1d074:	and	r5, r2, r3
   1d078:	mov	r2, #16646144	; 0xfe0000
   1d07c:	orr	r2, r2, #-16777216	; 0xff000000
   1d080:	ldr	r4, [pc, #2812]	; 1db84 <next@@Base+0x3dc4>
   1d084:	and	r6, r1, r2
   1d088:	mov	r1, r6
   1d08c:	add	r4, pc, r4
   1d090:	bl	12680 <realloc@plt>
   1d094:	str	r6, [r9]
   1d098:	str	r5, [r9, #4]
   1d09c:	str	r0, [r4]
   1d0a0:	ldrb	r1, [r8]
   1d0a4:	ldr	ip, [sl, #4]
   1d0a8:	ldr	r2, [pc, #2776]	; 1db88 <next@@Base+0x3dc8>
   1d0ac:	mov	r7, r0
   1d0b0:	mov	r3, #9
   1d0b4:	ldr	r2, [pc, r2]
   1d0b8:	strb	r3, [r7, r2]!
   1d0bc:	mov	r3, #0
   1d0c0:	strb	r3, [r7, #3]
   1d0c4:	strb	r3, [r7, #2]
   1d0c8:	strb	r3, [r7, #1]
   1d0cc:	adds	r3, r2, #4
   1d0d0:	adc	r5, ip, #0
   1d0d4:	mov	r7, #1
   1d0d8:	cmp	r1, #1
   1d0dc:	stm	sl, {r3, r5}
   1d0e0:	beq	1d110 <next@@Base+0x3350>
   1d0e4:	b	1d240 <next@@Base+0x3480>
   1d0e8:	mov	r3, r0
   1d0ec:	mov	r1, #9
   1d0f0:	strb	r1, [r3, r2]!
   1d0f4:	mov	r1, #0
   1d0f8:	strb	r1, [r3, #3]
   1d0fc:	strb	r1, [r3, #2]
   1d100:	strb	r1, [r3, #1]
   1d104:	adds	r3, r2, #4
   1d108:	adc	r5, ip, #0
   1d10c:	stm	sl, {r3, r5}
   1d110:	ldr	r6, [r9, #4]
   1d114:	ldr	r4, [pc, #2672]	; 1db8c <next@@Base+0x3dcc>
   1d118:	adds	r1, r2, #8
   1d11c:	adc	r7, ip, #0
   1d120:	ldr	r4, [pc, r4]
   1d124:	subs	r1, r4, r1
   1d128:	sbcs	r1, r6, r7
   1d12c:	bcs	1d604 <next@@Base+0x3844>
   1d130:	mov	r1, #7
   1d134:	orr	r1, r1, #131072	; 0x20000
   1d138:	adds	r1, r2, r1
   1d13c:	adc	r2, ip, #0
   1d140:	mvn	r3, #0
   1d144:	and	r5, r2, r3
   1d148:	mov	r2, #16646144	; 0xfe0000
   1d14c:	orr	r2, r2, #-16777216	; 0xff000000
   1d150:	ldr	r4, [pc, #2616]	; 1db90 <next@@Base+0x3dd0>
   1d154:	and	r6, r1, r2
   1d158:	mov	r1, r6
   1d15c:	add	r4, pc, r4
   1d160:	bl	12680 <realloc@plt>
   1d164:	str	r6, [r9]
   1d168:	str	r5, [r9, #4]
   1d16c:	str	r0, [r4]
   1d170:	ldrb	r2, [r8]
   1d174:	ldr	r5, [sl, #4]
   1d178:	ldr	r3, [pc, #2580]	; 1db94 <next@@Base+0x3dd4>
   1d17c:	mov	r7, r0
   1d180:	mov	r1, #0
   1d184:	ldr	r3, [pc, r3]
   1d188:	adds	r6, r3, #4
   1d18c:	strb	r1, [r7, r3]!
   1d190:	strb	r1, [r7, #3]
   1d194:	strb	r1, [r7, #2]
   1d198:	strb	r1, [r7, #1]
   1d19c:	adc	r1, r5, #0
   1d1a0:	mov	r7, #1
   1d1a4:	cmp	r2, #1
   1d1a8:	str	r6, [sl]
   1d1ac:	str	r1, [sl, #4]
   1d1b0:	bne	1d268 <next@@Base+0x34a8>
   1d1b4:	b	1d62c <next@@Base+0x386c>
   1d1b8:	ldr	r3, [r0, r2]
   1d1bc:	adds	r4, r5, #8
   1d1c0:	adc	r7, r6, #0
   1d1c4:	cmp	r3, #9
   1d1c8:	stm	sl, {r4, r7}
   1d1cc:	bne	1d8f0 <next@@Base+0x3b30>
   1d1d0:	ldr	r3, [pc, #2444]	; 1db64 <next@@Base+0x3da4>
   1d1d4:	adds	r4, r5, #20
   1d1d8:	adc	r7, r6, #0
   1d1dc:	add	r3, pc, r3
   1d1e0:	add	r6, r0, r5
   1d1e4:	ldrb	r3, [r3]
   1d1e8:	ldr	r6, [r6, #16]
   1d1ec:	stm	sl, {r4, r7}
   1d1f0:	eor	r3, r3, #1
   1d1f4:	add	r7, r6, r3
   1d1f8:	mov	r6, r0
   1d1fc:	mov	r3, #0
   1d200:	strb	r3, [r6, r5]!
   1d204:	mov	r5, #161	; 0xa1
   1d208:	strb	r5, [r6, #3]
   1d20c:	strb	r3, [r6, #2]
   1d210:	strb	r3, [r6, #1]
   1d214:	stm	sl, {r2, ip}
   1d218:	mov	r3, r0
   1d21c:	mov	r1, #9
   1d220:	strb	r1, [r3, r2]!
   1d224:	mov	r1, #0
   1d228:	strb	r1, [r3, #3]
   1d22c:	strb	r1, [r3, #2]
   1d230:	strb	r1, [r3, #1]
   1d234:	adds	r3, r2, #4
   1d238:	adc	r5, ip, #0
   1d23c:	stm	sl, {r3, r5}
   1d240:	mov	r2, r0
   1d244:	mov	r1, #0
   1d248:	strb	r1, [r2, r3]!
   1d24c:	adds	r6, r3, #4
   1d250:	strb	r1, [r2, #3]
   1d254:	strb	r1, [r2, #2]
   1d258:	strb	r1, [r2, #1]
   1d25c:	adc	r1, r5, #0
   1d260:	str	r6, [sl]
   1d264:	str	r1, [sl, #4]
   1d268:	mov	r3, r0
   1d26c:	mov	r2, #0
   1d270:	strb	r2, [r3, r6]!
   1d274:	strb	r2, [r3, #3]
   1d278:	strb	r2, [r3, #2]
   1d27c:	strb	r2, [r3, #1]
   1d280:	adds	r2, r6, #4
   1d284:	adc	r3, r1, #0
   1d288:	strd	r2, [sl]
   1d28c:	lsr	r1, r7, #24
   1d290:	strb	r7, [r0, r2]!
   1d294:	lsr	r6, r7, #16
   1d298:	lsr	r5, r7, #8
   1d29c:	strb	r1, [r0, #3]
   1d2a0:	strb	r6, [r0, #2]
   1d2a4:	strb	r5, [r0, #1]
   1d2a8:	ldrb	r0, [r8]
   1d2ac:	adds	r4, r2, #4
   1d2b0:	adc	r5, r3, #0
   1d2b4:	cmp	r0, #0
   1d2b8:	strd	r4, [sl]
   1d2bc:	beq	1d370 <next@@Base+0x35b0>
   1d2c0:	ldr	r9, [pc, #2284]	; 1dbb4 <next@@Base+0x3df4>
   1d2c4:	adds	r0, r2, #8
   1d2c8:	adc	r1, r3, #0
   1d2cc:	add	r9, pc, r9
   1d2d0:	ldr	r7, [r9, #4]
   1d2d4:	ldr	r6, [pc, #2268]	; 1dbb8 <next@@Base+0x3df8>
   1d2d8:	ldr	r6, [pc, r6]
   1d2dc:	subs	r0, r6, r0
   1d2e0:	sbcs	r0, r7, r1
   1d2e4:	bcs	1d53c <next@@Base+0x377c>
   1d2e8:	mov	r0, #7
   1d2ec:	orr	r0, r0, #131072	; 0x20000
   1d2f0:	adds	r0, r2, r0
   1d2f4:	adc	r1, r3, #0
   1d2f8:	mvn	r2, #0
   1d2fc:	and	r5, r1, r2
   1d300:	mov	r1, #16646144	; 0xfe0000
   1d304:	orr	r1, r1, #-16777216	; 0xff000000
   1d308:	ldr	r4, [pc, #2268]	; 1dbec <next@@Base+0x3e2c>
   1d30c:	and	r6, r0, r1
   1d310:	ldr	r0, [pc, #2264]	; 1dbf0 <next@@Base+0x3e30>
   1d314:	mov	r1, r6
   1d318:	add	r4, pc, r4
   1d31c:	ldr	r0, [pc, r0]
   1d320:	bl	12680 <realloc@plt>
   1d324:	str	r6, [r9]
   1d328:	str	r5, [r9, #4]
   1d32c:	str	r0, [r4]
   1d330:	ldrb	r1, [r8]
   1d334:	ldr	r5, [sl, #4]
   1d338:	ldr	r4, [pc, #2228]	; 1dbf4 <next@@Base+0x3e34>
   1d33c:	mov	r3, r0
   1d340:	mov	r2, #0
   1d344:	ldr	r4, [pc, r4]
   1d348:	strb	r2, [r3, r4]!
   1d34c:	strb	r2, [r3, #3]
   1d350:	strb	r2, [r3, #2]
   1d354:	strb	r2, [r3, #1]
   1d358:	adds	r2, r4, #4
   1d35c:	adc	r3, r5, #0
   1d360:	cmp	r1, #0
   1d364:	strd	r2, [sl]
   1d368:	beq	1d39c <next@@Base+0x35dc>
   1d36c:	b	1d568 <next@@Base+0x37a8>
   1d370:	ldr	r0, [pc, #2104]	; 1dbb0 <next@@Base+0x3df0>
   1d374:	adds	r2, r2, #8
   1d378:	mov	r1, #0
   1d37c:	adc	r3, r3, #0
   1d380:	ldr	r0, [pc, r0]
   1d384:	mov	r7, r0
   1d388:	strb	r1, [r7, r4]!
   1d38c:	strb	r1, [r7, #3]
   1d390:	strb	r1, [r7, #2]
   1d394:	strb	r1, [r7, #1]
   1d398:	strd	r2, [sl]
   1d39c:	mov	r7, r0
   1d3a0:	mov	r1, #0
   1d3a4:	strb	r1, [r7, r2]!
   1d3a8:	strb	r1, [r7, #3]
   1d3ac:	strb	r1, [r7, #2]
   1d3b0:	strb	r1, [r7, #1]
   1d3b4:	adds	r1, r2, #4
   1d3b8:	adc	r5, r3, #0
   1d3bc:	stm	sl, {r1, r5}
   1d3c0:	mov	r3, r0
   1d3c4:	mov	r2, #0
   1d3c8:	strb	r2, [r3, r1]!
   1d3cc:	strb	r2, [r3, #3]
   1d3d0:	strb	r2, [r3, #2]
   1d3d4:	strb	r2, [r3, #1]
   1d3d8:	adds	r2, r1, #4
   1d3dc:	adc	r3, r5, #0
   1d3e0:	strd	r2, [sl]
   1d3e4:	mov	r7, r0
   1d3e8:	mov	r1, #0
   1d3ec:	strb	r1, [r7, r2]!
   1d3f0:	strb	r1, [r7, #3]
   1d3f4:	strb	r1, [r7, #2]
   1d3f8:	strb	r1, [r7, #1]
   1d3fc:	adds	r1, r2, #4
   1d400:	adc	r5, r3, #0
   1d404:	stm	sl, {r1, r5}
   1d408:	mov	r3, r0
   1d40c:	mov	r2, #0
   1d410:	strb	r2, [r3, r1]!
   1d414:	adds	r4, r1, #4
   1d418:	strb	r2, [r3, #3]
   1d41c:	strb	r2, [r3, #2]
   1d420:	strb	r2, [r3, #1]
   1d424:	adc	r3, r5, #0
   1d428:	str	r4, [sl]
   1d42c:	str	r3, [sl, #4]
   1d430:	mov	r2, r0
   1d434:	mov	r1, #0
   1d438:	strb	r1, [r2, r4]!
   1d43c:	strb	r1, [r2, #3]
   1d440:	strb	r1, [r2, #2]
   1d444:	strb	r1, [r2, #1]
   1d448:	adds	r2, r4, #4
   1d44c:	adc	r1, r3, #0
   1d450:	str	r2, [sl]
   1d454:	str	r1, [sl, #4]
   1d458:	mov	r3, r0
   1d45c:	mov	r4, #0
   1d460:	strb	r4, [r3, r2]!
   1d464:	mov	r7, #163	; 0xa3
   1d468:	strb	r7, [r3, #3]
   1d46c:	strb	r4, [r3, #2]
   1d470:	strb	r4, [r3, #1]
   1d474:	ldrb	r7, [r8]
   1d478:	adds	r6, r2, #4
   1d47c:	adc	r3, r1, #0
   1d480:	cmp	r7, #1
   1d484:	str	r6, [sl]
   1d488:	str	r3, [sl, #4]
   1d48c:	bne	1d500 <next@@Base+0x3740>
   1d490:	ldr	r8, [pc, #1852]	; 1dbd4 <next@@Base+0x3e14>
   1d494:	adds	lr, r2, #8
   1d498:	adc	ip, r1, #0
   1d49c:	add	r8, pc, r8
   1d4a0:	ldr	r5, [r8, #4]
   1d4a4:	ldr	r7, [pc, #1836]	; 1dbd8 <next@@Base+0x3e18>
   1d4a8:	ldr	r7, [pc, r7]
   1d4ac:	subs	r7, r7, lr
   1d4b0:	sbcs	r7, r5, ip
   1d4b4:	bcs	1d500 <next@@Base+0x3740>
   1d4b8:	mov	r3, #7
   1d4bc:	orr	r3, r3, #131072	; 0x20000
   1d4c0:	adds	r2, r2, r3
   1d4c4:	adc	r1, r1, #0
   1d4c8:	mvn	r3, #0
   1d4cc:	and	r7, r1, r3
   1d4d0:	mov	r1, #16646144	; 0xfe0000
   1d4d4:	orr	r1, r1, #-16777216	; 0xff000000
   1d4d8:	ldr	r5, [pc, #1788]	; 1dbdc <next@@Base+0x3e1c>
   1d4dc:	and	r6, r2, r1
   1d4e0:	mov	r1, r6
   1d4e4:	add	r5, pc, r5
   1d4e8:	bl	12680 <realloc@plt>
   1d4ec:	strd	r6, [r8]
   1d4f0:	str	r0, [r5]
   1d4f4:	ldr	r3, [sl, #4]
   1d4f8:	ldr	r6, [pc, #1760]	; 1dbe0 <next@@Base+0x3e20>
   1d4fc:	ldr	r6, [pc, r6]
   1d500:	ldr	r0, [pc, #1756]	; 1dbe4 <next@@Base+0x3e24>
   1d504:	ldr	r1, [pc, #1756]	; 1dbe8 <next@@Base+0x3e28>
   1d508:	adds	r2, r6, #4
   1d50c:	add	r0, pc, r0
   1d510:	adc	r3, r3, #0
   1d514:	ldr	r1, [pc, r1]
   1d518:	strb	r4, [r1, r6]!
   1d51c:	strb	r4, [r1, #3]
   1d520:	strb	r4, [r1, #2]
   1d524:	strb	r4, [r1, #1]
   1d528:	mov	r1, #1
   1d52c:	strd	r2, [sl]
   1d530:	strb	r1, [r0]
   1d534:	sub	sp, fp, #28
   1d538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d53c:	ldr	r0, [pc, #1656]	; 1dbbc <next@@Base+0x3dfc>
   1d540:	adds	r2, r2, #8
   1d544:	mov	r1, #0
   1d548:	adc	r3, r3, #0
   1d54c:	ldr	r0, [pc, r0]
   1d550:	mov	r7, r0
   1d554:	strb	r1, [r7, r4]!
   1d558:	strb	r1, [r7, #3]
   1d55c:	strb	r1, [r7, #2]
   1d560:	strb	r1, [r7, #1]
   1d564:	strd	r2, [sl]
   1d568:	ldr	r6, [r9, #4]
   1d56c:	ldr	r1, [pc, #1668]	; 1dbf8 <next@@Base+0x3e38>
   1d570:	adds	ip, r4, #8
   1d574:	adc	r7, r5, #0
   1d578:	ldr	r1, [pc, r1]
   1d57c:	subs	r1, r1, ip
   1d580:	sbcs	r1, r6, r7
   1d584:	bcs	1d6d0 <next@@Base+0x3910>
   1d588:	mov	r1, #7
   1d58c:	orr	r1, r1, #131072	; 0x20000
   1d590:	adds	r1, r4, r1
   1d594:	adc	r2, r5, #0
   1d598:	mvn	r3, #0
   1d59c:	and	r5, r2, r3
   1d5a0:	mov	r2, #16646144	; 0xfe0000
   1d5a4:	orr	r2, r2, #-16777216	; 0xff000000
   1d5a8:	ldr	r6, [pc, #1612]	; 1dbfc <next@@Base+0x3e3c>
   1d5ac:	and	r4, r1, r2
   1d5b0:	mov	r1, r4
   1d5b4:	add	r6, pc, r6
   1d5b8:	bl	12680 <realloc@plt>
   1d5bc:	str	r0, [r6]
   1d5c0:	strd	r4, [r9]
   1d5c4:	ldrb	r7, [r8]
   1d5c8:	ldr	r3, [sl, #4]
   1d5cc:	ldr	r2, [pc, #1580]	; 1dc00 <next@@Base+0x3e40>
   1d5d0:	mov	r6, r0
   1d5d4:	mov	r1, #0
   1d5d8:	ldr	r2, [pc, r2]
   1d5dc:	strb	r1, [r6, r2]!
   1d5e0:	strb	r1, [r6, #3]
   1d5e4:	strb	r1, [r6, #2]
   1d5e8:	strb	r1, [r6, #1]
   1d5ec:	adds	r1, r2, #4
   1d5f0:	adc	r5, r3, #0
   1d5f4:	cmp	r7, #1
   1d5f8:	stm	sl, {r1, r5}
   1d5fc:	bne	1d3c0 <next@@Base+0x3600>
   1d600:	b	1d6f4 <next@@Base+0x3934>
   1d604:	mov	r2, r0
   1d608:	mov	r1, #0
   1d60c:	strb	r1, [r2, r3]!
   1d610:	adds	r6, r3, #4
   1d614:	strb	r1, [r2, #3]
   1d618:	strb	r1, [r2, #2]
   1d61c:	strb	r1, [r2, #1]
   1d620:	adc	r1, r5, #0
   1d624:	str	r6, [sl]
   1d628:	str	r1, [sl, #4]
   1d62c:	ldr	r4, [r9, #4]
   1d630:	ldr	r2, [pc, #1376]	; 1db98 <next@@Base+0x3dd8>
   1d634:	adds	ip, r3, #8
   1d638:	adc	r7, r5, #0
   1d63c:	ldr	r2, [pc, r2]
   1d640:	subs	r2, r2, ip
   1d644:	sbcs	r2, r4, r7
   1d648:	bcs	1d794 <next@@Base+0x39d4>
   1d64c:	mov	r1, #7
   1d650:	orr	r1, r1, #131072	; 0x20000
   1d654:	adds	r1, r3, r1
   1d658:	adc	r2, r5, #0
   1d65c:	mvn	r3, #0
   1d660:	and	r5, r2, r3
   1d664:	mov	r2, #16646144	; 0xfe0000
   1d668:	orr	r2, r2, #-16777216	; 0xff000000
   1d66c:	ldr	r4, [pc, #1320]	; 1db9c <next@@Base+0x3ddc>
   1d670:	and	r6, r1, r2
   1d674:	mov	r1, r6
   1d678:	add	r4, pc, r4
   1d67c:	bl	12680 <realloc@plt>
   1d680:	str	r6, [r9]
   1d684:	str	r5, [r9, #4]
   1d688:	str	r0, [r4]
   1d68c:	ldrb	r5, [r8]
   1d690:	ldr	r1, [sl, #4]
   1d694:	ldr	r6, [pc, #1284]	; 1dba0 <next@@Base+0x3de0>
   1d698:	mov	r3, r0
   1d69c:	mov	r2, #0
   1d6a0:	mov	r7, #1
   1d6a4:	ldr	r6, [pc, r6]
   1d6a8:	strb	r2, [r3, r6]!
   1d6ac:	strb	r2, [r3, #3]
   1d6b0:	strb	r2, [r3, #2]
   1d6b4:	strb	r2, [r3, #1]
   1d6b8:	adds	r2, r6, #4
   1d6bc:	adc	r3, r1, #0
   1d6c0:	cmp	r5, #1
   1d6c4:	strd	r2, [sl]
   1d6c8:	bne	1d28c <next@@Base+0x34cc>
   1d6cc:	b	1d7b8 <next@@Base+0x39f8>
   1d6d0:	mov	r7, r0
   1d6d4:	mov	r1, #0
   1d6d8:	strb	r1, [r7, r2]!
   1d6dc:	strb	r1, [r7, #3]
   1d6e0:	strb	r1, [r7, #2]
   1d6e4:	strb	r1, [r7, #1]
   1d6e8:	adds	r1, r2, #4
   1d6ec:	adc	r5, r3, #0
   1d6f0:	stm	sl, {r1, r5}
   1d6f4:	ldr	r4, [r9, #4]
   1d6f8:	ldr	r6, [pc, #1284]	; 1dc04 <next@@Base+0x3e44>
   1d6fc:	adds	r7, r2, #8
   1d700:	adc	ip, r3, #0
   1d704:	ldr	r6, [pc, r6]
   1d708:	subs	r7, r6, r7
   1d70c:	sbcs	r7, r4, ip
   1d710:	bcs	1d82c <next@@Base+0x3a6c>
   1d714:	mov	r1, #7
   1d718:	orr	r1, r1, #131072	; 0x20000
   1d71c:	adds	r1, r2, r1
   1d720:	adc	r2, r3, #0
   1d724:	mvn	r3, #0
   1d728:	and	r5, r2, r3
   1d72c:	mov	r2, #16646144	; 0xfe0000
   1d730:	orr	r2, r2, #-16777216	; 0xff000000
   1d734:	ldr	r4, [pc, #1228]	; 1dc08 <next@@Base+0x3e48>
   1d738:	and	r6, r1, r2
   1d73c:	mov	r1, r6
   1d740:	add	r4, pc, r4
   1d744:	bl	12680 <realloc@plt>
   1d748:	str	r6, [r9]
   1d74c:	str	r5, [r9, #4]
   1d750:	str	r0, [r4]
   1d754:	ldrb	r7, [r8]
   1d758:	ldr	r5, [sl, #4]
   1d75c:	ldr	r1, [pc, #1192]	; 1dc0c <next@@Base+0x3e4c>
   1d760:	mov	r3, r0
   1d764:	mov	r2, #0
   1d768:	ldr	r1, [pc, r1]
   1d76c:	strb	r2, [r3, r1]!
   1d770:	strb	r2, [r3, #3]
   1d774:	strb	r2, [r3, #2]
   1d778:	strb	r2, [r3, #1]
   1d77c:	adds	r2, r1, #4
   1d780:	adc	r3, r5, #0
   1d784:	cmp	r7, #1
   1d788:	strd	r2, [sl]
   1d78c:	bne	1d3e4 <next@@Base+0x3624>
   1d790:	b	1d850 <next@@Base+0x3a90>
   1d794:	mov	r3, r0
   1d798:	mov	r2, #0
   1d79c:	strb	r2, [r3, r6]!
   1d7a0:	strb	r2, [r3, #3]
   1d7a4:	strb	r2, [r3, #2]
   1d7a8:	strb	r2, [r3, #1]
   1d7ac:	adds	r2, r6, #4
   1d7b0:	adc	r3, r1, #0
   1d7b4:	strd	r2, [sl]
   1d7b8:	ldr	r4, [r9, #4]
   1d7bc:	ldr	r5, [pc, #992]	; 1dba4 <next@@Base+0x3de4>
   1d7c0:	adds	lr, r6, #8
   1d7c4:	adc	ip, r1, #0
   1d7c8:	mov	r7, #1
   1d7cc:	ldr	r5, [pc, r5]
   1d7d0:	subs	r5, r5, lr
   1d7d4:	sbcs	r5, r4, ip
   1d7d8:	bcs	1d28c <next@@Base+0x34cc>
   1d7dc:	mov	r2, #7
   1d7e0:	orr	r2, r2, #131072	; 0x20000
   1d7e4:	adds	r2, r6, r2
   1d7e8:	adc	r1, r1, #0
   1d7ec:	mvn	r3, #0
   1d7f0:	and	r5, r1, r3
   1d7f4:	mov	r1, #16646144	; 0xfe0000
   1d7f8:	orr	r1, r1, #-16777216	; 0xff000000
   1d7fc:	ldr	r4, [pc, #932]	; 1dba8 <next@@Base+0x3de8>
   1d800:	and	r6, r2, r1
   1d804:	mov	r1, r6
   1d808:	add	r4, pc, r4
   1d80c:	bl	12680 <realloc@plt>
   1d810:	str	r6, [r9]
   1d814:	str	r5, [r9, #4]
   1d818:	str	r0, [r4]
   1d81c:	ldr	r3, [sl, #4]
   1d820:	ldr	r2, [pc, #900]	; 1dbac <next@@Base+0x3dec>
   1d824:	ldr	r2, [pc, r2]
   1d828:	b	1d28c <next@@Base+0x34cc>
   1d82c:	mov	r3, r0
   1d830:	mov	r2, #0
   1d834:	strb	r2, [r3, r1]!
   1d838:	strb	r2, [r3, #3]
   1d83c:	strb	r2, [r3, #2]
   1d840:	strb	r2, [r3, #1]
   1d844:	adds	r2, r1, #4
   1d848:	adc	r3, r5, #0
   1d84c:	strd	r2, [sl]
   1d850:	ldr	r4, [r9, #4]
   1d854:	ldr	r6, [pc, #948]	; 1dc10 <next@@Base+0x3e50>
   1d858:	adds	r7, r1, #8
   1d85c:	adc	ip, r5, #0
   1d860:	ldr	r6, [pc, r6]
   1d864:	subs	r7, r6, r7
   1d868:	sbcs	r7, r4, ip
   1d86c:	bcs	1d918 <next@@Base+0x3b58>
   1d870:	mov	r2, #7
   1d874:	orr	r2, r2, #131072	; 0x20000
   1d878:	adds	r1, r1, r2
   1d87c:	adc	r2, r5, #0
   1d880:	mvn	r3, #0
   1d884:	and	r5, r2, r3
   1d888:	mov	r2, #16646144	; 0xfe0000
   1d88c:	orr	r2, r2, #-16777216	; 0xff000000
   1d890:	ldr	r4, [pc, #892]	; 1dc14 <next@@Base+0x3e54>
   1d894:	and	r6, r1, r2
   1d898:	mov	r1, r6
   1d89c:	add	r4, pc, r4
   1d8a0:	bl	12680 <realloc@plt>
   1d8a4:	str	r6, [r9]
   1d8a8:	str	r5, [r9, #4]
   1d8ac:	str	r0, [r4]
   1d8b0:	ldrb	r7, [r8]
   1d8b4:	ldr	r3, [sl, #4]
   1d8b8:	ldr	r2, [pc, #856]	; 1dc18 <next@@Base+0x3e58>
   1d8bc:	mov	r6, r0
   1d8c0:	mov	r1, #0
   1d8c4:	ldr	r2, [pc, r2]
   1d8c8:	strb	r1, [r6, r2]!
   1d8cc:	strb	r1, [r6, #3]
   1d8d0:	strb	r1, [r6, #2]
   1d8d4:	strb	r1, [r6, #1]
   1d8d8:	adds	r1, r2, #4
   1d8dc:	adc	r5, r3, #0
   1d8e0:	cmp	r7, #1
   1d8e4:	stm	sl, {r1, r5}
   1d8e8:	bne	1d408 <next@@Base+0x3648>
   1d8ec:	b	1d93c <next@@Base+0x3b7c>
   1d8f0:	ldr	r1, [pc, #616]	; 1db60 <next@@Base+0x3da0>
   1d8f4:	add	r1, pc, r1
   1d8f8:	ldr	r0, [pc, #600]	; 1db58 <next@@Base+0x3d98>
   1d8fc:	ldr	r0, [pc, r0]
   1d900:	ldr	r0, [r0]
   1d904:	ldr	r2, [pc, #592]	; 1db5c <next@@Base+0x3d9c>
   1d908:	ldr	r2, [pc, r2]
   1d90c:	sub	sp, fp, #28
   1d910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d914:	b	12710 <fprintf@plt>
   1d918:	mov	r7, r0
   1d91c:	mov	r1, #0
   1d920:	strb	r1, [r7, r2]!
   1d924:	strb	r1, [r7, #3]
   1d928:	strb	r1, [r7, #2]
   1d92c:	strb	r1, [r7, #1]
   1d930:	adds	r1, r2, #4
   1d934:	adc	r5, r3, #0
   1d938:	stm	sl, {r1, r5}
   1d93c:	ldr	r4, [r9, #4]
   1d940:	ldr	r6, [pc, #724]	; 1dc1c <next@@Base+0x3e5c>
   1d944:	adds	r7, r2, #8
   1d948:	adc	ip, r3, #0
   1d94c:	ldr	r6, [pc, r6]
   1d950:	subs	r7, r6, r7
   1d954:	sbcs	r7, r4, ip
   1d958:	bcs	1d9e0 <next@@Base+0x3c20>
   1d95c:	mov	r1, #7
   1d960:	orr	r1, r1, #131072	; 0x20000
   1d964:	adds	r1, r2, r1
   1d968:	adc	r2, r3, #0
   1d96c:	mvn	r3, #0
   1d970:	and	r5, r2, r3
   1d974:	mov	r2, #16646144	; 0xfe0000
   1d978:	orr	r2, r2, #-16777216	; 0xff000000
   1d97c:	ldr	r4, [pc, #668]	; 1dc20 <next@@Base+0x3e60>
   1d980:	and	r6, r1, r2
   1d984:	mov	r1, r6
   1d988:	add	r4, pc, r4
   1d98c:	bl	12680 <realloc@plt>
   1d990:	str	r6, [r9]
   1d994:	str	r5, [r9, #4]
   1d998:	str	r0, [r4]
   1d99c:	ldrb	r2, [r8]
   1d9a0:	ldr	r5, [sl, #4]
   1d9a4:	ldr	r1, [pc, #632]	; 1dc24 <next@@Base+0x3e64>
   1d9a8:	mov	r7, r0
   1d9ac:	mov	r3, #0
   1d9b0:	ldr	r1, [pc, r1]
   1d9b4:	adds	r4, r1, #4
   1d9b8:	strb	r3, [r7, r1]!
   1d9bc:	strb	r3, [r7, #3]
   1d9c0:	strb	r3, [r7, #2]
   1d9c4:	strb	r3, [r7, #1]
   1d9c8:	adc	r3, r5, #0
   1d9cc:	cmp	r2, #1
   1d9d0:	str	r4, [sl]
   1d9d4:	str	r3, [sl, #4]
   1d9d8:	bne	1d430 <next@@Base+0x3670>
   1d9dc:	b	1da08 <next@@Base+0x3c48>
   1d9e0:	mov	r3, r0
   1d9e4:	mov	r2, #0
   1d9e8:	strb	r2, [r3, r1]!
   1d9ec:	adds	r4, r1, #4
   1d9f0:	strb	r2, [r3, #3]
   1d9f4:	strb	r2, [r3, #2]
   1d9f8:	strb	r2, [r3, #1]
   1d9fc:	adc	r3, r5, #0
   1da00:	str	r4, [sl]
   1da04:	str	r3, [sl, #4]
   1da08:	ldr	r6, [r9, #4]
   1da0c:	ldr	r2, [pc, #532]	; 1dc28 <next@@Base+0x3e68>
   1da10:	adds	ip, r1, #8
   1da14:	adc	r7, r5, #0
   1da18:	ldr	r2, [pc, r2]
   1da1c:	subs	r2, r2, ip
   1da20:	sbcs	r2, r6, r7
   1da24:	bcs	1daac <next@@Base+0x3cec>
   1da28:	mov	r2, #7
   1da2c:	orr	r2, r2, #131072	; 0x20000
   1da30:	adds	r1, r1, r2
   1da34:	adc	r2, r5, #0
   1da38:	mvn	r3, #0
   1da3c:	and	r5, r2, r3
   1da40:	mov	r2, #16646144	; 0xfe0000
   1da44:	orr	r2, r2, #-16777216	; 0xff000000
   1da48:	ldr	r4, [pc, #368]	; 1dbc0 <next@@Base+0x3e00>
   1da4c:	and	r6, r1, r2
   1da50:	mov	r1, r6
   1da54:	add	r4, pc, r4
   1da58:	bl	12680 <realloc@plt>
   1da5c:	str	r6, [r9]
   1da60:	str	r5, [r9, #4]
   1da64:	str	r0, [r4]
   1da68:	ldrb	r7, [r8]
   1da6c:	ldr	r3, [sl, #4]
   1da70:	ldr	r4, [pc, #332]	; 1dbc4 <next@@Base+0x3e04>
   1da74:	mov	r2, r0
   1da78:	mov	r1, #0
   1da7c:	ldr	r4, [pc, r4]
   1da80:	strb	r1, [r2, r4]!
   1da84:	strb	r1, [r2, #3]
   1da88:	strb	r1, [r2, #2]
   1da8c:	strb	r1, [r2, #1]
   1da90:	adds	r2, r4, #4
   1da94:	adc	r1, r3, #0
   1da98:	cmp	r7, #0
   1da9c:	str	r2, [sl]
   1daa0:	str	r1, [sl, #4]
   1daa4:	beq	1d458 <next@@Base+0x3698>
   1daa8:	b	1dad4 <next@@Base+0x3d14>
   1daac:	mov	r2, r0
   1dab0:	mov	r1, #0
   1dab4:	strb	r1, [r2, r4]!
   1dab8:	strb	r1, [r2, #3]
   1dabc:	strb	r1, [r2, #2]
   1dac0:	strb	r1, [r2, #1]
   1dac4:	adds	r2, r4, #4
   1dac8:	adc	r1, r3, #0
   1dacc:	str	r2, [sl]
   1dad0:	str	r1, [sl, #4]
   1dad4:	ldr	r5, [r9, #4]
   1dad8:	ldr	r6, [pc, #232]	; 1dbc8 <next@@Base+0x3e08>
   1dadc:	adds	r7, r4, #8
   1dae0:	adc	ip, r3, #0
   1dae4:	ldr	r6, [pc, r6]
   1dae8:	subs	r7, r6, r7
   1daec:	sbcs	r7, r5, ip
   1daf0:	bcs	1d458 <next@@Base+0x3698>
   1daf4:	mov	r1, #7
   1daf8:	orr	r1, r1, #131072	; 0x20000
   1dafc:	adds	r1, r4, r1
   1db00:	adc	r2, r3, #0
   1db04:	mvn	r3, #0
   1db08:	and	r7, r2, r3
   1db0c:	mov	r2, #16646144	; 0xfe0000
   1db10:	orr	r2, r2, #-16777216	; 0xff000000
   1db14:	ldr	r5, [pc, #176]	; 1dbcc <next@@Base+0x3e0c>
   1db18:	and	r6, r1, r2
   1db1c:	mov	r1, r6
   1db20:	add	r5, pc, r5
   1db24:	bl	12680 <realloc@plt>
   1db28:	strd	r6, [r9]
   1db2c:	str	r0, [r5]
   1db30:	ldr	r1, [sl, #4]
   1db34:	ldr	r2, [pc, #148]	; 1dbd0 <next@@Base+0x3e10>
   1db38:	ldr	r2, [pc, r2]
   1db3c:	b	1d458 <next@@Base+0x3698>
   1db40:	andeq	r5, r1, r0, lsl r9
   1db44:	andeq	r5, r1, r0, lsl r9
   1db48:	andeq	r5, r1, r4, lsl #18
   1db4c:	andeq	r5, r1, r8, ror #17
   1db50:	andeq	r5, r1, ip, lsl r8
   1db54:	andeq	r2, r0, lr, ror r5
   1db58:	andeq	r3, r1, ip, lsl #16
   1db5c:	ldrdeq	r4, [r1], -r0
   1db60:	andeq	r1, r0, r7, ror #25
   1db64:	andeq	r5, r1, ip, lsl r6
   1db68:	ldrdeq	r5, [r1], -r8
   1db6c:	andeq	r5, r1, ip, asr #17
   1db70:	andeq	r5, r1, r0, asr #15
   1db74:	andeq	r5, r1, r0, lsl #17
   1db78:	andeq	r5, r1, ip, ror r8
   1db7c:	andeq	r5, r1, ip, asr r8
   1db80:	muleq	r1, r8, r7
   1db84:	andeq	r5, r1, r8, asr r7
   1db88:	andeq	r5, r1, ip, lsr r7
   1db8c:	andeq	r5, r1, r8, asr #13
   1db90:	andeq	r5, r1, r8, lsl #13
   1db94:	andeq	r5, r1, ip, ror #12
   1db98:	andeq	r5, r1, ip, lsr #3
   1db9c:	andeq	r5, r1, ip, ror #2
   1dba0:	andeq	r5, r1, ip, asr #2
   1dba4:	andeq	r5, r1, ip, lsl r0
   1dba8:	ldrdeq	r4, [r1], -ip
   1dbac:	andeq	r4, r1, ip, asr #31
   1dbb0:	andeq	r5, r1, r4, ror #8
   1dbb4:	andeq	r5, r1, ip, lsl r5
   1dbb8:	andeq	r5, r1, r0, lsl r5
   1dbbc:	muleq	r1, r8, r2
   1dbc0:	muleq	r1, r0, sp
   1dbc4:	andeq	r4, r1, r4, ror sp
   1dbc8:	andeq	r4, r1, r4, lsl #26
   1dbcc:	andeq	r4, r1, r4, asr #25
   1dbd0:			; <UNDEFINED> instruction: 0x00014cb8
   1dbd4:	andeq	r5, r1, ip, asr #6
   1dbd8:	andeq	r5, r1, r0, asr #6
   1dbdc:	andeq	r5, r1, r0, lsl #6
   1dbe0:	strdeq	r5, [r1], -r4
   1dbe4:	andeq	r5, r1, ip, ror #5
   1dbe8:	ldrdeq	r5, [r1], -r0
   1dbec:	andeq	r5, r1, ip, asr #9
   1dbf0:	andeq	r5, r1, r8, asr #9
   1dbf4:	andeq	r5, r1, ip, lsr #9
   1dbf8:	andeq	r5, r1, r0, ror r2
   1dbfc:	andeq	r5, r1, r0, lsr r2
   1dc00:	andeq	r5, r1, r8, lsl r2
   1dc04:	andeq	r5, r1, r4, ror #1
   1dc08:	andeq	r5, r1, r4, lsr #1
   1dc0c:	andeq	r5, r1, r8, lsl #1
   1dc10:	andeq	r4, r1, r8, lsl #31
   1dc14:	andeq	r4, r1, r8, asr #30
   1dc18:	andeq	r4, r1, ip, lsr #30
   1dc1c:	muleq	r1, ip, lr
   1dc20:	andeq	r4, r1, ip, asr lr
   1dc24:	andeq	r4, r1, r0, asr #28
   1dc28:	ldrdeq	r4, [r1], -r0
   1dc2c:	ldr	r0, [pc, #508]	; 1de30 <next@@Base+0x4070>
   1dc30:	ldr	r0, [pc, r0]
   1dc34:	cmp	r0, #0
   1dc38:	beq	1dde8 <next@@Base+0x4028>
   1dc3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dc40:	add	fp, sp, #24
   1dc44:	ldr	r9, [pc, #488]	; 1de34 <next@@Base+0x4074>
   1dc48:	mov	r4, #0
   1dc4c:	mov	r1, #0
   1dc50:	add	r9, pc, r9
   1dc54:	ldrb	r0, [r9]
   1dc58:	cmp	r0, #1
   1dc5c:	bne	1dce0 <next@@Base+0x3f20>
   1dc60:	ldr	r0, [pc, #464]	; 1de38 <next@@Base+0x4078>
   1dc64:	ldr	r8, [pc, #464]	; 1de3c <next@@Base+0x407c>
   1dc68:	mov	r1, #1
   1dc6c:	add	r0, pc, r0
   1dc70:	add	r8, pc, r8
   1dc74:	ldr	r0, [r0, #4]
   1dc78:	ldr	r2, [pc, #448]	; 1de40 <next@@Base+0x4080>
   1dc7c:	ldr	r2, [pc, r2]
   1dc80:	ldr	r7, [r8, #4]
   1dc84:	ldr	r5, [pc, #440]	; 1de44 <next@@Base+0x4084>
   1dc88:	adds	r3, r2, #8
   1dc8c:	adc	r6, r0, #0
   1dc90:	ldr	r5, [pc, r5]
   1dc94:	subs	r3, r5, r3
   1dc98:	sbcs	r3, r7, r6
   1dc9c:	bcs	1dce0 <next@@Base+0x3f20>
   1dca0:	mov	r1, #7
   1dca4:	orr	r1, r1, #131072	; 0x20000
   1dca8:	adds	r1, r2, r1
   1dcac:	adc	r7, r0, #0
   1dcb0:	mov	r0, #16646144	; 0xfe0000
   1dcb4:	orr	r0, r0, #-16777216	; 0xff000000
   1dcb8:	ldr	r5, [pc, #392]	; 1de48 <next@@Base+0x4088>
   1dcbc:	and	r6, r1, r0
   1dcc0:	ldr	r0, [pc, #388]	; 1de4c <next@@Base+0x408c>
   1dcc4:	mov	r1, r6
   1dcc8:	add	r5, pc, r5
   1dccc:	ldr	r0, [pc, r0]
   1dcd0:	bl	12680 <realloc@plt>
   1dcd4:	ldrb	r1, [r9]
   1dcd8:	strd	r6, [r8]
   1dcdc:	str	r0, [r5]
   1dce0:	ldr	r3, [pc, #360]	; 1de50 <next@@Base+0x4090>
   1dce4:	ldr	r2, [pc, #360]	; 1de54 <next@@Base+0x4094>
   1dce8:	add	r3, pc, r3
   1dcec:	ldr	r2, [pc, r2]
   1dcf0:	ldr	r0, [pc, #352]	; 1de58 <next@@Base+0x4098>
   1dcf4:	ldr	r0, [pc, r0]
   1dcf8:	ldr	r7, [r3, #4]
   1dcfc:	mov	r6, r0
   1dd00:	strb	r4, [r6, r2]!
   1dd04:	adds	r2, r2, #8
   1dd08:	adc	r5, r7, #0
   1dd0c:	strb	r4, [r6, #5]
   1dd10:	strb	r4, [r6, #3]
   1dd14:	strb	r4, [r6, #2]
   1dd18:	strb	r4, [r6, #1]
   1dd1c:	strb	r4, [r6, #4]!
   1dd20:	cmp	r1, #0
   1dd24:	strb	r4, [r6, #3]
   1dd28:	strb	r4, [r6, #2]
   1dd2c:	stm	r3, {r2, r5}
   1dd30:	beq	1dd58 <next@@Base+0x3f98>
   1dd34:	ldr	r3, [pc, #288]	; 1de5c <next@@Base+0x409c>
   1dd38:	mov	r1, r2
   1dd3c:	mov	r2, #1
   1dd40:	ldr	r3, [pc, r3]
   1dd44:	bl	1268c <fwrite@plt>
   1dd48:	ldr	r0, [pc, #272]	; 1de60 <next@@Base+0x40a0>
   1dd4c:	ldr	r0, [pc, r0]
   1dd50:	bl	12620 <free@plt>
   1dd54:	b	1dda4 <next@@Base+0x3fe4>
   1dd58:	ldr	r1, [pc, #260]	; 1de64 <next@@Base+0x40a4>
   1dd5c:	mov	r2, #4
   1dd60:	ldr	r1, [pc, r1]
   1dd64:	bl	12794 <msync@plt>
   1dd68:	cmn	r0, #1
   1dd6c:	beq	1ddf4 <next@@Base+0x4034>
   1dd70:	ldr	r1, [pc, #252]	; 1de74 <next@@Base+0x40b4>
   1dd74:	ldr	r1, [pc, r1]
   1dd78:	ldr	r0, [pc, #248]	; 1de78 <next@@Base+0x40b8>
   1dd7c:	ldr	r0, [pc, r0]
   1dd80:	bl	12770 <munmap@plt>
   1dd84:	ldr	r0, [pc, #240]	; 1de7c <next@@Base+0x40bc>
   1dd88:	ldr	r1, [pc, #240]	; 1de80 <next@@Base+0x40c0>
   1dd8c:	mov	r2, #0
   1dd90:	add	r0, pc, r0
   1dd94:	add	r1, pc, r1
   1dd98:	str	r2, [r0]
   1dd9c:	str	r2, [r0, #4]
   1dda0:	str	r2, [r1]
   1dda4:	ldr	r0, [pc, #216]	; 1de84 <next@@Base+0x40c4>
   1dda8:	ldr	r0, [pc, r0]
   1ddac:	bl	12608 <fflush@plt>
   1ddb0:	ldr	r0, [pc, #208]	; 1de88 <next@@Base+0x40c8>
   1ddb4:	ldr	r0, [pc, r0]
   1ddb8:	bl	1e334 <__gcov_flush@@Base+0x30c>
   1ddbc:	ldr	r0, [pc, #200]	; 1de8c <next@@Base+0x40cc>
   1ddc0:	ldr	r0, [pc, r0]
   1ddc4:	bl	12764 <fclose@plt>
   1ddc8:	ldr	r0, [pc, #192]	; 1de90 <next@@Base+0x40d0>
   1ddcc:	ldr	r1, [pc, #192]	; 1de94 <next@@Base+0x40d4>
   1ddd0:	mov	r2, #0
   1ddd4:	add	r0, pc, r0
   1ddd8:	add	r1, pc, r1
   1dddc:	str	r2, [r0]
   1dde0:	str	r2, [r1]
   1dde4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dde8:	ldr	r0, [pc, #168]	; 1de98 <next@@Base+0x40d8>
   1ddec:	ldr	r0, [pc, r0]
   1ddf0:	b	12620 <free@plt>
   1ddf4:	bl	1271c <__errno_location@plt>
   1ddf8:	ldr	r1, [pc, #104]	; 1de68 <next@@Base+0x40a8>
   1ddfc:	ldr	r1, [pc, r1]
   1de00:	ldr	r0, [r0]
   1de04:	ldr	r4, [r1]
   1de08:	ldr	r5, [pc, #92]	; 1de6c <next@@Base+0x40ac>
   1de0c:	ldr	r5, [pc, r5]
   1de10:	bl	126c8 <strerror@plt>
   1de14:	ldr	r1, [pc, #84]	; 1de70 <next@@Base+0x40b0>
   1de18:	mov	r3, r0
   1de1c:	mov	r0, r4
   1de20:	add	r1, pc, r1
   1de24:	mov	r2, r5
   1de28:	bl	12710 <fprintf@plt>
   1de2c:	b	1dd70 <next@@Base+0x3fb0>
   1de30:			; <UNDEFINED> instruction: 0x00014bb0
   1de34:	andeq	r4, r1, ip, lsl #23
   1de38:	andeq	r4, r1, r4, lsl #23
   1de3c:	andeq	r4, r1, r8, ror fp
   1de40:	andeq	r4, r1, r4, ror fp
   1de44:	andeq	r4, r1, r8, asr fp
   1de48:	andeq	r4, r1, ip, lsl fp
   1de4c:	andeq	r4, r1, r8, lsl fp
   1de50:	andeq	r4, r1, r8, lsl #22
   1de54:	andeq	r4, r1, r4, lsl #22
   1de58:	strdeq	r4, [r1], -r0
   1de5c:	andeq	r4, r1, r0, lsr #21
   1de60:	muleq	r1, r8, sl
   1de64:	andeq	r4, r1, r8, lsr #21
   1de68:	andeq	r3, r1, ip, lsl #6
   1de6c:	andeq	r4, r1, ip, asr #19
   1de70:	andeq	r1, r0, r9, lsr #16
   1de74:	muleq	r1, r4, sl
   1de78:	andeq	r4, r1, r8, ror #20
   1de7c:	andeq	r4, r1, r8, ror sl
   1de80:	andeq	r4, r1, r0, asr sl
   1de84:	andeq	r4, r1, r8, lsr sl
   1de88:	andeq	r3, r1, ip, ror #7
   1de8c:	andeq	r4, r1, r0, lsr #20
   1de90:	andeq	r4, r1, ip, lsl #20
   1de94:	andeq	r4, r1, ip, lsl #20
   1de98:	andeq	r4, r1, ip, ror #19
   1de9c:	push	{r4, sl, fp, lr}
   1dea0:	add	fp, sp, #8
   1dea4:	mov	r4, r0
   1dea8:	mov	r0, #12
   1deac:	bl	126b0 <malloc@plt>
   1deb0:	ldr	r1, [pc, #60]	; 1def4 <next@@Base+0x4134>
   1deb4:	mov	r2, #0
   1deb8:	add	r1, pc, r1
   1debc:	stm	r0, {r1, r4}
   1dec0:	str	r2, [r0, #8]
   1dec4:	ldr	r1, [pc, #44]	; 1def8 <next@@Base+0x4138>
   1dec8:	ldr	r1, [pc, r1]
   1decc:	mov	r2, r1
   1ded0:	ldr	r3, [r2], #4
   1ded4:	ldr	r4, [r2]
   1ded8:	cmp	r3, #0
   1dedc:	mov	r3, r2
   1dee0:	addne	r3, r4, #8
   1dee4:	moveq	r2, r1
   1dee8:	str	r0, [r3]
   1deec:	str	r0, [r2]
   1def0:	pop	{r4, sl, fp, pc}
   1def4:	andeq	r4, r1, r4, asr #18
   1def8:	andeq	r3, r1, r8, lsl r2
   1defc:	push	{r4, r5, fp, lr}
   1df00:	add	fp, sp, #8
   1df04:	ldr	r0, [pc, #56]	; 1df44 <next@@Base+0x4184>
   1df08:	ldr	r0, [pc, r0]
   1df0c:	ldr	r4, [r0]
   1df10:	cmp	r4, #0
   1df14:	beq	1df40 <next@@Base+0x4180>
   1df18:	ldr	r5, [pc, #40]	; 1df48 <next@@Base+0x4188>
   1df1c:	add	r5, pc, r5
   1df20:	ldr	r0, [r4]
   1df24:	cmp	r0, r5
   1df28:	bne	1df34 <next@@Base+0x4174>
   1df2c:	ldr	r0, [r4, #4]
   1df30:	blx	r0
   1df34:	ldr	r4, [r4, #8]
   1df38:	cmp	r4, #0
   1df3c:	bne	1df20 <next@@Base+0x4160>
   1df40:	pop	{r4, r5, fp, pc}
   1df44:	ldrdeq	r3, [r1], -r8
   1df48:	andeq	r4, r1, r0, ror #17
   1df4c:	push	{r4, r5, r6, r7, fp, lr}
   1df50:	add	fp, sp, #16
   1df54:	ldr	r4, [pc, #100]	; 1dfc0 <next@@Base+0x4200>
   1df58:	ldr	r4, [pc, r4]
   1df5c:	ldr	r0, [r4]
   1df60:	cmp	r0, #0
   1df64:	beq	1dfbc <next@@Base+0x41fc>
   1df68:	ldr	r5, [pc, #84]	; 1dfc4 <next@@Base+0x4204>
   1df6c:	mov	r6, #0
   1df70:	add	r5, pc, r5
   1df74:	ldr	r1, [r0]
   1df78:	ldr	r7, [r0, #8]
   1df7c:	cmp	r1, r5
   1df80:	beq	1df8c <next@@Base+0x41cc>
   1df84:	mov	r6, r0
   1df88:	b	1dfb0 <next@@Base+0x41f0>
   1df8c:	ldr	r1, [r4]
   1df90:	cmp	r0, r1
   1df94:	streq	r7, [r4]
   1df98:	ldr	r1, [r4, #4]
   1df9c:	cmp	r0, r1
   1dfa0:	streq	r6, [r4, #4]
   1dfa4:	cmp	r6, #0
   1dfa8:	strne	r7, [r6, #8]
   1dfac:	bl	12620 <free@plt>
   1dfb0:	mov	r0, r7
   1dfb4:	cmp	r7, #0
   1dfb8:	bne	1df74 <next@@Base+0x41b4>
   1dfbc:	pop	{r4, r5, r6, r7, fp, pc}
   1dfc0:	andeq	r3, r1, r8, lsl #3
   1dfc4:	andeq	r4, r1, ip, lsl #17
   1dfc8:	push	{r4, sl, fp, lr}
   1dfcc:	add	fp, sp, #8
   1dfd0:	mov	r4, r0
   1dfd4:	mov	r0, #12
   1dfd8:	bl	126b0 <malloc@plt>
   1dfdc:	ldr	r1, [pc, #60]	; 1e020 <next@@Base+0x4260>
   1dfe0:	mov	r2, #0
   1dfe4:	add	r1, pc, r1
   1dfe8:	stm	r0, {r1, r4}
   1dfec:	str	r2, [r0, #8]
   1dff0:	ldr	r1, [pc, #44]	; 1e024 <next@@Base+0x4264>
   1dff4:	ldr	r1, [pc, r1]
   1dff8:	mov	r2, r1
   1dffc:	ldr	r3, [r2], #4
   1e000:	ldr	r4, [r2]
   1e004:	cmp	r3, #0
   1e008:	mov	r3, r2
   1e00c:	addne	r3, r4, #8
   1e010:	moveq	r2, r1
   1e014:	str	r0, [r3]
   1e018:	str	r0, [r2]
   1e01c:	pop	{r4, sl, fp, pc}
   1e020:	andeq	r4, r1, r8, lsl r8
   1e024:	andeq	r3, r1, r4, ror #1

0001e028 <__gcov_flush@@Base>:
   1e028:	push	{r4, sl, fp, lr}
   1e02c:	add	fp, sp, #8
   1e030:	ldr	r0, [pc, #36]	; 1e05c <__gcov_flush@@Base+0x34>
   1e034:	ldr	r0, [pc, r0]
   1e038:	ldr	r4, [r0]
   1e03c:	cmp	r4, #0
   1e040:	beq	1e058 <__gcov_flush@@Base+0x30>
   1e044:	ldr	r0, [r4, #4]
   1e048:	blx	r0
   1e04c:	ldr	r4, [r4, #8]
   1e050:	cmp	r4, #0
   1e054:	bne	1e044 <__gcov_flush@@Base+0x1c>
   1e058:	pop	{r4, sl, fp, pc}
   1e05c:	andeq	r3, r1, r4, lsr #1
   1e060:	push	{r4, r5, r6, r7, fp, lr}
   1e064:	add	fp, sp, #16
   1e068:	ldr	r4, [pc, #100]	; 1e0d4 <__gcov_flush@@Base+0xac>
   1e06c:	ldr	r4, [pc, r4]
   1e070:	ldr	r0, [r4]
   1e074:	cmp	r0, #0
   1e078:	beq	1e0d0 <__gcov_flush@@Base+0xa8>
   1e07c:	ldr	r5, [pc, #84]	; 1e0d8 <__gcov_flush@@Base+0xb0>
   1e080:	mov	r6, #0
   1e084:	add	r5, pc, r5
   1e088:	ldr	r1, [r0]
   1e08c:	ldr	r7, [r0, #8]
   1e090:	cmp	r1, r5
   1e094:	beq	1e0a0 <__gcov_flush@@Base+0x78>
   1e098:	mov	r6, r0
   1e09c:	b	1e0c4 <__gcov_flush@@Base+0x9c>
   1e0a0:	ldr	r1, [r4]
   1e0a4:	cmp	r0, r1
   1e0a8:	streq	r7, [r4]
   1e0ac:	ldr	r1, [r4, #4]
   1e0b0:	cmp	r0, r1
   1e0b4:	streq	r6, [r4, #4]
   1e0b8:	cmp	r6, #0
   1e0bc:	strne	r7, [r6, #8]
   1e0c0:	bl	12620 <free@plt>
   1e0c4:	mov	r0, r7
   1e0c8:	cmp	r7, #0
   1e0cc:	bne	1e088 <__gcov_flush@@Base+0x60>
   1e0d0:	pop	{r4, r5, r6, r7, fp, pc}
   1e0d4:	andeq	r3, r1, ip, rrx
   1e0d8:	andeq	r4, r1, r8, ror r7
   1e0dc:	push	{r4, r5, fp, lr}
   1e0e0:	add	fp, sp, #8
   1e0e4:	mov	r4, r1
   1e0e8:	cmp	r0, #0
   1e0ec:	beq	1e13c <__gcov_flush@@Base+0x114>
   1e0f0:	mov	r5, r0
   1e0f4:	mov	r0, #12
   1e0f8:	bl	126b0 <malloc@plt>
   1e0fc:	ldr	r1, [pc, #204]	; 1e1d0 <__gcov_flush@@Base+0x1a8>
   1e100:	mov	r2, #0
   1e104:	add	r1, pc, r1
   1e108:	stm	r0, {r1, r5}
   1e10c:	str	r2, [r0, #8]
   1e110:	ldr	r1, [pc, #188]	; 1e1d4 <__gcov_flush@@Base+0x1ac>
   1e114:	ldr	r1, [pc, r1]
   1e118:	mov	r2, r1
   1e11c:	ldr	r3, [r2], #4
   1e120:	ldr	r5, [r2]
   1e124:	cmp	r3, #0
   1e128:	mov	r3, r2
   1e12c:	addne	r3, r5, #8
   1e130:	moveq	r2, r1
   1e134:	str	r0, [r3]
   1e138:	str	r0, [r2]
   1e13c:	cmp	r4, #0
   1e140:	beq	1e18c <__gcov_flush@@Base+0x164>
   1e144:	mov	r0, #12
   1e148:	bl	126b0 <malloc@plt>
   1e14c:	ldr	r1, [pc, #132]	; 1e1d8 <__gcov_flush@@Base+0x1b0>
   1e150:	mov	r2, #0
   1e154:	add	r1, pc, r1
   1e158:	stm	r0, {r1, r4}
   1e15c:	str	r2, [r0, #8]
   1e160:	ldr	r1, [pc, #116]	; 1e1dc <__gcov_flush@@Base+0x1b4>
   1e164:	ldr	r1, [pc, r1]
   1e168:	mov	r2, r1
   1e16c:	ldr	r3, [r2], #4
   1e170:	ldr	r5, [r2]
   1e174:	cmp	r3, #0
   1e178:	mov	r3, r2
   1e17c:	addne	r3, r5, #8
   1e180:	moveq	r2, r1
   1e184:	str	r0, [r3]
   1e188:	str	r0, [r2]
   1e18c:	ldr	r1, [pc, #76]	; 1e1e0 <__gcov_flush@@Base+0x1b8>
   1e190:	add	r1, pc, r1
   1e194:	ldrb	r0, [r1]
   1e198:	cmp	r0, #0
   1e19c:	popne	{r4, r5, fp, pc}
   1e1a0:	ldr	r0, [pc, #60]	; 1e1e4 <__gcov_flush@@Base+0x1bc>
   1e1a4:	mov	r2, #1
   1e1a8:	strb	r2, [r1]
   1e1ac:	add	r0, pc, r0
   1e1b0:	bl	1e690 <__libc_csu_fini@@Base+0x4>
   1e1b4:	ldr	r0, [pc, #44]	; 1e1e8 <__gcov_flush@@Base+0x1c0>
   1e1b8:	add	r0, pc, r0
   1e1bc:	bl	1e690 <__libc_csu_fini@@Base+0x4>
   1e1c0:	ldr	r0, [pc, #36]	; 1e1ec <__gcov_flush@@Base+0x1c4>
   1e1c4:	add	r0, pc, r0
   1e1c8:	pop	{r4, r5, fp, lr}
   1e1cc:	b	1e690 <__libc_csu_fini@@Base+0x4>
   1e1d0:	strdeq	r4, [r1], -r8
   1e1d4:	andeq	r2, r1, ip, asr #31
   1e1d8:	andeq	r4, r1, r8, lsr #13
   1e1dc:	andeq	r2, r1, r4, ror pc
   1e1e0:	andeq	r4, r1, r0, ror r6
   1e1e4:			; <UNDEFINED> instruction: 0xfffffeac
   1e1e8:			; <UNDEFINED> instruction: 0xfffffd8c
   1e1ec:			; <UNDEFINED> instruction: 0xfffffd30
   1e1f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e1f4:	add	fp, sp, #24
   1e1f8:	ldr	r7, [pc, #76]	; 1e24c <__gcov_flush@@Base+0x224>
   1e1fc:	mov	r4, r0
   1e200:	mov	r5, #1
   1e204:	mov	r8, #0
   1e208:	ldr	r7, [pc, r7]
   1e20c:	mov	r6, #47	; 0x2f
   1e210:	b	1e218 <__gcov_flush@@Base+0x1f0>
   1e214:	add	r5, r5, #1
   1e218:	ldrb	r0, [r4, r5]
   1e21c:	cmp	r0, #47	; 0x2f
   1e220:	beq	1e230 <__gcov_flush@@Base+0x208>
   1e224:	cmp	r0, #0
   1e228:	bne	1e214 <__gcov_flush@@Base+0x1ec>
   1e22c:	b	1e248 <__gcov_flush@@Base+0x220>
   1e230:	strb	r8, [r4, r5]
   1e234:	ldr	r1, [r7]
   1e238:	mov	r0, r4
   1e23c:	bl	12734 <mkdir@plt>
   1e240:	strb	r6, [r4, r5]
   1e244:	b	1e214 <__gcov_flush@@Base+0x1ec>
   1e248:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e24c:	andeq	r2, r1, ip, lsr #29
   1e250:	ldr	r0, [pc, #8]	; 1e260 <__gcov_flush@@Base+0x238>
   1e254:	ldr	r0, [pc, r0]
   1e258:	ldr	r0, [r0]
   1e25c:	bx	lr
   1e260:	andeq	r2, r1, r0, ror #28
   1e264:	ldr	r1, [pc, #8]	; 1e274 <__gcov_flush@@Base+0x24c>
   1e268:	ldr	r1, [pc, r1]
   1e26c:	str	r0, [r1]
   1e270:	bx	lr
   1e274:	andeq	r2, r1, ip, asr #28
   1e278:	push	{r4, r5, r6, sl, fp, lr}
   1e27c:	add	fp, sp, #16
   1e280:	sub	sp, sp, #392	; 0x188
   1e284:	mov	r6, sp
   1e288:	mov	r5, r0
   1e28c:	mov	r0, r6
   1e290:	mov	r4, r1
   1e294:	bl	1265c <uname@plt>
   1e298:	cmp	r0, #0
   1e29c:	blt	1e2b4 <__gcov_flush@@Base+0x28c>
   1e2a0:	add	r1, r6, #65	; 0x41
   1e2a4:	mov	r0, r5
   1e2a8:	mov	r2, r4
   1e2ac:	bl	1274c <strncpy@plt>
   1e2b0:	mov	r0, #0
   1e2b4:	sub	sp, fp, #16
   1e2b8:	pop	{r4, r5, r6, sl, fp, pc}
   1e2bc:	push	{r4, r5, r6, sl, fp, lr}
   1e2c0:	add	fp, sp, #16
   1e2c4:	sub	sp, sp, #32
   1e2c8:	mov	r4, #0
   1e2cc:	mov	r5, r0
   1e2d0:	str	r4, [sp, #20]
   1e2d4:	str	r4, [sp, #16]
   1e2d8:	str	r4, [sp, #12]
   1e2dc:	str	r4, [sp, #8]
   1e2e0:	strh	r4, [sp, #2]
   1e2e4:	bl	126e0 <getpid@plt>
   1e2e8:	mov	r6, sp
   1e2ec:	str	r0, [sp, #24]
   1e2f0:	mov	r0, #1
   1e2f4:	strh	r0, [sp]
   1e2f8:	mov	r0, r5
   1e2fc:	mov	r1, #14
   1e300:	mov	r2, r6
   1e304:	bl	1277c <fcntl64@plt>
   1e308:	cmn	r0, #1
   1e30c:	bne	1e328 <__gcov_flush@@Base+0x300>
   1e310:	bl	1271c <__errno_location@plt>
   1e314:	ldr	r0, [r0]
   1e318:	cmp	r0, #4
   1e31c:	beq	1e2f8 <__gcov_flush@@Base+0x2d0>
   1e320:	cmp	r0, #37	; 0x25
   1e324:	mvneq	r4, #0
   1e328:	mov	r0, r4
   1e32c:	sub	sp, fp, #16
   1e330:	pop	{r4, r5, r6, sl, fp, pc}
   1e334:	push	{r4, r5, r6, sl, fp, lr}
   1e338:	add	fp, sp, #16
   1e33c:	sub	sp, sp, #32
   1e340:	mov	r4, #0
   1e344:	mov	r5, r0
   1e348:	str	r4, [sp, #20]
   1e34c:	str	r4, [sp, #16]
   1e350:	str	r4, [sp, #12]
   1e354:	str	r4, [sp, #8]
   1e358:	strh	r4, [sp, #2]
   1e35c:	bl	126e0 <getpid@plt>
   1e360:	mov	r6, sp
   1e364:	str	r0, [sp, #24]
   1e368:	mov	r0, #2
   1e36c:	strh	r0, [sp]
   1e370:	mov	r0, r5
   1e374:	mov	r1, #14
   1e378:	mov	r2, r6
   1e37c:	bl	1277c <fcntl64@plt>
   1e380:	cmn	r0, #1
   1e384:	bne	1e3a0 <__gcov_flush@@Base+0x378>
   1e388:	bl	1271c <__errno_location@plt>
   1e38c:	ldr	r0, [r0]
   1e390:	cmp	r0, #4
   1e394:	beq	1e370 <__gcov_flush@@Base+0x348>
   1e398:	cmp	r0, #37	; 0x25
   1e39c:	mvneq	r4, #0
   1e3a0:	mov	r0, r4
   1e3a4:	sub	sp, fp, #16
   1e3a8:	pop	{r4, r5, r6, sl, fp, pc}
   1e3ac:	push	{r4, r5, fp, lr}
   1e3b0:	add	fp, sp, #8
   1e3b4:	sub	sp, sp, #32
   1e3b8:	mov	r2, #182	; 0xb6
   1e3bc:	orr	r2, r2, #256	; 0x100
   1e3c0:	mov	r1, #66	; 0x42
   1e3c4:	bl	12698 <open64@plt>
   1e3c8:	cmp	r0, #0
   1e3cc:	blt	1e448 <__gcov_flush@@Base+0x420>
   1e3d0:	mov	r4, r0
   1e3d4:	mov	r0, #0
   1e3d8:	str	r0, [sp, #20]
   1e3dc:	str	r0, [sp, #16]
   1e3e0:	str	r0, [sp, #12]
   1e3e4:	str	r0, [sp, #8]
   1e3e8:	strh	r0, [sp, #2]
   1e3ec:	bl	126e0 <getpid@plt>
   1e3f0:	mov	r5, sp
   1e3f4:	str	r0, [sp, #24]
   1e3f8:	mov	r0, #1
   1e3fc:	strh	r0, [sp]
   1e400:	mov	r0, r4
   1e404:	mov	r1, #14
   1e408:	mov	r2, r5
   1e40c:	bl	1277c <fcntl64@plt>
   1e410:	cmn	r0, #1
   1e414:	bne	1e430 <__gcov_flush@@Base+0x408>
   1e418:	bl	1271c <__errno_location@plt>
   1e41c:	ldr	r0, [r0]
   1e420:	cmp	r0, #4
   1e424:	beq	1e400 <__gcov_flush@@Base+0x3d8>
   1e428:	cmp	r0, #37	; 0x25
   1e42c:	beq	1e454 <__gcov_flush@@Base+0x42c>
   1e430:	ldr	r1, [pc, #76]	; 1e484 <__gcov_flush@@Base+0x45c>
   1e434:	mov	r0, r4
   1e438:	add	r1, pc, r1
   1e43c:	bl	125e4 <fdopen@plt>
   1e440:	sub	sp, fp, #8
   1e444:	pop	{r4, r5, fp, pc}
   1e448:	mov	r0, #0
   1e44c:	sub	sp, fp, #8
   1e450:	pop	{r4, r5, fp, pc}
   1e454:	ldr	r1, [pc, #28]	; 1e478 <__gcov_flush@@Base+0x450>
   1e458:	ldr	r2, [pc, #28]	; 1e47c <__gcov_flush@@Base+0x454>
   1e45c:	ldr	r0, [pc, #28]	; 1e480 <__gcov_flush@@Base+0x458>
   1e460:	add	r1, pc, r1
   1e464:	add	r2, pc, r2
   1e468:	ldr	r0, [pc, r0]
   1e46c:	ldr	r0, [r0]
   1e470:	bl	12710 <fprintf@plt>
   1e474:	b	1e430 <__gcov_flush@@Base+0x408>
   1e478:	andeq	r1, r0, sl, lsl #4
   1e47c:	andeq	r1, r0, pc, asr #4
   1e480:	andeq	r2, r1, r0, lsr #25
   1e484:	muleq	r0, r0, r0
   1e488:	push	{r4, r5, r6, sl, fp, lr}
   1e48c:	add	fp, sp, #16
   1e490:	mov	r6, r0
   1e494:	ldr	r0, [pc, #120]	; 1e514 <__gcov_flush@@Base+0x4ec>
   1e498:	mov	r4, r1
   1e49c:	add	r0, pc, r0
   1e4a0:	bl	126a4 <getenv@plt>
   1e4a4:	mov	r5, r0
   1e4a8:	ldr	r0, [pc, #104]	; 1e518 <__gcov_flush@@Base+0x4f0>
   1e4ac:	add	r0, pc, r0
   1e4b0:	bl	126a4 <getenv@plt>
   1e4b4:	mov	r1, #0
   1e4b8:	str	r1, [r4]
   1e4bc:	str	r1, [r6]
   1e4c0:	cmp	r5, #0
   1e4c4:	ldrbne	r2, [r5]
   1e4c8:	cmpne	r2, #0
   1e4cc:	bne	1e4d8 <__gcov_flush@@Base+0x4b0>
   1e4d0:	mov	r0, r1
   1e4d4:	pop	{r4, r5, r6, sl, fp, pc}
   1e4d8:	cmp	r0, #0
   1e4dc:	beq	1e4f4 <__gcov_flush@@Base+0x4cc>
   1e4e0:	mov	r1, #0
   1e4e4:	mov	r2, #10
   1e4e8:	bl	125f0 <strtol@plt>
   1e4ec:	bic	r0, r0, r0, asr #31
   1e4f0:	b	1e4f8 <__gcov_flush@@Base+0x4d0>
   1e4f4:	mov	r0, #0
   1e4f8:	str	r0, [r6]
   1e4fc:	mov	r0, r5
   1e500:	bl	126f8 <strlen@plt>
   1e504:	mov	r1, r5
   1e508:	str	r0, [r4]
   1e50c:	mov	r0, r1
   1e510:	pop	{r4, r5, r6, sl, fp, pc}
   1e514:	andeq	r1, r0, r5, asr #4
   1e518:	andeq	r1, r0, r1, asr #4
   1e51c:	push	{r4, r5, r6, r7, fp, lr}
   1e520:	add	fp, sp, #16
   1e524:	mov	r6, r0
   1e528:	ldr	r0, [fp, #8]
   1e52c:	mov	r5, r3
   1e530:	mov	r7, r2
   1e534:	mov	r4, r1
   1e538:	cmp	r0, #1
   1e53c:	blt	1e574 <__gcov_flush@@Base+0x54c>
   1e540:	add	r1, r4, #1
   1e544:	mov	r2, #0
   1e548:	ldrb	r3, [r1]
   1e54c:	cmp	r3, #47	; 0x2f
   1e550:	beq	1e560 <__gcov_flush@@Base+0x538>
   1e554:	cmp	r3, #0
   1e558:	bne	1e568 <__gcov_flush@@Base+0x540>
   1e55c:	b	1e574 <__gcov_flush@@Base+0x54c>
   1e560:	add	r2, r2, #1
   1e564:	mov	r4, r1
   1e568:	add	r1, r1, #1
   1e56c:	cmp	r2, r0
   1e570:	blt	1e548 <__gcov_flush@@Base+0x520>
   1e574:	mov	r0, r6
   1e578:	mov	r1, r7
   1e57c:	mov	r2, r5
   1e580:	bl	12638 <memcpy@plt>
   1e584:	add	r0, r7, r5
   1e588:	ldrb	r0, [r0, #-1]
   1e58c:	cmp	r0, #47	; 0x2f
   1e590:	movne	r0, #47	; 0x2f
   1e594:	strbne	r0, [r6, r5]
   1e598:	mov	r0, r4
   1e59c:	addne	r5, r5, #1
   1e5a0:	add	r5, r6, r5
   1e5a4:	bl	126f8 <strlen@plt>
   1e5a8:	add	r2, r0, #1
   1e5ac:	mov	r0, r5
   1e5b0:	mov	r1, r4
   1e5b4:	pop	{r4, r5, r6, r7, fp, lr}
   1e5b8:	b	12638 <memcpy@plt>
   1e5bc:	mov	r1, #47	; 0x2f
   1e5c0:	b	12704 <strchr@plt>
   1e5c4:	mov	r1, #47	; 0x2f
   1e5c8:	b	12788 <strrchr@plt>
   1e5cc:	push	{fp, lr}
   1e5d0:	mov	fp, sp
   1e5d4:	sub	sp, sp, #8
   1e5d8:	mov	r0, #0
   1e5dc:	str	r0, [sp, #4]
   1e5e0:	add	r1, sp, #4
   1e5e4:	mov	r0, #2
   1e5e8:	bl	12758 <prctl@plt>
   1e5ec:	ldr	r1, [sp, #4]
   1e5f0:	cmp	r0, #0
   1e5f4:	cmpeq	r1, #9
   1e5f8:	bne	1e60c <__gcov_flush@@Base+0x5e4>
   1e5fc:	mov	r0, #1
   1e600:	mov	r1, #0
   1e604:	bl	12758 <prctl@plt>
   1e608:	ldr	r1, [sp, #4]
   1e60c:	sub	r0, r1, #9
   1e610:	clz	r0, r0
   1e614:	lsr	r0, r0, #5
   1e618:	mov	sp, fp
   1e61c:	pop	{fp, pc}
   1e620:	mov	r0, #1
   1e624:	mov	r1, #9
   1e628:	b	12758 <prctl@plt>

0001e62c <__libc_csu_init@@Base>:
   1e62c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e630:	mov	r7, r0
   1e634:	ldr	r6, [pc, #72]	; 1e684 <__libc_csu_init@@Base+0x58>
   1e638:	ldr	r5, [pc, #72]	; 1e688 <__libc_csu_init@@Base+0x5c>
   1e63c:	add	r6, pc, r6
   1e640:	add	r5, pc, r5
   1e644:	sub	r6, r6, r5
   1e648:	mov	r8, r1
   1e64c:	mov	r9, r2
   1e650:	bl	125c4 <fdopen@plt-0x20>
   1e654:	asrs	r6, r6, #2
   1e658:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e65c:	mov	r4, #0
   1e660:	add	r4, r4, #1
   1e664:	ldr	r3, [r5], #4
   1e668:	mov	r2, r9
   1e66c:	mov	r1, r8
   1e670:	mov	r0, r7
   1e674:	blx	r3
   1e678:	cmp	r6, r4
   1e67c:	bne	1e660 <__libc_csu_init@@Base+0x34>
   1e680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e684:	andeq	r1, r1, r8, asr sp
   1e688:	andeq	r1, r1, r0, asr #26

0001e68c <__libc_csu_fini@@Base>:
   1e68c:	bx	lr
   1e690:	ldr	r3, [pc, #12]	; 1e6a4 <__libc_csu_fini@@Base+0x18>
   1e694:	mov	r1, #0
   1e698:	add	r3, pc, r3
   1e69c:	ldr	r2, [r3]
   1e6a0:	b	12728 <__cxa_atexit@plt>
   1e6a4:	strdeq	r2, [r1], -r8

Disassembly of section .fini:

0001e6a8 <.fini>:
   1e6a8:	push	{r3, lr}
   1e6ac:	pop	{r3, pc}
