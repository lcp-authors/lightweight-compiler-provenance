
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	10dfc <_start@@Base+0x3c>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <strcmp@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <strcmp@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r8, r1, r0, asr r3

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <printf@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <fopen@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <free@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <memcpy@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <ftell@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <rewind@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <fwrite@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <fread@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <puts@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <malloc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <__libc_start_main@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <__gmon_start__@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <exit@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fprintf@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <posix_memalign@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <strncpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <fclose@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <fputc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <fseek@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <abort@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__assert_fail@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

Disassembly of section .text:

00010dc0 <_start@@Base>:
   10dc0:	mov	fp, #0
   10dc4:	mov	lr, #0
   10dc8:	pop	{r1}		; (ldr r1, [sp], #4)
   10dcc:	mov	r2, sp
   10dd0:	push	{r2}		; (str r2, [sp, #-4]!)
   10dd4:	push	{r0}		; (str r0, [sp, #-4]!)
   10dd8:	ldr	ip, [pc, #16]	; 10df0 <_start@@Base+0x30>
   10ddc:	push	{ip}		; (str ip, [sp, #-4]!)
   10de0:	ldr	r0, [pc, #12]	; 10df4 <_start@@Base+0x34>
   10de4:	ldr	r3, [pc, #12]	; 10df8 <_start@@Base+0x38>
   10de8:	bl	10d38 <__libc_start_main@plt>
   10dec:	bl	10da4 <abort@plt>
   10df0:	strdeq	r7, [r1], -r8
   10df4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   10df8:	muleq	r1, r8, r8
   10dfc:	ldr	r3, [pc, #20]	; 10e18 <_start@@Base+0x58>
   10e00:	ldr	r2, [pc, #20]	; 10e1c <_start@@Base+0x5c>
   10e04:	add	r3, pc, r3
   10e08:	ldr	r2, [r3, r2]
   10e0c:	cmp	r2, #0
   10e10:	bxeq	lr
   10e14:	b	10d44 <__gmon_start__@plt>
   10e18:	strdeq	r8, [r1], -r4
   10e1c:	andeq	r0, r0, r8, rrx
   10e20:	ldr	r0, [pc, #24]	; 10e40 <_start@@Base+0x80>
   10e24:	ldr	r3, [pc, #24]	; 10e44 <_start@@Base+0x84>
   10e28:	cmp	r3, r0
   10e2c:	bxeq	lr
   10e30:	ldr	r3, [pc, #16]	; 10e48 <_start@@Base+0x88>
   10e34:	cmp	r3, #0
   10e38:	bxeq	lr
   10e3c:	bx	r3
   10e40:	andeq	r9, r2, r4, lsl #1
   10e44:	andeq	r9, r2, r4, lsl #1
   10e48:	andeq	r0, r0, r0
   10e4c:	ldr	r0, [pc, #36]	; 10e78 <_start@@Base+0xb8>
   10e50:	ldr	r1, [pc, #36]	; 10e7c <_start@@Base+0xbc>
   10e54:	sub	r1, r1, r0
   10e58:	asr	r1, r1, #2
   10e5c:	add	r1, r1, r1, lsr #31
   10e60:	asrs	r1, r1, #1
   10e64:	bxeq	lr
   10e68:	ldr	r3, [pc, #16]	; 10e80 <_start@@Base+0xc0>
   10e6c:	cmp	r3, #0
   10e70:	bxeq	lr
   10e74:	bx	r3
   10e78:	andeq	r9, r2, r4, lsl #1
   10e7c:	andeq	r9, r2, r4, lsl #1
   10e80:	andeq	r0, r0, r0
   10e84:	push	{r4, lr}
   10e88:	ldr	r4, [pc, #24]	; 10ea8 <_start@@Base+0xe8>
   10e8c:	ldrb	r3, [r4]
   10e90:	cmp	r3, #0
   10e94:	popne	{r4, pc}
   10e98:	bl	10e20 <_start@@Base+0x60>
   10e9c:	mov	r3, #1
   10ea0:	strb	r3, [r4]
   10ea4:	pop	{r4, pc}
   10ea8:	andeq	r9, r2, r4, lsl #1
   10eac:	b	10e4c <_start@@Base+0x8c>
   10eb0:	str	fp, [sp, #-8]!
   10eb4:	str	lr, [sp, #4]
   10eb8:	add	fp, sp, #4
   10ebc:	sub	sp, sp, #16
   10ec0:	str	r0, [fp, #-16]
   10ec4:	str	r1, [fp, #-20]	; 0xffffffec
   10ec8:	mov	r3, #0
   10ecc:	str	r3, [fp, #-12]
   10ed0:	ldr	r3, [fp, #-16]
   10ed4:	cmp	r3, #3
   10ed8:	bhi	10ee4 <_start@@Base+0x124>
   10edc:	mov	r3, #4
   10ee0:	str	r3, [fp, #-16]
   10ee4:	sub	r3, fp, #12
   10ee8:	ldr	r2, [fp, #-20]	; 0xffffffec
   10eec:	ldr	r1, [fp, #-16]
   10ef0:	mov	r0, r3
   10ef4:	bl	10d68 <posix_memalign@plt>
   10ef8:	str	r0, [fp, #-8]
   10efc:	ldr	r3, [fp, #-8]
   10f00:	cmp	r3, #0
   10f04:	beq	10f28 <_start@@Base+0x168>
   10f08:	ldr	r3, [fp, #-12]
   10f0c:	cmp	r3, #0
   10f10:	beq	10f28 <_start@@Base+0x168>
   10f14:	ldr	r3, [fp, #-12]
   10f18:	mov	r0, r3
   10f1c:	bl	10cd8 <free@plt>
   10f20:	mov	r3, #0
   10f24:	str	r3, [fp, #-12]
   10f28:	ldr	r3, [fp, #-12]
   10f2c:	mov	r0, r3
   10f30:	sub	sp, fp, #4
   10f34:	ldr	fp, [sp]
   10f38:	add	sp, sp, #4
   10f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f40:	push	{fp}		; (str fp, [sp, #-4]!)
   10f44:	add	fp, sp, #0
   10f48:	sub	sp, sp, #12
   10f4c:	mov	r3, r0
   10f50:	strb	r3, [fp, #-5]
   10f54:	ldrb	r3, [fp, #-5]
   10f58:	mov	r0, r3
   10f5c:	add	sp, fp, #0
   10f60:	pop	{fp}		; (ldr fp, [sp], #4)
   10f64:	bx	lr
   10f68:	str	fp, [sp, #-8]!
   10f6c:	str	lr, [sp, #4]
   10f70:	add	fp, sp, #4
   10f74:	sub	sp, sp, #8
   10f78:	str	r0, [fp, #-8]
   10f7c:	ldr	r3, [fp, #-8]
   10f80:	ldrb	r3, [r3]
   10f84:	mov	r0, r3
   10f88:	bl	10f40 <_start@@Base+0x180>
   10f8c:	mov	r3, r0
   10f90:	mov	r0, r3
   10f94:	sub	sp, fp, #4
   10f98:	ldr	fp, [sp]
   10f9c:	add	sp, sp, #4
   10fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa4:	push	{fp}		; (str fp, [sp, #-4]!)
   10fa8:	add	fp, sp, #0
   10fac:	sub	sp, sp, #12
   10fb0:	str	r0, [fp, #-8]
   10fb4:	ldr	r3, [fp, #-8]
   10fb8:	mov	r0, r3
   10fbc:	add	sp, fp, #0
   10fc0:	pop	{fp}		; (ldr fp, [sp], #4)
   10fc4:	bx	lr
   10fc8:	str	fp, [sp, #-8]!
   10fcc:	str	lr, [sp, #4]
   10fd0:	add	fp, sp, #4
   10fd4:	sub	sp, sp, #8
   10fd8:	str	r0, [fp, #-8]
   10fdc:	ldr	r3, [fp, #-8]
   10fe0:	ldr	r3, [r3]
   10fe4:	mov	r0, r3
   10fe8:	bl	10fa4 <_start@@Base+0x1e4>
   10fec:	mov	r3, r0
   10ff0:	mov	r0, r3
   10ff4:	sub	sp, fp, #4
   10ff8:	ldr	fp, [sp]
   10ffc:	add	sp, sp, #4
   11000:	pop	{pc}		; (ldr pc, [sp], #4)
   11004:	push	{fp}		; (str fp, [sp, #-4]!)
   11008:	add	fp, sp, #0
   1100c:	sub	sp, sp, #12
   11010:	strd	r0, [fp, #-12]
   11014:	ldrd	r2, [fp, #-12]
   11018:	mov	r0, r2
   1101c:	mov	r1, r3
   11020:	add	sp, fp, #0
   11024:	pop	{fp}		; (ldr fp, [sp], #4)
   11028:	bx	lr
   1102c:	str	fp, [sp, #-8]!
   11030:	str	lr, [sp, #4]
   11034:	add	fp, sp, #4
   11038:	sub	sp, sp, #8
   1103c:	str	r0, [fp, #-8]
   11040:	ldr	r3, [fp, #-8]
   11044:	ldrd	r2, [r3]
   11048:	mov	r0, r2
   1104c:	mov	r1, r3
   11050:	bl	11004 <_start@@Base+0x244>
   11054:	mov	r2, r0
   11058:	mov	r3, r1
   1105c:	mov	r0, r2
   11060:	mov	r1, r3
   11064:	sub	sp, fp, #4
   11068:	ldr	fp, [sp]
   1106c:	add	sp, sp, #4
   11070:	pop	{pc}		; (ldr pc, [sp], #4)
   11074:	push	{fp}		; (str fp, [sp, #-4]!)
   11078:	add	fp, sp, #0
   1107c:	sub	sp, sp, #12
   11080:	mov	r3, r0
   11084:	strb	r3, [fp, #-5]
   11088:	ldrsb	r3, [fp, #-5]
   1108c:	mov	r0, r3
   11090:	add	sp, fp, #0
   11094:	pop	{fp}		; (ldr fp, [sp], #4)
   11098:	bx	lr
   1109c:	str	fp, [sp, #-8]!
   110a0:	str	lr, [sp, #4]
   110a4:	add	fp, sp, #4
   110a8:	sub	sp, sp, #8
   110ac:	str	r0, [fp, #-8]
   110b0:	ldr	r3, [fp, #-8]
   110b4:	ldrsb	r3, [r3]
   110b8:	mov	r0, r3
   110bc:	bl	11074 <_start@@Base+0x2b4>
   110c0:	mov	r3, r0
   110c4:	mov	r0, r3
   110c8:	sub	sp, fp, #4
   110cc:	ldr	fp, [sp]
   110d0:	add	sp, sp, #4
   110d4:	pop	{pc}		; (ldr pc, [sp], #4)
   110d8:	push	{fp}		; (str fp, [sp, #-4]!)
   110dc:	add	fp, sp, #0
   110e0:	sub	sp, sp, #12
   110e4:	mov	r3, r0
   110e8:	strh	r3, [fp, #-6]
   110ec:	ldrsh	r3, [fp, #-6]
   110f0:	mov	r0, r3
   110f4:	add	sp, fp, #0
   110f8:	pop	{fp}		; (ldr fp, [sp], #4)
   110fc:	bx	lr
   11100:	str	fp, [sp, #-8]!
   11104:	str	lr, [sp, #4]
   11108:	add	fp, sp, #4
   1110c:	sub	sp, sp, #8
   11110:	str	r0, [fp, #-8]
   11114:	ldr	r3, [fp, #-8]
   11118:	ldrsh	r3, [r3]
   1111c:	mov	r0, r3
   11120:	bl	110d8 <_start@@Base+0x318>
   11124:	mov	r3, r0
   11128:	mov	r0, r3
   1112c:	sub	sp, fp, #4
   11130:	ldr	fp, [sp]
   11134:	add	sp, sp, #4
   11138:	pop	{pc}		; (ldr pc, [sp], #4)
   1113c:	push	{fp}		; (str fp, [sp, #-4]!)
   11140:	add	fp, sp, #0
   11144:	sub	sp, sp, #12
   11148:	str	r0, [fp, #-8]
   1114c:	ldr	r3, [fp, #-8]
   11150:	mov	r0, r3
   11154:	add	sp, fp, #0
   11158:	pop	{fp}		; (ldr fp, [sp], #4)
   1115c:	bx	lr
   11160:	str	fp, [sp, #-8]!
   11164:	str	lr, [sp, #4]
   11168:	add	fp, sp, #4
   1116c:	sub	sp, sp, #8
   11170:	str	r0, [fp, #-8]
   11174:	ldr	r3, [fp, #-8]
   11178:	ldr	r3, [r3]
   1117c:	mov	r0, r3
   11180:	bl	1113c <_start@@Base+0x37c>
   11184:	mov	r3, r0
   11188:	mov	r0, r3
   1118c:	sub	sp, fp, #4
   11190:	ldr	fp, [sp]
   11194:	add	sp, sp, #4
   11198:	pop	{pc}		; (ldr pc, [sp], #4)
   1119c:	push	{fp}		; (str fp, [sp, #-4]!)
   111a0:	add	fp, sp, #0
   111a4:	sub	sp, sp, #12
   111a8:	strd	r0, [fp, #-12]
   111ac:	ldrd	r2, [fp, #-12]
   111b0:	mov	r0, r2
   111b4:	mov	r1, r3
   111b8:	add	sp, fp, #0
   111bc:	pop	{fp}		; (ldr fp, [sp], #4)
   111c0:	bx	lr
   111c4:	str	fp, [sp, #-8]!
   111c8:	str	lr, [sp, #4]
   111cc:	add	fp, sp, #4
   111d0:	sub	sp, sp, #8
   111d4:	str	r0, [fp, #-8]
   111d8:	ldr	r3, [fp, #-8]
   111dc:	ldrd	r2, [r3]
   111e0:	mov	r0, r2
   111e4:	mov	r1, r3
   111e8:	bl	1119c <_start@@Base+0x3dc>
   111ec:	mov	r2, r0
   111f0:	mov	r3, r1
   111f4:	mov	r0, r2
   111f8:	mov	r1, r3
   111fc:	sub	sp, fp, #4
   11200:	ldr	fp, [sp]
   11204:	add	sp, sp, #4
   11208:	pop	{pc}		; (ldr pc, [sp], #4)
   1120c:	push	{fp}		; (str fp, [sp, #-4]!)
   11210:	add	fp, sp, #0
   11214:	sub	sp, sp, #20
   11218:	vstr	s0, [fp, #-16]
   1121c:	ldr	r3, [fp, #-16]
   11220:	str	r3, [fp, #-8]
   11224:	ldr	r3, [fp, #-8]
   11228:	str	r3, [fp, #-8]
   1122c:	ldr	r3, [fp, #-8]
   11230:	vmov	s15, r3
   11234:	vmov.f32	s0, s15
   11238:	add	sp, fp, #0
   1123c:	pop	{fp}		; (ldr fp, [sp], #4)
   11240:	bx	lr
   11244:	str	fp, [sp, #-8]!
   11248:	str	lr, [sp, #4]
   1124c:	add	fp, sp, #4
   11250:	sub	sp, sp, #8
   11254:	str	r0, [fp, #-8]
   11258:	ldr	r3, [fp, #-8]
   1125c:	vldr	s15, [r3]
   11260:	vmov.f32	s0, s15
   11264:	bl	1120c <_start@@Base+0x44c>
   11268:	vmov.f32	s15, s0
   1126c:	vmov.f32	s0, s15
   11270:	sub	sp, fp, #4
   11274:	ldr	fp, [sp]
   11278:	add	sp, sp, #4
   1127c:	pop	{pc}		; (ldr pc, [sp], #4)
   11280:	push	{fp}		; (str fp, [sp, #-4]!)
   11284:	add	fp, sp, #0
   11288:	sub	sp, sp, #20
   1128c:	vstr	d0, [fp, #-20]	; 0xffffffec
   11290:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11294:	strd	r2, [fp, #-12]
   11298:	ldrd	r2, [fp, #-12]
   1129c:	strd	r2, [fp, #-12]
   112a0:	ldrd	r2, [fp, #-12]
   112a4:	vmov	d7, r2, r3
   112a8:	vmov.f64	d0, d7
   112ac:	add	sp, fp, #0
   112b0:	pop	{fp}		; (ldr fp, [sp], #4)
   112b4:	bx	lr
   112b8:	str	fp, [sp, #-8]!
   112bc:	str	lr, [sp, #4]
   112c0:	add	fp, sp, #4
   112c4:	sub	sp, sp, #8
   112c8:	str	r0, [fp, #-8]
   112cc:	ldr	r3, [fp, #-8]
   112d0:	vldr	d7, [r3]
   112d4:	vmov.f64	d0, d7
   112d8:	bl	11280 <_start@@Base+0x4c0>
   112dc:	vmov.f64	d7, d0
   112e0:	vmov.f64	d0, d7
   112e4:	sub	sp, fp, #4
   112e8:	ldr	fp, [sp]
   112ec:	add	sp, sp, #4
   112f0:	pop	{pc}		; (ldr pc, [sp], #4)
   112f4:	push	{fp}		; (str fp, [sp, #-4]!)
   112f8:	add	fp, sp, #0
   112fc:	sub	sp, sp, #12
   11300:	str	r0, [fp, #-8]
   11304:	ldr	r3, [fp, #-8]
   11308:	mov	r0, r3
   1130c:	add	sp, fp, #0
   11310:	pop	{fp}		; (ldr fp, [sp], #4)
   11314:	bx	lr
   11318:	str	fp, [sp, #-8]!
   1131c:	str	lr, [sp, #4]
   11320:	add	fp, sp, #4
   11324:	sub	sp, sp, #8
   11328:	str	r0, [fp, #-8]
   1132c:	ldr	r3, [fp, #-8]
   11330:	ldr	r3, [r3]
   11334:	mov	r0, r3
   11338:	bl	112f4 <_start@@Base+0x534>
   1133c:	mov	r3, r0
   11340:	mov	r0, r3
   11344:	sub	sp, fp, #4
   11348:	ldr	fp, [sp]
   1134c:	add	sp, sp, #4
   11350:	pop	{pc}		; (ldr pc, [sp], #4)
   11354:	push	{fp}		; (str fp, [sp, #-4]!)
   11358:	add	fp, sp, #0
   1135c:	sub	sp, sp, #12
   11360:	str	r0, [fp, #-8]
   11364:	ldr	r3, [fp, #-8]
   11368:	mov	r0, r3
   1136c:	add	sp, fp, #0
   11370:	pop	{fp}		; (ldr fp, [sp], #4)
   11374:	bx	lr
   11378:	str	fp, [sp, #-8]!
   1137c:	str	lr, [sp, #4]
   11380:	add	fp, sp, #4
   11384:	sub	sp, sp, #8
   11388:	str	r0, [fp, #-8]
   1138c:	ldr	r3, [fp, #-8]
   11390:	ldr	r3, [r3]
   11394:	mov	r0, r3
   11398:	bl	11354 <_start@@Base+0x594>
   1139c:	mov	r3, r0
   113a0:	mov	r0, r3
   113a4:	sub	sp, fp, #4
   113a8:	ldr	fp, [sp]
   113ac:	add	sp, sp, #4
   113b0:	pop	{pc}		; (ldr pc, [sp], #4)
   113b4:	push	{fp}		; (str fp, [sp, #-4]!)
   113b8:	add	fp, sp, #0
   113bc:	sub	sp, sp, #12
   113c0:	mov	r3, r0
   113c4:	strh	r3, [fp, #-6]
   113c8:	ldrh	r3, [fp, #-6]
   113cc:	mov	r0, r3
   113d0:	add	sp, fp, #0
   113d4:	pop	{fp}		; (ldr fp, [sp], #4)
   113d8:	bx	lr
   113dc:	str	fp, [sp, #-8]!
   113e0:	str	lr, [sp, #4]
   113e4:	add	fp, sp, #4
   113e8:	sub	sp, sp, #8
   113ec:	str	r0, [fp, #-8]
   113f0:	ldr	r3, [fp, #-8]
   113f4:	ldrh	r3, [r3]
   113f8:	mov	r0, r3
   113fc:	bl	113b4 <_start@@Base+0x5f4>
   11400:	mov	r3, r0
   11404:	mov	r0, r3
   11408:	sub	sp, fp, #4
   1140c:	ldr	fp, [sp]
   11410:	add	sp, sp, #4
   11414:	pop	{pc}		; (ldr pc, [sp], #4)
   11418:	push	{fp}		; (str fp, [sp, #-4]!)
   1141c:	add	fp, sp, #0
   11420:	sub	sp, sp, #12
   11424:	mov	r3, r0
   11428:	strb	r3, [fp, #-5]
   1142c:	ldrb	r3, [fp, #-5]
   11430:	mov	r0, r3
   11434:	add	sp, fp, #0
   11438:	pop	{fp}		; (ldr fp, [sp], #4)
   1143c:	bx	lr
   11440:	str	fp, [sp, #-8]!
   11444:	str	lr, [sp, #4]
   11448:	add	fp, sp, #4
   1144c:	sub	sp, sp, #8
   11450:	str	r0, [fp, #-8]
   11454:	ldr	r3, [fp, #-8]
   11458:	ldrb	r3, [r3]
   1145c:	mov	r0, r3
   11460:	bl	11418 <_start@@Base+0x658>
   11464:	mov	r3, r0
   11468:	mov	r0, r3
   1146c:	sub	sp, fp, #4
   11470:	ldr	fp, [sp]
   11474:	add	sp, sp, #4
   11478:	pop	{pc}		; (ldr pc, [sp], #4)
   1147c:	push	{fp}		; (str fp, [sp, #-4]!)
   11480:	add	fp, sp, #0
   11484:	sub	sp, sp, #12
   11488:	str	r0, [fp, #-8]
   1148c:	ldr	r3, [fp, #-8]
   11490:	mov	r0, r3
   11494:	add	sp, fp, #0
   11498:	pop	{fp}		; (ldr fp, [sp], #4)
   1149c:	bx	lr
   114a0:	push	{fp}		; (str fp, [sp, #-4]!)
   114a4:	add	fp, sp, #0
   114a8:	sub	sp, sp, #12
   114ac:	str	r0, [fp, #-8]
   114b0:	ldr	r3, [fp, #-8]
   114b4:	mov	r0, r3
   114b8:	add	sp, fp, #0
   114bc:	pop	{fp}		; (ldr fp, [sp], #4)
   114c0:	bx	lr
   114c4:	str	fp, [sp, #-8]!
   114c8:	str	lr, [sp, #4]
   114cc:	add	fp, sp, #4
   114d0:	sub	sp, sp, #8
   114d4:	str	r0, [fp, #-8]
   114d8:	ldr	r3, [fp, #-8]
   114dc:	ldr	r3, [r3]
   114e0:	mov	r0, r3
   114e4:	bl	1147c <_start@@Base+0x6bc>
   114e8:	mov	r3, r0
   114ec:	mov	r0, r3
   114f0:	sub	sp, fp, #4
   114f4:	ldr	fp, [sp]
   114f8:	add	sp, sp, #4
   114fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11500:	str	fp, [sp, #-8]!
   11504:	str	lr, [sp, #4]
   11508:	add	fp, sp, #4
   1150c:	sub	sp, sp, #8
   11510:	str	r0, [fp, #-8]
   11514:	ldr	r3, [fp, #-8]
   11518:	cmp	r3, #0
   1151c:	beq	11538 <_start@@Base+0x778>
   11520:	ldr	r3, [fp, #-8]
   11524:	sub	r3, r3, #4
   11528:	mov	r0, r3
   1152c:	bl	11318 <_start@@Base+0x558>
   11530:	mov	r3, r0
   11534:	b	1153c <_start@@Base+0x77c>
   11538:	mov	r3, #0
   1153c:	mov	r0, r3
   11540:	sub	sp, fp, #4
   11544:	ldr	fp, [sp]
   11548:	add	sp, sp, #4
   1154c:	pop	{pc}		; (ldr pc, [sp], #4)
   11550:	str	fp, [sp, #-8]!
   11554:	str	lr, [sp, #4]
   11558:	add	fp, sp, #4
   1155c:	sub	sp, sp, #8
   11560:	str	r0, [fp, #-8]
   11564:	ldr	r3, [fp, #-8]
   11568:	cmp	r3, #0
   1156c:	beq	11588 <_start@@Base+0x7c8>
   11570:	ldr	r3, [fp, #-8]
   11574:	sub	r3, r3, #4
   11578:	mov	r0, r3
   1157c:	bl	11318 <_start@@Base+0x558>
   11580:	mov	r3, r0
   11584:	b	1158c <_start@@Base+0x7cc>
   11588:	mov	r3, #0
   1158c:	mov	r0, r3
   11590:	sub	sp, fp, #4
   11594:	ldr	fp, [sp]
   11598:	add	sp, sp, #4
   1159c:	pop	{pc}		; (ldr pc, [sp], #4)
   115a0:	str	fp, [sp, #-8]!
   115a4:	str	lr, [sp, #4]
   115a8:	add	fp, sp, #4
   115ac:	sub	sp, sp, #8
   115b0:	str	r0, [fp, #-8]
   115b4:	ldr	r3, [fp, #-8]
   115b8:	cmp	r3, #0
   115bc:	beq	115d8 <_start@@Base+0x818>
   115c0:	ldr	r3, [fp, #-8]
   115c4:	sub	r3, r3, #4
   115c8:	mov	r0, r3
   115cc:	bl	11318 <_start@@Base+0x558>
   115d0:	mov	r3, r0
   115d4:	b	115dc <_start@@Base+0x81c>
   115d8:	mov	r3, #0
   115dc:	mov	r0, r3
   115e0:	sub	sp, fp, #4
   115e4:	ldr	fp, [sp]
   115e8:	add	sp, sp, #4
   115ec:	pop	{pc}		; (ldr pc, [sp], #4)
   115f0:	str	fp, [sp, #-8]!
   115f4:	str	lr, [sp, #4]
   115f8:	add	fp, sp, #4
   115fc:	sub	sp, sp, #16
   11600:	str	r0, [fp, #-16]
   11604:	str	r1, [fp, #-20]	; 0xffffffec
   11608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1160c:	lsl	r3, r3, #2
   11610:	ldr	r2, [fp, #-16]
   11614:	add	r3, r2, r3
   11618:	str	r3, [fp, #-8]
   1161c:	ldr	r0, [fp, #-16]
   11620:	bl	11500 <_start@@Base+0x740>
   11624:	mov	r2, r0
   11628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1162c:	cmp	r3, r2
   11630:	bcc	11654 <_start@@Base+0x894>
   11634:	ldr	r3, [pc, #68]	; 11680 <_start@@Base+0x8c0>
   11638:	add	r3, pc, r3
   1163c:	mov	r2, #108	; 0x6c
   11640:	ldr	r1, [pc, #60]	; 11684 <_start@@Base+0x8c4>
   11644:	add	r1, pc, r1
   11648:	ldr	r0, [pc, #56]	; 11688 <_start@@Base+0x8c8>
   1164c:	add	r0, pc, r0
   11650:	bl	10db0 <__assert_fail@plt>
   11654:	ldr	r0, [fp, #-8]
   11658:	bl	11318 <_start@@Base+0x558>
   1165c:	mov	r3, r0
   11660:	add	r3, r3, #4
   11664:	ldr	r2, [fp, #-8]
   11668:	add	r3, r2, r3
   1166c:	mov	r0, r3
   11670:	sub	sp, fp, #4
   11674:	ldr	fp, [sp]
   11678:	add	sp, sp, #4
   1167c:	pop	{pc}		; (ldr pc, [sp], #4)
   11680:	andeq	r6, r0, ip, ror #22
   11684:	andeq	r6, r0, r0, asr #5
   11688:	andeq	r6, r0, r8, lsr r3
   1168c:	str	fp, [sp, #-8]!
   11690:	str	lr, [sp, #4]
   11694:	add	fp, sp, #4
   11698:	sub	sp, sp, #8
   1169c:	str	r0, [fp, #-8]
   116a0:	ldr	r0, [fp, #-8]
   116a4:	bl	11500 <_start@@Base+0x740>
   116a8:	mov	r3, r0
   116ac:	mov	r0, r3
   116b0:	sub	sp, fp, #4
   116b4:	ldr	fp, [sp]
   116b8:	add	sp, sp, #4
   116bc:	pop	{pc}		; (ldr pc, [sp], #4)
   116c0:	str	fp, [sp, #-8]!
   116c4:	str	lr, [sp, #4]
   116c8:	add	fp, sp, #4
   116cc:	sub	sp, sp, #8
   116d0:	str	r0, [fp, #-8]
   116d4:	str	r1, [fp, #-12]
   116d8:	ldr	r0, [fp, #-8]
   116dc:	bl	11500 <_start@@Base+0x740>
   116e0:	mov	r2, r0
   116e4:	ldr	r3, [fp, #-12]
   116e8:	cmp	r3, r2
   116ec:	bcc	11710 <_start@@Base+0x950>
   116f0:	ldr	r3, [pc, #68]	; 1173c <_start@@Base+0x97c>
   116f4:	add	r3, pc, r3
   116f8:	movw	r2, #395	; 0x18b
   116fc:	ldr	r1, [pc, #60]	; 11740 <_start@@Base+0x980>
   11700:	add	r1, pc, r1
   11704:	ldr	r0, [pc, #56]	; 11744 <_start@@Base+0x984>
   11708:	add	r0, pc, r0
   1170c:	bl	10db0 <__assert_fail@plt>
   11710:	ldr	r2, [fp, #-8]
   11714:	ldr	r3, [fp, #-12]
   11718:	add	r3, r2, r3
   1171c:	mov	r0, r3
   11720:	bl	10f68 <_start@@Base+0x1a8>
   11724:	mov	r3, r0
   11728:	mov	r0, r3
   1172c:	sub	sp, fp, #4
   11730:	ldr	fp, [sp]
   11734:	add	sp, sp, #4
   11738:	pop	{pc}		; (ldr pc, [sp], #4)
   1173c:	andeq	r6, r0, r8, ror #20
   11740:	andeq	r6, r0, r4, lsl #4
   11744:	andeq	r6, r0, ip, ror r2
   11748:	str	fp, [sp, #-8]!
   1174c:	str	lr, [sp, #4]
   11750:	add	fp, sp, #4
   11754:	sub	sp, sp, #16
   11758:	str	r0, [fp, #-16]
   1175c:	str	r1, [fp, #-20]	; 0xffffffec
   11760:	mov	r3, #0
   11764:	str	r3, [fp, #-12]
   11768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1176c:	cmp	r3, #0
   11770:	bne	1177c <_start@@Base+0x9bc>
   11774:	mov	r3, #1
   11778:	b	117e0 <_start@@Base+0xa20>
   1177c:	sub	r3, fp, #12
   11780:	mov	r2, #4
   11784:	ldr	r1, [fp, #-20]	; 0xffffffec
   11788:	mov	r0, r3
   1178c:	bl	10d74 <strncpy@plt>
   11790:	ldr	r3, [fp, #-12]
   11794:	mov	r0, r3
   11798:	bl	114a0 <_start@@Base+0x6e0>
   1179c:	mov	r3, r0
   117a0:	str	r3, [fp, #-12]
   117a4:	ldr	r3, [fp, #-16]
   117a8:	add	r3, r3, #4
   117ac:	mov	r0, r3
   117b0:	bl	114c4 <_start@@Base+0x704>
   117b4:	str	r0, [fp, #-8]
   117b8:	ldr	r3, [fp, #-12]
   117bc:	cmp	r3, #0
   117c0:	beq	117d4 <_start@@Base+0xa14>
   117c4:	ldr	r3, [fp, #-12]
   117c8:	ldr	r2, [fp, #-8]
   117cc:	cmp	r2, r3
   117d0:	bne	117dc <_start@@Base+0xa1c>
   117d4:	mov	r3, #1
   117d8:	b	117e0 <_start@@Base+0xa20>
   117dc:	mov	r3, #0
   117e0:	mov	r0, r3
   117e4:	sub	sp, fp, #4
   117e8:	ldr	fp, [sp]
   117ec:	add	sp, sp, #4
   117f0:	pop	{pc}		; (ldr pc, [sp], #4)
   117f4:	push	{fp}		; (str fp, [sp, #-4]!)
   117f8:	add	fp, sp, #0
   117fc:	sub	sp, sp, #12
   11800:	mov	r3, r0
   11804:	strb	r3, [fp, #-5]
   11808:	ldrsb	r3, [fp, #-5]
   1180c:	mov	r0, r3
   11810:	add	sp, fp, #0
   11814:	pop	{fp}		; (ldr fp, [sp], #4)
   11818:	bx	lr
   1181c:	str	fp, [sp, #-8]!
   11820:	str	lr, [sp, #4]
   11824:	add	fp, sp, #4
   11828:	sub	sp, sp, #8
   1182c:	str	r0, [fp, #-8]
   11830:	ldr	r3, [fp, #-8]
   11834:	ldrsb	r3, [r3]
   11838:	mov	r0, r3
   1183c:	bl	117f4 <_start@@Base+0xa34>
   11840:	mov	r3, r0
   11844:	mov	r0, r3
   11848:	sub	sp, fp, #4
   1184c:	ldr	fp, [sp]
   11850:	add	sp, sp, #4
   11854:	pop	{pc}		; (ldr pc, [sp], #4)
   11858:	str	fp, [sp, #-8]!
   1185c:	str	lr, [sp, #4]
   11860:	add	fp, sp, #4
   11864:	sub	sp, sp, #8
   11868:	str	r0, [fp, #-8]
   1186c:	str	r1, [fp, #-12]
   11870:	ldr	r0, [fp, #-8]
   11874:	bl	11500 <_start@@Base+0x740>
   11878:	mov	r2, r0
   1187c:	ldr	r3, [fp, #-12]
   11880:	cmp	r3, r2
   11884:	bcc	118a8 <_start@@Base+0xae8>
   11888:	ldr	r3, [pc, #60]	; 118cc <_start@@Base+0xb0c>
   1188c:	add	r3, pc, r3
   11890:	mov	r2, #380	; 0x17c
   11894:	ldr	r1, [pc, #52]	; 118d0 <_start@@Base+0xb10>
   11898:	add	r1, pc, r1
   1189c:	ldr	r0, [pc, #48]	; 118d4 <_start@@Base+0xb14>
   118a0:	add	r0, pc, r0
   118a4:	bl	10db0 <__assert_fail@plt>
   118a8:	ldr	r3, [fp, #-12]
   118ac:	lsl	r3, r3, #2
   118b0:	ldr	r2, [fp, #-8]
   118b4:	add	r3, r2, r3
   118b8:	mov	r0, r3
   118bc:	sub	sp, fp, #4
   118c0:	ldr	fp, [sp]
   118c4:	add	sp, sp, #4
   118c8:	pop	{pc}		; (ldr pc, [sp], #4)
   118cc:			; <UNDEFINED> instruction: 0x000069b0
   118d0:	andeq	r6, r0, r4, lsr #2
   118d4:	andeq	r6, r0, r4, ror #1
   118d8:	str	fp, [sp, #-8]!
   118dc:	str	lr, [sp, #4]
   118e0:	add	fp, sp, #4
   118e4:	sub	sp, sp, #8
   118e8:	str	r0, [fp, #-8]
   118ec:	ldr	r3, [fp, #-8]
   118f0:	cmp	r3, #0
   118f4:	beq	11910 <_start@@Base+0xb50>
   118f8:	ldr	r3, [fp, #-8]
   118fc:	sub	r3, r3, #4
   11900:	mov	r0, r3
   11904:	bl	11318 <_start@@Base+0x558>
   11908:	mov	r3, r0
   1190c:	b	11914 <_start@@Base+0xb54>
   11910:	mov	r3, #0
   11914:	mov	r0, r3
   11918:	sub	sp, fp, #4
   1191c:	ldr	fp, [sp]
   11920:	add	sp, sp, #4
   11924:	pop	{pc}		; (ldr pc, [sp], #4)
   11928:	str	fp, [sp, #-8]!
   1192c:	str	lr, [sp, #4]
   11930:	add	fp, sp, #4
   11934:	sub	sp, sp, #8
   11938:	str	r0, [fp, #-8]
   1193c:	ldr	r3, [fp, #-8]
   11940:	cmp	r3, #0
   11944:	beq	1195c <_start@@Base+0xb9c>
   11948:	ldr	r3, [fp, #-8]
   1194c:	mov	r0, r3
   11950:	bl	11100 <_start@@Base+0x340>
   11954:	mov	r3, r0
   11958:	b	11960 <_start@@Base+0xba0>
   1195c:	mov	r3, #0
   11960:	mov	r0, r3
   11964:	sub	sp, fp, #4
   11968:	ldr	fp, [sp]
   1196c:	add	sp, sp, #4
   11970:	pop	{pc}		; (ldr pc, [sp], #4)
   11974:	str	fp, [sp, #-8]!
   11978:	str	lr, [sp, #4]
   1197c:	add	fp, sp, #4
   11980:	sub	sp, sp, #8
   11984:	str	r0, [fp, #-8]
   11988:	ldr	r3, [fp, #-8]
   1198c:	cmp	r3, #0
   11990:	beq	119ac <_start@@Base+0xbec>
   11994:	ldr	r3, [fp, #-8]
   11998:	add	r3, r3, #2
   1199c:	mov	r0, r3
   119a0:	bl	1109c <_start@@Base+0x2dc>
   119a4:	mov	r3, r0
   119a8:	b	119b0 <_start@@Base+0xbf0>
   119ac:	mov	r3, #0
   119b0:	mov	r0, r3
   119b4:	sub	sp, fp, #4
   119b8:	ldr	fp, [sp]
   119bc:	add	sp, sp, #4
   119c0:	pop	{pc}		; (ldr pc, [sp], #4)
   119c4:	str	fp, [sp, #-8]!
   119c8:	str	lr, [sp, #4]
   119cc:	add	fp, sp, #4
   119d0:	sub	sp, sp, #8
   119d4:	str	r0, [fp, #-8]
   119d8:	ldr	r3, [fp, #-8]
   119dc:	cmp	r3, #0
   119e0:	beq	119f8 <_start@@Base+0xc38>
   119e4:	ldr	r3, [fp, #-8]
   119e8:	mov	r0, r3
   119ec:	bl	11244 <_start@@Base+0x484>
   119f0:	vmov.f32	s15, s0
   119f4:	b	119fc <_start@@Base+0xc3c>
   119f8:	vldr	s15, [pc, #16]	; 11a10 <_start@@Base+0xc50>
   119fc:	vmov.f32	s0, s15
   11a00:	sub	sp, fp, #4
   11a04:	ldr	fp, [sp]
   11a08:	add	sp, sp, #4
   11a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a10:	andeq	r0, r0, r0
   11a14:	str	fp, [sp, #-8]!
   11a18:	str	lr, [sp, #4]
   11a1c:	add	fp, sp, #4
   11a20:	sub	sp, sp, #8
   11a24:	str	r0, [fp, #-8]
   11a28:	ldr	r3, [fp, #-8]
   11a2c:	cmp	r3, #0
   11a30:	beq	11a4c <_start@@Base+0xc8c>
   11a34:	ldr	r3, [fp, #-8]
   11a38:	add	r3, r3, #4
   11a3c:	mov	r0, r3
   11a40:	bl	11244 <_start@@Base+0x484>
   11a44:	vmov.f32	s15, s0
   11a48:	b	11a50 <_start@@Base+0xc90>
   11a4c:	vldr	s15, [pc, #16]	; 11a64 <_start@@Base+0xca4>
   11a50:	vmov.f32	s0, s15
   11a54:	sub	sp, fp, #4
   11a58:	ldr	fp, [sp]
   11a5c:	add	sp, sp, #4
   11a60:	pop	{pc}		; (ldr pc, [sp], #4)
   11a64:	andeq	r0, r0, r0
   11a68:	str	fp, [sp, #-8]!
   11a6c:	str	lr, [sp, #4]
   11a70:	add	fp, sp, #4
   11a74:	sub	sp, sp, #8
   11a78:	str	r0, [fp, #-8]
   11a7c:	ldr	r3, [fp, #-8]
   11a80:	cmp	r3, #0
   11a84:	beq	11aa0 <_start@@Base+0xce0>
   11a88:	ldr	r3, [fp, #-8]
   11a8c:	add	r3, r3, #8
   11a90:	mov	r0, r3
   11a94:	bl	11244 <_start@@Base+0x484>
   11a98:	vmov.f32	s15, s0
   11a9c:	b	11aa4 <_start@@Base+0xce4>
   11aa0:	vldr	s15, [pc, #16]	; 11ab8 <_start@@Base+0xcf8>
   11aa4:	vmov.f32	s0, s15
   11aa8:	sub	sp, fp, #4
   11aac:	ldr	fp, [sp]
   11ab0:	add	sp, sp, #4
   11ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ab8:	andeq	r0, r0, r0
   11abc:	str	fp, [sp, #-8]!
   11ac0:	str	lr, [sp, #4]
   11ac4:	add	fp, sp, #4
   11ac8:	sub	sp, sp, #8
   11acc:	str	r0, [fp, #-8]
   11ad0:	ldr	r3, [fp, #-8]
   11ad4:	cmp	r3, #0
   11ad8:	beq	11af4 <_start@@Base+0xd34>
   11adc:	ldr	r3, [fp, #-8]
   11ae0:	add	r3, r3, #16
   11ae4:	mov	r0, r3
   11ae8:	bl	112b8 <_start@@Base+0x4f8>
   11aec:	vmov.f64	d7, d0
   11af0:	b	11af8 <_start@@Base+0xd38>
   11af4:	vldr	d7, [pc, #20]	; 11b10 <_start@@Base+0xd50>
   11af8:	vmov.f64	d0, d7
   11afc:	sub	sp, fp, #4
   11b00:	ldr	fp, [sp]
   11b04:	add	sp, sp, #4
   11b08:	pop	{pc}		; (ldr pc, [sp], #4)
   11b0c:	nop	{0}
	...
   11b18:	str	fp, [sp, #-8]!
   11b1c:	str	lr, [sp, #4]
   11b20:	add	fp, sp, #4
   11b24:	sub	sp, sp, #8
   11b28:	str	r0, [fp, #-8]
   11b2c:	ldr	r3, [fp, #-8]
   11b30:	cmp	r3, #0
   11b34:	beq	11b50 <_start@@Base+0xd90>
   11b38:	ldr	r3, [fp, #-8]
   11b3c:	add	r3, r3, #24
   11b40:	mov	r0, r3
   11b44:	bl	1181c <_start@@Base+0xa5c>
   11b48:	mov	r3, r0
   11b4c:	b	11b54 <_start@@Base+0xd94>
   11b50:	mov	r3, #0
   11b54:	mov	r0, r3
   11b58:	sub	sp, fp, #4
   11b5c:	ldr	fp, [sp]
   11b60:	add	sp, sp, #4
   11b64:	pop	{pc}		; (ldr pc, [sp], #4)
   11b68:	push	{fp}		; (str fp, [sp, #-4]!)
   11b6c:	add	fp, sp, #0
   11b70:	sub	sp, sp, #12
   11b74:	str	r0, [fp, #-8]
   11b78:	ldr	r3, [fp, #-8]
   11b7c:	cmp	r3, #0
   11b80:	beq	11b90 <_start@@Base+0xdd0>
   11b84:	ldr	r3, [fp, #-8]
   11b88:	add	r3, r3, #26
   11b8c:	b	11b94 <_start@@Base+0xdd4>
   11b90:	mov	r3, #0
   11b94:	mov	r0, r3
   11b98:	add	sp, fp, #0
   11b9c:	pop	{fp}		; (ldr fp, [sp], #4)
   11ba0:	bx	lr
   11ba4:	str	fp, [sp, #-8]!
   11ba8:	str	lr, [sp, #4]
   11bac:	add	fp, sp, #4
   11bb0:	sub	sp, sp, #16
   11bb4:	str	r0, [fp, #-16]
   11bb8:	ldr	r3, [pc, #88]	; 11c18 <_start@@Base+0xe58>
   11bbc:	add	r3, pc, r3
   11bc0:	str	r3, [fp, #-8]
   11bc4:	ldr	r3, [fp, #-16]
   11bc8:	cmp	r3, #0
   11bcc:	beq	11c00 <_start@@Base+0xe40>
   11bd0:	ldr	r1, [fp, #-8]
   11bd4:	ldr	r0, [fp, #-16]
   11bd8:	bl	11748 <_start@@Base+0x988>
   11bdc:	mov	r3, r0
   11be0:	cmp	r3, #0
   11be4:	beq	11c00 <_start@@Base+0xe40>
   11be8:	ldr	r0, [fp, #-16]
   11bec:	bl	11318 <_start@@Base+0x558>
   11bf0:	mov	r2, r0
   11bf4:	ldr	r3, [fp, #-16]
   11bf8:	add	r3, r3, r2
   11bfc:	b	11c04 <_start@@Base+0xe44>
   11c00:	mov	r3, #0
   11c04:	mov	r0, r3
   11c08:	sub	sp, fp, #4
   11c0c:	ldr	fp, [sp]
   11c10:	add	sp, sp, #4
   11c14:	pop	{pc}		; (ldr pc, [sp], #4)
   11c18:	andeq	r5, r0, ip, ror lr
   11c1c:	str	fp, [sp, #-8]!
   11c20:	str	lr, [sp, #4]
   11c24:	add	fp, sp, #4
   11c28:	sub	sp, sp, #16
   11c2c:	str	r0, [fp, #-16]
   11c30:	mov	r3, #0
   11c34:	strh	r3, [fp, #-6]
   11c38:	ldr	r3, [fp, #-16]
   11c3c:	cmp	r3, #0
   11c40:	bne	11c64 <_start@@Base+0xea4>
   11c44:	ldr	r3, [pc, #184]	; 11d04 <_start@@Base+0xf44>
   11c48:	add	r3, pc, r3
   11c4c:	mov	r2, #696	; 0x2b8
   11c50:	ldr	r1, [pc, #176]	; 11d08 <_start@@Base+0xf48>
   11c54:	add	r1, pc, r1
   11c58:	ldr	r0, [pc, #172]	; 11d0c <_start@@Base+0xf4c>
   11c5c:	add	r0, pc, r0
   11c60:	bl	10db0 <__assert_fail@plt>
   11c64:	mov	r3, #0
   11c68:	strh	r3, [fp, #-8]
   11c6c:	ldr	r0, [fp, #-16]
   11c70:	bl	11378 <_start@@Base+0x5b8>
   11c74:	mov	r3, r0
   11c78:	rsb	r3, r3, #0
   11c7c:	ldr	r2, [fp, #-16]
   11c80:	add	r3, r2, r3
   11c84:	str	r3, [fp, #-12]
   11c88:	ldr	r0, [fp, #-12]
   11c8c:	bl	113dc <_start@@Base+0x61c>
   11c90:	mov	r3, r0
   11c94:	mov	r2, r3
   11c98:	ldrh	r3, [fp, #-8]
   11c9c:	add	r3, r3, #3
   11ca0:	lsl	r3, r3, #1
   11ca4:	cmp	r2, r3
   11ca8:	bcc	11cd0 <_start@@Base+0xf10>
   11cac:	ldrh	r3, [fp, #-8]
   11cb0:	add	r3, r3, #2
   11cb4:	lsl	r3, r3, #1
   11cb8:	ldr	r2, [fp, #-12]
   11cbc:	add	r3, r2, r3
   11cc0:	mov	r0, r3
   11cc4:	bl	113dc <_start@@Base+0x61c>
   11cc8:	mov	r3, r0
   11ccc:	strh	r3, [fp, #-6]
   11cd0:	ldrh	r3, [fp, #-6]
   11cd4:	cmp	r3, #0
   11cd8:	beq	11cec <_start@@Base+0xf2c>
   11cdc:	ldrh	r3, [fp, #-6]
   11ce0:	ldr	r2, [fp, #-16]
   11ce4:	add	r3, r2, r3
   11ce8:	b	11cf0 <_start@@Base+0xf30>
   11cec:	mov	r3, #0
   11cf0:	mov	r0, r3
   11cf4:	sub	sp, fp, #4
   11cf8:	ldr	fp, [sp]
   11cfc:	add	sp, sp, #4
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	ldrdeq	r6, [r0], -r4
   11d08:	andeq	r5, r0, r8, ror #26
   11d0c:	andeq	r5, r0, r4, ror #27
   11d10:	str	fp, [sp, #-8]!
   11d14:	str	lr, [sp, #4]
   11d18:	add	fp, sp, #4
   11d1c:	sub	sp, sp, #16
   11d20:	str	r0, [fp, #-16]
   11d24:	mov	r3, #0
   11d28:	strh	r3, [fp, #-6]
   11d2c:	ldr	r3, [fp, #-16]
   11d30:	cmp	r3, #0
   11d34:	bne	11d58 <_start@@Base+0xf98>
   11d38:	ldr	r3, [pc, #196]	; 11e04 <_start@@Base+0x1044>
   11d3c:	add	r3, pc, r3
   11d40:	movw	r2, #697	; 0x2b9
   11d44:	ldr	r1, [pc, #188]	; 11e08 <_start@@Base+0x1048>
   11d48:	add	r1, pc, r1
   11d4c:	ldr	r0, [pc, #184]	; 11e0c <_start@@Base+0x104c>
   11d50:	add	r0, pc, r0
   11d54:	bl	10db0 <__assert_fail@plt>
   11d58:	mov	r3, #2
   11d5c:	strh	r3, [fp, #-8]
   11d60:	ldr	r0, [fp, #-16]
   11d64:	bl	11378 <_start@@Base+0x5b8>
   11d68:	mov	r3, r0
   11d6c:	rsb	r3, r3, #0
   11d70:	ldr	r2, [fp, #-16]
   11d74:	add	r3, r2, r3
   11d78:	str	r3, [fp, #-12]
   11d7c:	ldr	r0, [fp, #-12]
   11d80:	bl	113dc <_start@@Base+0x61c>
   11d84:	mov	r3, r0
   11d88:	mov	r2, r3
   11d8c:	ldrh	r3, [fp, #-8]
   11d90:	add	r3, r3, #3
   11d94:	lsl	r3, r3, #1
   11d98:	cmp	r2, r3
   11d9c:	bcc	11dc4 <_start@@Base+0x1004>
   11da0:	ldrh	r3, [fp, #-8]
   11da4:	add	r3, r3, #2
   11da8:	lsl	r3, r3, #1
   11dac:	ldr	r2, [fp, #-12]
   11db0:	add	r3, r2, r3
   11db4:	mov	r0, r3
   11db8:	bl	113dc <_start@@Base+0x61c>
   11dbc:	mov	r3, r0
   11dc0:	strh	r3, [fp, #-6]
   11dc4:	ldrh	r3, [fp, #-6]
   11dc8:	cmp	r3, #0
   11dcc:	beq	11dec <_start@@Base+0x102c>
   11dd0:	ldrh	r3, [fp, #-6]
   11dd4:	ldr	r2, [fp, #-16]
   11dd8:	add	r3, r2, r3
   11ddc:	mov	r0, r3
   11de0:	bl	11100 <_start@@Base+0x340>
   11de4:	mov	r3, r0
   11de8:	b	11df0 <_start@@Base+0x1030>
   11dec:	mov	r3, #100	; 0x64
   11df0:	mov	r0, r3
   11df4:	sub	sp, fp, #4
   11df8:	ldr	fp, [sp]
   11dfc:	add	sp, sp, #4
   11e00:	pop	{pc}		; (ldr pc, [sp], #4)
   11e04:	andeq	r6, r0, r4, asr #7
   11e08:	andeq	r5, r0, r4, ror ip
   11e0c:	strdeq	r5, [r0], -r0
   11e10:	str	fp, [sp, #-8]!
   11e14:	str	lr, [sp, #4]
   11e18:	add	fp, sp, #4
   11e1c:	sub	sp, sp, #24
   11e20:	str	r0, [fp, #-24]	; 0xffffffe8
   11e24:	mov	r3, #0
   11e28:	strh	r3, [fp, #-6]
   11e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e30:	cmp	r3, #0
   11e34:	bne	11e58 <_start@@Base+0x1098>
   11e38:	ldr	r3, [pc, #240]	; 11f30 <_start@@Base+0x1170>
   11e3c:	add	r3, pc, r3
   11e40:	movw	r2, #699	; 0x2bb
   11e44:	ldr	r1, [pc, #232]	; 11f34 <_start@@Base+0x1174>
   11e48:	add	r1, pc, r1
   11e4c:	ldr	r0, [pc, #228]	; 11f38 <_start@@Base+0x1178>
   11e50:	add	r0, pc, r0
   11e54:	bl	10db0 <__assert_fail@plt>
   11e58:	mov	r3, #3
   11e5c:	strh	r3, [fp, #-8]
   11e60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e64:	bl	11378 <_start@@Base+0x5b8>
   11e68:	mov	r3, r0
   11e6c:	rsb	r3, r3, #0
   11e70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e74:	add	r3, r2, r3
   11e78:	str	r3, [fp, #-12]
   11e7c:	ldr	r0, [fp, #-12]
   11e80:	bl	113dc <_start@@Base+0x61c>
   11e84:	mov	r3, r0
   11e88:	mov	r2, r3
   11e8c:	ldrh	r3, [fp, #-8]
   11e90:	add	r3, r3, #3
   11e94:	lsl	r3, r3, #1
   11e98:	cmp	r2, r3
   11e9c:	bcc	11ec4 <_start@@Base+0x1104>
   11ea0:	ldrh	r3, [fp, #-8]
   11ea4:	add	r3, r3, #2
   11ea8:	lsl	r3, r3, #1
   11eac:	ldr	r2, [fp, #-12]
   11eb0:	add	r3, r2, r3
   11eb4:	mov	r0, r3
   11eb8:	bl	113dc <_start@@Base+0x61c>
   11ebc:	mov	r3, r0
   11ec0:	strh	r3, [fp, #-6]
   11ec4:	ldrh	r3, [fp, #-6]
   11ec8:	cmp	r3, #0
   11ecc:	beq	11efc <_start@@Base+0x113c>
   11ed0:	ldrh	r3, [fp, #-6]
   11ed4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ed8:	add	r3, r2, r3
   11edc:	str	r3, [fp, #-16]
   11ee0:	ldr	r0, [fp, #-16]
   11ee4:	bl	11318 <_start@@Base+0x558>
   11ee8:	mov	r3, r0
   11eec:	add	r3, r3, #4
   11ef0:	ldr	r2, [fp, #-16]
   11ef4:	add	r3, r2, r3
   11ef8:	b	11f1c <_start@@Base+0x115c>
   11efc:	ldr	r3, [pc, #56]	; 11f3c <_start@@Base+0x117c>
   11f00:	add	r3, pc, r3
   11f04:	movw	r2, #699	; 0x2bb
   11f08:	ldr	r1, [pc, #48]	; 11f40 <_start@@Base+0x1180>
   11f0c:	add	r1, pc, r1
   11f10:	ldr	r0, [pc, #44]	; 11f44 <_start@@Base+0x1184>
   11f14:	add	r0, pc, r0
   11f18:	bl	10db0 <__assert_fail@plt>
   11f1c:	mov	r0, r3
   11f20:	sub	sp, fp, #4
   11f24:	ldr	fp, [sp]
   11f28:	add	sp, sp, #4
   11f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f30:	andeq	r6, r0, r4, asr #7
   11f34:	andeq	r5, r0, r4, ror fp
   11f38:	strdeq	r5, [r0], -r0
   11f3c:	andeq	r6, r0, r0, lsl #6
   11f40:			; <UNDEFINED> instruction: 0x00005ab0
   11f44:	andeq	r5, r0, r4, asr fp
   11f48:	str	fp, [sp, #-8]!
   11f4c:	str	lr, [sp, #4]
   11f50:	add	fp, sp, #4
   11f54:	sub	sp, sp, #24
   11f58:	str	r0, [fp, #-24]	; 0xffffffe8
   11f5c:	mov	r3, #0
   11f60:	strh	r3, [fp, #-6]
   11f64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f68:	cmp	r3, #0
   11f6c:	bne	11f90 <_start@@Base+0x11d0>
   11f70:	ldr	r3, [pc, #212]	; 1204c <_start@@Base+0x128c>
   11f74:	add	r3, pc, r3
   11f78:	movw	r2, #706	; 0x2c2
   11f7c:	ldr	r1, [pc, #204]	; 12050 <_start@@Base+0x1290>
   11f80:	add	r1, pc, r1
   11f84:	ldr	r0, [pc, #200]	; 12054 <_start@@Base+0x1294>
   11f88:	add	r0, pc, r0
   11f8c:	bl	10db0 <__assert_fail@plt>
   11f90:	mov	r3, #5
   11f94:	strh	r3, [fp, #-8]
   11f98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f9c:	bl	11378 <_start@@Base+0x5b8>
   11fa0:	mov	r3, r0
   11fa4:	rsb	r3, r3, #0
   11fa8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11fac:	add	r3, r2, r3
   11fb0:	str	r3, [fp, #-12]
   11fb4:	ldr	r0, [fp, #-12]
   11fb8:	bl	113dc <_start@@Base+0x61c>
   11fbc:	mov	r3, r0
   11fc0:	mov	r2, r3
   11fc4:	ldrh	r3, [fp, #-8]
   11fc8:	add	r3, r3, #3
   11fcc:	lsl	r3, r3, #1
   11fd0:	cmp	r2, r3
   11fd4:	bcc	11ffc <_start@@Base+0x123c>
   11fd8:	ldrh	r3, [fp, #-8]
   11fdc:	add	r3, r3, #2
   11fe0:	lsl	r3, r3, #1
   11fe4:	ldr	r2, [fp, #-12]
   11fe8:	add	r3, r2, r3
   11fec:	mov	r0, r3
   11ff0:	bl	113dc <_start@@Base+0x61c>
   11ff4:	mov	r3, r0
   11ff8:	strh	r3, [fp, #-6]
   11ffc:	ldrh	r3, [fp, #-6]
   12000:	cmp	r3, #0
   12004:	beq	12034 <_start@@Base+0x1274>
   12008:	ldrh	r3, [fp, #-6]
   1200c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12010:	add	r3, r2, r3
   12014:	str	r3, [fp, #-16]
   12018:	ldr	r0, [fp, #-16]
   1201c:	bl	11318 <_start@@Base+0x558>
   12020:	mov	r3, r0
   12024:	add	r3, r3, #4
   12028:	ldr	r2, [fp, #-16]
   1202c:	add	r3, r2, r3
   12030:	b	12038 <_start@@Base+0x1278>
   12034:	mov	r3, #0
   12038:	mov	r0, r3
   1203c:	sub	sp, fp, #4
   12040:	ldr	fp, [sp]
   12044:	add	sp, sp, #4
   12048:	pop	{pc}		; (ldr pc, [sp], #4)
   1204c:	andeq	r6, r0, r4, asr #3
   12050:	andeq	r5, r0, ip, lsr sl
   12054:			; <UNDEFINED> instruction: 0x00005ab8
   12058:	str	fp, [sp, #-8]!
   1205c:	str	lr, [sp, #4]
   12060:	add	fp, sp, #4
   12064:	sub	sp, sp, #24
   12068:	str	r0, [fp, #-24]	; 0xffffffe8
   1206c:	mov	r3, #0
   12070:	strh	r3, [fp, #-6]
   12074:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12078:	cmp	r3, #0
   1207c:	bne	120a0 <_start@@Base+0x12e0>
   12080:	ldr	r3, [pc, #212]	; 1215c <_start@@Base+0x139c>
   12084:	add	r3, pc, r3
   12088:	mov	r2, #712	; 0x2c8
   1208c:	ldr	r1, [pc, #204]	; 12160 <_start@@Base+0x13a0>
   12090:	add	r1, pc, r1
   12094:	ldr	r0, [pc, #200]	; 12164 <_start@@Base+0x13a4>
   12098:	add	r0, pc, r0
   1209c:	bl	10db0 <__assert_fail@plt>
   120a0:	mov	r3, #10
   120a4:	strh	r3, [fp, #-8]
   120a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120ac:	bl	11378 <_start@@Base+0x5b8>
   120b0:	mov	r3, r0
   120b4:	rsb	r3, r3, #0
   120b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120bc:	add	r3, r2, r3
   120c0:	str	r3, [fp, #-12]
   120c4:	ldr	r0, [fp, #-12]
   120c8:	bl	113dc <_start@@Base+0x61c>
   120cc:	mov	r3, r0
   120d0:	mov	r2, r3
   120d4:	ldrh	r3, [fp, #-8]
   120d8:	add	r3, r3, #3
   120dc:	lsl	r3, r3, #1
   120e0:	cmp	r2, r3
   120e4:	bcc	1210c <_start@@Base+0x134c>
   120e8:	ldrh	r3, [fp, #-8]
   120ec:	add	r3, r3, #2
   120f0:	lsl	r3, r3, #1
   120f4:	ldr	r2, [fp, #-12]
   120f8:	add	r3, r2, r3
   120fc:	mov	r0, r3
   12100:	bl	113dc <_start@@Base+0x61c>
   12104:	mov	r3, r0
   12108:	strh	r3, [fp, #-6]
   1210c:	ldrh	r3, [fp, #-6]
   12110:	cmp	r3, #0
   12114:	beq	12144 <_start@@Base+0x1384>
   12118:	ldrh	r3, [fp, #-6]
   1211c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12120:	add	r3, r2, r3
   12124:	str	r3, [fp, #-16]
   12128:	ldr	r0, [fp, #-16]
   1212c:	bl	11318 <_start@@Base+0x558>
   12130:	mov	r3, r0
   12134:	add	r3, r3, #4
   12138:	ldr	r2, [fp, #-16]
   1213c:	add	r3, r2, r3
   12140:	b	12148 <_start@@Base+0x1388>
   12144:	mov	r3, #0
   12148:	mov	r0, r3
   1214c:	sub	sp, fp, #4
   12150:	ldr	fp, [sp]
   12154:	add	sp, sp, #4
   12158:	pop	{pc}		; (ldr pc, [sp], #4)
   1215c:	strdeq	r6, [r0], -r4
   12160:	andeq	r5, r0, ip, lsr #18
   12164:	andeq	r5, r0, r8, lsr #19
   12168:	str	fp, [sp, #-8]!
   1216c:	str	lr, [sp, #4]
   12170:	add	fp, sp, #4
   12174:	sub	sp, sp, #16
   12178:	str	r0, [fp, #-16]
   1217c:	mov	r3, #0
   12180:	strh	r3, [fp, #-6]
   12184:	ldr	r3, [fp, #-16]
   12188:	cmp	r3, #0
   1218c:	bne	121b0 <_start@@Base+0x13f0>
   12190:	ldr	r3, [pc, #196]	; 1225c <_start@@Base+0x149c>
   12194:	add	r3, pc, r3
   12198:	movw	r2, #717	; 0x2cd
   1219c:	ldr	r1, [pc, #188]	; 12260 <_start@@Base+0x14a0>
   121a0:	add	r1, pc, r1
   121a4:	ldr	r0, [pc, #184]	; 12264 <_start@@Base+0x14a4>
   121a8:	add	r0, pc, r0
   121ac:	bl	10db0 <__assert_fail@plt>
   121b0:	mov	r3, #7
   121b4:	strh	r3, [fp, #-8]
   121b8:	ldr	r0, [fp, #-16]
   121bc:	bl	11378 <_start@@Base+0x5b8>
   121c0:	mov	r3, r0
   121c4:	rsb	r3, r3, #0
   121c8:	ldr	r2, [fp, #-16]
   121cc:	add	r3, r2, r3
   121d0:	str	r3, [fp, #-12]
   121d4:	ldr	r0, [fp, #-12]
   121d8:	bl	113dc <_start@@Base+0x61c>
   121dc:	mov	r3, r0
   121e0:	mov	r2, r3
   121e4:	ldrh	r3, [fp, #-8]
   121e8:	add	r3, r3, #3
   121ec:	lsl	r3, r3, #1
   121f0:	cmp	r2, r3
   121f4:	bcc	1221c <_start@@Base+0x145c>
   121f8:	ldrh	r3, [fp, #-8]
   121fc:	add	r3, r3, #2
   12200:	lsl	r3, r3, #1
   12204:	ldr	r2, [fp, #-12]
   12208:	add	r3, r2, r3
   1220c:	mov	r0, r3
   12210:	bl	113dc <_start@@Base+0x61c>
   12214:	mov	r3, r0
   12218:	strh	r3, [fp, #-6]
   1221c:	ldrh	r3, [fp, #-6]
   12220:	cmp	r3, #0
   12224:	beq	12244 <_start@@Base+0x1484>
   12228:	ldrh	r3, [fp, #-6]
   1222c:	ldr	r2, [fp, #-16]
   12230:	add	r3, r2, r3
   12234:	mov	r0, r3
   12238:	bl	11440 <_start@@Base+0x680>
   1223c:	mov	r3, r0
   12240:	b	12248 <_start@@Base+0x1488>
   12244:	mov	r3, #0
   12248:	mov	r0, r3
   1224c:	sub	sp, fp, #4
   12250:	ldr	fp, [sp]
   12254:	add	sp, sp, #4
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	andeq	r6, r0, ip, lsr #32
   12260:	andeq	r5, r0, ip, lsl r8
   12264:	muleq	r0, r8, r8
   12268:	str	fp, [sp, #-8]!
   1226c:	str	lr, [sp, #4]
   12270:	add	fp, sp, #4
   12274:	sub	sp, sp, #24
   12278:	str	r0, [fp, #-24]	; 0xffffffe8
   1227c:	mov	r3, #0
   12280:	strh	r3, [fp, #-6]
   12284:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12288:	cmp	r3, #0
   1228c:	bne	122b0 <_start@@Base+0x14f0>
   12290:	ldr	r3, [pc, #208]	; 12368 <_start@@Base+0x15a8>
   12294:	add	r3, pc, r3
   12298:	movw	r2, #717	; 0x2cd
   1229c:	ldr	r1, [pc, #200]	; 1236c <_start@@Base+0x15ac>
   122a0:	add	r1, pc, r1
   122a4:	ldr	r0, [pc, #196]	; 12370 <_start@@Base+0x15b0>
   122a8:	add	r0, pc, r0
   122ac:	bl	10db0 <__assert_fail@plt>
   122b0:	mov	r3, #8
   122b4:	strh	r3, [fp, #-8]
   122b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   122bc:	bl	11378 <_start@@Base+0x5b8>
   122c0:	mov	r3, r0
   122c4:	rsb	r3, r3, #0
   122c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   122cc:	add	r3, r2, r3
   122d0:	str	r3, [fp, #-12]
   122d4:	ldr	r0, [fp, #-12]
   122d8:	bl	113dc <_start@@Base+0x61c>
   122dc:	mov	r3, r0
   122e0:	mov	r2, r3
   122e4:	ldrh	r3, [fp, #-8]
   122e8:	add	r3, r3, #3
   122ec:	lsl	r3, r3, #1
   122f0:	cmp	r2, r3
   122f4:	bcc	1231c <_start@@Base+0x155c>
   122f8:	ldrh	r3, [fp, #-8]
   122fc:	add	r3, r3, #2
   12300:	lsl	r3, r3, #1
   12304:	ldr	r2, [fp, #-12]
   12308:	add	r3, r2, r3
   1230c:	mov	r0, r3
   12310:	bl	113dc <_start@@Base+0x61c>
   12314:	mov	r3, r0
   12318:	strh	r3, [fp, #-6]
   1231c:	ldrh	r3, [fp, #-6]
   12320:	cmp	r3, #0
   12324:	beq	12350 <_start@@Base+0x1590>
   12328:	ldrh	r3, [fp, #-6]
   1232c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12330:	add	r3, r2, r3
   12334:	str	r3, [fp, #-16]
   12338:	ldr	r0, [fp, #-16]
   1233c:	bl	11318 <_start@@Base+0x558>
   12340:	mov	r2, r0
   12344:	ldr	r3, [fp, #-16]
   12348:	add	r3, r3, r2
   1234c:	b	12354 <_start@@Base+0x1594>
   12350:	mov	r3, #0
   12354:	mov	r0, r3
   12358:	sub	sp, fp, #4
   1235c:	ldr	fp, [sp]
   12360:	add	sp, sp, #4
   12364:	pop	{pc}		; (ldr pc, [sp], #4)
   12368:	andeq	r5, r0, r0, asr pc
   1236c:	andeq	r5, r0, ip, lsl r7
   12370:	muleq	r0, r8, r7
   12374:	str	fp, [sp, #-8]!
   12378:	str	lr, [sp, #4]
   1237c:	add	fp, sp, #4
   12380:	sub	sp, sp, #24
   12384:	str	r0, [fp, #-24]	; 0xffffffe8
   12388:	mov	r3, #0
   1238c:	strh	r3, [fp, #-6]
   12390:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12394:	cmp	r3, #0
   12398:	bne	123bc <_start@@Base+0x15fc>
   1239c:	ldr	r3, [pc, #212]	; 12478 <_start@@Base+0x16b8>
   123a0:	add	r3, pc, r3
   123a4:	movw	r2, #718	; 0x2ce
   123a8:	ldr	r1, [pc, #204]	; 1247c <_start@@Base+0x16bc>
   123ac:	add	r1, pc, r1
   123b0:	ldr	r0, [pc, #200]	; 12480 <_start@@Base+0x16c0>
   123b4:	add	r0, pc, r0
   123b8:	bl	10db0 <__assert_fail@plt>
   123bc:	mov	r3, #9
   123c0:	strh	r3, [fp, #-8]
   123c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   123c8:	bl	11378 <_start@@Base+0x5b8>
   123cc:	mov	r3, r0
   123d0:	rsb	r3, r3, #0
   123d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   123d8:	add	r3, r2, r3
   123dc:	str	r3, [fp, #-12]
   123e0:	ldr	r0, [fp, #-12]
   123e4:	bl	113dc <_start@@Base+0x61c>
   123e8:	mov	r3, r0
   123ec:	mov	r2, r3
   123f0:	ldrh	r3, [fp, #-8]
   123f4:	add	r3, r3, #3
   123f8:	lsl	r3, r3, #1
   123fc:	cmp	r2, r3
   12400:	bcc	12428 <_start@@Base+0x1668>
   12404:	ldrh	r3, [fp, #-8]
   12408:	add	r3, r3, #2
   1240c:	lsl	r3, r3, #1
   12410:	ldr	r2, [fp, #-12]
   12414:	add	r3, r2, r3
   12418:	mov	r0, r3
   1241c:	bl	113dc <_start@@Base+0x61c>
   12420:	mov	r3, r0
   12424:	strh	r3, [fp, #-6]
   12428:	ldrh	r3, [fp, #-6]
   1242c:	cmp	r3, #0
   12430:	beq	12460 <_start@@Base+0x16a0>
   12434:	ldrh	r3, [fp, #-6]
   12438:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1243c:	add	r3, r2, r3
   12440:	str	r3, [fp, #-16]
   12444:	ldr	r0, [fp, #-16]
   12448:	bl	11318 <_start@@Base+0x558>
   1244c:	mov	r3, r0
   12450:	add	r3, r3, #4
   12454:	ldr	r2, [fp, #-16]
   12458:	add	r3, r2, r3
   1245c:	b	12464 <_start@@Base+0x16a4>
   12460:	mov	r3, #0
   12464:	mov	r0, r3
   12468:	sub	sp, fp, #4
   1246c:	ldr	fp, [sp]
   12470:	add	sp, sp, #4
   12474:	pop	{pc}		; (ldr pc, [sp], #4)
   12478:	andeq	r5, r0, ip, ror lr
   1247c:	andeq	r5, r0, r0, lsl r6
   12480:	andeq	r5, r0, ip, lsl #13
   12484:	str	fp, [sp, #-8]!
   12488:	str	lr, [sp, #4]
   1248c:	add	fp, sp, #4
   12490:	sub	sp, sp, #16
   12494:	str	r0, [fp, #-16]
   12498:	mov	r3, #0
   1249c:	strh	r3, [fp, #-6]
   124a0:	ldr	r3, [fp, #-16]
   124a4:	cmp	r3, #0
   124a8:	bne	124cc <_start@@Base+0x170c>
   124ac:	ldr	r3, [pc, #196]	; 12578 <_start@@Base+0x17b8>
   124b0:	add	r3, pc, r3
   124b4:	mov	r2, #724	; 0x2d4
   124b8:	ldr	r1, [pc, #188]	; 1257c <_start@@Base+0x17bc>
   124bc:	add	r1, pc, r1
   124c0:	ldr	r0, [pc, #184]	; 12580 <_start@@Base+0x17c0>
   124c4:	add	r0, pc, r0
   124c8:	bl	10db0 <__assert_fail@plt>
   124cc:	mov	r3, #16
   124d0:	strh	r3, [fp, #-8]
   124d4:	ldr	r0, [fp, #-16]
   124d8:	bl	11378 <_start@@Base+0x5b8>
   124dc:	mov	r3, r0
   124e0:	rsb	r3, r3, #0
   124e4:	ldr	r2, [fp, #-16]
   124e8:	add	r3, r2, r3
   124ec:	str	r3, [fp, #-12]
   124f0:	ldr	r0, [fp, #-12]
   124f4:	bl	113dc <_start@@Base+0x61c>
   124f8:	mov	r3, r0
   124fc:	mov	r2, r3
   12500:	ldrh	r3, [fp, #-8]
   12504:	add	r3, r3, #3
   12508:	lsl	r3, r3, #1
   1250c:	cmp	r2, r3
   12510:	bcc	12538 <_start@@Base+0x1778>
   12514:	ldrh	r3, [fp, #-8]
   12518:	add	r3, r3, #2
   1251c:	lsl	r3, r3, #1
   12520:	ldr	r2, [fp, #-12]
   12524:	add	r3, r2, r3
   12528:	mov	r0, r3
   1252c:	bl	113dc <_start@@Base+0x61c>
   12530:	mov	r3, r0
   12534:	strh	r3, [fp, #-6]
   12538:	ldrh	r3, [fp, #-6]
   1253c:	cmp	r3, #0
   12540:	beq	12560 <_start@@Base+0x17a0>
   12544:	ldrh	r3, [fp, #-6]
   12548:	ldr	r2, [fp, #-16]
   1254c:	add	r3, r2, r3
   12550:	mov	r0, r3
   12554:	bl	11160 <_start@@Base+0x3a0>
   12558:	mov	r3, r0
   1255c:	b	12564 <_start@@Base+0x17a4>
   12560:	mov	r3, #0
   12564:	mov	r0, r3
   12568:	sub	sp, fp, #4
   1256c:	ldr	fp, [sp]
   12570:	add	sp, sp, #4
   12574:	pop	{pc}		; (ldr pc, [sp], #4)
   12578:	andeq	r5, r0, r8, lsr #27
   1257c:	andeq	r5, r0, r0, lsl #10
   12580:	andeq	r5, r0, ip, ror r5
   12584:	str	fp, [sp, #-8]!
   12588:	str	lr, [sp, #4]
   1258c:	add	fp, sp, #4
   12590:	sub	sp, sp, #16
   12594:	str	r0, [fp, #-16]
   12598:	mov	r3, #0
   1259c:	strh	r3, [fp, #-6]
   125a0:	ldr	r3, [fp, #-16]
   125a4:	cmp	r3, #0
   125a8:	bne	125cc <_start@@Base+0x180c>
   125ac:	ldr	r3, [pc, #196]	; 12678 <_start@@Base+0x18b8>
   125b0:	add	r3, pc, r3
   125b4:	movw	r2, #725	; 0x2d5
   125b8:	ldr	r1, [pc, #188]	; 1267c <_start@@Base+0x18bc>
   125bc:	add	r1, pc, r1
   125c0:	ldr	r0, [pc, #184]	; 12680 <_start@@Base+0x18c0>
   125c4:	add	r0, pc, r0
   125c8:	bl	10db0 <__assert_fail@plt>
   125cc:	mov	r3, #17
   125d0:	strh	r3, [fp, #-8]
   125d4:	ldr	r0, [fp, #-16]
   125d8:	bl	11378 <_start@@Base+0x5b8>
   125dc:	mov	r3, r0
   125e0:	rsb	r3, r3, #0
   125e4:	ldr	r2, [fp, #-16]
   125e8:	add	r3, r2, r3
   125ec:	str	r3, [fp, #-12]
   125f0:	ldr	r0, [fp, #-12]
   125f4:	bl	113dc <_start@@Base+0x61c>
   125f8:	mov	r3, r0
   125fc:	mov	r2, r3
   12600:	ldrh	r3, [fp, #-8]
   12604:	add	r3, r3, #3
   12608:	lsl	r3, r3, #1
   1260c:	cmp	r2, r3
   12610:	bcc	12638 <_start@@Base+0x1878>
   12614:	ldrh	r3, [fp, #-8]
   12618:	add	r3, r3, #2
   1261c:	lsl	r3, r3, #1
   12620:	ldr	r2, [fp, #-12]
   12624:	add	r3, r2, r3
   12628:	mov	r0, r3
   1262c:	bl	113dc <_start@@Base+0x61c>
   12630:	mov	r3, r0
   12634:	strh	r3, [fp, #-6]
   12638:	ldrh	r3, [fp, #-6]
   1263c:	cmp	r3, #0
   12640:	beq	12660 <_start@@Base+0x18a0>
   12644:	ldrh	r3, [fp, #-6]
   12648:	ldr	r2, [fp, #-16]
   1264c:	add	r3, r2, r3
   12650:	mov	r0, r3
   12654:	bl	10fc8 <_start@@Base+0x208>
   12658:	mov	r3, r0
   1265c:	b	12664 <_start@@Base+0x18a4>
   12660:	mov	r3, #0
   12664:	mov	r0, r3
   12668:	sub	sp, fp, #4
   1266c:	ldr	fp, [sp]
   12670:	add	sp, sp, #4
   12674:	pop	{pc}		; (ldr pc, [sp], #4)
   12678:	ldrdeq	r5, [r0], -r0
   1267c:	andeq	r5, r0, r0, lsl #8
   12680:	andeq	r5, r0, ip, ror r4
   12684:	str	fp, [sp, #-8]!
   12688:	str	lr, [sp, #4]
   1268c:	add	fp, sp, #4
   12690:	sub	sp, sp, #16
   12694:	str	r0, [fp, #-16]
   12698:	mov	r3, #0
   1269c:	strh	r3, [fp, #-6]
   126a0:	ldr	r3, [fp, #-16]
   126a4:	cmp	r3, #0
   126a8:	bne	126cc <_start@@Base+0x190c>
   126ac:	ldr	r3, [pc, #208]	; 12784 <_start@@Base+0x19c4>
   126b0:	add	r3, pc, r3
   126b4:	movw	r2, #726	; 0x2d6
   126b8:	ldr	r1, [pc, #200]	; 12788 <_start@@Base+0x19c8>
   126bc:	add	r1, pc, r1
   126c0:	ldr	r0, [pc, #196]	; 1278c <_start@@Base+0x19cc>
   126c4:	add	r0, pc, r0
   126c8:	bl	10db0 <__assert_fail@plt>
   126cc:	mov	r3, #18
   126d0:	strh	r3, [fp, #-8]
   126d4:	ldr	r0, [fp, #-16]
   126d8:	bl	11378 <_start@@Base+0x5b8>
   126dc:	mov	r3, r0
   126e0:	rsb	r3, r3, #0
   126e4:	ldr	r2, [fp, #-16]
   126e8:	add	r3, r2, r3
   126ec:	str	r3, [fp, #-12]
   126f0:	ldr	r0, [fp, #-12]
   126f4:	bl	113dc <_start@@Base+0x61c>
   126f8:	mov	r3, r0
   126fc:	mov	r2, r3
   12700:	ldrh	r3, [fp, #-8]
   12704:	add	r3, r3, #3
   12708:	lsl	r3, r3, #1
   1270c:	cmp	r2, r3
   12710:	bcc	12738 <_start@@Base+0x1978>
   12714:	ldrh	r3, [fp, #-8]
   12718:	add	r3, r3, #2
   1271c:	lsl	r3, r3, #1
   12720:	ldr	r2, [fp, #-12]
   12724:	add	r3, r2, r3
   12728:	mov	r0, r3
   1272c:	bl	113dc <_start@@Base+0x61c>
   12730:	mov	r3, r0
   12734:	strh	r3, [fp, #-6]
   12738:	ldrh	r3, [fp, #-6]
   1273c:	cmp	r3, #0
   12740:	beq	12764 <_start@@Base+0x19a4>
   12744:	ldrh	r3, [fp, #-6]
   12748:	ldr	r2, [fp, #-16]
   1274c:	add	r3, r2, r3
   12750:	mov	r0, r3
   12754:	bl	111c4 <_start@@Base+0x404>
   12758:	mov	r2, r0
   1275c:	mov	r3, r1
   12760:	b	1276c <_start@@Base+0x19ac>
   12764:	mov	r2, #0
   12768:	mov	r3, #0
   1276c:	mov	r0, r2
   12770:	mov	r1, r3
   12774:	sub	sp, fp, #4
   12778:	ldr	fp, [sp]
   1277c:	add	sp, sp, #4
   12780:	pop	{pc}		; (ldr pc, [sp], #4)
   12784:	strdeq	r5, [r0], -r8
   12788:	andeq	r5, r0, r0, lsl #6
   1278c:	andeq	r5, r0, ip, ror r3
   12790:	str	fp, [sp, #-8]!
   12794:	str	lr, [sp, #4]
   12798:	add	fp, sp, #4
   1279c:	sub	sp, sp, #16
   127a0:	str	r0, [fp, #-16]
   127a4:	mov	r3, #0
   127a8:	strh	r3, [fp, #-6]
   127ac:	ldr	r3, [fp, #-16]
   127b0:	cmp	r3, #0
   127b4:	bne	127d8 <_start@@Base+0x1a18>
   127b8:	ldr	r3, [pc, #208]	; 12890 <_start@@Base+0x1ad0>
   127bc:	add	r3, pc, r3
   127c0:	movw	r2, #727	; 0x2d7
   127c4:	ldr	r1, [pc, #200]	; 12894 <_start@@Base+0x1ad4>
   127c8:	add	r1, pc, r1
   127cc:	ldr	r0, [pc, #196]	; 12898 <_start@@Base+0x1ad8>
   127d0:	add	r0, pc, r0
   127d4:	bl	10db0 <__assert_fail@plt>
   127d8:	mov	r3, #19
   127dc:	strh	r3, [fp, #-8]
   127e0:	ldr	r0, [fp, #-16]
   127e4:	bl	11378 <_start@@Base+0x5b8>
   127e8:	mov	r3, r0
   127ec:	rsb	r3, r3, #0
   127f0:	ldr	r2, [fp, #-16]
   127f4:	add	r3, r2, r3
   127f8:	str	r3, [fp, #-12]
   127fc:	ldr	r0, [fp, #-12]
   12800:	bl	113dc <_start@@Base+0x61c>
   12804:	mov	r3, r0
   12808:	mov	r2, r3
   1280c:	ldrh	r3, [fp, #-8]
   12810:	add	r3, r3, #3
   12814:	lsl	r3, r3, #1
   12818:	cmp	r2, r3
   1281c:	bcc	12844 <_start@@Base+0x1a84>
   12820:	ldrh	r3, [fp, #-8]
   12824:	add	r3, r3, #2
   12828:	lsl	r3, r3, #1
   1282c:	ldr	r2, [fp, #-12]
   12830:	add	r3, r2, r3
   12834:	mov	r0, r3
   12838:	bl	113dc <_start@@Base+0x61c>
   1283c:	mov	r3, r0
   12840:	strh	r3, [fp, #-6]
   12844:	ldrh	r3, [fp, #-6]
   12848:	cmp	r3, #0
   1284c:	beq	12870 <_start@@Base+0x1ab0>
   12850:	ldrh	r3, [fp, #-6]
   12854:	ldr	r2, [fp, #-16]
   12858:	add	r3, r2, r3
   1285c:	mov	r0, r3
   12860:	bl	1102c <_start@@Base+0x26c>
   12864:	mov	r2, r0
   12868:	mov	r3, r1
   1286c:	b	12878 <_start@@Base+0x1ab8>
   12870:	mov	r2, #0
   12874:	mov	r3, #0
   12878:	mov	r0, r2
   1287c:	mov	r1, r3
   12880:	sub	sp, fp, #4
   12884:	ldr	fp, [sp]
   12888:	add	sp, sp, #4
   1288c:	pop	{pc}		; (ldr pc, [sp], #4)
   12890:	andeq	r5, r0, r4, lsl fp
   12894:	strdeq	r5, [r0], -r4
   12898:	andeq	r5, r0, r0, ror r2
   1289c:	str	fp, [sp, #-8]!
   128a0:	str	lr, [sp, #4]
   128a4:	add	fp, sp, #4
   128a8:	sub	sp, sp, #16
   128ac:	str	r0, [fp, #-16]
   128b0:	mov	r3, #0
   128b4:	strh	r3, [fp, #-6]
   128b8:	ldr	r3, [fp, #-16]
   128bc:	cmp	r3, #0
   128c0:	bne	128e4 <_start@@Base+0x1b24>
   128c4:	ldr	r3, [pc, #196]	; 12990 <_start@@Base+0x1bd0>
   128c8:	add	r3, pc, r3
   128cc:	mov	r2, #728	; 0x2d8
   128d0:	ldr	r1, [pc, #188]	; 12994 <_start@@Base+0x1bd4>
   128d4:	add	r1, pc, r1
   128d8:	ldr	r0, [pc, #184]	; 12998 <_start@@Base+0x1bd8>
   128dc:	add	r0, pc, r0
   128e0:	bl	10db0 <__assert_fail@plt>
   128e4:	mov	r3, #20
   128e8:	strh	r3, [fp, #-8]
   128ec:	ldr	r0, [fp, #-16]
   128f0:	bl	11378 <_start@@Base+0x5b8>
   128f4:	mov	r3, r0
   128f8:	rsb	r3, r3, #0
   128fc:	ldr	r2, [fp, #-16]
   12900:	add	r3, r2, r3
   12904:	str	r3, [fp, #-12]
   12908:	ldr	r0, [fp, #-12]
   1290c:	bl	113dc <_start@@Base+0x61c>
   12910:	mov	r3, r0
   12914:	mov	r2, r3
   12918:	ldrh	r3, [fp, #-8]
   1291c:	add	r3, r3, #3
   12920:	lsl	r3, r3, #1
   12924:	cmp	r2, r3
   12928:	bcc	12950 <_start@@Base+0x1b90>
   1292c:	ldrh	r3, [fp, #-8]
   12930:	add	r3, r3, #2
   12934:	lsl	r3, r3, #1
   12938:	ldr	r2, [fp, #-12]
   1293c:	add	r3, r2, r3
   12940:	mov	r0, r3
   12944:	bl	113dc <_start@@Base+0x61c>
   12948:	mov	r3, r0
   1294c:	strh	r3, [fp, #-6]
   12950:	ldrh	r3, [fp, #-6]
   12954:	cmp	r3, #0
   12958:	beq	12978 <_start@@Base+0x1bb8>
   1295c:	ldrh	r3, [fp, #-6]
   12960:	ldr	r2, [fp, #-16]
   12964:	add	r3, r2, r3
   12968:	mov	r0, r3
   1296c:	bl	11160 <_start@@Base+0x3a0>
   12970:	mov	r3, r0
   12974:	b	1297c <_start@@Base+0x1bbc>
   12978:	mov	r3, #0
   1297c:	mov	r0, r3
   12980:	sub	sp, fp, #4
   12984:	ldr	fp, [sp]
   12988:	add	sp, sp, #4
   1298c:	pop	{pc}		; (ldr pc, [sp], #4)
   12990:	andeq	r5, r0, r0, lsr sl
   12994:	andeq	r5, r0, r8, ror #1
   12998:	andeq	r5, r0, r4, ror #2
   1299c:	str	fp, [sp, #-8]!
   129a0:	str	lr, [sp, #4]
   129a4:	add	fp, sp, #4
   129a8:	sub	sp, sp, #16
   129ac:	str	r0, [fp, #-16]
   129b0:	mov	r3, #0
   129b4:	strh	r3, [fp, #-6]
   129b8:	ldr	r3, [fp, #-16]
   129bc:	cmp	r3, #0
   129c0:	bne	129e4 <_start@@Base+0x1c24>
   129c4:	ldr	r3, [pc, #196]	; 12a90 <_start@@Base+0x1cd0>
   129c8:	add	r3, pc, r3
   129cc:	movw	r2, #729	; 0x2d9
   129d0:	ldr	r1, [pc, #188]	; 12a94 <_start@@Base+0x1cd4>
   129d4:	add	r1, pc, r1
   129d8:	ldr	r0, [pc, #184]	; 12a98 <_start@@Base+0x1cd8>
   129dc:	add	r0, pc, r0
   129e0:	bl	10db0 <__assert_fail@plt>
   129e4:	mov	r3, #21
   129e8:	strh	r3, [fp, #-8]
   129ec:	ldr	r0, [fp, #-16]
   129f0:	bl	11378 <_start@@Base+0x5b8>
   129f4:	mov	r3, r0
   129f8:	rsb	r3, r3, #0
   129fc:	ldr	r2, [fp, #-16]
   12a00:	add	r3, r2, r3
   12a04:	str	r3, [fp, #-12]
   12a08:	ldr	r0, [fp, #-12]
   12a0c:	bl	113dc <_start@@Base+0x61c>
   12a10:	mov	r3, r0
   12a14:	mov	r2, r3
   12a18:	ldrh	r3, [fp, #-8]
   12a1c:	add	r3, r3, #3
   12a20:	lsl	r3, r3, #1
   12a24:	cmp	r2, r3
   12a28:	bcc	12a50 <_start@@Base+0x1c90>
   12a2c:	ldrh	r3, [fp, #-8]
   12a30:	add	r3, r3, #2
   12a34:	lsl	r3, r3, #1
   12a38:	ldr	r2, [fp, #-12]
   12a3c:	add	r3, r2, r3
   12a40:	mov	r0, r3
   12a44:	bl	113dc <_start@@Base+0x61c>
   12a48:	mov	r3, r0
   12a4c:	strh	r3, [fp, #-6]
   12a50:	ldrh	r3, [fp, #-6]
   12a54:	cmp	r3, #0
   12a58:	beq	12a78 <_start@@Base+0x1cb8>
   12a5c:	ldrh	r3, [fp, #-6]
   12a60:	ldr	r2, [fp, #-16]
   12a64:	add	r3, r2, r3
   12a68:	mov	r0, r3
   12a6c:	bl	10fc8 <_start@@Base+0x208>
   12a70:	mov	r3, r0
   12a74:	b	12a7c <_start@@Base+0x1cbc>
   12a78:	mov	r3, #0
   12a7c:	mov	r0, r3
   12a80:	sub	sp, fp, #4
   12a84:	ldr	fp, [sp]
   12a88:	add	sp, sp, #4
   12a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a90:	andeq	r5, r0, ip, asr r9
   12a94:	andeq	r4, r0, r8, ror #31
   12a98:	andeq	r5, r0, r4, rrx
   12a9c:	str	fp, [sp, #-8]!
   12aa0:	str	lr, [sp, #4]
   12aa4:	add	fp, sp, #4
   12aa8:	sub	sp, sp, #16
   12aac:	str	r0, [fp, #-16]
   12ab0:	mov	r3, #0
   12ab4:	strh	r3, [fp, #-6]
   12ab8:	ldr	r3, [fp, #-16]
   12abc:	cmp	r3, #0
   12ac0:	bne	12ae4 <_start@@Base+0x1d24>
   12ac4:	ldr	r3, [pc, #208]	; 12b9c <_start@@Base+0x1ddc>
   12ac8:	add	r3, pc, r3
   12acc:	movw	r2, #730	; 0x2da
   12ad0:	ldr	r1, [pc, #200]	; 12ba0 <_start@@Base+0x1de0>
   12ad4:	add	r1, pc, r1
   12ad8:	ldr	r0, [pc, #196]	; 12ba4 <_start@@Base+0x1de4>
   12adc:	add	r0, pc, r0
   12ae0:	bl	10db0 <__assert_fail@plt>
   12ae4:	mov	r3, #22
   12ae8:	strh	r3, [fp, #-8]
   12aec:	ldr	r0, [fp, #-16]
   12af0:	bl	11378 <_start@@Base+0x5b8>
   12af4:	mov	r3, r0
   12af8:	rsb	r3, r3, #0
   12afc:	ldr	r2, [fp, #-16]
   12b00:	add	r3, r2, r3
   12b04:	str	r3, [fp, #-12]
   12b08:	ldr	r0, [fp, #-12]
   12b0c:	bl	113dc <_start@@Base+0x61c>
   12b10:	mov	r3, r0
   12b14:	mov	r2, r3
   12b18:	ldrh	r3, [fp, #-8]
   12b1c:	add	r3, r3, #3
   12b20:	lsl	r3, r3, #1
   12b24:	cmp	r2, r3
   12b28:	bcc	12b50 <_start@@Base+0x1d90>
   12b2c:	ldrh	r3, [fp, #-8]
   12b30:	add	r3, r3, #2
   12b34:	lsl	r3, r3, #1
   12b38:	ldr	r2, [fp, #-12]
   12b3c:	add	r3, r2, r3
   12b40:	mov	r0, r3
   12b44:	bl	113dc <_start@@Base+0x61c>
   12b48:	mov	r3, r0
   12b4c:	strh	r3, [fp, #-6]
   12b50:	ldrh	r3, [fp, #-6]
   12b54:	cmp	r3, #0
   12b58:	beq	12b7c <_start@@Base+0x1dbc>
   12b5c:	ldrh	r3, [fp, #-6]
   12b60:	ldr	r2, [fp, #-16]
   12b64:	add	r3, r2, r3
   12b68:	mov	r0, r3
   12b6c:	bl	111c4 <_start@@Base+0x404>
   12b70:	mov	r2, r0
   12b74:	mov	r3, r1
   12b78:	b	12b84 <_start@@Base+0x1dc4>
   12b7c:	mov	r2, #0
   12b80:	mov	r3, #0
   12b84:	mov	r0, r2
   12b88:	mov	r1, r3
   12b8c:	sub	sp, fp, #4
   12b90:	ldr	fp, [sp]
   12b94:	add	sp, sp, #4
   12b98:	pop	{pc}		; (ldr pc, [sp], #4)
   12b9c:	andeq	r5, r0, r8, lsl #17
   12ba0:	andeq	r4, r0, r8, ror #29
   12ba4:	andeq	r4, r0, r4, ror #30
   12ba8:	str	fp, [sp, #-8]!
   12bac:	str	lr, [sp, #4]
   12bb0:	add	fp, sp, #4
   12bb4:	sub	sp, sp, #16
   12bb8:	str	r0, [fp, #-16]
   12bbc:	mov	r3, #0
   12bc0:	strh	r3, [fp, #-6]
   12bc4:	ldr	r3, [fp, #-16]
   12bc8:	cmp	r3, #0
   12bcc:	bne	12bf0 <_start@@Base+0x1e30>
   12bd0:	ldr	r3, [pc, #208]	; 12ca8 <_start@@Base+0x1ee8>
   12bd4:	add	r3, pc, r3
   12bd8:	movw	r2, #731	; 0x2db
   12bdc:	ldr	r1, [pc, #200]	; 12cac <_start@@Base+0x1eec>
   12be0:	add	r1, pc, r1
   12be4:	ldr	r0, [pc, #196]	; 12cb0 <_start@@Base+0x1ef0>
   12be8:	add	r0, pc, r0
   12bec:	bl	10db0 <__assert_fail@plt>
   12bf0:	mov	r3, #23
   12bf4:	strh	r3, [fp, #-8]
   12bf8:	ldr	r0, [fp, #-16]
   12bfc:	bl	11378 <_start@@Base+0x5b8>
   12c00:	mov	r3, r0
   12c04:	rsb	r3, r3, #0
   12c08:	ldr	r2, [fp, #-16]
   12c0c:	add	r3, r2, r3
   12c10:	str	r3, [fp, #-12]
   12c14:	ldr	r0, [fp, #-12]
   12c18:	bl	113dc <_start@@Base+0x61c>
   12c1c:	mov	r3, r0
   12c20:	mov	r2, r3
   12c24:	ldrh	r3, [fp, #-8]
   12c28:	add	r3, r3, #3
   12c2c:	lsl	r3, r3, #1
   12c30:	cmp	r2, r3
   12c34:	bcc	12c5c <_start@@Base+0x1e9c>
   12c38:	ldrh	r3, [fp, #-8]
   12c3c:	add	r3, r3, #2
   12c40:	lsl	r3, r3, #1
   12c44:	ldr	r2, [fp, #-12]
   12c48:	add	r3, r2, r3
   12c4c:	mov	r0, r3
   12c50:	bl	113dc <_start@@Base+0x61c>
   12c54:	mov	r3, r0
   12c58:	strh	r3, [fp, #-6]
   12c5c:	ldrh	r3, [fp, #-6]
   12c60:	cmp	r3, #0
   12c64:	beq	12c88 <_start@@Base+0x1ec8>
   12c68:	ldrh	r3, [fp, #-6]
   12c6c:	ldr	r2, [fp, #-16]
   12c70:	add	r3, r2, r3
   12c74:	mov	r0, r3
   12c78:	bl	1102c <_start@@Base+0x26c>
   12c7c:	mov	r2, r0
   12c80:	mov	r3, r1
   12c84:	b	12c90 <_start@@Base+0x1ed0>
   12c88:	mov	r2, #0
   12c8c:	mov	r3, #0
   12c90:	mov	r0, r2
   12c94:	mov	r1, r3
   12c98:	sub	sp, fp, #4
   12c9c:	ldr	fp, [sp]
   12ca0:	add	sp, sp, #4
   12ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca8:	andeq	r5, r0, r8, lsr #15
   12cac:	ldrdeq	r4, [r0], -ip
   12cb0:	andeq	r4, r0, r8, asr lr
   12cb4:	str	fp, [sp, #-8]!
   12cb8:	str	lr, [sp, #4]
   12cbc:	add	fp, sp, #4
   12cc0:	sub	sp, sp, #8
   12cc4:	str	r0, [fp, #-8]
   12cc8:	ldr	r3, [fp, #-8]
   12ccc:	ldrb	r3, [r3, #12]
   12cd0:	cmp	r3, #1
   12cd4:	bne	12cf4 <_start@@Base+0x1f34>
   12cd8:	ldr	r3, [pc, #44]	; 12d0c <_start@@Base+0x1f4c>
   12cdc:	add	r3, pc, r3
   12ce0:	mov	r1, r3
   12ce4:	ldr	r0, [fp, #-8]
   12ce8:	bl	16b94 <flatcc_verify_union_table@@Base>
   12cec:	mov	r3, r0
   12cf0:	b	12cf8 <_start@@Base+0x1f38>
   12cf4:	mov	r3, #0
   12cf8:	mov	r0, r3
   12cfc:	sub	sp, fp, #4
   12d00:	ldr	fp, [sp]
   12d04:	add	sp, sp, #4
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	strdeq	r0, [r0], -ip
   12d10:	str	fp, [sp, #-8]!
   12d14:	str	lr, [sp, #4]
   12d18:	add	fp, sp, #4
   12d1c:	sub	sp, sp, #8
   12d20:	str	r0, [fp, #-8]
   12d24:	ldr	r3, [fp, #-8]
   12d28:	ldrb	r3, [r3, #12]
   12d2c:	sub	r3, r3, #1
   12d30:	cmp	r3, #3
   12d34:	addls	pc, pc, r3, lsl #2
   12d38:	b	12dbc <_start@@Base+0x1ffc>
   12d3c:	b	12d4c <_start@@Base+0x1f8c>
   12d40:	b	12d68 <_start@@Base+0x1fa8>
   12d44:	b	12d84 <_start@@Base+0x1fc4>
   12d48:	b	12da0 <_start@@Base+0x1fe0>
   12d4c:	ldr	r3, [pc, #128]	; 12dd4 <_start@@Base+0x2014>
   12d50:	add	r3, pc, r3
   12d54:	mov	r1, r3
   12d58:	ldr	r0, [fp, #-8]
   12d5c:	bl	16b94 <flatcc_verify_union_table@@Base>
   12d60:	mov	r3, r0
   12d64:	b	12dc0 <_start@@Base+0x2000>
   12d68:	ldr	r3, [pc, #104]	; 12dd8 <_start@@Base+0x2018>
   12d6c:	add	r3, pc, r3
   12d70:	mov	r1, r3
   12d74:	ldr	r0, [fp, #-8]
   12d78:	bl	16b94 <flatcc_verify_union_table@@Base>
   12d7c:	mov	r3, r0
   12d80:	b	12dc0 <_start@@Base+0x2000>
   12d84:	ldr	r3, [pc, #80]	; 12ddc <_start@@Base+0x201c>
   12d88:	add	r3, pc, r3
   12d8c:	mov	r1, r3
   12d90:	ldr	r0, [fp, #-8]
   12d94:	bl	16b94 <flatcc_verify_union_table@@Base>
   12d98:	mov	r3, r0
   12d9c:	b	12dc0 <_start@@Base+0x2000>
   12da0:	ldr	r3, [pc, #56]	; 12de0 <_start@@Base+0x2020>
   12da4:	add	r3, pc, r3
   12da8:	mov	r1, r3
   12dac:	ldr	r0, [fp, #-8]
   12db0:	bl	16b94 <flatcc_verify_union_table@@Base>
   12db4:	mov	r3, r0
   12db8:	b	12dc0 <_start@@Base+0x2000>
   12dbc:	mov	r3, #0
   12dc0:	mov	r0, r3
   12dc4:	sub	sp, fp, #4
   12dc8:	ldr	fp, [sp]
   12dcc:	add	sp, sp, #4
   12dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd4:	andeq	r0, r0, r4, lsr sl
   12dd8:	andeq	r0, r0, r0, lsr r2
   12ddc:	andeq	r0, r0, r4, ror r1
   12de0:			; <UNDEFINED> instruction: 0x000004b4
   12de4:	str	fp, [sp, #-8]!
   12de8:	str	lr, [sp, #4]
   12dec:	add	fp, sp, #4
   12df0:	sub	sp, sp, #8
   12df4:	str	r0, [fp, #-8]
   12df8:	ldr	r3, [fp, #-8]
   12dfc:	ldrb	r3, [r3, #12]
   12e00:	cmp	r3, #9
   12e04:	beq	12e74 <_start@@Base+0x20b4>
   12e08:	cmp	r3, #9
   12e0c:	bgt	12e24 <_start@@Base+0x2064>
   12e10:	cmp	r3, #2
   12e14:	beq	12e40 <_start@@Base+0x2080>
   12e18:	cmp	r3, #8
   12e1c:	beq	12e5c <_start@@Base+0x209c>
   12e20:	b	12ec4 <_start@@Base+0x2104>
   12e24:	cmp	r3, #11
   12e28:	beq	12ea4 <_start@@Base+0x20e4>
   12e2c:	cmp	r3, #11
   12e30:	blt	12e8c <_start@@Base+0x20cc>
   12e34:	cmp	r3, #255	; 0xff
   12e38:	beq	12eb4 <_start@@Base+0x20f4>
   12e3c:	b	12ec4 <_start@@Base+0x2104>
   12e40:	ldr	r3, [pc, #148]	; 12edc <_start@@Base+0x211c>
   12e44:	add	r3, pc, r3
   12e48:	mov	r1, r3
   12e4c:	ldr	r0, [fp, #-8]
   12e50:	bl	16b94 <flatcc_verify_union_table@@Base>
   12e54:	mov	r3, r0
   12e58:	b	12ec8 <_start@@Base+0x2108>
   12e5c:	mov	r2, #2
   12e60:	mov	r1, #2
   12e64:	ldr	r0, [fp, #-8]
   12e68:	bl	16c04 <flatcc_verify_union_struct@@Base>
   12e6c:	mov	r3, r0
   12e70:	b	12ec8 <_start@@Base+0x2108>
   12e74:	mov	r2, #4
   12e78:	mov	r1, #4
   12e7c:	ldr	r0, [fp, #-8]
   12e80:	bl	16c04 <flatcc_verify_union_struct@@Base>
   12e84:	mov	r3, r0
   12e88:	b	12ec8 <_start@@Base+0x2108>
   12e8c:	mov	r2, #4
   12e90:	mov	r1, #4
   12e94:	ldr	r0, [fp, #-8]
   12e98:	bl	16c04 <flatcc_verify_union_struct@@Base>
   12e9c:	mov	r3, r0
   12ea0:	b	12ec8 <_start@@Base+0x2108>
   12ea4:	ldr	r0, [fp, #-8]
   12ea8:	bl	16c64 <flatcc_verify_union_string@@Base>
   12eac:	mov	r3, r0
   12eb0:	b	12ec8 <_start@@Base+0x2108>
   12eb4:	ldr	r0, [fp, #-8]
   12eb8:	bl	16c64 <flatcc_verify_union_string@@Base>
   12ebc:	mov	r3, r0
   12ec0:	b	12ec8 <_start@@Base+0x2108>
   12ec4:	mov	r3, #0
   12ec8:	mov	r0, r3
   12ecc:	sub	sp, fp, #4
   12ed0:	ldr	fp, [sp]
   12ed4:	add	sp, sp, #4
   12ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   12edc:	andeq	r1, r0, r0, lsl #6
   12ee0:	push	{fp}		; (str fp, [sp, #-4]!)
   12ee4:	add	fp, sp, #0
   12ee8:	sub	sp, sp, #12
   12eec:	str	r0, [fp, #-8]
   12ef0:	mov	r3, #0
   12ef4:	mov	r0, r3
   12ef8:	add	sp, fp, #0
   12efc:	pop	{fp}		; (ldr fp, [sp], #4)
   12f00:	bx	lr
   12f04:	push	{fp}		; (str fp, [sp, #-4]!)
   12f08:	add	fp, sp, #0
   12f0c:	sub	sp, sp, #12
   12f10:	str	r0, [fp, #-8]
   12f14:	mov	r3, #0
   12f18:	mov	r0, r3
   12f1c:	add	sp, fp, #0
   12f20:	pop	{fp}		; (ldr fp, [sp], #4)
   12f24:	bx	lr
   12f28:	push	{fp}		; (str fp, [sp, #-4]!)
   12f2c:	add	fp, sp, #0
   12f30:	sub	sp, sp, #12
   12f34:	str	r0, [fp, #-8]
   12f38:	mov	r3, #0
   12f3c:	mov	r0, r3
   12f40:	add	sp, fp, #0
   12f44:	pop	{fp}		; (ldr fp, [sp], #4)
   12f48:	bx	lr
   12f4c:	str	fp, [sp, #-8]!
   12f50:	str	lr, [sp, #4]
   12f54:	add	fp, sp, #4
   12f58:	sub	sp, sp, #16
   12f5c:	str	r0, [fp, #-16]
   12f60:	mov	r3, #1
   12f64:	mov	r2, #0
   12f68:	mov	r1, #0
   12f6c:	ldr	r0, [fp, #-16]
   12f70:	bl	166ec <flatcc_verify_field@@Base>
   12f74:	str	r0, [fp, #-8]
   12f78:	ldr	r3, [fp, #-8]
   12f7c:	cmp	r3, #0
   12f80:	beq	12f8c <_start@@Base+0x21cc>
   12f84:	ldr	r3, [fp, #-8]
   12f88:	b	12f90 <_start@@Base+0x21d0>
   12f8c:	mov	r3, #0
   12f90:	mov	r0, r3
   12f94:	sub	sp, fp, #4
   12f98:	ldr	fp, [sp]
   12f9c:	add	sp, sp, #4
   12fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa4:	str	fp, [sp, #-8]!
   12fa8:	str	lr, [sp, #4]
   12fac:	add	fp, sp, #4
   12fb0:	sub	sp, sp, #16
   12fb4:	str	r0, [fp, #-16]
   12fb8:	mov	r3, #1
   12fbc:	mov	r2, #1
   12fc0:	mov	r1, #0
   12fc4:	ldr	r0, [fp, #-16]
   12fc8:	bl	166ec <flatcc_verify_field@@Base>
   12fcc:	str	r0, [fp, #-8]
   12fd0:	ldr	r3, [fp, #-8]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12fe4 <_start@@Base+0x2224>
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	b	1306c <_start@@Base+0x22ac>
   12fe4:	mov	r3, #1
   12fe8:	mov	r2, #1
   12fec:	mov	r1, #1
   12ff0:	ldr	r0, [fp, #-16]
   12ff4:	bl	166ec <flatcc_verify_field@@Base>
   12ff8:	str	r0, [fp, #-8]
   12ffc:	ldr	r3, [fp, #-8]
   13000:	cmp	r3, #0
   13004:	beq	13010 <_start@@Base+0x2250>
   13008:	ldr	r3, [fp, #-8]
   1300c:	b	1306c <_start@@Base+0x22ac>
   13010:	mov	r3, #1
   13014:	mov	r2, #1
   13018:	mov	r1, #2
   1301c:	ldr	r0, [fp, #-16]
   13020:	bl	166ec <flatcc_verify_field@@Base>
   13024:	str	r0, [fp, #-8]
   13028:	ldr	r3, [fp, #-8]
   1302c:	cmp	r3, #0
   13030:	beq	1303c <_start@@Base+0x227c>
   13034:	ldr	r3, [fp, #-8]
   13038:	b	1306c <_start@@Base+0x22ac>
   1303c:	mov	r3, #1
   13040:	mov	r2, #1
   13044:	mov	r1, #3
   13048:	ldr	r0, [fp, #-16]
   1304c:	bl	166ec <flatcc_verify_field@@Base>
   13050:	str	r0, [fp, #-8]
   13054:	ldr	r3, [fp, #-8]
   13058:	cmp	r3, #0
   1305c:	beq	13068 <_start@@Base+0x22a8>
   13060:	ldr	r3, [fp, #-8]
   13064:	b	1306c <_start@@Base+0x22ac>
   13068:	mov	r3, #0
   1306c:	mov	r0, r3
   13070:	sub	sp, fp, #4
   13074:	ldr	fp, [sp]
   13078:	add	sp, sp, #4
   1307c:	pop	{pc}		; (ldr pc, [sp], #4)
   13080:	str	fp, [sp, #-8]!
   13084:	str	lr, [sp, #4]
   13088:	add	fp, sp, #4
   1308c:	sub	sp, sp, #16
   13090:	str	r0, [fp, #-16]
   13094:	mov	r3, #1
   13098:	mov	r2, #0
   1309c:	mov	r1, #0
   130a0:	ldr	r0, [fp, #-16]
   130a4:	bl	166ec <flatcc_verify_field@@Base>
   130a8:	str	r0, [fp, #-8]
   130ac:	ldr	r3, [fp, #-8]
   130b0:	cmp	r3, #0
   130b4:	beq	130c0 <_start@@Base+0x2300>
   130b8:	ldr	r3, [fp, #-8]
   130bc:	b	131a0 <_start@@Base+0x23e0>
   130c0:	mov	r3, #8
   130c4:	mov	r2, #8
   130c8:	mov	r1, #1
   130cc:	ldr	r0, [fp, #-16]
   130d0:	bl	166ec <flatcc_verify_field@@Base>
   130d4:	str	r0, [fp, #-8]
   130d8:	ldr	r3, [fp, #-8]
   130dc:	cmp	r3, #0
   130e0:	beq	130ec <_start@@Base+0x232c>
   130e4:	ldr	r3, [fp, #-8]
   130e8:	b	131a0 <_start@@Base+0x23e0>
   130ec:	mov	r3, #8
   130f0:	mov	r2, #8
   130f4:	mov	r1, #2
   130f8:	ldr	r0, [fp, #-16]
   130fc:	bl	166ec <flatcc_verify_field@@Base>
   13100:	str	r0, [fp, #-8]
   13104:	ldr	r3, [fp, #-8]
   13108:	cmp	r3, #0
   1310c:	beq	13118 <_start@@Base+0x2358>
   13110:	ldr	r3, [fp, #-8]
   13114:	b	131a0 <_start@@Base+0x23e0>
   13118:	mov	r3, #4
   1311c:	mov	r2, #4
   13120:	mov	r1, #3
   13124:	ldr	r0, [fp, #-16]
   13128:	bl	166ec <flatcc_verify_field@@Base>
   1312c:	str	r0, [fp, #-8]
   13130:	ldr	r3, [fp, #-8]
   13134:	cmp	r3, #0
   13138:	beq	13144 <_start@@Base+0x2384>
   1313c:	ldr	r3, [fp, #-8]
   13140:	b	131a0 <_start@@Base+0x23e0>
   13144:	mov	r3, #8
   13148:	mov	r2, #8
   1314c:	mov	r1, #4
   13150:	ldr	r0, [fp, #-16]
   13154:	bl	166ec <flatcc_verify_field@@Base>
   13158:	str	r0, [fp, #-8]
   1315c:	ldr	r3, [fp, #-8]
   13160:	cmp	r3, #0
   13164:	beq	13170 <_start@@Base+0x23b0>
   13168:	ldr	r3, [fp, #-8]
   1316c:	b	131a0 <_start@@Base+0x23e0>
   13170:	mov	r3, #8
   13174:	mov	r2, #8
   13178:	mov	r1, #5
   1317c:	ldr	r0, [fp, #-16]
   13180:	bl	166ec <flatcc_verify_field@@Base>
   13184:	str	r0, [fp, #-8]
   13188:	ldr	r3, [fp, #-8]
   1318c:	cmp	r3, #0
   13190:	beq	1319c <_start@@Base+0x23dc>
   13194:	ldr	r3, [fp, #-8]
   13198:	b	131a0 <_start@@Base+0x23e0>
   1319c:	mov	r3, #0
   131a0:	mov	r0, r3
   131a4:	sub	sp, fp, #4
   131a8:	ldr	fp, [sp]
   131ac:	add	sp, sp, #4
   131b0:	pop	{pc}		; (ldr pc, [sp], #4)
   131b4:	str	fp, [sp, #-8]!
   131b8:	str	lr, [sp, #4]
   131bc:	add	fp, sp, #4
   131c0:	sub	sp, sp, #16
   131c4:	str	r0, [fp, #-16]
   131c8:	mov	r2, #0
   131cc:	mov	r1, #0
   131d0:	ldr	r0, [fp, #-16]
   131d4:	bl	1677c <flatcc_verify_string_field@@Base>
   131d8:	str	r0, [fp, #-8]
   131dc:	ldr	r3, [fp, #-8]
   131e0:	cmp	r3, #0
   131e4:	beq	131f0 <_start@@Base+0x2430>
   131e8:	ldr	r3, [fp, #-8]
   131ec:	b	1324c <_start@@Base+0x248c>
   131f0:	mov	r3, #8
   131f4:	mov	r2, #8
   131f8:	mov	r1, #1
   131fc:	ldr	r0, [fp, #-16]
   13200:	bl	166ec <flatcc_verify_field@@Base>
   13204:	str	r0, [fp, #-8]
   13208:	ldr	r3, [fp, #-8]
   1320c:	cmp	r3, #0
   13210:	beq	1321c <_start@@Base+0x245c>
   13214:	ldr	r3, [fp, #-8]
   13218:	b	1324c <_start@@Base+0x248c>
   1321c:	mov	r3, #2
   13220:	mov	r2, #2
   13224:	mov	r1, #2
   13228:	ldr	r0, [fp, #-16]
   1322c:	bl	166ec <flatcc_verify_field@@Base>
   13230:	str	r0, [fp, #-8]
   13234:	ldr	r3, [fp, #-8]
   13238:	cmp	r3, #0
   1323c:	beq	13248 <_start@@Base+0x2488>
   13240:	ldr	r3, [fp, #-8]
   13244:	b	1324c <_start@@Base+0x248c>
   13248:	mov	r3, #0
   1324c:	mov	r0, r3
   13250:	sub	sp, fp, #4
   13254:	ldr	fp, [sp]
   13258:	add	sp, sp, #4
   1325c:	pop	{pc}		; (ldr pc, [sp], #4)
   13260:	str	fp, [sp, #-8]!
   13264:	str	lr, [sp, #4]
   13268:	add	fp, sp, #4
   1326c:	sub	sp, sp, #16
   13270:	str	r0, [fp, #-16]
   13274:	ldr	r3, [pc, #160]	; 1331c <_start@@Base+0x255c>
   13278:	add	r3, pc, r3
   1327c:	mov	r2, #0
   13280:	mov	r1, #0
   13284:	ldr	r0, [fp, #-16]
   13288:	bl	169dc <flatcc_verify_table_field@@Base>
   1328c:	str	r0, [fp, #-8]
   13290:	ldr	r3, [fp, #-8]
   13294:	cmp	r3, #0
   13298:	beq	132a4 <_start@@Base+0x24e4>
   1329c:	ldr	r3, [fp, #-8]
   132a0:	b	13308 <_start@@Base+0x2548>
   132a4:	ldr	r3, [pc, #116]	; 13320 <_start@@Base+0x2560>
   132a8:	add	r3, pc, r3
   132ac:	mov	r2, #0
   132b0:	mov	r1, #1
   132b4:	ldr	r0, [fp, #-16]
   132b8:	bl	169dc <flatcc_verify_table_field@@Base>
   132bc:	str	r0, [fp, #-8]
   132c0:	ldr	r3, [fp, #-8]
   132c4:	cmp	r3, #0
   132c8:	beq	132d4 <_start@@Base+0x2514>
   132cc:	ldr	r3, [fp, #-8]
   132d0:	b	13308 <_start@@Base+0x2548>
   132d4:	ldr	r3, [pc, #72]	; 13324 <_start@@Base+0x2564>
   132d8:	add	r3, pc, r3
   132dc:	mov	r2, #0
   132e0:	mov	r1, #3
   132e4:	ldr	r0, [fp, #-16]
   132e8:	bl	17654 <flatcc_verify_union_vector_field@@Base>
   132ec:	str	r0, [fp, #-8]
   132f0:	ldr	r3, [fp, #-8]
   132f4:	cmp	r3, #0
   132f8:	beq	13304 <_start@@Base+0x2544>
   132fc:	ldr	r3, [fp, #-8]
   13300:	b	13308 <_start@@Base+0x2548>
   13304:	mov	r3, #0
   13308:	mov	r0, r3
   1330c:	sub	sp, fp, #4
   13310:	ldr	fp, [sp]
   13314:	add	sp, sp, #4
   13318:	pop	{pc}		; (ldr pc, [sp], #4)
   1331c:	andeq	r0, r0, r8, lsr #1
   13320:	strdeq	r0, [r0], -r4
   13324:			; <UNDEFINED> instruction: 0xfffffa30
   13328:	str	fp, [sp, #-8]!
   1332c:	str	lr, [sp, #4]
   13330:	add	fp, sp, #4
   13334:	sub	sp, sp, #16
   13338:	str	r0, [fp, #-16]
   1333c:	ldr	r3, [pc, #160]	; 133e4 <_start@@Base+0x2624>
   13340:	add	r3, pc, r3
   13344:	mov	r2, #0
   13348:	mov	r1, #0
   1334c:	ldr	r0, [fp, #-16]
   13350:	bl	169dc <flatcc_verify_table_field@@Base>
   13354:	str	r0, [fp, #-8]
   13358:	ldr	r3, [fp, #-8]
   1335c:	cmp	r3, #0
   13360:	beq	1336c <_start@@Base+0x25ac>
   13364:	ldr	r3, [fp, #-8]
   13368:	b	133d0 <_start@@Base+0x2610>
   1336c:	ldr	r3, [pc, #116]	; 133e8 <_start@@Base+0x2628>
   13370:	add	r3, pc, r3
   13374:	mov	r2, #0
   13378:	mov	r1, #1
   1337c:	ldr	r0, [fp, #-16]
   13380:	bl	169dc <flatcc_verify_table_field@@Base>
   13384:	str	r0, [fp, #-8]
   13388:	ldr	r3, [fp, #-8]
   1338c:	cmp	r3, #0
   13390:	beq	1339c <_start@@Base+0x25dc>
   13394:	ldr	r3, [fp, #-8]
   13398:	b	133d0 <_start@@Base+0x2610>
   1339c:	ldr	r3, [pc, #72]	; 133ec <_start@@Base+0x262c>
   133a0:	add	r3, pc, r3
   133a4:	mov	r2, #0
   133a8:	mov	r1, #2
   133ac:	ldr	r0, [fp, #-16]
   133b0:	bl	169dc <flatcc_verify_table_field@@Base>
   133b4:	str	r0, [fp, #-8]
   133b8:	ldr	r3, [fp, #-8]
   133bc:	cmp	r3, #0
   133c0:	beq	133cc <_start@@Base+0x260c>
   133c4:	ldr	r3, [fp, #-8]
   133c8:	b	133d0 <_start@@Base+0x2610>
   133cc:	mov	r3, #0
   133d0:	mov	r0, r3
   133d4:	sub	sp, fp, #4
   133d8:	ldr	fp, [sp]
   133dc:	add	sp, sp, #4
   133e0:	pop	{pc}		; (ldr pc, [sp], #4)
   133e4:	andeq	r0, r0, r8, lsr #1
   133e8:	andeq	r0, r0, r4, lsr #4
   133ec:	andeq	r0, r0, r8, ror r2
   133f0:	str	fp, [sp, #-8]!
   133f4:	str	lr, [sp, #4]
   133f8:	add	fp, sp, #4
   133fc:	sub	sp, sp, #16
   13400:	str	r0, [fp, #-16]
   13404:	mov	r2, #0
   13408:	mov	r1, #0
   1340c:	ldr	r0, [fp, #-16]
   13410:	bl	1677c <flatcc_verify_string_field@@Base>
   13414:	str	r0, [fp, #-8]
   13418:	ldr	r3, [fp, #-8]
   1341c:	cmp	r3, #0
   13420:	beq	1342c <_start@@Base+0x266c>
   13424:	ldr	r3, [fp, #-8]
   13428:	b	13588 <_start@@Base+0x27c8>
   1342c:	mov	r3, #4
   13430:	mov	r2, #4
   13434:	mov	r1, #1
   13438:	ldr	r0, [fp, #-16]
   1343c:	bl	166ec <flatcc_verify_field@@Base>
   13440:	str	r0, [fp, #-8]
   13444:	ldr	r3, [fp, #-8]
   13448:	cmp	r3, #0
   1344c:	beq	13458 <_start@@Base+0x2698>
   13450:	ldr	r3, [fp, #-8]
   13454:	b	13588 <_start@@Base+0x27c8>
   13458:	mov	r2, #0
   1345c:	mov	r1, #2
   13460:	ldr	r0, [fp, #-16]
   13464:	bl	1677c <flatcc_verify_string_field@@Base>
   13468:	str	r0, [fp, #-8]
   1346c:	ldr	r3, [fp, #-8]
   13470:	cmp	r3, #0
   13474:	beq	13480 <_start@@Base+0x26c0>
   13478:	ldr	r3, [fp, #-8]
   1347c:	b	13588 <_start@@Base+0x27c8>
   13480:	mov	r3, #8
   13484:	mov	r2, #8
   13488:	mov	r1, #3
   1348c:	ldr	r0, [fp, #-16]
   13490:	bl	166ec <flatcc_verify_field@@Base>
   13494:	str	r0, [fp, #-8]
   13498:	ldr	r3, [fp, #-8]
   1349c:	cmp	r3, #0
   134a0:	beq	134ac <_start@@Base+0x26ec>
   134a4:	ldr	r3, [fp, #-8]
   134a8:	b	13588 <_start@@Base+0x27c8>
   134ac:	mov	r2, #0
   134b0:	mov	r1, #4
   134b4:	ldr	r0, [fp, #-16]
   134b8:	bl	1677c <flatcc_verify_string_field@@Base>
   134bc:	str	r0, [fp, #-8]
   134c0:	ldr	r3, [fp, #-8]
   134c4:	cmp	r3, #0
   134c8:	beq	134d4 <_start@@Base+0x2714>
   134cc:	ldr	r3, [fp, #-8]
   134d0:	b	13588 <_start@@Base+0x27c8>
   134d4:	mov	r3, #8
   134d8:	mov	r2, #8
   134dc:	mov	r1, #5
   134e0:	ldr	r0, [fp, #-16]
   134e4:	bl	166ec <flatcc_verify_field@@Base>
   134e8:	str	r0, [fp, #-8]
   134ec:	ldr	r3, [fp, #-8]
   134f0:	cmp	r3, #0
   134f4:	beq	13500 <_start@@Base+0x2740>
   134f8:	ldr	r3, [fp, #-8]
   134fc:	b	13588 <_start@@Base+0x27c8>
   13500:	mov	r3, #4
   13504:	mov	r2, #4
   13508:	mov	r1, #6
   1350c:	ldr	r0, [fp, #-16]
   13510:	bl	166ec <flatcc_verify_field@@Base>
   13514:	str	r0, [fp, #-8]
   13518:	ldr	r3, [fp, #-8]
   1351c:	cmp	r3, #0
   13520:	beq	1352c <_start@@Base+0x276c>
   13524:	ldr	r3, [fp, #-8]
   13528:	b	13588 <_start@@Base+0x27c8>
   1352c:	mov	r3, #8
   13530:	mov	r2, #8
   13534:	mov	r1, #7
   13538:	ldr	r0, [fp, #-16]
   1353c:	bl	166ec <flatcc_verify_field@@Base>
   13540:	str	r0, [fp, #-8]
   13544:	ldr	r3, [fp, #-8]
   13548:	cmp	r3, #0
   1354c:	beq	13558 <_start@@Base+0x2798>
   13550:	ldr	r3, [fp, #-8]
   13554:	b	13588 <_start@@Base+0x27c8>
   13558:	mov	r3, #4
   1355c:	mov	r2, #4
   13560:	mov	r1, #8
   13564:	ldr	r0, [fp, #-16]
   13568:	bl	166ec <flatcc_verify_field@@Base>
   1356c:	str	r0, [fp, #-8]
   13570:	ldr	r3, [fp, #-8]
   13574:	cmp	r3, #0
   13578:	beq	13584 <_start@@Base+0x27c4>
   1357c:	ldr	r3, [fp, #-8]
   13580:	b	13588 <_start@@Base+0x27c8>
   13584:	mov	r3, #0
   13588:	mov	r0, r3
   1358c:	sub	sp, fp, #4
   13590:	ldr	fp, [sp]
   13594:	add	sp, sp, #4
   13598:	pop	{pc}		; (ldr pc, [sp], #4)
   1359c:	str	fp, [sp, #-8]!
   135a0:	str	lr, [sp, #4]
   135a4:	add	fp, sp, #4
   135a8:	sub	sp, sp, #16
   135ac:	str	r0, [fp, #-16]
   135b0:	mov	r3, #8
   135b4:	mov	r2, #8
   135b8:	mov	r1, #0
   135bc:	ldr	r0, [fp, #-16]
   135c0:	bl	166ec <flatcc_verify_field@@Base>
   135c4:	str	r0, [fp, #-8]
   135c8:	ldr	r3, [fp, #-8]
   135cc:	cmp	r3, #0
   135d0:	beq	135dc <_start@@Base+0x281c>
   135d4:	ldr	r3, [fp, #-8]
   135d8:	b	1360c <_start@@Base+0x284c>
   135dc:	mov	r3, #4
   135e0:	mov	r2, #4
   135e4:	mov	r1, #1
   135e8:	ldr	r0, [fp, #-16]
   135ec:	bl	166ec <flatcc_verify_field@@Base>
   135f0:	str	r0, [fp, #-8]
   135f4:	ldr	r3, [fp, #-8]
   135f8:	cmp	r3, #0
   135fc:	beq	13608 <_start@@Base+0x2848>
   13600:	ldr	r3, [fp, #-8]
   13604:	b	1360c <_start@@Base+0x284c>
   13608:	mov	r3, #0
   1360c:	mov	r0, r3
   13610:	sub	sp, fp, #4
   13614:	ldr	fp, [sp]
   13618:	add	sp, sp, #4
   1361c:	pop	{pc}		; (ldr pc, [sp], #4)
   13620:	str	fp, [sp, #-8]!
   13624:	str	lr, [sp, #4]
   13628:	add	fp, sp, #4
   1362c:	sub	sp, sp, #16
   13630:	str	r0, [fp, #-16]
   13634:	mov	r3, #8
   13638:	mov	r2, #8
   1363c:	mov	r1, #0
   13640:	ldr	r0, [fp, #-16]
   13644:	bl	166ec <flatcc_verify_field@@Base>
   13648:	str	r0, [fp, #-8]
   1364c:	ldr	r3, [fp, #-8]
   13650:	cmp	r3, #0
   13654:	beq	13660 <_start@@Base+0x28a0>
   13658:	ldr	r3, [fp, #-8]
   1365c:	b	13690 <_start@@Base+0x28d0>
   13660:	mov	r3, #4
   13664:	mov	r2, #4
   13668:	mov	r1, #1
   1366c:	ldr	r0, [fp, #-16]
   13670:	bl	166ec <flatcc_verify_field@@Base>
   13674:	str	r0, [fp, #-8]
   13678:	ldr	r3, [fp, #-8]
   1367c:	cmp	r3, #0
   13680:	beq	1368c <_start@@Base+0x28cc>
   13684:	ldr	r3, [fp, #-8]
   13688:	b	13690 <_start@@Base+0x28d0>
   1368c:	mov	r3, #0
   13690:	mov	r0, r3
   13694:	sub	sp, fp, #4
   13698:	ldr	fp, [sp]
   1369c:	add	sp, sp, #4
   136a0:	pop	{pc}		; (ldr pc, [sp], #4)
   136a4:	str	fp, [sp, #-8]!
   136a8:	str	lr, [sp, #4]
   136ac:	add	fp, sp, #4
   136b0:	sub	sp, sp, #24
   136b4:	str	r0, [fp, #-16]
   136b8:	mvn	r3, #0
   136bc:	str	r3, [sp, #4]
   136c0:	mov	r3, #1
   136c4:	str	r3, [sp]
   136c8:	mov	r3, #1
   136cc:	mov	r2, #0
   136d0:	mov	r1, #0
   136d4:	ldr	r0, [fp, #-16]
   136d8:	bl	1683c <flatcc_verify_vector_field@@Base>
   136dc:	str	r0, [fp, #-8]
   136e0:	ldr	r3, [fp, #-8]
   136e4:	cmp	r3, #0
   136e8:	beq	136f4 <_start@@Base+0x2934>
   136ec:	ldr	r3, [fp, #-8]
   136f0:	b	13774 <_start@@Base+0x29b4>
   136f4:	mvn	r3, #0
   136f8:	str	r3, [sp, #4]
   136fc:	mov	r3, #1
   13700:	str	r3, [sp]
   13704:	mov	r3, #1
   13708:	mov	r2, #0
   1370c:	mov	r1, #1
   13710:	ldr	r0, [fp, #-16]
   13714:	bl	1683c <flatcc_verify_vector_field@@Base>
   13718:	str	r0, [fp, #-8]
   1371c:	ldr	r3, [fp, #-8]
   13720:	cmp	r3, #0
   13724:	beq	13730 <_start@@Base+0x2970>
   13728:	ldr	r3, [fp, #-8]
   1372c:	b	13774 <_start@@Base+0x29b4>
   13730:	ldr	r3, [pc, #80]	; 13788 <_start@@Base+0x29c8>
   13734:	add	r3, pc, r3
   13738:	str	r3, [sp, #4]
   1373c:	mov	r3, #1
   13740:	str	r3, [sp]
   13744:	mov	r3, #0
   13748:	mov	r2, #0
   1374c:	mov	r1, #2
   13750:	ldr	r0, [fp, #-16]
   13754:	bl	1727c <flatcc_verify_table_as_nested_root@@Base>
   13758:	str	r0, [fp, #-8]
   1375c:	ldr	r3, [fp, #-8]
   13760:	cmp	r3, #0
   13764:	beq	13770 <_start@@Base+0x29b0>
   13768:	ldr	r3, [fp, #-8]
   1376c:	b	13774 <_start@@Base+0x29b4>
   13770:	mov	r3, #0
   13774:	mov	r0, r3
   13778:	sub	sp, fp, #4
   1377c:	ldr	fp, [sp]
   13780:	add	sp, sp, #4
   13784:	pop	{pc}		; (ldr pc, [sp], #4)
   13788:	andeq	r0, r0, r0, asr r0
   1378c:	str	fp, [sp, #-8]!
   13790:	str	lr, [sp, #4]
   13794:	add	fp, sp, #4
   13798:	sub	sp, sp, #24
   1379c:	str	r0, [fp, #-16]
   137a0:	mov	r3, #16
   137a4:	mov	r2, #32
   137a8:	mov	r1, #0
   137ac:	ldr	r0, [fp, #-16]
   137b0:	bl	166ec <flatcc_verify_field@@Base>
   137b4:	str	r0, [fp, #-8]
   137b8:	ldr	r3, [fp, #-8]
   137bc:	cmp	r3, #0
   137c0:	beq	137cc <_start@@Base+0x2a0c>
   137c4:	ldr	r3, [fp, #-8]
   137c8:	b	13e1c <_start@@Base+0x305c>
   137cc:	mov	r3, #2
   137d0:	mov	r2, #2
   137d4:	mov	r1, #2
   137d8:	ldr	r0, [fp, #-16]
   137dc:	bl	166ec <flatcc_verify_field@@Base>
   137e0:	str	r0, [fp, #-8]
   137e4:	ldr	r3, [fp, #-8]
   137e8:	cmp	r3, #0
   137ec:	beq	137f8 <_start@@Base+0x2a38>
   137f0:	ldr	r3, [fp, #-8]
   137f4:	b	13e1c <_start@@Base+0x305c>
   137f8:	mov	r3, #2
   137fc:	mov	r2, #2
   13800:	mov	r1, #1
   13804:	ldr	r0, [fp, #-16]
   13808:	bl	166ec <flatcc_verify_field@@Base>
   1380c:	str	r0, [fp, #-8]
   13810:	ldr	r3, [fp, #-8]
   13814:	cmp	r3, #0
   13818:	beq	13824 <_start@@Base+0x2a64>
   1381c:	ldr	r3, [fp, #-8]
   13820:	b	13e1c <_start@@Base+0x305c>
   13824:	mov	r2, #1
   13828:	mov	r1, #3
   1382c:	ldr	r0, [fp, #-16]
   13830:	bl	1677c <flatcc_verify_string_field@@Base>
   13834:	str	r0, [fp, #-8]
   13838:	ldr	r3, [fp, #-8]
   1383c:	cmp	r3, #0
   13840:	beq	1384c <_start@@Base+0x2a8c>
   13844:	ldr	r3, [fp, #-8]
   13848:	b	13e1c <_start@@Base+0x305c>
   1384c:	mov	r3, #1
   13850:	mov	r2, #1
   13854:	mov	r1, #6
   13858:	ldr	r0, [fp, #-16]
   1385c:	bl	166ec <flatcc_verify_field@@Base>
   13860:	str	r0, [fp, #-8]
   13864:	ldr	r3, [fp, #-8]
   13868:	cmp	r3, #0
   1386c:	beq	13878 <_start@@Base+0x2ab8>
   13870:	ldr	r3, [fp, #-8]
   13874:	b	13e1c <_start@@Base+0x305c>
   13878:	mvn	r3, #0
   1387c:	str	r3, [sp, #4]
   13880:	mov	r3, #1
   13884:	str	r3, [sp]
   13888:	mov	r3, #1
   1388c:	mov	r2, #0
   13890:	mov	r1, #5
   13894:	ldr	r0, [fp, #-16]
   13898:	bl	1683c <flatcc_verify_vector_field@@Base>
   1389c:	str	r0, [fp, #-8]
   138a0:	ldr	r3, [fp, #-8]
   138a4:	cmp	r3, #0
   138a8:	beq	138b4 <_start@@Base+0x2af4>
   138ac:	ldr	r3, [fp, #-8]
   138b0:	b	13e1c <_start@@Base+0x305c>
   138b4:	ldr	r3, [pc, #1396]	; 13e30 <_start@@Base+0x3070>
   138b8:	add	r3, pc, r3
   138bc:	mov	r2, #0
   138c0:	mov	r1, #11
   138c4:	ldr	r0, [fp, #-16]
   138c8:	bl	16ab8 <flatcc_verify_table_vector_field@@Base>
   138cc:	str	r0, [fp, #-8]
   138d0:	ldr	r3, [fp, #-8]
   138d4:	cmp	r3, #0
   138d8:	beq	138e4 <_start@@Base+0x2b24>
   138dc:	ldr	r3, [fp, #-8]
   138e0:	b	13e1c <_start@@Base+0x305c>
   138e4:	mov	r2, #0
   138e8:	mov	r1, #10
   138ec:	ldr	r0, [fp, #-16]
   138f0:	bl	1691c <flatcc_verify_string_vector_field@@Base>
   138f4:	str	r0, [fp, #-8]
   138f8:	ldr	r3, [fp, #-8]
   138fc:	cmp	r3, #0
   13900:	beq	1390c <_start@@Base+0x2b4c>
   13904:	ldr	r3, [fp, #-8]
   13908:	b	13e1c <_start@@Base+0x305c>
   1390c:	mov	r2, #0
   13910:	mov	r1, #28
   13914:	ldr	r0, [fp, #-16]
   13918:	bl	1691c <flatcc_verify_string_vector_field@@Base>
   1391c:	str	r0, [fp, #-8]
   13920:	ldr	r3, [fp, #-8]
   13924:	cmp	r3, #0
   13928:	beq	13934 <_start@@Base+0x2b74>
   1392c:	ldr	r3, [fp, #-8]
   13930:	b	13e1c <_start@@Base+0x305c>
   13934:	mvn	r3, #0
   13938:	str	r3, [sp, #4]
   1393c:	mov	r3, #1
   13940:	str	r3, [sp]
   13944:	mov	r3, #1
   13948:	mov	r2, #0
   1394c:	mov	r1, #24
   13950:	ldr	r0, [fp, #-16]
   13954:	bl	1683c <flatcc_verify_vector_field@@Base>
   13958:	str	r0, [fp, #-8]
   1395c:	ldr	r3, [fp, #-8]
   13960:	cmp	r3, #0
   13964:	beq	13970 <_start@@Base+0x2bb0>
   13968:	ldr	r3, [fp, #-8]
   1396c:	b	13e1c <_start@@Base+0x305c>
   13970:	mvn	r3, #-536870912	; 0xe0000000
   13974:	str	r3, [sp, #4]
   13978:	mov	r3, #4
   1397c:	str	r3, [sp]
   13980:	mov	r3, #8
   13984:	mov	r2, #0
   13988:	mov	r1, #29
   1398c:	ldr	r0, [fp, #-16]
   13990:	bl	1683c <flatcc_verify_vector_field@@Base>
   13994:	str	r0, [fp, #-8]
   13998:	ldr	r3, [fp, #-8]
   1399c:	cmp	r3, #0
   139a0:	beq	139ac <_start@@Base+0x2bec>
   139a4:	ldr	r3, [fp, #-8]
   139a8:	b	13e1c <_start@@Base+0x305c>
   139ac:	ldr	r3, [pc, #1152]	; 13e34 <_start@@Base+0x3074>
   139b0:	add	r3, pc, r3
   139b4:	mov	r2, #0
   139b8:	mov	r1, #12
   139bc:	ldr	r0, [fp, #-16]
   139c0:	bl	169dc <flatcc_verify_table_field@@Base>
   139c4:	str	r0, [fp, #-8]
   139c8:	ldr	r3, [fp, #-8]
   139cc:	cmp	r3, #0
   139d0:	beq	139dc <_start@@Base+0x2c1c>
   139d4:	ldr	r3, [fp, #-8]
   139d8:	b	13e1c <_start@@Base+0x305c>
   139dc:	ldr	r3, [pc, #1108]	; 13e38 <_start@@Base+0x3078>
   139e0:	add	r3, pc, r3
   139e4:	mov	r2, #0
   139e8:	mov	r1, #8
   139ec:	ldr	r0, [fp, #-16]
   139f0:	bl	173e8 <flatcc_verify_union_field@@Base>
   139f4:	str	r0, [fp, #-8]
   139f8:	ldr	r3, [fp, #-8]
   139fc:	cmp	r3, #0
   13a00:	beq	13a0c <_start@@Base+0x2c4c>
   13a04:	ldr	r3, [fp, #-8]
   13a08:	b	13e1c <_start@@Base+0x305c>
   13a0c:	mvn	r3, #-1073741824	; 0xc0000000
   13a10:	str	r3, [sp, #4]
   13a14:	mov	r3, #2
   13a18:	str	r3, [sp]
   13a1c:	mov	r3, #4
   13a20:	mov	r2, #0
   13a24:	mov	r1, #9
   13a28:	ldr	r0, [fp, #-16]
   13a2c:	bl	1683c <flatcc_verify_vector_field@@Base>
   13a30:	str	r0, [fp, #-8]
   13a34:	ldr	r3, [fp, #-8]
   13a38:	cmp	r3, #0
   13a3c:	beq	13a48 <_start@@Base+0x2c88>
   13a40:	ldr	r3, [fp, #-8]
   13a44:	b	13e1c <_start@@Base+0x305c>
   13a48:	mvn	r3, #-1073741824	; 0xc0000000
   13a4c:	str	r3, [sp, #4]
   13a50:	mov	r3, #2
   13a54:	str	r3, [sp]
   13a58:	mov	r3, #4
   13a5c:	mov	r2, #0
   13a60:	mov	r1, #31
   13a64:	ldr	r0, [fp, #-16]
   13a68:	bl	1683c <flatcc_verify_vector_field@@Base>
   13a6c:	str	r0, [fp, #-8]
   13a70:	ldr	r3, [fp, #-8]
   13a74:	cmp	r3, #0
   13a78:	beq	13a84 <_start@@Base+0x2cc4>
   13a7c:	ldr	r3, [fp, #-8]
   13a80:	b	13e1c <_start@@Base+0x305c>
   13a84:	ldr	r3, [pc, #944]	; 13e3c <_start@@Base+0x307c>
   13a88:	add	r3, pc, r3
   13a8c:	str	r3, [sp, #4]
   13a90:	mov	r3, #1
   13a94:	str	r3, [sp]
   13a98:	mov	r3, #0
   13a9c:	mov	r2, #0
   13aa0:	mov	r1, #13
   13aa4:	ldr	r0, [fp, #-16]
   13aa8:	bl	1727c <flatcc_verify_table_as_nested_root@@Base>
   13aac:	str	r0, [fp, #-8]
   13ab0:	ldr	r3, [fp, #-8]
   13ab4:	cmp	r3, #0
   13ab8:	beq	13ac4 <_start@@Base+0x2d04>
   13abc:	ldr	r3, [fp, #-8]
   13ac0:	b	13e1c <_start@@Base+0x305c>
   13ac4:	ldr	r3, [pc, #884]	; 13e40 <_start@@Base+0x3080>
   13ac8:	add	r3, pc, r3
   13acc:	mov	r2, #0
   13ad0:	mov	r1, #14
   13ad4:	ldr	r0, [fp, #-16]
   13ad8:	bl	169dc <flatcc_verify_table_field@@Base>
   13adc:	str	r0, [fp, #-8]
   13ae0:	ldr	r3, [fp, #-8]
   13ae4:	cmp	r3, #0
   13ae8:	beq	13af4 <_start@@Base+0x2d34>
   13aec:	ldr	r3, [fp, #-8]
   13af0:	b	13e1c <_start@@Base+0x305c>
   13af4:	mov	r3, #1
   13af8:	mov	r2, #1
   13afc:	mov	r1, #15
   13b00:	ldr	r0, [fp, #-16]
   13b04:	bl	166ec <flatcc_verify_field@@Base>
   13b08:	str	r0, [fp, #-8]
   13b0c:	ldr	r3, [fp, #-8]
   13b10:	cmp	r3, #0
   13b14:	beq	13b20 <_start@@Base+0x2d60>
   13b18:	ldr	r3, [fp, #-8]
   13b1c:	b	13e1c <_start@@Base+0x305c>
   13b20:	mov	r3, #4
   13b24:	mov	r2, #4
   13b28:	mov	r1, #16
   13b2c:	ldr	r0, [fp, #-16]
   13b30:	bl	166ec <flatcc_verify_field@@Base>
   13b34:	str	r0, [fp, #-8]
   13b38:	ldr	r3, [fp, #-8]
   13b3c:	cmp	r3, #0
   13b40:	beq	13b4c <_start@@Base+0x2d8c>
   13b44:	ldr	r3, [fp, #-8]
   13b48:	b	13e1c <_start@@Base+0x305c>
   13b4c:	mov	r3, #4
   13b50:	mov	r2, #4
   13b54:	mov	r1, #17
   13b58:	ldr	r0, [fp, #-16]
   13b5c:	bl	166ec <flatcc_verify_field@@Base>
   13b60:	str	r0, [fp, #-8]
   13b64:	ldr	r3, [fp, #-8]
   13b68:	cmp	r3, #0
   13b6c:	beq	13b78 <_start@@Base+0x2db8>
   13b70:	ldr	r3, [fp, #-8]
   13b74:	b	13e1c <_start@@Base+0x305c>
   13b78:	mov	r3, #8
   13b7c:	mov	r2, #8
   13b80:	mov	r1, #18
   13b84:	ldr	r0, [fp, #-16]
   13b88:	bl	166ec <flatcc_verify_field@@Base>
   13b8c:	str	r0, [fp, #-8]
   13b90:	ldr	r3, [fp, #-8]
   13b94:	cmp	r3, #0
   13b98:	beq	13ba4 <_start@@Base+0x2de4>
   13b9c:	ldr	r3, [fp, #-8]
   13ba0:	b	13e1c <_start@@Base+0x305c>
   13ba4:	mov	r3, #8
   13ba8:	mov	r2, #8
   13bac:	mov	r1, #19
   13bb0:	ldr	r0, [fp, #-16]
   13bb4:	bl	166ec <flatcc_verify_field@@Base>
   13bb8:	str	r0, [fp, #-8]
   13bbc:	ldr	r3, [fp, #-8]
   13bc0:	cmp	r3, #0
   13bc4:	beq	13bd0 <_start@@Base+0x2e10>
   13bc8:	ldr	r3, [fp, #-8]
   13bcc:	b	13e1c <_start@@Base+0x305c>
   13bd0:	mov	r3, #4
   13bd4:	mov	r2, #4
   13bd8:	mov	r1, #20
   13bdc:	ldr	r0, [fp, #-16]
   13be0:	bl	166ec <flatcc_verify_field@@Base>
   13be4:	str	r0, [fp, #-8]
   13be8:	ldr	r3, [fp, #-8]
   13bec:	cmp	r3, #0
   13bf0:	beq	13bfc <_start@@Base+0x2e3c>
   13bf4:	ldr	r3, [fp, #-8]
   13bf8:	b	13e1c <_start@@Base+0x305c>
   13bfc:	mov	r3, #4
   13c00:	mov	r2, #4
   13c04:	mov	r1, #21
   13c08:	ldr	r0, [fp, #-16]
   13c0c:	bl	166ec <flatcc_verify_field@@Base>
   13c10:	str	r0, [fp, #-8]
   13c14:	ldr	r3, [fp, #-8]
   13c18:	cmp	r3, #0
   13c1c:	beq	13c28 <_start@@Base+0x2e68>
   13c20:	ldr	r3, [fp, #-8]
   13c24:	b	13e1c <_start@@Base+0x305c>
   13c28:	mov	r3, #8
   13c2c:	mov	r2, #8
   13c30:	mov	r1, #22
   13c34:	ldr	r0, [fp, #-16]
   13c38:	bl	166ec <flatcc_verify_field@@Base>
   13c3c:	str	r0, [fp, #-8]
   13c40:	ldr	r3, [fp, #-8]
   13c44:	cmp	r3, #0
   13c48:	beq	13c54 <_start@@Base+0x2e94>
   13c4c:	ldr	r3, [fp, #-8]
   13c50:	b	13e1c <_start@@Base+0x305c>
   13c54:	mov	r3, #8
   13c58:	mov	r2, #8
   13c5c:	mov	r1, #23
   13c60:	ldr	r0, [fp, #-16]
   13c64:	bl	166ec <flatcc_verify_field@@Base>
   13c68:	str	r0, [fp, #-8]
   13c6c:	ldr	r3, [fp, #-8]
   13c70:	cmp	r3, #0
   13c74:	beq	13c80 <_start@@Base+0x2ec0>
   13c78:	ldr	r3, [fp, #-8]
   13c7c:	b	13e1c <_start@@Base+0x305c>
   13c80:	mov	r3, #4
   13c84:	mov	r2, #4
   13c88:	mov	r1, #25
   13c8c:	ldr	r0, [fp, #-16]
   13c90:	bl	166ec <flatcc_verify_field@@Base>
   13c94:	str	r0, [fp, #-8]
   13c98:	ldr	r3, [fp, #-8]
   13c9c:	cmp	r3, #0
   13ca0:	beq	13cac <_start@@Base+0x2eec>
   13ca4:	ldr	r3, [fp, #-8]
   13ca8:	b	13e1c <_start@@Base+0x305c>
   13cac:	mov	r3, #4
   13cb0:	mov	r2, #4
   13cb4:	mov	r1, #26
   13cb8:	ldr	r0, [fp, #-16]
   13cbc:	bl	166ec <flatcc_verify_field@@Base>
   13cc0:	str	r0, [fp, #-8]
   13cc4:	ldr	r3, [fp, #-8]
   13cc8:	cmp	r3, #0
   13ccc:	beq	13cd8 <_start@@Base+0x2f18>
   13cd0:	ldr	r3, [fp, #-8]
   13cd4:	b	13e1c <_start@@Base+0x305c>
   13cd8:	mov	r3, #4
   13cdc:	mov	r2, #4
   13ce0:	mov	r1, #27
   13ce4:	ldr	r0, [fp, #-16]
   13ce8:	bl	166ec <flatcc_verify_field@@Base>
   13cec:	str	r0, [fp, #-8]
   13cf0:	ldr	r3, [fp, #-8]
   13cf4:	cmp	r3, #0
   13cf8:	beq	13d04 <_start@@Base+0x2f44>
   13cfc:	ldr	r3, [fp, #-8]
   13d00:	b	13e1c <_start@@Base+0x305c>
   13d04:	mvn	r3, #0
   13d08:	str	r3, [sp, #4]
   13d0c:	mov	r3, #1
   13d10:	str	r3, [sp]
   13d14:	mov	r3, #1
   13d18:	mov	r2, #0
   13d1c:	mov	r1, #30
   13d20:	ldr	r0, [fp, #-16]
   13d24:	bl	1683c <flatcc_verify_vector_field@@Base>
   13d28:	str	r0, [fp, #-8]
   13d2c:	ldr	r3, [fp, #-8]
   13d30:	cmp	r3, #0
   13d34:	beq	13d40 <_start@@Base+0x2f80>
   13d38:	ldr	r3, [fp, #-8]
   13d3c:	b	13e1c <_start@@Base+0x305c>
   13d40:	mvn	r3, #-536870912	; 0xe0000000
   13d44:	str	r3, [sp, #4]
   13d48:	mov	r3, #8
   13d4c:	str	r3, [sp]
   13d50:	mov	r3, #8
   13d54:	mov	r2, #0
   13d58:	mov	r1, #32
   13d5c:	ldr	r0, [fp, #-16]
   13d60:	bl	1683c <flatcc_verify_vector_field@@Base>
   13d64:	str	r0, [fp, #-8]
   13d68:	ldr	r3, [fp, #-8]
   13d6c:	cmp	r3, #0
   13d70:	beq	13d7c <_start@@Base+0x2fbc>
   13d74:	ldr	r3, [fp, #-8]
   13d78:	b	13e1c <_start@@Base+0x305c>
   13d7c:	mvn	r3, #-536870912	; 0xe0000000
   13d80:	str	r3, [sp, #4]
   13d84:	mov	r3, #8
   13d88:	str	r3, [sp]
   13d8c:	mov	r3, #8
   13d90:	mov	r2, #0
   13d94:	mov	r1, #33	; 0x21
   13d98:	ldr	r0, [fp, #-16]
   13d9c:	bl	1683c <flatcc_verify_vector_field@@Base>
   13da0:	str	r0, [fp, #-8]
   13da4:	ldr	r3, [fp, #-8]
   13da8:	cmp	r3, #0
   13dac:	beq	13db8 <_start@@Base+0x2ff8>
   13db0:	ldr	r3, [fp, #-8]
   13db4:	b	13e1c <_start@@Base+0x305c>
   13db8:	ldr	r3, [pc, #132]	; 13e44 <_start@@Base+0x3084>
   13dbc:	add	r3, pc, r3
   13dc0:	mov	r2, #0
   13dc4:	mov	r1, #34	; 0x22
   13dc8:	ldr	r0, [fp, #-16]
   13dcc:	bl	169dc <flatcc_verify_table_field@@Base>
   13dd0:	str	r0, [fp, #-8]
   13dd4:	ldr	r3, [fp, #-8]
   13dd8:	cmp	r3, #0
   13ddc:	beq	13de8 <_start@@Base+0x3028>
   13de0:	ldr	r3, [fp, #-8]
   13de4:	b	13e1c <_start@@Base+0x305c>
   13de8:	ldr	r3, [pc, #88]	; 13e48 <_start@@Base+0x3088>
   13dec:	add	r3, pc, r3
   13df0:	mov	r2, #0
   13df4:	mov	r1, #35	; 0x23
   13df8:	ldr	r0, [fp, #-16]
   13dfc:	bl	169dc <flatcc_verify_table_field@@Base>
   13e00:	str	r0, [fp, #-8]
   13e04:	ldr	r3, [fp, #-8]
   13e08:	cmp	r3, #0
   13e0c:	beq	13e18 <_start@@Base+0x3058>
   13e10:	ldr	r3, [fp, #-8]
   13e14:	b	13e1c <_start@@Base+0x305c>
   13e18:	mov	r3, #0
   13e1c:	mov	r0, r3
   13e20:	sub	sp, fp, #4
   13e24:	ldr	fp, [sp]
   13e28:	add	sp, sp, #4
   13e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e30:			; <UNDEFINED> instruction: 0xfffffecc
   13e34:			; <UNDEFINED> instruction: 0xfffffdd4
   13e38:			; <UNDEFINED> instruction: 0xfffff328
   13e3c:			; <UNDEFINED> instruction: 0xfffffcfc
   13e40:			; <UNDEFINED> instruction: 0xfffff6e4
   13e44:			; <UNDEFINED> instruction: 0xfffff11c
   13e48:			; <UNDEFINED> instruction: 0xfffff8b0
   13e4c:	str	fp, [sp, #-8]!
   13e50:	str	lr, [sp, #4]
   13e54:	add	fp, sp, #4
   13e58:	sub	sp, sp, #8
   13e5c:	str	r0, [fp, #-8]
   13e60:	str	r1, [fp, #-12]
   13e64:	ldr	r3, [pc, #44]	; 13e98 <_start@@Base+0x30d8>
   13e68:	add	r3, pc, r3
   13e6c:	ldr	r2, [pc, #40]	; 13e9c <_start@@Base+0x30dc>
   13e70:	add	r2, pc, r2
   13e74:	ldr	r1, [fp, #-12]
   13e78:	ldr	r0, [fp, #-8]
   13e7c:	bl	17020 <flatcc_verify_table_as_root@@Base>
   13e80:	mov	r3, r0
   13e84:	mov	r0, r3
   13e88:	sub	sp, fp, #4
   13e8c:	ldr	fp, [sp]
   13e90:	add	sp, sp, #4
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:			; <UNDEFINED> instruction: 0xfffff91c
   13e9c:	andeq	r3, r0, r8, asr #23
   13ea0:	str	fp, [sp, #-8]!
   13ea4:	str	lr, [sp, #4]
   13ea8:	add	fp, sp, #4
   13eac:	sub	sp, sp, #16
   13eb0:	str	r0, [fp, #-8]
   13eb4:	str	r1, [fp, #-12]
   13eb8:	str	r2, [fp, #-16]
   13ebc:	ldr	r3, [pc, #40]	; 13eec <_start@@Base+0x312c>
   13ec0:	add	r3, pc, r3
   13ec4:	ldr	r2, [fp, #-16]
   13ec8:	ldr	r1, [fp, #-12]
   13ecc:	ldr	r0, [fp, #-8]
   13ed0:	bl	17020 <flatcc_verify_table_as_root@@Base>
   13ed4:	mov	r3, r0
   13ed8:	mov	r0, r3
   13edc:	sub	sp, fp, #4
   13ee0:	ldr	fp, [sp]
   13ee4:	add	sp, sp, #4
   13ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eec:			; <UNDEFINED> instruction: 0xfffff8c4
   13ef0:	str	fp, [sp, #-8]!
   13ef4:	str	lr, [sp, #4]
   13ef8:	add	fp, sp, #4
   13efc:	sub	sp, sp, #24
   13f00:	str	r0, [fp, #-16]
   13f04:	mov	r3, #1
   13f08:	mov	r2, #1
   13f0c:	mov	r1, #0
   13f10:	ldr	r0, [fp, #-16]
   13f14:	bl	166ec <flatcc_verify_field@@Base>
   13f18:	str	r0, [fp, #-8]
   13f1c:	ldr	r3, [fp, #-8]
   13f20:	cmp	r3, #0
   13f24:	beq	13f30 <_start@@Base+0x3170>
   13f28:	ldr	r3, [fp, #-8]
   13f2c:	b	14138 <_start@@Base+0x3378>
   13f30:	mov	r3, #1
   13f34:	mov	r2, #1
   13f38:	mov	r1, #1
   13f3c:	ldr	r0, [fp, #-16]
   13f40:	bl	166ec <flatcc_verify_field@@Base>
   13f44:	str	r0, [fp, #-8]
   13f48:	ldr	r3, [fp, #-8]
   13f4c:	cmp	r3, #0
   13f50:	beq	13f5c <_start@@Base+0x319c>
   13f54:	ldr	r3, [fp, #-8]
   13f58:	b	14138 <_start@@Base+0x3378>
   13f5c:	mov	r3, #2
   13f60:	mov	r2, #2
   13f64:	mov	r1, #2
   13f68:	ldr	r0, [fp, #-16]
   13f6c:	bl	166ec <flatcc_verify_field@@Base>
   13f70:	str	r0, [fp, #-8]
   13f74:	ldr	r3, [fp, #-8]
   13f78:	cmp	r3, #0
   13f7c:	beq	13f88 <_start@@Base+0x31c8>
   13f80:	ldr	r3, [fp, #-8]
   13f84:	b	14138 <_start@@Base+0x3378>
   13f88:	mov	r3, #2
   13f8c:	mov	r2, #2
   13f90:	mov	r1, #3
   13f94:	ldr	r0, [fp, #-16]
   13f98:	bl	166ec <flatcc_verify_field@@Base>
   13f9c:	str	r0, [fp, #-8]
   13fa0:	ldr	r3, [fp, #-8]
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fb4 <_start@@Base+0x31f4>
   13fac:	ldr	r3, [fp, #-8]
   13fb0:	b	14138 <_start@@Base+0x3378>
   13fb4:	mov	r3, #4
   13fb8:	mov	r2, #4
   13fbc:	mov	r1, #4
   13fc0:	ldr	r0, [fp, #-16]
   13fc4:	bl	166ec <flatcc_verify_field@@Base>
   13fc8:	str	r0, [fp, #-8]
   13fcc:	ldr	r3, [fp, #-8]
   13fd0:	cmp	r3, #0
   13fd4:	beq	13fe0 <_start@@Base+0x3220>
   13fd8:	ldr	r3, [fp, #-8]
   13fdc:	b	14138 <_start@@Base+0x3378>
   13fe0:	mov	r3, #4
   13fe4:	mov	r2, #4
   13fe8:	mov	r1, #5
   13fec:	ldr	r0, [fp, #-16]
   13ff0:	bl	166ec <flatcc_verify_field@@Base>
   13ff4:	str	r0, [fp, #-8]
   13ff8:	ldr	r3, [fp, #-8]
   13ffc:	cmp	r3, #0
   14000:	beq	1400c <_start@@Base+0x324c>
   14004:	ldr	r3, [fp, #-8]
   14008:	b	14138 <_start@@Base+0x3378>
   1400c:	mov	r3, #8
   14010:	mov	r2, #8
   14014:	mov	r1, #6
   14018:	ldr	r0, [fp, #-16]
   1401c:	bl	166ec <flatcc_verify_field@@Base>
   14020:	str	r0, [fp, #-8]
   14024:	ldr	r3, [fp, #-8]
   14028:	cmp	r3, #0
   1402c:	beq	14038 <_start@@Base+0x3278>
   14030:	ldr	r3, [fp, #-8]
   14034:	b	14138 <_start@@Base+0x3378>
   14038:	mov	r3, #8
   1403c:	mov	r2, #8
   14040:	mov	r1, #7
   14044:	ldr	r0, [fp, #-16]
   14048:	bl	166ec <flatcc_verify_field@@Base>
   1404c:	str	r0, [fp, #-8]
   14050:	ldr	r3, [fp, #-8]
   14054:	cmp	r3, #0
   14058:	beq	14064 <_start@@Base+0x32a4>
   1405c:	ldr	r3, [fp, #-8]
   14060:	b	14138 <_start@@Base+0x3378>
   14064:	mov	r3, #4
   14068:	mov	r2, #4
   1406c:	mov	r1, #8
   14070:	ldr	r0, [fp, #-16]
   14074:	bl	166ec <flatcc_verify_field@@Base>
   14078:	str	r0, [fp, #-8]
   1407c:	ldr	r3, [fp, #-8]
   14080:	cmp	r3, #0
   14084:	beq	14090 <_start@@Base+0x32d0>
   14088:	ldr	r3, [fp, #-8]
   1408c:	b	14138 <_start@@Base+0x3378>
   14090:	mov	r3, #8
   14094:	mov	r2, #8
   14098:	mov	r1, #9
   1409c:	ldr	r0, [fp, #-16]
   140a0:	bl	166ec <flatcc_verify_field@@Base>
   140a4:	str	r0, [fp, #-8]
   140a8:	ldr	r3, [fp, #-8]
   140ac:	cmp	r3, #0
   140b0:	beq	140bc <_start@@Base+0x32fc>
   140b4:	ldr	r3, [fp, #-8]
   140b8:	b	14138 <_start@@Base+0x3378>
   140bc:	mvn	r3, #0
   140c0:	str	r3, [sp, #4]
   140c4:	mov	r3, #1
   140c8:	str	r3, [sp]
   140cc:	mov	r3, #1
   140d0:	mov	r2, #0
   140d4:	mov	r1, #10
   140d8:	ldr	r0, [fp, #-16]
   140dc:	bl	1683c <flatcc_verify_vector_field@@Base>
   140e0:	str	r0, [fp, #-8]
   140e4:	ldr	r3, [fp, #-8]
   140e8:	cmp	r3, #0
   140ec:	beq	140f8 <_start@@Base+0x3338>
   140f0:	ldr	r3, [fp, #-8]
   140f4:	b	14138 <_start@@Base+0x3378>
   140f8:	mvn	r3, #-536870912	; 0xe0000000
   140fc:	str	r3, [sp, #4]
   14100:	mov	r3, #8
   14104:	str	r3, [sp]
   14108:	mov	r3, #8
   1410c:	mov	r2, #0
   14110:	mov	r1, #11
   14114:	ldr	r0, [fp, #-16]
   14118:	bl	1683c <flatcc_verify_vector_field@@Base>
   1411c:	str	r0, [fp, #-8]
   14120:	ldr	r3, [fp, #-8]
   14124:	cmp	r3, #0
   14128:	beq	14134 <_start@@Base+0x3374>
   1412c:	ldr	r3, [fp, #-8]
   14130:	b	14138 <_start@@Base+0x3378>
   14134:	mov	r3, #0
   14138:	mov	r0, r3
   1413c:	sub	sp, fp, #4
   14140:	ldr	fp, [sp]
   14144:	add	sp, sp, #4
   14148:	pop	{pc}		; (ldr pc, [sp], #4)
   1414c:	str	fp, [sp, #-8]!
   14150:	str	lr, [sp, #4]
   14154:	add	fp, sp, #4
   14158:	sub	sp, sp, #16
   1415c:	str	r0, [fp, #-16]
   14160:	mov	r3, #4
   14164:	mov	r2, #4
   14168:	mov	r1, #0
   1416c:	ldr	r0, [fp, #-16]
   14170:	bl	166ec <flatcc_verify_field@@Base>
   14174:	str	r0, [fp, #-8]
   14178:	ldr	r3, [fp, #-8]
   1417c:	cmp	r3, #0
   14180:	beq	1418c <_start@@Base+0x33cc>
   14184:	ldr	r3, [fp, #-8]
   14188:	b	14190 <_start@@Base+0x33d0>
   1418c:	mov	r3, #0
   14190:	mov	r0, r3
   14194:	sub	sp, fp, #4
   14198:	ldr	fp, [sp]
   1419c:	add	sp, sp, #4
   141a0:	pop	{pc}		; (ldr pc, [sp], #4)
   141a4:	str	fp, [sp, #-8]!
   141a8:	str	lr, [sp, #4]
   141ac:	add	fp, sp, #4
   141b0:	sub	sp, sp, #16
   141b4:	str	r0, [fp, #-16]
   141b8:	ldr	r3, [pc, #256]	; 142c0 <_start@@Base+0x3500>
   141bc:	add	r3, pc, r3
   141c0:	mov	r2, #0
   141c4:	mov	r1, #1
   141c8:	ldr	r0, [fp, #-16]
   141cc:	bl	173e8 <flatcc_verify_union_field@@Base>
   141d0:	str	r0, [fp, #-8]
   141d4:	ldr	r3, [fp, #-8]
   141d8:	cmp	r3, #0
   141dc:	beq	141e8 <_start@@Base+0x3428>
   141e0:	ldr	r3, [fp, #-8]
   141e4:	b	142ac <_start@@Base+0x34ec>
   141e8:	ldr	r3, [pc, #212]	; 142c4 <_start@@Base+0x3504>
   141ec:	add	r3, pc, r3
   141f0:	mov	r2, #0
   141f4:	mov	r1, #3
   141f8:	ldr	r0, [fp, #-16]
   141fc:	bl	173e8 <flatcc_verify_union_field@@Base>
   14200:	str	r0, [fp, #-8]
   14204:	ldr	r3, [fp, #-8]
   14208:	cmp	r3, #0
   1420c:	beq	14218 <_start@@Base+0x3458>
   14210:	ldr	r3, [fp, #-8]
   14214:	b	142ac <_start@@Base+0x34ec>
   14218:	ldr	r3, [pc, #168]	; 142c8 <_start@@Base+0x3508>
   1421c:	add	r3, pc, r3
   14220:	mov	r2, #0
   14224:	mov	r1, #5
   14228:	ldr	r0, [fp, #-16]
   1422c:	bl	173e8 <flatcc_verify_union_field@@Base>
   14230:	str	r0, [fp, #-8]
   14234:	ldr	r3, [fp, #-8]
   14238:	cmp	r3, #0
   1423c:	beq	14248 <_start@@Base+0x3488>
   14240:	ldr	r3, [fp, #-8]
   14244:	b	142ac <_start@@Base+0x34ec>
   14248:	ldr	r3, [pc, #124]	; 142cc <_start@@Base+0x350c>
   1424c:	add	r3, pc, r3
   14250:	mov	r2, #0
   14254:	mov	r1, #7
   14258:	ldr	r0, [fp, #-16]
   1425c:	bl	173e8 <flatcc_verify_union_field@@Base>
   14260:	str	r0, [fp, #-8]
   14264:	ldr	r3, [fp, #-8]
   14268:	cmp	r3, #0
   1426c:	beq	14278 <_start@@Base+0x34b8>
   14270:	ldr	r3, [fp, #-8]
   14274:	b	142ac <_start@@Base+0x34ec>
   14278:	ldr	r3, [pc, #80]	; 142d0 <_start@@Base+0x3510>
   1427c:	add	r3, pc, r3
   14280:	mov	r2, #0
   14284:	mov	r1, #9
   14288:	ldr	r0, [fp, #-16]
   1428c:	bl	17654 <flatcc_verify_union_vector_field@@Base>
   14290:	str	r0, [fp, #-8]
   14294:	ldr	r3, [fp, #-8]
   14298:	cmp	r3, #0
   1429c:	beq	142a8 <_start@@Base+0x34e8>
   142a0:	ldr	r3, [fp, #-8]
   142a4:	b	142ac <_start@@Base+0x34ec>
   142a8:	mov	r3, #0
   142ac:	mov	r0, r3
   142b0:	sub	sp, fp, #4
   142b4:	ldr	fp, [sp]
   142b8:	add	sp, sp, #4
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:			; <UNDEFINED> instruction: 0xffffec20
   142c4:			; <UNDEFINED> instruction: 0xffffebf0
   142c8:			; <UNDEFINED> instruction: 0xffffebc0
   142cc:			; <UNDEFINED> instruction: 0xffffeb90
   142d0:			; <UNDEFINED> instruction: 0xffffeb60
   142d4:	str	fp, [sp, #-8]!
   142d8:	str	lr, [sp, #4]
   142dc:	add	fp, sp, #4
   142e0:	sub	sp, sp, #40	; 0x28
   142e4:	str	r0, [fp, #-32]	; 0xffffffe0
   142e8:	str	r1, [fp, #-36]	; 0xffffffdc
   142ec:	str	r2, [fp, #-40]	; 0xffffffd8
   142f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   142f4:	cmp	r3, #0
   142f8:	bne	14304 <_start@@Base+0x3544>
   142fc:	sub	r3, fp, #28
   14300:	b	14308 <_start@@Base+0x3548>
   14304:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14308:	str	r3, [fp, #-40]	; 0xffffffd8
   1430c:	ldr	r3, [pc, #404]	; 144a8 <_start@@Base+0x36e8>
   14310:	add	r3, pc, r3
   14314:	mov	r1, r3
   14318:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1431c:	bl	10ccc <fopen@plt>
   14320:	str	r0, [fp, #-20]	; 0xffffffec
   14324:	mov	r3, #0
   14328:	str	r3, [fp, #-8]
   1432c:	mov	r3, #0
   14330:	str	r3, [fp, #-16]
   14334:	ldr	r3, [fp, #-20]	; 0xffffffec
   14338:	cmp	r3, #0
   1433c:	beq	14440 <_start@@Base+0x3680>
   14340:	mov	r2, #2
   14344:	mov	r1, #0
   14348:	ldr	r0, [fp, #-20]	; 0xffffffec
   1434c:	bl	10d98 <fseek@plt>
   14350:	ldr	r0, [fp, #-20]	; 0xffffffec
   14354:	bl	10cf0 <ftell@plt>
   14358:	mov	r3, r0
   1435c:	str	r3, [fp, #-8]
   14360:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14364:	ldr	r2, [fp, #-8]
   14368:	str	r2, [r3]
   1436c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14370:	cmp	r3, #0
   14374:	beq	14388 <_start@@Base+0x35c8>
   14378:	ldr	r2, [fp, #-8]
   1437c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14380:	cmp	r2, r3
   14384:	bhi	14448 <_start@@Base+0x3688>
   14388:	ldr	r0, [fp, #-20]	; 0xffffffec
   1438c:	bl	10cfc <rewind@plt>
   14390:	ldr	r3, [fp, #-8]
   14394:	cmp	r3, #0
   14398:	beq	143a4 <_start@@Base+0x35e4>
   1439c:	ldr	r3, [fp, #-8]
   143a0:	b	143a8 <_start@@Base+0x35e8>
   143a4:	mov	r3, #1
   143a8:	mov	r0, r3
   143ac:	bl	10d2c <malloc@plt>
   143b0:	mov	r3, r0
   143b4:	str	r3, [fp, #-16]
   143b8:	ldr	r3, [fp, #-16]
   143bc:	cmp	r3, #0
   143c0:	beq	14450 <_start@@Base+0x3690>
   143c4:	mov	r3, #0
   143c8:	str	r3, [fp, #-12]
   143cc:	b	143e0 <_start@@Base+0x3620>
   143d0:	ldr	r2, [fp, #-12]
   143d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143d8:	add	r3, r2, r3
   143dc:	str	r3, [fp, #-12]
   143e0:	ldr	r2, [fp, #-16]
   143e4:	ldr	r3, [fp, #-12]
   143e8:	add	r0, r2, r3
   143ec:	ldr	r2, [fp, #-8]
   143f0:	ldr	r3, [fp, #-12]
   143f4:	sub	r2, r2, r3
   143f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143fc:	mov	r1, #1
   14400:	bl	10d14 <fread@plt>
   14404:	str	r0, [fp, #-24]	; 0xffffffe8
   14408:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1440c:	cmp	r3, #0
   14410:	bne	143d0 <_start@@Base+0x3610>
   14414:	ldr	r2, [fp, #-12]
   14418:	ldr	r3, [fp, #-8]
   1441c:	cmp	r2, r3
   14420:	bne	14458 <_start@@Base+0x3698>
   14424:	ldr	r0, [fp, #-20]	; 0xffffffec
   14428:	bl	10d80 <fclose@plt>
   1442c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14430:	ldr	r2, [fp, #-8]
   14434:	str	r2, [r3]
   14438:	ldr	r3, [fp, #-16]
   1443c:	b	14494 <_start@@Base+0x36d4>
   14440:	nop	{0}
   14444:	b	1445c <_start@@Base+0x369c>
   14448:	nop	{0}
   1444c:	b	1445c <_start@@Base+0x369c>
   14450:	nop	{0}
   14454:	b	1445c <_start@@Base+0x369c>
   14458:	nop	{0}
   1445c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14460:	cmp	r3, #0
   14464:	beq	14470 <_start@@Base+0x36b0>
   14468:	ldr	r0, [fp, #-20]	; 0xffffffec
   1446c:	bl	10d80 <fclose@plt>
   14470:	ldr	r3, [fp, #-16]
   14474:	cmp	r3, #0
   14478:	beq	14484 <_start@@Base+0x36c4>
   1447c:	ldr	r0, [fp, #-16]
   14480:	bl	10cd8 <free@plt>
   14484:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14488:	ldr	r2, [fp, #-8]
   1448c:	str	r2, [r3]
   14490:	mov	r3, #0
   14494:	mov	r0, r3
   14498:	sub	sp, fp, #4
   1449c:	ldr	fp, [sp]
   144a0:	add	sp, sp, #4
   144a4:	pop	{pc}		; (ldr pc, [sp], #4)
   144a8:	andeq	r3, r0, ip, ror r7
   144ac:	str	fp, [sp, #-8]!
   144b0:	str	lr, [sp, #4]
   144b4:	add	fp, sp, #4
   144b8:	sub	sp, sp, #48	; 0x30
   144bc:	str	r0, [fp, #-40]	; 0xffffffd8
   144c0:	str	r1, [fp, #-44]	; 0xffffffd4
   144c4:	str	r2, [fp, #-48]	; 0xffffffd0
   144c8:	str	r3, [fp, #-52]	; 0xffffffcc
   144cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   144d0:	str	r3, [fp, #-12]
   144d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   144d8:	cmp	r3, #0
   144dc:	beq	144f8 <_start@@Base+0x3738>
   144e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   144e4:	ldr	r3, [pc, #448]	; 146ac <_start@@Base+0x38ec>
   144e8:	add	r3, pc, r3
   144ec:	mov	r1, r3
   144f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   144f4:	bl	10d5c <fprintf@plt>
   144f8:	mov	r3, #0
   144fc:	str	r3, [fp, #-8]
   14500:	b	14634 <_start@@Base+0x3874>
   14504:	ldr	r3, [fp, #-8]
   14508:	and	r3, r3, #15
   1450c:	cmp	r3, #0
   14510:	bne	14558 <_start@@Base+0x3798>
   14514:	ldr	r3, [fp, #-8]
   14518:	cmp	r3, #0
   1451c:	beq	1453c <_start@@Base+0x377c>
   14520:	sub	r3, fp, #32
   14524:	mov	r2, r3
   14528:	ldr	r3, [pc, #384]	; 146b0 <_start@@Base+0x38f0>
   1452c:	add	r3, pc, r3
   14530:	mov	r1, r3
   14534:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14538:	bl	10d5c <fprintf@plt>
   1453c:	ldr	r2, [fp, #-8]
   14540:	ldr	r3, [pc, #364]	; 146b4 <_start@@Base+0x38f4>
   14544:	add	r3, pc, r3
   14548:	mov	r1, r3
   1454c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14550:	bl	10d5c <fprintf@plt>
   14554:	b	14574 <_start@@Base+0x37b4>
   14558:	ldr	r3, [fp, #-8]
   1455c:	and	r3, r3, #7
   14560:	cmp	r3, #0
   14564:	bne	14574 <_start@@Base+0x37b4>
   14568:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1456c:	mov	r0, #32
   14570:	bl	10d8c <fputc@plt>
   14574:	ldr	r2, [fp, #-12]
   14578:	ldr	r3, [fp, #-8]
   1457c:	add	r3, r2, r3
   14580:	ldrb	r3, [r3]
   14584:	mov	r2, r3
   14588:	ldr	r3, [pc, #296]	; 146b8 <_start@@Base+0x38f8>
   1458c:	add	r3, pc, r3
   14590:	mov	r1, r3
   14594:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14598:	bl	10d5c <fprintf@plt>
   1459c:	ldr	r2, [fp, #-12]
   145a0:	ldr	r3, [fp, #-8]
   145a4:	add	r3, r2, r3
   145a8:	ldrb	r3, [r3]
   145ac:	cmp	r3, #31
   145b0:	bls	145cc <_start@@Base+0x380c>
   145b4:	ldr	r2, [fp, #-12]
   145b8:	ldr	r3, [fp, #-8]
   145bc:	add	r3, r2, r3
   145c0:	ldrb	r3, [r3]
   145c4:	cmp	r3, #126	; 0x7e
   145c8:	bls	145e8 <_start@@Base+0x3828>
   145cc:	ldr	r3, [fp, #-8]
   145d0:	and	r3, r3, #15
   145d4:	sub	r2, fp, #4
   145d8:	add	r3, r2, r3
   145dc:	mov	r2, #46	; 0x2e
   145e0:	strb	r2, [r3, #-28]	; 0xffffffe4
   145e4:	b	1460c <_start@@Base+0x384c>
   145e8:	ldr	r2, [fp, #-12]
   145ec:	ldr	r3, [fp, #-8]
   145f0:	add	r2, r2, r3
   145f4:	ldr	r3, [fp, #-8]
   145f8:	and	r3, r3, #15
   145fc:	ldrb	r2, [r2]
   14600:	sub	r1, fp, #4
   14604:	add	r3, r1, r3
   14608:	strb	r2, [r3, #-28]	; 0xffffffe4
   1460c:	ldr	r3, [fp, #-8]
   14610:	and	r3, r3, #15
   14614:	add	r3, r3, #1
   14618:	sub	r2, fp, #4
   1461c:	add	r3, r2, r3
   14620:	mov	r2, #0
   14624:	strb	r2, [r3, #-28]	; 0xffffffe4
   14628:	ldr	r3, [fp, #-8]
   1462c:	add	r3, r3, #1
   14630:	str	r3, [fp, #-8]
   14634:	ldr	r2, [fp, #-8]
   14638:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1463c:	cmp	r2, r3
   14640:	bcc	14504 <_start@@Base+0x3744>
   14644:	b	1466c <_start@@Base+0x38ac>
   14648:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1464c:	mov	r2, #3
   14650:	mov	r1, #1
   14654:	ldr	r0, [pc, #96]	; 146bc <_start@@Base+0x38fc>
   14658:	add	r0, pc, r0
   1465c:	bl	10d08 <fwrite@plt>
   14660:	ldr	r3, [fp, #-8]
   14664:	add	r3, r3, #1
   14668:	str	r3, [fp, #-8]
   1466c:	ldr	r3, [fp, #-8]
   14670:	and	r3, r3, #15
   14674:	cmp	r3, #0
   14678:	bne	14648 <_start@@Base+0x3888>
   1467c:	sub	r3, fp, #32
   14680:	mov	r2, r3
   14684:	ldr	r3, [pc, #52]	; 146c0 <_start@@Base+0x3900>
   14688:	add	r3, pc, r3
   1468c:	mov	r1, r3
   14690:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14694:	bl	10d5c <fprintf@plt>
   14698:	nop	{0}
   1469c:	sub	sp, fp, #4
   146a0:	ldr	fp, [sp]
   146a4:	add	sp, sp, #4
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	andeq	r3, r0, r8, lsr #11
   146b0:	andeq	r3, r0, ip, ror #10
   146b4:	andeq	r3, r0, ip, asr r5
   146b8:	andeq	r3, r0, ip, lsl r5
   146bc:	andeq	r3, r0, r8, asr r4
   146c0:	andeq	r3, r0, r0, lsl r4

000146c4 <verify_monster@@Base>:
   146c4:	str	fp, [sp, #-8]!
   146c8:	str	lr, [sp, #4]
   146cc:	add	fp, sp, #4
   146d0:	sub	sp, sp, #56	; 0x38
   146d4:	str	r0, [fp, #-56]	; 0xffffffc8
   146d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   146dc:	bl	11ba4 <_start@@Base+0xde4>
   146e0:	str	r0, [fp, #-12]
   146e4:	ldr	r3, [fp, #-12]
   146e8:	cmp	r3, #0
   146ec:	bne	14708 <verify_monster@@Base+0x44>
   146f0:	ldr	r3, [pc, #1196]	; 14ba4 <verify_monster@@Base+0x4e0>
   146f4:	add	r3, pc, r3
   146f8:	mov	r0, r3
   146fc:	bl	10d20 <puts@plt>
   14700:	mvn	r3, #0
   14704:	b	14f20 <verify_monster@@Base+0x85c>
   14708:	ldr	r0, [fp, #-12]
   1470c:	bl	11d10 <_start@@Base+0xf50>
   14710:	mov	r3, r0
   14714:	cmp	r3, #80	; 0x50
   14718:	beq	14734 <verify_monster@@Base+0x70>
   1471c:	ldr	r3, [pc, #1156]	; 14ba8 <verify_monster@@Base+0x4e4>
   14720:	add	r3, pc, r3
   14724:	mov	r0, r3
   14728:	bl	10d20 <puts@plt>
   1472c:	mvn	r3, #0
   14730:	b	14f20 <verify_monster@@Base+0x85c>
   14734:	ldr	r0, [fp, #-12]
   14738:	bl	11c1c <_start@@Base+0xe5c>
   1473c:	str	r0, [fp, #-16]
   14740:	ldr	r3, [fp, #-16]
   14744:	cmp	r3, #0
   14748:	bne	14764 <verify_monster@@Base+0xa0>
   1474c:	ldr	r3, [pc, #1112]	; 14bac <verify_monster@@Base+0x4e8>
   14750:	add	r3, pc, r3
   14754:	mov	r0, r3
   14758:	bl	10d20 <puts@plt>
   1475c:	mvn	r3, #0
   14760:	b	14f20 <verify_monster@@Base+0x85c>
   14764:	ldr	r2, [fp, #-16]
   14768:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1476c:	sub	r3, r2, r3
   14770:	str	r3, [fp, #-20]	; 0xffffffec
   14774:	ldr	r3, [fp, #-20]	; 0xffffffec
   14778:	and	r3, r3, #15
   1477c:	cmp	r3, #0
   14780:	beq	1479c <verify_monster@@Base+0xd8>
   14784:	ldr	r3, [pc, #1060]	; 14bb0 <verify_monster@@Base+0x4ec>
   14788:	add	r3, pc, r3
   1478c:	mov	r0, r3
   14790:	bl	10d20 <puts@plt>
   14794:	mvn	r3, #0
   14798:	b	14f20 <verify_monster@@Base+0x85c>
   1479c:	ldr	r0, [fp, #-16]
   147a0:	bl	119c4 <_start@@Base+0xc04>
   147a4:	vmov.f32	s14, s0
   147a8:	vldr	s15, [pc, #1000]	; 14b98 <verify_monster@@Base+0x4d4>
   147ac:	vcmp.f32	s14, s15
   147b0:	vmrs	APSR_nzcv, fpscr
   147b4:	beq	147d0 <verify_monster@@Base+0x10c>
   147b8:	ldr	r3, [pc, #1012]	; 14bb4 <verify_monster@@Base+0x4f0>
   147bc:	add	r3, pc, r3
   147c0:	mov	r0, r3
   147c4:	bl	10d20 <puts@plt>
   147c8:	mvn	r3, #0
   147cc:	b	14f20 <verify_monster@@Base+0x85c>
   147d0:	ldr	r0, [fp, #-16]
   147d4:	bl	11a14 <_start@@Base+0xc54>
   147d8:	vmov.f32	s14, s0
   147dc:	vldr	s15, [pc, #952]	; 14b9c <verify_monster@@Base+0x4d8>
   147e0:	vcmp.f32	s14, s15
   147e4:	vmrs	APSR_nzcv, fpscr
   147e8:	beq	14804 <verify_monster@@Base+0x140>
   147ec:	ldr	r3, [pc, #964]	; 14bb8 <verify_monster@@Base+0x4f4>
   147f0:	add	r3, pc, r3
   147f4:	mov	r0, r3
   147f8:	bl	10d20 <puts@plt>
   147fc:	mvn	r3, #0
   14800:	b	14f20 <verify_monster@@Base+0x85c>
   14804:	ldr	r0, [fp, #-16]
   14808:	bl	11a68 <_start@@Base+0xca8>
   1480c:	vmov.f32	s14, s0
   14810:	vldr	s15, [pc, #904]	; 14ba0 <verify_monster@@Base+0x4dc>
   14814:	vcmp.f32	s14, s15
   14818:	vmrs	APSR_nzcv, fpscr
   1481c:	beq	14838 <verify_monster@@Base+0x174>
   14820:	ldr	r3, [pc, #916]	; 14bbc <verify_monster@@Base+0x4f8>
   14824:	add	r3, pc, r3
   14828:	mov	r0, r3
   1482c:	bl	10d20 <puts@plt>
   14830:	mvn	r3, #0
   14834:	b	14f20 <verify_monster@@Base+0x85c>
   14838:	ldr	r0, [fp, #-16]
   1483c:	bl	11abc <_start@@Base+0xcfc>
   14840:	vmov.f64	d6, d0
   14844:	vldr	d7, [pc, #836]	; 14b90 <verify_monster@@Base+0x4cc>
   14848:	vcmp.f64	d6, d7
   1484c:	vmrs	APSR_nzcv, fpscr
   14850:	beq	1486c <verify_monster@@Base+0x1a8>
   14854:	ldr	r3, [pc, #868]	; 14bc0 <verify_monster@@Base+0x4fc>
   14858:	add	r3, pc, r3
   1485c:	mov	r0, r3
   14860:	bl	10d20 <puts@plt>
   14864:	mvn	r3, #0
   14868:	b	14f20 <verify_monster@@Base+0x85c>
   1486c:	ldr	r0, [fp, #-16]
   14870:	bl	11b18 <_start@@Base+0xd58>
   14874:	mov	r3, r0
   14878:	cmp	r3, #2
   1487c:	beq	14898 <verify_monster@@Base+0x1d4>
   14880:	ldr	r3, [pc, #828]	; 14bc4 <verify_monster@@Base+0x500>
   14884:	add	r3, pc, r3
   14888:	mov	r0, r3
   1488c:	bl	10d20 <puts@plt>
   14890:	mvn	r3, #0
   14894:	b	14f20 <verify_monster@@Base+0x85c>
   14898:	ldr	r0, [fp, #-16]
   1489c:	bl	11b68 <_start@@Base+0xda8>
   148a0:	str	r0, [fp, #-24]	; 0xffffffe8
   148a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148a8:	bl	11928 <_start@@Base+0xb68>
   148ac:	mov	r3, r0
   148b0:	cmp	r3, #5
   148b4:	bne	148cc <verify_monster@@Base+0x208>
   148b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148bc:	bl	11974 <_start@@Base+0xbb4>
   148c0:	mov	r3, r0
   148c4:	cmp	r3, #6
   148c8:	beq	148e4 <verify_monster@@Base+0x220>
   148cc:	ldr	r3, [pc, #756]	; 14bc8 <verify_monster@@Base+0x504>
   148d0:	add	r3, pc, r3
   148d4:	mov	r0, r3
   148d8:	bl	10d20 <puts@plt>
   148dc:	mvn	r3, #0
   148e0:	b	14f20 <verify_monster@@Base+0x85c>
   148e4:	ldr	r0, [fp, #-12]
   148e8:	bl	11e10 <_start@@Base+0x1050>
   148ec:	str	r0, [fp, #-28]	; 0xffffffe4
   148f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   148f4:	bl	11550 <_start@@Base+0x790>
   148f8:	mov	r3, r0
   148fc:	cmp	r3, #9
   14900:	beq	1491c <verify_monster@@Base+0x258>
   14904:	ldr	r3, [pc, #704]	; 14bcc <verify_monster@@Base+0x508>
   14908:	add	r3, pc, r3
   1490c:	mov	r0, r3
   14910:	bl	10d20 <puts@plt>
   14914:	mvn	r3, #0
   14918:	b	14f20 <verify_monster@@Base+0x85c>
   1491c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14920:	cmp	r3, #0
   14924:	beq	14948 <verify_monster@@Base+0x284>
   14928:	ldr	r3, [pc, #672]	; 14bd0 <verify_monster@@Base+0x50c>
   1492c:	add	r3, pc, r3
   14930:	mov	r1, r3
   14934:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14938:	bl	10cb4 <strcmp@plt>
   1493c:	mov	r3, r0
   14940:	cmp	r3, #0
   14944:	beq	14960 <verify_monster@@Base+0x29c>
   14948:	ldr	r3, [pc, #644]	; 14bd4 <verify_monster@@Base+0x510>
   1494c:	add	r3, pc, r3
   14950:	mov	r0, r3
   14954:	bl	10d20 <puts@plt>
   14958:	mvn	r3, #0
   1495c:	b	14f20 <verify_monster@@Base+0x85c>
   14960:	ldr	r0, [fp, #-12]
   14964:	bl	11f48 <_start@@Base+0x1188>
   14968:	str	r0, [fp, #-32]	; 0xffffffe0
   1496c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14970:	bl	1168c <_start@@Base+0x8cc>
   14974:	mov	r3, r0
   14978:	cmp	r3, #5
   1497c:	beq	14998 <verify_monster@@Base+0x2d4>
   14980:	ldr	r3, [pc, #592]	; 14bd8 <verify_monster@@Base+0x514>
   14984:	add	r3, pc, r3
   14988:	mov	r0, r3
   1498c:	bl	10d20 <puts@plt>
   14990:	mvn	r3, #0
   14994:	b	14f20 <verify_monster@@Base+0x85c>
   14998:	mov	r3, #0
   1499c:	str	r3, [fp, #-8]
   149a0:	b	149f0 <verify_monster@@Base+0x32c>
   149a4:	ldr	r3, [fp, #-8]
   149a8:	mov	r1, r3
   149ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   149b0:	bl	116c0 <_start@@Base+0x900>
   149b4:	mov	r3, r0
   149b8:	mov	r2, r3
   149bc:	ldr	r3, [fp, #-8]
   149c0:	cmp	r3, r2
   149c4:	beq	149e4 <verify_monster@@Base+0x320>
   149c8:	ldr	r1, [fp, #-8]
   149cc:	ldr	r3, [pc, #520]	; 14bdc <verify_monster@@Base+0x518>
   149d0:	add	r3, pc, r3
   149d4:	mov	r0, r3
   149d8:	bl	10cc0 <printf@plt>
   149dc:	mvn	r3, #0
   149e0:	b	14f20 <verify_monster@@Base+0x85c>
   149e4:	ldr	r3, [fp, #-8]
   149e8:	add	r3, r3, #1
   149ec:	str	r3, [fp, #-8]
   149f0:	ldr	r3, [fp, #-8]
   149f4:	cmp	r3, #4
   149f8:	ble	149a4 <verify_monster@@Base+0x2e0>
   149fc:	ldr	r0, [fp, #-12]
   14a00:	bl	12058 <_start@@Base+0x1298>
   14a04:	str	r0, [fp, #-36]	; 0xffffffdc
   14a08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a0c:	cmp	r3, #0
   14a10:	bne	14a2c <verify_monster@@Base+0x368>
   14a14:	ldr	r3, [pc, #452]	; 14be0 <verify_monster@@Base+0x51c>
   14a18:	add	r3, pc, r3
   14a1c:	mov	r0, r3
   14a20:	bl	10d20 <puts@plt>
   14a24:	mvn	r3, #0
   14a28:	b	14f20 <verify_monster@@Base+0x85c>
   14a2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14a30:	bl	115a0 <_start@@Base+0x7e0>
   14a34:	mov	r3, r0
   14a38:	cmp	r3, #2
   14a3c:	beq	14a58 <verify_monster@@Base+0x394>
   14a40:	ldr	r3, [pc, #412]	; 14be4 <verify_monster@@Base+0x520>
   14a44:	add	r3, pc, r3
   14a48:	mov	r0, r3
   14a4c:	bl	10d20 <puts@plt>
   14a50:	mvn	r3, #0
   14a54:	b	14f20 <verify_monster@@Base+0x85c>
   14a58:	mov	r1, #0
   14a5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14a60:	bl	115f0 <_start@@Base+0x830>
   14a64:	str	r0, [fp, #-40]	; 0xffffffd8
   14a68:	ldr	r3, [pc, #376]	; 14be8 <verify_monster@@Base+0x524>
   14a6c:	add	r3, pc, r3
   14a70:	mov	r1, r3
   14a74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a78:	bl	10cb4 <strcmp@plt>
   14a7c:	mov	r3, r0
   14a80:	cmp	r3, #0
   14a84:	beq	14aa0 <verify_monster@@Base+0x3dc>
   14a88:	ldr	r3, [pc, #348]	; 14bec <verify_monster@@Base+0x528>
   14a8c:	add	r3, pc, r3
   14a90:	mov	r0, r3
   14a94:	bl	10d20 <puts@plt>
   14a98:	mvn	r3, #0
   14a9c:	b	14f20 <verify_monster@@Base+0x85c>
   14aa0:	mov	r1, #1
   14aa4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14aa8:	bl	115f0 <_start@@Base+0x830>
   14aac:	str	r0, [fp, #-40]	; 0xffffffd8
   14ab0:	ldr	r3, [pc, #312]	; 14bf0 <verify_monster@@Base+0x52c>
   14ab4:	add	r3, pc, r3
   14ab8:	mov	r1, r3
   14abc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ac0:	bl	10cb4 <strcmp@plt>
   14ac4:	mov	r3, r0
   14ac8:	cmp	r3, #0
   14acc:	beq	14ae8 <verify_monster@@Base+0x424>
   14ad0:	ldr	r3, [pc, #284]	; 14bf4 <verify_monster@@Base+0x530>
   14ad4:	add	r3, pc, r3
   14ad8:	mov	r0, r3
   14adc:	bl	10d20 <puts@plt>
   14ae0:	mvn	r3, #0
   14ae4:	b	14f20 <verify_monster@@Base+0x85c>
   14ae8:	ldr	r0, [fp, #-12]
   14aec:	bl	12168 <_start@@Base+0x13a8>
   14af0:	mov	r3, r0
   14af4:	strb	r3, [fp, #-41]	; 0xffffffd7
   14af8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14afc:	cmp	r3, #1
   14b00:	beq	14b1c <verify_monster@@Base+0x458>
   14b04:	ldr	r3, [pc, #236]	; 14bf8 <verify_monster@@Base+0x534>
   14b08:	add	r3, pc, r3
   14b0c:	mov	r0, r3
   14b10:	bl	10d20 <puts@plt>
   14b14:	mvn	r3, #0
   14b18:	b	14f20 <verify_monster@@Base+0x85c>
   14b1c:	ldr	r0, [fp, #-12]
   14b20:	bl	12268 <_start@@Base+0x14a8>
   14b24:	str	r0, [fp, #-48]	; 0xffffffd0
   14b28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b2c:	cmp	r3, #0
   14b30:	bne	14b4c <verify_monster@@Base+0x488>
   14b34:	ldr	r3, [pc, #192]	; 14bfc <verify_monster@@Base+0x538>
   14b38:	add	r3, pc, r3
   14b3c:	mov	r0, r3
   14b40:	bl	10d20 <puts@plt>
   14b44:	mvn	r3, #0
   14b48:	b	14f20 <verify_monster@@Base+0x85c>
   14b4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b50:	bl	11e10 <_start@@Base+0x1050>
   14b54:	mov	r2, r0
   14b58:	ldr	r3, [pc, #160]	; 14c00 <verify_monster@@Base+0x53c>
   14b5c:	add	r3, pc, r3
   14b60:	mov	r1, r3
   14b64:	mov	r0, r2
   14b68:	bl	10cb4 <strcmp@plt>
   14b6c:	mov	r3, r0
   14b70:	cmp	r3, #0
   14b74:	beq	14c34 <verify_monster@@Base+0x570>
   14b78:	ldr	r3, [pc, #132]	; 14c04 <verify_monster@@Base+0x540>
   14b7c:	add	r3, pc, r3
   14b80:	mov	r0, r3
   14b84:	bl	10d20 <puts@plt>
   14b88:	mvn	r3, #0
   14b8c:	b	14f20 <verify_monster@@Base+0x85c>
   14b90:	andeq	r0, r0, r0
   14b94:	andmi	r0, r8, r0
   14b98:	svccc	0x00800000
   14b9c:	andmi	r0, r0, r0
   14ba0:	submi	r0, r0, r0
   14ba4:	ldrdeq	r3, [r0], -r8
   14ba8:	andeq	r3, r0, r4, asr #7
   14bac:			; <UNDEFINED> instruction: 0x000033b8
   14bb0:	muleq	r0, r4, r3
   14bb4:	andeq	r3, r0, r8, lsl #7
   14bb8:	andeq	r3, r0, r8, ror r3
   14bbc:	andeq	r3, r0, r8, ror #6
   14bc0:	andeq	r3, r0, r8, asr r3
   14bc4:	andeq	r3, r0, r0, asr #6
   14bc8:	andeq	r3, r0, ip, lsl #6
   14bcc:	andeq	r3, r0, ip, ror #5
   14bd0:	andeq	r3, r0, r4, ror #5
   14bd4:	ldrdeq	r3, [r0], -r0
   14bd8:	andeq	r3, r0, ip, lsr #5
   14bdc:	andeq	r3, r0, ip, ror r2
   14be0:	andeq	r3, r0, r4, asr r2
   14be4:	andeq	r3, r0, r4, asr #4
   14be8:	andeq	r3, r0, r4, asr #4
   14bec:	andeq	r3, r0, ip, lsr #4
   14bf0:	andeq	r3, r0, r8, lsr #4
   14bf4:	andeq	r3, r0, r0, lsl r2
   14bf8:	andeq	r3, r0, r4, lsl #4
   14bfc:	andeq	r3, r0, r4, ror #3
   14c00:	ldrdeq	r3, [r0], -r8
   14c04:	andeq	r3, r0, r0, asr #3
   14c08:	strdeq	r3, [r0], -ip
   14c0c:	andeq	r3, r0, r4, ror #1
   14c10:	ldrdeq	r3, [r0], -r0
   14c14:	andeq	r3, r0, ip, lsr #1
   14c18:	muleq	r0, r8, r0
   14c1c:	muleq	r0, r4, r3
   14c20:	andeq	r3, r0, r0, ror r0
   14c24:	ldrdeq	r3, [r0], -r0
   14c28:	andeq	r3, r0, r8, asr r3
   14c2c:	andeq	r3, r0, r4, lsr r0
   14c30:	andeq	r3, r0, ip, asr #1
   14c34:	ldr	r0, [fp, #-12]
   14c38:	bl	12374 <_start@@Base+0x15b4>
   14c3c:	str	r0, [fp, #-52]	; 0xffffffcc
   14c40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14c44:	bl	118d8 <_start@@Base+0xb18>
   14c48:	mov	r3, r0
   14c4c:	cmp	r3, #2
   14c50:	beq	14c6c <verify_monster@@Base+0x5a8>
   14c54:	ldr	r3, [pc, #-84]	; 14c08 <verify_monster@@Base+0x544>
   14c58:	add	r3, pc, r3
   14c5c:	mov	r0, r3
   14c60:	bl	10d20 <puts@plt>
   14c64:	mvn	r3, #0
   14c68:	b	14f20 <verify_monster@@Base+0x85c>
   14c6c:	mov	r1, #0
   14c70:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14c74:	bl	11858 <_start@@Base+0xa98>
   14c78:	str	r0, [fp, #-24]	; 0xffffffe8
   14c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c80:	bl	11928 <_start@@Base+0xb68>
   14c84:	mov	r3, r0
   14c88:	cmp	r3, #10
   14c8c:	beq	14ca8 <verify_monster@@Base+0x5e4>
   14c90:	ldr	r3, [pc, #-140]	; 14c0c <verify_monster@@Base+0x548>
   14c94:	add	r3, pc, r3
   14c98:	mov	r0, r3
   14c9c:	bl	10d20 <puts@plt>
   14ca0:	mvn	r3, #0
   14ca4:	b	14f20 <verify_monster@@Base+0x85c>
   14ca8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14cac:	bl	11974 <_start@@Base+0xbb4>
   14cb0:	mov	r3, r0
   14cb4:	cmp	r3, #20
   14cb8:	beq	14cd4 <verify_monster@@Base+0x610>
   14cbc:	ldr	r3, [pc, #-180]	; 14c10 <verify_monster@@Base+0x54c>
   14cc0:	add	r3, pc, r3
   14cc4:	mov	r0, r3
   14cc8:	bl	10d20 <puts@plt>
   14ccc:	mvn	r3, #0
   14cd0:	b	14f20 <verify_monster@@Base+0x85c>
   14cd4:	mov	r1, #1
   14cd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14cdc:	bl	11858 <_start@@Base+0xa98>
   14ce0:	str	r0, [fp, #-24]	; 0xffffffe8
   14ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ce8:	bl	11928 <_start@@Base+0xb68>
   14cec:	mov	r3, r0
   14cf0:	cmp	r3, #30
   14cf4:	beq	14d10 <verify_monster@@Base+0x64c>
   14cf8:	ldr	r3, [pc, #-236]	; 14c14 <verify_monster@@Base+0x550>
   14cfc:	add	r3, pc, r3
   14d00:	mov	r0, r3
   14d04:	bl	10d20 <puts@plt>
   14d08:	mvn	r3, #0
   14d0c:	b	14f20 <verify_monster@@Base+0x85c>
   14d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d14:	bl	11974 <_start@@Base+0xbb4>
   14d18:	mov	r3, r0
   14d1c:	cmp	r3, #40	; 0x28
   14d20:	beq	14d3c <verify_monster@@Base+0x678>
   14d24:	ldr	r3, [pc, #-276]	; 14c18 <verify_monster@@Base+0x554>
   14d28:	add	r3, pc, r3
   14d2c:	mov	r0, r3
   14d30:	bl	10d20 <puts@plt>
   14d34:	mvn	r3, #0
   14d38:	b	14f20 <verify_monster@@Base+0x85c>
   14d3c:	ldr	r0, [fp, #-12]
   14d40:	bl	12484 <_start@@Base+0x16c4>
   14d44:	mov	r2, r0
   14d48:	movw	r3, #51521	; 0xc941
   14d4c:	movt	r3, #56697	; 0xdd79
   14d50:	cmp	r2, r3
   14d54:	beq	14d78 <verify_monster@@Base+0x6b4>
   14d58:	ldr	r3, [pc, #-324]	; 14c1c <verify_monster@@Base+0x558>
   14d5c:	add	r3, pc, r3
   14d60:	mov	r2, #148	; 0x94
   14d64:	ldr	r1, [pc, #-332]	; 14c20 <verify_monster@@Base+0x55c>
   14d68:	add	r1, pc, r1
   14d6c:	ldr	r0, [pc, #-336]	; 14c24 <verify_monster@@Base+0x560>
   14d70:	add	r0, pc, r0
   14d74:	bl	10db0 <__assert_fail@plt>
   14d78:	ldr	r0, [fp, #-12]
   14d7c:	bl	12584 <_start@@Base+0x17c4>
   14d80:	mov	r2, r0
   14d84:	movw	r3, #51521	; 0xc941
   14d88:	movt	r3, #56697	; 0xdd79
   14d8c:	cmp	r2, r3
   14d90:	beq	14db4 <verify_monster@@Base+0x6f0>
   14d94:	ldr	r3, [pc, #-372]	; 14c28 <verify_monster@@Base+0x564>
   14d98:	add	r3, pc, r3
   14d9c:	mov	r2, #149	; 0x95
   14da0:	ldr	r1, [pc, #-380]	; 14c2c <verify_monster@@Base+0x568>
   14da4:	add	r1, pc, r1
   14da8:	ldr	r0, [pc, #-384]	; 14c30 <verify_monster@@Base+0x56c>
   14dac:	add	r0, pc, r0
   14db0:	bl	10db0 <__assert_fail@plt>
   14db4:	ldr	r0, [fp, #-12]
   14db8:	bl	12684 <_start@@Base+0x18c4>
   14dbc:	add	r3, pc, #372	; 0x174
   14dc0:	ldrd	r2, [r3]
   14dc4:	cmp	r1, r3
   14dc8:	cmpeq	r0, r2
   14dcc:	beq	14df0 <verify_monster@@Base+0x72c>
   14dd0:	ldr	r3, [pc, #368]	; 14f48 <verify_monster@@Base+0x884>
   14dd4:	add	r3, pc, r3
   14dd8:	mov	r2, #150	; 0x96
   14ddc:	ldr	r1, [pc, #360]	; 14f4c <verify_monster@@Base+0x888>
   14de0:	add	r1, pc, r1
   14de4:	ldr	r0, [pc, #356]	; 14f50 <verify_monster@@Base+0x88c>
   14de8:	add	r0, pc, r0
   14dec:	bl	10db0 <__assert_fail@plt>
   14df0:	ldr	r0, [fp, #-12]
   14df4:	bl	12790 <_start@@Base+0x19d0>
   14df8:	add	r3, pc, #312	; 0x138
   14dfc:	ldrd	r2, [r3]
   14e00:	cmp	r1, r3
   14e04:	cmpeq	r0, r2
   14e08:	beq	14e2c <verify_monster@@Base+0x768>
   14e0c:	ldr	r3, [pc, #320]	; 14f54 <verify_monster@@Base+0x890>
   14e10:	add	r3, pc, r3
   14e14:	mov	r2, #151	; 0x97
   14e18:	ldr	r1, [pc, #312]	; 14f58 <verify_monster@@Base+0x894>
   14e1c:	add	r1, pc, r1
   14e20:	ldr	r0, [pc, #308]	; 14f5c <verify_monster@@Base+0x898>
   14e24:	add	r0, pc, r0
   14e28:	bl	10db0 <__assert_fail@plt>
   14e2c:	ldr	r0, [fp, #-12]
   14e30:	bl	1289c <_start@@Base+0x1adc>
   14e34:	mov	r2, r0
   14e38:	movw	r3, #42097	; 0xa471
   14e3c:	movt	r3, #36481	; 0x8e81
   14e40:	cmp	r2, r3
   14e44:	beq	14e68 <verify_monster@@Base+0x7a4>
   14e48:	ldr	r3, [pc, #272]	; 14f60 <verify_monster@@Base+0x89c>
   14e4c:	add	r3, pc, r3
   14e50:	mov	r2, #152	; 0x98
   14e54:	ldr	r1, [pc, #264]	; 14f64 <verify_monster@@Base+0x8a0>
   14e58:	add	r1, pc, r1
   14e5c:	ldr	r0, [pc, #260]	; 14f68 <verify_monster@@Base+0x8a4>
   14e60:	add	r0, pc, r0
   14e64:	bl	10db0 <__assert_fail@plt>
   14e68:	ldr	r0, [fp, #-12]
   14e6c:	bl	1299c <_start@@Base+0x1bdc>
   14e70:	mov	r2, r0
   14e74:	movw	r3, #42097	; 0xa471
   14e78:	movt	r3, #36481	; 0x8e81
   14e7c:	cmp	r2, r3
   14e80:	beq	14ea4 <verify_monster@@Base+0x7e0>
   14e84:	ldr	r3, [pc, #224]	; 14f6c <verify_monster@@Base+0x8a8>
   14e88:	add	r3, pc, r3
   14e8c:	mov	r2, #153	; 0x99
   14e90:	ldr	r1, [pc, #216]	; 14f70 <verify_monster@@Base+0x8ac>
   14e94:	add	r1, pc, r1
   14e98:	ldr	r0, [pc, #212]	; 14f74 <verify_monster@@Base+0x8b0>
   14e9c:	add	r0, pc, r0
   14ea0:	bl	10db0 <__assert_fail@plt>
   14ea4:	ldr	r0, [fp, #-12]
   14ea8:	bl	12a9c <_start@@Base+0x1cdc>
   14eac:	add	r3, pc, #140	; 0x8c
   14eb0:	ldrd	r2, [r3]
   14eb4:	cmp	r1, r3
   14eb8:	cmpeq	r0, r2
   14ebc:	beq	14ee0 <verify_monster@@Base+0x81c>
   14ec0:	ldr	r3, [pc, #176]	; 14f78 <verify_monster@@Base+0x8b4>
   14ec4:	add	r3, pc, r3
   14ec8:	mov	r2, #154	; 0x9a
   14ecc:	ldr	r1, [pc, #168]	; 14f7c <verify_monster@@Base+0x8b8>
   14ed0:	add	r1, pc, r1
   14ed4:	ldr	r0, [pc, #164]	; 14f80 <verify_monster@@Base+0x8bc>
   14ed8:	add	r0, pc, r0
   14edc:	bl	10db0 <__assert_fail@plt>
   14ee0:	ldr	r0, [fp, #-12]
   14ee4:	bl	12ba8 <_start@@Base+0x1de8>
   14ee8:	add	r3, pc, #80	; 0x50
   14eec:	ldrd	r2, [r3]
   14ef0:	cmp	r1, r3
   14ef4:	cmpeq	r0, r2
   14ef8:	beq	14f1c <verify_monster@@Base+0x858>
   14efc:	ldr	r3, [pc, #128]	; 14f84 <verify_monster@@Base+0x8c0>
   14f00:	add	r3, pc, r3
   14f04:	mov	r2, #155	; 0x9b
   14f08:	ldr	r1, [pc, #120]	; 14f88 <verify_monster@@Base+0x8c4>
   14f0c:	add	r1, pc, r1
   14f10:	ldr	r0, [pc, #116]	; 14f8c <verify_monster@@Base+0x8c8>
   14f14:	add	r0, pc, r0
   14f18:	bl	10db0 <__assert_fail@plt>
   14f1c:	mov	r3, #0
   14f20:	mov	r0, r3
   14f24:	sub	sp, fp, #4
   14f28:	ldr	fp, [sp]
   14f2c:	add	sp, sp, #4
   14f30:	pop	{pc}		; (ldr pc, [sp], #4)
   14f34:	nop	{0}
   14f38:	vrhadd.s<illegal width 64>	d25, d27, d1
   14f3c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   14f40:			; <UNDEFINED> instruction: 0xc767ddf1
   14f44:	mvnsmi	r4, #220, 16	; 0xdc0000
   14f48:	andeq	r3, r0, ip, lsl r3
   14f4c:	strdeq	r2, [r0], -r8
   14f50:	andeq	r3, r0, r8, asr #1
   14f54:	andeq	r3, r0, r0, ror #5
   14f58:			; <UNDEFINED> instruction: 0x00002fbc
   14f5c:	andeq	r3, r0, ip, asr #1
   14f60:	andeq	r3, r0, r4, lsr #5
   14f64:	andeq	r2, r0, r0, lsl #31
   14f68:	ldrdeq	r3, [r0], -r0
   14f6c:	andeq	r3, r0, r8, ror #4
   14f70:	andeq	r2, r0, r4, asr #30
   14f74:	andeq	r3, r0, ip, asr #1
   14f78:	andeq	r3, r0, ip, lsr #4
   14f7c:	andeq	r2, r0, r8, lsl #30
   14f80:	andeq	r3, r0, r8, asr #1
   14f84:	strdeq	r3, [r0], -r0
   14f88:	andeq	r2, r0, ip, asr #29
   14f8c:	andeq	r3, r0, ip, asr #1

00014f90 <main@@Base>:
   14f90:	str	r4, [sp, #-12]!
   14f94:	str	fp, [sp, #4]
   14f98:	str	lr, [sp, #8]
   14f9c:	add	fp, sp, #8
   14fa0:	sub	sp, sp, #28
   14fa4:	str	r0, [fp, #-32]	; 0xffffffe0
   14fa8:	str	r1, [fp, #-36]	; 0xffffffdc
   14fac:	ldr	r4, [pc, #480]	; 15194 <main@@Base+0x204>
   14fb0:	add	r4, pc, r4
   14fb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fb8:	cmp	r3, #1
   14fbc:	beq	14ff4 <main@@Base+0x64>
   14fc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fc4:	cmp	r3, #2
   14fc8:	beq	14ff4 <main@@Base+0x64>
   14fcc:	ldr	r3, [pc, #452]	; 15198 <main@@Base+0x208>
   14fd0:	ldr	r3, [r4, r3]
   14fd4:	ldr	r3, [r3]
   14fd8:	mov	r2, #63	; 0x3f
   14fdc:	mov	r1, #1
   14fe0:	ldr	r0, [pc, #436]	; 1519c <main@@Base+0x20c>
   14fe4:	add	r0, pc, r0
   14fe8:	bl	10d08 <fwrite@plt>
   14fec:	mov	r0, #1
   14ff0:	bl	10d50 <exit@plt>
   14ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ff8:	cmp	r3, #2
   14ffc:	bne	15014 <main@@Base+0x84>
   15000:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15004:	ldr	r2, [r3, #4]
   15008:	ldr	r3, [pc, #400]	; 151a0 <main@@Base+0x210>
   1500c:	ldr	r3, [r4, r3]
   15010:	str	r2, [r3]
   15014:	ldr	r3, [pc, #388]	; 151a0 <main@@Base+0x210>
   15018:	ldr	r3, [r4, r3]
   1501c:	ldr	r3, [r3]
   15020:	sub	r2, fp, #28
   15024:	mov	r1, #1024	; 0x400
   15028:	mov	r0, r3
   1502c:	bl	142d4 <_start@@Base+0x3514>
   15030:	str	r0, [fp, #-20]	; 0xffffffec
   15034:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15038:	add	r3, r3, #255	; 0xff
   1503c:	bic	r3, r3, #255	; 0xff
   15040:	mov	r1, r3
   15044:	mov	r0, #256	; 0x100
   15048:	bl	10eb0 <_start@@Base+0xf0>
   1504c:	str	r0, [fp, #-24]	; 0xffffffe8
   15050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15054:	mov	r2, r3
   15058:	ldr	r1, [fp, #-20]	; 0xffffffec
   1505c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15060:	bl	10ce4 <memcpy@plt>
   15064:	ldr	r0, [fp, #-20]	; 0xffffffec
   15068:	bl	10cd8 <free@plt>
   1506c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15070:	cmp	r3, #0
   15074:	bne	150ac <main@@Base+0x11c>
   15078:	ldr	r3, [pc, #280]	; 15198 <main@@Base+0x208>
   1507c:	ldr	r3, [r4, r3]
   15080:	ldr	r0, [r3]
   15084:	ldr	r3, [pc, #276]	; 151a0 <main@@Base+0x210>
   15088:	ldr	r3, [r4, r3]
   1508c:	ldr	r3, [r3]
   15090:	mov	r2, r3
   15094:	ldr	r3, [pc, #264]	; 151a4 <main@@Base+0x214>
   15098:	add	r3, pc, r3
   1509c:	mov	r1, r3
   150a0:	bl	10d5c <fprintf@plt>
   150a4:	mvn	r3, #0
   150a8:	b	1517c <main@@Base+0x1ec>
   150ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   150b0:	ldr	r3, [pc, #224]	; 15198 <main@@Base+0x208>
   150b4:	ldr	r3, [r4, r3]
   150b8:	ldr	r3, [r3]
   150bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   150c0:	ldr	r0, [pc, #224]	; 151a8 <main@@Base+0x218>
   150c4:	add	r0, pc, r0
   150c8:	bl	144ac <_start@@Base+0x36ec>
   150cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150d0:	ldr	r2, [pc, #212]	; 151ac <main@@Base+0x21c>
   150d4:	add	r2, pc, r2
   150d8:	mov	r1, r3
   150dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150e0:	bl	13ea0 <_start@@Base+0x30e0>
   150e4:	mov	r3, r0
   150e8:	cmp	r3, #0
   150ec:	beq	1511c <main@@Base+0x18c>
   150f0:	ldr	r3, [pc, #160]	; 15198 <main@@Base+0x208>
   150f4:	ldr	r3, [r4, r3]
   150f8:	ldr	r3, [r3]
   150fc:	mov	r2, #38	; 0x26
   15100:	mov	r1, #1
   15104:	ldr	r0, [pc, #164]	; 151b0 <main@@Base+0x220>
   15108:	add	r0, pc, r0
   1510c:	bl	10d08 <fwrite@plt>
   15110:	mvn	r3, #0
   15114:	str	r3, [fp, #-16]
   15118:	b	15170 <main@@Base+0x1e0>
   1511c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15120:	mov	r1, r3
   15124:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15128:	bl	13e4c <_start@@Base+0x308c>
   1512c:	mov	r3, r0
   15130:	cmp	r3, #0
   15134:	beq	15164 <main@@Base+0x1d4>
   15138:	ldr	r3, [pc, #88]	; 15198 <main@@Base+0x208>
   1513c:	ldr	r3, [r4, r3]
   15140:	ldr	r3, [r3]
   15144:	mov	r2, #62	; 0x3e
   15148:	mov	r1, #1
   1514c:	ldr	r0, [pc, #96]	; 151b4 <main@@Base+0x224>
   15150:	add	r0, pc, r0
   15154:	bl	10d08 <fwrite@plt>
   15158:	mvn	r3, #0
   1515c:	str	r3, [fp, #-16]
   15160:	b	15170 <main@@Base+0x1e0>
   15164:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15168:	bl	146c4 <verify_monster@@Base>
   1516c:	str	r0, [fp, #-16]
   15170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15174:	bl	10cd8 <free@plt>
   15178:	ldr	r3, [fp, #-16]
   1517c:	mov	r0, r3
   15180:	sub	sp, fp, #8
   15184:	ldr	r4, [sp]
   15188:	ldr	fp, [sp, #4]
   1518c:	add	sp, sp, #8
   15190:	pop	{pc}		; (ldr pc, [sp], #4)
   15194:	andeq	r4, r1, r8, asr #32
   15198:	andeq	r0, r0, r4, rrx
   1519c:	andeq	r3, r0, ip, lsr r0
   151a0:	andeq	r0, r0, ip, rrx
   151a4:	andeq	r2, r0, r8, asr #31
   151a8:	strdeq	r2, [r0], -r0
   151ac:	andeq	r2, r0, r4, ror #18
   151b0:	andeq	r2, r0, r0, lsl #31
   151b4:	andeq	r2, r0, r0, ror #30
   151b8:	push	{fp}		; (str fp, [sp, #-4]!)
   151bc:	add	fp, sp, #0
   151c0:	sub	sp, sp, #12
   151c4:	str	r0, [fp, #-8]
   151c8:	ldr	r3, [fp, #-8]
   151cc:	mov	r0, r3
   151d0:	add	sp, fp, #0
   151d4:	pop	{fp}		; (ldr fp, [sp], #4)
   151d8:	bx	lr
   151dc:	str	fp, [sp, #-8]!
   151e0:	str	lr, [sp, #4]
   151e4:	add	fp, sp, #4
   151e8:	sub	sp, sp, #8
   151ec:	str	r0, [fp, #-8]
   151f0:	ldr	r3, [fp, #-8]
   151f4:	ldr	r3, [r3]
   151f8:	mov	r0, r3
   151fc:	bl	151b8 <main@@Base+0x228>
   15200:	mov	r3, r0
   15204:	mov	r0, r3
   15208:	sub	sp, fp, #4
   1520c:	ldr	fp, [sp]
   15210:	add	sp, sp, #4
   15214:	pop	{pc}		; (ldr pc, [sp], #4)
   15218:	push	{fp}		; (str fp, [sp, #-4]!)
   1521c:	add	fp, sp, #0
   15220:	sub	sp, sp, #12
   15224:	mov	r3, r0
   15228:	strh	r3, [fp, #-6]
   1522c:	ldrh	r3, [fp, #-6]
   15230:	mov	r0, r3
   15234:	add	sp, fp, #0
   15238:	pop	{fp}		; (ldr fp, [sp], #4)
   1523c:	bx	lr
   15240:	str	fp, [sp, #-8]!
   15244:	str	lr, [sp, #4]
   15248:	add	fp, sp, #4
   1524c:	sub	sp, sp, #8
   15250:	str	r0, [fp, #-8]
   15254:	ldr	r3, [fp, #-8]
   15258:	ldrh	r3, [r3]
   1525c:	mov	r0, r3
   15260:	bl	15218 <main@@Base+0x288>
   15264:	mov	r3, r0
   15268:	mov	r0, r3
   1526c:	sub	sp, fp, #4
   15270:	ldr	fp, [sp]
   15274:	add	sp, sp, #4
   15278:	pop	{pc}		; (ldr pc, [sp], #4)
   1527c:	push	{fp}		; (str fp, [sp, #-4]!)
   15280:	add	fp, sp, #0
   15284:	sub	sp, sp, #12
   15288:	str	r0, [fp, #-8]
   1528c:	ldr	r3, [fp, #-8]
   15290:	mov	r0, r3
   15294:	add	sp, fp, #0
   15298:	pop	{fp}		; (ldr fp, [sp], #4)
   1529c:	bx	lr
   152a0:	push	{fp}		; (str fp, [sp, #-4]!)
   152a4:	add	fp, sp, #0
   152a8:	sub	sp, sp, #12
   152ac:	str	r0, [fp, #-8]
   152b0:	ldr	r3, [fp, #-8]
   152b4:	mov	r0, r3
   152b8:	add	sp, fp, #0
   152bc:	pop	{fp}		; (ldr fp, [sp], #4)
   152c0:	bx	lr
   152c4:	str	fp, [sp, #-8]!
   152c8:	str	lr, [sp, #4]
   152cc:	add	fp, sp, #4
   152d0:	sub	sp, sp, #8
   152d4:	str	r0, [fp, #-8]
   152d8:	ldr	r3, [fp, #-8]
   152dc:	ldr	r3, [r3]
   152e0:	mov	r0, r3
   152e4:	bl	1527c <main@@Base+0x2ec>
   152e8:	mov	r3, r0
   152ec:	mov	r0, r3
   152f0:	sub	sp, fp, #4
   152f4:	ldr	fp, [sp]
   152f8:	add	sp, sp, #4
   152fc:	pop	{pc}		; (ldr pc, [sp], #4)

00015300 <flatcc_verify_error_string@@Base>:
   15300:	push	{fp}		; (str fp, [sp, #-4]!)
   15304:	add	fp, sp, #0
   15308:	sub	sp, sp, #12
   1530c:	str	r0, [fp, #-8]
   15310:	ldr	r3, [fp, #-8]
   15314:	cmp	r3, #36	; 0x24
   15318:	addls	pc, pc, r3, lsl #2
   1531c:	b	15570 <flatcc_verify_error_string@@Base+0x270>
   15320:	b	153b4 <flatcc_verify_error_string@@Base+0xb4>
   15324:	b	153c0 <flatcc_verify_error_string@@Base+0xc0>
   15328:	b	153cc <flatcc_verify_error_string@@Base+0xcc>
   1532c:	b	153d8 <flatcc_verify_error_string@@Base+0xd8>
   15330:	b	153e4 <flatcc_verify_error_string@@Base+0xe4>
   15334:	b	153f0 <flatcc_verify_error_string@@Base+0xf0>
   15338:	b	153fc <flatcc_verify_error_string@@Base+0xfc>
   1533c:	b	15408 <flatcc_verify_error_string@@Base+0x108>
   15340:	b	15414 <flatcc_verify_error_string@@Base+0x114>
   15344:	b	15420 <flatcc_verify_error_string@@Base+0x120>
   15348:	b	1542c <flatcc_verify_error_string@@Base+0x12c>
   1534c:	b	15438 <flatcc_verify_error_string@@Base+0x138>
   15350:	b	15444 <flatcc_verify_error_string@@Base+0x144>
   15354:	b	15450 <flatcc_verify_error_string@@Base+0x150>
   15358:	b	1545c <flatcc_verify_error_string@@Base+0x15c>
   1535c:	b	15468 <flatcc_verify_error_string@@Base+0x168>
   15360:	b	15474 <flatcc_verify_error_string@@Base+0x174>
   15364:	b	15480 <flatcc_verify_error_string@@Base+0x180>
   15368:	b	1548c <flatcc_verify_error_string@@Base+0x18c>
   1536c:	b	15498 <flatcc_verify_error_string@@Base+0x198>
   15370:	b	154a4 <flatcc_verify_error_string@@Base+0x1a4>
   15374:	b	154b0 <flatcc_verify_error_string@@Base+0x1b0>
   15378:	b	154bc <flatcc_verify_error_string@@Base+0x1bc>
   1537c:	b	154c8 <flatcc_verify_error_string@@Base+0x1c8>
   15380:	b	154d4 <flatcc_verify_error_string@@Base+0x1d4>
   15384:	b	154e0 <flatcc_verify_error_string@@Base+0x1e0>
   15388:	b	154ec <flatcc_verify_error_string@@Base+0x1ec>
   1538c:	b	154f8 <flatcc_verify_error_string@@Base+0x1f8>
   15390:	b	15504 <flatcc_verify_error_string@@Base+0x204>
   15394:	b	15510 <flatcc_verify_error_string@@Base+0x210>
   15398:	b	1551c <flatcc_verify_error_string@@Base+0x21c>
   1539c:	b	15528 <flatcc_verify_error_string@@Base+0x228>
   153a0:	b	15534 <flatcc_verify_error_string@@Base+0x234>
   153a4:	b	15540 <flatcc_verify_error_string@@Base+0x240>
   153a8:	b	1554c <flatcc_verify_error_string@@Base+0x24c>
   153ac:	b	15558 <flatcc_verify_error_string@@Base+0x258>
   153b0:	b	15564 <flatcc_verify_error_string@@Base+0x264>
   153b4:	ldr	r3, [pc, #460]	; 15588 <flatcc_verify_error_string@@Base+0x288>
   153b8:	add	r3, pc, r3
   153bc:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153c0:	ldr	r3, [pc, #452]	; 1558c <flatcc_verify_error_string@@Base+0x28c>
   153c4:	add	r3, pc, r3
   153c8:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153cc:	ldr	r3, [pc, #444]	; 15590 <flatcc_verify_error_string@@Base+0x290>
   153d0:	add	r3, pc, r3
   153d4:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153d8:	ldr	r3, [pc, #436]	; 15594 <flatcc_verify_error_string@@Base+0x294>
   153dc:	add	r3, pc, r3
   153e0:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153e4:	ldr	r3, [pc, #428]	; 15598 <flatcc_verify_error_string@@Base+0x298>
   153e8:	add	r3, pc, r3
   153ec:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153f0:	ldr	r3, [pc, #420]	; 1559c <flatcc_verify_error_string@@Base+0x29c>
   153f4:	add	r3, pc, r3
   153f8:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   153fc:	ldr	r3, [pc, #412]	; 155a0 <flatcc_verify_error_string@@Base+0x2a0>
   15400:	add	r3, pc, r3
   15404:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15408:	ldr	r3, [pc, #404]	; 155a4 <flatcc_verify_error_string@@Base+0x2a4>
   1540c:	add	r3, pc, r3
   15410:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15414:	ldr	r3, [pc, #396]	; 155a8 <flatcc_verify_error_string@@Base+0x2a8>
   15418:	add	r3, pc, r3
   1541c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15420:	ldr	r3, [pc, #388]	; 155ac <flatcc_verify_error_string@@Base+0x2ac>
   15424:	add	r3, pc, r3
   15428:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   1542c:	ldr	r3, [pc, #380]	; 155b0 <flatcc_verify_error_string@@Base+0x2b0>
   15430:	add	r3, pc, r3
   15434:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15438:	ldr	r3, [pc, #372]	; 155b4 <flatcc_verify_error_string@@Base+0x2b4>
   1543c:	add	r3, pc, r3
   15440:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15444:	ldr	r3, [pc, #364]	; 155b8 <flatcc_verify_error_string@@Base+0x2b8>
   15448:	add	r3, pc, r3
   1544c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15450:	ldr	r3, [pc, #356]	; 155bc <flatcc_verify_error_string@@Base+0x2bc>
   15454:	add	r3, pc, r3
   15458:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   1545c:	ldr	r3, [pc, #348]	; 155c0 <flatcc_verify_error_string@@Base+0x2c0>
   15460:	add	r3, pc, r3
   15464:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15468:	ldr	r3, [pc, #340]	; 155c4 <flatcc_verify_error_string@@Base+0x2c4>
   1546c:	add	r3, pc, r3
   15470:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15474:	ldr	r3, [pc, #332]	; 155c8 <flatcc_verify_error_string@@Base+0x2c8>
   15478:	add	r3, pc, r3
   1547c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15480:	ldr	r3, [pc, #324]	; 155cc <flatcc_verify_error_string@@Base+0x2cc>
   15484:	add	r3, pc, r3
   15488:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   1548c:	ldr	r3, [pc, #316]	; 155d0 <flatcc_verify_error_string@@Base+0x2d0>
   15490:	add	r3, pc, r3
   15494:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15498:	ldr	r3, [pc, #308]	; 155d4 <flatcc_verify_error_string@@Base+0x2d4>
   1549c:	add	r3, pc, r3
   154a0:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154a4:	ldr	r3, [pc, #300]	; 155d8 <flatcc_verify_error_string@@Base+0x2d8>
   154a8:	add	r3, pc, r3
   154ac:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154b0:	ldr	r3, [pc, #292]	; 155dc <flatcc_verify_error_string@@Base+0x2dc>
   154b4:	add	r3, pc, r3
   154b8:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154bc:	ldr	r3, [pc, #284]	; 155e0 <flatcc_verify_error_string@@Base+0x2e0>
   154c0:	add	r3, pc, r3
   154c4:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154c8:	ldr	r3, [pc, #276]	; 155e4 <flatcc_verify_error_string@@Base+0x2e4>
   154cc:	add	r3, pc, r3
   154d0:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154d4:	ldr	r3, [pc, #268]	; 155e8 <flatcc_verify_error_string@@Base+0x2e8>
   154d8:	add	r3, pc, r3
   154dc:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154e0:	ldr	r3, [pc, #260]	; 155ec <flatcc_verify_error_string@@Base+0x2ec>
   154e4:	add	r3, pc, r3
   154e8:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154ec:	ldr	r3, [pc, #252]	; 155f0 <flatcc_verify_error_string@@Base+0x2f0>
   154f0:	add	r3, pc, r3
   154f4:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   154f8:	ldr	r3, [pc, #244]	; 155f4 <flatcc_verify_error_string@@Base+0x2f4>
   154fc:	add	r3, pc, r3
   15500:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15504:	ldr	r3, [pc, #236]	; 155f8 <flatcc_verify_error_string@@Base+0x2f8>
   15508:	add	r3, pc, r3
   1550c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15510:	ldr	r3, [pc, #228]	; 155fc <flatcc_verify_error_string@@Base+0x2fc>
   15514:	add	r3, pc, r3
   15518:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   1551c:	ldr	r3, [pc, #220]	; 15600 <flatcc_verify_error_string@@Base+0x300>
   15520:	add	r3, pc, r3
   15524:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15528:	ldr	r3, [pc, #212]	; 15604 <flatcc_verify_error_string@@Base+0x304>
   1552c:	add	r3, pc, r3
   15530:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15534:	ldr	r3, [pc, #204]	; 15608 <flatcc_verify_error_string@@Base+0x308>
   15538:	add	r3, pc, r3
   1553c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15540:	ldr	r3, [pc, #196]	; 1560c <flatcc_verify_error_string@@Base+0x30c>
   15544:	add	r3, pc, r3
   15548:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   1554c:	ldr	r3, [pc, #188]	; 15610 <flatcc_verify_error_string@@Base+0x310>
   15550:	add	r3, pc, r3
   15554:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15558:	ldr	r3, [pc, #180]	; 15614 <flatcc_verify_error_string@@Base+0x314>
   1555c:	add	r3, pc, r3
   15560:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15564:	ldr	r3, [pc, #172]	; 15618 <flatcc_verify_error_string@@Base+0x318>
   15568:	add	r3, pc, r3
   1556c:	b	15578 <flatcc_verify_error_string@@Base+0x278>
   15570:	ldr	r3, [pc, #164]	; 1561c <flatcc_verify_error_string@@Base+0x31c>
   15574:	add	r3, pc, r3
   15578:	mov	r0, r3
   1557c:	add	sp, fp, #0
   15580:	pop	{fp}		; (ldr fp, [sp], #4)
   15584:	bx	lr
   15588:	strdeq	r2, [r0], -r4
   1558c:	andeq	r2, r0, ip, ror #31
   15590:	strdeq	r2, [r0], -r8
   15594:	andeq	r3, r0, r0
   15598:	andeq	r3, r0, r0, lsl r0
   1559c:	andeq	r3, r0, ip, lsl r0
   155a0:	andeq	r3, r0, r4, lsr r0
   155a4:	andeq	r3, r0, r8, asr #32
   155a8:	andeq	r3, r0, r8, asr r0
   155ac:	andeq	r3, r0, r0, rrx
   155b0:	andeq	r3, r0, r8, rrx
   155b4:	andeq	r3, r0, r4, ror r0
   155b8:	andeq	r3, r0, ip, ror r0
   155bc:	andeq	r3, r0, r8, lsl #1
   155c0:	muleq	r0, r8, r0
   155c4:	andeq	r3, r0, r8, lsr #1
   155c8:	andeq	r3, r0, r4, asr #1
   155cc:	andeq	r3, r0, r0, ror #1
   155d0:	strdeq	r3, [r0], -ip
   155d4:	andeq	r3, r0, r4, lsl #2
   155d8:	andeq	r3, r0, r0, lsr #2
   155dc:	andeq	r3, r0, ip, lsr #2
   155e0:	andeq	r3, r0, ip, asr #2
   155e4:	andeq	r3, r0, r4, ror r1
   155e8:	muleq	r0, r4, r1
   155ec:			; <UNDEFINED> instruction: 0x000031b4
   155f0:	ldrdeq	r3, [r0], -r8
   155f4:	andeq	r3, r0, r0, ror #3
   155f8:	strdeq	r3, [r0], -r0
   155fc:	strdeq	r3, [r0], -ip
   15600:	andeq	r3, r0, r8, lsl r2
   15604:	andeq	r3, r0, r4, lsr r2
   15608:	andeq	r3, r0, r0, asr #4
   1560c:	andeq	r3, r0, ip, asr r2
   15610:	andeq	r3, r0, r8, ror r2
   15614:	andeq	r3, r0, r0, lsr #5
   15618:			; <UNDEFINED> instruction: 0x000032bc
   1561c:	andeq	r3, r0, r0, asr #5
   15620:	str	fp, [sp, #-8]!
   15624:	str	lr, [sp, #4]
   15628:	add	fp, sp, #4
   1562c:	sub	sp, sp, #8
   15630:	str	r0, [fp, #-8]
   15634:	str	r1, [fp, #-12]
   15638:	ldr	r2, [fp, #-8]
   1563c:	ldr	r3, [fp, #-12]
   15640:	add	r3, r2, r3
   15644:	mov	r0, r3
   15648:	bl	151dc <main@@Base+0x24c>
   1564c:	mov	r3, r0
   15650:	mov	r0, r3
   15654:	sub	sp, fp, #4
   15658:	ldr	fp, [sp]
   1565c:	add	sp, sp, #4
   15660:	pop	{pc}		; (ldr pc, [sp], #4)
   15664:	str	fp, [sp, #-8]!
   15668:	str	lr, [sp, #4]
   1566c:	add	fp, sp, #4
   15670:	sub	sp, sp, #16
   15674:	str	r0, [fp, #-16]
   15678:	mov	r3, #0
   1567c:	str	r3, [fp, #-8]
   15680:	sub	r3, fp, #8
   15684:	mov	r2, #4
   15688:	ldr	r1, [fp, #-16]
   1568c:	mov	r0, r3
   15690:	bl	10d74 <strncpy@plt>
   15694:	ldr	r3, [fp, #-8]
   15698:	mov	r0, r3
   1569c:	bl	152a0 <main@@Base+0x310>
   156a0:	mov	r3, r0
   156a4:	mov	r0, r3
   156a8:	sub	sp, fp, #4
   156ac:	ldr	fp, [sp]
   156b0:	add	sp, sp, #4
   156b4:	pop	{pc}		; (ldr pc, [sp], #4)
   156b8:	str	fp, [sp, #-8]!
   156bc:	str	lr, [sp, #4]
   156c0:	add	fp, sp, #4
   156c4:	sub	sp, sp, #8
   156c8:	str	r0, [fp, #-8]
   156cc:	str	r1, [fp, #-12]
   156d0:	ldr	r2, [fp, #-8]
   156d4:	ldr	r3, [fp, #-12]
   156d8:	add	r3, r2, r3
   156dc:	mov	r0, r3
   156e0:	bl	152c4 <main@@Base+0x334>
   156e4:	mov	r3, r0
   156e8:	mov	r0, r3
   156ec:	sub	sp, fp, #4
   156f0:	ldr	fp, [sp]
   156f4:	add	sp, sp, #4
   156f8:	pop	{pc}		; (ldr pc, [sp], #4)
   156fc:	str	fp, [sp, #-8]!
   15700:	str	lr, [sp, #4]
   15704:	add	fp, sp, #4
   15708:	sub	sp, sp, #8
   1570c:	str	r0, [fp, #-8]
   15710:	str	r1, [fp, #-12]
   15714:	ldr	r2, [fp, #-8]
   15718:	ldr	r3, [fp, #-12]
   1571c:	add	r3, r2, r3
   15720:	mov	r0, r3
   15724:	bl	15240 <main@@Base+0x2b0>
   15728:	mov	r3, r0
   1572c:	mov	r0, r3
   15730:	sub	sp, fp, #4
   15734:	ldr	fp, [sp]
   15738:	add	sp, sp, #4
   1573c:	pop	{pc}		; (ldr pc, [sp], #4)
   15740:	push	{fp}		; (str fp, [sp, #-4]!)
   15744:	add	fp, sp, #0
   15748:	sub	sp, sp, #28
   1574c:	str	r0, [fp, #-16]
   15750:	str	r1, [fp, #-20]	; 0xffffffec
   15754:	str	r2, [fp, #-24]	; 0xffffffe8
   15758:	ldr	r2, [fp, #-20]	; 0xffffffec
   1575c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15760:	add	r3, r2, r3
   15764:	str	r3, [fp, #-8]
   15768:	ldr	r2, [fp, #-8]
   1576c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15770:	cmp	r2, r3
   15774:	bls	157a4 <flatcc_verify_error_string@@Base+0x4a4>
   15778:	ldr	r3, [fp, #-8]
   1577c:	add	r3, r3, #4
   15780:	ldr	r2, [fp, #-16]
   15784:	cmp	r2, r3
   15788:	bcc	157a4 <flatcc_verify_error_string@@Base+0x4a4>
   1578c:	ldr	r3, [fp, #-8]
   15790:	and	r3, r3, #3
   15794:	cmp	r3, #0
   15798:	bne	157a4 <flatcc_verify_error_string@@Base+0x4a4>
   1579c:	mov	r3, #1
   157a0:	b	157a8 <flatcc_verify_error_string@@Base+0x4a8>
   157a4:	mov	r3, #0
   157a8:	mov	r0, r3
   157ac:	add	sp, fp, #0
   157b0:	pop	{fp}		; (ldr fp, [sp], #4)
   157b4:	bx	lr
   157b8:	push	{fp}		; (str fp, [sp, #-4]!)
   157bc:	add	fp, sp, #0
   157c0:	sub	sp, sp, #28
   157c4:	str	r0, [fp, #-16]
   157c8:	str	r1, [fp, #-20]	; 0xffffffec
   157cc:	str	r2, [fp, #-24]	; 0xffffffe8
   157d0:	strh	r3, [fp, #-26]	; 0xffffffe6
   157d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   157d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157dc:	add	r3, r2, r3
   157e0:	str	r3, [fp, #-8]
   157e4:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   157e8:	cmp	r3, #4
   157ec:	movcs	r3, r3
   157f0:	movcc	r3, #4
   157f4:	strh	r3, [fp, #-26]	; 0xffffffe6
   157f8:	ldr	r2, [fp, #-8]
   157fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15800:	cmp	r2, r3
   15804:	bls	15844 <flatcc_verify_error_string@@Base+0x544>
   15808:	ldr	r3, [fp, #-8]
   1580c:	add	r3, r3, #4
   15810:	ldr	r2, [fp, #-16]
   15814:	cmp	r2, r3
   15818:	bcc	15844 <flatcc_verify_error_string@@Base+0x544>
   1581c:	ldr	r3, [fp, #-8]
   15820:	add	r2, r3, #4
   15824:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   15828:	sub	r3, r3, #1
   1582c:	orr	r3, r3, #3
   15830:	and	r3, r3, r2
   15834:	cmp	r3, #0
   15838:	bne	15844 <flatcc_verify_error_string@@Base+0x544>
   1583c:	mov	r3, #1
   15840:	b	15848 <flatcc_verify_error_string@@Base+0x548>
   15844:	mov	r3, #0
   15848:	mov	r0, r3
   1584c:	add	sp, fp, #0
   15850:	pop	{fp}		; (ldr fp, [sp], #4)
   15854:	bx	lr
   15858:	push	{fp}		; (str fp, [sp, #-4]!)
   1585c:	add	fp, sp, #0
   15860:	sub	sp, sp, #36	; 0x24
   15864:	str	r0, [fp, #-24]	; 0xffffffe8
   15868:	str	r1, [fp, #-28]	; 0xffffffe4
   1586c:	str	r2, [fp, #-32]	; 0xffffffe0
   15870:	str	r3, [fp, #-36]	; 0xffffffdc
   15874:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15878:	cmp	r3, #0
   1587c:	beq	15898 <flatcc_verify_error_string@@Base+0x598>
   15880:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15884:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15888:	add	r3, r2, r3
   1588c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15890:	cmp	r2, r3
   15894:	bcs	158a0 <flatcc_verify_error_string@@Base+0x5a0>
   15898:	mov	r3, #18
   1589c:	b	15960 <flatcc_verify_error_string@@Base+0x660>
   158a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   158a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   158a8:	add	r3, r2, r3
   158ac:	str	r3, [fp, #-28]	; 0xffffffe4
   158b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   158b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158b8:	add	r3, r2, r3
   158bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   158c0:	cmp	r2, r3
   158c4:	movls	r3, #1
   158c8:	movhi	r3, #0
   158cc:	uxtb	r3, r3
   158d0:	str	r3, [fp, #-8]
   158d4:	ldr	r3, [fp, #-8]
   158d8:	cmp	r3, #0
   158dc:	bne	158e8 <flatcc_verify_error_string@@Base+0x5e8>
   158e0:	mov	r3, #10
   158e4:	b	15960 <flatcc_verify_error_string@@Base+0x660>
   158e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   158ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158f0:	add	r3, r2, r3
   158f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158f8:	cmp	r2, r3
   158fc:	movcs	r3, #1
   15900:	movcc	r3, #0
   15904:	uxtb	r3, r3
   15908:	str	r3, [fp, #-12]
   1590c:	ldr	r3, [fp, #-12]
   15910:	cmp	r3, #0
   15914:	bne	15920 <flatcc_verify_error_string@@Base+0x620>
   15918:	mov	r3, #9
   1591c:	b	15960 <flatcc_verify_error_string@@Base+0x660>
   15920:	ldrh	r3, [fp, #4]
   15924:	sub	r3, r3, #1
   15928:	mov	r2, r3
   1592c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15930:	and	r3, r3, r2
   15934:	cmp	r3, #0
   15938:	moveq	r3, #1
   1593c:	movne	r3, #0
   15940:	uxtb	r3, r3
   15944:	str	r3, [fp, #-16]
   15948:	ldr	r3, [fp, #-16]
   1594c:	cmp	r3, #0
   15950:	bne	1595c <flatcc_verify_error_string@@Base+0x65c>
   15954:	mov	r3, #11
   15958:	b	15960 <flatcc_verify_error_string@@Base+0x660>
   1595c:	mov	r3, #0
   15960:	mov	r0, r3
   15964:	add	sp, fp, #0
   15968:	pop	{fp}		; (ldr fp, [sp], #4)
   1596c:	bx	lr
   15970:	str	fp, [sp, #-8]!
   15974:	str	lr, [sp, #4]
   15978:	add	fp, sp, #4
   1597c:	sub	sp, sp, #16
   15980:	str	r0, [fp, #-16]
   15984:	mov	r3, r1
   15988:	strh	r3, [fp, #-18]	; 0xffffffee
   1598c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15990:	add	r3, r3, #2
   15994:	uxth	r3, r3
   15998:	lsl	r3, r3, #1
   1599c:	strh	r3, [fp, #-6]
   159a0:	ldr	r3, [fp, #-16]
   159a4:	ldrh	r3, [r3, #22]
   159a8:	ldrh	r2, [fp, #-6]
   159ac:	cmp	r2, r3
   159b0:	bcc	159bc <flatcc_verify_error_string@@Base+0x6bc>
   159b4:	mov	r3, #0
   159b8:	b	159d8 <flatcc_verify_error_string@@Base+0x6d8>
   159bc:	ldr	r3, [fp, #-16]
   159c0:	ldr	r3, [r3, #12]
   159c4:	ldrh	r2, [fp, #-6]
   159c8:	mov	r1, r2
   159cc:	mov	r0, r3
   159d0:	bl	156fc <flatcc_verify_error_string@@Base+0x3fc>
   159d4:	mov	r3, r0
   159d8:	mov	r0, r3
   159dc:	sub	sp, fp, #4
   159e0:	ldr	fp, [sp]
   159e4:	add	sp, sp, #4
   159e8:	pop	{pc}		; (ldr pc, [sp], #4)
   159ec:	str	fp, [sp, #-8]!
   159f0:	str	lr, [sp, #4]
   159f4:	add	fp, sp, #4
   159f8:	sub	sp, sp, #16
   159fc:	str	r0, [fp, #-16]
   15a00:	mov	r3, r1
   15a04:	strh	r3, [fp, #-18]	; 0xffffffee
   15a08:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15a0c:	mov	r1, r3
   15a10:	ldr	r0, [fp, #-16]
   15a14:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   15a18:	mov	r3, r0
   15a1c:	strh	r3, [fp, #-6]
   15a20:	ldrh	r3, [fp, #-6]
   15a24:	cmp	r3, #0
   15a28:	beq	15a4c <flatcc_verify_error_string@@Base+0x74c>
   15a2c:	ldr	r3, [fp, #-16]
   15a30:	ldr	r2, [r3]
   15a34:	ldr	r3, [fp, #-16]
   15a38:	ldr	r1, [r3, #16]
   15a3c:	ldrh	r3, [fp, #-6]
   15a40:	add	r3, r1, r3
   15a44:	add	r3, r2, r3
   15a48:	b	15a50 <flatcc_verify_error_string@@Base+0x750>
   15a4c:	mov	r3, #0
   15a50:	mov	r0, r3
   15a54:	sub	sp, fp, #4
   15a58:	ldr	fp, [sp]
   15a5c:	add	sp, sp, #4
   15a60:	pop	{pc}		; (ldr pc, [sp], #4)
   15a64:	str	fp, [sp, #-8]!
   15a68:	str	lr, [sp, #4]
   15a6c:	add	fp, sp, #4
   15a70:	sub	sp, sp, #48	; 0x30
   15a74:	str	r0, [fp, #-40]	; 0xffffffd8
   15a78:	str	r2, [fp, #-48]	; 0xffffffd0
   15a7c:	str	r3, [fp, #-52]	; 0xffffffcc
   15a80:	mov	r3, r1
   15a84:	strh	r3, [fp, #-42]	; 0xffffffd6
   15a88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a8c:	ldr	r3, [r3]
   15a90:	str	r3, [fp, #-8]
   15a94:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   15a98:	mov	r1, r3
   15a9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15aa0:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   15aa4:	mov	r3, r0
   15aa8:	strh	r3, [fp, #-10]
   15aac:	ldrh	r3, [fp, #-10]
   15ab0:	cmp	r3, #0
   15ab4:	bne	15aec <flatcc_verify_error_string@@Base+0x7ec>
   15ab8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15abc:	cmp	r3, #0
   15ac0:	moveq	r3, #1
   15ac4:	movne	r3, #0
   15ac8:	uxtb	r3, r3
   15acc:	str	r3, [fp, #-16]
   15ad0:	ldr	r3, [fp, #-16]
   15ad4:	cmp	r3, #0
   15ad8:	bne	15ae4 <flatcc_verify_error_string@@Base+0x7e4>
   15adc:	mov	r3, #4
   15ae0:	b	15bb4 <flatcc_verify_error_string@@Base+0x8b4>
   15ae4:	mov	r3, #0
   15ae8:	b	15bb4 <flatcc_verify_error_string@@Base+0x8b4>
   15aec:	ldrh	r3, [fp, #-10]
   15af0:	str	r3, [fp, #-20]	; 0xffffffec
   15af4:	ldr	r2, [fp, #-20]	; 0xffffffec
   15af8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15afc:	add	r3, r2, r3
   15b00:	str	r3, [fp, #-24]	; 0xffffffe8
   15b04:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b08:	ldrh	r3, [r3, #20]
   15b0c:	mov	r2, r3
   15b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b14:	cmp	r3, r2
   15b18:	movls	r3, #1
   15b1c:	movhi	r3, #0
   15b20:	uxtb	r3, r3
   15b24:	str	r3, [fp, #-28]	; 0xffffffe4
   15b28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b2c:	cmp	r3, #0
   15b30:	bne	15b3c <flatcc_verify_error_string@@Base+0x83c>
   15b34:	mov	r3, #13
   15b38:	b	15bb4 <flatcc_verify_error_string@@Base+0x8b4>
   15b3c:	mov	r3, #1
   15b40:	str	r3, [fp, #-32]	; 0xffffffe0
   15b44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b48:	cmp	r3, #0
   15b4c:	bne	15b58 <flatcc_verify_error_string@@Base+0x858>
   15b50:	mov	r3, #14
   15b54:	b	15bb4 <flatcc_verify_error_string@@Base+0x8b4>
   15b58:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b5c:	ldr	r2, [r3, #16]
   15b60:	ldr	r3, [fp, #-8]
   15b64:	add	r3, r2, r3
   15b68:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b6c:	add	r3, r2, r3
   15b70:	str	r3, [fp, #-20]	; 0xffffffec
   15b74:	ldrh	r3, [fp, #4]
   15b78:	sub	r3, r3, #1
   15b7c:	mov	r2, r3
   15b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b84:	and	r3, r3, r2
   15b88:	cmp	r3, #0
   15b8c:	moveq	r3, #1
   15b90:	movne	r3, #0
   15b94:	uxtb	r3, r3
   15b98:	str	r3, [fp, #-36]	; 0xffffffdc
   15b9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ba0:	cmp	r3, #0
   15ba4:	bne	15bb0 <flatcc_verify_error_string@@Base+0x8b0>
   15ba8:	mov	r3, #12
   15bac:	b	15bb4 <flatcc_verify_error_string@@Base+0x8b4>
   15bb0:	mov	r3, #0
   15bb4:	mov	r0, r3
   15bb8:	sub	sp, fp, #4
   15bbc:	ldr	fp, [sp]
   15bc0:	add	sp, sp, #4
   15bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc8:	str	fp, [sp, #-8]!
   15bcc:	str	lr, [sp, #4]
   15bd0:	add	fp, sp, #4
   15bd4:	sub	sp, sp, #40	; 0x28
   15bd8:	str	r0, [fp, #-32]	; 0xffffffe0
   15bdc:	str	r2, [fp, #-40]	; 0xffffffd8
   15be0:	str	r3, [fp, #-44]	; 0xffffffd4
   15be4:	mov	r3, r1
   15be8:	strh	r3, [fp, #-34]	; 0xffffffde
   15bec:	ldrh	r3, [fp, #-34]	; 0xffffffde
   15bf0:	mov	r1, r3
   15bf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15bf8:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   15bfc:	mov	r3, r0
   15c00:	strh	r3, [fp, #-6]
   15c04:	ldrh	r3, [fp, #-6]
   15c08:	cmp	r3, #0
   15c0c:	bne	15c38 <flatcc_verify_error_string@@Base+0x938>
   15c10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15c14:	mov	r2, #0
   15c18:	str	r2, [r3]
   15c1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c20:	cmp	r3, #0
   15c24:	beq	15c30 <flatcc_verify_error_string@@Base+0x930>
   15c28:	mov	r3, #4
   15c2c:	b	15cf4 <flatcc_verify_error_string@@Base+0x9f4>
   15c30:	mov	r3, #0
   15c34:	b	15cf4 <flatcc_verify_error_string@@Base+0x9f4>
   15c38:	ldrh	r3, [fp, #-6]
   15c3c:	str	r3, [fp, #-12]
   15c40:	ldr	r3, [fp, #-12]
   15c44:	add	r3, r3, #4
   15c48:	str	r3, [fp, #-16]
   15c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c50:	ldrh	r3, [r3, #20]
   15c54:	mov	r2, r3
   15c58:	ldr	r3, [fp, #-16]
   15c5c:	cmp	r3, r2
   15c60:	movls	r3, #1
   15c64:	movhi	r3, #0
   15c68:	uxtb	r3, r3
   15c6c:	str	r3, [fp, #-20]	; 0xffffffec
   15c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c74:	cmp	r3, #0
   15c78:	bne	15c84 <flatcc_verify_error_string@@Base+0x984>
   15c7c:	mov	r3, #13
   15c80:	b	15cf4 <flatcc_verify_error_string@@Base+0x9f4>
   15c84:	mov	r3, #1
   15c88:	str	r3, [fp, #-24]	; 0xffffffe8
   15c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c90:	cmp	r3, #0
   15c94:	bne	15ca0 <flatcc_verify_error_string@@Base+0x9a0>
   15c98:	mov	r3, #14
   15c9c:	b	15cf4 <flatcc_verify_error_string@@Base+0x9f4>
   15ca0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ca4:	ldr	r3, [r3, #16]
   15ca8:	ldr	r2, [fp, #-12]
   15cac:	add	r3, r2, r3
   15cb0:	str	r3, [fp, #-12]
   15cb4:	ldr	r3, [fp, #-12]
   15cb8:	and	r3, r3, #3
   15cbc:	cmp	r3, #0
   15cc0:	moveq	r3, #1
   15cc4:	movne	r3, #0
   15cc8:	uxtb	r3, r3
   15ccc:	str	r3, [fp, #-28]	; 0xffffffe4
   15cd0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cd4:	cmp	r3, #0
   15cd8:	bne	15ce4 <flatcc_verify_error_string@@Base+0x9e4>
   15cdc:	mov	r3, #12
   15ce0:	b	15cf4 <flatcc_verify_error_string@@Base+0x9f4>
   15ce4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ce8:	ldr	r2, [fp, #-12]
   15cec:	str	r2, [r3]
   15cf0:	mov	r3, #0
   15cf4:	mov	r0, r3
   15cf8:	sub	sp, fp, #4
   15cfc:	ldr	fp, [sp]
   15d00:	add	sp, sp, #4
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	str	fp, [sp, #-8]!
   15d0c:	str	lr, [sp, #4]
   15d10:	add	fp, sp, #4
   15d14:	sub	sp, sp, #32
   15d18:	str	r0, [fp, #-24]	; 0xffffffe8
   15d1c:	str	r1, [fp, #-28]	; 0xffffffe4
   15d20:	str	r2, [fp, #-32]	; 0xffffffe0
   15d24:	str	r3, [fp, #-36]	; 0xffffffdc
   15d28:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15d2c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15d30:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15d34:	bl	15740 <flatcc_verify_error_string@@Base+0x440>
   15d38:	str	r0, [fp, #-8]
   15d3c:	ldr	r3, [fp, #-8]
   15d40:	cmp	r3, #0
   15d44:	bne	15d50 <flatcc_verify_error_string@@Base+0xa50>
   15d48:	mov	r3, #17
   15d4c:	b	15dfc <flatcc_verify_error_string@@Base+0xafc>
   15d50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15d58:	add	r3, r2, r3
   15d5c:	str	r3, [fp, #-32]	; 0xffffffe0
   15d60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15d64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d68:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   15d6c:	str	r0, [fp, #-12]
   15d70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d74:	add	r3, r3, #4
   15d78:	str	r3, [fp, #-32]	; 0xffffffe0
   15d7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15d80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d84:	sub	r2, r2, r3
   15d88:	ldr	r3, [fp, #-12]
   15d8c:	add	r3, r3, #1
   15d90:	cmp	r2, r3
   15d94:	movcs	r3, #1
   15d98:	movcc	r3, #0
   15d9c:	uxtb	r3, r3
   15da0:	str	r3, [fp, #-16]
   15da4:	ldr	r3, [fp, #-16]
   15da8:	cmp	r3, #0
   15dac:	bne	15db8 <flatcc_verify_error_string@@Base+0xab8>
   15db0:	mov	r3, #8
   15db4:	b	15dfc <flatcc_verify_error_string@@Base+0xafc>
   15db8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15dbc:	ldr	r3, [fp, #-12]
   15dc0:	add	r3, r2, r3
   15dc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15dc8:	add	r3, r2, r3
   15dcc:	ldrb	r3, [r3]
   15dd0:	cmp	r3, #0
   15dd4:	moveq	r3, #1
   15dd8:	movne	r3, #0
   15ddc:	uxtb	r3, r3
   15de0:	str	r3, [fp, #-20]	; 0xffffffec
   15de4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15de8:	cmp	r3, #0
   15dec:	bne	15df8 <flatcc_verify_error_string@@Base+0xaf8>
   15df0:	mov	r3, #7
   15df4:	b	15dfc <flatcc_verify_error_string@@Base+0xafc>
   15df8:	mov	r3, #0
   15dfc:	mov	r0, r3
   15e00:	sub	sp, fp, #4
   15e04:	ldr	fp, [sp]
   15e08:	add	sp, sp, #4
   15e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e10:	str	fp, [sp, #-8]!
   15e14:	str	lr, [sp, #4]
   15e18:	add	fp, sp, #4
   15e1c:	sub	sp, sp, #32
   15e20:	str	r0, [fp, #-24]	; 0xffffffe8
   15e24:	str	r1, [fp, #-28]	; 0xffffffe4
   15e28:	str	r2, [fp, #-32]	; 0xffffffe0
   15e2c:	str	r3, [fp, #-36]	; 0xffffffdc
   15e30:	ldrh	r3, [fp, #8]
   15e34:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15e38:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15e3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15e40:	bl	157b8 <flatcc_verify_error_string@@Base+0x4b8>
   15e44:	str	r0, [fp, #-8]
   15e48:	ldr	r3, [fp, #-8]
   15e4c:	cmp	r3, #0
   15e50:	bne	15e5c <flatcc_verify_error_string@@Base+0xb5c>
   15e54:	mov	r3, #16
   15e58:	b	15efc <flatcc_verify_error_string@@Base+0xbfc>
   15e5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15e60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15e64:	add	r3, r2, r3
   15e68:	str	r3, [fp, #-32]	; 0xffffffe0
   15e6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e74:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   15e78:	str	r0, [fp, #-12]
   15e7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e80:	add	r3, r3, #4
   15e84:	str	r3, [fp, #-32]	; 0xffffffe0
   15e88:	ldr	r2, [fp, #-12]
   15e8c:	ldr	r3, [fp, #12]
   15e90:	cmp	r2, r3
   15e94:	movls	r3, #1
   15e98:	movhi	r3, #0
   15e9c:	uxtb	r3, r3
   15ea0:	str	r3, [fp, #-16]
   15ea4:	ldr	r3, [fp, #-16]
   15ea8:	cmp	r3, #0
   15eac:	bne	15eb8 <flatcc_verify_error_string@@Base+0xbb8>
   15eb0:	mov	r3, #25
   15eb4:	b	15efc <flatcc_verify_error_string@@Base+0xbfc>
   15eb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ec0:	sub	r2, r2, r3
   15ec4:	ldr	r3, [fp, #-12]
   15ec8:	ldr	r1, [fp, #4]
   15ecc:	mul	r3, r1, r3
   15ed0:	cmp	r2, r3
   15ed4:	movcs	r3, #1
   15ed8:	movcc	r3, #0
   15edc:	uxtb	r3, r3
   15ee0:	str	r3, [fp, #-20]	; 0xffffffec
   15ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ee8:	cmp	r3, #0
   15eec:	bne	15ef8 <flatcc_verify_error_string@@Base+0xbf8>
   15ef0:	mov	r3, #26
   15ef4:	b	15efc <flatcc_verify_error_string@@Base+0xbfc>
   15ef8:	mov	r3, #0
   15efc:	mov	r0, r3
   15f00:	sub	sp, fp, #4
   15f04:	ldr	fp, [sp]
   15f08:	add	sp, sp, #4
   15f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f10:	str	fp, [sp, #-8]!
   15f14:	str	lr, [sp, #4]
   15f18:	add	fp, sp, #4
   15f1c:	sub	sp, sp, #40	; 0x28
   15f20:	str	r0, [fp, #-16]
   15f24:	str	r1, [fp, #-20]	; 0xffffffec
   15f28:	str	r2, [fp, #-24]	; 0xffffffe8
   15f2c:	str	r3, [fp, #-28]	; 0xffffffe4
   15f30:	mvn	r3, #-1073741824	; 0xc0000000
   15f34:	str	r3, [sp, #8]
   15f38:	mov	r3, #4
   15f3c:	str	r3, [sp, #4]
   15f40:	mov	r3, #4
   15f44:	str	r3, [sp]
   15f48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15f50:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f54:	ldr	r0, [fp, #-16]
   15f58:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   15f5c:	mov	r3, r0
   15f60:	cmp	r3, #0
   15f64:	beq	15f9c <flatcc_verify_error_string@@Base+0xc9c>
   15f68:	mvn	r3, #-1073741824	; 0xc0000000
   15f6c:	str	r3, [sp, #8]
   15f70:	mov	r3, #4
   15f74:	str	r3, [sp, #4]
   15f78:	mov	r3, #4
   15f7c:	str	r3, [sp]
   15f80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15f88:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f8c:	ldr	r0, [fp, #-16]
   15f90:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   15f94:	mov	r3, r0
   15f98:	b	16054 <flatcc_verify_error_string@@Base+0xd54>
   15f9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15fa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15fa4:	add	r3, r2, r3
   15fa8:	str	r3, [fp, #-24]	; 0xffffffe8
   15fac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15fb0:	ldr	r0, [fp, #-16]
   15fb4:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   15fb8:	str	r0, [fp, #-12]
   15fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fc0:	add	r3, r3, #4
   15fc4:	str	r3, [fp, #-24]	; 0xffffffe8
   15fc8:	mov	r3, #0
   15fcc:	str	r3, [fp, #-8]
   15fd0:	b	16040 <flatcc_verify_error_string@@Base+0xd40>
   15fd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15fd8:	ldr	r0, [fp, #-16]
   15fdc:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   15fe0:	mov	r3, r0
   15fe4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15fe8:	ldr	r1, [fp, #-20]	; 0xffffffec
   15fec:	ldr	r0, [fp, #-16]
   15ff0:	bl	15d08 <flatcc_verify_error_string@@Base+0xa08>
   15ff4:	mov	r3, r0
   15ff8:	cmp	r3, #0
   15ffc:	beq	16028 <flatcc_verify_error_string@@Base+0xd28>
   16000:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16004:	ldr	r0, [fp, #-16]
   16008:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   1600c:	mov	r3, r0
   16010:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16014:	ldr	r1, [fp, #-20]	; 0xffffffec
   16018:	ldr	r0, [fp, #-16]
   1601c:	bl	15d08 <flatcc_verify_error_string@@Base+0xa08>
   16020:	mov	r3, r0
   16024:	b	16054 <flatcc_verify_error_string@@Base+0xd54>
   16028:	ldr	r3, [fp, #-8]
   1602c:	add	r3, r3, #1
   16030:	str	r3, [fp, #-8]
   16034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16038:	add	r3, r3, #4
   1603c:	str	r3, [fp, #-24]	; 0xffffffe8
   16040:	ldr	r2, [fp, #-8]
   16044:	ldr	r3, [fp, #-12]
   16048:	cmp	r2, r3
   1604c:	bcc	15fd4 <flatcc_verify_error_string@@Base+0xcd4>
   16050:	mov	r3, #0
   16054:	mov	r0, r3
   16058:	sub	sp, fp, #4
   1605c:	ldr	fp, [sp]
   16060:	add	sp, sp, #4
   16064:	pop	{pc}		; (ldr pc, [sp], #4)
   16068:	str	r4, [sp, #-12]!
   1606c:	str	fp, [sp, #4]
   16070:	str	lr, [sp, #8]
   16074:	add	fp, sp, #8
   16078:	sub	sp, sp, #84	; 0x54
   1607c:	str	r0, [fp, #-80]	; 0xffffffb0
   16080:	str	r1, [fp, #-84]	; 0xffffffac
   16084:	str	r2, [fp, #-88]	; 0xffffffa8
   16088:	str	r3, [fp, #-92]	; 0xffffffa4
   1608c:	ldr	r3, [fp, #4]
   16090:	sub	r3, r3, #1
   16094:	str	r3, [fp, #-68]	; 0xffffffbc
   16098:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1609c:	str	r3, [fp, #-16]
   160a0:	ldr	r3, [fp, #-16]
   160a4:	cmp	r3, #0
   160a8:	bne	160b4 <flatcc_verify_error_string@@Base+0xdb4>
   160ac:	mov	r3, #3
   160b0:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   160b4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   160b8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   160bc:	ldr	r0, [fp, #-84]	; 0xffffffac
   160c0:	bl	15740 <flatcc_verify_error_string@@Base+0x440>
   160c4:	str	r0, [fp, #-20]	; 0xffffffec
   160c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   160cc:	cmp	r3, #0
   160d0:	bne	160dc <flatcc_verify_error_string@@Base+0xddc>
   160d4:	mov	r3, #15
   160d8:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   160dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160e4:	add	r3, r2, r3
   160e8:	str	r3, [fp, #-60]	; 0xffffffc4
   160ec:	ldr	r4, [fp, #-60]	; 0xffffffc4
   160f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   160f4:	mov	r1, r3
   160f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   160fc:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16100:	mov	r3, r0
   16104:	sub	r3, r4, r3
   16108:	str	r3, [fp, #-24]	; 0xffffffe8
   1610c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16110:	cmp	r3, #0
   16114:	blt	16130 <flatcc_verify_error_string@@Base+0xe30>
   16118:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1611c:	and	r3, r3, #1
   16120:	cmp	r3, #0
   16124:	bne	16130 <flatcc_verify_error_string@@Base+0xe30>
   16128:	mov	r3, #1
   1612c:	b	16134 <flatcc_verify_error_string@@Base+0xe34>
   16130:	mov	r3, #0
   16134:	str	r3, [fp, #-28]	; 0xffffffe4
   16138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1613c:	cmp	r3, #0
   16140:	bne	1614c <flatcc_verify_error_string@@Base+0xe4c>
   16144:	mov	r3, #29
   16148:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   1614c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16150:	add	r3, r3, #2
   16154:	ldr	r2, [fp, #-84]	; 0xffffffac
   16158:	cmp	r2, r3
   1615c:	movcs	r3, #1
   16160:	movcc	r3, #0
   16164:	uxtb	r3, r3
   16168:	str	r3, [fp, #-32]	; 0xffffffe0
   1616c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16170:	cmp	r3, #0
   16174:	bne	16180 <flatcc_verify_error_string@@Base+0xe80>
   16178:	mov	r3, #27
   1617c:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   16180:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16184:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16188:	bl	156fc <flatcc_verify_error_string@@Base+0x3fc>
   1618c:	mov	r3, r0
   16190:	strh	r3, [fp, #-54]	; 0xffffffca
   16194:	ldrh	r3, [fp, #-54]	; 0xffffffca
   16198:	mov	r2, r3
   1619c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161a0:	add	r3, r3, r2
   161a4:	str	r3, [fp, #-36]	; 0xffffffdc
   161a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   161ac:	ldr	r3, [fp, #-84]	; 0xffffffac
   161b0:	cmp	r2, r3
   161b4:	bhi	161d0 <flatcc_verify_error_string@@Base+0xed0>
   161b8:	ldrh	r3, [fp, #-54]	; 0xffffffca
   161bc:	and	r3, r3, #1
   161c0:	cmp	r3, #0
   161c4:	bne	161d0 <flatcc_verify_error_string@@Base+0xed0>
   161c8:	mov	r3, #1
   161cc:	b	161d4 <flatcc_verify_error_string@@Base+0xed4>
   161d0:	mov	r3, #0
   161d4:	str	r3, [fp, #-40]	; 0xffffffd8
   161d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161dc:	cmp	r3, #0
   161e0:	bne	161ec <flatcc_verify_error_string@@Base+0xeec>
   161e4:	mov	r3, #30
   161e8:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   161ec:	mov	r3, #1
   161f0:	str	r3, [fp, #-44]	; 0xffffffd4
   161f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   161f8:	cmp	r3, #0
   161fc:	bne	16208 <flatcc_verify_error_string@@Base+0xf08>
   16200:	mov	r3, #31
   16204:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   16208:	ldrh	r3, [fp, #-54]	; 0xffffffca
   1620c:	cmp	r3, #3
   16210:	movhi	r3, #1
   16214:	movls	r3, #0
   16218:	uxtb	r3, r3
   1621c:	str	r3, [fp, #-48]	; 0xffffffd0
   16220:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16224:	cmp	r3, #0
   16228:	bne	16234 <flatcc_verify_error_string@@Base+0xf34>
   1622c:	mov	r3, #28
   16230:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   16234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16238:	add	r3, r3, #2
   1623c:	mov	r1, r3
   16240:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16244:	bl	156fc <flatcc_verify_error_string@@Base+0x3fc>
   16248:	mov	r3, r0
   1624c:	strh	r3, [fp, #-56]	; 0xffffffc8
   16250:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16254:	ldr	r2, [fp, #-84]	; 0xffffffac
   16258:	sub	r3, r2, r3
   1625c:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   16260:	cmp	r3, r2
   16264:	movcs	r3, #1
   16268:	movcc	r3, #0
   1626c:	uxtb	r3, r3
   16270:	str	r3, [fp, #-52]	; 0xffffffcc
   16274:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16278:	cmp	r3, #0
   1627c:	bne	16288 <flatcc_verify_error_string@@Base+0xf88>
   16280:	mov	r3, #20
   16284:	b	162bc <flatcc_verify_error_string@@Base+0xfbc>
   16288:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1628c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16290:	add	r3, r2, r3
   16294:	str	r3, [fp, #-64]	; 0xffffffc0
   16298:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1629c:	str	r3, [fp, #-76]	; 0xffffffb4
   162a0:	ldr	r3, [fp, #-84]	; 0xffffffac
   162a4:	str	r3, [fp, #-72]	; 0xffffffb8
   162a8:	sub	r2, fp, #76	; 0x4c
   162ac:	ldr	r3, [fp, #8]
   162b0:	mov	r0, r2
   162b4:	blx	r3
   162b8:	mov	r3, r0
   162bc:	mov	r0, r3
   162c0:	sub	sp, fp, #8
   162c4:	ldr	r4, [sp]
   162c8:	ldr	fp, [sp, #4]
   162cc:	add	sp, sp, #8
   162d0:	pop	{pc}		; (ldr pc, [sp], #4)
   162d4:	str	fp, [sp, #-8]!
   162d8:	str	lr, [sp, #4]
   162dc:	add	fp, sp, #4
   162e0:	sub	sp, sp, #48	; 0x30
   162e4:	str	r0, [fp, #-24]	; 0xffffffe8
   162e8:	str	r1, [fp, #-28]	; 0xffffffe4
   162ec:	str	r2, [fp, #-32]	; 0xffffffe0
   162f0:	str	r3, [fp, #-36]	; 0xffffffdc
   162f4:	ldr	r3, [fp, #4]
   162f8:	sub	r2, r3, #1
   162fc:	str	r2, [fp, #4]
   16300:	cmp	r3, #0
   16304:	movgt	r3, #1
   16308:	movle	r3, #0
   1630c:	uxtb	r3, r3
   16310:	str	r3, [fp, #-12]
   16314:	ldr	r3, [fp, #-12]
   16318:	cmp	r3, #0
   1631c:	bne	16328 <flatcc_verify_error_string@@Base+0x1028>
   16320:	mov	r3, #3
   16324:	b	16474 <flatcc_verify_error_string@@Base+0x1174>
   16328:	mvn	r3, #-1073741824	; 0xc0000000
   1632c:	str	r3, [sp, #8]
   16330:	mov	r3, #4
   16334:	str	r3, [sp, #4]
   16338:	mov	r3, #4
   1633c:	str	r3, [sp]
   16340:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16344:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16348:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1634c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16350:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   16354:	mov	r3, r0
   16358:	cmp	r3, #0
   1635c:	beq	16394 <flatcc_verify_error_string@@Base+0x1094>
   16360:	mvn	r3, #-1073741824	; 0xc0000000
   16364:	str	r3, [sp, #8]
   16368:	mov	r3, #4
   1636c:	str	r3, [sp, #4]
   16370:	mov	r3, #4
   16374:	str	r3, [sp]
   16378:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1637c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16380:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16384:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16388:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   1638c:	mov	r3, r0
   16390:	b	16474 <flatcc_verify_error_string@@Base+0x1174>
   16394:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16398:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1639c:	add	r3, r2, r3
   163a0:	str	r3, [fp, #-32]	; 0xffffffe0
   163a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   163a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163ac:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   163b0:	str	r0, [fp, #-16]
   163b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163b8:	add	r3, r3, #4
   163bc:	str	r3, [fp, #-32]	; 0xffffffe0
   163c0:	mov	r3, #0
   163c4:	str	r3, [fp, #-8]
   163c8:	b	16460 <flatcc_verify_error_string@@Base+0x1160>
   163cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   163d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163d4:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   163d8:	mov	r2, r0
   163dc:	ldr	r3, [fp, #8]
   163e0:	str	r3, [sp, #4]
   163e4:	ldr	r3, [fp, #4]
   163e8:	str	r3, [sp]
   163ec:	mov	r3, r2
   163f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   163f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   163f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163fc:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   16400:	mov	r3, r0
   16404:	cmp	r3, #0
   16408:	beq	16448 <flatcc_verify_error_string@@Base+0x1148>
   1640c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16414:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16418:	mov	r2, r0
   1641c:	ldr	r3, [fp, #8]
   16420:	str	r3, [sp, #4]
   16424:	ldr	r3, [fp, #4]
   16428:	str	r3, [sp]
   1642c:	mov	r3, r2
   16430:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16434:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16438:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1643c:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   16440:	mov	r3, r0
   16444:	b	16474 <flatcc_verify_error_string@@Base+0x1174>
   16448:	ldr	r3, [fp, #-8]
   1644c:	add	r3, r3, #1
   16450:	str	r3, [fp, #-8]
   16454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16458:	add	r3, r3, #4
   1645c:	str	r3, [fp, #-32]	; 0xffffffe0
   16460:	ldr	r2, [fp, #-8]
   16464:	ldr	r3, [fp, #-16]
   16468:	cmp	r2, r3
   1646c:	bcc	163cc <flatcc_verify_error_string@@Base+0x10cc>
   16470:	mov	r3, #0
   16474:	mov	r0, r3
   16478:	sub	sp, fp, #4
   1647c:	ldr	fp, [sp]
   16480:	add	sp, sp, #4
   16484:	pop	{pc}		; (ldr pc, [sp], #4)
   16488:	str	fp, [sp, #-8]!
   1648c:	str	lr, [sp, #4]
   16490:	add	fp, sp, #4
   16494:	sub	sp, sp, #88	; 0x58
   16498:	str	r0, [fp, #-64]	; 0xffffffc0
   1649c:	str	r1, [fp, #-68]	; 0xffffffbc
   164a0:	str	r2, [fp, #-72]	; 0xffffffb8
   164a4:	str	r3, [fp, #-76]	; 0xffffffb4
   164a8:	ldr	r3, [fp, #12]
   164ac:	sub	r2, r3, #1
   164b0:	str	r2, [fp, #12]
   164b4:	cmp	r3, #0
   164b8:	movgt	r3, #1
   164bc:	movle	r3, #0
   164c0:	uxtb	r3, r3
   164c4:	str	r3, [fp, #-12]
   164c8:	ldr	r3, [fp, #-12]
   164cc:	cmp	r3, #0
   164d0:	bne	164dc <flatcc_verify_error_string@@Base+0x11dc>
   164d4:	mov	r3, #3
   164d8:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   164dc:	mvn	r3, #-1073741824	; 0xc0000000
   164e0:	str	r3, [sp, #8]
   164e4:	mov	r3, #4
   164e8:	str	r3, [sp, #4]
   164ec:	mov	r3, #4
   164f0:	str	r3, [sp]
   164f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   164f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   164fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16504:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   16508:	mov	r3, r0
   1650c:	cmp	r3, #0
   16510:	beq	16548 <flatcc_verify_error_string@@Base+0x1248>
   16514:	mvn	r3, #-1073741824	; 0xc0000000
   16518:	str	r3, [sp, #8]
   1651c:	mov	r3, #4
   16520:	str	r3, [sp, #4]
   16524:	mov	r3, #4
   16528:	str	r3, [sp]
   1652c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16530:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16534:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16538:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1653c:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   16540:	mov	r3, r0
   16544:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   16548:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1654c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16550:	add	r3, r2, r3
   16554:	str	r3, [fp, #-72]	; 0xffffffb8
   16558:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1655c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16560:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16564:	str	r0, [fp, #-16]
   16568:	ldr	r2, [fp, #-16]
   1656c:	ldr	r3, [fp, #4]
   16570:	cmp	r2, r3
   16574:	moveq	r3, #1
   16578:	movne	r3, #0
   1657c:	uxtb	r3, r3
   16580:	str	r3, [fp, #-20]	; 0xffffffec
   16584:	ldr	r3, [fp, #-20]	; 0xffffffec
   16588:	cmp	r3, #0
   1658c:	bne	16598 <flatcc_verify_error_string@@Base+0x1298>
   16590:	mov	r3, #34	; 0x22
   16594:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   16598:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1659c:	add	r3, r3, #4
   165a0:	str	r3, [fp, #-72]	; 0xffffffb8
   165a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   165a8:	str	r3, [fp, #-56]	; 0xffffffc8
   165ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   165b0:	str	r3, [fp, #-52]	; 0xffffffcc
   165b4:	ldr	r3, [fp, #12]
   165b8:	str	r3, [fp, #-48]	; 0xffffffd0
   165bc:	mov	r3, #0
   165c0:	str	r3, [fp, #-8]
   165c4:	b	166c4 <flatcc_verify_error_string@@Base+0x13c4>
   165c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   165cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   165d0:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   165d4:	str	r0, [fp, #-24]	; 0xffffffe8
   165d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165dc:	cmp	r3, #0
   165e0:	bne	1661c <flatcc_verify_error_string@@Base+0x131c>
   165e4:	ldr	r2, [fp, #8]
   165e8:	ldr	r3, [fp, #-8]
   165ec:	add	r3, r2, r3
   165f0:	ldrb	r3, [r3]
   165f4:	cmp	r3, #0
   165f8:	moveq	r3, #1
   165fc:	movne	r3, #0
   16600:	uxtb	r3, r3
   16604:	str	r3, [fp, #-28]	; 0xffffffe4
   16608:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1660c:	cmp	r3, #0
   16610:	bne	166ac <flatcc_verify_error_string@@Base+0x13ac>
   16614:	mov	r3, #32
   16618:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   1661c:	ldr	r2, [fp, #8]
   16620:	ldr	r3, [fp, #-8]
   16624:	add	r3, r2, r3
   16628:	ldrb	r3, [r3]
   1662c:	cmp	r3, #0
   16630:	movne	r3, #1
   16634:	moveq	r3, #0
   16638:	uxtb	r3, r3
   1663c:	str	r3, [fp, #-32]	; 0xffffffe0
   16640:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16644:	cmp	r3, #0
   16648:	bne	16654 <flatcc_verify_error_string@@Base+0x1354>
   1664c:	mov	r3, #33	; 0x21
   16650:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   16654:	ldr	r2, [fp, #8]
   16658:	ldr	r3, [fp, #-8]
   1665c:	add	r3, r2, r3
   16660:	ldrb	r3, [r3]
   16664:	strb	r3, [fp, #-44]	; 0xffffffd4
   16668:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1666c:	str	r3, [fp, #-40]	; 0xffffffd8
   16670:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16674:	str	r3, [fp, #-36]	; 0xffffffdc
   16678:	sub	r2, fp, #56	; 0x38
   1667c:	ldr	r3, [fp, #16]
   16680:	mov	r0, r2
   16684:	blx	r3
   16688:	mov	r3, r0
   1668c:	cmp	r3, #0
   16690:	beq	166ac <flatcc_verify_error_string@@Base+0x13ac>
   16694:	sub	r2, fp, #56	; 0x38
   16698:	ldr	r3, [fp, #16]
   1669c:	mov	r0, r2
   166a0:	blx	r3
   166a4:	mov	r3, r0
   166a8:	b	166d8 <flatcc_verify_error_string@@Base+0x13d8>
   166ac:	ldr	r3, [fp, #-8]
   166b0:	add	r3, r3, #1
   166b4:	str	r3, [fp, #-8]
   166b8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   166bc:	add	r3, r3, #4
   166c0:	str	r3, [fp, #-72]	; 0xffffffb8
   166c4:	ldr	r2, [fp, #-8]
   166c8:	ldr	r3, [fp, #-16]
   166cc:	cmp	r2, r3
   166d0:	bcc	165c8 <flatcc_verify_error_string@@Base+0x12c8>
   166d4:	mov	r3, #0
   166d8:	mov	r0, r3
   166dc:	sub	sp, fp, #4
   166e0:	ldr	fp, [sp]
   166e4:	add	sp, sp, #4
   166e8:	pop	{pc}		; (ldr pc, [sp], #4)

000166ec <flatcc_verify_field@@Base>:
   166ec:	str	fp, [sp, #-8]!
   166f0:	str	lr, [sp, #4]
   166f4:	add	fp, sp, #4
   166f8:	sub	sp, sp, #24
   166fc:	str	r0, [fp, #-8]
   16700:	str	r2, [fp, #-16]
   16704:	mov	r2, r3
   16708:	mov	r3, r1
   1670c:	strh	r3, [fp, #-10]
   16710:	mov	r3, r2
   16714:	strh	r3, [fp, #-12]
   16718:	ldrh	r1, [fp, #-10]
   1671c:	ldrh	r3, [fp, #-12]
   16720:	str	r3, [sp]
   16724:	ldr	r3, [fp, #-16]
   16728:	mov	r2, #0
   1672c:	ldr	r0, [fp, #-8]
   16730:	bl	15a64 <flatcc_verify_error_string@@Base+0x764>
   16734:	mov	r3, r0
   16738:	cmp	r3, #0
   1673c:	beq	16764 <flatcc_verify_field@@Base+0x78>
   16740:	ldrh	r1, [fp, #-10]
   16744:	ldrh	r3, [fp, #-12]
   16748:	str	r3, [sp]
   1674c:	ldr	r3, [fp, #-16]
   16750:	mov	r2, #0
   16754:	ldr	r0, [fp, #-8]
   16758:	bl	15a64 <flatcc_verify_error_string@@Base+0x764>
   1675c:	mov	r3, r0
   16760:	b	16768 <flatcc_verify_field@@Base+0x7c>
   16764:	mov	r3, #0
   16768:	mov	r0, r3
   1676c:	sub	sp, fp, #4
   16770:	ldr	fp, [sp]
   16774:	add	sp, sp, #4
   16778:	pop	{pc}		; (ldr pc, [sp], #4)

0001677c <flatcc_verify_string_field@@Base>:
   1677c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16780:	str	r6, [sp, #8]
   16784:	str	fp, [sp, #12]
   16788:	str	lr, [sp, #16]
   1678c:	add	fp, sp, #16
   16790:	sub	sp, sp, #28
   16794:	str	r0, [fp, #-32]	; 0xffffffe0
   16798:	mov	r3, r1
   1679c:	str	r2, [fp, #-40]	; 0xffffffd8
   167a0:	strh	r3, [fp, #-34]	; 0xffffffde
   167a4:	sub	r3, fp, #28
   167a8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   167ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   167b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   167b4:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   167b8:	str	r0, [fp, #-24]	; 0xffffffe8
   167bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167c0:	cmp	r3, #0
   167c4:	bne	167d4 <flatcc_verify_string_field@@Base+0x58>
   167c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   167cc:	cmp	r3, #0
   167d0:	bne	167dc <flatcc_verify_string_field@@Base+0x60>
   167d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167d8:	b	16820 <flatcc_verify_string_field@@Base+0xa4>
   167dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167e0:	ldr	r4, [r3]
   167e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167e8:	ldr	r5, [r3, #4]
   167ec:	ldr	r6, [fp, #-28]	; 0xffffffe4
   167f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167f4:	ldr	r3, [r3]
   167f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   167fc:	mov	r1, r2
   16800:	mov	r0, r3
   16804:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16808:	mov	r3, r0
   1680c:	mov	r2, r6
   16810:	mov	r1, r5
   16814:	mov	r0, r4
   16818:	bl	15d08 <flatcc_verify_error_string@@Base+0xa08>
   1681c:	mov	r3, r0
   16820:	mov	r0, r3
   16824:	sub	sp, fp, #16
   16828:	ldrd	r4, [sp]
   1682c:	ldr	r6, [sp, #8]
   16830:	ldr	fp, [sp, #12]
   16834:	add	sp, sp, #16
   16838:	pop	{pc}		; (ldr pc, [sp], #4)

0001683c <flatcc_verify_vector_field@@Base>:
   1683c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16840:	str	r6, [sp, #8]
   16844:	str	fp, [sp, #12]
   16848:	str	lr, [sp, #16]
   1684c:	add	fp, sp, #16
   16850:	sub	sp, sp, #44	; 0x2c
   16854:	str	r0, [fp, #-32]	; 0xffffffe0
   16858:	str	r2, [fp, #-40]	; 0xffffffd8
   1685c:	str	r3, [fp, #-44]	; 0xffffffd4
   16860:	mov	r3, r1
   16864:	strh	r3, [fp, #-34]	; 0xffffffde
   16868:	sub	r3, fp, #28
   1686c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16870:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16874:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16878:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   1687c:	str	r0, [fp, #-24]	; 0xffffffe8
   16880:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16884:	cmp	r3, #0
   16888:	bne	16898 <flatcc_verify_vector_field@@Base+0x5c>
   1688c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16890:	cmp	r3, #0
   16894:	bne	168a0 <flatcc_verify_vector_field@@Base+0x64>
   16898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1689c:	b	16900 <flatcc_verify_vector_field@@Base+0xc4>
   168a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   168a4:	ldr	r4, [r3]
   168a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   168ac:	ldr	r5, [r3, #4]
   168b0:	ldr	r6, [fp, #-28]	; 0xffffffe4
   168b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   168b8:	ldr	r3, [r3]
   168bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   168c0:	mov	r1, r2
   168c4:	mov	r0, r3
   168c8:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   168cc:	mov	r2, r0
   168d0:	ldr	r3, [fp, #8]
   168d4:	str	r3, [sp, #8]
   168d8:	ldrh	r3, [fp, #4]
   168dc:	str	r3, [sp, #4]
   168e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   168e4:	str	r3, [sp]
   168e8:	mov	r3, r2
   168ec:	mov	r2, r6
   168f0:	mov	r1, r5
   168f4:	mov	r0, r4
   168f8:	bl	15e10 <flatcc_verify_error_string@@Base+0xb10>
   168fc:	mov	r3, r0
   16900:	mov	r0, r3
   16904:	sub	sp, fp, #16
   16908:	ldrd	r4, [sp]
   1690c:	ldr	r6, [sp, #8]
   16910:	ldr	fp, [sp, #12]
   16914:	add	sp, sp, #16
   16918:	pop	{pc}		; (ldr pc, [sp], #4)

0001691c <flatcc_verify_string_vector_field@@Base>:
   1691c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16920:	str	r6, [sp, #8]
   16924:	str	fp, [sp, #12]
   16928:	str	lr, [sp, #16]
   1692c:	add	fp, sp, #16
   16930:	sub	sp, sp, #28
   16934:	str	r0, [fp, #-32]	; 0xffffffe0
   16938:	mov	r3, r1
   1693c:	str	r2, [fp, #-40]	; 0xffffffd8
   16940:	strh	r3, [fp, #-34]	; 0xffffffde
   16944:	sub	r3, fp, #28
   16948:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1694c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16950:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16954:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   16958:	str	r0, [fp, #-24]	; 0xffffffe8
   1695c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16960:	cmp	r3, #0
   16964:	bne	16974 <flatcc_verify_string_vector_field@@Base+0x58>
   16968:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1696c:	cmp	r3, #0
   16970:	bne	1697c <flatcc_verify_string_vector_field@@Base+0x60>
   16974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16978:	b	169c0 <flatcc_verify_string_vector_field@@Base+0xa4>
   1697c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16980:	ldr	r4, [r3]
   16984:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16988:	ldr	r5, [r3, #4]
   1698c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16990:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16994:	ldr	r3, [r3]
   16998:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1699c:	mov	r1, r2
   169a0:	mov	r0, r3
   169a4:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   169a8:	mov	r3, r0
   169ac:	mov	r2, r6
   169b0:	mov	r1, r5
   169b4:	mov	r0, r4
   169b8:	bl	15f10 <flatcc_verify_error_string@@Base+0xc10>
   169bc:	mov	r3, r0
   169c0:	mov	r0, r3
   169c4:	sub	sp, fp, #16
   169c8:	ldrd	r4, [sp]
   169cc:	ldr	r6, [sp, #8]
   169d0:	ldr	fp, [sp, #12]
   169d4:	add	sp, sp, #16
   169d8:	pop	{pc}		; (ldr pc, [sp], #4)

000169dc <flatcc_verify_table_field@@Base>:
   169dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   169e0:	str	r6, [sp, #8]
   169e4:	str	fp, [sp, #12]
   169e8:	str	lr, [sp, #16]
   169ec:	add	fp, sp, #16
   169f0:	sub	sp, sp, #36	; 0x24
   169f4:	str	r0, [fp, #-32]	; 0xffffffe0
   169f8:	str	r2, [fp, #-40]	; 0xffffffd8
   169fc:	str	r3, [fp, #-44]	; 0xffffffd4
   16a00:	mov	r3, r1
   16a04:	strh	r3, [fp, #-34]	; 0xffffffde
   16a08:	sub	r3, fp, #28
   16a0c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16a10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16a14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16a18:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   16a1c:	str	r0, [fp, #-24]	; 0xffffffe8
   16a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a24:	cmp	r3, #0
   16a28:	bne	16a38 <flatcc_verify_table_field@@Base+0x5c>
   16a2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a30:	cmp	r3, #0
   16a34:	bne	16a40 <flatcc_verify_table_field@@Base+0x64>
   16a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a3c:	b	16a9c <flatcc_verify_table_field@@Base+0xc0>
   16a40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a44:	ldr	r4, [r3]
   16a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a4c:	ldr	r5, [r3, #4]
   16a50:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16a54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a58:	ldr	r3, [r3]
   16a5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16a60:	mov	r1, r2
   16a64:	mov	r0, r3
   16a68:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16a6c:	mov	r1, r0
   16a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a74:	ldr	r3, [r3, #8]
   16a78:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16a7c:	str	r2, [sp, #4]
   16a80:	str	r3, [sp]
   16a84:	mov	r3, r1
   16a88:	mov	r2, r6
   16a8c:	mov	r1, r5
   16a90:	mov	r0, r4
   16a94:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   16a98:	mov	r3, r0
   16a9c:	mov	r0, r3
   16aa0:	sub	sp, fp, #16
   16aa4:	ldrd	r4, [sp]
   16aa8:	ldr	r6, [sp, #8]
   16aac:	ldr	fp, [sp, #12]
   16ab0:	add	sp, sp, #16
   16ab4:	pop	{pc}		; (ldr pc, [sp], #4)

00016ab8 <flatcc_verify_table_vector_field@@Base>:
   16ab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   16abc:	str	r6, [sp, #8]
   16ac0:	str	fp, [sp, #12]
   16ac4:	str	lr, [sp, #16]
   16ac8:	add	fp, sp, #16
   16acc:	sub	sp, sp, #36	; 0x24
   16ad0:	str	r0, [fp, #-32]	; 0xffffffe0
   16ad4:	str	r2, [fp, #-40]	; 0xffffffd8
   16ad8:	str	r3, [fp, #-44]	; 0xffffffd4
   16adc:	mov	r3, r1
   16ae0:	strh	r3, [fp, #-34]	; 0xffffffde
   16ae4:	sub	r3, fp, #28
   16ae8:	ldrh	r1, [fp, #-34]	; 0xffffffde
   16aec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16af0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16af4:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   16af8:	str	r0, [fp, #-24]	; 0xffffffe8
   16afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b00:	cmp	r3, #0
   16b04:	bne	16b14 <flatcc_verify_table_vector_field@@Base+0x5c>
   16b08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b0c:	cmp	r3, #0
   16b10:	bne	16b1c <flatcc_verify_table_vector_field@@Base+0x64>
   16b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b18:	b	16b78 <flatcc_verify_table_vector_field@@Base+0xc0>
   16b1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b20:	ldr	r4, [r3]
   16b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b28:	ldr	r5, [r3, #4]
   16b2c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   16b30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b34:	ldr	r3, [r3]
   16b38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b3c:	mov	r1, r2
   16b40:	mov	r0, r3
   16b44:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16b48:	mov	r1, r0
   16b4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b50:	ldr	r3, [r3, #8]
   16b54:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16b58:	str	r2, [sp, #4]
   16b5c:	str	r3, [sp]
   16b60:	mov	r3, r1
   16b64:	mov	r2, r6
   16b68:	mov	r1, r5
   16b6c:	mov	r0, r4
   16b70:	bl	162d4 <flatcc_verify_error_string@@Base+0xfd4>
   16b74:	mov	r3, r0
   16b78:	mov	r0, r3
   16b7c:	sub	sp, fp, #16
   16b80:	ldrd	r4, [sp]
   16b84:	ldr	r6, [sp, #8]
   16b88:	ldr	fp, [sp, #12]
   16b8c:	add	sp, sp, #16
   16b90:	pop	{pc}		; (ldr pc, [sp], #4)

00016b94 <flatcc_verify_union_table@@Base>:
   16b94:	str	fp, [sp, #-8]!
   16b98:	str	lr, [sp, #4]
   16b9c:	add	fp, sp, #4
   16ba0:	sub	sp, sp, #16
   16ba4:	str	r0, [fp, #-8]
   16ba8:	str	r1, [fp, #-12]
   16bac:	ldr	r3, [fp, #-8]
   16bb0:	ldr	r0, [r3]
   16bb4:	ldr	r3, [fp, #-8]
   16bb8:	ldr	r1, [r3, #4]
   16bbc:	ldr	r3, [fp, #-8]
   16bc0:	ldr	ip, [r3, #16]
   16bc4:	ldr	r3, [fp, #-8]
   16bc8:	ldr	lr, [r3, #20]
   16bcc:	ldr	r3, [fp, #-8]
   16bd0:	ldr	r3, [r3, #8]
   16bd4:	ldr	r2, [fp, #-12]
   16bd8:	str	r2, [sp, #4]
   16bdc:	str	r3, [sp]
   16be0:	mov	r3, lr
   16be4:	mov	r2, ip
   16be8:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   16bec:	mov	r3, r0
   16bf0:	mov	r0, r3
   16bf4:	sub	sp, fp, #4
   16bf8:	ldr	fp, [sp]
   16bfc:	add	sp, sp, #4
   16c00:	pop	{pc}		; (ldr pc, [sp], #4)

00016c04 <flatcc_verify_union_struct@@Base>:
   16c04:	str	fp, [sp, #-8]!
   16c08:	str	lr, [sp, #4]
   16c0c:	add	fp, sp, #4
   16c10:	sub	sp, sp, #24
   16c14:	str	r0, [fp, #-8]
   16c18:	str	r1, [fp, #-12]
   16c1c:	mov	r3, r2
   16c20:	strh	r3, [fp, #-14]
   16c24:	ldr	r3, [fp, #-8]
   16c28:	ldr	r0, [r3, #4]
   16c2c:	ldr	r3, [fp, #-8]
   16c30:	ldr	r1, [r3, #16]
   16c34:	ldr	r3, [fp, #-8]
   16c38:	ldr	r2, [r3, #20]
   16c3c:	ldrh	r3, [fp, #-14]
   16c40:	str	r3, [sp]
   16c44:	ldr	r3, [fp, #-12]
   16c48:	bl	15858 <flatcc_verify_error_string@@Base+0x558>
   16c4c:	mov	r3, r0
   16c50:	mov	r0, r3
   16c54:	sub	sp, fp, #4
   16c58:	ldr	fp, [sp]
   16c5c:	add	sp, sp, #4
   16c60:	pop	{pc}		; (ldr pc, [sp], #4)

00016c64 <flatcc_verify_union_string@@Base>:
   16c64:	str	fp, [sp, #-8]!
   16c68:	str	lr, [sp, #4]
   16c6c:	add	fp, sp, #4
   16c70:	sub	sp, sp, #8
   16c74:	str	r0, [fp, #-8]
   16c78:	ldr	r3, [fp, #-8]
   16c7c:	ldr	r0, [r3]
   16c80:	ldr	r3, [fp, #-8]
   16c84:	ldr	r1, [r3, #4]
   16c88:	ldr	r3, [fp, #-8]
   16c8c:	ldr	r2, [r3, #16]
   16c90:	ldr	r3, [fp, #-8]
   16c94:	ldr	r3, [r3, #20]
   16c98:	bl	15d08 <flatcc_verify_error_string@@Base+0xa08>
   16c9c:	mov	r3, r0
   16ca0:	mov	r0, r3
   16ca4:	sub	sp, fp, #4
   16ca8:	ldr	fp, [sp]
   16cac:	add	sp, sp, #4
   16cb0:	pop	{pc}		; (ldr pc, [sp], #4)

00016cb4 <flatcc_verify_buffer_header@@Base>:
   16cb4:	str	fp, [sp, #-8]!
   16cb8:	str	lr, [sp, #4]
   16cbc:	add	fp, sp, #4
   16cc0:	sub	sp, sp, #40	; 0x28
   16cc4:	str	r0, [fp, #-32]	; 0xffffffe0
   16cc8:	str	r1, [fp, #-36]	; 0xffffffdc
   16ccc:	str	r2, [fp, #-40]	; 0xffffffd8
   16cd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cd4:	and	r3, r3, #3
   16cd8:	cmp	r3, #0
   16cdc:	moveq	r3, #1
   16ce0:	movne	r3, #0
   16ce4:	uxtb	r3, r3
   16ce8:	str	r3, [fp, #-8]
   16cec:	ldr	r3, [fp, #-8]
   16cf0:	cmp	r3, #0
   16cf4:	bne	16d00 <flatcc_verify_buffer_header@@Base+0x4c>
   16cf8:	mov	r3, #5
   16cfc:	b	16dc4 <flatcc_verify_buffer_header@@Base+0x110>
   16d00:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d04:	cmn	r3, #9
   16d08:	movls	r3, #1
   16d0c:	movhi	r3, #0
   16d10:	uxtb	r3, r3
   16d14:	str	r3, [fp, #-12]
   16d18:	ldr	r3, [fp, #-12]
   16d1c:	cmp	r3, #0
   16d20:	bne	16d2c <flatcc_verify_buffer_header@@Base+0x78>
   16d24:	mov	r3, #6
   16d28:	b	16dc4 <flatcc_verify_buffer_header@@Base+0x110>
   16d2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d30:	cmp	r3, #7
   16d34:	movhi	r3, #1
   16d38:	movls	r3, #0
   16d3c:	uxtb	r3, r3
   16d40:	str	r3, [fp, #-16]
   16d44:	ldr	r3, [fp, #-16]
   16d48:	cmp	r3, #0
   16d4c:	bne	16d58 <flatcc_verify_buffer_header@@Base+0xa4>
   16d50:	mov	r3, #1
   16d54:	b	16dc4 <flatcc_verify_buffer_header@@Base+0x110>
   16d58:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16d5c:	cmp	r3, #0
   16d60:	beq	16dc0 <flatcc_verify_buffer_header@@Base+0x10c>
   16d64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16d68:	bl	15664 <flatcc_verify_error_string@@Base+0x364>
   16d6c:	str	r0, [fp, #-20]	; 0xffffffec
   16d70:	mov	r1, #4
   16d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16d78:	bl	156b8 <flatcc_verify_error_string@@Base+0x3b8>
   16d7c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d80:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d84:	cmp	r3, #0
   16d88:	beq	16d9c <flatcc_verify_buffer_header@@Base+0xe8>
   16d8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d94:	cmp	r2, r3
   16d98:	bne	16da4 <flatcc_verify_buffer_header@@Base+0xf0>
   16d9c:	mov	r3, #1
   16da0:	b	16da8 <flatcc_verify_buffer_header@@Base+0xf4>
   16da4:	mov	r3, #0
   16da8:	str	r3, [fp, #-28]	; 0xffffffe4
   16dac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16db0:	cmp	r3, #0
   16db4:	bne	16dc0 <flatcc_verify_buffer_header@@Base+0x10c>
   16db8:	mov	r3, #2
   16dbc:	b	16dc4 <flatcc_verify_buffer_header@@Base+0x110>
   16dc0:	mov	r3, #0
   16dc4:	mov	r0, r3
   16dc8:	sub	sp, fp, #4
   16dcc:	ldr	fp, [sp]
   16dd0:	add	sp, sp, #4
   16dd4:	pop	{pc}		; (ldr pc, [sp], #4)

00016dd8 <flatcc_verify_typed_buffer_header@@Base>:
   16dd8:	str	fp, [sp, #-8]!
   16ddc:	str	lr, [sp, #4]
   16de0:	add	fp, sp, #4
   16de4:	sub	sp, sp, #40	; 0x28
   16de8:	str	r0, [fp, #-32]	; 0xffffffe0
   16dec:	str	r1, [fp, #-36]	; 0xffffffdc
   16df0:	str	r2, [fp, #-40]	; 0xffffffd8
   16df4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16df8:	and	r3, r3, #3
   16dfc:	cmp	r3, #0
   16e00:	moveq	r3, #1
   16e04:	movne	r3, #0
   16e08:	uxtb	r3, r3
   16e0c:	str	r3, [fp, #-8]
   16e10:	ldr	r3, [fp, #-8]
   16e14:	cmp	r3, #0
   16e18:	bne	16e24 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   16e1c:	mov	r3, #5
   16e20:	b	16ee4 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   16e24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e28:	cmn	r3, #9
   16e2c:	movls	r3, #1
   16e30:	movhi	r3, #0
   16e34:	uxtb	r3, r3
   16e38:	str	r3, [fp, #-12]
   16e3c:	ldr	r3, [fp, #-12]
   16e40:	cmp	r3, #0
   16e44:	bne	16e50 <flatcc_verify_typed_buffer_header@@Base+0x78>
   16e48:	mov	r3, #6
   16e4c:	b	16ee4 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   16e50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e54:	cmp	r3, #7
   16e58:	movhi	r3, #1
   16e5c:	movls	r3, #0
   16e60:	uxtb	r3, r3
   16e64:	str	r3, [fp, #-16]
   16e68:	ldr	r3, [fp, #-16]
   16e6c:	cmp	r3, #0
   16e70:	bne	16e7c <flatcc_verify_typed_buffer_header@@Base+0xa4>
   16e74:	mov	r3, #1
   16e78:	b	16ee4 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   16e7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16e80:	cmp	r3, #0
   16e84:	beq	16ee0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   16e88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16e8c:	str	r3, [fp, #-20]	; 0xffffffec
   16e90:	mov	r1, #4
   16e94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e98:	bl	156b8 <flatcc_verify_error_string@@Base+0x3b8>
   16e9c:	str	r0, [fp, #-24]	; 0xffffffe8
   16ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ea4:	cmp	r3, #0
   16ea8:	beq	16ebc <flatcc_verify_typed_buffer_header@@Base+0xe4>
   16eac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16eb4:	cmp	r2, r3
   16eb8:	bne	16ec4 <flatcc_verify_typed_buffer_header@@Base+0xec>
   16ebc:	mov	r3, #1
   16ec0:	b	16ec8 <flatcc_verify_typed_buffer_header@@Base+0xf0>
   16ec4:	mov	r3, #0
   16ec8:	str	r3, [fp, #-28]	; 0xffffffe4
   16ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ed0:	cmp	r3, #0
   16ed4:	bne	16ee0 <flatcc_verify_typed_buffer_header@@Base+0x108>
   16ed8:	mov	r3, #2
   16edc:	b	16ee4 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   16ee0:	mov	r3, #0
   16ee4:	mov	r0, r3
   16ee8:	sub	sp, fp, #4
   16eec:	ldr	fp, [sp]
   16ef0:	add	sp, sp, #4
   16ef4:	pop	{pc}		; (ldr pc, [sp], #4)

00016ef8 <flatcc_verify_struct_as_root@@Base>:
   16ef8:	str	fp, [sp, #-8]!
   16efc:	str	lr, [sp, #4]
   16f00:	add	fp, sp, #4
   16f04:	sub	sp, sp, #24
   16f08:	str	r0, [fp, #-8]
   16f0c:	str	r1, [fp, #-12]
   16f10:	str	r2, [fp, #-16]
   16f14:	str	r3, [fp, #-20]	; 0xffffffec
   16f18:	ldr	r2, [fp, #-16]
   16f1c:	ldr	r1, [fp, #-12]
   16f20:	ldr	r0, [fp, #-8]
   16f24:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   16f28:	mov	r3, r0
   16f2c:	cmp	r3, #0
   16f30:	beq	16f4c <flatcc_verify_struct_as_root@@Base+0x54>
   16f34:	ldr	r2, [fp, #-16]
   16f38:	ldr	r1, [fp, #-12]
   16f3c:	ldr	r0, [fp, #-8]
   16f40:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   16f44:	mov	r3, r0
   16f48:	b	16f78 <flatcc_verify_struct_as_root@@Base+0x80>
   16f4c:	mov	r1, #0
   16f50:	ldr	r0, [fp, #-8]
   16f54:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16f58:	mov	r2, r0
   16f5c:	ldrh	r3, [fp, #4]
   16f60:	str	r3, [sp]
   16f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f68:	mov	r1, #0
   16f6c:	ldr	r0, [fp, #-12]
   16f70:	bl	15858 <flatcc_verify_error_string@@Base+0x558>
   16f74:	mov	r3, r0
   16f78:	mov	r0, r3
   16f7c:	sub	sp, fp, #4
   16f80:	ldr	fp, [sp]
   16f84:	add	sp, sp, #4
   16f88:	pop	{pc}		; (ldr pc, [sp], #4)

00016f8c <flatcc_verify_struct_as_typed_root@@Base>:
   16f8c:	str	fp, [sp, #-8]!
   16f90:	str	lr, [sp, #4]
   16f94:	add	fp, sp, #4
   16f98:	sub	sp, sp, #24
   16f9c:	str	r0, [fp, #-8]
   16fa0:	str	r1, [fp, #-12]
   16fa4:	str	r2, [fp, #-16]
   16fa8:	str	r3, [fp, #-20]	; 0xffffffec
   16fac:	ldr	r2, [fp, #-16]
   16fb0:	ldr	r1, [fp, #-12]
   16fb4:	ldr	r0, [fp, #-8]
   16fb8:	bl	16dd8 <flatcc_verify_typed_buffer_header@@Base>
   16fbc:	mov	r3, r0
   16fc0:	cmp	r3, #0
   16fc4:	beq	16fe0 <flatcc_verify_struct_as_typed_root@@Base+0x54>
   16fc8:	ldr	r2, [fp, #-16]
   16fcc:	ldr	r1, [fp, #-12]
   16fd0:	ldr	r0, [fp, #-8]
   16fd4:	bl	16dd8 <flatcc_verify_typed_buffer_header@@Base>
   16fd8:	mov	r3, r0
   16fdc:	b	1700c <flatcc_verify_struct_as_typed_root@@Base+0x80>
   16fe0:	mov	r1, #0
   16fe4:	ldr	r0, [fp, #-8]
   16fe8:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   16fec:	mov	r2, r0
   16ff0:	ldrh	r3, [fp, #4]
   16ff4:	str	r3, [sp]
   16ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ffc:	mov	r1, #0
   17000:	ldr	r0, [fp, #-12]
   17004:	bl	15858 <flatcc_verify_error_string@@Base+0x558>
   17008:	mov	r3, r0
   1700c:	mov	r0, r3
   17010:	sub	sp, fp, #4
   17014:	ldr	fp, [sp]
   17018:	add	sp, sp, #4
   1701c:	pop	{pc}		; (ldr pc, [sp], #4)

00017020 <flatcc_verify_table_as_root@@Base>:
   17020:	str	fp, [sp, #-8]!
   17024:	str	lr, [sp, #4]
   17028:	add	fp, sp, #4
   1702c:	sub	sp, sp, #24
   17030:	str	r0, [fp, #-8]
   17034:	str	r1, [fp, #-12]
   17038:	str	r2, [fp, #-16]
   1703c:	str	r3, [fp, #-20]	; 0xffffffec
   17040:	ldr	r2, [fp, #-16]
   17044:	ldr	r1, [fp, #-12]
   17048:	ldr	r0, [fp, #-8]
   1704c:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   17050:	mov	r3, r0
   17054:	cmp	r3, #0
   17058:	beq	17074 <flatcc_verify_table_as_root@@Base+0x54>
   1705c:	ldr	r2, [fp, #-16]
   17060:	ldr	r1, [fp, #-12]
   17064:	ldr	r0, [fp, #-8]
   17068:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   1706c:	mov	r3, r0
   17070:	b	170ac <flatcc_verify_table_as_root@@Base+0x8c>
   17074:	mov	r1, #0
   17078:	ldr	r0, [fp, #-8]
   1707c:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17080:	mov	r2, r0
   17084:	ldr	r3, [fp, #-20]	; 0xffffffec
   17088:	str	r3, [sp, #4]
   1708c:	mov	r3, #100	; 0x64
   17090:	str	r3, [sp]
   17094:	mov	r3, r2
   17098:	mov	r2, #0
   1709c:	ldr	r1, [fp, #-12]
   170a0:	ldr	r0, [fp, #-8]
   170a4:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   170a8:	mov	r3, r0
   170ac:	mov	r0, r3
   170b0:	sub	sp, fp, #4
   170b4:	ldr	fp, [sp]
   170b8:	add	sp, sp, #4
   170bc:	pop	{pc}		; (ldr pc, [sp], #4)

000170c0 <flatcc_verify_table_as_typed_root@@Base>:
   170c0:	str	fp, [sp, #-8]!
   170c4:	str	lr, [sp, #4]
   170c8:	add	fp, sp, #4
   170cc:	sub	sp, sp, #24
   170d0:	str	r0, [fp, #-8]
   170d4:	str	r1, [fp, #-12]
   170d8:	str	r2, [fp, #-16]
   170dc:	str	r3, [fp, #-20]	; 0xffffffec
   170e0:	ldr	r2, [fp, #-16]
   170e4:	ldr	r1, [fp, #-12]
   170e8:	ldr	r0, [fp, #-8]
   170ec:	bl	16dd8 <flatcc_verify_typed_buffer_header@@Base>
   170f0:	mov	r3, r0
   170f4:	cmp	r3, #0
   170f8:	beq	17114 <flatcc_verify_table_as_typed_root@@Base+0x54>
   170fc:	ldr	r2, [fp, #-16]
   17100:	ldr	r1, [fp, #-12]
   17104:	ldr	r0, [fp, #-8]
   17108:	bl	16dd8 <flatcc_verify_typed_buffer_header@@Base>
   1710c:	mov	r3, r0
   17110:	b	1714c <flatcc_verify_table_as_typed_root@@Base+0x8c>
   17114:	mov	r1, #0
   17118:	ldr	r0, [fp, #-8]
   1711c:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17120:	mov	r2, r0
   17124:	ldr	r3, [fp, #-20]	; 0xffffffec
   17128:	str	r3, [sp, #4]
   1712c:	mov	r3, #100	; 0x64
   17130:	str	r3, [sp]
   17134:	mov	r3, r2
   17138:	mov	r2, #0
   1713c:	ldr	r1, [fp, #-12]
   17140:	ldr	r0, [fp, #-8]
   17144:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   17148:	mov	r3, r0
   1714c:	mov	r0, r3
   17150:	sub	sp, fp, #4
   17154:	ldr	fp, [sp]
   17158:	add	sp, sp, #4
   1715c:	pop	{pc}		; (ldr pc, [sp], #4)

00017160 <flatcc_verify_struct_as_nested_root@@Base>:
   17160:	str	fp, [sp, #-8]!
   17164:	str	lr, [sp, #4]
   17168:	add	fp, sp, #4
   1716c:	sub	sp, sp, #32
   17170:	str	r0, [fp, #-16]
   17174:	str	r2, [fp, #-24]	; 0xffffffe8
   17178:	str	r3, [fp, #-28]	; 0xffffffe4
   1717c:	mov	r3, r1
   17180:	strh	r3, [fp, #-18]	; 0xffffffee
   17184:	ldrh	r2, [fp, #8]
   17188:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1718c:	mvn	r3, #0
   17190:	str	r3, [sp, #4]
   17194:	mov	r3, #1
   17198:	str	r3, [sp]
   1719c:	mov	r3, r2
   171a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171a4:	ldr	r0, [fp, #-16]
   171a8:	bl	1683c <flatcc_verify_vector_field@@Base>
   171ac:	mov	r3, r0
   171b0:	cmp	r3, #0
   171b4:	beq	171e8 <flatcc_verify_struct_as_nested_root@@Base+0x88>
   171b8:	ldrh	r2, [fp, #8]
   171bc:	ldrh	r1, [fp, #-18]	; 0xffffffee
   171c0:	mvn	r3, #0
   171c4:	str	r3, [sp, #4]
   171c8:	mov	r3, #1
   171cc:	str	r3, [sp]
   171d0:	mov	r3, r2
   171d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171d8:	ldr	r0, [fp, #-16]
   171dc:	bl	1683c <flatcc_verify_vector_field@@Base>
   171e0:	mov	r3, r0
   171e4:	b	17268 <flatcc_verify_struct_as_nested_root@@Base+0x108>
   171e8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   171ec:	mov	r1, r3
   171f0:	ldr	r0, [fp, #-16]
   171f4:	bl	159ec <flatcc_verify_error_string@@Base+0x6ec>
   171f8:	str	r0, [fp, #-8]
   171fc:	ldr	r3, [fp, #-8]
   17200:	cmp	r3, #0
   17204:	bne	17210 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   17208:	mov	r3, #0
   1720c:	b	17268 <flatcc_verify_struct_as_nested_root@@Base+0x108>
   17210:	mov	r1, #0
   17214:	ldr	r0, [fp, #-8]
   17218:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   1721c:	mov	r2, r0
   17220:	ldr	r3, [fp, #-8]
   17224:	add	r3, r2, r3
   17228:	str	r3, [fp, #-8]
   1722c:	mov	r1, #0
   17230:	ldr	r0, [fp, #-8]
   17234:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17238:	str	r0, [fp, #-12]
   1723c:	ldr	r3, [fp, #-8]
   17240:	add	r3, r3, #4
   17244:	str	r3, [fp, #-8]
   17248:	ldrh	r3, [fp, #8]
   1724c:	str	r3, [sp]
   17250:	ldr	r3, [fp, #4]
   17254:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17258:	ldr	r1, [fp, #-12]
   1725c:	ldr	r0, [fp, #-8]
   17260:	bl	16ef8 <flatcc_verify_struct_as_root@@Base>
   17264:	mov	r3, r0
   17268:	mov	r0, r3
   1726c:	sub	sp, fp, #4
   17270:	ldr	fp, [sp]
   17274:	add	sp, sp, #4
   17278:	pop	{pc}		; (ldr pc, [sp], #4)

0001727c <flatcc_verify_table_as_nested_root@@Base>:
   1727c:	str	fp, [sp, #-8]!
   17280:	str	lr, [sp, #4]
   17284:	add	fp, sp, #4
   17288:	sub	sp, sp, #32
   1728c:	str	r0, [fp, #-16]
   17290:	str	r2, [fp, #-24]	; 0xffffffe8
   17294:	str	r3, [fp, #-28]	; 0xffffffe4
   17298:	mov	r3, r1
   1729c:	strh	r3, [fp, #-18]	; 0xffffffee
   172a0:	ldrh	r2, [fp, #4]
   172a4:	ldrh	r1, [fp, #-18]	; 0xffffffee
   172a8:	mvn	r3, #0
   172ac:	str	r3, [sp, #4]
   172b0:	mov	r3, #1
   172b4:	str	r3, [sp]
   172b8:	mov	r3, r2
   172bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   172c0:	ldr	r0, [fp, #-16]
   172c4:	bl	1683c <flatcc_verify_vector_field@@Base>
   172c8:	mov	r3, r0
   172cc:	cmp	r3, #0
   172d0:	beq	17304 <flatcc_verify_table_as_nested_root@@Base+0x88>
   172d4:	ldrh	r2, [fp, #4]
   172d8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   172dc:	mvn	r3, #0
   172e0:	str	r3, [sp, #4]
   172e4:	mov	r3, #1
   172e8:	str	r3, [sp]
   172ec:	mov	r3, r2
   172f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   172f4:	ldr	r0, [fp, #-16]
   172f8:	bl	1683c <flatcc_verify_vector_field@@Base>
   172fc:	mov	r3, r0
   17300:	b	173d4 <flatcc_verify_table_as_nested_root@@Base+0x158>
   17304:	ldrh	r3, [fp, #-18]	; 0xffffffee
   17308:	mov	r1, r3
   1730c:	ldr	r0, [fp, #-16]
   17310:	bl	159ec <flatcc_verify_error_string@@Base+0x6ec>
   17314:	str	r0, [fp, #-8]
   17318:	ldr	r3, [fp, #-8]
   1731c:	cmp	r3, #0
   17320:	bne	1732c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   17324:	mov	r3, #0
   17328:	b	173d4 <flatcc_verify_table_as_nested_root@@Base+0x158>
   1732c:	mov	r1, #0
   17330:	ldr	r0, [fp, #-8]
   17334:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17338:	mov	r2, r0
   1733c:	ldr	r3, [fp, #-8]
   17340:	add	r3, r2, r3
   17344:	str	r3, [fp, #-8]
   17348:	mov	r1, #0
   1734c:	ldr	r0, [fp, #-8]
   17350:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17354:	str	r0, [fp, #-12]
   17358:	ldr	r3, [fp, #-8]
   1735c:	add	r3, r3, #4
   17360:	str	r3, [fp, #-8]
   17364:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17368:	ldr	r1, [fp, #-12]
   1736c:	ldr	r0, [fp, #-8]
   17370:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   17374:	mov	r3, r0
   17378:	cmp	r3, #0
   1737c:	beq	17398 <flatcc_verify_table_as_nested_root@@Base+0x11c>
   17380:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17384:	ldr	r1, [fp, #-12]
   17388:	ldr	r0, [fp, #-8]
   1738c:	bl	16cb4 <flatcc_verify_buffer_header@@Base>
   17390:	mov	r3, r0
   17394:	b	173d4 <flatcc_verify_table_as_nested_root@@Base+0x158>
   17398:	mov	r1, #0
   1739c:	ldr	r0, [fp, #-8]
   173a0:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   173a4:	mov	r1, r0
   173a8:	ldr	r3, [fp, #-16]
   173ac:	ldr	r3, [r3, #8]
   173b0:	ldr	r2, [fp, #8]
   173b4:	str	r2, [sp, #4]
   173b8:	str	r3, [sp]
   173bc:	mov	r3, r1
   173c0:	mov	r2, #0
   173c4:	ldr	r1, [fp, #-12]
   173c8:	ldr	r0, [fp, #-8]
   173cc:	bl	16068 <flatcc_verify_error_string@@Base+0xd68>
   173d0:	mov	r3, r0
   173d4:	mov	r0, r3
   173d8:	sub	sp, fp, #4
   173dc:	ldr	fp, [sp]
   173e0:	add	sp, sp, #4
   173e4:	pop	{pc}		; (ldr pc, [sp], #4)

000173e8 <flatcc_verify_union_field@@Base>:
   173e8:	str	fp, [sp, #-8]!
   173ec:	str	lr, [sp, #4]
   173f0:	add	fp, sp, #4
   173f4:	sub	sp, sp, #80	; 0x50
   173f8:	str	r0, [fp, #-64]	; 0xffffffc0
   173fc:	str	r2, [fp, #-72]	; 0xffffffb8
   17400:	str	r3, [fp, #-76]	; 0xffffffb4
   17404:	mov	r3, r1
   17408:	strh	r3, [fp, #-66]	; 0xffffffbe
   1740c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   17410:	sub	r3, r3, #1
   17414:	uxth	r3, r3
   17418:	mov	r1, r3
   1741c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17420:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   17424:	mov	r3, r0
   17428:	strh	r3, [fp, #-6]
   1742c:	ldrh	r3, [fp, #-6]
   17430:	cmp	r3, #0
   17434:	bne	174b0 <flatcc_verify_union_field@@Base+0xc8>
   17438:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   1743c:	mov	r1, r3
   17440:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17444:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   17448:	mov	r3, r0
   1744c:	strh	r3, [fp, #-8]
   17450:	ldrh	r3, [fp, #-8]
   17454:	cmp	r3, #0
   17458:	moveq	r3, #1
   1745c:	movne	r3, #0
   17460:	uxtb	r3, r3
   17464:	str	r3, [fp, #-12]
   17468:	ldr	r3, [fp, #-12]
   1746c:	cmp	r3, #0
   17470:	bne	1747c <flatcc_verify_union_field@@Base+0x94>
   17474:	mov	r3, #23
   17478:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   1747c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   17480:	cmp	r3, #0
   17484:	moveq	r3, #1
   17488:	movne	r3, #0
   1748c:	uxtb	r3, r3
   17490:	str	r3, [fp, #-16]
   17494:	ldr	r3, [fp, #-16]
   17498:	cmp	r3, #0
   1749c:	bne	174a8 <flatcc_verify_union_field@@Base+0xc0>
   174a0:	mov	r3, #21
   174a4:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   174a8:	mov	r3, #0
   174ac:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   174b0:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   174b4:	sub	r3, r3, #1
   174b8:	uxth	r1, r3
   174bc:	mov	r3, #1
   174c0:	str	r3, [sp]
   174c4:	mov	r3, #1
   174c8:	mov	r2, #0
   174cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   174d0:	bl	15a64 <flatcc_verify_error_string@@Base+0x764>
   174d4:	mov	r3, r0
   174d8:	cmp	r3, #0
   174dc:	beq	1750c <flatcc_verify_union_field@@Base+0x124>
   174e0:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   174e4:	sub	r3, r3, #1
   174e8:	uxth	r1, r3
   174ec:	mov	r3, #1
   174f0:	str	r3, [sp]
   174f4:	mov	r3, #1
   174f8:	mov	r2, #0
   174fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17500:	bl	15a64 <flatcc_verify_error_string@@Base+0x764>
   17504:	mov	r3, r0
   17508:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   1750c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   17510:	mov	r1, r3
   17514:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17518:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   1751c:	mov	r3, r0
   17520:	strh	r3, [fp, #-8]
   17524:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17528:	ldr	r2, [r3]
   1752c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17530:	ldr	r1, [r3, #16]
   17534:	ldrh	r3, [fp, #-6]
   17538:	add	r3, r1, r3
   1753c:	add	r3, r2, r3
   17540:	str	r3, [fp, #-20]	; 0xffffffec
   17544:	ldr	r3, [fp, #-20]	; 0xffffffec
   17548:	ldrb	r3, [r3]
   1754c:	cmp	r3, #0
   17550:	bne	17560 <flatcc_verify_union_field@@Base+0x178>
   17554:	ldrh	r3, [fp, #-8]
   17558:	cmp	r3, #0
   1755c:	bne	17568 <flatcc_verify_union_field@@Base+0x180>
   17560:	mov	r3, #1
   17564:	b	1756c <flatcc_verify_union_field@@Base+0x184>
   17568:	mov	r3, #0
   1756c:	str	r3, [fp, #-24]	; 0xffffffe8
   17570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17574:	cmp	r3, #0
   17578:	bne	17584 <flatcc_verify_union_field@@Base+0x19c>
   1757c:	mov	r3, #24
   17580:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   17584:	ldr	r3, [fp, #-20]	; 0xffffffec
   17588:	ldrb	r3, [r3]
   1758c:	cmp	r3, #0
   17590:	bne	1759c <flatcc_verify_union_field@@Base+0x1b4>
   17594:	mov	r3, #0
   17598:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   1759c:	sub	r3, fp, #32
   175a0:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   175a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   175a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   175ac:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   175b0:	str	r0, [fp, #-28]	; 0xffffffe4
   175b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175b8:	cmp	r3, #0
   175bc:	bne	175cc <flatcc_verify_union_field@@Base+0x1e4>
   175c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175c4:	cmp	r3, #0
   175c8:	bne	175d4 <flatcc_verify_union_field@@Base+0x1ec>
   175cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175d0:	b	17640 <flatcc_verify_union_field@@Base+0x258>
   175d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   175d8:	ldr	r3, [r3]
   175dc:	str	r3, [fp, #-56]	; 0xffffffc8
   175e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   175e4:	ldr	r3, [r3, #4]
   175e8:	str	r3, [fp, #-52]	; 0xffffffcc
   175ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   175f0:	ldr	r3, [r3, #8]
   175f4:	str	r3, [fp, #-48]	; 0xffffffd0
   175f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175fc:	str	r3, [fp, #-40]	; 0xffffffd8
   17600:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17604:	ldr	r3, [r3]
   17608:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1760c:	mov	r1, r2
   17610:	mov	r0, r3
   17614:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   17618:	mov	r3, r0
   1761c:	str	r3, [fp, #-36]	; 0xffffffdc
   17620:	ldr	r3, [fp, #-20]	; 0xffffffec
   17624:	ldrb	r3, [r3]
   17628:	strb	r3, [fp, #-44]	; 0xffffffd4
   1762c:	sub	r2, fp, #56	; 0x38
   17630:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17634:	mov	r0, r2
   17638:	blx	r3
   1763c:	mov	r3, r0
   17640:	mov	r0, r3
   17644:	sub	sp, fp, #4
   17648:	ldr	fp, [sp]
   1764c:	add	sp, sp, #4
   17650:	pop	{pc}		; (ldr pc, [sp], #4)

00017654 <flatcc_verify_union_vector_field@@Base>:
   17654:	strd	r4, [sp, #-20]!	; 0xffffffec
   17658:	str	r6, [sp, #8]
   1765c:	str	fp, [sp, #12]
   17660:	str	lr, [sp, #16]
   17664:	add	fp, sp, #16
   17668:	sub	sp, sp, #68	; 0x44
   1766c:	str	r0, [fp, #-56]	; 0xffffffc8
   17670:	str	r2, [fp, #-64]	; 0xffffffc0
   17674:	str	r3, [fp, #-68]	; 0xffffffbc
   17678:	mov	r3, r1
   1767c:	strh	r3, [fp, #-58]	; 0xffffffc6
   17680:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17684:	sub	r3, r3, #1
   17688:	uxth	r3, r3
   1768c:	mov	r1, r3
   17690:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17694:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   17698:	mov	r3, r0
   1769c:	strh	r3, [fp, #-22]	; 0xffffffea
   176a0:	ldrh	r3, [fp, #-22]	; 0xffffffea
   176a4:	cmp	r3, #0
   176a8:	bne	176fc <flatcc_verify_union_vector_field@@Base+0xa8>
   176ac:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   176b0:	mov	r1, r3
   176b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176b8:	bl	15970 <flatcc_verify_error_string@@Base+0x670>
   176bc:	mov	r3, r0
   176c0:	strh	r3, [fp, #-24]	; 0xffffffe8
   176c4:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   176c8:	cmp	r3, #0
   176cc:	bne	176fc <flatcc_verify_union_vector_field@@Base+0xa8>
   176d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   176d4:	cmp	r3, #0
   176d8:	moveq	r3, #1
   176dc:	movne	r3, #0
   176e0:	uxtb	r3, r3
   176e4:	str	r3, [fp, #-28]	; 0xffffffe4
   176e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176ec:	cmp	r3, #0
   176f0:	bne	176fc <flatcc_verify_union_vector_field@@Base+0xa8>
   176f4:	mov	r3, #22
   176f8:	b	1787c <flatcc_verify_union_vector_field@@Base+0x228>
   176fc:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17700:	sub	r3, r3, #1
   17704:	uxth	r1, r3
   17708:	mvn	r3, #0
   1770c:	str	r3, [sp, #4]
   17710:	mov	r3, #1
   17714:	str	r3, [sp]
   17718:	mov	r3, #1
   1771c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17720:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17724:	bl	1683c <flatcc_verify_vector_field@@Base>
   17728:	mov	r3, r0
   1772c:	cmp	r3, #0
   17730:	beq	17768 <flatcc_verify_union_vector_field@@Base+0x114>
   17734:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   17738:	sub	r3, r3, #1
   1773c:	uxth	r1, r3
   17740:	mvn	r3, #0
   17744:	str	r3, [sp, #4]
   17748:	mov	r3, #1
   1774c:	str	r3, [sp]
   17750:	mov	r3, #1
   17754:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17758:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1775c:	bl	1683c <flatcc_verify_vector_field@@Base>
   17760:	mov	r3, r0
   17764:	b	1787c <flatcc_verify_union_vector_field@@Base+0x228>
   17768:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   1776c:	sub	r3, r3, #1
   17770:	uxth	r3, r3
   17774:	mov	r1, r3
   17778:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1777c:	bl	159ec <flatcc_verify_error_string@@Base+0x6ec>
   17780:	str	r0, [fp, #-32]	; 0xffffffe0
   17784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17788:	cmp	r3, #0
   1778c:	bne	17798 <flatcc_verify_union_vector_field@@Base+0x144>
   17790:	mov	r3, #0
   17794:	b	1787c <flatcc_verify_union_vector_field@@Base+0x228>
   17798:	mov	r1, #0
   1779c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177a0:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   177a4:	mov	r2, r0
   177a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177ac:	add	r3, r2, r3
   177b0:	str	r3, [fp, #-32]	; 0xffffffe0
   177b4:	mov	r1, #0
   177b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177bc:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   177c0:	str	r0, [fp, #-36]	; 0xffffffdc
   177c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177c8:	add	r3, r3, #4
   177cc:	str	r3, [fp, #-32]	; 0xffffffe0
   177d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177d4:	str	r3, [fp, #-40]	; 0xffffffd8
   177d8:	sub	r3, fp, #48	; 0x30
   177dc:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   177e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   177e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177e8:	bl	15bc8 <flatcc_verify_error_string@@Base+0x8c8>
   177ec:	str	r0, [fp, #-44]	; 0xffffffd4
   177f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   177f4:	cmp	r3, #0
   177f8:	bne	17808 <flatcc_verify_union_vector_field@@Base+0x1b4>
   177fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17800:	cmp	r3, #0
   17804:	bne	17810 <flatcc_verify_union_vector_field@@Base+0x1bc>
   17808:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1780c:	b	1787c <flatcc_verify_union_vector_field@@Base+0x228>
   17810:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17814:	ldr	r4, [r3]
   17818:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1781c:	ldr	r5, [r3, #4]
   17820:	ldr	r6, [fp, #-48]	; 0xffffffd0
   17824:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17828:	ldr	r3, [r3]
   1782c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17830:	mov	r1, r2
   17834:	mov	r0, r3
   17838:	bl	15620 <flatcc_verify_error_string@@Base+0x320>
   1783c:	mov	r1, r0
   17840:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17844:	ldr	r3, [r3, #8]
   17848:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1784c:	str	r2, [sp, #12]
   17850:	str	r3, [sp, #8]
   17854:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17858:	str	r3, [sp, #4]
   1785c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17860:	str	r3, [sp]
   17864:	mov	r3, r1
   17868:	mov	r2, r6
   1786c:	mov	r1, r5
   17870:	mov	r0, r4
   17874:	bl	16488 <flatcc_verify_error_string@@Base+0x1188>
   17878:	mov	r3, r0
   1787c:	mov	r0, r3
   17880:	sub	sp, fp, #16
   17884:	ldrd	r4, [sp]
   17888:	ldr	r6, [sp, #8]
   1788c:	ldr	fp, [sp, #12]
   17890:	add	sp, sp, #16
   17894:	pop	{pc}		; (ldr pc, [sp], #4)

00017898 <__libc_csu_init@@Base>:
   17898:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1789c:	mov	r7, r0
   178a0:	ldr	r6, [pc, #72]	; 178f0 <__libc_csu_init@@Base+0x58>
   178a4:	ldr	r5, [pc, #72]	; 178f4 <__libc_csu_init@@Base+0x5c>
   178a8:	add	r6, pc, r6
   178ac:	add	r5, pc, r5
   178b0:	sub	r6, r6, r5
   178b4:	mov	r8, r1
   178b8:	mov	r9, r2
   178bc:	bl	10c94 <strcmp@plt-0x20>
   178c0:	asrs	r6, r6, #2
   178c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   178c8:	mov	r4, #0
   178cc:	add	r4, r4, #1
   178d0:	ldr	r3, [r5], #4
   178d4:	mov	r2, r9
   178d8:	mov	r1, r8
   178dc:	mov	r0, r7
   178e0:	blx	r3
   178e4:	cmp	r6, r4
   178e8:	bne	178cc <__libc_csu_init@@Base+0x34>
   178ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178f0:	andeq	r1, r1, r4, ror #12
   178f4:	andeq	r1, r1, ip, asr r6

000178f8 <__libc_csu_fini@@Base>:
   178f8:	bx	lr

Disassembly of section .fini:

000178fc <.fini>:
   178fc:	push	{r3, lr}
   17900:	pop	{r3, pc}
