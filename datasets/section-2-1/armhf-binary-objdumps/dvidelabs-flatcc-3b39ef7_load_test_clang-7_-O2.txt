
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012398 <.init>:
   12398:	push	{r3, lr}
   1239c:	bl	124e4 <_start@@Base+0x3c>
   123a0:	pop	{r3, pc}

Disassembly of section .plt:

000123a4 <strcmp@plt-0x14>:
   123a4:	push	{lr}		; (str lr, [sp, #-4]!)
   123a8:	ldr	lr, [pc, #4]	; 123b4 <strcmp@plt-0x4>
   123ac:	add	lr, pc, lr
   123b0:	ldr	pc, [lr, #8]!
   123b4:	andeq	r7, r1, ip, asr #24

000123b8 <strcmp@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #94208	; 0x17000
   123c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c4 <printf@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #94208	; 0x17000
   123cc:	ldr	pc, [ip, #3140]!	; 0xc44

000123d0 <fopen@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #94208	; 0x17000
   123d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000123dc <free@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #94208	; 0x17000
   123e4:	ldr	pc, [ip, #3124]!	; 0xc34

000123e8 <memcpy@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f4 <fwrite_unlocked@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3108]!	; 0xc24

00012400 <memcmp@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001240c <realloc@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3092]!	; 0xc14

00012418 <gettimeofday@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3084]!	; 0xc0c

00012424 <puts@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #94208	; 0x17000
   1242c:	ldr	pc, [ip, #3076]!	; 0xc04

00012430 <malloc@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #94208	; 0x17000
   12438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001243c <__libc_start_main@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #94208	; 0x17000
   12444:	ldr	pc, [ip, #3060]!	; 0xbf4

00012448 <__gmon_start__@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #94208	; 0x17000
   12450:	ldr	pc, [ip, #3052]!	; 0xbec

00012454 <strlen@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #94208	; 0x17000
   1245c:	ldr	pc, [ip, #3044]!	; 0xbe4

00012460 <posix_memalign@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #94208	; 0x17000
   12468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001246c <memset@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #94208	; 0x17000
   12474:	ldr	pc, [ip, #3028]!	; 0xbd4

00012478 <memchr@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #94208	; 0x17000
   12480:	ldr	pc, [ip, #3020]!	; 0xbcc

00012484 <fclose@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #94208	; 0x17000
   1248c:	ldr	pc, [ip, #3012]!	; 0xbc4

00012490 <abort@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #94208	; 0x17000
   12498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001249c <__assert_fail@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #94208	; 0x17000
   124a4:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1243c <__libc_start_main@plt>
   124d4:	bl	12490 <abort@plt>
   124d8:			; <UNDEFINED> instruction: 0x000182b4
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r8, r1, r4, asr r2
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12448 <__gmon_start__@plt>
   12500:	andeq	r7, r1, ip, lsl #22
   12504:	andeq	r0, r0, r0, rrx
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	sl, r2, r4, ror r0
   1252c:	andeq	sl, r2, r4, ror r0
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	sl, r2, r4, ror r0
   12564:	andeq	sl, r2, r4, ror r0
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	sl, r2, r8, ror r0
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #280	; 0x118
   125ac:	add	r4, sp, #28
   125b0:	mov	r0, r4
   125b4:	bl	130e4 <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12ca8 <main@@Base+0x710>
   125c0:	sub	r1, fp, #76	; 0x4c
   125c4:	mov	r0, r4
   125c8:	bl	17aa0 <flatcc_builder_finalize_buffer@@Base>
   125cc:	mov	r7, r0
   125d0:	ldr	r0, [pc, #1536]	; 12bd8 <main@@Base+0x640>
   125d4:	ldr	r1, [pc, #1536]	; 12bdc <main@@Base+0x644>
   125d8:	add	r0, pc, r0
   125dc:	add	r1, pc, r1
   125e0:	bl	123d0 <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	1266c <main@@Base+0xd4>
   125ec:	ldr	r6, [fp, #-76]	; 0xffffffb4
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f4 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12484 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	12a4c <main@@Base+0x4b4>
   12620:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12624:	ldr	r0, [pc, #1460]	; 12be0 <main@@Base+0x648>
   12628:	add	r0, pc, r0
   1262c:	bl	123c4 <printf@plt>
   12630:	ldr	r0, [pc, #1452]	; 12be4 <main@@Base+0x64c>
   12634:	add	r0, pc, r0
   12638:	bl	12424 <puts@plt>
   1263c:	sub	r0, fp, #72	; 0x48
   12640:	mov	r1, #0
   12644:	bl	12418 <gettimeofday@plt>
   12648:	ldr	r0, [pc, #1432]	; 12be8 <main@@Base+0x650>
   1264c:	ldr	r0, [pc, r0]
   12650:	cmp	r0, #0
   12654:	beq	12674 <main@@Base+0xdc>
   12658:	ldr	r1, [pc, #1420]	; 12bec <main@@Base+0x654>
   1265c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12660:	add	r1, pc, r1
   12664:	ldr	r1, [r1, #4]
   12668:	b	1268c <main@@Base+0xf4>
   1266c:	mvn	r4, #0
   12670:	b	12a4c <main@@Base+0x4b4>
   12674:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12678:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1267c:	ldr	r2, [pc, #1388]	; 12bf0 <main@@Base+0x658>
   12680:	add	r2, pc, r2
   12684:	strd	r0, [r2]
   12688:	mov	r2, r0
   1268c:	sub	r0, r2, r0
   12690:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12694:	vldr	d8, [pc, #1004]	; 12a88 <main@@Base+0x4f0>
   12698:	vmov	s2, r0
   1269c:	add	r0, r7, #8
   126a0:	sub	r1, r2, r1
   126a4:	vmov	s0, r1
   126a8:	vcvt.f64.s32	d16, s0
   126ac:	vcvt.f64.s32	d17, s2
   126b0:	str	r0, [sp, #4]
   126b4:	mov	r0, #0
   126b8:	ldr	sl, [pc, #1332]	; 12bf4 <main@@Base+0x65c>
   126bc:	ldr	r6, [pc, #1332]	; 12bf8 <main@@Base+0x660>
   126c0:	vdiv.f64	d16, d16, d8
   126c4:	str	r7, [sp]
   126c8:	vadd.f64	d9, d16, d17
   126cc:	add	sl, pc, sl
   126d0:	add	r6, pc, r6
   126d4:	add	r4, sp, #28
   126d8:	str	r0, [sp, #8]
   126dc:	mov	r0, r4
   126e0:	bl	12ca8 <main@@Base+0x710>
   126e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126e8:	mov	r0, r4
   126ec:	mov	r1, r7
   126f0:	bl	17a48 <flatcc_builder_copy_buffer@@Base>
   126f4:	cmp	r7, #0
   126f8:	beq	12b24 <main@@Base+0x58c>
   126fc:	ldr	r0, [r7, #4]
   12700:	movw	r1, #20301	; 0x4f4d
   12704:	movt	r1, #21326	; 0x534e
   12708:	cmp	r0, r1
   1270c:	bne	12b24 <main@@Base+0x58c>
   12710:	ldr	r8, [r7]
   12714:	mov	r5, r7
   12718:	ldr	r0, [r5, r8]!
   1271c:	mov	r4, r5
   12720:	ldrh	r9, [r4, -r0]!
   12724:	cmp	r9, #11
   12728:	bls	12af8 <main@@Base+0x560>
   1272c:	ldrh	r0, [r4, #10]
   12730:	cmp	r0, #0
   12734:	beq	12af8 <main@@Base+0x560>
   12738:	mov	r1, r5
   1273c:	ldr	r0, [r1, r0]!
   12740:	add	r0, r1, r0
   12744:	ldr	r1, [pc, #1216]	; 12c0c <main@@Base+0x674>
   12748:	add	r0, r0, #4
   1274c:	add	r1, pc, r1
   12750:	bl	123b8 <strcmp@plt>
   12754:	cmp	r0, #0
   12758:	bne	12ba4 <main@@Base+0x60c>
   1275c:	cmp	r9, #28
   12760:	bcc	12b84 <main@@Base+0x5ec>
   12764:	ldrh	r0, [r4, #26]
   12768:	cmp	r0, #0
   1276c:	beq	12b84 <main@@Base+0x5ec>
   12770:	ldr	r1, [r5, r0]!
   12774:	ldr	r2, [r5, r1]!
   12778:	cmp	r2, #1000	; 0x3e8
   1277c:	bne	12b84 <main@@Base+0x5ec>
   12780:	add	r1, r1, r8
   12784:	add	r2, r5, #4
   12788:	add	r0, r1, r0
   1278c:	ldr	r1, [sp, #4]
   12790:	str	r2, [sp, #16]
   12794:	add	r7, r1, r0
   12798:	ldr	r0, [r2, #-4]
   1279c:	mov	r2, #0
   127a0:	str	r0, [sp, #12]
   127a4:	ldr	r0, [sp, #12]
   127a8:	cmp	r0, r2
   127ac:	bls	12b44 <main@@Base+0x5ac>
   127b0:	ldr	r1, [sp, #16]
   127b4:	ldr	lr, [r1, r2, lsl #2]!
   127b8:	adds	r0, r1, lr
   127bc:	beq	12b24 <main@@Base+0x58c>
   127c0:	ldr	r1, [r0]
   127c4:	mov	r3, r0
   127c8:	str	r2, [sp, #20]
   127cc:	ldrh	r2, [r3, -r1]!
   127d0:	cmp	r2, #12
   127d4:	bcc	12af8 <main@@Base+0x560>
   127d8:	ldrh	r1, [r3, #10]
   127dc:	cmp	r1, #0
   127e0:	beq	12af8 <main@@Base+0x560>
   127e4:	mov	r4, r0
   127e8:	mov	r5, #0
   127ec:	cmp	r2, #16
   127f0:	ldr	ip, [r4, r1]!
   127f4:	add	r4, r4, ip
   127f8:	add	r4, r4, #4
   127fc:	bcc	12814 <main@@Base+0x27c>
   12800:	ldrh	r2, [r3, #14]
   12804:	cmp	r2, #0
   12808:	ldrne	r2, [r0, r2]!
   1280c:	addne	r0, r0, r2
   12810:	addne	r5, r0, #4
   12814:	ldr	r0, [r4, #-4]
   12818:	cmp	r0, #700	; 0x2bc
   1281c:	bne	12b64 <main@@Base+0x5cc>
   12820:	cmp	r5, #0
   12824:	beq	12b04 <main@@Base+0x56c>
   12828:	ldr	r0, [r5, #-4]
   1282c:	movw	r2, #34464	; 0x86a0
   12830:	movt	r2, #1
   12834:	cmp	r0, r2
   12838:	bne	12b04 <main@@Base+0x56c>
   1283c:	add	r0, ip, lr
   12840:	mov	r9, #0
   12844:	str	r7, [sp, #24]
   12848:	add	r0, r0, r1
   1284c:	add	r8, r7, r0
   12850:	mov	r0, r8
   12854:	mov	r1, sl
   12858:	mov	r2, #7
   1285c:	bl	12400 <memcmp@plt>
   12860:	cmp	r0, #0
   12864:	bne	12a90 <main@@Base+0x4f8>
   12868:	add	r9, r9, #1
   1286c:	add	r8, r8, #7
   12870:	cmp	r9, #100	; 0x64
   12874:	bcc	12850 <main@@Base+0x2b8>
   12878:	ldr	r7, [sp, #24]
   1287c:	mov	r4, #0
   12880:	mov	r0, r5
   12884:	mov	r1, r6
   12888:	mov	r2, #1000	; 0x3e8
   1288c:	bl	12400 <memcmp@plt>
   12890:	cmp	r0, #0
   12894:	bne	12ad8 <main@@Base+0x540>
   12898:	add	r4, r4, #1
   1289c:	add	r5, r5, #1000	; 0x3e8
   128a0:	cmp	r4, #99	; 0x63
   128a4:	bls	12880 <main@@Base+0x2e8>
   128a8:	ldr	r2, [sp, #20]
   128ac:	add	r7, r7, #4
   128b0:	add	r2, r2, #1
   128b4:	lsr	r0, r2, #3
   128b8:	cmp	r0, #124	; 0x7c
   128bc:	bls	127a4 <main@@Base+0x20c>
   128c0:	ldr	r0, [sp, #8]
   128c4:	ldr	r7, [sp]
   128c8:	add	r0, r0, #1
   128cc:	cmp	r0, #10
   128d0:	bcc	126d4 <main@@Base+0x13c>
   128d4:	sub	r0, fp, #72	; 0x48
   128d8:	mov	r1, #0
   128dc:	bl	12418 <gettimeofday@plt>
   128e0:	ldr	r6, [pc, #832]	; 12c28 <main@@Base+0x690>
   128e4:	ldr	r6, [pc, r6]
   128e8:	cmp	r6, #0
   128ec:	beq	12904 <main@@Base+0x36c>
   128f0:	ldr	r0, [pc, #820]	; 12c2c <main@@Base+0x694>
   128f4:	ldr	r8, [fp, #-72]	; 0xffffffb8
   128f8:	add	r0, pc, r0
   128fc:	ldr	r9, [r0, #4]
   12900:	b	1291c <main@@Base+0x384>
   12904:	ldr	r6, [fp, #-72]	; 0xffffffb8
   12908:	ldr	r9, [fp, #-68]	; 0xffffffbc
   1290c:	ldr	r0, [pc, #796]	; 12c30 <main@@Base+0x698>
   12910:	add	r0, pc, r0
   12914:	mov	r8, r6
   12918:	stm	r0, {r6, r9}
   1291c:	ldr	r5, [fp, #-68]	; 0xffffffbc
   12920:	ldr	r4, [fp, #-76]	; 0xffffffb4
   12924:	ldr	r0, [pc, #776]	; 12c34 <main@@Base+0x69c>
   12928:	ldr	r1, [pc, #776]	; 12c38 <main@@Base+0x6a0>
   1292c:	add	r0, pc, r0
   12930:	add	r1, pc, r1
   12934:	bl	123c4 <printf@plt>
   12938:	sub	r0, r8, r6
   1293c:	sub	r1, r5, r9
   12940:	vmov	s0, r1
   12944:	vmov	s2, r0
   12948:	vcvt.f64.s32	d16, s0
   1294c:	vcvt.f64.s32	d17, s2
   12950:	ldr	r0, [pc, #740]	; 12c3c <main@@Base+0x6a4>
   12954:	vdiv.f64	d16, d16, d8
   12958:	vadd.f64	d16, d16, d17
   1295c:	vsub.f64	d9, d16, d9
   12960:	vmov	r2, r3, d9
   12964:	add	r0, pc, r0
   12968:	bl	123c4 <printf@plt>
   1296c:	ldr	r0, [pc, #716]	; 12c40 <main@@Base+0x6a8>
   12970:	mov	r1, #10
   12974:	add	r0, pc, r0
   12978:	bl	123c4 <printf@plt>
   1297c:	ldr	r0, [pc, #704]	; 12c44 <main@@Base+0x6ac>
   12980:	mov	r1, r4
   12984:	add	r0, pc, r0
   12988:	bl	123c4 <printf@plt>
   1298c:	vmov	s0, r4
   12990:	vmov.f64	d10, #36	; 0x41200000  10.0
   12994:	vcvt.f64.u32	d16, s0
   12998:	ldr	r0, [pc, #680]	; 12c48 <main@@Base+0x6b0>
   1299c:	vmul.f64	d16, d16, d10
   129a0:	vdiv.f64	d16, d16, d8
   129a4:	vdiv.f64	d16, d16, d9
   129a8:	vmov	r2, r3, d16
   129ac:	add	r0, pc, r0
   129b0:	bl	123c4 <printf@plt>
   129b4:	ldr	r0, [pc, #656]	; 12c4c <main@@Base+0x6b4>
   129b8:	vdiv.f64	d16, d10, d9
   129bc:	vmov	r2, r3, d16
   129c0:	add	r0, pc, r0
   129c4:	bl	123c4 <printf@plt>
   129c8:	vldr	d17, [pc, #504]	; 12bc8 <main@@Base+0x630>
   129cc:	vldr	d18, [pc, #508]	; 12bd0 <main@@Base+0x638>
   129d0:	vmul.f64	d16, d9, d17
   129d4:	vdiv.f64	d16, d16, d10
   129d8:	vcmpe.f64	d16, d18
   129dc:	vmrs	APSR_nzcv, fpscr
   129e0:	bpl	129f4 <main@@Base+0x45c>
   129e4:	ldr	r0, [pc, #612]	; 12c50 <main@@Base+0x6b8>
   129e8:	vmov	r2, r3, d16
   129ec:	add	r0, pc, r0
   129f0:	b	12a44 <main@@Base+0x4ac>
   129f4:	vcmpe.f64	d16, d8
   129f8:	vmrs	APSR_nzcv, fpscr
   129fc:	bpl	12a14 <main@@Base+0x47c>
   12a00:	ldr	r0, [pc, #588]	; 12c54 <main@@Base+0x6bc>
   12a04:	vdiv.f64	d16, d16, d18
   12a08:	vmov	r2, r3, d16
   12a0c:	add	r0, pc, r0
   12a10:	b	12a44 <main@@Base+0x4ac>
   12a14:	vcmpe.f64	d16, d17
   12a18:	vmrs	APSR_nzcv, fpscr
   12a1c:	bpl	12a34 <main@@Base+0x49c>
   12a20:	ldr	r0, [pc, #560]	; 12c58 <main@@Base+0x6c0>
   12a24:	vdiv.f64	d16, d16, d8
   12a28:	vmov	r2, r3, d16
   12a2c:	add	r0, pc, r0
   12a30:	b	12a44 <main@@Base+0x4ac>
   12a34:	ldr	r0, [pc, #544]	; 12c5c <main@@Base+0x6c4>
   12a38:	vdiv.f64	d16, d16, d17
   12a3c:	vmov	r2, r3, d16
   12a40:	add	r0, pc, r0
   12a44:	bl	123c4 <printf@plt>
   12a48:	mov	r4, #0
   12a4c:	add	r0, sp, #28
   12a50:	bl	1344c <flatcc_builder_clear@@Base>
   12a54:	mov	r0, r7
   12a58:	bl	123dc <free@plt>
   12a5c:	cmp	r4, #0
   12a60:	beq	12a70 <main@@Base+0x4d8>
   12a64:	ldr	r0, [pc, #500]	; 12c60 <main@@Base+0x6c8>
   12a68:	add	r0, pc, r0
   12a6c:	bl	12424 <puts@plt>
   12a70:	mov	r0, r4
   12a74:	sub	sp, fp, #56	; 0x38
   12a78:	vpop	{d8-d10}
   12a7c:	add	sp, sp, #4
   12a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a84:	nop	{0}
   12a88:	andeq	r0, r0, r0
   12a8c:	smlawbmi	lr, r0, r4, r8
   12a90:	ldr	r0, [pc, #508]	; 12c94 <main@@Base+0x6fc>
   12a94:	mov	r1, r9
   12a98:	mov	r2, r4
   12a9c:	add	r0, pc, r0
   12aa0:	bl	123c4 <printf@plt>
   12aa4:	ldr	r0, [sp]
   12aa8:	sub	r1, r8, r0
   12aac:	ldr	r0, [pc, #484]	; 12c98 <main@@Base+0x700>
   12ab0:	add	r0, pc, r0
   12ab4:	bl	123c4 <printf@plt>
   12ab8:	ldr	r0, [pc, #476]	; 12c9c <main@@Base+0x704>
   12abc:	ldr	r1, [pc, #476]	; 12ca0 <main@@Base+0x708>
   12ac0:	ldr	r3, [pc, #476]	; 12ca4 <main@@Base+0x70c>
   12ac4:	mov	r2, #85	; 0x55
   12ac8:	add	r0, pc, r0
   12acc:	add	r1, pc, r1
   12ad0:	add	r3, pc, r3
   12ad4:	bl	1249c <__assert_fail@plt>
   12ad8:	ldr	r0, [pc, #316]	; 12c1c <main@@Base+0x684>
   12adc:	ldr	r1, [pc, #316]	; 12c20 <main@@Base+0x688>
   12ae0:	ldr	r3, [pc, #316]	; 12c24 <main@@Base+0x68c>
   12ae4:	mov	r2, #91	; 0x5b
   12ae8:	add	r0, pc, r0
   12aec:	add	r1, pc, r1
   12af0:	add	r3, pc, r3
   12af4:	bl	1249c <__assert_fail@plt>
   12af8:	ldr	r0, [pc, #252]	; 12bfc <main@@Base+0x664>
   12afc:	add	r0, pc, r0
   12b00:	b	12b2c <main@@Base+0x594>
   12b04:	ldr	r0, [pc, #380]	; 12c88 <main@@Base+0x6f0>
   12b08:	ldr	r1, [pc, #380]	; 12c8c <main@@Base+0x6f4>
   12b0c:	ldr	r3, [pc, #380]	; 12c90 <main@@Base+0x6f8>
   12b10:	mov	r2, #78	; 0x4e
   12b14:	add	r0, pc, r0
   12b18:	add	r1, pc, r1
   12b1c:	add	r3, pc, r3
   12b20:	bl	1249c <__assert_fail@plt>
   12b24:	ldr	r0, [pc, #212]	; 12c00 <main@@Base+0x668>
   12b28:	add	r0, pc, r0
   12b2c:	ldr	r1, [pc, #208]	; 12c04 <main@@Base+0x66c>
   12b30:	ldr	r3, [pc, #208]	; 12c08 <main@@Base+0x670>
   12b34:	movw	r2, #699	; 0x2bb
   12b38:	add	r1, pc, r1
   12b3c:	add	r3, pc, r3
   12b40:	bl	1249c <__assert_fail@plt>
   12b44:	ldr	r0, [pc, #292]	; 12c70 <main@@Base+0x6d8>
   12b48:	ldr	r1, [pc, #292]	; 12c74 <main@@Base+0x6dc>
   12b4c:	ldr	r3, [pc, #292]	; 12c78 <main@@Base+0x6e0>
   12b50:	movw	r2, #693	; 0x2b5
   12b54:	add	r0, pc, r0
   12b58:	add	r1, pc, r1
   12b5c:	add	r3, pc, r3
   12b60:	bl	1249c <__assert_fail@plt>
   12b64:	ldr	r0, [pc, #272]	; 12c7c <main@@Base+0x6e4>
   12b68:	ldr	r1, [pc, #272]	; 12c80 <main@@Base+0x6e8>
   12b6c:	ldr	r3, [pc, #272]	; 12c84 <main@@Base+0x6ec>
   12b70:	mov	r2, #74	; 0x4a
   12b74:	add	r0, pc, r0
   12b78:	add	r1, pc, r1
   12b7c:	add	r3, pc, r3
   12b80:	bl	1249c <__assert_fail@plt>
   12b84:	ldr	r0, [pc, #132]	; 12c10 <main@@Base+0x678>
   12b88:	ldr	r1, [pc, #132]	; 12c14 <main@@Base+0x67c>
   12b8c:	ldr	r3, [pc, #132]	; 12c18 <main@@Base+0x680>
   12b90:	mov	r2, #143	; 0x8f
   12b94:	add	r0, pc, r0
   12b98:	add	r1, pc, r1
   12b9c:	add	r3, pc, r3
   12ba0:	bl	1249c <__assert_fail@plt>
   12ba4:	ldr	r0, [pc, #184]	; 12c64 <main@@Base+0x6cc>
   12ba8:	ldr	r1, [pc, #184]	; 12c68 <main@@Base+0x6d0>
   12bac:	ldr	r3, [pc, #184]	; 12c6c <main@@Base+0x6d4>
   12bb0:	mov	r2, #139	; 0x8b
   12bb4:	add	r0, pc, r0
   12bb8:	add	r1, pc, r1
   12bbc:	add	r3, pc, r3
   12bc0:	bl	1249c <__assert_fail@plt>
   12bc4:	nop	{0}
   12bc8:	andeq	r0, r0, r0
   12bcc:	bicmi	ip, sp, r5, ror #26
   12bd0:	andeq	r0, r0, r0
   12bd4:	addmi	r4, pc, r0
   12bd8:	andeq	r5, r0, r4, ror #25
   12bdc:	strdeq	r5, [r0], -r6
   12be0:	andeq	r5, r0, sp, lsr #25
   12be4:	andeq	r6, r0, r4, ror r2
   12be8:	andeq	r7, r1, r4, lsl lr
   12bec:	andeq	r7, r1, r0, lsl #28
   12bf0:	andeq	r7, r1, r0, ror #27
   12bf4:	andeq	r5, r0, lr, asr #26
   12bf8:	andeq	r7, r1, r8, lsr #19
   12bfc:	andeq	r5, r0, sp, ror fp
   12c00:	andeq	r5, r0, r4, ror #20
   12c04:	andeq	r5, r0, sl, ror sl
   12c08:	andeq	r5, r0, ip, ror #21
   12c0c:	muleq	r0, fp, fp
   12c10:	andeq	r5, r0, r0, ror #14
   12c14:	andeq	r5, r0, r5, ror #14
   12c18:	andeq	r5, r0, r3, asr #15
   12c1c:	andeq	r7, r0, pc, lsr #3
   12c20:	andeq	r5, r0, r1, lsl r8
   12c24:	andeq	r5, r0, sl, lsr #23
   12c28:	andeq	r7, r1, ip, ror fp
   12c2c:	andeq	r7, r1, r8, ror #22
   12c30:	andeq	r7, r1, r0, asr fp
   12c34:	andeq	r5, r0, r6, ror lr
   12c38:	andeq	r5, r0, r6, asr #20
   12c3c:	andeq	r5, r0, sp, asr #28
   12c40:	andeq	r5, r0, r5, asr lr
   12c44:	andeq	r5, r0, r5, asr lr
   12c48:	andeq	r5, r0, r0, asr #28
   12c4c:	andeq	r5, r0, r4, asr #28
   12c50:	andeq	r5, r0, r9, lsr lr
   12c54:	andeq	r5, r0, r1, lsr lr
   12c58:	andeq	r5, r0, r9, lsr #28
   12c5c:	andeq	r5, r0, sp, lsr #28
   12c60:	andeq	r5, r0, r0, lsr #28
   12c64:	andeq	r5, r0, r0, asr #14
   12c68:	andeq	r5, r0, r5, asr #14
   12c6c:	andeq	r5, r0, r3, lsr #15
   12c70:			; <UNDEFINED> instruction: 0x00005bb4
   12c74:	andeq	r5, r0, sl, asr sl
   12c78:	andeq	r5, r0, r3, ror #23
   12c7c:	andeq	r7, r0, r3, lsr #2
   12c80:	andeq	r5, r0, r5, lsl #15
   12c84:	andeq	r5, r0, lr, lsl fp
   12c88:	andeq	r7, r0, r3, lsl #3
   12c8c:	andeq	r5, r0, r5, ror #15
   12c90:	andeq	r5, r0, lr, ror fp
   12c94:	andeq	r5, r0, pc, lsr ip
   12c98:	andeq	r5, r0, fp, asr #24
   12c9c:	andeq	r7, r0, pc, asr #3
   12ca0:	andeq	r5, r0, r1, lsr r8
   12ca4:	andeq	r5, r0, sl, asr #23
   12ca8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12cac:	add	fp, sp, #24
   12cb0:	mov	r4, r0
   12cb4:	bl	13288 <flatcc_builder_reset@@Base>
   12cb8:	ldr	r1, [pc, #548]	; 12ee4 <main@@Base+0x94c>
   12cbc:	mov	r0, r4
   12cc0:	mov	r2, #0
   12cc4:	mov	r3, #0
   12cc8:	add	r1, pc, r1
   12ccc:	bl	13e88 <flatcc_builder_start_buffer@@Base>
   12cd0:	cmp	r0, #0
   12cd4:	bne	12ce4 <main@@Base+0x74c>
   12cd8:	mov	r0, r4
   12cdc:	mov	r1, #36	; 0x24
   12ce0:	bl	15460 <flatcc_builder_start_table@@Base>
   12ce4:	ldr	r1, [pc, #508]	; 12ee8 <main@@Base+0x950>
   12ce8:	mov	r0, r4
   12cec:	add	r1, pc, r1
   12cf0:	bl	176e8 <flatcc_builder_create_string_str@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d14 <main@@Base+0x77c>
   12cfc:	mov	r5, r0
   12d00:	mov	r0, r4
   12d04:	mov	r1, #3
   12d08:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   12d0c:	cmp	r0, #0
   12d10:	strne	r5, [r0]
   12d14:	mov	r0, r4
   12d18:	bl	14fe0 <flatcc_builder_start_offset_vector@@Base>
   12d1c:	ldr	r5, [pc, #456]	; 12eec <main@@Base+0x954>
   12d20:	ldr	r6, [pc, #456]	; 12ef0 <main@@Base+0x958>
   12d24:	ldr	r8, [pc, #456]	; 12ef4 <main@@Base+0x95c>
   12d28:	mov	r9, #0
   12d2c:	add	r5, pc, r5
   12d30:	add	r6, pc, r6
   12d34:	add	r8, pc, r8
   12d38:	mov	r0, r4
   12d3c:	mov	r1, #36	; 0x24
   12d40:	bl	15460 <flatcc_builder_start_table@@Base>
   12d44:	mov	r0, r4
   12d48:	bl	152ac <flatcc_builder_start_string@@Base>
   12d4c:	mov	r7, #100	; 0x64
   12d50:	mov	r0, r4
   12d54:	mov	r1, r5
   12d58:	mov	r2, #7
   12d5c:	bl	14b94 <flatcc_builder_append_string@@Base>
   12d60:	subs	r7, r7, #1
   12d64:	bne	12d50 <main@@Base+0x7b8>
   12d68:	mov	r0, r4
   12d6c:	bl	17750 <flatcc_builder_end_string@@Base>
   12d70:	cmp	r0, #0
   12d74:	beq	12d90 <main@@Base+0x7f8>
   12d78:	mov	r7, r0
   12d7c:	mov	r0, r4
   12d80:	mov	r1, #3
   12d84:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   12d88:	cmp	r0, #0
   12d8c:	strne	r7, [r0]
   12d90:	mov	r0, r4
   12d94:	mov	r1, #1
   12d98:	mov	r2, #1
   12d9c:	mvn	r3, #0
   12da0:	bl	14f54 <flatcc_builder_start_vector@@Base>
   12da4:	mov	r7, #100	; 0x64
   12da8:	mov	r0, r4
   12dac:	mov	r1, r6
   12db0:	mov	r2, #1000	; 0x3e8
   12db4:	bl	145e0 <flatcc_builder_append_vector@@Base>
   12db8:	subs	r7, r7, #1
   12dbc:	bne	12da8 <main@@Base+0x810>
   12dc0:	mov	r0, r4
   12dc4:	bl	161d4 <flatcc_builder_end_vector@@Base>
   12dc8:	cmp	r0, #0
   12dcc:	beq	12de8 <main@@Base+0x850>
   12dd0:	mov	r7, r0
   12dd4:	mov	r0, r4
   12dd8:	mov	r1, #5
   12ddc:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   12de0:	cmp	r0, #0
   12de4:	strne	r7, [r0]
   12de8:	mov	r0, r4
   12dec:	mov	r1, r8
   12df0:	mov	r2, #1
   12df4:	bl	15df4 <flatcc_builder_check_required@@Base>
   12df8:	cmp	r0, #0
   12dfc:	beq	12e84 <main@@Base+0x8ec>
   12e00:	mov	r0, r4
   12e04:	bl	15e90 <flatcc_builder_end_table@@Base>
   12e08:	cmp	r0, #0
   12e0c:	beq	12ea4 <main@@Base+0x90c>
   12e10:	mov	r1, r0
   12e14:	mov	r0, r4
   12e18:	bl	14828 <flatcc_builder_offset_vector_push@@Base>
   12e1c:	add	r9, r9, #1
   12e20:	cmp	r9, #1000	; 0x3e8
   12e24:	bcc	12d38 <main@@Base+0x7a0>
   12e28:	mov	r0, r4
   12e2c:	bl	151c8 <flatcc_builder_end_offset_vector@@Base>
   12e30:	cmp	r0, #0
   12e34:	beq	12ec4 <main@@Base+0x92c>
   12e38:	mov	r5, r0
   12e3c:	mov	r0, r4
   12e40:	mov	r1, #11
   12e44:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   12e48:	cmp	r0, #0
   12e4c:	mov	r2, #1
   12e50:	strne	r5, [r0]
   12e54:	mov	r0, r4
   12e58:	ldr	r1, [pc, #152]	; 12ef8 <main@@Base+0x960>
   12e5c:	add	r1, pc, r1
   12e60:	bl	15df4 <flatcc_builder_check_required@@Base>
   12e64:	cmp	r0, #0
   12e68:	beq	12e84 <main@@Base+0x8ec>
   12e6c:	mov	r0, r4
   12e70:	bl	15e90 <flatcc_builder_end_table@@Base>
   12e74:	mov	r1, r0
   12e78:	mov	r0, r4
   12e7c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e80:	b	14088 <flatcc_builder_end_buffer@@Base>
   12e84:	ldr	r0, [pc, #112]	; 12efc <main@@Base+0x964>
   12e88:	ldr	r1, [pc, #112]	; 12f00 <main@@Base+0x968>
   12e8c:	ldr	r3, [pc, #112]	; 12f04 <main@@Base+0x96c>
   12e90:	mov	r2, #235	; 0xeb
   12e94:	add	r0, pc, r0
   12e98:	add	r1, pc, r1
   12e9c:	add	r3, pc, r3
   12ea0:	bl	1249c <__assert_fail@plt>
   12ea4:	ldr	r0, [pc, #92]	; 12f08 <main@@Base+0x970>
   12ea8:	ldr	r1, [pc, #92]	; 12f0c <main@@Base+0x974>
   12eac:	ldr	r3, [pc, #92]	; 12f10 <main@@Base+0x978>
   12eb0:	mov	r2, #42	; 0x2a
   12eb4:	add	r0, pc, r0
   12eb8:	add	r1, pc, r1
   12ebc:	add	r3, pc, r3
   12ec0:	bl	1249c <__assert_fail@plt>
   12ec4:	ldr	r0, [pc, #72]	; 12f14 <main@@Base+0x97c>
   12ec8:	ldr	r1, [pc, #72]	; 12f18 <main@@Base+0x980>
   12ecc:	ldr	r3, [pc, #72]	; 12f1c <main@@Base+0x984>
   12ed0:	mov	r2, #56	; 0x38
   12ed4:	add	r0, pc, r0
   12ed8:	add	r1, pc, r1
   12edc:	add	r3, pc, r3
   12ee0:	bl	1249c <__assert_fail@plt>
   12ee4:	andeq	r5, r0, r6, lsl #14
   12ee8:	strdeq	r5, [r0], -fp
   12eec:	andeq	r5, r0, lr, ror #13
   12ef0:	andeq	r7, r1, r8, asr #6
   12ef4:	andeq	r5, r0, r0, asr fp
   12ef8:	andeq	r5, r0, r8, lsr #20
   12efc:	andeq	r5, r0, lr, lsl #11
   12f00:	andeq	r5, r0, ip, lsr #12
   12f04:	muleq	r0, pc, r6	; <UNPREDICTABLE>
   12f08:	andeq	r5, r0, pc, lsl r5
   12f0c:	andeq	r5, r0, r5, asr #8
   12f10:	andeq	r5, r0, r9, lsl r5
   12f14:	andeq	r5, r0, fp, asr #9
   12f18:	andeq	r5, r0, r5, lsr #8
   12f1c:	andeq	r5, r0, r6, asr #9

00012f20 <flatcc_builder_default_alloc@@Base>:
   12f20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f24:	add	fp, sp, #24
   12f28:	mov	r4, r1
   12f2c:	cmp	r2, #0
   12f30:	beq	12f7c <flatcc_builder_default_alloc@@Base+0x5c>
   12f34:	ldr	r0, [fp, #8]
   12f38:	mov	r8, r3
   12f3c:	sub	r1, r0, #1
   12f40:	cmp	r1, #6
   12f44:	bhi	12fa8 <flatcc_builder_default_alloc@@Base+0x88>
   12f48:	add	r3, pc, #8
   12f4c:	mov	r0, #256	; 0x100
   12f50:	ldr	r1, [r3, r1, lsl #2]
   12f54:	add	pc, r3, r1
   12f58:	andeq	r0, r0, r4, rrx
   12f5c:	andeq	r0, r0, r0, asr r0
   12f60:	andeq	r0, r0, r0, asr r0
   12f64:	andeq	r0, r0, ip, lsl r0
   12f68:	andeq	r0, r0, r8, asr r0
   12f6c:	andeq	r0, r0, r0, asr r0
   12f70:	andeq	r0, r0, r0, rrx
   12f74:	mov	r0, #288	; 0x120
   12f78:	b	12fbc <flatcc_builder_default_alloc@@Base+0x9c>
   12f7c:	ldr	r0, [r4]
   12f80:	cmp	r0, #0
   12f84:	moveq	r6, #0
   12f88:	moveq	r0, r6
   12f8c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f90:	bl	123dc <free@plt>
   12f94:	mov	r6, #0
   12f98:	mov	r0, r6
   12f9c:	str	r6, [r4]
   12fa0:	str	r6, [r4, #4]
   12fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fa8:	mov	r0, #32
   12fac:	b	12fbc <flatcc_builder_default_alloc@@Base+0x9c>
   12fb0:	mov	r0, r2
   12fb4:	b	12fbc <flatcc_builder_default_alloc@@Base+0x9c>
   12fb8:	mov	r0, #64	; 0x40
   12fbc:	mov	r7, r0
   12fc0:	lsl	r0, r0, #1
   12fc4:	cmp	r7, r2
   12fc8:	bcc	12fbc <flatcc_builder_default_alloc@@Base+0x9c>
   12fcc:	ldr	r0, [r4, #4]
   12fd0:	mov	r6, #0
   12fd4:	cmp	r0, r2
   12fd8:	lsrcs	r0, r0, #1
   12fdc:	cmpcs	r0, r7
   12fe0:	bcs	13018 <flatcc_builder_default_alloc@@Base+0xf8>
   12fe4:	ldr	r0, [r4]
   12fe8:	mov	r1, r7
   12fec:	bl	1240c <realloc@plt>
   12ff0:	cmp	r0, #0
   12ff4:	mvneq	r6, #0
   12ff8:	moveq	r0, r6
   12ffc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13000:	cmp	r8, #0
   13004:	mov	r5, r0
   13008:	ldrne	r1, [r4, #4]
   1300c:	cmpne	r7, r1
   13010:	bhi	13020 <flatcc_builder_default_alloc@@Base+0x100>
   13014:	stm	r4, {r5, r7}
   13018:	mov	r0, r6
   1301c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13020:	add	r0, r5, r1
   13024:	sub	r2, r7, r1
   13028:	mov	r1, #0
   1302c:	bl	1246c <memset@plt>
   13030:	b	13014 <flatcc_builder_default_alloc@@Base+0xf4>

00013034 <flatcc_builder_flush_vtable_cache@@Base>:
   13034:	push	{r4, r5, fp, lr}
   13038:	add	fp, sp, #8
   1303c:	mov	r4, r0
   13040:	ldr	r0, [r0, #116]	; 0x74
   13044:	cmp	r0, #0
   13048:	popeq	{r4, r5, fp, pc}
   1304c:	ldr	r0, [r4, #92]	; 0x5c
   13050:	ldr	r2, [r4, #96]	; 0x60
   13054:	mov	r1, #0
   13058:	mov	r5, #0
   1305c:	bl	1246c <memset@plt>
   13060:	mov	r0, #16
   13064:	str	r5, [r4, #120]	; 0x78
   13068:	str	r0, [r4, #124]	; 0x7c
   1306c:	pop	{r4, r5, fp, pc}

00013070 <flatcc_builder_custom_init@@Base>:
   13070:	push	{r4, r5, r6, r7, fp, lr}
   13074:	add	fp, sp, #16
   13078:	mov	r6, r2
   1307c:	mov	r7, r1
   13080:	mov	r1, #0
   13084:	mov	r2, #232	; 0xe8
   13088:	mov	r5, r3
   1308c:	mov	r4, r0
   13090:	bl	1246c <memset@plt>
   13094:	ldr	r0, [fp, #8]
   13098:	cmp	r7, #0
   1309c:	bne	130b4 <flatcc_builder_custom_init@@Base+0x44>
   130a0:	mov	r1, #1
   130a4:	add	r6, r4, #188	; 0xbc
   130a8:	str	r1, [r4, #184]	; 0xb8
   130ac:	ldr	r7, [pc, #40]	; 130dc <flatcc_builder_custom_init@@Base+0x6c>
   130b0:	ldr	r7, [pc, r7]
   130b4:	ldr	r1, [pc, #36]	; 130e0 <flatcc_builder_custom_init@@Base+0x70>
   130b8:	cmp	r5, #0
   130bc:	ldr	r1, [pc, r1]
   130c0:	str	r6, [r4, #36]	; 0x24
   130c4:	str	r0, [r4, #40]	; 0x28
   130c8:	mov	r0, #0
   130cc:	str	r7, [r4, #44]	; 0x2c
   130d0:	movne	r1, r5
   130d4:	str	r1, [r4, #48]	; 0x30
   130d8:	pop	{r4, r5, r6, r7, fp, pc}
   130dc:			; <UNDEFINED> instruction: 0x00016fb0
   130e0:	andeq	r6, r1, r0, lsr #31

000130e4 <flatcc_builder_init@@Base>:
   130e4:	push	{r4, r5, fp, lr}
   130e8:	add	fp, sp, #8
   130ec:	mov	r1, #0
   130f0:	mov	r2, #232	; 0xe8
   130f4:	mov	r4, r0
   130f8:	mov	r5, #0
   130fc:	bl	1246c <memset@plt>
   13100:	mov	r0, #1
   13104:	str	r0, [r4, #184]	; 0xb8
   13108:	add	r0, r4, #188	; 0xbc
   1310c:	ldr	r1, [pc, #32]	; 13134 <flatcc_builder_init@@Base+0x50>
   13110:	ldr	r1, [pc, r1]
   13114:	ldr	r2, [pc, #28]	; 13138 <flatcc_builder_init@@Base+0x54>
   13118:	ldr	r2, [pc, r2]
   1311c:	str	r0, [r4, #36]	; 0x24
   13120:	mov	r0, #0
   13124:	str	r5, [r4, #40]	; 0x28
   13128:	str	r2, [r4, #44]	; 0x2c
   1312c:	str	r1, [r4, #48]	; 0x30
   13130:	pop	{r4, r5, fp, pc}
   13134:	andeq	r6, r1, ip, asr #30
   13138:	andeq	r6, r1, r8, asr #30

0001313c <flatcc_builder_custom_reset@@Base>:
   1313c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13140:	add	fp, sp, #24
   13144:	sub	sp, sp, #8
   13148:	mov	r9, r2
   1314c:	mov	r8, r1
   13150:	mov	r4, r0
   13154:	add	r7, r0, #52	; 0x34
   13158:	mov	r5, #0
   1315c:	ldr	r0, [r7]
   13160:	cmp	r0, #0
   13164:	beq	131ac <flatcc_builder_custom_reset@@Base+0x70>
   13168:	cmp	r9, #0
   1316c:	cmpne	r5, #5
   13170:	beq	1319c <flatcc_builder_custom_reset@@Base+0x60>
   13174:	ldr	r0, [r4, #40]	; 0x28
   13178:	ldr	r6, [r4, #48]	; 0x30
   1317c:	mov	r1, r7
   13180:	mov	r2, #1
   13184:	mov	r3, #1
   13188:	str	r5, [sp]
   1318c:	blx	r6
   13190:	cmp	r0, #0
   13194:	bne	1324c <flatcc_builder_custom_reset@@Base+0x110>
   13198:	ldr	r0, [r7]
   1319c:	ldr	r2, [r7, #4]
   131a0:	mov	r1, #0
   131a4:	bl	1246c <memset@plt>
   131a8:	b	131b8 <flatcc_builder_custom_reset@@Base+0x7c>
   131ac:	ldr	r0, [r7, #4]
   131b0:	cmp	r0, #0
   131b4:	bne	1325c <flatcc_builder_custom_reset@@Base+0x120>
   131b8:	add	r5, r5, #1
   131bc:	add	r7, r7, #8
   131c0:	cmp	r5, #8
   131c4:	bcc	1315c <flatcc_builder_custom_reset@@Base+0x20>
   131c8:	mov	r0, #0
   131cc:	vmov.i32	q8, #0	; 0x00000000
   131d0:	mov	r5, #0
   131d4:	str	r0, [r4, #120]	; 0x78
   131d8:	ldr	r1, [r4, #124]	; 0x7c
   131dc:	cmp	r1, #0
   131e0:	movne	r1, #16
   131e4:	strne	r1, [r4, #124]	; 0x7c
   131e8:	add	r1, r4, #148	; 0x94
   131ec:	strh	r0, [r4, #128]	; 0x80
   131f0:	str	r0, [r4, #136]	; 0x88
   131f4:	str	r0, [r4, #140]	; 0x8c
   131f8:	str	r0, [r4, #32]
   131fc:	cmp	r8, #0
   13200:	vst1.32	{d16-d17}, [r1]
   13204:	ldr	r2, [r4, #60]	; 0x3c
   13208:	ldr	r1, [r4, #52]	; 0x34
   1320c:	ldr	r3, [r4, #76]	; 0x4c
   13210:	str	r2, [r4, #16]
   13214:	str	r0, [r4, #20]
   13218:	str	r0, [r4, #24]
   1321c:	movne	r0, #0
   13220:	str	r3, [r4]
   13224:	str	r1, [r4, #4]
   13228:	strne	r0, [r4, #172]	; 0xac
   1322c:	strne	r0, [r4, #176]	; 0xb0
   13230:	strne	r0, [r4, #180]	; 0xb4
   13234:	ldr	r0, [r4, #184]	; 0xb8
   13238:	cmp	r0, #0
   1323c:	beq	13250 <flatcc_builder_custom_reset@@Base+0x114>
   13240:	add	r0, r4, #188	; 0xbc
   13244:	bl	17d20 <flatcc_emitter_reset@@Base>
   13248:	b	13250 <flatcc_builder_custom_reset@@Base+0x114>
   1324c:	mvn	r5, #0
   13250:	mov	r0, r5
   13254:	sub	sp, fp, #24
   13258:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1325c:	ldr	r0, [pc, #24]	; 1327c <flatcc_builder_custom_reset@@Base+0x140>
   13260:	ldr	r1, [pc, #24]	; 13280 <flatcc_builder_custom_reset@@Base+0x144>
   13264:	ldr	r3, [pc, #24]	; 13284 <flatcc_builder_custom_reset@@Base+0x148>
   13268:	movw	r2, #434	; 0x1b2
   1326c:	add	r0, pc, r0
   13270:	add	r1, pc, r1
   13274:	add	r3, pc, r3
   13278:	bl	1249c <__assert_fail@plt>
   1327c:	andeq	r5, r0, ip, asr r8
   13280:	andeq	r5, r0, sl, ror #16
   13284:	andeq	r5, r0, r3, asr #17

00013288 <flatcc_builder_reset@@Base>:
   13288:	push	{r4, sl, fp, lr}
   1328c:	add	fp, sp, #8
   13290:	mov	r4, r0
   13294:	ldr	r0, [r0, #52]	; 0x34
   13298:	ldr	r2, [r4, #56]	; 0x38
   1329c:	cmp	r0, #0
   132a0:	beq	132b0 <flatcc_builder_reset@@Base+0x28>
   132a4:	mov	r1, #0
   132a8:	bl	1246c <memset@plt>
   132ac:	b	132b8 <flatcc_builder_reset@@Base+0x30>
   132b0:	cmp	r2, #0
   132b4:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   132b8:	ldr	r0, [r4, #60]	; 0x3c
   132bc:	ldr	r2, [r4, #64]	; 0x40
   132c0:	cmp	r0, #0
   132c4:	beq	132d4 <flatcc_builder_reset@@Base+0x4c>
   132c8:	mov	r1, #0
   132cc:	bl	1246c <memset@plt>
   132d0:	b	132dc <flatcc_builder_reset@@Base+0x54>
   132d4:	cmp	r2, #0
   132d8:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   132dc:	ldr	r0, [r4, #68]	; 0x44
   132e0:	ldr	r2, [r4, #72]	; 0x48
   132e4:	cmp	r0, #0
   132e8:	beq	132f8 <flatcc_builder_reset@@Base+0x70>
   132ec:	mov	r1, #0
   132f0:	bl	1246c <memset@plt>
   132f4:	b	13300 <flatcc_builder_reset@@Base+0x78>
   132f8:	cmp	r2, #0
   132fc:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   13300:	ldr	r0, [r4, #76]	; 0x4c
   13304:	ldr	r2, [r4, #80]	; 0x50
   13308:	cmp	r0, #0
   1330c:	beq	1331c <flatcc_builder_reset@@Base+0x94>
   13310:	mov	r1, #0
   13314:	bl	1246c <memset@plt>
   13318:	b	13324 <flatcc_builder_reset@@Base+0x9c>
   1331c:	cmp	r2, #0
   13320:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   13324:	ldr	r0, [r4, #84]	; 0x54
   13328:	ldr	r2, [r4, #88]	; 0x58
   1332c:	cmp	r0, #0
   13330:	beq	13340 <flatcc_builder_reset@@Base+0xb8>
   13334:	mov	r1, #0
   13338:	bl	1246c <memset@plt>
   1333c:	b	13348 <flatcc_builder_reset@@Base+0xc0>
   13340:	cmp	r2, #0
   13344:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   13348:	ldr	r0, [r4, #92]	; 0x5c
   1334c:	ldr	r2, [r4, #96]	; 0x60
   13350:	cmp	r0, #0
   13354:	beq	13364 <flatcc_builder_reset@@Base+0xdc>
   13358:	mov	r1, #0
   1335c:	bl	1246c <memset@plt>
   13360:	b	1336c <flatcc_builder_reset@@Base+0xe4>
   13364:	cmp	r2, #0
   13368:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   1336c:	ldr	r0, [r4, #100]	; 0x64
   13370:	ldr	r2, [r4, #104]	; 0x68
   13374:	cmp	r0, #0
   13378:	beq	13388 <flatcc_builder_reset@@Base+0x100>
   1337c:	mov	r1, #0
   13380:	bl	1246c <memset@plt>
   13384:	b	13390 <flatcc_builder_reset@@Base+0x108>
   13388:	cmp	r2, #0
   1338c:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   13390:	ldr	r0, [r4, #108]	; 0x6c
   13394:	ldr	r2, [r4, #112]	; 0x70
   13398:	cmp	r0, #0
   1339c:	beq	133ac <flatcc_builder_reset@@Base+0x124>
   133a0:	mov	r1, #0
   133a4:	bl	1246c <memset@plt>
   133a8:	b	133b4 <flatcc_builder_reset@@Base+0x12c>
   133ac:	cmp	r2, #0
   133b0:	bne	13420 <flatcc_builder_reset@@Base+0x198>
   133b4:	mov	r0, #0
   133b8:	str	r0, [r4, #120]	; 0x78
   133bc:	ldr	r1, [r4, #124]	; 0x7c
   133c0:	cmp	r1, #0
   133c4:	movne	r1, #16
   133c8:	strne	r1, [r4, #124]	; 0x7c
   133cc:	vmov.i32	q8, #0	; 0x00000000
   133d0:	add	r1, r4, #148	; 0x94
   133d4:	strh	r0, [r4, #128]	; 0x80
   133d8:	str	r0, [r4, #136]	; 0x88
   133dc:	str	r0, [r4, #140]	; 0x8c
   133e0:	str	r0, [r4, #32]
   133e4:	vst1.32	{d16-d17}, [r1]
   133e8:	ldr	r1, [r4, #184]	; 0xb8
   133ec:	ldr	ip, [r4, #52]	; 0x34
   133f0:	ldr	r2, [r4, #60]	; 0x3c
   133f4:	ldr	r3, [r4, #76]	; 0x4c
   133f8:	cmp	r1, #0
   133fc:	str	r2, [r4, #16]
   13400:	str	r0, [r4, #20]
   13404:	str	r0, [r4, #24]
   13408:	stm	r4, {r3, ip}
   1340c:	beq	13418 <flatcc_builder_reset@@Base+0x190>
   13410:	add	r0, r4, #188	; 0xbc
   13414:	bl	17d20 <flatcc_emitter_reset@@Base>
   13418:	mov	r0, #0
   1341c:	pop	{r4, sl, fp, pc}
   13420:	ldr	r0, [pc, #24]	; 13440 <flatcc_builder_reset@@Base+0x1b8>
   13424:	ldr	r1, [pc, #24]	; 13444 <flatcc_builder_reset@@Base+0x1bc>
   13428:	ldr	r3, [pc, #24]	; 13448 <flatcc_builder_reset@@Base+0x1c0>
   1342c:	movw	r2, #434	; 0x1b2
   13430:	add	r0, pc, r0
   13434:	add	r1, pc, r1
   13438:	add	r3, pc, r3
   1343c:	bl	1249c <__assert_fail@plt>
   13440:	muleq	r0, r8, r6
   13444:	andeq	r5, r0, r6, lsr #13
   13448:	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>

0001344c <flatcc_builder_clear@@Base>:
   1344c:	push	{r4, sl, fp, lr}
   13450:	add	fp, sp, #8
   13454:	sub	sp, sp, #8
   13458:	mov	r4, r0
   1345c:	ldr	r0, [r0, #40]	; 0x28
   13460:	mov	r1, #0
   13464:	mov	r2, #0
   13468:	mov	r3, #0
   1346c:	ldr	ip, [r4, #48]	; 0x30
   13470:	str	r1, [sp]
   13474:	add	r1, r4, #52	; 0x34
   13478:	blx	ip
   1347c:	ldr	r0, [r4, #40]	; 0x28
   13480:	ldr	ip, [r4, #48]	; 0x30
   13484:	mov	r1, #1
   13488:	mov	r2, #0
   1348c:	mov	r3, #0
   13490:	str	r1, [sp]
   13494:	add	r1, r4, #60	; 0x3c
   13498:	blx	ip
   1349c:	ldr	r0, [r4, #40]	; 0x28
   134a0:	ldr	ip, [r4, #48]	; 0x30
   134a4:	mov	r1, #2
   134a8:	mov	r2, #0
   134ac:	mov	r3, #0
   134b0:	str	r1, [sp]
   134b4:	add	r1, r4, #68	; 0x44
   134b8:	blx	ip
   134bc:	ldr	r0, [r4, #40]	; 0x28
   134c0:	ldr	ip, [r4, #48]	; 0x30
   134c4:	mov	r1, #3
   134c8:	mov	r2, #0
   134cc:	mov	r3, #0
   134d0:	str	r1, [sp]
   134d4:	add	r1, r4, #76	; 0x4c
   134d8:	blx	ip
   134dc:	ldr	r0, [r4, #40]	; 0x28
   134e0:	ldr	ip, [r4, #48]	; 0x30
   134e4:	mov	r1, #4
   134e8:	mov	r2, #0
   134ec:	mov	r3, #0
   134f0:	str	r1, [sp]
   134f4:	add	r1, r4, #84	; 0x54
   134f8:	blx	ip
   134fc:	ldr	r0, [r4, #40]	; 0x28
   13500:	ldr	ip, [r4, #48]	; 0x30
   13504:	mov	r1, #5
   13508:	mov	r2, #0
   1350c:	mov	r3, #0
   13510:	str	r1, [sp]
   13514:	add	r1, r4, #92	; 0x5c
   13518:	blx	ip
   1351c:	ldr	r0, [r4, #40]	; 0x28
   13520:	ldr	ip, [r4, #48]	; 0x30
   13524:	mov	r1, #6
   13528:	mov	r2, #0
   1352c:	mov	r3, #0
   13530:	str	r1, [sp]
   13534:	add	r1, r4, #100	; 0x64
   13538:	blx	ip
   1353c:	ldr	r0, [r4, #40]	; 0x28
   13540:	ldr	ip, [r4, #48]	; 0x30
   13544:	mov	r1, #7
   13548:	mov	r2, #0
   1354c:	mov	r3, #0
   13550:	str	r1, [sp]
   13554:	add	r1, r4, #108	; 0x6c
   13558:	blx	ip
   1355c:	ldr	r0, [r4, #184]	; 0xb8
   13560:	cmp	r0, #0
   13564:	beq	13570 <flatcc_builder_clear@@Base+0x124>
   13568:	add	r0, r4, #188	; 0xbc
   1356c:	bl	17dec <flatcc_emitter_clear@@Base>
   13570:	mov	r0, r4
   13574:	mov	r1, #0
   13578:	mov	r2, #232	; 0xe8
   1357c:	sub	sp, fp, #8
   13580:	pop	{r4, sl, fp, lr}
   13584:	b	1246c <memset@plt>

00013588 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13588:	push	{r4, r5, r6, r7, fp, lr}
   1358c:	add	fp, sp, #16
   13590:	sub	sp, sp, #8
   13594:	mov	r4, r0
   13598:	ldr	r0, [r0, #112]	; 0x70
   1359c:	add	r1, r1, #7
   135a0:	ldr	r7, [r4, #228]	; 0xe4
   135a4:	bic	r5, r1, #3
   135a8:	add	r6, r4, #108	; 0x6c
   135ac:	add	r2, r7, r5
   135b0:	cmp	r2, r0
   135b4:	bls	135dc <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   135b8:	ldr	r0, [r4, #40]	; 0x28
   135bc:	ldr	ip, [r4, #48]	; 0x30
   135c0:	mov	r1, #7
   135c4:	mov	r3, #0
   135c8:	str	r1, [sp]
   135cc:	mov	r1, r6
   135d0:	blx	ip
   135d4:	cmp	r0, #0
   135d8:	bne	13628 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   135dc:	ldr	r0, [r6]
   135e0:	adds	r6, r0, r7
   135e4:	beq	13618 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   135e8:	mov	r0, r6
   135ec:	mov	r1, #0
   135f0:	mov	r2, r5
   135f4:	bl	1246c <memset@plt>
   135f8:	ldr	r0, [r4, #224]	; 0xe0
   135fc:	str	r0, [r6], #4
   13600:	ldr	r0, [r4, #228]	; 0xe4
   13604:	add	r1, r0, #4
   13608:	add	r0, r0, r5
   1360c:	str	r1, [r4, #224]	; 0xe0
   13610:	str	r0, [r4, #228]	; 0xe4
   13614:	b	1361c <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13618:	mov	r6, #0
   1361c:	mov	r0, r6
   13620:	sub	sp, fp, #16
   13624:	pop	{r4, r5, r6, r7, fp, pc}
   13628:	ldr	r0, [pc, #24]	; 13648 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   1362c:	ldr	r1, [pc, #24]	; 1364c <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13630:	ldr	r3, [pc, #24]	; 13650 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13634:	mov	r2, #308	; 0x134
   13638:	add	r0, pc, r0
   1363c:	add	r1, pc, r1
   13640:	add	r3, pc, r3
   13644:	bl	1249c <__assert_fail@plt>
   13648:	andeq	r6, r0, pc, asr r6
   1364c:	muleq	r0, lr, r4
   13650:	muleq	r0, r1, r4

00013654 <flatcc_builder_enter_user_frame@@Base>:
   13654:	push	{r4, r5, r6, r7, fp, lr}
   13658:	add	fp, sp, #16
   1365c:	sub	sp, sp, #8
   13660:	mov	r4, r0
   13664:	ldr	r0, [r0, #112]	; 0x70
   13668:	add	r1, r1, #7
   1366c:	ldr	r7, [r4, #228]	; 0xe4
   13670:	bic	r5, r1, #3
   13674:	add	r6, r4, #108	; 0x6c
   13678:	add	r2, r7, r5
   1367c:	cmp	r2, r0
   13680:	bls	136a8 <flatcc_builder_enter_user_frame@@Base+0x54>
   13684:	ldr	r0, [r4, #40]	; 0x28
   13688:	ldr	ip, [r4, #48]	; 0x30
   1368c:	mov	r1, #7
   13690:	mov	r3, #0
   13694:	str	r1, [sp]
   13698:	mov	r1, r6
   1369c:	blx	ip
   136a0:	cmp	r0, #0
   136a4:	bne	136f0 <flatcc_builder_enter_user_frame@@Base+0x9c>
   136a8:	ldr	r0, [r6]
   136ac:	adds	r6, r0, r7
   136b0:	moveq	r0, #0
   136b4:	subeq	sp, fp, #16
   136b8:	popeq	{r4, r5, r6, r7, fp, pc}
   136bc:	mov	r0, r6
   136c0:	mov	r1, #0
   136c4:	mov	r2, r5
   136c8:	bl	1246c <memset@plt>
   136cc:	ldr	r0, [r4, #224]	; 0xe0
   136d0:	str	r0, [r6]
   136d4:	ldr	r1, [r4, #228]	; 0xe4
   136d8:	add	r0, r1, #4
   136dc:	add	r1, r1, r5
   136e0:	str	r0, [r4, #224]	; 0xe0
   136e4:	str	r1, [r4, #228]	; 0xe4
   136e8:	sub	sp, fp, #16
   136ec:	pop	{r4, r5, r6, r7, fp, pc}
   136f0:	ldr	r0, [pc, #24]	; 13710 <flatcc_builder_enter_user_frame@@Base+0xbc>
   136f4:	ldr	r1, [pc, #24]	; 13714 <flatcc_builder_enter_user_frame@@Base+0xc0>
   136f8:	ldr	r3, [pc, #24]	; 13718 <flatcc_builder_enter_user_frame@@Base+0xc4>
   136fc:	mov	r2, #308	; 0x134
   13700:	add	r0, pc, r0
   13704:	add	r1, pc, r1
   13708:	add	r3, pc, r3
   1370c:	bl	1249c <__assert_fail@plt>
   13710:	muleq	r0, r7, r5
   13714:	ldrdeq	r5, [r0], -r6
   13718:	andeq	r6, r0, r9, asr #7

0001371c <flatcc_builder_exit_user_frame@@Base>:
   1371c:	ldr	r1, [r0, #224]	; 0xe0
   13720:	cmp	r1, #0
   13724:	subne	r2, r1, #4
   13728:	strne	r2, [r0, #228]	; 0xe4
   1372c:	ldrne	r2, [r0, #108]	; 0x6c
   13730:	addne	r1, r2, r1
   13734:	ldrne	r1, [r1, #-4]
   13738:	strne	r1, [r0, #224]	; 0xe0
   1373c:	movne	r0, r1
   13740:	bxne	lr
   13744:	push	{fp, lr}
   13748:	mov	fp, sp
   1374c:	ldr	r0, [pc, #24]	; 1376c <flatcc_builder_exit_user_frame@@Base+0x50>
   13750:	ldr	r1, [pc, #24]	; 13770 <flatcc_builder_exit_user_frame@@Base+0x54>
   13754:	ldr	r3, [pc, #24]	; 13774 <flatcc_builder_exit_user_frame@@Base+0x58>
   13758:	movw	r2, #542	; 0x21e
   1375c:	add	r0, pc, r0
   13760:	add	r1, pc, r1
   13764:	add	r3, pc, r3
   13768:	bl	1249c <__assert_fail@plt>
   1376c:	andeq	r5, r0, r9, lsl r4
   13770:	andeq	r5, r0, sl, ror r3
   13774:	andeq	r5, r0, sl, lsr #8

00013778 <flatcc_builder_exit_user_frame_at@@Base>:
   13778:	push	{fp, lr}
   1377c:	mov	fp, sp
   13780:	ldr	r2, [r0, #224]	; 0xe0
   13784:	cmp	r2, r1
   13788:	bcc	137d4 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1378c:	cmp	r1, #0
   13790:	str	r1, [r0, #224]	; 0xe0
   13794:	subne	r2, r1, #4
   13798:	strne	r2, [r0, #228]	; 0xe4
   1379c:	ldrne	r2, [r0, #108]	; 0x6c
   137a0:	addne	r1, r2, r1
   137a4:	ldrne	r1, [r1, #-4]
   137a8:	strne	r1, [r0, #224]	; 0xe0
   137ac:	movne	r0, r1
   137b0:	popne	{fp, pc}
   137b4:	ldr	r0, [pc, #68]	; 13800 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   137b8:	ldr	r1, [pc, #68]	; 13804 <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   137bc:	ldr	r3, [pc, #68]	; 13808 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   137c0:	movw	r2, #542	; 0x21e
   137c4:	add	r0, pc, r0
   137c8:	add	r1, pc, r1
   137cc:	add	r3, pc, r3
   137d0:	bl	1249c <__assert_fail@plt>
   137d4:	ldr	r0, [pc, #24]	; 137f4 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   137d8:	ldr	r1, [pc, #24]	; 137f8 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   137dc:	ldr	r3, [pc, #24]	; 137fc <flatcc_builder_exit_user_frame_at@@Base+0x84>
   137e0:	movw	r2, #551	; 0x227
   137e4:	add	r0, pc, r0
   137e8:	add	r1, pc, r1
   137ec:	add	r3, pc, r3
   137f0:	bl	1249c <__assert_fail@plt>
   137f4:	andeq	r5, r0, r4, ror #7
   137f8:	strdeq	r5, [r0], -r2
   137fc:	strdeq	r5, [r0], -fp
   13800:			; <UNDEFINED> instruction: 0x000053b1
   13804:	andeq	r5, r0, r2, lsl r3
   13808:	andeq	r5, r0, r2, asr #7

0001380c <flatcc_builder_get_current_user_frame@@Base>:
   1380c:	ldr	r0, [r0, #224]	; 0xe0
   13810:	bx	lr

00013814 <flatcc_builder_get_user_frame_ptr@@Base>:
   13814:	ldr	r0, [r0, #108]	; 0x6c
   13818:	add	r0, r0, r1
   1381c:	bx	lr

00013820 <flatcc_builder_embed_buffer@@Base>:
   13820:	push	{r4, r5, r6, r7, fp, lr}
   13824:	add	fp, sp, #16
   13828:	sub	sp, sp, #88	; 0x58
   1382c:	mov	r4, r0
   13830:	ldr	r0, [fp, #8]
   13834:	mov	r5, r3
   13838:	mov	r7, r2
   1383c:	mov	r2, r1
   13840:	sub	r1, fp, #18
   13844:	strh	r0, [fp, #-18]	; 0xffffffee
   13848:	mov	r0, r4
   1384c:	ldr	r3, [r4, #152]	; 0x98
   13850:	cmp	r3, #0
   13854:	movwne	r3, #1
   13858:	bl	139ac <flatcc_builder_embed_buffer@@Base+0x18c>
   1385c:	ldr	r1, [fp, #12]
   13860:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13864:	ldr	r0, [r4, #136]	; 0x88
   13868:	mov	r2, #0
   1386c:	str	r2, [sp, #8]
   13870:	str	r2, [sp, #12]
   13874:	and	r1, r1, #2
   13878:	sub	r3, r3, #1
   1387c:	add	r1, r5, r1, lsl #1
   13880:	sub	r1, r0, r1
   13884:	and	r3, r1, r3
   13888:	add	r1, r3, r5
   1388c:	str	r1, [fp, #-24]	; 0xffffffe8
   13890:	ldr	r1, [r4, #152]	; 0x98
   13894:	cmp	r1, #0
   13898:	mov	r1, #0
   1389c:	beq	138bc <flatcc_builder_embed_buffer@@Base+0x9c>
   138a0:	sub	r1, fp, #24
   138a4:	mov	r2, #1
   138a8:	str	r1, [sp, #16]
   138ac:	mov	r1, #4
   138b0:	str	r1, [sp, #8]
   138b4:	str	r1, [sp, #20]
   138b8:	str	r2, [sp, #12]
   138bc:	cmp	r5, #0
   138c0:	beq	138e4 <flatcc_builder_embed_buffer@@Base+0xc4>
   138c4:	add	r6, sp, #8
   138c8:	add	r1, r1, r5
   138cc:	add	r6, r6, r2, lsl #3
   138d0:	add	r2, r2, #1
   138d4:	str	r1, [sp, #8]
   138d8:	str	r7, [r6, #8]
   138dc:	str	r5, [r6, #12]
   138e0:	str	r2, [sp, #12]
   138e4:	cmp	r3, #0
   138e8:	beq	13914 <flatcc_builder_embed_buffer@@Base+0xf4>
   138ec:	add	r1, r1, r3
   138f0:	add	r7, sp, #8
   138f4:	str	r1, [sp, #8]
   138f8:	add	r7, r7, r2, lsl #3
   138fc:	add	r2, r2, #1
   13900:	ldr	r6, [pc, #136]	; 13990 <flatcc_builder_embed_buffer@@Base+0x170>
   13904:	ldr	r6, [pc, r6]
   13908:	str	r6, [r7, #8]
   1390c:	str	r3, [r7, #12]
   13910:	str	r2, [sp, #12]
   13914:	cmp	r1, #0
   13918:	ble	13970 <flatcc_builder_embed_buffer@@Base+0x150>
   1391c:	sub	r5, r0, r1
   13920:	ldr	r0, [r4, #36]	; 0x24
   13924:	ldr	r7, [r4, #44]	; 0x2c
   13928:	str	r1, [sp]
   1392c:	add	r1, sp, #8
   13930:	add	r1, r1, #8
   13934:	mov	r3, r5
   13938:	blx	r7
   1393c:	cmp	r0, #0
   13940:	streq	r5, [r4, #136]	; 0x88
   13944:	moveq	r0, r5
   13948:	subeq	sp, fp, #16
   1394c:	popeq	{r4, r5, r6, r7, fp, pc}
   13950:	ldr	r0, [pc, #72]	; 139a0 <flatcc_builder_embed_buffer@@Base+0x180>
   13954:	ldr	r1, [pc, #72]	; 139a4 <flatcc_builder_embed_buffer@@Base+0x184>
   13958:	ldr	r3, [pc, #72]	; 139a8 <flatcc_builder_embed_buffer@@Base+0x188>
   1395c:	movw	r2, #651	; 0x28b
   13960:	add	r0, pc, r0
   13964:	add	r1, pc, r1
   13968:	add	r3, pc, r3
   1396c:	bl	1249c <__assert_fail@plt>
   13970:	ldr	r0, [pc, #28]	; 13994 <flatcc_builder_embed_buffer@@Base+0x174>
   13974:	ldr	r1, [pc, #28]	; 13998 <flatcc_builder_embed_buffer@@Base+0x178>
   13978:	ldr	r3, [pc, #28]	; 1399c <flatcc_builder_embed_buffer@@Base+0x17c>
   1397c:	movw	r2, #647	; 0x287
   13980:	add	r0, pc, r0
   13984:	add	r1, pc, r1
   13988:	add	r3, pc, r3
   1398c:	bl	1249c <__assert_fail@plt>
   13990:	andeq	r6, r1, r0, asr r7
   13994:	andeq	r6, r0, r7, lsl r3
   13998:	andeq	r5, r0, r6, asr r1
   1399c:	andeq	r6, r0, lr, asr #3
   139a0:	andeq	r6, r0, r7, lsr r3
   139a4:	andeq	r5, r0, r6, ror r1
   139a8:	andeq	r6, r0, lr, ror #3
   139ac:	push	{r4, sl, fp, lr}
   139b0:	add	fp, sp, #8
   139b4:	sub	sp, sp, #80	; 0x50
   139b8:	cmp	r2, #0
   139bc:	bne	139cc <flatcc_builder_embed_buffer@@Base+0x1ac>
   139c0:	ldrh	r2, [r0, #132]	; 0x84
   139c4:	cmp	r2, #0
   139c8:	movweq	r2, #1
   139cc:	ldrh	r4, [r1]
   139d0:	cmp	r4, #4
   139d4:	movwcc	r4, #4
   139d8:	cmpcs	r4, r2
   139dc:	bcs	139ec <flatcc_builder_embed_buffer@@Base+0x1cc>
   139e0:	cmp	r4, r2
   139e4:	movcc	r4, r2
   139e8:	strh	r4, [r1]
   139ec:	cmp	r3, #0
   139f0:	bne	13a64 <flatcc_builder_embed_buffer@@Base+0x244>
   139f4:	ldr	r4, [r0, #140]	; 0x8c
   139f8:	sub	r1, r2, #1
   139fc:	ands	r1, r4, r1
   13a00:	beq	13a64 <flatcc_builder_embed_buffer@@Base+0x244>
   13a04:	mov	r2, #1
   13a08:	str	r1, [sp, #8]
   13a0c:	str	r1, [sp, #20]
   13a10:	cmn	r1, #1
   13a14:	str	r2, [sp, #12]
   13a18:	ldr	r2, [pc, #172]	; 13acc <flatcc_builder_embed_buffer@@Base+0x2ac>
   13a1c:	ldr	r2, [pc, r2]
   13a20:	str	r2, [sp, #16]
   13a24:	add	r2, r1, r4
   13a28:	str	r2, [r0, #140]	; 0x8c
   13a2c:	ble	13a6c <flatcc_builder_embed_buffer@@Base+0x24c>
   13a30:	ldr	r2, [r0, #36]	; 0x24
   13a34:	ldr	ip, [r0, #44]	; 0x2c
   13a38:	add	r0, sp, #8
   13a3c:	str	r1, [sp]
   13a40:	mov	r3, r4
   13a44:	add	r1, r0, #8
   13a48:	mov	r0, r2
   13a4c:	mov	r2, #1
   13a50:	blx	ip
   13a54:	cmp	r0, #0
   13a58:	bne	13a8c <flatcc_builder_embed_buffer@@Base+0x26c>
   13a5c:	cmn	r4, #1
   13a60:	beq	13aac <flatcc_builder_embed_buffer@@Base+0x28c>
   13a64:	sub	sp, fp, #8
   13a68:	pop	{r4, sl, fp, pc}
   13a6c:	ldr	r0, [pc, #92]	; 13ad0 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13a70:	ldr	r1, [pc, #92]	; 13ad4 <flatcc_builder_embed_buffer@@Base+0x2b4>
   13a74:	ldr	r3, [pc, #92]	; 13ad8 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13a78:	movw	r2, #673	; 0x2a1
   13a7c:	add	r0, pc, r0
   13a80:	add	r1, pc, r1
   13a84:	add	r3, pc, r3
   13a88:	bl	1249c <__assert_fail@plt>
   13a8c:	ldr	r0, [pc, #72]	; 13adc <flatcc_builder_embed_buffer@@Base+0x2bc>
   13a90:	ldr	r1, [pc, #72]	; 13ae0 <flatcc_builder_embed_buffer@@Base+0x2c0>
   13a94:	ldr	r3, [pc, #72]	; 13ae4 <flatcc_builder_embed_buffer@@Base+0x2c4>
   13a98:	movw	r2, #677	; 0x2a5
   13a9c:	add	r0, pc, r0
   13aa0:	add	r1, pc, r1
   13aa4:	add	r3, pc, r3
   13aa8:	bl	1249c <__assert_fail@plt>
   13aac:	ldr	r0, [pc, #52]	; 13ae8 <flatcc_builder_embed_buffer@@Base+0x2c8>
   13ab0:	ldr	r1, [pc, #52]	; 13aec <flatcc_builder_embed_buffer@@Base+0x2cc>
   13ab4:	ldr	r3, [pc, #52]	; 13af0 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13ab8:	movw	r2, #702	; 0x2be
   13abc:	add	r0, pc, r0
   13ac0:	add	r1, pc, r1
   13ac4:	add	r3, pc, r3
   13ac8:	bl	1249c <__assert_fail@plt>
   13acc:	andeq	r6, r1, r8, lsr r6
   13ad0:	andeq	r6, r0, fp, lsl r2
   13ad4:	andeq	r5, r0, sl, asr r0
   13ad8:	andeq	r6, r0, lr, lsl #3
   13adc:	strdeq	r6, [r0], -fp
   13ae0:	andeq	r5, r0, sl, lsr r0
   13ae4:	andeq	r6, r0, lr, ror #2
   13ae8:	ldrdeq	r6, [r0], -fp
   13aec:	andeq	r5, r0, sl, lsl r0
   13af0:	andeq	r6, r0, r0, asr r0

00013af4 <flatcc_builder_create_buffer@@Base>:
   13af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13af8:	add	fp, sp, #28
   13afc:	sub	sp, sp, #100	; 0x64
   13b00:	ldr	r8, [fp, #12]
   13b04:	mov	r4, r0
   13b08:	ldr	r0, [fp, #8]
   13b0c:	mov	r7, r1
   13b10:	mov	r5, #0
   13b14:	mov	r9, r3
   13b18:	sub	r1, fp, #30
   13b1c:	str	r5, [sp, #12]
   13b20:	and	r6, r8, #1
   13b24:	strh	r0, [fp, #-30]	; 0xffffffe2
   13b28:	mov	r0, r4
   13b2c:	mov	r3, r6
   13b30:	bl	139ac <flatcc_builder_embed_buffer@@Base+0x18c>
   13b34:	ldrh	r0, [r4, #128]	; 0x80
   13b38:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13b3c:	cmp	r0, r1
   13b40:	strhcc	r1, [r4, #128]	; 0x80
   13b44:	cmp	r7, #0
   13b48:	stmib	sp, {r6, r9}
   13b4c:	beq	13b68 <flatcc_builder_create_buffer@@Base+0x74>
   13b50:	ldr	r5, [r7]
   13b54:	cmp	r5, #0
   13b58:	str	r5, [sp, #12]
   13b5c:	movwne	r5, #1
   13b60:	lsl	r7, r5, #2
   13b64:	b	13b6c <flatcc_builder_create_buffer@@Base+0x78>
   13b68:	mov	r7, #0
   13b6c:	ldr	r9, [r4, #136]	; 0x88
   13b70:	mov	sl, #4
   13b74:	mvn	r6, #3
   13b78:	mov	r3, #0
   13b7c:	ands	ip, r8, #3
   13b80:	and	r2, sl, r8, lsl #1
   13b84:	str	r3, [sp, #20]
   13b88:	str	r3, [sp, #16]
   13b8c:	sub	r2, r6, r2
   13b90:	sub	r6, r1, #1
   13b94:	mov	r1, #4
   13b98:	add	r2, r2, r9
   13b9c:	sub	r2, r2, r7
   13ba0:	beq	13bc4 <flatcc_builder_create_buffer@@Base+0xd0>
   13ba4:	sub	r1, fp, #40	; 0x28
   13ba8:	mov	r3, #1
   13bac:	str	r1, [sp, #24]
   13bb0:	mov	r1, #4
   13bb4:	str	r1, [sp, #16]
   13bb8:	str	r1, [sp, #28]
   13bbc:	mov	r1, #8
   13bc0:	str	r3, [sp, #20]
   13bc4:	add	lr, sp, #16
   13bc8:	and	r6, r2, r6
   13bcc:	sub	r0, fp, #36	; 0x24
   13bd0:	str	r1, [sp, #16]
   13bd4:	cmp	r5, #0
   13bd8:	add	r2, lr, r3, lsl #3
   13bdc:	str	r0, [r2, #8]
   13be0:	str	sl, [r2, #12]
   13be4:	add	r2, r3, #1
   13be8:	str	r2, [sp, #20]
   13bec:	beq	13c10 <flatcc_builder_create_buffer@@Base+0x11c>
   13bf0:	add	r1, r1, r7
   13bf4:	add	r0, lr, r2, lsl #3
   13bf8:	add	r2, sp, #12
   13bfc:	str	r1, [sp, #16]
   13c00:	str	r2, [r0, #8]
   13c04:	orr	r2, r3, #2
   13c08:	str	r7, [r0, #12]
   13c0c:	str	r2, [sp, #20]
   13c10:	cmp	r6, #0
   13c14:	beq	13c3c <flatcc_builder_create_buffer@@Base+0x148>
   13c18:	add	r1, r1, r6
   13c1c:	add	r0, lr, r2, lsl #3
   13c20:	add	r2, r2, #1
   13c24:	str	r1, [sp, #16]
   13c28:	ldr	r3, [pc, #224]	; 13d10 <flatcc_builder_create_buffer@@Base+0x21c>
   13c2c:	ldr	r3, [pc, r3]
   13c30:	str	r3, [r0, #8]
   13c34:	str	r6, [r0, #12]
   13c38:	str	r2, [sp, #20]
   13c3c:	ldr	r5, [sp, #4]
   13c40:	sub	r7, r9, r1
   13c44:	cmp	ip, #0
   13c48:	mov	r6, #144	; 0x90
   13c4c:	ldr	r3, [sp, #8]
   13c50:	mov	r0, r7
   13c54:	addne	r0, r0, #4
   13c58:	cmp	r5, #0
   13c5c:	sub	r3, r3, r0
   13c60:	movweq	r6, #140	; 0x8c
   13c64:	cmp	r1, #0
   13c68:	ldr	r6, [r4, r6]
   13c6c:	str	r3, [fp, #-36]	; 0xffffffdc
   13c70:	sub	r0, r6, r0
   13c74:	str	r0, [fp, #-40]	; 0xffffffd8
   13c78:	ble	13cd0 <flatcc_builder_create_buffer@@Base+0x1dc>
   13c7c:	ldr	r0, [r4, #36]	; 0x24
   13c80:	ldr	r6, [r4, #44]	; 0x2c
   13c84:	str	r1, [sp]
   13c88:	add	r1, lr, #8
   13c8c:	mov	r3, r7
   13c90:	blx	r6
   13c94:	cmp	r0, #0
   13c98:	bne	13cf0 <flatcc_builder_create_buffer@@Base+0x1fc>
   13c9c:	cmp	r7, #0
   13ca0:	str	r7, [r4, #136]	; 0x88
   13ca4:	movne	r0, r7
   13ca8:	subne	sp, fp, #28
   13cac:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	ldr	r0, [pc, #116]	; 13d2c <flatcc_builder_create_buffer@@Base+0x238>
   13cb4:	ldr	r1, [pc, #116]	; 13d30 <flatcc_builder_create_buffer@@Base+0x23c>
   13cb8:	ldr	r3, [pc, #116]	; 13d34 <flatcc_builder_create_buffer@@Base+0x240>
   13cbc:	mov	r2, #772	; 0x304
   13cc0:	add	r0, pc, r0
   13cc4:	add	r1, pc, r1
   13cc8:	add	r3, pc, r3
   13ccc:	bl	1249c <__assert_fail@plt>
   13cd0:	ldr	r0, [pc, #60]	; 13d14 <flatcc_builder_create_buffer@@Base+0x220>
   13cd4:	ldr	r1, [pc, #60]	; 13d18 <flatcc_builder_create_buffer@@Base+0x224>
   13cd8:	ldr	r3, [pc, #60]	; 13d1c <flatcc_builder_create_buffer@@Base+0x228>
   13cdc:	movw	r2, #647	; 0x287
   13ce0:	add	r0, pc, r0
   13ce4:	add	r1, pc, r1
   13ce8:	add	r3, pc, r3
   13cec:	bl	1249c <__assert_fail@plt>
   13cf0:	ldr	r0, [pc, #40]	; 13d20 <flatcc_builder_create_buffer@@Base+0x22c>
   13cf4:	ldr	r1, [pc, #40]	; 13d24 <flatcc_builder_create_buffer@@Base+0x230>
   13cf8:	ldr	r3, [pc, #40]	; 13d28 <flatcc_builder_create_buffer@@Base+0x234>
   13cfc:	movw	r2, #651	; 0x28b
   13d00:	add	r0, pc, r0
   13d04:	add	r1, pc, r1
   13d08:	add	r3, pc, r3
   13d0c:	bl	1249c <__assert_fail@plt>
   13d10:	andeq	r6, r1, r8, lsr #8
   13d14:			; <UNDEFINED> instruction: 0x00005fb7
   13d18:	strdeq	r4, [r0], -r6
   13d1c:	andeq	r5, r0, lr, ror #28
   13d20:	muleq	r0, r7, pc	; <UNPREDICTABLE>
   13d24:	ldrdeq	r4, [r0], -r6
   13d28:	andeq	r5, r0, lr, asr #28
   13d2c:	ldrdeq	r5, [r0], -r7
   13d30:	andeq	r4, r0, r6, lsl lr
   13d34:	andeq	r4, r0, r4, ror #30

00013d38 <flatcc_builder_create_struct@@Base>:
   13d38:	push	{r4, r5, r6, sl, fp, lr}
   13d3c:	add	fp, sp, #16
   13d40:	sub	sp, sp, #80	; 0x50
   13d44:	cmp	r3, #0
   13d48:	beq	13e20 <flatcc_builder_create_struct@@Base+0xe8>
   13d4c:	mov	r5, r0
   13d50:	ldrh	r0, [r0, #128]	; 0x80
   13d54:	mov	r4, #0
   13d58:	cmp	r0, r3
   13d5c:	strhcc	r3, [r5, #128]	; 0x80
   13d60:	sub	r3, r3, #1
   13d64:	cmp	r2, #0
   13d68:	ldr	r0, [r5, #136]	; 0x88
   13d6c:	str	r4, [sp, #12]
   13d70:	str	r4, [sp, #8]
   13d74:	movne	r4, #1
   13d78:	strne	r1, [sp, #16]
   13d7c:	strne	r2, [sp, #8]
   13d80:	strne	r2, [sp, #20]
   13d84:	strne	r4, [sp, #12]
   13d88:	sub	r6, r0, r2
   13d8c:	and	r3, r6, r3
   13d90:	cmp	r3, #0
   13d94:	beq	13dc0 <flatcc_builder_create_struct@@Base+0x88>
   13d98:	add	r2, r3, r2
   13d9c:	add	r1, sp, #8
   13da0:	str	r2, [sp, #8]
   13da4:	add	r1, r1, r4, lsl #3
   13da8:	add	r4, r4, #1
   13dac:	ldr	r6, [pc, #172]	; 13e60 <flatcc_builder_create_struct@@Base+0x128>
   13db0:	ldr	r6, [pc, r6]
   13db4:	str	r6, [r1, #8]
   13db8:	str	r3, [r1, #12]
   13dbc:	str	r4, [sp, #12]
   13dc0:	cmp	r2, #0
   13dc4:	ble	13e40 <flatcc_builder_create_struct@@Base+0x108>
   13dc8:	sub	r6, r0, r2
   13dcc:	ldr	r0, [r5, #36]	; 0x24
   13dd0:	ldr	ip, [r5, #44]	; 0x2c
   13dd4:	add	r1, sp, #8
   13dd8:	str	r2, [sp]
   13ddc:	mov	r2, r4
   13de0:	add	r1, r1, #8
   13de4:	mov	r3, r6
   13de8:	blx	ip
   13dec:	cmp	r0, #0
   13df0:	streq	r6, [r5, #136]	; 0x88
   13df4:	moveq	r0, r6
   13df8:	subeq	sp, fp, #16
   13dfc:	popeq	{r4, r5, r6, sl, fp, pc}
   13e00:	ldr	r0, [pc, #116]	; 13e7c <flatcc_builder_create_struct@@Base+0x144>
   13e04:	ldr	r1, [pc, #116]	; 13e80 <flatcc_builder_create_struct@@Base+0x148>
   13e08:	ldr	r3, [pc, #116]	; 13e84 <flatcc_builder_create_struct@@Base+0x14c>
   13e0c:	movw	r2, #651	; 0x28b
   13e10:	add	r0, pc, r0
   13e14:	add	r1, pc, r1
   13e18:	add	r3, pc, r3
   13e1c:	bl	1249c <__assert_fail@plt>
   13e20:	ldr	r0, [pc, #60]	; 13e64 <flatcc_builder_create_struct@@Base+0x12c>
   13e24:	ldr	r1, [pc, #60]	; 13e68 <flatcc_builder_create_struct@@Base+0x130>
   13e28:	ldr	r3, [pc, #60]	; 13e6c <flatcc_builder_create_struct@@Base+0x134>
   13e2c:	movw	r2, #783	; 0x30f
   13e30:	add	r0, pc, r0
   13e34:	add	r1, pc, r1
   13e38:	add	r3, pc, r3
   13e3c:	bl	1249c <__assert_fail@plt>
   13e40:	ldr	r0, [pc, #40]	; 13e70 <flatcc_builder_create_struct@@Base+0x138>
   13e44:	ldr	r1, [pc, #40]	; 13e74 <flatcc_builder_create_struct@@Base+0x13c>
   13e48:	ldr	r3, [pc, #40]	; 13e78 <flatcc_builder_create_struct@@Base+0x140>
   13e4c:	movw	r2, #647	; 0x287
   13e50:	add	r0, pc, r0
   13e54:	add	r1, pc, r1
   13e58:	add	r3, pc, r3
   13e5c:	bl	1249c <__assert_fail@plt>
   13e60:	andeq	r6, r1, r4, lsr #5
   13e64:	andeq	r4, r0, pc, ror lr
   13e68:	andeq	r4, r0, r6, lsr #25
   13e6c:	andeq	r4, r0, r2, lsl #29
   13e70:	andeq	r5, r0, r7, asr #28
   13e74:	andeq	r4, r0, r6, lsl #25
   13e78:	strdeq	r5, [r0], -lr
   13e7c:	andeq	r5, r0, r7, lsl #29
   13e80:	andeq	r4, r0, r6, asr #25
   13e84:	andeq	r5, r0, lr, lsr sp

00013e88 <flatcc_builder_start_buffer@@Base>:
   13e88:	push	{r4, r5, r6, r7, fp, lr}
   13e8c:	add	fp, sp, #16
   13e90:	mov	r5, r1
   13e94:	ldrh	r1, [r0, #128]	; 0x80
   13e98:	mov	r6, r3
   13e9c:	mov	r7, r2
   13ea0:	mov	r4, r0
   13ea4:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   13ea8:	mov	r1, r0
   13eac:	mvn	r0, #0
   13eb0:	cmp	r1, #0
   13eb4:	popne	{r4, r5, r6, r7, fp, pc}
   13eb8:	mov	r0, #1
   13ebc:	cmp	r5, #0
   13ec0:	strh	r0, [r4, #128]	; 0x80
   13ec4:	ldrh	r1, [r4, #132]	; 0x84
   13ec8:	ldr	r2, [r4, #32]
   13ecc:	strh	r1, [r2, #34]	; 0x22
   13ed0:	strh	r7, [r4, #132]	; 0x84
   13ed4:	ldrh	r1, [r4, #164]	; 0xa4
   13ed8:	ldr	r2, [r4, #32]
   13edc:	strh	r1, [r2, #32]
   13ee0:	strh	r6, [r4, #164]	; 0xa4
   13ee4:	ldr	r1, [r4, #32]
   13ee8:	ldr	r2, [r4, #144]	; 0x90
   13eec:	str	r2, [r1, #20]
   13ef0:	ldr	r1, [r4, #32]
   13ef4:	ldr	r2, [r4, #152]	; 0x98
   13ef8:	str	r2, [r1, #28]
   13efc:	ldr	r3, [r4, #148]	; 0x94
   13f00:	ldr	r1, [r4, #32]
   13f04:	ldr	r2, [r4, #136]	; 0x88
   13f08:	ldr	r7, [r4, #168]	; 0xa8
   13f0c:	add	r6, r3, #1
   13f10:	str	r2, [r4, #144]	; 0x90
   13f14:	str	r6, [r4, #148]	; 0x94
   13f18:	str	r3, [r4, #152]	; 0x98
   13f1c:	str	r7, [r1, #16]
   13f20:	ldr	r1, [pc, #28]	; 13f44 <flatcc_builder_start_buffer@@Base+0xbc>
   13f24:	ldr	r1, [pc, r1]
   13f28:	movne	r1, r5
   13f2c:	ldr	r1, [r1]
   13f30:	str	r1, [r4, #168]	; 0xa8
   13f34:	ldr	r1, [r4, #32]
   13f38:	strh	r0, [r1, #14]
   13f3c:	mov	r0, #0
   13f40:	pop	{r4, r5, r6, r7, fp, pc}
   13f44:	andeq	r6, r1, r0, lsr r1
   13f48:	push	{r4, r5, r6, r7, fp, lr}
   13f4c:	add	fp, sp, #16
   13f50:	sub	sp, sp, #8
   13f54:	mov	r5, r1
   13f58:	ldr	r1, [r0, #156]	; 0x9c
   13f5c:	ldr	r2, [r0, #160]	; 0xa0
   13f60:	mov	r4, r0
   13f64:	add	r0, r1, #1
   13f68:	cmp	r1, r2
   13f6c:	str	r0, [r4, #156]	; 0x9c
   13f70:	bge	13f84 <flatcc_builder_start_buffer@@Base+0xfc>
   13f74:	ldr	r0, [r4, #32]
   13f78:	add	r0, r0, #36	; 0x24
   13f7c:	str	r0, [r4, #32]
   13f80:	b	14018 <flatcc_builder_start_buffer@@Base+0x190>
   13f84:	ldr	r2, [r4, #176]	; 0xb0
   13f88:	mvn	r6, #0
   13f8c:	cmp	r2, #1
   13f90:	cmpge	r1, r2
   13f94:	bge	14050 <flatcc_builder_start_buffer@@Base+0x1c8>
   13f98:	add	r7, r0, r0, lsl #3
   13f9c:	ldr	r0, [r4, #88]	; 0x58
   13fa0:	lsl	r2, r7, #2
   13fa4:	cmp	r2, r0
   13fa8:	bls	13fd0 <flatcc_builder_start_buffer@@Base+0x148>
   13fac:	ldr	r0, [r4, #40]	; 0x28
   13fb0:	ldr	ip, [r4, #48]	; 0x30
   13fb4:	mov	r3, #4
   13fb8:	add	r1, r4, #84	; 0x54
   13fbc:	str	r3, [sp]
   13fc0:	mov	r3, #0
   13fc4:	blx	ip
   13fc8:	cmp	r0, #0
   13fcc:	bne	1405c <flatcc_builder_start_buffer@@Base+0x1d4>
   13fd0:	ldr	r1, [r4, #84]	; 0x54
   13fd4:	mvn	r0, #35	; 0x23
   13fd8:	add	r0, r0, r7, lsl #2
   13fdc:	adds	r0, r0, r1
   13fe0:	str	r0, [r4, #32]
   13fe4:	beq	14050 <flatcc_builder_start_buffer@@Base+0x1c8>
   13fe8:	ldr	r1, [r4, #88]	; 0x58
   13fec:	movw	r3, #36409	; 0x8e39
   13ff0:	ldr	r2, [r4, #176]	; 0xb0
   13ff4:	movt	r3, #14563	; 0x38e3
   13ff8:	umull	r1, r3, r1, r3
   13ffc:	lsr	r1, r3, #3
   14000:	cmp	r2, r3, lsr #3
   14004:	mov	r3, r1
   14008:	movlt	r3, r2
   1400c:	cmp	r2, #0
   14010:	movle	r3, r1
   14014:	str	r3, [r4, #160]	; 0xa0
   14018:	ldr	r1, [r4, #20]
   1401c:	mvn	r3, #3
   14020:	mov	r6, #0
   14024:	str	r1, [r0, #8]
   14028:	ldrh	r2, [r4, #130]	; 0x82
   1402c:	strh	r2, [r0, #12]
   14030:	strh	r5, [r4, #130]	; 0x82
   14034:	ldr	r2, [r4, #28]
   14038:	stm	r0, {r2, r3}
   1403c:	add	r0, r1, r2
   14040:	str	r6, [r4, #20]
   14044:	add	r0, r0, #7
   14048:	bic	r0, r0, #7
   1404c:	str	r0, [r4, #28]
   14050:	mov	r0, r6
   14054:	sub	sp, fp, #16
   14058:	pop	{r4, r5, r6, r7, fp, pc}
   1405c:	ldr	r0, [pc, #24]	; 1407c <flatcc_builder_start_buffer@@Base+0x1f4>
   14060:	ldr	r1, [pc, #24]	; 14080 <flatcc_builder_start_buffer@@Base+0x1f8>
   14064:	ldr	r3, [pc, #24]	; 14084 <flatcc_builder_start_buffer@@Base+0x1fc>
   14068:	mov	r2, #308	; 0x134
   1406c:	add	r0, pc, r0
   14070:	add	r1, pc, r1
   14074:	add	r3, pc, r3
   14078:	bl	1249c <__assert_fail@plt>
   1407c:	andeq	r5, r0, fp, lsr #24
   14080:	andeq	r4, r0, sl, ror #20
   14084:	andeq	r5, r0, sp, asr sl

00014088 <flatcc_builder_end_buffer@@Base>:
   14088:	push	{r4, r5, r6, sl, fp, lr}
   1408c:	add	fp, sp, #16
   14090:	sub	sp, sp, #8
   14094:	mov	r4, r0
   14098:	ldr	r0, [r0, #32]
   1409c:	ldrh	r0, [r0, #14]
   140a0:	cmp	r0, #1
   140a4:	bne	14198 <flatcc_builder_end_buffer@@Base+0x110>
   140a8:	mov	r3, r1
   140ac:	ldr	r1, [r4, #152]	; 0x98
   140b0:	ldrh	r0, [r4, #164]	; 0xa4
   140b4:	ldrh	r2, [r4, #132]	; 0x84
   140b8:	cmp	r1, #0
   140bc:	ldrh	r1, [r4, #128]	; 0x80
   140c0:	and	r0, r0, #2
   140c4:	orrne	r0, r0, #1
   140c8:	cmp	r1, r2
   140cc:	movcc	r1, r2
   140d0:	strhcc	r2, [r4, #128]	; 0x80
   140d4:	str	r0, [sp, #4]
   140d8:	mov	r0, r4
   140dc:	str	r1, [sp]
   140e0:	add	r1, r4, #168	; 0xa8
   140e4:	bl	13af4 <flatcc_builder_create_buffer@@Base>
   140e8:	mov	r6, r0
   140ec:	cmp	r0, #0
   140f0:	beq	1418c <flatcc_builder_end_buffer@@Base+0x104>
   140f4:	ldr	r1, [r4, #32]
   140f8:	ldr	r0, [r4, #16]
   140fc:	ldr	r2, [r4, #20]
   14100:	ldr	r3, [r1, #20]
   14104:	str	r3, [r4, #144]	; 0x90
   14108:	ldr	r3, [r1, #28]
   1410c:	str	r3, [r4, #152]	; 0x98
   14110:	ldr	r3, [r1, #16]
   14114:	str	r3, [r4, #168]	; 0xa8
   14118:	ldrh	r1, [r1, #32]
   1411c:	strh	r1, [r4, #164]	; 0xa4
   14120:	mov	r1, #0
   14124:	bl	1246c <memset@plt>
   14128:	ldr	r0, [r4, #32]
   1412c:	ldr	r1, [r4, #60]	; 0x3c
   14130:	ldr	r2, [r4, #64]	; 0x40
   14134:	ldr	r3, [r0, #8]
   14138:	str	r3, [r4, #20]
   1413c:	ldr	r3, [r0]
   14140:	str	r3, [r4, #28]
   14144:	add	r1, r1, r3
   14148:	ldr	r5, [r0, #4]
   1414c:	str	r1, [r4, #16]
   14150:	sub	r1, r2, r3
   14154:	cmp	r1, r5
   14158:	movhi	r1, r5
   1415c:	str	r1, [r4, #24]
   14160:	ldrh	r1, [r4, #130]	; 0x82
   14164:	ldrh	r2, [r4, #128]	; 0x80
   14168:	cmp	r2, r1
   1416c:	strhcc	r1, [r4, #128]	; 0x80
   14170:	ldrh	r1, [r0, #12]
   14174:	sub	r0, r0, #36	; 0x24
   14178:	str	r0, [r4, #32]
   1417c:	strh	r1, [r4, #130]	; 0x82
   14180:	ldr	r0, [r4, #156]	; 0x9c
   14184:	sub	r0, r0, #1
   14188:	str	r0, [r4, #156]	; 0x9c
   1418c:	mov	r0, r6
   14190:	sub	sp, fp, #16
   14194:	pop	{r4, r5, r6, sl, fp, pc}
   14198:	ldr	r0, [pc, #24]	; 141b8 <flatcc_builder_end_buffer@@Base+0x130>
   1419c:	ldr	r1, [pc, #24]	; 141bc <flatcc_builder_end_buffer@@Base+0x134>
   141a0:	ldr	r3, [pc, #24]	; 141c0 <flatcc_builder_end_buffer@@Base+0x138>
   141a4:	movw	r2, #838	; 0x346
   141a8:	add	r0, pc, r0
   141ac:	add	r1, pc, r1
   141b0:	add	r3, pc, r3
   141b4:	bl	1249c <__assert_fail@plt>
   141b8:	andeq	r4, r0, r8, ror fp
   141bc:	andeq	r4, r0, lr, lsr #18
   141c0:	muleq	r0, ip, fp

000141c4 <flatcc_builder_start_struct@@Base>:
   141c4:	push	{r4, r5, r6, r7, fp, lr}
   141c8:	add	fp, sp, #16
   141cc:	sub	sp, sp, #8
   141d0:	mov	r6, r1
   141d4:	mov	r1, r2
   141d8:	mov	r4, r0
   141dc:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   141e0:	mov	r5, #0
   141e4:	cmp	r0, #0
   141e8:	bne	14298 <flatcc_builder_start_struct@@Base+0xd4>
   141ec:	ldr	r2, [r4, #32]
   141f0:	mov	r0, #2
   141f4:	mvn	r7, #3
   141f8:	strh	r0, [r2, #14]
   141fc:	ldr	r1, [r4, #28]
   14200:	ldr	r3, [r4, #64]	; 0x40
   14204:	ldr	r0, [r4, #60]	; 0x3c
   14208:	sub	r3, r3, r1
   1420c:	add	r0, r0, r1
   14210:	cmn	r3, #4
   14214:	str	r0, [r4, #16]
   14218:	movcs	r3, r7
   1421c:	str	r3, [r4, #24]
   14220:	str	r7, [r2, #4]
   14224:	ldr	r7, [r4, #20]
   14228:	add	r2, r7, r6
   1422c:	cmp	r2, r3
   14230:	str	r2, [r4, #20]
   14234:	bcc	14294 <flatcc_builder_start_struct@@Base+0xd0>
   14238:	ldr	r0, [r4, #40]	; 0x28
   1423c:	ldr	r6, [r4, #48]	; 0x30
   14240:	add	r1, r1, r2
   14244:	mov	r3, #1
   14248:	str	r3, [sp]
   1424c:	add	r2, r1, #1
   14250:	add	r1, r4, #60	; 0x3c
   14254:	mov	r3, #1
   14258:	blx	r6
   1425c:	cmp	r0, #0
   14260:	bne	14298 <flatcc_builder_start_struct@@Base+0xd4>
   14264:	ldr	r1, [r4, #28]
   14268:	ldr	r0, [r4, #60]	; 0x3c
   1426c:	ldr	r3, [r4, #64]	; 0x40
   14270:	ldr	r2, [r4, #32]
   14274:	add	r0, r0, r1
   14278:	sub	r1, r3, r1
   1427c:	mvn	r3, #3
   14280:	cmn	r1, #4
   14284:	str	r0, [r4, #16]
   14288:	movcs	r1, r3
   1428c:	str	r1, [r4, #24]
   14290:	str	r3, [r2, #4]
   14294:	add	r5, r0, r7
   14298:	mov	r0, r5
   1429c:	sub	sp, fp, #16
   142a0:	pop	{r4, r5, r6, r7, fp, pc}

000142a4 <flatcc_builder_struct_edit@@Base>:
   142a4:	ldr	r0, [r0, #16]
   142a8:	bx	lr

000142ac <flatcc_builder_end_struct@@Base>:
   142ac:	push	{r4, r5, fp, lr}
   142b0:	add	fp, sp, #8
   142b4:	mov	r4, r0
   142b8:	ldr	r0, [r0, #32]
   142bc:	ldrh	r0, [r0, #14]
   142c0:	cmp	r0, #2
   142c4:	bne	14364 <flatcc_builder_end_struct@@Base+0xb8>
   142c8:	ldrh	r3, [r4, #130]	; 0x82
   142cc:	ldr	r1, [r4, #16]
   142d0:	ldr	r2, [r4, #20]
   142d4:	mov	r0, r4
   142d8:	bl	13d38 <flatcc_builder_create_struct@@Base>
   142dc:	mov	r5, r0
   142e0:	cmp	r0, #0
   142e4:	beq	1435c <flatcc_builder_end_struct@@Base+0xb0>
   142e8:	ldr	r0, [r4, #16]
   142ec:	ldr	r2, [r4, #20]
   142f0:	mov	r1, #0
   142f4:	bl	1246c <memset@plt>
   142f8:	ldr	r0, [r4, #32]
   142fc:	ldr	r1, [r4, #60]	; 0x3c
   14300:	ldr	ip, [r4, #64]	; 0x40
   14304:	ldr	r3, [r0, #8]
   14308:	str	r3, [r4, #20]
   1430c:	ldr	r3, [r0]
   14310:	str	r3, [r4, #28]
   14314:	add	r1, r1, r3
   14318:	ldr	r2, [r0, #4]
   1431c:	str	r1, [r4, #16]
   14320:	sub	r1, ip, r3
   14324:	cmp	r1, r2
   14328:	movhi	r1, r2
   1432c:	str	r1, [r4, #24]
   14330:	ldrh	r1, [r4, #130]	; 0x82
   14334:	ldrh	r2, [r4, #128]	; 0x80
   14338:	cmp	r2, r1
   1433c:	strhcc	r1, [r4, #128]	; 0x80
   14340:	ldrh	r1, [r0, #12]
   14344:	sub	r0, r0, #36	; 0x24
   14348:	str	r0, [r4, #32]
   1434c:	strh	r1, [r4, #130]	; 0x82
   14350:	ldr	r0, [r4, #156]	; 0x9c
   14354:	sub	r0, r0, #1
   14358:	str	r0, [r4, #156]	; 0x9c
   1435c:	mov	r0, r5
   14360:	pop	{r4, r5, fp, pc}
   14364:	ldr	r0, [pc, #24]	; 14384 <flatcc_builder_end_struct@@Base+0xd8>
   14368:	ldr	r1, [pc, #24]	; 14388 <flatcc_builder_end_struct@@Base+0xdc>
   1436c:	ldr	r3, [pc, #24]	; 1438c <flatcc_builder_end_struct@@Base+0xe0>
   14370:	mov	r2, #872	; 0x368
   14374:	add	r0, pc, r0
   14378:	add	r1, pc, r1
   1437c:	add	r3, pc, r3
   14380:	bl	1249c <__assert_fail@plt>
   14384:	andeq	r4, r0, r1, lsr sl
   14388:	andeq	r4, r0, r2, ror #14
   1438c:	andeq	r4, r0, r5, asr sl

00014390 <flatcc_builder_extend_vector@@Base>:
   14390:	push	{r4, r5, fp, lr}
   14394:	add	fp, sp, #8
   14398:	sub	sp, sp, #8
   1439c:	mov	r4, r0
   143a0:	ldr	r0, [r0, #32]
   143a4:	ldr	r2, [r0, #20]
   143a8:	adds	r2, r2, r1
   143ac:	bcs	14464 <flatcc_builder_extend_vector@@Base+0xd4>
   143b0:	ldr	r3, [r0, #24]
   143b4:	cmp	r2, r3
   143b8:	bhi	14464 <flatcc_builder_extend_vector@@Base+0xd4>
   143bc:	str	r2, [r0, #20]
   143c0:	ldr	r2, [r4, #32]
   143c4:	ldr	r5, [r4, #20]
   143c8:	ldr	r0, [r4, #24]
   143cc:	ldr	r2, [r2, #16]
   143d0:	mla	r1, r2, r1, r5
   143d4:	cmp	r1, r0
   143d8:	str	r1, [r4, #20]
   143dc:	bcs	143e8 <flatcc_builder_extend_vector@@Base+0x58>
   143e0:	ldr	r0, [r4, #16]
   143e4:	b	14458 <flatcc_builder_extend_vector@@Base+0xc8>
   143e8:	ldr	r2, [r4, #28]
   143ec:	ldr	r0, [r4, #40]	; 0x28
   143f0:	ldr	ip, [r4, #48]	; 0x30
   143f4:	mov	r3, #1
   143f8:	str	r3, [sp]
   143fc:	mov	r3, #1
   14400:	add	r1, r1, r2
   14404:	add	r2, r1, #1
   14408:	add	r1, r4, #60	; 0x3c
   1440c:	blx	ip
   14410:	mov	r1, r0
   14414:	mov	r0, #0
   14418:	cmp	r1, #0
   1441c:	beq	14428 <flatcc_builder_extend_vector@@Base+0x98>
   14420:	sub	sp, fp, #8
   14424:	pop	{r4, r5, fp, pc}
   14428:	ldr	r1, [r4, #28]
   1442c:	ldr	r0, [r4, #60]	; 0x3c
   14430:	ldr	r3, [r4, #64]	; 0x40
   14434:	ldr	r2, [r4, #32]
   14438:	add	r0, r0, r1
   1443c:	sub	r1, r3, r1
   14440:	mvn	r3, #3
   14444:	cmn	r1, #4
   14448:	str	r0, [r4, #16]
   1444c:	movcs	r1, r3
   14450:	str	r1, [r4, #24]
   14454:	str	r3, [r2, #4]
   14458:	add	r0, r0, r5
   1445c:	sub	sp, fp, #8
   14460:	pop	{r4, r5, fp, pc}
   14464:	ldr	r0, [pc, #24]	; 14484 <flatcc_builder_extend_vector@@Base+0xf4>
   14468:	ldr	r1, [pc, #24]	; 14488 <flatcc_builder_extend_vector@@Base+0xf8>
   1446c:	ldr	r3, [pc, #24]	; 1448c <flatcc_builder_extend_vector@@Base+0xfc>
   14470:	mov	r2, #892	; 0x37c
   14474:	add	r0, pc, r0
   14478:	add	r1, pc, r1
   1447c:	add	r3, pc, r3
   14480:	bl	1249c <__assert_fail@plt>
   14484:	andeq	r5, r0, ip, lsr #14
   14488:	andeq	r4, r0, r2, ror #12
   1448c:	andeq	r5, r0, pc, lsr r7

00014490 <flatcc_builder_vector_push@@Base>:
   14490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14494:	add	fp, sp, #24
   14498:	sub	sp, sp, #8
   1449c:	mov	r5, r0
   144a0:	ldr	r0, [r0, #32]
   144a4:	mov	r8, r1
   144a8:	ldrh	r1, [r0, #14]
   144ac:	cmp	r1, #4
   144b0:	bne	14588 <flatcc_builder_vector_push@@Base+0xf8>
   144b4:	ldr	r1, [r0, #20]
   144b8:	ldr	r2, [r0, #24]
   144bc:	cmp	r1, r2
   144c0:	bhi	145a8 <flatcc_builder_vector_push@@Base+0x118>
   144c4:	add	r1, r1, #1
   144c8:	str	r1, [r0, #20]
   144cc:	ldr	r1, [r5, #32]
   144d0:	ldr	r4, [r5, #20]
   144d4:	ldr	r0, [r5, #24]
   144d8:	ldr	r6, [r1, #16]
   144dc:	add	r1, r4, r6
   144e0:	cmp	r1, r0
   144e4:	str	r1, [r5, #20]
   144e8:	bcs	1450c <flatcc_builder_vector_push@@Base+0x7c>
   144ec:	ldr	r0, [r5, #16]
   144f0:	adds	r7, r0, r4
   144f4:	beq	14578 <flatcc_builder_vector_push@@Base+0xe8>
   144f8:	mov	r0, r7
   144fc:	mov	r1, r8
   14500:	mov	r2, r6
   14504:	bl	123e8 <memcpy@plt>
   14508:	b	1457c <flatcc_builder_vector_push@@Base+0xec>
   1450c:	ldr	r2, [r5, #28]
   14510:	ldr	r0, [r5, #40]	; 0x28
   14514:	ldr	r7, [r5, #48]	; 0x30
   14518:	mov	r3, #1
   1451c:	str	r3, [sp]
   14520:	mov	r3, #1
   14524:	add	r1, r1, r2
   14528:	add	r2, r1, #1
   1452c:	add	r1, r5, #60	; 0x3c
   14530:	blx	r7
   14534:	mov	r7, #0
   14538:	cmp	r0, #0
   1453c:	bne	1457c <flatcc_builder_vector_push@@Base+0xec>
   14540:	ldr	r1, [r5, #28]
   14544:	ldr	r0, [r5, #60]	; 0x3c
   14548:	ldr	r3, [r5, #64]	; 0x40
   1454c:	ldr	r2, [r5, #32]
   14550:	add	r0, r0, r1
   14554:	sub	r1, r3, r1
   14558:	mvn	r3, #3
   1455c:	cmn	r1, #4
   14560:	str	r0, [r5, #16]
   14564:	movcs	r1, r3
   14568:	str	r1, [r5, #24]
   1456c:	str	r3, [r2, #4]
   14570:	adds	r7, r0, r4
   14574:	bne	144f8 <flatcc_builder_vector_push@@Base+0x68>
   14578:	mov	r7, #0
   1457c:	mov	r0, r7
   14580:	sub	sp, fp, #24
   14584:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14588:	ldr	r0, [pc, #56]	; 145c8 <flatcc_builder_vector_push@@Base+0x138>
   1458c:	ldr	r1, [pc, #56]	; 145cc <flatcc_builder_vector_push@@Base+0x13c>
   14590:	ldr	r3, [pc, #56]	; 145d0 <flatcc_builder_vector_push@@Base+0x140>
   14594:	movw	r2, #907	; 0x38b
   14598:	add	r0, pc, r0
   1459c:	add	r1, pc, r1
   145a0:	add	r3, pc, r3
   145a4:	bl	1249c <__assert_fail@plt>
   145a8:	ldr	r0, [pc, #36]	; 145d4 <flatcc_builder_vector_push@@Base+0x144>
   145ac:	ldr	r1, [pc, #36]	; 145d8 <flatcc_builder_vector_push@@Base+0x148>
   145b0:	ldr	r3, [pc, #36]	; 145dc <flatcc_builder_vector_push@@Base+0x14c>
   145b4:	mov	r2, #908	; 0x38c
   145b8:	add	r0, pc, r0
   145bc:	add	r1, pc, r1
   145c0:	add	r3, pc, r3
   145c4:	bl	1249c <__assert_fail@plt>
   145c8:	andeq	r4, r0, ip, ror r8
   145cc:	andeq	r4, r0, lr, lsr r5
   145d0:	andeq	r4, r0, r0, lsr #17
   145d4:	andeq	r4, r0, fp, asr #17
   145d8:	andeq	r4, r0, lr, lsl r5
   145dc:	andeq	r4, r0, r0, lsl #17

000145e0 <flatcc_builder_append_vector@@Base>:
   145e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   145e4:	add	fp, sp, #24
   145e8:	sub	sp, sp, #8
   145ec:	mov	r6, r0
   145f0:	ldr	r0, [r0, #32]
   145f4:	mov	r8, r1
   145f8:	ldrh	r1, [r0, #14]
   145fc:	cmp	r1, #4
   14600:	bne	14700 <flatcc_builder_append_vector@@Base+0x120>
   14604:	ldr	r1, [r0, #20]
   14608:	mov	r5, r2
   1460c:	adds	r1, r1, r2
   14610:	bcs	146e0 <flatcc_builder_append_vector@@Base+0x100>
   14614:	ldr	r2, [r0, #24]
   14618:	cmp	r1, r2
   1461c:	bhi	146e0 <flatcc_builder_append_vector@@Base+0x100>
   14620:	str	r1, [r0, #20]
   14624:	ldr	r1, [r6, #32]
   14628:	ldr	r4, [r6, #20]
   1462c:	ldr	r0, [r6, #24]
   14630:	ldr	r9, [r1, #16]
   14634:	mla	r1, r9, r5, r4
   14638:	cmp	r1, r0
   1463c:	str	r1, [r6, #20]
   14640:	bcs	14664 <flatcc_builder_append_vector@@Base+0x84>
   14644:	ldr	r0, [r6, #16]
   14648:	adds	r7, r0, r4
   1464c:	beq	146d0 <flatcc_builder_append_vector@@Base+0xf0>
   14650:	mul	r2, r9, r5
   14654:	mov	r0, r7
   14658:	mov	r1, r8
   1465c:	bl	123e8 <memcpy@plt>
   14660:	b	146d4 <flatcc_builder_append_vector@@Base+0xf4>
   14664:	ldr	r2, [r6, #28]
   14668:	ldr	r0, [r6, #40]	; 0x28
   1466c:	ldr	r7, [r6, #48]	; 0x30
   14670:	mov	r3, #1
   14674:	str	r3, [sp]
   14678:	mov	r3, #1
   1467c:	add	r1, r1, r2
   14680:	add	r2, r1, #1
   14684:	add	r1, r6, #60	; 0x3c
   14688:	blx	r7
   1468c:	mov	r7, #0
   14690:	cmp	r0, #0
   14694:	bne	146d4 <flatcc_builder_append_vector@@Base+0xf4>
   14698:	ldr	r1, [r6, #28]
   1469c:	ldr	r0, [r6, #60]	; 0x3c
   146a0:	ldr	r3, [r6, #64]	; 0x40
   146a4:	ldr	r2, [r6, #32]
   146a8:	add	r0, r0, r1
   146ac:	sub	r1, r3, r1
   146b0:	mvn	r3, #3
   146b4:	cmn	r1, #4
   146b8:	str	r0, [r6, #16]
   146bc:	movcs	r1, r3
   146c0:	str	r1, [r6, #24]
   146c4:	str	r3, [r2, #4]
   146c8:	adds	r7, r0, r4
   146cc:	bne	14650 <flatcc_builder_append_vector@@Base+0x70>
   146d0:	mov	r7, #0
   146d4:	mov	r0, r7
   146d8:	sub	sp, fp, #24
   146dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146e0:	ldr	r0, [pc, #68]	; 1472c <flatcc_builder_append_vector@@Base+0x14c>
   146e4:	ldr	r1, [pc, #68]	; 14730 <flatcc_builder_append_vector@@Base+0x150>
   146e8:	ldr	r3, [pc, #68]	; 14734 <flatcc_builder_append_vector@@Base+0x154>
   146ec:	mov	r2, #892	; 0x37c
   146f0:	add	r0, pc, r0
   146f4:	add	r1, pc, r1
   146f8:	add	r3, pc, r3
   146fc:	bl	1249c <__assert_fail@plt>
   14700:	ldr	r0, [pc, #24]	; 14720 <flatcc_builder_append_vector@@Base+0x140>
   14704:	ldr	r1, [pc, #24]	; 14724 <flatcc_builder_append_vector@@Base+0x144>
   14708:	ldr	r3, [pc, #24]	; 14728 <flatcc_builder_append_vector@@Base+0x148>
   1470c:	movw	r2, #915	; 0x393
   14710:	add	r0, pc, r0
   14714:	add	r1, pc, r1
   14718:	add	r3, pc, r3
   1471c:	bl	1249c <__assert_fail@plt>
   14720:	andeq	r4, r0, r4, lsl #14
   14724:	andeq	r4, r0, r6, asr #7
   14728:	andeq	r4, r0, r8, lsr #15
   1472c:			; <UNDEFINED> instruction: 0x000054b0
   14730:	andeq	r4, r0, r6, ror #7
   14734:	andeq	r5, r0, r3, asr #9

00014738 <flatcc_builder_extend_offset_vector@@Base>:
   14738:	push	{r4, r5, fp, lr}
   1473c:	add	fp, sp, #8
   14740:	sub	sp, sp, #8
   14744:	mov	r4, r0
   14748:	ldr	r0, [r0, #32]
   1474c:	ldr	r2, [r0, #20]
   14750:	adds	r2, r2, r1
   14754:	cmpcc	r2, #1073741824	; 0x40000000
   14758:	bcc	1477c <flatcc_builder_extend_offset_vector@@Base+0x44>
   1475c:	ldr	r0, [pc, #184]	; 1481c <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14760:	ldr	r1, [pc, #184]	; 14820 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14764:	ldr	r3, [pc, #184]	; 14824 <flatcc_builder_extend_offset_vector@@Base+0xec>
   14768:	mov	r2, #892	; 0x37c
   1476c:	add	r0, pc, r0
   14770:	add	r1, pc, r1
   14774:	add	r3, pc, r3
   14778:	bl	1249c <__assert_fail@plt>
   1477c:	str	r2, [r0, #20]
   14780:	ldr	r5, [r4, #20]
   14784:	ldr	r0, [r4, #24]
   14788:	add	r1, r5, r1, lsl #2
   1478c:	cmp	r1, r0
   14790:	str	r1, [r4, #20]
   14794:	bcs	147a0 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14798:	ldr	r0, [r4, #16]
   1479c:	b	14810 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   147a0:	ldr	r2, [r4, #28]
   147a4:	ldr	r0, [r4, #40]	; 0x28
   147a8:	ldr	ip, [r4, #48]	; 0x30
   147ac:	mov	r3, #1
   147b0:	str	r3, [sp]
   147b4:	mov	r3, #1
   147b8:	add	r1, r1, r2
   147bc:	add	r2, r1, #1
   147c0:	add	r1, r4, #60	; 0x3c
   147c4:	blx	ip
   147c8:	mov	r1, r0
   147cc:	mov	r0, #0
   147d0:	cmp	r1, #0
   147d4:	beq	147e0 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   147d8:	sub	sp, fp, #8
   147dc:	pop	{r4, r5, fp, pc}
   147e0:	ldr	r1, [r4, #28]
   147e4:	ldr	r0, [r4, #60]	; 0x3c
   147e8:	ldr	r3, [r4, #64]	; 0x40
   147ec:	ldr	r2, [r4, #32]
   147f0:	add	r0, r0, r1
   147f4:	sub	r1, r3, r1
   147f8:	mvn	r3, #3
   147fc:	cmn	r1, #4
   14800:	str	r0, [r4, #16]
   14804:	movcs	r1, r3
   14808:	str	r1, [r4, #24]
   1480c:	str	r3, [r2, #4]
   14810:	add	r0, r0, r5
   14814:	sub	sp, fp, #8
   14818:	pop	{r4, r5, fp, pc}
   1481c:	andeq	r5, r0, r4, lsr r4
   14820:	andeq	r4, r0, sl, ror #6
   14824:	andeq	r5, r0, r7, asr #8

00014828 <flatcc_builder_offset_vector_push@@Base>:
   14828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1482c:	add	fp, sp, #24
   14830:	sub	sp, sp, #8
   14834:	mov	r6, r0
   14838:	ldr	r0, [r0, #32]
   1483c:	mov	r8, r1
   14840:	ldrh	r1, [r0, #14]
   14844:	cmp	r1, #5
   14848:	bne	148fc <flatcc_builder_offset_vector_push@@Base+0xd4>
   1484c:	ldr	r1, [r0, #20]
   14850:	mov	r5, #0
   14854:	cmn	r1, #-1073741823	; 0xc0000001
   14858:	beq	148f0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1485c:	add	r1, r1, #1
   14860:	str	r1, [r0, #20]
   14864:	ldr	r7, [r6, #20]
   14868:	ldr	r0, [r6, #24]
   1486c:	add	r1, r7, #4
   14870:	cmp	r1, r0
   14874:	str	r1, [r6, #20]
   14878:	bcs	14884 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1487c:	ldr	r0, [r6, #16]
   14880:	b	148e4 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14884:	ldr	r1, [r6, #28]
   14888:	ldr	r0, [r6, #40]	; 0x28
   1488c:	ldr	r4, [r6, #48]	; 0x30
   14890:	mov	r2, #1
   14894:	mov	r3, #1
   14898:	str	r2, [sp]
   1489c:	add	r1, r7, r1
   148a0:	add	r2, r1, #5
   148a4:	add	r1, r6, #60	; 0x3c
   148a8:	blx	r4
   148ac:	cmp	r0, #0
   148b0:	bne	148f0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   148b4:	ldr	r1, [r6, #28]
   148b8:	ldr	r0, [r6, #60]	; 0x3c
   148bc:	ldr	r3, [r6, #64]	; 0x40
   148c0:	ldr	r2, [r6, #32]
   148c4:	add	r0, r0, r1
   148c8:	sub	r1, r3, r1
   148cc:	mvn	r3, #3
   148d0:	cmn	r1, #4
   148d4:	str	r0, [r6, #16]
   148d8:	movcs	r1, r3
   148dc:	str	r1, [r6, #24]
   148e0:	str	r3, [r2, #4]
   148e4:	adds	r0, r0, r7
   148e8:	movne	r5, r0
   148ec:	strne	r8, [r0]
   148f0:	mov	r0, r5
   148f4:	sub	sp, fp, #24
   148f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148fc:	ldr	r0, [pc, #24]	; 1491c <flatcc_builder_offset_vector_push@@Base+0xf4>
   14900:	ldr	r1, [pc, #24]	; 14920 <flatcc_builder_offset_vector_push@@Base+0xf8>
   14904:	ldr	r3, [pc, #24]	; 14924 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14908:	movw	r2, #934	; 0x3a6
   1490c:	add	r0, pc, r0
   14910:	add	r1, pc, r1
   14914:	add	r3, pc, r3
   14918:	bl	1249c <__assert_fail@plt>
   1491c:	andeq	r4, r0, r1, lsl #12
   14920:	andeq	r4, r0, sl, asr #3
   14924:	andeq	r4, r0, ip, lsr #12

00014928 <flatcc_builder_append_offset_vector@@Base>:
   14928:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1492c:	add	fp, sp, #24
   14930:	sub	sp, sp, #8
   14934:	mov	r6, r0
   14938:	ldr	r0, [r0, #32]
   1493c:	mov	r8, r1
   14940:	ldrh	r1, [r0, #14]
   14944:	cmp	r1, #5
   14948:	bne	14a38 <flatcc_builder_append_offset_vector@@Base+0x110>
   1494c:	ldr	r1, [r0, #20]
   14950:	mov	r5, r2
   14954:	adds	r1, r1, r2
   14958:	cmpcc	r1, #1073741824	; 0x40000000
   1495c:	bcc	14980 <flatcc_builder_append_offset_vector@@Base+0x58>
   14960:	ldr	r0, [pc, #252]	; 14a64 <flatcc_builder_append_offset_vector@@Base+0x13c>
   14964:	ldr	r1, [pc, #252]	; 14a68 <flatcc_builder_append_offset_vector@@Base+0x140>
   14968:	ldr	r3, [pc, #252]	; 14a6c <flatcc_builder_append_offset_vector@@Base+0x144>
   1496c:	mov	r2, #892	; 0x37c
   14970:	add	r0, pc, r0
   14974:	add	r1, pc, r1
   14978:	add	r3, pc, r3
   1497c:	bl	1249c <__assert_fail@plt>
   14980:	str	r1, [r0, #20]
   14984:	ldr	r4, [r6, #20]
   14988:	ldr	r0, [r6, #24]
   1498c:	add	r1, r4, r5, lsl #2
   14990:	cmp	r1, r0
   14994:	str	r1, [r6, #20]
   14998:	bcs	149bc <flatcc_builder_append_offset_vector@@Base+0x94>
   1499c:	ldr	r0, [r6, #16]
   149a0:	adds	r7, r0, r4
   149a4:	beq	14a28 <flatcc_builder_append_offset_vector@@Base+0x100>
   149a8:	lsl	r2, r5, #2
   149ac:	mov	r0, r7
   149b0:	mov	r1, r8
   149b4:	bl	123e8 <memcpy@plt>
   149b8:	b	14a2c <flatcc_builder_append_offset_vector@@Base+0x104>
   149bc:	ldr	r2, [r6, #28]
   149c0:	ldr	r0, [r6, #40]	; 0x28
   149c4:	ldr	r7, [r6, #48]	; 0x30
   149c8:	mov	r3, #1
   149cc:	str	r3, [sp]
   149d0:	mov	r3, #1
   149d4:	add	r1, r1, r2
   149d8:	add	r2, r1, #1
   149dc:	add	r1, r6, #60	; 0x3c
   149e0:	blx	r7
   149e4:	mov	r7, #0
   149e8:	cmp	r0, #0
   149ec:	bne	14a2c <flatcc_builder_append_offset_vector@@Base+0x104>
   149f0:	ldr	r1, [r6, #28]
   149f4:	ldr	r0, [r6, #60]	; 0x3c
   149f8:	ldr	r3, [r6, #64]	; 0x40
   149fc:	ldr	r2, [r6, #32]
   14a00:	add	r0, r0, r1
   14a04:	sub	r1, r3, r1
   14a08:	mvn	r3, #3
   14a0c:	cmn	r1, #4
   14a10:	str	r0, [r6, #16]
   14a14:	movcs	r1, r3
   14a18:	str	r1, [r6, #24]
   14a1c:	str	r3, [r2, #4]
   14a20:	adds	r7, r0, r4
   14a24:	bne	149a8 <flatcc_builder_append_offset_vector@@Base+0x80>
   14a28:	mov	r7, #0
   14a2c:	mov	r0, r7
   14a30:	sub	sp, fp, #24
   14a34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a38:	ldr	r0, [pc, #24]	; 14a58 <flatcc_builder_append_offset_vector@@Base+0x130>
   14a3c:	ldr	r1, [pc, #24]	; 14a5c <flatcc_builder_append_offset_vector@@Base+0x134>
   14a40:	ldr	r3, [pc, #24]	; 14a60 <flatcc_builder_append_offset_vector@@Base+0x138>
   14a44:	mov	r2, #948	; 0x3b4
   14a48:	add	r0, pc, r0
   14a4c:	add	r1, pc, r1
   14a50:	add	r3, pc, r3
   14a54:	bl	1249c <__assert_fail@plt>
   14a58:	andeq	r4, r0, r5, asr #9
   14a5c:	andeq	r4, r0, lr, lsl #1
   14a60:	andeq	r4, r0, r2, asr r5
   14a64:	andeq	r5, r0, r0, lsr r2
   14a68:	andeq	r4, r0, r6, ror #2
   14a6c:	andeq	r5, r0, r3, asr #4

00014a70 <flatcc_builder_extend_string@@Base>:
   14a70:	push	{r4, r5, fp, lr}
   14a74:	add	fp, sp, #8
   14a78:	sub	sp, sp, #8
   14a7c:	mov	r4, r0
   14a80:	ldr	r0, [r0, #32]
   14a84:	ldrh	r2, [r0, #14]
   14a88:	cmp	r2, #6
   14a8c:	bne	14b3c <flatcc_builder_extend_string@@Base+0xcc>
   14a90:	ldr	r2, [r0, #20]
   14a94:	adds	r2, r2, r1
   14a98:	bcs	14b5c <flatcc_builder_extend_string@@Base+0xec>
   14a9c:	str	r2, [r0, #20]
   14aa0:	ldr	r5, [r4, #20]
   14aa4:	ldr	r0, [r4, #24]
   14aa8:	add	r1, r5, r1
   14aac:	cmp	r1, r0
   14ab0:	str	r1, [r4, #20]
   14ab4:	bcs	14ac0 <flatcc_builder_extend_string@@Base+0x50>
   14ab8:	ldr	r0, [r4, #16]
   14abc:	b	14b30 <flatcc_builder_extend_string@@Base+0xc0>
   14ac0:	ldr	r2, [r4, #28]
   14ac4:	ldr	r0, [r4, #40]	; 0x28
   14ac8:	ldr	ip, [r4, #48]	; 0x30
   14acc:	mov	r3, #1
   14ad0:	str	r3, [sp]
   14ad4:	mov	r3, #1
   14ad8:	add	r1, r1, r2
   14adc:	add	r2, r1, #1
   14ae0:	add	r1, r4, #60	; 0x3c
   14ae4:	blx	ip
   14ae8:	mov	r1, r0
   14aec:	mov	r0, #0
   14af0:	cmp	r1, #0
   14af4:	beq	14b00 <flatcc_builder_extend_string@@Base+0x90>
   14af8:	sub	sp, fp, #8
   14afc:	pop	{r4, r5, fp, pc}
   14b00:	ldr	r1, [r4, #28]
   14b04:	ldr	r0, [r4, #60]	; 0x3c
   14b08:	ldr	r3, [r4, #64]	; 0x40
   14b0c:	ldr	r2, [r4, #32]
   14b10:	add	r0, r0, r1
   14b14:	sub	r1, r3, r1
   14b18:	mvn	r3, #3
   14b1c:	cmn	r1, #4
   14b20:	str	r0, [r4, #16]
   14b24:	movcs	r1, r3
   14b28:	str	r1, [r4, #24]
   14b2c:	str	r3, [r2, #4]
   14b30:	add	r0, r0, r5
   14b34:	sub	sp, fp, #8
   14b38:	pop	{r4, r5, fp, pc}
   14b3c:	ldr	r0, [pc, #56]	; 14b7c <flatcc_builder_extend_string@@Base+0x10c>
   14b40:	ldr	r1, [pc, #56]	; 14b80 <flatcc_builder_extend_string@@Base+0x110>
   14b44:	ldr	r3, [pc, #56]	; 14b84 <flatcc_builder_extend_string@@Base+0x114>
   14b48:	movw	r2, #957	; 0x3bd
   14b4c:	add	r0, pc, r0
   14b50:	add	r1, pc, r1
   14b54:	add	r3, pc, r3
   14b58:	bl	1249c <__assert_fail@plt>
   14b5c:	ldr	r0, [pc, #36]	; 14b88 <flatcc_builder_extend_string@@Base+0x118>
   14b60:	ldr	r1, [pc, #36]	; 14b8c <flatcc_builder_extend_string@@Base+0x11c>
   14b64:	ldr	r3, [pc, #36]	; 14b90 <flatcc_builder_extend_string@@Base+0x120>
   14b68:	mov	r2, #892	; 0x37c
   14b6c:	add	r0, pc, r0
   14b70:	add	r1, pc, r1
   14b74:	add	r3, pc, r3
   14b78:	bl	1249c <__assert_fail@plt>
   14b7c:	andeq	r4, r0, sl, asr #9
   14b80:	andeq	r3, r0, sl, lsl #31
   14b84:	andeq	r4, r0, lr, ror #9
   14b88:	andeq	r5, r0, r4, lsr r0
   14b8c:	andeq	r3, r0, sl, ror #30
   14b90:	andeq	r5, r0, r7, asr #32

00014b94 <flatcc_builder_append_string@@Base>:
   14b94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b98:	add	fp, sp, #24
   14b9c:	sub	sp, sp, #8
   14ba0:	mov	r6, r0
   14ba4:	ldr	r0, [r0, #32]
   14ba8:	mov	r8, r1
   14bac:	ldrh	r1, [r0, #14]
   14bb0:	cmp	r1, #6
   14bb4:	bne	14c80 <flatcc_builder_append_string@@Base+0xec>
   14bb8:	ldr	r1, [r0, #20]
   14bbc:	mov	r4, r2
   14bc0:	adds	r1, r1, r2
   14bc4:	bcs	14ca0 <flatcc_builder_append_string@@Base+0x10c>
   14bc8:	str	r1, [r0, #20]
   14bcc:	ldr	r5, [r6, #20]
   14bd0:	ldr	r0, [r6, #24]
   14bd4:	add	r1, r5, r4
   14bd8:	cmp	r1, r0
   14bdc:	str	r1, [r6, #20]
   14be0:	bcs	14c04 <flatcc_builder_append_string@@Base+0x70>
   14be4:	ldr	r0, [r6, #16]
   14be8:	adds	r7, r0, r5
   14bec:	beq	14c70 <flatcc_builder_append_string@@Base+0xdc>
   14bf0:	mov	r0, r7
   14bf4:	mov	r1, r8
   14bf8:	mov	r2, r4
   14bfc:	bl	123e8 <memcpy@plt>
   14c00:	b	14c74 <flatcc_builder_append_string@@Base+0xe0>
   14c04:	ldr	r2, [r6, #28]
   14c08:	ldr	r0, [r6, #40]	; 0x28
   14c0c:	ldr	r7, [r6, #48]	; 0x30
   14c10:	mov	r3, #1
   14c14:	str	r3, [sp]
   14c18:	mov	r3, #1
   14c1c:	add	r1, r1, r2
   14c20:	add	r2, r1, #1
   14c24:	add	r1, r6, #60	; 0x3c
   14c28:	blx	r7
   14c2c:	mov	r7, #0
   14c30:	cmp	r0, #0
   14c34:	bne	14c74 <flatcc_builder_append_string@@Base+0xe0>
   14c38:	ldr	r1, [r6, #28]
   14c3c:	ldr	r0, [r6, #60]	; 0x3c
   14c40:	ldr	r3, [r6, #64]	; 0x40
   14c44:	ldr	r2, [r6, #32]
   14c48:	add	r0, r0, r1
   14c4c:	sub	r1, r3, r1
   14c50:	mvn	r3, #3
   14c54:	cmn	r1, #4
   14c58:	str	r0, [r6, #16]
   14c5c:	movcs	r1, r3
   14c60:	str	r1, [r6, #24]
   14c64:	str	r3, [r2, #4]
   14c68:	adds	r7, r0, r5
   14c6c:	bne	14bf0 <flatcc_builder_append_string@@Base+0x5c>
   14c70:	mov	r7, #0
   14c74:	mov	r0, r7
   14c78:	sub	sp, fp, #24
   14c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c80:	ldr	r0, [pc, #56]	; 14cc0 <flatcc_builder_append_string@@Base+0x12c>
   14c84:	ldr	r1, [pc, #56]	; 14cc4 <flatcc_builder_append_string@@Base+0x130>
   14c88:	ldr	r3, [pc, #56]	; 14cc8 <flatcc_builder_append_string@@Base+0x134>
   14c8c:	movw	r2, #966	; 0x3c6
   14c90:	add	r0, pc, r0
   14c94:	add	r1, pc, r1
   14c98:	add	r3, pc, r3
   14c9c:	bl	1249c <__assert_fail@plt>
   14ca0:	ldr	r0, [pc, #36]	; 14ccc <flatcc_builder_append_string@@Base+0x138>
   14ca4:	ldr	r1, [pc, #36]	; 14cd0 <flatcc_builder_append_string@@Base+0x13c>
   14ca8:	ldr	r3, [pc, #36]	; 14cd4 <flatcc_builder_append_string@@Base+0x140>
   14cac:	mov	r2, #892	; 0x37c
   14cb0:	add	r0, pc, r0
   14cb4:	add	r1, pc, r1
   14cb8:	add	r3, pc, r3
   14cbc:	bl	1249c <__assert_fail@plt>
   14cc0:	andeq	r4, r0, r6, lsl #7
   14cc4:	andeq	r3, r0, r6, asr #28
   14cc8:	andeq	r4, r0, r9, ror #7
   14ccc:	strdeq	r4, [r0], -r0
   14cd0:	andeq	r3, r0, r6, lsr #28
   14cd4:	andeq	r4, r0, r3, lsl #30

00014cd8 <flatcc_builder_append_string_str@@Base>:
   14cd8:	push	{r4, r5, fp, lr}
   14cdc:	add	fp, sp, #8
   14ce0:	mov	r5, r0
   14ce4:	mov	r0, r1
   14ce8:	mov	r4, r1
   14cec:	bl	12454 <strlen@plt>
   14cf0:	mov	r2, r0
   14cf4:	mov	r0, r5
   14cf8:	mov	r1, r4
   14cfc:	pop	{r4, r5, fp, lr}
   14d00:	b	14b94 <flatcc_builder_append_string@@Base>

00014d04 <flatcc_builder_append_string_strn@@Base>:
   14d04:	push	{r4, r5, r6, sl, fp, lr}
   14d08:	add	fp, sp, #16
   14d0c:	mov	r6, r0
   14d10:	mov	r5, r1
   14d14:	mov	r0, r1
   14d18:	mov	r1, #0
   14d1c:	mov	r4, r2
   14d20:	bl	12478 <memchr@plt>
   14d24:	cmp	r0, #0
   14d28:	mov	r1, r5
   14d2c:	subne	r4, r0, r5
   14d30:	mov	r0, r6
   14d34:	mov	r2, r4
   14d38:	pop	{r4, r5, r6, sl, fp, lr}
   14d3c:	b	14b94 <flatcc_builder_append_string@@Base>

00014d40 <flatcc_builder_truncate_vector@@Base>:
   14d40:	push	{fp, lr}
   14d44:	mov	fp, sp
   14d48:	ldr	r2, [r0, #32]
   14d4c:	ldrh	r3, [r2, #14]
   14d50:	cmp	r3, #4
   14d54:	bne	14d9c <flatcc_builder_truncate_vector@@Base+0x5c>
   14d58:	ldr	r3, [r2, #20]
   14d5c:	cmp	r3, r1
   14d60:	bcc	14dbc <flatcc_builder_truncate_vector@@Base+0x7c>
   14d64:	sub	r3, r3, r1
   14d68:	str	r3, [r2, #20]
   14d6c:	ldr	r2, [r0, #32]
   14d70:	ldr	r3, [r0, #20]
   14d74:	ldr	ip, [r0, #16]
   14d78:	ldr	r2, [r2, #16]
   14d7c:	mls	r3, r2, r1, r3
   14d80:	mul	r2, r2, r1
   14d84:	mov	r1, #0
   14d88:	str	r3, [r0, #20]
   14d8c:	add	r0, ip, r3
   14d90:	bl	1246c <memset@plt>
   14d94:	mov	r0, #0
   14d98:	pop	{fp, pc}
   14d9c:	ldr	r0, [pc, #56]	; 14ddc <flatcc_builder_truncate_vector@@Base+0x9c>
   14da0:	ldr	r1, [pc, #56]	; 14de0 <flatcc_builder_truncate_vector@@Base+0xa0>
   14da4:	ldr	r3, [pc, #56]	; 14de4 <flatcc_builder_truncate_vector@@Base+0xa4>
   14da8:	movw	r2, #985	; 0x3d9
   14dac:	add	r0, pc, r0
   14db0:	add	r1, pc, r1
   14db4:	add	r3, pc, r3
   14db8:	bl	1249c <__assert_fail@plt>
   14dbc:	ldr	r0, [pc, #36]	; 14de8 <flatcc_builder_truncate_vector@@Base+0xa8>
   14dc0:	ldr	r1, [pc, #36]	; 14dec <flatcc_builder_truncate_vector@@Base+0xac>
   14dc4:	ldr	r3, [pc, #36]	; 14df0 <flatcc_builder_truncate_vector@@Base+0xb0>
   14dc8:	movw	r2, #986	; 0x3da
   14dcc:	add	r0, pc, r0
   14dd0:	add	r1, pc, r1
   14dd4:	add	r3, pc, r3
   14dd8:	bl	1249c <__assert_fail@plt>
   14ddc:	andeq	r4, r0, r8, rrx
   14de0:	andeq	r3, r0, sl, lsr #26
   14de4:	andeq	r4, r0, sl, lsl r3
   14de8:	andeq	r4, r0, r1, asr #6
   14dec:	andeq	r3, r0, sl, lsl #26
   14df0:	strdeq	r4, [r0], -sl

00014df4 <flatcc_builder_truncate_offset_vector@@Base>:
   14df4:	push	{fp, lr}
   14df8:	mov	fp, sp
   14dfc:	ldr	r2, [r0, #32]
   14e00:	ldrh	r3, [r2, #14]
   14e04:	cmp	r3, #5
   14e08:	bne	14e50 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14e0c:	ldr	r3, [r2, #20]
   14e10:	cmp	r3, r1
   14e14:	bcc	14e70 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14e18:	sub	r3, r3, r1
   14e1c:	str	r3, [r2, #20]
   14e20:	ldr	r2, [r0, #32]
   14e24:	ldr	r3, [r0, #20]
   14e28:	ldr	ip, [r0, #16]
   14e2c:	ldr	r2, [r2, #16]
   14e30:	mls	r3, r2, r1, r3
   14e34:	mul	r2, r2, r1
   14e38:	mov	r1, #0
   14e3c:	str	r3, [r0, #20]
   14e40:	add	r0, ip, r3
   14e44:	bl	1246c <memset@plt>
   14e48:	mov	r0, #0
   14e4c:	pop	{fp, pc}
   14e50:	ldr	r0, [pc, #56]	; 14e90 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14e54:	ldr	r1, [pc, #56]	; 14e94 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14e58:	ldr	r3, [pc, #56]	; 14e98 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   14e5c:	movw	r2, #994	; 0x3e2
   14e60:	add	r0, pc, r0
   14e64:	add	r1, pc, r1
   14e68:	add	r3, pc, r3
   14e6c:	bl	1249c <__assert_fail@plt>
   14e70:	ldr	r0, [pc, #36]	; 14e9c <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   14e74:	ldr	r1, [pc, #36]	; 14ea0 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   14e78:	ldr	r3, [pc, #36]	; 14ea4 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14e7c:	movw	r2, #995	; 0x3e3
   14e80:	add	r0, pc, r0
   14e84:	add	r1, pc, r1
   14e88:	add	r3, pc, r3
   14e8c:	bl	1249c <__assert_fail@plt>
   14e90:	andeq	r4, r0, sp, lsr #1
   14e94:	andeq	r3, r0, r6, ror ip
   14e98:	andeq	r4, r0, r9, asr #5
   14e9c:	strdeq	r4, [r0], -r7
   14ea0:	andeq	r3, r0, r6, asr ip
   14ea4:	andeq	r4, r0, r9, lsr #5

00014ea8 <flatcc_builder_truncate_string@@Base>:
   14ea8:	push	{fp, lr}
   14eac:	mov	fp, sp
   14eb0:	mov	r2, r1
   14eb4:	ldr	r1, [r0, #32]
   14eb8:	ldrh	r3, [r1, #14]
   14ebc:	cmp	r3, #6
   14ec0:	bne	14efc <flatcc_builder_truncate_string@@Base+0x54>
   14ec4:	ldr	r3, [r1, #20]
   14ec8:	cmp	r3, r2
   14ecc:	bcc	14f1c <flatcc_builder_truncate_string@@Base+0x74>
   14ed0:	sub	r3, r3, r2
   14ed4:	str	r3, [r1, #20]
   14ed8:	ldr	r3, [r0, #20]
   14edc:	ldr	r1, [r0, #16]
   14ee0:	sub	r3, r3, r2
   14ee4:	str	r3, [r0, #20]
   14ee8:	add	r0, r1, r3
   14eec:	mov	r1, #0
   14ef0:	bl	1246c <memset@plt>
   14ef4:	mov	r0, #0
   14ef8:	pop	{fp, pc}
   14efc:	ldr	r0, [pc, #56]	; 14f3c <flatcc_builder_truncate_string@@Base+0x94>
   14f00:	ldr	r1, [pc, #56]	; 14f40 <flatcc_builder_truncate_string@@Base+0x98>
   14f04:	ldr	r3, [pc, #56]	; 14f44 <flatcc_builder_truncate_string@@Base+0x9c>
   14f08:	movw	r2, #1003	; 0x3eb
   14f0c:	add	r0, pc, r0
   14f10:	add	r1, pc, r1
   14f14:	add	r3, pc, r3
   14f18:	bl	1249c <__assert_fail@plt>
   14f1c:	ldr	r0, [pc, #36]	; 14f48 <flatcc_builder_truncate_string@@Base+0xa0>
   14f20:	ldr	r1, [pc, #36]	; 14f4c <flatcc_builder_truncate_string@@Base+0xa4>
   14f24:	ldr	r3, [pc, #36]	; 14f50 <flatcc_builder_truncate_string@@Base+0xa8>
   14f28:	mov	r2, #1004	; 0x3ec
   14f2c:	add	r0, pc, r0
   14f30:	add	r1, pc, r1
   14f34:	add	r3, pc, r3
   14f38:	bl	1249c <__assert_fail@plt>
   14f3c:	andeq	r4, r0, sl, lsl #2
   14f40:	andeq	r3, r0, sl, asr #23
   14f44:	muleq	r0, lr, r2
   14f48:	andeq	r4, r0, r5, asr #5
   14f4c:	andeq	r3, r0, sl, lsr #23
   14f50:	andeq	r4, r0, lr, ror r2

00014f54 <flatcc_builder_start_vector@@Base>:
   14f54:	push	{r4, r5, r6, r7, fp, lr}
   14f58:	add	fp, sp, #16
   14f5c:	mov	r7, #4
   14f60:	cmp	r2, #4
   14f64:	mov	r6, r1
   14f68:	mov	r5, r3
   14f6c:	mov	r4, r0
   14f70:	movls	r2, r7
   14f74:	mov	r1, r2
   14f78:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   14f7c:	mov	r1, r0
   14f80:	mvn	r0, #0
   14f84:	cmp	r1, #0
   14f88:	popne	{r4, r5, r6, r7, fp, pc}
   14f8c:	ldr	r0, [r4, #32]
   14f90:	str	r6, [r0, #16]
   14f94:	mov	r0, #0
   14f98:	ldr	r1, [r4, #32]
   14f9c:	str	r0, [r1, #20]
   14fa0:	ldr	r1, [r4, #32]
   14fa4:	str	r5, [r1, #24]
   14fa8:	ldr	r1, [r4, #32]
   14fac:	strh	r7, [r1, #14]
   14fb0:	ldr	r2, [r4, #28]
   14fb4:	ldr	r3, [r4, #60]	; 0x3c
   14fb8:	ldr	r7, [r4, #64]	; 0x40
   14fbc:	add	r3, r3, r2
   14fc0:	sub	r2, r7, r2
   14fc4:	str	r3, [r4, #16]
   14fc8:	mvn	r3, #3
   14fcc:	cmn	r2, #4
   14fd0:	movcs	r2, r3
   14fd4:	str	r2, [r4, #24]
   14fd8:	str	r3, [r1, #4]
   14fdc:	pop	{r4, r5, r6, r7, fp, pc}

00014fe0 <flatcc_builder_start_offset_vector@@Base>:
   14fe0:	push	{r4, r5, fp, lr}
   14fe4:	add	fp, sp, #8
   14fe8:	mov	r1, #4
   14fec:	mov	r4, r0
   14ff0:	mov	r5, #4
   14ff4:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   14ff8:	mov	r1, r0
   14ffc:	mvn	r0, #0
   15000:	cmp	r1, #0
   15004:	popne	{r4, r5, fp, pc}
   15008:	ldr	r0, [r4, #32]
   1500c:	mov	r2, #5
   15010:	str	r5, [r0, #16]
   15014:	mov	r0, #0
   15018:	ldr	r1, [r4, #32]
   1501c:	str	r0, [r1, #20]
   15020:	ldr	r1, [r4, #32]
   15024:	strh	r2, [r1, #14]
   15028:	ldr	r2, [r4, #28]
   1502c:	ldr	r3, [r4, #60]	; 0x3c
   15030:	ldr	r5, [r4, #64]	; 0x40
   15034:	add	r3, r3, r2
   15038:	sub	r2, r5, r2
   1503c:	str	r3, [r4, #16]
   15040:	mvn	r3, #3
   15044:	cmn	r2, #4
   15048:	movcs	r2, r3
   1504c:	str	r2, [r4, #24]
   15050:	str	r3, [r1, #4]
   15054:	pop	{r4, r5, fp, pc}

00015058 <flatcc_builder_create_offset_vector@@Base>:
   15058:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1505c:	add	fp, sp, #24
   15060:	sub	sp, sp, #8
   15064:	mov	r8, r1
   15068:	mov	r1, #4
   1506c:	mov	r6, r2
   15070:	mov	r4, r0
   15074:	mov	r7, #4
   15078:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   1507c:	cmp	r0, #0
   15080:	beq	15090 <flatcc_builder_create_offset_vector@@Base+0x38>
   15084:	mov	r0, #0
   15088:	sub	sp, fp, #24
   1508c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15090:	ldr	r0, [r4, #32]
   15094:	mov	r1, #0
   15098:	str	r7, [r0, #16]
   1509c:	ldr	r0, [r4, #32]
   150a0:	str	r1, [r0, #20]
   150a4:	mov	r1, #5
   150a8:	ldr	r0, [r4, #32]
   150ac:	strh	r1, [r0, #14]
   150b0:	ldr	r1, [r4, #28]
   150b4:	ldr	r2, [r4, #60]	; 0x3c
   150b8:	ldr	r3, [r4, #64]	; 0x40
   150bc:	add	r2, r2, r1
   150c0:	sub	r1, r3, r1
   150c4:	str	r2, [r4, #16]
   150c8:	mvn	r2, #3
   150cc:	cmn	r1, #4
   150d0:	movcs	r1, r2
   150d4:	str	r1, [r4, #24]
   150d8:	str	r2, [r0, #4]
   150dc:	ldr	r1, [r0, #20]
   150e0:	adds	r1, r1, r6
   150e4:	cmpcc	r1, #1073741824	; 0x40000000
   150e8:	bcc	1510c <flatcc_builder_create_offset_vector@@Base+0xb4>
   150ec:	ldr	r0, [pc, #200]	; 151bc <flatcc_builder_create_offset_vector@@Base+0x164>
   150f0:	ldr	r1, [pc, #200]	; 151c0 <flatcc_builder_create_offset_vector@@Base+0x168>
   150f4:	ldr	r3, [pc, #200]	; 151c4 <flatcc_builder_create_offset_vector@@Base+0x16c>
   150f8:	mov	r2, #892	; 0x37c
   150fc:	add	r0, pc, r0
   15100:	add	r1, pc, r1
   15104:	add	r3, pc, r3
   15108:	bl	1249c <__assert_fail@plt>
   1510c:	str	r1, [r0, #20]
   15110:	ldr	r7, [r4, #20]
   15114:	ldr	r0, [r4, #24]
   15118:	add	r1, r7, r6, lsl #2
   1511c:	cmp	r1, r0
   15120:	str	r1, [r4, #20]
   15124:	bcs	15138 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15128:	ldr	r0, [r4, #16]
   1512c:	adds	r0, r0, r7
   15130:	bne	151a0 <flatcc_builder_create_offset_vector@@Base+0x148>
   15134:	b	15084 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15138:	ldr	r2, [r4, #28]
   1513c:	ldr	r0, [r4, #40]	; 0x28
   15140:	ldr	r5, [r4, #48]	; 0x30
   15144:	mov	r3, #1
   15148:	str	r3, [sp]
   1514c:	mov	r3, #1
   15150:	add	r1, r1, r2
   15154:	add	r2, r1, #1
   15158:	add	r1, r4, #60	; 0x3c
   1515c:	blx	r5
   15160:	cmp	r0, #0
   15164:	bne	15084 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15168:	ldr	r1, [r4, #28]
   1516c:	ldr	r0, [r4, #60]	; 0x3c
   15170:	ldr	r3, [r4, #64]	; 0x40
   15174:	ldr	r2, [r4, #32]
   15178:	add	r0, r0, r1
   1517c:	sub	r1, r3, r1
   15180:	mvn	r3, #3
   15184:	cmn	r1, #4
   15188:	str	r0, [r4, #16]
   1518c:	movcs	r1, r3
   15190:	str	r1, [r4, #24]
   15194:	str	r3, [r2, #4]
   15198:	adds	r0, r0, r7
   1519c:	beq	15084 <flatcc_builder_create_offset_vector@@Base+0x2c>
   151a0:	lsl	r2, r6, #2
   151a4:	mov	r1, r8
   151a8:	bl	123e8 <memcpy@plt>
   151ac:	mov	r0, r4
   151b0:	sub	sp, fp, #24
   151b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   151b8:	b	151c8 <flatcc_builder_end_offset_vector@@Base>
   151bc:	andeq	r4, r0, r4, lsr #21
   151c0:	ldrdeq	r3, [r0], -sl
   151c4:			; <UNDEFINED> instruction: 0x00004ab7

000151c8 <flatcc_builder_end_offset_vector@@Base>:
   151c8:	push	{r4, r5, fp, lr}
   151cc:	add	fp, sp, #8
   151d0:	mov	r4, r0
   151d4:	ldr	r0, [r0, #32]
   151d8:	ldrh	r1, [r0, #14]
   151dc:	cmp	r1, #5
   151e0:	bne	15280 <flatcc_builder_end_offset_vector@@Base+0xb8>
   151e4:	ldr	r2, [r0, #20]
   151e8:	ldr	r1, [r4, #16]
   151ec:	mov	r0, r4
   151f0:	mov	r3, #0
   151f4:	bl	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   151f8:	mov	r5, r0
   151fc:	cmp	r0, #0
   15200:	beq	15278 <flatcc_builder_end_offset_vector@@Base+0xb0>
   15204:	ldr	r0, [r4, #16]
   15208:	ldr	r2, [r4, #20]
   1520c:	mov	r1, #0
   15210:	bl	1246c <memset@plt>
   15214:	ldr	r0, [r4, #32]
   15218:	ldr	r1, [r4, #60]	; 0x3c
   1521c:	ldr	ip, [r4, #64]	; 0x40
   15220:	ldr	r3, [r0, #8]
   15224:	str	r3, [r4, #20]
   15228:	ldr	r3, [r0]
   1522c:	str	r3, [r4, #28]
   15230:	add	r1, r1, r3
   15234:	ldr	r2, [r0, #4]
   15238:	str	r1, [r4, #16]
   1523c:	sub	r1, ip, r3
   15240:	cmp	r1, r2
   15244:	movhi	r1, r2
   15248:	str	r1, [r4, #24]
   1524c:	ldrh	r1, [r4, #130]	; 0x82
   15250:	ldrh	r2, [r4, #128]	; 0x80
   15254:	cmp	r2, r1
   15258:	strhcc	r1, [r4, #128]	; 0x80
   1525c:	ldrh	r1, [r0, #12]
   15260:	sub	r0, r0, #36	; 0x24
   15264:	str	r0, [r4, #32]
   15268:	strh	r1, [r4, #130]	; 0x82
   1526c:	ldr	r0, [r4, #156]	; 0x9c
   15270:	sub	r0, r0, #1
   15274:	str	r0, [r4, #156]	; 0x9c
   15278:	mov	r0, r5
   1527c:	pop	{r4, r5, fp, pc}
   15280:	ldr	r0, [pc, #24]	; 152a0 <flatcc_builder_end_offset_vector@@Base+0xd8>
   15284:	ldr	r1, [pc, #24]	; 152a4 <flatcc_builder_end_offset_vector@@Base+0xdc>
   15288:	ldr	r3, [pc, #24]	; 152a8 <flatcc_builder_end_offset_vector@@Base+0xe0>
   1528c:	movw	r2, #1480	; 0x5c8
   15290:	add	r0, pc, r0
   15294:	add	r1, pc, r1
   15298:	add	r3, pc, r3
   1529c:	bl	1249c <__assert_fail@plt>
   152a0:	andeq	r3, r0, sp, ror ip
   152a4:	andeq	r3, r0, r6, asr #16
   152a8:	andeq	r4, r0, r4, lsr #5

000152ac <flatcc_builder_start_string@@Base>:
   152ac:	push	{r4, r5, fp, lr}
   152b0:	add	fp, sp, #8
   152b4:	mov	r1, #1
   152b8:	mov	r4, r0
   152bc:	mov	r5, #1
   152c0:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   152c4:	mov	r1, r0
   152c8:	mvn	r0, #0
   152cc:	cmp	r1, #0
   152d0:	popne	{r4, r5, fp, pc}
   152d4:	ldr	r0, [r4, #32]
   152d8:	mov	r2, #6
   152dc:	str	r5, [r0, #16]
   152e0:	mov	r0, #0
   152e4:	ldr	r1, [r4, #32]
   152e8:	str	r0, [r1, #20]
   152ec:	ldr	r1, [r4, #32]
   152f0:	strh	r2, [r1, #14]
   152f4:	ldr	r2, [r4, #28]
   152f8:	ldr	r3, [r4, #60]	; 0x3c
   152fc:	ldr	r5, [r4, #64]	; 0x40
   15300:	add	r3, r3, r2
   15304:	sub	r2, r5, r2
   15308:	str	r3, [r4, #16]
   1530c:	mvn	r3, #3
   15310:	cmn	r2, #4
   15314:	movcs	r2, r3
   15318:	str	r2, [r4, #24]
   1531c:	str	r3, [r1, #4]
   15320:	pop	{r4, r5, fp, pc}

00015324 <flatcc_builder_reserve_table@@Base>:
   15324:	push	{r4, r5, r6, sl, fp, lr}
   15328:	add	fp, sp, #16
   1532c:	sub	sp, sp, #8
   15330:	cmn	r1, #1
   15334:	ble	15408 <flatcc_builder_reserve_table@@Base+0xe4>
   15338:	mov	r4, r0
   1533c:	ldr	r0, [r0, #32]
   15340:	mov	r5, r1
   15344:	ldr	r1, [r4, #56]	; 0x38
   15348:	ldrh	r2, [r0, #28]
   1534c:	ldr	r0, [r0, #16]
   15350:	add	r6, r0, r2, lsl #1
   15354:	add	r0, r6, r5, lsl #1
   15358:	add	r2, r0, #4
   1535c:	cmp	r2, r1
   15360:	bls	15388 <flatcc_builder_reserve_table@@Base+0x64>
   15364:	ldr	r0, [r4, #40]	; 0x28
   15368:	ldr	ip, [r4, #48]	; 0x30
   1536c:	mov	r3, #0
   15370:	add	r1, r4, #52	; 0x34
   15374:	str	r3, [sp]
   15378:	mov	r3, #1
   1537c:	blx	ip
   15380:	cmp	r0, #0
   15384:	bne	15428 <flatcc_builder_reserve_table@@Base+0x104>
   15388:	ldr	r0, [r4, #52]	; 0x34
   1538c:	adds	r0, r0, r6
   15390:	str	r0, [r4, #4]
   15394:	mvneq	r0, #0
   15398:	subeq	sp, fp, #16
   1539c:	popeq	{r4, r5, r6, sl, fp, pc}
   153a0:	add	r0, r0, #4
   153a4:	lsl	r1, r5, #1
   153a8:	str	r0, [r4, #4]
   153ac:	ldr	r0, [r4, #32]
   153b0:	ldr	r3, [r4, #80]	; 0x50
   153b4:	ldr	r5, [r0, #20]
   153b8:	orr	r0, r1, #1
   153bc:	add	r2, r5, r0
   153c0:	cmp	r2, r3
   153c4:	bls	153ec <flatcc_builder_reserve_table@@Base+0xc8>
   153c8:	ldr	r0, [r4, #40]	; 0x28
   153cc:	ldr	r6, [r4, #48]	; 0x30
   153d0:	mov	r3, #3
   153d4:	add	r1, r4, #76	; 0x4c
   153d8:	str	r3, [sp]
   153dc:	mov	r3, #0
   153e0:	blx	r6
   153e4:	cmp	r0, #0
   153e8:	bne	15428 <flatcc_builder_reserve_table@@Base+0x104>
   153ec:	ldr	r0, [r4, #76]	; 0x4c
   153f0:	adds	r0, r0, r5
   153f4:	str	r0, [r4]
   153f8:	mov	r0, #0
   153fc:	mvneq	r0, #0
   15400:	sub	sp, fp, #16
   15404:	pop	{r4, r5, r6, sl, fp, pc}
   15408:	ldr	r0, [pc, #56]	; 15448 <flatcc_builder_reserve_table@@Base+0x124>
   1540c:	ldr	r1, [pc, #56]	; 1544c <flatcc_builder_reserve_table@@Base+0x128>
   15410:	ldr	r3, [pc, #56]	; 15450 <flatcc_builder_reserve_table@@Base+0x12c>
   15414:	movw	r2, #1065	; 0x429
   15418:	add	r0, pc, r0
   1541c:	add	r1, pc, r1
   15420:	add	r3, pc, r3
   15424:	bl	1249c <__assert_fail@plt>
   15428:	ldr	r0, [pc, #36]	; 15454 <flatcc_builder_reserve_table@@Base+0x130>
   1542c:	ldr	r1, [pc, #36]	; 15458 <flatcc_builder_reserve_table@@Base+0x134>
   15430:	ldr	r3, [pc, #36]	; 1545c <flatcc_builder_reserve_table@@Base+0x138>
   15434:	mov	r2, #308	; 0x134
   15438:	add	r0, pc, r0
   1543c:	add	r1, pc, r1
   15440:	add	r3, pc, r3
   15444:	bl	1249c <__assert_fail@plt>
   15448:	andeq	r3, r0, ip, lsr lr
   1544c:			; <UNDEFINED> instruction: 0x000036be
   15450:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   15454:	andeq	r4, r0, pc, asr r8
   15458:	muleq	r0, lr, r6
   1545c:	muleq	r0, r1, r6

00015460 <flatcc_builder_start_table@@Base>:
   15460:	push	{r4, r5, r6, r7, fp, lr}
   15464:	add	fp, sp, #16
   15468:	sub	sp, sp, #8
   1546c:	mov	r6, r1
   15470:	mov	r1, #4
   15474:	mov	r4, r0
   15478:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   1547c:	mvn	r5, #0
   15480:	cmp	r0, #0
   15484:	beq	15494 <flatcc_builder_start_table@@Base+0x34>
   15488:	mov	r0, r5
   1548c:	sub	sp, fp, #16
   15490:	pop	{r4, r5, r6, r7, fp, pc}
   15494:	mov	r1, r4
   15498:	ldr	r2, [r4, #4]
   1549c:	ldr	r3, [r4, #32]
   154a0:	ldr	r0, [r1, #52]!	; 0x34
   154a4:	sub	r0, r2, r0
   154a8:	str	r0, [r3, #16]
   154ac:	ldr	r0, [r4]
   154b0:	ldr	r3, [r4, #76]	; 0x4c
   154b4:	ldr	r2, [r4, #32]
   154b8:	sub	r0, r0, r3
   154bc:	mov	r3, #0
   154c0:	str	r0, [r2, #20]
   154c4:	ldr	r0, [r4, #12]
   154c8:	ldr	r2, [r4, #32]
   154cc:	str	r0, [r2, #24]
   154d0:	ldr	r0, [r4, #32]
   154d4:	ldrh	r2, [r4, #8]
   154d8:	strh	r2, [r0, #28]
   154dc:	movw	r0, #15186	; 0x3b52
   154e0:	strh	r3, [r4, #8]
   154e4:	mov	r2, #3
   154e8:	movt	r0, #12137	; 0x2f69
   154ec:	str	r0, [r4, #12]
   154f0:	ldr	r0, [r4, #32]
   154f4:	strh	r2, [r0, #14]
   154f8:	ldrh	r2, [r0, #28]
   154fc:	ldr	r0, [r0, #16]
   15500:	add	r7, r0, r2, lsl #1
   15504:	add	r0, r7, r6, lsl #1
   15508:	add	r2, r0, #4
   1550c:	ldr	r0, [r4, #56]	; 0x38
   15510:	cmp	r2, r0
   15514:	bls	15534 <flatcc_builder_start_table@@Base+0xd4>
   15518:	ldr	r0, [r4, #40]	; 0x28
   1551c:	ldr	ip, [r4, #48]	; 0x30
   15520:	str	r3, [sp]
   15524:	mov	r3, #1
   15528:	blx	ip
   1552c:	cmp	r0, #0
   15530:	bne	155d8 <flatcc_builder_start_table@@Base+0x178>
   15534:	ldr	r0, [r4, #52]	; 0x34
   15538:	adds	r0, r0, r7
   1553c:	str	r0, [r4, #4]
   15540:	beq	15488 <flatcc_builder_start_table@@Base+0x28>
   15544:	add	r0, r0, #4
   15548:	lsl	r1, r6, #1
   1554c:	str	r0, [r4, #4]
   15550:	ldr	r0, [r4, #32]
   15554:	ldr	r3, [r4, #80]	; 0x50
   15558:	ldr	r6, [r0, #20]
   1555c:	orr	r0, r1, #1
   15560:	add	r2, r6, r0
   15564:	cmp	r2, r3
   15568:	bls	15590 <flatcc_builder_start_table@@Base+0x130>
   1556c:	ldr	r0, [r4, #40]	; 0x28
   15570:	ldr	r7, [r4, #48]	; 0x30
   15574:	mov	r3, #3
   15578:	add	r1, r4, #76	; 0x4c
   1557c:	str	r3, [sp]
   15580:	mov	r3, #0
   15584:	blx	r7
   15588:	cmp	r0, #0
   1558c:	bne	155d8 <flatcc_builder_start_table@@Base+0x178>
   15590:	ldr	r0, [r4, #76]	; 0x4c
   15594:	adds	r0, r0, r6
   15598:	str	r0, [r4]
   1559c:	beq	15488 <flatcc_builder_start_table@@Base+0x28>
   155a0:	ldr	r0, [r4, #28]
   155a4:	ldr	r2, [r4, #60]	; 0x3c
   155a8:	ldr	r3, [r4, #64]	; 0x40
   155ac:	ldr	r1, [r4, #32]
   155b0:	mov	r5, #0
   155b4:	add	r2, r2, r0
   155b8:	sub	r0, r3, r0
   155bc:	str	r2, [r4, #16]
   155c0:	movw	r2, #65532	; 0xfffc
   155c4:	cmp	r0, r2
   155c8:	movcs	r0, r2
   155cc:	str	r0, [r4, #24]
   155d0:	str	r2, [r1, #4]
   155d4:	b	15488 <flatcc_builder_start_table@@Base+0x28>
   155d8:	ldr	r0, [pc, #24]	; 155f8 <flatcc_builder_start_table@@Base+0x198>
   155dc:	ldr	r1, [pc, #24]	; 155fc <flatcc_builder_start_table@@Base+0x19c>
   155e0:	ldr	r3, [pc, #24]	; 15600 <flatcc_builder_start_table@@Base+0x1a0>
   155e4:	mov	r2, #308	; 0x134
   155e8:	add	r0, pc, r0
   155ec:	add	r1, pc, r1
   155f0:	add	r3, pc, r3
   155f4:	bl	1249c <__assert_fail@plt>
   155f8:	andeq	r4, r0, pc, lsr #13
   155fc:	andeq	r3, r0, lr, ror #9
   15600:	andeq	r4, r0, r1, ror #9

00015604 <flatcc_builder_create_vtable@@Base>:
   15604:	push	{r4, r5, fp, lr}
   15608:	add	fp, sp, #8
   1560c:	sub	sp, sp, #80	; 0x50
   15610:	mov	r3, r2
   15614:	mov	r2, #0
   15618:	mov	r4, r0
   1561c:	cmp	r3, #0
   15620:	str	r2, [sp, #12]
   15624:	str	r2, [sp, #8]
   15628:	movne	r2, #1
   1562c:	strne	r1, [sp, #16]
   15630:	strne	r3, [sp, #8]
   15634:	strne	r3, [sp, #20]
   15638:	strne	r2, [sp, #12]
   1563c:	ldr	r0, [r4, #152]	; 0x98
   15640:	cmp	r0, #0
   15644:	bne	15654 <flatcc_builder_create_vtable@@Base+0x50>
   15648:	ldr	r0, [r4, #180]	; 0xb4
   1564c:	cmp	r0, #0
   15650:	beq	156a0 <flatcc_builder_create_vtable@@Base+0x9c>
   15654:	cmp	r3, #0
   15658:	beq	156e4 <flatcc_builder_create_vtable@@Base+0xe0>
   1565c:	ldr	r0, [r4, #136]	; 0x88
   15660:	ldr	ip, [r4, #44]	; 0x2c
   15664:	add	r1, sp, #8
   15668:	add	r1, r1, #8
   1566c:	sub	r5, r0, r3
   15670:	ldr	r0, [r4, #36]	; 0x24
   15674:	str	r3, [sp]
   15678:	mov	r3, r5
   1567c:	blx	ip
   15680:	cmp	r0, #0
   15684:	bne	15704 <flatcc_builder_create_vtable@@Base+0x100>
   15688:	cmp	r5, #0
   1568c:	str	r5, [r4, #136]	; 0x88
   15690:	beq	156d8 <flatcc_builder_create_vtable@@Base+0xd4>
   15694:	add	r0, r5, #1
   15698:	sub	sp, fp, #8
   1569c:	pop	{r4, r5, fp, pc}
   156a0:	ldr	r5, [r4, #140]	; 0x8c
   156a4:	ldr	r0, [r4, #36]	; 0x24
   156a8:	ldr	ip, [r4, #44]	; 0x2c
   156ac:	add	r1, r5, r3
   156b0:	str	r1, [r4, #140]	; 0x8c
   156b4:	add	r1, sp, #8
   156b8:	str	r3, [sp]
   156bc:	mov	r3, r5
   156c0:	add	r1, r1, #8
   156c4:	blx	ip
   156c8:	cmp	r0, #0
   156cc:	bne	15724 <flatcc_builder_create_vtable@@Base+0x120>
   156d0:	adds	r0, r5, #1
   156d4:	bne	15698 <flatcc_builder_create_vtable@@Base+0x94>
   156d8:	mov	r0, #0
   156dc:	sub	sp, fp, #8
   156e0:	pop	{r4, r5, fp, pc}
   156e4:	ldr	r0, [pc, #100]	; 15750 <flatcc_builder_create_vtable@@Base+0x14c>
   156e8:	ldr	r1, [pc, #100]	; 15754 <flatcc_builder_create_vtable@@Base+0x150>
   156ec:	ldr	r3, [pc, #100]	; 15758 <flatcc_builder_create_vtable@@Base+0x154>
   156f0:	movw	r2, #647	; 0x287
   156f4:	add	r0, pc, r0
   156f8:	add	r1, pc, r1
   156fc:	add	r3, pc, r3
   15700:	bl	1249c <__assert_fail@plt>
   15704:	ldr	r0, [pc, #80]	; 1575c <flatcc_builder_create_vtable@@Base+0x158>
   15708:	ldr	r1, [pc, #80]	; 15760 <flatcc_builder_create_vtable@@Base+0x15c>
   1570c:	ldr	r3, [pc, #80]	; 15764 <flatcc_builder_create_vtable@@Base+0x160>
   15710:	movw	r2, #651	; 0x28b
   15714:	add	r0, pc, r0
   15718:	add	r1, pc, r1
   1571c:	add	r3, pc, r3
   15720:	bl	1249c <__assert_fail@plt>
   15724:	ldr	r0, [pc, #24]	; 15744 <flatcc_builder_create_vtable@@Base+0x140>
   15728:	ldr	r1, [pc, #24]	; 15748 <flatcc_builder_create_vtable@@Base+0x144>
   1572c:	ldr	r3, [pc, #24]	; 1574c <flatcc_builder_create_vtable@@Base+0x148>
   15730:	movw	r2, #677	; 0x2a5
   15734:	add	r0, pc, r0
   15738:	add	r1, pc, r1
   1573c:	add	r3, pc, r3
   15740:	bl	1249c <__assert_fail@plt>
   15744:	andeq	r4, r0, r3, ror #10
   15748:	andeq	r3, r0, r2, lsr #7
   1574c:	ldrdeq	r4, [r0], -r6
   15750:	andeq	r4, r0, r3, lsr #11
   15754:	andeq	r3, r0, r2, ror #7
   15758:	andeq	r4, r0, sl, asr r4
   1575c:	andeq	r4, r0, r3, lsl #11
   15760:	andeq	r3, r0, r2, asr #7
   15764:	andeq	r4, r0, sl, lsr r4

00015768 <flatcc_builder_create_cached_vtable@@Base>:
   15768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1576c:	add	fp, sp, #28
   15770:	sub	sp, sp, #20
   15774:	mov	sl, r0
   15778:	ldr	r0, [r0, #116]	; 0x74
   1577c:	mov	r8, r3
   15780:	mov	r5, r2
   15784:	str	r1, [sp, #16]
   15788:	cmp	r0, #0
   1578c:	beq	15830 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15790:	ldr	r1, [sl, #92]	; 0x5c
   15794:	rsb	r0, r0, #32
   15798:	lsr	r0, r8, r0
   1579c:	add	r6, r1, r0, lsl #2
   157a0:	cmp	r6, #0
   157a4:	beq	158f4 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   157a8:	ldr	r7, [r6]
   157ac:	str	r6, [sp, #12]
   157b0:	cmp	r7, #0
   157b4:	beq	158fc <flatcc_builder_create_cached_vtable@@Base+0x194>
   157b8:	ldr	r4, [sl, #68]	; 0x44
   157bc:	ldr	r8, [sl, #100]	; 0x64
   157c0:	mov	r0, #0
   157c4:	str	r0, [sp, #8]
   157c8:	add	r9, r8, r7
   157cc:	mov	r1, r4
   157d0:	ldr	r0, [r9, #8]
   157d4:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   157d8:	cmp	r0, r5
   157dc:	bne	157f4 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   157e0:	ldr	r0, [sp, #16]
   157e4:	mov	r2, r5
   157e8:	bl	12400 <memcmp@plt>
   157ec:	cmp	r0, #0
   157f0:	beq	15808 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   157f4:	ldr	r7, [r9, #12]!
   157f8:	cmp	r7, #0
   157fc:	mov	r6, r9
   15800:	bne	157c8 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15804:	b	158ec <flatcc_builder_create_cached_vtable@@Base+0x184>
   15808:	ldr	r0, [sl, #152]	; 0x98
   1580c:	ldr	r1, [r9, #4]
   15810:	cmp	r1, r0
   15814:	beq	15a60 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15818:	mov	r6, r9
   1581c:	mov	r0, r9
   15820:	ldr	r7, [r6, #12]!
   15824:	cmp	r7, #0
   15828:	bne	157c4 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   1582c:	b	15900 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15830:	ldr	r0, [sl, #124]	; 0x7c
   15834:	cmp	r0, #0
   15838:	bne	15aac <flatcc_builder_create_cached_vtable@@Base+0x344>
   1583c:	ldr	r0, [sl, #104]	; 0x68
   15840:	add	r7, sl, #100	; 0x64
   15844:	cmp	r0, #15
   15848:	bhi	15874 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   1584c:	ldr	r0, [sl, #40]	; 0x28
   15850:	ldr	r6, [sl, #48]	; 0x30
   15854:	mov	r1, #6
   15858:	mov	r2, #16
   1585c:	mov	r3, #0
   15860:	str	r1, [sp]
   15864:	mov	r1, r7
   15868:	blx	r6
   1586c:	cmp	r0, #0
   15870:	bne	15a8c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15874:	ldr	r0, [r7]
   15878:	mov	r7, #0
   1587c:	cmp	r0, #0
   15880:	beq	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15884:	mov	r0, #16
   15888:	mov	r2, #5
   1588c:	add	r1, sl, #92	; 0x5c
   15890:	mov	r3, #1
   15894:	mov	r4, #256	; 0x100
   15898:	str	r0, [sl, #124]	; 0x7c
   1589c:	ldr	r0, [sl, #40]	; 0x28
   158a0:	ldr	r6, [sl, #48]	; 0x30
   158a4:	str	r2, [sp]
   158a8:	mov	r2, #256	; 0x100
   158ac:	blx	r6
   158b0:	cmp	r0, #0
   158b4:	bne	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   158b8:	ldr	r0, [sl, #96]	; 0x60
   158bc:	mov	r1, r4
   158c0:	lsl	r4, r4, #1
   158c4:	cmp	r0, r1, lsl #1
   158c8:	bcs	158bc <flatcc_builder_create_cached_vtable@@Base+0x154>
   158cc:	lsr	r1, r1, #2
   158d0:	mvn	r0, #0
   158d4:	mov	r2, #1
   158d8:	add	r0, r0, #1
   158dc:	cmp	r1, r2, lsl r0
   158e0:	bhi	158d8 <flatcc_builder_create_cached_vtable@@Base+0x170>
   158e4:	str	r0, [sl, #116]	; 0x74
   158e8:	b	15790 <flatcc_builder_create_cached_vtable@@Base+0x28>
   158ec:	ldr	r9, [sp, #8]
   158f0:	b	15900 <flatcc_builder_create_cached_vtable@@Base+0x198>
   158f4:	mov	r7, #0
   158f8:	b	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   158fc:	mov	r9, #0
   15900:	ldr	r4, [sl, #124]	; 0x7c
   15904:	ldr	r0, [sl, #104]	; 0x68
   15908:	add	r7, sl, #100	; 0x64
   1590c:	add	r2, r4, #16
   15910:	cmp	r2, r0
   15914:	bls	1593c <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15918:	ldr	r0, [sl, #40]	; 0x28
   1591c:	ldr	r6, [sl, #48]	; 0x30
   15920:	mov	r1, #6
   15924:	mov	r3, #0
   15928:	str	r1, [sp]
   1592c:	mov	r1, r7
   15930:	blx	r6
   15934:	cmp	r0, #0
   15938:	bne	15a8c <flatcc_builder_create_cached_vtable@@Base+0x324>
   1593c:	ldr	r0, [r7]
   15940:	mov	r7, #0
   15944:	adds	r4, r0, r4
   15948:	beq	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1594c:	ldr	r0, [sl, #124]	; 0x7c
   15950:	ldr	r1, [sl, #152]	; 0x98
   15954:	add	r2, r0, #16
   15958:	str	r2, [sl, #124]	; 0x7c
   1595c:	ldr	r2, [sp, #12]
   15960:	str	r1, [r4, #4]
   15964:	ldr	r1, [r2]
   15968:	str	r1, [r4, #12]
   1596c:	ldr	r1, [sp, #16]
   15970:	str	r0, [r2]
   15974:	mov	r0, sl
   15978:	mov	r2, r5
   1597c:	bl	15604 <flatcc_builder_create_vtable@@Base>
   15980:	cmp	r0, #0
   15984:	str	r0, [r4]
   15988:	beq	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1598c:	cmp	r9, #0
   15990:	beq	159ac <flatcc_builder_create_cached_vtable@@Base+0x244>
   15994:	ldr	r0, [r9, #8]
   15998:	str	r0, [r4, #8]
   1599c:	ldr	r7, [r4]
   159a0:	mov	r0, r7
   159a4:	sub	sp, fp, #28
   159a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ac:	ldr	r6, [sl, #120]	; 0x78
   159b0:	ldr	r0, [sl, #172]	; 0xac
   159b4:	add	r2, r6, r5
   159b8:	cmp	r0, #0
   159bc:	beq	159f8 <flatcc_builder_create_cached_vtable@@Base+0x290>
   159c0:	cmp	r0, r2
   159c4:	bcs	159f8 <flatcc_builder_create_cached_vtable@@Base+0x290>
   159c8:	ldr	r0, [sl, #116]	; 0x74
   159cc:	cmp	r0, #0
   159d0:	beq	1599c <flatcc_builder_create_cached_vtable@@Base+0x234>
   159d4:	ldr	r0, [sl, #92]	; 0x5c
   159d8:	ldr	r2, [sl, #96]	; 0x60
   159dc:	mov	r1, #0
   159e0:	mov	r5, #0
   159e4:	bl	1246c <memset@plt>
   159e8:	mov	r0, #16
   159ec:	str	r5, [sl, #120]	; 0x78
   159f0:	str	r0, [sl, #124]	; 0x7c
   159f4:	b	1599c <flatcc_builder_create_cached_vtable@@Base+0x234>
   159f8:	ldr	r0, [sl, #72]	; 0x48
   159fc:	add	r7, sl, #68	; 0x44
   15a00:	cmp	r2, r0
   15a04:	bls	15a2c <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15a08:	ldr	r0, [sl, #40]	; 0x28
   15a0c:	ldr	ip, [sl, #48]	; 0x30
   15a10:	mov	r1, #2
   15a14:	mov	r3, #0
   15a18:	str	r1, [sp]
   15a1c:	mov	r1, r7
   15a20:	blx	ip
   15a24:	cmp	r0, #0
   15a28:	bne	15a8c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15a2c:	ldr	r0, [r7]
   15a30:	adds	r0, r0, r6
   15a34:	beq	15a58 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15a38:	ldr	r1, [sl, #120]	; 0x78
   15a3c:	mov	r2, r5
   15a40:	str	r1, [r4, #8]
   15a44:	add	r1, r1, r5
   15a48:	str	r1, [sl, #120]	; 0x78
   15a4c:	ldr	r1, [sp, #16]
   15a50:	bl	123e8 <memcpy@plt>
   15a54:	b	1599c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15a58:	mvn	r7, #0
   15a5c:	b	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15a60:	ldr	r0, [sp, #12]
   15a64:	cmp	r6, r0
   15a68:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15a6c:	mov	r1, r0
   15a70:	ldr	r0, [r9, #12]
   15a74:	str	r0, [r6]
   15a78:	ldr	r0, [r1]
   15a7c:	str	r0, [r9, #12]
   15a80:	str	r7, [r1]
   15a84:	ldr	r7, [r9]
   15a88:	b	159a0 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15a8c:	ldr	r0, [pc, #68]	; 15ad8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15a90:	ldr	r1, [pc, #68]	; 15adc <flatcc_builder_create_cached_vtable@@Base+0x374>
   15a94:	ldr	r3, [pc, #68]	; 15ae0 <flatcc_builder_create_cached_vtable@@Base+0x378>
   15a98:	mov	r2, #308	; 0x134
   15a9c:	add	r0, pc, r0
   15aa0:	add	r1, pc, r1
   15aa4:	add	r3, pc, r3
   15aa8:	bl	1249c <__assert_fail@plt>
   15aac:	ldr	r0, [pc, #24]	; 15acc <flatcc_builder_create_cached_vtable@@Base+0x364>
   15ab0:	ldr	r1, [pc, #24]	; 15ad0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15ab4:	ldr	r3, [pc, #24]	; 15ad4 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15ab8:	movw	r2, #342	; 0x156
   15abc:	add	r0, pc, r0
   15ac0:	add	r1, pc, r1
   15ac4:	add	r3, pc, r3
   15ac8:	bl	1249c <__assert_fail@plt>
   15acc:	muleq	r0, pc, r1	; <UNPREDICTABLE>
   15ad0:	andeq	r3, r0, sl, lsl r0
   15ad4:	andeq	r4, r0, r6, lsr #3
   15ad8:	strdeq	r4, [r0], -fp
   15adc:	andeq	r3, r0, sl, lsr r0
   15ae0:	andeq	r4, r0, sp, lsr #32

00015ae4 <flatcc_builder_create_table@@Base>:
   15ae4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ae8:	add	fp, sp, #24
   15aec:	sub	sp, sp, #80	; 0x50
   15af0:	ldr	r5, [fp, #12]
   15af4:	cmn	r5, #1
   15af8:	ble	15c4c <flatcc_builder_create_table@@Base+0x168>
   15afc:	ldr	ip, [fp, #16]
   15b00:	tst	ip, #1
   15b04:	beq	15c6c <flatcc_builder_create_table@@Base+0x188>
   15b08:	mov	r8, r0
   15b0c:	ldrh	r0, [r0, #128]	; 0x80
   15b10:	cmp	r3, #4
   15b14:	movls	r3, #4
   15b18:	cmp	r0, r3
   15b1c:	strhcc	r3, [r8, #128]	; 0x80
   15b20:	sub	r3, r3, #1
   15b24:	cmp	r5, #1
   15b28:	ldr	r4, [r8, #136]	; 0x88
   15b2c:	sub	r0, r4, r2
   15b30:	and	r0, r0, r3
   15b34:	add	r3, ip, r0
   15b38:	mvn	ip, #3
   15b3c:	sub	r6, ip, r2
   15b40:	add	r4, r6, r4
   15b44:	add	r6, r4, #1
   15b48:	sub	r3, r6, r3
   15b4c:	str	r3, [fp, #-28]	; 0xffffffe4
   15b50:	blt	15b7c <flatcc_builder_create_table@@Base+0x98>
   15b54:	ldr	r3, [fp, #8]
   15b58:	sub	r6, r4, r0
   15b5c:	sub	r4, ip, r6
   15b60:	ldrh	r6, [r3], #2
   15b64:	subs	r5, r5, #1
   15b68:	ldr	r7, [r6, r1]
   15b6c:	add	r7, r4, r7
   15b70:	sub	r7, r7, r6
   15b74:	str	r7, [r6, r1]
   15b78:	bne	15b60 <flatcc_builder_create_table@@Base+0x7c>
   15b7c:	sub	r3, fp, #28
   15b80:	mov	r4, #4
   15b84:	cmp	r2, #0
   15b88:	str	r3, [sp, #12]
   15b8c:	mov	r3, #1
   15b90:	str	r4, [sp, #4]
   15b94:	str	r4, [sp, #16]
   15b98:	str	r3, [sp, #8]
   15b9c:	beq	15bb8 <flatcc_builder_create_table@@Base+0xd4>
   15ba0:	mov	r3, #2
   15ba4:	add	r4, r2, #4
   15ba8:	str	r1, [sp, #20]
   15bac:	str	r2, [sp, #24]
   15bb0:	str	r3, [sp, #8]
   15bb4:	str	r4, [sp, #4]
   15bb8:	cmp	r0, #0
   15bbc:	beq	15be8 <flatcc_builder_create_table@@Base+0x104>
   15bc0:	add	r4, r4, r0
   15bc4:	add	r1, sp, #4
   15bc8:	str	r4, [sp, #4]
   15bcc:	add	r1, r1, r3, lsl #3
   15bd0:	add	r3, r3, #1
   15bd4:	ldr	r2, [pc, #208]	; 15cac <flatcc_builder_create_table@@Base+0x1c8>
   15bd8:	ldr	r2, [pc, r2]
   15bdc:	str	r2, [r1, #8]
   15be0:	str	r0, [r1, #12]
   15be4:	str	r3, [sp, #8]
   15be8:	cmp	r4, #0
   15bec:	ble	15c8c <flatcc_builder_create_table@@Base+0x1a8>
   15bf0:	ldr	r0, [r8, #136]	; 0x88
   15bf4:	ldr	r7, [r8, #44]	; 0x2c
   15bf8:	add	r1, sp, #4
   15bfc:	mov	r2, r3
   15c00:	add	r1, r1, #8
   15c04:	sub	r5, r0, r4
   15c08:	ldr	r0, [r8, #36]	; 0x24
   15c0c:	str	r4, [sp]
   15c10:	mov	r3, r5
   15c14:	blx	r7
   15c18:	cmp	r0, #0
   15c1c:	streq	r5, [r8, #136]	; 0x88
   15c20:	moveq	r0, r5
   15c24:	subeq	sp, fp, #24
   15c28:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c2c:	ldr	r0, [pc, #160]	; 15cd4 <flatcc_builder_create_table@@Base+0x1f0>
   15c30:	ldr	r1, [pc, #160]	; 15cd8 <flatcc_builder_create_table@@Base+0x1f4>
   15c34:	ldr	r3, [pc, #160]	; 15cdc <flatcc_builder_create_table@@Base+0x1f8>
   15c38:	movw	r2, #651	; 0x28b
   15c3c:	add	r0, pc, r0
   15c40:	add	r1, pc, r1
   15c44:	add	r3, pc, r3
   15c48:	bl	1249c <__assert_fail@plt>
   15c4c:	ldr	r0, [pc, #92]	; 15cb0 <flatcc_builder_create_table@@Base+0x1cc>
   15c50:	ldr	r1, [pc, #92]	; 15cb4 <flatcc_builder_create_table@@Base+0x1d0>
   15c54:	ldr	r3, [pc, #92]	; 15cb8 <flatcc_builder_create_table@@Base+0x1d4>
   15c58:	movw	r2, #1237	; 0x4d5
   15c5c:	add	r0, pc, r0
   15c60:	add	r1, pc, r1
   15c64:	add	r3, pc, r3
   15c68:	bl	1249c <__assert_fail@plt>
   15c6c:	ldr	r0, [pc, #72]	; 15cbc <flatcc_builder_create_table@@Base+0x1d8>
   15c70:	ldr	r1, [pc, #72]	; 15cc0 <flatcc_builder_create_table@@Base+0x1dc>
   15c74:	ldr	r3, [pc, #72]	; 15cc4 <flatcc_builder_create_table@@Base+0x1e0>
   15c78:	movw	r2, #1243	; 0x4db
   15c7c:	add	r0, pc, r0
   15c80:	add	r1, pc, r1
   15c84:	add	r3, pc, r3
   15c88:	bl	1249c <__assert_fail@plt>
   15c8c:	ldr	r0, [pc, #52]	; 15cc8 <flatcc_builder_create_table@@Base+0x1e4>
   15c90:	ldr	r1, [pc, #52]	; 15ccc <flatcc_builder_create_table@@Base+0x1e8>
   15c94:	ldr	r3, [pc, #52]	; 15cd0 <flatcc_builder_create_table@@Base+0x1ec>
   15c98:	movw	r2, #647	; 0x287
   15c9c:	add	r0, pc, r0
   15ca0:	add	r1, pc, r1
   15ca4:	add	r3, pc, r3
   15ca8:	bl	1249c <__assert_fail@plt>
   15cac:	andeq	r4, r1, ip, ror r4
   15cb0:	strdeq	r3, [r0], -r1
   15cb4:	andeq	r2, r0, sl, ror lr
   15cb8:	strdeq	r3, [r0], -fp
   15cbc:	andeq	r3, r0, pc, ror r6
   15cc0:	andeq	r2, r0, sl, asr lr
   15cc4:	ldrdeq	r3, [r0], -fp
   15cc8:	strdeq	r3, [r0], -fp
   15ccc:	andeq	r2, r0, sl, lsr lr
   15cd0:			; <UNDEFINED> instruction: 0x00003eb2
   15cd4:	andeq	r4, r0, fp, asr r0
   15cd8:	muleq	r0, sl, lr
   15cdc:	andeq	r3, r0, r2, lsl pc

00015ce0 <flatcc_builder_check_required_field@@Base>:
   15ce0:	ldr	r2, [r0, #32]
   15ce4:	ldrh	r2, [r2, #14]
   15ce8:	cmp	r2, #3
   15cec:	bne	15d1c <flatcc_builder_check_required_field@@Base+0x3c>
   15cf0:	ldrh	r3, [r0, #8]
   15cf4:	mov	r2, #0
   15cf8:	cmp	r3, r1
   15cfc:	bls	15d14 <flatcc_builder_check_required_field@@Base+0x34>
   15d00:	ldr	r0, [r0, #4]
   15d04:	add	r0, r0, r1, lsl #1
   15d08:	ldrh	r2, [r0]
   15d0c:	cmp	r2, #0
   15d10:	movwne	r2, #1
   15d14:	mov	r0, r2
   15d18:	bx	lr
   15d1c:	push	{fp, lr}
   15d20:	mov	fp, sp
   15d24:	ldr	r0, [pc, #24]	; 15d44 <flatcc_builder_check_required_field@@Base+0x64>
   15d28:	ldr	r1, [pc, #24]	; 15d48 <flatcc_builder_check_required_field@@Base+0x68>
   15d2c:	ldr	r3, [pc, #24]	; 15d4c <flatcc_builder_check_required_field@@Base+0x6c>
   15d30:	movw	r2, #1272	; 0x4f8
   15d34:	add	r0, pc, r0
   15d38:	add	r1, pc, r1
   15d3c:	add	r3, pc, r3
   15d40:	bl	1249c <__assert_fail@plt>
   15d44:	ldrdeq	r3, [r0], -r2
   15d48:	andeq	r2, r0, r2, lsr #27
   15d4c:	strdeq	r3, [r0], -r5

00015d50 <flatcc_builder_check_union_field@@Base>:
   15d50:	mov	r2, r0
   15d54:	ldr	r0, [r0, #32]
   15d58:	ldrh	r0, [r0, #14]
   15d5c:	cmp	r0, #3
   15d60:	bne	15dc0 <flatcc_builder_check_union_field@@Base+0x70>
   15d64:	cmp	r1, #0
   15d68:	mov	r0, #0
   15d6c:	ldrhne	r3, [r2, #8]
   15d70:	cmpne	r3, r1
   15d74:	bhi	15d7c <flatcc_builder_check_union_field@@Base+0x2c>
   15d78:	bx	lr
   15d7c:	ldr	r0, [r2, #4]
   15d80:	add	r0, r0, r1, lsl #1
   15d84:	ldrh	r1, [r0, #-2]
   15d88:	cmp	r1, #0
   15d8c:	beq	15db0 <flatcc_builder_check_union_field@@Base+0x60>
   15d90:	ldr	r2, [r2, #16]
   15d94:	ldrh	r0, [r0]
   15d98:	ldrb	r1, [r2, r1]
   15d9c:	cmp	r1, #0
   15da0:	beq	15db4 <flatcc_builder_check_union_field@@Base+0x64>
   15da4:	cmp	r0, #0
   15da8:	movwne	r0, #1
   15dac:	bx	lr
   15db0:	ldrh	r0, [r0]
   15db4:	clz	r0, r0
   15db8:	lsr	r0, r0, #5
   15dbc:	bx	lr
   15dc0:	push	{fp, lr}
   15dc4:	mov	fp, sp
   15dc8:	ldr	r0, [pc, #24]	; 15de8 <flatcc_builder_check_union_field@@Base+0x98>
   15dcc:	ldr	r1, [pc, #24]	; 15dec <flatcc_builder_check_union_field@@Base+0x9c>
   15dd0:	ldr	r3, [pc, #24]	; 15df0 <flatcc_builder_check_union_field@@Base+0xa0>
   15dd4:	movw	r2, #1279	; 0x4ff
   15dd8:	add	r0, pc, r0
   15ddc:	add	r1, pc, r1
   15de0:	add	r3, pc, r3
   15de4:	bl	1249c <__assert_fail@plt>
   15de8:	andeq	r3, r0, lr, lsr #10
   15dec:	strdeq	r2, [r0], -lr
   15df0:	andeq	r3, r0, r4, lsr #11

00015df4 <flatcc_builder_check_required@@Base>:
   15df4:	push	{fp, lr}
   15df8:	mov	fp, sp
   15dfc:	mov	r3, r0
   15e00:	ldr	r0, [r0, #32]
   15e04:	ldrh	r0, [r0, #14]
   15e08:	cmp	r0, #3
   15e0c:	bne	15e64 <flatcc_builder_check_required@@Base+0x70>
   15e10:	ldrh	ip, [r3, #8]
   15e14:	mov	r0, #0
   15e18:	cmp	ip, r2
   15e1c:	movge	r0, #1
   15e20:	cmpge	r2, #1
   15e24:	bge	15e2c <flatcc_builder_check_required@@Base+0x38>
   15e28:	pop	{fp, pc}
   15e2c:	ldr	ip, [r3, #4]
   15e30:	mov	lr, #0
   15e34:	b	15e48 <flatcc_builder_check_required@@Base+0x54>
   15e38:	add	lr, lr, #1
   15e3c:	add	r1, r1, #2
   15e40:	cmp	lr, r2
   15e44:	popge	{fp, pc}
   15e48:	ldrh	r3, [r1]
   15e4c:	add	r3, ip, r3, lsl #1
   15e50:	ldrh	r3, [r3]
   15e54:	cmp	r3, #0
   15e58:	bne	15e38 <flatcc_builder_check_required@@Base+0x44>
   15e5c:	mov	r0, #0
   15e60:	pop	{fp, pc}
   15e64:	ldr	r0, [pc, #24]	; 15e84 <flatcc_builder_check_required@@Base+0x90>
   15e68:	ldr	r1, [pc, #24]	; 15e88 <flatcc_builder_check_required@@Base+0x94>
   15e6c:	ldr	r3, [pc, #24]	; 15e8c <flatcc_builder_check_required@@Base+0x98>
   15e70:	movw	r2, #1297	; 0x511
   15e74:	add	r0, pc, r0
   15e78:	add	r1, pc, r1
   15e7c:	add	r3, pc, r3
   15e80:	bl	1249c <__assert_fail@plt>
   15e84:	muleq	r0, r2, r4
   15e88:	andeq	r2, r0, r2, ror #24
   15e8c:	andeq	r3, r0, r8, asr r5

00015e90 <flatcc_builder_end_table@@Base>:
   15e90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e94:	add	fp, sp, #24
   15e98:	sub	sp, sp, #16
   15e9c:	mov	r4, r0
   15ea0:	ldr	r0, [r0, #32]
   15ea4:	ldrh	r0, [r0, #14]
   15ea8:	cmp	r0, #3
   15eac:	bne	16028 <flatcc_builder_end_table@@Base+0x198>
   15eb0:	ldrh	r0, [r4, #8]
   15eb4:	ldr	r5, [r4, #4]
   15eb8:	mov	r1, #4
   15ebc:	movw	r2, #31153	; 0x79b1
   15ec0:	movt	r2, #40503	; 0x9e37
   15ec4:	add	r0, r1, r0, lsl #1
   15ec8:	strh	r0, [r5, #-4]!
   15ecc:	ldrh	r1, [r4, #20]
   15ed0:	uxth	r6, r0
   15ed4:	add	r1, r1, #4
   15ed8:	strh	r1, [r5, #2]
   15edc:	uxth	r1, r1
   15ee0:	ldr	r0, [r4, #12]
   15ee4:	eor	r0, r0, r6
   15ee8:	mul	r0, r0, r2
   15eec:	eor	r0, r0, r1
   15ef0:	mov	r1, r5
   15ef4:	mul	r3, r0, r2
   15ef8:	mov	r0, r4
   15efc:	mov	r2, r6
   15f00:	str	r3, [r4, #12]
   15f04:	bl	15768 <flatcc_builder_create_cached_vtable@@Base>
   15f08:	cmp	r0, #0
   15f0c:	beq	16018 <flatcc_builder_end_table@@Base+0x188>
   15f10:	mov	r7, r0
   15f14:	mov	r0, r5
   15f18:	mov	r1, #0
   15f1c:	mov	r2, r6
   15f20:	mov	r8, #0
   15f24:	bl	1246c <memset@plt>
   15f28:	ldr	r5, [r4, #32]
   15f2c:	ldr	r0, [r4, #76]	; 0x4c
   15f30:	ldr	r6, [r4]
   15f34:	ldrh	r3, [r4, #130]	; 0x82
   15f38:	ldr	r1, [r4, #16]
   15f3c:	ldr	r2, [r4, #20]
   15f40:	ldr	r5, [r5, #20]
   15f44:	add	r0, r0, r5
   15f48:	sub	r6, r6, r0
   15f4c:	asr	r6, r6, #1
   15f50:	stm	sp, {r0, r6, r7}
   15f54:	mov	r0, r4
   15f58:	bl	15ae4 <flatcc_builder_create_table@@Base>
   15f5c:	cmp	r0, #0
   15f60:	beq	1601c <flatcc_builder_end_table@@Base+0x18c>
   15f64:	ldr	r1, [r4, #32]
   15f68:	mov	r5, r0
   15f6c:	ldr	r0, [r4, #16]
   15f70:	ldr	r2, [r4, #20]
   15f74:	ldr	r3, [r4, #52]	; 0x34
   15f78:	ldr	r7, [r1, #24]
   15f7c:	str	r7, [r4, #12]
   15f80:	ldrh	r7, [r1, #28]
   15f84:	strh	r7, [r4, #8]
   15f88:	ldr	r7, [r1, #16]
   15f8c:	add	r3, r3, r7
   15f90:	str	r3, [r4, #4]
   15f94:	ldr	r3, [r4, #76]	; 0x4c
   15f98:	ldr	r1, [r1, #20]
   15f9c:	add	r1, r3, r1
   15fa0:	str	r1, [r4]
   15fa4:	mov	r1, #0
   15fa8:	bl	1246c <memset@plt>
   15fac:	ldr	r0, [r4, #32]
   15fb0:	ldr	r1, [r4, #60]	; 0x3c
   15fb4:	ldr	r2, [r4, #64]	; 0x40
   15fb8:	mov	r8, r5
   15fbc:	ldr	r3, [r0, #8]
   15fc0:	str	r3, [r4, #20]
   15fc4:	ldr	r3, [r0]
   15fc8:	str	r3, [r4, #28]
   15fcc:	add	r1, r1, r3
   15fd0:	ldr	r7, [r0, #4]
   15fd4:	str	r1, [r4, #16]
   15fd8:	sub	r1, r2, r3
   15fdc:	cmp	r1, r7
   15fe0:	movhi	r1, r7
   15fe4:	str	r1, [r4, #24]
   15fe8:	ldrh	r1, [r4, #130]	; 0x82
   15fec:	ldrh	r2, [r4, #128]	; 0x80
   15ff0:	cmp	r2, r1
   15ff4:	strhcc	r1, [r4, #128]	; 0x80
   15ff8:	ldrh	r1, [r0, #12]
   15ffc:	sub	r0, r0, #36	; 0x24
   16000:	str	r0, [r4, #32]
   16004:	strh	r1, [r4, #130]	; 0x82
   16008:	ldr	r0, [r4, #156]	; 0x9c
   1600c:	sub	r0, r0, #1
   16010:	str	r0, [r4, #156]	; 0x9c
   16014:	b	1601c <flatcc_builder_end_table@@Base+0x18c>
   16018:	mov	r8, #0
   1601c:	mov	r0, r8
   16020:	sub	sp, fp, #24
   16024:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16028:	ldr	r0, [pc, #24]	; 16048 <flatcc_builder_end_table@@Base+0x1b8>
   1602c:	ldr	r1, [pc, #24]	; 1604c <flatcc_builder_end_table@@Base+0x1bc>
   16030:	ldr	r3, [pc, #24]	; 16050 <flatcc_builder_end_table@@Base+0x1c0>
   16034:	movw	r2, #1317	; 0x525
   16038:	add	r0, pc, r0
   1603c:	add	r1, pc, r1
   16040:	add	r3, pc, r3
   16044:	bl	1249c <__assert_fail@plt>
   16048:	andeq	r3, r0, lr, asr #5
   1604c:	muleq	r0, lr, sl
   16050:	andeq	r3, r0, lr, ror #7

00016054 <flatcc_builder_create_vector@@Base>:
   16054:	push	{r4, r5, r6, r7, fp, lr}
   16058:	add	fp, sp, #16
   1605c:	sub	sp, sp, #80	; 0x50
   16060:	mov	r7, r0
   16064:	ldr	r0, [fp, #12]
   16068:	cmp	r2, r0
   1606c:	bhi	1616c <flatcc_builder_create_vector@@Base+0x118>
   16070:	ldr	r0, [fp, #8]
   16074:	mov	r4, r2
   16078:	ldrh	r2, [r7, #128]	; 0x80
   1607c:	mov	r5, #4
   16080:	cmp	r0, #4
   16084:	movls	r0, r5
   16088:	cmp	r2, r0
   1608c:	sub	r2, fp, #20
   16090:	strhcc	r0, [r7, #128]	; 0x80
   16094:	str	r4, [fp, #-20]	; 0xffffffec
   16098:	sub	r0, r0, #1
   1609c:	ldr	ip, [r7, #136]	; 0x88
   160a0:	str	r2, [sp, #12]
   160a4:	mov	r2, #1
   160a8:	str	r5, [sp, #4]
   160ac:	str	r5, [sp, #16]
   160b0:	str	r2, [sp, #8]
   160b4:	mls	r6, r3, r4, ip
   160b8:	mul	r3, r3, r4
   160bc:	and	r0, r6, r0
   160c0:	cmp	r3, #0
   160c4:	beq	160e0 <flatcc_builder_create_vector@@Base+0x8c>
   160c8:	mov	r2, #2
   160cc:	add	r5, r3, #4
   160d0:	str	r1, [sp, #20]
   160d4:	str	r3, [sp, #24]
   160d8:	str	r2, [sp, #8]
   160dc:	str	r5, [sp, #4]
   160e0:	cmp	r0, #0
   160e4:	beq	16110 <flatcc_builder_create_vector@@Base+0xbc>
   160e8:	add	r5, r5, r0
   160ec:	add	r1, sp, #4
   160f0:	str	r5, [sp, #4]
   160f4:	add	r1, r1, r2, lsl #3
   160f8:	add	r2, r2, #1
   160fc:	ldr	r3, [pc, #168]	; 161ac <flatcc_builder_create_vector@@Base+0x158>
   16100:	ldr	r3, [pc, r3]
   16104:	str	r3, [r1, #8]
   16108:	str	r0, [r1, #12]
   1610c:	str	r2, [sp, #8]
   16110:	cmp	r5, #0
   16114:	ble	1618c <flatcc_builder_create_vector@@Base+0x138>
   16118:	ldr	r0, [r7, #36]	; 0x24
   1611c:	ldr	r6, [r7, #44]	; 0x2c
   16120:	add	r1, sp, #4
   16124:	sub	r4, ip, r5
   16128:	str	r5, [sp]
   1612c:	add	r1, r1, #8
   16130:	mov	r3, r4
   16134:	blx	r6
   16138:	cmp	r0, #0
   1613c:	streq	r4, [r7, #136]	; 0x88
   16140:	moveq	r0, r4
   16144:	subeq	sp, fp, #16
   16148:	popeq	{r4, r5, r6, r7, fp, pc}
   1614c:	ldr	r0, [pc, #116]	; 161c8 <flatcc_builder_create_vector@@Base+0x174>
   16150:	ldr	r1, [pc, #116]	; 161cc <flatcc_builder_create_vector@@Base+0x178>
   16154:	ldr	r3, [pc, #116]	; 161d0 <flatcc_builder_create_vector@@Base+0x17c>
   16158:	movw	r2, #651	; 0x28b
   1615c:	add	r0, pc, r0
   16160:	add	r1, pc, r1
   16164:	add	r3, pc, r3
   16168:	bl	1249c <__assert_fail@plt>
   1616c:	ldr	r0, [pc, #60]	; 161b0 <flatcc_builder_create_vector@@Base+0x15c>
   16170:	ldr	r1, [pc, #60]	; 161b4 <flatcc_builder_create_vector@@Base+0x160>
   16174:	ldr	r3, [pc, #60]	; 161b8 <flatcc_builder_create_vector@@Base+0x164>
   16178:	movw	r2, #1365	; 0x555
   1617c:	add	r0, pc, r0
   16180:	add	r1, pc, r1
   16184:	add	r3, pc, r3
   16188:	bl	1249c <__assert_fail@plt>
   1618c:	ldr	r0, [pc, #40]	; 161bc <flatcc_builder_create_vector@@Base+0x168>
   16190:	ldr	r1, [pc, #40]	; 161c0 <flatcc_builder_create_vector@@Base+0x16c>
   16194:	ldr	r3, [pc, #40]	; 161c4 <flatcc_builder_create_vector@@Base+0x170>
   16198:	movw	r2, #647	; 0x287
   1619c:	add	r0, pc, r0
   161a0:	add	r1, pc, r1
   161a4:	add	r3, pc, r3
   161a8:	bl	1249c <__assert_fail@plt>
   161ac:	andeq	r3, r1, r4, asr pc
   161b0:	strdeq	r3, [r0], -r4
   161b4:	andeq	r2, r0, sl, asr r9
   161b8:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   161bc:	strdeq	r3, [r0], -fp
   161c0:	andeq	r2, r0, sl, lsr r9
   161c4:			; <UNDEFINED> instruction: 0x000039b2
   161c8:	andeq	r3, r0, fp, lsr fp
   161cc:	andeq	r2, r0, sl, ror r9
   161d0:	strdeq	r3, [r0], -r2

000161d4 <flatcc_builder_end_vector@@Base>:
   161d4:	push	{r4, r5, fp, lr}
   161d8:	add	fp, sp, #8
   161dc:	sub	sp, sp, #8
   161e0:	mov	r4, r0
   161e4:	ldr	r0, [r0, #32]
   161e8:	ldrh	r1, [r0, #14]
   161ec:	cmp	r1, #4
   161f0:	bne	162a4 <flatcc_builder_end_vector@@Base+0xd0>
   161f4:	ldr	r3, [r0, #16]
   161f8:	ldr	r2, [r0, #20]
   161fc:	ldr	r0, [r0, #24]
   16200:	ldr	r1, [r4, #16]
   16204:	ldrh	r5, [r4, #130]	; 0x82
   16208:	str	r0, [sp, #4]
   1620c:	mov	r0, r4
   16210:	str	r5, [sp]
   16214:	bl	16054 <flatcc_builder_create_vector@@Base>
   16218:	mov	r5, r0
   1621c:	cmp	r0, #0
   16220:	beq	16298 <flatcc_builder_end_vector@@Base+0xc4>
   16224:	ldr	r0, [r4, #16]
   16228:	ldr	r2, [r4, #20]
   1622c:	mov	r1, #0
   16230:	bl	1246c <memset@plt>
   16234:	ldr	r0, [r4, #32]
   16238:	ldr	r1, [r4, #60]	; 0x3c
   1623c:	ldr	ip, [r4, #64]	; 0x40
   16240:	ldr	r3, [r0, #8]
   16244:	str	r3, [r4, #20]
   16248:	ldr	r3, [r0]
   1624c:	str	r3, [r4, #28]
   16250:	add	r1, r1, r3
   16254:	ldr	r2, [r0, #4]
   16258:	str	r1, [r4, #16]
   1625c:	sub	r1, ip, r3
   16260:	cmp	r1, r2
   16264:	movhi	r1, r2
   16268:	str	r1, [r4, #24]
   1626c:	ldrh	r1, [r4, #130]	; 0x82
   16270:	ldrh	r2, [r4, #128]	; 0x80
   16274:	cmp	r2, r1
   16278:	strhcc	r1, [r4, #128]	; 0x80
   1627c:	ldrh	r1, [r0, #12]
   16280:	sub	r0, r0, #36	; 0x24
   16284:	str	r0, [r4, #32]
   16288:	strh	r1, [r4, #130]	; 0x82
   1628c:	ldr	r0, [r4, #156]	; 0x9c
   16290:	sub	r0, r0, #1
   16294:	str	r0, [r4, #156]	; 0x9c
   16298:	mov	r0, r5
   1629c:	sub	sp, fp, #8
   162a0:	pop	{r4, r5, fp, pc}
   162a4:	ldr	r0, [pc, #24]	; 162c4 <flatcc_builder_end_vector@@Base+0xf0>
   162a8:	ldr	r1, [pc, #24]	; 162c8 <flatcc_builder_end_vector@@Base+0xf4>
   162ac:	ldr	r3, [pc, #24]	; 162cc <flatcc_builder_end_vector@@Base+0xf8>
   162b0:	movw	r2, #1400	; 0x578
   162b4:	add	r0, pc, r0
   162b8:	add	r1, pc, r1
   162bc:	add	r3, pc, r3
   162c0:	bl	1249c <__assert_fail@plt>
   162c4:	andeq	r2, r0, r0, ror #22
   162c8:	andeq	r2, r0, r2, lsr #16
   162cc:	andeq	r3, r0, sp, lsr r2

000162d0 <flatcc_builder_vector_count@@Base>:
   162d0:	ldr	r0, [r0, #32]
   162d4:	ldr	r0, [r0, #20]
   162d8:	bx	lr

000162dc <flatcc_builder_vector_edit@@Base>:
   162dc:	ldr	r0, [r0, #16]
   162e0:	bx	lr

000162e4 <flatcc_builder_create_offset_vector_direct@@Base>:
   162e4:	mov	r3, #0
   162e8:	b	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   162ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   162f0:	add	fp, sp, #24
   162f4:	sub	sp, sp, #80	; 0x50
   162f8:	mov	r6, #0
   162fc:	cmn	r2, #-1073741823	; 0xc0000001
   16300:	bhi	1643c <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   16304:	mov	r8, r0
   16308:	ldrh	r0, [r0, #128]	; 0x80
   1630c:	sub	r7, fp, #28
   16310:	mov	r5, #4
   16314:	mov	r4, #1
   16318:	cmp	r0, #3
   1631c:	movls	r0, #4
   16320:	strhls	r0, [r8, #128]	; 0x80
   16324:	str	r2, [fp, #-28]	; 0xffffffe4
   16328:	ldr	ip, [r8, #136]	; 0x88
   1632c:	str	r7, [sp, #12]
   16330:	mov	r7, #0
   16334:	str	r5, [sp, #4]
   16338:	str	r5, [sp, #16]
   1633c:	str	r4, [sp, #8]
   16340:	cmp	r7, r2, lsl #2
   16344:	and	r6, ip, #3
   16348:	beq	16368 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1634c:	lsl	r7, r2, #2
   16350:	mov	r4, #2
   16354:	str	r1, [sp, #20]
   16358:	add	r5, r7, #4
   1635c:	str	r7, [sp, #24]
   16360:	str	r4, [sp, #8]
   16364:	str	r5, [sp, #4]
   16368:	cmp	r6, #0
   1636c:	beq	16398 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16370:	add	r5, r5, r6
   16374:	add	r7, sp, #4
   16378:	str	r5, [sp, #4]
   1637c:	add	r7, r7, r4, lsl #3
   16380:	add	r4, r4, #1
   16384:	ldr	r0, [pc, #348]	; 164e8 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   16388:	ldr	r0, [pc, r0]
   1638c:	str	r0, [r7, #8]
   16390:	str	r6, [r7, #12]
   16394:	str	r4, [sp, #8]
   16398:	cmp	r2, #0
   1639c:	beq	16404 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   163a0:	mvn	r0, #3
   163a4:	mov	r6, #0
   163a8:	sub	r0, r0, ip
   163ac:	add	r0, r0, r5
   163b0:	ldr	r7, [r1, r6, lsl #2]
   163b4:	cmp	r7, #0
   163b8:	beq	163dc <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   163bc:	add	r7, r0, r7
   163c0:	cmp	r3, #0
   163c4:	str	r7, [r1, r6, lsl #2]
   163c8:	beq	163f0 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   163cc:	ldrb	r7, [r3, r6]
   163d0:	cmp	r7, #0
   163d4:	bne	163f0 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   163d8:	b	16448 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   163dc:	cmp	r3, #0
   163e0:	beq	16488 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   163e4:	ldrb	r7, [r3, r6]
   163e8:	cmp	r7, #0
   163ec:	bne	16468 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   163f0:	add	r6, r6, #1
   163f4:	sub	r0, r0, #4
   163f8:	cmp	r6, r2
   163fc:	bcc	163b0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16400:	ldr	ip, [r8, #136]	; 0x88
   16404:	cmp	r5, #0
   16408:	ble	164a8 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   1640c:	ldr	r0, [r8, #36]	; 0x24
   16410:	ldr	r7, [r8, #44]	; 0x2c
   16414:	add	r1, sp, #4
   16418:	sub	r6, ip, r5
   1641c:	mov	r2, r4
   16420:	str	r5, [sp]
   16424:	add	r1, r1, #8
   16428:	mov	r3, r6
   1642c:	blx	r7
   16430:	cmp	r0, #0
   16434:	bne	164c8 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   16438:	str	r6, [r8, #136]	; 0x88
   1643c:	mov	r0, r6
   16440:	sub	sp, fp, #24
   16444:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16448:	ldr	r0, [pc, #156]	; 164ec <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   1644c:	ldr	r1, [pc, #156]	; 164f0 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   16450:	ldr	r3, [pc, #156]	; 164f4 <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   16454:	movw	r2, #1457	; 0x5b1
   16458:	add	r0, pc, r0
   1645c:	add	r1, pc, r1
   16460:	add	r3, pc, r3
   16464:	bl	1249c <__assert_fail@plt>
   16468:	ldr	r0, [pc, #136]	; 164f8 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   1646c:	ldr	r1, [pc, #136]	; 164fc <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   16470:	ldr	r3, [pc, #136]	; 16500 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   16474:	movw	r2, #1461	; 0x5b5
   16478:	add	r0, pc, r0
   1647c:	add	r1, pc, r1
   16480:	add	r3, pc, r3
   16484:	bl	1249c <__assert_fail@plt>
   16488:	ldr	r0, [pc, #116]	; 16504 <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   1648c:	ldr	r1, [pc, #116]	; 16508 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   16490:	ldr	r3, [pc, #116]	; 1650c <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   16494:	movw	r2, #1463	; 0x5b7
   16498:	add	r0, pc, r0
   1649c:	add	r1, pc, r1
   164a0:	add	r3, pc, r3
   164a4:	bl	1249c <__assert_fail@plt>
   164a8:	ldr	r0, [pc, #96]	; 16510 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   164ac:	ldr	r1, [pc, #96]	; 16514 <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   164b0:	ldr	r3, [pc, #96]	; 16518 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   164b4:	movw	r2, #647	; 0x287
   164b8:	add	r0, pc, r0
   164bc:	add	r1, pc, r1
   164c0:	add	r3, pc, r3
   164c4:	bl	1249c <__assert_fail@plt>
   164c8:	ldr	r0, [pc, #76]	; 1651c <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   164cc:	ldr	r1, [pc, #76]	; 16520 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   164d0:	ldr	r3, [pc, #76]	; 16524 <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   164d4:	movw	r2, #651	; 0x28b
   164d8:	add	r0, pc, r0
   164dc:	add	r1, pc, r1
   164e0:	add	r3, pc, r3
   164e4:	bl	1249c <__assert_fail@plt>
   164e8:	andeq	r3, r1, ip, asr #25
   164ec:	andeq	r3, r0, r3, lsr r8
   164f0:	andeq	r2, r0, lr, ror r6
   164f4:	andeq	r3, r0, r9, lsr r8
   164f8:	andeq	r3, r0, r4, lsr #17
   164fc:	andeq	r2, r0, lr, asr r6
   16500:	andeq	r3, r0, r9, lsl r8
   16504:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   16508:	andeq	r2, r0, lr, lsr r6
   1650c:	strdeq	r3, [r0], -r9
   16510:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   16514:	andeq	r2, r0, lr, lsl r6
   16518:	muleq	r0, r6, r6
   1651c:			; <UNDEFINED> instruction: 0x000037bf
   16520:	strdeq	r2, [r0], -lr
   16524:	andeq	r3, r0, r6, ror r6

00016528 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16528:	push	{r4, r5, fp, lr}
   1652c:	add	fp, sp, #8
   16530:	mov	r4, r0
   16534:	ldr	r0, [r0, #32]
   16538:	mov	r3, r1
   1653c:	ldrh	r1, [r0, #14]
   16540:	cmp	r1, #5
   16544:	bne	165e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16548:	ldr	r2, [r0, #20]
   1654c:	ldr	r1, [r4, #16]
   16550:	mov	r0, r4
   16554:	bl	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16558:	mov	r5, r0
   1655c:	cmp	r0, #0
   16560:	beq	165d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16564:	ldr	r0, [r4, #16]
   16568:	ldr	r2, [r4, #20]
   1656c:	mov	r1, #0
   16570:	bl	1246c <memset@plt>
   16574:	ldr	r0, [r4, #32]
   16578:	ldr	r1, [r4, #60]	; 0x3c
   1657c:	ldr	ip, [r4, #64]	; 0x40
   16580:	ldr	r3, [r0, #8]
   16584:	str	r3, [r4, #20]
   16588:	ldr	r3, [r0]
   1658c:	str	r3, [r4, #28]
   16590:	add	r1, r1, r3
   16594:	ldr	r2, [r0, #4]
   16598:	str	r1, [r4, #16]
   1659c:	sub	r1, ip, r3
   165a0:	cmp	r1, r2
   165a4:	movhi	r1, r2
   165a8:	str	r1, [r4, #24]
   165ac:	ldrh	r1, [r4, #130]	; 0x82
   165b0:	ldrh	r2, [r4, #128]	; 0x80
   165b4:	cmp	r2, r1
   165b8:	strhcc	r1, [r4, #128]	; 0x80
   165bc:	ldrh	r1, [r0, #12]
   165c0:	sub	r0, r0, #36	; 0x24
   165c4:	str	r0, [r4, #32]
   165c8:	strh	r1, [r4, #130]	; 0x82
   165cc:	ldr	r0, [r4, #156]	; 0x9c
   165d0:	sub	r0, r0, #1
   165d4:	str	r0, [r4, #156]	; 0x9c
   165d8:	mov	r0, r5
   165dc:	pop	{r4, r5, fp, pc}
   165e0:	ldr	r0, [pc, #24]	; 16600 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   165e4:	ldr	r1, [pc, #24]	; 16604 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   165e8:	ldr	r3, [pc, #24]	; 16608 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   165ec:	movw	r2, #1493	; 0x5d5
   165f0:	add	r0, pc, r0
   165f4:	add	r1, pc, r1
   165f8:	add	r3, pc, r3
   165fc:	bl	1249c <__assert_fail@plt>
   16600:	andeq	r2, r0, sp, lsl r9
   16604:	andeq	r2, r0, r6, ror #9
   16608:	andeq	r2, r0, lr, lsl #31

0001660c <flatcc_builder_offset_vector_edit@@Base>:
   1660c:	ldr	r0, [r0, #16]
   16610:	bx	lr

00016614 <flatcc_builder_offset_vector_count@@Base>:
   16614:	ldr	r0, [r0, #32]
   16618:	ldr	r0, [r0, #20]
   1661c:	bx	lr

00016620 <flatcc_builder_table_add_union@@Base>:
   16620:	push	{r4, r5, r6, r7, fp, lr}
   16624:	add	fp, sp, #16
   16628:	mov	r5, r0
   1662c:	ldr	r0, [r0, #32]
   16630:	ldrh	r0, [r0, #14]
   16634:	cmp	r0, #3
   16638:	bne	166c0 <flatcc_builder_table_add_union@@Base+0xa0>
   1663c:	mov	r7, r3
   16640:	mov	r4, r2
   16644:	mov	r6, r1
   16648:	cmp	r3, #0
   1664c:	beq	1665c <flatcc_builder_table_add_union@@Base+0x3c>
   16650:	uxtb	r0, r4
   16654:	cmp	r0, #0
   16658:	beq	166e0 <flatcc_builder_table_add_union@@Base+0xc0>
   1665c:	cmp	r7, #0
   16660:	beq	1667c <flatcc_builder_table_add_union@@Base+0x5c>
   16664:	mov	r0, r5
   16668:	mov	r1, r6
   1666c:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   16670:	cmp	r0, #0
   16674:	beq	16700 <flatcc_builder_table_add_union@@Base+0xe0>
   16678:	str	r7, [r0]
   1667c:	sub	r1, r6, #1
   16680:	mov	r0, r5
   16684:	mov	r2, #1
   16688:	mov	r3, #1
   1668c:	bl	16904 <flatcc_builder_table_add@@Base>
   16690:	cmp	r0, #0
   16694:	strbne	r4, [r0]
   16698:	movne	r0, #0
   1669c:	popne	{r4, r5, r6, r7, fp, pc}
   166a0:	ldr	r0, [pc, #156]	; 16744 <flatcc_builder_table_add_union@@Base+0x124>
   166a4:	ldr	r1, [pc, #156]	; 16748 <flatcc_builder_table_add_union@@Base+0x128>
   166a8:	ldr	r3, [pc, #156]	; 1674c <flatcc_builder_table_add_union@@Base+0x12c>
   166ac:	movw	r2, #1526	; 0x5f6
   166b0:	add	r0, pc, r0
   166b4:	add	r1, pc, r1
   166b8:	add	r3, pc, r3
   166bc:	bl	1249c <__assert_fail@plt>
   166c0:	ldr	r0, [pc, #88]	; 16720 <flatcc_builder_table_add_union@@Base+0x100>
   166c4:	ldr	r1, [pc, #88]	; 16724 <flatcc_builder_table_add_union@@Base+0x104>
   166c8:	ldr	r3, [pc, #88]	; 16728 <flatcc_builder_table_add_union@@Base+0x108>
   166cc:	movw	r2, #1518	; 0x5ee
   166d0:	add	r0, pc, r0
   166d4:	add	r1, pc, r1
   166d8:	add	r3, pc, r3
   166dc:	bl	1249c <__assert_fail@plt>
   166e0:	ldr	r0, [pc, #68]	; 1672c <flatcc_builder_table_add_union@@Base+0x10c>
   166e4:	ldr	r1, [pc, #68]	; 16730 <flatcc_builder_table_add_union@@Base+0x110>
   166e8:	ldr	r3, [pc, #68]	; 16734 <flatcc_builder_table_add_union@@Base+0x114>
   166ec:	movw	r2, #1519	; 0x5ef
   166f0:	add	r0, pc, r0
   166f4:	add	r1, pc, r1
   166f8:	add	r3, pc, r3
   166fc:	bl	1249c <__assert_fail@plt>
   16700:	ldr	r0, [pc, #48]	; 16738 <flatcc_builder_table_add_union@@Base+0x118>
   16704:	ldr	r1, [pc, #48]	; 1673c <flatcc_builder_table_add_union@@Base+0x11c>
   16708:	ldr	r3, [pc, #48]	; 16740 <flatcc_builder_table_add_union@@Base+0x120>
   1670c:	movw	r2, #1522	; 0x5f2
   16710:	add	r0, pc, r0
   16714:	add	r1, pc, r1
   16718:	add	r3, pc, r3
   1671c:	bl	1249c <__assert_fail@plt>
   16720:	andeq	r2, r0, r6, lsr ip
   16724:	andeq	r2, r0, r6, lsl #8
   16728:	andeq	r2, r0, r0, lsr #30
   1672c:	andeq	r2, r0, r0, ror #30
   16730:	andeq	r2, r0, r6, ror #7
   16734:	andeq	r2, r0, r0, lsl #30
   16738:	andeq	r2, r0, r2, ror #30
   1673c:	andeq	r2, r0, r6, asr #7
   16740:	andeq	r2, r0, r0, ror #29
   16744:	andeq	r2, r0, ip, asr #31
   16748:	andeq	r2, r0, r6, lsr #8
   1674c:	andeq	r2, r0, r0, asr #30

00016750 <flatcc_builder_table_add_offset@@Base>:
   16750:	push	{r4, r5, r6, r7, fp, lr}
   16754:	add	fp, sp, #16
   16758:	sub	sp, sp, #8
   1675c:	mov	r4, r0
   16760:	ldr	r0, [r0, #32]
   16764:	ldrh	r0, [r0, #14]
   16768:	cmp	r0, #3
   1676c:	bne	16880 <flatcc_builder_table_add_offset@@Base+0x130>
   16770:	movw	r0, #32765	; 0x7ffd
   16774:	mov	r5, r1
   16778:	cmp	r1, r0
   1677c:	bcs	168a0 <flatcc_builder_table_add_offset@@Base+0x150>
   16780:	ldr	r0, [r4, #4]
   16784:	add	r1, r0, r5, lsl #1
   16788:	ldrh	r1, [r1]
   1678c:	cmp	r1, #0
   16790:	bne	168c0 <flatcc_builder_table_add_offset@@Base+0x170>
   16794:	ldr	r2, [r4, #20]
   16798:	ldr	r1, [r4, #12]
   1679c:	ldr	r3, [r4, #24]
   167a0:	add	r2, r2, #3
   167a4:	eor	r1, r1, r5
   167a8:	bic	r6, r2, #3
   167ac:	movw	r2, #31153	; 0x79b1
   167b0:	movt	r2, #40503	; 0x9e37
   167b4:	add	r7, r6, #4
   167b8:	mul	r1, r1, r2
   167bc:	cmp	r7, r3
   167c0:	str	r7, [r4, #20]
   167c4:	eor	r1, r1, #4
   167c8:	mul	r1, r1, r2
   167cc:	str	r1, [r4, #12]
   167d0:	bls	16844 <flatcc_builder_table_add_offset@@Base+0xf4>
   167d4:	ldr	r1, [r4, #28]
   167d8:	ldr	r0, [r4, #40]	; 0x28
   167dc:	ldr	ip, [r4, #48]	; 0x30
   167e0:	mov	r2, #1
   167e4:	mov	r3, #1
   167e8:	str	r2, [sp]
   167ec:	add	r2, r1, r7
   167f0:	add	r1, r4, #60	; 0x3c
   167f4:	blx	ip
   167f8:	mov	r1, r0
   167fc:	mov	r0, #0
   16800:	cmp	r1, #0
   16804:	beq	16810 <flatcc_builder_table_add_offset@@Base+0xc0>
   16808:	sub	sp, fp, #16
   1680c:	pop	{r4, r5, r6, r7, fp, pc}
   16810:	ldr	r0, [r4, #28]
   16814:	ldr	r2, [r4, #60]	; 0x3c
   16818:	ldr	r3, [r4, #64]	; 0x40
   1681c:	ldr	r1, [r4, #32]
   16820:	add	r2, r2, r0
   16824:	sub	r0, r3, r0
   16828:	str	r2, [r4, #16]
   1682c:	movw	r2, #65532	; 0xfffc
   16830:	cmp	r0, r2
   16834:	movcs	r0, r2
   16838:	str	r0, [r4, #24]
   1683c:	str	r2, [r1, #4]
   16840:	ldr	r0, [r4, #4]
   16844:	uxth	r1, r5
   16848:	add	r0, r0, r1, lsl #1
   1684c:	strh	r7, [r0]
   16850:	ldrh	r0, [r4, #8]
   16854:	cmp	r0, r1
   16858:	addls	r0, r5, #1
   1685c:	strhls	r0, [r4, #8]
   16860:	ldr	r0, [r4]
   16864:	add	r1, r0, #2
   16868:	str	r1, [r4]
   1686c:	strh	r6, [r0]
   16870:	ldr	r0, [r4, #16]
   16874:	add	r0, r0, r6
   16878:	sub	sp, fp, #16
   1687c:	pop	{r4, r5, r6, r7, fp, pc}
   16880:	ldr	r0, [pc, #88]	; 168e0 <flatcc_builder_table_add_offset@@Base+0x190>
   16884:	ldr	r1, [pc, #88]	; 168e4 <flatcc_builder_table_add_offset@@Base+0x194>
   16888:	ldr	r3, [pc, #88]	; 168e8 <flatcc_builder_table_add_offset@@Base+0x198>
   1688c:	movw	r2, #1811	; 0x713
   16890:	add	r0, pc, r0
   16894:	add	r1, pc, r1
   16898:	add	r3, pc, r3
   1689c:	bl	1249c <__assert_fail@plt>
   168a0:	ldr	r0, [pc, #68]	; 168ec <flatcc_builder_table_add_offset@@Base+0x19c>
   168a4:	ldr	r1, [pc, #68]	; 168f0 <flatcc_builder_table_add_offset@@Base+0x1a0>
   168a8:	ldr	r3, [pc, #68]	; 168f4 <flatcc_builder_table_add_offset@@Base+0x1a4>
   168ac:	movw	r2, #1812	; 0x714
   168b0:	add	r0, pc, r0
   168b4:	add	r1, pc, r1
   168b8:	add	r3, pc, r3
   168bc:	bl	1249c <__assert_fail@plt>
   168c0:	ldr	r0, [pc, #48]	; 168f8 <flatcc_builder_table_add_offset@@Base+0x1a8>
   168c4:	ldr	r1, [pc, #48]	; 168fc <flatcc_builder_table_add_offset@@Base+0x1ac>
   168c8:	ldr	r3, [pc, #48]	; 16900 <flatcc_builder_table_add_offset@@Base+0x1b0>
   168cc:	movw	r2, #1819	; 0x71b
   168d0:	add	r0, pc, r0
   168d4:	add	r1, pc, r1
   168d8:	add	r3, pc, r3
   168dc:	bl	1249c <__assert_fail@plt>
   168e0:	andeq	r2, r0, r6, ror sl
   168e4:	andeq	r2, r0, r6, asr #4
   168e8:	andeq	r3, r0, r2, ror #2
   168ec:	andeq	r3, r0, sl, asr #1
   168f0:	andeq	r2, r0, r6, lsr #4
   168f4:	andeq	r3, r0, r2, asr #2
   168f8:	andeq	r3, r0, r7, asr #7
   168fc:	andeq	r2, r0, r6, lsl #4
   16900:	andeq	r3, r0, r2, lsr #2

00016904 <flatcc_builder_table_add@@Base>:
   16904:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16908:	add	fp, sp, #24
   1690c:	sub	sp, sp, #8
   16910:	mov	r4, r0
   16914:	ldr	r0, [r0, #32]
   16918:	ldrh	r0, [r0, #14]
   1691c:	cmp	r0, #3
   16920:	bne	16a40 <flatcc_builder_table_add@@Base+0x13c>
   16924:	movw	r0, #32765	; 0x7ffd
   16928:	mov	r8, r1
   1692c:	cmp	r1, r0
   16930:	bcs	16a60 <flatcc_builder_table_add@@Base+0x15c>
   16934:	ldrh	r0, [r4, #130]	; 0x82
   16938:	cmp	r0, r3
   1693c:	strhcc	r3, [r4, #130]	; 0x82
   16940:	ldr	r0, [r4, #4]
   16944:	add	r1, r0, r8, lsl #1
   16948:	ldrh	r1, [r1]
   1694c:	cmp	r1, #0
   16950:	bne	16a80 <flatcc_builder_table_add@@Base+0x17c>
   16954:	ldr	r1, [r4, #12]
   16958:	movw	r7, #31153	; 0x79b1
   1695c:	ldr	r6, [r4, #20]
   16960:	ldr	r5, [r4, #24]
   16964:	movt	r7, #40503	; 0x9e37
   16968:	eor	r1, r1, r8
   1696c:	mul	r1, r1, r7
   16970:	eor	r1, r1, r2
   16974:	mul	r1, r1, r7
   16978:	str	r1, [r4, #12]
   1697c:	add	r1, r3, r6
   16980:	rsb	r3, r3, #0
   16984:	sub	r1, r1, #1
   16988:	and	r6, r1, r3
   1698c:	add	r1, r6, r2
   16990:	cmp	r1, r5
   16994:	str	r1, [r4, #20]
   16998:	bcc	16a10 <flatcc_builder_table_add@@Base+0x10c>
   1699c:	ldr	r2, [r4, #28]
   169a0:	ldr	r0, [r4, #40]	; 0x28
   169a4:	ldr	r7, [r4, #48]	; 0x30
   169a8:	mov	r3, #1
   169ac:	str	r3, [sp]
   169b0:	mov	r3, #1
   169b4:	add	r1, r1, r2
   169b8:	add	r2, r1, #1
   169bc:	add	r1, r4, #60	; 0x3c
   169c0:	blx	r7
   169c4:	mov	r1, r0
   169c8:	mov	r0, #0
   169cc:	cmp	r1, #0
   169d0:	beq	169dc <flatcc_builder_table_add@@Base+0xd8>
   169d4:	sub	sp, fp, #24
   169d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169dc:	ldr	r0, [r4, #28]
   169e0:	ldr	r2, [r4, #60]	; 0x3c
   169e4:	ldr	r3, [r4, #64]	; 0x40
   169e8:	ldr	r1, [r4, #32]
   169ec:	add	r2, r2, r0
   169f0:	sub	r0, r3, r0
   169f4:	str	r2, [r4, #16]
   169f8:	movw	r2, #65532	; 0xfffc
   169fc:	cmp	r0, r2
   16a00:	movcs	r0, r2
   16a04:	str	r0, [r4, #24]
   16a08:	str	r2, [r1, #4]
   16a0c:	ldr	r0, [r4, #4]
   16a10:	uxth	r1, r8
   16a14:	add	r2, r6, #4
   16a18:	add	r0, r0, r1, lsl #1
   16a1c:	strh	r2, [r0]
   16a20:	ldrh	r0, [r4, #8]
   16a24:	cmp	r0, r1
   16a28:	addls	r0, r8, #1
   16a2c:	strhls	r0, [r4, #8]
   16a30:	ldr	r0, [r4, #16]
   16a34:	add	r0, r0, r6
   16a38:	sub	sp, fp, #24
   16a3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a40:	ldr	r0, [pc, #88]	; 16aa0 <flatcc_builder_table_add@@Base+0x19c>
   16a44:	ldr	r1, [pc, #88]	; 16aa4 <flatcc_builder_table_add@@Base+0x1a0>
   16a48:	ldr	r3, [pc, #88]	; 16aa8 <flatcc_builder_table_add@@Base+0x1a4>
   16a4c:	movw	r2, #1773	; 0x6ed
   16a50:	add	r0, pc, r0
   16a54:	add	r1, pc, r1
   16a58:	add	r3, pc, r3
   16a5c:	bl	1249c <__assert_fail@plt>
   16a60:	ldr	r0, [pc, #68]	; 16aac <flatcc_builder_table_add@@Base+0x1a8>
   16a64:	ldr	r1, [pc, #68]	; 16ab0 <flatcc_builder_table_add@@Base+0x1ac>
   16a68:	ldr	r3, [pc, #68]	; 16ab4 <flatcc_builder_table_add@@Base+0x1b0>
   16a6c:	movw	r2, #1774	; 0x6ee
   16a70:	add	r0, pc, r0
   16a74:	add	r1, pc, r1
   16a78:	add	r3, pc, r3
   16a7c:	bl	1249c <__assert_fail@plt>
   16a80:	ldr	r0, [pc, #48]	; 16ab8 <flatcc_builder_table_add@@Base+0x1b4>
   16a84:	ldr	r1, [pc, #48]	; 16abc <flatcc_builder_table_add@@Base+0x1b8>
   16a88:	ldr	r3, [pc, #48]	; 16ac0 <flatcc_builder_table_add@@Base+0x1bc>
   16a8c:	movw	r2, #1784	; 0x6f8
   16a90:	add	r0, pc, r0
   16a94:	add	r1, pc, r1
   16a98:	add	r3, pc, r3
   16a9c:	bl	1249c <__assert_fail@plt>
   16aa0:			; <UNDEFINED> instruction: 0x000028b6
   16aa4:	andeq	r2, r0, r6, lsl #1
   16aa8:	ldrdeq	r2, [r0], -r8
   16aac:	andeq	r2, r0, sl, lsl #30
   16ab0:	andeq	r2, r0, r6, rrx
   16ab4:			; <UNDEFINED> instruction: 0x00002eb8
   16ab8:	andeq	r3, r0, r7, lsl #4
   16abc:	andeq	r2, r0, r6, asr #32
   16ac0:	muleq	r0, r8, lr

00016ac4 <flatcc_builder_table_add_union_vector@@Base>:
   16ac4:	push	{r4, r5, r6, r7, fp, lr}
   16ac8:	add	fp, sp, #16
   16acc:	mov	r6, r0
   16ad0:	ldr	r0, [r0, #32]
   16ad4:	ldrh	r0, [r0, #14]
   16ad8:	cmp	r0, #3
   16adc:	bne	16b44 <flatcc_builder_table_add_union_vector@@Base+0x80>
   16ae0:	clz	r0, r3
   16ae4:	mov	r5, r1
   16ae8:	clz	r1, r2
   16aec:	mov	r4, r3
   16af0:	mov	r7, r2
   16af4:	lsr	r0, r0, #5
   16af8:	lsr	r1, r1, #5
   16afc:	cmp	r1, r0
   16b00:	bne	16b64 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16b04:	cmp	r7, #0
   16b08:	beq	16b3c <flatcc_builder_table_add_union_vector@@Base+0x78>
   16b0c:	sub	r1, r5, #1
   16b10:	mov	r0, r6
   16b14:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   16b18:	cmp	r0, #0
   16b1c:	beq	16b84 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16b20:	str	r7, [r0]
   16b24:	mov	r0, r6
   16b28:	mov	r1, r5
   16b2c:	bl	16750 <flatcc_builder_table_add_offset@@Base>
   16b30:	cmp	r0, #0
   16b34:	beq	16ba4 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16b38:	str	r4, [r0]
   16b3c:	mov	r0, #0
   16b40:	pop	{r4, r5, r6, r7, fp, pc}
   16b44:	ldr	r0, [pc, #120]	; 16bc4 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16b48:	ldr	r1, [pc, #120]	; 16bc8 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16b4c:	ldr	r3, [pc, #120]	; 16bcc <flatcc_builder_table_add_union_vector@@Base+0x108>
   16b50:	mov	r2, #1536	; 0x600
   16b54:	add	r0, pc, r0
   16b58:	add	r1, pc, r1
   16b5c:	add	r3, pc, r3
   16b60:	bl	1249c <__assert_fail@plt>
   16b64:	ldr	r0, [pc, #100]	; 16bd0 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16b68:	ldr	r1, [pc, #100]	; 16bd4 <flatcc_builder_table_add_union_vector@@Base+0x110>
   16b6c:	ldr	r3, [pc, #100]	; 16bd8 <flatcc_builder_table_add_union_vector@@Base+0x114>
   16b70:	movw	r2, #1537	; 0x601
   16b74:	add	r0, pc, r0
   16b78:	add	r1, pc, r1
   16b7c:	add	r3, pc, r3
   16b80:	bl	1249c <__assert_fail@plt>
   16b84:	ldr	r0, [pc, #80]	; 16bdc <flatcc_builder_table_add_union_vector@@Base+0x118>
   16b88:	ldr	r1, [pc, #80]	; 16be0 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16b8c:	ldr	r3, [pc, #80]	; 16be4 <flatcc_builder_table_add_union_vector@@Base+0x120>
   16b90:	movw	r2, #1540	; 0x604
   16b94:	add	r0, pc, r0
   16b98:	add	r1, pc, r1
   16b9c:	add	r3, pc, r3
   16ba0:	bl	1249c <__assert_fail@plt>
   16ba4:	ldr	r0, [pc, #60]	; 16be8 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16ba8:	ldr	r1, [pc, #60]	; 16bec <flatcc_builder_table_add_union_vector@@Base+0x128>
   16bac:	ldr	r3, [pc, #60]	; 16bf0 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   16bb0:	movw	r2, #1544	; 0x608
   16bb4:	add	r0, pc, r0
   16bb8:	add	r1, pc, r1
   16bbc:	add	r3, pc, r3
   16bc0:	bl	1249c <__assert_fail@plt>
   16bc4:			; <UNDEFINED> instruction: 0x000027b2
   16bc8:	andeq	r1, r0, r2, lsl #31
   16bcc:	andeq	r2, r0, ip, lsr #22
   16bd0:	andeq	r2, r0, r7, ror fp
   16bd4:	andeq	r1, r0, r2, ror #30
   16bd8:	andeq	r2, r0, ip, lsl #22
   16bdc:	ldrdeq	r2, [r0], -lr
   16be0:	andeq	r1, r0, r2, asr #30
   16be4:	andeq	r2, r0, ip, ror #21
   16be8:			; <UNDEFINED> instruction: 0x00002abe
   16bec:	andeq	r1, r0, r2, lsr #30
   16bf0:	andeq	r2, r0, ip, asr #21

00016bf4 <flatcc_builder_create_union_vector@@Base>:
   16bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf8:	add	fp, sp, #28
   16bfc:	sub	sp, sp, #12
   16c00:	mov	r7, #0
   16c04:	mov	r4, r1
   16c08:	mov	r5, r0
   16c0c:	mov	sl, r3
   16c10:	mov	r9, r2
   16c14:	mov	r6, #4
   16c18:	str	r7, [r0]
   16c1c:	str	r7, [r0, #4]
   16c20:	mov	r0, r1
   16c24:	mov	r1, #4
   16c28:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   16c2c:	cmp	r0, #0
   16c30:	beq	16c3c <flatcc_builder_create_union_vector@@Base+0x48>
   16c34:	sub	sp, fp, #28
   16c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c3c:	ldr	r0, [r4, #32]
   16c40:	mov	r1, #5
   16c44:	str	r6, [r0, #16]
   16c48:	ldr	r0, [r4, #32]
   16c4c:	str	r7, [r0, #20]
   16c50:	ldr	r0, [r4, #32]
   16c54:	strh	r1, [r0, #14]
   16c58:	ldr	r1, [r4, #28]
   16c5c:	ldr	r2, [r4, #60]	; 0x3c
   16c60:	ldr	r3, [r4, #64]	; 0x40
   16c64:	add	r2, r2, r1
   16c68:	sub	r1, r3, r1
   16c6c:	str	r2, [r4, #16]
   16c70:	mvn	r2, #3
   16c74:	cmn	r1, #4
   16c78:	movcs	r1, r2
   16c7c:	str	r1, [r4, #24]
   16c80:	str	r2, [r0, #4]
   16c84:	ldr	r1, [r0, #20]
   16c88:	adds	r1, r1, sl
   16c8c:	cmpcc	r1, #1073741824	; 0x40000000
   16c90:	bcc	16cb4 <flatcc_builder_create_union_vector@@Base+0xc0>
   16c94:	ldr	r0, [pc, #556]	; 16ec8 <flatcc_builder_create_union_vector@@Base+0x2d4>
   16c98:	ldr	r1, [pc, #556]	; 16ecc <flatcc_builder_create_union_vector@@Base+0x2d8>
   16c9c:	ldr	r3, [pc, #556]	; 16ed0 <flatcc_builder_create_union_vector@@Base+0x2dc>
   16ca0:	mov	r2, #892	; 0x37c
   16ca4:	add	r0, pc, r0
   16ca8:	add	r1, pc, r1
   16cac:	add	r3, pc, r3
   16cb0:	bl	1249c <__assert_fail@plt>
   16cb4:	str	r1, [r0, #20]
   16cb8:	ldr	r7, [r4, #20]
   16cbc:	ldr	r0, [r4, #24]
   16cc0:	add	r1, r7, sl, lsl #2
   16cc4:	cmp	r1, r0
   16cc8:	str	r1, [r4, #20]
   16ccc:	bcs	16ce0 <flatcc_builder_create_union_vector@@Base+0xec>
   16cd0:	ldr	r1, [r4, #16]
   16cd4:	adds	r2, r1, r7
   16cd8:	bne	16d48 <flatcc_builder_create_union_vector@@Base+0x154>
   16cdc:	b	16c34 <flatcc_builder_create_union_vector@@Base+0x40>
   16ce0:	ldr	r2, [r4, #28]
   16ce4:	ldr	r0, [r4, #40]	; 0x28
   16ce8:	ldr	r6, [r4, #48]	; 0x30
   16cec:	mov	r3, #1
   16cf0:	str	r3, [sp]
   16cf4:	mov	r3, #1
   16cf8:	add	r1, r1, r2
   16cfc:	add	r2, r1, #1
   16d00:	add	r1, r4, #60	; 0x3c
   16d04:	blx	r6
   16d08:	cmp	r0, #0
   16d0c:	bne	16c34 <flatcc_builder_create_union_vector@@Base+0x40>
   16d10:	ldr	r0, [r4, #28]
   16d14:	ldr	r1, [r4, #60]	; 0x3c
   16d18:	ldr	r3, [r4, #64]	; 0x40
   16d1c:	ldr	r2, [r4, #32]
   16d20:	add	r1, r1, r0
   16d24:	sub	r0, r3, r0
   16d28:	mvn	r3, #3
   16d2c:	cmn	r0, #4
   16d30:	str	r1, [r4, #16]
   16d34:	movcs	r0, r3
   16d38:	str	r0, [r4, #24]
   16d3c:	str	r3, [r2, #4]
   16d40:	adds	r2, r1, r7
   16d44:	beq	16c34 <flatcc_builder_create_union_vector@@Base+0x40>
   16d48:	ldr	r7, [r4, #20]
   16d4c:	add	r2, r7, sl
   16d50:	cmp	r2, r0
   16d54:	str	r2, [r4, #20]
   16d58:	bcc	16dbc <flatcc_builder_create_union_vector@@Base+0x1c8>
   16d5c:	ldr	r1, [r4, #28]
   16d60:	ldr	r0, [r4, #40]	; 0x28
   16d64:	ldr	r6, [r4, #48]	; 0x30
   16d68:	mov	r3, #1
   16d6c:	str	r3, [sp]
   16d70:	mov	r3, #1
   16d74:	add	r1, r2, r1
   16d78:	add	r2, r1, #1
   16d7c:	add	r1, r4, #60	; 0x3c
   16d80:	blx	r6
   16d84:	cmp	r0, #0
   16d88:	bne	16c34 <flatcc_builder_create_union_vector@@Base+0x40>
   16d8c:	ldr	r0, [r4, #28]
   16d90:	ldr	r1, [r4, #60]	; 0x3c
   16d94:	ldr	r3, [r4, #64]	; 0x40
   16d98:	ldr	r2, [r4, #32]
   16d9c:	add	r1, r1, r0
   16da0:	sub	r0, r3, r0
   16da4:	mvn	r3, #3
   16da8:	cmn	r0, #4
   16dac:	str	r1, [r4, #16]
   16db0:	movcs	r0, r3
   16db4:	str	r0, [r4, #24]
   16db8:	str	r3, [r2, #4]
   16dbc:	adds	r8, r1, r7
   16dc0:	beq	16c34 <flatcc_builder_create_union_vector@@Base+0x40>
   16dc4:	cmp	sl, #0
   16dc8:	beq	16df8 <flatcc_builder_create_union_vector@@Base+0x204>
   16dcc:	add	r0, r9, #4
   16dd0:	mov	r2, sl
   16dd4:	mov	r3, r1
   16dd8:	mov	r7, r8
   16ddc:	ldrb	r6, [r0, #-4]
   16de0:	subs	r2, r2, #1
   16de4:	strb	r6, [r7], #1
   16de8:	ldr	r6, [r0]
   16dec:	add	r0, r0, #8
   16df0:	str	r6, [r3], #4
   16df4:	bne	16ddc <flatcc_builder_create_union_vector@@Base+0x1e8>
   16df8:	mov	r0, r4
   16dfc:	mov	r2, sl
   16e00:	mov	r3, r8
   16e04:	bl	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16e08:	mov	r7, r0
   16e0c:	mov	r9, #0
   16e10:	cmp	r0, #0
   16e14:	beq	16e40 <flatcc_builder_create_union_vector@@Base+0x24c>
   16e18:	mvn	r0, #0
   16e1c:	mov	r1, #1
   16e20:	mov	r2, sl
   16e24:	mov	r3, #1
   16e28:	str	r1, [sp]
   16e2c:	str	r0, [sp, #4]
   16e30:	mov	r0, r4
   16e34:	mov	r1, r8
   16e38:	bl	16054 <flatcc_builder_create_vector@@Base>
   16e3c:	b	16e44 <flatcc_builder_create_union_vector@@Base+0x250>
   16e40:	mov	r0, #0
   16e44:	orr	r1, r9, r7
   16e48:	stm	r5, {r0, r1}
   16e4c:	mov	r1, #0
   16e50:	ldr	r0, [r4, #16]
   16e54:	ldr	r2, [r4, #20]
   16e58:	bl	1246c <memset@plt>
   16e5c:	ldr	r0, [r4, #32]
   16e60:	ldr	r1, [r4, #60]	; 0x3c
   16e64:	ldr	r2, [r4, #64]	; 0x40
   16e68:	ldr	r3, [r0, #8]
   16e6c:	str	r3, [r4, #20]
   16e70:	ldr	r3, [r0]
   16e74:	str	r3, [r4, #28]
   16e78:	add	r1, r1, r3
   16e7c:	ldr	r7, [r0, #4]
   16e80:	str	r1, [r4, #16]
   16e84:	sub	r1, r2, r3
   16e88:	cmp	r1, r7
   16e8c:	movhi	r1, r7
   16e90:	str	r1, [r4, #24]
   16e94:	ldrh	r1, [r4, #130]	; 0x82
   16e98:	ldrh	r2, [r4, #128]	; 0x80
   16e9c:	cmp	r2, r1
   16ea0:	strhcc	r1, [r4, #128]	; 0x80
   16ea4:	ldrh	r1, [r0, #12]
   16ea8:	sub	r0, r0, #36	; 0x24
   16eac:	str	r0, [r4, #32]
   16eb0:	strh	r1, [r4, #130]	; 0x82
   16eb4:	ldr	r0, [r4, #156]	; 0x9c
   16eb8:	sub	r0, r0, #1
   16ebc:	str	r0, [r4, #156]	; 0x9c
   16ec0:	sub	sp, fp, #28
   16ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	strdeq	r2, [r0], -ip
   16ecc:	andeq	r1, r0, r2, lsr lr
   16ed0:	andeq	r2, r0, pc, lsl #30

00016ed4 <flatcc_builder_create_union_vector_direct@@Base>:
   16ed4:	push	{r4, r5, r6, r7, fp, lr}
   16ed8:	add	fp, sp, #16
   16edc:	sub	sp, sp, #8
   16ee0:	ldr	r7, [fp, #8]
   16ee4:	mov	r5, r2
   16ee8:	mov	r4, r0
   16eec:	mov	r0, #0
   16ef0:	mov	r6, r1
   16ef4:	str	r0, [r4]
   16ef8:	str	r0, [r4, #4]
   16efc:	mov	r0, r1
   16f00:	mov	r1, r3
   16f04:	mov	r3, r5
   16f08:	mov	r2, r7
   16f0c:	bl	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16f10:	cmp	r0, #0
   16f14:	str	r0, [r4, #4]
   16f18:	beq	16f44 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16f1c:	mvn	r0, #0
   16f20:	mov	r1, #1
   16f24:	mov	r2, r7
   16f28:	mov	r3, #1
   16f2c:	str	r1, [sp]
   16f30:	str	r0, [sp, #4]
   16f34:	mov	r0, r6
   16f38:	mov	r1, r5
   16f3c:	bl	16054 <flatcc_builder_create_vector@@Base>
   16f40:	str	r0, [r4]
   16f44:	sub	sp, fp, #16
   16f48:	pop	{r4, r5, r6, r7, fp, pc}

00016f4c <flatcc_builder_start_union_vector@@Base>:
   16f4c:	push	{r4, sl, fp, lr}
   16f50:	add	fp, sp, #8
   16f54:	mov	r1, #4
   16f58:	mov	r4, r0
   16f5c:	bl	13f48 <flatcc_builder_start_buffer@@Base+0xc0>
   16f60:	mov	r1, r0
   16f64:	mvn	r0, #0
   16f68:	cmp	r1, #0
   16f6c:	popne	{r4, sl, fp, pc}
   16f70:	ldr	r0, [r4, #32]
   16f74:	mov	r1, #8
   16f78:	mov	r2, #7
   16f7c:	str	r1, [r0, #16]
   16f80:	mov	r0, #0
   16f84:	ldr	r1, [r4, #32]
   16f88:	str	r0, [r1, #20]
   16f8c:	ldr	r1, [r4, #32]
   16f90:	strh	r2, [r1, #14]
   16f94:	ldr	r2, [r4, #28]
   16f98:	ldr	r3, [r4, #60]	; 0x3c
   16f9c:	ldr	ip, [r4, #64]	; 0x40
   16fa0:	add	r3, r3, r2
   16fa4:	sub	r2, ip, r2
   16fa8:	str	r3, [r4, #16]
   16fac:	mvn	r3, #3
   16fb0:	cmn	r2, #4
   16fb4:	movcs	r2, r3
   16fb8:	str	r2, [r4, #24]
   16fbc:	str	r3, [r1, #4]
   16fc0:	pop	{r4, sl, fp, pc}

00016fc4 <flatcc_builder_end_union_vector@@Base>:
   16fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fc8:	add	fp, sp, #28
   16fcc:	sub	sp, sp, #12
   16fd0:	mov	sl, r0
   16fd4:	mov	r0, #0
   16fd8:	mov	r4, r1
   16fdc:	str	r0, [sl]
   16fe0:	str	r0, [sl, #4]
   16fe4:	ldr	r0, [r1, #32]
   16fe8:	ldrh	r1, [r0, #14]
   16fec:	cmp	r1, #7
   16ff0:	bne	17194 <flatcc_builder_end_union_vector@@Base+0x1d0>
   16ff4:	ldr	r6, [r0, #20]
   16ff8:	ldr	r7, [r4, #20]
   16ffc:	ldr	r2, [r4, #24]
   17000:	add	r0, r6, r6, lsl #2
   17004:	add	r1, r7, r0
   17008:	cmp	r1, r2
   1700c:	str	r1, [r4, #20]
   17010:	bcs	17024 <flatcc_builder_end_union_vector@@Base+0x60>
   17014:	ldr	r0, [r4, #16]
   17018:	adds	r1, r0, r7
   1701c:	bne	1708c <flatcc_builder_end_union_vector@@Base+0xc8>
   17020:	b	1718c <flatcc_builder_end_union_vector@@Base+0x1c8>
   17024:	ldr	r2, [r4, #28]
   17028:	ldr	r0, [r4, #40]	; 0x28
   1702c:	ldr	r5, [r4, #48]	; 0x30
   17030:	mov	r3, #1
   17034:	str	r3, [sp]
   17038:	mov	r3, #1
   1703c:	add	r1, r1, r2
   17040:	add	r2, r1, #1
   17044:	add	r1, r4, #60	; 0x3c
   17048:	blx	r5
   1704c:	cmp	r0, #0
   17050:	bne	1718c <flatcc_builder_end_union_vector@@Base+0x1c8>
   17054:	ldr	r1, [r4, #28]
   17058:	ldr	r0, [r4, #60]	; 0x3c
   1705c:	ldr	r3, [r4, #64]	; 0x40
   17060:	ldr	r2, [r4, #32]
   17064:	add	r0, r0, r1
   17068:	sub	r1, r3, r1
   1706c:	mvn	r3, #3
   17070:	cmn	r1, #4
   17074:	str	r0, [r4, #16]
   17078:	movcs	r1, r3
   1707c:	str	r1, [r4, #24]
   17080:	str	r3, [r2, #4]
   17084:	adds	r1, r0, r7
   17088:	beq	1718c <flatcc_builder_end_union_vector@@Base+0x1c8>
   1708c:	add	r8, r1, r6, lsl #2
   17090:	cmp	r6, #0
   17094:	beq	170c4 <flatcc_builder_end_union_vector@@Base+0x100>
   17098:	add	r0, r0, #4
   1709c:	mov	r2, r6
   170a0:	mov	r3, r1
   170a4:	mov	r7, r8
   170a8:	ldrb	r5, [r0, #-4]
   170ac:	subs	r2, r2, #1
   170b0:	strb	r5, [r7], #1
   170b4:	ldr	r5, [r0]
   170b8:	add	r0, r0, #8
   170bc:	str	r5, [r3], #4
   170c0:	bne	170a8 <flatcc_builder_end_union_vector@@Base+0xe4>
   170c4:	mov	r0, r4
   170c8:	mov	r2, r6
   170cc:	mov	r3, r8
   170d0:	bl	162ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   170d4:	mov	r7, r0
   170d8:	mov	r9, #0
   170dc:	cmp	r0, #0
   170e0:	beq	1710c <flatcc_builder_end_union_vector@@Base+0x148>
   170e4:	mvn	r0, #0
   170e8:	mov	r1, #1
   170ec:	mov	r2, r6
   170f0:	mov	r3, #1
   170f4:	str	r1, [sp]
   170f8:	str	r0, [sp, #4]
   170fc:	mov	r0, r4
   17100:	mov	r1, r8
   17104:	bl	16054 <flatcc_builder_create_vector@@Base>
   17108:	b	17110 <flatcc_builder_end_union_vector@@Base+0x14c>
   1710c:	mov	r0, #0
   17110:	orr	r1, r9, r7
   17114:	stm	sl, {r0, r1}
   17118:	mov	r1, #0
   1711c:	ldr	r0, [r4, #16]
   17120:	ldr	r2, [r4, #20]
   17124:	bl	1246c <memset@plt>
   17128:	ldr	r0, [r4, #32]
   1712c:	ldr	r1, [r4, #60]	; 0x3c
   17130:	ldr	r2, [r4, #64]	; 0x40
   17134:	ldr	r3, [r0, #8]
   17138:	str	r3, [r4, #20]
   1713c:	ldr	r3, [r0]
   17140:	str	r3, [r4, #28]
   17144:	add	r1, r1, r3
   17148:	ldr	r7, [r0, #4]
   1714c:	str	r1, [r4, #16]
   17150:	sub	r1, r2, r3
   17154:	cmp	r1, r7
   17158:	movhi	r1, r7
   1715c:	str	r1, [r4, #24]
   17160:	ldrh	r1, [r4, #130]	; 0x82
   17164:	ldrh	r2, [r4, #128]	; 0x80
   17168:	cmp	r2, r1
   1716c:	strhcc	r1, [r4, #128]	; 0x80
   17170:	ldrh	r1, [r0, #12]
   17174:	sub	r0, r0, #36	; 0x24
   17178:	str	r0, [r4, #32]
   1717c:	strh	r1, [r4, #130]	; 0x82
   17180:	ldr	r0, [r4, #156]	; 0x9c
   17184:	sub	r0, r0, #1
   17188:	str	r0, [r4, #156]	; 0x9c
   1718c:	sub	sp, fp, #28
   17190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17194:	ldr	r0, [pc, #24]	; 171b4 <flatcc_builder_end_union_vector@@Base+0x1f0>
   17198:	ldr	r1, [pc, #24]	; 171b8 <flatcc_builder_end_union_vector@@Base+0x1f4>
   1719c:	ldr	r3, [pc, #24]	; 171bc <flatcc_builder_end_union_vector@@Base+0x1f8>
   171a0:	movw	r2, #1617	; 0x651
   171a4:	add	r0, pc, r0
   171a8:	add	r1, pc, r1
   171ac:	add	r3, pc, r3
   171b0:	bl	1249c <__assert_fail@plt>
   171b4:	andeq	r2, r0, pc, ror #10
   171b8:	andeq	r1, r0, r2, lsr r9
   171bc:	muleq	r0, r9, r5

000171c0 <flatcc_builder_union_vector_count@@Base>:
   171c0:	ldr	r0, [r0, #32]
   171c4:	ldr	r0, [r0, #20]
   171c8:	bx	lr

000171cc <flatcc_builder_union_vector_edit@@Base>:
   171cc:	ldr	r0, [r0, #16]
   171d0:	bx	lr

000171d4 <flatcc_builder_extend_union_vector@@Base>:
   171d4:	push	{r4, r5, fp, lr}
   171d8:	add	fp, sp, #8
   171dc:	sub	sp, sp, #8
   171e0:	mov	r4, r0
   171e4:	ldr	r0, [r0, #32]
   171e8:	ldr	r2, [r0, #20]
   171ec:	adds	r2, r2, r1
   171f0:	cmpcc	r2, #536870912	; 0x20000000
   171f4:	bcc	17218 <flatcc_builder_extend_union_vector@@Base+0x44>
   171f8:	ldr	r0, [pc, #184]	; 172b8 <flatcc_builder_extend_union_vector@@Base+0xe4>
   171fc:	ldr	r1, [pc, #184]	; 172bc <flatcc_builder_extend_union_vector@@Base+0xe8>
   17200:	ldr	r3, [pc, #184]	; 172c0 <flatcc_builder_extend_union_vector@@Base+0xec>
   17204:	mov	r2, #892	; 0x37c
   17208:	add	r0, pc, r0
   1720c:	add	r1, pc, r1
   17210:	add	r3, pc, r3
   17214:	bl	1249c <__assert_fail@plt>
   17218:	str	r2, [r0, #20]
   1721c:	ldr	r5, [r4, #20]
   17220:	ldr	r0, [r4, #24]
   17224:	add	r1, r5, r1, lsl #3
   17228:	cmp	r1, r0
   1722c:	str	r1, [r4, #20]
   17230:	bcs	1723c <flatcc_builder_extend_union_vector@@Base+0x68>
   17234:	ldr	r0, [r4, #16]
   17238:	b	172ac <flatcc_builder_extend_union_vector@@Base+0xd8>
   1723c:	ldr	r2, [r4, #28]
   17240:	ldr	r0, [r4, #40]	; 0x28
   17244:	ldr	ip, [r4, #48]	; 0x30
   17248:	mov	r3, #1
   1724c:	str	r3, [sp]
   17250:	mov	r3, #1
   17254:	add	r1, r1, r2
   17258:	add	r2, r1, #1
   1725c:	add	r1, r4, #60	; 0x3c
   17260:	blx	ip
   17264:	mov	r1, r0
   17268:	mov	r0, #0
   1726c:	cmp	r1, #0
   17270:	beq	1727c <flatcc_builder_extend_union_vector@@Base+0xa8>
   17274:	sub	sp, fp, #8
   17278:	pop	{r4, r5, fp, pc}
   1727c:	ldr	r1, [r4, #28]
   17280:	ldr	r0, [r4, #60]	; 0x3c
   17284:	ldr	r3, [r4, #64]	; 0x40
   17288:	ldr	r2, [r4, #32]
   1728c:	add	r0, r0, r1
   17290:	sub	r1, r3, r1
   17294:	mvn	r3, #3
   17298:	cmn	r1, #4
   1729c:	str	r0, [r4, #16]
   172a0:	movcs	r1, r3
   172a4:	str	r1, [r4, #24]
   172a8:	str	r3, [r2, #4]
   172ac:	add	r0, r0, r5
   172b0:	sub	sp, fp, #8
   172b4:	pop	{r4, r5, fp, pc}
   172b8:	muleq	r0, r8, r9
   172bc:	andeq	r1, r0, lr, asr #17
   172c0:	andeq	r2, r0, fp, lsr #19

000172c4 <flatcc_builder_truncate_union_vector@@Base>:
   172c4:	push	{fp, lr}
   172c8:	mov	fp, sp
   172cc:	ldr	r2, [r0, #32]
   172d0:	ldrh	r3, [r2, #14]
   172d4:	cmp	r3, #7
   172d8:	bne	17320 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   172dc:	ldr	r3, [r2, #20]
   172e0:	cmp	r3, r1
   172e4:	bcc	17340 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   172e8:	sub	r3, r3, r1
   172ec:	str	r3, [r2, #20]
   172f0:	ldr	r2, [r0, #32]
   172f4:	ldr	r3, [r0, #20]
   172f8:	ldr	ip, [r0, #16]
   172fc:	ldr	r2, [r2, #16]
   17300:	mls	r3, r2, r1, r3
   17304:	mul	r2, r2, r1
   17308:	mov	r1, #0
   1730c:	str	r3, [r0, #20]
   17310:	add	r0, ip, r3
   17314:	bl	1246c <memset@plt>
   17318:	mov	r0, #0
   1731c:	pop	{fp, pc}
   17320:	ldr	r0, [pc, #56]	; 17360 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17324:	ldr	r1, [pc, #56]	; 17364 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17328:	ldr	r3, [pc, #56]	; 17368 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1732c:	movw	r2, #1665	; 0x681
   17330:	add	r0, pc, r0
   17334:	add	r1, pc, r1
   17338:	add	r3, pc, r3
   1733c:	bl	1249c <__assert_fail@plt>
   17340:	ldr	r0, [pc, #36]	; 1736c <flatcc_builder_truncate_union_vector@@Base+0xa8>
   17344:	ldr	r1, [pc, #36]	; 17370 <flatcc_builder_truncate_union_vector@@Base+0xac>
   17348:	ldr	r3, [pc, #36]	; 17374 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   1734c:	movw	r2, #1666	; 0x682
   17350:	add	r0, pc, r0
   17354:	add	r1, pc, r1
   17358:	add	r3, pc, r3
   1735c:	bl	1249c <__assert_fail@plt>
   17360:	andeq	r2, r0, r3, ror #7
   17364:	andeq	r1, r0, r6, lsr #15
   17368:	andeq	r2, r0, r0, ror #8
   1736c:	andeq	r1, r0, r7, lsr #28
   17370:	andeq	r1, r0, r6, lsl #15
   17374:	andeq	r2, r0, r0, asr #8

00017378 <flatcc_builder_union_vector_push@@Base>:
   17378:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1737c:	add	fp, sp, #24
   17380:	sub	sp, sp, #8
   17384:	mov	r7, r0
   17388:	ldr	r0, [r0, #32]
   1738c:	mov	r9, r1
   17390:	ldrh	r1, [r0, #14]
   17394:	cmp	r1, #7
   17398:	bne	17454 <flatcc_builder_union_vector_push@@Base+0xdc>
   1739c:	ldr	r1, [r0, #20]
   173a0:	mov	r6, #0
   173a4:	cmn	r1, #-536870911	; 0xe0000001
   173a8:	beq	17448 <flatcc_builder_union_vector_push@@Base+0xd0>
   173ac:	add	r1, r1, #1
   173b0:	mov	r8, r2
   173b4:	str	r1, [r0, #20]
   173b8:	ldr	r4, [r7, #20]
   173bc:	ldr	r0, [r7, #24]
   173c0:	add	r1, r4, #8
   173c4:	cmp	r1, r0
   173c8:	str	r1, [r7, #20]
   173cc:	bcs	173d8 <flatcc_builder_union_vector_push@@Base+0x60>
   173d0:	ldr	r0, [r7, #16]
   173d4:	b	17438 <flatcc_builder_union_vector_push@@Base+0xc0>
   173d8:	ldr	r1, [r7, #28]
   173dc:	ldr	r0, [r7, #40]	; 0x28
   173e0:	ldr	r5, [r7, #48]	; 0x30
   173e4:	mov	r2, #1
   173e8:	mov	r3, #1
   173ec:	str	r2, [sp]
   173f0:	add	r1, r4, r1
   173f4:	add	r2, r1, #9
   173f8:	add	r1, r7, #60	; 0x3c
   173fc:	blx	r5
   17400:	cmp	r0, #0
   17404:	bne	17448 <flatcc_builder_union_vector_push@@Base+0xd0>
   17408:	ldr	r1, [r7, #28]
   1740c:	ldr	r0, [r7, #60]	; 0x3c
   17410:	ldr	r3, [r7, #64]	; 0x40
   17414:	ldr	r2, [r7, #32]
   17418:	add	r0, r0, r1
   1741c:	sub	r1, r3, r1
   17420:	mvn	r3, #3
   17424:	cmn	r1, #4
   17428:	str	r0, [r7, #16]
   1742c:	movcs	r1, r3
   17430:	str	r1, [r7, #24]
   17434:	str	r3, [r2, #4]
   17438:	adds	r0, r0, r4
   1743c:	movne	r6, r0
   17440:	strne	r9, [r0]
   17444:	strne	r8, [r0, #4]
   17448:	mov	r0, r6
   1744c:	sub	sp, fp, #24
   17450:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17454:	ldr	r0, [pc, #24]	; 17474 <flatcc_builder_union_vector_push@@Base+0xfc>
   17458:	ldr	r1, [pc, #24]	; 17478 <flatcc_builder_union_vector_push@@Base+0x100>
   1745c:	ldr	r3, [pc, #24]	; 1747c <flatcc_builder_union_vector_push@@Base+0x104>
   17460:	movw	r2, #1677	; 0x68d
   17464:	add	r0, pc, r0
   17468:	add	r1, pc, r1
   1746c:	add	r3, pc, r3
   17470:	bl	1249c <__assert_fail@plt>
   17474:	andeq	r2, r0, pc, lsr #5
   17478:	andeq	r1, r0, r2, ror r6
   1747c:	andeq	r2, r0, r1, ror r3

00017480 <flatcc_builder_append_union_vector@@Base>:
   17480:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17484:	add	fp, sp, #24
   17488:	sub	sp, sp, #8
   1748c:	mov	r6, r0
   17490:	ldr	r0, [r0, #32]
   17494:	mov	r8, r1
   17498:	ldrh	r1, [r0, #14]
   1749c:	cmp	r1, #7
   174a0:	bne	17590 <flatcc_builder_append_union_vector@@Base+0x110>
   174a4:	ldr	r1, [r0, #20]
   174a8:	mov	r5, r2
   174ac:	adds	r1, r1, r2
   174b0:	cmpcc	r1, #536870912	; 0x20000000
   174b4:	bcc	174d8 <flatcc_builder_append_union_vector@@Base+0x58>
   174b8:	ldr	r0, [pc, #252]	; 175bc <flatcc_builder_append_union_vector@@Base+0x13c>
   174bc:	ldr	r1, [pc, #252]	; 175c0 <flatcc_builder_append_union_vector@@Base+0x140>
   174c0:	ldr	r3, [pc, #252]	; 175c4 <flatcc_builder_append_union_vector@@Base+0x144>
   174c4:	mov	r2, #892	; 0x37c
   174c8:	add	r0, pc, r0
   174cc:	add	r1, pc, r1
   174d0:	add	r3, pc, r3
   174d4:	bl	1249c <__assert_fail@plt>
   174d8:	str	r1, [r0, #20]
   174dc:	ldr	r4, [r6, #20]
   174e0:	ldr	r0, [r6, #24]
   174e4:	add	r1, r4, r5, lsl #3
   174e8:	cmp	r1, r0
   174ec:	str	r1, [r6, #20]
   174f0:	bcs	17514 <flatcc_builder_append_union_vector@@Base+0x94>
   174f4:	ldr	r0, [r6, #16]
   174f8:	adds	r7, r0, r4
   174fc:	beq	17580 <flatcc_builder_append_union_vector@@Base+0x100>
   17500:	lsl	r2, r5, #3
   17504:	mov	r0, r7
   17508:	mov	r1, r8
   1750c:	bl	123e8 <memcpy@plt>
   17510:	b	17584 <flatcc_builder_append_union_vector@@Base+0x104>
   17514:	ldr	r2, [r6, #28]
   17518:	ldr	r0, [r6, #40]	; 0x28
   1751c:	ldr	r7, [r6, #48]	; 0x30
   17520:	mov	r3, #1
   17524:	str	r3, [sp]
   17528:	mov	r3, #1
   1752c:	add	r1, r1, r2
   17530:	add	r2, r1, #1
   17534:	add	r1, r6, #60	; 0x3c
   17538:	blx	r7
   1753c:	mov	r7, #0
   17540:	cmp	r0, #0
   17544:	bne	17584 <flatcc_builder_append_union_vector@@Base+0x104>
   17548:	ldr	r1, [r6, #28]
   1754c:	ldr	r0, [r6, #60]	; 0x3c
   17550:	ldr	r3, [r6, #64]	; 0x40
   17554:	ldr	r2, [r6, #32]
   17558:	add	r0, r0, r1
   1755c:	sub	r1, r3, r1
   17560:	mvn	r3, #3
   17564:	cmn	r1, #4
   17568:	str	r0, [r6, #16]
   1756c:	movcs	r1, r3
   17570:	str	r1, [r6, #24]
   17574:	str	r3, [r2, #4]
   17578:	adds	r7, r0, r4
   1757c:	bne	17500 <flatcc_builder_append_union_vector@@Base+0x80>
   17580:	mov	r7, #0
   17584:	mov	r0, r7
   17588:	sub	sp, fp, #24
   1758c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17590:	ldr	r0, [pc, #24]	; 175b0 <flatcc_builder_append_union_vector@@Base+0x130>
   17594:	ldr	r1, [pc, #24]	; 175b4 <flatcc_builder_append_union_vector@@Base+0x134>
   17598:	ldr	r3, [pc, #24]	; 175b8 <flatcc_builder_append_union_vector@@Base+0x138>
   1759c:	movw	r2, #1692	; 0x69c
   175a0:	add	r0, pc, r0
   175a4:	add	r1, pc, r1
   175a8:	add	r3, pc, r3
   175ac:	bl	1249c <__assert_fail@plt>
   175b0:	andeq	r2, r0, r3, ror r1
   175b4:	andeq	r1, r0, r6, lsr r5
   175b8:	andeq	r2, r0, r2, lsr #5
   175bc:	ldrdeq	r2, [r0], -r8
   175c0:	andeq	r1, r0, lr, lsl #12
   175c4:	andeq	r2, r0, fp, ror #13

000175c8 <flatcc_builder_create_string@@Base>:
   175c8:	push	{r4, r5, r6, sl, fp, lr}
   175cc:	add	fp, sp, #16
   175d0:	sub	sp, sp, #80	; 0x50
   175d4:	str	r2, [fp, #-20]	; 0xffffffec
   175d8:	mvn	r5, r2
   175dc:	mov	r6, r0
   175e0:	mov	r3, #1
   175e4:	cmp	r2, #0
   175e8:	ldr	ip, [r0, #136]	; 0x88
   175ec:	sub	r0, fp, #20
   175f0:	str	r0, [sp, #12]
   175f4:	mov	r0, #4
   175f8:	str	r0, [sp, #4]
   175fc:	str	r0, [sp, #16]
   17600:	str	r3, [sp, #8]
   17604:	add	r5, ip, r5
   17608:	and	r5, r5, #3
   1760c:	add	r5, r5, #1
   17610:	beq	1762c <flatcc_builder_create_string@@Base+0x64>
   17614:	mov	r3, #2
   17618:	add	r0, r2, #4
   1761c:	str	r1, [sp, #20]
   17620:	str	r2, [sp, #24]
   17624:	str	r3, [sp, #8]
   17628:	str	r0, [sp, #4]
   1762c:	add	r1, r0, r5
   17630:	add	lr, sp, #4
   17634:	str	r1, [sp, #4]
   17638:	add	r0, lr, r3, lsl #3
   1763c:	cmp	r1, #0
   17640:	ldr	r2, [pc, #132]	; 176cc <flatcc_builder_create_string@@Base+0x104>
   17644:	ldr	r2, [pc, r2]
   17648:	str	r2, [r0, #8]
   1764c:	add	r2, r3, #1
   17650:	str	r5, [r0, #12]
   17654:	str	r2, [sp, #8]
   17658:	ble	176ac <flatcc_builder_create_string@@Base+0xe4>
   1765c:	ldr	r0, [r6, #36]	; 0x24
   17660:	ldr	r4, [r6, #44]	; 0x2c
   17664:	sub	r5, ip, r1
   17668:	str	r1, [sp]
   1766c:	add	r1, lr, #8
   17670:	mov	r3, r5
   17674:	blx	r4
   17678:	cmp	r0, #0
   1767c:	streq	r5, [r6, #136]	; 0x88
   17680:	moveq	r0, r5
   17684:	subeq	sp, fp, #16
   17688:	popeq	{r4, r5, r6, sl, fp, pc}
   1768c:	ldr	r0, [pc, #72]	; 176dc <flatcc_builder_create_string@@Base+0x114>
   17690:	ldr	r1, [pc, #72]	; 176e0 <flatcc_builder_create_string@@Base+0x118>
   17694:	ldr	r3, [pc, #72]	; 176e4 <flatcc_builder_create_string@@Base+0x11c>
   17698:	movw	r2, #651	; 0x28b
   1769c:	add	r0, pc, r0
   176a0:	add	r1, pc, r1
   176a4:	add	r3, pc, r3
   176a8:	bl	1249c <__assert_fail@plt>
   176ac:	ldr	r0, [pc, #28]	; 176d0 <flatcc_builder_create_string@@Base+0x108>
   176b0:	ldr	r1, [pc, #28]	; 176d4 <flatcc_builder_create_string@@Base+0x10c>
   176b4:	ldr	r3, [pc, #28]	; 176d8 <flatcc_builder_create_string@@Base+0x110>
   176b8:	movw	r2, #647	; 0x287
   176bc:	add	r0, pc, r0
   176c0:	add	r1, pc, r1
   176c4:	add	r3, pc, r3
   176c8:	bl	1249c <__assert_fail@plt>
   176cc:	andeq	r2, r1, r0, lsl sl
   176d0:	ldrdeq	r2, [r0], -fp
   176d4:	andeq	r1, r0, sl, lsl r4
   176d8:	muleq	r0, r2, r4
   176dc:	strdeq	r2, [r0], -fp
   176e0:	andeq	r1, r0, sl, lsr r4
   176e4:			; <UNDEFINED> instruction: 0x000024b2

000176e8 <flatcc_builder_create_string_str@@Base>:
   176e8:	push	{r4, r5, fp, lr}
   176ec:	add	fp, sp, #8
   176f0:	mov	r5, r0
   176f4:	mov	r0, r1
   176f8:	mov	r4, r1
   176fc:	bl	12454 <strlen@plt>
   17700:	mov	r2, r0
   17704:	mov	r0, r5
   17708:	mov	r1, r4
   1770c:	pop	{r4, r5, fp, lr}
   17710:	b	175c8 <flatcc_builder_create_string@@Base>

00017714 <flatcc_builder_create_string_strn@@Base>:
   17714:	push	{r4, r5, r6, sl, fp, lr}
   17718:	add	fp, sp, #16
   1771c:	mov	r6, r0
   17720:	mov	r5, r1
   17724:	mov	r0, r1
   17728:	mov	r1, #0
   1772c:	mov	r4, r2
   17730:	bl	12478 <memchr@plt>
   17734:	cmp	r0, #0
   17738:	mov	r1, r5
   1773c:	subne	r4, r0, r5
   17740:	mov	r0, r6
   17744:	mov	r2, r4
   17748:	pop	{r4, r5, r6, sl, fp, lr}
   1774c:	b	175c8 <flatcc_builder_create_string@@Base>

00017750 <flatcc_builder_end_string@@Base>:
   17750:	push	{r4, r5, fp, lr}
   17754:	add	fp, sp, #8
   17758:	mov	r4, r0
   1775c:	ldr	r0, [r0, #32]
   17760:	ldrh	r1, [r0, #14]
   17764:	cmp	r1, #6
   17768:	bne	17810 <flatcc_builder_end_string@@Base+0xc0>
   1776c:	ldr	r2, [r0, #20]
   17770:	ldr	r0, [r4, #20]
   17774:	cmp	r2, r0
   17778:	bne	17830 <flatcc_builder_end_string@@Base+0xe0>
   1777c:	ldr	r1, [r4, #16]
   17780:	mov	r0, r4
   17784:	bl	175c8 <flatcc_builder_create_string@@Base>
   17788:	mov	r5, r0
   1778c:	cmp	r0, #0
   17790:	beq	17808 <flatcc_builder_end_string@@Base+0xb8>
   17794:	ldr	r0, [r4, #16]
   17798:	ldr	r2, [r4, #20]
   1779c:	mov	r1, #0
   177a0:	bl	1246c <memset@plt>
   177a4:	ldr	r0, [r4, #32]
   177a8:	ldr	r1, [r4, #60]	; 0x3c
   177ac:	ldr	ip, [r4, #64]	; 0x40
   177b0:	ldr	r3, [r0, #8]
   177b4:	str	r3, [r4, #20]
   177b8:	ldr	r3, [r0]
   177bc:	str	r3, [r4, #28]
   177c0:	add	r1, r1, r3
   177c4:	ldr	r2, [r0, #4]
   177c8:	str	r1, [r4, #16]
   177cc:	sub	r1, ip, r3
   177d0:	cmp	r1, r2
   177d4:	movhi	r1, r2
   177d8:	str	r1, [r4, #24]
   177dc:	ldrh	r1, [r4, #130]	; 0x82
   177e0:	ldrh	r2, [r4, #128]	; 0x80
   177e4:	cmp	r2, r1
   177e8:	strhcc	r1, [r4, #128]	; 0x80
   177ec:	ldrh	r1, [r0, #12]
   177f0:	sub	r0, r0, #36	; 0x24
   177f4:	str	r0, [r4, #32]
   177f8:	strh	r1, [r4, #130]	; 0x82
   177fc:	ldr	r0, [r4, #156]	; 0x9c
   17800:	sub	r0, r0, #1
   17804:	str	r0, [r4, #156]	; 0x9c
   17808:	mov	r0, r5
   1780c:	pop	{r4, r5, fp, pc}
   17810:	ldr	r0, [pc, #56]	; 17850 <flatcc_builder_end_string@@Base+0x100>
   17814:	ldr	r1, [pc, #56]	; 17854 <flatcc_builder_end_string@@Base+0x104>
   17818:	ldr	r3, [pc, #56]	; 17858 <flatcc_builder_end_string@@Base+0x108>
   1781c:	movw	r2, #1732	; 0x6c4
   17820:	add	r0, pc, r0
   17824:	add	r1, pc, r1
   17828:	add	r3, pc, r3
   1782c:	bl	1249c <__assert_fail@plt>
   17830:	ldr	r0, [pc, #36]	; 1785c <flatcc_builder_end_string@@Base+0x10c>
   17834:	ldr	r1, [pc, #36]	; 17860 <flatcc_builder_end_string@@Base+0x110>
   17838:	ldr	r3, [pc, #36]	; 17864 <flatcc_builder_end_string@@Base+0x114>
   1783c:	movw	r2, #1733	; 0x6c5
   17840:	add	r0, pc, r0
   17844:	add	r1, pc, r1
   17848:	add	r3, pc, r3
   1784c:	bl	1249c <__assert_fail@plt>
   17850:	strdeq	r1, [r0], -r6
   17854:			; <UNDEFINED> instruction: 0x000012b6
   17858:	andeq	r2, r0, r1, lsr #1
   1785c:	andeq	r2, r0, ip, asr #1
   17860:	muleq	r0, r6, r2
   17864:	andeq	r2, r0, r1, lsl #1

00017868 <flatcc_builder_string_edit@@Base>:
   17868:	ldr	r0, [r0, #16]
   1786c:	bx	lr

00017870 <flatcc_builder_string_len@@Base>:
   17870:	ldr	r0, [r0, #32]
   17874:	ldr	r0, [r0, #20]
   17878:	bx	lr

0001787c <flatcc_builder_table_edit@@Base>:
   1787c:	ldr	r2, [r0, #32]
   17880:	ldrh	r2, [r2, #14]
   17884:	cmp	r2, #3
   17888:	ldreq	r2, [r0, #16]
   1788c:	ldreq	r0, [r0, #20]
   17890:	addeq	r0, r2, r0
   17894:	subeq	r0, r0, r1
   17898:	bxeq	lr
   1789c:	push	{fp, lr}
   178a0:	mov	fp, sp
   178a4:	ldr	r0, [pc, #24]	; 178c4 <flatcc_builder_table_edit@@Base+0x48>
   178a8:	ldr	r1, [pc, #24]	; 178c8 <flatcc_builder_table_edit@@Base+0x4c>
   178ac:	ldr	r3, [pc, #24]	; 178cc <flatcc_builder_table_edit@@Base+0x50>
   178b0:	movw	r2, #1794	; 0x702
   178b4:	add	r0, pc, r0
   178b8:	add	r1, pc, r1
   178bc:	add	r3, pc, r3
   178c0:	bl	1249c <__assert_fail@plt>
   178c4:	andeq	r1, r0, r2, asr sl
   178c8:	andeq	r1, r0, r2, lsr #4
   178cc:	andeq	r2, r0, r2, lsl #2

000178d0 <flatcc_builder_table_add_copy@@Base>:
   178d0:	push	{r4, r5, r6, sl, fp, lr}
   178d4:	add	fp, sp, #16
   178d8:	mov	r4, r3
   178dc:	ldr	r3, [fp, #8]
   178e0:	mov	r5, r2
   178e4:	mov	r2, r4
   178e8:	bl	16904 <flatcc_builder_table_add@@Base>
   178ec:	mov	r6, r0
   178f0:	cmp	r0, #0
   178f4:	beq	17908 <flatcc_builder_table_add_copy@@Base+0x38>
   178f8:	mov	r0, r6
   178fc:	mov	r1, r5
   17900:	mov	r2, r4
   17904:	bl	123e8 <memcpy@plt>
   17908:	mov	r0, r6
   1790c:	pop	{r4, r5, r6, sl, fp, pc}

00017910 <flatcc_builder_push_buffer_alignment@@Base>:
   17910:	ldrh	r1, [r0, #128]	; 0x80
   17914:	mov	r2, #4
   17918:	strh	r2, [r0, #128]	; 0x80
   1791c:	mov	r0, r1
   17920:	bx	lr

00017924 <flatcc_builder_pop_buffer_alignment@@Base>:
   17924:	ldrh	r2, [r0, #128]	; 0x80
   17928:	cmp	r2, r1
   1792c:	strhcc	r1, [r0, #128]	; 0x80
   17930:	bx	lr

00017934 <flatcc_builder_get_buffer_alignment@@Base>:
   17934:	ldrh	r0, [r0, #128]	; 0x80
   17938:	bx	lr

0001793c <flatcc_builder_set_vtable_clustering@@Base>:
   1793c:	clz	r1, r1
   17940:	lsr	r1, r1, #5
   17944:	str	r1, [r0, #180]	; 0xb4
   17948:	bx	lr

0001794c <flatcc_builder_set_block_align@@Base>:
   1794c:	strh	r1, [r0, #132]	; 0x84
   17950:	bx	lr

00017954 <flatcc_builder_get_level@@Base>:
   17954:	ldr	r0, [r0, #156]	; 0x9c
   17958:	bx	lr

0001795c <flatcc_builder_set_max_level@@Base>:
   1795c:	str	r1, [r0, #176]	; 0xb0
   17960:	ldr	r2, [r0, #160]	; 0xa0
   17964:	cmp	r2, r1
   17968:	strlt	r1, [r0, #160]	; 0xa0
   1796c:	bx	lr

00017970 <flatcc_builder_get_buffer_size@@Base>:
   17970:	ldr	r1, [r0, #136]	; 0x88
   17974:	ldr	r0, [r0, #140]	; 0x8c
   17978:	sub	r0, r0, r1
   1797c:	bx	lr

00017980 <flatcc_builder_get_buffer_start@@Base>:
   17980:	ldr	r0, [r0, #136]	; 0x88
   17984:	bx	lr

00017988 <flatcc_builder_get_buffer_end@@Base>:
   17988:	ldr	r0, [r0, #140]	; 0x8c
   1798c:	bx	lr

00017990 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17990:	str	r1, [r0, #172]	; 0xac
   17994:	bx	lr

00017998 <flatcc_builder_set_identifier@@Base>:
   17998:	ldr	r2, [pc, #20]	; 179b4 <flatcc_builder_set_identifier@@Base+0x1c>
   1799c:	cmp	r1, #0
   179a0:	ldr	r2, [pc, r2]
   179a4:	movne	r2, r1
   179a8:	ldr	r1, [r2]
   179ac:	str	r1, [r0, #168]	; 0xa8
   179b0:	bx	lr
   179b4:			; <UNDEFINED> instruction: 0x000126b4

000179b8 <flatcc_builder_get_type@@Base>:
   179b8:	ldr	r0, [r0, #32]
   179bc:	cmp	r0, #0
   179c0:	ldrhne	r0, [r0, #14]
   179c4:	moveq	r0, #0
   179c8:	bx	lr

000179cc <flatcc_builder_get_type_at@@Base>:
   179cc:	mov	r2, r0
   179d0:	cmp	r1, #1
   179d4:	mov	r0, #0
   179d8:	ldrge	r3, [r2, #156]	; 0x9c
   179dc:	cmpge	r3, r1
   179e0:	bge	179e8 <flatcc_builder_get_type_at@@Base+0x1c>
   179e4:	bx	lr
   179e8:	sub	r0, r1, r3
   179ec:	ldr	r1, [r2, #32]
   179f0:	add	r0, r0, r0, lsl #3
   179f4:	add	r0, r1, r0, lsl #2
   179f8:	ldrh	r0, [r0, #14]
   179fc:	bx	lr

00017a00 <flatcc_builder_get_direct_buffer@@Base>:
   17a00:	ldr	r2, [r0, #184]	; 0xb8
   17a04:	cmp	r2, #0
   17a08:	beq	17a1c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17a0c:	ldr	r2, [r0, #188]	; 0xbc
   17a10:	ldr	r3, [r0, #192]	; 0xc0
   17a14:	cmp	r2, r3
   17a18:	beq	17a34 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17a1c:	cmp	r1, #0
   17a20:	moveq	r0, #0
   17a24:	bxeq	lr
   17a28:	mov	r0, #0
   17a2c:	str	r0, [r1]
   17a30:	bx	lr
   17a34:	cmp	r1, #0
   17a38:	ldrne	r2, [r0, #212]	; 0xd4
   17a3c:	strne	r2, [r1]
   17a40:	ldr	r0, [r0, #196]	; 0xc4
   17a44:	bx	lr

00017a48 <flatcc_builder_copy_buffer@@Base>:
   17a48:	push	{fp, lr}
   17a4c:	mov	fp, sp
   17a50:	ldr	r3, [r0, #184]	; 0xb8
   17a54:	cmp	r3, #0
   17a58:	beq	17a8c <flatcc_builder_copy_buffer@@Base+0x44>
   17a5c:	add	r0, r0, #188	; 0xbc
   17a60:	bl	18198 <flatcc_emitter_copy_buffer@@Base>
   17a64:	cmp	r0, #0
   17a68:	popne	{fp, pc}
   17a6c:	ldr	r0, [pc, #32]	; 17a94 <flatcc_builder_copy_buffer@@Base+0x4c>
   17a70:	ldr	r1, [pc, #32]	; 17a98 <flatcc_builder_copy_buffer@@Base+0x50>
   17a74:	ldr	r3, [pc, #32]	; 17a9c <flatcc_builder_copy_buffer@@Base+0x54>
   17a78:	movw	r2, #1926	; 0x786
   17a7c:	add	r0, pc, r0
   17a80:	add	r1, pc, r1
   17a84:	add	r3, pc, r3
   17a88:	bl	1249c <__assert_fail@plt>
   17a8c:	mov	r0, #0
   17a90:	pop	{fp, pc}
   17a94:	andeq	r0, r0, ip, lsl r9
   17a98:	andeq	r1, r0, sl, asr r0
   17a9c:	andeq	r1, r0, r5, asr #31

00017aa0 <flatcc_builder_finalize_buffer@@Base>:
   17aa0:	push	{r4, r5, r6, sl, fp, lr}
   17aa4:	add	fp, sp, #16
   17aa8:	mov	r5, r0
   17aac:	ldr	r0, [r0, #136]	; 0x88
   17ab0:	cmp	r1, #0
   17ab4:	ldr	r2, [r5, #140]	; 0x8c
   17ab8:	sub	r4, r2, r0
   17abc:	mov	r0, r4
   17ac0:	strne	r4, [r1]
   17ac4:	bl	12430 <malloc@plt>
   17ac8:	cmp	r0, #0
   17acc:	beq	17b1c <flatcc_builder_finalize_buffer@@Base+0x7c>
   17ad0:	mov	r6, r0
   17ad4:	ldr	r0, [r5, #184]	; 0xb8
   17ad8:	cmp	r0, #0
   17adc:	beq	17b3c <flatcc_builder_finalize_buffer@@Base+0x9c>
   17ae0:	add	r0, r5, #188	; 0xbc
   17ae4:	mov	r1, r6
   17ae8:	mov	r2, r4
   17aec:	bl	18198 <flatcc_emitter_copy_buffer@@Base>
   17af0:	cmp	r0, #0
   17af4:	movne	r0, r6
   17af8:	popne	{r4, r5, r6, sl, fp, pc}
   17afc:	ldr	r0, [pc, #88]	; 17b5c <flatcc_builder_finalize_buffer@@Base+0xbc>
   17b00:	ldr	r1, [pc, #88]	; 17b60 <flatcc_builder_finalize_buffer@@Base+0xc0>
   17b04:	ldr	r3, [pc, #88]	; 17b64 <flatcc_builder_finalize_buffer@@Base+0xc4>
   17b08:	movw	r2, #1926	; 0x786
   17b0c:	add	r0, pc, r0
   17b10:	add	r1, pc, r1
   17b14:	add	r3, pc, r3
   17b18:	bl	1249c <__assert_fail@plt>
   17b1c:	ldr	r0, [pc, #80]	; 17b74 <flatcc_builder_finalize_buffer@@Base+0xd4>
   17b20:	ldr	r1, [pc, #80]	; 17b78 <flatcc_builder_finalize_buffer@@Base+0xd8>
   17b24:	ldr	r3, [pc, #80]	; 17b7c <flatcc_builder_finalize_buffer@@Base+0xdc>
   17b28:	movw	r2, #1944	; 0x798
   17b2c:	add	r0, pc, r0
   17b30:	add	r1, pc, r1
   17b34:	add	r3, pc, r3
   17b38:	bl	1249c <__assert_fail@plt>
   17b3c:	ldr	r0, [pc, #36]	; 17b68 <flatcc_builder_finalize_buffer@@Base+0xc8>
   17b40:	ldr	r1, [pc, #36]	; 17b6c <flatcc_builder_finalize_buffer@@Base+0xcc>
   17b44:	ldr	r3, [pc, #36]	; 17b70 <flatcc_builder_finalize_buffer@@Base+0xd0>
   17b48:	movw	r2, #1948	; 0x79c
   17b4c:	add	r0, pc, r0
   17b50:	add	r1, pc, r1
   17b54:	add	r3, pc, r3
   17b58:	bl	1249c <__assert_fail@plt>
   17b5c:	andeq	r0, r0, ip, lsl #17
   17b60:	andeq	r0, r0, sl, asr #31
   17b64:	andeq	r1, r0, r5, lsr pc
   17b68:	andeq	r2, r0, fp, asr #2
   17b6c:	andeq	r0, r0, sl, lsl #31
   17b70:	andeq	r1, r0, sl, lsr pc
   17b74:	andeq	r2, r0, fp, ror #2
   17b78:	andeq	r0, r0, sl, lsr #31
   17b7c:	andeq	r1, r0, sl, asr pc

00017b80 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17b80:	push	{r4, r5, r6, r7, fp, lr}
   17b84:	add	fp, sp, #16
   17b88:	sub	sp, sp, #8
   17b8c:	mov	r5, r0
   17b90:	mov	r4, r1
   17b94:	ldr	r0, [r0, #136]	; 0x88
   17b98:	ldr	r1, [r5, #140]	; 0x8c
   17b9c:	cmp	r4, #0
   17ba0:	sub	r0, r1, r0
   17ba4:	mov	r1, #0
   17ba8:	strne	r0, [r4]
   17bac:	ldrh	r2, [r5, #128]	; 0x80
   17bb0:	str	r1, [sp, #4]
   17bb4:	add	r0, r0, r2
   17bb8:	cmp	r2, #4
   17bbc:	mov	r1, r2
   17bc0:	rsb	r2, r2, #0
   17bc4:	sub	r0, r0, #1
   17bc8:	movls	r1, #4
   17bcc:	and	r7, r0, r2
   17bd0:	add	r0, sp, #4
   17bd4:	mov	r2, r7
   17bd8:	bl	12460 <posix_memalign@plt>
   17bdc:	ldr	r6, [sp, #4]
   17be0:	cmp	r0, #0
   17be4:	cmpne	r6, #0
   17be8:	bne	17c38 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17bec:	cmp	r6, #0
   17bf0:	beq	17c40 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   17bf4:	ldr	r0, [r5, #184]	; 0xb8
   17bf8:	cmp	r0, #0
   17bfc:	beq	17c38 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17c00:	add	r0, r5, #188	; 0xbc
   17c04:	mov	r1, r6
   17c08:	mov	r2, r7
   17c0c:	bl	18198 <flatcc_emitter_copy_buffer@@Base>
   17c10:	cmp	r0, #0
   17c14:	bne	17c4c <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   17c18:	ldr	r0, [pc, #56]	; 17c58 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   17c1c:	ldr	r1, [pc, #56]	; 17c5c <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   17c20:	ldr	r3, [pc, #56]	; 17c60 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   17c24:	movw	r2, #1926	; 0x786
   17c28:	add	r0, pc, r0
   17c2c:	add	r1, pc, r1
   17c30:	add	r3, pc, r3
   17c34:	bl	1249c <__assert_fail@plt>
   17c38:	mov	r0, r6
   17c3c:	bl	123dc <free@plt>
   17c40:	mov	r6, #0
   17c44:	cmp	r4, #0
   17c48:	strne	r6, [r4]
   17c4c:	mov	r0, r6
   17c50:	sub	sp, fp, #16
   17c54:	pop	{r4, r5, r6, r7, fp, pc}
   17c58:	andeq	r0, r0, r0, ror r7
   17c5c:	andeq	r0, r0, lr, lsr #29
   17c60:	andeq	r1, r0, r9, lsl lr

00017c64 <flatcc_builder_aligned_alloc@@Base>:
   17c64:	push	{fp, lr}
   17c68:	mov	fp, sp
   17c6c:	sub	sp, sp, #8
   17c70:	mov	r2, r1
   17c74:	mov	r1, r0
   17c78:	mov	r0, #0
   17c7c:	cmp	r1, #4
   17c80:	str	r0, [sp, #4]
   17c84:	add	r0, sp, #4
   17c88:	movls	r1, #4
   17c8c:	bl	12460 <posix_memalign@plt>
   17c90:	mov	r1, r0
   17c94:	ldr	r0, [sp, #4]
   17c98:	cmp	r1, #0
   17c9c:	cmpne	r0, #0
   17ca0:	bne	17cac <flatcc_builder_aligned_alloc@@Base+0x48>
   17ca4:	mov	sp, fp
   17ca8:	pop	{fp, pc}
   17cac:	bl	123dc <free@plt>
   17cb0:	mov	r0, #0
   17cb4:	str	r0, [sp, #4]
   17cb8:	mov	sp, fp
   17cbc:	pop	{fp, pc}

00017cc0 <flatcc_builder_aligned_free@@Base>:
   17cc0:	b	123dc <free@plt>

00017cc4 <flatcc_builder_get_emit_context@@Base>:
   17cc4:	ldr	r0, [r0, #36]	; 0x24
   17cc8:	bx	lr

00017ccc <flatcc_emitter_recycle_page@@Base>:
   17ccc:	ldr	r3, [r0]
   17cd0:	mov	r2, r0
   17cd4:	mvn	r0, #0
   17cd8:	cmp	r3, r1
   17cdc:	ldrne	r2, [r2, #4]
   17ce0:	cmpne	r2, r1
   17ce4:	bne	17cec <flatcc_emitter_recycle_page@@Base+0x20>
   17ce8:	bx	lr
   17cec:	ldr	r0, [r1, #2944]	; 0xb80
   17cf0:	ldr	r2, [r1, #2948]	; 0xb84
   17cf4:	str	r2, [r0, #2948]	; 0xb84
   17cf8:	ldr	r2, [r1, #2948]	; 0xb84
   17cfc:	str	r0, [r2, #2944]	; 0xb80
   17d00:	ldr	r0, [r3, #2948]	; 0xb84
   17d04:	str	r3, [r1, #2944]	; 0xb80
   17d08:	str	r0, [r1, #2948]	; 0xb84
   17d0c:	str	r1, [r0, #2944]	; 0xb80
   17d10:	ldr	r0, [r1, #2944]	; 0xb80
   17d14:	str	r1, [r0, #2948]	; 0xb84
   17d18:	mov	r0, #0
   17d1c:	bx	lr

00017d20 <flatcc_emitter_reset@@Base>:
   17d20:	push	{r4, sl, fp, lr}
   17d24:	add	fp, sp, #8
   17d28:	ldr	r1, [r0]
   17d2c:	cmp	r1, #0
   17d30:	beq	17de8 <flatcc_emitter_reset@@Base+0xc8>
   17d34:	mov	r4, r0
   17d38:	add	r2, r1, #1472	; 0x5c0
   17d3c:	mov	r0, #1472	; 0x5c0
   17d40:	mov	r3, #0
   17d44:	stmib	r4, {r1, r2}
   17d48:	str	r0, [r4, #12]
   17d4c:	str	r2, [r4, #16]
   17d50:	str	r0, [r4, #20]
   17d54:	movw	r0, #64064	; 0xfa40
   17d58:	movt	r0, #65535	; 0xffff
   17d5c:	str	r0, [r1, #2952]	; 0xb88
   17d60:	ldr	r2, [r4, #32]
   17d64:	ldr	r0, [r4, #24]
   17d68:	cmp	r2, #0
   17d6c:	moveq	r2, r0
   17d70:	streq	r0, [r4, #32]
   17d74:	str	r3, [r4, #24]
   17d78:	add	r2, r2, r2, lsl #1
   17d7c:	lsr	r2, r2, #2
   17d80:	add	r0, r2, r0, lsr #2
   17d84:	str	r0, [r4, #32]
   17d88:	ldr	r2, [r4, #28]
   17d8c:	cmp	r2, r0, lsl #1
   17d90:	bls	17de8 <flatcc_emitter_reset@@Base+0xc8>
   17d94:	mov	r2, r1
   17d98:	ldr	r0, [r2, #2944]!	; 0xb80
   17d9c:	cmp	r0, r1
   17da0:	beq	17de8 <flatcc_emitter_reset@@Base+0xc8>
   17da4:	ldr	r3, [r0, #2944]	; 0xb80
   17da8:	str	r3, [r2]
   17dac:	ldr	r2, [r0, #2944]	; 0xb80
   17db0:	str	r1, [r2, #2948]	; 0xb84
   17db4:	bl	123dc <free@plt>
   17db8:	ldr	r0, [r4, #28]
   17dbc:	ldr	r1, [r4, #32]
   17dc0:	sub	r0, r0, #2944	; 0xb80
   17dc4:	cmp	r0, r1, lsl #1
   17dc8:	str	r0, [r4, #28]
   17dcc:	popls	{r4, sl, fp, pc}
   17dd0:	ldr	r1, [r4, #4]
   17dd4:	ldr	r3, [r4]
   17dd8:	mov	r2, r1
   17ddc:	ldr	r0, [r2, #2944]!	; 0xb80
   17de0:	cmp	r0, r3
   17de4:	bne	17da4 <flatcc_emitter_reset@@Base+0x84>
   17de8:	pop	{r4, sl, fp, pc}

00017dec <flatcc_emitter_clear@@Base>:
   17dec:	push	{r4, r5, r6, sl, fp, lr}
   17df0:	add	fp, sp, #16
   17df4:	ldr	r5, [r0]
   17df8:	cmp	r5, #0
   17dfc:	popeq	{r4, r5, r6, sl, fp, pc}
   17e00:	mov	r4, r0
   17e04:	ldr	r0, [r5, #2948]	; 0xb84
   17e08:	mov	r6, #0
   17e0c:	str	r6, [r0, #2944]	; 0xb80
   17e10:	b	17e20 <flatcc_emitter_clear@@Base+0x34>
   17e14:	mov	r5, r0
   17e18:	ldr	r0, [r0, #2948]	; 0xb84
   17e1c:	bl	123dc <free@plt>
   17e20:	ldr	r0, [r5, #2944]	; 0xb80
   17e24:	cmp	r0, #0
   17e28:	bne	17e14 <flatcc_emitter_clear@@Base+0x28>
   17e2c:	mov	r0, r5
   17e30:	bl	123dc <free@plt>
   17e34:	vmov.i32	q8, #0	; 0x00000000
   17e38:	add	r0, r4, #16
   17e3c:	vst1.32	{d16-d17}, [r0]
   17e40:	mov	r0, #32
   17e44:	vst1.32	{d16-d17}, [r4], r0
   17e48:	str	r6, [r4]
   17e4c:	pop	{r4, r5, r6, sl, fp, pc}

00017e50 <flatcc_emitter@@Base>:
   17e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	add	fp, sp, #28
   17e58:	sub	sp, sp, #4
   17e5c:	mov	r6, r0
   17e60:	mov	r7, r1
   17e64:	ldr	r0, [r0, #24]
   17e68:	ldr	r1, [fp, #8]
   17e6c:	mov	r4, r2
   17e70:	cmn	r3, #1
   17e74:	mov	r9, r6
   17e78:	add	r0, r0, r1
   17e7c:	str	r0, [r6, #24]
   17e80:	ble	17fc0 <flatcc_emitter@@Base+0x170>
   17e84:	ldr	r0, [r9, #20]!
   17e88:	cmp	r0, r1
   17e8c:	bcs	18134 <flatcc_emitter@@Base+0x2e4>
   17e90:	mov	r8, #0
   17e94:	cmp	r4, #0
   17e98:	beq	1818c <flatcc_emitter@@Base+0x33c>
   17e9c:	movw	sl, #64064	; 0xfa40
   17ea0:	movt	sl, #65535	; 0xffff
   17ea4:	ldr	r8, [r7, #4]
   17ea8:	cmp	r8, #0
   17eac:	beq	17fb0 <flatcc_emitter@@Base+0x160>
   17eb0:	ldr	r9, [r7]
   17eb4:	cmp	r8, r0
   17eb8:	mov	r5, r8
   17ebc:	bls	17f7c <flatcc_emitter@@Base+0x12c>
   17ec0:	mov	r5, r0
   17ec4:	cmp	r5, #0
   17ec8:	bne	17f7c <flatcc_emitter@@Base+0x12c>
   17ecc:	ldr	r5, [r6, #4]
   17ed0:	cmp	r5, #0
   17ed4:	beq	17ee8 <flatcc_emitter@@Base+0x98>
   17ed8:	ldr	r0, [r5, #2944]	; 0xb80
   17edc:	ldr	r1, [r6]
   17ee0:	cmp	r0, r1
   17ee4:	bne	17f20 <flatcc_emitter@@Base+0xd0>
   17ee8:	movw	r0, #2956	; 0xb8c
   17eec:	bl	12430 <malloc@plt>
   17ef0:	cmp	r0, #0
   17ef4:	beq	18144 <flatcc_emitter@@Base+0x2f4>
   17ef8:	ldr	r1, [r6, #28]
   17efc:	cmp	r5, #0
   17f00:	add	r1, r1, #2944	; 0xb80
   17f04:	str	r1, [r6, #28]
   17f08:	beq	17f4c <flatcc_emitter@@Base+0xfc>
   17f0c:	ldr	r1, [r6]
   17f10:	str	r1, [r0, #2944]	; 0xb80
   17f14:	str	r5, [r0, #2948]	; 0xb84
   17f18:	str	r0, [r1, #2948]	; 0xb84
   17f1c:	str	r0, [r5, #2944]	; 0xb80
   17f20:	mov	r5, #2944	; 0xb80
   17f24:	str	r0, [r6, #4]
   17f28:	str	r0, [r6, #16]
   17f2c:	str	r5, [r6, #20]
   17f30:	ldr	r1, [r0, #2948]	; 0xb84
   17f34:	ldr	r1, [r1, #2952]	; 0xb88
   17f38:	add	r1, r1, #2944	; 0xb80
   17f3c:	str	r1, [r0, #2952]	; 0xb88
   17f40:	cmp	r8, r5
   17f44:	bhi	17ec4 <flatcc_emitter@@Base+0x74>
   17f48:	b	17f78 <flatcc_emitter@@Base+0x128>
   17f4c:	add	r1, r0, #1472	; 0x5c0
   17f50:	mov	r5, #1472	; 0x5c0
   17f54:	str	r0, [r6]
   17f58:	stmib	r6, {r0, r1, r5}
   17f5c:	str	r1, [r6, #16]
   17f60:	str	r5, [r6, #20]
   17f64:	str	r0, [r0, #2944]	; 0xb80
   17f68:	str	r0, [r0, #2948]	; 0xb84
   17f6c:	str	sl, [r0, #2952]	; 0xb88
   17f70:	cmp	r8, r5
   17f74:	bhi	17ec4 <flatcc_emitter@@Base+0x74>
   17f78:	mov	r5, r8
   17f7c:	ldr	r0, [r6, #16]
   17f80:	mov	r1, r9
   17f84:	mov	r2, r5
   17f88:	bl	123e8 <memcpy@plt>
   17f8c:	ldr	r0, [r6, #16]
   17f90:	ldr	r1, [r6, #20]
   17f94:	add	r9, r9, r5
   17f98:	subs	r8, r8, r5
   17f9c:	add	r2, r0, r5
   17fa0:	sub	r0, r1, r5
   17fa4:	str	r2, [r6, #16]
   17fa8:	str	r0, [r6, #20]
   17fac:	bne	17eb4 <flatcc_emitter@@Base+0x64>
   17fb0:	subs	r4, r4, #1
   17fb4:	add	r7, r7, #8
   17fb8:	bne	17ea4 <flatcc_emitter@@Base+0x54>
   17fbc:	b	1812c <flatcc_emitter@@Base+0x2dc>
   17fc0:	ldr	r0, [r9, #12]!
   17fc4:	cmp	r0, r1
   17fc8:	bcs	1814c <flatcc_emitter@@Base+0x2fc>
   17fcc:	mov	r8, #0
   17fd0:	cmp	r4, #0
   17fd4:	beq	1818c <flatcc_emitter@@Base+0x33c>
   17fd8:	add	r0, r7, r4, lsl #3
   17fdc:	movw	sl, #2952	; 0xb88
   17fe0:	ldr	r8, [r0, #-4]
   17fe4:	sub	r1, r0, #8
   17fe8:	str	r1, [sp]
   17fec:	cmp	r8, #0
   17ff0:	beq	18120 <flatcc_emitter@@Base+0x2d0>
   17ff4:	ldr	r0, [sp]
   17ff8:	ldr	r0, [r0]
   17ffc:	add	r7, r0, r8
   18000:	ldr	r1, [r9]
   18004:	cmp	r8, r1
   18008:	bls	180f0 <flatcc_emitter@@Base+0x2a0>
   1800c:	cmp	r1, #0
   18010:	mov	r5, r1
   18014:	bne	180f4 <flatcc_emitter@@Base+0x2a4>
   18018:	ldr	r5, [r6]
   1801c:	cmp	r5, #0
   18020:	beq	1804c <flatcc_emitter@@Base+0x1fc>
   18024:	ldr	r0, [r5, #2948]	; 0xb84
   18028:	ldr	r1, [r6, #4]
   1802c:	cmp	r0, r1
   18030:	beq	1804c <flatcc_emitter@@Base+0x1fc>
   18034:	ldr	r1, [r5, #2952]	; 0xb88
   18038:	mov	r2, r0
   1803c:	sub	r1, r1, #2944	; 0xb80
   18040:	str	r1, [r2, #2952]!	; 0xb88
   18044:	str	r0, [r6]
   18048:	b	1808c <flatcc_emitter@@Base+0x23c>
   1804c:	movw	r0, #2956	; 0xb8c
   18050:	bl	12430 <malloc@plt>
   18054:	cmp	r0, #0
   18058:	beq	18144 <flatcc_emitter@@Base+0x2f4>
   1805c:	ldr	r1, [r6, #28]
   18060:	cmp	r5, #0
   18064:	add	r1, r1, #2944	; 0xb80
   18068:	str	r1, [r6, #28]
   1806c:	beq	180b8 <flatcc_emitter@@Base+0x268>
   18070:	ldr	r1, [r6, #4]
   18074:	add	r2, r0, sl
   18078:	str	r5, [r0, #2944]	; 0xb80
   1807c:	str	r1, [r0, #2948]	; 0xb84
   18080:	str	r0, [r5, #2948]	; 0xb84
   18084:	str	r0, [r1, #2944]	; 0xb80
   18088:	str	r0, [r6]
   1808c:	add	r3, r0, #2944	; 0xb80
   18090:	mov	r1, #2944	; 0xb80
   18094:	str	r3, [r6, #8]
   18098:	str	r1, [r6, #12]
   1809c:	ldr	r0, [r0, #2944]	; 0xb80
   180a0:	ldr	r0, [r0, #2952]	; 0xb88
   180a4:	sub	r0, r0, #2944	; 0xb80
   180a8:	str	r0, [r2]
   180ac:	cmp	r8, r1
   180b0:	bhi	1800c <flatcc_emitter@@Base+0x1bc>
   180b4:	b	180f0 <flatcc_emitter@@Base+0x2a0>
   180b8:	add	r2, r0, #1472	; 0x5c0
   180bc:	mov	r1, #1472	; 0x5c0
   180c0:	str	r0, [r6]
   180c4:	stmib	r6, {r0, r2}
   180c8:	str	r1, [r6, #12]
   180cc:	str	r2, [r6, #16]
   180d0:	movw	r2, #64064	; 0xfa40
   180d4:	str	r1, [r6, #20]
   180d8:	str	r0, [r0, #2944]	; 0xb80
   180dc:	str	r0, [r0, #2948]	; 0xb84
   180e0:	movt	r2, #65535	; 0xffff
   180e4:	str	r2, [r0, #2952]	; 0xb88
   180e8:	cmp	r8, r1
   180ec:	bhi	1800c <flatcc_emitter@@Base+0x1bc>
   180f0:	mov	r5, r8
   180f4:	sub	r0, r1, r5
   180f8:	sub	r7, r7, r5
   180fc:	mov	r2, r5
   18100:	str	r0, [r6, #12]
   18104:	mov	r1, r7
   18108:	ldr	r0, [r6, #8]
   1810c:	sub	r0, r0, r5
   18110:	str	r0, [r6, #8]
   18114:	bl	123e8 <memcpy@plt>
   18118:	subs	r8, r8, r5
   1811c:	bne	18000 <flatcc_emitter@@Base+0x1b0>
   18120:	ldr	r0, [sp]
   18124:	subs	r4, r4, #1
   18128:	bne	17fe0 <flatcc_emitter@@Base+0x190>
   1812c:	mov	r8, #0
   18130:	b	1818c <flatcc_emitter@@Base+0x33c>
   18134:	ldr	r5, [r6, #16]
   18138:	add	r2, r5, r1
   1813c:	str	r2, [r6, #16]
   18140:	b	18158 <flatcc_emitter@@Base+0x308>
   18144:	mvn	r8, #0
   18148:	b	1818c <flatcc_emitter@@Base+0x33c>
   1814c:	ldr	r2, [r6, #8]
   18150:	sub	r5, r2, r1
   18154:	str	r5, [r6, #8]
   18158:	sub	r0, r0, r1
   1815c:	mov	r8, #0
   18160:	cmp	r4, #0
   18164:	str	r0, [r9]
   18168:	beq	1818c <flatcc_emitter@@Base+0x33c>
   1816c:	ldm	r7, {r1, r2}
   18170:	mov	r0, r5
   18174:	bl	123e8 <memcpy@plt>
   18178:	ldr	r0, [r7, #4]
   1817c:	add	r7, r7, #8
   18180:	subs	r4, r4, #1
   18184:	add	r5, r5, r0
   18188:	bne	1816c <flatcc_emitter@@Base+0x31c>
   1818c:	mov	r0, r8
   18190:	sub	sp, fp, #28
   18194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018198 <flatcc_emitter_copy_buffer@@Base>:
   18198:	push	{r4, r5, r6, sl, fp, lr}
   1819c:	add	fp, sp, #16
   181a0:	mov	r3, r2
   181a4:	ldr	r2, [r0, #24]
   181a8:	mov	r5, #0
   181ac:	cmp	r2, r3
   181b0:	bhi	18238 <flatcc_emitter_copy_buffer@@Base+0xa0>
   181b4:	mov	r4, r0
   181b8:	ldr	r0, [r0]
   181bc:	cmp	r0, #0
   181c0:	beq	18238 <flatcc_emitter_copy_buffer@@Base+0xa0>
   181c4:	mov	r6, r1
   181c8:	ldr	r1, [r4, #4]
   181cc:	cmp	r0, r1
   181d0:	beq	18240 <flatcc_emitter_copy_buffer@@Base+0xa8>
   181d4:	ldr	r0, [r4, #12]
   181d8:	ldr	r1, [r4, #8]
   181dc:	rsb	r5, r0, #2944	; 0xb80
   181e0:	mov	r0, r6
   181e4:	mov	r2, r5
   181e8:	bl	123e8 <memcpy@plt>
   181ec:	ldm	r4, {r0, r1}
   181f0:	add	r5, r6, r5
   181f4:	ldr	r6, [r0, #2944]	; 0xb80
   181f8:	cmp	r6, r1
   181fc:	beq	18224 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18200:	mov	r0, r5
   18204:	mov	r1, r6
   18208:	mov	r2, #2944	; 0xb80
   1820c:	bl	123e8 <memcpy@plt>
   18210:	ldr	r6, [r6, #2944]	; 0xb80
   18214:	ldr	r0, [r4, #4]
   18218:	add	r5, r5, #2944	; 0xb80
   1821c:	cmp	r6, r0
   18220:	bne	18200 <flatcc_emitter_copy_buffer@@Base+0x68>
   18224:	ldr	r0, [r4, #20]
   18228:	mov	r1, r6
   1822c:	rsb	r2, r0, #2944	; 0xb80
   18230:	mov	r0, r5
   18234:	bl	123e8 <memcpy@plt>
   18238:	mov	r0, r5
   1823c:	pop	{r4, r5, r6, sl, fp, pc}
   18240:	ldr	r1, [r4, #8]
   18244:	mov	r0, r6
   18248:	bl	123e8 <memcpy@plt>
   1824c:	mov	r0, r6
   18250:	pop	{r4, r5, r6, sl, fp, pc}

00018254 <__libc_csu_init@@Base>:
   18254:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18258:	mov	r7, r0
   1825c:	ldr	r6, [pc, #72]	; 182ac <__libc_csu_init@@Base+0x58>
   18260:	ldr	r5, [pc, #72]	; 182b0 <__libc_csu_init@@Base+0x5c>
   18264:	add	r6, pc, r6
   18268:	add	r5, pc, r5
   1826c:	sub	r6, r6, r5
   18270:	mov	r8, r1
   18274:	mov	r9, r2
   18278:	bl	12398 <strcmp@plt-0x20>
   1827c:	asrs	r6, r6, #2
   18280:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18284:	mov	r4, #0
   18288:	add	r4, r4, #1
   1828c:	ldr	r3, [r5], #4
   18290:	mov	r2, r9
   18294:	mov	r1, r8
   18298:	mov	r0, r7
   1829c:	blx	r3
   182a0:	cmp	r6, r4
   182a4:	bne	18288 <__libc_csu_init@@Base+0x34>
   182a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   182ac:	andeq	r1, r1, r0, lsr #25
   182b0:	muleq	r1, r8, ip

000182b4 <__libc_csu_fini@@Base>:
   182b4:	bx	lr

Disassembly of section .fini:

000182b8 <.fini>:
   182b8:	push	{r3, lr}
   182bc:	pop	{r3, pc}
