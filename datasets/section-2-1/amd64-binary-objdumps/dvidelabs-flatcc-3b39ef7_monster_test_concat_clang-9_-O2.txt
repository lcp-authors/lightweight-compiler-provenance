
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xcfe9]        # 40fff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xcfe2]        # 410008 <flatcc_builder_padding_base@@Base+0x4e28>
  403026:	jmp    QWORD PTR [rip+0xcfe4]        # 410010 <flatcc_builder_padding_base@@Base+0x4e30>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xcfe2]        # 410018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strncpy@plt>:
  403040:	jmp    QWORD PTR [rip+0xcfda]        # 410020 <strncpy@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xcfd2]        # 410028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xcfca]        # 410030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0xcfc2]        # 410038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0xcfba]        # 410040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcpy@plt>:
  403090:	jmp    QWORD PTR [rip+0xcfb2]        # 410048 <memcpy@GLIBC_2.14>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <malloc@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xcfaa]        # 410050 <malloc@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <bcmp@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xcfa2]        # 410058 <bcmp@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <realloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xcf9a]        # 410060 <realloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <posix_memalign@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xcf92]        # 410068 <posix_memalign@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

00000000004030e0 <_start@@Base>:
  4030e0:	endbr64 
  4030e4:	xor    ebp,ebp
  4030e6:	mov    r9,rdx
  4030e9:	pop    rsi
  4030ea:	mov    rdx,rsp
  4030ed:	and    rsp,0xfffffffffffffff0
  4030f1:	push   rax
  4030f2:	push   rsp
  4030f3:	mov    r8,0x40a390
  4030fa:	mov    rcx,0x40a320
  403101:	mov    rdi,0x4031d0
  403108:	call   QWORD PTR [rip+0xcee2]        # 40fff0 <__libc_start_main@GLIBC_2.2.5>
  40310e:	hlt    
  40310f:	nop
  403110:	endbr64 
  403114:	ret    
  403115:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40311f:	nop
  403120:	mov    eax,0x410080
  403125:	cmp    rax,0x410080
  40312b:	je     403140 <_start@@Base+0x60>
  40312d:	mov    eax,0x0
  403132:	test   rax,rax
  403135:	je     403140 <_start@@Base+0x60>
  403137:	mov    edi,0x410080
  40313c:	jmp    rax
  40313e:	xchg   ax,ax
  403140:	ret    
  403141:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40314c:	nop    DWORD PTR [rax+0x0]
  403150:	mov    esi,0x410080
  403155:	sub    rsi,0x410080
  40315c:	mov    rax,rsi
  40315f:	shr    rsi,0x3f
  403163:	sar    rax,0x3
  403167:	add    rsi,rax
  40316a:	sar    rsi,1
  40316d:	je     403180 <_start@@Base+0xa0>
  40316f:	mov    eax,0x0
  403174:	test   rax,rax
  403177:	je     403180 <_start@@Base+0xa0>
  403179:	mov    edi,0x410080
  40317e:	jmp    rax
  403180:	ret    
  403181:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40318c:	nop    DWORD PTR [rax+0x0]
  403190:	endbr64 
  403194:	cmp    BYTE PTR [rip+0xcee5],0x0        # 410080 <__bss_start@@Base>
  40319b:	jne    4031b0 <_start@@Base+0xd0>
  40319d:	push   rbp
  40319e:	mov    rbp,rsp
  4031a1:	call   403120 <_start@@Base+0x40>
  4031a6:	mov    BYTE PTR [rip+0xced3],0x1        # 410080 <__bss_start@@Base>
  4031ad:	pop    rbp
  4031ae:	ret    
  4031af:	nop
  4031b0:	ret    
  4031b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031bc:	nop    DWORD PTR [rax+0x0]
  4031c0:	endbr64 
  4031c4:	jmp    403150 <_start@@Base+0x70>
  4031c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031d0 <main@@Base>:
  4031d0:	push   rbp
  4031d1:	push   rbx
  4031d2:	sub    rsp,0x198
  4031d9:	lea    rbx,[rsp+0x10]
  4031de:	mov    rdi,rbx
  4031e1:	call   403d50 <flatcc_builder_init@@Base>
  4031e6:	lea    rsi,[rip+0x7e59]        # 40b046 <_IO_stdin_used@@Base+0x46>
  4031ed:	mov    rdi,rbx
  4031f0:	xor    edx,edx
  4031f2:	xor    ecx,ecx
  4031f4:	call   404ae0 <flatcc_builder_start_buffer@@Base>
  4031f9:	test   eax,eax
  4031fb:	jne    40320c <main@@Base+0x3c>
  4031fd:	lea    rdi,[rsp+0x10]
  403202:	mov    esi,0x24
  403207:	call   405d80 <flatcc_builder_start_table@@Base>
  40320c:	lea    rsi,[rip+0x7e29]        # 40b03c <_IO_stdin_used@@Base+0x3c>
  403213:	lea    rdi,[rsp+0x10]
  403218:	call   407fd0 <flatcc_builder_create_string_str@@Base>
  40321d:	test   eax,eax
  40321f:	je     403239 <main@@Base+0x69>
  403221:	mov    ebx,eax
  403223:	lea    rdi,[rsp+0x10]
  403228:	mov    esi,0x3
  40322d:	call   406fa0 <flatcc_builder_table_add_offset@@Base>
  403232:	test   rax,rax
  403235:	je     403239 <main@@Base+0x69>
  403237:	mov    DWORD PTR [rax],ebx
  403239:	lea    rsi,[rip+0x7df8]        # 40b038 <_IO_stdin_used@@Base+0x38>
  403240:	lea    rdi,[rsp+0x10]
  403245:	mov    edx,0x1
  40324a:	call   406720 <flatcc_builder_check_required@@Base>
  40324f:	test   eax,eax
  403251:	je     4032a8 <main@@Base+0xd8>
  403253:	lea    rbx,[rsp+0x10]
  403258:	mov    rdi,rbx
  40325b:	call   406790 <flatcc_builder_end_table@@Base>
  403260:	mov    rdi,rbx
  403263:	mov    esi,eax
  403265:	call   404d00 <flatcc_builder_end_buffer@@Base>
  40326a:	lea    rsi,[rsp+0x8]
  40326f:	mov    rdi,rbx
  403272:	call   408330 <flatcc_builder_get_direct_buffer@@Base>
  403277:	mov    rsi,QWORD PTR [rsp+0x8]
  40327c:	lea    rdx,[rip+0x7dc3]        # 40b046 <_IO_stdin_used@@Base+0x46>
  403283:	lea    rcx,[rip+0x46]        # 4032d0 <main@@Base+0x100>
  40328a:	mov    rdi,rax
  40328d:	call   4097f0 <flatcc_verify_table_as_root@@Base>
  403292:	mov    ebp,eax
  403294:	mov    rdi,rbx
  403297:	call   404110 <flatcc_builder_clear@@Base>
  40329c:	mov    eax,ebp
  40329e:	add    rsp,0x198
  4032a5:	pop    rbx
  4032a6:	pop    rbp
  4032a7:	ret    
  4032a8:	lea    rdi,[rip+0x7d9c]        # 40b04b <_IO_stdin_used@@Base+0x4b>
  4032af:	lea    rsi,[rip+0x7e37]        # 40b0ed <_IO_stdin_used@@Base+0xed>
  4032b6:	lea    rcx,[rip+0x7eac]        # 40b169 <_IO_stdin_used@@Base+0x169>
  4032bd:	mov    edx,0x95e
  4032c2:	call   403060 <__assert_fail@plt>
  4032c7:	nop    WORD PTR [rax+rax*1+0x0]
  4032d0:	push   rbx
  4032d1:	mov    rbx,rdi
  4032d4:	mov    edx,0x20
  4032d9:	xor    esi,esi
  4032db:	mov    ecx,0x10
  4032e0:	call   408ce0 <flatcc_verify_field@@Base>
  4032e5:	test   eax,eax
  4032e7:	jne    4036f2 <main@@Base+0x522>
  4032ed:	mov    edx,0x2
  4032f2:	mov    rdi,rbx
  4032f5:	mov    esi,0x2
  4032fa:	mov    ecx,0x2
  4032ff:	call   408ce0 <flatcc_verify_field@@Base>
  403304:	test   eax,eax
  403306:	jne    4036f2 <main@@Base+0x522>
  40330c:	mov    edx,0x2
  403311:	mov    rdi,rbx
  403314:	mov    esi,0x1
  403319:	mov    ecx,0x2
  40331e:	call   408ce0 <flatcc_verify_field@@Base>
  403323:	test   eax,eax
  403325:	jne    4036f2 <main@@Base+0x522>
  40332b:	mov    rdi,rbx
  40332e:	mov    esi,0x3
  403333:	mov    edx,0x1
  403338:	call   408d40 <flatcc_verify_string_field@@Base>
  40333d:	test   eax,eax
  40333f:	jne    4036f2 <main@@Base+0x522>
  403345:	mov    edx,0x1
  40334a:	mov    rdi,rbx
  40334d:	mov    esi,0x6
  403352:	mov    ecx,0x1
  403357:	call   408ce0 <flatcc_verify_field@@Base>
  40335c:	test   eax,eax
  40335e:	jne    4036f2 <main@@Base+0x522>
  403364:	mov    ecx,0x1
  403369:	mov    r9d,0xffffffff
  40336f:	mov    rdi,rbx
  403372:	mov    esi,0x5
  403377:	xor    edx,edx
  403379:	mov    r8d,0x1
  40337f:	call   408df0 <flatcc_verify_vector_field@@Base>
  403384:	test   eax,eax
  403386:	jne    4036f2 <main@@Base+0x522>
  40338c:	lea    rcx,[rip+0xffffffffffffff3d]        # 4032d0 <main@@Base+0x100>
  403393:	mov    rdi,rbx
  403396:	mov    esi,0xb
  40339b:	xor    edx,edx
  40339d:	call   409160 <flatcc_verify_table_vector_field@@Base>
  4033a2:	test   eax,eax
  4033a4:	jne    4036f2 <main@@Base+0x522>
  4033aa:	mov    rdi,rbx
  4033ad:	mov    esi,0xa
  4033b2:	xor    edx,edx
  4033b4:	call   408ec0 <flatcc_verify_string_vector_field@@Base>
  4033b9:	test   eax,eax
  4033bb:	jne    4036f2 <main@@Base+0x522>
  4033c1:	mov    rdi,rbx
  4033c4:	mov    esi,0x1c
  4033c9:	xor    edx,edx
  4033cb:	call   408ec0 <flatcc_verify_string_vector_field@@Base>
  4033d0:	test   eax,eax
  4033d2:	jne    4036f2 <main@@Base+0x522>
  4033d8:	mov    ecx,0x1
  4033dd:	mov    r9d,0xffffffff
  4033e3:	mov    rdi,rbx
  4033e6:	mov    esi,0x18
  4033eb:	xor    edx,edx
  4033ed:	mov    r8d,0x1
  4033f3:	call   408df0 <flatcc_verify_vector_field@@Base>
  4033f8:	test   eax,eax
  4033fa:	jne    4036f2 <main@@Base+0x522>
  403400:	mov    ecx,0x8
  403405:	mov    r9d,0x1fffffff
  40340b:	mov    rdi,rbx
  40340e:	mov    esi,0x1d
  403413:	xor    edx,edx
  403415:	mov    r8d,0x4
  40341b:	call   408df0 <flatcc_verify_vector_field@@Base>
  403420:	test   eax,eax
  403422:	jne    4036f2 <main@@Base+0x522>
  403428:	lea    rcx,[rip+0xfffffffffffffea1]        # 4032d0 <main@@Base+0x100>
  40342f:	mov    rdi,rbx
  403432:	mov    esi,0xc
  403437:	xor    edx,edx
  403439:	call   409020 <flatcc_verify_table_field@@Base>
  40343e:	test   eax,eax
  403440:	jne    4036f2 <main@@Base+0x522>
  403446:	lea    rcx,[rip+0x2c3]        # 403710 <main@@Base+0x540>
  40344d:	mov    rdi,rbx
  403450:	mov    esi,0x8
  403455:	xor    edx,edx
  403457:	call   409ed0 <flatcc_verify_union_field@@Base>
  40345c:	test   eax,eax
  40345e:	jne    4036f2 <main@@Base+0x522>
  403464:	mov    ecx,0x4
  403469:	mov    r9d,0x3fffffff
  40346f:	mov    rdi,rbx
  403472:	mov    esi,0x9
  403477:	xor    edx,edx
  403479:	mov    r8d,0x2
  40347f:	call   408df0 <flatcc_verify_vector_field@@Base>
  403484:	test   eax,eax
  403486:	jne    4036f2 <main@@Base+0x522>
  40348c:	mov    ecx,0x4
  403491:	mov    r9d,0x3fffffff
  403497:	mov    rdi,rbx
  40349a:	mov    esi,0x1f
  40349f:	xor    edx,edx
  4034a1:	mov    r8d,0x2
  4034a7:	call   408df0 <flatcc_verify_vector_field@@Base>
  4034ac:	test   eax,eax
  4034ae:	jne    4036f2 <main@@Base+0x522>
  4034b4:	lea    r9,[rip+0xfffffffffffffe15]        # 4032d0 <main@@Base+0x100>
  4034bb:	mov    rdi,rbx
  4034be:	mov    esi,0xd
  4034c3:	xor    edx,edx
  4034c5:	xor    ecx,ecx
  4034c7:	mov    r8d,0x1
  4034cd:	call   409bf0 <flatcc_verify_table_as_nested_root@@Base>
  4034d2:	test   eax,eax
  4034d4:	jne    4036f2 <main@@Base+0x522>
  4034da:	lea    rcx,[rip+0x24f]        # 403730 <main@@Base+0x560>
  4034e1:	mov    rdi,rbx
  4034e4:	mov    esi,0xe
  4034e9:	xor    edx,edx
  4034eb:	call   409020 <flatcc_verify_table_field@@Base>
  4034f0:	test   eax,eax
  4034f2:	jne    4036f2 <main@@Base+0x522>
  4034f8:	mov    edx,0x1
  4034fd:	mov    rdi,rbx
  403500:	mov    esi,0xf
  403505:	mov    ecx,0x1
  40350a:	call   408ce0 <flatcc_verify_field@@Base>
  40350f:	test   eax,eax
  403511:	jne    4036f2 <main@@Base+0x522>
  403517:	mov    edx,0x4
  40351c:	mov    rdi,rbx
  40351f:	mov    esi,0x10
  403524:	mov    ecx,0x4
  403529:	call   408ce0 <flatcc_verify_field@@Base>
  40352e:	test   eax,eax
  403530:	jne    4036f2 <main@@Base+0x522>
  403536:	mov    edx,0x4
  40353b:	mov    rdi,rbx
  40353e:	mov    esi,0x11
  403543:	mov    ecx,0x4
  403548:	call   408ce0 <flatcc_verify_field@@Base>
  40354d:	test   eax,eax
  40354f:	jne    4036f2 <main@@Base+0x522>
  403555:	mov    edx,0x8
  40355a:	mov    rdi,rbx
  40355d:	mov    esi,0x12
  403562:	mov    ecx,0x8
  403567:	call   408ce0 <flatcc_verify_field@@Base>
  40356c:	test   eax,eax
  40356e:	jne    4036f2 <main@@Base+0x522>
  403574:	mov    edx,0x8
  403579:	mov    rdi,rbx
  40357c:	mov    esi,0x13
  403581:	mov    ecx,0x8
  403586:	call   408ce0 <flatcc_verify_field@@Base>
  40358b:	test   eax,eax
  40358d:	jne    4036f2 <main@@Base+0x522>
  403593:	mov    edx,0x4
  403598:	mov    rdi,rbx
  40359b:	mov    esi,0x14
  4035a0:	mov    ecx,0x4
  4035a5:	call   408ce0 <flatcc_verify_field@@Base>
  4035aa:	test   eax,eax
  4035ac:	jne    4036f2 <main@@Base+0x522>
  4035b2:	mov    edx,0x4
  4035b7:	mov    rdi,rbx
  4035ba:	mov    esi,0x15
  4035bf:	mov    ecx,0x4
  4035c4:	call   408ce0 <flatcc_verify_field@@Base>
  4035c9:	test   eax,eax
  4035cb:	jne    4036f2 <main@@Base+0x522>
  4035d1:	mov    edx,0x8
  4035d6:	mov    rdi,rbx
  4035d9:	mov    esi,0x16
  4035de:	mov    ecx,0x8
  4035e3:	call   408ce0 <flatcc_verify_field@@Base>
  4035e8:	test   eax,eax
  4035ea:	jne    4036f2 <main@@Base+0x522>
  4035f0:	mov    edx,0x8
  4035f5:	mov    rdi,rbx
  4035f8:	mov    esi,0x17
  4035fd:	mov    ecx,0x8
  403602:	call   408ce0 <flatcc_verify_field@@Base>
  403607:	test   eax,eax
  403609:	jne    4036f2 <main@@Base+0x522>
  40360f:	mov    edx,0x4
  403614:	mov    rdi,rbx
  403617:	mov    esi,0x19
  40361c:	mov    ecx,0x4
  403621:	call   408ce0 <flatcc_verify_field@@Base>
  403626:	test   eax,eax
  403628:	jne    4036f2 <main@@Base+0x522>
  40362e:	mov    edx,0x4
  403633:	mov    rdi,rbx
  403636:	mov    esi,0x1a
  40363b:	mov    ecx,0x4
  403640:	call   408ce0 <flatcc_verify_field@@Base>
  403645:	test   eax,eax
  403647:	jne    4036f2 <main@@Base+0x522>
  40364d:	mov    edx,0x4
  403652:	mov    rdi,rbx
  403655:	mov    esi,0x1b
  40365a:	mov    ecx,0x4
  40365f:	call   408ce0 <flatcc_verify_field@@Base>
  403664:	test   eax,eax
  403666:	jne    4036f2 <main@@Base+0x522>
  40366c:	mov    ecx,0x1
  403671:	mov    r9d,0xffffffff
  403677:	mov    rdi,rbx
  40367a:	mov    esi,0x1e
  40367f:	xor    edx,edx
  403681:	mov    r8d,0x1
  403687:	call   408df0 <flatcc_verify_vector_field@@Base>
  40368c:	test   eax,eax
  40368e:	jne    4036f2 <main@@Base+0x522>
  403690:	mov    ecx,0x8
  403695:	mov    r9d,0x1fffffff
  40369b:	mov    rdi,rbx
  40369e:	mov    esi,0x20
  4036a3:	xor    edx,edx
  4036a5:	mov    r8d,0x8
  4036ab:	call   408df0 <flatcc_verify_vector_field@@Base>
  4036b0:	test   eax,eax
  4036b2:	jne    4036f2 <main@@Base+0x522>
  4036b4:	mov    ecx,0x8
  4036b9:	mov    r9d,0x1fffffff
  4036bf:	mov    rdi,rbx
  4036c2:	mov    esi,0x21
  4036c7:	xor    edx,edx
  4036c9:	mov    r8d,0x8
  4036cf:	call   408df0 <flatcc_verify_vector_field@@Base>
  4036d4:	test   eax,eax
  4036d6:	jne    4036f2 <main@@Base+0x522>
  4036d8:	lea    rcx,[rip+0xa1]        # 403780 <main@@Base+0x5b0>
  4036df:	mov    rdi,rbx
  4036e2:	mov    esi,0x22
  4036e7:	xor    edx,edx
  4036e9:	call   409020 <flatcc_verify_table_field@@Base>
  4036ee:	test   eax,eax
  4036f0:	je     4036f4 <main@@Base+0x524>
  4036f2:	pop    rbx
  4036f3:	ret    
  4036f4:	lea    rcx,[rip+0x95]        # 403790 <main@@Base+0x5c0>
  4036fb:	mov    rdi,rbx
  4036fe:	mov    esi,0x23
  403703:	xor    edx,edx
  403705:	pop    rbx
  403706:	jmp    409020 <flatcc_verify_table_field@@Base>
  40370b:	nop    DWORD PTR [rax+rax*1+0x0]
  403710:	mov    al,BYTE PTR [rdi+0x10]
  403713:	dec    al
  403715:	cmp    al,0x3
  403717:	ja     40372d <main@@Base+0x55d>
  403719:	movsx  rax,al
  40371d:	lea    rcx,[rip+0xc5a4]        # 40fcc8 <flatcc_builder_padding_base@@Base+0x4ae8>
  403724:	mov    rsi,QWORD PTR [rcx+rax*8]
  403728:	jmp    409460 <flatcc_verify_union_table@@Base>
  40372d:	xor    eax,eax
  40372f:	ret    
  403730:	push   rbx
  403731:	mov    rbx,rdi
  403734:	xor    esi,esi
  403736:	xor    edx,edx
  403738:	call   408d40 <flatcc_verify_string_field@@Base>
  40373d:	test   eax,eax
  40373f:	jne    40375c <main@@Base+0x58c>
  403741:	mov    edx,0x8
  403746:	mov    rdi,rbx
  403749:	mov    esi,0x1
  40374e:	mov    ecx,0x8
  403753:	call   408ce0 <flatcc_verify_field@@Base>
  403758:	test   eax,eax
  40375a:	je     40375e <main@@Base+0x58e>
  40375c:	pop    rbx
  40375d:	ret    
  40375e:	mov    edx,0x2
  403763:	mov    rdi,rbx
  403766:	mov    esi,0x2
  40376b:	mov    ecx,0x2
  403770:	pop    rbx
  403771:	jmp    408ce0 <flatcc_verify_field@@Base>
  403776:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403780:	xor    eax,eax
  403782:	ret    
  403783:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40378d:	nop    DWORD PTR [rax]
  403790:	push   rbx
  403791:	mov    rbx,rdi
  403794:	mov    ecx,0x1
  403799:	mov    r9d,0xffffffff
  40379f:	mov    esi,0x0
  4037a4:	xor    edx,edx
  4037a6:	mov    r8d,0x1
  4037ac:	call   408df0 <flatcc_verify_vector_field@@Base>
  4037b1:	test   eax,eax
  4037b3:	jne    4037d9 <main@@Base+0x609>
  4037b5:	mov    ecx,0x1
  4037ba:	mov    r9d,0xffffffff
  4037c0:	mov    rdi,rbx
  4037c3:	mov    esi,0x1
  4037c8:	xor    edx,edx
  4037ca:	mov    r8d,0x1
  4037d0:	call   408df0 <flatcc_verify_vector_field@@Base>
  4037d5:	test   eax,eax
  4037d7:	je     4037db <main@@Base+0x60b>
  4037d9:	pop    rbx
  4037da:	ret    
  4037db:	lea    r9,[rip+0xfffffffffffffaee]        # 4032d0 <main@@Base+0x100>
  4037e2:	mov    rdi,rbx
  4037e5:	mov    esi,0x2
  4037ea:	xor    edx,edx
  4037ec:	xor    ecx,ecx
  4037ee:	mov    r8d,0x1
  4037f4:	pop    rbx
  4037f5:	jmp    409bf0 <flatcc_verify_table_as_nested_root@@Base>
  4037fa:	nop    WORD PTR [rax+rax*1+0x0]
  403800:	push   rbx
  403801:	mov    rbx,rdi
  403804:	mov    edx,0x1
  403809:	xor    esi,esi
  40380b:	mov    ecx,0x1
  403810:	call   408ce0 <flatcc_verify_field@@Base>
  403815:	test   eax,eax
  403817:	jne    40384f <main@@Base+0x67f>
  403819:	mov    edx,0x1
  40381e:	mov    rdi,rbx
  403821:	mov    esi,0x1
  403826:	mov    ecx,0x1
  40382b:	call   408ce0 <flatcc_verify_field@@Base>
  403830:	test   eax,eax
  403832:	jne    40384f <main@@Base+0x67f>
  403834:	mov    edx,0x1
  403839:	mov    rdi,rbx
  40383c:	mov    esi,0x2
  403841:	mov    ecx,0x1
  403846:	call   408ce0 <flatcc_verify_field@@Base>
  40384b:	test   eax,eax
  40384d:	je     403851 <main@@Base+0x681>
  40384f:	pop    rbx
  403850:	ret    
  403851:	mov    edx,0x1
  403856:	mov    rdi,rbx
  403859:	mov    esi,0x3
  40385e:	mov    ecx,0x1
  403863:	pop    rbx
  403864:	jmp    408ce0 <flatcc_verify_field@@Base>
  403869:	nop    DWORD PTR [rax+0x0]
  403870:	xor    eax,eax
  403872:	ret    
  403873:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40387d:	nop    DWORD PTR [rax]
  403880:	push   rbx
  403881:	mov    rbx,rdi
  403884:	lea    rcx,[rip+0x45]        # 4038d0 <main@@Base+0x700>
  40388b:	xor    esi,esi
  40388d:	xor    edx,edx
  40388f:	call   409020 <flatcc_verify_table_field@@Base>
  403894:	test   eax,eax
  403896:	jne    4038b2 <main@@Base+0x6e2>
  403898:	lea    rcx,[rip+0x81]        # 403920 <main@@Base+0x750>
  40389f:	mov    rdi,rbx
  4038a2:	mov    esi,0x1
  4038a7:	xor    edx,edx
  4038a9:	call   409020 <flatcc_verify_table_field@@Base>
  4038ae:	test   eax,eax
  4038b0:	je     4038b4 <main@@Base+0x6e4>
  4038b2:	pop    rbx
  4038b3:	ret    
  4038b4:	lea    rcx,[rip+0xfffffffffffffe55]        # 403710 <main@@Base+0x540>
  4038bb:	mov    rdi,rbx
  4038be:	mov    esi,0x3
  4038c3:	xor    edx,edx
  4038c5:	pop    rbx
  4038c6:	jmp    40a010 <flatcc_verify_union_vector_field@@Base>
  4038cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4038d0:	push   rbx
  4038d1:	mov    rbx,rdi
  4038d4:	lea    rcx,[rip+0xd5]        # 4039b0 <main@@Base+0x7e0>
  4038db:	xor    esi,esi
  4038dd:	xor    edx,edx
  4038df:	call   409020 <flatcc_verify_table_field@@Base>
  4038e4:	test   eax,eax
  4038e6:	jne    403902 <main@@Base+0x732>
  4038e8:	lea    rcx,[rip+0x1a1]        # 403a90 <main@@Base+0x8c0>
  4038ef:	mov    rdi,rbx
  4038f2:	mov    esi,0x1
  4038f7:	xor    edx,edx
  4038f9:	call   409020 <flatcc_verify_table_field@@Base>
  4038fe:	test   eax,eax
  403900:	je     403904 <main@@Base+0x734>
  403902:	pop    rbx
  403903:	ret    
  403904:	lea    rcx,[rip+0x1c5]        # 403ad0 <main@@Base+0x900>
  40390b:	mov    rdi,rbx
  40390e:	mov    esi,0x2
  403913:	xor    edx,edx
  403915:	pop    rbx
  403916:	jmp    409020 <flatcc_verify_table_field@@Base>
  40391b:	nop    DWORD PTR [rax+rax*1+0x0]
  403920:	push   rbx
  403921:	mov    rbx,rdi
  403924:	lea    rcx,[rip+0x1e5]        # 403b10 <main@@Base+0x940>
  40392b:	mov    esi,0x1
  403930:	xor    edx,edx
  403932:	call   409ed0 <flatcc_verify_union_field@@Base>
  403937:	test   eax,eax
  403939:	jne    403989 <main@@Base+0x7b9>
  40393b:	lea    rcx,[rip+0x1ce]        # 403b10 <main@@Base+0x940>
  403942:	mov    rdi,rbx
  403945:	mov    esi,0x3
  40394a:	xor    edx,edx
  40394c:	call   409ed0 <flatcc_verify_union_field@@Base>
  403951:	test   eax,eax
  403953:	jne    403989 <main@@Base+0x7b9>
  403955:	lea    rcx,[rip+0x1b4]        # 403b10 <main@@Base+0x940>
  40395c:	mov    rdi,rbx
  40395f:	mov    esi,0x5
  403964:	xor    edx,edx
  403966:	call   409ed0 <flatcc_verify_union_field@@Base>
  40396b:	test   eax,eax
  40396d:	jne    403989 <main@@Base+0x7b9>
  40396f:	lea    rcx,[rip+0x19a]        # 403b10 <main@@Base+0x940>
  403976:	mov    rdi,rbx
  403979:	mov    esi,0x7
  40397e:	xor    edx,edx
  403980:	call   409ed0 <flatcc_verify_union_field@@Base>
  403985:	test   eax,eax
  403987:	je     40398b <main@@Base+0x7bb>
  403989:	pop    rbx
  40398a:	ret    
  40398b:	lea    rcx,[rip+0x17e]        # 403b10 <main@@Base+0x940>
  403992:	mov    rdi,rbx
  403995:	mov    esi,0x9
  40399a:	xor    edx,edx
  40399c:	pop    rbx
  40399d:	jmp    40a010 <flatcc_verify_union_vector_field@@Base>
  4039a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039ac:	nop    DWORD PTR [rax+0x0]
  4039b0:	push   rbx
  4039b1:	mov    rbx,rdi
  4039b4:	xor    esi,esi
  4039b6:	xor    edx,edx
  4039b8:	call   408d40 <flatcc_verify_string_field@@Base>
  4039bd:	test   eax,eax
  4039bf:	jne    403a76 <main@@Base+0x8a6>
  4039c5:	mov    edx,0x4
  4039ca:	mov    rdi,rbx
  4039cd:	mov    esi,0x1
  4039d2:	mov    ecx,0x4
  4039d7:	call   408ce0 <flatcc_verify_field@@Base>
  4039dc:	test   eax,eax
  4039de:	jne    403a76 <main@@Base+0x8a6>
  4039e4:	mov    rdi,rbx
  4039e7:	mov    esi,0x2
  4039ec:	xor    edx,edx
  4039ee:	call   408d40 <flatcc_verify_string_field@@Base>
  4039f3:	test   eax,eax
  4039f5:	jne    403a76 <main@@Base+0x8a6>
  4039f7:	mov    edx,0x8
  4039fc:	mov    rdi,rbx
  4039ff:	mov    esi,0x3
  403a04:	mov    ecx,0x8
  403a09:	call   408ce0 <flatcc_verify_field@@Base>
  403a0e:	test   eax,eax
  403a10:	jne    403a76 <main@@Base+0x8a6>
  403a12:	mov    rdi,rbx
  403a15:	mov    esi,0x4
  403a1a:	xor    edx,edx
  403a1c:	call   408d40 <flatcc_verify_string_field@@Base>
  403a21:	test   eax,eax
  403a23:	jne    403a76 <main@@Base+0x8a6>
  403a25:	mov    edx,0x8
  403a2a:	mov    rdi,rbx
  403a2d:	mov    esi,0x5
  403a32:	mov    ecx,0x8
  403a37:	call   408ce0 <flatcc_verify_field@@Base>
  403a3c:	test   eax,eax
  403a3e:	jne    403a76 <main@@Base+0x8a6>
  403a40:	mov    edx,0x4
  403a45:	mov    rdi,rbx
  403a48:	mov    esi,0x6
  403a4d:	mov    ecx,0x4
  403a52:	call   408ce0 <flatcc_verify_field@@Base>
  403a57:	test   eax,eax
  403a59:	jne    403a76 <main@@Base+0x8a6>
  403a5b:	mov    edx,0x8
  403a60:	mov    rdi,rbx
  403a63:	mov    esi,0x7
  403a68:	mov    ecx,0x8
  403a6d:	call   408ce0 <flatcc_verify_field@@Base>
  403a72:	test   eax,eax
  403a74:	je     403a78 <main@@Base+0x8a8>
  403a76:	pop    rbx
  403a77:	ret    
  403a78:	mov    edx,0x4
  403a7d:	mov    rdi,rbx
  403a80:	mov    esi,0x8
  403a85:	mov    ecx,0x4
  403a8a:	pop    rbx
  403a8b:	jmp    408ce0 <flatcc_verify_field@@Base>
  403a90:	push   rbx
  403a91:	mov    rbx,rdi
  403a94:	mov    edx,0x8
  403a99:	xor    esi,esi
  403a9b:	mov    ecx,0x8
  403aa0:	call   408ce0 <flatcc_verify_field@@Base>
  403aa5:	test   eax,eax
  403aa7:	je     403aab <main@@Base+0x8db>
  403aa9:	pop    rbx
  403aaa:	ret    
  403aab:	mov    edx,0x4
  403ab0:	mov    rdi,rbx
  403ab3:	mov    esi,0x1
  403ab8:	mov    ecx,0x4
  403abd:	pop    rbx
  403abe:	jmp    408ce0 <flatcc_verify_field@@Base>
  403ac3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403acd:	nop    DWORD PTR [rax]
  403ad0:	push   rbx
  403ad1:	mov    rbx,rdi
  403ad4:	mov    edx,0x8
  403ad9:	xor    esi,esi
  403adb:	mov    ecx,0x8
  403ae0:	call   408ce0 <flatcc_verify_field@@Base>
  403ae5:	test   eax,eax
  403ae7:	je     403aeb <main@@Base+0x91b>
  403ae9:	pop    rbx
  403aea:	ret    
  403aeb:	mov    edx,0x4
  403af0:	mov    rdi,rbx
  403af3:	mov    esi,0x1
  403af8:	mov    ecx,0x4
  403afd:	pop    rbx
  403afe:	jmp    408ce0 <flatcc_verify_field@@Base>
  403b03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b0d:	nop    DWORD PTR [rax]
  403b10:	mov    al,BYTE PTR [rdi+0x10]
  403b13:	inc    al
  403b15:	cmp    al,0xc
  403b17:	ja     403b40 <main@@Base+0x970>
  403b19:	movzx  eax,al
  403b1c:	lea    rcx,[rip+0x74e1]        # 40b004 <_IO_stdin_used@@Base+0x4>
  403b23:	movsxd rax,DWORD PTR [rcx+rax*4]
  403b27:	add    rax,rcx
  403b2a:	jmp    rax
  403b2c:	jmp    409580 <flatcc_verify_union_string@@Base>
  403b31:	mov    esi,0x4
  403b36:	mov    edx,0x4
  403b3b:	jmp    409540 <flatcc_verify_union_struct@@Base>
  403b40:	xor    eax,eax
  403b42:	ret    
  403b43:	lea    rsi,[rip+0x16]        # 403b60 <main@@Base+0x990>
  403b4a:	jmp    409460 <flatcc_verify_union_table@@Base>
  403b4f:	mov    esi,0x2
  403b54:	mov    edx,0x2
  403b59:	jmp    409540 <flatcc_verify_union_struct@@Base>
  403b5e:	xchg   ax,ax
  403b60:	mov    edx,0x4
  403b65:	xor    esi,esi
  403b67:	mov    ecx,0x4
  403b6c:	jmp    408ce0 <flatcc_verify_field@@Base>
  403b71:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403b80 <flatcc_builder_default_alloc@@Base>:
  403b80:	push   rbp
  403b81:	push   r15
  403b83:	push   r14
  403b85:	push   r12
  403b87:	push   rbx
  403b88:	mov    rbx,rsi
  403b8b:	test   rdx,rdx
  403b8e:	je     403bb8 <flatcc_builder_default_alloc@@Base+0x38>
  403b90:	mov    r14d,ecx
  403b93:	dec    r8d
  403b96:	cmp    r8d,0x6
  403b9a:	ja     403bd6 <flatcc_builder_default_alloc@@Base+0x56>
  403b9c:	mov    eax,0x100
  403ba1:	lea    rcx,[rip+0x7618]        # 40b1c0 <_IO_stdin_used@@Base+0x1c0>
  403ba8:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403bac:	add    rsi,rcx
  403baf:	jmp    rsi
  403bb1:	mov    eax,0x120
  403bb6:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bb8:	mov    rdi,QWORD PTR [rbx]
  403bbb:	xor    r15d,r15d
  403bbe:	test   rdi,rdi
  403bc1:	je     403c4f <flatcc_builder_default_alloc@@Base+0xcf>
  403bc7:	call   403030 <free@plt>
  403bcc:	vxorps xmm0,xmm0,xmm0
  403bd0:	vmovups XMMWORD PTR [rbx],xmm0
  403bd4:	jmp    403c4f <flatcc_builder_default_alloc@@Base+0xcf>
  403bd6:	mov    eax,0x20
  403bdb:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bdd:	mov    rax,rdx
  403be0:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403be2:	mov    eax,0x40
  403be7:	nop    WORD PTR [rax+rax*1+0x0]
  403bf0:	mov    rbp,rax
  403bf3:	add    rax,rax
  403bf6:	cmp    rbp,rdx
  403bf9:	jb     403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bfb:	mov    rax,QWORD PTR [rbx+0x8]
  403bff:	xor    r15d,r15d
  403c02:	cmp    rax,rdx
  403c05:	jb     403c0f <flatcc_builder_default_alloc@@Base+0x8f>
  403c07:	shr    rax,1
  403c0a:	cmp    rax,rbp
  403c0d:	jae    403c4f <flatcc_builder_default_alloc@@Base+0xcf>
  403c0f:	mov    rdi,QWORD PTR [rbx]
  403c12:	mov    rsi,rbp
  403c15:	call   4030c0 <realloc@plt>
  403c1a:	test   rax,rax
  403c1d:	je     403c49 <flatcc_builder_default_alloc@@Base+0xc9>
  403c1f:	mov    r12,rax
  403c22:	test   r14d,r14d
  403c25:	je     403c40 <flatcc_builder_default_alloc@@Base+0xc0>
  403c27:	mov    rax,QWORD PTR [rbx+0x8]
  403c2b:	mov    rdx,rbp
  403c2e:	sub    rdx,rax
  403c31:	jbe    403c40 <flatcc_builder_default_alloc@@Base+0xc0>
  403c33:	mov    rdi,r12
  403c36:	add    rdi,rax
  403c39:	xor    esi,esi
  403c3b:	call   403070 <memset@plt>
  403c40:	mov    QWORD PTR [rbx],r12
  403c43:	mov    QWORD PTR [rbx+0x8],rbp
  403c47:	jmp    403c4f <flatcc_builder_default_alloc@@Base+0xcf>
  403c49:	mov    r15d,0xffffffff
  403c4f:	mov    eax,r15d
  403c52:	pop    rbx
  403c53:	pop    r12
  403c55:	pop    r14
  403c57:	pop    r15
  403c59:	pop    rbp
  403c5a:	ret    
  403c5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403c60 <flatcc_builder_flush_vtable_cache@@Base>:
  403c60:	push   rbx
  403c61:	cmp    QWORD PTR [rdi+0xd8],0x0
  403c69:	je     403c94 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  403c6b:	mov    rbx,rdi
  403c6e:	mov    rdi,QWORD PTR [rdi+0xa8]
  403c75:	mov    rdx,QWORD PTR [rbx+0xb0]
  403c7c:	xor    esi,esi
  403c7e:	call   403070 <memset@plt>
  403c83:	movabs rax,0x1000000000
  403c8d:	mov    QWORD PTR [rbx+0xe0],rax
  403c94:	pop    rbx
  403c95:	ret    
  403c96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403ca0 <flatcc_builder_custom_init@@Base>:
  403ca0:	vxorps xmm0,xmm0,xmm0
  403ca4:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403cac:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403cb4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403cbc:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403cc4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403ccc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403cd4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403cdc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403ce4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403ce9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403cee:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403cf3:	vmovups YMMWORD PTR [rdi],ymm0
  403cf7:	mov    QWORD PTR [rdi+0x180],0x0
  403d02:	test   rsi,rsi
  403d05:	je     403d29 <flatcc_builder_custom_init@@Base+0x89>
  403d07:	test   rcx,rcx
  403d0a:	jne    403d13 <flatcc_builder_custom_init@@Base+0x73>
  403d0c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403b80 <flatcc_builder_default_alloc@@Base>
  403d13:	mov    QWORD PTR [rdi+0x40],r8
  403d17:	mov    QWORD PTR [rdi+0x50],rcx
  403d1b:	mov    QWORD PTR [rdi+0x38],rdx
  403d1f:	mov    QWORD PTR [rdi+0x48],rsi
  403d23:	xor    eax,eax
  403d25:	vzeroupper 
  403d28:	ret    
  403d29:	mov    DWORD PTR [rdi+0x128],0x1
  403d33:	lea    rdx,[rdi+0x130]
  403d3a:	lea    rsi,[rip+0x4a6f]        # 4087b0 <flatcc_emitter@@Base>
  403d41:	test   rcx,rcx
  403d44:	je     403d0c <flatcc_builder_custom_init@@Base+0x6c>
  403d46:	jmp    403d13 <flatcc_builder_custom_init@@Base+0x73>
  403d48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403d50 <flatcc_builder_init@@Base>:
  403d50:	vxorps xmm0,xmm0,xmm0
  403d54:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403d5c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403d61:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403d66:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403d6e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403d76:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403d7e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403d86:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403d8e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403d96:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403d9e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403da3:	vmovups YMMWORD PTR [rdi],ymm0
  403da7:	mov    QWORD PTR [rdi+0x180],0x0
  403db2:	mov    DWORD PTR [rdi+0x128],0x1
  403dbc:	lea    rax,[rdi+0x130]
  403dc3:	mov    QWORD PTR [rdi+0x40],0x0
  403dcb:	lea    rcx,[rip+0xfffffffffffffdae]        # 403b80 <flatcc_builder_default_alloc@@Base>
  403dd2:	mov    QWORD PTR [rdi+0x50],rcx
  403dd6:	mov    QWORD PTR [rdi+0x38],rax
  403dda:	lea    rax,[rip+0x49cf]        # 4087b0 <flatcc_emitter@@Base>
  403de1:	mov    QWORD PTR [rdi+0x48],rax
  403de5:	xor    eax,eax
  403de7:	vzeroupper 
  403dea:	ret    
  403deb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403df0 <flatcc_builder_custom_reset@@Base>:
  403df0:	push   rbp
  403df1:	push   r15
  403df3:	push   r14
  403df5:	push   r12
  403df7:	push   rbx
  403df8:	mov    r15d,edx
  403dfb:	mov    r14d,esi
  403dfe:	mov    r12,rdi
  403e01:	lea    rbp,[rdi+0x58]
  403e05:	xor    ebx,ebx
  403e07:	jmp    403e28 <flatcc_builder_custom_reset@@Base+0x38>
  403e09:	nop    DWORD PTR [rax+0x0]
  403e10:	cmp    QWORD PTR [rbp+0x8],0x0
  403e15:	jne    403f26 <flatcc_builder_custom_reset@@Base+0x136>
  403e1b:	inc    rbx
  403e1e:	add    rbp,0x10
  403e22:	cmp    rbx,0x8
  403e26:	je     403e6f <flatcc_builder_custom_reset@@Base+0x7f>
  403e28:	mov    rdi,QWORD PTR [rbp+0x0]
  403e2c:	test   rdi,rdi
  403e2f:	je     403e10 <flatcc_builder_custom_reset@@Base+0x20>
  403e31:	test   r15d,r15d
  403e34:	je     403e62 <flatcc_builder_custom_reset@@Base+0x72>
  403e36:	cmp    rbx,0x5
  403e3a:	je     403e62 <flatcc_builder_custom_reset@@Base+0x72>
  403e3c:	mov    rdi,QWORD PTR [r12+0x40]
  403e41:	mov    edx,0x1
  403e46:	mov    rsi,rbp
  403e49:	mov    ecx,0x1
  403e4e:	mov    r8d,ebx
  403e51:	call   QWORD PTR [r12+0x50]
  403e56:	test   eax,eax
  403e58:	jne    403f16 <flatcc_builder_custom_reset@@Base+0x126>
  403e5e:	mov    rdi,QWORD PTR [rbp+0x0]
  403e62:	mov    rdx,QWORD PTR [rbp+0x8]
  403e66:	xor    esi,esi
  403e68:	call   403070 <memset@plt>
  403e6d:	jmp    403e1b <flatcc_builder_custom_reset@@Base+0x2b>
  403e6f:	mov    DWORD PTR [r12+0xe0],0x0
  403e7b:	cmp    DWORD PTR [r12+0xe4],0x0
  403e84:	je     403e92 <flatcc_builder_custom_reset@@Base+0xa2>
  403e86:	mov    DWORD PTR [r12+0xe4],0x10
  403e92:	mov    WORD PTR [r12+0xe8],0x0
  403e9d:	mov    QWORD PTR [r12+0xf0],0x0
  403ea9:	mov    QWORD PTR [r12+0x20],0x0
  403eb2:	vxorps xmm0,xmm0,xmm0
  403eb6:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403ec0:	mov    rax,QWORD PTR [r12+0x58]
  403ec5:	mov    rcx,QWORD PTR [r12+0x68]
  403eca:	mov    QWORD PTR [r12+0x18],rcx
  403ecf:	mov    rcx,QWORD PTR [r12+0x88]
  403ed7:	mov    QWORD PTR [r12],rcx
  403edb:	mov    QWORD PTR [r12+0x8],rax
  403ee0:	mov    QWORD PTR [r12+0x30],0x0
  403ee9:	test   r14d,r14d
  403eec:	je     403ef8 <flatcc_builder_custom_reset@@Base+0x108>
  403eee:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403ef8:	xor    ebx,ebx
  403efa:	cmp    DWORD PTR [r12+0x128],0x0
  403f03:	je     403f1b <flatcc_builder_custom_reset@@Base+0x12b>
  403f05:	add    r12,0x130
  403f0c:	mov    rdi,r12
  403f0f:	call   408630 <flatcc_emitter_reset@@Base>
  403f14:	jmp    403f1b <flatcc_builder_custom_reset@@Base+0x12b>
  403f16:	mov    ebx,0xffffffff
  403f1b:	mov    eax,ebx
  403f1d:	pop    rbx
  403f1e:	pop    r12
  403f20:	pop    r14
  403f22:	pop    r15
  403f24:	pop    rbp
  403f25:	ret    
  403f26:	lea    rdi,[rip+0x7523]        # 40b450 <flatcc_builder_padding_base@@Base+0x270>
  403f2d:	lea    rsi,[rip+0x752e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  403f34:	lea    rcx,[rip+0x7587]        # 40b4c2 <flatcc_builder_padding_base@@Base+0x2e2>
  403f3b:	mov    edx,0x1b2
  403f40:	call   403060 <__assert_fail@plt>
  403f45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f4f:	nop

0000000000403f50 <flatcc_builder_reset@@Base>:
  403f50:	push   rbx
  403f51:	mov    rbx,rdi
  403f54:	mov    rdi,QWORD PTR [rdi+0x58]
  403f58:	mov    rdx,QWORD PTR [rbx+0x60]
  403f5c:	test   rdi,rdi
  403f5f:	je     403f6a <flatcc_builder_reset@@Base+0x1a>
  403f61:	xor    esi,esi
  403f63:	call   403070 <memset@plt>
  403f68:	jmp    403f73 <flatcc_builder_reset@@Base+0x23>
  403f6a:	test   rdx,rdx
  403f6d:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403f73:	mov    rdi,QWORD PTR [rbx+0x68]
  403f77:	mov    rdx,QWORD PTR [rbx+0x70]
  403f7b:	test   rdi,rdi
  403f7e:	je     403f89 <flatcc_builder_reset@@Base+0x39>
  403f80:	xor    esi,esi
  403f82:	call   403070 <memset@plt>
  403f87:	jmp    403f92 <flatcc_builder_reset@@Base+0x42>
  403f89:	test   rdx,rdx
  403f8c:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403f92:	mov    rdi,QWORD PTR [rbx+0x78]
  403f96:	mov    rdx,QWORD PTR [rbx+0x80]
  403f9d:	test   rdi,rdi
  403fa0:	je     403fab <flatcc_builder_reset@@Base+0x5b>
  403fa2:	xor    esi,esi
  403fa4:	call   403070 <memset@plt>
  403fa9:	jmp    403fb4 <flatcc_builder_reset@@Base+0x64>
  403fab:	test   rdx,rdx
  403fae:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403fb4:	mov    rdi,QWORD PTR [rbx+0x88]
  403fbb:	mov    rdx,QWORD PTR [rbx+0x90]
  403fc2:	test   rdi,rdi
  403fc5:	je     403fd0 <flatcc_builder_reset@@Base+0x80>
  403fc7:	xor    esi,esi
  403fc9:	call   403070 <memset@plt>
  403fce:	jmp    403fd9 <flatcc_builder_reset@@Base+0x89>
  403fd0:	test   rdx,rdx
  403fd3:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403fd9:	mov    rdi,QWORD PTR [rbx+0x98]
  403fe0:	mov    rdx,QWORD PTR [rbx+0xa0]
  403fe7:	test   rdi,rdi
  403fea:	je     403ff5 <flatcc_builder_reset@@Base+0xa5>
  403fec:	xor    esi,esi
  403fee:	call   403070 <memset@plt>
  403ff3:	jmp    403ffe <flatcc_builder_reset@@Base+0xae>
  403ff5:	test   rdx,rdx
  403ff8:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403ffe:	mov    rdi,QWORD PTR [rbx+0xa8]
  404005:	mov    rdx,QWORD PTR [rbx+0xb0]
  40400c:	test   rdi,rdi
  40400f:	je     40401a <flatcc_builder_reset@@Base+0xca>
  404011:	xor    esi,esi
  404013:	call   403070 <memset@plt>
  404018:	jmp    404023 <flatcc_builder_reset@@Base+0xd3>
  40401a:	test   rdx,rdx
  40401d:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  404023:	mov    rdi,QWORD PTR [rbx+0xb8]
  40402a:	mov    rdx,QWORD PTR [rbx+0xc0]
  404031:	test   rdi,rdi
  404034:	je     40403f <flatcc_builder_reset@@Base+0xef>
  404036:	xor    esi,esi
  404038:	call   403070 <memset@plt>
  40403d:	jmp    404048 <flatcc_builder_reset@@Base+0xf8>
  40403f:	test   rdx,rdx
  404042:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  404048:	mov    rdi,QWORD PTR [rbx+0xc8]
  40404f:	mov    rdx,QWORD PTR [rbx+0xd0]
  404056:	test   rdi,rdi
  404059:	je     404064 <flatcc_builder_reset@@Base+0x114>
  40405b:	xor    esi,esi
  40405d:	call   403070 <memset@plt>
  404062:	jmp    40406d <flatcc_builder_reset@@Base+0x11d>
  404064:	test   rdx,rdx
  404067:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  40406d:	mov    DWORD PTR [rbx+0xe0],0x0
  404077:	cmp    DWORD PTR [rbx+0xe4],0x0
  40407e:	je     40408a <flatcc_builder_reset@@Base+0x13a>
  404080:	mov    DWORD PTR [rbx+0xe4],0x10
  40408a:	mov    WORD PTR [rbx+0xe8],0x0
  404093:	mov    QWORD PTR [rbx+0xf0],0x0
  40409e:	mov    QWORD PTR [rbx+0x20],0x0
  4040a6:	vxorps xmm0,xmm0,xmm0
  4040aa:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  4040b2:	mov    rax,QWORD PTR [rbx+0x58]
  4040b6:	mov    rcx,QWORD PTR [rbx+0x68]
  4040ba:	mov    QWORD PTR [rbx+0x18],rcx
  4040be:	mov    rcx,QWORD PTR [rbx+0x88]
  4040c5:	mov    QWORD PTR [rbx],rcx
  4040c8:	mov    QWORD PTR [rbx+0x8],rax
  4040cc:	mov    QWORD PTR [rbx+0x30],0x0
  4040d4:	cmp    DWORD PTR [rbx+0x128],0x0
  4040db:	je     4040ec <flatcc_builder_reset@@Base+0x19c>
  4040dd:	add    rbx,0x130
  4040e4:	mov    rdi,rbx
  4040e7:	call   408630 <flatcc_emitter_reset@@Base>
  4040ec:	xor    eax,eax
  4040ee:	pop    rbx
  4040ef:	ret    
  4040f0:	lea    rdi,[rip+0x7359]        # 40b450 <flatcc_builder_padding_base@@Base+0x270>
  4040f7:	lea    rsi,[rip+0x7364]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4040fe:	lea    rcx,[rip+0x73bd]        # 40b4c2 <flatcc_builder_padding_base@@Base+0x2e2>
  404105:	mov    edx,0x1b2
  40410a:	call   403060 <__assert_fail@plt>
  40410f:	nop

0000000000404110 <flatcc_builder_clear@@Base>:
  404110:	push   rbx
  404111:	mov    rbx,rdi
  404114:	lea    rsi,[rdi+0x58]
  404118:	mov    rdi,QWORD PTR [rdi+0x40]
  40411c:	xor    edx,edx
  40411e:	xor    ecx,ecx
  404120:	xor    r8d,r8d
  404123:	call   QWORD PTR [rbx+0x50]
  404126:	lea    rsi,[rbx+0x68]
  40412a:	mov    rdi,QWORD PTR [rbx+0x40]
  40412e:	xor    edx,edx
  404130:	xor    ecx,ecx
  404132:	mov    r8d,0x1
  404138:	call   QWORD PTR [rbx+0x50]
  40413b:	lea    rsi,[rbx+0x78]
  40413f:	mov    rdi,QWORD PTR [rbx+0x40]
  404143:	xor    edx,edx
  404145:	xor    ecx,ecx
  404147:	mov    r8d,0x2
  40414d:	call   QWORD PTR [rbx+0x50]
  404150:	lea    rsi,[rbx+0x88]
  404157:	mov    rdi,QWORD PTR [rbx+0x40]
  40415b:	xor    edx,edx
  40415d:	xor    ecx,ecx
  40415f:	mov    r8d,0x3
  404165:	call   QWORD PTR [rbx+0x50]
  404168:	lea    rsi,[rbx+0x98]
  40416f:	mov    rdi,QWORD PTR [rbx+0x40]
  404173:	xor    edx,edx
  404175:	xor    ecx,ecx
  404177:	mov    r8d,0x4
  40417d:	call   QWORD PTR [rbx+0x50]
  404180:	lea    rsi,[rbx+0xa8]
  404187:	mov    rdi,QWORD PTR [rbx+0x40]
  40418b:	xor    edx,edx
  40418d:	xor    ecx,ecx
  40418f:	mov    r8d,0x5
  404195:	call   QWORD PTR [rbx+0x50]
  404198:	lea    rsi,[rbx+0xb8]
  40419f:	mov    rdi,QWORD PTR [rbx+0x40]
  4041a3:	xor    edx,edx
  4041a5:	xor    ecx,ecx
  4041a7:	mov    r8d,0x6
  4041ad:	call   QWORD PTR [rbx+0x50]
  4041b0:	lea    rsi,[rbx+0xc8]
  4041b7:	mov    rdi,QWORD PTR [rbx+0x40]
  4041bb:	xor    edx,edx
  4041bd:	xor    ecx,ecx
  4041bf:	mov    r8d,0x7
  4041c5:	call   QWORD PTR [rbx+0x50]
  4041c8:	cmp    DWORD PTR [rbx+0x128],0x0
  4041cf:	je     4041dd <flatcc_builder_clear@@Base+0xcd>
  4041d1:	lea    rdi,[rbx+0x130]
  4041d8:	call   408730 <flatcc_emitter_clear@@Base>
  4041dd:	vxorps xmm0,xmm0,xmm0
  4041e1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  4041e9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  4041f1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  4041f9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404201:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404209:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404211:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404219:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404221:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404226:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40422b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404230:	vmovups YMMWORD PTR [rbx],ymm0
  404234:	mov    QWORD PTR [rbx+0x180],0x0
  40423f:	pop    rbx
  404240:	vzeroupper 
  404243:	ret    
  404244:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40424e:	xchg   ax,ax

0000000000404250 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404250:	push   r15
  404252:	push   r14
  404254:	push   r12
  404256:	push   rbx
  404257:	push   rax
  404258:	mov    r14,rsi
  40425b:	mov    r15,rdi
  40425e:	add    r14,0xf
  404262:	and    r14,0xfffffffffffffff8
  404266:	mov    rbx,QWORD PTR [rdi+0x180]
  40426d:	lea    r12,[rdi+0xc8]
  404274:	lea    rdx,[rbx+r14*1]
  404278:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40427f:	jbe    404298 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404281:	mov    rdi,QWORD PTR [r15+0x40]
  404285:	mov    rsi,r12
  404288:	xor    ecx,ecx
  40428a:	mov    r8d,0x7
  404290:	call   QWORD PTR [r15+0x50]
  404294:	test   eax,eax
  404296:	jne    4042e8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404298:	add    rbx,QWORD PTR [r12]
  40429c:	je     4042d7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40429e:	mov    rdi,rbx
  4042a1:	xor    esi,esi
  4042a3:	mov    rdx,r14
  4042a6:	call   403070 <memset@plt>
  4042ab:	mov    rax,QWORD PTR [r15+0x178]
  4042b2:	mov    QWORD PTR [rbx],rax
  4042b5:	add    rbx,0x8
  4042b9:	mov    rax,QWORD PTR [r15+0x180]
  4042c0:	lea    rcx,[rax+0x8]
  4042c4:	mov    QWORD PTR [r15+0x178],rcx
  4042cb:	add    rax,r14
  4042ce:	mov    QWORD PTR [r15+0x180],rax
  4042d5:	jmp    4042d9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  4042d7:	xor    ebx,ebx
  4042d9:	mov    rax,rbx
  4042dc:	add    rsp,0x8
  4042e0:	pop    rbx
  4042e1:	pop    r12
  4042e3:	pop    r14
  4042e5:	pop    r15
  4042e7:	ret    
  4042e8:	lea    rdi,[rip+0x8333]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4042ef:	lea    rsi,[rip+0x716c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4042f6:	lea    rcx,[rip+0x815f]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  4042fd:	mov    edx,0x134
  404302:	call   403060 <__assert_fail@plt>
  404307:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404310 <flatcc_builder_enter_user_frame@@Base>:
  404310:	push   r15
  404312:	push   r14
  404314:	push   r12
  404316:	push   rbx
  404317:	push   rax
  404318:	mov    r14,rsi
  40431b:	mov    rbx,rdi
  40431e:	add    r14,0xf
  404322:	and    r14,0xfffffffffffffff8
  404326:	mov    r15,QWORD PTR [rdi+0x180]
  40432d:	lea    r12,[rdi+0xc8]
  404334:	lea    rdx,[r15+r14*1]
  404338:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40433f:	jbe    404357 <flatcc_builder_enter_user_frame@@Base+0x47>
  404341:	mov    rdi,QWORD PTR [rbx+0x40]
  404345:	mov    rsi,r12
  404348:	xor    ecx,ecx
  40434a:	mov    r8d,0x7
  404350:	call   QWORD PTR [rbx+0x50]
  404353:	test   eax,eax
  404355:	jne    4043a0 <flatcc_builder_enter_user_frame@@Base+0x90>
  404357:	add    r15,QWORD PTR [r12]
  40435b:	je     404392 <flatcc_builder_enter_user_frame@@Base+0x82>
  40435d:	mov    rdi,r15
  404360:	xor    esi,esi
  404362:	mov    rdx,r14
  404365:	call   403070 <memset@plt>
  40436a:	mov    rax,QWORD PTR [rbx+0x178]
  404371:	mov    QWORD PTR [r15],rax
  404374:	mov    rcx,QWORD PTR [rbx+0x180]
  40437b:	lea    rax,[rcx+0x8]
  40437f:	mov    QWORD PTR [rbx+0x178],rax
  404386:	add    rcx,r14
  404389:	mov    QWORD PTR [rbx+0x180],rcx
  404390:	jmp    404394 <flatcc_builder_enter_user_frame@@Base+0x84>
  404392:	xor    eax,eax
  404394:	add    rsp,0x8
  404398:	pop    rbx
  404399:	pop    r12
  40439b:	pop    r14
  40439d:	pop    r15
  40439f:	ret    
  4043a0:	lea    rdi,[rip+0x827b]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4043a7:	lea    rsi,[rip+0x70b4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4043ae:	lea    rcx,[rip+0x80a7]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  4043b5:	mov    edx,0x134
  4043ba:	call   403060 <__assert_fail@plt>
  4043bf:	nop

00000000004043c0 <flatcc_builder_exit_user_frame@@Base>:
  4043c0:	push   rax
  4043c1:	mov    rax,QWORD PTR [rdi+0x178]
  4043c8:	test   rax,rax
  4043cb:	je     4043ef <flatcc_builder_exit_user_frame@@Base+0x2f>
  4043cd:	mov    rcx,QWORD PTR [rdi+0xc8]
  4043d4:	mov    edx,eax
  4043d6:	add    rax,0xfffffffffffffff8
  4043da:	mov    QWORD PTR [rdi+0x180],rax
  4043e1:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4043e6:	mov    QWORD PTR [rdi+0x178],rax
  4043ed:	pop    rcx
  4043ee:	ret    
  4043ef:	lea    rdi,[rip+0x710a]        # 40b500 <flatcc_builder_padding_base@@Base+0x320>
  4043f6:	lea    rsi,[rip+0x7065]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4043fd:	lea    rcx,[rip+0x7115]        # 40b519 <flatcc_builder_padding_base@@Base+0x339>
  404404:	mov    edx,0x21e
  404409:	call   403060 <__assert_fail@plt>
  40440e:	xchg   ax,ax

0000000000404410 <flatcc_builder_exit_user_frame_at@@Base>:
  404410:	push   rax
  404411:	cmp    QWORD PTR [rdi+0x178],rsi
  404418:	jb     404448 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40441a:	mov    QWORD PTR [rdi+0x178],rsi
  404421:	test   rsi,rsi
  404424:	je     404467 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404426:	mov    rax,QWORD PTR [rdi+0xc8]
  40442d:	mov    ecx,esi
  40442f:	add    rsi,0xfffffffffffffff8
  404433:	mov    QWORD PTR [rdi+0x180],rsi
  40443a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40443f:	mov    QWORD PTR [rdi+0x178],rax
  404446:	pop    rcx
  404447:	ret    
  404448:	lea    rdi,[rip+0x7104]        # 40b553 <flatcc_builder_padding_base@@Base+0x373>
  40444f:	lea    rsi,[rip+0x700c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404456:	lea    rcx,[rip+0x7115]        # 40b572 <flatcc_builder_padding_base@@Base+0x392>
  40445d:	mov    edx,0x227
  404462:	call   403060 <__assert_fail@plt>
  404467:	lea    rdi,[rip+0x7092]        # 40b500 <flatcc_builder_padding_base@@Base+0x320>
  40446e:	lea    rsi,[rip+0x6fed]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404475:	lea    rcx,[rip+0x709d]        # 40b519 <flatcc_builder_padding_base@@Base+0x339>
  40447c:	mov    edx,0x21e
  404481:	call   403060 <__assert_fail@plt>
  404486:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404490 <flatcc_builder_get_current_user_frame@@Base>:
  404490:	mov    rax,QWORD PTR [rdi+0x178]
  404497:	ret    
  404498:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004044a0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4044a0:	mov    eax,esi
  4044a2:	add    rax,QWORD PTR [rdi+0xc8]
  4044a9:	ret    
  4044aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004044b0 <flatcc_builder_embed_buffer@@Base>:
  4044b0:	push   rbp
  4044b1:	push   r15
  4044b3:	push   r14
  4044b5:	push   r12
  4044b7:	push   rbx
  4044b8:	sub    rsp,0xa0
  4044bf:	mov    ebx,r9d
  4044c2:	mov    rbp,rcx
  4044c5:	mov    r15,rdx
  4044c8:	mov    edx,esi
  4044ca:	mov    r12,rdi
  4044cd:	mov    WORD PTR [rsp+0xa],r8w
  4044d3:	xor    ecx,ecx
  4044d5:	cmp    DWORD PTR [rdi+0x100],0x0
  4044dc:	setne  cl
  4044df:	lea    rsi,[rsp+0xa]
  4044e4:	call   404650 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4044e9:	and    ebx,0x2
  4044ec:	movzx  eax,WORD PTR [rsp+0xa]
  4044f1:	mov    r14d,DWORD PTR [r12+0xf0]
  4044f9:	lea    ecx,[rbp+rbx*2+0x0]
  4044fd:	mov    edx,r14d
  404500:	sub    edx,ecx
  404502:	dec    eax
  404504:	and    eax,edx
  404506:	lea    ecx,[rax+rbp*1]
  404509:	mov    DWORD PTR [rsp+0xc],ecx
  40450d:	mov    QWORD PTR [rsp+0x10],0x0
  404516:	mov    DWORD PTR [rsp+0x18],0x0
  40451e:	cmp    DWORD PTR [r12+0x100],0x0
  404527:	je     4045f9 <flatcc_builder_embed_buffer@@Base+0x149>
  40452d:	mov    QWORD PTR [rsp+0x10],0x4
  404536:	lea    rcx,[rsp+0xc]
  40453b:	mov    QWORD PTR [rsp+0x20],rcx
  404540:	mov    QWORD PTR [rsp+0x28],0x4
  404549:	mov    DWORD PTR [rsp+0x18],0x1
  404551:	mov    r8d,0x4
  404557:	mov    edx,0x1
  40455c:	test   rbp,rbp
  40455f:	je     40457f <flatcc_builder_embed_buffer@@Base+0xcf>
  404561:	add    r8,rbp
  404564:	mov    QWORD PTR [rsp+0x10],r8
  404569:	mov    ecx,edx
  40456b:	shl    rcx,0x4
  40456f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404574:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  404579:	inc    edx
  40457b:	mov    DWORD PTR [rsp+0x18],edx
  40457f:	test   eax,eax
  404581:	je     4045aa <flatcc_builder_embed_buffer@@Base+0xfa>
  404583:	mov    eax,eax
  404585:	add    r8,rax
  404588:	mov    QWORD PTR [rsp+0x10],r8
  40458d:	mov    ecx,edx
  40458f:	shl    rcx,0x4
  404593:	lea    rsi,[rip+0x6c46]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  40459a:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40459f:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4045a4:	inc    edx
  4045a6:	mov    DWORD PTR [rsp+0x18],edx
  4045aa:	cmp    r8,0x11
  4045ae:	setb   al
  4045b1:	lea    rcx,[r8-0x10]
  4045b5:	shr    rcx,0x20
  4045b9:	sete   cl
  4045bc:	test   r8d,r8d
  4045bf:	jle    40460c <flatcc_builder_embed_buffer@@Base+0x15c>
  4045c1:	or     al,cl
  4045c3:	je     40460c <flatcc_builder_embed_buffer@@Base+0x15c>
  4045c5:	sub    r14d,r8d
  4045c8:	mov    rdi,QWORD PTR [r12+0x38]
  4045cd:	lea    rsi,[rsp+0x20]
  4045d2:	mov    ecx,r14d
  4045d5:	call   QWORD PTR [r12+0x48]
  4045da:	test   eax,eax
  4045dc:	jne    40462b <flatcc_builder_embed_buffer@@Base+0x17b>
  4045de:	mov    DWORD PTR [r12+0xf0],r14d
  4045e6:	mov    eax,r14d
  4045e9:	add    rsp,0xa0
  4045f0:	pop    rbx
  4045f1:	pop    r12
  4045f3:	pop    r14
  4045f5:	pop    r15
  4045f7:	pop    rbp
  4045f8:	ret    
  4045f9:	xor    edx,edx
  4045fb:	xor    r8d,r8d
  4045fe:	test   rbp,rbp
  404601:	jne    404561 <flatcc_builder_embed_buffer@@Base+0xb1>
  404607:	jmp    40457f <flatcc_builder_embed_buffer@@Base+0xcf>
  40460c:	lea    rdi,[rip+0x800f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404613:	lea    rsi,[rip+0x6e48]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40461a:	lea    rcx,[rip+0x7ec0]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404621:	mov    edx,0x287
  404626:	call   403060 <__assert_fail@plt>
  40462b:	lea    rdi,[rip+0x7ff0]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404632:	lea    rsi,[rip+0x6e29]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404639:	lea    rcx,[rip+0x7ea1]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404640:	mov    edx,0x28b
  404645:	call   403060 <__assert_fail@plt>
  40464a:	nop    WORD PTR [rax+rax*1+0x0]
  404650:	push   rbx
  404651:	sub    rsp,0x90
  404658:	mov    rax,rdi
  40465b:	test   dx,dx
  40465e:	jne    404671 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404660:	mov    edi,DWORD PTR [rax+0xec]
  404666:	test   di,di
  404669:	mov    edx,0x1
  40466e:	cmovne edx,edi
  404671:	movzx  ebx,WORD PTR [rsi]
  404674:	mov    edi,0x4
  404679:	cmp    bx,0x4
  40467d:	cmovae edi,ebx
  404680:	jb     40468d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404682:	cmp    di,dx
  404685:	jb     40468d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404687:	test   ecx,ecx
  404689:	jne    4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  40468b:	jmp    40469a <flatcc_builder_embed_buffer@@Base+0x1ea>
  40468d:	cmp    di,dx
  404690:	cmovb  edi,edx
  404693:	mov    WORD PTR [rsi],di
  404696:	test   ecx,ecx
  404698:	jne    4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  40469a:	mov    ebx,DWORD PTR [rax+0xf4]
  4046a0:	movzx  r8d,dx
  4046a4:	dec    r8d
  4046a7:	and    r8d,ebx
  4046aa:	je     4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  4046ac:	mov    QWORD PTR [rsp],r8
  4046b0:	lea    rcx,[rip+0x6b29]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4046b7:	mov    QWORD PTR [rsp+0x10],rcx
  4046bc:	mov    QWORD PTR [rsp+0x18],r8
  4046c1:	mov    DWORD PTR [rsp+0x8],0x1
  4046c9:	lea    ecx,[r8+rbx*1]
  4046cd:	mov    DWORD PTR [rax+0xf4],ecx
  4046d3:	test   r8d,r8d
  4046d6:	js     4046fd <flatcc_builder_embed_buffer@@Base+0x24d>
  4046d8:	mov    rdi,QWORD PTR [rax+0x38]
  4046dc:	lea    rsi,[rsp+0x10]
  4046e1:	mov    edx,0x1
  4046e6:	mov    ecx,ebx
  4046e8:	call   QWORD PTR [rax+0x48]
  4046eb:	test   eax,eax
  4046ed:	jne    40471c <flatcc_builder_embed_buffer@@Base+0x26c>
  4046ef:	cmp    ebx,0xffffffff
  4046f2:	je     40473b <flatcc_builder_embed_buffer@@Base+0x28b>
  4046f4:	add    rsp,0x90
  4046fb:	pop    rbx
  4046fc:	ret    
  4046fd:	lea    rdi,[rip+0x7f1e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404704:	lea    rsi,[rip+0x6d57]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40470b:	lea    rcx,[rip+0x7e8b]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  404712:	mov    edx,0x2a1
  404717:	call   403060 <__assert_fail@plt>
  40471c:	lea    rdi,[rip+0x7eff]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404723:	lea    rsi,[rip+0x6d38]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40472a:	lea    rcx,[rip+0x7e6c]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  404731:	mov    edx,0x2a5
  404736:	call   403060 <__assert_fail@plt>
  40473b:	lea    rdi,[rip+0x7ee0]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404742:	lea    rsi,[rip+0x6d19]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404749:	lea    rcx,[rip+0x7d4f]        # 40c49f <flatcc_builder_padding_base@@Base+0x12bf>
  404750:	mov    edx,0x2be
  404755:	call   403060 <__assert_fail@plt>
  40475a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404760 <flatcc_builder_create_buffer@@Base>:
  404760:	push   rbp
  404761:	push   r15
  404763:	push   r14
  404765:	push   r13
  404767:	push   r12
  404769:	push   rbx
  40476a:	sub    rsp,0xa8
  404771:	mov    r12d,r9d
  404774:	mov    r14d,ecx
  404777:	mov    rbp,rsi
  40477a:	mov    r13,rdi
  40477d:	mov    WORD PTR [rsp+0xa],r8w
  404783:	mov    DWORD PTR [rsp+0xc],0x0
  40478b:	mov    r15d,r9d
  40478e:	and    r15d,0x1
  404792:	lea    rsi,[rsp+0xa]
  404797:	mov    ecx,r15d
  40479a:	call   404650 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40479f:	movzx  eax,WORD PTR [rsp+0xa]
  4047a4:	cmp    WORD PTR [r13+0xe8],ax
  4047ac:	jae    4047b6 <flatcc_builder_create_buffer@@Base+0x56>
  4047ae:	mov    WORD PTR [r13+0xe8],ax
  4047b6:	movzx  edx,ax
  4047b9:	xor    eax,eax
  4047bb:	test   rbp,rbp
  4047be:	je     4047d8 <flatcc_builder_create_buffer@@Base+0x78>
  4047c0:	mov    ecx,DWORD PTR [rbp+0x0]
  4047c3:	mov    DWORD PTR [rsp+0xc],ecx
  4047c7:	xor    edi,edi
  4047c9:	test   ecx,ecx
  4047cb:	setne  dil
  4047cf:	mov    rsi,rdi
  4047d2:	shl    rsi,0x2
  4047d6:	jmp    4047dc <flatcc_builder_create_buffer@@Base+0x7c>
  4047d8:	xor    edi,edi
  4047da:	xor    esi,esi
  4047dc:	lea    ebx,[r12+r12*1]
  4047e0:	and    ebx,0x4
  4047e3:	mov    ebp,DWORD PTR [r13+0xf0]
  4047ea:	mov    ecx,ebp
  4047ec:	sub    ecx,ebx
  4047ee:	sub    ecx,esi
  4047f0:	add    ecx,0xfffffffc
  4047f3:	dec    edx
  4047f5:	mov    QWORD PTR [rsp+0x18],0x0
  4047fe:	mov    DWORD PTR [rsp+0x20],0x0
  404806:	test   r12b,0x3
  40480a:	je     40483d <flatcc_builder_create_buffer@@Base+0xdd>
  40480c:	mov    QWORD PTR [rsp+0x18],0x4
  404815:	lea    rax,[rsp+0x10]
  40481a:	mov    QWORD PTR [rsp+0x28],rax
  40481f:	mov    QWORD PTR [rsp+0x30],0x4
  404828:	mov    DWORD PTR [rsp+0x20],0x1
  404830:	mov    r8d,0x8
  404836:	mov    eax,0x1
  40483b:	jmp    404843 <flatcc_builder_create_buffer@@Base+0xe3>
  40483d:	mov    r8d,0x4
  404843:	and    ecx,edx
  404845:	mov    QWORD PTR [rsp+0x18],r8
  40484a:	mov    edx,eax
  40484c:	shl    rdx,0x4
  404850:	lea    rbx,[rsp+0x14]
  404855:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  40485a:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404863:	lea    edx,[rax+0x1]
  404866:	mov    DWORD PTR [rsp+0x20],edx
  40486a:	test   dil,dil
  40486d:	je     404895 <flatcc_builder_create_buffer@@Base+0x135>
  40486f:	add    r8,rsi
  404872:	mov    QWORD PTR [rsp+0x18],r8
  404877:	mov    edx,edx
  404879:	shl    rdx,0x4
  40487d:	lea    rdi,[rsp+0xc]
  404882:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404887:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40488c:	or     eax,0x2
  40488f:	mov    DWORD PTR [rsp+0x20],eax
  404893:	mov    edx,eax
  404895:	test   ecx,ecx
  404897:	je     4048c0 <flatcc_builder_create_buffer@@Base+0x160>
  404899:	mov    eax,ecx
  40489b:	add    r8,rax
  40489e:	mov    QWORD PTR [rsp+0x18],r8
  4048a3:	mov    ecx,edx
  4048a5:	shl    rcx,0x4
  4048a9:	lea    rsi,[rip+0x6930]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4048b0:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  4048b5:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  4048ba:	inc    edx
  4048bc:	mov    DWORD PTR [rsp+0x20],edx
  4048c0:	xor    eax,eax
  4048c2:	test   r12b,0x3
  4048c6:	setne  al
  4048c9:	sub    ebp,r8d
  4048cc:	lea    eax,[rbp+rax*4+0x0]
  4048d0:	mov    ecx,r15d
  4048d3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  4048db:	sub    ecx,eax
  4048dd:	mov    DWORD PTR [rsp+0x10],ecx
  4048e1:	sub    r14d,eax
  4048e4:	mov    DWORD PTR [rsp+0x14],r14d
  4048e9:	cmp    r8,0x11
  4048ed:	setb   al
  4048f0:	lea    rcx,[r8-0x10]
  4048f4:	shr    rcx,0x20
  4048f8:	sete   cl
  4048fb:	test   r8d,r8d
  4048fe:	jle    404936 <flatcc_builder_create_buffer@@Base+0x1d6>
  404900:	or     al,cl
  404902:	je     404936 <flatcc_builder_create_buffer@@Base+0x1d6>
  404904:	mov    rdi,QWORD PTR [r13+0x38]
  404908:	lea    rsi,[rsp+0x28]
  40490d:	mov    ecx,ebp
  40490f:	call   QWORD PTR [r13+0x48]
  404913:	test   eax,eax
  404915:	jne    404955 <flatcc_builder_create_buffer@@Base+0x1f5>
  404917:	mov    DWORD PTR [r13+0xf0],ebp
  40491e:	test   ebp,ebp
  404920:	je     404974 <flatcc_builder_create_buffer@@Base+0x214>
  404922:	mov    eax,ebp
  404924:	add    rsp,0xa8
  40492b:	pop    rbx
  40492c:	pop    r12
  40492e:	pop    r13
  404930:	pop    r14
  404932:	pop    r15
  404934:	pop    rbp
  404935:	ret    
  404936:	lea    rdi,[rip+0x7ce5]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40493d:	lea    rsi,[rip+0x6b1e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404944:	lea    rcx,[rip+0x7b96]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  40494b:	mov    edx,0x287
  404950:	call   403060 <__assert_fail@plt>
  404955:	lea    rdi,[rip+0x7cc6]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40495c:	lea    rsi,[rip+0x6aff]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404963:	lea    rcx,[rip+0x7b77]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  40496a:	mov    edx,0x28b
  40496f:	call   403060 <__assert_fail@plt>
  404974:	lea    rdi,[rip+0x7ca7]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40497b:	lea    rsi,[rip+0x6ae0]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404982:	lea    rcx,[rip+0x6c2e]        # 40b5b7 <flatcc_builder_padding_base@@Base+0x3d7>
  404989:	mov    edx,0x304
  40498e:	call   403060 <__assert_fail@plt>
  404993:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40499d:	nop    DWORD PTR [rax]

00000000004049a0 <flatcc_builder_create_struct@@Base>:
  4049a0:	push   rbp
  4049a1:	push   rbx
  4049a2:	sub    rsp,0x98
  4049a9:	test   cx,cx
  4049ac:	je     404aa2 <flatcc_builder_create_struct@@Base+0x102>
  4049b2:	mov    r8,rdx
  4049b5:	mov    rbx,rdi
  4049b8:	cmp    WORD PTR [rdi+0xe8],cx
  4049bf:	jae    4049c8 <flatcc_builder_create_struct@@Base+0x28>
  4049c1:	mov    WORD PTR [rbx+0xe8],cx
  4049c8:	mov    ebp,DWORD PTR [rbx+0xf0]
  4049ce:	mov    edx,ebp
  4049d0:	sub    edx,r8d
  4049d3:	movzx  eax,cx
  4049d6:	dec    eax
  4049d8:	and    eax,edx
  4049da:	mov    QWORD PTR [rsp+0x8],0x0
  4049e3:	mov    DWORD PTR [rsp+0x10],0x0
  4049eb:	test   r8,r8
  4049ee:	je     404a7b <flatcc_builder_create_struct@@Base+0xdb>
  4049f4:	mov    QWORD PTR [rsp+0x8],r8
  4049f9:	mov    QWORD PTR [rsp+0x18],rsi
  4049fe:	mov    QWORD PTR [rsp+0x20],r8
  404a03:	mov    DWORD PTR [rsp+0x10],0x1
  404a0b:	mov    edx,0x1
  404a10:	test   eax,eax
  404a12:	je     404a39 <flatcc_builder_create_struct@@Base+0x99>
  404a14:	add    r8,rax
  404a17:	mov    QWORD PTR [rsp+0x8],r8
  404a1c:	mov    ecx,edx
  404a1e:	shl    rcx,0x4
  404a22:	lea    rsi,[rip+0x67b7]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  404a29:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  404a2e:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  404a33:	inc    edx
  404a35:	mov    DWORD PTR [rsp+0x10],edx
  404a39:	cmp    r8,0x11
  404a3d:	setb   al
  404a40:	lea    rcx,[r8-0x10]
  404a44:	shr    rcx,0x20
  404a48:	sete   cl
  404a4b:	test   r8d,r8d
  404a4e:	jle    404a83 <flatcc_builder_create_struct@@Base+0xe3>
  404a50:	or     al,cl
  404a52:	je     404a83 <flatcc_builder_create_struct@@Base+0xe3>
  404a54:	sub    ebp,r8d
  404a57:	mov    rdi,QWORD PTR [rbx+0x38]
  404a5b:	lea    rsi,[rsp+0x18]
  404a60:	mov    ecx,ebp
  404a62:	call   QWORD PTR [rbx+0x48]
  404a65:	test   eax,eax
  404a67:	jne    404ac1 <flatcc_builder_create_struct@@Base+0x121>
  404a69:	mov    DWORD PTR [rbx+0xf0],ebp
  404a6f:	mov    eax,ebp
  404a71:	add    rsp,0x98
  404a78:	pop    rbx
  404a79:	pop    rbp
  404a7a:	ret    
  404a7b:	xor    edx,edx
  404a7d:	test   eax,eax
  404a7f:	jne    404a14 <flatcc_builder_create_struct@@Base+0x74>
  404a81:	jmp    404a39 <flatcc_builder_create_struct@@Base+0x99>
  404a83:	lea    rdi,[rip+0x7b98]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404a8a:	lea    rsi,[rip+0x69d1]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404a91:	lea    rcx,[rip+0x7a49]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404a98:	mov    edx,0x287
  404a9d:	call   403060 <__assert_fail@plt>
  404aa2:	lea    rdi,[rip+0x6b91]        # 40b63a <flatcc_builder_padding_base@@Base+0x45a>
  404aa9:	lea    rsi,[rip+0x69b2]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404ab0:	lea    rcx,[rip+0x6b8e]        # 40b645 <flatcc_builder_padding_base@@Base+0x465>
  404ab7:	mov    edx,0x30f
  404abc:	call   403060 <__assert_fail@plt>
  404ac1:	lea    rdi,[rip+0x7b5a]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404ac8:	lea    rsi,[rip+0x6993]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404acf:	lea    rcx,[rip+0x7a0b]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404ad6:	mov    edx,0x28b
  404adb:	call   403060 <__assert_fail@plt>

0000000000404ae0 <flatcc_builder_start_buffer@@Base>:
  404ae0:	push   rbp
  404ae1:	push   r15
  404ae3:	push   r14
  404ae5:	push   rbx
  404ae6:	push   rax
  404ae7:	mov    r15d,ecx
  404aea:	mov    ebp,edx
  404aec:	mov    r14,rsi
  404aef:	mov    rbx,rdi
  404af2:	movzx  esi,WORD PTR [rdi+0xe8]
  404af9:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  404afe:	mov    ecx,eax
  404b00:	mov    eax,0xffffffff
  404b05:	test   ecx,ecx
  404b07:	jne    404bac <flatcc_builder_start_buffer@@Base+0xcc>
  404b0d:	mov    WORD PTR [rbx+0xe8],0x1
  404b16:	movzx  eax,WORD PTR [rbx+0xec]
  404b1d:	mov    rcx,QWORD PTR [rbx+0x30]
  404b21:	mov    WORD PTR [rcx+0x22],ax
  404b25:	mov    WORD PTR [rbx+0xec],bp
  404b2c:	movzx  eax,WORD PTR [rbx+0x10c]
  404b33:	mov    rcx,QWORD PTR [rbx+0x30]
  404b37:	mov    WORD PTR [rcx+0x20],ax
  404b3b:	mov    WORD PTR [rbx+0x10c],r15w
  404b43:	mov    eax,DWORD PTR [rbx+0xf8]
  404b49:	mov    rcx,QWORD PTR [rbx+0x30]
  404b4d:	mov    DWORD PTR [rcx+0x14],eax
  404b50:	mov    eax,DWORD PTR [rbx+0x100]
  404b56:	mov    rcx,QWORD PTR [rbx+0x30]
  404b5a:	mov    DWORD PTR [rcx+0x1c],eax
  404b5d:	mov    eax,DWORD PTR [rbx+0xf0]
  404b63:	mov    DWORD PTR [rbx+0xf8],eax
  404b69:	mov    eax,DWORD PTR [rbx+0xfc]
  404b6f:	lea    ecx,[rax+0x1]
  404b72:	mov    DWORD PTR [rbx+0xfc],ecx
  404b78:	mov    DWORD PTR [rbx+0x100],eax
  404b7e:	mov    eax,DWORD PTR [rbx+0x110]
  404b84:	mov    rcx,QWORD PTR [rbx+0x30]
  404b88:	mov    DWORD PTR [rcx+0x10],eax
  404b8b:	test   r14,r14
  404b8e:	jne    404b97 <flatcc_builder_start_buffer@@Base+0xb7>
  404b90:	lea    r14,[rip+0x6649]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  404b97:	mov    eax,DWORD PTR [r14]
  404b9a:	mov    DWORD PTR [rbx+0x110],eax
  404ba0:	mov    rax,QWORD PTR [rbx+0x30]
  404ba4:	mov    WORD PTR [rax+0xe],0x1
  404baa:	xor    eax,eax
  404bac:	add    rsp,0x8
  404bb0:	pop    rbx
  404bb1:	pop    r14
  404bb3:	pop    r15
  404bb5:	pop    rbp
  404bb6:	ret    
  404bb7:	nop    WORD PTR [rax+rax*1+0x0]
  404bc0:	push   rbp
  404bc1:	push   r15
  404bc3:	push   r14
  404bc5:	push   rbx
  404bc6:	push   rax
  404bc7:	mov    r14d,esi
  404bca:	mov    rbx,rdi
  404bcd:	movsxd rbp,DWORD PTR [rdi+0x104]
  404bd4:	lea    eax,[rbp+0x1]
  404bd7:	mov    DWORD PTR [rdi+0x104],eax
  404bdd:	cmp    ebp,DWORD PTR [rdi+0x108]
  404be3:	jge    404bf6 <flatcc_builder_start_buffer@@Base+0x116>
  404be5:	mov    rcx,QWORD PTR [rbx+0x30]
  404be9:	add    rcx,0x24
  404bed:	mov    QWORD PTR [rbx+0x30],rcx
  404bf1:	jmp    404c89 <flatcc_builder_start_buffer@@Base+0x1a9>
  404bf6:	mov    eax,DWORD PTR [rbx+0x120]
  404bfc:	mov    r15d,0xffffffff
  404c02:	test   eax,eax
  404c04:	jle    404c0e <flatcc_builder_start_buffer@@Base+0x12e>
  404c06:	cmp    ebp,eax
  404c08:	jge    404cc4 <flatcc_builder_start_buffer@@Base+0x1e4>
  404c0e:	shl    rbp,0x2
  404c12:	lea    rdx,[rbp*8+0x24]
  404c1a:	add    rdx,rbp
  404c1d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404c24:	jbe    404c44 <flatcc_builder_start_buffer@@Base+0x164>
  404c26:	lea    rsi,[rbx+0x98]
  404c2d:	mov    rdi,QWORD PTR [rbx+0x40]
  404c31:	xor    ecx,ecx
  404c33:	mov    r8d,0x4
  404c39:	call   QWORD PTR [rbx+0x50]
  404c3c:	test   eax,eax
  404c3e:	jne    404cd2 <flatcc_builder_start_buffer@@Base+0x1f2>
  404c44:	lea    rcx,[rbp*8+0x0]
  404c4c:	add    rcx,rbp
  404c4f:	add    rcx,QWORD PTR [rbx+0x98]
  404c56:	mov    QWORD PTR [rbx+0x30],rcx
  404c5a:	je     404cc4 <flatcc_builder_start_buffer@@Base+0x1e4>
  404c5c:	movabs rax,0xe38e38e38e38e38f
  404c66:	mul    QWORD PTR [rbx+0xa0]
  404c6d:	shr    rdx,0x5
  404c71:	mov    eax,DWORD PTR [rbx+0x120]
  404c77:	cmp    eax,edx
  404c79:	mov    esi,edx
  404c7b:	cmovle esi,eax
  404c7e:	test   eax,eax
  404c80:	cmovle esi,edx
  404c83:	mov    DWORD PTR [rbx+0x108],esi
  404c89:	mov    eax,DWORD PTR [rbx+0x20]
  404c8c:	mov    DWORD PTR [rcx+0x8],eax
  404c8f:	movzx  edx,WORD PTR [rbx+0xea]
  404c96:	mov    WORD PTR [rcx+0xc],dx
  404c9a:	mov    WORD PTR [rbx+0xea],r14w
  404ca2:	mov    edx,DWORD PTR [rbx+0x28]
  404ca5:	mov    DWORD PTR [rcx],edx
  404ca7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404cae:	lea    eax,[rax+rdx*1]
  404cb1:	add    eax,0x7
  404cb4:	and    eax,0xfffffff8
  404cb7:	mov    DWORD PTR [rbx+0x28],eax
  404cba:	mov    DWORD PTR [rbx+0x20],0x0
  404cc1:	xor    r15d,r15d
  404cc4:	mov    eax,r15d
  404cc7:	add    rsp,0x8
  404ccb:	pop    rbx
  404ccc:	pop    r14
  404cce:	pop    r15
  404cd0:	pop    rbp
  404cd1:	ret    
  404cd2:	lea    rdi,[rip+0x7949]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404cd9:	lea    rsi,[rip+0x6782]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404ce0:	lea    rcx,[rip+0x7775]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  404ce7:	mov    edx,0x134
  404cec:	call   403060 <__assert_fail@plt>
  404cf1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404cfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404d00 <flatcc_builder_end_buffer@@Base>:
  404d00:	push   rbp
  404d01:	push   rbx
  404d02:	push   rax
  404d03:	mov    rax,QWORD PTR [rdi+0x30]
  404d07:	cmp    WORD PTR [rax+0xe],0x1
  404d0c:	jne    404e09 <flatcc_builder_end_buffer@@Base+0x109>
  404d12:	mov    ecx,esi
  404d14:	mov    rbx,rdi
  404d17:	movzx  eax,WORD PTR [rdi+0x10c]
  404d1e:	and    eax,0x2
  404d21:	xor    r9d,r9d
  404d24:	cmp    DWORD PTR [rdi+0x100],0x0
  404d2b:	setne  r9b
  404d2f:	or     r9d,eax
  404d32:	movzx  edi,WORD PTR [rdi+0xe8]
  404d39:	movzx  eax,WORD PTR [rbx+0xec]
  404d40:	cmp    di,ax
  404d43:	jae    404d4e <flatcc_builder_end_buffer@@Base+0x4e>
  404d45:	mov    WORD PTR [rbx+0xe8],ax
  404d4c:	mov    edi,eax
  404d4e:	lea    rsi,[rbx+0x110]
  404d55:	movzx  edx,ax
  404d58:	movzx  r8d,di
  404d5c:	mov    rdi,rbx
  404d5f:	call   404760 <flatcc_builder_create_buffer@@Base>
  404d64:	mov    ebp,eax
  404d66:	test   eax,eax
  404d68:	je     404e00 <flatcc_builder_end_buffer@@Base+0x100>
  404d6e:	mov    rax,QWORD PTR [rbx+0x30]
  404d72:	mov    ecx,DWORD PTR [rax+0x14]
  404d75:	mov    DWORD PTR [rbx+0xf8],ecx
  404d7b:	mov    ecx,DWORD PTR [rax+0x1c]
  404d7e:	mov    DWORD PTR [rbx+0x100],ecx
  404d84:	mov    ecx,DWORD PTR [rax+0x10]
  404d87:	mov    DWORD PTR [rbx+0x110],ecx
  404d8d:	movzx  eax,WORD PTR [rax+0x20]
  404d91:	mov    WORD PTR [rbx+0x10c],ax
  404d98:	mov    rdi,QWORD PTR [rbx+0x18]
  404d9c:	mov    edx,DWORD PTR [rbx+0x20]
  404d9f:	xor    esi,esi
  404da1:	call   403070 <memset@plt>
  404da6:	mov    rax,QWORD PTR [rbx+0x30]
  404daa:	mov    ecx,DWORD PTR [rax+0x8]
  404dad:	mov    DWORD PTR [rbx+0x20],ecx
  404db0:	mov    ecx,DWORD PTR [rax]
  404db2:	mov    DWORD PTR [rbx+0x28],ecx
  404db5:	mov    edx,DWORD PTR [rax+0x4]
  404db8:	mov    rsi,rcx
  404dbb:	add    rsi,QWORD PTR [rbx+0x68]
  404dbf:	mov    QWORD PTR [rbx+0x18],rsi
  404dc3:	mov    esi,DWORD PTR [rbx+0x70]
  404dc6:	sub    esi,ecx
  404dc8:	cmp    esi,edx
  404dca:	cmova  esi,edx
  404dcd:	mov    DWORD PTR [rbx+0x24],esi
  404dd0:	movzx  ecx,WORD PTR [rbx+0xea]
  404dd7:	cmp    WORD PTR [rbx+0xe8],cx
  404dde:	jae    404de7 <flatcc_builder_end_buffer@@Base+0xe7>
  404de0:	mov    WORD PTR [rbx+0xe8],cx
  404de7:	movzx  ecx,WORD PTR [rax+0xc]
  404deb:	mov    WORD PTR [rbx+0xea],cx
  404df2:	add    rax,0xffffffffffffffdc
  404df6:	mov    QWORD PTR [rbx+0x30],rax
  404dfa:	dec    DWORD PTR [rbx+0x104]
  404e00:	mov    eax,ebp
  404e02:	add    rsp,0x8
  404e06:	pop    rbx
  404e07:	pop    rbp
  404e08:	ret    
  404e09:	lea    rdi,[rip+0x689b]        # 40b6ab <flatcc_builder_padding_base@@Base+0x4cb>
  404e10:	lea    rsi,[rip+0x664b]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404e17:	lea    rcx,[rip+0x68b9]        # 40b6d7 <flatcc_builder_padding_base@@Base+0x4f7>
  404e1e:	mov    edx,0x346
  404e23:	call   403060 <__assert_fail@plt>
  404e28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404e30 <flatcc_builder_start_struct@@Base>:
  404e30:	push   r15
  404e32:	push   r14
  404e34:	push   rbx
  404e35:	mov    r14,rsi
  404e38:	mov    rbx,rdi
  404e3b:	mov    esi,edx
  404e3d:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  404e42:	test   eax,eax
  404e44:	je     404e4d <flatcc_builder_start_struct@@Base+0x1d>
  404e46:	xor    eax,eax
  404e48:	jmp    404ee1 <flatcc_builder_start_struct@@Base+0xb1>
  404e4d:	mov    rdx,QWORD PTR [rbx+0x30]
  404e51:	mov    WORD PTR [rdx+0xe],0x2
  404e57:	mov    ecx,DWORD PTR [rbx+0x28]
  404e5a:	mov    esi,DWORD PTR [rbx+0x70]
  404e5d:	mov    rax,QWORD PTR [rbx+0x68]
  404e61:	add    rax,rcx
  404e64:	mov    QWORD PTR [rbx+0x18],rax
  404e68:	sub    esi,ecx
  404e6a:	cmp    esi,0xfffffffc
  404e6d:	mov    edi,0xfffffffc
  404e72:	cmovb  edi,esi
  404e75:	mov    DWORD PTR [rbx+0x24],edi
  404e78:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404e7f:	mov    r15d,DWORD PTR [rbx+0x20]
  404e83:	add    r14d,r15d
  404e86:	mov    DWORD PTR [rbx+0x20],r14d
  404e8a:	cmp    r14d,edi
  404e8d:	jb     404ede <flatcc_builder_start_struct@@Base+0xae>
  404e8f:	inc    r14d
  404e92:	lea    rsi,[rbx+0x68]
  404e96:	mov    rdi,QWORD PTR [rbx+0x40]
  404e9a:	add    r14,rcx
  404e9d:	mov    rdx,r14
  404ea0:	mov    ecx,0x1
  404ea5:	mov    r8d,0x1
  404eab:	call   QWORD PTR [rbx+0x50]
  404eae:	test   eax,eax
  404eb0:	jne    404e46 <flatcc_builder_start_struct@@Base+0x16>
  404eb2:	mov    ecx,DWORD PTR [rbx+0x28]
  404eb5:	mov    rax,rcx
  404eb8:	add    rax,QWORD PTR [rbx+0x68]
  404ebc:	mov    QWORD PTR [rbx+0x18],rax
  404ec0:	mov    edx,DWORD PTR [rbx+0x70]
  404ec3:	sub    edx,ecx
  404ec5:	cmp    edx,0xfffffffc
  404ec8:	mov    ecx,0xfffffffc
  404ecd:	cmovb  ecx,edx
  404ed0:	mov    DWORD PTR [rbx+0x24],ecx
  404ed3:	mov    rcx,QWORD PTR [rbx+0x30]
  404ed7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404ede:	add    rax,r15
  404ee1:	pop    rbx
  404ee2:	pop    r14
  404ee4:	pop    r15
  404ee6:	ret    
  404ee7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404ef0 <flatcc_builder_struct_edit@@Base>:
  404ef0:	mov    rax,QWORD PTR [rdi+0x18]
  404ef4:	ret    
  404ef5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404eff:	nop

0000000000404f00 <flatcc_builder_end_struct@@Base>:
  404f00:	push   rbp
  404f01:	push   rbx
  404f02:	push   rax
  404f03:	mov    rax,QWORD PTR [rdi+0x30]
  404f07:	cmp    WORD PTR [rax+0xe],0x2
  404f0c:	jne    404f9f <flatcc_builder_end_struct@@Base+0x9f>
  404f12:	mov    rbx,rdi
  404f15:	mov    rsi,QWORD PTR [rdi+0x18]
  404f19:	mov    edx,DWORD PTR [rdi+0x20]
  404f1c:	movzx  ecx,WORD PTR [rdi+0xea]
  404f23:	call   4049a0 <flatcc_builder_create_struct@@Base>
  404f28:	mov    ebp,eax
  404f2a:	test   eax,eax
  404f2c:	je     404f96 <flatcc_builder_end_struct@@Base+0x96>
  404f2e:	mov    rdi,QWORD PTR [rbx+0x18]
  404f32:	mov    edx,DWORD PTR [rbx+0x20]
  404f35:	xor    esi,esi
  404f37:	call   403070 <memset@plt>
  404f3c:	mov    rax,QWORD PTR [rbx+0x30]
  404f40:	mov    ecx,DWORD PTR [rax+0x8]
  404f43:	mov    DWORD PTR [rbx+0x20],ecx
  404f46:	mov    ecx,DWORD PTR [rax]
  404f48:	mov    DWORD PTR [rbx+0x28],ecx
  404f4b:	mov    edx,DWORD PTR [rax+0x4]
  404f4e:	mov    rsi,rcx
  404f51:	add    rsi,QWORD PTR [rbx+0x68]
  404f55:	mov    QWORD PTR [rbx+0x18],rsi
  404f59:	mov    esi,DWORD PTR [rbx+0x70]
  404f5c:	sub    esi,ecx
  404f5e:	cmp    esi,edx
  404f60:	cmova  esi,edx
  404f63:	mov    DWORD PTR [rbx+0x24],esi
  404f66:	movzx  ecx,WORD PTR [rbx+0xea]
  404f6d:	cmp    WORD PTR [rbx+0xe8],cx
  404f74:	jae    404f7d <flatcc_builder_end_struct@@Base+0x7d>
  404f76:	mov    WORD PTR [rbx+0xe8],cx
  404f7d:	movzx  ecx,WORD PTR [rax+0xc]
  404f81:	mov    WORD PTR [rbx+0xea],cx
  404f88:	add    rax,0xffffffffffffffdc
  404f8c:	mov    QWORD PTR [rbx+0x30],rax
  404f90:	dec    DWORD PTR [rbx+0x104]
  404f96:	mov    eax,ebp
  404f98:	add    rsp,0x8
  404f9c:	pop    rbx
  404f9d:	pop    rbp
  404f9e:	ret    
  404f9f:	lea    rdi,[rip+0x678a]        # 40b730 <flatcc_builder_padding_base@@Base+0x550>
  404fa6:	lea    rsi,[rip+0x64b5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404fad:	lea    rcx,[rip+0x67a8]        # 40b75c <flatcc_builder_padding_base@@Base+0x57c>
  404fb4:	mov    edx,0x368
  404fb9:	call   403060 <__assert_fail@plt>
  404fbe:	xchg   ax,ax

0000000000404fc0 <flatcc_builder_extend_vector@@Base>:
  404fc0:	push   r14
  404fc2:	push   rbx
  404fc3:	push   rax
  404fc4:	mov    rax,QWORD PTR [rdi+0x30]
  404fc8:	mov    ecx,DWORD PTR [rax+0x14]
  404fcb:	add    ecx,esi
  404fcd:	jb     40505f <flatcc_builder_extend_vector@@Base+0x9f>
  404fd3:	cmp    ecx,DWORD PTR [rax+0x18]
  404fd6:	ja     40505f <flatcc_builder_extend_vector@@Base+0x9f>
  404fdc:	mov    rbx,rdi
  404fdf:	mov    DWORD PTR [rax+0x14],ecx
  404fe2:	mov    rax,QWORD PTR [rdi+0x30]
  404fe6:	imul   esi,DWORD PTR [rax+0x10]
  404fea:	mov    r14d,DWORD PTR [rdi+0x20]
  404fee:	add    esi,r14d
  404ff1:	mov    DWORD PTR [rdi+0x20],esi
  404ff4:	cmp    esi,DWORD PTR [rdi+0x24]
  404ff7:	jae    404fff <flatcc_builder_extend_vector@@Base+0x3f>
  404ff9:	mov    rax,QWORD PTR [rbx+0x18]
  404ffd:	jmp    405054 <flatcc_builder_extend_vector@@Base+0x94>
  404fff:	inc    esi
  405001:	lea    rax,[rbx+0x68]
  405005:	mov    rdi,QWORD PTR [rbx+0x40]
  405009:	mov    edx,DWORD PTR [rbx+0x28]
  40500c:	add    rdx,rsi
  40500f:	mov    rsi,rax
  405012:	mov    ecx,0x1
  405017:	mov    r8d,0x1
  40501d:	call   QWORD PTR [rbx+0x50]
  405020:	test   eax,eax
  405022:	je     405028 <flatcc_builder_extend_vector@@Base+0x68>
  405024:	xor    eax,eax
  405026:	jmp    405057 <flatcc_builder_extend_vector@@Base+0x97>
  405028:	mov    ecx,DWORD PTR [rbx+0x28]
  40502b:	mov    rax,rcx
  40502e:	add    rax,QWORD PTR [rbx+0x68]
  405032:	mov    QWORD PTR [rbx+0x18],rax
  405036:	mov    edx,DWORD PTR [rbx+0x70]
  405039:	sub    edx,ecx
  40503b:	cmp    edx,0xfffffffc
  40503e:	mov    ecx,0xfffffffc
  405043:	cmovb  ecx,edx
  405046:	mov    DWORD PTR [rbx+0x24],ecx
  405049:	mov    rcx,QWORD PTR [rbx+0x30]
  40504d:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405054:	add    rax,r14
  405057:	add    rsp,0x8
  40505b:	pop    rbx
  40505c:	pop    r14
  40505e:	ret    
  40505f:	lea    rdi,[rip+0x74c5]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405066:	lea    rsi,[rip+0x63f5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40506d:	lea    rcx,[rip+0x74d2]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405074:	mov    edx,0x37c
  405079:	call   403060 <__assert_fail@plt>
  40507e:	xchg   ax,ax

0000000000405080 <flatcc_builder_vector_push@@Base>:
  405080:	push   r15
  405082:	push   r14
  405084:	push   r13
  405086:	push   r12
  405088:	push   rbx
  405089:	mov    rax,QWORD PTR [rdi+0x30]
  40508d:	cmp    WORD PTR [rax+0xe],0x4
  405092:	jne    405145 <flatcc_builder_vector_push@@Base+0xc5>
  405098:	mov    ecx,DWORD PTR [rax+0x14]
  40509b:	cmp    ecx,DWORD PTR [rax+0x18]
  40509e:	ja     405164 <flatcc_builder_vector_push@@Base+0xe4>
  4050a4:	mov    r14,rsi
  4050a7:	mov    rbx,rdi
  4050aa:	inc    ecx
  4050ac:	mov    DWORD PTR [rax+0x14],ecx
  4050af:	mov    rax,QWORD PTR [rdi+0x30]
  4050b3:	mov    r15d,DWORD PTR [rax+0x10]
  4050b7:	mov    r13d,DWORD PTR [rdi+0x20]
  4050bb:	lea    eax,[r15+r13*1]
  4050bf:	mov    DWORD PTR [rdi+0x20],eax
  4050c2:	cmp    eax,DWORD PTR [rdi+0x24]
  4050c5:	jae    4050d2 <flatcc_builder_vector_push@@Base+0x52>
  4050c7:	mov    r12,QWORD PTR [rbx+0x18]
  4050cb:	add    r12,r13
  4050ce:	jne    40512a <flatcc_builder_vector_push@@Base+0xaa>
  4050d0:	jmp    4050f4 <flatcc_builder_vector_push@@Base+0x74>
  4050d2:	inc    eax
  4050d4:	lea    rsi,[rbx+0x68]
  4050d8:	mov    rdi,QWORD PTR [rbx+0x40]
  4050dc:	mov    edx,DWORD PTR [rbx+0x28]
  4050df:	add    rdx,rax
  4050e2:	mov    ecx,0x1
  4050e7:	mov    r8d,0x1
  4050ed:	call   QWORD PTR [rbx+0x50]
  4050f0:	test   eax,eax
  4050f2:	je     4050f9 <flatcc_builder_vector_push@@Base+0x79>
  4050f4:	xor    r12d,r12d
  4050f7:	jmp    405138 <flatcc_builder_vector_push@@Base+0xb8>
  4050f9:	mov    eax,DWORD PTR [rbx+0x28]
  4050fc:	mov    r12,rax
  4050ff:	add    r12,QWORD PTR [rbx+0x68]
  405103:	mov    QWORD PTR [rbx+0x18],r12
  405107:	mov    ecx,DWORD PTR [rbx+0x70]
  40510a:	sub    ecx,eax
  40510c:	cmp    ecx,0xfffffffc
  40510f:	mov    eax,0xfffffffc
  405114:	cmovb  eax,ecx
  405117:	mov    DWORD PTR [rbx+0x24],eax
  40511a:	mov    rax,QWORD PTR [rbx+0x30]
  40511e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405125:	add    r12,r13
  405128:	je     4050f4 <flatcc_builder_vector_push@@Base+0x74>
  40512a:	mov    rdi,r12
  40512d:	mov    rsi,r14
  405130:	mov    rdx,r15
  405133:	call   403090 <memcpy@plt>
  405138:	mov    rax,r12
  40513b:	pop    rbx
  40513c:	pop    r12
  40513e:	pop    r13
  405140:	pop    r14
  405142:	pop    r15
  405144:	ret    
  405145:	lea    rdi,[rip+0x6653]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  40514c:	lea    rsi,[rip+0x630f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405153:	lea    rcx,[rip+0x6671]        # 40b7cb <flatcc_builder_padding_base@@Base+0x5eb>
  40515a:	mov    edx,0x38b
  40515f:	call   403060 <__assert_fail@plt>
  405164:	lea    rdi,[rip+0x66a3]        # 40b80e <flatcc_builder_padding_base@@Base+0x62e>
  40516b:	lea    rsi,[rip+0x62f0]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405172:	lea    rcx,[rip+0x6652]        # 40b7cb <flatcc_builder_padding_base@@Base+0x5eb>
  405179:	mov    edx,0x38c
  40517e:	call   403060 <__assert_fail@plt>
  405183:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40518d:	nop    DWORD PTR [rax]

0000000000405190 <flatcc_builder_append_vector@@Base>:
  405190:	push   r15
  405192:	push   r14
  405194:	push   r13
  405196:	push   r12
  405198:	push   rbx
  405199:	mov    rax,QWORD PTR [rdi+0x30]
  40519d:	cmp    WORD PTR [rax+0xe],0x4
  4051a2:	jne    40527f <flatcc_builder_append_vector@@Base+0xef>
  4051a8:	mov    r15,rdx
  4051ab:	mov    ecx,DWORD PTR [rax+0x14]
  4051ae:	add    ecx,r15d
  4051b1:	jb     405260 <flatcc_builder_append_vector@@Base+0xd0>
  4051b7:	cmp    ecx,DWORD PTR [rax+0x18]
  4051ba:	ja     405260 <flatcc_builder_append_vector@@Base+0xd0>
  4051c0:	mov    r14,rsi
  4051c3:	mov    rbx,rdi
  4051c6:	mov    DWORD PTR [rax+0x14],ecx
  4051c9:	mov    rax,QWORD PTR [rdi+0x30]
  4051cd:	imul   r15d,DWORD PTR [rax+0x10]
  4051d2:	mov    r13d,DWORD PTR [rdi+0x20]
  4051d6:	lea    eax,[r15+r13*1]
  4051da:	mov    DWORD PTR [rdi+0x20],eax
  4051dd:	cmp    eax,DWORD PTR [rdi+0x24]
  4051e0:	jae    4051ed <flatcc_builder_append_vector@@Base+0x5d>
  4051e2:	mov    r12,QWORD PTR [rbx+0x18]
  4051e6:	add    r12,r13
  4051e9:	jne    405245 <flatcc_builder_append_vector@@Base+0xb5>
  4051eb:	jmp    40520f <flatcc_builder_append_vector@@Base+0x7f>
  4051ed:	inc    eax
  4051ef:	lea    rsi,[rbx+0x68]
  4051f3:	mov    rdi,QWORD PTR [rbx+0x40]
  4051f7:	mov    edx,DWORD PTR [rbx+0x28]
  4051fa:	add    rdx,rax
  4051fd:	mov    ecx,0x1
  405202:	mov    r8d,0x1
  405208:	call   QWORD PTR [rbx+0x50]
  40520b:	test   eax,eax
  40520d:	je     405214 <flatcc_builder_append_vector@@Base+0x84>
  40520f:	xor    r12d,r12d
  405212:	jmp    405253 <flatcc_builder_append_vector@@Base+0xc3>
  405214:	mov    eax,DWORD PTR [rbx+0x28]
  405217:	mov    r12,rax
  40521a:	add    r12,QWORD PTR [rbx+0x68]
  40521e:	mov    QWORD PTR [rbx+0x18],r12
  405222:	mov    ecx,DWORD PTR [rbx+0x70]
  405225:	sub    ecx,eax
  405227:	cmp    ecx,0xfffffffc
  40522a:	mov    eax,0xfffffffc
  40522f:	cmovb  eax,ecx
  405232:	mov    DWORD PTR [rbx+0x24],eax
  405235:	mov    rax,QWORD PTR [rbx+0x30]
  405239:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405240:	add    r12,r13
  405243:	je     40520f <flatcc_builder_append_vector@@Base+0x7f>
  405245:	mov    edx,r15d
  405248:	mov    rdi,r12
  40524b:	mov    rsi,r14
  40524e:	call   403090 <memcpy@plt>
  405253:	mov    rax,r12
  405256:	pop    rbx
  405257:	pop    r12
  405259:	pop    r13
  40525b:	pop    r14
  40525d:	pop    r15
  40525f:	ret    
  405260:	lea    rdi,[rip+0x72c4]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405267:	lea    rsi,[rip+0x61f4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40526e:	lea    rcx,[rip+0x72d1]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405275:	mov    edx,0x37c
  40527a:	call   403060 <__assert_fail@plt>
  40527f:	lea    rdi,[rip+0x6519]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  405286:	lea    rsi,[rip+0x61d5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40528d:	lea    rcx,[rip+0x65b7]        # 40b84b <flatcc_builder_padding_base@@Base+0x66b>
  405294:	mov    edx,0x393
  405299:	call   403060 <__assert_fail@plt>
  40529e:	xchg   ax,ax

00000000004052a0 <flatcc_builder_extend_offset_vector@@Base>:
  4052a0:	push   r14
  4052a2:	push   rbx
  4052a3:	push   rax
  4052a4:	mov    rax,QWORD PTR [rdi+0x30]
  4052a8:	mov    ecx,DWORD PTR [rax+0x14]
  4052ab:	add    ecx,esi
  4052ad:	jb     405334 <flatcc_builder_extend_offset_vector@@Base+0x94>
  4052b3:	cmp    ecx,0x40000000
  4052b9:	jae    405334 <flatcc_builder_extend_offset_vector@@Base+0x94>
  4052bb:	mov    rbx,rdi
  4052be:	mov    DWORD PTR [rax+0x14],ecx
  4052c1:	mov    r14d,DWORD PTR [rdi+0x20]
  4052c5:	lea    eax,[r14+rsi*4]
  4052c9:	mov    DWORD PTR [rdi+0x20],eax
  4052cc:	cmp    eax,DWORD PTR [rdi+0x24]
  4052cf:	jae    4052d7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  4052d1:	mov    rax,QWORD PTR [rbx+0x18]
  4052d5:	jmp    405329 <flatcc_builder_extend_offset_vector@@Base+0x89>
  4052d7:	inc    eax
  4052d9:	lea    rsi,[rbx+0x68]
  4052dd:	mov    rdi,QWORD PTR [rbx+0x40]
  4052e1:	mov    edx,DWORD PTR [rbx+0x28]
  4052e4:	add    rdx,rax
  4052e7:	mov    ecx,0x1
  4052ec:	mov    r8d,0x1
  4052f2:	call   QWORD PTR [rbx+0x50]
  4052f5:	test   eax,eax
  4052f7:	je     4052fd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4052f9:	xor    eax,eax
  4052fb:	jmp    40532c <flatcc_builder_extend_offset_vector@@Base+0x8c>
  4052fd:	mov    ecx,DWORD PTR [rbx+0x28]
  405300:	mov    rax,rcx
  405303:	add    rax,QWORD PTR [rbx+0x68]
  405307:	mov    QWORD PTR [rbx+0x18],rax
  40530b:	mov    edx,DWORD PTR [rbx+0x70]
  40530e:	sub    edx,ecx
  405310:	cmp    edx,0xfffffffc
  405313:	mov    ecx,0xfffffffc
  405318:	cmovb  ecx,edx
  40531b:	mov    DWORD PTR [rbx+0x24],ecx
  40531e:	mov    rcx,QWORD PTR [rbx+0x30]
  405322:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405329:	add    rax,r14
  40532c:	add    rsp,0x8
  405330:	pop    rbx
  405331:	pop    r14
  405333:	ret    
  405334:	lea    rdi,[rip+0x71f0]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  40533b:	lea    rsi,[rip+0x6120]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405342:	lea    rcx,[rip+0x71fd]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405349:	mov    edx,0x37c
  40534e:	call   403060 <__assert_fail@plt>
  405353:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40535d:	nop    DWORD PTR [rax]

0000000000405360 <flatcc_builder_offset_vector_push@@Base>:
  405360:	push   rbp
  405361:	push   r14
  405363:	push   rbx
  405364:	mov    rax,QWORD PTR [rdi+0x30]
  405368:	cmp    WORD PTR [rax+0xe],0x5
  40536d:	jne    405402 <flatcc_builder_offset_vector_push@@Base+0xa2>
  405373:	mov    ecx,DWORD PTR [rax+0x14]
  405376:	cmp    ecx,0x3fffffff
  40537c:	je     4053c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  40537e:	mov    r14d,esi
  405381:	mov    rbx,rdi
  405384:	inc    ecx
  405386:	mov    DWORD PTR [rax+0x14],ecx
  405389:	mov    ebp,DWORD PTR [rdi+0x20]
  40538c:	lea    eax,[rbp+0x4]
  40538f:	mov    DWORD PTR [rdi+0x20],eax
  405392:	cmp    eax,DWORD PTR [rdi+0x24]
  405395:	jae    4053a2 <flatcc_builder_offset_vector_push@@Base+0x42>
  405397:	mov    rax,QWORD PTR [rbx+0x18]
  40539b:	add    rax,rbp
  40539e:	jne    4053fa <flatcc_builder_offset_vector_push@@Base+0x9a>
  4053a0:	jmp    4053c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4053a2:	lea    eax,[rbp+0x5]
  4053a5:	lea    rsi,[rbx+0x68]
  4053a9:	mov    rdi,QWORD PTR [rbx+0x40]
  4053ad:	mov    edx,DWORD PTR [rbx+0x28]
  4053b0:	add    rdx,rax
  4053b3:	mov    ecx,0x1
  4053b8:	mov    r8d,0x1
  4053be:	call   QWORD PTR [rbx+0x50]
  4053c1:	test   eax,eax
  4053c3:	je     4053c9 <flatcc_builder_offset_vector_push@@Base+0x69>
  4053c5:	xor    eax,eax
  4053c7:	jmp    4053fd <flatcc_builder_offset_vector_push@@Base+0x9d>
  4053c9:	mov    ecx,DWORD PTR [rbx+0x28]
  4053cc:	mov    rax,rcx
  4053cf:	add    rax,QWORD PTR [rbx+0x68]
  4053d3:	mov    QWORD PTR [rbx+0x18],rax
  4053d7:	mov    edx,DWORD PTR [rbx+0x70]
  4053da:	sub    edx,ecx
  4053dc:	cmp    edx,0xfffffffc
  4053df:	mov    ecx,0xfffffffc
  4053e4:	cmovb  ecx,edx
  4053e7:	mov    DWORD PTR [rbx+0x24],ecx
  4053ea:	mov    rcx,QWORD PTR [rbx+0x30]
  4053ee:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4053f5:	add    rax,rbp
  4053f8:	je     4053c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4053fa:	mov    DWORD PTR [rax],r14d
  4053fd:	pop    rbx
  4053fe:	pop    r14
  405400:	pop    rbp
  405401:	ret    
  405402:	lea    rdi,[rip+0x648f]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405409:	lea    rsi,[rip+0x6052]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405410:	lea    rcx,[rip+0x64b4]        # 40b8cb <flatcc_builder_padding_base@@Base+0x6eb>
  405417:	mov    edx,0x3a6
  40541c:	call   403060 <__assert_fail@plt>
  405421:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40542b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405430 <flatcc_builder_append_offset_vector@@Base>:
  405430:	push   r15
  405432:	push   r14
  405434:	push   r13
  405436:	push   r12
  405438:	push   rbx
  405439:	mov    rax,QWORD PTR [rdi+0x30]
  40543d:	cmp    WORD PTR [rax+0xe],0x5
  405442:	jne    40551e <flatcc_builder_append_offset_vector@@Base+0xee>
  405448:	mov    r15,rdx
  40544b:	mov    ecx,DWORD PTR [rax+0x14]
  40544e:	add    ecx,r15d
  405451:	jb     4054ff <flatcc_builder_append_offset_vector@@Base+0xcf>
  405457:	cmp    ecx,0x40000000
  40545d:	jae    4054ff <flatcc_builder_append_offset_vector@@Base+0xcf>
  405463:	mov    r14,rsi
  405466:	mov    rbx,rdi
  405469:	mov    DWORD PTR [rax+0x14],ecx
  40546c:	mov    r13d,DWORD PTR [rdi+0x20]
  405470:	lea    eax,[r13+r15*4+0x0]
  405475:	mov    DWORD PTR [rdi+0x20],eax
  405478:	cmp    eax,DWORD PTR [rdi+0x24]
  40547b:	jae    405488 <flatcc_builder_append_offset_vector@@Base+0x58>
  40547d:	mov    r12,QWORD PTR [rbx+0x18]
  405481:	add    r12,r13
  405484:	jne    4054e0 <flatcc_builder_append_offset_vector@@Base+0xb0>
  405486:	jmp    4054aa <flatcc_builder_append_offset_vector@@Base+0x7a>
  405488:	inc    eax
  40548a:	lea    rsi,[rbx+0x68]
  40548e:	mov    rdi,QWORD PTR [rbx+0x40]
  405492:	mov    edx,DWORD PTR [rbx+0x28]
  405495:	add    rdx,rax
  405498:	mov    ecx,0x1
  40549d:	mov    r8d,0x1
  4054a3:	call   QWORD PTR [rbx+0x50]
  4054a6:	test   eax,eax
  4054a8:	je     4054af <flatcc_builder_append_offset_vector@@Base+0x7f>
  4054aa:	xor    r12d,r12d
  4054ad:	jmp    4054f2 <flatcc_builder_append_offset_vector@@Base+0xc2>
  4054af:	mov    eax,DWORD PTR [rbx+0x28]
  4054b2:	mov    r12,rax
  4054b5:	add    r12,QWORD PTR [rbx+0x68]
  4054b9:	mov    QWORD PTR [rbx+0x18],r12
  4054bd:	mov    ecx,DWORD PTR [rbx+0x70]
  4054c0:	sub    ecx,eax
  4054c2:	cmp    ecx,0xfffffffc
  4054c5:	mov    eax,0xfffffffc
  4054ca:	cmovb  eax,ecx
  4054cd:	mov    DWORD PTR [rbx+0x24],eax
  4054d0:	mov    rax,QWORD PTR [rbx+0x30]
  4054d4:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4054db:	add    r12,r13
  4054de:	je     4054aa <flatcc_builder_append_offset_vector@@Base+0x7a>
  4054e0:	shl    r15d,0x2
  4054e4:	mov    edx,r15d
  4054e7:	mov    rdi,r12
  4054ea:	mov    rsi,r14
  4054ed:	call   403090 <memcpy@plt>
  4054f2:	mov    rax,r12
  4054f5:	pop    rbx
  4054f6:	pop    r12
  4054f8:	pop    r13
  4054fa:	pop    r14
  4054fc:	pop    r15
  4054fe:	ret    
  4054ff:	lea    rdi,[rip+0x7025]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405506:	lea    rsi,[rip+0x5f55]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40550d:	lea    rcx,[rip+0x7032]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405514:	mov    edx,0x37c
  405519:	call   403060 <__assert_fail@plt>
  40551e:	lea    rdi,[rip+0x6373]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405525:	lea    rsi,[rip+0x5f36]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40552c:	lea    rcx,[rip+0x63fa]        # 40b92d <flatcc_builder_padding_base@@Base+0x74d>
  405533:	mov    edx,0x3b4
  405538:	call   403060 <__assert_fail@plt>
  40553d:	nop    DWORD PTR [rax]

0000000000405540 <flatcc_builder_extend_string@@Base>:
  405540:	push   r14
  405542:	push   rbx
  405543:	push   rax
  405544:	mov    rax,QWORD PTR [rdi+0x30]
  405548:	cmp    WORD PTR [rax+0xe],0x6
  40554d:	jne    4055d9 <flatcc_builder_extend_string@@Base+0x99>
  405553:	mov    ecx,DWORD PTR [rax+0x14]
  405556:	add    ecx,esi
  405558:	jb     4055f8 <flatcc_builder_extend_string@@Base+0xb8>
  40555e:	mov    rbx,rdi
  405561:	mov    DWORD PTR [rax+0x14],ecx
  405564:	mov    r14d,DWORD PTR [rdi+0x20]
  405568:	add    esi,r14d
  40556b:	mov    DWORD PTR [rdi+0x20],esi
  40556e:	cmp    esi,DWORD PTR [rdi+0x24]
  405571:	jae    405579 <flatcc_builder_extend_string@@Base+0x39>
  405573:	mov    rax,QWORD PTR [rbx+0x18]
  405577:	jmp    4055ce <flatcc_builder_extend_string@@Base+0x8e>
  405579:	inc    esi
  40557b:	lea    rax,[rbx+0x68]
  40557f:	mov    rdi,QWORD PTR [rbx+0x40]
  405583:	mov    edx,DWORD PTR [rbx+0x28]
  405586:	add    rdx,rsi
  405589:	mov    rsi,rax
  40558c:	mov    ecx,0x1
  405591:	mov    r8d,0x1
  405597:	call   QWORD PTR [rbx+0x50]
  40559a:	test   eax,eax
  40559c:	je     4055a2 <flatcc_builder_extend_string@@Base+0x62>
  40559e:	xor    eax,eax
  4055a0:	jmp    4055d1 <flatcc_builder_extend_string@@Base+0x91>
  4055a2:	mov    ecx,DWORD PTR [rbx+0x28]
  4055a5:	mov    rax,rcx
  4055a8:	add    rax,QWORD PTR [rbx+0x68]
  4055ac:	mov    QWORD PTR [rbx+0x18],rax
  4055b0:	mov    edx,DWORD PTR [rbx+0x70]
  4055b3:	sub    edx,ecx
  4055b5:	cmp    edx,0xfffffffc
  4055b8:	mov    ecx,0xfffffffc
  4055bd:	cmovb  ecx,edx
  4055c0:	mov    DWORD PTR [rbx+0x24],ecx
  4055c3:	mov    rcx,QWORD PTR [rbx+0x30]
  4055c7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4055ce:	add    rax,r14
  4055d1:	add    rsp,0x8
  4055d5:	pop    rbx
  4055d6:	pop    r14
  4055d8:	ret    
  4055d9:	lea    rdi,[rip+0x63c1]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  4055e0:	lea    rsi,[rip+0x5e7b]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4055e7:	lea    rcx,[rip+0x63df]        # 40b9cd <flatcc_builder_padding_base@@Base+0x7ed>
  4055ee:	mov    edx,0x3bd
  4055f3:	call   403060 <__assert_fail@plt>
  4055f8:	lea    rdi,[rip+0x6f2c]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  4055ff:	lea    rsi,[rip+0x5e5c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405606:	lea    rcx,[rip+0x6f39]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  40560d:	mov    edx,0x37c
  405612:	call   403060 <__assert_fail@plt>
  405617:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405620 <flatcc_builder_append_string@@Base>:
  405620:	push   r15
  405622:	push   r14
  405624:	push   r13
  405626:	push   r12
  405628:	push   rbx
  405629:	mov    rax,QWORD PTR [rdi+0x30]
  40562d:	cmp    WORD PTR [rax+0xe],0x6
  405632:	jne    4056de <flatcc_builder_append_string@@Base+0xbe>
  405638:	mov    r15,rdx
  40563b:	mov    ecx,DWORD PTR [rax+0x14]
  40563e:	add    ecx,r15d
  405641:	jb     4056fd <flatcc_builder_append_string@@Base+0xdd>
  405647:	mov    r14,rsi
  40564a:	mov    rbx,rdi
  40564d:	mov    DWORD PTR [rax+0x14],ecx
  405650:	mov    r13d,DWORD PTR [rdi+0x20]
  405654:	lea    eax,[r15+r13*1]
  405658:	mov    DWORD PTR [rdi+0x20],eax
  40565b:	cmp    eax,DWORD PTR [rdi+0x24]
  40565e:	jae    40566b <flatcc_builder_append_string@@Base+0x4b>
  405660:	mov    r12,QWORD PTR [rbx+0x18]
  405664:	add    r12,r13
  405667:	jne    4056c3 <flatcc_builder_append_string@@Base+0xa3>
  405669:	jmp    40568d <flatcc_builder_append_string@@Base+0x6d>
  40566b:	inc    eax
  40566d:	lea    rsi,[rbx+0x68]
  405671:	mov    rdi,QWORD PTR [rbx+0x40]
  405675:	mov    edx,DWORD PTR [rbx+0x28]
  405678:	add    rdx,rax
  40567b:	mov    ecx,0x1
  405680:	mov    r8d,0x1
  405686:	call   QWORD PTR [rbx+0x50]
  405689:	test   eax,eax
  40568b:	je     405692 <flatcc_builder_append_string@@Base+0x72>
  40568d:	xor    r12d,r12d
  405690:	jmp    4056d1 <flatcc_builder_append_string@@Base+0xb1>
  405692:	mov    eax,DWORD PTR [rbx+0x28]
  405695:	mov    r12,rax
  405698:	add    r12,QWORD PTR [rbx+0x68]
  40569c:	mov    QWORD PTR [rbx+0x18],r12
  4056a0:	mov    ecx,DWORD PTR [rbx+0x70]
  4056a3:	sub    ecx,eax
  4056a5:	cmp    ecx,0xfffffffc
  4056a8:	mov    eax,0xfffffffc
  4056ad:	cmovb  eax,ecx
  4056b0:	mov    DWORD PTR [rbx+0x24],eax
  4056b3:	mov    rax,QWORD PTR [rbx+0x30]
  4056b7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4056be:	add    r12,r13
  4056c1:	je     40568d <flatcc_builder_append_string@@Base+0x6d>
  4056c3:	mov    edx,r15d
  4056c6:	mov    rdi,r12
  4056c9:	mov    rsi,r14
  4056cc:	call   403090 <memcpy@plt>
  4056d1:	mov    rax,r12
  4056d4:	pop    rbx
  4056d5:	pop    r12
  4056d7:	pop    r13
  4056d9:	pop    r14
  4056db:	pop    r15
  4056dd:	ret    
  4056de:	lea    rdi,[rip+0x62bc]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  4056e5:	lea    rsi,[rip+0x5d76]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4056ec:	lea    rcx,[rip+0x6319]        # 40ba0c <flatcc_builder_padding_base@@Base+0x82c>
  4056f3:	mov    edx,0x3c6
  4056f8:	call   403060 <__assert_fail@plt>
  4056fd:	lea    rdi,[rip+0x6e27]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405704:	lea    rsi,[rip+0x5d57]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40570b:	lea    rcx,[rip+0x6e34]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405712:	mov    edx,0x37c
  405717:	call   403060 <__assert_fail@plt>
  40571c:	nop    DWORD PTR [rax+0x0]

0000000000405720 <flatcc_builder_append_string_str@@Base>:
  405720:	push   r14
  405722:	push   rbx
  405723:	push   rax
  405724:	mov    rbx,rsi
  405727:	mov    r14,rdi
  40572a:	mov    rdi,rsi
  40572d:	call   403050 <strlen@plt>
  405732:	mov    rdi,r14
  405735:	mov    rsi,rbx
  405738:	mov    rdx,rax
  40573b:	add    rsp,0x8
  40573f:	pop    rbx
  405740:	pop    r14
  405742:	jmp    405620 <flatcc_builder_append_string@@Base>
  405747:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405750 <flatcc_builder_append_string_strn@@Base>:
  405750:	push   r15
  405752:	push   r14
  405754:	push   rbx
  405755:	mov    rbx,rdx
  405758:	mov    r14,rsi
  40575b:	mov    r15,rdi
  40575e:	mov    rdi,rsi
  405761:	xor    esi,esi
  405763:	call   403080 <memchr@plt>
  405768:	mov    rcx,rax
  40576b:	sub    rcx,r14
  40576e:	test   rax,rax
  405771:	cmovne rbx,rcx
  405775:	mov    rdi,r15
  405778:	mov    rsi,r14
  40577b:	mov    rdx,rbx
  40577e:	pop    rbx
  40577f:	pop    r14
  405781:	pop    r15
  405783:	jmp    405620 <flatcc_builder_append_string@@Base>
  405788:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405790 <flatcc_builder_truncate_vector@@Base>:
  405790:	push   rax
  405791:	mov    rax,QWORD PTR [rdi+0x30]
  405795:	cmp    WORD PTR [rax+0xe],0x4
  40579a:	jne    4057ce <flatcc_builder_truncate_vector@@Base+0x3e>
  40579c:	mov    rdx,rsi
  40579f:	mov    ecx,DWORD PTR [rax+0x14]
  4057a2:	cmp    rcx,rsi
  4057a5:	jb     4057ed <flatcc_builder_truncate_vector@@Base+0x5d>
  4057a7:	sub    ecx,edx
  4057a9:	mov    DWORD PTR [rax+0x14],ecx
  4057ac:	mov    rax,QWORD PTR [rdi+0x30]
  4057b0:	imul   edx,DWORD PTR [rax+0x10]
  4057b4:	mov    eax,DWORD PTR [rdi+0x20]
  4057b7:	sub    eax,edx
  4057b9:	mov    DWORD PTR [rdi+0x20],eax
  4057bc:	add    rax,QWORD PTR [rdi+0x18]
  4057c0:	mov    rdi,rax
  4057c3:	xor    esi,esi
  4057c5:	call   403070 <memset@plt>
  4057ca:	xor    eax,eax
  4057cc:	pop    rcx
  4057cd:	ret    
  4057ce:	lea    rdi,[rip+0x5fca]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  4057d5:	lea    rsi,[rip+0x5c86]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4057dc:	lea    rcx,[rip+0x6276]        # 40ba59 <flatcc_builder_padding_base@@Base+0x879>
  4057e3:	mov    edx,0x3d9
  4057e8:	call   403060 <__assert_fail@plt>
  4057ed:	lea    rdi,[rip+0x62a4]        # 40ba98 <flatcc_builder_padding_base@@Base+0x8b8>
  4057f4:	lea    rsi,[rip+0x5c67]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4057fb:	lea    rcx,[rip+0x6257]        # 40ba59 <flatcc_builder_padding_base@@Base+0x879>
  405802:	mov    edx,0x3da
  405807:	call   403060 <__assert_fail@plt>
  40580c:	nop    DWORD PTR [rax+0x0]

0000000000405810 <flatcc_builder_truncate_offset_vector@@Base>:
  405810:	push   rax
  405811:	mov    rax,QWORD PTR [rdi+0x30]
  405815:	cmp    WORD PTR [rax+0xe],0x5
  40581a:	jne    40584b <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  40581c:	mov    rdx,rsi
  40581f:	mov    ecx,DWORD PTR [rax+0x14]
  405822:	sub    ecx,edx
  405824:	jb     40586a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  405826:	mov    DWORD PTR [rax+0x14],ecx
  405829:	mov    rax,QWORD PTR [rdi+0x30]
  40582d:	imul   edx,DWORD PTR [rax+0x10]
  405831:	mov    eax,DWORD PTR [rdi+0x20]
  405834:	sub    eax,edx
  405836:	mov    DWORD PTR [rdi+0x20],eax
  405839:	add    rax,QWORD PTR [rdi+0x18]
  40583d:	mov    rdi,rax
  405840:	xor    esi,esi
  405842:	call   403070 <memset@plt>
  405847:	xor    eax,eax
  405849:	pop    rcx
  40584a:	ret    
  40584b:	lea    rdi,[rip+0x6046]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405852:	lea    rsi,[rip+0x5c09]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405859:	lea    rcx,[rip+0x625c]        # 40babc <flatcc_builder_padding_base@@Base+0x8dc>
  405860:	mov    edx,0x3e2
  405865:	call   403060 <__assert_fail@plt>
  40586a:	lea    rdi,[rip+0x6291]        # 40bb02 <flatcc_builder_padding_base@@Base+0x922>
  405871:	lea    rsi,[rip+0x5bea]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405878:	lea    rcx,[rip+0x623d]        # 40babc <flatcc_builder_padding_base@@Base+0x8dc>
  40587f:	mov    edx,0x3e3
  405884:	call   403060 <__assert_fail@plt>
  405889:	nop    DWORD PTR [rax+0x0]

0000000000405890 <flatcc_builder_truncate_string@@Base>:
  405890:	push   rax
  405891:	mov    rax,QWORD PTR [rdi+0x30]
  405895:	cmp    WORD PTR [rax+0xe],0x6
  40589a:	jne    4058c5 <flatcc_builder_truncate_string@@Base+0x35>
  40589c:	mov    ecx,DWORD PTR [rax+0x14]
  40589f:	cmp    rcx,rsi
  4058a2:	jb     4058e4 <flatcc_builder_truncate_string@@Base+0x54>
  4058a4:	sub    ecx,esi
  4058a6:	mov    DWORD PTR [rax+0x14],ecx
  4058a9:	mov    eax,DWORD PTR [rdi+0x20]
  4058ac:	sub    eax,esi
  4058ae:	mov    DWORD PTR [rdi+0x20],eax
  4058b1:	add    rax,QWORD PTR [rdi+0x18]
  4058b5:	mov    edx,esi
  4058b7:	mov    rdi,rax
  4058ba:	xor    esi,esi
  4058bc:	call   403070 <memset@plt>
  4058c1:	xor    eax,eax
  4058c3:	pop    rcx
  4058c4:	ret    
  4058c5:	lea    rdi,[rip+0x60d5]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  4058cc:	lea    rsi,[rip+0x5b8f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4058d3:	lea    rcx,[rip+0x6263]        # 40bb3d <flatcc_builder_padding_base@@Base+0x95d>
  4058da:	mov    edx,0x3eb
  4058df:	call   403060 <__assert_fail@plt>
  4058e4:	lea    rdi,[rip+0x6291]        # 40bb7c <flatcc_builder_padding_base@@Base+0x99c>
  4058eb:	lea    rsi,[rip+0x5b70]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4058f2:	lea    rcx,[rip+0x6244]        # 40bb3d <flatcc_builder_padding_base@@Base+0x95d>
  4058f9:	mov    edx,0x3ec
  4058fe:	call   403060 <__assert_fail@plt>
  405903:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40590d:	nop    DWORD PTR [rax]

0000000000405910 <flatcc_builder_start_vector@@Base>:
  405910:	push   r15
  405912:	push   r14
  405914:	push   rbx
  405915:	mov    r14,rcx
  405918:	mov    r15,rsi
  40591b:	mov    rbx,rdi
  40591e:	cmp    dx,0x4
  405922:	mov    esi,0x4
  405927:	cmova  esi,edx
  40592a:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  40592f:	mov    ecx,eax
  405931:	mov    eax,0xffffffff
  405936:	test   ecx,ecx
  405938:	jne    405986 <flatcc_builder_start_vector@@Base+0x76>
  40593a:	mov    rax,QWORD PTR [rbx+0x30]
  40593e:	mov    DWORD PTR [rax+0x10],r15d
  405942:	mov    rax,QWORD PTR [rbx+0x30]
  405946:	mov    DWORD PTR [rax+0x14],0x0
  40594d:	mov    rax,QWORD PTR [rbx+0x30]
  405951:	mov    DWORD PTR [rax+0x18],r14d
  405955:	mov    rax,QWORD PTR [rbx+0x30]
  405959:	mov    WORD PTR [rax+0xe],0x4
  40595f:	mov    ecx,DWORD PTR [rbx+0x28]
  405962:	mov    edx,DWORD PTR [rbx+0x70]
  405965:	sub    edx,ecx
  405967:	add    rcx,QWORD PTR [rbx+0x68]
  40596b:	mov    QWORD PTR [rbx+0x18],rcx
  40596f:	cmp    edx,0xfffffffc
  405972:	mov    ecx,0xfffffffc
  405977:	cmovb  ecx,edx
  40597a:	mov    DWORD PTR [rbx+0x24],ecx
  40597d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405984:	xor    eax,eax
  405986:	pop    rbx
  405987:	pop    r14
  405989:	pop    r15
  40598b:	ret    
  40598c:	nop    DWORD PTR [rax+0x0]

0000000000405990 <flatcc_builder_start_offset_vector@@Base>:
  405990:	push   rbx
  405991:	mov    rbx,rdi
  405994:	mov    esi,0x4
  405999:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  40599e:	mov    ecx,eax
  4059a0:	mov    eax,0xffffffff
  4059a5:	test   ecx,ecx
  4059a7:	je     4059ab <flatcc_builder_start_offset_vector@@Base+0x1b>
  4059a9:	pop    rbx
  4059aa:	ret    
  4059ab:	mov    rax,QWORD PTR [rbx+0x30]
  4059af:	mov    DWORD PTR [rax+0x10],0x4
  4059b6:	mov    rax,QWORD PTR [rbx+0x30]
  4059ba:	mov    DWORD PTR [rax+0x14],0x0
  4059c1:	mov    rax,QWORD PTR [rbx+0x30]
  4059c5:	mov    WORD PTR [rax+0xe],0x5
  4059cb:	mov    ecx,DWORD PTR [rbx+0x28]
  4059ce:	mov    edx,DWORD PTR [rbx+0x70]
  4059d1:	sub    edx,ecx
  4059d3:	add    rcx,QWORD PTR [rbx+0x68]
  4059d7:	mov    QWORD PTR [rbx+0x18],rcx
  4059db:	cmp    edx,0xfffffffc
  4059de:	mov    ecx,0xfffffffc
  4059e3:	cmovb  ecx,edx
  4059e6:	mov    DWORD PTR [rbx+0x24],ecx
  4059e9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4059f0:	xor    eax,eax
  4059f2:	pop    rbx
  4059f3:	ret    
  4059f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4059fe:	xchg   ax,ax

0000000000405a00 <flatcc_builder_create_offset_vector@@Base>:
  405a00:	push   r15
  405a02:	push   r14
  405a04:	push   r12
  405a06:	push   rbx
  405a07:	push   rax
  405a08:	mov    r14,rdx
  405a0b:	mov    r15,rsi
  405a0e:	mov    rbx,rdi
  405a11:	mov    esi,0x4
  405a16:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405a1b:	test   eax,eax
  405a1d:	je     405a2d <flatcc_builder_create_offset_vector@@Base+0x2d>
  405a1f:	xor    eax,eax
  405a21:	add    rsp,0x8
  405a25:	pop    rbx
  405a26:	pop    r12
  405a28:	pop    r14
  405a2a:	pop    r15
  405a2c:	ret    
  405a2d:	mov    rax,QWORD PTR [rbx+0x30]
  405a31:	mov    DWORD PTR [rax+0x10],0x4
  405a38:	mov    rax,QWORD PTR [rbx+0x30]
  405a3c:	mov    DWORD PTR [rax+0x14],0x0
  405a43:	mov    rax,QWORD PTR [rbx+0x30]
  405a47:	mov    WORD PTR [rax+0xe],0x5
  405a4d:	mov    ecx,DWORD PTR [rbx+0x28]
  405a50:	mov    edx,DWORD PTR [rbx+0x70]
  405a53:	sub    edx,ecx
  405a55:	add    rcx,QWORD PTR [rbx+0x68]
  405a59:	mov    QWORD PTR [rbx+0x18],rcx
  405a5d:	cmp    edx,0xfffffffc
  405a60:	mov    ecx,0xfffffffc
  405a65:	cmovb  ecx,edx
  405a68:	mov    DWORD PTR [rbx+0x24],ecx
  405a6b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a72:	mov    ecx,DWORD PTR [rax+0x14]
  405a75:	add    ecx,r14d
  405a78:	jb     405b28 <flatcc_builder_create_offset_vector@@Base+0x128>
  405a7e:	cmp    ecx,0x40000000
  405a84:	jae    405b28 <flatcc_builder_create_offset_vector@@Base+0x128>
  405a8a:	mov    DWORD PTR [rax+0x14],ecx
  405a8d:	mov    r12d,DWORD PTR [rbx+0x20]
  405a91:	lea    eax,[r12+r14*4]
  405a95:	mov    DWORD PTR [rbx+0x20],eax
  405a98:	cmp    eax,DWORD PTR [rbx+0x24]
  405a9b:	jae    405aab <flatcc_builder_create_offset_vector@@Base+0xab>
  405a9d:	mov    rdi,QWORD PTR [rbx+0x18]
  405aa1:	add    rdi,r12
  405aa4:	jne    405b06 <flatcc_builder_create_offset_vector@@Base+0x106>
  405aa6:	jmp    405a1f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405aab:	inc    eax
  405aad:	lea    rsi,[rbx+0x68]
  405ab1:	mov    rdi,QWORD PTR [rbx+0x40]
  405ab5:	mov    edx,DWORD PTR [rbx+0x28]
  405ab8:	add    rdx,rax
  405abb:	mov    ecx,0x1
  405ac0:	mov    r8d,0x1
  405ac6:	call   QWORD PTR [rbx+0x50]
  405ac9:	test   eax,eax
  405acb:	jne    405a1f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405ad1:	mov    eax,DWORD PTR [rbx+0x28]
  405ad4:	mov    rdi,rax
  405ad7:	add    rdi,QWORD PTR [rbx+0x68]
  405adb:	mov    QWORD PTR [rbx+0x18],rdi
  405adf:	mov    ecx,DWORD PTR [rbx+0x70]
  405ae2:	sub    ecx,eax
  405ae4:	cmp    ecx,0xfffffffc
  405ae7:	mov    eax,0xfffffffc
  405aec:	cmovb  eax,ecx
  405aef:	mov    DWORD PTR [rbx+0x24],eax
  405af2:	mov    rax,QWORD PTR [rbx+0x30]
  405af6:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405afd:	add    rdi,r12
  405b00:	je     405a1f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405b06:	shl    r14,0x2
  405b0a:	mov    rsi,r15
  405b0d:	mov    rdx,r14
  405b10:	call   403090 <memcpy@plt>
  405b15:	mov    rdi,rbx
  405b18:	add    rsp,0x8
  405b1c:	pop    rbx
  405b1d:	pop    r12
  405b1f:	pop    r14
  405b21:	pop    r15
  405b23:	jmp    405b50 <flatcc_builder_end_offset_vector@@Base>
  405b28:	lea    rdi,[rip+0x69fc]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405b2f:	lea    rsi,[rip+0x592c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405b36:	lea    rcx,[rip+0x6a09]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405b3d:	mov    edx,0x37c
  405b42:	call   403060 <__assert_fail@plt>
  405b47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b50 <flatcc_builder_end_offset_vector@@Base>:
  405b50:	push   rbp
  405b51:	push   rbx
  405b52:	push   rax
  405b53:	mov    rax,QWORD PTR [rdi+0x30]
  405b57:	cmp    WORD PTR [rax+0xe],0x5
  405b5c:	jne    405bea <flatcc_builder_end_offset_vector@@Base+0x9a>
  405b62:	mov    rbx,rdi
  405b65:	mov    rsi,QWORD PTR [rdi+0x18]
  405b69:	mov    edx,DWORD PTR [rax+0x14]
  405b6c:	xor    ecx,ecx
  405b6e:	call   406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405b73:	mov    ebp,eax
  405b75:	test   eax,eax
  405b77:	je     405be1 <flatcc_builder_end_offset_vector@@Base+0x91>
  405b79:	mov    rdi,QWORD PTR [rbx+0x18]
  405b7d:	mov    edx,DWORD PTR [rbx+0x20]
  405b80:	xor    esi,esi
  405b82:	call   403070 <memset@plt>
  405b87:	mov    rax,QWORD PTR [rbx+0x30]
  405b8b:	mov    ecx,DWORD PTR [rax+0x8]
  405b8e:	mov    DWORD PTR [rbx+0x20],ecx
  405b91:	mov    ecx,DWORD PTR [rax]
  405b93:	mov    DWORD PTR [rbx+0x28],ecx
  405b96:	mov    edx,DWORD PTR [rax+0x4]
  405b99:	mov    rsi,rcx
  405b9c:	add    rsi,QWORD PTR [rbx+0x68]
  405ba0:	mov    QWORD PTR [rbx+0x18],rsi
  405ba4:	mov    esi,DWORD PTR [rbx+0x70]
  405ba7:	sub    esi,ecx
  405ba9:	cmp    esi,edx
  405bab:	cmova  esi,edx
  405bae:	mov    DWORD PTR [rbx+0x24],esi
  405bb1:	movzx  ecx,WORD PTR [rbx+0xea]
  405bb8:	cmp    WORD PTR [rbx+0xe8],cx
  405bbf:	jae    405bc8 <flatcc_builder_end_offset_vector@@Base+0x78>
  405bc1:	mov    WORD PTR [rbx+0xe8],cx
  405bc8:	movzx  ecx,WORD PTR [rax+0xc]
  405bcc:	mov    WORD PTR [rbx+0xea],cx
  405bd3:	add    rax,0xffffffffffffffdc
  405bd7:	mov    QWORD PTR [rbx+0x30],rax
  405bdb:	dec    DWORD PTR [rbx+0x104]
  405be1:	mov    eax,ebp
  405be3:	add    rsp,0x8
  405be7:	pop    rbx
  405be8:	pop    rbp
  405be9:	ret    
  405bea:	lea    rdi,[rip+0x5ca7]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405bf1:	lea    rsi,[rip+0x586a]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405bf8:	lea    rcx,[rip+0x62c8]        # 40bec7 <flatcc_builder_padding_base@@Base+0xce7>
  405bff:	mov    edx,0x5c8
  405c04:	call   403060 <__assert_fail@plt>
  405c09:	nop    DWORD PTR [rax+0x0]

0000000000405c10 <flatcc_builder_start_string@@Base>:
  405c10:	push   rbx
  405c11:	mov    rbx,rdi
  405c14:	mov    esi,0x1
  405c19:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405c1e:	mov    ecx,eax
  405c20:	mov    eax,0xffffffff
  405c25:	test   ecx,ecx
  405c27:	je     405c2b <flatcc_builder_start_string@@Base+0x1b>
  405c29:	pop    rbx
  405c2a:	ret    
  405c2b:	mov    rax,QWORD PTR [rbx+0x30]
  405c2f:	mov    DWORD PTR [rax+0x10],0x1
  405c36:	mov    rax,QWORD PTR [rbx+0x30]
  405c3a:	mov    DWORD PTR [rax+0x14],0x0
  405c41:	mov    rax,QWORD PTR [rbx+0x30]
  405c45:	mov    WORD PTR [rax+0xe],0x6
  405c4b:	mov    ecx,DWORD PTR [rbx+0x28]
  405c4e:	mov    edx,DWORD PTR [rbx+0x70]
  405c51:	sub    edx,ecx
  405c53:	add    rcx,QWORD PTR [rbx+0x68]
  405c57:	mov    QWORD PTR [rbx+0x18],rcx
  405c5b:	cmp    edx,0xfffffffc
  405c5e:	mov    ecx,0xfffffffc
  405c63:	cmovb  ecx,edx
  405c66:	mov    DWORD PTR [rbx+0x24],ecx
  405c69:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405c70:	xor    eax,eax
  405c72:	pop    rbx
  405c73:	ret    
  405c74:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c7e:	xchg   ax,ax

0000000000405c80 <flatcc_builder_reserve_table@@Base>:
  405c80:	push   r15
  405c82:	push   r14
  405c84:	push   rbx
  405c85:	test   esi,esi
  405c87:	js     405d34 <flatcc_builder_reserve_table@@Base+0xb4>
  405c8d:	mov    r14d,esi
  405c90:	mov    r15,rdi
  405c93:	mov    rax,QWORD PTR [rdi+0x30]
  405c97:	movzx  ebx,WORD PTR [rax+0x1c]
  405c9b:	add    ebx,ebx
  405c9d:	add    ebx,DWORD PTR [rax+0x10]
  405ca0:	lea    edx,[r14+r14*1]
  405ca4:	add    edx,0x4
  405ca7:	add    rdx,rbx
  405caa:	cmp    rdx,QWORD PTR [rdi+0x60]
  405cae:	jbe    405ccc <flatcc_builder_reserve_table@@Base+0x4c>
  405cb0:	lea    rsi,[r15+0x58]
  405cb4:	mov    rdi,QWORD PTR [r15+0x40]
  405cb8:	mov    ecx,0x1
  405cbd:	xor    r8d,r8d
  405cc0:	call   QWORD PTR [r15+0x50]
  405cc4:	test   eax,eax
  405cc6:	jne    405d53 <flatcc_builder_reserve_table@@Base+0xd3>
  405ccc:	add    rbx,QWORD PTR [r15+0x58]
  405cd0:	mov    QWORD PTR [r15+0x8],rbx
  405cd4:	je     405d29 <flatcc_builder_reserve_table@@Base+0xa9>
  405cd6:	add    r14d,r14d
  405cd9:	add    rbx,0x4
  405cdd:	mov    QWORD PTR [r15+0x8],rbx
  405ce1:	mov    rax,QWORD PTR [r15+0x30]
  405ce5:	mov    ebx,DWORD PTR [rax+0x14]
  405ce8:	or     r14d,0x1
  405cec:	add    r14,rbx
  405cef:	cmp    r14,QWORD PTR [r15+0x90]
  405cf6:	jbe    405d16 <flatcc_builder_reserve_table@@Base+0x96>
  405cf8:	lea    rsi,[r15+0x88]
  405cff:	mov    rdi,QWORD PTR [r15+0x40]
  405d03:	mov    rdx,r14
  405d06:	xor    ecx,ecx
  405d08:	mov    r8d,0x3
  405d0e:	call   QWORD PTR [r15+0x50]
  405d12:	test   eax,eax
  405d14:	jne    405d53 <flatcc_builder_reserve_table@@Base+0xd3>
  405d16:	xor    eax,eax
  405d18:	add    rbx,QWORD PTR [r15+0x88]
  405d1f:	mov    QWORD PTR [r15],rbx
  405d22:	sete   al
  405d25:	neg    eax
  405d27:	jmp    405d2e <flatcc_builder_reserve_table@@Base+0xae>
  405d29:	mov    eax,0xffffffff
  405d2e:	pop    rbx
  405d2f:	pop    r14
  405d31:	pop    r15
  405d33:	ret    
  405d34:	lea    rdi,[rip+0x5ea4]        # 40bbdf <flatcc_builder_padding_base@@Base+0x9ff>
  405d3b:	lea    rsi,[rip+0x5720]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405d42:	lea    rcx,[rip+0x5e55]        # 40bb9e <flatcc_builder_padding_base@@Base+0x9be>
  405d49:	mov    edx,0x429
  405d4e:	call   403060 <__assert_fail@plt>
  405d53:	lea    rdi,[rip+0x68c8]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405d5a:	lea    rsi,[rip+0x5701]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405d61:	lea    rcx,[rip+0x66f4]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  405d68:	mov    edx,0x134
  405d6d:	call   403060 <__assert_fail@plt>
  405d72:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d7c:	nop    DWORD PTR [rax+0x0]

0000000000405d80 <flatcc_builder_start_table@@Base>:
  405d80:	push   rbp
  405d81:	push   r15
  405d83:	push   r14
  405d85:	push   rbx
  405d86:	push   rax
  405d87:	mov    r15d,esi
  405d8a:	mov    rbx,rdi
  405d8d:	mov    esi,0x4
  405d92:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405d97:	mov    r14d,0xffffffff
  405d9d:	test   eax,eax
  405d9f:	je     405daf <flatcc_builder_start_table@@Base+0x2f>
  405da1:	mov    eax,r14d
  405da4:	add    rsp,0x8
  405da8:	pop    rbx
  405da9:	pop    r14
  405dab:	pop    r15
  405dad:	pop    rbp
  405dae:	ret    
  405daf:	mov    eax,DWORD PTR [rbx+0x8]
  405db2:	sub    eax,DWORD PTR [rbx+0x58]
  405db5:	mov    rcx,QWORD PTR [rbx+0x30]
  405db9:	mov    DWORD PTR [rcx+0x10],eax
  405dbc:	mov    eax,DWORD PTR [rbx]
  405dbe:	sub    eax,DWORD PTR [rbx+0x88]
  405dc4:	mov    rcx,QWORD PTR [rbx+0x30]
  405dc8:	mov    DWORD PTR [rcx+0x14],eax
  405dcb:	mov    eax,DWORD PTR [rbx+0x14]
  405dce:	mov    rcx,QWORD PTR [rbx+0x30]
  405dd2:	mov    DWORD PTR [rcx+0x18],eax
  405dd5:	movzx  eax,WORD PTR [rbx+0x10]
  405dd9:	mov    rcx,QWORD PTR [rbx+0x30]
  405ddd:	mov    WORD PTR [rcx+0x1c],ax
  405de1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405de8:	mov    WORD PTR [rbx+0x10],0x0
  405dee:	mov    rax,QWORD PTR [rbx+0x30]
  405df2:	mov    WORD PTR [rax+0xe],0x3
  405df8:	movzx  ebp,WORD PTR [rax+0x1c]
  405dfc:	add    ebp,ebp
  405dfe:	add    ebp,DWORD PTR [rax+0x10]
  405e01:	lea    edx,[r15+r15*1]
  405e05:	add    edx,0x4
  405e08:	add    rdx,rbp
  405e0b:	cmp    rdx,QWORD PTR [rbx+0x60]
  405e0f:	jbe    405e2c <flatcc_builder_start_table@@Base+0xac>
  405e11:	lea    rsi,[rbx+0x58]
  405e15:	mov    rdi,QWORD PTR [rbx+0x40]
  405e19:	mov    ecx,0x1
  405e1e:	xor    r8d,r8d
  405e21:	call   QWORD PTR [rbx+0x50]
  405e24:	test   eax,eax
  405e26:	jne    405ec0 <flatcc_builder_start_table@@Base+0x140>
  405e2c:	add    rbp,QWORD PTR [rbx+0x58]
  405e30:	mov    QWORD PTR [rbx+0x8],rbp
  405e34:	je     405da1 <flatcc_builder_start_table@@Base+0x21>
  405e3a:	add    r15d,r15d
  405e3d:	add    rbp,0x4
  405e41:	mov    QWORD PTR [rbx+0x8],rbp
  405e45:	mov    rax,QWORD PTR [rbx+0x30]
  405e49:	mov    ebp,DWORD PTR [rax+0x14]
  405e4c:	or     r15d,0x1
  405e50:	add    r15,rbp
  405e53:	cmp    r15,QWORD PTR [rbx+0x90]
  405e5a:	jbe    405e79 <flatcc_builder_start_table@@Base+0xf9>
  405e5c:	lea    rsi,[rbx+0x88]
  405e63:	mov    rdi,QWORD PTR [rbx+0x40]
  405e67:	mov    rdx,r15
  405e6a:	xor    ecx,ecx
  405e6c:	mov    r8d,0x3
  405e72:	call   QWORD PTR [rbx+0x50]
  405e75:	test   eax,eax
  405e77:	jne    405ec0 <flatcc_builder_start_table@@Base+0x140>
  405e79:	add    rbp,QWORD PTR [rbx+0x88]
  405e80:	mov    QWORD PTR [rbx],rbp
  405e83:	je     405da1 <flatcc_builder_start_table@@Base+0x21>
  405e89:	mov    eax,DWORD PTR [rbx+0x28]
  405e8c:	mov    rcx,rax
  405e8f:	add    rcx,QWORD PTR [rbx+0x68]
  405e93:	mov    QWORD PTR [rbx+0x18],rcx
  405e97:	mov    ecx,DWORD PTR [rbx+0x70]
  405e9a:	sub    ecx,eax
  405e9c:	cmp    ecx,0xfffc
  405ea2:	mov    eax,0xfffc
  405ea7:	cmovb  eax,ecx
  405eaa:	mov    DWORD PTR [rbx+0x24],eax
  405ead:	mov    rax,QWORD PTR [rbx+0x30]
  405eb1:	mov    DWORD PTR [rax+0x4],0xfffc
  405eb8:	xor    r14d,r14d
  405ebb:	jmp    405da1 <flatcc_builder_start_table@@Base+0x21>
  405ec0:	lea    rdi,[rip+0x675b]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405ec7:	lea    rsi,[rip+0x5594]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405ece:	lea    rcx,[rip+0x6587]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  405ed5:	mov    edx,0x134
  405eda:	call   403060 <__assert_fail@plt>
  405edf:	nop

0000000000405ee0 <flatcc_builder_create_vtable@@Base>:
  405ee0:	push   r14
  405ee2:	push   rbx
  405ee3:	sub    rsp,0x98
  405eea:	mov    r14,rdi
  405eed:	mov    QWORD PTR [rsp+0x8],0x0
  405ef6:	mov    DWORD PTR [rsp+0x10],0x0
  405efe:	test   dx,dx
  405f01:	je     405f68 <flatcc_builder_create_vtable@@Base+0x88>
  405f03:	movzx  r8d,dx
  405f07:	mov    QWORD PTR [rsp+0x8],r8
  405f0c:	mov    QWORD PTR [rsp+0x18],rsi
  405f11:	mov    QWORD PTR [rsp+0x20],r8
  405f16:	mov    DWORD PTR [rsp+0x10],0x1
  405f1e:	mov    edx,0x1
  405f23:	cmp    DWORD PTR [r14+0x100],0x0
  405f2b:	jne    405f77 <flatcc_builder_create_vtable@@Base+0x97>
  405f2d:	cmp    DWORD PTR [r14+0x124],0x0
  405f35:	jne    405f77 <flatcc_builder_create_vtable@@Base+0x97>
  405f37:	mov    ebx,DWORD PTR [r14+0xf4]
  405f3e:	lea    eax,[r8+rbx*1]
  405f42:	mov    DWORD PTR [r14+0xf4],eax
  405f49:	mov    rdi,QWORD PTR [r14+0x38]
  405f4d:	lea    rsi,[rsp+0x18]
  405f52:	mov    ecx,ebx
  405f54:	call   QWORD PTR [r14+0x48]
  405f58:	test   eax,eax
  405f5a:	jne    40600b <flatcc_builder_create_vtable@@Base+0x12b>
  405f60:	xor    eax,eax
  405f62:	inc    ebx
  405f64:	jne    405fbc <flatcc_builder_create_vtable@@Base+0xdc>
  405f66:	jmp    405fc2 <flatcc_builder_create_vtable@@Base+0xe2>
  405f68:	xor    edx,edx
  405f6a:	xor    r8d,r8d
  405f6d:	cmp    DWORD PTR [r14+0x100],0x0
  405f75:	je     405f2d <flatcc_builder_create_vtable@@Base+0x4d>
  405f77:	cmp    r8,0x11
  405f7b:	setb   al
  405f7e:	lea    rcx,[r8-0x10]
  405f82:	shr    rcx,0x20
  405f86:	sete   cl
  405f89:	test   r8d,r8d
  405f8c:	je     405fcd <flatcc_builder_create_vtable@@Base+0xed>
  405f8e:	or     al,cl
  405f90:	je     405fcd <flatcc_builder_create_vtable@@Base+0xed>
  405f92:	mov    ebx,DWORD PTR [r14+0xf0]
  405f99:	sub    ebx,r8d
  405f9c:	mov    rdi,QWORD PTR [r14+0x38]
  405fa0:	lea    rsi,[rsp+0x18]
  405fa5:	mov    ecx,ebx
  405fa7:	call   QWORD PTR [r14+0x48]
  405fab:	test   eax,eax
  405fad:	jne    405fec <flatcc_builder_create_vtable@@Base+0x10c>
  405faf:	mov    DWORD PTR [r14+0xf0],ebx
  405fb6:	test   ebx,ebx
  405fb8:	je     405fc0 <flatcc_builder_create_vtable@@Base+0xe0>
  405fba:	inc    ebx
  405fbc:	mov    eax,ebx
  405fbe:	jmp    405fc2 <flatcc_builder_create_vtable@@Base+0xe2>
  405fc0:	xor    eax,eax
  405fc2:	add    rsp,0x98
  405fc9:	pop    rbx
  405fca:	pop    r14
  405fcc:	ret    
  405fcd:	lea    rdi,[rip+0x664e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405fd4:	lea    rsi,[rip+0x5487]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405fdb:	lea    rcx,[rip+0x64ff]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  405fe2:	mov    edx,0x287
  405fe7:	call   403060 <__assert_fail@plt>
  405fec:	lea    rdi,[rip+0x662f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405ff3:	lea    rsi,[rip+0x5468]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405ffa:	lea    rcx,[rip+0x64e0]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406001:	mov    edx,0x28b
  406006:	call   403060 <__assert_fail@plt>
  40600b:	lea    rdi,[rip+0x6610]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406012:	lea    rsi,[rip+0x5449]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406019:	lea    rcx,[rip+0x657d]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  406020:	mov    edx,0x2a5
  406025:	call   403060 <__assert_fail@plt>
  40602a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406030 <flatcc_builder_create_cached_vtable@@Base>:
  406030:	push   rbp
  406031:	push   r15
  406033:	push   r14
  406035:	push   r13
  406037:	push   r12
  406039:	push   rbx
  40603a:	sub    rsp,0x28
  40603e:	mov    r15d,ecx
  406041:	mov    r12d,edx
  406044:	mov    QWORD PTR [rsp+0x18],rsi
  406049:	mov    r14,rdi
  40604c:	mov    rax,QWORD PTR [rdi+0xd8]
  406053:	test   rax,rax
  406056:	je     406126 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  40605c:	neg    al
  40605e:	shrx   r13d,r15d,eax
  406063:	shl    r13,0x2
  406067:	add    r13,QWORD PTR [r14+0xa8]
  40606e:	je     4061fa <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  406074:	mov    ebx,DWORD PTR [r13+0x0]
  406078:	movzx  eax,r12w
  40607c:	mov    QWORD PTR [rsp],rax
  406080:	test   ebx,ebx
  406082:	je     406201 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  406088:	mov    rbp,QWORD PTR [r14+0x78]
  40608c:	mov    QWORD PTR [rsp+0x10],r14
  406091:	mov    r15,QWORD PTR [r14+0xb8]
  406098:	xor    eax,eax
  40609a:	mov    QWORD PTR [rsp+0x20],rax
  40609f:	mov    QWORD PTR [rsp+0x8],r13
  4060a4:	jmp    4060c3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  4060a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4060b0:	mov    ebx,DWORD PTR [r14+0xc]
  4060b4:	add    r14,0xc
  4060b8:	mov    r13,r14
  4060bb:	test   ebx,ebx
  4060bd:	je     4061e9 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  4060c3:	mov    eax,ebx
  4060c5:	lea    r14,[r15+rax*1]
  4060c9:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  4060ce:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  4060d4:	jne    4060b0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4060d6:	add    rsi,rbp
  4060d9:	mov    rdi,QWORD PTR [rsp+0x18]
  4060de:	mov    rdx,QWORD PTR [rsp]
  4060e2:	call   4030b0 <bcmp@plt>
  4060e7:	test   eax,eax
  4060e9:	jne    4060b0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4060eb:	mov    eax,DWORD PTR [r14+0x4]
  4060ef:	mov    rcx,QWORD PTR [rsp+0x10]
  4060f4:	cmp    eax,DWORD PTR [rcx+0x100]
  4060fa:	je     40636a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  406100:	lea    r13,[r14+0xc]
  406104:	mov    ebx,DWORD PTR [r14+0xc]
  406108:	mov    rax,r14
  40610b:	mov    QWORD PTR [rsp+0x20],r14
  406110:	test   ebx,ebx
  406112:	jne    4060c3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  406114:	mov    r15,r14
  406117:	mov    r14,QWORD PTR [rsp+0x10]
  40611c:	mov    r13,QWORD PTR [rsp+0x8]
  406121:	jmp    406204 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  406126:	cmp    DWORD PTR [r14+0xe4],0x0
  40612e:	jne    4063a8 <flatcc_builder_create_cached_vtable@@Base+0x378>
  406134:	lea    r13,[r14+0xb8]
  40613b:	cmp    QWORD PTR [r14+0xc0],0xf
  406143:	ja     406165 <flatcc_builder_create_cached_vtable@@Base+0x135>
  406145:	mov    rdi,QWORD PTR [r14+0x40]
  406149:	mov    edx,0x10
  40614e:	mov    rsi,r13
  406151:	xor    ecx,ecx
  406153:	mov    r8d,0x6
  406159:	call   QWORD PTR [r14+0x50]
  40615d:	test   eax,eax
  40615f:	jne    406389 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406165:	xor    ebx,ebx
  406167:	cmp    QWORD PTR [r13+0x0],0x0
  40616c:	je     406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406172:	lea    rsi,[r14+0xa8]
  406179:	mov    DWORD PTR [r14+0xe4],0x10
  406184:	mov    rdi,QWORD PTR [r14+0x40]
  406188:	mov    ebp,0x100
  40618d:	mov    edx,0x100
  406192:	mov    ecx,0x1
  406197:	mov    r8d,0x5
  40619d:	call   QWORD PTR [r14+0x50]
  4061a1:	test   eax,eax
  4061a3:	jne    406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4061a9:	mov    rax,QWORD PTR [r14+0xb0]
  4061b0:	mov    rcx,rbp
  4061b3:	add    rbp,rbp
  4061b6:	cmp    rbp,rax
  4061b9:	jbe    4061b0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  4061bb:	shr    rcx,0x2
  4061bf:	mov    rax,0xffffffffffffffff
  4061c6:	mov    edx,0x1
  4061cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4061d0:	inc    rax
  4061d3:	shlx   rsi,rdx,rax
  4061d8:	cmp    rsi,rcx
  4061db:	jb     4061d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4061dd:	mov    QWORD PTR [r14+0xd8],rax
  4061e4:	jmp    40605c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  4061e9:	mov    r14,QWORD PTR [rsp+0x10]
  4061ee:	mov    r13,QWORD PTR [rsp+0x8]
  4061f3:	mov    r15,QWORD PTR [rsp+0x20]
  4061f8:	jmp    406204 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  4061fa:	xor    ebx,ebx
  4061fc:	jmp    406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406201:	xor    r15d,r15d
  406204:	mov    r12d,DWORD PTR [r14+0xe4]
  40620b:	lea    rbp,[r14+0xb8]
  406212:	lea    rdx,[r12+0x10]
  406217:	cmp    rdx,QWORD PTR [r14+0xc0]
  40621e:	jbe    40623b <flatcc_builder_create_cached_vtable@@Base+0x20b>
  406220:	mov    rdi,QWORD PTR [r14+0x40]
  406224:	mov    rsi,rbp
  406227:	xor    ecx,ecx
  406229:	mov    r8d,0x6
  40622f:	call   QWORD PTR [r14+0x50]
  406233:	test   eax,eax
  406235:	jne    406389 <flatcc_builder_create_cached_vtable@@Base+0x359>
  40623b:	xor    ebx,ebx
  40623d:	add    r12,QWORD PTR [rbp+0x0]
  406241:	je     406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406247:	mov    eax,DWORD PTR [r14+0xe4]
  40624e:	mov    ecx,DWORD PTR [r14+0x100]
  406255:	lea    edx,[rax+0x10]
  406258:	mov    DWORD PTR [r14+0xe4],edx
  40625f:	mov    DWORD PTR [r12+0x4],ecx
  406264:	mov    ecx,DWORD PTR [r13+0x0]
  406268:	mov    DWORD PTR [r12+0xc],ecx
  40626d:	mov    DWORD PTR [r13+0x0],eax
  406271:	mov    rdi,r14
  406274:	mov    rsi,QWORD PTR [rsp+0x18]
  406279:	mov    rdx,QWORD PTR [rsp]
  40627d:	call   405ee0 <flatcc_builder_create_vtable@@Base>
  406282:	mov    DWORD PTR [r12],eax
  406286:	test   eax,eax
  406288:	je     406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40628e:	test   r15,r15
  406291:	je     4062a1 <flatcc_builder_create_cached_vtable@@Base+0x271>
  406293:	mov    eax,DWORD PTR [r15+0x8]
  406297:	mov    DWORD PTR [r12+0x8],eax
  40629c:	jmp    40634e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4062a1:	mov    rax,QWORD PTR [r14+0x118]
  4062a8:	mov    ebp,DWORD PTR [r14+0xe0]
  4062af:	test   rax,rax
  4062b2:	je     4062f5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  4062b4:	mov    rcx,QWORD PTR [rsp]
  4062b8:	add    ecx,ebp
  4062ba:	cmp    rax,rcx
  4062bd:	jae    4062f5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  4062bf:	cmp    QWORD PTR [r14+0xd8],0x0
  4062c7:	je     40634e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4062cd:	mov    rdi,QWORD PTR [r14+0xa8]
  4062d4:	mov    rdx,QWORD PTR [r14+0xb0]
  4062db:	xor    esi,esi
  4062dd:	call   403070 <memset@plt>
  4062e2:	movabs rax,0x1000000000
  4062ec:	mov    QWORD PTR [r14+0xe0],rax
  4062f3:	jmp    40634e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4062f5:	lea    rbx,[r14+0x78]
  4062f9:	mov    rax,QWORD PTR [rsp]
  4062fd:	lea    rdx,[rax+rbp*1]
  406301:	cmp    rdx,QWORD PTR [r14+0x80]
  406308:	jbe    406321 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  40630a:	mov    rdi,QWORD PTR [r14+0x40]
  40630e:	mov    rsi,rbx
  406311:	xor    ecx,ecx
  406313:	mov    r8d,0x2
  406319:	call   QWORD PTR [r14+0x50]
  40631d:	test   eax,eax
  40631f:	jne    406389 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406321:	add    rbp,QWORD PTR [rbx]
  406324:	je     406363 <flatcc_builder_create_cached_vtable@@Base+0x333>
  406326:	mov    eax,DWORD PTR [r14+0xe0]
  40632d:	mov    DWORD PTR [r12+0x8],eax
  406332:	mov    rdx,QWORD PTR [rsp]
  406336:	mov    ecx,edx
  406338:	add    ecx,eax
  40633a:	mov    DWORD PTR [r14+0xe0],ecx
  406341:	mov    rdi,rbp
  406344:	mov    rsi,QWORD PTR [rsp+0x18]
  406349:	call   403090 <memcpy@plt>
  40634e:	mov    ebx,DWORD PTR [r12]
  406352:	mov    eax,ebx
  406354:	add    rsp,0x28
  406358:	pop    rbx
  406359:	pop    r12
  40635b:	pop    r13
  40635d:	pop    r14
  40635f:	pop    r15
  406361:	pop    rbp
  406362:	ret    
  406363:	mov    ebx,0xffffffff
  406368:	jmp    406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40636a:	mov    rcx,QWORD PTR [rsp+0x8]
  40636f:	cmp    r13,rcx
  406372:	je     406384 <flatcc_builder_create_cached_vtable@@Base+0x354>
  406374:	mov    eax,DWORD PTR [r14+0xc]
  406378:	mov    DWORD PTR [r13+0x0],eax
  40637c:	mov    eax,DWORD PTR [rcx]
  40637e:	mov    DWORD PTR [r14+0xc],eax
  406382:	mov    DWORD PTR [rcx],ebx
  406384:	mov    ebx,DWORD PTR [r14]
  406387:	jmp    406352 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406389:	lea    rdi,[rip+0x6292]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406390:	lea    rsi,[rip+0x50cb]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406397:	lea    rcx,[rip+0x60be]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  40639e:	mov    edx,0x134
  4063a3:	call   403060 <__assert_fail@plt>
  4063a8:	lea    rdi,[rip+0x6237]        # 40c5e6 <flatcc_builder_padding_base@@Base+0x1406>
  4063af:	lea    rsi,[rip+0x50ac]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4063b6:	lea    rcx,[rip+0x6238]        # 40c5f5 <flatcc_builder_padding_base@@Base+0x1415>
  4063bd:	mov    edx,0x156
  4063c2:	call   403060 <__assert_fail@plt>
  4063c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004063d0 <flatcc_builder_create_table@@Base>:
  4063d0:	push   rbp
  4063d1:	push   r14
  4063d3:	push   rbx
  4063d4:	sub    rsp,0xa0
  4063db:	test   r9d,r9d
  4063de:	js     4065f3 <flatcc_builder_create_table@@Base+0x223>
  4063e4:	mov    r14,rdi
  4063e7:	mov    edi,DWORD PTR [rsp+0xc0]
  4063ee:	test   dil,0x1
  4063f2:	je     406612 <flatcc_builder_create_table@@Base+0x242>
  4063f8:	cmp    cx,0x4
  4063fc:	mov    eax,0x4
  406401:	cmova  eax,ecx
  406404:	cmp    WORD PTR [r14+0xe8],ax
  40640c:	jae    406416 <flatcc_builder_create_table@@Base+0x46>
  40640e:	mov    WORD PTR [r14+0xe8],ax
  406416:	mov    ebp,DWORD PTR [r14+0xf0]
  40641d:	sub    ebp,edx
  40641f:	movzx  r10d,ax
  406423:	dec    r10d
  406426:	and    r10d,ebp
  406429:	add    edi,r10d
  40642c:	neg    edi
  40642e:	lea    ecx,[rdi+rbp*1]
  406431:	add    ecx,0xfffffffd
  406434:	mov    DWORD PTR [rsp+0xc],ecx
  406438:	test   r9d,r9d
  40643b:	jle    4064f6 <flatcc_builder_create_table@@Base+0x126>
  406441:	add    ebp,0xfffffffc
  406444:	sub    ebp,r10d
  406447:	mov    ecx,0xfffffffc
  40644c:	sub    ecx,ebp
  40644e:	mov    edi,r9d
  406451:	lea    rbx,[rdi-0x1]
  406455:	mov    r9d,edi
  406458:	and    r9d,0x3
  40645c:	cmp    rbx,0x3
  406460:	jae    40646e <flatcc_builder_create_table@@Base+0x9e>
  406462:	xor    ebx,ebx
  406464:	test   r9,r9
  406467:	jne    4064cd <flatcc_builder_create_table@@Base+0xfd>
  406469:	jmp    4064f6 <flatcc_builder_create_table@@Base+0x126>
  40646e:	sub    rdi,r9
  406471:	xor    ebx,ebx
  406473:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40647d:	nop    DWORD PTR [rax]
  406480:	movzx  eax,WORD PTR [r8+rbx*2]
  406485:	mov    ebp,DWORD PTR [rax+rsi*1]
  406488:	add    ebp,ecx
  40648a:	sub    ebp,eax
  40648c:	mov    DWORD PTR [rax+rsi*1],ebp
  40648f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406495:	mov    ebp,DWORD PTR [rax+rsi*1]
  406498:	add    ebp,ecx
  40649a:	sub    ebp,eax
  40649c:	mov    DWORD PTR [rax+rsi*1],ebp
  40649f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4064a5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064a8:	add    ebp,ecx
  4064aa:	sub    ebp,eax
  4064ac:	mov    DWORD PTR [rax+rsi*1],ebp
  4064af:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4064b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064b8:	add    ebp,ecx
  4064ba:	sub    ebp,eax
  4064bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4064bf:	add    rbx,0x4
  4064c3:	cmp    rdi,rbx
  4064c6:	jne    406480 <flatcc_builder_create_table@@Base+0xb0>
  4064c8:	test   r9,r9
  4064cb:	je     4064f6 <flatcc_builder_create_table@@Base+0x126>
  4064cd:	lea    rdi,[r8+rbx*2]
  4064d1:	xor    ebx,ebx
  4064d3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4064dd:	nop    DWORD PTR [rax]
  4064e0:	movzx  eax,WORD PTR [rdi+rbx*2]
  4064e4:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064e7:	add    ebp,ecx
  4064e9:	sub    ebp,eax
  4064eb:	mov    DWORD PTR [rax+rsi*1],ebp
  4064ee:	inc    rbx
  4064f1:	cmp    r9,rbx
  4064f4:	jne    4064e0 <flatcc_builder_create_table@@Base+0x110>
  4064f6:	mov    QWORD PTR [rsp+0x10],0x4
  4064ff:	lea    rax,[rsp+0xc]
  406504:	mov    QWORD PTR [rsp+0x20],rax
  406509:	mov    QWORD PTR [rsp+0x28],0x4
  406512:	mov    DWORD PTR [rsp+0x18],0x1
  40651a:	test   rdx,rdx
  40651d:	je     4065be <flatcc_builder_create_table@@Base+0x1ee>
  406523:	lea    r8,[rdx+0x4]
  406527:	mov    QWORD PTR [rsp+0x10],r8
  40652c:	mov    QWORD PTR [rsp+0x30],rsi
  406531:	mov    QWORD PTR [rsp+0x38],rdx
  406536:	mov    DWORD PTR [rsp+0x18],0x2
  40653e:	mov    edx,0x2
  406543:	test   r10d,r10d
  406546:	je     40656d <flatcc_builder_create_table@@Base+0x19d>
  406548:	add    r8,r10
  40654b:	mov    QWORD PTR [rsp+0x10],r8
  406550:	mov    eax,edx
  406552:	shl    rax,0x4
  406556:	lea    rcx,[rip+0x4c83]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  40655d:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406562:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406567:	inc    edx
  406569:	mov    DWORD PTR [rsp+0x18],edx
  40656d:	cmp    r8,0x11
  406571:	setb   al
  406574:	lea    rcx,[r8-0x10]
  406578:	shr    rcx,0x20
  40657c:	sete   cl
  40657f:	test   r8d,r8d
  406582:	jle    4065d4 <flatcc_builder_create_table@@Base+0x204>
  406584:	or     al,cl
  406586:	je     4065d4 <flatcc_builder_create_table@@Base+0x204>
  406588:	mov    ebp,DWORD PTR [r14+0xf0]
  40658f:	sub    ebp,r8d
  406592:	mov    rdi,QWORD PTR [r14+0x38]
  406596:	lea    rsi,[rsp+0x20]
  40659b:	mov    ecx,ebp
  40659d:	call   QWORD PTR [r14+0x48]
  4065a1:	test   eax,eax
  4065a3:	jne    406631 <flatcc_builder_create_table@@Base+0x261>
  4065a9:	mov    DWORD PTR [r14+0xf0],ebp
  4065b0:	mov    eax,ebp
  4065b2:	add    rsp,0xa0
  4065b9:	pop    rbx
  4065ba:	pop    r14
  4065bc:	pop    rbp
  4065bd:	ret    
  4065be:	mov    r8d,0x4
  4065c4:	mov    edx,0x1
  4065c9:	test   r10d,r10d
  4065cc:	jne    406548 <flatcc_builder_create_table@@Base+0x178>
  4065d2:	jmp    40656d <flatcc_builder_create_table@@Base+0x19d>
  4065d4:	lea    rdi,[rip+0x6047]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4065db:	lea    rsi,[rip+0x4e80]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4065e2:	lea    rcx,[rip+0x5ef8]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  4065e9:	mov    edx,0x287
  4065ee:	call   403060 <__assert_fail@plt>
  4065f3:	lea    rdi,[rip+0x55de]        # 40bbd8 <flatcc_builder_padding_base@@Base+0x9f8>
  4065fa:	lea    rsi,[rip+0x4e61]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406601:	lea    rcx,[rip+0x55e2]        # 40bbea <flatcc_builder_padding_base@@Base+0xa0a>
  406608:	mov    edx,0x4d5
  40660d:	call   403060 <__assert_fail@plt>
  406612:	lea    rdi,[rip+0x566d]        # 40bc86 <flatcc_builder_padding_base@@Base+0xaa6>
  406619:	lea    rsi,[rip+0x4e42]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406620:	lea    rcx,[rip+0x55c3]        # 40bbea <flatcc_builder_padding_base@@Base+0xa0a>
  406627:	mov    edx,0x4db
  40662c:	call   403060 <__assert_fail@plt>
  406631:	lea    rdi,[rip+0x5fea]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406638:	lea    rsi,[rip+0x4e23]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40663f:	lea    rcx,[rip+0x5e9b]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406646:	mov    edx,0x28b
  40664b:	call   403060 <__assert_fail@plt>

0000000000406650 <flatcc_builder_check_required_field@@Base>:
  406650:	push   rax
  406651:	mov    rax,QWORD PTR [rdi+0x30]
  406655:	cmp    WORD PTR [rax+0xe],0x3
  40665a:	jne    406677 <flatcc_builder_check_required_field@@Base+0x27>
  40665c:	xor    eax,eax
  40665e:	cmp    WORD PTR [rdi+0x10],si
  406662:	jbe    406675 <flatcc_builder_check_required_field@@Base+0x25>
  406664:	mov    rcx,QWORD PTR [rdi+0x8]
  406668:	movzx  edx,si
  40666b:	xor    eax,eax
  40666d:	cmp    WORD PTR [rcx+rdx*2],0x0
  406672:	setne  al
  406675:	pop    rcx
  406676:	ret    
  406677:	lea    rdi,[rip+0x5613]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  40667e:	lea    rsi,[rip+0x4ddd]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406685:	lea    rcx,[rip+0x5630]        # 40bcbc <flatcc_builder_padding_base@@Base+0xadc>
  40668c:	mov    edx,0x4f8
  406691:	call   403060 <__assert_fail@plt>
  406696:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004066a0 <flatcc_builder_check_union_field@@Base>:
  4066a0:	push   rax
  4066a1:	mov    rax,QWORD PTR [rdi+0x30]
  4066a5:	cmp    WORD PTR [rax+0xe],0x3
  4066aa:	jne    4066f4 <flatcc_builder_check_union_field@@Base+0x54>
  4066ac:	test   si,si
  4066af:	je     4066de <flatcc_builder_check_union_field@@Base+0x3e>
  4066b1:	cmp    WORD PTR [rdi+0x10],si
  4066b5:	jbe    4066de <flatcc_builder_check_union_field@@Base+0x3e>
  4066b7:	movzx  eax,si
  4066ba:	mov    rcx,QWORD PTR [rdi+0x8]
  4066be:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  4066c3:	test   rdx,rdx
  4066c6:	je     4066e2 <flatcc_builder_check_union_field@@Base+0x42>
  4066c8:	mov    rsi,QWORD PTR [rdi+0x18]
  4066cc:	cmp    BYTE PTR [rsi+rdx*1],0x0
  4066d0:	movzx  eax,WORD PTR [rcx+rax*2]
  4066d4:	je     4066e9 <flatcc_builder_check_union_field@@Base+0x49>
  4066d6:	test   ax,ax
  4066d9:	setne  al
  4066dc:	jmp    4066ef <flatcc_builder_check_union_field@@Base+0x4f>
  4066de:	xor    eax,eax
  4066e0:	jmp    4066ef <flatcc_builder_check_union_field@@Base+0x4f>
  4066e2:	cmp    WORD PTR [rcx+rax*2],0x0
  4066e7:	jmp    4066ec <flatcc_builder_check_union_field@@Base+0x4c>
  4066e9:	test   ax,ax
  4066ec:	sete   al
  4066ef:	movzx  eax,al
  4066f2:	pop    rcx
  4066f3:	ret    
  4066f4:	lea    rdi,[rip+0x5596]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4066fb:	lea    rsi,[rip+0x4d60]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406702:	lea    rcx,[rip+0x5606]        # 40bd0f <flatcc_builder_padding_base@@Base+0xb2f>
  406709:	mov    edx,0x4ff
  40670e:	call   403060 <__assert_fail@plt>
  406713:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40671d:	nop    DWORD PTR [rax]

0000000000406720 <flatcc_builder_check_required@@Base>:
  406720:	push   rax
  406721:	mov    rax,QWORD PTR [rdi+0x30]
  406725:	cmp    WORD PTR [rax+0xe],0x3
  40672a:	jne    406769 <flatcc_builder_check_required@@Base+0x49>
  40672c:	movzx  ecx,WORD PTR [rdi+0x10]
  406730:	xor    eax,eax
  406732:	cmp    ecx,edx
  406734:	jl     406763 <flatcc_builder_check_required@@Base+0x43>
  406736:	mov    eax,0x1
  40673b:	test   edx,edx
  40673d:	jle    406763 <flatcc_builder_check_required@@Base+0x43>
  40673f:	mov    rcx,QWORD PTR [rdi+0x8]
  406743:	mov    r8d,edx
  406746:	xor    edi,edi
  406748:	nop    DWORD PTR [rax+rax*1+0x0]
  406750:	movzx  edx,WORD PTR [rsi+rdi*2]
  406754:	cmp    WORD PTR [rcx+rdx*2],0x0
  406759:	je     406765 <flatcc_builder_check_required@@Base+0x45>
  40675b:	inc    rdi
  40675e:	cmp    r8,rdi
  406761:	jne    406750 <flatcc_builder_check_required@@Base+0x30>
  406763:	pop    rcx
  406764:	ret    
  406765:	xor    eax,eax
  406767:	pop    rcx
  406768:	ret    
  406769:	lea    rdi,[rip+0x5521]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  406770:	lea    rsi,[rip+0x4ceb]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406777:	lea    rcx,[rip+0x55e1]        # 40bd5f <flatcc_builder_padding_base@@Base+0xb7f>
  40677e:	mov    edx,0x511
  406783:	call   403060 <__assert_fail@plt>
  406788:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406790 <flatcc_builder_end_table@@Base>:
  406790:	push   rbp
  406791:	push   r15
  406793:	push   r14
  406795:	push   r12
  406797:	push   rbx
  406798:	sub    rsp,0x10
  40679c:	mov    rax,QWORD PTR [rdi+0x30]
  4067a0:	cmp    WORD PTR [rax+0xe],0x3
  4067a5:	jne    4068f5 <flatcc_builder_end_table@@Base+0x165>
  4067ab:	mov    rbx,rdi
  4067ae:	mov    rax,QWORD PTR [rdi+0x8]
  4067b2:	mov    ecx,DWORD PTR [rdi+0x10]
  4067b5:	lea    ecx,[rcx+rcx*1]
  4067b8:	add    ecx,0x4
  4067bb:	mov    WORD PTR [rax-0x4],cx
  4067bf:	mov    edx,DWORD PTR [rdi+0x20]
  4067c2:	add    edx,0x4
  4067c5:	mov    WORD PTR [rax-0x2],dx
  4067c9:	lea    r12,[rax-0x4]
  4067cd:	movzx  ebp,cx
  4067d0:	mov    eax,DWORD PTR [rdi+0x14]
  4067d3:	xor    eax,ebp
  4067d5:	imul   eax,eax,0x9e3779b1
  4067db:	movzx  ecx,dx
  4067de:	xor    ecx,eax
  4067e0:	imul   ecx,ecx,0x9e3779b1
  4067e6:	mov    DWORD PTR [rdi+0x14],ecx
  4067e9:	mov    rsi,r12
  4067ec:	mov    edx,ebp
  4067ee:	call   406030 <flatcc_builder_create_cached_vtable@@Base>
  4067f3:	test   eax,eax
  4067f5:	je     4068e2 <flatcc_builder_end_table@@Base+0x152>
  4067fb:	mov    r14d,eax
  4067fe:	xor    r15d,r15d
  406801:	mov    rdi,r12
  406804:	xor    esi,esi
  406806:	mov    rdx,rbp
  406809:	call   403070 <memset@plt>
  40680e:	mov    rax,QWORD PTR [rbx+0x30]
  406812:	mov    r8d,DWORD PTR [rax+0x14]
  406816:	add    r8,QWORD PTR [rbx+0x88]
  40681d:	mov    r9,QWORD PTR [rbx]
  406820:	mov    rsi,QWORD PTR [rbx+0x18]
  406824:	sub    r9,r8
  406827:	shr    r9,1
  40682a:	mov    edx,DWORD PTR [rbx+0x20]
  40682d:	movzx  ecx,WORD PTR [rbx+0xea]
  406834:	mov    DWORD PTR [rsp],r14d
  406838:	mov    rdi,rbx
  40683b:	call   4063d0 <flatcc_builder_create_table@@Base>
  406840:	test   eax,eax
  406842:	je     4068e5 <flatcc_builder_end_table@@Base+0x155>
  406848:	mov    r14d,eax
  40684b:	mov    rax,QWORD PTR [rbx+0x30]
  40684f:	mov    ecx,DWORD PTR [rax+0x18]
  406852:	mov    DWORD PTR [rbx+0x14],ecx
  406855:	movzx  ecx,WORD PTR [rax+0x1c]
  406859:	mov    WORD PTR [rbx+0x10],cx
  40685d:	mov    ecx,DWORD PTR [rax+0x10]
  406860:	add    rcx,QWORD PTR [rbx+0x58]
  406864:	mov    QWORD PTR [rbx+0x8],rcx
  406868:	mov    eax,DWORD PTR [rax+0x14]
  40686b:	add    rax,QWORD PTR [rbx+0x88]
  406872:	mov    QWORD PTR [rbx],rax
  406875:	mov    rdi,QWORD PTR [rbx+0x18]
  406879:	mov    edx,DWORD PTR [rbx+0x20]
  40687c:	xor    esi,esi
  40687e:	call   403070 <memset@plt>
  406883:	mov    rax,QWORD PTR [rbx+0x30]
  406887:	mov    ecx,DWORD PTR [rax+0x8]
  40688a:	mov    DWORD PTR [rbx+0x20],ecx
  40688d:	mov    ecx,DWORD PTR [rax]
  40688f:	mov    DWORD PTR [rbx+0x28],ecx
  406892:	mov    edx,DWORD PTR [rax+0x4]
  406895:	mov    rsi,rcx
  406898:	add    rsi,QWORD PTR [rbx+0x68]
  40689c:	mov    QWORD PTR [rbx+0x18],rsi
  4068a0:	mov    esi,DWORD PTR [rbx+0x70]
  4068a3:	sub    esi,ecx
  4068a5:	cmp    esi,edx
  4068a7:	cmova  esi,edx
  4068aa:	mov    DWORD PTR [rbx+0x24],esi
  4068ad:	movzx  ecx,WORD PTR [rbx+0xea]
  4068b4:	cmp    WORD PTR [rbx+0xe8],cx
  4068bb:	jae    4068c4 <flatcc_builder_end_table@@Base+0x134>
  4068bd:	mov    WORD PTR [rbx+0xe8],cx
  4068c4:	movzx  ecx,WORD PTR [rax+0xc]
  4068c8:	mov    WORD PTR [rbx+0xea],cx
  4068cf:	add    rax,0xffffffffffffffdc
  4068d3:	mov    QWORD PTR [rbx+0x30],rax
  4068d7:	dec    DWORD PTR [rbx+0x104]
  4068dd:	mov    r15d,r14d
  4068e0:	jmp    4068e5 <flatcc_builder_end_table@@Base+0x155>
  4068e2:	xor    r15d,r15d
  4068e5:	mov    eax,r15d
  4068e8:	add    rsp,0x10
  4068ec:	pop    rbx
  4068ed:	pop    r12
  4068ef:	pop    r14
  4068f1:	pop    r15
  4068f3:	pop    rbp
  4068f4:	ret    
  4068f5:	lea    rdi,[rip+0x5395]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4068fc:	lea    rsi,[rip+0x4b5f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406903:	lea    rcx,[rip+0x54af]        # 40bdb9 <flatcc_builder_padding_base@@Base+0xbd9>
  40690a:	mov    edx,0x525
  40690f:	call   403060 <__assert_fail@plt>
  406914:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40691e:	xchg   ax,ax

0000000000406920 <flatcc_builder_create_vector@@Base>:
  406920:	push   rbp
  406921:	push   rbx
  406922:	sub    rsp,0x98
  406929:	cmp    rdx,r9
  40692c:	ja     406a56 <flatcc_builder_create_vector@@Base+0x136>
  406932:	mov    rbx,rdi
  406935:	cmp    r8w,0x4
  40693a:	mov    eax,0x4
  40693f:	cmova  eax,r8d
  406943:	cmp    WORD PTR [rdi+0xe8],ax
  40694a:	jae    406953 <flatcc_builder_create_vector@@Base+0x33>
  40694c:	mov    WORD PTR [rbx+0xe8],ax
  406953:	imul   ecx,edx
  406956:	mov    DWORD PTR [rsp+0x4],edx
  40695a:	mov    ebp,DWORD PTR [rbx+0xf0]
  406960:	mov    edx,ebp
  406962:	sub    edx,ecx
  406964:	movzx  eax,ax
  406967:	dec    eax
  406969:	and    eax,edx
  40696b:	mov    QWORD PTR [rsp+0x8],0x4
  406974:	lea    rdx,[rsp+0x4]
  406979:	mov    QWORD PTR [rsp+0x18],rdx
  40697e:	mov    QWORD PTR [rsp+0x20],0x4
  406987:	mov    DWORD PTR [rsp+0x10],0x1
  40698f:	test   ecx,ecx
  406991:	je     406a26 <flatcc_builder_create_vector@@Base+0x106>
  406997:	mov    ecx,ecx
  406999:	lea    r8,[rcx+0x4]
  40699d:	mov    QWORD PTR [rsp+0x8],r8
  4069a2:	mov    QWORD PTR [rsp+0x28],rsi
  4069a7:	mov    QWORD PTR [rsp+0x30],rcx
  4069ac:	mov    DWORD PTR [rsp+0x10],0x2
  4069b4:	mov    edx,0x2
  4069b9:	test   eax,eax
  4069bb:	je     4069e4 <flatcc_builder_create_vector@@Base+0xc4>
  4069bd:	mov    eax,eax
  4069bf:	add    r8,rax
  4069c2:	mov    QWORD PTR [rsp+0x8],r8
  4069c7:	mov    ecx,edx
  4069c9:	shl    rcx,0x4
  4069cd:	lea    rsi,[rip+0x480c]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4069d4:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  4069d9:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  4069de:	inc    edx
  4069e0:	mov    DWORD PTR [rsp+0x10],edx
  4069e4:	cmp    r8,0x11
  4069e8:	setb   al
  4069eb:	lea    rcx,[r8-0x10]
  4069ef:	shr    rcx,0x20
  4069f3:	sete   cl
  4069f6:	test   r8d,r8d
  4069f9:	jle    406a37 <flatcc_builder_create_vector@@Base+0x117>
  4069fb:	or     al,cl
  4069fd:	je     406a37 <flatcc_builder_create_vector@@Base+0x117>
  4069ff:	sub    ebp,r8d
  406a02:	mov    rdi,QWORD PTR [rbx+0x38]
  406a06:	lea    rsi,[rsp+0x18]
  406a0b:	mov    ecx,ebp
  406a0d:	call   QWORD PTR [rbx+0x48]
  406a10:	test   eax,eax
  406a12:	jne    406a75 <flatcc_builder_create_vector@@Base+0x155>
  406a14:	mov    DWORD PTR [rbx+0xf0],ebp
  406a1a:	mov    eax,ebp
  406a1c:	add    rsp,0x98
  406a23:	pop    rbx
  406a24:	pop    rbp
  406a25:	ret    
  406a26:	mov    r8d,0x4
  406a2c:	mov    edx,0x1
  406a31:	test   eax,eax
  406a33:	jne    4069bd <flatcc_builder_create_vector@@Base+0x9d>
  406a35:	jmp    4069e4 <flatcc_builder_create_vector@@Base+0xc4>
  406a37:	lea    rdi,[rip+0x5be4]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406a3e:	lea    rsi,[rip+0x4a1d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406a45:	lea    rcx,[rip+0x5a95]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406a4c:	mov    edx,0x287
  406a51:	call   403060 <__assert_fail@plt>
  406a56:	lea    rdi,[rip+0x539e]        # 40bdfb <flatcc_builder_padding_base@@Base+0xc1b>
  406a5d:	lea    rsi,[rip+0x49fe]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406a64:	lea    rcx,[rip+0x53a3]        # 40be0e <flatcc_builder_padding_base@@Base+0xc2e>
  406a6b:	mov    edx,0x555
  406a70:	call   403060 <__assert_fail@plt>
  406a75:	lea    rdi,[rip+0x5ba6]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406a7c:	lea    rsi,[rip+0x49df]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406a83:	lea    rcx,[rip+0x5a57]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406a8a:	mov    edx,0x28b
  406a8f:	call   403060 <__assert_fail@plt>
  406a94:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a9e:	xchg   ax,ax

0000000000406aa0 <flatcc_builder_end_vector@@Base>:
  406aa0:	push   rbp
  406aa1:	push   rbx
  406aa2:	push   rax
  406aa3:	mov    rax,QWORD PTR [rdi+0x30]
  406aa7:	cmp    WORD PTR [rax+0xe],0x4
  406aac:	jne    406b47 <flatcc_builder_end_vector@@Base+0xa7>
  406ab2:	mov    rbx,rdi
  406ab5:	mov    rsi,QWORD PTR [rdi+0x18]
  406ab9:	mov    ecx,DWORD PTR [rax+0x10]
  406abc:	mov    edx,DWORD PTR [rax+0x14]
  406abf:	movzx  r8d,WORD PTR [rdi+0xea]
  406ac7:	mov    r9d,DWORD PTR [rax+0x18]
  406acb:	call   406920 <flatcc_builder_create_vector@@Base>
  406ad0:	mov    ebp,eax
  406ad2:	test   eax,eax
  406ad4:	je     406b3e <flatcc_builder_end_vector@@Base+0x9e>
  406ad6:	mov    rdi,QWORD PTR [rbx+0x18]
  406ada:	mov    edx,DWORD PTR [rbx+0x20]
  406add:	xor    esi,esi
  406adf:	call   403070 <memset@plt>
  406ae4:	mov    rax,QWORD PTR [rbx+0x30]
  406ae8:	mov    ecx,DWORD PTR [rax+0x8]
  406aeb:	mov    DWORD PTR [rbx+0x20],ecx
  406aee:	mov    ecx,DWORD PTR [rax]
  406af0:	mov    DWORD PTR [rbx+0x28],ecx
  406af3:	mov    edx,DWORD PTR [rax+0x4]
  406af6:	mov    rsi,rcx
  406af9:	add    rsi,QWORD PTR [rbx+0x68]
  406afd:	mov    QWORD PTR [rbx+0x18],rsi
  406b01:	mov    esi,DWORD PTR [rbx+0x70]
  406b04:	sub    esi,ecx
  406b06:	cmp    esi,edx
  406b08:	cmova  esi,edx
  406b0b:	mov    DWORD PTR [rbx+0x24],esi
  406b0e:	movzx  ecx,WORD PTR [rbx+0xea]
  406b15:	cmp    WORD PTR [rbx+0xe8],cx
  406b1c:	jae    406b25 <flatcc_builder_end_vector@@Base+0x85>
  406b1e:	mov    WORD PTR [rbx+0xe8],cx
  406b25:	movzx  ecx,WORD PTR [rax+0xc]
  406b29:	mov    WORD PTR [rbx+0xea],cx
  406b30:	add    rax,0xffffffffffffffdc
  406b34:	mov    QWORD PTR [rbx+0x30],rax
  406b38:	dec    DWORD PTR [rbx+0x104]
  406b3e:	mov    eax,ebp
  406b40:	add    rsp,0x8
  406b44:	pop    rbx
  406b45:	pop    rbp
  406b46:	ret    
  406b47:	lea    rdi,[rip+0x4c51]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  406b4e:	lea    rsi,[rip+0x490d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406b55:	lea    rcx,[rip+0x5328]        # 40be84 <flatcc_builder_padding_base@@Base+0xca4>
  406b5c:	mov    edx,0x578
  406b61:	call   403060 <__assert_fail@plt>
  406b66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406b70 <flatcc_builder_vector_count@@Base>:
  406b70:	mov    rax,QWORD PTR [rdi+0x30]
  406b74:	mov    eax,DWORD PTR [rax+0x14]
  406b77:	ret    
  406b78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406b80 <flatcc_builder_vector_edit@@Base>:
  406b80:	mov    rax,QWORD PTR [rdi+0x18]
  406b84:	ret    
  406b85:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b8f:	nop

0000000000406b90 <flatcc_builder_create_offset_vector_direct@@Base>:
  406b90:	xor    ecx,ecx
  406b92:	jmp    406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406b94:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b9e:	xchg   ax,ax
  406ba0:	push   r14
  406ba2:	push   rbx
  406ba3:	sub    rsp,0x98
  406baa:	mov    r10,rdx
  406bad:	xor    ebx,ebx
  406baf:	test   r10d,0xc0000000
  406bb6:	jne    406d29 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  406bbc:	mov    r14,rdi
  406bbf:	cmp    WORD PTR [rdi+0xe8],0x3
  406bc7:	ja     406bd3 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  406bc9:	mov    WORD PTR [r14+0xe8],0x4
  406bd3:	lea    r8d,[r10*4+0x0]
  406bdb:	mov    DWORD PTR [rsp+0x4],r10d
  406be0:	mov    ebx,DWORD PTR [r14+0xf0]
  406be7:	mov    r9d,ebx
  406bea:	and    r9d,0x3
  406bee:	mov    QWORD PTR [rsp+0x8],0x4
  406bf7:	lea    rdx,[rsp+0x4]
  406bfc:	mov    QWORD PTR [rsp+0x18],rdx
  406c01:	mov    QWORD PTR [rsp+0x20],0x4
  406c0a:	mov    DWORD PTR [rsp+0x10],0x1
  406c12:	test   r8d,r8d
  406c15:	je     406d36 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  406c1b:	mov    edx,r8d
  406c1e:	lea    r8,[rdx+0x4]
  406c22:	mov    QWORD PTR [rsp+0x8],r8
  406c27:	mov    QWORD PTR [rsp+0x28],rsi
  406c2c:	mov    QWORD PTR [rsp+0x30],rdx
  406c31:	mov    DWORD PTR [rsp+0x10],0x2
  406c39:	mov    edx,0x2
  406c3e:	test   r9d,r9d
  406c41:	je     406c68 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406c43:	add    r8,r9
  406c46:	mov    QWORD PTR [rsp+0x8],r8
  406c4b:	mov    edi,edx
  406c4d:	shl    rdi,0x4
  406c51:	lea    rax,[rip+0x4588]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  406c58:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  406c5d:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406c62:	inc    edx
  406c64:	mov    DWORD PTR [rsp+0x10],edx
  406c68:	test   r10d,r10d
  406c6b:	je     406ce5 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  406c6d:	mov    edi,r8d
  406c70:	sub    edi,ebx
  406c72:	add    edi,0xfffffffc
  406c75:	mov    r9d,r10d
  406c78:	xor    ebx,ebx
  406c7a:	jmp    406c8b <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  406c7c:	nop    DWORD PTR [rax+0x0]
  406c80:	inc    rbx
  406c83:	add    edi,0xfffffffc
  406c86:	cmp    r9,rbx
  406c89:	je     406cde <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  406c8b:	mov    eax,DWORD PTR [rsi+rbx*4]
  406c8e:	test   eax,eax
  406c90:	je     406cb0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  406c92:	add    eax,edi
  406c94:	mov    DWORD PTR [rsi+rbx*4],eax
  406c97:	test   rcx,rcx
  406c9a:	je     406c80 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406c9c:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406ca0:	jne    406c80 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406ca2:	jmp    406d4f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  406ca7:	nop    WORD PTR [rax+rax*1+0x0]
  406cb0:	test   rcx,rcx
  406cb3:	je     406d6e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  406cb9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406cbd:	je     406c80 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406cbf:	lea    rdi,[rip+0x59e1]        # 40c6a7 <flatcc_builder_padding_base@@Base+0x14c7>
  406cc6:	lea    rsi,[rip+0x4795]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406ccd:	lea    rcx,[rip+0x5950]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406cd4:	mov    edx,0x5b5
  406cd9:	call   403060 <__assert_fail@plt>
  406cde:	mov    ebx,DWORD PTR [r14+0xf0]
  406ce5:	cmp    r8,0x11
  406ce9:	setb   al
  406cec:	lea    rcx,[r8-0x10]
  406cf0:	shr    rcx,0x20
  406cf4:	sete   cl
  406cf7:	test   r8d,r8d
  406cfa:	jle    406d8d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406d00:	or     al,cl
  406d02:	je     406d8d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406d08:	sub    ebx,r8d
  406d0b:	mov    rdi,QWORD PTR [r14+0x38]
  406d0f:	lea    rsi,[rsp+0x18]
  406d14:	mov    ecx,ebx
  406d16:	call   QWORD PTR [r14+0x48]
  406d1a:	test   eax,eax
  406d1c:	jne    406dac <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406d22:	mov    DWORD PTR [r14+0xf0],ebx
  406d29:	mov    eax,ebx
  406d2b:	add    rsp,0x98
  406d32:	pop    rbx
  406d33:	pop    r14
  406d35:	ret    
  406d36:	mov    r8d,0x4
  406d3c:	mov    edx,0x1
  406d41:	test   r9d,r9d
  406d44:	jne    406c43 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  406d4a:	jmp    406c68 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406d4f:	lea    rdi,[rip+0x58c0]        # 40c616 <flatcc_builder_padding_base@@Base+0x1436>
  406d56:	lea    rsi,[rip+0x4705]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406d5d:	lea    rcx,[rip+0x58c0]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406d64:	mov    edx,0x5b1
  406d69:	call   403060 <__assert_fail@plt>
  406d6e:	lea    rdi,[rip+0x58ad]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406d75:	lea    rsi,[rip+0x46e6]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406d7c:	lea    rcx,[rip+0x58a1]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406d83:	mov    edx,0x5b7
  406d88:	call   403060 <__assert_fail@plt>
  406d8d:	lea    rdi,[rip+0x588e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406d94:	lea    rsi,[rip+0x46c7]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406d9b:	lea    rcx,[rip+0x573f]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406da2:	mov    edx,0x287
  406da7:	call   403060 <__assert_fail@plt>
  406dac:	lea    rdi,[rip+0x586f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406db3:	lea    rsi,[rip+0x46a8]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406dba:	lea    rcx,[rip+0x5720]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406dc1:	mov    edx,0x28b
  406dc6:	call   403060 <__assert_fail@plt>
  406dcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406dd0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406dd0:	push   rbp
  406dd1:	push   rbx
  406dd2:	push   rax
  406dd3:	mov    rax,QWORD PTR [rdi+0x30]
  406dd7:	cmp    WORD PTR [rax+0xe],0x5
  406ddc:	jne    406e6b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  406de2:	mov    rcx,rsi
  406de5:	mov    rbx,rdi
  406de8:	mov    rsi,QWORD PTR [rdi+0x18]
  406dec:	mov    edx,DWORD PTR [rax+0x14]
  406def:	call   406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406df4:	mov    ebp,eax
  406df6:	test   eax,eax
  406df8:	je     406e62 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  406dfa:	mov    rdi,QWORD PTR [rbx+0x18]
  406dfe:	mov    edx,DWORD PTR [rbx+0x20]
  406e01:	xor    esi,esi
  406e03:	call   403070 <memset@plt>
  406e08:	mov    rax,QWORD PTR [rbx+0x30]
  406e0c:	mov    ecx,DWORD PTR [rax+0x8]
  406e0f:	mov    DWORD PTR [rbx+0x20],ecx
  406e12:	mov    ecx,DWORD PTR [rax]
  406e14:	mov    DWORD PTR [rbx+0x28],ecx
  406e17:	mov    edx,DWORD PTR [rax+0x4]
  406e1a:	mov    rsi,rcx
  406e1d:	add    rsi,QWORD PTR [rbx+0x68]
  406e21:	mov    QWORD PTR [rbx+0x18],rsi
  406e25:	mov    esi,DWORD PTR [rbx+0x70]
  406e28:	sub    esi,ecx
  406e2a:	cmp    esi,edx
  406e2c:	cmova  esi,edx
  406e2f:	mov    DWORD PTR [rbx+0x24],esi
  406e32:	movzx  ecx,WORD PTR [rbx+0xea]
  406e39:	cmp    WORD PTR [rbx+0xe8],cx
  406e40:	jae    406e49 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  406e42:	mov    WORD PTR [rbx+0xe8],cx
  406e49:	movzx  ecx,WORD PTR [rax+0xc]
  406e4d:	mov    WORD PTR [rbx+0xea],cx
  406e54:	add    rax,0xffffffffffffffdc
  406e58:	mov    QWORD PTR [rbx+0x30],rax
  406e5c:	dec    DWORD PTR [rbx+0x104]
  406e62:	mov    eax,ebp
  406e64:	add    rsp,0x8
  406e68:	pop    rbx
  406e69:	pop    rbp
  406e6a:	ret    
  406e6b:	lea    rdi,[rip+0x4a26]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  406e72:	lea    rsi,[rip+0x45e9]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406e79:	lea    rcx,[rip+0x5091]        # 40bf11 <flatcc_builder_padding_base@@Base+0xd31>
  406e80:	mov    edx,0x5d5
  406e85:	call   403060 <__assert_fail@plt>
  406e8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406e90 <flatcc_builder_offset_vector_edit@@Base>:
  406e90:	mov    rax,QWORD PTR [rdi+0x18]
  406e94:	ret    
  406e95:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e9f:	nop

0000000000406ea0 <flatcc_builder_offset_vector_count@@Base>:
  406ea0:	mov    rax,QWORD PTR [rdi+0x30]
  406ea4:	mov    eax,DWORD PTR [rax+0x14]
  406ea7:	ret    
  406ea8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406eb0 <flatcc_builder_table_add_union@@Base>:
  406eb0:	push   rbp
  406eb1:	push   r15
  406eb3:	push   r14
  406eb5:	push   rbx
  406eb6:	push   rax
  406eb7:	mov    rax,QWORD PTR [rdi+0x30]
  406ebb:	cmp    WORD PTR [rax+0xe],0x3
  406ec0:	jne    406f1e <flatcc_builder_table_add_union@@Base+0x6e>
  406ec2:	mov    r14,rdx
  406ec5:	mov    ebp,esi
  406ec7:	mov    r15,rdi
  406eca:	mov    rbx,rdx
  406ecd:	shr    rbx,0x20
  406ed1:	test   r14b,r14b
  406ed4:	jne    406eda <flatcc_builder_table_add_union@@Base+0x2a>
  406ed6:	test   ebx,ebx
  406ed8:	jne    406f3d <flatcc_builder_table_add_union@@Base+0x8d>
  406eda:	test   ebx,ebx
  406edc:	je     406ef3 <flatcc_builder_table_add_union@@Base+0x43>
  406ede:	mov    rdi,r15
  406ee1:	mov    esi,ebp
  406ee3:	call   406fa0 <flatcc_builder_table_add_offset@@Base>
  406ee8:	test   rax,rax
  406eeb:	je     406f7b <flatcc_builder_table_add_union@@Base+0xcb>
  406ef1:	mov    DWORD PTR [rax],ebx
  406ef3:	dec    ebp
  406ef5:	mov    edx,0x1
  406efa:	mov    rdi,r15
  406efd:	mov    esi,ebp
  406eff:	mov    ecx,0x1
  406f04:	call   407100 <flatcc_builder_table_add@@Base>
  406f09:	test   rax,rax
  406f0c:	je     406f5c <flatcc_builder_table_add_union@@Base+0xac>
  406f0e:	mov    BYTE PTR [rax],r14b
  406f11:	xor    eax,eax
  406f13:	add    rsp,0x8
  406f17:	pop    rbx
  406f18:	pop    r14
  406f1a:	pop    r15
  406f1c:	pop    rbp
  406f1d:	ret    
  406f1e:	lea    rdi,[rip+0x4d6c]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  406f25:	lea    rsi,[rip+0x4536]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f2c:	lea    rcx,[rip+0x5050]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f33:	mov    edx,0x5ee
  406f38:	call   403060 <__assert_fail@plt>
  406f3d:	lea    rdi,[rip+0x5097]        # 40bfdb <flatcc_builder_padding_base@@Base+0xdfb>
  406f44:	lea    rsi,[rip+0x4517]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f4b:	lea    rcx,[rip+0x5031]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f52:	mov    edx,0x5ef
  406f57:	call   403060 <__assert_fail@plt>
  406f5c:	lea    rdi,[rip+0x50a4]        # 40c007 <flatcc_builder_padding_base@@Base+0xe27>
  406f63:	lea    rsi,[rip+0x44f8]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f6a:	lea    rcx,[rip+0x5012]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f71:	mov    edx,0x5f6
  406f76:	call   403060 <__assert_fail@plt>
  406f7b:	lea    rdi,[rip+0x507b]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  406f82:	lea    rsi,[rip+0x44d9]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f89:	lea    rcx,[rip+0x4ff3]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f90:	mov    edx,0x5f2
  406f95:	call   403060 <__assert_fail@plt>
  406f9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406fa0 <flatcc_builder_table_add_offset@@Base>:
  406fa0:	push   rbp
  406fa1:	push   r15
  406fa3:	push   r14
  406fa5:	push   rbx
  406fa6:	push   rax
  406fa7:	mov    rax,QWORD PTR [rdi+0x30]
  406fab:	cmp    WORD PTR [rax+0xe],0x3
  406fb0:	jne    40709e <flatcc_builder_table_add_offset@@Base+0xfe>
  406fb6:	mov    r14d,esi
  406fb9:	cmp    esi,0x7ffd
  406fbf:	jae    4070bd <flatcc_builder_table_add_offset@@Base+0x11d>
  406fc5:	mov    rbx,rdi
  406fc8:	mov    rax,QWORD PTR [rdi+0x8]
  406fcc:	movsxd rcx,r14d
  406fcf:	cmp    WORD PTR [rax+rcx*2],0x0
  406fd4:	jne    4070dc <flatcc_builder_table_add_offset@@Base+0x13c>
  406fda:	mov    ecx,DWORD PTR [rbx+0x14]
  406fdd:	xor    ecx,r14d
  406fe0:	imul   ecx,ecx,0x9e3779b1
  406fe6:	xor    ecx,0x4
  406fe9:	imul   ecx,ecx,0x9e3779b1
  406fef:	mov    DWORD PTR [rbx+0x14],ecx
  406ff2:	mov    ebp,DWORD PTR [rbx+0x20]
  406ff5:	mov    ecx,DWORD PTR [rbx+0x24]
  406ff8:	add    ebp,0x3
  406ffb:	and    ebp,0xfffffffc
  406ffe:	lea    r15,[rbp+0x4]
  407002:	mov    DWORD PTR [rbx+0x20],r15d
  407006:	cmp    ecx,r15d
  407009:	jae    407068 <flatcc_builder_table_add_offset@@Base+0xc8>
  40700b:	mov    eax,r15d
  40700e:	and    eax,0xfffffffc
  407011:	lea    rsi,[rbx+0x68]
  407015:	mov    rdi,QWORD PTR [rbx+0x40]
  407019:	mov    edx,DWORD PTR [rbx+0x28]
  40701c:	add    rdx,rax
  40701f:	mov    ecx,0x1
  407024:	mov    r8d,0x1
  40702a:	call   QWORD PTR [rbx+0x50]
  40702d:	test   eax,eax
  40702f:	je     407035 <flatcc_builder_table_add_offset@@Base+0x95>
  407031:	xor    ebp,ebp
  407033:	jmp    407090 <flatcc_builder_table_add_offset@@Base+0xf0>
  407035:	mov    eax,DWORD PTR [rbx+0x28]
  407038:	mov    rcx,rax
  40703b:	add    rcx,QWORD PTR [rbx+0x68]
  40703f:	mov    QWORD PTR [rbx+0x18],rcx
  407043:	mov    ecx,DWORD PTR [rbx+0x70]
  407046:	sub    ecx,eax
  407048:	cmp    ecx,0xfffc
  40704e:	mov    eax,0xfffc
  407053:	cmovb  eax,ecx
  407056:	mov    DWORD PTR [rbx+0x24],eax
  407059:	mov    rax,QWORD PTR [rbx+0x30]
  40705d:	mov    DWORD PTR [rax+0x4],0xfffc
  407064:	mov    rax,QWORD PTR [rbx+0x8]
  407068:	movzx  ecx,r14w
  40706c:	mov    WORD PTR [rax+rcx*2],r15w
  407071:	cmp    WORD PTR [rbx+0x10],cx
  407075:	ja     40707f <flatcc_builder_table_add_offset@@Base+0xdf>
  407077:	inc    r14d
  40707a:	mov    WORD PTR [rbx+0x10],r14w
  40707f:	mov    rax,QWORD PTR [rbx]
  407082:	lea    rcx,[rax+0x2]
  407086:	mov    QWORD PTR [rbx],rcx
  407089:	mov    WORD PTR [rax],bp
  40708c:	add    rbp,QWORD PTR [rbx+0x18]
  407090:	mov    rax,rbp
  407093:	add    rsp,0x8
  407097:	pop    rbx
  407098:	pop    r14
  40709a:	pop    r15
  40709c:	pop    rbp
  40709d:	ret    
  40709e:	lea    rdi,[rip+0x4bec]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4070a5:	lea    rsi,[rip+0x43b6]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4070ac:	lea    rcx,[rip+0x52d2]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  4070b3:	mov    edx,0x713
  4070b8:	call   403060 <__assert_fail@plt>
  4070bd:	lea    rdi,[rip+0x5241]        # 40c305 <flatcc_builder_padding_base@@Base+0x1125>
  4070c4:	lea    rsi,[rip+0x4397]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4070cb:	lea    rcx,[rip+0x52b3]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  4070d2:	mov    edx,0x714
  4070d7:	call   403060 <__assert_fail@plt>
  4070dc:	lea    rdi,[rip+0x553f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4070e3:	lea    rsi,[rip+0x4378]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4070ea:	lea    rcx,[rip+0x5294]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  4070f1:	mov    edx,0x71b
  4070f6:	call   403060 <__assert_fail@plt>
  4070fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407100 <flatcc_builder_table_add@@Base>:
  407100:	push   rbp
  407101:	push   r14
  407103:	push   rbx
  407104:	mov    rax,QWORD PTR [rdi+0x30]
  407108:	cmp    WORD PTR [rax+0xe],0x3
  40710d:	jne    4071f8 <flatcc_builder_table_add@@Base+0xf8>
  407113:	mov    r14d,esi
  407116:	cmp    esi,0x7ffd
  40711c:	jae    407217 <flatcc_builder_table_add@@Base+0x117>
  407122:	mov    rbx,rdi
  407125:	cmp    WORD PTR [rdi+0xea],cx
  40712c:	jae    407135 <flatcc_builder_table_add@@Base+0x35>
  40712e:	mov    WORD PTR [rbx+0xea],cx
  407135:	mov    rsi,QWORD PTR [rbx+0x8]
  407139:	movsxd rax,r14d
  40713c:	cmp    WORD PTR [rsi+rax*2],0x0
  407141:	jne    407236 <flatcc_builder_table_add@@Base+0x136>
  407147:	mov    eax,DWORD PTR [rbx+0x14]
  40714a:	xor    eax,r14d
  40714d:	imul   eax,eax,0x9e3779b1
  407153:	xor    eax,edx
  407155:	imul   eax,eax,0x9e3779b1
  40715b:	mov    DWORD PTR [rbx+0x14],eax
  40715e:	mov    eax,DWORD PTR [rbx+0x20]
  407161:	movzx  ebp,cx
  407164:	lea    eax,[rax+rbp*1]
  407167:	add    eax,0xffffffff
  40716a:	neg    ebp
  40716c:	and    ebp,eax
  40716e:	add    edx,ebp
  407170:	mov    DWORD PTR [rbx+0x20],edx
  407173:	cmp    edx,DWORD PTR [rbx+0x24]
  407176:	jb     4071d4 <flatcc_builder_table_add@@Base+0xd4>
  407178:	inc    edx
  40717a:	lea    rsi,[rbx+0x68]
  40717e:	mov    rdi,QWORD PTR [rbx+0x40]
  407182:	mov    eax,DWORD PTR [rbx+0x28]
  407185:	add    rax,rdx
  407188:	mov    rdx,rax
  40718b:	mov    ecx,0x1
  407190:	mov    r8d,0x1
  407196:	call   QWORD PTR [rbx+0x50]
  407199:	test   eax,eax
  40719b:	je     4071a1 <flatcc_builder_table_add@@Base+0xa1>
  40719d:	xor    eax,eax
  40719f:	jmp    4071f3 <flatcc_builder_table_add@@Base+0xf3>
  4071a1:	mov    eax,DWORD PTR [rbx+0x28]
  4071a4:	mov    rcx,rax
  4071a7:	add    rcx,QWORD PTR [rbx+0x68]
  4071ab:	mov    QWORD PTR [rbx+0x18],rcx
  4071af:	mov    ecx,DWORD PTR [rbx+0x70]
  4071b2:	sub    ecx,eax
  4071b4:	cmp    ecx,0xfffc
  4071ba:	mov    eax,0xfffc
  4071bf:	cmovb  eax,ecx
  4071c2:	mov    DWORD PTR [rbx+0x24],eax
  4071c5:	mov    rax,QWORD PTR [rbx+0x30]
  4071c9:	mov    DWORD PTR [rax+0x4],0xfffc
  4071d0:	mov    rsi,QWORD PTR [rbx+0x8]
  4071d4:	mov    eax,ebp
  4071d6:	add    ebp,0x4
  4071d9:	movzx  ecx,r14w
  4071dd:	mov    WORD PTR [rsi+rcx*2],bp
  4071e1:	cmp    WORD PTR [rbx+0x10],cx
  4071e5:	ja     4071ef <flatcc_builder_table_add@@Base+0xef>
  4071e7:	inc    r14d
  4071ea:	mov    WORD PTR [rbx+0x10],r14w
  4071ef:	add    rax,QWORD PTR [rbx+0x18]
  4071f3:	pop    rbx
  4071f4:	pop    r14
  4071f6:	pop    rbp
  4071f7:	ret    
  4071f8:	lea    rdi,[rip+0x4a92]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4071ff:	lea    rsi,[rip+0x425c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407206:	lea    rcx,[rip+0x50ae]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  40720d:	mov    edx,0x6ed
  407212:	call   403060 <__assert_fail@plt>
  407217:	lea    rdi,[rip+0x50e7]        # 40c305 <flatcc_builder_padding_base@@Base+0x1125>
  40721e:	lea    rsi,[rip+0x423d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407225:	lea    rcx,[rip+0x508f]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  40722c:	mov    edx,0x6ee
  407231:	call   403060 <__assert_fail@plt>
  407236:	lea    rdi,[rip+0x53e5]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40723d:	lea    rsi,[rip+0x421e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407244:	lea    rcx,[rip+0x5070]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  40724b:	mov    edx,0x6f8
  407250:	call   403060 <__assert_fail@plt>
  407255:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40725f:	nop

0000000000407260 <flatcc_builder_table_add_union_vector@@Base>:
  407260:	push   r15
  407262:	push   r14
  407264:	push   r12
  407266:	push   rbx
  407267:	push   rax
  407268:	mov    rax,QWORD PTR [rdi+0x30]
  40726c:	cmp    WORD PTR [rax+0xe],0x3
  407271:	jne    4072c7 <flatcc_builder_table_add_union_vector@@Base+0x67>
  407273:	mov    rbx,rdx
  407276:	mov    r12,rdx
  407279:	shr    r12,0x20
  40727d:	test   ebx,ebx
  40727f:	setne  al
  407282:	test   r12d,r12d
  407285:	sete   cl
  407288:	xor    cl,al
  40728a:	je     4072e6 <flatcc_builder_table_add_union_vector@@Base+0x86>
  40728c:	test   ebx,ebx
  40728e:	je     4072b9 <flatcc_builder_table_add_union_vector@@Base+0x59>
  407290:	mov    r14d,esi
  407293:	mov    r15,rdi
  407296:	lea    esi,[r14-0x1]
  40729a:	call   406fa0 <flatcc_builder_table_add_offset@@Base>
  40729f:	test   rax,rax
  4072a2:	je     407305 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  4072a4:	mov    DWORD PTR [rax],ebx
  4072a6:	mov    rdi,r15
  4072a9:	mov    esi,r14d
  4072ac:	call   406fa0 <flatcc_builder_table_add_offset@@Base>
  4072b1:	test   rax,rax
  4072b4:	je     407324 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  4072b6:	mov    DWORD PTR [rax],r12d
  4072b9:	xor    eax,eax
  4072bb:	add    rsp,0x8
  4072bf:	pop    rbx
  4072c0:	pop    r12
  4072c2:	pop    r14
  4072c4:	pop    r15
  4072c6:	ret    
  4072c7:	lea    rdi,[rip+0x49c3]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4072ce:	lea    rsi,[rip+0x418d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4072d5:	lea    rcx,[rip+0x4d37]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  4072dc:	mov    edx,0x600
  4072e1:	call   403060 <__assert_fail@plt>
  4072e6:	lea    rdi,[rip+0x4d89]        # 40c076 <flatcc_builder_padding_base@@Base+0xe96>
  4072ed:	lea    rsi,[rip+0x416e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4072f4:	lea    rcx,[rip+0x4d18]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  4072fb:	mov    edx,0x601
  407300:	call   403060 <__assert_fail@plt>
  407305:	lea    rdi,[rip+0x4cf1]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  40730c:	lea    rsi,[rip+0x414f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407313:	lea    rcx,[rip+0x4cf9]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  40731a:	mov    edx,0x604
  40731f:	call   403060 <__assert_fail@plt>
  407324:	lea    rdi,[rip+0x4cd2]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  40732b:	lea    rsi,[rip+0x4130]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407332:	lea    rcx,[rip+0x4cda]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  407339:	mov    edx,0x608
  40733e:	call   403060 <__assert_fail@plt>
  407343:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40734d:	nop    DWORD PTR [rax]

0000000000407350 <flatcc_builder_create_union_vector@@Base>:
  407350:	push   r15
  407352:	push   r14
  407354:	push   r13
  407356:	push   r12
  407358:	push   rbx
  407359:	mov    r14,rdx
  40735c:	mov    r15,rsi
  40735f:	mov    rbx,rdi
  407362:	mov    esi,0x4
  407367:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  40736c:	test   eax,eax
  40736e:	je     407380 <flatcc_builder_create_union_vector@@Base+0x30>
  407370:	xor    r14d,r14d
  407373:	mov    rax,r14
  407376:	pop    rbx
  407377:	pop    r12
  407379:	pop    r13
  40737b:	pop    r14
  40737d:	pop    r15
  40737f:	ret    
  407380:	mov    rax,QWORD PTR [rbx+0x30]
  407384:	mov    DWORD PTR [rax+0x10],0x4
  40738b:	mov    rax,QWORD PTR [rbx+0x30]
  40738f:	mov    DWORD PTR [rax+0x14],0x0
  407396:	mov    rax,QWORD PTR [rbx+0x30]
  40739a:	mov    WORD PTR [rax+0xe],0x5
  4073a0:	mov    ecx,DWORD PTR [rbx+0x28]
  4073a3:	mov    edx,DWORD PTR [rbx+0x70]
  4073a6:	sub    edx,ecx
  4073a8:	add    rcx,QWORD PTR [rbx+0x68]
  4073ac:	mov    QWORD PTR [rbx+0x18],rcx
  4073b0:	cmp    edx,0xfffffffc
  4073b3:	mov    ecx,0xfffffffc
  4073b8:	cmovb  ecx,edx
  4073bb:	mov    DWORD PTR [rbx+0x24],ecx
  4073be:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4073c5:	mov    ecx,DWORD PTR [rax+0x14]
  4073c8:	add    ecx,r14d
  4073cb:	jb     407638 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4073d1:	cmp    ecx,0x40000000
  4073d7:	jae    407638 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4073dd:	mov    DWORD PTR [rax+0x14],ecx
  4073e0:	mov    r12d,DWORD PTR [rbx+0x20]
  4073e4:	mov    eax,DWORD PTR [rbx+0x24]
  4073e7:	lea    ecx,[r12+r14*4]
  4073eb:	mov    DWORD PTR [rbx+0x20],ecx
  4073ee:	cmp    ecx,eax
  4073f0:	jae    407400 <flatcc_builder_create_union_vector@@Base+0xb0>
  4073f2:	mov    rsi,QWORD PTR [rbx+0x18]
  4073f6:	add    r12,rsi
  4073f9:	jne    40745b <flatcc_builder_create_union_vector@@Base+0x10b>
  4073fb:	jmp    407370 <flatcc_builder_create_union_vector@@Base+0x20>
  407400:	inc    ecx
  407402:	lea    rsi,[rbx+0x68]
  407406:	mov    rdi,QWORD PTR [rbx+0x40]
  40740a:	mov    edx,DWORD PTR [rbx+0x28]
  40740d:	add    rdx,rcx
  407410:	mov    ecx,0x1
  407415:	mov    r8d,0x1
  40741b:	call   QWORD PTR [rbx+0x50]
  40741e:	test   eax,eax
  407420:	jne    407370 <flatcc_builder_create_union_vector@@Base+0x20>
  407426:	mov    eax,DWORD PTR [rbx+0x28]
  407429:	mov    rsi,rax
  40742c:	add    rsi,QWORD PTR [rbx+0x68]
  407430:	mov    QWORD PTR [rbx+0x18],rsi
  407434:	mov    ecx,DWORD PTR [rbx+0x70]
  407437:	sub    ecx,eax
  407439:	cmp    ecx,0xfffffffc
  40743c:	mov    eax,0xfffffffc
  407441:	cmovb  eax,ecx
  407444:	mov    DWORD PTR [rbx+0x24],eax
  407447:	mov    rcx,QWORD PTR [rbx+0x30]
  40744b:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407452:	add    r12,rsi
  407455:	je     407370 <flatcc_builder_create_union_vector@@Base+0x20>
  40745b:	mov    r13d,DWORD PTR [rbx+0x20]
  40745f:	lea    ecx,[r14+r13*1]
  407463:	mov    DWORD PTR [rbx+0x20],ecx
  407466:	cmp    ecx,eax
  407468:	jb     4074bc <flatcc_builder_create_union_vector@@Base+0x16c>
  40746a:	inc    ecx
  40746c:	lea    rsi,[rbx+0x68]
  407470:	mov    rdi,QWORD PTR [rbx+0x40]
  407474:	mov    edx,DWORD PTR [rbx+0x28]
  407477:	add    rdx,rcx
  40747a:	mov    ecx,0x1
  40747f:	mov    r8d,0x1
  407485:	call   QWORD PTR [rbx+0x50]
  407488:	test   eax,eax
  40748a:	jne    407370 <flatcc_builder_create_union_vector@@Base+0x20>
  407490:	mov    eax,DWORD PTR [rbx+0x28]
  407493:	mov    rsi,rax
  407496:	add    rsi,QWORD PTR [rbx+0x68]
  40749a:	mov    QWORD PTR [rbx+0x18],rsi
  40749e:	mov    ecx,DWORD PTR [rbx+0x70]
  4074a1:	sub    ecx,eax
  4074a3:	cmp    ecx,0xfffffffc
  4074a6:	mov    eax,0xfffffffc
  4074ab:	cmovb  eax,ecx
  4074ae:	mov    DWORD PTR [rbx+0x24],eax
  4074b1:	mov    rax,QWORD PTR [rbx+0x30]
  4074b5:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4074bc:	mov    r12,rsi
  4074bf:	add    r12,r13
  4074c2:	je     407370 <flatcc_builder_create_union_vector@@Base+0x20>
  4074c8:	test   r14,r14
  4074cb:	je     407588 <flatcc_builder_create_union_vector@@Base+0x238>
  4074d1:	lea    rcx,[r14-0x1]
  4074d5:	mov    r8d,r14d
  4074d8:	and    r8d,0x3
  4074dc:	cmp    rcx,0x3
  4074e0:	jae    4074ee <flatcc_builder_create_union_vector@@Base+0x19e>
  4074e2:	xor    ecx,ecx
  4074e4:	test   r8,r8
  4074e7:	jne    407557 <flatcc_builder_create_union_vector@@Base+0x207>
  4074e9:	jmp    407588 <flatcc_builder_create_union_vector@@Base+0x238>
  4074ee:	mov    rdx,r14
  4074f1:	sub    rdx,r8
  4074f4:	lea    rdi,[rsi+r13*1]
  4074f8:	add    rdi,0x3
  4074fc:	xor    ecx,ecx
  4074fe:	xchg   ax,ax
  407500:	movzx  eax,BYTE PTR [r15+rcx*8]
  407505:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407509:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40750e:	mov    DWORD PTR [rsi+rcx*4],eax
  407511:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407517:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40751b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407520:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407524:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40752a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40752e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407533:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407537:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40753d:	mov    BYTE PTR [rdi+rcx*1],al
  407540:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407545:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407549:	add    rcx,0x4
  40754d:	cmp    rdx,rcx
  407550:	jne    407500 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407552:	test   r8,r8
  407555:	je     407588 <flatcc_builder_create_union_vector@@Base+0x238>
  407557:	lea    rdx,[rsi+rcx*4]
  40755b:	lea    rdi,[r15+rcx*8]
  40755f:	add    rdi,0x4
  407563:	add    r13,rcx
  407566:	add    r13,rsi
  407569:	xor    ecx,ecx
  40756b:	nop    DWORD PTR [rax+rax*1+0x0]
  407570:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407575:	mov    BYTE PTR [r13+rcx*1+0x0],al
  40757a:	mov    eax,DWORD PTR [rdi+rcx*8]
  40757d:	mov    DWORD PTR [rdx+rcx*4],eax
  407580:	inc    rcx
  407583:	cmp    r8,rcx
  407586:	jne    407570 <flatcc_builder_create_union_vector@@Base+0x220>
  407588:	mov    rdi,rbx
  40758b:	mov    rdx,r14
  40758e:	mov    rcx,r12
  407591:	call   406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407596:	mov    r15d,eax
  407599:	test   eax,eax
  40759b:	je     4075c1 <flatcc_builder_create_union_vector@@Base+0x271>
  40759d:	mov    ecx,0x1
  4075a2:	mov    r9d,0xffffffff
  4075a8:	mov    rdi,rbx
  4075ab:	mov    rsi,r12
  4075ae:	mov    rdx,r14
  4075b1:	mov    r8d,0x1
  4075b7:	call   406920 <flatcc_builder_create_vector@@Base>
  4075bc:	mov    r14d,eax
  4075bf:	jmp    4075c4 <flatcc_builder_create_union_vector@@Base+0x274>
  4075c1:	xor    r14d,r14d
  4075c4:	shl    r15,0x20
  4075c8:	mov    rdi,QWORD PTR [rbx+0x18]
  4075cc:	mov    edx,DWORD PTR [rbx+0x20]
  4075cf:	xor    esi,esi
  4075d1:	call   403070 <memset@plt>
  4075d6:	mov    rax,QWORD PTR [rbx+0x30]
  4075da:	mov    ecx,DWORD PTR [rax+0x8]
  4075dd:	mov    DWORD PTR [rbx+0x20],ecx
  4075e0:	mov    ecx,DWORD PTR [rax]
  4075e2:	mov    DWORD PTR [rbx+0x28],ecx
  4075e5:	mov    edx,DWORD PTR [rax+0x4]
  4075e8:	mov    rsi,rcx
  4075eb:	add    rsi,QWORD PTR [rbx+0x68]
  4075ef:	mov    QWORD PTR [rbx+0x18],rsi
  4075f3:	mov    esi,DWORD PTR [rbx+0x70]
  4075f6:	sub    esi,ecx
  4075f8:	cmp    esi,edx
  4075fa:	cmova  esi,edx
  4075fd:	mov    DWORD PTR [rbx+0x24],esi
  407600:	movzx  ecx,WORD PTR [rbx+0xea]
  407607:	cmp    WORD PTR [rbx+0xe8],cx
  40760e:	jae    407617 <flatcc_builder_create_union_vector@@Base+0x2c7>
  407610:	mov    WORD PTR [rbx+0xe8],cx
  407617:	or     r14,r15
  40761a:	movzx  ecx,WORD PTR [rax+0xc]
  40761e:	mov    WORD PTR [rbx+0xea],cx
  407625:	add    rax,0xffffffffffffffdc
  407629:	mov    QWORD PTR [rbx+0x30],rax
  40762d:	dec    DWORD PTR [rbx+0x104]
  407633:	jmp    407373 <flatcc_builder_create_union_vector@@Base+0x23>
  407638:	lea    rdi,[rip+0x4eec]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  40763f:	lea    rsi,[rip+0x3e1c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407646:	lea    rcx,[rip+0x4ef9]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  40764d:	mov    edx,0x37c
  407652:	call   403060 <__assert_fail@plt>
  407657:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407660 <flatcc_builder_create_union_vector_direct@@Base>:
  407660:	push   r15
  407662:	push   r14
  407664:	push   r12
  407666:	push   rbx
  407667:	push   rax
  407668:	mov    r14,rcx
  40766b:	mov    r15,rsi
  40766e:	mov    r12,rdi
  407671:	mov    rsi,rdx
  407674:	mov    rdx,rcx
  407677:	mov    rcx,r15
  40767a:	call   406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40767f:	mov    ebx,eax
  407681:	test   eax,eax
  407683:	je     4076a8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407685:	mov    ecx,0x1
  40768a:	mov    r9d,0xffffffff
  407690:	mov    rdi,r12
  407693:	mov    rsi,r15
  407696:	mov    rdx,r14
  407699:	mov    r8d,0x1
  40769f:	call   406920 <flatcc_builder_create_vector@@Base>
  4076a4:	mov    eax,eax
  4076a6:	jmp    4076aa <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  4076a8:	xor    eax,eax
  4076aa:	shl    rbx,0x20
  4076ae:	or     rbx,rax
  4076b1:	mov    rax,rbx
  4076b4:	add    rsp,0x8
  4076b8:	pop    rbx
  4076b9:	pop    r12
  4076bb:	pop    r14
  4076bd:	pop    r15
  4076bf:	ret    

00000000004076c0 <flatcc_builder_start_union_vector@@Base>:
  4076c0:	push   rbx
  4076c1:	mov    rbx,rdi
  4076c4:	mov    esi,0x4
  4076c9:	call   404bc0 <flatcc_builder_start_buffer@@Base+0xe0>
  4076ce:	mov    ecx,eax
  4076d0:	mov    eax,0xffffffff
  4076d5:	test   ecx,ecx
  4076d7:	je     4076db <flatcc_builder_start_union_vector@@Base+0x1b>
  4076d9:	pop    rbx
  4076da:	ret    
  4076db:	mov    rax,QWORD PTR [rbx+0x30]
  4076df:	mov    DWORD PTR [rax+0x10],0x8
  4076e6:	mov    rax,QWORD PTR [rbx+0x30]
  4076ea:	mov    DWORD PTR [rax+0x14],0x0
  4076f1:	mov    rax,QWORD PTR [rbx+0x30]
  4076f5:	mov    WORD PTR [rax+0xe],0x7
  4076fb:	mov    ecx,DWORD PTR [rbx+0x28]
  4076fe:	mov    edx,DWORD PTR [rbx+0x70]
  407701:	sub    edx,ecx
  407703:	add    rcx,QWORD PTR [rbx+0x68]
  407707:	mov    QWORD PTR [rbx+0x18],rcx
  40770b:	cmp    edx,0xfffffffc
  40770e:	mov    ecx,0xfffffffc
  407713:	cmovb  ecx,edx
  407716:	mov    DWORD PTR [rbx+0x24],ecx
  407719:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407720:	xor    eax,eax
  407722:	pop    rbx
  407723:	ret    
  407724:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40772e:	xchg   ax,ax

0000000000407730 <flatcc_builder_end_union_vector@@Base>:
  407730:	push   rbp
  407731:	push   r15
  407733:	push   r14
  407735:	push   r13
  407737:	push   r12
  407739:	push   rbx
  40773a:	push   rax
  40773b:	mov    rax,QWORD PTR [rdi+0x30]
  40773f:	cmp    WORD PTR [rax+0xe],0x7
  407744:	jne    407b34 <flatcc_builder_end_union_vector@@Base+0x404>
  40774a:	mov    r13,rdi
  40774d:	mov    r14d,DWORD PTR [rax+0x14]
  407751:	lea    eax,[r14+r14*4]
  407755:	mov    r12d,DWORD PTR [rdi+0x20]
  407759:	add    eax,r12d
  40775c:	mov    DWORD PTR [rdi+0x20],eax
  40775f:	cmp    eax,DWORD PTR [rdi+0x24]
  407762:	jae    40776a <flatcc_builder_end_union_vector@@Base+0x3a>
  407764:	mov    r8,QWORD PTR [r13+0x18]
  407768:	jmp    4077c1 <flatcc_builder_end_union_vector@@Base+0x91>
  40776a:	inc    eax
  40776c:	lea    rsi,[r13+0x68]
  407770:	mov    rdi,QWORD PTR [r13+0x40]
  407774:	mov    edx,DWORD PTR [r13+0x28]
  407778:	add    rdx,rax
  40777b:	mov    ecx,0x1
  407780:	mov    r8d,0x1
  407786:	call   QWORD PTR [r13+0x50]
  40778a:	test   eax,eax
  40778c:	jne    4078f6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  407792:	mov    eax,DWORD PTR [r13+0x28]
  407796:	mov    r8,rax
  407799:	add    r8,QWORD PTR [r13+0x68]
  40779d:	mov    QWORD PTR [r13+0x18],r8
  4077a1:	mov    ecx,DWORD PTR [r13+0x70]
  4077a5:	sub    ecx,eax
  4077a7:	cmp    ecx,0xfffffffc
  4077aa:	mov    eax,0xfffffffc
  4077af:	cmovb  eax,ecx
  4077b2:	mov    DWORD PTR [r13+0x24],eax
  4077b6:	mov    rax,QWORD PTR [r13+0x30]
  4077ba:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4077c1:	mov    rsi,r8
  4077c4:	add    rsi,r12
  4077c7:	je     4078f6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  4077cd:	lea    r15,[rsi+r14*4]
  4077d1:	test   r14d,r14d
  4077d4:	je     4078ba <flatcc_builder_end_union_vector@@Base+0x18a>
  4077da:	cmp    r14d,0x9
  4077de:	jae    407989 <flatcc_builder_end_union_vector@@Base+0x259>
  4077e4:	xor    r9d,r9d
  4077e7:	mov    r11d,r14d
  4077ea:	sub    r11d,r9d
  4077ed:	mov    r10,r9
  4077f0:	not    r10
  4077f3:	add    r10,r14
  4077f6:	and    r11,0x3
  4077fa:	je     407840 <flatcc_builder_end_union_vector@@Base+0x110>
  4077fc:	mov    rdx,r9
  4077ff:	neg    rdx
  407802:	lea    rbp,[r12+r9*4]
  407806:	add    rbp,r8
  407809:	lea    rbx,[r8+r9*8]
  40780d:	add    rbx,0x4
  407811:	lea    rax,[r9+r14*4]
  407815:	add    rax,r12
  407818:	add    rax,r8
  40781b:	xor    edi,edi
  40781d:	nop    DWORD PTR [rax]
  407820:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407825:	mov    BYTE PTR [rax+rdi*1],cl
  407828:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40782b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40782f:	dec    rdx
  407832:	inc    rdi
  407835:	cmp    r11,rdi
  407838:	jne    407820 <flatcc_builder_end_union_vector@@Base+0xf0>
  40783a:	neg    rdx
  40783d:	mov    r9,rdx
  407840:	cmp    r10,0x3
  407844:	jb     4078ba <flatcc_builder_end_union_vector@@Base+0x18a>
  407846:	mov    rbp,r14
  407849:	sub    rbp,r9
  40784c:	lea    rcx,[r12+r9*4]
  407850:	lea    rdx,[r8+rcx*1]
  407854:	add    rdx,0xc
  407858:	lea    rdi,[r8+r9*8]
  40785c:	add    rdi,0x1c
  407860:	lea    rcx,[r9+r14*4]
  407864:	add    rcx,r12
  407867:	add    rcx,r8
  40786a:	add    rcx,0x3
  40786e:	xor    ebx,ebx
  407870:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  407875:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  407879:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  40787d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  407881:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  407886:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  40788a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  40788e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  407892:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  407897:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  40789b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  40789f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  4078a3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  4078a8:	mov    BYTE PTR [rcx+rbx*1],al
  4078ab:	mov    eax,DWORD PTR [rdi+rbx*8]
  4078ae:	mov    DWORD PTR [rdx+rbx*4],eax
  4078b1:	add    rbx,0x4
  4078b5:	cmp    rbp,rbx
  4078b8:	jne    407870 <flatcc_builder_end_union_vector@@Base+0x140>
  4078ba:	mov    rdi,r13
  4078bd:	mov    rdx,r14
  4078c0:	mov    rcx,r15
  4078c3:	vzeroupper 
  4078c6:	call   406ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4078cb:	mov    r12d,eax
  4078ce:	test   eax,eax
  4078d0:	je     4078fb <flatcc_builder_end_union_vector@@Base+0x1cb>
  4078d2:	mov    ecx,0x1
  4078d7:	mov    r9d,0xffffffff
  4078dd:	mov    rdi,r13
  4078e0:	mov    rsi,r15
  4078e3:	mov    rdx,r14
  4078e6:	mov    r8d,0x1
  4078ec:	call   406920 <flatcc_builder_create_vector@@Base>
  4078f1:	mov    r14d,eax
  4078f4:	jmp    4078fe <flatcc_builder_end_union_vector@@Base+0x1ce>
  4078f6:	xor    r14d,r14d
  4078f9:	jmp    407977 <flatcc_builder_end_union_vector@@Base+0x247>
  4078fb:	xor    r14d,r14d
  4078fe:	shl    r12,0x20
  407902:	mov    rdi,QWORD PTR [r13+0x18]
  407906:	mov    edx,DWORD PTR [r13+0x20]
  40790a:	xor    esi,esi
  40790c:	call   403070 <memset@plt>
  407911:	mov    rax,QWORD PTR [r13+0x30]
  407915:	mov    ecx,DWORD PTR [rax+0x8]
  407918:	mov    DWORD PTR [r13+0x20],ecx
  40791c:	mov    ecx,DWORD PTR [rax]
  40791e:	mov    DWORD PTR [r13+0x28],ecx
  407922:	mov    edx,DWORD PTR [rax+0x4]
  407925:	mov    rsi,rcx
  407928:	add    rsi,QWORD PTR [r13+0x68]
  40792c:	mov    QWORD PTR [r13+0x18],rsi
  407930:	mov    esi,DWORD PTR [r13+0x70]
  407934:	sub    esi,ecx
  407936:	cmp    esi,edx
  407938:	cmova  esi,edx
  40793b:	mov    DWORD PTR [r13+0x24],esi
  40793f:	movzx  ecx,WORD PTR [r13+0xea]
  407947:	cmp    WORD PTR [r13+0xe8],cx
  40794f:	jae    407959 <flatcc_builder_end_union_vector@@Base+0x229>
  407951:	mov    WORD PTR [r13+0xe8],cx
  407959:	or     r14,r12
  40795c:	movzx  ecx,WORD PTR [rax+0xc]
  407960:	mov    WORD PTR [r13+0xea],cx
  407968:	add    rax,0xffffffffffffffdc
  40796c:	mov    QWORD PTR [r13+0x30],rax
  407970:	dec    DWORD PTR [r13+0x104]
  407977:	mov    rax,r14
  40797a:	add    rsp,0x8
  40797e:	pop    rbx
  40797f:	pop    r12
  407981:	pop    r13
  407983:	pop    r14
  407985:	pop    r15
  407987:	pop    rbp
  407988:	ret    
  407989:	lea    rax,[r14-0x1]
  40798d:	mov    ecx,0x8
  407992:	mul    rcx
  407995:	seto   cl
  407998:	mov    rdx,r8
  40799b:	not    rdx
  40799e:	xor    r9d,r9d
  4079a1:	cmp    rax,rdx
  4079a4:	ja     4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4079aa:	test   cl,cl
  4079ac:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4079b2:	lea    rdx,[r8+0x4]
  4079b6:	mov    rdi,rdx
  4079b9:	not    rdi
  4079bc:	cmp    rax,rdi
  4079bf:	ja     4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4079c5:	test   cl,cl
  4079c7:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4079cd:	lea    rcx,[r14+r14*4]
  4079d1:	add    rcx,r12
  4079d4:	add    rcx,r8
  4079d7:	lea    rbx,[r8+r14*8]
  4079db:	add    rbx,0xfffffffffffffff9
  4079df:	cmp    rbx,r15
  4079e2:	seta   r11b
  4079e6:	lea    rdi,[r8+r14*8]
  4079ea:	cmp    r8,rcx
  4079ed:	setb   r10b
  4079f1:	cmp    rdi,r15
  4079f4:	seta   al
  4079f7:	cmp    rdx,rcx
  4079fa:	setb   bpl
  4079fe:	cmp    rsi,rbx
  407a01:	setb   cl
  407a04:	cmp    r8,r15
  407a07:	setb   BYTE PTR [rsp+0x7]
  407a0c:	cmp    rsi,rdi
  407a0f:	setb   bl
  407a12:	cmp    rdx,r15
  407a15:	setb   dl
  407a18:	xor    r9d,r9d
  407a1b:	test   r11b,r10b
  407a1e:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407a24:	and    al,bpl
  407a27:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407a2d:	and    cl,BYTE PTR [rsp+0x7]
  407a31:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407a37:	and    bl,dl
  407a39:	jne    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407a3f:	mov    eax,r14d
  407a42:	and    eax,0x7
  407a45:	test   rax,rax
  407a48:	mov    ecx,0x8
  407a4d:	cmovne rcx,rax
  407a51:	mov    r9,r14
  407a54:	sub    r9,rcx
  407a57:	vmovdqa ymm0,YMMWORD PTR [rip+0x3981]        # 40b3e0 <flatcc_builder_padding_base@@Base+0x200>
  407a5f:	vmovdqa ymm1,YMMWORD PTR [rip+0x3999]        # 40b400 <flatcc_builder_padding_base@@Base+0x220>
  407a67:	xor    eax,eax
  407a69:	vmovdqa xmm8,XMMWORD PTR [rip+0x39af]        # 40b420 <flatcc_builder_padding_base@@Base+0x240>
  407a71:	vmovdqa xmm9,XMMWORD PTR [rip+0x39b7]        # 40b430 <flatcc_builder_padding_base@@Base+0x250>
  407a79:	vpbroadcastq ymm4,QWORD PTR [rip+0x39be]        # 40b440 <flatcc_builder_padding_base@@Base+0x260>
  407a82:	vpbroadcastq ymm5,QWORD PTR [rip+0x39bd]        # 40b448 <flatcc_builder_padding_base@@Base+0x268>
  407a8b:	mov    rdi,r8
  407a8e:	xchg   ax,ax
  407a90:	vmovdqu xmm6,XMMWORD PTR [rdi]
  407a94:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  407a99:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  407a9e:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  407aa3:	vpshufb xmm3,xmm3,xmm8
  407aa8:	vpshufb xmm2,xmm2,xmm8
  407aad:	vpunpcklwd xmm2,xmm2,xmm3
  407ab1:	vpshufb xmm3,xmm7,xmm9
  407ab6:	vpshufb xmm6,xmm6,xmm9
  407abb:	vpunpcklwd xmm3,xmm6,xmm3
  407abf:	vpblendd xmm2,xmm3,xmm2,0x2
  407ac5:	vmovq  QWORD PTR [r15+rax*1],xmm2
  407acb:	vpsllq ymm2,ymm0,0x3
  407ad0:	vmovq  xmm3,r8
  407ad5:	vpbroadcastq ymm3,xmm3
  407ada:	vpaddq ymm2,ymm3,ymm2
  407ade:	vpaddq ymm2,ymm2,ymm4
  407ae2:	vpsllq ymm6,ymm1,0x3
  407ae7:	vpaddq ymm3,ymm3,ymm6
  407aeb:	vpaddq ymm3,ymm3,ymm4
  407aef:	vpcmpeqd xmm6,xmm6,xmm6
  407af3:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  407afd:	vpcmpeqd xmm3,xmm3,xmm3
  407b01:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  407b0b:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  407b11:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  407b16:	add    rax,0x8
  407b1a:	vpaddq ymm1,ymm1,ymm5
  407b1e:	vpaddq ymm0,ymm0,ymm5
  407b22:	add    rdi,0x40
  407b26:	cmp    r9,rax
  407b29:	jne    407a90 <flatcc_builder_end_union_vector@@Base+0x360>
  407b2f:	jmp    4077e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407b34:	lea    rdi,[rip+0x4563]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407b3b:	lea    rsi,[rip+0x3920]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407b42:	lea    rcx,[rip+0x4587]        # 40c0d0 <flatcc_builder_padding_base@@Base+0xef0>
  407b49:	mov    edx,0x651
  407b4e:	call   403060 <__assert_fail@plt>
  407b53:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b5d:	nop    DWORD PTR [rax]

0000000000407b60 <flatcc_builder_union_vector_count@@Base>:
  407b60:	mov    rax,QWORD PTR [rdi+0x30]
  407b64:	mov    eax,DWORD PTR [rax+0x14]
  407b67:	ret    
  407b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407b70 <flatcc_builder_union_vector_edit@@Base>:
  407b70:	mov    rax,QWORD PTR [rdi+0x18]
  407b74:	ret    
  407b75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b7f:	nop

0000000000407b80 <flatcc_builder_extend_union_vector@@Base>:
  407b80:	push   r14
  407b82:	push   rbx
  407b83:	push   rax
  407b84:	mov    rax,QWORD PTR [rdi+0x30]
  407b88:	mov    ecx,DWORD PTR [rax+0x14]
  407b8b:	add    ecx,esi
  407b8d:	jb     407c14 <flatcc_builder_extend_union_vector@@Base+0x94>
  407b93:	cmp    ecx,0x20000000
  407b99:	jae    407c14 <flatcc_builder_extend_union_vector@@Base+0x94>
  407b9b:	mov    rbx,rdi
  407b9e:	mov    DWORD PTR [rax+0x14],ecx
  407ba1:	mov    r14d,DWORD PTR [rdi+0x20]
  407ba5:	lea    eax,[r14+rsi*8]
  407ba9:	mov    DWORD PTR [rdi+0x20],eax
  407bac:	cmp    eax,DWORD PTR [rdi+0x24]
  407baf:	jae    407bb7 <flatcc_builder_extend_union_vector@@Base+0x37>
  407bb1:	mov    rax,QWORD PTR [rbx+0x18]
  407bb5:	jmp    407c09 <flatcc_builder_extend_union_vector@@Base+0x89>
  407bb7:	inc    eax
  407bb9:	lea    rsi,[rbx+0x68]
  407bbd:	mov    rdi,QWORD PTR [rbx+0x40]
  407bc1:	mov    edx,DWORD PTR [rbx+0x28]
  407bc4:	add    rdx,rax
  407bc7:	mov    ecx,0x1
  407bcc:	mov    r8d,0x1
  407bd2:	call   QWORD PTR [rbx+0x50]
  407bd5:	test   eax,eax
  407bd7:	je     407bdd <flatcc_builder_extend_union_vector@@Base+0x5d>
  407bd9:	xor    eax,eax
  407bdb:	jmp    407c0c <flatcc_builder_extend_union_vector@@Base+0x8c>
  407bdd:	mov    ecx,DWORD PTR [rbx+0x28]
  407be0:	mov    rax,rcx
  407be3:	add    rax,QWORD PTR [rbx+0x68]
  407be7:	mov    QWORD PTR [rbx+0x18],rax
  407beb:	mov    edx,DWORD PTR [rbx+0x70]
  407bee:	sub    edx,ecx
  407bf0:	cmp    edx,0xfffffffc
  407bf3:	mov    ecx,0xfffffffc
  407bf8:	cmovb  ecx,edx
  407bfb:	mov    DWORD PTR [rbx+0x24],ecx
  407bfe:	mov    rcx,QWORD PTR [rbx+0x30]
  407c02:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407c09:	add    rax,r14
  407c0c:	add    rsp,0x8
  407c10:	pop    rbx
  407c11:	pop    r14
  407c13:	ret    
  407c14:	lea    rdi,[rip+0x4910]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  407c1b:	lea    rsi,[rip+0x3840]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407c22:	lea    rcx,[rip+0x491d]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  407c29:	mov    edx,0x37c
  407c2e:	call   403060 <__assert_fail@plt>
  407c33:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c3d:	nop    DWORD PTR [rax]

0000000000407c40 <flatcc_builder_truncate_union_vector@@Base>:
  407c40:	push   rax
  407c41:	mov    rax,QWORD PTR [rdi+0x30]
  407c45:	cmp    WORD PTR [rax+0xe],0x7
  407c4a:	jne    407c7b <flatcc_builder_truncate_union_vector@@Base+0x3b>
  407c4c:	mov    rdx,rsi
  407c4f:	mov    ecx,DWORD PTR [rax+0x14]
  407c52:	sub    ecx,edx
  407c54:	jb     407c9a <flatcc_builder_truncate_union_vector@@Base+0x5a>
  407c56:	mov    DWORD PTR [rax+0x14],ecx
  407c59:	mov    rax,QWORD PTR [rdi+0x30]
  407c5d:	imul   edx,DWORD PTR [rax+0x10]
  407c61:	mov    eax,DWORD PTR [rdi+0x20]
  407c64:	sub    eax,edx
  407c66:	mov    DWORD PTR [rdi+0x20],eax
  407c69:	add    rax,QWORD PTR [rdi+0x18]
  407c6d:	mov    rdi,rax
  407c70:	xor    esi,esi
  407c72:	call   403070 <memset@plt>
  407c77:	xor    eax,eax
  407c79:	pop    rcx
  407c7a:	ret    
  407c7b:	lea    rdi,[rip+0x441c]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407c82:	lea    rsi,[rip+0x37d9]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407c89:	lea    rcx,[rip+0x4493]        # 40c123 <flatcc_builder_padding_base@@Base+0xf43>
  407c90:	mov    edx,0x681
  407c95:	call   403060 <__assert_fail@plt>
  407c9a:	lea    rdi,[rip+0x3e61]        # 40bb02 <flatcc_builder_padding_base@@Base+0x922>
  407ca1:	lea    rsi,[rip+0x37ba]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407ca8:	lea    rcx,[rip+0x4474]        # 40c123 <flatcc_builder_padding_base@@Base+0xf43>
  407caf:	mov    edx,0x682
  407cb4:	call   403060 <__assert_fail@plt>
  407cb9:	nop    DWORD PTR [rax+0x0]

0000000000407cc0 <flatcc_builder_union_vector_push@@Base>:
  407cc0:	push   r15
  407cc2:	push   r14
  407cc4:	push   rbx
  407cc5:	mov    rax,QWORD PTR [rdi+0x30]
  407cc9:	cmp    WORD PTR [rax+0xe],0x7
  407cce:	jne    407d67 <flatcc_builder_union_vector_push@@Base+0xa7>
  407cd4:	mov    ecx,DWORD PTR [rax+0x14]
  407cd7:	cmp    ecx,0x1fffffff
  407cdd:	je     407d29 <flatcc_builder_union_vector_push@@Base+0x69>
  407cdf:	mov    r14,rsi
  407ce2:	mov    rbx,rdi
  407ce5:	inc    ecx
  407ce7:	mov    DWORD PTR [rax+0x14],ecx
  407cea:	mov    r15d,DWORD PTR [rdi+0x20]
  407cee:	lea    eax,[r15+0x8]
  407cf2:	mov    DWORD PTR [rdi+0x20],eax
  407cf5:	cmp    eax,DWORD PTR [rdi+0x24]
  407cf8:	jae    407d05 <flatcc_builder_union_vector_push@@Base+0x45>
  407cfa:	mov    rax,QWORD PTR [rbx+0x18]
  407cfe:	add    rax,r15
  407d01:	jne    407d5e <flatcc_builder_union_vector_push@@Base+0x9e>
  407d03:	jmp    407d29 <flatcc_builder_union_vector_push@@Base+0x69>
  407d05:	lea    eax,[r15+0x9]
  407d09:	lea    rsi,[rbx+0x68]
  407d0d:	mov    rdi,QWORD PTR [rbx+0x40]
  407d11:	mov    edx,DWORD PTR [rbx+0x28]
  407d14:	add    rdx,rax
  407d17:	mov    ecx,0x1
  407d1c:	mov    r8d,0x1
  407d22:	call   QWORD PTR [rbx+0x50]
  407d25:	test   eax,eax
  407d27:	je     407d2d <flatcc_builder_union_vector_push@@Base+0x6d>
  407d29:	xor    eax,eax
  407d2b:	jmp    407d61 <flatcc_builder_union_vector_push@@Base+0xa1>
  407d2d:	mov    ecx,DWORD PTR [rbx+0x28]
  407d30:	mov    rax,rcx
  407d33:	add    rax,QWORD PTR [rbx+0x68]
  407d37:	mov    QWORD PTR [rbx+0x18],rax
  407d3b:	mov    edx,DWORD PTR [rbx+0x70]
  407d3e:	sub    edx,ecx
  407d40:	cmp    edx,0xfffffffc
  407d43:	mov    ecx,0xfffffffc
  407d48:	cmovb  ecx,edx
  407d4b:	mov    DWORD PTR [rbx+0x24],ecx
  407d4e:	mov    rcx,QWORD PTR [rbx+0x30]
  407d52:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407d59:	add    rax,r15
  407d5c:	je     407d29 <flatcc_builder_union_vector_push@@Base+0x69>
  407d5e:	mov    QWORD PTR [rax],r14
  407d61:	pop    rbx
  407d62:	pop    r14
  407d64:	pop    r15
  407d66:	ret    
  407d67:	lea    rdi,[rip+0x4330]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407d6e:	lea    rsi,[rip+0x36ed]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407d75:	lea    rcx,[rip+0x43ec]        # 40c168 <flatcc_builder_padding_base@@Base+0xf88>
  407d7c:	mov    edx,0x68d
  407d81:	call   403060 <__assert_fail@plt>
  407d86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407d90 <flatcc_builder_append_union_vector@@Base>:
  407d90:	push   r15
  407d92:	push   r14
  407d94:	push   r13
  407d96:	push   r12
  407d98:	push   rbx
  407d99:	mov    rax,QWORD PTR [rdi+0x30]
  407d9d:	cmp    WORD PTR [rax+0xe],0x7
  407da2:	jne    407e7e <flatcc_builder_append_union_vector@@Base+0xee>
  407da8:	mov    r15,rdx
  407dab:	mov    ecx,DWORD PTR [rax+0x14]
  407dae:	add    ecx,r15d
  407db1:	jb     407e5f <flatcc_builder_append_union_vector@@Base+0xcf>
  407db7:	cmp    ecx,0x20000000
  407dbd:	jae    407e5f <flatcc_builder_append_union_vector@@Base+0xcf>
  407dc3:	mov    r14,rsi
  407dc6:	mov    rbx,rdi
  407dc9:	mov    DWORD PTR [rax+0x14],ecx
  407dcc:	mov    r13d,DWORD PTR [rdi+0x20]
  407dd0:	lea    eax,[r13+r15*8+0x0]
  407dd5:	mov    DWORD PTR [rdi+0x20],eax
  407dd8:	cmp    eax,DWORD PTR [rdi+0x24]
  407ddb:	jae    407de8 <flatcc_builder_append_union_vector@@Base+0x58>
  407ddd:	mov    r12,QWORD PTR [rbx+0x18]
  407de1:	add    r12,r13
  407de4:	jne    407e40 <flatcc_builder_append_union_vector@@Base+0xb0>
  407de6:	jmp    407e0a <flatcc_builder_append_union_vector@@Base+0x7a>
  407de8:	inc    eax
  407dea:	lea    rsi,[rbx+0x68]
  407dee:	mov    rdi,QWORD PTR [rbx+0x40]
  407df2:	mov    edx,DWORD PTR [rbx+0x28]
  407df5:	add    rdx,rax
  407df8:	mov    ecx,0x1
  407dfd:	mov    r8d,0x1
  407e03:	call   QWORD PTR [rbx+0x50]
  407e06:	test   eax,eax
  407e08:	je     407e0f <flatcc_builder_append_union_vector@@Base+0x7f>
  407e0a:	xor    r12d,r12d
  407e0d:	jmp    407e52 <flatcc_builder_append_union_vector@@Base+0xc2>
  407e0f:	mov    eax,DWORD PTR [rbx+0x28]
  407e12:	mov    r12,rax
  407e15:	add    r12,QWORD PTR [rbx+0x68]
  407e19:	mov    QWORD PTR [rbx+0x18],r12
  407e1d:	mov    ecx,DWORD PTR [rbx+0x70]
  407e20:	sub    ecx,eax
  407e22:	cmp    ecx,0xfffffffc
  407e25:	mov    eax,0xfffffffc
  407e2a:	cmovb  eax,ecx
  407e2d:	mov    DWORD PTR [rbx+0x24],eax
  407e30:	mov    rax,QWORD PTR [rbx+0x30]
  407e34:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407e3b:	add    r12,r13
  407e3e:	je     407e0a <flatcc_builder_append_union_vector@@Base+0x7a>
  407e40:	shl    r15d,0x3
  407e44:	mov    edx,r15d
  407e47:	mov    rdi,r12
  407e4a:	mov    rsi,r14
  407e4d:	call   403090 <memcpy@plt>
  407e52:	mov    rax,r12
  407e55:	pop    rbx
  407e56:	pop    r12
  407e58:	pop    r13
  407e5a:	pop    r14
  407e5c:	pop    r15
  407e5e:	ret    
  407e5f:	lea    rdi,[rip+0x46c5]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  407e66:	lea    rsi,[rip+0x35f5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407e6d:	lea    rcx,[rip+0x46d2]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  407e74:	mov    edx,0x37c
  407e79:	call   403060 <__assert_fail@plt>
  407e7e:	lea    rdi,[rip+0x4219]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407e85:	lea    rsi,[rip+0x35d6]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407e8c:	lea    rcx,[rip+0x4342]        # 40c1d5 <flatcc_builder_padding_base@@Base+0xff5>
  407e93:	mov    edx,0x69c
  407e98:	call   403060 <__assert_fail@plt>
  407e9d:	nop    DWORD PTR [rax]

0000000000407ea0 <flatcc_builder_create_string@@Base>:
  407ea0:	push   rbp
  407ea1:	push   rbx
  407ea2:	sub    rsp,0x98
  407ea9:	xor    ebp,ebp
  407eab:	mov    rax,rdx
  407eae:	shr    rax,0x20
  407eb2:	jne    407f86 <flatcc_builder_create_string@@Base+0xe6>
  407eb8:	mov    rbx,rdi
  407ebb:	mov    DWORD PTR [rsp+0x4],edx
  407ebf:	mov    ebp,DWORD PTR [rdi+0xf0]
  407ec5:	mov    eax,edx
  407ec7:	not    eax
  407ec9:	add    eax,ebp
  407ecb:	and    eax,0x3
  407ece:	inc    eax
  407ed0:	mov    QWORD PTR [rsp+0x8],0x4
  407ed9:	lea    rcx,[rsp+0x4]
  407ede:	mov    QWORD PTR [rsp+0x18],rcx
  407ee3:	mov    QWORD PTR [rsp+0x20],0x4
  407eec:	mov    DWORD PTR [rsp+0x10],0x1
  407ef4:	test   rdx,rdx
  407ef7:	je     407f1b <flatcc_builder_create_string@@Base+0x7b>
  407ef9:	lea    rcx,[rdx+0x4]
  407efd:	mov    QWORD PTR [rsp+0x8],rcx
  407f02:	mov    QWORD PTR [rsp+0x28],rsi
  407f07:	mov    QWORD PTR [rsp+0x30],rdx
  407f0c:	mov    DWORD PTR [rsp+0x10],0x2
  407f14:	mov    edx,0x2
  407f19:	jmp    407f25 <flatcc_builder_create_string@@Base+0x85>
  407f1b:	mov    ecx,0x4
  407f20:	mov    edx,0x1
  407f25:	mov    esi,eax
  407f27:	lea    r8,[rcx+rsi*1]
  407f2b:	mov    QWORD PTR [rsp+0x8],r8
  407f30:	mov    eax,edx
  407f32:	shl    rax,0x4
  407f36:	lea    rdi,[rip+0x32a3]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  407f3d:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407f42:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407f47:	inc    edx
  407f49:	mov    DWORD PTR [rsp+0x10],edx
  407f4d:	cmp    r8,0x11
  407f51:	setb   al
  407f54:	add    rcx,rsi
  407f57:	add    rcx,0xfffffffffffffff0
  407f5b:	shr    rcx,0x20
  407f5f:	sete   cl
  407f62:	test   r8d,r8d
  407f65:	jle    407f92 <flatcc_builder_create_string@@Base+0xf2>
  407f67:	or     al,cl
  407f69:	je     407f92 <flatcc_builder_create_string@@Base+0xf2>
  407f6b:	sub    ebp,r8d
  407f6e:	mov    rdi,QWORD PTR [rbx+0x38]
  407f72:	lea    rsi,[rsp+0x18]
  407f77:	mov    ecx,ebp
  407f79:	call   QWORD PTR [rbx+0x48]
  407f7c:	test   eax,eax
  407f7e:	jne    407fb1 <flatcc_builder_create_string@@Base+0x111>
  407f80:	mov    DWORD PTR [rbx+0xf0],ebp
  407f86:	mov    eax,ebp
  407f88:	add    rsp,0x98
  407f8f:	pop    rbx
  407f90:	pop    rbp
  407f91:	ret    
  407f92:	lea    rdi,[rip+0x4689]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  407f99:	lea    rsi,[rip+0x34c2]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407fa0:	lea    rcx,[rip+0x453a]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  407fa7:	mov    edx,0x287
  407fac:	call   403060 <__assert_fail@plt>
  407fb1:	lea    rdi,[rip+0x466a]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  407fb8:	lea    rsi,[rip+0x34a3]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407fbf:	lea    rcx,[rip+0x451b]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  407fc6:	mov    edx,0x28b
  407fcb:	call   403060 <__assert_fail@plt>

0000000000407fd0 <flatcc_builder_create_string_str@@Base>:
  407fd0:	push   r14
  407fd2:	push   rbx
  407fd3:	push   rax
  407fd4:	mov    rbx,rsi
  407fd7:	mov    r14,rdi
  407fda:	mov    rdi,rsi
  407fdd:	call   403050 <strlen@plt>
  407fe2:	mov    rdi,r14
  407fe5:	mov    rsi,rbx
  407fe8:	mov    rdx,rax
  407feb:	add    rsp,0x8
  407fef:	pop    rbx
  407ff0:	pop    r14
  407ff2:	jmp    407ea0 <flatcc_builder_create_string@@Base>
  407ff7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408000 <flatcc_builder_create_string_strn@@Base>:
  408000:	push   r15
  408002:	push   r14
  408004:	push   rbx
  408005:	mov    rbx,rdx
  408008:	mov    r14,rsi
  40800b:	mov    r15,rdi
  40800e:	mov    rdi,rsi
  408011:	xor    esi,esi
  408013:	call   403080 <memchr@plt>
  408018:	mov    rcx,rax
  40801b:	sub    rcx,r14
  40801e:	test   rax,rax
  408021:	cmovne rbx,rcx
  408025:	mov    rdi,r15
  408028:	mov    rsi,r14
  40802b:	mov    rdx,rbx
  40802e:	pop    rbx
  40802f:	pop    r14
  408031:	pop    r15
  408033:	jmp    407ea0 <flatcc_builder_create_string@@Base>
  408038:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408040 <flatcc_builder_end_string@@Base>:
  408040:	push   rbp
  408041:	push   rbx
  408042:	push   rax
  408043:	mov    rax,QWORD PTR [rdi+0x30]
  408047:	cmp    WORD PTR [rax+0xe],0x6
  40804c:	jne    4080e4 <flatcc_builder_end_string@@Base+0xa4>
  408052:	mov    rbx,rdi
  408055:	mov    edx,DWORD PTR [rax+0x14]
  408058:	cmp    edx,DWORD PTR [rdi+0x20]
  40805b:	jne    408103 <flatcc_builder_end_string@@Base+0xc3>
  408061:	mov    rsi,QWORD PTR [rbx+0x18]
  408065:	mov    rdi,rbx
  408068:	call   407ea0 <flatcc_builder_create_string@@Base>
  40806d:	mov    ebp,eax
  40806f:	test   eax,eax
  408071:	je     4080db <flatcc_builder_end_string@@Base+0x9b>
  408073:	mov    rdi,QWORD PTR [rbx+0x18]
  408077:	mov    edx,DWORD PTR [rbx+0x20]
  40807a:	xor    esi,esi
  40807c:	call   403070 <memset@plt>
  408081:	mov    rax,QWORD PTR [rbx+0x30]
  408085:	mov    ecx,DWORD PTR [rax+0x8]
  408088:	mov    DWORD PTR [rbx+0x20],ecx
  40808b:	mov    ecx,DWORD PTR [rax]
  40808d:	mov    DWORD PTR [rbx+0x28],ecx
  408090:	mov    edx,DWORD PTR [rax+0x4]
  408093:	mov    rsi,rcx
  408096:	add    rsi,QWORD PTR [rbx+0x68]
  40809a:	mov    QWORD PTR [rbx+0x18],rsi
  40809e:	mov    esi,DWORD PTR [rbx+0x70]
  4080a1:	sub    esi,ecx
  4080a3:	cmp    esi,edx
  4080a5:	cmova  esi,edx
  4080a8:	mov    DWORD PTR [rbx+0x24],esi
  4080ab:	movzx  ecx,WORD PTR [rbx+0xea]
  4080b2:	cmp    WORD PTR [rbx+0xe8],cx
  4080b9:	jae    4080c2 <flatcc_builder_end_string@@Base+0x82>
  4080bb:	mov    WORD PTR [rbx+0xe8],cx
  4080c2:	movzx  ecx,WORD PTR [rax+0xc]
  4080c6:	mov    WORD PTR [rbx+0xea],cx
  4080cd:	add    rax,0xffffffffffffffdc
  4080d1:	mov    QWORD PTR [rbx+0x30],rax
  4080d5:	dec    DWORD PTR [rbx+0x104]
  4080db:	mov    eax,ebp
  4080dd:	add    rsp,0x8
  4080e1:	pop    rbx
  4080e2:	pop    rbp
  4080e3:	ret    
  4080e4:	lea    rdi,[rip+0x38b6]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  4080eb:	lea    rsi,[rip+0x3370]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4080f2:	lea    rcx,[rip+0x415b]        # 40c254 <flatcc_builder_padding_base@@Base+0x1074>
  4080f9:	mov    edx,0x6c4
  4080fe:	call   403060 <__assert_fail@plt>
  408103:	lea    rdi,[rip+0x418d]        # 40c297 <flatcc_builder_padding_base@@Base+0x10b7>
  40810a:	lea    rsi,[rip+0x3351]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408111:	lea    rcx,[rip+0x413c]        # 40c254 <flatcc_builder_padding_base@@Base+0x1074>
  408118:	mov    edx,0x6c5
  40811d:	call   403060 <__assert_fail@plt>
  408122:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40812c:	nop    DWORD PTR [rax+0x0]

0000000000408130 <flatcc_builder_string_edit@@Base>:
  408130:	mov    rax,QWORD PTR [rdi+0x18]
  408134:	ret    
  408135:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40813f:	nop

0000000000408140 <flatcc_builder_string_len@@Base>:
  408140:	mov    rax,QWORD PTR [rdi+0x30]
  408144:	mov    eax,DWORD PTR [rax+0x14]
  408147:	ret    
  408148:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408150 <flatcc_builder_table_edit@@Base>:
  408150:	push   rax
  408151:	mov    rax,QWORD PTR [rdi+0x30]
  408155:	cmp    WORD PTR [rax+0xe],0x3
  40815a:	jne    408168 <flatcc_builder_table_edit@@Base+0x18>
  40815c:	mov    eax,DWORD PTR [rdi+0x20]
  40815f:	add    rax,QWORD PTR [rdi+0x18]
  408163:	sub    rax,rsi
  408166:	pop    rcx
  408167:	ret    
  408168:	lea    rdi,[rip+0x3b22]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  40816f:	lea    rsi,[rip+0x32ec]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408176:	lea    rcx,[rip+0x41cc]        # 40c349 <flatcc_builder_padding_base@@Base+0x1169>
  40817d:	mov    edx,0x702
  408182:	call   403060 <__assert_fail@plt>
  408187:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408190 <flatcc_builder_table_add_copy@@Base>:
  408190:	push   r15
  408192:	push   r14
  408194:	push   rbx
  408195:	mov    r15,rcx
  408198:	mov    r14,rdx
  40819b:	mov    rdx,rcx
  40819e:	mov    ecx,r8d
  4081a1:	call   407100 <flatcc_builder_table_add@@Base>
  4081a6:	mov    rbx,rax
  4081a9:	test   rax,rax
  4081ac:	je     4081bc <flatcc_builder_table_add_copy@@Base+0x2c>
  4081ae:	mov    rdi,rbx
  4081b1:	mov    rsi,r14
  4081b4:	mov    rdx,r15
  4081b7:	call   403090 <memcpy@plt>
  4081bc:	mov    rax,rbx
  4081bf:	pop    rbx
  4081c0:	pop    r14
  4081c2:	pop    r15
  4081c4:	ret    
  4081c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081cf:	nop

00000000004081d0 <flatcc_builder_push_buffer_alignment@@Base>:
  4081d0:	movzx  eax,WORD PTR [rdi+0xe8]
  4081d7:	mov    WORD PTR [rdi+0xe8],0x4
  4081e0:	ret    
  4081e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081f0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4081f0:	cmp    WORD PTR [rdi+0xe8],si
  4081f7:	jae    408200 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  4081f9:	mov    WORD PTR [rdi+0xe8],si
  408200:	ret    
  408201:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40820b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408210 <flatcc_builder_get_buffer_alignment@@Base>:
  408210:	movzx  eax,WORD PTR [rdi+0xe8]
  408217:	ret    
  408218:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408220 <flatcc_builder_set_vtable_clustering@@Base>:
  408220:	xor    eax,eax
  408222:	test   esi,esi
  408224:	sete   al
  408227:	mov    DWORD PTR [rdi+0x124],eax
  40822d:	ret    
  40822e:	xchg   ax,ax

0000000000408230 <flatcc_builder_set_block_align@@Base>:
  408230:	mov    WORD PTR [rdi+0xec],si
  408237:	ret    
  408238:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408240 <flatcc_builder_get_level@@Base>:
  408240:	mov    eax,DWORD PTR [rdi+0x104]
  408246:	ret    
  408247:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408250 <flatcc_builder_set_max_level@@Base>:
  408250:	mov    DWORD PTR [rdi+0x120],esi
  408256:	cmp    DWORD PTR [rdi+0x108],esi
  40825c:	jge    408264 <flatcc_builder_set_max_level@@Base+0x14>
  40825e:	mov    DWORD PTR [rdi+0x108],esi
  408264:	ret    
  408265:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40826f:	nop

0000000000408270 <flatcc_builder_get_buffer_size@@Base>:
  408270:	movsxd rax,DWORD PTR [rdi+0xf4]
  408277:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40827e:	sub    rax,rcx
  408281:	ret    
  408282:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40828c:	nop    DWORD PTR [rax+0x0]

0000000000408290 <flatcc_builder_get_buffer_start@@Base>:
  408290:	mov    eax,DWORD PTR [rdi+0xf0]
  408296:	ret    
  408297:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082a0 <flatcc_builder_get_buffer_end@@Base>:
  4082a0:	mov    eax,DWORD PTR [rdi+0xf4]
  4082a6:	ret    
  4082a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082b0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4082b0:	mov    QWORD PTR [rdi+0x118],rsi
  4082b7:	ret    
  4082b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004082c0 <flatcc_builder_set_identifier@@Base>:
  4082c0:	test   rsi,rsi
  4082c3:	jne    4082cc <flatcc_builder_set_identifier@@Base+0xc>
  4082c5:	lea    rsi,[rip+0x2f14]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4082cc:	mov    eax,DWORD PTR [rsi]
  4082ce:	mov    DWORD PTR [rdi+0x110],eax
  4082d4:	ret    
  4082d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082df:	nop

00000000004082e0 <flatcc_builder_get_type@@Base>:
  4082e0:	mov    rax,QWORD PTR [rdi+0x30]
  4082e4:	test   rax,rax
  4082e7:	je     4082ee <flatcc_builder_get_type@@Base+0xe>
  4082e9:	movzx  eax,WORD PTR [rax+0xe]
  4082ed:	ret    
  4082ee:	xor    eax,eax
  4082f0:	ret    
  4082f1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408300 <flatcc_builder_get_type_at@@Base>:
  408300:	xor    eax,eax
  408302:	test   esi,esi
  408304:	jle    408322 <flatcc_builder_get_type_at@@Base+0x22>
  408306:	mov    ecx,DWORD PTR [rdi+0x104]
  40830c:	cmp    ecx,esi
  40830e:	jl     408322 <flatcc_builder_get_type_at@@Base+0x22>
  408310:	mov    rax,QWORD PTR [rdi+0x30]
  408314:	sub    esi,ecx
  408316:	movsxd rcx,esi
  408319:	lea    rcx,[rcx+rcx*8]
  40831d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408322:	ret    
  408323:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40832d:	nop    DWORD PTR [rax]

0000000000408330 <flatcc_builder_get_direct_buffer@@Base>:
  408330:	cmp    DWORD PTR [rdi+0x128],0x0
  408337:	je     408349 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408339:	mov    rax,QWORD PTR [rdi+0x130]
  408340:	cmp    rax,QWORD PTR [rdi+0x138]
  408347:	je     408358 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408349:	test   rsi,rsi
  40834c:	je     408355 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40834e:	mov    QWORD PTR [rsi],0x0
  408355:	xor    eax,eax
  408357:	ret    
  408358:	test   rsi,rsi
  40835b:	je     408367 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40835d:	mov    rax,QWORD PTR [rdi+0x160]
  408364:	mov    QWORD PTR [rsi],rax
  408367:	mov    rax,QWORD PTR [rdi+0x140]
  40836e:	ret    
  40836f:	nop

0000000000408370 <flatcc_builder_copy_buffer@@Base>:
  408370:	push   rax
  408371:	cmp    DWORD PTR [rdi+0x128],0x0
  408378:	je     40838d <flatcc_builder_copy_buffer@@Base+0x1d>
  40837a:	add    rdi,0x130
  408381:	call   408bf0 <flatcc_emitter_copy_buffer@@Base>
  408386:	test   rax,rax
  408389:	je     408391 <flatcc_builder_copy_buffer@@Base+0x21>
  40838b:	pop    rcx
  40838c:	ret    
  40838d:	xor    eax,eax
  40838f:	pop    rcx
  408390:	ret    
  408391:	lea    rdi,[rip+0x3338]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  408398:	lea    rsi,[rip+0x30c3]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40839f:	lea    rcx,[rip+0x402e]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  4083a6:	mov    edx,0x786
  4083ab:	call   403060 <__assert_fail@plt>

00000000004083b0 <flatcc_builder_finalize_buffer@@Base>:
  4083b0:	push   r15
  4083b2:	push   r14
  4083b4:	push   rbx
  4083b5:	mov    rbx,rdi
  4083b8:	movsxd r14,DWORD PTR [rdi+0xf4]
  4083bf:	movsxd rax,DWORD PTR [rdi+0xf0]
  4083c6:	sub    r14,rax
  4083c9:	test   rsi,rsi
  4083cc:	je     4083d1 <flatcc_builder_finalize_buffer@@Base+0x21>
  4083ce:	mov    QWORD PTR [rsi],r14
  4083d1:	mov    rdi,r14
  4083d4:	call   4030a0 <malloc@plt>
  4083d9:	test   rax,rax
  4083dc:	je     40840d <flatcc_builder_finalize_buffer@@Base+0x5d>
  4083de:	cmp    DWORD PTR [rbx+0x128],0x0
  4083e5:	je     40842c <flatcc_builder_finalize_buffer@@Base+0x7c>
  4083e7:	mov    r15,rax
  4083ea:	add    rbx,0x130
  4083f1:	mov    rdi,rbx
  4083f4:	mov    rsi,rax
  4083f7:	mov    rdx,r14
  4083fa:	call   408bf0 <flatcc_emitter_copy_buffer@@Base>
  4083ff:	test   rax,rax
  408402:	je     40844b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408404:	mov    rax,r15
  408407:	pop    rbx
  408408:	pop    r14
  40840a:	pop    r15
  40840c:	ret    
  40840d:	lea    rdi,[rip+0x420e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  408414:	lea    rsi,[rip+0x3047]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40841b:	lea    rcx,[rip+0x3ff7]        # 40c419 <flatcc_builder_padding_base@@Base+0x1239>
  408422:	mov    edx,0x798
  408427:	call   403060 <__assert_fail@plt>
  40842c:	lea    rdi,[rip+0x41ef]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  408433:	lea    rsi,[rip+0x3028]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40843a:	lea    rcx,[rip+0x3fd8]        # 40c419 <flatcc_builder_padding_base@@Base+0x1239>
  408441:	mov    edx,0x79c
  408446:	call   403060 <__assert_fail@plt>
  40844b:	lea    rdi,[rip+0x327e]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  408452:	lea    rsi,[rip+0x3009]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408459:	lea    rcx,[rip+0x3f74]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  408460:	mov    edx,0x786
  408465:	call   403060 <__assert_fail@plt>
  40846a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408470 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408470:	push   r15
  408472:	push   r14
  408474:	push   r12
  408476:	push   rbx
  408477:	push   rax
  408478:	mov    r14,rsi
  40847b:	mov    r15,rdi
  40847e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408485:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40848c:	sub    rax,rcx
  40848f:	test   rsi,rsi
  408492:	je     408497 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408494:	mov    QWORD PTR [r14],rax
  408497:	movzx  ecx,WORD PTR [r15+0xe8]
  40849f:	add    rax,rcx
  4084a2:	add    rax,0xffffffffffffffff
  4084a6:	mov    rbx,rcx
  4084a9:	neg    rbx
  4084ac:	and    rbx,rax
  4084af:	cmp    rcx,0x8
  4084b3:	mov    QWORD PTR [rsp],0x0
  4084bb:	mov    esi,0x8
  4084c0:	cmova  rsi,rcx
  4084c4:	mov    rdi,rsp
  4084c7:	mov    rdx,rbx
  4084ca:	call   4030d0 <posix_memalign@plt>
  4084cf:	mov    r12,QWORD PTR [rsp]
  4084d3:	test   eax,eax
  4084d5:	je     4084e6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4084d7:	test   r12,r12
  4084da:	je     4084e6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4084dc:	mov    rdi,r12
  4084df:	call   403030 <free@plt>
  4084e4:	jmp    40852e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4084e6:	test   r12,r12
  4084e9:	je     40852e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4084eb:	cmp    DWORD PTR [r15+0x128],0x0
  4084f3:	je     4084dc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  4084f5:	add    r15,0x130
  4084fc:	mov    rdi,r15
  4084ff:	mov    rsi,r12
  408502:	mov    rdx,rbx
  408505:	call   408bf0 <flatcc_emitter_copy_buffer@@Base>
  40850a:	test   rax,rax
  40850d:	jne    40853d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40850f:	lea    rdi,[rip+0x31ba]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  408516:	lea    rsi,[rip+0x2f45]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40851d:	lea    rcx,[rip+0x3eb0]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  408524:	mov    edx,0x786
  408529:	call   403060 <__assert_fail@plt>
  40852e:	test   r14,r14
  408531:	je     40853a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408533:	mov    QWORD PTR [r14],0x0
  40853a:	xor    r12d,r12d
  40853d:	mov    rax,r12
  408540:	add    rsp,0x8
  408544:	pop    rbx
  408545:	pop    r12
  408547:	pop    r14
  408549:	pop    r15
  40854b:	ret    
  40854c:	nop    DWORD PTR [rax+0x0]

0000000000408550 <flatcc_builder_aligned_alloc@@Base>:
  408550:	push   rax
  408551:	mov    rdx,rsi
  408554:	mov    QWORD PTR [rsp],0x0
  40855c:	cmp    rdi,0x8
  408560:	mov    esi,0x8
  408565:	cmova  rsi,rdi
  408569:	mov    rdi,rsp
  40856c:	call   4030d0 <posix_memalign@plt>
  408571:	mov    ecx,eax
  408573:	mov    rax,QWORD PTR [rsp]
  408577:	test   ecx,ecx
  408579:	je     408592 <flatcc_builder_aligned_alloc@@Base+0x42>
  40857b:	test   rax,rax
  40857e:	je     408592 <flatcc_builder_aligned_alloc@@Base+0x42>
  408580:	mov    rdi,rax
  408583:	call   403030 <free@plt>
  408588:	mov    QWORD PTR [rsp],0x0
  408590:	xor    eax,eax
  408592:	pop    rcx
  408593:	ret    
  408594:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40859e:	xchg   ax,ax

00000000004085a0 <flatcc_builder_aligned_free@@Base>:
  4085a0:	jmp    403030 <free@plt>
  4085a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085af:	nop

00000000004085b0 <flatcc_builder_get_emit_context@@Base>:
  4085b0:	mov    rax,QWORD PTR [rdi+0x38]
  4085b4:	ret    
  4085b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085bf:	nop

00000000004085c0 <flatcc_emitter_recycle_page@@Base>:
  4085c0:	mov    rcx,QWORD PTR [rdi]
  4085c3:	mov    eax,0xffffffff
  4085c8:	cmp    rcx,rsi
  4085cb:	je     408622 <flatcc_emitter_recycle_page@@Base+0x62>
  4085cd:	cmp    QWORD PTR [rdi+0x8],rsi
  4085d1:	je     408622 <flatcc_emitter_recycle_page@@Base+0x62>
  4085d3:	mov    rax,QWORD PTR [rsi+0xb80]
  4085da:	mov    rdx,QWORD PTR [rsi+0xb88]
  4085e1:	mov    QWORD PTR [rax+0xb88],rdx
  4085e8:	mov    rdx,QWORD PTR [rsi+0xb88]
  4085ef:	mov    QWORD PTR [rdx+0xb80],rax
  4085f6:	mov    rax,QWORD PTR [rcx+0xb88]
  4085fd:	mov    QWORD PTR [rsi+0xb88],rax
  408604:	mov    QWORD PTR [rsi+0xb80],rcx
  40860b:	mov    QWORD PTR [rax+0xb80],rsi
  408612:	mov    rax,QWORD PTR [rsi+0xb80]
  408619:	mov    QWORD PTR [rax+0xb88],rsi
  408620:	xor    eax,eax
  408622:	ret    
  408623:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40862d:	nop    DWORD PTR [rax]

0000000000408630 <flatcc_emitter_reset@@Base>:
  408630:	push   r14
  408632:	push   rbx
  408633:	push   rax
  408634:	mov    rax,QWORD PTR [rdi]
  408637:	test   rax,rax
  40863a:	je     40871b <flatcc_emitter_reset@@Base+0xeb>
  408640:	mov    rbx,rdi
  408643:	mov    QWORD PTR [rdi+0x8],rax
  408647:	lea    rcx,[rax+0x5c0]
  40864e:	mov    QWORD PTR [rdi+0x10],rcx
  408652:	mov    QWORD PTR [rdi+0x20],rcx
  408656:	mov    QWORD PTR [rdi+0x18],0x5c0
  40865e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408666:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408670:	mov    rcx,QWORD PTR [rdi+0x30]
  408674:	mov    rdx,QWORD PTR [rdi+0x40]
  408678:	test   rdx,rdx
  40867b:	jne    408684 <flatcc_emitter_reset@@Base+0x54>
  40867d:	mov    QWORD PTR [rbx+0x40],rcx
  408681:	mov    rdx,rcx
  408684:	lea    rdx,[rdx+rdx*2]
  408688:	shr    rdx,0x2
  40868c:	shr    rcx,0x2
  408690:	add    rcx,rdx
  408693:	mov    QWORD PTR [rbx+0x40],rcx
  408697:	mov    QWORD PTR [rbx+0x30],0x0
  40869f:	add    rcx,rcx
  4086a2:	cmp    rcx,QWORD PTR [rbx+0x38]
  4086a6:	jae    40871b <flatcc_emitter_reset@@Base+0xeb>
  4086a8:	mov    rdi,QWORD PTR [rax+0xb80]
  4086af:	cmp    rdi,rax
  4086b2:	je     40871b <flatcc_emitter_reset@@Base+0xeb>
  4086b4:	lea    rcx,[rax+0xb80]
  4086bb:	mov    r14,0xfffffffffffff480
  4086c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086cc:	nop    DWORD PTR [rax+0x0]
  4086d0:	mov    rdx,QWORD PTR [rdi+0xb80]
  4086d7:	mov    QWORD PTR [rcx],rdx
  4086da:	mov    rcx,QWORD PTR [rdi+0xb80]
  4086e1:	mov    QWORD PTR [rcx+0xb88],rax
  4086e8:	call   403030 <free@plt>
  4086ed:	mov    rax,QWORD PTR [rbx+0x38]
  4086f1:	add    rax,r14
  4086f4:	mov    QWORD PTR [rbx+0x38],rax
  4086f8:	mov    rcx,QWORD PTR [rbx+0x40]
  4086fc:	add    rcx,rcx
  4086ff:	cmp    rcx,rax
  408702:	jae    40871b <flatcc_emitter_reset@@Base+0xeb>
  408704:	mov    rax,QWORD PTR [rbx+0x8]
  408708:	lea    rcx,[rax+0xb80]
  40870f:	mov    rdi,QWORD PTR [rax+0xb80]
  408716:	cmp    rdi,QWORD PTR [rbx]
  408719:	jne    4086d0 <flatcc_emitter_reset@@Base+0xa0>
  40871b:	add    rsp,0x8
  40871f:	pop    rbx
  408720:	pop    r14
  408722:	ret    
  408723:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40872d:	nop    DWORD PTR [rax]

0000000000408730 <flatcc_emitter_clear@@Base>:
  408730:	push   r14
  408732:	push   rbx
  408733:	push   rax
  408734:	mov    rbx,QWORD PTR [rdi]
  408737:	test   rbx,rbx
  40873a:	je     40879c <flatcc_emitter_clear@@Base+0x6c>
  40873c:	mov    r14,rdi
  40873f:	mov    rax,QWORD PTR [rbx+0xb88]
  408746:	mov    QWORD PTR [rax+0xb80],0x0
  408751:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40875b:	nop    DWORD PTR [rax+rax*1+0x0]
  408760:	mov    rax,QWORD PTR [rbx+0xb80]
  408767:	test   rax,rax
  40876a:	je     40877d <flatcc_emitter_clear@@Base+0x4d>
  40876c:	mov    rbx,rax
  40876f:	mov    rdi,QWORD PTR [rax+0xb88]
  408776:	call   403030 <free@plt>
  40877b:	jmp    408760 <flatcc_emitter_clear@@Base+0x30>
  40877d:	mov    rdi,rbx
  408780:	call   403030 <free@plt>
  408785:	vxorps xmm0,xmm0,xmm0
  408789:	vmovups YMMWORD PTR [r14+0x20],ymm0
  40878f:	vmovups YMMWORD PTR [r14],ymm0
  408794:	mov    QWORD PTR [r14+0x40],0x0
  40879c:	add    rsp,0x8
  4087a0:	pop    rbx
  4087a1:	pop    r14
  4087a3:	vzeroupper 
  4087a6:	ret    
  4087a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004087b0 <flatcc_emitter@@Base>:
  4087b0:	push   rbp
  4087b1:	push   r15
  4087b3:	push   r14
  4087b5:	push   r13
  4087b7:	push   r12
  4087b9:	push   rbx
  4087ba:	push   rax
  4087bb:	mov    r14d,edx
  4087be:	mov    r12,rsi
  4087c1:	mov    rbp,rdi
  4087c4:	add    QWORD PTR [rdi+0x30],r8
  4087c8:	test   ecx,ecx
  4087ca:	js     408945 <flatcc_emitter@@Base+0x195>
  4087d0:	mov    rdx,QWORD PTR [rbp+0x28]
  4087d4:	cmp    rdx,r8
  4087d7:	jae    408af8 <flatcc_emitter@@Base+0x348>
  4087dd:	xor    eax,eax
  4087df:	test   r14d,r14d
  4087e2:	je     408bd7 <flatcc_emitter@@Base+0x427>
  4087e8:	mov    r15,QWORD PTR [r12+0x8]
  4087ed:	test   r15,r15
  4087f0:	je     408930 <flatcc_emitter@@Base+0x180>
  4087f6:	mov    r13,QWORD PTR [r12]
  4087fa:	jmp    408829 <flatcc_emitter@@Base+0x79>
  4087fc:	mov    rbx,r15
  4087ff:	mov    rdi,QWORD PTR [rbp+0x20]
  408803:	mov    rsi,r13
  408806:	mov    rdx,rbx
  408809:	call   403090 <memcpy@plt>
  40880e:	add    QWORD PTR [rbp+0x20],rbx
  408812:	add    r13,rbx
  408815:	mov    rdx,QWORD PTR [rbp+0x28]
  408819:	sub    rdx,rbx
  40881c:	mov    QWORD PTR [rbp+0x28],rdx
  408820:	sub    r15,rbx
  408823:	je     408930 <flatcc_emitter@@Base+0x180>
  408829:	mov    rbx,r15
  40882c:	cmp    r15,rdx
  40882f:	jbe    4087ff <flatcc_emitter@@Base+0x4f>
  408831:	mov    rbx,rdx
  408834:	test   rbx,rbx
  408837:	je     4088a1 <flatcc_emitter@@Base+0xf1>
  408839:	jmp    4087ff <flatcc_emitter@@Base+0x4f>
  40883b:	nop    DWORD PTR [rax+rax*1+0x0]
  408840:	mov    QWORD PTR [rax+0xb88],rbx
  408847:	mov    rcx,QWORD PTR [rbp+0x0]
  40884b:	mov    QWORD PTR [rax+0xb80],rcx
  408852:	mov    QWORD PTR [rcx+0xb88],rax
  408859:	mov    QWORD PTR [rbx+0xb80],rax
  408860:	mov    QWORD PTR [rbp+0x8],rax
  408864:	mov    QWORD PTR [rbp+0x20],rax
  408868:	mov    QWORD PTR [rbp+0x28],0xb80
  408870:	mov    rcx,QWORD PTR [rax+0xb88]
  408877:	mov    ecx,DWORD PTR [rcx+0xb90]
  40887d:	mov    edx,0xb80
  408882:	add    ecx,edx
  408884:	mov    DWORD PTR [rax+0xb90],ecx
  40888a:	mov    ebx,0xb80
  40888f:	cmp    r15,rbx
  408892:	jbe    4087fc <flatcc_emitter@@Base+0x4c>
  408898:	test   rbx,rbx
  40889b:	jne    4087ff <flatcc_emitter@@Base+0x4f>
  4088a1:	mov    rbx,QWORD PTR [rbp+0x8]
  4088a5:	test   rbx,rbx
  4088a8:	je     4088b7 <flatcc_emitter@@Base+0x107>
  4088aa:	mov    rax,QWORD PTR [rbx+0xb80]
  4088b1:	cmp    rax,QWORD PTR [rbp+0x0]
  4088b5:	jne    408860 <flatcc_emitter@@Base+0xb0>
  4088b7:	mov    edi,0xb98
  4088bc:	call   4030a0 <malloc@plt>
  4088c1:	test   rax,rax
  4088c4:	je     408b0a <flatcc_emitter@@Base+0x35a>
  4088ca:	add    QWORD PTR [rbp+0x38],0xb80
  4088d2:	test   rbx,rbx
  4088d5:	jne    408840 <flatcc_emitter@@Base+0x90>
  4088db:	mov    QWORD PTR [rbp+0x0],rax
  4088df:	mov    QWORD PTR [rbp+0x8],rax
  4088e3:	mov    QWORD PTR [rax+0xb80],rax
  4088ea:	mov    QWORD PTR [rax+0xb88],rax
  4088f1:	mov    rcx,rax
  4088f4:	add    rcx,0x5c0
  4088fb:	mov    QWORD PTR [rbp+0x10],rcx
  4088ff:	mov    QWORD PTR [rbp+0x20],rcx
  408903:	mov    QWORD PTR [rbp+0x18],0x5c0
  40890b:	mov    QWORD PTR [rbp+0x28],0x5c0
  408913:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40891d:	mov    ebx,0x5c0
  408922:	cmp    r15,rbx
  408925:	ja     408898 <flatcc_emitter@@Base+0xe8>
  40892b:	jmp    4087fc <flatcc_emitter@@Base+0x4c>
  408930:	dec    r14d
  408933:	add    r12,0x10
  408937:	test   r14d,r14d
  40893a:	jne    4087e8 <flatcc_emitter@@Base+0x38>
  408940:	jmp    408bd5 <flatcc_emitter@@Base+0x425>
  408945:	lea    rsi,[rbp+0x18]
  408949:	mov    rdx,QWORD PTR [rbp+0x18]
  40894d:	cmp    rdx,r8
  408950:	jae    408b14 <flatcc_emitter@@Base+0x364>
  408956:	xor    eax,eax
  408958:	test   r14d,r14d
  40895b:	je     408bd7 <flatcc_emitter@@Base+0x427>
  408961:	mov    QWORD PTR [rsp],rsi
  408965:	movsxd rax,r14d
  408968:	shl    rax,0x4
  40896c:	add    r12,rax
  40896f:	mov    edx,0xfffff480
  408974:	mov    r15,QWORD PTR [r12-0x8]
  408979:	add    r12,0xfffffffffffffff0
  40897d:	test   r15,r15
  408980:	je     408aea <flatcc_emitter@@Base+0x33a>
  408986:	mov    r13,QWORD PTR [r12]
  40898a:	add    r13,r15
  40898d:	jmp    4089c1 <flatcc_emitter@@Base+0x211>
  40898f:	nop
  408990:	mov    rbx,r15
  408993:	mov    rdi,QWORD PTR [rbp+0x10]
  408997:	sub    rdi,rbx
  40899a:	mov    QWORD PTR [rbp+0x10],rdi
  40899e:	sub    rax,rbx
  4089a1:	mov    QWORD PTR [rbp+0x18],rax
  4089a5:	sub    r13,rbx
  4089a8:	mov    rsi,r13
  4089ab:	mov    rdx,rbx
  4089ae:	call   403090 <memcpy@plt>
  4089b3:	mov    edx,0xfffff480
  4089b8:	sub    r15,rbx
  4089bb:	je     408aea <flatcc_emitter@@Base+0x33a>
  4089c1:	mov    rax,QWORD PTR [rsp]
  4089c5:	mov    rax,QWORD PTR [rax]
  4089c8:	cmp    r15,rax
  4089cb:	ja     408a18 <flatcc_emitter@@Base+0x268>
  4089cd:	jmp    408990 <flatcc_emitter@@Base+0x1e0>
  4089cf:	nop
  4089d0:	mov    ecx,DWORD PTR [rbx+0xb90]
  4089d6:	add    ecx,edx
  4089d8:	mov    DWORD PTR [rax+0xb90],ecx
  4089de:	mov    QWORD PTR [rbp+0x0],rax
  4089e2:	lea    rcx,[rax+0xb80]
  4089e9:	mov    QWORD PTR [rbp+0x10],rcx
  4089ed:	mov    QWORD PTR [rbp+0x18],0xb80
  4089f5:	mov    rcx,QWORD PTR [rax+0xb80]
  4089fc:	mov    ecx,DWORD PTR [rcx+0xb90]
  408a02:	add    ecx,edx
  408a04:	mov    DWORD PTR [rax+0xb90],ecx
  408a0a:	mov    eax,0xb80
  408a0f:	cmp    r15,rax
  408a12:	jbe    408990 <flatcc_emitter@@Base+0x1e0>
  408a18:	mov    rbx,rax
  408a1b:	test   rax,rax
  408a1e:	jne    408993 <flatcc_emitter@@Base+0x1e3>
  408a24:	mov    rbx,QWORD PTR [rbp+0x0]
  408a28:	test   rbx,rbx
  408a2b:	je     408a3a <flatcc_emitter@@Base+0x28a>
  408a2d:	mov    rax,QWORD PTR [rbx+0xb88]
  408a34:	cmp    rax,QWORD PTR [rbp+0x8]
  408a38:	jne    4089d0 <flatcc_emitter@@Base+0x220>
  408a3a:	mov    edi,0xb98
  408a3f:	call   4030a0 <malloc@plt>
  408a44:	test   rax,rax
  408a47:	je     408b0a <flatcc_emitter@@Base+0x35a>
  408a4d:	add    QWORD PTR [rbp+0x38],0xb80
  408a55:	test   rbx,rbx
  408a58:	je     408a90 <flatcc_emitter@@Base+0x2e0>
  408a5a:	mov    rcx,QWORD PTR [rbp+0x8]
  408a5e:	mov    QWORD PTR [rax+0xb88],rcx
  408a65:	mov    QWORD PTR [rax+0xb80],rbx
  408a6c:	mov    QWORD PTR [rbx+0xb88],rax
  408a73:	mov    QWORD PTR [rcx+0xb80],rax
  408a7a:	mov    QWORD PTR [rbp+0x0],rax
  408a7e:	mov    edx,0xfffff480
  408a83:	jmp    4089e2 <flatcc_emitter@@Base+0x232>
  408a88:	nop    DWORD PTR [rax+rax*1+0x0]
  408a90:	mov    QWORD PTR [rbp+0x0],rax
  408a94:	mov    QWORD PTR [rbp+0x8],rax
  408a98:	mov    QWORD PTR [rax+0xb80],rax
  408a9f:	mov    QWORD PTR [rax+0xb88],rax
  408aa6:	mov    rcx,rax
  408aa9:	add    rcx,0x5c0
  408ab0:	mov    QWORD PTR [rbp+0x10],rcx
  408ab4:	mov    QWORD PTR [rbp+0x20],rcx
  408ab8:	mov    QWORD PTR [rbp+0x18],0x5c0
  408ac0:	mov    QWORD PTR [rbp+0x28],0x5c0
  408ac8:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408ad2:	mov    eax,0x5c0
  408ad7:	mov    edx,0xfffff480
  408adc:	cmp    r15,rax
  408adf:	ja     408a18 <flatcc_emitter@@Base+0x268>
  408ae5:	jmp    408990 <flatcc_emitter@@Base+0x1e0>
  408aea:	dec    r14d
  408aed:	jne    408974 <flatcc_emitter@@Base+0x1c4>
  408af3:	jmp    408bd5 <flatcc_emitter@@Base+0x425>
  408af8:	lea    rsi,[rbp+0x28]
  408afc:	mov    rbx,QWORD PTR [rbp+0x20]
  408b00:	lea    rcx,[rbx+r8*1]
  408b04:	mov    QWORD PTR [rbp+0x20],rcx
  408b08:	jmp    408b1f <flatcc_emitter@@Base+0x36f>
  408b0a:	mov    eax,0xffffffff
  408b0f:	jmp    408bd7 <flatcc_emitter@@Base+0x427>
  408b14:	mov    rbx,QWORD PTR [rbp+0x10]
  408b18:	sub    rbx,r8
  408b1b:	mov    QWORD PTR [rbp+0x10],rbx
  408b1f:	sub    rdx,r8
  408b22:	mov    QWORD PTR [rsi],rdx
  408b25:	xor    eax,eax
  408b27:	test   r14d,r14d
  408b2a:	je     408bd7 <flatcc_emitter@@Base+0x427>
  408b30:	lea    r15d,[r14-0x1]
  408b34:	mov    r13d,r14d
  408b37:	and    r13d,0x3
  408b3b:	je     408b64 <flatcc_emitter@@Base+0x3b4>
  408b3d:	xor    ebp,ebp
  408b3f:	nop
  408b40:	mov    rsi,QWORD PTR [r12]
  408b44:	mov    rdx,QWORD PTR [r12+0x8]
  408b49:	mov    rdi,rbx
  408b4c:	call   403090 <memcpy@plt>
  408b51:	add    rbx,QWORD PTR [r12+0x8]
  408b56:	add    r12,0x10
  408b5a:	inc    ebp
  408b5c:	cmp    r13d,ebp
  408b5f:	jne    408b40 <flatcc_emitter@@Base+0x390>
  408b61:	sub    r14d,ebp
  408b64:	cmp    r15d,0x3
  408b68:	jb     408bd5 <flatcc_emitter@@Base+0x425>
  408b6a:	nop    WORD PTR [rax+rax*1+0x0]
  408b70:	mov    rsi,QWORD PTR [r12]
  408b74:	mov    rdx,QWORD PTR [r12+0x8]
  408b79:	mov    rdi,rbx
  408b7c:	call   403090 <memcpy@plt>
  408b81:	add    rbx,QWORD PTR [r12+0x8]
  408b86:	mov    rsi,QWORD PTR [r12+0x10]
  408b8b:	mov    rdx,QWORD PTR [r12+0x18]
  408b90:	mov    rdi,rbx
  408b93:	call   403090 <memcpy@plt>
  408b98:	add    rbx,QWORD PTR [r12+0x18]
  408b9d:	mov    rsi,QWORD PTR [r12+0x20]
  408ba2:	mov    rdx,QWORD PTR [r12+0x28]
  408ba7:	mov    rdi,rbx
  408baa:	call   403090 <memcpy@plt>
  408baf:	add    rbx,QWORD PTR [r12+0x28]
  408bb4:	mov    rsi,QWORD PTR [r12+0x30]
  408bb9:	mov    rdx,QWORD PTR [r12+0x38]
  408bbe:	mov    rdi,rbx
  408bc1:	call   403090 <memcpy@plt>
  408bc6:	add    rbx,QWORD PTR [r12+0x38]
  408bcb:	add    r12,0x40
  408bcf:	add    r14d,0xfffffffc
  408bd3:	jne    408b70 <flatcc_emitter@@Base+0x3c0>
  408bd5:	xor    eax,eax
  408bd7:	add    rsp,0x8
  408bdb:	pop    rbx
  408bdc:	pop    r12
  408bde:	pop    r13
  408be0:	pop    r14
  408be2:	pop    r15
  408be4:	pop    rbp
  408be5:	ret    
  408be6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408bf0 <flatcc_emitter_copy_buffer@@Base>:
  408bf0:	push   r15
  408bf2:	push   r14
  408bf4:	push   r13
  408bf6:	push   r12
  408bf8:	push   rbx
  408bf9:	mov    rax,rdx
  408bfc:	mov    rdx,QWORD PTR [rdi+0x30]
  408c00:	cmp    rdx,rax
  408c03:	ja     408c9b <flatcc_emitter_copy_buffer@@Base+0xab>
  408c09:	mov    r14,rdi
  408c0c:	mov    rax,QWORD PTR [rdi]
  408c0f:	test   rax,rax
  408c12:	je     408c9b <flatcc_emitter_copy_buffer@@Base+0xab>
  408c18:	mov    r12,rsi
  408c1b:	cmp    rax,QWORD PTR [r14+0x8]
  408c1f:	je     408cab <flatcc_emitter_copy_buffer@@Base+0xbb>
  408c25:	mov    r15d,0xb80
  408c2b:	mov    r13d,0xb80
  408c31:	sub    r13,QWORD PTR [r14+0x18]
  408c35:	mov    rsi,QWORD PTR [r14+0x10]
  408c39:	mov    rdi,r12
  408c3c:	mov    rdx,r13
  408c3f:	call   403090 <memcpy@plt>
  408c44:	add    r13,r12
  408c47:	mov    rax,QWORD PTR [r14]
  408c4a:	mov    rbx,QWORD PTR [rax+0xb80]
  408c51:	cmp    rbx,QWORD PTR [r14+0x8]
  408c55:	je     408c84 <flatcc_emitter_copy_buffer@@Base+0x94>
  408c57:	nop    WORD PTR [rax+rax*1+0x0]
  408c60:	mov    edx,0xb80
  408c65:	mov    rdi,r13
  408c68:	mov    rsi,rbx
  408c6b:	call   403090 <memcpy@plt>
  408c70:	add    r13,0xb80
  408c77:	mov    rbx,QWORD PTR [rbx+0xb80]
  408c7e:	cmp    rbx,QWORD PTR [r14+0x8]
  408c82:	jne    408c60 <flatcc_emitter_copy_buffer@@Base+0x70>
  408c84:	sub    r15,QWORD PTR [r14+0x28]
  408c88:	mov    rdi,r13
  408c8b:	mov    rsi,rbx
  408c8e:	mov    rdx,r15
  408c91:	call   403090 <memcpy@plt>
  408c96:	mov    r12,r13
  408c99:	jmp    408c9e <flatcc_emitter_copy_buffer@@Base+0xae>
  408c9b:	xor    r12d,r12d
  408c9e:	mov    rax,r12
  408ca1:	pop    rbx
  408ca2:	pop    r12
  408ca4:	pop    r13
  408ca6:	pop    r14
  408ca8:	pop    r15
  408caa:	ret    
  408cab:	mov    rsi,QWORD PTR [r14+0x10]
  408caf:	mov    rdi,r12
  408cb2:	call   403090 <memcpy@plt>
  408cb7:	jmp    408c9e <flatcc_emitter_copy_buffer@@Base+0xae>
  408cb9:	nop    DWORD PTR [rax+0x0]

0000000000408cc0 <flatcc_verify_error_string@@Base>:
  408cc0:	cmp    edi,0x24
  408cc3:	ja     408cd4 <flatcc_verify_error_string@@Base+0x14>
  408cc5:	movsxd rax,edi
  408cc8:	lea    rcx,[rip+0x7019]        # 40fce8 <flatcc_builder_padding_base@@Base+0x4b08>
  408ccf:	mov    rax,QWORD PTR [rcx+rax*8]
  408cd3:	ret    
  408cd4:	lea    rax,[rip+0x3e05]        # 40cae0 <flatcc_builder_padding_base@@Base+0x1900>
  408cdb:	ret    
  408cdc:	nop    DWORD PTR [rax+0x0]

0000000000408ce0 <flatcc_verify_field@@Base>:
  408ce0:	lea    esi,[rsi+rsi*1]
  408ce3:	add    esi,0x4
  408ce6:	xor    eax,eax
  408ce8:	cmp    si,WORD PTR [rdi+0x1e]
  408cec:	jae    408d31 <flatcc_verify_field@@Base+0x51>
  408cee:	mov    r8,QWORD PTR [rdi+0x10]
  408cf2:	movzx  esi,si
  408cf5:	movzx  esi,WORD PTR [r8+rsi*1]
  408cfa:	test   esi,esi
  408cfc:	je     408d31 <flatcc_verify_field@@Base+0x51>
  408cfe:	add    edx,esi
  408d00:	movzx  r8d,WORD PTR [rdi+0x1c]
  408d05:	mov    eax,0xd
  408d0a:	cmp    edx,r8d
  408d0d:	ja     408d31 <flatcc_verify_field@@Base+0x51>
  408d0f:	add    esi,DWORD PTR [rdi]
  408d11:	mov    edx,DWORD PTR [rdi+0x18]
  408d14:	add    edx,esi
  408d16:	movzx  ecx,cx
  408d19:	dec    ecx
  408d1b:	mov    eax,0x0
  408d20:	test   edx,ecx
  408d22:	je     408d31 <flatcc_verify_field@@Base+0x51>
  408d24:	add    esi,DWORD PTR [rdi+0x18]
  408d27:	and    esi,ecx
  408d29:	mov    eax,0xc
  408d2e:	cmove  eax,esi
  408d31:	ret    
  408d32:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408d3c:	nop    DWORD PTR [rax+0x0]

0000000000408d40 <flatcc_verify_string_field@@Base>:
  408d40:	lea    eax,[rsi+rsi*1]
  408d43:	add    eax,0x4
  408d46:	cmp    ax,WORD PTR [rdi+0x1e]
  408d4a:	jae    408d7a <flatcc_verify_string_field@@Base+0x3a>
  408d4c:	mov    rcx,QWORD PTR [rdi+0x10]
  408d50:	movzx  eax,ax
  408d53:	movzx  esi,WORD PTR [rcx+rax*1]
  408d57:	test   esi,esi
  408d59:	je     408d7a <flatcc_verify_string_field@@Base+0x3a>
  408d5b:	lea    ecx,[rsi+0x4]
  408d5e:	movzx  edx,WORD PTR [rdi+0x1c]
  408d62:	mov    eax,0xd
  408d67:	cmp    ecx,edx
  408d69:	ja     408d79 <flatcc_verify_string_field@@Base+0x39>
  408d6b:	add    esi,DWORD PTR [rdi+0x18]
  408d6e:	mov    eax,0xc
  408d73:	test   sil,0x3
  408d77:	je     408d85 <flatcc_verify_string_field@@Base+0x45>
  408d79:	ret    
  408d7a:	xor    eax,eax
  408d7c:	test   edx,edx
  408d7e:	setne  al
  408d81:	shl    eax,0x2
  408d84:	ret    
  408d85:	test   esi,esi
  408d87:	je     408ddf <flatcc_verify_string_field@@Base+0x9f>
  408d89:	mov    rcx,QWORD PTR [rdi]
  408d8c:	mov    eax,esi
  408d8e:	mov    edx,DWORD PTR [rcx+rax*1]
  408d91:	add    edx,esi
  408d93:	mov    eax,0x11
  408d98:	cmp    edx,esi
  408d9a:	jbe    408d79 <flatcc_verify_string_field@@Base+0x39>
  408d9c:	mov    r8d,DWORD PTR [rdi+0x8]
  408da0:	mov    edi,edx
  408da2:	lea    rsi,[rdi+0x4]
  408da6:	cmp    rsi,r8
  408da9:	ja     408d79 <flatcc_verify_string_field@@Base+0x39>
  408dab:	mov    esi,edi
  408dad:	and    esi,0x3
  408db0:	test   rsi,rsi
  408db3:	jne    408d79 <flatcc_verify_string_field@@Base+0x39>
  408db5:	mov    edi,DWORD PTR [rcx+rdi*1]
  408db8:	add    edx,0x4
  408dbb:	sub    r8d,edx
  408dbe:	lea    esi,[rdi+0x1]
  408dc1:	mov    eax,0x8
  408dc6:	cmp    r8d,esi
  408dc9:	jb     408d79 <flatcc_verify_string_field@@Base+0x39>
  408dcb:	mov    eax,edx
  408dcd:	add    rcx,rax
  408dd0:	xor    edx,edx
  408dd2:	cmp    BYTE PTR [rdi+rcx*1],0x0
  408dd6:	mov    eax,0x7
  408ddb:	cmove  eax,edx
  408dde:	ret    
  408ddf:	xor    eax,eax
  408de1:	ret    
  408de2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408dec:	nop    DWORD PTR [rax+0x0]

0000000000408df0 <flatcc_verify_vector_field@@Base>:
  408df0:	push   rbx
  408df1:	lea    eax,[rsi+rsi*1]
  408df4:	add    eax,0x4
  408df7:	cmp    ax,WORD PTR [rdi+0x1e]
  408dfb:	jae    408e2e <flatcc_verify_vector_field@@Base+0x3e>
  408dfd:	mov    rsi,QWORD PTR [rdi+0x10]
  408e01:	movzx  eax,ax
  408e04:	movzx  esi,WORD PTR [rsi+rax*1]
  408e08:	test   esi,esi
  408e0a:	je     408e2e <flatcc_verify_vector_field@@Base+0x3e>
  408e0c:	lea    r10d,[rsi+0x4]
  408e10:	movzx  edx,WORD PTR [rdi+0x1c]
  408e14:	mov    eax,0xd
  408e19:	cmp    r10d,edx
  408e1c:	ja     408e2c <flatcc_verify_vector_field@@Base+0x3c>
  408e1e:	add    esi,DWORD PTR [rdi+0x18]
  408e21:	mov    eax,0xc
  408e26:	test   sil,0x3
  408e2a:	je     408e3a <flatcc_verify_vector_field@@Base+0x4a>
  408e2c:	pop    rbx
  408e2d:	ret    
  408e2e:	xor    eax,eax
  408e30:	test   edx,edx
  408e32:	setne  al
  408e35:	shl    eax,0x2
  408e38:	pop    rbx
  408e39:	ret    
  408e3a:	test   esi,esi
  408e3c:	je     408eb2 <flatcc_verify_vector_field@@Base+0xc2>
  408e3e:	mov    r10,QWORD PTR [rdi]
  408e41:	mov    eax,esi
  408e43:	mov    r11d,DWORD PTR [r10+rax*1]
  408e47:	add    r11d,esi
  408e4a:	cmp    r8w,0x4
  408e4f:	mov    edx,0x4
  408e54:	cmova  edx,r8d
  408e58:	mov    eax,0x10
  408e5d:	cmp    r11d,esi
  408e60:	jbe    408e2c <flatcc_verify_vector_field@@Base+0x3c>
  408e62:	mov    r8d,DWORD PTR [rdi+0x8]
  408e66:	mov    edi,r11d
  408e69:	lea    rsi,[rdi+0x4]
  408e6d:	cmp    rsi,r8
  408e70:	ja     408e2c <flatcc_verify_vector_field@@Base+0x3c>
  408e72:	movzx  edx,dx
  408e75:	movabs rbx,0x1ffffffff
  408e7f:	add    rbx,rdx
  408e82:	or     rbx,0x3
  408e86:	test   rsi,rbx
  408e89:	jne    408e2c <flatcc_verify_vector_field@@Base+0x3c>
  408e8b:	mov    edx,DWORD PTR [r10+rdi*1]
  408e8f:	mov    eax,0x19
  408e94:	cmp    edx,r9d
  408e97:	ja     408e2c <flatcc_verify_vector_field@@Base+0x3c>
  408e99:	sub    r8d,r11d
  408e9c:	add    r8d,0xfffffffc
  408ea0:	imul   edx,ecx
  408ea3:	xor    ecx,ecx
  408ea5:	cmp    r8d,edx
  408ea8:	mov    eax,0x1a
  408ead:	cmovae eax,ecx
  408eb0:	pop    rbx
  408eb1:	ret    
  408eb2:	xor    eax,eax
  408eb4:	pop    rbx
  408eb5:	ret    
  408eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408ec0 <flatcc_verify_string_vector_field@@Base>:
  408ec0:	push   r14
  408ec2:	push   rbx
  408ec3:	lea    eax,[rsi+rsi*1]
  408ec6:	add    eax,0x4
  408ec9:	cmp    ax,WORD PTR [rdi+0x1e]
  408ecd:	jae    408ff9 <flatcc_verify_string_vector_field@@Base+0x139>
  408ed3:	mov    rcx,QWORD PTR [rdi+0x10]
  408ed7:	movzx  eax,ax
  408eda:	movzx  esi,WORD PTR [rcx+rax*1]
  408ede:	test   esi,esi
  408ee0:	je     408ff9 <flatcc_verify_string_vector_field@@Base+0x139>
  408ee6:	lea    ecx,[rsi+0x4]
  408ee9:	movzx  edx,WORD PTR [rdi+0x1c]
  408eed:	mov    eax,0xd
  408ef2:	cmp    ecx,edx
  408ef4:	ja     409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408efa:	mov    edx,DWORD PTR [rdi+0x18]
  408efd:	lea    ebx,[rdx+rsi*1]
  408f00:	mov    eax,0xc
  408f05:	test   bl,0x3
  408f08:	jne    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f0e:	test   ebx,ebx
  408f10:	je     408ff5 <flatcc_verify_string_vector_field@@Base+0x135>
  408f16:	mov    r10,QWORD PTR [rdi]
  408f19:	mov    eax,ebx
  408f1b:	mov    r14d,DWORD PTR [r10+rax*1]
  408f1f:	lea    ecx,[r14+rbx*1]
  408f23:	mov    eax,0x10
  408f28:	cmp    ecx,ebx
  408f2a:	jbe    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f30:	mov    r8d,DWORD PTR [rdi+0x8]
  408f34:	mov    edi,ecx
  408f36:	lea    rbx,[rdi+0x4]
  408f3a:	cmp    rbx,r8
  408f3d:	ja     409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f43:	and    ebx,0x3
  408f46:	test   rbx,rbx
  408f49:	jne    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f4f:	mov    r9d,DWORD PTR [r10+rdi*1]
  408f53:	mov    eax,0x19
  408f58:	cmp    r9d,0x3fffffff
  408f5f:	ja     409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f65:	mov    edi,r8d
  408f68:	sub    edi,ecx
  408f6a:	add    edi,0xfffffffc
  408f6d:	lea    ecx,[r9*4+0x0]
  408f75:	mov    eax,0x1a
  408f7a:	cmp    edi,ecx
  408f7c:	jb     409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408f82:	test   r9d,r9d
  408f85:	je     408ff5 <flatcc_verify_string_vector_field@@Base+0x135>
  408f87:	lea    eax,[r14+rdx*1]
  408f8b:	lea    edi,[rsi+rax*1]
  408f8e:	add    edi,0x4
  408f91:	mov    r11d,r8d
  408f94:	sub    r11d,r14d
  408f97:	sub    r11d,edx
  408f9a:	sub    r11d,esi
  408f9d:	add    r11d,0xfffffff8
  408fa1:	mov    eax,edi
  408fa3:	mov    ecx,DWORD PTR [r10+rax*1]
  408fa7:	lea    edx,[rdi+rcx*1]
  408faa:	mov    eax,0x11
  408faf:	cmp    edx,edi
  408fb1:	jbe    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408fb3:	mov    edx,edx
  408fb5:	lea    rsi,[rdx+0x4]
  408fb9:	cmp    rsi,r8
  408fbc:	ja     409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408fbe:	mov    esi,edx
  408fc0:	and    esi,0x3
  408fc3:	test   rsi,rsi
  408fc6:	jne    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408fc8:	mov    eax,DWORD PTR [r10+rdx*1]
  408fcc:	mov    edx,r11d
  408fcf:	sub    edx,ecx
  408fd1:	lea    esi,[rax+0x1]
  408fd4:	cmp    edx,esi
  408fd6:	jb     409007 <flatcc_verify_string_vector_field@@Base+0x147>
  408fd8:	lea    ecx,[rdi+rcx*1]
  408fdb:	add    ecx,0x4
  408fde:	mov    ecx,ecx
  408fe0:	add    rcx,r10
  408fe3:	cmp    BYTE PTR [rax+rcx*1],0x0
  408fe7:	jne    40900e <flatcc_verify_string_vector_field@@Base+0x14e>
  408fe9:	add    edi,0x4
  408fec:	add    r11d,0xfffffffc
  408ff0:	dec    r9d
  408ff3:	jne    408fa1 <flatcc_verify_string_vector_field@@Base+0xe1>
  408ff5:	xor    eax,eax
  408ff7:	jmp    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  408ff9:	xor    eax,eax
  408ffb:	test   edx,edx
  408ffd:	setne  al
  409000:	shl    eax,0x2
  409003:	pop    rbx
  409004:	pop    r14
  409006:	ret    
  409007:	mov    eax,0x8
  40900c:	jmp    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  40900e:	mov    eax,0x7
  409013:	jmp    409003 <flatcc_verify_string_vector_field@@Base+0x143>
  409015:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40901f:	nop

0000000000409020 <flatcc_verify_table_field@@Base>:
  409020:	sub    rsp,0x28
  409024:	lea    eax,[rsi+rsi*1]
  409027:	add    eax,0x4
  40902a:	cmp    ax,WORD PTR [rdi+0x1e]
  40902e:	jae    409064 <flatcc_verify_table_field@@Base+0x44>
  409030:	mov    rsi,QWORD PTR [rdi+0x10]
  409034:	movzx  eax,ax
  409037:	movzx  esi,WORD PTR [rsi+rax*1]
  40903b:	test   esi,esi
  40903d:	je     409064 <flatcc_verify_table_field@@Base+0x44>
  40903f:	lea    r8d,[rsi+0x4]
  409043:	movzx  edx,WORD PTR [rdi+0x1c]
  409047:	mov    eax,0xd
  40904c:	cmp    r8d,edx
  40904f:	ja     40905f <flatcc_verify_table_field@@Base+0x3f>
  409051:	add    esi,DWORD PTR [rdi+0x18]
  409054:	mov    eax,0xc
  409059:	test   sil,0x3
  40905d:	je     409073 <flatcc_verify_table_field@@Base+0x53>
  40905f:	add    rsp,0x28
  409063:	ret    
  409064:	xor    eax,eax
  409066:	test   edx,edx
  409068:	setne  al
  40906b:	shl    eax,0x2
  40906e:	add    rsp,0x28
  409072:	ret    
  409073:	test   esi,esi
  409075:	je     40914f <flatcc_verify_table_field@@Base+0x12f>
  40907b:	mov    r9,QWORD PTR [rdi]
  40907e:	mov    r8d,DWORD PTR [rdi+0x8]
  409082:	mov    eax,esi
  409084:	mov    edx,DWORD PTR [r9+rax*1]
  409088:	mov    eax,DWORD PTR [rdi+0xc]
  40908b:	dec    eax
  40908d:	mov    DWORD PTR [rsp+0x14],eax
  409091:	je     409156 <flatcc_verify_table_field@@Base+0x136>
  409097:	add    edx,esi
  409099:	mov    eax,0xf
  40909e:	cmp    edx,esi
  4090a0:	jbe    40905f <flatcc_verify_table_field@@Base+0x3f>
  4090a2:	mov    esi,edx
  4090a4:	lea    rdi,[rsi+0x4]
  4090a8:	cmp    rdi,r8
  4090ab:	ja     40905f <flatcc_verify_table_field@@Base+0x3f>
  4090ad:	mov    edi,esi
  4090af:	and    edi,0x3
  4090b2:	test   rdi,rdi
  4090b5:	jne    40905f <flatcc_verify_table_field@@Base+0x3f>
  4090b7:	mov    DWORD PTR [rsp+0x20],edx
  4090bb:	mov    edi,edx
  4090bd:	sub    edi,DWORD PTR [r9+rsi*1]
  4090c1:	mov    eax,0x1d
  4090c6:	test   edi,0x80000001
  4090cc:	jne    40905f <flatcc_verify_table_field@@Base+0x3f>
  4090ce:	mov    r10d,edi
  4090d1:	lea    r11,[r10+0x2]
  4090d5:	mov    eax,0x1b
  4090da:	cmp    r11,r8
  4090dd:	ja     40905f <flatcc_verify_table_field@@Base+0x3f>
  4090df:	movzx  esi,WORD PTR [r9+r10*1]
  4090e4:	mov    WORD PTR [rsp+0x26],si
  4090e9:	mov    eax,0x1e
  4090ee:	test   sil,0x1
  4090f2:	jne    40905f <flatcc_verify_table_field@@Base+0x3f>
  4090f8:	add    edi,esi
  4090fa:	cmp    edi,r8d
  4090fd:	ja     40905f <flatcc_verify_table_field@@Base+0x3f>
  409103:	mov    eax,0x1c
  409108:	cmp    si,0x4
  40910c:	jb     40905f <flatcc_verify_table_field@@Base+0x3f>
  409112:	mov    eax,r11d
  409115:	movzx  esi,WORD PTR [r9+rax*1]
  40911a:	mov    WORD PTR [rsp+0x24],si
  40911f:	mov    edi,r8d
  409122:	sub    edi,edx
  409124:	mov    eax,0x14
  409129:	cmp    edi,esi
  40912b:	jb     40905f <flatcc_verify_table_field@@Base+0x3f>
  409131:	add    r10,r9
  409134:	mov    QWORD PTR [rsp+0x18],r10
  409139:	mov    QWORD PTR [rsp+0x8],r9
  40913e:	mov    DWORD PTR [rsp+0x10],r8d
  409143:	lea    rdi,[rsp+0x8]
  409148:	call   rcx
  40914a:	add    rsp,0x28
  40914e:	ret    
  40914f:	xor    eax,eax
  409151:	add    rsp,0x28
  409155:	ret    
  409156:	mov    eax,0x3
  40915b:	add    rsp,0x28
  40915f:	ret    

0000000000409160 <flatcc_verify_table_vector_field@@Base>:
  409160:	push   rbp
  409161:	push   r15
  409163:	push   r14
  409165:	push   r13
  409167:	push   r12
  409169:	push   rbx
  40916a:	sub    rsp,0x28
  40916e:	lea    eax,[rsi+rsi*1]
  409171:	add    eax,0x4
  409174:	cmp    ax,WORD PTR [rdi+0x1e]
  409178:	jae    409350 <flatcc_verify_table_vector_field@@Base+0x1f0>
  40917e:	mov    rbx,rcx
  409181:	mov    rcx,QWORD PTR [rdi+0x10]
  409185:	movzx  eax,ax
  409188:	movzx  ecx,WORD PTR [rcx+rax*1]
  40918c:	test   ecx,ecx
  40918e:	je     409350 <flatcc_verify_table_vector_field@@Base+0x1f0>
  409194:	lea    edx,[rcx+0x4]
  409197:	movzx  esi,WORD PTR [rdi+0x1c]
  40919b:	mov    eax,0xd
  4091a0:	cmp    edx,esi
  4091a2:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4091a8:	mov    edx,DWORD PTR [rdi+0x18]
  4091ab:	lea    esi,[rdx+rcx*1]
  4091ae:	mov    eax,0xc
  4091b3:	test   sil,0x3
  4091b7:	jne    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4091bd:	test   esi,esi
  4091bf:	je     40934c <flatcc_verify_table_vector_field@@Base+0x1ec>
  4091c5:	mov    r13d,DWORD PTR [rdi+0xc]
  4091c9:	test   r13d,r13d
  4091cc:	jle    409369 <flatcc_verify_table_vector_field@@Base+0x209>
  4091d2:	mov    r15,QWORD PTR [rdi]
  4091d5:	mov    eax,esi
  4091d7:	mov    r8d,DWORD PTR [r15+rax*1]
  4091db:	lea    ebp,[r8+rsi*1]
  4091df:	mov    eax,0x10
  4091e4:	cmp    ebp,esi
  4091e6:	jbe    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4091ec:	mov    r9d,DWORD PTR [rdi+0x8]
  4091f0:	mov    esi,ebp
  4091f2:	lea    rdi,[rsi+0x4]
  4091f6:	cmp    rdi,r9
  4091f9:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4091ff:	and    edi,0x3
  409202:	test   rdi,rdi
  409205:	jne    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  40920b:	mov    r12d,DWORD PTR [r15+rsi*1]
  40920f:	mov    eax,0x19
  409214:	cmp    r12d,0x3fffffff
  40921b:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409221:	mov    esi,r9d
  409224:	sub    esi,ebp
  409226:	add    esi,0xfffffffc
  409229:	lea    edi,[r12*4+0x0]
  409231:	mov    eax,0x1a
  409236:	cmp    esi,edi
  409238:	jb     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  40923e:	test   r12d,r12d
  409241:	je     40934c <flatcc_verify_table_vector_field@@Base+0x1ec>
  409247:	add    r13d,0xfffffffe
  40924b:	lea    eax,[r8+rdx*1]
  40924f:	lea    r14d,[rcx+rax*1]
  409253:	add    r14d,0x4
  409257:	mov    r11d,r9d
  40925a:	sub    r11d,r8d
  40925d:	sub    r11d,edx
  409260:	sub    r11d,ecx
  409263:	add    r11d,0xfffffffc
  409267:	mov    QWORD PTR [rsp+0x20],r9
  40926c:	mov    r14d,r14d
  40926f:	mov    ecx,DWORD PTR [r15+r14*1]
  409273:	mov    DWORD PTR [rsp+0xc],r13d
  409278:	test   r13d,r13d
  40927b:	je     409429 <flatcc_verify_table_vector_field@@Base+0x2c9>
  409281:	lea    eax,[r14+rcx*1]
  409285:	cmp    eax,r14d
  409288:	jbe    409370 <flatcc_verify_table_vector_field@@Base+0x210>
  40928e:	mov    edx,eax
  409290:	lea    rsi,[rdx+0x4]
  409294:	cmp    rsi,r9
  409297:	ja     409370 <flatcc_verify_table_vector_field@@Base+0x210>
  40929d:	mov    esi,edx
  40929f:	and    esi,0x3
  4092a2:	test   rsi,rsi
  4092a5:	jne    409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092ab:	mov    DWORD PTR [rsp+0x18],eax
  4092af:	mov    edx,DWORD PTR [r15+rdx*1]
  4092b3:	mov    eax,ecx
  4092b5:	sub    eax,edx
  4092b7:	add    eax,r14d
  4092ba:	test   eax,0x80000001
  4092bf:	jne    409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092c5:	mov    eax,eax
  4092c7:	lea    rsi,[rax+0x2]
  4092cb:	cmp    rsi,r9
  4092ce:	ja     409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092d4:	movzx  ebp,WORD PTR [r15+rax*1]
  4092d9:	mov    WORD PTR [rsp+0x1e],bp
  4092de:	cmp    ebp,0x4
  4092e1:	jb     409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092e7:	mov    edi,ebp
  4092e9:	and    edi,0x1
  4092ec:	test   di,di
  4092ef:	jne    409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092f1:	add    ebp,ecx
  4092f3:	sub    ebp,edx
  4092f5:	add    ebp,r14d
  4092f8:	cmp    ebp,r9d
  4092fb:	ja     409370 <flatcc_verify_table_vector_field@@Base+0x210>
  4092fd:	mov    edx,esi
  4092ff:	movzx  edx,WORD PTR [r15+rdx*1]
  409304:	mov    WORD PTR [rsp+0x1c],dx
  409309:	mov    esi,r11d
  40930c:	sub    esi,ecx
  40930e:	cmp    esi,edx
  409310:	jb     409370 <flatcc_verify_table_vector_field@@Base+0x210>
  409312:	mov    ebp,r11d
  409315:	add    rax,r15
  409318:	mov    QWORD PTR [rsp+0x10],rax
  40931d:	mov    QWORD PTR [rsp],r15
  409321:	mov    DWORD PTR [rsp+0x8],r9d
  409326:	mov    rdi,rsp
  409329:	call   rbx
  40932b:	test   eax,eax
  40932d:	jne    40943b <flatcc_verify_table_vector_field@@Base+0x2db>
  409333:	add    r14d,0x4
  409337:	mov    r11d,ebp
  40933a:	add    r11d,0xfffffffc
  40933e:	dec    r12d
  409341:	mov    r9,QWORD PTR [rsp+0x20]
  409346:	jne    40926c <flatcc_verify_table_vector_field@@Base+0x10c>
  40934c:	xor    eax,eax
  40934e:	jmp    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409350:	xor    eax,eax
  409352:	test   edx,edx
  409354:	setne  al
  409357:	shl    eax,0x2
  40935a:	add    rsp,0x28
  40935e:	pop    rbx
  40935f:	pop    r12
  409361:	pop    r13
  409363:	pop    r14
  409365:	pop    r15
  409367:	pop    rbp
  409368:	ret    
  409369:	mov    eax,0x3
  40936e:	jmp    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409370:	mov    DWORD PTR [rsp+0xc],r13d
  409375:	add    ecx,r14d
  409378:	mov    eax,0xf
  40937d:	cmp    ecx,r14d
  409380:	jbe    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409382:	mov    edx,ecx
  409384:	lea    rsi,[rdx+0x4]
  409388:	cmp    rsi,r9
  40938b:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  40938d:	mov    esi,edx
  40938f:	and    esi,0x3
  409392:	test   rsi,rsi
  409395:	jne    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409397:	mov    DWORD PTR [rsp+0x18],ecx
  40939b:	mov    edi,ecx
  40939d:	sub    edi,DWORD PTR [r15+rdx*1]
  4093a1:	mov    eax,0x1d
  4093a6:	test   edi,0x80000001
  4093ac:	jne    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4093ae:	mov    edx,edi
  4093b0:	lea    rsi,[rdx+0x2]
  4093b4:	mov    eax,0x1b
  4093b9:	cmp    rsi,r9
  4093bc:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4093be:	movzx  ebp,WORD PTR [r15+rdx*1]
  4093c3:	mov    WORD PTR [rsp+0x1e],bp
  4093c8:	mov    eax,0x1e
  4093cd:	test   bpl,0x1
  4093d1:	jne    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4093d3:	add    edi,ebp
  4093d5:	mov    r8,r9
  4093d8:	cmp    edi,r8d
  4093db:	ja     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4093e1:	mov    eax,0x1c
  4093e6:	cmp    bp,0x4
  4093ea:	jb     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  4093f0:	mov    eax,esi
  4093f2:	movzx  esi,WORD PTR [r15+rax*1]
  4093f7:	mov    WORD PTR [rsp+0x1c],si
  4093fc:	mov    edi,r8d
  4093ff:	sub    edi,ecx
  409401:	mov    eax,0x14
  409406:	cmp    edi,esi
  409408:	jb     40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  40940e:	add    rdx,r15
  409411:	mov    QWORD PTR [rsp+0x10],rdx
  409416:	mov    QWORD PTR [rsp],r15
  40941a:	mov    DWORD PTR [rsp+0x8],r8d
  40941f:	mov    rdi,rsp
  409422:	call   rbx
  409424:	jmp    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  409429:	mov    DWORD PTR [rsp+0xc],0x0
  409431:	mov    eax,0x3
  409436:	jmp    40935a <flatcc_verify_table_vector_field@@Base+0x1fa>
  40943b:	mov    ecx,DWORD PTR [r15+r14*1]
  40943f:	add    ecx,r14d
  409442:	mov    DWORD PTR [rsp+0xc],r13d
  409447:	mov    r9,QWORD PTR [rsp+0x20]
  40944c:	jmp    409378 <flatcc_verify_table_vector_field@@Base+0x218>
  409451:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40945b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409460 <flatcc_verify_union_table@@Base>:
  409460:	sub    rsp,0x28
  409464:	mov    r8,QWORD PTR [rdi]
  409467:	mov    r11d,DWORD PTR [rdi+0x8]
  40946b:	mov    edx,DWORD PTR [rdi+0x14]
  40946e:	mov    ecx,DWORD PTR [rdi+0x18]
  409471:	mov    eax,DWORD PTR [rdi+0xc]
  409474:	dec    eax
  409476:	mov    DWORD PTR [rsp+0x14],eax
  40947a:	je     409533 <flatcc_verify_union_table@@Base+0xd3>
  409480:	add    ecx,edx
  409482:	mov    eax,0xf
  409487:	cmp    ecx,edx
  409489:	jbe    40952e <flatcc_verify_union_table@@Base+0xce>
  40948f:	mov    edx,ecx
  409491:	lea    rdi,[rdx+0x4]
  409495:	cmp    rdi,r11
  409498:	ja     40952e <flatcc_verify_union_table@@Base+0xce>
  40949e:	mov    edi,edx
  4094a0:	and    edi,0x3
  4094a3:	test   rdi,rdi
  4094a6:	jne    40952e <flatcc_verify_union_table@@Base+0xce>
  4094ac:	mov    DWORD PTR [rsp+0x20],ecx
  4094b0:	mov    edi,ecx
  4094b2:	sub    edi,DWORD PTR [r8+rdx*1]
  4094b6:	mov    eax,0x1d
  4094bb:	test   edi,0x80000001
  4094c1:	jne    40952e <flatcc_verify_union_table@@Base+0xce>
  4094c3:	mov    r9d,edi
  4094c6:	lea    r10,[r9+0x2]
  4094ca:	mov    eax,0x1b
  4094cf:	cmp    r10,r11
  4094d2:	ja     40952e <flatcc_verify_union_table@@Base+0xce>
  4094d4:	movzx  edx,WORD PTR [r8+r9*1]
  4094d9:	mov    WORD PTR [rsp+0x26],dx
  4094de:	mov    eax,0x1e
  4094e3:	test   dl,0x1
  4094e6:	jne    40952e <flatcc_verify_union_table@@Base+0xce>
  4094e8:	add    edi,edx
  4094ea:	cmp    edi,r11d
  4094ed:	ja     40952e <flatcc_verify_union_table@@Base+0xce>
  4094ef:	mov    eax,0x1c
  4094f4:	cmp    dx,0x4
  4094f8:	jb     40952e <flatcc_verify_union_table@@Base+0xce>
  4094fa:	mov    eax,r10d
  4094fd:	movzx  edx,WORD PTR [r8+rax*1]
  409502:	mov    WORD PTR [rsp+0x24],dx
  409507:	mov    edi,r11d
  40950a:	sub    edi,ecx
  40950c:	mov    eax,0x14
  409511:	cmp    edi,edx
  409513:	jb     40952e <flatcc_verify_union_table@@Base+0xce>
  409515:	add    r9,r8
  409518:	mov    QWORD PTR [rsp+0x18],r9
  40951d:	mov    QWORD PTR [rsp+0x8],r8
  409522:	mov    DWORD PTR [rsp+0x10],r11d
  409527:	lea    rdi,[rsp+0x8]
  40952c:	call   rsi
  40952e:	add    rsp,0x28
  409532:	ret    
  409533:	mov    eax,0x3
  409538:	add    rsp,0x28
  40953c:	ret    
  40953d:	nop    DWORD PTR [rax]

0000000000409540 <flatcc_verify_union_struct@@Base>:
  409540:	mov    ecx,DWORD PTR [rdi+0x18]
  409543:	mov    eax,0x12
  409548:	test   ecx,ecx
  40954a:	je     40957a <flatcc_verify_union_struct@@Base+0x3a>
  40954c:	mov    r8d,DWORD PTR [rdi+0x8]
  409550:	add    ecx,DWORD PTR [rdi+0x14]
  409553:	cmp    ecx,r8d
  409556:	ja     40957a <flatcc_verify_union_struct@@Base+0x3a>
  409558:	mov    eax,0xa
  40955d:	add    esi,ecx
  40955f:	jb     40957a <flatcc_verify_union_struct@@Base+0x3a>
  409561:	mov    eax,0x9
  409566:	cmp    esi,r8d
  409569:	ja     40957a <flatcc_verify_union_struct@@Base+0x3a>
  40956b:	movzx  eax,dx
  40956e:	dec    eax
  409570:	and    ecx,eax
  409572:	mov    eax,0xb
  409577:	cmove  eax,ecx
  40957a:	ret    
  40957b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409580 <flatcc_verify_union_string@@Base>:
  409580:	mov    edx,DWORD PTR [rdi+0x14]
  409583:	mov    ecx,DWORD PTR [rdi+0x18]
  409586:	add    ecx,edx
  409588:	mov    eax,0x11
  40958d:	cmp    ecx,edx
  40958f:	jbe    4095d6 <flatcc_verify_union_string@@Base+0x56>
  409591:	mov    r8d,DWORD PTR [rdi+0x8]
  409595:	mov    esi,ecx
  409597:	lea    rdx,[rsi+0x4]
  40959b:	cmp    rdx,r8
  40959e:	ja     4095d6 <flatcc_verify_union_string@@Base+0x56>
  4095a0:	mov    edx,esi
  4095a2:	and    edx,0x3
  4095a5:	test   rdx,rdx
  4095a8:	jne    4095d6 <flatcc_verify_union_string@@Base+0x56>
  4095aa:	mov    rdi,QWORD PTR [rdi]
  4095ad:	mov    esi,DWORD PTR [rdi+rsi*1]
  4095b0:	add    ecx,0x4
  4095b3:	sub    r8d,ecx
  4095b6:	lea    edx,[rsi+0x1]
  4095b9:	mov    eax,0x8
  4095be:	cmp    r8d,edx
  4095c1:	jb     4095d6 <flatcc_verify_union_string@@Base+0x56>
  4095c3:	mov    eax,ecx
  4095c5:	add    rdi,rax
  4095c8:	xor    ecx,ecx
  4095ca:	cmp    BYTE PTR [rsi+rdi*1],0x0
  4095ce:	mov    eax,0x7
  4095d3:	cmove  eax,ecx
  4095d6:	ret    
  4095d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004095e0 <flatcc_verify_buffer_header@@Base>:
  4095e0:	push   rbx
  4095e1:	sub    rsp,0x10
  4095e5:	mov    rbx,rdi
  4095e8:	mov    eax,0x5
  4095ed:	test   bl,0x3
  4095f0:	jne    409648 <flatcc_verify_buffer_header@@Base+0x68>
  4095f2:	mov    rcx,rdx
  4095f5:	mov    rdx,rsi
  4095f8:	shr    rdx,0x3
  4095fc:	mov    eax,0x6
  409601:	cmp    rdx,0x1ffffffe
  409608:	ja     409648 <flatcc_verify_buffer_header@@Base+0x68>
  40960a:	mov    eax,0x1
  40960f:	cmp    rsi,0x8
  409613:	jb     409648 <flatcc_verify_buffer_header@@Base+0x68>
  409615:	test   rcx,rcx
  409618:	je     409646 <flatcc_verify_buffer_header@@Base+0x66>
  40961a:	mov    DWORD PTR [rsp+0xc],0x0
  409622:	lea    rdi,[rsp+0xc]
  409627:	mov    edx,0x4
  40962c:	mov    rsi,rcx
  40962f:	call   403040 <strncpy@plt>
  409634:	mov    ecx,DWORD PTR [rsp+0xc]
  409638:	test   ecx,ecx
  40963a:	je     409646 <flatcc_verify_buffer_header@@Base+0x66>
  40963c:	mov    eax,0x2
  409641:	cmp    DWORD PTR [rbx+0x4],ecx
  409644:	jne    409648 <flatcc_verify_buffer_header@@Base+0x68>
  409646:	xor    eax,eax
  409648:	add    rsp,0x10
  40964c:	pop    rbx
  40964d:	ret    
  40964e:	xchg   ax,ax

0000000000409650 <flatcc_verify_typed_buffer_header@@Base>:
  409650:	mov    eax,0x5
  409655:	test   dil,0x3
  409659:	jne    40968b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  40965b:	mov    rcx,rsi
  40965e:	shr    rcx,0x3
  409662:	mov    eax,0x6
  409667:	cmp    rcx,0x1ffffffe
  40966e:	ja     40968b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  409670:	mov    eax,0x1
  409675:	cmp    rsi,0x8
  409679:	jb     40968b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  40967b:	test   edx,edx
  40967d:	je     409689 <flatcc_verify_typed_buffer_header@@Base+0x39>
  40967f:	mov    eax,0x2
  409684:	cmp    DWORD PTR [rdi+0x4],edx
  409687:	jne    40968b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  409689:	xor    eax,eax
  40968b:	ret    
  40968c:	nop    DWORD PTR [rax+0x0]

0000000000409690 <flatcc_verify_struct_as_root@@Base>:
  409690:	push   rbp
  409691:	push   r15
  409693:	push   r14
  409695:	push   r12
  409697:	push   rbx
  409698:	sub    rsp,0x10
  40969c:	mov    rbx,rdi
  40969f:	mov    eax,0x5
  4096a4:	test   bl,0x3
  4096a7:	jne    40976e <flatcc_verify_struct_as_root@@Base+0xde>
  4096ad:	mov    r15,rcx
  4096b0:	mov    rbp,rsi
  4096b3:	mov    rcx,rsi
  4096b6:	shr    rcx,0x3
  4096ba:	mov    eax,0x6
  4096bf:	cmp    rcx,0x1ffffffe
  4096c6:	ja     40976e <flatcc_verify_struct_as_root@@Base+0xde>
  4096cc:	mov    eax,0x1
  4096d1:	cmp    rbp,0x8
  4096d5:	jb     40976e <flatcc_verify_struct_as_root@@Base+0xde>
  4096db:	mov    r14d,r8d
  4096de:	mov    r12,rdx
  4096e1:	test   rdx,rdx
  4096e4:	je     40973c <flatcc_verify_struct_as_root@@Base+0xac>
  4096e6:	mov    DWORD PTR [rsp+0x8],0x0
  4096ee:	lea    rdi,[rsp+0x8]
  4096f3:	mov    edx,0x4
  4096f8:	mov    rsi,r12
  4096fb:	call   403040 <strncpy@plt>
  409700:	mov    eax,DWORD PTR [rsp+0x8]
  409704:	test   eax,eax
  409706:	je     40973c <flatcc_verify_struct_as_root@@Base+0xac>
  409708:	cmp    DWORD PTR [rbx+0x4],eax
  40970b:	je     40973c <flatcc_verify_struct_as_root@@Base+0xac>
  40970d:	mov    DWORD PTR [rsp+0xc],0x0
  409715:	lea    rdi,[rsp+0xc]
  40971a:	mov    edx,0x4
  40971f:	mov    rsi,r12
  409722:	call   403040 <strncpy@plt>
  409727:	mov    ecx,DWORD PTR [rsp+0xc]
  40972b:	xor    eax,eax
  40972d:	cmp    DWORD PTR [rbx+0x4],ecx
  409730:	setne  al
  409733:	add    eax,eax
  409735:	test   ecx,ecx
  409737:	cmove  eax,ecx
  40973a:	jmp    40976e <flatcc_verify_struct_as_root@@Base+0xde>
  40973c:	mov    ecx,DWORD PTR [rbx]
  40973e:	lea    edx,[rcx-0x1]
  409741:	mov    eax,0x12
  409746:	cmp    edx,ebp
  409748:	jae    40976e <flatcc_verify_struct_as_root@@Base+0xde>
  40974a:	mov    eax,0xa
  40974f:	add    r15d,ecx
  409752:	jb     40976e <flatcc_verify_struct_as_root@@Base+0xde>
  409754:	mov    eax,0x9
  409759:	cmp    r15d,ebp
  40975c:	ja     40976e <flatcc_verify_struct_as_root@@Base+0xde>
  40975e:	movzx  eax,r14w
  409762:	dec    eax
  409764:	and    ecx,eax
  409766:	mov    eax,0xb
  40976b:	cmove  eax,ecx
  40976e:	add    rsp,0x10
  409772:	pop    rbx
  409773:	pop    r12
  409775:	pop    r14
  409777:	pop    r15
  409779:	pop    rbp
  40977a:	ret    
  40977b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409780 <flatcc_verify_struct_as_typed_root@@Base>:
  409780:	mov    eax,0x5
  409785:	test   dil,0x3
  409789:	jne    4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  40978b:	mov    r9,rsi
  40978e:	shr    r9,0x3
  409792:	mov    eax,0x6
  409797:	cmp    r9,0x1ffffffe
  40979e:	ja     4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097a0:	mov    eax,0x1
  4097a5:	cmp    rsi,0x8
  4097a9:	jb     4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097ab:	test   edx,edx
  4097ad:	je     4097b9 <flatcc_verify_struct_as_typed_root@@Base+0x39>
  4097af:	mov    eax,0x2
  4097b4:	cmp    DWORD PTR [rdi+0x4],edx
  4097b7:	jne    4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097b9:	mov    edx,DWORD PTR [rdi]
  4097bb:	lea    edi,[rdx-0x1]
  4097be:	mov    eax,0x12
  4097c3:	cmp    edi,esi
  4097c5:	jae    4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097c7:	mov    eax,0xa
  4097cc:	add    ecx,edx
  4097ce:	jb     4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097d0:	mov    eax,0x9
  4097d5:	cmp    ecx,esi
  4097d7:	ja     4097e9 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  4097d9:	movzx  eax,r8w
  4097dd:	dec    eax
  4097df:	and    edx,eax
  4097e1:	mov    eax,0xb
  4097e6:	cmove  eax,edx
  4097e9:	ret    
  4097ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004097f0 <flatcc_verify_table_as_root@@Base>:
  4097f0:	push   r15
  4097f2:	push   r14
  4097f4:	push   r13
  4097f6:	push   r12
  4097f8:	push   rbx
  4097f9:	sub    rsp,0x20
  4097fd:	mov    r12,rdi
  409800:	mov    eax,0x5
  409805:	test   r12b,0x3
  409809:	jne    40994c <flatcc_verify_table_as_root@@Base+0x15c>
  40980f:	mov    r14,rcx
  409812:	mov    r15,rsi
  409815:	mov    r13d,r15d
  409818:	mov    rcx,r13
  40981b:	shr    rcx,0x3
  40981f:	mov    eax,0x6
  409824:	cmp    rcx,0x1ffffffe
  40982b:	ja     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  409831:	mov    eax,0x1
  409836:	cmp    r13,0x8
  40983a:	jb     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  409840:	mov    rbx,rdx
  409843:	test   rdx,rdx
  409846:	je     40989d <flatcc_verify_table_as_root@@Base+0xad>
  409848:	mov    DWORD PTR [rsp],0x0
  40984f:	mov    rdi,rsp
  409852:	mov    edx,0x4
  409857:	mov    rsi,rbx
  40985a:	call   403040 <strncpy@plt>
  40985f:	mov    eax,DWORD PTR [rsp]
  409862:	test   eax,eax
  409864:	je     40989d <flatcc_verify_table_as_root@@Base+0xad>
  409866:	cmp    DWORD PTR [r12+0x4],eax
  40986b:	je     40989d <flatcc_verify_table_as_root@@Base+0xad>
  40986d:	mov    DWORD PTR [rsp],0x0
  409874:	mov    rdi,rsp
  409877:	mov    edx,0x4
  40987c:	mov    rsi,rbx
  40987f:	call   403040 <strncpy@plt>
  409884:	mov    ecx,DWORD PTR [rsp]
  409887:	xor    eax,eax
  409889:	cmp    DWORD PTR [r12+0x4],ecx
  40988e:	setne  al
  409891:	add    eax,eax
  409893:	test   ecx,ecx
  409895:	cmove  eax,ecx
  409898:	jmp    40994c <flatcc_verify_table_as_root@@Base+0x15c>
  40989d:	mov    ecx,DWORD PTR [r12]
  4098a1:	mov    DWORD PTR [rsp+0xc],0x63
  4098a9:	mov    eax,0xf
  4098ae:	test   rcx,rcx
  4098b1:	je     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  4098b7:	lea    rdx,[rcx+0x4]
  4098bb:	cmp    rdx,r13
  4098be:	ja     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  4098c4:	mov    edx,ecx
  4098c6:	and    edx,0x3
  4098c9:	test   rdx,rdx
  4098cc:	jne    40994c <flatcc_verify_table_as_root@@Base+0x15c>
  4098ce:	mov    DWORD PTR [rsp+0x18],ecx
  4098d2:	mov    edi,ecx
  4098d4:	sub    edi,DWORD PTR [r12+rcx*1]
  4098d8:	mov    eax,0x1d
  4098dd:	test   edi,0x80000001
  4098e3:	jne    40994c <flatcc_verify_table_as_root@@Base+0x15c>
  4098e5:	mov    edx,edi
  4098e7:	lea    rsi,[rdx+0x2]
  4098eb:	mov    eax,0x1b
  4098f0:	cmp    rsi,r13
  4098f3:	ja     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  4098f5:	movzx  ebx,WORD PTR [r12+rdx*1]
  4098fa:	mov    WORD PTR [rsp+0x1e],bx
  4098ff:	mov    eax,0x1e
  409904:	test   bl,0x1
  409907:	jne    40994c <flatcc_verify_table_as_root@@Base+0x15c>
  409909:	add    edi,ebx
  40990b:	cmp    edi,r15d
  40990e:	ja     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  409910:	mov    eax,0x1c
  409915:	cmp    bx,0x4
  409919:	jb     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  40991b:	mov    eax,esi
  40991d:	movzx  esi,WORD PTR [r12+rax*1]
  409922:	mov    WORD PTR [rsp+0x1c],si
  409927:	mov    edi,r15d
  40992a:	sub    edi,ecx
  40992c:	mov    eax,0x14
  409931:	cmp    edi,esi
  409933:	jb     40994c <flatcc_verify_table_as_root@@Base+0x15c>
  409935:	add    rdx,r12
  409938:	mov    QWORD PTR [rsp+0x10],rdx
  40993d:	mov    QWORD PTR [rsp],r12
  409941:	mov    DWORD PTR [rsp+0x8],r15d
  409946:	mov    rdi,rsp
  409949:	call   r14
  40994c:	add    rsp,0x20
  409950:	pop    rbx
  409951:	pop    r12
  409953:	pop    r13
  409955:	pop    r14
  409957:	pop    r15
  409959:	ret    
  40995a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409960 <flatcc_verify_table_as_typed_root@@Base>:
  409960:	push   rbx
  409961:	sub    rsp,0x20
  409965:	mov    eax,0x5
  40996a:	test   dil,0x3
  40996e:	jne    409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409974:	mov    r8d,esi
  409977:	mov    r9,r8
  40997a:	shr    r9,0x3
  40997e:	mov    eax,0x6
  409983:	cmp    r9,0x1ffffffe
  40998a:	ja     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409990:	mov    eax,0x1
  409995:	cmp    r8,0x8
  409999:	jb     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  40999f:	test   edx,edx
  4099a1:	je     4099b1 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4099a3:	mov    eax,0x2
  4099a8:	cmp    DWORD PTR [rdi+0x4],edx
  4099ab:	jne    409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  4099b1:	mov    ebx,DWORD PTR [rdi]
  4099b3:	mov    DWORD PTR [rsp+0xc],0x63
  4099bb:	mov    eax,0xf
  4099c0:	test   rbx,rbx
  4099c3:	je     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  4099c9:	lea    rdx,[rbx+0x4]
  4099cd:	cmp    rdx,r8
  4099d0:	ja     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  4099d6:	mov    edx,ebx
  4099d8:	and    edx,0x3
  4099db:	test   rdx,rdx
  4099de:	jne    409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  4099e4:	mov    DWORD PTR [rsp+0x18],ebx
  4099e8:	mov    r11d,ebx
  4099eb:	sub    r11d,DWORD PTR [rdi+rbx*1]
  4099ef:	mov    eax,0x1d
  4099f4:	test   r11d,0x80000001
  4099fb:	jne    409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  4099fd:	mov    r9d,r11d
  409a00:	lea    r10,[r9+0x2]
  409a04:	mov    eax,0x1b
  409a09:	cmp    r10,r8
  409a0c:	ja     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409a0e:	movzx  r8d,WORD PTR [rdi+r9*1]
  409a13:	mov    WORD PTR [rsp+0x1e],r8w
  409a19:	mov    eax,0x1e
  409a1e:	test   r8b,0x1
  409a22:	jne    409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409a24:	add    r11d,r8d
  409a27:	cmp    r11d,esi
  409a2a:	ja     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409a2c:	mov    eax,0x1c
  409a31:	cmp    r8w,0x4
  409a36:	jb     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409a38:	mov    eax,r10d
  409a3b:	movzx  r8d,WORD PTR [rdi+rax*1]
  409a40:	mov    WORD PTR [rsp+0x1c],r8w
  409a46:	mov    edx,esi
  409a48:	sub    edx,ebx
  409a4a:	mov    eax,0x14
  409a4f:	cmp    edx,r8d
  409a52:	jb     409a69 <flatcc_verify_table_as_typed_root@@Base+0x109>
  409a54:	add    r9,rdi
  409a57:	mov    QWORD PTR [rsp+0x10],r9
  409a5c:	mov    QWORD PTR [rsp],rdi
  409a60:	mov    DWORD PTR [rsp+0x8],esi
  409a64:	mov    rdi,rsp
  409a67:	call   rcx
  409a69:	add    rsp,0x20
  409a6d:	pop    rbx
  409a6e:	ret    
  409a6f:	nop

0000000000409a70 <flatcc_verify_struct_as_nested_root@@Base>:
  409a70:	push   r15
  409a72:	push   r14
  409a74:	push   rbx
  409a75:	lea    esi,[rsi+rsi*1]
  409a78:	add    esi,0x4
  409a7b:	movzx  ebx,WORD PTR [rdi+0x1e]
  409a7f:	cmp    si,bx
  409a82:	jae    409aec <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  409a84:	mov    r10,QWORD PTR [rdi+0x10]
  409a88:	movzx  r11d,si
  409a8c:	movzx  eax,WORD PTR [r10+r11*1]
  409a91:	test   eax,eax
  409a93:	je     409aec <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  409a95:	lea    esi,[rax+0x4]
  409a98:	movzx  ebx,WORD PTR [rdi+0x1c]
  409a9c:	cmp    esi,ebx
  409a9e:	ja     409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409aa0:	add    eax,DWORD PTR [rdi+0x18]
  409aa3:	test   al,0x3
  409aa5:	jne    409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409aa7:	test   eax,eax
  409aa9:	je     409b9f <flatcc_verify_struct_as_nested_root@@Base+0x12f>
  409aaf:	mov    r15,QWORD PTR [rdi]
  409ab2:	mov    esi,eax
  409ab4:	mov    ebx,DWORD PTR [r15+rsi*1]
  409ab8:	add    ebx,eax
  409aba:	cmp    ebx,eax
  409abc:	jbe    409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409abe:	mov    eax,DWORD PTR [rdi+0x8]
  409ac1:	mov    r14d,ebx
  409ac4:	lea    rsi,[r14+0x4]
  409ac8:	cmp    rsi,rax
  409acb:	ja     409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409acd:	and    esi,0x3
  409ad0:	test   rsi,rsi
  409ad3:	jne    409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409ad5:	movzx  esi,r9w
  409ad9:	sub    eax,ebx
  409adb:	add    eax,0xfffffffc
  409ade:	imul   esi,DWORD PTR [r15+r14*1]
  409ae3:	cmp    eax,esi
  409ae5:	jb     409b05 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  409ae7:	jmp    409b9f <flatcc_verify_struct_as_nested_root@@Base+0x12f>
  409aec:	test   edx,edx
  409aee:	je     409b90 <flatcc_verify_struct_as_nested_root@@Base+0x120>
  409af4:	cmp    si,bx
  409af7:	jae    409b84 <flatcc_verify_struct_as_nested_root@@Base+0x114>
  409afd:	mov    r10,QWORD PTR [rdi+0x10]
  409b01:	movzx  r11d,si
  409b05:	movzx  esi,WORD PTR [r10+r11*1]
  409b0a:	test   esi,esi
  409b0c:	je     409b84 <flatcc_verify_struct_as_nested_root@@Base+0x114>
  409b0e:	lea    ecx,[rsi+0x4]
  409b11:	movzx  edx,WORD PTR [rdi+0x1c]
  409b15:	mov    eax,0xd
  409b1a:	cmp    ecx,edx
  409b1c:	ja     409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b22:	add    esi,DWORD PTR [rdi+0x18]
  409b25:	mov    eax,0xc
  409b2a:	test   sil,0x3
  409b2e:	jne    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b34:	test   esi,esi
  409b36:	je     409bda <flatcc_verify_struct_as_nested_root@@Base+0x16a>
  409b3c:	mov    rcx,QWORD PTR [rdi]
  409b3f:	mov    eax,esi
  409b41:	mov    edx,DWORD PTR [rcx+rax*1]
  409b44:	add    edx,esi
  409b46:	mov    eax,0x10
  409b4b:	cmp    edx,esi
  409b4d:	jbe    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b53:	mov    esi,DWORD PTR [rdi+0x8]
  409b56:	mov    edi,edx
  409b58:	lea    rbx,[rdi+0x4]
  409b5c:	cmp    rbx,rsi
  409b5f:	ja     409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b61:	and    ebx,0x3
  409b64:	test   rbx,rbx
  409b67:	jne    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b69:	movzx  eax,r9w
  409b6d:	sub    esi,edx
  409b6f:	add    esi,0xfffffffc
  409b72:	imul   eax,DWORD PTR [rcx+rdi*1]
  409b76:	xor    ecx,ecx
  409b78:	cmp    esi,eax
  409b7a:	mov    eax,0x1a
  409b7f:	cmovae eax,ecx
  409b82:	jmp    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b84:	xor    eax,eax
  409b86:	test   edx,edx
  409b88:	setne  al
  409b8b:	shl    eax,0x2
  409b8e:	jmp    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b90:	xor    eax,eax
  409b92:	cmp    si,bx
  409b95:	jae    409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409b97:	mov    r10,QWORD PTR [rdi+0x10]
  409b9b:	movzx  r11d,si
  409b9f:	movzx  esi,WORD PTR [r10+r11*1]
  409ba4:	xor    eax,eax
  409ba6:	test   rsi,rsi
  409ba9:	je     409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409bab:	mov    edx,DWORD PTR [rdi+0x18]
  409bae:	add    rdx,QWORD PTR [rdi]
  409bb1:	add    rdx,rsi
  409bb4:	je     409bdc <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  409bb6:	mov    eax,DWORD PTR [rdx]
  409bb8:	mov    esi,DWORD PTR [rax+rdx*1]
  409bbb:	lea    rdi,[rax+rdx*1]
  409bbf:	add    rdi,0x4
  409bc3:	movzx  eax,r9w
  409bc7:	mov    rdx,rcx
  409bca:	mov    rcx,r8
  409bcd:	mov    r8d,eax
  409bd0:	pop    rbx
  409bd1:	pop    r14
  409bd3:	pop    r15
  409bd5:	jmp    409690 <flatcc_verify_struct_as_root@@Base>
  409bda:	xor    eax,eax
  409bdc:	pop    rbx
  409bdd:	pop    r14
  409bdf:	pop    r15
  409be1:	ret    
  409be2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409bec:	nop    DWORD PTR [rax+0x0]

0000000000409bf0 <flatcc_verify_table_as_nested_root@@Base>:
  409bf0:	push   rbp
  409bf1:	push   r15
  409bf3:	push   r14
  409bf5:	push   r13
  409bf7:	push   r12
  409bf9:	push   rbx
  409bfa:	sub    rsp,0x28
  409bfe:	mov    r14,r9
  409c01:	mov    r15,rcx
  409c04:	mov    rbx,rdi
  409c07:	lea    esi,[rsi+rsi*1]
  409c0a:	add    esi,0x4
  409c0d:	movzx  ebp,WORD PTR [rdi+0x1e]
  409c11:	cmp    si,bp
  409c14:	jae    409c7e <flatcc_verify_table_as_nested_root@@Base+0x8e>
  409c16:	mov    rax,QWORD PTR [rbx+0x10]
  409c1a:	movzx  ecx,si
  409c1d:	movzx  edi,WORD PTR [rax+rcx*1]
  409c21:	test   edi,edi
  409c23:	je     409c7e <flatcc_verify_table_as_nested_root@@Base+0x8e>
  409c25:	lea    esi,[rdi+0x4]
  409c28:	movzx  ebp,WORD PTR [rbx+0x1c]
  409c2c:	cmp    esi,ebp
  409c2e:	ja     409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c30:	add    edi,DWORD PTR [rbx+0x18]
  409c33:	test   dil,0x3
  409c37:	jne    409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c39:	test   edi,edi
  409c3b:	je     409d44 <flatcc_verify_table_as_nested_root@@Base+0x154>
  409c41:	mov    r10,QWORD PTR [rbx]
  409c44:	mov    esi,edi
  409c46:	mov    ebp,DWORD PTR [r10+rsi*1]
  409c4a:	add    ebp,edi
  409c4c:	cmp    ebp,edi
  409c4e:	jbe    409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c50:	mov    edi,DWORD PTR [rbx+0x8]
  409c53:	mov    r9d,ebp
  409c56:	lea    rsi,[r9+0x4]
  409c5a:	cmp    rsi,rdi
  409c5d:	ja     409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c5f:	and    esi,0x3
  409c62:	test   rsi,rsi
  409c65:	jne    409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c67:	movzx  esi,r8w
  409c6b:	sub    edi,ebp
  409c6d:	add    edi,0xfffffffc
  409c70:	imul   esi,DWORD PTR [r10+r9*1]
  409c75:	cmp    edi,esi
  409c77:	jb     409c96 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  409c79:	jmp    409d44 <flatcc_verify_table_as_nested_root@@Base+0x154>
  409c7e:	test   edx,edx
  409c80:	je     409d32 <flatcc_verify_table_as_nested_root@@Base+0x142>
  409c86:	cmp    si,bp
  409c89:	jae    409d23 <flatcc_verify_table_as_nested_root@@Base+0x133>
  409c8f:	mov    rax,QWORD PTR [rbx+0x10]
  409c93:	movzx  ecx,si
  409c96:	movzx  esi,WORD PTR [rax+rcx*1]
  409c9a:	test   esi,esi
  409c9c:	je     409d23 <flatcc_verify_table_as_nested_root@@Base+0x133>
  409ca2:	lea    ecx,[rsi+0x4]
  409ca5:	movzx  edx,WORD PTR [rbx+0x1c]
  409ca9:	mov    eax,0xd
  409cae:	cmp    ecx,edx
  409cb0:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409cb6:	add    esi,DWORD PTR [rbx+0x18]
  409cb9:	mov    eax,0xc
  409cbe:	test   sil,0x3
  409cc2:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409cc8:	test   esi,esi
  409cca:	je     409df6 <flatcc_verify_table_as_nested_root@@Base+0x206>
  409cd0:	mov    rcx,QWORD PTR [rbx]
  409cd3:	mov    eax,esi
  409cd5:	mov    edx,DWORD PTR [rcx+rax*1]
  409cd8:	add    edx,esi
  409cda:	mov    eax,0x10
  409cdf:	cmp    edx,esi
  409ce1:	jbe    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409ce7:	mov    esi,DWORD PTR [rbx+0x8]
  409cea:	mov    edi,edx
  409cec:	lea    rbp,[rdi+0x4]
  409cf0:	cmp    rbp,rsi
  409cf3:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409cf9:	and    ebp,0x3
  409cfc:	test   rbp,rbp
  409cff:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d05:	movzx  eax,r8w
  409d09:	sub    esi,edx
  409d0b:	add    esi,0xfffffffc
  409d0e:	imul   eax,DWORD PTR [rcx+rdi*1]
  409d12:	xor    ecx,ecx
  409d14:	cmp    esi,eax
  409d16:	mov    eax,0x1a
  409d1b:	cmovae eax,ecx
  409d1e:	jmp    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d23:	xor    eax,eax
  409d25:	test   edx,edx
  409d27:	setne  al
  409d2a:	shl    eax,0x2
  409d2d:	jmp    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d32:	xor    eax,eax
  409d34:	cmp    si,bp
  409d37:	jae    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d3d:	mov    rax,QWORD PTR [rbx+0x10]
  409d41:	movzx  ecx,si
  409d44:	movzx  ecx,WORD PTR [rax+rcx*1]
  409d48:	xor    eax,eax
  409d4a:	test   rcx,rcx
  409d4d:	je     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d53:	mov    r13d,DWORD PTR [rbx+0x18]
  409d57:	add    r13,QWORD PTR [rbx]
  409d5a:	add    r13,rcx
  409d5d:	je     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d63:	mov    ebp,DWORD PTR [r13+0x0]
  409d67:	lea    r12,[r13*1+0x4]
  409d6f:	add    r12,rbp
  409d72:	mov    eax,0x5
  409d77:	test   r12b,0x3
  409d7b:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d7d:	mov    ecx,DWORD PTR [rbp+r13*1+0x0]
  409d82:	mov    eax,0x6
  409d87:	cmp    ecx,0xfffffff7
  409d8a:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d8c:	mov    eax,0x1
  409d91:	cmp    ecx,0x8
  409d94:	jb     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409d96:	test   r15,r15
  409d99:	je     409e07 <flatcc_verify_table_as_nested_root@@Base+0x217>
  409d9b:	mov    DWORD PTR [rsp],0x0
  409da2:	mov    rdi,rsp
  409da5:	mov    edx,0x4
  409daa:	mov    rsi,r15
  409dad:	mov    QWORD PTR [rsp+0x20],rcx
  409db2:	call   403040 <strncpy@plt>
  409db7:	mov    rcx,QWORD PTR [rsp+0x20]
  409dbc:	mov    eax,DWORD PTR [rsp]
  409dbf:	test   eax,eax
  409dc1:	je     409e07 <flatcc_verify_table_as_nested_root@@Base+0x217>
  409dc3:	add    rbp,r13
  409dc6:	cmp    DWORD PTR [rbp+0x8],eax
  409dc9:	je     409e07 <flatcc_verify_table_as_nested_root@@Base+0x217>
  409dcb:	mov    DWORD PTR [rsp],0x0
  409dd2:	mov    rdi,rsp
  409dd5:	mov    edx,0x4
  409dda:	mov    rsi,r15
  409ddd:	call   403040 <strncpy@plt>
  409de2:	mov    ecx,DWORD PTR [rsp]
  409de5:	xor    eax,eax
  409de7:	cmp    DWORD PTR [rbp+0x8],ecx
  409dea:	setne  al
  409ded:	add    eax,eax
  409def:	test   ecx,ecx
  409df1:	cmove  eax,ecx
  409df4:	jmp    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409df6:	xor    eax,eax
  409df8:	add    rsp,0x28
  409dfc:	pop    rbx
  409dfd:	pop    r12
  409dff:	pop    r13
  409e01:	pop    r14
  409e03:	pop    r15
  409e05:	pop    rbp
  409e06:	ret    
  409e07:	mov    esi,DWORD PTR [r12]
  409e0b:	mov    eax,DWORD PTR [rbx+0xc]
  409e0e:	dec    eax
  409e10:	mov    DWORD PTR [rsp+0xc],eax
  409e14:	je     409ebf <flatcc_verify_table_as_nested_root@@Base+0x2cf>
  409e1a:	mov    eax,0xf
  409e1f:	test   esi,esi
  409e21:	je     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e23:	lea    rdx,[rsi+0x4]
  409e27:	cmp    rdx,rcx
  409e2a:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e2c:	mov    edx,esi
  409e2e:	and    edx,0x3
  409e31:	test   rdx,rdx
  409e34:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e36:	mov    DWORD PTR [rsp+0x18],esi
  409e3a:	mov    edi,esi
  409e3c:	sub    edi,DWORD PTR [r12+rsi*1]
  409e40:	mov    eax,0x1d
  409e45:	test   edi,0x80000001
  409e4b:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e4d:	mov    edx,edi
  409e4f:	lea    rbx,[rdx+0x2]
  409e53:	mov    eax,0x1b
  409e58:	cmp    rbx,rcx
  409e5b:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e5d:	movzx  ebp,WORD PTR [r12+rdx*1]
  409e62:	mov    WORD PTR [rsp+0x1e],bp
  409e67:	mov    eax,0x1e
  409e6c:	test   bpl,0x1
  409e70:	jne    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e72:	add    edi,ebp
  409e74:	cmp    edi,ecx
  409e76:	ja     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e78:	mov    eax,0x1c
  409e7d:	cmp    bp,0x4
  409e81:	jb     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409e87:	mov    eax,ebx
  409e89:	movzx  ebp,WORD PTR [r12+rax*1]
  409e8e:	mov    WORD PTR [rsp+0x1c],bp
  409e93:	mov    edi,ecx
  409e95:	sub    edi,esi
  409e97:	mov    eax,0x14
  409e9c:	cmp    edi,ebp
  409e9e:	jb     409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409ea4:	add    rdx,r12
  409ea7:	mov    QWORD PTR [rsp+0x10],rdx
  409eac:	mov    QWORD PTR [rsp],r12
  409eb0:	mov    DWORD PTR [rsp+0x8],ecx
  409eb4:	mov    rdi,rsp
  409eb7:	call   r14
  409eba:	jmp    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409ebf:	mov    eax,0x3
  409ec4:	jmp    409df8 <flatcc_verify_table_as_nested_root@@Base+0x208>
  409ec9:	nop    DWORD PTR [rax+0x0]

0000000000409ed0 <flatcc_verify_union_field@@Base>:
  409ed0:	push   rbp
  409ed1:	push   r14
  409ed3:	push   rbx
  409ed4:	sub    rsp,0x20
  409ed8:	lea    eax,[rsi+rsi*1]
  409edb:	add    eax,0x2
  409ede:	add    esi,esi
  409ee0:	movzx  r10d,WORD PTR [rdi+0x1e]
  409ee5:	cmp    ax,r10w
  409ee9:	jae    409fc8 <flatcc_verify_union_field@@Base+0xf8>
  409eef:	mov    rbx,QWORD PTR [rdi+0x10]
  409ef3:	movzx  eax,ax
  409ef6:	movzx  r9d,WORD PTR [rbx+rax*1]
  409efb:	test   r9,r9
  409efe:	je     409fc8 <flatcc_verify_union_field@@Base+0xf8>
  409f04:	mov    eax,0xd
  409f09:	cmp    r9w,WORD PTR [rdi+0x1c]
  409f0e:	jae    409fee <flatcc_verify_union_field@@Base+0x11e>
  409f14:	mov    r8,QWORD PTR [rdi]
  409f17:	add    esi,0x4
  409f1a:	mov    al,0x1
  409f1c:	cmp    si,r10w
  409f20:	jae    409f2d <flatcc_verify_union_field@@Base+0x5d>
  409f22:	movzx  eax,si
  409f25:	cmp    WORD PTR [rbx+rax*1],0x0
  409f2a:	sete   al
  409f2d:	mov    r14d,DWORD PTR [rdi+0x18]
  409f31:	lea    r11,[r8+r14*1]
  409f35:	mov    bpl,BYTE PTR [r9+r11*1]
  409f39:	test   al,al
  409f3b:	jne    409f4b <flatcc_verify_union_field@@Base+0x7b>
  409f3d:	mov    eax,0x18
  409f42:	test   bpl,bpl
  409f45:	je     409fee <flatcc_verify_union_field@@Base+0x11e>
  409f4b:	xor    eax,eax
  409f4d:	test   bpl,bpl
  409f50:	je     409fee <flatcc_verify_union_field@@Base+0x11e>
  409f56:	cmp    si,r10w
  409f5a:	jae    409ff7 <flatcc_verify_union_field@@Base+0x127>
  409f60:	movzx  eax,si
  409f63:	movzx  esi,WORD PTR [rbx+rax*1]
  409f67:	test   esi,esi
  409f69:	je     409ff7 <flatcc_verify_union_field@@Base+0x127>
  409f6f:	lea    edx,[rsi+0x4]
  409f72:	movzx  ebp,WORD PTR [rdi+0x1c]
  409f76:	mov    eax,0xd
  409f7b:	cmp    edx,ebp
  409f7d:	ja     409fee <flatcc_verify_union_field@@Base+0x11e>
  409f7f:	add    r14d,esi
  409f82:	mov    eax,0xc
  409f87:	test   r14b,0x3
  409f8b:	jne    409fee <flatcc_verify_union_field@@Base+0x11e>
  409f8d:	mov    eax,0x0
  409f92:	test   r14d,r14d
  409f95:	je     409fee <flatcc_verify_union_field@@Base+0x11e>
  409f97:	mov    QWORD PTR [rsp],r8
  409f9b:	mov    eax,DWORD PTR [rdi+0x8]
  409f9e:	mov    DWORD PTR [rsp+0x8],eax
  409fa2:	mov    eax,DWORD PTR [rdi+0xc]
  409fa5:	mov    DWORD PTR [rsp+0xc],eax
  409fa9:	mov    DWORD PTR [rsp+0x14],r14d
  409fae:	mov    eax,r14d
  409fb1:	mov    eax,DWORD PTR [r8+rax*1]
  409fb5:	mov    DWORD PTR [rsp+0x18],eax
  409fb9:	mov    al,BYTE PTR [r11+r9*1]
  409fbd:	mov    BYTE PTR [rsp+0x10],al
  409fc1:	mov    rdi,rsp
  409fc4:	call   rcx
  409fc6:	jmp    409fee <flatcc_verify_union_field@@Base+0x11e>
  409fc8:	add    esi,0x4
  409fcb:	cmp    si,r10w
  409fcf:	jae    409fe4 <flatcc_verify_union_field@@Base+0x114>
  409fd1:	mov    rcx,QWORD PTR [rdi+0x10]
  409fd5:	movzx  esi,si
  409fd8:	mov    eax,0x17
  409fdd:	cmp    WORD PTR [rcx+rsi*1],0x0
  409fe2:	jne    409fee <flatcc_verify_union_field@@Base+0x11e>
  409fe4:	test   edx,edx
  409fe6:	mov    eax,0x15
  409feb:	cmove  eax,edx
  409fee:	add    rsp,0x20
  409ff2:	pop    rbx
  409ff3:	pop    r14
  409ff5:	pop    rbp
  409ff6:	ret    
  409ff7:	xor    eax,eax
  409ff9:	test   edx,edx
  409ffb:	setne  al
  409ffe:	shl    eax,0x2
  40a001:	jmp    409fee <flatcc_verify_union_field@@Base+0x11e>
  40a003:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a00d:	nop    DWORD PTR [rax]

000000000040a010 <flatcc_verify_union_vector_field@@Base>:
  40a010:	push   rbp
  40a011:	push   r15
  40a013:	push   r14
  40a015:	push   r13
  40a017:	push   r12
  40a019:	push   rbx
  40a01a:	sub    rsp,0x28
  40a01e:	mov    r12,rcx
  40a021:	lea    ebx,[rsi+rsi*1]
  40a024:	add    ebx,0x2
  40a027:	add    esi,esi
  40a029:	movzx  ecx,WORD PTR [rdi+0x1e]
  40a02d:	cmp    bx,cx
  40a030:	jae    40a042 <flatcc_verify_union_vector_field@@Base+0x32>
  40a032:	mov    r10,QWORD PTR [rdi+0x10]
  40a036:	movzx  r14d,bx
  40a03a:	cmp    WORD PTR [r10+r14*1],0x0
  40a040:	jne    40a077 <flatcc_verify_union_vector_field@@Base+0x67>
  40a042:	lea    eax,[rsi+0x4]
  40a045:	cmp    ax,cx
  40a048:	jae    40a0d5 <flatcc_verify_union_vector_field@@Base+0xc5>
  40a04e:	test   edx,edx
  40a050:	je     40a06a <flatcc_verify_union_vector_field@@Base+0x5a>
  40a052:	mov    r8,QWORD PTR [rdi+0x10]
  40a056:	movzx  ebp,ax
  40a059:	mov    eax,0x16
  40a05e:	cmp    WORD PTR [r8+rbp*1],0x0
  40a064:	je     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a06a:	cmp    bx,cx
  40a06d:	jae    40a0e4 <flatcc_verify_union_vector_field@@Base+0xd4>
  40a06f:	mov    r10,QWORD PTR [rdi+0x10]
  40a073:	movzx  r14d,bx
  40a077:	movzx  ebp,WORD PTR [r10+r14*1]
  40a07c:	test   ebp,ebp
  40a07e:	je     40a0e4 <flatcc_verify_union_vector_field@@Base+0xd4>
  40a080:	lea    ebx,[rbp+0x4]
  40a083:	movzx  eax,WORD PTR [rdi+0x1c]
  40a087:	cmp    ebx,eax
  40a089:	ja     40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a08b:	add    ebp,DWORD PTR [rdi+0x18]
  40a08e:	test   bpl,0x3
  40a092:	jne    40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a094:	test   ebp,ebp
  40a096:	je     40a197 <flatcc_verify_union_vector_field@@Base+0x187>
  40a09c:	mov    r8,QWORD PTR [rdi]
  40a09f:	mov    eax,ebp
  40a0a1:	mov    ebx,DWORD PTR [r8+rax*1]
  40a0a5:	add    ebx,ebp
  40a0a7:	cmp    ebx,ebp
  40a0a9:	jbe    40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a0ab:	mov    r11d,DWORD PTR [rdi+0x8]
  40a0af:	mov    r9d,ebx
  40a0b2:	lea    rbp,[r9+0x4]
  40a0b6:	cmp    rbp,r11
  40a0b9:	ja     40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a0bb:	and    ebp,0x3
  40a0be:	test   rbp,rbp
  40a0c1:	jne    40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a0c3:	sub    r11d,ebx
  40a0c6:	add    r11d,0xfffffffc
  40a0ca:	cmp    r11d,DWORD PTR [r8+r9*1]
  40a0ce:	jb     40a0fd <flatcc_verify_union_vector_field@@Base+0xed>
  40a0d0:	jmp    40a197 <flatcc_verify_union_vector_field@@Base+0x187>
  40a0d5:	mov    eax,0x16
  40a0da:	test   edx,edx
  40a0dc:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a0e2:	jmp    40a06a <flatcc_verify_union_vector_field@@Base+0x5a>
  40a0e4:	test   edx,edx
  40a0e6:	je     40a184 <flatcc_verify_union_vector_field@@Base+0x174>
  40a0ec:	cmp    bx,cx
  40a0ef:	jae    40a2a4 <flatcc_verify_union_vector_field@@Base+0x294>
  40a0f5:	mov    r10,QWORD PTR [rdi+0x10]
  40a0f9:	movzx  r14d,bx
  40a0fd:	movzx  esi,WORD PTR [r10+r14*1]
  40a102:	test   esi,esi
  40a104:	je     40a2a4 <flatcc_verify_union_vector_field@@Base+0x294>
  40a10a:	lea    ecx,[rsi+0x4]
  40a10d:	movzx  edx,WORD PTR [rdi+0x1c]
  40a111:	mov    eax,0xd
  40a116:	cmp    ecx,edx
  40a118:	ja     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a11e:	add    esi,DWORD PTR [rdi+0x18]
  40a121:	mov    eax,0xc
  40a126:	test   sil,0x3
  40a12a:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a130:	test   esi,esi
  40a132:	je     40a2bd <flatcc_verify_union_vector_field@@Base+0x2ad>
  40a138:	mov    rcx,QWORD PTR [rdi]
  40a13b:	mov    eax,esi
  40a13d:	mov    edx,DWORD PTR [rcx+rax*1]
  40a140:	add    edx,esi
  40a142:	mov    eax,0x10
  40a147:	cmp    edx,esi
  40a149:	jbe    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a14f:	mov    esi,DWORD PTR [rdi+0x8]
  40a152:	mov    edi,edx
  40a154:	lea    rbp,[rdi+0x4]
  40a158:	cmp    rbp,rsi
  40a15b:	ja     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a161:	and    ebp,0x3
  40a164:	test   rbp,rbp
  40a167:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a16d:	sub    esi,edx
  40a16f:	add    esi,0xfffffffc
  40a172:	xor    edx,edx
  40a174:	cmp    esi,DWORD PTR [rcx+rdi*1]
  40a177:	mov    eax,0x1a
  40a17c:	cmovae eax,edx
  40a17f:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a184:	xor    eax,eax
  40a186:	cmp    bx,cx
  40a189:	jae    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a18f:	mov    r10,QWORD PTR [rdi+0x10]
  40a193:	movzx  r14d,bx
  40a197:	movzx  ebp,WORD PTR [r10+r14*1]
  40a19c:	xor    eax,eax
  40a19e:	test   rbp,rbp
  40a1a1:	je     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a1a7:	mov    r15,QWORD PTR [rdi]
  40a1aa:	mov    r8d,DWORD PTR [rdi+0x18]
  40a1ae:	lea    r9,[r15+r8*1]
  40a1b2:	add    r9,rbp
  40a1b5:	je     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a1bb:	add    esi,0x4
  40a1be:	cmp    si,cx
  40a1c1:	jae    40a2a4 <flatcc_verify_union_vector_field@@Base+0x294>
  40a1c7:	movzx  eax,si
  40a1ca:	movzx  ecx,WORD PTR [r10+rax*1]
  40a1cf:	test   ecx,ecx
  40a1d1:	je     40a2a4 <flatcc_verify_union_vector_field@@Base+0x294>
  40a1d7:	lea    edx,[rcx+0x4]
  40a1da:	movzx  esi,WORD PTR [rdi+0x1c]
  40a1de:	mov    eax,0xd
  40a1e3:	cmp    edx,esi
  40a1e5:	ja     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a1eb:	lea    ebx,[r8+rcx*1]
  40a1ef:	mov    eax,0xc
  40a1f4:	test   bl,0x3
  40a1f7:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a1fd:	mov    eax,0x0
  40a202:	test   ebx,ebx
  40a204:	je     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a20a:	mov    esi,DWORD PTR [rdi+0xc]
  40a20d:	test   esi,esi
  40a20f:	jle    40a2c1 <flatcc_verify_union_vector_field@@Base+0x2b1>
  40a215:	mov    eax,ebx
  40a217:	mov    edx,DWORD PTR [r15+rax*1]
  40a21b:	lea    ebp,[rdx+rbx*1]
  40a21e:	mov    eax,0x10
  40a223:	cmp    ebp,ebx
  40a225:	jbe    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a22b:	mov    r10d,DWORD PTR [rdi+0x8]
  40a22f:	mov    ebx,ebp
  40a231:	lea    rdi,[rbx+0x4]
  40a235:	cmp    rdi,r10
  40a238:	ja     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a23a:	and    edi,0x3
  40a23d:	test   rdi,rdi
  40a240:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a242:	mov    ebx,DWORD PTR [r15+rbx*1]
  40a246:	mov    eax,0x19
  40a24b:	cmp    ebx,0x3fffffff
  40a251:	ja     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a253:	mov    edi,r10d
  40a256:	sub    edi,ebp
  40a258:	add    edi,0xfffffffc
  40a25b:	lea    ebp,[rbx*4+0x0]
  40a262:	mov    eax,0x1a
  40a267:	cmp    edi,ebp
  40a269:	jb     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a26b:	mov    r13d,DWORD PTR [r9]
  40a26e:	mov    edi,DWORD PTR [r13+r9*1+0x0]
  40a273:	mov    eax,0x22
  40a278:	cmp    ebx,edi
  40a27a:	jne    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a27c:	dec    esi
  40a27e:	mov    QWORD PTR [rsp+0x8],r15
  40a283:	mov    DWORD PTR [rsp+0x10],r10d
  40a288:	mov    DWORD PTR [rsp+0x14],esi
  40a28c:	test   edi,edi
  40a28e:	je     40a2bd <flatcc_verify_union_vector_field@@Base+0x2ad>
  40a290:	mov    rbx,rdi
  40a293:	add    r13,r9
  40a296:	add    edx,r8d
  40a299:	lea    ebp,[rcx+rdx*1]
  40a29c:	add    ebp,0x4
  40a29f:	xor    r14d,r14d
  40a2a2:	jmp    40a2d9 <flatcc_verify_union_vector_field@@Base+0x2c9>
  40a2a4:	xor    eax,eax
  40a2a6:	test   edx,edx
  40a2a8:	setne  al
  40a2ab:	shl    eax,0x2
  40a2ae:	add    rsp,0x28
  40a2b2:	pop    rbx
  40a2b3:	pop    r12
  40a2b5:	pop    r13
  40a2b7:	pop    r14
  40a2b9:	pop    r15
  40a2bb:	pop    rbp
  40a2bc:	ret    
  40a2bd:	xor    eax,eax
  40a2bf:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a2c1:	mov    eax,0x3
  40a2c6:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a2c8:	test   cl,cl
  40a2ca:	jne    40a316 <flatcc_verify_union_vector_field@@Base+0x306>
  40a2cc:	inc    r14
  40a2cf:	add    ebp,0x4
  40a2d2:	xor    eax,eax
  40a2d4:	cmp    rbx,r14
  40a2d7:	je     40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a2d9:	mov    eax,ebp
  40a2db:	mov    eax,DWORD PTR [r15+rax*1]
  40a2df:	movzx  ecx,BYTE PTR [r13+r14*1+0x4]
  40a2e5:	test   eax,eax
  40a2e7:	je     40a2c8 <flatcc_verify_union_vector_field@@Base+0x2b8>
  40a2e9:	test   cl,cl
  40a2eb:	je     40a30f <flatcc_verify_union_vector_field@@Base+0x2ff>
  40a2ed:	mov    BYTE PTR [rsp+0x18],cl
  40a2f1:	mov    DWORD PTR [rsp+0x1c],ebp
  40a2f5:	mov    DWORD PTR [rsp+0x20],eax
  40a2f9:	lea    rdi,[rsp+0x8]
  40a2fe:	call   r12
  40a301:	test   eax,eax
  40a303:	je     40a2cc <flatcc_verify_union_vector_field@@Base+0x2bc>
  40a305:	lea    rdi,[rsp+0x8]
  40a30a:	call   r12
  40a30d:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a30f:	mov    eax,0x21
  40a314:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a316:	mov    eax,0x20
  40a31b:	jmp    40a2ae <flatcc_verify_union_vector_field@@Base+0x29e>
  40a31d:	nop    DWORD PTR [rax]

000000000040a320 <__libc_csu_init@@Base>:
  40a320:	endbr64 
  40a324:	push   r15
  40a326:	lea    r15,[rip+0x598b]        # 40fcb8 <flatcc_builder_padding_base@@Base+0x4ad8>
  40a32d:	push   r14
  40a32f:	mov    r14,rdx
  40a332:	push   r13
  40a334:	mov    r13,rsi
  40a337:	push   r12
  40a339:	mov    r12d,edi
  40a33c:	push   rbp
  40a33d:	lea    rbp,[rip+0x597c]        # 40fcc0 <flatcc_builder_padding_base@@Base+0x4ae0>
  40a344:	push   rbx
  40a345:	sub    rbp,r15
  40a348:	sub    rsp,0x8
  40a34c:	call   403000 <free@plt-0x30>
  40a351:	sar    rbp,0x3
  40a355:	je     40a376 <__libc_csu_init@@Base+0x56>
  40a357:	xor    ebx,ebx
  40a359:	nop    DWORD PTR [rax+0x0]
  40a360:	mov    rdx,r14
  40a363:	mov    rsi,r13
  40a366:	mov    edi,r12d
  40a369:	call   QWORD PTR [r15+rbx*8]
  40a36d:	add    rbx,0x1
  40a371:	cmp    rbp,rbx
  40a374:	jne    40a360 <__libc_csu_init@@Base+0x40>
  40a376:	add    rsp,0x8
  40a37a:	pop    rbx
  40a37b:	pop    rbp
  40a37c:	pop    r12
  40a37e:	pop    r13
  40a380:	pop    r14
  40a382:	pop    r15
  40a384:	ret    
  40a385:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040a390 <__libc_csu_fini@@Base>:
  40a390:	endbr64 
  40a394:	ret    

Disassembly of section .fini:

000000000040a398 <.fini>:
  40a398:	endbr64 
  40a39c:	sub    rsp,0x8
  40a3a0:	add    rsp,0x8
  40a3a4:	ret    
