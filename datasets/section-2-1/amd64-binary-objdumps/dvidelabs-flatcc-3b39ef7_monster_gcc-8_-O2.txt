
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe9]        # 40cff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0xea>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3148>
  403026:	bnd jmp QWORD PTR [rip+0x9fe3]        # 40d010 <flatcc_builder_padding_base@@Base+0x3150>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0xe0>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0xe0>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0xe0>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0xe0>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0xe0>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0xe0>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0xe0>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0xe0>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0xe0>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0xe0>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0xe0>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0xe0>
  4030ef:	nop
  4030f0:	endbr64 
  4030f4:	push   0xc
  4030f9:	bnd jmp 403020 <free@plt-0xe0>
  4030ff:	nop

Disassembly of section .plt.sec:

0000000000403100 <free@plt>:
  403100:	endbr64 
  403104:	bnd jmp QWORD PTR [rip+0x9f0d]        # 40d018 <free@GLIBC_2.2.5>
  40310b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403110 <strlen@plt>:
  403110:	endbr64 
  403114:	bnd jmp QWORD PTR [rip+0x9f05]        # 40d020 <strlen@GLIBC_2.2.5>
  40311b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403120 <__stack_chk_fail@plt>:
  403120:	endbr64 
  403124:	bnd jmp QWORD PTR [rip+0x9efd]        # 40d028 <__stack_chk_fail@GLIBC_2.4>
  40312b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403130 <__assert_fail@plt>:
  403130:	endbr64 
  403134:	bnd jmp QWORD PTR [rip+0x9ef5]        # 40d030 <__assert_fail@GLIBC_2.2.5>
  40313b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403140 <memset@plt>:
  403140:	endbr64 
  403144:	bnd jmp QWORD PTR [rip+0x9eed]        # 40d038 <memset@GLIBC_2.2.5>
  40314b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403150 <memchr@plt>:
  403150:	endbr64 
  403154:	bnd jmp QWORD PTR [rip+0x9ee5]        # 40d040 <memchr@GLIBC_2.2.5>
  40315b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403160 <memcmp@plt>:
  403160:	endbr64 
  403164:	bnd jmp QWORD PTR [rip+0x9edd]        # 40d048 <memcmp@GLIBC_2.2.5>
  40316b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403170 <strcmp@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0x9ed5]        # 40d050 <strcmp@GLIBC_2.2.5>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <memcpy@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0x9ecd]        # 40d058 <memcpy@GLIBC_2.14>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <malloc@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0x9ec5]        # 40d060 <malloc@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <realloc@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0x9ebd]        # 40d068 <realloc@GLIBC_2.2.5>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031b0 <__printf_chk@plt>:
  4031b0:	endbr64 
  4031b4:	bnd jmp QWORD PTR [rip+0x9eb5]        # 40d070 <__printf_chk@GLIBC_2.3.4>
  4031bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031c0 <posix_memalign@plt>:
  4031c0:	endbr64 
  4031c4:	bnd jmp QWORD PTR [rip+0x9ead]        # 40d078 <posix_memalign@GLIBC_2.2.5>
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000004031d0 <main@@Base-0x10>:
  4031d0:	mov    eax,DWORD PTR ds:0x0
  4031d7:	ud2    
  4031d9:	nop    DWORD PTR [rax+0x0]

00000000004031e0 <main@@Base>:
  4031e0:	endbr64 
  4031e4:	push   r12
  4031e6:	push   rbp
  4031e7:	push   rbx
  4031e8:	sub    rsp,0x1a0
  4031ef:	lea    rbx,[rsp+0x10]
  4031f4:	mov    rdi,rbx
  4031f7:	mov    rax,QWORD PTR fs:0x28
  403200:	mov    QWORD PTR [rsp+0x198],rax
  403208:	xor    eax,eax
  40320a:	call   404a70 <flatcc_builder_init@@Base>
  40320f:	xor    esi,esi
  403211:	mov    rdi,rbx
  403214:	call   4034d0 <create_monster_bottom_up@@Base>
  403219:	test   eax,eax
  40321b:	jne    4032e2 <main@@Base+0x102>
  403221:	lea    rbp,[rsp+0x8]
  403226:	mov    rsi,rbp
  403229:	mov    rdi,rbx
  40322c:	call   408120 <flatcc_builder_finalize_aligned_buffer@@Base>
  403231:	mov    rdi,rax
  403234:	call   408280 <flatcc_builder_aligned_free@@Base>
  403239:	mov    rdi,rbx
  40323c:	call   404c20 <flatcc_builder_reset@@Base>
  403241:	mov    esi,0x1
  403246:	mov    rdi,rbx
  403249:	call   4034d0 <create_monster_bottom_up@@Base>
  40324e:	test   eax,eax
  403250:	jne    403325 <main@@Base+0x145>
  403256:	mov    rsi,rbp
  403259:	mov    rdi,rbx
  40325c:	call   408120 <flatcc_builder_finalize_aligned_buffer@@Base>
  403261:	mov    r12,rax
  403264:	mov    rdi,rax
  403267:	call   403cf0 <access_monster_buffer@@Base>
  40326c:	mov    rdi,r12
  40326f:	call   408280 <flatcc_builder_aligned_free@@Base>
  403274:	mov    rdi,rbx
  403277:	call   404c20 <flatcc_builder_reset@@Base>
  40327c:	mov    rdi,rbx
  40327f:	call   4039c0 <create_monster_top_down@@Base>
  403284:	mov    rsi,rbp
  403287:	mov    rdi,rbx
  40328a:	call   408090 <flatcc_builder_finalize_buffer@@Base>
  40328f:	mov    rdi,rax
  403292:	mov    rbp,rax
  403295:	call   403cf0 <access_monster_buffer@@Base>
  40329a:	test   eax,eax
  40329c:	jne    403306 <main@@Base+0x126>
  40329e:	mov    rdi,rbp
  4032a1:	call   403100 <free@plt>
  4032a6:	mov    rdi,rbx
  4032a9:	call   404c30 <flatcc_builder_clear@@Base>
  4032ae:	xor    eax,eax
  4032b0:	lea    rsi,[rip+0x6011]        # 4092c8 <_IO_stdin_used@@Base+0x2c8>
  4032b7:	mov    edi,0x1
  4032bc:	call   4031b0 <__printf_chk@plt>
  4032c1:	xor    eax,eax
  4032c3:	mov    rdx,QWORD PTR [rsp+0x198]
  4032cb:	xor    rdx,QWORD PTR fs:0x28
  4032d4:	jne    403301 <main@@Base+0x121>
  4032d6:	add    rsp,0x1a0
  4032dd:	pop    rbx
  4032de:	pop    rbp
  4032df:	pop    r12
  4032e1:	ret    
  4032e2:	lea    rcx,[rip+0x6027]        # 409310 <_IO_stdin_used@@Base+0x310>
  4032e9:	mov    edx,0x134
  4032ee:	lea    rsi,[rip+0x5f6b]        # 409260 <_IO_stdin_used@@Base+0x260>
  4032f5:	lea    rdi,[rip+0x646b]        # 409767 <_IO_stdin_used@@Base+0x767>
  4032fc:	call   403130 <__assert_fail@plt>
  403301:	call   403120 <__stack_chk_fail@plt>
  403306:	lea    rcx,[rip+0x6003]        # 409310 <_IO_stdin_used@@Base+0x310>
  40330d:	mov    edx,0x156
  403312:	lea    rsi,[rip+0x5f47]        # 409260 <_IO_stdin_used@@Base+0x260>
  403319:	lea    rdi,[rip+0x6447]        # 409767 <_IO_stdin_used@@Base+0x767>
  403320:	call   403130 <__assert_fail@plt>
  403325:	lea    rcx,[rip+0x5fe4]        # 409310 <_IO_stdin_used@@Base+0x310>
  40332c:	mov    edx,0x14f
  403331:	lea    rsi,[rip+0x5f28]        # 409260 <_IO_stdin_used@@Base+0x260>
  403338:	lea    rdi,[rip+0x6428]        # 409767 <_IO_stdin_used@@Base+0x767>
  40333f:	call   403130 <__assert_fail@plt>
  403344:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40334e:	xchg   ax,ax

0000000000403350 <_start@@Base>:
  403350:	endbr64 
  403354:	xor    ebp,ebp
  403356:	mov    r9,rdx
  403359:	pop    rsi
  40335a:	mov    rdx,rsp
  40335d:	and    rsp,0xfffffffffffffff0
  403361:	push   rax
  403362:	push   rsp
  403363:	mov    r8,0x4089f0
  40336a:	mov    rcx,0x408980
  403371:	mov    rdi,0x4031e0
  403378:	call   QWORD PTR [rip+0x9c72]        # 40cff0 <__libc_start_main@GLIBC_2.2.5>
  40337e:	hlt    
  40337f:	nop
  403380:	endbr64 
  403384:	ret    
  403385:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40338f:	nop
  403390:	mov    eax,0x40d090
  403395:	cmp    rax,0x40d090
  40339b:	je     4033b0 <_start@@Base+0x60>
  40339d:	mov    eax,0x0
  4033a2:	test   rax,rax
  4033a5:	je     4033b0 <_start@@Base+0x60>
  4033a7:	mov    edi,0x40d090
  4033ac:	jmp    rax
  4033ae:	xchg   ax,ax
  4033b0:	ret    
  4033b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033bc:	nop    DWORD PTR [rax+0x0]
  4033c0:	mov    esi,0x40d090
  4033c5:	sub    rsi,0x40d090
  4033cc:	sar    rsi,0x3
  4033d0:	mov    rax,rsi
  4033d3:	shr    rax,0x3f
  4033d7:	add    rsi,rax
  4033da:	sar    rsi,1
  4033dd:	je     4033f0 <_start@@Base+0xa0>
  4033df:	mov    eax,0x0
  4033e4:	test   rax,rax
  4033e7:	je     4033f0 <_start@@Base+0xa0>
  4033e9:	mov    edi,0x40d090
  4033ee:	jmp    rax
  4033f0:	ret    
  4033f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033fc:	nop    DWORD PTR [rax+0x0]
  403400:	endbr64 
  403404:	cmp    BYTE PTR [rip+0x9c85],0x0        # 40d090 <__bss_start@@Base>
  40340b:	jne    403420 <_start@@Base+0xd0>
  40340d:	push   rbp
  40340e:	mov    rbp,rsp
  403411:	call   403390 <_start@@Base+0x40>
  403416:	mov    BYTE PTR [rip+0x9c73],0x1        # 40d090 <__bss_start@@Base>
  40341d:	pop    rbp
  40341e:	ret    
  40341f:	nop
  403420:	ret    
  403421:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40342c:	nop    DWORD PTR [rax+0x0]
  403430:	endbr64 
  403434:	jmp    4033c0 <_start@@Base+0x70>
  403436:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403440:	push   rax
  403441:	pop    rax
  403442:	lea    rcx,[rip+0x5ef7]        # 409340 <_IO_stdin_used@@Base+0x340>
  403449:	mov    edx,0x94
  40344e:	lea    rsi,[rip+0x5bb3]        # 409008 <_IO_stdin_used@@Base+0x8>
  403455:	lea    rdi,[rip+0x5c24]        # 409080 <_IO_stdin_used@@Base+0x80>
  40345c:	sub    rsp,0x8
  403460:	call   403130 <__assert_fail@plt>
  403465:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403470:	push   rax
  403471:	pop    rax
  403472:	lea    rcx,[rip+0x5ea7]        # 409320 <_IO_stdin_used@@Base+0x320>
  403479:	mov    edx,0x95
  40347e:	lea    rsi,[rip+0x5b83]        # 409008 <_IO_stdin_used@@Base+0x8>
  403485:	lea    rdi,[rip+0x5bf4]        # 409080 <_IO_stdin_used@@Base+0x80>
  40348c:	sub    rsp,0x8
  403490:	call   403130 <__assert_fail@plt>
  403495:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4034a0:	push   rax
  4034a1:	pop    rax
  4034a2:	lea    rcx,[rip+0x5ed7]        # 409380 <_IO_stdin_used@@Base+0x380>
  4034a9:	mov    edx,0x32
  4034ae:	lea    rsi,[rip+0x5bf3]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  4034b5:	lea    rdi,[rip+0x5c64]        # 409120 <_IO_stdin_used@@Base+0x120>
  4034bc:	sub    rsp,0x8
  4034c0:	call   403130 <__assert_fail@plt>
  4034c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004034d0 <create_monster_bottom_up@@Base>:
  4034d0:	endbr64 
  4034d4:	push   r15
  4034d6:	push   r14
  4034d8:	push   r13
  4034da:	mov    r13d,esi
  4034dd:	lea    rsi,[rip+0x5e1b]        # 4092ff <_IO_stdin_used@@Base+0x2ff>
  4034e4:	push   r12
  4034e6:	push   rbp
  4034e7:	push   rbx
  4034e8:	mov    rbx,rdi
  4034eb:	sub    rsp,0x28
  4034ef:	mov    rax,QWORD PTR fs:0x28
  4034f8:	mov    QWORD PTR [rsp+0x18],rax
  4034fd:	xor    eax,eax
  4034ff:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403504:	lea    rsi,[rip+0x5dfa]        # 409305 <_IO_stdin_used@@Base+0x305>
  40350b:	mov    rdi,rbx
  40350e:	mov    r12d,eax
  403511:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403516:	mov    esi,0x2
  40351b:	mov    rdi,rbx
  40351e:	mov    ebp,eax
  403520:	call   4060c0 <flatcc_builder_start_table@@Base>
  403525:	test   eax,eax
  403527:	jne    403840 <create_monster_bottom_up@@Base+0x370>
  40352d:	test   r12d,r12d
  403530:	je     403840 <create_monster_bottom_up@@Base+0x370>
  403536:	xor    esi,esi
  403538:	mov    rdi,rbx
  40353b:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403540:	test   rax,rax
  403543:	je     403840 <create_monster_bottom_up@@Base+0x370>
  403549:	mov    DWORD PTR [rax],r12d
  40354c:	mov    ecx,0x2
  403551:	mov    edx,0x2
  403556:	mov    esi,0x1
  40355b:	mov    rdi,rbx
  40355e:	call   407940 <flatcc_builder_table_add@@Base>
  403563:	test   rax,rax
  403566:	je     403840 <create_monster_bottom_up@@Base+0x370>
  40356c:	mov    r8d,0x3
  403572:	mov    WORD PTR [rax],r8w
  403576:	xor    edx,edx
  403578:	lea    rsi,[rip+0x5e3b]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  40357f:	mov    rdi,rbx
  403582:	call   4069b0 <flatcc_builder_check_required@@Base>
  403587:	test   eax,eax
  403589:	je     403992 <create_monster_bottom_up@@Base+0x4c2>
  40358f:	mov    rdi,rbx
  403592:	call   406a40 <flatcc_builder_end_table@@Base>
  403597:	mov    r12d,eax
  40359a:	mov    esi,0x2
  40359f:	mov    rdi,rbx
  4035a2:	call   4060c0 <flatcc_builder_start_table@@Base>
  4035a7:	test   eax,eax
  4035a9:	jne    403850 <create_monster_bottom_up@@Base+0x380>
  4035af:	test   ebp,ebp
  4035b1:	je     403850 <create_monster_bottom_up@@Base+0x380>
  4035b7:	xor    esi,esi
  4035b9:	mov    rdi,rbx
  4035bc:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  4035c1:	test   rax,rax
  4035c4:	je     403850 <create_monster_bottom_up@@Base+0x380>
  4035ca:	mov    DWORD PTR [rax],ebp
  4035cc:	mov    ecx,0x2
  4035d1:	mov    edx,0x2
  4035d6:	mov    esi,0x1
  4035db:	mov    rdi,rbx
  4035de:	call   407940 <flatcc_builder_table_add@@Base>
  4035e3:	test   rax,rax
  4035e6:	je     403850 <create_monster_bottom_up@@Base+0x380>
  4035ec:	mov    edi,0x5
  4035f1:	mov    WORD PTR [rax],di
  4035f4:	xor    edx,edx
  4035f6:	lea    rsi,[rip+0x5dbd]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  4035fd:	mov    rdi,rbx
  403600:	call   4069b0 <flatcc_builder_check_required@@Base>
  403605:	test   eax,eax
  403607:	je     403992 <create_monster_bottom_up@@Base+0x4c2>
  40360d:	mov    rdi,rbx
  403610:	call   406a40 <flatcc_builder_end_table@@Base>
  403615:	mov    ebp,eax
  403617:	lea    rsi,[rip+0x5ceb]        # 409309 <_IO_stdin_used@@Base+0x309>
  40361e:	mov    rdi,rbx
  403621:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403626:	mov    esi,0x908
  40362b:	mov    WORD PTR [rsp+0x16],si
  403630:	mov    rdi,rbx
  403633:	mov    r14d,eax
  403636:	lea    rsi,[rsp+0xe]
  40363b:	movabs rax,0x706050403020100
  403645:	mov    r9d,0xffffffff
  40364b:	mov    r8d,0x1
  403651:	mov    ecx,0x1
  403656:	mov    edx,0xa
  40365b:	mov    QWORD PTR [rsp+0xe],rax
  403660:	call   406bd0 <flatcc_builder_create_vector@@Base>
  403665:	mov    rdi,rbx
  403668:	mov    r15d,eax
  40366b:	call   405f20 <flatcc_builder_start_offset_vector@@Base>
  403670:	test   r12d,r12d
  403673:	je     403680 <create_monster_bottom_up@@Base+0x1b0>
  403675:	mov    esi,r12d
  403678:	mov    rdi,rbx
  40367b:	call   405a30 <flatcc_builder_offset_vector_push@@Base>
  403680:	test   ebp,ebp
  403682:	je     40368e <create_monster_bottom_up@@Base+0x1be>
  403684:	mov    esi,ebp
  403686:	mov    rdi,rbx
  403689:	call   405a30 <flatcc_builder_offset_vector_push@@Base>
  40368e:	mov    rdi,rbx
  403691:	call   406e80 <flatcc_builder_end_offset_vector@@Base>
  403696:	mov    r12d,eax
  403699:	xor    ecx,ecx
  40369b:	xor    edx,edx
  40369d:	xor    esi,esi
  40369f:	mov    rdi,rbx
  4036a2:	test   r13d,r13d
  4036a5:	je     403810 <create_monster_bottom_up@@Base+0x340>
  4036ab:	call   405420 <flatcc_builder_start_buffer@@Base>
  4036b0:	test   eax,eax
  4036b2:	jne    4036c1 <create_monster_bottom_up@@Base+0x1f1>
  4036b4:	mov    esi,0xa
  4036b9:	mov    rdi,rbx
  4036bc:	call   4060c0 <flatcc_builder_start_table@@Base>
  4036c1:	xor    esi,esi
  4036c3:	mov    ecx,0x4
  4036c8:	mov    edx,0xc
  4036cd:	mov    rdi,rbx
  4036d0:	call   407940 <flatcc_builder_table_add@@Base>
  4036d5:	test   rax,rax
  4036d8:	je     4036ee <create_monster_bottom_up@@Base+0x21e>
  4036da:	movabs rcx,0x400000003f800000
  4036e4:	mov    QWORD PTR [rax],rcx
  4036e7:	mov    DWORD PTR [rax+0x8],0x40400000
  4036ee:	mov    ecx,0x2
  4036f3:	mov    edx,0x2
  4036f8:	mov    esi,0x2
  4036fd:	mov    rdi,rbx
  403700:	call   407940 <flatcc_builder_table_add@@Base>
  403705:	test   rax,rax
  403708:	je     403712 <create_monster_bottom_up@@Base+0x242>
  40370a:	mov    edx,0x12c
  40370f:	mov    WORD PTR [rax],dx
  403712:	test   r14d,r14d
  403715:	je     40372c <create_monster_bottom_up@@Base+0x25c>
  403717:	mov    esi,0x3
  40371c:	mov    rdi,rbx
  40371f:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403724:	test   rax,rax
  403727:	je     40372c <create_monster_bottom_up@@Base+0x25c>
  403729:	mov    DWORD PTR [rax],r14d
  40372c:	test   r15d,r15d
  40372f:	je     403746 <create_monster_bottom_up@@Base+0x276>
  403731:	mov    esi,0x5
  403736:	mov    rdi,rbx
  403739:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  40373e:	test   rax,rax
  403741:	je     403746 <create_monster_bottom_up@@Base+0x276>
  403743:	mov    DWORD PTR [rax],r15d
  403746:	mov    ecx,0x1
  40374b:	mov    edx,0x1
  403750:	mov    esi,0x6
  403755:	mov    rdi,rbx
  403758:	call   407940 <flatcc_builder_table_add@@Base>
  40375d:	test   rax,rax
  403760:	je     403765 <create_monster_bottom_up@@Base+0x295>
  403762:	mov    BYTE PTR [rax],0x0
  403765:	test   r12d,r12d
  403768:	je     40377f <create_monster_bottom_up@@Base+0x2af>
  40376a:	mov    esi,0x7
  40376f:	mov    rdi,rbx
  403772:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403777:	test   rax,rax
  40377a:	je     40377f <create_monster_bottom_up@@Base+0x2af>
  40377c:	mov    DWORD PTR [rax],r12d
  40377f:	test   ebp,ebp
  403781:	je     4037bb <create_monster_bottom_up@@Base+0x2eb>
  403783:	mov    ecx,0x1
  403788:	mov    edx,0x1
  40378d:	mov    esi,0x8
  403792:	mov    rdi,rbx
  403795:	call   407940 <flatcc_builder_table_add@@Base>
  40379a:	mov    r12,rax
  40379d:	test   rax,rax
  4037a0:	je     4037bb <create_monster_bottom_up@@Base+0x2eb>
  4037a2:	mov    esi,0x9
  4037a7:	mov    rdi,rbx
  4037aa:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  4037af:	test   rax,rax
  4037b2:	je     4037bb <create_monster_bottom_up@@Base+0x2eb>
  4037b4:	mov    BYTE PTR [r12],0x1
  4037b9:	mov    DWORD PTR [rax],ebp
  4037bb:	xor    edx,edx
  4037bd:	lea    rsi,[rip+0x5bf8]        # 4093bc <_IO_stdin_used@@Base+0x3bc>
  4037c4:	mov    rdi,rbx
  4037c7:	call   4069b0 <flatcc_builder_check_required@@Base>
  4037cc:	test   eax,eax
  4037ce:	je     4039b6 <create_monster_bottom_up@@Base+0x4e6>
  4037d4:	mov    rdi,rbx
  4037d7:	call   406a40 <flatcc_builder_end_table@@Base>
  4037dc:	mov    esi,eax
  4037de:	mov    rdi,rbx
  4037e1:	call   405500 <flatcc_builder_end_buffer@@Base>
  4037e6:	xor    eax,eax
  4037e8:	mov    rcx,QWORD PTR [rsp+0x18]
  4037ed:	xor    rcx,QWORD PTR fs:0x28
  4037f6:	jne    4039b1 <create_monster_bottom_up@@Base+0x4e1>
  4037fc:	add    rsp,0x28
  403800:	pop    rbx
  403801:	pop    rbp
  403802:	pop    r12
  403804:	pop    r13
  403806:	pop    r14
  403808:	pop    r15
  40380a:	ret    
  40380b:	nop    DWORD PTR [rax+rax*1+0x0]
  403810:	call   405420 <flatcc_builder_start_buffer@@Base>
  403815:	mov    r13d,eax
  403818:	test   eax,eax
  40381a:	jne    4037e6 <create_monster_bottom_up@@Base+0x316>
  40381c:	mov    esi,0xa
  403821:	mov    rdi,rbx
  403824:	call   4060c0 <flatcc_builder_start_table@@Base>
  403829:	test   eax,eax
  40382b:	je     403860 <create_monster_bottom_up@@Base+0x390>
  40382d:	mov    esi,r13d
  403830:	mov    rdi,rbx
  403833:	call   405500 <flatcc_builder_end_buffer@@Base>
  403838:	jmp    4037e6 <create_monster_bottom_up@@Base+0x316>
  40383a:	nop    WORD PTR [rax+rax*1+0x0]
  403840:	xor    r12d,r12d
  403843:	jmp    40359a <create_monster_bottom_up@@Base+0xca>
  403848:	nop    DWORD PTR [rax+rax*1+0x0]
  403850:	xor    ebp,ebp
  403852:	jmp    403617 <create_monster_bottom_up@@Base+0x147>
  403857:	nop    WORD PTR [rax+rax*1+0x0]
  403860:	xor    esi,esi
  403862:	mov    ecx,0x4
  403867:	mov    edx,0xc
  40386c:	mov    rdi,rbx
  40386f:	call   407940 <flatcc_builder_table_add@@Base>
  403874:	test   rax,rax
  403877:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  403879:	movabs rdx,0x400000003f800000
  403883:	mov    QWORD PTR [rax],rdx
  403886:	mov    DWORD PTR [rax+0x8],0x40400000
  40388d:	test   r14d,r14d
  403890:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  403892:	mov    esi,0x3
  403897:	mov    rdi,rbx
  40389a:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  40389f:	test   rax,rax
  4038a2:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038a4:	mov    DWORD PTR [rax],r14d
  4038a7:	test   r15d,r15d
  4038aa:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038ac:	mov    esi,0x5
  4038b1:	mov    rdi,rbx
  4038b4:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  4038b9:	test   rax,rax
  4038bc:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038c2:	mov    DWORD PTR [rax],r15d
  4038c5:	test   r12d,r12d
  4038c8:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038ce:	mov    esi,0x7
  4038d3:	mov    rdi,rbx
  4038d6:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  4038db:	test   rax,rax
  4038de:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038e4:	mov    DWORD PTR [rax],r12d
  4038e7:	mov    esi,0x9
  4038ec:	mov    rdi,rbx
  4038ef:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  4038f4:	test   rax,rax
  4038f7:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  4038fd:	mov    DWORD PTR [rax],ebp
  4038ff:	mov    ecx,0x2
  403904:	mov    edx,0x2
  403909:	mov    esi,0x2
  40390e:	mov    rdi,rbx
  403911:	call   407940 <flatcc_builder_table_add@@Base>
  403916:	test   rax,rax
  403919:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  40391f:	mov    ecx,0x12c
  403924:	mov    WORD PTR [rax],cx
  403927:	mov    edx,0x1
  40392c:	mov    ecx,0x1
  403931:	mov    esi,0x6
  403936:	mov    rdi,rbx
  403939:	call   407940 <flatcc_builder_table_add@@Base>
  40393e:	test   rax,rax
  403941:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  403947:	mov    BYTE PTR [rax],0x0
  40394a:	mov    ecx,0x1
  40394f:	mov    edx,0x1
  403954:	mov    esi,0x8
  403959:	mov    rdi,rbx
  40395c:	call   407940 <flatcc_builder_table_add@@Base>
  403961:	test   rax,rax
  403964:	je     40382d <create_monster_bottom_up@@Base+0x35d>
  40396a:	mov    BYTE PTR [rax],0x1
  40396d:	xor    edx,edx
  40396f:	lea    rsi,[rip+0x5a46]        # 4093bc <_IO_stdin_used@@Base+0x3bc>
  403976:	mov    rdi,rbx
  403979:	call   4069b0 <flatcc_builder_check_required@@Base>
  40397e:	test   eax,eax
  403980:	je     4039b6 <create_monster_bottom_up@@Base+0x4e6>
  403982:	mov    rdi,rbx
  403985:	call   406a40 <flatcc_builder_end_table@@Base>
  40398a:	mov    r13d,eax
  40398d:	jmp    40382d <create_monster_bottom_up@@Base+0x35d>
  403992:	lea    rcx,[rip+0x5a07]        # 4093a0 <_IO_stdin_used@@Base+0x3a0>
  403999:	mov    edx,0x34
  40399e:	lea    rsi,[rip+0x5703]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  4039a5:	lea    rdi,[rip+0x5814]        # 4091c0 <_IO_stdin_used@@Base+0x1c0>
  4039ac:	call   403130 <__assert_fail@plt>
  4039b1:	call   403120 <__stack_chk_fail@plt>
  4039b6:	call   4034a0 <_start@@Base+0x150>
  4039bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004039c0 <create_monster_top_down@@Base>:
  4039c0:	endbr64 
  4039c4:	push   r12
  4039c6:	mov    r8d,0x908
  4039cc:	xor    ecx,ecx
  4039ce:	push   rbp
  4039cf:	xor    edx,edx
  4039d1:	xor    esi,esi
  4039d3:	push   rbx
  4039d4:	mov    rbx,rdi
  4039d7:	sub    rsp,0x20
  4039db:	mov    rax,QWORD PTR fs:0x28
  4039e4:	mov    QWORD PTR [rsp+0x18],rax
  4039e9:	xor    eax,eax
  4039eb:	movabs rax,0x706050403020100
  4039f5:	mov    QWORD PTR [rsp+0xe],rax
  4039fa:	mov    WORD PTR [rsp+0x16],r8w
  403a00:	call   405420 <flatcc_builder_start_buffer@@Base>
  403a05:	test   eax,eax
  403a07:	jne    403a16 <create_monster_top_down@@Base+0x56>
  403a09:	mov    esi,0xa
  403a0e:	mov    rdi,rbx
  403a11:	call   4060c0 <flatcc_builder_start_table@@Base>
  403a16:	xor    esi,esi
  403a18:	mov    ecx,0x4
  403a1d:	mov    edx,0xc
  403a22:	mov    rdi,rbx
  403a25:	call   407940 <flatcc_builder_table_add@@Base>
  403a2a:	test   rax,rax
  403a2d:	je     403a43 <create_monster_top_down@@Base+0x83>
  403a2f:	movabs rcx,0x400000003f800000
  403a39:	mov    QWORD PTR [rax],rcx
  403a3c:	mov    DWORD PTR [rax+0x8],0x40400000
  403a43:	mov    ecx,0x2
  403a48:	mov    edx,0x2
  403a4d:	mov    esi,0x2
  403a52:	mov    rdi,rbx
  403a55:	call   407940 <flatcc_builder_table_add@@Base>
  403a5a:	test   rax,rax
  403a5d:	je     403a67 <create_monster_top_down@@Base+0xa7>
  403a5f:	mov    esi,0x12c
  403a64:	mov    WORD PTR [rax],si
  403a67:	lea    rsi,[rip+0x589b]        # 409309 <_IO_stdin_used@@Base+0x309>
  403a6e:	mov    rdi,rbx
  403a71:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403a76:	mov    ebp,eax
  403a78:	test   eax,eax
  403a7a:	je     403a90 <create_monster_top_down@@Base+0xd0>
  403a7c:	mov    esi,0x3
  403a81:	mov    rdi,rbx
  403a84:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403a89:	test   rax,rax
  403a8c:	je     403a90 <create_monster_top_down@@Base+0xd0>
  403a8e:	mov    DWORD PTR [rax],ebp
  403a90:	lea    rsi,[rsp+0xe]
  403a95:	mov    r9d,0xffffffff
  403a9b:	mov    r8d,0x1
  403aa1:	mov    ecx,0x1
  403aa6:	mov    edx,0xa
  403aab:	mov    rdi,rbx
  403aae:	call   406bd0 <flatcc_builder_create_vector@@Base>
  403ab3:	mov    ebp,eax
  403ab5:	test   eax,eax
  403ab7:	je     403acd <create_monster_top_down@@Base+0x10d>
  403ab9:	mov    esi,0x5
  403abe:	mov    rdi,rbx
  403ac1:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403ac6:	test   rax,rax
  403ac9:	je     403acd <create_monster_top_down@@Base+0x10d>
  403acb:	mov    DWORD PTR [rax],ebp
  403acd:	mov    ecx,0x1
  403ad2:	mov    edx,0x1
  403ad7:	mov    esi,0x6
  403adc:	mov    rdi,rbx
  403adf:	call   407940 <flatcc_builder_table_add@@Base>
  403ae4:	test   rax,rax
  403ae7:	je     403aec <create_monster_top_down@@Base+0x12c>
  403ae9:	mov    BYTE PTR [rax],0x0
  403aec:	mov    rdi,rbx
  403aef:	call   405f20 <flatcc_builder_start_offset_vector@@Base>
  403af4:	lea    rsi,[rip+0x5804]        # 4092ff <_IO_stdin_used@@Base+0x2ff>
  403afb:	mov    rdi,rbx
  403afe:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403b03:	mov    ebp,eax
  403b05:	mov    esi,0x2
  403b0a:	mov    rdi,rbx
  403b0d:	call   4060c0 <flatcc_builder_start_table@@Base>
  403b12:	test   ebp,ebp
  403b14:	je     403b7e <create_monster_top_down@@Base+0x1be>
  403b16:	test   eax,eax
  403b18:	jne    403b7e <create_monster_top_down@@Base+0x1be>
  403b1a:	xor    esi,esi
  403b1c:	mov    rdi,rbx
  403b1f:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403b24:	test   rax,rax
  403b27:	je     403b7e <create_monster_top_down@@Base+0x1be>
  403b29:	mov    DWORD PTR [rax],ebp
  403b2b:	mov    ecx,0x2
  403b30:	mov    edx,0x2
  403b35:	mov    esi,0x1
  403b3a:	mov    rdi,rbx
  403b3d:	call   407940 <flatcc_builder_table_add@@Base>
  403b42:	test   rax,rax
  403b45:	je     403b7e <create_monster_top_down@@Base+0x1be>
  403b47:	mov    ecx,0x3
  403b4c:	mov    WORD PTR [rax],cx
  403b4f:	xor    edx,edx
  403b51:	lea    rsi,[rip+0x5862]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  403b58:	mov    rdi,rbx
  403b5b:	call   4069b0 <flatcc_builder_check_required@@Base>
  403b60:	test   eax,eax
  403b62:	je     403cc0 <create_monster_top_down@@Base+0x300>
  403b68:	mov    rdi,rbx
  403b6b:	call   406a40 <flatcc_builder_end_table@@Base>
  403b70:	test   eax,eax
  403b72:	je     403b7e <create_monster_top_down@@Base+0x1be>
  403b74:	mov    esi,eax
  403b76:	mov    rdi,rbx
  403b79:	call   405a30 <flatcc_builder_offset_vector_push@@Base>
  403b7e:	lea    rsi,[rip+0x5780]        # 409305 <_IO_stdin_used@@Base+0x305>
  403b85:	mov    rdi,rbx
  403b88:	call   4077b0 <flatcc_builder_create_string_str@@Base>
  403b8d:	mov    ebp,eax
  403b8f:	mov    esi,0x2
  403b94:	mov    rdi,rbx
  403b97:	call   4060c0 <flatcc_builder_start_table@@Base>
  403b9c:	test   ebp,ebp
  403b9e:	je     4031d0 <posix_memalign@plt+0x10>
  403ba4:	test   eax,eax
  403ba6:	jne    4031d0 <posix_memalign@plt+0x10>
  403bac:	xor    esi,esi
  403bae:	mov    rdi,rbx
  403bb1:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403bb6:	test   rax,rax
  403bb9:	je     4031d0 <posix_memalign@plt+0x10>
  403bbf:	mov    DWORD PTR [rax],ebp
  403bc1:	mov    ecx,0x2
  403bc6:	mov    edx,0x2
  403bcb:	mov    esi,0x1
  403bd0:	mov    rdi,rbx
  403bd3:	call   407940 <flatcc_builder_table_add@@Base>
  403bd8:	test   rax,rax
  403bdb:	je     4031d0 <posix_memalign@plt+0x10>
  403be1:	mov    edx,0x5
  403be6:	mov    WORD PTR [rax],dx
  403be9:	lea    rsi,[rip+0x57ca]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  403bf0:	xor    edx,edx
  403bf2:	mov    rdi,rbx
  403bf5:	call   4069b0 <flatcc_builder_check_required@@Base>
  403bfa:	test   eax,eax
  403bfc:	je     403cc0 <create_monster_top_down@@Base+0x300>
  403c02:	mov    rdi,rbx
  403c05:	call   406a40 <flatcc_builder_end_table@@Base>
  403c0a:	test   eax,eax
  403c0c:	je     4031d0 <posix_memalign@plt+0x10>
  403c12:	mov    esi,eax
  403c14:	mov    rdi,rbx
  403c17:	call   405a30 <flatcc_builder_offset_vector_push@@Base>
  403c1c:	mov    rdi,rbx
  403c1f:	mov    ebp,DWORD PTR [rax]
  403c21:	call   406e80 <flatcc_builder_end_offset_vector@@Base>
  403c26:	mov    r12d,eax
  403c29:	test   eax,eax
  403c2b:	je     403c42 <create_monster_top_down@@Base+0x282>
  403c2d:	mov    esi,0x7
  403c32:	mov    rdi,rbx
  403c35:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403c3a:	test   rax,rax
  403c3d:	je     403c42 <create_monster_top_down@@Base+0x282>
  403c3f:	mov    DWORD PTR [rax],r12d
  403c42:	test   ebp,ebp
  403c44:	je     403c7e <create_monster_top_down@@Base+0x2be>
  403c46:	mov    ecx,0x1
  403c4b:	mov    edx,0x1
  403c50:	mov    esi,0x8
  403c55:	mov    rdi,rbx
  403c58:	call   407940 <flatcc_builder_table_add@@Base>
  403c5d:	mov    r12,rax
  403c60:	test   rax,rax
  403c63:	je     403c7e <create_monster_top_down@@Base+0x2be>
  403c65:	mov    esi,0x9
  403c6a:	mov    rdi,rbx
  403c6d:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  403c72:	test   rax,rax
  403c75:	je     403c7e <create_monster_top_down@@Base+0x2be>
  403c77:	mov    BYTE PTR [r12],0x1
  403c7c:	mov    DWORD PTR [rax],ebp
  403c7e:	xor    edx,edx
  403c80:	lea    rsi,[rip+0x5735]        # 4093bc <_IO_stdin_used@@Base+0x3bc>
  403c87:	mov    rdi,rbx
  403c8a:	call   4069b0 <flatcc_builder_check_required@@Base>
  403c8f:	test   eax,eax
  403c91:	je     403ce4 <create_monster_top_down@@Base+0x324>
  403c93:	mov    rdi,rbx
  403c96:	call   406a40 <flatcc_builder_end_table@@Base>
  403c9b:	mov    esi,eax
  403c9d:	mov    rdi,rbx
  403ca0:	call   405500 <flatcc_builder_end_buffer@@Base>
  403ca5:	xor    eax,eax
  403ca7:	mov    rcx,QWORD PTR [rsp+0x18]
  403cac:	xor    rcx,QWORD PTR fs:0x28
  403cb5:	jne    403cdf <create_monster_top_down@@Base+0x31f>
  403cb7:	add    rsp,0x20
  403cbb:	pop    rbx
  403cbc:	pop    rbp
  403cbd:	pop    r12
  403cbf:	ret    
  403cc0:	lea    rcx,[rip+0x56d9]        # 4093a0 <_IO_stdin_used@@Base+0x3a0>
  403cc7:	mov    edx,0x34
  403ccc:	lea    rsi,[rip+0x53d5]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  403cd3:	lea    rdi,[rip+0x54e6]        # 4091c0 <_IO_stdin_used@@Base+0x1c0>
  403cda:	call   403130 <__assert_fail@plt>
  403cdf:	call   403120 <__stack_chk_fail@plt>
  403ce4:	call   4034a0 <_start@@Base+0x150>
  403ce9:	nop    DWORD PTR [rax+0x0]

0000000000403cf0 <access_monster_buffer@@Base>:
  403cf0:	endbr64 
  403cf4:	sub    rsp,0x8
  403cf8:	test   rdi,rdi
  403cfb:	je     403de8 <access_monster_buffer@@Base+0xf8>
  403d01:	mov    r8d,DWORD PTR [rdi]
  403d04:	add    r8,rdi
  403d07:	je     403de8 <access_monster_buffer@@Base+0xf8>
  403d0d:	movsxd rax,DWORD PTR [r8]
  403d10:	mov    rdx,r8
  403d13:	sub    rdx,rax
  403d16:	mov    rax,rdx
  403d19:	movzx  edx,WORD PTR [rdx]
  403d1c:	cmp    dx,0x9
  403d20:	jbe    404050 <access_monster_buffer@@Base+0x360>
  403d26:	movzx  ecx,WORD PTR [rax+0x8]
  403d2a:	mov    r11d,0x64
  403d30:	test   cx,cx
  403d33:	je     403d3a <access_monster_buffer@@Base+0x4a>
  403d35:	movzx  r11d,WORD PTR [r8+rcx*1]
  403d3a:	movzx  r9d,WORD PTR [rax+0x6]
  403d3f:	mov    edi,0x96
  403d44:	test   r9w,r9w
  403d48:	je     403d53 <access_monster_buffer@@Base+0x63>
  403d4a:	movzx  ecx,r9w
  403d4e:	movzx  edi,WORD PTR [r8+rcx*1]
  403d53:	cmp    dx,0xb
  403d57:	jbe    404090 <access_monster_buffer@@Base+0x3a0>
  403d5d:	movzx  ecx,WORD PTR [rax+0xa]
  403d61:	test   cx,cx
  403d64:	je     404090 <access_monster_buffer@@Base+0x3a0>
  403d6a:	add    rcx,r8
  403d6d:	mov    esi,DWORD PTR [rcx]
  403d6f:	lea    rsi,[rcx+rsi*1+0x4]
  403d74:	test   rsi,rsi
  403d77:	je     404138 <access_monster_buffer@@Base+0x448>
  403d7d:	mov    r10d,DWORD PTR [rsi-0x4]
  403d81:	cmp    r11w,0x12c
  403d87:	jne    40405a <access_monster_buffer@@Base+0x36a>
  403d8d:	cmp    di,0x96
  403d92:	jne    404140 <access_monster_buffer@@Base+0x450>
  403d98:	mov    ecx,0x4
  403d9d:	lea    rdi,[rip+0x5565]        # 409309 <_IO_stdin_used@@Base+0x309>
  403da4:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  403da6:	seta   cl
  403da9:	sbb    cl,0x0
  403dac:	test   cl,cl
  403dae:	jne    40419d <access_monster_buffer@@Base+0x4ad>
  403db4:	cmp    r10,0x3
  403db8:	jne    4041bc <access_monster_buffer@@Base+0x4cc>
  403dbe:	cmp    dx,0x9
  403dc2:	ja     403e10 <access_monster_buffer@@Base+0x120>
  403dc4:	lea    rcx,[rip+0x5595]        # 409360 <_IO_stdin_used@@Base+0x360>
  403dcb:	mov    edx,0xe3
  403dd0:	lea    rsi,[rip+0x5489]        # 409260 <_IO_stdin_used@@Base+0x260>
  403dd7:	lea    rdi,[rip+0x5989]        # 409767 <_IO_stdin_used@@Base+0x767>
  403dde:	call   403130 <__assert_fail@plt>
  403de3:	nop    DWORD PTR [rax+rax*1+0x0]
  403de8:	lea    rcx,[rip+0x5571]        # 409360 <_IO_stdin_used@@Base+0x360>
  403def:	mov    edx,0xd3
  403df4:	lea    rsi,[rip+0x5465]        # 409260 <_IO_stdin_used@@Base+0x260>
  403dfb:	lea    rdi,[rip+0x5965]        # 409767 <_IO_stdin_used@@Base+0x767>
  403e02:	call   403130 <__assert_fail@plt>
  403e07:	nop    WORD PTR [rax+rax*1+0x0]
  403e10:	cmp    WORD PTR [rax+0x8],0x0
  403e15:	je     403dc4 <access_monster_buffer@@Base+0xd4>
  403e17:	test   r9w,r9w
  403e1b:	jne    4041db <access_monster_buffer@@Base+0x4eb>
  403e21:	movzx  ecx,WORD PTR [rax+0x4]
  403e25:	test   cx,cx
  403e28:	je     4041fa <access_monster_buffer@@Base+0x50a>
  403e2e:	add    rcx,r8
  403e31:	je     4041fa <access_monster_buffer@@Base+0x50a>
  403e37:	vmovss xmm2,DWORD PTR [rip+0x5585]        # 4093c4 <_IO_stdin_used@@Base+0x3c4>
  403e3f:	vmovss xmm1,DWORD PTR [rcx+0x4]
  403e44:	vucomiss xmm2,DWORD PTR [rcx]
  403e48:	vmovss xmm0,DWORD PTR [rcx+0x8]
  403e4d:	jp     404219 <access_monster_buffer@@Base+0x529>
  403e53:	jne    404219 <access_monster_buffer@@Base+0x529>
  403e59:	vucomiss xmm1,DWORD PTR [rip+0x5567]        # 4093c8 <_IO_stdin_used@@Base+0x3c8>
  403e61:	jp     404238 <access_monster_buffer@@Base+0x548>
  403e67:	jne    404238 <access_monster_buffer@@Base+0x548>
  403e6d:	vucomiss xmm0,DWORD PTR [rip+0x554b]        # 4093c0 <_IO_stdin_used@@Base+0x3c0>
  403e75:	jp     404257 <access_monster_buffer@@Base+0x567>
  403e7b:	jne    404257 <access_monster_buffer@@Base+0x567>
  403e81:	cmp    dx,0xf
  403e85:	jbe    404276 <access_monster_buffer@@Base+0x586>
  403e8b:	movzx  ecx,WORD PTR [rax+0xe]
  403e8f:	test   cx,cx
  403e92:	je     404276 <access_monster_buffer@@Base+0x586>
  403e98:	add    rcx,r8
  403e9b:	mov    esi,DWORD PTR [rcx]
  403e9d:	lea    rcx,[rcx+rsi*1+0x4]
  403ea2:	test   rcx,rcx
  403ea5:	je     404276 <access_monster_buffer@@Base+0x586>
  403eab:	cmp    DWORD PTR [rcx-0x4],0xa
  403eaf:	jne    40415f <access_monster_buffer@@Base+0x46f>
  403eb5:	cmp    BYTE PTR [rcx+0x2],0x2
  403eb9:	jne    40417e <access_monster_buffer@@Base+0x48e>
  403ebf:	cmp    dx,0x13
  403ec3:	jbe    4040a0 <access_monster_buffer@@Base+0x3b0>
  403ec9:	movzx  ecx,WORD PTR [rax+0x12]
  403ecd:	test   cx,cx
  403ed0:	je     4040a0 <access_monster_buffer@@Base+0x3b0>
  403ed6:	add    rcx,r8
  403ed9:	mov    esi,DWORD PTR [rcx]
  403edb:	lea    rcx,[rcx+rsi*1+0x4]
  403ee0:	test   rcx,rcx
  403ee3:	je     4040a0 <access_monster_buffer@@Base+0x3b0>
  403ee9:	cmp    DWORD PTR [rcx-0x4],0x2
  403eed:	jne    4040a0 <access_monster_buffer@@Base+0x3b0>
  403ef3:	mov    esi,DWORD PTR [rcx+0x4]
  403ef6:	lea    rcx,[rcx+rsi*1+0x4]
  403efb:	test   rcx,rcx
  403efe:	je     4040f6 <access_monster_buffer@@Base+0x406>
  403f04:	movsxd rsi,DWORD PTR [rcx]
  403f07:	mov    rdi,rcx
  403f0a:	sub    rdi,rsi
  403f0d:	movzx  r9d,WORD PTR [rdi]
  403f11:	cmp    r9w,0x5
  403f16:	jbe    4040d7 <access_monster_buffer@@Base+0x3e7>
  403f1c:	movzx  esi,WORD PTR [rdi+0x4]
  403f20:	test   si,si
  403f23:	je     4040d7 <access_monster_buffer@@Base+0x3e7>
  403f29:	add    rsi,rcx
  403f2c:	mov    r10d,DWORD PTR [rsi]
  403f2f:	lea    rsi,[rsi+r10*1+0x4]
  403f34:	xor    r10d,r10d
  403f37:	cmp    r9w,0x7
  403f3c:	ja     4040c0 <access_monster_buffer@@Base+0x3d0>
  403f42:	test   rsi,rsi
  403f45:	je     4040d7 <access_monster_buffer@@Base+0x3e7>
  403f4b:	lea    r9,[rip+0x53b3]        # 409305 <_IO_stdin_used@@Base+0x305>
  403f52:	mov    ecx,0x4
  403f57:	mov    rdi,r9
  403f5a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  403f5c:	seta   cl
  403f5f:	sbb    cl,0x0
  403f62:	test   cl,cl
  403f64:	jne    4040d7 <access_monster_buffer@@Base+0x3e7>
  403f6a:	cmp    r10w,0x5
  403f6f:	jne    404295 <access_monster_buffer@@Base+0x5a5>
  403f75:	cmp    dx,0x15
  403f79:	jbe    404080 <access_monster_buffer@@Base+0x390>
  403f7f:	movzx  ecx,WORD PTR [rax+0x14]
  403f83:	test   cx,cx
  403f86:	je     404080 <access_monster_buffer@@Base+0x390>
  403f8c:	cmp    BYTE PTR [r8+rcx*1],0x1
  403f91:	jne    404080 <access_monster_buffer@@Base+0x390>
  403f97:	cmp    dx,0x17
  403f9b:	jbe    4040f6 <access_monster_buffer@@Base+0x406>
  403fa1:	movzx  eax,WORD PTR [rax+0x16]
  403fa5:	test   ax,ax
  403fa8:	je     4040f6 <access_monster_buffer@@Base+0x406>
  403fae:	add    r8,rax
  403fb1:	mov    eax,DWORD PTR [r8]
  403fb4:	add    r8,rax
  403fb7:	je     4040f6 <access_monster_buffer@@Base+0x406>
  403fbd:	movsxd rax,DWORD PTR [r8]
  403fc0:	mov    rdx,r8
  403fc3:	sub    rdx,rax
  403fc6:	movzx  r10d,WORD PTR [rdx]
  403fca:	cmp    r10w,0x5
  403fcf:	jbe    404100 <access_monster_buffer@@Base+0x410>
  403fd5:	movzx  eax,WORD PTR [rdx+0x4]
  403fd9:	xor    esi,esi
  403fdb:	test   ax,ax
  403fde:	je     403fea <access_monster_buffer@@Base+0x2fa>
  403fe0:	add    rax,r8
  403fe3:	mov    ecx,DWORD PTR [rax]
  403fe5:	lea    rsi,[rax+rcx*1+0x4]
  403fea:	mov    ecx,0x4
  403fef:	mov    rdi,r9
  403ff2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  403ff4:	seta   al
  403ff7:	sbb    al,0x0
  403ff9:	movsx  eax,al
  403ffc:	cmp    r10w,0x7
  404001:	jbe    40410e <access_monster_buffer@@Base+0x41e>
  404007:	movzx  edx,WORD PTR [rdx+0x6]
  40400b:	test   dx,dx
  40400e:	je     40410e <access_monster_buffer@@Base+0x41e>
  404014:	movzx  edx,WORD PTR [r8+rdx*1]
  404019:	test   eax,eax
  40401b:	jne    404116 <access_monster_buffer@@Base+0x426>
  404021:	cmp    dx,0x5
  404025:	je     404080 <access_monster_buffer@@Base+0x390>
  404027:	lea    rcx,[rip+0x5332]        # 409360 <_IO_stdin_used@@Base+0x360>
  40402e:	mov    edx,0x11f
  404033:	lea    rsi,[rip+0x5226]        # 409260 <_IO_stdin_used@@Base+0x260>
  40403a:	lea    rdi,[rip+0x5726]        # 409767 <_IO_stdin_used@@Base+0x767>
  404041:	call   403130 <__assert_fail@plt>
  404046:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404050:	cmp    dx,0x7
  404054:	ja     4042b4 <access_monster_buffer@@Base+0x5c4>
  40405a:	lea    rcx,[rip+0x52ff]        # 409360 <_IO_stdin_used@@Base+0x360>
  404061:	mov    edx,0xdb
  404066:	lea    rsi,[rip+0x51f3]        # 409260 <_IO_stdin_used@@Base+0x260>
  40406d:	lea    rdi,[rip+0x56f3]        # 409767 <_IO_stdin_used@@Base+0x767>
  404074:	call   403130 <__assert_fail@plt>
  404079:	nop    DWORD PTR [rax+0x0]
  404080:	xor    eax,eax
  404082:	add    rsp,0x8
  404086:	ret    
  404087:	nop    WORD PTR [rax+rax*1+0x0]
  404090:	xor    esi,esi
  404092:	xor    r10d,r10d
  404095:	jmp    403d81 <access_monster_buffer@@Base+0x91>
  40409a:	nop    WORD PTR [rax+rax*1+0x0]
  4040a0:	lea    rcx,[rip+0x52b9]        # 409360 <_IO_stdin_used@@Base+0x360>
  4040a7:	mov    edx,0x10f
  4040ac:	lea    rsi,[rip+0x51ad]        # 409260 <_IO_stdin_used@@Base+0x260>
  4040b3:	lea    rdi,[rip+0x56ad]        # 409767 <_IO_stdin_used@@Base+0x767>
  4040ba:	call   403130 <__assert_fail@plt>
  4040bf:	nop
  4040c0:	movzx  edi,WORD PTR [rdi+0x6]
  4040c4:	test   di,di
  4040c7:	je     403f42 <access_monster_buffer@@Base+0x252>
  4040cd:	movzx  r10d,WORD PTR [rcx+rdi*1]
  4040d2:	jmp    403f42 <access_monster_buffer@@Base+0x252>
  4040d7:	lea    rcx,[rip+0x5282]        # 409360 <_IO_stdin_used@@Base+0x360>
  4040de:	mov    edx,0x113
  4040e3:	lea    rsi,[rip+0x5176]        # 409260 <_IO_stdin_used@@Base+0x260>
  4040ea:	lea    rdi,[rip+0x5676]        # 409767 <_IO_stdin_used@@Base+0x767>
  4040f1:	call   403130 <__assert_fail@plt>
  4040f6:	call   403440 <_start@@Base+0xf0>
  4040fb:	nop    DWORD PTR [rax+rax*1+0x0]
  404100:	lea    rsi,[rip+0x51fe]        # 409305 <_IO_stdin_used@@Base+0x305>
  404107:	xor    edi,edi
  404109:	call   403170 <strcmp@plt>
  40410e:	test   eax,eax
  404110:	je     404027 <access_monster_buffer@@Base+0x337>
  404116:	lea    rcx,[rip+0x5243]        # 409360 <_IO_stdin_used@@Base+0x360>
  40411d:	mov    edx,0x11e
  404122:	lea    rsi,[rip+0x5137]        # 409260 <_IO_stdin_used@@Base+0x260>
  404129:	lea    rdi,[rip+0x5637]        # 409767 <_IO_stdin_used@@Base+0x767>
  404130:	call   403130 <__assert_fail@plt>
  404135:	nop    DWORD PTR [rax]
  404138:	xor    r10d,r10d
  40413b:	jmp    403d81 <access_monster_buffer@@Base+0x91>
  404140:	lea    rcx,[rip+0x5219]        # 409360 <_IO_stdin_used@@Base+0x360>
  404147:	mov    edx,0xdd
  40414c:	lea    rsi,[rip+0x510d]        # 409260 <_IO_stdin_used@@Base+0x260>
  404153:	lea    rdi,[rip+0x560d]        # 409767 <_IO_stdin_used@@Base+0x767>
  40415a:	call   403130 <__assert_fail@plt>
  40415f:	lea    rcx,[rip+0x51fa]        # 409360 <_IO_stdin_used@@Base+0x360>
  404166:	mov    edx,0x107
  40416b:	lea    rsi,[rip+0x50ee]        # 409260 <_IO_stdin_used@@Base+0x260>
  404172:	lea    rdi,[rip+0x55ee]        # 409767 <_IO_stdin_used@@Base+0x767>
  404179:	call   403130 <__assert_fail@plt>
  40417e:	lea    rcx,[rip+0x51db]        # 409360 <_IO_stdin_used@@Base+0x360>
  404185:	mov    edx,0x10b
  40418a:	lea    rsi,[rip+0x50cf]        # 409260 <_IO_stdin_used@@Base+0x260>
  404191:	lea    rdi,[rip+0x55cf]        # 409767 <_IO_stdin_used@@Base+0x767>
  404198:	call   403130 <__assert_fail@plt>
  40419d:	lea    rcx,[rip+0x51bc]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041a4:	mov    edx,0xde
  4041a9:	lea    rsi,[rip+0x50b0]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041b0:	lea    rdi,[rip+0x55b0]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041b7:	call   403130 <__assert_fail@plt>
  4041bc:	lea    rcx,[rip+0x519d]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041c3:	mov    edx,0xdf
  4041c8:	lea    rsi,[rip+0x5091]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041cf:	lea    rdi,[rip+0x5591]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041d6:	call   403130 <__assert_fail@plt>
  4041db:	lea    rcx,[rip+0x517e]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041e2:	mov    edx,0xe4
  4041e7:	lea    rsi,[rip+0x5072]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041ee:	lea    rdi,[rip+0x5572]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041f5:	call   403130 <__assert_fail@plt>
  4041fa:	lea    rcx,[rip+0x515f]        # 409360 <_IO_stdin_used@@Base+0x360>
  404201:	mov    edx,0xe8
  404206:	lea    rsi,[rip+0x5053]        # 409260 <_IO_stdin_used@@Base+0x260>
  40420d:	lea    rdi,[rip+0x5553]        # 409767 <_IO_stdin_used@@Base+0x767>
  404214:	call   403130 <__assert_fail@plt>
  404219:	lea    rcx,[rip+0x5140]        # 409360 <_IO_stdin_used@@Base+0x360>
  404220:	mov    edx,0xf0
  404225:	lea    rsi,[rip+0x5034]        # 409260 <_IO_stdin_used@@Base+0x260>
  40422c:	lea    rdi,[rip+0x5534]        # 409767 <_IO_stdin_used@@Base+0x767>
  404233:	call   403130 <__assert_fail@plt>
  404238:	lea    rcx,[rip+0x5121]        # 409360 <_IO_stdin_used@@Base+0x360>
  40423f:	mov    edx,0xf1
  404244:	lea    rsi,[rip+0x5015]        # 409260 <_IO_stdin_used@@Base+0x260>
  40424b:	lea    rdi,[rip+0x5515]        # 409767 <_IO_stdin_used@@Base+0x767>
  404252:	call   403130 <__assert_fail@plt>
  404257:	lea    rcx,[rip+0x5102]        # 409360 <_IO_stdin_used@@Base+0x360>
  40425e:	mov    edx,0xf2
  404263:	lea    rsi,[rip+0x4ff6]        # 409260 <_IO_stdin_used@@Base+0x260>
  40426a:	lea    rdi,[rip+0x54f6]        # 409767 <_IO_stdin_used@@Base+0x767>
  404271:	call   403130 <__assert_fail@plt>
  404276:	lea    rcx,[rip+0x50e3]        # 409360 <_IO_stdin_used@@Base+0x360>
  40427d:	mov    edx,0x105
  404282:	lea    rsi,[rip+0x4fd7]        # 409260 <_IO_stdin_used@@Base+0x260>
  404289:	lea    rdi,[rip+0x54d7]        # 409767 <_IO_stdin_used@@Base+0x767>
  404290:	call   403130 <__assert_fail@plt>
  404295:	lea    rcx,[rip+0x50c4]        # 409360 <_IO_stdin_used@@Base+0x360>
  40429c:	mov    edx,0x114
  4042a1:	lea    rsi,[rip+0x4fb8]        # 409260 <_IO_stdin_used@@Base+0x260>
  4042a8:	lea    rdi,[rip+0x54b8]        # 409767 <_IO_stdin_used@@Base+0x767>
  4042af:	call   403130 <__assert_fail@plt>
  4042b4:	movzx  r9d,WORD PTR [rax+0x6]
  4042b9:	mov    r11d,0x64
  4042bf:	test   r9w,r9w
  4042c3:	jne    403d4a <access_monster_buffer@@Base+0x5a>
  4042c9:	jmp    40405a <access_monster_buffer@@Base+0x36a>
  4042ce:	xchg   ax,ax
  4042d0:	push   rbp
  4042d1:	mov    ebp,edx
  4042d3:	mov    r8d,0x1
  4042d9:	push   rbx
  4042da:	mov    rbx,rdi
  4042dd:	mov    ecx,0x1
  4042e2:	sub    rsp,0x8
  4042e6:	mov    edx,DWORD PTR [rdi+0x28]
  4042e9:	add    rdx,rsi
  4042ec:	lea    rsi,[rdi+0x68]
  4042f0:	mov    rdi,QWORD PTR [rdi+0x40]
  4042f4:	call   QWORD PTR [rbx+0x50]
  4042f7:	test   eax,eax
  4042f9:	jne    404328 <access_monster_buffer@@Base+0x638>
  4042fb:	mov    edx,DWORD PTR [rbx+0x28]
  4042fe:	mov    rcx,rdx
  404301:	add    rdx,QWORD PTR [rbx+0x68]
  404305:	mov    QWORD PTR [rbx+0x18],rdx
  404309:	mov    edx,DWORD PTR [rbx+0x70]
  40430c:	sub    edx,ecx
  40430e:	cmp    ebp,edx
  404310:	cmovb  edx,ebp
  404313:	mov    DWORD PTR [rbx+0x24],edx
  404316:	mov    rdx,QWORD PTR [rbx+0x30]
  40431a:	mov    DWORD PTR [rdx+0x4],ebp
  40431d:	add    rsp,0x8
  404321:	pop    rbx
  404322:	pop    rbp
  404323:	ret    
  404324:	nop    DWORD PTR [rax+0x0]
  404328:	mov    eax,0xffffffff
  40432d:	jmp    40431d <access_monster_buffer@@Base+0x62d>
  40432f:	nop

0000000000404330 <flatcc_builder_default_alloc@@Base>:
  404330:	endbr64 
  404334:	push   r13
  404336:	push   r12
  404338:	push   rbp
  404339:	mov    rbp,rsi
  40433c:	push   rbx
  40433d:	sub    rsp,0x18
  404341:	test   rdx,rdx
  404344:	je     404408 <flatcc_builder_default_alloc@@Base+0xd8>
  40434a:	mov    r13d,ecx
  40434d:	cmp    r8d,0x4
  404351:	je     404440 <flatcc_builder_default_alloc@@Base+0x110>
  404357:	jle    4043d0 <flatcc_builder_default_alloc@@Base+0xa0>
  404359:	mov    rbx,rdx
  40435c:	cmp    r8d,0x5
  404360:	je     404388 <flatcc_builder_default_alloc@@Base+0x58>
  404362:	cmp    r8d,0x7
  404366:	mov    ebx,0x40
  40436b:	mov    eax,0x20
  404370:	cmovne rbx,rax
  404374:	cmp    rbx,rdx
  404377:	jae    404388 <flatcc_builder_default_alloc@@Base+0x58>
  404379:	nop    DWORD PTR [rax+0x0]
  404380:	add    rbx,rbx
  404383:	cmp    rdx,rbx
  404386:	ja     404380 <flatcc_builder_default_alloc@@Base+0x50>
  404388:	mov    rax,QWORD PTR [rbp+0x8]
  40438c:	cmp    rdx,rax
  40438f:	ja     40439e <flatcc_builder_default_alloc@@Base+0x6e>
  404391:	shr    rax,1
  404394:	mov    rdx,rax
  404397:	xor    eax,eax
  404399:	cmp    rdx,rbx
  40439c:	jae    4043c5 <flatcc_builder_default_alloc@@Base+0x95>
  40439e:	mov    rdi,QWORD PTR [rbp+0x0]
  4043a2:	mov    rsi,rbx
  4043a5:	call   4031a0 <realloc@plt>
  4043aa:	mov    r12,rax
  4043ad:	test   rax,rax
  4043b0:	je     40444a <flatcc_builder_default_alloc@@Base+0x11a>
  4043b6:	test   r13d,r13d
  4043b9:	jne    4043e8 <flatcc_builder_default_alloc@@Base+0xb8>
  4043bb:	mov    QWORD PTR [rbp+0x0],r12
  4043bf:	mov    QWORD PTR [rbp+0x8],rbx
  4043c3:	xor    eax,eax
  4043c5:	add    rsp,0x18
  4043c9:	pop    rbx
  4043ca:	pop    rbp
  4043cb:	pop    r12
  4043cd:	pop    r13
  4043cf:	ret    
  4043d0:	cmp    r8d,0x1
  4043d4:	mov    ebx,0x100
  4043d9:	mov    eax,0x20
  4043de:	cmovne rbx,rax
  4043e2:	jmp    404374 <flatcc_builder_default_alloc@@Base+0x44>
  4043e4:	nop    DWORD PTR [rax+0x0]
  4043e8:	mov    rax,QWORD PTR [rbp+0x8]
  4043ec:	cmp    rax,rbx
  4043ef:	jae    4043bb <flatcc_builder_default_alloc@@Base+0x8b>
  4043f1:	mov    rdx,rbx
  4043f4:	sub    rdx,rax
  4043f7:	lea    rdi,[r12+rax*1]
  4043fb:	xor    esi,esi
  4043fd:	call   403140 <memset@plt>
  404402:	jmp    4043bb <flatcc_builder_default_alloc@@Base+0x8b>
  404404:	nop    DWORD PTR [rax+0x0]
  404408:	mov    rdi,QWORD PTR [rsi]
  40440b:	xor    eax,eax
  40440d:	test   rdi,rdi
  404410:	je     4043c5 <flatcc_builder_default_alloc@@Base+0x95>
  404412:	mov    DWORD PTR [rsp+0xc],eax
  404416:	call   403100 <free@plt>
  40441b:	mov    QWORD PTR [rbp+0x0],0x0
  404423:	mov    QWORD PTR [rbp+0x8],0x0
  40442b:	mov    eax,DWORD PTR [rsp+0xc]
  40442f:	add    rsp,0x18
  404433:	pop    rbx
  404434:	pop    rbp
  404435:	pop    r12
  404437:	pop    r13
  404439:	ret    
  40443a:	nop    WORD PTR [rax+rax*1+0x0]
  404440:	mov    ebx,0x120
  404445:	jmp    404374 <flatcc_builder_default_alloc@@Base+0x44>
  40444a:	mov    eax,0xffffffff
  40444f:	jmp    4043c5 <flatcc_builder_default_alloc@@Base+0x95>
  404454:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40445f:	nop
  404460:	push   rax
  404461:	pop    rax
  404462:	lea    rcx,[rip+0x5a27]        # 409e90 <_IO_stdin_used@@Base+0xe90>
  404469:	mov    edx,0x134
  40446e:	lea    rsi,[rip+0x4f5b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404475:	lea    rdi,[rip+0x52eb]        # 409767 <_IO_stdin_used@@Base+0x767>
  40447c:	sub    rsp,0x8
  404480:	call   403130 <__assert_fail@plt>
  404485:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404490:	push   rax
  404491:	pop    rax
  404492:	lea    rcx,[rip+0x5987]        # 409e20 <_IO_stdin_used@@Base+0xe20>
  404499:	mov    edx,0x2a5
  40449e:	lea    rsi,[rip+0x4f2b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4044a5:	lea    rdi,[rip+0x52bb]        # 409767 <_IO_stdin_used@@Base+0x767>
  4044ac:	sub    rsp,0x8
  4044b0:	call   403130 <__assert_fail@plt>
  4044b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4044c0:	push   rbx
  4044c1:	mov    r9,rdi
  4044c4:	sub    rsp,0xa0
  4044cb:	mov    rbx,QWORD PTR fs:0x28
  4044d4:	mov    QWORD PTR [rsp+0x98],rbx
  4044dc:	xor    ebx,ebx
  4044de:	test   dx,dx
  4044e1:	je     404540 <flatcc_builder_default_alloc@@Base+0x210>
  4044e3:	mov    eax,edx
  4044e5:	movzx  edx,dx
  4044e8:	movzx  edi,WORD PTR [rsi]
  4044eb:	cmp    di,0x3
  4044ef:	ja     4044fe <flatcc_builder_default_alloc@@Base+0x1ce>
  4044f1:	mov    edi,0x4
  4044f6:	mov    WORD PTR [rsi],di
  4044f9:	mov    edi,0x4
  4044fe:	cmp    ax,di
  404501:	jbe    404506 <flatcc_builder_default_alloc@@Base+0x1d6>
  404503:	mov    WORD PTR [rsi],ax
  404506:	test   ecx,ecx
  404508:	jne    404517 <flatcc_builder_default_alloc@@Base+0x1e7>
  40450a:	mov    ebx,DWORD PTR [r9+0xf4]
  404511:	dec    edx
  404513:	and    edx,ebx
  404515:	jne    404560 <flatcc_builder_default_alloc@@Base+0x230>
  404517:	xor    eax,eax
  404519:	mov    rbx,QWORD PTR [rsp+0x98]
  404521:	xor    rbx,QWORD PTR fs:0x28
  40452a:	jne    4045cd <flatcc_builder_default_alloc@@Base+0x29d>
  404530:	add    rsp,0xa0
  404537:	pop    rbx
  404538:	ret    
  404539:	nop    DWORD PTR [rax+0x0]
  404540:	movzx  eax,WORD PTR [rdi+0xec]
  404547:	movzx  edx,ax
  40454a:	test   ax,ax
  40454d:	jne    4044e8 <flatcc_builder_default_alloc@@Base+0x1b8>
  40454f:	mov    edx,0x1
  404554:	mov    eax,0x1
  404559:	jmp    4044e8 <flatcc_builder_default_alloc@@Base+0x1b8>
  40455b:	nop    DWORD PTR [rax+rax*1+0x0]
  404560:	mov    rax,0x409ec0
  404567:	movsxd r8,edx
  40456a:	add    edx,ebx
  40456c:	mov    QWORD PTR [rsp],r8
  404570:	mov    QWORD PTR [rsp+0x10],rax
  404575:	mov    QWORD PTR [rsp+0x18],r8
  40457a:	mov    DWORD PTR [rsp+0x8],0x1
  404582:	mov    DWORD PTR [r9+0xf4],edx
  404589:	cmp    ebx,edx
  40458b:	jg     4045d7 <flatcc_builder_default_alloc@@Base+0x2a7>
  40458d:	mov    rdi,QWORD PTR [r9+0x38]
  404591:	lea    rsi,[rsp+0x10]
  404596:	mov    ecx,ebx
  404598:	mov    edx,0x1
  40459d:	call   QWORD PTR [r9+0x48]
  4045a1:	test   eax,eax
  4045a3:	jne    4045d2 <flatcc_builder_default_alloc@@Base+0x2a2>
  4045a5:	cmp    ebx,0xffffffff
  4045a8:	jne    404517 <flatcc_builder_default_alloc@@Base+0x1e7>
  4045ae:	lea    rcx,[rip+0x587b]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  4045b5:	mov    edx,0x2be
  4045ba:	lea    rsi,[rip+0x4e0f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4045c1:	lea    rdi,[rip+0x519f]        # 409767 <_IO_stdin_used@@Base+0x767>
  4045c8:	call   403130 <__assert_fail@plt>
  4045cd:	call   403120 <__stack_chk_fail@plt>
  4045d2:	call   404490 <flatcc_builder_default_alloc@@Base+0x160>
  4045d7:	lea    rcx,[rip+0x5842]        # 409e20 <_IO_stdin_used@@Base+0xe20>
  4045de:	mov    edx,0x2a1
  4045e3:	lea    rsi,[rip+0x4de6]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4045ea:	lea    rdi,[rip+0x5176]        # 409767 <_IO_stdin_used@@Base+0x767>
  4045f1:	call   403130 <__assert_fail@plt>
  4045f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404600:	push   rax
  404601:	pop    rax
  404602:	lea    rcx,[rip+0x5807]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  404609:	mov    edx,0x28b
  40460e:	lea    rsi,[rip+0x4dbb]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404615:	lea    rdi,[rip+0x514b]        # 409767 <_IO_stdin_used@@Base+0x767>
  40461c:	sub    rsp,0x8
  404620:	call   403130 <__assert_fail@plt>
  404625:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404630:	push   rax
  404631:	pop    rax
  404632:	lea    rcx,[rip+0x5737]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  404639:	mov    edx,0x37c
  40463e:	lea    rsi,[rip+0x4d8b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404645:	lea    rdi,[rip+0x50f4]        # 409740 <_IO_stdin_used@@Base+0x740>
  40464c:	sub    rsp,0x8
  404650:	call   403130 <__assert_fail@plt>
  404655:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404660:	push   r12
  404662:	mov    r12d,esi
  404665:	push   rbp
  404666:	push   rbx
  404667:	mov    rbx,rdi
  40466a:	movsxd rax,DWORD PTR [rdi+0x104]
  404671:	lea    edx,[rax+0x1]
  404674:	mov    DWORD PTR [rdi+0x104],edx
  40467a:	cmp    edx,DWORD PTR [rdi+0x108]
  404680:	jle    404750 <flatcc_builder_default_alloc@@Base+0x420>
  404686:	mov    ecx,DWORD PTR [rdi+0x120]
  40468c:	cmp    edx,ecx
  40468e:	jle    404698 <flatcc_builder_default_alloc@@Base+0x368>
  404690:	test   ecx,ecx
  404692:	jg     404768 <flatcc_builder_default_alloc@@Base+0x438>
  404698:	lea    rcx,[rax+rax*8]
  40469c:	lea    rbp,[rcx*4+0x0]
  4046a4:	lea    rdx,[rbp+0x24]
  4046a8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  4046af:	jbe    4046cf <flatcc_builder_default_alloc@@Base+0x39f>
  4046b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4046b5:	xor    ecx,ecx
  4046b7:	lea    rsi,[rbx+0x98]
  4046be:	mov    r8d,0x4
  4046c4:	call   QWORD PTR [rbx+0x50]
  4046c7:	test   eax,eax
  4046c9:	jne    40476f <flatcc_builder_default_alloc@@Base+0x43f>
  4046cf:	mov    rcx,rbp
  4046d2:	add    rcx,QWORD PTR [rbx+0x98]
  4046d9:	mov    QWORD PTR [rbx+0x30],rcx
  4046dd:	je     404768 <flatcc_builder_default_alloc@@Base+0x438>
  4046e3:	movabs rdx,0xe38e38e38e38e38f
  4046ed:	mov    rax,rdx
  4046f0:	mul    QWORD PTR [rbx+0xa0]
  4046f7:	mov    eax,DWORD PTR [rbx+0x120]
  4046fd:	shr    rdx,0x5
  404701:	mov    DWORD PTR [rbx+0x108],edx
  404707:	cmp    eax,edx
  404709:	jge    404710 <flatcc_builder_default_alloc@@Base+0x3e0>
  40470b:	test   eax,eax
  40470d:	jg     404760 <flatcc_builder_default_alloc@@Base+0x430>
  40470f:	nop
  404710:	movzx  eax,WORD PTR [rbx+0xea]
  404717:	mov    edx,DWORD PTR [rbx+0x20]
  40471a:	mov    WORD PTR [rcx+0xc],ax
  40471e:	mov    eax,DWORD PTR [rbx+0x28]
  404721:	mov    DWORD PTR [rcx+0x8],edx
  404724:	mov    WORD PTR [rbx+0xea],r12w
  40472c:	mov    DWORD PTR [rcx],eax
  40472e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404735:	lea    eax,[rdx+rax*1+0x7]
  404739:	mov    DWORD PTR [rbx+0x20],0x0
  404740:	and    eax,0xfffffff8
  404743:	mov    DWORD PTR [rbx+0x28],eax
  404746:	xor    eax,eax
  404748:	pop    rbx
  404749:	pop    rbp
  40474a:	pop    r12
  40474c:	ret    
  40474d:	nop    DWORD PTR [rax]
  404750:	mov    rax,QWORD PTR [rdi+0x30]
  404754:	lea    rcx,[rax+0x24]
  404758:	mov    QWORD PTR [rdi+0x30],rcx
  40475c:	jmp    404710 <flatcc_builder_default_alloc@@Base+0x3e0>
  40475e:	xchg   ax,ax
  404760:	mov    DWORD PTR [rbx+0x108],eax
  404766:	jmp    404710 <flatcc_builder_default_alloc@@Base+0x3e0>
  404768:	mov    eax,0xffffffff
  40476d:	jmp    404748 <flatcc_builder_default_alloc@@Base+0x418>
  40476f:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  404774:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40477f:	nop
  404780:	push   rbp
  404781:	push   rbx
  404782:	sub    rsp,0xb8
  404789:	mov    rax,QWORD PTR fs:0x28
  404792:	mov    QWORD PTR [rsp+0xa8],rax
  40479a:	xor    eax,eax
  40479c:	cmp    edx,0x3fffffff
  4047a2:	ja     404938 <flatcc_builder_default_alloc@@Base+0x608>
  4047a8:	cmp    WORD PTR [rdi+0xe8],0x3
  4047b0:	mov    rbx,rdi
  4047b3:	ja     4047c1 <flatcc_builder_default_alloc@@Base+0x491>
  4047b5:	mov    eax,0x4
  4047ba:	mov    WORD PTR [rdi+0xe8],ax
  4047c1:	mov    edi,DWORD PTR [rbx+0xf0]
  4047c7:	mov    r9d,edx
  4047ca:	mov    eax,edi
  4047cc:	lea    r8,[rsp+0xc]
  4047d1:	and    eax,0x3
  4047d4:	shl    r9d,0x2
  4047d8:	mov    QWORD PTR [rsp+0x20],r8
  4047dd:	mov    DWORD PTR [rsp+0xc],edx
  4047e1:	mov    QWORD PTR [rsp+0x10],0x4
  4047ea:	mov    QWORD PTR [rsp+0x28],0x4
  4047f3:	mov    DWORD PTR [rsp+0x18],0x1
  4047fb:	mov    r8d,0x4
  404801:	je     404821 <flatcc_builder_default_alloc@@Base+0x4f1>
  404803:	mov    r9d,r9d
  404806:	lea    r8,[r9+0x4]
  40480a:	mov    QWORD PTR [rsp+0x10],r8
  40480f:	mov    QWORD PTR [rsp+0x30],rsi
  404814:	mov    QWORD PTR [rsp+0x38],r9
  404819:	mov    DWORD PTR [rsp+0x18],0x2
  404821:	test   eax,eax
  404823:	jne    404900 <flatcc_builder_default_alloc@@Base+0x5d0>
  404829:	mov    r10d,r8d
  40482c:	test   edx,edx
  40482e:	je     4048a6 <flatcc_builder_default_alloc@@Base+0x576>
  404830:	sub    r10d,edi
  404833:	lea    r9d,[rdx-0x1]
  404837:	xor    eax,eax
  404839:	sub    r10d,0x4
  40483d:	jmp    404868 <flatcc_builder_default_alloc@@Base+0x538>
  40483f:	nop
  404840:	mov    edi,eax
  404842:	neg    edi
  404844:	lea    edi,[r10+rdi*4]
  404848:	add    edx,edi
  40484a:	mov    DWORD PTR [rsi+rax*4],edx
  40484d:	test   rcx,rcx
  404850:	je     40485c <flatcc_builder_default_alloc@@Base+0x52c>
  404852:	cmp    BYTE PTR [rcx+rax*1],0x0
  404856:	je     40495b <flatcc_builder_default_alloc@@Base+0x62b>
  40485c:	lea    rdx,[rax+0x1]
  404860:	cmp    rax,r9
  404863:	je     4048a0 <flatcc_builder_default_alloc@@Base+0x570>
  404865:	mov    rax,rdx
  404868:	mov    edx,DWORD PTR [rsi+rax*4]
  40486b:	test   edx,edx
  40486d:	jne    404840 <flatcc_builder_default_alloc@@Base+0x510>
  40486f:	test   rcx,rcx
  404872:	je     40493c <flatcc_builder_default_alloc@@Base+0x60c>
  404878:	cmp    BYTE PTR [rcx+rax*1],0x0
  40487c:	je     40485c <flatcc_builder_default_alloc@@Base+0x52c>
  40487e:	lea    rcx,[rip+0x520b]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404885:	mov    edx,0x5b5
  40488a:	lea    rsi,[rip+0x4b3f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404891:	lea    rdi,[rip+0x4ed1]        # 409769 <_IO_stdin_used@@Base+0x769>
  404898:	call   403130 <__assert_fail@plt>
  40489d:	nop    DWORD PTR [rax]
  4048a0:	mov    edi,DWORD PTR [rbx+0xf0]
  4048a6:	mov    ebp,edi
  4048a8:	sub    ebp,r8d
  4048ab:	cmp    ebp,edi
  4048ad:	jge    40497a <flatcc_builder_default_alloc@@Base+0x64a>
  4048b3:	mov    rdi,QWORD PTR [rbx+0x38]
  4048b7:	mov    edx,DWORD PTR [rsp+0x18]
  4048bb:	lea    rsi,[rsp+0x20]
  4048c0:	mov    ecx,ebp
  4048c2:	call   QWORD PTR [rbx+0x48]
  4048c5:	test   eax,eax
  4048c7:	jne    40499e <flatcc_builder_default_alloc@@Base+0x66e>
  4048cd:	mov    DWORD PTR [rbx+0xf0],ebp
  4048d3:	mov    rbx,QWORD PTR [rsp+0xa8]
  4048db:	xor    rbx,QWORD PTR fs:0x28
  4048e4:	mov    eax,ebp
  4048e6:	jne    404999 <flatcc_builder_default_alloc@@Base+0x669>
  4048ec:	add    rsp,0xb8
  4048f3:	pop    rbx
  4048f4:	pop    rbp
  4048f5:	ret    
  4048f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404900:	movsxd r10,DWORD PTR [rsp+0x18]
  404905:	mov    r11,0x409ec0
  40490c:	mov    r9,r10
  40490f:	add    r8,rax
  404912:	shl    r10,0x4
  404916:	inc    r9d
  404919:	mov    QWORD PTR [rsp+0x10],r8
  40491e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  404923:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  404928:	mov    DWORD PTR [rsp+0x18],r9d
  40492d:	jmp    404829 <flatcc_builder_default_alloc@@Base+0x4f9>
  404932:	nop    WORD PTR [rax+rax*1+0x0]
  404938:	xor    ebp,ebp
  40493a:	jmp    4048d3 <flatcc_builder_default_alloc@@Base+0x5a3>
  40493c:	lea    rcx,[rip+0x514d]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404943:	mov    edx,0x5b7
  404948:	lea    rsi,[rip+0x4a81]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40494f:	lea    rdi,[rip+0x4e11]        # 409767 <_IO_stdin_used@@Base+0x767>
  404956:	call   403130 <__assert_fail@plt>
  40495b:	lea    rcx,[rip+0x512e]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404962:	mov    edx,0x5b1
  404967:	lea    rsi,[rip+0x4a62]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40496e:	lea    rdi,[rip+0x4de6]        # 40975b <_IO_stdin_used@@Base+0x75b>
  404975:	call   403130 <__assert_fail@plt>
  40497a:	lea    rcx,[rip+0x548f]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  404981:	mov    edx,0x287
  404986:	lea    rsi,[rip+0x4a43]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40498d:	lea    rdi,[rip+0x4dd3]        # 409767 <_IO_stdin_used@@Base+0x767>
  404994:	call   403130 <__assert_fail@plt>
  404999:	call   403120 <__stack_chk_fail@plt>
  40499e:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  4049a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4049ae:	xchg   ax,ax

00000000004049b0 <flatcc_builder_flush_vtable_cache@@Base>:
  4049b0:	endbr64 
  4049b4:	cmp    QWORD PTR [rdi+0xd8],0x0
  4049bc:	jne    4049c0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4049be:	ret    
  4049bf:	nop
  4049c0:	push   rbx
  4049c1:	mov    rbx,rdi
  4049c4:	xor    esi,esi
  4049c6:	mov    rdx,QWORD PTR [rbx+0xb0]
  4049cd:	mov    rdi,QWORD PTR [rdi+0xa8]
  4049d4:	call   403140 <memset@plt>
  4049d9:	movabs rax,0x1000000000
  4049e3:	mov    QWORD PTR [rbx+0xe0],rax
  4049ea:	pop    rbx
  4049eb:	ret    
  4049ec:	nop    DWORD PTR [rax+0x0]

00000000004049f0 <flatcc_builder_custom_init@@Base>:
  4049f0:	endbr64 
  4049f4:	mov    QWORD PTR [rdi],0x0
  4049fb:	mov    QWORD PTR [rdi+0x180],0x0
  404a06:	mov    r9,rdi
  404a09:	lea    rdi,[rdi+0x8]
  404a0d:	and    rdi,0xfffffffffffffff8
  404a11:	mov    r10,rcx
  404a14:	mov    rcx,r9
  404a17:	sub    rcx,rdi
  404a1a:	add    ecx,0x188
  404a20:	shr    ecx,0x3
  404a23:	xor    eax,eax
  404a25:	rep stos QWORD PTR es:[rdi],rax
  404a28:	test   rsi,rsi
  404a2b:	je     404a48 <flatcc_builder_custom_init@@Base+0x58>
  404a2d:	test   r10,r10
  404a30:	je     404a66 <flatcc_builder_custom_init@@Base+0x76>
  404a32:	mov    QWORD PTR [r9+0x40],r8
  404a36:	mov    QWORD PTR [r9+0x50],r10
  404a3a:	mov    QWORD PTR [r9+0x38],rdx
  404a3e:	mov    QWORD PTR [r9+0x48],rsi
  404a42:	xor    eax,eax
  404a44:	ret    
  404a45:	nop    DWORD PTR [rax]
  404a48:	mov    DWORD PTR [r9+0x128],0x1
  404a53:	lea    rdx,[r9+0x130]
  404a5a:	mov    rsi,0x4084a0
  404a61:	test   r10,r10
  404a64:	jne    404a32 <flatcc_builder_custom_init@@Base+0x42>
  404a66:	mov    r10,0x404330
  404a6d:	jmp    404a32 <flatcc_builder_custom_init@@Base+0x42>
  404a6f:	nop

0000000000404a70 <flatcc_builder_init@@Base>:
  404a70:	endbr64 
  404a74:	xor    r8d,r8d
  404a77:	xor    ecx,ecx
  404a79:	xor    edx,edx
  404a7b:	xor    esi,esi
  404a7d:	jmp    4049f0 <flatcc_builder_custom_init@@Base>
  404a82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404a8d:	nop    DWORD PTR [rax]

0000000000404a90 <flatcc_builder_custom_reset@@Base>:
  404a90:	endbr64 
  404a94:	push   r14
  404a96:	mov    r14d,esi
  404a99:	push   r13
  404a9b:	mov    r13d,edx
  404a9e:	push   r12
  404aa0:	mov    r12,rdi
  404aa3:	push   rbp
  404aa4:	xor    ebp,ebp
  404aa6:	push   rbx
  404aa7:	lea    rbx,[rdi+0x58]
  404aab:	jmp    404af5 <flatcc_builder_custom_reset@@Base+0x65>
  404aad:	nop    DWORD PTR [rax]
  404ab0:	cmp    ebp,0x5
  404ab3:	je     404adf <flatcc_builder_custom_reset@@Base+0x4f>
  404ab5:	test   r13d,r13d
  404ab8:	je     404adf <flatcc_builder_custom_reset@@Base+0x4f>
  404aba:	mov    rdi,QWORD PTR [r12+0x40]
  404abf:	mov    r8d,ebp
  404ac2:	mov    ecx,0x1
  404ac7:	mov    edx,0x1
  404acc:	mov    rsi,rbx
  404acf:	call   QWORD PTR [r12+0x50]
  404ad4:	test   eax,eax
  404ad6:	jne    404c10 <flatcc_builder_custom_reset@@Base+0x180>
  404adc:	mov    rdi,QWORD PTR [rbx]
  404adf:	mov    rdx,QWORD PTR [rbx+0x8]
  404ae3:	xor    esi,esi
  404ae5:	call   403140 <memset@plt>
  404aea:	inc    ebp
  404aec:	add    rbx,0x10
  404af0:	cmp    ebp,0x8
  404af3:	je     404b28 <flatcc_builder_custom_reset@@Base+0x98>
  404af5:	mov    rdi,QWORD PTR [rbx]
  404af8:	test   rdi,rdi
  404afb:	jne    404ab0 <flatcc_builder_custom_reset@@Base+0x20>
  404afd:	cmp    QWORD PTR [rbx+0x8],0x0
  404b02:	je     404aea <flatcc_builder_custom_reset@@Base+0x5a>
  404b04:	lea    rcx,[rip+0x5395]        # 409ea0 <_IO_stdin_used@@Base+0xea0>
  404b0b:	mov    edx,0x1b2
  404b10:	lea    rsi,[rip+0x48b9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404b17:	lea    rdi,[rip+0x4c59]        # 409777 <_IO_stdin_used@@Base+0x777>
  404b1e:	call   403130 <__assert_fail@plt>
  404b23:	nop    DWORD PTR [rax+rax*1+0x0]
  404b28:	mov    edx,DWORD PTR [r12+0xe4]
  404b30:	mov    DWORD PTR [r12+0xe0],0x0
  404b3c:	test   edx,edx
  404b3e:	je     404b4c <flatcc_builder_custom_reset@@Base+0xbc>
  404b40:	mov    DWORD PTR [r12+0xe4],0x10
  404b4c:	xor    eax,eax
  404b4e:	mov    WORD PTR [r12+0xe8],ax
  404b57:	mov    rax,QWORD PTR [r12+0x68]
  404b5c:	mov    QWORD PTR [r12+0xf0],0x0
  404b68:	mov    QWORD PTR [r12+0x18],rax
  404b6d:	mov    rax,QWORD PTR [r12+0x88]
  404b75:	mov    QWORD PTR [r12+0x20],0x0
  404b7e:	mov    QWORD PTR [r12],rax
  404b82:	mov    rax,QWORD PTR [r12+0x58]
  404b87:	mov    QWORD PTR [r12+0xfc],0x0
  404b93:	mov    QWORD PTR [r12+0x104],0x0
  404b9f:	mov    QWORD PTR [r12+0x8],rax
  404ba4:	mov    QWORD PTR [r12+0x30],0x0
  404bad:	test   r14d,r14d
  404bb0:	jne    404bd0 <flatcc_builder_custom_reset@@Base+0x140>
  404bb2:	mov    eax,DWORD PTR [r12+0x128]
  404bba:	test   eax,eax
  404bbc:	jne    404bf4 <flatcc_builder_custom_reset@@Base+0x164>
  404bbe:	pop    rbx
  404bbf:	pop    rbp
  404bc0:	pop    r12
  404bc2:	pop    r13
  404bc4:	pop    r14
  404bc6:	ret    
  404bc7:	nop    WORD PTR [rax+rax*1+0x0]
  404bd0:	mov    eax,DWORD PTR [r12+0x128]
  404bd8:	mov    QWORD PTR [r12+0x118],0x0
  404be4:	mov    QWORD PTR [r12+0x120],0x0
  404bf0:	test   eax,eax
  404bf2:	je     404bbe <flatcc_builder_custom_reset@@Base+0x12e>
  404bf4:	lea    rdi,[r12+0x130]
  404bfc:	call   408310 <flatcc_emitter_reset@@Base>
  404c01:	pop    rbx
  404c02:	pop    rbp
  404c03:	pop    r12
  404c05:	pop    r13
  404c07:	xor    eax,eax
  404c09:	pop    r14
  404c0b:	ret    
  404c0c:	nop    DWORD PTR [rax+0x0]
  404c10:	pop    rbx
  404c11:	pop    rbp
  404c12:	pop    r12
  404c14:	pop    r13
  404c16:	mov    eax,0xffffffff
  404c1b:	pop    r14
  404c1d:	ret    
  404c1e:	xchg   ax,ax

0000000000404c20 <flatcc_builder_reset@@Base>:
  404c20:	endbr64 
  404c24:	xor    edx,edx
  404c26:	xor    esi,esi
  404c28:	jmp    404a90 <flatcc_builder_custom_reset@@Base>
  404c2d:	nop    DWORD PTR [rax]

0000000000404c30 <flatcc_builder_clear@@Base>:
  404c30:	endbr64 
  404c34:	push   r12
  404c36:	lea    r12,[rdi+0x58]
  404c3a:	push   rbp
  404c3b:	xor    ebp,ebp
  404c3d:	push   rbx
  404c3e:	mov    rbx,rdi
  404c41:	nop    DWORD PTR [rax+0x0]
  404c48:	mov    rdi,QWORD PTR [rbx+0x40]
  404c4c:	mov    r8d,ebp
  404c4f:	mov    rsi,r12
  404c52:	xor    ecx,ecx
  404c54:	xor    edx,edx
  404c56:	inc    ebp
  404c58:	call   QWORD PTR [rbx+0x50]
  404c5b:	add    r12,0x10
  404c5f:	cmp    ebp,0x8
  404c62:	jne    404c48 <flatcc_builder_clear@@Base+0x18>
  404c64:	mov    eax,DWORD PTR [rbx+0x128]
  404c6a:	test   eax,eax
  404c6c:	jne    404ca0 <flatcc_builder_clear@@Base+0x70>
  404c6e:	lea    rdi,[rbx+0x8]
  404c72:	and    rdi,0xfffffffffffffff8
  404c76:	mov    QWORD PTR [rbx],0x0
  404c7d:	mov    QWORD PTR [rbx+0x180],0x0
  404c88:	sub    rbx,rdi
  404c8b:	lea    ecx,[rbx+0x188]
  404c91:	shr    ecx,0x3
  404c94:	xor    eax,eax
  404c96:	rep stos QWORD PTR es:[rdi],rax
  404c99:	pop    rbx
  404c9a:	pop    rbp
  404c9b:	pop    r12
  404c9d:	ret    
  404c9e:	xchg   ax,ax
  404ca0:	lea    rdi,[rbx+0x130]
  404ca7:	call   408400 <flatcc_emitter_clear@@Base>
  404cac:	jmp    404c6e <flatcc_builder_clear@@Base+0x3e>
  404cae:	xchg   ax,ax

0000000000404cb0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404cb0:	endbr64 
  404cb4:	push   r12
  404cb6:	push   rbp
  404cb7:	lea    rbp,[rsi+0x7]
  404cbb:	and    rbp,0xfffffffffffffff8
  404cbf:	push   rbx
  404cc0:	add    rbp,0x8
  404cc4:	mov    rbx,rdi
  404cc7:	mov    r12,QWORD PTR [rdi+0x180]
  404cce:	lea    rdx,[r12+rbp*1]
  404cd2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404cd9:	jbe    404cf5 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  404cdb:	lea    rsi,[rdi+0xc8]
  404ce2:	mov    rdi,QWORD PTR [rdi+0x40]
  404ce6:	xor    ecx,ecx
  404ce8:	mov    r8d,0x7
  404cee:	call   QWORD PTR [rbx+0x50]
  404cf1:	test   eax,eax
  404cf3:	jne    404d47 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  404cf5:	add    r12,QWORD PTR [rbx+0xc8]
  404cfc:	je     404d40 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  404cfe:	mov    rdx,rbp
  404d01:	mov    rdi,r12
  404d04:	xor    esi,esi
  404d06:	call   403140 <memset@plt>
  404d0b:	mov    rdx,QWORD PTR [rbx+0x178]
  404d12:	lea    rax,[r12+0x8]
  404d17:	mov    QWORD PTR [r12],rdx
  404d1b:	mov    rdx,QWORD PTR [rbx+0x180]
  404d22:	add    rbp,rdx
  404d25:	lea    rcx,[rdx+0x8]
  404d29:	mov    QWORD PTR [rbx+0x180],rbp
  404d30:	mov    QWORD PTR [rbx+0x178],rcx
  404d37:	pop    rbx
  404d38:	pop    rbp
  404d39:	pop    r12
  404d3b:	ret    
  404d3c:	nop    DWORD PTR [rax+0x0]
  404d40:	pop    rbx
  404d41:	pop    rbp
  404d42:	xor    eax,eax
  404d44:	pop    r12
  404d46:	ret    
  404d47:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  404d4c:	nop    DWORD PTR [rax+0x0]

0000000000404d50 <flatcc_builder_enter_user_frame@@Base>:
  404d50:	endbr64 
  404d54:	push   r12
  404d56:	push   rbp
  404d57:	mov    rbp,rdi
  404d5a:	push   rbx
  404d5b:	lea    rbx,[rsi+0x7]
  404d5f:	and    rbx,0xfffffffffffffff8
  404d63:	mov    r12,QWORD PTR [rdi+0x180]
  404d6a:	add    rbx,0x8
  404d6e:	lea    rdx,[r12+rbx*1]
  404d72:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404d79:	jbe    404d95 <flatcc_builder_enter_user_frame@@Base+0x45>
  404d7b:	lea    rsi,[rdi+0xc8]
  404d82:	mov    rdi,QWORD PTR [rdi+0x40]
  404d86:	xor    ecx,ecx
  404d88:	mov    r8d,0x7
  404d8e:	call   QWORD PTR [rbp+0x50]
  404d91:	test   eax,eax
  404d93:	jne    404dda <flatcc_builder_enter_user_frame@@Base+0x8a>
  404d95:	add    r12,QWORD PTR [rbp+0xc8]
  404d9c:	je     404dd2 <flatcc_builder_enter_user_frame@@Base+0x82>
  404d9e:	mov    rdx,rbx
  404da1:	mov    rdi,r12
  404da4:	xor    esi,esi
  404da6:	call   403140 <memset@plt>
  404dab:	mov    rax,QWORD PTR [rbp+0x178]
  404db2:	mov    QWORD PTR [r12],rax
  404db6:	mov    rax,QWORD PTR [rbp+0x180]
  404dbd:	lea    r12,[rax+0x8]
  404dc1:	add    rbx,rax
  404dc4:	mov    QWORD PTR [rbp+0x178],r12
  404dcb:	mov    QWORD PTR [rbp+0x180],rbx
  404dd2:	pop    rbx
  404dd3:	pop    rbp
  404dd4:	mov    rax,r12
  404dd7:	pop    r12
  404dd9:	ret    
  404dda:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  404ddf:	nop

0000000000404de0 <flatcc_builder_exit_user_frame@@Base>:
  404de0:	endbr64 
  404de4:	mov    rax,QWORD PTR [rdi+0x178]
  404deb:	test   rax,rax
  404dee:	je     404e10 <flatcc_builder_exit_user_frame@@Base+0x30>
  404df0:	mov    edx,eax
  404df2:	sub    rax,0x8
  404df6:	mov    QWORD PTR [rdi+0x180],rax
  404dfd:	add    rdx,QWORD PTR [rdi+0xc8]
  404e04:	mov    rax,QWORD PTR [rdx-0x8]
  404e08:	mov    QWORD PTR [rdi+0x178],rax
  404e0f:	ret    
  404e10:	push   rax
  404e11:	lea    rcx,[rip+0x5058]        # 409e70 <_IO_stdin_used@@Base+0xe70>
  404e18:	mov    edx,0x21e
  404e1d:	lea    rsi,[rip+0x45ac]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404e24:	lea    rdi,[rip+0x495e]        # 409789 <_IO_stdin_used@@Base+0x789>
  404e2b:	call   403130 <__assert_fail@plt>

0000000000404e30 <flatcc_builder_exit_user_frame_at@@Base>:
  404e30:	endbr64 
  404e34:	cmp    QWORD PTR [rdi+0x178],rsi
  404e3b:	jb     404e49 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  404e3d:	mov    QWORD PTR [rdi+0x178],rsi
  404e44:	jmp    404de0 <flatcc_builder_exit_user_frame@@Base>
  404e49:	push   rax
  404e4a:	lea    rcx,[rip+0x4fef]        # 409e40 <_IO_stdin_used@@Base+0xe40>
  404e51:	mov    edx,0x227
  404e56:	lea    rsi,[rip+0x4573]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404e5d:	lea    rdi,[rip+0x45cc]        # 409430 <_IO_stdin_used@@Base+0x430>
  404e64:	call   403130 <__assert_fail@plt>
  404e69:	nop    DWORD PTR [rax+0x0]

0000000000404e70 <flatcc_builder_get_current_user_frame@@Base>:
  404e70:	endbr64 
  404e74:	mov    rax,QWORD PTR [rdi+0x178]
  404e7b:	ret    
  404e7c:	nop    DWORD PTR [rax+0x0]

0000000000404e80 <flatcc_builder_get_user_frame_ptr@@Base>:
  404e80:	endbr64 
  404e84:	mov    eax,esi
  404e86:	add    rax,QWORD PTR [rdi+0xc8]
  404e8d:	ret    
  404e8e:	xchg   ax,ax

0000000000404e90 <flatcc_builder_embed_buffer@@Base>:
  404e90:	endbr64 
  404e94:	push   r13
  404e96:	mov    r13d,r9d
  404e99:	push   r12
  404e9b:	mov    r12,rcx
  404e9e:	push   rbp
  404e9f:	mov    rbp,rdx
  404ea2:	movzx  edx,si
  404ea5:	push   rbx
  404ea6:	mov    rbx,rdi
  404ea9:	sub    rsp,0xc8
  404eb0:	mov    WORD PTR [rsp+0xc],r8w
  404eb6:	mov    r8d,DWORD PTR [rdi+0x100]
  404ebd:	mov    rax,QWORD PTR fs:0x28
  404ec6:	mov    QWORD PTR [rsp+0xb8],rax
  404ece:	xor    eax,eax
  404ed0:	test   r8d,r8d
  404ed3:	setne  cl
  404ed6:	lea    rax,[rsp+0xc]
  404edb:	movzx  ecx,cl
  404ede:	mov    rsi,rax
  404ee1:	call   4044c0 <flatcc_builder_default_alloc@@Base+0x190>
  404ee6:	test   eax,eax
  404ee8:	jne    405020 <flatcc_builder_embed_buffer@@Base+0x190>
  404eee:	mov    edx,DWORD PTR [rbx+0xf0]
  404ef4:	xor    esi,esi
  404ef6:	and    r13d,0x2
  404efa:	setne  sil
  404efe:	movzx  ecx,WORD PTR [rsp+0xc]
  404f03:	mov    eax,edx
  404f05:	shl    esi,0x2
  404f08:	sub    eax,r12d
  404f0b:	dec    ecx
  404f0d:	sub    eax,esi
  404f0f:	and    eax,ecx
  404f11:	lea    ecx,[rax+r12*1]
  404f15:	mov    DWORD PTR [rsp+0x1c],ecx
  404f19:	mov    ecx,DWORD PTR [rbx+0x100]
  404f1f:	mov    QWORD PTR [rsp+0x20],0x0
  404f28:	mov    DWORD PTR [rsp+0x28],0x0
  404f30:	xor    r8d,r8d
  404f33:	test   ecx,ecx
  404f35:	je     404f61 <flatcc_builder_embed_buffer@@Base+0xd1>
  404f37:	lea    rcx,[rsp+0x1c]
  404f3c:	mov    QWORD PTR [rsp+0x20],0x4
  404f45:	mov    QWORD PTR [rsp+0x30],rcx
  404f4a:	mov    QWORD PTR [rsp+0x38],0x4
  404f53:	mov    DWORD PTR [rsp+0x28],0x1
  404f5b:	mov    r8d,0x4
  404f61:	test   r12,r12
  404f64:	je     404f8a <flatcc_builder_embed_buffer@@Base+0xfa>
  404f66:	movsxd rsi,DWORD PTR [rsp+0x28]
  404f6b:	add    r8,r12
  404f6e:	mov    rcx,rsi
  404f71:	inc    ecx
  404f73:	shl    rsi,0x4
  404f77:	mov    QWORD PTR [rsp+0x20],r8
  404f7c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  404f81:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  404f86:	mov    DWORD PTR [rsp+0x28],ecx
  404f8a:	test   eax,eax
  404f8c:	jne    404ff0 <flatcc_builder_embed_buffer@@Base+0x160>
  404f8e:	mov    ebp,edx
  404f90:	sub    ebp,r8d
  404f93:	cmp    edx,ebp
  404f95:	jle    405024 <flatcc_builder_embed_buffer@@Base+0x194>
  404f9b:	movabs rax,0x10000000f
  404fa5:	cmp    r8,rax
  404fa8:	ja     405024 <flatcc_builder_embed_buffer@@Base+0x194>
  404faa:	mov    rdi,QWORD PTR [rbx+0x38]
  404fae:	mov    edx,DWORD PTR [rsp+0x28]
  404fb2:	lea    rsi,[rsp+0x30]
  404fb7:	mov    ecx,ebp
  404fb9:	call   QWORD PTR [rbx+0x48]
  404fbc:	test   eax,eax
  404fbe:	jne    405048 <flatcc_builder_embed_buffer@@Base+0x1b8>
  404fc4:	mov    DWORD PTR [rbx+0xf0],ebp
  404fca:	mov    rdi,QWORD PTR [rsp+0xb8]
  404fd2:	xor    rdi,QWORD PTR fs:0x28
  404fdb:	mov    eax,ebp
  404fdd:	jne    405043 <flatcc_builder_embed_buffer@@Base+0x1b3>
  404fdf:	add    rsp,0xc8
  404fe6:	pop    rbx
  404fe7:	pop    rbp
  404fe8:	pop    r12
  404fea:	pop    r13
  404fec:	ret    
  404fed:	nop    DWORD PTR [rax]
  404ff0:	movsxd rsi,DWORD PTR [rsp+0x28]
  404ff5:	mov    rdi,0x409ec0
  404ffc:	mov    rcx,rsi
  404fff:	add    r8,rax
  405002:	shl    rsi,0x4
  405006:	inc    ecx
  405008:	mov    QWORD PTR [rsp+0x20],r8
  40500d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405012:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  405017:	mov    DWORD PTR [rsp+0x28],ecx
  40501b:	jmp    404f8e <flatcc_builder_embed_buffer@@Base+0xfe>
  405020:	xor    ebp,ebp
  405022:	jmp    404fca <flatcc_builder_embed_buffer@@Base+0x13a>
  405024:	lea    rcx,[rip+0x4de5]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  40502b:	mov    edx,0x287
  405030:	lea    rsi,[rip+0x4399]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405037:	lea    rdi,[rip+0x4729]        # 409767 <_IO_stdin_used@@Base+0x767>
  40503e:	call   403130 <__assert_fail@plt>
  405043:	call   403120 <__stack_chk_fail@plt>
  405048:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  40504d:	nop    DWORD PTR [rax]

0000000000405050 <flatcc_builder_create_buffer@@Base>:
  405050:	endbr64 
  405054:	push   r14
  405056:	movzx  edx,dx
  405059:	mov    r14,rsi
  40505c:	push   r13
  40505e:	mov    r13d,r9d
  405061:	push   r12
  405063:	mov    r12d,r9d
  405066:	and    r12d,0x1
  40506a:	push   rbp
  40506b:	mov    rbp,rdi
  40506e:	push   rbx
  40506f:	mov    ebx,ecx
  405071:	mov    ecx,r12d
  405074:	sub    rsp,0xc0
  40507b:	mov    WORD PTR [rsp+0xc],r8w
  405081:	lea    rsi,[rsp+0xc]
  405086:	mov    rax,QWORD PTR fs:0x28
  40508f:	mov    QWORD PTR [rsp+0xb8],rax
  405097:	xor    eax,eax
  405099:	mov    DWORD PTR [rsp+0x1c],0x0
  4050a1:	call   4044c0 <flatcc_builder_default_alloc@@Base+0x190>
  4050a6:	test   eax,eax
  4050a8:	jne    405248 <flatcc_builder_create_buffer@@Base+0x1f8>
  4050ae:	movzx  esi,WORD PTR [rsp+0xc]
  4050b3:	cmp    si,WORD PTR [rbp+0xe8]
  4050ba:	jbe    4050c3 <flatcc_builder_create_buffer@@Base+0x73>
  4050bc:	mov    WORD PTR [rbp+0xe8],si
  4050c3:	mov    edx,DWORD PTR [rsp+0x1c]
  4050c7:	test   r14,r14
  4050ca:	je     4050d3 <flatcc_builder_create_buffer@@Base+0x83>
  4050cc:	mov    edx,DWORD PTR [r14]
  4050cf:	mov    DWORD PTR [rsp+0x1c],edx
  4050d3:	test   edx,edx
  4050d5:	mov    eax,0x4
  4050da:	mov    ecx,DWORD PTR [rbp+0xf0]
  4050e0:	cmovne rdx,rax
  4050e4:	xor    edi,edi
  4050e6:	test   r13b,0x2
  4050ea:	setne  dil
  4050ee:	lea    eax,[rcx-0x4]
  4050f1:	shl    edi,0x2
  4050f4:	sub    eax,edx
  4050f6:	sub    eax,edi
  4050f8:	dec    esi
  4050fa:	and    eax,esi
  4050fc:	and    r13d,0x3
  405100:	jne    405218 <flatcc_builder_create_buffer@@Base+0x1c8>
  405106:	xor    r9d,r9d
  405109:	mov    esi,0x1
  40510e:	mov    r8d,0x4
  405114:	movsxd rdi,r9d
  405117:	shl    rdi,0x4
  40511b:	lea    r10,[rsp+0x14]
  405120:	mov    QWORD PTR [rsp+0x20],r8
  405125:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  40512a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  405133:	mov    DWORD PTR [rsp+0x28],esi
  405137:	test   edx,edx
  405139:	je     40515f <flatcc_builder_create_buffer@@Base+0x10f>
  40513b:	shl    rsi,0x4
  40513f:	add    r8,rdx
  405142:	lea    rdi,[rsp+0x1c]
  405147:	add    r9d,0x2
  40514b:	mov    QWORD PTR [rsp+0x20],r8
  405150:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405155:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  40515a:	mov    DWORD PTR [rsp+0x28],r9d
  40515f:	test   eax,eax
  405161:	je     40518e <flatcc_builder_create_buffer@@Base+0x13e>
  405163:	movsxd rsi,DWORD PTR [rsp+0x28]
  405168:	mov    rdi,0x409ec0
  40516f:	mov    rdx,rsi
  405172:	add    r8,rax
  405175:	shl    rsi,0x4
  405179:	inc    edx
  40517b:	mov    QWORD PTR [rsp+0x20],r8
  405180:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405185:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  40518a:	mov    DWORD PTR [rsp+0x28],edx
  40518e:	mov    eax,ecx
  405190:	sub    eax,r8d
  405193:	lea    edx,[rax+0x4]
  405196:	test   r13d,r13d
  405199:	cmovne eax,edx
  40519c:	test   r12d,r12d
  40519f:	je     405250 <flatcc_builder_create_buffer@@Base+0x200>
  4051a5:	mov    edx,DWORD PTR [rbp+0xf8]
  4051ab:	sub    edx,eax
  4051ad:	sub    ebx,eax
  4051af:	mov    DWORD PTR [rsp+0x14],ebx
  4051b3:	mov    ebx,ecx
  4051b5:	sub    ebx,r8d
  4051b8:	mov    DWORD PTR [rsp+0x18],edx
  4051bc:	cmp    ecx,ebx
  4051be:	jle    40525d <flatcc_builder_create_buffer@@Base+0x20d>
  4051c4:	mov    rdi,QWORD PTR [rbp+0x38]
  4051c8:	mov    edx,DWORD PTR [rsp+0x28]
  4051cc:	lea    rsi,[rsp+0x30]
  4051d1:	mov    ecx,ebx
  4051d3:	call   QWORD PTR [rbp+0x48]
  4051d6:	test   eax,eax
  4051d8:	jne    405281 <flatcc_builder_create_buffer@@Base+0x231>
  4051de:	mov    DWORD PTR [rbp+0xf0],ebx
  4051e4:	test   ebx,ebx
  4051e6:	je     405286 <flatcc_builder_create_buffer@@Base+0x236>
  4051ec:	mov    rcx,QWORD PTR [rsp+0xb8]
  4051f4:	xor    rcx,QWORD PTR fs:0x28
  4051fd:	mov    eax,ebx
  4051ff:	jne    40527c <flatcc_builder_create_buffer@@Base+0x22c>
  405201:	add    rsp,0xc0
  405208:	pop    rbx
  405209:	pop    rbp
  40520a:	pop    r12
  40520c:	pop    r13
  40520e:	pop    r14
  405210:	ret    
  405211:	nop    DWORD PTR [rax+0x0]
  405218:	lea    rsi,[rsp+0x18]
  40521d:	mov    QWORD PTR [rsp+0x30],rsi
  405222:	mov    QWORD PTR [rsp+0x38],0x4
  40522b:	mov    esi,0x2
  405230:	mov    r9d,0x1
  405236:	mov    r8d,0x8
  40523c:	jmp    405114 <flatcc_builder_create_buffer@@Base+0xc4>
  405241:	nop    DWORD PTR [rax+0x0]
  405248:	xor    ebx,ebx
  40524a:	jmp    4051ec <flatcc_builder_create_buffer@@Base+0x19c>
  40524c:	nop    DWORD PTR [rax+0x0]
  405250:	mov    edx,DWORD PTR [rbp+0xf4]
  405256:	sub    edx,eax
  405258:	jmp    4051ad <flatcc_builder_create_buffer@@Base+0x15d>
  40525d:	lea    rcx,[rip+0x4bac]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  405264:	mov    edx,0x287
  405269:	lea    rsi,[rip+0x4160]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405270:	lea    rdi,[rip+0x44f0]        # 409767 <_IO_stdin_used@@Base+0x767>
  405277:	call   403130 <__assert_fail@plt>
  40527c:	call   403120 <__stack_chk_fail@plt>
  405281:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  405286:	lea    rcx,[rip+0x4b63]        # 409df0 <_IO_stdin_used@@Base+0xdf0>
  40528d:	mov    edx,0x304
  405292:	lea    rsi,[rip+0x4137]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405299:	lea    rdi,[rip+0x44c7]        # 409767 <_IO_stdin_used@@Base+0x767>
  4052a0:	call   403130 <__assert_fail@plt>
  4052a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004052b0 <flatcc_builder_create_struct@@Base>:
  4052b0:	endbr64 
  4052b4:	push   rbp
  4052b5:	push   rbx
  4052b6:	sub    rsp,0xa8
  4052bd:	mov    rax,QWORD PTR fs:0x28
  4052c6:	mov    QWORD PTR [rsp+0x98],rax
  4052ce:	xor    eax,eax
  4052d0:	test   cx,cx
  4052d3:	je     4053f3 <flatcc_builder_create_struct@@Base+0x143>
  4052d9:	mov    r8,rdx
  4052dc:	mov    rbx,rdi
  4052df:	movzx  edx,cx
  4052e2:	cmp    cx,WORD PTR [rdi+0xe8]
  4052e9:	jbe    4052f2 <flatcc_builder_create_struct@@Base+0x42>
  4052eb:	mov    WORD PTR [rdi+0xe8],cx
  4052f2:	mov    ecx,DWORD PTR [rbx+0xf0]
  4052f8:	dec    edx
  4052fa:	mov    eax,ecx
  4052fc:	sub    eax,r8d
  4052ff:	and    eax,edx
  405301:	mov    edx,eax
  405303:	mov    QWORD PTR [rsp],0x0
  40530b:	mov    DWORD PTR [rsp+0x8],0x0
  405313:	test   r8,r8
  405316:	jne    4053a8 <flatcc_builder_create_struct@@Base+0xf8>
  40531c:	test   eax,eax
  40531e:	je     4053d4 <flatcc_builder_create_struct@@Base+0x124>
  405324:	mov    r8,rdx
  405327:	mov    esi,0x1
  40532c:	xor    eax,eax
  40532e:	mov    rdi,0x409ec0
  405335:	shl    rax,0x4
  405339:	mov    QWORD PTR [rsp],r8
  40533d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  405342:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  405347:	mov    DWORD PTR [rsp+0x8],esi
  40534b:	mov    ebp,ecx
  40534d:	movabs rax,0x10000000f
  405357:	sub    ebp,r8d
  40535a:	cmp    r8,rax
  40535d:	ja     4053d4 <flatcc_builder_create_struct@@Base+0x124>
  40535f:	cmp    ecx,ebp
  405361:	jle    4053d4 <flatcc_builder_create_struct@@Base+0x124>
  405363:	mov    rdi,QWORD PTR [rbx+0x38]
  405367:	mov    edx,DWORD PTR [rsp+0x8]
  40536b:	lea    rsi,[rsp+0x10]
  405370:	mov    ecx,ebp
  405372:	call   QWORD PTR [rbx+0x48]
  405375:	test   eax,eax
  405377:	jne    405412 <flatcc_builder_create_struct@@Base+0x162>
  40537d:	mov    DWORD PTR [rbx+0xf0],ebp
  405383:	mov    eax,ebp
  405385:	mov    rdi,QWORD PTR [rsp+0x98]
  40538d:	xor    rdi,QWORD PTR fs:0x28
  405396:	jne    405417 <flatcc_builder_create_struct@@Base+0x167>
  405398:	add    rsp,0xa8
  40539f:	pop    rbx
  4053a0:	pop    rbp
  4053a1:	ret    
  4053a2:	nop    WORD PTR [rax+rax*1+0x0]
  4053a8:	mov    QWORD PTR [rsp],r8
  4053ac:	mov    QWORD PTR [rsp+0x10],rsi
  4053b1:	mov    QWORD PTR [rsp+0x18],r8
  4053b6:	mov    DWORD PTR [rsp+0x8],0x1
  4053be:	test   eax,eax
  4053c0:	je     40534b <flatcc_builder_create_struct@@Base+0x9b>
  4053c2:	add    r8,rdx
  4053c5:	mov    esi,0x2
  4053ca:	mov    eax,0x1
  4053cf:	jmp    40532e <flatcc_builder_create_struct@@Base+0x7e>
  4053d4:	lea    rcx,[rip+0x4a35]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  4053db:	mov    edx,0x287
  4053e0:	lea    rsi,[rip+0x3fe9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4053e7:	lea    rdi,[rip+0x4379]        # 409767 <_IO_stdin_used@@Base+0x767>
  4053ee:	call   403130 <__assert_fail@plt>
  4053f3:	lea    rcx,[rip+0x49d6]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  4053fa:	mov    edx,0x30f
  4053ff:	lea    rsi,[rip+0x3fca]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405406:	lea    rdi,[rip+0x4395]        # 4097a2 <_IO_stdin_used@@Base+0x7a2>
  40540d:	call   403130 <__assert_fail@plt>
  405412:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  405417:	call   403120 <__stack_chk_fail@plt>
  40541c:	nop    DWORD PTR [rax+0x0]

0000000000405420 <flatcc_builder_start_buffer@@Base>:
  405420:	endbr64 
  405424:	push   r13
  405426:	mov    r13d,edx
  405429:	push   r12
  40542b:	mov    r12d,ecx
  40542e:	push   rbp
  40542f:	mov    rbp,rsi
  405432:	push   rbx
  405433:	mov    rbx,rdi
  405436:	sub    rsp,0x8
  40543a:	movzx  esi,WORD PTR [rdi+0xe8]
  405441:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  405446:	test   eax,eax
  405448:	jne    4054f8 <flatcc_builder_start_buffer@@Base+0xd8>
  40544e:	movzx  edx,WORD PTR [rbx+0xec]
  405455:	mov    rsi,QWORD PTR [rbx+0x30]
  405459:	mov    ecx,0x1
  40545e:	mov    WORD PTR [rbx+0xe8],cx
  405465:	mov    WORD PTR [rsi+0x22],dx
  405469:	movzx  edx,WORD PTR [rbx+0x10c]
  405470:	mov    WORD PTR [rbx+0xec],r13w
  405478:	mov    WORD PTR [rsi+0x20],dx
  40547c:	mov    edx,DWORD PTR [rbx+0xf8]
  405482:	mov    WORD PTR [rbx+0x10c],r12w
  40548a:	mov    DWORD PTR [rsi+0x14],edx
  40548d:	mov    edx,DWORD PTR [rbx+0x100]
  405493:	mov    DWORD PTR [rsi+0x1c],edx
  405496:	mov    edx,DWORD PTR [rbx+0xf0]
  40549c:	mov    DWORD PTR [rbx+0xf8],edx
  4054a2:	mov    edx,DWORD PTR [rbx+0xfc]
  4054a8:	lea    ecx,[rdx+0x1]
  4054ab:	mov    DWORD PTR [rbx+0x100],edx
  4054b1:	mov    edx,DWORD PTR [rbx+0x110]
  4054b7:	mov    DWORD PTR [rbx+0xfc],ecx
  4054bd:	mov    DWORD PTR [rsi+0x10],edx
  4054c0:	test   rbp,rbp
  4054c3:	je     4054e8 <flatcc_builder_start_buffer@@Base+0xc8>
  4054c5:	mov    edx,DWORD PTR [rbp+0x0]
  4054c8:	mov    DWORD PTR [rbx+0x110],edx
  4054ce:	mov    edx,0x1
  4054d3:	mov    WORD PTR [rsi+0xe],dx
  4054d7:	add    rsp,0x8
  4054db:	pop    rbx
  4054dc:	pop    rbp
  4054dd:	pop    r12
  4054df:	pop    r13
  4054e1:	ret    
  4054e2:	nop    WORD PTR [rax+rax*1+0x0]
  4054e8:	mov    rbp,0x409ec0
  4054ef:	jmp    4054c5 <flatcc_builder_start_buffer@@Base+0xa5>
  4054f1:	nop    DWORD PTR [rax+0x0]
  4054f8:	mov    eax,0xffffffff
  4054fd:	jmp    4054d7 <flatcc_builder_start_buffer@@Base+0xb7>
  4054ff:	nop

0000000000405500 <flatcc_builder_end_buffer@@Base>:
  405500:	endbr64 
  405504:	push   rbp
  405505:	xor    eax,eax
  405507:	push   rbx
  405508:	sub    rsp,0x8
  40550c:	movzx  r9d,WORD PTR [rdi+0x10c]
  405514:	mov    edx,DWORD PTR [rdi+0x100]
  40551a:	and    r9d,0x2
  40551e:	test   edx,edx
  405520:	setne  al
  405523:	movzx  r9d,r9w
  405527:	or     r9d,eax
  40552a:	mov    rax,QWORD PTR [rdi+0x30]
  40552e:	cmp    WORD PTR [rax+0xe],0x1
  405533:	jne    405624 <flatcc_builder_end_buffer@@Base+0x124>
  405539:	movzx  edx,WORD PTR [rdi+0xec]
  405540:	movzx  eax,WORD PTR [rdi+0xe8]
  405547:	mov    rbx,rdi
  40554a:	mov    ecx,esi
  40554c:	mov    r8d,edx
  40554f:	cmp    dx,ax
  405552:	ja     405618 <flatcc_builder_end_buffer@@Base+0x118>
  405558:	movzx  r8d,ax
  40555c:	lea    rsi,[rbx+0x110]
  405563:	mov    rdi,rbx
  405566:	call   405050 <flatcc_builder_create_buffer@@Base>
  40556b:	mov    ebp,eax
  40556d:	test   eax,eax
  40556f:	je     40560c <flatcc_builder_end_buffer@@Base+0x10c>
  405575:	mov    rax,QWORD PTR [rbx+0x30]
  405579:	mov    rdi,QWORD PTR [rbx+0x18]
  40557d:	mov    edx,DWORD PTR [rax+0x14]
  405580:	xor    esi,esi
  405582:	mov    DWORD PTR [rbx+0xf8],edx
  405588:	mov    edx,DWORD PTR [rax+0x1c]
  40558b:	mov    DWORD PTR [rbx+0x100],edx
  405591:	mov    edx,DWORD PTR [rax+0x10]
  405594:	movzx  eax,WORD PTR [rax+0x20]
  405598:	mov    DWORD PTR [rbx+0x110],edx
  40559e:	mov    WORD PTR [rbx+0x10c],ax
  4055a5:	mov    edx,DWORD PTR [rbx+0x20]
  4055a8:	call   403140 <memset@plt>
  4055ad:	mov    rax,QWORD PTR [rbx+0x30]
  4055b1:	mov    edi,DWORD PTR [rbx+0x70]
  4055b4:	mov    edx,DWORD PTR [rax+0x8]
  4055b7:	mov    esi,DWORD PTR [rax]
  4055b9:	mov    ecx,DWORD PTR [rax+0x4]
  4055bc:	mov    DWORD PTR [rbx+0x20],edx
  4055bf:	mov    rdx,rsi
  4055c2:	sub    edi,edx
  4055c4:	mov    DWORD PTR [rbx+0x28],esi
  4055c7:	mov    edx,edi
  4055c9:	add    rsi,QWORD PTR [rbx+0x68]
  4055cd:	cmp    ecx,edi
  4055cf:	cmovb  edx,ecx
  4055d2:	mov    QWORD PTR [rbx+0x18],rsi
  4055d6:	mov    DWORD PTR [rbx+0x24],edx
  4055d9:	movzx  edx,WORD PTR [rbx+0xea]
  4055e0:	mov    DWORD PTR [rax+0x4],ecx
  4055e3:	cmp    dx,WORD PTR [rbx+0xe8]
  4055ea:	jbe    4055f3 <flatcc_builder_end_buffer@@Base+0xf3>
  4055ec:	mov    WORD PTR [rbx+0xe8],dx
  4055f3:	movzx  edx,WORD PTR [rax+0xc]
  4055f7:	sub    rax,0x24
  4055fb:	dec    DWORD PTR [rbx+0x104]
  405601:	mov    WORD PTR [rbx+0xea],dx
  405608:	mov    QWORD PTR [rbx+0x30],rax
  40560c:	add    rsp,0x8
  405610:	pop    rbx
  405611:	mov    eax,ebp
  405613:	pop    rbp
  405614:	ret    
  405615:	nop    DWORD PTR [rax]
  405618:	mov    WORD PTR [rbx+0xe8],dx
  40561f:	jmp    40555c <flatcc_builder_end_buffer@@Base+0x5c>
  405624:	lea    rcx,[rip+0x4785]        # 409db0 <_IO_stdin_used@@Base+0xdb0>
  40562b:	mov    edx,0x346
  405630:	lea    rsi,[rip+0x3d99]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405637:	lea    rdi,[rip+0x3e12]        # 409450 <_IO_stdin_used@@Base+0x450>
  40563e:	call   403130 <__assert_fail@plt>
  405643:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40564e:	xchg   ax,ax

0000000000405650 <flatcc_builder_start_struct@@Base>:
  405650:	endbr64 
  405654:	push   r12
  405656:	push   rbp
  405657:	mov    rbp,rsi
  40565a:	movzx  esi,dx
  40565d:	push   rbx
  40565e:	mov    rbx,rdi
  405661:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  405666:	test   eax,eax
  405668:	jne    4056f0 <flatcc_builder_start_struct@@Base+0xa0>
  40566e:	mov    rcx,QWORD PTR [rbx+0x30]
  405672:	mov    eax,0x2
  405677:	mov    WORD PTR [rcx+0xe],ax
  40567b:	mov    eax,DWORD PTR [rbx+0x28]
  40567e:	mov    edi,DWORD PTR [rbx+0x70]
  405681:	mov    rdx,rax
  405684:	sub    edi,edx
  405686:	add    rax,QWORD PTR [rbx+0x68]
  40568a:	mov    QWORD PTR [rbx+0x18],rax
  40568e:	mov    edx,edi
  405690:	cmp    edi,0xfffffffc
  405693:	ja     4056c0 <flatcc_builder_start_struct@@Base+0x70>
  405695:	mov    DWORD PTR [rbx+0x24],edi
  405698:	mov    r12d,DWORD PTR [rbx+0x20]
  40569c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4056a3:	mov    rsi,r12
  4056a6:	add    esi,ebp
  4056a8:	mov    DWORD PTR [rbx+0x20],esi
  4056ab:	cmp    esi,edx
  4056ad:	jae    4056d0 <flatcc_builder_start_struct@@Base+0x80>
  4056af:	pop    rbx
  4056b0:	pop    rbp
  4056b1:	add    rax,r12
  4056b4:	pop    r12
  4056b6:	ret    
  4056b7:	nop    WORD PTR [rax+rax*1+0x0]
  4056c0:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  4056c7:	mov    edx,0xfffffffc
  4056cc:	jmp    405698 <flatcc_builder_start_struct@@Base+0x48>
  4056ce:	xchg   ax,ax
  4056d0:	inc    esi
  4056d2:	mov    edx,0xfffffffc
  4056d7:	mov    rdi,rbx
  4056da:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  4056df:	test   eax,eax
  4056e1:	jne    4056f0 <flatcc_builder_start_struct@@Base+0xa0>
  4056e3:	mov    rax,QWORD PTR [rbx+0x18]
  4056e7:	jmp    4056af <flatcc_builder_start_struct@@Base+0x5f>
  4056e9:	nop    DWORD PTR [rax+0x0]
  4056f0:	pop    rbx
  4056f1:	pop    rbp
  4056f2:	xor    eax,eax
  4056f4:	pop    r12
  4056f6:	ret    
  4056f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405700 <flatcc_builder_struct_edit@@Base>:
  405700:	endbr64 
  405704:	mov    rax,QWORD PTR [rdi+0x18]
  405708:	ret    
  405709:	nop    DWORD PTR [rax+0x0]

0000000000405710 <flatcc_builder_end_struct@@Base>:
  405710:	endbr64 
  405714:	push   rbp
  405715:	push   rbx
  405716:	sub    rsp,0x8
  40571a:	mov    rax,QWORD PTR [rdi+0x30]
  40571e:	cmp    WORD PTR [rax+0xe],0x2
  405723:	jne    4057c6 <flatcc_builder_end_struct@@Base+0xb6>
  405729:	movzx  ecx,WORD PTR [rdi+0xea]
  405730:	mov    edx,DWORD PTR [rdi+0x20]
  405733:	mov    rsi,QWORD PTR [rdi+0x18]
  405737:	mov    rbx,rdi
  40573a:	call   4052b0 <flatcc_builder_create_struct@@Base>
  40573f:	mov    ebp,eax
  405741:	test   eax,eax
  405743:	jne    405750 <flatcc_builder_end_struct@@Base+0x40>
  405745:	add    rsp,0x8
  405749:	pop    rbx
  40574a:	mov    eax,ebp
  40574c:	pop    rbp
  40574d:	ret    
  40574e:	xchg   ax,ax
  405750:	mov    edx,DWORD PTR [rbx+0x20]
  405753:	mov    rdi,QWORD PTR [rbx+0x18]
  405757:	xor    esi,esi
  405759:	call   403140 <memset@plt>
  40575e:	mov    rax,QWORD PTR [rbx+0x30]
  405762:	mov    edi,DWORD PTR [rbx+0x70]
  405765:	mov    edx,DWORD PTR [rax+0x8]
  405768:	mov    esi,DWORD PTR [rax]
  40576a:	mov    ecx,DWORD PTR [rax+0x4]
  40576d:	mov    DWORD PTR [rbx+0x20],edx
  405770:	mov    rdx,rsi
  405773:	sub    edi,edx
  405775:	mov    DWORD PTR [rbx+0x28],esi
  405778:	mov    edx,edi
  40577a:	add    rsi,QWORD PTR [rbx+0x68]
  40577e:	cmp    ecx,edi
  405780:	cmovb  edx,ecx
  405783:	mov    QWORD PTR [rbx+0x18],rsi
  405787:	mov    DWORD PTR [rbx+0x24],edx
  40578a:	movzx  edx,WORD PTR [rbx+0xea]
  405791:	mov    DWORD PTR [rax+0x4],ecx
  405794:	cmp    dx,WORD PTR [rbx+0xe8]
  40579b:	jbe    4057a4 <flatcc_builder_end_struct@@Base+0x94>
  40579d:	mov    WORD PTR [rbx+0xe8],dx
  4057a4:	movzx  edx,WORD PTR [rax+0xc]
  4057a8:	dec    DWORD PTR [rbx+0x104]
  4057ae:	sub    rax,0x24
  4057b2:	mov    QWORD PTR [rbx+0x30],rax
  4057b6:	mov    WORD PTR [rbx+0xea],dx
  4057bd:	add    rsp,0x8
  4057c1:	mov    eax,ebp
  4057c3:	pop    rbx
  4057c4:	pop    rbp
  4057c5:	ret    
  4057c6:	lea    rcx,[rip+0x45c3]        # 409d90 <_IO_stdin_used@@Base+0xd90>
  4057cd:	mov    edx,0x368
  4057d2:	lea    rsi,[rip+0x3bf7]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4057d9:	lea    rdi,[rip+0x3ca0]        # 409480 <_IO_stdin_used@@Base+0x480>
  4057e0:	call   403130 <__assert_fail@plt>
  4057e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004057f0 <flatcc_builder_extend_vector@@Base>:
  4057f0:	endbr64 
  4057f4:	push   rbp
  4057f5:	mov    eax,esi
  4057f7:	push   rbx
  4057f8:	sub    rsp,0x8
  4057fc:	mov    rdx,QWORD PTR [rdi+0x30]
  405800:	add    eax,DWORD PTR [rdx+0x14]
  405803:	setb   cl
  405806:	cmp    DWORD PTR [rdx+0x18],eax
  405809:	jb     405854 <flatcc_builder_extend_vector@@Base+0x64>
  40580b:	movzx  ecx,cl
  40580e:	test   ecx,ecx
  405810:	jne    405854 <flatcc_builder_extend_vector@@Base+0x64>
  405812:	imul   esi,DWORD PTR [rdx+0x10]
  405816:	mov    ebp,DWORD PTR [rdi+0x20]
  405819:	mov    DWORD PTR [rdx+0x14],eax
  40581c:	add    esi,ebp
  40581e:	mov    rbx,rdi
  405821:	mov    DWORD PTR [rdi+0x20],esi
  405824:	cmp    esi,DWORD PTR [rdi+0x24]
  405827:	jae    405840 <flatcc_builder_extend_vector@@Base+0x50>
  405829:	mov    rax,QWORD PTR [rbx+0x18]
  40582d:	add    rax,rbp
  405830:	add    rsp,0x8
  405834:	pop    rbx
  405835:	pop    rbp
  405836:	ret    
  405837:	nop    WORD PTR [rax+rax*1+0x0]
  405840:	inc    esi
  405842:	mov    edx,0xfffffffc
  405847:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  40584c:	test   eax,eax
  40584e:	je     405829 <flatcc_builder_extend_vector@@Base+0x39>
  405850:	xor    eax,eax
  405852:	jmp    405830 <flatcc_builder_extend_vector@@Base+0x40>
  405854:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  405859:	nop    DWORD PTR [rax+0x0]

0000000000405860 <flatcc_builder_vector_push@@Base>:
  405860:	endbr64 
  405864:	push   r13
  405866:	push   r12
  405868:	push   rbp
  405869:	push   rbx
  40586a:	sub    rsp,0x8
  40586e:	mov    rax,QWORD PTR [rdi+0x30]
  405872:	cmp    WORD PTR [rax+0xe],0x4
  405877:	jne    4058dd <flatcc_builder_vector_push@@Base+0x7d>
  405879:	mov    edx,DWORD PTR [rax+0x14]
  40587c:	cmp    edx,DWORD PTR [rax+0x18]
  40587f:	ja     4058fc <flatcc_builder_vector_push@@Base+0x9c>
  405881:	mov    ebp,DWORD PTR [rdi+0x20]
  405884:	mov    r12d,DWORD PTR [rax+0x10]
  405888:	mov    rcx,rbp
  40588b:	inc    edx
  40588d:	add    ecx,r12d
  405890:	mov    DWORD PTR [rax+0x14],edx
  405893:	mov    rbx,rdi
  405896:	mov    r13,rsi
  405899:	mov    DWORD PTR [rdi+0x20],ecx
  40589c:	cmp    ecx,DWORD PTR [rdi+0x24]
  40589f:	jae    4058c8 <flatcc_builder_vector_push@@Base+0x68>
  4058a1:	add    rbp,QWORD PTR [rbx+0x18]
  4058a5:	je     4058b5 <flatcc_builder_vector_push@@Base+0x55>
  4058a7:	mov    edx,r12d
  4058aa:	mov    rsi,r13
  4058ad:	mov    rdi,rbp
  4058b0:	call   403180 <memcpy@plt>
  4058b5:	add    rsp,0x8
  4058b9:	pop    rbx
  4058ba:	mov    rax,rbp
  4058bd:	pop    rbp
  4058be:	pop    r12
  4058c0:	pop    r13
  4058c2:	ret    
  4058c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4058c8:	lea    esi,[rcx+0x1]
  4058cb:	mov    edx,0xfffffffc
  4058d0:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  4058d5:	test   eax,eax
  4058d7:	je     4058a1 <flatcc_builder_vector_push@@Base+0x41>
  4058d9:	xor    ebp,ebp
  4058db:	jmp    4058b5 <flatcc_builder_vector_push@@Base+0x55>
  4058dd:	lea    rcx,[rip+0x446c]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  4058e4:	mov    edx,0x38b
  4058e9:	lea    rsi,[rip+0x3ae0]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4058f0:	lea    rdi,[rip+0x3bb9]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  4058f7:	call   403130 <__assert_fail@plt>
  4058fc:	lea    rcx,[rip+0x444d]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  405903:	mov    edx,0x38c
  405908:	lea    rsi,[rip+0x3ac1]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40590f:	lea    rdi,[rip+0x3bca]        # 4094e0 <_IO_stdin_used@@Base+0x4e0>
  405916:	call   403130 <__assert_fail@plt>
  40591b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405920 <flatcc_builder_append_vector@@Base>:
  405920:	endbr64 
  405924:	push   r13
  405926:	push   r12
  405928:	push   rbp
  405929:	push   rbx
  40592a:	sub    rsp,0x8
  40592e:	mov    rax,QWORD PTR [rdi+0x30]
  405932:	cmp    WORD PTR [rax+0xe],0x4
  405937:	jne    4059a6 <flatcc_builder_append_vector@@Base+0x86>
  405939:	mov    ecx,edx
  40593b:	mov    r13,rsi
  40593e:	xor    esi,esi
  405940:	add    ecx,DWORD PTR [rax+0x14]
  405943:	setb   sil
  405947:	cmp    DWORD PTR [rax+0x18],ecx
  40594a:	jb     4059c5 <flatcc_builder_append_vector@@Base+0xa5>
  40594c:	test   esi,esi
  40594e:	jne    4059c5 <flatcc_builder_append_vector@@Base+0xa5>
  405950:	mov    ebx,DWORD PTR [rax+0x10]
  405953:	mov    r12d,DWORD PTR [rdi+0x20]
  405957:	imul   ebx,edx
  40595a:	mov    rdx,r12
  40595d:	mov    DWORD PTR [rax+0x14],ecx
  405960:	add    edx,ebx
  405962:	mov    rbp,rdi
  405965:	mov    DWORD PTR [rdi+0x20],edx
  405968:	cmp    edx,DWORD PTR [rdi+0x24]
  40596b:	jae    405990 <flatcc_builder_append_vector@@Base+0x70>
  40596d:	add    r12,QWORD PTR [rbp+0x18]
  405971:	je     405980 <flatcc_builder_append_vector@@Base+0x60>
  405973:	mov    edx,ebx
  405975:	mov    rsi,r13
  405978:	mov    rdi,r12
  40597b:	call   403180 <memcpy@plt>
  405980:	add    rsp,0x8
  405984:	pop    rbx
  405985:	pop    rbp
  405986:	mov    rax,r12
  405989:	pop    r12
  40598b:	pop    r13
  40598d:	ret    
  40598e:	xchg   ax,ax
  405990:	lea    esi,[rdx+0x1]
  405993:	mov    edx,0xfffffffc
  405998:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  40599d:	test   eax,eax
  40599f:	je     40596d <flatcc_builder_append_vector@@Base+0x4d>
  4059a1:	xor    r12d,r12d
  4059a4:	jmp    405980 <flatcc_builder_append_vector@@Base+0x60>
  4059a6:	lea    rcx,[rip+0x4383]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  4059ad:	mov    edx,0x393
  4059b2:	lea    rsi,[rip+0x3a17]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4059b9:	lea    rdi,[rip+0x3af0]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  4059c0:	call   403130 <__assert_fail@plt>
  4059c5:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  4059ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004059d0 <flatcc_builder_extend_offset_vector@@Base>:
  4059d0:	endbr64 
  4059d4:	push   rbp
  4059d5:	mov    edx,esi
  4059d7:	push   rbx
  4059d8:	sub    rsp,0x8
  4059dc:	mov    rax,QWORD PTR [rdi+0x30]
  4059e0:	add    edx,DWORD PTR [rax+0x14]
  4059e3:	jb     405a25 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4059e5:	cmp    edx,0x3fffffff
  4059eb:	ja     405a25 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4059ed:	mov    ebp,DWORD PTR [rdi+0x20]
  4059f0:	mov    DWORD PTR [rax+0x14],edx
  4059f3:	lea    eax,[rbp+rsi*4+0x0]
  4059f7:	mov    rbx,rdi
  4059fa:	mov    DWORD PTR [rdi+0x20],eax
  4059fd:	cmp    eax,DWORD PTR [rdi+0x24]
  405a00:	jae    405a10 <flatcc_builder_extend_offset_vector@@Base+0x40>
  405a02:	mov    rax,QWORD PTR [rbx+0x18]
  405a06:	add    rax,rbp
  405a09:	add    rsp,0x8
  405a0d:	pop    rbx
  405a0e:	pop    rbp
  405a0f:	ret    
  405a10:	lea    esi,[rax+0x1]
  405a13:	mov    edx,0xfffffffc
  405a18:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  405a1d:	test   eax,eax
  405a1f:	je     405a02 <flatcc_builder_extend_offset_vector@@Base+0x32>
  405a21:	xor    eax,eax
  405a23:	jmp    405a09 <flatcc_builder_extend_offset_vector@@Base+0x39>
  405a25:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  405a2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a30 <flatcc_builder_offset_vector_push@@Base>:
  405a30:	endbr64 
  405a34:	push   r12
  405a36:	push   rbp
  405a37:	push   rbx
  405a38:	mov    rdx,QWORD PTR [rdi+0x30]
  405a3c:	cmp    WORD PTR [rdx+0xe],0x5
  405a41:	jne    405a98 <flatcc_builder_offset_vector_push@@Base+0x68>
  405a43:	mov    eax,DWORD PTR [rdx+0x14]
  405a46:	cmp    eax,0x3fffffff
  405a4b:	je     405a91 <flatcc_builder_offset_vector_push@@Base+0x61>
  405a4d:	mov    ebp,DWORD PTR [rdi+0x20]
  405a50:	inc    eax
  405a52:	mov    DWORD PTR [rdx+0x14],eax
  405a55:	lea    edx,[rbp+0x4]
  405a58:	mov    rbx,rdi
  405a5b:	mov    r12d,esi
  405a5e:	mov    DWORD PTR [rdi+0x20],edx
  405a61:	cmp    edx,DWORD PTR [rdi+0x24]
  405a64:	jae    405a80 <flatcc_builder_offset_vector_push@@Base+0x50>
  405a66:	mov    rax,rbp
  405a69:	add    rax,QWORD PTR [rbx+0x18]
  405a6d:	je     405a72 <flatcc_builder_offset_vector_push@@Base+0x42>
  405a6f:	mov    DWORD PTR [rax],r12d
  405a72:	pop    rbx
  405a73:	pop    rbp
  405a74:	pop    r12
  405a76:	ret    
  405a77:	nop    WORD PTR [rax+rax*1+0x0]
  405a80:	lea    esi,[rbp+0x5]
  405a83:	mov    edx,0xfffffffc
  405a88:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  405a8d:	test   eax,eax
  405a8f:	je     405a66 <flatcc_builder_offset_vector_push@@Base+0x36>
  405a91:	pop    rbx
  405a92:	pop    rbp
  405a93:	xor    eax,eax
  405a95:	pop    r12
  405a97:	ret    
  405a98:	lea    rcx,[rip+0x4261]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  405a9f:	mov    edx,0x3a6
  405aa4:	lea    rsi,[rip+0x3925]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405aab:	lea    rdi,[rip+0x3a6e]        # 409520 <_IO_stdin_used@@Base+0x520>
  405ab2:	call   403130 <__assert_fail@plt>
  405ab7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405ac0 <flatcc_builder_append_offset_vector@@Base>:
  405ac0:	endbr64 
  405ac4:	push   r13
  405ac6:	push   r12
  405ac8:	push   rbp
  405ac9:	push   rbx
  405aca:	sub    rsp,0x8
  405ace:	mov    rax,QWORD PTR [rdi+0x30]
  405ad2:	cmp    WORD PTR [rax+0xe],0x5
  405ad7:	jne    405b46 <flatcc_builder_append_offset_vector@@Base+0x86>
  405ad9:	mov    ecx,edx
  405adb:	add    ecx,DWORD PTR [rax+0x14]
  405ade:	jb     405b65 <flatcc_builder_append_offset_vector@@Base+0xa5>
  405ae4:	cmp    ecx,0x3fffffff
  405aea:	ja     405b65 <flatcc_builder_append_offset_vector@@Base+0xa5>
  405aec:	mov    r12d,DWORD PTR [rdi+0x20]
  405af0:	lea    ebx,[rdx*4+0x0]
  405af7:	mov    rdx,r12
  405afa:	add    edx,ebx
  405afc:	mov    DWORD PTR [rax+0x14],ecx
  405aff:	mov    rbp,rdi
  405b02:	mov    r13,rsi
  405b05:	mov    DWORD PTR [rdi+0x20],edx
  405b08:	cmp    edx,DWORD PTR [rdi+0x24]
  405b0b:	jae    405b30 <flatcc_builder_append_offset_vector@@Base+0x70>
  405b0d:	add    r12,QWORD PTR [rbp+0x18]
  405b11:	je     405b20 <flatcc_builder_append_offset_vector@@Base+0x60>
  405b13:	mov    edx,ebx
  405b15:	mov    rsi,r13
  405b18:	mov    rdi,r12
  405b1b:	call   403180 <memcpy@plt>
  405b20:	add    rsp,0x8
  405b24:	pop    rbx
  405b25:	pop    rbp
  405b26:	mov    rax,r12
  405b29:	pop    r12
  405b2b:	pop    r13
  405b2d:	ret    
  405b2e:	xchg   ax,ax
  405b30:	lea    esi,[rdx+0x1]
  405b33:	mov    edx,0xfffffffc
  405b38:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  405b3d:	test   eax,eax
  405b3f:	je     405b0d <flatcc_builder_append_offset_vector@@Base+0x4d>
  405b41:	xor    r12d,r12d
  405b44:	jmp    405b20 <flatcc_builder_append_offset_vector@@Base+0x60>
  405b46:	lea    rcx,[rip+0x4173]        # 409cc0 <_IO_stdin_used@@Base+0xcc0>
  405b4d:	mov    edx,0x3b4
  405b52:	lea    rsi,[rip+0x3877]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405b59:	lea    rdi,[rip+0x39c0]        # 409520 <_IO_stdin_used@@Base+0x520>
  405b60:	call   403130 <__assert_fail@plt>
  405b65:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  405b6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b70 <flatcc_builder_extend_string@@Base>:
  405b70:	endbr64 
  405b74:	push   rbp
  405b75:	push   rbx
  405b76:	sub    rsp,0x8
  405b7a:	mov    rax,QWORD PTR [rdi+0x30]
  405b7e:	cmp    WORD PTR [rax+0xe],0x6
  405b83:	jne    405bc9 <flatcc_builder_extend_string@@Base+0x59>
  405b85:	mov    edx,esi
  405b87:	add    edx,DWORD PTR [rax+0x14]
  405b8a:	jb     405bc4 <flatcc_builder_extend_string@@Base+0x54>
  405b8c:	mov    ebp,DWORD PTR [rdi+0x20]
  405b8f:	mov    DWORD PTR [rax+0x14],edx
  405b92:	add    esi,ebp
  405b94:	mov    rbx,rdi
  405b97:	mov    DWORD PTR [rdi+0x20],esi
  405b9a:	cmp    esi,DWORD PTR [rdi+0x24]
  405b9d:	jae    405bb0 <flatcc_builder_extend_string@@Base+0x40>
  405b9f:	mov    rax,QWORD PTR [rbx+0x18]
  405ba3:	add    rax,rbp
  405ba6:	add    rsp,0x8
  405baa:	pop    rbx
  405bab:	pop    rbp
  405bac:	ret    
  405bad:	nop    DWORD PTR [rax]
  405bb0:	inc    esi
  405bb2:	mov    edx,0xfffffffc
  405bb7:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  405bbc:	test   eax,eax
  405bbe:	je     405b9f <flatcc_builder_extend_string@@Base+0x2f>
  405bc0:	xor    eax,eax
  405bc2:	jmp    405ba6 <flatcc_builder_extend_string@@Base+0x36>
  405bc4:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  405bc9:	lea    rcx,[rip+0x40c0]        # 409c90 <_IO_stdin_used@@Base+0xc90>
  405bd0:	mov    edx,0x3bd
  405bd5:	lea    rsi,[rip+0x37f4]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405bdc:	lea    rdi,[rip+0x3975]        # 409558 <_IO_stdin_used@@Base+0x558>
  405be3:	call   403130 <__assert_fail@plt>
  405be8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405bf0 <flatcc_builder_append_string@@Base>:
  405bf0:	endbr64 
  405bf4:	push   r13
  405bf6:	push   r12
  405bf8:	push   rbp
  405bf9:	push   rbx
  405bfa:	sub    rsp,0x8
  405bfe:	mov    rax,QWORD PTR [rdi+0x30]
  405c02:	cmp    WORD PTR [rax+0xe],0x6
  405c07:	jne    405c6b <flatcc_builder_append_string@@Base+0x7b>
  405c09:	mov    rbp,rdx
  405c0c:	add    edx,DWORD PTR [rax+0x14]
  405c0f:	jb     405c66 <flatcc_builder_append_string@@Base+0x76>
  405c11:	mov    r12d,DWORD PTR [rdi+0x20]
  405c15:	mov    DWORD PTR [rax+0x14],edx
  405c18:	mov    rdx,r12
  405c1b:	add    edx,ebp
  405c1d:	mov    rbx,rdi
  405c20:	mov    r13,rsi
  405c23:	mov    DWORD PTR [rdi+0x20],edx
  405c26:	cmp    edx,DWORD PTR [rdi+0x24]
  405c29:	jae    405c50 <flatcc_builder_append_string@@Base+0x60>
  405c2b:	add    r12,QWORD PTR [rbx+0x18]
  405c2f:	je     405c3e <flatcc_builder_append_string@@Base+0x4e>
  405c31:	mov    edx,ebp
  405c33:	mov    rsi,r13
  405c36:	mov    rdi,r12
  405c39:	call   403180 <memcpy@plt>
  405c3e:	add    rsp,0x8
  405c42:	pop    rbx
  405c43:	pop    rbp
  405c44:	mov    rax,r12
  405c47:	pop    r12
  405c49:	pop    r13
  405c4b:	ret    
  405c4c:	nop    DWORD PTR [rax+0x0]
  405c50:	lea    esi,[rdx+0x1]
  405c53:	mov    edx,0xfffffffc
  405c58:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  405c5d:	test   eax,eax
  405c5f:	je     405c2b <flatcc_builder_append_string@@Base+0x3b>
  405c61:	xor    r12d,r12d
  405c64:	jmp    405c3e <flatcc_builder_append_string@@Base+0x4e>
  405c66:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  405c6b:	lea    rcx,[rip+0x3ffe]        # 409c70 <_IO_stdin_used@@Base+0xc70>
  405c72:	mov    edx,0x3c6
  405c77:	lea    rsi,[rip+0x3752]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405c7e:	lea    rdi,[rip+0x38d3]        # 409558 <_IO_stdin_used@@Base+0x558>
  405c85:	call   403130 <__assert_fail@plt>
  405c8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405c90 <flatcc_builder_append_string_str@@Base>:
  405c90:	endbr64 
  405c94:	push   rbp
  405c95:	mov    rbp,rdi
  405c98:	mov    rdi,rsi
  405c9b:	push   rbx
  405c9c:	mov    rbx,rsi
  405c9f:	sub    rsp,0x8
  405ca3:	call   403110 <strlen@plt>
  405ca8:	add    rsp,0x8
  405cac:	mov    rsi,rbx
  405caf:	pop    rbx
  405cb0:	mov    rdi,rbp
  405cb3:	mov    rdx,rax
  405cb6:	pop    rbp
  405cb7:	jmp    405bf0 <flatcc_builder_append_string@@Base>
  405cbc:	nop    DWORD PTR [rax+0x0]

0000000000405cc0 <flatcc_builder_append_string_strn@@Base>:
  405cc0:	endbr64 
  405cc4:	push   r12
  405cc6:	mov    r12,rdi
  405cc9:	push   rbp
  405cca:	mov    rbp,rsi
  405ccd:	mov    rdi,rbp
  405cd0:	push   rbx
  405cd1:	xor    esi,esi
  405cd3:	mov    rbx,rdx
  405cd6:	call   403150 <memchr@plt>
  405cdb:	mov    rdx,rax
  405cde:	sub    rdx,rbp
  405ce1:	test   rax,rax
  405ce4:	cmovne rbx,rdx
  405ce8:	mov    rsi,rbp
  405ceb:	mov    rdx,rbx
  405cee:	pop    rbx
  405cef:	pop    rbp
  405cf0:	mov    rdi,r12
  405cf3:	pop    r12
  405cf5:	jmp    405bf0 <flatcc_builder_append_string@@Base>
  405cfa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405d00 <flatcc_builder_truncate_vector@@Base>:
  405d00:	endbr64 
  405d04:	sub    rsp,0x8
  405d08:	mov    rax,QWORD PTR [rdi+0x30]
  405d0c:	cmp    WORD PTR [rax+0xe],0x4
  405d11:	jne    405d46 <flatcc_builder_truncate_vector@@Base+0x46>
  405d13:	mov    ecx,DWORD PTR [rax+0x14]
  405d16:	mov    rdx,rcx
  405d19:	cmp    rcx,rsi
  405d1c:	jb     405d65 <flatcc_builder_truncate_vector@@Base+0x65>
  405d1e:	sub    edx,esi
  405d20:	mov    DWORD PTR [rax+0x14],edx
  405d23:	imul   esi,DWORD PTR [rax+0x10]
  405d27:	mov    eax,DWORD PTR [rdi+0x20]
  405d2a:	mov    edx,esi
  405d2c:	sub    eax,esi
  405d2e:	mov    DWORD PTR [rdi+0x20],eax
  405d31:	add    rax,QWORD PTR [rdi+0x18]
  405d35:	mov    rdi,rax
  405d38:	xor    esi,esi
  405d3a:	call   403140 <memset@plt>
  405d3f:	xor    eax,eax
  405d41:	add    rsp,0x8
  405d45:	ret    
  405d46:	lea    rcx,[rip+0x3f03]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  405d4d:	mov    edx,0x3d9
  405d52:	lea    rsi,[rip+0x3677]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405d59:	lea    rdi,[rip+0x3750]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  405d60:	call   403130 <__assert_fail@plt>
  405d65:	lea    rcx,[rip+0x3ee4]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  405d6c:	mov    edx,0x3da
  405d71:	lea    rsi,[rip+0x3658]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405d78:	lea    rdi,[rip+0x3809]        # 409588 <_IO_stdin_used@@Base+0x588>
  405d7f:	call   403130 <__assert_fail@plt>
  405d84:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405d8f:	nop

0000000000405d90 <flatcc_builder_truncate_offset_vector@@Base>:
  405d90:	endbr64 
  405d94:	sub    rsp,0x8
  405d98:	mov    rax,QWORD PTR [rdi+0x30]
  405d9c:	cmp    WORD PTR [rax+0xe],0x5
  405da1:	jne    405dd2 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  405da3:	mov    edx,DWORD PTR [rax+0x14]
  405da6:	cmp    edx,esi
  405da8:	jb     405df1 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  405daa:	sub    edx,esi
  405dac:	mov    DWORD PTR [rax+0x14],edx
  405daf:	imul   esi,DWORD PTR [rax+0x10]
  405db3:	mov    eax,DWORD PTR [rdi+0x20]
  405db6:	mov    edx,esi
  405db8:	sub    eax,esi
  405dba:	mov    DWORD PTR [rdi+0x20],eax
  405dbd:	add    rax,QWORD PTR [rdi+0x18]
  405dc1:	mov    rdi,rax
  405dc4:	xor    esi,esi
  405dc6:	call   403140 <memset@plt>
  405dcb:	xor    eax,eax
  405dcd:	add    rsp,0x8
  405dd1:	ret    
  405dd2:	lea    rcx,[rip+0x3e47]        # 409c20 <_IO_stdin_used@@Base+0xc20>
  405dd9:	mov    edx,0x3e2
  405dde:	lea    rsi,[rip+0x35eb]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405de5:	lea    rdi,[rip+0x3734]        # 409520 <_IO_stdin_used@@Base+0x520>
  405dec:	call   403130 <__assert_fail@plt>
  405df1:	lea    rcx,[rip+0x3e28]        # 409c20 <_IO_stdin_used@@Base+0xc20>
  405df8:	mov    edx,0x3e3
  405dfd:	lea    rsi,[rip+0x35cc]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405e04:	lea    rdi,[rip+0x37a5]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  405e0b:	call   403130 <__assert_fail@plt>

0000000000405e10 <flatcc_builder_truncate_string@@Base>:
  405e10:	endbr64 
  405e14:	sub    rsp,0x8
  405e18:	mov    rdx,QWORD PTR [rdi+0x30]
  405e1c:	cmp    WORD PTR [rdx+0xe],0x6
  405e21:	jne    405e53 <flatcc_builder_truncate_string@@Base+0x43>
  405e23:	mov    ecx,DWORD PTR [rdx+0x14]
  405e26:	mov    rax,rcx
  405e29:	cmp    rcx,rsi
  405e2c:	jb     405e72 <flatcc_builder_truncate_string@@Base+0x62>
  405e2e:	sub    eax,esi
  405e30:	mov    DWORD PTR [rdx+0x14],eax
  405e33:	mov    rdx,rsi
  405e36:	mov    eax,DWORD PTR [rdi+0x20]
  405e39:	sub    eax,esi
  405e3b:	mov    DWORD PTR [rdi+0x20],eax
  405e3e:	add    rax,QWORD PTR [rdi+0x18]
  405e42:	mov    rdi,rax
  405e45:	xor    esi,esi
  405e47:	call   403140 <memset@plt>
  405e4c:	xor    eax,eax
  405e4e:	add    rsp,0x8
  405e52:	ret    
  405e53:	lea    rcx,[rip+0x3da6]        # 409c00 <_IO_stdin_used@@Base+0xc00>
  405e5a:	mov    edx,0x3eb
  405e5f:	lea    rsi,[rip+0x356a]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405e66:	lea    rdi,[rip+0x36eb]        # 409558 <_IO_stdin_used@@Base+0x558>
  405e6d:	call   403130 <__assert_fail@plt>
  405e72:	lea    rcx,[rip+0x3d87]        # 409c00 <_IO_stdin_used@@Base+0xc00>
  405e79:	mov    edx,0x3ec
  405e7e:	lea    rsi,[rip+0x354b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405e85:	lea    rdi,[rip+0x3764]        # 4095f0 <_IO_stdin_used@@Base+0x5f0>
  405e8c:	call   403130 <__assert_fail@plt>
  405e91:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405e9c:	nop    DWORD PTR [rax+0x0]

0000000000405ea0 <flatcc_builder_start_vector@@Base>:
  405ea0:	endbr64 
  405ea4:	push   r12
  405ea6:	cmp    dx,0x4
  405eaa:	mov    r12,rcx
  405ead:	push   rbp
  405eae:	mov    rbp,rsi
  405eb1:	mov    esi,0x4
  405eb6:	push   rbx
  405eb7:	cmovae esi,edx
  405eba:	mov    rbx,rdi
  405ebd:	movzx  esi,si
  405ec0:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  405ec5:	test   eax,eax
  405ec7:	jne    405f10 <flatcc_builder_start_vector@@Base+0x70>
  405ec9:	mov    rsi,QWORD PTR [rbx+0x30]
  405ecd:	mov    edx,0x4
  405ed2:	mov    WORD PTR [rsi+0xe],dx
  405ed6:	mov    edx,DWORD PTR [rbx+0x28]
  405ed9:	mov    DWORD PTR [rsi+0x10],ebp
  405edc:	mov    rcx,rdx
  405edf:	add    rdx,QWORD PTR [rbx+0x68]
  405ee3:	mov    DWORD PTR [rsi+0x14],0x0
  405eea:	mov    DWORD PTR [rsi+0x18],r12d
  405eee:	mov    QWORD PTR [rbx+0x18],rdx
  405ef2:	mov    edx,DWORD PTR [rbx+0x70]
  405ef5:	sub    edx,ecx
  405ef7:	mov    ecx,0xfffffffc
  405efc:	cmp    edx,ecx
  405efe:	cmova  edx,ecx
  405f01:	mov    DWORD PTR [rbx+0x24],edx
  405f04:	mov    DWORD PTR [rsi+0x4],ecx
  405f07:	pop    rbx
  405f08:	pop    rbp
  405f09:	pop    r12
  405f0b:	ret    
  405f0c:	nop    DWORD PTR [rax+0x0]
  405f10:	mov    eax,0xffffffff
  405f15:	jmp    405f07 <flatcc_builder_start_vector@@Base+0x67>
  405f17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f20 <flatcc_builder_start_offset_vector@@Base>:
  405f20:	endbr64 
  405f24:	push   rbx
  405f25:	mov    esi,0x4
  405f2a:	mov    rbx,rdi
  405f2d:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  405f32:	test   eax,eax
  405f34:	jne    405f70 <flatcc_builder_start_offset_vector@@Base+0x50>
  405f36:	mov    rcx,QWORD PTR [rbx+0x30]
  405f3a:	xor    edx,edx
  405f3c:	mov    QWORD PTR [rcx+0xe],0x40005
  405f44:	mov    WORD PTR [rcx+0x16],dx
  405f48:	mov    edx,DWORD PTR [rbx+0x28]
  405f4b:	mov    rsi,rdx
  405f4e:	add    rdx,QWORD PTR [rbx+0x68]
  405f52:	mov    QWORD PTR [rbx+0x18],rdx
  405f56:	mov    edx,DWORD PTR [rbx+0x70]
  405f59:	sub    edx,esi
  405f5b:	mov    esi,0xfffffffc
  405f60:	cmp    edx,esi
  405f62:	cmova  edx,esi
  405f65:	mov    DWORD PTR [rbx+0x24],edx
  405f68:	mov    DWORD PTR [rcx+0x4],esi
  405f6b:	pop    rbx
  405f6c:	ret    
  405f6d:	nop    DWORD PTR [rax]
  405f70:	mov    eax,0xffffffff
  405f75:	pop    rbx
  405f76:	ret    
  405f77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f80 <flatcc_builder_start_string@@Base>:
  405f80:	endbr64 
  405f84:	push   rbx
  405f85:	mov    esi,0x1
  405f8a:	mov    rbx,rdi
  405f8d:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  405f92:	test   eax,eax
  405f94:	jne    405fd0 <flatcc_builder_start_string@@Base+0x50>
  405f96:	mov    rcx,QWORD PTR [rbx+0x30]
  405f9a:	xor    edx,edx
  405f9c:	mov    QWORD PTR [rcx+0xe],0x10006
  405fa4:	mov    WORD PTR [rcx+0x16],dx
  405fa8:	mov    edx,DWORD PTR [rbx+0x28]
  405fab:	mov    rsi,rdx
  405fae:	add    rdx,QWORD PTR [rbx+0x68]
  405fb2:	mov    QWORD PTR [rbx+0x18],rdx
  405fb6:	mov    edx,DWORD PTR [rbx+0x70]
  405fb9:	sub    edx,esi
  405fbb:	mov    esi,0xfffffffc
  405fc0:	cmp    edx,esi
  405fc2:	cmova  edx,esi
  405fc5:	mov    DWORD PTR [rbx+0x24],edx
  405fc8:	mov    DWORD PTR [rcx+0x4],esi
  405fcb:	pop    rbx
  405fcc:	ret    
  405fcd:	nop    DWORD PTR [rax]
  405fd0:	mov    eax,0xffffffff
  405fd5:	pop    rbx
  405fd6:	ret    
  405fd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405fe0 <flatcc_builder_reserve_table@@Base>:
  405fe0:	endbr64 
  405fe4:	push   r12
  405fe6:	push   rbp
  405fe7:	push   rbx
  405fe8:	test   esi,esi
  405fea:	js     40609f <flatcc_builder_reserve_table@@Base+0xbf>
  405ff0:	mov    rax,QWORD PTR [rdi+0x30]
  405ff4:	lea    r12d,[rsi+rsi*1+0x4]
  405ff9:	movzx  edx,WORD PTR [rax+0x1c]
  405ffd:	mov    eax,DWORD PTR [rax+0x10]
  406000:	mov    rbx,rdi
  406003:	lea    ebp,[rax+rdx*2]
  406006:	mov    edx,r12d
  406009:	add    rdx,rbp
  40600c:	cmp    rdx,QWORD PTR [rdi+0x60]
  406010:	ja     406050 <flatcc_builder_reserve_table@@Base+0x70>
  406012:	add    rbp,QWORD PTR [rbx+0x58]
  406016:	je     406090 <flatcc_builder_reserve_table@@Base+0xb0>
  406018:	mov    rax,QWORD PTR [rbx+0x30]
  40601c:	add    rbp,0x4
  406020:	mov    QWORD PTR [rbx+0x8],rbp
  406024:	mov    ebp,DWORD PTR [rax+0x14]
  406027:	lea    edx,[r12-0x3]
  40602c:	add    rdx,rbp
  40602f:	cmp    rdx,QWORD PTR [rbx+0x90]
  406036:	ja     406070 <flatcc_builder_reserve_table@@Base+0x90>
  406038:	add    rbp,QWORD PTR [rbx+0x88]
  40603f:	sete   al
  406042:	mov    QWORD PTR [rbx],rbp
  406045:	movzx  eax,al
  406048:	neg    eax
  40604a:	pop    rbx
  40604b:	pop    rbp
  40604c:	pop    r12
  40604e:	ret    
  40604f:	nop
  406050:	lea    rsi,[rdi+0x58]
  406054:	mov    rdi,QWORD PTR [rdi+0x40]
  406058:	xor    r8d,r8d
  40605b:	mov    ecx,0x1
  406060:	call   QWORD PTR [rbx+0x50]
  406063:	test   eax,eax
  406065:	je     406012 <flatcc_builder_reserve_table@@Base+0x32>
  406067:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  40606c:	nop    DWORD PTR [rax+0x0]
  406070:	mov    rdi,QWORD PTR [rbx+0x40]
  406074:	xor    ecx,ecx
  406076:	lea    rsi,[rbx+0x88]
  40607d:	mov    r8d,0x3
  406083:	call   QWORD PTR [rbx+0x50]
  406086:	test   eax,eax
  406088:	je     406038 <flatcc_builder_reserve_table@@Base+0x58>
  40608a:	jmp    406067 <flatcc_builder_reserve_table@@Base+0x87>
  40608c:	nop    DWORD PTR [rax+0x0]
  406090:	mov    QWORD PTR [rbx+0x8],0x0
  406098:	mov    eax,0xffffffff
  40609d:	jmp    40604a <flatcc_builder_reserve_table@@Base+0x6a>
  40609f:	lea    rcx,[rip+0x3b3a]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  4060a6:	mov    edx,0x429
  4060ab:	lea    rsi,[rip+0x331e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4060b2:	lea    rdi,[rip+0x370a]        # 4097c3 <_IO_stdin_used@@Base+0x7c3>
  4060b9:	call   403130 <__assert_fail@plt>
  4060be:	xchg   ax,ax

00000000004060c0 <flatcc_builder_start_table@@Base>:
  4060c0:	endbr64 
  4060c4:	push   r13
  4060c6:	push   r12
  4060c8:	mov    r12d,esi
  4060cb:	mov    esi,0x4
  4060d0:	push   rbp
  4060d1:	push   rbx
  4060d2:	mov    rbx,rdi
  4060d5:	sub    rsp,0x8
  4060d9:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  4060de:	test   eax,eax
  4060e0:	jne    4061f8 <flatcc_builder_start_table@@Base+0x138>
  4060e6:	mov    rsi,QWORD PTR [rbx]
  4060e9:	mov    rdx,QWORD PTR [rbx+0x30]
  4060ed:	sub    rsi,QWORD PTR [rbx+0x88]
  4060f4:	mov    rcx,QWORD PTR [rbx+0x8]
  4060f8:	mov    ebp,eax
  4060fa:	mov    rax,QWORD PTR [rbx+0x58]
  4060fe:	mov    DWORD PTR [rdx+0x14],esi
  406101:	mov    esi,DWORD PTR [rbx+0x14]
  406104:	sub    rcx,rax
  406107:	mov    DWORD PTR [rdx+0x18],esi
  40610a:	movzx  esi,WORD PTR [rbx+0x10]
  40610e:	xor    edi,edi
  406110:	mov    r8d,0x3
  406116:	mov    DWORD PTR [rdx+0x10],ecx
  406119:	mov    WORD PTR [rdx+0x1c],si
  40611d:	lea    r13d,[rcx+rsi*2]
  406121:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  406128:	mov    WORD PTR [rbx+0x10],di
  40612c:	mov    WORD PTR [rdx+0xe],r8w
  406131:	lea    edx,[r12+r12*1+0x4]
  406136:	add    rdx,r13
  406139:	cmp    rdx,QWORD PTR [rbx+0x60]
  40613d:	jbe    40615e <flatcc_builder_start_table@@Base+0x9e>
  40613f:	mov    rdi,QWORD PTR [rbx+0x40]
  406143:	xor    r8d,r8d
  406146:	lea    rsi,[rbx+0x58]
  40614a:	mov    ecx,0x1
  40614f:	call   QWORD PTR [rbx+0x50]
  406152:	test   eax,eax
  406154:	jne    4061ea <flatcc_builder_start_table@@Base+0x12a>
  40615a:	mov    rax,QWORD PTR [rbx+0x58]
  40615e:	add    rax,r13
  406161:	je     4061f0 <flatcc_builder_start_table@@Base+0x130>
  406167:	add    rax,0x4
  40616b:	mov    QWORD PTR [rbx+0x8],rax
  40616f:	mov    rax,QWORD PTR [rbx+0x30]
  406173:	lea    edx,[r12+r12*1+0x1]
  406178:	mov    r13d,DWORD PTR [rax+0x14]
  40617c:	add    rdx,r13
  40617f:	cmp    rdx,QWORD PTR [rbx+0x90]
  406186:	ja     4061d0 <flatcc_builder_start_table@@Base+0x110>
  406188:	add    r13,QWORD PTR [rbx+0x88]
  40618f:	mov    QWORD PTR [rbx],r13
  406192:	je     4061f8 <flatcc_builder_start_table@@Base+0x138>
  406194:	mov    eax,DWORD PTR [rbx+0x28]
  406197:	mov    rdx,rax
  40619a:	add    rax,QWORD PTR [rbx+0x68]
  40619e:	mov    QWORD PTR [rbx+0x18],rax
  4061a2:	mov    eax,DWORD PTR [rbx+0x70]
  4061a5:	sub    eax,edx
  4061a7:	cmp    eax,0xfffc
  4061ac:	mov    edx,0xfffc
  4061b1:	cmova  eax,edx
  4061b4:	mov    DWORD PTR [rbx+0x24],eax
  4061b7:	mov    rax,QWORD PTR [rbx+0x30]
  4061bb:	mov    DWORD PTR [rax+0x4],0xfffc
  4061c2:	add    rsp,0x8
  4061c6:	pop    rbx
  4061c7:	mov    eax,ebp
  4061c9:	pop    rbp
  4061ca:	pop    r12
  4061cc:	pop    r13
  4061ce:	ret    
  4061cf:	nop
  4061d0:	mov    rdi,QWORD PTR [rbx+0x40]
  4061d4:	xor    ecx,ecx
  4061d6:	lea    rsi,[rbx+0x88]
  4061dd:	mov    r8d,0x3
  4061e3:	call   QWORD PTR [rbx+0x50]
  4061e6:	test   eax,eax
  4061e8:	je     406188 <flatcc_builder_start_table@@Base+0xc8>
  4061ea:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  4061ef:	nop
  4061f0:	mov    QWORD PTR [rbx+0x8],0x0
  4061f8:	mov    ebp,0xffffffff
  4061fd:	jmp    4061c2 <flatcc_builder_start_table@@Base+0x102>
  4061ff:	nop

0000000000406200 <flatcc_builder_create_vtable@@Base>:
  406200:	endbr64 
  406204:	push   rbp
  406205:	mov    rbp,rdi
  406208:	push   rbx
  406209:	sub    rsp,0xa8
  406210:	mov    rax,QWORD PTR fs:0x28
  406219:	mov    QWORD PTR [rsp+0x98],rax
  406221:	xor    eax,eax
  406223:	mov    QWORD PTR [rsp],0x0
  40622b:	mov    DWORD PTR [rsp+0x8],0x0
  406233:	mov    eax,DWORD PTR [rdi+0x100]
  406239:	test   dx,dx
  40623c:	je     4062c0 <flatcc_builder_create_vtable@@Base+0xc0>
  406242:	movzx  r8d,dx
  406246:	mov    QWORD PTR [rsp],r8
  40624a:	mov    QWORD PTR [rsp+0x10],rsi
  40624f:	mov    QWORD PTR [rsp+0x18],r8
  406254:	mov    DWORD PTR [rsp+0x8],0x1
  40625c:	movzx  edx,dx
  40625f:	test   eax,eax
  406261:	je     4062f0 <flatcc_builder_create_vtable@@Base+0xf0>
  406267:	mov    eax,DWORD PTR [rbp+0xf0]
  40626d:	mov    ebx,eax
  40626f:	sub    ebx,edx
  406271:	cmp    eax,ebx
  406273:	jle    4062ce <flatcc_builder_create_vtable@@Base+0xce>
  406275:	mov    rdi,QWORD PTR [rbp+0x38]
  406279:	mov    edx,DWORD PTR [rsp+0x8]
  40627d:	lea    rsi,[rsp+0x10]
  406282:	mov    ecx,ebx
  406284:	call   QWORD PTR [rbp+0x48]
  406287:	test   eax,eax
  406289:	jne    406340 <flatcc_builder_create_vtable@@Base+0x140>
  40628f:	cmp    ebx,0x1
  406292:	mov    DWORD PTR [rbp+0xf0],ebx
  406298:	sbb    ebx,0xffffffff
  40629b:	mov    rcx,QWORD PTR [rsp+0x98]
  4062a3:	xor    rcx,QWORD PTR fs:0x28
  4062ac:	mov    eax,ebx
  4062ae:	jne    40633b <flatcc_builder_create_vtable@@Base+0x13b>
  4062b4:	add    rsp,0xa8
  4062bb:	pop    rbx
  4062bc:	pop    rbp
  4062bd:	ret    
  4062be:	xchg   ax,ax
  4062c0:	test   eax,eax
  4062c2:	jne    4062ce <flatcc_builder_create_vtable@@Base+0xce>
  4062c4:	mov    eax,DWORD PTR [rdi+0x124]
  4062ca:	test   eax,eax
  4062cc:	je     406330 <flatcc_builder_create_vtable@@Base+0x130>
  4062ce:	lea    rcx,[rip+0x3b3b]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  4062d5:	mov    edx,0x287
  4062da:	lea    rsi,[rip+0x30ef]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4062e1:	lea    rdi,[rip+0x347f]        # 409767 <_IO_stdin_used@@Base+0x767>
  4062e8:	call   403130 <__assert_fail@plt>
  4062ed:	nop    DWORD PTR [rax]
  4062f0:	mov    ecx,DWORD PTR [rdi+0x124]
  4062f6:	test   ecx,ecx
  4062f8:	jne    406267 <flatcc_builder_create_vtable@@Base+0x67>
  4062fe:	mov    ebx,DWORD PTR [rdi+0xf4]
  406304:	add    edx,ebx
  406306:	mov    DWORD PTR [rdi+0xf4],edx
  40630c:	mov    rdi,QWORD PTR [rbp+0x38]
  406310:	mov    edx,DWORD PTR [rsp+0x8]
  406314:	lea    rsi,[rsp+0x10]
  406319:	mov    ecx,ebx
  40631b:	call   QWORD PTR [rbp+0x48]
  40631e:	test   eax,eax
  406320:	jne    406345 <flatcc_builder_create_vtable@@Base+0x145>
  406322:	inc    ebx
  406324:	jmp    40629b <flatcc_builder_create_vtable@@Base+0x9b>
  406329:	nop    DWORD PTR [rax+0x0]
  406330:	mov    ebx,DWORD PTR [rbp+0xf4]
  406336:	xor    r8d,r8d
  406339:	jmp    40630c <flatcc_builder_create_vtable@@Base+0x10c>
  40633b:	call   403120 <__stack_chk_fail@plt>
  406340:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  406345:	call   404490 <flatcc_builder_default_alloc@@Base+0x160>
  40634a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406350 <flatcc_builder_create_cached_vtable@@Base>:
  406350:	endbr64 
  406354:	push   r15
  406356:	mov    r15,rdi
  406359:	push   r14
  40635b:	push   r13
  40635d:	push   r12
  40635f:	movzx  r12d,dx
  406363:	push   rbp
  406364:	mov    ebp,ecx
  406366:	push   rbx
  406367:	sub    rsp,0x38
  40636b:	mov    rbx,QWORD PTR [rdi+0xd8]
  406372:	mov    QWORD PTR [rsp+0x18],rsi
  406377:	mov    DWORD PTR [rsp+0x2c],edx
  40637b:	test   rbx,rbx
  40637e:	je     406518 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  406384:	mov    eax,0x20
  406389:	sub    eax,ebx
  40638b:	shrx   ebp,ebp,eax
  406390:	mov    rax,QWORD PTR [r15+0xa8]
  406397:	lea    r14,[rax+rbp*4]
  40639b:	test   r14,r14
  40639e:	je     406500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4063a4:	mov    ebp,DWORD PTR [r14]
  4063a7:	test   ebp,ebp
  4063a9:	je     4065f0 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  4063af:	mov    QWORD PTR [rsp+0x20],0x0
  4063b8:	mov    r11,QWORD PTR [r15+0xb8]
  4063bf:	mov    r8,QWORD PTR [r15+0x78]
  4063c3:	mov    r13,r14
  4063c6:	mov    ebx,ebp
  4063c8:	add    rbx,r11
  4063cb:	mov    esi,DWORD PTR [rbx+0x8]
  4063ce:	add    rsi,r8
  4063d1:	cmp    WORD PTR [rsi],r12w
  4063d5:	jne    4064c0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  4063db:	mov    rdi,QWORD PTR [rsp+0x18]
  4063e0:	movzx  edx,r12w
  4063e4:	mov    QWORD PTR [rsp+0x10],r8
  4063e9:	mov    QWORD PTR [rsp+0x8],r11
  4063ee:	call   403160 <memcmp@plt>
  4063f3:	test   eax,eax
  4063f5:	mov    r11,QWORD PTR [rsp+0x8]
  4063fa:	mov    r8,QWORD PTR [rsp+0x10]
  4063ff:	jne    4064c0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  406405:	mov    eax,DWORD PTR [r15+0x100]
  40640c:	cmp    DWORD PTR [rbx+0x4],eax
  40640f:	je     4064d0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  406415:	mov    QWORD PTR [rsp+0x20],rbx
  40641a:	mov    ebp,DWORD PTR [rbx+0xc]
  40641d:	lea    r13,[rbx+0xc]
  406421:	test   ebp,ebp
  406423:	jne    4063c6 <flatcc_builder_create_cached_vtable@@Base+0x76>
  406425:	mov    ebp,DWORD PTR [r15+0xe4]
  40642c:	lea    rdx,[rbp+0x10]
  406430:	cmp    rdx,QWORD PTR [r15+0xc0]
  406437:	jbe    406458 <flatcc_builder_create_cached_vtable@@Base+0x108>
  406439:	mov    rdi,QWORD PTR [r15+0x40]
  40643d:	xor    ecx,ecx
  40643f:	lea    rsi,[r15+0xb8]
  406446:	mov    r8d,0x6
  40644c:	call   QWORD PTR [r15+0x50]
  406450:	test   eax,eax
  406452:	jne    4065e4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  406458:	add    rbp,QWORD PTR [r15+0xb8]
  40645f:	je     406500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406465:	mov    eax,DWORD PTR [r15+0xe4]
  40646c:	mov    rsi,QWORD PTR [rsp+0x18]
  406471:	lea    edx,[rax+0x10]
  406474:	mov    DWORD PTR [r15+0xe4],edx
  40647b:	mov    edx,DWORD PTR [r15+0x100]
  406482:	mov    rdi,r15
  406485:	mov    DWORD PTR [rbp+0x4],edx
  406488:	mov    edx,DWORD PTR [r14]
  40648b:	mov    DWORD PTR [rbp+0xc],edx
  40648e:	mov    DWORD PTR [r14],eax
  406491:	mov    eax,DWORD PTR [rsp+0x2c]
  406495:	movzx  edx,ax
  406498:	movzx  ebx,ax
  40649b:	call   406200 <flatcc_builder_create_vtable@@Base>
  4064a0:	mov    DWORD PTR [rbp+0x0],eax
  4064a3:	test   eax,eax
  4064a5:	je     406500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4064a7:	mov    rdi,QWORD PTR [rsp+0x20]
  4064ac:	test   rdi,rdi
  4064af:	je     406605 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  4064b5:	mov    edx,DWORD PTR [rdi+0x8]
  4064b8:	mov    DWORD PTR [rbp+0x8],edx
  4064bb:	jmp    4064e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  4064bd:	nop    DWORD PTR [rax]
  4064c0:	lea    r13,[rbx+0xc]
  4064c4:	mov    ebp,DWORD PTR [rbx+0xc]
  4064c7:	jmp    406421 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  4064cc:	nop    DWORD PTR [rax+0x0]
  4064d0:	cmp    r14,r13
  4064d3:	je     4064e5 <flatcc_builder_create_cached_vtable@@Base+0x195>
  4064d5:	mov    eax,DWORD PTR [rbx+0xc]
  4064d8:	mov    DWORD PTR [r13+0x0],eax
  4064dc:	mov    eax,DWORD PTR [r14]
  4064df:	mov    DWORD PTR [rbx+0xc],eax
  4064e2:	mov    DWORD PTR [r14],ebp
  4064e5:	mov    eax,DWORD PTR [rbx]
  4064e7:	add    rsp,0x38
  4064eb:	pop    rbx
  4064ec:	pop    rbp
  4064ed:	pop    r12
  4064ef:	pop    r13
  4064f1:	pop    r14
  4064f3:	pop    r15
  4064f5:	ret    
  4064f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406500:	add    rsp,0x38
  406504:	pop    rbx
  406505:	pop    rbp
  406506:	pop    r12
  406508:	pop    r13
  40650a:	pop    r14
  40650c:	xor    eax,eax
  40650e:	pop    r15
  406510:	ret    
  406511:	nop    DWORD PTR [rax+0x0]
  406518:	mov    eax,DWORD PTR [rdi+0xe4]
  40651e:	lea    r13,[rdi+0xa8]
  406525:	test   eax,eax
  406527:	jne    40668f <flatcc_builder_create_cached_vtable@@Base+0x33f>
  40652d:	cmp    QWORD PTR [rdi+0xc0],0xf
  406535:	jbe    4065c0 <flatcc_builder_create_cached_vtable@@Base+0x270>
  40653b:	cmp    QWORD PTR [r15+0xb8],0x0
  406543:	je     406500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406545:	mov    DWORD PTR [r15+0xe4],0x10
  406550:	mov    rdi,QWORD PTR [r15+0x40]
  406554:	mov    r8d,0x5
  40655a:	mov    ecx,0x1
  40655f:	mov    edx,0x100
  406564:	mov    rsi,r13
  406567:	call   QWORD PTR [r15+0x50]
  40656b:	test   eax,eax
  40656d:	jne    406500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  40656f:	mov    rcx,QWORD PTR [r15+0xb0]
  406576:	mov    eax,0x100
  40657b:	jmp    406583 <flatcc_builder_create_cached_vtable@@Base+0x233>
  40657d:	nop    DWORD PTR [rax]
  406580:	mov    rax,rdx
  406583:	lea    rdx,[rax+rax*1]
  406587:	cmp    rdx,rcx
  40658a:	jbe    406580 <flatcc_builder_create_cached_vtable@@Base+0x230>
  40658c:	shr    rax,0x2
  406590:	cmp    rax,0x1
  406594:	jbe    4065fe <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  406596:	mov    esi,0x1
  40659b:	nop    DWORD PTR [rax+rax*1+0x0]
  4065a0:	inc    rbx
  4065a3:	shlx   rdx,rsi,rbx
  4065a8:	cmp    rax,rdx
  4065ab:	ja     4065a0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  4065ad:	mov    eax,0x20
  4065b2:	sub    eax,ebx
  4065b4:	mov    QWORD PTR [r15+0xd8],rbx
  4065bb:	jmp    40638b <flatcc_builder_create_cached_vtable@@Base+0x3b>
  4065c0:	lea    rsi,[rdi+0xb8]
  4065c7:	mov    rdi,QWORD PTR [rdi+0x40]
  4065cb:	xor    ecx,ecx
  4065cd:	mov    r8d,0x6
  4065d3:	mov    edx,0x10
  4065d8:	call   QWORD PTR [r15+0x50]
  4065dc:	test   eax,eax
  4065de:	je     40653b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  4065e4:	call   404460 <flatcc_builder_default_alloc@@Base+0x130>
  4065e9:	nop    DWORD PTR [rax+0x0]
  4065f0:	mov    QWORD PTR [rsp+0x20],0x0
  4065f9:	jmp    406425 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  4065fe:	mov    eax,0x20
  406603:	jmp    4065b4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  406605:	mov    rax,QWORD PTR [r15+0x118]
  40660c:	mov    r14d,DWORD PTR [r15+0xe0]
  406613:	test   rax,rax
  406616:	je     406621 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  406618:	lea    edx,[rbx+r14*1]
  40661c:	cmp    rax,rdx
  40661f:	jb     406677 <flatcc_builder_create_cached_vtable@@Base+0x327>
  406621:	lea    rdx,[r12+r14*1]
  406625:	cmp    rdx,QWORD PTR [r15+0x80]
  40662c:	jbe    406646 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  40662e:	mov    rdi,QWORD PTR [r15+0x40]
  406632:	xor    ecx,ecx
  406634:	lea    rsi,[r15+0x78]
  406638:	mov    r8d,0x2
  40663e:	call   QWORD PTR [r15+0x50]
  406642:	test   eax,eax
  406644:	jne    4065e4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  406646:	mov    rdi,r14
  406649:	add    rdi,QWORD PTR [r15+0x78]
  40664d:	je     406687 <flatcc_builder_create_cached_vtable@@Base+0x337>
  40664f:	mov    eax,DWORD PTR [r15+0xe0]
  406656:	mov    rsi,QWORD PTR [rsp+0x18]
  40665b:	add    ebx,eax
  40665d:	mov    DWORD PTR [rbp+0x8],eax
  406660:	mov    DWORD PTR [r15+0xe0],ebx
  406667:	mov    rdx,r12
  40666a:	call   403180 <memcpy@plt>
  40666f:	mov    eax,DWORD PTR [rbp+0x0]
  406672:	jmp    4064e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406677:	mov    rdi,r15
  40667a:	call   4049b0 <flatcc_builder_flush_vtable_cache@@Base>
  40667f:	mov    eax,DWORD PTR [rbp+0x0]
  406682:	jmp    4064e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406687:	or     eax,0xffffffff
  40668a:	jmp    4064e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  40668f:	lea    rcx,[rip+0x353a]        # 409bd0 <_IO_stdin_used@@Base+0xbd0>
  406696:	mov    edx,0x156
  40669b:	lea    rsi,[rip+0x2d2e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4066a2:	lea    rdi,[rip+0x3104]        # 4097ad <_IO_stdin_used@@Base+0x7ad>
  4066a9:	call   403130 <__assert_fail@plt>
  4066ae:	xchg   ax,ax

00000000004066b0 <flatcc_builder_create_table@@Base>:
  4066b0:	endbr64 
  4066b4:	push   rbp
  4066b5:	push   rbx
  4066b6:	mov    rbx,rdi
  4066b9:	sub    rsp,0xb8
  4066c0:	mov    edi,DWORD PTR [rsp+0xd0]
  4066c7:	mov    rax,QWORD PTR fs:0x28
  4066d0:	mov    QWORD PTR [rsp+0xa8],rax
  4066d8:	xor    eax,eax
  4066da:	test   r9d,r9d
  4066dd:	js     40689f <flatcc_builder_create_table@@Base+0x1ef>
  4066e3:	test   dil,0x1
  4066e7:	je     40687b <flatcc_builder_create_table@@Base+0x1cb>
  4066ed:	cmp    cx,0x4
  4066f1:	mov    eax,0x4
  4066f6:	cmovb  ecx,eax
  4066f9:	movzx  r11d,cx
  4066fd:	cmp    WORD PTR [rbx+0xe8],cx
  406704:	jb     406850 <flatcc_builder_create_table@@Base+0x1a0>
  40670a:	mov    eax,DWORD PTR [rbx+0xf0]
  406710:	lea    ecx,[r11-0x1]
  406714:	mov    r10d,eax
  406717:	sub    r10d,edx
  40671a:	and    r10d,ecx
  40671d:	mov    ecx,eax
  40671f:	sub    ecx,edx
  406721:	lea    r11d,[rcx-0x4]
  406725:	dec    edi
  406727:	mov    ecx,r11d
  40672a:	sub    ecx,edi
  40672c:	sub    ecx,r10d
  40672f:	mov    DWORD PTR [rsp+0xc],ecx
  406733:	test   r9d,r9d
  406736:	je     40676d <flatcc_builder_create_table@@Base+0xbd>
  406738:	mov    edi,r10d
  40673b:	sub    edi,r11d
  40673e:	lea    eax,[r9-0x1]
  406742:	sub    edi,0x4
  406745:	lea    r9,[r8+rax*2+0x2]
  40674a:	nop    WORD PTR [rax+rax*1+0x0]
  406750:	movzx  ecx,WORD PTR [r8]
  406754:	mov    r11d,edi
  406757:	sub    r11d,ecx
  40675a:	add    r8,0x2
  40675e:	add    DWORD PTR [rsi+rcx*1],r11d
  406762:	cmp    r9,r8
  406765:	jne    406750 <flatcc_builder_create_table@@Base+0xa0>
  406767:	mov    eax,DWORD PTR [rbx+0xf0]
  40676d:	lea    rcx,[rsp+0xc]
  406772:	mov    QWORD PTR [rsp+0x10],0x4
  40677b:	mov    QWORD PTR [rsp+0x20],rcx
  406780:	mov    QWORD PTR [rsp+0x28],0x4
  406789:	mov    DWORD PTR [rsp+0x18],0x1
  406791:	mov    r8d,0x4
  406797:	test   rdx,rdx
  40679a:	je     4067b7 <flatcc_builder_create_table@@Base+0x107>
  40679c:	lea    r8,[rdx+0x4]
  4067a0:	mov    QWORD PTR [rsp+0x10],r8
  4067a5:	mov    QWORD PTR [rsp+0x30],rsi
  4067aa:	mov    QWORD PTR [rsp+0x38],rdx
  4067af:	mov    DWORD PTR [rsp+0x18],0x2
  4067b7:	test   r10d,r10d
  4067ba:	jne    406820 <flatcc_builder_create_table@@Base+0x170>
  4067bc:	mov    ebp,eax
  4067be:	movabs rdx,0x10000000f
  4067c8:	sub    ebp,r8d
  4067cb:	cmp    r8,rdx
  4067ce:	ja     40685c <flatcc_builder_create_table@@Base+0x1ac>
  4067d4:	cmp    ebp,eax
  4067d6:	jge    40685c <flatcc_builder_create_table@@Base+0x1ac>
  4067dc:	mov    rdi,QWORD PTR [rbx+0x38]
  4067e0:	mov    edx,DWORD PTR [rsp+0x18]
  4067e4:	lea    rsi,[rsp+0x20]
  4067e9:	mov    ecx,ebp
  4067eb:	call   QWORD PTR [rbx+0x48]
  4067ee:	test   eax,eax
  4067f0:	jne    40689a <flatcc_builder_create_table@@Base+0x1ea>
  4067f6:	mov    DWORD PTR [rbx+0xf0],ebp
  4067fc:	mov    eax,ebp
  4067fe:	mov    rbx,QWORD PTR [rsp+0xa8]
  406806:	xor    rbx,QWORD PTR fs:0x28
  40680f:	jne    4068be <flatcc_builder_create_table@@Base+0x20e>
  406815:	add    rsp,0xb8
  40681c:	pop    rbx
  40681d:	pop    rbp
  40681e:	ret    
  40681f:	nop
  406820:	movsxd rcx,DWORD PTR [rsp+0x18]
  406825:	mov    rsi,0x409ec0
  40682c:	mov    rdx,rcx
  40682f:	add    r8,r10
  406832:	shl    rcx,0x4
  406836:	inc    edx
  406838:	mov    QWORD PTR [rsp+0x10],r8
  40683d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406842:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  406847:	mov    DWORD PTR [rsp+0x18],edx
  40684b:	jmp    4067bc <flatcc_builder_create_table@@Base+0x10c>
  406850:	mov    WORD PTR [rbx+0xe8],cx
  406857:	jmp    40670a <flatcc_builder_create_table@@Base+0x5a>
  40685c:	lea    rcx,[rip+0x35ad]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  406863:	mov    edx,0x287
  406868:	lea    rsi,[rip+0x2b61]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40686f:	lea    rdi,[rip+0x2ef1]        # 409767 <_IO_stdin_used@@Base+0x767>
  406876:	call   403130 <__assert_fail@plt>
  40687b:	lea    rcx,[rip+0x332e]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  406882:	mov    edx,0x4db
  406887:	lea    rsi,[rip+0x2b42]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40688e:	lea    rdi,[rip+0x2f39]        # 4097ce <_IO_stdin_used@@Base+0x7ce>
  406895:	call   403130 <__assert_fail@plt>
  40689a:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  40689f:	lea    rcx,[rip+0x330a]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  4068a6:	mov    edx,0x4d5
  4068ab:	lea    rsi,[rip+0x2b1e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4068b2:	lea    rdi,[rip+0x2f03]        # 4097bc <_IO_stdin_used@@Base+0x7bc>
  4068b9:	call   403130 <__assert_fail@plt>
  4068be:	call   403120 <__stack_chk_fail@plt>
  4068c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4068ce:	xchg   ax,ax

00000000004068d0 <flatcc_builder_check_required_field@@Base>:
  4068d0:	endbr64 
  4068d4:	mov    rax,QWORD PTR [rdi+0x30]
  4068d8:	cmp    WORD PTR [rax+0xe],0x3
  4068dd:	jne    4068fa <flatcc_builder_check_required_field@@Base+0x2a>
  4068df:	xor    eax,eax
  4068e1:	cmp    WORD PTR [rdi+0x10],si
  4068e5:	jbe    4068f9 <flatcc_builder_check_required_field@@Base+0x29>
  4068e7:	mov    rax,QWORD PTR [rdi+0x8]
  4068eb:	movzx  edx,si
  4068ee:	cmp    WORD PTR [rax+rdx*2],0x0
  4068f3:	setne  al
  4068f6:	movzx  eax,al
  4068f9:	ret    
  4068fa:	push   rax
  4068fb:	lea    rcx,[rip+0x327e]        # 409b80 <_IO_stdin_used@@Base+0xb80>
  406902:	mov    edx,0x4f8
  406907:	lea    rsi,[rip+0x2ac2]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40690e:	lea    rdi,[rip+0x2d03]        # 409618 <_IO_stdin_used@@Base+0x618>
  406915:	call   403130 <__assert_fail@plt>
  40691a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406920 <flatcc_builder_check_union_field@@Base>:
  406920:	endbr64 
  406924:	mov    rax,QWORD PTR [rdi+0x30]
  406928:	cmp    WORD PTR [rax+0xe],0x3
  40692d:	jne    406989 <flatcc_builder_check_union_field@@Base+0x69>
  40692f:	xor    eax,eax
  406931:	test   si,si
  406934:	je     406966 <flatcc_builder_check_union_field@@Base+0x46>
  406936:	cmp    WORD PTR [rdi+0x10],si
  40693a:	jbe    406966 <flatcc_builder_check_union_field@@Base+0x46>
  40693c:	mov    rcx,QWORD PTR [rdi+0x8]
  406940:	movzx  edx,si
  406943:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406948:	movzx  ecx,WORD PTR [rcx+rdx*2]
  40694c:	test   ax,ax
  40694f:	je     406980 <flatcc_builder_check_union_field@@Base+0x60>
  406951:	mov    rsi,QWORD PTR [rdi+0x18]
  406955:	movzx  edx,ax
  406958:	xor    eax,eax
  40695a:	test   cx,cx
  40695d:	sete   al
  406960:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406964:	jne    406970 <flatcc_builder_check_union_field@@Base+0x50>
  406966:	ret    
  406967:	nop    WORD PTR [rax+rax*1+0x0]
  406970:	xor    eax,eax
  406972:	test   cx,cx
  406975:	setne  al
  406978:	ret    
  406979:	nop    DWORD PTR [rax+0x0]
  406980:	xor    eax,eax
  406982:	test   cx,cx
  406985:	sete   al
  406988:	ret    
  406989:	push   rax
  40698a:	lea    rcx,[rip+0x31af]        # 409b40 <_IO_stdin_used@@Base+0xb40>
  406991:	mov    edx,0x4ff
  406996:	lea    rsi,[rip+0x2a33]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40699d:	lea    rdi,[rip+0x2c74]        # 409618 <_IO_stdin_used@@Base+0x618>
  4069a4:	call   403130 <__assert_fail@plt>
  4069a9:	nop    DWORD PTR [rax+0x0]

00000000004069b0 <flatcc_builder_check_required@@Base>:
  4069b0:	endbr64 
  4069b4:	mov    rax,QWORD PTR [rdi+0x30]
  4069b8:	cmp    WORD PTR [rax+0xe],0x3
  4069bd:	jne    406a13 <flatcc_builder_check_required@@Base+0x63>
  4069bf:	movzx  ecx,WORD PTR [rdi+0x10]
  4069c3:	xor    eax,eax
  4069c5:	cmp    ecx,edx
  4069c7:	jl     406a12 <flatcc_builder_check_required@@Base+0x62>
  4069c9:	test   edx,edx
  4069cb:	jle    406a03 <flatcc_builder_check_required@@Base+0x53>
  4069cd:	mov    rcx,QWORD PTR [rdi+0x8]
  4069d1:	movzx  edi,WORD PTR [rsi]
  4069d4:	cmp    WORD PTR [rcx+rdi*2],0x0
  4069d9:	je     406a12 <flatcc_builder_check_required@@Base+0x62>
  4069db:	add    rsi,0x2
  4069df:	lea    eax,[rdx-0x1]
  4069e2:	lea    rdx,[rsi+rax*2]
  4069e6:	jmp    4069fe <flatcc_builder_check_required@@Base+0x4e>
  4069e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4069f0:	movzx  eax,WORD PTR [rsi]
  4069f3:	add    rsi,0x2
  4069f7:	cmp    WORD PTR [rcx+rax*2],0x0
  4069fc:	je     406a10 <flatcc_builder_check_required@@Base+0x60>
  4069fe:	cmp    rsi,rdx
  406a01:	jne    4069f0 <flatcc_builder_check_required@@Base+0x40>
  406a03:	mov    eax,0x1
  406a08:	ret    
  406a09:	nop    DWORD PTR [rax+0x0]
  406a10:	xor    eax,eax
  406a12:	ret    
  406a13:	push   rax
  406a14:	lea    rcx,[rip+0x30f5]        # 409b10 <_IO_stdin_used@@Base+0xb10>
  406a1b:	mov    edx,0x511
  406a20:	lea    rsi,[rip+0x29a9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406a27:	lea    rdi,[rip+0x2bea]        # 409618 <_IO_stdin_used@@Base+0x618>
  406a2e:	call   403130 <__assert_fail@plt>
  406a33:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406a3e:	xchg   ax,ax

0000000000406a40 <flatcc_builder_end_table@@Base>:
  406a40:	endbr64 
  406a44:	push   r13
  406a46:	push   r12
  406a48:	push   rbp
  406a49:	push   rbx
  406a4a:	sub    rsp,0x8
  406a4e:	mov    rax,QWORD PTR [rdi+0x30]
  406a52:	cmp    WORD PTR [rax+0xe],0x3
  406a57:	jne    406bad <flatcc_builder_end_table@@Base+0x16d>
  406a5d:	movzx  ebp,WORD PTR [rdi+0x10]
  406a61:	movzx  eax,WORD PTR [rdi+0x20]
  406a65:	lea    ebp,[rbp+rbp*1+0x4]
  406a69:	movzx  ecx,bp
  406a6c:	xor    ecx,DWORD PTR [rdi+0x14]
  406a6f:	mov    rdx,QWORD PTR [rdi+0x8]
  406a73:	imul   ecx,ecx,0x9e3779b1
  406a79:	add    eax,0x4
  406a7c:	mov    WORD PTR [rdx-0x2],ax
  406a80:	movzx  eax,ax
  406a83:	xor    ecx,eax
  406a85:	imul   ecx,ecx,0x9e3779b1
  406a8b:	mov    WORD PTR [rdx-0x4],bp
  406a8f:	lea    r12,[rdx-0x4]
  406a93:	mov    DWORD PTR [rdi+0x14],ecx
  406a96:	movzx  edx,bp
  406a99:	mov    rsi,r12
  406a9c:	mov    rbx,rdi
  406a9f:	call   406350 <flatcc_builder_create_cached_vtable@@Base>
  406aa4:	mov    r13d,eax
  406aa7:	test   eax,eax
  406aa9:	jne    406ac0 <flatcc_builder_end_table@@Base+0x80>
  406aab:	add    rsp,0x8
  406aaf:	pop    rbx
  406ab0:	xor    ebp,ebp
  406ab2:	mov    eax,ebp
  406ab4:	pop    rbp
  406ab5:	pop    r12
  406ab7:	pop    r13
  406ab9:	ret    
  406aba:	nop    WORD PTR [rax+rax*1+0x0]
  406ac0:	movzx  edx,bp
  406ac3:	xor    esi,esi
  406ac5:	mov    rdi,r12
  406ac8:	call   403140 <memset@plt>
  406acd:	mov    rax,QWORD PTR [rbx+0x30]
  406ad1:	sub    rsp,0x8
  406ad5:	mov    r8d,DWORD PTR [rax+0x14]
  406ad9:	mov    r9,QWORD PTR [rbx]
  406adc:	add    r8,QWORD PTR [rbx+0x88]
  406ae3:	mov    edx,DWORD PTR [rbx+0x20]
  406ae6:	movzx  ecx,WORD PTR [rbx+0xea]
  406aed:	mov    rsi,QWORD PTR [rbx+0x18]
  406af1:	push   r13
  406af3:	sub    r9,r8
  406af6:	sar    r9,1
  406af9:	mov    rdi,rbx
  406afc:	call   4066b0 <flatcc_builder_create_table@@Base>
  406b01:	mov    ebp,eax
  406b03:	pop    rax
  406b04:	pop    rdx
  406b05:	test   ebp,ebp
  406b07:	je     406aab <flatcc_builder_end_table@@Base+0x6b>
  406b09:	mov    rax,QWORD PTR [rbx+0x30]
  406b0d:	mov    rdi,QWORD PTR [rbx+0x18]
  406b11:	mov    edx,DWORD PTR [rax+0x18]
  406b14:	xor    esi,esi
  406b16:	mov    DWORD PTR [rbx+0x14],edx
  406b19:	movzx  edx,WORD PTR [rax+0x1c]
  406b1d:	mov    WORD PTR [rbx+0x10],dx
  406b21:	mov    edx,DWORD PTR [rax+0x10]
  406b24:	mov    eax,DWORD PTR [rax+0x14]
  406b27:	add    rdx,QWORD PTR [rbx+0x58]
  406b2b:	add    rax,QWORD PTR [rbx+0x88]
  406b32:	mov    QWORD PTR [rbx+0x8],rdx
  406b36:	mov    QWORD PTR [rbx],rax
  406b39:	mov    edx,DWORD PTR [rbx+0x20]
  406b3c:	call   403140 <memset@plt>
  406b41:	mov    rax,QWORD PTR [rbx+0x30]
  406b45:	mov    edi,DWORD PTR [rbx+0x70]
  406b48:	mov    edx,DWORD PTR [rax+0x8]
  406b4b:	mov    esi,DWORD PTR [rax]
  406b4d:	mov    ecx,DWORD PTR [rax+0x4]
  406b50:	mov    DWORD PTR [rbx+0x20],edx
  406b53:	mov    rdx,rsi
  406b56:	sub    edi,edx
  406b58:	mov    DWORD PTR [rbx+0x28],esi
  406b5b:	mov    edx,edi
  406b5d:	add    rsi,QWORD PTR [rbx+0x68]
  406b61:	cmp    ecx,edi
  406b63:	cmovb  edx,ecx
  406b66:	mov    QWORD PTR [rbx+0x18],rsi
  406b6a:	mov    DWORD PTR [rbx+0x24],edx
  406b6d:	movzx  edx,WORD PTR [rbx+0xea]
  406b74:	mov    DWORD PTR [rax+0x4],ecx
  406b77:	cmp    dx,WORD PTR [rbx+0xe8]
  406b7e:	jbe    406b87 <flatcc_builder_end_table@@Base+0x147>
  406b80:	mov    WORD PTR [rbx+0xe8],dx
  406b87:	movzx  edx,WORD PTR [rax+0xc]
  406b8b:	dec    DWORD PTR [rbx+0x104]
  406b91:	sub    rax,0x24
  406b95:	mov    QWORD PTR [rbx+0x30],rax
  406b99:	mov    WORD PTR [rbx+0xea],dx
  406ba0:	add    rsp,0x8
  406ba4:	mov    eax,ebp
  406ba6:	pop    rbx
  406ba7:	pop    rbp
  406ba8:	pop    r12
  406baa:	pop    r13
  406bac:	ret    
  406bad:	lea    rcx,[rip+0x2f3c]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  406bb4:	mov    edx,0x525
  406bb9:	lea    rsi,[rip+0x2810]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406bc0:	lea    rdi,[rip+0x2a51]        # 409618 <_IO_stdin_used@@Base+0x618>
  406bc7:	call   403130 <__assert_fail@plt>
  406bcc:	nop    DWORD PTR [rax+0x0]

0000000000406bd0 <flatcc_builder_create_vector@@Base>:
  406bd0:	endbr64 
  406bd4:	push   rbp
  406bd5:	push   rbx
  406bd6:	sub    rsp,0xb8
  406bdd:	mov    rax,QWORD PTR fs:0x28
  406be6:	mov    QWORD PTR [rsp+0xa8],rax
  406bee:	xor    eax,eax
  406bf0:	cmp    rdx,r9
  406bf3:	ja     406d34 <flatcc_builder_create_vector@@Base+0x164>
  406bf9:	cmp    r8w,0x4
  406bfe:	mov    eax,0x4
  406c03:	cmovb  r8d,eax
  406c07:	mov    rbx,rdi
  406c0a:	movzx  edi,r8w
  406c0e:	cmp    r8w,WORD PTR [rbx+0xe8]
  406c16:	jbe    406c20 <flatcc_builder_create_vector@@Base+0x50>
  406c18:	mov    WORD PTR [rbx+0xe8],r8w
  406c20:	imul   ecx,edx
  406c23:	mov    DWORD PTR [rsp+0xc],edx
  406c27:	mov    edx,DWORD PTR [rbx+0xf0]
  406c2d:	dec    edi
  406c2f:	mov    eax,edx
  406c31:	sub    eax,ecx
  406c33:	and    eax,edi
  406c35:	lea    rdi,[rsp+0xc]
  406c3a:	mov    QWORD PTR [rsp+0x10],0x4
  406c43:	mov    QWORD PTR [rsp+0x20],rdi
  406c48:	mov    QWORD PTR [rsp+0x28],0x4
  406c51:	mov    DWORD PTR [rsp+0x18],0x1
  406c59:	mov    r8d,0x4
  406c5f:	test   ecx,ecx
  406c61:	je     406c7e <flatcc_builder_create_vector@@Base+0xae>
  406c63:	lea    r8,[rcx+0x4]
  406c67:	mov    QWORD PTR [rsp+0x10],r8
  406c6c:	mov    QWORD PTR [rsp+0x30],rsi
  406c71:	mov    QWORD PTR [rsp+0x38],rcx
  406c76:	mov    DWORD PTR [rsp+0x18],0x2
  406c7e:	test   eax,eax
  406c80:	jne    406ce0 <flatcc_builder_create_vector@@Base+0x110>
  406c82:	mov    ebp,edx
  406c84:	movabs rax,0x10000000f
  406c8e:	sub    ebp,r8d
  406c91:	cmp    r8,rax
  406c94:	ja     406d10 <flatcc_builder_create_vector@@Base+0x140>
  406c96:	cmp    edx,ebp
  406c98:	jle    406d10 <flatcc_builder_create_vector@@Base+0x140>
  406c9a:	mov    rdi,QWORD PTR [rbx+0x38]
  406c9e:	mov    edx,DWORD PTR [rsp+0x18]
  406ca2:	lea    rsi,[rsp+0x20]
  406ca7:	mov    ecx,ebp
  406ca9:	call   QWORD PTR [rbx+0x48]
  406cac:	test   eax,eax
  406cae:	jne    406d2f <flatcc_builder_create_vector@@Base+0x15f>
  406cb0:	mov    DWORD PTR [rbx+0xf0],ebp
  406cb6:	mov    eax,ebp
  406cb8:	mov    rbx,QWORD PTR [rsp+0xa8]
  406cc0:	xor    rbx,QWORD PTR fs:0x28
  406cc9:	jne    406d53 <flatcc_builder_create_vector@@Base+0x183>
  406ccf:	add    rsp,0xb8
  406cd6:	pop    rbx
  406cd7:	pop    rbp
  406cd8:	ret    
  406cd9:	nop    DWORD PTR [rax+0x0]
  406ce0:	movsxd rsi,DWORD PTR [rsp+0x18]
  406ce5:	mov    rdi,0x409ec0
  406cec:	mov    rcx,rsi
  406cef:	add    r8,rax
  406cf2:	shl    rsi,0x4
  406cf6:	inc    ecx
  406cf8:	mov    QWORD PTR [rsp+0x10],r8
  406cfd:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  406d02:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406d07:	mov    DWORD PTR [rsp+0x18],ecx
  406d0b:	jmp    406c82 <flatcc_builder_create_vector@@Base+0xb2>
  406d10:	lea    rcx,[rip+0x30f9]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  406d17:	mov    edx,0x287
  406d1c:	lea    rsi,[rip+0x26ad]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406d23:	lea    rdi,[rip+0x2a3d]        # 409767 <_IO_stdin_used@@Base+0x767>
  406d2a:	call   403130 <__assert_fail@plt>
  406d2f:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  406d34:	lea    rcx,[rip+0x2d95]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  406d3b:	mov    edx,0x555
  406d40:	lea    rsi,[rip+0x2689]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406d47:	lea    rdi,[rip+0x2a8b]        # 4097d9 <_IO_stdin_used@@Base+0x7d9>
  406d4e:	call   403130 <__assert_fail@plt>
  406d53:	call   403120 <__stack_chk_fail@plt>
  406d58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406d60 <flatcc_builder_end_vector@@Base>:
  406d60:	endbr64 
  406d64:	push   rbp
  406d65:	push   rbx
  406d66:	sub    rsp,0x8
  406d6a:	mov    rax,QWORD PTR [rdi+0x30]
  406d6e:	cmp    WORD PTR [rax+0xe],0x4
  406d73:	jne    406e26 <flatcc_builder_end_vector@@Base+0xc6>
  406d79:	mov    ecx,DWORD PTR [rax+0x10]
  406d7c:	mov    edx,DWORD PTR [rax+0x14]
  406d7f:	mov    rsi,QWORD PTR [rdi+0x18]
  406d83:	mov    r9d,DWORD PTR [rax+0x18]
  406d87:	movzx  r8d,WORD PTR [rdi+0xea]
  406d8f:	mov    rbx,rdi
  406d92:	call   406bd0 <flatcc_builder_create_vector@@Base>
  406d97:	mov    ebp,eax
  406d99:	test   eax,eax
  406d9b:	jne    406db0 <flatcc_builder_end_vector@@Base+0x50>
  406d9d:	add    rsp,0x8
  406da1:	pop    rbx
  406da2:	mov    eax,ebp
  406da4:	pop    rbp
  406da5:	ret    
  406da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406db0:	mov    edx,DWORD PTR [rbx+0x20]
  406db3:	mov    rdi,QWORD PTR [rbx+0x18]
  406db7:	xor    esi,esi
  406db9:	call   403140 <memset@plt>
  406dbe:	mov    rax,QWORD PTR [rbx+0x30]
  406dc2:	mov    edi,DWORD PTR [rbx+0x70]
  406dc5:	mov    edx,DWORD PTR [rax+0x8]
  406dc8:	mov    esi,DWORD PTR [rax]
  406dca:	mov    ecx,DWORD PTR [rax+0x4]
  406dcd:	mov    DWORD PTR [rbx+0x20],edx
  406dd0:	mov    rdx,rsi
  406dd3:	sub    edi,edx
  406dd5:	mov    DWORD PTR [rbx+0x28],esi
  406dd8:	mov    edx,edi
  406dda:	add    rsi,QWORD PTR [rbx+0x68]
  406dde:	cmp    ecx,edi
  406de0:	cmovb  edx,ecx
  406de3:	mov    QWORD PTR [rbx+0x18],rsi
  406de7:	mov    DWORD PTR [rbx+0x24],edx
  406dea:	movzx  edx,WORD PTR [rbx+0xea]
  406df1:	mov    DWORD PTR [rax+0x4],ecx
  406df4:	cmp    dx,WORD PTR [rbx+0xe8]
  406dfb:	jbe    406e04 <flatcc_builder_end_vector@@Base+0xa4>
  406dfd:	mov    WORD PTR [rbx+0xe8],dx
  406e04:	movzx  edx,WORD PTR [rax+0xc]
  406e08:	dec    DWORD PTR [rbx+0x104]
  406e0e:	sub    rax,0x24
  406e12:	mov    QWORD PTR [rbx+0x30],rax
  406e16:	mov    WORD PTR [rbx+0xea],dx
  406e1d:	add    rsp,0x8
  406e21:	mov    eax,ebp
  406e23:	pop    rbx
  406e24:	pop    rbp
  406e25:	ret    
  406e26:	lea    rcx,[rip+0x2c83]        # 409ab0 <_IO_stdin_used@@Base+0xab0>
  406e2d:	mov    edx,0x578
  406e32:	lea    rsi,[rip+0x2597]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406e39:	lea    rdi,[rip+0x2670]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  406e40:	call   403130 <__assert_fail@plt>
  406e45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406e50 <flatcc_builder_vector_count@@Base>:
  406e50:	endbr64 
  406e54:	mov    rax,QWORD PTR [rdi+0x30]
  406e58:	mov    eax,DWORD PTR [rax+0x14]
  406e5b:	ret    
  406e5c:	nop    DWORD PTR [rax+0x0]

0000000000406e60 <flatcc_builder_vector_edit@@Base>:
  406e60:	endbr64 
  406e64:	mov    rax,QWORD PTR [rdi+0x18]
  406e68:	ret    
  406e69:	nop    DWORD PTR [rax+0x0]

0000000000406e70 <flatcc_builder_create_offset_vector_direct@@Base>:
  406e70:	endbr64 
  406e74:	xor    ecx,ecx
  406e76:	jmp    404780 <flatcc_builder_default_alloc@@Base+0x450>
  406e7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406e80 <flatcc_builder_end_offset_vector@@Base>:
  406e80:	endbr64 
  406e84:	push   rbp
  406e85:	push   rbx
  406e86:	sub    rsp,0x8
  406e8a:	mov    rax,QWORD PTR [rdi+0x30]
  406e8e:	cmp    WORD PTR [rax+0xe],0x5
  406e93:	jne    406f36 <flatcc_builder_end_offset_vector@@Base+0xb6>
  406e99:	mov    edx,DWORD PTR [rax+0x14]
  406e9c:	mov    rsi,QWORD PTR [rdi+0x18]
  406ea0:	mov    rbx,rdi
  406ea3:	call   406e70 <flatcc_builder_create_offset_vector_direct@@Base>
  406ea8:	mov    ebp,eax
  406eaa:	test   eax,eax
  406eac:	jne    406ec0 <flatcc_builder_end_offset_vector@@Base+0x40>
  406eae:	add    rsp,0x8
  406eb2:	pop    rbx
  406eb3:	mov    eax,ebp
  406eb5:	pop    rbp
  406eb6:	ret    
  406eb7:	nop    WORD PTR [rax+rax*1+0x0]
  406ec0:	mov    edx,DWORD PTR [rbx+0x20]
  406ec3:	mov    rdi,QWORD PTR [rbx+0x18]
  406ec7:	xor    esi,esi
  406ec9:	call   403140 <memset@plt>
  406ece:	mov    rax,QWORD PTR [rbx+0x30]
  406ed2:	mov    edi,DWORD PTR [rbx+0x70]
  406ed5:	mov    edx,DWORD PTR [rax+0x8]
  406ed8:	mov    esi,DWORD PTR [rax]
  406eda:	mov    ecx,DWORD PTR [rax+0x4]
  406edd:	mov    DWORD PTR [rbx+0x20],edx
  406ee0:	mov    rdx,rsi
  406ee3:	sub    edi,edx
  406ee5:	mov    DWORD PTR [rbx+0x28],esi
  406ee8:	mov    edx,edi
  406eea:	add    rsi,QWORD PTR [rbx+0x68]
  406eee:	cmp    ecx,edi
  406ef0:	cmovb  edx,ecx
  406ef3:	mov    QWORD PTR [rbx+0x18],rsi
  406ef7:	mov    DWORD PTR [rbx+0x24],edx
  406efa:	movzx  edx,WORD PTR [rbx+0xea]
  406f01:	mov    DWORD PTR [rax+0x4],ecx
  406f04:	cmp    dx,WORD PTR [rbx+0xe8]
  406f0b:	jbe    406f14 <flatcc_builder_end_offset_vector@@Base+0x94>
  406f0d:	mov    WORD PTR [rbx+0xe8],dx
  406f14:	movzx  edx,WORD PTR [rax+0xc]
  406f18:	dec    DWORD PTR [rbx+0x104]
  406f1e:	sub    rax,0x24
  406f22:	mov    QWORD PTR [rbx+0x30],rax
  406f26:	mov    WORD PTR [rbx+0xea],dx
  406f2d:	add    rsp,0x8
  406f31:	mov    eax,ebp
  406f33:	pop    rbx
  406f34:	pop    rbp
  406f35:	ret    
  406f36:	lea    rcx,[rip+0x2b23]        # 409a60 <_IO_stdin_used@@Base+0xa60>
  406f3d:	mov    edx,0x5c8
  406f42:	lea    rsi,[rip+0x2487]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406f49:	lea    rdi,[rip+0x25d0]        # 409520 <_IO_stdin_used@@Base+0x520>
  406f50:	call   403130 <__assert_fail@plt>
  406f55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406f60 <flatcc_builder_create_offset_vector@@Base>:
  406f60:	endbr64 
  406f64:	push   r12
  406f66:	mov    r12,rsi
  406f69:	push   rbp
  406f6a:	mov    rbp,rdx
  406f6d:	push   rbx
  406f6e:	mov    rbx,rdi
  406f71:	call   405f20 <flatcc_builder_start_offset_vector@@Base>
  406f76:	test   eax,eax
  406f78:	je     406f88 <flatcc_builder_create_offset_vector@@Base+0x28>
  406f7a:	pop    rbx
  406f7b:	pop    rbp
  406f7c:	xor    eax,eax
  406f7e:	pop    r12
  406f80:	ret    
  406f81:	nop    DWORD PTR [rax+0x0]
  406f88:	mov    rsi,rbp
  406f8b:	mov    rdi,rbx
  406f8e:	call   4059d0 <flatcc_builder_extend_offset_vector@@Base>
  406f93:	test   rax,rax
  406f96:	je     406f7a <flatcc_builder_create_offset_vector@@Base+0x1a>
  406f98:	lea    rdx,[rbp*4+0x0]
  406fa0:	mov    rsi,r12
  406fa3:	mov    rdi,rax
  406fa6:	call   403180 <memcpy@plt>
  406fab:	mov    rdi,rbx
  406fae:	pop    rbx
  406faf:	pop    rbp
  406fb0:	pop    r12
  406fb2:	jmp    406e80 <flatcc_builder_end_offset_vector@@Base>
  406fb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406fc0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406fc0:	endbr64 
  406fc4:	push   rbp
  406fc5:	push   rbx
  406fc6:	sub    rsp,0x8
  406fca:	mov    rax,QWORD PTR [rdi+0x30]
  406fce:	cmp    WORD PTR [rax+0xe],0x5
  406fd3:	jne    407076 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  406fd9:	mov    rcx,rsi
  406fdc:	mov    edx,DWORD PTR [rax+0x14]
  406fdf:	mov    rsi,QWORD PTR [rdi+0x18]
  406fe3:	mov    rbx,rdi
  406fe6:	call   404780 <flatcc_builder_default_alloc@@Base+0x450>
  406feb:	mov    ebp,eax
  406fed:	test   eax,eax
  406fef:	jne    407000 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  406ff1:	add    rsp,0x8
  406ff5:	pop    rbx
  406ff6:	mov    eax,ebp
  406ff8:	pop    rbp
  406ff9:	ret    
  406ffa:	nop    WORD PTR [rax+rax*1+0x0]
  407000:	mov    edx,DWORD PTR [rbx+0x20]
  407003:	mov    rdi,QWORD PTR [rbx+0x18]
  407007:	xor    esi,esi
  407009:	call   403140 <memset@plt>
  40700e:	mov    rax,QWORD PTR [rbx+0x30]
  407012:	mov    edi,DWORD PTR [rbx+0x70]
  407015:	mov    edx,DWORD PTR [rax+0x8]
  407018:	mov    esi,DWORD PTR [rax]
  40701a:	mov    ecx,DWORD PTR [rax+0x4]
  40701d:	mov    DWORD PTR [rbx+0x20],edx
  407020:	mov    rdx,rsi
  407023:	sub    edi,edx
  407025:	mov    DWORD PTR [rbx+0x28],esi
  407028:	mov    edx,edi
  40702a:	add    rsi,QWORD PTR [rbx+0x68]
  40702e:	cmp    ecx,edi
  407030:	cmovb  edx,ecx
  407033:	mov    QWORD PTR [rbx+0x18],rsi
  407037:	mov    DWORD PTR [rbx+0x24],edx
  40703a:	movzx  edx,WORD PTR [rbx+0xea]
  407041:	mov    DWORD PTR [rax+0x4],ecx
  407044:	cmp    dx,WORD PTR [rbx+0xe8]
  40704b:	jbe    407054 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  40704d:	mov    WORD PTR [rbx+0xe8],dx
  407054:	movzx  edx,WORD PTR [rax+0xc]
  407058:	dec    DWORD PTR [rbx+0x104]
  40705e:	sub    rax,0x24
  407062:	mov    QWORD PTR [rbx+0x30],rax
  407066:	mov    WORD PTR [rbx+0xea],dx
  40706d:	add    rsp,0x8
  407071:	mov    eax,ebp
  407073:	pop    rbx
  407074:	pop    rbp
  407075:	ret    
  407076:	lea    rcx,[rip+0x29a3]        # 409a20 <_IO_stdin_used@@Base+0xa20>
  40707d:	mov    edx,0x5d5
  407082:	lea    rsi,[rip+0x2347]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407089:	lea    rdi,[rip+0x2490]        # 409520 <_IO_stdin_used@@Base+0x520>
  407090:	call   403130 <__assert_fail@plt>
  407095:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004070a0 <flatcc_builder_offset_vector_edit@@Base>:
  4070a0:	endbr64 
  4070a4:	mov    rax,QWORD PTR [rdi+0x18]
  4070a8:	ret    
  4070a9:	nop    DWORD PTR [rax+0x0]

00000000004070b0 <flatcc_builder_offset_vector_count@@Base>:
  4070b0:	endbr64 
  4070b4:	mov    rax,QWORD PTR [rdi+0x30]
  4070b8:	mov    eax,DWORD PTR [rax+0x14]
  4070bb:	ret    
  4070bc:	nop    DWORD PTR [rax+0x0]

00000000004070c0 <flatcc_builder_create_union_vector_direct@@Base>:
  4070c0:	endbr64 
  4070c4:	push   r13
  4070c6:	mov    r13,rcx
  4070c9:	push   r12
  4070cb:	mov    r12,rsi
  4070ce:	mov    rcx,r12
  4070d1:	push   rbp
  4070d2:	mov    rsi,rdx
  4070d5:	mov    rdx,r13
  4070d8:	push   rbx
  4070d9:	mov    rbp,rdi
  4070dc:	sub    rsp,0x8
  4070e0:	call   404780 <flatcc_builder_default_alloc@@Base+0x450>
  4070e5:	test   eax,eax
  4070e7:	jne    407100 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  4070e9:	add    rsp,0x8
  4070ed:	pop    rbx
  4070ee:	pop    rbp
  4070ef:	pop    r12
  4070f1:	xor    eax,eax
  4070f3:	pop    r13
  4070f5:	ret    
  4070f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407100:	mov    rdx,r13
  407103:	mov    rsi,r12
  407106:	mov    rdi,rbp
  407109:	mov    r9d,0xffffffff
  40710f:	mov    r8d,0x1
  407115:	mov    ecx,0x1
  40711a:	mov    ebx,eax
  40711c:	call   406bd0 <flatcc_builder_create_vector@@Base>
  407121:	mov    edx,eax
  407123:	mov    rsi,rbx
  407126:	shl    rsi,0x20
  40712a:	mov    rax,rdx
  40712d:	or     rax,rsi
  407130:	test   edx,edx
  407132:	mov    rdx,rax
  407135:	mov    rax,rsi
  407138:	cmovne rax,rdx
  40713c:	add    rsp,0x8
  407140:	pop    rbx
  407141:	pop    rbp
  407142:	pop    r12
  407144:	pop    r13
  407146:	ret    
  407147:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407150 <flatcc_builder_create_union_vector@@Base>:
  407150:	endbr64 
  407154:	push   r13
  407156:	push   r12
  407158:	mov    r12,rdx
  40715b:	push   rbp
  40715c:	mov    rbp,rsi
  40715f:	push   rbx
  407160:	mov    rbx,rdi
  407163:	sub    rsp,0x8
  407167:	call   405f20 <flatcc_builder_start_offset_vector@@Base>
  40716c:	test   eax,eax
  40716e:	je     407180 <flatcc_builder_create_union_vector@@Base+0x30>
  407170:	add    rsp,0x8
  407174:	pop    rbx
  407175:	pop    rbp
  407176:	pop    r12
  407178:	xor    eax,eax
  40717a:	pop    r13
  40717c:	ret    
  40717d:	nop    DWORD PTR [rax]
  407180:	mov    rsi,r12
  407183:	mov    rdi,rbx
  407186:	call   4059d0 <flatcc_builder_extend_offset_vector@@Base>
  40718b:	test   rax,rax
  40718e:	je     407170 <flatcc_builder_create_union_vector@@Base+0x20>
  407190:	mov    r13d,DWORD PTR [rbx+0x20]
  407194:	mov    rax,r13
  407197:	add    eax,r12d
  40719a:	mov    DWORD PTR [rbx+0x20],eax
  40719d:	cmp    eax,DWORD PTR [rbx+0x24]
  4071a0:	jae    407270 <flatcc_builder_create_union_vector@@Base+0x120>
  4071a6:	add    r13,QWORD PTR [rbx+0x18]
  4071aa:	je     407170 <flatcc_builder_create_union_vector@@Base+0x20>
  4071ac:	mov    rdi,rbx
  4071af:	call   4070a0 <flatcc_builder_offset_vector_edit@@Base>
  4071b4:	test   r12,r12
  4071b7:	je     4071d9 <flatcc_builder_create_union_vector@@Base+0x89>
  4071b9:	xor    edi,edi
  4071bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4071c0:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  4071c5:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  4071ca:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  4071ce:	mov    DWORD PTR [rax+rdi*4],ecx
  4071d1:	inc    rdi
  4071d4:	cmp    r12,rdi
  4071d7:	jne    4071c0 <flatcc_builder_create_union_vector@@Base+0x70>
  4071d9:	mov    rcx,r12
  4071dc:	mov    rdx,rax
  4071df:	mov    rsi,r13
  4071e2:	mov    rdi,rbx
  4071e5:	call   4070c0 <flatcc_builder_create_union_vector_direct@@Base>
  4071ea:	mov    edx,DWORD PTR [rbx+0x20]
  4071ed:	mov    rdi,QWORD PTR [rbx+0x18]
  4071f1:	xor    esi,esi
  4071f3:	mov    rbp,rax
  4071f6:	call   403140 <memset@plt>
  4071fb:	mov    rax,QWORD PTR [rbx+0x30]
  4071ff:	mov    edx,DWORD PTR [rax+0x8]
  407202:	mov    esi,DWORD PTR [rax]
  407204:	mov    DWORD PTR [rbx+0x20],edx
  407207:	mov    DWORD PTR [rbx+0x28],esi
  40720a:	mov    rdx,rsi
  40720d:	add    rsi,QWORD PTR [rbx+0x68]
  407211:	mov    ecx,DWORD PTR [rax+0x4]
  407214:	mov    QWORD PTR [rbx+0x18],rsi
  407218:	mov    esi,DWORD PTR [rbx+0x70]
  40721b:	sub    esi,edx
  40721d:	mov    edx,esi
  40721f:	cmp    ecx,esi
  407221:	cmovb  edx,ecx
  407224:	mov    DWORD PTR [rbx+0x24],edx
  407227:	movzx  edx,WORD PTR [rbx+0xea]
  40722e:	mov    DWORD PTR [rax+0x4],ecx
  407231:	cmp    dx,WORD PTR [rbx+0xe8]
  407238:	jbe    407241 <flatcc_builder_create_union_vector@@Base+0xf1>
  40723a:	mov    WORD PTR [rbx+0xe8],dx
  407241:	movzx  edx,WORD PTR [rax+0xc]
  407245:	sub    rax,0x24
  407249:	mov    QWORD PTR [rbx+0x30],rax
  40724d:	mov    WORD PTR [rbx+0xea],dx
  407254:	dec    DWORD PTR [rbx+0x104]
  40725a:	add    rsp,0x8
  40725e:	pop    rbx
  40725f:	mov    rax,rbp
  407262:	pop    rbp
  407263:	pop    r12
  407265:	pop    r13
  407267:	ret    
  407268:	nop    DWORD PTR [rax+rax*1+0x0]
  407270:	lea    esi,[rax+0x1]
  407273:	mov    edx,0xfffffffc
  407278:	mov    rdi,rbx
  40727b:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  407280:	test   eax,eax
  407282:	je     4071a6 <flatcc_builder_create_union_vector@@Base+0x56>
  407288:	jmp    407170 <flatcc_builder_create_union_vector@@Base+0x20>
  40728d:	nop    DWORD PTR [rax]

0000000000407290 <flatcc_builder_start_union_vector@@Base>:
  407290:	endbr64 
  407294:	push   rbx
  407295:	mov    esi,0x4
  40729a:	mov    rbx,rdi
  40729d:	call   404660 <flatcc_builder_default_alloc@@Base+0x330>
  4072a2:	test   eax,eax
  4072a4:	jne    4072e0 <flatcc_builder_start_union_vector@@Base+0x50>
  4072a6:	mov    rcx,QWORD PTR [rbx+0x30]
  4072aa:	xor    edx,edx
  4072ac:	mov    QWORD PTR [rcx+0xe],0x80007
  4072b4:	mov    WORD PTR [rcx+0x16],dx
  4072b8:	mov    edx,DWORD PTR [rbx+0x28]
  4072bb:	mov    rsi,rdx
  4072be:	add    rdx,QWORD PTR [rbx+0x68]
  4072c2:	mov    QWORD PTR [rbx+0x18],rdx
  4072c6:	mov    edx,DWORD PTR [rbx+0x70]
  4072c9:	sub    edx,esi
  4072cb:	mov    esi,0xfffffffc
  4072d0:	cmp    edx,esi
  4072d2:	cmova  edx,esi
  4072d5:	mov    DWORD PTR [rbx+0x24],edx
  4072d8:	mov    DWORD PTR [rcx+0x4],esi
  4072db:	pop    rbx
  4072dc:	ret    
  4072dd:	nop    DWORD PTR [rax]
  4072e0:	mov    eax,0xffffffff
  4072e5:	pop    rbx
  4072e6:	ret    
  4072e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004072f0 <flatcc_builder_union_vector_edit@@Base>:
  4072f0:	endbr64 
  4072f4:	mov    rax,QWORD PTR [rdi+0x18]
  4072f8:	ret    
  4072f9:	nop    DWORD PTR [rax+0x0]

0000000000407300 <flatcc_builder_union_vector_count@@Base>:
  407300:	endbr64 
  407304:	mov    rax,QWORD PTR [rdi+0x30]
  407308:	mov    eax,DWORD PTR [rax+0x14]
  40730b:	ret    
  40730c:	nop    DWORD PTR [rax+0x0]

0000000000407310 <flatcc_builder_end_union_vector@@Base>:
  407310:	endbr64 
  407314:	push   r13
  407316:	push   r12
  407318:	push   rbp
  407319:	push   rbx
  40731a:	sub    rsp,0x8
  40731e:	mov    rax,QWORD PTR [rdi+0x30]
  407322:	cmp    WORD PTR [rax+0xe],0x7
  407327:	jne    40744d <flatcc_builder_end_union_vector@@Base+0x13d>
  40732d:	mov    rbx,rdi
  407330:	call   407300 <flatcc_builder_union_vector_count@@Base>
  407335:	mov    ebp,DWORD PTR [rbx+0x20]
  407338:	mov    r12,rax
  40733b:	lea    eax,[rax+rax*4]
  40733e:	add    eax,ebp
  407340:	mov    DWORD PTR [rbx+0x20],eax
  407343:	cmp    eax,DWORD PTR [rbx+0x24]
  407346:	jae    407428 <flatcc_builder_end_union_vector@@Base+0x118>
  40734c:	add    rbp,QWORD PTR [rbx+0x18]
  407350:	je     407440 <flatcc_builder_end_union_vector@@Base+0x130>
  407356:	mov    rdi,rbx
  407359:	lea    r13,[rbp+r12*4+0x0]
  40735e:	call   4072f0 <flatcc_builder_union_vector_edit@@Base>
  407363:	test   r12,r12
  407366:	je     40738c <flatcc_builder_end_union_vector@@Base+0x7c>
  407368:	xor    edi,edi
  40736a:	nop    WORD PTR [rax+rax*1+0x0]
  407370:	movzx  r8d,BYTE PTR [rax+rdi*8]
  407375:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  40737a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  40737f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  407384:	inc    rdi
  407387:	cmp    r12,rdi
  40738a:	jne    407370 <flatcc_builder_end_union_vector@@Base+0x60>
  40738c:	mov    rcx,r12
  40738f:	mov    rdx,rbp
  407392:	mov    rsi,r13
  407395:	mov    rdi,rbx
  407398:	call   4070c0 <flatcc_builder_create_union_vector_direct@@Base>
  40739d:	mov    edx,DWORD PTR [rbx+0x20]
  4073a0:	mov    rdi,QWORD PTR [rbx+0x18]
  4073a4:	xor    esi,esi
  4073a6:	mov    rbp,rax
  4073a9:	call   403140 <memset@plt>
  4073ae:	mov    rdx,QWORD PTR [rbx+0x30]
  4073b2:	mov    esi,DWORD PTR [rdx]
  4073b4:	mov    eax,DWORD PTR [rdx+0x8]
  4073b7:	mov    rcx,rsi
  4073ba:	mov    DWORD PTR [rbx+0x28],esi
  4073bd:	add    rsi,QWORD PTR [rbx+0x68]
  4073c1:	mov    DWORD PTR [rbx+0x20],eax
  4073c4:	mov    eax,DWORD PTR [rdx+0x4]
  4073c7:	mov    QWORD PTR [rbx+0x18],rsi
  4073cb:	mov    esi,DWORD PTR [rbx+0x70]
  4073ce:	sub    esi,ecx
  4073d0:	cmp    eax,esi
  4073d2:	mov    ecx,esi
  4073d4:	cmovb  ecx,eax
  4073d7:	mov    DWORD PTR [rbx+0x24],ecx
  4073da:	mov    DWORD PTR [rdx+0x4],eax
  4073dd:	movzx  eax,WORD PTR [rbx+0xea]
  4073e4:	cmp    ax,WORD PTR [rbx+0xe8]
  4073eb:	ja     407418 <flatcc_builder_end_union_vector@@Base+0x108>
  4073ed:	movzx  eax,WORD PTR [rdx+0xc]
  4073f1:	dec    DWORD PTR [rbx+0x104]
  4073f7:	sub    rdx,0x24
  4073fb:	mov    WORD PTR [rbx+0xea],ax
  407402:	mov    QWORD PTR [rbx+0x30],rdx
  407406:	add    rsp,0x8
  40740a:	mov    rax,rbp
  40740d:	pop    rbx
  40740e:	pop    rbp
  40740f:	pop    r12
  407411:	pop    r13
  407413:	ret    
  407414:	nop    DWORD PTR [rax+0x0]
  407418:	mov    WORD PTR [rbx+0xe8],ax
  40741f:	jmp    4073ed <flatcc_builder_end_union_vector@@Base+0xdd>
  407421:	nop    DWORD PTR [rax+0x0]
  407428:	lea    esi,[rax+0x1]
  40742b:	mov    edx,0xfffffffc
  407430:	mov    rdi,rbx
  407433:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  407438:	test   eax,eax
  40743a:	je     40734c <flatcc_builder_end_union_vector@@Base+0x3c>
  407440:	add    rsp,0x8
  407444:	pop    rbx
  407445:	pop    rbp
  407446:	pop    r12
  407448:	xor    eax,eax
  40744a:	pop    r13
  40744c:	ret    
  40744d:	lea    rcx,[rip+0x254c]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  407454:	mov    edx,0x651
  407459:	lea    rsi,[rip+0x1f70]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407460:	lea    rdi,[rip+0x21e1]        # 409648 <_IO_stdin_used@@Base+0x648>
  407467:	call   403130 <__assert_fail@plt>
  40746c:	nop    DWORD PTR [rax+0x0]

0000000000407470 <flatcc_builder_extend_union_vector@@Base>:
  407470:	endbr64 
  407474:	push   rbp
  407475:	mov    edx,esi
  407477:	push   rbx
  407478:	sub    rsp,0x8
  40747c:	mov    rax,QWORD PTR [rdi+0x30]
  407480:	add    edx,DWORD PTR [rax+0x14]
  407483:	jb     4074c5 <flatcc_builder_extend_union_vector@@Base+0x55>
  407485:	cmp    edx,0x1fffffff
  40748b:	ja     4074c5 <flatcc_builder_extend_union_vector@@Base+0x55>
  40748d:	mov    ebp,DWORD PTR [rdi+0x20]
  407490:	mov    DWORD PTR [rax+0x14],edx
  407493:	lea    eax,[rbp+rsi*8+0x0]
  407497:	mov    rbx,rdi
  40749a:	mov    DWORD PTR [rdi+0x20],eax
  40749d:	cmp    eax,DWORD PTR [rdi+0x24]
  4074a0:	jae    4074b0 <flatcc_builder_extend_union_vector@@Base+0x40>
  4074a2:	mov    rax,QWORD PTR [rbx+0x18]
  4074a6:	add    rax,rbp
  4074a9:	add    rsp,0x8
  4074ad:	pop    rbx
  4074ae:	pop    rbp
  4074af:	ret    
  4074b0:	lea    esi,[rax+0x1]
  4074b3:	mov    edx,0xfffffffc
  4074b8:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  4074bd:	test   eax,eax
  4074bf:	je     4074a2 <flatcc_builder_extend_union_vector@@Base+0x32>
  4074c1:	xor    eax,eax
  4074c3:	jmp    4074a9 <flatcc_builder_extend_union_vector@@Base+0x39>
  4074c5:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  4074ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004074d0 <flatcc_builder_truncate_union_vector@@Base>:
  4074d0:	endbr64 
  4074d4:	sub    rsp,0x8
  4074d8:	mov    rax,QWORD PTR [rdi+0x30]
  4074dc:	cmp    WORD PTR [rax+0xe],0x7
  4074e1:	jne    407512 <flatcc_builder_truncate_union_vector@@Base+0x42>
  4074e3:	mov    edx,DWORD PTR [rax+0x14]
  4074e6:	cmp    edx,esi
  4074e8:	jb     407531 <flatcc_builder_truncate_union_vector@@Base+0x61>
  4074ea:	sub    edx,esi
  4074ec:	mov    DWORD PTR [rax+0x14],edx
  4074ef:	imul   esi,DWORD PTR [rax+0x10]
  4074f3:	mov    eax,DWORD PTR [rdi+0x20]
  4074f6:	mov    edx,esi
  4074f8:	sub    eax,esi
  4074fa:	mov    DWORD PTR [rdi+0x20],eax
  4074fd:	add    rax,QWORD PTR [rdi+0x18]
  407501:	mov    rdi,rax
  407504:	xor    esi,esi
  407506:	call   403140 <memset@plt>
  40750b:	xor    eax,eax
  40750d:	add    rsp,0x8
  407511:	ret    
  407512:	lea    rcx,[rip+0x2447]        # 409960 <_IO_stdin_used@@Base+0x960>
  407519:	mov    edx,0x681
  40751e:	lea    rsi,[rip+0x1eab]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407525:	lea    rdi,[rip+0x211c]        # 409648 <_IO_stdin_used@@Base+0x648>
  40752c:	call   403130 <__assert_fail@plt>
  407531:	lea    rcx,[rip+0x2428]        # 409960 <_IO_stdin_used@@Base+0x960>
  407538:	mov    edx,0x682
  40753d:	lea    rsi,[rip+0x1e8c]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407544:	lea    rdi,[rip+0x2065]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  40754b:	call   403130 <__assert_fail@plt>

0000000000407550 <flatcc_builder_union_vector_push@@Base>:
  407550:	endbr64 
  407554:	push   r12
  407556:	push   rbp
  407557:	push   rbx
  407558:	mov    rdx,QWORD PTR [rdi+0x30]
  40755c:	cmp    WORD PTR [rdx+0xe],0x7
  407561:	jne    4075b8 <flatcc_builder_union_vector_push@@Base+0x68>
  407563:	mov    eax,DWORD PTR [rdx+0x14]
  407566:	cmp    eax,0x1fffffff
  40756b:	je     4075b1 <flatcc_builder_union_vector_push@@Base+0x61>
  40756d:	mov    ebp,DWORD PTR [rdi+0x20]
  407570:	inc    eax
  407572:	mov    DWORD PTR [rdx+0x14],eax
  407575:	lea    edx,[rbp+0x8]
  407578:	mov    rbx,rdi
  40757b:	mov    r12,rsi
  40757e:	mov    DWORD PTR [rdi+0x20],edx
  407581:	cmp    edx,DWORD PTR [rdi+0x24]
  407584:	jae    4075a0 <flatcc_builder_union_vector_push@@Base+0x50>
  407586:	mov    rax,rbp
  407589:	add    rax,QWORD PTR [rbx+0x18]
  40758d:	je     407592 <flatcc_builder_union_vector_push@@Base+0x42>
  40758f:	mov    QWORD PTR [rax],r12
  407592:	pop    rbx
  407593:	pop    rbp
  407594:	pop    r12
  407596:	ret    
  407597:	nop    WORD PTR [rax+rax*1+0x0]
  4075a0:	lea    esi,[rbp+0x9]
  4075a3:	mov    edx,0xfffffffc
  4075a8:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  4075ad:	test   eax,eax
  4075af:	je     407586 <flatcc_builder_union_vector_push@@Base+0x36>
  4075b1:	pop    rbx
  4075b2:	pop    rbp
  4075b3:	xor    eax,eax
  4075b5:	pop    r12
  4075b7:	ret    
  4075b8:	lea    rcx,[rip+0x2361]        # 409920 <_IO_stdin_used@@Base+0x920>
  4075bf:	mov    edx,0x68d
  4075c4:	lea    rsi,[rip+0x1e05]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4075cb:	lea    rdi,[rip+0x2076]        # 409648 <_IO_stdin_used@@Base+0x648>
  4075d2:	call   403130 <__assert_fail@plt>
  4075d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004075e0 <flatcc_builder_append_union_vector@@Base>:
  4075e0:	endbr64 
  4075e4:	push   r13
  4075e6:	push   r12
  4075e8:	push   rbp
  4075e9:	push   rbx
  4075ea:	sub    rsp,0x8
  4075ee:	mov    rax,QWORD PTR [rdi+0x30]
  4075f2:	cmp    WORD PTR [rax+0xe],0x7
  4075f7:	jne    407666 <flatcc_builder_append_union_vector@@Base+0x86>
  4075f9:	mov    ecx,edx
  4075fb:	add    ecx,DWORD PTR [rax+0x14]
  4075fe:	jb     407685 <flatcc_builder_append_union_vector@@Base+0xa5>
  407604:	cmp    ecx,0x1fffffff
  40760a:	ja     407685 <flatcc_builder_append_union_vector@@Base+0xa5>
  40760c:	mov    r12d,DWORD PTR [rdi+0x20]
  407610:	lea    ebx,[rdx*8+0x0]
  407617:	mov    rdx,r12
  40761a:	add    edx,ebx
  40761c:	mov    DWORD PTR [rax+0x14],ecx
  40761f:	mov    rbp,rdi
  407622:	mov    r13,rsi
  407625:	mov    DWORD PTR [rdi+0x20],edx
  407628:	cmp    edx,DWORD PTR [rdi+0x24]
  40762b:	jae    407650 <flatcc_builder_append_union_vector@@Base+0x70>
  40762d:	add    r12,QWORD PTR [rbp+0x18]
  407631:	je     407640 <flatcc_builder_append_union_vector@@Base+0x60>
  407633:	mov    edx,ebx
  407635:	mov    rsi,r13
  407638:	mov    rdi,r12
  40763b:	call   403180 <memcpy@plt>
  407640:	add    rsp,0x8
  407644:	pop    rbx
  407645:	pop    rbp
  407646:	mov    rax,r12
  407649:	pop    r12
  40764b:	pop    r13
  40764d:	ret    
  40764e:	xchg   ax,ax
  407650:	lea    esi,[rdx+0x1]
  407653:	mov    edx,0xfffffffc
  407658:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  40765d:	test   eax,eax
  40765f:	je     40762d <flatcc_builder_append_union_vector@@Base+0x4d>
  407661:	xor    r12d,r12d
  407664:	jmp    407640 <flatcc_builder_append_union_vector@@Base+0x60>
  407666:	lea    rcx,[rip+0x2273]        # 4098e0 <_IO_stdin_used@@Base+0x8e0>
  40766d:	mov    edx,0x69c
  407672:	lea    rsi,[rip+0x1d57]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407679:	lea    rdi,[rip+0x1fc8]        # 409648 <_IO_stdin_used@@Base+0x648>
  407680:	call   403130 <__assert_fail@plt>
  407685:	call   404630 <flatcc_builder_default_alloc@@Base+0x300>
  40768a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407690 <flatcc_builder_create_string@@Base>:
  407690:	endbr64 
  407694:	push   rbp
  407695:	push   rbx
  407696:	sub    rsp,0xb8
  40769d:	mov    rax,QWORD PTR fs:0x28
  4076a6:	mov    QWORD PTR [rsp+0xa8],rax
  4076ae:	xor    eax,eax
  4076b0:	mov    eax,0xffffffff
  4076b5:	cmp    rdx,rax
  4076b8:	ja     407780 <flatcc_builder_create_string@@Base+0xf0>
  4076be:	mov    rbx,rdi
  4076c1:	mov    edi,DWORD PTR [rdi+0xf0]
  4076c7:	lea    rcx,[rsp+0xc]
  4076cc:	lea    eax,[rdi-0x1]
  4076cf:	sub    eax,edx
  4076d1:	and    eax,0x3
  4076d4:	mov    DWORD PTR [rsp+0xc],edx
  4076d8:	inc    eax
  4076da:	mov    QWORD PTR [rsp+0x20],rcx
  4076df:	mov    QWORD PTR [rsp+0x28],0x4
  4076e8:	test   rdx,rdx
  4076eb:	jne    407760 <flatcc_builder_create_string@@Base+0xd0>
  4076ed:	mov    edx,0x2
  4076f2:	mov    ecx,0x1
  4076f7:	mov    r8d,0x4
  4076fd:	add    r8,rax
  407700:	mov    rsi,0x409ec0
  407707:	mov    ebp,edi
  407709:	shl    rcx,0x4
  40770d:	sub    ebp,r8d
  407710:	mov    QWORD PTR [rsp+0x10],r8
  407715:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40771a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  40771f:	mov    DWORD PTR [rsp+0x18],edx
  407723:	cmp    edi,ebp
  407725:	jle    407784 <flatcc_builder_create_string@@Base+0xf4>
  407727:	mov    rdi,QWORD PTR [rbx+0x38]
  40772b:	lea    rsi,[rsp+0x20]
  407730:	mov    ecx,ebp
  407732:	call   QWORD PTR [rbx+0x48]
  407735:	test   eax,eax
  407737:	jne    4077a8 <flatcc_builder_create_string@@Base+0x118>
  407739:	mov    DWORD PTR [rbx+0xf0],ebp
  40773f:	mov    rbx,QWORD PTR [rsp+0xa8]
  407747:	xor    rbx,QWORD PTR fs:0x28
  407750:	mov    eax,ebp
  407752:	jne    4077a3 <flatcc_builder_create_string@@Base+0x113>
  407754:	add    rsp,0xb8
  40775b:	pop    rbx
  40775c:	pop    rbp
  40775d:	ret    
  40775e:	xchg   ax,ax
  407760:	lea    r8,[rdx+0x4]
  407764:	mov    QWORD PTR [rsp+0x38],rdx
  407769:	mov    QWORD PTR [rsp+0x30],rsi
  40776e:	mov    edx,0x3
  407773:	mov    ecx,0x2
  407778:	jmp    4076fd <flatcc_builder_create_string@@Base+0x6d>
  40777d:	nop    DWORD PTR [rax]
  407780:	xor    ebp,ebp
  407782:	jmp    40773f <flatcc_builder_create_string@@Base+0xaf>
  407784:	lea    rcx,[rip+0x2685]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  40778b:	mov    edx,0x287
  407790:	lea    rsi,[rip+0x1c39]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407797:	lea    rdi,[rip+0x1fc9]        # 409767 <_IO_stdin_used@@Base+0x767>
  40779e:	call   403130 <__assert_fail@plt>
  4077a3:	call   403120 <__stack_chk_fail@plt>
  4077a8:	call   404600 <flatcc_builder_default_alloc@@Base+0x2d0>
  4077ad:	nop    DWORD PTR [rax]

00000000004077b0 <flatcc_builder_create_string_str@@Base>:
  4077b0:	endbr64 
  4077b4:	push   rbp
  4077b5:	mov    rbp,rdi
  4077b8:	mov    rdi,rsi
  4077bb:	push   rbx
  4077bc:	mov    rbx,rsi
  4077bf:	sub    rsp,0x8
  4077c3:	call   403110 <strlen@plt>
  4077c8:	add    rsp,0x8
  4077cc:	mov    rsi,rbx
  4077cf:	pop    rbx
  4077d0:	mov    rdi,rbp
  4077d3:	mov    rdx,rax
  4077d6:	pop    rbp
  4077d7:	jmp    407690 <flatcc_builder_create_string@@Base>
  4077dc:	nop    DWORD PTR [rax+0x0]

00000000004077e0 <flatcc_builder_create_string_strn@@Base>:
  4077e0:	endbr64 
  4077e4:	push   r12
  4077e6:	mov    r12,rdi
  4077e9:	push   rbp
  4077ea:	mov    rbp,rsi
  4077ed:	mov    rdi,rbp
  4077f0:	push   rbx
  4077f1:	xor    esi,esi
  4077f3:	mov    rbx,rdx
  4077f6:	call   403150 <memchr@plt>
  4077fb:	mov    rdx,rax
  4077fe:	sub    rdx,rbp
  407801:	test   rax,rax
  407804:	cmovne rbx,rdx
  407808:	mov    rsi,rbp
  40780b:	mov    rdx,rbx
  40780e:	pop    rbx
  40780f:	pop    rbp
  407810:	mov    rdi,r12
  407813:	pop    r12
  407815:	jmp    407690 <flatcc_builder_create_string@@Base>
  40781a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407820 <flatcc_builder_end_string@@Base>:
  407820:	endbr64 
  407824:	push   rbp
  407825:	push   rbx
  407826:	sub    rsp,0x8
  40782a:	mov    rax,QWORD PTR [rdi+0x30]
  40782e:	cmp    WORD PTR [rax+0xe],0x6
  407833:	jne    4078f5 <flatcc_builder_end_string@@Base+0xd5>
  407839:	mov    edx,DWORD PTR [rdi+0x20]
  40783c:	mov    rbx,rdi
  40783f:	cmp    DWORD PTR [rax+0x14],edx
  407842:	jne    4078d6 <flatcc_builder_end_string@@Base+0xb6>
  407848:	mov    rsi,QWORD PTR [rdi+0x18]
  40784c:	call   407690 <flatcc_builder_create_string@@Base>
  407851:	mov    ebp,eax
  407853:	test   eax,eax
  407855:	jne    407860 <flatcc_builder_end_string@@Base+0x40>
  407857:	add    rsp,0x8
  40785b:	pop    rbx
  40785c:	mov    eax,ebp
  40785e:	pop    rbp
  40785f:	ret    
  407860:	mov    edx,DWORD PTR [rbx+0x20]
  407863:	mov    rdi,QWORD PTR [rbx+0x18]
  407867:	xor    esi,esi
  407869:	call   403140 <memset@plt>
  40786e:	mov    rax,QWORD PTR [rbx+0x30]
  407872:	mov    edi,DWORD PTR [rbx+0x70]
  407875:	mov    edx,DWORD PTR [rax+0x8]
  407878:	mov    esi,DWORD PTR [rax]
  40787a:	mov    ecx,DWORD PTR [rax+0x4]
  40787d:	mov    DWORD PTR [rbx+0x20],edx
  407880:	mov    rdx,rsi
  407883:	sub    edi,edx
  407885:	mov    DWORD PTR [rbx+0x28],esi
  407888:	mov    edx,edi
  40788a:	add    rsi,QWORD PTR [rbx+0x68]
  40788e:	cmp    ecx,edi
  407890:	cmovb  edx,ecx
  407893:	mov    QWORD PTR [rbx+0x18],rsi
  407897:	mov    DWORD PTR [rbx+0x24],edx
  40789a:	movzx  edx,WORD PTR [rbx+0xea]
  4078a1:	mov    DWORD PTR [rax+0x4],ecx
  4078a4:	cmp    dx,WORD PTR [rbx+0xe8]
  4078ab:	jbe    4078b4 <flatcc_builder_end_string@@Base+0x94>
  4078ad:	mov    WORD PTR [rbx+0xe8],dx
  4078b4:	movzx  edx,WORD PTR [rax+0xc]
  4078b8:	dec    DWORD PTR [rbx+0x104]
  4078be:	sub    rax,0x24
  4078c2:	mov    QWORD PTR [rbx+0x30],rax
  4078c6:	mov    WORD PTR [rbx+0xea],dx
  4078cd:	add    rsp,0x8
  4078d1:	mov    eax,ebp
  4078d3:	pop    rbx
  4078d4:	pop    rbp
  4078d5:	ret    
  4078d6:	lea    rcx,[rip+0x1fe3]        # 4098c0 <_IO_stdin_used@@Base+0x8c0>
  4078dd:	mov    edx,0x6c5
  4078e2:	lea    rsi,[rip+0x1ae7]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4078e9:	lea    rdi,[rip+0x1d90]        # 409680 <_IO_stdin_used@@Base+0x680>
  4078f0:	call   403130 <__assert_fail@plt>
  4078f5:	lea    rcx,[rip+0x1fc4]        # 4098c0 <_IO_stdin_used@@Base+0x8c0>
  4078fc:	mov    edx,0x6c4
  407901:	lea    rsi,[rip+0x1ac8]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407908:	lea    rdi,[rip+0x1c49]        # 409558 <_IO_stdin_used@@Base+0x558>
  40790f:	call   403130 <__assert_fail@plt>
  407914:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40791f:	nop

0000000000407920 <flatcc_builder_string_edit@@Base>:
  407920:	endbr64 
  407924:	mov    rax,QWORD PTR [rdi+0x18]
  407928:	ret    
  407929:	nop    DWORD PTR [rax+0x0]

0000000000407930 <flatcc_builder_string_len@@Base>:
  407930:	endbr64 
  407934:	mov    rax,QWORD PTR [rdi+0x30]
  407938:	mov    eax,DWORD PTR [rax+0x14]
  40793b:	ret    
  40793c:	nop    DWORD PTR [rax+0x0]

0000000000407940 <flatcc_builder_table_add@@Base>:
  407940:	endbr64 
  407944:	push   r13
  407946:	push   r12
  407948:	push   rbp
  407949:	push   rbx
  40794a:	sub    rsp,0x8
  40794e:	mov    rax,QWORD PTR [rdi+0x30]
  407952:	cmp    WORD PTR [rax+0xe],0x3
  407957:	jne    407a24 <flatcc_builder_table_add@@Base+0xe4>
  40795d:	mov    r12d,esi
  407960:	cmp    esi,0x7ffc
  407966:	ja     407a62 <flatcc_builder_table_add@@Base+0x122>
  40796c:	mov    rbx,rdi
  40796f:	cmp    WORD PTR [rdi+0xea],cx
  407976:	jb     4079e0 <flatcc_builder_table_add@@Base+0xa0>
  407978:	movsxd r13,r12d
  40797b:	mov    rsi,QWORD PTR [rbx+0x8]
  40797f:	add    r13,r13
  407982:	add    rsi,r13
  407985:	cmp    WORD PTR [rsi],0x0
  407989:	jne    407a43 <flatcc_builder_table_add@@Base+0x103>
  40798f:	mov    eax,DWORD PTR [rbx+0x14]
  407992:	movzx  ecx,cx
  407995:	xor    eax,r12d
  407998:	imul   eax,eax,0x9e3779b1
  40799e:	xor    eax,edx
  4079a0:	imul   eax,eax,0x9e3779b1
  4079a6:	mov    DWORD PTR [rbx+0x14],eax
  4079a9:	mov    eax,DWORD PTR [rbx+0x20]
  4079ac:	lea    ebp,[rcx+rax*1-0x1]
  4079b0:	neg    ecx
  4079b2:	and    ebp,ecx
  4079b4:	add    edx,ebp
  4079b6:	mov    DWORD PTR [rbx+0x20],edx
  4079b9:	cmp    edx,DWORD PTR [rbx+0x24]
  4079bc:	jae    407a00 <flatcc_builder_table_add@@Base+0xc0>
  4079be:	lea    eax,[rbp+0x4]
  4079c1:	mov    WORD PTR [rsi],ax
  4079c4:	cmp    r12w,WORD PTR [rbx+0x10]
  4079c9:	jae    4079f0 <flatcc_builder_table_add@@Base+0xb0>
  4079cb:	mov    eax,ebp
  4079cd:	add    rax,QWORD PTR [rbx+0x18]
  4079d1:	add    rsp,0x8
  4079d5:	pop    rbx
  4079d6:	pop    rbp
  4079d7:	pop    r12
  4079d9:	pop    r13
  4079db:	ret    
  4079dc:	nop    DWORD PTR [rax+0x0]
  4079e0:	mov    WORD PTR [rdi+0xea],cx
  4079e7:	jmp    407978 <flatcc_builder_table_add@@Base+0x38>
  4079e9:	nop    DWORD PTR [rax+0x0]
  4079f0:	inc    r12d
  4079f3:	mov    WORD PTR [rbx+0x10],r12w
  4079f8:	jmp    4079cb <flatcc_builder_table_add@@Base+0x8b>
  4079fa:	nop    WORD PTR [rax+rax*1+0x0]
  407a00:	lea    esi,[rdx+0x1]
  407a03:	mov    rdi,rbx
  407a06:	mov    edx,0xfffc
  407a0b:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  407a10:	test   eax,eax
  407a12:	jne    407a20 <flatcc_builder_table_add@@Base+0xe0>
  407a14:	mov    rsi,QWORD PTR [rbx+0x8]
  407a18:	add    rsi,r13
  407a1b:	jmp    4079be <flatcc_builder_table_add@@Base+0x7e>
  407a1d:	nop    DWORD PTR [rax]
  407a20:	xor    eax,eax
  407a22:	jmp    4079d1 <flatcc_builder_table_add@@Base+0x91>
  407a24:	lea    rcx,[rip+0x1e75]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  407a2b:	mov    edx,0x6ed
  407a30:	lea    rsi,[rip+0x1999]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407a37:	lea    rdi,[rip+0x1bda]        # 409618 <_IO_stdin_used@@Base+0x618>
  407a3e:	call   403130 <__assert_fail@plt>
  407a43:	lea    rcx,[rip+0x1e56]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  407a4a:	mov    edx,0x6f8
  407a4f:	lea    rsi,[rip+0x197a]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407a56:	lea    rdi,[rip+0x1d0a]        # 409767 <_IO_stdin_used@@Base+0x767>
  407a5d:	call   403130 <__assert_fail@plt>
  407a62:	lea    rcx,[rip+0x1e37]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  407a69:	mov    edx,0x6ee
  407a6e:	lea    rsi,[rip+0x195b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407a75:	lea    rdi,[rip+0x1c2c]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  407a7c:	call   403130 <__assert_fail@plt>
  407a81:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407a8c:	nop    DWORD PTR [rax+0x0]

0000000000407a90 <flatcc_builder_table_edit@@Base>:
  407a90:	endbr64 
  407a94:	mov    rax,QWORD PTR [rdi+0x30]
  407a98:	cmp    WORD PTR [rax+0xe],0x3
  407a9d:	jne    407aaa <flatcc_builder_table_edit@@Base+0x1a>
  407a9f:	mov    eax,DWORD PTR [rdi+0x20]
  407aa2:	sub    rax,rsi
  407aa5:	add    rax,QWORD PTR [rdi+0x18]
  407aa9:	ret    
  407aaa:	push   rax
  407aab:	lea    rcx,[rip+0x1dce]        # 409880 <_IO_stdin_used@@Base+0x880>
  407ab2:	mov    edx,0x702
  407ab7:	lea    rsi,[rip+0x1912]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407abe:	lea    rdi,[rip+0x1b53]        # 409618 <_IO_stdin_used@@Base+0x618>
  407ac5:	call   403130 <__assert_fail@plt>
  407aca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407ad0 <flatcc_builder_table_add_copy@@Base>:
  407ad0:	endbr64 
  407ad4:	push   rbp
  407ad5:	mov    rbp,rdx
  407ad8:	push   rbx
  407ad9:	mov    rbx,rcx
  407adc:	mov    rdx,rbx
  407adf:	movzx  ecx,r8w
  407ae3:	sub    rsp,0x8
  407ae7:	call   407940 <flatcc_builder_table_add@@Base>
  407aec:	mov    rcx,rax
  407aef:	test   rax,rax
  407af2:	je     407b05 <flatcc_builder_table_add_copy@@Base+0x35>
  407af4:	mov    rdx,rbx
  407af7:	mov    rsi,rbp
  407afa:	mov    rdi,rax
  407afd:	call   403180 <memcpy@plt>
  407b02:	mov    rcx,rax
  407b05:	add    rsp,0x8
  407b09:	pop    rbx
  407b0a:	mov    rax,rcx
  407b0d:	pop    rbp
  407b0e:	ret    
  407b0f:	nop

0000000000407b10 <flatcc_builder_table_add_offset@@Base>:
  407b10:	endbr64 
  407b14:	push   r13
  407b16:	push   r12
  407b18:	push   rbp
  407b19:	push   rbx
  407b1a:	sub    rsp,0x8
  407b1e:	mov    rax,QWORD PTR [rdi+0x30]
  407b22:	cmp    WORD PTR [rax+0xe],0x3
  407b27:	jne    407be4 <flatcc_builder_table_add_offset@@Base+0xd4>
  407b2d:	mov    r12d,esi
  407b30:	cmp    esi,0x7ffc
  407b36:	ja     407c22 <flatcc_builder_table_add_offset@@Base+0x112>
  407b3c:	movsxd r13,esi
  407b3f:	mov    rdx,QWORD PTR [rdi+0x8]
  407b43:	add    r13,r13
  407b46:	add    rdx,r13
  407b49:	cmp    WORD PTR [rdx],0x0
  407b4d:	mov    rbx,rdi
  407b50:	jne    407c03 <flatcc_builder_table_add_offset@@Base+0xf3>
  407b56:	mov    eax,DWORD PTR [rdi+0x14]
  407b59:	xor    eax,esi
  407b5b:	imul   eax,eax,0x9e3779b1
  407b61:	xor    eax,0x4
  407b64:	imul   eax,eax,0x9e3779b1
  407b6a:	mov    DWORD PTR [rdi+0x14],eax
  407b6d:	mov    eax,DWORD PTR [rdi+0x20]
  407b70:	lea    ebp,[rax+0x3]
  407b73:	and    ebp,0xfffffffc
  407b76:	lea    esi,[rbp+0x4]
  407b79:	mov    DWORD PTR [rdi+0x20],esi
  407b7c:	cmp    esi,DWORD PTR [rdi+0x24]
  407b7f:	ja     407bc0 <flatcc_builder_table_add_offset@@Base+0xb0>
  407b81:	lea    eax,[rbp+0x4]
  407b84:	mov    WORD PTR [rdx],ax
  407b87:	cmp    r12w,WORD PTR [rbx+0x10]
  407b8c:	jae    407bb0 <flatcc_builder_table_add_offset@@Base+0xa0>
  407b8e:	mov    rax,QWORD PTR [rbx]
  407b91:	lea    rdx,[rax+0x2]
  407b95:	mov    QWORD PTR [rbx],rdx
  407b98:	mov    WORD PTR [rax],bp
  407b9b:	mov    eax,ebp
  407b9d:	add    rax,QWORD PTR [rbx+0x18]
  407ba1:	add    rsp,0x8
  407ba5:	pop    rbx
  407ba6:	pop    rbp
  407ba7:	pop    r12
  407ba9:	pop    r13
  407bab:	ret    
  407bac:	nop    DWORD PTR [rax+0x0]
  407bb0:	lea    esi,[r12+0x1]
  407bb5:	mov    WORD PTR [rbx+0x10],si
  407bb9:	jmp    407b8e <flatcc_builder_table_add_offset@@Base+0x7e>
  407bbb:	nop    DWORD PTR [rax+rax*1+0x0]
  407bc0:	mov    edx,0xfffc
  407bc5:	call   4042d0 <access_monster_buffer@@Base+0x5e0>
  407bca:	test   eax,eax
  407bcc:	jne    407be0 <flatcc_builder_table_add_offset@@Base+0xd0>
  407bce:	mov    rdx,QWORD PTR [rbx+0x8]
  407bd2:	add    rdx,r13
  407bd5:	jmp    407b81 <flatcc_builder_table_add_offset@@Base+0x71>
  407bd7:	nop    WORD PTR [rax+rax*1+0x0]
  407be0:	xor    eax,eax
  407be2:	jmp    407ba1 <flatcc_builder_table_add_offset@@Base+0x91>
  407be4:	lea    rcx,[rip+0x1c75]        # 409860 <_IO_stdin_used@@Base+0x860>
  407beb:	mov    edx,0x713
  407bf0:	lea    rsi,[rip+0x17d9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407bf7:	lea    rdi,[rip+0x1a1a]        # 409618 <_IO_stdin_used@@Base+0x618>
  407bfe:	call   403130 <__assert_fail@plt>
  407c03:	lea    rcx,[rip+0x1c56]        # 409860 <_IO_stdin_used@@Base+0x860>
  407c0a:	mov    edx,0x71b
  407c0f:	lea    rsi,[rip+0x17ba]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c16:	lea    rdi,[rip+0x1b4a]        # 409767 <_IO_stdin_used@@Base+0x767>
  407c1d:	call   403130 <__assert_fail@plt>
  407c22:	lea    rcx,[rip+0x1c37]        # 409860 <_IO_stdin_used@@Base+0x860>
  407c29:	mov    edx,0x714
  407c2e:	lea    rsi,[rip+0x179b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c35:	lea    rdi,[rip+0x1a6c]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  407c3c:	call   403130 <__assert_fail@plt>
  407c41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407c4c:	nop    DWORD PTR [rax+0x0]

0000000000407c50 <flatcc_builder_table_add_union@@Base>:
  407c50:	endbr64 
  407c54:	push   r13
  407c56:	mov    r13,rdx
  407c59:	sar    r13,0x20
  407c5d:	push   r12
  407c5f:	push   rbp
  407c60:	push   rbx
  407c61:	sub    rsp,0x8
  407c65:	mov    rax,QWORD PTR [rdi+0x30]
  407c69:	cmp    WORD PTR [rax+0xe],0x3
  407c6e:	jne    407ce4 <flatcc_builder_table_add_union@@Base+0x94>
  407c70:	mov    r12,rdi
  407c73:	mov    ebx,esi
  407c75:	mov    rbp,rdx
  407c78:	test   dl,dl
  407c7a:	je     407cc0 <flatcc_builder_table_add_union@@Base+0x70>
  407c7c:	test   r13d,r13d
  407c7f:	je     407c92 <flatcc_builder_table_add_union@@Base+0x42>
  407c81:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  407c86:	test   rax,rax
  407c89:	je     407d22 <flatcc_builder_table_add_union@@Base+0xd2>
  407c8f:	mov    DWORD PTR [rax],r13d
  407c92:	lea    esi,[rbx-0x1]
  407c95:	mov    ecx,0x1
  407c9a:	mov    edx,0x1
  407c9f:	mov    rdi,r12
  407ca2:	call   407940 <flatcc_builder_table_add@@Base>
  407ca7:	test   rax,rax
  407caa:	je     407d03 <flatcc_builder_table_add_union@@Base+0xb3>
  407cac:	mov    BYTE PTR [rax],bpl
  407caf:	add    rsp,0x8
  407cb3:	xor    eax,eax
  407cb5:	pop    rbx
  407cb6:	pop    rbp
  407cb7:	pop    r12
  407cb9:	pop    r13
  407cbb:	ret    
  407cbc:	nop    DWORD PTR [rax+0x0]
  407cc0:	test   r13d,r13d
  407cc3:	je     407c92 <flatcc_builder_table_add_union@@Base+0x42>
  407cc5:	lea    rcx,[rip+0x1d24]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407ccc:	mov    edx,0x5ef
  407cd1:	lea    rsi,[rip+0x16f8]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407cd8:	lea    rdi,[rip+0x1a11]        # 4096f0 <_IO_stdin_used@@Base+0x6f0>
  407cdf:	call   403130 <__assert_fail@plt>
  407ce4:	lea    rcx,[rip+0x1d05]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407ceb:	mov    edx,0x5ee
  407cf0:	lea    rsi,[rip+0x16d9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407cf7:	lea    rdi,[rip+0x191a]        # 409618 <_IO_stdin_used@@Base+0x618>
  407cfe:	call   403130 <__assert_fail@plt>
  407d03:	lea    rcx,[rip+0x1ce6]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407d0a:	mov    edx,0x5f6
  407d0f:	lea    rsi,[rip+0x16ba]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407d16:	lea    rdi,[rip+0x1ad9]        # 4097f6 <_IO_stdin_used@@Base+0x7f6>
  407d1d:	call   403130 <__assert_fail@plt>
  407d22:	lea    rcx,[rip+0x1cc7]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407d29:	mov    edx,0x5f2
  407d2e:	lea    rsi,[rip+0x169b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407d35:	lea    rdi,[rip+0x1ab0]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407d3c:	call   403130 <__assert_fail@plt>
  407d41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407d4c:	nop    DWORD PTR [rax+0x0]

0000000000407d50 <flatcc_builder_table_add_union_vector@@Base>:
  407d50:	endbr64 
  407d54:	push   r12
  407d56:	push   rbp
  407d57:	mov    rbp,rdx
  407d5a:	sar    rbp,0x20
  407d5e:	push   rbx
  407d5f:	sub    rsp,0x10
  407d63:	mov    rcx,QWORD PTR [rdi+0x30]
  407d67:	cmp    WORD PTR [rcx+0xe],0x3
  407d6c:	jne    407de1 <flatcc_builder_table_add_union_vector@@Base+0x91>
  407d6e:	test   ebp,ebp
  407d70:	sete   cl
  407d73:	test   edx,edx
  407d75:	mov    r12d,esi
  407d78:	sete   sil
  407d7c:	cmp    sil,cl
  407d7f:	je     407da0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  407d81:	test   edx,edx
  407d83:	setne  al
  407d86:	cmp    cl,al
  407d88:	je     407e00 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  407d8a:	mov    eax,0xffffffff
  407d8f:	add    rsp,0x10
  407d93:	pop    rbx
  407d94:	pop    rbp
  407d95:	pop    r12
  407d97:	ret    
  407d98:	nop    DWORD PTR [rax+rax*1+0x0]
  407da0:	mov    eax,edx
  407da2:	test   edx,edx
  407da4:	je     407d8f <flatcc_builder_table_add_union_vector@@Base+0x3f>
  407da6:	lea    esi,[r12-0x1]
  407dab:	mov    QWORD PTR [rsp+0x8],rdx
  407db0:	mov    rbx,rdi
  407db3:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  407db8:	test   rax,rax
  407dbb:	mov    rdx,QWORD PTR [rsp+0x8]
  407dc0:	je     407e3e <flatcc_builder_table_add_union_vector@@Base+0xee>
  407dc2:	mov    DWORD PTR [rax],edx
  407dc4:	mov    esi,r12d
  407dc7:	mov    rdi,rbx
  407dca:	call   407b10 <flatcc_builder_table_add_offset@@Base>
  407dcf:	test   rax,rax
  407dd2:	je     407e1f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  407dd4:	mov    DWORD PTR [rax],ebp
  407dd6:	add    rsp,0x10
  407dda:	xor    eax,eax
  407ddc:	pop    rbx
  407ddd:	pop    rbp
  407dde:	pop    r12
  407de0:	ret    
  407de1:	lea    rcx,[rip+0x1bd8]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407de8:	mov    edx,0x600
  407ded:	lea    rsi,[rip+0x15dc]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407df4:	lea    rdi,[rip+0x181d]        # 409618 <_IO_stdin_used@@Base+0x618>
  407dfb:	call   403130 <__assert_fail@plt>
  407e00:	lea    rcx,[rip+0x1bb9]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407e07:	mov    edx,0x601
  407e0c:	lea    rsi,[rip+0x15bd]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407e13:	lea    rdi,[rip+0x18fe]        # 409718 <_IO_stdin_used@@Base+0x718>
  407e1a:	call   403130 <__assert_fail@plt>
  407e1f:	lea    rcx,[rip+0x1b9a]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407e26:	mov    edx,0x608
  407e2b:	lea    rsi,[rip+0x159e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407e32:	lea    rdi,[rip+0x19b3]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407e39:	call   403130 <__assert_fail@plt>
  407e3e:	lea    rcx,[rip+0x1b7b]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407e45:	mov    edx,0x604
  407e4a:	lea    rsi,[rip+0x157f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407e51:	lea    rdi,[rip+0x1994]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407e58:	call   403130 <__assert_fail@plt>
  407e5d:	nop    DWORD PTR [rax]

0000000000407e60 <flatcc_builder_push_buffer_alignment@@Base>:
  407e60:	endbr64 
  407e64:	mov    edx,0x4
  407e69:	movzx  eax,WORD PTR [rdi+0xe8]
  407e70:	mov    WORD PTR [rdi+0xe8],dx
  407e77:	ret    
  407e78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407e80 <flatcc_builder_pop_buffer_alignment@@Base>:
  407e80:	endbr64 
  407e84:	cmp    si,WORD PTR [rdi+0xe8]
  407e8b:	jbe    407e94 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  407e8d:	mov    WORD PTR [rdi+0xe8],si
  407e94:	ret    
  407e95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407ea0 <flatcc_builder_get_buffer_alignment@@Base>:
  407ea0:	endbr64 
  407ea4:	movzx  eax,WORD PTR [rdi+0xe8]
  407eab:	ret    
  407eac:	nop    DWORD PTR [rax+0x0]

0000000000407eb0 <flatcc_builder_set_vtable_clustering@@Base>:
  407eb0:	endbr64 
  407eb4:	xor    eax,eax
  407eb6:	test   esi,esi
  407eb8:	sete   al
  407ebb:	mov    DWORD PTR [rdi+0x124],eax
  407ec1:	ret    
  407ec2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407ecd:	nop    DWORD PTR [rax]

0000000000407ed0 <flatcc_builder_set_block_align@@Base>:
  407ed0:	endbr64 
  407ed4:	mov    WORD PTR [rdi+0xec],si
  407edb:	ret    
  407edc:	nop    DWORD PTR [rax+0x0]

0000000000407ee0 <flatcc_builder_get_level@@Base>:
  407ee0:	endbr64 
  407ee4:	mov    eax,DWORD PTR [rdi+0x104]
  407eea:	ret    
  407eeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ef0 <flatcc_builder_set_max_level@@Base>:
  407ef0:	endbr64 
  407ef4:	mov    DWORD PTR [rdi+0x120],esi
  407efa:	cmp    DWORD PTR [rdi+0x108],esi
  407f00:	jge    407f08 <flatcc_builder_set_max_level@@Base+0x18>
  407f02:	mov    DWORD PTR [rdi+0x108],esi
  407f08:	ret    
  407f09:	nop    DWORD PTR [rax+0x0]

0000000000407f10 <flatcc_builder_get_buffer_size@@Base>:
  407f10:	endbr64 
  407f14:	mov    eax,DWORD PTR [rdi+0xf4]
  407f1a:	sub    eax,DWORD PTR [rdi+0xf0]
  407f20:	cdqe   
  407f22:	ret    
  407f23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407f2e:	xchg   ax,ax

0000000000407f30 <flatcc_builder_get_buffer_start@@Base>:
  407f30:	endbr64 
  407f34:	mov    eax,DWORD PTR [rdi+0xf0]
  407f3a:	ret    
  407f3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f40 <flatcc_builder_get_buffer_end@@Base>:
  407f40:	endbr64 
  407f44:	mov    eax,DWORD PTR [rdi+0xf4]
  407f4a:	ret    
  407f4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f50 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407f50:	endbr64 
  407f54:	mov    QWORD PTR [rdi+0x118],rsi
  407f5b:	ret    
  407f5c:	nop    DWORD PTR [rax+0x0]

0000000000407f60 <flatcc_builder_set_identifier@@Base>:
  407f60:	endbr64 
  407f64:	test   rsi,rsi
  407f67:	je     407f78 <flatcc_builder_set_identifier@@Base+0x18>
  407f69:	mov    eax,DWORD PTR [rsi]
  407f6b:	mov    DWORD PTR [rdi+0x110],eax
  407f71:	ret    
  407f72:	nop    WORD PTR [rax+rax*1+0x0]
  407f78:	mov    rsi,0x409ec0
  407f7f:	mov    eax,DWORD PTR [rsi]
  407f81:	mov    DWORD PTR [rdi+0x110],eax
  407f87:	ret    
  407f88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f90 <flatcc_builder_get_type@@Base>:
  407f90:	endbr64 
  407f94:	mov    rdx,QWORD PTR [rdi+0x30]
  407f98:	xor    eax,eax
  407f9a:	test   rdx,rdx
  407f9d:	je     407fa3 <flatcc_builder_get_type@@Base+0x13>
  407f9f:	movzx  eax,WORD PTR [rdx+0xe]
  407fa3:	ret    
  407fa4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407faf:	nop

0000000000407fb0 <flatcc_builder_get_type_at@@Base>:
  407fb0:	endbr64 
  407fb4:	xor    eax,eax
  407fb6:	test   esi,esi
  407fb8:	jle    407fd9 <flatcc_builder_get_type_at@@Base+0x29>
  407fba:	mov    edx,DWORD PTR [rdi+0x104]
  407fc0:	cmp    edx,esi
  407fc2:	jl     407fd9 <flatcc_builder_get_type_at@@Base+0x29>
  407fc4:	sub    esi,edx
  407fc6:	movsxd rsi,esi
  407fc9:	mov    rdx,QWORD PTR [rdi+0x30]
  407fcd:	lea    rax,[rsi+rsi*8]
  407fd1:	lea    rax,[rdx+rax*4]
  407fd5:	movzx  eax,WORD PTR [rax+0xe]
  407fd9:	ret    
  407fda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fe0 <flatcc_builder_get_direct_buffer@@Base>:
  407fe0:	endbr64 
  407fe4:	mov    eax,DWORD PTR [rdi+0x128]
  407fea:	test   eax,eax
  407fec:	jne    408000 <flatcc_builder_get_direct_buffer@@Base+0x20>
  407fee:	xor    eax,eax
  407ff0:	test   rsi,rsi
  407ff3:	je     407ffc <flatcc_builder_get_direct_buffer@@Base+0x1c>
  407ff5:	mov    QWORD PTR [rsi],0x0
  407ffc:	ret    
  407ffd:	nop    DWORD PTR [rax]
  408000:	mov    rax,QWORD PTR [rdi+0x138]
  408007:	cmp    QWORD PTR [rdi+0x130],rax
  40800e:	jne    407fee <flatcc_builder_get_direct_buffer@@Base+0xe>
  408010:	test   rsi,rsi
  408013:	je     40801f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  408015:	mov    rax,QWORD PTR [rdi+0x160]
  40801c:	mov    QWORD PTR [rsi],rax
  40801f:	mov    rax,QWORD PTR [rdi+0x140]
  408026:	ret    
  408027:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408030 <flatcc_builder_copy_buffer@@Base>:
  408030:	endbr64 
  408034:	mov    eax,DWORD PTR [rdi+0x128]
  40803a:	test   eax,eax
  40803c:	je     408060 <flatcc_builder_copy_buffer@@Base+0x30>
  40803e:	sub    rsp,0x8
  408042:	add    rdi,0x130
  408049:	call   4088a0 <flatcc_emitter_copy_buffer@@Base>
  40804e:	test   rax,rax
  408051:	je     408063 <flatcc_builder_copy_buffer@@Base+0x33>
  408053:	add    rsp,0x8
  408057:	ret    
  408058:	nop    DWORD PTR [rax+rax*1+0x0]
  408060:	xor    eax,eax
  408062:	ret    
  408063:	lea    rcx,[rip+0x17d6]        # 409840 <_IO_stdin_used@@Base+0x840>
  40806a:	mov    edx,0x786
  40806f:	lea    rsi,[rip+0x135a]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  408076:	lea    rdi,[rip+0x1785]        # 409802 <_IO_stdin_used@@Base+0x802>
  40807d:	call   403130 <__assert_fail@plt>
  408082:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40808d:	nop    DWORD PTR [rax]

0000000000408090 <flatcc_builder_finalize_buffer@@Base>:
  408090:	endbr64 
  408094:	push   r12
  408096:	mov    r12,rdi
  408099:	push   rbp
  40809a:	push   rbx
  40809b:	mov    rbx,rsi
  40809e:	call   407f10 <flatcc_builder_get_buffer_size@@Base>
  4080a3:	mov    rbp,rax
  4080a6:	test   rbx,rbx
  4080a9:	je     4080ae <flatcc_builder_finalize_buffer@@Base+0x1e>
  4080ab:	mov    QWORD PTR [rbx],rax
  4080ae:	mov    rdi,rbp
  4080b1:	call   403190 <malloc@plt>
  4080b6:	mov    rbx,rax
  4080b9:	test   rax,rax
  4080bc:	je     4080d9 <flatcc_builder_finalize_buffer@@Base+0x49>
  4080be:	mov    rdx,rbp
  4080c1:	mov    rsi,rax
  4080c4:	mov    rdi,r12
  4080c7:	call   408030 <flatcc_builder_copy_buffer@@Base>
  4080cc:	test   rax,rax
  4080cf:	je     4080f8 <flatcc_builder_finalize_buffer@@Base+0x68>
  4080d1:	mov    rax,rbx
  4080d4:	pop    rbx
  4080d5:	pop    rbp
  4080d6:	pop    r12
  4080d8:	ret    
  4080d9:	lea    rcx,[rip+0x1740]        # 409820 <_IO_stdin_used@@Base+0x820>
  4080e0:	mov    edx,0x798
  4080e5:	lea    rsi,[rip+0x12e4]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4080ec:	lea    rdi,[rip+0x1674]        # 409767 <_IO_stdin_used@@Base+0x767>
  4080f3:	call   403130 <__assert_fail@plt>
  4080f8:	lea    rcx,[rip+0x1721]        # 409820 <_IO_stdin_used@@Base+0x820>
  4080ff:	mov    edx,0x79c
  408104:	lea    rsi,[rip+0x12c5]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40810b:	lea    rdi,[rip+0x1655]        # 409767 <_IO_stdin_used@@Base+0x767>
  408112:	call   403130 <__assert_fail@plt>
  408117:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408120 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408120:	endbr64 
  408124:	push   r13
  408126:	push   r12
  408128:	mov    r12,rsi
  40812b:	push   rbp
  40812c:	mov    rbp,rdi
  40812f:	push   rbx
  408130:	sub    rsp,0x18
  408134:	mov    rax,QWORD PTR fs:0x28
  40813d:	mov    QWORD PTR [rsp+0x8],rax
  408142:	xor    eax,eax
  408144:	call   407f10 <flatcc_builder_get_buffer_size@@Base>
  408149:	mov    rbx,rax
  40814c:	test   r12,r12
  40814f:	je     408155 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  408151:	mov    QWORD PTR [r12],rax
  408155:	mov    rdi,rbp
  408158:	call   407ea0 <flatcc_builder_get_buffer_alignment@@Base>
  40815d:	movzx  eax,ax
  408160:	lea    rdx,[rbx+rax*1-0x1]
  408165:	mov    rbx,rax
  408168:	neg    rbx
  40816b:	and    rbx,rdx
  40816e:	mov    esi,0x8
  408173:	cmp    rax,0x8
  408177:	cmovae rsi,rax
  40817b:	mov    rdi,rsp
  40817e:	mov    rdx,rbx
  408181:	mov    QWORD PTR [rsp],0x0
  408189:	call   4031c0 <posix_memalign@plt>
  40818e:	test   eax,eax
  408190:	je     4081b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  408192:	mov    rdi,QWORD PTR [rsp]
  408196:	test   rdi,rdi
  408199:	je     4081a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  40819b:	call   403100 <free@plt>
  4081a0:	test   r12,r12
  4081a3:	je     408202 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  4081a5:	mov    QWORD PTR [r12],0x0
  4081ad:	xor    r13d,r13d
  4081b0:	jmp    4081d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  4081b2:	nop    WORD PTR [rax+rax*1+0x0]
  4081b8:	mov    r13,QWORD PTR [rsp]
  4081bc:	test   r13,r13
  4081bf:	je     4081a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  4081c1:	mov    rdx,rbx
  4081c4:	mov    rsi,r13
  4081c7:	mov    rdi,rbp
  4081ca:	call   408030 <flatcc_builder_copy_buffer@@Base>
  4081cf:	test   rax,rax
  4081d2:	je     4081f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  4081d4:	mov    rcx,QWORD PTR [rsp+0x8]
  4081d9:	xor    rcx,QWORD PTR fs:0x28
  4081e2:	mov    rax,r13
  4081e5:	jne    4081fd <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  4081e7:	add    rsp,0x18
  4081eb:	pop    rbx
  4081ec:	pop    rbp
  4081ed:	pop    r12
  4081ef:	pop    r13
  4081f1:	ret    
  4081f2:	nop    WORD PTR [rax+rax*1+0x0]
  4081f8:	mov    rdi,r13
  4081fb:	jmp    40819b <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  4081fd:	call   403120 <__stack_chk_fail@plt>
  408202:	xor    r13d,r13d
  408205:	jmp    4081d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  408207:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408210 <flatcc_builder_aligned_alloc@@Base>:
  408210:	endbr64 
  408214:	sub    rsp,0x18
  408218:	mov    rax,QWORD PTR fs:0x28
  408221:	mov    QWORD PTR [rsp+0x8],rax
  408226:	xor    eax,eax
  408228:	mov    rdx,rsi
  40822b:	cmp    rdi,0x8
  40822f:	mov    esi,0x8
  408234:	cmovae rsi,rdi
  408238:	mov    rdi,rsp
  40823b:	mov    QWORD PTR [rsp],0x0
  408243:	call   4031c0 <posix_memalign@plt>
  408248:	test   eax,eax
  40824a:	mov    rax,QWORD PTR [rsp]
  40824e:	je     40825f <flatcc_builder_aligned_alloc@@Base+0x4f>
  408250:	test   rax,rax
  408253:	je     40825f <flatcc_builder_aligned_alloc@@Base+0x4f>
  408255:	mov    rdi,rax
  408258:	call   403100 <free@plt>
  40825d:	xor    eax,eax
  40825f:	mov    rcx,QWORD PTR [rsp+0x8]
  408264:	xor    rcx,QWORD PTR fs:0x28
  40826d:	jne    408274 <flatcc_builder_aligned_alloc@@Base+0x64>
  40826f:	add    rsp,0x18
  408273:	ret    
  408274:	call   403120 <__stack_chk_fail@plt>
  408279:	nop    DWORD PTR [rax+0x0]

0000000000408280 <flatcc_builder_aligned_free@@Base>:
  408280:	endbr64 
  408284:	jmp    403100 <free@plt>
  408289:	nop    DWORD PTR [rax+0x0]

0000000000408290 <flatcc_builder_get_emit_context@@Base>:
  408290:	endbr64 
  408294:	mov    rax,QWORD PTR [rdi+0x38]
  408298:	ret    
  408299:	nop    DWORD PTR [rax+0x0]

00000000004082a0 <flatcc_emitter_recycle_page@@Base>:
  4082a0:	endbr64 
  4082a4:	mov    rax,QWORD PTR [rdi]
  4082a7:	cmp    rax,rsi
  4082aa:	je     4082fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4082ac:	cmp    QWORD PTR [rdi+0x8],rsi
  4082b0:	je     4082fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4082b2:	mov    rdx,QWORD PTR [rsi+0xb88]
  4082b9:	mov    rcx,QWORD PTR [rsi+0xb80]
  4082c0:	mov    QWORD PTR [rcx+0xb88],rdx
  4082c7:	mov    QWORD PTR [rdx+0xb80],rcx
  4082ce:	mov    rdx,QWORD PTR [rax+0xb88]
  4082d5:	mov    QWORD PTR [rsi+0xb80],rax
  4082dc:	mov    QWORD PTR [rsi+0xb88],rdx
  4082e3:	mov    QWORD PTR [rdx+0xb80],rsi
  4082ea:	mov    rax,QWORD PTR [rsi+0xb80]
  4082f1:	mov    QWORD PTR [rax+0xb88],rsi
  4082f8:	xor    eax,eax
  4082fa:	ret    
  4082fb:	mov    eax,0xffffffff
  408300:	ret    
  408301:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40830c:	nop    DWORD PTR [rax+0x0]

0000000000408310 <flatcc_emitter_reset@@Base>:
  408310:	endbr64 
  408314:	mov    rax,QWORD PTR [rdi]
  408317:	test   rax,rax
  40831a:	je     4083f0 <flatcc_emitter_reset@@Base+0xe0>
  408320:	mov    rcx,QWORD PTR [rdi+0x40]
  408324:	mov    rsi,QWORD PTR [rdi+0x30]
  408328:	test   rcx,rcx
  40832b:	cmove  rcx,rsi
  40832f:	lea    rdx,[rax+0x5c0]
  408336:	mov    QWORD PTR [rdi+0x10],rdx
  40833a:	mov    QWORD PTR [rdi+0x20],rdx
  40833e:	lea    rdx,[rcx+rcx*2]
  408342:	shr    rdx,0x2
  408346:	shr    rsi,0x2
  40834a:	add    rdx,rsi
  40834d:	mov    QWORD PTR [rdi+0x8],rax
  408351:	mov    QWORD PTR [rdi+0x18],0x5c0
  408359:	mov    QWORD PTR [rdi+0x28],0x5c0
  408361:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40836b:	mov    QWORD PTR [rdi+0x40],rdx
  40836f:	add    rdx,rdx
  408372:	mov    QWORD PTR [rdi+0x30],0x0
  40837a:	cmp    rdx,QWORD PTR [rdi+0x38]
  40837e:	jae    4083f0 <flatcc_emitter_reset@@Base+0xe0>
  408380:	push   rbx
  408381:	mov    rbx,rdi
  408384:	mov    rdi,QWORD PTR [rax+0xb80]
  40838b:	cmp    rax,rdi
  40838e:	jne    4083a8 <flatcc_emitter_reset@@Base+0x98>
  408390:	jmp    4083e4 <flatcc_emitter_reset@@Base+0xd4>
  408392:	nop    WORD PTR [rax+rax*1+0x0]
  408398:	mov    rax,QWORD PTR [rbx+0x8]
  40839c:	mov    rdi,QWORD PTR [rax+0xb80]
  4083a3:	cmp    rdi,QWORD PTR [rbx]
  4083a6:	je     4083e4 <flatcc_emitter_reset@@Base+0xd4>
  4083a8:	mov    rdx,QWORD PTR [rdi+0xb80]
  4083af:	mov    QWORD PTR [rax+0xb80],rdx
  4083b6:	mov    rdx,QWORD PTR [rdi+0xb80]
  4083bd:	mov    QWORD PTR [rdx+0xb88],rax
  4083c4:	call   403100 <free@plt>
  4083c9:	mov    rax,QWORD PTR [rbx+0x38]
  4083cd:	mov    rcx,QWORD PTR [rbx+0x40]
  4083d1:	sub    rax,0xb80
  4083d7:	lea    rdx,[rcx+rcx*1]
  4083db:	mov    QWORD PTR [rbx+0x38],rax
  4083df:	cmp    rax,rdx
  4083e2:	ja     408398 <flatcc_emitter_reset@@Base+0x88>
  4083e4:	pop    rbx
  4083e5:	ret    
  4083e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4083f0:	ret    
  4083f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4083fc:	nop    DWORD PTR [rax+0x0]

0000000000408400 <flatcc_emitter_clear@@Base>:
  408400:	endbr64 
  408404:	mov    rax,QWORD PTR [rdi]
  408407:	test   rax,rax
  40840a:	je     408488 <flatcc_emitter_clear@@Base+0x88>
  40840c:	push   rbp
  40840d:	mov    rbp,rdi
  408410:	push   rbx
  408411:	sub    rsp,0x8
  408415:	mov    rdx,QWORD PTR [rax+0xb88]
  40841c:	mov    QWORD PTR [rdx+0xb80],0x0
  408427:	mov    rbx,QWORD PTR [rax+0xb80]
  40842e:	test   rbx,rbx
  408431:	jne    40843b <flatcc_emitter_clear@@Base+0x3b>
  408433:	jmp    408490 <flatcc_emitter_clear@@Base+0x90>
  408435:	nop    DWORD PTR [rax]
  408438:	mov    rbx,rax
  40843b:	mov    rdi,QWORD PTR [rbx+0xb88]
  408442:	call   403100 <free@plt>
  408447:	mov    rax,QWORD PTR [rbx+0xb80]
  40844e:	test   rax,rax
  408451:	jne    408438 <flatcc_emitter_clear@@Base+0x38>
  408453:	mov    rdi,rbx
  408456:	call   403100 <free@plt>
  40845b:	mov    QWORD PTR [rbp+0x40],0x0
  408463:	vpxor  xmm0,xmm0,xmm0
  408467:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  40846c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  408471:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  408476:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  40847b:	add    rsp,0x8
  40847f:	pop    rbx
  408480:	pop    rbp
  408481:	ret    
  408482:	nop    WORD PTR [rax+rax*1+0x0]
  408488:	ret    
  408489:	nop    DWORD PTR [rax+0x0]
  408490:	mov    rbx,rax
  408493:	jmp    408453 <flatcc_emitter_clear@@Base+0x53>
  408495:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004084a0 <flatcc_emitter@@Base>:
  4084a0:	endbr64 
  4084a4:	push   r15
  4084a6:	push   r14
  4084a8:	push   r13
  4084aa:	push   r12
  4084ac:	push   rbp
  4084ad:	mov    rbp,rsi
  4084b0:	push   rbx
  4084b1:	mov    rbx,rdi
  4084b4:	sub    rsp,0x18
  4084b8:	add    QWORD PTR [rdi+0x30],r8
  4084bc:	test   ecx,ecx
  4084be:	js     4086d0 <flatcc_emitter@@Base+0x230>
  4084c4:	mov    rax,QWORD PTR [rdi+0x28]
  4084c8:	cmp    rax,r8
  4084cb:	jae    408558 <flatcc_emitter@@Base+0xb8>
  4084d1:	test   edx,edx
  4084d3:	je     408543 <flatcc_emitter@@Base+0xa3>
  4084d5:	lea    r14d,[rdx-0x1]
  4084d9:	inc    r14
  4084dc:	shl    r14,0x4
  4084e0:	lea    rax,[rbp+r14*1+0x0]
  4084e5:	mov    QWORD PTR [rsp+0x8],rax
  4084ea:	nop    WORD PTR [rax+rax*1+0x0]
  4084f0:	mov    r15,QWORD PTR [rbp+0x8]
  4084f4:	mov    r13,QWORD PTR [rbp+0x0]
  4084f8:	test   r15,r15
  4084fb:	je     408538 <flatcc_emitter@@Base+0x98>
  4084fd:	nop    DWORD PTR [rax]
  408500:	mov    r12,QWORD PTR [rbx+0x28]
  408504:	cmp    r15,r12
  408507:	jbe    408600 <flatcc_emitter@@Base+0x160>
  40850d:	test   r12,r12
  408510:	je     4085a8 <flatcc_emitter@@Base+0x108>
  408516:	sub    r15,r12
  408519:	mov    rdi,QWORD PTR [rbx+0x20]
  40851d:	mov    rsi,r13
  408520:	mov    rdx,r12
  408523:	call   403180 <memcpy@plt>
  408528:	add    r13,r12
  40852b:	add    QWORD PTR [rbx+0x20],r12
  40852f:	sub    QWORD PTR [rbx+0x28],r12
  408533:	test   r15,r15
  408536:	jne    408500 <flatcc_emitter@@Base+0x60>
  408538:	add    rbp,0x10
  40853c:	cmp    rbp,QWORD PTR [rsp+0x8]
  408541:	jne    4084f0 <flatcc_emitter@@Base+0x50>
  408543:	add    rsp,0x18
  408547:	pop    rbx
  408548:	pop    rbp
  408549:	pop    r12
  40854b:	pop    r13
  40854d:	pop    r14
  40854f:	xor    eax,eax
  408551:	pop    r15
  408553:	ret    
  408554:	nop    DWORD PTR [rax+0x0]
  408558:	mov    rcx,QWORD PTR [rdi+0x20]
  40855c:	sub    rax,r8
  40855f:	lea    rsi,[rcx+r8*1]
  408563:	mov    QWORD PTR [rdi+0x20],rsi
  408567:	mov    QWORD PTR [rdi+0x28],rax
  40856b:	test   edx,edx
  40856d:	je     408543 <flatcc_emitter@@Base+0xa3>
  40856f:	lea    ebx,[rdx-0x1]
  408572:	inc    rbx
  408575:	shl    rbx,0x4
  408579:	add    rbx,rbp
  40857c:	nop    DWORD PTR [rax+0x0]
  408580:	mov    rsi,QWORD PTR [rbp+0x0]
  408584:	mov    rdx,QWORD PTR [rbp+0x8]
  408588:	mov    rdi,rcx
  40858b:	call   403180 <memcpy@plt>
  408590:	mov    rcx,QWORD PTR [rbp+0x8]
  408594:	add    rbp,0x10
  408598:	add    rcx,rax
  40859b:	cmp    rbp,rbx
  40859e:	jne    408580 <flatcc_emitter@@Base+0xe0>
  4085a0:	jmp    408543 <flatcc_emitter@@Base+0xa3>
  4085a2:	nop    WORD PTR [rax+rax*1+0x0]
  4085a8:	mov    r12,QWORD PTR [rbx+0x8]
  4085ac:	test   r12,r12
  4085af:	je     408658 <flatcc_emitter@@Base+0x1b8>
  4085b5:	mov    rax,QWORD PTR [r12+0xb80]
  4085bd:	mov    r14,QWORD PTR [rbx]
  4085c0:	cmp    rax,r14
  4085c3:	je     408610 <flatcc_emitter@@Base+0x170>
  4085c5:	mov    QWORD PTR [rbx+0x8],rax
  4085c9:	mov    QWORD PTR [rbx+0x28],0xb80
  4085d1:	mov    rdx,QWORD PTR [rax+0xb88]
  4085d8:	mov    QWORD PTR [rbx+0x20],rax
  4085dc:	mov    edx,DWORD PTR [rdx+0xb90]
  4085e2:	mov    r12,QWORD PTR [rbx+0x28]
  4085e6:	add    edx,0xb80
  4085ec:	mov    DWORD PTR [rax+0xb90],edx
  4085f2:	cmp    r15,r12
  4085f5:	ja     40850d <flatcc_emitter@@Base+0x6d>
  4085fb:	nop    DWORD PTR [rax+rax*1+0x0]
  408600:	mov    r12,r15
  408603:	xor    r15d,r15d
  408606:	jmp    408519 <flatcc_emitter@@Base+0x79>
  40860b:	nop    DWORD PTR [rax+rax*1+0x0]
  408610:	mov    edi,0xb98
  408615:	call   403190 <malloc@plt>
  40861a:	test   rax,rax
  40861d:	je     4086b8 <flatcc_emitter@@Base+0x218>
  408623:	add    QWORD PTR [rbx+0x38],0xb80
  40862b:	mov    QWORD PTR [rax+0xb88],r12
  408632:	mov    QWORD PTR [rax+0xb80],r14
  408639:	mov    QWORD PTR [r14+0xb88],rax
  408640:	mov    QWORD PTR [r12+0xb80],rax
  408648:	mov    QWORD PTR [rbx+0x8],rax
  40864c:	jmp    4085c9 <flatcc_emitter@@Base+0x129>
  408651:	nop    DWORD PTR [rax+0x0]
  408658:	mov    edi,0xb98
  40865d:	call   403190 <malloc@plt>
  408662:	test   rax,rax
  408665:	je     4086b8 <flatcc_emitter@@Base+0x218>
  408667:	lea    rdx,[rax+0x5c0]
  40866e:	add    QWORD PTR [rbx+0x38],0xb80
  408676:	mov    QWORD PTR [rbx],rax
  408679:	mov    QWORD PTR [rbx+0x8],rax
  40867d:	mov    QWORD PTR [rax+0xb80],rax
  408684:	mov    QWORD PTR [rax+0xb88],rax
  40868b:	mov    QWORD PTR [rbx+0x10],rdx
  40868f:	mov    QWORD PTR [rbx+0x20],rdx
  408693:	mov    QWORD PTR [rbx+0x18],0x5c0
  40869b:	mov    QWORD PTR [rbx+0x28],0x5c0
  4086a3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4086ad:	jmp    408500 <flatcc_emitter@@Base+0x60>
  4086b2:	nop    WORD PTR [rax+rax*1+0x0]
  4086b8:	add    rsp,0x18
  4086bc:	pop    rbx
  4086bd:	pop    rbp
  4086be:	pop    r12
  4086c0:	pop    r13
  4086c2:	pop    r14
  4086c4:	mov    eax,0xffffffff
  4086c9:	pop    r15
  4086cb:	ret    
  4086cc:	nop    DWORD PTR [rax+0x0]
  4086d0:	mov    rax,QWORD PTR [rdi+0x18]
  4086d4:	cmp    rax,r8
  4086d7:	jae    408880 <flatcc_emitter@@Base+0x3e0>
  4086dd:	movsxd rax,edx
  4086e0:	shl    rax,0x4
  4086e4:	add    rbp,rax
  4086e7:	mov    edx,edx
  4086e9:	shl    rdx,0x4
  4086ed:	mov    rax,rbp
  4086f0:	sub    rax,rdx
  4086f3:	mov    QWORD PTR [rsp+0x8],rax
  4086f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408700:	cmp    rbp,QWORD PTR [rsp+0x8]
  408705:	je     408543 <flatcc_emitter@@Base+0xa3>
  40870b:	sub    rbp,0x10
  40870f:	mov    r12,QWORD PTR [rbp+0x8]
  408713:	mov    r13,QWORD PTR [rbp+0x0]
  408717:	add    r13,r12
  40871a:	test   r12,r12
  40871d:	je     408700 <flatcc_emitter@@Base+0x260>
  40871f:	mov    rdx,QWORD PTR [rbx+0x18]
  408723:	cmp    rdx,r12
  408726:	jae    408760 <flatcc_emitter@@Base+0x2c0>
  408728:	test   rdx,rdx
  40872b:	je     408770 <flatcc_emitter@@Base+0x2d0>
  40872d:	sub    r12,rdx
  408730:	xor    ecx,ecx
  408732:	mov    rdi,QWORD PTR [rbx+0x10]
  408736:	mov    rax,rdx
  408739:	neg    rax
  40873c:	add    rdi,rax
  40873f:	mov    QWORD PTR [rbx+0x10],rdi
  408743:	mov    QWORD PTR [rbx+0x18],rcx
  408747:	add    r13,rax
  40874a:	mov    rsi,r13
  40874d:	call   403180 <memcpy@plt>
  408752:	test   r12,r12
  408755:	je     408700 <flatcc_emitter@@Base+0x260>
  408757:	mov    rdx,QWORD PTR [rbx+0x18]
  40875b:	cmp    rdx,r12
  40875e:	jb     408728 <flatcc_emitter@@Base+0x288>
  408760:	mov    rcx,rdx
  408763:	sub    rcx,r12
  408766:	mov    rdx,r12
  408769:	xor    r12d,r12d
  40876c:	jmp    408732 <flatcc_emitter@@Base+0x292>
  40876e:	xchg   ax,ax
  408770:	mov    r15,QWORD PTR [rbx]
  408773:	test   r15,r15
  408776:	je     408818 <flatcc_emitter@@Base+0x378>
  40877c:	mov    rax,QWORD PTR [r15+0xb88]
  408783:	mov    r14,QWORD PTR [rbx+0x8]
  408787:	cmp    rax,r14
  40878a:	je     4087d8 <flatcc_emitter@@Base+0x338>
  40878c:	mov    edx,DWORD PTR [r15+0xb90]
  408793:	sub    edx,0xb80
  408799:	mov    DWORD PTR [rax+0xb90],edx
  40879f:	mov    QWORD PTR [rbx],rax
  4087a2:	lea    rdx,[rax+0xb80]
  4087a9:	mov    QWORD PTR [rbx+0x10],rdx
  4087ad:	mov    rdx,QWORD PTR [rax+0xb80]
  4087b4:	mov    QWORD PTR [rbx+0x18],0xb80
  4087bc:	mov    edx,DWORD PTR [rdx+0xb90]
  4087c2:	sub    edx,0xb80
  4087c8:	mov    DWORD PTR [rax+0xb90],edx
  4087ce:	jmp    40871f <flatcc_emitter@@Base+0x27f>
  4087d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4087d8:	mov    edi,0xb98
  4087dd:	call   403190 <malloc@plt>
  4087e2:	test   rax,rax
  4087e5:	je     4086b8 <flatcc_emitter@@Base+0x218>
  4087eb:	add    QWORD PTR [rbx+0x38],0xb80
  4087f3:	mov    QWORD PTR [rax+0xb88],r14
  4087fa:	mov    QWORD PTR [rax+0xb80],r15
  408801:	mov    QWORD PTR [r15+0xb88],rax
  408808:	mov    QWORD PTR [r14+0xb80],rax
  40880f:	mov    QWORD PTR [rbx],rax
  408812:	jmp    4087a2 <flatcc_emitter@@Base+0x302>
  408814:	nop    DWORD PTR [rax+0x0]
  408818:	mov    edi,0xb98
  40881d:	call   403190 <malloc@plt>
  408822:	test   rax,rax
  408825:	je     4086b8 <flatcc_emitter@@Base+0x218>
  40882b:	lea    rdx,[rax+0x5c0]
  408832:	add    QWORD PTR [rbx+0x38],0xb80
  40883a:	mov    QWORD PTR [rbx],rax
  40883d:	mov    QWORD PTR [rbx+0x8],rax
  408841:	mov    QWORD PTR [rax+0xb80],rax
  408848:	mov    QWORD PTR [rax+0xb88],rax
  40884f:	mov    QWORD PTR [rbx+0x10],rdx
  408853:	mov    QWORD PTR [rbx+0x20],rdx
  408857:	mov    QWORD PTR [rbx+0x18],0x5c0
  40885f:	mov    QWORD PTR [rbx+0x28],0x5c0
  408867:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408871:	jmp    40871f <flatcc_emitter@@Base+0x27f>
  408876:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408880:	mov    rcx,QWORD PTR [rdi+0x10]
  408884:	sub    rax,r8
  408887:	sub    rcx,r8
  40888a:	mov    QWORD PTR [rdi+0x10],rcx
  40888e:	mov    QWORD PTR [rdi+0x18],rax
  408892:	jmp    40856b <flatcc_emitter@@Base+0xcb>
  408897:	nop    WORD PTR [rax+rax*1+0x0]

00000000004088a0 <flatcc_emitter_copy_buffer@@Base>:
  4088a0:	endbr64 
  4088a4:	mov    rax,QWORD PTR [rdi+0x30]
  4088a8:	cmp    rax,rdx
  4088ab:	ja     408950 <flatcc_emitter_copy_buffer@@Base+0xb0>
  4088b1:	mov    rcx,QWORD PTR [rdi]
  4088b4:	test   rcx,rcx
  4088b7:	je     408952 <flatcc_emitter_copy_buffer@@Base+0xb2>
  4088bd:	push   rbp
  4088be:	mov    r8,rsi
  4088c1:	mov    rbp,rdi
  4088c4:	push   rbx
  4088c5:	sub    rsp,0x8
  4088c9:	mov    rsi,QWORD PTR [rdi+0x10]
  4088cd:	cmp    rcx,QWORD PTR [rdi+0x8]
  4088d1:	je     408960 <flatcc_emitter_copy_buffer@@Base+0xc0>
  4088d7:	mov    ecx,0xb80
  4088dc:	mov    rbx,rcx
  4088df:	sub    rbx,QWORD PTR [rdi+0x18]
  4088e3:	mov    rdx,rbx
  4088e6:	mov    rdi,r8
  4088e9:	call   403180 <memcpy@plt>
  4088ee:	lea    rcx,[rax+rbx*1]
  4088f2:	mov    rax,QWORD PTR [rbp+0x0]
  4088f6:	mov    rbx,QWORD PTR [rax+0xb80]
  4088fd:	cmp    rbx,QWORD PTR [rbp+0x8]
  408901:	je     40892f <flatcc_emitter_copy_buffer@@Base+0x8f>
  408903:	nop    DWORD PTR [rax+rax*1+0x0]
  408908:	mov    rsi,rbx
  40890b:	mov    rdi,rcx
  40890e:	mov    edx,0xb80
  408913:	call   403180 <memcpy@plt>
  408918:	mov    rbx,QWORD PTR [rbx+0xb80]
  40891f:	mov    rcx,rax
  408922:	add    rcx,0xb80
  408929:	cmp    QWORD PTR [rbp+0x8],rbx
  40892d:	jne    408908 <flatcc_emitter_copy_buffer@@Base+0x68>
  40892f:	mov    edx,0xb80
  408934:	sub    rdx,QWORD PTR [rbp+0x28]
  408938:	mov    rsi,rbx
  40893b:	mov    rdi,rcx
  40893e:	call   403180 <memcpy@plt>
  408943:	add    rsp,0x8
  408947:	mov    rcx,rax
  40894a:	pop    rbx
  40894b:	mov    rax,rcx
  40894e:	pop    rbp
  40894f:	ret    
  408950:	xor    ecx,ecx
  408952:	mov    rax,rcx
  408955:	ret    
  408956:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408960:	mov    rdx,rax
  408963:	mov    rdi,r8
  408966:	call   403180 <memcpy@plt>
  40896b:	add    rsp,0x8
  40896f:	mov    rcx,rax
  408972:	pop    rbx
  408973:	mov    rax,rcx
  408976:	pop    rbp
  408977:	ret    
  408978:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408980 <__libc_csu_init@@Base>:
  408980:	endbr64 
  408984:	push   r15
  408986:	lea    r15,[rip+0x4483]        # 40ce10 <flatcc_builder_padding_base@@Base+0x2f50>
  40898d:	push   r14
  40898f:	mov    r14,rdx
  408992:	push   r13
  408994:	mov    r13,rsi
  408997:	push   r12
  408999:	mov    r12d,edi
  40899c:	push   rbp
  40899d:	lea    rbp,[rip+0x4474]        # 40ce18 <flatcc_builder_padding_base@@Base+0x2f58>
  4089a4:	push   rbx
  4089a5:	sub    rbp,r15
  4089a8:	sub    rsp,0x8
  4089ac:	call   403000 <free@plt-0x100>
  4089b1:	sar    rbp,0x3
  4089b5:	je     4089d6 <__libc_csu_init@@Base+0x56>
  4089b7:	xor    ebx,ebx
  4089b9:	nop    DWORD PTR [rax+0x0]
  4089c0:	mov    rdx,r14
  4089c3:	mov    rsi,r13
  4089c6:	mov    edi,r12d
  4089c9:	call   QWORD PTR [r15+rbx*8]
  4089cd:	add    rbx,0x1
  4089d1:	cmp    rbp,rbx
  4089d4:	jne    4089c0 <__libc_csu_init@@Base+0x40>
  4089d6:	add    rsp,0x8
  4089da:	pop    rbx
  4089db:	pop    rbp
  4089dc:	pop    r12
  4089de:	pop    r13
  4089e0:	pop    r14
  4089e2:	pop    r15
  4089e4:	ret    
  4089e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004089f0 <__libc_csu_fini@@Base>:
  4089f0:	endbr64 
  4089f4:	ret    

Disassembly of section .fini:

00000000004089f8 <.fini>:
  4089f8:	endbr64 
  4089fc:	sub    rsp,0x8
  408a00:	add    rsp,0x8
  408a04:	ret    
