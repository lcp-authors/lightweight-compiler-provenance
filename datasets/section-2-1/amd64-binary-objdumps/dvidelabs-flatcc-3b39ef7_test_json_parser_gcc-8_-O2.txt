
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x1dfe1]        # 420ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x15a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0x1dfe2]        # 421008 <flatcc_builder_padding_base@@Base+0x6088>
  403026:	bnd jmp QWORD PTR [rip+0x1dfe3]        # 421010 <flatcc_builder_padding_base@@Base+0x6090>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0x150>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0x150>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0x150>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0x150>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0x150>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0x150>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0x150>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0x150>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0x150>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0x150>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0x150>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0x150>
  4030ef:	nop
  4030f0:	endbr64 
  4030f4:	push   0xc
  4030f9:	bnd jmp 403020 <free@plt-0x150>
  4030ff:	nop
  403100:	endbr64 
  403104:	push   0xd
  403109:	bnd jmp 403020 <free@plt-0x150>
  40310f:	nop
  403110:	endbr64 
  403114:	push   0xe
  403119:	bnd jmp 403020 <free@plt-0x150>
  40311f:	nop
  403120:	endbr64 
  403124:	push   0xf
  403129:	bnd jmp 403020 <free@plt-0x150>
  40312f:	nop
  403130:	endbr64 
  403134:	push   0x10
  403139:	bnd jmp 403020 <free@plt-0x150>
  40313f:	nop
  403140:	endbr64 
  403144:	push   0x11
  403149:	bnd jmp 403020 <free@plt-0x150>
  40314f:	nop
  403150:	endbr64 
  403154:	push   0x12
  403159:	bnd jmp 403020 <free@plt-0x150>
  40315f:	nop
  403160:	endbr64 
  403164:	push   0x13
  403169:	bnd jmp 403020 <free@plt-0x150>
  40316f:	nop

Disassembly of section .plt.sec:

0000000000403170 <free@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0x1de9d]        # 421018 <free@GLIBC_2.2.5>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <fread@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0x1de95]        # 421020 <fread@GLIBC_2.2.5>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <strtod@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0x1de8d]        # 421028 <strtod@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <fclose@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0x1de85]        # 421030 <fclose@GLIBC_2.2.5>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031b0 <strlen@plt>:
  4031b0:	endbr64 
  4031b4:	bnd jmp QWORD PTR [rip+0x1de7d]        # 421038 <strlen@GLIBC_2.2.5>
  4031bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031c0 <__stack_chk_fail@plt>:
  4031c0:	endbr64 
  4031c4:	bnd jmp QWORD PTR [rip+0x1de75]        # 421040 <__stack_chk_fail@GLIBC_2.4>
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031d0 <rewind@plt>:
  4031d0:	endbr64 
  4031d4:	bnd jmp QWORD PTR [rip+0x1de6d]        # 421048 <rewind@GLIBC_2.2.5>
  4031db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031e0 <__assert_fail@plt>:
  4031e0:	endbr64 
  4031e4:	bnd jmp QWORD PTR [rip+0x1de65]        # 421050 <__assert_fail@GLIBC_2.2.5>
  4031eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031f0 <memset@plt>:
  4031f0:	endbr64 
  4031f4:	bnd jmp QWORD PTR [rip+0x1de5d]        # 421058 <memset@GLIBC_2.2.5>
  4031fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403200 <memchr@plt>:
  403200:	endbr64 
  403204:	bnd jmp QWORD PTR [rip+0x1de55]        # 421060 <memchr@GLIBC_2.2.5>
  40320b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403210 <memcmp@plt>:
  403210:	endbr64 
  403214:	bnd jmp QWORD PTR [rip+0x1de4d]        # 421068 <memcmp@GLIBC_2.2.5>
  40321b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403220 <ftell@plt>:
  403220:	endbr64 
  403224:	bnd jmp QWORD PTR [rip+0x1de45]        # 421070 <ftell@GLIBC_2.2.5>
  40322b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403230 <memcpy@plt>:
  403230:	endbr64 
  403234:	bnd jmp QWORD PTR [rip+0x1de3d]        # 421078 <memcpy@GLIBC_2.14>
  40323b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403240 <malloc@plt>:
  403240:	endbr64 
  403244:	bnd jmp QWORD PTR [rip+0x1de35]        # 421080 <malloc@GLIBC_2.2.5>
  40324b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403250 <fseek@plt>:
  403250:	endbr64 
  403254:	bnd jmp QWORD PTR [rip+0x1de2d]        # 421088 <fseek@GLIBC_2.2.5>
  40325b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403260 <realloc@plt>:
  403260:	endbr64 
  403264:	bnd jmp QWORD PTR [rip+0x1de25]        # 421090 <realloc@GLIBC_2.2.5>
  40326b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403270 <fopen@plt>:
  403270:	endbr64 
  403274:	bnd jmp QWORD PTR [rip+0x1de1d]        # 421098 <fopen@GLIBC_2.2.5>
  40327b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403280 <exit@plt>:
  403280:	endbr64 
  403284:	bnd jmp QWORD PTR [rip+0x1de15]        # 4210a0 <exit@GLIBC_2.2.5>
  40328b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403290 <__fprintf_chk@plt>:
  403290:	endbr64 
  403294:	bnd jmp QWORD PTR [rip+0x1de0d]        # 4210a8 <__fprintf_chk@GLIBC_2.3.4>
  40329b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004032a0 <posix_memalign@plt>:
  4032a0:	endbr64 
  4032a4:	bnd jmp QWORD PTR [rip+0x1de05]        # 4210b0 <posix_memalign@GLIBC_2.2.5>
  4032ab:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000004032b0 <main@@Base>:
  4032b0:	endbr64 
  4032b4:	push   r12
  4032b6:	mov    r12,QWORD PTR [rip+0x1dd3b]        # 420ff8 <stderr@GLIBC_2.2.5>
  4032bd:	lea    rdx,[rip+0x16f7e]        # 41a242 <_IO_stdin_used@@Base+0x242>
  4032c4:	push   rbp
  4032c5:	xor    eax,eax
  4032c7:	mov    rbp,rsi
  4032ca:	push   rbx
  4032cb:	mov    ebx,edi
  4032cd:	mov    esi,0x1
  4032d2:	mov    rdi,QWORD PTR [r12]
  4032d6:	call   403290 <__fprintf_chk@plt>
  4032db:	lea    eax,[rbx-0x1]
  4032de:	cmp    eax,0x1
  4032e1:	ja     403301 <main@@Base+0x51>
  4032e3:	cmp    ebx,0x2
  4032e6:	jne    4032f6 <main@@Base+0x46>
  4032e8:	mov    rdx,QWORD PTR [rbp+0x8]
  4032ec:	mov    rax,0x4217e0
  4032f3:	mov    QWORD PTR [rax],rdx
  4032f6:	pop    rbx
  4032f7:	pop    rbp
  4032f8:	xor    eax,eax
  4032fa:	pop    r12
  4032fc:	jmp    410cf0 <test_parse@@Base>
  403301:	mov    rdi,QWORD PTR [r12]
  403305:	lea    rdx,[rip+0x17114]        # 41a420 <_IO_stdin_used@@Base+0x420>
  40330c:	mov    esi,0x1
  403311:	xor    eax,eax
  403313:	call   403290 <__fprintf_chk@plt>
  403318:	mov    edi,0x1
  40331d:	call   403280 <exit@plt>
  403322:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40332c:	nop    DWORD PTR [rax+0x0]

0000000000403330 <_start@@Base>:
  403330:	endbr64 
  403334:	xor    ebp,ebp
  403336:	mov    r9,rdx
  403339:	pop    rsi
  40333a:	mov    rdx,rsp
  40333d:	and    rsp,0xfffffffffffffff0
  403341:	push   rax
  403342:	push   rsp
  403343:	mov    r8,0x419910
  40334a:	mov    rcx,0x4198a0
  403351:	mov    rdi,0x4032b0
  403358:	call   QWORD PTR [rip+0x1dc8a]        # 420fe8 <__libc_start_main@GLIBC_2.2.5>
  40335e:	hlt    
  40335f:	nop
  403360:	endbr64 
  403364:	ret    
  403365:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40336f:	nop
  403370:	mov    eax,0x421870
  403375:	cmp    rax,0x421870
  40337b:	je     403390 <_start@@Base+0x60>
  40337d:	mov    eax,0x0
  403382:	test   rax,rax
  403385:	je     403390 <_start@@Base+0x60>
  403387:	mov    edi,0x421870
  40338c:	jmp    rax
  40338e:	xchg   ax,ax
  403390:	ret    
  403391:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40339c:	nop    DWORD PTR [rax+0x0]
  4033a0:	mov    esi,0x421870
  4033a5:	sub    rsi,0x421870
  4033ac:	sar    rsi,0x3
  4033b0:	mov    rax,rsi
  4033b3:	shr    rax,0x3f
  4033b7:	add    rsi,rax
  4033ba:	sar    rsi,1
  4033bd:	je     4033d0 <_start@@Base+0xa0>
  4033bf:	mov    eax,0x0
  4033c4:	test   rax,rax
  4033c7:	je     4033d0 <_start@@Base+0xa0>
  4033c9:	mov    edi,0x421870
  4033ce:	jmp    rax
  4033d0:	ret    
  4033d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033dc:	nop    DWORD PTR [rax+0x0]
  4033e0:	endbr64 
  4033e4:	cmp    BYTE PTR [rip+0x1e485],0x0        # 421870 <__bss_start@@Base>
  4033eb:	jne    403400 <_start@@Base+0xd0>
  4033ed:	push   rbp
  4033ee:	mov    rbp,rsp
  4033f1:	call   403370 <_start@@Base+0x40>
  4033f6:	mov    BYTE PTR [rip+0x1e473],0x1        # 421870 <__bss_start@@Base>
  4033fd:	pop    rbp
  4033fe:	ret    
  4033ff:	nop
  403400:	ret    
  403401:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40340c:	nop    DWORD PTR [rax+0x0]
  403410:	endbr64 
  403414:	jmp    4033a0 <_start@@Base+0x70>
  403416:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403420:	sub    rsi,rdi
  403423:	cmp    rsi,0x8
  403427:	ja     403440 <_start@@Base+0x110>
  403429:	lea    rdx,[rip+0x16be0]        # 41a010 <_IO_stdin_used@@Base+0x10>
  403430:	movsxd rax,DWORD PTR [rdx+rsi*4]
  403434:	add    rax,rdx
  403437:	notrack jmp rax
  40343a:	nop    WORD PTR [rax+rax*1+0x0]
  403440:	movsx  rax,BYTE PTR [rdi+0x7]
  403445:	movsx  rdx,BYTE PTR [rdi+0x6]
  40344a:	mov    rcx,rdx
  40344d:	shl    rcx,0x8
  403451:	or     rcx,rax
  403454:	movsx  rdx,BYTE PTR [rdi+0x5]
  403459:	mov    rax,rdx
  40345c:	shl    rax,0x10
  403460:	or     rcx,rax
  403463:	movsx  rdx,BYTE PTR [rdi+0x4]
  403468:	mov    rax,rdx
  40346b:	shl    rax,0x18
  40346f:	or     rax,rcx
  403472:	movsx  rdx,BYTE PTR [rdi+0x3]
  403477:	shl    rdx,0x20
  40347b:	or     rax,rdx
  40347e:	movsx  rdx,BYTE PTR [rdi+0x2]
  403483:	mov    rcx,rdx
  403486:	shl    rcx,0x28
  40348a:	or     rcx,rax
  40348d:	movsx  rdx,BYTE PTR [rdi+0x1]
  403492:	mov    rax,rdx
  403495:	shl    rax,0x30
  403499:	or     rcx,rax
  40349c:	movsx  rdx,BYTE PTR [rdi]
  4034a0:	mov    rax,rdx
  4034a3:	shl    rax,0x38
  4034a7:	or     rax,rcx
  4034aa:	ret    
  4034ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4034b0:	xor    eax,eax
  4034b2:	jmp    403445 <_start@@Base+0x115>
  4034b4:	nop    DWORD PTR [rax+0x0]
  4034b8:	xor    ecx,ecx
  4034ba:	jmp    40349c <_start@@Base+0x16c>
  4034bc:	nop    DWORD PTR [rax+0x0]
  4034c0:	xor    ecx,ecx
  4034c2:	jmp    40348d <_start@@Base+0x15d>
  4034c4:	nop    DWORD PTR [rax+0x0]
  4034c8:	xor    eax,eax
  4034ca:	jmp    40347e <_start@@Base+0x14e>
  4034cc:	nop    DWORD PTR [rax+0x0]
  4034d0:	xor    eax,eax
  4034d2:	jmp    403472 <_start@@Base+0x142>
  4034d4:	nop    DWORD PTR [rax+0x0]
  4034d8:	xor    ecx,ecx
  4034da:	jmp    403463 <_start@@Base+0x133>
  4034dc:	nop    DWORD PTR [rax+0x0]
  4034e0:	xor    ecx,ecx
  4034e2:	jmp    403454 <_start@@Base+0x124>
  4034e7:	nop    WORD PTR [rax+rax*1+0x0]
  4034f0:	xor    eax,eax
  4034f2:	ret    
  4034f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4034fe:	xchg   ax,ax
  403500:	endbr64 
  403504:	xor    eax,eax
  403506:	cmp    dil,0x4
  40350a:	setbe  al
  40350d:	ret    
  40350e:	xchg   ax,ax
  403510:	endbr64 
  403514:	cmp    dil,0xb
  403518:	ja     403538 <_start@@Base+0x208>
  40351a:	mov    eax,0x1
  40351f:	cmp    dil,0x8
  403523:	jae    403548 <_start@@Base+0x218>
  403525:	test   dil,dil
  403528:	je     403548 <_start@@Base+0x218>
  40352a:	xor    eax,eax
  40352c:	cmp    dil,0x2
  403530:	sete   al
  403533:	ret    
  403534:	nop    DWORD PTR [rax+0x0]
  403538:	xor    eax,eax
  40353a:	cmp    dil,0xff
  40353e:	sete   al
  403541:	ret    
  403542:	nop    WORD PTR [rax+rax*1+0x0]
  403548:	ret    
  403549:	nop    DWORD PTR [rax+0x0]
  403550:	mov    rax,rdx
  403553:	sub    rax,rsi
  403556:	cmp    rax,0x1
  40355a:	jle    403563 <_start@@Base+0x233>
  40355c:	cmp    BYTE PTR [rsi],0x20
  40355f:	jg     403570 <_start@@Base+0x240>
  403561:	je     403578 <_start@@Base+0x248>
  403563:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  403568:	nop    DWORD PTR [rax+rax*1+0x0]
  403570:	mov    rax,rsi
  403573:	ret    
  403574:	nop    DWORD PTR [rax+0x0]
  403578:	cmp    BYTE PTR [rsi+0x1],0x20
  40357c:	jle    403563 <_start@@Base+0x233>
  40357e:	lea    rax,[rsi+0x1]
  403582:	ret    
  403583:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40358e:	xchg   ax,ax
  403590:	endbr64 
  403594:	push   r12
  403596:	mov    rax,rdx
  403599:	sub    rax,rsi
  40359c:	push   rbp
  40359d:	mov    r11,rdi
  4035a0:	mov    r10,rdx
  4035a3:	push   rbx
  4035a4:	mov    rbp,rcx
  4035a7:	mov    rbx,rsi
  4035aa:	mov    r12,r8
  4035ad:	cmp    rax,0x7
  4035b1:	ja     4036d0 <_start@@Base+0x3a0>
  4035b7:	mov    rsi,rdx
  4035ba:	mov    rdi,rbx
  4035bd:	call   403420 <_start@@Base+0xf0>
  4035c2:	movabs rdx,0x4e4f4e44ffffffff
  4035cc:	cmp    rax,rdx
  4035cf:	ja     403668 <_start@@Base+0x338>
  4035d5:	mov    rdx,rax
  4035d8:	movabs rcx,0x426f6f6b46616dff
  4035e2:	and    rdx,0xffffffffff000000
  4035e9:	cmp    rax,rcx
  4035ec:	ja     403610 <_start@@Base+0x2e0>
  4035ee:	movabs rax,0x42656c6c65000000
  4035f8:	cmp    rdx,rax
  4035fb:	je     4037b0 <_start@@Base+0x480>
  403601:	mov    rax,rbx
  403604:	pop    rbx
  403605:	pop    rbp
  403606:	pop    r12
  403608:	ret    
  403609:	nop    DWORD PTR [rax+0x0]
  403610:	movabs rcx,0x4d754c616e000000
  40361a:	cmp    rdx,rcx
  40361d:	je     4037f0 <_start@@Base+0x4c0>
  403623:	xor    al,al
  403625:	movabs rdx,0x426f6f6b46616e00
  40362f:	cmp    rax,rdx
  403632:	jne    403601 <_start@@Base+0x2d1>
  403634:	mov    r8,r9
  403637:	mov    ecx,0x7
  40363c:	mov    rdx,r10
  40363f:	mov    rsi,rbx
  403642:	mov    rdi,r11
  403645:	call   417430 <flatcc_json_parser_match_constant@@Base>
  40364a:	cmp    rbx,rax
  40364d:	je     403601 <_start@@Base+0x2d1>
  40364f:	mov    QWORD PTR [r12],0xa
  403657:	mov    rbx,rax
  40365a:	mov    DWORD PTR [rbp+0x0],0x0
  403661:	jmp    403601 <_start@@Base+0x2d1>
  403663:	nop    DWORD PTR [rax+rax*1+0x0]
  403668:	movabs rdx,0x4f74686571ffffff
  403672:	cmp    rax,rdx
  403675:	ja     4036e0 <_start@@Base+0x3b0>
  403677:	movabs rdx,0xffffffff00000000
  403681:	and    rax,rdx
  403684:	movabs rdx,0x4e4f4e4500000000
  40368e:	cmp    rax,rdx
  403691:	jne    403601 <_start@@Base+0x2d1>
  403697:	mov    r8,r9
  40369a:	mov    ecx,0x4
  40369f:	mov    rdx,r10
  4036a2:	mov    rsi,rbx
  4036a5:	mov    rdi,r11
  4036a8:	call   417430 <flatcc_json_parser_match_constant@@Base>
  4036ad:	cmp    rbx,rax
  4036b0:	je     403601 <_start@@Base+0x2d1>
  4036b6:	mov    QWORD PTR [r12],0x0
  4036be:	mov    rbx,rax
  4036c1:	mov    DWORD PTR [rbp+0x0],0x0
  4036c8:	jmp    403601 <_start@@Base+0x2d1>
  4036cd:	nop    DWORD PTR [rax]
  4036d0:	movbe  rax,QWORD PTR [rsi]
  4036d5:	jmp    4035c2 <_start@@Base+0x292>
  4036da:	nop    WORD PTR [rax+rax*1+0x0]
  4036e0:	movabs rdx,0x526170756e7a656b
  4036ea:	cmp    rax,rdx
  4036ed:	jbe    403758 <_start@@Base+0x428>
  4036ef:	mov    rcx,rax
  4036f2:	xor    cx,cx
  4036f5:	movabs rdx,0x556e757365640000
  4036ff:	cmp    rcx,rdx
  403702:	je     403830 <_start@@Base+0x500>
  403708:	movabs rdx,0x526170756e7a656c
  403712:	cmp    rax,rdx
  403715:	jne    403601 <_start@@Base+0x2d1>
  40371b:	mov    r8,r9
  40371e:	mov    ecx,0x8
  403723:	mov    rdx,r10
  403726:	mov    rsi,rbx
  403729:	mov    rdi,r11
  40372c:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403731:	cmp    rbx,rax
  403734:	je     403601 <_start@@Base+0x2d1>
  40373a:	mov    QWORD PTR [r12],0x8
  403742:	mov    rbx,rax
  403745:	mov    DWORD PTR [rbp+0x0],0x0
  40374c:	jmp    403601 <_start@@Base+0x2d1>
  403751:	nop    DWORD PTR [rax+0x0]
  403758:	and    rax,0xffffffffff000000
  40375e:	movabs rdx,0x4f74686572000000
  403768:	cmp    rax,rdx
  40376b:	jne    403601 <_start@@Base+0x2d1>
  403771:	mov    r8,r9
  403774:	mov    ecx,0x5
  403779:	mov    rdx,r10
  40377c:	mov    rsi,rbx
  40377f:	mov    rdi,r11
  403782:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403787:	cmp    rbx,rax
  40378a:	je     403601 <_start@@Base+0x2d1>
  403790:	mov    QWORD PTR [r12],0xb
  403798:	mov    rbx,rax
  40379b:	mov    DWORD PTR [rbp+0x0],0x0
  4037a2:	jmp    403601 <_start@@Base+0x2d1>
  4037a7:	nop    WORD PTR [rax+rax*1+0x0]
  4037b0:	mov    r8,r9
  4037b3:	mov    ecx,0x5
  4037b8:	mov    rdx,r10
  4037bb:	mov    rsi,rbx
  4037be:	mov    rdi,r11
  4037c1:	call   417430 <flatcc_json_parser_match_constant@@Base>
  4037c6:	cmp    rbx,rax
  4037c9:	je     403601 <_start@@Base+0x2d1>
  4037cf:	mov    QWORD PTR [r12],0x9
  4037d7:	mov    rbx,rax
  4037da:	mov    DWORD PTR [rbp+0x0],0x0
  4037e1:	jmp    403601 <_start@@Base+0x2d1>
  4037e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4037f0:	mov    r8,r9
  4037f3:	mov    ecx,0x5
  4037f8:	mov    rdx,r10
  4037fb:	mov    rsi,rbx
  4037fe:	mov    rdi,r11
  403801:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403806:	cmp    rbx,rax
  403809:	je     403601 <_start@@Base+0x2d1>
  40380f:	mov    QWORD PTR [r12],0x2
  403817:	mov    rbx,rax
  40381a:	mov    DWORD PTR [rbp+0x0],0x0
  403821:	jmp    403601 <_start@@Base+0x2d1>
  403826:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403830:	mov    r8,r9
  403833:	mov    ecx,0x6
  403838:	mov    rdx,r10
  40383b:	mov    rsi,rbx
  40383e:	mov    rdi,r11
  403841:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403846:	cmp    rbx,rax
  403849:	je     403601 <_start@@Base+0x2d1>
  40384f:	mov    QWORD PTR [r12],0xff
  403857:	mov    rbx,rax
  40385a:	mov    DWORD PTR [rbp+0x0],0x0
  403861:	jmp    403601 <_start@@Base+0x2d1>
  403866:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403870:	endbr64 
  403874:	push   r13
  403876:	mov    rax,rdx
  403879:	sub    rax,rsi
  40387c:	push   r12
  40387e:	mov    r11,rdi
  403881:	mov    r10,rdx
  403884:	push   rbp
  403885:	mov    r12,r8
  403888:	mov    rbp,rcx
  40388b:	push   rbx
  40388c:	mov    rbx,rsi
  40388f:	sub    rsp,0x8
  403893:	cmp    rax,0x7
  403897:	ja     4039e0 <_start@@Base+0x6b0>
  40389d:	mov    rsi,rdx
  4038a0:	mov    rdi,rbx
  4038a3:	call   403420 <_start@@Base+0xf0>
  4038a8:	movabs rdx,0x4d6f6e73746571ff
  4038b2:	cmp    rax,rdx
  4038b5:	ja     4038e8 <_start@@Base+0x5b8>
  4038b7:	movabs rdx,0xffffff0000000000
  4038c1:	and    rax,rdx
  4038c4:	movabs rdx,0x416c740000000000
  4038ce:	cmp    rax,rdx
  4038d1:	je     4039f0 <_start@@Base+0x6c0>
  4038d7:	mov    rax,rbx
  4038da:	add    rsp,0x8
  4038de:	pop    rbx
  4038df:	pop    rbp
  4038e0:	pop    r12
  4038e2:	pop    r13
  4038e4:	ret    
  4038e5:	nop    DWORD PTR [rax]
  4038e8:	movabs rdx,0x4d6f6e7374657232
  4038f2:	cmp    rax,rdx
  4038f5:	je     403aa0 <_start@@Base+0x770>
  4038fb:	mov    rcx,rax
  4038fe:	xor    cl,cl
  403900:	movabs rdx,0x4d6f6e7374657200
  40390a:	cmp    rcx,rdx
  40390d:	je     403a68 <_start@@Base+0x738>
  403913:	endbr64 
  403917:	movabs rdx,0xffffffff00000000
  403921:	and    rdx,rax
  403924:	movabs rcx,0x4e4f4e4500000000
  40392e:	cmp    rdx,rcx
  403931:	je     403a30 <_start@@Base+0x700>
  403937:	endbr64 
  40393b:	movabs rdx,0x5465737453696d70
  403945:	cmp    rax,rdx
  403948:	jne    4038d7 <_start@@Base+0x5a7>
  40394a:	lea    rdi,[rbx+0x8]
  40394e:	mov    rax,r10
  403951:	sub    rax,rdi
  403954:	cmp    rax,0x7
  403958:	ja     403ae8 <_start@@Base+0x7b8>
  40395e:	mov    rsi,r10
  403961:	call   403420 <_start@@Base+0xf0>
  403966:	movabs rdx,0x6c655461626c6557
  403970:	cmp    rax,rdx
  403973:	jne    4038d7 <_start@@Base+0x5a7>
  403979:	lea    r13,[rbx+0x10]
  40397d:	mov    rax,r10
  403980:	sub    rax,r13
  403983:	cmp    rax,0x7
  403987:	ja     403ad8 <_start@@Base+0x7a8>
  40398d:	mov    rsi,r10
  403990:	mov    rdi,r13
  403993:	call   403420 <_start@@Base+0xf0>
  403998:	xor    al,al
  40399a:	movabs rdx,0x697468456e756d00
  4039a4:	cmp    rax,rdx
  4039a7:	jne    4038d7 <_start@@Base+0x5a7>
  4039ad:	mov    r8,r9
  4039b0:	mov    ecx,0x7
  4039b5:	mov    rdx,r10
  4039b8:	mov    rsi,r13
  4039bb:	mov    rdi,r11
  4039be:	call   417430 <flatcc_json_parser_match_constant@@Base>
  4039c3:	cmp    r13,rax
  4039c6:	je     4038d7 <_start@@Base+0x5a7>
  4039cc:	mov    QWORD PTR [r12],0x2
  4039d4:	mov    DWORD PTR [rbp+0x0],0x0
  4039db:	jmp    4038da <_start@@Base+0x5aa>
  4039e0:	movbe  rax,QWORD PTR [rsi]
  4039e5:	jmp    4038a8 <_start@@Base+0x578>
  4039ea:	nop    WORD PTR [rax+rax*1+0x0]
  4039f0:	mov    r8,r9
  4039f3:	mov    ecx,0x3
  4039f8:	mov    rdx,r10
  4039fb:	mov    rsi,rbx
  4039fe:	mov    rdi,r11
  403a01:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403a06:	cmp    rbx,rax
  403a09:	je     4038da <_start@@Base+0x5aa>
  403a0f:	mov    QWORD PTR [r12],0x4
  403a17:	mov    DWORD PTR [rbp+0x0],0x0
  403a1e:	add    rsp,0x8
  403a22:	pop    rbx
  403a23:	pop    rbp
  403a24:	pop    r12
  403a26:	pop    r13
  403a28:	ret    
  403a29:	nop    DWORD PTR [rax+0x0]
  403a30:	mov    r8,r9
  403a33:	mov    ecx,0x4
  403a38:	mov    rdx,r10
  403a3b:	mov    rsi,rbx
  403a3e:	mov    rdi,r11
  403a41:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403a46:	cmp    rbx,rax
  403a49:	je     4038da <_start@@Base+0x5aa>
  403a4f:	mov    QWORD PTR [r12],0x0
  403a57:	mov    DWORD PTR [rbp+0x0],0x0
  403a5e:	jmp    4038da <_start@@Base+0x5aa>
  403a63:	nop    DWORD PTR [rax+rax*1+0x0]
  403a68:	mov    r8,r9
  403a6b:	mov    ecx,0x7
  403a70:	mov    rdx,r10
  403a73:	mov    rsi,rbx
  403a76:	mov    rdi,r11
  403a79:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403a7e:	cmp    rbx,rax
  403a81:	je     4038d7 <_start@@Base+0x5a7>
  403a87:	mov    QWORD PTR [r12],0x1
  403a8f:	mov    DWORD PTR [rbp+0x0],0x0
  403a96:	jmp    4038da <_start@@Base+0x5aa>
  403a9b:	nop    DWORD PTR [rax+rax*1+0x0]
  403aa0:	mov    r8,r9
  403aa3:	mov    ecx,0x8
  403aa8:	mov    rdx,r10
  403aab:	mov    rsi,rbx
  403aae:	mov    rdi,r11
  403ab1:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403ab6:	cmp    rbx,rax
  403ab9:	je     4038d7 <_start@@Base+0x5a7>
  403abf:	mov    QWORD PTR [r12],0x3
  403ac7:	mov    DWORD PTR [rbp+0x0],0x0
  403ace:	jmp    4038da <_start@@Base+0x5aa>
  403ad3:	nop    DWORD PTR [rax+rax*1+0x0]
  403ad8:	movbe  rax,QWORD PTR [rbx+0x10]
  403ade:	jmp    403998 <_start@@Base+0x668>
  403ae3:	nop    DWORD PTR [rax+rax*1+0x0]
  403ae8:	movbe  rax,QWORD PTR [rbx+0x8]
  403aee:	jmp    403966 <_start@@Base+0x636>
  403af3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403afe:	xchg   ax,ax
  403b00:	push   r12
  403b02:	mov    rax,rdx
  403b05:	sub    rax,rsi
  403b08:	push   rbp
  403b09:	mov    r11,rdi
  403b0c:	mov    r10,rdx
  403b0f:	push   rbx
  403b10:	mov    rbp,rcx
  403b13:	mov    rbx,rsi
  403b16:	mov    r12,r8
  403b19:	cmp    rax,0x7
  403b1d:	ja     403bd8 <_start@@Base+0x8a8>
  403b23:	mov    rsi,rdx
  403b26:	mov    rdi,rbx
  403b29:	call   403420 <_start@@Base+0xf0>
  403b2e:	movabs rdx,0x68657831ffffffff
  403b38:	cmp    rax,rdx
  403b3b:	ja     403b68 <_start@@Base+0x838>
  403b3d:	movabs rdx,0xffffffff00000000
  403b47:	and    rax,rdx
  403b4a:	movabs rdx,0x6865783100000000
  403b54:	cmp    rax,rdx
  403b57:	je     403be8 <_start@@Base+0x8b8>
  403b5d:	mov    rax,rbx
  403b60:	pop    rbx
  403b61:	pop    rbp
  403b62:	pop    r12
  403b64:	ret    
  403b65:	nop    DWORD PTR [rax]
  403b68:	mov    rcx,rax
  403b6b:	xor    cx,cx
  403b6e:	movabs rdx,0x6865786e65670000
  403b78:	cmp    rcx,rdx
  403b7b:	je     403c28 <_start@@Base+0x8f8>
  403b81:	movabs rdx,0xffffffff00000000
  403b8b:	and    rax,rdx
  403b8e:	movabs rdx,0x6865783200000000
  403b98:	cmp    rax,rdx
  403b9b:	jne    403b5d <_start@@Base+0x82d>
  403b9d:	mov    r8,r9
  403ba0:	mov    ecx,0x4
  403ba5:	mov    rdx,r10
  403ba8:	mov    rsi,rbx
  403bab:	mov    rdi,r11
  403bae:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403bb3:	cmp    rbx,rax
  403bb6:	je     403b5d <_start@@Base+0x82d>
  403bb8:	mov    rbx,rax
  403bbb:	mov    rax,rbx
  403bbe:	pop    rbx
  403bbf:	mov    QWORD PTR [r12],0x7eafbeaf
  403bc7:	mov    DWORD PTR [rbp+0x0],0x0
  403bce:	pop    rbp
  403bcf:	pop    r12
  403bd1:	ret    
  403bd2:	nop    WORD PTR [rax+rax*1+0x0]
  403bd8:	movbe  rax,QWORD PTR [rsi]
  403bdd:	jmp    403b2e <_start@@Base+0x7fe>
  403be2:	nop    WORD PTR [rax+rax*1+0x0]
  403be8:	mov    r8,r9
  403beb:	mov    ecx,0x4
  403bf0:	mov    rdx,r10
  403bf3:	mov    rsi,rbx
  403bf6:	mov    rdi,r11
  403bf9:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403bfe:	cmp    rbx,rax
  403c01:	je     403b5d <_start@@Base+0x82d>
  403c07:	mov    rbx,rax
  403c0a:	mov    rax,rbx
  403c0d:	pop    rbx
  403c0e:	mov    QWORD PTR [r12],0x3
  403c16:	mov    DWORD PTR [rbp+0x0],0x0
  403c1d:	pop    rbp
  403c1e:	pop    r12
  403c20:	ret    
  403c21:	nop    DWORD PTR [rax+0x0]
  403c28:	mov    r8,r9
  403c2b:	mov    ecx,0x6
  403c30:	mov    rdx,r10
  403c33:	mov    rsi,rbx
  403c36:	mov    rdi,r11
  403c39:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403c3e:	cmp    rbx,rax
  403c41:	je     403b5d <_start@@Base+0x82d>
  403c47:	mov    QWORD PTR [r12],0xfffffffffffffffe
  403c4f:	mov    rbx,rax
  403c52:	mov    DWORD PTR [rbp+0x0],0x1
  403c59:	jmp    403b5d <_start@@Base+0x82d>
  403c5e:	xchg   ax,ax
  403c60:	push   r12
  403c62:	mov    rax,rdx
  403c65:	sub    rax,rsi
  403c68:	push   rbp
  403c69:	mov    r10,rdi
  403c6c:	mov    r12,rsi
  403c6f:	push   rbx
  403c70:	mov    r11,rdx
  403c73:	mov    rbx,rcx
  403c76:	mov    rbp,r8
  403c79:	cmp    rax,0x7
  403c7d:	ja     403d28 <_start@@Base+0x9f8>
  403c83:	mov    rsi,rdx
  403c86:	mov    rdi,r12
  403c89:	call   403420 <_start@@Base+0xf0>
  403c8e:	movabs rdx,0x696e7431ffffffff
  403c98:	cmp    rax,rdx
  403c9b:	ja     403cc8 <_start@@Base+0x998>
  403c9d:	movabs rdx,0xffffffff00000000
  403ca7:	and    rax,rdx
  403caa:	movabs rdx,0x696e743100000000
  403cb4:	cmp    rax,rdx
  403cb7:	je     403da0 <_start@@Base+0xa70>
  403cbd:	pop    rbx
  403cbe:	pop    rbp
  403cbf:	mov    rax,r12
  403cc2:	pop    r12
  403cc4:	ret    
  403cc5:	nop    DWORD PTR [rax]
  403cc8:	movabs rdx,0x696e746e6566ffff
  403cd2:	cmp    rax,rdx
  403cd5:	ja     403d38 <_start@@Base+0xa08>
  403cd7:	movabs rdx,0xffffffff00000000
  403ce1:	and    rax,rdx
  403ce4:	movabs rdx,0x696e743200000000
  403cee:	cmp    rax,rdx
  403cf1:	jne    403cbd <_start@@Base+0x98d>
  403cf3:	mov    r8,r9
  403cf6:	mov    ecx,0x4
  403cfb:	mov    rdx,r11
  403cfe:	mov    rsi,r12
  403d01:	mov    rdi,r10
  403d04:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403d09:	cmp    r12,rax
  403d0c:	je     403cbd <_start@@Base+0x98d>
  403d0e:	mov    QWORD PTR [rbp+0x0],0x2a
  403d16:	mov    r12,rax
  403d19:	mov    DWORD PTR [rbx],0x0
  403d1f:	jmp    403cbd <_start@@Base+0x98d>
  403d21:	nop    DWORD PTR [rax+0x0]
  403d28:	movbe  rax,QWORD PTR [rsi]
  403d2d:	jmp    403c8e <_start@@Base+0x95e>
  403d32:	nop    WORD PTR [rax+rax*1+0x0]
  403d38:	mov    rcx,rax
  403d3b:	xor    cl,cl
  403d3d:	movabs rdx,0x696e746e65673200
  403d47:	cmp    rcx,rdx
  403d4a:	je     403de0 <_start@@Base+0xab0>
  403d50:	xor    ax,ax
  403d53:	movabs rdx,0x696e746e65670000
  403d5d:	cmp    rax,rdx
  403d60:	jne    403cbd <_start@@Base+0x98d>
  403d66:	mov    r8,r9
  403d69:	mov    ecx,0x6
  403d6e:	mov    rdx,r11
  403d71:	mov    rsi,r12
  403d74:	mov    rdi,r10
  403d77:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403d7c:	cmp    r12,rax
  403d7f:	je     403cbd <_start@@Base+0x98d>
  403d85:	mov    QWORD PTR [rbp+0x0],0xfffffffffffffffe
  403d8d:	mov    r12,rax
  403d90:	mov    DWORD PTR [rbx],0x1
  403d96:	jmp    403cbd <_start@@Base+0x98d>
  403d9b:	nop    DWORD PTR [rax+rax*1+0x0]
  403da0:	mov    r8,r9
  403da3:	mov    ecx,0x4
  403da8:	mov    rdx,r11
  403dab:	mov    rsi,r12
  403dae:	mov    rdi,r10
  403db1:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403db6:	cmp    r12,rax
  403db9:	je     403cbd <_start@@Base+0x98d>
  403dbf:	mov    QWORD PTR [rbp+0x0],0x2
  403dc7:	mov    DWORD PTR [rbx],0x0
  403dcd:	pop    rbx
  403dce:	mov    r12,rax
  403dd1:	pop    rbp
  403dd2:	mov    rax,r12
  403dd5:	pop    r12
  403dd7:	ret    
  403dd8:	nop    DWORD PTR [rax+rax*1+0x0]
  403de0:	mov    r8,r9
  403de3:	mov    ecx,0x7
  403de8:	mov    rdx,r11
  403deb:	mov    rsi,r12
  403dee:	mov    rdi,r10
  403df1:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403df6:	cmp    r12,rax
  403df9:	je     403cbd <_start@@Base+0x98d>
  403dff:	mov    QWORD PTR [rbp+0x0],0xffffffffffffffff
  403e07:	mov    r12,rax
  403e0a:	mov    DWORD PTR [rbx],0x1
  403e10:	jmp    403cbd <_start@@Base+0x98d>
  403e15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403e20:	push   r12
  403e22:	mov    rax,rdx
  403e25:	sub    rax,rsi
  403e28:	push   rbp
  403e29:	mov    r11,rdi
  403e2c:	mov    r10,rdx
  403e2f:	push   rbx
  403e30:	mov    rbp,rcx
  403e33:	mov    rbx,rsi
  403e36:	mov    r12,r8
  403e39:	cmp    rax,0x7
  403e3d:	ja     403ee0 <_start@@Base+0xbb0>
  403e43:	mov    rsi,rdx
  403e46:	mov    rdi,rbx
  403e49:	call   403420 <_start@@Base+0xf0>
  403e4e:	movabs rcx,0xffffffff00000000
  403e58:	movabs rdx,0x6e656731ffffffff
  403e62:	and    rcx,rax
  403e65:	cmp    rax,rdx
  403e68:	ja     403e88 <_start@@Base+0xb58>
  403e6a:	movabs rax,0x6e65673100000000
  403e74:	cmp    rcx,rax
  403e77:	je     403ef0 <_start@@Base+0xbc0>
  403e79:	mov    rax,rbx
  403e7c:	pop    rbx
  403e7d:	pop    rbp
  403e7e:	pop    r12
  403e80:	ret    
  403e81:	nop    DWORD PTR [rax+0x0]
  403e88:	movabs rax,0x6e65673300000000
  403e92:	cmp    rcx,rax
  403e95:	je     403f30 <_start@@Base+0xc00>
  403e9b:	movabs rax,0x6e65673200000000
  403ea5:	cmp    rcx,rax
  403ea8:	jne    403e79 <_start@@Base+0xb49>
  403eaa:	mov    r8,r9
  403ead:	mov    ecx,0x4
  403eb2:	mov    rdx,r10
  403eb5:	mov    rsi,rbx
  403eb8:	mov    rdi,r11
  403ebb:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403ec0:	cmp    rbx,rax
  403ec3:	je     403e79 <_start@@Base+0xb49>
  403ec5:	mov    rbx,rax
  403ec8:	mov    rax,rbx
  403ecb:	pop    rbx
  403ecc:	mov    QWORD PTR [r12],0xfffffffffffffff5
  403ed4:	mov    DWORD PTR [rbp+0x0],0x1
  403edb:	pop    rbp
  403edc:	pop    r12
  403ede:	ret    
  403edf:	nop
  403ee0:	movbe  rax,QWORD PTR [rsi]
  403ee5:	jmp    403e4e <_start@@Base+0xb1e>
  403eea:	nop    WORD PTR [rax+rax*1+0x0]
  403ef0:	mov    r8,r9
  403ef3:	mov    ecx,0x4
  403ef8:	mov    rdx,r10
  403efb:	mov    rsi,rbx
  403efe:	mov    rdi,r11
  403f01:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403f06:	cmp    rbx,rax
  403f09:	je     403e79 <_start@@Base+0xb49>
  403f0f:	mov    rbx,rax
  403f12:	mov    rax,rbx
  403f15:	pop    rbx
  403f16:	mov    QWORD PTR [r12],0xfffffffffffffff4
  403f1e:	mov    DWORD PTR [rbp+0x0],0x1
  403f25:	pop    rbp
  403f26:	pop    r12
  403f28:	ret    
  403f29:	nop    DWORD PTR [rax+0x0]
  403f30:	mov    r8,r9
  403f33:	mov    ecx,0x4
  403f38:	mov    rdx,r10
  403f3b:	mov    rsi,rbx
  403f3e:	mov    rdi,r11
  403f41:	call   417430 <flatcc_json_parser_match_constant@@Base>
  403f46:	cmp    rbx,rax
  403f49:	je     403e79 <_start@@Base+0xb49>
  403f4f:	mov    QWORD PTR [r12],0xfffffffffffffff6
  403f57:	mov    rbx,rax
  403f5a:	mov    DWORD PTR [rbp+0x0],0x1
  403f61:	jmp    403e79 <_start@@Base+0xb49>
  403f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f70:	endbr64 
  403f74:	push   r12
  403f76:	mov    rax,rdx
  403f79:	sub    rax,rsi
  403f7c:	push   rbp
  403f7d:	mov    r11,rdi
  403f80:	mov    r10,rdx
  403f83:	push   rbx
  403f84:	mov    rbp,rcx
  403f87:	mov    rbx,rsi
  403f8a:	mov    r12,r8
  403f8d:	cmp    rax,0x7
  403f91:	ja     404050 <_start@@Base+0xd20>
  403f97:	mov    rsi,rdx
  403f9a:	mov    rdi,rbx
  403f9d:	call   403420 <_start@@Base+0xf0>
  403fa2:	movabs rdx,0x477265656dffffff
  403fac:	cmp    rax,rdx
  403faf:	ja     403fe0 <_start@@Base+0xcb0>
  403fb1:	movabs rdx,0xffffffff00000000
  403fbb:	and    rax,rdx
  403fbe:	movabs rdx,0x426c756500000000
  403fc8:	cmp    rax,rdx
  403fcb:	je     404060 <_start@@Base+0xd30>
  403fd1:	mov    rax,rbx
  403fd4:	pop    rbx
  403fd5:	pop    rbp
  403fd6:	pop    r12
  403fd8:	ret    
  403fd9:	nop    DWORD PTR [rax+0x0]
  403fe0:	movabs rdx,0xffffff0000000000
  403fea:	and    rdx,rax
  403fed:	movabs rcx,0x5265640000000000
  403ff7:	cmp    rdx,rcx
  403ffa:	je     4040a0 <_start@@Base+0xd70>
  404000:	and    rax,0xffffffffff000000
  404006:	movabs rdx,0x477265656e000000
  404010:	cmp    rax,rdx
  404013:	jne    403fd1 <_start@@Base+0xca1>
  404015:	mov    r8,r9
  404018:	mov    ecx,0x5
  40401d:	mov    rdx,r10
  404020:	mov    rsi,rbx
  404023:	mov    rdi,r11
  404026:	call   417430 <flatcc_json_parser_match_constant@@Base>
  40402b:	cmp    rbx,rax
  40402e:	je     403fd1 <_start@@Base+0xca1>
  404030:	mov    rbx,rax
  404033:	mov    rax,rbx
  404036:	pop    rbx
  404037:	mov    QWORD PTR [r12],0x2
  40403f:	mov    DWORD PTR [rbp+0x0],0x0
  404046:	pop    rbp
  404047:	pop    r12
  404049:	ret    
  40404a:	nop    WORD PTR [rax+rax*1+0x0]
  404050:	movbe  rax,QWORD PTR [rsi]
  404055:	jmp    403fa2 <_start@@Base+0xc72>
  40405a:	nop    WORD PTR [rax+rax*1+0x0]
  404060:	mov    r8,r9
  404063:	mov    ecx,0x4
  404068:	mov    rdx,r10
  40406b:	mov    rsi,rbx
  40406e:	mov    rdi,r11
  404071:	call   417430 <flatcc_json_parser_match_constant@@Base>
  404076:	cmp    rbx,rax
  404079:	je     403fd1 <_start@@Base+0xca1>
  40407f:	mov    rbx,rax
  404082:	mov    rax,rbx
  404085:	pop    rbx
  404086:	mov    QWORD PTR [r12],0x8
  40408e:	mov    DWORD PTR [rbp+0x0],0x0
  404095:	pop    rbp
  404096:	pop    r12
  404098:	ret    
  404099:	nop    DWORD PTR [rax+0x0]
  4040a0:	mov    r8,r9
  4040a3:	mov    ecx,0x3
  4040a8:	mov    rdx,r10
  4040ab:	mov    rsi,rbx
  4040ae:	mov    rdi,r11
  4040b1:	call   417430 <flatcc_json_parser_match_constant@@Base>
  4040b6:	cmp    rbx,rax
  4040b9:	je     403fd1 <_start@@Base+0xca1>
  4040bf:	mov    QWORD PTR [r12],0x1
  4040c7:	mov    rbx,rax
  4040ca:	mov    DWORD PTR [rbp+0x0],0x0
  4040d1:	jmp    403fd1 <_start@@Base+0xca1>
  4040d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4040e0:	push   r13
  4040e2:	push   r12
  4040e4:	push   rbp
  4040e5:	push   rbx
  4040e6:	sub    rsp,0x28
  4040ea:	mov    rax,QWORD PTR fs:0x28
  4040f3:	mov    QWORD PTR [rsp+0x18],rax
  4040f8:	xor    eax,eax
  4040fa:	mov    QWORD PTR [rsp+0x10],0x0
  404103:	mov    DWORD PTR [rsp+0xc],0x0
  40410b:	mov    QWORD PTR [rcx],0x0
  404112:	mov    rax,rsi
  404115:	cmp    rsi,rdx
  404118:	je     40413a <_start@@Base+0xe0a>
  40411a:	mov    r12,rcx
  40411d:	lea    r8,[rsp+0x10]
  404122:	lea    rcx,[rsp+0xc]
  404127:	mov    rbp,rsi
  40412a:	mov    r13,rdi
  40412d:	mov    rbx,rdx
  404130:	call   4184e0 <flatcc_json_parser_integer@@Base>
  404135:	cmp    rbp,rax
  404138:	jne    404158 <_start@@Base+0xe28>
  40413a:	mov    rsi,QWORD PTR [rsp+0x18]
  40413f:	xor    rsi,QWORD PTR fs:0x28
  404148:	jne    4041c0 <_start@@Base+0xe90>
  40414a:	add    rsp,0x28
  40414e:	pop    rbx
  40414f:	pop    rbp
  404150:	pop    r12
  404152:	pop    r13
  404154:	ret    
  404155:	nop    DWORD PTR [rax]
  404158:	mov    ecx,DWORD PTR [rsp+0xc]
  40415c:	mov    rdx,QWORD PTR [rsp+0x10]
  404161:	test   ecx,ecx
  404163:	je     404180 <_start@@Base+0xe50>
  404165:	movabs rcx,0x8000000000000000
  40416f:	cmp    rdx,rcx
  404172:	ja     404190 <_start@@Base+0xe60>
  404174:	neg    rdx
  404177:	mov    QWORD PTR [r12],rdx
  40417b:	jmp    40413a <_start@@Base+0xe0a>
  40417d:	nop    DWORD PTR [rax]
  404180:	test   rdx,rdx
  404183:	js     4041a8 <_start@@Base+0xe78>
  404185:	mov    QWORD PTR [r12],rdx
  404189:	jmp    40413a <_start@@Base+0xe0a>
  40418b:	nop    DWORD PTR [rax+rax*1+0x0]
  404190:	mov    ecx,0x8
  404195:	mov    rdx,rbx
  404198:	mov    rsi,rax
  40419b:	mov    rdi,r13
  40419e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4041a3:	jmp    40413a <_start@@Base+0xe0a>
  4041a5:	nop    DWORD PTR [rax]
  4041a8:	mov    ecx,0x7
  4041ad:	mov    rdx,rbx
  4041b0:	mov    rsi,rax
  4041b3:	mov    rdi,r13
  4041b6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4041bb:	jmp    40413a <_start@@Base+0xe0a>
  4041c0:	call   4031c0 <__stack_chk_fail@plt>
  4041c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4041d0:	push   r13
  4041d2:	push   r12
  4041d4:	push   rbp
  4041d5:	push   rbx
  4041d6:	sub    rsp,0x28
  4041da:	mov    rax,QWORD PTR fs:0x28
  4041e3:	mov    QWORD PTR [rsp+0x18],rax
  4041e8:	xor    eax,eax
  4041ea:	mov    QWORD PTR [rsp+0x10],0x0
  4041f3:	mov    DWORD PTR [rsp+0xc],0x0
  4041fb:	mov    BYTE PTR [rcx],0x0
  4041fe:	mov    rax,rsi
  404201:	cmp    rsi,rdx
  404204:	je     404226 <_start@@Base+0xef6>
  404206:	mov    r12,rcx
  404209:	lea    r8,[rsp+0x10]
  40420e:	lea    rcx,[rsp+0xc]
  404213:	mov    rbp,rsi
  404216:	mov    r13,rdi
  404219:	mov    rbx,rdx
  40421c:	call   4184e0 <flatcc_json_parser_integer@@Base>
  404221:	cmp    rbp,rax
  404224:	jne    404248 <_start@@Base+0xf18>
  404226:	mov    rsi,QWORD PTR [rsp+0x18]
  40422b:	xor    rsi,QWORD PTR fs:0x28
  404234:	jne    404295 <_start@@Base+0xf65>
  404236:	add    rsp,0x28
  40423a:	pop    rbx
  40423b:	pop    rbp
  40423c:	pop    r12
  40423e:	pop    r13
  404240:	ret    
  404241:	nop    DWORD PTR [rax+0x0]
  404248:	mov    edx,DWORD PTR [rsp+0xc]
  40424c:	test   edx,edx
  40424e:	jne    404268 <_start@@Base+0xf38>
  404250:	mov    rdx,QWORD PTR [rsp+0x10]
  404255:	cmp    rdx,0xff
  40425c:	ja     404280 <_start@@Base+0xf50>
  40425e:	mov    BYTE PTR [r12],dl
  404262:	jmp    404226 <_start@@Base+0xef6>
  404264:	nop    DWORD PTR [rax+0x0]
  404268:	mov    ecx,0x8
  40426d:	mov    rdx,rbx
  404270:	mov    rsi,rax
  404273:	mov    rdi,r13
  404276:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40427b:	jmp    404226 <_start@@Base+0xef6>
  40427d:	nop    DWORD PTR [rax]
  404280:	mov    ecx,0x7
  404285:	mov    rdx,rbx
  404288:	mov    rsi,rax
  40428b:	mov    rdi,r13
  40428e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404293:	jmp    404226 <_start@@Base+0xef6>
  404295:	call   4031c0 <__stack_chk_fail@plt>
  40429a:	nop    WORD PTR [rax+rax*1+0x0]
  4042a0:	push   r13
  4042a2:	push   r12
  4042a4:	push   rbp
  4042a5:	push   rbx
  4042a6:	sub    rsp,0x28
  4042aa:	mov    rax,QWORD PTR fs:0x28
  4042b3:	mov    QWORD PTR [rsp+0x18],rax
  4042b8:	xor    eax,eax
  4042ba:	mov    QWORD PTR [rsp+0x10],0x0
  4042c3:	mov    DWORD PTR [rsp+0xc],0x0
  4042cb:	mov    DWORD PTR [rcx],0x0
  4042d1:	mov    rax,rsi
  4042d4:	cmp    rsi,rdx
  4042d7:	je     4042f9 <_start@@Base+0xfc9>
  4042d9:	mov    r12,rcx
  4042dc:	lea    r8,[rsp+0x10]
  4042e1:	lea    rcx,[rsp+0xc]
  4042e6:	mov    rbp,rsi
  4042e9:	mov    r13,rdi
  4042ec:	mov    rbx,rdx
  4042ef:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4042f4:	cmp    rbp,rax
  4042f7:	jne    404318 <_start@@Base+0xfe8>
  4042f9:	mov    rsi,QWORD PTR [rsp+0x18]
  4042fe:	xor    rsi,QWORD PTR fs:0x28
  404307:	jne    404365 <_start@@Base+0x1035>
  404309:	add    rsp,0x28
  40430d:	pop    rbx
  40430e:	pop    rbp
  40430f:	pop    r12
  404311:	pop    r13
  404313:	ret    
  404314:	nop    DWORD PTR [rax+0x0]
  404318:	mov    edx,DWORD PTR [rsp+0xc]
  40431c:	test   edx,edx
  40431e:	jne    404338 <_start@@Base+0x1008>
  404320:	mov    rdx,QWORD PTR [rsp+0x10]
  404325:	mov    ecx,0xffffffff
  40432a:	cmp    rdx,rcx
  40432d:	ja     404350 <_start@@Base+0x1020>
  40432f:	mov    DWORD PTR [r12],edx
  404333:	jmp    4042f9 <_start@@Base+0xfc9>
  404335:	nop    DWORD PTR [rax]
  404338:	mov    ecx,0x8
  40433d:	mov    rdx,rbx
  404340:	mov    rsi,rax
  404343:	mov    rdi,r13
  404346:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40434b:	jmp    4042f9 <_start@@Base+0xfc9>
  40434d:	nop    DWORD PTR [rax]
  404350:	mov    ecx,0x7
  404355:	mov    rdx,rbx
  404358:	mov    rsi,rax
  40435b:	mov    rdi,r13
  40435e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404363:	jmp    4042f9 <_start@@Base+0xfc9>
  404365:	call   4031c0 <__stack_chk_fail@plt>
  40436a:	nop    WORD PTR [rax+rax*1+0x0]
  404370:	push   r13
  404372:	push   r12
  404374:	push   rbp
  404375:	push   rbx
  404376:	sub    rsp,0x28
  40437a:	mov    rax,QWORD PTR fs:0x28
  404383:	mov    QWORD PTR [rsp+0x18],rax
  404388:	xor    eax,eax
  40438a:	mov    QWORD PTR [rsp+0x10],0x0
  404393:	mov    DWORD PTR [rsp+0xc],0x0
  40439b:	mov    DWORD PTR [rcx],0x0
  4043a1:	mov    rax,rsi
  4043a4:	cmp    rsi,rdx
  4043a7:	je     4043c9 <_start@@Base+0x1099>
  4043a9:	mov    r12,rcx
  4043ac:	lea    r8,[rsp+0x10]
  4043b1:	lea    rcx,[rsp+0xc]
  4043b6:	mov    rbp,rsi
  4043b9:	mov    r13,rdi
  4043bc:	mov    rbx,rdx
  4043bf:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4043c4:	cmp    rbp,rax
  4043c7:	jne    4043e8 <_start@@Base+0x10b8>
  4043c9:	mov    rsi,QWORD PTR [rsp+0x18]
  4043ce:	xor    rsi,QWORD PTR fs:0x28
  4043d7:	jne    404450 <_start@@Base+0x1120>
  4043d9:	add    rsp,0x28
  4043dd:	pop    rbx
  4043de:	pop    rbp
  4043df:	pop    r12
  4043e1:	pop    r13
  4043e3:	ret    
  4043e4:	nop    DWORD PTR [rax+0x0]
  4043e8:	mov    ecx,DWORD PTR [rsp+0xc]
  4043ec:	mov    rdx,QWORD PTR [rsp+0x10]
  4043f1:	test   ecx,ecx
  4043f3:	je     404410 <_start@@Base+0x10e0>
  4043f5:	mov    ecx,0x80000000
  4043fa:	cmp    rdx,rcx
  4043fd:	ja     404438 <_start@@Base+0x1108>
  4043ff:	neg    edx
  404401:	mov    DWORD PTR [r12],edx
  404405:	jmp    4043c9 <_start@@Base+0x1099>
  404407:	nop    WORD PTR [rax+rax*1+0x0]
  404410:	cmp    rdx,0x7fffffff
  404417:	ja     404420 <_start@@Base+0x10f0>
  404419:	mov    DWORD PTR [r12],edx
  40441d:	jmp    4043c9 <_start@@Base+0x1099>
  40441f:	nop
  404420:	mov    ecx,0x7
  404425:	mov    rdx,rbx
  404428:	mov    rsi,rax
  40442b:	mov    rdi,r13
  40442e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404433:	jmp    4043c9 <_start@@Base+0x1099>
  404435:	nop    DWORD PTR [rax]
  404438:	mov    ecx,0x8
  40443d:	mov    rdx,rbx
  404440:	mov    rsi,rax
  404443:	mov    rdi,r13
  404446:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40444b:	jmp    4043c9 <_start@@Base+0x1099>
  404450:	call   4031c0 <__stack_chk_fail@plt>
  404455:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404460:	push   r13
  404462:	xor    r8d,r8d
  404465:	push   r12
  404467:	push   rbp
  404468:	push   rbx
  404469:	sub    rsp,0x28
  40446d:	mov    rax,QWORD PTR fs:0x28
  404476:	mov    QWORD PTR [rsp+0x18],rax
  40447b:	xor    eax,eax
  40447d:	mov    QWORD PTR [rsp+0x10],0x0
  404486:	mov    DWORD PTR [rsp+0xc],0x0
  40448e:	mov    WORD PTR [rcx],r8w
  404492:	mov    rax,rsi
  404495:	cmp    rsi,rdx
  404498:	je     4044ba <_start@@Base+0x118a>
  40449a:	mov    r12,rcx
  40449d:	lea    r8,[rsp+0x10]
  4044a2:	lea    rcx,[rsp+0xc]
  4044a7:	mov    rbp,rsi
  4044aa:	mov    r13,rdi
  4044ad:	mov    rbx,rdx
  4044b0:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4044b5:	cmp    rbp,rax
  4044b8:	jne    4044d8 <_start@@Base+0x11a8>
  4044ba:	mov    rsi,QWORD PTR [rsp+0x18]
  4044bf:	xor    rsi,QWORD PTR fs:0x28
  4044c8:	jne    404540 <_start@@Base+0x1210>
  4044ca:	add    rsp,0x28
  4044ce:	pop    rbx
  4044cf:	pop    rbp
  4044d0:	pop    r12
  4044d2:	pop    r13
  4044d4:	ret    
  4044d5:	nop    DWORD PTR [rax]
  4044d8:	mov    ecx,DWORD PTR [rsp+0xc]
  4044dc:	mov    rdx,QWORD PTR [rsp+0x10]
  4044e1:	test   ecx,ecx
  4044e3:	je     404500 <_start@@Base+0x11d0>
  4044e5:	cmp    rdx,0x8000
  4044ec:	ja     404528 <_start@@Base+0x11f8>
  4044ee:	neg    edx
  4044f0:	mov    WORD PTR [r12],dx
  4044f5:	jmp    4044ba <_start@@Base+0x118a>
  4044f7:	nop    WORD PTR [rax+rax*1+0x0]
  404500:	cmp    rdx,0x7fff
  404507:	ja     404510 <_start@@Base+0x11e0>
  404509:	mov    WORD PTR [r12],dx
  40450e:	jmp    4044ba <_start@@Base+0x118a>
  404510:	mov    ecx,0x7
  404515:	mov    rdx,rbx
  404518:	mov    rsi,rax
  40451b:	mov    rdi,r13
  40451e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404523:	jmp    4044ba <_start@@Base+0x118a>
  404525:	nop    DWORD PTR [rax]
  404528:	mov    ecx,0x8
  40452d:	mov    rdx,rbx
  404530:	mov    rsi,rax
  404533:	mov    rdi,r13
  404536:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40453b:	jmp    4044ba <_start@@Base+0x118a>
  404540:	call   4031c0 <__stack_chk_fail@plt>
  404545:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404550:	push   r15
  404552:	push   r14
  404554:	push   r13
  404556:	push   r12
  404558:	mov    r12,rdi
  40455b:	push   rbp
  40455c:	push   rbx
  40455d:	mov    rbx,rdx
  404560:	sub    rsp,0x48
  404564:	mov    QWORD PTR [rsp+0x10],rcx
  404569:	mov    QWORD PTR [rsp+0x18],r8
  40456e:	mov    rdx,QWORD PTR fs:0x28
  404577:	mov    QWORD PTR [rsp+0x38],rdx
  40457c:	xor    edx,edx
  40457e:	mov    DWORD PTR [r8],0x0
  404585:	cmp    rsi,rbx
  404588:	je     404725 <_start@@Base+0x13f5>
  40458e:	movzx  eax,BYTE PTR [rsi]
  404591:	cmp    al,0x22
  404593:	je     404718 <_start@@Base+0x13e8>
  404599:	cmp    al,0x2e
  40459b:	je     40462f <_start@@Base+0x12ff>
  4045a1:	mov    DWORD PTR [rdi+0x14],0x1
  4045a8:	mov    rax,rsi
  4045ab:	lea    rcx,[rsp+0x28]
  4045b0:	mov    DWORD PTR [rsp+0xc],0x0
  4045b8:	mov    QWORD PTR [rsp],rcx
  4045bc:	lea    r15,[rsp+0x2c]
  4045c1:	lea    r14,[rsp+0x30]
  4045c6:	mov    r13,QWORD PTR [rsp+0x10]
  4045cb:	mov    rbp,rax
  4045ce:	mov    r11,QWORD PTR [r13+0x0]
  4045d2:	jmp    4045f1 <_start@@Base+0x12c1>
  4045d4:	nop    DWORD PTR [rax+0x0]
  4045d8:	cmp    rbp,rax
  4045db:	jne    404658 <_start@@Base+0x1328>
  4045dd:	add    r13,0x8
  4045e1:	mov    r11,QWORD PTR [r13+0x0]
  4045e5:	mov    rbp,rax
  4045e8:	test   r11,r11
  4045eb:	je     404740 <_start@@Base+0x1410>
  4045f1:	mov    rcx,QWORD PTR [rsp]
  4045f5:	mov    r9,r15
  4045f8:	mov    r8,r14
  4045fb:	mov    rdx,rbx
  4045fe:	mov    rsi,rax
  404601:	mov    rdi,r12
  404604:	call   r11
  404607:	cmp    rbx,rax
  40460a:	jne    4045d8 <_start@@Base+0x12a8>
  40460c:	mov    rsi,QWORD PTR [rsp+0x38]
  404611:	xor    rsi,QWORD PTR fs:0x28
  40461a:	jne    404770 <_start@@Base+0x1440>
  404620:	add    rsp,0x48
  404624:	pop    rbx
  404625:	pop    rbp
  404626:	pop    r12
  404628:	pop    r13
  40462a:	pop    r14
  40462c:	pop    r15
  40462e:	ret    
  40462f:	mov    ecx,0x5
  404634:	mov    rdx,rbx
  404637:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40463c:	mov    r8d,DWORD PTR [r12+0x14]
  404641:	test   r8d,r8d
  404644:	je     4046e0 <_start@@Base+0x13b0>
  40464a:	cmp    rbx,rax
  40464d:	jne    4045ab <_start@@Base+0x127b>
  404653:	jmp    40460c <_start@@Base+0x12dc>
  404655:	nop    DWORD PTR [rax]
  404658:	mov    edx,DWORD PTR [rsp+0xc]
  40465c:	test   edx,edx
  40465e:	je     40466d <_start@@Base+0x133d>
  404660:	mov    edi,DWORD PTR [r12+0x14]
  404665:	test   edi,edi
  404667:	jne    404758 <_start@@Base+0x1428>
  40466d:	mov    rdx,QWORD PTR [rsp+0x30]
  404672:	test   rdx,rdx
  404675:	js     4046b8 <_start@@Base+0x1388>
  404677:	vxorps xmm0,xmm0,xmm0
  40467b:	vcvtsi2ss xmm0,xmm0,rdx
  404680:	mov    esi,DWORD PTR [rsp+0x28]
  404684:	test   esi,esi
  404686:	je     404690 <_start@@Base+0x1360>
  404688:	vxorps xmm0,xmm0,XMMWORD PTR [rip+0x15dd0]        # 41a460 <_IO_stdin_used@@Base+0x460>
  404690:	mov    rdi,QWORD PTR [rsp+0x18]
  404695:	mov    ecx,DWORD PTR [rsp+0x2c]
  404699:	vaddss xmm0,xmm0,DWORD PTR [rdi]
  40469d:	inc    DWORD PTR [rsp+0xc]
  4046a1:	vmovss DWORD PTR [rdi],xmm0
  4046a5:	test   ecx,ecx
  4046a7:	jne    4045c6 <_start@@Base+0x1296>
  4046ad:	jmp    40460c <_start@@Base+0x12dc>
  4046b2:	nop    WORD PTR [rax+rax*1+0x0]
  4046b8:	mov    rcx,rdx
  4046bb:	shr    rcx,1
  4046be:	and    edx,0x1
  4046c1:	or     rcx,rdx
  4046c4:	vxorps xmm0,xmm0,xmm0
  4046c8:	vcvtsi2ss xmm0,xmm0,rcx
  4046cd:	vaddss xmm0,xmm0,xmm0
  4046d1:	jmp    404680 <_start@@Base+0x1350>
  4046d3:	mov    rax,rbx
  4046d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4046e0:	mov    rdx,rbx
  4046e3:	sub    rdx,rax
  4046e6:	cmp    rdx,0x1
  4046ea:	jle    404700 <_start@@Base+0x13d0>
  4046ec:	cmp    BYTE PTR [rax],0x20
  4046ef:	jg     40464a <_start@@Base+0x131a>
  4046f5:	jne    404700 <_start@@Base+0x13d0>
  4046f7:	cmp    BYTE PTR [rax+0x1],0x20
  4046fb:	jg     404734 <_start@@Base+0x1404>
  4046fd:	nop    DWORD PTR [rax]
  404700:	mov    rdx,rbx
  404703:	mov    rsi,rax
  404706:	mov    rdi,r12
  404709:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40470e:	jmp    40464a <_start@@Base+0x131a>
  404713:	nop    DWORD PTR [rax+rax*1+0x0]
  404718:	lea    rax,[rsi+0x1]
  40471c:	mov    DWORD PTR [rdi+0x14],0x0
  404723:	jmp    4046e0 <_start@@Base+0x13b0>
  404725:	mov    eax,DWORD PTR [rdi+0x14]
  404728:	test   eax,eax
  40472a:	je     4046d3 <_start@@Base+0x13a3>
  40472c:	mov    rax,rsi
  40472f:	jmp    40460c <_start@@Base+0x12dc>
  404734:	inc    rax
  404737:	jmp    40464a <_start@@Base+0x131a>
  40473c:	nop    DWORD PTR [rax+0x0]
  404740:	mov    ecx,0x17
  404745:	mov    rdx,rbx
  404748:	mov    rsi,rax
  40474b:	mov    rdi,r12
  40474e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404753:	jmp    40460c <_start@@Base+0x12dc>
  404758:	mov    ecx,0xe
  40475d:	mov    rdx,rbx
  404760:	mov    rsi,rax
  404763:	mov    rdi,r12
  404766:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40476b:	jmp    40460c <_start@@Base+0x12dc>
  404770:	call   4031c0 <__stack_chk_fail@plt>
  404775:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404780:	push   r15
  404782:	push   r14
  404784:	push   r13
  404786:	push   r12
  404788:	mov    r12,rdi
  40478b:	push   rbp
  40478c:	push   rbx
  40478d:	mov    rbx,rdx
  404790:	sub    rsp,0x48
  404794:	mov    QWORD PTR [rsp+0x10],rcx
  404799:	mov    QWORD PTR [rsp+0x18],r8
  40479e:	mov    rdx,QWORD PTR fs:0x28
  4047a7:	mov    QWORD PTR [rsp+0x38],rdx
  4047ac:	xor    edx,edx
  4047ae:	mov    QWORD PTR [r8],0x0
  4047b5:	cmp    rsi,rbx
  4047b8:	je     404955 <_start@@Base+0x1625>
  4047be:	movzx  eax,BYTE PTR [rsi]
  4047c1:	cmp    al,0x22
  4047c3:	je     404948 <_start@@Base+0x1618>
  4047c9:	cmp    al,0x2e
  4047cb:	je     40485f <_start@@Base+0x152f>
  4047d1:	mov    DWORD PTR [rdi+0x14],0x1
  4047d8:	mov    rax,rsi
  4047db:	lea    rcx,[rsp+0x28]
  4047e0:	mov    DWORD PTR [rsp+0xc],0x0
  4047e8:	mov    QWORD PTR [rsp],rcx
  4047ec:	lea    r15,[rsp+0x2c]
  4047f1:	lea    r14,[rsp+0x30]
  4047f6:	mov    r13,QWORD PTR [rsp+0x10]
  4047fb:	mov    rbp,rax
  4047fe:	mov    r11,QWORD PTR [r13+0x0]
  404802:	jmp    404821 <_start@@Base+0x14f1>
  404804:	nop    DWORD PTR [rax+0x0]
  404808:	cmp    rbp,rax
  40480b:	jne    404888 <_start@@Base+0x1558>
  40480d:	add    r13,0x8
  404811:	mov    r11,QWORD PTR [r13+0x0]
  404815:	mov    rbp,rax
  404818:	test   r11,r11
  40481b:	je     404970 <_start@@Base+0x1640>
  404821:	mov    rcx,QWORD PTR [rsp]
  404825:	mov    r9,r15
  404828:	mov    r8,r14
  40482b:	mov    rdx,rbx
  40482e:	mov    rsi,rax
  404831:	mov    rdi,r12
  404834:	call   r11
  404837:	cmp    rbx,rax
  40483a:	jne    404808 <_start@@Base+0x14d8>
  40483c:	mov    rsi,QWORD PTR [rsp+0x38]
  404841:	xor    rsi,QWORD PTR fs:0x28
  40484a:	jne    4049a0 <_start@@Base+0x1670>
  404850:	add    rsp,0x48
  404854:	pop    rbx
  404855:	pop    rbp
  404856:	pop    r12
  404858:	pop    r13
  40485a:	pop    r14
  40485c:	pop    r15
  40485e:	ret    
  40485f:	mov    ecx,0x5
  404864:	mov    rdx,rbx
  404867:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40486c:	mov    r8d,DWORD PTR [r12+0x14]
  404871:	test   r8d,r8d
  404874:	je     404910 <_start@@Base+0x15e0>
  40487a:	cmp    rbx,rax
  40487d:	jne    4047db <_start@@Base+0x14ab>
  404883:	jmp    40483c <_start@@Base+0x150c>
  404885:	nop    DWORD PTR [rax]
  404888:	mov    edx,DWORD PTR [rsp+0xc]
  40488c:	test   edx,edx
  40488e:	je     40489d <_start@@Base+0x156d>
  404890:	mov    edi,DWORD PTR [r12+0x14]
  404895:	test   edi,edi
  404897:	jne    404988 <_start@@Base+0x1658>
  40489d:	mov    rdx,QWORD PTR [rsp+0x30]
  4048a2:	test   rdx,rdx
  4048a5:	js     4048e8 <_start@@Base+0x15b8>
  4048a7:	vxorpd xmm0,xmm0,xmm0
  4048ab:	vcvtsi2sd xmm0,xmm0,rdx
  4048b0:	mov    esi,DWORD PTR [rsp+0x28]
  4048b4:	test   esi,esi
  4048b6:	je     4048c0 <_start@@Base+0x1590>
  4048b8:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x15bb0]        # 41a470 <_IO_stdin_used@@Base+0x470>
  4048c0:	mov    rdi,QWORD PTR [rsp+0x18]
  4048c5:	mov    ecx,DWORD PTR [rsp+0x2c]
  4048c9:	vaddsd xmm0,xmm0,QWORD PTR [rdi]
  4048cd:	inc    DWORD PTR [rsp+0xc]
  4048d1:	vmovsd QWORD PTR [rdi],xmm0
  4048d5:	test   ecx,ecx
  4048d7:	jne    4047f6 <_start@@Base+0x14c6>
  4048dd:	jmp    40483c <_start@@Base+0x150c>
  4048e2:	nop    WORD PTR [rax+rax*1+0x0]
  4048e8:	mov    rcx,rdx
  4048eb:	shr    rcx,1
  4048ee:	and    edx,0x1
  4048f1:	or     rcx,rdx
  4048f4:	vxorpd xmm0,xmm0,xmm0
  4048f8:	vcvtsi2sd xmm0,xmm0,rcx
  4048fd:	vaddsd xmm0,xmm0,xmm0
  404901:	jmp    4048b0 <_start@@Base+0x1580>
  404903:	mov    rax,rbx
  404906:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404910:	mov    rdx,rbx
  404913:	sub    rdx,rax
  404916:	cmp    rdx,0x1
  40491a:	jle    404930 <_start@@Base+0x1600>
  40491c:	cmp    BYTE PTR [rax],0x20
  40491f:	jg     40487a <_start@@Base+0x154a>
  404925:	jne    404930 <_start@@Base+0x1600>
  404927:	cmp    BYTE PTR [rax+0x1],0x20
  40492b:	jg     404964 <_start@@Base+0x1634>
  40492d:	nop    DWORD PTR [rax]
  404930:	mov    rdx,rbx
  404933:	mov    rsi,rax
  404936:	mov    rdi,r12
  404939:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40493e:	jmp    40487a <_start@@Base+0x154a>
  404943:	nop    DWORD PTR [rax+rax*1+0x0]
  404948:	lea    rax,[rsi+0x1]
  40494c:	mov    DWORD PTR [rdi+0x14],0x0
  404953:	jmp    404910 <_start@@Base+0x15e0>
  404955:	mov    eax,DWORD PTR [rdi+0x14]
  404958:	test   eax,eax
  40495a:	je     404903 <_start@@Base+0x15d3>
  40495c:	mov    rax,rsi
  40495f:	jmp    40483c <_start@@Base+0x150c>
  404964:	inc    rax
  404967:	jmp    40487a <_start@@Base+0x154a>
  40496c:	nop    DWORD PTR [rax+0x0]
  404970:	mov    ecx,0x17
  404975:	mov    rdx,rbx
  404978:	mov    rsi,rax
  40497b:	mov    rdi,r12
  40497e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404983:	jmp    40483c <_start@@Base+0x150c>
  404988:	mov    ecx,0xe
  40498d:	mov    rdx,rbx
  404990:	mov    rsi,rax
  404993:	mov    rdi,r12
  404996:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40499b:	jmp    40483c <_start@@Base+0x150c>
  4049a0:	call   4031c0 <__stack_chk_fail@plt>
  4049a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4049b0:	push   r15
  4049b2:	push   r14
  4049b4:	push   r13
  4049b6:	push   r12
  4049b8:	mov    r12,rdi
  4049bb:	push   rbp
  4049bc:	push   rbx
  4049bd:	mov    rbx,rdx
  4049c0:	sub    rsp,0x58
  4049c4:	mov    QWORD PTR [rsp+0x18],rcx
  4049c9:	mov    QWORD PTR [rsp+0x20],r8
  4049ce:	mov    rdx,QWORD PTR fs:0x28
  4049d7:	mov    QWORD PTR [rsp+0x48],rdx
  4049dc:	xor    edx,edx
  4049de:	mov    QWORD PTR [r8],0x0
  4049e5:	cmp    rsi,rbx
  4049e8:	je     404b38 <_start@@Base+0x1808>
  4049ee:	movzx  eax,BYTE PTR [rsi]
  4049f1:	cmp    al,0x22
  4049f3:	je     404b90 <_start@@Base+0x1860>
  4049f9:	cmp    al,0x2e
  4049fb:	je     404aa0 <_start@@Base+0x1770>
  404a01:	mov    DWORD PTR [rdi+0x14],0x1
  404a08:	mov    r10,rsi
  404a0b:	lea    rax,[rsp+0x38]
  404a10:	mov    DWORD PTR [rsp+0xc],0x0
  404a18:	mov    QWORD PTR [rsp+0x10],0x0
  404a21:	mov    QWORD PTR [rsp],rax
  404a25:	lea    r15,[rsp+0x3c]
  404a2a:	lea    r14,[rsp+0x40]
  404a2f:	mov    r13,QWORD PTR [rsp+0x18]
  404a34:	mov    rbp,r10
  404a37:	mov    rax,QWORD PTR [r13+0x0]
  404a3b:	mov    rsi,r10
  404a3e:	jmp    404a5d <_start@@Base+0x172d>
  404a40:	cmp    rbp,rax
  404a43:	jne    404ad0 <_start@@Base+0x17a0>
  404a49:	add    r13,0x8
  404a4d:	mov    rax,QWORD PTR [r13+0x0]
  404a51:	mov    rbp,rsi
  404a54:	test   rax,rax
  404a57:	je     404b20 <_start@@Base+0x17f0>
  404a5d:	mov    rcx,QWORD PTR [rsp]
  404a61:	mov    r9,r15
  404a64:	mov    r8,r14
  404a67:	mov    rdx,rbx
  404a6a:	mov    rdi,r12
  404a6d:	call   rax
  404a6f:	mov    rsi,rax
  404a72:	cmp    rbx,rax
  404a75:	jne    404a40 <_start@@Base+0x1710>
  404a77:	mov    r10,rsi
  404a7a:	mov    rdi,QWORD PTR [rsp+0x48]
  404a7f:	xor    rdi,QWORD PTR fs:0x28
  404a88:	mov    rax,r10
  404a8b:	jne    404bf1 <_start@@Base+0x18c1>
  404a91:	add    rsp,0x58
  404a95:	pop    rbx
  404a96:	pop    rbp
  404a97:	pop    r12
  404a99:	pop    r13
  404a9b:	pop    r14
  404a9d:	pop    r15
  404a9f:	ret    
  404aa0:	mov    ecx,0x5
  404aa5:	mov    rdx,rbx
  404aa8:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404aad:	mov    r8d,DWORD PTR [r12+0x14]
  404ab2:	mov    r10,rax
  404ab5:	test   r8d,r8d
  404ab8:	je     404b50 <_start@@Base+0x1820>
  404abe:	cmp    rbx,r10
  404ac1:	jne    404a0b <_start@@Base+0x16db>
  404ac7:	jmp    404a7a <_start@@Base+0x174a>
  404ac9:	nop    DWORD PTR [rax+0x0]
  404ad0:	mov    edx,DWORD PTR [rsp+0xc]
  404ad4:	mov    r10,rax
  404ad7:	test   edx,edx
  404ad9:	je     404ae8 <_start@@Base+0x17b8>
  404adb:	mov    edi,DWORD PTR [r12+0x14]
  404ae0:	test   edi,edi
  404ae2:	jne    404bd6 <_start@@Base+0x18a6>
  404ae8:	mov    esi,DWORD PTR [rsp+0x38]
  404aec:	test   esi,esi
  404aee:	jne    404ba0 <_start@@Base+0x1870>
  404af4:	mov    rax,QWORD PTR [rsp+0x40]
  404af9:	mov    QWORD PTR [rsp+0x10],rax
  404afe:	mov    rcx,QWORD PTR [rsp+0x10]
  404b03:	mov    rax,QWORD PTR [rsp+0x20]
  404b08:	inc    DWORD PTR [rsp+0xc]
  404b0c:	add    QWORD PTR [rax],rcx
  404b0f:	mov    ecx,DWORD PTR [rsp+0x3c]
  404b13:	test   ecx,ecx
  404b15:	jne    404a2f <_start@@Base+0x16ff>
  404b1b:	jmp    404a7a <_start@@Base+0x174a>
  404b20:	mov    ecx,0x17
  404b25:	mov    rdx,rbx
  404b28:	mov    rdi,r12
  404b2b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404b30:	mov    r10,rax
  404b33:	jmp    404a7a <_start@@Base+0x174a>
  404b38:	mov    eax,DWORD PTR [rdi+0x14]
  404b3b:	test   eax,eax
  404b3d:	jne    404a77 <_start@@Base+0x1747>
  404b43:	mov    r10,rbx
  404b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404b50:	mov    rax,rbx
  404b53:	sub    rax,r10
  404b56:	cmp    rax,0x1
  404b5a:	jle    404b70 <_start@@Base+0x1840>
  404b5c:	cmp    BYTE PTR [r10],0x20
  404b60:	jg     404abe <_start@@Base+0x178e>
  404b66:	jne    404b70 <_start@@Base+0x1840>
  404b68:	cmp    BYTE PTR [r10+0x1],0x20
  404b6d:	jg     404bce <_start@@Base+0x189e>
  404b6f:	nop
  404b70:	mov    rsi,r10
  404b73:	mov    rdx,rbx
  404b76:	mov    rdi,r12
  404b79:	call   416950 <flatcc_json_parser_space_ext@@Base>
  404b7e:	mov    r10,rax
  404b81:	jmp    404abe <_start@@Base+0x178e>
  404b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404b90:	lea    r10,[rsi+0x1]
  404b94:	mov    DWORD PTR [rdi+0x14],0x0
  404b9b:	jmp    404b50 <_start@@Base+0x1820>
  404b9d:	nop    DWORD PTR [rax]
  404ba0:	mov    rsi,r10
  404ba3:	mov    ecx,0x8
  404ba8:	mov    rdx,rbx
  404bab:	mov    rdi,r12
  404bae:	mov    QWORD PTR [rsp+0x28],r10
  404bb3:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404bb8:	cmp    rbx,rax
  404bbb:	mov    r10,QWORD PTR [rsp+0x28]
  404bc0:	jne    404afe <_start@@Base+0x17ce>
  404bc6:	mov    r10,rbx
  404bc9:	jmp    404a7a <_start@@Base+0x174a>
  404bce:	inc    r10
  404bd1:	jmp    404abe <_start@@Base+0x178e>
  404bd6:	mov    rsi,r10
  404bd9:	mov    ecx,0xe
  404bde:	mov    rdx,rbx
  404be1:	mov    rdi,r12
  404be4:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404be9:	mov    r10,rax
  404bec:	jmp    404a7a <_start@@Base+0x174a>
  404bf1:	call   4031c0 <__stack_chk_fail@plt>
  404bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c00:	push   r15
  404c02:	push   r14
  404c04:	push   r13
  404c06:	push   r12
  404c08:	mov    r12,rdi
  404c0b:	push   rbp
  404c0c:	push   rbx
  404c0d:	mov    rbx,rdx
  404c10:	sub    rsp,0x58
  404c14:	mov    QWORD PTR [rsp+0x18],rcx
  404c19:	mov    QWORD PTR [rsp+0x20],r8
  404c1e:	mov    rdx,QWORD PTR fs:0x28
  404c27:	mov    QWORD PTR [rsp+0x48],rdx
  404c2c:	xor    edx,edx
  404c2e:	mov    BYTE PTR [r8],0x0
  404c32:	cmp    rsi,rbx
  404c35:	je     404d88 <_start@@Base+0x1a58>
  404c3b:	movzx  eax,BYTE PTR [rsi]
  404c3e:	cmp    al,0x22
  404c40:	je     404de0 <_start@@Base+0x1ab0>
  404c46:	cmp    al,0x2e
  404c48:	je     404cf1 <_start@@Base+0x19c1>
  404c4e:	mov    DWORD PTR [rdi+0x14],0x1
  404c55:	mov    r10,rsi
  404c58:	lea    rax,[rsp+0x38]
  404c5d:	mov    DWORD PTR [rsp+0x10],0x0
  404c65:	mov    BYTE PTR [rsp+0x17],0x0
  404c6a:	mov    QWORD PTR [rsp+0x8],rax
  404c6f:	lea    r15,[rsp+0x3c]
  404c74:	lea    r14,[rsp+0x40]
  404c79:	mov    r13,QWORD PTR [rsp+0x18]
  404c7e:	mov    rbp,r10
  404c81:	mov    rax,QWORD PTR [r13+0x0]
  404c85:	mov    rsi,r10
  404c88:	jmp    404cad <_start@@Base+0x197d>
  404c8a:	nop    WORD PTR [rax+rax*1+0x0]
  404c90:	cmp    rbp,rax
  404c93:	jne    404d20 <_start@@Base+0x19f0>
  404c99:	add    r13,0x8
  404c9d:	mov    rax,QWORD PTR [r13+0x0]
  404ca1:	mov    rbp,rsi
  404ca4:	test   rax,rax
  404ca7:	je     404d70 <_start@@Base+0x1a40>
  404cad:	mov    rcx,QWORD PTR [rsp+0x8]
  404cb2:	mov    r9,r15
  404cb5:	mov    r8,r14
  404cb8:	mov    rdx,rbx
  404cbb:	mov    rdi,r12
  404cbe:	call   rax
  404cc0:	mov    rsi,rax
  404cc3:	cmp    rbx,rax
  404cc6:	jne    404c90 <_start@@Base+0x1960>
  404cc8:	mov    r10,rsi
  404ccb:	mov    rdi,QWORD PTR [rsp+0x48]
  404cd0:	xor    rdi,QWORD PTR fs:0x28
  404cd9:	mov    rax,r10
  404cdc:	jne    404e41 <_start@@Base+0x1b11>
  404ce2:	add    rsp,0x58
  404ce6:	pop    rbx
  404ce7:	pop    rbp
  404ce8:	pop    r12
  404cea:	pop    r13
  404cec:	pop    r14
  404cee:	pop    r15
  404cf0:	ret    
  404cf1:	mov    ecx,0x5
  404cf6:	mov    rdx,rbx
  404cf9:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404cfe:	mov    r8d,DWORD PTR [r12+0x14]
  404d03:	mov    r10,rax
  404d06:	test   r8d,r8d
  404d09:	je     404da0 <_start@@Base+0x1a70>
  404d0f:	cmp    rbx,r10
  404d12:	jne    404c58 <_start@@Base+0x1928>
  404d18:	jmp    404ccb <_start@@Base+0x199b>
  404d1a:	nop    WORD PTR [rax+rax*1+0x0]
  404d20:	mov    edx,DWORD PTR [rsp+0x10]
  404d24:	mov    r10,rax
  404d27:	test   edx,edx
  404d29:	je     404d38 <_start@@Base+0x1a08>
  404d2b:	mov    edi,DWORD PTR [r12+0x14]
  404d30:	test   edi,edi
  404d32:	jne    404e26 <_start@@Base+0x1af6>
  404d38:	mov    esi,DWORD PTR [rsp+0x38]
  404d3c:	test   esi,esi
  404d3e:	jne    404df0 <_start@@Base+0x1ac0>
  404d44:	cmp    QWORD PTR [rsp+0x40],0x0
  404d4a:	setne  BYTE PTR [rsp+0x17]
  404d4f:	movzx  ecx,BYTE PTR [rsp+0x17]
  404d54:	mov    rax,QWORD PTR [rsp+0x20]
  404d59:	inc    DWORD PTR [rsp+0x10]
  404d5d:	add    BYTE PTR [rax],cl
  404d5f:	mov    ecx,DWORD PTR [rsp+0x3c]
  404d63:	test   ecx,ecx
  404d65:	jne    404c79 <_start@@Base+0x1949>
  404d6b:	jmp    404ccb <_start@@Base+0x199b>
  404d70:	mov    ecx,0x17
  404d75:	mov    rdx,rbx
  404d78:	mov    rdi,r12
  404d7b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404d80:	mov    r10,rax
  404d83:	jmp    404ccb <_start@@Base+0x199b>
  404d88:	mov    eax,DWORD PTR [rdi+0x14]
  404d8b:	test   eax,eax
  404d8d:	jne    404cc8 <_start@@Base+0x1998>
  404d93:	mov    r10,rbx
  404d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404da0:	mov    rax,rbx
  404da3:	sub    rax,r10
  404da6:	cmp    rax,0x1
  404daa:	jle    404dc0 <_start@@Base+0x1a90>
  404dac:	cmp    BYTE PTR [r10],0x20
  404db0:	jg     404d0f <_start@@Base+0x19df>
  404db6:	jne    404dc0 <_start@@Base+0x1a90>
  404db8:	cmp    BYTE PTR [r10+0x1],0x20
  404dbd:	jg     404e1e <_start@@Base+0x1aee>
  404dbf:	nop
  404dc0:	mov    rsi,r10
  404dc3:	mov    rdx,rbx
  404dc6:	mov    rdi,r12
  404dc9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  404dce:	mov    r10,rax
  404dd1:	jmp    404d0f <_start@@Base+0x19df>
  404dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404de0:	lea    r10,[rsi+0x1]
  404de4:	mov    DWORD PTR [rdi+0x14],0x0
  404deb:	jmp    404da0 <_start@@Base+0x1a70>
  404ded:	nop    DWORD PTR [rax]
  404df0:	mov    rsi,r10
  404df3:	mov    ecx,0x8
  404df8:	mov    rdx,rbx
  404dfb:	mov    rdi,r12
  404dfe:	mov    QWORD PTR [rsp+0x28],r10
  404e03:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404e08:	cmp    rbx,rax
  404e0b:	mov    r10,QWORD PTR [rsp+0x28]
  404e10:	jne    404d4f <_start@@Base+0x1a1f>
  404e16:	mov    r10,rbx
  404e19:	jmp    404ccb <_start@@Base+0x199b>
  404e1e:	inc    r10
  404e21:	jmp    404d0f <_start@@Base+0x19df>
  404e26:	mov    rsi,r10
  404e29:	mov    ecx,0xe
  404e2e:	mov    rdx,rbx
  404e31:	mov    rdi,r12
  404e34:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404e39:	mov    r10,rax
  404e3c:	jmp    404ccb <_start@@Base+0x199b>
  404e41:	call   4031c0 <__stack_chk_fail@plt>
  404e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404e50:	push   r15
  404e52:	push   r14
  404e54:	push   r13
  404e56:	push   r12
  404e58:	mov    r12,rdi
  404e5b:	push   rbp
  404e5c:	push   rbx
  404e5d:	mov    rbx,rdx
  404e60:	sub    rsp,0x58
  404e64:	mov    QWORD PTR [rsp+0x10],rcx
  404e69:	mov    QWORD PTR [rsp+0x20],r8
  404e6e:	mov    rdi,QWORD PTR fs:0x28
  404e77:	mov    QWORD PTR [rsp+0x48],rdi
  404e7c:	xor    edi,edi
  404e7e:	mov    DWORD PTR [r8],0x0
  404e85:	cmp    rsi,rdx
  404e88:	je     40501a <_start@@Base+0x1cea>
  404e8e:	movzx  eax,BYTE PTR [rsi]
  404e91:	cmp    al,0x22
  404e93:	je     405070 <_start@@Base+0x1d40>
  404e99:	cmp    al,0x2e
  404e9b:	je     404f49 <_start@@Base+0x1c19>
  404ea1:	mov    DWORD PTR [r12+0x14],0x1
  404eaa:	mov    r10,rsi
  404ead:	lea    rax,[rsp+0x38]
  404eb2:	mov    DWORD PTR [rsp+0x18],0x0
  404eba:	mov    DWORD PTR [rsp+0x1c],0x0
  404ec2:	mov    QWORD PTR [rsp+0x8],rax
  404ec7:	lea    r15,[rsp+0x3c]
  404ecc:	lea    r14,[rsp+0x40]
  404ed1:	mov    r13,QWORD PTR [rsp+0x10]
  404ed6:	mov    rbp,r10
  404ed9:	mov    rax,QWORD PTR [r13+0x0]
  404edd:	mov    rsi,r10
  404ee0:	jmp    404f05 <_start@@Base+0x1bd5>
  404ee2:	nop    WORD PTR [rax+rax*1+0x0]
  404ee8:	cmp    rbp,rax
  404eeb:	jne    404f78 <_start@@Base+0x1c48>
  404ef1:	add    r13,0x8
  404ef5:	mov    rax,QWORD PTR [r13+0x0]
  404ef9:	mov    rbp,rsi
  404efc:	test   rax,rax
  404eff:	je     404fd0 <_start@@Base+0x1ca0>
  404f05:	mov    rcx,QWORD PTR [rsp+0x8]
  404f0a:	mov    r9,r15
  404f0d:	mov    r8,r14
  404f10:	mov    rdx,rbx
  404f13:	mov    rdi,r12
  404f16:	call   rax
  404f18:	mov    rsi,rax
  404f1b:	cmp    rbx,rax
  404f1e:	jne    404ee8 <_start@@Base+0x1bb8>
  404f20:	mov    r10,rsi
  404f23:	mov    rdi,QWORD PTR [rsp+0x48]
  404f28:	xor    rdi,QWORD PTR fs:0x28
  404f31:	mov    rax,r10
  404f34:	jne    4050a2 <_start@@Base+0x1d72>
  404f3a:	add    rsp,0x58
  404f3e:	pop    rbx
  404f3f:	pop    rbp
  404f40:	pop    r12
  404f42:	pop    r13
  404f44:	pop    r14
  404f46:	pop    r15
  404f48:	ret    
  404f49:	mov    ecx,0x5
  404f4e:	mov    rdi,r12
  404f51:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404f56:	mov    r8d,DWORD PTR [r12+0x14]
  404f5b:	mov    r10,rax
  404f5e:	test   r8d,r8d
  404f61:	je     405030 <_start@@Base+0x1d00>
  404f67:	cmp    rbx,r10
  404f6a:	jne    404ead <_start@@Base+0x1b7d>
  404f70:	jmp    404f23 <_start@@Base+0x1bf3>
  404f72:	nop    WORD PTR [rax+rax*1+0x0]
  404f78:	mov    edx,DWORD PTR [rsp+0x18]
  404f7c:	mov    r10,rax
  404f7f:	test   edx,edx
  404f81:	je     404f90 <_start@@Base+0x1c60>
  404f83:	mov    edi,DWORD PTR [r12+0x14]
  404f88:	test   edi,edi
  404f8a:	jne    405087 <_start@@Base+0x1d57>
  404f90:	mov    esi,DWORD PTR [rsp+0x38]
  404f94:	mov    ecx,0x8
  404f99:	test   esi,esi
  404f9b:	jne    404ff5 <_start@@Base+0x1cc5>
  404f9d:	mov    rax,QWORD PTR [rsp+0x40]
  404fa2:	mov    edx,0xffffffff
  404fa7:	cmp    rax,rdx
  404faa:	ja     404ff0 <_start@@Base+0x1cc0>
  404fac:	mov    DWORD PTR [rsp+0x1c],eax
  404fb0:	mov    ecx,DWORD PTR [rsp+0x1c]
  404fb4:	mov    rax,QWORD PTR [rsp+0x20]
  404fb9:	inc    DWORD PTR [rsp+0x18]
  404fbd:	add    DWORD PTR [rax],ecx
  404fbf:	mov    ecx,DWORD PTR [rsp+0x3c]
  404fc3:	test   ecx,ecx
  404fc5:	jne    404ed1 <_start@@Base+0x1ba1>
  404fcb:	jmp    404f23 <_start@@Base+0x1bf3>
  404fd0:	mov    ecx,0x17
  404fd5:	mov    rdx,rbx
  404fd8:	mov    rdi,r12
  404fdb:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  404fe0:	mov    r10,rax
  404fe3:	jmp    404f23 <_start@@Base+0x1bf3>
  404fe8:	nop    DWORD PTR [rax+rax*1+0x0]
  404ff0:	mov    ecx,0x7
  404ff5:	mov    rsi,r10
  404ff8:	mov    rdx,rbx
  404ffb:	mov    rdi,r12
  404ffe:	mov    QWORD PTR [rsp+0x28],r10
  405003:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405008:	mov    r10,QWORD PTR [rsp+0x28]
  40500d:	cmp    rbx,rax
  405010:	jne    404fb0 <_start@@Base+0x1c80>
  405012:	mov    r10,rbx
  405015:	jmp    404f23 <_start@@Base+0x1bf3>
  40501a:	mov    eax,DWORD PTR [r12+0x14]
  40501f:	test   eax,eax
  405021:	jne    404f20 <_start@@Base+0x1bf0>
  405027:	mov    r10,rbx
  40502a:	nop    WORD PTR [rax+rax*1+0x0]
  405030:	mov    rax,rbx
  405033:	sub    rax,r10
  405036:	cmp    rax,0x1
  40503a:	jle    405050 <_start@@Base+0x1d20>
  40503c:	cmp    BYTE PTR [r10],0x20
  405040:	jg     404f67 <_start@@Base+0x1c37>
  405046:	jne    405050 <_start@@Base+0x1d20>
  405048:	cmp    BYTE PTR [r10+0x1],0x20
  40504d:	jg     40507f <_start@@Base+0x1d4f>
  40504f:	nop
  405050:	mov    rsi,r10
  405053:	mov    rdx,rbx
  405056:	mov    rdi,r12
  405059:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40505e:	mov    r10,rax
  405061:	jmp    404f67 <_start@@Base+0x1c37>
  405066:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405070:	lea    r10,[rsi+0x1]
  405074:	mov    DWORD PTR [r12+0x14],0x0
  40507d:	jmp    405030 <_start@@Base+0x1d00>
  40507f:	inc    r10
  405082:	jmp    404f67 <_start@@Base+0x1c37>
  405087:	mov    rsi,r10
  40508a:	mov    ecx,0xe
  40508f:	mov    rdx,rbx
  405092:	mov    rdi,r12
  405095:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40509a:	mov    r10,rax
  40509d:	jmp    404f23 <_start@@Base+0x1bf3>
  4050a2:	call   4031c0 <__stack_chk_fail@plt>
  4050a7:	nop    WORD PTR [rax+rax*1+0x0]
  4050b0:	push   r15
  4050b2:	xor    r10d,r10d
  4050b5:	push   r14
  4050b7:	push   r13
  4050b9:	push   r12
  4050bb:	mov    r12,rdi
  4050be:	push   rbp
  4050bf:	push   rbx
  4050c0:	mov    rbx,rdx
  4050c3:	sub    rsp,0x58
  4050c7:	mov    QWORD PTR [rsp+0x10],rcx
  4050cc:	mov    QWORD PTR [rsp+0x20],r8
  4050d1:	mov    rdx,QWORD PTR fs:0x28
  4050da:	mov    QWORD PTR [rsp+0x48],rdx
  4050df:	xor    edx,edx
  4050e1:	mov    WORD PTR [r8],r10w
  4050e5:	cmp    rsi,rbx
  4050e8:	je     40527a <_start@@Base+0x1f4a>
  4050ee:	movzx  eax,BYTE PTR [rsi]
  4050f1:	cmp    al,0x22
  4050f3:	je     4052d0 <_start@@Base+0x1fa0>
  4050f9:	cmp    al,0x2e
  4050fb:	je     4051a9 <_start@@Base+0x1e79>
  405101:	mov    DWORD PTR [rdi+0x14],0x1
  405108:	mov    r10,rsi
  40510b:	xor    r8d,r8d
  40510e:	lea    rax,[rsp+0x38]
  405113:	mov    DWORD PTR [rsp+0x18],0x0
  40511b:	mov    WORD PTR [rsp+0x1e],r8w
  405121:	mov    QWORD PTR [rsp+0x8],rax
  405126:	lea    r15,[rsp+0x3c]
  40512b:	lea    r14,[rsp+0x40]
  405130:	mov    r13,QWORD PTR [rsp+0x10]
  405135:	mov    rbp,r10
  405138:	mov    rax,QWORD PTR [r13+0x0]
  40513c:	mov    rsi,r10
  40513f:	jmp    405165 <_start@@Base+0x1e35>
  405141:	nop    DWORD PTR [rax+0x0]
  405148:	cmp    rbp,rax
  40514b:	jne    4051d8 <_start@@Base+0x1ea8>
  405151:	add    r13,0x8
  405155:	mov    rax,QWORD PTR [r13+0x0]
  405159:	mov    rbp,rsi
  40515c:	test   rax,rax
  40515f:	je     405238 <_start@@Base+0x1f08>
  405165:	mov    rcx,QWORD PTR [rsp+0x8]
  40516a:	mov    r9,r15
  40516d:	mov    r8,r14
  405170:	mov    rdx,rbx
  405173:	mov    rdi,r12
  405176:	call   rax
  405178:	mov    rsi,rax
  40517b:	cmp    rbx,rax
  40517e:	jne    405148 <_start@@Base+0x1e18>
  405180:	mov    r10,rsi
  405183:	mov    rdi,QWORD PTR [rsp+0x48]
  405188:	xor    rdi,QWORD PTR fs:0x28
  405191:	mov    rax,r10
  405194:	jne    405300 <_start@@Base+0x1fd0>
  40519a:	add    rsp,0x58
  40519e:	pop    rbx
  40519f:	pop    rbp
  4051a0:	pop    r12
  4051a2:	pop    r13
  4051a4:	pop    r14
  4051a6:	pop    r15
  4051a8:	ret    
  4051a9:	mov    ecx,0x5
  4051ae:	mov    rdx,rbx
  4051b1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4051b6:	mov    r9d,DWORD PTR [r12+0x14]
  4051bb:	mov    r10,rax
  4051be:	test   r9d,r9d
  4051c1:	je     405290 <_start@@Base+0x1f60>
  4051c7:	cmp    rbx,r10
  4051ca:	jne    40510b <_start@@Base+0x1ddb>
  4051d0:	jmp    405183 <_start@@Base+0x1e53>
  4051d2:	nop    WORD PTR [rax+rax*1+0x0]
  4051d8:	mov    edx,DWORD PTR [rsp+0x18]
  4051dc:	mov    r10,rax
  4051df:	test   edx,edx
  4051e1:	je     4051f0 <_start@@Base+0x1ec0>
  4051e3:	mov    edi,DWORD PTR [r12+0x14]
  4051e8:	test   edi,edi
  4051ea:	jne    4052e5 <_start@@Base+0x1fb5>
  4051f0:	mov    esi,DWORD PTR [rsp+0x38]
  4051f4:	mov    ecx,0x8
  4051f9:	test   esi,esi
  4051fb:	jne    405255 <_start@@Base+0x1f25>
  4051fd:	mov    rax,QWORD PTR [rsp+0x40]
  405202:	cmp    rax,0xffff
  405208:	ja     405250 <_start@@Base+0x1f20>
  40520a:	mov    WORD PTR [rsp+0x1e],ax
  40520f:	movzx  ecx,WORD PTR [rsp+0x1e]
  405214:	mov    rax,QWORD PTR [rsp+0x20]
  405219:	inc    DWORD PTR [rsp+0x18]
  40521d:	add    WORD PTR [rax],cx
  405220:	mov    ecx,DWORD PTR [rsp+0x3c]
  405224:	test   ecx,ecx
  405226:	jne    405130 <_start@@Base+0x1e00>
  40522c:	jmp    405183 <_start@@Base+0x1e53>
  405231:	nop    DWORD PTR [rax+0x0]
  405238:	mov    ecx,0x17
  40523d:	mov    rdx,rbx
  405240:	mov    rdi,r12
  405243:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405248:	mov    r10,rax
  40524b:	jmp    405183 <_start@@Base+0x1e53>
  405250:	mov    ecx,0x7
  405255:	mov    rsi,r10
  405258:	mov    rdx,rbx
  40525b:	mov    rdi,r12
  40525e:	mov    QWORD PTR [rsp+0x28],r10
  405263:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405268:	mov    r10,QWORD PTR [rsp+0x28]
  40526d:	cmp    rbx,rax
  405270:	jne    40520f <_start@@Base+0x1edf>
  405272:	mov    r10,rbx
  405275:	jmp    405183 <_start@@Base+0x1e53>
  40527a:	mov    eax,DWORD PTR [rdi+0x14]
  40527d:	test   eax,eax
  40527f:	jne    405180 <_start@@Base+0x1e50>
  405285:	mov    r10,rbx
  405288:	nop    DWORD PTR [rax+rax*1+0x0]
  405290:	mov    rax,rbx
  405293:	sub    rax,r10
  405296:	cmp    rax,0x1
  40529a:	jle    4052b0 <_start@@Base+0x1f80>
  40529c:	cmp    BYTE PTR [r10],0x20
  4052a0:	jg     4051c7 <_start@@Base+0x1e97>
  4052a6:	jne    4052b0 <_start@@Base+0x1f80>
  4052a8:	cmp    BYTE PTR [r10+0x1],0x20
  4052ad:	jg     4052dd <_start@@Base+0x1fad>
  4052af:	nop
  4052b0:	mov    rsi,r10
  4052b3:	mov    rdx,rbx
  4052b6:	mov    rdi,r12
  4052b9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4052be:	mov    r10,rax
  4052c1:	jmp    4051c7 <_start@@Base+0x1e97>
  4052c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4052d0:	lea    r10,[rsi+0x1]
  4052d4:	mov    DWORD PTR [rdi+0x14],0x0
  4052db:	jmp    405290 <_start@@Base+0x1f60>
  4052dd:	inc    r10
  4052e0:	jmp    4051c7 <_start@@Base+0x1e97>
  4052e5:	mov    rsi,r10
  4052e8:	mov    ecx,0xe
  4052ed:	mov    rdx,rbx
  4052f0:	mov    rdi,r12
  4052f3:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4052f8:	mov    r10,rax
  4052fb:	jmp    405183 <_start@@Base+0x1e53>
  405300:	call   4031c0 <__stack_chk_fail@plt>
  405305:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405310:	push   r15
  405312:	push   r14
  405314:	push   r13
  405316:	push   r12
  405318:	mov    r12,rdi
  40531b:	push   rbp
  40531c:	push   rbx
  40531d:	mov    rbx,rdx
  405320:	sub    rsp,0x58
  405324:	mov    QWORD PTR [rsp+0x18],rcx
  405329:	mov    QWORD PTR [rsp+0x20],r8
  40532e:	mov    rdi,QWORD PTR fs:0x28
  405337:	mov    QWORD PTR [rsp+0x48],rdi
  40533c:	xor    edi,edi
  40533e:	mov    QWORD PTR [r8],0x0
  405345:	cmp    rsi,rdx
  405348:	je     4054ef <_start@@Base+0x21bf>
  40534e:	movzx  eax,BYTE PTR [rsi]
  405351:	cmp    al,0x22
  405353:	je     405540 <_start@@Base+0x2210>
  405359:	cmp    al,0x2e
  40535b:	je     405408 <_start@@Base+0x20d8>
  405361:	mov    DWORD PTR [r12+0x14],0x1
  40536a:	mov    r10,rsi
  40536d:	lea    rax,[rsp+0x38]
  405372:	mov    DWORD PTR [rsp+0xc],0x0
  40537a:	mov    QWORD PTR [rsp+0x10],0x0
  405383:	mov    QWORD PTR [rsp],rax
  405387:	lea    r15,[rsp+0x3c]
  40538c:	lea    r14,[rsp+0x40]
  405391:	mov    r13,QWORD PTR [rsp+0x18]
  405396:	mov    rbp,r10
  405399:	mov    rax,QWORD PTR [r13+0x0]
  40539d:	mov    rsi,r10
  4053a0:	jmp    4053c5 <_start@@Base+0x2095>
  4053a2:	nop    WORD PTR [rax+rax*1+0x0]
  4053a8:	cmp    rbp,rax
  4053ab:	jne    405438 <_start@@Base+0x2108>
  4053b1:	add    r13,0x8
  4053b5:	mov    rax,QWORD PTR [r13+0x0]
  4053b9:	mov    rbp,rsi
  4053bc:	test   rax,rax
  4053bf:	je     4054a0 <_start@@Base+0x2170>
  4053c5:	mov    rcx,QWORD PTR [rsp]
  4053c9:	mov    r9,r15
  4053cc:	mov    r8,r14
  4053cf:	mov    rdx,rbx
  4053d2:	mov    rdi,r12
  4053d5:	call   rax
  4053d7:	mov    rsi,rax
  4053da:	cmp    rbx,rax
  4053dd:	jne    4053a8 <_start@@Base+0x2078>
  4053df:	mov    r10,rsi
  4053e2:	mov    rdi,QWORD PTR [rsp+0x48]
  4053e7:	xor    rdi,QWORD PTR fs:0x28
  4053f0:	mov    rax,r10
  4053f3:	jne    405572 <_start@@Base+0x2242>
  4053f9:	add    rsp,0x58
  4053fd:	pop    rbx
  4053fe:	pop    rbp
  4053ff:	pop    r12
  405401:	pop    r13
  405403:	pop    r14
  405405:	pop    r15
  405407:	ret    
  405408:	mov    ecx,0x5
  40540d:	mov    rdi,r12
  405410:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405415:	mov    r8d,DWORD PTR [r12+0x14]
  40541a:	mov    r10,rax
  40541d:	test   r8d,r8d
  405420:	je     405500 <_start@@Base+0x21d0>
  405426:	cmp    rbx,r10
  405429:	jne    40536d <_start@@Base+0x203d>
  40542f:	jmp    4053e2 <_start@@Base+0x20b2>
  405431:	nop    DWORD PTR [rax+0x0]
  405438:	mov    edx,DWORD PTR [rsp+0xc]
  40543c:	mov    r10,rax
  40543f:	test   edx,edx
  405441:	je     405450 <_start@@Base+0x2120>
  405443:	mov    edi,DWORD PTR [r12+0x14]
  405448:	test   edi,edi
  40544a:	jne    405557 <_start@@Base+0x2227>
  405450:	mov    rax,QWORD PTR [rsp+0x40]
  405455:	mov    esi,DWORD PTR [rsp+0x38]
  405459:	mov    rdx,rax
  40545c:	test   esi,esi
  40545e:	je     4054c0 <_start@@Base+0x2190>
  405460:	movabs rdi,0x8000000000000000
  40546a:	neg    rdx
  40546d:	mov    ecx,0x8
  405472:	cmp    rax,rdi
  405475:	ja     4054ca <_start@@Base+0x219a>
  405477:	mov    QWORD PTR [rsp+0x10],rdx
  40547c:	mov    rcx,QWORD PTR [rsp+0x10]
  405481:	mov    rax,QWORD PTR [rsp+0x20]
  405486:	inc    DWORD PTR [rsp+0xc]
  40548a:	add    QWORD PTR [rax],rcx
  40548d:	mov    ecx,DWORD PTR [rsp+0x3c]
  405491:	test   ecx,ecx
  405493:	jne    405391 <_start@@Base+0x2061>
  405499:	jmp    4053e2 <_start@@Base+0x20b2>
  40549e:	xchg   ax,ax
  4054a0:	mov    ecx,0x17
  4054a5:	mov    rdx,rbx
  4054a8:	mov    rdi,r12
  4054ab:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4054b0:	mov    r10,rax
  4054b3:	jmp    4053e2 <_start@@Base+0x20b2>
  4054b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4054c0:	test   rax,rax
  4054c3:	jns    405477 <_start@@Base+0x2147>
  4054c5:	mov    ecx,0x7
  4054ca:	mov    rsi,r10
  4054cd:	mov    rdx,rbx
  4054d0:	mov    rdi,r12
  4054d3:	mov    QWORD PTR [rsp+0x28],r10
  4054d8:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4054dd:	mov    r10,QWORD PTR [rsp+0x28]
  4054e2:	cmp    rbx,rax
  4054e5:	jne    40547c <_start@@Base+0x214c>
  4054e7:	mov    r10,rbx
  4054ea:	jmp    4053e2 <_start@@Base+0x20b2>
  4054ef:	mov    eax,DWORD PTR [r12+0x14]
  4054f4:	test   eax,eax
  4054f6:	jne    4053df <_start@@Base+0x20af>
  4054fc:	mov    r10,rbx
  4054ff:	nop
  405500:	mov    rax,rbx
  405503:	sub    rax,r10
  405506:	cmp    rax,0x1
  40550a:	jle    405520 <_start@@Base+0x21f0>
  40550c:	cmp    BYTE PTR [r10],0x20
  405510:	jg     405426 <_start@@Base+0x20f6>
  405516:	jne    405520 <_start@@Base+0x21f0>
  405518:	cmp    BYTE PTR [r10+0x1],0x20
  40551d:	jg     40554f <_start@@Base+0x221f>
  40551f:	nop
  405520:	mov    rsi,r10
  405523:	mov    rdx,rbx
  405526:	mov    rdi,r12
  405529:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40552e:	mov    r10,rax
  405531:	jmp    405426 <_start@@Base+0x20f6>
  405536:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405540:	lea    r10,[rsi+0x1]
  405544:	mov    DWORD PTR [r12+0x14],0x0
  40554d:	jmp    405500 <_start@@Base+0x21d0>
  40554f:	inc    r10
  405552:	jmp    405426 <_start@@Base+0x20f6>
  405557:	mov    rsi,r10
  40555a:	mov    ecx,0xe
  40555f:	mov    rdx,rbx
  405562:	mov    rdi,r12
  405565:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40556a:	mov    r10,rax
  40556d:	jmp    4053e2 <_start@@Base+0x20b2>
  405572:	call   4031c0 <__stack_chk_fail@plt>
  405577:	nop    WORD PTR [rax+rax*1+0x0]
  405580:	push   r15
  405582:	xor    r10d,r10d
  405585:	push   r14
  405587:	push   r13
  405589:	push   r12
  40558b:	mov    r12,rdi
  40558e:	push   rbp
  40558f:	push   rbx
  405590:	mov    rbx,rdx
  405593:	sub    rsp,0x58
  405597:	mov    QWORD PTR [rsp+0x10],rcx
  40559c:	mov    QWORD PTR [rsp+0x18],r8
  4055a1:	mov    rdx,QWORD PTR fs:0x28
  4055aa:	mov    QWORD PTR [rsp+0x48],rdx
  4055af:	xor    edx,edx
  4055b1:	mov    WORD PTR [r8],r10w
  4055b5:	cmp    rsi,rbx
  4055b8:	je     40572f <_start@@Base+0x23ff>
  4055be:	movzx  eax,BYTE PTR [rsi]
  4055c1:	cmp    al,0x22
  4055c3:	je     405780 <_start@@Base+0x2450>
  4055c9:	cmp    al,0x2e
  4055cb:	je     405679 <_start@@Base+0x2349>
  4055d1:	mov    DWORD PTR [rdi+0x14],0x1
  4055d8:	mov    r10,rsi
  4055db:	xor    r8d,r8d
  4055de:	lea    rax,[rsp+0x38]
  4055e3:	mov    DWORD PTR [rsp+0x20],0x0
  4055eb:	mov    WORD PTR [rsp+0x26],r8w
  4055f1:	mov    QWORD PTR [rsp+0x8],rax
  4055f6:	lea    r15,[rsp+0x3c]
  4055fb:	lea    r14,[rsp+0x40]
  405600:	mov    r13,QWORD PTR [rsp+0x10]
  405605:	mov    rbp,r10
  405608:	mov    rax,QWORD PTR [r13+0x0]
  40560c:	mov    rsi,r10
  40560f:	jmp    405635 <_start@@Base+0x2305>
  405611:	nop    DWORD PTR [rax+0x0]
  405618:	cmp    rbp,rax
  40561b:	jne    4056a8 <_start@@Base+0x2378>
  405621:	add    r13,0x8
  405625:	mov    rax,QWORD PTR [r13+0x0]
  405629:	mov    rbp,rsi
  40562c:	test   rax,rax
  40562f:	je     405708 <_start@@Base+0x23d8>
  405635:	mov    rcx,QWORD PTR [rsp+0x8]
  40563a:	mov    r9,r15
  40563d:	mov    r8,r14
  405640:	mov    rdx,rbx
  405643:	mov    rdi,r12
  405646:	call   rax
  405648:	mov    rsi,rax
  40564b:	cmp    rbx,rax
  40564e:	jne    405618 <_start@@Base+0x22e8>
  405650:	mov    r10,rsi
  405653:	mov    rdi,QWORD PTR [rsp+0x48]
  405658:	xor    rdi,QWORD PTR fs:0x28
  405661:	mov    rax,r10
  405664:	jne    4057e4 <_start@@Base+0x24b4>
  40566a:	add    rsp,0x58
  40566e:	pop    rbx
  40566f:	pop    rbp
  405670:	pop    r12
  405672:	pop    r13
  405674:	pop    r14
  405676:	pop    r15
  405678:	ret    
  405679:	mov    ecx,0x5
  40567e:	mov    rdx,rbx
  405681:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405686:	mov    r9d,DWORD PTR [r12+0x14]
  40568b:	mov    r10,rax
  40568e:	test   r9d,r9d
  405691:	je     405740 <_start@@Base+0x2410>
  405697:	cmp    rbx,r10
  40569a:	jne    4055db <_start@@Base+0x22ab>
  4056a0:	jmp    405653 <_start@@Base+0x2323>
  4056a2:	nop    WORD PTR [rax+rax*1+0x0]
  4056a8:	mov    edx,DWORD PTR [rsp+0x20]
  4056ac:	mov    r10,rax
  4056af:	test   edx,edx
  4056b1:	je     4056c0 <_start@@Base+0x2390>
  4056b3:	mov    edi,DWORD PTR [r12+0x14]
  4056b8:	test   edi,edi
  4056ba:	jne    4057c9 <_start@@Base+0x2499>
  4056c0:	mov    esi,DWORD PTR [rsp+0x38]
  4056c4:	mov    rax,QWORD PTR [rsp+0x40]
  4056c9:	test   esi,esi
  4056cb:	je     405720 <_start@@Base+0x23f0>
  4056cd:	mov    ecx,0x8
  4056d2:	cmp    rax,0x8000
  4056d8:	ja     405792 <_start@@Base+0x2462>
  4056de:	neg    eax
  4056e0:	mov    WORD PTR [rsp+0x26],ax
  4056e5:	mov    rcx,QWORD PTR [rsp+0x18]
  4056ea:	inc    DWORD PTR [rsp+0x20]
  4056ee:	add    WORD PTR [rcx],ax
  4056f1:	mov    ecx,DWORD PTR [rsp+0x3c]
  4056f5:	test   ecx,ecx
  4056f7:	jne    405600 <_start@@Base+0x22d0>
  4056fd:	jmp    405653 <_start@@Base+0x2323>
  405702:	nop    WORD PTR [rax+rax*1+0x0]
  405708:	mov    ecx,0x17
  40570d:	mov    rdx,rbx
  405710:	mov    rdi,r12
  405713:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405718:	mov    r10,rax
  40571b:	jmp    405653 <_start@@Base+0x2323>
  405720:	cmp    rax,0x7fff
  405726:	ja     40578d <_start@@Base+0x245d>
  405728:	mov    WORD PTR [rsp+0x26],ax
  40572d:	jmp    4056e5 <_start@@Base+0x23b5>
  40572f:	mov    eax,DWORD PTR [rdi+0x14]
  405732:	test   eax,eax
  405734:	jne    405650 <_start@@Base+0x2320>
  40573a:	mov    r10,rbx
  40573d:	nop    DWORD PTR [rax]
  405740:	mov    rax,rbx
  405743:	sub    rax,r10
  405746:	cmp    rax,0x1
  40574a:	jle    405760 <_start@@Base+0x2430>
  40574c:	cmp    BYTE PTR [r10],0x20
  405750:	jg     405697 <_start@@Base+0x2367>
  405756:	jne    405760 <_start@@Base+0x2430>
  405758:	cmp    BYTE PTR [r10+0x1],0x20
  40575d:	jg     4057b9 <_start@@Base+0x2489>
  40575f:	nop
  405760:	mov    rsi,r10
  405763:	mov    rdx,rbx
  405766:	mov    rdi,r12
  405769:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40576e:	mov    r10,rax
  405771:	jmp    405697 <_start@@Base+0x2367>
  405776:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405780:	lea    r10,[rsi+0x1]
  405784:	mov    DWORD PTR [rdi+0x14],0x0
  40578b:	jmp    405740 <_start@@Base+0x2410>
  40578d:	mov    ecx,0x7
  405792:	mov    rsi,r10
  405795:	mov    rdx,rbx
  405798:	mov    rdi,r12
  40579b:	mov    QWORD PTR [rsp+0x28],r10
  4057a0:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4057a5:	mov    r10,QWORD PTR [rsp+0x28]
  4057aa:	cmp    rbx,rax
  4057ad:	je     4057c1 <_start@@Base+0x2491>
  4057af:	movzx  eax,WORD PTR [rsp+0x26]
  4057b4:	jmp    4056e5 <_start@@Base+0x23b5>
  4057b9:	inc    r10
  4057bc:	jmp    405697 <_start@@Base+0x2367>
  4057c1:	mov    r10,rbx
  4057c4:	jmp    405653 <_start@@Base+0x2323>
  4057c9:	mov    rsi,r10
  4057cc:	mov    ecx,0xe
  4057d1:	mov    rdx,rbx
  4057d4:	mov    rdi,r12
  4057d7:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4057dc:	mov    r10,rax
  4057df:	jmp    405653 <_start@@Base+0x2323>
  4057e4:	call   4031c0 <__stack_chk_fail@plt>
  4057e9:	nop    DWORD PTR [rax+0x0]
  4057f0:	push   r15
  4057f2:	push   r14
  4057f4:	push   r13
  4057f6:	push   r12
  4057f8:	mov    r12,rdi
  4057fb:	push   rbp
  4057fc:	push   rbx
  4057fd:	mov    rbx,rdx
  405800:	sub    rsp,0x58
  405804:	mov    QWORD PTR [rsp+0x18],rcx
  405809:	mov    QWORD PTR [rsp+0x20],r8
  40580e:	mov    rdi,QWORD PTR fs:0x28
  405817:	mov    QWORD PTR [rsp+0x48],rdi
  40581c:	xor    edi,edi
  40581e:	mov    DWORD PTR [r8],0x0
  405825:	cmp    rsi,rdx
  405828:	je     4059ae <_start@@Base+0x267e>
  40582e:	movzx  eax,BYTE PTR [rsi]
  405831:	cmp    al,0x22
  405833:	je     405a00 <_start@@Base+0x26d0>
  405839:	cmp    al,0x2e
  40583b:	je     4058e9 <_start@@Base+0x25b9>
  405841:	mov    DWORD PTR [r12+0x14],0x1
  40584a:	mov    r10,rsi
  40584d:	lea    rax,[rsp+0x38]
  405852:	mov    DWORD PTR [rsp+0x10],0x0
  40585a:	mov    DWORD PTR [rsp+0x14],0x0
  405862:	mov    QWORD PTR [rsp+0x8],rax
  405867:	lea    r15,[rsp+0x3c]
  40586c:	lea    r14,[rsp+0x40]
  405871:	mov    r13,QWORD PTR [rsp+0x18]
  405876:	mov    rbp,r10
  405879:	mov    rax,QWORD PTR [r13+0x0]
  40587d:	mov    rsi,r10
  405880:	jmp    4058a5 <_start@@Base+0x2575>
  405882:	nop    WORD PTR [rax+rax*1+0x0]
  405888:	cmp    rbp,rax
  40588b:	jne    405918 <_start@@Base+0x25e8>
  405891:	add    r13,0x8
  405895:	mov    rax,QWORD PTR [r13+0x0]
  405899:	mov    rbp,rsi
  40589c:	test   rax,rax
  40589f:	je     405980 <_start@@Base+0x2650>
  4058a5:	mov    rcx,QWORD PTR [rsp+0x8]
  4058aa:	mov    r9,r15
  4058ad:	mov    r8,r14
  4058b0:	mov    rdx,rbx
  4058b3:	mov    rdi,r12
  4058b6:	call   rax
  4058b8:	mov    rsi,rax
  4058bb:	cmp    rbx,rax
  4058be:	jne    405888 <_start@@Base+0x2558>
  4058c0:	mov    r10,rsi
  4058c3:	mov    rdi,QWORD PTR [rsp+0x48]
  4058c8:	xor    rdi,QWORD PTR fs:0x28
  4058d1:	mov    rax,r10
  4058d4:	jne    405a60 <_start@@Base+0x2730>
  4058da:	add    rsp,0x58
  4058de:	pop    rbx
  4058df:	pop    rbp
  4058e0:	pop    r12
  4058e2:	pop    r13
  4058e4:	pop    r14
  4058e6:	pop    r15
  4058e8:	ret    
  4058e9:	mov    ecx,0x5
  4058ee:	mov    rdi,r12
  4058f1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4058f6:	mov    r8d,DWORD PTR [r12+0x14]
  4058fb:	mov    r10,rax
  4058fe:	test   r8d,r8d
  405901:	je     4059c0 <_start@@Base+0x2690>
  405907:	cmp    rbx,r10
  40590a:	jne    40584d <_start@@Base+0x251d>
  405910:	jmp    4058c3 <_start@@Base+0x2593>
  405912:	nop    WORD PTR [rax+rax*1+0x0]
  405918:	mov    edx,DWORD PTR [rsp+0x10]
  40591c:	mov    r10,rax
  40591f:	test   edx,edx
  405921:	je     405930 <_start@@Base+0x2600>
  405923:	mov    edi,DWORD PTR [r12+0x14]
  405928:	test   edi,edi
  40592a:	jne    405a45 <_start@@Base+0x2715>
  405930:	mov    esi,DWORD PTR [rsp+0x38]
  405934:	mov    rax,QWORD PTR [rsp+0x40]
  405939:	test   esi,esi
  40593b:	je     4059a0 <_start@@Base+0x2670>
  40593d:	mov    edx,0x80000000
  405942:	mov    ecx,0x8
  405947:	cmp    rax,rdx
  40594a:	ja     405a14 <_start@@Base+0x26e4>
  405950:	neg    eax
  405952:	mov    DWORD PTR [rsp+0x14],eax
  405956:	mov    ecx,DWORD PTR [rsp+0x14]
  40595a:	mov    rax,QWORD PTR [rsp+0x20]
  40595f:	inc    DWORD PTR [rsp+0x10]
  405963:	add    DWORD PTR [rax],ecx
  405965:	mov    ecx,DWORD PTR [rsp+0x3c]
  405969:	test   ecx,ecx
  40596b:	jne    405871 <_start@@Base+0x2541>
  405971:	jmp    4058c3 <_start@@Base+0x2593>
  405976:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405980:	mov    ecx,0x17
  405985:	mov    rdx,rbx
  405988:	mov    rdi,r12
  40598b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405990:	mov    r10,rax
  405993:	jmp    4058c3 <_start@@Base+0x2593>
  405998:	nop    DWORD PTR [rax+rax*1+0x0]
  4059a0:	cmp    rax,0x7fffffff
  4059a6:	ja     405a0f <_start@@Base+0x26df>
  4059a8:	mov    DWORD PTR [rsp+0x14],eax
  4059ac:	jmp    405956 <_start@@Base+0x2626>
  4059ae:	mov    eax,DWORD PTR [r12+0x14]
  4059b3:	test   eax,eax
  4059b5:	jne    4058c0 <_start@@Base+0x2590>
  4059bb:	mov    r10,rbx
  4059be:	xchg   ax,ax
  4059c0:	mov    rax,rbx
  4059c3:	sub    rax,r10
  4059c6:	cmp    rax,0x1
  4059ca:	jle    4059e0 <_start@@Base+0x26b0>
  4059cc:	cmp    BYTE PTR [r10],0x20
  4059d0:	jg     405907 <_start@@Base+0x25d7>
  4059d6:	jne    4059e0 <_start@@Base+0x26b0>
  4059d8:	cmp    BYTE PTR [r10+0x1],0x20
  4059dd:	jg     405a3d <_start@@Base+0x270d>
  4059df:	nop
  4059e0:	mov    rsi,r10
  4059e3:	mov    rdx,rbx
  4059e6:	mov    rdi,r12
  4059e9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4059ee:	mov    r10,rax
  4059f1:	jmp    405907 <_start@@Base+0x25d7>
  4059f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a00:	lea    r10,[rsi+0x1]
  405a04:	mov    DWORD PTR [r12+0x14],0x0
  405a0d:	jmp    4059c0 <_start@@Base+0x2690>
  405a0f:	mov    ecx,0x7
  405a14:	mov    rsi,r10
  405a17:	mov    rdx,rbx
  405a1a:	mov    rdi,r12
  405a1d:	mov    QWORD PTR [rsp+0x28],r10
  405a22:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405a27:	mov    r10,QWORD PTR [rsp+0x28]
  405a2c:	cmp    rbx,rax
  405a2f:	jne    405956 <_start@@Base+0x2626>
  405a35:	mov    r10,rbx
  405a38:	jmp    4058c3 <_start@@Base+0x2593>
  405a3d:	inc    r10
  405a40:	jmp    405907 <_start@@Base+0x25d7>
  405a45:	mov    rsi,r10
  405a48:	mov    ecx,0xe
  405a4d:	mov    rdx,rbx
  405a50:	mov    rdi,r12
  405a53:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405a58:	mov    r10,rax
  405a5b:	jmp    4058c3 <_start@@Base+0x2593>
  405a60:	call   4031c0 <__stack_chk_fail@plt>
  405a65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405a70:	push   r15
  405a72:	push   r14
  405a74:	push   r13
  405a76:	push   r12
  405a78:	mov    r12,rdi
  405a7b:	push   rbp
  405a7c:	push   rbx
  405a7d:	mov    rbx,rdx
  405a80:	sub    rsp,0x58
  405a84:	mov    QWORD PTR [rsp+0x10],rcx
  405a89:	mov    QWORD PTR [rsp+0x18],r8
  405a8e:	mov    rdx,QWORD PTR fs:0x28
  405a97:	mov    QWORD PTR [rsp+0x48],rdx
  405a9c:	xor    edx,edx
  405a9e:	mov    BYTE PTR [r8],0x0
  405aa2:	cmp    rsi,rbx
  405aa5:	je     405c1c <_start@@Base+0x28ec>
  405aab:	movzx  eax,BYTE PTR [rsi]
  405aae:	cmp    al,0x22
  405ab0:	je     405c70 <_start@@Base+0x2940>
  405ab6:	cmp    al,0x2e
  405ab8:	je     405b61 <_start@@Base+0x2831>
  405abe:	mov    DWORD PTR [rdi+0x14],0x1
  405ac5:	mov    r10,rsi
  405ac8:	lea    rax,[rsp+0x38]
  405acd:	mov    DWORD PTR [rsp+0x20],0x0
  405ad5:	mov    BYTE PTR [rsp+0x27],0x0
  405ada:	mov    QWORD PTR [rsp+0x8],rax
  405adf:	lea    r15,[rsp+0x3c]
  405ae4:	lea    r14,[rsp+0x40]
  405ae9:	mov    r13,QWORD PTR [rsp+0x10]
  405aee:	mov    rbp,r10
  405af1:	mov    rax,QWORD PTR [r13+0x0]
  405af5:	mov    rsi,r10
  405af8:	jmp    405b1d <_start@@Base+0x27ed>
  405afa:	nop    WORD PTR [rax+rax*1+0x0]
  405b00:	cmp    rbp,rax
  405b03:	jne    405b90 <_start@@Base+0x2860>
  405b09:	add    r13,0x8
  405b0d:	mov    rax,QWORD PTR [r13+0x0]
  405b11:	mov    rbp,rsi
  405b14:	test   rax,rax
  405b17:	je     405bf0 <_start@@Base+0x28c0>
  405b1d:	mov    rcx,QWORD PTR [rsp+0x8]
  405b22:	mov    r9,r15
  405b25:	mov    r8,r14
  405b28:	mov    rdx,rbx
  405b2b:	mov    rdi,r12
  405b2e:	call   rax
  405b30:	mov    rsi,rax
  405b33:	cmp    rbx,rax
  405b36:	jne    405b00 <_start@@Base+0x27d0>
  405b38:	mov    r10,rsi
  405b3b:	mov    rdi,QWORD PTR [rsp+0x48]
  405b40:	xor    rdi,QWORD PTR fs:0x28
  405b49:	mov    rax,r10
  405b4c:	jne    405cd4 <_start@@Base+0x29a4>
  405b52:	add    rsp,0x58
  405b56:	pop    rbx
  405b57:	pop    rbp
  405b58:	pop    r12
  405b5a:	pop    r13
  405b5c:	pop    r14
  405b5e:	pop    r15
  405b60:	ret    
  405b61:	mov    ecx,0x5
  405b66:	mov    rdx,rbx
  405b69:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405b6e:	mov    r8d,DWORD PTR [r12+0x14]
  405b73:	mov    r10,rax
  405b76:	test   r8d,r8d
  405b79:	je     405c30 <_start@@Base+0x2900>
  405b7f:	cmp    rbx,r10
  405b82:	jne    405ac8 <_start@@Base+0x2798>
  405b88:	jmp    405b3b <_start@@Base+0x280b>
  405b8a:	nop    WORD PTR [rax+rax*1+0x0]
  405b90:	mov    edx,DWORD PTR [rsp+0x20]
  405b94:	mov    r10,rax
  405b97:	test   edx,edx
  405b99:	je     405ba8 <_start@@Base+0x2878>
  405b9b:	mov    edi,DWORD PTR [r12+0x14]
  405ba0:	test   edi,edi
  405ba2:	jne    405cb9 <_start@@Base+0x2989>
  405ba8:	mov    esi,DWORD PTR [rsp+0x38]
  405bac:	mov    rax,QWORD PTR [rsp+0x40]
  405bb1:	test   esi,esi
  405bb3:	je     405c10 <_start@@Base+0x28e0>
  405bb5:	mov    ecx,0x8
  405bba:	cmp    rax,0x80
  405bc0:	ja     405c82 <_start@@Base+0x2952>
  405bc6:	neg    eax
  405bc8:	mov    BYTE PTR [rsp+0x27],al
  405bcc:	mov    rcx,QWORD PTR [rsp+0x18]
  405bd1:	inc    DWORD PTR [rsp+0x20]
  405bd5:	add    BYTE PTR [rcx],al
  405bd7:	mov    ecx,DWORD PTR [rsp+0x3c]
  405bdb:	test   ecx,ecx
  405bdd:	jne    405ae9 <_start@@Base+0x27b9>
  405be3:	jmp    405b3b <_start@@Base+0x280b>
  405be8:	nop    DWORD PTR [rax+rax*1+0x0]
  405bf0:	mov    ecx,0x17
  405bf5:	mov    rdx,rbx
  405bf8:	mov    rdi,r12
  405bfb:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405c00:	mov    r10,rax
  405c03:	jmp    405b3b <_start@@Base+0x280b>
  405c08:	nop    DWORD PTR [rax+rax*1+0x0]
  405c10:	cmp    rax,0x7f
  405c14:	ja     405c7d <_start@@Base+0x294d>
  405c16:	mov    BYTE PTR [rsp+0x27],al
  405c1a:	jmp    405bcc <_start@@Base+0x289c>
  405c1c:	mov    eax,DWORD PTR [rdi+0x14]
  405c1f:	test   eax,eax
  405c21:	jne    405b38 <_start@@Base+0x2808>
  405c27:	mov    r10,rbx
  405c2a:	nop    WORD PTR [rax+rax*1+0x0]
  405c30:	mov    rax,rbx
  405c33:	sub    rax,r10
  405c36:	cmp    rax,0x1
  405c3a:	jle    405c50 <_start@@Base+0x2920>
  405c3c:	cmp    BYTE PTR [r10],0x20
  405c40:	jg     405b7f <_start@@Base+0x284f>
  405c46:	jne    405c50 <_start@@Base+0x2920>
  405c48:	cmp    BYTE PTR [r10+0x1],0x20
  405c4d:	jg     405ca9 <_start@@Base+0x2979>
  405c4f:	nop
  405c50:	mov    rsi,r10
  405c53:	mov    rdx,rbx
  405c56:	mov    rdi,r12
  405c59:	call   416950 <flatcc_json_parser_space_ext@@Base>
  405c5e:	mov    r10,rax
  405c61:	jmp    405b7f <_start@@Base+0x284f>
  405c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c70:	lea    r10,[rsi+0x1]
  405c74:	mov    DWORD PTR [rdi+0x14],0x0
  405c7b:	jmp    405c30 <_start@@Base+0x2900>
  405c7d:	mov    ecx,0x7
  405c82:	mov    rsi,r10
  405c85:	mov    rdx,rbx
  405c88:	mov    rdi,r12
  405c8b:	mov    QWORD PTR [rsp+0x28],r10
  405c90:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405c95:	mov    r10,QWORD PTR [rsp+0x28]
  405c9a:	cmp    rbx,rax
  405c9d:	je     405cb1 <_start@@Base+0x2981>
  405c9f:	movzx  eax,BYTE PTR [rsp+0x27]
  405ca4:	jmp    405bcc <_start@@Base+0x289c>
  405ca9:	inc    r10
  405cac:	jmp    405b7f <_start@@Base+0x284f>
  405cb1:	mov    r10,rbx
  405cb4:	jmp    405b3b <_start@@Base+0x280b>
  405cb9:	mov    rsi,r10
  405cbc:	mov    ecx,0xe
  405cc1:	mov    rdx,rbx
  405cc4:	mov    rdi,r12
  405cc7:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405ccc:	mov    r10,rax
  405ccf:	jmp    405b3b <_start@@Base+0x280b>
  405cd4:	call   4031c0 <__stack_chk_fail@plt>
  405cd9:	nop    DWORD PTR [rax+0x0]
  405ce0:	push   r15
  405ce2:	push   r14
  405ce4:	push   r13
  405ce6:	push   r12
  405ce8:	mov    r12,rdi
  405ceb:	push   rbp
  405cec:	push   rbx
  405ced:	mov    rbx,rdx
  405cf0:	sub    rsp,0x58
  405cf4:	mov    QWORD PTR [rsp+0x10],rcx
  405cf9:	mov    QWORD PTR [rsp+0x20],r8
  405cfe:	mov    rdx,QWORD PTR fs:0x28
  405d07:	mov    QWORD PTR [rsp+0x48],rdx
  405d0c:	xor    edx,edx
  405d0e:	mov    BYTE PTR [r8],0x0
  405d12:	cmp    rsi,rbx
  405d15:	je     405eaa <_start@@Base+0x2b7a>
  405d1b:	movzx  eax,BYTE PTR [rsi]
  405d1e:	cmp    al,0x22
  405d20:	je     405f00 <_start@@Base+0x2bd0>
  405d26:	cmp    al,0x2e
  405d28:	je     405dd1 <_start@@Base+0x2aa1>
  405d2e:	mov    DWORD PTR [rdi+0x14],0x1
  405d35:	mov    r10,rsi
  405d38:	lea    rax,[rsp+0x38]
  405d3d:	mov    DWORD PTR [rsp+0x18],0x0
  405d45:	mov    BYTE PTR [rsp+0x1f],0x0
  405d4a:	mov    QWORD PTR [rsp+0x8],rax
  405d4f:	lea    r15,[rsp+0x3c]
  405d54:	lea    r14,[rsp+0x40]
  405d59:	mov    r13,QWORD PTR [rsp+0x10]
  405d5e:	mov    rbp,r10
  405d61:	mov    rax,QWORD PTR [r13+0x0]
  405d65:	mov    rsi,r10
  405d68:	jmp    405d8d <_start@@Base+0x2a5d>
  405d6a:	nop    WORD PTR [rax+rax*1+0x0]
  405d70:	cmp    rbp,rax
  405d73:	jne    405e00 <_start@@Base+0x2ad0>
  405d79:	add    r13,0x8
  405d7d:	mov    rax,QWORD PTR [r13+0x0]
  405d81:	mov    rbp,rsi
  405d84:	test   rax,rax
  405d87:	je     405e60 <_start@@Base+0x2b30>
  405d8d:	mov    rcx,QWORD PTR [rsp+0x8]
  405d92:	mov    r9,r15
  405d95:	mov    r8,r14
  405d98:	mov    rdx,rbx
  405d9b:	mov    rdi,r12
  405d9e:	call   rax
  405da0:	mov    rsi,rax
  405da3:	cmp    rbx,rax
  405da6:	jne    405d70 <_start@@Base+0x2a40>
  405da8:	mov    r10,rsi
  405dab:	mov    rdi,QWORD PTR [rsp+0x48]
  405db0:	xor    rdi,QWORD PTR fs:0x28
  405db9:	mov    rax,r10
  405dbc:	jne    405f30 <_start@@Base+0x2c00>
  405dc2:	add    rsp,0x58
  405dc6:	pop    rbx
  405dc7:	pop    rbp
  405dc8:	pop    r12
  405dca:	pop    r13
  405dcc:	pop    r14
  405dce:	pop    r15
  405dd0:	ret    
  405dd1:	mov    ecx,0x5
  405dd6:	mov    rdx,rbx
  405dd9:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405dde:	mov    r8d,DWORD PTR [r12+0x14]
  405de3:	mov    r10,rax
  405de6:	test   r8d,r8d
  405de9:	je     405ec0 <_start@@Base+0x2b90>
  405def:	cmp    rbx,r10
  405df2:	jne    405d38 <_start@@Base+0x2a08>
  405df8:	jmp    405dab <_start@@Base+0x2a7b>
  405dfa:	nop    WORD PTR [rax+rax*1+0x0]
  405e00:	mov    edx,DWORD PTR [rsp+0x18]
  405e04:	mov    r10,rax
  405e07:	test   edx,edx
  405e09:	je     405e18 <_start@@Base+0x2ae8>
  405e0b:	mov    edi,DWORD PTR [r12+0x14]
  405e10:	test   edi,edi
  405e12:	jne    405f15 <_start@@Base+0x2be5>
  405e18:	mov    esi,DWORD PTR [rsp+0x38]
  405e1c:	mov    ecx,0x8
  405e21:	test   esi,esi
  405e23:	jne    405e85 <_start@@Base+0x2b55>
  405e25:	mov    rax,QWORD PTR [rsp+0x40]
  405e2a:	cmp    rax,0xff
  405e30:	ja     405e80 <_start@@Base+0x2b50>
  405e32:	mov    BYTE PTR [rsp+0x1f],al
  405e36:	movzx  ecx,BYTE PTR [rsp+0x1f]
  405e3b:	mov    rax,QWORD PTR [rsp+0x20]
  405e40:	inc    DWORD PTR [rsp+0x18]
  405e44:	add    BYTE PTR [rax],cl
  405e46:	mov    ecx,DWORD PTR [rsp+0x3c]
  405e4a:	test   ecx,ecx
  405e4c:	jne    405d59 <_start@@Base+0x2a29>
  405e52:	jmp    405dab <_start@@Base+0x2a7b>
  405e57:	nop    WORD PTR [rax+rax*1+0x0]
  405e60:	mov    ecx,0x17
  405e65:	mov    rdx,rbx
  405e68:	mov    rdi,r12
  405e6b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405e70:	mov    r10,rax
  405e73:	jmp    405dab <_start@@Base+0x2a7b>
  405e78:	nop    DWORD PTR [rax+rax*1+0x0]
  405e80:	mov    ecx,0x7
  405e85:	mov    rsi,r10
  405e88:	mov    rdx,rbx
  405e8b:	mov    rdi,r12
  405e8e:	mov    QWORD PTR [rsp+0x28],r10
  405e93:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405e98:	mov    r10,QWORD PTR [rsp+0x28]
  405e9d:	cmp    rbx,rax
  405ea0:	jne    405e36 <_start@@Base+0x2b06>
  405ea2:	mov    r10,rbx
  405ea5:	jmp    405dab <_start@@Base+0x2a7b>
  405eaa:	mov    eax,DWORD PTR [rdi+0x14]
  405ead:	test   eax,eax
  405eaf:	jne    405da8 <_start@@Base+0x2a78>
  405eb5:	mov    r10,rbx
  405eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  405ec0:	mov    rax,rbx
  405ec3:	sub    rax,r10
  405ec6:	cmp    rax,0x1
  405eca:	jle    405ee0 <_start@@Base+0x2bb0>
  405ecc:	cmp    BYTE PTR [r10],0x20
  405ed0:	jg     405def <_start@@Base+0x2abf>
  405ed6:	jne    405ee0 <_start@@Base+0x2bb0>
  405ed8:	cmp    BYTE PTR [r10+0x1],0x20
  405edd:	jg     405f0d <_start@@Base+0x2bdd>
  405edf:	nop
  405ee0:	mov    rsi,r10
  405ee3:	mov    rdx,rbx
  405ee6:	mov    rdi,r12
  405ee9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  405eee:	mov    r10,rax
  405ef1:	jmp    405def <_start@@Base+0x2abf>
  405ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405f00:	lea    r10,[rsi+0x1]
  405f04:	mov    DWORD PTR [rdi+0x14],0x0
  405f0b:	jmp    405ec0 <_start@@Base+0x2b90>
  405f0d:	inc    r10
  405f10:	jmp    405def <_start@@Base+0x2abf>
  405f15:	mov    rsi,r10
  405f18:	mov    ecx,0xe
  405f1d:	mov    rdx,rbx
  405f20:	mov    rdi,r12
  405f23:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405f28:	mov    r10,rax
  405f2b:	jmp    405dab <_start@@Base+0x2a7b>
  405f30:	call   4031c0 <__stack_chk_fail@plt>
  405f35:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405f40:	push   r15
  405f42:	push   r14
  405f44:	mov    r14,rsi
  405f47:	mov    esi,0x4
  405f4c:	push   r13
  405f4e:	mov    r13,rcx
  405f51:	push   r12
  405f53:	push   rbp
  405f54:	mov    rbp,rdi
  405f57:	push   rbx
  405f58:	mov    rbx,rdx
  405f5b:	mov    edx,0x4
  405f60:	sub    rsp,0x28
  405f64:	mov    rax,QWORD PTR fs:0x28
  405f6d:	mov    QWORD PTR [rsp+0x18],rax
  405f72:	xor    eax,eax
  405f74:	mov    DWORD PTR [rcx],0x0
  405f7a:	mov    rdi,QWORD PTR [rdi]
  405f7d:	call   412650 <flatcc_builder_start_struct@@Base>
  405f82:	test   rax,rax
  405f85:	je     405fd0 <_start@@Base+0x2ca0>
  405f87:	cmp    r14,rbx
  405f8a:	je     405f92 <_start@@Base+0x2c62>
  405f8c:	cmp    BYTE PTR [r14],0x7b
  405f90:	je     406010 <_start@@Base+0x2ce0>
  405f92:	mov    ecx,0x15
  405f97:	nop    WORD PTR [rax+rax*1+0x0]
  405fa0:	mov    rdx,rbx
  405fa3:	mov    rsi,r14
  405fa6:	mov    rdi,rbp
  405fa9:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405fae:	mov    r12,rax
  405fb1:	cmp    rbx,r12
  405fb4:	je     4065e3 <_start@@Base+0x32b3>
  405fba:	mov    rdi,QWORD PTR [rbp+0x0]
  405fbe:	mov    r14,r12
  405fc1:	call   412710 <flatcc_builder_end_struct@@Base>
  405fc6:	mov    DWORD PTR [r13+0x0],eax
  405fca:	test   eax,eax
  405fcc:	jne    405fe6 <_start@@Base+0x2cb6>
  405fce:	xchg   ax,ax
  405fd0:	mov    ecx,0x21
  405fd5:	mov    rdx,rbx
  405fd8:	mov    rsi,r14
  405fdb:	mov    rdi,rbp
  405fde:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  405fe3:	mov    r12,rax
  405fe6:	mov    rdi,QWORD PTR [rsp+0x18]
  405feb:	xor    rdi,QWORD PTR fs:0x28
  405ff4:	mov    rax,r12
  405ff7:	jne    4065de <_start@@Base+0x32ae>
  405ffd:	add    rsp,0x28
  406001:	pop    rbx
  406002:	pop    rbp
  406003:	pop    r12
  406005:	pop    r13
  406007:	pop    r14
  406009:	pop    r15
  40600b:	ret    
  40600c:	nop    DWORD PTR [rax+0x0]
  406010:	mov    r12,rax
  406013:	lea    rsi,[r14+0x1]
  406017:	mov    rax,rbx
  40601a:	sub    rax,rsi
  40601d:	cmp    rax,0x1
  406021:	jle    406030 <_start@@Base+0x2d00>
  406023:	cmp    BYTE PTR [r14+0x1],0x20
  406028:	jg     40603e <_start@@Base+0x2d0e>
  40602a:	je     406590 <_start@@Base+0x3260>
  406030:	mov    rdx,rbx
  406033:	mov    rdi,rbp
  406036:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40603b:	mov    rsi,rax
  40603e:	cmp    rbx,rsi
  406041:	je     406050 <_start@@Base+0x2d20>
  406043:	cmp    BYTE PTR [rsi],0x7d
  406046:	je     4065c8 <_start@@Base+0x3298>
  40604c:	nop    DWORD PTR [rax+0x0]
  406050:	cmp    rbx,rsi
  406053:	je     40606f <_start@@Base+0x2d3f>
  406055:	movzx  eax,BYTE PTR [rsi]
  406058:	cmp    al,0x22
  40605a:	je     406320 <_start@@Base+0x2ff0>
  406060:	cmp    al,0x2e
  406062:	je     406440 <_start@@Base+0x3110>
  406068:	mov    DWORD PTR [rbp+0x14],0x1
  40606f:	mov    rax,rbx
  406072:	sub    rax,rsi
  406075:	cmp    rax,0x7
  406079:	jbe    40633a <_start@@Base+0x300a>
  40607f:	movbe  rax,QWORD PTR [rsi]
  406084:	movabs rdi,0x626f6f6b735f7265
  40608e:	cmp    rax,rdi
  406091:	jne    40633a <_start@@Base+0x300a>
  406097:	lea    r14,[rsi+0x8]
  40609b:	mov    rdi,rbx
  40609e:	sub    rdi,r14
  4060a1:	cmp    rdi,0x7
  4060a5:	ja     406390 <_start@@Base+0x3060>
  4060ab:	lea    rdx,[rip+0x13f82]        # 41a034 <_IO_stdin_used@@Base+0x34>
  4060b2:	movsxd rax,DWORD PTR [rdx+rdi*4]
  4060b6:	add    rax,rdx
  4060b9:	notrack jmp rax
  4060bc:	nop    DWORD PTR [rax+0x0]
  4060c0:	movsx  rcx,BYTE PTR [rsi+0xe]
  4060c5:	shl    rcx,0x8
  4060c9:	movsx  rdx,BYTE PTR [rsi+0xd]
  4060ce:	mov    rax,rdx
  4060d1:	shl    rax,0x10
  4060d5:	or     rcx,rax
  4060d8:	movsx  rdx,BYTE PTR [rsi+0xc]
  4060dd:	mov    rax,rdx
  4060e0:	shl    rax,0x18
  4060e4:	or     rax,rcx
  4060e7:	movsx  rdx,BYTE PTR [rsi+0xb]
  4060ec:	mov    rcx,rdx
  4060ef:	shl    rcx,0x20
  4060f3:	or     rax,rcx
  4060f6:	movsx  rdx,BYTE PTR [rsi+0xa]
  4060fb:	mov    rcx,rdx
  4060fe:	shl    rcx,0x28
  406102:	or     rcx,rax
  406105:	movsx  rdx,BYTE PTR [rsi+0x9]
  40610a:	mov    rax,rdx
  40610d:	shl    rax,0x30
  406111:	or     rcx,rax
  406114:	movsx  rdx,BYTE PTR [rsi+0x8]
  406119:	mov    rax,rdx
  40611c:	shl    rax,0x38
  406120:	or     rax,rcx
  406123:	movabs rcx,0xffff000000000000
  40612d:	and    rax,rcx
  406130:	movabs rcx,0x6164000000000000
  40613a:	cmp    rax,rcx
  40613d:	jne    406300 <_start@@Base+0x2fd0>
  406143:	cmp    rdi,0x2
  406147:	jle    406300 <_start@@Base+0x2fd0>
  40614d:	mov    edi,DWORD PTR [rbp+0x14]
  406150:	movzx  eax,BYTE PTR [rsi+0xa]
  406154:	test   edi,edi
  406156:	je     406428 <_start@@Base+0x30f8>
  40615c:	cmp    al,0x20
  40615e:	jle    406168 <_start@@Base+0x2e38>
  406160:	cmp    al,0x3a
  406162:	jne    406300 <_start@@Base+0x2fd0>
  406168:	mov    DWORD PTR [rbp+0x14],0x0
  40616f:	add    rsi,0xa
  406173:	mov    rax,rbx
  406176:	sub    rax,rsi
  406179:	cmp    rax,0x1
  40617d:	jle    40618a <_start@@Base+0x2e5a>
  40617f:	cmp    BYTE PTR [rsi],0x20
  406182:	jg     406198 <_start@@Base+0x2e68>
  406184:	je     406530 <_start@@Base+0x3200>
  40618a:	mov    rdx,rbx
  40618d:	mov    rdi,rbp
  406190:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406195:	mov    rsi,rax
  406198:	cmp    rbx,rsi
  40619b:	je     4061a6 <_start@@Base+0x2e76>
  40619d:	cmp    BYTE PTR [rsi],0x3a
  4061a0:	je     406548 <_start@@Base+0x3218>
  4061a6:	mov    ecx,0x4
  4061ab:	mov    rdx,rbx
  4061ae:	mov    rdi,rbp
  4061b1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4061b6:	mov    r15,rax
  4061b9:	cmp    r14,r15
  4061bc:	je     406300 <_start@@Base+0x2fd0>
  4061c2:	mov    DWORD PTR [rsp+0x8],0x0
  4061ca:	mov    QWORD PTR [rsp+0x10],0x0
  4061d3:	mov    DWORD PTR [rsp+0xc],0x0
  4061db:	cmp    rbx,r15
  4061de:	je     406460 <_start@@Base+0x3130>
  4061e4:	lea    rcx,[rsp+0xc]
  4061e9:	lea    r8,[rsp+0x10]
  4061ee:	mov    rdx,rbx
  4061f1:	mov    rsi,r15
  4061f4:	mov    rdi,rbp
  4061f7:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4061fc:	mov    r14,rax
  4061ff:	cmp    r15,rax
  406202:	jne    406470 <_start@@Base+0x3140>
  406208:	lea    r8,[rsp+0x8]
  40620d:	lea    rcx,[rip+0x1b02c]        # 421240 <__data_start@@Base+0x180>
  406214:	mov    rdx,rbx
  406217:	mov    rsi,r14
  40621a:	mov    rdi,rbp
  40621d:	call   4057f0 <_start@@Base+0x24c0>
  406222:	cmp    rax,r14
  406225:	je     4065a8 <_start@@Base+0x3278>
  40622b:	cmp    rbx,rax
  40622e:	je     4065a8 <_start@@Base+0x3278>
  406234:	mov    edx,DWORD PTR [rsp+0x8]
  406238:	mov    r14,rax
  40623b:	nop    DWORD PTR [rax+rax*1+0x0]
  406240:	mov    DWORD PTR [r12],edx
  406244:	nop    DWORD PTR [rax+0x0]
  406248:	mov    rax,rbx
  40624b:	sub    rax,r14
  40624e:	cmp    rax,0x1
  406252:	jle    406260 <_start@@Base+0x2f30>
  406254:	cmp    BYTE PTR [r14],0x20
  406258:	jg     406271 <_start@@Base+0x2f41>
  40625a:	je     406410 <_start@@Base+0x30e0>
  406260:	mov    rsi,r14
  406263:	mov    rdx,rbx
  406266:	mov    rdi,rbp
  406269:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40626e:	mov    r14,rax
  406271:	cmp    rbx,r14
  406274:	je     405fd0 <_start@@Base+0x2ca0>
  40627a:	movzx  eax,BYTE PTR [r14]
  40627e:	cmp    al,0x2c
  406280:	je     4063a0 <_start@@Base+0x3070>
  406286:	cmp    al,0x7d
  406288:	je     406350 <_start@@Base+0x3020>
  40628e:	mov    ecx,0xa
  406293:	jmp    405fa0 <_start@@Base+0x2c70>
  406298:	nop    DWORD PTR [rax+rax*1+0x0]
  4062a0:	xor    eax,eax
  4062a2:	jmp    4060e7 <_start@@Base+0x2db7>
  4062a7:	nop    WORD PTR [rax+rax*1+0x0]
  4062b0:	xor    eax,eax
  4062b2:	jmp    4060f6 <_start@@Base+0x2dc6>
  4062b7:	nop    WORD PTR [rax+rax*1+0x0]
  4062c0:	xor    ecx,ecx
  4062c2:	jmp    4060c9 <_start@@Base+0x2d99>
  4062c7:	nop    WORD PTR [rax+rax*1+0x0]
  4062d0:	xor    ecx,ecx
  4062d2:	jmp    4060d8 <_start@@Base+0x2da8>
  4062d7:	nop    WORD PTR [rax+rax*1+0x0]
  4062e0:	xor    ecx,ecx
  4062e2:	jmp    406105 <_start@@Base+0x2dd5>
  4062e7:	nop    WORD PTR [rax+rax*1+0x0]
  4062f0:	xor    ecx,ecx
  4062f2:	jmp    406114 <_start@@Base+0x2de4>
  4062f7:	nop    WORD PTR [rax+rax*1+0x0]
  406300:	mov    rsi,r14
  406303:	mov    rdx,rbx
  406306:	mov    rdi,rbp
  406309:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40630e:	mov    r14,rax
  406311:	jmp    406248 <_start@@Base+0x2f18>
  406316:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406320:	inc    rsi
  406323:	mov    rax,rbx
  406326:	sub    rax,rsi
  406329:	mov    DWORD PTR [rbp+0x14],0x0
  406330:	cmp    rax,0x7
  406334:	ja     40607f <_start@@Base+0x2d4f>
  40633a:	mov    rdx,rbx
  40633d:	mov    rdi,rbp
  406340:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  406345:	mov    r14,rax
  406348:	jmp    406248 <_start@@Base+0x2f18>
  40634d:	nop    DWORD PTR [rax]
  406350:	lea    r12,[r14+0x1]
  406354:	mov    rax,rbx
  406357:	sub    rax,r12
  40635a:	cmp    rax,0x1
  40635e:	jle    406371 <_start@@Base+0x3041>
  406360:	cmp    BYTE PTR [r14+0x1],0x20
  406365:	jg     405fb1 <_start@@Base+0x2c81>
  40636b:	je     4064c0 <_start@@Base+0x3190>
  406371:	mov    rsi,r12
  406374:	mov    rdx,rbx
  406377:	mov    rdi,rbp
  40637a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40637f:	mov    r12,rax
  406382:	jmp    405fb1 <_start@@Base+0x2c81>
  406387:	nop    WORD PTR [rax+rax*1+0x0]
  406390:	movbe  rax,QWORD PTR [rsi+0x8]
  406396:	jmp    406123 <_start@@Base+0x2df3>
  40639b:	nop    DWORD PTR [rax+rax*1+0x0]
  4063a0:	lea    rsi,[r14+0x1]
  4063a4:	mov    rax,rbx
  4063a7:	sub    rax,rsi
  4063aa:	cmp    rax,0x1
  4063ae:	jle    4063bd <_start@@Base+0x308d>
  4063b0:	cmp    BYTE PTR [r14+0x1],0x20
  4063b5:	jg     4063cb <_start@@Base+0x309b>
  4063b7:	je     4064d8 <_start@@Base+0x31a8>
  4063bd:	mov    rdx,rbx
  4063c0:	mov    rdi,rbp
  4063c3:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4063c8:	mov    rsi,rax
  4063cb:	cmp    rbx,rsi
  4063ce:	je     4064f0 <_start@@Base+0x31c0>
  4063d4:	cmp    BYTE PTR [rsi],0x7d
  4063d7:	jne    406050 <_start@@Base+0x2d20>
  4063dd:	lea    r12,[rsi+0x1]
  4063e1:	mov    rax,rbx
  4063e4:	sub    rax,r12
  4063e7:	cmp    rax,0x1
  4063eb:	jle    406371 <_start@@Base+0x3041>
  4063ed:	cmp    BYTE PTR [rsi+0x1],0x20
  4063f1:	jg     405fb1 <_start@@Base+0x2c81>
  4063f7:	jne    406371 <_start@@Base+0x3041>
  4063fd:	cmp    BYTE PTR [rsi+0x2],0x20
  406401:	jle    406371 <_start@@Base+0x3041>
  406407:	lea    r12,[rsi+0x2]
  40640b:	jmp    405fb1 <_start@@Base+0x2c81>
  406410:	cmp    BYTE PTR [r14+0x1],0x20
  406415:	jle    406260 <_start@@Base+0x2f30>
  40641b:	inc    r14
  40641e:	jmp    406271 <_start@@Base+0x2f41>
  406423:	nop    DWORD PTR [rax+rax*1+0x0]
  406428:	cmp    al,0x22
  40642a:	jne    406300 <_start@@Base+0x2fd0>
  406430:	add    rsi,0xb
  406434:	jmp    406173 <_start@@Base+0x2e43>
  406439:	nop    DWORD PTR [rax+0x0]
  406440:	mov    ecx,0x5
  406445:	mov    rdx,rbx
  406448:	mov    rdi,rbp
  40644b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406450:	mov    rsi,rax
  406453:	jmp    40606f <_start@@Base+0x2d3f>
  406458:	nop    DWORD PTR [rax+rax*1+0x0]
  406460:	mov    r14,rbx
  406463:	jmp    406208 <_start@@Base+0x2ed8>
  406468:	nop    DWORD PTR [rax+rax*1+0x0]
  406470:	mov    rax,QWORD PTR [rsp+0x10]
  406475:	mov    ecx,DWORD PTR [rsp+0xc]
  406479:	mov    edx,eax
  40647b:	test   ecx,ecx
  40647d:	je     406510 <_start@@Base+0x31e0>
  406483:	mov    edi,0x80000000
  406488:	neg    edx
  40648a:	mov    ecx,0x8
  40648f:	cmp    rax,rdi
  406492:	jbe    406240 <_start@@Base+0x2f10>
  406498:	mov    rsi,r14
  40649b:	mov    rdx,rbx
  40649e:	mov    rdi,rbp
  4064a1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4064a6:	mov    r14,rax
  4064a9:	cmp    r15,rax
  4064ac:	je     406208 <_start@@Base+0x2ed8>
  4064b2:	mov    edx,DWORD PTR [rsp+0x8]
  4064b6:	jmp    406240 <_start@@Base+0x2f10>
  4064bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4064c0:	cmp    BYTE PTR [r14+0x2],0x20
  4064c5:	jle    406371 <_start@@Base+0x3041>
  4064cb:	lea    r12,[r14+0x2]
  4064cf:	jmp    405fb1 <_start@@Base+0x2c81>
  4064d4:	nop    DWORD PTR [rax+0x0]
  4064d8:	cmp    BYTE PTR [r14+0x2],0x20
  4064dd:	jle    4063bd <_start@@Base+0x308d>
  4064e3:	lea    rsi,[r14+0x2]
  4064e7:	cmp    rbx,rsi
  4064ea:	jne    4063d4 <_start@@Base+0x30a4>
  4064f0:	mov    ecx,0xa
  4064f5:	mov    rdx,rbx
  4064f8:	mov    rsi,rbx
  4064fb:	mov    rdi,rbp
  4064fe:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406503:	mov    r12,rax
  406506:	jmp    405fb1 <_start@@Base+0x2c81>
  40650b:	nop    DWORD PTR [rax+rax*1+0x0]
  406510:	cmp    rax,0x7fffffff
  406516:	jbe    406240 <_start@@Base+0x2f10>
  40651c:	mov    ecx,0x7
  406521:	jmp    406498 <_start@@Base+0x3168>
  406526:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406530:	cmp    BYTE PTR [rsi+0x1],0x20
  406534:	jle    40618a <_start@@Base+0x2e5a>
  40653a:	inc    rsi
  40653d:	jmp    406198 <_start@@Base+0x2e68>
  406542:	nop    WORD PTR [rax+rax*1+0x0]
  406548:	lea    r15,[rsi+0x1]
  40654c:	mov    rax,rbx
  40654f:	sub    rax,r15
  406552:	cmp    rax,0x1
  406556:	jle    406564 <_start@@Base+0x3234>
  406558:	cmp    BYTE PTR [rsi+0x1],0x20
  40655c:	jg     4061b9 <_start@@Base+0x2e89>
  406562:	je     406580 <_start@@Base+0x3250>
  406564:	mov    rsi,r15
  406567:	mov    rdx,rbx
  40656a:	mov    rdi,rbp
  40656d:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406572:	mov    r15,rax
  406575:	jmp    4061b9 <_start@@Base+0x2e89>
  40657a:	nop    WORD PTR [rax+rax*1+0x0]
  406580:	cmp    BYTE PTR [rsi+0x2],0x20
  406584:	jle    406564 <_start@@Base+0x3234>
  406586:	lea    r15,[rsi+0x2]
  40658a:	jmp    4061b9 <_start@@Base+0x2e89>
  40658f:	nop
  406590:	cmp    BYTE PTR [r14+0x2],0x20
  406595:	jle    406030 <_start@@Base+0x2d00>
  40659b:	lea    rsi,[r14+0x2]
  40659f:	jmp    40603e <_start@@Base+0x2d0e>
  4065a4:	nop    DWORD PTR [rax+0x0]
  4065a8:	mov    ecx,0x21
  4065ad:	mov    rdx,rbx
  4065b0:	mov    rsi,rax
  4065b3:	mov    rdi,rbp
  4065b6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4065bb:	mov    r12,rax
  4065be:	jmp    405fb1 <_start@@Base+0x2c81>
  4065c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4065c8:	inc    rsi
  4065cb:	mov    rdx,rbx
  4065ce:	mov    rdi,rbp
  4065d1:	call   403550 <_start@@Base+0x220>
  4065d6:	mov    r12,rax
  4065d9:	jmp    405fb1 <_start@@Base+0x2c81>
  4065de:	call   4031c0 <__stack_chk_fail@plt>
  4065e3:	mov    r14,rbx
  4065e6:	jmp    405fd0 <_start@@Base+0x2ca0>
  4065eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4065f0:	push   r12
  4065f2:	mov    rax,rdx
  4065f5:	sub    rax,rsi
  4065f8:	push   rbp
  4065f9:	mov    r12,rcx
  4065fc:	mov    rbp,rdi
  4065ff:	push   rbx
  406600:	mov    rbx,rdx
  406603:	cmp    rax,0x1
  406607:	jle    406610 <_start@@Base+0x32e0>
  406609:	cmp    BYTE PTR [rsi],0x20
  40660c:	jg     40661e <_start@@Base+0x32ee>
  40660e:	je     406680 <_start@@Base+0x3350>
  406610:	mov    rdx,rbx
  406613:	mov    rdi,rbp
  406616:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40661b:	mov    rsi,rax
  40661e:	cmp    rbx,rsi
  406621:	je     4066d0 <_start@@Base+0x33a0>
  406627:	cmp    BYTE PTR [rsi],0x2c
  40662a:	je     406690 <_start@@Base+0x3360>
  40662c:	mov    DWORD PTR [r12],0x0
  406634:	cmp    BYTE PTR [rsi],0x7d
  406637:	je     406650 <_start@@Base+0x3320>
  406639:	mov    ecx,0xa
  40663e:	mov    rdx,rbx
  406641:	pop    rbx
  406642:	mov    rdi,rbp
  406645:	pop    rbp
  406646:	pop    r12
  406648:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  40664d:	nop    DWORD PTR [rax]
  406650:	lea    rax,[rsi+0x1]
  406654:	mov    rdx,rbx
  406657:	sub    rdx,rax
  40665a:	cmp    rdx,0x1
  40665e:	jle    406668 <_start@@Base+0x3338>
  406660:	cmp    BYTE PTR [rsi+0x1],0x20
  406664:	jg     4066c8 <_start@@Base+0x3398>
  406666:	je     4066e0 <_start@@Base+0x33b0>
  406668:	mov    rdx,rbx
  40666b:	pop    rbx
  40666c:	mov    rdi,rbp
  40666f:	pop    rbp
  406670:	mov    rsi,rax
  406673:	pop    r12
  406675:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  40667a:	nop    WORD PTR [rax+rax*1+0x0]
  406680:	cmp    BYTE PTR [rsi+0x1],0x20
  406684:	jle    406610 <_start@@Base+0x32e0>
  406686:	inc    rsi
  406689:	jmp    40661e <_start@@Base+0x32ee>
  40668b:	nop    DWORD PTR [rax+rax*1+0x0]
  406690:	lea    rax,[rsi+0x1]
  406694:	mov    rdx,rbx
  406697:	sub    rdx,rax
  40669a:	cmp    rdx,0x1
  40669e:	jle    4066a8 <_start@@Base+0x3378>
  4066a0:	cmp    BYTE PTR [rsi+0x1],0x20
  4066a4:	jg     4066b6 <_start@@Base+0x3386>
  4066a6:	je     4066f0 <_start@@Base+0x33c0>
  4066a8:	mov    rdx,rbx
  4066ab:	mov    rsi,rax
  4066ae:	mov    rdi,rbp
  4066b1:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4066b6:	cmp    rbx,rax
  4066b9:	je     406720 <_start@@Base+0x33f0>
  4066bb:	cmp    BYTE PTR [rax],0x7d
  4066be:	je     406700 <_start@@Base+0x33d0>
  4066c0:	mov    DWORD PTR [r12],0x1
  4066c8:	pop    rbx
  4066c9:	pop    rbp
  4066ca:	pop    r12
  4066cc:	ret    
  4066cd:	nop    DWORD PTR [rax]
  4066d0:	mov    rax,rbx
  4066d3:	pop    rbx
  4066d4:	pop    rbp
  4066d5:	mov    DWORD PTR [r12],0x0
  4066dd:	pop    r12
  4066df:	ret    
  4066e0:	cmp    BYTE PTR [rsi+0x2],0x20
  4066e4:	jle    406668 <_start@@Base+0x3338>
  4066e6:	lea    rax,[rsi+0x2]
  4066ea:	jmp    4066c8 <_start@@Base+0x3398>
  4066ec:	nop    DWORD PTR [rax+0x0]
  4066f0:	cmp    BYTE PTR [rsi+0x2],0x20
  4066f4:	jle    4066a8 <_start@@Base+0x3378>
  4066f6:	lea    rax,[rsi+0x2]
  4066fa:	jmp    4066b6 <_start@@Base+0x3386>
  4066fc:	nop    DWORD PTR [rax+0x0]
  406700:	mov    DWORD PTR [r12],0x0
  406708:	mov    rdx,rbx
  40670b:	pop    rbx
  40670c:	mov    rdi,rbp
  40670f:	pop    rbp
  406710:	lea    rsi,[rax+0x1]
  406714:	pop    r12
  406716:	jmp    403550 <_start@@Base+0x220>
  40671b:	nop    DWORD PTR [rax+rax*1+0x0]
  406720:	mov    DWORD PTR [r12],0x0
  406728:	mov    ecx,0xa
  40672d:	mov    rdx,rbx
  406730:	mov    rsi,rbx
  406733:	jmp    406641 <_start@@Base+0x3311>
  406738:	nop    DWORD PTR [rax+rax*1+0x0]
  406740:	push   r12
  406742:	mov    rax,rdx
  406745:	sub    rax,rsi
  406748:	push   rbp
  406749:	mov    r12,rcx
  40674c:	mov    rbp,rdi
  40674f:	push   rbx
  406750:	mov    rbx,rdx
  406753:	cmp    rax,0x1
  406757:	jle    406760 <_start@@Base+0x3430>
  406759:	cmp    BYTE PTR [rsi],0x20
  40675c:	jg     40676e <_start@@Base+0x343e>
  40675e:	je     4067d0 <_start@@Base+0x34a0>
  406760:	mov    rdx,rbx
  406763:	mov    rdi,rbp
  406766:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40676b:	mov    rsi,rax
  40676e:	cmp    rbx,rsi
  406771:	je     406820 <_start@@Base+0x34f0>
  406777:	cmp    BYTE PTR [rsi],0x2c
  40677a:	je     4067e0 <_start@@Base+0x34b0>
  40677c:	mov    DWORD PTR [r12],0x0
  406784:	cmp    BYTE PTR [rsi],0x5d
  406787:	je     4067a0 <_start@@Base+0x3470>
  406789:	mov    ecx,0x9
  40678e:	mov    rdx,rbx
  406791:	pop    rbx
  406792:	mov    rdi,rbp
  406795:	pop    rbp
  406796:	pop    r12
  406798:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  40679d:	nop    DWORD PTR [rax]
  4067a0:	lea    rax,[rsi+0x1]
  4067a4:	mov    rdx,rbx
  4067a7:	sub    rdx,rax
  4067aa:	cmp    rdx,0x1
  4067ae:	jle    4067b8 <_start@@Base+0x3488>
  4067b0:	cmp    BYTE PTR [rsi+0x1],0x20
  4067b4:	jg     406818 <_start@@Base+0x34e8>
  4067b6:	je     406830 <_start@@Base+0x3500>
  4067b8:	mov    rdx,rbx
  4067bb:	pop    rbx
  4067bc:	mov    rdi,rbp
  4067bf:	pop    rbp
  4067c0:	mov    rsi,rax
  4067c3:	pop    r12
  4067c5:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  4067ca:	nop    WORD PTR [rax+rax*1+0x0]
  4067d0:	cmp    BYTE PTR [rsi+0x1],0x20
  4067d4:	jle    406760 <_start@@Base+0x3430>
  4067d6:	inc    rsi
  4067d9:	jmp    40676e <_start@@Base+0x343e>
  4067db:	nop    DWORD PTR [rax+rax*1+0x0]
  4067e0:	lea    rax,[rsi+0x1]
  4067e4:	mov    rdx,rbx
  4067e7:	sub    rdx,rax
  4067ea:	cmp    rdx,0x1
  4067ee:	jle    4067f8 <_start@@Base+0x34c8>
  4067f0:	cmp    BYTE PTR [rsi+0x1],0x20
  4067f4:	jg     406806 <_start@@Base+0x34d6>
  4067f6:	je     406840 <_start@@Base+0x3510>
  4067f8:	mov    rdx,rbx
  4067fb:	mov    rsi,rax
  4067fe:	mov    rdi,rbp
  406801:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406806:	cmp    rbx,rax
  406809:	je     406870 <_start@@Base+0x3540>
  40680b:	cmp    BYTE PTR [rax],0x5d
  40680e:	je     406850 <_start@@Base+0x3520>
  406810:	mov    DWORD PTR [r12],0x1
  406818:	pop    rbx
  406819:	pop    rbp
  40681a:	pop    r12
  40681c:	ret    
  40681d:	nop    DWORD PTR [rax]
  406820:	mov    rax,rbx
  406823:	pop    rbx
  406824:	pop    rbp
  406825:	mov    DWORD PTR [r12],0x0
  40682d:	pop    r12
  40682f:	ret    
  406830:	cmp    BYTE PTR [rsi+0x2],0x20
  406834:	jle    4067b8 <_start@@Base+0x3488>
  406836:	lea    rax,[rsi+0x2]
  40683a:	jmp    406818 <_start@@Base+0x34e8>
  40683c:	nop    DWORD PTR [rax+0x0]
  406840:	cmp    BYTE PTR [rsi+0x2],0x20
  406844:	jle    4067f8 <_start@@Base+0x34c8>
  406846:	lea    rax,[rsi+0x2]
  40684a:	jmp    406806 <_start@@Base+0x34d6>
  40684c:	nop    DWORD PTR [rax+0x0]
  406850:	mov    DWORD PTR [r12],0x0
  406858:	mov    rdx,rbx
  40685b:	pop    rbx
  40685c:	mov    rdi,rbp
  40685f:	pop    rbp
  406860:	lea    rsi,[rax+0x1]
  406864:	pop    r12
  406866:	jmp    403550 <_start@@Base+0x220>
  40686b:	nop    DWORD PTR [rax+rax*1+0x0]
  406870:	mov    DWORD PTR [r12],0x0
  406878:	mov    ecx,0x9
  40687d:	mov    rdx,rbx
  406880:	mov    rsi,rbx
  406883:	jmp    406791 <_start@@Base+0x3461>
  406888:	nop    DWORD PTR [rax+rax*1+0x0]
  406890:	push   r15
  406892:	push   r14
  406894:	push   r13
  406896:	mov    r13,rdx
  406899:	push   r12
  40689b:	push   rbp
  40689c:	push   rbx
  40689d:	mov    rbx,rdi
  4068a0:	sub    rsp,0x38
  4068a4:	mov    QWORD PTR [rsp],rcx
  4068a8:	mov    rax,QWORD PTR fs:0x28
  4068b1:	mov    QWORD PTR [rsp+0x28],rax
  4068b6:	xor    eax,eax
  4068b8:	cmp    rsi,rdx
  4068bb:	je     4068c2 <_start@@Base+0x3592>
  4068bd:	cmp    BYTE PTR [rsi],0x7b
  4068c0:	je     406900 <_start@@Base+0x35d0>
  4068c2:	mov    ecx,0x15
  4068c7:	mov    rdx,r13
  4068ca:	mov    rdi,rbx
  4068cd:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4068d2:	mov    r9,rax
  4068d5:	nop    DWORD PTR [rax]
  4068d8:	mov    rdi,QWORD PTR [rsp+0x28]
  4068dd:	xor    rdi,QWORD PTR fs:0x28
  4068e6:	mov    rax,r9
  4068e9:	jne    4070c3 <_start@@Base+0x3d93>
  4068ef:	add    rsp,0x38
  4068f3:	pop    rbx
  4068f4:	pop    rbp
  4068f5:	pop    r12
  4068f7:	pop    r13
  4068f9:	pop    r14
  4068fb:	pop    r15
  4068fd:	ret    
  4068fe:	xchg   ax,ax
  406900:	lea    r15,[rsi+0x1]
  406904:	mov    rax,rdx
  406907:	sub    rax,r15
  40690a:	cmp    rax,0x1
  40690e:	jle    40691c <_start@@Base+0x35ec>
  406910:	cmp    BYTE PTR [rsi+0x1],0x20
  406914:	jg     40692d <_start@@Base+0x35fd>
  406916:	je     407087 <_start@@Base+0x3d57>
  40691c:	mov    rsi,r15
  40691f:	mov    rdx,r13
  406922:	mov    rdi,rbx
  406925:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40692a:	mov    r15,rax
  40692d:	cmp    r13,r15
  406930:	je     40693c <_start@@Base+0x360c>
  406932:	cmp    BYTE PTR [r15],0x7d
  406936:	je     40709a <_start@@Base+0x3d6a>
  40693c:	movabs r12,0xff00000000000000
  406946:	movabs rbp,0x6200000000000000
  406950:	lea    r14,[rip+0x136fd]        # 41a054 <_IO_stdin_used@@Base+0x54>
  406957:	nop    WORD PTR [rax+rax*1+0x0]
  406960:	cmp    r13,r15
  406963:	je     406b38 <_start@@Base+0x3808>
  406969:	movzx  eax,BYTE PTR [r15]
  40696d:	cmp    al,0x22
  40696f:	je     406d10 <_start@@Base+0x39e0>
  406975:	cmp    al,0x2e
  406977:	je     406e40 <_start@@Base+0x3b10>
  40697d:	mov    DWORD PTR [rbx+0x14],0x1
  406984:	mov    rsi,r13
  406987:	sub    rsi,r15
  40698a:	cmp    rsi,0x7
  40698e:	jbe    406c68 <_start@@Base+0x3938>
  406994:	movbe  rax,QWORD PTR [r15]
  406999:	and    rax,r12
  40699c:	cmp    rax,rbp
  40699f:	je     406b50 <_start@@Base+0x3820>
  4069a5:	movabs rdi,0x6100000000000000
  4069af:	cmp    rax,rdi
  4069b2:	jne    406b38 <_start@@Base+0x3808>
  4069b8:	cmp    rsi,0x1
  4069bc:	jle    406b38 <_start@@Base+0x3808>
  4069c2:	mov    edi,DWORD PTR [rbx+0x14]
  4069c5:	movzx  eax,BYTE PTR [r15+0x1]
  4069ca:	test   edi,edi
  4069cc:	je     406e08 <_start@@Base+0x3ad8>
  4069d2:	cmp    al,0x20
  4069d4:	jle    4069de <_start@@Base+0x36ae>
  4069d6:	cmp    al,0x3a
  4069d8:	jne    406b38 <_start@@Base+0x3808>
  4069de:	mov    DWORD PTR [rbx+0x14],0x0
  4069e5:	lea    rsi,[r15+0x1]
  4069e9:	mov    rax,r13
  4069ec:	sub    rax,rsi
  4069ef:	cmp    rax,0x1
  4069f3:	jle    406a00 <_start@@Base+0x36d0>
  4069f5:	cmp    BYTE PTR [rsi],0x20
  4069f8:	jg     406a0e <_start@@Base+0x36de>
  4069fa:	je     406fc8 <_start@@Base+0x3c98>
  406a00:	mov    rdx,r13
  406a03:	mov    rdi,rbx
  406a06:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406a0b:	mov    rsi,rax
  406a0e:	cmp    r13,rsi
  406a11:	je     406a1c <_start@@Base+0x36ec>
  406a13:	cmp    BYTE PTR [rsi],0x3a
  406a16:	je     407020 <_start@@Base+0x3cf0>
  406a1c:	mov    ecx,0x4
  406a21:	mov    rdx,r13
  406a24:	mov    rdi,rbx
  406a27:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406a2c:	mov    r11,rax
  406a2f:	cmp    r11,r15
  406a32:	je     406b38 <_start@@Base+0x3808>
  406a38:	xor    esi,esi
  406a3a:	mov    WORD PTR [rsp+0x1a],si
  406a3f:	mov    QWORD PTR [rsp+0x20],0x0
  406a48:	mov    DWORD PTR [rsp+0x1c],0x0
  406a50:	cmp    r13,r11
  406a53:	je     406e30 <_start@@Base+0x3b00>
  406a59:	mov    rsi,r11
  406a5c:	lea    rcx,[rsp+0x1c]
  406a61:	lea    r8,[rsp+0x20]
  406a66:	mov    rdx,r13
  406a69:	mov    rdi,rbx
  406a6c:	mov    QWORD PTR [rsp+0x8],r11
  406a71:	call   4184e0 <flatcc_json_parser_integer@@Base>
  406a76:	mov    r11,QWORD PTR [rsp+0x8]
  406a7b:	mov    r9,rax
  406a7e:	cmp    r11,rax
  406a81:	jne    406eb8 <_start@@Base+0x3b88>
  406a87:	mov    rsi,r9
  406a8a:	lea    r8,[rsp+0x1a]
  406a8f:	lea    rcx,[rip+0x1a6ca]        # 421160 <__data_start@@Base+0xa0>
  406a96:	mov    rdx,r13
  406a99:	mov    rdi,rbx
  406a9c:	mov    QWORD PTR [rsp+0x8],r9
  406aa1:	call   405580 <_start@@Base+0x2250>
  406aa6:	mov    r9,QWORD PTR [rsp+0x8]
  406aab:	cmp    rax,r9
  406aae:	je     40706c <_start@@Base+0x3d3c>
  406ab4:	cmp    r13,rax
  406ab7:	je     40706c <_start@@Base+0x3d3c>
  406abd:	movzx  edx,WORD PTR [rsp+0x1a]
  406ac2:	mov    r9,rax
  406ac5:	nop    DWORD PTR [rax]
  406ac8:	mov    rax,QWORD PTR [rsp]
  406acc:	mov    WORD PTR [rax],dx
  406acf:	nop
  406ad0:	mov    rax,r13
  406ad3:	sub    rax,r9
  406ad6:	cmp    rax,0x1
  406ada:	jle    406ae8 <_start@@Base+0x37b8>
  406adc:	cmp    BYTE PTR [r9],0x20
  406ae0:	jg     406af9 <_start@@Base+0x37c9>
  406ae2:	je     406d58 <_start@@Base+0x3a28>
  406ae8:	mov    rsi,r9
  406aeb:	mov    rdx,r13
  406aee:	mov    rdi,rbx
  406af1:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406af6:	mov    r9,rax
  406af9:	cmp    r13,r9
  406afc:	je     4068d8 <_start@@Base+0x35a8>
  406b02:	movzx  eax,BYTE PTR [r9]
  406b06:	cmp    al,0x2c
  406b08:	je     406d70 <_start@@Base+0x3a40>
  406b0e:	cmp    al,0x7d
  406b10:	je     406d20 <_start@@Base+0x39f0>
  406b16:	mov    rsi,r9
  406b19:	mov    ecx,0xa
  406b1e:	mov    rdx,r13
  406b21:	mov    rdi,rbx
  406b24:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406b29:	mov    r9,rax
  406b2c:	jmp    4068d8 <_start@@Base+0x35a8>
  406b31:	nop    DWORD PTR [rax+0x0]
  406b38:	mov    rdx,r13
  406b3b:	mov    rsi,r15
  406b3e:	mov    rdi,rbx
  406b41:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  406b46:	mov    r9,rax
  406b49:	jmp    406ad0 <_start@@Base+0x37a0>
  406b4b:	nop    DWORD PTR [rax+rax*1+0x0]
  406b50:	cmp    rsi,0x1
  406b54:	jle    406b38 <_start@@Base+0x3808>
  406b56:	mov    r9d,DWORD PTR [rbx+0x14]
  406b5a:	movzx  eax,BYTE PTR [r15+0x1]
  406b5f:	test   r9d,r9d
  406b62:	je     406df0 <_start@@Base+0x3ac0>
  406b68:	cmp    al,0x20
  406b6a:	jle    406b70 <_start@@Base+0x3840>
  406b6c:	cmp    al,0x3a
  406b6e:	jne    406b38 <_start@@Base+0x3808>
  406b70:	mov    DWORD PTR [rbx+0x14],0x0
  406b77:	lea    rsi,[r15+0x1]
  406b7b:	mov    rax,r13
  406b7e:	sub    rax,rsi
  406b81:	cmp    rax,0x1
  406b85:	jle    406b92 <_start@@Base+0x3862>
  406b87:	cmp    BYTE PTR [rsi],0x20
  406b8a:	jg     406ba0 <_start@@Base+0x3870>
  406b8c:	je     406fb0 <_start@@Base+0x3c80>
  406b92:	mov    rdx,r13
  406b95:	mov    rdi,rbx
  406b98:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406b9d:	mov    rsi,rax
  406ba0:	cmp    r13,rsi
  406ba3:	je     406bae <_start@@Base+0x387e>
  406ba5:	cmp    BYTE PTR [rsi],0x3a
  406ba8:	je     406fe0 <_start@@Base+0x3cb0>
  406bae:	mov    ecx,0x4
  406bb3:	mov    rdx,r13
  406bb6:	mov    rdi,rbx
  406bb9:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406bbe:	mov    r11,rax
  406bc1:	cmp    r11,r15
  406bc4:	je     406b38 <_start@@Base+0x3808>
  406bca:	mov    BYTE PTR [rsp+0x1a],0x0
  406bcf:	mov    QWORD PTR [rsp+0x20],0x0
  406bd8:	mov    DWORD PTR [rsp+0x1c],0x0
  406be0:	cmp    r13,r11
  406be3:	je     406e20 <_start@@Base+0x3af0>
  406be9:	mov    rsi,r11
  406bec:	lea    rcx,[rsp+0x1c]
  406bf1:	lea    r8,[rsp+0x20]
  406bf6:	mov    rdx,r13
  406bf9:	mov    rdi,rbx
  406bfc:	mov    QWORD PTR [rsp+0x8],r11
  406c01:	call   4184e0 <flatcc_json_parser_integer@@Base>
  406c06:	mov    r11,QWORD PTR [rsp+0x8]
  406c0b:	mov    r9,rax
  406c0e:	cmp    r11,rax
  406c11:	jne    406e60 <_start@@Base+0x3b30>
  406c17:	mov    rsi,r9
  406c1a:	lea    r8,[rsp+0x1a]
  406c1f:	lea    rcx,[rip+0x1a55a]        # 421180 <__data_start@@Base+0xc0>
  406c26:	mov    rdx,r13
  406c29:	mov    rdi,rbx
  406c2c:	mov    QWORD PTR [rsp+0x8],r9
  406c31:	call   405a70 <_start@@Base+0x2740>
  406c36:	mov    r9,QWORD PTR [rsp+0x8]
  406c3b:	cmp    rax,r9
  406c3e:	je     40706c <_start@@Base+0x3d3c>
  406c44:	cmp    r13,rax
  406c47:	je     40706c <_start@@Base+0x3d3c>
  406c4d:	movzx  edx,BYTE PTR [rsp+0x1a]
  406c52:	mov    r9,rax
  406c55:	nop    DWORD PTR [rax]
  406c58:	mov    rax,QWORD PTR [rsp]
  406c5c:	mov    BYTE PTR [rax+0x2],dl
  406c5f:	jmp    406ad0 <_start@@Base+0x37a0>
  406c64:	nop    DWORD PTR [rax+0x0]
  406c68:	movsxd rax,DWORD PTR [r14+rsi*4]
  406c6c:	add    rax,r14
  406c6f:	notrack jmp rax
  406c72:	nop    WORD PTR [rax+rax*1+0x0]
  406c78:	movsx  rcx,BYTE PTR [r15+0x6]
  406c7d:	shl    rcx,0x8
  406c81:	movsx  rdx,BYTE PTR [r15+0x5]
  406c86:	mov    rax,rdx
  406c89:	shl    rax,0x10
  406c8d:	or     rcx,rax
  406c90:	movsx  rdx,BYTE PTR [r15+0x4]
  406c95:	mov    rax,rdx
  406c98:	shl    rax,0x18
  406c9c:	or     rax,rcx
  406c9f:	movsx  rdx,BYTE PTR [r15+0x3]
  406ca4:	shl    rdx,0x20
  406ca8:	or     rax,rdx
  406cab:	movsx  rdx,BYTE PTR [r15+0x2]
  406cb0:	mov    rcx,rdx
  406cb3:	shl    rcx,0x28
  406cb7:	or     rcx,rax
  406cba:	movsx  rdx,BYTE PTR [r15+0x1]
  406cbf:	mov    rax,rdx
  406cc2:	shl    rax,0x30
  406cc6:	or     rcx,rax
  406cc9:	movsx  rdx,BYTE PTR [r15]
  406ccd:	mov    rax,rdx
  406cd0:	shl    rax,0x38
  406cd4:	or     rax,rcx
  406cd7:	jmp    406999 <_start@@Base+0x3669>
  406cdc:	nop    DWORD PTR [rax+0x0]
  406ce0:	xor    ecx,ecx
  406ce2:	jmp    406c81 <_start@@Base+0x3951>
  406ce4:	nop    DWORD PTR [rax+0x0]
  406ce8:	xor    ecx,ecx
  406cea:	jmp    406c90 <_start@@Base+0x3960>
  406cec:	nop    DWORD PTR [rax+0x0]
  406cf0:	xor    eax,eax
  406cf2:	jmp    406c9f <_start@@Base+0x396f>
  406cf4:	nop    DWORD PTR [rax+0x0]
  406cf8:	xor    eax,eax
  406cfa:	jmp    406cab <_start@@Base+0x397b>
  406cfc:	nop    DWORD PTR [rax+0x0]
  406d00:	xor    ecx,ecx
  406d02:	jmp    406cba <_start@@Base+0x398a>
  406d04:	nop    DWORD PTR [rax+0x0]
  406d08:	xor    ecx,ecx
  406d0a:	jmp    406cc9 <_start@@Base+0x3999>
  406d0c:	nop    DWORD PTR [rax+0x0]
  406d10:	inc    r15
  406d13:	mov    DWORD PTR [rbx+0x14],0x0
  406d1a:	jmp    406984 <_start@@Base+0x3654>
  406d1f:	nop
  406d20:	lea    rsi,[r9+0x1]
  406d24:	mov    rax,r13
  406d27:	sub    rax,rsi
  406d2a:	cmp    rax,0x1
  406d2e:	jle    406d41 <_start@@Base+0x3a11>
  406d30:	cmp    BYTE PTR [r9+0x1],0x20
  406d35:	jg     406f10 <_start@@Base+0x3be0>
  406d3b:	je     406f20 <_start@@Base+0x3bf0>
  406d41:	mov    rdx,r13
  406d44:	mov    rdi,rbx
  406d47:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406d4c:	mov    r9,rax
  406d4f:	jmp    4068d8 <_start@@Base+0x35a8>
  406d54:	nop    DWORD PTR [rax+0x0]
  406d58:	cmp    BYTE PTR [r9+0x1],0x20
  406d5d:	jle    406ae8 <_start@@Base+0x37b8>
  406d63:	inc    r9
  406d66:	jmp    406af9 <_start@@Base+0x37c9>
  406d6b:	nop    DWORD PTR [rax+rax*1+0x0]
  406d70:	lea    r15,[r9+0x1]
  406d74:	mov    rax,r13
  406d77:	sub    rax,r15
  406d7a:	cmp    rax,0x1
  406d7e:	jle    406d8d <_start@@Base+0x3a5d>
  406d80:	cmp    BYTE PTR [r9+0x1],0x20
  406d85:	jg     406d9e <_start@@Base+0x3a6e>
  406d87:	je     406f78 <_start@@Base+0x3c48>
  406d8d:	mov    rsi,r15
  406d90:	mov    rdx,r13
  406d93:	mov    rdi,rbx
  406d96:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406d9b:	mov    r15,rax
  406d9e:	cmp    r13,r15
  406da1:	je     406f90 <_start@@Base+0x3c60>
  406da7:	cmp    BYTE PTR [r15],0x7d
  406dab:	jne    406960 <_start@@Base+0x3630>
  406db1:	lea    r9,[r15+0x1]
  406db5:	mov    rax,r13
  406db8:	sub    rax,r9
  406dbb:	cmp    rax,0x1
  406dbf:	jle    406dd2 <_start@@Base+0x3aa2>
  406dc1:	cmp    BYTE PTR [r15+0x1],0x20
  406dc6:	jg     4068d8 <_start@@Base+0x35a8>
  406dcc:	je     407058 <_start@@Base+0x3d28>
  406dd2:	mov    rsi,r9
  406dd5:	mov    rdx,r13
  406dd8:	mov    rdi,rbx
  406ddb:	call   416950 <flatcc_json_parser_space_ext@@Base>
  406de0:	mov    r9,rax
  406de3:	jmp    4068d8 <_start@@Base+0x35a8>
  406de8:	nop    DWORD PTR [rax+rax*1+0x0]
  406df0:	cmp    al,0x22
  406df2:	jne    406b38 <_start@@Base+0x3808>
  406df8:	lea    rsi,[r15+0x2]
  406dfc:	jmp    406b7b <_start@@Base+0x384b>
  406e01:	nop    DWORD PTR [rax+0x0]
  406e08:	cmp    al,0x22
  406e0a:	jne    406b38 <_start@@Base+0x3808>
  406e10:	lea    rsi,[r15+0x2]
  406e14:	jmp    4069e9 <_start@@Base+0x36b9>
  406e19:	nop    DWORD PTR [rax+0x0]
  406e20:	mov    r9,r13
  406e23:	jmp    406c17 <_start@@Base+0x38e7>
  406e28:	nop    DWORD PTR [rax+rax*1+0x0]
  406e30:	mov    r9,r13
  406e33:	jmp    406a87 <_start@@Base+0x3757>
  406e38:	nop    DWORD PTR [rax+rax*1+0x0]
  406e40:	mov    rsi,r15
  406e43:	mov    ecx,0x5
  406e48:	mov    rdx,r13
  406e4b:	mov    rdi,rbx
  406e4e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406e53:	mov    r15,rax
  406e56:	jmp    406984 <_start@@Base+0x3654>
  406e5b:	nop    DWORD PTR [rax+rax*1+0x0]
  406e60:	mov    rax,QWORD PTR [rsp+0x20]
  406e65:	mov    r8d,DWORD PTR [rsp+0x1c]
  406e6a:	mov    edx,eax
  406e6c:	test   r8d,r8d
  406e6f:	je     406f38 <_start@@Base+0x3c08>
  406e75:	neg    edx
  406e77:	mov    ecx,0x8
  406e7c:	cmp    rax,0x80
  406e82:	jbe    406c58 <_start@@Base+0x3928>
  406e88:	mov    rsi,r9
  406e8b:	mov    rdx,r13
  406e8e:	mov    rdi,rbx
  406e91:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406e96:	mov    r11,QWORD PTR [rsp+0x8]
  406e9b:	mov    r9,rax
  406e9e:	cmp    r11,rax
  406ea1:	je     406c17 <_start@@Base+0x38e7>
  406ea7:	movzx  edx,BYTE PTR [rsp+0x1a]
  406eac:	jmp    406c58 <_start@@Base+0x3928>
  406eb1:	nop    DWORD PTR [rax+0x0]
  406eb8:	mov    rax,QWORD PTR [rsp+0x20]
  406ebd:	mov    ecx,DWORD PTR [rsp+0x1c]
  406ec1:	mov    edx,eax
  406ec3:	test   ecx,ecx
  406ec5:	je     406f58 <_start@@Base+0x3c28>
  406ecb:	neg    edx
  406ecd:	mov    ecx,0x8
  406ed2:	cmp    rax,0x8000
  406ed8:	jbe    406ac8 <_start@@Base+0x3798>
  406ede:	mov    rsi,r9
  406ee1:	mov    rdx,r13
  406ee4:	mov    rdi,rbx
  406ee7:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406eec:	mov    r11,QWORD PTR [rsp+0x8]
  406ef1:	mov    r9,rax
  406ef4:	cmp    r11,rax
  406ef7:	je     406a87 <_start@@Base+0x3757>
  406efd:	movzx  edx,WORD PTR [rsp+0x1a]
  406f02:	jmp    406ac8 <_start@@Base+0x3798>
  406f07:	nop    WORD PTR [rax+rax*1+0x0]
  406f10:	mov    r9,rsi
  406f13:	jmp    4068d8 <_start@@Base+0x35a8>
  406f18:	nop    DWORD PTR [rax+rax*1+0x0]
  406f20:	cmp    BYTE PTR [r9+0x2],0x20
  406f25:	jle    406d41 <_start@@Base+0x3a11>
  406f2b:	add    r9,0x2
  406f2f:	jmp    4068d8 <_start@@Base+0x35a8>
  406f34:	nop    DWORD PTR [rax+0x0]
  406f38:	cmp    rax,0x7f
  406f3c:	jbe    406c58 <_start@@Base+0x3928>
  406f42:	mov    QWORD PTR [rsp+0x8],r11
  406f47:	mov    ecx,0x7
  406f4c:	jmp    406e88 <_start@@Base+0x3b58>
  406f51:	nop    DWORD PTR [rax+0x0]
  406f58:	cmp    rax,0x7fff
  406f5e:	jbe    406ac8 <_start@@Base+0x3798>
  406f64:	mov    QWORD PTR [rsp+0x8],r11
  406f69:	mov    ecx,0x7
  406f6e:	jmp    406ede <_start@@Base+0x3bae>
  406f73:	nop    DWORD PTR [rax+rax*1+0x0]
  406f78:	cmp    BYTE PTR [r9+0x2],0x20
  406f7d:	jle    406d8d <_start@@Base+0x3a5d>
  406f83:	lea    r15,[r9+0x2]
  406f87:	cmp    r13,r15
  406f8a:	jne    406da7 <_start@@Base+0x3a77>
  406f90:	mov    ecx,0xa
  406f95:	mov    rdx,r13
  406f98:	mov    rsi,r13
  406f9b:	mov    rdi,rbx
  406f9e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  406fa3:	mov    r9,rax
  406fa6:	jmp    4068d8 <_start@@Base+0x35a8>
  406fab:	nop    DWORD PTR [rax+rax*1+0x0]
  406fb0:	cmp    BYTE PTR [rsi+0x1],0x20
  406fb4:	jle    406b92 <_start@@Base+0x3862>
  406fba:	inc    rsi
  406fbd:	jmp    406ba0 <_start@@Base+0x3870>
  406fc2:	nop    WORD PTR [rax+rax*1+0x0]
  406fc8:	cmp    BYTE PTR [rsi+0x1],0x20
  406fcc:	jle    406a00 <_start@@Base+0x36d0>
  406fd2:	inc    rsi
  406fd5:	jmp    406a0e <_start@@Base+0x36de>
  406fda:	nop    WORD PTR [rax+rax*1+0x0]
  406fe0:	lea    r11,[rsi+0x1]
  406fe4:	mov    rax,r13
  406fe7:	sub    rax,r11
  406fea:	cmp    rax,0x1
  406fee:	jle    407006 <_start@@Base+0x3cd6>
  406ff0:	cmp    BYTE PTR [rsi+0x1],0x20
  406ff4:	jg     406bc1 <_start@@Base+0x3891>
  406ffa:	jne    407006 <_start@@Base+0x3cd6>
  406ffc:	cmp    BYTE PTR [rsi+0x2],0x20
  407000:	jg     4070ba <_start@@Base+0x3d8a>
  407006:	mov    rsi,r11
  407009:	mov    rdx,r13
  40700c:	mov    rdi,rbx
  40700f:	call   416950 <flatcc_json_parser_space_ext@@Base>
  407014:	mov    r11,rax
  407017:	jmp    406bc1 <_start@@Base+0x3891>
  40701c:	nop    DWORD PTR [rax+0x0]
  407020:	lea    r11,[rsi+0x1]
  407024:	mov    rax,r13
  407027:	sub    rax,r11
  40702a:	cmp    rax,0x1
  40702e:	jle    407042 <_start@@Base+0x3d12>
  407030:	cmp    BYTE PTR [rsi+0x1],0x20
  407034:	jg     406a2f <_start@@Base+0x36ff>
  40703a:	jne    407042 <_start@@Base+0x3d12>
  40703c:	cmp    BYTE PTR [rsi+0x2],0x20
  407040:	jg     4070b1 <_start@@Base+0x3d81>
  407042:	mov    rsi,r11
  407045:	mov    rdx,r13
  407048:	mov    rdi,rbx
  40704b:	call   416950 <flatcc_json_parser_space_ext@@Base>
  407050:	mov    r11,rax
  407053:	jmp    406a2f <_start@@Base+0x36ff>
  407058:	cmp    BYTE PTR [r15+0x2],0x20
  40705d:	jle    406dd2 <_start@@Base+0x3aa2>
  407063:	lea    r9,[r15+0x2]
  407067:	jmp    4068d8 <_start@@Base+0x35a8>
  40706c:	mov    ecx,0x21
  407071:	mov    rdx,r13
  407074:	mov    rsi,rax
  407077:	mov    rdi,rbx
  40707a:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40707f:	mov    r9,rax
  407082:	jmp    4068d8 <_start@@Base+0x35a8>
  407087:	cmp    BYTE PTR [rsi+0x2],0x20
  40708b:	jle    40691c <_start@@Base+0x35ec>
  407091:	lea    r15,[rsi+0x2]
  407095:	jmp    40692d <_start@@Base+0x35fd>
  40709a:	lea    rsi,[r15+0x1]
  40709e:	mov    rdx,r13
  4070a1:	mov    rdi,rbx
  4070a4:	call   403550 <_start@@Base+0x220>
  4070a9:	mov    r9,rax
  4070ac:	jmp    4068d8 <_start@@Base+0x35a8>
  4070b1:	lea    r11,[rsi+0x2]
  4070b5:	jmp    406a2f <_start@@Base+0x36ff>
  4070ba:	lea    r11,[rsi+0x2]
  4070be:	jmp    406bc1 <_start@@Base+0x3891>
  4070c3:	call   4031c0 <__stack_chk_fail@plt>
  4070c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4070d0:	push   r13
  4070d2:	mov    r13,rcx
  4070d5:	push   r12
  4070d7:	mov    r12,rdi
  4070da:	push   rbp
  4070db:	mov    rbp,rdx
  4070de:	push   rbx
  4070df:	mov    rbx,rsi
  4070e2:	xor    esi,esi
  4070e4:	sub    rsp,0x8
  4070e8:	mov    DWORD PTR [rcx],0x0
  4070ee:	mov    rdi,QWORD PTR [rdi]
  4070f1:	call   4130c0 <flatcc_builder_start_table@@Base>
  4070f6:	test   eax,eax
  4070f8:	je     407120 <_start@@Base+0x3df0>
  4070fa:	add    rsp,0x8
  4070fe:	mov    rsi,rbx
  407101:	pop    rbx
  407102:	mov    rdx,rbp
  407105:	pop    rbp
  407106:	mov    rdi,r12
  407109:	pop    r12
  40710b:	mov    ecx,0x21
  407110:	pop    r13
  407112:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  407117:	nop    WORD PTR [rax+rax*1+0x0]
  407120:	cmp    rbx,rbp
  407123:	je     40712a <_start@@Base+0x3dfa>
  407125:	cmp    BYTE PTR [rbx],0x7b
  407128:	je     407170 <_start@@Base+0x3e40>
  40712a:	mov    ecx,0x15
  40712f:	nop
  407130:	mov    rsi,rbx
  407133:	mov    rdx,rbp
  407136:	mov    rdi,r12
  407139:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40713e:	mov    rbx,rax
  407141:	mov    eax,DWORD PTR [r12+0x20]
  407146:	test   eax,eax
  407148:	jne    4070fa <_start@@Base+0x3dca>
  40714a:	mov    rdi,QWORD PTR [r12]
  40714e:	call   413a40 <flatcc_builder_end_table@@Base>
  407153:	mov    DWORD PTR [r13+0x0],eax
  407157:	test   eax,eax
  407159:	je     4070fa <_start@@Base+0x3dca>
  40715b:	add    rsp,0x8
  40715f:	mov    rax,rbx
  407162:	pop    rbx
  407163:	pop    rbp
  407164:	pop    r12
  407166:	pop    r13
  407168:	ret    
  407169:	nop    DWORD PTR [rax+0x0]
  407170:	lea    rsi,[rbx+0x1]
  407174:	mov    rax,rbp
  407177:	sub    rax,rsi
  40717a:	cmp    rax,0x1
  40717e:	jle    40718c <_start@@Base+0x3e5c>
  407180:	cmp    BYTE PTR [rbx+0x1],0x20
  407184:	jg     40719a <_start@@Base+0x3e6a>
  407186:	je     40736b <_start@@Base+0x403b>
  40718c:	mov    rdx,rbp
  40718f:	mov    rdi,r12
  407192:	call   416950 <flatcc_json_parser_space_ext@@Base>
  407197:	mov    rsi,rax
  40719a:	cmp    rbp,rsi
  40719d:	je     4071b0 <_start@@Base+0x3e80>
  40719f:	cmp    BYTE PTR [rsi],0x7d
  4071a2:	je     40737e <_start@@Base+0x404e>
  4071a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4071b0:	cmp    rbp,rsi
  4071b3:	je     4071cd <_start@@Base+0x3e9d>
  4071b5:	movzx  eax,BYTE PTR [rsi]
  4071b8:	cmp    al,0x22
  4071ba:	je     407220 <_start@@Base+0x3ef0>
  4071bc:	cmp    al,0x2e
  4071be:	je     4072f8 <_start@@Base+0x3fc8>
  4071c4:	mov    DWORD PTR [r12+0x14],0x1
  4071cd:	mov    rdx,rbp
  4071d0:	mov    rdi,r12
  4071d3:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  4071d8:	mov    rbx,rax
  4071db:	mov    rax,rbp
  4071de:	sub    rax,rbx
  4071e1:	cmp    rax,0x1
  4071e5:	jle    4071ee <_start@@Base+0x3ebe>
  4071e7:	cmp    BYTE PTR [rbx],0x20
  4071ea:	jg     4071ff <_start@@Base+0x3ecf>
  4071ec:	je     407268 <_start@@Base+0x3f38>
  4071ee:	mov    rsi,rbx
  4071f1:	mov    rdx,rbp
  4071f4:	mov    rdi,r12
  4071f7:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4071fc:	mov    rbx,rax
  4071ff:	cmp    rbp,rbx
  407202:	je     407141 <_start@@Base+0x3e11>
  407208:	movzx  eax,BYTE PTR [rbx]
  40720b:	cmp    al,0x2c
  40720d:	je     407280 <_start@@Base+0x3f50>
  40720f:	cmp    al,0x7d
  407211:	je     407230 <_start@@Base+0x3f00>
  407213:	mov    ecx,0xa
  407218:	jmp    407130 <_start@@Base+0x3e00>
  40721d:	nop    DWORD PTR [rax]
  407220:	inc    rsi
  407223:	mov    DWORD PTR [r12+0x14],0x0
  40722c:	jmp    4071cd <_start@@Base+0x3e9d>
  40722e:	xchg   ax,ax
  407230:	lea    rsi,[rbx+0x1]
  407234:	mov    rax,rbp
  407237:	sub    rax,rsi
  40723a:	cmp    rax,0x1
  40723e:	jle    407250 <_start@@Base+0x3f20>
  407240:	cmp    BYTE PTR [rbx+0x1],0x20
  407244:	jg     407310 <_start@@Base+0x3fe0>
  40724a:	je     407320 <_start@@Base+0x3ff0>
  407250:	mov    rdx,rbp
  407253:	mov    rdi,r12
  407256:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40725b:	mov    rbx,rax
  40725e:	jmp    407141 <_start@@Base+0x3e11>
  407263:	nop    DWORD PTR [rax+rax*1+0x0]
  407268:	cmp    BYTE PTR [rbx+0x1],0x20
  40726c:	jle    4071ee <_start@@Base+0x3ebe>
  407272:	inc    rbx
  407275:	jmp    4071ff <_start@@Base+0x3ecf>
  407277:	nop    WORD PTR [rax+rax*1+0x0]
  407280:	lea    rsi,[rbx+0x1]
  407284:	mov    rax,rbp
  407287:	sub    rax,rsi
  40728a:	cmp    rax,0x1
  40728e:	jle    40729c <_start@@Base+0x3f6c>
  407290:	cmp    BYTE PTR [rbx+0x1],0x20
  407294:	jg     4072aa <_start@@Base+0x3f7a>
  407296:	je     407338 <_start@@Base+0x4008>
  40729c:	mov    rdx,rbp
  40729f:	mov    rdi,r12
  4072a2:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4072a7:	mov    rsi,rax
  4072aa:	cmp    rbp,rsi
  4072ad:	je     407350 <_start@@Base+0x4020>
  4072b3:	cmp    BYTE PTR [rsi],0x7d
  4072b6:	jne    4071b0 <_start@@Base+0x3e80>
  4072bc:	lea    rbx,[rsi+0x1]
  4072c0:	mov    rax,rbp
  4072c3:	sub    rax,rbx
  4072c6:	cmp    rax,0x1
  4072ca:	jle    4072dc <_start@@Base+0x3fac>
  4072cc:	cmp    BYTE PTR [rsi+0x1],0x20
  4072d0:	jg     407141 <_start@@Base+0x3e11>
  4072d6:	je     407394 <_start@@Base+0x4064>
  4072dc:	mov    rsi,rbx
  4072df:	mov    rdx,rbp
  4072e2:	mov    rdi,r12
  4072e5:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4072ea:	mov    rbx,rax
  4072ed:	jmp    407141 <_start@@Base+0x3e11>
  4072f2:	nop    WORD PTR [rax+rax*1+0x0]
  4072f8:	mov    ecx,0x5
  4072fd:	mov    rdx,rbp
  407300:	mov    rdi,r12
  407303:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  407308:	mov    rsi,rax
  40730b:	jmp    4071cd <_start@@Base+0x3e9d>
  407310:	mov    rbx,rsi
  407313:	jmp    407141 <_start@@Base+0x3e11>
  407318:	nop    DWORD PTR [rax+rax*1+0x0]
  407320:	cmp    BYTE PTR [rbx+0x2],0x20
  407324:	jle    407250 <_start@@Base+0x3f20>
  40732a:	add    rbx,0x2
  40732e:	jmp    407141 <_start@@Base+0x3e11>
  407333:	nop    DWORD PTR [rax+rax*1+0x0]
  407338:	cmp    BYTE PTR [rbx+0x2],0x20
  40733c:	jle    40729c <_start@@Base+0x3f6c>
  407342:	lea    rsi,[rbx+0x2]
  407346:	jmp    4072aa <_start@@Base+0x3f7a>
  40734b:	nop    DWORD PTR [rax+rax*1+0x0]
  407350:	mov    ecx,0xa
  407355:	mov    rdx,rbp
  407358:	mov    rsi,rbp
  40735b:	mov    rdi,r12
  40735e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  407363:	mov    rbx,rax
  407366:	jmp    407141 <_start@@Base+0x3e11>
  40736b:	cmp    BYTE PTR [rbx+0x2],0x20
  40736f:	jle    40718c <_start@@Base+0x3e5c>
  407375:	lea    rsi,[rbx+0x2]
  407379:	jmp    40719a <_start@@Base+0x3e6a>
  40737e:	inc    rsi
  407381:	mov    rdx,rbp
  407384:	mov    rdi,r12
  407387:	call   403550 <_start@@Base+0x220>
  40738c:	mov    rbx,rax
  40738f:	jmp    407141 <_start@@Base+0x3e11>
  407394:	cmp    BYTE PTR [rsi+0x2],0x20
  407398:	jle    4072dc <_start@@Base+0x3fac>
  40739e:	lea    rbx,[rsi+0x2]
  4073a2:	jmp    407141 <_start@@Base+0x3e11>
  4073a7:	nop    WORD PTR [rax+rax*1+0x0]
  4073b0:	endbr64 
  4073b4:	mov    rax,rdx
  4073b7:	sub    rax,rsi
  4073ba:	mov    r10,rsi
  4073bd:	cmp    rax,0x7
  4073c1:	ja     4073d0 <_start@@Base+0x40a0>
  4073c3:	mov    rax,r10
  4073c6:	ret    
  4073c7:	nop    WORD PTR [rax+rax*1+0x0]
  4073d0:	movabs rax,0x6574636172616843
  4073da:	cmp    QWORD PTR [rsi],rax
  4073dd:	jne    4073c3 <_start@@Base+0x4093>
  4073df:	push   rbp
  4073e0:	lea    r11,[rsi+0x8]
  4073e4:	mov    rbp,rdi
  4073e7:	push   rbx
  4073e8:	mov    rbx,rdx
  4073eb:	sub    rbx,r11
  4073ee:	sub    rsp,0x18
  4073f2:	cmp    rbx,0x7
  4073f6:	ja     407448 <_start@@Base+0x4118>
  4073f8:	mov    rsi,rdx
  4073fb:	mov    rdi,r11
  4073fe:	mov    QWORD PTR [rsp+0x8],rcx
  407403:	mov    QWORD PTR [rsp],rdx
  407407:	call   403420 <_start@@Base+0xf0>
  40740c:	mov    rcx,QWORD PTR [rsp+0x8]
  407411:	mov    rdx,QWORD PTR [rsp]
  407415:	movabs rsi,0xff00000000000000
  40741f:	and    rax,rsi
  407422:	movabs rsi,0x7200000000000000
  40742c:	cmp    rax,rsi
  40742f:	jne    407437 <_start@@Base+0x4107>
  407431:	cmp    rbx,0x1
  407435:	jg     407450 <_start@@Base+0x4120>
  407437:	add    rsp,0x18
  40743b:	pop    rbx
  40743c:	mov    rax,r10
  40743f:	pop    rbp
  407440:	ret    
  407441:	nop    DWORD PTR [rax+0x0]
  407448:	movbe  rax,QWORD PTR [rsi+0x8]
  40744e:	jmp    407415 <_start@@Base+0x40e5>
  407450:	cmp    BYTE PTR [r10+0x9],0x2e
  407455:	jne    407437 <_start@@Base+0x4107>
  407457:	lea    rsi,[r10+0xa]
  40745b:	cmp    r11,rsi
  40745e:	je     407437 <_start@@Base+0x4107>
  407460:	add    rsp,0x18
  407464:	pop    rbx
  407465:	mov    rdi,rbp
  407468:	pop    rbp
  407469:	jmp    403590 <_start@@Base+0x260>
  40746e:	xchg   ax,ax
  407470:	movsxd rcx,ecx
  407473:	mov    r9d,DWORD PTR [rdi+0x14]
  407477:	lea    r8,[rsi+rcx*1]
  40747b:	movzx  eax,BYTE PTR [r8]
  40747f:	test   r9d,r9d
  407482:	je     4074f0 <_start@@Base+0x41c0>
  407484:	cmp    al,0x20
  407486:	jle    40748c <_start@@Base+0x415c>
  407488:	cmp    al,0x3a
  40748a:	jne    4074f4 <_start@@Base+0x41c4>
  40748c:	mov    DWORD PTR [rdi+0x14],0x0
  407493:	push   rbp
  407494:	mov    rax,rdx
  407497:	sub    rax,r8
  40749a:	push   rbx
  40749b:	mov    rbp,rdx
  40749e:	mov    rbx,rdi
  4074a1:	sub    rsp,0x8
  4074a5:	cmp    rax,0x1
  4074a9:	jle    4074b3 <_start@@Base+0x4183>
  4074ab:	cmp    BYTE PTR [r8],0x20
  4074af:	jg     4074c4 <_start@@Base+0x4194>
  4074b1:	je     407510 <_start@@Base+0x41e0>
  4074b3:	mov    rsi,r8
  4074b6:	mov    rdx,rbp
  4074b9:	mov    rdi,rbx
  4074bc:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4074c1:	mov    r8,rax
  4074c4:	cmp    rbp,r8
  4074c7:	je     4074cf <_start@@Base+0x419f>
  4074c9:	cmp    BYTE PTR [r8],0x3a
  4074cd:	je     407520 <_start@@Base+0x41f0>
  4074cf:	add    rsp,0x8
  4074d3:	mov    rdi,rbx
  4074d6:	pop    rbx
  4074d7:	mov    rdx,rbp
  4074da:	mov    ecx,0x4
  4074df:	mov    rsi,r8
  4074e2:	pop    rbp
  4074e3:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4074e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4074f0:	cmp    al,0x22
  4074f2:	je     407500 <_start@@Base+0x41d0>
  4074f4:	mov    rax,rsi
  4074f7:	ret    
  4074f8:	nop    DWORD PTR [rax+rax*1+0x0]
  407500:	lea    r8,[rsi+rcx*1+0x1]
  407505:	jmp    407493 <_start@@Base+0x4163>
  407507:	nop    WORD PTR [rax+rax*1+0x0]
  407510:	cmp    BYTE PTR [r8+0x1],0x20
  407515:	jle    4074b3 <_start@@Base+0x4183>
  407517:	inc    r8
  40751a:	jmp    4074c4 <_start@@Base+0x4194>
  40751c:	nop    DWORD PTR [rax+0x0]
  407520:	lea    rsi,[r8+0x1]
  407524:	mov    rax,rbp
  407527:	sub    rax,rsi
  40752a:	cmp    rax,0x1
  40752e:	jle    407539 <_start@@Base+0x4209>
  407530:	cmp    BYTE PTR [r8+0x1],0x20
  407535:	jg     407555 <_start@@Base+0x4225>
  407537:	je     40754a <_start@@Base+0x421a>
  407539:	add    rsp,0x8
  40753d:	mov    rdi,rbx
  407540:	pop    rbx
  407541:	mov    rdx,rbp
  407544:	pop    rbp
  407545:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  40754a:	cmp    BYTE PTR [r8+0x2],0x20
  40754f:	jle    407539 <_start@@Base+0x4209>
  407551:	lea    rsi,[r8+0x2]
  407555:	add    rsp,0x8
  407559:	pop    rbx
  40755a:	mov    rax,rsi
  40755d:	pop    rbp
  40755e:	ret    
  40755f:	nop
  407560:	push   r12
  407562:	mov    rax,rdx
  407565:	sub    rax,rsi
  407568:	push   rbp
  407569:	mov    r12,r8
  40756c:	mov    rbp,rcx
  40756f:	push   rbx
  407570:	mov    rbx,rsi
  407573:	cmp    rax,0x7
  407577:	ja     407640 <_start@@Base+0x4310>
  40757d:	lea    rcx,[rip+0x12af0]        # 41a074 <_IO_stdin_used@@Base+0x74>
  407584:	movsxd rax,DWORD PTR [rcx+rax*4]
  407588:	add    rax,rcx
  40758b:	notrack jmp rax
  40758e:	xchg   ax,ax
  407590:	movsx  rsi,BYTE PTR [rsi+0x6]
  407595:	shl    rsi,0x8
  407599:	movsx  rcx,BYTE PTR [rbx+0x5]
  40759e:	mov    rax,rcx
  4075a1:	shl    rax,0x10
  4075a5:	or     rsi,rax
  4075a8:	movsx  rcx,BYTE PTR [rbx+0x4]
  4075ad:	mov    rax,rcx
  4075b0:	shl    rax,0x18
  4075b4:	or     rax,rsi
  4075b7:	movsx  rcx,BYTE PTR [rbx+0x3]
  4075bc:	mov    rsi,rcx
  4075bf:	shl    rsi,0x20
  4075c3:	or     rax,rsi
  4075c6:	movsx  rcx,BYTE PTR [rbx+0x2]
  4075cb:	mov    rsi,rcx
  4075ce:	shl    rsi,0x28
  4075d2:	or     rsi,rax
  4075d5:	movsx  rcx,BYTE PTR [rbx+0x1]
  4075da:	mov    rax,rcx
  4075dd:	shl    rax,0x30
  4075e1:	or     rsi,rax
  4075e4:	movsx  rcx,BYTE PTR [rbx]
  4075e8:	mov    rax,rcx
  4075eb:	shl    rax,0x38
  4075ef:	or     rax,rsi
  4075f2:	movabs rcx,0xff00000000000000
  4075fc:	and    rax,rcx
  4075ff:	movabs rcx,0x7800000000000000
  407609:	cmp    rax,rcx
  40760c:	jne    407635 <_start@@Base+0x4305>
  40760e:	mov    r8,r9
  407611:	mov    ecx,0x1
  407616:	mov    rsi,rbx
  407619:	call   417430 <flatcc_json_parser_match_constant@@Base>
  40761e:	cmp    rbx,rax
  407621:	je     407635 <_start@@Base+0x4305>
  407623:	mov    QWORD PTR [r12],0x0
  40762b:	mov    DWORD PTR [rbp+0x0],0x0
  407632:	mov    rbx,rax
  407635:	mov    rax,rbx
  407638:	pop    rbx
  407639:	pop    rbp
  40763a:	pop    r12
  40763c:	ret    
  40763d:	nop    DWORD PTR [rax]
  407640:	movzx  eax,BYTE PTR [rsi]
  407643:	bswap  rax
  407646:	jmp    4075ff <_start@@Base+0x42cf>
  407648:	nop    DWORD PTR [rax+rax*1+0x0]
  407650:	xor    esi,esi
  407652:	jmp    407599 <_start@@Base+0x4269>
  407657:	nop    WORD PTR [rax+rax*1+0x0]
  407660:	xor    esi,esi
  407662:	jmp    4075a8 <_start@@Base+0x4278>
  407667:	nop    WORD PTR [rax+rax*1+0x0]
  407670:	xor    eax,eax
  407672:	jmp    4075b7 <_start@@Base+0x4287>
  407677:	nop    WORD PTR [rax+rax*1+0x0]
  407680:	xor    eax,eax
  407682:	jmp    4075c6 <_start@@Base+0x4296>
  407687:	nop    WORD PTR [rax+rax*1+0x0]
  407690:	xor    esi,esi
  407692:	jmp    4075d5 <_start@@Base+0x42a5>
  407697:	nop    WORD PTR [rax+rax*1+0x0]
  4076a0:	xor    esi,esi
  4076a2:	jmp    4075e4 <_start@@Base+0x42b4>
  4076a7:	nop    WORD PTR [rax+rax*1+0x0]
  4076b0:	push   r13
  4076b2:	mov    rax,rdx
  4076b5:	sub    rax,rsi
  4076b8:	push   r12
  4076ba:	mov    r10,rdi
  4076bd:	mov    r12,r8
  4076c0:	push   rbp
  4076c1:	mov    rbp,rcx
  4076c4:	push   rbx
  4076c5:	mov    rbx,rsi
  4076c8:	sub    rsp,0x18
  4076cc:	cmp    rax,0x7
  4076d0:	ja     4076e8 <_start@@Base+0x43b8>
  4076d2:	lea    rcx,[rip+0x129bb]        # 41a094 <_IO_stdin_used@@Base+0x94>
  4076d9:	movsxd rax,DWORD PTR [rcx+rax*4]
  4076dd:	add    rax,rcx
  4076e0:	notrack jmp rax
  4076e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4076e8:	movbe  rax,QWORD PTR [rsi]
  4076ed:	movabs rcx,0x496e506172656e74
  4076f7:	cmp    rax,rcx
  4076fa:	jne    4077b2 <_start@@Base+0x4482>
  407700:	lea    rdi,[rsi+0x8]
  407704:	mov    rax,rdx
  407707:	sub    rax,rdi
  40770a:	cmp    rax,0x7
  40770e:	ja     407888 <_start@@Base+0x4558>
  407714:	mov    rsi,rdx
  407717:	mov    QWORD PTR [rsp+0x8],rdx
  40771c:	call   403420 <_start@@Base+0xf0>
  407721:	mov    rdx,QWORD PTR [rsp+0x8]
  407726:	movabs rcx,0x4e616d6573706163
  407730:	cmp    rax,rcx
  407733:	je     407810 <_start@@Base+0x44e0>
  407739:	mov    rax,rbx
  40773c:	add    rsp,0x18
  407740:	pop    rbx
  407741:	pop    rbp
  407742:	pop    r12
  407744:	pop    r13
  407746:	ret    
  407747:	nop    WORD PTR [rax+rax*1+0x0]
  407750:	movsx  rsi,BYTE PTR [rsi+0x6]
  407755:	shl    rsi,0x8
  407759:	movsx  rcx,BYTE PTR [rbx+0x5]
  40775e:	mov    rax,rcx
  407761:	shl    rax,0x10
  407765:	or     rsi,rax
  407768:	movsx  rcx,BYTE PTR [rbx+0x4]
  40776d:	mov    rax,rcx
  407770:	shl    rax,0x18
  407774:	or     rax,rsi
  407777:	movsx  rcx,BYTE PTR [rbx+0x3]
  40777c:	mov    rsi,rcx
  40777f:	shl    rsi,0x20
  407783:	or     rax,rsi
  407786:	movsx  rcx,BYTE PTR [rbx+0x2]
  40778b:	mov    rsi,rcx
  40778e:	shl    rsi,0x28
  407792:	or     rsi,rax
  407795:	movsx  rcx,BYTE PTR [rbx+0x1]
  40779a:	mov    rax,rcx
  40779d:	shl    rax,0x30
  4077a1:	or     rsi,rax
  4077a4:	movsx  rcx,BYTE PTR [rbx]
  4077a8:	mov    rax,rcx
  4077ab:	shl    rax,0x38
  4077af:	or     rax,rsi
  4077b2:	movabs rcx,0xffffffff00000000
  4077bc:	and    rax,rcx
  4077bf:	movabs rcx,0x4e4f4e4500000000
  4077c9:	cmp    rax,rcx
  4077cc:	jne    407739 <_start@@Base+0x4409>
  4077d2:	mov    r8,r9
  4077d5:	mov    ecx,0x4
  4077da:	mov    rsi,rbx
  4077dd:	mov    rdi,r10
  4077e0:	call   417430 <flatcc_json_parser_match_constant@@Base>
  4077e5:	cmp    rbx,rax
  4077e8:	je     40773c <_start@@Base+0x440c>
  4077ee:	mov    QWORD PTR [r12],0x0
  4077f6:	mov    DWORD PTR [rbp+0x0],0x0
  4077fd:	add    rsp,0x18
  407801:	pop    rbx
  407802:	pop    rbp
  407803:	pop    r12
  407805:	pop    r13
  407807:	ret    
  407808:	nop    DWORD PTR [rax+rax*1+0x0]
  407810:	lea    r13,[rbx+0x10]
  407814:	mov    rax,rdx
  407817:	sub    rax,r13
  40781a:	cmp    rax,0x7
  40781e:	ja     407898 <_start@@Base+0x4568>
  407820:	mov    rsi,rdx
  407823:	mov    rdi,r13
  407826:	mov    QWORD PTR [rsp+0x8],rdx
  40782b:	call   403420 <_start@@Base+0xf0>
  407830:	mov    rdx,QWORD PTR [rsp+0x8]
  407835:	movabs rcx,0xff00000000000000
  40783f:	and    rax,rcx
  407842:	movabs rcx,0x6500000000000000
  40784c:	cmp    rax,rcx
  40784f:	jne    407739 <_start@@Base+0x4409>
  407855:	mov    r8,r9
  407858:	mov    ecx,0x1
  40785d:	mov    rsi,r13
  407860:	mov    rdi,r10
  407863:	call   417430 <flatcc_json_parser_match_constant@@Base>
  407868:	cmp    r13,rax
  40786b:	je     407739 <_start@@Base+0x4409>
  407871:	mov    QWORD PTR [r12],0x1
  407879:	mov    DWORD PTR [rbp+0x0],0x0
  407880:	jmp    40773c <_start@@Base+0x440c>
  407885:	nop    DWORD PTR [rax]
  407888:	movbe  rax,QWORD PTR [rsi+0x8]
  40788e:	jmp    407726 <_start@@Base+0x43f6>
  407893:	nop    DWORD PTR [rax+rax*1+0x0]
  407898:	movbe  rax,QWORD PTR [rbx+0x10]
  40789e:	jmp    407835 <_start@@Base+0x4505>
  4078a0:	xor    esi,esi
  4078a2:	jmp    407759 <_start@@Base+0x4429>
  4078a7:	nop    WORD PTR [rax+rax*1+0x0]
  4078b0:	xor    esi,esi
  4078b2:	jmp    407768 <_start@@Base+0x4438>
  4078b7:	nop    WORD PTR [rax+rax*1+0x0]
  4078c0:	xor    eax,eax
  4078c2:	jmp    407777 <_start@@Base+0x4447>
  4078c7:	nop    WORD PTR [rax+rax*1+0x0]
  4078d0:	xor    eax,eax
  4078d2:	jmp    407786 <_start@@Base+0x4456>
  4078d7:	nop    WORD PTR [rax+rax*1+0x0]
  4078e0:	xor    esi,esi
  4078e2:	jmp    407795 <_start@@Base+0x4465>
  4078e7:	nop    WORD PTR [rax+rax*1+0x0]
  4078f0:	xor    esi,esi
  4078f2:	jmp    4077a4 <_start@@Base+0x4474>
  4078f7:	nop    WORD PTR [rax+rax*1+0x0]
  407900:	endbr64 
  407904:	push   r14
  407906:	mov    rax,rdx
  407909:	sub    rax,rsi
  40790c:	push   r13
  40790e:	mov    r10,rsi
  407911:	mov    r11,rdx
  407914:	push   r12
  407916:	mov    r12,rdi
  407919:	push   rbp
  40791a:	mov    rbp,r8
  40791d:	push   rbx
  40791e:	mov    rbx,rcx
  407921:	cmp    rax,0x7
  407925:	ja     407ba8 <_start@@Base+0x4878>
  40792b:	mov    rsi,rdx
  40792e:	mov    rdi,r10
  407931:	call   403420 <_start@@Base+0xf0>
  407936:	movabs rdx,0x4d7947616d652e44
  407940:	cmp    rax,rdx
  407943:	ja     4079d8 <_start@@Base+0x46a8>
  407949:	movabs rdx,0x46616e746173792e
  407953:	cmp    rax,rdx
  407956:	jne    4079c5 <_start@@Base+0x4695>
  407958:	lea    rdi,[r10+0x8]
  40795c:	mov    rax,r11
  40795f:	sub    rax,rdi
  407962:	cmp    rax,0x7
  407966:	ja     407bb8 <_start@@Base+0x4888>
  40796c:	mov    rsi,r11
  40796f:	call   403420 <_start@@Base+0xf0>
  407974:	movabs rdx,0x4368617261637465
  40797e:	cmp    rax,rdx
  407981:	jne    4079c5 <_start@@Base+0x4695>
  407983:	lea    rdi,[r10+0x10]
  407987:	mov    r8,r11
  40798a:	sub    r8,rdi
  40798d:	cmp    r8,0x7
  407991:	ja     407e70 <_start@@Base+0x4b40>
  407997:	mov    rsi,r11
  40799a:	call   403420 <_start@@Base+0xf0>
  40799f:	movabs rdx,0xff00000000000000
  4079a9:	and    rax,rdx
  4079ac:	movabs rdx,0x7200000000000000
  4079b6:	cmp    rax,rdx
  4079b9:	jne    4079c5 <_start@@Base+0x4695>
  4079bb:	cmp    r8,0x1
  4079bf:	jg     407e48 <_start@@Base+0x4b18>
  4079c5:	pop    rbx
  4079c6:	pop    rbp
  4079c7:	pop    r12
  4079c9:	pop    r13
  4079cb:	mov    rax,r10
  4079ce:	pop    r14
  4079d0:	ret    
  4079d1:	nop    DWORD PTR [rax+0x0]
  4079d8:	movabs rdx,0x4d7947616d652e45
  4079e2:	cmp    rax,rdx
  4079e5:	je     407bc8 <_start@@Base+0x4898>
  4079eb:	movabs rdx,0x4d7947616d652e4f
  4079f5:	cmp    rax,rdx
  4079f8:	jne    4079c5 <_start@@Base+0x4695>
  4079fa:	lea    rdi,[r10+0x8]
  4079fe:	mov    rax,r11
  407a01:	sub    rax,rdi
  407a04:	cmp    rax,0x7
  407a08:	ja     407d50 <_start@@Base+0x4a20>
  407a0e:	mov    rsi,r11
  407a11:	call   403420 <_start@@Base+0xf0>
  407a16:	movabs rdx,0x746865724e616d65
  407a20:	cmp    rax,rdx
  407a23:	jne    4079c5 <_start@@Base+0x4695>
  407a25:	lea    rdi,[r10+0x10]
  407a29:	mov    rax,r11
  407a2c:	sub    rax,rdi
  407a2f:	cmp    rax,0x7
  407a33:	ja     407e80 <_start@@Base+0x4b50>
  407a39:	mov    rsi,r11
  407a3c:	call   403420 <_start@@Base+0xf0>
  407a41:	movabs rdx,0x53706163652e4672
  407a4b:	cmp    rax,rdx
  407a4e:	jne    4079c5 <_start@@Base+0x4695>
  407a54:	lea    rdi,[r10+0x18]
  407a58:	mov    rax,r11
  407a5b:	sub    rax,rdi
  407a5e:	cmp    rax,0x7
  407a62:	ja     407fd0 <_start@@Base+0x4ca0>
  407a68:	mov    rsi,r11
  407a6b:	call   403420 <_start@@Base+0xf0>
  407a70:	movabs rdx,0x6f6d496e636c7564
  407a7a:	cmp    rax,rdx
  407a7d:	jne    4079c5 <_start@@Base+0x4695>
  407a83:	lea    rdi,[r10+0x20]
  407a87:	mov    r8,r11
  407a8a:	sub    r8,rdi
  407a8d:	cmp    r8,0x7
  407a91:	ja     407fe6 <_start@@Base+0x4cb6>
  407a97:	mov    rsi,r11
  407a9a:	call   403420 <_start@@Base+0xf0>
  407a9f:	movabs rdx,0xff00000000000000
  407aa9:	and    rax,rdx
  407aac:	movabs rdx,0x6500000000000000
  407ab6:	cmp    rax,rdx
  407ab9:	jne    4079c5 <_start@@Base+0x4695>
  407abf:	cmp    r8,0x1
  407ac3:	jle    4079c5 <_start@@Base+0x4695>
  407ac9:	cmp    BYTE PTR [r10+0x21],0x2e
  407ace:	jne    4079c5 <_start@@Base+0x4695>
  407ad4:	lea    r13,[r10+0x22]
  407ad8:	mov    rax,r11
  407adb:	sub    rax,r13
  407ade:	cmp    rax,0x7
  407ae2:	ja     408058 <_start@@Base+0x4d28>
  407ae8:	mov    rsi,r11
  407aeb:	mov    rdi,r13
  407aee:	call   403420 <_start@@Base+0xf0>
  407af3:	movabs rdx,0xffffff0000000000
  407afd:	and    rdx,rax
  407b00:	movabs rcx,0x466f6f0000000000
  407b0a:	cmp    rdx,rcx
  407b0d:	je     408063 <_start@@Base+0x4d33>
  407b13:	endbr64 
  407b17:	movabs rdx,0x496e636c75646556
  407b21:	cmp    rax,rdx
  407b24:	jne    408098 <_start@@Base+0x4d68>
  407b2a:	lea    r14,[r10+0x2a]
  407b2e:	mov    rax,r11
  407b31:	sub    rax,r14
  407b34:	cmp    rax,0x7
  407b38:	ja     4080ab <_start@@Base+0x4d7b>
  407b3e:	mov    rsi,r11
  407b41:	mov    rdi,r14
  407b44:	call   403420 <_start@@Base+0xf0>
  407b49:	movabs rdx,0xffff000000000000
  407b53:	and    rax,rdx
  407b56:	movabs rdx,0x616c000000000000
  407b60:	mov    r10,r13
  407b63:	cmp    rax,rdx
  407b66:	jne    4079c5 <_start@@Base+0x4695>
  407b6c:	mov    r8,r9
  407b6f:	mov    ecx,0x2
  407b74:	mov    rdx,r11
  407b77:	mov    rsi,r14
  407b7a:	mov    rdi,r12
  407b7d:	call   417430 <flatcc_json_parser_match_constant@@Base>
  407b82:	mov    r10,rax
  407b85:	cmp    r14,rax
  407b88:	je     408098 <_start@@Base+0x4d68>
  407b8e:	mov    QWORD PTR [rbp+0x0],0x0
  407b96:	mov    DWORD PTR [rbx],0x0
  407b9c:	jmp    4079c5 <_start@@Base+0x4695>
  407ba1:	nop    DWORD PTR [rax+0x0]
  407ba8:	movbe  rax,QWORD PTR [rsi]
  407bad:	jmp    407936 <_start@@Base+0x4606>
  407bb2:	nop    WORD PTR [rax+rax*1+0x0]
  407bb8:	movbe  rax,QWORD PTR [r10+0x8]
  407bbe:	jmp    407974 <_start@@Base+0x4644>
  407bc3:	nop    DWORD PTR [rax+rax*1+0x0]
  407bc8:	lea    rdi,[r10+0x8]
  407bcc:	mov    rax,r11
  407bcf:	sub    rax,rdi
  407bd2:	cmp    rax,0x7
  407bd6:	ja     407d40 <_start@@Base+0x4a10>
  407bdc:	mov    rsi,r11
  407bdf:	call   403420 <_start@@Base+0xf0>
  407be4:	movabs rdx,0x78616d706c652e67
  407bee:	cmp    rax,rdx
  407bf1:	ja     407ca0 <_start@@Base+0x4970>
  407bf7:	sub    rdx,0x25
  407bfb:	cmp    rax,rdx
  407bfe:	jbe    407dc8 <_start@@Base+0x4a98>
  407c04:	movabs rdx,0x78616d706c652e43
  407c0e:	cmp    rax,rdx
  407c11:	je     407f60 <_start@@Base+0x4c30>
  407c17:	movabs rdx,0x78616d706c652e46
  407c21:	cmp    rax,rdx
  407c24:	jne    4079c5 <_start@@Base+0x4695>
  407c2a:	lea    rdi,[r10+0x10]
  407c2e:	mov    r8,r11
  407c31:	sub    r8,rdi
  407c34:	cmp    r8,0x7
  407c38:	ja     407ffc <_start@@Base+0x4ccc>
  407c3e:	mov    rsi,r11
  407c41:	call   403420 <_start@@Base+0xf0>
  407c46:	movabs rdx,0xffff000000000000
  407c50:	and    rax,rdx
  407c53:	movabs rdx,0x6f6f000000000000
  407c5d:	cmp    rax,rdx
  407c60:	jne    4079c5 <_start@@Base+0x4695>
  407c66:	cmp    r8,0x2
  407c6a:	jle    4079c5 <_start@@Base+0x4695>
  407c70:	cmp    BYTE PTR [r10+0x12],0x2e
  407c75:	jne    4079c5 <_start@@Base+0x4695>
  407c7b:	mov    rcx,rbx
  407c7e:	pop    rbx
  407c7f:	mov    r8,rbp
  407c82:	pop    rbp
  407c83:	mov    rdi,r12
  407c86:	pop    r12
  407c88:	pop    r13
  407c8a:	lea    rsi,[r10+0x13]
  407c8e:	mov    rdx,r11
  407c91:	pop    r14
  407c93:	jmp    4076b0 <_start@@Base+0x4380>
  407c98:	nop    DWORD PTR [rax+rax*1+0x0]
  407ca0:	movabs rdx,0x78616d706c652e68
  407caa:	cmp    rax,rdx
  407cad:	je     407d60 <_start@@Base+0x4a30>
  407cb3:	movabs rdx,0x78616d706c652e6d
  407cbd:	cmp    rax,rdx
  407cc0:	ja     407e90 <_start@@Base+0x4b60>
  407cc6:	sub    rdx,0x4
  407cca:	cmp    rax,rdx
  407ccd:	jne    4079c5 <_start@@Base+0x4695>
  407cd3:	lea    rax,[r10+0x10]
  407cd7:	mov    rcx,r11
  407cda:	sub    rcx,rax
  407cdd:	mov    rax,rcx
  407ce0:	cmp    rcx,0x7
  407ce4:	jbe    4079c5 <_start@@Base+0x4695>
  407cea:	movbe  rdx,QWORD PTR [r10+0x10]
  407cf0:	movabs rcx,0x6e745f656e756d00
  407cfa:	xor    dl,dl
  407cfc:	cmp    rdx,rcx
  407cff:	jne    4079c5 <_start@@Base+0x4695>
  407d05:	cmp    rax,0x7
  407d09:	jle    4079c5 <_start@@Base+0x4695>
  407d0f:	cmp    BYTE PTR [r10+0x17],0x2e
  407d14:	jne    4079c5 <_start@@Base+0x4695>
  407d1a:	mov    rcx,rbx
  407d1d:	pop    rbx
  407d1e:	mov    r8,rbp
  407d21:	pop    rbp
  407d22:	mov    rdi,r12
  407d25:	pop    r12
  407d27:	pop    r13
  407d29:	lea    rsi,[r10+0x18]
  407d2d:	mov    rdx,r11
  407d30:	pop    r14
  407d32:	jmp    403c60 <_start@@Base+0x930>
  407d37:	nop    WORD PTR [rax+rax*1+0x0]
  407d40:	movbe  rax,QWORD PTR [r10+0x8]
  407d46:	jmp    407be4 <_start@@Base+0x48b4>
  407d4b:	nop    DWORD PTR [rax+rax*1+0x0]
  407d50:	movbe  rax,QWORD PTR [r10+0x8]
  407d56:	jmp    407a16 <_start@@Base+0x46e6>
  407d5b:	nop    DWORD PTR [rax+rax*1+0x0]
  407d60:	lea    rax,[r10+0x10]
  407d64:	mov    rcx,r11
  407d67:	sub    rcx,rax
  407d6a:	mov    rax,rcx
  407d6d:	cmp    rcx,0x7
  407d71:	jbe    4079c5 <_start@@Base+0x4695>
  407d77:	movbe  rdx,QWORD PTR [r10+0x10]
  407d7d:	movabs rcx,0x65785f656e756d00
  407d87:	xor    dl,dl
  407d89:	cmp    rdx,rcx
  407d8c:	jne    4079c5 <_start@@Base+0x4695>
  407d92:	cmp    rax,0x7
  407d96:	jle    4079c5 <_start@@Base+0x4695>
  407d9c:	cmp    BYTE PTR [r10+0x17],0x2e
  407da1:	jne    4079c5 <_start@@Base+0x4695>
  407da7:	mov    rcx,rbx
  407daa:	pop    rbx
  407dab:	mov    r8,rbp
  407dae:	pop    rbp
  407daf:	mov    rdi,r12
  407db2:	pop    r12
  407db4:	pop    r13
  407db6:	lea    rsi,[r10+0x18]
  407dba:	mov    rdx,r11
  407dbd:	pop    r14
  407dbf:	jmp    403b00 <_start@@Base+0x7d0>
  407dc4:	nop    DWORD PTR [rax+0x0]
  407dc8:	dec    rdx
  407dcb:	cmp    rax,rdx
  407dce:	jne    4079c5 <_start@@Base+0x4695>
  407dd4:	lea    rdi,[r10+0x10]
  407dd8:	mov    r8,r11
  407ddb:	sub    r8,rdi
  407dde:	cmp    r8,0x7
  407de2:	ja     407fdb <_start@@Base+0x4cab>
  407de8:	mov    rsi,r11
  407deb:	call   403420 <_start@@Base+0xf0>
  407df0:	movabs rdx,0xffff000000000000
  407dfa:	and    rax,rdx
  407dfd:	movabs rdx,0x6e79000000000000
  407e07:	cmp    rax,rdx
  407e0a:	jne    4079c5 <_start@@Base+0x4695>
  407e10:	cmp    r8,0x2
  407e14:	jle    4079c5 <_start@@Base+0x4695>
  407e1a:	cmp    BYTE PTR [r10+0x12],0x2e
  407e1f:	jne    4079c5 <_start@@Base+0x4695>
  407e25:	mov    rcx,rbx
  407e28:	pop    rbx
  407e29:	mov    r8,rbp
  407e2c:	pop    rbp
  407e2d:	mov    rdi,r12
  407e30:	pop    r12
  407e32:	pop    r13
  407e34:	lea    rsi,[r10+0x13]
  407e38:	mov    rdx,r11
  407e3b:	pop    r14
  407e3d:	jmp    403870 <_start@@Base+0x540>
  407e42:	nop    WORD PTR [rax+rax*1+0x0]
  407e48:	cmp    BYTE PTR [r10+0x11],0x2e
  407e4d:	jne    4079c5 <_start@@Base+0x4695>
  407e53:	mov    rcx,rbx
  407e56:	pop    rbx
  407e57:	mov    r8,rbp
  407e5a:	pop    rbp
  407e5b:	mov    rdi,r12
  407e5e:	pop    r12
  407e60:	pop    r13
  407e62:	lea    rsi,[r10+0x12]
  407e66:	mov    rdx,r11
  407e69:	pop    r14
  407e6b:	jmp    403590 <_start@@Base+0x260>
  407e70:	movbe  rax,QWORD PTR [r10+0x10]
  407e76:	jmp    40799f <_start@@Base+0x466f>
  407e7b:	nop    DWORD PTR [rax+rax*1+0x0]
  407e80:	movbe  rax,QWORD PTR [r10+0x10]
  407e86:	jmp    407a41 <_start@@Base+0x4711>
  407e8b:	nop    DWORD PTR [rax+rax*1+0x0]
  407e90:	movabs rdx,0x78616d706c652e6e
  407e9a:	cmp    rax,rdx
  407e9d:	jne    4079c5 <_start@@Base+0x4695>
  407ea3:	lea    rdi,[r10+0x10]
  407ea7:	mov    rdx,r11
  407eaa:	sub    rdx,rdi
  407ead:	cmp    rdx,0x7
  407eb1:	ja     408007 <_start@@Base+0x4cd7>
  407eb7:	mov    rsi,r11
  407eba:	call   403420 <_start@@Base+0xf0>
  407ebf:	mov    rcx,rax
  407ec2:	xor    cl,cl
  407ec4:	movabs rdx,0x65675f656e756d00
  407ece:	cmp    rcx,rdx
  407ed1:	je     4079c5 <_start@@Base+0x4695>
  407ed7:	movabs rdx,0x6f74656d70747965
  407ee1:	cmp    rax,rdx
  407ee4:	jne    4079c5 <_start@@Base+0x4695>
  407eea:	lea    rdi,[r10+0x18]
  407eee:	mov    r8,r11
  407ef1:	sub    r8,rdi
  407ef4:	cmp    r8,0x7
  407ef8:	ja     4080a0 <_start@@Base+0x4d70>
  407efe:	mov    rsi,r11
  407f01:	call   403420 <_start@@Base+0xf0>
  407f06:	movabs rdx,0xffffff0000000000
  407f10:	and    rax,rdx
  407f13:	movabs rdx,0x6e756d0000000000
  407f1d:	cmp    rax,rdx
  407f20:	jne    4079c5 <_start@@Base+0x4695>
  407f26:	cmp    r8,0x3
  407f2a:	jle    4079c5 <_start@@Base+0x4695>
  407f30:	cmp    BYTE PTR [r10+0x1b],0x2e
  407f35:	jne    4079c5 <_start@@Base+0x4695>
  407f3b:	mov    rcx,rbx
  407f3e:	pop    rbx
  407f3f:	mov    r8,rbp
  407f42:	pop    rbp
  407f43:	mov    rdi,r12
  407f46:	pop    r12
  407f48:	pop    r13
  407f4a:	lea    rsi,[r10+0x1c]
  407f4e:	mov    rdx,r11
  407f51:	pop    r14
  407f53:	jmp    407560 <_start@@Base+0x4230>
  407f58:	nop    DWORD PTR [rax+rax*1+0x0]
  407f60:	lea    rdi,[r10+0x10]
  407f64:	mov    r8,r11
  407f67:	sub    r8,rdi
  407f6a:	cmp    r8,0x7
  407f6e:	ja     407ff1 <_start@@Base+0x4cc1>
  407f74:	mov    rsi,r11
  407f77:	call   403420 <_start@@Base+0xf0>
  407f7c:	movabs rdx,0xffffffff00000000
  407f86:	and    rax,rdx
  407f89:	movabs rdx,0x6f6c6f7200000000
  407f93:	cmp    rax,rdx
  407f96:	jne    4079c5 <_start@@Base+0x4695>
  407f9c:	cmp    r8,0x4
  407fa0:	jle    4079c5 <_start@@Base+0x4695>
  407fa6:	cmp    BYTE PTR [r10+0x14],0x2e
  407fab:	jne    4079c5 <_start@@Base+0x4695>
  407fb1:	mov    rcx,rbx
  407fb4:	pop    rbx
  407fb5:	mov    r8,rbp
  407fb8:	pop    rbp
  407fb9:	mov    rdi,r12
  407fbc:	pop    r12
  407fbe:	pop    r13
  407fc0:	lea    rsi,[r10+0x15]
  407fc4:	mov    rdx,r11
  407fc7:	pop    r14
  407fc9:	jmp    403f70 <_start@@Base+0xc40>
  407fce:	xchg   ax,ax
  407fd0:	movbe  rax,QWORD PTR [r10+0x18]
  407fd6:	jmp    407a70 <_start@@Base+0x4740>
  407fdb:	movbe  rax,QWORD PTR [r10+0x10]
  407fe1:	jmp    407df0 <_start@@Base+0x4ac0>
  407fe6:	movbe  rax,QWORD PTR [r10+0x20]
  407fec:	jmp    407a9f <_start@@Base+0x476f>
  407ff1:	movbe  rax,QWORD PTR [r10+0x10]
  407ff7:	jmp    407f7c <_start@@Base+0x4c4c>
  407ffc:	movbe  rax,QWORD PTR [r10+0x10]
  408002:	jmp    407c46 <_start@@Base+0x4916>
  408007:	movbe  rax,QWORD PTR [r10+0x10]
  40800d:	movabs rcx,0x65675f656e756d00
  408017:	mov    rsi,rax
  40801a:	xor    sil,sil
  40801d:	cmp    rsi,rcx
  408020:	jne    407ed7 <_start@@Base+0x4ba7>
  408026:	cmp    rdx,0x7
  40802a:	jle    4079c5 <_start@@Base+0x4695>
  408030:	cmp    BYTE PTR [r10+0x17],0x2e
  408035:	jne    4079c5 <_start@@Base+0x4695>
  40803b:	mov    rcx,rbx
  40803e:	pop    rbx
  40803f:	mov    r8,rbp
  408042:	pop    rbp
  408043:	mov    rdi,r12
  408046:	pop    r12
  408048:	pop    r13
  40804a:	lea    rsi,[r10+0x18]
  40804e:	mov    rdx,r11
  408051:	pop    r14
  408053:	jmp    403e20 <_start@@Base+0xaf0>
  408058:	movbe  rax,QWORD PTR [r10+0x22]
  40805e:	jmp    407af3 <_start@@Base+0x47c3>
  408063:	mov    r8,r9
  408066:	mov    ecx,0x3
  40806b:	mov    rdx,r11
  40806e:	mov    rsi,r13
  408071:	mov    rdi,r12
  408074:	call   417430 <flatcc_json_parser_match_constant@@Base>
  408079:	mov    r10,rax
  40807c:	cmp    r13,rax
  40807f:	je     4079c5 <_start@@Base+0x4695>
  408085:	mov    QWORD PTR [rbp+0x0],0x11
  40808d:	mov    DWORD PTR [rbx],0x0
  408093:	jmp    4079c5 <_start@@Base+0x4695>
  408098:	mov    r10,r13
  40809b:	jmp    4079c5 <_start@@Base+0x4695>
  4080a0:	movbe  rax,QWORD PTR [r10+0x18]
  4080a6:	jmp    407f06 <_start@@Base+0x4bd6>
  4080ab:	movbe  rax,QWORD PTR [r10+0x2a]
  4080b1:	jmp    407b49 <_start@@Base+0x4819>
  4080b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080c0:	endbr64 
  4080c4:	push   r13
  4080c6:	mov    r10,rsi
  4080c9:	mov    r11,rdx
  4080cc:	push   r12
  4080ce:	mov    r12,rcx
  4080d1:	push   rbp
  4080d2:	mov    rbp,rdi
  4080d5:	push   rbx
  4080d6:	mov    rbx,rdx
  4080d9:	sub    rbx,rsi
  4080dc:	sub    rsp,0x8
  4080e0:	cmp    rbx,0x7
  4080e4:	ja     408208 <_start@@Base+0x4ed8>
  4080ea:	mov    rsi,rdx
  4080ed:	mov    rdi,r10
  4080f0:	call   403420 <_start@@Base+0xf0>
  4080f5:	movabs rdx,0x6865785f656e756c
  4080ff:	cmp    rax,rdx
  408102:	ja     4081b0 <_start@@Base+0x4e80>
  408108:	movabs rdx,0xffffff0000000000
  408112:	movabs rcx,0x436f6c6f71ffffff
  40811c:	and    rdx,rax
  40811f:	cmp    rax,rcx
  408122:	ja     408158 <_start@@Base+0x4e28>
  408124:	movabs rax,0x416e790000000000
  40812e:	cmp    rdx,rax
  408131:	jne    408144 <_start@@Base+0x4e14>
  408133:	cmp    rbx,0x3
  408137:	jle    408144 <_start@@Base+0x4e14>
  408139:	cmp    BYTE PTR [r10+0x3],0x2e
  40813e:	je     408350 <_start@@Base+0x5020>
  408144:	add    rsp,0x8
  408148:	pop    rbx
  408149:	pop    rbp
  40814a:	pop    r12
  40814c:	mov    rax,r10
  40814f:	pop    r13
  408151:	ret    
  408152:	nop    WORD PTR [rax+rax*1+0x0]
  408158:	movabs rcx,0x466f6f0000000000
  408162:	cmp    rdx,rcx
  408165:	je     408318 <_start@@Base+0x4fe8>
  40816b:	and    rax,0xffffffffff000000
  408171:	movabs rdx,0x436f6c6f72000000
  40817b:	cmp    rax,rdx
  40817e:	jne    408144 <_start@@Base+0x4e14>
  408180:	cmp    rbx,0x5
  408184:	jle    408144 <_start@@Base+0x4e14>
  408186:	cmp    BYTE PTR [r10+0x5],0x2e
  40818b:	jne    408144 <_start@@Base+0x4e14>
  40818d:	add    rsp,0x8
  408191:	pop    rbx
  408192:	mov    rdi,rbp
  408195:	pop    rbp
  408196:	mov    rcx,r12
  408199:	pop    r12
  40819b:	lea    rsi,[r10+0x6]
  40819f:	mov    rdx,r11
  4081a2:	pop    r13
  4081a4:	jmp    403f70 <_start@@Base+0xc40>
  4081a9:	nop    DWORD PTR [rax+0x0]
  4081b0:	movabs rdx,0x696e745f656e756c
  4081ba:	cmp    rax,rdx
  4081bd:	ja     408218 <_start@@Base+0x4ee8>
  4081bf:	movabs rdx,0x6865785f656e756d
  4081c9:	cmp    rax,rdx
  4081cc:	jne    408144 <_start@@Base+0x4e14>
  4081d2:	cmp    rbx,0x8
  4081d6:	jle    408144 <_start@@Base+0x4e14>
  4081dc:	cmp    BYTE PTR [r10+0x8],0x2e
  4081e1:	jne    408144 <_start@@Base+0x4e14>
  4081e7:	add    rsp,0x8
  4081eb:	pop    rbx
  4081ec:	mov    rdi,rbp
  4081ef:	pop    rbp
  4081f0:	mov    rcx,r12
  4081f3:	pop    r12
  4081f5:	lea    rsi,[r10+0x9]
  4081f9:	mov    rdx,r11
  4081fc:	pop    r13
  4081fe:	jmp    403b00 <_start@@Base+0x7d0>
  408203:	nop    DWORD PTR [rax+rax*1+0x0]
  408208:	movbe  rax,QWORD PTR [rsi]
  40820d:	jmp    4080f5 <_start@@Base+0x4dc5>
  408212:	nop    WORD PTR [rax+rax*1+0x0]
  408218:	movabs rdx,0x6e65675f656e756c
  408222:	cmp    rax,rdx
  408225:	ja     408270 <_start@@Base+0x4f40>
  408227:	movabs rdx,0x696e745f656e756d
  408231:	cmp    rax,rdx
  408234:	jne    408144 <_start@@Base+0x4e14>
  40823a:	cmp    rbx,0x8
  40823e:	jle    408144 <_start@@Base+0x4e14>
  408244:	cmp    BYTE PTR [r10+0x8],0x2e
  408249:	jne    408144 <_start@@Base+0x4e14>
  40824f:	add    rsp,0x8
  408253:	pop    rbx
  408254:	mov    rdi,rbp
  408257:	pop    rbp
  408258:	mov    rcx,r12
  40825b:	pop    r12
  40825d:	lea    rsi,[r10+0x9]
  408261:	mov    rdx,r11
  408264:	pop    r13
  408266:	jmp    403c60 <_start@@Base+0x930>
  40826b:	nop    DWORD PTR [rax+rax*1+0x0]
  408270:	movabs rdx,0x6e65675f656e756d
  40827a:	cmp    rax,rdx
  40827d:	je     408370 <_start@@Base+0x5040>
  408283:	endbr64 
  408287:	movabs rdx,0x6e6f74656d707479
  408291:	cmp    rax,rdx
  408294:	jne    408144 <_start@@Base+0x4e14>
  40829a:	lea    rbx,[r10+0x8]
  40829e:	mov    r13,r11
  4082a1:	sub    r13,rbx
  4082a4:	cmp    r13,0x7
  4082a8:	ja     4083a8 <_start@@Base+0x5078>
  4082ae:	mov    rsi,r11
  4082b1:	mov    rdi,rbx
  4082b4:	call   403420 <_start@@Base+0xf0>
  4082b9:	movabs rdx,0xffffffff00000000
  4082c3:	and    rax,rdx
  4082c6:	movabs rdx,0x656e756d00000000
  4082d0:	cmp    rax,rdx
  4082d3:	jne    408144 <_start@@Base+0x4e14>
  4082d9:	cmp    r13,0x4
  4082dd:	jle    408144 <_start@@Base+0x4e14>
  4082e3:	cmp    BYTE PTR [r10+0xc],0x2e
  4082e8:	jne    408144 <_start@@Base+0x4e14>
  4082ee:	lea    rsi,[r10+0xd]
  4082f2:	cmp    rbx,rsi
  4082f5:	je     408144 <_start@@Base+0x4e14>
  4082fb:	add    rsp,0x8
  4082ff:	pop    rbx
  408300:	mov    rdi,rbp
  408303:	pop    rbp
  408304:	mov    rcx,r12
  408307:	pop    r12
  408309:	mov    rdx,r11
  40830c:	pop    r13
  40830e:	jmp    407560 <_start@@Base+0x4230>
  408313:	nop    DWORD PTR [rax+rax*1+0x0]
  408318:	cmp    rbx,0x3
  40831c:	jle    408144 <_start@@Base+0x4e14>
  408322:	cmp    BYTE PTR [r10+0x3],0x2e
  408327:	jne    408144 <_start@@Base+0x4e14>
  40832d:	add    rsp,0x8
  408331:	pop    rbx
  408332:	mov    rdi,rbp
  408335:	pop    rbp
  408336:	mov    rcx,r12
  408339:	pop    r12
  40833b:	lea    rsi,[r10+0x4]
  40833f:	mov    rdx,r11
  408342:	pop    r13
  408344:	jmp    4076b0 <_start@@Base+0x4380>
  408349:	nop    DWORD PTR [rax+0x0]
  408350:	add    rsp,0x8
  408354:	pop    rbx
  408355:	mov    rdi,rbp
  408358:	pop    rbp
  408359:	mov    rcx,r12
  40835c:	pop    r12
  40835e:	lea    rsi,[r10+0x4]
  408362:	mov    rdx,r11
  408365:	pop    r13
  408367:	jmp    403870 <_start@@Base+0x540>
  40836c:	nop    DWORD PTR [rax+0x0]
  408370:	cmp    rbx,0x8
  408374:	jle    408144 <_start@@Base+0x4e14>
  40837a:	cmp    BYTE PTR [r10+0x8],0x2e
  40837f:	jne    408144 <_start@@Base+0x4e14>
  408385:	add    rsp,0x8
  408389:	pop    rbx
  40838a:	mov    rdi,rbp
  40838d:	pop    rbp
  40838e:	mov    rcx,r12
  408391:	pop    r12
  408393:	lea    rsi,[r10+0x9]
  408397:	mov    rdx,r11
  40839a:	pop    r13
  40839c:	jmp    403e20 <_start@@Base+0xaf0>
  4083a1:	nop    DWORD PTR [rax+0x0]
  4083a8:	movbe  rax,QWORD PTR [r10+0x8]
  4083ae:	jmp    4082b9 <_start@@Base+0x4f89>
  4083b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4083be:	xchg   ax,ax
  4083c0:	cmp    rsi,rdx
  4083c3:	je     4083ca <_start@@Base+0x509a>
  4083c5:	cmp    BYTE PTR [rsi],0x7b
  4083c8:	je     4083e0 <_start@@Base+0x50b0>
  4083ca:	mov    DWORD PTR [rcx],0x0
  4083d0:	mov    ecx,0x15
  4083d5:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4083da:	nop    WORD PTR [rax+rax*1+0x0]
  4083e0:	push   r12
  4083e2:	lea    rax,[rsi+0x1]
  4083e6:	mov    r12,rdi
  4083e9:	push   rbp
  4083ea:	mov    rbp,rcx
  4083ed:	push   rbx
  4083ee:	mov    rbx,rdx
  4083f1:	sub    rdx,rax
  4083f4:	cmp    rdx,0x1
  4083f8:	jle    408402 <_start@@Base+0x50d2>
  4083fa:	cmp    BYTE PTR [rsi+0x1],0x20
  4083fe:	jg     408410 <_start@@Base+0x50e0>
  408400:	je     408430 <_start@@Base+0x5100>
  408402:	mov    rdx,rbx
  408405:	mov    rsi,rax
  408408:	mov    rdi,r12
  40840b:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408410:	cmp    rbx,rax
  408413:	je     40841a <_start@@Base+0x50ea>
  408415:	cmp    BYTE PTR [rax],0x7d
  408418:	je     408440 <_start@@Base+0x5110>
  40841a:	mov    DWORD PTR [rbp+0x0],0x1
  408421:	pop    rbx
  408422:	pop    rbp
  408423:	pop    r12
  408425:	ret    
  408426:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408430:	cmp    BYTE PTR [rsi+0x2],0x20
  408434:	jle    408402 <_start@@Base+0x50d2>
  408436:	lea    rax,[rsi+0x2]
  40843a:	jmp    408410 <_start@@Base+0x50e0>
  40843c:	nop    DWORD PTR [rax+0x0]
  408440:	lea    rsi,[rax+0x1]
  408444:	mov    rdx,rbx
  408447:	sub    rdx,rsi
  40844a:	mov    DWORD PTR [rbp+0x0],0x0
  408451:	cmp    rdx,0x1
  408455:	jle    40845f <_start@@Base+0x512f>
  408457:	cmp    BYTE PTR [rax+0x1],0x20
  40845b:	jg     40846e <_start@@Base+0x513e>
  40845d:	je     408473 <_start@@Base+0x5143>
  40845f:	mov    rdx,rbx
  408462:	pop    rbx
  408463:	pop    rbp
  408464:	mov    rdi,r12
  408467:	pop    r12
  408469:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  40846e:	mov    rax,rsi
  408471:	jmp    408421 <_start@@Base+0x50f1>
  408473:	cmp    BYTE PTR [rax+0x2],0x20
  408477:	jle    40845f <_start@@Base+0x512f>
  408479:	add    rax,0x2
  40847d:	jmp    408421 <_start@@Base+0x50f1>
  40847f:	nop
  408480:	push   r15
  408482:	push   r14
  408484:	push   r13
  408486:	mov    r13,rsi
  408489:	mov    esi,0x3
  40848e:	push   r12
  408490:	push   rbp
  408491:	mov    rbp,rdx
  408494:	push   rbx
  408495:	mov    rbx,rdi
  408498:	sub    rsp,0x48
  40849c:	mov    QWORD PTR [rsp+0x8],rcx
  4084a1:	mov    rdi,QWORD PTR fs:0x28
  4084aa:	mov    QWORD PTR [rsp+0x38],rdi
  4084af:	xor    edi,edi
  4084b1:	mov    DWORD PTR [rcx],0x0
  4084b7:	mov    rdi,QWORD PTR [rbx]
  4084ba:	call   4130c0 <flatcc_builder_start_table@@Base>
  4084bf:	test   eax,eax
  4084c1:	je     408500 <_start@@Base+0x51d0>
  4084c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4084c8:	mov    ecx,0x21
  4084cd:	mov    rdx,rbp
  4084d0:	mov    rsi,r13
  4084d3:	mov    rdi,rbx
  4084d6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4084db:	mov    rbx,QWORD PTR [rsp+0x38]
  4084e0:	xor    rbx,QWORD PTR fs:0x28
  4084e9:	jne    40a318 <_start@@Base+0x6fe8>
  4084ef:	add    rsp,0x48
  4084f3:	pop    rbx
  4084f4:	pop    rbp
  4084f5:	pop    r12
  4084f7:	pop    r13
  4084f9:	pop    r14
  4084fb:	pop    r15
  4084fd:	ret    
  4084fe:	xchg   ax,ax
  408500:	mov    rdx,rbp
  408503:	lea    rcx,[rsp+0x18]
  408508:	mov    rsi,r13
  40850b:	mov    rdi,rbx
  40850e:	call   4083c0 <_start@@Base+0x5090>
  408513:	mov    edx,DWORD PTR [rsp+0x18]
  408517:	nop    WORD PTR [rax+rax*1+0x0]
  408520:	test   edx,edx
  408522:	je     408607 <_start@@Base+0x52d7>
  408528:	cmp    rbp,rax
  40852b:	je     408610 <_start@@Base+0x52e0>
  408531:	movzx  edx,BYTE PTR [rax]
  408534:	cmp    dl,0x22
  408537:	je     408630 <_start@@Base+0x5300>
  40853d:	cmp    dl,0x2e
  408540:	je     4092e0 <_start@@Base+0x5fb0>
  408546:	mov    DWORD PTR [rbx+0x14],0x1
  40854d:	mov    rdx,rbp
  408550:	sub    rdx,rax
  408553:	cmp    rdx,0x7
  408557:	jbe    408613 <_start@@Base+0x52e3>
  40855d:	movbe  rdx,QWORD PTR [rax]
  408562:	movabs rdi,0x746573746a736f6e
  40856c:	cmp    rdx,rdi
  40856f:	jne    408613 <_start@@Base+0x52e3>
  408575:	lea    rsi,[rax+0x8]
  408579:	mov    rdx,rbp
  40857c:	sub    rdx,rsi
  40857f:	cmp    rdx,0x7
  408583:	ja     408640 <_start@@Base+0x5310>
  408589:	mov    rdx,rbp
  40858c:	mov    rdi,rbx
  40858f:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408594:	mov    r13,rax
  408597:	mov    rax,rbp
  40859a:	sub    rax,r13
  40859d:	cmp    rax,0x1
  4085a1:	jle    4085b0 <_start@@Base+0x5280>
  4085a3:	cmp    BYTE PTR [r13+0x0],0x20
  4085a8:	jg     4085c1 <_start@@Base+0x5291>
  4085aa:	je     408860 <_start@@Base+0x5530>
  4085b0:	mov    rsi,r13
  4085b3:	mov    rdx,rbp
  4085b6:	mov    rdi,rbx
  4085b9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4085be:	mov    r13,rax
  4085c1:	cmp    rbp,r13
  4085c4:	je     408828 <_start@@Base+0x54f8>
  4085ca:	cmp    BYTE PTR [r13+0x0],0x2c
  4085cf:	je     408878 <_start@@Base+0x5548>
  4085d5:	mov    DWORD PTR [rsp+0x18],0x0
  4085dd:	cmp    BYTE PTR [r13+0x0],0x7d
  4085e2:	je     4087f0 <_start@@Base+0x54c0>
  4085e8:	mov    rdx,rbp
  4085eb:	mov    ecx,0xa
  4085f0:	mov    rsi,r13
  4085f3:	mov    rdi,rbx
  4085f6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4085fb:	mov    edx,DWORD PTR [rsp+0x18]
  4085ff:	test   edx,edx
  408601:	jne    408528 <_start@@Base+0x51f8>
  408607:	mov    r13,rax
  40860a:	jmp    408830 <_start@@Base+0x5500>
  40860f:	nop
  408610:	mov    rax,rbp
  408613:	mov    rdx,rbp
  408616:	mov    rsi,rax
  408619:	mov    rdi,rbx
  40861c:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408621:	mov    r13,rax
  408624:	jmp    408597 <_start@@Base+0x5267>
  408629:	nop    DWORD PTR [rax+0x0]
  408630:	inc    rax
  408633:	mov    DWORD PTR [rbx+0x14],0x0
  40863a:	jmp    40854d <_start@@Base+0x521d>
  40863f:	nop
  408640:	movabs rdx,0x6170786966657270
  40864a:	cmp    QWORD PTR [rax+0x8],rdx
  40864e:	jne    408589 <_start@@Base+0x5259>
  408654:	lea    r12,[rax+0x10]
  408658:	mov    rsi,rbp
  40865b:	sub    rsi,r12
  40865e:	cmp    rsi,0x7
  408662:	ja     4092b0 <_start@@Base+0x5f80>
  408668:	lea    rcx,[rip+0x11a45]        # 41a0b4 <_IO_stdin_used@@Base+0xb4>
  40866f:	movsxd rdx,DWORD PTR [rcx+rsi*4]
  408673:	add    rdx,rcx
  408676:	notrack jmp rdx
  408679:	nop    DWORD PTR [rax+0x0]
  408680:	movsx  rcx,BYTE PTR [rax+0x16]
  408685:	mov    rdi,rcx
  408688:	shl    rdi,0x8
  40868c:	movsx  rdx,BYTE PTR [rax+0x15]
  408691:	mov    rcx,rdx
  408694:	shl    rcx,0x10
  408698:	or     rcx,rdi
  40869b:	movsx  rdx,BYTE PTR [rax+0x14]
  4086a0:	mov    rdi,rdx
  4086a3:	shl    rdi,0x18
  4086a7:	or     rcx,rdi
  4086aa:	movsx  rdx,BYTE PTR [rax+0x13]
  4086af:	mov    rdi,rdx
  4086b2:	shl    rdi,0x20
  4086b6:	or     rdi,rcx
  4086b9:	movsx  rdx,BYTE PTR [rax+0x12]
  4086be:	mov    rcx,rdx
  4086c1:	shl    rcx,0x28
  4086c5:	or     rdi,rcx
  4086c8:	movsx  rdx,BYTE PTR [rax+0x11]
  4086cd:	mov    rcx,rdx
  4086d0:	shl    rcx,0x30
  4086d4:	or     rcx,rdi
  4086d7:	movsx  rdx,BYTE PTR [rax+0x10]
  4086dc:	mov    rax,rdx
  4086df:	shl    rax,0x38
  4086e3:	or     rax,rcx
  4086e6:	mov    r14,rax
  4086e9:	xor    r14w,r14w
  4086ed:	movabs rdx,0x7273696e67320000
  4086f7:	cmp    r14,rdx
  4086fa:	je     408e30 <_start@@Base+0x5b00>
  408700:	and    rax,0xffffffffff000000
  408706:	movabs rdx,0x7273696e67000000
  408710:	cmp    rax,rdx
  408713:	jne    4088c8 <_start@@Base+0x5598>
  408719:	cmp    rsi,0x5
  40871d:	jle    4088c8 <_start@@Base+0x5598>
  408723:	mov    ecx,0x5
  408728:	mov    rdx,rbp
  40872b:	mov    rsi,r12
  40872e:	mov    rdi,rbx
  408731:	call   407470 <_start@@Base+0x4140>
  408736:	mov    r15,rax
  408739:	cmp    r12,rax
  40873c:	je     4088c8 <_start@@Base+0x5598>
  408742:	mov    rdi,QWORD PTR [rbx]
  408745:	mov    esi,0x9
  40874a:	call   4130c0 <flatcc_builder_start_table@@Base>
  40874f:	test   eax,eax
  408751:	je     409520 <_start@@Base+0x61f0>
  408757:	mov    ecx,0x21
  40875c:	mov    rdx,rbp
  40875f:	mov    rsi,r15
  408762:	mov    rdi,rbx
  408765:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40876a:	mov    r13,rax
  40876d:	jmp    4084c8 <_start@@Base+0x5198>
  408772:	nop    WORD PTR [rax+rax*1+0x0]
  408778:	xor    edi,edi
  40877a:	jmp    40868c <_start@@Base+0x535c>
  40877f:	nop
  408780:	xor    ecx,ecx
  408782:	jmp    4086aa <_start@@Base+0x537a>
  408787:	nop    WORD PTR [rax+rax*1+0x0]
  408790:	xor    edi,edi
  408792:	jmp    4086b9 <_start@@Base+0x5389>
  408797:	nop    WORD PTR [rax+rax*1+0x0]
  4087a0:	xor    edi,edi
  4087a2:	jmp    4086c8 <_start@@Base+0x5398>
  4087a7:	nop    WORD PTR [rax+rax*1+0x0]
  4087b0:	xor    ecx,ecx
  4087b2:	jmp    4086d7 <_start@@Base+0x53a7>
  4087b7:	nop    WORD PTR [rax+rax*1+0x0]
  4087c0:	xor    ecx,ecx
  4087c2:	jmp    40869b <_start@@Base+0x536b>
  4087c7:	nop    WORD PTR [rax+rax*1+0x0]
  4087d0:	mov    rdx,rbp
  4087d3:	mov    rsi,r12
  4087d6:	mov    rdi,rbx
  4087d9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  4087de:	mov    r13,rax
  4087e1:	jmp    408597 <_start@@Base+0x5267>
  4087e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4087f0:	lea    rsi,[r13+0x1]
  4087f4:	mov    rax,rbp
  4087f7:	sub    rax,rsi
  4087fa:	cmp    rax,0x1
  4087fe:	jle    408811 <_start@@Base+0x54e1>
  408800:	cmp    BYTE PTR [r13+0x1],0x20
  408805:	jg     409360 <_start@@Base+0x6030>
  40880b:	je     4093e8 <_start@@Base+0x60b8>
  408811:	mov    rdx,rbp
  408814:	mov    rdi,rbx
  408817:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40881c:	mov    edx,DWORD PTR [rsp+0x18]
  408820:	jmp    408520 <_start@@Base+0x51f0>
  408825:	nop    DWORD PTR [rax]
  408828:	mov    DWORD PTR [rsp+0x18],0x0
  408830:	mov    eax,DWORD PTR [rbx+0x20]
  408833:	test   eax,eax
  408835:	jne    4084c8 <_start@@Base+0x5198>
  40883b:	mov    rdi,QWORD PTR [rbx]
  40883e:	call   413a40 <flatcc_builder_end_table@@Base>
  408843:	mov    edx,eax
  408845:	mov    rax,QWORD PTR [rsp+0x8]
  40884a:	mov    DWORD PTR [rax],edx
  40884c:	mov    rax,r13
  40884f:	test   edx,edx
  408851:	jne    4084db <_start@@Base+0x51ab>
  408857:	jmp    4084c8 <_start@@Base+0x5198>
  40885c:	nop    DWORD PTR [rax+0x0]
  408860:	cmp    BYTE PTR [r13+0x1],0x20
  408865:	jle    4085b0 <_start@@Base+0x5280>
  40886b:	inc    r13
  40886e:	jmp    4085c1 <_start@@Base+0x5291>
  408873:	nop    DWORD PTR [rax+rax*1+0x0]
  408878:	lea    rax,[r13+0x1]
  40887c:	mov    rdx,rbp
  40887f:	sub    rdx,rax
  408882:	cmp    rdx,0x1
  408886:	jle    408895 <_start@@Base+0x5565>
  408888:	cmp    BYTE PTR [r13+0x1],0x20
  40888d:	jg     4088a3 <_start@@Base+0x5573>
  40888f:	je     409e58 <_start@@Base+0x6b28>
  408895:	mov    rdx,rbp
  408898:	mov    rsi,rax
  40889b:	mov    rdi,rbx
  40889e:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4088a3:	cmp    rbp,rax
  4088a6:	je     409e70 <_start@@Base+0x6b40>
  4088ac:	cmp    BYTE PTR [rax],0x7d
  4088af:	je     40a000 <_start@@Base+0x6cd0>
  4088b5:	mov    DWORD PTR [rsp+0x18],0x1
  4088bd:	jmp    408528 <_start@@Base+0x51f8>
  4088c2:	nop    WORD PTR [rax+rax*1+0x0]
  4088c8:	movabs rax,0x7273696e67330000
  4088d2:	cmp    r14,rax
  4088d5:	jne    4087d0 <_start@@Base+0x54a0>
  4088db:	mov    rax,rbp
  4088de:	sub    rax,r12
  4088e1:	cmp    rax,0x6
  4088e5:	jle    4087d0 <_start@@Base+0x54a0>
  4088eb:	mov    ecx,0x6
  4088f0:	mov    rdx,rbp
  4088f3:	mov    rsi,r12
  4088f6:	mov    rdi,rbx
  4088f9:	call   407470 <_start@@Base+0x4140>
  4088fe:	mov    r14,rax
  408901:	cmp    r12,rax
  408904:	je     4087d0 <_start@@Base+0x54a0>
  40890a:	mov    rdi,QWORD PTR [rbx]
  40890d:	mov    esi,0x2
  408912:	call   4130c0 <flatcc_builder_start_table@@Base>
  408917:	test   eax,eax
  408919:	jne    409330 <_start@@Base+0x6000>
  40891f:	mov    rdx,rbp
  408922:	mov    rsi,r14
  408925:	lea    rcx,[rsp+0x20]
  40892a:	mov    rdi,rbx
  40892d:	call   4083c0 <_start@@Base+0x5090>
  408932:	mov    edx,DWORD PTR [rsp+0x20]
  408936:	movabs r14,0x616161615f626262
  408940:	test   edx,edx
  408942:	je     40a310 <_start@@Base+0x6fe0>
  408948:	lea    r12,[rip+0x11785]        # 41a0d4 <_IO_stdin_used@@Base+0xd4>
  40894f:	cmp    rbp,rax
  408952:	je     408970 <_start@@Base+0x5640>
  408954:	movzx  edx,BYTE PTR [rax]
  408957:	cmp    dl,0x22
  40895a:	je     408c10 <_start@@Base+0x58e0>
  408960:	cmp    dl,0x2e
  408963:	je     409310 <_start@@Base+0x5fe0>
  408969:	mov    DWORD PTR [rbx+0x14],0x1
  408970:	mov    rdx,rbp
  408973:	sub    rdx,rax
  408976:	cmp    rdx,0x7
  40897a:	jbe    408bf0 <_start@@Base+0x58c0>
  408980:	movbe  rdx,QWORD PTR [rax]
  408985:	cmp    rdx,r14
  408988:	jne    408bf0 <_start@@Base+0x58c0>
  40898e:	lea    r13,[rax+0x8]
  408992:	mov    rsi,rbp
  408995:	sub    rsi,r13
  408998:	cmp    rsi,0x7
  40899c:	ja     408c90 <_start@@Base+0x5960>
  4089a2:	movsxd rdx,DWORD PTR [r12+rsi*4]
  4089a6:	add    rdx,r12
  4089a9:	notrack jmp rdx
  4089ac:	nop    DWORD PTR [rax+0x0]
  4089b0:	movsx  rcx,BYTE PTR [rax+0xe]
  4089b5:	shl    rcx,0x8
  4089b9:	movsx  rdi,BYTE PTR [rax+0xd]
  4089be:	shl    rdi,0x10
  4089c2:	or     rcx,rdi
  4089c5:	movsx  rdi,BYTE PTR [rax+0xc]
  4089ca:	shl    rdi,0x18
  4089ce:	mov    rdx,rdi
  4089d1:	or     rdx,rcx
  4089d4:	movsx  rdi,BYTE PTR [rax+0xb]
  4089d9:	shl    rdi,0x20
  4089dd:	or     rdx,rdi
  4089e0:	movsx  rdi,BYTE PTR [rax+0xa]
  4089e5:	shl    rdi,0x28
  4089e9:	mov    rcx,rdi
  4089ec:	or     rcx,rdx
  4089ef:	movsx  rdi,BYTE PTR [rax+0x9]
  4089f4:	shl    rdi,0x30
  4089f8:	or     rcx,rdi
  4089fb:	movsx  rax,BYTE PTR [rax+0x8]
  408a00:	shl    rax,0x38
  408a04:	mov    rdx,rax
  408a07:	or     rdx,rcx
  408a0a:	xor    dl,dl
  408a0c:	movabs rax,0x625f737465707300
  408a16:	cmp    rdx,rax
  408a19:	jne    408bd0 <_start@@Base+0x58a0>
  408a1f:	cmp    rsi,0x7
  408a23:	jle    408bd0 <_start@@Base+0x58a0>
  408a29:	mov    ecx,0x7
  408a2e:	mov    rdx,rbp
  408a31:	mov    rsi,r13
  408a34:	mov    rdi,rbx
  408a37:	call   407470 <_start@@Base+0x4140>
  408a3c:	mov    r15,rax
  408a3f:	cmp    r13,rax
  408a42:	je     408bd0 <_start@@Base+0x58a0>
  408a48:	mov    QWORD PTR [rsp+0x28],0x0
  408a51:	mov    QWORD PTR [rsp+0x30],0x0
  408a5a:	mov    DWORD PTR [rsp+0x24],0x0
  408a62:	cmp    rbp,rax
  408a65:	je     409400 <_start@@Base+0x60d0>
  408a6b:	lea    rcx,[rsp+0x24]
  408a70:	lea    r8,[rsp+0x30]
  408a75:	mov    rdx,rbp
  408a78:	mov    rsi,rax
  408a7b:	mov    rdi,rbx
  408a7e:	call   4184e0 <flatcc_json_parser_integer@@Base>
  408a83:	mov    r13,rax
  408a86:	cmp    r15,rax
  408a89:	jne    4094e8 <_start@@Base+0x61b8>
  408a8f:	lea    r8,[rsp+0x28]
  408a94:	lea    rcx,[rip+0x188a5]        # 421340 <__data_start@@Base+0x280>
  408a9b:	mov    rdx,rbp
  408a9e:	mov    rsi,r13
  408aa1:	mov    rdi,rbx
  408aa4:	call   405310 <_start@@Base+0x1fe0>
  408aa9:	cmp    rax,r13
  408aac:	je     40a308 <_start@@Base+0x6fd8>
  408ab2:	cmp    rbp,rax
  408ab5:	je     40a308 <_start@@Base+0x6fd8>
  408abb:	mov    rdx,QWORD PTR [rsp+0x28]
  408ac0:	mov    r13,rax
  408ac3:	nop    DWORD PTR [rax+rax*1+0x0]
  408ac8:	test   rdx,rdx
  408acb:	jne    408ad3 <_start@@Base+0x57a3>
  408acd:	test   BYTE PTR [rbx+0x10],0x2
  408ad1:	je     408b00 <_start@@Base+0x57d0>
  408ad3:	mov    rdi,QWORD PTR [rbx]
  408ad6:	xor    esi,esi
  408ad8:	mov    ecx,0x8
  408add:	mov    edx,0x8
  408ae2:	call   414940 <flatcc_builder_table_add@@Base>
  408ae7:	test   rax,rax
  408aea:	je     408c70 <_start@@Base+0x5940>
  408af0:	mov    rdx,QWORD PTR [rsp+0x28]
  408af5:	mov    QWORD PTR [rax],rdx
  408af8:	nop    DWORD PTR [rax+rax*1+0x0]
  408b00:	mov    rax,rbp
  408b03:	sub    rax,r13
  408b06:	cmp    rax,0x1
  408b0a:	jle    408b19 <_start@@Base+0x57e9>
  408b0c:	cmp    BYTE PTR [r13+0x0],0x20
  408b11:	jg     408b2a <_start@@Base+0x57fa>
  408b13:	je     408dc8 <_start@@Base+0x5a98>
  408b19:	mov    rsi,r13
  408b1c:	mov    rdx,rbp
  408b1f:	mov    rdi,rbx
  408b22:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408b27:	mov    r13,rax
  408b2a:	cmp    rbp,r13
  408b2d:	je     408c58 <_start@@Base+0x5928>
  408b33:	cmp    BYTE PTR [r13+0x0],0x2c
  408b38:	je     408de0 <_start@@Base+0x5ab0>
  408b3e:	mov    DWORD PTR [rsp+0x20],0x0
  408b46:	cmp    BYTE PTR [r13+0x0],0x7d
  408b4b:	je     408c20 <_start@@Base+0x58f0>
  408b51:	mov    rdx,rbp
  408b54:	mov    ecx,0xa
  408b59:	mov    rsi,r13
  408b5c:	mov    rdi,rbx
  408b5f:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  408b64:	mov    edx,DWORD PTR [rsp+0x20]
  408b68:	jmp    408940 <_start@@Base+0x5610>
  408b6d:	nop    DWORD PTR [rax]
  408b70:	xor    ecx,ecx
  408b72:	jmp    4089b9 <_start@@Base+0x5689>
  408b77:	nop    WORD PTR [rax+rax*1+0x0]
  408b80:	xor    ecx,ecx
  408b82:	jmp    4089c5 <_start@@Base+0x5695>
  408b87:	nop    WORD PTR [rax+rax*1+0x0]
  408b90:	xor    edx,edx
  408b92:	jmp    4089d4 <_start@@Base+0x56a4>
  408b97:	nop    WORD PTR [rax+rax*1+0x0]
  408ba0:	xor    edx,edx
  408ba2:	jmp    4089e0 <_start@@Base+0x56b0>
  408ba7:	nop    WORD PTR [rax+rax*1+0x0]
  408bb0:	xor    ecx,ecx
  408bb2:	jmp    4089ef <_start@@Base+0x56bf>
  408bb7:	nop    WORD PTR [rax+rax*1+0x0]
  408bc0:	xor    ecx,ecx
  408bc2:	jmp    4089fb <_start@@Base+0x56cb>
  408bc7:	nop    WORD PTR [rax+rax*1+0x0]
  408bd0:	mov    rsi,r13
  408bd3:	mov    rdx,rbp
  408bd6:	mov    rdi,rbx
  408bd9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408bde:	mov    r13,rax
  408be1:	jmp    408b00 <_start@@Base+0x57d0>
  408be6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bf0:	mov    rdx,rbp
  408bf3:	mov    rsi,rax
  408bf6:	mov    rdi,rbx
  408bf9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408bfe:	mov    r13,rax
  408c01:	jmp    408b00 <_start@@Base+0x57d0>
  408c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c10:	inc    rax
  408c13:	mov    DWORD PTR [rbx+0x14],0x0
  408c1a:	jmp    408970 <_start@@Base+0x5640>
  408c1f:	nop
  408c20:	lea    rsi,[r13+0x1]
  408c24:	mov    rax,rbp
  408c27:	sub    rax,rsi
  408c2a:	cmp    rax,0x1
  408c2e:	jle    408c41 <_start@@Base+0x5911>
  408c30:	cmp    BYTE PTR [r13+0x1],0x20
  408c35:	jg     409370 <_start@@Base+0x6040>
  408c3b:	je     409410 <_start@@Base+0x60e0>
  408c41:	mov    rdx,rbp
  408c44:	mov    rdi,rbx
  408c47:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408c4c:	mov    edx,DWORD PTR [rsp+0x20]
  408c50:	jmp    408940 <_start@@Base+0x5610>
  408c55:	nop    DWORD PTR [rax]
  408c58:	mov    DWORD PTR [rsp+0x20],0x0
  408c60:	mov    edx,DWORD PTR [rbx+0x20]
  408c63:	test   edx,edx
  408c65:	je     40937e <_start@@Base+0x604e>
  408c6b:	nop    DWORD PTR [rax+rax*1+0x0]
  408c70:	endbr64 
  408c74:	mov    rsi,r13
  408c77:	mov    ecx,0x21
  408c7c:	mov    rdx,rbp
  408c7f:	mov    rdi,rbx
  408c82:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  408c87:	mov    r13,rax
  408c8a:	jmp    4084c8 <_start@@Base+0x5198>
  408c8f:	nop
  408c90:	movbe  rdx,QWORD PTR [rax+0x8]
  408c96:	movabs rcx,0x625f73746172745f
  408ca0:	cmp    rdx,rcx
  408ca3:	jne    408a0a <_start@@Base+0x56da>
  408ca9:	lea    r13,[rax+0x10]
  408cad:	mov    r9,rbp
  408cb0:	sub    r9,r13
  408cb3:	cmp    r9,0x7
  408cb7:	ja     409350 <_start@@Base+0x6020>
  408cbd:	mov    rsi,rbp
  408cc0:	mov    rdi,r13
  408cc3:	call   403420 <_start@@Base+0xf0>
  408cc8:	and    rax,0xffffffffff000000
  408cce:	movabs rdx,0x7374657073000000
  408cd8:	cmp    rax,rdx
  408cdb:	jne    408bd0 <_start@@Base+0x58a0>
  408ce1:	cmp    r9,0x5
  408ce5:	jle    408bd0 <_start@@Base+0x58a0>
  408ceb:	mov    ecx,0x5
  408cf0:	mov    rdx,rbp
  408cf3:	mov    rsi,r13
  408cf6:	mov    rdi,rbx
  408cf9:	call   407470 <_start@@Base+0x4140>
  408cfe:	mov    r15,rax
  408d01:	cmp    r13,rax
  408d04:	je     408bd0 <_start@@Base+0x58a0>
  408d0a:	mov    DWORD PTR [rsp+0x24],0x0
  408d12:	mov    QWORD PTR [rsp+0x30],0x0
  408d1b:	mov    DWORD PTR [rsp+0x28],0x0
  408d23:	cmp    rbp,rax
  408d26:	je     409fd0 <_start@@Base+0x6ca0>
  408d2c:	lea    rcx,[rsp+0x28]
  408d31:	lea    r8,[rsp+0x30]
  408d36:	mov    rdx,rbp
  408d39:	mov    rsi,rax
  408d3c:	mov    rdi,rbx
  408d3f:	call   4184e0 <flatcc_json_parser_integer@@Base>
  408d44:	mov    r11,rax
  408d47:	cmp    r15,rax
  408d4a:	jne    40a090 <_start@@Base+0x6d60>
  408d50:	mov    rsi,r11
  408d53:	lea    r8,[rsp+0x24]
  408d58:	lea    rcx,[rip+0x18601]        # 421360 <__data_start@@Base+0x2a0>
  408d5f:	mov    rdx,rbp
  408d62:	mov    rdi,rbx
  408d65:	mov    QWORD PTR [rsp],r11
  408d69:	call   404e50 <_start@@Base+0x1b20>
  408d6e:	mov    r11,QWORD PTR [rsp]
  408d72:	mov    r13,rax
  408d75:	cmp    rax,r11
  408d78:	je     408c70 <_start@@Base+0x5940>
  408d7e:	cmp    rbp,rax
  408d81:	je     408c70 <_start@@Base+0x5940>
  408d87:	mov    eax,DWORD PTR [rsp+0x24]
  408d8b:	test   eax,eax
  408d8d:	jne    408d99 <_start@@Base+0x5a69>
  408d8f:	test   BYTE PTR [rbx+0x10],0x2
  408d93:	je     408b00 <_start@@Base+0x57d0>
  408d99:	mov    rdi,QWORD PTR [rbx]
  408d9c:	mov    ecx,0x4
  408da1:	mov    edx,0x4
  408da6:	mov    esi,0x1
  408dab:	call   414940 <flatcc_builder_table_add@@Base>
  408db0:	test   rax,rax
  408db3:	je     408c70 <_start@@Base+0x5940>
  408db9:	mov    edx,DWORD PTR [rsp+0x24]
  408dbd:	mov    DWORD PTR [rax],edx
  408dbf:	jmp    408b00 <_start@@Base+0x57d0>
  408dc4:	nop    DWORD PTR [rax+0x0]
  408dc8:	cmp    BYTE PTR [r13+0x1],0x20
  408dcd:	jle    408b19 <_start@@Base+0x57e9>
  408dd3:	inc    r13
  408dd6:	jmp    408b2a <_start@@Base+0x57fa>
  408ddb:	nop    DWORD PTR [rax+rax*1+0x0]
  408de0:	lea    rax,[r13+0x1]
  408de4:	mov    rdx,rbp
  408de7:	sub    rdx,rax
  408dea:	cmp    rdx,0x1
  408dee:	jle    408dfd <_start@@Base+0x5acd>
  408df0:	cmp    BYTE PTR [r13+0x1],0x20
  408df5:	jg     408e0b <_start@@Base+0x5adb>
  408df7:	je     409e98 <_start@@Base+0x6b68>
  408dfd:	mov    rdx,rbp
  408e00:	mov    rsi,rax
  408e03:	mov    rdi,rbx
  408e06:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408e0b:	cmp    rbp,rax
  408e0e:	je     409eb0 <_start@@Base+0x6b80>
  408e14:	cmp    BYTE PTR [rax],0x7d
  408e17:	je     40a050 <_start@@Base+0x6d20>
  408e1d:	mov    DWORD PTR [rsp+0x20],0x1
  408e25:	jmp    40894f <_start@@Base+0x561f>
  408e2a:	nop    WORD PTR [rax+rax*1+0x0]
  408e30:	cmp    rsi,0x6
  408e34:	jle    4087d0 <_start@@Base+0x54a0>
  408e3a:	mov    ecx,0x6
  408e3f:	mov    rdx,rbp
  408e42:	mov    rsi,r12
  408e45:	mov    rdi,rbx
  408e48:	call   407470 <_start@@Base+0x4140>
  408e4d:	mov    r14,rax
  408e50:	cmp    r12,rax
  408e53:	je     4087d0 <_start@@Base+0x54a0>
  408e59:	mov    rdi,QWORD PTR [rbx]
  408e5c:	mov    esi,0x2
  408e61:	call   4130c0 <flatcc_builder_start_table@@Base>
  408e66:	test   eax,eax
  408e68:	jne    409330 <_start@@Base+0x6000>
  408e6e:	mov    rdx,rbp
  408e71:	mov    rsi,r14
  408e74:	lea    rcx,[rsp+0x20]
  408e79:	mov    rdi,rbx
  408e7c:	call   4083c0 <_start@@Base+0x5090>
  408e81:	mov    edx,DWORD PTR [rsp+0x20]
  408e85:	movabs r14,0x616161615f626262
  408e8f:	lea    r15,[rip+0x1125e]        # 41a0f4 <_IO_stdin_used@@Base+0xf4>
  408e96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408ea0:	test   edx,edx
  408ea2:	je     40a31d <_start@@Base+0x6fed>
  408ea8:	movabs r12,0x625f73746172745f
  408eb2:	cmp    rbp,rax
  408eb5:	je     408ed3 <_start@@Base+0x5ba3>
  408eb7:	movzx  edx,BYTE PTR [rax]
  408eba:	cmp    dl,0x22
  408ebd:	je     408fb0 <_start@@Base+0x5c80>
  408ec3:	cmp    dl,0x2e
  408ec6:	je     4092c0 <_start@@Base+0x5f90>
  408ecc:	mov    DWORD PTR [rbx+0x14],0x1
  408ed3:	mov    rdx,rbp
  408ed6:	sub    rdx,rax
  408ed9:	cmp    rdx,0x7
  408edd:	jbe    408f90 <_start@@Base+0x5c60>
  408ee3:	movbe  rdx,QWORD PTR [rax]
  408ee8:	cmp    rdx,r14
  408eeb:	jne    408f90 <_start@@Base+0x5c60>
  408ef1:	lea    r13,[rax+0x8]
  408ef5:	mov    rdx,rbp
  408ef8:	sub    rdx,r13
  408efb:	cmp    rdx,0x7
  408eff:	ja     409040 <_start@@Base+0x5d10>
  408f05:	movsxd rdx,DWORD PTR [r15+rdx*4]
  408f09:	add    rdx,r15
  408f0c:	notrack jmp rdx
  408f0f:	nop
  408f10:	mov    rsi,r13
  408f13:	mov    rdx,rbp
  408f16:	mov    rdi,rbx
  408f19:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408f1e:	mov    r13,rax
  408f21:	mov    rax,rbp
  408f24:	sub    rax,r13
  408f27:	cmp    rax,0x1
  408f2b:	jle    408f3a <_start@@Base+0x5c0a>
  408f2d:	cmp    BYTE PTR [r13+0x0],0x20
  408f32:	jg     408f4b <_start@@Base+0x5c1b>
  408f34:	je     409248 <_start@@Base+0x5f18>
  408f3a:	mov    rsi,r13
  408f3d:	mov    rdx,rbp
  408f40:	mov    rdi,rbx
  408f43:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408f48:	mov    r13,rax
  408f4b:	cmp    rbp,r13
  408f4e:	je     408ff8 <_start@@Base+0x5cc8>
  408f54:	cmp    BYTE PTR [r13+0x0],0x2c
  408f59:	je     409260 <_start@@Base+0x5f30>
  408f5f:	mov    DWORD PTR [rsp+0x20],0x0
  408f67:	cmp    BYTE PTR [r13+0x0],0x7d
  408f6c:	je     408fc0 <_start@@Base+0x5c90>
  408f6e:	mov    rdx,rbp
  408f71:	mov    ecx,0xa
  408f76:	mov    rsi,r13
  408f79:	mov    rdi,rbx
  408f7c:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  408f81:	mov    edx,DWORD PTR [rsp+0x20]
  408f85:	jmp    408ea0 <_start@@Base+0x5b70>
  408f8a:	nop    WORD PTR [rax+rax*1+0x0]
  408f90:	mov    rdx,rbp
  408f93:	mov    rsi,rax
  408f96:	mov    rdi,rbx
  408f99:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  408f9e:	mov    r13,rax
  408fa1:	jmp    408f21 <_start@@Base+0x5bf1>
  408fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408fb0:	inc    rax
  408fb3:	mov    DWORD PTR [rbx+0x14],0x0
  408fba:	jmp    408ed3 <_start@@Base+0x5ba3>
  408fbf:	nop
  408fc0:	lea    rsi,[r13+0x1]
  408fc4:	mov    rax,rbp
  408fc7:	sub    rax,rsi
  408fca:	cmp    rax,0x1
  408fce:	jle    408fe1 <_start@@Base+0x5cb1>
  408fd0:	cmp    BYTE PTR [r13+0x1],0x20
  408fd5:	jg     409300 <_start@@Base+0x5fd0>
  408fdb:	je     4093d0 <_start@@Base+0x60a0>
  408fe1:	mov    rdx,rbp
  408fe4:	mov    rdi,rbx
  408fe7:	call   416950 <flatcc_json_parser_space_ext@@Base>
  408fec:	mov    edx,DWORD PTR [rsp+0x20]
  408ff0:	jmp    408ea0 <_start@@Base+0x5b70>
  408ff5:	nop    DWORD PTR [rax]
  408ff8:	mov    DWORD PTR [rsp+0x20],0x0
  409000:	mov    eax,DWORD PTR [rbx+0x20]
  409003:	test   eax,eax
  409005:	jne    408c70 <_start@@Base+0x5940>
  40900b:	mov    rdi,QWORD PTR [rbx]
  40900e:	call   413a40 <flatcc_builder_end_table@@Base>
  409013:	mov    r12d,eax
  409016:	test   eax,eax
  409018:	je     408c70 <_start@@Base+0x5940>
  40901e:	mov    rdi,QWORD PTR [rbx]
  409021:	mov    esi,0x1
  409026:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40902b:	test   rax,rax
  40902e:	je     4084c8 <_start@@Base+0x5198>
  409034:	mov    DWORD PTR [rax],r12d
  409037:	jmp    408597 <_start@@Base+0x5267>
  40903c:	nop    DWORD PTR [rax+0x0]
  409040:	movbe  rax,QWORD PTR [rax+0x8]
  409046:	movabs rdi,0x625f737465707300
  409050:	mov    rcx,rax
  409053:	xor    cl,cl
  409055:	cmp    rcx,rdi
  409058:	jne    409150 <_start@@Base+0x5e20>
  40905e:	cmp    rdx,0x7
  409062:	jle    408f10 <_start@@Base+0x5be0>
  409068:	mov    ecx,0x7
  40906d:	mov    rdx,rbp
  409070:	mov    rsi,r13
  409073:	mov    rdi,rbx
  409076:	call   407470 <_start@@Base+0x4140>
  40907b:	cmp    r13,rax
  40907e:	je     408f10 <_start@@Base+0x5be0>
  409084:	mov    QWORD PTR [rsp+0x28],0x0
  40908d:	mov    QWORD PTR [rsp+0x30],0x0
  409096:	mov    DWORD PTR [rsp+0x24],0x0
  40909e:	cmp    rbp,rax
  4090a1:	je     4093b0 <_start@@Base+0x6080>
  4090a7:	lea    rcx,[rsp+0x24]
  4090ac:	lea    r8,[rsp+0x30]
  4090b1:	mov    rdx,rbp
  4090b4:	mov    rsi,rax
  4090b7:	mov    rdi,rbx
  4090ba:	mov    QWORD PTR [rsp],rax
  4090be:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4090c3:	mov    r11,QWORD PTR [rsp]
  4090c7:	mov    r13,rax
  4090ca:	cmp    r11,rax
  4090cd:	jne    409428 <_start@@Base+0x60f8>
  4090d3:	lea    r8,[rsp+0x28]
  4090d8:	lea    rcx,[rip+0x18381]        # 421460 <__data_start@@Base+0x3a0>
  4090df:	mov    rdx,rbp
  4090e2:	mov    rsi,r13
  4090e5:	mov    rdi,rbx
  4090e8:	call   405310 <_start@@Base+0x1fe0>
  4090ed:	cmp    rax,r13
  4090f0:	je     40a308 <_start@@Base+0x6fd8>
  4090f6:	cmp    rbp,rax
  4090f9:	je     40a308 <_start@@Base+0x6fd8>
  4090ff:	mov    rdx,QWORD PTR [rsp+0x28]
  409104:	mov    r13,rax
  409107:	nop    WORD PTR [rax+rax*1+0x0]
  409110:	test   rdx,rdx
  409113:	jne    40911f <_start@@Base+0x5def>
  409115:	test   BYTE PTR [rbx+0x10],0x2
  409119:	je     408f21 <_start@@Base+0x5bf1>
  40911f:	mov    rdi,QWORD PTR [rbx]
  409122:	xor    esi,esi
  409124:	mov    ecx,0x8
  409129:	mov    edx,0x8
  40912e:	call   414940 <flatcc_builder_table_add@@Base>
  409133:	test   rax,rax
  409136:	je     408c70 <_start@@Base+0x5940>
  40913c:	mov    rdx,QWORD PTR [rsp+0x28]
  409141:	mov    QWORD PTR [rax],rdx
  409144:	jmp    408f21 <_start@@Base+0x5bf1>
  409149:	nop    DWORD PTR [rax+0x0]
  409150:	cmp    rax,r12
  409153:	jne    408f10 <_start@@Base+0x5be0>
  409159:	cmp    rdx,0x8
  40915d:	jle    408f10 <_start@@Base+0x5be0>
  409163:	mov    ecx,0x8
  409168:	mov    rdx,rbp
  40916b:	mov    rsi,r13
  40916e:	mov    rdi,rbx
  409171:	call   407470 <_start@@Base+0x4140>
  409176:	cmp    r13,rax
  409179:	je     408f10 <_start@@Base+0x5be0>
  40917f:	mov    DWORD PTR [rsp+0x24],0x0
  409187:	mov    QWORD PTR [rsp+0x30],0x0
  409190:	mov    DWORD PTR [rsp+0x28],0x0
  409198:	cmp    rbp,rax
  40919b:	je     4093c0 <_start@@Base+0x6090>
  4091a1:	lea    rcx,[rsp+0x28]
  4091a6:	lea    r8,[rsp+0x30]
  4091ab:	mov    rdx,rbp
  4091ae:	mov    rsi,rax
  4091b1:	mov    rdi,rbx
  4091b4:	mov    QWORD PTR [rsp],rax
  4091b8:	call   4184e0 <flatcc_json_parser_integer@@Base>
  4091bd:	mov    r11,QWORD PTR [rsp]
  4091c1:	mov    r9,rax
  4091c4:	cmp    r11,rax
  4091c7:	jne    409468 <_start@@Base+0x6138>
  4091cd:	mov    rsi,r9
  4091d0:	lea    r8,[rsp+0x24]
  4091d5:	lea    rcx,[rip+0x18264]        # 421440 <__data_start@@Base+0x380>
  4091dc:	mov    rdx,rbp
  4091df:	mov    rdi,rbx
  4091e2:	mov    QWORD PTR [rsp],r9
  4091e6:	call   404e50 <_start@@Base+0x1b20>
  4091eb:	mov    r9,QWORD PTR [rsp]
  4091ef:	mov    r13,rax
  4091f2:	cmp    rax,r9
  4091f5:	je     408c70 <_start@@Base+0x5940>
  4091fb:	cmp    rbp,rax
  4091fe:	je     408c70 <_start@@Base+0x5940>
  409204:	mov    eax,DWORD PTR [rsp+0x24]
  409208:	test   eax,eax
  40920a:	jne    409216 <_start@@Base+0x5ee6>
  40920c:	test   BYTE PTR [rbx+0x10],0x2
  409210:	je     408f21 <_start@@Base+0x5bf1>
  409216:	mov    rdi,QWORD PTR [rbx]
  409219:	mov    ecx,0x4
  40921e:	mov    edx,0x4
  409223:	mov    esi,0x1
  409228:	call   414940 <flatcc_builder_table_add@@Base>
  40922d:	test   rax,rax
  409230:	je     408c70 <_start@@Base+0x5940>
  409236:	mov    edx,DWORD PTR [rsp+0x24]
  40923a:	mov    DWORD PTR [rax],edx
  40923c:	jmp    408f21 <_start@@Base+0x5bf1>
  409241:	nop    DWORD PTR [rax+0x0]
  409248:	cmp    BYTE PTR [r13+0x1],0x20
  40924d:	jle    408f3a <_start@@Base+0x5c0a>
  409253:	inc    r13
  409256:	jmp    408f4b <_start@@Base+0x5c1b>
  40925b:	nop    DWORD PTR [rax+rax*1+0x0]
  409260:	lea    rax,[r13+0x1]
  409264:	mov    rdx,rbp
  409267:	sub    rdx,rax
  40926a:	cmp    rdx,0x1
  40926e:	jle    40927d <_start@@Base+0x5f4d>
  409270:	cmp    BYTE PTR [r13+0x1],0x20
  409275:	jg     40928b <_start@@Base+0x5f5b>
  409277:	je     4094a0 <_start@@Base+0x6170>
  40927d:	mov    rdx,rbp
  409280:	mov    rsi,rax
  409283:	mov    rdi,rbx
  409286:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40928b:	cmp    rbp,rax
  40928e:	je     4094c0 <_start@@Base+0x6190>
  409294:	cmp    BYTE PTR [rax],0x7d
  409297:	je     409f40 <_start@@Base+0x6c10>
  40929d:	mov    DWORD PTR [rsp+0x20],0x1
  4092a5:	jmp    408eb2 <_start@@Base+0x5b82>
  4092aa:	nop    WORD PTR [rax+rax*1+0x0]
  4092b0:	movbe  rax,QWORD PTR [rax+0x10]
  4092b6:	jmp    4086e6 <_start@@Base+0x53b6>
  4092bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4092c0:	mov    ecx,0x5
  4092c5:	mov    rdx,rbp
  4092c8:	mov    rsi,rax
  4092cb:	mov    rdi,rbx
  4092ce:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4092d3:	jmp    408ed3 <_start@@Base+0x5ba3>
  4092d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4092e0:	mov    ecx,0x5
  4092e5:	mov    rdx,rbp
  4092e8:	mov    rsi,rax
  4092eb:	mov    rdi,rbx
  4092ee:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4092f3:	jmp    40854d <_start@@Base+0x521d>
  4092f8:	nop    DWORD PTR [rax+rax*1+0x0]
  409300:	mov    r13,rsi
  409303:	jmp    409000 <_start@@Base+0x5cd0>
  409308:	nop    DWORD PTR [rax+rax*1+0x0]
  409310:	mov    ecx,0x5
  409315:	mov    rdx,rbp
  409318:	mov    rsi,rax
  40931b:	mov    rdi,rbx
  40931e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409323:	jmp    408970 <_start@@Base+0x5640>
  409328:	nop    DWORD PTR [rax+rax*1+0x0]
  409330:	mov    ecx,0x21
  409335:	mov    rdx,rbp
  409338:	mov    rsi,r14
  40933b:	mov    rdi,rbx
  40933e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409343:	mov    r13,rax
  409346:	jmp    4084c8 <_start@@Base+0x5198>
  40934b:	nop    DWORD PTR [rax+rax*1+0x0]
  409350:	movbe  rax,QWORD PTR [rax+0x10]
  409356:	jmp    408cc8 <_start@@Base+0x5998>
  40935b:	nop    DWORD PTR [rax+rax*1+0x0]
  409360:	mov    r13,rsi
  409363:	jmp    408830 <_start@@Base+0x5500>
  409368:	nop    DWORD PTR [rax+rax*1+0x0]
  409370:	mov    edx,DWORD PTR [rbx+0x20]
  409373:	mov    r13,rsi
  409376:	test   edx,edx
  409378:	jne    408c70 <_start@@Base+0x5940>
  40937e:	mov    rdi,QWORD PTR [rbx]
  409381:	call   413a40 <flatcc_builder_end_table@@Base>
  409386:	mov    r12d,eax
  409389:	test   eax,eax
  40938b:	je     408c70 <_start@@Base+0x5940>
  409391:	mov    rdi,QWORD PTR [rbx]
  409394:	mov    esi,0x2
  409399:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40939e:	test   rax,rax
  4093a1:	jne    409034 <_start@@Base+0x5d04>
  4093a7:	jmp    4084c8 <_start@@Base+0x5198>
  4093ac:	nop    DWORD PTR [rax+0x0]
  4093b0:	mov    r13,rbp
  4093b3:	jmp    4090d3 <_start@@Base+0x5da3>
  4093b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4093c0:	mov    r9,rbp
  4093c3:	jmp    4091cd <_start@@Base+0x5e9d>
  4093c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4093d0:	cmp    BYTE PTR [r13+0x2],0x20
  4093d5:	jle    408fe1 <_start@@Base+0x5cb1>
  4093db:	add    r13,0x2
  4093df:	jmp    409000 <_start@@Base+0x5cd0>
  4093e4:	nop    DWORD PTR [rax+0x0]
  4093e8:	cmp    BYTE PTR [r13+0x2],0x20
  4093ed:	jle    408811 <_start@@Base+0x54e1>
  4093f3:	add    r13,0x2
  4093f7:	jmp    408830 <_start@@Base+0x5500>
  4093fc:	nop    DWORD PTR [rax+0x0]
  409400:	mov    r13,rbp
  409403:	jmp    408a8f <_start@@Base+0x575f>
  409408:	nop    DWORD PTR [rax+rax*1+0x0]
  409410:	cmp    BYTE PTR [r13+0x2],0x20
  409415:	jle    408c41 <_start@@Base+0x5911>
  40941b:	add    r13,0x2
  40941f:	jmp    408c60 <_start@@Base+0x5930>
  409424:	nop    DWORD PTR [rax+0x0]
  409428:	mov    edx,DWORD PTR [rsp+0x24]
  40942c:	mov    rax,QWORD PTR [rsp+0x30]
  409431:	test   edx,edx
  409433:	je     409fe0 <_start@@Base+0x6cb0>
  409439:	movabs rdx,0x8000000000000000
  409443:	mov    ecx,0x8
  409448:	cmp    rax,rdx
  40944b:	ja     40a1d1 <_start@@Base+0x6ea1>
  409451:	neg    rax
  409454:	mov    rdx,rax
  409457:	mov    QWORD PTR [rsp+0x28],rax
  40945c:	jmp    409110 <_start@@Base+0x5de0>
  409461:	nop    DWORD PTR [rax+0x0]
  409468:	mov    eax,DWORD PTR [rsp+0x28]
  40946c:	mov    ecx,0x8
  409471:	test   eax,eax
  409473:	jne    40a11c <_start@@Base+0x6dec>
  409479:	mov    rdx,QWORD PTR [rsp+0x30]
  40947e:	mov    eax,0xffffffff
  409483:	cmp    rdx,rax
  409486:	ja     40a113 <_start@@Base+0x6de3>
  40948c:	mov    eax,edx
  40948e:	mov    DWORD PTR [rsp+0x24],edx
  409492:	mov    r13,r9
  409495:	jmp    409208 <_start@@Base+0x5ed8>
  40949a:	nop    WORD PTR [rax+rax*1+0x0]
  4094a0:	cmp    BYTE PTR [r13+0x2],0x20
  4094a5:	jle    40927d <_start@@Base+0x5f4d>
  4094ab:	lea    rax,[r13+0x2]
  4094af:	cmp    rbp,rax
  4094b2:	jne    409294 <_start@@Base+0x5f64>
  4094b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4094c0:	mov    rdx,rbp
  4094c3:	mov    ecx,0xa
  4094c8:	mov    rsi,rbp
  4094cb:	mov    rdi,rbx
  4094ce:	mov    DWORD PTR [rsp+0x20],0x0
  4094d6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4094db:	mov    edx,DWORD PTR [rsp+0x20]
  4094df:	jmp    408ea0 <_start@@Base+0x5b70>
  4094e4:	nop    DWORD PTR [rax+0x0]
  4094e8:	mov    ecx,DWORD PTR [rsp+0x24]
  4094ec:	mov    rdx,QWORD PTR [rsp+0x30]
  4094f1:	test   ecx,ecx
  4094f3:	je     40a0c8 <_start@@Base+0x6d98>
  4094f9:	movabs rax,0x8000000000000000
  409503:	mov    ecx,0x8
  409508:	cmp    rdx,rax
  40950b:	ja     40a225 <_start@@Base+0x6ef5>
  409511:	neg    rdx
  409514:	mov    QWORD PTR [rsp+0x28],rdx
  409519:	jmp    408ac8 <_start@@Base+0x5798>
  40951e:	xchg   ax,ax
  409520:	mov    rsi,r15
  409523:	lea    rcx,[rsp+0x1c]
  409528:	mov    rdx,rbp
  40952b:	mov    rdi,rbx
  40952e:	call   4083c0 <_start@@Base+0x5090>
  409533:	mov    r15,rax
  409536:	mov    eax,DWORD PTR [rsp+0x1c]
  40953a:	movabs r14,0xffffffff00000000
  409544:	nop    DWORD PTR [rax+0x0]
  409548:	test   eax,eax
  40954a:	je     4096f3 <_start@@Base+0x63c3>
  409550:	movabs r12,0xff00000000000000
  40955a:	cmp    rbp,r15
  40955d:	je     40957a <_start@@Base+0x624a>
  40955f:	movzx  eax,BYTE PTR [r15]
  409563:	cmp    al,0x22
  409565:	je     409910 <_start@@Base+0x65e0>
  40956b:	cmp    al,0x2e
  40956d:	je     409d30 <_start@@Base+0x6a00>
  409573:	mov    DWORD PTR [rbx+0x14],0x1
  40957a:	mov    rsi,rbp
  40957d:	sub    rsi,r15
  409580:	cmp    rsi,0x7
  409584:	jbe    409700 <_start@@Base+0x63d0>
  40958a:	movbe  rax,QWORD PTR [r15]
  40958f:	movabs rdx,0x63636362ffffffff
  409599:	cmp    rax,rdx
  40959c:	ja     4099c0 <_start@@Base+0x6690>
  4095a2:	movabs rdx,0x6161616131323334
  4095ac:	cmp    rax,rdx
  4095af:	jne    40a325 <_start@@Base+0x6ff5>
  4095b5:	lea    r13,[r15+0x8]
  4095b9:	mov    r11,rbp
  4095bc:	sub    r11,r13
  4095bf:	cmp    r11,0x7
  4095c3:	ja     409d50 <_start@@Base+0x6a20>
  4095c9:	mov    rsi,rbp
  4095cc:	mov    rdi,r13
  4095cf:	call   403420 <_start@@Base+0xf0>
  4095d4:	and    rax,r12
  4095d7:	movabs rdx,0x3500000000000000
  4095e1:	cmp    rax,rdx
  4095e4:	jne    409960 <_start@@Base+0x6630>
  4095ea:	cmp    r11,0x1
  4095ee:	jle    409960 <_start@@Base+0x6630>
  4095f4:	mov    ecx,0x1
  4095f9:	mov    rdx,rbp
  4095fc:	mov    rsi,r13
  4095ff:	mov    rdi,rbx
  409602:	call   407470 <_start@@Base+0x4140>
  409607:	mov    r15,rax
  40960a:	cmp    r13,rax
  40960d:	je     409960 <_start@@Base+0x6630>
  409613:	lea    r8,[rsp+0x30]
  409618:	mov    rcx,r8
  40961b:	mov    rdx,rbp
  40961e:	mov    rsi,rax
  409621:	mov    rdi,rbx
  409624:	mov    QWORD PTR [rsp],r8
  409628:	mov    DWORD PTR [rsp+0x30],0x0
  409630:	call   4042a0 <_start@@Base+0xf70>
  409635:	cmp    r15,rax
  409638:	mov    r13,rax
  40963b:	mov    r8,QWORD PTR [rsp]
  40963f:	je     40a15b <_start@@Base+0x6e2b>
  409645:	mov    eax,DWORD PTR [rsp+0x30]
  409649:	test   eax,eax
  40964b:	jne    409653 <_start@@Base+0x6323>
  40964d:	test   BYTE PTR [rbx+0x10],0x2
  409651:	je     409680 <_start@@Base+0x6350>
  409653:	mov    rdi,QWORD PTR [rbx]
  409656:	mov    ecx,0x4
  40965b:	mov    edx,0x4
  409660:	mov    esi,0x1
  409665:	call   414940 <flatcc_builder_table_add@@Base>
  40966a:	test   rax,rax
  40966d:	je     408c70 <_start@@Base+0x5940>
  409673:	mov    edx,DWORD PTR [rsp+0x30]
  409677:	mov    DWORD PTR [rax],edx
  409679:	nop    DWORD PTR [rax+0x0]
  409680:	mov    rax,rbp
  409683:	sub    rax,r13
  409686:	cmp    rax,0x1
  40968a:	jle    409699 <_start@@Base+0x6369>
  40968c:	cmp    BYTE PTR [r13+0x0],0x20
  409691:	jg     4096aa <_start@@Base+0x637a>
  409693:	je     409b70 <_start@@Base+0x6840>
  409699:	mov    rsi,r13
  40969c:	mov    rdx,rbp
  40969f:	mov    rdi,rbx
  4096a2:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4096a7:	mov    r13,rax
  4096aa:	cmp    rbp,r13
  4096ad:	je     409980 <_start@@Base+0x6650>
  4096b3:	cmp    BYTE PTR [r13+0x0],0x2c
  4096b8:	je     409b88 <_start@@Base+0x6858>
  4096be:	mov    DWORD PTR [rsp+0x1c],0x0
  4096c6:	cmp    BYTE PTR [r13+0x0],0x7d
  4096cb:	je     409920 <_start@@Base+0x65f0>
  4096d1:	mov    ecx,0xa
  4096d6:	mov    rdx,rbp
  4096d9:	mov    rsi,r13
  4096dc:	mov    rdi,rbx
  4096df:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4096e4:	mov    r15,rax
  4096e7:	mov    eax,DWORD PTR [rsp+0x1c]
  4096eb:	test   eax,eax
  4096ed:	jne    409550 <_start@@Base+0x6220>
  4096f3:	mov    r13,r15
  4096f6:	jmp    409988 <_start@@Base+0x6658>
  4096fb:	nop    DWORD PTR [rax+rax*1+0x0]
  409700:	lea    rdx,[rip+0x10a0d]        # 41a114 <_IO_stdin_used@@Base+0x114>
  409707:	movsxd rax,DWORD PTR [rdx+rsi*4]
  40970b:	add    rax,rdx
  40970e:	notrack jmp rax
  409711:	nop    DWORD PTR [rax+0x0]
  409718:	movsx  rdx,BYTE PTR [r15+0x6]
  40971d:	shl    rdx,0x8
  409721:	movsx  rcx,BYTE PTR [r15+0x5]
  409726:	mov    rax,rcx
  409729:	shl    rax,0x10
  40972d:	or     rdx,rax
  409730:	movsx  rcx,BYTE PTR [r15+0x4]
  409735:	mov    rax,rcx
  409738:	shl    rax,0x18
  40973c:	or     rax,rdx
  40973f:	movsx  rcx,BYTE PTR [r15+0x3]
  409744:	shl    rcx,0x20
  409748:	or     rax,rcx
  40974b:	movsx  rcx,BYTE PTR [r15+0x2]
  409750:	shl    rcx,0x28
  409754:	mov    rdx,rcx
  409757:	or     rdx,rax
  40975a:	movsx  rcx,BYTE PTR [r15+0x1]
  40975f:	mov    rax,rcx
  409762:	shl    rax,0x30
  409766:	or     rdx,rax
  409769:	movsx  rax,BYTE PTR [r15]
  40976d:	shl    rax,0x38
  409771:	or     rax,rdx
  409774:	movabs rdx,0x63636362ffffffff
  40977e:	cmp    rax,rdx
  409781:	ja     409890 <_start@@Base+0x6560>
  409787:	and    rax,r14
  40978a:	mov    rdx,rax
  40978d:	movabs rax,0x6161616100000000
  409797:	cmp    rdx,rax
  40979a:	jne    409cb0 <_start@@Base+0x6980>
  4097a0:	cmp    rsi,0x4
  4097a4:	jle    409870 <_start@@Base+0x6540>
  4097aa:	mov    ecx,0x4
  4097af:	mov    rdx,rbp
  4097b2:	mov    rsi,r15
  4097b5:	mov    rdi,rbx
  4097b8:	call   407470 <_start@@Base+0x4140>
  4097bd:	cmp    rax,r15
  4097c0:	je     409870 <_start@@Base+0x6540>
  4097c6:	lea    rcx,[rsp+0x20]
  4097cb:	mov    rdx,rbp
  4097ce:	mov    rsi,rax
  4097d1:	mov    rdi,rbx
  4097d4:	call   418a60 <flatcc_json_parser_build_string@@Base>
  4097d9:	mov    r13,rax
  4097dc:	mov    eax,DWORD PTR [rsp+0x20]
  4097e0:	test   eax,eax
  4097e2:	je     408c70 <_start@@Base+0x5940>
  4097e8:	mov    rdi,QWORD PTR [rbx]
  4097eb:	xor    esi,esi
  4097ed:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  4097f2:	test   rax,rax
  4097f5:	je     408c70 <_start@@Base+0x5940>
  4097fb:	mov    edx,DWORD PTR [rsp+0x20]
  4097ff:	mov    DWORD PTR [rax],edx
  409801:	jmp    409680 <_start@@Base+0x6350>
  409806:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409810:	xor    edx,edx
  409812:	jmp    409721 <_start@@Base+0x63f1>
  409817:	nop    WORD PTR [rax+rax*1+0x0]
  409820:	xor    edx,edx
  409822:	jmp    409730 <_start@@Base+0x6400>
  409827:	nop    WORD PTR [rax+rax*1+0x0]
  409830:	xor    eax,eax
  409832:	jmp    40973f <_start@@Base+0x640f>
  409837:	nop    WORD PTR [rax+rax*1+0x0]
  409840:	xor    eax,eax
  409842:	jmp    40974b <_start@@Base+0x641b>
  409847:	nop    WORD PTR [rax+rax*1+0x0]
  409850:	xor    edx,edx
  409852:	jmp    40975a <_start@@Base+0x642a>
  409857:	nop    WORD PTR [rax+rax*1+0x0]
  409860:	xor    edx,edx
  409862:	jmp    409769 <_start@@Base+0x6439>
  409867:	nop    WORD PTR [rax+rax*1+0x0]
  409870:	mov    rdx,rbp
  409873:	mov    rsi,r15
  409876:	mov    rdi,rbx
  409879:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40987e:	mov    r13,rax
  409881:	jmp    409680 <_start@@Base+0x6350>
  409886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409890:	mov    rdx,rax
  409893:	and    rdx,r14
  409896:	movabs rdi,0x6363636300000000
  4098a0:	cmp    rdx,rdi
  4098a3:	jne    409ac0 <_start@@Base+0x6790>
  4098a9:	cmp    rsi,0x4
  4098ad:	jle    409870 <_start@@Base+0x6540>
  4098af:	mov    ecx,0x4
  4098b4:	mov    rdx,rbp
  4098b7:	mov    rsi,r15
  4098ba:	mov    rdi,rbx
  4098bd:	call   407470 <_start@@Base+0x4140>
  4098c2:	cmp    rax,r15
  4098c5:	je     409870 <_start@@Base+0x6540>
  4098c7:	lea    rcx,[rsp+0x20]
  4098cc:	mov    rdx,rbp
  4098cf:	mov    rsi,rax
  4098d2:	mov    rdi,rbx
  4098d5:	call   418a60 <flatcc_json_parser_build_string@@Base>
  4098da:	mov    r9d,DWORD PTR [rsp+0x20]
  4098df:	mov    r13,rax
  4098e2:	test   r9d,r9d
  4098e5:	je     408c70 <_start@@Base+0x5940>
  4098eb:	mov    rdi,QWORD PTR [rbx]
  4098ee:	mov    esi,0x4
  4098f3:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  4098f8:	test   rax,rax
  4098fb:	jne    4097fb <_start@@Base+0x64cb>
  409901:	jmp    408c70 <_start@@Base+0x5940>
  409906:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409910:	inc    r15
  409913:	mov    DWORD PTR [rbx+0x14],0x0
  40991a:	jmp    40957a <_start@@Base+0x624a>
  40991f:	nop
  409920:	lea    rsi,[r13+0x1]
  409924:	mov    rax,rbp
  409927:	sub    rax,rsi
  40992a:	cmp    rax,0x1
  40992e:	jle    409941 <_start@@Base+0x6611>
  409930:	cmp    BYTE PTR [r13+0x1],0x20
  409935:	jg     409d60 <_start@@Base+0x6a30>
  40993b:	je     409e40 <_start@@Base+0x6b10>
  409941:	mov    rdx,rbp
  409944:	mov    rdi,rbx
  409947:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40994c:	mov    r15,rax
  40994f:	mov    eax,DWORD PTR [rsp+0x1c]
  409953:	jmp    409548 <_start@@Base+0x6218>
  409958:	nop    DWORD PTR [rax+rax*1+0x0]
  409960:	mov    rsi,r13
  409963:	mov    rdx,rbp
  409966:	mov    rdi,rbx
  409969:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40996e:	mov    r13,rax
  409971:	jmp    409680 <_start@@Base+0x6350>
  409976:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409980:	mov    DWORD PTR [rsp+0x1c],0x0
  409988:	mov    edi,DWORD PTR [rbx+0x20]
  40998b:	test   edi,edi
  40998d:	jne    408c70 <_start@@Base+0x5940>
  409993:	mov    rdi,QWORD PTR [rbx]
  409996:	call   413a40 <flatcc_builder_end_table@@Base>
  40999b:	mov    r12d,eax
  40999e:	test   eax,eax
  4099a0:	je     408c70 <_start@@Base+0x5940>
  4099a6:	mov    rdi,QWORD PTR [rbx]
  4099a9:	xor    esi,esi
  4099ab:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  4099b0:	test   rax,rax
  4099b3:	jne    409034 <_start@@Base+0x5d04>
  4099b9:	jmp    4084c8 <_start@@Base+0x5198>
  4099be:	xchg   ax,ax
  4099c0:	movabs rdx,0x6363636331323334
  4099ca:	cmp    rax,rdx
  4099cd:	jne    409890 <_start@@Base+0x6560>
  4099d3:	cmp    rsi,0x8
  4099d7:	jle    409be0 <_start@@Base+0x68b0>
  4099dd:	mov    ecx,0x8
  4099e2:	mov    rdx,rbp
  4099e5:	mov    rsi,r15
  4099e8:	mov    rdi,rbx
  4099eb:	call   407470 <_start@@Base+0x4140>
  4099f0:	cmp    rax,r15
  4099f3:	je     409be0 <_start@@Base+0x68b0>
  4099f9:	mov    QWORD PTR [rsp+0x28],0x0
  409a02:	mov    QWORD PTR [rsp+0x30],0x0
  409a0b:	mov    DWORD PTR [rsp+0x24],0x0
  409a13:	cmp    rbp,rax
  409a16:	je     409ed8 <_start@@Base+0x6ba8>
  409a1c:	lea    rcx,[rsp+0x24]
  409a21:	lea    r8,[rsp+0x30]
  409a26:	mov    rdx,rbp
  409a29:	mov    rsi,rax
  409a2c:	mov    rdi,rbx
  409a2f:	mov    QWORD PTR [rsp],rax
  409a33:	call   4184e0 <flatcc_json_parser_integer@@Base>
  409a38:	mov    r11,QWORD PTR [rsp]
  409a3c:	mov    r13,rax
  409a3f:	cmp    r11,rax
  409a42:	jne    409f90 <_start@@Base+0x6c60>
  409a48:	lea    r8,[rsp+0x28]
  409a4d:	lea    rcx,[rip+0x1798c]        # 4213e0 <__data_start@@Base+0x320>
  409a54:	mov    rdx,rbp
  409a57:	mov    rsi,r13
  409a5a:	mov    rdi,rbx
  409a5d:	call   405310 <_start@@Base+0x1fe0>
  409a62:	cmp    rax,r13
  409a65:	je     40a308 <_start@@Base+0x6fd8>
  409a6b:	cmp    rbp,rax
  409a6e:	je     40a308 <_start@@Base+0x6fd8>
  409a74:	mov    rdx,QWORD PTR [rsp+0x28]
  409a79:	mov    r13,rax
  409a7c:	nop    DWORD PTR [rax+0x0]
  409a80:	test   rdx,rdx
  409a83:	jne    409a8f <_start@@Base+0x675f>
  409a85:	test   BYTE PTR [rbx+0x10],0x2
  409a89:	je     409680 <_start@@Base+0x6350>
  409a8f:	mov    rdi,QWORD PTR [rbx]
  409a92:	mov    ecx,0x8
  409a97:	mov    edx,0x8
  409a9c:	mov    esi,0x5
  409aa1:	call   414940 <flatcc_builder_table_add@@Base>
  409aa6:	test   rax,rax
  409aa9:	je     408c70 <_start@@Base+0x5940>
  409aaf:	mov    rdx,QWORD PTR [rsp+0x28]
  409ab4:	mov    QWORD PTR [rax],rdx
  409ab7:	jmp    409680 <_start@@Base+0x6350>
  409abc:	nop    DWORD PTR [rax+0x0]
  409ac0:	movabs rdi,0x6464646431323334
  409aca:	cmp    rax,rdi
  409acd:	jne    409870 <_start@@Base+0x6540>
  409ad3:	cmp    rsi,0x8
  409ad7:	jle    409d70 <_start@@Base+0x6a40>
  409add:	mov    ecx,0x8
  409ae2:	mov    rdx,rbp
  409ae5:	mov    rsi,r15
  409ae8:	mov    rdi,rbx
  409aeb:	call   407470 <_start@@Base+0x4140>
  409af0:	cmp    rax,r15
  409af3:	je     409d70 <_start@@Base+0x6a40>
  409af9:	lea    r15,[rsp+0x30]
  409afe:	mov    rcx,r15
  409b01:	mov    rdx,rbp
  409b04:	mov    rsi,rax
  409b07:	mov    rdi,rbx
  409b0a:	mov    QWORD PTR [rsp+0x30],0x0
  409b13:	mov    QWORD PTR [rsp],rax
  409b17:	call   4040e0 <_start@@Base+0xdb0>
  409b1c:	mov    r11,QWORD PTR [rsp]
  409b20:	mov    r13,rax
  409b23:	cmp    r11,rax
  409b26:	je     40a190 <_start@@Base+0x6e60>
  409b2c:	cmp    QWORD PTR [rsp+0x30],0x0
  409b32:	jne    409b3e <_start@@Base+0x680e>
  409b34:	test   BYTE PTR [rbx+0x10],0x2
  409b38:	je     409680 <_start@@Base+0x6350>
  409b3e:	mov    rdi,QWORD PTR [rbx]
  409b41:	mov    ecx,0x8
  409b46:	mov    edx,0x8
  409b4b:	mov    esi,0x7
  409b50:	call   414940 <flatcc_builder_table_add@@Base>
  409b55:	test   rax,rax
  409b58:	je     408c70 <_start@@Base+0x5940>
  409b5e:	mov    rdx,QWORD PTR [rsp+0x30]
  409b63:	mov    QWORD PTR [rax],rdx
  409b66:	jmp    409680 <_start@@Base+0x6350>
  409b6b:	nop    DWORD PTR [rax+rax*1+0x0]
  409b70:	cmp    BYTE PTR [r13+0x1],0x20
  409b75:	jle    409699 <_start@@Base+0x6369>
  409b7b:	inc    r13
  409b7e:	jmp    4096aa <_start@@Base+0x637a>
  409b83:	nop    DWORD PTR [rax+rax*1+0x0]
  409b88:	lea    r15,[r13+0x1]
  409b8c:	mov    rax,rbp
  409b8f:	sub    rax,r15
  409b92:	cmp    rax,0x1
  409b96:	jle    409ba5 <_start@@Base+0x6875>
  409b98:	cmp    BYTE PTR [r13+0x1],0x20
  409b9d:	jg     409bb6 <_start@@Base+0x6886>
  409b9f:	je     409ee0 <_start@@Base+0x6bb0>
  409ba5:	mov    rsi,r15
  409ba8:	mov    rdx,rbp
  409bab:	mov    rdi,rbx
  409bae:	call   416950 <flatcc_json_parser_space_ext@@Base>
  409bb3:	mov    r15,rax
  409bb6:	cmp    rbp,r15
  409bb9:	je     409f00 <_start@@Base+0x6bd0>
  409bbf:	cmp    BYTE PTR [r15],0x7d
  409bc3:	je     40a0f0 <_start@@Base+0x6dc0>
  409bc9:	mov    DWORD PTR [rsp+0x1c],0x1
  409bd1:	jmp    40955a <_start@@Base+0x622a>
  409bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409be0:	lea    r13,[r15+0x8]
  409be4:	mov    r11,rbp
  409be7:	sub    r11,r13
  409bea:	cmp    r11,0x7
  409bee:	ja     409f30 <_start@@Base+0x6c00>
  409bf4:	mov    rsi,rbp
  409bf7:	mov    rdi,r13
  409bfa:	call   403420 <_start@@Base+0xf0>
  409bff:	and    rax,r12
  409c02:	movabs rdx,0x3500000000000000
  409c0c:	cmp    rax,rdx
  409c0f:	jne    409960 <_start@@Base+0x6630>
  409c15:	cmp    r11,0x1
  409c19:	jle    409960 <_start@@Base+0x6630>
  409c1f:	mov    ecx,0x1
  409c24:	mov    rdx,rbp
  409c27:	mov    rsi,r13
  409c2a:	mov    rdi,rbx
  409c2d:	call   407470 <_start@@Base+0x4140>
  409c32:	mov    r15,rax
  409c35:	cmp    r13,rax
  409c38:	je     409960 <_start@@Base+0x6630>
  409c3e:	lea    r8,[rsp+0x30]
  409c43:	mov    rcx,r8
  409c46:	mov    rdx,rbp
  409c49:	mov    rsi,rax
  409c4c:	mov    rdi,rbx
  409c4f:	mov    QWORD PTR [rsp],r8
  409c53:	mov    DWORD PTR [rsp+0x30],0x0
  409c5b:	call   4042a0 <_start@@Base+0xf70>
  409c60:	cmp    r15,rax
  409c63:	mov    r13,rax
  409c66:	mov    r8,QWORD PTR [rsp]
  409c6a:	je     40a249 <_start@@Base+0x6f19>
  409c70:	mov    r10d,DWORD PTR [rsp+0x30]
  409c75:	test   r10d,r10d
  409c78:	jne    409c84 <_start@@Base+0x6954>
  409c7a:	test   BYTE PTR [rbx+0x10],0x2
  409c7e:	je     409680 <_start@@Base+0x6350>
  409c84:	mov    rdi,QWORD PTR [rbx]
  409c87:	mov    ecx,0x4
  409c8c:	mov    edx,0x4
  409c91:	mov    esi,0x6
  409c96:	call   414940 <flatcc_builder_table_add@@Base>
  409c9b:	test   rax,rax
  409c9e:	jne    409673 <_start@@Base+0x6343>
  409ca4:	jmp    408c70 <_start@@Base+0x5940>
  409ca9:	nop    DWORD PTR [rax+0x0]
  409cb0:	movabs rax,0x6262626200000000
  409cba:	cmp    rdx,rax
  409cbd:	jne    409870 <_start@@Base+0x6540>
  409cc3:	cmp    rsi,0x4
  409cc7:	jle    409870 <_start@@Base+0x6540>
  409ccd:	mov    ecx,0x4
  409cd2:	mov    rdx,rbp
  409cd5:	mov    rsi,r15
  409cd8:	mov    rdi,rbx
  409cdb:	call   407470 <_start@@Base+0x4140>
  409ce0:	cmp    rax,r15
  409ce3:	je     409870 <_start@@Base+0x6540>
  409ce9:	lea    rcx,[rsp+0x20]
  409cee:	mov    rdx,rbp
  409cf1:	mov    rsi,rax
  409cf4:	mov    rdi,rbx
  409cf7:	call   418a60 <flatcc_json_parser_build_string@@Base>
  409cfc:	mov    r13,rax
  409cff:	mov    eax,DWORD PTR [rsp+0x20]
  409d03:	test   eax,eax
  409d05:	je     408c70 <_start@@Base+0x5940>
  409d0b:	mov    rdi,QWORD PTR [rbx]
  409d0e:	mov    esi,0x2
  409d13:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  409d18:	test   rax,rax
  409d1b:	jne    4097fb <_start@@Base+0x64cb>
  409d21:	jmp    408c70 <_start@@Base+0x5940>
  409d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409d30:	mov    rsi,r15
  409d33:	mov    ecx,0x5
  409d38:	mov    rdx,rbp
  409d3b:	mov    rdi,rbx
  409d3e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409d43:	mov    r15,rax
  409d46:	jmp    40957a <_start@@Base+0x624a>
  409d4b:	nop    DWORD PTR [rax+rax*1+0x0]
  409d50:	movbe  rax,QWORD PTR [r15+0x8]
  409d56:	jmp    4095d4 <_start@@Base+0x62a4>
  409d5b:	nop    DWORD PTR [rax+rax*1+0x0]
  409d60:	mov    r13,rsi
  409d63:	jmp    409988 <_start@@Base+0x6658>
  409d68:	nop    DWORD PTR [rax+rax*1+0x0]
  409d70:	lea    r13,[r15+0x8]
  409d74:	mov    r11,rbp
  409d77:	sub    r11,r13
  409d7a:	cmp    r11,0x7
  409d7e:	ja     40a0e0 <_start@@Base+0x6db0>
  409d84:	mov    rsi,rbp
  409d87:	mov    rdi,r13
  409d8a:	call   403420 <_start@@Base+0xf0>
  409d8f:	and    rax,r12
  409d92:	movabs rdx,0x3500000000000000
  409d9c:	cmp    rax,rdx
  409d9f:	jne    409960 <_start@@Base+0x6630>
  409da5:	cmp    r11,0x1
  409da9:	jle    409960 <_start@@Base+0x6630>
  409daf:	mov    ecx,0x1
  409db4:	mov    rdx,rbp
  409db7:	mov    rsi,r13
  409dba:	mov    rdi,rbx
  409dbd:	call   407470 <_start@@Base+0x4140>
  409dc2:	mov    r15,rax
  409dc5:	cmp    r13,rax
  409dc8:	je     409960 <_start@@Base+0x6630>
  409dce:	lea    r8,[rsp+0x30]
  409dd3:	mov    rcx,r8
  409dd6:	mov    rdx,rbp
  409dd9:	mov    rsi,rax
  409ddc:	mov    rdi,rbx
  409ddf:	mov    QWORD PTR [rsp],r8
  409de3:	mov    DWORD PTR [rsp+0x30],0x0
  409deb:	call   4042a0 <_start@@Base+0xf70>
  409df0:	cmp    r15,rax
  409df3:	mov    r13,rax
  409df6:	mov    r8,QWORD PTR [rsp]
  409dfa:	je     40a2d6 <_start@@Base+0x6fa6>
  409e00:	mov    r8d,DWORD PTR [rsp+0x30]
  409e05:	test   r8d,r8d
  409e08:	jne    409e14 <_start@@Base+0x6ae4>
  409e0a:	test   BYTE PTR [rbx+0x10],0x2
  409e0e:	je     409680 <_start@@Base+0x6350>
  409e14:	mov    rdi,QWORD PTR [rbx]
  409e17:	mov    ecx,0x4
  409e1c:	mov    edx,0x4
  409e21:	mov    esi,0x8
  409e26:	call   414940 <flatcc_builder_table_add@@Base>
  409e2b:	test   rax,rax
  409e2e:	jne    409673 <_start@@Base+0x6343>
  409e34:	jmp    408c70 <_start@@Base+0x5940>
  409e39:	nop    DWORD PTR [rax+0x0]
  409e40:	cmp    BYTE PTR [r13+0x2],0x20
  409e45:	jle    409941 <_start@@Base+0x6611>
  409e4b:	add    r13,0x2
  409e4f:	jmp    409988 <_start@@Base+0x6658>
  409e54:	nop    DWORD PTR [rax+0x0]
  409e58:	cmp    BYTE PTR [r13+0x2],0x20
  409e5d:	jle    408895 <_start@@Base+0x5565>
  409e63:	lea    rax,[r13+0x2]
  409e67:	cmp    rbp,rax
  409e6a:	jne    4088ac <_start@@Base+0x557c>
  409e70:	mov    rdx,rbp
  409e73:	mov    ecx,0xa
  409e78:	mov    rsi,rbp
  409e7b:	mov    rdi,rbx
  409e7e:	mov    DWORD PTR [rsp+0x18],0x0
  409e86:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409e8b:	mov    edx,DWORD PTR [rsp+0x18]
  409e8f:	jmp    408520 <_start@@Base+0x51f0>
  409e94:	nop    DWORD PTR [rax+0x0]
  409e98:	cmp    BYTE PTR [r13+0x2],0x20
  409e9d:	jle    408dfd <_start@@Base+0x5acd>
  409ea3:	lea    rax,[r13+0x2]
  409ea7:	cmp    rbp,rax
  409eaa:	jne    408e14 <_start@@Base+0x5ae4>
  409eb0:	mov    rdx,rbp
  409eb3:	mov    ecx,0xa
  409eb8:	mov    rsi,rbp
  409ebb:	mov    rdi,rbx
  409ebe:	mov    DWORD PTR [rsp+0x20],0x0
  409ec6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409ecb:	mov    edx,DWORD PTR [rsp+0x20]
  409ecf:	jmp    408940 <_start@@Base+0x5610>
  409ed4:	nop    DWORD PTR [rax+0x0]
  409ed8:	mov    r13,rbp
  409edb:	jmp    409a48 <_start@@Base+0x6718>
  409ee0:	cmp    BYTE PTR [r13+0x2],0x20
  409ee5:	jle    409ba5 <_start@@Base+0x6875>
  409eeb:	lea    r15,[r13+0x2]
  409eef:	cmp    rbp,r15
  409ef2:	jne    409bbf <_start@@Base+0x688f>
  409ef8:	nop    DWORD PTR [rax+rax*1+0x0]
  409f00:	mov    ecx,0xa
  409f05:	mov    rdx,rbp
  409f08:	mov    rsi,rbp
  409f0b:	mov    rdi,rbx
  409f0e:	mov    DWORD PTR [rsp+0x1c],0x0
  409f16:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  409f1b:	mov    r15,rax
  409f1e:	mov    eax,DWORD PTR [rsp+0x1c]
  409f22:	jmp    409548 <_start@@Base+0x6218>
  409f27:	nop    WORD PTR [rax+rax*1+0x0]
  409f30:	movbe  rax,QWORD PTR [r15+0x8]
  409f36:	jmp    409bff <_start@@Base+0x68cf>
  409f3b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f40:	lea    r13,[rax+0x1]
  409f44:	mov    rdx,rbp
  409f47:	sub    rdx,r13
  409f4a:	mov    DWORD PTR [rsp+0x20],0x0
  409f52:	cmp    rdx,0x1
  409f56:	jle    409f70 <_start@@Base+0x6c40>
  409f58:	cmp    BYTE PTR [rax+0x1],0x20
  409f5c:	jg     409000 <_start@@Base+0x5cd0>
  409f62:	jne    409f70 <_start@@Base+0x6c40>
  409f64:	cmp    BYTE PTR [rax+0x2],0x20
  409f68:	jg     40a2c4 <_start@@Base+0x6f94>
  409f6e:	xchg   ax,ax
  409f70:	mov    rdx,rbp
  409f73:	mov    rsi,r13
  409f76:	mov    rdi,rbx
  409f79:	call   416950 <flatcc_json_parser_space_ext@@Base>
  409f7e:	mov    edx,DWORD PTR [rsp+0x20]
  409f82:	jmp    408ea0 <_start@@Base+0x5b70>
  409f87:	nop    WORD PTR [rax+rax*1+0x0]
  409f90:	mov    r15d,DWORD PTR [rsp+0x24]
  409f95:	mov    rdx,QWORD PTR [rsp+0x30]
  409f9a:	test   r15d,r15d
  409f9d:	je     40a148 <_start@@Base+0x6e18>
  409fa3:	movabs rax,0x8000000000000000
  409fad:	mov    ecx,0x8
  409fb2:	cmp    rdx,rax
  409fb5:	ja     40a289 <_start@@Base+0x6f59>
  409fbb:	neg    rdx
  409fbe:	mov    QWORD PTR [rsp+0x28],rdx
  409fc3:	jmp    409a80 <_start@@Base+0x6750>
  409fc8:	nop    DWORD PTR [rax+rax*1+0x0]
  409fd0:	mov    r11,rbp
  409fd3:	jmp    408d50 <_start@@Base+0x5a20>
  409fd8:	nop    DWORD PTR [rax+rax*1+0x0]
  409fe0:	mov    rdx,rax
  409fe3:	test   rax,rax
  409fe6:	js     40a1c8 <_start@@Base+0x6e98>
  409fec:	mov    QWORD PTR [rsp+0x28],rax
  409ff1:	jmp    409110 <_start@@Base+0x5de0>
  409ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a000:	lea    r13,[rax+0x1]
  40a004:	mov    rdx,rbp
  40a007:	sub    rdx,r13
  40a00a:	mov    DWORD PTR [rsp+0x18],0x0
  40a012:	cmp    rdx,0x1
  40a016:	jle    40a030 <_start@@Base+0x6d00>
  40a018:	cmp    BYTE PTR [rax+0x1],0x20
  40a01c:	jg     408830 <_start@@Base+0x5500>
  40a022:	jne    40a030 <_start@@Base+0x6d00>
  40a024:	cmp    BYTE PTR [rax+0x2],0x20
  40a028:	jg     40a2cd <_start@@Base+0x6f9d>
  40a02e:	xchg   ax,ax
  40a030:	mov    rdx,rbp
  40a033:	mov    rsi,r13
  40a036:	mov    rdi,rbx
  40a039:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40a03e:	mov    edx,DWORD PTR [rsp+0x18]
  40a042:	jmp    408520 <_start@@Base+0x51f0>
  40a047:	nop    WORD PTR [rax+rax*1+0x0]
  40a050:	lea    r13,[rax+0x1]
  40a054:	mov    rdx,rbp
  40a057:	sub    rdx,r13
  40a05a:	mov    DWORD PTR [rsp+0x20],0x0
  40a062:	cmp    rdx,0x1
  40a066:	jle    40a078 <_start@@Base+0x6d48>
  40a068:	cmp    BYTE PTR [rax+0x1],0x20
  40a06c:	jg     408c60 <_start@@Base+0x5930>
  40a072:	je     40a2b1 <_start@@Base+0x6f81>
  40a078:	mov    rdx,rbp
  40a07b:	mov    rsi,r13
  40a07e:	mov    rdi,rbx
  40a081:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40a086:	mov    edx,DWORD PTR [rsp+0x20]
  40a08a:	jmp    408940 <_start@@Base+0x5610>
  40a08f:	nop
  40a090:	mov    esi,DWORD PTR [rsp+0x28]
  40a094:	mov    ecx,0x8
  40a099:	test   esi,esi
  40a09b:	jne    40a1fe <_start@@Base+0x6ece>
  40a0a1:	mov    rdx,QWORD PTR [rsp+0x30]
  40a0a6:	mov    eax,0xffffffff
  40a0ab:	cmp    rdx,rax
  40a0ae:	ja     40a1f9 <_start@@Base+0x6ec9>
  40a0b4:	mov    eax,edx
  40a0b6:	mov    DWORD PTR [rsp+0x24],edx
  40a0ba:	mov    r13,r11
  40a0bd:	jmp    408d8b <_start@@Base+0x5a5b>
  40a0c2:	nop    WORD PTR [rax+rax*1+0x0]
  40a0c8:	test   rdx,rdx
  40a0cb:	js     40a220 <_start@@Base+0x6ef0>
  40a0d1:	mov    QWORD PTR [rsp+0x28],rdx
  40a0d6:	jmp    408ac8 <_start@@Base+0x5798>
  40a0db:	nop    DWORD PTR [rax+rax*1+0x0]
  40a0e0:	movbe  rax,QWORD PTR [r15+0x8]
  40a0e6:	jmp    409d8f <_start@@Base+0x6a5f>
  40a0eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40a0f0:	lea    rsi,[r15+0x1]
  40a0f4:	mov    rdx,rbp
  40a0f7:	mov    rdi,rbx
  40a0fa:	mov    DWORD PTR [rsp+0x1c],0x0
  40a102:	call   403550 <_start@@Base+0x220>
  40a107:	mov    r15,rax
  40a10a:	mov    eax,DWORD PTR [rsp+0x1c]
  40a10e:	jmp    409548 <_start@@Base+0x6218>
  40a113:	mov    QWORD PTR [rsp],r11
  40a117:	mov    ecx,0x7
  40a11c:	mov    rdx,rbp
  40a11f:	mov    rsi,r9
  40a122:	mov    rdi,rbx
  40a125:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a12a:	mov    r11,QWORD PTR [rsp]
  40a12e:	mov    r13,rax
  40a131:	cmp    r11,rax
  40a134:	jne    409204 <_start@@Base+0x5ed4>
  40a13a:	mov    r9,r11
  40a13d:	jmp    4091cd <_start@@Base+0x5e9d>
  40a142:	nop    WORD PTR [rax+rax*1+0x0]
  40a148:	test   rdx,rdx
  40a14b:	js     40a280 <_start@@Base+0x6f50>
  40a151:	mov    QWORD PTR [rsp+0x28],rdx
  40a156:	jmp    409a80 <_start@@Base+0x6750>
  40a15b:	lea    rcx,[rip+0x172be]        # 421420 <__data_start@@Base+0x360>
  40a162:	mov    rdx,rbp
  40a165:	mov    rsi,rax
  40a168:	mov    rdi,rbx
  40a16b:	call   404e50 <_start@@Base+0x1b20>
  40a170:	cmp    r13,rax
  40a173:	mov    r13,rax
  40a176:	je     408c70 <_start@@Base+0x5940>
  40a17c:	cmp    rbp,rax
  40a17f:	jne    409645 <_start@@Base+0x6315>
  40a185:	jmp    408c70 <_start@@Base+0x5940>
  40a18a:	nop    WORD PTR [rax+rax*1+0x0]
  40a190:	mov    r8,r15
  40a193:	lea    rcx,[rip+0x17206]        # 4213a0 <__data_start@@Base+0x2e0>
  40a19a:	mov    rdx,rbp
  40a19d:	mov    rsi,rax
  40a1a0:	mov    rdi,rbx
  40a1a3:	call   405310 <_start@@Base+0x1fe0>
  40a1a8:	cmp    r13,rax
  40a1ab:	mov    r13,rax
  40a1ae:	je     408c70 <_start@@Base+0x5940>
  40a1b4:	cmp    rbp,rax
  40a1b7:	jne    409b2c <_start@@Base+0x67fc>
  40a1bd:	jmp    408c70 <_start@@Base+0x5940>
  40a1c2:	nop    WORD PTR [rax+rax*1+0x0]
  40a1c8:	mov    QWORD PTR [rsp],r11
  40a1cc:	mov    ecx,0x7
  40a1d1:	mov    rsi,r13
  40a1d4:	mov    rdx,rbp
  40a1d7:	mov    rdi,rbx
  40a1da:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a1df:	mov    r11,QWORD PTR [rsp]
  40a1e3:	mov    r13,rax
  40a1e6:	cmp    r11,rax
  40a1e9:	je     4090d3 <_start@@Base+0x5da3>
  40a1ef:	mov    rdx,QWORD PTR [rsp+0x28]
  40a1f4:	jmp    409110 <_start@@Base+0x5de0>
  40a1f9:	mov    ecx,0x7
  40a1fe:	mov    rdx,rbp
  40a201:	mov    rsi,r11
  40a204:	mov    rdi,rbx
  40a207:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a20c:	mov    r13,rax
  40a20f:	cmp    r15,rax
  40a212:	jne    408d87 <_start@@Base+0x5a57>
  40a218:	mov    r11,r15
  40a21b:	jmp    408d50 <_start@@Base+0x5a20>
  40a220:	mov    ecx,0x7
  40a225:	mov    rsi,r13
  40a228:	mov    rdx,rbp
  40a22b:	mov    rdi,rbx
  40a22e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a233:	mov    r13,rax
  40a236:	cmp    r15,rax
  40a239:	je     408a8f <_start@@Base+0x575f>
  40a23f:	mov    rdx,QWORD PTR [rsp+0x28]
  40a244:	jmp    408ac8 <_start@@Base+0x5798>
  40a249:	lea    rcx,[rip+0x17170]        # 4213c0 <__data_start@@Base+0x300>
  40a250:	mov    rdx,rbp
  40a253:	mov    rsi,rax
  40a256:	mov    rdi,rbx
  40a259:	call   404e50 <_start@@Base+0x1b20>
  40a25e:	cmp    r13,rax
  40a261:	mov    r13,rax
  40a264:	je     408c70 <_start@@Base+0x5940>
  40a26a:	cmp    rbp,rax
  40a26d:	jne    409c70 <_start@@Base+0x6940>
  40a273:	jmp    408c70 <_start@@Base+0x5940>
  40a278:	nop    DWORD PTR [rax+rax*1+0x0]
  40a280:	mov    QWORD PTR [rsp],r11
  40a284:	mov    ecx,0x7
  40a289:	mov    rsi,r13
  40a28c:	mov    rdx,rbp
  40a28f:	mov    rdi,rbx
  40a292:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a297:	mov    r11,QWORD PTR [rsp]
  40a29b:	mov    r13,rax
  40a29e:	cmp    r11,rax
  40a2a1:	je     409a48 <_start@@Base+0x6718>
  40a2a7:	mov    rdx,QWORD PTR [rsp+0x28]
  40a2ac:	jmp    409a80 <_start@@Base+0x6750>
  40a2b1:	cmp    BYTE PTR [rax+0x2],0x20
  40a2b5:	jle    40a078 <_start@@Base+0x6d48>
  40a2bb:	lea    r13,[rax+0x2]
  40a2bf:	jmp    408c60 <_start@@Base+0x5930>
  40a2c4:	lea    r13,[rax+0x2]
  40a2c8:	jmp    409000 <_start@@Base+0x5cd0>
  40a2cd:	lea    r13,[rax+0x2]
  40a2d1:	jmp    408830 <_start@@Base+0x5500>
  40a2d6:	lea    rcx,[rip+0x170a3]        # 421380 <__data_start@@Base+0x2c0>
  40a2dd:	mov    rdx,rbp
  40a2e0:	mov    rsi,rax
  40a2e3:	mov    rdi,rbx
  40a2e6:	call   404e50 <_start@@Base+0x1b20>
  40a2eb:	cmp    r13,rax
  40a2ee:	mov    r13,rax
  40a2f1:	je     408c70 <_start@@Base+0x5940>
  40a2f7:	cmp    rbp,rax
  40a2fa:	jne    409e00 <_start@@Base+0x6ad0>
  40a300:	jmp    408c70 <_start@@Base+0x5940>
  40a305:	nop    DWORD PTR [rax]
  40a308:	mov    r13,rax
  40a30b:	jmp    408c70 <_start@@Base+0x5940>
  40a310:	mov    r13,rax
  40a313:	jmp    408c60 <_start@@Base+0x5930>
  40a318:	call   4031c0 <__stack_chk_fail@plt>
  40a31d:	mov    r13,rax
  40a320:	jmp    409000 <_start@@Base+0x5cd0>
  40a325:	mov    rdx,rax
  40a328:	mov    ecx,0x61616161
  40a32d:	and    rdx,r14
  40a330:	shl    rcx,0x20
  40a334:	cmp    rdx,rcx
  40a337:	je     4097a0 <_start@@Base+0x6470>
  40a33d:	endbr64 
  40a341:	movabs rcx,0x6262626231323334
  40a34b:	cmp    rax,rcx
  40a34e:	jne    409cb0 <_start@@Base+0x6980>
  40a354:	cmp    rsi,0x8
  40a358:	jle    409870 <_start@@Base+0x6540>
  40a35e:	mov    ecx,0x8
  40a363:	mov    rdx,rbp
  40a366:	mov    rsi,r15
  40a369:	mov    rdi,rbx
  40a36c:	call   407470 <_start@@Base+0x4140>
  40a371:	cmp    rax,r15
  40a374:	je     409870 <_start@@Base+0x6540>
  40a37a:	lea    r15,[rsp+0x30]
  40a37f:	mov    rcx,r15
  40a382:	mov    rdx,rbp
  40a385:	mov    rsi,rax
  40a388:	mov    rdi,rbx
  40a38b:	mov    QWORD PTR [rsp+0x30],0x0
  40a394:	mov    QWORD PTR [rsp],rax
  40a398:	call   4040e0 <_start@@Base+0xdb0>
  40a39d:	mov    r11,QWORD PTR [rsp]
  40a3a1:	mov    r13,rax
  40a3a4:	cmp    r11,rax
  40a3a7:	je     40a3e0 <_start@@Base+0x70b0>
  40a3a9:	cmp    QWORD PTR [rsp+0x30],0x0
  40a3af:	jne    40a3bb <_start@@Base+0x708b>
  40a3b1:	test   BYTE PTR [rbx+0x10],0x2
  40a3b5:	je     409680 <_start@@Base+0x6350>
  40a3bb:	mov    rdi,QWORD PTR [rbx]
  40a3be:	mov    ecx,0x8
  40a3c3:	mov    edx,0x8
  40a3c8:	mov    esi,0x3
  40a3cd:	call   414940 <flatcc_builder_table_add@@Base>
  40a3d2:	test   rax,rax
  40a3d5:	jne    409b5e <_start@@Base+0x682e>
  40a3db:	jmp    408c70 <_start@@Base+0x5940>
  40a3e0:	mov    rsi,r11
  40a3e3:	mov    r8,r15
  40a3e6:	lea    rcx,[rip+0x17013]        # 421400 <__data_start@@Base+0x340>
  40a3ed:	mov    rdx,rbp
  40a3f0:	mov    rdi,rbx
  40a3f3:	call   405310 <_start@@Base+0x1fe0>
  40a3f8:	mov    r11,QWORD PTR [rsp]
  40a3fc:	mov    r13,rax
  40a3ff:	cmp    r11,rax
  40a402:	je     408c70 <_start@@Base+0x5940>
  40a408:	cmp    rbp,rax
  40a40b:	jne    40a3a9 <_start@@Base+0x7079>
  40a40d:	jmp    408c70 <_start@@Base+0x5940>
  40a412:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a41d:	nop    DWORD PTR [rax]
  40a420:	endbr64 
  40a424:	push   r15
  40a426:	push   r14
  40a428:	mov    r14,rsi
  40a42b:	push   r13
  40a42d:	push   r12
  40a42f:	mov    r12,r8
  40a432:	push   rbp
  40a433:	mov    rbp,rdi
  40a436:	push   rbx
  40a437:	mov    rbx,rdx
  40a43a:	sub    rsp,0x48
  40a43e:	mov    rax,QWORD PTR fs:0x28
  40a447:	mov    QWORD PTR [rsp+0x38],rax
  40a44c:	xor    eax,eax
  40a44e:	mov    DWORD PTR [r8],0x0
  40a455:	cmp    cl,0x9
  40a458:	je     40a520 <_start@@Base+0x71f0>
  40a45e:	ja     40a4d0 <_start@@Base+0x71a0>
  40a460:	cmp    cl,0x2
  40a463:	je     40a7e0 <_start@@Base+0x74b0>
  40a469:	cmp    cl,0x8
  40a46c:	je     40a560 <_start@@Base+0x7230>
  40a472:	test   cl,cl
  40a474:	je     40a7b0 <_start@@Base+0x7480>
  40a47a:	test   BYTE PTR [rbp+0x10],0x1
  40a47e:	jne    40a540 <_start@@Base+0x7210>
  40a484:	mov    ecx,0xf
  40a489:	mov    rdx,rbx
  40a48c:	mov    rsi,r14
  40a48f:	mov    rdi,rbp
  40a492:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a497:	mov    r15,rax
  40a49a:	nop    WORD PTR [rax+rax*1+0x0]
  40a4a0:	mov    rdx,QWORD PTR [rsp+0x38]
  40a4a5:	xor    rdx,QWORD PTR fs:0x28
  40a4ae:	mov    rax,r15
  40a4b1:	jne    40ac37 <_start@@Base+0x7907>
  40a4b7:	add    rsp,0x48
  40a4bb:	pop    rbx
  40a4bc:	pop    rbp
  40a4bd:	pop    r12
  40a4bf:	pop    r13
  40a4c1:	pop    r14
  40a4c3:	pop    r15
  40a4c5:	ret    
  40a4c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a4d0:	cmp    cl,0xb
  40a4d3:	je     40a4dc <_start@@Base+0x71ac>
  40a4d5:	jb     40a520 <_start@@Base+0x71f0>
  40a4d7:	cmp    cl,0xff
  40a4da:	jne    40a47a <_start@@Base+0x714a>
  40a4dc:	mov    rcx,r12
  40a4df:	mov    rdx,rbx
  40a4e2:	mov    rsi,r14
  40a4e5:	mov    rdi,rbp
  40a4e8:	call   418a60 <flatcc_json_parser_build_string@@Base>
  40a4ed:	mov    r15,rax
  40a4f0:	mov    edx,DWORD PTR [rbp+0x20]
  40a4f3:	test   edx,edx
  40a4f5:	jne    40a4a0 <_start@@Base+0x7170>
  40a4f7:	mov    eax,DWORD PTR [r12]
  40a4fb:	test   eax,eax
  40a4fd:	jne    40a4a0 <_start@@Base+0x7170>
  40a4ff:	mov    rsi,r15
  40a502:	mov    ecx,0x21
  40a507:	mov    rdx,rbx
  40a50a:	mov    rdi,rbp
  40a50d:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a512:	mov    r15,rax
  40a515:	jmp    40a4a0 <_start@@Base+0x7170>
  40a517:	nop    WORD PTR [rax+rax*1+0x0]
  40a520:	mov    rdx,rbx
  40a523:	mov    rcx,r12
  40a526:	mov    rsi,r14
  40a529:	mov    rdi,rbp
  40a52c:	call   405f40 <_start@@Base+0x2c10>
  40a531:	mov    edx,DWORD PTR [rbp+0x20]
  40a534:	mov    r15,rax
  40a537:	test   edx,edx
  40a539:	je     40a4f7 <_start@@Base+0x71c7>
  40a53b:	jmp    40a4a0 <_start@@Base+0x7170>
  40a540:	mov    rdx,rbx
  40a543:	mov    rsi,r14
  40a546:	mov    rdi,rbp
  40a549:	call   417850 <flatcc_json_parser_generic_json@@Base>
  40a54e:	mov    r15,rax
  40a551:	jmp    40a4a0 <_start@@Base+0x7170>
  40a556:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a560:	mov    rdi,QWORD PTR [rdi]
  40a563:	mov    edx,0x2
  40a568:	mov    esi,0x2
  40a56d:	call   412650 <flatcc_builder_start_struct@@Base>
  40a572:	mov    QWORD PTR [rsp+0x8],rax
  40a577:	test   rax,rax
  40a57a:	je     40ab90 <_start@@Base+0x7860>
  40a580:	lea    r13,[rsp+0x28]
  40a585:	mov    rcx,r13
  40a588:	mov    rdx,rbx
  40a58b:	mov    rsi,r14
  40a58e:	mov    rdi,rbp
  40a591:	call   4083c0 <_start@@Base+0x5090>
  40a596:	mov    r8d,DWORD PTR [rsp+0x28]
  40a59b:	mov    r15,rax
  40a59e:	test   r8d,r8d
  40a5a1:	je     40a72e <_start@@Base+0x73fe>
  40a5a7:	lea    rax,[rsp+0x24]
  40a5ac:	mov    QWORD PTR [rsp+0x18],rax
  40a5b1:	nop    DWORD PTR [rax+0x0]
  40a5b8:	cmp    rbx,r15
  40a5bb:	je     40a5d8 <_start@@Base+0x72a8>
  40a5bd:	movzx  eax,BYTE PTR [r15]
  40a5c1:	cmp    al,0x22
  40a5c3:	je     40a790 <_start@@Base+0x7460>
  40a5c9:	cmp    al,0x2e
  40a5cb:	je     40aac0 <_start@@Base+0x7790>
  40a5d1:	mov    DWORD PTR [rbp+0x14],0x1
  40a5d8:	mov    rax,rbx
  40a5db:	sub    rax,r15
  40a5de:	cmp    rax,0x7
  40a5e2:	ja     40a768 <_start@@Base+0x7438>
  40a5e8:	mov    rsi,rbx
  40a5eb:	mov    rdi,r15
  40a5ee:	call   403420 <_start@@Base+0xf0>
  40a5f3:	movabs rdx,0x686169725f6c656e
  40a5fd:	cmp    rax,rdx
  40a600:	jne    40a700 <_start@@Base+0x73d0>
  40a606:	lea    r14,[r15+0x8]
  40a60a:	mov    r10,rbx
  40a60d:	sub    r10,r14
  40a610:	cmp    r10,0x7
  40a614:	ja     40a7a0 <_start@@Base+0x7470>
  40a61a:	mov    rsi,rbx
  40a61d:	mov    rdi,r14
  40a620:	call   403420 <_start@@Base+0xf0>
  40a625:	movabs rsi,0xffffff0000000000
  40a62f:	and    rax,rsi
  40a632:	movabs rdi,0x6774680000000000
  40a63c:	cmp    rax,rdi
  40a63f:	jne    40a778 <_start@@Base+0x7448>
  40a645:	cmp    r10,0x3
  40a649:	jle    40a778 <_start@@Base+0x7448>
  40a64f:	mov    ecx,0x3
  40a654:	mov    rdx,rbx
  40a657:	mov    rsi,r14
  40a65a:	mov    rdi,rbp
  40a65d:	call   407470 <_start@@Base+0x4140>
  40a662:	cmp    r14,rax
  40a665:	je     40a778 <_start@@Base+0x7448>
  40a66b:	xor    edi,edi
  40a66d:	mov    WORD PTR [rsp+0x24],di
  40a672:	mov    QWORD PTR [rsp+0x30],0x0
  40a67b:	mov    DWORD PTR [rsp+0x2c],0x0
  40a683:	cmp    rbx,rax
  40a686:	je     40aae0 <_start@@Base+0x77b0>
  40a68c:	lea    rcx,[rsp+0x2c]
  40a691:	lea    r8,[rsp+0x30]
  40a696:	mov    rdx,rbx
  40a699:	mov    rsi,rax
  40a69c:	mov    rdi,rbp
  40a69f:	mov    QWORD PTR [rsp+0x10],rax
  40a6a4:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40a6a9:	mov    r10,QWORD PTR [rsp+0x10]
  40a6ae:	mov    r15,rax
  40a6b1:	cmp    r10,rax
  40a6b4:	jne    40aaf0 <_start@@Base+0x77c0>
  40a6ba:	mov    r8,QWORD PTR [rsp+0x18]
  40a6bf:	lea    rcx,[rip+0x16b9a]        # 421260 <__data_start@@Base+0x1a0>
  40a6c6:	mov    rdx,rbx
  40a6c9:	mov    rsi,r15
  40a6cc:	mov    rdi,rbp
  40a6cf:	call   4050b0 <_start@@Base+0x1d80>
  40a6d4:	cmp    rax,r15
  40a6d7:	je     40ab5d <_start@@Base+0x782d>
  40a6dd:	cmp    rbx,rax
  40a6e0:	je     40ab5d <_start@@Base+0x782d>
  40a6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a6f0:	movzx  edx,WORD PTR [rsp+0x24]
  40a6f5:	mov    rcx,QWORD PTR [rsp+0x8]
  40a6fa:	mov    WORD PTR [rcx],dx
  40a6fd:	jmp    40a70e <_start@@Base+0x73de>
  40a6ff:	nop
  40a700:	mov    rdx,rbx
  40a703:	mov    rsi,r15
  40a706:	mov    rdi,rbp
  40a709:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a70e:	mov    rcx,r13
  40a711:	mov    rdx,rbx
  40a714:	mov    rsi,rax
  40a717:	mov    rdi,rbp
  40a71a:	call   4065f0 <_start@@Base+0x32c0>
  40a71f:	mov    ecx,DWORD PTR [rsp+0x28]
  40a723:	mov    r15,rax
  40a726:	test   ecx,ecx
  40a728:	jne    40a5b8 <_start@@Base+0x7288>
  40a72e:	cmp    rbx,r15
  40a731:	je     40a748 <_start@@Base+0x7418>
  40a733:	mov    rdi,QWORD PTR [rbp+0x0]
  40a737:	call   412710 <flatcc_builder_end_struct@@Base>
  40a73c:	mov    DWORD PTR [r12],eax
  40a740:	test   eax,eax
  40a742:	jne    40a4a0 <_start@@Base+0x7170>
  40a748:	mov    rsi,r15
  40a74b:	mov    ecx,0x21
  40a750:	mov    rdx,rbx
  40a753:	mov    rdi,rbp
  40a756:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40a75b:	mov    r15,rax
  40a75e:	jmp    40a4f0 <_start@@Base+0x71c0>
  40a763:	nop    DWORD PTR [rax+rax*1+0x0]
  40a768:	movbe  rax,QWORD PTR [r15]
  40a76d:	jmp    40a5f3 <_start@@Base+0x72c3>
  40a772:	nop    WORD PTR [rax+rax*1+0x0]
  40a778:	mov    rdx,rbx
  40a77b:	mov    rsi,r14
  40a77e:	mov    rdi,rbp
  40a781:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a786:	jmp    40a70e <_start@@Base+0x73de>
  40a788:	nop    DWORD PTR [rax+rax*1+0x0]
  40a790:	inc    r15
  40a793:	mov    DWORD PTR [rbp+0x14],0x0
  40a79a:	jmp    40a5d8 <_start@@Base+0x72a8>
  40a79f:	nop
  40a7a0:	movbe  rax,QWORD PTR [r15+0x8]
  40a7a6:	jmp    40a625 <_start@@Base+0x72f5>
  40a7ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40a7b0:	mov    rax,rdx
  40a7b3:	sub    rax,rsi
  40a7b6:	cmp    rax,0x3
  40a7ba:	jle    40a7cc <_start@@Base+0x749c>
  40a7bc:	cmp    DWORD PTR [rsi],0x6c6c756e
  40a7c2:	lea    r15,[rsi+0x4]
  40a7c6:	je     40a4a0 <_start@@Base+0x7170>
  40a7cc:	mov    ecx,0x1a
  40a7d1:	jmp    40a489 <_start@@Base+0x7159>
  40a7d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a7e0:	mov    rdi,QWORD PTR [rdi]
  40a7e3:	mov    esi,0x1
  40a7e8:	call   4130c0 <flatcc_builder_start_table@@Base>
  40a7ed:	test   eax,eax
  40a7ef:	jne    40aa18 <_start@@Base+0x76e8>
  40a7f5:	lea    r13,[rsp+0x24]
  40a7fa:	mov    rsi,r14
  40a7fd:	mov    rcx,r13
  40a800:	mov    rdx,rbx
  40a803:	mov    rdi,rbp
  40a806:	call   4083c0 <_start@@Base+0x5090>
  40a80b:	mov    r15d,DWORD PTR [rsp+0x24]
  40a810:	mov    r14,rax
  40a813:	test   r15d,r15d
  40a816:	je     40aa0b <_start@@Base+0x76db>
  40a81c:	movabs r15,0x73776f72645f6174
  40a826:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a830:	cmp    rbx,r14
  40a833:	je     40a850 <_start@@Base+0x7520>
  40a835:	movzx  eax,BYTE PTR [r14]
  40a839:	cmp    al,0x22
  40a83b:	je     40aa68 <_start@@Base+0x7738>
  40a841:	cmp    al,0x2e
  40a843:	je     40aaa0 <_start@@Base+0x7770>
  40a849:	mov    DWORD PTR [rbp+0x14],0x1
  40a850:	mov    rax,rbx
  40a853:	sub    rax,r14
  40a856:	cmp    rax,0x7
  40a85a:	ja     40aa58 <_start@@Base+0x7728>
  40a860:	mov    rsi,rbx
  40a863:	mov    rdi,r14
  40a866:	call   403420 <_start@@Base+0xf0>
  40a86b:	cmp    rax,r15
  40a86e:	jne    40a9d8 <_start@@Base+0x76a8>
  40a874:	lea    r8,[r14+0x8]
  40a878:	mov    rax,rbx
  40a87b:	sub    rax,r8
  40a87e:	cmp    rax,0x7
  40a882:	ja     40aa80 <_start@@Base+0x7750>
  40a888:	mov    rsi,rbx
  40a88b:	mov    rdi,r8
  40a88e:	call   403420 <_start@@Base+0xf0>
  40a893:	movabs rdx,0x7461636b5f64616d
  40a89d:	cmp    rax,rdx
  40a8a0:	jne    40aa40 <_start@@Base+0x7710>
  40a8a6:	lea    r8,[r14+0x10]
  40a8aa:	mov    r10,rbx
  40a8ad:	sub    r10,r8
  40a8b0:	cmp    r10,0x7
  40a8b4:	ja     40aa90 <_start@@Base+0x7760>
  40a8ba:	mov    rdi,r8
  40a8bd:	mov    rsi,rbx
  40a8c0:	mov    QWORD PTR [rsp+0x8],r8
  40a8c5:	call   403420 <_start@@Base+0xf0>
  40a8ca:	mov    r8,QWORD PTR [rsp+0x8]
  40a8cf:	movabs rsi,0xffffff0000000000
  40a8d9:	and    rax,rsi
  40a8dc:	movabs rdi,0x6167650000000000
  40a8e6:	cmp    rax,rdi
  40a8e9:	jne    40aa40 <_start@@Base+0x7710>
  40a8ef:	cmp    r10,0x3
  40a8f3:	jle    40aa40 <_start@@Base+0x7710>
  40a8f9:	mov    rsi,r8
  40a8fc:	mov    ecx,0x3
  40a901:	mov    rdx,rbx
  40a904:	mov    rdi,rbp
  40a907:	mov    QWORD PTR [rsp+0x8],r8
  40a90c:	call   407470 <_start@@Base+0x4140>
  40a911:	mov    r8,QWORD PTR [rsp+0x8]
  40a916:	cmp    r8,rax
  40a919:	je     40aa40 <_start@@Base+0x7710>
  40a91f:	mov    DWORD PTR [rsp+0x28],0x0
  40a927:	mov    QWORD PTR [rsp+0x30],0x0
  40a930:	mov    DWORD PTR [rsp+0x2c],0x0
  40a938:	cmp    rbx,rax
  40a93b:	je     40ab80 <_start@@Base+0x7850>
  40a941:	lea    rcx,[rsp+0x2c]
  40a946:	lea    r8,[rsp+0x30]
  40a94b:	mov    rdx,rbx
  40a94e:	mov    rsi,rax
  40a951:	mov    rdi,rbp
  40a954:	mov    QWORD PTR [rsp+0x8],rax
  40a959:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40a95e:	mov    r10,QWORD PTR [rsp+0x8]
  40a963:	mov    r14,rax
  40a966:	cmp    r10,rax
  40a969:	jne    40aba0 <_start@@Base+0x7870>
  40a96f:	lea    r8,[rsp+0x28]
  40a974:	lea    rcx,[rip+0x16905]        # 421280 <__data_start@@Base+0x1c0>
  40a97b:	mov    rdx,rbx
  40a97e:	mov    rsi,r14
  40a981:	mov    rdi,rbp
  40a984:	call   4057f0 <_start@@Base+0x24c0>
  40a989:	cmp    rax,r14
  40a98c:	je     40ab78 <_start@@Base+0x7848>
  40a992:	cmp    rbx,rax
  40a995:	je     40ab78 <_start@@Base+0x7848>
  40a99b:	mov    edx,DWORD PTR [rsp+0x28]
  40a99f:	mov    r14,rax
  40a9a2:	nop    WORD PTR [rax+rax*1+0x0]
  40a9a8:	test   edx,edx
  40a9aa:	jne    40a9b2 <_start@@Base+0x7682>
  40a9ac:	test   BYTE PTR [rbp+0x10],0x2
  40a9b0:	je     40a9e9 <_start@@Base+0x76b9>
  40a9b2:	mov    rdi,QWORD PTR [rbp+0x0]
  40a9b6:	xor    esi,esi
  40a9b8:	mov    ecx,0x4
  40a9bd:	mov    edx,0x4
  40a9c2:	call   414940 <flatcc_builder_table_add@@Base>
  40a9c7:	test   rax,rax
  40a9ca:	je     40aa18 <_start@@Base+0x76e8>
  40a9cc:	mov    edx,DWORD PTR [rsp+0x28]
  40a9d0:	mov    DWORD PTR [rax],edx
  40a9d2:	jmp    40a9e9 <_start@@Base+0x76b9>
  40a9d4:	nop    DWORD PTR [rax+0x0]
  40a9d8:	mov    rsi,r14
  40a9db:	mov    rdx,rbx
  40a9de:	mov    rdi,rbp
  40a9e1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a9e6:	mov    r14,rax
  40a9e9:	mov    rsi,r14
  40a9ec:	mov    rcx,r13
  40a9ef:	mov    rdx,rbx
  40a9f2:	mov    rdi,rbp
  40a9f5:	call   4065f0 <_start@@Base+0x32c0>
  40a9fa:	mov    r10d,DWORD PTR [rsp+0x24]
  40a9ff:	mov    r14,rax
  40aa02:	test   r10d,r10d
  40aa05:	jne    40a830 <_start@@Base+0x7500>
  40aa0b:	mov    r9d,DWORD PTR [rbp+0x20]
  40aa0f:	test   r9d,r9d
  40aa12:	je     40ab40 <_start@@Base+0x7810>
  40aa18:	mov    rdx,rbx
  40aa1b:	mov    ecx,0x21
  40aa20:	mov    rsi,r14
  40aa23:	mov    rdi,rbp
  40aa26:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40aa2b:	mov    edx,DWORD PTR [rbp+0x20]
  40aa2e:	mov    r15,rax
  40aa31:	test   edx,edx
  40aa33:	je     40a4f7 <_start@@Base+0x71c7>
  40aa39:	jmp    40a4a0 <_start@@Base+0x7170>
  40aa3e:	xchg   ax,ax
  40aa40:	mov    rdx,rbx
  40aa43:	mov    rsi,r8
  40aa46:	mov    rdi,rbp
  40aa49:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40aa4e:	mov    r14,rax
  40aa51:	jmp    40a9e9 <_start@@Base+0x76b9>
  40aa53:	nop    DWORD PTR [rax+rax*1+0x0]
  40aa58:	movbe  rax,QWORD PTR [r14]
  40aa5d:	jmp    40a86b <_start@@Base+0x753b>
  40aa62:	nop    WORD PTR [rax+rax*1+0x0]
  40aa68:	inc    r14
  40aa6b:	mov    DWORD PTR [rbp+0x14],0x0
  40aa72:	jmp    40a850 <_start@@Base+0x7520>
  40aa77:	nop    WORD PTR [rax+rax*1+0x0]
  40aa80:	movbe  rax,QWORD PTR [r14+0x8]
  40aa86:	jmp    40a893 <_start@@Base+0x7563>
  40aa8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40aa90:	movbe  rax,QWORD PTR [r14+0x10]
  40aa96:	jmp    40a8cf <_start@@Base+0x759f>
  40aa9b:	nop    DWORD PTR [rax+rax*1+0x0]
  40aaa0:	mov    rsi,r14
  40aaa3:	mov    ecx,0x5
  40aaa8:	mov    rdx,rbx
  40aaab:	mov    rdi,rbp
  40aaae:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40aab3:	mov    r14,rax
  40aab6:	jmp    40a850 <_start@@Base+0x7520>
  40aabb:	nop    DWORD PTR [rax+rax*1+0x0]
  40aac0:	mov    rsi,r15
  40aac3:	mov    ecx,0x5
  40aac8:	mov    rdx,rbx
  40aacb:	mov    rdi,rbp
  40aace:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40aad3:	mov    r15,rax
  40aad6:	jmp    40a5d8 <_start@@Base+0x72a8>
  40aadb:	nop    DWORD PTR [rax+rax*1+0x0]
  40aae0:	mov    r15,rbx
  40aae3:	jmp    40a6ba <_start@@Base+0x738a>
  40aae8:	nop    DWORD PTR [rax+rax*1+0x0]
  40aaf0:	mov    esi,DWORD PTR [rsp+0x2c]
  40aaf4:	test   esi,esi
  40aaf6:	jne    40abe8 <_start@@Base+0x78b8>
  40aafc:	mov    rcx,QWORD PTR [rsp+0x30]
  40ab01:	mov    edx,ecx
  40ab03:	cmp    rcx,0xffff
  40ab0a:	jbe    40a6f5 <_start@@Base+0x73c5>
  40ab10:	mov    ecx,0x7
  40ab15:	mov    rdx,rbx
  40ab18:	mov    rsi,rax
  40ab1b:	mov    rdi,rbp
  40ab1e:	mov    QWORD PTR [rsp+0x10],r10
  40ab23:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ab28:	mov    r10,QWORD PTR [rsp+0x10]
  40ab2d:	cmp    r10,rax
  40ab30:	jne    40a6f0 <_start@@Base+0x73c0>
  40ab36:	mov    r15,r10
  40ab39:	jmp    40a6ba <_start@@Base+0x738a>
  40ab3e:	xchg   ax,ax
  40ab40:	mov    rdi,QWORD PTR [rbp+0x0]
  40ab44:	mov    r15,r14
  40ab47:	call   413a40 <flatcc_builder_end_table@@Base>
  40ab4c:	mov    DWORD PTR [r12],eax
  40ab50:	test   eax,eax
  40ab52:	jne    40a4f0 <_start@@Base+0x71c0>
  40ab58:	jmp    40aa18 <_start@@Base+0x76e8>
  40ab5d:	mov    ecx,0x21
  40ab62:	mov    rdx,rbx
  40ab65:	mov    rsi,rax
  40ab68:	mov    rdi,rbp
  40ab6b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ab70:	mov    r15,rax
  40ab73:	jmp    40a72e <_start@@Base+0x73fe>
  40ab78:	mov    r14,rax
  40ab7b:	jmp    40aa18 <_start@@Base+0x76e8>
  40ab80:	mov    r14,rbx
  40ab83:	jmp    40a96f <_start@@Base+0x763f>
  40ab88:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab90:	mov    r15,r14
  40ab93:	jmp    40a748 <_start@@Base+0x7418>
  40ab98:	nop    DWORD PTR [rax+rax*1+0x0]
  40aba0:	mov    r11d,DWORD PTR [rsp+0x2c]
  40aba5:	mov    rax,QWORD PTR [rsp+0x30]
  40abaa:	test   r11d,r11d
  40abad:	je     40abd0 <_start@@Base+0x78a0>
  40abaf:	mov    edx,0x80000000
  40abb4:	mov    ecx,0x8
  40abb9:	cmp    rax,rdx
  40abbc:	ja     40ac0f <_start@@Base+0x78df>
  40abbe:	mov    edx,eax
  40abc0:	neg    edx
  40abc2:	mov    DWORD PTR [rsp+0x28],edx
  40abc6:	jmp    40a9a8 <_start@@Base+0x7678>
  40abcb:	nop    DWORD PTR [rax+rax*1+0x0]
  40abd0:	cmp    rax,0x7fffffff
  40abd6:	ja     40ac05 <_start@@Base+0x78d5>
  40abd8:	mov    edx,eax
  40abda:	mov    DWORD PTR [rsp+0x28],eax
  40abde:	jmp    40a9a8 <_start@@Base+0x7678>
  40abe3:	nop    DWORD PTR [rax+rax*1+0x0]
  40abe8:	mov    ecx,0x8
  40abed:	mov    rdx,rbx
  40abf0:	mov    rsi,rax
  40abf3:	mov    rdi,rbp
  40abf6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40abfb:	mov    r10,QWORD PTR [rsp+0x10]
  40ac00:	jmp    40ab2d <_start@@Base+0x77fd>
  40ac05:	mov    QWORD PTR [rsp+0x8],r10
  40ac0a:	mov    ecx,0x7
  40ac0f:	mov    rsi,r14
  40ac12:	mov    rdx,rbx
  40ac15:	mov    rdi,rbp
  40ac18:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ac1d:	mov    r10,QWORD PTR [rsp+0x8]
  40ac22:	mov    r14,rax
  40ac25:	cmp    r10,rax
  40ac28:	je     40a96f <_start@@Base+0x763f>
  40ac2e:	mov    edx,DWORD PTR [rsp+0x28]
  40ac32:	jmp    40a9a8 <_start@@Base+0x7678>
  40ac37:	call   4031c0 <__stack_chk_fail@plt>
  40ac3c:	nop    DWORD PTR [rax+0x0]
  40ac40:	cmp    rsi,rdx
  40ac43:	je     40ac4a <_start@@Base+0x791a>
  40ac45:	cmp    BYTE PTR [rsi],0x5b
  40ac48:	je     40ac60 <_start@@Base+0x7930>
  40ac4a:	mov    DWORD PTR [rcx],0x0
  40ac50:	mov    ecx,0x16
  40ac55:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  40ac5a:	nop    WORD PTR [rax+rax*1+0x0]
  40ac60:	push   r12
  40ac62:	lea    rax,[rsi+0x1]
  40ac66:	mov    r12,rdi
  40ac69:	push   rbp
  40ac6a:	mov    rbp,rcx
  40ac6d:	push   rbx
  40ac6e:	mov    rbx,rdx
  40ac71:	sub    rdx,rax
  40ac74:	cmp    rdx,0x1
  40ac78:	jle    40ac82 <_start@@Base+0x7952>
  40ac7a:	cmp    BYTE PTR [rsi+0x1],0x20
  40ac7e:	jg     40ac90 <_start@@Base+0x7960>
  40ac80:	je     40acb0 <_start@@Base+0x7980>
  40ac82:	mov    rdx,rbx
  40ac85:	mov    rsi,rax
  40ac88:	mov    rdi,r12
  40ac8b:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40ac90:	cmp    rbx,rax
  40ac93:	je     40ac9a <_start@@Base+0x796a>
  40ac95:	cmp    BYTE PTR [rax],0x5d
  40ac98:	je     40acc0 <_start@@Base+0x7990>
  40ac9a:	mov    DWORD PTR [rbp+0x0],0x1
  40aca1:	pop    rbx
  40aca2:	pop    rbp
  40aca3:	pop    r12
  40aca5:	ret    
  40aca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40acb0:	cmp    BYTE PTR [rsi+0x2],0x20
  40acb4:	jle    40ac82 <_start@@Base+0x7952>
  40acb6:	lea    rax,[rsi+0x2]
  40acba:	jmp    40ac90 <_start@@Base+0x7960>
  40acbc:	nop    DWORD PTR [rax+0x0]
  40acc0:	lea    rsi,[rax+0x1]
  40acc4:	mov    rdx,rbx
  40acc7:	sub    rdx,rsi
  40acca:	mov    DWORD PTR [rbp+0x0],0x0
  40acd1:	cmp    rdx,0x1
  40acd5:	jle    40acdf <_start@@Base+0x79af>
  40acd7:	cmp    BYTE PTR [rax+0x1],0x20
  40acdb:	jg     40acee <_start@@Base+0x79be>
  40acdd:	je     40acf3 <_start@@Base+0x79c3>
  40acdf:	mov    rdx,rbx
  40ace2:	pop    rbx
  40ace3:	pop    rbp
  40ace4:	mov    rdi,r12
  40ace7:	pop    r12
  40ace9:	jmp    416950 <flatcc_json_parser_space_ext@@Base>
  40acee:	mov    rax,rsi
  40acf1:	jmp    40aca1 <_start@@Base+0x7971>
  40acf3:	cmp    BYTE PTR [rax+0x2],0x20
  40acf7:	jle    40acdf <_start@@Base+0x79af>
  40acf9:	add    rax,0x2
  40acfd:	jmp    40aca1 <_start@@Base+0x7971>
  40acff:	nop
  40ad00:	push   r15
  40ad02:	mov    r15,rdi
  40ad05:	push   r14
  40ad07:	mov    r14,rsi
  40ad0a:	mov    esi,0x24
  40ad0f:	push   r13
  40ad11:	push   r12
  40ad13:	push   rbp
  40ad14:	push   rbx
  40ad15:	mov    rbx,rdx
  40ad18:	sub    rsp,0x68
  40ad1c:	mov    QWORD PTR [rsp+0x10],rcx
  40ad21:	mov    rdi,QWORD PTR fs:0x28
  40ad2a:	mov    QWORD PTR [rsp+0x58],rdi
  40ad2f:	xor    edi,edi
  40ad31:	mov    DWORD PTR [rcx],0x0
  40ad37:	mov    rdi,QWORD PTR [r15]
  40ad3a:	call   4130c0 <flatcc_builder_start_table@@Base>
  40ad3f:	test   eax,eax
  40ad41:	je     40ad80 <_start@@Base+0x7a50>
  40ad43:	mov    ecx,0x21
  40ad48:	mov    rdx,rbx
  40ad4b:	mov    rsi,r14
  40ad4e:	mov    rdi,r15
  40ad51:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ad56:	mov    rbp,rax
  40ad59:	mov    rdi,QWORD PTR [rsp+0x58]
  40ad5e:	xor    rdi,QWORD PTR fs:0x28
  40ad67:	mov    rax,rbp
  40ad6a:	jne    40f3be <_start@@Base+0xc08e>
  40ad70:	add    rsp,0x68
  40ad74:	pop    rbx
  40ad75:	pop    rbp
  40ad76:	pop    r12
  40ad78:	pop    r13
  40ad7a:	pop    r14
  40ad7c:	pop    r15
  40ad7e:	ret    
  40ad7f:	nop
  40ad80:	lea    r8,[rsp+0x40]
  40ad85:	mov    ecx,0x1
  40ad8a:	mov    rdx,rbx
  40ad8d:	mov    rsi,r14
  40ad90:	mov    rdi,r15
  40ad93:	call   418c20 <flatcc_json_parser_prepare_unions@@Base>
  40ad98:	cmp    rax,rbx
  40ad9b:	je     40ad43 <_start@@Base+0x7a13>
  40ad9d:	lea    r13,[rsp+0x30]
  40ada2:	mov    rsi,r14
  40ada5:	mov    rcx,r13
  40ada8:	mov    rdx,rbx
  40adab:	mov    rdi,r15
  40adae:	call   4083c0 <_start@@Base+0x5090>
  40adb3:	mov    esi,DWORD PTR [rsp+0x30]
  40adb7:	mov    r14,rax
  40adba:	test   esi,esi
  40adbc:	je     40b543 <_start@@Base+0x8213>
  40adc2:	mov    rax,r13
  40adc5:	mov    r13,r14
  40adc8:	mov    r14,rax
  40adcb:	nop    DWORD PTR [rax+rax*1+0x0]
  40add0:	cmp    rbx,r13
  40add3:	je     40b200 <_start@@Base+0x7ed0>
  40add9:	movzx  eax,BYTE PTR [r13+0x0]
  40adde:	cmp    al,0x22
  40ade0:	je     40b068 <_start@@Base+0x7d38>
  40ade6:	cmp    al,0x2e
  40ade8:	je     40bba8 <_start@@Base+0x8878>
  40adee:	mov    DWORD PTR [r15+0x14],0x1
  40adf6:	mov    r12,rbx
  40adf9:	sub    r12,r13
  40adfc:	cmp    r12,0x7
  40ae00:	ja     40b058 <_start@@Base+0x7d28>
  40ae06:	mov    rsi,rbx
  40ae09:	mov    rdi,r13
  40ae0c:	call   403420 <_start@@Base+0xf0>
  40ae11:	mov    rbp,rax
  40ae14:	movabs rax,0x7465737461727260
  40ae1e:	cmp    rbp,rax
  40ae21:	ja     40af60 <_start@@Base+0x7c30>
  40ae27:	movabs rax,0x6e616d64ffffffff
  40ae31:	cmp    rbp,rax
  40ae34:	ja     40b080 <_start@@Base+0x7d50>
  40ae3a:	movabs rax,0x666c6577ffffffff
  40ae44:	cmp    rbp,rax
  40ae47:	ja     40b368 <_start@@Base+0x8038>
  40ae4d:	and    rbp,0xffffffffff000000
  40ae54:	movabs rax,0x656e656d79000000
  40ae5e:	cmp    rbp,rax
  40ae61:	je     40be18 <_start@@Base+0x8ae8>
  40ae67:	movabs rax,0x636f6c6f72000000
  40ae71:	cmp    rbp,rax
  40ae74:	jne    40cca8 <_start@@Base+0x9978>
  40ae7a:	cmp    r12,0x5
  40ae7e:	jle    40c620 <_start@@Base+0x92f0>
  40ae84:	mov    ecx,0x5
  40ae89:	mov    rdx,rbx
  40ae8c:	mov    rsi,r13
  40ae8f:	mov    rdi,r15
  40ae92:	call   407470 <_start@@Base+0x4140>
  40ae97:	mov    rbp,rax
  40ae9a:	cmp    r13,rax
  40ae9d:	je     40c620 <_start@@Base+0x92f0>
  40aea3:	mov    BYTE PTR [rsp+0x3c],0x0
  40aea8:	mov    QWORD PTR [rsp+0x50],0x0
  40aeb1:	mov    DWORD PTR [rsp+0x48],0x0
  40aeb9:	cmp    rbx,rax
  40aebc:	je     40dd85 <_start@@Base+0xaa55>
  40aec2:	lea    rcx,[rsp+0x48]
  40aec7:	lea    r8,[rsp+0x50]
  40aecc:	mov    rdx,rbx
  40aecf:	mov    rsi,rax
  40aed2:	mov    rdi,r15
  40aed5:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40aeda:	mov    r13,rax
  40aedd:	cmp    rbp,rax
  40aee0:	jne    40ddce <_start@@Base+0xaa9e>
  40aee6:	lea    r8,[rsp+0x3c]
  40aeeb:	lea    rcx,[rip+0x168ce]        # 4217c0 <__data_start@@Base+0x700>
  40aef2:	mov    rdx,rbx
  40aef5:	mov    rsi,r13
  40aef8:	mov    rdi,r15
  40aefb:	call   405a70 <_start@@Base+0x2740>
  40af00:	cmp    rax,r13
  40af03:	je     40dabd <_start@@Base+0xa78d>
  40af09:	cmp    rbx,rax
  40af0c:	je     40dabd <_start@@Base+0xa78d>
  40af12:	movzx  edx,BYTE PTR [rsp+0x3c]
  40af17:	mov    r13,rax
  40af1a:	nop    WORD PTR [rax+rax*1+0x0]
  40af20:	cmp    dl,0x8
  40af23:	jne    40af30 <_start@@Base+0x7c00>
  40af25:	test   BYTE PTR [r15+0x10],0x2
  40af2a:	je     40b520 <_start@@Base+0x81f0>
  40af30:	mov    rdi,QWORD PTR [r15]
  40af33:	mov    ecx,0x1
  40af38:	mov    edx,0x1
  40af3d:	mov    esi,0x6
  40af42:	call   414940 <flatcc_builder_table_add@@Base>
  40af47:	test   rax,rax
  40af4a:	je     40f06d <_start@@Base+0xbd3d>
  40af50:	movzx  edx,BYTE PTR [rsp+0x3c]
  40af55:	mov    BYTE PTR [rax],dl
  40af57:	jmp    40b520 <_start@@Base+0x81f0>
  40af5c:	nop    DWORD PTR [rax+0x0]
  40af60:	movabs rax,0x746573746632ffff
  40af6a:	cmp    rbp,rax
  40af6d:	ja     40b138 <_start@@Base+0x7e08>
  40af73:	sub    rax,0x4c08d9e
  40af79:	cmp    rbp,rax
  40af7c:	je     40b5a0 <_start@@Base+0x8270>
  40af82:	movabs rax,0x74657374656d7073
  40af8c:	cmp    rbp,rax
  40af8f:	ja     40b650 <_start@@Base+0x8320>
  40af95:	sub    rax,0x30bfd0e
  40af9b:	cmp    rbp,rax
  40af9e:	je     40ce50 <_start@@Base+0x9b20>
  40afa4:	movabs rax,0x74657374626f6f6c
  40afae:	cmp    rbp,rax
  40afb1:	jne    40c280 <_start@@Base+0x8f50>
  40afb7:	cmp    r12,0x8
  40afbb:	jle    40dd59 <_start@@Base+0xaa29>
  40afc1:	mov    ecx,0x8
  40afc6:	mov    rdx,rbx
  40afc9:	mov    rsi,r13
  40afcc:	mov    rdi,r15
  40afcf:	call   407470 <_start@@Base+0x4140>
  40afd4:	mov    rbp,rax
  40afd7:	cmp    r13,rax
  40afda:	je     40dd59 <_start@@Base+0xaa29>
  40afe0:	mov    rax,rbx
  40afe3:	sub    rax,rbp
  40afe6:	mov    BYTE PTR [rsp+0x3c],0x0
  40afeb:	cmp    rax,0x3
  40afef:	jle    40c6e0 <_start@@Base+0x93b0>
  40aff5:	cmp    DWORD PTR [rbp+0x0],0x65757274
  40affc:	je     40e730 <_start@@Base+0xb400>
  40b002:	cmp    rax,0x4
  40b006:	je     40c6e0 <_start@@Base+0x93b0>
  40b00c:	cmp    DWORD PTR [rbp+0x0],0x736c6166
  40b013:	jne    40c6e0 <_start@@Base+0x93b0>
  40b019:	cmp    BYTE PTR [rbp+0x4],0x65
  40b01d:	lea    r13,[rbp+0x5]
  40b021:	jne    40c6e0 <_start@@Base+0x93b0>
  40b027:	mov    rdi,QWORD PTR [r15]
  40b02a:	mov    ecx,0x1
  40b02f:	mov    edx,0x1
  40b034:	mov    esi,0xf
  40b039:	call   414940 <flatcc_builder_table_add@@Base>
  40b03e:	test   rax,rax
  40b041:	je     40f1a6 <_start@@Base+0xbe76>
  40b047:	movzx  edx,BYTE PTR [rsp+0x3c]
  40b04c:	mov    BYTE PTR [rax],dl
  40b04e:	jmp    40b520 <_start@@Base+0x81f0>
  40b053:	nop    DWORD PTR [rax+rax*1+0x0]
  40b058:	movbe  rbp,QWORD PTR [r13+0x0]
  40b05e:	jmp    40ae14 <_start@@Base+0x7ae4>
  40b063:	nop    DWORD PTR [rax+rax*1+0x0]
  40b068:	inc    r13
  40b06b:	mov    DWORD PTR [r15+0x14],0x0
  40b073:	jmp    40adf6 <_start@@Base+0x7ac6>
  40b078:	nop    DWORD PTR [rax+rax*1+0x0]
  40b080:	movabs rax,0x74657373ffffffff
  40b08a:	cmp    rbp,rax
  40b08d:	ja     40b4a0 <_start@@Base+0x8170>
  40b093:	movabs rax,0x706172656e745f6d
  40b09d:	cmp    rbp,rax
  40b0a0:	ja     40b940 <_start@@Base+0x8610>
  40b0a6:	movabs rax,0xffffffff00000000
  40b0b0:	and    rbp,rax
  40b0b3:	movabs rax,0x6e616d6500000000
  40b0bd:	cmp    rbp,rax
  40b0c0:	jne    40c240 <_start@@Base+0x8f10>
  40b0c6:	cmp    r12,0x4
  40b0ca:	jle    40d530 <_start@@Base+0xa200>
  40b0d0:	mov    ecx,0x4
  40b0d5:	mov    rdx,rbx
  40b0d8:	mov    rsi,r13
  40b0db:	mov    rdi,r15
  40b0de:	call   407470 <_start@@Base+0x4140>
  40b0e3:	cmp    r13,rax
  40b0e6:	je     40d530 <_start@@Base+0xa200>
  40b0ec:	lea    rbp,[rsp+0x34]
  40b0f1:	mov    rcx,rbp
  40b0f4:	mov    rdx,rbx
  40b0f7:	mov    rsi,rax
  40b0fa:	mov    rdi,r15
  40b0fd:	call   418a60 <flatcc_json_parser_build_string@@Base>
  40b102:	mov    r9d,DWORD PTR [rsp+0x34]
  40b107:	mov    r13,rax
  40b10a:	test   r9d,r9d
  40b10d:	je     40f04f <_start@@Base+0xbd1f>
  40b113:	mov    rdi,QWORD PTR [r15]
  40b116:	mov    esi,0x3
  40b11b:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40b120:	test   rax,rax
  40b123:	je     40f047 <_start@@Base+0xbd17>
  40b129:	mov    edx,DWORD PTR [rsp+0x34]
  40b12d:	mov    DWORD PTR [rax],edx
  40b12f:	jmp    40b520 <_start@@Base+0x81f0>
  40b134:	nop    DWORD PTR [rax+0x0]
  40b138:	movabs rax,0x7465737468617367
  40b142:	cmp    rbp,rax
  40b145:	ja     40b210 <_start@@Base+0x7ee0>
  40b14b:	xor    bp,bp
  40b14e:	sub    rax,0x22e7367
  40b154:	cmp    rbp,rax
  40b157:	jne    40bc90 <_start@@Base+0x8960>
  40b15d:	cmp    r12,0x6
  40b161:	jle    40d1d8 <_start@@Base+0x9ea8>
  40b167:	mov    ecx,0x6
  40b16c:	mov    rdx,rbx
  40b16f:	mov    rsi,r13
  40b172:	mov    rdi,r15
  40b175:	call   407470 <_start@@Base+0x4140>
  40b17a:	mov    rbp,rax
  40b17d:	cmp    r13,rax
  40b180:	je     40d1d8 <_start@@Base+0x9ea8>
  40b186:	lea    r12,[rsp+0x50]
  40b18b:	mov    rcx,r12
  40b18e:	mov    rdx,rbx
  40b191:	mov    rsi,rax
  40b194:	mov    rdi,r15
  40b197:	mov    DWORD PTR [rsp+0x50],0x0
  40b19f:	call   417710 <flatcc_json_parser_float@@Base>
  40b1a4:	mov    r13,rax
  40b1a7:	cmp    rax,rbp
  40b1aa:	je     40d80e <_start@@Base+0xa4de>
  40b1b0:	vxorps xmm0,xmm0,xmm0
  40b1b4:	vucomiss xmm0,DWORD PTR [rsp+0x50]
  40b1ba:	jp     40b1c9 <_start@@Base+0x7e99>
  40b1bc:	jne    40b1c9 <_start@@Base+0x7e99>
  40b1be:	test   BYTE PTR [r15+0x10],0x2
  40b1c3:	je     40b520 <_start@@Base+0x81f0>
  40b1c9:	mov    rdi,QWORD PTR [r15]
  40b1cc:	mov    ecx,0x4
  40b1d1:	mov    edx,0x4
  40b1d6:	mov    esi,0x1b
  40b1db:	call   414940 <flatcc_builder_table_add@@Base>
  40b1e0:	test   rax,rax
  40b1e3:	je     40efc9 <_start@@Base+0xbc99>
  40b1e9:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40b1ef:	vmovss DWORD PTR [rax],xmm0
  40b1f3:	jmp    40b520 <_start@@Base+0x81f0>
  40b1f8:	nop    DWORD PTR [rax+rax*1+0x0]
  40b200:	xor    r12d,r12d
  40b203:	jmp    40ae06 <_start@@Base+0x7ad6>
  40b208:	nop    DWORD PTR [rax+rax*1+0x0]
  40b210:	movabs rax,0x7465737468617368
  40b21a:	cmp    rbp,rax
  40b21d:	je     40be88 <_start@@Base+0x8b58>
  40b223:	movabs rax,0x766563746f725f6e
  40b22d:	cmp    rbp,rax
  40b230:	ja     40bf60 <_start@@Base+0x8c30>
  40b236:	movabs rax,0x746573746e657374
  40b240:	cmp    rbp,rax
  40b243:	jne    40c470 <_start@@Base+0x9140>
  40b249:	lea    r8,[r13+0x8]
  40b24d:	mov    rax,rbx
  40b250:	sub    rax,r8
  40b253:	cmp    rax,0x7
  40b257:	ja     40dfa6 <_start@@Base+0xac76>
  40b25d:	mov    rsi,rbx
  40b260:	mov    rdi,r8
  40b263:	call   403420 <_start@@Base+0xf0>
  40b268:	movabs rdx,0x6564666c61746275
  40b272:	cmp    rax,rdx
  40b275:	jne    40d7c0 <_start@@Base+0xa490>
  40b27b:	lea    rbp,[r13+0x10]
  40b27f:	mov    r8,rbx
  40b282:	sub    r8,rbp
  40b285:	cmp    r8,0x7
  40b289:	ja     40d99f <_start@@Base+0xa66f>
  40b28f:	mov    rsi,rbx
  40b292:	mov    rdi,rbp
  40b295:	call   403420 <_start@@Base+0xf0>
  40b29a:	movabs rdx,0xffffffff00000000
  40b2a4:	and    rax,rdx
  40b2a7:	movabs rdx,0x6666657200000000
  40b2b1:	cmp    rax,rdx
  40b2b4:	jne    40e45c <_start@@Base+0xb12c>
  40b2ba:	cmp    r8,0x4
  40b2be:	jle    40ee28 <_start@@Base+0xbaf8>
  40b2c4:	mov    ecx,0x4
  40b2c9:	mov    rdx,rbx
  40b2cc:	mov    rsi,rbp
  40b2cf:	mov    rdi,r15
  40b2d2:	call   407470 <_start@@Base+0x4140>
  40b2d7:	mov    r13,rax
  40b2da:	cmp    rbp,rax
  40b2dd:	je     40ee28 <_start@@Base+0xbaf8>
  40b2e3:	mov    rdi,QWORD PTR [r15]
  40b2e6:	cmp    rbx,rax
  40b2e9:	je     40b2f4 <_start@@Base+0x7fc4>
  40b2eb:	cmp    BYTE PTR [rax],0x5b
  40b2ee:	je     40f0af <_start@@Base+0xbd7f>
  40b2f4:	xor    ecx,ecx
  40b2f6:	xor    edx,edx
  40b2f8:	xor    esi,esi
  40b2fa:	call   412420 <flatcc_builder_start_buffer@@Base>
  40b2ff:	test   eax,eax
  40b301:	jne    40f352 <_start@@Base+0xc022>
  40b307:	lea    rbp,[rsp+0x34]
  40b30c:	mov    rsi,r13
  40b30f:	mov    rcx,rbp
  40b312:	mov    rdx,rbx
  40b315:	mov    rdi,r15
  40b318:	call   40ad00 <_start@@Base+0x79d0>
  40b31d:	mov    esi,DWORD PTR [rsp+0x34]
  40b321:	mov    r13,rax
  40b324:	test   esi,esi
  40b326:	je     40f34a <_start@@Base+0xc01a>
  40b32c:	mov    rdi,QWORD PTR [r15]
  40b32f:	call   412500 <flatcc_builder_end_buffer@@Base>
  40b334:	mov    DWORD PTR [rsp+0x34],eax
  40b338:	test   eax,eax
  40b33a:	je     40f342 <_start@@Base+0xc012>
  40b340:	mov    rdi,QWORD PTR [r15]
  40b343:	mov    esi,0xd
  40b348:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40b34d:	test   rax,rax
  40b350:	je     40f33a <_start@@Base+0xc00a>
  40b356:	mov    edx,DWORD PTR [rsp+0x34]
  40b35a:	mov    DWORD PTR [rax],edx
  40b35c:	jmp    40b520 <_start@@Base+0x81f0>
  40b361:	nop    DWORD PTR [rax+0x0]
  40b368:	movabs rax,0x686fffffffffffff
  40b372:	cmp    rbp,rax
  40b375:	ja     40bbc8 <_start@@Base+0x8898>
  40b37b:	movabs rax,0xffffffff00000000
  40b385:	and    rbp,rax
  40b388:	movabs rax,0x666c657800000000
  40b392:	cmp    rbp,rax
  40b395:	jne    40c260 <_start@@Base+0x8f30>
  40b39b:	cmp    r12,0x4
  40b39f:	jle    40d3f8 <_start@@Base+0xa0c8>
  40b3a5:	mov    ecx,0x4
  40b3aa:	mov    rdx,rbx
  40b3ad:	mov    rsi,r13
  40b3b0:	mov    rdi,r15
  40b3b3:	call   407470 <_start@@Base+0x4140>
  40b3b8:	mov    rbp,rax
  40b3bb:	cmp    r13,rax
  40b3be:	je     40d3f8 <_start@@Base+0xa0c8>
  40b3c4:	mov    rdi,QWORD PTR [r15]
  40b3c7:	mov    ecx,0xffffffff
  40b3cc:	mov    edx,0x1
  40b3d1:	mov    esi,0x1
  40b3d6:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40b3db:	test   eax,eax
  40b3dd:	jne    40f1ae <_start@@Base+0xbe7e>
  40b3e3:	mov    rcx,r14
  40b3e6:	mov    rdx,rbx
  40b3e9:	mov    rsi,rbp
  40b3ec:	mov    rdi,r15
  40b3ef:	call   40ac40 <_start@@Base+0x7910>
  40b3f4:	mov    r13,rax
  40b3f7:	mov    eax,DWORD PTR [rsp+0x30]
  40b3fb:	test   eax,eax
  40b3fd:	je     40e04f <_start@@Base+0xad1f>
  40b403:	lea    rbp,[rsp+0x50]
  40b408:	jmp    40b439 <_start@@Base+0x8109>
  40b40a:	nop    WORD PTR [rax+rax*1+0x0]
  40b410:	movzx  edx,BYTE PTR [rsp+0x50]
  40b415:	mov    rcx,r14
  40b418:	mov    BYTE PTR [r12],dl
  40b41c:	mov    rsi,rax
  40b41f:	mov    rdx,rbx
  40b422:	mov    rdi,r15
  40b425:	call   406740 <_start@@Base+0x3410>
  40b42a:	mov    r13,rax
  40b42d:	mov    eax,DWORD PTR [rsp+0x30]
  40b431:	test   eax,eax
  40b433:	je     40e04f <_start@@Base+0xad1f>
  40b439:	mov    rdi,QWORD PTR [r15]
  40b43c:	mov    esi,0x1
  40b441:	mov    BYTE PTR [rsp+0x50],0x0
  40b446:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40b44b:	mov    r12,rax
  40b44e:	test   rax,rax
  40b451:	je     40e084 <_start@@Base+0xad54>
  40b457:	mov    rcx,rbp
  40b45a:	mov    rdx,rbx
  40b45d:	mov    rsi,r13
  40b460:	mov    rdi,r15
  40b463:	call   4041d0 <_start@@Base+0xea0>
  40b468:	cmp    rax,r13
  40b46b:	jne    40b410 <_start@@Base+0x80e0>
  40b46d:	mov    r8,rbp
  40b470:	lea    rcx,[rip+0x16329]        # 4217a0 <__data_start@@Base+0x6e0>
  40b477:	mov    rdx,rbx
  40b47a:	mov    rsi,r13
  40b47d:	mov    rdi,r15
  40b480:	call   405ce0 <_start@@Base+0x29b0>
  40b485:	cmp    rax,r13
  40b488:	je     40b48f <_start@@Base+0x815f>
  40b48a:	cmp    rbx,rax
  40b48d:	jne    40b410 <_start@@Base+0x80e0>
  40b48f:	mov    r14,rax
  40b492:	jmp    40ad43 <_start@@Base+0x7a13>
  40b497:	nop    WORD PTR [rax+rax*1+0x0]
  40b4a0:	mov    r8,rbp
  40b4a3:	and    r8,0xffffffffff000000
  40b4aa:	movabs rax,0x7465737434000000
  40b4b4:	cmp    r8,rax
  40b4b7:	je     40bcb0 <_start@@Base+0x8980>
  40b4bd:	cmp    r12,0x4
  40b4c1:	jle    40ccc0 <_start@@Base+0x9990>
  40b4c7:	mov    ecx,0x4
  40b4cc:	mov    rdx,rbx
  40b4cf:	mov    rsi,r13
  40b4d2:	mov    rdi,r15
  40b4d5:	mov    QWORD PTR [rsp],r8
  40b4d9:	call   407470 <_start@@Base+0x4140>
  40b4de:	cmp    r13,rax
  40b4e1:	mov    r8,QWORD PTR [rsp]
  40b4e5:	je     40ccc0 <_start@@Base+0x9990>
  40b4eb:	sub    rsp,0x8
  40b4ef:	lea    rcx,[rip+0x401a]        # 40f510 <_start@@Base+0xc1e0>
  40b4f6:	push   rcx
  40b4f7:	mov    r8d,0x8
  40b4fd:	xor    ecx,ecx
  40b4ff:	mov    r9,QWORD PTR [rsp+0x50]
  40b504:	mov    rdx,rbx
  40b507:	mov    rsi,rax
  40b50a:	mov    rdi,r15
  40b50d:	call   418d00 <flatcc_json_parser_union@@Base>
  40b512:	pop    r8
  40b514:	mov    r13,rax
  40b517:	pop    r9
  40b519:	nop    DWORD PTR [rax+0x0]
  40b520:	mov    rdx,rbx
  40b523:	mov    rsi,r13
  40b526:	mov    rcx,r14
  40b529:	mov    rdi,r15
  40b52c:	call   4065f0 <_start@@Base+0x32c0>
  40b531:	mov    edx,DWORD PTR [rsp+0x30]
  40b535:	mov    r13,rax
  40b538:	test   edx,edx
  40b53a:	jne    40add0 <_start@@Base+0x7aa0>
  40b540:	mov    r14,rax
  40b543:	mov    eax,DWORD PTR [r15+0x20]
  40b547:	test   eax,eax
  40b549:	jne    40ad43 <_start@@Base+0x7a13>
  40b54f:	mov    rdi,QWORD PTR [r15]
  40b552:	mov    esi,0x3
  40b557:	call   4138d0 <flatcc_builder_check_required_field@@Base>
  40b55c:	test   eax,eax
  40b55e:	je     40e715 <_start@@Base+0xb3e5>
  40b564:	mov    rcx,QWORD PTR [rsp+0x40]
  40b569:	mov    rsi,r14
  40b56c:	mov    rdx,rbx
  40b56f:	mov    rdi,r15
  40b572:	call   418ca0 <flatcc_json_parser_finalize_unions@@Base>
  40b577:	mov    rdi,QWORD PTR [r15]
  40b57a:	mov    rbp,rax
  40b57d:	call   413a40 <flatcc_builder_end_table@@Base>
  40b582:	mov    rdi,QWORD PTR [rsp+0x10]
  40b587:	mov    r14,rbp
  40b58a:	mov    DWORD PTR [rdi],eax
  40b58c:	test   eax,eax
  40b58e:	jne    40ad59 <_start@@Base+0x7a29>
  40b594:	jmp    40ad43 <_start@@Base+0x7a13>
  40b599:	nop    DWORD PTR [rax+0x0]
  40b5a0:	lea    rbp,[r13+0x8]
  40b5a4:	mov    r8,rbx
  40b5a7:	sub    r8,rbp
  40b5aa:	cmp    r8,0x7
  40b5ae:	ja     40cdd0 <_start@@Base+0x9aa0>
  40b5b4:	mov    rsi,rbx
  40b5b7:	mov    rdi,rbp
  40b5ba:	call   403420 <_start@@Base+0xf0>
  40b5bf:	movabs rdx,0x796f66737472696d
  40b5c9:	cmp    rax,rdx
  40b5cc:	ja     40bd70 <_start@@Base+0x8a40>
  40b5d2:	movabs rdx,0x796f66626f6f6c73
  40b5dc:	cmp    rax,rdx
  40b5df:	je     40c2a0 <_start@@Base+0x8f70>
  40b5e5:	endbr64 
  40b5e9:	movabs rdx,0x796f66736f727465
  40b5f3:	cmp    rax,rdx
  40b5f6:	jne    40c770 <_start@@Base+0x9440>
  40b5fc:	lea    rbp,[r13+0x10]
  40b600:	mov    rax,rbx
  40b603:	sub    rax,rbp
  40b606:	cmp    rax,0x7
  40b60a:	ja     40e08c <_start@@Base+0xad5c>
  40b610:	mov    rsi,rbx
  40b613:	mov    rdi,rbp
  40b616:	call   403420 <_start@@Base+0xf0>
  40b61b:	xor    al,al
  40b61d:	movabs rdx,0x6473747275637400
  40b627:	cmp    rax,rdx
  40b62a:	je     40da75 <_start@@Base+0xa745>
  40b630:	mov    rdx,rbx
  40b633:	mov    rsi,rbp
  40b636:	mov    rdi,r15
  40b639:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b63e:	mov    r13,rax
  40b641:	jmp    40b520 <_start@@Base+0x81f0>
  40b646:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b650:	movabs rax,0x7465737465ffffff
  40b65a:	cmp    rbp,rax
  40b65d:	ja     40c0c0 <_start@@Base+0x8d90>
  40b663:	sub    rax,0x928f8b
  40b669:	cmp    rbp,rax
  40b66c:	jne    40c430 <_start@@Base+0x9100>
  40b672:	lea    rbp,[r13+0x8]
  40b676:	mov    r8,rbx
  40b679:	sub    r8,rbp
  40b67c:	cmp    r8,0x7
  40b680:	ja     40df9b <_start@@Base+0xac6b>
  40b686:	mov    rsi,rbx
  40b689:	mov    rdi,rbp
  40b68c:	call   403420 <_start@@Base+0xf0>
  40b691:	movabs rdx,0xff00000000000000
  40b69b:	and    rax,rdx
  40b69e:	movabs rdx,0x7900000000000000
  40b6a8:	cmp    rax,rdx
  40b6ab:	jne    40d7e0 <_start@@Base+0xa4b0>
  40b6b1:	cmp    r8,0x1
  40b6b5:	jle    40d9aa <_start@@Base+0xa67a>
  40b6bb:	mov    ecx,0x1
  40b6c0:	mov    rdx,rbx
  40b6c3:	mov    rsi,rbp
  40b6c6:	mov    rdi,r15
  40b6c9:	call   407470 <_start@@Base+0x4140>
  40b6ce:	mov    r13,rax
  40b6d1:	cmp    rbp,rax
  40b6d4:	je     40d9aa <_start@@Base+0xa67a>
  40b6da:	mov    rdi,QWORD PTR [r15]
  40b6dd:	mov    esi,0x3
  40b6e2:	mov    DWORD PTR [rsp+0x34],0x0
  40b6ea:	call   4130c0 <flatcc_builder_start_table@@Base>
  40b6ef:	test   eax,eax
  40b6f1:	jne    40e00c <_start@@Base+0xacdc>
  40b6f7:	lea    rbp,[rsp+0x38]
  40b6fc:	mov    rsi,r13
  40b6ff:	mov    rdi,r15
  40b702:	mov    rcx,rbp
  40b705:	mov    rdx,rbx
  40b708:	call   4083c0 <_start@@Base+0x5090>
  40b70d:	mov    edi,DWORD PTR [rsp+0x38]
  40b711:	mov    r13,rax
  40b714:	test   edi,edi
  40b716:	je     40e8df <_start@@Base+0xb5af>
  40b71c:	movabs r12,0x6963ffffffffffff
  40b726:	mov    QWORD PTR [rsp+0x8],r14
  40b72b:	jmp    40b850 <_start@@Base+0x8520>
  40b730:	and    rax,0xffffffffff000000
  40b736:	movabs rdx,0x636f756e74000000
  40b740:	cmp    rax,rdx
  40b743:	jne    40dae0 <_start@@Base+0xa7b0>
  40b749:	cmp    r8,0x5
  40b74d:	jle    40dae0 <_start@@Base+0xa7b0>
  40b753:	mov    ecx,0x5
  40b758:	mov    rdx,rbx
  40b75b:	mov    rsi,r13
  40b75e:	mov    rdi,r15
  40b761:	call   407470 <_start@@Base+0x4140>
  40b766:	mov    r14,rax
  40b769:	cmp    rax,r13
  40b76c:	je     40dae0 <_start@@Base+0xa7b0>
  40b772:	xor    esi,esi
  40b774:	mov    WORD PTR [rsp+0x2e],si
  40b779:	mov    QWORD PTR [rsp+0x50],0x0
  40b782:	mov    DWORD PTR [rsp+0x48],0x0
  40b78a:	cmp    rbx,rax
  40b78d:	je     40dffc <_start@@Base+0xaccc>
  40b793:	lea    rcx,[rsp+0x48]
  40b798:	lea    r8,[rsp+0x50]
  40b79d:	mov    rdx,rbx
  40b7a0:	mov    rsi,rax
  40b7a3:	mov    rdi,r15
  40b7a6:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40b7ab:	mov    r10,rax
  40b7ae:	cmp    r14,rax
  40b7b1:	jne    40e3f5 <_start@@Base+0xb0c5>
  40b7b7:	mov    rsi,r10
  40b7ba:	lea    r8,[rsp+0x2e]
  40b7bf:	lea    rcx,[rip+0x1593a]        # 421100 <__data_start@@Base+0x40>
  40b7c6:	mov    rdx,rbx
  40b7c9:	mov    rdi,r15
  40b7cc:	mov    QWORD PTR [rsp],r10
  40b7d0:	call   4050b0 <_start@@Base+0x1d80>
  40b7d5:	mov    r10,QWORD PTR [rsp]
  40b7d9:	mov    r13,rax
  40b7dc:	cmp    rax,r10
  40b7df:	je     40ed50 <_start@@Base+0xba20>
  40b7e5:	cmp    rbx,rax
  40b7e8:	je     40ed50 <_start@@Base+0xba20>
  40b7ee:	movzx  eax,WORD PTR [rsp+0x2e]
  40b7f3:	test   ax,ax
  40b7f6:	jne    40b7ff <_start@@Base+0x84cf>
  40b7f8:	test   BYTE PTR [r15+0x10],0x2
  40b7fd:	je     40b830 <_start@@Base+0x8500>
  40b7ff:	mov    rdi,QWORD PTR [r15]
  40b802:	mov    ecx,0x2
  40b807:	mov    edx,0x2
  40b80c:	mov    esi,0x2
  40b811:	call   414940 <flatcc_builder_table_add@@Base>
  40b816:	test   rax,rax
  40b819:	je     40ed50 <_start@@Base+0xba20>
  40b81f:	movzx  edx,WORD PTR [rsp+0x2e]
  40b824:	mov    WORD PTR [rax],dx
  40b827:	nop    WORD PTR [rax+rax*1+0x0]
  40b830:	mov    rsi,r13
  40b833:	mov    rcx,rbp
  40b836:	mov    rdx,rbx
  40b839:	mov    rdi,r15
  40b83c:	call   4065f0 <_start@@Base+0x32c0>
  40b841:	mov    r13,rax
  40b844:	mov    eax,DWORD PTR [rsp+0x38]
  40b848:	test   eax,eax
  40b84a:	je     40e8da <_start@@Base+0xb5aa>
  40b850:	cmp    rbx,r13
  40b853:	je     40b872 <_start@@Base+0x8542>
  40b855:	movzx  eax,BYTE PTR [r13+0x0]
  40b85a:	cmp    al,0x22
  40b85c:	je     40db30 <_start@@Base+0xa800>
  40b862:	cmp    al,0x2e
  40b864:	je     40ddb3 <_start@@Base+0xaa83>
  40b86a:	mov    DWORD PTR [r15+0x14],0x1
  40b872:	mov    r8,rbx
  40b875:	sub    r8,r13
  40b878:	cmp    r8,0x7
  40b87c:	ja     40db10 <_start@@Base+0xa7e0>
  40b882:	mov    rsi,rbx
  40b885:	mov    rdi,r13
  40b888:	call   403420 <_start@@Base+0xf0>
  40b88d:	cmp    rax,r12
  40b890:	jbe    40b730 <_start@@Base+0x8400>
  40b896:	movabs rdx,0xffffff0000000000
  40b8a0:	and    rdx,rax
  40b8a3:	movabs rdi,0x76616c0000000000
  40b8ad:	cmp    rdx,rdi
  40b8b0:	je     40dbb8 <_start@@Base+0xa888>
  40b8b6:	movabs rcx,0xffff000000000000
  40b8c0:	and    rax,rcx
  40b8c3:	movabs rdx,0x6964000000000000
  40b8cd:	cmp    rax,rdx
  40b8d0:	jne    40dae0 <_start@@Base+0xa7b0>
  40b8d6:	cmp    r8,0x2
  40b8da:	jle    40dae0 <_start@@Base+0xa7b0>
  40b8e0:	mov    ecx,0x2
  40b8e5:	mov    rdx,rbx
  40b8e8:	mov    rsi,r13
  40b8eb:	mov    rdi,r15
  40b8ee:	call   407470 <_start@@Base+0x4140>
  40b8f3:	cmp    rax,r13
  40b8f6:	je     40dae0 <_start@@Base+0xa7b0>
  40b8fc:	mov    rdx,rbx
  40b8ff:	lea    rcx,[rsp+0x3c]
  40b904:	mov    rsi,rax
  40b907:	mov    rdi,r15
  40b90a:	call   418a60 <flatcc_json_parser_build_string@@Base>
  40b90f:	mov    edx,DWORD PTR [rsp+0x3c]
  40b913:	mov    r13,rax
  40b916:	test   edx,edx
  40b918:	je     40ed50 <_start@@Base+0xba20>
  40b91e:	mov    rdi,QWORD PTR [r15]
  40b921:	xor    esi,esi
  40b923:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40b928:	test   rax,rax
  40b92b:	je     40ed50 <_start@@Base+0xba20>
  40b931:	mov    edx,DWORD PTR [rsp+0x3c]
  40b935:	mov    DWORD PTR [rax],edx
  40b937:	jmp    40b830 <_start@@Base+0x8500>
  40b93c:	nop    DWORD PTR [rax+0x0]
  40b940:	movabs rax,0x706172656e745f6e
  40b94a:	cmp    rbp,rax
  40b94d:	je     40d1f0 <_start@@Base+0x9ec0>
  40b953:	movabs rax,0xffffff0000000000
  40b95d:	and    rbp,rax
  40b960:	movabs rax,0x706f730000000000
  40b96a:	cmp    rbp,rax
  40b96d:	jne    40c450 <_start@@Base+0x9120>
  40b973:	cmp    r12,0x3
  40b977:	jle    40df85 <_start@@Base+0xac55>
  40b97d:	mov    ecx,0x3
  40b982:	mov    rdx,rbx
  40b985:	mov    rsi,r13
  40b988:	mov    rdi,r15
  40b98b:	call   407470 <_start@@Base+0x4140>
  40b990:	mov    rbp,rax
  40b993:	cmp    r13,rax
  40b996:	je     40df85 <_start@@Base+0xac55>
  40b99c:	mov    rdi,QWORD PTR [r15]
  40b99f:	mov    ecx,0x10
  40b9a4:	mov    edx,0x20
  40b9a9:	xor    esi,esi
  40b9ab:	call   414940 <flatcc_builder_table_add@@Base>
  40b9b0:	mov    QWORD PTR [rsp],rax
  40b9b4:	test   rax,rax
  40b9b7:	je     40f251 <_start@@Base+0xbf21>
  40b9bd:	mov    rsi,rbp
  40b9c0:	lea    rcx,[rsp+0x3c]
  40b9c5:	mov    rdx,rbx
  40b9c8:	mov    rdi,r15
  40b9cb:	call   4083c0 <_start@@Base+0x5090>
  40b9d0:	mov    r12,rax
  40b9d3:	mov    eax,DWORD PTR [rsp+0x3c]
  40b9d7:	movabs rbp,0x7465737432ffffff
  40b9e1:	nop    DWORD PTR [rax+0x0]
  40b9e8:	test   eax,eax
  40b9ea:	je     40bb9b <_start@@Base+0x886b>
  40b9f0:	cmp    rbx,r12
  40b9f3:	je     40ba12 <_start@@Base+0x86e2>
  40b9f5:	movzx  eax,BYTE PTR [r12]
  40b9fa:	cmp    al,0x22
  40b9fc:	je     40c930 <_start@@Base+0x9600>
  40ba02:	cmp    al,0x2e
  40ba04:	je     40cc88 <_start@@Base+0x9958>
  40ba0a:	mov    DWORD PTR [r15+0x14],0x1
  40ba12:	mov    rsi,rbx
  40ba15:	sub    rsi,r12
  40ba18:	cmp    rsi,0x7
  40ba1c:	jbe    40c878 <_start@@Base+0x9548>
  40ba22:	movbe  rax,QWORD PTR [r12]
  40ba28:	cmp    rax,rbp
  40ba2b:	ja     40c790 <_start@@Base+0x9460>
  40ba31:	and    rax,0xffffffffff000000
  40ba37:	movabs rdx,0x7465737432000000
  40ba41:	cmp    rax,rdx
  40ba44:	je     40ca60 <_start@@Base+0x9730>
  40ba4a:	movabs rdx,0x7465737431000000
  40ba54:	cmp    rax,rdx
  40ba57:	jne    40c7e0 <_start@@Base+0x94b0>
  40ba5d:	cmp    rsi,0x5
  40ba61:	jle    40c7e0 <_start@@Base+0x94b0>
  40ba67:	mov    ecx,DWORD PTR [r15+0x14]
  40ba6b:	movzx  eax,BYTE PTR [r12+0x5]
  40ba71:	test   ecx,ecx
  40ba73:	je     40cdb8 <_start@@Base+0x9a88>
  40ba79:	cmp    al,0x20
  40ba7b:	jle    40ba85 <_start@@Base+0x8755>
  40ba7d:	cmp    al,0x3a
  40ba7f:	jne    40c7e0 <_start@@Base+0x94b0>
  40ba85:	mov    DWORD PTR [r15+0x14],0x0
  40ba8d:	lea    rsi,[r12+0x5]
  40ba92:	mov    rax,rbx
  40ba95:	sub    rax,rsi
  40ba98:	cmp    rax,0x1
  40ba9c:	jle    40baa9 <_start@@Base+0x8779>
  40ba9e:	cmp    BYTE PTR [rsi],0x20
  40baa1:	jg     40bab7 <_start@@Base+0x8787>
  40baa3:	je     40df73 <_start@@Base+0xac43>
  40baa9:	mov    rdx,rbx
  40baac:	mov    rdi,r15
  40baaf:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40bab4:	mov    rsi,rax
  40bab7:	cmp    rbx,rsi
  40baba:	je     40bac5 <_start@@Base+0x8795>
  40babc:	cmp    BYTE PTR [rsi],0x3a
  40babf:	je     40e5af <_start@@Base+0xb27f>
  40bac5:	mov    ecx,0x4
  40baca:	mov    rdx,rbx
  40bacd:	mov    rdi,r15
  40bad0:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40bad5:	mov    r9,rax
  40bad8:	cmp    r9,r12
  40badb:	je     40c7e0 <_start@@Base+0x94b0>
  40bae1:	lea    r12,[rsp+0x50]
  40bae6:	mov    rsi,r9
  40bae9:	mov    rcx,r12
  40baec:	mov    rdx,rbx
  40baef:	mov    rdi,r15
  40baf2:	mov    QWORD PTR [rsp+0x8],r9
  40baf7:	mov    QWORD PTR [rsp+0x50],0x0
  40bb00:	call   417630 <flatcc_json_parser_double@@Base>
  40bb05:	mov    r9,QWORD PTR [rsp+0x8]
  40bb0a:	mov    r13,rax
  40bb0d:	cmp    r9,rax
  40bb10:	je     40d470 <_start@@Base+0xa140>
  40bb16:	vmovsd xmm0,QWORD PTR [rsp+0x50]
  40bb1c:	mov    rax,QWORD PTR [rsp]
  40bb20:	vmovsd QWORD PTR [rax+0x10],xmm0
  40bb25:	nop    DWORD PTR [rax]
  40bb28:	mov    rax,rbx
  40bb2b:	sub    rax,r13
  40bb2e:	cmp    rax,0x1
  40bb32:	jle    40bb41 <_start@@Base+0x8811>
  40bb34:	cmp    BYTE PTR [r13+0x0],0x20
  40bb39:	jg     40bb52 <_start@@Base+0x8822>
  40bb3b:	je     40cb78 <_start@@Base+0x9848>
  40bb41:	mov    rsi,r13
  40bb44:	mov    rdx,rbx
  40bb47:	mov    rdi,r15
  40bb4a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40bb4f:	mov    r13,rax
  40bb52:	cmp    rbx,r13
  40bb55:	je     40b520 <_start@@Base+0x81f0>
  40bb5b:	cmp    BYTE PTR [r13+0x0],0x2c
  40bb60:	je     40cb90 <_start@@Base+0x9860>
  40bb66:	mov    DWORD PTR [rsp+0x3c],0x0
  40bb6e:	cmp    BYTE PTR [r13+0x0],0x7d
  40bb73:	je     40ca20 <_start@@Base+0x96f0>
  40bb79:	mov    ecx,0xa
  40bb7e:	mov    rdx,rbx
  40bb81:	mov    rsi,r13
  40bb84:	mov    rdi,r15
  40bb87:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40bb8c:	mov    r12,rax
  40bb8f:	mov    eax,DWORD PTR [rsp+0x3c]
  40bb93:	test   eax,eax
  40bb95:	jne    40b9f0 <_start@@Base+0x86c0>
  40bb9b:	mov    r13,r12
  40bb9e:	jmp    40b520 <_start@@Base+0x81f0>
  40bba3:	nop    DWORD PTR [rax+rax*1+0x0]
  40bba8:	mov    rsi,r13
  40bbab:	mov    ecx,0x5
  40bbb0:	mov    rdx,rbx
  40bbb3:	mov    rdi,r15
  40bbb6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40bbbb:	mov    r13,rax
  40bbbe:	jmp    40adf6 <_start@@Base+0x7ac6>
  40bbc3:	nop    DWORD PTR [rax+rax*1+0x0]
  40bbc8:	movabs rax,0x696e76656e746f71
  40bbd2:	cmp    rbp,rax
  40bbd5:	ja     40c178 <_start@@Base+0x8e48>
  40bbdb:	movabs rax,0xffff000000000000
  40bbe5:	and    rbp,rax
  40bbe8:	movabs rax,0x6870000000000000
  40bbf2:	cmp    rbp,rax
  40bbf5:	jne    40d410 <_start@@Base+0xa0e0>
  40bbfb:	cmp    r12,0x2
  40bbff:	jle    40e434 <_start@@Base+0xb104>
  40bc05:	mov    ecx,0x2
  40bc0a:	mov    rdx,rbx
  40bc0d:	mov    rsi,r13
  40bc10:	mov    rdi,r15
  40bc13:	call   407470 <_start@@Base+0x4140>
  40bc18:	mov    rbp,rax
  40bc1b:	cmp    r13,rax
  40bc1e:	je     40e434 <_start@@Base+0xb104>
  40bc24:	xor    r12d,r12d
  40bc27:	mov    WORD PTR [rsp+0x50],r12w
  40bc2d:	lea    r12,[rsp+0x50]
  40bc32:	mov    rcx,r12
  40bc35:	mov    rdx,rbx
  40bc38:	mov    rsi,rax
  40bc3b:	mov    rdi,r15
  40bc3e:	call   404460 <_start@@Base+0x1130>
  40bc43:	mov    r13,rax
  40bc46:	cmp    rax,rbp
  40bc49:	je     40da8b <_start@@Base+0xa75b>
  40bc4f:	cmp    WORD PTR [rsp+0x50],0x64
  40bc55:	jne    40bc62 <_start@@Base+0x8932>
  40bc57:	test   BYTE PTR [r15+0x10],0x2
  40bc5c:	je     40b520 <_start@@Base+0x81f0>
  40bc62:	mov    rdi,QWORD PTR [r15]
  40bc65:	mov    ecx,0x2
  40bc6a:	mov    edx,0x2
  40bc6f:	mov    esi,0x2
  40bc74:	call   414940 <flatcc_builder_table_add@@Base>
  40bc79:	test   rax,rax
  40bc7c:	je     40f25e <_start@@Base+0xbf2e>
  40bc82:	movzx  edx,WORD PTR [rsp+0x50]
  40bc87:	mov    WORD PTR [rax],dx
  40bc8a:	jmp    40b520 <_start@@Base+0x81f0>
  40bc8f:	nop
  40bc90:	mov    rsi,r13
  40bc93:	mov    rdx,rbx
  40bc96:	mov    rdi,r15
  40bc99:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40bc9e:	mov    r13,rax
  40bca1:	jmp    40b520 <_start@@Base+0x81f0>
  40bca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bcb0:	cmp    r12,0x5
  40bcb4:	jle    40c4b0 <_start@@Base+0x9180>
  40bcba:	mov    ecx,0x5
  40bcbf:	mov    rdx,rbx
  40bcc2:	mov    rsi,r13
  40bcc5:	mov    rdi,r15
  40bcc8:	call   407470 <_start@@Base+0x4140>
  40bccd:	mov    rbp,rax
  40bcd0:	cmp    r13,rax
  40bcd3:	je     40c4b0 <_start@@Base+0x9180>
  40bcd9:	mov    rdi,QWORD PTR [r15]
  40bcdc:	mov    ecx,0x3fffffff
  40bce1:	mov    edx,0x2
  40bce6:	mov    esi,0x4
  40bceb:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40bcf0:	test   eax,eax
  40bcf2:	jne    40f03f <_start@@Base+0xbd0f>
  40bcf8:	mov    rcx,r14
  40bcfb:	mov    rdx,rbx
  40bcfe:	mov    rsi,rbp
  40bd01:	mov    rdi,r15
  40bd04:	call   40ac40 <_start@@Base+0x7910>
  40bd09:	mov    r11d,DWORD PTR [rsp+0x30]
  40bd0e:	mov    r13,rax
  40bd11:	test   r11d,r11d
  40bd14:	jne    40bd53 <_start@@Base+0x8a23>
  40bd16:	jmp    40dd19 <_start@@Base+0xa9e9>
  40bd1b:	nop    DWORD PTR [rax+rax*1+0x0]
  40bd20:	mov    rsi,r13
  40bd23:	mov    rcx,rax
  40bd26:	mov    rdx,rbx
  40bd29:	mov    rdi,r15
  40bd2c:	call   406890 <_start@@Base+0x3560>
  40bd31:	mov    rsi,rax
  40bd34:	mov    rcx,r14
  40bd37:	mov    rdx,rbx
  40bd3a:	mov    rdi,r15
  40bd3d:	call   406740 <_start@@Base+0x3410>
  40bd42:	mov    r10d,DWORD PTR [rsp+0x30]
  40bd47:	mov    r13,rax
  40bd4a:	test   r10d,r10d
  40bd4d:	je     40dd19 <_start@@Base+0xa9e9>
  40bd53:	mov    rdi,QWORD PTR [r15]
  40bd56:	mov    esi,0x1
  40bd5b:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40bd60:	test   rax,rax
  40bd63:	jne    40bd20 <_start@@Base+0x89f0>
  40bd65:	mov    r14,r13
  40bd68:	jmp    40ad43 <_start@@Base+0x7a13>
  40bd6d:	nop    DWORD PTR [rax]
  40bd70:	movabs rdx,0x796f66737472696e
  40bd7a:	cmp    rax,rdx
  40bd7d:	je     40c500 <_start@@Base+0x91d0>
  40bd83:	movabs rdx,0x796f667461626c65
  40bd8d:	cmp    rax,rdx
  40bd90:	jne    40d450 <_start@@Base+0xa120>
  40bd96:	lea    rbp,[r13+0x10]
  40bd9a:	mov    r8,rbx
  40bd9d:	sub    r8,rbp
  40bda0:	cmp    r8,0x7
  40bda4:	ja     40d86c <_start@@Base+0xa53c>
  40bdaa:	mov    rsi,rbx
  40bdad:	mov    rdi,rbp
  40bdb0:	call   403420 <_start@@Base+0xf0>
  40bdb5:	movabs rdx,0xff00000000000000
  40bdbf:	and    rax,rdx
  40bdc2:	movabs rdx,0x7300000000000000
  40bdcc:	cmp    rax,rdx
  40bdcf:	jne    40dfe6 <_start@@Base+0xacb6>
  40bdd5:	cmp    r8,0x1
  40bdd9:	jle    40e949 <_start@@Base+0xb619>
  40bddf:	mov    ecx,0x1
  40bde4:	mov    rdx,rbx
  40bde7:	mov    rsi,rbp
  40bdea:	mov    rdi,r15
  40bded:	call   407470 <_start@@Base+0x4140>
  40bdf2:	mov    r13,rax
  40bdf5:	cmp    rbp,rax
  40bdf8:	jne    40e95c <_start@@Base+0xb62c>
  40bdfe:	mov    rsi,r13
  40be01:	mov    rdx,rbx
  40be04:	mov    rdi,r15
  40be07:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40be0c:	mov    r13,rax
  40be0f:	jmp    40b520 <_start@@Base+0x81f0>
  40be14:	nop    DWORD PTR [rax+0x0]
  40be18:	cmp    r12,0x5
  40be1c:	jle    40c4e0 <_start@@Base+0x91b0>
  40be22:	mov    ecx,0x5
  40be27:	mov    rdx,rbx
  40be2a:	mov    rsi,r13
  40be2d:	mov    rdi,r15
  40be30:	call   407470 <_start@@Base+0x4140>
  40be35:	cmp    r13,rax
  40be38:	je     40c4e0 <_start@@Base+0x91b0>
  40be3e:	lea    rbp,[rsp+0x34]
  40be43:	mov    rcx,rbp
  40be46:	mov    rdx,rbx
  40be49:	mov    rsi,rax
  40be4c:	mov    rdi,r15
  40be4f:	call   40ad00 <_start@@Base+0x79d0>
  40be54:	mov    ecx,DWORD PTR [rsp+0x34]
  40be58:	mov    r13,rax
  40be5b:	test   ecx,ecx
  40be5d:	je     40efa6 <_start@@Base+0xbc76>
  40be63:	mov    rdi,QWORD PTR [r15]
  40be66:	mov    esi,0xc
  40be6b:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40be70:	test   rax,rax
  40be73:	je     40ef9e <_start@@Base+0xbc6e>
  40be79:	mov    edx,DWORD PTR [rsp+0x34]
  40be7d:	mov    DWORD PTR [rax],edx
  40be7f:	jmp    40b520 <_start@@Base+0x81f0>
  40be84:	nop    DWORD PTR [rax+0x0]
  40be88:	lea    rbp,[r13+0x8]
  40be8c:	mov    r8,rbx
  40be8f:	sub    r8,rbp
  40be92:	cmp    r8,0x7
  40be96:	ja     40c4d0 <_start@@Base+0x91a0>
  40be9c:	mov    rsi,rbx
  40be9f:	mov    rdi,rbp
  40bea2:	call   403420 <_start@@Base+0xf0>
  40bea7:	movabs rdx,0x7336345f666e7630
  40beb1:	cmp    rax,rdx
  40beb4:	ja     40d2d0 <_start@@Base+0x9fa0>
  40beba:	movabs rdx,0x7333325f666e7631
  40bec4:	cmp    rax,rdx
  40bec7:	jne    40d780 <_start@@Base+0xa450>
  40becd:	cmp    r8,0x8
  40bed1:	jle    40d8c4 <_start@@Base+0xa594>
  40bed7:	mov    ecx,0x8
  40bedc:	mov    rdx,rbx
  40bedf:	mov    rsi,rbp
  40bee2:	mov    rdi,r15
  40bee5:	call   407470 <_start@@Base+0x4140>
  40beea:	mov    r12,rax
  40beed:	cmp    rbp,rax
  40bef0:	je     40d8c4 <_start@@Base+0xa594>
  40bef6:	lea    rbp,[rsp+0x50]
  40befb:	mov    rcx,rbp
  40befe:	mov    rdx,rbx
  40bf01:	mov    rsi,rax
  40bf04:	mov    rdi,r15
  40bf07:	mov    DWORD PTR [rsp+0x50],0x0
  40bf0f:	call   404370 <_start@@Base+0x1040>
  40bf14:	mov    r13,rax
  40bf17:	cmp    rax,r12
  40bf1a:	je     40ede4 <_start@@Base+0xbab4>
  40bf20:	mov    eax,DWORD PTR [rsp+0x50]
  40bf24:	test   eax,eax
  40bf26:	jne    40bf33 <_start@@Base+0x8c03>
  40bf28:	test   BYTE PTR [r15+0x10],0x2
  40bf2d:	je     40b520 <_start@@Base+0x81f0>
  40bf33:	mov    rdi,QWORD PTR [r15]
  40bf36:	mov    ecx,0x4
  40bf3b:	mov    edx,0x4
  40bf40:	mov    esi,0x10
  40bf45:	call   414940 <flatcc_builder_table_add@@Base>
  40bf4a:	test   rax,rax
  40bf4d:	je     40f362 <_start@@Base+0xc032>
  40bf53:	mov    edx,DWORD PTR [rsp+0x50]
  40bf57:	mov    DWORD PTR [rax],edx
  40bf59:	jmp    40b520 <_start@@Base+0x81f0>
  40bf5e:	xchg   ax,ax
  40bf60:	movabs rax,0x766563746f725f6f
  40bf6a:	cmp    rbp,rax
  40bf6d:	jne    40c490 <_start@@Base+0x9160>
  40bf73:	lea    rbp,[r13+0x8]
  40bf77:	mov    r8,rbx
  40bf7a:	sub    r8,rbp
  40bf7d:	cmp    r8,0x7
  40bf81:	ja     40df68 <_start@@Base+0xac38>
  40bf87:	mov    rsi,rbx
  40bf8a:	mov    rdi,rbp
  40bf8d:	call   403420 <_start@@Base+0xf0>
  40bf92:	movabs rdx,0x665f646f75626c65
  40bf9c:	cmp    rax,rdx
  40bf9f:	je     40de1a <_start@@Base+0xaaea>
  40bfa5:	xor    al,al
  40bfa7:	movabs rdx,0x665f6c6f6e677300
  40bfb1:	cmp    rax,rdx
  40bfb4:	jne    40d840 <_start@@Base+0xa510>
  40bfba:	cmp    r8,0x7
  40bfbe:	jle    40e638 <_start@@Base+0xb308>
  40bfc4:	mov    ecx,0x7
  40bfc9:	mov    rdx,rbx
  40bfcc:	mov    rsi,rbp
  40bfcf:	mov    rdi,r15
  40bfd2:	call   407470 <_start@@Base+0x4140>
  40bfd7:	mov    r13,rax
  40bfda:	cmp    rbp,rax
  40bfdd:	je     40e638 <_start@@Base+0xb308>
  40bfe3:	mov    rdi,QWORD PTR [r15]
  40bfe6:	mov    ecx,0x1fffffff
  40bfeb:	mov    edx,0x8
  40bff0:	mov    esi,0x8
  40bff5:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40bffa:	test   eax,eax
  40bffc:	jne    40f2d8 <_start@@Base+0xbfa8>
  40c002:	mov    rsi,r13
  40c005:	mov    rcx,r14
  40c008:	mov    rdx,rbx
  40c00b:	mov    rdi,r15
  40c00e:	call   40ac40 <_start@@Base+0x7910>
  40c013:	mov    esi,DWORD PTR [rsp+0x30]
  40c017:	mov    r13,rax
  40c01a:	test   esi,esi
  40c01c:	je     40ecab <_start@@Base+0xb97b>
  40c022:	lea    rbp,[rsp+0x50]
  40c027:	jmp    40c059 <_start@@Base+0x8d29>
  40c029:	nop    DWORD PTR [rax+0x0]
  40c030:	mov    rdx,QWORD PTR [rsp+0x50]
  40c035:	mov    rcx,r14
  40c038:	mov    QWORD PTR [r12],rdx
  40c03c:	mov    rsi,rax
  40c03f:	mov    rdx,rbx
  40c042:	mov    rdi,r15
  40c045:	call   406740 <_start@@Base+0x3410>
  40c04a:	mov    ecx,DWORD PTR [rsp+0x30]
  40c04e:	mov    r13,rax
  40c051:	test   ecx,ecx
  40c053:	je     40ecab <_start@@Base+0xb97b>
  40c059:	mov    rdi,QWORD PTR [r15]
  40c05c:	mov    esi,0x1
  40c061:	mov    QWORD PTR [rsp+0x50],0x0
  40c06a:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40c06f:	mov    r12,rax
  40c072:	test   rax,rax
  40c075:	je     40eca3 <_start@@Base+0xb973>
  40c07b:	mov    rcx,rbp
  40c07e:	mov    rdx,rbx
  40c081:	mov    rsi,r13
  40c084:	mov    rdi,r15
  40c087:	call   4040e0 <_start@@Base+0xdb0>
  40c08c:	cmp    rax,r13
  40c08f:	jne    40c030 <_start@@Base+0x8d00>
  40c091:	mov    r8,rbp
  40c094:	lea    rcx,[rip+0x15485]        # 421520 <__data_start@@Base+0x460>
  40c09b:	mov    rdx,rbx
  40c09e:	mov    rsi,r13
  40c0a1:	mov    rdi,r15
  40c0a4:	call   405310 <_start@@Base+0x1fe0>
  40c0a9:	cmp    rax,r13
  40c0ac:	je     40c0b7 <_start@@Base+0x8d87>
  40c0ae:	cmp    rbx,rax
  40c0b1:	jne    40c030 <_start@@Base+0x8d00>
  40c0b7:	mov    r14,rax
  40c0ba:	jmp    40ad43 <_start@@Base+0x7a13>
  40c0bf:	nop
  40c0c0:	xor    bp,bp
  40c0c3:	movabs rax,0x7465737466320000
  40c0cd:	cmp    rbp,rax
  40c0d0:	je     40c640 <_start@@Base+0x9310>
  40c0d6:	cmp    r12,0x5
  40c0da:	jle    40dd6f <_start@@Base+0xaa3f>
  40c0e0:	mov    ecx,0x5
  40c0e5:	mov    rdx,rbx
  40c0e8:	mov    rsi,r13
  40c0eb:	mov    rdi,r15
  40c0ee:	call   407470 <_start@@Base+0x4140>
  40c0f3:	mov    rbp,rax
  40c0f6:	cmp    r13,rax
  40c0f9:	je     40dd6f <_start@@Base+0xaa3f>
  40c0ff:	lea    r12,[rsp+0x50]
  40c104:	mov    rcx,r12
  40c107:	mov    rdx,rbx
  40c10a:	mov    rsi,rax
  40c10d:	mov    rdi,r15
  40c110:	mov    DWORD PTR [rsp+0x50],0x0
  40c118:	call   417710 <flatcc_json_parser_float@@Base>
  40c11d:	mov    r13,rax
  40c120:	cmp    rax,rbp
  40c123:	je     40e6e3 <_start@@Base+0xb3b3>
  40c129:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40c12f:	vucomiss xmm0,DWORD PTR [rip+0xe34d]        # 41a484 <_IO_stdin_used@@Base+0x484>
  40c137:	jp     40c146 <_start@@Base+0x8e16>
  40c139:	jne    40c146 <_start@@Base+0x8e16>
  40c13b:	test   BYTE PTR [r15+0x10],0x2
  40c140:	je     40b520 <_start@@Base+0x81f0>
  40c146:	mov    rdi,QWORD PTR [r15]
  40c149:	mov    ecx,0x4
  40c14e:	mov    edx,0x4
  40c153:	mov    esi,0x19
  40c158:	call   414940 <flatcc_builder_table_add@@Base>
  40c15d:	test   rax,rax
  40c160:	je     40f2a0 <_start@@Base+0xbf70>
  40c166:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40c16c:	vmovss DWORD PTR [rax],xmm0
  40c170:	jmp    40b520 <_start@@Base+0x81f0>
  40c175:	nop    DWORD PTR [rax]
  40c178:	movabs rax,0x696e76656e746f72
  40c182:	cmp    rbp,rax
  40c185:	je     40d550 <_start@@Base+0xa220>
  40c18b:	movabs rax,0xffffffff00000000
  40c195:	and    rbp,rax
  40c198:	movabs rax,0x6d616e6100000000
  40c1a2:	cmp    rbp,rax
  40c1a5:	jne    40dd03 <_start@@Base+0xa9d3>
  40c1ab:	cmp    r12,0x4
  40c1af:	jle    40d9c0 <_start@@Base+0xa690>
  40c1b5:	mov    ecx,0x4
  40c1ba:	mov    rdx,rbx
  40c1bd:	mov    rsi,r13
  40c1c0:	mov    rdi,r15
  40c1c3:	call   407470 <_start@@Base+0x4140>
  40c1c8:	mov    rbp,rax
  40c1cb:	cmp    r13,rax
  40c1ce:	je     40d9c0 <_start@@Base+0xa690>
  40c1d4:	lea    r12,[rsp+0x50]
  40c1d9:	xor    r10d,r10d
  40c1dc:	mov    rcx,r12
  40c1df:	mov    rdx,rbx
  40c1e2:	mov    rsi,rax
  40c1e5:	mov    rdi,r15
  40c1e8:	mov    WORD PTR [rsp+0x50],r10w
  40c1ee:	call   404460 <_start@@Base+0x1130>
  40c1f3:	mov    r13,rax
  40c1f6:	cmp    rax,rbp
  40c1f9:	je     40ece0 <_start@@Base+0xb9b0>
  40c1ff:	cmp    WORD PTR [rsp+0x50],0x96
  40c206:	jne    40c213 <_start@@Base+0x8ee3>
  40c208:	test   BYTE PTR [r15+0x10],0x2
  40c20d:	je     40b520 <_start@@Base+0x81f0>
  40c213:	mov    rdi,QWORD PTR [r15]
  40c216:	mov    ecx,0x2
  40c21b:	mov    edx,0x2
  40c220:	mov    esi,0x1
  40c225:	call   414940 <flatcc_builder_table_add@@Base>
  40c22a:	test   rax,rax
  40c22d:	je     40f3b6 <_start@@Base+0xc086>
  40c233:	movzx  edx,WORD PTR [rsp+0x50]
  40c238:	mov    WORD PTR [rax],dx
  40c23b:	jmp    40b520 <_start@@Base+0x81f0>
  40c240:	mov    rsi,r13
  40c243:	mov    rdx,rbx
  40c246:	mov    rdi,r15
  40c249:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c24e:	mov    r13,rax
  40c251:	jmp    40b520 <_start@@Base+0x81f0>
  40c256:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c260:	mov    rsi,r13
  40c263:	mov    rdx,rbx
  40c266:	mov    rdi,r15
  40c269:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c26e:	mov    r13,rax
  40c271:	jmp    40b520 <_start@@Base+0x81f0>
  40c276:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c280:	mov    rsi,r13
  40c283:	mov    rdx,rbx
  40c286:	mov    rdi,r15
  40c289:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c28e:	mov    r13,rax
  40c291:	jmp    40b520 <_start@@Base+0x81f0>
  40c296:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c2a0:	cmp    r8,0x8
  40c2a4:	jle    40c770 <_start@@Base+0x9440>
  40c2aa:	mov    ecx,0x8
  40c2af:	mov    rdx,rbx
  40c2b2:	mov    rsi,rbp
  40c2b5:	mov    rdi,r15
  40c2b8:	call   407470 <_start@@Base+0x4140>
  40c2bd:	mov    r13,rax
  40c2c0:	cmp    rbp,rax
  40c2c3:	je     40c770 <_start@@Base+0x9440>
  40c2c9:	mov    rdi,QWORD PTR [r15]
  40c2cc:	mov    ecx,0xffffffff
  40c2d1:	mov    edx,0x1
  40c2d6:	mov    esi,0x1
  40c2db:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40c2e0:	test   eax,eax
  40c2e2:	jne    40f2c8 <_start@@Base+0xbf98>
  40c2e8:	mov    rsi,r13
  40c2eb:	mov    rcx,r14
  40c2ee:	mov    rdx,rbx
  40c2f1:	mov    rdi,r15
  40c2f4:	call   40ac40 <_start@@Base+0x7910>
  40c2f9:	mov    r13,rax
  40c2fc:	mov    eax,DWORD PTR [rsp+0x30]
  40c300:	test   eax,eax
  40c302:	je     40e57a <_start@@Base+0xb24a>
  40c308:	lea    rax,[rsp+0x50]
  40c30d:	mov    QWORD PTR [rsp],rax
  40c311:	lea    rax,[rsp+0x48]
  40c316:	mov    QWORD PTR [rsp+0x8],rax
  40c31b:	lea    rax,[rsp+0x3c]
  40c320:	mov    QWORD PTR [rsp+0x18],rax
  40c325:	jmp    40c359 <_start@@Base+0x9029>
  40c327:	nop    WORD PTR [rax+rax*1+0x0]
  40c330:	movzx  eax,BYTE PTR [rsp+0x3c]
  40c335:	mov    rcx,r14
  40c338:	mov    BYTE PTR [r12],al
  40c33c:	mov    rdx,rbx
  40c33f:	mov    rsi,rbp
  40c342:	mov    rdi,r15
  40c345:	call   406740 <_start@@Base+0x3410>
  40c34a:	mov    r13,rax
  40c34d:	mov    eax,DWORD PTR [rsp+0x30]
  40c351:	test   eax,eax
  40c353:	je     40e57a <_start@@Base+0xb24a>
  40c359:	mov    rdi,QWORD PTR [r15]
  40c35c:	mov    esi,0x1
  40c361:	mov    BYTE PTR [rsp+0x3c],0x0
  40c366:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40c36b:	mov    r12,rax
  40c36e:	test   rax,rax
  40c371:	je     40e61b <_start@@Base+0xb2eb>
  40c377:	mov    rax,rbx
  40c37a:	sub    rax,r13
  40c37d:	cmp    rax,0x3
  40c381:	jle    40c3a5 <_start@@Base+0x9075>
  40c383:	cmp    DWORD PTR [r13+0x0],0x65757274
  40c38b:	je     40dc78 <_start@@Base+0xa948>
  40c391:	cmp    rax,0x4
  40c395:	je     40c3a5 <_start@@Base+0x9075>
  40c397:	cmp    DWORD PTR [r13+0x0],0x736c6166
  40c39f:	je     40dc58 <_start@@Base+0xa928>
  40c3a5:	mov    QWORD PTR [rsp+0x50],0x0
  40c3ae:	mov    DWORD PTR [rsp+0x48],0x0
  40c3b6:	cmp    rbx,r13
  40c3b9:	je     40dba8 <_start@@Base+0xa878>
  40c3bf:	mov    r8,QWORD PTR [rsp]
  40c3c3:	mov    rcx,QWORD PTR [rsp+0x8]
  40c3c8:	mov    rdx,rbx
  40c3cb:	mov    rsi,r13
  40c3ce:	mov    rdi,r15
  40c3d1:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40c3d6:	mov    rbp,rax
  40c3d9:	cmp    rax,r13
  40c3dc:	jne    40dc90 <_start@@Base+0xa960>
  40c3e2:	mov    rbp,r13
  40c3e5:	xor    eax,eax
  40c3e7:	mov    BYTE PTR [rsp+0x3c],al
  40c3eb:	cmp    rbp,r13
  40c3ee:	jne    40c330 <_start@@Base+0x9000>
  40c3f4:	mov    r8,QWORD PTR [rsp+0x18]
  40c3f9:	lea    rcx,[rip+0x15300]        # 421700 <__data_start@@Base+0x640>
  40c400:	mov    rdx,rbx
  40c403:	mov    rsi,rbp
  40c406:	mov    rdi,r15
  40c409:	call   404c00 <_start@@Base+0x18d0>
  40c40e:	cmp    rax,rbp
  40c411:	je     40efc1 <_start@@Base+0xbc91>
  40c417:	cmp    rbx,rax
  40c41a:	je     40efb9 <_start@@Base+0xbc89>
  40c420:	mov    rbp,rax
  40c423:	jmp    40c330 <_start@@Base+0x9000>
  40c428:	nop    DWORD PTR [rax+rax*1+0x0]
  40c430:	mov    rsi,r13
  40c433:	mov    rdx,rbx
  40c436:	mov    rdi,r15
  40c439:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c43e:	mov    r13,rax
  40c441:	jmp    40b520 <_start@@Base+0x81f0>
  40c446:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c450:	mov    rsi,r13
  40c453:	mov    rdx,rbx
  40c456:	mov    rdi,r15
  40c459:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c45e:	mov    r13,rax
  40c461:	jmp    40b520 <_start@@Base+0x81f0>
  40c466:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c470:	mov    rsi,r13
  40c473:	mov    rdx,rbx
  40c476:	mov    rdi,r15
  40c479:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c47e:	mov    r13,rax
  40c481:	jmp    40b520 <_start@@Base+0x81f0>
  40c486:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c490:	mov    rsi,r13
  40c493:	mov    rdx,rbx
  40c496:	mov    rdi,r15
  40c499:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c49e:	mov    r13,rax
  40c4a1:	jmp    40b520 <_start@@Base+0x81f0>
  40c4a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c4b0:	mov    rsi,r13
  40c4b3:	mov    rdx,rbx
  40c4b6:	mov    rdi,r15
  40c4b9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c4be:	mov    r13,rax
  40c4c1:	jmp    40b520 <_start@@Base+0x81f0>
  40c4c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c4d0:	movbe  rax,QWORD PTR [r13+0x8]
  40c4d6:	jmp    40bea7 <_start@@Base+0x8b77>
  40c4db:	nop    DWORD PTR [rax+rax*1+0x0]
  40c4e0:	mov    rsi,r13
  40c4e3:	mov    rdx,rbx
  40c4e6:	mov    rdi,r15
  40c4e9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c4ee:	mov    r13,rax
  40c4f1:	jmp    40b520 <_start@@Base+0x81f0>
  40c4f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c500:	lea    rbp,[r13+0x10]
  40c504:	mov    r8,rbx
  40c507:	sub    r8,rbp
  40c50a:	cmp    r8,0x7
  40c50e:	ja     40d877 <_start@@Base+0xa547>
  40c514:	mov    rsi,rbx
  40c517:	mov    rdi,rbp
  40c51a:	call   403420 <_start@@Base+0xf0>
  40c51f:	movabs rdx,0xffff000000000000
  40c529:	and    rdx,rax
  40c52c:	movabs rcx,0x6732000000000000
  40c536:	cmp    rdx,rcx
  40c539:	je     40e49e <_start@@Base+0xb16e>
  40c53f:	movabs rdx,0xff00000000000000
  40c549:	and    rax,rdx
  40c54c:	movabs rdx,0x6700000000000000
  40c556:	cmp    rax,rdx
  40c559:	jne    40e564 <_start@@Base+0xb234>
  40c55f:	cmp    r8,0x1
  40c563:	jle    40e7db <_start@@Base+0xb4ab>
  40c569:	mov    ecx,0x1
  40c56e:	mov    rdx,rbx
  40c571:	mov    rsi,rbp
  40c574:	mov    rdi,r15
  40c577:	call   407470 <_start@@Base+0x4140>
  40c57c:	mov    r13,rax
  40c57f:	cmp    rbp,rax
  40c582:	je     40e7db <_start@@Base+0xb4ab>
  40c588:	mov    rdi,QWORD PTR [r15]
  40c58b:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  40c590:	test   eax,eax
  40c592:	jne    40f46b <_start@@Base+0xc13b>
  40c598:	mov    rsi,r13
  40c59b:	mov    rdi,r15
  40c59e:	mov    rcx,r14
  40c5a1:	mov    rdx,rbx
  40c5a4:	call   40ac40 <_start@@Base+0x7910>
  40c5a9:	mov    edi,DWORD PTR [rsp+0x30]
  40c5ad:	mov    r13,rax
  40c5b0:	test   edi,edi
  40c5b2:	je     40eef6 <_start@@Base+0xbbc6>
  40c5b8:	lea    rbp,[rsp+0x34]
  40c5bd:	jmp    40c5fc <_start@@Base+0x92cc>
  40c5bf:	nop
  40c5c0:	mov    rdi,QWORD PTR [r15]
  40c5c3:	mov    esi,0x1
  40c5c8:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  40c5cd:	test   rax,rax
  40c5d0:	je     40ef83 <_start@@Base+0xbc53>
  40c5d6:	mov    edx,DWORD PTR [rsp+0x34]
  40c5da:	mov    rcx,r14
  40c5dd:	mov    DWORD PTR [rax],edx
  40c5df:	mov    rsi,r13
  40c5e2:	mov    rdx,rbx
  40c5e5:	mov    rdi,r15
  40c5e8:	call   406740 <_start@@Base+0x3410>
  40c5ed:	mov    ecx,DWORD PTR [rsp+0x30]
  40c5f1:	mov    r13,rax
  40c5f4:	test   ecx,ecx
  40c5f6:	je     40eef6 <_start@@Base+0xbbc6>
  40c5fc:	mov    rsi,r13
  40c5ff:	mov    rcx,rbp
  40c602:	mov    rdx,rbx
  40c605:	mov    rdi,r15
  40c608:	call   418a60 <flatcc_json_parser_build_string@@Base>
  40c60d:	mov    esi,DWORD PTR [rsp+0x34]
  40c611:	mov    r13,rax
  40c614:	test   esi,esi
  40c616:	jne    40c5c0 <_start@@Base+0x9290>
  40c618:	mov    r14,rax
  40c61b:	jmp    40ad43 <_start@@Base+0x7a13>
  40c620:	mov    rsi,r13
  40c623:	mov    rdx,rbx
  40c626:	mov    rdi,r15
  40c629:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c62e:	mov    r13,rax
  40c631:	jmp    40b520 <_start@@Base+0x81f0>
  40c636:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c640:	cmp    r12,0x6
  40c644:	jle    40d898 <_start@@Base+0xa568>
  40c64a:	mov    ecx,0x6
  40c64f:	mov    rdx,rbx
  40c652:	mov    rsi,r13
  40c655:	mov    rdi,r15
  40c658:	call   407470 <_start@@Base+0x4140>
  40c65d:	mov    rbp,rax
  40c660:	cmp    r13,rax
  40c663:	je     40d898 <_start@@Base+0xa568>
  40c669:	lea    r12,[rsp+0x50]
  40c66e:	mov    rcx,r12
  40c671:	mov    rdx,rbx
  40c674:	mov    rsi,rax
  40c677:	mov    rdi,r15
  40c67a:	mov    DWORD PTR [rsp+0x50],0x0
  40c682:	call   417710 <flatcc_json_parser_float@@Base>
  40c687:	mov    r13,rax
  40c68a:	cmp    rax,rbp
  40c68d:	je     40ea59 <_start@@Base+0xb729>
  40c693:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40c699:	vucomiss xmm0,DWORD PTR [rip+0xdddf]        # 41a480 <_IO_stdin_used@@Base+0x480>
  40c6a1:	jp     40c6b0 <_start@@Base+0x9380>
  40c6a3:	jne    40c6b0 <_start@@Base+0x9380>
  40c6a5:	test   BYTE PTR [r15+0x10],0x2
  40c6aa:	je     40b520 <_start@@Base+0x81f0>
  40c6b0:	mov    rdi,QWORD PTR [r15]
  40c6b3:	mov    ecx,0x4
  40c6b8:	mov    edx,0x4
  40c6bd:	mov    esi,0x1a
  40c6c2:	call   414940 <flatcc_builder_table_add@@Base>
  40c6c7:	test   rax,rax
  40c6ca:	je     40f2d0 <_start@@Base+0xbfa0>
  40c6d0:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40c6d6:	vmovss DWORD PTR [rax],xmm0
  40c6da:	jmp    40b520 <_start@@Base+0x81f0>
  40c6df:	nop
  40c6e0:	mov    QWORD PTR [rsp+0x50],0x0
  40c6e9:	mov    DWORD PTR [rsp+0x48],0x0
  40c6f1:	mov    r12,rbx
  40c6f4:	cmp    rbx,rbp
  40c6f7:	je     40c722 <_start@@Base+0x93f2>
  40c6f9:	lea    rcx,[rsp+0x48]
  40c6fe:	lea    r8,[rsp+0x50]
  40c703:	mov    rdx,rbx
  40c706:	mov    rsi,rbp
  40c709:	mov    rdi,r15
  40c70c:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40c711:	mov    r12,rax
  40c714:	cmp    rbp,rax
  40c717:	jne    40e73e <_start@@Base+0xb40e>
  40c71d:	mov    BYTE PTR [rsp+0x3c],0x0
  40c722:	lea    r8,[rsp+0x3c]
  40c727:	lea    rcx,[rip+0x14fb2]        # 4216e0 <__data_start@@Base+0x620>
  40c72e:	mov    rdx,rbx
  40c731:	mov    rsi,r12
  40c734:	mov    rdi,r15
  40c737:	call   404c00 <_start@@Base+0x18d0>
  40c73c:	mov    r13,rax
  40c73f:	cmp    rax,r12
  40c742:	je     40f44b <_start@@Base+0xc11b>
  40c748:	cmp    rbx,rax
  40c74b:	je     40f443 <_start@@Base+0xc113>
  40c751:	movzx  eax,BYTE PTR [rsp+0x3c]
  40c756:	cmp    al,0x1
  40c758:	jne    40b027 <_start@@Base+0x7cf7>
  40c75e:	test   BYTE PTR [r15+0x10],0x2
  40c763:	je     40b520 <_start@@Base+0x81f0>
  40c769:	jmp    40b027 <_start@@Base+0x7cf7>
  40c76e:	xchg   ax,ax
  40c770:	mov    rdx,rbx
  40c773:	mov    rsi,rbp
  40c776:	mov    rdi,r15
  40c779:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c77e:	mov    r13,rax
  40c781:	jmp    40b520 <_start@@Base+0x81f0>
  40c786:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c790:	movabs rdi,0x77ffffffffffffff
  40c79a:	cmp    rax,rdi
  40c79d:	ja     40c940 <_start@@Base+0x9610>
  40c7a3:	and    rax,0xffffffffff000000
  40c7a9:	movabs rdx,0x7465737433000000
  40c7b3:	cmp    rax,rdx
  40c7b6:	jne    40c7e0 <_start@@Base+0x94b0>
  40c7b8:	cmp    rsi,0x5
  40c7bc:	jle    40c7e0 <_start@@Base+0x94b0>
  40c7be:	mov    edx,DWORD PTR [r15+0x14]
  40c7c2:	movzx  eax,BYTE PTR [r12+0x5]
  40c7c8:	test   edx,edx
  40c7ca:	je     40d0d0 <_start@@Base+0x9da0>
  40c7d0:	cmp    al,0x20
  40c7d2:	jle    40c800 <_start@@Base+0x94d0>
  40c7d4:	cmp    al,0x3a
  40c7d6:	je     40c800 <_start@@Base+0x94d0>
  40c7d8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c7e0:	mov    rdx,rbx
  40c7e3:	mov    rsi,r12
  40c7e6:	mov    rdi,r15
  40c7e9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c7ee:	mov    r13,rax
  40c7f1:	jmp    40bb28 <_start@@Base+0x87f8>
  40c7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c800:	mov    DWORD PTR [r15+0x14],0x0
  40c808:	lea    rsi,[r12+0x5]
  40c80d:	mov    rax,rbx
  40c810:	sub    rax,rsi
  40c813:	cmp    rax,0x1
  40c817:	jle    40c824 <_start@@Base+0x94f4>
  40c819:	cmp    BYTE PTR [rsi],0x20
  40c81c:	jg     40c832 <_start@@Base+0x9502>
  40c81e:	je     40e422 <_start@@Base+0xb0f2>
  40c824:	mov    rdx,rbx
  40c827:	mov    rdi,r15
  40c82a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40c82f:	mov    rsi,rax
  40c832:	cmp    rbx,rsi
  40c835:	je     40c840 <_start@@Base+0x9510>
  40c837:	cmp    BYTE PTR [rsi],0x3a
  40c83a:	je     40e773 <_start@@Base+0xb443>
  40c840:	mov    ecx,0x4
  40c845:	mov    rdx,rbx
  40c848:	mov    rdi,r15
  40c84b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40c850:	mov    rsi,rax
  40c853:	cmp    rsi,r12
  40c856:	je     40c7e0 <_start@@Base+0x94b0>
  40c858:	mov    rax,QWORD PTR [rsp]
  40c85c:	mov    rdx,rbx
  40c85f:	lea    rcx,[rax+0x1a]
  40c863:	mov    rdi,r15
  40c866:	call   406890 <_start@@Base+0x3560>
  40c86b:	mov    r13,rax
  40c86e:	jmp    40bb28 <_start@@Base+0x87f8>
  40c873:	nop    DWORD PTR [rax+rax*1+0x0]
  40c878:	lea    rdx,[rip+0xd8b5]        # 41a134 <_IO_stdin_used@@Base+0x134>
  40c87f:	movsxd rax,DWORD PTR [rdx+rsi*4]
  40c883:	add    rax,rdx
  40c886:	notrack jmp rax
  40c889:	nop    DWORD PTR [rax+0x0]
  40c890:	movsx  rcx,BYTE PTR [r12+0x6]
  40c896:	shl    rcx,0x8
  40c89a:	movsx  rdx,BYTE PTR [r12+0x5]
  40c8a0:	mov    rax,rdx
  40c8a3:	shl    rax,0x10
  40c8a7:	or     rcx,rax
  40c8aa:	movsx  rdx,BYTE PTR [r12+0x4]
  40c8b0:	mov    rax,rdx
  40c8b3:	shl    rax,0x18
  40c8b7:	or     rax,rcx
  40c8ba:	movsx  rdx,BYTE PTR [r12+0x3]
  40c8c0:	mov    rcx,rdx
  40c8c3:	shl    rcx,0x20
  40c8c7:	or     rax,rcx
  40c8ca:	movsx  rdx,BYTE PTR [r12+0x2]
  40c8d0:	mov    rcx,rdx
  40c8d3:	shl    rcx,0x28
  40c8d7:	or     rcx,rax
  40c8da:	movsx  rdx,BYTE PTR [r12+0x1]
  40c8e0:	mov    rax,rdx
  40c8e3:	shl    rax,0x30
  40c8e7:	or     rcx,rax
  40c8ea:	movsx  rdx,BYTE PTR [r12]
  40c8ef:	mov    rax,rdx
  40c8f2:	shl    rax,0x38
  40c8f6:	or     rax,rcx
  40c8f9:	jmp    40ba28 <_start@@Base+0x86f8>
  40c8fe:	xchg   ax,ax
  40c900:	xor    ecx,ecx
  40c902:	jmp    40c89a <_start@@Base+0x956a>
  40c904:	nop    DWORD PTR [rax+0x0]
  40c908:	xor    ecx,ecx
  40c90a:	jmp    40c8aa <_start@@Base+0x957a>
  40c90c:	nop    DWORD PTR [rax+0x0]
  40c910:	xor    eax,eax
  40c912:	jmp    40c8ba <_start@@Base+0x958a>
  40c914:	nop    DWORD PTR [rax+0x0]
  40c918:	xor    eax,eax
  40c91a:	jmp    40c8ca <_start@@Base+0x959a>
  40c91c:	nop    DWORD PTR [rax+0x0]
  40c920:	xor    ecx,ecx
  40c922:	jmp    40c8da <_start@@Base+0x95aa>
  40c924:	nop    DWORD PTR [rax+0x0]
  40c928:	xor    ecx,ecx
  40c92a:	jmp    40c8ea <_start@@Base+0x95ba>
  40c92c:	nop    DWORD PTR [rax+0x0]
  40c930:	inc    r12
  40c933:	mov    DWORD PTR [r15+0x14],0x0
  40c93b:	jmp    40ba12 <_start@@Base+0x86e2>
  40c940:	movabs rdi,0x78ffffffffffffff
  40c94a:	cmp    rax,rdi
  40c94d:	ja     40cbe0 <_start@@Base+0x98b0>
  40c953:	cmp    rsi,0x1
  40c957:	jle    40c7e0 <_start@@Base+0x94b0>
  40c95d:	mov    r13d,DWORD PTR [r15+0x14]
  40c961:	movzx  eax,BYTE PTR [r12+0x1]
  40c967:	test   r13d,r13d
  40c96a:	je     40d0e8 <_start@@Base+0x9db8>
  40c970:	cmp    al,0x20
  40c972:	jle    40c97c <_start@@Base+0x964c>
  40c974:	cmp    al,0x3a
  40c976:	jne    40c7e0 <_start@@Base+0x94b0>
  40c97c:	mov    DWORD PTR [r15+0x14],0x0
  40c984:	lea    rsi,[r12+0x1]
  40c989:	mov    rax,rbx
  40c98c:	sub    rax,rsi
  40c98f:	cmp    rax,0x1
  40c993:	jle    40c9a0 <_start@@Base+0x9670>
  40c995:	cmp    BYTE PTR [rsi],0x20
  40c998:	jg     40c9ae <_start@@Base+0x967e>
  40c99a:	je     40e44a <_start@@Base+0xb11a>
  40c9a0:	mov    rdx,rbx
  40c9a3:	mov    rdi,r15
  40c9a6:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40c9ab:	mov    rsi,rax
  40c9ae:	cmp    rbx,rsi
  40c9b1:	je     40c9bc <_start@@Base+0x968c>
  40c9b3:	cmp    BYTE PTR [rsi],0x3a
  40c9b6:	je     40e789 <_start@@Base+0xb459>
  40c9bc:	mov    ecx,0x4
  40c9c1:	mov    rdx,rbx
  40c9c4:	mov    rdi,r15
  40c9c7:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40c9cc:	mov    r9,rax
  40c9cf:	cmp    r9,r12
  40c9d2:	je     40c7e0 <_start@@Base+0x94b0>
  40c9d8:	lea    r12,[rsp+0x50]
  40c9dd:	mov    rsi,r9
  40c9e0:	mov    rcx,r12
  40c9e3:	mov    rdx,rbx
  40c9e6:	mov    rdi,r15
  40c9e9:	mov    QWORD PTR [rsp+0x8],r9
  40c9ee:	mov    DWORD PTR [rsp+0x50],0x0
  40c9f6:	call   417710 <flatcc_json_parser_float@@Base>
  40c9fb:	mov    r9,QWORD PTR [rsp+0x8]
  40ca00:	mov    r13,rax
  40ca03:	cmp    r9,rax
  40ca06:	je     40dcd1 <_start@@Base+0xa9a1>
  40ca0c:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40ca12:	mov    rax,QWORD PTR [rsp]
  40ca16:	vmovss DWORD PTR [rax],xmm0
  40ca1a:	jmp    40bb28 <_start@@Base+0x87f8>
  40ca1f:	nop
  40ca20:	lea    rsi,[r13+0x1]
  40ca24:	mov    rax,rbx
  40ca27:	sub    rax,rsi
  40ca2a:	cmp    rax,0x1
  40ca2e:	jle    40ca41 <_start@@Base+0x9711>
  40ca30:	cmp    BYTE PTR [r13+0x1],0x20
  40ca35:	jg     40cd90 <_start@@Base+0x9a60>
  40ca3b:	je     40d100 <_start@@Base+0x9dd0>
  40ca41:	mov    rdx,rbx
  40ca44:	mov    rdi,r15
  40ca47:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40ca4c:	mov    r12,rax
  40ca4f:	mov    eax,DWORD PTR [rsp+0x3c]
  40ca53:	jmp    40b9e8 <_start@@Base+0x86b8>
  40ca58:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca60:	cmp    rsi,0x5
  40ca64:	jle    40c7e0 <_start@@Base+0x94b0>
  40ca6a:	mov    edi,DWORD PTR [r15+0x14]
  40ca6e:	movzx  eax,BYTE PTR [r12+0x5]
  40ca74:	test   edi,edi
  40ca76:	je     40cda0 <_start@@Base+0x9a70>
  40ca7c:	cmp    al,0x20
  40ca7e:	jle    40ca88 <_start@@Base+0x9758>
  40ca80:	cmp    al,0x3a
  40ca82:	jne    40c7e0 <_start@@Base+0x94b0>
  40ca88:	mov    DWORD PTR [r15+0x14],0x0
  40ca90:	lea    rsi,[r12+0x5]
  40ca95:	mov    rax,rbx
  40ca98:	sub    rax,rsi
  40ca9b:	cmp    rax,0x1
  40ca9f:	jle    40caac <_start@@Base+0x977c>
  40caa1:	cmp    BYTE PTR [rsi],0x20
  40caa4:	jg     40caba <_start@@Base+0x978a>
  40caa6:	je     40de08 <_start@@Base+0xaad8>
  40caac:	mov    rdx,rbx
  40caaf:	mov    rdi,r15
  40cab2:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40cab7:	mov    rsi,rax
  40caba:	cmp    rbx,rsi
  40cabd:	je     40cac8 <_start@@Base+0x9798>
  40cabf:	cmp    BYTE PTR [rsi],0x3a
  40cac2:	je     40e5e5 <_start@@Base+0xb2b5>
  40cac8:	mov    ecx,0x4
  40cacd:	mov    rdx,rbx
  40cad0:	mov    rdi,r15
  40cad3:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40cad8:	mov    r9,rax
  40cadb:	cmp    r9,r12
  40cade:	je     40c7e0 <_start@@Base+0x94b0>
  40cae4:	mov    BYTE PTR [rsp+0x38],0x0
  40cae9:	mov    QWORD PTR [rsp+0x50],0x0
  40caf2:	mov    DWORD PTR [rsp+0x48],0x0
  40cafa:	cmp    rbx,r9
  40cafd:	je     40d118 <_start@@Base+0x9de8>
  40cb03:	mov    rsi,r9
  40cb06:	lea    rcx,[rsp+0x48]
  40cb0b:	lea    r8,[rsp+0x50]
  40cb10:	mov    rdx,rbx
  40cb13:	mov    rdi,r15
  40cb16:	mov    QWORD PTR [rsp+0x8],r9
  40cb1b:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40cb20:	mov    r9,QWORD PTR [rsp+0x8]
  40cb25:	mov    r13,rax
  40cb28:	cmp    r9,rax
  40cb2b:	jne    40d390 <_start@@Base+0xa060>
  40cb31:	lea    r8,[rsp+0x38]
  40cb36:	lea    rcx,[rip+0x146e3]        # 421220 <__data_start@@Base+0x160>
  40cb3d:	mov    rdx,rbx
  40cb40:	mov    rsi,r13
  40cb43:	mov    rdi,r15
  40cb46:	call   405a70 <_start@@Base+0x2740>
  40cb4b:	cmp    rax,r13
  40cb4e:	je     40ee3e <_start@@Base+0xbb0e>
  40cb54:	cmp    rbx,rax
  40cb57:	je     40ee3e <_start@@Base+0xbb0e>
  40cb5d:	movzx  edx,BYTE PTR [rsp+0x38]
  40cb62:	mov    r13,rax
  40cb65:	nop    DWORD PTR [rax]
  40cb68:	mov    rax,QWORD PTR [rsp]
  40cb6c:	mov    BYTE PTR [rax+0x18],dl
  40cb6f:	jmp    40bb28 <_start@@Base+0x87f8>
  40cb74:	nop    DWORD PTR [rax+0x0]
  40cb78:	cmp    BYTE PTR [r13+0x1],0x20
  40cb7d:	jle    40bb41 <_start@@Base+0x8811>
  40cb83:	inc    r13
  40cb86:	jmp    40bb52 <_start@@Base+0x8822>
  40cb8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40cb90:	lea    r12,[r13+0x1]
  40cb94:	mov    rax,rbx
  40cb97:	sub    rax,r12
  40cb9a:	cmp    rax,0x1
  40cb9e:	jle    40cbad <_start@@Base+0x987d>
  40cba0:	cmp    BYTE PTR [r13+0x1],0x20
  40cba5:	jg     40cbbe <_start@@Base+0x988e>
  40cba7:	je     40d3e0 <_start@@Base+0xa0b0>
  40cbad:	mov    rsi,r12
  40cbb0:	mov    rdx,rbx
  40cbb3:	mov    rdi,r15
  40cbb6:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40cbbb:	mov    r12,rax
  40cbbe:	cmp    rbx,r12
  40cbc1:	je     40d508 <_start@@Base+0xa1d8>
  40cbc7:	cmp    BYTE PTR [r12],0x7d
  40cbcc:	je     40d4c0 <_start@@Base+0xa190>
  40cbd2:	mov    DWORD PTR [rsp+0x3c],0x1
  40cbda:	jmp    40b9f0 <_start@@Base+0x86c0>
  40cbdf:	nop
  40cbe0:	movabs rdi,0xff00000000000000
  40cbea:	and    rax,rdi
  40cbed:	movabs rdx,0x7a00000000000000
  40cbf7:	cmp    rax,rdx
  40cbfa:	je     40cde0 <_start@@Base+0x9ab0>
  40cc00:	movabs rdx,0x7900000000000000
  40cc0a:	cmp    rax,rdx
  40cc0d:	jne    40c7e0 <_start@@Base+0x94b0>
  40cc13:	cmp    rsi,0x1
  40cc17:	jle    40c7e0 <_start@@Base+0x94b0>
  40cc1d:	mov    ecx,0x1
  40cc22:	mov    rdx,rbx
  40cc25:	mov    rsi,r12
  40cc28:	mov    rdi,r15
  40cc2b:	call   407470 <_start@@Base+0x4140>
  40cc30:	cmp    rax,r12
  40cc33:	je     40c7e0 <_start@@Base+0x94b0>
  40cc39:	lea    r12,[rsp+0x50]
  40cc3e:	mov    rcx,r12
  40cc41:	mov    rdx,rbx
  40cc44:	mov    rsi,rax
  40cc47:	mov    rdi,r15
  40cc4a:	mov    DWORD PTR [rsp+0x50],0x0
  40cc52:	mov    QWORD PTR [rsp+0x8],rax
  40cc57:	call   417710 <flatcc_json_parser_float@@Base>
  40cc5c:	mov    r9,QWORD PTR [rsp+0x8]
  40cc61:	mov    r13,rax
  40cc64:	cmp    r9,rax
  40cc67:	je     40e6ac <_start@@Base+0xb37c>
  40cc6d:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40cc73:	mov    rax,QWORD PTR [rsp]
  40cc77:	vmovss DWORD PTR [rax+0x4],xmm0
  40cc7c:	jmp    40bb28 <_start@@Base+0x87f8>
  40cc81:	nop    DWORD PTR [rax+0x0]
  40cc88:	mov    rsi,r12
  40cc8b:	mov    ecx,0x5
  40cc90:	mov    rdx,rbx
  40cc93:	mov    rdi,r15
  40cc96:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40cc9b:	mov    r12,rax
  40cc9e:	jmp    40ba12 <_start@@Base+0x86e2>
  40cca3:	nop    DWORD PTR [rax+rax*1+0x0]
  40cca8:	mov    rsi,r13
  40ccab:	mov    rdx,rbx
  40ccae:	mov    rdi,r15
  40ccb1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ccb6:	mov    r13,rax
  40ccb9:	jmp    40b520 <_start@@Base+0x81f0>
  40ccbe:	xchg   ax,ax
  40ccc0:	movabs rax,0x7465737435000000
  40ccca:	cmp    r8,rax
  40cccd:	jne    40d120 <_start@@Base+0x9df0>
  40ccd3:	cmp    r12,0x5
  40ccd7:	jle    40c4b0 <_start@@Base+0x9180>
  40ccdd:	mov    ecx,0x5
  40cce2:	mov    rdx,rbx
  40cce5:	mov    rsi,r13
  40cce8:	mov    rdi,r15
  40cceb:	call   407470 <_start@@Base+0x4140>
  40ccf0:	mov    rbp,rax
  40ccf3:	cmp    r13,rax
  40ccf6:	je     40c4b0 <_start@@Base+0x9180>
  40ccfc:	mov    rdi,QWORD PTR [r15]
  40ccff:	mov    ecx,0x3fffffff
  40cd04:	mov    edx,0x2
  40cd09:	mov    esi,0x4
  40cd0e:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40cd13:	test   eax,eax
  40cd15:	jne    40f075 <_start@@Base+0xbd45>
  40cd1b:	mov    rdi,r15
  40cd1e:	mov    rcx,r14
  40cd21:	mov    rdx,rbx
  40cd24:	mov    rsi,rbp
  40cd27:	call   40ac40 <_start@@Base+0x7910>
  40cd2c:	mov    edi,DWORD PTR [rsp+0x30]
  40cd30:	mov    r13,rax
  40cd33:	test   edi,edi
  40cd35:	jne    40cd71 <_start@@Base+0x9a41>
  40cd37:	jmp    40dfb1 <_start@@Base+0xac81>
  40cd3c:	nop    DWORD PTR [rax+0x0]
  40cd40:	mov    rsi,r13
  40cd43:	mov    rcx,rax
  40cd46:	mov    rdx,rbx
  40cd49:	mov    rdi,r15
  40cd4c:	call   406890 <_start@@Base+0x3560>
  40cd51:	mov    rsi,rax
  40cd54:	mov    rcx,r14
  40cd57:	mov    rdx,rbx
  40cd5a:	mov    rdi,r15
  40cd5d:	call   406740 <_start@@Base+0x3410>
  40cd62:	mov    esi,DWORD PTR [rsp+0x30]
  40cd66:	mov    r13,rax
  40cd69:	test   esi,esi
  40cd6b:	je     40dfb1 <_start@@Base+0xac81>
  40cd71:	mov    rdi,QWORD PTR [r15]
  40cd74:	mov    esi,0x1
  40cd79:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40cd7e:	test   rax,rax
  40cd81:	jne    40cd40 <_start@@Base+0x9a10>
  40cd83:	mov    r14,r13
  40cd86:	jmp    40ad43 <_start@@Base+0x7a13>
  40cd8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40cd90:	mov    r13,rsi
  40cd93:	jmp    40b520 <_start@@Base+0x81f0>
  40cd98:	nop    DWORD PTR [rax+rax*1+0x0]
  40cda0:	cmp    al,0x22
  40cda2:	jne    40c7e0 <_start@@Base+0x94b0>
  40cda8:	lea    rsi,[r12+0x6]
  40cdad:	jmp    40ca95 <_start@@Base+0x9765>
  40cdb2:	nop    WORD PTR [rax+rax*1+0x0]
  40cdb8:	cmp    al,0x22
  40cdba:	jne    40c7e0 <_start@@Base+0x94b0>
  40cdc0:	lea    rsi,[r12+0x6]
  40cdc5:	jmp    40ba92 <_start@@Base+0x8762>
  40cdca:	nop    WORD PTR [rax+rax*1+0x0]
  40cdd0:	movbe  rax,QWORD PTR [r13+0x8]
  40cdd6:	jmp    40b5bf <_start@@Base+0x828f>
  40cddb:	nop    DWORD PTR [rax+rax*1+0x0]
  40cde0:	cmp    rsi,0x1
  40cde4:	jle    40c7e0 <_start@@Base+0x94b0>
  40cdea:	mov    ecx,0x1
  40cdef:	mov    rdx,rbx
  40cdf2:	mov    rsi,r12
  40cdf5:	mov    rdi,r15
  40cdf8:	call   407470 <_start@@Base+0x4140>
  40cdfd:	cmp    rax,r12
  40ce00:	je     40c7e0 <_start@@Base+0x94b0>
  40ce06:	lea    r12,[rsp+0x50]
  40ce0b:	mov    rcx,r12
  40ce0e:	mov    rdx,rbx
  40ce11:	mov    rsi,rax
  40ce14:	mov    rdi,r15
  40ce17:	mov    DWORD PTR [rsp+0x50],0x0
  40ce1f:	mov    QWORD PTR [rsp+0x8],rax
  40ce24:	call   417710 <flatcc_json_parser_float@@Base>
  40ce29:	mov    r9,QWORD PTR [rsp+0x8]
  40ce2e:	mov    r13,rax
  40ce31:	cmp    r9,rax
  40ce34:	je     40e67a <_start@@Base+0xb34a>
  40ce3a:	vmovss xmm0,DWORD PTR [rsp+0x50]
  40ce40:	mov    rax,QWORD PTR [rsp]
  40ce44:	vmovss DWORD PTR [rax+0x8],xmm0
  40ce49:	jmp    40bb28 <_start@@Base+0x87f8>
  40ce4e:	xchg   ax,ax
  40ce50:	lea    rbp,[r13+0x8]
  40ce54:	mov    r8,rbx
  40ce57:	sub    r8,rbp
  40ce5a:	cmp    r8,0x7
  40ce5e:	ja     40dd4e <_start@@Base+0xaa1e>
  40ce64:	mov    rsi,rbx
  40ce67:	mov    rdi,rbp
  40ce6a:	call   403420 <_start@@Base+0xf0>
  40ce6f:	movabs rdx,0xffff000000000000
  40ce79:	and    rax,rdx
  40ce7c:	movabs rdx,0x3634000000000000
  40ce86:	cmp    rax,rdx
  40ce89:	jne    40d430 <_start@@Base+0xa100>
  40ce8f:	cmp    r8,0x2
  40ce93:	jle    40d882 <_start@@Base+0xa552>
  40ce99:	mov    ecx,0x2
  40ce9e:	mov    rdx,rbx
  40cea1:	mov    rsi,rbp
  40cea4:	mov    rdi,r15
  40cea7:	call   407470 <_start@@Base+0x4140>
  40ceac:	mov    r13,rax
  40ceaf:	cmp    rbp,rax
  40ceb2:	je     40d882 <_start@@Base+0xa552>
  40ceb8:	mov    rdi,QWORD PTR [r15]
  40cebb:	mov    esi,0x3
  40cec0:	mov    DWORD PTR [rsp+0x34],0x0
  40cec8:	call   4130c0 <flatcc_builder_start_table@@Base>
  40cecd:	test   eax,eax
  40cecf:	jne    40d087 <_start@@Base+0x9d57>
  40ced5:	lea    rbp,[rsp+0x48]
  40ceda:	mov    rsi,r13
  40cedd:	mov    rcx,rbp
  40cee0:	mov    rdx,rbx
  40cee3:	mov    rdi,r15
  40cee6:	call   4083c0 <_start@@Base+0x5090>
  40ceeb:	mov    r13,rax
  40ceee:	mov    eax,DWORD PTR [rsp+0x48]
  40cef2:	test   eax,eax
  40cef4:	je     40e7b5 <_start@@Base+0xb485>
  40cefa:	movabs r12,0x6e6573746563ffff
  40cf04:	jmp    40cfb6 <_start@@Base+0x9c86>
  40cf09:	nop    DWORD PTR [rax+0x0]
  40cf10:	movabs rdi,0xffffffff00000000
  40cf1a:	and    rax,rdi
  40cf1d:	movabs rdx,0x6461746100000000
  40cf27:	cmp    rax,rdx
  40cf2a:	jne    40dac8 <_start@@Base+0xa798>
  40cf30:	cmp    r8,0x4
  40cf34:	jle    40dac8 <_start@@Base+0xa798>
  40cf3a:	mov    ecx,0x4
  40cf3f:	mov    rdx,rbx
  40cf42:	mov    rsi,r13
  40cf45:	mov    rdi,r15
  40cf48:	call   407470 <_start@@Base+0x4140>
  40cf4d:	cmp    rax,r13
  40cf50:	je     40dac8 <_start@@Base+0xa798>
  40cf56:	lea    rcx,[rsp+0x50]
  40cf5b:	xor    r8d,r8d
  40cf5e:	mov    rdx,rbx
  40cf61:	mov    rsi,rax
  40cf64:	mov    rdi,r15
  40cf67:	call   4185a0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40cf6c:	mov    r13,rax
  40cf6f:	mov    eax,DWORD PTR [rsp+0x50]
  40cf73:	test   eax,eax
  40cf75:	je     40d087 <_start@@Base+0x9d57>
  40cf7b:	mov    rdi,QWORD PTR [r15]
  40cf7e:	xor    esi,esi
  40cf80:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40cf85:	test   rax,rax
  40cf88:	je     40d087 <_start@@Base+0x9d57>
  40cf8e:	mov    edx,DWORD PTR [rsp+0x50]
  40cf92:	mov    DWORD PTR [rax],edx
  40cf94:	mov    rsi,r13
  40cf97:	mov    rcx,rbp
  40cf9a:	mov    rdx,rbx
  40cf9d:	mov    rdi,r15
  40cfa0:	call   4065f0 <_start@@Base+0x32c0>
  40cfa5:	mov    r11d,DWORD PTR [rsp+0x48]
  40cfaa:	mov    r13,rax
  40cfad:	test   r11d,r11d
  40cfb0:	je     40e7b5 <_start@@Base+0xb485>
  40cfb6:	cmp    rbx,r13
  40cfb9:	je     40cfd8 <_start@@Base+0x9ca8>
  40cfbb:	movzx  eax,BYTE PTR [r13+0x0]
  40cfc0:	cmp    al,0x22
  40cfc2:	je     40db20 <_start@@Base+0xa7f0>
  40cfc8:	cmp    al,0x2e
  40cfca:	je     40dd8d <_start@@Base+0xaa5d>
  40cfd0:	mov    DWORD PTR [r15+0x14],0x1
  40cfd8:	mov    r8,rbx
  40cfdb:	sub    r8,r13
  40cfde:	cmp    r8,0x7
  40cfe2:	ja     40db00 <_start@@Base+0xa7d0>
  40cfe8:	mov    rsi,rbx
  40cfeb:	mov    rdi,r13
  40cfee:	call   403420 <_start@@Base+0xf0>
  40cff3:	cmp    rax,r12
  40cff6:	jbe    40cf10 <_start@@Base+0x9be0>
  40cffc:	mov    rdx,rax
  40cfff:	xor    dl,dl
  40d001:	movabs rcx,0x75726c6461746100
  40d00b:	cmp    rdx,rcx
  40d00e:	je     40db40 <_start@@Base+0xa810>
  40d014:	xor    ax,ax
  40d017:	movabs rdi,0x6e65737465640000
  40d021:	cmp    rax,rdi
  40d024:	jne    40dac8 <_start@@Base+0xa798>
  40d02a:	cmp    r8,0x6
  40d02e:	jle    40dac8 <_start@@Base+0xa798>
  40d034:	mov    ecx,0x6
  40d039:	mov    rdx,rbx
  40d03c:	mov    rsi,r13
  40d03f:	mov    rdi,r15
  40d042:	call   407470 <_start@@Base+0x4140>
  40d047:	cmp    rax,r13
  40d04a:	je     40dac8 <_start@@Base+0xa798>
  40d050:	lea    rcx,[rsp+0x50]
  40d055:	xor    r8d,r8d
  40d058:	mov    rdx,rbx
  40d05b:	mov    rsi,rax
  40d05e:	mov    rdi,r15
  40d061:	call   4185a0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40d066:	mov    r13,rax
  40d069:	mov    eax,DWORD PTR [rsp+0x50]
  40d06d:	test   eax,eax
  40d06f:	je     40d087 <_start@@Base+0x9d57>
  40d071:	mov    rdi,QWORD PTR [r15]
  40d074:	mov    esi,0x2
  40d079:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40d07e:	test   rax,rax
  40d081:	jne    40cf8e <_start@@Base+0x9c5e>
  40d087:	mov    rsi,r13
  40d08a:	mov    ecx,0x21
  40d08f:	mov    rdx,rbx
  40d092:	mov    rdi,r15
  40d095:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40d09a:	mov    r9d,DWORD PTR [rsp+0x34]
  40d09f:	mov    r13,rax
  40d0a2:	test   r9d,r9d
  40d0a5:	je     40f2b0 <_start@@Base+0xbf80>
  40d0ab:	mov    rdi,QWORD PTR [r15]
  40d0ae:	mov    esi,0x23
  40d0b3:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40d0b8:	test   rax,rax
  40d0bb:	je     40f2a8 <_start@@Base+0xbf78>
  40d0c1:	mov    edx,DWORD PTR [rsp+0x34]
  40d0c5:	mov    DWORD PTR [rax],edx
  40d0c7:	jmp    40b520 <_start@@Base+0x81f0>
  40d0cc:	nop    DWORD PTR [rax+0x0]
  40d0d0:	cmp    al,0x22
  40d0d2:	jne    40c7e0 <_start@@Base+0x94b0>
  40d0d8:	lea    rsi,[r12+0x6]
  40d0dd:	jmp    40c80d <_start@@Base+0x94dd>
  40d0e2:	nop    WORD PTR [rax+rax*1+0x0]
  40d0e8:	cmp    al,0x22
  40d0ea:	jne    40c7e0 <_start@@Base+0x94b0>
  40d0f0:	lea    rsi,[r12+0x2]
  40d0f5:	jmp    40c989 <_start@@Base+0x9659>
  40d0fa:	nop    WORD PTR [rax+rax*1+0x0]
  40d100:	cmp    BYTE PTR [r13+0x2],0x20
  40d105:	jle    40ca41 <_start@@Base+0x9711>
  40d10b:	add    r13,0x2
  40d10f:	jmp    40b520 <_start@@Base+0x81f0>
  40d114:	nop    DWORD PTR [rax+0x0]
  40d118:	mov    r13,rbx
  40d11b:	jmp    40cb31 <_start@@Base+0x9801>
  40d120:	endbr64 
  40d124:	movabs rax,0x746573745f747970
  40d12e:	cmp    rbp,rax
  40d131:	jne    40c4b0 <_start@@Base+0x9180>
  40d137:	lea    rbp,[r13+0x8]
  40d13b:	mov    r8,rbx
  40d13e:	sub    r8,rbp
  40d141:	cmp    r8,0x7
  40d145:	ja     40dda8 <_start@@Base+0xaa78>
  40d14b:	mov    rsi,rbx
  40d14e:	mov    rdi,rbp
  40d151:	call   403420 <_start@@Base+0xf0>
  40d156:	movabs rdx,0xff00000000000000
  40d160:	and    rax,rdx
  40d163:	movabs rdx,0x6500000000000000
  40d16d:	cmp    rax,rdx
  40d170:	jne    40d4a8 <_start@@Base+0xa178>
  40d176:	cmp    r8,0x1
  40d17a:	jle    40d8ae <_start@@Base+0xa57e>
  40d180:	mov    ecx,0x1
  40d185:	mov    rdx,rbx
  40d188:	mov    rsi,rbp
  40d18b:	mov    rdi,r15
  40d18e:	call   407470 <_start@@Base+0x4140>
  40d193:	cmp    rbp,rax
  40d196:	je     40d8ae <_start@@Base+0xa57e>
  40d19c:	lea    rdi,[rip+0x236d]        # 40f510 <_start@@Base+0xc1e0>
  40d1a3:	push   rdi
  40d1a4:	lea    rdi,[rip+0x14575]        # 421720 <__data_start@@Base+0x660>
  40d1ab:	xor    ecx,ecx
  40d1ad:	push   rdi
  40d1ae:	mov    rdx,rbx
  40d1b1:	mov    r8d,0x8
  40d1b7:	mov    r9,QWORD PTR [rsp+0x50]
  40d1bc:	mov    rsi,rax
  40d1bf:	mov    rdi,r15
  40d1c2:	call   418e20 <flatcc_json_parser_union_type@@Base>
  40d1c7:	pop    rdx
  40d1c8:	mov    r13,rax
  40d1cb:	pop    rcx
  40d1cc:	jmp    40b520 <_start@@Base+0x81f0>
  40d1d1:	nop    DWORD PTR [rax+0x0]
  40d1d8:	mov    rsi,r13
  40d1db:	mov    rdx,rbx
  40d1de:	mov    rdi,r15
  40d1e1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d1e6:	mov    r13,rax
  40d1e9:	jmp    40b520 <_start@@Base+0x81f0>
  40d1ee:	xchg   ax,ax
  40d1f0:	lea    r8,[r13+0x8]
  40d1f4:	mov    rax,rbx
  40d1f7:	sub    rax,r8
  40d1fa:	cmp    rax,0x7
  40d1fe:	ja     40ddfd <_start@@Base+0xaacd>
  40d204:	mov    rsi,rbx
  40d207:	mov    rdi,r8
  40d20a:	call   403420 <_start@@Base+0xf0>
  40d20f:	movabs rdx,0x616d657370616365
  40d219:	cmp    rax,rdx
  40d21c:	jne    40d7a0 <_start@@Base+0xa470>
  40d222:	lea    rbp,[r13+0x10]
  40d226:	mov    r8,rbx
  40d229:	sub    r8,rbp
  40d22c:	cmp    r8,0x7
  40d230:	ja     40d994 <_start@@Base+0xa664>
  40d236:	mov    rsi,rbx
  40d239:	mov    rdi,rbp
  40d23c:	call   403420 <_start@@Base+0xf0>
  40d241:	and    rax,0xffffffffff000000
  40d247:	movabs rdx,0x5f74657374000000
  40d251:	cmp    rax,rdx
  40d254:	jne    40e472 <_start@@Base+0xb142>
  40d25a:	cmp    r8,0x5
  40d25e:	jle    40ec64 <_start@@Base+0xb934>
  40d264:	mov    ecx,0x5
  40d269:	mov    rdx,rbx
  40d26c:	mov    rsi,rbp
  40d26f:	mov    rdi,r15
  40d272:	call   407470 <_start@@Base+0x4140>
  40d277:	cmp    rbp,rax
  40d27a:	je     40ec64 <_start@@Base+0xb934>
  40d280:	lea    rbp,[rsp+0x34]
  40d285:	mov    rcx,rbp
  40d288:	mov    rdx,rbx
  40d28b:	mov    rsi,rax
  40d28e:	mov    rdi,r15
  40d291:	call   4070d0 <_start@@Base+0x3da0>
  40d296:	mov    r8d,DWORD PTR [rsp+0x34]
  40d29b:	mov    r13,rax
  40d29e:	test   r8d,r8d
  40d2a1:	je     40f392 <_start@@Base+0xc062>
  40d2a7:	mov    rdi,QWORD PTR [r15]
  40d2aa:	mov    esi,0x22
  40d2af:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40d2b4:	test   rax,rax
  40d2b7:	je     40f38a <_start@@Base+0xc05a>
  40d2bd:	mov    edx,DWORD PTR [rsp+0x34]
  40d2c1:	mov    DWORD PTR [rax],edx
  40d2c3:	jmp    40b520 <_start@@Base+0x81f0>
  40d2c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d2d0:	movabs rdx,0x7533325f666e7630
  40d2da:	cmp    rax,rdx
  40d2dd:	ja     40d690 <_start@@Base+0xa360>
  40d2e3:	movabs rdx,0x7336345f666e7631
  40d2ed:	cmp    rax,rdx
  40d2f0:	jne    40d856 <_start@@Base+0xa526>
  40d2f6:	cmp    r8,0x8
  40d2fa:	jle    40e807 <_start@@Base+0xb4d7>
  40d300:	mov    ecx,0x8
  40d305:	mov    rdx,rbx
  40d308:	mov    rsi,rbp
  40d30b:	mov    rdi,r15
  40d30e:	call   407470 <_start@@Base+0x4140>
  40d313:	mov    r12,rax
  40d316:	cmp    rbp,rax
  40d319:	je     40e807 <_start@@Base+0xb4d7>
  40d31f:	lea    rbp,[rsp+0x50]
  40d324:	mov    rcx,rbp
  40d327:	mov    rdx,rbx
  40d32a:	mov    rsi,rax
  40d32d:	mov    rdi,r15
  40d330:	mov    QWORD PTR [rsp+0x50],0x0
  40d339:	call   4040e0 <_start@@Base+0xdb0>
  40d33e:	mov    r13,rax
  40d341:	cmp    rax,r12
  40d344:	je     40f00d <_start@@Base+0xbcdd>
  40d34a:	cmp    QWORD PTR [rsp+0x50],0x0
  40d350:	jne    40d35d <_start@@Base+0xa02d>
  40d352:	test   BYTE PTR [r15+0x10],0x2
  40d357:	je     40b520 <_start@@Base+0x81f0>
  40d35d:	mov    rdi,QWORD PTR [r15]
  40d360:	mov    ecx,0x8
  40d365:	mov    edx,0x8
  40d36a:	mov    esi,0x12
  40d36f:	call   414940 <flatcc_builder_table_add@@Base>
  40d374:	test   rax,rax
  40d377:	je     40f493 <_start@@Base+0xc163>
  40d37d:	mov    rdx,QWORD PTR [rsp+0x50]
  40d382:	mov    QWORD PTR [rax],rdx
  40d385:	jmp    40b520 <_start@@Base+0x81f0>
  40d38a:	nop    WORD PTR [rax+rax*1+0x0]
  40d390:	mov    rax,QWORD PTR [rsp+0x50]
  40d395:	mov    esi,DWORD PTR [rsp+0x48]
  40d399:	mov    edx,eax
  40d39b:	test   esi,esi
  40d39d:	jne    40d7f6 <_start@@Base+0xa4c6>
  40d3a3:	cmp    rax,0x7f
  40d3a7:	jbe    40cb68 <_start@@Base+0x9838>
  40d3ad:	mov    QWORD PTR [rsp+0x8],r9
  40d3b2:	mov    ecx,0x7
  40d3b7:	mov    rsi,r13
  40d3ba:	mov    rdx,rbx
  40d3bd:	mov    rdi,r15
  40d3c0:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40d3c5:	mov    r9,QWORD PTR [rsp+0x8]
  40d3ca:	mov    r13,rax
  40d3cd:	cmp    r9,rax
  40d3d0:	je     40cb31 <_start@@Base+0x9801>
  40d3d6:	movzx  edx,BYTE PTR [rsp+0x38]
  40d3db:	jmp    40cb68 <_start@@Base+0x9838>
  40d3e0:	cmp    BYTE PTR [r13+0x2],0x20
  40d3e5:	jle    40cbad <_start@@Base+0x987d>
  40d3eb:	lea    r12,[r13+0x2]
  40d3ef:	jmp    40cbbe <_start@@Base+0x988e>
  40d3f4:	nop    DWORD PTR [rax+0x0]
  40d3f8:	mov    rsi,r13
  40d3fb:	mov    rdx,rbx
  40d3fe:	mov    rdi,r15
  40d401:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d406:	mov    r13,rax
  40d409:	jmp    40b520 <_start@@Base+0x81f0>
  40d40e:	xchg   ax,ax
  40d410:	mov    rsi,r13
  40d413:	mov    rdx,rbx
  40d416:	mov    rdi,r15
  40d419:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d41e:	mov    r13,rax
  40d421:	jmp    40b520 <_start@@Base+0x81f0>
  40d426:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d430:	mov    rdx,rbx
  40d433:	mov    rsi,rbp
  40d436:	mov    rdi,r15
  40d439:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d43e:	mov    r13,rax
  40d441:	jmp    40b520 <_start@@Base+0x81f0>
  40d446:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d450:	mov    rdx,rbx
  40d453:	mov    rsi,rbp
  40d456:	mov    rdi,r15
  40d459:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d45e:	mov    r13,rax
  40d461:	jmp    40b520 <_start@@Base+0x81f0>
  40d466:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d470:	mov    r8,r12
  40d473:	lea    rcx,[rip+0x13d86]        # 421200 <__data_start@@Base+0x140>
  40d47a:	mov    rdx,rbx
  40d47d:	mov    rsi,rax
  40d480:	mov    rdi,r15
  40d483:	call   404780 <_start@@Base+0x1450>
  40d488:	cmp    r13,rax
  40d48b:	je     40ee3e <_start@@Base+0xbb0e>
  40d491:	cmp    rbx,rax
  40d494:	je     40ee3e <_start@@Base+0xbb0e>
  40d49a:	mov    r13,rax
  40d49d:	jmp    40bb16 <_start@@Base+0x87e6>
  40d4a2:	nop    WORD PTR [rax+rax*1+0x0]
  40d4a8:	mov    rdx,rbx
  40d4ab:	mov    rsi,rbp
  40d4ae:	mov    rdi,r15
  40d4b1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d4b6:	mov    r13,rax
  40d4b9:	jmp    40b520 <_start@@Base+0x81f0>
  40d4be:	xchg   ax,ax
  40d4c0:	lea    r13,[r12+0x1]
  40d4c5:	mov    rax,rbx
  40d4c8:	sub    rax,r13
  40d4cb:	mov    DWORD PTR [rsp+0x3c],0x0
  40d4d3:	cmp    rax,0x1
  40d4d7:	jle    40d4eb <_start@@Base+0xa1bb>
  40d4d9:	cmp    BYTE PTR [r12+0x1],0x20
  40d4df:	jg     40b520 <_start@@Base+0x81f0>
  40d4e5:	je     40ea1a <_start@@Base+0xb6ea>
  40d4eb:	mov    rdx,rbx
  40d4ee:	mov    rsi,r13
  40d4f1:	mov    rdi,r15
  40d4f4:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40d4f9:	mov    r12,rax
  40d4fc:	mov    eax,DWORD PTR [rsp+0x3c]
  40d500:	jmp    40b9e8 <_start@@Base+0x86b8>
  40d505:	nop    DWORD PTR [rax]
  40d508:	mov    ecx,0xa
  40d50d:	mov    rdx,rbx
  40d510:	mov    rsi,rbx
  40d513:	mov    rdi,r15
  40d516:	mov    DWORD PTR [rsp+0x3c],0x0
  40d51e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40d523:	mov    r12,rax
  40d526:	mov    eax,DWORD PTR [rsp+0x3c]
  40d52a:	jmp    40b9e8 <_start@@Base+0x86b8>
  40d52f:	nop
  40d530:	mov    rsi,r13
  40d533:	mov    rdx,rbx
  40d536:	mov    rdi,r15
  40d539:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d53e:	mov    r13,rax
  40d541:	jmp    40b520 <_start@@Base+0x81f0>
  40d546:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d550:	lea    rbp,[r13+0x8]
  40d554:	mov    r8,rbx
  40d557:	sub    r8,rbp
  40d55a:	cmp    r8,0x7
  40d55e:	ja     40d9d6 <_start@@Base+0xa6a6>
  40d564:	mov    rsi,rbx
  40d567:	mov    rdi,rbp
  40d56a:	call   403420 <_start@@Base+0xf0>
  40d56f:	movabs rdx,0xff00000000000000
  40d579:	and    rax,rdx
  40d57c:	movabs rdx,0x7900000000000000
  40d586:	cmp    rax,rdx
  40d589:	jne    40e488 <_start@@Base+0xb158>
  40d58f:	cmp    r8,0x1
  40d593:	jle    40e79f <_start@@Base+0xb46f>
  40d599:	mov    ecx,0x1
  40d59e:	mov    rdx,rbx
  40d5a1:	mov    rsi,rbp
  40d5a4:	mov    rdi,r15
  40d5a7:	call   407470 <_start@@Base+0x4140>
  40d5ac:	mov    r13,rax
  40d5af:	cmp    rbp,rax
  40d5b2:	je     40e79f <_start@@Base+0xb46f>
  40d5b8:	mov    rdi,QWORD PTR [r15]
  40d5bb:	mov    ecx,0xffffffff
  40d5c0:	mov    edx,0x1
  40d5c5:	mov    esi,0x1
  40d5ca:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40d5cf:	test   eax,eax
  40d5d1:	jne    40f41b <_start@@Base+0xc0eb>
  40d5d7:	mov    rsi,r13
  40d5da:	mov    rcx,r14
  40d5dd:	mov    rdx,rbx
  40d5e0:	mov    rdi,r15
  40d5e3:	call   40ac40 <_start@@Base+0x7910>
  40d5e8:	mov    ebp,DWORD PTR [rsp+0x30]
  40d5ec:	mov    r13,rax
  40d5ef:	test   ebp,ebp
  40d5f1:	je     40ed86 <_start@@Base+0xba56>
  40d5f7:	lea    rbp,[rsp+0x50]
  40d5fc:	jmp    40d62b <_start@@Base+0xa2fb>
  40d5fe:	xchg   ax,ax
  40d600:	movzx  edx,BYTE PTR [rsp+0x50]
  40d605:	mov    rcx,r14
  40d608:	mov    BYTE PTR [r12],dl
  40d60c:	mov    rsi,rax
  40d60f:	mov    rdx,rbx
  40d612:	mov    rdi,r15
  40d615:	call   406740 <_start@@Base+0x3410>
  40d61a:	mov    r11d,DWORD PTR [rsp+0x30]
  40d61f:	mov    r13,rax
  40d622:	test   r11d,r11d
  40d625:	je     40ed86 <_start@@Base+0xba56>
  40d62b:	mov    rdi,QWORD PTR [r15]
  40d62e:	mov    esi,0x1
  40d633:	mov    BYTE PTR [rsp+0x50],0x0
  40d638:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40d63d:	mov    r12,rax
  40d640:	test   rax,rax
  40d643:	je     40ee16 <_start@@Base+0xbae6>
  40d649:	mov    rcx,rbp
  40d64c:	mov    rdx,rbx
  40d64f:	mov    rsi,r13
  40d652:	mov    rdi,r15
  40d655:	call   4041d0 <_start@@Base+0xea0>
  40d65a:	cmp    rax,r13
  40d65d:	jne    40d600 <_start@@Base+0xa2d0>
  40d65f:	mov    r8,rbp
  40d662:	lea    rcx,[rip+0x140f7]        # 421760 <__data_start@@Base+0x6a0>
  40d669:	mov    rdx,rbx
  40d66c:	mov    rsi,r13
  40d66f:	mov    rdi,r15
  40d672:	call   405ce0 <_start@@Base+0x29b0>
  40d677:	cmp    rax,r13
  40d67a:	je     40d685 <_start@@Base+0xa355>
  40d67c:	cmp    rbx,rax
  40d67f:	jne    40d600 <_start@@Base+0xa2d0>
  40d685:	mov    r14,rax
  40d688:	jmp    40ad43 <_start@@Base+0x7a13>
  40d68d:	nop    DWORD PTR [rax]
  40d690:	movabs rdx,0x7533325f666e7631
  40d69a:	cmp    rax,rdx
  40d69d:	je     40d9e1 <_start@@Base+0xa6b1>
  40d6a3:	movabs rdx,0x7536345f666e7631
  40d6ad:	cmp    rax,rdx
  40d6b0:	jne    40e664 <_start@@Base+0xb334>
  40d6b6:	cmp    r8,0x8
  40d6ba:	jle    40eb5d <_start@@Base+0xb82d>
  40d6c0:	mov    ecx,0x8
  40d6c5:	mov    rdx,rbx
  40d6c8:	mov    rsi,rbp
  40d6cb:	mov    rdi,r15
  40d6ce:	call   407470 <_start@@Base+0x4140>
  40d6d3:	mov    r12,rax
  40d6d6:	cmp    rbp,rax
  40d6d9:	je     40eb5d <_start@@Base+0xb82d>
  40d6df:	mov    QWORD PTR [rsp+0x48],0x0
  40d6e8:	mov    QWORD PTR [rsp+0x50],0x0
  40d6f1:	mov    DWORD PTR [rsp+0x3c],0x0
  40d6f9:	cmp    rbx,rax
  40d6fc:	je     40efd1 <_start@@Base+0xbca1>
  40d702:	lea    rcx,[rsp+0x3c]
  40d707:	lea    r8,[rsp+0x50]
  40d70c:	mov    rdx,rbx
  40d70f:	mov    rsi,rax
  40d712:	mov    rdi,r15
  40d715:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40d71a:	mov    r13,rax
  40d71d:	cmp    r12,rax
  40d720:	je     40efd4 <_start@@Base+0xbca4>
  40d726:	mov    ebp,DWORD PTR [rsp+0x3c]
  40d72a:	test   ebp,ebp
  40d72c:	jne    40edbb <_start@@Base+0xba8b>
  40d732:	mov    rdx,QWORD PTR [rsp+0x50]
  40d737:	mov    QWORD PTR [rsp+0x48],rdx
  40d73c:	test   rdx,rdx
  40d73f:	jne    40d74c <_start@@Base+0xa41c>
  40d741:	test   BYTE PTR [r15+0x10],0x2
  40d746:	je     40b520 <_start@@Base+0x81f0>
  40d74c:	mov    rdi,QWORD PTR [r15]
  40d74f:	mov    ecx,0x8
  40d754:	mov    edx,0x8
  40d759:	mov    esi,0x13
  40d75e:	call   414940 <flatcc_builder_table_add@@Base>
  40d763:	test   rax,rax
  40d766:	je     40f3c3 <_start@@Base+0xc093>
  40d76c:	mov    rdx,QWORD PTR [rsp+0x48]
  40d771:	mov    QWORD PTR [rax],rdx
  40d774:	jmp    40b520 <_start@@Base+0x81f0>
  40d779:	nop    DWORD PTR [rax+0x0]
  40d780:	mov    rdx,rbx
  40d783:	mov    rsi,rbp
  40d786:	mov    rdi,r15
  40d789:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d78e:	mov    r13,rax
  40d791:	jmp    40b520 <_start@@Base+0x81f0>
  40d796:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d7a0:	mov    rdx,rbx
  40d7a3:	mov    rsi,r8
  40d7a6:	mov    rdi,r15
  40d7a9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d7ae:	mov    r13,rax
  40d7b1:	jmp    40b520 <_start@@Base+0x81f0>
  40d7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d7c0:	mov    rdx,rbx
  40d7c3:	mov    rsi,r8
  40d7c6:	mov    rdi,r15
  40d7c9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d7ce:	mov    r13,rax
  40d7d1:	jmp    40b520 <_start@@Base+0x81f0>
  40d7d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d7e0:	mov    rdx,rbx
  40d7e3:	mov    rsi,rbp
  40d7e6:	mov    rdi,r15
  40d7e9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d7ee:	mov    r13,rax
  40d7f1:	jmp    40b520 <_start@@Base+0x81f0>
  40d7f6:	neg    edx
  40d7f8:	mov    ecx,0x8
  40d7fd:	cmp    rax,0x80
  40d803:	jbe    40cb68 <_start@@Base+0x9838>
  40d809:	jmp    40d3b7 <_start@@Base+0xa087>
  40d80e:	mov    r8,r12
  40d811:	lea    rcx,[rip+0x13e68]        # 421680 <__data_start@@Base+0x5c0>
  40d818:	mov    rdx,rbx
  40d81b:	mov    rsi,rax
  40d81e:	mov    rdi,r15
  40d821:	call   404550 <_start@@Base+0x1220>
  40d826:	cmp    r13,rax
  40d829:	je     40f266 <_start@@Base+0xbf36>
  40d82f:	cmp    rbx,rax
  40d832:	je     40f266 <_start@@Base+0xbf36>
  40d838:	mov    r13,rax
  40d83b:	jmp    40b1b0 <_start@@Base+0x7e80>
  40d840:	mov    rdx,rbx
  40d843:	mov    rsi,rbp
  40d846:	mov    rdi,r15
  40d849:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d84e:	mov    r13,rax
  40d851:	jmp    40b520 <_start@@Base+0x81f0>
  40d856:	mov    rdx,rbx
  40d859:	mov    rsi,rbp
  40d85c:	mov    rdi,r15
  40d85f:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d864:	mov    r13,rax
  40d867:	jmp    40b520 <_start@@Base+0x81f0>
  40d86c:	movbe  rax,QWORD PTR [r13+0x10]
  40d872:	jmp    40bdb5 <_start@@Base+0x8a85>
  40d877:	movbe  rax,QWORD PTR [r13+0x10]
  40d87d:	jmp    40c51f <_start@@Base+0x91ef>
  40d882:	mov    rdx,rbx
  40d885:	mov    rsi,rbp
  40d888:	mov    rdi,r15
  40d88b:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d890:	mov    r13,rax
  40d893:	jmp    40b520 <_start@@Base+0x81f0>
  40d898:	mov    rsi,r13
  40d89b:	mov    rdx,rbx
  40d89e:	mov    rdi,r15
  40d8a1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d8a6:	mov    r13,rax
  40d8a9:	jmp    40b520 <_start@@Base+0x81f0>
  40d8ae:	mov    rdx,rbx
  40d8b1:	mov    rsi,rbp
  40d8b4:	mov    rdi,r15
  40d8b7:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d8bc:	mov    r13,rax
  40d8bf:	jmp    40b520 <_start@@Base+0x81f0>
  40d8c4:	lea    r12,[rbp+0x8]
  40d8c8:	mov    r8,rbx
  40d8cb:	sub    r8,r12
  40d8ce:	cmp    r8,0x7
  40d8d2:	ja     40ea4e <_start@@Base+0xb71e>
  40d8d8:	mov    rsi,rbx
  40d8db:	mov    rdi,r12
  40d8de:	call   403420 <_start@@Base+0xf0>
  40d8e3:	movabs rdx,0xff00000000000000
  40d8ed:	and    rax,rdx
  40d8f0:	movabs rdx,0x6100000000000000
  40d8fa:	cmp    rax,rdx
  40d8fd:	jne    40e933 <_start@@Base+0xb603>
  40d903:	cmp    r8,0x1
  40d907:	jle    40eec5 <_start@@Base+0xbb95>
  40d90d:	mov    ecx,0x1
  40d912:	mov    rdx,rbx
  40d915:	mov    rsi,r12
  40d918:	mov    rdi,r15
  40d91b:	call   407470 <_start@@Base+0x4140>
  40d920:	mov    rbp,rax
  40d923:	cmp    r12,rax
  40d926:	je     40eec5 <_start@@Base+0xbb95>
  40d92c:	lea    r12,[rsp+0x50]
  40d931:	mov    rcx,r12
  40d934:	mov    rdx,rbx
  40d937:	mov    rsi,rax
  40d93a:	mov    rdi,r15
  40d93d:	mov    DWORD PTR [rsp+0x50],0x0
  40d945:	call   404370 <_start@@Base+0x1040>
  40d94a:	mov    r13,rax
  40d94d:	cmp    rax,rbp
  40d950:	je     40f21f <_start@@Base+0xbeef>
  40d956:	mov    eax,DWORD PTR [rsp+0x50]
  40d95a:	test   eax,eax
  40d95c:	jne    40d969 <_start@@Base+0xa639>
  40d95e:	test   BYTE PTR [r15+0x10],0x2
  40d963:	je     40b520 <_start@@Base+0x81f0>
  40d969:	mov    rdi,QWORD PTR [r15]
  40d96c:	mov    ecx,0x4
  40d971:	mov    edx,0x4
  40d976:	mov    esi,0x14
  40d97b:	call   414940 <flatcc_builder_table_add@@Base>
  40d980:	test   rax,rax
  40d983:	je     40f49b <_start@@Base+0xc16b>
  40d989:	mov    edx,DWORD PTR [rsp+0x50]
  40d98d:	mov    DWORD PTR [rax],edx
  40d98f:	jmp    40b520 <_start@@Base+0x81f0>
  40d994:	movbe  rax,QWORD PTR [r13+0x10]
  40d99a:	jmp    40d241 <_start@@Base+0x9f11>
  40d99f:	movbe  rax,QWORD PTR [r13+0x10]
  40d9a5:	jmp    40b29a <_start@@Base+0x7f6a>
  40d9aa:	mov    rdx,rbx
  40d9ad:	mov    rsi,rbp
  40d9b0:	mov    rdi,r15
  40d9b3:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d9b8:	mov    r13,rax
  40d9bb:	jmp    40b520 <_start@@Base+0x81f0>
  40d9c0:	mov    rsi,r13
  40d9c3:	mov    rdx,rbx
  40d9c6:	mov    rdi,r15
  40d9c9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40d9ce:	mov    r13,rax
  40d9d1:	jmp    40b520 <_start@@Base+0x81f0>
  40d9d6:	movbe  rax,QWORD PTR [r13+0x8]
  40d9dc:	jmp    40d56f <_start@@Base+0xa23f>
  40d9e1:	cmp    r8,0x8
  40d9e5:	jle    40ea8b <_start@@Base+0xb75b>
  40d9eb:	mov    ecx,0x8
  40d9f0:	mov    rdx,rbx
  40d9f3:	mov    rsi,rbp
  40d9f6:	mov    rdi,r15
  40d9f9:	call   407470 <_start@@Base+0x4140>
  40d9fe:	mov    r12,rax
  40da01:	cmp    rbp,rax
  40da04:	je     40ea8b <_start@@Base+0xb75b>
  40da0a:	lea    rbp,[rsp+0x50]
  40da0f:	mov    rcx,rbp
  40da12:	mov    rdx,rbx
  40da15:	mov    rsi,rax
  40da18:	mov    rdi,r15
  40da1b:	mov    DWORD PTR [rsp+0x50],0x0
  40da23:	call   4042a0 <_start@@Base+0xf70>
  40da28:	mov    r13,rax
  40da2b:	cmp    rax,r12
  40da2e:	je     40f07d <_start@@Base+0xbd4d>
  40da34:	mov    eax,DWORD PTR [rsp+0x50]
  40da38:	test   eax,eax
  40da3a:	jne    40da47 <_start@@Base+0xa717>
  40da3c:	test   BYTE PTR [r15+0x10],0x2
  40da41:	je     40b520 <_start@@Base+0x81f0>
  40da47:	mov    rdi,QWORD PTR [r15]
  40da4a:	mov    ecx,0x4
  40da4f:	mov    edx,0x4
  40da54:	mov    esi,0x11
  40da59:	call   414940 <flatcc_builder_table_add@@Base>
  40da5e:	test   rax,rax
  40da61:	je     40f4f3 <_start@@Base+0xc1c3>
  40da67:	mov    edx,DWORD PTR [rsp+0x50]
  40da6b:	mov    DWORD PTR [rax],edx
  40da6d:	jmp    40b520 <_start@@Base+0x81f0>
  40da72:	mov    rbp,rax
  40da75:	mov    rdx,rbx
  40da78:	mov    rsi,rbp
  40da7b:	mov    rdi,r15
  40da7e:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40da83:	mov    r13,rax
  40da86:	jmp    40b520 <_start@@Base+0x81f0>
  40da8b:	mov    r8,r12
  40da8e:	lea    rcx,[rip+0x13ceb]        # 421780 <__data_start@@Base+0x6c0>
  40da95:	mov    rdx,rbx
  40da98:	mov    rsi,rax
  40da9b:	mov    rdi,r15
  40da9e:	call   405580 <_start@@Base+0x2250>
  40daa3:	cmp    r13,rax
  40daa6:	je     40f453 <_start@@Base+0xc123>
  40daac:	cmp    rbx,rax
  40daaf:	je     40f453 <_start@@Base+0xc123>
  40dab5:	mov    r13,rax
  40dab8:	jmp    40bc4f <_start@@Base+0x891f>
  40dabd:	mov    r14,rax
  40dac0:	jmp    40ad43 <_start@@Base+0x7a13>
  40dac5:	nop    DWORD PTR [rax]
  40dac8:	mov    rsi,r13
  40dacb:	mov    rdx,rbx
  40dace:	mov    rdi,r15
  40dad1:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dad6:	mov    r13,rax
  40dad9:	jmp    40cf94 <_start@@Base+0x9c64>
  40dade:	xchg   ax,ax
  40dae0:	mov    rsi,r13
  40dae3:	mov    rdx,rbx
  40dae6:	mov    rdi,r15
  40dae9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40daee:	mov    r13,rax
  40daf1:	jmp    40b830 <_start@@Base+0x8500>
  40daf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40db00:	movbe  rax,QWORD PTR [r13+0x0]
  40db06:	jmp    40cff3 <_start@@Base+0x9cc3>
  40db0b:	nop    DWORD PTR [rax+rax*1+0x0]
  40db10:	movbe  rax,QWORD PTR [r13+0x0]
  40db16:	jmp    40b88d <_start@@Base+0x855d>
  40db1b:	nop    DWORD PTR [rax+rax*1+0x0]
  40db20:	inc    r13
  40db23:	mov    DWORD PTR [r15+0x14],0x0
  40db2b:	jmp    40cfd8 <_start@@Base+0x9ca8>
  40db30:	inc    r13
  40db33:	mov    DWORD PTR [r15+0x14],0x0
  40db3b:	jmp    40b872 <_start@@Base+0x8542>
  40db40:	cmp    r8,0x7
  40db44:	jle    40dac8 <_start@@Base+0xa798>
  40db46:	mov    ecx,0x7
  40db4b:	mov    rdx,rbx
  40db4e:	mov    rsi,r13
  40db51:	mov    rdi,r15
  40db54:	call   407470 <_start@@Base+0x4140>
  40db59:	cmp    rax,r13
  40db5c:	je     40dac8 <_start@@Base+0xa798>
  40db62:	lea    rcx,[rsp+0x50]
  40db67:	mov    r8d,0x1
  40db6d:	mov    rdx,rbx
  40db70:	mov    rsi,rax
  40db73:	mov    rdi,r15
  40db76:	call   4185a0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40db7b:	mov    r13,rax
  40db7e:	mov    eax,DWORD PTR [rsp+0x50]
  40db82:	test   eax,eax
  40db84:	je     40d087 <_start@@Base+0x9d57>
  40db8a:	mov    rdi,QWORD PTR [r15]
  40db8d:	mov    esi,0x1
  40db92:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40db97:	test   rax,rax
  40db9a:	jne    40cf8e <_start@@Base+0x9c5e>
  40dba0:	jmp    40d087 <_start@@Base+0x9d57>
  40dba5:	nop    DWORD PTR [rax]
  40dba8:	mov    rbp,rbx
  40dbab:	xor    eax,eax
  40dbad:	jmp    40c3e7 <_start@@Base+0x90b7>
  40dbb2:	nop    WORD PTR [rax+rax*1+0x0]
  40dbb8:	cmp    r8,0x3
  40dbbc:	jle    40dae0 <_start@@Base+0xa7b0>
  40dbc2:	mov    ecx,0x3
  40dbc7:	mov    rdx,rbx
  40dbca:	mov    rsi,r13
  40dbcd:	mov    rdi,r15
  40dbd0:	call   407470 <_start@@Base+0x4140>
  40dbd5:	mov    r14,rax
  40dbd8:	cmp    rax,r13
  40dbdb:	je     40dae0 <_start@@Base+0xa7b0>
  40dbe1:	lea    r8,[rsp+0x50]
  40dbe6:	mov    rcx,r8
  40dbe9:	mov    rdx,rbx
  40dbec:	mov    rsi,rax
  40dbef:	mov    rdi,r15
  40dbf2:	mov    QWORD PTR [rsp],r8
  40dbf6:	mov    QWORD PTR [rsp+0x50],0x0
  40dbff:	call   4040e0 <_start@@Base+0xdb0>
  40dc04:	cmp    r14,rax
  40dc07:	mov    r13,rax
  40dc0a:	mov    r8,QWORD PTR [rsp]
  40dc0e:	je     40e904 <_start@@Base+0xb5d4>
  40dc14:	cmp    QWORD PTR [rsp+0x50],0x0
  40dc1a:	jne    40dc27 <_start@@Base+0xa8f7>
  40dc1c:	test   BYTE PTR [r15+0x10],0x2
  40dc21:	je     40b830 <_start@@Base+0x8500>
  40dc27:	mov    rdi,QWORD PTR [r15]
  40dc2a:	mov    ecx,0x8
  40dc2f:	mov    edx,0x8
  40dc34:	mov    esi,0x1
  40dc39:	call   414940 <flatcc_builder_table_add@@Base>
  40dc3e:	test   rax,rax
  40dc41:	je     40ed50 <_start@@Base+0xba20>
  40dc47:	mov    rdx,QWORD PTR [rsp+0x50]
  40dc4c:	mov    QWORD PTR [rax],rdx
  40dc4f:	jmp    40b830 <_start@@Base+0x8500>
  40dc54:	nop    DWORD PTR [rax+0x0]
  40dc58:	cmp    BYTE PTR [r13+0x4],0x65
  40dc5d:	jne    40c3a5 <_start@@Base+0x9075>
  40dc63:	mov    BYTE PTR [rsp+0x3c],0x0
  40dc68:	lea    rbp,[r13+0x5]
  40dc6c:	jmp    40c3eb <_start@@Base+0x90bb>
  40dc71:	nop    DWORD PTR [rax+0x0]
  40dc78:	mov    BYTE PTR [rsp+0x3c],0x1
  40dc7d:	lea    rbp,[r13+0x4]
  40dc81:	jmp    40c3eb <_start@@Base+0x90bb>
  40dc86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40dc90:	mov    eax,DWORD PTR [rsp+0x48]
  40dc94:	mov    ecx,0x8
  40dc99:	test   eax,eax
  40dc9b:	jne    40dcb9 <_start@@Base+0xa989>
  40dc9d:	mov    rdx,QWORD PTR [rsp+0x50]
  40dca2:	test   dl,dl
  40dca4:	setne  al
  40dca7:	cmp    rdx,0xff
  40dcae:	jbe    40c3e7 <_start@@Base+0x90b7>
  40dcb4:	mov    ecx,0x7
  40dcb9:	mov    rsi,rbp
  40dcbc:	mov    rdx,rbx
  40dcbf:	mov    rdi,r15
  40dcc2:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40dcc7:	mov    rbp,rax
  40dcca:	xor    eax,eax
  40dccc:	jmp    40c3e7 <_start@@Base+0x90b7>
  40dcd1:	mov    r8,r12
  40dcd4:	lea    rcx,[rip+0x13505]        # 4211e0 <__data_start@@Base+0x120>
  40dcdb:	mov    rdx,rbx
  40dcde:	mov    rsi,rax
  40dce1:	mov    rdi,r15
  40dce4:	call   404550 <_start@@Base+0x1220>
  40dce9:	cmp    r13,rax
  40dcec:	je     40ee3e <_start@@Base+0xbb0e>
  40dcf2:	cmp    rbx,rax
  40dcf5:	je     40ee3e <_start@@Base+0xbb0e>
  40dcfb:	mov    r13,rax
  40dcfe:	jmp    40ca0c <_start@@Base+0x96dc>
  40dd03:	mov    rsi,r13
  40dd06:	mov    rdx,rbx
  40dd09:	mov    rdi,r15
  40dd0c:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dd11:	mov    r13,rax
  40dd14:	jmp    40b520 <_start@@Base+0x81f0>
  40dd19:	mov    rdi,QWORD PTR [r15]
  40dd1c:	call   413d60 <flatcc_builder_end_vector@@Base>
  40dd21:	mov    DWORD PTR [rsp+0x34],eax
  40dd25:	test   eax,eax
  40dd27:	je     40f2c0 <_start@@Base+0xbf90>
  40dd2d:	mov    rdi,QWORD PTR [r15]
  40dd30:	mov    esi,0x9
  40dd35:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40dd3a:	test   rax,rax
  40dd3d:	je     40f2b8 <_start@@Base+0xbf88>
  40dd43:	mov    edx,DWORD PTR [rsp+0x34]
  40dd47:	mov    DWORD PTR [rax],edx
  40dd49:	jmp    40b520 <_start@@Base+0x81f0>
  40dd4e:	movbe  rax,QWORD PTR [r13+0x8]
  40dd54:	jmp    40ce6f <_start@@Base+0x9b3f>
  40dd59:	mov    rsi,r13
  40dd5c:	mov    rdx,rbx
  40dd5f:	mov    rdi,r15
  40dd62:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dd67:	mov    r13,rax
  40dd6a:	jmp    40b520 <_start@@Base+0x81f0>
  40dd6f:	mov    rsi,r13
  40dd72:	mov    rdx,rbx
  40dd75:	mov    rdi,r15
  40dd78:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dd7d:	mov    r13,rax
  40dd80:	jmp    40b520 <_start@@Base+0x81f0>
  40dd85:	mov    r13,rbx
  40dd88:	jmp    40aee6 <_start@@Base+0x7bb6>
  40dd8d:	mov    rsi,r13
  40dd90:	mov    ecx,0x5
  40dd95:	mov    rdx,rbx
  40dd98:	mov    rdi,r15
  40dd9b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40dda0:	mov    r13,rax
  40dda3:	jmp    40cfd8 <_start@@Base+0x9ca8>
  40dda8:	movbe  rax,QWORD PTR [r13+0x8]
  40ddae:	jmp    40d156 <_start@@Base+0x9e26>
  40ddb3:	mov    rsi,r13
  40ddb6:	mov    ecx,0x5
  40ddbb:	mov    rdx,rbx
  40ddbe:	mov    rdi,r15
  40ddc1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ddc6:	mov    r13,rax
  40ddc9:	jmp    40b872 <_start@@Base+0x8542>
  40ddce:	mov    edx,DWORD PTR [rsp+0x48]
  40ddd2:	mov    rax,QWORD PTR [rsp+0x50]
  40ddd7:	test   edx,edx
  40ddd9:	je     40e623 <_start@@Base+0xb2f3>
  40dddf:	mov    ecx,0x8
  40dde4:	cmp    rax,0x80
  40ddea:	ja     40ec7f <_start@@Base+0xb94f>
  40ddf0:	mov    edx,eax
  40ddf2:	neg    edx
  40ddf4:	mov    BYTE PTR [rsp+0x3c],dl
  40ddf8:	jmp    40af20 <_start@@Base+0x7bf0>
  40ddfd:	movbe  rax,QWORD PTR [r13+0x8]
  40de03:	jmp    40d20f <_start@@Base+0x9edf>
  40de08:	cmp    BYTE PTR [rsi+0x1],0x20
  40de0c:	jle    40caac <_start@@Base+0x977c>
  40de12:	inc    rsi
  40de15:	jmp    40caba <_start@@Base+0x978a>
  40de1a:	lea    rbp,[r13+0x10]
  40de1e:	mov    r8,rbx
  40de21:	sub    r8,rbp
  40de24:	cmp    r8,0x7
  40de28:	ja     40e951 <_start@@Base+0xb621>
  40de2e:	mov    rsi,rbx
  40de31:	mov    rdi,rbp
  40de34:	call   403420 <_start@@Base+0xf0>
  40de39:	movabs rdx,0xff00000000000000
  40de43:	and    rax,rdx
  40de46:	movabs rdx,0x7300000000000000
  40de50:	cmp    rax,rdx
  40de53:	jne    40e64e <_start@@Base+0xb31e>
  40de59:	cmp    r8,0x1
  40de5d:	jle    40ea38 <_start@@Base+0xb708>
  40de63:	mov    ecx,0x1
  40de68:	mov    rdx,rbx
  40de6b:	mov    rsi,rbp
  40de6e:	mov    rdi,r15
  40de71:	call   407470 <_start@@Base+0x4140>
  40de76:	mov    r13,rax
  40de79:	cmp    rbp,rax
  40de7c:	je     40ea38 <_start@@Base+0xb708>
  40de82:	mov    rdi,QWORD PTR [r15]
  40de85:	mov    ecx,0x1fffffff
  40de8a:	mov    edx,0x8
  40de8f:	mov    esi,0x8
  40de94:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40de99:	test   eax,eax
  40de9b:	jne    40f3eb <_start@@Base+0xc0bb>
  40dea1:	mov    rsi,r13
  40dea4:	mov    rcx,r14
  40dea7:	mov    rdx,rbx
  40deaa:	mov    rdi,r15
  40dead:	call   40ac40 <_start@@Base+0x7910>
  40deb2:	mov    r8d,DWORD PTR [rsp+0x30]
  40deb7:	mov    r13,rax
  40deba:	test   r8d,r8d
  40debd:	je     40ef33 <_start@@Base+0xbc03>
  40dec3:	lea    rbp,[rsp+0x50]
  40dec8:	jmp    40defc <_start@@Base+0xabcc>
  40deca:	nop    WORD PTR [rax+rax*1+0x0]
  40ded0:	vmovsd xmm0,QWORD PTR [rsp+0x50]
  40ded6:	mov    rdi,r15
  40ded9:	vmovsd QWORD PTR [r12],xmm0
  40dedf:	mov    rcx,r14
  40dee2:	mov    rdx,rbx
  40dee5:	mov    rsi,rax
  40dee8:	call   406740 <_start@@Base+0x3410>
  40deed:	mov    edi,DWORD PTR [rsp+0x30]
  40def1:	mov    r13,rax
  40def4:	test   edi,edi
  40def6:	je     40ef33 <_start@@Base+0xbc03>
  40defc:	mov    rdi,QWORD PTR [r15]
  40deff:	mov    esi,0x1
  40df04:	mov    QWORD PTR [rsp+0x50],0x0
  40df0d:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40df12:	mov    r12,rax
  40df15:	test   rax,rax
  40df18:	je     40ef2b <_start@@Base+0xbbfb>
  40df1e:	mov    rcx,rbp
  40df21:	mov    rdx,rbx
  40df24:	mov    rsi,r13
  40df27:	mov    rdi,r15
  40df2a:	call   417630 <flatcc_json_parser_double@@Base>
  40df2f:	cmp    rax,r13
  40df32:	jne    40ded0 <_start@@Base+0xaba0>
  40df34:	mov    r8,rbp
  40df37:	lea    rcx,[rip+0x13602]        # 421540 <__data_start@@Base+0x480>
  40df3e:	mov    rdx,rbx
  40df41:	mov    rsi,r13
  40df44:	mov    rdi,r15
  40df47:	call   404780 <_start@@Base+0x1450>
  40df4c:	cmp    rax,r13
  40df4f:	je     40df5a <_start@@Base+0xac2a>
  40df51:	cmp    rbx,rax
  40df54:	jne    40ded0 <_start@@Base+0xaba0>
  40df5a:	mov    r14,rax
  40df5d:	jmp    40ad43 <_start@@Base+0x7a13>
  40df62:	nop    WORD PTR [rax+rax*1+0x0]
  40df68:	movbe  rax,QWORD PTR [r13+0x8]
  40df6e:	jmp    40bf92 <_start@@Base+0x8c62>
  40df73:	cmp    BYTE PTR [rsi+0x1],0x20
  40df77:	jle    40baa9 <_start@@Base+0x8779>
  40df7d:	inc    rsi
  40df80:	jmp    40bab7 <_start@@Base+0x8787>
  40df85:	mov    rsi,r13
  40df88:	mov    rdx,rbx
  40df8b:	mov    rdi,r15
  40df8e:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40df93:	mov    r13,rax
  40df96:	jmp    40b520 <_start@@Base+0x81f0>
  40df9b:	movbe  rax,QWORD PTR [r13+0x8]
  40dfa1:	jmp    40b691 <_start@@Base+0x8361>
  40dfa6:	movbe  rax,QWORD PTR [r13+0x8]
  40dfac:	jmp    40b268 <_start@@Base+0x7f38>
  40dfb1:	mov    rdi,QWORD PTR [r15]
  40dfb4:	call   413d60 <flatcc_builder_end_vector@@Base>
  40dfb9:	mov    DWORD PTR [rsp+0x34],eax
  40dfbd:	test   eax,eax
  40dfbf:	je     40f2e8 <_start@@Base+0xbfb8>
  40dfc5:	mov    rdi,QWORD PTR [r15]
  40dfc8:	mov    esi,0x1f
  40dfcd:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40dfd2:	test   rax,rax
  40dfd5:	je     40f2e0 <_start@@Base+0xbfb0>
  40dfdb:	mov    edx,DWORD PTR [rsp+0x34]
  40dfdf:	mov    DWORD PTR [rax],edx
  40dfe1:	jmp    40b520 <_start@@Base+0x81f0>
  40dfe6:	mov    rdx,rbx
  40dfe9:	mov    rsi,rbp
  40dfec:	mov    rdi,r15
  40dfef:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dff4:	mov    r13,rax
  40dff7:	jmp    40b520 <_start@@Base+0x81f0>
  40dffc:	mov    r10,rbx
  40dfff:	jmp    40b7b7 <_start@@Base+0x8487>
  40e004:	mov    r14,QWORD PTR [rsp+0x8]
  40e009:	mov    r13,rax
  40e00c:	mov    rsi,r13
  40e00f:	mov    ecx,0x21
  40e014:	mov    rdx,rbx
  40e017:	mov    rdi,r15
  40e01a:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40e01f:	mov    r13,rax
  40e022:	mov    eax,DWORD PTR [rsp+0x34]
  40e026:	test   eax,eax
  40e028:	je     40f372 <_start@@Base+0xc042>
  40e02e:	mov    rdi,QWORD PTR [r15]
  40e031:	mov    esi,0xe
  40e036:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40e03b:	test   rax,rax
  40e03e:	je     40f36a <_start@@Base+0xc03a>
  40e044:	mov    edx,DWORD PTR [rsp+0x34]
  40e048:	mov    DWORD PTR [rax],edx
  40e04a:	jmp    40b520 <_start@@Base+0x81f0>
  40e04f:	mov    rdi,QWORD PTR [r15]
  40e052:	call   413d60 <flatcc_builder_end_vector@@Base>
  40e057:	mov    DWORD PTR [rsp+0x34],eax
  40e05b:	test   eax,eax
  40e05d:	je     40f382 <_start@@Base+0xc052>
  40e063:	mov    rdi,QWORD PTR [r15]
  40e066:	mov    esi,0x1e
  40e06b:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40e070:	test   rax,rax
  40e073:	je     40f37a <_start@@Base+0xc04a>
  40e079:	mov    edx,DWORD PTR [rsp+0x34]
  40e07d:	mov    DWORD PTR [rax],edx
  40e07f:	jmp    40b520 <_start@@Base+0x81f0>
  40e084:	mov    r14,r13
  40e087:	jmp    40ad43 <_start@@Base+0x7a13>
  40e08c:	movbe  rdx,QWORD PTR [r13+0x10]
  40e092:	movabs rcx,0x6473747275637400
  40e09c:	xor    dl,dl
  40e09e:	cmp    rdx,rcx
  40e0a1:	jne    40b630 <_start@@Base+0x8300>
  40e0a7:	cmp    rax,0x7
  40e0ab:	jle    40da75 <_start@@Base+0xa745>
  40e0b1:	mov    ecx,0x7
  40e0b6:	mov    rdx,rbx
  40e0b9:	mov    rsi,rbp
  40e0bc:	mov    rdi,r15
  40e0bf:	call   407470 <_start@@Base+0x4140>
  40e0c4:	mov    r13,rax
  40e0c7:	cmp    rbp,rax
  40e0ca:	je     40da72 <_start@@Base+0xa742>
  40e0d0:	mov    rdi,QWORD PTR [r15]
  40e0d3:	mov    ecx,0x1fffffff
  40e0d8:	mov    edx,0x4
  40e0dd:	mov    esi,0x8
  40e0e2:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40e0e7:	test   eax,eax
  40e0e9:	jne    40f35a <_start@@Base+0xc02a>
  40e0ef:	mov    rsi,r13
  40e0f2:	mov    rcx,r14
  40e0f5:	mov    rdx,rbx
  40e0f8:	mov    rdi,r15
  40e0fb:	call   40ac40 <_start@@Base+0x7910>
  40e100:	mov    r13,rax
  40e103:	mov    eax,DWORD PTR [rsp+0x30]
  40e107:	test   eax,eax
  40e109:	je     40e3b1 <_start@@Base+0xb081>
  40e10f:	mov    QWORD PTR [rsp+0x18],r14
  40e114:	movabs r12,0xffff000000000000
  40e11e:	xchg   ax,ax
  40e120:	mov    rdi,QWORD PTR [r15]
  40e123:	mov    esi,0x1
  40e128:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40e12d:	mov    r14,rax
  40e130:	test   rax,rax
  40e133:	je     40ea30 <_start@@Base+0xb700>
  40e139:	lea    rbp,[rsp+0x48]
  40e13e:	mov    rsi,r13
  40e141:	mov    rcx,rbp
  40e144:	mov    rdx,rbx
  40e147:	mov    rdi,r15
  40e14a:	call   4083c0 <_start@@Base+0x5090>
  40e14f:	mov    r13,rax
  40e152:	mov    eax,DWORD PTR [rsp+0x48]
  40e156:	test   eax,eax
  40e158:	je     40e388 <_start@@Base+0xb058>
  40e15e:	lea    rax,[rsp+0x50]
  40e163:	mov    QWORD PTR [rsp],rax
  40e167:	mov    rax,r13
  40e16a:	mov    r13,r14
  40e16d:	mov    r14,rax
  40e170:	jmp    40e22d <_start@@Base+0xaefd>
  40e175:	nop    DWORD PTR [rax]
  40e178:	mov    rsi,rbx
  40e17b:	mov    rdi,r14
  40e17e:	call   403420 <_start@@Base+0xf0>
  40e183:	mov    rdx,rax
  40e186:	and    rdx,r12
  40e189:	movabs rdi,0x6964000000000000
  40e193:	cmp    rdx,rdi
  40e196:	je     40e288 <_start@@Base+0xaf58>
  40e19c:	movabs rcx,0x64697374616e6365
  40e1a6:	cmp    rax,rcx
  40e1a9:	jne    40e270 <_start@@Base+0xaf40>
  40e1af:	cmp    r9,0x8
  40e1b3:	jle    40e270 <_start@@Base+0xaf40>
  40e1b9:	mov    ecx,0x8
  40e1be:	mov    rdx,rbx
  40e1c1:	mov    rsi,r14
  40e1c4:	mov    rdi,r15
  40e1c7:	call   407470 <_start@@Base+0x4140>
  40e1cc:	cmp    rax,r14
  40e1cf:	je     40e270 <_start@@Base+0xaf40>
  40e1d5:	mov    rcx,QWORD PTR [rsp]
  40e1d9:	mov    rdx,rbx
  40e1dc:	mov    rsi,rax
  40e1df:	mov    rdi,r15
  40e1e2:	mov    DWORD PTR [rsp+0x50],0x0
  40e1ea:	mov    QWORD PTR [rsp+0x8],rax
  40e1ef:	call   4042a0 <_start@@Base+0xf70>
  40e1f4:	mov    r10,QWORD PTR [rsp+0x8]
  40e1f9:	mov    r14,rax
  40e1fc:	cmp    r10,rax
  40e1ff:	je     40e340 <_start@@Base+0xb010>
  40e205:	mov    eax,DWORD PTR [rsp+0x50]
  40e209:	mov    DWORD PTR [r13+0x4],eax
  40e20d:	mov    rsi,r14
  40e210:	mov    rcx,rbp
  40e213:	mov    rdx,rbx
  40e216:	mov    rdi,r15
  40e219:	call   4065f0 <_start@@Base+0x32c0>
  40e21e:	mov    r14,rax
  40e221:	mov    eax,DWORD PTR [rsp+0x48]
  40e225:	test   eax,eax
  40e227:	je     40e3f0 <_start@@Base+0xb0c0>
  40e22d:	cmp    rbx,r14
  40e230:	je     40e24e <_start@@Base+0xaf1e>
  40e232:	movzx  eax,BYTE PTR [r14]
  40e236:	cmp    al,0x22
  40e238:	je     40e2e0 <_start@@Base+0xafb0>
  40e23e:	cmp    al,0x2e
  40e240:	je     40e2f0 <_start@@Base+0xafc0>
  40e246:	mov    DWORD PTR [r15+0x14],0x1
  40e24e:	mov    r9,rbx
  40e251:	sub    r9,r14
  40e254:	cmp    r9,0x7
  40e258:	jbe    40e178 <_start@@Base+0xae48>
  40e25e:	movbe  rax,QWORD PTR [r14]
  40e263:	jmp    40e183 <_start@@Base+0xae53>
  40e268:	nop    DWORD PTR [rax+rax*1+0x0]
  40e270:	mov    rsi,r14
  40e273:	mov    rdx,rbx
  40e276:	mov    rdi,r15
  40e279:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e27e:	mov    r14,rax
  40e281:	jmp    40e20d <_start@@Base+0xaedd>
  40e283:	nop    DWORD PTR [rax+rax*1+0x0]
  40e288:	cmp    r9,0x2
  40e28c:	jle    40e270 <_start@@Base+0xaf40>
  40e28e:	mov    ecx,0x2
  40e293:	mov    rdx,rbx
  40e296:	mov    rsi,r14
  40e299:	mov    rdi,r15
  40e29c:	call   407470 <_start@@Base+0x4140>
  40e2a1:	cmp    rax,r14
  40e2a4:	je     40e270 <_start@@Base+0xaf40>
  40e2a6:	mov    rcx,QWORD PTR [rsp]
  40e2aa:	mov    rdx,rbx
  40e2ad:	mov    rsi,rax
  40e2b0:	mov    rdi,r15
  40e2b3:	mov    DWORD PTR [rsp+0x50],0x0
  40e2bb:	mov    QWORD PTR [rsp+0x8],rax
  40e2c0:	call   4042a0 <_start@@Base+0xf70>
  40e2c5:	mov    r10,QWORD PTR [rsp+0x8]
  40e2ca:	mov    r14,rax
  40e2cd:	cmp    r10,rax
  40e2d0:	je     40e310 <_start@@Base+0xafe0>
  40e2d2:	mov    eax,DWORD PTR [rsp+0x50]
  40e2d6:	mov    DWORD PTR [r13+0x0],eax
  40e2da:	jmp    40e20d <_start@@Base+0xaedd>
  40e2df:	nop
  40e2e0:	inc    r14
  40e2e3:	mov    DWORD PTR [r15+0x14],0x0
  40e2eb:	jmp    40e24e <_start@@Base+0xaf1e>
  40e2f0:	mov    rsi,r14
  40e2f3:	mov    ecx,0x5
  40e2f8:	mov    rdx,rbx
  40e2fb:	mov    rdi,r15
  40e2fe:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40e303:	mov    r14,rax
  40e306:	jmp    40e24e <_start@@Base+0xaf1e>
  40e30b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e310:	mov    r8,QWORD PTR [rsp]
  40e314:	lea    rcx,[rip+0x12e25]        # 421140 <__data_start@@Base+0x80>
  40e31b:	mov    rdx,rbx
  40e31e:	mov    rsi,rax
  40e321:	mov    rdi,r15
  40e324:	call   404e50 <_start@@Base+0x1b20>
  40e329:	cmp    r14,rax
  40e32c:	je     40e36b <_start@@Base+0xb03b>
  40e32e:	cmp    rbx,rax
  40e331:	je     40e36b <_start@@Base+0xb03b>
  40e333:	mov    r14,rax
  40e336:	jmp    40e2d2 <_start@@Base+0xafa2>
  40e338:	nop    DWORD PTR [rax+rax*1+0x0]
  40e340:	mov    r8,QWORD PTR [rsp]
  40e344:	lea    rcx,[rip+0x12dd5]        # 421120 <__data_start@@Base+0x60>
  40e34b:	mov    rdx,rbx
  40e34e:	mov    rsi,rax
  40e351:	mov    rdi,r15
  40e354:	call   404e50 <_start@@Base+0x1b20>
  40e359:	cmp    r14,rax
  40e35c:	je     40e36b <_start@@Base+0xb03b>
  40e35e:	cmp    rbx,rax
  40e361:	je     40e36b <_start@@Base+0xb03b>
  40e363:	mov    r14,rax
  40e366:	jmp    40e205 <_start@@Base+0xaed5>
  40e36b:	mov    ecx,0x21
  40e370:	mov    rdx,rbx
  40e373:	mov    rsi,rax
  40e376:	mov    rdi,r15
  40e379:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40e37e:	mov    r13,rax
  40e381:	nop    DWORD PTR [rax+0x0]
  40e388:	mov    rcx,QWORD PTR [rsp+0x18]
  40e38d:	mov    rsi,r13
  40e390:	mov    rdx,rbx
  40e393:	mov    rdi,r15
  40e396:	call   406740 <_start@@Base+0x3410>
  40e39b:	mov    r11d,DWORD PTR [rsp+0x30]
  40e3a0:	mov    r13,rax
  40e3a3:	test   r11d,r11d
  40e3a6:	jne    40e120 <_start@@Base+0xadf0>
  40e3ac:	mov    r14,QWORD PTR [rsp+0x18]
  40e3b1:	mov    rdi,QWORD PTR [r15]
  40e3b4:	call   413d60 <flatcc_builder_end_vector@@Base>
  40e3b9:	mov    DWORD PTR [rsp+0x34],eax
  40e3bd:	test   eax,eax
  40e3bf:	je     40f4db <_start@@Base+0xc1ab>
  40e3c5:	mov    rdi,QWORD PTR [r15]
  40e3c8:	mov    esi,0x1d
  40e3cd:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40e3d2:	test   rax,rax
  40e3d5:	je     40f4d3 <_start@@Base+0xc1a3>
  40e3db:	mov    edx,DWORD PTR [rsp+0x34]
  40e3df:	mov    DWORD PTR [rax],edx
  40e3e1:	jmp    40b520 <_start@@Base+0x81f0>
  40e3e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40e3f0:	mov    r13,r14
  40e3f3:	jmp    40e388 <_start@@Base+0xb058>
  40e3f5:	mov    ecx,DWORD PTR [rsp+0x48]
  40e3f9:	test   ecx,ecx
  40e3fb:	jne    40ed28 <_start@@Base+0xb9f8>
  40e401:	mov    rdx,QWORD PTR [rsp+0x50]
  40e406:	cmp    rdx,0xffff
  40e40d:	ja     40ee1e <_start@@Base+0xbaee>
  40e413:	mov    eax,edx
  40e415:	mov    WORD PTR [rsp+0x2e],dx
  40e41a:	mov    r13,r10
  40e41d:	jmp    40b7f3 <_start@@Base+0x84c3>
  40e422:	cmp    BYTE PTR [rsi+0x1],0x20
  40e426:	jle    40c824 <_start@@Base+0x94f4>
  40e42c:	inc    rsi
  40e42f:	jmp    40c832 <_start@@Base+0x9502>
  40e434:	mov    rsi,r13
  40e437:	mov    rdx,rbx
  40e43a:	mov    rdi,r15
  40e43d:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e442:	mov    r13,rax
  40e445:	jmp    40b520 <_start@@Base+0x81f0>
  40e44a:	cmp    BYTE PTR [rsi+0x1],0x20
  40e44e:	jle    40c9a0 <_start@@Base+0x9670>
  40e454:	inc    rsi
  40e457:	jmp    40c9ae <_start@@Base+0x967e>
  40e45c:	mov    rdx,rbx
  40e45f:	mov    rsi,rbp
  40e462:	mov    rdi,r15
  40e465:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e46a:	mov    r13,rax
  40e46d:	jmp    40b520 <_start@@Base+0x81f0>
  40e472:	mov    rdx,rbx
  40e475:	mov    rsi,rbp
  40e478:	mov    rdi,r15
  40e47b:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e480:	mov    r13,rax
  40e483:	jmp    40b520 <_start@@Base+0x81f0>
  40e488:	mov    rdx,rbx
  40e48b:	mov    rsi,rbp
  40e48e:	mov    rdi,r15
  40e491:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e496:	mov    r13,rax
  40e499:	jmp    40b520 <_start@@Base+0x81f0>
  40e49e:	cmp    r8,0x2
  40e4a2:	jle    40e7f1 <_start@@Base+0xb4c1>
  40e4a8:	mov    ecx,0x2
  40e4ad:	mov    rdx,rbx
  40e4b0:	mov    rsi,rbp
  40e4b3:	mov    rdi,r15
  40e4b6:	call   407470 <_start@@Base+0x4140>
  40e4bb:	mov    r13,rax
  40e4be:	cmp    rbp,rax
  40e4c1:	je     40e7f1 <_start@@Base+0xb4c1>
  40e4c7:	mov    rdi,QWORD PTR [r15]
  40e4ca:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  40e4cf:	test   eax,eax
  40e4d1:	jne    40f42b <_start@@Base+0xc0fb>
  40e4d7:	mov    rsi,r13
  40e4da:	mov    rcx,r14
  40e4dd:	mov    rdx,rbx
  40e4e0:	mov    rdi,r15
  40e4e3:	call   40ac40 <_start@@Base+0x7910>
  40e4e8:	mov    r10d,DWORD PTR [rsp+0x30]
  40e4ed:	mov    r13,rax
  40e4f0:	test   r10d,r10d
  40e4f3:	je     40ee85 <_start@@Base+0xbb55>
  40e4f9:	lea    rbp,[rsp+0x34]
  40e4fe:	jmp    40e53e <_start@@Base+0xb20e>
  40e500:	mov    rdi,QWORD PTR [r15]
  40e503:	mov    esi,0x1
  40e508:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  40e50d:	test   rax,rax
  40e510:	je     40eeee <_start@@Base+0xbbbe>
  40e516:	mov    edx,DWORD PTR [rsp+0x34]
  40e51a:	mov    rsi,r13
  40e51d:	mov    DWORD PTR [rax],edx
  40e51f:	mov    rcx,r14
  40e522:	mov    rdx,rbx
  40e525:	mov    rdi,r15
  40e528:	call   406740 <_start@@Base+0x3410>
  40e52d:	mov    r8d,DWORD PTR [rsp+0x30]
  40e532:	mov    r13,rax
  40e535:	test   r8d,r8d
  40e538:	je     40ee85 <_start@@Base+0xbb55>
  40e53e:	mov    rsi,r13
  40e541:	mov    rcx,rbp
  40e544:	mov    rdx,rbx
  40e547:	mov    rdi,r15
  40e54a:	call   418a60 <flatcc_json_parser_build_string@@Base>
  40e54f:	mov    r9d,DWORD PTR [rsp+0x34]
  40e554:	mov    r13,rax
  40e557:	test   r9d,r9d
  40e55a:	jne    40e500 <_start@@Base+0xb1d0>
  40e55c:	mov    r14,rax
  40e55f:	jmp    40ad43 <_start@@Base+0x7a13>
  40e564:	mov    rdx,rbx
  40e567:	mov    rsi,rbp
  40e56a:	mov    rdi,r15
  40e56d:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e572:	mov    r13,rax
  40e575:	jmp    40b520 <_start@@Base+0x81f0>
  40e57a:	mov    rdi,QWORD PTR [r15]
  40e57d:	call   413d60 <flatcc_builder_end_vector@@Base>
  40e582:	mov    DWORD PTR [rsp+0x34],eax
  40e586:	test   eax,eax
  40e588:	je     40f2f8 <_start@@Base+0xbfc8>
  40e58e:	mov    rdi,QWORD PTR [r15]
  40e591:	mov    esi,0x18
  40e596:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40e59b:	test   rax,rax
  40e59e:	je     40f2f0 <_start@@Base+0xbfc0>
  40e5a4:	mov    edx,DWORD PTR [rsp+0x34]
  40e5a8:	mov    DWORD PTR [rax],edx
  40e5aa:	jmp    40b520 <_start@@Base+0x81f0>
  40e5af:	lea    r9,[rsi+0x1]
  40e5b3:	mov    rax,rbx
  40e5b6:	sub    rax,r9
  40e5b9:	cmp    rax,0x1
  40e5bd:	jle    40e5cf <_start@@Base+0xb29f>
  40e5bf:	cmp    BYTE PTR [rsi+0x1],0x20
  40e5c3:	jg     40bad8 <_start@@Base+0x87a8>
  40e5c9:	je     40ef70 <_start@@Base+0xbc40>
  40e5cf:	mov    rsi,r9
  40e5d2:	mov    rdx,rbx
  40e5d5:	mov    rdi,r15
  40e5d8:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40e5dd:	mov    r9,rax
  40e5e0:	jmp    40bad8 <_start@@Base+0x87a8>
  40e5e5:	lea    r9,[rsi+0x1]
  40e5e9:	mov    rax,rbx
  40e5ec:	sub    rax,r9
  40e5ef:	cmp    rax,0x1
  40e5f3:	jle    40e605 <_start@@Base+0xb2d5>
  40e5f5:	cmp    BYTE PTR [rsi+0x1],0x20
  40e5f9:	jg     40cadb <_start@@Base+0x97ab>
  40e5ff:	je     40eedb <_start@@Base+0xbbab>
  40e605:	mov    rsi,r9
  40e608:	mov    rdx,rbx
  40e60b:	mov    rdi,r15
  40e60e:	call   416950 <flatcc_json_parser_space_ext@@Base>
  40e613:	mov    r9,rax
  40e616:	jmp    40cadb <_start@@Base+0x97ab>
  40e61b:	mov    r14,r13
  40e61e:	jmp    40ad43 <_start@@Base+0x7a13>
  40e623:	cmp    rax,0x7f
  40e627:	ja     40ec7a <_start@@Base+0xb94a>
  40e62d:	mov    edx,eax
  40e62f:	mov    BYTE PTR [rsp+0x3c],al
  40e633:	jmp    40af20 <_start@@Base+0x7bf0>
  40e638:	mov    rdx,rbx
  40e63b:	mov    rsi,rbp
  40e63e:	mov    rdi,r15
  40e641:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e646:	mov    r13,rax
  40e649:	jmp    40b520 <_start@@Base+0x81f0>
  40e64e:	mov    rdx,rbx
  40e651:	mov    rsi,rbp
  40e654:	mov    rdi,r15
  40e657:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e65c:	mov    r13,rax
  40e65f:	jmp    40b520 <_start@@Base+0x81f0>
  40e664:	mov    rdx,rbx
  40e667:	mov    rsi,rbp
  40e66a:	mov    rdi,r15
  40e66d:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e672:	mov    r13,rax
  40e675:	jmp    40b520 <_start@@Base+0x81f0>
  40e67a:	mov    r8,r12
  40e67d:	lea    rcx,[rip+0x12b3c]        # 4211c0 <__data_start@@Base+0x100>
  40e684:	mov    rdx,rbx
  40e687:	mov    rsi,rax
  40e68a:	mov    rdi,r15
  40e68d:	call   404550 <_start@@Base+0x1220>
  40e692:	cmp    r13,rax
  40e695:	je     40ee3e <_start@@Base+0xbb0e>
  40e69b:	cmp    rbx,rax
  40e69e:	je     40ee3e <_start@@Base+0xbb0e>
  40e6a4:	mov    r13,rax
  40e6a7:	jmp    40ce3a <_start@@Base+0x9b0a>
  40e6ac:	mov    rsi,r9
  40e6af:	mov    r8,r12
  40e6b2:	lea    rcx,[rip+0x12ae7]        # 4211a0 <__data_start@@Base+0xe0>
  40e6b9:	mov    rdx,rbx
  40e6bc:	mov    rdi,r15
  40e6bf:	call   404550 <_start@@Base+0x1220>
  40e6c4:	mov    r9,QWORD PTR [rsp+0x8]
  40e6c9:	cmp    r9,rax
  40e6cc:	je     40ee3e <_start@@Base+0xbb0e>
  40e6d2:	cmp    rbx,rax
  40e6d5:	je     40ee3e <_start@@Base+0xbb0e>
  40e6db:	mov    r13,rax
  40e6de:	jmp    40cc6d <_start@@Base+0x993d>
  40e6e3:	mov    r8,r12
  40e6e6:	lea    rcx,[rip+0x12fb3]        # 4216a0 <__data_start@@Base+0x5e0>
  40e6ed:	mov    rdx,rbx
  40e6f0:	mov    rsi,rax
  40e6f3:	mov    rdi,r15
  40e6f6:	call   404550 <_start@@Base+0x1220>
  40e6fb:	cmp    r13,rax
  40e6fe:	je     40f3ae <_start@@Base+0xc07e>
  40e704:	cmp    rbx,rax
  40e707:	je     40f3ae <_start@@Base+0xc07e>
  40e70d:	mov    r13,rax
  40e710:	jmp    40c129 <_start@@Base+0x8df9>
  40e715:	mov    rsi,r14
  40e718:	mov    ecx,0x1d
  40e71d:	mov    rdx,rbx
  40e720:	mov    rdi,r15
  40e723:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40e728:	mov    r14,rax
  40e72b:	jmp    40ad43 <_start@@Base+0x7a13>
  40e730:	mov    BYTE PTR [rsp+0x3c],0x1
  40e735:	lea    r13,[rbp+0x4]
  40e739:	jmp    40c75e <_start@@Base+0x942e>
  40e73e:	mov    r8d,DWORD PTR [rsp+0x48]
  40e743:	mov    ecx,0x8
  40e748:	test   r8d,r8d
  40e74b:	jne    40ed5f <_start@@Base+0xba2f>
  40e751:	mov    rax,QWORD PTR [rsp+0x50]
  40e756:	cmp    rax,0xff
  40e75c:	ja     40ed5a <_start@@Base+0xba2a>
  40e762:	test   al,al
  40e764:	setne  al
  40e767:	mov    BYTE PTR [rsp+0x3c],al
  40e76b:	mov    r13,r12
  40e76e:	jmp    40c756 <_start@@Base+0x9426>
  40e773:	inc    rsi
  40e776:	mov    rdx,rbx
  40e779:	mov    rdi,r15
  40e77c:	call   403550 <_start@@Base+0x220>
  40e781:	mov    rsi,rax
  40e784:	jmp    40c853 <_start@@Base+0x9523>
  40e789:	inc    rsi
  40e78c:	mov    rdx,rbx
  40e78f:	mov    rdi,r15
  40e792:	call   403550 <_start@@Base+0x220>
  40e797:	mov    r9,rax
  40e79a:	jmp    40c9cf <_start@@Base+0x969f>
  40e79f:	mov    rdx,rbx
  40e7a2:	mov    rsi,rbp
  40e7a5:	mov    rdi,r15
  40e7a8:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e7ad:	mov    r13,rax
  40e7b0:	jmp    40b520 <_start@@Base+0x81f0>
  40e7b5:	mov    r10d,DWORD PTR [r15+0x20]
  40e7b9:	test   r10d,r10d
  40e7bc:	jne    40d087 <_start@@Base+0x9d57>
  40e7c2:	mov    rdi,QWORD PTR [r15]
  40e7c5:	call   413a40 <flatcc_builder_end_table@@Base>
  40e7ca:	mov    DWORD PTR [rsp+0x34],eax
  40e7ce:	test   eax,eax
  40e7d0:	jne    40d0ab <_start@@Base+0x9d7b>
  40e7d6:	jmp    40d087 <_start@@Base+0x9d57>
  40e7db:	mov    rdx,rbx
  40e7de:	mov    rsi,rbp
  40e7e1:	mov    rdi,r15
  40e7e4:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e7e9:	mov    r13,rax
  40e7ec:	jmp    40b520 <_start@@Base+0x81f0>
  40e7f1:	mov    rdx,rbx
  40e7f4:	mov    rsi,rbp
  40e7f7:	mov    rdi,r15
  40e7fa:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e7ff:	mov    r13,rax
  40e802:	jmp    40b520 <_start@@Base+0x81f0>
  40e807:	lea    r12,[rbp+0x8]
  40e80b:	mov    r8,rbx
  40e80e:	sub    r8,r12
  40e811:	cmp    r8,0x7
  40e815:	ja     40eeba <_start@@Base+0xbb8a>
  40e81b:	mov    rsi,rbx
  40e81e:	mov    rdi,r12
  40e821:	call   403420 <_start@@Base+0xf0>
  40e826:	movabs rdx,0xff00000000000000
  40e830:	and    rax,rdx
  40e833:	movabs rdx,0x6100000000000000
  40e83d:	cmp    rax,rdx
  40e840:	jne    40ed12 <_start@@Base+0xb9e2>
  40e846:	cmp    r8,0x1
  40e84a:	jle    40f057 <_start@@Base+0xbd27>
  40e850:	mov    ecx,0x1
  40e855:	mov    rdx,rbx
  40e858:	mov    rsi,r12
  40e85b:	mov    rdi,r15
  40e85e:	call   407470 <_start@@Base+0x4140>
  40e863:	mov    rbp,rax
  40e866:	cmp    r12,rax
  40e869:	je     40f057 <_start@@Base+0xbd27>
  40e86f:	lea    r12,[rsp+0x50]
  40e874:	mov    rcx,r12
  40e877:	mov    rdx,rbx
  40e87a:	mov    rsi,rax
  40e87d:	mov    rdi,r15
  40e880:	mov    QWORD PTR [rsp+0x50],0x0
  40e889:	call   4040e0 <_start@@Base+0xdb0>
  40e88e:	mov    r13,rax
  40e891:	cmp    rax,rbp
  40e894:	je     40f26e <_start@@Base+0xbf3e>
  40e89a:	cmp    QWORD PTR [rsp+0x50],0x0
  40e8a0:	jne    40e8ad <_start@@Base+0xb57d>
  40e8a2:	test   BYTE PTR [r15+0x10],0x2
  40e8a7:	je     40b520 <_start@@Base+0x81f0>
  40e8ad:	mov    rdi,QWORD PTR [r15]
  40e8b0:	mov    ecx,0x8
  40e8b5:	mov    edx,0x8
  40e8ba:	mov    esi,0x16
  40e8bf:	call   414940 <flatcc_builder_table_add@@Base>
  40e8c4:	test   rax,rax
  40e8c7:	je     40f423 <_start@@Base+0xc0f3>
  40e8cd:	mov    rdx,QWORD PTR [rsp+0x50]
  40e8d2:	mov    QWORD PTR [rax],rdx
  40e8d5:	jmp    40b520 <_start@@Base+0x81f0>
  40e8da:	mov    r14,QWORD PTR [rsp+0x8]
  40e8df:	mov    eax,DWORD PTR [r15+0x20]
  40e8e3:	test   eax,eax
  40e8e5:	jne    40e00c <_start@@Base+0xacdc>
  40e8eb:	mov    rdi,QWORD PTR [r15]
  40e8ee:	call   413a40 <flatcc_builder_end_table@@Base>
  40e8f3:	mov    DWORD PTR [rsp+0x34],eax
  40e8f7:	test   eax,eax
  40e8f9:	jne    40e02e <_start@@Base+0xacfe>
  40e8ff:	jmp    40e00c <_start@@Base+0xacdc>
  40e904:	lea    rcx,[rip+0x127d5]        # 4210e0 <__data_start@@Base+0x20>
  40e90b:	mov    rdx,rbx
  40e90e:	mov    rsi,rax
  40e911:	mov    rdi,r15
  40e914:	call   405310 <_start@@Base+0x1fe0>
  40e919:	cmp    r13,rax
  40e91c:	je     40e004 <_start@@Base+0xacd4>
  40e922:	cmp    rbx,rax
  40e925:	je     40e004 <_start@@Base+0xacd4>
  40e92b:	mov    r13,rax
  40e92e:	jmp    40dc14 <_start@@Base+0xa8e4>
  40e933:	mov    rdx,rbx
  40e936:	mov    rsi,r12
  40e939:	mov    rdi,r15
  40e93c:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e941:	mov    r13,rax
  40e944:	jmp    40b520 <_start@@Base+0x81f0>
  40e949:	mov    r13,rbp
  40e94c:	jmp    40bdfe <_start@@Base+0x8ace>
  40e951:	movbe  rax,QWORD PTR [r13+0x10]
  40e957:	jmp    40de39 <_start@@Base+0xab09>
  40e95c:	mov    rdi,QWORD PTR [r15]
  40e95f:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  40e964:	test   eax,eax
  40e966:	jne    40f473 <_start@@Base+0xc143>
  40e96c:	mov    rdx,rbx
  40e96f:	mov    rsi,r13
  40e972:	mov    rcx,r14
  40e975:	mov    rdi,r15
  40e978:	call   40ac40 <_start@@Base+0x7910>
  40e97d:	mov    edx,DWORD PTR [rsp+0x30]
  40e981:	mov    r13,rax
  40e984:	test   edx,edx
  40e986:	je     40e9e5 <_start@@Base+0xb6b5>
  40e988:	lea    rbp,[rsp+0x34]
  40e98d:	mov    rsi,r13
  40e990:	mov    rcx,rbp
  40e993:	mov    rdx,rbx
  40e996:	mov    rdi,r15
  40e999:	call   40ad00 <_start@@Base+0x79d0>
  40e99e:	mov    r13,rax
  40e9a1:	mov    eax,DWORD PTR [rsp+0x34]
  40e9a5:	test   eax,eax
  40e9a7:	je     40ef68 <_start@@Base+0xbc38>
  40e9ad:	mov    rdi,QWORD PTR [r15]
  40e9b0:	mov    esi,0x1
  40e9b5:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  40e9ba:	test   rax,rax
  40e9bd:	je     40ef8b <_start@@Base+0xbc5b>
  40e9c3:	mov    edx,DWORD PTR [rsp+0x34]
  40e9c7:	mov    rsi,r13
  40e9ca:	mov    DWORD PTR [rax],edx
  40e9cc:	mov    rcx,r14
  40e9cf:	mov    rdx,rbx
  40e9d2:	mov    rdi,r15
  40e9d5:	call   406740 <_start@@Base+0x3410>
  40e9da:	mov    r13,rax
  40e9dd:	mov    eax,DWORD PTR [rsp+0x30]
  40e9e1:	test   eax,eax
  40e9e3:	jne    40e98d <_start@@Base+0xb65d>
  40e9e5:	mov    rdi,QWORD PTR [r15]
  40e9e8:	call   413e80 <flatcc_builder_end_offset_vector@@Base>
  40e9ed:	mov    DWORD PTR [rsp+0x34],eax
  40e9f1:	test   eax,eax
  40e9f3:	je     40f48b <_start@@Base+0xc15b>
  40e9f9:	mov    rdi,QWORD PTR [r15]
  40e9fc:	mov    esi,0xb
  40ea01:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40ea06:	test   rax,rax
  40ea09:	je     40f483 <_start@@Base+0xc153>
  40ea0f:	mov    edx,DWORD PTR [rsp+0x34]
  40ea13:	mov    DWORD PTR [rax],edx
  40ea15:	jmp    40b520 <_start@@Base+0x81f0>
  40ea1a:	cmp    BYTE PTR [r12+0x2],0x20
  40ea20:	jle    40d4eb <_start@@Base+0xa1bb>
  40ea26:	lea    r13,[r12+0x2]
  40ea2b:	jmp    40b520 <_start@@Base+0x81f0>
  40ea30:	mov    r14,r13
  40ea33:	jmp    40ad43 <_start@@Base+0x7a13>
  40ea38:	mov    rdx,rbx
  40ea3b:	mov    rsi,rbp
  40ea3e:	mov    rdi,r15
  40ea41:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ea46:	mov    r13,rax
  40ea49:	jmp    40b520 <_start@@Base+0x81f0>
  40ea4e:	movbe  rax,QWORD PTR [rbp+0x8]
  40ea54:	jmp    40d8e3 <_start@@Base+0xa5b3>
  40ea59:	mov    r8,r12
  40ea5c:	lea    rcx,[rip+0x12c5d]        # 4216c0 <__data_start@@Base+0x600>
  40ea63:	mov    rdx,rbx
  40ea66:	mov    rsi,rax
  40ea69:	mov    rdi,r15
  40ea6c:	call   404550 <_start@@Base+0x1220>
  40ea71:	cmp    r13,rax
  40ea74:	je     40f3cb <_start@@Base+0xc09b>
  40ea7a:	cmp    rbx,rax
  40ea7d:	je     40f3cb <_start@@Base+0xc09b>
  40ea83:	mov    r13,rax
  40ea86:	jmp    40c693 <_start@@Base+0x9363>
  40ea8b:	lea    r12,[rbp+0x8]
  40ea8f:	mov    r8,rbx
  40ea92:	sub    r8,r12
  40ea95:	cmp    r8,0x7
  40ea99:	ja     40ef93 <_start@@Base+0xbc63>
  40ea9f:	mov    rsi,rbx
  40eaa2:	mov    rdi,r12
  40eaa5:	call   403420 <_start@@Base+0xf0>
  40eaaa:	movabs rdx,0xff00000000000000
  40eab4:	and    rax,rdx
  40eab7:	movabs rdx,0x6100000000000000
  40eac1:	cmp    rax,rdx
  40eac4:	jne    40ee6f <_start@@Base+0xbb3f>
  40eaca:	cmp    r8,0x1
  40eace:	jle    40f1b6 <_start@@Base+0xbe86>
  40ead4:	mov    ecx,0x1
  40ead9:	mov    rdx,rbx
  40eadc:	mov    rsi,r12
  40eadf:	mov    rdi,r15
  40eae2:	call   407470 <_start@@Base+0x4140>
  40eae7:	mov    rbp,rax
  40eaea:	cmp    r12,rax
  40eaed:	je     40f1b6 <_start@@Base+0xbe86>
  40eaf3:	lea    r12,[rsp+0x50]
  40eaf8:	mov    rcx,r12
  40eafb:	mov    rdx,rbx
  40eafe:	mov    rsi,rax
  40eb01:	mov    rdi,r15
  40eb04:	mov    DWORD PTR [rsp+0x50],0x0
  40eb0c:	call   4042a0 <_start@@Base+0xf70>
  40eb11:	mov    r13,rax
  40eb14:	cmp    rax,rbp
  40eb17:	je     40f300 <_start@@Base+0xbfd0>
  40eb1d:	mov    r12d,DWORD PTR [rsp+0x50]
  40eb22:	test   r12d,r12d
  40eb25:	jne    40eb32 <_start@@Base+0xb802>
  40eb27:	test   BYTE PTR [r15+0x10],0x2
  40eb2c:	je     40b520 <_start@@Base+0x81f0>
  40eb32:	mov    rdi,QWORD PTR [r15]
  40eb35:	mov    ecx,0x4
  40eb3a:	mov    edx,0x4
  40eb3f:	mov    esi,0x15
  40eb44:	call   414940 <flatcc_builder_table_add@@Base>
  40eb49:	test   rax,rax
  40eb4c:	je     40f3f3 <_start@@Base+0xc0c3>
  40eb52:	mov    edx,DWORD PTR [rsp+0x50]
  40eb56:	mov    DWORD PTR [rax],edx
  40eb58:	jmp    40b520 <_start@@Base+0x81f0>
  40eb5d:	lea    r12,[rbp+0x8]
  40eb61:	mov    r8,rbx
  40eb64:	sub    r8,r12
  40eb67:	cmp    r8,0x7
  40eb6b:	ja     40efae <_start@@Base+0xbc7e>
  40eb71:	mov    rsi,rbx
  40eb74:	mov    rdi,r12
  40eb77:	call   403420 <_start@@Base+0xf0>
  40eb7c:	movabs rdx,0xff00000000000000
  40eb86:	and    rax,rdx
  40eb89:	movabs rdx,0x6100000000000000
  40eb93:	cmp    rax,rdx
  40eb96:	jne    40ee59 <_start@@Base+0xbb29>
  40eb9c:	cmp    r8,0x1
  40eba0:	jle    40f190 <_start@@Base+0xbe60>
  40eba6:	mov    ecx,0x1
  40ebab:	mov    rdx,rbx
  40ebae:	mov    rsi,r12
  40ebb1:	mov    rdi,r15
  40ebb4:	call   407470 <_start@@Base+0x4140>
  40ebb9:	mov    rbp,rax
  40ebbc:	cmp    r12,rax
  40ebbf:	je     40f190 <_start@@Base+0xbe60>
  40ebc5:	mov    QWORD PTR [rsp+0x48],0x0
  40ebce:	mov    QWORD PTR [rsp+0x50],0x0
  40ebd7:	mov    DWORD PTR [rsp+0x3c],0x0
  40ebdf:	cmp    rbx,rax
  40ebe2:	je     40f259 <_start@@Base+0xbf29>
  40ebe8:	lea    rcx,[rsp+0x3c]
  40ebed:	lea    r8,[rsp+0x50]
  40ebf2:	mov    rdx,rbx
  40ebf5:	mov    rsi,rax
  40ebf8:	mov    rdi,r15
  40ebfb:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40ec00:	mov    r13,rax
  40ec03:	cmp    rbp,rax
  40ec06:	je     40f1eb <_start@@Base+0xbebb>
  40ec0c:	mov    r11d,DWORD PTR [rsp+0x3c]
  40ec11:	test   r11d,r11d
  40ec14:	jne    40f1cc <_start@@Base+0xbe9c>
  40ec1a:	mov    rax,QWORD PTR [rsp+0x50]
  40ec1f:	mov    QWORD PTR [rsp+0x48],rax
  40ec24:	cmp    QWORD PTR [rsp+0x48],0x0
  40ec2a:	jne    40ec37 <_start@@Base+0xb907>
  40ec2c:	test   BYTE PTR [r15+0x10],0x2
  40ec31:	je     40b520 <_start@@Base+0x81f0>
  40ec37:	mov    rdi,QWORD PTR [r15]
  40ec3a:	mov    ecx,0x8
  40ec3f:	mov    edx,0x8
  40ec44:	mov    esi,0x17
  40ec49:	call   414940 <flatcc_builder_table_add@@Base>
  40ec4e:	test   rax,rax
  40ec51:	je     40f4a3 <_start@@Base+0xc173>
  40ec57:	mov    rdx,QWORD PTR [rsp+0x48]
  40ec5c:	mov    QWORD PTR [rax],rdx
  40ec5f:	jmp    40b520 <_start@@Base+0x81f0>
  40ec64:	mov    rdx,rbx
  40ec67:	mov    rsi,rbp
  40ec6a:	mov    rdi,r15
  40ec6d:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ec72:	mov    r13,rax
  40ec75:	jmp    40b520 <_start@@Base+0x81f0>
  40ec7a:	mov    ecx,0x7
  40ec7f:	mov    rsi,r13
  40ec82:	mov    rdx,rbx
  40ec85:	mov    rdi,r15
  40ec88:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ec8d:	mov    r13,rax
  40ec90:	cmp    rbp,rax
  40ec93:	je     40aee6 <_start@@Base+0x7bb6>
  40ec99:	movzx  edx,BYTE PTR [rsp+0x3c]
  40ec9e:	jmp    40af20 <_start@@Base+0x7bf0>
  40eca3:	mov    r14,r13
  40eca6:	jmp    40ad43 <_start@@Base+0x7a13>
  40ecab:	mov    rdi,QWORD PTR [r15]
  40ecae:	call   413d60 <flatcc_builder_end_vector@@Base>
  40ecb3:	mov    DWORD PTR [rsp+0x34],eax
  40ecb7:	test   eax,eax
  40ecb9:	je     40f4bb <_start@@Base+0xc18b>
  40ecbf:	mov    rdi,QWORD PTR [r15]
  40ecc2:	mov    esi,0x20
  40ecc7:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40eccc:	test   rax,rax
  40eccf:	je     40f4b3 <_start@@Base+0xc183>
  40ecd5:	mov    edx,DWORD PTR [rsp+0x34]
  40ecd9:	mov    DWORD PTR [rax],edx
  40ecdb:	jmp    40b520 <_start@@Base+0x81f0>
  40ece0:	mov    r8,r12
  40ece3:	lea    rcx,[rip+0x12a56]        # 421740 <__data_start@@Base+0x680>
  40ecea:	mov    rdx,rbx
  40eced:	mov    rsi,rax
  40ecf0:	mov    rdi,r15
  40ecf3:	call   405580 <_start@@Base+0x2250>
  40ecf8:	cmp    r13,rax
  40ecfb:	je     40f3e3 <_start@@Base+0xc0b3>
  40ed01:	cmp    rbx,rax
  40ed04:	je     40f3e3 <_start@@Base+0xc0b3>
  40ed0a:	mov    r13,rax
  40ed0d:	jmp    40c1ff <_start@@Base+0x8ecf>
  40ed12:	mov    rdx,rbx
  40ed15:	mov    rsi,r12
  40ed18:	mov    rdi,r15
  40ed1b:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ed20:	mov    r13,rax
  40ed23:	jmp    40b520 <_start@@Base+0x81f0>
  40ed28:	mov    ecx,0x8
  40ed2d:	mov    rdx,rbx
  40ed30:	mov    rsi,r10
  40ed33:	mov    rdi,r15
  40ed36:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ed3b:	mov    r13,rax
  40ed3e:	cmp    r14,rax
  40ed41:	jne    40b7ee <_start@@Base+0x84be>
  40ed47:	mov    r10,r14
  40ed4a:	jmp    40b7b7 <_start@@Base+0x8487>
  40ed4f:	nop
  40ed50:	mov    r14,QWORD PTR [rsp+0x8]
  40ed55:	jmp    40e00c <_start@@Base+0xacdc>
  40ed5a:	mov    ecx,0x7
  40ed5f:	mov    rdx,rbx
  40ed62:	mov    rsi,r12
  40ed65:	mov    rdi,r15
  40ed68:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ed6d:	mov    r13,rax
  40ed70:	mov    BYTE PTR [rsp+0x3c],0x0
  40ed75:	cmp    rbp,rax
  40ed78:	jne    40b027 <_start@@Base+0x7cf7>
  40ed7e:	mov    r12,rbp
  40ed81:	jmp    40c722 <_start@@Base+0x93f2>
  40ed86:	mov    rdi,QWORD PTR [r15]
  40ed89:	call   413d60 <flatcc_builder_end_vector@@Base>
  40ed8e:	mov    DWORD PTR [rsp+0x34],eax
  40ed92:	test   eax,eax
  40ed94:	je     40f503 <_start@@Base+0xc1d3>
  40ed9a:	mov    rdi,QWORD PTR [r15]
  40ed9d:	mov    esi,0x5
  40eda2:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40eda7:	test   rax,rax
  40edaa:	je     40f4fb <_start@@Base+0xc1cb>
  40edb0:	mov    edx,DWORD PTR [rsp+0x34]
  40edb4:	mov    DWORD PTR [rax],edx
  40edb6:	jmp    40b520 <_start@@Base+0x81f0>
  40edbb:	mov    ecx,0x8
  40edc0:	mov    rdx,rbx
  40edc3:	mov    rsi,rax
  40edc6:	mov    rdi,r15
  40edc9:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40edce:	mov    r13,rax
  40edd1:	cmp    r12,rax
  40edd4:	je     40efd4 <_start@@Base+0xbca4>
  40edda:	mov    rdx,QWORD PTR [rsp+0x48]
  40eddf:	jmp    40d73c <_start@@Base+0xa40c>
  40ede4:	mov    r8,rbp
  40ede7:	lea    rcx,[rip+0x12872]        # 421660 <__data_start@@Base+0x5a0>
  40edee:	mov    rdx,rbx
  40edf1:	mov    rsi,rax
  40edf4:	mov    rdi,r15
  40edf7:	call   4057f0 <_start@@Base+0x24c0>
  40edfc:	cmp    r13,rax
  40edff:	je     40f403 <_start@@Base+0xc0d3>
  40ee05:	cmp    rbx,rax
  40ee08:	je     40f403 <_start@@Base+0xc0d3>
  40ee0e:	mov    r13,rax
  40ee11:	jmp    40bf20 <_start@@Base+0x8bf0>
  40ee16:	mov    r14,r13
  40ee19:	jmp    40ad43 <_start@@Base+0x7a13>
  40ee1e:	mov    ecx,0x7
  40ee23:	jmp    40ed2d <_start@@Base+0xb9fd>
  40ee28:	mov    rdx,rbx
  40ee2b:	mov    rsi,rbp
  40ee2e:	mov    rdi,r15
  40ee31:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ee36:	mov    r13,rax
  40ee39:	jmp    40b520 <_start@@Base+0x81f0>
  40ee3e:	mov    ecx,0x21
  40ee43:	mov    rdx,rbx
  40ee46:	mov    rsi,rax
  40ee49:	mov    rdi,r15
  40ee4c:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40ee51:	mov    r13,rax
  40ee54:	jmp    40b520 <_start@@Base+0x81f0>
  40ee59:	mov    rdx,rbx
  40ee5c:	mov    rsi,r12
  40ee5f:	mov    rdi,r15
  40ee62:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ee67:	mov    r13,rax
  40ee6a:	jmp    40b520 <_start@@Base+0x81f0>
  40ee6f:	mov    rdx,rbx
  40ee72:	mov    rsi,r12
  40ee75:	mov    rdi,r15
  40ee78:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ee7d:	mov    r13,rax
  40ee80:	jmp    40b520 <_start@@Base+0x81f0>
  40ee85:	mov    rdi,QWORD PTR [r15]
  40ee88:	call   413e80 <flatcc_builder_end_offset_vector@@Base>
  40ee8d:	mov    DWORD PTR [rsp+0x34],eax
  40ee91:	test   eax,eax
  40ee93:	je     40f3db <_start@@Base+0xc0ab>
  40ee99:	mov    rdi,QWORD PTR [r15]
  40ee9c:	mov    esi,0x1c
  40eea1:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40eea6:	test   rax,rax
  40eea9:	je     40f3d3 <_start@@Base+0xc0a3>
  40eeaf:	mov    edx,DWORD PTR [rsp+0x34]
  40eeb3:	mov    DWORD PTR [rax],edx
  40eeb5:	jmp    40b520 <_start@@Base+0x81f0>
  40eeba:	movbe  rax,QWORD PTR [rbp+0x8]
  40eec0:	jmp    40e826 <_start@@Base+0xb4f6>
  40eec5:	mov    rdx,rbx
  40eec8:	mov    rsi,r12
  40eecb:	mov    rdi,r15
  40eece:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40eed3:	mov    r13,rax
  40eed6:	jmp    40b520 <_start@@Base+0x81f0>
  40eedb:	cmp    BYTE PTR [rsi+0x2],0x20
  40eedf:	jle    40e605 <_start@@Base+0xb2d5>
  40eee5:	lea    r9,[rsi+0x2]
  40eee9:	jmp    40cadb <_start@@Base+0x97ab>
  40eeee:	mov    r14,r13
  40eef1:	jmp    40ad43 <_start@@Base+0x7a13>
  40eef6:	mov    rdi,QWORD PTR [r15]
  40eef9:	call   413e80 <flatcc_builder_end_offset_vector@@Base>
  40eefe:	mov    DWORD PTR [rsp+0x34],eax
  40ef02:	test   eax,eax
  40ef04:	je     40f4cb <_start@@Base+0xc19b>
  40ef0a:	mov    rdi,QWORD PTR [r15]
  40ef0d:	mov    esi,0xa
  40ef12:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40ef17:	test   rax,rax
  40ef1a:	je     40f4c3 <_start@@Base+0xc193>
  40ef20:	mov    edx,DWORD PTR [rsp+0x34]
  40ef24:	mov    DWORD PTR [rax],edx
  40ef26:	jmp    40b520 <_start@@Base+0x81f0>
  40ef2b:	mov    r14,r13
  40ef2e:	jmp    40ad43 <_start@@Base+0x7a13>
  40ef33:	mov    rdi,QWORD PTR [r15]
  40ef36:	call   413d60 <flatcc_builder_end_vector@@Base>
  40ef3b:	mov    DWORD PTR [rsp+0x34],eax
  40ef3f:	test   eax,eax
  40ef41:	je     40f43b <_start@@Base+0xc10b>
  40ef47:	mov    rdi,QWORD PTR [r15]
  40ef4a:	mov    esi,0x21
  40ef4f:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40ef54:	test   rax,rax
  40ef57:	je     40f433 <_start@@Base+0xc103>
  40ef5d:	mov    edx,DWORD PTR [rsp+0x34]
  40ef61:	mov    DWORD PTR [rax],edx
  40ef63:	jmp    40b520 <_start@@Base+0x81f0>
  40ef68:	mov    r14,r13
  40ef6b:	jmp    40ad43 <_start@@Base+0x7a13>
  40ef70:	cmp    BYTE PTR [rsi+0x2],0x20
  40ef74:	jle    40e5cf <_start@@Base+0xb29f>
  40ef7a:	lea    r9,[rsi+0x2]
  40ef7e:	jmp    40bad8 <_start@@Base+0x87a8>
  40ef83:	mov    r14,r13
  40ef86:	jmp    40ad43 <_start@@Base+0x7a13>
  40ef8b:	mov    r14,r13
  40ef8e:	jmp    40ad43 <_start@@Base+0x7a13>
  40ef93:	movbe  rax,QWORD PTR [rbp+0x8]
  40ef99:	jmp    40eaaa <_start@@Base+0xb77a>
  40ef9e:	mov    r14,r13
  40efa1:	jmp    40ad43 <_start@@Base+0x7a13>
  40efa6:	mov    r14,rax
  40efa9:	jmp    40ad43 <_start@@Base+0x7a13>
  40efae:	movbe  rax,QWORD PTR [rbp+0x8]
  40efb4:	jmp    40eb7c <_start@@Base+0xb84c>
  40efb9:	mov    r14,rax
  40efbc:	jmp    40ad43 <_start@@Base+0x7a13>
  40efc1:	mov    r14,rax
  40efc4:	jmp    40ad43 <_start@@Base+0x7a13>
  40efc9:	mov    r14,r13
  40efcc:	jmp    40ad43 <_start@@Base+0x7a13>
  40efd1:	mov    r13,rbx
  40efd4:	lea    r8,[rsp+0x48]
  40efd9:	lea    rcx,[rip+0x125c0]        # 4215a0 <__data_start@@Base+0x4e0>
  40efe0:	mov    rdx,rbx
  40efe3:	mov    rsi,r13
  40efe6:	mov    rdi,r15
  40efe9:	call   4049b0 <_start@@Base+0x1680>
  40efee:	cmp    rax,r13
  40eff1:	je     40f40b <_start@@Base+0xc0db>
  40eff7:	cmp    rbx,rax
  40effa:	je     40f40b <_start@@Base+0xc0db>
  40f000:	mov    rdx,QWORD PTR [rsp+0x48]
  40f005:	mov    r13,rax
  40f008:	jmp    40d73c <_start@@Base+0xa40c>
  40f00d:	mov    r8,rbp
  40f010:	lea    rcx,[rip+0x12609]        # 421620 <__data_start@@Base+0x560>
  40f017:	mov    rdx,rbx
  40f01a:	mov    rsi,rax
  40f01d:	mov    rdi,r15
  40f020:	call   405310 <_start@@Base+0x1fe0>
  40f025:	cmp    r13,rax
  40f028:	je     40f4e3 <_start@@Base+0xc1b3>
  40f02e:	cmp    rbx,rax
  40f031:	je     40f4e3 <_start@@Base+0xc1b3>
  40f037:	mov    r13,rax
  40f03a:	jmp    40d34a <_start@@Base+0xa01a>
  40f03f:	mov    r14,rbp
  40f042:	jmp    40ad43 <_start@@Base+0x7a13>
  40f047:	mov    r14,r13
  40f04a:	jmp    40ad43 <_start@@Base+0x7a13>
  40f04f:	mov    r14,rax
  40f052:	jmp    40ad43 <_start@@Base+0x7a13>
  40f057:	mov    rdx,rbx
  40f05a:	mov    rsi,r12
  40f05d:	mov    rdi,r15
  40f060:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40f065:	mov    r13,rax
  40f068:	jmp    40b520 <_start@@Base+0x81f0>
  40f06d:	mov    r14,r13
  40f070:	jmp    40ad43 <_start@@Base+0x7a13>
  40f075:	mov    r14,rbp
  40f078:	jmp    40ad43 <_start@@Base+0x7a13>
  40f07d:	mov    r8,rbp
  40f080:	lea    rcx,[rip+0x12559]        # 4215e0 <__data_start@@Base+0x520>
  40f087:	mov    rdx,rbx
  40f08a:	mov    rsi,rax
  40f08d:	mov    rdi,r15
  40f090:	call   404e50 <_start@@Base+0x1b20>
  40f095:	cmp    r13,rax
  40f098:	je     40f4ab <_start@@Base+0xc17b>
  40f09e:	cmp    rbx,rax
  40f0a1:	je     40f4ab <_start@@Base+0xc17b>
  40f0a7:	mov    r13,rax
  40f0aa:	jmp    40da34 <_start@@Base+0xa704>
  40f0af:	mov    ecx,0xffffffff
  40f0b4:	mov    edx,0x1
  40f0b9:	mov    esi,0x1
  40f0be:	call   412ea0 <flatcc_builder_start_vector@@Base>
  40f0c3:	test   eax,eax
  40f0c5:	jne    40f413 <_start@@Base+0xc0e3>
  40f0cb:	mov    rcx,r14
  40f0ce:	mov    rdx,rbx
  40f0d1:	mov    rsi,r13
  40f0d4:	mov    rdi,r15
  40f0d7:	call   40ac40 <_start@@Base+0x7910>
  40f0dc:	mov    r10d,DWORD PTR [rsp+0x30]
  40f0e1:	mov    rbp,rax
  40f0e4:	test   r10d,r10d
  40f0e7:	je     40f39a <_start@@Base+0xc06a>
  40f0ed:	lea    r12,[rsp+0x50]
  40f0f2:	jmp    40f123 <_start@@Base+0xbdf3>
  40f0f4:	nop    DWORD PTR [rax+0x0]
  40f0f8:	movzx  edx,BYTE PTR [rsp+0x50]
  40f0fd:	mov    rcx,r14
  40f100:	mov    BYTE PTR [r13+0x0],dl
  40f104:	mov    rsi,rax
  40f107:	mov    rdx,rbx
  40f10a:	mov    rdi,r15
  40f10d:	call   406740 <_start@@Base+0x3410>
  40f112:	mov    r9d,DWORD PTR [rsp+0x30]
  40f117:	mov    rbp,rax
  40f11a:	test   r9d,r9d
  40f11d:	je     40f39a <_start@@Base+0xc06a>
  40f123:	mov    rdi,QWORD PTR [r15]
  40f126:	mov    esi,0x1
  40f12b:	mov    BYTE PTR [rsp+0x50],0x0
  40f130:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  40f135:	mov    r13,rax
  40f138:	test   rax,rax
  40f13b:	je     40f332 <_start@@Base+0xc002>
  40f141:	mov    rcx,r12
  40f144:	mov    rdx,rbx
  40f147:	mov    rsi,rbp
  40f14a:	mov    rdi,r15
  40f14d:	call   4041d0 <_start@@Base+0xea0>
  40f152:	cmp    rax,rbp
  40f155:	jne    40f0f8 <_start@@Base+0xbdc8>
  40f157:	mov    r8,r12
  40f15a:	lea    rcx,[rip+0x123ff]        # 421560 <__data_start@@Base+0x4a0>
  40f161:	mov    rdx,rbx
  40f164:	mov    rsi,rbp
  40f167:	mov    rdi,r15
  40f16a:	call   405ce0 <_start@@Base+0x29b0>
  40f16f:	cmp    rax,rbp
  40f172:	je     40f47b <_start@@Base+0xc14b>
  40f178:	cmp    rbx,rax
  40f17b:	jne    40f0f8 <_start@@Base+0xbdc8>
  40f181:	mov    r14,rax
  40f184:	jmp    40ad43 <_start@@Base+0x7a13>
  40f189:	nop    DWORD PTR [rax+0x0]
  40f190:	mov    rdx,rbx
  40f193:	mov    rsi,r12
  40f196:	mov    rdi,r15
  40f199:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40f19e:	mov    r13,rax
  40f1a1:	jmp    40b520 <_start@@Base+0x81f0>
  40f1a6:	mov    r14,r13
  40f1a9:	jmp    40ad43 <_start@@Base+0x7a13>
  40f1ae:	mov    r14,rbp
  40f1b1:	jmp    40ad43 <_start@@Base+0x7a13>
  40f1b6:	mov    rdx,rbx
  40f1b9:	mov    rsi,r12
  40f1bc:	mov    rdi,r15
  40f1bf:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40f1c4:	mov    r13,rax
  40f1c7:	jmp    40b520 <_start@@Base+0x81f0>
  40f1cc:	mov    ecx,0x8
  40f1d1:	mov    rdx,rbx
  40f1d4:	mov    rsi,rax
  40f1d7:	mov    rdi,r15
  40f1da:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40f1df:	mov    r13,rax
  40f1e2:	cmp    rbp,rax
  40f1e5:	jne    40ec24 <_start@@Base+0xb8f4>
  40f1eb:	lea    r8,[rsp+0x48]
  40f1f0:	lea    rcx,[rip+0x12389]        # 421580 <__data_start@@Base+0x4c0>
  40f1f7:	mov    rdx,rbx
  40f1fa:	mov    rsi,r13
  40f1fd:	mov    rdi,r15
  40f200:	call   4049b0 <_start@@Base+0x1680>
  40f205:	cmp    rax,r13
  40f208:	je     40f463 <_start@@Base+0xc133>
  40f20e:	cmp    rbx,rax
  40f211:	je     40f463 <_start@@Base+0xc133>
  40f217:	mov    r13,rax
  40f21a:	jmp    40ec24 <_start@@Base+0xb8f4>
  40f21f:	mov    r8,r12
  40f222:	lea    rcx,[rip+0x12417]        # 421640 <__data_start@@Base+0x580>
  40f229:	mov    rdx,rbx
  40f22c:	mov    rsi,rax
  40f22f:	mov    rdi,r15
  40f232:	call   4057f0 <_start@@Base+0x24c0>
  40f237:	cmp    r13,rax
  40f23a:	je     40f4eb <_start@@Base+0xc1bb>
  40f240:	cmp    rbx,rax
  40f243:	je     40f4eb <_start@@Base+0xc1bb>
  40f249:	mov    r13,rax
  40f24c:	jmp    40d956 <_start@@Base+0xa626>
  40f251:	mov    r14,rbp
  40f254:	jmp    40ad43 <_start@@Base+0x7a13>
  40f259:	mov    r13,rbx
  40f25c:	jmp    40f1eb <_start@@Base+0xbebb>
  40f25e:	mov    r14,r13
  40f261:	jmp    40ad43 <_start@@Base+0x7a13>
  40f266:	mov    r14,rax
  40f269:	jmp    40ad43 <_start@@Base+0x7a13>
  40f26e:	mov    r8,r12
  40f271:	lea    rcx,[rip+0x12388]        # 421600 <__data_start@@Base+0x540>
  40f278:	mov    rdx,rbx
  40f27b:	mov    rsi,rax
  40f27e:	mov    rdi,r15
  40f281:	call   405310 <_start@@Base+0x1fe0>
  40f286:	cmp    r13,rax
  40f289:	je     40f3fb <_start@@Base+0xc0cb>
  40f28f:	cmp    rbx,rax
  40f292:	je     40f3fb <_start@@Base+0xc0cb>
  40f298:	mov    r13,rax
  40f29b:	jmp    40e89a <_start@@Base+0xb56a>
  40f2a0:	mov    r14,r13
  40f2a3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2a8:	mov    r14,r13
  40f2ab:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2b0:	mov    r14,rax
  40f2b3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2b8:	mov    r14,r13
  40f2bb:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2c0:	mov    r14,r13
  40f2c3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2c8:	mov    r14,r13
  40f2cb:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2d0:	mov    r14,r13
  40f2d3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2d8:	mov    r14,r13
  40f2db:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2e0:	mov    r14,r13
  40f2e3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2e8:	mov    r14,r13
  40f2eb:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2f0:	mov    r14,r13
  40f2f3:	jmp    40ad43 <_start@@Base+0x7a13>
  40f2f8:	mov    r14,r13
  40f2fb:	jmp    40ad43 <_start@@Base+0x7a13>
  40f300:	mov    r8,r12
  40f303:	lea    rcx,[rip+0x122b6]        # 4215c0 <__data_start@@Base+0x500>
  40f30a:	mov    rdx,rbx
  40f30d:	mov    rsi,rax
  40f310:	mov    rdi,r15
  40f313:	call   404e50 <_start@@Base+0x1b20>
  40f318:	cmp    r13,rax
  40f31b:	je     40f45b <_start@@Base+0xc12b>
  40f321:	cmp    rbx,rax
  40f324:	je     40f45b <_start@@Base+0xc12b>
  40f32a:	mov    r13,rax
  40f32d:	jmp    40eb1d <_start@@Base+0xb7ed>
  40f332:	mov    r14,rbp
  40f335:	jmp    40ad43 <_start@@Base+0x7a13>
  40f33a:	mov    r14,r13
  40f33d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f342:	mov    r14,r13
  40f345:	jmp    40ad43 <_start@@Base+0x7a13>
  40f34a:	mov    r14,rax
  40f34d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f352:	mov    r14,r13
  40f355:	jmp    40ad43 <_start@@Base+0x7a13>
  40f35a:	mov    r14,r13
  40f35d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f362:	mov    r14,r13
  40f365:	jmp    40ad43 <_start@@Base+0x7a13>
  40f36a:	mov    r14,r13
  40f36d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f372:	mov    r14,r13
  40f375:	jmp    40ad43 <_start@@Base+0x7a13>
  40f37a:	mov    r14,r13
  40f37d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f382:	mov    r14,r13
  40f385:	jmp    40ad43 <_start@@Base+0x7a13>
  40f38a:	mov    r14,r13
  40f38d:	jmp    40ad43 <_start@@Base+0x7a13>
  40f392:	mov    r14,rax
  40f395:	jmp    40ad43 <_start@@Base+0x7a13>
  40f39a:	mov    rdi,QWORD PTR [r15]
  40f39d:	mov    r13,rbp
  40f3a0:	call   413d60 <flatcc_builder_end_vector@@Base>
  40f3a5:	mov    DWORD PTR [rsp+0x34],eax
  40f3a9:	jmp    40b338 <_start@@Base+0x8008>
  40f3ae:	mov    r14,rax
  40f3b1:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3b6:	mov    r14,r13
  40f3b9:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3be:	call   4031c0 <__stack_chk_fail@plt>
  40f3c3:	mov    r14,r13
  40f3c6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3cb:	mov    r14,rax
  40f3ce:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3d3:	mov    r14,r13
  40f3d6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3db:	mov    r14,r13
  40f3de:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3e3:	mov    r14,rax
  40f3e6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3eb:	mov    r14,r13
  40f3ee:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3f3:	mov    r14,r13
  40f3f6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f3fb:	mov    r14,rax
  40f3fe:	jmp    40ad43 <_start@@Base+0x7a13>
  40f403:	mov    r14,rax
  40f406:	jmp    40ad43 <_start@@Base+0x7a13>
  40f40b:	mov    r14,rax
  40f40e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f413:	mov    r14,r13
  40f416:	jmp    40ad43 <_start@@Base+0x7a13>
  40f41b:	mov    r14,r13
  40f41e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f423:	mov    r14,r13
  40f426:	jmp    40ad43 <_start@@Base+0x7a13>
  40f42b:	mov    r14,r13
  40f42e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f433:	mov    r14,r13
  40f436:	jmp    40ad43 <_start@@Base+0x7a13>
  40f43b:	mov    r14,r13
  40f43e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f443:	mov    r14,rax
  40f446:	jmp    40ad43 <_start@@Base+0x7a13>
  40f44b:	mov    r14,rax
  40f44e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f453:	mov    r14,rax
  40f456:	jmp    40ad43 <_start@@Base+0x7a13>
  40f45b:	mov    r14,rax
  40f45e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f463:	mov    r14,rax
  40f466:	jmp    40ad43 <_start@@Base+0x7a13>
  40f46b:	mov    r14,r13
  40f46e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f473:	mov    r14,r13
  40f476:	jmp    40ad43 <_start@@Base+0x7a13>
  40f47b:	mov    r14,rax
  40f47e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f483:	mov    r14,r13
  40f486:	jmp    40ad43 <_start@@Base+0x7a13>
  40f48b:	mov    r14,r13
  40f48e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f493:	mov    r14,r13
  40f496:	jmp    40ad43 <_start@@Base+0x7a13>
  40f49b:	mov    r14,r13
  40f49e:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4a3:	mov    r14,r13
  40f4a6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4ab:	mov    r14,rax
  40f4ae:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4b3:	mov    r14,r13
  40f4b6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4bb:	mov    r14,r13
  40f4be:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4c3:	mov    r14,r13
  40f4c6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4cb:	mov    r14,r13
  40f4ce:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4d3:	mov    r14,r13
  40f4d6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4db:	mov    r14,r13
  40f4de:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4e3:	mov    r14,rax
  40f4e6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4eb:	mov    r14,rax
  40f4ee:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4f3:	mov    r14,r13
  40f4f6:	jmp    40ad43 <_start@@Base+0x7a13>
  40f4fb:	mov    r14,r13
  40f4fe:	jmp    40ad43 <_start@@Base+0x7a13>
  40f503:	mov    r14,r13
  40f506:	jmp    40ad43 <_start@@Base+0x7a13>
  40f50b:	nop    DWORD PTR [rax+rax*1+0x0]
  40f510:	endbr64 
  40f514:	push   r15
  40f516:	push   r14
  40f518:	mov    r14,rdx
  40f51b:	push   r13
  40f51d:	push   r12
  40f51f:	mov    r12,rsi
  40f522:	push   rbp
  40f523:	push   rbx
  40f524:	mov    rbx,rdi
  40f527:	sub    rsp,0x58
  40f52b:	mov    rdi,QWORD PTR fs:0x28
  40f534:	mov    QWORD PTR [rsp+0x48],rdi
  40f539:	xor    edi,edi
  40f53b:	mov    DWORD PTR [r8],0x0
  40f542:	cmp    cl,0x4
  40f545:	ja     4102a0 <_start@@Base+0xcf70>
  40f54b:	lea    rdx,[rip+0xac02]        # 41a154 <_IO_stdin_used@@Base+0x154>
  40f552:	movzx  eax,cl
  40f555:	movsxd rax,DWORD PTR [rdx+rax*4]
  40f559:	mov    r13,r8
  40f55c:	add    rax,rdx
  40f55f:	notrack jmp rax
  40f562:	nop    WORD PTR [rax+rax*1+0x0]
  40f568:	mov    rcx,r8
  40f56b:	mov    rdx,r14
  40f56e:	mov    rdi,rbx
  40f571:	call   4070d0 <_start@@Base+0x3da0>
  40f576:	mov    rsi,rax
  40f579:	mov    edx,DWORD PTR [rbx+0x20]
  40f57c:	test   edx,edx
  40f57e:	jne    40f58c <_start@@Base+0xc25c>
  40f580:	mov    eax,DWORD PTR [r13+0x0]
  40f584:	test   eax,eax
  40f586:	je     410440 <_start@@Base+0xd110>
  40f58c:	mov    rbx,QWORD PTR [rsp+0x48]
  40f591:	xor    rbx,QWORD PTR fs:0x28
  40f59a:	mov    rax,rsi
  40f59d:	jne    410b0b <_start@@Base+0xd7db>
  40f5a3:	add    rsp,0x58
  40f5a7:	pop    rbx
  40f5a8:	pop    rbp
  40f5a9:	pop    r12
  40f5ab:	pop    r13
  40f5ad:	pop    r14
  40f5af:	pop    r15
  40f5b1:	ret    
  40f5b2:	nop    WORD PTR [rax+rax*1+0x0]
  40f5b8:	mov    rdi,QWORD PTR [rbx]
  40f5bb:	mov    esi,0x4
  40f5c0:	call   4130c0 <flatcc_builder_start_table@@Base>
  40f5c5:	test   eax,eax
  40f5c7:	jne    40fa30 <_start@@Base+0xc700>
  40f5cd:	lea    r8,[rsp+0x38]
  40f5d2:	mov    ecx,0x1
  40f5d7:	mov    rdx,r14
  40f5da:	mov    rsi,r12
  40f5dd:	mov    rdi,rbx
  40f5e0:	call   418c20 <flatcc_json_parser_prepare_unions@@Base>
  40f5e5:	cmp    r14,rax
  40f5e8:	je     40fa30 <_start@@Base+0xc700>
  40f5ee:	lea    r15,[rsp+0x2c]
  40f5f3:	mov    rsi,r12
  40f5f6:	mov    rcx,r15
  40f5f9:	mov    rdx,r14
  40f5fc:	mov    rdi,rbx
  40f5ff:	call   4083c0 <_start@@Base+0x5090>
  40f604:	mov    r9d,DWORD PTR [rsp+0x2c]
  40f609:	mov    r12,rax
  40f60c:	test   r9d,r9d
  40f60f:	je     4108a5 <_start@@Base+0xd575>
  40f615:	mov    QWORD PTR [rsp+0x10],r13
  40f61a:	jmp    40f700 <_start@@Base+0xc3d0>
  40f61f:	nop
  40f620:	movbe  rax,QWORD PTR [r12]
  40f626:	movabs rdx,0x6d616e79616e795f
  40f630:	cmp    rax,rdx
  40f633:	jne    40fab9 <_start@@Base+0xc789>
  40f639:	lea    rbp,[r12+0x8]
  40f63e:	mov    r8,r14
  40f641:	sub    r8,rbp
  40f644:	cmp    r8,0x7
  40f648:	ja     410268 <_start@@Base+0xcf38>
  40f64e:	mov    rsi,r14
  40f651:	mov    rdi,rbp
  40f654:	call   403420 <_start@@Base+0xf0>
  40f659:	movabs rdx,0xffffffff00000000
  40f663:	and    rax,rdx
  40f666:	movabs rdx,0x7479706500000000
  40f670:	cmp    rax,rdx
  40f673:	jne    40ff30 <_start@@Base+0xcc00>
  40f679:	cmp    r8,0x4
  40f67d:	jle    40ff30 <_start@@Base+0xcc00>
  40f683:	mov    ecx,0x4
  40f688:	mov    rdx,r14
  40f68b:	mov    rsi,rbp
  40f68e:	mov    rdi,rbx
  40f691:	call   407470 <_start@@Base+0x4140>
  40f696:	cmp    rbp,rax
  40f699:	je     40ff30 <_start@@Base+0xcc00>
  40f69f:	sub    rsp,0x8
  40f6a3:	lea    rdi,[rip+0xffffffffffff3e56]        # 403500 <_start@@Base+0x1d0>
  40f6aa:	push   rdi
  40f6ab:	lea    rdi,[rip+0xfffffffffffffe5e]        # 40f510 <_start@@Base+0xc1e0>
  40f6b2:	mov    r8d,0x3
  40f6b8:	push   rdi
  40f6b9:	lea    rdi,[rip+0x11dc0]        # 421480 <__data_start@@Base+0x3c0>
  40f6c0:	xor    ecx,ecx
  40f6c2:	push   rdi
  40f6c3:	mov    rdx,r14
  40f6c6:	mov    rsi,rax
  40f6c9:	mov    r9,QWORD PTR [rsp+0x58]
  40f6ce:	mov    rdi,rbx
  40f6d1:	call   419190 <flatcc_json_parser_union_type_vector@@Base>
  40f6d6:	mov    r13,rax
  40f6d9:	add    rsp,0x20
  40f6dd:	nop    DWORD PTR [rax]
  40f6e0:	mov    rsi,r13
  40f6e3:	mov    rcx,r15
  40f6e6:	mov    rdx,r14
  40f6e9:	mov    rdi,rbx
  40f6ec:	call   4065f0 <_start@@Base+0x32c0>
  40f6f1:	mov    esi,DWORD PTR [rsp+0x2c]
  40f6f5:	mov    r12,rax
  40f6f8:	test   esi,esi
  40f6fa:	je     4108a0 <_start@@Base+0xd570>
  40f700:	cmp    r14,r12
  40f703:	je     40f721 <_start@@Base+0xc3f1>
  40f705:	movzx  eax,BYTE PTR [r12]
  40f70a:	cmp    al,0x22
  40f70c:	je     40fe20 <_start@@Base+0xcaf0>
  40f712:	cmp    al,0x2e
  40f714:	je     410350 <_start@@Base+0xd020>
  40f71a:	mov    DWORD PTR [rbx+0x14],0x1
  40f721:	mov    rsi,r14
  40f724:	sub    rsi,r12
  40f727:	cmp    rsi,0x7
  40f72b:	ja     40f620 <_start@@Base+0xc2f0>
  40f731:	lea    rdx,[rip+0xaa30]        # 41a168 <_IO_stdin_used@@Base+0x168>
  40f738:	movsxd rax,DWORD PTR [rdx+rsi*4]
  40f73c:	add    rax,rdx
  40f73f:	notrack jmp rax
  40f742:	nop    WORD PTR [rax+rax*1+0x0]
  40f748:	mov    rax,r14
  40f74b:	sub    rax,rsi
  40f74e:	cmp    rax,0x3
  40f752:	jle    40f766 <_start@@Base+0xc436>
  40f754:	cmp    DWORD PTR [r12],0x6c6c756e
  40f75c:	lea    rsi,[rsi+0x4]
  40f760:	je     40f58c <_start@@Base+0xc25c>
  40f766:	mov    ecx,0x1a
  40f76b:	mov    rsi,r12
  40f76e:	mov    rdx,r14
  40f771:	mov    rdi,rbx
  40f774:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40f779:	mov    rsi,rax
  40f77c:	jmp    40f58c <_start@@Base+0xc25c>
  40f781:	nop    DWORD PTR [rax+0x0]
  40f788:	mov    rcx,r8
  40f78b:	mov    rdx,r14
  40f78e:	mov    rdi,rbx
  40f791:	call   40ad00 <_start@@Base+0x79d0>
  40f796:	mov    rsi,rax
  40f799:	jmp    40f579 <_start@@Base+0xc249>
  40f79e:	xchg   ax,ax
  40f7a0:	mov    rdi,QWORD PTR [rbx]
  40f7a3:	mov    esi,0x4
  40f7a8:	call   4130c0 <flatcc_builder_start_table@@Base>
  40f7ad:	test   eax,eax
  40f7af:	jne    40fa30 <_start@@Base+0xc700>
  40f7b5:	lea    rbp,[rsp+0x34]
  40f7ba:	mov    rsi,r12
  40f7bd:	mov    rcx,rbp
  40f7c0:	mov    rdx,r14
  40f7c3:	mov    rdi,rbx
  40f7c6:	call   4083c0 <_start@@Base+0x5090>
  40f7cb:	mov    esi,DWORD PTR [rsp+0x34]
  40f7cf:	mov    r12,rax
  40f7d2:	test   esi,esi
  40f7d4:	je     4107d5 <_start@@Base+0xd4a5>
  40f7da:	movabs r15,0x636f6c6f72000000
  40f7e4:	mov    QWORD PTR [rsp+0x8],r13
  40f7e9:	jmp    40f8f9 <_start@@Base+0xc5c9>
  40f7ee:	xchg   ax,ax
  40f7f0:	mov    rdx,rax
  40f7f3:	and    rdx,0xffffffffff000000
  40f7fa:	cmp    rdx,r15
  40f7fd:	jne    40fca0 <_start@@Base+0xc970>
  40f803:	cmp    rsi,0x5
  40f807:	jle    40fc70 <_start@@Base+0xc940>
  40f80d:	mov    ecx,0x5
  40f812:	mov    rdx,r14
  40f815:	mov    rsi,r12
  40f818:	mov    rdi,rbx
  40f81b:	call   407470 <_start@@Base+0x4140>
  40f820:	mov    r13,rax
  40f823:	cmp    rax,r12
  40f826:	je     40fc70 <_start@@Base+0xc940>
  40f82c:	mov    BYTE PTR [rsp+0x30],0x0
  40f831:	mov    QWORD PTR [rsp+0x40],0x0
  40f83a:	mov    DWORD PTR [rsp+0x38],0x0
  40f842:	cmp    r14,rax
  40f845:	je     410290 <_start@@Base+0xcf60>
  40f84b:	lea    rcx,[rsp+0x38]
  40f850:	lea    r8,[rsp+0x40]
  40f855:	mov    rdx,r14
  40f858:	mov    rsi,rax
  40f85b:	mov    rdi,rbx
  40f85e:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40f863:	mov    r12,rax
  40f866:	cmp    r13,rax
  40f869:	jne    410320 <_start@@Base+0xcff0>
  40f86f:	lea    r8,[rsp+0x30]
  40f874:	lea    rcx,[rip+0x11c65]        # 4214e0 <__data_start@@Base+0x420>
  40f87b:	mov    rdx,r14
  40f87e:	mov    rsi,r12
  40f881:	mov    rdi,rbx
  40f884:	call   405a70 <_start@@Base+0x2740>
  40f889:	cmp    rax,r12
  40f88c:	je     410afe <_start@@Base+0xd7ce>
  40f892:	cmp    r14,rax
  40f895:	je     410afe <_start@@Base+0xd7ce>
  40f89b:	movzx  edx,BYTE PTR [rsp+0x30]
  40f8a0:	mov    r12,rax
  40f8a3:	nop    DWORD PTR [rax+rax*1+0x0]
  40f8a8:	cmp    dl,0x2
  40f8ab:	jne    40f8b3 <_start@@Base+0xc583>
  40f8ad:	test   BYTE PTR [rbx+0x10],0x2
  40f8b1:	je     40f8d7 <_start@@Base+0xc5a7>
  40f8b3:	mov    rdi,QWORD PTR [rbx]
  40f8b6:	xor    esi,esi
  40f8b8:	mov    ecx,0x1
  40f8bd:	mov    edx,0x1
  40f8c2:	call   414940 <flatcc_builder_table_add@@Base>
  40f8c7:	test   rax,rax
  40f8ca:	je     40fa1f <_start@@Base+0xc6ef>
  40f8d0:	movzx  edx,BYTE PTR [rsp+0x30]
  40f8d5:	mov    BYTE PTR [rax],dl
  40f8d7:	mov    rsi,r12
  40f8da:	mov    rcx,rbp
  40f8dd:	mov    rdx,r14
  40f8e0:	mov    rdi,rbx
  40f8e3:	call   4065f0 <_start@@Base+0x32c0>
  40f8e8:	mov    r11d,DWORD PTR [rsp+0x34]
  40f8ed:	mov    r12,rax
  40f8f0:	test   r11d,r11d
  40f8f3:	je     4107d0 <_start@@Base+0xd4a0>
  40f8f9:	cmp    r14,r12
  40f8fc:	je     40f91a <_start@@Base+0xc5ea>
  40f8fe:	movzx  eax,BYTE PTR [r12]
  40f903:	cmp    al,0x22
  40f905:	je     40fc90 <_start@@Base+0xc960>
  40f90b:	cmp    al,0x2e
  40f90d:	je     4102d0 <_start@@Base+0xcfa0>
  40f913:	mov    DWORD PTR [rbx+0x14],0x1
  40f91a:	mov    rsi,r14
  40f91d:	sub    rsi,r12
  40f920:	cmp    rsi,0x7
  40f924:	jbe    40fbb0 <_start@@Base+0xc880>
  40f92a:	movbe  rax,QWORD PTR [r12]
  40f930:	mov    rdx,rax
  40f933:	xor    dx,dx
  40f936:	movabs rdi,0x636f6c6f72320000
  40f940:	cmp    rdx,rdi
  40f943:	jne    40f7f0 <_start@@Base+0xc4c0>
  40f949:	cmp    rsi,0x6
  40f94d:	jle    40fc70 <_start@@Base+0xc940>
  40f953:	mov    ecx,0x6
  40f958:	mov    rdx,r14
  40f95b:	mov    rsi,r12
  40f95e:	mov    rdi,rbx
  40f961:	call   407470 <_start@@Base+0x4140>
  40f966:	mov    r13,rax
  40f969:	cmp    rax,r12
  40f96c:	je     40fc70 <_start@@Base+0xc940>
  40f972:	mov    BYTE PTR [rsp+0x30],0x0
  40f977:	mov    QWORD PTR [rsp+0x40],0x0
  40f980:	mov    DWORD PTR [rsp+0x38],0x0
  40f988:	cmp    r14,rax
  40f98b:	je     410288 <_start@@Base+0xcf58>
  40f991:	lea    rcx,[rsp+0x38]
  40f996:	lea    r8,[rsp+0x40]
  40f99b:	mov    rdx,r14
  40f99e:	mov    rsi,rax
  40f9a1:	mov    rdi,rbx
  40f9a4:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40f9a9:	mov    r12,rax
  40f9ac:	cmp    r13,rax
  40f9af:	jne    4102f0 <_start@@Base+0xcfc0>
  40f9b5:	lea    r8,[rsp+0x30]
  40f9ba:	lea    rcx,[rip+0x11b3f]        # 421500 <__data_start@@Base+0x440>
  40f9c1:	mov    rdx,r14
  40f9c4:	mov    rsi,r12
  40f9c7:	mov    rdi,rbx
  40f9ca:	call   405a70 <_start@@Base+0x2740>
  40f9cf:	cmp    rax,r12
  40f9d2:	je     410afe <_start@@Base+0xd7ce>
  40f9d8:	cmp    r14,rax
  40f9db:	je     410afe <_start@@Base+0xd7ce>
  40f9e1:	movzx  edx,BYTE PTR [rsp+0x30]
  40f9e6:	mov    r12,rax
  40f9e9:	nop    DWORD PTR [rax+0x0]
  40f9f0:	cmp    dl,0x2
  40f9f3:	jne    40f9ff <_start@@Base+0xc6cf>
  40f9f5:	test   BYTE PTR [rbx+0x10],0x2
  40f9f9:	je     40f8d7 <_start@@Base+0xc5a7>
  40f9ff:	mov    rdi,QWORD PTR [rbx]
  40fa02:	mov    ecx,0x1
  40fa07:	mov    edx,0x1
  40fa0c:	mov    esi,0x1
  40fa11:	call   414940 <flatcc_builder_table_add@@Base>
  40fa16:	test   rax,rax
  40fa19:	jne    40f8d0 <_start@@Base+0xc5a0>
  40fa1f:	mov    r13,QWORD PTR [rsp+0x8]
  40fa24:	endbr64 
  40fa28:	nop    DWORD PTR [rax+rax*1+0x0]
  40fa30:	mov    rsi,r12
  40fa33:	mov    ecx,0x21
  40fa38:	mov    rdx,r14
  40fa3b:	mov    rdi,rbx
  40fa3e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  40fa43:	mov    rsi,rax
  40fa46:	jmp    40f579 <_start@@Base+0xc249>
  40fa4b:	nop    DWORD PTR [rax+rax*1+0x0]
  40fa50:	movsx  rcx,BYTE PTR [r12+0x6]
  40fa56:	shl    rcx,0x8
  40fa5a:	movsx  rdx,BYTE PTR [r12+0x5]
  40fa60:	mov    rax,rdx
  40fa63:	shl    rax,0x10
  40fa67:	or     rcx,rax
  40fa6a:	movsx  rdx,BYTE PTR [r12+0x4]
  40fa70:	mov    rax,rdx
  40fa73:	shl    rax,0x18
  40fa77:	or     rax,rcx
  40fa7a:	movsx  rdx,BYTE PTR [r12+0x3]
  40fa80:	mov    rcx,rdx
  40fa83:	shl    rcx,0x20
  40fa87:	or     rax,rcx
  40fa8a:	movsx  rdx,BYTE PTR [r12+0x2]
  40fa90:	mov    rcx,rdx
  40fa93:	shl    rcx,0x28
  40fa97:	or     rcx,rax
  40fa9a:	movsx  rdx,BYTE PTR [r12+0x1]
  40faa0:	mov    rax,rdx
  40faa3:	shl    rax,0x30
  40faa7:	or     rcx,rax
  40faaa:	movsx  rdx,BYTE PTR [r12]
  40faaf:	mov    rax,rdx
  40fab2:	shl    rax,0x38
  40fab6:	or     rax,rcx
  40fab9:	mov    rdx,rax
  40fabc:	xor    dl,dl
  40fabe:	movabs rdi,0x6d616e79616e7900
  40fac8:	cmp    rdx,rdi
  40facb:	jne    40fda0 <_start@@Base+0xca70>
  40fad1:	cmp    rsi,0x7
  40fad5:	jle    40fb90 <_start@@Base+0xc860>
  40fadb:	mov    ecx,0x7
  40fae0:	mov    rdx,r14
  40fae3:	mov    rsi,r12
  40fae6:	mov    rdi,rbx
  40fae9:	call   407470 <_start@@Base+0x4140>
  40faee:	cmp    rax,r12
  40faf1:	je     40fb90 <_start@@Base+0xc860>
  40faf7:	sub    rsp,0x8
  40fafb:	lea    rdi,[rip+0xfffffffffffffa0e]        # 40f510 <_start@@Base+0xc1e0>
  40fb02:	push   rdi
  40fb03:	mov    r8d,0x3
  40fb09:	mov    rdi,rbx
  40fb0c:	mov    r9,QWORD PTR [rsp+0x48]
  40fb11:	xor    ecx,ecx
  40fb13:	mov    rdx,r14
  40fb16:	mov    rsi,rax
  40fb19:	call   4190b0 <flatcc_json_parser_union_vector@@Base>
  40fb1e:	pop    rdi
  40fb1f:	mov    r13,rax
  40fb22:	pop    r8
  40fb24:	jmp    40f6e0 <_start@@Base+0xc3b0>
  40fb29:	nop    DWORD PTR [rax+0x0]
  40fb30:	xor    ecx,ecx
  40fb32:	jmp    40fa9a <_start@@Base+0xc76a>
  40fb37:	nop    WORD PTR [rax+rax*1+0x0]
  40fb40:	xor    ecx,ecx
  40fb42:	jmp    40fa5a <_start@@Base+0xc72a>
  40fb47:	nop    WORD PTR [rax+rax*1+0x0]
  40fb50:	xor    ecx,ecx
  40fb52:	jmp    40fa6a <_start@@Base+0xc73a>
  40fb57:	nop    WORD PTR [rax+rax*1+0x0]
  40fb60:	xor    eax,eax
  40fb62:	jmp    40fa7a <_start@@Base+0xc74a>
  40fb67:	nop    WORD PTR [rax+rax*1+0x0]
  40fb70:	xor    eax,eax
  40fb72:	jmp    40fa8a <_start@@Base+0xc75a>
  40fb77:	nop    WORD PTR [rax+rax*1+0x0]
  40fb80:	xor    ecx,ecx
  40fb82:	jmp    40faaa <_start@@Base+0xc77a>
  40fb87:	nop    WORD PTR [rax+rax*1+0x0]
  40fb90:	mov    rdx,r14
  40fb93:	mov    rsi,r12
  40fb96:	mov    rdi,rbx
  40fb99:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40fb9e:	mov    r13,rax
  40fba1:	jmp    40f6e0 <_start@@Base+0xc3b0>
  40fba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fbb0:	lea    rdx,[rip+0xa5d1]        # 41a188 <_IO_stdin_used@@Base+0x188>
  40fbb7:	movsxd rax,DWORD PTR [rdx+rsi*4]
  40fbbb:	add    rax,rdx
  40fbbe:	notrack jmp rax
  40fbc1:	nop    DWORD PTR [rax+0x0]
  40fbc8:	movsx  rcx,BYTE PTR [r12+0x6]
  40fbce:	shl    rcx,0x8
  40fbd2:	movsx  rdx,BYTE PTR [r12+0x5]
  40fbd8:	mov    rax,rdx
  40fbdb:	shl    rax,0x10
  40fbdf:	or     rcx,rax
  40fbe2:	movsx  rdx,BYTE PTR [r12+0x4]
  40fbe8:	mov    rax,rdx
  40fbeb:	shl    rax,0x18
  40fbef:	or     rax,rcx
  40fbf2:	movsx  rdx,BYTE PTR [r12+0x3]
  40fbf8:	mov    rcx,rdx
  40fbfb:	shl    rcx,0x20
  40fbff:	or     rax,rcx
  40fc02:	movsx  rdx,BYTE PTR [r12+0x2]
  40fc08:	mov    rcx,rdx
  40fc0b:	shl    rcx,0x28
  40fc0f:	or     rcx,rax
  40fc12:	movsx  rdx,BYTE PTR [r12+0x1]
  40fc18:	mov    rax,rdx
  40fc1b:	shl    rax,0x30
  40fc1f:	or     rcx,rax
  40fc22:	movsx  rdx,BYTE PTR [r12]
  40fc27:	mov    rax,rdx
  40fc2a:	shl    rax,0x38
  40fc2e:	or     rax,rcx
  40fc31:	jmp    40f930 <_start@@Base+0xc600>
  40fc36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fc40:	xor    ecx,ecx
  40fc42:	jmp    40fbd2 <_start@@Base+0xc8a2>
  40fc44:	nop    DWORD PTR [rax+0x0]
  40fc48:	xor    ecx,ecx
  40fc4a:	jmp    40fbe2 <_start@@Base+0xc8b2>
  40fc4c:	nop    DWORD PTR [rax+0x0]
  40fc50:	xor    eax,eax
  40fc52:	jmp    40fbf2 <_start@@Base+0xc8c2>
  40fc54:	nop    DWORD PTR [rax+0x0]
  40fc58:	xor    eax,eax
  40fc5a:	jmp    40fc02 <_start@@Base+0xc8d2>
  40fc5c:	nop    DWORD PTR [rax+0x0]
  40fc60:	xor    ecx,ecx
  40fc62:	jmp    40fc12 <_start@@Base+0xc8e2>
  40fc64:	nop    DWORD PTR [rax+0x0]
  40fc68:	xor    ecx,ecx
  40fc6a:	jmp    40fc22 <_start@@Base+0xc8f2>
  40fc6c:	nop    DWORD PTR [rax+0x0]
  40fc70:	mov    rsi,r12
  40fc73:	mov    rdx,r14
  40fc76:	mov    rdi,rbx
  40fc79:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40fc7e:	mov    r12,rax
  40fc81:	jmp    40f8d7 <_start@@Base+0xc5a7>
  40fc86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fc90:	inc    r12
  40fc93:	mov    DWORD PTR [rbx+0x14],0x0
  40fc9a:	jmp    40f91a <_start@@Base+0xc5ea>
  40fc9f:	nop
  40fca0:	endbr64 
  40fca4:	movabs rdx,0xffffff0000000000
  40fcae:	and    rdx,rax
  40fcb1:	movabs rdi,0x7563320000000000
  40fcbb:	cmp    rdx,rdi
  40fcbe:	jne    40fe30 <_start@@Base+0xcb00>
  40fcc4:	cmp    rsi,0x3
  40fcc8:	jle    40fc70 <_start@@Base+0xc940>
  40fcca:	mov    ecx,0x3
  40fccf:	mov    rdx,r14
  40fcd2:	mov    rsi,r12
  40fcd5:	mov    rdi,rbx
  40fcd8:	call   407470 <_start@@Base+0x4140>
  40fcdd:	mov    r13,rax
  40fce0:	cmp    rax,r12
  40fce3:	je     40fc70 <_start@@Base+0xc940>
  40fce5:	mov    BYTE PTR [rsp+0x30],0x0
  40fcea:	mov    QWORD PTR [rsp+0x40],0x0
  40fcf3:	mov    DWORD PTR [rsp+0x38],0x0
  40fcfb:	cmp    r14,rax
  40fcfe:	je     410370 <_start@@Base+0xd040>
  40fd04:	lea    rcx,[rsp+0x38]
  40fd09:	lea    r8,[rsp+0x40]
  40fd0e:	mov    rdx,r14
  40fd11:	mov    rsi,rax
  40fd14:	mov    rdi,rbx
  40fd17:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40fd1c:	mov    r10,rax
  40fd1f:	cmp    r13,rax
  40fd22:	jne    410470 <_start@@Base+0xd140>
  40fd28:	mov    rsi,r10
  40fd2b:	lea    r8,[rsp+0x30]
  40fd30:	lea    rcx,[rip+0x11789]        # 4214c0 <__data_start@@Base+0x400>
  40fd37:	mov    rdx,r14
  40fd3a:	mov    rdi,rbx
  40fd3d:	mov    QWORD PTR [rsp+0x10],r10
  40fd42:	call   405ce0 <_start@@Base+0x29b0>
  40fd47:	mov    r10,QWORD PTR [rsp+0x10]
  40fd4c:	mov    r12,rax
  40fd4f:	cmp    rax,r10
  40fd52:	je     40fa1f <_start@@Base+0xc6ef>
  40fd58:	cmp    r14,rax
  40fd5b:	je     40fa1f <_start@@Base+0xc6ef>
  40fd61:	movzx  eax,BYTE PTR [rsp+0x30]
  40fd66:	cmp    al,0x2
  40fd68:	jne    40fd74 <_start@@Base+0xca44>
  40fd6a:	test   BYTE PTR [rbx+0x10],0x2
  40fd6e:	je     40f8d7 <_start@@Base+0xc5a7>
  40fd74:	mov    rdi,QWORD PTR [rbx]
  40fd77:	mov    ecx,0x1
  40fd7c:	mov    edx,0x1
  40fd81:	mov    esi,0x3
  40fd86:	call   414940 <flatcc_builder_table_add@@Base>
  40fd8b:	test   rax,rax
  40fd8e:	jne    40f8d0 <_start@@Base+0xc5a0>
  40fd94:	jmp    40fa1f <_start@@Base+0xc6ef>
  40fd99:	nop    DWORD PTR [rax+0x0]
  40fda0:	mov    rcx,rax
  40fda3:	xor    cx,cx
  40fda6:	movabs rdx,0x7072656669780000
  40fdb0:	cmp    rcx,rdx
  40fdb3:	jne    40ff50 <_start@@Base+0xcc20>
  40fdb9:	cmp    rsi,0x6
  40fdbd:	jle    40fb90 <_start@@Base+0xc860>
  40fdc3:	mov    ecx,0x6
  40fdc8:	mov    rdx,r14
  40fdcb:	mov    rsi,r12
  40fdce:	mov    rdi,rbx
  40fdd1:	call   407470 <_start@@Base+0x4140>
  40fdd6:	cmp    rax,r12
  40fdd9:	je     40fb90 <_start@@Base+0xc860>
  40fddf:	mov    rsi,rax
  40fde2:	lea    rcx,[rsp+0x30]
  40fde7:	mov    rdx,r14
  40fdea:	mov    rdi,rbx
  40fded:	call   408480 <_start@@Base+0x5150>
  40fdf2:	mov    esi,DWORD PTR [rsp+0x30]
  40fdf6:	mov    r13,rax
  40fdf9:	test   esi,esi
  40fdfb:	je     410174 <_start@@Base+0xce44>
  40fe01:	mov    rdi,QWORD PTR [rbx]
  40fe04:	xor    esi,esi
  40fe06:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  40fe0b:	test   rax,rax
  40fe0e:	je     410174 <_start@@Base+0xce44>
  40fe14:	mov    edx,DWORD PTR [rsp+0x30]
  40fe18:	mov    DWORD PTR [rax],edx
  40fe1a:	jmp    40f6e0 <_start@@Base+0xc3b0>
  40fe1f:	nop
  40fe20:	inc    r12
  40fe23:	mov    DWORD PTR [rbx+0x14],0x0
  40fe2a:	jmp    40f721 <_start@@Base+0xc3f1>
  40fe2f:	nop
  40fe30:	movabs rdx,0xffff000000000000
  40fe3a:	and    rax,rdx
  40fe3d:	movabs rdx,0x7563000000000000
  40fe47:	cmp    rax,rdx
  40fe4a:	jne    40fc70 <_start@@Base+0xc940>
  40fe50:	cmp    rsi,0x2
  40fe54:	jle    40fc70 <_start@@Base+0xc940>
  40fe5a:	mov    ecx,0x2
  40fe5f:	mov    rdx,r14
  40fe62:	mov    rsi,r12
  40fe65:	mov    rdi,rbx
  40fe68:	call   407470 <_start@@Base+0x4140>
  40fe6d:	mov    r13,rax
  40fe70:	cmp    rax,r12
  40fe73:	je     40fc70 <_start@@Base+0xc940>
  40fe79:	mov    BYTE PTR [rsp+0x30],0x0
  40fe7e:	mov    QWORD PTR [rsp+0x40],0x0
  40fe87:	mov    DWORD PTR [rsp+0x38],0x0
  40fe8f:	cmp    r14,rax
  40fe92:	je     410380 <_start@@Base+0xd050>
  40fe98:	lea    rcx,[rsp+0x38]
  40fe9d:	lea    r8,[rsp+0x40]
  40fea2:	mov    rdx,r14
  40fea5:	mov    rsi,rax
  40fea8:	mov    rdi,rbx
  40feab:	call   4184e0 <flatcc_json_parser_integer@@Base>
  40feb0:	mov    r10,rax
  40feb3:	cmp    r13,rax
  40feb6:	jne    4104a8 <_start@@Base+0xd178>
  40febc:	mov    rsi,r10
  40febf:	lea    r8,[rsp+0x30]
  40fec4:	lea    rcx,[rip+0x115d5]        # 4214a0 <__data_start@@Base+0x3e0>
  40fecb:	mov    rdx,r14
  40fece:	mov    rdi,rbx
  40fed1:	mov    QWORD PTR [rsp+0x10],r10
  40fed6:	call   405ce0 <_start@@Base+0x29b0>
  40fedb:	mov    r10,QWORD PTR [rsp+0x10]
  40fee0:	mov    r12,rax
  40fee3:	cmp    rax,r10
  40fee6:	je     40fa1f <_start@@Base+0xc6ef>
  40feec:	cmp    r14,rax
  40feef:	je     40fa1f <_start@@Base+0xc6ef>
  40fef5:	movzx  eax,BYTE PTR [rsp+0x30]
  40fefa:	cmp    al,0x2
  40fefc:	jne    40ff08 <_start@@Base+0xcbd8>
  40fefe:	test   BYTE PTR [rbx+0x10],0x2
  40ff02:	je     40f8d7 <_start@@Base+0xc5a7>
  40ff08:	mov    rdi,QWORD PTR [rbx]
  40ff0b:	mov    ecx,0x1
  40ff10:	mov    edx,0x1
  40ff15:	mov    esi,0x2
  40ff1a:	call   414940 <flatcc_builder_table_add@@Base>
  40ff1f:	test   rax,rax
  40ff22:	jne    40f8d0 <_start@@Base+0xc5a0>
  40ff28:	jmp    40fa1f <_start@@Base+0xc6ef>
  40ff2d:	nop    DWORD PTR [rax]
  40ff30:	mov    rdx,r14
  40ff33:	mov    rsi,rbp
  40ff36:	mov    rdi,rbx
  40ff39:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ff3e:	mov    r13,rax
  40ff41:	jmp    40f6e0 <_start@@Base+0xc3b0>
  40ff46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ff50:	and    rax,0xffffffffff000000
  40ff56:	movabs rdx,0x6d6f766965000000
  40ff60:	cmp    rax,rdx
  40ff63:	jne    40fb90 <_start@@Base+0xc860>
  40ff69:	cmp    rsi,0x5
  40ff6d:	jle    40fb90 <_start@@Base+0xc860>
  40ff73:	mov    ecx,0x5
  40ff78:	mov    rdx,r14
  40ff7b:	mov    rsi,r12
  40ff7e:	mov    rdi,rbx
  40ff81:	call   407470 <_start@@Base+0x4140>
  40ff86:	mov    r13,rax
  40ff89:	cmp    rax,r12
  40ff8c:	je     40fb90 <_start@@Base+0xc860>
  40ff92:	mov    rdi,QWORD PTR [rbx]
  40ff95:	mov    esi,0xa
  40ff9a:	mov    DWORD PTR [rsp+0x30],0x0
  40ffa2:	call   4130c0 <flatcc_builder_start_table@@Base>
  40ffa7:	test   eax,eax
  40ffa9:	jne    410140 <_start@@Base+0xce10>
  40ffaf:	lea    r8,[rsp+0x40]
  40ffb4:	mov    ecx,0x5
  40ffb9:	mov    rdx,r14
  40ffbc:	mov    rsi,r13
  40ffbf:	mov    rdi,rbx
  40ffc2:	call   418c20 <flatcc_json_parser_prepare_unions@@Base>
  40ffc7:	cmp    r14,rax
  40ffca:	je     410140 <_start@@Base+0xce10>
  40ffd0:	lea    r12,[rsp+0x34]
  40ffd5:	mov    rcx,r12
  40ffd8:	mov    rsi,r13
  40ffdb:	mov    rdx,r14
  40ffde:	mov    rdi,rbx
  40ffe1:	call   4083c0 <_start@@Base+0x5090>
  40ffe6:	mov    ecx,DWORD PTR [rsp+0x34]
  40ffea:	mov    r13,rax
  40ffed:	test   ecx,ecx
  40ffef:	je     41012b <_start@@Base+0xcdfb>
  40fff5:	mov    QWORD PTR [rsp+0x8],r15
  40fffa:	movabs rbp,0x6368617261637464
  410004:	nop    DWORD PTR [rax+0x0]
  410008:	cmp    r14,r13
  41000b:	je     410029 <_start@@Base+0xccf9>
  41000d:	movzx  eax,BYTE PTR [r13+0x0]
  410012:	cmp    al,0x22
  410014:	je     4102b8 <_start@@Base+0xcf88>
  41001a:	cmp    al,0x2e
  41001c:	je     4108f0 <_start@@Base+0xd5c0>
  410022:	mov    DWORD PTR [rbx+0x14],0x1
  410029:	mov    r8,r14
  41002c:	sub    r8,r13
  41002f:	cmp    r8,0x7
  410033:	ja     410278 <_start@@Base+0xcf48>
  410039:	mov    rsi,r14
  41003c:	mov    rdi,r13
  41003f:	call   403420 <_start@@Base+0xf0>
  410044:	cmp    rax,rbp
  410047:	ja     410188 <_start@@Base+0xce58>
  41004d:	movabs rdx,0x616e7461676f6e69
  410057:	cmp    rax,rdx
  41005a:	je     410390 <_start@@Base+0xd060>
  410060:	movabs rdx,0x63616d656f5f7479
  41006a:	cmp    rax,rdx
  41006d:	je     410510 <_start@@Base+0xd1e0>
  410073:	and    rax,0xffffffffff000000
  410079:	movabs rdx,0x63616d656f000000
  410083:	cmp    rax,rdx
  410086:	jne    4100f6 <_start@@Base+0xcdc6>
  410088:	cmp    r8,0x5
  41008c:	jle    4100f6 <_start@@Base+0xcdc6>
  41008e:	mov    ecx,0x5
  410093:	mov    rdx,r14
  410096:	mov    rsi,r13
  410099:	mov    rdi,rbx
  41009c:	call   407470 <_start@@Base+0x4140>
  4100a1:	cmp    rax,r13
  4100a4:	je     4100f6 <_start@@Base+0xcdc6>
  4100a6:	sub    rsp,0x8
  4100aa:	lea    rdi,[rip+0xffffffffffffa36f]        # 40a420 <_start@@Base+0x70f0>
  4100b1:	push   rdi
  4100b2:	mov    r8d,0x7
  4100b8:	mov    ecx,0x3
  4100bd:	mov    r9,QWORD PTR [rsp+0x50]
  4100c2:	jmp    410660 <_start@@Base+0xd330>
  4100c7:	nop    WORD PTR [rax+rax*1+0x0]
  4100d0:	movabs rdi,0x6d61696e5f636861
  4100da:	cmp    rax,rdi
  4100dd:	je     410800 <_start@@Base+0xd4d0>
  4100e3:	movabs rdi,0x736964655f6b6963
  4100ed:	cmp    rax,rdi
  4100f0:	je     4105b0 <_start@@Base+0xd280>
  4100f6:	mov    rsi,r13
  4100f9:	mov    rdx,r14
  4100fc:	mov    rdi,rbx
  4100ff:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  410104:	mov    rsi,rax
  410107:	mov    rcx,r12
  41010a:	mov    rdx,r14
  41010d:	mov    rdi,rbx
  410110:	call   4065f0 <_start@@Base+0x32c0>
  410115:	mov    r9d,DWORD PTR [rsp+0x34]
  41011a:	mov    r13,rax
  41011d:	test   r9d,r9d
  410120:	jne    410008 <_start@@Base+0xccd8>
  410126:	mov    r15,QWORD PTR [rsp+0x8]
  41012b:	mov    r8d,DWORD PTR [rbx+0x20]
  41012f:	test   r8d,r8d
  410132:	je     410680 <_start@@Base+0xd350>
  410138:	nop    DWORD PTR [rax+rax*1+0x0]
  410140:	mov    rsi,r13
  410143:	mov    rdi,rbx
  410146:	mov    ecx,0x21
  41014b:	mov    rdx,r14
  41014e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410153:	mov    edi,DWORD PTR [rsp+0x30]
  410157:	mov    r13,rax
  41015a:	test   edi,edi
  41015c:	je     410174 <_start@@Base+0xce44>
  41015e:	mov    rdi,QWORD PTR [rbx]
  410161:	mov    esi,0x1
  410166:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  41016b:	test   rax,rax
  41016e:	jne    40fe14 <_start@@Base+0xcae4>
  410174:	mov    rbp,r13
  410177:	mov    r12,rbp
  41017a:	mov    r13,QWORD PTR [rsp+0x10]
  41017f:	jmp    40fa30 <_start@@Base+0xc700>
  410184:	nop    DWORD PTR [rax+0x0]
  410188:	movabs rdi,0x6d61696e5f636860
  410192:	cmp    rax,rdi
  410195:	ja     4100d0 <_start@@Base+0xcda0>
  41019b:	movabs rdx,0x6368617261637465
  4101a5:	cmp    rax,rdx
  4101a8:	jne    4100f6 <_start@@Base+0xcdc6>
  4101ae:	lea    r15,[r13+0x8]
  4101b2:	mov    r9,r14
  4101b5:	sub    r9,r15
  4101b8:	cmp    r9,0x7
  4101bc:	ja     4106b0 <_start@@Base+0xd380>
  4101c2:	mov    rsi,r14
  4101c5:	mov    rdi,r15
  4101c8:	call   403420 <_start@@Base+0xf0>
  4101cd:	mov    rcx,rax
  4101d0:	xor    cl,cl
  4101d2:	movabs rdx,0x72735f7479706500
  4101dc:	cmp    rcx,rdx
  4101df:	je     410420 <_start@@Base+0xd0f0>
  4101e5:	movabs rdx,0xffff000000000000
  4101ef:	and    rax,rdx
  4101f2:	movabs rdx,0x7273000000000000
  4101fc:	cmp    rax,rdx
  4101ff:	jne    410420 <_start@@Base+0xd0f0>
  410205:	cmp    r9,0x2
  410209:	jle    410420 <_start@@Base+0xd0f0>
  41020f:	mov    ecx,0x2
  410214:	mov    rdx,r14
  410217:	mov    rsi,r15
  41021a:	mov    rdi,rbx
  41021d:	call   407470 <_start@@Base+0x4140>
  410222:	cmp    r15,rax
  410225:	je     410420 <_start@@Base+0xd0f0>
  41022b:	sub    rsp,0x8
  41022f:	lea    rdi,[rip+0xffffffffffffa1ea]        # 40a420 <_start@@Base+0x70f0>
  410236:	push   rdi
  410237:	mov    rsi,rax
  41023a:	mov    r8d,0x9
  410240:	mov    r9,QWORD PTR [rsp+0x50]
  410245:	mov    ecx,0x4
  41024a:	mov    rdx,r14
  41024d:	mov    rdi,rbx
  410250:	call   4190b0 <flatcc_json_parser_union_vector@@Base>
  410255:	pop    r13
  410257:	mov    rsi,rax
  41025a:	pop    r15
  41025c:	jmp    410107 <_start@@Base+0xcdd7>
  410261:	nop    DWORD PTR [rax+0x0]
  410268:	movbe  rax,QWORD PTR [r12+0x8]
  41026f:	jmp    40f659 <_start@@Base+0xc329>
  410274:	nop    DWORD PTR [rax+0x0]
  410278:	movbe  rax,QWORD PTR [r13+0x0]
  41027e:	jmp    410044 <_start@@Base+0xcd14>
  410283:	nop    DWORD PTR [rax+rax*1+0x0]
  410288:	mov    r12,r14
  41028b:	jmp    40f9b5 <_start@@Base+0xc685>
  410290:	mov    r12,r14
  410293:	jmp    40f86f <_start@@Base+0xc53f>
  410298:	nop    DWORD PTR [rax+rax*1+0x0]
  4102a0:	test   BYTE PTR [rbx+0x10],0x1
  4102a4:	jne    410460 <_start@@Base+0xd130>
  4102aa:	mov    ecx,0xf
  4102af:	jmp    40f76b <_start@@Base+0xc43b>
  4102b4:	nop    DWORD PTR [rax+0x0]
  4102b8:	inc    r13
  4102bb:	mov    DWORD PTR [rbx+0x14],0x0
  4102c2:	jmp    410029 <_start@@Base+0xccf9>
  4102c7:	nop    WORD PTR [rax+rax*1+0x0]
  4102d0:	mov    rsi,r12
  4102d3:	mov    ecx,0x5
  4102d8:	mov    rdx,r14
  4102db:	mov    rdi,rbx
  4102de:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4102e3:	mov    r12,rax
  4102e6:	jmp    40f91a <_start@@Base+0xc5ea>
  4102eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4102f0:	mov    ecx,DWORD PTR [rsp+0x38]
  4102f4:	mov    rax,QWORD PTR [rsp+0x40]
  4102f9:	test   ecx,ecx
  4102fb:	je     4104e0 <_start@@Base+0xd1b0>
  410301:	mov    ecx,0x8
  410306:	cmp    rax,0x80
  41030c:	ja     410985 <_start@@Base+0xd655>
  410312:	mov    edx,eax
  410314:	neg    edx
  410316:	mov    BYTE PTR [rsp+0x30],dl
  41031a:	jmp    40f9f0 <_start@@Base+0xc6c0>
  41031f:	nop
  410320:	mov    edx,DWORD PTR [rsp+0x38]
  410324:	mov    rax,QWORD PTR [rsp+0x40]
  410329:	test   edx,edx
  41032b:	je     4104f8 <_start@@Base+0xd1c8>
  410331:	mov    ecx,0x8
  410336:	cmp    rax,0x80
  41033c:	ja     4109b5 <_start@@Base+0xd685>
  410342:	mov    edx,eax
  410344:	neg    edx
  410346:	mov    BYTE PTR [rsp+0x30],dl
  41034a:	jmp    40f8a8 <_start@@Base+0xc578>
  41034f:	nop
  410350:	mov    rsi,r12
  410353:	mov    ecx,0x5
  410358:	mov    rdx,r14
  41035b:	mov    rdi,rbx
  41035e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410363:	mov    r12,rax
  410366:	jmp    40f721 <_start@@Base+0xc3f1>
  41036b:	nop    DWORD PTR [rax+rax*1+0x0]
  410370:	mov    r10,r14
  410373:	jmp    40fd28 <_start@@Base+0xc9f8>
  410378:	nop    DWORD PTR [rax+rax*1+0x0]
  410380:	mov    r10,r14
  410383:	jmp    40febc <_start@@Base+0xcb8c>
  410388:	nop    DWORD PTR [rax+rax*1+0x0]
  410390:	lea    r15,[r13+0x8]
  410394:	mov    r9,r14
  410397:	sub    r9,r15
  41039a:	cmp    r9,0x7
  41039e:	ja     410910 <_start@@Base+0xd5e0>
  4103a4:	mov    rsi,r14
  4103a7:	mov    rdi,r15
  4103aa:	call   403420 <_start@@Base+0xf0>
  4103af:	mov    rcx,rax
  4103b2:	xor    cl,cl
  4103b4:	movabs rdx,0x73745f7479706500
  4103be:	cmp    rcx,rdx
  4103c1:	je     410420 <_start@@Base+0xd0f0>
  4103c3:	movabs rdx,0xffff000000000000
  4103cd:	and    rax,rdx
  4103d0:	movabs rdx,0x7374000000000000
  4103da:	cmp    rax,rdx
  4103dd:	jne    410420 <_start@@Base+0xd0f0>
  4103df:	cmp    r9,0x2
  4103e3:	jle    410420 <_start@@Base+0xd0f0>
  4103e5:	mov    ecx,0x2
  4103ea:	mov    rdx,r14
  4103ed:	mov    rsi,r15
  4103f0:	mov    rdi,rbx
  4103f3:	call   407470 <_start@@Base+0x4140>
  4103f8:	cmp    r15,rax
  4103fb:	je     410420 <_start@@Base+0xd0f0>
  4103fd:	sub    rsp,0x8
  410401:	lea    rdi,[rip+0xffffffffffffa018]        # 40a420 <_start@@Base+0x70f0>
  410408:	push   rdi
  410409:	mov    r8d,0x3
  41040f:	mov    ecx,0x1
  410414:	mov    r9,QWORD PTR [rsp+0x50]
  410419:	jmp    410660 <_start@@Base+0xd330>
  41041e:	xchg   ax,ax
  410420:	mov    rsi,r15
  410423:	mov    rdx,r14
  410426:	mov    rdi,rbx
  410429:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  41042e:	mov    rsi,rax
  410431:	jmp    410107 <_start@@Base+0xcdd7>
  410436:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410440:	mov    ecx,0x21
  410445:	mov    rdx,r14
  410448:	mov    rdi,rbx
  41044b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410450:	mov    rsi,rax
  410453:	jmp    40f58c <_start@@Base+0xc25c>
  410458:	nop    DWORD PTR [rax+rax*1+0x0]
  410460:	mov    rdi,rbx
  410463:	call   417850 <flatcc_json_parser_generic_json@@Base>
  410468:	mov    rsi,rax
  41046b:	jmp    40f58c <_start@@Base+0xc25c>
  410470:	mov    eax,DWORD PTR [rsp+0x38]
  410474:	mov    ecx,0x8
  410479:	test   eax,eax
  41047b:	jne    410755 <_start@@Base+0xd425>
  410481:	mov    rdx,QWORD PTR [rsp+0x40]
  410486:	cmp    rdx,0xff
  41048d:	ja     410750 <_start@@Base+0xd420>
  410493:	mov    eax,edx
  410495:	mov    BYTE PTR [rsp+0x30],dl
  410499:	mov    r12,r10
  41049c:	jmp    40fd66 <_start@@Base+0xca36>
  4104a1:	nop    DWORD PTR [rax+0x0]
  4104a8:	mov    r12d,DWORD PTR [rsp+0x38]
  4104ad:	mov    ecx,0x8
  4104b2:	test   r12d,r12d
  4104b5:	jne    410785 <_start@@Base+0xd455>
  4104bb:	mov    rdx,QWORD PTR [rsp+0x40]
  4104c0:	cmp    rdx,0xff
  4104c7:	ja     410780 <_start@@Base+0xd450>
  4104cd:	mov    eax,edx
  4104cf:	mov    BYTE PTR [rsp+0x30],dl
  4104d3:	mov    r12,r10
  4104d6:	jmp    40fefa <_start@@Base+0xcbca>
  4104db:	nop    DWORD PTR [rax+rax*1+0x0]
  4104e0:	cmp    rax,0x7f
  4104e4:	ja     410980 <_start@@Base+0xd650>
  4104ea:	mov    edx,eax
  4104ec:	mov    BYTE PTR [rsp+0x30],al
  4104f0:	jmp    40f9f0 <_start@@Base+0xc6c0>
  4104f5:	nop    DWORD PTR [rax]
  4104f8:	cmp    rax,0x7f
  4104fc:	ja     4109b0 <_start@@Base+0xd680>
  410502:	mov    edx,eax
  410504:	mov    BYTE PTR [rsp+0x30],al
  410508:	jmp    40f8a8 <_start@@Base+0xc578>
  41050d:	nop    DWORD PTR [rax]
  410510:	lea    r15,[r13+0x8]
  410514:	mov    r9,r14
  410517:	sub    r9,r15
  41051a:	cmp    r9,0x7
  41051e:	ja     410740 <_start@@Base+0xd410>
  410524:	mov    rsi,r14
  410527:	mov    rdi,r15
  41052a:	call   403420 <_start@@Base+0xf0>
  41052f:	movabs rdx,0xffff000000000000
  410539:	and    rax,rdx
  41053c:	movabs rdx,0x7065000000000000
  410546:	cmp    rax,rdx
  410549:	jne    410420 <_start@@Base+0xd0f0>
  41054f:	cmp    r9,0x2
  410553:	jle    410420 <_start@@Base+0xd0f0>
  410559:	mov    ecx,0x2
  41055e:	mov    rdx,r14
  410561:	mov    rsi,r15
  410564:	mov    rdi,rbx
  410567:	call   407470 <_start@@Base+0x4140>
  41056c:	cmp    r15,rax
  41056f:	je     410420 <_start@@Base+0xd0f0>
  410575:	lea    rdi,[rip+0xffffffffffff9ea4]        # 40a420 <_start@@Base+0x70f0>
  41057c:	push   rdi
  41057d:	lea    rdi,[rip+0x10d7c]        # 421300 <__data_start@@Base+0x240>
  410584:	mov    r8d,0x7
  41058a:	push   rdi
  41058b:	mov    ecx,0x3
  410590:	mov    r9,QWORD PTR [rsp+0x50]
  410595:	mov    rdx,r14
  410598:	mov    rsi,rax
  41059b:	mov    rdi,rbx
  41059e:	call   418e20 <flatcc_json_parser_union_type@@Base>
  4105a3:	mov    rsi,rax
  4105a6:	pop    rax
  4105a7:	pop    rdx
  4105a8:	jmp    410107 <_start@@Base+0xcdd7>
  4105ad:	nop    DWORD PTR [rax]
  4105b0:	lea    r8,[r13+0x8]
  4105b4:	mov    r9,r14
  4105b7:	sub    r9,r8
  4105ba:	cmp    r9,0x7
  4105be:	ja     410ae8 <_start@@Base+0xd7b8>
  4105c4:	mov    rdi,r8
  4105c7:	mov    rsi,r14
  4105ca:	mov    QWORD PTR [rsp+0x18],r8
  4105cf:	call   403420 <_start@@Base+0xf0>
  4105d4:	mov    r8,QWORD PTR [rsp+0x18]
  4105d9:	mov    rcx,rax
  4105dc:	xor    cx,cx
  4105df:	movabs rdx,0x6b5f747970650000
  4105e9:	cmp    rcx,rdx
  4105ec:	je     410a90 <_start@@Base+0xd760>
  4105f2:	movabs rdx,0xff00000000000000
  4105fc:	and    rax,rdx
  4105ff:	movabs rdx,0x6b00000000000000
  410609:	cmp    rax,rdx
  41060c:	jne    4107b0 <_start@@Base+0xd480>
  410612:	cmp    r9,0x1
  410616:	jle    4107b0 <_start@@Base+0xd480>
  41061c:	mov    rsi,r8
  41061f:	mov    ecx,0x1
  410624:	mov    rdx,r14
  410627:	mov    rdi,rbx
  41062a:	mov    QWORD PTR [rsp+0x18],r8
  41062f:	call   407470 <_start@@Base+0x4140>
  410634:	mov    r8,QWORD PTR [rsp+0x18]
  410639:	cmp    r8,rax
  41063c:	je     4107b0 <_start@@Base+0xd480>
  410642:	sub    rsp,0x8
  410646:	lea    rdi,[rip+0xffffffffffff9dd3]        # 40a420 <_start@@Base+0x70f0>
  41064d:	push   rdi
  41064e:	mov    r8d,0x5
  410654:	mov    ecx,0x2
  410659:	mov    r9,QWORD PTR [rsp+0x50]
  41065e:	xchg   ax,ax
  410660:	mov    rsi,rax
  410663:	mov    rdx,r14
  410666:	mov    rdi,rbx
  410669:	call   418d00 <flatcc_json_parser_union@@Base>
  41066e:	pop    r10
  410670:	mov    rsi,rax
  410673:	pop    r11
  410675:	jmp    410107 <_start@@Base+0xcdd7>
  41067a:	nop    WORD PTR [rax+rax*1+0x0]
  410680:	mov    rcx,QWORD PTR [rsp+0x40]
  410685:	mov    rsi,r13
  410688:	mov    rdx,r14
  41068b:	mov    rdi,rbx
  41068e:	call   418ca0 <flatcc_json_parser_finalize_unions@@Base>
  410693:	mov    rdi,QWORD PTR [rbx]
  410696:	mov    r13,rax
  410699:	call   413a40 <flatcc_builder_end_table@@Base>
  41069e:	mov    DWORD PTR [rsp+0x30],eax
  4106a2:	test   eax,eax
  4106a4:	jne    41015e <_start@@Base+0xce2e>
  4106aa:	jmp    410140 <_start@@Base+0xce10>
  4106af:	nop
  4106b0:	movbe  rax,QWORD PTR [r13+0x8]
  4106b6:	movabs rdx,0x72735f7479706500
  4106c0:	mov    rcx,rax
  4106c3:	xor    cl,cl
  4106c5:	cmp    rcx,rdx
  4106c8:	jne    4101e5 <_start@@Base+0xceb5>
  4106ce:	cmp    r9,0x7
  4106d2:	jle    410420 <_start@@Base+0xd0f0>
  4106d8:	mov    ecx,0x7
  4106dd:	mov    rdx,r14
  4106e0:	mov    rsi,r15
  4106e3:	mov    rdi,rbx
  4106e6:	call   407470 <_start@@Base+0x4140>
  4106eb:	cmp    r15,rax
  4106ee:	je     410420 <_start@@Base+0xd0f0>
  4106f4:	sub    rsp,0x8
  4106f8:	lea    rdi,[rip+0xffffffffffff2e11]        # 403510 <_start@@Base+0x1e0>
  4106ff:	push   rdi
  410700:	lea    rdi,[rip+0xffffffffffff9d19]        # 40a420 <_start@@Base+0x70f0>
  410707:	mov    rsi,rax
  41070a:	push   rdi
  41070b:	lea    rdi,[rip+0x10bce]        # 4212e0 <__data_start@@Base+0x220>
  410712:	mov    r8d,0x9
  410718:	push   rdi
  410719:	mov    ecx,0x4
  41071e:	mov    rdx,r14
  410721:	mov    r9,QWORD PTR [rsp+0x60]
  410726:	mov    rdi,rbx
  410729:	call   419190 <flatcc_json_parser_union_type_vector@@Base>
  41072e:	mov    rsi,rax
  410731:	add    rsp,0x20
  410735:	jmp    410107 <_start@@Base+0xcdd7>
  41073a:	nop    WORD PTR [rax+rax*1+0x0]
  410740:	movbe  rax,QWORD PTR [r13+0x8]
  410746:	jmp    41052f <_start@@Base+0xd1ff>
  41074b:	nop    DWORD PTR [rax+rax*1+0x0]
  410750:	mov    ecx,0x7
  410755:	mov    rdx,r14
  410758:	mov    rsi,r10
  41075b:	mov    rdi,rbx
  41075e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410763:	mov    r12,rax
  410766:	cmp    r13,rax
  410769:	jne    40fd61 <_start@@Base+0xca31>
  41076f:	mov    r10,r13
  410772:	jmp    40fd28 <_start@@Base+0xc9f8>
  410777:	nop    WORD PTR [rax+rax*1+0x0]
  410780:	mov    ecx,0x7
  410785:	mov    rdx,r14
  410788:	mov    rsi,r10
  41078b:	mov    rdi,rbx
  41078e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410793:	mov    r12,rax
  410796:	cmp    r13,rax
  410799:	jne    40fef5 <_start@@Base+0xcbc5>
  41079f:	mov    r10,r13
  4107a2:	jmp    40febc <_start@@Base+0xcb8c>
  4107a7:	nop    WORD PTR [rax+rax*1+0x0]
  4107b0:	mov    rsi,r8
  4107b3:	mov    rdx,r14
  4107b6:	mov    rdi,rbx
  4107b9:	call   4182e0 <flatcc_json_parser_unmatched_symbol@@Base>
  4107be:	mov    rsi,rax
  4107c1:	jmp    410107 <_start@@Base+0xcdd7>
  4107c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4107d0:	mov    r13,QWORD PTR [rsp+0x8]
  4107d5:	mov    r10d,DWORD PTR [rbx+0x20]
  4107d9:	test   r10d,r10d
  4107dc:	jne    40fa30 <_start@@Base+0xc700>
  4107e2:	mov    rdi,QWORD PTR [rbx]
  4107e5:	call   413a40 <flatcc_builder_end_table@@Base>
  4107ea:	mov    DWORD PTR [r13+0x0],eax
  4107ee:	mov    rsi,r12
  4107f1:	test   eax,eax
  4107f3:	jne    40f579 <_start@@Base+0xc249>
  4107f9:	jmp    40fa30 <_start@@Base+0xc700>
  4107fe:	xchg   ax,ax
  410800:	lea    r8,[r13+0x8]
  410804:	mov    r9,r14
  410807:	sub    r9,r8
  41080a:	cmp    r9,0x7
  41080e:	ja     410a80 <_start@@Base+0xd750>
  410814:	mov    rdi,r8
  410817:	mov    rsi,r14
  41081a:	mov    QWORD PTR [rsp+0x18],r8
  41081f:	call   403420 <_start@@Base+0xf0>
  410824:	mov    r8,QWORD PTR [rsp+0x18]
  410829:	movabs rdx,0x7261637465725f74
  410833:	cmp    rax,rdx
  410836:	je     4109e0 <_start@@Base+0xd6b0>
  41083c:	xor    ax,ax
  41083f:	movabs rdx,0x7261637465720000
  410849:	cmp    rax,rdx
  41084c:	jne    4107b0 <_start@@Base+0xd480>
  410852:	cmp    r9,0x6
  410856:	jle    4107b0 <_start@@Base+0xd480>
  41085c:	mov    rsi,r8
  41085f:	mov    ecx,0x6
  410864:	mov    rdx,r14
  410867:	mov    rdi,rbx
  41086a:	mov    QWORD PTR [rsp+0x18],r8
  41086f:	call   407470 <_start@@Base+0x4140>
  410874:	mov    r8,QWORD PTR [rsp+0x18]
  410879:	cmp    r8,rax
  41087c:	je     4107b0 <_start@@Base+0xd480>
  410882:	sub    rsp,0x8
  410886:	lea    rdi,[rip+0xffffffffffff9b93]        # 40a420 <_start@@Base+0x70f0>
  41088d:	push   rdi
  41088e:	mov    r8d,0x1
  410894:	xor    ecx,ecx
  410896:	mov    r9,QWORD PTR [rsp+0x50]
  41089b:	jmp    410660 <_start@@Base+0xd330>
  4108a0:	mov    r13,QWORD PTR [rsp+0x10]
  4108a5:	mov    ecx,DWORD PTR [rbx+0x20]
  4108a8:	test   ecx,ecx
  4108aa:	jne    40fa30 <_start@@Base+0xc700>
  4108b0:	mov    rcx,QWORD PTR [rsp+0x38]
  4108b5:	mov    rsi,r12
  4108b8:	mov    rdx,r14
  4108bb:	mov    rdi,rbx
  4108be:	call   418ca0 <flatcc_json_parser_finalize_unions@@Base>
  4108c3:	mov    rdi,QWORD PTR [rbx]
  4108c6:	mov    QWORD PTR [rsp+0x8],rax
  4108cb:	call   413a40 <flatcc_builder_end_table@@Base>
  4108d0:	test   eax,eax
  4108d2:	mov    DWORD PTR [r13+0x0],eax
  4108d6:	mov    rsi,QWORD PTR [rsp+0x8]
  4108db:	jne    40f579 <_start@@Base+0xc249>
  4108e1:	mov    r12,rsi
  4108e4:	jmp    40fa30 <_start@@Base+0xc700>
  4108e9:	nop    DWORD PTR [rax+0x0]
  4108f0:	mov    rsi,r13
  4108f3:	mov    ecx,0x5
  4108f8:	mov    rdx,r14
  4108fb:	mov    rdi,rbx
  4108fe:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410903:	mov    r13,rax
  410906:	jmp    410029 <_start@@Base+0xccf9>
  41090b:	nop    DWORD PTR [rax+rax*1+0x0]
  410910:	movbe  rax,QWORD PTR [r13+0x8]
  410916:	movabs rdx,0x73745f7479706500
  410920:	mov    rcx,rax
  410923:	xor    cl,cl
  410925:	cmp    rcx,rdx
  410928:	jne    4103c3 <_start@@Base+0xd093>
  41092e:	cmp    r9,0x7
  410932:	jle    410420 <_start@@Base+0xd0f0>
  410938:	mov    ecx,0x7
  41093d:	mov    rdx,r14
  410940:	mov    rsi,r15
  410943:	mov    rdi,rbx
  410946:	call   407470 <_start@@Base+0x4140>
  41094b:	cmp    r15,rax
  41094e:	je     410420 <_start@@Base+0xd0f0>
  410954:	lea    rdi,[rip+0xffffffffffff9ac5]        # 40a420 <_start@@Base+0x70f0>
  41095b:	push   rdi
  41095c:	lea    rdi,[rip+0x109bd]        # 421320 <__data_start@@Base+0x260>
  410963:	mov    r8d,0x3
  410969:	push   rdi
  41096a:	mov    ecx,0x1
  41096f:	mov    r9,QWORD PTR [rsp+0x50]
  410974:	jmp    410595 <_start@@Base+0xd265>
  410979:	nop    DWORD PTR [rax+0x0]
  410980:	mov    ecx,0x7
  410985:	mov    rsi,r12
  410988:	mov    rdx,r14
  41098b:	mov    rdi,rbx
  41098e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  410993:	mov    r12,rax
  410996:	cmp    r13,rax
  410999:	je     40f9b5 <_start@@Base+0xc685>
  41099f:	movzx  edx,BYTE PTR [rsp+0x30]
  4109a4:	jmp    40f9f0 <_start@@Base+0xc6c0>
  4109a9:	nop    DWORD PTR [rax+0x0]
  4109b0:	mov    ecx,0x7
  4109b5:	mov    rsi,r12
  4109b8:	mov    rdx,r14
  4109bb:	mov    rdi,rbx
  4109be:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4109c3:	mov    r12,rax
  4109c6:	cmp    r13,rax
  4109c9:	je     40f86f <_start@@Base+0xc53f>
  4109cf:	movzx  edx,BYTE PTR [rsp+0x30]
  4109d4:	jmp    40f8a8 <_start@@Base+0xc578>
  4109d9:	nop    DWORD PTR [rax+0x0]
  4109e0:	lea    r8,[r13+0x10]
  4109e4:	mov    r9,r14
  4109e7:	sub    r9,r8
  4109ea:	cmp    r9,0x7
  4109ee:	ja     410af3 <_start@@Base+0xd7c3>
  4109f4:	mov    rdi,r8
  4109f7:	mov    rsi,r14
  4109fa:	mov    QWORD PTR [rsp+0x18],r8
  4109ff:	call   403420 <_start@@Base+0xf0>
  410a04:	mov    r8,QWORD PTR [rsp+0x18]
  410a09:	movabs rdx,0xffffff0000000000
  410a13:	and    rax,rdx
  410a16:	movabs rdx,0x7970650000000000
  410a20:	cmp    rax,rdx
  410a23:	jne    4107b0 <_start@@Base+0xd480>
  410a29:	cmp    r9,0x3
  410a2d:	jle    4107b0 <_start@@Base+0xd480>
  410a33:	mov    rsi,r8
  410a36:	mov    ecx,0x3
  410a3b:	mov    rdx,r14
  410a3e:	mov    rdi,rbx
  410a41:	mov    QWORD PTR [rsp+0x18],r8
  410a46:	call   407470 <_start@@Base+0x4140>
  410a4b:	mov    r8,QWORD PTR [rsp+0x18]
  410a50:	cmp    r8,rax
  410a53:	je     4107b0 <_start@@Base+0xd480>
  410a59:	lea    rdi,[rip+0xffffffffffff99c0]        # 40a420 <_start@@Base+0x70f0>
  410a60:	push   rdi
  410a61:	lea    rdi,[rip+0x10858]        # 4212c0 <__data_start@@Base+0x200>
  410a68:	mov    r8d,0x1
  410a6e:	push   rdi
  410a6f:	xor    ecx,ecx
  410a71:	mov    r9,QWORD PTR [rsp+0x50]
  410a76:	jmp    410595 <_start@@Base+0xd265>
  410a7b:	nop    DWORD PTR [rax+rax*1+0x0]
  410a80:	movbe  rax,QWORD PTR [r13+0x8]
  410a86:	jmp    410829 <_start@@Base+0xd4f9>
  410a8b:	nop    DWORD PTR [rax+rax*1+0x0]
  410a90:	cmp    r9,0x6
  410a94:	jle    4107b0 <_start@@Base+0xd480>
  410a9a:	mov    rsi,r8
  410a9d:	mov    ecx,0x6
  410aa2:	mov    rdx,r14
  410aa5:	mov    rdi,rbx
  410aa8:	mov    QWORD PTR [rsp+0x18],r8
  410aad:	call   407470 <_start@@Base+0x4140>
  410ab2:	mov    r8,QWORD PTR [rsp+0x18]
  410ab7:	cmp    r8,rax
  410aba:	je     4107b0 <_start@@Base+0xd480>
  410ac0:	lea    rdi,[rip+0xffffffffffff9959]        # 40a420 <_start@@Base+0x70f0>
  410ac7:	push   rdi
  410ac8:	lea    rdi,[rip+0x107d1]        # 4212a0 <__data_start@@Base+0x1e0>
  410acf:	mov    r8d,0x5
  410ad5:	push   rdi
  410ad6:	mov    ecx,0x2
  410adb:	mov    r9,QWORD PTR [rsp+0x50]
  410ae0:	jmp    410595 <_start@@Base+0xd265>
  410ae5:	nop    DWORD PTR [rax]
  410ae8:	movbe  rax,QWORD PTR [r13+0x8]
  410aee:	jmp    4105d9 <_start@@Base+0xd2a9>
  410af3:	movbe  rax,QWORD PTR [r13+0x10]
  410af9:	jmp    410a09 <_start@@Base+0xd6d9>
  410afe:	mov    r13,QWORD PTR [rsp+0x8]
  410b03:	mov    r12,rax
  410b06:	jmp    40fa30 <_start@@Base+0xc700>
  410b0b:	call   4031c0 <__stack_chk_fail@plt>

0000000000410b10 <verify_parse@@Base>:
  410b10:	endbr64 
  410b14:	sub    rsp,0x8
  410b18:	test   rdi,rdi
  410b1b:	je     410b26 <verify_parse@@Base+0x16>
  410b1d:	cmp    DWORD PTR [rdi+0x4],0x534e4f4d
  410b24:	je     410b48 <verify_parse@@Base+0x38>
  410b26:	lea    rcx,[rip+0x9683]        # 41a1b0 <_IO_stdin_used@@Base+0x1b0>
  410b2d:	mov    edx,0x2b8
  410b32:	lea    rsi,[rip+0x9737]        # 41a270 <_IO_stdin_used@@Base+0x270>
  410b39:	lea    rdi,[rip+0x97b0]        # 41a2f0 <_IO_stdin_used@@Base+0x2f0>
  410b40:	call   4031e0 <__assert_fail@plt>
  410b45:	nop    DWORD PTR [rax]
  410b48:	mov    eax,DWORD PTR [rdi]
  410b4a:	add    rdi,rax
  410b4d:	je     410b26 <verify_parse@@Base+0x16>
  410b4f:	movsxd rax,DWORD PTR [rdi]
  410b52:	mov    rdx,rdi
  410b55:	sub    rdx,rax
  410b58:	cmp    WORD PTR [rdx],0x5
  410b5c:	jbe    410bf1 <verify_parse@@Base+0xe1>
  410b62:	movzx  eax,WORD PTR [rdx+0x4]
  410b66:	test   ax,ax
  410b69:	je     410bf1 <verify_parse@@Base+0xe1>
  410b6f:	add    rdi,rax
  410b72:	je     410bf1 <verify_parse@@Base+0xe1>
  410b74:	vmovss xmm0,DWORD PTR [rip+0x990c]        # 41a488 <_IO_stdin_used@@Base+0x488>
  410b7c:	vucomiss xmm0,DWORD PTR [rdi]
  410b80:	jp     410c6d <verify_parse@@Base+0x15d>
  410b86:	jne    410c6d <verify_parse@@Base+0x15d>
  410b8c:	vmovss xmm0,DWORD PTR [rdi+0x4]
  410b91:	vucomiss xmm0,DWORD PTR [rip+0x98f3]        # 41a48c <_IO_stdin_used@@Base+0x48c>
  410b99:	jp     410c8c <verify_parse@@Base+0x17c>
  410b9f:	jne    410c8c <verify_parse@@Base+0x17c>
  410ba5:	vmovss xmm0,DWORD PTR [rdi+0x8]
  410baa:	vucomiss xmm0,DWORD PTR [rip+0x98ce]        # 41a480 <_IO_stdin_used@@Base+0x480>
  410bb2:	jp     410cab <verify_parse@@Base+0x19b>
  410bb8:	jne    410cab <verify_parse@@Base+0x19b>
  410bbe:	vmovsd xmm0,QWORD PTR [rip+0x98ca]        # 41a490 <_IO_stdin_used@@Base+0x490>
  410bc6:	vucomisd xmm0,QWORD PTR [rdi+0x10]
  410bcb:	jp     410cca <verify_parse@@Base+0x1ba>
  410bd1:	jne    410cca <verify_parse@@Base+0x1ba>
  410bd7:	cmp    BYTE PTR [rdi+0x18],0x2
  410bdb:	jne    410c2f <verify_parse@@Base+0x11f>
  410bdd:	cmp    WORD PTR [rdi+0x1a],0x5
  410be2:	jne    410c4e <verify_parse@@Base+0x13e>
  410be4:	cmp    BYTE PTR [rdi+0x1c],0x6
  410be8:	jne    410c10 <verify_parse@@Base+0x100>
  410bea:	xor    eax,eax
  410bec:	add    rsp,0x8
  410bf0:	ret    
  410bf1:	lea    rcx,[rip+0x95d8]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410bf8:	mov    edx,0x2d
  410bfd:	lea    rsi,[rip+0x9714]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c04:	lea    rdi,[rip+0x9c24]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410c0b:	call   4031e0 <__assert_fail@plt>
  410c10:	lea    rcx,[rip+0x95b9]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410c17:	mov    edx,0x36
  410c1c:	lea    rsi,[rip+0x96f5]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c23:	lea    rdi,[rip+0x9c05]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410c2a:	call   4031e0 <__assert_fail@plt>
  410c2f:	lea    rcx,[rip+0x959a]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410c36:	mov    edx,0x32
  410c3b:	lea    rsi,[rip+0x96d6]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c42:	lea    rdi,[rip+0x9be6]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410c49:	call   4031e0 <__assert_fail@plt>
  410c4e:	lea    rcx,[rip+0x957b]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410c55:	mov    edx,0x35
  410c5a:	lea    rsi,[rip+0x96b7]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c61:	lea    rdi,[rip+0x9bc7]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410c68:	call   4031e0 <__assert_fail@plt>
  410c6d:	lea    rcx,[rip+0x955c]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410c74:	mov    edx,0x2e
  410c79:	lea    rsi,[rip+0x9698]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c80:	lea    rdi,[rip+0x9ba8]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410c87:	call   4031e0 <__assert_fail@plt>
  410c8c:	lea    rcx,[rip+0x953d]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410c93:	mov    edx,0x2f
  410c98:	lea    rsi,[rip+0x9679]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410c9f:	lea    rdi,[rip+0x9b89]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410ca6:	call   4031e0 <__assert_fail@plt>
  410cab:	lea    rcx,[rip+0x951e]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410cb2:	mov    edx,0x30
  410cb7:	lea    rsi,[rip+0x965a]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410cbe:	lea    rdi,[rip+0x9b6a]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410cc5:	call   4031e0 <__assert_fail@plt>
  410cca:	lea    rcx,[rip+0x94ff]        # 41a1d0 <_IO_stdin_used@@Base+0x1d0>
  410cd1:	mov    edx,0x31
  410cd6:	lea    rsi,[rip+0x963b]        # 41a318 <_IO_stdin_used@@Base+0x318>
  410cdd:	lea    rdi,[rip+0x9b4b]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  410ce4:	call   4031e0 <__assert_fail@plt>
  410ce9:	nop    DWORD PTR [rax+0x0]

0000000000410cf0 <test_parse@@Base>:
  410cf0:	endbr64 
  410cf4:	push   r15
  410cf6:	push   r14
  410cf8:	push   r13
  410cfa:	push   r12
  410cfc:	push   rbp
  410cfd:	push   rbx
  410cfe:	sub    rsp,0x258
  410d05:	lea    r13,[rsp+0xa0]
  410d0d:	mov    rdi,r13
  410d10:	mov    rax,QWORD PTR fs:0x28
  410d19:	mov    QWORD PTR [rsp+0x248],rax
  410d21:	xor    eax,eax
  410d23:	call   411a70 <flatcc_builder_init@@Base>
  410d28:	mov    rax,0x4217e0
  410d2f:	lea    rsi,[rip+0x94ad]        # 41a1e3 <_IO_stdin_used@@Base+0x1e3>
  410d36:	mov    rdi,QWORD PTR [rax]
  410d39:	call   403270 <fopen@plt>
  410d3e:	test   rax,rax
  410d41:	je     41107d <test_parse@@Base+0x38d>
  410d47:	mov    r12,rax
  410d4a:	mov    edx,0x2
  410d4f:	xor    esi,esi
  410d51:	mov    rdi,rax
  410d54:	call   403250 <fseek@plt>
  410d59:	mov    rdi,r12
  410d5c:	call   403220 <ftell@plt>
  410d61:	mov    rbx,rax
  410d64:	mov    QWORD PTR [rsp+0x10],rax
  410d69:	mov    rdi,r12
  410d6c:	cmp    rax,0x2800
  410d72:	ja     411278 <test_parse@@Base+0x588>
  410d78:	call   4031d0 <rewind@plt>
  410d7d:	test   rbx,rbx
  410d80:	mov    edi,0x1
  410d85:	cmovne rdi,rbx
  410d89:	call   403240 <malloc@plt>
  410d8e:	mov    rbp,rax
  410d91:	test   rax,rax
  410d94:	je     4112a0 <test_parse@@Base+0x5b0>
  410d9a:	xor    r15d,r15d
  410d9d:	jmp    410da3 <test_parse@@Base+0xb3>
  410d9f:	nop
  410da0:	add    r15,rax
  410da3:	mov    rdx,QWORD PTR [rsp+0x10]
  410da8:	lea    r14,[rbp+r15*1+0x0]
  410dad:	sub    rdx,r15
  410db0:	mov    rcx,r12
  410db3:	mov    esi,0x1
  410db8:	mov    rdi,r14
  410dbb:	call   403180 <fread@plt>
  410dc0:	test   rax,rax
  410dc3:	jne    410da0 <test_parse@@Base+0xb0>
  410dc5:	mov    rbx,rax
  410dc8:	mov    rdi,r12
  410dcb:	cmp    QWORD PTR [rsp+0x10],r15
  410dd0:	jne    411070 <test_parse@@Base+0x380>
  410dd6:	call   4031a0 <fclose@plt>
  410ddb:	lea    r15,[rsp+0x50]
  410de0:	vpxor  xmm0,xmm0,xmm0
  410de4:	vmovaps XMMWORD PTR [rsp+0x60],xmm0
  410dea:	mov    QWORD PTR [r15+0x40],0x0
  410df2:	vmovaps XMMWORD PTR [r15+0x20],xmm0
  410df8:	xor    ecx,ecx
  410dfa:	xor    edx,edx
  410dfc:	lea    rsi,[rip+0x93e3]        # 41a1e6 <_IO_stdin_used@@Base+0x1e6>
  410e03:	mov    rdi,r13
  410e06:	mov    QWORD PTR [rsp+0x50],r13
  410e0b:	mov    QWORD PTR [rsp+0x58],rbp
  410e10:	mov    DWORD PTR [rsp+0x68],0x1
  410e18:	mov    QWORD PTR [rsp+0x78],rbp
  410e1d:	mov    QWORD PTR [rsp+0x80],r14
  410e25:	mov    QWORD PTR [rsp+0x88],rbp
  410e2d:	call   412420 <flatcc_builder_start_buffer@@Base>
  410e32:	test   eax,eax
  410e34:	jne    4112b0 <test_parse@@Base+0x5c0>
  410e3a:	lea    r12,[rsp+0x48]
  410e3f:	mov    rcx,r12
  410e42:	mov    rdx,r14
  410e45:	mov    rsi,rbp
  410e48:	mov    rdi,r15
  410e4b:	call   40ad00 <_start@@Base+0x79d0>
  410e50:	mov    eax,DWORD PTR [rsp+0x70]
  410e54:	mov    DWORD PTR [rsp+0x30],eax
  410e58:	test   eax,eax
  410e5a:	je     410ef8 <test_parse@@Base+0x208>
  410e60:	mov    edi,DWORD PTR [rsp+0x30]
  410e64:	call   416670 <flatcc_json_parser_error_string@@Base>
  410e69:	mov    rdx,QWORD PTR [rsp+0x88]
  410e71:	sub    rsp,0x8
  410e75:	sub    rdx,QWORD PTR [rsp+0x60]
  410e7a:	push   rax
  410e7b:	mov    rax,0x4217e0
  410e82:	lea    r9d,[rdx+0x1]
  410e86:	mov    rcx,QWORD PTR [rax]
  410e89:	mov    rax,QWORD PTR [rip+0x10168]        # 420ff8 <stderr@GLIBC_2.2.5>
  410e90:	mov    r8d,DWORD PTR [rsp+0x78]
  410e95:	mov    rdi,QWORD PTR [rax]
  410e98:	lea    rdx,[rip+0x9374]        # 41a213 <_IO_stdin_used@@Base+0x213>
  410e9f:	mov    esi,0x1
  410ea4:	xor    eax,eax
  410ea6:	call   403290 <__fprintf_chk@plt>
  410eab:	pop    rax
  410eac:	pop    rdx
  410ead:	mov    DWORD PTR [rsp+0x30],0xffffffff
  410eb5:	mov    rdi,rbp
  410eb8:	call   403170 <free@plt>
  410ebd:	mov    rdi,r13
  410ec0:	call   411c30 <flatcc_builder_clear@@Base>
  410ec5:	mov    rcx,QWORD PTR [rsp+0x248]
  410ecd:	xor    rcx,QWORD PTR fs:0x28
  410ed6:	mov    eax,DWORD PTR [rsp+0x30]
  410eda:	jne    4112bd <test_parse@@Base+0x5cd>
  410ee0:	add    rsp,0x258
  410ee7:	pop    rbx
  410ee8:	pop    rbp
  410ee9:	pop    r12
  410eeb:	pop    r13
  410eed:	pop    r14
  410eef:	pop    r15
  410ef1:	ret    
  410ef2:	nop    WORD PTR [rax+rax*1+0x0]
  410ef8:	mov    esi,DWORD PTR [rsp+0x48]
  410efc:	mov    rdi,r13
  410eff:	call   412500 <flatcc_builder_end_buffer@@Base>
  410f04:	test   eax,eax
  410f06:	je     4112b0 <test_parse@@Base+0x5c0>
  410f0c:	mov    rax,0x4217e0
  410f13:	mov    r8d,DWORD PTR [rsp+0x68]
  410f18:	mov    rcx,QWORD PTR [rax]
  410f1b:	mov    rax,QWORD PTR [rip+0x100d6]        # 420ff8 <stderr@GLIBC_2.2.5>
  410f22:	lea    rdx,[rip+0x9487]        # 41a3b0 <_IO_stdin_used@@Base+0x3b0>
  410f29:	mov    rdi,QWORD PTR [rax]
  410f2c:	mov    esi,0x1
  410f31:	xor    eax,eax
  410f33:	mov    QWORD PTR [rsp+0x90],rbp
  410f3b:	call   403290 <__fprintf_chk@plt>
  410f40:	mov    rsi,r12
  410f43:	mov    rdi,r13
  410f46:	call   415120 <flatcc_builder_finalize_aligned_buffer@@Base>
  410f4b:	mov    QWORD PTR [rsp+0x8],rax
  410f50:	mov    rax,QWORD PTR [rip+0x10089]        # 420fe0 <stdout@GLIBC_2.2.5>
  410f57:	lea    rcx,[rip+0x947a]        # 41a3d8 <_IO_stdin_used@@Base+0x3d8>
  410f5e:	mov    r14,QWORD PTR [rax]
  410f61:	mov    rax,QWORD PTR [rsp+0x48]
  410f66:	lea    rdx,[rip+0x927e]        # 41a1eb <_IO_stdin_used@@Base+0x1eb>
  410f6d:	mov    r15,rax
  410f70:	mov    QWORD PTR [rsp+0x20],rax
  410f75:	mov    esi,0x1
  410f7a:	mov    rdi,r14
  410f7d:	xor    eax,eax
  410f7f:	call   403290 <__fprintf_chk@plt>
  410f84:	mov    DWORD PTR [rsp+0x34],r15d
  410f89:	test   r15d,r15d
  410f8c:	je     411288 <test_parse@@Base+0x598>
  410f92:	mov    rax,QWORD PTR [rsp+0x20]
  410f97:	xor    r15d,r15d
  410f9a:	dec    eax
  410f9c:	mov    QWORD PTR [rsp+0x28],rax
  410fa1:	lea    rax,[rsp+0x230]
  410fa9:	mov    QWORD PTR [rsp+0x38],rbx
  410fae:	mov    QWORD PTR [rsp+0x18],rax
  410fb3:	mov    rbx,r15
  410fb6:	jmp    41103c <test_parse@@Base+0x34c>
  410fbb:	nop    DWORD PTR [rax+rax*1+0x0]
  410fc0:	test   ebx,ebx
  410fc2:	jne    4110b8 <test_parse@@Base+0x3c8>
  410fc8:	mov    ecx,r15d
  410fcb:	lea    rdx,[rip+0x924f]        # 41a221 <_IO_stdin_used@@Base+0x221>
  410fd2:	mov    esi,0x1
  410fd7:	mov    rdi,r14
  410fda:	xor    eax,eax
  410fdc:	call   403290 <__fprintf_chk@plt>
  410fe1:	mov    r15,QWORD PTR [rsp+0x8]
  410fe6:	lea    rdx,[rip+0x923c]        # 41a229 <_IO_stdin_used@@Base+0x229>
  410fed:	movzx  ecx,BYTE PTR [r15+rbx*1]
  410ff2:	xor    eax,eax
  410ff4:	mov    esi,0x1
  410ff9:	mov    rdi,r14
  410ffc:	call   403290 <__fprintf_chk@plt>
  411001:	movzx  eax,BYTE PTR [r15+rbx*1]
  411006:	mov    ecx,0x2e
  41100b:	lea    edx,[rax-0x20]
  41100e:	cmp    dl,0x5f
  411011:	cmovae eax,ecx
  411014:	mov    edx,r12d
  411017:	inc    r12d
  41101a:	mov    BYTE PTR [rsp+rdx*1+0x230],al
  411021:	mov    BYTE PTR [rsp+r12*1+0x230],0x0
  41102a:	lea    rax,[rbx+0x1]
  41102e:	cmp    rbx,QWORD PTR [rsp+0x28]
  411033:	je     4110e0 <test_parse@@Base+0x3f0>
  411039:	mov    rbx,rax
  41103c:	mov    r12d,ebx
  41103f:	mov    r15d,ebx
  411042:	and    r12d,0xf
  411046:	je     410fc0 <test_parse@@Base+0x2d0>
  41104c:	test   bl,0x7
  41104f:	jne    410fe1 <test_parse@@Base+0x2f1>
  411051:	lea    rdx,[rip+0x91df]        # 41a237 <_IO_stdin_used@@Base+0x237>
  411058:	mov    esi,0x1
  41105d:	mov    rdi,r14
  411060:	xor    eax,eax
  411062:	call   403290 <__fprintf_chk@plt>
  411067:	jmp    410fe1 <test_parse@@Base+0x2f1>
  41106c:	nop    DWORD PTR [rax+0x0]
  411070:	call   4031a0 <fclose@plt>
  411075:	mov    rdi,rbp
  411078:	call   403170 <free@plt>
  41107d:	mov    rax,0x4217e0
  411084:	lea    rdx,[rip+0x92fd]        # 41a388 <_IO_stdin_used@@Base+0x388>
  41108b:	mov    rcx,QWORD PTR [rax]
  41108e:	mov    rax,QWORD PTR [rip+0xff63]        # 420ff8 <stderr@GLIBC_2.2.5>
  411095:	mov    esi,0x1
  41109a:	mov    rdi,QWORD PTR [rax]
  41109d:	xor    eax,eax
  41109f:	call   403290 <__fprintf_chk@plt>
  4110a4:	mov    DWORD PTR [rsp+0x30],0xffffffff
  4110ac:	jmp    410ec5 <test_parse@@Base+0x1d5>
  4110b1:	nop    DWORD PTR [rax+0x0]
  4110b8:	mov    rcx,QWORD PTR [rsp+0x18]
  4110bd:	lea    rdx,[rip+0x912c]        # 41a1f0 <_IO_stdin_used@@Base+0x1f0>
  4110c4:	mov    esi,0x1
  4110c9:	mov    rdi,r14
  4110cc:	xor    eax,eax
  4110ce:	call   403290 <__fprintf_chk@plt>
  4110d3:	jmp    410fc8 <test_parse@@Base+0x2d8>
  4110d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4110e0:	mov    rbx,QWORD PTR [rsp+0x38]
  4110e5:	test   BYTE PTR [rsp+0x20],0xf
  4110ea:	je     41111b <test_parse@@Base+0x42b>
  4110ec:	mov    r15d,DWORD PTR [rsp+0x34]
  4110f1:	lea    r12,[rip+0x913d]        # 41a235 <_IO_stdin_used@@Base+0x235>
  4110f8:	nop    DWORD PTR [rax+rax*1+0x0]
  411100:	mov    rdx,r12
  411103:	mov    esi,0x1
  411108:	mov    rdi,r14
  41110b:	xor    eax,eax
  41110d:	inc    r15d
  411110:	call   403290 <__fprintf_chk@plt>
  411115:	test   r15b,0xf
  411119:	jne    411100 <test_parse@@Base+0x410>
  41111b:	mov    rcx,QWORD PTR [rsp+0x18]
  411120:	mov    rdi,r14
  411123:	lea    rdx,[rip+0x90c6]        # 41a1f0 <_IO_stdin_used@@Base+0x1f0>
  41112a:	mov    esi,0x1
  41112f:	xor    eax,eax
  411131:	call   403290 <__fprintf_chk@plt>
  411136:	mov    rax,QWORD PTR [rip+0xfebb]        # 420ff8 <stderr@GLIBC_2.2.5>
  41113d:	mov    r8,QWORD PTR [rsp+0x48]
  411142:	mov    rcx,QWORD PTR [rsp+0x10]
  411147:	mov    rdi,QWORD PTR [rax]
  41114a:	lea    rdx,[rip+0x92a7]        # 41a3f8 <_IO_stdin_used@@Base+0x3f8>
  411151:	mov    esi,0x1
  411156:	xor    eax,eax
  411158:	call   403290 <__fprintf_chk@plt>
  41115d:	mov    rdi,QWORD PTR [rsp+0x8]
  411162:	lea    r14,[rip+0x90cc]        # 41a235 <_IO_stdin_used@@Base+0x235>
  411169:	call   410b10 <verify_parse@@Base>
  41116e:	mov    rax,QWORD PTR [rip+0xfe6b]        # 420fe0 <stdout@GLIBC_2.2.5>
  411175:	mov    r15,QWORD PTR [rsp+0x48]
  41117a:	mov    r12,QWORD PTR [rax]
  41117d:	lea    rcx,[rip+0x90e0]        # 41a264 <_IO_stdin_used@@Base+0x264>
  411184:	lea    rdx,[rip+0x906b]        # 41a1f6 <_IO_stdin_used@@Base+0x1f6>
  41118b:	mov    esi,0x1
  411190:	mov    rdi,r12
  411193:	xor    eax,eax
  411195:	call   403290 <__fprintf_chk@plt>
  41119a:	lea    eax,[r15-0x1]
  41119e:	test   r15d,r15d
  4111a1:	je     411248 <test_parse@@Base+0x558>
  4111a7:	mov    r15,rax
  4111aa:	jmp    4111e0 <test_parse@@Base+0x4f0>
  4111ac:	nop    DWORD PTR [rax+0x0]
  4111b0:	test   bl,0x7
  4111b3:	je     411200 <test_parse@@Base+0x510>
  4111b5:	mov    rax,QWORD PTR [rsp+0x8]
  4111ba:	lea    rdx,[rip+0x9078]        # 41a239 <_IO_stdin_used@@Base+0x239>
  4111c1:	movzx  ecx,BYTE PTR [rax+rbx*1]
  4111c5:	mov    esi,0x1
  4111ca:	mov    rdi,r12
  4111cd:	xor    eax,eax
  4111cf:	call   403290 <__fprintf_chk@plt>
  4111d4:	lea    rax,[rbx+0x1]
  4111d8:	cmp    r15,rbx
  4111db:	je     411218 <test_parse@@Base+0x528>
  4111dd:	mov    rbx,rax
  4111e0:	test   bl,0xf
  4111e3:	jne    4111b0 <test_parse@@Base+0x4c0>
  4111e5:	lea    rdx,[rip+0x9048]        # 41a234 <_IO_stdin_used@@Base+0x234>
  4111ec:	mov    esi,0x1
  4111f1:	mov    rdi,r12
  4111f4:	xor    eax,eax
  4111f6:	call   403290 <__fprintf_chk@plt>
  4111fb:	jmp    4111b5 <test_parse@@Base+0x4c5>
  4111fd:	nop    DWORD PTR [rax]
  411200:	mov    rdx,r14
  411203:	mov    esi,0x1
  411208:	mov    rdi,r12
  41120b:	xor    eax,eax
  41120d:	call   403290 <__fprintf_chk@plt>
  411212:	jmp    4111b5 <test_parse@@Base+0x4c5>
  411214:	nop    DWORD PTR [rax+0x0]
  411218:	mov    rdi,r12
  41121b:	lea    rdx,[rip+0x900d]        # 41a22f <_IO_stdin_used@@Base+0x22f>
  411222:	mov    esi,0x1
  411227:	xor    eax,eax
  411229:	call   403290 <__fprintf_chk@plt>
  41122e:	mov    rdi,r13
  411231:	call   411c20 <flatcc_builder_reset@@Base>
  411236:	mov    rdi,QWORD PTR [rsp+0x8]
  41123b:	call   415280 <flatcc_builder_aligned_free@@Base>
  411240:	jmp    410eb5 <test_parse@@Base+0x1c5>
  411245:	nop    DWORD PTR [rax]
  411248:	lea    rdx,[rip+0x8fe0]        # 41a22f <_IO_stdin_used@@Base+0x22f>
  41124f:	mov    esi,0x1
  411254:	mov    rdi,r12
  411257:	xor    eax,eax
  411259:	call   403290 <__fprintf_chk@plt>
  41125e:	mov    rdi,r13
  411261:	call   411c20 <flatcc_builder_reset@@Base>
  411266:	cmp    QWORD PTR [rsp+0x8],0x0
  41126c:	je     410eb5 <test_parse@@Base+0x1c5>
  411272:	jmp    411236 <test_parse@@Base+0x546>
  411274:	nop    DWORD PTR [rax+0x0]
  411278:	call   4031a0 <fclose@plt>
  41127d:	jmp    41107d <test_parse@@Base+0x38d>
  411282:	nop    WORD PTR [rax+rax*1+0x0]
  411288:	lea    rax,[rsp+0x230]
  411290:	mov    QWORD PTR [rsp+0x18],rax
  411295:	jmp    41111b <test_parse@@Base+0x42b>
  41129a:	nop    WORD PTR [rax+rax*1+0x0]
  4112a0:	mov    rdi,r12
  4112a3:	call   4031a0 <fclose@plt>
  4112a8:	jmp    41107d <test_parse@@Base+0x38d>
  4112ad:	nop    DWORD PTR [rax]
  4112b0:	mov    eax,DWORD PTR [rsp+0x70]
  4112b4:	mov    DWORD PTR [rsp+0x30],eax
  4112b8:	jmp    410e60 <test_parse@@Base+0x170>
  4112bd:	call   4031c0 <__stack_chk_fail@plt>
  4112c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4112cc:	nop    DWORD PTR [rax+0x0]
  4112d0:	push   rbp
  4112d1:	mov    ebp,edx
  4112d3:	mov    r8d,0x1
  4112d9:	push   rbx
  4112da:	mov    rbx,rdi
  4112dd:	mov    ecx,0x1
  4112e2:	sub    rsp,0x8
  4112e6:	mov    edx,DWORD PTR [rdi+0x28]
  4112e9:	add    rdx,rsi
  4112ec:	lea    rsi,[rdi+0x68]
  4112f0:	mov    rdi,QWORD PTR [rdi+0x40]
  4112f4:	call   QWORD PTR [rbx+0x50]
  4112f7:	test   eax,eax
  4112f9:	jne    411328 <test_parse@@Base+0x638>
  4112fb:	mov    edx,DWORD PTR [rbx+0x28]
  4112fe:	mov    rcx,rdx
  411301:	add    rdx,QWORD PTR [rbx+0x68]
  411305:	mov    QWORD PTR [rbx+0x18],rdx
  411309:	mov    edx,DWORD PTR [rbx+0x70]
  41130c:	sub    edx,ecx
  41130e:	cmp    ebp,edx
  411310:	cmovb  edx,ebp
  411313:	mov    DWORD PTR [rbx+0x24],edx
  411316:	mov    rdx,QWORD PTR [rbx+0x30]
  41131a:	mov    DWORD PTR [rdx+0x4],ebp
  41131d:	add    rsp,0x8
  411321:	pop    rbx
  411322:	pop    rbp
  411323:	ret    
  411324:	nop    DWORD PTR [rax+0x0]
  411328:	mov    eax,0xffffffff
  41132d:	jmp    41131d <test_parse@@Base+0x62d>
  41132f:	nop

0000000000411330 <flatcc_builder_default_alloc@@Base>:
  411330:	endbr64 
  411334:	push   r13
  411336:	push   r12
  411338:	push   rbp
  411339:	mov    rbp,rsi
  41133c:	push   rbx
  41133d:	sub    rsp,0x18
  411341:	test   rdx,rdx
  411344:	je     411408 <flatcc_builder_default_alloc@@Base+0xd8>
  41134a:	mov    r13d,ecx
  41134d:	cmp    r8d,0x4
  411351:	je     411440 <flatcc_builder_default_alloc@@Base+0x110>
  411357:	jle    4113d0 <flatcc_builder_default_alloc@@Base+0xa0>
  411359:	mov    rbx,rdx
  41135c:	cmp    r8d,0x5
  411360:	je     411388 <flatcc_builder_default_alloc@@Base+0x58>
  411362:	cmp    r8d,0x7
  411366:	mov    ebx,0x40
  41136b:	mov    eax,0x20
  411370:	cmovne rbx,rax
  411374:	cmp    rbx,rdx
  411377:	jae    411388 <flatcc_builder_default_alloc@@Base+0x58>
  411379:	nop    DWORD PTR [rax+0x0]
  411380:	add    rbx,rbx
  411383:	cmp    rdx,rbx
  411386:	ja     411380 <flatcc_builder_default_alloc@@Base+0x50>
  411388:	mov    rax,QWORD PTR [rbp+0x8]
  41138c:	cmp    rdx,rax
  41138f:	ja     41139e <flatcc_builder_default_alloc@@Base+0x6e>
  411391:	shr    rax,1
  411394:	mov    rdx,rax
  411397:	xor    eax,eax
  411399:	cmp    rdx,rbx
  41139c:	jae    4113c5 <flatcc_builder_default_alloc@@Base+0x95>
  41139e:	mov    rdi,QWORD PTR [rbp+0x0]
  4113a2:	mov    rsi,rbx
  4113a5:	call   403260 <realloc@plt>
  4113aa:	mov    r12,rax
  4113ad:	test   rax,rax
  4113b0:	je     41144a <flatcc_builder_default_alloc@@Base+0x11a>
  4113b6:	test   r13d,r13d
  4113b9:	jne    4113e8 <flatcc_builder_default_alloc@@Base+0xb8>
  4113bb:	mov    QWORD PTR [rbp+0x0],r12
  4113bf:	mov    QWORD PTR [rbp+0x8],rbx
  4113c3:	xor    eax,eax
  4113c5:	add    rsp,0x18
  4113c9:	pop    rbx
  4113ca:	pop    rbp
  4113cb:	pop    r12
  4113cd:	pop    r13
  4113cf:	ret    
  4113d0:	cmp    r8d,0x1
  4113d4:	mov    ebx,0x100
  4113d9:	mov    eax,0x20
  4113de:	cmovne rbx,rax
  4113e2:	jmp    411374 <flatcc_builder_default_alloc@@Base+0x44>
  4113e4:	nop    DWORD PTR [rax+0x0]
  4113e8:	mov    rax,QWORD PTR [rbp+0x8]
  4113ec:	cmp    rax,rbx
  4113ef:	jae    4113bb <flatcc_builder_default_alloc@@Base+0x8b>
  4113f1:	mov    rdx,rbx
  4113f4:	sub    rdx,rax
  4113f7:	lea    rdi,[r12+rax*1]
  4113fb:	xor    esi,esi
  4113fd:	call   4031f0 <memset@plt>
  411402:	jmp    4113bb <flatcc_builder_default_alloc@@Base+0x8b>
  411404:	nop    DWORD PTR [rax+0x0]
  411408:	mov    rdi,QWORD PTR [rsi]
  41140b:	xor    eax,eax
  41140d:	test   rdi,rdi
  411410:	je     4113c5 <flatcc_builder_default_alloc@@Base+0x95>
  411412:	mov    DWORD PTR [rsp+0xc],eax
  411416:	call   403170 <free@plt>
  41141b:	mov    QWORD PTR [rbp+0x0],0x0
  411423:	mov    QWORD PTR [rbp+0x8],0x0
  41142b:	mov    eax,DWORD PTR [rsp+0xc]
  41142f:	add    rsp,0x18
  411433:	pop    rbx
  411434:	pop    rbp
  411435:	pop    r12
  411437:	pop    r13
  411439:	ret    
  41143a:	nop    WORD PTR [rax+rax*1+0x0]
  411440:	mov    ebx,0x120
  411445:	jmp    411374 <flatcc_builder_default_alloc@@Base+0x44>
  41144a:	mov    eax,0xffffffff
  41144f:	jmp    4113c5 <flatcc_builder_default_alloc@@Base+0x95>
  411454:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41145f:	nop
  411460:	push   rax
  411461:	pop    rax
  411462:	lea    rcx,[rip+0x9ae7]        # 41af50 <_IO_stdin_used@@Base+0xf50>
  411469:	mov    edx,0x134
  41146e:	lea    rsi,[rip+0x9023]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411475:	lea    rdi,[rip+0x93b3]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  41147c:	sub    rsp,0x8
  411480:	call   4031e0 <__assert_fail@plt>
  411485:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411490:	push   rax
  411491:	pop    rax
  411492:	lea    rcx,[rip+0x9a47]        # 41aee0 <_IO_stdin_used@@Base+0xee0>
  411499:	mov    edx,0x2a5
  41149e:	lea    rsi,[rip+0x8ff3]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4114a5:	lea    rdi,[rip+0x9383]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4114ac:	sub    rsp,0x8
  4114b0:	call   4031e0 <__assert_fail@plt>
  4114b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4114c0:	push   rbx
  4114c1:	mov    r9,rdi
  4114c4:	sub    rsp,0xa0
  4114cb:	mov    rbx,QWORD PTR fs:0x28
  4114d4:	mov    QWORD PTR [rsp+0x98],rbx
  4114dc:	xor    ebx,ebx
  4114de:	test   dx,dx
  4114e1:	je     411540 <flatcc_builder_default_alloc@@Base+0x210>
  4114e3:	mov    eax,edx
  4114e5:	movzx  edx,dx
  4114e8:	movzx  edi,WORD PTR [rsi]
  4114eb:	cmp    di,0x3
  4114ef:	ja     4114fe <flatcc_builder_default_alloc@@Base+0x1ce>
  4114f1:	mov    edi,0x4
  4114f6:	mov    WORD PTR [rsi],di
  4114f9:	mov    edi,0x4
  4114fe:	cmp    ax,di
  411501:	jbe    411506 <flatcc_builder_default_alloc@@Base+0x1d6>
  411503:	mov    WORD PTR [rsi],ax
  411506:	test   ecx,ecx
  411508:	jne    411517 <flatcc_builder_default_alloc@@Base+0x1e7>
  41150a:	mov    ebx,DWORD PTR [r9+0xf4]
  411511:	dec    edx
  411513:	and    edx,ebx
  411515:	jne    411560 <flatcc_builder_default_alloc@@Base+0x230>
  411517:	xor    eax,eax
  411519:	mov    rbx,QWORD PTR [rsp+0x98]
  411521:	xor    rbx,QWORD PTR fs:0x28
  41152a:	jne    4115cd <flatcc_builder_default_alloc@@Base+0x29d>
  411530:	add    rsp,0xa0
  411537:	pop    rbx
  411538:	ret    
  411539:	nop    DWORD PTR [rax+0x0]
  411540:	movzx  eax,WORD PTR [rdi+0xec]
  411547:	movzx  edx,ax
  41154a:	test   ax,ax
  41154d:	jne    4114e8 <flatcc_builder_default_alloc@@Base+0x1b8>
  41154f:	mov    edx,0x1
  411554:	mov    eax,0x1
  411559:	jmp    4114e8 <flatcc_builder_default_alloc@@Base+0x1b8>
  41155b:	nop    DWORD PTR [rax+rax*1+0x0]
  411560:	mov    rax,0x41af80
  411567:	movsxd r8,edx
  41156a:	add    edx,ebx
  41156c:	mov    QWORD PTR [rsp],r8
  411570:	mov    QWORD PTR [rsp+0x10],rax
  411575:	mov    QWORD PTR [rsp+0x18],r8
  41157a:	mov    DWORD PTR [rsp+0x8],0x1
  411582:	mov    DWORD PTR [r9+0xf4],edx
  411589:	cmp    ebx,edx
  41158b:	jg     4115d7 <flatcc_builder_default_alloc@@Base+0x2a7>
  41158d:	mov    rdi,QWORD PTR [r9+0x38]
  411591:	lea    rsi,[rsp+0x10]
  411596:	mov    ecx,ebx
  411598:	mov    edx,0x1
  41159d:	call   QWORD PTR [r9+0x48]
  4115a1:	test   eax,eax
  4115a3:	jne    4115d2 <flatcc_builder_default_alloc@@Base+0x2a2>
  4115a5:	cmp    ebx,0xffffffff
  4115a8:	jne    411517 <flatcc_builder_default_alloc@@Base+0x1e7>
  4115ae:	lea    rcx,[rip+0x993b]        # 41aef0 <_IO_stdin_used@@Base+0xef0>
  4115b5:	mov    edx,0x2be
  4115ba:	lea    rsi,[rip+0x8ed7]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4115c1:	lea    rdi,[rip+0x9267]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4115c8:	call   4031e0 <__assert_fail@plt>
  4115cd:	call   4031c0 <__stack_chk_fail@plt>
  4115d2:	call   411490 <flatcc_builder_default_alloc@@Base+0x160>
  4115d7:	lea    rcx,[rip+0x9902]        # 41aee0 <_IO_stdin_used@@Base+0xee0>
  4115de:	mov    edx,0x2a1
  4115e3:	lea    rsi,[rip+0x8eae]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4115ea:	lea    rdi,[rip+0x923e]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4115f1:	call   4031e0 <__assert_fail@plt>
  4115f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411600:	push   rax
  411601:	pop    rax
  411602:	lea    rcx,[rip+0x98c7]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  411609:	mov    edx,0x28b
  41160e:	lea    rsi,[rip+0x8e83]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411615:	lea    rdi,[rip+0x9213]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  41161c:	sub    rsp,0x8
  411620:	call   4031e0 <__assert_fail@plt>
  411625:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411630:	push   rax
  411631:	pop    rax
  411632:	lea    rcx,[rip+0x97f7]        # 41ae30 <_IO_stdin_used@@Base+0xe30>
  411639:	mov    edx,0x37c
  41163e:	lea    rsi,[rip+0x8e53]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411645:	lea    rdi,[rip+0x91bc]        # 41a808 <_IO_stdin_used@@Base+0x808>
  41164c:	sub    rsp,0x8
  411650:	call   4031e0 <__assert_fail@plt>
  411655:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411660:	push   r12
  411662:	mov    r12d,esi
  411665:	push   rbp
  411666:	push   rbx
  411667:	mov    rbx,rdi
  41166a:	movsxd rax,DWORD PTR [rdi+0x104]
  411671:	lea    edx,[rax+0x1]
  411674:	mov    DWORD PTR [rdi+0x104],edx
  41167a:	cmp    edx,DWORD PTR [rdi+0x108]
  411680:	jle    411750 <flatcc_builder_default_alloc@@Base+0x420>
  411686:	mov    ecx,DWORD PTR [rdi+0x120]
  41168c:	cmp    edx,ecx
  41168e:	jle    411698 <flatcc_builder_default_alloc@@Base+0x368>
  411690:	test   ecx,ecx
  411692:	jg     411768 <flatcc_builder_default_alloc@@Base+0x438>
  411698:	lea    rcx,[rax+rax*8]
  41169c:	lea    rbp,[rcx*4+0x0]
  4116a4:	lea    rdx,[rbp+0x24]
  4116a8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  4116af:	jbe    4116cf <flatcc_builder_default_alloc@@Base+0x39f>
  4116b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4116b5:	xor    ecx,ecx
  4116b7:	lea    rsi,[rbx+0x98]
  4116be:	mov    r8d,0x4
  4116c4:	call   QWORD PTR [rbx+0x50]
  4116c7:	test   eax,eax
  4116c9:	jne    41176f <flatcc_builder_default_alloc@@Base+0x43f>
  4116cf:	mov    rcx,rbp
  4116d2:	add    rcx,QWORD PTR [rbx+0x98]
  4116d9:	mov    QWORD PTR [rbx+0x30],rcx
  4116dd:	je     411768 <flatcc_builder_default_alloc@@Base+0x438>
  4116e3:	movabs rdx,0xe38e38e38e38e38f
  4116ed:	mov    rax,rdx
  4116f0:	mul    QWORD PTR [rbx+0xa0]
  4116f7:	mov    eax,DWORD PTR [rbx+0x120]
  4116fd:	shr    rdx,0x5
  411701:	mov    DWORD PTR [rbx+0x108],edx
  411707:	cmp    eax,edx
  411709:	jge    411710 <flatcc_builder_default_alloc@@Base+0x3e0>
  41170b:	test   eax,eax
  41170d:	jg     411760 <flatcc_builder_default_alloc@@Base+0x430>
  41170f:	nop
  411710:	movzx  eax,WORD PTR [rbx+0xea]
  411717:	mov    edx,DWORD PTR [rbx+0x20]
  41171a:	mov    WORD PTR [rcx+0xc],ax
  41171e:	mov    eax,DWORD PTR [rbx+0x28]
  411721:	mov    DWORD PTR [rcx+0x8],edx
  411724:	mov    WORD PTR [rbx+0xea],r12w
  41172c:	mov    DWORD PTR [rcx],eax
  41172e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  411735:	lea    eax,[rdx+rax*1+0x7]
  411739:	mov    DWORD PTR [rbx+0x20],0x0
  411740:	and    eax,0xfffffff8
  411743:	mov    DWORD PTR [rbx+0x28],eax
  411746:	xor    eax,eax
  411748:	pop    rbx
  411749:	pop    rbp
  41174a:	pop    r12
  41174c:	ret    
  41174d:	nop    DWORD PTR [rax]
  411750:	mov    rax,QWORD PTR [rdi+0x30]
  411754:	lea    rcx,[rax+0x24]
  411758:	mov    QWORD PTR [rdi+0x30],rcx
  41175c:	jmp    411710 <flatcc_builder_default_alloc@@Base+0x3e0>
  41175e:	xchg   ax,ax
  411760:	mov    DWORD PTR [rbx+0x108],eax
  411766:	jmp    411710 <flatcc_builder_default_alloc@@Base+0x3e0>
  411768:	mov    eax,0xffffffff
  41176d:	jmp    411748 <flatcc_builder_default_alloc@@Base+0x418>
  41176f:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  411774:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41177f:	nop
  411780:	push   rbp
  411781:	push   rbx
  411782:	sub    rsp,0xb8
  411789:	mov    rax,QWORD PTR fs:0x28
  411792:	mov    QWORD PTR [rsp+0xa8],rax
  41179a:	xor    eax,eax
  41179c:	cmp    edx,0x3fffffff
  4117a2:	ja     411938 <flatcc_builder_default_alloc@@Base+0x608>
  4117a8:	cmp    WORD PTR [rdi+0xe8],0x3
  4117b0:	mov    rbx,rdi
  4117b3:	ja     4117c1 <flatcc_builder_default_alloc@@Base+0x491>
  4117b5:	mov    eax,0x4
  4117ba:	mov    WORD PTR [rdi+0xe8],ax
  4117c1:	mov    edi,DWORD PTR [rbx+0xf0]
  4117c7:	mov    r9d,edx
  4117ca:	mov    eax,edi
  4117cc:	lea    r8,[rsp+0xc]
  4117d1:	and    eax,0x3
  4117d4:	shl    r9d,0x2
  4117d8:	mov    QWORD PTR [rsp+0x20],r8
  4117dd:	mov    DWORD PTR [rsp+0xc],edx
  4117e1:	mov    QWORD PTR [rsp+0x10],0x4
  4117ea:	mov    QWORD PTR [rsp+0x28],0x4
  4117f3:	mov    DWORD PTR [rsp+0x18],0x1
  4117fb:	mov    r8d,0x4
  411801:	je     411821 <flatcc_builder_default_alloc@@Base+0x4f1>
  411803:	mov    r9d,r9d
  411806:	lea    r8,[r9+0x4]
  41180a:	mov    QWORD PTR [rsp+0x10],r8
  41180f:	mov    QWORD PTR [rsp+0x30],rsi
  411814:	mov    QWORD PTR [rsp+0x38],r9
  411819:	mov    DWORD PTR [rsp+0x18],0x2
  411821:	test   eax,eax
  411823:	jne    411900 <flatcc_builder_default_alloc@@Base+0x5d0>
  411829:	mov    r10d,r8d
  41182c:	test   edx,edx
  41182e:	je     4118a6 <flatcc_builder_default_alloc@@Base+0x576>
  411830:	sub    r10d,edi
  411833:	lea    r9d,[rdx-0x1]
  411837:	xor    eax,eax
  411839:	sub    r10d,0x4
  41183d:	jmp    411868 <flatcc_builder_default_alloc@@Base+0x538>
  41183f:	nop
  411840:	mov    edi,eax
  411842:	neg    edi
  411844:	lea    edi,[r10+rdi*4]
  411848:	add    edx,edi
  41184a:	mov    DWORD PTR [rsi+rax*4],edx
  41184d:	test   rcx,rcx
  411850:	je     41185c <flatcc_builder_default_alloc@@Base+0x52c>
  411852:	cmp    BYTE PTR [rcx+rax*1],0x0
  411856:	je     41195b <flatcc_builder_default_alloc@@Base+0x62b>
  41185c:	lea    rdx,[rax+0x1]
  411860:	cmp    rax,r9
  411863:	je     4118a0 <flatcc_builder_default_alloc@@Base+0x570>
  411865:	mov    rax,rdx
  411868:	mov    edx,DWORD PTR [rsi+rax*4]
  41186b:	test   edx,edx
  41186d:	jne    411840 <flatcc_builder_default_alloc@@Base+0x510>
  41186f:	test   rcx,rcx
  411872:	je     41193c <flatcc_builder_default_alloc@@Base+0x60c>
  411878:	cmp    BYTE PTR [rcx+rax*1],0x0
  41187c:	je     41185c <flatcc_builder_default_alloc@@Base+0x52c>
  41187e:	lea    rcx,[rip+0x92cb]        # 41ab50 <_IO_stdin_used@@Base+0xb50>
  411885:	mov    edx,0x5b5
  41188a:	lea    rsi,[rip+0x8c07]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411891:	lea    rdi,[rip+0x8f99]        # 41a831 <_IO_stdin_used@@Base+0x831>
  411898:	call   4031e0 <__assert_fail@plt>
  41189d:	nop    DWORD PTR [rax]
  4118a0:	mov    edi,DWORD PTR [rbx+0xf0]
  4118a6:	mov    ebp,edi
  4118a8:	sub    ebp,r8d
  4118ab:	cmp    ebp,edi
  4118ad:	jge    41197a <flatcc_builder_default_alloc@@Base+0x64a>
  4118b3:	mov    rdi,QWORD PTR [rbx+0x38]
  4118b7:	mov    edx,DWORD PTR [rsp+0x18]
  4118bb:	lea    rsi,[rsp+0x20]
  4118c0:	mov    ecx,ebp
  4118c2:	call   QWORD PTR [rbx+0x48]
  4118c5:	test   eax,eax
  4118c7:	jne    41199e <flatcc_builder_default_alloc@@Base+0x66e>
  4118cd:	mov    DWORD PTR [rbx+0xf0],ebp
  4118d3:	mov    rbx,QWORD PTR [rsp+0xa8]
  4118db:	xor    rbx,QWORD PTR fs:0x28
  4118e4:	mov    eax,ebp
  4118e6:	jne    411999 <flatcc_builder_default_alloc@@Base+0x669>
  4118ec:	add    rsp,0xb8
  4118f3:	pop    rbx
  4118f4:	pop    rbp
  4118f5:	ret    
  4118f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411900:	movsxd r10,DWORD PTR [rsp+0x18]
  411905:	mov    r11,0x41af80
  41190c:	mov    r9,r10
  41190f:	add    r8,rax
  411912:	shl    r10,0x4
  411916:	inc    r9d
  411919:	mov    QWORD PTR [rsp+0x10],r8
  41191e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  411923:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  411928:	mov    DWORD PTR [rsp+0x18],r9d
  41192d:	jmp    411829 <flatcc_builder_default_alloc@@Base+0x4f9>
  411932:	nop    WORD PTR [rax+rax*1+0x0]
  411938:	xor    ebp,ebp
  41193a:	jmp    4118d3 <flatcc_builder_default_alloc@@Base+0x5a3>
  41193c:	lea    rcx,[rip+0x920d]        # 41ab50 <_IO_stdin_used@@Base+0xb50>
  411943:	mov    edx,0x5b7
  411948:	lea    rsi,[rip+0x8b49]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41194f:	lea    rdi,[rip+0x8ed9]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  411956:	call   4031e0 <__assert_fail@plt>
  41195b:	lea    rcx,[rip+0x91ee]        # 41ab50 <_IO_stdin_used@@Base+0xb50>
  411962:	mov    edx,0x5b1
  411967:	lea    rsi,[rip+0x8b2a]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41196e:	lea    rdi,[rip+0x8eae]        # 41a823 <_IO_stdin_used@@Base+0x823>
  411975:	call   4031e0 <__assert_fail@plt>
  41197a:	lea    rcx,[rip+0x954f]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  411981:	mov    edx,0x287
  411986:	lea    rsi,[rip+0x8b0b]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41198d:	lea    rdi,[rip+0x8e9b]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  411994:	call   4031e0 <__assert_fail@plt>
  411999:	call   4031c0 <__stack_chk_fail@plt>
  41199e:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  4119a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4119ae:	xchg   ax,ax

00000000004119b0 <flatcc_builder_flush_vtable_cache@@Base>:
  4119b0:	endbr64 
  4119b4:	cmp    QWORD PTR [rdi+0xd8],0x0
  4119bc:	jne    4119c0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4119be:	ret    
  4119bf:	nop
  4119c0:	push   rbx
  4119c1:	mov    rbx,rdi
  4119c4:	xor    esi,esi
  4119c6:	mov    rdx,QWORD PTR [rbx+0xb0]
  4119cd:	mov    rdi,QWORD PTR [rdi+0xa8]
  4119d4:	call   4031f0 <memset@plt>
  4119d9:	movabs rax,0x1000000000
  4119e3:	mov    QWORD PTR [rbx+0xe0],rax
  4119ea:	pop    rbx
  4119eb:	ret    
  4119ec:	nop    DWORD PTR [rax+0x0]

00000000004119f0 <flatcc_builder_custom_init@@Base>:
  4119f0:	endbr64 
  4119f4:	mov    QWORD PTR [rdi],0x0
  4119fb:	mov    QWORD PTR [rdi+0x180],0x0
  411a06:	mov    r9,rdi
  411a09:	lea    rdi,[rdi+0x8]
  411a0d:	and    rdi,0xfffffffffffffff8
  411a11:	mov    r10,rcx
  411a14:	mov    rcx,r9
  411a17:	sub    rcx,rdi
  411a1a:	add    ecx,0x188
  411a20:	shr    ecx,0x3
  411a23:	xor    eax,eax
  411a25:	rep stos QWORD PTR es:[rdi],rax
  411a28:	test   rsi,rsi
  411a2b:	je     411a48 <flatcc_builder_custom_init@@Base+0x58>
  411a2d:	test   r10,r10
  411a30:	je     411a66 <flatcc_builder_custom_init@@Base+0x76>
  411a32:	mov    QWORD PTR [r9+0x40],r8
  411a36:	mov    QWORD PTR [r9+0x50],r10
  411a3a:	mov    QWORD PTR [r9+0x38],rdx
  411a3e:	mov    QWORD PTR [r9+0x48],rsi
  411a42:	xor    eax,eax
  411a44:	ret    
  411a45:	nop    DWORD PTR [rax]
  411a48:	mov    DWORD PTR [r9+0x128],0x1
  411a53:	lea    rdx,[r9+0x130]
  411a5a:	mov    rsi,0x4154a0
  411a61:	test   r10,r10
  411a64:	jne    411a32 <flatcc_builder_custom_init@@Base+0x42>
  411a66:	mov    r10,0x411330
  411a6d:	jmp    411a32 <flatcc_builder_custom_init@@Base+0x42>
  411a6f:	nop

0000000000411a70 <flatcc_builder_init@@Base>:
  411a70:	endbr64 
  411a74:	xor    r8d,r8d
  411a77:	xor    ecx,ecx
  411a79:	xor    edx,edx
  411a7b:	xor    esi,esi
  411a7d:	jmp    4119f0 <flatcc_builder_custom_init@@Base>
  411a82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411a8d:	nop    DWORD PTR [rax]

0000000000411a90 <flatcc_builder_custom_reset@@Base>:
  411a90:	endbr64 
  411a94:	push   r14
  411a96:	mov    r14d,esi
  411a99:	push   r13
  411a9b:	mov    r13d,edx
  411a9e:	push   r12
  411aa0:	mov    r12,rdi
  411aa3:	push   rbp
  411aa4:	xor    ebp,ebp
  411aa6:	push   rbx
  411aa7:	lea    rbx,[rdi+0x58]
  411aab:	jmp    411af5 <flatcc_builder_custom_reset@@Base+0x65>
  411aad:	nop    DWORD PTR [rax]
  411ab0:	cmp    ebp,0x5
  411ab3:	je     411adf <flatcc_builder_custom_reset@@Base+0x4f>
  411ab5:	test   r13d,r13d
  411ab8:	je     411adf <flatcc_builder_custom_reset@@Base+0x4f>
  411aba:	mov    rdi,QWORD PTR [r12+0x40]
  411abf:	mov    r8d,ebp
  411ac2:	mov    ecx,0x1
  411ac7:	mov    edx,0x1
  411acc:	mov    rsi,rbx
  411acf:	call   QWORD PTR [r12+0x50]
  411ad4:	test   eax,eax
  411ad6:	jne    411c10 <flatcc_builder_custom_reset@@Base+0x180>
  411adc:	mov    rdi,QWORD PTR [rbx]
  411adf:	mov    rdx,QWORD PTR [rbx+0x8]
  411ae3:	xor    esi,esi
  411ae5:	call   4031f0 <memset@plt>
  411aea:	inc    ebp
  411aec:	add    rbx,0x10
  411af0:	cmp    ebp,0x8
  411af3:	je     411b28 <flatcc_builder_custom_reset@@Base+0x98>
  411af5:	mov    rdi,QWORD PTR [rbx]
  411af8:	test   rdi,rdi
  411afb:	jne    411ab0 <flatcc_builder_custom_reset@@Base+0x20>
  411afd:	cmp    QWORD PTR [rbx+0x8],0x0
  411b02:	je     411aea <flatcc_builder_custom_reset@@Base+0x5a>
  411b04:	lea    rcx,[rip+0x9455]        # 41af60 <_IO_stdin_used@@Base+0xf60>
  411b0b:	mov    edx,0x1b2
  411b10:	lea    rsi,[rip+0x8981]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411b17:	lea    rdi,[rip+0x8d21]        # 41a83f <_IO_stdin_used@@Base+0x83f>
  411b1e:	call   4031e0 <__assert_fail@plt>
  411b23:	nop    DWORD PTR [rax+rax*1+0x0]
  411b28:	mov    edx,DWORD PTR [r12+0xe4]
  411b30:	mov    DWORD PTR [r12+0xe0],0x0
  411b3c:	test   edx,edx
  411b3e:	je     411b4c <flatcc_builder_custom_reset@@Base+0xbc>
  411b40:	mov    DWORD PTR [r12+0xe4],0x10
  411b4c:	xor    eax,eax
  411b4e:	mov    WORD PTR [r12+0xe8],ax
  411b57:	mov    rax,QWORD PTR [r12+0x68]
  411b5c:	mov    QWORD PTR [r12+0xf0],0x0
  411b68:	mov    QWORD PTR [r12+0x18],rax
  411b6d:	mov    rax,QWORD PTR [r12+0x88]
  411b75:	mov    QWORD PTR [r12+0x20],0x0
  411b7e:	mov    QWORD PTR [r12],rax
  411b82:	mov    rax,QWORD PTR [r12+0x58]
  411b87:	mov    QWORD PTR [r12+0xfc],0x0
  411b93:	mov    QWORD PTR [r12+0x104],0x0
  411b9f:	mov    QWORD PTR [r12+0x8],rax
  411ba4:	mov    QWORD PTR [r12+0x30],0x0
  411bad:	test   r14d,r14d
  411bb0:	jne    411bd0 <flatcc_builder_custom_reset@@Base+0x140>
  411bb2:	mov    eax,DWORD PTR [r12+0x128]
  411bba:	test   eax,eax
  411bbc:	jne    411bf4 <flatcc_builder_custom_reset@@Base+0x164>
  411bbe:	pop    rbx
  411bbf:	pop    rbp
  411bc0:	pop    r12
  411bc2:	pop    r13
  411bc4:	pop    r14
  411bc6:	ret    
  411bc7:	nop    WORD PTR [rax+rax*1+0x0]
  411bd0:	mov    eax,DWORD PTR [r12+0x128]
  411bd8:	mov    QWORD PTR [r12+0x118],0x0
  411be4:	mov    QWORD PTR [r12+0x120],0x0
  411bf0:	test   eax,eax
  411bf2:	je     411bbe <flatcc_builder_custom_reset@@Base+0x12e>
  411bf4:	lea    rdi,[r12+0x130]
  411bfc:	call   415310 <flatcc_emitter_reset@@Base>
  411c01:	pop    rbx
  411c02:	pop    rbp
  411c03:	pop    r12
  411c05:	pop    r13
  411c07:	xor    eax,eax
  411c09:	pop    r14
  411c0b:	ret    
  411c0c:	nop    DWORD PTR [rax+0x0]
  411c10:	pop    rbx
  411c11:	pop    rbp
  411c12:	pop    r12
  411c14:	pop    r13
  411c16:	mov    eax,0xffffffff
  411c1b:	pop    r14
  411c1d:	ret    
  411c1e:	xchg   ax,ax

0000000000411c20 <flatcc_builder_reset@@Base>:
  411c20:	endbr64 
  411c24:	xor    edx,edx
  411c26:	xor    esi,esi
  411c28:	jmp    411a90 <flatcc_builder_custom_reset@@Base>
  411c2d:	nop    DWORD PTR [rax]

0000000000411c30 <flatcc_builder_clear@@Base>:
  411c30:	endbr64 
  411c34:	push   r12
  411c36:	lea    r12,[rdi+0x58]
  411c3a:	push   rbp
  411c3b:	xor    ebp,ebp
  411c3d:	push   rbx
  411c3e:	mov    rbx,rdi
  411c41:	nop    DWORD PTR [rax+0x0]
  411c48:	mov    rdi,QWORD PTR [rbx+0x40]
  411c4c:	mov    r8d,ebp
  411c4f:	mov    rsi,r12
  411c52:	xor    ecx,ecx
  411c54:	xor    edx,edx
  411c56:	inc    ebp
  411c58:	call   QWORD PTR [rbx+0x50]
  411c5b:	add    r12,0x10
  411c5f:	cmp    ebp,0x8
  411c62:	jne    411c48 <flatcc_builder_clear@@Base+0x18>
  411c64:	mov    eax,DWORD PTR [rbx+0x128]
  411c6a:	test   eax,eax
  411c6c:	jne    411ca0 <flatcc_builder_clear@@Base+0x70>
  411c6e:	lea    rdi,[rbx+0x8]
  411c72:	and    rdi,0xfffffffffffffff8
  411c76:	mov    QWORD PTR [rbx],0x0
  411c7d:	mov    QWORD PTR [rbx+0x180],0x0
  411c88:	sub    rbx,rdi
  411c8b:	lea    ecx,[rbx+0x188]
  411c91:	shr    ecx,0x3
  411c94:	xor    eax,eax
  411c96:	rep stos QWORD PTR es:[rdi],rax
  411c99:	pop    rbx
  411c9a:	pop    rbp
  411c9b:	pop    r12
  411c9d:	ret    
  411c9e:	xchg   ax,ax
  411ca0:	lea    rdi,[rbx+0x130]
  411ca7:	call   415400 <flatcc_emitter_clear@@Base>
  411cac:	jmp    411c6e <flatcc_builder_clear@@Base+0x3e>
  411cae:	xchg   ax,ax

0000000000411cb0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  411cb0:	endbr64 
  411cb4:	push   r12
  411cb6:	push   rbp
  411cb7:	lea    rbp,[rsi+0x7]
  411cbb:	and    rbp,0xfffffffffffffff8
  411cbf:	push   rbx
  411cc0:	add    rbp,0x8
  411cc4:	mov    rbx,rdi
  411cc7:	mov    r12,QWORD PTR [rdi+0x180]
  411cce:	lea    rdx,[r12+rbp*1]
  411cd2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  411cd9:	jbe    411cf5 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  411cdb:	lea    rsi,[rdi+0xc8]
  411ce2:	mov    rdi,QWORD PTR [rdi+0x40]
  411ce6:	xor    ecx,ecx
  411ce8:	mov    r8d,0x7
  411cee:	call   QWORD PTR [rbx+0x50]
  411cf1:	test   eax,eax
  411cf3:	jne    411d47 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  411cf5:	add    r12,QWORD PTR [rbx+0xc8]
  411cfc:	je     411d40 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  411cfe:	mov    rdx,rbp
  411d01:	mov    rdi,r12
  411d04:	xor    esi,esi
  411d06:	call   4031f0 <memset@plt>
  411d0b:	mov    rdx,QWORD PTR [rbx+0x178]
  411d12:	lea    rax,[r12+0x8]
  411d17:	mov    QWORD PTR [r12],rdx
  411d1b:	mov    rdx,QWORD PTR [rbx+0x180]
  411d22:	add    rbp,rdx
  411d25:	lea    rcx,[rdx+0x8]
  411d29:	mov    QWORD PTR [rbx+0x180],rbp
  411d30:	mov    QWORD PTR [rbx+0x178],rcx
  411d37:	pop    rbx
  411d38:	pop    rbp
  411d39:	pop    r12
  411d3b:	ret    
  411d3c:	nop    DWORD PTR [rax+0x0]
  411d40:	pop    rbx
  411d41:	pop    rbp
  411d42:	xor    eax,eax
  411d44:	pop    r12
  411d46:	ret    
  411d47:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  411d4c:	nop    DWORD PTR [rax+0x0]

0000000000411d50 <flatcc_builder_enter_user_frame@@Base>:
  411d50:	endbr64 
  411d54:	push   r12
  411d56:	push   rbp
  411d57:	mov    rbp,rdi
  411d5a:	push   rbx
  411d5b:	lea    rbx,[rsi+0x7]
  411d5f:	and    rbx,0xfffffffffffffff8
  411d63:	mov    r12,QWORD PTR [rdi+0x180]
  411d6a:	add    rbx,0x8
  411d6e:	lea    rdx,[r12+rbx*1]
  411d72:	cmp    rdx,QWORD PTR [rdi+0xd0]
  411d79:	jbe    411d95 <flatcc_builder_enter_user_frame@@Base+0x45>
  411d7b:	lea    rsi,[rdi+0xc8]
  411d82:	mov    rdi,QWORD PTR [rdi+0x40]
  411d86:	xor    ecx,ecx
  411d88:	mov    r8d,0x7
  411d8e:	call   QWORD PTR [rbp+0x50]
  411d91:	test   eax,eax
  411d93:	jne    411dda <flatcc_builder_enter_user_frame@@Base+0x8a>
  411d95:	add    r12,QWORD PTR [rbp+0xc8]
  411d9c:	je     411dd2 <flatcc_builder_enter_user_frame@@Base+0x82>
  411d9e:	mov    rdx,rbx
  411da1:	mov    rdi,r12
  411da4:	xor    esi,esi
  411da6:	call   4031f0 <memset@plt>
  411dab:	mov    rax,QWORD PTR [rbp+0x178]
  411db2:	mov    QWORD PTR [r12],rax
  411db6:	mov    rax,QWORD PTR [rbp+0x180]
  411dbd:	lea    r12,[rax+0x8]
  411dc1:	add    rbx,rax
  411dc4:	mov    QWORD PTR [rbp+0x178],r12
  411dcb:	mov    QWORD PTR [rbp+0x180],rbx
  411dd2:	pop    rbx
  411dd3:	pop    rbp
  411dd4:	mov    rax,r12
  411dd7:	pop    r12
  411dd9:	ret    
  411dda:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  411ddf:	nop

0000000000411de0 <flatcc_builder_exit_user_frame@@Base>:
  411de0:	endbr64 
  411de4:	mov    rax,QWORD PTR [rdi+0x178]
  411deb:	test   rax,rax
  411dee:	je     411e10 <flatcc_builder_exit_user_frame@@Base+0x30>
  411df0:	mov    edx,eax
  411df2:	sub    rax,0x8
  411df6:	mov    QWORD PTR [rdi+0x180],rax
  411dfd:	add    rdx,QWORD PTR [rdi+0xc8]
  411e04:	mov    rax,QWORD PTR [rdx-0x8]
  411e08:	mov    QWORD PTR [rdi+0x178],rax
  411e0f:	ret    
  411e10:	push   rax
  411e11:	lea    rcx,[rip+0x9118]        # 41af30 <_IO_stdin_used@@Base+0xf30>
  411e18:	mov    edx,0x21e
  411e1d:	lea    rsi,[rip+0x8674]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411e24:	lea    rdi,[rip+0x8a26]        # 41a851 <_IO_stdin_used@@Base+0x851>
  411e2b:	call   4031e0 <__assert_fail@plt>

0000000000411e30 <flatcc_builder_exit_user_frame_at@@Base>:
  411e30:	endbr64 
  411e34:	cmp    QWORD PTR [rdi+0x178],rsi
  411e3b:	jb     411e49 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  411e3d:	mov    QWORD PTR [rdi+0x178],rsi
  411e44:	jmp    411de0 <flatcc_builder_exit_user_frame@@Base>
  411e49:	push   rax
  411e4a:	lea    rcx,[rip+0x90af]        # 41af00 <_IO_stdin_used@@Base+0xf00>
  411e51:	mov    edx,0x227
  411e56:	lea    rsi,[rip+0x863b]        # 41a498 <_IO_stdin_used@@Base+0x498>
  411e5d:	lea    rdi,[rip+0x8694]        # 41a4f8 <_IO_stdin_used@@Base+0x4f8>
  411e64:	call   4031e0 <__assert_fail@plt>
  411e69:	nop    DWORD PTR [rax+0x0]

0000000000411e70 <flatcc_builder_get_current_user_frame@@Base>:
  411e70:	endbr64 
  411e74:	mov    rax,QWORD PTR [rdi+0x178]
  411e7b:	ret    
  411e7c:	nop    DWORD PTR [rax+0x0]

0000000000411e80 <flatcc_builder_get_user_frame_ptr@@Base>:
  411e80:	endbr64 
  411e84:	mov    eax,esi
  411e86:	add    rax,QWORD PTR [rdi+0xc8]
  411e8d:	ret    
  411e8e:	xchg   ax,ax

0000000000411e90 <flatcc_builder_embed_buffer@@Base>:
  411e90:	endbr64 
  411e94:	push   r13
  411e96:	mov    r13d,r9d
  411e99:	push   r12
  411e9b:	mov    r12,rcx
  411e9e:	push   rbp
  411e9f:	mov    rbp,rdx
  411ea2:	movzx  edx,si
  411ea5:	push   rbx
  411ea6:	mov    rbx,rdi
  411ea9:	sub    rsp,0xc8
  411eb0:	mov    WORD PTR [rsp+0xc],r8w
  411eb6:	mov    r8d,DWORD PTR [rdi+0x100]
  411ebd:	mov    rax,QWORD PTR fs:0x28
  411ec6:	mov    QWORD PTR [rsp+0xb8],rax
  411ece:	xor    eax,eax
  411ed0:	test   r8d,r8d
  411ed3:	setne  cl
  411ed6:	lea    rax,[rsp+0xc]
  411edb:	movzx  ecx,cl
  411ede:	mov    rsi,rax
  411ee1:	call   4114c0 <flatcc_builder_default_alloc@@Base+0x190>
  411ee6:	test   eax,eax
  411ee8:	jne    412020 <flatcc_builder_embed_buffer@@Base+0x190>
  411eee:	mov    edx,DWORD PTR [rbx+0xf0]
  411ef4:	xor    esi,esi
  411ef6:	and    r13d,0x2
  411efa:	setne  sil
  411efe:	movzx  ecx,WORD PTR [rsp+0xc]
  411f03:	mov    eax,edx
  411f05:	shl    esi,0x2
  411f08:	sub    eax,r12d
  411f0b:	dec    ecx
  411f0d:	sub    eax,esi
  411f0f:	and    eax,ecx
  411f11:	lea    ecx,[rax+r12*1]
  411f15:	mov    DWORD PTR [rsp+0x1c],ecx
  411f19:	mov    ecx,DWORD PTR [rbx+0x100]
  411f1f:	mov    QWORD PTR [rsp+0x20],0x0
  411f28:	mov    DWORD PTR [rsp+0x28],0x0
  411f30:	xor    r8d,r8d
  411f33:	test   ecx,ecx
  411f35:	je     411f61 <flatcc_builder_embed_buffer@@Base+0xd1>
  411f37:	lea    rcx,[rsp+0x1c]
  411f3c:	mov    QWORD PTR [rsp+0x20],0x4
  411f45:	mov    QWORD PTR [rsp+0x30],rcx
  411f4a:	mov    QWORD PTR [rsp+0x38],0x4
  411f53:	mov    DWORD PTR [rsp+0x28],0x1
  411f5b:	mov    r8d,0x4
  411f61:	test   r12,r12
  411f64:	je     411f8a <flatcc_builder_embed_buffer@@Base+0xfa>
  411f66:	movsxd rsi,DWORD PTR [rsp+0x28]
  411f6b:	add    r8,r12
  411f6e:	mov    rcx,rsi
  411f71:	inc    ecx
  411f73:	shl    rsi,0x4
  411f77:	mov    QWORD PTR [rsp+0x20],r8
  411f7c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  411f81:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  411f86:	mov    DWORD PTR [rsp+0x28],ecx
  411f8a:	test   eax,eax
  411f8c:	jne    411ff0 <flatcc_builder_embed_buffer@@Base+0x160>
  411f8e:	mov    ebp,edx
  411f90:	sub    ebp,r8d
  411f93:	cmp    edx,ebp
  411f95:	jle    412024 <flatcc_builder_embed_buffer@@Base+0x194>
  411f9b:	movabs rax,0x10000000f
  411fa5:	cmp    r8,rax
  411fa8:	ja     412024 <flatcc_builder_embed_buffer@@Base+0x194>
  411faa:	mov    rdi,QWORD PTR [rbx+0x38]
  411fae:	mov    edx,DWORD PTR [rsp+0x28]
  411fb2:	lea    rsi,[rsp+0x30]
  411fb7:	mov    ecx,ebp
  411fb9:	call   QWORD PTR [rbx+0x48]
  411fbc:	test   eax,eax
  411fbe:	jne    412048 <flatcc_builder_embed_buffer@@Base+0x1b8>
  411fc4:	mov    DWORD PTR [rbx+0xf0],ebp
  411fca:	mov    rdi,QWORD PTR [rsp+0xb8]
  411fd2:	xor    rdi,QWORD PTR fs:0x28
  411fdb:	mov    eax,ebp
  411fdd:	jne    412043 <flatcc_builder_embed_buffer@@Base+0x1b3>
  411fdf:	add    rsp,0xc8
  411fe6:	pop    rbx
  411fe7:	pop    rbp
  411fe8:	pop    r12
  411fea:	pop    r13
  411fec:	ret    
  411fed:	nop    DWORD PTR [rax]
  411ff0:	movsxd rsi,DWORD PTR [rsp+0x28]
  411ff5:	mov    rdi,0x41af80
  411ffc:	mov    rcx,rsi
  411fff:	add    r8,rax
  412002:	shl    rsi,0x4
  412006:	inc    ecx
  412008:	mov    QWORD PTR [rsp+0x20],r8
  41200d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  412012:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  412017:	mov    DWORD PTR [rsp+0x28],ecx
  41201b:	jmp    411f8e <flatcc_builder_embed_buffer@@Base+0xfe>
  412020:	xor    ebp,ebp
  412022:	jmp    411fca <flatcc_builder_embed_buffer@@Base+0x13a>
  412024:	lea    rcx,[rip+0x8ea5]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  41202b:	mov    edx,0x287
  412030:	lea    rsi,[rip+0x8461]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412037:	lea    rdi,[rip+0x87f1]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  41203e:	call   4031e0 <__assert_fail@plt>
  412043:	call   4031c0 <__stack_chk_fail@plt>
  412048:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  41204d:	nop    DWORD PTR [rax]

0000000000412050 <flatcc_builder_create_buffer@@Base>:
  412050:	endbr64 
  412054:	push   r14
  412056:	movzx  edx,dx
  412059:	mov    r14,rsi
  41205c:	push   r13
  41205e:	mov    r13d,r9d
  412061:	push   r12
  412063:	mov    r12d,r9d
  412066:	and    r12d,0x1
  41206a:	push   rbp
  41206b:	mov    rbp,rdi
  41206e:	push   rbx
  41206f:	mov    ebx,ecx
  412071:	mov    ecx,r12d
  412074:	sub    rsp,0xc0
  41207b:	mov    WORD PTR [rsp+0xc],r8w
  412081:	lea    rsi,[rsp+0xc]
  412086:	mov    rax,QWORD PTR fs:0x28
  41208f:	mov    QWORD PTR [rsp+0xb8],rax
  412097:	xor    eax,eax
  412099:	mov    DWORD PTR [rsp+0x1c],0x0
  4120a1:	call   4114c0 <flatcc_builder_default_alloc@@Base+0x190>
  4120a6:	test   eax,eax
  4120a8:	jne    412248 <flatcc_builder_create_buffer@@Base+0x1f8>
  4120ae:	movzx  esi,WORD PTR [rsp+0xc]
  4120b3:	cmp    si,WORD PTR [rbp+0xe8]
  4120ba:	jbe    4120c3 <flatcc_builder_create_buffer@@Base+0x73>
  4120bc:	mov    WORD PTR [rbp+0xe8],si
  4120c3:	mov    edx,DWORD PTR [rsp+0x1c]
  4120c7:	test   r14,r14
  4120ca:	je     4120d3 <flatcc_builder_create_buffer@@Base+0x83>
  4120cc:	mov    edx,DWORD PTR [r14]
  4120cf:	mov    DWORD PTR [rsp+0x1c],edx
  4120d3:	test   edx,edx
  4120d5:	mov    eax,0x4
  4120da:	mov    ecx,DWORD PTR [rbp+0xf0]
  4120e0:	cmovne rdx,rax
  4120e4:	xor    edi,edi
  4120e6:	test   r13b,0x2
  4120ea:	setne  dil
  4120ee:	lea    eax,[rcx-0x4]
  4120f1:	shl    edi,0x2
  4120f4:	sub    eax,edx
  4120f6:	sub    eax,edi
  4120f8:	dec    esi
  4120fa:	and    eax,esi
  4120fc:	and    r13d,0x3
  412100:	jne    412218 <flatcc_builder_create_buffer@@Base+0x1c8>
  412106:	xor    r9d,r9d
  412109:	mov    esi,0x1
  41210e:	mov    r8d,0x4
  412114:	movsxd rdi,r9d
  412117:	shl    rdi,0x4
  41211b:	lea    r10,[rsp+0x14]
  412120:	mov    QWORD PTR [rsp+0x20],r8
  412125:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  41212a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  412133:	mov    DWORD PTR [rsp+0x28],esi
  412137:	test   edx,edx
  412139:	je     41215f <flatcc_builder_create_buffer@@Base+0x10f>
  41213b:	shl    rsi,0x4
  41213f:	add    r8,rdx
  412142:	lea    rdi,[rsp+0x1c]
  412147:	add    r9d,0x2
  41214b:	mov    QWORD PTR [rsp+0x20],r8
  412150:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  412155:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  41215a:	mov    DWORD PTR [rsp+0x28],r9d
  41215f:	test   eax,eax
  412161:	je     41218e <flatcc_builder_create_buffer@@Base+0x13e>
  412163:	movsxd rsi,DWORD PTR [rsp+0x28]
  412168:	mov    rdi,0x41af80
  41216f:	mov    rdx,rsi
  412172:	add    r8,rax
  412175:	shl    rsi,0x4
  412179:	inc    edx
  41217b:	mov    QWORD PTR [rsp+0x20],r8
  412180:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  412185:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  41218a:	mov    DWORD PTR [rsp+0x28],edx
  41218e:	mov    eax,ecx
  412190:	sub    eax,r8d
  412193:	lea    edx,[rax+0x4]
  412196:	test   r13d,r13d
  412199:	cmovne eax,edx
  41219c:	test   r12d,r12d
  41219f:	je     412250 <flatcc_builder_create_buffer@@Base+0x200>
  4121a5:	mov    edx,DWORD PTR [rbp+0xf8]
  4121ab:	sub    edx,eax
  4121ad:	sub    ebx,eax
  4121af:	mov    DWORD PTR [rsp+0x14],ebx
  4121b3:	mov    ebx,ecx
  4121b5:	sub    ebx,r8d
  4121b8:	mov    DWORD PTR [rsp+0x18],edx
  4121bc:	cmp    ecx,ebx
  4121be:	jle    41225d <flatcc_builder_create_buffer@@Base+0x20d>
  4121c4:	mov    rdi,QWORD PTR [rbp+0x38]
  4121c8:	mov    edx,DWORD PTR [rsp+0x28]
  4121cc:	lea    rsi,[rsp+0x30]
  4121d1:	mov    ecx,ebx
  4121d3:	call   QWORD PTR [rbp+0x48]
  4121d6:	test   eax,eax
  4121d8:	jne    412281 <flatcc_builder_create_buffer@@Base+0x231>
  4121de:	mov    DWORD PTR [rbp+0xf0],ebx
  4121e4:	test   ebx,ebx
  4121e6:	je     412286 <flatcc_builder_create_buffer@@Base+0x236>
  4121ec:	mov    rcx,QWORD PTR [rsp+0xb8]
  4121f4:	xor    rcx,QWORD PTR fs:0x28
  4121fd:	mov    eax,ebx
  4121ff:	jne    41227c <flatcc_builder_create_buffer@@Base+0x22c>
  412201:	add    rsp,0xc0
  412208:	pop    rbx
  412209:	pop    rbp
  41220a:	pop    r12
  41220c:	pop    r13
  41220e:	pop    r14
  412210:	ret    
  412211:	nop    DWORD PTR [rax+0x0]
  412218:	lea    rsi,[rsp+0x18]
  41221d:	mov    QWORD PTR [rsp+0x30],rsi
  412222:	mov    QWORD PTR [rsp+0x38],0x4
  41222b:	mov    esi,0x2
  412230:	mov    r9d,0x1
  412236:	mov    r8d,0x8
  41223c:	jmp    412114 <flatcc_builder_create_buffer@@Base+0xc4>
  412241:	nop    DWORD PTR [rax+0x0]
  412248:	xor    ebx,ebx
  41224a:	jmp    4121ec <flatcc_builder_create_buffer@@Base+0x19c>
  41224c:	nop    DWORD PTR [rax+0x0]
  412250:	mov    edx,DWORD PTR [rbp+0xf4]
  412256:	sub    edx,eax
  412258:	jmp    4121ad <flatcc_builder_create_buffer@@Base+0x15d>
  41225d:	lea    rcx,[rip+0x8c6c]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  412264:	mov    edx,0x287
  412269:	lea    rsi,[rip+0x8228]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412270:	lea    rdi,[rip+0x85b8]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  412277:	call   4031e0 <__assert_fail@plt>
  41227c:	call   4031c0 <__stack_chk_fail@plt>
  412281:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  412286:	lea    rcx,[rip+0x8c23]        # 41aeb0 <_IO_stdin_used@@Base+0xeb0>
  41228d:	mov    edx,0x304
  412292:	lea    rsi,[rip+0x81ff]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412299:	lea    rdi,[rip+0x858f]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4122a0:	call   4031e0 <__assert_fail@plt>
  4122a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004122b0 <flatcc_builder_create_struct@@Base>:
  4122b0:	endbr64 
  4122b4:	push   rbp
  4122b5:	push   rbx
  4122b6:	sub    rsp,0xa8
  4122bd:	mov    rax,QWORD PTR fs:0x28
  4122c6:	mov    QWORD PTR [rsp+0x98],rax
  4122ce:	xor    eax,eax
  4122d0:	test   cx,cx
  4122d3:	je     4123f3 <flatcc_builder_create_struct@@Base+0x143>
  4122d9:	mov    r8,rdx
  4122dc:	mov    rbx,rdi
  4122df:	movzx  edx,cx
  4122e2:	cmp    cx,WORD PTR [rdi+0xe8]
  4122e9:	jbe    4122f2 <flatcc_builder_create_struct@@Base+0x42>
  4122eb:	mov    WORD PTR [rdi+0xe8],cx
  4122f2:	mov    ecx,DWORD PTR [rbx+0xf0]
  4122f8:	dec    edx
  4122fa:	mov    eax,ecx
  4122fc:	sub    eax,r8d
  4122ff:	and    eax,edx
  412301:	mov    edx,eax
  412303:	mov    QWORD PTR [rsp],0x0
  41230b:	mov    DWORD PTR [rsp+0x8],0x0
  412313:	test   r8,r8
  412316:	jne    4123a8 <flatcc_builder_create_struct@@Base+0xf8>
  41231c:	test   eax,eax
  41231e:	je     4123d4 <flatcc_builder_create_struct@@Base+0x124>
  412324:	mov    r8,rdx
  412327:	mov    esi,0x1
  41232c:	xor    eax,eax
  41232e:	mov    rdi,0x41af80
  412335:	shl    rax,0x4
  412339:	mov    QWORD PTR [rsp],r8
  41233d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  412342:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  412347:	mov    DWORD PTR [rsp+0x8],esi
  41234b:	mov    ebp,ecx
  41234d:	movabs rax,0x10000000f
  412357:	sub    ebp,r8d
  41235a:	cmp    r8,rax
  41235d:	ja     4123d4 <flatcc_builder_create_struct@@Base+0x124>
  41235f:	cmp    ecx,ebp
  412361:	jle    4123d4 <flatcc_builder_create_struct@@Base+0x124>
  412363:	mov    rdi,QWORD PTR [rbx+0x38]
  412367:	mov    edx,DWORD PTR [rsp+0x8]
  41236b:	lea    rsi,[rsp+0x10]
  412370:	mov    ecx,ebp
  412372:	call   QWORD PTR [rbx+0x48]
  412375:	test   eax,eax
  412377:	jne    412412 <flatcc_builder_create_struct@@Base+0x162>
  41237d:	mov    DWORD PTR [rbx+0xf0],ebp
  412383:	mov    eax,ebp
  412385:	mov    rdi,QWORD PTR [rsp+0x98]
  41238d:	xor    rdi,QWORD PTR fs:0x28
  412396:	jne    412417 <flatcc_builder_create_struct@@Base+0x167>
  412398:	add    rsp,0xa8
  41239f:	pop    rbx
  4123a0:	pop    rbp
  4123a1:	ret    
  4123a2:	nop    WORD PTR [rax+rax*1+0x0]
  4123a8:	mov    QWORD PTR [rsp],r8
  4123ac:	mov    QWORD PTR [rsp+0x10],rsi
  4123b1:	mov    QWORD PTR [rsp+0x18],r8
  4123b6:	mov    DWORD PTR [rsp+0x8],0x1
  4123be:	test   eax,eax
  4123c0:	je     41234b <flatcc_builder_create_struct@@Base+0x9b>
  4123c2:	add    r8,rdx
  4123c5:	mov    esi,0x2
  4123ca:	mov    eax,0x1
  4123cf:	jmp    41232e <flatcc_builder_create_struct@@Base+0x7e>
  4123d4:	lea    rcx,[rip+0x8af5]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  4123db:	mov    edx,0x287
  4123e0:	lea    rsi,[rip+0x80b1]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4123e7:	lea    rdi,[rip+0x8441]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4123ee:	call   4031e0 <__assert_fail@plt>
  4123f3:	lea    rcx,[rip+0x8a96]        # 41ae90 <_IO_stdin_used@@Base+0xe90>
  4123fa:	mov    edx,0x30f
  4123ff:	lea    rsi,[rip+0x8092]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412406:	lea    rdi,[rip+0x845d]        # 41a86a <_IO_stdin_used@@Base+0x86a>
  41240d:	call   4031e0 <__assert_fail@plt>
  412412:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  412417:	call   4031c0 <__stack_chk_fail@plt>
  41241c:	nop    DWORD PTR [rax+0x0]

0000000000412420 <flatcc_builder_start_buffer@@Base>:
  412420:	endbr64 
  412424:	push   r13
  412426:	mov    r13d,edx
  412429:	push   r12
  41242b:	mov    r12d,ecx
  41242e:	push   rbp
  41242f:	mov    rbp,rsi
  412432:	push   rbx
  412433:	mov    rbx,rdi
  412436:	sub    rsp,0x8
  41243a:	movzx  esi,WORD PTR [rdi+0xe8]
  412441:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  412446:	test   eax,eax
  412448:	jne    4124f8 <flatcc_builder_start_buffer@@Base+0xd8>
  41244e:	movzx  edx,WORD PTR [rbx+0xec]
  412455:	mov    rsi,QWORD PTR [rbx+0x30]
  412459:	mov    ecx,0x1
  41245e:	mov    WORD PTR [rbx+0xe8],cx
  412465:	mov    WORD PTR [rsi+0x22],dx
  412469:	movzx  edx,WORD PTR [rbx+0x10c]
  412470:	mov    WORD PTR [rbx+0xec],r13w
  412478:	mov    WORD PTR [rsi+0x20],dx
  41247c:	mov    edx,DWORD PTR [rbx+0xf8]
  412482:	mov    WORD PTR [rbx+0x10c],r12w
  41248a:	mov    DWORD PTR [rsi+0x14],edx
  41248d:	mov    edx,DWORD PTR [rbx+0x100]
  412493:	mov    DWORD PTR [rsi+0x1c],edx
  412496:	mov    edx,DWORD PTR [rbx+0xf0]
  41249c:	mov    DWORD PTR [rbx+0xf8],edx
  4124a2:	mov    edx,DWORD PTR [rbx+0xfc]
  4124a8:	lea    ecx,[rdx+0x1]
  4124ab:	mov    DWORD PTR [rbx+0x100],edx
  4124b1:	mov    edx,DWORD PTR [rbx+0x110]
  4124b7:	mov    DWORD PTR [rbx+0xfc],ecx
  4124bd:	mov    DWORD PTR [rsi+0x10],edx
  4124c0:	test   rbp,rbp
  4124c3:	je     4124e8 <flatcc_builder_start_buffer@@Base+0xc8>
  4124c5:	mov    edx,DWORD PTR [rbp+0x0]
  4124c8:	mov    DWORD PTR [rbx+0x110],edx
  4124ce:	mov    edx,0x1
  4124d3:	mov    WORD PTR [rsi+0xe],dx
  4124d7:	add    rsp,0x8
  4124db:	pop    rbx
  4124dc:	pop    rbp
  4124dd:	pop    r12
  4124df:	pop    r13
  4124e1:	ret    
  4124e2:	nop    WORD PTR [rax+rax*1+0x0]
  4124e8:	mov    rbp,0x41af80
  4124ef:	jmp    4124c5 <flatcc_builder_start_buffer@@Base+0xa5>
  4124f1:	nop    DWORD PTR [rax+0x0]
  4124f8:	mov    eax,0xffffffff
  4124fd:	jmp    4124d7 <flatcc_builder_start_buffer@@Base+0xb7>
  4124ff:	nop

0000000000412500 <flatcc_builder_end_buffer@@Base>:
  412500:	endbr64 
  412504:	push   rbp
  412505:	xor    eax,eax
  412507:	push   rbx
  412508:	sub    rsp,0x8
  41250c:	movzx  r9d,WORD PTR [rdi+0x10c]
  412514:	mov    edx,DWORD PTR [rdi+0x100]
  41251a:	and    r9d,0x2
  41251e:	test   edx,edx
  412520:	setne  al
  412523:	movzx  r9d,r9w
  412527:	or     r9d,eax
  41252a:	mov    rax,QWORD PTR [rdi+0x30]
  41252e:	cmp    WORD PTR [rax+0xe],0x1
  412533:	jne    412624 <flatcc_builder_end_buffer@@Base+0x124>
  412539:	movzx  edx,WORD PTR [rdi+0xec]
  412540:	movzx  eax,WORD PTR [rdi+0xe8]
  412547:	mov    rbx,rdi
  41254a:	mov    ecx,esi
  41254c:	mov    r8d,edx
  41254f:	cmp    dx,ax
  412552:	ja     412618 <flatcc_builder_end_buffer@@Base+0x118>
  412558:	movzx  r8d,ax
  41255c:	lea    rsi,[rbx+0x110]
  412563:	mov    rdi,rbx
  412566:	call   412050 <flatcc_builder_create_buffer@@Base>
  41256b:	mov    ebp,eax
  41256d:	test   eax,eax
  41256f:	je     41260c <flatcc_builder_end_buffer@@Base+0x10c>
  412575:	mov    rax,QWORD PTR [rbx+0x30]
  412579:	mov    rdi,QWORD PTR [rbx+0x18]
  41257d:	mov    edx,DWORD PTR [rax+0x14]
  412580:	xor    esi,esi
  412582:	mov    DWORD PTR [rbx+0xf8],edx
  412588:	mov    edx,DWORD PTR [rax+0x1c]
  41258b:	mov    DWORD PTR [rbx+0x100],edx
  412591:	mov    edx,DWORD PTR [rax+0x10]
  412594:	movzx  eax,WORD PTR [rax+0x20]
  412598:	mov    DWORD PTR [rbx+0x110],edx
  41259e:	mov    WORD PTR [rbx+0x10c],ax
  4125a5:	mov    edx,DWORD PTR [rbx+0x20]
  4125a8:	call   4031f0 <memset@plt>
  4125ad:	mov    rax,QWORD PTR [rbx+0x30]
  4125b1:	mov    edi,DWORD PTR [rbx+0x70]
  4125b4:	mov    edx,DWORD PTR [rax+0x8]
  4125b7:	mov    esi,DWORD PTR [rax]
  4125b9:	mov    ecx,DWORD PTR [rax+0x4]
  4125bc:	mov    DWORD PTR [rbx+0x20],edx
  4125bf:	mov    rdx,rsi
  4125c2:	sub    edi,edx
  4125c4:	mov    DWORD PTR [rbx+0x28],esi
  4125c7:	mov    edx,edi
  4125c9:	add    rsi,QWORD PTR [rbx+0x68]
  4125cd:	cmp    ecx,edi
  4125cf:	cmovb  edx,ecx
  4125d2:	mov    QWORD PTR [rbx+0x18],rsi
  4125d6:	mov    DWORD PTR [rbx+0x24],edx
  4125d9:	movzx  edx,WORD PTR [rbx+0xea]
  4125e0:	mov    DWORD PTR [rax+0x4],ecx
  4125e3:	cmp    dx,WORD PTR [rbx+0xe8]
  4125ea:	jbe    4125f3 <flatcc_builder_end_buffer@@Base+0xf3>
  4125ec:	mov    WORD PTR [rbx+0xe8],dx
  4125f3:	movzx  edx,WORD PTR [rax+0xc]
  4125f7:	sub    rax,0x24
  4125fb:	dec    DWORD PTR [rbx+0x104]
  412601:	mov    WORD PTR [rbx+0xea],dx
  412608:	mov    QWORD PTR [rbx+0x30],rax
  41260c:	add    rsp,0x8
  412610:	pop    rbx
  412611:	mov    eax,ebp
  412613:	pop    rbp
  412614:	ret    
  412615:	nop    DWORD PTR [rax]
  412618:	mov    WORD PTR [rbx+0xe8],dx
  41261f:	jmp    41255c <flatcc_builder_end_buffer@@Base+0x5c>
  412624:	lea    rcx,[rip+0x8845]        # 41ae70 <_IO_stdin_used@@Base+0xe70>
  41262b:	mov    edx,0x346
  412630:	lea    rsi,[rip+0x7e61]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412637:	lea    rdi,[rip+0x7eda]        # 41a518 <_IO_stdin_used@@Base+0x518>
  41263e:	call   4031e0 <__assert_fail@plt>
  412643:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41264e:	xchg   ax,ax

0000000000412650 <flatcc_builder_start_struct@@Base>:
  412650:	endbr64 
  412654:	push   r12
  412656:	push   rbp
  412657:	mov    rbp,rsi
  41265a:	movzx  esi,dx
  41265d:	push   rbx
  41265e:	mov    rbx,rdi
  412661:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  412666:	test   eax,eax
  412668:	jne    4126f0 <flatcc_builder_start_struct@@Base+0xa0>
  41266e:	mov    rcx,QWORD PTR [rbx+0x30]
  412672:	mov    eax,0x2
  412677:	mov    WORD PTR [rcx+0xe],ax
  41267b:	mov    eax,DWORD PTR [rbx+0x28]
  41267e:	mov    edi,DWORD PTR [rbx+0x70]
  412681:	mov    rdx,rax
  412684:	sub    edi,edx
  412686:	add    rax,QWORD PTR [rbx+0x68]
  41268a:	mov    QWORD PTR [rbx+0x18],rax
  41268e:	mov    edx,edi
  412690:	cmp    edi,0xfffffffc
  412693:	ja     4126c0 <flatcc_builder_start_struct@@Base+0x70>
  412695:	mov    DWORD PTR [rbx+0x24],edi
  412698:	mov    r12d,DWORD PTR [rbx+0x20]
  41269c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4126a3:	mov    rsi,r12
  4126a6:	add    esi,ebp
  4126a8:	mov    DWORD PTR [rbx+0x20],esi
  4126ab:	cmp    esi,edx
  4126ad:	jae    4126d0 <flatcc_builder_start_struct@@Base+0x80>
  4126af:	pop    rbx
  4126b0:	pop    rbp
  4126b1:	add    rax,r12
  4126b4:	pop    r12
  4126b6:	ret    
  4126b7:	nop    WORD PTR [rax+rax*1+0x0]
  4126c0:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  4126c7:	mov    edx,0xfffffffc
  4126cc:	jmp    412698 <flatcc_builder_start_struct@@Base+0x48>
  4126ce:	xchg   ax,ax
  4126d0:	inc    esi
  4126d2:	mov    edx,0xfffffffc
  4126d7:	mov    rdi,rbx
  4126da:	call   4112d0 <test_parse@@Base+0x5e0>
  4126df:	test   eax,eax
  4126e1:	jne    4126f0 <flatcc_builder_start_struct@@Base+0xa0>
  4126e3:	mov    rax,QWORD PTR [rbx+0x18]
  4126e7:	jmp    4126af <flatcc_builder_start_struct@@Base+0x5f>
  4126e9:	nop    DWORD PTR [rax+0x0]
  4126f0:	pop    rbx
  4126f1:	pop    rbp
  4126f2:	xor    eax,eax
  4126f4:	pop    r12
  4126f6:	ret    
  4126f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412700 <flatcc_builder_struct_edit@@Base>:
  412700:	endbr64 
  412704:	mov    rax,QWORD PTR [rdi+0x18]
  412708:	ret    
  412709:	nop    DWORD PTR [rax+0x0]

0000000000412710 <flatcc_builder_end_struct@@Base>:
  412710:	endbr64 
  412714:	push   rbp
  412715:	push   rbx
  412716:	sub    rsp,0x8
  41271a:	mov    rax,QWORD PTR [rdi+0x30]
  41271e:	cmp    WORD PTR [rax+0xe],0x2
  412723:	jne    4127c6 <flatcc_builder_end_struct@@Base+0xb6>
  412729:	movzx  ecx,WORD PTR [rdi+0xea]
  412730:	mov    edx,DWORD PTR [rdi+0x20]
  412733:	mov    rsi,QWORD PTR [rdi+0x18]
  412737:	mov    rbx,rdi
  41273a:	call   4122b0 <flatcc_builder_create_struct@@Base>
  41273f:	mov    ebp,eax
  412741:	test   eax,eax
  412743:	jne    412750 <flatcc_builder_end_struct@@Base+0x40>
  412745:	add    rsp,0x8
  412749:	pop    rbx
  41274a:	mov    eax,ebp
  41274c:	pop    rbp
  41274d:	ret    
  41274e:	xchg   ax,ax
  412750:	mov    edx,DWORD PTR [rbx+0x20]
  412753:	mov    rdi,QWORD PTR [rbx+0x18]
  412757:	xor    esi,esi
  412759:	call   4031f0 <memset@plt>
  41275e:	mov    rax,QWORD PTR [rbx+0x30]
  412762:	mov    edi,DWORD PTR [rbx+0x70]
  412765:	mov    edx,DWORD PTR [rax+0x8]
  412768:	mov    esi,DWORD PTR [rax]
  41276a:	mov    ecx,DWORD PTR [rax+0x4]
  41276d:	mov    DWORD PTR [rbx+0x20],edx
  412770:	mov    rdx,rsi
  412773:	sub    edi,edx
  412775:	mov    DWORD PTR [rbx+0x28],esi
  412778:	mov    edx,edi
  41277a:	add    rsi,QWORD PTR [rbx+0x68]
  41277e:	cmp    ecx,edi
  412780:	cmovb  edx,ecx
  412783:	mov    QWORD PTR [rbx+0x18],rsi
  412787:	mov    DWORD PTR [rbx+0x24],edx
  41278a:	movzx  edx,WORD PTR [rbx+0xea]
  412791:	mov    DWORD PTR [rax+0x4],ecx
  412794:	cmp    dx,WORD PTR [rbx+0xe8]
  41279b:	jbe    4127a4 <flatcc_builder_end_struct@@Base+0x94>
  41279d:	mov    WORD PTR [rbx+0xe8],dx
  4127a4:	movzx  edx,WORD PTR [rax+0xc]
  4127a8:	dec    DWORD PTR [rbx+0x104]
  4127ae:	sub    rax,0x24
  4127b2:	mov    QWORD PTR [rbx+0x30],rax
  4127b6:	mov    WORD PTR [rbx+0xea],dx
  4127bd:	add    rsp,0x8
  4127c1:	mov    eax,ebp
  4127c3:	pop    rbx
  4127c4:	pop    rbp
  4127c5:	ret    
  4127c6:	lea    rcx,[rip+0x8683]        # 41ae50 <_IO_stdin_used@@Base+0xe50>
  4127cd:	mov    edx,0x368
  4127d2:	lea    rsi,[rip+0x7cbf]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4127d9:	lea    rdi,[rip+0x7d68]        # 41a548 <_IO_stdin_used@@Base+0x548>
  4127e0:	call   4031e0 <__assert_fail@plt>
  4127e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004127f0 <flatcc_builder_extend_vector@@Base>:
  4127f0:	endbr64 
  4127f4:	push   rbp
  4127f5:	mov    eax,esi
  4127f7:	push   rbx
  4127f8:	sub    rsp,0x8
  4127fc:	mov    rdx,QWORD PTR [rdi+0x30]
  412800:	add    eax,DWORD PTR [rdx+0x14]
  412803:	setb   cl
  412806:	cmp    DWORD PTR [rdx+0x18],eax
  412809:	jb     412854 <flatcc_builder_extend_vector@@Base+0x64>
  41280b:	movzx  ecx,cl
  41280e:	test   ecx,ecx
  412810:	jne    412854 <flatcc_builder_extend_vector@@Base+0x64>
  412812:	imul   esi,DWORD PTR [rdx+0x10]
  412816:	mov    ebp,DWORD PTR [rdi+0x20]
  412819:	mov    DWORD PTR [rdx+0x14],eax
  41281c:	add    esi,ebp
  41281e:	mov    rbx,rdi
  412821:	mov    DWORD PTR [rdi+0x20],esi
  412824:	cmp    esi,DWORD PTR [rdi+0x24]
  412827:	jae    412840 <flatcc_builder_extend_vector@@Base+0x50>
  412829:	mov    rax,QWORD PTR [rbx+0x18]
  41282d:	add    rax,rbp
  412830:	add    rsp,0x8
  412834:	pop    rbx
  412835:	pop    rbp
  412836:	ret    
  412837:	nop    WORD PTR [rax+rax*1+0x0]
  412840:	inc    esi
  412842:	mov    edx,0xfffffffc
  412847:	call   4112d0 <test_parse@@Base+0x5e0>
  41284c:	test   eax,eax
  41284e:	je     412829 <flatcc_builder_extend_vector@@Base+0x39>
  412850:	xor    eax,eax
  412852:	jmp    412830 <flatcc_builder_extend_vector@@Base+0x40>
  412854:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  412859:	nop    DWORD PTR [rax+0x0]

0000000000412860 <flatcc_builder_vector_push@@Base>:
  412860:	endbr64 
  412864:	push   r13
  412866:	push   r12
  412868:	push   rbp
  412869:	push   rbx
  41286a:	sub    rsp,0x8
  41286e:	mov    rax,QWORD PTR [rdi+0x30]
  412872:	cmp    WORD PTR [rax+0xe],0x4
  412877:	jne    4128dd <flatcc_builder_vector_push@@Base+0x7d>
  412879:	mov    edx,DWORD PTR [rax+0x14]
  41287c:	cmp    edx,DWORD PTR [rax+0x18]
  41287f:	ja     4128fc <flatcc_builder_vector_push@@Base+0x9c>
  412881:	mov    ebp,DWORD PTR [rdi+0x20]
  412884:	mov    r12d,DWORD PTR [rax+0x10]
  412888:	mov    rcx,rbp
  41288b:	inc    edx
  41288d:	add    ecx,r12d
  412890:	mov    DWORD PTR [rax+0x14],edx
  412893:	mov    rbx,rdi
  412896:	mov    r13,rsi
  412899:	mov    DWORD PTR [rdi+0x20],ecx
  41289c:	cmp    ecx,DWORD PTR [rdi+0x24]
  41289f:	jae    4128c8 <flatcc_builder_vector_push@@Base+0x68>
  4128a1:	add    rbp,QWORD PTR [rbx+0x18]
  4128a5:	je     4128b5 <flatcc_builder_vector_push@@Base+0x55>
  4128a7:	mov    edx,r12d
  4128aa:	mov    rsi,r13
  4128ad:	mov    rdi,rbp
  4128b0:	call   403230 <memcpy@plt>
  4128b5:	add    rsp,0x8
  4128b9:	pop    rbx
  4128ba:	mov    rax,rbp
  4128bd:	pop    rbp
  4128be:	pop    r12
  4128c0:	pop    r13
  4128c2:	ret    
  4128c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4128c8:	lea    esi,[rcx+0x1]
  4128cb:	mov    edx,0xfffffffc
  4128d0:	call   4112d0 <test_parse@@Base+0x5e0>
  4128d5:	test   eax,eax
  4128d7:	je     4128a1 <flatcc_builder_vector_push@@Base+0x41>
  4128d9:	xor    ebp,ebp
  4128db:	jmp    4128b5 <flatcc_builder_vector_push@@Base+0x55>
  4128dd:	lea    rcx,[rip+0x852c]        # 41ae10 <_IO_stdin_used@@Base+0xe10>
  4128e4:	mov    edx,0x38b
  4128e9:	lea    rsi,[rip+0x7ba8]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4128f0:	lea    rdi,[rip+0x7c81]        # 41a578 <_IO_stdin_used@@Base+0x578>
  4128f7:	call   4031e0 <__assert_fail@plt>
  4128fc:	lea    rcx,[rip+0x850d]        # 41ae10 <_IO_stdin_used@@Base+0xe10>
  412903:	mov    edx,0x38c
  412908:	lea    rsi,[rip+0x7b89]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41290f:	lea    rdi,[rip+0x7c92]        # 41a5a8 <_IO_stdin_used@@Base+0x5a8>
  412916:	call   4031e0 <__assert_fail@plt>
  41291b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000412920 <flatcc_builder_append_vector@@Base>:
  412920:	endbr64 
  412924:	push   r13
  412926:	push   r12
  412928:	push   rbp
  412929:	push   rbx
  41292a:	sub    rsp,0x8
  41292e:	mov    rax,QWORD PTR [rdi+0x30]
  412932:	cmp    WORD PTR [rax+0xe],0x4
  412937:	jne    4129a6 <flatcc_builder_append_vector@@Base+0x86>
  412939:	mov    ecx,edx
  41293b:	mov    r13,rsi
  41293e:	xor    esi,esi
  412940:	add    ecx,DWORD PTR [rax+0x14]
  412943:	setb   sil
  412947:	cmp    DWORD PTR [rax+0x18],ecx
  41294a:	jb     4129c5 <flatcc_builder_append_vector@@Base+0xa5>
  41294c:	test   esi,esi
  41294e:	jne    4129c5 <flatcc_builder_append_vector@@Base+0xa5>
  412950:	mov    ebx,DWORD PTR [rax+0x10]
  412953:	mov    r12d,DWORD PTR [rdi+0x20]
  412957:	imul   ebx,edx
  41295a:	mov    rdx,r12
  41295d:	mov    DWORD PTR [rax+0x14],ecx
  412960:	add    edx,ebx
  412962:	mov    rbp,rdi
  412965:	mov    DWORD PTR [rdi+0x20],edx
  412968:	cmp    edx,DWORD PTR [rdi+0x24]
  41296b:	jae    412990 <flatcc_builder_append_vector@@Base+0x70>
  41296d:	add    r12,QWORD PTR [rbp+0x18]
  412971:	je     412980 <flatcc_builder_append_vector@@Base+0x60>
  412973:	mov    edx,ebx
  412975:	mov    rsi,r13
  412978:	mov    rdi,r12
  41297b:	call   403230 <memcpy@plt>
  412980:	add    rsp,0x8
  412984:	pop    rbx
  412985:	pop    rbp
  412986:	mov    rax,r12
  412989:	pop    r12
  41298b:	pop    r13
  41298d:	ret    
  41298e:	xchg   ax,ax
  412990:	lea    esi,[rdx+0x1]
  412993:	mov    edx,0xfffffffc
  412998:	call   4112d0 <test_parse@@Base+0x5e0>
  41299d:	test   eax,eax
  41299f:	je     41296d <flatcc_builder_append_vector@@Base+0x4d>
  4129a1:	xor    r12d,r12d
  4129a4:	jmp    412980 <flatcc_builder_append_vector@@Base+0x60>
  4129a6:	lea    rcx,[rip+0x8443]        # 41adf0 <_IO_stdin_used@@Base+0xdf0>
  4129ad:	mov    edx,0x393
  4129b2:	lea    rsi,[rip+0x7adf]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4129b9:	lea    rdi,[rip+0x7bb8]        # 41a578 <_IO_stdin_used@@Base+0x578>
  4129c0:	call   4031e0 <__assert_fail@plt>
  4129c5:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  4129ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004129d0 <flatcc_builder_extend_offset_vector@@Base>:
  4129d0:	endbr64 
  4129d4:	push   rbp
  4129d5:	mov    edx,esi
  4129d7:	push   rbx
  4129d8:	sub    rsp,0x8
  4129dc:	mov    rax,QWORD PTR [rdi+0x30]
  4129e0:	add    edx,DWORD PTR [rax+0x14]
  4129e3:	jb     412a25 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4129e5:	cmp    edx,0x3fffffff
  4129eb:	ja     412a25 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4129ed:	mov    ebp,DWORD PTR [rdi+0x20]
  4129f0:	mov    DWORD PTR [rax+0x14],edx
  4129f3:	lea    eax,[rbp+rsi*4+0x0]
  4129f7:	mov    rbx,rdi
  4129fa:	mov    DWORD PTR [rdi+0x20],eax
  4129fd:	cmp    eax,DWORD PTR [rdi+0x24]
  412a00:	jae    412a10 <flatcc_builder_extend_offset_vector@@Base+0x40>
  412a02:	mov    rax,QWORD PTR [rbx+0x18]
  412a06:	add    rax,rbp
  412a09:	add    rsp,0x8
  412a0d:	pop    rbx
  412a0e:	pop    rbp
  412a0f:	ret    
  412a10:	lea    esi,[rax+0x1]
  412a13:	mov    edx,0xfffffffc
  412a18:	call   4112d0 <test_parse@@Base+0x5e0>
  412a1d:	test   eax,eax
  412a1f:	je     412a02 <flatcc_builder_extend_offset_vector@@Base+0x32>
  412a21:	xor    eax,eax
  412a23:	jmp    412a09 <flatcc_builder_extend_offset_vector@@Base+0x39>
  412a25:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  412a2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412a30 <flatcc_builder_offset_vector_push@@Base>:
  412a30:	endbr64 
  412a34:	push   r12
  412a36:	push   rbp
  412a37:	push   rbx
  412a38:	mov    rdx,QWORD PTR [rdi+0x30]
  412a3c:	cmp    WORD PTR [rdx+0xe],0x5
  412a41:	jne    412a98 <flatcc_builder_offset_vector_push@@Base+0x68>
  412a43:	mov    eax,DWORD PTR [rdx+0x14]
  412a46:	cmp    eax,0x3fffffff
  412a4b:	je     412a91 <flatcc_builder_offset_vector_push@@Base+0x61>
  412a4d:	mov    ebp,DWORD PTR [rdi+0x20]
  412a50:	inc    eax
  412a52:	mov    DWORD PTR [rdx+0x14],eax
  412a55:	lea    edx,[rbp+0x4]
  412a58:	mov    rbx,rdi
  412a5b:	mov    r12d,esi
  412a5e:	mov    DWORD PTR [rdi+0x20],edx
  412a61:	cmp    edx,DWORD PTR [rdi+0x24]
  412a64:	jae    412a80 <flatcc_builder_offset_vector_push@@Base+0x50>
  412a66:	mov    rax,rbp
  412a69:	add    rax,QWORD PTR [rbx+0x18]
  412a6d:	je     412a72 <flatcc_builder_offset_vector_push@@Base+0x42>
  412a6f:	mov    DWORD PTR [rax],r12d
  412a72:	pop    rbx
  412a73:	pop    rbp
  412a74:	pop    r12
  412a76:	ret    
  412a77:	nop    WORD PTR [rax+rax*1+0x0]
  412a80:	lea    esi,[rbp+0x5]
  412a83:	mov    edx,0xfffffffc
  412a88:	call   4112d0 <test_parse@@Base+0x5e0>
  412a8d:	test   eax,eax
  412a8f:	je     412a66 <flatcc_builder_offset_vector_push@@Base+0x36>
  412a91:	pop    rbx
  412a92:	pop    rbp
  412a93:	xor    eax,eax
  412a95:	pop    r12
  412a97:	ret    
  412a98:	lea    rcx,[rip+0x8321]        # 41adc0 <_IO_stdin_used@@Base+0xdc0>
  412a9f:	mov    edx,0x3a6
  412aa4:	lea    rsi,[rip+0x79ed]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412aab:	lea    rdi,[rip+0x7b36]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  412ab2:	call   4031e0 <__assert_fail@plt>
  412ab7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412ac0 <flatcc_builder_append_offset_vector@@Base>:
  412ac0:	endbr64 
  412ac4:	push   r13
  412ac6:	push   r12
  412ac8:	push   rbp
  412ac9:	push   rbx
  412aca:	sub    rsp,0x8
  412ace:	mov    rax,QWORD PTR [rdi+0x30]
  412ad2:	cmp    WORD PTR [rax+0xe],0x5
  412ad7:	jne    412b46 <flatcc_builder_append_offset_vector@@Base+0x86>
  412ad9:	mov    ecx,edx
  412adb:	add    ecx,DWORD PTR [rax+0x14]
  412ade:	jb     412b65 <flatcc_builder_append_offset_vector@@Base+0xa5>
  412ae4:	cmp    ecx,0x3fffffff
  412aea:	ja     412b65 <flatcc_builder_append_offset_vector@@Base+0xa5>
  412aec:	mov    r12d,DWORD PTR [rdi+0x20]
  412af0:	lea    ebx,[rdx*4+0x0]
  412af7:	mov    rdx,r12
  412afa:	add    edx,ebx
  412afc:	mov    DWORD PTR [rax+0x14],ecx
  412aff:	mov    rbp,rdi
  412b02:	mov    r13,rsi
  412b05:	mov    DWORD PTR [rdi+0x20],edx
  412b08:	cmp    edx,DWORD PTR [rdi+0x24]
  412b0b:	jae    412b30 <flatcc_builder_append_offset_vector@@Base+0x70>
  412b0d:	add    r12,QWORD PTR [rbp+0x18]
  412b11:	je     412b20 <flatcc_builder_append_offset_vector@@Base+0x60>
  412b13:	mov    edx,ebx
  412b15:	mov    rsi,r13
  412b18:	mov    rdi,r12
  412b1b:	call   403230 <memcpy@plt>
  412b20:	add    rsp,0x8
  412b24:	pop    rbx
  412b25:	pop    rbp
  412b26:	mov    rax,r12
  412b29:	pop    r12
  412b2b:	pop    r13
  412b2d:	ret    
  412b2e:	xchg   ax,ax
  412b30:	lea    esi,[rdx+0x1]
  412b33:	mov    edx,0xfffffffc
  412b38:	call   4112d0 <test_parse@@Base+0x5e0>
  412b3d:	test   eax,eax
  412b3f:	je     412b0d <flatcc_builder_append_offset_vector@@Base+0x4d>
  412b41:	xor    r12d,r12d
  412b44:	jmp    412b20 <flatcc_builder_append_offset_vector@@Base+0x60>
  412b46:	lea    rcx,[rip+0x8233]        # 41ad80 <_IO_stdin_used@@Base+0xd80>
  412b4d:	mov    edx,0x3b4
  412b52:	lea    rsi,[rip+0x793f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412b59:	lea    rdi,[rip+0x7a88]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  412b60:	call   4031e0 <__assert_fail@plt>
  412b65:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  412b6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412b70 <flatcc_builder_extend_string@@Base>:
  412b70:	endbr64 
  412b74:	push   rbp
  412b75:	push   rbx
  412b76:	sub    rsp,0x8
  412b7a:	mov    rax,QWORD PTR [rdi+0x30]
  412b7e:	cmp    WORD PTR [rax+0xe],0x6
  412b83:	jne    412bc9 <flatcc_builder_extend_string@@Base+0x59>
  412b85:	mov    edx,esi
  412b87:	add    edx,DWORD PTR [rax+0x14]
  412b8a:	jb     412bc4 <flatcc_builder_extend_string@@Base+0x54>
  412b8c:	mov    ebp,DWORD PTR [rdi+0x20]
  412b8f:	mov    DWORD PTR [rax+0x14],edx
  412b92:	add    esi,ebp
  412b94:	mov    rbx,rdi
  412b97:	mov    DWORD PTR [rdi+0x20],esi
  412b9a:	cmp    esi,DWORD PTR [rdi+0x24]
  412b9d:	jae    412bb0 <flatcc_builder_extend_string@@Base+0x40>
  412b9f:	mov    rax,QWORD PTR [rbx+0x18]
  412ba3:	add    rax,rbp
  412ba6:	add    rsp,0x8
  412baa:	pop    rbx
  412bab:	pop    rbp
  412bac:	ret    
  412bad:	nop    DWORD PTR [rax]
  412bb0:	inc    esi
  412bb2:	mov    edx,0xfffffffc
  412bb7:	call   4112d0 <test_parse@@Base+0x5e0>
  412bbc:	test   eax,eax
  412bbe:	je     412b9f <flatcc_builder_extend_string@@Base+0x2f>
  412bc0:	xor    eax,eax
  412bc2:	jmp    412ba6 <flatcc_builder_extend_string@@Base+0x36>
  412bc4:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  412bc9:	lea    rcx,[rip+0x8180]        # 41ad50 <_IO_stdin_used@@Base+0xd50>
  412bd0:	mov    edx,0x3bd
  412bd5:	lea    rsi,[rip+0x78bc]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412bdc:	lea    rdi,[rip+0x7a3d]        # 41a620 <_IO_stdin_used@@Base+0x620>
  412be3:	call   4031e0 <__assert_fail@plt>
  412be8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000412bf0 <flatcc_builder_append_string@@Base>:
  412bf0:	endbr64 
  412bf4:	push   r13
  412bf6:	push   r12
  412bf8:	push   rbp
  412bf9:	push   rbx
  412bfa:	sub    rsp,0x8
  412bfe:	mov    rax,QWORD PTR [rdi+0x30]
  412c02:	cmp    WORD PTR [rax+0xe],0x6
  412c07:	jne    412c6b <flatcc_builder_append_string@@Base+0x7b>
  412c09:	mov    rbp,rdx
  412c0c:	add    edx,DWORD PTR [rax+0x14]
  412c0f:	jb     412c66 <flatcc_builder_append_string@@Base+0x76>
  412c11:	mov    r12d,DWORD PTR [rdi+0x20]
  412c15:	mov    DWORD PTR [rax+0x14],edx
  412c18:	mov    rdx,r12
  412c1b:	add    edx,ebp
  412c1d:	mov    rbx,rdi
  412c20:	mov    r13,rsi
  412c23:	mov    DWORD PTR [rdi+0x20],edx
  412c26:	cmp    edx,DWORD PTR [rdi+0x24]
  412c29:	jae    412c50 <flatcc_builder_append_string@@Base+0x60>
  412c2b:	add    r12,QWORD PTR [rbx+0x18]
  412c2f:	je     412c3e <flatcc_builder_append_string@@Base+0x4e>
  412c31:	mov    edx,ebp
  412c33:	mov    rsi,r13
  412c36:	mov    rdi,r12
  412c39:	call   403230 <memcpy@plt>
  412c3e:	add    rsp,0x8
  412c42:	pop    rbx
  412c43:	pop    rbp
  412c44:	mov    rax,r12
  412c47:	pop    r12
  412c49:	pop    r13
  412c4b:	ret    
  412c4c:	nop    DWORD PTR [rax+0x0]
  412c50:	lea    esi,[rdx+0x1]
  412c53:	mov    edx,0xfffffffc
  412c58:	call   4112d0 <test_parse@@Base+0x5e0>
  412c5d:	test   eax,eax
  412c5f:	je     412c2b <flatcc_builder_append_string@@Base+0x3b>
  412c61:	xor    r12d,r12d
  412c64:	jmp    412c3e <flatcc_builder_append_string@@Base+0x4e>
  412c66:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  412c6b:	lea    rcx,[rip+0x80be]        # 41ad30 <_IO_stdin_used@@Base+0xd30>
  412c72:	mov    edx,0x3c6
  412c77:	lea    rsi,[rip+0x781a]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412c7e:	lea    rdi,[rip+0x799b]        # 41a620 <_IO_stdin_used@@Base+0x620>
  412c85:	call   4031e0 <__assert_fail@plt>
  412c8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412c90 <flatcc_builder_append_string_str@@Base>:
  412c90:	endbr64 
  412c94:	push   rbp
  412c95:	mov    rbp,rdi
  412c98:	mov    rdi,rsi
  412c9b:	push   rbx
  412c9c:	mov    rbx,rsi
  412c9f:	sub    rsp,0x8
  412ca3:	call   4031b0 <strlen@plt>
  412ca8:	add    rsp,0x8
  412cac:	mov    rsi,rbx
  412caf:	pop    rbx
  412cb0:	mov    rdi,rbp
  412cb3:	mov    rdx,rax
  412cb6:	pop    rbp
  412cb7:	jmp    412bf0 <flatcc_builder_append_string@@Base>
  412cbc:	nop    DWORD PTR [rax+0x0]

0000000000412cc0 <flatcc_builder_append_string_strn@@Base>:
  412cc0:	endbr64 
  412cc4:	push   r12
  412cc6:	mov    r12,rdi
  412cc9:	push   rbp
  412cca:	mov    rbp,rsi
  412ccd:	mov    rdi,rbp
  412cd0:	push   rbx
  412cd1:	xor    esi,esi
  412cd3:	mov    rbx,rdx
  412cd6:	call   403200 <memchr@plt>
  412cdb:	mov    rdx,rax
  412cde:	sub    rdx,rbp
  412ce1:	test   rax,rax
  412ce4:	cmovne rbx,rdx
  412ce8:	mov    rsi,rbp
  412ceb:	mov    rdx,rbx
  412cee:	pop    rbx
  412cef:	pop    rbp
  412cf0:	mov    rdi,r12
  412cf3:	pop    r12
  412cf5:	jmp    412bf0 <flatcc_builder_append_string@@Base>
  412cfa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412d00 <flatcc_builder_truncate_vector@@Base>:
  412d00:	endbr64 
  412d04:	sub    rsp,0x8
  412d08:	mov    rax,QWORD PTR [rdi+0x30]
  412d0c:	cmp    WORD PTR [rax+0xe],0x4
  412d11:	jne    412d46 <flatcc_builder_truncate_vector@@Base+0x46>
  412d13:	mov    ecx,DWORD PTR [rax+0x14]
  412d16:	mov    rdx,rcx
  412d19:	cmp    rcx,rsi
  412d1c:	jb     412d65 <flatcc_builder_truncate_vector@@Base+0x65>
  412d1e:	sub    edx,esi
  412d20:	mov    DWORD PTR [rax+0x14],edx
  412d23:	imul   esi,DWORD PTR [rax+0x10]
  412d27:	mov    eax,DWORD PTR [rdi+0x20]
  412d2a:	mov    edx,esi
  412d2c:	sub    eax,esi
  412d2e:	mov    DWORD PTR [rdi+0x20],eax
  412d31:	add    rax,QWORD PTR [rdi+0x18]
  412d35:	mov    rdi,rax
  412d38:	xor    esi,esi
  412d3a:	call   4031f0 <memset@plt>
  412d3f:	xor    eax,eax
  412d41:	add    rsp,0x8
  412d45:	ret    
  412d46:	lea    rcx,[rip+0x7fc3]        # 41ad10 <_IO_stdin_used@@Base+0xd10>
  412d4d:	mov    edx,0x3d9
  412d52:	lea    rsi,[rip+0x773f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412d59:	lea    rdi,[rip+0x7818]        # 41a578 <_IO_stdin_used@@Base+0x578>
  412d60:	call   4031e0 <__assert_fail@plt>
  412d65:	lea    rcx,[rip+0x7fa4]        # 41ad10 <_IO_stdin_used@@Base+0xd10>
  412d6c:	mov    edx,0x3da
  412d71:	lea    rsi,[rip+0x7720]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412d78:	lea    rdi,[rip+0x78d1]        # 41a650 <_IO_stdin_used@@Base+0x650>
  412d7f:	call   4031e0 <__assert_fail@plt>
  412d84:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  412d8f:	nop

0000000000412d90 <flatcc_builder_truncate_offset_vector@@Base>:
  412d90:	endbr64 
  412d94:	sub    rsp,0x8
  412d98:	mov    rax,QWORD PTR [rdi+0x30]
  412d9c:	cmp    WORD PTR [rax+0xe],0x5
  412da1:	jne    412dd2 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  412da3:	mov    edx,DWORD PTR [rax+0x14]
  412da6:	cmp    edx,esi
  412da8:	jb     412df1 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  412daa:	sub    edx,esi
  412dac:	mov    DWORD PTR [rax+0x14],edx
  412daf:	imul   esi,DWORD PTR [rax+0x10]
  412db3:	mov    eax,DWORD PTR [rdi+0x20]
  412db6:	mov    edx,esi
  412db8:	sub    eax,esi
  412dba:	mov    DWORD PTR [rdi+0x20],eax
  412dbd:	add    rax,QWORD PTR [rdi+0x18]
  412dc1:	mov    rdi,rax
  412dc4:	xor    esi,esi
  412dc6:	call   4031f0 <memset@plt>
  412dcb:	xor    eax,eax
  412dcd:	add    rsp,0x8
  412dd1:	ret    
  412dd2:	lea    rcx,[rip+0x7f07]        # 41ace0 <_IO_stdin_used@@Base+0xce0>
  412dd9:	mov    edx,0x3e2
  412dde:	lea    rsi,[rip+0x76b3]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412de5:	lea    rdi,[rip+0x77fc]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  412dec:	call   4031e0 <__assert_fail@plt>
  412df1:	lea    rcx,[rip+0x7ee8]        # 41ace0 <_IO_stdin_used@@Base+0xce0>
  412df8:	mov    edx,0x3e3
  412dfd:	lea    rsi,[rip+0x7694]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412e04:	lea    rdi,[rip+0x786d]        # 41a678 <_IO_stdin_used@@Base+0x678>
  412e0b:	call   4031e0 <__assert_fail@plt>

0000000000412e10 <flatcc_builder_truncate_string@@Base>:
  412e10:	endbr64 
  412e14:	sub    rsp,0x8
  412e18:	mov    rdx,QWORD PTR [rdi+0x30]
  412e1c:	cmp    WORD PTR [rdx+0xe],0x6
  412e21:	jne    412e53 <flatcc_builder_truncate_string@@Base+0x43>
  412e23:	mov    ecx,DWORD PTR [rdx+0x14]
  412e26:	mov    rax,rcx
  412e29:	cmp    rcx,rsi
  412e2c:	jb     412e72 <flatcc_builder_truncate_string@@Base+0x62>
  412e2e:	sub    eax,esi
  412e30:	mov    DWORD PTR [rdx+0x14],eax
  412e33:	mov    rdx,rsi
  412e36:	mov    eax,DWORD PTR [rdi+0x20]
  412e39:	sub    eax,esi
  412e3b:	mov    DWORD PTR [rdi+0x20],eax
  412e3e:	add    rax,QWORD PTR [rdi+0x18]
  412e42:	mov    rdi,rax
  412e45:	xor    esi,esi
  412e47:	call   4031f0 <memset@plt>
  412e4c:	xor    eax,eax
  412e4e:	add    rsp,0x8
  412e52:	ret    
  412e53:	lea    rcx,[rip+0x7e66]        # 41acc0 <_IO_stdin_used@@Base+0xcc0>
  412e5a:	mov    edx,0x3eb
  412e5f:	lea    rsi,[rip+0x7632]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412e66:	lea    rdi,[rip+0x77b3]        # 41a620 <_IO_stdin_used@@Base+0x620>
  412e6d:	call   4031e0 <__assert_fail@plt>
  412e72:	lea    rcx,[rip+0x7e47]        # 41acc0 <_IO_stdin_used@@Base+0xcc0>
  412e79:	mov    edx,0x3ec
  412e7e:	lea    rsi,[rip+0x7613]        # 41a498 <_IO_stdin_used@@Base+0x498>
  412e85:	lea    rdi,[rip+0x782c]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  412e8c:	call   4031e0 <__assert_fail@plt>
  412e91:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  412e9c:	nop    DWORD PTR [rax+0x0]

0000000000412ea0 <flatcc_builder_start_vector@@Base>:
  412ea0:	endbr64 
  412ea4:	push   r12
  412ea6:	cmp    dx,0x4
  412eaa:	mov    r12,rcx
  412ead:	push   rbp
  412eae:	mov    rbp,rsi
  412eb1:	mov    esi,0x4
  412eb6:	push   rbx
  412eb7:	cmovae esi,edx
  412eba:	mov    rbx,rdi
  412ebd:	movzx  esi,si
  412ec0:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  412ec5:	test   eax,eax
  412ec7:	jne    412f10 <flatcc_builder_start_vector@@Base+0x70>
  412ec9:	mov    rsi,QWORD PTR [rbx+0x30]
  412ecd:	mov    edx,0x4
  412ed2:	mov    WORD PTR [rsi+0xe],dx
  412ed6:	mov    edx,DWORD PTR [rbx+0x28]
  412ed9:	mov    DWORD PTR [rsi+0x10],ebp
  412edc:	mov    rcx,rdx
  412edf:	add    rdx,QWORD PTR [rbx+0x68]
  412ee3:	mov    DWORD PTR [rsi+0x14],0x0
  412eea:	mov    DWORD PTR [rsi+0x18],r12d
  412eee:	mov    QWORD PTR [rbx+0x18],rdx
  412ef2:	mov    edx,DWORD PTR [rbx+0x70]
  412ef5:	sub    edx,ecx
  412ef7:	mov    ecx,0xfffffffc
  412efc:	cmp    edx,ecx
  412efe:	cmova  edx,ecx
  412f01:	mov    DWORD PTR [rbx+0x24],edx
  412f04:	mov    DWORD PTR [rsi+0x4],ecx
  412f07:	pop    rbx
  412f08:	pop    rbp
  412f09:	pop    r12
  412f0b:	ret    
  412f0c:	nop    DWORD PTR [rax+0x0]
  412f10:	mov    eax,0xffffffff
  412f15:	jmp    412f07 <flatcc_builder_start_vector@@Base+0x67>
  412f17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412f20 <flatcc_builder_start_offset_vector@@Base>:
  412f20:	endbr64 
  412f24:	push   rbx
  412f25:	mov    esi,0x4
  412f2a:	mov    rbx,rdi
  412f2d:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  412f32:	test   eax,eax
  412f34:	jne    412f70 <flatcc_builder_start_offset_vector@@Base+0x50>
  412f36:	mov    rcx,QWORD PTR [rbx+0x30]
  412f3a:	xor    edx,edx
  412f3c:	mov    QWORD PTR [rcx+0xe],0x40005
  412f44:	mov    WORD PTR [rcx+0x16],dx
  412f48:	mov    edx,DWORD PTR [rbx+0x28]
  412f4b:	mov    rsi,rdx
  412f4e:	add    rdx,QWORD PTR [rbx+0x68]
  412f52:	mov    QWORD PTR [rbx+0x18],rdx
  412f56:	mov    edx,DWORD PTR [rbx+0x70]
  412f59:	sub    edx,esi
  412f5b:	mov    esi,0xfffffffc
  412f60:	cmp    edx,esi
  412f62:	cmova  edx,esi
  412f65:	mov    DWORD PTR [rbx+0x24],edx
  412f68:	mov    DWORD PTR [rcx+0x4],esi
  412f6b:	pop    rbx
  412f6c:	ret    
  412f6d:	nop    DWORD PTR [rax]
  412f70:	mov    eax,0xffffffff
  412f75:	pop    rbx
  412f76:	ret    
  412f77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412f80 <flatcc_builder_start_string@@Base>:
  412f80:	endbr64 
  412f84:	push   rbx
  412f85:	mov    esi,0x1
  412f8a:	mov    rbx,rdi
  412f8d:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  412f92:	test   eax,eax
  412f94:	jne    412fd0 <flatcc_builder_start_string@@Base+0x50>
  412f96:	mov    rcx,QWORD PTR [rbx+0x30]
  412f9a:	xor    edx,edx
  412f9c:	mov    QWORD PTR [rcx+0xe],0x10006
  412fa4:	mov    WORD PTR [rcx+0x16],dx
  412fa8:	mov    edx,DWORD PTR [rbx+0x28]
  412fab:	mov    rsi,rdx
  412fae:	add    rdx,QWORD PTR [rbx+0x68]
  412fb2:	mov    QWORD PTR [rbx+0x18],rdx
  412fb6:	mov    edx,DWORD PTR [rbx+0x70]
  412fb9:	sub    edx,esi
  412fbb:	mov    esi,0xfffffffc
  412fc0:	cmp    edx,esi
  412fc2:	cmova  edx,esi
  412fc5:	mov    DWORD PTR [rbx+0x24],edx
  412fc8:	mov    DWORD PTR [rcx+0x4],esi
  412fcb:	pop    rbx
  412fcc:	ret    
  412fcd:	nop    DWORD PTR [rax]
  412fd0:	mov    eax,0xffffffff
  412fd5:	pop    rbx
  412fd6:	ret    
  412fd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412fe0 <flatcc_builder_reserve_table@@Base>:
  412fe0:	endbr64 
  412fe4:	push   r12
  412fe6:	push   rbp
  412fe7:	push   rbx
  412fe8:	test   esi,esi
  412fea:	js     41309f <flatcc_builder_reserve_table@@Base+0xbf>
  412ff0:	mov    rax,QWORD PTR [rdi+0x30]
  412ff4:	lea    r12d,[rsi+rsi*1+0x4]
  412ff9:	movzx  edx,WORD PTR [rax+0x1c]
  412ffd:	mov    eax,DWORD PTR [rax+0x10]
  413000:	mov    rbx,rdi
  413003:	lea    ebp,[rax+rdx*2]
  413006:	mov    edx,r12d
  413009:	add    rdx,rbp
  41300c:	cmp    rdx,QWORD PTR [rdi+0x60]
  413010:	ja     413050 <flatcc_builder_reserve_table@@Base+0x70>
  413012:	add    rbp,QWORD PTR [rbx+0x58]
  413016:	je     413090 <flatcc_builder_reserve_table@@Base+0xb0>
  413018:	mov    rax,QWORD PTR [rbx+0x30]
  41301c:	add    rbp,0x4
  413020:	mov    QWORD PTR [rbx+0x8],rbp
  413024:	mov    ebp,DWORD PTR [rax+0x14]
  413027:	lea    edx,[r12-0x3]
  41302c:	add    rdx,rbp
  41302f:	cmp    rdx,QWORD PTR [rbx+0x90]
  413036:	ja     413070 <flatcc_builder_reserve_table@@Base+0x90>
  413038:	add    rbp,QWORD PTR [rbx+0x88]
  41303f:	sete   al
  413042:	mov    QWORD PTR [rbx],rbp
  413045:	movzx  eax,al
  413048:	neg    eax
  41304a:	pop    rbx
  41304b:	pop    rbp
  41304c:	pop    r12
  41304e:	ret    
  41304f:	nop
  413050:	lea    rsi,[rdi+0x58]
  413054:	mov    rdi,QWORD PTR [rdi+0x40]
  413058:	xor    r8d,r8d
  41305b:	mov    ecx,0x1
  413060:	call   QWORD PTR [rbx+0x50]
  413063:	test   eax,eax
  413065:	je     413012 <flatcc_builder_reserve_table@@Base+0x32>
  413067:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  41306c:	nop    DWORD PTR [rax+0x0]
  413070:	mov    rdi,QWORD PTR [rbx+0x40]
  413074:	xor    ecx,ecx
  413076:	lea    rsi,[rbx+0x88]
  41307d:	mov    r8d,0x3
  413083:	call   QWORD PTR [rbx+0x50]
  413086:	test   eax,eax
  413088:	je     413038 <flatcc_builder_reserve_table@@Base+0x58>
  41308a:	jmp    413067 <flatcc_builder_reserve_table@@Base+0x87>
  41308c:	nop    DWORD PTR [rax+0x0]
  413090:	mov    QWORD PTR [rbx+0x8],0x0
  413098:	mov    eax,0xffffffff
  41309d:	jmp    41304a <flatcc_builder_reserve_table@@Base+0x6a>
  41309f:	lea    rcx,[rip+0x7bfa]        # 41aca0 <_IO_stdin_used@@Base+0xca0>
  4130a6:	mov    edx,0x429
  4130ab:	lea    rsi,[rip+0x73e6]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4130b2:	lea    rdi,[rip+0x77d2]        # 41a88b <_IO_stdin_used@@Base+0x88b>
  4130b9:	call   4031e0 <__assert_fail@plt>
  4130be:	xchg   ax,ax

00000000004130c0 <flatcc_builder_start_table@@Base>:
  4130c0:	endbr64 
  4130c4:	push   r13
  4130c6:	push   r12
  4130c8:	mov    r12d,esi
  4130cb:	mov    esi,0x4
  4130d0:	push   rbp
  4130d1:	push   rbx
  4130d2:	mov    rbx,rdi
  4130d5:	sub    rsp,0x8
  4130d9:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  4130de:	test   eax,eax
  4130e0:	jne    4131f8 <flatcc_builder_start_table@@Base+0x138>
  4130e6:	mov    rsi,QWORD PTR [rbx]
  4130e9:	mov    rdx,QWORD PTR [rbx+0x30]
  4130ed:	sub    rsi,QWORD PTR [rbx+0x88]
  4130f4:	mov    rcx,QWORD PTR [rbx+0x8]
  4130f8:	mov    ebp,eax
  4130fa:	mov    rax,QWORD PTR [rbx+0x58]
  4130fe:	mov    DWORD PTR [rdx+0x14],esi
  413101:	mov    esi,DWORD PTR [rbx+0x14]
  413104:	sub    rcx,rax
  413107:	mov    DWORD PTR [rdx+0x18],esi
  41310a:	movzx  esi,WORD PTR [rbx+0x10]
  41310e:	xor    edi,edi
  413110:	mov    r8d,0x3
  413116:	mov    DWORD PTR [rdx+0x10],ecx
  413119:	mov    WORD PTR [rdx+0x1c],si
  41311d:	lea    r13d,[rcx+rsi*2]
  413121:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  413128:	mov    WORD PTR [rbx+0x10],di
  41312c:	mov    WORD PTR [rdx+0xe],r8w
  413131:	lea    edx,[r12+r12*1+0x4]
  413136:	add    rdx,r13
  413139:	cmp    rdx,QWORD PTR [rbx+0x60]
  41313d:	jbe    41315e <flatcc_builder_start_table@@Base+0x9e>
  41313f:	mov    rdi,QWORD PTR [rbx+0x40]
  413143:	xor    r8d,r8d
  413146:	lea    rsi,[rbx+0x58]
  41314a:	mov    ecx,0x1
  41314f:	call   QWORD PTR [rbx+0x50]
  413152:	test   eax,eax
  413154:	jne    4131ea <flatcc_builder_start_table@@Base+0x12a>
  41315a:	mov    rax,QWORD PTR [rbx+0x58]
  41315e:	add    rax,r13
  413161:	je     4131f0 <flatcc_builder_start_table@@Base+0x130>
  413167:	add    rax,0x4
  41316b:	mov    QWORD PTR [rbx+0x8],rax
  41316f:	mov    rax,QWORD PTR [rbx+0x30]
  413173:	lea    edx,[r12+r12*1+0x1]
  413178:	mov    r13d,DWORD PTR [rax+0x14]
  41317c:	add    rdx,r13
  41317f:	cmp    rdx,QWORD PTR [rbx+0x90]
  413186:	ja     4131d0 <flatcc_builder_start_table@@Base+0x110>
  413188:	add    r13,QWORD PTR [rbx+0x88]
  41318f:	mov    QWORD PTR [rbx],r13
  413192:	je     4131f8 <flatcc_builder_start_table@@Base+0x138>
  413194:	mov    eax,DWORD PTR [rbx+0x28]
  413197:	mov    rdx,rax
  41319a:	add    rax,QWORD PTR [rbx+0x68]
  41319e:	mov    QWORD PTR [rbx+0x18],rax
  4131a2:	mov    eax,DWORD PTR [rbx+0x70]
  4131a5:	sub    eax,edx
  4131a7:	cmp    eax,0xfffc
  4131ac:	mov    edx,0xfffc
  4131b1:	cmova  eax,edx
  4131b4:	mov    DWORD PTR [rbx+0x24],eax
  4131b7:	mov    rax,QWORD PTR [rbx+0x30]
  4131bb:	mov    DWORD PTR [rax+0x4],0xfffc
  4131c2:	add    rsp,0x8
  4131c6:	pop    rbx
  4131c7:	mov    eax,ebp
  4131c9:	pop    rbp
  4131ca:	pop    r12
  4131cc:	pop    r13
  4131ce:	ret    
  4131cf:	nop
  4131d0:	mov    rdi,QWORD PTR [rbx+0x40]
  4131d4:	xor    ecx,ecx
  4131d6:	lea    rsi,[rbx+0x88]
  4131dd:	mov    r8d,0x3
  4131e3:	call   QWORD PTR [rbx+0x50]
  4131e6:	test   eax,eax
  4131e8:	je     413188 <flatcc_builder_start_table@@Base+0xc8>
  4131ea:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  4131ef:	nop
  4131f0:	mov    QWORD PTR [rbx+0x8],0x0
  4131f8:	mov    ebp,0xffffffff
  4131fd:	jmp    4131c2 <flatcc_builder_start_table@@Base+0x102>
  4131ff:	nop

0000000000413200 <flatcc_builder_create_vtable@@Base>:
  413200:	endbr64 
  413204:	push   rbp
  413205:	mov    rbp,rdi
  413208:	push   rbx
  413209:	sub    rsp,0xa8
  413210:	mov    rax,QWORD PTR fs:0x28
  413219:	mov    QWORD PTR [rsp+0x98],rax
  413221:	xor    eax,eax
  413223:	mov    QWORD PTR [rsp],0x0
  41322b:	mov    DWORD PTR [rsp+0x8],0x0
  413233:	mov    eax,DWORD PTR [rdi+0x100]
  413239:	test   dx,dx
  41323c:	je     4132c0 <flatcc_builder_create_vtable@@Base+0xc0>
  413242:	movzx  r8d,dx
  413246:	mov    QWORD PTR [rsp],r8
  41324a:	mov    QWORD PTR [rsp+0x10],rsi
  41324f:	mov    QWORD PTR [rsp+0x18],r8
  413254:	mov    DWORD PTR [rsp+0x8],0x1
  41325c:	movzx  edx,dx
  41325f:	test   eax,eax
  413261:	je     4132f0 <flatcc_builder_create_vtable@@Base+0xf0>
  413267:	mov    eax,DWORD PTR [rbp+0xf0]
  41326d:	mov    ebx,eax
  41326f:	sub    ebx,edx
  413271:	cmp    eax,ebx
  413273:	jle    4132ce <flatcc_builder_create_vtable@@Base+0xce>
  413275:	mov    rdi,QWORD PTR [rbp+0x38]
  413279:	mov    edx,DWORD PTR [rsp+0x8]
  41327d:	lea    rsi,[rsp+0x10]
  413282:	mov    ecx,ebx
  413284:	call   QWORD PTR [rbp+0x48]
  413287:	test   eax,eax
  413289:	jne    413340 <flatcc_builder_create_vtable@@Base+0x140>
  41328f:	cmp    ebx,0x1
  413292:	mov    DWORD PTR [rbp+0xf0],ebx
  413298:	sbb    ebx,0xffffffff
  41329b:	mov    rcx,QWORD PTR [rsp+0x98]
  4132a3:	xor    rcx,QWORD PTR fs:0x28
  4132ac:	mov    eax,ebx
  4132ae:	jne    41333b <flatcc_builder_create_vtable@@Base+0x13b>
  4132b4:	add    rsp,0xa8
  4132bb:	pop    rbx
  4132bc:	pop    rbp
  4132bd:	ret    
  4132be:	xchg   ax,ax
  4132c0:	test   eax,eax
  4132c2:	jne    4132ce <flatcc_builder_create_vtable@@Base+0xce>
  4132c4:	mov    eax,DWORD PTR [rdi+0x124]
  4132ca:	test   eax,eax
  4132cc:	je     413330 <flatcc_builder_create_vtable@@Base+0x130>
  4132ce:	lea    rcx,[rip+0x7bfb]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  4132d5:	mov    edx,0x287
  4132da:	lea    rsi,[rip+0x71b7]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4132e1:	lea    rdi,[rip+0x7547]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4132e8:	call   4031e0 <__assert_fail@plt>
  4132ed:	nop    DWORD PTR [rax]
  4132f0:	mov    ecx,DWORD PTR [rdi+0x124]
  4132f6:	test   ecx,ecx
  4132f8:	jne    413267 <flatcc_builder_create_vtable@@Base+0x67>
  4132fe:	mov    ebx,DWORD PTR [rdi+0xf4]
  413304:	add    edx,ebx
  413306:	mov    DWORD PTR [rdi+0xf4],edx
  41330c:	mov    rdi,QWORD PTR [rbp+0x38]
  413310:	mov    edx,DWORD PTR [rsp+0x8]
  413314:	lea    rsi,[rsp+0x10]
  413319:	mov    ecx,ebx
  41331b:	call   QWORD PTR [rbp+0x48]
  41331e:	test   eax,eax
  413320:	jne    413345 <flatcc_builder_create_vtable@@Base+0x145>
  413322:	inc    ebx
  413324:	jmp    41329b <flatcc_builder_create_vtable@@Base+0x9b>
  413329:	nop    DWORD PTR [rax+0x0]
  413330:	mov    ebx,DWORD PTR [rbp+0xf4]
  413336:	xor    r8d,r8d
  413339:	jmp    41330c <flatcc_builder_create_vtable@@Base+0x10c>
  41333b:	call   4031c0 <__stack_chk_fail@plt>
  413340:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  413345:	call   411490 <flatcc_builder_default_alloc@@Base+0x160>
  41334a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413350 <flatcc_builder_create_cached_vtable@@Base>:
  413350:	endbr64 
  413354:	push   r15
  413356:	mov    r15,rdi
  413359:	push   r14
  41335b:	push   r13
  41335d:	push   r12
  41335f:	movzx  r12d,dx
  413363:	push   rbp
  413364:	mov    ebp,ecx
  413366:	push   rbx
  413367:	sub    rsp,0x38
  41336b:	mov    rbx,QWORD PTR [rdi+0xd8]
  413372:	mov    QWORD PTR [rsp+0x18],rsi
  413377:	mov    DWORD PTR [rsp+0x2c],edx
  41337b:	test   rbx,rbx
  41337e:	je     413518 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  413384:	mov    eax,0x20
  413389:	sub    eax,ebx
  41338b:	shrx   ebp,ebp,eax
  413390:	mov    rax,QWORD PTR [r15+0xa8]
  413397:	lea    r14,[rax+rbp*4]
  41339b:	test   r14,r14
  41339e:	je     413500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4133a4:	mov    ebp,DWORD PTR [r14]
  4133a7:	test   ebp,ebp
  4133a9:	je     4135f0 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  4133af:	mov    QWORD PTR [rsp+0x20],0x0
  4133b8:	mov    r11,QWORD PTR [r15+0xb8]
  4133bf:	mov    r8,QWORD PTR [r15+0x78]
  4133c3:	mov    r13,r14
  4133c6:	mov    ebx,ebp
  4133c8:	add    rbx,r11
  4133cb:	mov    esi,DWORD PTR [rbx+0x8]
  4133ce:	add    rsi,r8
  4133d1:	cmp    WORD PTR [rsi],r12w
  4133d5:	jne    4134c0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  4133db:	mov    rdi,QWORD PTR [rsp+0x18]
  4133e0:	movzx  edx,r12w
  4133e4:	mov    QWORD PTR [rsp+0x10],r8
  4133e9:	mov    QWORD PTR [rsp+0x8],r11
  4133ee:	call   403210 <memcmp@plt>
  4133f3:	test   eax,eax
  4133f5:	mov    r11,QWORD PTR [rsp+0x8]
  4133fa:	mov    r8,QWORD PTR [rsp+0x10]
  4133ff:	jne    4134c0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  413405:	mov    eax,DWORD PTR [r15+0x100]
  41340c:	cmp    DWORD PTR [rbx+0x4],eax
  41340f:	je     4134d0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  413415:	mov    QWORD PTR [rsp+0x20],rbx
  41341a:	mov    ebp,DWORD PTR [rbx+0xc]
  41341d:	lea    r13,[rbx+0xc]
  413421:	test   ebp,ebp
  413423:	jne    4133c6 <flatcc_builder_create_cached_vtable@@Base+0x76>
  413425:	mov    ebp,DWORD PTR [r15+0xe4]
  41342c:	lea    rdx,[rbp+0x10]
  413430:	cmp    rdx,QWORD PTR [r15+0xc0]
  413437:	jbe    413458 <flatcc_builder_create_cached_vtable@@Base+0x108>
  413439:	mov    rdi,QWORD PTR [r15+0x40]
  41343d:	xor    ecx,ecx
  41343f:	lea    rsi,[r15+0xb8]
  413446:	mov    r8d,0x6
  41344c:	call   QWORD PTR [r15+0x50]
  413450:	test   eax,eax
  413452:	jne    4135e4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  413458:	add    rbp,QWORD PTR [r15+0xb8]
  41345f:	je     413500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  413465:	mov    eax,DWORD PTR [r15+0xe4]
  41346c:	mov    rsi,QWORD PTR [rsp+0x18]
  413471:	lea    edx,[rax+0x10]
  413474:	mov    DWORD PTR [r15+0xe4],edx
  41347b:	mov    edx,DWORD PTR [r15+0x100]
  413482:	mov    rdi,r15
  413485:	mov    DWORD PTR [rbp+0x4],edx
  413488:	mov    edx,DWORD PTR [r14]
  41348b:	mov    DWORD PTR [rbp+0xc],edx
  41348e:	mov    DWORD PTR [r14],eax
  413491:	mov    eax,DWORD PTR [rsp+0x2c]
  413495:	movzx  edx,ax
  413498:	movzx  ebx,ax
  41349b:	call   413200 <flatcc_builder_create_vtable@@Base>
  4134a0:	mov    DWORD PTR [rbp+0x0],eax
  4134a3:	test   eax,eax
  4134a5:	je     413500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4134a7:	mov    rdi,QWORD PTR [rsp+0x20]
  4134ac:	test   rdi,rdi
  4134af:	je     413605 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  4134b5:	mov    edx,DWORD PTR [rdi+0x8]
  4134b8:	mov    DWORD PTR [rbp+0x8],edx
  4134bb:	jmp    4134e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  4134bd:	nop    DWORD PTR [rax]
  4134c0:	lea    r13,[rbx+0xc]
  4134c4:	mov    ebp,DWORD PTR [rbx+0xc]
  4134c7:	jmp    413421 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  4134cc:	nop    DWORD PTR [rax+0x0]
  4134d0:	cmp    r14,r13
  4134d3:	je     4134e5 <flatcc_builder_create_cached_vtable@@Base+0x195>
  4134d5:	mov    eax,DWORD PTR [rbx+0xc]
  4134d8:	mov    DWORD PTR [r13+0x0],eax
  4134dc:	mov    eax,DWORD PTR [r14]
  4134df:	mov    DWORD PTR [rbx+0xc],eax
  4134e2:	mov    DWORD PTR [r14],ebp
  4134e5:	mov    eax,DWORD PTR [rbx]
  4134e7:	add    rsp,0x38
  4134eb:	pop    rbx
  4134ec:	pop    rbp
  4134ed:	pop    r12
  4134ef:	pop    r13
  4134f1:	pop    r14
  4134f3:	pop    r15
  4134f5:	ret    
  4134f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413500:	add    rsp,0x38
  413504:	pop    rbx
  413505:	pop    rbp
  413506:	pop    r12
  413508:	pop    r13
  41350a:	pop    r14
  41350c:	xor    eax,eax
  41350e:	pop    r15
  413510:	ret    
  413511:	nop    DWORD PTR [rax+0x0]
  413518:	mov    eax,DWORD PTR [rdi+0xe4]
  41351e:	lea    r13,[rdi+0xa8]
  413525:	test   eax,eax
  413527:	jne    41368f <flatcc_builder_create_cached_vtable@@Base+0x33f>
  41352d:	cmp    QWORD PTR [rdi+0xc0],0xf
  413535:	jbe    4135c0 <flatcc_builder_create_cached_vtable@@Base+0x270>
  41353b:	cmp    QWORD PTR [r15+0xb8],0x0
  413543:	je     413500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  413545:	mov    DWORD PTR [r15+0xe4],0x10
  413550:	mov    rdi,QWORD PTR [r15+0x40]
  413554:	mov    r8d,0x5
  41355a:	mov    ecx,0x1
  41355f:	mov    edx,0x100
  413564:	mov    rsi,r13
  413567:	call   QWORD PTR [r15+0x50]
  41356b:	test   eax,eax
  41356d:	jne    413500 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  41356f:	mov    rcx,QWORD PTR [r15+0xb0]
  413576:	mov    eax,0x100
  41357b:	jmp    413583 <flatcc_builder_create_cached_vtable@@Base+0x233>
  41357d:	nop    DWORD PTR [rax]
  413580:	mov    rax,rdx
  413583:	lea    rdx,[rax+rax*1]
  413587:	cmp    rdx,rcx
  41358a:	jbe    413580 <flatcc_builder_create_cached_vtable@@Base+0x230>
  41358c:	shr    rax,0x2
  413590:	cmp    rax,0x1
  413594:	jbe    4135fe <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  413596:	mov    esi,0x1
  41359b:	nop    DWORD PTR [rax+rax*1+0x0]
  4135a0:	inc    rbx
  4135a3:	shlx   rdx,rsi,rbx
  4135a8:	cmp    rax,rdx
  4135ab:	ja     4135a0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  4135ad:	mov    eax,0x20
  4135b2:	sub    eax,ebx
  4135b4:	mov    QWORD PTR [r15+0xd8],rbx
  4135bb:	jmp    41338b <flatcc_builder_create_cached_vtable@@Base+0x3b>
  4135c0:	lea    rsi,[rdi+0xb8]
  4135c7:	mov    rdi,QWORD PTR [rdi+0x40]
  4135cb:	xor    ecx,ecx
  4135cd:	mov    r8d,0x6
  4135d3:	mov    edx,0x10
  4135d8:	call   QWORD PTR [r15+0x50]
  4135dc:	test   eax,eax
  4135de:	je     41353b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  4135e4:	call   411460 <flatcc_builder_default_alloc@@Base+0x130>
  4135e9:	nop    DWORD PTR [rax+0x0]
  4135f0:	mov    QWORD PTR [rsp+0x20],0x0
  4135f9:	jmp    413425 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  4135fe:	mov    eax,0x20
  413603:	jmp    4135b4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  413605:	mov    rax,QWORD PTR [r15+0x118]
  41360c:	mov    r14d,DWORD PTR [r15+0xe0]
  413613:	test   rax,rax
  413616:	je     413621 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  413618:	lea    edx,[rbx+r14*1]
  41361c:	cmp    rax,rdx
  41361f:	jb     413677 <flatcc_builder_create_cached_vtable@@Base+0x327>
  413621:	lea    rdx,[r12+r14*1]
  413625:	cmp    rdx,QWORD PTR [r15+0x80]
  41362c:	jbe    413646 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  41362e:	mov    rdi,QWORD PTR [r15+0x40]
  413632:	xor    ecx,ecx
  413634:	lea    rsi,[r15+0x78]
  413638:	mov    r8d,0x2
  41363e:	call   QWORD PTR [r15+0x50]
  413642:	test   eax,eax
  413644:	jne    4135e4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  413646:	mov    rdi,r14
  413649:	add    rdi,QWORD PTR [r15+0x78]
  41364d:	je     413687 <flatcc_builder_create_cached_vtable@@Base+0x337>
  41364f:	mov    eax,DWORD PTR [r15+0xe0]
  413656:	mov    rsi,QWORD PTR [rsp+0x18]
  41365b:	add    ebx,eax
  41365d:	mov    DWORD PTR [rbp+0x8],eax
  413660:	mov    DWORD PTR [r15+0xe0],ebx
  413667:	mov    rdx,r12
  41366a:	call   403230 <memcpy@plt>
  41366f:	mov    eax,DWORD PTR [rbp+0x0]
  413672:	jmp    4134e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  413677:	mov    rdi,r15
  41367a:	call   4119b0 <flatcc_builder_flush_vtable_cache@@Base>
  41367f:	mov    eax,DWORD PTR [rbp+0x0]
  413682:	jmp    4134e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  413687:	or     eax,0xffffffff
  41368a:	jmp    4134e7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  41368f:	lea    rcx,[rip+0x75fa]        # 41ac90 <_IO_stdin_used@@Base+0xc90>
  413696:	mov    edx,0x156
  41369b:	lea    rsi,[rip+0x6df6]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4136a2:	lea    rdi,[rip+0x71cc]        # 41a875 <_IO_stdin_used@@Base+0x875>
  4136a9:	call   4031e0 <__assert_fail@plt>
  4136ae:	xchg   ax,ax

00000000004136b0 <flatcc_builder_create_table@@Base>:
  4136b0:	endbr64 
  4136b4:	push   rbp
  4136b5:	push   rbx
  4136b6:	mov    rbx,rdi
  4136b9:	sub    rsp,0xb8
  4136c0:	mov    edi,DWORD PTR [rsp+0xd0]
  4136c7:	mov    rax,QWORD PTR fs:0x28
  4136d0:	mov    QWORD PTR [rsp+0xa8],rax
  4136d8:	xor    eax,eax
  4136da:	test   r9d,r9d
  4136dd:	js     41389f <flatcc_builder_create_table@@Base+0x1ef>
  4136e3:	test   dil,0x1
  4136e7:	je     41387b <flatcc_builder_create_table@@Base+0x1cb>
  4136ed:	cmp    cx,0x4
  4136f1:	mov    eax,0x4
  4136f6:	cmovb  ecx,eax
  4136f9:	movzx  r11d,cx
  4136fd:	cmp    WORD PTR [rbx+0xe8],cx
  413704:	jb     413850 <flatcc_builder_create_table@@Base+0x1a0>
  41370a:	mov    eax,DWORD PTR [rbx+0xf0]
  413710:	lea    ecx,[r11-0x1]
  413714:	mov    r10d,eax
  413717:	sub    r10d,edx
  41371a:	and    r10d,ecx
  41371d:	mov    ecx,eax
  41371f:	sub    ecx,edx
  413721:	lea    r11d,[rcx-0x4]
  413725:	dec    edi
  413727:	mov    ecx,r11d
  41372a:	sub    ecx,edi
  41372c:	sub    ecx,r10d
  41372f:	mov    DWORD PTR [rsp+0xc],ecx
  413733:	test   r9d,r9d
  413736:	je     41376d <flatcc_builder_create_table@@Base+0xbd>
  413738:	mov    edi,r10d
  41373b:	sub    edi,r11d
  41373e:	lea    eax,[r9-0x1]
  413742:	sub    edi,0x4
  413745:	lea    r9,[r8+rax*2+0x2]
  41374a:	nop    WORD PTR [rax+rax*1+0x0]
  413750:	movzx  ecx,WORD PTR [r8]
  413754:	mov    r11d,edi
  413757:	sub    r11d,ecx
  41375a:	add    r8,0x2
  41375e:	add    DWORD PTR [rsi+rcx*1],r11d
  413762:	cmp    r9,r8
  413765:	jne    413750 <flatcc_builder_create_table@@Base+0xa0>
  413767:	mov    eax,DWORD PTR [rbx+0xf0]
  41376d:	lea    rcx,[rsp+0xc]
  413772:	mov    QWORD PTR [rsp+0x10],0x4
  41377b:	mov    QWORD PTR [rsp+0x20],rcx
  413780:	mov    QWORD PTR [rsp+0x28],0x4
  413789:	mov    DWORD PTR [rsp+0x18],0x1
  413791:	mov    r8d,0x4
  413797:	test   rdx,rdx
  41379a:	je     4137b7 <flatcc_builder_create_table@@Base+0x107>
  41379c:	lea    r8,[rdx+0x4]
  4137a0:	mov    QWORD PTR [rsp+0x10],r8
  4137a5:	mov    QWORD PTR [rsp+0x30],rsi
  4137aa:	mov    QWORD PTR [rsp+0x38],rdx
  4137af:	mov    DWORD PTR [rsp+0x18],0x2
  4137b7:	test   r10d,r10d
  4137ba:	jne    413820 <flatcc_builder_create_table@@Base+0x170>
  4137bc:	mov    ebp,eax
  4137be:	movabs rdx,0x10000000f
  4137c8:	sub    ebp,r8d
  4137cb:	cmp    r8,rdx
  4137ce:	ja     41385c <flatcc_builder_create_table@@Base+0x1ac>
  4137d4:	cmp    ebp,eax
  4137d6:	jge    41385c <flatcc_builder_create_table@@Base+0x1ac>
  4137dc:	mov    rdi,QWORD PTR [rbx+0x38]
  4137e0:	mov    edx,DWORD PTR [rsp+0x18]
  4137e4:	lea    rsi,[rsp+0x20]
  4137e9:	mov    ecx,ebp
  4137eb:	call   QWORD PTR [rbx+0x48]
  4137ee:	test   eax,eax
  4137f0:	jne    41389a <flatcc_builder_create_table@@Base+0x1ea>
  4137f6:	mov    DWORD PTR [rbx+0xf0],ebp
  4137fc:	mov    eax,ebp
  4137fe:	mov    rbx,QWORD PTR [rsp+0xa8]
  413806:	xor    rbx,QWORD PTR fs:0x28
  41380f:	jne    4138be <flatcc_builder_create_table@@Base+0x20e>
  413815:	add    rsp,0xb8
  41381c:	pop    rbx
  41381d:	pop    rbp
  41381e:	ret    
  41381f:	nop
  413820:	movsxd rcx,DWORD PTR [rsp+0x18]
  413825:	mov    rsi,0x41af80
  41382c:	mov    rdx,rcx
  41382f:	add    r8,r10
  413832:	shl    rcx,0x4
  413836:	inc    edx
  413838:	mov    QWORD PTR [rsp+0x10],r8
  41383d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  413842:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  413847:	mov    DWORD PTR [rsp+0x18],edx
  41384b:	jmp    4137bc <flatcc_builder_create_table@@Base+0x10c>
  413850:	mov    WORD PTR [rbx+0xe8],cx
  413857:	jmp    41370a <flatcc_builder_create_table@@Base+0x5a>
  41385c:	lea    rcx,[rip+0x766d]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  413863:	mov    edx,0x287
  413868:	lea    rsi,[rip+0x6c29]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41386f:	lea    rdi,[rip+0x6fb9]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  413876:	call   4031e0 <__assert_fail@plt>
  41387b:	lea    rcx,[rip+0x73ee]        # 41ac70 <_IO_stdin_used@@Base+0xc70>
  413882:	mov    edx,0x4db
  413887:	lea    rsi,[rip+0x6c0a]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41388e:	lea    rdi,[rip+0x7001]        # 41a896 <_IO_stdin_used@@Base+0x896>
  413895:	call   4031e0 <__assert_fail@plt>
  41389a:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  41389f:	lea    rcx,[rip+0x73ca]        # 41ac70 <_IO_stdin_used@@Base+0xc70>
  4138a6:	mov    edx,0x4d5
  4138ab:	lea    rsi,[rip+0x6be6]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4138b2:	lea    rdi,[rip+0x6fcb]        # 41a884 <_IO_stdin_used@@Base+0x884>
  4138b9:	call   4031e0 <__assert_fail@plt>
  4138be:	call   4031c0 <__stack_chk_fail@plt>
  4138c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4138ce:	xchg   ax,ax

00000000004138d0 <flatcc_builder_check_required_field@@Base>:
  4138d0:	endbr64 
  4138d4:	mov    rax,QWORD PTR [rdi+0x30]
  4138d8:	cmp    WORD PTR [rax+0xe],0x3
  4138dd:	jne    4138fa <flatcc_builder_check_required_field@@Base+0x2a>
  4138df:	xor    eax,eax
  4138e1:	cmp    WORD PTR [rdi+0x10],si
  4138e5:	jbe    4138f9 <flatcc_builder_check_required_field@@Base+0x29>
  4138e7:	mov    rax,QWORD PTR [rdi+0x8]
  4138eb:	movzx  edx,si
  4138ee:	cmp    WORD PTR [rax+rdx*2],0x0
  4138f3:	setne  al
  4138f6:	movzx  eax,al
  4138f9:	ret    
  4138fa:	push   rax
  4138fb:	lea    rcx,[rip+0x733e]        # 41ac40 <_IO_stdin_used@@Base+0xc40>
  413902:	mov    edx,0x4f8
  413907:	lea    rsi,[rip+0x6b8a]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41390e:	lea    rdi,[rip+0x6dcb]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  413915:	call   4031e0 <__assert_fail@plt>
  41391a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413920 <flatcc_builder_check_union_field@@Base>:
  413920:	endbr64 
  413924:	mov    rax,QWORD PTR [rdi+0x30]
  413928:	cmp    WORD PTR [rax+0xe],0x3
  41392d:	jne    413989 <flatcc_builder_check_union_field@@Base+0x69>
  41392f:	xor    eax,eax
  413931:	test   si,si
  413934:	je     413966 <flatcc_builder_check_union_field@@Base+0x46>
  413936:	cmp    WORD PTR [rdi+0x10],si
  41393a:	jbe    413966 <flatcc_builder_check_union_field@@Base+0x46>
  41393c:	mov    rcx,QWORD PTR [rdi+0x8]
  413940:	movzx  edx,si
  413943:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  413948:	movzx  ecx,WORD PTR [rcx+rdx*2]
  41394c:	test   ax,ax
  41394f:	je     413980 <flatcc_builder_check_union_field@@Base+0x60>
  413951:	mov    rsi,QWORD PTR [rdi+0x18]
  413955:	movzx  edx,ax
  413958:	xor    eax,eax
  41395a:	test   cx,cx
  41395d:	sete   al
  413960:	cmp    BYTE PTR [rsi+rdx*1],0x0
  413964:	jne    413970 <flatcc_builder_check_union_field@@Base+0x50>
  413966:	ret    
  413967:	nop    WORD PTR [rax+rax*1+0x0]
  413970:	xor    eax,eax
  413972:	test   cx,cx
  413975:	setne  al
  413978:	ret    
  413979:	nop    DWORD PTR [rax+0x0]
  413980:	xor    eax,eax
  413982:	test   cx,cx
  413985:	sete   al
  413988:	ret    
  413989:	push   rax
  41398a:	lea    rcx,[rip+0x726f]        # 41ac00 <_IO_stdin_used@@Base+0xc00>
  413991:	mov    edx,0x4ff
  413996:	lea    rsi,[rip+0x6afb]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41399d:	lea    rdi,[rip+0x6d3c]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  4139a4:	call   4031e0 <__assert_fail@plt>
  4139a9:	nop    DWORD PTR [rax+0x0]

00000000004139b0 <flatcc_builder_check_required@@Base>:
  4139b0:	endbr64 
  4139b4:	mov    rax,QWORD PTR [rdi+0x30]
  4139b8:	cmp    WORD PTR [rax+0xe],0x3
  4139bd:	jne    413a13 <flatcc_builder_check_required@@Base+0x63>
  4139bf:	movzx  ecx,WORD PTR [rdi+0x10]
  4139c3:	xor    eax,eax
  4139c5:	cmp    ecx,edx
  4139c7:	jl     413a12 <flatcc_builder_check_required@@Base+0x62>
  4139c9:	test   edx,edx
  4139cb:	jle    413a03 <flatcc_builder_check_required@@Base+0x53>
  4139cd:	mov    rcx,QWORD PTR [rdi+0x8]
  4139d1:	movzx  edi,WORD PTR [rsi]
  4139d4:	cmp    WORD PTR [rcx+rdi*2],0x0
  4139d9:	je     413a12 <flatcc_builder_check_required@@Base+0x62>
  4139db:	add    rsi,0x2
  4139df:	lea    eax,[rdx-0x1]
  4139e2:	lea    rdx,[rsi+rax*2]
  4139e6:	jmp    4139fe <flatcc_builder_check_required@@Base+0x4e>
  4139e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4139f0:	movzx  eax,WORD PTR [rsi]
  4139f3:	add    rsi,0x2
  4139f7:	cmp    WORD PTR [rcx+rax*2],0x0
  4139fc:	je     413a10 <flatcc_builder_check_required@@Base+0x60>
  4139fe:	cmp    rsi,rdx
  413a01:	jne    4139f0 <flatcc_builder_check_required@@Base+0x40>
  413a03:	mov    eax,0x1
  413a08:	ret    
  413a09:	nop    DWORD PTR [rax+0x0]
  413a10:	xor    eax,eax
  413a12:	ret    
  413a13:	push   rax
  413a14:	lea    rcx,[rip+0x71b5]        # 41abd0 <_IO_stdin_used@@Base+0xbd0>
  413a1b:	mov    edx,0x511
  413a20:	lea    rsi,[rip+0x6a71]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413a27:	lea    rdi,[rip+0x6cb2]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  413a2e:	call   4031e0 <__assert_fail@plt>
  413a33:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  413a3e:	xchg   ax,ax

0000000000413a40 <flatcc_builder_end_table@@Base>:
  413a40:	endbr64 
  413a44:	push   r13
  413a46:	push   r12
  413a48:	push   rbp
  413a49:	push   rbx
  413a4a:	sub    rsp,0x8
  413a4e:	mov    rax,QWORD PTR [rdi+0x30]
  413a52:	cmp    WORD PTR [rax+0xe],0x3
  413a57:	jne    413bad <flatcc_builder_end_table@@Base+0x16d>
  413a5d:	movzx  ebp,WORD PTR [rdi+0x10]
  413a61:	movzx  eax,WORD PTR [rdi+0x20]
  413a65:	lea    ebp,[rbp+rbp*1+0x4]
  413a69:	movzx  ecx,bp
  413a6c:	xor    ecx,DWORD PTR [rdi+0x14]
  413a6f:	mov    rdx,QWORD PTR [rdi+0x8]
  413a73:	imul   ecx,ecx,0x9e3779b1
  413a79:	add    eax,0x4
  413a7c:	mov    WORD PTR [rdx-0x2],ax
  413a80:	movzx  eax,ax
  413a83:	xor    ecx,eax
  413a85:	imul   ecx,ecx,0x9e3779b1
  413a8b:	mov    WORD PTR [rdx-0x4],bp
  413a8f:	lea    r12,[rdx-0x4]
  413a93:	mov    DWORD PTR [rdi+0x14],ecx
  413a96:	movzx  edx,bp
  413a99:	mov    rsi,r12
  413a9c:	mov    rbx,rdi
  413a9f:	call   413350 <flatcc_builder_create_cached_vtable@@Base>
  413aa4:	mov    r13d,eax
  413aa7:	test   eax,eax
  413aa9:	jne    413ac0 <flatcc_builder_end_table@@Base+0x80>
  413aab:	add    rsp,0x8
  413aaf:	pop    rbx
  413ab0:	xor    ebp,ebp
  413ab2:	mov    eax,ebp
  413ab4:	pop    rbp
  413ab5:	pop    r12
  413ab7:	pop    r13
  413ab9:	ret    
  413aba:	nop    WORD PTR [rax+rax*1+0x0]
  413ac0:	movzx  edx,bp
  413ac3:	xor    esi,esi
  413ac5:	mov    rdi,r12
  413ac8:	call   4031f0 <memset@plt>
  413acd:	mov    rax,QWORD PTR [rbx+0x30]
  413ad1:	sub    rsp,0x8
  413ad5:	mov    r8d,DWORD PTR [rax+0x14]
  413ad9:	mov    r9,QWORD PTR [rbx]
  413adc:	add    r8,QWORD PTR [rbx+0x88]
  413ae3:	mov    edx,DWORD PTR [rbx+0x20]
  413ae6:	movzx  ecx,WORD PTR [rbx+0xea]
  413aed:	mov    rsi,QWORD PTR [rbx+0x18]
  413af1:	push   r13
  413af3:	sub    r9,r8
  413af6:	sar    r9,1
  413af9:	mov    rdi,rbx
  413afc:	call   4136b0 <flatcc_builder_create_table@@Base>
  413b01:	mov    ebp,eax
  413b03:	pop    rax
  413b04:	pop    rdx
  413b05:	test   ebp,ebp
  413b07:	je     413aab <flatcc_builder_end_table@@Base+0x6b>
  413b09:	mov    rax,QWORD PTR [rbx+0x30]
  413b0d:	mov    rdi,QWORD PTR [rbx+0x18]
  413b11:	mov    edx,DWORD PTR [rax+0x18]
  413b14:	xor    esi,esi
  413b16:	mov    DWORD PTR [rbx+0x14],edx
  413b19:	movzx  edx,WORD PTR [rax+0x1c]
  413b1d:	mov    WORD PTR [rbx+0x10],dx
  413b21:	mov    edx,DWORD PTR [rax+0x10]
  413b24:	mov    eax,DWORD PTR [rax+0x14]
  413b27:	add    rdx,QWORD PTR [rbx+0x58]
  413b2b:	add    rax,QWORD PTR [rbx+0x88]
  413b32:	mov    QWORD PTR [rbx+0x8],rdx
  413b36:	mov    QWORD PTR [rbx],rax
  413b39:	mov    edx,DWORD PTR [rbx+0x20]
  413b3c:	call   4031f0 <memset@plt>
  413b41:	mov    rax,QWORD PTR [rbx+0x30]
  413b45:	mov    edi,DWORD PTR [rbx+0x70]
  413b48:	mov    edx,DWORD PTR [rax+0x8]
  413b4b:	mov    esi,DWORD PTR [rax]
  413b4d:	mov    ecx,DWORD PTR [rax+0x4]
  413b50:	mov    DWORD PTR [rbx+0x20],edx
  413b53:	mov    rdx,rsi
  413b56:	sub    edi,edx
  413b58:	mov    DWORD PTR [rbx+0x28],esi
  413b5b:	mov    edx,edi
  413b5d:	add    rsi,QWORD PTR [rbx+0x68]
  413b61:	cmp    ecx,edi
  413b63:	cmovb  edx,ecx
  413b66:	mov    QWORD PTR [rbx+0x18],rsi
  413b6a:	mov    DWORD PTR [rbx+0x24],edx
  413b6d:	movzx  edx,WORD PTR [rbx+0xea]
  413b74:	mov    DWORD PTR [rax+0x4],ecx
  413b77:	cmp    dx,WORD PTR [rbx+0xe8]
  413b7e:	jbe    413b87 <flatcc_builder_end_table@@Base+0x147>
  413b80:	mov    WORD PTR [rbx+0xe8],dx
  413b87:	movzx  edx,WORD PTR [rax+0xc]
  413b8b:	dec    DWORD PTR [rbx+0x104]
  413b91:	sub    rax,0x24
  413b95:	mov    QWORD PTR [rbx+0x30],rax
  413b99:	mov    WORD PTR [rbx+0xea],dx
  413ba0:	add    rsp,0x8
  413ba4:	mov    eax,ebp
  413ba6:	pop    rbx
  413ba7:	pop    rbp
  413ba8:	pop    r12
  413baa:	pop    r13
  413bac:	ret    
  413bad:	lea    rcx,[rip+0x6ffc]        # 41abb0 <_IO_stdin_used@@Base+0xbb0>
  413bb4:	mov    edx,0x525
  413bb9:	lea    rsi,[rip+0x68d8]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413bc0:	lea    rdi,[rip+0x6b19]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  413bc7:	call   4031e0 <__assert_fail@plt>
  413bcc:	nop    DWORD PTR [rax+0x0]

0000000000413bd0 <flatcc_builder_create_vector@@Base>:
  413bd0:	endbr64 
  413bd4:	push   rbp
  413bd5:	push   rbx
  413bd6:	sub    rsp,0xb8
  413bdd:	mov    rax,QWORD PTR fs:0x28
  413be6:	mov    QWORD PTR [rsp+0xa8],rax
  413bee:	xor    eax,eax
  413bf0:	cmp    rdx,r9
  413bf3:	ja     413d34 <flatcc_builder_create_vector@@Base+0x164>
  413bf9:	cmp    r8w,0x4
  413bfe:	mov    eax,0x4
  413c03:	cmovb  r8d,eax
  413c07:	mov    rbx,rdi
  413c0a:	movzx  edi,r8w
  413c0e:	cmp    r8w,WORD PTR [rbx+0xe8]
  413c16:	jbe    413c20 <flatcc_builder_create_vector@@Base+0x50>
  413c18:	mov    WORD PTR [rbx+0xe8],r8w
  413c20:	imul   ecx,edx
  413c23:	mov    DWORD PTR [rsp+0xc],edx
  413c27:	mov    edx,DWORD PTR [rbx+0xf0]
  413c2d:	dec    edi
  413c2f:	mov    eax,edx
  413c31:	sub    eax,ecx
  413c33:	and    eax,edi
  413c35:	lea    rdi,[rsp+0xc]
  413c3a:	mov    QWORD PTR [rsp+0x10],0x4
  413c43:	mov    QWORD PTR [rsp+0x20],rdi
  413c48:	mov    QWORD PTR [rsp+0x28],0x4
  413c51:	mov    DWORD PTR [rsp+0x18],0x1
  413c59:	mov    r8d,0x4
  413c5f:	test   ecx,ecx
  413c61:	je     413c7e <flatcc_builder_create_vector@@Base+0xae>
  413c63:	lea    r8,[rcx+0x4]
  413c67:	mov    QWORD PTR [rsp+0x10],r8
  413c6c:	mov    QWORD PTR [rsp+0x30],rsi
  413c71:	mov    QWORD PTR [rsp+0x38],rcx
  413c76:	mov    DWORD PTR [rsp+0x18],0x2
  413c7e:	test   eax,eax
  413c80:	jne    413ce0 <flatcc_builder_create_vector@@Base+0x110>
  413c82:	mov    ebp,edx
  413c84:	movabs rax,0x10000000f
  413c8e:	sub    ebp,r8d
  413c91:	cmp    r8,rax
  413c94:	ja     413d10 <flatcc_builder_create_vector@@Base+0x140>
  413c96:	cmp    edx,ebp
  413c98:	jle    413d10 <flatcc_builder_create_vector@@Base+0x140>
  413c9a:	mov    rdi,QWORD PTR [rbx+0x38]
  413c9e:	mov    edx,DWORD PTR [rsp+0x18]
  413ca2:	lea    rsi,[rsp+0x20]
  413ca7:	mov    ecx,ebp
  413ca9:	call   QWORD PTR [rbx+0x48]
  413cac:	test   eax,eax
  413cae:	jne    413d2f <flatcc_builder_create_vector@@Base+0x15f>
  413cb0:	mov    DWORD PTR [rbx+0xf0],ebp
  413cb6:	mov    eax,ebp
  413cb8:	mov    rbx,QWORD PTR [rsp+0xa8]
  413cc0:	xor    rbx,QWORD PTR fs:0x28
  413cc9:	jne    413d53 <flatcc_builder_create_vector@@Base+0x183>
  413ccf:	add    rsp,0xb8
  413cd6:	pop    rbx
  413cd7:	pop    rbp
  413cd8:	ret    
  413cd9:	nop    DWORD PTR [rax+0x0]
  413ce0:	movsxd rsi,DWORD PTR [rsp+0x18]
  413ce5:	mov    rdi,0x41af80
  413cec:	mov    rcx,rsi
  413cef:	add    r8,rax
  413cf2:	shl    rsi,0x4
  413cf6:	inc    ecx
  413cf8:	mov    QWORD PTR [rsp+0x10],r8
  413cfd:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  413d02:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  413d07:	mov    DWORD PTR [rsp+0x18],ecx
  413d0b:	jmp    413c82 <flatcc_builder_create_vector@@Base+0xb2>
  413d10:	lea    rcx,[rip+0x71b9]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  413d17:	mov    edx,0x287
  413d1c:	lea    rsi,[rip+0x6775]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413d23:	lea    rdi,[rip+0x6b05]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  413d2a:	call   4031e0 <__assert_fail@plt>
  413d2f:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  413d34:	lea    rcx,[rip+0x6e55]        # 41ab90 <_IO_stdin_used@@Base+0xb90>
  413d3b:	mov    edx,0x555
  413d40:	lea    rsi,[rip+0x6751]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413d47:	lea    rdi,[rip+0x6b53]        # 41a8a1 <_IO_stdin_used@@Base+0x8a1>
  413d4e:	call   4031e0 <__assert_fail@plt>
  413d53:	call   4031c0 <__stack_chk_fail@plt>
  413d58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413d60 <flatcc_builder_end_vector@@Base>:
  413d60:	endbr64 
  413d64:	push   rbp
  413d65:	push   rbx
  413d66:	sub    rsp,0x8
  413d6a:	mov    rax,QWORD PTR [rdi+0x30]
  413d6e:	cmp    WORD PTR [rax+0xe],0x4
  413d73:	jne    413e26 <flatcc_builder_end_vector@@Base+0xc6>
  413d79:	mov    ecx,DWORD PTR [rax+0x10]
  413d7c:	mov    edx,DWORD PTR [rax+0x14]
  413d7f:	mov    rsi,QWORD PTR [rdi+0x18]
  413d83:	mov    r9d,DWORD PTR [rax+0x18]
  413d87:	movzx  r8d,WORD PTR [rdi+0xea]
  413d8f:	mov    rbx,rdi
  413d92:	call   413bd0 <flatcc_builder_create_vector@@Base>
  413d97:	mov    ebp,eax
  413d99:	test   eax,eax
  413d9b:	jne    413db0 <flatcc_builder_end_vector@@Base+0x50>
  413d9d:	add    rsp,0x8
  413da1:	pop    rbx
  413da2:	mov    eax,ebp
  413da4:	pop    rbp
  413da5:	ret    
  413da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413db0:	mov    edx,DWORD PTR [rbx+0x20]
  413db3:	mov    rdi,QWORD PTR [rbx+0x18]
  413db7:	xor    esi,esi
  413db9:	call   4031f0 <memset@plt>
  413dbe:	mov    rax,QWORD PTR [rbx+0x30]
  413dc2:	mov    edi,DWORD PTR [rbx+0x70]
  413dc5:	mov    edx,DWORD PTR [rax+0x8]
  413dc8:	mov    esi,DWORD PTR [rax]
  413dca:	mov    ecx,DWORD PTR [rax+0x4]
  413dcd:	mov    DWORD PTR [rbx+0x20],edx
  413dd0:	mov    rdx,rsi
  413dd3:	sub    edi,edx
  413dd5:	mov    DWORD PTR [rbx+0x28],esi
  413dd8:	mov    edx,edi
  413dda:	add    rsi,QWORD PTR [rbx+0x68]
  413dde:	cmp    ecx,edi
  413de0:	cmovb  edx,ecx
  413de3:	mov    QWORD PTR [rbx+0x18],rsi
  413de7:	mov    DWORD PTR [rbx+0x24],edx
  413dea:	movzx  edx,WORD PTR [rbx+0xea]
  413df1:	mov    DWORD PTR [rax+0x4],ecx
  413df4:	cmp    dx,WORD PTR [rbx+0xe8]
  413dfb:	jbe    413e04 <flatcc_builder_end_vector@@Base+0xa4>
  413dfd:	mov    WORD PTR [rbx+0xe8],dx
  413e04:	movzx  edx,WORD PTR [rax+0xc]
  413e08:	dec    DWORD PTR [rbx+0x104]
  413e0e:	sub    rax,0x24
  413e12:	mov    QWORD PTR [rbx+0x30],rax
  413e16:	mov    WORD PTR [rbx+0xea],dx
  413e1d:	add    rsp,0x8
  413e21:	mov    eax,ebp
  413e23:	pop    rbx
  413e24:	pop    rbp
  413e25:	ret    
  413e26:	lea    rcx,[rip+0x6d43]        # 41ab70 <_IO_stdin_used@@Base+0xb70>
  413e2d:	mov    edx,0x578
  413e32:	lea    rsi,[rip+0x665f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413e39:	lea    rdi,[rip+0x6738]        # 41a578 <_IO_stdin_used@@Base+0x578>
  413e40:	call   4031e0 <__assert_fail@plt>
  413e45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000413e50 <flatcc_builder_vector_count@@Base>:
  413e50:	endbr64 
  413e54:	mov    rax,QWORD PTR [rdi+0x30]
  413e58:	mov    eax,DWORD PTR [rax+0x14]
  413e5b:	ret    
  413e5c:	nop    DWORD PTR [rax+0x0]

0000000000413e60 <flatcc_builder_vector_edit@@Base>:
  413e60:	endbr64 
  413e64:	mov    rax,QWORD PTR [rdi+0x18]
  413e68:	ret    
  413e69:	nop    DWORD PTR [rax+0x0]

0000000000413e70 <flatcc_builder_create_offset_vector_direct@@Base>:
  413e70:	endbr64 
  413e74:	xor    ecx,ecx
  413e76:	jmp    411780 <flatcc_builder_default_alloc@@Base+0x450>
  413e7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413e80 <flatcc_builder_end_offset_vector@@Base>:
  413e80:	endbr64 
  413e84:	push   rbp
  413e85:	push   rbx
  413e86:	sub    rsp,0x8
  413e8a:	mov    rax,QWORD PTR [rdi+0x30]
  413e8e:	cmp    WORD PTR [rax+0xe],0x5
  413e93:	jne    413f36 <flatcc_builder_end_offset_vector@@Base+0xb6>
  413e99:	mov    edx,DWORD PTR [rax+0x14]
  413e9c:	mov    rsi,QWORD PTR [rdi+0x18]
  413ea0:	mov    rbx,rdi
  413ea3:	call   413e70 <flatcc_builder_create_offset_vector_direct@@Base>
  413ea8:	mov    ebp,eax
  413eaa:	test   eax,eax
  413eac:	jne    413ec0 <flatcc_builder_end_offset_vector@@Base+0x40>
  413eae:	add    rsp,0x8
  413eb2:	pop    rbx
  413eb3:	mov    eax,ebp
  413eb5:	pop    rbp
  413eb6:	ret    
  413eb7:	nop    WORD PTR [rax+rax*1+0x0]
  413ec0:	mov    edx,DWORD PTR [rbx+0x20]
  413ec3:	mov    rdi,QWORD PTR [rbx+0x18]
  413ec7:	xor    esi,esi
  413ec9:	call   4031f0 <memset@plt>
  413ece:	mov    rax,QWORD PTR [rbx+0x30]
  413ed2:	mov    edi,DWORD PTR [rbx+0x70]
  413ed5:	mov    edx,DWORD PTR [rax+0x8]
  413ed8:	mov    esi,DWORD PTR [rax]
  413eda:	mov    ecx,DWORD PTR [rax+0x4]
  413edd:	mov    DWORD PTR [rbx+0x20],edx
  413ee0:	mov    rdx,rsi
  413ee3:	sub    edi,edx
  413ee5:	mov    DWORD PTR [rbx+0x28],esi
  413ee8:	mov    edx,edi
  413eea:	add    rsi,QWORD PTR [rbx+0x68]
  413eee:	cmp    ecx,edi
  413ef0:	cmovb  edx,ecx
  413ef3:	mov    QWORD PTR [rbx+0x18],rsi
  413ef7:	mov    DWORD PTR [rbx+0x24],edx
  413efa:	movzx  edx,WORD PTR [rbx+0xea]
  413f01:	mov    DWORD PTR [rax+0x4],ecx
  413f04:	cmp    dx,WORD PTR [rbx+0xe8]
  413f0b:	jbe    413f14 <flatcc_builder_end_offset_vector@@Base+0x94>
  413f0d:	mov    WORD PTR [rbx+0xe8],dx
  413f14:	movzx  edx,WORD PTR [rax+0xc]
  413f18:	dec    DWORD PTR [rbx+0x104]
  413f1e:	sub    rax,0x24
  413f22:	mov    QWORD PTR [rbx+0x30],rax
  413f26:	mov    WORD PTR [rbx+0xea],dx
  413f2d:	add    rsp,0x8
  413f31:	mov    eax,ebp
  413f33:	pop    rbx
  413f34:	pop    rbp
  413f35:	ret    
  413f36:	lea    rcx,[rip+0x6be3]        # 41ab20 <_IO_stdin_used@@Base+0xb20>
  413f3d:	mov    edx,0x5c8
  413f42:	lea    rsi,[rip+0x654f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  413f49:	lea    rdi,[rip+0x6698]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  413f50:	call   4031e0 <__assert_fail@plt>
  413f55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000413f60 <flatcc_builder_create_offset_vector@@Base>:
  413f60:	endbr64 
  413f64:	push   r12
  413f66:	mov    r12,rsi
  413f69:	push   rbp
  413f6a:	mov    rbp,rdx
  413f6d:	push   rbx
  413f6e:	mov    rbx,rdi
  413f71:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  413f76:	test   eax,eax
  413f78:	je     413f88 <flatcc_builder_create_offset_vector@@Base+0x28>
  413f7a:	pop    rbx
  413f7b:	pop    rbp
  413f7c:	xor    eax,eax
  413f7e:	pop    r12
  413f80:	ret    
  413f81:	nop    DWORD PTR [rax+0x0]
  413f88:	mov    rsi,rbp
  413f8b:	mov    rdi,rbx
  413f8e:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  413f93:	test   rax,rax
  413f96:	je     413f7a <flatcc_builder_create_offset_vector@@Base+0x1a>
  413f98:	lea    rdx,[rbp*4+0x0]
  413fa0:	mov    rsi,r12
  413fa3:	mov    rdi,rax
  413fa6:	call   403230 <memcpy@plt>
  413fab:	mov    rdi,rbx
  413fae:	pop    rbx
  413faf:	pop    rbp
  413fb0:	pop    r12
  413fb2:	jmp    413e80 <flatcc_builder_end_offset_vector@@Base>
  413fb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413fc0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  413fc0:	endbr64 
  413fc4:	push   rbp
  413fc5:	push   rbx
  413fc6:	sub    rsp,0x8
  413fca:	mov    rax,QWORD PTR [rdi+0x30]
  413fce:	cmp    WORD PTR [rax+0xe],0x5
  413fd3:	jne    414076 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  413fd9:	mov    rcx,rsi
  413fdc:	mov    edx,DWORD PTR [rax+0x14]
  413fdf:	mov    rsi,QWORD PTR [rdi+0x18]
  413fe3:	mov    rbx,rdi
  413fe6:	call   411780 <flatcc_builder_default_alloc@@Base+0x450>
  413feb:	mov    ebp,eax
  413fed:	test   eax,eax
  413fef:	jne    414000 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  413ff1:	add    rsp,0x8
  413ff5:	pop    rbx
  413ff6:	mov    eax,ebp
  413ff8:	pop    rbp
  413ff9:	ret    
  413ffa:	nop    WORD PTR [rax+rax*1+0x0]
  414000:	mov    edx,DWORD PTR [rbx+0x20]
  414003:	mov    rdi,QWORD PTR [rbx+0x18]
  414007:	xor    esi,esi
  414009:	call   4031f0 <memset@plt>
  41400e:	mov    rax,QWORD PTR [rbx+0x30]
  414012:	mov    edi,DWORD PTR [rbx+0x70]
  414015:	mov    edx,DWORD PTR [rax+0x8]
  414018:	mov    esi,DWORD PTR [rax]
  41401a:	mov    ecx,DWORD PTR [rax+0x4]
  41401d:	mov    DWORD PTR [rbx+0x20],edx
  414020:	mov    rdx,rsi
  414023:	sub    edi,edx
  414025:	mov    DWORD PTR [rbx+0x28],esi
  414028:	mov    edx,edi
  41402a:	add    rsi,QWORD PTR [rbx+0x68]
  41402e:	cmp    ecx,edi
  414030:	cmovb  edx,ecx
  414033:	mov    QWORD PTR [rbx+0x18],rsi
  414037:	mov    DWORD PTR [rbx+0x24],edx
  41403a:	movzx  edx,WORD PTR [rbx+0xea]
  414041:	mov    DWORD PTR [rax+0x4],ecx
  414044:	cmp    dx,WORD PTR [rbx+0xe8]
  41404b:	jbe    414054 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  41404d:	mov    WORD PTR [rbx+0xe8],dx
  414054:	movzx  edx,WORD PTR [rax+0xc]
  414058:	dec    DWORD PTR [rbx+0x104]
  41405e:	sub    rax,0x24
  414062:	mov    QWORD PTR [rbx+0x30],rax
  414066:	mov    WORD PTR [rbx+0xea],dx
  41406d:	add    rsp,0x8
  414071:	mov    eax,ebp
  414073:	pop    rbx
  414074:	pop    rbp
  414075:	ret    
  414076:	lea    rcx,[rip+0x6a63]        # 41aae0 <_IO_stdin_used@@Base+0xae0>
  41407d:	mov    edx,0x5d5
  414082:	lea    rsi,[rip+0x640f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414089:	lea    rdi,[rip+0x6558]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  414090:	call   4031e0 <__assert_fail@plt>
  414095:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004140a0 <flatcc_builder_offset_vector_edit@@Base>:
  4140a0:	endbr64 
  4140a4:	mov    rax,QWORD PTR [rdi+0x18]
  4140a8:	ret    
  4140a9:	nop    DWORD PTR [rax+0x0]

00000000004140b0 <flatcc_builder_offset_vector_count@@Base>:
  4140b0:	endbr64 
  4140b4:	mov    rax,QWORD PTR [rdi+0x30]
  4140b8:	mov    eax,DWORD PTR [rax+0x14]
  4140bb:	ret    
  4140bc:	nop    DWORD PTR [rax+0x0]

00000000004140c0 <flatcc_builder_create_union_vector_direct@@Base>:
  4140c0:	endbr64 
  4140c4:	push   r13
  4140c6:	mov    r13,rcx
  4140c9:	push   r12
  4140cb:	mov    r12,rsi
  4140ce:	mov    rcx,r12
  4140d1:	push   rbp
  4140d2:	mov    rsi,rdx
  4140d5:	mov    rdx,r13
  4140d8:	push   rbx
  4140d9:	mov    rbp,rdi
  4140dc:	sub    rsp,0x8
  4140e0:	call   411780 <flatcc_builder_default_alloc@@Base+0x450>
  4140e5:	test   eax,eax
  4140e7:	jne    414100 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  4140e9:	add    rsp,0x8
  4140ed:	pop    rbx
  4140ee:	pop    rbp
  4140ef:	pop    r12
  4140f1:	xor    eax,eax
  4140f3:	pop    r13
  4140f5:	ret    
  4140f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  414100:	mov    rdx,r13
  414103:	mov    rsi,r12
  414106:	mov    rdi,rbp
  414109:	mov    r9d,0xffffffff
  41410f:	mov    r8d,0x1
  414115:	mov    ecx,0x1
  41411a:	mov    ebx,eax
  41411c:	call   413bd0 <flatcc_builder_create_vector@@Base>
  414121:	mov    edx,eax
  414123:	mov    rsi,rbx
  414126:	shl    rsi,0x20
  41412a:	mov    rax,rdx
  41412d:	or     rax,rsi
  414130:	test   edx,edx
  414132:	mov    rdx,rax
  414135:	mov    rax,rsi
  414138:	cmovne rax,rdx
  41413c:	add    rsp,0x8
  414140:	pop    rbx
  414141:	pop    rbp
  414142:	pop    r12
  414144:	pop    r13
  414146:	ret    
  414147:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414150 <flatcc_builder_create_union_vector@@Base>:
  414150:	endbr64 
  414154:	push   r13
  414156:	push   r12
  414158:	mov    r12,rdx
  41415b:	push   rbp
  41415c:	mov    rbp,rsi
  41415f:	push   rbx
  414160:	mov    rbx,rdi
  414163:	sub    rsp,0x8
  414167:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  41416c:	test   eax,eax
  41416e:	je     414180 <flatcc_builder_create_union_vector@@Base+0x30>
  414170:	add    rsp,0x8
  414174:	pop    rbx
  414175:	pop    rbp
  414176:	pop    r12
  414178:	xor    eax,eax
  41417a:	pop    r13
  41417c:	ret    
  41417d:	nop    DWORD PTR [rax]
  414180:	mov    rsi,r12
  414183:	mov    rdi,rbx
  414186:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  41418b:	test   rax,rax
  41418e:	je     414170 <flatcc_builder_create_union_vector@@Base+0x20>
  414190:	mov    r13d,DWORD PTR [rbx+0x20]
  414194:	mov    rax,r13
  414197:	add    eax,r12d
  41419a:	mov    DWORD PTR [rbx+0x20],eax
  41419d:	cmp    eax,DWORD PTR [rbx+0x24]
  4141a0:	jae    414270 <flatcc_builder_create_union_vector@@Base+0x120>
  4141a6:	add    r13,QWORD PTR [rbx+0x18]
  4141aa:	je     414170 <flatcc_builder_create_union_vector@@Base+0x20>
  4141ac:	mov    rdi,rbx
  4141af:	call   4140a0 <flatcc_builder_offset_vector_edit@@Base>
  4141b4:	test   r12,r12
  4141b7:	je     4141d9 <flatcc_builder_create_union_vector@@Base+0x89>
  4141b9:	xor    edi,edi
  4141bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4141c0:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  4141c5:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  4141ca:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  4141ce:	mov    DWORD PTR [rax+rdi*4],ecx
  4141d1:	inc    rdi
  4141d4:	cmp    r12,rdi
  4141d7:	jne    4141c0 <flatcc_builder_create_union_vector@@Base+0x70>
  4141d9:	mov    rcx,r12
  4141dc:	mov    rdx,rax
  4141df:	mov    rsi,r13
  4141e2:	mov    rdi,rbx
  4141e5:	call   4140c0 <flatcc_builder_create_union_vector_direct@@Base>
  4141ea:	mov    edx,DWORD PTR [rbx+0x20]
  4141ed:	mov    rdi,QWORD PTR [rbx+0x18]
  4141f1:	xor    esi,esi
  4141f3:	mov    rbp,rax
  4141f6:	call   4031f0 <memset@plt>
  4141fb:	mov    rax,QWORD PTR [rbx+0x30]
  4141ff:	mov    edx,DWORD PTR [rax+0x8]
  414202:	mov    esi,DWORD PTR [rax]
  414204:	mov    DWORD PTR [rbx+0x20],edx
  414207:	mov    DWORD PTR [rbx+0x28],esi
  41420a:	mov    rdx,rsi
  41420d:	add    rsi,QWORD PTR [rbx+0x68]
  414211:	mov    ecx,DWORD PTR [rax+0x4]
  414214:	mov    QWORD PTR [rbx+0x18],rsi
  414218:	mov    esi,DWORD PTR [rbx+0x70]
  41421b:	sub    esi,edx
  41421d:	mov    edx,esi
  41421f:	cmp    ecx,esi
  414221:	cmovb  edx,ecx
  414224:	mov    DWORD PTR [rbx+0x24],edx
  414227:	movzx  edx,WORD PTR [rbx+0xea]
  41422e:	mov    DWORD PTR [rax+0x4],ecx
  414231:	cmp    dx,WORD PTR [rbx+0xe8]
  414238:	jbe    414241 <flatcc_builder_create_union_vector@@Base+0xf1>
  41423a:	mov    WORD PTR [rbx+0xe8],dx
  414241:	movzx  edx,WORD PTR [rax+0xc]
  414245:	sub    rax,0x24
  414249:	mov    QWORD PTR [rbx+0x30],rax
  41424d:	mov    WORD PTR [rbx+0xea],dx
  414254:	dec    DWORD PTR [rbx+0x104]
  41425a:	add    rsp,0x8
  41425e:	pop    rbx
  41425f:	mov    rax,rbp
  414262:	pop    rbp
  414263:	pop    r12
  414265:	pop    r13
  414267:	ret    
  414268:	nop    DWORD PTR [rax+rax*1+0x0]
  414270:	lea    esi,[rax+0x1]
  414273:	mov    edx,0xfffffffc
  414278:	mov    rdi,rbx
  41427b:	call   4112d0 <test_parse@@Base+0x5e0>
  414280:	test   eax,eax
  414282:	je     4141a6 <flatcc_builder_create_union_vector@@Base+0x56>
  414288:	jmp    414170 <flatcc_builder_create_union_vector@@Base+0x20>
  41428d:	nop    DWORD PTR [rax]

0000000000414290 <flatcc_builder_start_union_vector@@Base>:
  414290:	endbr64 
  414294:	push   rbx
  414295:	mov    esi,0x4
  41429a:	mov    rbx,rdi
  41429d:	call   411660 <flatcc_builder_default_alloc@@Base+0x330>
  4142a2:	test   eax,eax
  4142a4:	jne    4142e0 <flatcc_builder_start_union_vector@@Base+0x50>
  4142a6:	mov    rcx,QWORD PTR [rbx+0x30]
  4142aa:	xor    edx,edx
  4142ac:	mov    QWORD PTR [rcx+0xe],0x80007
  4142b4:	mov    WORD PTR [rcx+0x16],dx
  4142b8:	mov    edx,DWORD PTR [rbx+0x28]
  4142bb:	mov    rsi,rdx
  4142be:	add    rdx,QWORD PTR [rbx+0x68]
  4142c2:	mov    QWORD PTR [rbx+0x18],rdx
  4142c6:	mov    edx,DWORD PTR [rbx+0x70]
  4142c9:	sub    edx,esi
  4142cb:	mov    esi,0xfffffffc
  4142d0:	cmp    edx,esi
  4142d2:	cmova  edx,esi
  4142d5:	mov    DWORD PTR [rbx+0x24],edx
  4142d8:	mov    DWORD PTR [rcx+0x4],esi
  4142db:	pop    rbx
  4142dc:	ret    
  4142dd:	nop    DWORD PTR [rax]
  4142e0:	mov    eax,0xffffffff
  4142e5:	pop    rbx
  4142e6:	ret    
  4142e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004142f0 <flatcc_builder_union_vector_edit@@Base>:
  4142f0:	endbr64 
  4142f4:	mov    rax,QWORD PTR [rdi+0x18]
  4142f8:	ret    
  4142f9:	nop    DWORD PTR [rax+0x0]

0000000000414300 <flatcc_builder_union_vector_count@@Base>:
  414300:	endbr64 
  414304:	mov    rax,QWORD PTR [rdi+0x30]
  414308:	mov    eax,DWORD PTR [rax+0x14]
  41430b:	ret    
  41430c:	nop    DWORD PTR [rax+0x0]

0000000000414310 <flatcc_builder_end_union_vector@@Base>:
  414310:	endbr64 
  414314:	push   r13
  414316:	push   r12
  414318:	push   rbp
  414319:	push   rbx
  41431a:	sub    rsp,0x8
  41431e:	mov    rax,QWORD PTR [rdi+0x30]
  414322:	cmp    WORD PTR [rax+0xe],0x7
  414327:	jne    41444d <flatcc_builder_end_union_vector@@Base+0x13d>
  41432d:	mov    rbx,rdi
  414330:	call   414300 <flatcc_builder_union_vector_count@@Base>
  414335:	mov    ebp,DWORD PTR [rbx+0x20]
  414338:	mov    r12,rax
  41433b:	lea    eax,[rax+rax*4]
  41433e:	add    eax,ebp
  414340:	mov    DWORD PTR [rbx+0x20],eax
  414343:	cmp    eax,DWORD PTR [rbx+0x24]
  414346:	jae    414428 <flatcc_builder_end_union_vector@@Base+0x118>
  41434c:	add    rbp,QWORD PTR [rbx+0x18]
  414350:	je     414440 <flatcc_builder_end_union_vector@@Base+0x130>
  414356:	mov    rdi,rbx
  414359:	lea    r13,[rbp+r12*4+0x0]
  41435e:	call   4142f0 <flatcc_builder_union_vector_edit@@Base>
  414363:	test   r12,r12
  414366:	je     41438c <flatcc_builder_end_union_vector@@Base+0x7c>
  414368:	xor    edi,edi
  41436a:	nop    WORD PTR [rax+rax*1+0x0]
  414370:	movzx  r8d,BYTE PTR [rax+rdi*8]
  414375:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  41437a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  41437f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  414384:	inc    rdi
  414387:	cmp    r12,rdi
  41438a:	jne    414370 <flatcc_builder_end_union_vector@@Base+0x60>
  41438c:	mov    rcx,r12
  41438f:	mov    rdx,rbp
  414392:	mov    rsi,r13
  414395:	mov    rdi,rbx
  414398:	call   4140c0 <flatcc_builder_create_union_vector_direct@@Base>
  41439d:	mov    edx,DWORD PTR [rbx+0x20]
  4143a0:	mov    rdi,QWORD PTR [rbx+0x18]
  4143a4:	xor    esi,esi
  4143a6:	mov    rbp,rax
  4143a9:	call   4031f0 <memset@plt>
  4143ae:	mov    rdx,QWORD PTR [rbx+0x30]
  4143b2:	mov    esi,DWORD PTR [rdx]
  4143b4:	mov    eax,DWORD PTR [rdx+0x8]
  4143b7:	mov    rcx,rsi
  4143ba:	mov    DWORD PTR [rbx+0x28],esi
  4143bd:	add    rsi,QWORD PTR [rbx+0x68]
  4143c1:	mov    DWORD PTR [rbx+0x20],eax
  4143c4:	mov    eax,DWORD PTR [rdx+0x4]
  4143c7:	mov    QWORD PTR [rbx+0x18],rsi
  4143cb:	mov    esi,DWORD PTR [rbx+0x70]
  4143ce:	sub    esi,ecx
  4143d0:	cmp    eax,esi
  4143d2:	mov    ecx,esi
  4143d4:	cmovb  ecx,eax
  4143d7:	mov    DWORD PTR [rbx+0x24],ecx
  4143da:	mov    DWORD PTR [rdx+0x4],eax
  4143dd:	movzx  eax,WORD PTR [rbx+0xea]
  4143e4:	cmp    ax,WORD PTR [rbx+0xe8]
  4143eb:	ja     414418 <flatcc_builder_end_union_vector@@Base+0x108>
  4143ed:	movzx  eax,WORD PTR [rdx+0xc]
  4143f1:	dec    DWORD PTR [rbx+0x104]
  4143f7:	sub    rdx,0x24
  4143fb:	mov    WORD PTR [rbx+0xea],ax
  414402:	mov    QWORD PTR [rbx+0x30],rdx
  414406:	add    rsp,0x8
  41440a:	mov    rax,rbp
  41440d:	pop    rbx
  41440e:	pop    rbp
  41440f:	pop    r12
  414411:	pop    r13
  414413:	ret    
  414414:	nop    DWORD PTR [rax+0x0]
  414418:	mov    WORD PTR [rbx+0xe8],ax
  41441f:	jmp    4143ed <flatcc_builder_end_union_vector@@Base+0xdd>
  414421:	nop    DWORD PTR [rax+0x0]
  414428:	lea    esi,[rax+0x1]
  41442b:	mov    edx,0xfffffffc
  414430:	mov    rdi,rbx
  414433:	call   4112d0 <test_parse@@Base+0x5e0>
  414438:	test   eax,eax
  41443a:	je     41434c <flatcc_builder_end_union_vector@@Base+0x3c>
  414440:	add    rsp,0x8
  414444:	pop    rbx
  414445:	pop    rbp
  414446:	pop    r12
  414448:	xor    eax,eax
  41444a:	pop    r13
  41444c:	ret    
  41444d:	lea    rcx,[rip+0x660c]        # 41aa60 <_IO_stdin_used@@Base+0xa60>
  414454:	mov    edx,0x651
  414459:	lea    rsi,[rip+0x6038]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414460:	lea    rdi,[rip+0x62a9]        # 41a710 <_IO_stdin_used@@Base+0x710>
  414467:	call   4031e0 <__assert_fail@plt>
  41446c:	nop    DWORD PTR [rax+0x0]

0000000000414470 <flatcc_builder_extend_union_vector@@Base>:
  414470:	endbr64 
  414474:	push   rbp
  414475:	mov    edx,esi
  414477:	push   rbx
  414478:	sub    rsp,0x8
  41447c:	mov    rax,QWORD PTR [rdi+0x30]
  414480:	add    edx,DWORD PTR [rax+0x14]
  414483:	jb     4144c5 <flatcc_builder_extend_union_vector@@Base+0x55>
  414485:	cmp    edx,0x1fffffff
  41448b:	ja     4144c5 <flatcc_builder_extend_union_vector@@Base+0x55>
  41448d:	mov    ebp,DWORD PTR [rdi+0x20]
  414490:	mov    DWORD PTR [rax+0x14],edx
  414493:	lea    eax,[rbp+rsi*8+0x0]
  414497:	mov    rbx,rdi
  41449a:	mov    DWORD PTR [rdi+0x20],eax
  41449d:	cmp    eax,DWORD PTR [rdi+0x24]
  4144a0:	jae    4144b0 <flatcc_builder_extend_union_vector@@Base+0x40>
  4144a2:	mov    rax,QWORD PTR [rbx+0x18]
  4144a6:	add    rax,rbp
  4144a9:	add    rsp,0x8
  4144ad:	pop    rbx
  4144ae:	pop    rbp
  4144af:	ret    
  4144b0:	lea    esi,[rax+0x1]
  4144b3:	mov    edx,0xfffffffc
  4144b8:	call   4112d0 <test_parse@@Base+0x5e0>
  4144bd:	test   eax,eax
  4144bf:	je     4144a2 <flatcc_builder_extend_union_vector@@Base+0x32>
  4144c1:	xor    eax,eax
  4144c3:	jmp    4144a9 <flatcc_builder_extend_union_vector@@Base+0x39>
  4144c5:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  4144ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004144d0 <flatcc_builder_truncate_union_vector@@Base>:
  4144d0:	endbr64 
  4144d4:	sub    rsp,0x8
  4144d8:	mov    rax,QWORD PTR [rdi+0x30]
  4144dc:	cmp    WORD PTR [rax+0xe],0x7
  4144e1:	jne    414512 <flatcc_builder_truncate_union_vector@@Base+0x42>
  4144e3:	mov    edx,DWORD PTR [rax+0x14]
  4144e6:	cmp    edx,esi
  4144e8:	jb     414531 <flatcc_builder_truncate_union_vector@@Base+0x61>
  4144ea:	sub    edx,esi
  4144ec:	mov    DWORD PTR [rax+0x14],edx
  4144ef:	imul   esi,DWORD PTR [rax+0x10]
  4144f3:	mov    eax,DWORD PTR [rdi+0x20]
  4144f6:	mov    edx,esi
  4144f8:	sub    eax,esi
  4144fa:	mov    DWORD PTR [rdi+0x20],eax
  4144fd:	add    rax,QWORD PTR [rdi+0x18]
  414501:	mov    rdi,rax
  414504:	xor    esi,esi
  414506:	call   4031f0 <memset@plt>
  41450b:	xor    eax,eax
  41450d:	add    rsp,0x8
  414511:	ret    
  414512:	lea    rcx,[rip+0x6507]        # 41aa20 <_IO_stdin_used@@Base+0xa20>
  414519:	mov    edx,0x681
  41451e:	lea    rsi,[rip+0x5f73]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414525:	lea    rdi,[rip+0x61e4]        # 41a710 <_IO_stdin_used@@Base+0x710>
  41452c:	call   4031e0 <__assert_fail@plt>
  414531:	lea    rcx,[rip+0x64e8]        # 41aa20 <_IO_stdin_used@@Base+0xa20>
  414538:	mov    edx,0x682
  41453d:	lea    rsi,[rip+0x5f54]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414544:	lea    rdi,[rip+0x612d]        # 41a678 <_IO_stdin_used@@Base+0x678>
  41454b:	call   4031e0 <__assert_fail@plt>

0000000000414550 <flatcc_builder_union_vector_push@@Base>:
  414550:	endbr64 
  414554:	push   r12
  414556:	push   rbp
  414557:	push   rbx
  414558:	mov    rdx,QWORD PTR [rdi+0x30]
  41455c:	cmp    WORD PTR [rdx+0xe],0x7
  414561:	jne    4145b8 <flatcc_builder_union_vector_push@@Base+0x68>
  414563:	mov    eax,DWORD PTR [rdx+0x14]
  414566:	cmp    eax,0x1fffffff
  41456b:	je     4145b1 <flatcc_builder_union_vector_push@@Base+0x61>
  41456d:	mov    ebp,DWORD PTR [rdi+0x20]
  414570:	inc    eax
  414572:	mov    DWORD PTR [rdx+0x14],eax
  414575:	lea    edx,[rbp+0x8]
  414578:	mov    rbx,rdi
  41457b:	mov    r12,rsi
  41457e:	mov    DWORD PTR [rdi+0x20],edx
  414581:	cmp    edx,DWORD PTR [rdi+0x24]
  414584:	jae    4145a0 <flatcc_builder_union_vector_push@@Base+0x50>
  414586:	mov    rax,rbp
  414589:	add    rax,QWORD PTR [rbx+0x18]
  41458d:	je     414592 <flatcc_builder_union_vector_push@@Base+0x42>
  41458f:	mov    QWORD PTR [rax],r12
  414592:	pop    rbx
  414593:	pop    rbp
  414594:	pop    r12
  414596:	ret    
  414597:	nop    WORD PTR [rax+rax*1+0x0]
  4145a0:	lea    esi,[rbp+0x9]
  4145a3:	mov    edx,0xfffffffc
  4145a8:	call   4112d0 <test_parse@@Base+0x5e0>
  4145ad:	test   eax,eax
  4145af:	je     414586 <flatcc_builder_union_vector_push@@Base+0x36>
  4145b1:	pop    rbx
  4145b2:	pop    rbp
  4145b3:	xor    eax,eax
  4145b5:	pop    r12
  4145b7:	ret    
  4145b8:	lea    rcx,[rip+0x6421]        # 41a9e0 <_IO_stdin_used@@Base+0x9e0>
  4145bf:	mov    edx,0x68d
  4145c4:	lea    rsi,[rip+0x5ecd]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4145cb:	lea    rdi,[rip+0x613e]        # 41a710 <_IO_stdin_used@@Base+0x710>
  4145d2:	call   4031e0 <__assert_fail@plt>
  4145d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004145e0 <flatcc_builder_append_union_vector@@Base>:
  4145e0:	endbr64 
  4145e4:	push   r13
  4145e6:	push   r12
  4145e8:	push   rbp
  4145e9:	push   rbx
  4145ea:	sub    rsp,0x8
  4145ee:	mov    rax,QWORD PTR [rdi+0x30]
  4145f2:	cmp    WORD PTR [rax+0xe],0x7
  4145f7:	jne    414666 <flatcc_builder_append_union_vector@@Base+0x86>
  4145f9:	mov    ecx,edx
  4145fb:	add    ecx,DWORD PTR [rax+0x14]
  4145fe:	jb     414685 <flatcc_builder_append_union_vector@@Base+0xa5>
  414604:	cmp    ecx,0x1fffffff
  41460a:	ja     414685 <flatcc_builder_append_union_vector@@Base+0xa5>
  41460c:	mov    r12d,DWORD PTR [rdi+0x20]
  414610:	lea    ebx,[rdx*8+0x0]
  414617:	mov    rdx,r12
  41461a:	add    edx,ebx
  41461c:	mov    DWORD PTR [rax+0x14],ecx
  41461f:	mov    rbp,rdi
  414622:	mov    r13,rsi
  414625:	mov    DWORD PTR [rdi+0x20],edx
  414628:	cmp    edx,DWORD PTR [rdi+0x24]
  41462b:	jae    414650 <flatcc_builder_append_union_vector@@Base+0x70>
  41462d:	add    r12,QWORD PTR [rbp+0x18]
  414631:	je     414640 <flatcc_builder_append_union_vector@@Base+0x60>
  414633:	mov    edx,ebx
  414635:	mov    rsi,r13
  414638:	mov    rdi,r12
  41463b:	call   403230 <memcpy@plt>
  414640:	add    rsp,0x8
  414644:	pop    rbx
  414645:	pop    rbp
  414646:	mov    rax,r12
  414649:	pop    r12
  41464b:	pop    r13
  41464d:	ret    
  41464e:	xchg   ax,ax
  414650:	lea    esi,[rdx+0x1]
  414653:	mov    edx,0xfffffffc
  414658:	call   4112d0 <test_parse@@Base+0x5e0>
  41465d:	test   eax,eax
  41465f:	je     41462d <flatcc_builder_append_union_vector@@Base+0x4d>
  414661:	xor    r12d,r12d
  414664:	jmp    414640 <flatcc_builder_append_union_vector@@Base+0x60>
  414666:	lea    rcx,[rip+0x6333]        # 41a9a0 <_IO_stdin_used@@Base+0x9a0>
  41466d:	mov    edx,0x69c
  414672:	lea    rsi,[rip+0x5e1f]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414679:	lea    rdi,[rip+0x6090]        # 41a710 <_IO_stdin_used@@Base+0x710>
  414680:	call   4031e0 <__assert_fail@plt>
  414685:	call   411630 <flatcc_builder_default_alloc@@Base+0x300>
  41468a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414690 <flatcc_builder_create_string@@Base>:
  414690:	endbr64 
  414694:	push   rbp
  414695:	push   rbx
  414696:	sub    rsp,0xb8
  41469d:	mov    rax,QWORD PTR fs:0x28
  4146a6:	mov    QWORD PTR [rsp+0xa8],rax
  4146ae:	xor    eax,eax
  4146b0:	mov    eax,0xffffffff
  4146b5:	cmp    rdx,rax
  4146b8:	ja     414780 <flatcc_builder_create_string@@Base+0xf0>
  4146be:	mov    rbx,rdi
  4146c1:	mov    edi,DWORD PTR [rdi+0xf0]
  4146c7:	lea    rcx,[rsp+0xc]
  4146cc:	lea    eax,[rdi-0x1]
  4146cf:	sub    eax,edx
  4146d1:	and    eax,0x3
  4146d4:	mov    DWORD PTR [rsp+0xc],edx
  4146d8:	inc    eax
  4146da:	mov    QWORD PTR [rsp+0x20],rcx
  4146df:	mov    QWORD PTR [rsp+0x28],0x4
  4146e8:	test   rdx,rdx
  4146eb:	jne    414760 <flatcc_builder_create_string@@Base+0xd0>
  4146ed:	mov    edx,0x2
  4146f2:	mov    ecx,0x1
  4146f7:	mov    r8d,0x4
  4146fd:	add    r8,rax
  414700:	mov    rsi,0x41af80
  414707:	mov    ebp,edi
  414709:	shl    rcx,0x4
  41470d:	sub    ebp,r8d
  414710:	mov    QWORD PTR [rsp+0x10],r8
  414715:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  41471a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  41471f:	mov    DWORD PTR [rsp+0x18],edx
  414723:	cmp    edi,ebp
  414725:	jle    414784 <flatcc_builder_create_string@@Base+0xf4>
  414727:	mov    rdi,QWORD PTR [rbx+0x38]
  41472b:	lea    rsi,[rsp+0x20]
  414730:	mov    ecx,ebp
  414732:	call   QWORD PTR [rbx+0x48]
  414735:	test   eax,eax
  414737:	jne    4147a8 <flatcc_builder_create_string@@Base+0x118>
  414739:	mov    DWORD PTR [rbx+0xf0],ebp
  41473f:	mov    rbx,QWORD PTR [rsp+0xa8]
  414747:	xor    rbx,QWORD PTR fs:0x28
  414750:	mov    eax,ebp
  414752:	jne    4147a3 <flatcc_builder_create_string@@Base+0x113>
  414754:	add    rsp,0xb8
  41475b:	pop    rbx
  41475c:	pop    rbp
  41475d:	ret    
  41475e:	xchg   ax,ax
  414760:	lea    r8,[rdx+0x4]
  414764:	mov    QWORD PTR [rsp+0x38],rdx
  414769:	mov    QWORD PTR [rsp+0x30],rsi
  41476e:	mov    edx,0x3
  414773:	mov    ecx,0x2
  414778:	jmp    4146fd <flatcc_builder_create_string@@Base+0x6d>
  41477d:	nop    DWORD PTR [rax]
  414780:	xor    ebp,ebp
  414782:	jmp    41473f <flatcc_builder_create_string@@Base+0xaf>
  414784:	lea    rcx,[rip+0x6745]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  41478b:	mov    edx,0x287
  414790:	lea    rsi,[rip+0x5d01]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414797:	lea    rdi,[rip+0x6091]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  41479e:	call   4031e0 <__assert_fail@plt>
  4147a3:	call   4031c0 <__stack_chk_fail@plt>
  4147a8:	call   411600 <flatcc_builder_default_alloc@@Base+0x2d0>
  4147ad:	nop    DWORD PTR [rax]

00000000004147b0 <flatcc_builder_create_string_str@@Base>:
  4147b0:	endbr64 
  4147b4:	push   rbp
  4147b5:	mov    rbp,rdi
  4147b8:	mov    rdi,rsi
  4147bb:	push   rbx
  4147bc:	mov    rbx,rsi
  4147bf:	sub    rsp,0x8
  4147c3:	call   4031b0 <strlen@plt>
  4147c8:	add    rsp,0x8
  4147cc:	mov    rsi,rbx
  4147cf:	pop    rbx
  4147d0:	mov    rdi,rbp
  4147d3:	mov    rdx,rax
  4147d6:	pop    rbp
  4147d7:	jmp    414690 <flatcc_builder_create_string@@Base>
  4147dc:	nop    DWORD PTR [rax+0x0]

00000000004147e0 <flatcc_builder_create_string_strn@@Base>:
  4147e0:	endbr64 
  4147e4:	push   r12
  4147e6:	mov    r12,rdi
  4147e9:	push   rbp
  4147ea:	mov    rbp,rsi
  4147ed:	mov    rdi,rbp
  4147f0:	push   rbx
  4147f1:	xor    esi,esi
  4147f3:	mov    rbx,rdx
  4147f6:	call   403200 <memchr@plt>
  4147fb:	mov    rdx,rax
  4147fe:	sub    rdx,rbp
  414801:	test   rax,rax
  414804:	cmovne rbx,rdx
  414808:	mov    rsi,rbp
  41480b:	mov    rdx,rbx
  41480e:	pop    rbx
  41480f:	pop    rbp
  414810:	mov    rdi,r12
  414813:	pop    r12
  414815:	jmp    414690 <flatcc_builder_create_string@@Base>
  41481a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414820 <flatcc_builder_end_string@@Base>:
  414820:	endbr64 
  414824:	push   rbp
  414825:	push   rbx
  414826:	sub    rsp,0x8
  41482a:	mov    rax,QWORD PTR [rdi+0x30]
  41482e:	cmp    WORD PTR [rax+0xe],0x6
  414833:	jne    4148f5 <flatcc_builder_end_string@@Base+0xd5>
  414839:	mov    edx,DWORD PTR [rdi+0x20]
  41483c:	mov    rbx,rdi
  41483f:	cmp    DWORD PTR [rax+0x14],edx
  414842:	jne    4148d6 <flatcc_builder_end_string@@Base+0xb6>
  414848:	mov    rsi,QWORD PTR [rdi+0x18]
  41484c:	call   414690 <flatcc_builder_create_string@@Base>
  414851:	mov    ebp,eax
  414853:	test   eax,eax
  414855:	jne    414860 <flatcc_builder_end_string@@Base+0x40>
  414857:	add    rsp,0x8
  41485b:	pop    rbx
  41485c:	mov    eax,ebp
  41485e:	pop    rbp
  41485f:	ret    
  414860:	mov    edx,DWORD PTR [rbx+0x20]
  414863:	mov    rdi,QWORD PTR [rbx+0x18]
  414867:	xor    esi,esi
  414869:	call   4031f0 <memset@plt>
  41486e:	mov    rax,QWORD PTR [rbx+0x30]
  414872:	mov    edi,DWORD PTR [rbx+0x70]
  414875:	mov    edx,DWORD PTR [rax+0x8]
  414878:	mov    esi,DWORD PTR [rax]
  41487a:	mov    ecx,DWORD PTR [rax+0x4]
  41487d:	mov    DWORD PTR [rbx+0x20],edx
  414880:	mov    rdx,rsi
  414883:	sub    edi,edx
  414885:	mov    DWORD PTR [rbx+0x28],esi
  414888:	mov    edx,edi
  41488a:	add    rsi,QWORD PTR [rbx+0x68]
  41488e:	cmp    ecx,edi
  414890:	cmovb  edx,ecx
  414893:	mov    QWORD PTR [rbx+0x18],rsi
  414897:	mov    DWORD PTR [rbx+0x24],edx
  41489a:	movzx  edx,WORD PTR [rbx+0xea]
  4148a1:	mov    DWORD PTR [rax+0x4],ecx
  4148a4:	cmp    dx,WORD PTR [rbx+0xe8]
  4148ab:	jbe    4148b4 <flatcc_builder_end_string@@Base+0x94>
  4148ad:	mov    WORD PTR [rbx+0xe8],dx
  4148b4:	movzx  edx,WORD PTR [rax+0xc]
  4148b8:	dec    DWORD PTR [rbx+0x104]
  4148be:	sub    rax,0x24
  4148c2:	mov    QWORD PTR [rbx+0x30],rax
  4148c6:	mov    WORD PTR [rbx+0xea],dx
  4148cd:	add    rsp,0x8
  4148d1:	mov    eax,ebp
  4148d3:	pop    rbx
  4148d4:	pop    rbp
  4148d5:	ret    
  4148d6:	lea    rcx,[rip+0x60a3]        # 41a980 <_IO_stdin_used@@Base+0x980>
  4148dd:	mov    edx,0x6c5
  4148e2:	lea    rsi,[rip+0x5baf]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4148e9:	lea    rdi,[rip+0x5e58]        # 41a748 <_IO_stdin_used@@Base+0x748>
  4148f0:	call   4031e0 <__assert_fail@plt>
  4148f5:	lea    rcx,[rip+0x6084]        # 41a980 <_IO_stdin_used@@Base+0x980>
  4148fc:	mov    edx,0x6c4
  414901:	lea    rsi,[rip+0x5b90]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414908:	lea    rdi,[rip+0x5d11]        # 41a620 <_IO_stdin_used@@Base+0x620>
  41490f:	call   4031e0 <__assert_fail@plt>
  414914:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41491f:	nop

0000000000414920 <flatcc_builder_string_edit@@Base>:
  414920:	endbr64 
  414924:	mov    rax,QWORD PTR [rdi+0x18]
  414928:	ret    
  414929:	nop    DWORD PTR [rax+0x0]

0000000000414930 <flatcc_builder_string_len@@Base>:
  414930:	endbr64 
  414934:	mov    rax,QWORD PTR [rdi+0x30]
  414938:	mov    eax,DWORD PTR [rax+0x14]
  41493b:	ret    
  41493c:	nop    DWORD PTR [rax+0x0]

0000000000414940 <flatcc_builder_table_add@@Base>:
  414940:	endbr64 
  414944:	push   r13
  414946:	push   r12
  414948:	push   rbp
  414949:	push   rbx
  41494a:	sub    rsp,0x8
  41494e:	mov    rax,QWORD PTR [rdi+0x30]
  414952:	cmp    WORD PTR [rax+0xe],0x3
  414957:	jne    414a24 <flatcc_builder_table_add@@Base+0xe4>
  41495d:	mov    r12d,esi
  414960:	cmp    esi,0x7ffc
  414966:	ja     414a62 <flatcc_builder_table_add@@Base+0x122>
  41496c:	mov    rbx,rdi
  41496f:	cmp    WORD PTR [rdi+0xea],cx
  414976:	jb     4149e0 <flatcc_builder_table_add@@Base+0xa0>
  414978:	movsxd r13,r12d
  41497b:	mov    rsi,QWORD PTR [rbx+0x8]
  41497f:	add    r13,r13
  414982:	add    rsi,r13
  414985:	cmp    WORD PTR [rsi],0x0
  414989:	jne    414a43 <flatcc_builder_table_add@@Base+0x103>
  41498f:	mov    eax,DWORD PTR [rbx+0x14]
  414992:	movzx  ecx,cx
  414995:	xor    eax,r12d
  414998:	imul   eax,eax,0x9e3779b1
  41499e:	xor    eax,edx
  4149a0:	imul   eax,eax,0x9e3779b1
  4149a6:	mov    DWORD PTR [rbx+0x14],eax
  4149a9:	mov    eax,DWORD PTR [rbx+0x20]
  4149ac:	lea    ebp,[rcx+rax*1-0x1]
  4149b0:	neg    ecx
  4149b2:	and    ebp,ecx
  4149b4:	add    edx,ebp
  4149b6:	mov    DWORD PTR [rbx+0x20],edx
  4149b9:	cmp    edx,DWORD PTR [rbx+0x24]
  4149bc:	jae    414a00 <flatcc_builder_table_add@@Base+0xc0>
  4149be:	lea    eax,[rbp+0x4]
  4149c1:	mov    WORD PTR [rsi],ax
  4149c4:	cmp    r12w,WORD PTR [rbx+0x10]
  4149c9:	jae    4149f0 <flatcc_builder_table_add@@Base+0xb0>
  4149cb:	mov    eax,ebp
  4149cd:	add    rax,QWORD PTR [rbx+0x18]
  4149d1:	add    rsp,0x8
  4149d5:	pop    rbx
  4149d6:	pop    rbp
  4149d7:	pop    r12
  4149d9:	pop    r13
  4149db:	ret    
  4149dc:	nop    DWORD PTR [rax+0x0]
  4149e0:	mov    WORD PTR [rdi+0xea],cx
  4149e7:	jmp    414978 <flatcc_builder_table_add@@Base+0x38>
  4149e9:	nop    DWORD PTR [rax+0x0]
  4149f0:	inc    r12d
  4149f3:	mov    WORD PTR [rbx+0x10],r12w
  4149f8:	jmp    4149cb <flatcc_builder_table_add@@Base+0x8b>
  4149fa:	nop    WORD PTR [rax+rax*1+0x0]
  414a00:	lea    esi,[rdx+0x1]
  414a03:	mov    rdi,rbx
  414a06:	mov    edx,0xfffc
  414a0b:	call   4112d0 <test_parse@@Base+0x5e0>
  414a10:	test   eax,eax
  414a12:	jne    414a20 <flatcc_builder_table_add@@Base+0xe0>
  414a14:	mov    rsi,QWORD PTR [rbx+0x8]
  414a18:	add    rsi,r13
  414a1b:	jmp    4149be <flatcc_builder_table_add@@Base+0x7e>
  414a1d:	nop    DWORD PTR [rax]
  414a20:	xor    eax,eax
  414a22:	jmp    4149d1 <flatcc_builder_table_add@@Base+0x91>
  414a24:	lea    rcx,[rip+0x5f35]        # 41a960 <_IO_stdin_used@@Base+0x960>
  414a2b:	mov    edx,0x6ed
  414a30:	lea    rsi,[rip+0x5a61]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414a37:	lea    rdi,[rip+0x5ca2]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  414a3e:	call   4031e0 <__assert_fail@plt>
  414a43:	lea    rcx,[rip+0x5f16]        # 41a960 <_IO_stdin_used@@Base+0x960>
  414a4a:	mov    edx,0x6f8
  414a4f:	lea    rsi,[rip+0x5a42]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414a56:	lea    rdi,[rip+0x5dd2]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  414a5d:	call   4031e0 <__assert_fail@plt>
  414a62:	lea    rcx,[rip+0x5ef7]        # 41a960 <_IO_stdin_used@@Base+0x960>
  414a69:	mov    edx,0x6ee
  414a6e:	lea    rsi,[rip+0x5a23]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414a75:	lea    rdi,[rip+0x5cf4]        # 41a770 <_IO_stdin_used@@Base+0x770>
  414a7c:	call   4031e0 <__assert_fail@plt>
  414a81:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414a8c:	nop    DWORD PTR [rax+0x0]

0000000000414a90 <flatcc_builder_table_edit@@Base>:
  414a90:	endbr64 
  414a94:	mov    rax,QWORD PTR [rdi+0x30]
  414a98:	cmp    WORD PTR [rax+0xe],0x3
  414a9d:	jne    414aaa <flatcc_builder_table_edit@@Base+0x1a>
  414a9f:	mov    eax,DWORD PTR [rdi+0x20]
  414aa2:	sub    rax,rsi
  414aa5:	add    rax,QWORD PTR [rdi+0x18]
  414aa9:	ret    
  414aaa:	push   rax
  414aab:	lea    rcx,[rip+0x5e8e]        # 41a940 <_IO_stdin_used@@Base+0x940>
  414ab2:	mov    edx,0x702
  414ab7:	lea    rsi,[rip+0x59da]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414abe:	lea    rdi,[rip+0x5c1b]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  414ac5:	call   4031e0 <__assert_fail@plt>
  414aca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414ad0 <flatcc_builder_table_add_copy@@Base>:
  414ad0:	endbr64 
  414ad4:	push   rbp
  414ad5:	mov    rbp,rdx
  414ad8:	push   rbx
  414ad9:	mov    rbx,rcx
  414adc:	mov    rdx,rbx
  414adf:	movzx  ecx,r8w
  414ae3:	sub    rsp,0x8
  414ae7:	call   414940 <flatcc_builder_table_add@@Base>
  414aec:	mov    rcx,rax
  414aef:	test   rax,rax
  414af2:	je     414b05 <flatcc_builder_table_add_copy@@Base+0x35>
  414af4:	mov    rdx,rbx
  414af7:	mov    rsi,rbp
  414afa:	mov    rdi,rax
  414afd:	call   403230 <memcpy@plt>
  414b02:	mov    rcx,rax
  414b05:	add    rsp,0x8
  414b09:	pop    rbx
  414b0a:	mov    rax,rcx
  414b0d:	pop    rbp
  414b0e:	ret    
  414b0f:	nop

0000000000414b10 <flatcc_builder_table_add_offset@@Base>:
  414b10:	endbr64 
  414b14:	push   r13
  414b16:	push   r12
  414b18:	push   rbp
  414b19:	push   rbx
  414b1a:	sub    rsp,0x8
  414b1e:	mov    rax,QWORD PTR [rdi+0x30]
  414b22:	cmp    WORD PTR [rax+0xe],0x3
  414b27:	jne    414be4 <flatcc_builder_table_add_offset@@Base+0xd4>
  414b2d:	mov    r12d,esi
  414b30:	cmp    esi,0x7ffc
  414b36:	ja     414c22 <flatcc_builder_table_add_offset@@Base+0x112>
  414b3c:	movsxd r13,esi
  414b3f:	mov    rdx,QWORD PTR [rdi+0x8]
  414b43:	add    r13,r13
  414b46:	add    rdx,r13
  414b49:	cmp    WORD PTR [rdx],0x0
  414b4d:	mov    rbx,rdi
  414b50:	jne    414c03 <flatcc_builder_table_add_offset@@Base+0xf3>
  414b56:	mov    eax,DWORD PTR [rdi+0x14]
  414b59:	xor    eax,esi
  414b5b:	imul   eax,eax,0x9e3779b1
  414b61:	xor    eax,0x4
  414b64:	imul   eax,eax,0x9e3779b1
  414b6a:	mov    DWORD PTR [rdi+0x14],eax
  414b6d:	mov    eax,DWORD PTR [rdi+0x20]
  414b70:	lea    ebp,[rax+0x3]
  414b73:	and    ebp,0xfffffffc
  414b76:	lea    esi,[rbp+0x4]
  414b79:	mov    DWORD PTR [rdi+0x20],esi
  414b7c:	cmp    esi,DWORD PTR [rdi+0x24]
  414b7f:	ja     414bc0 <flatcc_builder_table_add_offset@@Base+0xb0>
  414b81:	lea    eax,[rbp+0x4]
  414b84:	mov    WORD PTR [rdx],ax
  414b87:	cmp    r12w,WORD PTR [rbx+0x10]
  414b8c:	jae    414bb0 <flatcc_builder_table_add_offset@@Base+0xa0>
  414b8e:	mov    rax,QWORD PTR [rbx]
  414b91:	lea    rdx,[rax+0x2]
  414b95:	mov    QWORD PTR [rbx],rdx
  414b98:	mov    WORD PTR [rax],bp
  414b9b:	mov    eax,ebp
  414b9d:	add    rax,QWORD PTR [rbx+0x18]
  414ba1:	add    rsp,0x8
  414ba5:	pop    rbx
  414ba6:	pop    rbp
  414ba7:	pop    r12
  414ba9:	pop    r13
  414bab:	ret    
  414bac:	nop    DWORD PTR [rax+0x0]
  414bb0:	lea    esi,[r12+0x1]
  414bb5:	mov    WORD PTR [rbx+0x10],si
  414bb9:	jmp    414b8e <flatcc_builder_table_add_offset@@Base+0x7e>
  414bbb:	nop    DWORD PTR [rax+rax*1+0x0]
  414bc0:	mov    edx,0xfffc
  414bc5:	call   4112d0 <test_parse@@Base+0x5e0>
  414bca:	test   eax,eax
  414bcc:	jne    414be0 <flatcc_builder_table_add_offset@@Base+0xd0>
  414bce:	mov    rdx,QWORD PTR [rbx+0x8]
  414bd2:	add    rdx,r13
  414bd5:	jmp    414b81 <flatcc_builder_table_add_offset@@Base+0x71>
  414bd7:	nop    WORD PTR [rax+rax*1+0x0]
  414be0:	xor    eax,eax
  414be2:	jmp    414ba1 <flatcc_builder_table_add_offset@@Base+0x91>
  414be4:	lea    rcx,[rip+0x5d35]        # 41a920 <_IO_stdin_used@@Base+0x920>
  414beb:	mov    edx,0x713
  414bf0:	lea    rsi,[rip+0x58a1]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414bf7:	lea    rdi,[rip+0x5ae2]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  414bfe:	call   4031e0 <__assert_fail@plt>
  414c03:	lea    rcx,[rip+0x5d16]        # 41a920 <_IO_stdin_used@@Base+0x920>
  414c0a:	mov    edx,0x71b
  414c0f:	lea    rsi,[rip+0x5882]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414c16:	lea    rdi,[rip+0x5c12]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  414c1d:	call   4031e0 <__assert_fail@plt>
  414c22:	lea    rcx,[rip+0x5cf7]        # 41a920 <_IO_stdin_used@@Base+0x920>
  414c29:	mov    edx,0x714
  414c2e:	lea    rsi,[rip+0x5863]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414c35:	lea    rdi,[rip+0x5b34]        # 41a770 <_IO_stdin_used@@Base+0x770>
  414c3c:	call   4031e0 <__assert_fail@plt>
  414c41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414c4c:	nop    DWORD PTR [rax+0x0]

0000000000414c50 <flatcc_builder_table_add_union@@Base>:
  414c50:	endbr64 
  414c54:	push   r13
  414c56:	mov    r13,rdx
  414c59:	sar    r13,0x20
  414c5d:	push   r12
  414c5f:	push   rbp
  414c60:	push   rbx
  414c61:	sub    rsp,0x8
  414c65:	mov    rax,QWORD PTR [rdi+0x30]
  414c69:	cmp    WORD PTR [rax+0xe],0x3
  414c6e:	jne    414ce4 <flatcc_builder_table_add_union@@Base+0x94>
  414c70:	mov    r12,rdi
  414c73:	mov    ebx,esi
  414c75:	mov    rbp,rdx
  414c78:	test   dl,dl
  414c7a:	je     414cc0 <flatcc_builder_table_add_union@@Base+0x70>
  414c7c:	test   r13d,r13d
  414c7f:	je     414c92 <flatcc_builder_table_add_union@@Base+0x42>
  414c81:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  414c86:	test   rax,rax
  414c89:	je     414d22 <flatcc_builder_table_add_union@@Base+0xd2>
  414c8f:	mov    DWORD PTR [rax],r13d
  414c92:	lea    esi,[rbx-0x1]
  414c95:	mov    ecx,0x1
  414c9a:	mov    edx,0x1
  414c9f:	mov    rdi,r12
  414ca2:	call   414940 <flatcc_builder_table_add@@Base>
  414ca7:	test   rax,rax
  414caa:	je     414d03 <flatcc_builder_table_add_union@@Base+0xb3>
  414cac:	mov    BYTE PTR [rax],bpl
  414caf:	add    rsp,0x8
  414cb3:	xor    eax,eax
  414cb5:	pop    rbx
  414cb6:	pop    rbp
  414cb7:	pop    r12
  414cb9:	pop    r13
  414cbb:	ret    
  414cbc:	nop    DWORD PTR [rax+0x0]
  414cc0:	test   r13d,r13d
  414cc3:	je     414c92 <flatcc_builder_table_add_union@@Base+0x42>
  414cc5:	lea    rcx,[rip+0x5de4]        # 41aab0 <_IO_stdin_used@@Base+0xab0>
  414ccc:	mov    edx,0x5ef
  414cd1:	lea    rsi,[rip+0x57c0]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414cd8:	lea    rdi,[rip+0x5ad9]        # 41a7b8 <_IO_stdin_used@@Base+0x7b8>
  414cdf:	call   4031e0 <__assert_fail@plt>
  414ce4:	lea    rcx,[rip+0x5dc5]        # 41aab0 <_IO_stdin_used@@Base+0xab0>
  414ceb:	mov    edx,0x5ee
  414cf0:	lea    rsi,[rip+0x57a1]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414cf7:	lea    rdi,[rip+0x59e2]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  414cfe:	call   4031e0 <__assert_fail@plt>
  414d03:	lea    rcx,[rip+0x5da6]        # 41aab0 <_IO_stdin_used@@Base+0xab0>
  414d0a:	mov    edx,0x5f6
  414d0f:	lea    rsi,[rip+0x5782]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414d16:	lea    rdi,[rip+0x5ba1]        # 41a8be <_IO_stdin_used@@Base+0x8be>
  414d1d:	call   4031e0 <__assert_fail@plt>
  414d22:	lea    rcx,[rip+0x5d87]        # 41aab0 <_IO_stdin_used@@Base+0xab0>
  414d29:	mov    edx,0x5f2
  414d2e:	lea    rsi,[rip+0x5763]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414d35:	lea    rdi,[rip+0x5b78]        # 41a8b4 <_IO_stdin_used@@Base+0x8b4>
  414d3c:	call   4031e0 <__assert_fail@plt>
  414d41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414d4c:	nop    DWORD PTR [rax+0x0]

0000000000414d50 <flatcc_builder_table_add_union_vector@@Base>:
  414d50:	endbr64 
  414d54:	push   r12
  414d56:	push   rbp
  414d57:	mov    rbp,rdx
  414d5a:	sar    rbp,0x20
  414d5e:	push   rbx
  414d5f:	sub    rsp,0x10
  414d63:	mov    rcx,QWORD PTR [rdi+0x30]
  414d67:	cmp    WORD PTR [rcx+0xe],0x3
  414d6c:	jne    414de1 <flatcc_builder_table_add_union_vector@@Base+0x91>
  414d6e:	test   ebp,ebp
  414d70:	sete   cl
  414d73:	test   edx,edx
  414d75:	mov    r12d,esi
  414d78:	sete   sil
  414d7c:	cmp    sil,cl
  414d7f:	je     414da0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  414d81:	test   edx,edx
  414d83:	setne  al
  414d86:	cmp    cl,al
  414d88:	je     414e00 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  414d8a:	mov    eax,0xffffffff
  414d8f:	add    rsp,0x10
  414d93:	pop    rbx
  414d94:	pop    rbp
  414d95:	pop    r12
  414d97:	ret    
  414d98:	nop    DWORD PTR [rax+rax*1+0x0]
  414da0:	mov    eax,edx
  414da2:	test   edx,edx
  414da4:	je     414d8f <flatcc_builder_table_add_union_vector@@Base+0x3f>
  414da6:	lea    esi,[r12-0x1]
  414dab:	mov    QWORD PTR [rsp+0x8],rdx
  414db0:	mov    rbx,rdi
  414db3:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  414db8:	test   rax,rax
  414dbb:	mov    rdx,QWORD PTR [rsp+0x8]
  414dc0:	je     414e3e <flatcc_builder_table_add_union_vector@@Base+0xee>
  414dc2:	mov    DWORD PTR [rax],edx
  414dc4:	mov    esi,r12d
  414dc7:	mov    rdi,rbx
  414dca:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  414dcf:	test   rax,rax
  414dd2:	je     414e1f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  414dd4:	mov    DWORD PTR [rax],ebp
  414dd6:	add    rsp,0x10
  414dda:	xor    eax,eax
  414ddc:	pop    rbx
  414ddd:	pop    rbp
  414dde:	pop    r12
  414de0:	ret    
  414de1:	lea    rcx,[rip+0x5c98]        # 41aa80 <_IO_stdin_used@@Base+0xa80>
  414de8:	mov    edx,0x600
  414ded:	lea    rsi,[rip+0x56a4]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414df4:	lea    rdi,[rip+0x58e5]        # 41a6e0 <_IO_stdin_used@@Base+0x6e0>
  414dfb:	call   4031e0 <__assert_fail@plt>
  414e00:	lea    rcx,[rip+0x5c79]        # 41aa80 <_IO_stdin_used@@Base+0xa80>
  414e07:	mov    edx,0x601
  414e0c:	lea    rsi,[rip+0x5685]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414e13:	lea    rdi,[rip+0x59c6]        # 41a7e0 <_IO_stdin_used@@Base+0x7e0>
  414e1a:	call   4031e0 <__assert_fail@plt>
  414e1f:	lea    rcx,[rip+0x5c5a]        # 41aa80 <_IO_stdin_used@@Base+0xa80>
  414e26:	mov    edx,0x608
  414e2b:	lea    rsi,[rip+0x5666]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414e32:	lea    rdi,[rip+0x5a7b]        # 41a8b4 <_IO_stdin_used@@Base+0x8b4>
  414e39:	call   4031e0 <__assert_fail@plt>
  414e3e:	lea    rcx,[rip+0x5c3b]        # 41aa80 <_IO_stdin_used@@Base+0xa80>
  414e45:	mov    edx,0x604
  414e4a:	lea    rsi,[rip+0x5647]        # 41a498 <_IO_stdin_used@@Base+0x498>
  414e51:	lea    rdi,[rip+0x5a5c]        # 41a8b4 <_IO_stdin_used@@Base+0x8b4>
  414e58:	call   4031e0 <__assert_fail@plt>
  414e5d:	nop    DWORD PTR [rax]

0000000000414e60 <flatcc_builder_push_buffer_alignment@@Base>:
  414e60:	endbr64 
  414e64:	mov    edx,0x4
  414e69:	movzx  eax,WORD PTR [rdi+0xe8]
  414e70:	mov    WORD PTR [rdi+0xe8],dx
  414e77:	ret    
  414e78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414e80 <flatcc_builder_pop_buffer_alignment@@Base>:
  414e80:	endbr64 
  414e84:	cmp    si,WORD PTR [rdi+0xe8]
  414e8b:	jbe    414e94 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  414e8d:	mov    WORD PTR [rdi+0xe8],si
  414e94:	ret    
  414e95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000414ea0 <flatcc_builder_get_buffer_alignment@@Base>:
  414ea0:	endbr64 
  414ea4:	movzx  eax,WORD PTR [rdi+0xe8]
  414eab:	ret    
  414eac:	nop    DWORD PTR [rax+0x0]

0000000000414eb0 <flatcc_builder_set_vtable_clustering@@Base>:
  414eb0:	endbr64 
  414eb4:	xor    eax,eax
  414eb6:	test   esi,esi
  414eb8:	sete   al
  414ebb:	mov    DWORD PTR [rdi+0x124],eax
  414ec1:	ret    
  414ec2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414ecd:	nop    DWORD PTR [rax]

0000000000414ed0 <flatcc_builder_set_block_align@@Base>:
  414ed0:	endbr64 
  414ed4:	mov    WORD PTR [rdi+0xec],si
  414edb:	ret    
  414edc:	nop    DWORD PTR [rax+0x0]

0000000000414ee0 <flatcc_builder_get_level@@Base>:
  414ee0:	endbr64 
  414ee4:	mov    eax,DWORD PTR [rdi+0x104]
  414eea:	ret    
  414eeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414ef0 <flatcc_builder_set_max_level@@Base>:
  414ef0:	endbr64 
  414ef4:	mov    DWORD PTR [rdi+0x120],esi
  414efa:	cmp    DWORD PTR [rdi+0x108],esi
  414f00:	jge    414f08 <flatcc_builder_set_max_level@@Base+0x18>
  414f02:	mov    DWORD PTR [rdi+0x108],esi
  414f08:	ret    
  414f09:	nop    DWORD PTR [rax+0x0]

0000000000414f10 <flatcc_builder_get_buffer_size@@Base>:
  414f10:	endbr64 
  414f14:	mov    eax,DWORD PTR [rdi+0xf4]
  414f1a:	sub    eax,DWORD PTR [rdi+0xf0]
  414f20:	cdqe   
  414f22:	ret    
  414f23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414f2e:	xchg   ax,ax

0000000000414f30 <flatcc_builder_get_buffer_start@@Base>:
  414f30:	endbr64 
  414f34:	mov    eax,DWORD PTR [rdi+0xf0]
  414f3a:	ret    
  414f3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414f40 <flatcc_builder_get_buffer_end@@Base>:
  414f40:	endbr64 
  414f44:	mov    eax,DWORD PTR [rdi+0xf4]
  414f4a:	ret    
  414f4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414f50 <flatcc_builder_set_vtable_cache_limit@@Base>:
  414f50:	endbr64 
  414f54:	mov    QWORD PTR [rdi+0x118],rsi
  414f5b:	ret    
  414f5c:	nop    DWORD PTR [rax+0x0]

0000000000414f60 <flatcc_builder_set_identifier@@Base>:
  414f60:	endbr64 
  414f64:	test   rsi,rsi
  414f67:	je     414f78 <flatcc_builder_set_identifier@@Base+0x18>
  414f69:	mov    eax,DWORD PTR [rsi]
  414f6b:	mov    DWORD PTR [rdi+0x110],eax
  414f71:	ret    
  414f72:	nop    WORD PTR [rax+rax*1+0x0]
  414f78:	mov    rsi,0x41af80
  414f7f:	mov    eax,DWORD PTR [rsi]
  414f81:	mov    DWORD PTR [rdi+0x110],eax
  414f87:	ret    
  414f88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414f90 <flatcc_builder_get_type@@Base>:
  414f90:	endbr64 
  414f94:	mov    rdx,QWORD PTR [rdi+0x30]
  414f98:	xor    eax,eax
  414f9a:	test   rdx,rdx
  414f9d:	je     414fa3 <flatcc_builder_get_type@@Base+0x13>
  414f9f:	movzx  eax,WORD PTR [rdx+0xe]
  414fa3:	ret    
  414fa4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414faf:	nop

0000000000414fb0 <flatcc_builder_get_type_at@@Base>:
  414fb0:	endbr64 
  414fb4:	xor    eax,eax
  414fb6:	test   esi,esi
  414fb8:	jle    414fd9 <flatcc_builder_get_type_at@@Base+0x29>
  414fba:	mov    edx,DWORD PTR [rdi+0x104]
  414fc0:	cmp    edx,esi
  414fc2:	jl     414fd9 <flatcc_builder_get_type_at@@Base+0x29>
  414fc4:	sub    esi,edx
  414fc6:	movsxd rsi,esi
  414fc9:	mov    rdx,QWORD PTR [rdi+0x30]
  414fcd:	lea    rax,[rsi+rsi*8]
  414fd1:	lea    rax,[rdx+rax*4]
  414fd5:	movzx  eax,WORD PTR [rax+0xe]
  414fd9:	ret    
  414fda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414fe0 <flatcc_builder_get_direct_buffer@@Base>:
  414fe0:	endbr64 
  414fe4:	mov    eax,DWORD PTR [rdi+0x128]
  414fea:	test   eax,eax
  414fec:	jne    415000 <flatcc_builder_get_direct_buffer@@Base+0x20>
  414fee:	xor    eax,eax
  414ff0:	test   rsi,rsi
  414ff3:	je     414ffc <flatcc_builder_get_direct_buffer@@Base+0x1c>
  414ff5:	mov    QWORD PTR [rsi],0x0
  414ffc:	ret    
  414ffd:	nop    DWORD PTR [rax]
  415000:	mov    rax,QWORD PTR [rdi+0x138]
  415007:	cmp    QWORD PTR [rdi+0x130],rax
  41500e:	jne    414fee <flatcc_builder_get_direct_buffer@@Base+0xe>
  415010:	test   rsi,rsi
  415013:	je     41501f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  415015:	mov    rax,QWORD PTR [rdi+0x160]
  41501c:	mov    QWORD PTR [rsi],rax
  41501f:	mov    rax,QWORD PTR [rdi+0x140]
  415026:	ret    
  415027:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415030 <flatcc_builder_copy_buffer@@Base>:
  415030:	endbr64 
  415034:	mov    eax,DWORD PTR [rdi+0x128]
  41503a:	test   eax,eax
  41503c:	je     415060 <flatcc_builder_copy_buffer@@Base+0x30>
  41503e:	sub    rsp,0x8
  415042:	add    rdi,0x130
  415049:	call   4158a0 <flatcc_emitter_copy_buffer@@Base>
  41504e:	test   rax,rax
  415051:	je     415063 <flatcc_builder_copy_buffer@@Base+0x33>
  415053:	add    rsp,0x8
  415057:	ret    
  415058:	nop    DWORD PTR [rax+rax*1+0x0]
  415060:	xor    eax,eax
  415062:	ret    
  415063:	lea    rcx,[rip+0x5896]        # 41a900 <_IO_stdin_used@@Base+0x900>
  41506a:	mov    edx,0x786
  41506f:	lea    rsi,[rip+0x5422]        # 41a498 <_IO_stdin_used@@Base+0x498>
  415076:	lea    rdi,[rip+0x584d]        # 41a8ca <_IO_stdin_used@@Base+0x8ca>
  41507d:	call   4031e0 <__assert_fail@plt>
  415082:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41508d:	nop    DWORD PTR [rax]

0000000000415090 <flatcc_builder_finalize_buffer@@Base>:
  415090:	endbr64 
  415094:	push   r12
  415096:	mov    r12,rdi
  415099:	push   rbp
  41509a:	push   rbx
  41509b:	mov    rbx,rsi
  41509e:	call   414f10 <flatcc_builder_get_buffer_size@@Base>
  4150a3:	mov    rbp,rax
  4150a6:	test   rbx,rbx
  4150a9:	je     4150ae <flatcc_builder_finalize_buffer@@Base+0x1e>
  4150ab:	mov    QWORD PTR [rbx],rax
  4150ae:	mov    rdi,rbp
  4150b1:	call   403240 <malloc@plt>
  4150b6:	mov    rbx,rax
  4150b9:	test   rax,rax
  4150bc:	je     4150d9 <flatcc_builder_finalize_buffer@@Base+0x49>
  4150be:	mov    rdx,rbp
  4150c1:	mov    rsi,rax
  4150c4:	mov    rdi,r12
  4150c7:	call   415030 <flatcc_builder_copy_buffer@@Base>
  4150cc:	test   rax,rax
  4150cf:	je     4150f8 <flatcc_builder_finalize_buffer@@Base+0x68>
  4150d1:	mov    rax,rbx
  4150d4:	pop    rbx
  4150d5:	pop    rbp
  4150d6:	pop    r12
  4150d8:	ret    
  4150d9:	lea    rcx,[rip+0x5800]        # 41a8e0 <_IO_stdin_used@@Base+0x8e0>
  4150e0:	mov    edx,0x798
  4150e5:	lea    rsi,[rip+0x53ac]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4150ec:	lea    rdi,[rip+0x573c]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  4150f3:	call   4031e0 <__assert_fail@plt>
  4150f8:	lea    rcx,[rip+0x57e1]        # 41a8e0 <_IO_stdin_used@@Base+0x8e0>
  4150ff:	mov    edx,0x79c
  415104:	lea    rsi,[rip+0x538d]        # 41a498 <_IO_stdin_used@@Base+0x498>
  41510b:	lea    rdi,[rip+0x571d]        # 41a82f <_IO_stdin_used@@Base+0x82f>
  415112:	call   4031e0 <__assert_fail@plt>
  415117:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415120 <flatcc_builder_finalize_aligned_buffer@@Base>:
  415120:	endbr64 
  415124:	push   r13
  415126:	push   r12
  415128:	mov    r12,rsi
  41512b:	push   rbp
  41512c:	mov    rbp,rdi
  41512f:	push   rbx
  415130:	sub    rsp,0x18
  415134:	mov    rax,QWORD PTR fs:0x28
  41513d:	mov    QWORD PTR [rsp+0x8],rax
  415142:	xor    eax,eax
  415144:	call   414f10 <flatcc_builder_get_buffer_size@@Base>
  415149:	mov    rbx,rax
  41514c:	test   r12,r12
  41514f:	je     415155 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  415151:	mov    QWORD PTR [r12],rax
  415155:	mov    rdi,rbp
  415158:	call   414ea0 <flatcc_builder_get_buffer_alignment@@Base>
  41515d:	movzx  eax,ax
  415160:	lea    rdx,[rbx+rax*1-0x1]
  415165:	mov    rbx,rax
  415168:	neg    rbx
  41516b:	and    rbx,rdx
  41516e:	mov    esi,0x8
  415173:	cmp    rax,0x8
  415177:	cmovae rsi,rax
  41517b:	mov    rdi,rsp
  41517e:	mov    rdx,rbx
  415181:	mov    QWORD PTR [rsp],0x0
  415189:	call   4032a0 <posix_memalign@plt>
  41518e:	test   eax,eax
  415190:	je     4151b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  415192:	mov    rdi,QWORD PTR [rsp]
  415196:	test   rdi,rdi
  415199:	je     4151a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  41519b:	call   403170 <free@plt>
  4151a0:	test   r12,r12
  4151a3:	je     415202 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  4151a5:	mov    QWORD PTR [r12],0x0
  4151ad:	xor    r13d,r13d
  4151b0:	jmp    4151d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  4151b2:	nop    WORD PTR [rax+rax*1+0x0]
  4151b8:	mov    r13,QWORD PTR [rsp]
  4151bc:	test   r13,r13
  4151bf:	je     4151a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  4151c1:	mov    rdx,rbx
  4151c4:	mov    rsi,r13
  4151c7:	mov    rdi,rbp
  4151ca:	call   415030 <flatcc_builder_copy_buffer@@Base>
  4151cf:	test   rax,rax
  4151d2:	je     4151f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  4151d4:	mov    rcx,QWORD PTR [rsp+0x8]
  4151d9:	xor    rcx,QWORD PTR fs:0x28
  4151e2:	mov    rax,r13
  4151e5:	jne    4151fd <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  4151e7:	add    rsp,0x18
  4151eb:	pop    rbx
  4151ec:	pop    rbp
  4151ed:	pop    r12
  4151ef:	pop    r13
  4151f1:	ret    
  4151f2:	nop    WORD PTR [rax+rax*1+0x0]
  4151f8:	mov    rdi,r13
  4151fb:	jmp    41519b <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  4151fd:	call   4031c0 <__stack_chk_fail@plt>
  415202:	xor    r13d,r13d
  415205:	jmp    4151d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  415207:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415210 <flatcc_builder_aligned_alloc@@Base>:
  415210:	endbr64 
  415214:	sub    rsp,0x18
  415218:	mov    rax,QWORD PTR fs:0x28
  415221:	mov    QWORD PTR [rsp+0x8],rax
  415226:	xor    eax,eax
  415228:	mov    rdx,rsi
  41522b:	cmp    rdi,0x8
  41522f:	mov    esi,0x8
  415234:	cmovae rsi,rdi
  415238:	mov    rdi,rsp
  41523b:	mov    QWORD PTR [rsp],0x0
  415243:	call   4032a0 <posix_memalign@plt>
  415248:	test   eax,eax
  41524a:	mov    rax,QWORD PTR [rsp]
  41524e:	je     41525f <flatcc_builder_aligned_alloc@@Base+0x4f>
  415250:	test   rax,rax
  415253:	je     41525f <flatcc_builder_aligned_alloc@@Base+0x4f>
  415255:	mov    rdi,rax
  415258:	call   403170 <free@plt>
  41525d:	xor    eax,eax
  41525f:	mov    rcx,QWORD PTR [rsp+0x8]
  415264:	xor    rcx,QWORD PTR fs:0x28
  41526d:	jne    415274 <flatcc_builder_aligned_alloc@@Base+0x64>
  41526f:	add    rsp,0x18
  415273:	ret    
  415274:	call   4031c0 <__stack_chk_fail@plt>
  415279:	nop    DWORD PTR [rax+0x0]

0000000000415280 <flatcc_builder_aligned_free@@Base>:
  415280:	endbr64 
  415284:	jmp    403170 <free@plt>
  415289:	nop    DWORD PTR [rax+0x0]

0000000000415290 <flatcc_builder_get_emit_context@@Base>:
  415290:	endbr64 
  415294:	mov    rax,QWORD PTR [rdi+0x38]
  415298:	ret    
  415299:	nop    DWORD PTR [rax+0x0]

00000000004152a0 <flatcc_emitter_recycle_page@@Base>:
  4152a0:	endbr64 
  4152a4:	mov    rax,QWORD PTR [rdi]
  4152a7:	cmp    rax,rsi
  4152aa:	je     4152fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4152ac:	cmp    QWORD PTR [rdi+0x8],rsi
  4152b0:	je     4152fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4152b2:	mov    rdx,QWORD PTR [rsi+0xb88]
  4152b9:	mov    rcx,QWORD PTR [rsi+0xb80]
  4152c0:	mov    QWORD PTR [rcx+0xb88],rdx
  4152c7:	mov    QWORD PTR [rdx+0xb80],rcx
  4152ce:	mov    rdx,QWORD PTR [rax+0xb88]
  4152d5:	mov    QWORD PTR [rsi+0xb80],rax
  4152dc:	mov    QWORD PTR [rsi+0xb88],rdx
  4152e3:	mov    QWORD PTR [rdx+0xb80],rsi
  4152ea:	mov    rax,QWORD PTR [rsi+0xb80]
  4152f1:	mov    QWORD PTR [rax+0xb88],rsi
  4152f8:	xor    eax,eax
  4152fa:	ret    
  4152fb:	mov    eax,0xffffffff
  415300:	ret    
  415301:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41530c:	nop    DWORD PTR [rax+0x0]

0000000000415310 <flatcc_emitter_reset@@Base>:
  415310:	endbr64 
  415314:	mov    rax,QWORD PTR [rdi]
  415317:	test   rax,rax
  41531a:	je     4153f0 <flatcc_emitter_reset@@Base+0xe0>
  415320:	mov    rcx,QWORD PTR [rdi+0x40]
  415324:	mov    rsi,QWORD PTR [rdi+0x30]
  415328:	test   rcx,rcx
  41532b:	cmove  rcx,rsi
  41532f:	lea    rdx,[rax+0x5c0]
  415336:	mov    QWORD PTR [rdi+0x10],rdx
  41533a:	mov    QWORD PTR [rdi+0x20],rdx
  41533e:	lea    rdx,[rcx+rcx*2]
  415342:	shr    rdx,0x2
  415346:	shr    rsi,0x2
  41534a:	add    rdx,rsi
  41534d:	mov    QWORD PTR [rdi+0x8],rax
  415351:	mov    QWORD PTR [rdi+0x18],0x5c0
  415359:	mov    QWORD PTR [rdi+0x28],0x5c0
  415361:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  41536b:	mov    QWORD PTR [rdi+0x40],rdx
  41536f:	add    rdx,rdx
  415372:	mov    QWORD PTR [rdi+0x30],0x0
  41537a:	cmp    rdx,QWORD PTR [rdi+0x38]
  41537e:	jae    4153f0 <flatcc_emitter_reset@@Base+0xe0>
  415380:	push   rbx
  415381:	mov    rbx,rdi
  415384:	mov    rdi,QWORD PTR [rax+0xb80]
  41538b:	cmp    rax,rdi
  41538e:	jne    4153a8 <flatcc_emitter_reset@@Base+0x98>
  415390:	jmp    4153e4 <flatcc_emitter_reset@@Base+0xd4>
  415392:	nop    WORD PTR [rax+rax*1+0x0]
  415398:	mov    rax,QWORD PTR [rbx+0x8]
  41539c:	mov    rdi,QWORD PTR [rax+0xb80]
  4153a3:	cmp    rdi,QWORD PTR [rbx]
  4153a6:	je     4153e4 <flatcc_emitter_reset@@Base+0xd4>
  4153a8:	mov    rdx,QWORD PTR [rdi+0xb80]
  4153af:	mov    QWORD PTR [rax+0xb80],rdx
  4153b6:	mov    rdx,QWORD PTR [rdi+0xb80]
  4153bd:	mov    QWORD PTR [rdx+0xb88],rax
  4153c4:	call   403170 <free@plt>
  4153c9:	mov    rax,QWORD PTR [rbx+0x38]
  4153cd:	mov    rcx,QWORD PTR [rbx+0x40]
  4153d1:	sub    rax,0xb80
  4153d7:	lea    rdx,[rcx+rcx*1]
  4153db:	mov    QWORD PTR [rbx+0x38],rax
  4153df:	cmp    rax,rdx
  4153e2:	ja     415398 <flatcc_emitter_reset@@Base+0x88>
  4153e4:	pop    rbx
  4153e5:	ret    
  4153e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4153f0:	ret    
  4153f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4153fc:	nop    DWORD PTR [rax+0x0]

0000000000415400 <flatcc_emitter_clear@@Base>:
  415400:	endbr64 
  415404:	mov    rax,QWORD PTR [rdi]
  415407:	test   rax,rax
  41540a:	je     415488 <flatcc_emitter_clear@@Base+0x88>
  41540c:	push   rbp
  41540d:	mov    rbp,rdi
  415410:	push   rbx
  415411:	sub    rsp,0x8
  415415:	mov    rdx,QWORD PTR [rax+0xb88]
  41541c:	mov    QWORD PTR [rdx+0xb80],0x0
  415427:	mov    rbx,QWORD PTR [rax+0xb80]
  41542e:	test   rbx,rbx
  415431:	jne    41543b <flatcc_emitter_clear@@Base+0x3b>
  415433:	jmp    415490 <flatcc_emitter_clear@@Base+0x90>
  415435:	nop    DWORD PTR [rax]
  415438:	mov    rbx,rax
  41543b:	mov    rdi,QWORD PTR [rbx+0xb88]
  415442:	call   403170 <free@plt>
  415447:	mov    rax,QWORD PTR [rbx+0xb80]
  41544e:	test   rax,rax
  415451:	jne    415438 <flatcc_emitter_clear@@Base+0x38>
  415453:	mov    rdi,rbx
  415456:	call   403170 <free@plt>
  41545b:	mov    QWORD PTR [rbp+0x40],0x0
  415463:	vpxor  xmm0,xmm0,xmm0
  415467:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  41546c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  415471:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  415476:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  41547b:	add    rsp,0x8
  41547f:	pop    rbx
  415480:	pop    rbp
  415481:	ret    
  415482:	nop    WORD PTR [rax+rax*1+0x0]
  415488:	ret    
  415489:	nop    DWORD PTR [rax+0x0]
  415490:	mov    rbx,rax
  415493:	jmp    415453 <flatcc_emitter_clear@@Base+0x53>
  415495:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004154a0 <flatcc_emitter@@Base>:
  4154a0:	endbr64 
  4154a4:	push   r15
  4154a6:	push   r14
  4154a8:	push   r13
  4154aa:	push   r12
  4154ac:	push   rbp
  4154ad:	mov    rbp,rsi
  4154b0:	push   rbx
  4154b1:	mov    rbx,rdi
  4154b4:	sub    rsp,0x18
  4154b8:	add    QWORD PTR [rdi+0x30],r8
  4154bc:	test   ecx,ecx
  4154be:	js     4156d0 <flatcc_emitter@@Base+0x230>
  4154c4:	mov    rax,QWORD PTR [rdi+0x28]
  4154c8:	cmp    rax,r8
  4154cb:	jae    415558 <flatcc_emitter@@Base+0xb8>
  4154d1:	test   edx,edx
  4154d3:	je     415543 <flatcc_emitter@@Base+0xa3>
  4154d5:	lea    r14d,[rdx-0x1]
  4154d9:	inc    r14
  4154dc:	shl    r14,0x4
  4154e0:	lea    rax,[rbp+r14*1+0x0]
  4154e5:	mov    QWORD PTR [rsp+0x8],rax
  4154ea:	nop    WORD PTR [rax+rax*1+0x0]
  4154f0:	mov    r15,QWORD PTR [rbp+0x8]
  4154f4:	mov    r13,QWORD PTR [rbp+0x0]
  4154f8:	test   r15,r15
  4154fb:	je     415538 <flatcc_emitter@@Base+0x98>
  4154fd:	nop    DWORD PTR [rax]
  415500:	mov    r12,QWORD PTR [rbx+0x28]
  415504:	cmp    r15,r12
  415507:	jbe    415600 <flatcc_emitter@@Base+0x160>
  41550d:	test   r12,r12
  415510:	je     4155a8 <flatcc_emitter@@Base+0x108>
  415516:	sub    r15,r12
  415519:	mov    rdi,QWORD PTR [rbx+0x20]
  41551d:	mov    rsi,r13
  415520:	mov    rdx,r12
  415523:	call   403230 <memcpy@plt>
  415528:	add    r13,r12
  41552b:	add    QWORD PTR [rbx+0x20],r12
  41552f:	sub    QWORD PTR [rbx+0x28],r12
  415533:	test   r15,r15
  415536:	jne    415500 <flatcc_emitter@@Base+0x60>
  415538:	add    rbp,0x10
  41553c:	cmp    rbp,QWORD PTR [rsp+0x8]
  415541:	jne    4154f0 <flatcc_emitter@@Base+0x50>
  415543:	add    rsp,0x18
  415547:	pop    rbx
  415548:	pop    rbp
  415549:	pop    r12
  41554b:	pop    r13
  41554d:	pop    r14
  41554f:	xor    eax,eax
  415551:	pop    r15
  415553:	ret    
  415554:	nop    DWORD PTR [rax+0x0]
  415558:	mov    rcx,QWORD PTR [rdi+0x20]
  41555c:	sub    rax,r8
  41555f:	lea    rsi,[rcx+r8*1]
  415563:	mov    QWORD PTR [rdi+0x20],rsi
  415567:	mov    QWORD PTR [rdi+0x28],rax
  41556b:	test   edx,edx
  41556d:	je     415543 <flatcc_emitter@@Base+0xa3>
  41556f:	lea    ebx,[rdx-0x1]
  415572:	inc    rbx
  415575:	shl    rbx,0x4
  415579:	add    rbx,rbp
  41557c:	nop    DWORD PTR [rax+0x0]
  415580:	mov    rsi,QWORD PTR [rbp+0x0]
  415584:	mov    rdx,QWORD PTR [rbp+0x8]
  415588:	mov    rdi,rcx
  41558b:	call   403230 <memcpy@plt>
  415590:	mov    rcx,QWORD PTR [rbp+0x8]
  415594:	add    rbp,0x10
  415598:	add    rcx,rax
  41559b:	cmp    rbp,rbx
  41559e:	jne    415580 <flatcc_emitter@@Base+0xe0>
  4155a0:	jmp    415543 <flatcc_emitter@@Base+0xa3>
  4155a2:	nop    WORD PTR [rax+rax*1+0x0]
  4155a8:	mov    r12,QWORD PTR [rbx+0x8]
  4155ac:	test   r12,r12
  4155af:	je     415658 <flatcc_emitter@@Base+0x1b8>
  4155b5:	mov    rax,QWORD PTR [r12+0xb80]
  4155bd:	mov    r14,QWORD PTR [rbx]
  4155c0:	cmp    rax,r14
  4155c3:	je     415610 <flatcc_emitter@@Base+0x170>
  4155c5:	mov    QWORD PTR [rbx+0x8],rax
  4155c9:	mov    QWORD PTR [rbx+0x28],0xb80
  4155d1:	mov    rdx,QWORD PTR [rax+0xb88]
  4155d8:	mov    QWORD PTR [rbx+0x20],rax
  4155dc:	mov    edx,DWORD PTR [rdx+0xb90]
  4155e2:	mov    r12,QWORD PTR [rbx+0x28]
  4155e6:	add    edx,0xb80
  4155ec:	mov    DWORD PTR [rax+0xb90],edx
  4155f2:	cmp    r15,r12
  4155f5:	ja     41550d <flatcc_emitter@@Base+0x6d>
  4155fb:	nop    DWORD PTR [rax+rax*1+0x0]
  415600:	mov    r12,r15
  415603:	xor    r15d,r15d
  415606:	jmp    415519 <flatcc_emitter@@Base+0x79>
  41560b:	nop    DWORD PTR [rax+rax*1+0x0]
  415610:	mov    edi,0xb98
  415615:	call   403240 <malloc@plt>
  41561a:	test   rax,rax
  41561d:	je     4156b8 <flatcc_emitter@@Base+0x218>
  415623:	add    QWORD PTR [rbx+0x38],0xb80
  41562b:	mov    QWORD PTR [rax+0xb88],r12
  415632:	mov    QWORD PTR [rax+0xb80],r14
  415639:	mov    QWORD PTR [r14+0xb88],rax
  415640:	mov    QWORD PTR [r12+0xb80],rax
  415648:	mov    QWORD PTR [rbx+0x8],rax
  41564c:	jmp    4155c9 <flatcc_emitter@@Base+0x129>
  415651:	nop    DWORD PTR [rax+0x0]
  415658:	mov    edi,0xb98
  41565d:	call   403240 <malloc@plt>
  415662:	test   rax,rax
  415665:	je     4156b8 <flatcc_emitter@@Base+0x218>
  415667:	lea    rdx,[rax+0x5c0]
  41566e:	add    QWORD PTR [rbx+0x38],0xb80
  415676:	mov    QWORD PTR [rbx],rax
  415679:	mov    QWORD PTR [rbx+0x8],rax
  41567d:	mov    QWORD PTR [rax+0xb80],rax
  415684:	mov    QWORD PTR [rax+0xb88],rax
  41568b:	mov    QWORD PTR [rbx+0x10],rdx
  41568f:	mov    QWORD PTR [rbx+0x20],rdx
  415693:	mov    QWORD PTR [rbx+0x18],0x5c0
  41569b:	mov    QWORD PTR [rbx+0x28],0x5c0
  4156a3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4156ad:	jmp    415500 <flatcc_emitter@@Base+0x60>
  4156b2:	nop    WORD PTR [rax+rax*1+0x0]
  4156b8:	add    rsp,0x18
  4156bc:	pop    rbx
  4156bd:	pop    rbp
  4156be:	pop    r12
  4156c0:	pop    r13
  4156c2:	pop    r14
  4156c4:	mov    eax,0xffffffff
  4156c9:	pop    r15
  4156cb:	ret    
  4156cc:	nop    DWORD PTR [rax+0x0]
  4156d0:	mov    rax,QWORD PTR [rdi+0x18]
  4156d4:	cmp    rax,r8
  4156d7:	jae    415880 <flatcc_emitter@@Base+0x3e0>
  4156dd:	movsxd rax,edx
  4156e0:	shl    rax,0x4
  4156e4:	add    rbp,rax
  4156e7:	mov    edx,edx
  4156e9:	shl    rdx,0x4
  4156ed:	mov    rax,rbp
  4156f0:	sub    rax,rdx
  4156f3:	mov    QWORD PTR [rsp+0x8],rax
  4156f8:	nop    DWORD PTR [rax+rax*1+0x0]
  415700:	cmp    rbp,QWORD PTR [rsp+0x8]
  415705:	je     415543 <flatcc_emitter@@Base+0xa3>
  41570b:	sub    rbp,0x10
  41570f:	mov    r12,QWORD PTR [rbp+0x8]
  415713:	mov    r13,QWORD PTR [rbp+0x0]
  415717:	add    r13,r12
  41571a:	test   r12,r12
  41571d:	je     415700 <flatcc_emitter@@Base+0x260>
  41571f:	mov    rdx,QWORD PTR [rbx+0x18]
  415723:	cmp    rdx,r12
  415726:	jae    415760 <flatcc_emitter@@Base+0x2c0>
  415728:	test   rdx,rdx
  41572b:	je     415770 <flatcc_emitter@@Base+0x2d0>
  41572d:	sub    r12,rdx
  415730:	xor    ecx,ecx
  415732:	mov    rdi,QWORD PTR [rbx+0x10]
  415736:	mov    rax,rdx
  415739:	neg    rax
  41573c:	add    rdi,rax
  41573f:	mov    QWORD PTR [rbx+0x10],rdi
  415743:	mov    QWORD PTR [rbx+0x18],rcx
  415747:	add    r13,rax
  41574a:	mov    rsi,r13
  41574d:	call   403230 <memcpy@plt>
  415752:	test   r12,r12
  415755:	je     415700 <flatcc_emitter@@Base+0x260>
  415757:	mov    rdx,QWORD PTR [rbx+0x18]
  41575b:	cmp    rdx,r12
  41575e:	jb     415728 <flatcc_emitter@@Base+0x288>
  415760:	mov    rcx,rdx
  415763:	sub    rcx,r12
  415766:	mov    rdx,r12
  415769:	xor    r12d,r12d
  41576c:	jmp    415732 <flatcc_emitter@@Base+0x292>
  41576e:	xchg   ax,ax
  415770:	mov    r15,QWORD PTR [rbx]
  415773:	test   r15,r15
  415776:	je     415818 <flatcc_emitter@@Base+0x378>
  41577c:	mov    rax,QWORD PTR [r15+0xb88]
  415783:	mov    r14,QWORD PTR [rbx+0x8]
  415787:	cmp    rax,r14
  41578a:	je     4157d8 <flatcc_emitter@@Base+0x338>
  41578c:	mov    edx,DWORD PTR [r15+0xb90]
  415793:	sub    edx,0xb80
  415799:	mov    DWORD PTR [rax+0xb90],edx
  41579f:	mov    QWORD PTR [rbx],rax
  4157a2:	lea    rdx,[rax+0xb80]
  4157a9:	mov    QWORD PTR [rbx+0x10],rdx
  4157ad:	mov    rdx,QWORD PTR [rax+0xb80]
  4157b4:	mov    QWORD PTR [rbx+0x18],0xb80
  4157bc:	mov    edx,DWORD PTR [rdx+0xb90]
  4157c2:	sub    edx,0xb80
  4157c8:	mov    DWORD PTR [rax+0xb90],edx
  4157ce:	jmp    41571f <flatcc_emitter@@Base+0x27f>
  4157d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4157d8:	mov    edi,0xb98
  4157dd:	call   403240 <malloc@plt>
  4157e2:	test   rax,rax
  4157e5:	je     4156b8 <flatcc_emitter@@Base+0x218>
  4157eb:	add    QWORD PTR [rbx+0x38],0xb80
  4157f3:	mov    QWORD PTR [rax+0xb88],r14
  4157fa:	mov    QWORD PTR [rax+0xb80],r15
  415801:	mov    QWORD PTR [r15+0xb88],rax
  415808:	mov    QWORD PTR [r14+0xb80],rax
  41580f:	mov    QWORD PTR [rbx],rax
  415812:	jmp    4157a2 <flatcc_emitter@@Base+0x302>
  415814:	nop    DWORD PTR [rax+0x0]
  415818:	mov    edi,0xb98
  41581d:	call   403240 <malloc@plt>
  415822:	test   rax,rax
  415825:	je     4156b8 <flatcc_emitter@@Base+0x218>
  41582b:	lea    rdx,[rax+0x5c0]
  415832:	add    QWORD PTR [rbx+0x38],0xb80
  41583a:	mov    QWORD PTR [rbx],rax
  41583d:	mov    QWORD PTR [rbx+0x8],rax
  415841:	mov    QWORD PTR [rax+0xb80],rax
  415848:	mov    QWORD PTR [rax+0xb88],rax
  41584f:	mov    QWORD PTR [rbx+0x10],rdx
  415853:	mov    QWORD PTR [rbx+0x20],rdx
  415857:	mov    QWORD PTR [rbx+0x18],0x5c0
  41585f:	mov    QWORD PTR [rbx+0x28],0x5c0
  415867:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  415871:	jmp    41571f <flatcc_emitter@@Base+0x27f>
  415876:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415880:	mov    rcx,QWORD PTR [rdi+0x10]
  415884:	sub    rax,r8
  415887:	sub    rcx,r8
  41588a:	mov    QWORD PTR [rdi+0x10],rcx
  41588e:	mov    QWORD PTR [rdi+0x18],rax
  415892:	jmp    41556b <flatcc_emitter@@Base+0xcb>
  415897:	nop    WORD PTR [rax+rax*1+0x0]

00000000004158a0 <flatcc_emitter_copy_buffer@@Base>:
  4158a0:	endbr64 
  4158a4:	mov    rax,QWORD PTR [rdi+0x30]
  4158a8:	cmp    rax,rdx
  4158ab:	ja     415950 <flatcc_emitter_copy_buffer@@Base+0xb0>
  4158b1:	mov    rcx,QWORD PTR [rdi]
  4158b4:	test   rcx,rcx
  4158b7:	je     415952 <flatcc_emitter_copy_buffer@@Base+0xb2>
  4158bd:	push   rbp
  4158be:	mov    r8,rsi
  4158c1:	mov    rbp,rdi
  4158c4:	push   rbx
  4158c5:	sub    rsp,0x8
  4158c9:	mov    rsi,QWORD PTR [rdi+0x10]
  4158cd:	cmp    rcx,QWORD PTR [rdi+0x8]
  4158d1:	je     415960 <flatcc_emitter_copy_buffer@@Base+0xc0>
  4158d7:	mov    ecx,0xb80
  4158dc:	mov    rbx,rcx
  4158df:	sub    rbx,QWORD PTR [rdi+0x18]
  4158e3:	mov    rdx,rbx
  4158e6:	mov    rdi,r8
  4158e9:	call   403230 <memcpy@plt>
  4158ee:	lea    rcx,[rax+rbx*1]
  4158f2:	mov    rax,QWORD PTR [rbp+0x0]
  4158f6:	mov    rbx,QWORD PTR [rax+0xb80]
  4158fd:	cmp    rbx,QWORD PTR [rbp+0x8]
  415901:	je     41592f <flatcc_emitter_copy_buffer@@Base+0x8f>
  415903:	nop    DWORD PTR [rax+rax*1+0x0]
  415908:	mov    rsi,rbx
  41590b:	mov    rdi,rcx
  41590e:	mov    edx,0xb80
  415913:	call   403230 <memcpy@plt>
  415918:	mov    rbx,QWORD PTR [rbx+0xb80]
  41591f:	mov    rcx,rax
  415922:	add    rcx,0xb80
  415929:	cmp    QWORD PTR [rbp+0x8],rbx
  41592d:	jne    415908 <flatcc_emitter_copy_buffer@@Base+0x68>
  41592f:	mov    edx,0xb80
  415934:	sub    rdx,QWORD PTR [rbp+0x28]
  415938:	mov    rsi,rbx
  41593b:	mov    rdi,rcx
  41593e:	call   403230 <memcpy@plt>
  415943:	add    rsp,0x8
  415947:	mov    rcx,rax
  41594a:	pop    rbx
  41594b:	mov    rax,rcx
  41594e:	pop    rbp
  41594f:	ret    
  415950:	xor    ecx,ecx
  415952:	mov    rax,rcx
  415955:	ret    
  415956:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415960:	mov    rdx,rax
  415963:	mov    rdi,r8
  415966:	call   403230 <memcpy@plt>
  41596b:	add    rsp,0x8
  41596f:	mov    rcx,rax
  415972:	pop    rbx
  415973:	mov    rax,rcx
  415976:	pop    rbp
  415977:	ret    
  415978:	nop    DWORD PTR [rax+rax*1+0x0]
  415980:	mov    r9,rdi
  415983:	mov    eax,edx
  415985:	shr    r9,0x20
  415989:	mov    edi,edi
  41598b:	mov    r11,rdi
  41598e:	mov    r8,r9
  415991:	imul   rdi,rax
  415995:	imul   r8,rax
  415999:	mov    r10,rdx
  41599c:	shr    r10,0x20
  4159a0:	imul   r11,r10
  4159a4:	mov    rax,rdi
  4159a7:	shr    rax,0x20
  4159ab:	mov    edi,r8d
  4159ae:	add    rax,rdi
  4159b1:	mov    edi,0x80000000
  4159b6:	mov    edx,r11d
  4159b9:	add    rax,rdi
  4159bc:	add    rax,rdx
  4159bf:	imul   r9,r10
  4159c3:	mov    rdx,r8
  4159c6:	shr    rdx,0x20
  4159ca:	shr    r11,0x20
  4159ce:	add    rdx,r11
  4159d1:	lea    r8,[rdx+r9*1]
  4159d5:	shr    rax,0x20
  4159d9:	add    rax,r8
  4159dc:	mov    QWORD PTR [rsp-0x18],rax
  4159e1:	mov    QWORD PTR [rsp-0x10],0x0
  4159ea:	lea    eax,[rsi+rcx*1+0x40]
  4159ee:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  4159f4:	vpinsrd xmm0,xmm1,eax,0x2
  4159fa:	vmovq  rax,xmm0
  4159ff:	vpextrq rdx,xmm0,0x1
  415a05:	ret    
  415a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415a10:	sub    rsp,0x18
  415a14:	mov    QWORD PTR [rsp+0x8],rsi
  415a19:	mov    QWORD PTR [rsp],rdi
  415a1d:	mov    ecx,DWORD PTR [rsp+0x8]
  415a21:	test   rdi,rdi
  415a24:	je     415a88 <flatcc_emitter_copy_buffer@@Base+0x1e8>
  415a26:	mov    rax,rdi
  415a29:	movabs rdi,0xffc0000000000000
  415a33:	lea    edx,[rcx-0xa]
  415a36:	mov    rsi,rdi
  415a39:	test   rax,rdi
  415a3c:	jne    415a4e <flatcc_emitter_copy_buffer@@Base+0x1ae>
  415a3e:	xchg   ax,ax
  415a40:	shl    rax,0xa
  415a44:	mov    ecx,edx
  415a46:	sub    edx,0xa
  415a49:	test   rax,rsi
  415a4c:	je     415a40 <flatcc_emitter_copy_buffer@@Base+0x1a0>
  415a4e:	test   rax,rax
  415a51:	js     415a69 <flatcc_emitter_copy_buffer@@Base+0x1c9>
  415a53:	lea    edx,[rcx-0x1]
  415a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415a60:	mov    ecx,edx
  415a62:	dec    edx
  415a64:	add    rax,rax
  415a67:	jns    415a60 <flatcc_emitter_copy_buffer@@Base+0x1c0>
  415a69:	mov    QWORD PTR [rsp],rax
  415a6d:	vmovdqa xmm1,XMMWORD PTR [rsp]
  415a72:	add    rsp,0x18
  415a76:	vpinsrd xmm0,xmm1,ecx,0x2
  415a7c:	vmovq  rax,xmm0
  415a81:	vpextrq rdx,xmm0,0x1
  415a87:	ret    
  415a88:	lea    rcx,[rip+0x6091]        # 41bb20 <flatcc_builder_padding_base@@Base+0xba0>
  415a8f:	mov    edx,0x104
  415a94:	lea    rsi,[rip+0x56e5]        # 41b180 <flatcc_builder_padding_base@@Base+0x200>
  415a9b:	lea    rdi,[rip+0x58c2]        # 41b364 <flatcc_builder_padding_base@@Base+0x3e4>
  415aa2:	call   4031e0 <__assert_fail@plt>
  415aa7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415ab0 <grisu3_diy_fp_encode_double@@Base>:
  415ab0:	endbr64 
  415ab4:	push   r15
  415ab6:	mov    eax,0x4
  415abb:	push   r14
  415abd:	push   r13
  415abf:	mov    r13d,edx
  415ac2:	push   r12
  415ac4:	mov    r12d,ecx
  415ac7:	push   rbp
  415ac8:	mov    rbp,r8
  415acb:	push   rbx
  415acc:	mov    ebx,esi
  415ace:	sub    rsp,0x18
  415ad2:	mov    QWORD PTR [rsp+0x8],0x0
  415adb:	mov    QWORD PTR [rsp],rdi
  415adf:	test   ecx,ecx
  415ae1:	cmovne r12d,eax
  415ae5:	vmovdqa xmm1,XMMWORD PTR [rsp]
  415aea:	xor    eax,eax
  415aec:	vpinsrd xmm0,xmm1,eax,0x2
  415af2:	vmovaps XMMWORD PTR [rsp],xmm0
  415af7:	mov    rsi,QWORD PTR [rsp+0x8]
  415afc:	mov    rdi,QWORD PTR [rsp]
  415b00:	sub    ebx,edx
  415b02:	call   415a10 <flatcc_emitter_copy_buffer@@Base+0x170>
  415b07:	mov    QWORD PTR [rsp+0x8],rdx
  415b0c:	mov    QWORD PTR [rsp],rax
  415b10:	mov    esi,DWORD PTR [rsp+0x8]
  415b14:	mov    rdi,QWORD PTR [rsp]
  415b18:	mov    ecx,esi
  415b1a:	neg    ecx
  415b1c:	shlx   r12d,r12d,ecx
  415b21:	cmp    ebx,0xfffffea4
  415b27:	jl     415dff <grisu3_diy_fp_encode_double@@Base+0x34f>
  415b2d:	cmp    ebx,0x15b
  415b33:	jg     415de0 <grisu3_diy_fp_encode_double@@Base+0x330>
  415b39:	lea    eax,[rbx+0x15c]
  415b3f:	sar    eax,0x3
  415b42:	cdqe   
  415b44:	lea    rdx,[rip+0x6035]        # 41bb80 <flatcc_builder_padding_base@@Base+0xc00>
  415b4b:	shl    rax,0x4
  415b4f:	add    rax,rdx
  415b52:	movsx  edx,WORD PTR [rax+0xa]
  415b56:	mov    r14,QWORD PTR [rax]
  415b59:	movsx  r15d,WORD PTR [rax+0x8]
  415b5e:	cmp    ebx,edx
  415b60:	jl     415dc1 <grisu3_diy_fp_encode_double@@Base+0x311>
  415b66:	lea    eax,[rdx+0x7]
  415b69:	cmp    ebx,eax
  415b6b:	jg     415da2 <grisu3_diy_fp_encode_double@@Base+0x2f2>
  415b71:	cmp    ebx,edx
  415b73:	je     415bc4 <grisu3_diy_fp_encode_double@@Base+0x114>
  415b75:	sub    ebx,edx
  415b77:	dec    ebx
  415b79:	cmp    ebx,0x6
  415b7c:	ja     415e1e <grisu3_diy_fp_encode_double@@Base+0x36e>
  415b82:	movsxd rax,ebx
  415b85:	shl    rax,0x4
  415b89:	lea    rdx,[rip+0xbc70]        # 421800 <filename@@Base+0x20>
  415b90:	add    rax,rdx
  415b93:	mov    rdi,QWORD PTR [rsp]
  415b97:	mov    ecx,DWORD PTR [rax+0x8]
  415b9a:	mov    rdx,QWORD PTR [rax]
  415b9d:	call   415980 <flatcc_emitter_copy_buffer@@Base+0xe0>
  415ba2:	mov    QWORD PTR [rsp],rax
  415ba6:	mov    QWORD PTR [rsp+0x8],rdx
  415bab:	lea    edx,[rbx+r13*1+0x1]
  415bb0:	lea    eax,[r12+0x4]
  415bb5:	cmp    edx,0x13
  415bb8:	mov    rdi,QWORD PTR [rsp]
  415bbc:	mov    esi,DWORD PTR [rsp+0x8]
  415bc0:	cmovg  r12d,eax
  415bc4:	mov    ecx,r15d
  415bc7:	mov    rdx,r14
  415bca:	call   415980 <flatcc_emitter_copy_buffer@@Base+0xe0>
  415bcf:	mov    QWORD PTR [rsp],rax
  415bd3:	mov    QWORD PTR [rsp+0x8],rdx
  415bd8:	xor    eax,eax
  415bda:	mov    rdi,QWORD PTR [rsp]
  415bde:	test   r12d,r12d
  415be1:	mov    rsi,QWORD PTR [rsp+0x8]
  415be6:	setne  al
  415be9:	mov    ebx,DWORD PTR [rsp+0x8]
  415bed:	lea    r12d,[r12+rax*1+0x8]
  415bf2:	call   415a10 <flatcc_emitter_copy_buffer@@Base+0x170>
  415bf7:	mov    QWORD PTR [rsp+0x8],rdx
  415bfc:	mov    QWORD PTR [rsp],rax
  415c00:	mov    edx,DWORD PTR [rsp+0x8]
  415c04:	mov    rax,QWORD PTR [rsp]
  415c08:	sub    ebx,edx
  415c0a:	lea    esi,[rdx+0x40]
  415c0d:	shlx   ecx,r12d,ebx
  415c12:	cmp    esi,0xfffffc0e
  415c18:	jl     415d08 <grisu3_diy_fp_encode_double@@Base+0x258>
  415c1e:	lea    r9d,[rcx+0x4]
  415c22:	mov    edi,0x4
  415c27:	xor    r8d,r8d
  415c2a:	xor    esi,esi
  415c2c:	cmp    esi,r9d
  415c2f:	jl     415c40 <grisu3_diy_fp_encode_double@@Base+0x190>
  415c31:	inc    rax
  415c34:	bt     rax,0x35
  415c39:	jae    415c40 <grisu3_diy_fp_encode_double@@Base+0x190>
  415c3b:	shr    rax,1
  415c3e:	inc    edx
  415c40:	movabs r10,0x1fffffffffffff
  415c4a:	lea    esi,[rdx+0x1]
  415c4d:	mov    r11,r10
  415c50:	cmp    rax,r10
  415c53:	jbe    415c64 <grisu3_diy_fp_encode_double@@Base+0x1b4>
  415c55:	nop    DWORD PTR [rax]
  415c58:	shr    rax,1
  415c5b:	mov    edx,esi
  415c5d:	inc    esi
  415c5f:	cmp    rax,r11
  415c62:	ja     415c58 <grisu3_diy_fp_encode_double@@Base+0x1a8>
  415c64:	cmp    edx,0xfffffbce
  415c6a:	jl     415d58 <grisu3_diy_fp_encode_double@@Base+0x2a8>
  415c70:	movabs r10,0x10000000000000
  415c7a:	mov    rsi,rax
  415c7d:	and    rsi,r10
  415c80:	cmp    edx,0xfffffbce
  415c86:	je     415cba <grisu3_diy_fp_encode_double@@Base+0x20a>
  415c88:	test   rsi,rsi
  415c8b:	je     415ca4 <grisu3_diy_fp_encode_double@@Base+0x1f4>
  415c8d:	jmp    415d90 <grisu3_diy_fp_encode_double@@Base+0x2e0>
  415c92:	nop    WORD PTR [rax+rax*1+0x0]
  415c98:	test   rsi,rsi
  415c9b:	jne    415d68 <grisu3_diy_fp_encode_double@@Base+0x2b8>
  415ca1:	mov    edx,r11d
  415ca4:	add    rax,rax
  415ca7:	mov    rsi,rax
  415caa:	lea    r11d,[rdx-0x1]
  415cae:	and    rsi,r10
  415cb1:	cmp    r11d,0xfffffbce
  415cb8:	jne    415c98 <grisu3_diy_fp_encode_double@@Base+0x1e8>
  415cba:	test   rsi,rsi
  415cbd:	movabs rdx,0x10000000000000
  415cc7:	cmovne rsi,rdx
  415ccb:	movabs rdx,0xfffffffffffff
  415cd5:	and    rdx,rax
  415cd8:	or     rdx,rsi
  415cdb:	sub    edi,ecx
  415cdd:	cmp    edi,r8d
  415ce0:	setge  al
  415ce3:	cmp    r9d,r8d
  415ce6:	mov    QWORD PTR [rbp+0x0],rdx
  415cea:	setle  dl
  415ced:	add    rsp,0x18
  415cf1:	pop    rbx
  415cf2:	pop    rbp
  415cf3:	pop    r12
  415cf5:	pop    r13
  415cf7:	or     eax,edx
  415cf9:	pop    r14
  415cfb:	movzx  eax,al
  415cfe:	pop    r15
  415d00:	ret    
  415d01:	nop    DWORD PTR [rax+0x0]
  415d08:	cmp    esi,0xfffffbcf
  415d0e:	jl     415d80 <grisu3_diy_fp_encode_double@@Base+0x2d0>
  415d10:	lea    edi,[rdx+0x472]
  415d16:	mov    esi,0x40
  415d1b:	sub    esi,edi
  415d1d:	cmp    esi,0x3c
  415d20:	jle    415e3d <grisu3_diy_fp_encode_double@@Base+0x38d>
  415d26:	mov    esi,0x2
  415d2b:	sub    esi,edi
  415d2d:	sarx   ecx,ecx,esi
  415d32:	add    ecx,0x9
  415d35:	shrx   rax,rax,rsi
  415d3a:	lea    edx,[rdx+rsi*1+0x3e]
  415d3e:	shr    rax,0x3e
  415d42:	xor    r8d,r8d
  415d45:	mov    r9d,ecx
  415d48:	xor    edi,edi
  415d4a:	mov    esi,0x3e
  415d4f:	jmp    415c2c <grisu3_diy_fp_encode_double@@Base+0x17c>
  415d54:	nop    DWORD PTR [rax+0x0]
  415d58:	mov    rdx,QWORD PTR [rip+0x6391]        # 41c0f0 <flatcc_builder_padding_base@@Base+0x1170>
  415d5f:	jmp    415cdb <grisu3_diy_fp_encode_double@@Base+0x22b>
  415d64:	nop    DWORD PTR [rax+0x0]
  415d68:	add    edx,0x432
  415d6e:	mov    rsi,rdx
  415d71:	shl    rsi,0x34
  415d75:	jmp    415ccb <grisu3_diy_fp_encode_double@@Base+0x21b>
  415d7a:	nop    WORD PTR [rax+rax*1+0x0]
  415d80:	mov    esi,0x2
  415d85:	jmp    415d2d <grisu3_diy_fp_encode_double@@Base+0x27d>
  415d87:	nop    WORD PTR [rax+rax*1+0x0]
  415d90:	add    edx,0x433
  415d96:	mov    rsi,rdx
  415d99:	shl    rsi,0x34
  415d9d:	jmp    415ccb <grisu3_diy_fp_encode_double@@Base+0x21b>
  415da2:	lea    rcx,[rip+0x5d97]        # 41bb40 <flatcc_builder_padding_base@@Base+0xbc0>
  415da9:	mov    edx,0x59
  415dae:	lea    rsi,[rip+0x543b]        # 41b1f0 <flatcc_builder_padding_base@@Base+0x270>
  415db5:	lea    rdi,[rip+0x55c0]        # 41b37c <flatcc_builder_padding_base@@Base+0x3fc>
  415dbc:	call   4031e0 <__assert_fail@plt>
  415dc1:	lea    rcx,[rip+0x5d78]        # 41bb40 <flatcc_builder_padding_base@@Base+0xbc0>
  415dc8:	mov    edx,0x58
  415dcd:	lea    rsi,[rip+0x541c]        # 41b1f0 <flatcc_builder_padding_base@@Base+0x270>
  415dd4:	lea    rdi,[rip+0x5592]        # 41b36d <flatcc_builder_padding_base@@Base+0x3ed>
  415ddb:	call   4031e0 <__assert_fail@plt>
  415de0:	lea    rcx,[rip+0x5d59]        # 41bb40 <flatcc_builder_padding_base@@Base+0xbc0>
  415de7:	mov    edx,0x51
  415dec:	lea    rsi,[rip+0x53fd]        # 41b1f0 <flatcc_builder_padding_base@@Base+0x270>
  415df3:	lea    rdi,[rip+0x548e]        # 41b288 <flatcc_builder_padding_base@@Base+0x308>
  415dfa:	call   4031e0 <__assert_fail@plt>
  415dff:	lea    rcx,[rip+0x5d3a]        # 41bb40 <flatcc_builder_padding_base@@Base+0xbc0>
  415e06:	mov    edx,0x50
  415e0b:	lea    rsi,[rip+0x53de]        # 41b1f0 <flatcc_builder_padding_base@@Base+0x270>
  415e12:	lea    rdi,[rip+0x544f]        # 41b268 <flatcc_builder_padding_base@@Base+0x2e8>
  415e19:	call   4031e0 <__assert_fail@plt>
  415e1e:	lea    rcx,[rip+0x5d3b]        # 41bb60 <flatcc_builder_padding_base@@Base+0xbe0>
  415e25:	mov    edx,0xb9
  415e2a:	lea    rsi,[rip+0x53bf]        # 41b1f0 <flatcc_builder_padding_base@@Base+0x270>
  415e31:	lea    rdi,[rip+0x555f]        # 41b397 <flatcc_builder_padding_base@@Base+0x417>
  415e38:	call   4031e0 <__assert_fail@plt>
  415e3d:	mov    r8d,0x3f
  415e43:	sub    r8d,edi
  415e46:	mov    r10d,r8d
  415e49:	mov    r8d,0x1
  415e4f:	mov    r9d,0x8
  415e55:	shlx   r8,r8,r10
  415e5a:	and    r8,rax
  415e5d:	shlx   r9,r9,r10
  415e62:	add    edx,esi
  415e64:	mov    edi,r9d
  415e67:	shl    r8d,0x3
  415e6b:	add    r9d,ecx
  415e6e:	shrx   rax,rax,rsi
  415e73:	jmp    415c2c <grisu3_diy_fp_encode_double@@Base+0x17c>
  415e78:	nop    DWORD PTR [rax+rax*1+0x0]
  415e80:	push   r14
  415e82:	lea    r8,[rdi+0x3e9]
  415e89:	push   r13
  415e8b:	push   r12
  415e8d:	mov    r12,rdx
  415e90:	push   rbp
  415e91:	mov    rbp,rdi
  415e94:	push   rbx
  415e95:	sub    rsp,0x10
  415e99:	mov    rax,QWORD PTR fs:0x28
  415ea2:	mov    QWORD PTR [rsp+0x8],rax
  415ea7:	xor    eax,eax
  415ea9:	mov    QWORD PTR [rdx],0x0
  415eb0:	cmp    esi,0x3e8
  415eb6:	jg     415ec0 <grisu3_diy_fp_encode_double@@Base+0x410>
  415eb8:	movsxd rsi,esi
  415ebb:	lea    r8,[rdi+rsi*1+0x1]
  415ec0:	cmp    r8,rbp
  415ec3:	je     4161b0 <grisu3_diy_fp_encode_double@@Base+0x700>
  415ec9:	movsx  edi,BYTE PTR [rbp+0x0]
  415ecd:	cmp    dil,0x2d
  415ed1:	je     4160e8 <grisu3_diy_fp_encode_double@@Base+0x638>
  415ed7:	cmp    dil,0x30
  415edb:	je     416018 <grisu3_diy_fp_encode_double@@Base+0x568>
  415ee1:	lea    eax,[rdi-0x31]
  415ee4:	mov    rbx,rbp
  415ee7:	cmp    al,0x8
  415ee9:	ja     415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  415eef:	mov    rax,rbp
  415ef2:	xor    r13d,r13d
  415ef5:	sub    edi,0x30
  415ef8:	lea    rbx,[rax+0x1]
  415efc:	movsxd rdi,edi
  415eff:	cmp    r8,rbx
  415f02:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  415f08:	movsx  rax,BYTE PTR [rax+0x1]
  415f0d:	lea    edx,[rax-0x30]
  415f10:	mov    rcx,rbx
  415f13:	movabs rsi,0x1999999999999998
  415f1d:	cmp    dl,0x9
  415f20:	jbe    415f39 <grisu3_diy_fp_encode_double@@Base+0x489>
  415f22:	jmp    4165f1 <grisu3_diy_fp_encode_double@@Base+0xb41>
  415f27:	nop    WORD PTR [rax+rax*1+0x0]
  415f30:	cmp    rdi,rsi
  415f33:	ja     416068 <grisu3_diy_fp_encode_double@@Base+0x5b8>
  415f39:	lea    rdx,[rdi+rdi*4]
  415f3d:	inc    rcx
  415f40:	lea    rdi,[rax+rdx*2-0x30]
  415f45:	cmp    r8,rcx
  415f48:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  415f4e:	movsx  rax,BYTE PTR [rcx]
  415f52:	lea    edx,[rax-0x30]
  415f55:	cmp    dl,0x9
  415f58:	jbe    415f30 <grisu3_diy_fp_encode_double@@Base+0x480>
  415f5a:	mov    edx,ecx
  415f5c:	sub    edx,ebx
  415f5e:	xor    esi,esi
  415f60:	mov    rbx,rcx
  415f63:	xor    ecx,ecx
  415f65:	lea    r9d,[rax-0x31]
  415f69:	cmp    r9b,0x8
  415f6d:	jbe    416133 <grisu3_diy_fp_encode_double@@Base+0x683>
  415f73:	cmp    al,0x2e
  415f75:	je     4161c0 <grisu3_diy_fp_encode_double@@Base+0x710>
  415f7b:	or     eax,0x20
  415f7e:	add    esi,edx
  415f80:	cmp    al,0x65
  415f82:	je     416270 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  415f88:	test   rdi,rdi
  415f8b:	je     4160c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  415f91:	cmp    esi,0xfffffebc
  415f97:	jl     4160c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  415f9d:	cmp    esi,0x136
  415fa3:	jg     416188 <grisu3_diy_fp_encode_double@@Base+0x6d8>
  415fa9:	movabs rax,0x1fffffffffffff
  415fb3:	cmp    rdi,rax
  415fb6:	ja     415fc1 <grisu3_diy_fp_encode_double@@Base+0x511>
  415fb8:	cmp    esi,0x16
  415fbb:	jbe    416376 <grisu3_diy_fp_encode_double@@Base+0x8c6>
  415fc1:	mov    r8,r12
  415fc4:	call   415ab0 <grisu3_diy_fp_encode_double@@Base>
  415fc9:	test   eax,eax
  415fcb:	jne    4160c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  415fd1:	mov    rsi,rsp
  415fd4:	mov    rdi,rbp
  415fd7:	call   403190 <strtod@plt>
  415fdc:	mov    rax,QWORD PTR [rsp]
  415fe0:	vmovsd QWORD PTR [r12],xmm0
  415fe6:	cmp    rbx,rax
  415fe9:	cmova  rbx,rax
  415fed:	nop    DWORD PTR [rax]
  415ff0:	mov    rsi,QWORD PTR [rsp+0x8]
  415ff5:	xor    rsi,QWORD PTR fs:0x28
  415ffe:	mov    rax,rbx
  416001:	jne    41665d <grisu3_diy_fp_encode_double@@Base+0xbad>
  416007:	add    rsp,0x10
  41600b:	pop    rbx
  41600c:	pop    rbp
  41600d:	pop    r12
  41600f:	pop    r13
  416011:	pop    r14
  416013:	ret    
  416014:	nop    DWORD PTR [rax+0x0]
  416018:	mov    rax,rbp
  41601b:	xor    r13d,r13d
  41601e:	lea    rbx,[rax+0x1]
  416022:	cmp    r8,rbx
  416025:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416027:	movsx  rax,BYTE PTR [rax+0x1]
  41602c:	mov    edx,eax
  41602e:	or     edx,0x20
  416031:	cmp    dl,0x78
  416034:	je     4165d0 <grisu3_diy_fp_encode_double@@Base+0xb20>
  41603a:	cmp    al,0x30
  41603c:	je     416054 <grisu3_diy_fp_encode_double@@Base+0x5a4>
  41603e:	jmp    416310 <grisu3_diy_fp_encode_double@@Base+0x860>
  416043:	nop    DWORD PTR [rax+rax*1+0x0]
  416048:	movsx  rax,BYTE PTR [rbx]
  41604c:	cmp    al,0x30
  41604e:	jne    416310 <grisu3_diy_fp_encode_double@@Base+0x860>
  416054:	inc    rbx
  416057:	cmp    r8,rbx
  41605a:	jne    416048 <grisu3_diy_fp_encode_double@@Base+0x598>
  41605c:	nop    DWORD PTR [rax+0x0]
  416060:	xor    ebx,ebx
  416062:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  416064:	nop    DWORD PTR [rax+0x0]
  416068:	xor    edx,edx
  41606a:	cmp    al,0x34
  41606c:	setg   dl
  41606f:	add    rdi,rdx
  416072:	mov    edx,ecx
  416074:	sub    edx,ebx
  416076:	mov    rbx,rcx
  416079:	mov    ecx,0x1
  41607e:	cmp    al,0x30
  416080:	jne    4165f5 <grisu3_diy_fp_encode_double@@Base+0xb45>
  416086:	sub    ecx,ebx
  416088:	jmp    41609b <grisu3_diy_fp_encode_double@@Base+0x5eb>
  41608a:	nop    WORD PTR [rax+rax*1+0x0]
  416090:	movzx  eax,BYTE PTR [rbx]
  416093:	cmp    al,0x30
  416095:	jne    416120 <grisu3_diy_fp_encode_double@@Base+0x670>
  41609b:	lea    esi,[rcx+rbx*1]
  41609e:	inc    rbx
  4160a1:	cmp    r8,rbx
  4160a4:	jne    416090 <grisu3_diy_fp_encode_double@@Base+0x5e0>
  4160a6:	jmp    416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4160a8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x6058]        # 41c108 <flatcc_builder_padding_base@@Base+0x1188>
  4160b0:	vmovsd QWORD PTR [r12],xmm0
  4160b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4160c0:	test   r13d,r13d
  4160c3:	je     415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4160c9:	vmovsd xmm0,QWORD PTR [r12]
  4160cf:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x4399]        # 41a470 <_IO_stdin_used@@Base+0x470>
  4160d7:	vmovsd QWORD PTR [r12],xmm0
  4160dd:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4160e2:	nop    WORD PTR [rax+rax*1+0x0]
  4160e8:	lea    rax,[rbp+0x1]
  4160ec:	cmp    r8,rax
  4160ef:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4160f5:	movsx  edi,BYTE PTR [rbp+0x1]
  4160f9:	cmp    dil,0x30
  4160fd:	je     4161a0 <grisu3_diy_fp_encode_double@@Base+0x6f0>
  416103:	lea    edx,[rdi-0x31]
  416106:	xor    ebx,ebx
  416108:	mov    r13d,0x1
  41610e:	cmp    dl,0x8
  416111:	jbe    415ef5 <grisu3_diy_fp_encode_double@@Base+0x445>
  416117:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41611c:	nop    DWORD PTR [rax+0x0]
  416120:	lea    r9d,[rax-0x31]
  416124:	mov    ecx,0x1
  416129:	cmp    r9b,0x8
  41612d:	ja     415f73 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  416133:	lea    rcx,[rbx+0x1]
  416137:	lea    r10d,[rsi+0x1]
  41613b:	cmp    r8,rcx
  41613e:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416144:	movzx  eax,BYTE PTR [rbx+0x1]
  416148:	lea    r9d,[rax-0x30]
  41614c:	cmp    r9b,0x9
  416150:	ja     41664a <grisu3_diy_fp_encode_double@@Base+0xb9a>
  416156:	lea    r9d,[rsi+0x2]
  41615a:	mov    rbx,rcx
  41615d:	sub    r9d,ecx
  416160:	lea    esi,[r9+rbx*1]
  416164:	inc    rbx
  416167:	cmp    r8,rbx
  41616a:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416170:	movzx  eax,BYTE PTR [rbx]
  416173:	lea    ecx,[rax-0x30]
  416176:	cmp    cl,0x9
  416179:	jbe    416160 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  41617b:	mov    ecx,0x1
  416180:	jmp    415f73 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  416185:	nop    DWORD PTR [rax]
  416188:	mov    rax,QWORD PTR [rip+0x5f69]        # 41c0f8 <flatcc_builder_padding_base@@Base+0x1178>
  41618f:	mov    QWORD PTR [r12],rax
  416193:	jmp    4160c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  416198:	nop    DWORD PTR [rax+rax*1+0x0]
  4161a0:	mov    r13d,0x1
  4161a6:	jmp    41601e <grisu3_diy_fp_encode_double@@Base+0x56e>
  4161ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4161b0:	mov    rbx,r8
  4161b3:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4161b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4161c0:	movsx  rax,BYTE PTR [rbx+0x1]
  4161c5:	lea    r10,[rbx+0x1]
  4161c9:	lea    r9d,[rax-0x30]
  4161cd:	cmp    r9b,0x9
  4161d1:	ja     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4161d7:	cmp    r8,r10
  4161da:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4161e0:	movabs r11,0x1999999999999998
  4161ea:	cmp    rdi,r11
  4161ed:	ja     416655 <grisu3_diy_fp_encode_double@@Base+0xba5>
  4161f3:	mov    rbx,r10
  4161f6:	jmp    416209 <grisu3_diy_fp_encode_double@@Base+0x759>
  4161f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416200:	cmp    rdi,r11
  416203:	ja     41661c <grisu3_diy_fp_encode_double@@Base+0xb6c>
  416209:	lea    rdi,[rdi+rdi*4]
  41620d:	inc    rbx
  416210:	lea    rdi,[rax+rdi*2-0x30]
  416215:	mov    eax,esi
  416217:	sub    eax,ebx
  416219:	lea    r9d,[rax+r10*1]
  41621d:	cmp    r8,rbx
  416220:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416226:	movsx  rax,BYTE PTR [rbx]
  41622a:	lea    r14d,[rax-0x30]
  41622e:	cmp    r14b,0x9
  416232:	jbe    416200 <grisu3_diy_fp_encode_double@@Base+0x750>
  416234:	mov    rax,rbx
  416237:	sub    rax,r10
  41623a:	add    edx,eax
  41623c:	movzx  eax,BYTE PTR [rbx]
  41623f:	cmp    al,0x30
  416241:	jne    416317 <grisu3_diy_fp_encode_double@@Base+0x867>
  416247:	inc    r9d
  41624a:	sub    r9d,ebx
  41624d:	jmp    41625b <grisu3_diy_fp_encode_double@@Base+0x7ab>
  41624f:	nop
  416250:	movzx  eax,BYTE PTR [rbx]
  416253:	cmp    al,0x30
  416255:	jne    416320 <grisu3_diy_fp_encode_double@@Base+0x870>
  41625b:	lea    esi,[r9+rbx*1]
  41625f:	inc    rbx
  416262:	cmp    r8,rbx
  416265:	jne    416250 <grisu3_diy_fp_encode_double@@Base+0x7a0>
  416267:	xor    ebx,ebx
  416269:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41626e:	xchg   ax,ax
  416270:	mov    rax,r8
  416273:	sub    rax,rbx
  416276:	cmp    rax,0x1
  41627a:	jle    416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416280:	movsx  eax,BYTE PTR [rbx+0x1]
  416284:	cmp    al,0x2b
  416286:	je     4165d8 <grisu3_diy_fp_encode_double@@Base+0xb28>
  41628c:	cmp    al,0x2d
  41628e:	je     416600 <grisu3_diy_fp_encode_double@@Base+0xb50>
  416294:	lea    r9,[rbx+0x1]
  416298:	xor    r11d,r11d
  41629b:	lea    r10d,[rax-0x30]
  41629f:	cmp    r10b,0x9
  4162a3:	ja     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4162a9:	lea    rbx,[r9+0x1]
  4162ad:	sub    eax,0x30
  4162b0:	cmp    r8,rbx
  4162b3:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4162b9:	movsx  r9d,BYTE PTR [r9+0x1]
  4162be:	lea    r10d,[r9-0x30]
  4162c2:	cmp    r10b,0x9
  4162c6:	ja     4162f9 <grisu3_diy_fp_encode_double@@Base+0x849>
  4162c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4162d0:	cmp    eax,0x7fff
  4162d5:	jg     4162df <grisu3_diy_fp_encode_double@@Base+0x82f>
  4162d7:	lea    eax,[rax+rax*4]
  4162da:	lea    eax,[r9+rax*2-0x30]
  4162df:	inc    rbx
  4162e2:	cmp    r8,rbx
  4162e5:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4162eb:	movsx  r9d,BYTE PTR [rbx]
  4162ef:	lea    r10d,[r9-0x30]
  4162f3:	cmp    r10b,0x9
  4162f7:	jbe    4162d0 <grisu3_diy_fp_encode_double@@Base+0x820>
  4162f9:	lea    r8d,[rsi+rax*1]
  4162fd:	sub    esi,eax
  4162ff:	test   r11d,r11d
  416302:	cmove  esi,r8d
  416306:	jmp    415f88 <grisu3_diy_fp_encode_double@@Base+0x4d8>
  41630b:	nop    DWORD PTR [rax+rax*1+0x0]
  416310:	xor    edi,edi
  416312:	jmp    415f0d <grisu3_diy_fp_encode_double@@Base+0x45d>
  416317:	mov    esi,r9d
  41631a:	nop    WORD PTR [rax+rax*1+0x0]
  416320:	lea    r9d,[rax-0x31]
  416324:	cmp    r9b,0x8
  416328:	ja     415f7b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  41632e:	lea    rcx,[rbx+0x1]
  416332:	cmp    r8,rcx
  416335:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41633b:	movzx  eax,BYTE PTR [rbx+0x1]
  41633f:	lea    r9d,[rax-0x30]
  416343:	cmp    r9b,0x9
  416347:	ja     416369 <grisu3_diy_fp_encode_double@@Base+0x8b9>
  416349:	nop    DWORD PTR [rax+0x0]
  416350:	inc    rcx
  416353:	cmp    r8,rcx
  416356:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41635c:	movzx  eax,BYTE PTR [rcx]
  41635f:	lea    r9d,[rax-0x30]
  416363:	cmp    r9b,0x9
  416367:	jbe    416350 <grisu3_diy_fp_encode_double@@Base+0x8a0>
  416369:	mov    rbx,rcx
  41636c:	mov    ecx,0x1
  416371:	jmp    415f7b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  416376:	sub    esi,edx
  416378:	vxorpd xmm0,xmm0,xmm0
  41637c:	lea    eax,[rsi+0x16]
  41637f:	vcvtsi2sd xmm0,xmm0,rdi
  416384:	cmp    eax,0x2c
  416387:	ja     4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41638d:	lea    rdx,[rip+0x528c]        # 41b620 <flatcc_builder_padding_base@@Base+0x6a0>
  416394:	movsxd rax,DWORD PTR [rdx+rax*4]
  416398:	add    rax,rdx
  41639b:	notrack jmp rax
  41639e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d6a]        # 41c110 <flatcc_builder_padding_base@@Base+0x1190>
  4163a6:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163ab:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d65]        # 41c118 <flatcc_builder_padding_base@@Base+0x1198>
  4163b3:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163b8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d60]        # 41c120 <flatcc_builder_padding_base@@Base+0x11a0>
  4163c0:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163c5:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d5b]        # 41c128 <flatcc_builder_padding_base@@Base+0x11a8>
  4163cd:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163d2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d56]        # 41c130 <flatcc_builder_padding_base@@Base+0x11b0>
  4163da:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163df:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d51]        # 41c138 <flatcc_builder_padding_base@@Base+0x11b8>
  4163e7:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163ec:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d4c]        # 41c140 <flatcc_builder_padding_base@@Base+0x11c0>
  4163f4:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4163f9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d47]        # 41c148 <flatcc_builder_padding_base@@Base+0x11c8>
  416401:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416406:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d42]        # 41c150 <flatcc_builder_padding_base@@Base+0x11d0>
  41640e:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416413:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d3d]        # 41c158 <flatcc_builder_padding_base@@Base+0x11d8>
  41641b:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416420:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d38]        # 41c160 <flatcc_builder_padding_base@@Base+0x11e0>
  416428:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41642d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d33]        # 41c168 <flatcc_builder_padding_base@@Base+0x11e8>
  416435:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41643a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d2e]        # 41c170 <flatcc_builder_padding_base@@Base+0x11f0>
  416442:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416447:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d29]        # 41c178 <flatcc_builder_padding_base@@Base+0x11f8>
  41644f:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416454:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d24]        # 41c180 <flatcc_builder_padding_base@@Base+0x1200>
  41645c:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416461:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d1f]        # 41c188 <flatcc_builder_padding_base@@Base+0x1208>
  416469:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41646e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d1a]        # 41c190 <flatcc_builder_padding_base@@Base+0x1210>
  416476:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41647b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d15]        # 41c198 <flatcc_builder_padding_base@@Base+0x1218>
  416483:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416488:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d10]        # 41c1a0 <flatcc_builder_padding_base@@Base+0x1220>
  416490:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416495:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5d0b]        # 41c1a8 <flatcc_builder_padding_base@@Base+0x1228>
  41649d:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164a2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5c56]        # 41c100 <flatcc_builder_padding_base@@Base+0x1180>
  4164aa:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164af:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5cf1]        # 41c1a8 <flatcc_builder_padding_base@@Base+0x1228>
  4164b7:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164bc:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5cdc]        # 41c1a0 <flatcc_builder_padding_base@@Base+0x1220>
  4164c4:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164c9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5cc7]        # 41c198 <flatcc_builder_padding_base@@Base+0x1218>
  4164d1:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164d6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5cb2]        # 41c190 <flatcc_builder_padding_base@@Base+0x1210>
  4164de:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164e3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c9d]        # 41c188 <flatcc_builder_padding_base@@Base+0x1208>
  4164eb:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164f0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c88]        # 41c180 <flatcc_builder_padding_base@@Base+0x1200>
  4164f8:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4164fd:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c73]        # 41c178 <flatcc_builder_padding_base@@Base+0x11f8>
  416505:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41650a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c5e]        # 41c170 <flatcc_builder_padding_base@@Base+0x11f0>
  416512:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416517:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c49]        # 41c168 <flatcc_builder_padding_base@@Base+0x11e8>
  41651f:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416524:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c34]        # 41c160 <flatcc_builder_padding_base@@Base+0x11e0>
  41652c:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416531:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c1f]        # 41c158 <flatcc_builder_padding_base@@Base+0x11d8>
  416539:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41653e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5c0a]        # 41c150 <flatcc_builder_padding_base@@Base+0x11d0>
  416546:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41654b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5bf5]        # 41c148 <flatcc_builder_padding_base@@Base+0x11c8>
  416553:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416558:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5be0]        # 41c140 <flatcc_builder_padding_base@@Base+0x11c0>
  416560:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416565:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5bcb]        # 41c138 <flatcc_builder_padding_base@@Base+0x11b8>
  41656d:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416572:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5bb6]        # 41c130 <flatcc_builder_padding_base@@Base+0x11b0>
  41657a:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41657f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5ba1]        # 41c128 <flatcc_builder_padding_base@@Base+0x11a8>
  416587:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  41658c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5b8c]        # 41c120 <flatcc_builder_padding_base@@Base+0x11a0>
  416594:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  416599:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5b77]        # 41c118 <flatcc_builder_padding_base@@Base+0x1198>
  4165a1:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4165a6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5b52]        # 41c100 <flatcc_builder_padding_base@@Base+0x1180>
  4165ae:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4165b3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5b55]        # 41c110 <flatcc_builder_padding_base@@Base+0x1190>
  4165bb:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4165c0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5b40]        # 41c108 <flatcc_builder_padding_base@@Base+0x1188>
  4165c8:	jmp    4160b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4165cd:	nop    DWORD PTR [rax]
  4165d0:	mov    rbx,rbp
  4165d3:	jmp    415ff0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4165d8:	lea    r9,[rbx+0x2]
  4165dc:	cmp    r8,r9
  4165df:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4165e5:	movsx  eax,BYTE PTR [rbx+0x2]
  4165e9:	xor    r11d,r11d
  4165ec:	jmp    41629b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  4165f1:	xor    edx,edx
  4165f3:	xor    ecx,ecx
  4165f5:	xor    esi,esi
  4165f7:	jmp    415f65 <grisu3_diy_fp_encode_double@@Base+0x4b5>
  4165fc:	nop    DWORD PTR [rax+0x0]
  416600:	lea    r9,[rbx+0x2]
  416604:	cmp    r8,r9
  416607:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41660d:	movsx  eax,BYTE PTR [rbx+0x2]
  416611:	mov    r11d,0x1
  416617:	jmp    41629b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  41661c:	mov    rsi,rbx
  41661f:	sub    rsi,r10
  416622:	add    edx,esi
  416624:	test   ecx,ecx
  416626:	jne    41623c <grisu3_diy_fp_encode_double@@Base+0x78c>
  41662c:	cmp    al,0x34
  41662e:	setg   al
  416631:	movzx  eax,al
  416634:	add    rdi,rax
  416637:	cmp    r8,rbx
  41663a:	je     416060 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  416640:	mov    ecx,0x1
  416645:	jmp    41623c <grisu3_diy_fp_encode_double@@Base+0x78c>
  41664a:	mov    esi,r10d
  41664d:	mov    rbx,rcx
  416650:	jmp    41617b <grisu3_diy_fp_encode_double@@Base+0x6cb>
  416655:	mov    r9d,esi
  416658:	mov    rbx,r10
  41665b:	jmp    416624 <grisu3_diy_fp_encode_double@@Base+0xb74>
  41665d:	call   4031c0 <__stack_chk_fail@plt>
  416662:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41666d:	nop    DWORD PTR [rax]

0000000000416670 <flatcc_json_parser_error_string@@Base>:
  416670:	endbr64 
  416674:	cmp    edi,0x22
  416677:	ja     4168c0 <flatcc_json_parser_error_string@@Base+0x250>
  41667d:	lea    rdx,[rip+0x5050]        # 41b6d4 <flatcc_builder_padding_base@@Base+0x754>
  416684:	mov    edi,edi
  416686:	movsxd rax,DWORD PTR [rdx+rdi*4]
  41668a:	add    rax,rdx
  41668d:	notrack jmp rax
  416690:	lea    rax,[rip+0x4d24]        # 41b3bb <flatcc_builder_padding_base@@Base+0x43b>
  416697:	ret    
  416698:	nop    DWORD PTR [rax+rax*1+0x0]
  4166a0:	lea    rax,[rip+0x4f42]        # 41b5e9 <flatcc_builder_padding_base@@Base+0x669>
  4166a7:	ret    
  4166a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166b0:	lea    rax,[rip+0x4f24]        # 41b5db <flatcc_builder_padding_base@@Base+0x65b>
  4166b7:	ret    
  4166b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166c0:	lea    rax,[rip+0x4efa]        # 41b5c1 <flatcc_builder_padding_base@@Base+0x641>
  4166c7:	ret    
  4166c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166d0:	lea    rax,[rip+0x4ed3]        # 41b5aa <flatcc_builder_padding_base@@Base+0x62a>
  4166d7:	ret    
  4166d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166e0:	lea    rax,[rip+0x4ea6]        # 41b58d <flatcc_builder_padding_base@@Base+0x60d>
  4166e7:	ret    
  4166e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166f0:	lea    rax,[rip+0x4e7f]        # 41b576 <flatcc_builder_padding_base@@Base+0x5f6>
  4166f7:	ret    
  4166f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416700:	lea    rax,[rip+0x4e55]        # 41b55c <flatcc_builder_padding_base@@Base+0x5dc>
  416707:	ret    
  416708:	nop    DWORD PTR [rax+rax*1+0x0]
  416710:	lea    rax,[rip+0x4e2a]        # 41b541 <flatcc_builder_padding_base@@Base+0x5c1>
  416717:	ret    
  416718:	nop    DWORD PTR [rax+rax*1+0x0]
  416720:	lea    rax,[rip+0x4bb9]        # 41b2e0 <flatcc_builder_padding_base@@Base+0x360>
  416727:	ret    
  416728:	nop    DWORD PTR [rax+rax*1+0x0]
  416730:	lea    rax,[rip+0x4ded]        # 41b524 <flatcc_builder_padding_base@@Base+0x5a4>
  416737:	ret    
  416738:	nop    DWORD PTR [rax+rax*1+0x0]
  416740:	lea    rax,[rip+0x4dc9]        # 41b510 <flatcc_builder_padding_base@@Base+0x590>
  416747:	ret    
  416748:	nop    DWORD PTR [rax+rax*1+0x0]
  416750:	lea    rax,[rip+0x4b61]        # 41b2b8 <flatcc_builder_padding_base@@Base+0x338>
  416757:	ret    
  416758:	nop    DWORD PTR [rax+rax*1+0x0]
  416760:	lea    rax,[rip+0x4d9a]        # 41b501 <flatcc_builder_padding_base@@Base+0x581>
  416767:	ret    
  416768:	nop    DWORD PTR [rax+rax*1+0x0]
  416770:	lea    rax,[rip+0x4d7a]        # 41b4f1 <flatcc_builder_padding_base@@Base+0x571>
  416777:	ret    
  416778:	nop    DWORD PTR [rax+rax*1+0x0]
  416780:	lea    rax,[rip+0x4d56]        # 41b4dd <flatcc_builder_padding_base@@Base+0x55d>
  416787:	ret    
  416788:	nop    DWORD PTR [rax+rax*1+0x0]
  416790:	lea    rax,[rip+0x4d39]        # 41b4d0 <flatcc_builder_padding_base@@Base+0x550>
  416797:	ret    
  416798:	nop    DWORD PTR [rax+rax*1+0x0]
  4167a0:	lea    rax,[rip+0x4d1a]        # 41b4c1 <flatcc_builder_padding_base@@Base+0x541>
  4167a7:	ret    
  4167a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167b0:	lea    rax,[rip+0x4cf8]        # 41b4af <flatcc_builder_padding_base@@Base+0x52f>
  4167b7:	ret    
  4167b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167c0:	lea    rax,[rip+0x4cd8]        # 41b49f <flatcc_builder_padding_base@@Base+0x51f>
  4167c7:	ret    
  4167c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167d0:	lea    rax,[rip+0x4cb5]        # 41b48c <flatcc_builder_padding_base@@Base+0x50c>
  4167d7:	ret    
  4167d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167e0:	lea    rax,[rip+0x4c8c]        # 41b473 <flatcc_builder_padding_base@@Base+0x4f3>
  4167e7:	ret    
  4167e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167f0:	lea    rax,[rip+0x4c6d]        # 41b464 <flatcc_builder_padding_base@@Base+0x4e4>
  4167f7:	ret    
  4167f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416800:	lea    rax,[rip+0x4c4c]        # 41b453 <flatcc_builder_padding_base@@Base+0x4d3>
  416807:	ret    
  416808:	nop    DWORD PTR [rax+rax*1+0x0]
  416810:	lea    rax,[rip+0x4c2d]        # 41b444 <flatcc_builder_padding_base@@Base+0x4c4>
  416817:	ret    
  416818:	nop    DWORD PTR [rax+rax*1+0x0]
  416820:	lea    rax,[rip+0x4c0b]        # 41b432 <flatcc_builder_padding_base@@Base+0x4b2>
  416827:	ret    
  416828:	nop    DWORD PTR [rax+rax*1+0x0]
  416830:	lea    rax,[rip+0x4bea]        # 41b421 <flatcc_builder_padding_base@@Base+0x4a1>
  416837:	ret    
  416838:	nop    DWORD PTR [rax+rax*1+0x0]
  416840:	lea    rax,[rip+0x4bd0]        # 41b417 <flatcc_builder_padding_base@@Base+0x497>
  416847:	ret    
  416848:	nop    DWORD PTR [rax+rax*1+0x0]
  416850:	lea    rax,[rip+0x4bb7]        # 41b40e <flatcc_builder_padding_base@@Base+0x48e>
  416857:	ret    
  416858:	nop    DWORD PTR [rax+rax*1+0x0]
  416860:	lea    rax,[rip+0x4b97]        # 41b3fe <flatcc_builder_padding_base@@Base+0x47e>
  416867:	ret    
  416868:	nop    DWORD PTR [rax+rax*1+0x0]
  416870:	lea    rax,[rip+0x4b72]        # 41b3e9 <flatcc_builder_padding_base@@Base+0x469>
  416877:	ret    
  416878:	nop    DWORD PTR [rax+rax*1+0x0]
  416880:	lea    rax,[rip+0x4b53]        # 41b3da <flatcc_builder_padding_base@@Base+0x45a>
  416887:	ret    
  416888:	nop    DWORD PTR [rax+rax*1+0x0]
  416890:	lea    rax,[rip+0x4b34]        # 41b3cb <flatcc_builder_padding_base@@Base+0x44b>
  416897:	ret    
  416898:	nop    DWORD PTR [rax+rax*1+0x0]
  4168a0:	lea    rax,[rip+0x4b17]        # 41b3be <flatcc_builder_padding_base@@Base+0x43e>
  4168a7:	ret    
  4168a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4168b0:	lea    rax,[rip+0x4d40]        # 41b5f7 <flatcc_builder_padding_base@@Base+0x677>
  4168b7:	ret    
  4168b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4168c0:	lea    rax,[rip+0x4aec]        # 41b3b3 <flatcc_builder_padding_base@@Base+0x433>
  4168c7:	ret    
  4168c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004168d0 <flatcc_json_parser_set_error@@Base>:
  4168d0:	endbr64 
  4168d4:	mov    rax,rdx
  4168d7:	mov    edx,DWORD PTR [rdi+0x20]
  4168da:	test   edx,edx
  4168dc:	jne    4168f1 <flatcc_json_parser_set_error@@Base+0x21>
  4168de:	mov    rdx,rsi
  4168e1:	sub    rdx,QWORD PTR [rdi+0x8]
  4168e5:	inc    edx
  4168e7:	mov    DWORD PTR [rdi+0x20],ecx
  4168ea:	mov    DWORD PTR [rdi+0x1c],edx
  4168ed:	mov    QWORD PTR [rdi+0x38],rsi
  4168f1:	ret    
  4168f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4168fd:	nop    DWORD PTR [rax]

0000000000416900 <flatcc_json_parser_string_part@@Base>:
  416900:	endbr64 
  416904:	cmp    rsi,rdx
  416907:	jne    416920 <flatcc_json_parser_string_part@@Base+0x20>
  416909:	jmp    416940 <flatcc_json_parser_string_part@@Base+0x40>
  41690b:	nop    DWORD PTR [rax+rax*1+0x0]
  416910:	cmp    al,0x5c
  416912:	je     416930 <flatcc_json_parser_string_part@@Base+0x30>
  416914:	cmp    al,0x1f
  416916:	jbe    416930 <flatcc_json_parser_string_part@@Base+0x30>
  416918:	inc    rsi
  41691b:	cmp    rdx,rsi
  41691e:	je     416940 <flatcc_json_parser_string_part@@Base+0x40>
  416920:	movzx  eax,BYTE PTR [rsi]
  416923:	cmp    al,0x22
  416925:	jne    416910 <flatcc_json_parser_string_part@@Base+0x10>
  416927:	mov    rax,rsi
  41692a:	ret    
  41692b:	nop    DWORD PTR [rax+rax*1+0x0]
  416930:	cmp    al,0x1f
  416932:	jg     416927 <flatcc_json_parser_string_part@@Base+0x27>
  416934:	mov    ecx,0x11
  416939:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  41693e:	xchg   ax,ax
  416940:	mov    ecx,0x14
  416945:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  41694a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000416950 <flatcc_json_parser_space_ext@@Base>:
  416950:	endbr64 
  416954:	mov    rax,rdx
  416957:	sub    rax,rsi
  41695a:	cmp    rax,0xf
  41695e:	jle    416997 <flatcc_json_parser_space_ext@@Base+0x47>
  416960:	movzx  eax,BYTE PTR [rsi]
  416963:	cmp    al,0x20
  416965:	jg     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  416967:	cmp    WORD PTR [rsi],0x2020
  41696c:	je     416980 <flatcc_json_parser_space_ext@@Base+0x30>
  41696e:	cmp    al,0x20
  416970:	je     41698c <flatcc_json_parser_space_ext@@Base+0x3c>
  416972:	cmp    rsi,rdx
  416975:	jne    4169b7 <flatcc_json_parser_space_ext@@Base+0x67>
  416977:	mov    rax,rsi
  41697a:	ret    
  41697b:	nop    DWORD PTR [rax+rax*1+0x0]
  416980:	movzx  eax,BYTE PTR [rsi+0x2]
  416984:	add    rsi,0x2
  416988:	cmp    al,0x20
  41698a:	jne    416993 <flatcc_json_parser_space_ext@@Base+0x43>
  41698c:	movzx  eax,BYTE PTR [rsi+0x1]
  416990:	inc    rsi
  416993:	cmp    al,0x20
  416995:	jg     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  416997:	cmp    rdx,rsi
  41699a:	je     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  41699c:	movzx  eax,BYTE PTR [rsi]
  41699f:	cmp    al,0x20
  4169a1:	jne    4169b7 <flatcc_json_parser_space_ext@@Base+0x67>
  4169a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4169a8:	inc    rsi
  4169ab:	cmp    rdx,rsi
  4169ae:	je     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  4169b0:	movzx  eax,BYTE PTR [rsi]
  4169b3:	cmp    al,0x20
  4169b5:	je     4169a8 <flatcc_json_parser_space_ext@@Base+0x58>
  4169b7:	cmp    al,0x20
  4169b9:	jg     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  4169bb:	cmp    al,0xa
  4169bd:	je     4169ef <flatcc_json_parser_space_ext@@Base+0x9f>
  4169bf:	jle    4169d8 <flatcc_json_parser_space_ext@@Base+0x88>
  4169c1:	cmp    al,0xd
  4169c3:	je     416a00 <flatcc_json_parser_space_ext@@Base+0xb0>
  4169c5:	cmp    al,0x20
  4169c7:	je     416954 <flatcc_json_parser_space_ext@@Base+0x4>
  4169c9:	mov    ecx,0x5
  4169ce:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4169d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4169d8:	cmp    al,0x9
  4169da:	jne    4169c9 <flatcc_json_parser_space_ext@@Base+0x79>
  4169dc:	inc    rsi
  4169df:	cmp    rdx,rsi
  4169e2:	je     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  4169e4:	movzx  eax,BYTE PTR [rsi]
  4169e7:	cmp    al,0x20
  4169e9:	jg     416977 <flatcc_json_parser_space_ext@@Base+0x27>
  4169eb:	cmp    al,0xa
  4169ed:	jne    4169bf <flatcc_json_parser_space_ext@@Base+0x6f>
  4169ef:	inc    rsi
  4169f2:	inc    DWORD PTR [rdi+0x18]
  4169f5:	mov    QWORD PTR [rdi+0x8],rsi
  4169f9:	jmp    4169df <flatcc_json_parser_space_ext@@Base+0x8f>
  4169fb:	nop    DWORD PTR [rax+rax*1+0x0]
  416a00:	mov    rcx,rdx
  416a03:	sub    rcx,rsi
  416a06:	lea    rax,[rsi+0x1]
  416a0a:	cmp    rcx,0x1
  416a0e:	jle    416a16 <flatcc_json_parser_space_ext@@Base+0xc6>
  416a10:	cmp    BYTE PTR [rsi+0x1],0xa
  416a14:	je     416a1b <flatcc_json_parser_space_ext@@Base+0xcb>
  416a16:	mov    rsi,rax
  416a19:	jmp    4169f2 <flatcc_json_parser_space_ext@@Base+0xa2>
  416a1b:	lea    rax,[rsi+0x2]
  416a1f:	jmp    416a16 <flatcc_json_parser_space_ext@@Base+0xc6>
  416a21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416a2c:	nop    DWORD PTR [rax+0x0]
  416a30:	push   r15
  416a32:	push   r14
  416a34:	push   r13
  416a36:	push   r12
  416a38:	mov    r12,rdi
  416a3b:	push   rbp
  416a3c:	push   rbx
  416a3d:	mov    rbx,rdx
  416a40:	sub    rsp,0x58
  416a44:	mov    QWORD PTR [rsp+0x10],rcx
  416a49:	mov    QWORD PTR [rsp+0x20],r8
  416a4e:	mov    rdx,QWORD PTR fs:0x28
  416a57:	mov    QWORD PTR [rsp+0x48],rdx
  416a5c:	xor    edx,edx
  416a5e:	mov    BYTE PTR [r8],0x0
  416a62:	cmp    rsi,rbx
  416a65:	je     416bfa <flatcc_json_parser_space_ext@@Base+0x2aa>
  416a6b:	movzx  eax,BYTE PTR [rsi]
  416a6e:	cmp    al,0x22
  416a70:	je     416c50 <flatcc_json_parser_space_ext@@Base+0x300>
  416a76:	cmp    al,0x2e
  416a78:	je     416b21 <flatcc_json_parser_space_ext@@Base+0x1d1>
  416a7e:	mov    DWORD PTR [rdi+0x14],0x1
  416a85:	mov    r10,rsi
  416a88:	lea    rax,[rsp+0x38]
  416a8d:	mov    DWORD PTR [rsp+0x18],0x0
  416a95:	mov    BYTE PTR [rsp+0x1f],0x0
  416a9a:	mov    QWORD PTR [rsp+0x8],rax
  416a9f:	lea    r15,[rsp+0x3c]
  416aa4:	lea    r14,[rsp+0x40]
  416aa9:	mov    r13,QWORD PTR [rsp+0x10]
  416aae:	mov    rbp,r10
  416ab1:	mov    rax,QWORD PTR [r13+0x0]
  416ab5:	mov    rsi,r10
  416ab8:	jmp    416add <flatcc_json_parser_space_ext@@Base+0x18d>
  416aba:	nop    WORD PTR [rax+rax*1+0x0]
  416ac0:	cmp    rbp,rax
  416ac3:	jne    416b50 <flatcc_json_parser_space_ext@@Base+0x200>
  416ac9:	add    r13,0x8
  416acd:	mov    rax,QWORD PTR [r13+0x0]
  416ad1:	mov    rbp,rsi
  416ad4:	test   rax,rax
  416ad7:	je     416bb0 <flatcc_json_parser_space_ext@@Base+0x260>
  416add:	mov    rcx,QWORD PTR [rsp+0x8]
  416ae2:	mov    r9,r15
  416ae5:	mov    r8,r14
  416ae8:	mov    rdx,rbx
  416aeb:	mov    rdi,r12
  416aee:	call   rax
  416af0:	mov    rsi,rax
  416af3:	cmp    rbx,rax
  416af6:	jne    416ac0 <flatcc_json_parser_space_ext@@Base+0x170>
  416af8:	mov    r10,rsi
  416afb:	mov    rdi,QWORD PTR [rsp+0x48]
  416b00:	xor    rdi,QWORD PTR fs:0x28
  416b09:	mov    rax,r10
  416b0c:	jne    416c80 <flatcc_json_parser_space_ext@@Base+0x330>
  416b12:	add    rsp,0x58
  416b16:	pop    rbx
  416b17:	pop    rbp
  416b18:	pop    r12
  416b1a:	pop    r13
  416b1c:	pop    r14
  416b1e:	pop    r15
  416b20:	ret    
  416b21:	mov    ecx,0x5
  416b26:	mov    rdx,rbx
  416b29:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416b2e:	mov    r8d,DWORD PTR [r12+0x14]
  416b33:	mov    r10,rax
  416b36:	test   r8d,r8d
  416b39:	je     416c10 <flatcc_json_parser_space_ext@@Base+0x2c0>
  416b3f:	cmp    rbx,r10
  416b42:	jne    416a88 <flatcc_json_parser_space_ext@@Base+0x138>
  416b48:	jmp    416afb <flatcc_json_parser_space_ext@@Base+0x1ab>
  416b4a:	nop    WORD PTR [rax+rax*1+0x0]
  416b50:	mov    edx,DWORD PTR [rsp+0x18]
  416b54:	mov    r10,rax
  416b57:	test   edx,edx
  416b59:	je     416b68 <flatcc_json_parser_space_ext@@Base+0x218>
  416b5b:	mov    edi,DWORD PTR [r12+0x14]
  416b60:	test   edi,edi
  416b62:	jne    416c65 <flatcc_json_parser_space_ext@@Base+0x315>
  416b68:	mov    esi,DWORD PTR [rsp+0x38]
  416b6c:	mov    ecx,0x8
  416b71:	test   esi,esi
  416b73:	jne    416bd5 <flatcc_json_parser_space_ext@@Base+0x285>
  416b75:	mov    rax,QWORD PTR [rsp+0x40]
  416b7a:	cmp    rax,0xff
  416b80:	ja     416bd0 <flatcc_json_parser_space_ext@@Base+0x280>
  416b82:	mov    BYTE PTR [rsp+0x1f],al
  416b86:	movzx  ecx,BYTE PTR [rsp+0x1f]
  416b8b:	mov    rax,QWORD PTR [rsp+0x20]
  416b90:	inc    DWORD PTR [rsp+0x18]
  416b94:	add    BYTE PTR [rax],cl
  416b96:	mov    ecx,DWORD PTR [rsp+0x3c]
  416b9a:	test   ecx,ecx
  416b9c:	jne    416aa9 <flatcc_json_parser_space_ext@@Base+0x159>
  416ba2:	jmp    416afb <flatcc_json_parser_space_ext@@Base+0x1ab>
  416ba7:	nop    WORD PTR [rax+rax*1+0x0]
  416bb0:	mov    ecx,0x17
  416bb5:	mov    rdx,rbx
  416bb8:	mov    rdi,r12
  416bbb:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416bc0:	mov    r10,rax
  416bc3:	jmp    416afb <flatcc_json_parser_space_ext@@Base+0x1ab>
  416bc8:	nop    DWORD PTR [rax+rax*1+0x0]
  416bd0:	mov    ecx,0x7
  416bd5:	mov    rsi,r10
  416bd8:	mov    rdx,rbx
  416bdb:	mov    rdi,r12
  416bde:	mov    QWORD PTR [rsp+0x28],r10
  416be3:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416be8:	mov    r10,QWORD PTR [rsp+0x28]
  416bed:	cmp    rbx,rax
  416bf0:	jne    416b86 <flatcc_json_parser_space_ext@@Base+0x236>
  416bf2:	mov    r10,rbx
  416bf5:	jmp    416afb <flatcc_json_parser_space_ext@@Base+0x1ab>
  416bfa:	mov    eax,DWORD PTR [rdi+0x14]
  416bfd:	test   eax,eax
  416bff:	jne    416af8 <flatcc_json_parser_space_ext@@Base+0x1a8>
  416c05:	mov    r10,rbx
  416c08:	nop    DWORD PTR [rax+rax*1+0x0]
  416c10:	mov    rax,rbx
  416c13:	sub    rax,r10
  416c16:	cmp    rax,0x1
  416c1a:	jle    416c30 <flatcc_json_parser_space_ext@@Base+0x2e0>
  416c1c:	cmp    BYTE PTR [r10],0x20
  416c20:	jg     416b3f <flatcc_json_parser_space_ext@@Base+0x1ef>
  416c26:	jne    416c30 <flatcc_json_parser_space_ext@@Base+0x2e0>
  416c28:	cmp    BYTE PTR [r10+0x1],0x20
  416c2d:	jg     416c5d <flatcc_json_parser_space_ext@@Base+0x30d>
  416c2f:	nop
  416c30:	mov    rsi,r10
  416c33:	mov    rdx,rbx
  416c36:	mov    rdi,r12
  416c39:	call   416950 <flatcc_json_parser_space_ext@@Base>
  416c3e:	mov    r10,rax
  416c41:	jmp    416b3f <flatcc_json_parser_space_ext@@Base+0x1ef>
  416c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416c50:	lea    r10,[rsi+0x1]
  416c54:	mov    DWORD PTR [rdi+0x14],0x0
  416c5b:	jmp    416c10 <flatcc_json_parser_space_ext@@Base+0x2c0>
  416c5d:	inc    r10
  416c60:	jmp    416b3f <flatcc_json_parser_space_ext@@Base+0x1ef>
  416c65:	mov    rsi,r10
  416c68:	mov    ecx,0xe
  416c6d:	mov    rdx,rbx
  416c70:	mov    rdi,r12
  416c73:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416c78:	mov    r10,rax
  416c7b:	jmp    416afb <flatcc_json_parser_space_ext@@Base+0x1ab>
  416c80:	call   4031c0 <__stack_chk_fail@plt>
  416c85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416c90:	push   r15
  416c92:	push   r14
  416c94:	push   r13
  416c96:	push   r12
  416c98:	mov    r12,rsi
  416c9b:	push   rbp
  416c9c:	mov    rbp,rdi
  416c9f:	push   rbx
  416ca0:	mov    rbx,rdx
  416ca3:	sub    rsp,0x38
  416ca7:	mov    QWORD PTR [rsp],rcx
  416cab:	mov    DWORD PTR [rsp+0x8],r8d
  416cb0:	mov    DWORD PTR [rsp+0x1c],r9d
  416cb5:	mov    rdi,QWORD PTR [rdi]
  416cb8:	mov    r15,QWORD PTR [rsp+0x70]
  416cbd:	mov    rax,QWORD PTR fs:0x28
  416cc6:	mov    QWORD PTR [rsp+0x28],rax
  416ccb:	xor    eax,eax
  416ccd:	mov    DWORD PTR [rsp+0x24],0x0
  416cd5:	call   412f20 <flatcc_builder_start_offset_vector@@Base>
  416cda:	test   eax,eax
  416cdc:	je     416d20 <flatcc_json_parser_space_ext@@Base+0x3d0>
  416cde:	mov    ecx,0x21
  416ce3:	mov    rdx,rbx
  416ce6:	mov    rsi,r12
  416ce9:	mov    rdi,rbp
  416cec:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416cf1:	mov    r14,rax
  416cf4:	mov    rcx,QWORD PTR [rsp+0x28]
  416cf9:	xor    rcx,QWORD PTR fs:0x28
  416d02:	mov    rax,r14
  416d05:	jne    4170a3 <flatcc_json_parser_space_ext@@Base+0x753>
  416d0b:	add    rsp,0x38
  416d0f:	pop    rbx
  416d10:	pop    rbp
  416d11:	pop    r12
  416d13:	pop    r13
  416d15:	pop    r14
  416d17:	pop    r15
  416d19:	ret    
  416d1a:	nop    WORD PTR [rax+rax*1+0x0]
  416d20:	cmp    r12,rbx
  416d23:	je     416d30 <flatcc_json_parser_space_ext@@Base+0x3e0>
  416d25:	cmp    BYTE PTR [r12],0x5b
  416d2a:	je     416dd0 <flatcc_json_parser_space_ext@@Base+0x480>
  416d30:	mov    rsi,r12
  416d33:	mov    ecx,0x16
  416d38:	mov    rdx,rbx
  416d3b:	mov    rdi,rbp
  416d3e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416d43:	mov    r14,rax
  416d46:	mov    eax,DWORD PTR [rsp+0x8]
  416d4a:	xor    r12d,r12d
  416d4d:	mov    QWORD PTR [rsp+0x8],rax
  416d52:	nop    WORD PTR [rax+rax*1+0x0]
  416d58:	cmp    r12,QWORD PTR [rsp+0x8]
  416d5d:	je     416d80 <flatcc_json_parser_space_ext@@Base+0x430>
  416d5f:	mov    rsi,r14
  416d62:	mov    ecx,0x1e
  416d67:	mov    rdx,rbx
  416d6a:	mov    rdi,rbp
  416d6d:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416d72:	mov    r14,rax
  416d75:	jmp    416cf4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  416d7a:	nop    WORD PTR [rax+rax*1+0x0]
  416d80:	mov    rsi,QWORD PTR [rsp]
  416d84:	mov    rdi,QWORD PTR [rbp+0x0]
  416d88:	mov    r12,r14
  416d8b:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  416d90:	mov    rdi,QWORD PTR [rbp+0x0]
  416d94:	mov    rsi,rax
  416d97:	call   413fc0 <flatcc_builder_end_offset_vector_for_unions@@Base>
  416d9c:	mov    DWORD PTR [rsp+0x24],eax
  416da0:	test   eax,eax
  416da2:	je     416cde <flatcc_json_parser_space_ext@@Base+0x38e>
  416da8:	movzx  esi,WORD PTR [rsp+0x1c]
  416dad:	mov    rdi,QWORD PTR [rbp+0x0]
  416db1:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  416db6:	test   rax,rax
  416db9:	je     416cde <flatcc_json_parser_space_ext@@Base+0x38e>
  416dbf:	mov    edx,DWORD PTR [rsp+0x24]
  416dc3:	mov    DWORD PTR [rax],edx
  416dc5:	jmp    416cf4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  416dca:	nop    WORD PTR [rax+rax*1+0x0]
  416dd0:	lea    r13,[r12+0x1]
  416dd5:	mov    rax,rbx
  416dd8:	sub    rax,r13
  416ddb:	cmp    rax,0x1
  416ddf:	jle    416def <flatcc_json_parser_space_ext@@Base+0x49f>
  416de1:	cmp    BYTE PTR [r12+0x1],0x20
  416de7:	jg     416e00 <flatcc_json_parser_space_ext@@Base+0x4b0>
  416de9:	je     41703b <flatcc_json_parser_space_ext@@Base+0x6eb>
  416def:	mov    rsi,r13
  416df2:	mov    rdx,rbx
  416df5:	mov    rdi,rbp
  416df8:	call   416950 <flatcc_json_parser_space_ext@@Base>
  416dfd:	mov    r13,rax
  416e00:	mov    eax,DWORD PTR [rsp+0x8]
  416e04:	mov    QWORD PTR [rsp+0x8],rax
  416e09:	cmp    rbx,r13
  416e0c:	je     416e19 <flatcc_json_parser_space_ext@@Base+0x4c9>
  416e0e:	cmp    BYTE PTR [r13+0x0],0x5d
  416e13:	je     417061 <flatcc_json_parser_space_ext@@Base+0x711>
  416e19:	cmp    QWORD PTR [rsp+0x8],0x0
  416e1f:	je     416f80 <flatcc_json_parser_space_ext@@Base+0x630>
  416e25:	lea    rax,[rsp+0x24]
  416e2a:	mov    QWORD PTR [rsp+0x10],rax
  416e2f:	xor    r12d,r12d
  416e32:	nop    WORD PTR [rax+rax*1+0x0]
  416e38:	mov    rsi,QWORD PTR [rsp]
  416e3c:	mov    rdi,QWORD PTR [rbp+0x0]
  416e40:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  416e45:	movzx  ecx,BYTE PTR [rax+r12*1]
  416e4a:	mov    r8,QWORD PTR [rsp+0x10]
  416e4f:	mov    rdx,rbx
  416e52:	mov    rsi,r13
  416e55:	mov    rdi,rbp
  416e58:	call   r15
  416e5b:	mov    r14,rax
  416e5e:	cmp    rbx,rax
  416e61:	je     416cf4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  416e67:	mov    rdi,QWORD PTR [rbp+0x0]
  416e6b:	mov    esi,0x1
  416e70:	call   4129d0 <flatcc_builder_extend_offset_vector@@Base>
  416e75:	test   rax,rax
  416e78:	je     416fc8 <flatcc_json_parser_space_ext@@Base+0x678>
  416e7e:	mov    edx,DWORD PTR [rsp+0x24]
  416e82:	mov    DWORD PTR [rax],edx
  416e84:	mov    rax,rbx
  416e87:	sub    rax,r14
  416e8a:	cmp    rax,0x1
  416e8e:	jle    416e9e <flatcc_json_parser_space_ext@@Base+0x54e>
  416e90:	movzx  eax,BYTE PTR [r14]
  416e94:	cmp    al,0x20
  416e96:	jg     416eb8 <flatcc_json_parser_space_ext@@Base+0x568>
  416e98:	je     416f20 <flatcc_json_parser_space_ext@@Base+0x5d0>
  416e9e:	mov    rsi,r14
  416ea1:	mov    rdx,rbx
  416ea4:	mov    rdi,rbp
  416ea7:	call   416950 <flatcc_json_parser_space_ext@@Base>
  416eac:	mov    r14,rax
  416eaf:	cmp    rbx,r14
  416eb2:	je     416f18 <flatcc_json_parser_space_ext@@Base+0x5c8>
  416eb4:	movzx  eax,BYTE PTR [r14]
  416eb8:	cmp    al,0x2c
  416eba:	je     416f38 <flatcc_json_parser_space_ext@@Base+0x5e8>
  416ebc:	inc    r12
  416ebf:	cmp    al,0x5d
  416ec1:	je     416ee0 <flatcc_json_parser_space_ext@@Base+0x590>
  416ec3:	mov    rsi,r14
  416ec6:	mov    ecx,0x9
  416ecb:	mov    rdx,rbx
  416ece:	mov    rdi,rbp
  416ed1:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416ed6:	mov    r14,rax
  416ed9:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  416ede:	xchg   ax,ax
  416ee0:	lea    rsi,[r14+0x1]
  416ee4:	mov    rax,rbx
  416ee7:	sub    rax,rsi
  416eea:	cmp    rax,0x1
  416eee:	jle    416f01 <flatcc_json_parser_space_ext@@Base+0x5b1>
  416ef0:	cmp    BYTE PTR [r14+0x1],0x20
  416ef5:	jg     416fa0 <flatcc_json_parser_space_ext@@Base+0x650>
  416efb:	je     416fb0 <flatcc_json_parser_space_ext@@Base+0x660>
  416f01:	mov    rdx,rbx
  416f04:	mov    rdi,rbp
  416f07:	call   416950 <flatcc_json_parser_space_ext@@Base>
  416f0c:	mov    r14,rax
  416f0f:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  416f14:	nop    DWORD PTR [rax+0x0]
  416f18:	inc    r12
  416f1b:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  416f20:	cmp    BYTE PTR [r14+0x1],0x20
  416f25:	jle    416e9e <flatcc_json_parser_space_ext@@Base+0x54e>
  416f2b:	inc    r14
  416f2e:	jmp    416eaf <flatcc_json_parser_space_ext@@Base+0x55f>
  416f33:	nop    DWORD PTR [rax+rax*1+0x0]
  416f38:	lea    r13,[r14+0x1]
  416f3c:	mov    rax,rbx
  416f3f:	sub    rax,r13
  416f42:	cmp    rax,0x1
  416f46:	jle    416f51 <flatcc_json_parser_space_ext@@Base+0x601>
  416f48:	cmp    BYTE PTR [r14+0x1],0x20
  416f4d:	jg     416f62 <flatcc_json_parser_space_ext@@Base+0x612>
  416f4f:	je     416fd0 <flatcc_json_parser_space_ext@@Base+0x680>
  416f51:	mov    rsi,r13
  416f54:	mov    rdx,rbx
  416f57:	mov    rdi,rbp
  416f5a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  416f5f:	mov    r13,rax
  416f62:	inc    r12
  416f65:	cmp    rbx,r13
  416f68:	je     417020 <flatcc_json_parser_space_ext@@Base+0x6d0>
  416f6e:	cmp    BYTE PTR [r13+0x0],0x5d
  416f73:	je     416fe8 <flatcc_json_parser_space_ext@@Base+0x698>
  416f75:	cmp    QWORD PTR [rsp+0x8],r12
  416f7a:	jne    416e38 <flatcc_json_parser_space_ext@@Base+0x4e8>
  416f80:	mov    ecx,0x1e
  416f85:	mov    rdx,rbx
  416f88:	mov    rsi,r13
  416f8b:	mov    rdi,rbp
  416f8e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  416f93:	mov    r14,rax
  416f96:	jmp    416cf4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  416f9b:	nop    DWORD PTR [rax+rax*1+0x0]
  416fa0:	mov    r14,rsi
  416fa3:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  416fa8:	nop    DWORD PTR [rax+rax*1+0x0]
  416fb0:	cmp    BYTE PTR [r14+0x2],0x20
  416fb5:	jle    416f01 <flatcc_json_parser_space_ext@@Base+0x5b1>
  416fbb:	add    r14,0x2
  416fbf:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  416fc4:	nop    DWORD PTR [rax+0x0]
  416fc8:	mov    r12,r14
  416fcb:	jmp    416cde <flatcc_json_parser_space_ext@@Base+0x38e>
  416fd0:	cmp    BYTE PTR [r14+0x2],0x20
  416fd5:	jle    416f51 <flatcc_json_parser_space_ext@@Base+0x601>
  416fdb:	lea    r13,[r14+0x2]
  416fdf:	jmp    416f62 <flatcc_json_parser_space_ext@@Base+0x612>
  416fe1:	nop    DWORD PTR [rax+0x0]
  416fe8:	lea    r14,[r13+0x1]
  416fec:	mov    rax,rbx
  416fef:	sub    rax,r14
  416ff2:	cmp    rax,0x1
  416ff6:	jle    417005 <flatcc_json_parser_space_ext@@Base+0x6b5>
  416ff8:	cmp    BYTE PTR [r13+0x1],0x20
  416ffd:	jg     416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  417003:	je     417051 <flatcc_json_parser_space_ext@@Base+0x701>
  417005:	mov    rsi,r14
  417008:	mov    rdx,rbx
  41700b:	mov    rdi,rbp
  41700e:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417013:	mov    r14,rax
  417016:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  41701b:	nop    DWORD PTR [rax+rax*1+0x0]
  417020:	mov    ecx,0x9
  417025:	mov    rdx,rbx
  417028:	mov    rsi,rbx
  41702b:	mov    rdi,rbp
  41702e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417033:	mov    r14,rax
  417036:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  41703b:	cmp    BYTE PTR [r12+0x2],0x20
  417041:	jle    416def <flatcc_json_parser_space_ext@@Base+0x49f>
  417047:	lea    r13,[r12+0x2]
  41704c:	jmp    416e00 <flatcc_json_parser_space_ext@@Base+0x4b0>
  417051:	cmp    BYTE PTR [r13+0x2],0x20
  417056:	jle    417005 <flatcc_json_parser_space_ext@@Base+0x6b5>
  417058:	lea    r14,[r13+0x2]
  41705c:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  417061:	lea    r14,[r13+0x1]
  417065:	mov    rax,rbx
  417068:	sub    rax,r14
  41706b:	cmp    rax,0x1
  41706f:	jle    417081 <flatcc_json_parser_space_ext@@Base+0x731>
  417071:	xor    r12d,r12d
  417074:	cmp    BYTE PTR [r13+0x1],0x20
  417079:	jg     416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  41707f:	je     41709a <flatcc_json_parser_space_ext@@Base+0x74a>
  417081:	mov    rsi,r14
  417084:	mov    rdx,rbx
  417087:	mov    rdi,rbp
  41708a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  41708f:	mov    r14,rax
  417092:	xor    r12d,r12d
  417095:	jmp    416d58 <flatcc_json_parser_space_ext@@Base+0x408>
  41709a:	cmp    BYTE PTR [r13+0x2],0x20
  41709f:	jle    417081 <flatcc_json_parser_space_ext@@Base+0x731>
  4170a1:	jmp    417058 <flatcc_json_parser_space_ext@@Base+0x708>
  4170a3:	call   4031c0 <__stack_chk_fail@plt>
  4170a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004170b0 <flatcc_json_parser_string_escape@@Base>:
  4170b0:	endbr64 
  4170b4:	mov    r8,rdx
  4170b7:	sub    r8,rsi
  4170ba:	cmp    r8,0x1
  4170be:	jle    4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4170c0:	cmp    BYTE PTR [rsi],0x5c
  4170c3:	jne    4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4170c5:	movzx  eax,BYTE PTR [rsi+0x1]
  4170c9:	sub    eax,0x22
  4170cc:	cmp    al,0x56
  4170ce:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4170d0:	lea    r9,[rip+0x4689]        # 41b760 <flatcc_builder_padding_base@@Base+0x7e0>
  4170d7:	movzx  eax,al
  4170da:	movsxd rax,DWORD PTR [r9+rax*4]
  4170de:	add    rax,r9
  4170e1:	notrack jmp rax
  4170e4:	nop    DWORD PTR [rax+0x0]
  4170e8:	mov    BYTE PTR [rcx],0x0
  4170eb:	mov    ecx,0x12
  4170f0:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4170f5:	nop    DWORD PTR [rax]
  4170f8:	mov    BYTE PTR [rcx],0x1
  4170fb:	cmp    r8,0x3
  4170ff:	jle    4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  417101:	movzx  eax,BYTE PTR [rsi+0x2]
  417105:	lea    r8d,[rax-0x30]
  417109:	cmp    r8b,0x9
  41710d:	ja     417250 <flatcc_json_parser_string_escape@@Base+0x1a0>
  417113:	shl    eax,0x4
  417116:	movzx  r8d,BYTE PTR [rsi+0x3]
  41711b:	lea    r9d,[r8-0x30]
  41711f:	cmp    r9b,0x9
  417123:	ja     4172b8 <flatcc_json_parser_string_escape@@Base+0x208>
  417129:	or     eax,r9d
  41712c:	mov    BYTE PTR [rcx+0x1],al
  41712f:	lea    rax,[rsi+0x4]
  417133:	ret    
  417134:	nop    DWORD PTR [rax+0x0]
  417138:	mov    edi,0x2201
  41713d:	mov    WORD PTR [rcx],di
  417140:	lea    rax,[rsi+0x2]
  417144:	ret    
  417145:	nop    DWORD PTR [rax]
  417148:	mov    eax,0x2f01
  41714d:	mov    WORD PTR [rcx],ax
  417150:	lea    rax,[rsi+0x2]
  417154:	ret    
  417155:	nop    DWORD PTR [rax]
  417158:	mov    edx,0x5c01
  41715d:	mov    WORD PTR [rcx],dx
  417160:	lea    rax,[rsi+0x2]
  417164:	ret    
  417165:	nop    DWORD PTR [rax]
  417168:	mov    r9d,0x801
  41716e:	mov    WORD PTR [rcx],r9w
  417172:	lea    rax,[rsi+0x2]
  417176:	ret    
  417177:	nop    WORD PTR [rax+rax*1+0x0]
  417180:	mov    r8d,0xc01
  417186:	mov    WORD PTR [rcx],r8w
  41718a:	lea    rax,[rsi+0x2]
  41718e:	ret    
  41718f:	nop
  417190:	mov    r11d,0xa01
  417196:	mov    WORD PTR [rcx],r11w
  41719a:	lea    rax,[rsi+0x2]
  41719e:	ret    
  41719f:	nop
  4171a0:	mov    r10d,0xd01
  4171a6:	mov    WORD PTR [rcx],r10w
  4171aa:	lea    rax,[rsi+0x2]
  4171ae:	ret    
  4171af:	nop
  4171b0:	mov    eax,0x901
  4171b5:	mov    WORD PTR [rcx],ax
  4171b8:	lea    rax,[rsi+0x2]
  4171bc:	ret    
  4171bd:	nop    DWORD PTR [rax]
  4171c0:	cmp    r8,0x5
  4171c4:	jle    4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4171ca:	movzx  eax,BYTE PTR [rsi+0x2]
  4171ce:	lea    r8d,[rax-0x30]
  4171d2:	cmp    r8b,0x9
  4171d6:	ja     417270 <flatcc_json_parser_string_escape@@Base+0x1c0>
  4171dc:	shl    eax,0xc
  4171df:	movzx  r8d,BYTE PTR [rsi+0x3]
  4171e4:	lea    r9d,[r8-0x30]
  4171e8:	cmp    r9b,0x9
  4171ec:	ja     417290 <flatcc_json_parser_string_escape@@Base+0x1e0>
  4171f2:	shl    r8d,0x8
  4171f6:	sub    r8w,0x3000
  4171fc:	or     eax,r8d
  4171ff:	movsx  r8w,BYTE PTR [rsi+0x4]
  417205:	lea    r9d,[r8-0x30]
  417209:	cmp    r9b,0x9
  41720d:	ja     4172e0 <flatcc_json_parser_string_escape@@Base+0x230>
  417213:	sub    r8d,0x30
  417217:	shl    r8d,0x4
  41721b:	or     eax,r8d
  41721e:	movzx  r8d,BYTE PTR [rsi+0x5]
  417223:	lea    r9d,[r8-0x30]
  417227:	cmp    r9b,0x9
  41722b:	ja     417310 <flatcc_json_parser_string_escape@@Base+0x260>
  417231:	movsx  dx,r8b
  417236:	sub    edx,0x30
  417239:	or     eax,edx
  41723b:	cmp    ax,0x7f
  41723f:	ja     417338 <flatcc_json_parser_string_escape@@Base+0x288>
  417245:	mov    BYTE PTR [rcx],0x1
  417248:	mov    BYTE PTR [rcx+0x1],al
  41724b:	lea    rax,[rsi+0x6]
  41724f:	ret    
  417250:	or     eax,0x20
  417253:	lea    r8d,[rax-0x61]
  417257:	cmp    r8b,0x5
  41725b:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  417261:	shl    eax,0x4
  417264:	sub    eax,0x70
  417267:	jmp    417116 <flatcc_json_parser_string_escape@@Base+0x66>
  41726c:	nop    DWORD PTR [rax+0x0]
  417270:	or     eax,0x20
  417273:	lea    r8d,[rax-0x61]
  417277:	cmp    r8b,0x5
  41727b:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  417281:	shl    eax,0xc
  417284:	sub    ax,0x7000
  417288:	jmp    4171df <flatcc_json_parser_string_escape@@Base+0x12f>
  41728d:	nop    DWORD PTR [rax]
  417290:	or     r8d,0x20
  417294:	lea    r9d,[r8-0x61]
  417298:	cmp    r9b,0x5
  41729c:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4172a2:	shl    r8d,0x8
  4172a6:	sub    r8w,0x5700
  4172ac:	or     eax,r8d
  4172af:	jmp    4171ff <flatcc_json_parser_string_escape@@Base+0x14f>
  4172b4:	nop    DWORD PTR [rax+0x0]
  4172b8:	or     r8d,0x20
  4172bc:	lea    r9d,[r8-0x61]
  4172c0:	cmp    r9b,0x5
  4172c4:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4172ca:	sub    r8d,0x57
  4172ce:	or     eax,r8d
  4172d1:	jmp    41712c <flatcc_json_parser_string_escape@@Base+0x7c>
  4172d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4172e0:	or     r8d,0x20
  4172e4:	lea    r9d,[r8-0x61]
  4172e8:	cmp    r9b,0x5
  4172ec:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  4172f2:	movsx  r8w,r8b
  4172f7:	sub    r8d,0x57
  4172fb:	shl    r8d,0x4
  4172ff:	or     eax,r8d
  417302:	jmp    41721e <flatcc_json_parser_string_escape@@Base+0x16e>
  417307:	nop    WORD PTR [rax+rax*1+0x0]
  417310:	or     r8d,0x20
  417314:	lea    r9d,[r8-0x61]
  417318:	cmp    r9b,0x5
  41731c:	ja     4170e8 <flatcc_json_parser_string_escape@@Base+0x38>
  417322:	movsx  r8w,r8b
  417327:	lea    edx,[r8-0x57]
  41732b:	or     eax,edx
  41732d:	jmp    41723b <flatcc_json_parser_string_escape@@Base+0x18b>
  417332:	nop    WORD PTR [rax+rax*1+0x0]
  417338:	mov    edi,eax
  41733a:	mov    edx,eax
  41733c:	and    edi,0x3f
  41733f:	shr    dx,0x6
  417343:	or     edi,0xffffff80
  417346:	cmp    ax,0x7ff
  41734a:	ja     41735e <flatcc_json_parser_string_escape@@Base+0x2ae>
  41734c:	or     edx,0xffffffc0
  41734f:	mov    BYTE PTR [rcx],0x2
  417352:	mov    BYTE PTR [rcx+0x1],dl
  417355:	mov    BYTE PTR [rcx+0x2],dil
  417359:	jmp    41724b <flatcc_json_parser_string_escape@@Base+0x19b>
  41735e:	shr    ax,0xc
  417362:	and    edx,0x3f
  417365:	or     eax,0xffffffe0
  417368:	or     edx,0xffffff80
  41736b:	mov    BYTE PTR [rcx],0x3
  41736e:	mov    BYTE PTR [rcx+0x1],al
  417371:	mov    BYTE PTR [rcx+0x2],dl
  417374:	mov    BYTE PTR [rcx+0x3],dil
  417378:	jmp    41724b <flatcc_json_parser_string_escape@@Base+0x19b>
  41737d:	nop    DWORD PTR [rax]

0000000000417380 <flatcc_json_parser_skip_constant@@Base>:
  417380:	endbr64 
  417384:	push   r13
  417386:	push   r12
  417388:	push   rbp
  417389:	push   rbx
  41738a:	mov    rbx,rsi
  41738d:	sub    rsp,0x8
  417391:	cmp    rsi,rdx
  417394:	je     417407 <flatcc_json_parser_skip_constant@@Base+0x87>
  417396:	mov    rbp,rdi
  417399:	mov    r12,rdx
  41739c:	movabs r13,0x2000000000ffd
  4173a6:	jmp    4173be <flatcc_json_parser_skip_constant@@Base+0x3e>
  4173a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4173b0:	bt     r13,rdx
  4173b4:	jae    4173cd <flatcc_json_parser_skip_constant@@Base+0x4d>
  4173b6:	inc    rbx
  4173b9:	cmp    r12,rbx
  4173bc:	je     417407 <flatcc_json_parser_skip_constant@@Base+0x87>
  4173be:	movzx  eax,BYTE PTR [rbx]
  4173c1:	test   al,al
  4173c3:	js     4173b6 <flatcc_json_parser_skip_constant@@Base+0x36>
  4173c5:	lea    edx,[rax-0x2e]
  4173c8:	cmp    dl,0x31
  4173cb:	jbe    4173b0 <flatcc_json_parser_skip_constant@@Base+0x30>
  4173cd:	mov    edx,eax
  4173cf:	or     edx,0x20
  4173d2:	sub    edx,0x61
  4173d5:	cmp    dl,0x19
  4173d8:	jbe    4173b6 <flatcc_json_parser_skip_constant@@Base+0x36>
  4173da:	mov    rdx,r12
  4173dd:	sub    rdx,rbx
  4173e0:	cmp    rdx,0x1
  4173e4:	jle    4173ec <flatcc_json_parser_skip_constant@@Base+0x6c>
  4173e6:	cmp    al,0x20
  4173e8:	jg     417407 <flatcc_json_parser_skip_constant@@Base+0x87>
  4173ea:	je     417418 <flatcc_json_parser_skip_constant@@Base+0x98>
  4173ec:	mov    rdx,r12
  4173ef:	mov    rsi,rbx
  4173f2:	mov    rdi,rbp
  4173f5:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4173fa:	cmp    rax,rbx
  4173fd:	je     417407 <flatcc_json_parser_skip_constant@@Base+0x87>
  4173ff:	mov    rbx,rax
  417402:	cmp    r12,rbx
  417405:	jne    4173be <flatcc_json_parser_skip_constant@@Base+0x3e>
  417407:	add    rsp,0x8
  41740b:	mov    rax,rbx
  41740e:	pop    rbx
  41740f:	pop    rbp
  417410:	pop    r12
  417412:	pop    r13
  417414:	ret    
  417415:	nop    DWORD PTR [rax]
  417418:	cmp    BYTE PTR [rbx+0x1],0x20
  41741c:	lea    rax,[rbx+0x1]
  417420:	jle    4173ec <flatcc_json_parser_skip_constant@@Base+0x6c>
  417422:	jmp    4173fa <flatcc_json_parser_skip_constant@@Base+0x7a>
  417424:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41742f:	nop

0000000000417430 <flatcc_json_parser_match_constant@@Base>:
  417430:	endbr64 
  417434:	mov    rax,rdx
  417437:	sub    rax,rsi
  41743a:	movsxd rcx,ecx
  41743d:	cmp    rax,rcx
  417440:	jle    417520 <flatcc_json_parser_match_constant@@Base+0xf0>
  417446:	push   r13
  417448:	mov    r13,r8
  41744b:	push   r12
  41744d:	mov    r12,rsi
  417450:	push   rbp
  417451:	mov    rbp,rdx
  417454:	push   rbx
  417455:	lea    rbx,[rsi+rcx*1]
  417459:	sub    rsp,0x8
  41745d:	mov    eax,DWORD PTR [rdi+0x14]
  417460:	test   eax,eax
  417462:	jne    417498 <flatcc_json_parser_match_constant@@Base+0x68>
  417464:	movzx  eax,BYTE PTR [rbx]
  417467:	cmp    al,0x20
  417469:	je     417590 <flatcc_json_parser_match_constant@@Base+0x160>
  41746f:	cmp    al,0x22
  417471:	je     4175e8 <flatcc_json_parser_match_constant@@Base+0x1b8>
  417477:	mov    DWORD PTR [r8],0x0
  41747e:	cmp    al,0x5c
  417480:	je     417530 <flatcc_json_parser_match_constant@@Base+0x100>
  417486:	add    rsp,0x8
  41748a:	pop    rbx
  41748b:	pop    rbp
  41748c:	pop    r12
  41748e:	mov    rax,rsi
  417491:	pop    r13
  417493:	ret    
  417494:	nop    DWORD PTR [rax+0x0]
  417498:	mov    rax,rdx
  41749b:	sub    rax,rbx
  41749e:	cmp    rax,0x1
  4174a2:	jle    4174b3 <flatcc_json_parser_match_constant@@Base+0x83>
  4174a4:	cmp    BYTE PTR [rbx],0x20
  4174a7:	jg     4175f0 <flatcc_json_parser_match_constant@@Base+0x1c0>
  4174ad:	je     417608 <flatcc_json_parser_match_constant@@Base+0x1d8>
  4174b3:	mov    rdx,rbp
  4174b6:	mov    rsi,rbx
  4174b9:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4174be:	cmp    rbp,rax
  4174c1:	je     417575 <flatcc_json_parser_match_constant@@Base+0x145>
  4174c7:	cmp    rbx,rax
  4174ca:	je     4174ef <flatcc_json_parser_match_constant@@Base+0xbf>
  4174cc:	movzx  edx,BYTE PTR [rax]
  4174cf:	cmp    dl,0x5f
  4174d2:	je     4175c0 <flatcc_json_parser_match_constant@@Base+0x190>
  4174d8:	test   dl,dl
  4174da:	js     4175c0 <flatcc_json_parser_match_constant@@Base+0x190>
  4174e0:	or     edx,0x20
  4174e3:	sub    edx,0x61
  4174e6:	cmp    dl,0x19
  4174e9:	jbe    4175c0 <flatcc_json_parser_match_constant@@Base+0x190>
  4174ef:	mov    DWORD PTR [r13+0x0],0x0
  4174f7:	movzx  edx,BYTE PTR [rax]
  4174fa:	mov    ecx,edx
  4174fc:	and    ecx,0xffffffdf
  4174ff:	cmp    cl,0x5d
  417502:	je     41750b <flatcc_json_parser_match_constant@@Base+0xdb>
  417504:	cmp    dl,0x2c
  417507:	cmovne rax,r12
  41750b:	add    rsp,0x8
  41750f:	pop    rbx
  417510:	pop    rbp
  417511:	pop    r12
  417513:	pop    r13
  417515:	ret    
  417516:	nop    WORD PTR cs:[rax+rax*1+0x0]
  417520:	mov    DWORD PTR [r8],0x0
  417527:	mov    rax,rsi
  41752a:	ret    
  41752b:	nop    DWORD PTR [rax+rax*1+0x0]
  417530:	add    rsp,0x8
  417534:	mov    rsi,rbx
  417537:	pop    rbx
  417538:	pop    rbp
  417539:	pop    r12
  41753b:	mov    ecx,0x12
  417540:	pop    r13
  417542:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  417547:	nop    WORD PTR [rax+rax*1+0x0]
  417550:	cmp    dl,0x22
  417553:	jne    4175c0 <flatcc_json_parser_match_constant@@Base+0x190>
  417555:	lea    rsi,[rax+0x1]
  417559:	cmp    rsi,0xffffffffffffffff
  41755d:	jge    4175d8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  41755f:	cmp    BYTE PTR [rax+0x1],0x20
  417563:	jg     417620 <flatcc_json_parser_match_constant@@Base+0x1f0>
  417569:	jne    4175d8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  41756b:	cmp    BYTE PTR [rax+0x2],0x20
  41756f:	jle    4175d8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  417571:	add    rax,0x2
  417575:	mov    DWORD PTR [r13+0x0],0x0
  41757d:	add    rsp,0x8
  417581:	pop    rbx
  417582:	pop    rbp
  417583:	pop    r12
  417585:	pop    r13
  417587:	ret    
  417588:	nop    DWORD PTR [rax+rax*1+0x0]
  417590:	lea    rax,[rbx+0x1]
  417594:	cmp    rdx,rax
  417597:	je     417575 <flatcc_json_parser_match_constant@@Base+0x145>
  417599:	movzx  edx,BYTE PTR [rbx+0x1]
  41759d:	cmp    dl,0x20
  4175a0:	je     4175b0 <flatcc_json_parser_match_constant@@Base+0x180>
  4175a2:	jmp    417550 <flatcc_json_parser_match_constant@@Base+0x120>
  4175a4:	nop    DWORD PTR [rax+0x0]
  4175a8:	movzx  edx,BYTE PTR [rax]
  4175ab:	cmp    dl,0x20
  4175ae:	jne    417550 <flatcc_json_parser_match_constant@@Base+0x120>
  4175b0:	inc    rax
  4175b3:	cmp    rbp,rax
  4175b6:	jne    4175a8 <flatcc_json_parser_match_constant@@Base+0x178>
  4175b8:	jmp    417575 <flatcc_json_parser_match_constant@@Base+0x145>
  4175ba:	nop    WORD PTR [rax+rax*1+0x0]
  4175c0:	mov    DWORD PTR [r13+0x0],0x1
  4175c8:	add    rsp,0x8
  4175cc:	pop    rbx
  4175cd:	pop    rbp
  4175ce:	pop    r12
  4175d0:	pop    r13
  4175d2:	ret    
  4175d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4175d8:	xor    edx,edx
  4175da:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4175df:	jmp    417575 <flatcc_json_parser_match_constant@@Base+0x145>
  4175e1:	nop    DWORD PTR [rax+0x0]
  4175e8:	mov    rax,rbx
  4175eb:	jmp    417555 <flatcc_json_parser_match_constant@@Base+0x125>
  4175f0:	mov    rax,rbx
  4175f3:	cmp    rbx,rdx
  4175f6:	jne    4174ef <flatcc_json_parser_match_constant@@Base+0xbf>
  4175fc:	jmp    417575 <flatcc_json_parser_match_constant@@Base+0x145>
  417601:	nop    DWORD PTR [rax+0x0]
  417608:	cmp    BYTE PTR [rbx+0x1],0x20
  41760c:	lea    rax,[rbx+0x1]
  417610:	jle    4174b3 <flatcc_json_parser_match_constant@@Base+0x83>
  417616:	jmp    4174be <flatcc_json_parser_match_constant@@Base+0x8e>
  41761b:	nop    DWORD PTR [rax+rax*1+0x0]
  417620:	mov    rax,rsi
  417623:	jmp    417575 <flatcc_json_parser_match_constant@@Base+0x145>
  417628:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000417630 <flatcc_json_parser_double@@Base>:
  417630:	endbr64 
  417634:	mov    QWORD PTR [rcx],0x0
  41763b:	cmp    rsi,rdx
  41763e:	je     417708 <flatcc_json_parser_double@@Base+0xd8>
  417644:	xor    eax,eax
  417646:	cmp    BYTE PTR [rsi],0x2d
  417649:	sete   al
  41764c:	add    rax,rsi
  41764f:	mov    r8,rdx
  417652:	sub    r8,rax
  417655:	cmp    r8,0x1
  417659:	jle    417673 <flatcc_json_parser_double@@Base+0x43>
  41765b:	movzx  r8d,BYTE PTR [rax]
  41765f:	cmp    r8b,0x2e
  417663:	je     4176fa <flatcc_json_parser_double@@Base+0xca>
  417669:	cmp    r8b,0x30
  41766d:	je     4176f0 <flatcc_json_parser_double@@Base+0xc0>
  417673:	push   r13
  417675:	mov    r13,rdi
  417678:	push   r12
  41767a:	mov    r12,rcx
  41767d:	push   rbp
  41767e:	mov    rbp,rdx
  417681:	push   rbx
  417682:	mov    rbx,rsi
  417685:	mov    rsi,rdx
  417688:	sub    rsp,0x8
  41768c:	sub    rsi,rbx
  41768f:	mov    rdx,rcx
  417692:	mov    rdi,rbx
  417695:	call   415e80 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  41769a:	test   rax,rax
  41769d:	je     4176b0 <flatcc_json_parser_double@@Base+0x80>
  41769f:	cmp    rbx,rax
  4176a2:	je     4176b0 <flatcc_json_parser_double@@Base+0x80>
  4176a4:	add    rsp,0x8
  4176a8:	pop    rbx
  4176a9:	pop    rbp
  4176aa:	pop    r12
  4176ac:	pop    r13
  4176ae:	ret    
  4176af:	nop
  4176b0:	vmovsd xmm0,QWORD PTR [r12]
  4176b6:	mov    ecx,0x7
  4176bb:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x4afd]        # 41c1c0 <flatcc_builder_padding_base@@Base+0x1240>
  4176c3:	vucomisd xmm0,QWORD PTR [rip+0x4ae5]        # 41c1b0 <flatcc_builder_padding_base@@Base+0x1230>
  4176cb:	ja     4176d2 <flatcc_json_parser_double@@Base+0xa2>
  4176cd:	mov    ecx,0x6
  4176d2:	add    rsp,0x8
  4176d6:	mov    rsi,rbx
  4176d9:	pop    rbx
  4176da:	mov    rdx,rbp
  4176dd:	pop    rbp
  4176de:	pop    r12
  4176e0:	mov    rdi,r13
  4176e3:	pop    r13
  4176e5:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4176ea:	nop    WORD PTR [rax+rax*1+0x0]
  4176f0:	cmp    BYTE PTR [rax+0x1],0x30
  4176f4:	jne    417673 <flatcc_json_parser_double@@Base+0x43>
  4176fa:	mov    ecx,0x6
  4176ff:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  417704:	nop    DWORD PTR [rax+0x0]
  417708:	mov    rax,rsi
  41770b:	ret    
  41770c:	nop    DWORD PTR [rax+0x0]

0000000000417710 <flatcc_json_parser_float@@Base>:
  417710:	endbr64 
  417714:	push   r13
  417716:	push   r12
  417718:	push   rbp
  417719:	push   rbx
  41771a:	mov    rbx,rsi
  41771d:	sub    rsp,0x18
  417721:	mov    rax,QWORD PTR fs:0x28
  41772a:	mov    QWORD PTR [rsp+0x8],rax
  41772f:	xor    eax,eax
  417731:	mov    DWORD PTR [rcx],0x0
  417737:	cmp    rsi,rdx
  41773a:	je     417838 <flatcc_json_parser_float@@Base+0x128>
  417740:	xor    eax,eax
  417742:	cmp    BYTE PTR [rsi],0x2d
  417745:	sete   al
  417748:	add    rax,rsi
  41774b:	mov    rbp,rdx
  41774e:	sub    rdx,rax
  417751:	mov    r12,rdi
  417754:	mov    r13,rcx
  417757:	cmp    rdx,0x1
  41775b:	jle    417772 <flatcc_json_parser_float@@Base+0x62>
  41775d:	movzx  edx,BYTE PTR [rax]
  417760:	cmp    dl,0x2e
  417763:	je     417810 <flatcc_json_parser_float@@Base+0x100>
  417769:	cmp    dl,0x30
  41776c:	je     417800 <flatcc_json_parser_float@@Base+0xf0>
  417772:	mov    rsi,rbp
  417775:	sub    rsi,rbx
  417778:	mov    rdx,rsp
  41777b:	mov    rdi,rbx
  41777e:	call   415e80 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  417783:	vmovsd xmm1,QWORD PTR [rsp]
  417788:	vxorps xmm0,xmm0,xmm0
  41778c:	vcvtsd2ss xmm0,xmm0,xmm1
  417790:	vmovss DWORD PTR [r13+0x0],xmm0
  417796:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x4a32]        # 41c1d0 <flatcc_builder_padding_base@@Base+0x1250>
  41779e:	vucomiss xmm0,DWORD PTR [rip+0x4a42]        # 41c1e8 <flatcc_builder_padding_base@@Base+0x1268>
  4177a6:	ja     4177d0 <flatcc_json_parser_float@@Base+0xc0>
  4177a8:	test   rax,rax
  4177ab:	je     417810 <flatcc_json_parser_float@@Base+0x100>
  4177ad:	cmp    rbx,rax
  4177b0:	je     417810 <flatcc_json_parser_float@@Base+0x100>
  4177b2:	mov    rcx,QWORD PTR [rsp+0x8]
  4177b7:	xor    rcx,QWORD PTR fs:0x28
  4177c0:	jne    417840 <flatcc_json_parser_float@@Base+0x130>
  4177c2:	add    rsp,0x18
  4177c6:	pop    rbx
  4177c7:	pop    rbp
  4177c8:	pop    r12
  4177ca:	pop    r13
  4177cc:	ret    
  4177cd:	nop    DWORD PTR [rax]
  4177d0:	vxorpd xmm0,xmm0,xmm0
  4177d4:	vcomisd xmm0,xmm1
  4177d8:	ja     417828 <flatcc_json_parser_float@@Base+0x118>
  4177da:	vmovss xmm0,DWORD PTR [rip+0x4a02]        # 41c1e4 <flatcc_builder_padding_base@@Base+0x1264>
  4177e2:	vmovss DWORD PTR [r13+0x0],xmm0
  4177e8:	mov    ecx,0x7
  4177ed:	mov    rdx,rbp
  4177f0:	mov    rsi,rbx
  4177f3:	mov    rdi,r12
  4177f6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4177fb:	jmp    4177b2 <flatcc_json_parser_float@@Base+0xa2>
  4177fd:	nop    DWORD PTR [rax]
  417800:	cmp    BYTE PTR [rax+0x1],0x30
  417804:	jne    417772 <flatcc_json_parser_float@@Base+0x62>
  41780a:	nop    WORD PTR [rax+rax*1+0x0]
  417810:	mov    ecx,0x6
  417815:	mov    rdx,rbp
  417818:	mov    rsi,rbx
  41781b:	mov    rdi,r12
  41781e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417823:	jmp    4177b2 <flatcc_json_parser_float@@Base+0xa2>
  417825:	nop    DWORD PTR [rax]
  417828:	vmovss xmm0,DWORD PTR [rip+0x49b0]        # 41c1e0 <flatcc_builder_padding_base@@Base+0x1260>
  417830:	jmp    4177e2 <flatcc_json_parser_float@@Base+0xd2>
  417832:	nop    WORD PTR [rax+rax*1+0x0]
  417838:	mov    rax,rsi
  41783b:	jmp    4177b2 <flatcc_json_parser_float@@Base+0xa2>
  417840:	call   4031c0 <__stack_chk_fail@plt>
  417845:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000417850 <flatcc_json_parser_generic_json@@Base>:
  417850:	endbr64 
  417854:	push   r15
  417856:	mov    r10,rsi
  417859:	push   r14
  41785b:	push   r13
  41785d:	push   r12
  41785f:	push   rbp
  417860:	push   rbx
  417861:	sub    rsp,0x238
  417868:	mov    rax,QWORD PTR fs:0x28
  417871:	mov    QWORD PTR [rsp+0x228],rax
  417879:	xor    eax,eax
  41787b:	cmp    rsi,rdx
  41787e:	je     418150 <flatcc_json_parser_generic_json@@Base+0x900>
  417884:	lea    r12,[rsp+0x20]
  417889:	lea    rax,[r12+0x200]
  417891:	mov    QWORD PTR [rsp],rax
  417895:	mov    r15,rdx
  417898:	movzx  edx,BYTE PTR [rsi]
  41789b:	mov    rbx,rdi
  41789e:	mov    r14,r12
  4178a1:	lea    r13,[rsp+0x1c]
  4178a6:	cmp    r14,r12
  4178a9:	je     417978 <flatcc_json_parser_generic_json@@Base+0x128>
  4178af:	cmp    BYTE PTR [r14-0x1],0x7d
  4178b4:	je     417df8 <flatcc_json_parser_generic_json@@Base+0x5a8>
  4178ba:	cmp    dl,0x39
  4178bd:	jle    417981 <flatcc_json_parser_generic_json@@Base+0x131>
  4178c3:	cmp    dl,0x5b
  4178c6:	je     417dd0 <flatcc_json_parser_generic_json@@Base+0x580>
  4178cc:	cmp    dl,0x7b
  4178cf:	jne    417ac1 <flatcc_json_parser_generic_json@@Base+0x271>
  4178d5:	cmp    r14,QWORD PTR [rsp]
  4178d9:	je     417dda <flatcc_json_parser_generic_json@@Base+0x58a>
  4178df:	lea    rsi,[r10+0x1]
  4178e3:	mov    rax,r15
  4178e6:	sub    rax,rsi
  4178e9:	lea    rbp,[r14+0x1]
  4178ed:	mov    BYTE PTR [r14],0x7d
  4178f1:	cmp    rax,0x1
  4178f5:	jle    417910 <flatcc_json_parser_generic_json@@Base+0xc0>
  4178f7:	cmp    BYTE PTR [r10+0x1],0x20
  4178fc:	jg     417f48 <flatcc_json_parser_generic_json@@Base+0x6f8>
  417902:	jne    417910 <flatcc_json_parser_generic_json@@Base+0xc0>
  417904:	cmp    BYTE PTR [r10+0x2],0x20
  417909:	jg     4181dc <flatcc_json_parser_generic_json@@Base+0x98c>
  41790f:	nop
  417910:	mov    rdx,r15
  417913:	mov    rdi,rbx
  417916:	call   416950 <flatcc_json_parser_space_ext@@Base>
  41791b:	mov    r10,rax
  41791e:	cmp    r15,r10
  417921:	je     418150 <flatcc_json_parser_generic_json@@Base+0x900>
  417927:	movzx  edx,BYTE PTR [r10]
  41792b:	cmp    dl,0x7d
  41792e:	jne    417cd4 <flatcc_json_parser_generic_json@@Base+0x484>
  417934:	mov    r14,rbp
  417937:	mov    rax,r10
  41793a:	cmp    r14,r12
  41793d:	jne    417a55 <flatcc_json_parser_generic_json@@Base+0x205>
  417943:	nop    DWORD PTR [rax+rax*1+0x0]
  417948:	mov    rcx,QWORD PTR [rsp+0x228]
  417950:	xor    rcx,QWORD PTR fs:0x28
  417959:	jne    4182d2 <flatcc_json_parser_generic_json@@Base+0xa82>
  41795f:	add    rsp,0x238
  417966:	pop    rbx
  417967:	pop    rbp
  417968:	pop    r12
  41796a:	pop    r13
  41796c:	pop    r14
  41796e:	pop    r15
  417970:	ret    
  417971:	nop    DWORD PTR [rax+0x0]
  417978:	cmp    dl,0x39
  41797b:	jg     417c70 <flatcc_json_parser_generic_json@@Base+0x420>
  417981:	cmp    dl,0x30
  417984:	jge    417d10 <flatcc_json_parser_generic_json@@Base+0x4c0>
  41798a:	cmp    dl,0x22
  41798d:	jne    417ab8 <flatcc_json_parser_generic_json@@Base+0x268>
  417993:	lea    rax,[r10+0x1]
  417997:	cmp    r15,rax
  41799a:	jne    4179da <flatcc_json_parser_generic_json@@Base+0x18a>
  41799c:	jmp    417f30 <flatcc_json_parser_generic_json@@Base+0x6e0>
  4179a1:	nop    DWORD PTR [rax+0x0]
  4179a8:	mov    rdx,r15
  4179ab:	mov    rsi,rax
  4179ae:	mov    rdi,rbx
  4179b1:	call   416900 <flatcc_json_parser_string_part@@Base>
  4179b6:	cmp    r15,rax
  4179b9:	je     4179c0 <flatcc_json_parser_generic_json@@Base+0x170>
  4179bb:	cmp    BYTE PTR [rax],0x22
  4179be:	je     4179df <flatcc_json_parser_generic_json@@Base+0x18f>
  4179c0:	mov    rcx,r13
  4179c3:	mov    rdx,r15
  4179c6:	mov    rsi,rax
  4179c9:	mov    rdi,rbx
  4179cc:	call   4170b0 <flatcc_json_parser_string_escape@@Base>
  4179d1:	cmp    r15,rax
  4179d4:	je     417f30 <flatcc_json_parser_generic_json@@Base+0x6e0>
  4179da:	cmp    BYTE PTR [rax],0x22
  4179dd:	jne    4179a8 <flatcc_json_parser_generic_json@@Base+0x158>
  4179df:	inc    rax
  4179e2:	cmp    r15,rax
  4179e5:	jne    417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  4179e7:	jmp    4182d7 <flatcc_json_parser_generic_json@@Base+0xa87>
  4179ec:	nop    DWORD PTR [rax+0x0]
  4179f0:	cmp    rdx,0x1
  4179f4:	jle    417a01 <flatcc_json_parser_generic_json@@Base+0x1b1>
  4179f6:	cmp    BYTE PTR [rax],0x20
  4179f9:	jg     417a0f <flatcc_json_parser_generic_json@@Base+0x1bf>
  4179fb:	je     417b30 <flatcc_json_parser_generic_json@@Base+0x2e0>
  417a01:	mov    rdx,r15
  417a04:	mov    rsi,rax
  417a07:	mov    rdi,rbx
  417a0a:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417a0f:	cmp    r15,rax
  417a12:	je     417b50 <flatcc_json_parser_generic_json@@Base+0x300>
  417a18:	movzx  edx,BYTE PTR [rax]
  417a1b:	cmp    dl,0x2c
  417a1e:	je     417b80 <flatcc_json_parser_generic_json@@Base+0x330>
  417a24:	cmp    dl,0x7d
  417a27:	je     417b00 <flatcc_json_parser_generic_json@@Base+0x2b0>
  417a2d:	mov    ecx,0xa
  417a32:	mov    rdx,r15
  417a35:	mov    rsi,rax
  417a38:	mov    rdi,rbx
  417a3b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417a40:	cmp    r15,rax
  417a43:	je     417b50 <flatcc_json_parser_generic_json@@Base+0x300>
  417a49:	mov    r14,rbp
  417a4c:	cmp    r14,r12
  417a4f:	je     417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  417a55:	mov    rdx,r15
  417a58:	sub    rdx,rax
  417a5b:	cmp    BYTE PTR [r14-0x1],0x5d
  417a60:	lea    rbp,[r14-0x1]
  417a64:	jne    4179f0 <flatcc_json_parser_generic_json@@Base+0x1a0>
  417a66:	cmp    rdx,0x1
  417a6a:	jle    417a77 <flatcc_json_parser_generic_json@@Base+0x227>
  417a6c:	cmp    BYTE PTR [rax],0x20
  417a6f:	jg     417a85 <flatcc_json_parser_generic_json@@Base+0x235>
  417a71:	je     417c00 <flatcc_json_parser_generic_json@@Base+0x3b0>
  417a77:	mov    rdx,r15
  417a7a:	mov    rsi,rax
  417a7d:	mov    rdi,rbx
  417a80:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417a85:	cmp    r15,rax
  417a88:	je     417b50 <flatcc_json_parser_generic_json@@Base+0x300>
  417a8e:	movzx  edx,BYTE PTR [rax]
  417a91:	cmp    dl,0x2c
  417a94:	je     417c18 <flatcc_json_parser_generic_json@@Base+0x3c8>
  417a9a:	cmp    dl,0x5d
  417a9d:	je     417b00 <flatcc_json_parser_generic_json@@Base+0x2b0>
  417a9f:	mov    ecx,0x9
  417aa4:	mov    rdx,r15
  417aa7:	mov    rsi,rax
  417aaa:	mov    rdi,rbx
  417aad:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417ab2:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417ab4:	nop    DWORD PTR [rax+0x0]
  417ab8:	cmp    dl,0x2d
  417abb:	je     417d10 <flatcc_json_parser_generic_json@@Base+0x4c0>
  417ac1:	mov    rsi,r10
  417ac4:	mov    rdx,r15
  417ac7:	mov    rdi,rbx
  417aca:	mov    QWORD PTR [rsp+0x8],r10
  417acf:	call   417380 <flatcc_json_parser_skip_constant@@Base>
  417ad4:	mov    r10,QWORD PTR [rsp+0x8]
  417ad9:	cmp    rax,r10
  417adc:	jne    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417ae2:	mov    ecx,0x5
  417ae7:	mov    rdx,r15
  417aea:	mov    rsi,r10
  417aed:	mov    rdi,rbx
  417af0:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417af5:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  417afa:	nop    WORD PTR [rax+rax*1+0x0]
  417b00:	lea    rsi,[rax+0x1]
  417b04:	mov    rdx,r15
  417b07:	sub    rdx,rsi
  417b0a:	cmp    rdx,0x1
  417b0e:	jle    417b20 <flatcc_json_parser_generic_json@@Base+0x2d0>
  417b10:	cmp    BYTE PTR [rax+0x1],0x20
  417b14:	jg     417c60 <flatcc_json_parser_generic_json@@Base+0x410>
  417b1a:	je     417cf8 <flatcc_json_parser_generic_json@@Base+0x4a8>
  417b20:	mov    rdx,r15
  417b23:	mov    rdi,rbx
  417b26:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417b2b:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417b30:	cmp    BYTE PTR [rax+0x1],0x20
  417b34:	jle    417a01 <flatcc_json_parser_generic_json@@Base+0x1b1>
  417b3a:	inc    rax
  417b3d:	cmp    r15,rax
  417b40:	jne    417a18 <flatcc_json_parser_generic_json@@Base+0x1c8>
  417b46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  417b50:	cmp    rbp,r12
  417b53:	je     417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  417b59:	xor    ecx,ecx
  417b5b:	cmp    BYTE PTR [rbp-0x1],0x5d
  417b5f:	setne  cl
  417b62:	add    ecx,0x9
  417b65:	mov    rdx,r15
  417b68:	mov    rsi,rax
  417b6b:	mov    rdi,rbx
  417b6e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417b73:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  417b78:	nop    DWORD PTR [rax+rax*1+0x0]
  417b80:	lea    r10,[rax+0x1]
  417b84:	mov    rdx,r15
  417b87:	sub    rdx,r10
  417b8a:	cmp    rdx,0x1
  417b8e:	jle    417b9c <flatcc_json_parser_generic_json@@Base+0x34c>
  417b90:	cmp    BYTE PTR [rax+0x1],0x20
  417b94:	jg     417bad <flatcc_json_parser_generic_json@@Base+0x35d>
  417b96:	je     417ce0 <flatcc_json_parser_generic_json@@Base+0x490>
  417b9c:	mov    rsi,r10
  417b9f:	mov    rdx,r15
  417ba2:	mov    rdi,rbx
  417ba5:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417baa:	mov    r10,rax
  417bad:	cmp    r15,r10
  417bb0:	je     418023 <flatcc_json_parser_generic_json@@Base+0x7d3>
  417bb6:	movzx  edx,BYTE PTR [r10]
  417bba:	cmp    dl,0x7d
  417bbd:	jne    4178a6 <flatcc_json_parser_generic_json@@Base+0x56>
  417bc3:	lea    rax,[r10+0x1]
  417bc7:	mov    rdx,r15
  417bca:	sub    rdx,rax
  417bcd:	cmp    rdx,0x1
  417bd1:	jle    417be4 <flatcc_json_parser_generic_json@@Base+0x394>
  417bd3:	cmp    BYTE PTR [r10+0x1],0x20
  417bd8:	jg     417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417bde:	je     418216 <flatcc_json_parser_generic_json@@Base+0x9c6>
  417be4:	mov    rdx,r15
  417be7:	mov    rsi,rax
  417bea:	mov    rdi,rbx
  417bed:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417bf2:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417bf7:	nop    WORD PTR [rax+rax*1+0x0]
  417c00:	cmp    BYTE PTR [rax+0x1],0x20
  417c04:	jle    417a77 <flatcc_json_parser_generic_json@@Base+0x227>
  417c0a:	inc    rax
  417c0d:	jmp    417a85 <flatcc_json_parser_generic_json@@Base+0x235>
  417c12:	nop    WORD PTR [rax+rax*1+0x0]
  417c18:	lea    r10,[rax+0x1]
  417c1c:	mov    rdx,r15
  417c1f:	sub    rdx,r10
  417c22:	cmp    rdx,0x1
  417c26:	jle    417c34 <flatcc_json_parser_generic_json@@Base+0x3e4>
  417c28:	cmp    BYTE PTR [rax+0x1],0x20
  417c2c:	jg     417c45 <flatcc_json_parser_generic_json@@Base+0x3f5>
  417c2e:	je     41803b <flatcc_json_parser_generic_json@@Base+0x7eb>
  417c34:	mov    rsi,r10
  417c37:	mov    rdx,r15
  417c3a:	mov    rdi,rbx
  417c3d:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417c42:	mov    r10,rax
  417c45:	cmp    r15,r10
  417c48:	je     418136 <flatcc_json_parser_generic_json@@Base+0x8e6>
  417c4e:	movzx  edx,BYTE PTR [r10]
  417c52:	cmp    dl,0x5d
  417c55:	jne    4178a6 <flatcc_json_parser_generic_json@@Base+0x56>
  417c5b:	jmp    417bc3 <flatcc_json_parser_generic_json@@Base+0x373>
  417c60:	mov    rax,rsi
  417c63:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417c68:	nop    DWORD PTR [rax+rax*1+0x0]
  417c70:	cmp    dl,0x5b
  417c73:	jne    4178cc <flatcc_json_parser_generic_json@@Base+0x7c>
  417c79:	lea    rsi,[r10+0x1]
  417c7d:	mov    rax,r15
  417c80:	sub    rax,rsi
  417c83:	lea    rbp,[r14+0x1]
  417c87:	mov    BYTE PTR [r14],0x5d
  417c8b:	cmp    rax,0x1
  417c8f:	jle    417cb0 <flatcc_json_parser_generic_json@@Base+0x460>
  417c91:	cmp    BYTE PTR [r10+0x1],0x20
  417c96:	jg     417f50 <flatcc_json_parser_generic_json@@Base+0x700>
  417c9c:	jne    417cb0 <flatcc_json_parser_generic_json@@Base+0x460>
  417c9e:	cmp    BYTE PTR [r10+0x2],0x20
  417ca3:	jg     4181e5 <flatcc_json_parser_generic_json@@Base+0x995>
  417ca9:	nop    DWORD PTR [rax+0x0]
  417cb0:	mov    rdx,r15
  417cb3:	mov    rdi,rbx
  417cb6:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417cbb:	mov    r10,rax
  417cbe:	cmp    r15,r10
  417cc1:	je     418150 <flatcc_json_parser_generic_json@@Base+0x900>
  417cc7:	movzx  edx,BYTE PTR [r10]
  417ccb:	cmp    dl,0x5d
  417cce:	je     417934 <flatcc_json_parser_generic_json@@Base+0xe4>
  417cd4:	mov    r14,rbp
  417cd7:	jmp    4178a6 <flatcc_json_parser_generic_json@@Base+0x56>
  417cdc:	nop    DWORD PTR [rax+0x0]
  417ce0:	cmp    BYTE PTR [rax+0x2],0x20
  417ce4:	jle    417b9c <flatcc_json_parser_generic_json@@Base+0x34c>
  417cea:	lea    r10,[rax+0x2]
  417cee:	jmp    417bad <flatcc_json_parser_generic_json@@Base+0x35d>
  417cf3:	nop    DWORD PTR [rax+rax*1+0x0]
  417cf8:	cmp    BYTE PTR [rax+0x2],0x20
  417cfc:	jle    417b20 <flatcc_json_parser_generic_json@@Base+0x2d0>
  417d02:	add    rax,0x2
  417d06:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  417d0b:	nop    DWORD PTR [rax+rax*1+0x0]
  417d10:	cmp    r15,r10
  417d13:	je     4180af <flatcc_json_parser_generic_json@@Base+0x85f>
  417d19:	cmp    dl,0x2d
  417d1c:	je     41804e <flatcc_json_parser_generic_json@@Base+0x7fe>
  417d22:	movzx  eax,BYTE PTR [r10]
  417d26:	cmp    al,0x30
  417d28:	je     418072 <flatcc_json_parser_generic_json@@Base+0x822>
  417d2e:	sub    eax,0x31
  417d31:	cmp    al,0x8
  417d33:	ja     418164 <flatcc_json_parser_generic_json@@Base+0x914>
  417d39:	lea    rax,[r10+0x1]
  417d3d:	cmp    r15,rax
  417d40:	je     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  417d46:	movzx  edx,BYTE PTR [r10+0x1]
  417d4b:	lea    ecx,[rdx-0x30]
  417d4e:	cmp    cl,0x9
  417d51:	ja     417d6f <flatcc_json_parser_generic_json@@Base+0x51f>
  417d53:	nop    DWORD PTR [rax+rax*1+0x0]
  417d58:	inc    rax
  417d5b:	cmp    r15,rax
  417d5e:	je     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  417d64:	movzx  edx,BYTE PTR [rax]
  417d67:	lea    ecx,[rdx-0x30]
  417d6a:	cmp    cl,0x9
  417d6d:	jbe    417d58 <flatcc_json_parser_generic_json@@Base+0x508>
  417d6f:	cmp    dl,0x2e
  417d72:	je     4180e9 <flatcc_json_parser_generic_json@@Base+0x899>
  417d78:	mov    ecx,edx
  417d7a:	and    ecx,0xffffffdf
  417d7d:	cmp    cl,0x45
  417d80:	jne    417fd8 <flatcc_json_parser_generic_json@@Base+0x788>
  417d86:	lea    rsi,[rax+0x1]
  417d8a:	cmp    r15,rsi
  417d8d:	je     41805a <flatcc_json_parser_generic_json@@Base+0x80a>
  417d93:	movzx  edx,BYTE PTR [rax+0x1]
  417d97:	lea    ecx,[rdx-0x2b]
  417d9a:	and    ecx,0xfd
  417da0:	jne    417daf <flatcc_json_parser_generic_json@@Base+0x55f>
  417da2:	lea    rsi,[rax+0x2]
  417da6:	cmp    r15,rsi
  417da9:	je     417dbb <flatcc_json_parser_generic_json@@Base+0x56b>
  417dab:	movzx  edx,BYTE PTR [rax+0x2]
  417daf:	sub    edx,0x30
  417db2:	cmp    dl,0x9
  417db5:	jbe    41817c <flatcc_json_parser_generic_json@@Base+0x92c>
  417dbb:	mov    ecx,0x6
  417dc0:	mov    rdx,r15
  417dc3:	mov    rdi,rbx
  417dc6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417dcb:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417dd0:	cmp    r14,QWORD PTR [rsp]
  417dd4:	jne    417c79 <flatcc_json_parser_generic_json@@Base+0x429>
  417dda:	mov    ecx,0x2
  417ddf:	mov    rdx,r15
  417de2:	mov    rsi,r10
  417de5:	mov    rdi,rbx
  417de8:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417ded:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  417df2:	nop    WORD PTR [rax+rax*1+0x0]
  417df8:	cmp    dl,0x22
  417dfb:	je     417f58 <flatcc_json_parser_generic_json@@Base+0x708>
  417e01:	cmp    dl,0x2e
  417e04:	je     4180ba <flatcc_json_parser_generic_json@@Base+0x86a>
  417e0a:	mov    DWORD PTR [rbx+0x14],0x1
  417e11:	cmp    r15,r10
  417e14:	je     41829d <flatcc_json_parser_generic_json@@Base+0xa4d>
  417e1a:	movzx  edx,BYTE PTR [r10]
  417e1e:	cmp    dl,0x20
  417e21:	jle    418295 <flatcc_json_parser_generic_json@@Base+0xa45>
  417e27:	mov    rax,r10
  417e2a:	lea    ecx,[rdx-0x2e]
  417e2d:	mov    rsi,rax
  417e30:	cmp    cl,0x31
  417e33:	ja     417e71 <flatcc_json_parser_generic_json@@Base+0x621>
  417e35:	movabs rdi,0x2000000000ffd
  417e3f:	bt     rdi,rcx
  417e43:	jae    417e71 <flatcc_json_parser_generic_json@@Base+0x621>
  417e45:	lea    rdi,[rax+0x1]
  417e49:	mov    rsi,rdi
  417e4c:	cmp    r15,rdi
  417e4f:	je     418258 <flatcc_json_parser_generic_json@@Base+0xa08>
  417e55:	movzx  ecx,BYTE PTR [rdi]
  417e58:	mov    rax,rdi
  417e5b:	cmp    cl,0x20
  417e5e:	jle    418258 <flatcc_json_parser_generic_json@@Base+0xa08>
  417e64:	mov    edx,ecx
  417e66:	lea    ecx,[rdx-0x2e]
  417e69:	mov    rsi,rax
  417e6c:	cmp    cl,0x31
  417e6f:	jbe    417e35 <flatcc_json_parser_generic_json@@Base+0x5e5>
  417e71:	mov    ecx,edx
  417e73:	or     ecx,0x20
  417e76:	sub    ecx,0x61
  417e79:	cmp    cl,0x19
  417e7c:	jbe    418158 <flatcc_json_parser_generic_json@@Base+0x908>
  417e82:	mov    rax,r15
  417e85:	sub    rax,rsi
  417e88:	cmp    rax,0x1
  417e8c:	jle    417e99 <flatcc_json_parser_generic_json@@Base+0x649>
  417e8e:	cmp    BYTE PTR [rsi],0x20
  417e91:	jg     417ea7 <flatcc_json_parser_generic_json@@Base+0x657>
  417e93:	je     4181ee <flatcc_json_parser_generic_json@@Base+0x99e>
  417e99:	mov    rdx,r15
  417e9c:	mov    rdi,rbx
  417e9f:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417ea4:	mov    rsi,rax
  417ea7:	cmp    r15,rsi
  417eaa:	je     4182ba <flatcc_json_parser_generic_json@@Base+0xa6a>
  417eb0:	cmp    BYTE PTR [rsi],0x3a
  417eb3:	jne    4182a5 <flatcc_json_parser_generic_json@@Base+0xa55>
  417eb9:	lea    r10,[rsi+0x1]
  417ebd:	mov    rax,r15
  417ec0:	sub    rax,r10
  417ec3:	cmp    rax,0x1
  417ec7:	jle    417ed8 <flatcc_json_parser_generic_json@@Base+0x688>
  417ec9:	movzx  edx,BYTE PTR [rsi+0x1]
  417ecd:	cmp    dl,0x20
  417ed0:	jg     417eec <flatcc_json_parser_generic_json@@Base+0x69c>
  417ed2:	je     418200 <flatcc_json_parser_generic_json@@Base+0x9b0>
  417ed8:	mov    rdx,r15
  417edb:	mov    rsi,r10
  417ede:	mov    rdi,rbx
  417ee1:	call   416950 <flatcc_json_parser_space_ext@@Base>
  417ee6:	movzx  edx,BYTE PTR [rax]
  417ee9:	mov    r10,rax
  417eec:	cmp    dl,0x39
  417eef:	jg     4178c3 <flatcc_json_parser_generic_json@@Base+0x73>
  417ef5:	cmp    dl,0x30
  417ef8:	jge    417d10 <flatcc_json_parser_generic_json@@Base+0x4c0>
  417efe:	cmp    dl,0x22
  417f01:	jne    417ab8 <flatcc_json_parser_generic_json@@Base+0x268>
  417f07:	cmp    r10,r15
  417f0a:	jne    417993 <flatcc_json_parser_generic_json@@Base+0x143>
  417f10:	mov    ecx,0x10
  417f15:	mov    rdx,r15
  417f18:	mov    rsi,r15
  417f1b:	mov    rdi,rbx
  417f1e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417f23:	jmp    417997 <flatcc_json_parser_generic_json@@Base+0x147>
  417f28:	nop    DWORD PTR [rax+rax*1+0x0]
  417f30:	mov    ecx,0x14
  417f35:	mov    rdx,r15
  417f38:	mov    rsi,rax
  417f3b:	mov    rdi,rbx
  417f3e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417f43:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417f48:	mov    r10,rsi
  417f4b:	jmp    41791e <flatcc_json_parser_generic_json@@Base+0xce>
  417f50:	mov    r10,rsi
  417f53:	jmp    417cbe <flatcc_json_parser_generic_json@@Base+0x46e>
  417f58:	mov    DWORD PTR [rbx+0x14],0x0
  417f5f:	inc    r10
  417f62:	cmp    r15,r10
  417f65:	je     418094 <flatcc_json_parser_generic_json@@Base+0x844>
  417f6b:	movzx  edx,BYTE PTR [r10]
  417f6f:	cmp    dl,0x22
  417f72:	jne    417f9a <flatcc_json_parser_generic_json@@Base+0x74a>
  417f74:	jmp    4180e0 <flatcc_json_parser_generic_json@@Base+0x890>
  417f79:	nop    DWORD PTR [rax+0x0]
  417f80:	lea    r10,[rax+0x1]
  417f84:	cmp    r15,r10
  417f87:	je     418094 <flatcc_json_parser_generic_json@@Base+0x844>
  417f8d:	movzx  edx,BYTE PTR [rax+0x1]
  417f91:	cmp    dl,0x22
  417f94:	je     4180e0 <flatcc_json_parser_generic_json@@Base+0x890>
  417f9a:	mov    rax,r10
  417f9d:	cmp    dl,0x5c
  417fa0:	jne    417f80 <flatcc_json_parser_generic_json@@Base+0x730>
  417fa2:	mov    rdx,r15
  417fa5:	sub    rdx,r10
  417fa8:	cmp    rdx,0x1
  417fac:	jle    418089 <flatcc_json_parser_generic_json@@Base+0x839>
  417fb2:	inc    rax
  417fb5:	jmp    417f80 <flatcc_json_parser_generic_json@@Base+0x730>
  417fb7:	mov    rax,r15
  417fba:	nop    WORD PTR [rax+rax*1+0x0]
  417fc0:	mov    ecx,0x6
  417fc5:	mov    rdx,r15
  417fc8:	mov    rsi,rax
  417fcb:	mov    rdi,rbx
  417fce:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  417fd3:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417fd8:	cmp    dl,0x20
  417fdb:	je     4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417fe1:	jle    418001 <flatcc_json_parser_generic_json@@Base+0x7b1>
  417fe3:	cmp    dl,0x3a
  417fe6:	je     4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417fec:	jle    418019 <flatcc_json_parser_generic_json@@Base+0x7c9>
  417fee:	cmp    dl,0x5d
  417ff1:	je     4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  417ff7:	cmp    dl,0x7d
  417ffa:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  417ffc:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  418001:	cmp    dl,0x9
  418004:	jl     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418006:	cmp    dl,0xb
  418009:	jle    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  41800f:	cmp    dl,0xd
  418012:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418014:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  418019:	cmp    dl,0x2c
  41801c:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  41801e:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  418023:	mov    ecx,0xa
  418028:	mov    rdx,r15
  41802b:	mov    rsi,r15
  41802e:	mov    rdi,rbx
  418031:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418036:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41803b:	cmp    BYTE PTR [rax+0x2],0x20
  41803f:	jle    417c34 <flatcc_json_parser_generic_json@@Base+0x3e4>
  418045:	lea    r10,[rax+0x2]
  418049:	jmp    417c45 <flatcc_json_parser_generic_json@@Base+0x3f5>
  41804e:	inc    r10
  418051:	cmp    r15,r10
  418054:	jne    417d22 <flatcc_json_parser_generic_json@@Base+0x4d2>
  41805a:	mov    ecx,0x6
  41805f:	mov    rdx,r15
  418062:	mov    rsi,r15
  418065:	mov    rdi,rbx
  418068:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  41806d:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  418072:	lea    rax,[r10+0x1]
  418076:	cmp    r15,rax
  418079:	je     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  41807f:	movzx  edx,BYTE PTR [r10+0x1]
  418084:	jmp    417d6f <flatcc_json_parser_generic_json@@Base+0x51f>
  418089:	cmp    r15,r10
  41808c:	je     418094 <flatcc_json_parser_generic_json@@Base+0x844>
  41808e:	cmp    BYTE PTR [r10],0x22
  418092:	je     4180e0 <flatcc_json_parser_generic_json@@Base+0x890>
  418094:	mov    rsi,r10
  418097:	mov    ecx,0x14
  41809c:	mov    rdx,r15
  41809f:	mov    rdi,rbx
  4180a2:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4180a7:	mov    rsi,rax
  4180aa:	jmp    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  4180af:	mov    rbp,r14
  4180b2:	mov    rax,r15
  4180b5:	jmp    417b50 <flatcc_json_parser_generic_json@@Base+0x300>
  4180ba:	mov    rsi,r10
  4180bd:	mov    ecx,0x5
  4180c2:	mov    rdx,r15
  4180c5:	mov    rdi,rbx
  4180c8:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4180cd:	mov    r10,rax
  4180d0:	mov    eax,DWORD PTR [rbx+0x14]
  4180d3:	test   eax,eax
  4180d5:	je     417f62 <flatcc_json_parser_generic_json@@Base+0x712>
  4180db:	jmp    417e11 <flatcc_json_parser_generic_json@@Base+0x5c1>
  4180e0:	lea    rsi,[r10+0x1]
  4180e4:	jmp    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  4180e9:	movzx  ecx,BYTE PTR [rax+0x1]
  4180ed:	lea    edx,[rcx-0x30]
  4180f0:	cmp    dl,0x9
  4180f3:	ja     41827c <flatcc_json_parser_generic_json@@Base+0xa2c>
  4180f9:	lea    rcx,[rax+0x2]
  4180fd:	cmp    r15,rcx
  418100:	je     417fb7 <flatcc_json_parser_generic_json@@Base+0x767>
  418106:	movzx  edx,BYTE PTR [rax+0x2]
  41810a:	lea    eax,[rdx-0x30]
  41810d:	cmp    al,0x9
  41810f:	ja     41812e <flatcc_json_parser_generic_json@@Base+0x8de>
  418111:	nop    DWORD PTR [rax+0x0]
  418118:	inc    rcx
  41811b:	cmp    r15,rcx
  41811e:	je     417fb7 <flatcc_json_parser_generic_json@@Base+0x767>
  418124:	movzx  edx,BYTE PTR [rcx]
  418127:	lea    eax,[rdx-0x30]
  41812a:	cmp    al,0x9
  41812c:	jbe    418118 <flatcc_json_parser_generic_json@@Base+0x8c8>
  41812e:	mov    rax,rcx
  418131:	jmp    417d78 <flatcc_json_parser_generic_json@@Base+0x528>
  418136:	mov    ecx,0x9
  41813b:	mov    rdx,r15
  41813e:	mov    rsi,r15
  418141:	mov    rdi,rbx
  418144:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418149:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41814e:	xchg   ax,ax
  418150:	mov    rax,r10
  418153:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  418158:	lea    rdi,[rax+0x1]
  41815c:	mov    rsi,rdi
  41815f:	jmp    417e4c <flatcc_json_parser_generic_json@@Base+0x5fc>
  418164:	mov    ecx,0x6
  418169:	mov    rdx,r15
  41816c:	mov    rsi,r10
  41816f:	mov    rdi,rbx
  418172:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418177:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  41817c:	lea    rax,[rsi+0x1]
  418180:	cmp    r15,rax
  418183:	je     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418189:	movzx  edx,BYTE PTR [rsi+0x1]
  41818d:	lea    ecx,[rdx-0x30]
  418190:	cmp    cl,0x9
  418193:	ja     4181af <flatcc_json_parser_generic_json@@Base+0x95f>
  418195:	nop    DWORD PTR [rax]
  418198:	inc    rax
  41819b:	cmp    r15,rax
  41819e:	je     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  4181a4:	movzx  edx,BYTE PTR [rax]
  4181a7:	lea    ecx,[rdx-0x30]
  4181aa:	cmp    cl,0x9
  4181ad:	jbe    418198 <flatcc_json_parser_generic_json@@Base+0x948>
  4181af:	cmp    dl,0x20
  4181b2:	je     417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  4181b8:	jle    418238 <flatcc_json_parser_generic_json@@Base+0x9e8>
  4181ba:	cmp    dl,0x3a
  4181bd:	je     417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  4181c3:	jle    41822a <flatcc_json_parser_generic_json@@Base+0x9da>
  4181c5:	cmp    dl,0x5d
  4181c8:	je     417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  4181ce:	cmp    dl,0x7d
  4181d1:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  4181d7:	jmp    417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  4181dc:	add    r10,0x2
  4181e0:	jmp    41791e <flatcc_json_parser_generic_json@@Base+0xce>
  4181e5:	add    r10,0x2
  4181e9:	jmp    417cbe <flatcc_json_parser_generic_json@@Base+0x46e>
  4181ee:	cmp    BYTE PTR [rsi+0x1],0x20
  4181f2:	jle    417e99 <flatcc_json_parser_generic_json@@Base+0x649>
  4181f8:	inc    rsi
  4181fb:	jmp    417ea7 <flatcc_json_parser_generic_json@@Base+0x657>
  418200:	movzx  edx,BYTE PTR [rsi+0x2]
  418204:	cmp    dl,0x20
  418207:	jle    417ed8 <flatcc_json_parser_generic_json@@Base+0x688>
  41820d:	lea    r10,[rsi+0x2]
  418211:	jmp    417eec <flatcc_json_parser_generic_json@@Base+0x69c>
  418216:	cmp    BYTE PTR [r10+0x2],0x20
  41821b:	jle    417be4 <flatcc_json_parser_generic_json@@Base+0x394>
  418221:	lea    rax,[r10+0x2]
  418225:	jmp    417a40 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41822a:	cmp    dl,0x2c
  41822d:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418233:	jmp    417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  418238:	cmp    dl,0x9
  41823b:	jl     417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418241:	cmp    dl,0xb
  418244:	jle    417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41824a:	cmp    dl,0xd
  41824d:	jne    417fc0 <flatcc_json_parser_generic_json@@Base+0x770>
  418253:	jmp    417a4c <flatcc_json_parser_generic_json@@Base+0x1fc>
  418258:	cmp    dl,0x2e
  41825b:	jne    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  418261:	mov    rsi,rdi
  418264:	mov    ecx,0x5
  418269:	mov    rdx,r15
  41826c:	mov    rdi,rbx
  41826f:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418274:	mov    rsi,rax
  418277:	jmp    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  41827c:	lea    rsi,[rax+0x1]
  418280:	mov    ecx,0x6
  418285:	mov    rdx,r15
  418288:	mov    rdi,rbx
  41828b:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418290:	jmp    4179e2 <flatcc_json_parser_generic_json@@Base+0x192>
  418295:	mov    rsi,r10
  418298:	jmp    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  41829d:	mov    rsi,r15
  4182a0:	jmp    417e82 <flatcc_json_parser_generic_json@@Base+0x632>
  4182a5:	mov    ecx,0x4
  4182aa:	mov    rdx,r15
  4182ad:	mov    rdi,rbx
  4182b0:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4182b5:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  4182ba:	mov    ecx,0xa
  4182bf:	mov    rdx,r15
  4182c2:	mov    rsi,r15
  4182c5:	mov    rdi,rbx
  4182c8:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4182cd:	jmp    417948 <flatcc_json_parser_generic_json@@Base+0xf8>
  4182d2:	call   4031c0 <__stack_chk_fail@plt>
  4182d7:	mov    rbp,r14
  4182da:	jmp    417b50 <flatcc_json_parser_generic_json@@Base+0x300>
  4182df:	nop

00000000004182e0 <flatcc_json_parser_unmatched_symbol@@Base>:
  4182e0:	endbr64 
  4182e4:	push   rbp
  4182e5:	mov    rbp,rdi
  4182e8:	push   rbx
  4182e9:	mov    rbx,rdx
  4182ec:	sub    rsp,0x8
  4182f0:	test   BYTE PTR [rdi+0x10],0x1
  4182f4:	je     418420 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
  4182fa:	mov    eax,DWORD PTR [rdi+0x14]
  4182fd:	test   eax,eax
  4182ff:	je     4183b8 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
  418305:	cmp    rsi,rdx
  418308:	je     418382 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  41830a:	movzx  edx,BYTE PTR [rsi]
  41830d:	cmp    dl,0x20
  418310:	jle    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  418312:	mov    rcx,rsi
  418315:	lea    eax,[rdx-0x2e]
  418318:	movabs r8,0x2000000000ffd
  418322:	mov    rsi,rcx
  418325:	cmp    al,0x31
  418327:	ja     41835b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  418329:	bt     r8,rax
  41832d:	jae    41835b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  41832f:	lea    rax,[rcx+0x1]
  418333:	mov    rsi,rax
  418336:	cmp    rbx,rax
  418339:	je     4184b8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  41833f:	movzx  edi,BYTE PTR [rax]
  418342:	mov    rcx,rax
  418345:	cmp    dil,0x20
  418349:	jle    4184b8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  41834f:	mov    edx,edi
  418351:	lea    eax,[rdx-0x2e]
  418354:	mov    rsi,rcx
  418357:	cmp    al,0x31
  418359:	jbe    418329 <flatcc_json_parser_unmatched_symbol@@Base+0x49>
  41835b:	mov    eax,edx
  41835d:	or     eax,0x20
  418360:	sub    eax,0x61
  418363:	cmp    al,0x19
  418365:	jbe    418440 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
  41836b:	mov    rax,rbx
  41836e:	sub    rax,rsi
  418371:	cmp    rax,0x1
  418375:	jle    418382 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  418377:	cmp    BYTE PTR [rsi],0x20
  41837a:	jg     418390 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  41837c:	je     418490 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
  418382:	mov    rdx,rbx
  418385:	mov    rdi,rbp
  418388:	call   416950 <flatcc_json_parser_space_ext@@Base>
  41838d:	mov    rsi,rax
  418390:	cmp    rbx,rsi
  418393:	je     41839e <flatcc_json_parser_unmatched_symbol@@Base+0xbe>
  418395:	cmp    BYTE PTR [rsi],0x3a
  418398:	je     418450 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
  41839e:	mov    ecx,0x4
  4183a3:	add    rsp,0x8
  4183a7:	mov    rdx,rbx
  4183aa:	pop    rbx
  4183ab:	mov    rdi,rbp
  4183ae:	pop    rbp
  4183af:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  4183b4:	nop    DWORD PTR [rax+0x0]
  4183b8:	cmp    rsi,rdx
  4183bb:	je     418408 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  4183bd:	movzx  edx,BYTE PTR [rsi]
  4183c0:	cmp    dl,0x22
  4183c3:	jne    4183e2 <flatcc_json_parser_unmatched_symbol@@Base+0x102>
  4183c5:	jmp    418438 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  4183c7:	nop    WORD PTR [rax+rax*1+0x0]
  4183d0:	lea    rsi,[rax+0x1]
  4183d4:	cmp    rbx,rsi
  4183d7:	je     418408 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  4183d9:	movzx  edx,BYTE PTR [rax+0x1]
  4183dd:	cmp    dl,0x22
  4183e0:	je     418438 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  4183e2:	mov    rax,rsi
  4183e5:	cmp    dl,0x5c
  4183e8:	jne    4183d0 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  4183ea:	mov    rdx,rbx
  4183ed:	sub    rdx,rsi
  4183f0:	cmp    rdx,0x1
  4183f4:	jle    418430 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
  4183f6:	inc    rax
  4183f9:	lea    rsi,[rax+0x1]
  4183fd:	cmp    rbx,rsi
  418400:	jne    4183d9 <flatcc_json_parser_unmatched_symbol@@Base+0xf9>
  418402:	nop    WORD PTR [rax+rax*1+0x0]
  418408:	mov    ecx,0x14
  41840d:	mov    rdx,rbx
  418410:	mov    rdi,rbp
  418413:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418418:	mov    rsi,rax
  41841b:	jmp    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  418420:	mov    ecx,0xd
  418425:	jmp    4183a3 <flatcc_json_parser_unmatched_symbol@@Base+0xc3>
  41842a:	nop    WORD PTR [rax+rax*1+0x0]
  418430:	cmp    BYTE PTR [rsi],0x22
  418433:	jne    418408 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  418435:	nop    DWORD PTR [rax]
  418438:	inc    rsi
  41843b:	jmp    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  418440:	lea    rax,[rcx+0x1]
  418444:	mov    rsi,rax
  418447:	jmp    418336 <flatcc_json_parser_unmatched_symbol@@Base+0x56>
  41844c:	nop    DWORD PTR [rax+0x0]
  418450:	lea    rax,[rsi+0x1]
  418454:	mov    rdx,rbx
  418457:	sub    rdx,rax
  41845a:	cmp    rdx,0x1
  41845e:	jle    418468 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  418460:	cmp    BYTE PTR [rsi+0x1],0x20
  418464:	jg     418476 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  418466:	je     4184a8 <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
  418468:	mov    rdx,rbx
  41846b:	mov    rsi,rax
  41846e:	mov    rdi,rbp
  418471:	call   416950 <flatcc_json_parser_space_ext@@Base>
  418476:	add    rsp,0x8
  41847a:	mov    rdx,rbx
  41847d:	pop    rbx
  41847e:	mov    rdi,rbp
  418481:	mov    rsi,rax
  418484:	pop    rbp
  418485:	jmp    417850 <flatcc_json_parser_generic_json@@Base>
  41848a:	nop    WORD PTR [rax+rax*1+0x0]
  418490:	cmp    BYTE PTR [rsi+0x1],0x20
  418494:	jle    418382 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  41849a:	inc    rsi
  41849d:	jmp    418390 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  4184a2:	nop    WORD PTR [rax+rax*1+0x0]
  4184a8:	cmp    BYTE PTR [rsi+0x2],0x20
  4184ac:	jle    418468 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  4184ae:	lea    rax,[rsi+0x2]
  4184b2:	jmp    418476 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  4184b4:	nop    DWORD PTR [rax+0x0]
  4184b8:	cmp    dl,0x2e
  4184bb:	jne    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  4184c1:	mov    rsi,rax
  4184c4:	mov    ecx,0x5
  4184c9:	mov    rdx,rbx
  4184cc:	mov    rdi,rbp
  4184cf:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4184d4:	mov    rsi,rax
  4184d7:	jmp    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  4184dc:	nop    DWORD PTR [rax+0x0]

00000000004184e0 <flatcc_json_parser_integer@@Base>:
  4184e0:	endbr64 
  4184e4:	cmp    rsi,rdx
  4184e7:	je     418580 <flatcc_json_parser_integer@@Base+0xa0>
  4184ed:	cmp    BYTE PTR [rsi],0x2d
  4184f0:	sete   al
  4184f3:	movzx  r9d,al
  4184f7:	movzx  eax,al
  4184fa:	add    rax,rsi
  4184fd:	mov    DWORD PTR [rcx],r9d
  418500:	cmp    rdx,rax
  418503:	je     41859a <flatcc_json_parser_integer@@Base+0xba>
  418509:	movsx  r9,BYTE PTR [rax]
  41850d:	lea    ecx,[r9-0x30]
  418511:	cmp    cl,0x9
  418514:	ja     418595 <flatcc_json_parser_integer@@Base+0xb5>
  418516:	sub    r9,0x30
  41851a:	jmp    418531 <flatcc_json_parser_integer@@Base+0x51>
  41851c:	nop    DWORD PTR [rax+0x0]
  418520:	lea    r10,[r9+r9*4]
  418524:	lea    rcx,[rcx+r10*2-0x30]
  418529:	cmp    rcx,r9
  41852c:	jb     418570 <flatcc_json_parser_integer@@Base+0x90>
  41852e:	mov    r9,rcx
  418531:	inc    rax
  418534:	cmp    rdx,rax
  418537:	je     41855f <flatcc_json_parser_integer@@Base+0x7f>
  418539:	movsx  rcx,BYTE PTR [rax]
  41853d:	lea    r10d,[rcx-0x30]
  418541:	cmp    r10b,0x9
  418545:	jbe    418520 <flatcc_json_parser_integer@@Base+0x40>
  418547:	cmp    rsi,rax
  41854a:	je     418568 <flatcc_json_parser_integer@@Base+0x88>
  41854c:	movzx  ecx,BYTE PTR [rax]
  41854f:	mov    esi,ecx
  418551:	and    esi,0xffffffdf
  418554:	cmp    sil,0x45
  418558:	je     418588 <flatcc_json_parser_integer@@Base+0xa8>
  41855a:	cmp    cl,0x2e
  41855d:	je     418588 <flatcc_json_parser_integer@@Base+0xa8>
  41855f:	mov    QWORD PTR [r8],r9
  418562:	ret    
  418563:	nop    DWORD PTR [rax+rax*1+0x0]
  418568:	ret    
  418569:	nop    DWORD PTR [rax+0x0]
  418570:	mov    ecx,0x8
  418575:	mov    rsi,rax
  418578:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  41857d:	nop    DWORD PTR [rax]
  418580:	mov    rax,rsi
  418583:	ret    
  418584:	nop    DWORD PTR [rax+0x0]
  418588:	mov    ecx,0xc
  41858d:	mov    rsi,rax
  418590:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  418595:	xor    r9d,r9d
  418598:	jmp    418547 <flatcc_json_parser_integer@@Base+0x67>
  41859a:	xor    r9d,r9d
  41859d:	jmp    41855f <flatcc_json_parser_integer@@Base+0x7f>
  41859f:	nop

00000000004185a0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  4185a0:	endbr64 
  4185a4:	push   r15
  4185a6:	push   r14
  4185a8:	mov    r14d,r8d
  4185ab:	push   r13
  4185ad:	mov    r13,rcx
  4185b0:	push   r12
  4185b2:	push   rbp
  4185b3:	mov    rbp,rdi
  4185b6:	push   rbx
  4185b7:	mov    rbx,rdx
  4185ba:	sub    rsp,0x38
  4185be:	mov    rax,QWORD PTR fs:0x28
  4185c7:	mov    QWORD PTR [rsp+0x28],rax
  4185cc:	xor    eax,eax
  4185ce:	cmp    rsi,rdx
  4185d1:	je     418788 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  4185d7:	cmp    BYTE PTR [rsi],0x22
  4185da:	lea    r12,[rsi+0x1]
  4185de:	jne    418788 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  4185e4:	mov    rdx,rbx
  4185e7:	mov    rsi,r12
  4185ea:	mov    rdi,rbp
  4185ed:	call   416900 <flatcc_json_parser_string_part@@Base>
  4185f2:	mov    r8,rax
  4185f5:	cmp    rbx,rax
  4185f8:	je     418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  4185fe:	cmp    BYTE PTR [rax],0x22
  418601:	jne    418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  418607:	mov    r15,rax
  41860a:	sub    r15,r12
  41860d:	mov    rax,r15
  418610:	mov    rdx,r15
  418613:	shr    rdx,0x2
  418617:	and    eax,0x3
  41861a:	mov    QWORD PTR [rsp+0x10],r15
  41861f:	lea    r9,[rdx+rdx*2]
  418623:	cmp    rax,0x2
  418627:	je     4187c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
  41862d:	lea    rdx,[r9+0x2]
  418631:	cmp    rax,0x3
  418635:	cmove  r9,rdx
  418639:	mov    rdi,QWORD PTR [rbp+0x0]
  41863d:	mov    ecx,0xffffffff
  418642:	mov    edx,0x1
  418647:	mov    esi,0x1
  41864c:	mov    QWORD PTR [rsp],r8
  418650:	mov    QWORD PTR [rsp+0x8],r9
  418655:	call   412ea0 <flatcc_builder_start_vector@@Base>
  41865a:	test   eax,eax
  41865c:	mov    r8,QWORD PTR [rsp]
  418660:	jne    4187a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  418666:	mov    r9,QWORD PTR [rsp+0x8]
  41866b:	mov    rdi,QWORD PTR [rbp+0x0]
  41866f:	mov    rsi,r9
  418672:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  418677:	test   rax,rax
  41867a:	mov    r8,QWORD PTR [rsp]
  41867e:	je     4187a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  418684:	mov    r9,QWORD PTR [rsp+0x8]
  418689:	test   r14d,r14d
  41868c:	lea    rcx,[rip+0x328d]        # 41b920 <flatcc_builder_padding_base@@Base+0x9a0>
  418693:	lea    rdx,[rip+0x3386]        # 41ba20 <flatcc_builder_padding_base@@Base+0xaa0>
  41869a:	cmovne rdx,rcx
  41869e:	mov    rsi,0xffffffffffffffff
  4186a5:	test   r9,r9
  4186a8:	cmovne rsi,r9
  4186ac:	mov    QWORD PTR [rsp],r15
  4186b0:	mov    QWORD PTR [rsp+0x8],rax
  4186b5:	mov    rcx,r12
  4186b8:	lea    r11,[rax+rsi*1]
  4186bc:	mov    rdi,r11
  4186bf:	sub    rdi,QWORD PTR [rsp+0x8]
  4186c4:	cmp    QWORD PTR [rsp],0x0
  4186c9:	mov    QWORD PTR [rsp+0x18],rdi
  4186ce:	je     418a44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a4>
  4186d4:	mov    r10,QWORD PTR [rsp]
  4186d8:	xor    esi,esi
  4186da:	movzx  edi,BYTE PTR [rcx+rsi*1]
  4186de:	movzx  edi,BYTE PTR [rdx+rdi*1]
  4186e2:	mov    BYTE PTR [rsp+rsi*1+0x24],dil
  4186e7:	cmp    dil,0x3f
  4186eb:	jbe    4187d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
  4186f1:	cmp    dil,0x41
  4186f5:	je     4187f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
  4186fb:	mov    r11,rsi
  4186fe:	cmp    dil,0x42
  418702:	je     418800 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
  418708:	mov    rdx,r10
  41870b:	sub    rdx,r11
  41870e:	cmp    rsi,0x2
  418712:	je     418930 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
  418718:	cmp    rsi,0x3
  41871c:	je     418840 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a0>
  418722:	mov    rcx,r15
  418725:	sub    rcx,QWORD PTR [rsp]
  418729:	test   rsi,rsi
  41872c:	je     418970 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
  418732:	lea    r8,[r12+rcx*1]
  418736:	nop    WORD PTR cs:[rax+rax*1+0x0]
  418740:	mov    DWORD PTR [r13+0x0],0x0
  418748:	xor    ecx,ecx
  41874a:	test   r14d,r14d
  41874d:	setne  cl
  418750:	add    ecx,0x1f
  418753:	mov    rax,QWORD PTR [rsp+0x28]
  418758:	xor    rax,QWORD PTR fs:0x28
  418761:	jne    418a4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  418767:	add    rsp,0x38
  41876b:	mov    rdx,rbx
  41876e:	pop    rbx
  41876f:	mov    rdi,rbp
  418772:	pop    rbp
  418773:	pop    r12
  418775:	pop    r13
  418777:	pop    r14
  418779:	mov    rsi,r8
  41877c:	pop    r15
  41877e:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  418783:	nop    DWORD PTR [rax+rax*1+0x0]
  418788:	mov    ecx,0x10
  41878d:	mov    rdx,rbx
  418790:	mov    rdi,rbp
  418793:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418798:	mov    r12,rax
  41879b:	jmp    4185e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
  4187a0:	mov    DWORD PTR [r13+0x0],0x0
  4187a8:	mov    rax,QWORD PTR [rsp+0x28]
  4187ad:	xor    rax,QWORD PTR fs:0x28
  4187b6:	jne    418a4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  4187bc:	mov    ecx,0x21
  4187c1:	jmp    418767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  4187c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4187c8:	inc    r9
  4187cb:	jmp    418639 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x99>
  4187d0:	inc    rsi
  4187d3:	cmp    rsi,0x3
  4187d7:	ja     4189b7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x417>
  4187dd:	cmp    r10,rsi
  4187e0:	jne    4186da <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13a>
  4187e6:	xor    edx,edx
  4187e8:	jmp    41870e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16e>
  4187ed:	nop    DWORD PTR [rax]
  4187f0:	inc    rcx
  4187f3:	dec    r10
  4187f6:	jmp    4187d3 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x233>
  4187f8:	nop    DWORD PTR [rax+rax*1+0x0]
  418800:	lea    r11,[rsi+0x1]
  418804:	cmp    r11,r10
  418807:	jb     41881c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
  418809:	jmp    418708 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41880e:	xchg   ax,ax
  418810:	inc    r11
  418813:	cmp    r11,r10
  418816:	jae    418708 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41881c:	cmp    r11,0x7
  418820:	ja     418708 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  418826:	movzx  edi,BYTE PTR [rcx+r11*1]
  41882b:	movzx  edi,BYTE PTR [rdx+rdi*1]
  41882f:	sub    edi,0x41
  418832:	cmp    dil,0x1
  418836:	jbe    418810 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  418838:	jmp    418708 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41883d:	nop    DWORD PTR [rax]
  418840:	movzx  ecx,BYTE PTR [rsp+0x26]
  418845:	mov    esi,ecx
  418847:	shl    esi,0x6
  41884a:	and    esi,0xc0
  418850:	jne    418960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  418856:	cmp    QWORD PTR [rsp+0x18],0x1
  41885c:	je     418960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  418862:	movzx  esi,BYTE PTR [rsp+0x25]
  418867:	movzx  edi,BYTE PTR [rsp+0x24]
  41886c:	mov    r10,QWORD PTR [rsp+0x8]
  418871:	lea    r11d,[rdi*4+0x0]
  418879:	mov    edi,esi
  41887b:	shr    dil,0x4
  41887f:	or     edi,r11d
  418882:	shl    esi,0x4
  418885:	shr    cl,0x2
  418888:	mov    BYTE PTR [r10],dil
  41888b:	or     ecx,esi
  41888d:	mov    BYTE PTR [r10+0x1],cl
  418891:	lea    rcx,[r10+0x2]
  418895:	sub    rcx,rax
  418898:	mov    rax,rcx
  41889b:	mov    rcx,r15
  41889e:	sub    rcx,rdx
  4188a1:	mov    QWORD PTR [rsp+0x10],rcx
  4188a6:	mov    rdx,rcx
  4188a9:	cmp    r15,rdx
  4188ac:	je     4188c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
  4188ae:	mov    r8,QWORD PTR [rsp+0x10]
  4188b3:	add    r8,r12
  4188b6:	jmp    418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  4188bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4188c0:	mov    rdi,QWORD PTR [rbp+0x0]
  4188c4:	cmp    r9,rax
  4188c7:	jbe    4188e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
  4188c9:	mov    rsi,r9
  4188cc:	sub    rsi,rax
  4188cf:	mov    QWORD PTR [rsp],r8
  4188d3:	call   412d00 <flatcc_builder_truncate_vector@@Base>
  4188d8:	test   eax,eax
  4188da:	mov    r8,QWORD PTR [rsp]
  4188de:	jne    4187a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  4188e4:	mov    rdi,QWORD PTR [rbp+0x0]
  4188e8:	mov    QWORD PTR [rsp],r8
  4188ec:	call   413d60 <flatcc_builder_end_vector@@Base>
  4188f1:	test   eax,eax
  4188f3:	mov    DWORD PTR [r13+0x0],eax
  4188f7:	mov    r8,QWORD PTR [rsp]
  4188fb:	je     4187a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  418901:	cmp    BYTE PTR [r8],0x22
  418905:	je     418990 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
  41890b:	mov    rax,QWORD PTR [rsp+0x28]
  418910:	xor    rax,QWORD PTR fs:0x28
  418919:	jne    418a4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41891f:	mov    ecx,0x14
  418924:	jmp    418767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  418929:	nop    DWORD PTR [rax+0x0]
  418930:	movzx  ecx,BYTE PTR [rsp+0x25]
  418935:	mov    esi,ecx
  418937:	shl    esi,0x4
  41893a:	and    esi,0xf0
  418940:	jne    418960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  418942:	movzx  esi,BYTE PTR [rsp+0x24]
  418947:	mov    rdi,QWORD PTR [rsp+0x8]
  41894c:	shl    esi,0x2
  41894f:	shr    cl,0x4
  418952:	or     ecx,esi
  418954:	mov    BYTE PTR [rdi],cl
  418956:	lea    rcx,[rdi+0x1]
  41895a:	jmp    418895 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f5>
  41895f:	nop
  418960:	mov    rcx,r15
  418963:	sub    rcx,QWORD PTR [rsp]
  418967:	jmp    418732 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  41896c:	nop    DWORD PTR [rax+0x0]
  418970:	mov    rcx,r15
  418973:	sub    rcx,rdx
  418976:	mov    QWORD PTR [rsp+0x10],rcx
  41897b:	mov    rdx,rcx
  41897e:	mov    rcx,QWORD PTR [rsp+0x8]
  418983:	sub    rcx,rax
  418986:	mov    rax,rcx
  418989:	jmp    4188a9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  41898e:	xchg   ax,ax
  418990:	mov    rbx,QWORD PTR [rsp+0x28]
  418995:	xor    rbx,QWORD PTR fs:0x28
  41899e:	lea    rax,[r8+0x1]
  4189a2:	jne    418a4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  4189a8:	add    rsp,0x38
  4189ac:	pop    rbx
  4189ad:	pop    rbp
  4189ae:	pop    r12
  4189b0:	pop    r13
  4189b2:	pop    r14
  4189b4:	pop    r15
  4189b6:	ret    
  4189b7:	cmp    QWORD PTR [rsp+0x18],0x2
  4189bd:	jbe    418960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  4189bf:	movzx  edi,BYTE PTR [rsp+0x24]
  4189c4:	movzx  esi,BYTE PTR [rsp+0x25]
  4189c9:	shl    edi,0x2
  4189cc:	shr    sil,0x4
  4189d0:	or     esi,edi
  4189d2:	mov    rdi,QWORD PTR [rsp+0x8]
  4189d7:	add    rcx,0x4
  4189db:	mov    BYTE PTR [rdi],sil
  4189de:	movzx  esi,BYTE PTR [rsp+0x25]
  4189e3:	movzx  edi,BYTE PTR [rsp+0x26]
  4189e8:	shl    esi,0x4
  4189eb:	shr    dil,0x2
  4189ef:	or     esi,edi
  4189f1:	mov    rdi,QWORD PTR [rsp+0x8]
  4189f6:	mov    BYTE PTR [rdi+0x1],sil
  4189fa:	movzx  esi,BYTE PTR [rsp+0x26]
  4189ff:	add    rdi,0x3
  418a03:	shl    esi,0x6
  418a06:	or     sil,BYTE PTR [rsp+0x27]
  418a0b:	mov    BYTE PTR [rdi-0x1],sil
  418a0f:	lea    rsi,[r10-0x4]
  418a13:	mov    QWORD PTR [rsp+0x8],rdi
  418a18:	mov    QWORD PTR [rsp],rsi
  418a1c:	cmp    rdi,r11
  418a1f:	jne    4186bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
  418a25:	mov    rcx,QWORD PTR [rsp+0x8]
  418a2a:	sub    rcx,rax
  418a2d:	mov    rax,rcx
  418a30:	mov    rcx,r15
  418a33:	sub    rcx,QWORD PTR [rsp]
  418a37:	mov    QWORD PTR [rsp+0x10],rcx
  418a3c:	mov    rdx,rcx
  418a3f:	jmp    4188a9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  418a44:	mov    rdx,r15
  418a47:	jmp    41897e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3de>
  418a4c:	call   4031c0 <__stack_chk_fail@plt>
  418a51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418a5c:	nop    DWORD PTR [rax+0x0]

0000000000418a60 <flatcc_json_parser_build_string@@Base>:
  418a60:	endbr64 
  418a64:	push   r15
  418a66:	mov    r15,rcx
  418a69:	push   r14
  418a6b:	push   r13
  418a6d:	push   r12
  418a6f:	push   rbp
  418a70:	mov    rbp,rdx
  418a73:	push   rbx
  418a74:	mov    rbx,rdi
  418a77:	sub    rsp,0x28
  418a7b:	mov    rax,QWORD PTR fs:0x28
  418a84:	mov    QWORD PTR [rsp+0x18],rax
  418a89:	xor    eax,eax
  418a8b:	cmp    rsi,rdx
  418a8e:	je     418af8 <flatcc_json_parser_build_string@@Base+0x98>
  418a90:	cmp    BYTE PTR [rsi],0x22
  418a93:	lea    r12,[rsi+0x1]
  418a97:	jne    418af8 <flatcc_json_parser_build_string@@Base+0x98>
  418a99:	mov    rdi,rbx
  418a9c:	mov    rdx,rbp
  418a9f:	mov    rsi,r12
  418aa2:	call   416900 <flatcc_json_parser_string_part@@Base>
  418aa7:	mov    r14,rax
  418aaa:	mov    rdi,QWORD PTR [rbx]
  418aad:	cmp    rbp,rax
  418ab0:	je     418abb <flatcc_json_parser_build_string@@Base+0x5b>
  418ab2:	cmp    BYTE PTR [rax],0x22
  418ab5:	je     418be0 <flatcc_json_parser_build_string@@Base+0x180>
  418abb:	call   412f80 <flatcc_builder_start_string@@Base>
  418ac0:	test   eax,eax
  418ac2:	je     418b10 <flatcc_json_parser_build_string@@Base+0xb0>
  418ac4:	mov    DWORD PTR [r15],0x0
  418acb:	mov    rcx,QWORD PTR [rsp+0x18]
  418ad0:	xor    rcx,QWORD PTR fs:0x28
  418ad9:	mov    rax,r14
  418adc:	jne    418c18 <flatcc_json_parser_build_string@@Base+0x1b8>
  418ae2:	add    rsp,0x28
  418ae6:	pop    rbx
  418ae7:	pop    rbp
  418ae8:	pop    r12
  418aea:	pop    r13
  418aec:	pop    r14
  418aee:	pop    r15
  418af0:	ret    
  418af1:	nop    DWORD PTR [rax+0x0]
  418af8:	mov    ecx,0x10
  418afd:	mov    rdx,rbp
  418b00:	mov    rdi,rbx
  418b03:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418b08:	mov    r12,rax
  418b0b:	jmp    418a99 <flatcc_json_parser_build_string@@Base+0x39>
  418b0d:	nop    DWORD PTR [rax]
  418b10:	mov    rdx,r14
  418b13:	mov    rdi,QWORD PTR [rbx]
  418b16:	sub    rdx,r12
  418b19:	mov    rsi,r12
  418b1c:	call   412bf0 <flatcc_builder_append_string@@Base>
  418b21:	test   rax,rax
  418b24:	je     418ac4 <flatcc_json_parser_build_string@@Base+0x64>
  418b26:	cmp    rbp,r14
  418b29:	je     418bb6 <flatcc_json_parser_build_string@@Base+0x156>
  418b2f:	cmp    BYTE PTR [r14],0x22
  418b33:	je     418c00 <flatcc_json_parser_build_string@@Base+0x1a0>
  418b39:	lea    r13,[rsp+0x14]
  418b3e:	lea    rax,[r13+0x1]
  418b42:	mov    QWORD PTR [rsp+0x8],rax
  418b47:	jmp    418b74 <flatcc_json_parser_build_string@@Base+0x114>
  418b49:	nop    DWORD PTR [rax+0x0]
  418b50:	mov    rdx,rax
  418b53:	mov    rdi,QWORD PTR [rbx]
  418b56:	sub    rdx,r12
  418b59:	mov    rsi,r12
  418b5c:	call   412bf0 <flatcc_builder_append_string@@Base>
  418b61:	test   rax,rax
  418b64:	je     418ac4 <flatcc_json_parser_build_string@@Base+0x64>
  418b6a:	cmp    BYTE PTR [r14],0x22
  418b6e:	je     418c00 <flatcc_json_parser_build_string@@Base+0x1a0>
  418b74:	mov    rdx,rbp
  418b77:	mov    rsi,r14
  418b7a:	mov    rdi,rbx
  418b7d:	mov    rcx,r13
  418b80:	call   4170b0 <flatcc_json_parser_string_escape@@Base>
  418b85:	movsx  rdx,BYTE PTR [rsp+0x14]
  418b8b:	mov    rsi,QWORD PTR [rsp+0x8]
  418b90:	mov    rdi,QWORD PTR [rbx]
  418b93:	mov    r12,rax
  418b96:	call   412bf0 <flatcc_builder_append_string@@Base>
  418b9b:	test   rax,rax
  418b9e:	je     418c10 <flatcc_json_parser_build_string@@Base+0x1b0>
  418ba0:	mov    rdx,rbp
  418ba3:	mov    rsi,r12
  418ba6:	mov    rdi,rbx
  418ba9:	call   416900 <flatcc_json_parser_string_part@@Base>
  418bae:	mov    r14,rax
  418bb1:	cmp    rbp,rax
  418bb4:	jne    418b50 <flatcc_json_parser_build_string@@Base+0xf0>
  418bb6:	mov    rdi,QWORD PTR [rbx]
  418bb9:	mov    r14,rbp
  418bbc:	call   414820 <flatcc_builder_end_string@@Base>
  418bc1:	mov    DWORD PTR [r15],eax
  418bc4:	mov    rsi,r14
  418bc7:	mov    ecx,0x14
  418bcc:	mov    rdx,rbp
  418bcf:	mov    rdi,rbx
  418bd2:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418bd7:	mov    r14,rax
  418bda:	jmp    418acb <flatcc_json_parser_build_string@@Base+0x6b>
  418bdf:	nop
  418be0:	mov    rdx,rax
  418be3:	sub    rdx,r12
  418be6:	mov    rsi,r12
  418be9:	call   414690 <flatcc_builder_create_string@@Base>
  418bee:	mov    DWORD PTR [r15],eax
  418bf1:	cmp    BYTE PTR [r14],0x22
  418bf5:	jne    418bc4 <flatcc_json_parser_build_string@@Base+0x164>
  418bf7:	inc    r14
  418bfa:	jmp    418acb <flatcc_json_parser_build_string@@Base+0x6b>
  418bff:	nop
  418c00:	mov    rdi,QWORD PTR [rbx]
  418c03:	call   414820 <flatcc_builder_end_string@@Base>
  418c08:	mov    DWORD PTR [r15],eax
  418c0b:	jmp    418bf1 <flatcc_json_parser_build_string@@Base+0x191>
  418c0d:	nop    DWORD PTR [rax]
  418c10:	mov    r14,r12
  418c13:	jmp    418ac4 <flatcc_json_parser_build_string@@Base+0x64>
  418c18:	call   4031c0 <__stack_chk_fail@plt>
  418c1d:	nop    DWORD PTR [rax]

0000000000418c20 <flatcc_json_parser_prepare_unions@@Base>:
  418c20:	endbr64 
  418c24:	push   r14
  418c26:	lea    rax,[rcx+rcx*4]
  418c2a:	mov    r14,rdx
  418c2d:	push   r13
  418c2f:	mov    r13,r8
  418c32:	push   r12
  418c34:	mov    r12,rsi
  418c37:	lea    rsi,[rax*8+0x10]
  418c3f:	push   rbp
  418c40:	mov    rbp,rdi
  418c43:	push   rbx
  418c44:	mov    rbx,rcx
  418c47:	mov    rdi,QWORD PTR [rdi]
  418c4a:	call   411d50 <flatcc_builder_enter_user_frame@@Base>
  418c4f:	mov    QWORD PTR [r13+0x0],rax
  418c53:	test   rax,rax
  418c56:	je     418c78 <flatcc_json_parser_prepare_unions@@Base+0x58>
  418c58:	mov    rdi,QWORD PTR [rbp+0x0]
  418c5c:	mov    rsi,rax
  418c5f:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  418c64:	mov    QWORD PTR [rax],rbx
  418c67:	mov    rax,r12
  418c6a:	pop    rbx
  418c6b:	pop    rbp
  418c6c:	pop    r12
  418c6e:	pop    r13
  418c70:	pop    r14
  418c72:	ret    
  418c73:	nop    DWORD PTR [rax+rax*1+0x0]
  418c78:	pop    rbx
  418c79:	mov    rdi,rbp
  418c7c:	pop    rbp
  418c7d:	mov    rsi,r12
  418c80:	pop    r12
  418c82:	pop    r13
  418c84:	mov    rdx,r14
  418c87:	mov    ecx,0x21
  418c8c:	pop    r14
  418c8e:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  418c93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418c9e:	xchg   ax,ax

0000000000418ca0 <flatcc_json_parser_finalize_unions@@Base>:
  418ca0:	endbr64 
  418ca4:	push   r13
  418ca6:	mov    r13,rdx
  418ca9:	push   r12
  418cab:	mov    r12,rsi
  418cae:	mov    rsi,rcx
  418cb1:	push   rbp
  418cb2:	mov    rbp,rcx
  418cb5:	push   rbx
  418cb6:	mov    rbx,rdi
  418cb9:	sub    rsp,0x8
  418cbd:	mov    rdi,QWORD PTR [rdi]
  418cc0:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  418cc5:	cmp    QWORD PTR [rax+0x8],0x0
  418cca:	jne    418ce8 <flatcc_json_parser_finalize_unions@@Base+0x48>
  418ccc:	mov    rdi,QWORD PTR [rbx]
  418ccf:	mov    rsi,rbp
  418cd2:	call   411e30 <flatcc_builder_exit_user_frame_at@@Base>
  418cd7:	add    rsp,0x8
  418cdb:	pop    rbx
  418cdc:	pop    rbp
  418cdd:	mov    rax,r12
  418ce0:	pop    r12
  418ce2:	pop    r13
  418ce4:	ret    
  418ce5:	nop    DWORD PTR [rax]
  418ce8:	mov    rsi,r12
  418ceb:	mov    ecx,0x1b
  418cf0:	mov    rdx,r13
  418cf3:	mov    rdi,rbx
  418cf6:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418cfb:	mov    r12,rax
  418cfe:	jmp    418ccc <flatcc_json_parser_finalize_unions@@Base+0x2c>

0000000000418d00 <flatcc_json_parser_union@@Base>:
  418d00:	endbr64 
  418d04:	push   r15
  418d06:	mov    r15,rcx
  418d09:	push   r14
  418d0b:	mov    r14d,r8d
  418d0e:	push   r13
  418d10:	push   r12
  418d12:	mov    r12,rsi
  418d15:	mov    rsi,r9
  418d18:	push   rbp
  418d19:	mov    rbp,rdx
  418d1c:	push   rbx
  418d1d:	mov    rbx,rdi
  418d20:	sub    rsp,0x18
  418d24:	mov    rdi,QWORD PTR [rdi]
  418d27:	mov    rax,QWORD PTR fs:0x28
  418d30:	mov    QWORD PTR [rsp+0x8],rax
  418d35:	xor    eax,eax
  418d37:	mov    r13,QWORD PTR [rsp+0x50]
  418d3c:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  418d41:	lea    rdx,[r15+r15*4]
  418d45:	lea    rdx,[rax+rdx*8]
  418d49:	cmp    QWORD PTR [rdx+0x10],0x0
  418d4e:	jne    418da0 <flatcc_json_parser_union@@Base+0xa0>
  418d50:	cmp    BYTE PTR [rdx+0x24],0x0
  418d54:	je     418dc0 <flatcc_json_parser_union@@Base+0xc0>
  418d56:	movzx  ecx,BYTE PTR [rdx+0x25]
  418d5a:	mov    BYTE PTR [rsp],cl
  418d5d:	test   cl,cl
  418d5f:	je     418e10 <flatcc_json_parser_union@@Base+0x110>
  418d65:	dec    QWORD PTR [rax+0x8]
  418d69:	mov    rsi,r12
  418d6c:	lea    r8,[rsp+0x4]
  418d71:	mov    rdx,rbp
  418d74:	mov    rdi,rbx
  418d77:	call   r13
  418d7a:	mov    r12,rax
  418d7d:	cmp    rbp,rax
  418d80:	je     418de7 <flatcc_json_parser_union@@Base+0xe7>
  418d82:	mov    rdx,QWORD PTR [rsp]
  418d86:	mov    rdi,QWORD PTR [rbx]
  418d89:	movzx  esi,r14w
  418d8d:	call   414c50 <flatcc_builder_table_add_union@@Base>
  418d92:	test   eax,eax
  418d94:	je     418de7 <flatcc_json_parser_union@@Base+0xe7>
  418d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  418da0:	mov    ecx,0x1c
  418da5:	mov    rsi,r12
  418da8:	mov    rdx,rbp
  418dab:	mov    rdi,rbx
  418dae:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418db3:	mov    r12,rax
  418db6:	jmp    418de7 <flatcc_json_parser_union@@Base+0xe7>
  418db8:	nop    DWORD PTR [rax+rax*1+0x0]
  418dc0:	inc    QWORD PTR [rax+0x8]
  418dc4:	mov    eax,DWORD PTR [rbx+0x18]
  418dc7:	mov    rsi,r12
  418dca:	mov    DWORD PTR [rdx+0x20],eax
  418dcd:	mov    rax,QWORD PTR [rbx+0x8]
  418dd1:	mov    QWORD PTR [rdx+0x10],r12
  418dd5:	mov    QWORD PTR [rdx+0x18],rax
  418dd9:	mov    rdi,rbx
  418ddc:	mov    rdx,rbp
  418ddf:	call   417850 <flatcc_json_parser_generic_json@@Base>
  418de4:	mov    r12,rax
  418de7:	mov    rsi,QWORD PTR [rsp+0x8]
  418dec:	xor    rsi,QWORD PTR fs:0x28
  418df5:	mov    rax,r12
  418df8:	jne    418e17 <flatcc_json_parser_union@@Base+0x117>
  418dfa:	add    rsp,0x18
  418dfe:	pop    rbx
  418dff:	pop    rbp
  418e00:	pop    r12
  418e02:	pop    r13
  418e04:	pop    r14
  418e06:	pop    r15
  418e08:	ret    
  418e09:	nop    DWORD PTR [rax+0x0]
  418e10:	mov    ecx,0x19
  418e15:	jmp    418da5 <flatcc_json_parser_union@@Base+0xa5>
  418e17:	call   4031c0 <__stack_chk_fail@plt>
  418e1c:	nop    DWORD PTR [rax+0x0]

0000000000418e20 <flatcc_json_parser_union_type@@Base>:
  418e20:	endbr64 
  418e24:	push   r15
  418e26:	push   r14
  418e28:	mov    r14,rcx
  418e2b:	push   r13
  418e2d:	push   r12
  418e2f:	mov    r12,rsi
  418e32:	mov    rsi,r9
  418e35:	push   rbp
  418e36:	mov    rbp,rdx
  418e39:	push   rbx
  418e3a:	mov    rbx,rdi
  418e3d:	sub    rsp,0x48
  418e41:	mov    rax,QWORD PTR [rsp+0x80]
  418e49:	mov    DWORD PTR [rsp+0xc],r8d
  418e4e:	mov    QWORD PTR [rsp+0x10],rax
  418e53:	mov    rdi,QWORD PTR [rdi]
  418e56:	mov    r13,QWORD PTR [rsp+0x88]
  418e5e:	mov    rax,QWORD PTR fs:0x28
  418e67:	mov    QWORD PTR [rsp+0x38],rax
  418e6c:	xor    eax,eax
  418e6e:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  418e73:	mov    r15,rax
  418e76:	lea    rax,[r14+r14*4]
  418e7a:	lea    r9,[r15+rax*8+0x10]
  418e7f:	cmp    BYTE PTR [r9+0x14],0x0
  418e84:	jne    418fb0 <flatcc_json_parser_union_type@@Base+0x190>
  418e8a:	mov    edx,0x1
  418e8f:	mov    QWORD PTR [rsp+0x30],0x0
  418e98:	mov    DWORD PTR [rsp+0x2c],0x0
  418ea0:	mov    WORD PTR [r9+0x14],dx
  418ea5:	cmp    r12,rbp
  418ea8:	je     418fa0 <flatcc_json_parser_union_type@@Base+0x180>
  418eae:	lea    rcx,[rsp+0x2c]
  418eb3:	lea    r8,[rsp+0x30]
  418eb8:	mov    rdx,rbp
  418ebb:	mov    rsi,r12
  418ebe:	mov    rdi,rbx
  418ec1:	mov    QWORD PTR [rsp+0x18],r9
  418ec6:	call   4184e0 <flatcc_json_parser_integer@@Base>
  418ecb:	cmp    r12,rax
  418ece:	mov    r14,rax
  418ed1:	mov    r9,QWORD PTR [rsp+0x18]
  418ed6:	jne    418fd0 <flatcc_json_parser_union_type@@Base+0x1b0>
  418edc:	mov    rcx,QWORD PTR [rsp+0x10]
  418ee1:	lea    r8,[r9+0x15]
  418ee5:	mov    rsi,r14
  418ee8:	mov    rdx,rbp
  418eeb:	mov    rdi,rbx
  418eee:	mov    QWORD PTR [rsp+0x18],r9
  418ef3:	call   416a30 <flatcc_json_parser_space_ext@@Base+0xe0>
  418ef8:	mov    r9,QWORD PTR [rsp+0x18]
  418efd:	mov    r14,rax
  418f00:	mov    rsi,QWORD PTR [r9]
  418f03:	mov    rax,QWORD PTR [r15+0x8]
  418f07:	test   rsi,rsi
  418f0a:	je     419000 <flatcc_json_parser_union_type@@Base+0x1e0>
  418f10:	test   rax,rax
  418f13:	je     419083 <flatcc_json_parser_union_type@@Base+0x263>
  418f19:	dec    rax
  418f1c:	mov    QWORD PTR [r15+0x8],rax
  418f20:	mov    eax,DWORD PTR [r9+0x10]
  418f24:	mov    r15d,DWORD PTR [rbx+0x18]
  418f28:	mov    DWORD PTR [rbx+0x18],eax
  418f2b:	mov    rax,QWORD PTR [r9+0x8]
  418f2f:	mov    r12,QWORD PTR [rbx+0x8]
  418f33:	mov    QWORD PTR [rbx+0x8],rax
  418f37:	lea    r8,[rsp+0x34]
  418f3c:	mov    rdx,rbp
  418f3f:	movzx  ecx,BYTE PTR [r9+0x15]
  418f44:	mov    rdi,rbx
  418f47:	mov    BYTE PTR [rsp+0x30],cl
  418f4b:	call   r13
  418f4e:	cmp    rax,rbp
  418f51:	je     419020 <flatcc_json_parser_union_type@@Base+0x200>
  418f57:	mov    rdx,QWORD PTR [rsp+0x30]
  418f5c:	movzx  esi,WORD PTR [rsp+0xc]
  418f61:	mov    rdi,QWORD PTR [rbx]
  418f64:	call   414c50 <flatcc_builder_table_add_union@@Base>
  418f69:	test   eax,eax
  418f6b:	jne    419030 <flatcc_json_parser_union_type@@Base+0x210>
  418f71:	mov    DWORD PTR [rbx+0x18],r15d
  418f75:	mov    QWORD PTR [rbx+0x8],r12
  418f79:	mov    rdx,QWORD PTR [rsp+0x38]
  418f7e:	xor    rdx,QWORD PTR fs:0x28
  418f87:	mov    rax,r14
  418f8a:	jne    41907e <flatcc_json_parser_union_type@@Base+0x25e>
  418f90:	add    rsp,0x48
  418f94:	pop    rbx
  418f95:	pop    rbp
  418f96:	pop    r12
  418f98:	pop    r13
  418f9a:	pop    r14
  418f9c:	pop    r15
  418f9e:	ret    
  418f9f:	nop
  418fa0:	mov    r14,rbp
  418fa3:	jmp    418edc <flatcc_json_parser_union_type@@Base+0xbc>
  418fa8:	nop    DWORD PTR [rax+rax*1+0x0]
  418fb0:	mov    ecx,0x1c
  418fb5:	mov    rdx,rbp
  418fb8:	mov    rsi,r12
  418fbb:	mov    rdi,rbx
  418fbe:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  418fc3:	mov    r14,rax
  418fc6:	jmp    418f79 <flatcc_json_parser_union_type@@Base+0x159>
  418fc8:	nop    DWORD PTR [rax+rax*1+0x0]
  418fd0:	mov    eax,DWORD PTR [rsp+0x2c]
  418fd4:	mov    ecx,0x8
  418fd9:	test   eax,eax
  418fdb:	jne    41905a <flatcc_json_parser_union_type@@Base+0x23a>
  418fdd:	mov    rax,QWORD PTR [rsp+0x30]
  418fe2:	cmp    rax,0xff
  418fe8:	ja     419050 <flatcc_json_parser_union_type@@Base+0x230>
  418fea:	mov    BYTE PTR [r9+0x15],al
  418fee:	mov    rsi,QWORD PTR [r9]
  418ff1:	mov    rax,QWORD PTR [r15+0x8]
  418ff5:	test   rsi,rsi
  418ff8:	jne    418f10 <flatcc_json_parser_union_type@@Base+0xf0>
  418ffe:	xchg   ax,ax
  419000:	xor    edx,edx
  419002:	cmp    BYTE PTR [r9+0x15],0x0
  419007:	setne  dl
  41900a:	add    rax,rdx
  41900d:	mov    QWORD PTR [r15+0x8],rax
  419011:	jmp    418f79 <flatcc_json_parser_union_type@@Base+0x159>
  419016:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419020:	mov    r14,rbp
  419023:	jmp    418f79 <flatcc_json_parser_union_type@@Base+0x159>
  419028:	nop    DWORD PTR [rax+rax*1+0x0]
  419030:	mov    rsi,r14
  419033:	mov    ecx,0x1c
  419038:	mov    rdx,rbp
  41903b:	mov    rdi,rbx
  41903e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419043:	mov    r14,rax
  419046:	jmp    418f79 <flatcc_json_parser_union_type@@Base+0x159>
  41904b:	nop    DWORD PTR [rax+rax*1+0x0]
  419050:	mov    QWORD PTR [rsp+0x18],r9
  419055:	mov    ecx,0x7
  41905a:	mov    rsi,r14
  41905d:	mov    rdx,rbp
  419060:	mov    rdi,rbx
  419063:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419068:	mov    r14,rax
  41906b:	mov    r9,QWORD PTR [rsp+0x18]
  419070:	cmp    r12,rax
  419073:	jne    418f00 <flatcc_json_parser_union_type@@Base+0xe0>
  419079:	jmp    418edc <flatcc_json_parser_union_type@@Base+0xbc>
  41907e:	call   4031c0 <__stack_chk_fail@plt>
  419083:	lea    rcx,[rip+0x2866]        # 41b8f0 <flatcc_builder_padding_base@@Base+0x970>
  41908a:	mov    edx,0x3c5
  41908f:	lea    rsi,[rip+0x226a]        # 41b300 <flatcc_builder_padding_base@@Base+0x380>
  419096:	lea    rdi,[rip+0x255e]        # 41b5fb <flatcc_builder_padding_base@@Base+0x67b>
  41909d:	call   4031e0 <__assert_fail@plt>
  4190a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4190ad:	nop    DWORD PTR [rax]

00000000004190b0 <flatcc_json_parser_union_vector@@Base>:
  4190b0:	endbr64 
  4190b4:	push   r15
  4190b6:	mov    r15,rsi
  4190b9:	mov    rsi,r9
  4190bc:	push   r14
  4190be:	mov    r14d,r8d
  4190c1:	push   r13
  4190c3:	push   r12
  4190c5:	mov    r12,rdx
  4190c8:	push   rbp
  4190c9:	mov    rbp,rcx
  4190cc:	push   rbx
  4190cd:	mov    rbx,rdi
  4190d0:	sub    rsp,0x8
  4190d4:	mov    rdi,QWORD PTR [rdi]
  4190d7:	mov    r13,QWORD PTR [rsp+0x40]
  4190dc:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  4190e1:	lea    rdx,[rbp+rbp*4+0x0]
  4190e6:	lea    rcx,[rax+rdx*8+0x10]
  4190eb:	cmp    QWORD PTR [rcx],0x0
  4190ef:	jne    419168 <flatcc_json_parser_union_vector@@Base+0xb8>
  4190f1:	cmp    BYTE PTR [rcx+0x14],0x0
  4190f5:	mov    rdx,QWORD PTR [rax+0x8]
  4190f9:	jne    419130 <flatcc_json_parser_union_vector@@Base+0x80>
  4190fb:	inc    rdx
  4190fe:	mov    QWORD PTR [rax+0x8],rdx
  419102:	mov    eax,DWORD PTR [rbx+0x18]
  419105:	mov    rdi,rbx
  419108:	mov    DWORD PTR [rcx+0x10],eax
  41910b:	mov    rax,QWORD PTR [rbx+0x8]
  41910f:	mov    QWORD PTR [rcx],r15
  419112:	mov    QWORD PTR [rcx+0x8],rax
  419116:	add    rsp,0x8
  41911a:	mov    rdx,r12
  41911d:	pop    rbx
  41911e:	pop    rbp
  41911f:	pop    r12
  419121:	pop    r13
  419123:	pop    r14
  419125:	mov    rsi,r15
  419128:	pop    r15
  41912a:	jmp    417850 <flatcc_json_parser_generic_json@@Base>
  41912f:	nop
  419130:	dec    rdx
  419133:	mov    QWORD PTR [rax+0x8],rdx
  419137:	mov    r8d,DWORD PTR [rcx+0x18]
  41913b:	mov    rcx,QWORD PTR [rcx+0x20]
  41913f:	mov    QWORD PTR [rsp+0x40],r13
  419144:	add    rsp,0x8
  419148:	mov    rdi,rbx
  41914b:	pop    rbx
  41914c:	pop    rbp
  41914d:	mov    rdx,r12
  419150:	pop    r12
  419152:	pop    r13
  419154:	movzx  r9d,r14w
  419158:	pop    r14
  41915a:	mov    rsi,r15
  41915d:	pop    r15
  41915f:	jmp    416c90 <flatcc_json_parser_space_ext@@Base+0x340>
  419164:	nop    DWORD PTR [rax+0x0]
  419168:	add    rsp,0x8
  41916c:	mov    rdi,rbx
  41916f:	pop    rbx
  419170:	pop    rbp
  419171:	mov    rdx,r12
  419174:	pop    r12
  419176:	pop    r13
  419178:	pop    r14
  41917a:	mov    rsi,r15
  41917d:	mov    ecx,0x1c
  419182:	pop    r15
  419184:	jmp    4168d0 <flatcc_json_parser_set_error@@Base>
  419189:	nop    DWORD PTR [rax+0x0]

0000000000419190 <flatcc_json_parser_union_type_vector@@Base>:
  419190:	endbr64 
  419194:	push   r15
  419196:	push   r14
  419198:	push   r13
  41919a:	mov    r13,rcx
  41919d:	push   r12
  41919f:	mov    r12,rsi
  4191a2:	mov    rsi,r9
  4191a5:	push   rbp
  4191a6:	mov    rbp,rdi
  4191a9:	push   rbx
  4191aa:	mov    rbx,rdx
  4191ad:	sub    rsp,0x78
  4191b1:	mov    rax,QWORD PTR [rsp+0xb0]
  4191b9:	mov    DWORD PTR [rsp+0x2c],r8d
  4191be:	mov    QWORD PTR [rsp+0x18],rax
  4191c3:	mov    rax,QWORD PTR [rsp+0xb8]
  4191cb:	mov    QWORD PTR [rsp+0x30],r9
  4191d0:	mov    QWORD PTR [rsp+0x40],rax
  4191d5:	mov    rdi,QWORD PTR [rdi]
  4191d8:	mov    r14,QWORD PTR [rsp+0xc0]
  4191e0:	mov    rax,QWORD PTR fs:0x28
  4191e9:	mov    QWORD PTR [rsp+0x68],rax
  4191ee:	xor    eax,eax
  4191f0:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  4191f5:	lea    rdx,[r13+r13*4+0x0]
  4191fa:	lea    rcx,[rdx*8+0x0]
  419202:	lea    rax,[rax+rcx*1+0x10]
  419207:	cmp    BYTE PTR [rax+0x14],0x0
  41920b:	mov    QWORD PTR [rsp+0x38],rcx
  419210:	mov    QWORD PTR [rsp+0x10],rax
  419215:	mov    ecx,0x1c
  41921a:	jne    419246 <flatcc_json_parser_union_type_vector@@Base+0xb6>
  41921c:	mov    rax,QWORD PTR [rsp+0x10]
  419221:	mov    ecx,0xffffffff
  419226:	mov    BYTE PTR [rax+0x14],0x1
  41922a:	mov    edx,0x1
  41922f:	mov    esi,0x1
  419234:	mov    rdi,QWORD PTR [rbp+0x0]
  419238:	call   412ea0 <flatcc_builder_start_vector@@Base>
  41923d:	test   eax,eax
  41923f:	je     419280 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  419241:	mov    ecx,0x21
  419246:	mov    rdx,rbx
  419249:	mov    rsi,r12
  41924c:	mov    rdi,rbp
  41924f:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419254:	mov    r15,rax
  419257:	mov    rcx,QWORD PTR [rsp+0x68]
  41925c:	xor    rcx,QWORD PTR fs:0x28
  419265:	mov    rax,r15
  419268:	jne    419767 <flatcc_json_parser_union_type_vector@@Base+0x5d7>
  41926e:	add    rsp,0x78
  419272:	pop    rbx
  419273:	pop    rbp
  419274:	pop    r12
  419276:	pop    r13
  419278:	pop    r14
  41927a:	pop    r15
  41927c:	ret    
  41927d:	nop    DWORD PTR [rax]
  419280:	cmp    r12,rbx
  419283:	je     419290 <flatcc_json_parser_union_type_vector@@Base+0x100>
  419285:	cmp    BYTE PTR [r12],0x5b
  41928a:	je     4193c8 <flatcc_json_parser_union_type_vector@@Base+0x238>
  419290:	mov    ecx,0x16
  419295:	mov    rdx,rbx
  419298:	mov    rsi,r12
  41929b:	mov    rdi,rbp
  41929e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  4192a3:	mov    r15,rax
  4192a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4192b0:	mov    rdi,QWORD PTR [rbp+0x0]
  4192b4:	call   413e50 <flatcc_builder_vector_count@@Base>
  4192b9:	mov    r13,rax
  4192bc:	mov    rax,QWORD PTR [rsp+0x10]
  4192c1:	mov    edx,r13d
  4192c4:	mov    DWORD PTR [rax+0x18],r13d
  4192c8:	mov    rdi,QWORD PTR [rbp+0x0]
  4192cc:	mov    rsi,rdx
  4192cf:	mov    QWORD PTR [rsp],rdx
  4192d3:	call   411d50 <flatcc_builder_enter_user_frame@@Base>
  4192d8:	mov    rdi,QWORD PTR [rbp+0x0]
  4192dc:	mov    rsi,rax
  4192df:	mov    r14,rax
  4192e2:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  4192e7:	mov    rdi,QWORD PTR [rbp+0x0]
  4192eb:	mov    r12,rax
  4192ee:	call   413e60 <flatcc_builder_vector_edit@@Base>
  4192f3:	mov    rdx,QWORD PTR [rsp]
  4192f7:	mov    rdi,r12
  4192fa:	mov    rsi,rax
  4192fd:	call   403230 <memcpy@plt>
  419302:	mov    rdi,QWORD PTR [rbp+0x0]
  419306:	mov    r12,r15
  419309:	call   413d60 <flatcc_builder_end_vector@@Base>
  41930e:	test   eax,eax
  419310:	mov    DWORD PTR [rsp],eax
  419313:	je     419241 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  419319:	movzx  esi,WORD PTR [rsp+0x2c]
  41931e:	mov    rdi,QWORD PTR [rbp+0x0]
  419322:	dec    esi
  419324:	call   414b10 <flatcc_builder_table_add_offset@@Base>
  419329:	test   rax,rax
  41932c:	je     419241 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  419332:	mov    edx,DWORD PTR [rsp]
  419335:	mov    rsi,QWORD PTR [rsp+0x30]
  41933a:	mov    DWORD PTR [rax],edx
  41933c:	mov    rdi,QWORD PTR [rbp+0x0]
  419340:	call   411e80 <flatcc_builder_get_user_frame_ptr@@Base>
  419345:	mov    rdx,QWORD PTR [rsp+0x38]
  41934a:	lea    rdx,[rax+rdx*1+0x10]
  41934f:	mov    rsi,QWORD PTR [rdx]
  419352:	mov    QWORD PTR [rdx+0x20],r14
  419356:	test   rsi,rsi
  419359:	je     419756 <flatcc_json_parser_union_type_vector@@Base+0x5c6>
  41935f:	mov    rcx,QWORD PTR [rax+0x8]
  419363:	test   rcx,rcx
  419366:	je     41976c <flatcc_json_parser_union_type_vector@@Base+0x5dc>
  41936c:	dec    rcx
  41936f:	mov    QWORD PTR [rax+0x8],rcx
  419373:	mov    eax,DWORD PTR [rbp+0x18]
  419376:	sub    rsp,0x8
  41937a:	mov    DWORD PTR [rsp+0x8],eax
  41937e:	mov    eax,DWORD PTR [rdx+0x10]
  419381:	mov    r12,QWORD PTR [rbp+0x8]
  419385:	mov    DWORD PTR [rbp+0x18],eax
  419388:	mov    rax,QWORD PTR [rdx+0x8]
  41938c:	push   QWORD PTR [rsp+0x48]
  419390:	mov    QWORD PTR [rbp+0x8],rax
  419394:	mov    rcx,r14
  419397:	movzx  r9d,WORD PTR [rsp+0x3c]
  41939d:	mov    rdx,rbx
  4193a0:	mov    r8d,r13d
  4193a3:	mov    rdi,rbp
  4193a6:	call   416c90 <flatcc_json_parser_space_ext@@Base+0x340>
  4193ab:	pop    rdx
  4193ac:	pop    rcx
  4193ad:	cmp    rax,rbx
  4193b0:	je     41975f <flatcc_json_parser_union_type_vector@@Base+0x5cf>
  4193b6:	mov    eax,DWORD PTR [rsp]
  4193b9:	mov    QWORD PTR [rbp+0x8],r12
  4193bd:	mov    DWORD PTR [rbp+0x18],eax
  4193c0:	jmp    419257 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  4193c5:	nop    DWORD PTR [rax]
  4193c8:	lea    rsi,[r12+0x1]
  4193cd:	mov    rax,rbx
  4193d0:	sub    rax,rsi
  4193d3:	cmp    rax,0x1
  4193d7:	jle    4193f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  4193d9:	cmp    BYTE PTR [r12+0x1],0x20
  4193df:	jg     419746 <flatcc_json_parser_union_type_vector@@Base+0x5b6>
  4193e5:	jne    4193f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  4193e7:	cmp    BYTE PTR [r12+0x2],0x20
  4193ed:	jle    4193f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  4193ef:	add    r12,0x2
  4193f3:	jmp    419406 <flatcc_json_parser_union_type_vector@@Base+0x276>
  4193f5:	nop    DWORD PTR [rax]
  4193f8:	mov    rdx,rbx
  4193fb:	mov    rdi,rbp
  4193fe:	call   416950 <flatcc_json_parser_space_ext@@Base>
  419403:	mov    r12,rax
  419406:	cmp    rbx,r12
  419409:	je     419416 <flatcc_json_parser_union_type_vector@@Base+0x286>
  41940b:	cmp    BYTE PTR [r12],0x5d
  419410:	je     41963a <flatcc_json_parser_union_type_vector@@Base+0x4aa>
  419416:	lea    rax,[rsp+0x5b]
  41941b:	mov    QWORD PTR [rsp+0x48],rax
  419420:	lea    rax,[rsp+0x60]
  419425:	mov    QWORD PTR [rsp],rax
  419429:	lea    rax,[rsp+0x5c]
  41942e:	mov    QWORD PTR [rsp+0x8],rax
  419433:	nop    DWORD PTR [rax+rax*1+0x0]
  419438:	mov    rdi,QWORD PTR [rbp+0x0]
  41943c:	mov    esi,0x1
  419441:	call   4127f0 <flatcc_builder_extend_vector@@Base>
  419446:	mov    r13,rax
  419449:	test   rax,rax
  41944c:	je     419241 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  419452:	mov    QWORD PTR [rsp+0x60],0x0
  41945b:	mov    DWORD PTR [rsp+0x5c],0x0
  419463:	mov    BYTE PTR [rsp+0x5b],0x0
  419468:	cmp    rbx,r12
  41946b:	je     419560 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  419471:	mov    r8,QWORD PTR [rsp]
  419475:	mov    rcx,QWORD PTR [rsp+0x8]
  41947a:	mov    rdx,rbx
  41947d:	mov    rsi,r12
  419480:	mov    rdi,rbp
  419483:	call   4184e0 <flatcc_json_parser_integer@@Base>
  419488:	mov    r9,rax
  41948b:	cmp    r12,rax
  41948e:	jne    419570 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  419494:	mov    r8,QWORD PTR [rsp+0x48]
  419499:	mov    rcx,QWORD PTR [rsp+0x18]
  41949e:	mov    rsi,r9
  4194a1:	mov    rdx,rbx
  4194a4:	mov    rdi,rbp
  4194a7:	mov    QWORD PTR [rsp+0x20],r9
  4194ac:	call   416a30 <flatcc_json_parser_space_ext@@Base+0xe0>
  4194b1:	mov    r9,QWORD PTR [rsp+0x20]
  4194b6:	mov    r15,rax
  4194b9:	cmp    rax,r9
  4194bc:	je     41974e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  4194c2:	cmp    rbx,rax
  4194c5:	je     41974e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  4194cb:	movzx  edi,BYTE PTR [rsp+0x5b]
  4194d0:	call   r14
  4194d3:	test   eax,eax
  4194d5:	jne    419550 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
  4194d7:	test   BYTE PTR [rbp+0x10],0x1
  4194db:	je     4196f0 <flatcc_json_parser_union_type_vector@@Base+0x560>
  4194e1:	mov    BYTE PTR [rsp+0x5b],0x0
  4194e6:	xor    eax,eax
  4194e8:	mov    BYTE PTR [r13+0x0],al
  4194ec:	mov    rax,rbx
  4194ef:	sub    rax,r15
  4194f2:	cmp    rax,0x1
  4194f6:	jle    419504 <flatcc_json_parser_union_type_vector@@Base+0x374>
  4194f8:	cmp    BYTE PTR [r15],0x20
  4194fc:	jg     419515 <flatcc_json_parser_union_type_vector@@Base+0x385>
  4194fe:	je     4195e0 <flatcc_json_parser_union_type_vector@@Base+0x450>
  419504:	mov    rsi,r15
  419507:	mov    rdx,rbx
  41950a:	mov    rdi,rbp
  41950d:	call   416950 <flatcc_json_parser_space_ext@@Base>
  419512:	mov    r15,rax
  419515:	cmp    rbx,r15
  419518:	je     4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41951e:	movzx  eax,BYTE PTR [r15]
  419522:	cmp    al,0x2c
  419524:	je     4195f8 <flatcc_json_parser_union_type_vector@@Base+0x468>
  41952a:	cmp    al,0x5d
  41952c:	je     4195a8 <flatcc_json_parser_union_type_vector@@Base+0x418>
  41952e:	mov    rsi,r15
  419531:	mov    ecx,0x9
  419536:	mov    rdx,rbx
  419539:	mov    rdi,rbp
  41953c:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419541:	mov    r15,rax
  419544:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  419549:	nop    DWORD PTR [rax+0x0]
  419550:	movzx  eax,BYTE PTR [rsp+0x5b]
  419555:	jmp    4194e8 <flatcc_json_parser_union_type_vector@@Base+0x358>
  419557:	nop    WORD PTR [rax+rax*1+0x0]
  419560:	mov    r9,rbx
  419563:	jmp    419494 <flatcc_json_parser_union_type_vector@@Base+0x304>
  419568:	nop    DWORD PTR [rax+rax*1+0x0]
  419570:	mov    esi,DWORD PTR [rsp+0x5c]
  419574:	mov    ecx,0x8
  419579:	test   esi,esi
  41957b:	jne    419685 <flatcc_json_parser_union_type_vector@@Base+0x4f5>
  419581:	mov    rax,QWORD PTR [rsp+0x60]
  419586:	cmp    rax,0xff
  41958c:	ja     419680 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
  419592:	movzx  edi,al
  419595:	mov    BYTE PTR [rsp+0x5b],al
  419599:	mov    r15,r9
  41959c:	jmp    4194d0 <flatcc_json_parser_union_type_vector@@Base+0x340>
  4195a1:	nop    DWORD PTR [rax+0x0]
  4195a8:	lea    rsi,[r15+0x1]
  4195ac:	mov    rax,rbx
  4195af:	sub    rax,rsi
  4195b2:	cmp    rax,0x1
  4195b6:	jle    4195c9 <flatcc_json_parser_union_type_vector@@Base+0x439>
  4195b8:	cmp    BYTE PTR [r15+0x1],0x20
  4195bd:	jg     4196b0 <flatcc_json_parser_union_type_vector@@Base+0x520>
  4195c3:	je     4196c0 <flatcc_json_parser_union_type_vector@@Base+0x530>
  4195c9:	mov    rdx,rbx
  4195cc:	mov    rdi,rbp
  4195cf:	call   416950 <flatcc_json_parser_space_ext@@Base>
  4195d4:	mov    r15,rax
  4195d7:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  4195dc:	nop    DWORD PTR [rax+0x0]
  4195e0:	cmp    BYTE PTR [r15+0x1],0x20
  4195e5:	jle    419504 <flatcc_json_parser_union_type_vector@@Base+0x374>
  4195eb:	inc    r15
  4195ee:	jmp    419515 <flatcc_json_parser_union_type_vector@@Base+0x385>
  4195f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4195f8:	lea    r12,[r15+0x1]
  4195fc:	mov    rax,rbx
  4195ff:	sub    rax,r12
  419602:	cmp    rax,0x1
  419606:	jle    419615 <flatcc_json_parser_union_type_vector@@Base+0x485>
  419608:	cmp    BYTE PTR [r15+0x1],0x20
  41960d:	jg     419626 <flatcc_json_parser_union_type_vector@@Base+0x496>
  41960f:	je     4196d8 <flatcc_json_parser_union_type_vector@@Base+0x548>
  419615:	mov    rsi,r12
  419618:	mov    rdx,rbx
  41961b:	mov    rdi,rbp
  41961e:	call   416950 <flatcc_json_parser_space_ext@@Base>
  419623:	mov    r12,rax
  419626:	cmp    rbx,r12
  419629:	je     419710 <flatcc_json_parser_union_type_vector@@Base+0x580>
  41962f:	cmp    BYTE PTR [r12],0x5d
  419634:	jne    419438 <flatcc_json_parser_union_type_vector@@Base+0x2a8>
  41963a:	lea    r15,[r12+0x1]
  41963f:	mov    rax,rbx
  419642:	sub    rax,r15
  419645:	cmp    rax,0x1
  419649:	jle    419730 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  41964f:	cmp    BYTE PTR [r12+0x1],0x20
  419655:	jg     4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41965b:	jne    419730 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  419661:	cmp    BYTE PTR [r12+0x2],0x20
  419667:	jle    419730 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  41966d:	lea    r15,[r12+0x2]
  419672:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  419677:	nop    WORD PTR [rax+rax*1+0x0]
  419680:	mov    ecx,0x7
  419685:	mov    rdx,rbx
  419688:	mov    rsi,r9
  41968b:	mov    rdi,rbp
  41968e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419693:	mov    r15,rax
  419696:	cmp    r12,rax
  419699:	jne    4194cb <flatcc_json_parser_union_type_vector@@Base+0x33b>
  41969f:	mov    r9,r12
  4196a2:	jmp    419494 <flatcc_json_parser_union_type_vector@@Base+0x304>
  4196a7:	nop    WORD PTR [rax+rax*1+0x0]
  4196b0:	mov    r15,rsi
  4196b3:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  4196b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4196c0:	cmp    BYTE PTR [r15+0x2],0x20
  4196c5:	jle    4195c9 <flatcc_json_parser_union_type_vector@@Base+0x439>
  4196cb:	add    r15,0x2
  4196cf:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  4196d4:	nop    DWORD PTR [rax+0x0]
  4196d8:	cmp    BYTE PTR [r15+0x2],0x20
  4196dd:	jle    419615 <flatcc_json_parser_union_type_vector@@Base+0x485>
  4196e3:	lea    r12,[r15+0x2]
  4196e7:	jmp    419626 <flatcc_json_parser_union_type_vector@@Base+0x496>
  4196ec:	nop    DWORD PTR [rax+0x0]
  4196f0:	mov    rsi,r15
  4196f3:	mov    ecx,0xf
  4196f8:	mov    rdx,rbx
  4196fb:	mov    rdi,rbp
  4196fe:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419703:	mov    r15,rax
  419706:	jmp    419257 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41970b:	nop    DWORD PTR [rax+rax*1+0x0]
  419710:	mov    ecx,0x9
  419715:	mov    rdx,rbx
  419718:	mov    rsi,rbx
  41971b:	mov    rdi,rbp
  41971e:	call   4168d0 <flatcc_json_parser_set_error@@Base>
  419723:	mov    r15,rax
  419726:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41972b:	nop    DWORD PTR [rax+rax*1+0x0]
  419730:	mov    rsi,r15
  419733:	mov    rdx,rbx
  419736:	mov    rdi,rbp
  419739:	call   416950 <flatcc_json_parser_space_ext@@Base>
  41973e:	mov    r15,rax
  419741:	jmp    4192b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  419746:	mov    r12,rsi
  419749:	jmp    419406 <flatcc_json_parser_union_type_vector@@Base+0x276>
  41974e:	mov    r12,r15
  419751:	jmp    419241 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  419756:	inc    QWORD PTR [rax+0x8]
  41975a:	jmp    419257 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41975f:	mov    r15,rbx
  419762:	jmp    419257 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  419767:	call   4031c0 <__stack_chk_fail@plt>
  41976c:	lea    rcx,[rip+0x214d]        # 41b8c0 <flatcc_builder_padding_base@@Base+0x940>
  419773:	mov    edx,0x462
  419778:	lea    rsi,[rip+0x1b81]        # 41b300 <flatcc_builder_padding_base@@Base+0x380>
  41977f:	lea    rdi,[rip+0x1e75]        # 41b5fb <flatcc_builder_padding_base@@Base+0x67b>
  419786:	call   4031e0 <__assert_fail@plt>
  41978b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419790 <flatcc_json_parser_table_as_root@@Base>:
  419790:	endbr64 
  419794:	push   r14
  419796:	vpxor  xmm0,xmm0,xmm0
  41979a:	push   r13
  41979c:	mov    r13,rdi
  41979f:	push   r12
  4197a1:	push   rbp
  4197a2:	mov    rbp,rdx
  4197a5:	lea    r12,[rbp+rcx*1+0x0]
  4197aa:	push   rbx
  4197ab:	mov    rbx,rsi
  4197ae:	sub    rsp,0x60
  4197b2:	mov    rax,QWORD PTR fs:0x28
  4197bb:	mov    QWORD PTR [rsp+0x58],rax
  4197c0:	xor    eax,eax
  4197c2:	mov    eax,r8d
  4197c5:	sar    eax,1
  4197c7:	and    eax,0x2
  4197ca:	lea    rdx,[rsp+0x10]
  4197cf:	test   rsi,rsi
  4197d2:	cmove  rbx,rdx
  4197d6:	mov    ecx,eax
  4197d8:	vmovups XMMWORD PTR [rbx+0x24],xmm0
  4197dd:	vmovups XMMWORD PTR [rbx+0x34],xmm0
  4197e2:	vmovups XMMWORD PTR [rbx+0x14],xmm0
  4197e7:	mov    DWORD PTR [rbx+0x44],0x0
  4197ee:	mov    QWORD PTR [rbx],rdi
  4197f1:	mov    QWORD PTR [rbx+0x8],rbp
  4197f5:	mov    DWORD PTR [rbx+0x18],0x1
  4197fc:	mov    DWORD PTR [rbx+0x10],r8d
  419800:	mov    QWORD PTR [rbx+0x28],rbp
  419804:	mov    QWORD PTR [rbx+0x30],r12
  419808:	mov    QWORD PTR [rbx+0x38],rbp
  41980c:	xor    edx,edx
  41980e:	mov    rsi,r9
  419811:	mov    r14,QWORD PTR [rsp+0x90]
  419819:	call   412420 <flatcc_builder_start_buffer@@Base>
  41981e:	test   eax,eax
  419820:	jne    419880 <flatcc_json_parser_table_as_root@@Base+0xf0>
  419822:	mov    rdx,r12
  419825:	lea    rcx,[rsp+0xc]
  41982a:	mov    rsi,rbp
  41982d:	mov    rdi,rbx
  419830:	call   r14
  419833:	mov    r12d,DWORD PTR [rbx+0x20]
  419837:	test   r12d,r12d
  41983a:	je     419860 <flatcc_json_parser_table_as_root@@Base+0xd0>
  41983c:	mov    rsi,QWORD PTR [rsp+0x58]
  419841:	xor    rsi,QWORD PTR fs:0x28
  41984a:	mov    eax,r12d
  41984d:	jne    419888 <flatcc_json_parser_table_as_root@@Base+0xf8>
  41984f:	add    rsp,0x60
  419853:	pop    rbx
  419854:	pop    rbp
  419855:	pop    r12
  419857:	pop    r13
  419859:	pop    r14
  41985b:	ret    
  41985c:	nop    DWORD PTR [rax+0x0]
  419860:	mov    esi,DWORD PTR [rsp+0xc]
  419864:	mov    rdi,r13
  419867:	call   412500 <flatcc_builder_end_buffer@@Base>
  41986c:	test   eax,eax
  41986e:	je     419880 <flatcc_json_parser_table_as_root@@Base+0xf0>
  419870:	mov    QWORD PTR [rbx+0x40],rbp
  419874:	jmp    41983c <flatcc_json_parser_table_as_root@@Base+0xac>
  419876:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419880:	mov    r12d,0xffffffff
  419886:	jmp    41983c <flatcc_json_parser_table_as_root@@Base+0xac>
  419888:	call   4031c0 <__stack_chk_fail@plt>
  41988d:	nop    DWORD PTR [rax]

0000000000419890 <flatcc_json_parser_struct_as_root@@Base>:
  419890:	endbr64 
  419894:	jmp    419790 <flatcc_json_parser_table_as_root@@Base>
  419899:	nop    DWORD PTR [rax+0x0]

00000000004198a0 <__libc_csu_init@@Base>:
  4198a0:	endbr64 
  4198a4:	push   r15
  4198a6:	lea    r15,[rip+0x7553]        # 420e00 <flatcc_builder_padding_base@@Base+0x5e80>
  4198ad:	push   r14
  4198af:	mov    r14,rdx
  4198b2:	push   r13
  4198b4:	mov    r13,rsi
  4198b7:	push   r12
  4198b9:	mov    r12d,edi
  4198bc:	push   rbp
  4198bd:	lea    rbp,[rip+0x7544]        # 420e08 <flatcc_builder_padding_base@@Base+0x5e88>
  4198c4:	push   rbx
  4198c5:	sub    rbp,r15
  4198c8:	sub    rsp,0x8
  4198cc:	call   403000 <free@plt-0x170>
  4198d1:	sar    rbp,0x3
  4198d5:	je     4198f6 <__libc_csu_init@@Base+0x56>
  4198d7:	xor    ebx,ebx
  4198d9:	nop    DWORD PTR [rax+0x0]
  4198e0:	mov    rdx,r14
  4198e3:	mov    rsi,r13
  4198e6:	mov    edi,r12d
  4198e9:	call   QWORD PTR [r15+rbx*8]
  4198ed:	add    rbx,0x1
  4198f1:	cmp    rbp,rbx
  4198f4:	jne    4198e0 <__libc_csu_init@@Base+0x40>
  4198f6:	add    rsp,0x8
  4198fa:	pop    rbx
  4198fb:	pop    rbp
  4198fc:	pop    r12
  4198fe:	pop    r13
  419900:	pop    r14
  419902:	pop    r15
  419904:	ret    
  419905:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000419910 <__libc_csu_fini@@Base>:
  419910:	endbr64 
  419914:	ret    

Disassembly of section .fini:

0000000000419918 <.fini>:
  419918:	endbr64 
  41991c:	sub    rsp,0x8
  419920:	add    rsp,0x8
  419924:	ret    
