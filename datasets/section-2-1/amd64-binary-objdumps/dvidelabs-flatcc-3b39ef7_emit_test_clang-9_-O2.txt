
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xafe1]        # 40dff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xafe2]        # 40e008 <flatcc_builder_padding_base@@Base+0x4c98>
  403026:	jmp    QWORD PTR [rip+0xafe4]        # 40e010 <flatcc_builder_padding_base@@Base+0x4ca0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xafe2]        # 40e018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xafda]        # 40e020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xafd2]        # 40e028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <printf@plt>:
  403060:	jmp    QWORD PTR [rip+0xafca]        # 40e030 <printf@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <__assert_fail@plt>:
  403070:	jmp    QWORD PTR [rip+0xafc2]        # 40e038 <__assert_fail@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memset@plt>:
  403080:	jmp    QWORD PTR [rip+0xafba]        # 40e040 <memset@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <fputc@plt>:
  403090:	jmp    QWORD PTR [rip+0xafb2]        # 40e048 <fputc@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memchr@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xafaa]        # 40e050 <memchr@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <fprintf@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xafa2]        # 40e058 <fprintf@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <memcpy@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xaf9a]        # 40e060 <memcpy@GLIBC_2.14>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <malloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xaf92]        # 40e068 <malloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <bcmp@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xaf8a]        # 40e070 <bcmp@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <realloc@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xaf82]        # 40e078 <realloc@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <fwrite@plt>:
  403100:	jmp    QWORD PTR [rip+0xaf7a]        # 40e080 <fwrite@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <posix_memalign@plt>:
  403110:	jmp    QWORD PTR [rip+0xaf72]        # 40e088 <posix_memalign@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403120 <_start@@Base>:
  403120:	endbr64 
  403124:	xor    ebp,ebp
  403126:	mov    r9,rdx
  403129:	pop    rsi
  40312a:	mov    rdx,rsp
  40312d:	and    rsp,0xfffffffffffffff0
  403131:	push   rax
  403132:	push   rsp
  403133:	mov    r8,0x408a30
  40313a:	mov    rcx,0x4089c0
  403141:	mov    rdi,0x4037f0
  403148:	call   QWORD PTR [rip+0xae9a]        # 40dfe8 <__libc_start_main@GLIBC_2.2.5>
  40314e:	hlt    
  40314f:	nop
  403150:	endbr64 
  403154:	ret    
  403155:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40315f:	nop
  403160:	mov    eax,0x40e0a0
  403165:	cmp    rax,0x40e0a0
  40316b:	je     403180 <_start@@Base+0x60>
  40316d:	mov    eax,0x0
  403172:	test   rax,rax
  403175:	je     403180 <_start@@Base+0x60>
  403177:	mov    edi,0x40e0a0
  40317c:	jmp    rax
  40317e:	xchg   ax,ax
  403180:	ret    
  403181:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40318c:	nop    DWORD PTR [rax+0x0]
  403190:	mov    esi,0x40e0a0
  403195:	sub    rsi,0x40e0a0
  40319c:	mov    rax,rsi
  40319f:	shr    rsi,0x3f
  4031a3:	sar    rax,0x3
  4031a7:	add    rsi,rax
  4031aa:	sar    rsi,1
  4031ad:	je     4031c0 <_start@@Base+0xa0>
  4031af:	mov    eax,0x0
  4031b4:	test   rax,rax
  4031b7:	je     4031c0 <_start@@Base+0xa0>
  4031b9:	mov    edi,0x40e0a0
  4031be:	jmp    rax
  4031c0:	ret    
  4031c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031cc:	nop    DWORD PTR [rax+0x0]
  4031d0:	endbr64 
  4031d4:	cmp    BYTE PTR [rip+0xaec5],0x0        # 40e0a0 <__bss_start@@Base>
  4031db:	jne    4031f0 <_start@@Base+0xd0>
  4031dd:	push   rbp
  4031de:	mov    rbp,rsp
  4031e1:	call   403160 <_start@@Base+0x40>
  4031e6:	mov    BYTE PTR [rip+0xaeb3],0x1        # 40e0a0 <__bss_start@@Base>
  4031ed:	pop    rbp
  4031ee:	ret    
  4031ef:	nop
  4031f0:	ret    
  4031f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031fc:	nop    DWORD PTR [rax+0x0]
  403200:	endbr64 
  403204:	jmp    403190 <_start@@Base+0x70>
  403206:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403210 <dbg_emitter@@Base>:
  403210:	push   rbp
  403211:	push   r15
  403213:	push   r14
  403215:	push   r13
  403217:	push   r12
  403219:	push   rbx
  40321a:	push   rax
  40321b:	mov    r12d,ecx
  40321e:	mov    r14d,edx
  403221:	mov    rbx,rsi
  403224:	movsxd rdx,ecx
  403227:	lea    rdi,[rip+0x5e36]        # 409064 <_IO_stdin_used@@Base+0x64>
  40322e:	mov    esi,r14d
  403231:	mov    rcx,r8
  403234:	xor    eax,eax
  403236:	call   403060 <printf@plt>
  40323b:	test   r14d,r14d
  40323e:	jle    4032ab <dbg_emitter@@Base+0x9b>
  403240:	mov    ebp,r14d
  403243:	add    rbx,0x8
  403247:	lea    r13,[rip+0x6122]        # 409370 <flatcc_builder_padding_base@@Base>
  40324e:	lea    r14,[rip+0x5e40]        # 409095 <_IO_stdin_used@@Base+0x95>
  403255:	lea    r15,[rip+0x5e5a]        # 4090b6 <_IO_stdin_used@@Base+0xb6>
  40325c:	jmp    40326c <dbg_emitter@@Base+0x5c>
  40325e:	xchg   ax,ax
  403260:	add    r12d,DWORD PTR [rbx]
  403263:	add    rbx,0x10
  403267:	dec    rbp
  40326a:	je     4032ab <dbg_emitter@@Base+0x9b>
  40326c:	mov    rax,QWORD PTR [rbx-0x8]
  403270:	cmp    rax,r13
  403273:	je     403280 <dbg_emitter@@Base+0x70>
  403275:	test   rax,rax
  403278:	jne    403260 <dbg_emitter@@Base+0x50>
  40327a:	jmp    403299 <dbg_emitter@@Base+0x89>
  40327c:	nop    DWORD PTR [rax+0x0]
  403280:	movsxd rsi,r12d
  403283:	mov    rdx,QWORD PTR [rbx]
  403286:	mov    rdi,r14
  403289:	xor    eax,eax
  40328b:	call   403060 <printf@plt>
  403290:	mov    rax,QWORD PTR [rbx-0x8]
  403294:	test   rax,rax
  403297:	jne    403260 <dbg_emitter@@Base+0x50>
  403299:	movsxd rsi,r12d
  40329c:	mov    rdx,QWORD PTR [rbx]
  40329f:	mov    rdi,r15
  4032a2:	xor    eax,eax
  4032a4:	call   403060 <printf@plt>
  4032a9:	jmp    403260 <dbg_emitter@@Base+0x50>
  4032ab:	xor    eax,eax
  4032ad:	add    rsp,0x8
  4032b1:	pop    rbx
  4032b2:	pop    r12
  4032b4:	pop    r13
  4032b6:	pop    r14
  4032b8:	pop    r15
  4032ba:	pop    rbp
  4032bb:	ret    
  4032bc:	nop    DWORD PTR [rax+0x0]

00000000004032c0 <debug_test@@Base>:
  4032c0:	push   rbp
  4032c1:	mov    rbp,rsp
  4032c4:	push   rbx
  4032c5:	and    rsp,0xffffffffffffffe0
  4032c9:	sub    rsp,0x1e0
  4032d0:	vxorps xmm0,xmm0,xmm0
  4032d4:	vmovaps YMMWORD PTR [rsp],ymm0
  4032d9:	mov    QWORD PTR [rsp+0x20],0x0
  4032e2:	lea    rdi,[rip+0x5fb8]        # 4092a1 <_IO_stdin_used@@Base+0x2a1>
  4032e9:	vzeroupper 
  4032ec:	call   403040 <puts@plt>
  4032f1:	lea    rsi,[rip+0xffffffffffffff18]        # 403210 <dbg_emitter@@Base>
  4032f8:	lea    rbx,[rsp+0x40]
  4032fd:	mov    rdi,rbx
  403300:	xor    edx,edx
  403302:	xor    ecx,ecx
  403304:	xor    r8d,r8d
  403307:	call   4039a0 <flatcc_builder_custom_init@@Base>
  40330c:	mov    rsi,rsp
  40330f:	mov    edx,0xa
  403314:	mov    ecx,0x4
  403319:	mov    r9d,0x3fffffff
  40331f:	mov    rdi,rbx
  403322:	mov    r8d,0x4
  403328:	call   406620 <flatcc_builder_create_vector@@Base>
  40332d:	mov    rdi,rbx
  403330:	mov    esi,eax
  403332:	call   403350 <debug_test@@Base+0x90>
  403337:	mov    rdi,rbx
  40333a:	call   403e10 <flatcc_builder_clear@@Base>
  40333f:	xor    eax,eax
  403341:	lea    rsp,[rbp-0x8]
  403345:	pop    rbx
  403346:	pop    rbp
  403347:	ret    
  403348:	nop    DWORD PTR [rax+rax*1+0x0]
  403350:	push   rbp
  403351:	push   r14
  403353:	push   rbx
  403354:	mov    ebp,esi
  403356:	mov    rbx,rdi
  403359:	xor    r14d,r14d
  40335c:	xor    esi,esi
  40335e:	xor    edx,edx
  403360:	xor    ecx,ecx
  403362:	call   4047e0 <flatcc_builder_start_buffer@@Base>
  403367:	test   eax,eax
  403369:	je     403370 <debug_test@@Base+0xb0>
  40336b:	pop    rbx
  40336c:	pop    r14
  40336e:	pop    rbp
  40336f:	ret    
  403370:	mov    rdi,rbx
  403373:	mov    esi,0x3
  403378:	call   405a80 <flatcc_builder_start_table@@Base>
  40337d:	test   eax,eax
  40337f:	je     403390 <debug_test@@Base+0xd0>
  403381:	mov    rdi,rbx
  403384:	mov    esi,r14d
  403387:	pop    rbx
  403388:	pop    r14
  40338a:	pop    rbp
  40338b:	jmp    404a00 <flatcc_builder_end_buffer@@Base>
  403390:	xor    r14d,r14d
  403393:	mov    edx,0x8
  403398:	mov    rdi,rbx
  40339b:	xor    esi,esi
  40339d:	mov    ecx,0x8
  4033a2:	call   406e00 <flatcc_builder_table_add@@Base>
  4033a7:	test   rax,rax
  4033aa:	je     403381 <debug_test@@Base+0xc1>
  4033ac:	mov    QWORD PTR [rax],0x2a
  4033b3:	test   ebp,ebp
  4033b5:	je     403381 <debug_test@@Base+0xc1>
  4033b7:	mov    rdi,rbx
  4033ba:	mov    esi,0x2
  4033bf:	call   406ca0 <flatcc_builder_table_add_offset@@Base>
  4033c4:	test   rax,rax
  4033c7:	je     403381 <debug_test@@Base+0xc1>
  4033c9:	mov    DWORD PTR [rax],ebp
  4033cb:	mov    edx,0x1
  4033d0:	mov    rdi,rbx
  4033d3:	mov    esi,0x1
  4033d8:	mov    ecx,0x1
  4033dd:	call   406e00 <flatcc_builder_table_add@@Base>
  4033e2:	test   rax,rax
  4033e5:	je     403381 <debug_test@@Base+0xc1>
  4033e7:	mov    BYTE PTR [rax],0x1
  4033ea:	lea    rsi,[rip+0x5f4b]        # 40933c <_IO_stdin_used@@Base+0x33c>
  4033f1:	mov    rdi,rbx
  4033f4:	xor    edx,edx
  4033f6:	call   406420 <flatcc_builder_check_required@@Base>
  4033fb:	test   eax,eax
  4033fd:	je     40340f <debug_test@@Base+0x14f>
  4033ff:	mov    rdi,rbx
  403402:	call   406490 <flatcc_builder_end_table@@Base>
  403407:	mov    r14d,eax
  40340a:	jmp    403381 <debug_test@@Base+0xc1>
  40340f:	lea    rdi,[rip+0x5d5e]        # 409174 <_IO_stdin_used@@Base+0x174>
  403416:	lea    rsi,[rip+0x5dc3]        # 4091e0 <_IO_stdin_used@@Base+0x1e0>
  40341d:	lea    rcx,[rip+0x5e33]        # 409257 <_IO_stdin_used@@Base+0x257>
  403424:	mov    edx,0x15
  403429:	call   403070 <__assert_fail@plt>
  40342e:	xchg   ax,ax

0000000000403430 <emit_test@@Base>:
  403430:	push   rbp
  403431:	push   r15
  403433:	push   r14
  403435:	push   r13
  403437:	push   r12
  403439:	push   rbx
  40343a:	sub    rsp,0x1c8
  403441:	vmovaps xmm0,XMMWORD PTR [rip+0x5ef7]        # 409340 <_IO_stdin_used@@Base+0x340>
  403449:	vmovaps XMMWORD PTR [rsp+0x10],xmm0
  40344f:	lea    rbp,[rsp+0x40]
  403454:	mov    rdi,rbp
  403457:	call   403a50 <flatcc_builder_init@@Base>
  40345c:	mov    rdi,rbp
  40345f:	call   4082b0 <flatcc_builder_get_emit_context@@Base>
  403464:	mov    rbx,rax
  403467:	lea    rsi,[rsp+0x10]
  40346c:	mov    edx,0x4
  403471:	mov    ecx,0x4
  403476:	mov    r9d,0x3fffffff
  40347c:	mov    rdi,rbp
  40347f:	mov    r8d,0x4
  403485:	call   406620 <flatcc_builder_create_vector@@Base>
  40348a:	mov    rdi,rbp
  40348d:	mov    esi,eax
  40348f:	call   403350 <debug_test@@Base+0x90>
  403494:	mov    rcx,QWORD PTR [rbx]
  403497:	mov    eax,0xffffffff
  40349c:	cmp    rcx,QWORD PTR [rbx+0x8]
  4034a0:	jne    4036e7 <emit_test@@Base+0x2b7>
  4034a6:	mov    r15,QWORD PTR [rbx+0x10]
  4034aa:	test   r15,r15
  4034ad:	je     4036e7 <emit_test@@Base+0x2b7>
  4034b3:	mov    r13,QWORD PTR [rbx+0x30]
  4034b7:	lea    rdi,[rsp+0x40]
  4034bc:	call   407f70 <flatcc_builder_get_buffer_size@@Base>
  4034c1:	cmp    r13,rax
  4034c4:	jne    40375f <emit_test@@Base+0x32f>
  4034ca:	mov    rbx,QWORD PTR [rip+0xab27]        # 40dff8 <stderr@GLIBC_2.2.5>
  4034d1:	mov    rdi,QWORD PTR [rbx]
  4034d4:	lea    rsi,[rip+0x5c7e]        # 409159 <_IO_stdin_used@@Base+0x159>
  4034db:	mov    edx,r13d
  4034de:	xor    eax,eax
  4034e0:	call   4030b0 <fprintf@plt>
  4034e5:	mov    rbx,QWORD PTR [rbx]
  4034e8:	lea    rsi,[rip+0x5d95]        # 409284 <_IO_stdin_used@@Base+0x284>
  4034ef:	lea    rdx,[rip+0x5c74]        # 40916a <_IO_stdin_used@@Base+0x16a>
  4034f6:	mov    rdi,rbx
  4034f9:	xor    eax,eax
  4034fb:	call   4030b0 <fprintf@plt>
  403500:	test   r13d,r13d
  403503:	je     4035f1 <emit_test@@Base+0x1c1>
  403509:	mov    QWORD PTR [rsp+0x8],r13
  40350e:	mov    r14d,r13d
  403511:	lea    r13,[rsp+0x20]
  403516:	xor    r12d,r12d
  403519:	jmp    403570 <emit_test@@Base+0x140>
  40351b:	nop    DWORD PTR [rax+rax*1+0x0]
  403520:	mov    rdi,rbx
  403523:	lea    rsi,[rip+0x5d65]        # 40928f <_IO_stdin_used@@Base+0x28f>
  40352a:	mov    edx,r12d
  40352d:	xor    eax,eax
  40352f:	call   4030b0 <fprintf@plt>
  403534:	movzx  edx,BYTE PTR [r15+r12*1]
  403539:	mov    rdi,rbx
  40353c:	lea    rsi,[rip+0x5d54]        # 409297 <_IO_stdin_used@@Base+0x297>
  403543:	xor    eax,eax
  403545:	call   4030b0 <fprintf@plt>
  40354a:	movzx  eax,BYTE PTR [r15+r12*1]
  40354f:	lea    ecx,[rax-0x20]
  403552:	cmp    cl,0x5e
  403555:	mov    ecx,0x2e
  40355a:	cmova  eax,ecx
  40355d:	mov    BYTE PTR [rbp+r13*1+0x0],al
  403562:	mov    BYTE PTR [rbp+r13*1+0x1],0x0
  403568:	inc    r12
  40356b:	cmp    r14,r12
  40356e:	je     4035b8 <emit_test@@Base+0x188>
  403570:	mov    ebp,r12d
  403573:	and    ebp,0xf
  403576:	test   ebp,ebp
  403578:	jne    4035a0 <emit_test@@Base+0x170>
  40357a:	test   r12,r12
  40357d:	je     403520 <emit_test@@Base+0xf0>
  40357f:	mov    rdi,rbx
  403582:	lea    rsi,[rip+0x5d00]        # 409289 <_IO_stdin_used@@Base+0x289>
  403589:	mov    rdx,r13
  40358c:	xor    eax,eax
  40358e:	call   4030b0 <fprintf@plt>
  403593:	jmp    403520 <emit_test@@Base+0xf0>
  403595:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40359f:	nop
  4035a0:	test   r12b,0x7
  4035a4:	jne    403534 <emit_test@@Base+0x104>
  4035a6:	mov    edi,0x20
  4035ab:	mov    rsi,rbx
  4035ae:	call   403090 <fputc@plt>
  4035b3:	jmp    403534 <emit_test@@Base+0x104>
  4035b8:	mov    r13,QWORD PTR [rsp+0x8]
  4035bd:	test   r13b,0xf
  4035c1:	je     4035f1 <emit_test@@Base+0x1c1>
  4035c3:	lea    r12d,[r13+0x1]
  4035c7:	lea    r14,[rip+0x5ccf]        # 40929d <_IO_stdin_used@@Base+0x29d>
  4035ce:	mov    ebp,r12d
  4035d1:	mov    esi,0x3
  4035d6:	mov    edx,0x1
  4035db:	mov    rdi,r14
  4035de:	mov    rcx,rbx
  4035e1:	call   403100 <fwrite@plt>
  4035e6:	inc    ebp
  4035e8:	test   r12b,0xf
  4035ec:	mov    r12d,ebp
  4035ef:	jne    4035d1 <emit_test@@Base+0x1a1>
  4035f1:	lea    rsi,[rip+0x5c91]        # 409289 <_IO_stdin_used@@Base+0x289>
  4035f8:	lea    rdx,[rsp+0x20]
  4035fd:	mov    rdi,rbx
  403600:	xor    eax,eax
  403602:	call   4030b0 <fprintf@plt>
  403607:	cmp    r13,0x3a
  40360b:	jne    40377e <emit_test@@Base+0x34e>
  403611:	vmovdqu ymm0,YMMWORD PTR [r15+0x1a]
  403617:	vpcmpeqb ymm0,ymm0,YMMWORD PTR [rip+0x5a01]        # 409020 <_IO_stdin_used@@Base+0x20>
  40361f:	vmovdqu ymm1,YMMWORD PTR [r15]
  403624:	vpcmpeqb ymm1,ymm1,YMMWORD PTR [rip+0x5a14]        # 409040 <_IO_stdin_used@@Base+0x40>
  40362c:	vpand  ymm0,ymm1,ymm0
  403630:	vpmovmskb eax,ymm0
  403634:	cmp    eax,0xffffffff
  403637:	jne    40379d <emit_test@@Base+0x36d>
  40363d:	mov    ecx,DWORD PTR [r15]
  403640:	lea    rax,[r15+rcx*1]
  403644:	movsxd rcx,DWORD PTR [r15+rcx*1]
  403648:	mov    rdx,rax
  40364b:	sub    rdx,rcx
  40364e:	movzx  edx,WORD PTR [rdx]
  403651:	cmp    dx,0x6
  403655:	jb     4036f9 <emit_test@@Base+0x2c9>
  40365b:	neg    rcx
  40365e:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  403663:	test   rsi,rsi
  403666:	je     4036f9 <emit_test@@Base+0x2c9>
  40366c:	cmp    QWORD PTR [rax+rsi*1],0x2a
  403671:	jne    4036f9 <emit_test@@Base+0x2c9>
  403677:	cmp    dx,0x8
  40367b:	jb     40371b <emit_test@@Base+0x2eb>
  403681:	movzx  esi,WORD PTR [rax+rcx*1+0x6]
  403686:	test   rsi,rsi
  403689:	je     40371b <emit_test@@Base+0x2eb>
  40368f:	cmp    BYTE PTR [rax+rsi*1],0x1
  403693:	jne    40371b <emit_test@@Base+0x2eb>
  403699:	cmp    dx,0xa
  40369d:	jb     40373d <emit_test@@Base+0x30d>
  4036a3:	movzx  ecx,WORD PTR [rax+rcx*1+0x8]
  4036a8:	test   rcx,rcx
  4036ab:	je     40373d <emit_test@@Base+0x30d>
  4036b1:	lea    rdx,[rax+rcx*1]
  4036b5:	mov    eax,DWORD PTR [rax+rcx*1]
  4036b8:	cmp    DWORD PTR [rax+rdx*1],0x4
  4036bc:	jne    40373d <emit_test@@Base+0x30d>
  4036be:	vmovss xmm0,DWORD PTR [rdx+rax*1+0xc]
  4036c4:	vucomiss xmm0,DWORD PTR [rip+0x5994]        # 409060 <_IO_stdin_used@@Base+0x60>
  4036cc:	jne    4037bf <emit_test@@Base+0x38f>
  4036d2:	jp     4037bf <emit_test@@Base+0x38f>
  4036d8:	lea    rdi,[rsp+0x40]
  4036dd:	vzeroupper 
  4036e0:	call   403e10 <flatcc_builder_clear@@Base>
  4036e5:	xor    eax,eax
  4036e7:	add    rsp,0x1c8
  4036ee:	pop    rbx
  4036ef:	pop    r12
  4036f1:	pop    r13
  4036f3:	pop    r14
  4036f5:	pop    r15
  4036f7:	pop    rbp
  4036f8:	ret    
  4036f9:	lea    rdi,[rip+0x70c2]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403700:	lea    rsi,[rip+0x59dd]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  403707:	lea    rcx,[rip+0x5a3b]        # 409149 <_IO_stdin_used@@Base+0x149>
  40370e:	mov    edx,0x70
  403713:	vzeroupper 
  403716:	call   403070 <__assert_fail@plt>
  40371b:	lea    rdi,[rip+0x70a0]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403722:	lea    rsi,[rip+0x59bb]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  403729:	lea    rcx,[rip+0x5a19]        # 409149 <_IO_stdin_used@@Base+0x149>
  403730:	mov    edx,0x71
  403735:	vzeroupper 
  403738:	call   403070 <__assert_fail@plt>
  40373d:	lea    rdi,[rip+0x707e]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403744:	lea    rsi,[rip+0x5999]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  40374b:	lea    rcx,[rip+0x59f7]        # 409149 <_IO_stdin_used@@Base+0x149>
  403752:	mov    edx,0x72
  403757:	vzeroupper 
  40375a:	call   403070 <__assert_fail@plt>
  40375f:	lea    rdi,[rip+0x705c]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403766:	lea    rsi,[rip+0x5977]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  40376d:	lea    rcx,[rip+0x59d5]        # 409149 <_IO_stdin_used@@Base+0x149>
  403774:	mov    edx,0x65
  403779:	call   403070 <__assert_fail@plt>
  40377e:	lea    rdi,[rip+0x703d]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403785:	lea    rsi,[rip+0x5958]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  40378c:	lea    rcx,[rip+0x59b6]        # 409149 <_IO_stdin_used@@Base+0x149>
  403793:	mov    edx,0x6a
  403798:	call   403070 <__assert_fail@plt>
  40379d:	lea    rdi,[rip+0x701e]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4037a4:	lea    rsi,[rip+0x5939]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  4037ab:	lea    rcx,[rip+0x5997]        # 409149 <_IO_stdin_used@@Base+0x149>
  4037b2:	mov    edx,0x6c
  4037b7:	vzeroupper 
  4037ba:	call   403070 <__assert_fail@plt>
  4037bf:	lea    rdi,[rip+0x6ffc]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4037c6:	lea    rsi,[rip+0x5917]        # 4090e4 <_IO_stdin_used@@Base+0xe4>
  4037cd:	lea    rcx,[rip+0x5975]        # 409149 <_IO_stdin_used@@Base+0x149>
  4037d4:	mov    edx,0x73
  4037d9:	vzeroupper 
  4037dc:	call   403070 <__assert_fail@plt>
  4037e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4037eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004037f0 <main@@Base>:
  4037f0:	push   rbp
  4037f1:	mov    rbp,rsp
  4037f4:	push   rbx
  4037f5:	and    rsp,0xffffffffffffffe0
  4037f9:	sub    rsp,0x1e0
  403800:	vxorps xmm0,xmm0,xmm0
  403804:	vmovaps YMMWORD PTR [rsp],ymm0
  403809:	mov    QWORD PTR [rsp+0x20],0x0
  403812:	lea    rdi,[rip+0x5a88]        # 4092a1 <_IO_stdin_used@@Base+0x2a1>
  403819:	vzeroupper 
  40381c:	call   403040 <puts@plt>
  403821:	lea    rsi,[rip+0xfffffffffffff9e8]        # 403210 <dbg_emitter@@Base>
  403828:	lea    rbx,[rsp+0x40]
  40382d:	mov    rdi,rbx
  403830:	xor    edx,edx
  403832:	xor    ecx,ecx
  403834:	xor    r8d,r8d
  403837:	call   4039a0 <flatcc_builder_custom_init@@Base>
  40383c:	mov    rsi,rsp
  40383f:	mov    edx,0xa
  403844:	mov    ecx,0x4
  403849:	mov    r9d,0x3fffffff
  40384f:	mov    rdi,rbx
  403852:	mov    r8d,0x4
  403858:	call   406620 <flatcc_builder_create_vector@@Base>
  40385d:	mov    rdi,rbx
  403860:	mov    esi,eax
  403862:	call   403350 <debug_test@@Base+0x90>
  403867:	mov    rdi,rbx
  40386a:	call   403e10 <flatcc_builder_clear@@Base>
  40386f:	call   403430 <emit_test@@Base>
  403874:	lea    rsp,[rbp-0x8]
  403878:	pop    rbx
  403879:	pop    rbp
  40387a:	ret    
  40387b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403880 <flatcc_builder_default_alloc@@Base>:
  403880:	push   rbp
  403881:	push   r15
  403883:	push   r14
  403885:	push   r12
  403887:	push   rbx
  403888:	mov    rbx,rsi
  40388b:	test   rdx,rdx
  40388e:	je     4038b8 <flatcc_builder_default_alloc@@Base+0x38>
  403890:	mov    r14d,ecx
  403893:	dec    r8d
  403896:	cmp    r8d,0x6
  40389a:	ja     4038d6 <flatcc_builder_default_alloc@@Base+0x56>
  40389c:	mov    eax,0x100
  4038a1:	lea    rcx,[rip+0x5aa8]        # 409350 <_IO_stdin_used@@Base+0x350>
  4038a8:	movsxd rsi,DWORD PTR [rcx+r8*4]
  4038ac:	add    rsi,rcx
  4038af:	jmp    rsi
  4038b1:	mov    eax,0x120
  4038b6:	jmp    4038f0 <flatcc_builder_default_alloc@@Base+0x70>
  4038b8:	mov    rdi,QWORD PTR [rbx]
  4038bb:	xor    r15d,r15d
  4038be:	test   rdi,rdi
  4038c1:	je     40394f <flatcc_builder_default_alloc@@Base+0xcf>
  4038c7:	call   403030 <free@plt>
  4038cc:	vxorps xmm0,xmm0,xmm0
  4038d0:	vmovups XMMWORD PTR [rbx],xmm0
  4038d4:	jmp    40394f <flatcc_builder_default_alloc@@Base+0xcf>
  4038d6:	mov    eax,0x20
  4038db:	jmp    4038f0 <flatcc_builder_default_alloc@@Base+0x70>
  4038dd:	mov    rax,rdx
  4038e0:	jmp    4038f0 <flatcc_builder_default_alloc@@Base+0x70>
  4038e2:	mov    eax,0x40
  4038e7:	nop    WORD PTR [rax+rax*1+0x0]
  4038f0:	mov    rbp,rax
  4038f3:	add    rax,rax
  4038f6:	cmp    rbp,rdx
  4038f9:	jb     4038f0 <flatcc_builder_default_alloc@@Base+0x70>
  4038fb:	mov    rax,QWORD PTR [rbx+0x8]
  4038ff:	xor    r15d,r15d
  403902:	cmp    rax,rdx
  403905:	jb     40390f <flatcc_builder_default_alloc@@Base+0x8f>
  403907:	shr    rax,1
  40390a:	cmp    rax,rbp
  40390d:	jae    40394f <flatcc_builder_default_alloc@@Base+0xcf>
  40390f:	mov    rdi,QWORD PTR [rbx]
  403912:	mov    rsi,rbp
  403915:	call   4030f0 <realloc@plt>
  40391a:	test   rax,rax
  40391d:	je     403949 <flatcc_builder_default_alloc@@Base+0xc9>
  40391f:	mov    r12,rax
  403922:	test   r14d,r14d
  403925:	je     403940 <flatcc_builder_default_alloc@@Base+0xc0>
  403927:	mov    rax,QWORD PTR [rbx+0x8]
  40392b:	mov    rdx,rbp
  40392e:	sub    rdx,rax
  403931:	jbe    403940 <flatcc_builder_default_alloc@@Base+0xc0>
  403933:	mov    rdi,r12
  403936:	add    rdi,rax
  403939:	xor    esi,esi
  40393b:	call   403080 <memset@plt>
  403940:	mov    QWORD PTR [rbx],r12
  403943:	mov    QWORD PTR [rbx+0x8],rbp
  403947:	jmp    40394f <flatcc_builder_default_alloc@@Base+0xcf>
  403949:	mov    r15d,0xffffffff
  40394f:	mov    eax,r15d
  403952:	pop    rbx
  403953:	pop    r12
  403955:	pop    r14
  403957:	pop    r15
  403959:	pop    rbp
  40395a:	ret    
  40395b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403960 <flatcc_builder_flush_vtable_cache@@Base>:
  403960:	push   rbx
  403961:	cmp    QWORD PTR [rdi+0xd8],0x0
  403969:	je     403994 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  40396b:	mov    rbx,rdi
  40396e:	mov    rdi,QWORD PTR [rdi+0xa8]
  403975:	mov    rdx,QWORD PTR [rbx+0xb0]
  40397c:	xor    esi,esi
  40397e:	call   403080 <memset@plt>
  403983:	movabs rax,0x1000000000
  40398d:	mov    QWORD PTR [rbx+0xe0],rax
  403994:	pop    rbx
  403995:	ret    
  403996:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004039a0 <flatcc_builder_custom_init@@Base>:
  4039a0:	vxorps xmm0,xmm0,xmm0
  4039a4:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  4039ac:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  4039b4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  4039bc:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4039c4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  4039cc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  4039d4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  4039dc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  4039e4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  4039e9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4039ee:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4039f3:	vmovups YMMWORD PTR [rdi],ymm0
  4039f7:	mov    QWORD PTR [rdi+0x180],0x0
  403a02:	test   rsi,rsi
  403a05:	je     403a29 <flatcc_builder_custom_init@@Base+0x89>
  403a07:	test   rcx,rcx
  403a0a:	jne    403a13 <flatcc_builder_custom_init@@Base+0x73>
  403a0c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403880 <flatcc_builder_default_alloc@@Base>
  403a13:	mov    QWORD PTR [rdi+0x40],r8
  403a17:	mov    QWORD PTR [rdi+0x50],rcx
  403a1b:	mov    QWORD PTR [rdi+0x38],rdx
  403a1f:	mov    QWORD PTR [rdi+0x48],rsi
  403a23:	xor    eax,eax
  403a25:	vzeroupper 
  403a28:	ret    
  403a29:	mov    DWORD PTR [rdi+0x128],0x1
  403a33:	lea    rdx,[rdi+0x130]
  403a3a:	lea    rsi,[rip+0x4a6f]        # 4084b0 <flatcc_emitter@@Base>
  403a41:	test   rcx,rcx
  403a44:	je     403a0c <flatcc_builder_custom_init@@Base+0x6c>
  403a46:	jmp    403a13 <flatcc_builder_custom_init@@Base+0x73>
  403a48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403a50 <flatcc_builder_init@@Base>:
  403a50:	vxorps xmm0,xmm0,xmm0
  403a54:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403a5c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403a61:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403a66:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403a6e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403a76:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403a7e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403a86:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403a8e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403a96:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403a9e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403aa3:	vmovups YMMWORD PTR [rdi],ymm0
  403aa7:	mov    QWORD PTR [rdi+0x180],0x0
  403ab2:	mov    DWORD PTR [rdi+0x128],0x1
  403abc:	lea    rax,[rdi+0x130]
  403ac3:	mov    QWORD PTR [rdi+0x40],0x0
  403acb:	lea    rcx,[rip+0xfffffffffffffdae]        # 403880 <flatcc_builder_default_alloc@@Base>
  403ad2:	mov    QWORD PTR [rdi+0x50],rcx
  403ad6:	mov    QWORD PTR [rdi+0x38],rax
  403ada:	lea    rax,[rip+0x49cf]        # 4084b0 <flatcc_emitter@@Base>
  403ae1:	mov    QWORD PTR [rdi+0x48],rax
  403ae5:	xor    eax,eax
  403ae7:	vzeroupper 
  403aea:	ret    
  403aeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403af0 <flatcc_builder_custom_reset@@Base>:
  403af0:	push   rbp
  403af1:	push   r15
  403af3:	push   r14
  403af5:	push   r12
  403af7:	push   rbx
  403af8:	mov    r15d,edx
  403afb:	mov    r14d,esi
  403afe:	mov    r12,rdi
  403b01:	lea    rbp,[rdi+0x58]
  403b05:	xor    ebx,ebx
  403b07:	jmp    403b28 <flatcc_builder_custom_reset@@Base+0x38>
  403b09:	nop    DWORD PTR [rax+0x0]
  403b10:	cmp    QWORD PTR [rbp+0x8],0x0
  403b15:	jne    403c26 <flatcc_builder_custom_reset@@Base+0x136>
  403b1b:	inc    rbx
  403b1e:	add    rbp,0x10
  403b22:	cmp    rbx,0x8
  403b26:	je     403b6f <flatcc_builder_custom_reset@@Base+0x7f>
  403b28:	mov    rdi,QWORD PTR [rbp+0x0]
  403b2c:	test   rdi,rdi
  403b2f:	je     403b10 <flatcc_builder_custom_reset@@Base+0x20>
  403b31:	test   r15d,r15d
  403b34:	je     403b62 <flatcc_builder_custom_reset@@Base+0x72>
  403b36:	cmp    rbx,0x5
  403b3a:	je     403b62 <flatcc_builder_custom_reset@@Base+0x72>
  403b3c:	mov    rdi,QWORD PTR [r12+0x40]
  403b41:	mov    edx,0x1
  403b46:	mov    rsi,rbp
  403b49:	mov    ecx,0x1
  403b4e:	mov    r8d,ebx
  403b51:	call   QWORD PTR [r12+0x50]
  403b56:	test   eax,eax
  403b58:	jne    403c16 <flatcc_builder_custom_reset@@Base+0x126>
  403b5e:	mov    rdi,QWORD PTR [rbp+0x0]
  403b62:	mov    rdx,QWORD PTR [rbp+0x8]
  403b66:	xor    esi,esi
  403b68:	call   403080 <memset@plt>
  403b6d:	jmp    403b1b <flatcc_builder_custom_reset@@Base+0x2b>
  403b6f:	mov    DWORD PTR [r12+0xe0],0x0
  403b7b:	cmp    DWORD PTR [r12+0xe4],0x0
  403b84:	je     403b92 <flatcc_builder_custom_reset@@Base+0xa2>
  403b86:	mov    DWORD PTR [r12+0xe4],0x10
  403b92:	mov    WORD PTR [r12+0xe8],0x0
  403b9d:	mov    QWORD PTR [r12+0xf0],0x0
  403ba9:	mov    QWORD PTR [r12+0x20],0x0
  403bb2:	vxorps xmm0,xmm0,xmm0
  403bb6:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403bc0:	mov    rax,QWORD PTR [r12+0x58]
  403bc5:	mov    rcx,QWORD PTR [r12+0x68]
  403bca:	mov    QWORD PTR [r12+0x18],rcx
  403bcf:	mov    rcx,QWORD PTR [r12+0x88]
  403bd7:	mov    QWORD PTR [r12],rcx
  403bdb:	mov    QWORD PTR [r12+0x8],rax
  403be0:	mov    QWORD PTR [r12+0x30],0x0
  403be9:	test   r14d,r14d
  403bec:	je     403bf8 <flatcc_builder_custom_reset@@Base+0x108>
  403bee:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403bf8:	xor    ebx,ebx
  403bfa:	cmp    DWORD PTR [r12+0x128],0x0
  403c03:	je     403c1b <flatcc_builder_custom_reset@@Base+0x12b>
  403c05:	add    r12,0x130
  403c0c:	mov    rdi,r12
  403c0f:	call   408330 <flatcc_emitter_reset@@Base>
  403c14:	jmp    403c1b <flatcc_builder_custom_reset@@Base+0x12b>
  403c16:	mov    ebx,0xffffffff
  403c1b:	mov    eax,ebx
  403c1d:	pop    rbx
  403c1e:	pop    r12
  403c20:	pop    r14
  403c22:	pop    r15
  403c24:	pop    rbp
  403c25:	ret    
  403c26:	lea    rdi,[rip+0x59c3]        # 4095f0 <flatcc_builder_padding_base@@Base+0x280>
  403c2d:	lea    rsi,[rip+0x59ce]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  403c34:	lea    rcx,[rip+0x5a27]        # 409662 <flatcc_builder_padding_base@@Base+0x2f2>
  403c3b:	mov    edx,0x1b2
  403c40:	call   403070 <__assert_fail@plt>
  403c45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403c4f:	nop

0000000000403c50 <flatcc_builder_reset@@Base>:
  403c50:	push   rbx
  403c51:	mov    rbx,rdi
  403c54:	mov    rdi,QWORD PTR [rdi+0x58]
  403c58:	mov    rdx,QWORD PTR [rbx+0x60]
  403c5c:	test   rdi,rdi
  403c5f:	je     403c6a <flatcc_builder_reset@@Base+0x1a>
  403c61:	xor    esi,esi
  403c63:	call   403080 <memset@plt>
  403c68:	jmp    403c73 <flatcc_builder_reset@@Base+0x23>
  403c6a:	test   rdx,rdx
  403c6d:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403c73:	mov    rdi,QWORD PTR [rbx+0x68]
  403c77:	mov    rdx,QWORD PTR [rbx+0x70]
  403c7b:	test   rdi,rdi
  403c7e:	je     403c89 <flatcc_builder_reset@@Base+0x39>
  403c80:	xor    esi,esi
  403c82:	call   403080 <memset@plt>
  403c87:	jmp    403c92 <flatcc_builder_reset@@Base+0x42>
  403c89:	test   rdx,rdx
  403c8c:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403c92:	mov    rdi,QWORD PTR [rbx+0x78]
  403c96:	mov    rdx,QWORD PTR [rbx+0x80]
  403c9d:	test   rdi,rdi
  403ca0:	je     403cab <flatcc_builder_reset@@Base+0x5b>
  403ca2:	xor    esi,esi
  403ca4:	call   403080 <memset@plt>
  403ca9:	jmp    403cb4 <flatcc_builder_reset@@Base+0x64>
  403cab:	test   rdx,rdx
  403cae:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403cb4:	mov    rdi,QWORD PTR [rbx+0x88]
  403cbb:	mov    rdx,QWORD PTR [rbx+0x90]
  403cc2:	test   rdi,rdi
  403cc5:	je     403cd0 <flatcc_builder_reset@@Base+0x80>
  403cc7:	xor    esi,esi
  403cc9:	call   403080 <memset@plt>
  403cce:	jmp    403cd9 <flatcc_builder_reset@@Base+0x89>
  403cd0:	test   rdx,rdx
  403cd3:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403cd9:	mov    rdi,QWORD PTR [rbx+0x98]
  403ce0:	mov    rdx,QWORD PTR [rbx+0xa0]
  403ce7:	test   rdi,rdi
  403cea:	je     403cf5 <flatcc_builder_reset@@Base+0xa5>
  403cec:	xor    esi,esi
  403cee:	call   403080 <memset@plt>
  403cf3:	jmp    403cfe <flatcc_builder_reset@@Base+0xae>
  403cf5:	test   rdx,rdx
  403cf8:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403cfe:	mov    rdi,QWORD PTR [rbx+0xa8]
  403d05:	mov    rdx,QWORD PTR [rbx+0xb0]
  403d0c:	test   rdi,rdi
  403d0f:	je     403d1a <flatcc_builder_reset@@Base+0xca>
  403d11:	xor    esi,esi
  403d13:	call   403080 <memset@plt>
  403d18:	jmp    403d23 <flatcc_builder_reset@@Base+0xd3>
  403d1a:	test   rdx,rdx
  403d1d:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403d23:	mov    rdi,QWORD PTR [rbx+0xb8]
  403d2a:	mov    rdx,QWORD PTR [rbx+0xc0]
  403d31:	test   rdi,rdi
  403d34:	je     403d3f <flatcc_builder_reset@@Base+0xef>
  403d36:	xor    esi,esi
  403d38:	call   403080 <memset@plt>
  403d3d:	jmp    403d48 <flatcc_builder_reset@@Base+0xf8>
  403d3f:	test   rdx,rdx
  403d42:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403d48:	mov    rdi,QWORD PTR [rbx+0xc8]
  403d4f:	mov    rdx,QWORD PTR [rbx+0xd0]
  403d56:	test   rdi,rdi
  403d59:	je     403d64 <flatcc_builder_reset@@Base+0x114>
  403d5b:	xor    esi,esi
  403d5d:	call   403080 <memset@plt>
  403d62:	jmp    403d6d <flatcc_builder_reset@@Base+0x11d>
  403d64:	test   rdx,rdx
  403d67:	jne    403df0 <flatcc_builder_reset@@Base+0x1a0>
  403d6d:	mov    DWORD PTR [rbx+0xe0],0x0
  403d77:	cmp    DWORD PTR [rbx+0xe4],0x0
  403d7e:	je     403d8a <flatcc_builder_reset@@Base+0x13a>
  403d80:	mov    DWORD PTR [rbx+0xe4],0x10
  403d8a:	mov    WORD PTR [rbx+0xe8],0x0
  403d93:	mov    QWORD PTR [rbx+0xf0],0x0
  403d9e:	mov    QWORD PTR [rbx+0x20],0x0
  403da6:	vxorps xmm0,xmm0,xmm0
  403daa:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  403db2:	mov    rax,QWORD PTR [rbx+0x58]
  403db6:	mov    rcx,QWORD PTR [rbx+0x68]
  403dba:	mov    QWORD PTR [rbx+0x18],rcx
  403dbe:	mov    rcx,QWORD PTR [rbx+0x88]
  403dc5:	mov    QWORD PTR [rbx],rcx
  403dc8:	mov    QWORD PTR [rbx+0x8],rax
  403dcc:	mov    QWORD PTR [rbx+0x30],0x0
  403dd4:	cmp    DWORD PTR [rbx+0x128],0x0
  403ddb:	je     403dec <flatcc_builder_reset@@Base+0x19c>
  403ddd:	add    rbx,0x130
  403de4:	mov    rdi,rbx
  403de7:	call   408330 <flatcc_emitter_reset@@Base>
  403dec:	xor    eax,eax
  403dee:	pop    rbx
  403def:	ret    
  403df0:	lea    rdi,[rip+0x57f9]        # 4095f0 <flatcc_builder_padding_base@@Base+0x280>
  403df7:	lea    rsi,[rip+0x5804]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  403dfe:	lea    rcx,[rip+0x585d]        # 409662 <flatcc_builder_padding_base@@Base+0x2f2>
  403e05:	mov    edx,0x1b2
  403e0a:	call   403070 <__assert_fail@plt>
  403e0f:	nop

0000000000403e10 <flatcc_builder_clear@@Base>:
  403e10:	push   rbx
  403e11:	mov    rbx,rdi
  403e14:	lea    rsi,[rdi+0x58]
  403e18:	mov    rdi,QWORD PTR [rdi+0x40]
  403e1c:	xor    edx,edx
  403e1e:	xor    ecx,ecx
  403e20:	xor    r8d,r8d
  403e23:	call   QWORD PTR [rbx+0x50]
  403e26:	lea    rsi,[rbx+0x68]
  403e2a:	mov    rdi,QWORD PTR [rbx+0x40]
  403e2e:	xor    edx,edx
  403e30:	xor    ecx,ecx
  403e32:	mov    r8d,0x1
  403e38:	call   QWORD PTR [rbx+0x50]
  403e3b:	lea    rsi,[rbx+0x78]
  403e3f:	mov    rdi,QWORD PTR [rbx+0x40]
  403e43:	xor    edx,edx
  403e45:	xor    ecx,ecx
  403e47:	mov    r8d,0x2
  403e4d:	call   QWORD PTR [rbx+0x50]
  403e50:	lea    rsi,[rbx+0x88]
  403e57:	mov    rdi,QWORD PTR [rbx+0x40]
  403e5b:	xor    edx,edx
  403e5d:	xor    ecx,ecx
  403e5f:	mov    r8d,0x3
  403e65:	call   QWORD PTR [rbx+0x50]
  403e68:	lea    rsi,[rbx+0x98]
  403e6f:	mov    rdi,QWORD PTR [rbx+0x40]
  403e73:	xor    edx,edx
  403e75:	xor    ecx,ecx
  403e77:	mov    r8d,0x4
  403e7d:	call   QWORD PTR [rbx+0x50]
  403e80:	lea    rsi,[rbx+0xa8]
  403e87:	mov    rdi,QWORD PTR [rbx+0x40]
  403e8b:	xor    edx,edx
  403e8d:	xor    ecx,ecx
  403e8f:	mov    r8d,0x5
  403e95:	call   QWORD PTR [rbx+0x50]
  403e98:	lea    rsi,[rbx+0xb8]
  403e9f:	mov    rdi,QWORD PTR [rbx+0x40]
  403ea3:	xor    edx,edx
  403ea5:	xor    ecx,ecx
  403ea7:	mov    r8d,0x6
  403ead:	call   QWORD PTR [rbx+0x50]
  403eb0:	lea    rsi,[rbx+0xc8]
  403eb7:	mov    rdi,QWORD PTR [rbx+0x40]
  403ebb:	xor    edx,edx
  403ebd:	xor    ecx,ecx
  403ebf:	mov    r8d,0x7
  403ec5:	call   QWORD PTR [rbx+0x50]
  403ec8:	cmp    DWORD PTR [rbx+0x128],0x0
  403ecf:	je     403edd <flatcc_builder_clear@@Base+0xcd>
  403ed1:	lea    rdi,[rbx+0x130]
  403ed8:	call   408430 <flatcc_emitter_clear@@Base>
  403edd:	vxorps xmm0,xmm0,xmm0
  403ee1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  403ee9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  403ef1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  403ef9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  403f01:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  403f09:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  403f11:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  403f19:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  403f21:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  403f26:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  403f2b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  403f30:	vmovups YMMWORD PTR [rbx],ymm0
  403f34:	mov    QWORD PTR [rbx+0x180],0x0
  403f3f:	pop    rbx
  403f40:	vzeroupper 
  403f43:	ret    
  403f44:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f4e:	xchg   ax,ax

0000000000403f50 <flatcc_builder_enter_user_frame_ptr@@Base>:
  403f50:	push   r15
  403f52:	push   r14
  403f54:	push   r12
  403f56:	push   rbx
  403f57:	push   rax
  403f58:	mov    r14,rsi
  403f5b:	mov    r15,rdi
  403f5e:	add    r14,0xf
  403f62:	and    r14,0xfffffffffffffff8
  403f66:	mov    rbx,QWORD PTR [rdi+0x180]
  403f6d:	lea    r12,[rdi+0xc8]
  403f74:	lea    rdx,[rbx+r14*1]
  403f78:	cmp    rdx,QWORD PTR [rdi+0xd0]
  403f7f:	jbe    403f98 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  403f81:	mov    rdi,QWORD PTR [r15+0x40]
  403f85:	mov    rsi,r12
  403f88:	xor    ecx,ecx
  403f8a:	mov    r8d,0x7
  403f90:	call   QWORD PTR [r15+0x50]
  403f94:	test   eax,eax
  403f96:	jne    403fe8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  403f98:	add    rbx,QWORD PTR [r12]
  403f9c:	je     403fd7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  403f9e:	mov    rdi,rbx
  403fa1:	xor    esi,esi
  403fa3:	mov    rdx,r14
  403fa6:	call   403080 <memset@plt>
  403fab:	mov    rax,QWORD PTR [r15+0x178]
  403fb2:	mov    QWORD PTR [rbx],rax
  403fb5:	add    rbx,0x8
  403fb9:	mov    rax,QWORD PTR [r15+0x180]
  403fc0:	lea    rcx,[rax+0x8]
  403fc4:	mov    QWORD PTR [r15+0x178],rcx
  403fcb:	add    rax,r14
  403fce:	mov    QWORD PTR [r15+0x180],rax
  403fd5:	jmp    403fd9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  403fd7:	xor    ebx,ebx
  403fd9:	mov    rax,rbx
  403fdc:	add    rsp,0x8
  403fe0:	pop    rbx
  403fe1:	pop    r12
  403fe3:	pop    r14
  403fe5:	pop    r15
  403fe7:	ret    
  403fe8:	lea    rdi,[rip+0x67d3]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  403fef:	lea    rsi,[rip+0x560c]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  403ff6:	lea    rcx,[rip+0x65ff]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  403ffd:	mov    edx,0x134
  404002:	call   403070 <__assert_fail@plt>
  404007:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404010 <flatcc_builder_enter_user_frame@@Base>:
  404010:	push   r15
  404012:	push   r14
  404014:	push   r12
  404016:	push   rbx
  404017:	push   rax
  404018:	mov    r14,rsi
  40401b:	mov    rbx,rdi
  40401e:	add    r14,0xf
  404022:	and    r14,0xfffffffffffffff8
  404026:	mov    r15,QWORD PTR [rdi+0x180]
  40402d:	lea    r12,[rdi+0xc8]
  404034:	lea    rdx,[r15+r14*1]
  404038:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40403f:	jbe    404057 <flatcc_builder_enter_user_frame@@Base+0x47>
  404041:	mov    rdi,QWORD PTR [rbx+0x40]
  404045:	mov    rsi,r12
  404048:	xor    ecx,ecx
  40404a:	mov    r8d,0x7
  404050:	call   QWORD PTR [rbx+0x50]
  404053:	test   eax,eax
  404055:	jne    4040a0 <flatcc_builder_enter_user_frame@@Base+0x90>
  404057:	add    r15,QWORD PTR [r12]
  40405b:	je     404092 <flatcc_builder_enter_user_frame@@Base+0x82>
  40405d:	mov    rdi,r15
  404060:	xor    esi,esi
  404062:	mov    rdx,r14
  404065:	call   403080 <memset@plt>
  40406a:	mov    rax,QWORD PTR [rbx+0x178]
  404071:	mov    QWORD PTR [r15],rax
  404074:	mov    rcx,QWORD PTR [rbx+0x180]
  40407b:	lea    rax,[rcx+0x8]
  40407f:	mov    QWORD PTR [rbx+0x178],rax
  404086:	add    rcx,r14
  404089:	mov    QWORD PTR [rbx+0x180],rcx
  404090:	jmp    404094 <flatcc_builder_enter_user_frame@@Base+0x84>
  404092:	xor    eax,eax
  404094:	add    rsp,0x8
  404098:	pop    rbx
  404099:	pop    r12
  40409b:	pop    r14
  40409d:	pop    r15
  40409f:	ret    
  4040a0:	lea    rdi,[rip+0x671b]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4040a7:	lea    rsi,[rip+0x5554]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4040ae:	lea    rcx,[rip+0x6547]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  4040b5:	mov    edx,0x134
  4040ba:	call   403070 <__assert_fail@plt>
  4040bf:	nop

00000000004040c0 <flatcc_builder_exit_user_frame@@Base>:
  4040c0:	push   rax
  4040c1:	mov    rax,QWORD PTR [rdi+0x178]
  4040c8:	test   rax,rax
  4040cb:	je     4040ef <flatcc_builder_exit_user_frame@@Base+0x2f>
  4040cd:	mov    rcx,QWORD PTR [rdi+0xc8]
  4040d4:	mov    edx,eax
  4040d6:	add    rax,0xfffffffffffffff8
  4040da:	mov    QWORD PTR [rdi+0x180],rax
  4040e1:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4040e6:	mov    QWORD PTR [rdi+0x178],rax
  4040ed:	pop    rcx
  4040ee:	ret    
  4040ef:	lea    rdi,[rip+0x55aa]        # 4096a0 <flatcc_builder_padding_base@@Base+0x330>
  4040f6:	lea    rsi,[rip+0x5505]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4040fd:	lea    rcx,[rip+0x55b5]        # 4096b9 <flatcc_builder_padding_base@@Base+0x349>
  404104:	mov    edx,0x21e
  404109:	call   403070 <__assert_fail@plt>
  40410e:	xchg   ax,ax

0000000000404110 <flatcc_builder_exit_user_frame_at@@Base>:
  404110:	push   rax
  404111:	cmp    QWORD PTR [rdi+0x178],rsi
  404118:	jb     404148 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40411a:	mov    QWORD PTR [rdi+0x178],rsi
  404121:	test   rsi,rsi
  404124:	je     404167 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404126:	mov    rax,QWORD PTR [rdi+0xc8]
  40412d:	mov    ecx,esi
  40412f:	add    rsi,0xfffffffffffffff8
  404133:	mov    QWORD PTR [rdi+0x180],rsi
  40413a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40413f:	mov    QWORD PTR [rdi+0x178],rax
  404146:	pop    rcx
  404147:	ret    
  404148:	lea    rdi,[rip+0x55a4]        # 4096f3 <flatcc_builder_padding_base@@Base+0x383>
  40414f:	lea    rsi,[rip+0x54ac]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404156:	lea    rcx,[rip+0x55b5]        # 409712 <flatcc_builder_padding_base@@Base+0x3a2>
  40415d:	mov    edx,0x227
  404162:	call   403070 <__assert_fail@plt>
  404167:	lea    rdi,[rip+0x5532]        # 4096a0 <flatcc_builder_padding_base@@Base+0x330>
  40416e:	lea    rsi,[rip+0x548d]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404175:	lea    rcx,[rip+0x553d]        # 4096b9 <flatcc_builder_padding_base@@Base+0x349>
  40417c:	mov    edx,0x21e
  404181:	call   403070 <__assert_fail@plt>
  404186:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404190 <flatcc_builder_get_current_user_frame@@Base>:
  404190:	mov    rax,QWORD PTR [rdi+0x178]
  404197:	ret    
  404198:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004041a0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4041a0:	mov    eax,esi
  4041a2:	add    rax,QWORD PTR [rdi+0xc8]
  4041a9:	ret    
  4041aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004041b0 <flatcc_builder_embed_buffer@@Base>:
  4041b0:	push   rbp
  4041b1:	push   r15
  4041b3:	push   r14
  4041b5:	push   r12
  4041b7:	push   rbx
  4041b8:	sub    rsp,0xa0
  4041bf:	mov    ebx,r9d
  4041c2:	mov    rbp,rcx
  4041c5:	mov    r15,rdx
  4041c8:	mov    edx,esi
  4041ca:	mov    r12,rdi
  4041cd:	mov    WORD PTR [rsp+0xa],r8w
  4041d3:	xor    ecx,ecx
  4041d5:	cmp    DWORD PTR [rdi+0x100],0x0
  4041dc:	setne  cl
  4041df:	lea    rsi,[rsp+0xa]
  4041e4:	call   404350 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4041e9:	and    ebx,0x2
  4041ec:	movzx  eax,WORD PTR [rsp+0xa]
  4041f1:	mov    r14d,DWORD PTR [r12+0xf0]
  4041f9:	lea    ecx,[rbp+rbx*2+0x0]
  4041fd:	mov    edx,r14d
  404200:	sub    edx,ecx
  404202:	dec    eax
  404204:	and    eax,edx
  404206:	lea    ecx,[rax+rbp*1]
  404209:	mov    DWORD PTR [rsp+0xc],ecx
  40420d:	mov    QWORD PTR [rsp+0x10],0x0
  404216:	mov    DWORD PTR [rsp+0x18],0x0
  40421e:	cmp    DWORD PTR [r12+0x100],0x0
  404227:	je     4042f9 <flatcc_builder_embed_buffer@@Base+0x149>
  40422d:	mov    QWORD PTR [rsp+0x10],0x4
  404236:	lea    rcx,[rsp+0xc]
  40423b:	mov    QWORD PTR [rsp+0x20],rcx
  404240:	mov    QWORD PTR [rsp+0x28],0x4
  404249:	mov    DWORD PTR [rsp+0x18],0x1
  404251:	mov    r8d,0x4
  404257:	mov    edx,0x1
  40425c:	test   rbp,rbp
  40425f:	je     40427f <flatcc_builder_embed_buffer@@Base+0xcf>
  404261:	add    r8,rbp
  404264:	mov    QWORD PTR [rsp+0x10],r8
  404269:	mov    ecx,edx
  40426b:	shl    rcx,0x4
  40426f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404274:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  404279:	inc    edx
  40427b:	mov    DWORD PTR [rsp+0x18],edx
  40427f:	test   eax,eax
  404281:	je     4042aa <flatcc_builder_embed_buffer@@Base+0xfa>
  404283:	mov    eax,eax
  404285:	add    r8,rax
  404288:	mov    QWORD PTR [rsp+0x10],r8
  40428d:	mov    ecx,edx
  40428f:	shl    rcx,0x4
  404293:	lea    rsi,[rip+0x50d6]        # 409370 <flatcc_builder_padding_base@@Base>
  40429a:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40429f:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4042a4:	inc    edx
  4042a6:	mov    DWORD PTR [rsp+0x18],edx
  4042aa:	cmp    r8,0x11
  4042ae:	setb   al
  4042b1:	lea    rcx,[r8-0x10]
  4042b5:	shr    rcx,0x20
  4042b9:	sete   cl
  4042bc:	test   r8d,r8d
  4042bf:	jle    40430c <flatcc_builder_embed_buffer@@Base+0x15c>
  4042c1:	or     al,cl
  4042c3:	je     40430c <flatcc_builder_embed_buffer@@Base+0x15c>
  4042c5:	sub    r14d,r8d
  4042c8:	mov    rdi,QWORD PTR [r12+0x38]
  4042cd:	lea    rsi,[rsp+0x20]
  4042d2:	mov    ecx,r14d
  4042d5:	call   QWORD PTR [r12+0x48]
  4042da:	test   eax,eax
  4042dc:	jne    40432b <flatcc_builder_embed_buffer@@Base+0x17b>
  4042de:	mov    DWORD PTR [r12+0xf0],r14d
  4042e6:	mov    eax,r14d
  4042e9:	add    rsp,0xa0
  4042f0:	pop    rbx
  4042f1:	pop    r12
  4042f3:	pop    r14
  4042f5:	pop    r15
  4042f7:	pop    rbp
  4042f8:	ret    
  4042f9:	xor    edx,edx
  4042fb:	xor    r8d,r8d
  4042fe:	test   rbp,rbp
  404301:	jne    404261 <flatcc_builder_embed_buffer@@Base+0xb1>
  404307:	jmp    40427f <flatcc_builder_embed_buffer@@Base+0xcf>
  40430c:	lea    rdi,[rip+0x64af]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  404313:	lea    rsi,[rip+0x52e8]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40431a:	lea    rcx,[rip+0x6360]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  404321:	mov    edx,0x287
  404326:	call   403070 <__assert_fail@plt>
  40432b:	lea    rdi,[rip+0x6490]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  404332:	lea    rsi,[rip+0x52c9]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404339:	lea    rcx,[rip+0x6341]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  404340:	mov    edx,0x28b
  404345:	call   403070 <__assert_fail@plt>
  40434a:	nop    WORD PTR [rax+rax*1+0x0]
  404350:	push   rbx
  404351:	sub    rsp,0x90
  404358:	mov    rax,rdi
  40435b:	test   dx,dx
  40435e:	jne    404371 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404360:	mov    edi,DWORD PTR [rax+0xec]
  404366:	test   di,di
  404369:	mov    edx,0x1
  40436e:	cmovne edx,edi
  404371:	movzx  ebx,WORD PTR [rsi]
  404374:	mov    edi,0x4
  404379:	cmp    bx,0x4
  40437d:	cmovae edi,ebx
  404380:	jb     40438d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404382:	cmp    di,dx
  404385:	jb     40438d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404387:	test   ecx,ecx
  404389:	jne    4043f4 <flatcc_builder_embed_buffer@@Base+0x244>
  40438b:	jmp    40439a <flatcc_builder_embed_buffer@@Base+0x1ea>
  40438d:	cmp    di,dx
  404390:	cmovb  edi,edx
  404393:	mov    WORD PTR [rsi],di
  404396:	test   ecx,ecx
  404398:	jne    4043f4 <flatcc_builder_embed_buffer@@Base+0x244>
  40439a:	mov    ebx,DWORD PTR [rax+0xf4]
  4043a0:	movzx  r8d,dx
  4043a4:	dec    r8d
  4043a7:	and    r8d,ebx
  4043aa:	je     4043f4 <flatcc_builder_embed_buffer@@Base+0x244>
  4043ac:	mov    QWORD PTR [rsp],r8
  4043b0:	lea    rcx,[rip+0x4fb9]        # 409370 <flatcc_builder_padding_base@@Base>
  4043b7:	mov    QWORD PTR [rsp+0x10],rcx
  4043bc:	mov    QWORD PTR [rsp+0x18],r8
  4043c1:	mov    DWORD PTR [rsp+0x8],0x1
  4043c9:	lea    ecx,[r8+rbx*1]
  4043cd:	mov    DWORD PTR [rax+0xf4],ecx
  4043d3:	test   r8d,r8d
  4043d6:	js     4043fd <flatcc_builder_embed_buffer@@Base+0x24d>
  4043d8:	mov    rdi,QWORD PTR [rax+0x38]
  4043dc:	lea    rsi,[rsp+0x10]
  4043e1:	mov    edx,0x1
  4043e6:	mov    ecx,ebx
  4043e8:	call   QWORD PTR [rax+0x48]
  4043eb:	test   eax,eax
  4043ed:	jne    40441c <flatcc_builder_embed_buffer@@Base+0x26c>
  4043ef:	cmp    ebx,0xffffffff
  4043f2:	je     40443b <flatcc_builder_embed_buffer@@Base+0x28b>
  4043f4:	add    rsp,0x90
  4043fb:	pop    rbx
  4043fc:	ret    
  4043fd:	lea    rdi,[rip+0x63be]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  404404:	lea    rsi,[rip+0x51f7]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40440b:	lea    rcx,[rip+0x632b]        # 40a73d <flatcc_builder_padding_base@@Base+0x13cd>
  404412:	mov    edx,0x2a1
  404417:	call   403070 <__assert_fail@plt>
  40441c:	lea    rdi,[rip+0x639f]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  404423:	lea    rsi,[rip+0x51d8]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40442a:	lea    rcx,[rip+0x630c]        # 40a73d <flatcc_builder_padding_base@@Base+0x13cd>
  404431:	mov    edx,0x2a5
  404436:	call   403070 <__assert_fail@plt>
  40443b:	lea    rdi,[rip+0x6380]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  404442:	lea    rsi,[rip+0x51b9]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404449:	lea    rcx,[rip+0x61ef]        # 40a63f <flatcc_builder_padding_base@@Base+0x12cf>
  404450:	mov    edx,0x2be
  404455:	call   403070 <__assert_fail@plt>
  40445a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404460 <flatcc_builder_create_buffer@@Base>:
  404460:	push   rbp
  404461:	push   r15
  404463:	push   r14
  404465:	push   r13
  404467:	push   r12
  404469:	push   rbx
  40446a:	sub    rsp,0xa8
  404471:	mov    r12d,r9d
  404474:	mov    r14d,ecx
  404477:	mov    rbp,rsi
  40447a:	mov    r13,rdi
  40447d:	mov    WORD PTR [rsp+0xa],r8w
  404483:	mov    DWORD PTR [rsp+0xc],0x0
  40448b:	mov    r15d,r9d
  40448e:	and    r15d,0x1
  404492:	lea    rsi,[rsp+0xa]
  404497:	mov    ecx,r15d
  40449a:	call   404350 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40449f:	movzx  eax,WORD PTR [rsp+0xa]
  4044a4:	cmp    WORD PTR [r13+0xe8],ax
  4044ac:	jae    4044b6 <flatcc_builder_create_buffer@@Base+0x56>
  4044ae:	mov    WORD PTR [r13+0xe8],ax
  4044b6:	movzx  edx,ax
  4044b9:	xor    eax,eax
  4044bb:	test   rbp,rbp
  4044be:	je     4044d8 <flatcc_builder_create_buffer@@Base+0x78>
  4044c0:	mov    ecx,DWORD PTR [rbp+0x0]
  4044c3:	mov    DWORD PTR [rsp+0xc],ecx
  4044c7:	xor    edi,edi
  4044c9:	test   ecx,ecx
  4044cb:	setne  dil
  4044cf:	mov    rsi,rdi
  4044d2:	shl    rsi,0x2
  4044d6:	jmp    4044dc <flatcc_builder_create_buffer@@Base+0x7c>
  4044d8:	xor    edi,edi
  4044da:	xor    esi,esi
  4044dc:	lea    ebx,[r12+r12*1]
  4044e0:	and    ebx,0x4
  4044e3:	mov    ebp,DWORD PTR [r13+0xf0]
  4044ea:	mov    ecx,ebp
  4044ec:	sub    ecx,ebx
  4044ee:	sub    ecx,esi
  4044f0:	add    ecx,0xfffffffc
  4044f3:	dec    edx
  4044f5:	mov    QWORD PTR [rsp+0x18],0x0
  4044fe:	mov    DWORD PTR [rsp+0x20],0x0
  404506:	test   r12b,0x3
  40450a:	je     40453d <flatcc_builder_create_buffer@@Base+0xdd>
  40450c:	mov    QWORD PTR [rsp+0x18],0x4
  404515:	lea    rax,[rsp+0x10]
  40451a:	mov    QWORD PTR [rsp+0x28],rax
  40451f:	mov    QWORD PTR [rsp+0x30],0x4
  404528:	mov    DWORD PTR [rsp+0x20],0x1
  404530:	mov    r8d,0x8
  404536:	mov    eax,0x1
  40453b:	jmp    404543 <flatcc_builder_create_buffer@@Base+0xe3>
  40453d:	mov    r8d,0x4
  404543:	and    ecx,edx
  404545:	mov    QWORD PTR [rsp+0x18],r8
  40454a:	mov    edx,eax
  40454c:	shl    rdx,0x4
  404550:	lea    rbx,[rsp+0x14]
  404555:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  40455a:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404563:	lea    edx,[rax+0x1]
  404566:	mov    DWORD PTR [rsp+0x20],edx
  40456a:	test   dil,dil
  40456d:	je     404595 <flatcc_builder_create_buffer@@Base+0x135>
  40456f:	add    r8,rsi
  404572:	mov    QWORD PTR [rsp+0x18],r8
  404577:	mov    edx,edx
  404579:	shl    rdx,0x4
  40457d:	lea    rdi,[rsp+0xc]
  404582:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404587:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40458c:	or     eax,0x2
  40458f:	mov    DWORD PTR [rsp+0x20],eax
  404593:	mov    edx,eax
  404595:	test   ecx,ecx
  404597:	je     4045c0 <flatcc_builder_create_buffer@@Base+0x160>
  404599:	mov    eax,ecx
  40459b:	add    r8,rax
  40459e:	mov    QWORD PTR [rsp+0x18],r8
  4045a3:	mov    ecx,edx
  4045a5:	shl    rcx,0x4
  4045a9:	lea    rsi,[rip+0x4dc0]        # 409370 <flatcc_builder_padding_base@@Base>
  4045b0:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  4045b5:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  4045ba:	inc    edx
  4045bc:	mov    DWORD PTR [rsp+0x20],edx
  4045c0:	xor    eax,eax
  4045c2:	test   r12b,0x3
  4045c6:	setne  al
  4045c9:	sub    ebp,r8d
  4045cc:	lea    eax,[rbp+rax*4+0x0]
  4045d0:	mov    ecx,r15d
  4045d3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  4045db:	sub    ecx,eax
  4045dd:	mov    DWORD PTR [rsp+0x10],ecx
  4045e1:	sub    r14d,eax
  4045e4:	mov    DWORD PTR [rsp+0x14],r14d
  4045e9:	cmp    r8,0x11
  4045ed:	setb   al
  4045f0:	lea    rcx,[r8-0x10]
  4045f4:	shr    rcx,0x20
  4045f8:	sete   cl
  4045fb:	test   r8d,r8d
  4045fe:	jle    404636 <flatcc_builder_create_buffer@@Base+0x1d6>
  404600:	or     al,cl
  404602:	je     404636 <flatcc_builder_create_buffer@@Base+0x1d6>
  404604:	mov    rdi,QWORD PTR [r13+0x38]
  404608:	lea    rsi,[rsp+0x28]
  40460d:	mov    ecx,ebp
  40460f:	call   QWORD PTR [r13+0x48]
  404613:	test   eax,eax
  404615:	jne    404655 <flatcc_builder_create_buffer@@Base+0x1f5>
  404617:	mov    DWORD PTR [r13+0xf0],ebp
  40461e:	test   ebp,ebp
  404620:	je     404674 <flatcc_builder_create_buffer@@Base+0x214>
  404622:	mov    eax,ebp
  404624:	add    rsp,0xa8
  40462b:	pop    rbx
  40462c:	pop    r12
  40462e:	pop    r13
  404630:	pop    r14
  404632:	pop    r15
  404634:	pop    rbp
  404635:	ret    
  404636:	lea    rdi,[rip+0x6185]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40463d:	lea    rsi,[rip+0x4fbe]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404644:	lea    rcx,[rip+0x6036]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  40464b:	mov    edx,0x287
  404650:	call   403070 <__assert_fail@plt>
  404655:	lea    rdi,[rip+0x6166]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40465c:	lea    rsi,[rip+0x4f9f]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404663:	lea    rcx,[rip+0x6017]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  40466a:	mov    edx,0x28b
  40466f:	call   403070 <__assert_fail@plt>
  404674:	lea    rdi,[rip+0x6147]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40467b:	lea    rsi,[rip+0x4f80]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404682:	lea    rcx,[rip+0x50ce]        # 409757 <flatcc_builder_padding_base@@Base+0x3e7>
  404689:	mov    edx,0x304
  40468e:	call   403070 <__assert_fail@plt>
  404693:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40469d:	nop    DWORD PTR [rax]

00000000004046a0 <flatcc_builder_create_struct@@Base>:
  4046a0:	push   rbp
  4046a1:	push   rbx
  4046a2:	sub    rsp,0x98
  4046a9:	test   cx,cx
  4046ac:	je     4047a2 <flatcc_builder_create_struct@@Base+0x102>
  4046b2:	mov    r8,rdx
  4046b5:	mov    rbx,rdi
  4046b8:	cmp    WORD PTR [rdi+0xe8],cx
  4046bf:	jae    4046c8 <flatcc_builder_create_struct@@Base+0x28>
  4046c1:	mov    WORD PTR [rbx+0xe8],cx
  4046c8:	mov    ebp,DWORD PTR [rbx+0xf0]
  4046ce:	mov    edx,ebp
  4046d0:	sub    edx,r8d
  4046d3:	movzx  eax,cx
  4046d6:	dec    eax
  4046d8:	and    eax,edx
  4046da:	mov    QWORD PTR [rsp+0x8],0x0
  4046e3:	mov    DWORD PTR [rsp+0x10],0x0
  4046eb:	test   r8,r8
  4046ee:	je     40477b <flatcc_builder_create_struct@@Base+0xdb>
  4046f4:	mov    QWORD PTR [rsp+0x8],r8
  4046f9:	mov    QWORD PTR [rsp+0x18],rsi
  4046fe:	mov    QWORD PTR [rsp+0x20],r8
  404703:	mov    DWORD PTR [rsp+0x10],0x1
  40470b:	mov    edx,0x1
  404710:	test   eax,eax
  404712:	je     404739 <flatcc_builder_create_struct@@Base+0x99>
  404714:	add    r8,rax
  404717:	mov    QWORD PTR [rsp+0x8],r8
  40471c:	mov    ecx,edx
  40471e:	shl    rcx,0x4
  404722:	lea    rsi,[rip+0x4c47]        # 409370 <flatcc_builder_padding_base@@Base>
  404729:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40472e:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  404733:	inc    edx
  404735:	mov    DWORD PTR [rsp+0x10],edx
  404739:	cmp    r8,0x11
  40473d:	setb   al
  404740:	lea    rcx,[r8-0x10]
  404744:	shr    rcx,0x20
  404748:	sete   cl
  40474b:	test   r8d,r8d
  40474e:	jle    404783 <flatcc_builder_create_struct@@Base+0xe3>
  404750:	or     al,cl
  404752:	je     404783 <flatcc_builder_create_struct@@Base+0xe3>
  404754:	sub    ebp,r8d
  404757:	mov    rdi,QWORD PTR [rbx+0x38]
  40475b:	lea    rsi,[rsp+0x18]
  404760:	mov    ecx,ebp
  404762:	call   QWORD PTR [rbx+0x48]
  404765:	test   eax,eax
  404767:	jne    4047c1 <flatcc_builder_create_struct@@Base+0x121>
  404769:	mov    DWORD PTR [rbx+0xf0],ebp
  40476f:	mov    eax,ebp
  404771:	add    rsp,0x98
  404778:	pop    rbx
  404779:	pop    rbp
  40477a:	ret    
  40477b:	xor    edx,edx
  40477d:	test   eax,eax
  40477f:	jne    404714 <flatcc_builder_create_struct@@Base+0x74>
  404781:	jmp    404739 <flatcc_builder_create_struct@@Base+0x99>
  404783:	lea    rdi,[rip+0x6038]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40478a:	lea    rsi,[rip+0x4e71]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404791:	lea    rcx,[rip+0x5ee9]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  404798:	mov    edx,0x287
  40479d:	call   403070 <__assert_fail@plt>
  4047a2:	lea    rdi,[rip+0x5031]        # 4097da <flatcc_builder_padding_base@@Base+0x46a>
  4047a9:	lea    rsi,[rip+0x4e52]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4047b0:	lea    rcx,[rip+0x502e]        # 4097e5 <flatcc_builder_padding_base@@Base+0x475>
  4047b7:	mov    edx,0x30f
  4047bc:	call   403070 <__assert_fail@plt>
  4047c1:	lea    rdi,[rip+0x5ffa]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4047c8:	lea    rsi,[rip+0x4e33]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4047cf:	lea    rcx,[rip+0x5eab]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  4047d6:	mov    edx,0x28b
  4047db:	call   403070 <__assert_fail@plt>

00000000004047e0 <flatcc_builder_start_buffer@@Base>:
  4047e0:	push   rbp
  4047e1:	push   r15
  4047e3:	push   r14
  4047e5:	push   rbx
  4047e6:	push   rax
  4047e7:	mov    r15d,ecx
  4047ea:	mov    ebp,edx
  4047ec:	mov    r14,rsi
  4047ef:	mov    rbx,rdi
  4047f2:	movzx  esi,WORD PTR [rdi+0xe8]
  4047f9:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  4047fe:	mov    ecx,eax
  404800:	mov    eax,0xffffffff
  404805:	test   ecx,ecx
  404807:	jne    4048ac <flatcc_builder_start_buffer@@Base+0xcc>
  40480d:	mov    WORD PTR [rbx+0xe8],0x1
  404816:	movzx  eax,WORD PTR [rbx+0xec]
  40481d:	mov    rcx,QWORD PTR [rbx+0x30]
  404821:	mov    WORD PTR [rcx+0x22],ax
  404825:	mov    WORD PTR [rbx+0xec],bp
  40482c:	movzx  eax,WORD PTR [rbx+0x10c]
  404833:	mov    rcx,QWORD PTR [rbx+0x30]
  404837:	mov    WORD PTR [rcx+0x20],ax
  40483b:	mov    WORD PTR [rbx+0x10c],r15w
  404843:	mov    eax,DWORD PTR [rbx+0xf8]
  404849:	mov    rcx,QWORD PTR [rbx+0x30]
  40484d:	mov    DWORD PTR [rcx+0x14],eax
  404850:	mov    eax,DWORD PTR [rbx+0x100]
  404856:	mov    rcx,QWORD PTR [rbx+0x30]
  40485a:	mov    DWORD PTR [rcx+0x1c],eax
  40485d:	mov    eax,DWORD PTR [rbx+0xf0]
  404863:	mov    DWORD PTR [rbx+0xf8],eax
  404869:	mov    eax,DWORD PTR [rbx+0xfc]
  40486f:	lea    ecx,[rax+0x1]
  404872:	mov    DWORD PTR [rbx+0xfc],ecx
  404878:	mov    DWORD PTR [rbx+0x100],eax
  40487e:	mov    eax,DWORD PTR [rbx+0x110]
  404884:	mov    rcx,QWORD PTR [rbx+0x30]
  404888:	mov    DWORD PTR [rcx+0x10],eax
  40488b:	test   r14,r14
  40488e:	jne    404897 <flatcc_builder_start_buffer@@Base+0xb7>
  404890:	lea    r14,[rip+0x4ad9]        # 409370 <flatcc_builder_padding_base@@Base>
  404897:	mov    eax,DWORD PTR [r14]
  40489a:	mov    DWORD PTR [rbx+0x110],eax
  4048a0:	mov    rax,QWORD PTR [rbx+0x30]
  4048a4:	mov    WORD PTR [rax+0xe],0x1
  4048aa:	xor    eax,eax
  4048ac:	add    rsp,0x8
  4048b0:	pop    rbx
  4048b1:	pop    r14
  4048b3:	pop    r15
  4048b5:	pop    rbp
  4048b6:	ret    
  4048b7:	nop    WORD PTR [rax+rax*1+0x0]
  4048c0:	push   rbp
  4048c1:	push   r15
  4048c3:	push   r14
  4048c5:	push   rbx
  4048c6:	push   rax
  4048c7:	mov    r14d,esi
  4048ca:	mov    rbx,rdi
  4048cd:	movsxd rbp,DWORD PTR [rdi+0x104]
  4048d4:	lea    eax,[rbp+0x1]
  4048d7:	mov    DWORD PTR [rdi+0x104],eax
  4048dd:	cmp    ebp,DWORD PTR [rdi+0x108]
  4048e3:	jge    4048f6 <flatcc_builder_start_buffer@@Base+0x116>
  4048e5:	mov    rcx,QWORD PTR [rbx+0x30]
  4048e9:	add    rcx,0x24
  4048ed:	mov    QWORD PTR [rbx+0x30],rcx
  4048f1:	jmp    404989 <flatcc_builder_start_buffer@@Base+0x1a9>
  4048f6:	mov    eax,DWORD PTR [rbx+0x120]
  4048fc:	mov    r15d,0xffffffff
  404902:	test   eax,eax
  404904:	jle    40490e <flatcc_builder_start_buffer@@Base+0x12e>
  404906:	cmp    ebp,eax
  404908:	jge    4049c4 <flatcc_builder_start_buffer@@Base+0x1e4>
  40490e:	shl    rbp,0x2
  404912:	lea    rdx,[rbp*8+0x24]
  40491a:	add    rdx,rbp
  40491d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404924:	jbe    404944 <flatcc_builder_start_buffer@@Base+0x164>
  404926:	lea    rsi,[rbx+0x98]
  40492d:	mov    rdi,QWORD PTR [rbx+0x40]
  404931:	xor    ecx,ecx
  404933:	mov    r8d,0x4
  404939:	call   QWORD PTR [rbx+0x50]
  40493c:	test   eax,eax
  40493e:	jne    4049d2 <flatcc_builder_start_buffer@@Base+0x1f2>
  404944:	lea    rcx,[rbp*8+0x0]
  40494c:	add    rcx,rbp
  40494f:	add    rcx,QWORD PTR [rbx+0x98]
  404956:	mov    QWORD PTR [rbx+0x30],rcx
  40495a:	je     4049c4 <flatcc_builder_start_buffer@@Base+0x1e4>
  40495c:	movabs rax,0xe38e38e38e38e38f
  404966:	mul    QWORD PTR [rbx+0xa0]
  40496d:	shr    rdx,0x5
  404971:	mov    eax,DWORD PTR [rbx+0x120]
  404977:	cmp    eax,edx
  404979:	mov    esi,edx
  40497b:	cmovle esi,eax
  40497e:	test   eax,eax
  404980:	cmovle esi,edx
  404983:	mov    DWORD PTR [rbx+0x108],esi
  404989:	mov    eax,DWORD PTR [rbx+0x20]
  40498c:	mov    DWORD PTR [rcx+0x8],eax
  40498f:	movzx  edx,WORD PTR [rbx+0xea]
  404996:	mov    WORD PTR [rcx+0xc],dx
  40499a:	mov    WORD PTR [rbx+0xea],r14w
  4049a2:	mov    edx,DWORD PTR [rbx+0x28]
  4049a5:	mov    DWORD PTR [rcx],edx
  4049a7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4049ae:	lea    eax,[rax+rdx*1]
  4049b1:	add    eax,0x7
  4049b4:	and    eax,0xfffffff8
  4049b7:	mov    DWORD PTR [rbx+0x28],eax
  4049ba:	mov    DWORD PTR [rbx+0x20],0x0
  4049c1:	xor    r15d,r15d
  4049c4:	mov    eax,r15d
  4049c7:	add    rsp,0x8
  4049cb:	pop    rbx
  4049cc:	pop    r14
  4049ce:	pop    r15
  4049d0:	pop    rbp
  4049d1:	ret    
  4049d2:	lea    rdi,[rip+0x5de9]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4049d9:	lea    rsi,[rip+0x4c22]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4049e0:	lea    rcx,[rip+0x5c15]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  4049e7:	mov    edx,0x134
  4049ec:	call   403070 <__assert_fail@plt>
  4049f1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4049fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404a00 <flatcc_builder_end_buffer@@Base>:
  404a00:	push   rbp
  404a01:	push   rbx
  404a02:	push   rax
  404a03:	mov    rax,QWORD PTR [rdi+0x30]
  404a07:	cmp    WORD PTR [rax+0xe],0x1
  404a0c:	jne    404b09 <flatcc_builder_end_buffer@@Base+0x109>
  404a12:	mov    ecx,esi
  404a14:	mov    rbx,rdi
  404a17:	movzx  eax,WORD PTR [rdi+0x10c]
  404a1e:	and    eax,0x2
  404a21:	xor    r9d,r9d
  404a24:	cmp    DWORD PTR [rdi+0x100],0x0
  404a2b:	setne  r9b
  404a2f:	or     r9d,eax
  404a32:	movzx  edi,WORD PTR [rdi+0xe8]
  404a39:	movzx  eax,WORD PTR [rbx+0xec]
  404a40:	cmp    di,ax
  404a43:	jae    404a4e <flatcc_builder_end_buffer@@Base+0x4e>
  404a45:	mov    WORD PTR [rbx+0xe8],ax
  404a4c:	mov    edi,eax
  404a4e:	lea    rsi,[rbx+0x110]
  404a55:	movzx  edx,ax
  404a58:	movzx  r8d,di
  404a5c:	mov    rdi,rbx
  404a5f:	call   404460 <flatcc_builder_create_buffer@@Base>
  404a64:	mov    ebp,eax
  404a66:	test   eax,eax
  404a68:	je     404b00 <flatcc_builder_end_buffer@@Base+0x100>
  404a6e:	mov    rax,QWORD PTR [rbx+0x30]
  404a72:	mov    ecx,DWORD PTR [rax+0x14]
  404a75:	mov    DWORD PTR [rbx+0xf8],ecx
  404a7b:	mov    ecx,DWORD PTR [rax+0x1c]
  404a7e:	mov    DWORD PTR [rbx+0x100],ecx
  404a84:	mov    ecx,DWORD PTR [rax+0x10]
  404a87:	mov    DWORD PTR [rbx+0x110],ecx
  404a8d:	movzx  eax,WORD PTR [rax+0x20]
  404a91:	mov    WORD PTR [rbx+0x10c],ax
  404a98:	mov    rdi,QWORD PTR [rbx+0x18]
  404a9c:	mov    edx,DWORD PTR [rbx+0x20]
  404a9f:	xor    esi,esi
  404aa1:	call   403080 <memset@plt>
  404aa6:	mov    rax,QWORD PTR [rbx+0x30]
  404aaa:	mov    ecx,DWORD PTR [rax+0x8]
  404aad:	mov    DWORD PTR [rbx+0x20],ecx
  404ab0:	mov    ecx,DWORD PTR [rax]
  404ab2:	mov    DWORD PTR [rbx+0x28],ecx
  404ab5:	mov    edx,DWORD PTR [rax+0x4]
  404ab8:	mov    rsi,rcx
  404abb:	add    rsi,QWORD PTR [rbx+0x68]
  404abf:	mov    QWORD PTR [rbx+0x18],rsi
  404ac3:	mov    esi,DWORD PTR [rbx+0x70]
  404ac6:	sub    esi,ecx
  404ac8:	cmp    esi,edx
  404aca:	cmova  esi,edx
  404acd:	mov    DWORD PTR [rbx+0x24],esi
  404ad0:	movzx  ecx,WORD PTR [rbx+0xea]
  404ad7:	cmp    WORD PTR [rbx+0xe8],cx
  404ade:	jae    404ae7 <flatcc_builder_end_buffer@@Base+0xe7>
  404ae0:	mov    WORD PTR [rbx+0xe8],cx
  404ae7:	movzx  ecx,WORD PTR [rax+0xc]
  404aeb:	mov    WORD PTR [rbx+0xea],cx
  404af2:	add    rax,0xffffffffffffffdc
  404af6:	mov    QWORD PTR [rbx+0x30],rax
  404afa:	dec    DWORD PTR [rbx+0x104]
  404b00:	mov    eax,ebp
  404b02:	add    rsp,0x8
  404b06:	pop    rbx
  404b07:	pop    rbp
  404b08:	ret    
  404b09:	lea    rdi,[rip+0x4d3b]        # 40984b <flatcc_builder_padding_base@@Base+0x4db>
  404b10:	lea    rsi,[rip+0x4aeb]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404b17:	lea    rcx,[rip+0x4d59]        # 409877 <flatcc_builder_padding_base@@Base+0x507>
  404b1e:	mov    edx,0x346
  404b23:	call   403070 <__assert_fail@plt>
  404b28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404b30 <flatcc_builder_start_struct@@Base>:
  404b30:	push   r15
  404b32:	push   r14
  404b34:	push   rbx
  404b35:	mov    r14,rsi
  404b38:	mov    rbx,rdi
  404b3b:	mov    esi,edx
  404b3d:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  404b42:	test   eax,eax
  404b44:	je     404b4d <flatcc_builder_start_struct@@Base+0x1d>
  404b46:	xor    eax,eax
  404b48:	jmp    404be1 <flatcc_builder_start_struct@@Base+0xb1>
  404b4d:	mov    rdx,QWORD PTR [rbx+0x30]
  404b51:	mov    WORD PTR [rdx+0xe],0x2
  404b57:	mov    ecx,DWORD PTR [rbx+0x28]
  404b5a:	mov    esi,DWORD PTR [rbx+0x70]
  404b5d:	mov    rax,QWORD PTR [rbx+0x68]
  404b61:	add    rax,rcx
  404b64:	mov    QWORD PTR [rbx+0x18],rax
  404b68:	sub    esi,ecx
  404b6a:	cmp    esi,0xfffffffc
  404b6d:	mov    edi,0xfffffffc
  404b72:	cmovb  edi,esi
  404b75:	mov    DWORD PTR [rbx+0x24],edi
  404b78:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404b7f:	mov    r15d,DWORD PTR [rbx+0x20]
  404b83:	add    r14d,r15d
  404b86:	mov    DWORD PTR [rbx+0x20],r14d
  404b8a:	cmp    r14d,edi
  404b8d:	jb     404bde <flatcc_builder_start_struct@@Base+0xae>
  404b8f:	inc    r14d
  404b92:	lea    rsi,[rbx+0x68]
  404b96:	mov    rdi,QWORD PTR [rbx+0x40]
  404b9a:	add    r14,rcx
  404b9d:	mov    rdx,r14
  404ba0:	mov    ecx,0x1
  404ba5:	mov    r8d,0x1
  404bab:	call   QWORD PTR [rbx+0x50]
  404bae:	test   eax,eax
  404bb0:	jne    404b46 <flatcc_builder_start_struct@@Base+0x16>
  404bb2:	mov    ecx,DWORD PTR [rbx+0x28]
  404bb5:	mov    rax,rcx
  404bb8:	add    rax,QWORD PTR [rbx+0x68]
  404bbc:	mov    QWORD PTR [rbx+0x18],rax
  404bc0:	mov    edx,DWORD PTR [rbx+0x70]
  404bc3:	sub    edx,ecx
  404bc5:	cmp    edx,0xfffffffc
  404bc8:	mov    ecx,0xfffffffc
  404bcd:	cmovb  ecx,edx
  404bd0:	mov    DWORD PTR [rbx+0x24],ecx
  404bd3:	mov    rcx,QWORD PTR [rbx+0x30]
  404bd7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404bde:	add    rax,r15
  404be1:	pop    rbx
  404be2:	pop    r14
  404be4:	pop    r15
  404be6:	ret    
  404be7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404bf0 <flatcc_builder_struct_edit@@Base>:
  404bf0:	mov    rax,QWORD PTR [rdi+0x18]
  404bf4:	ret    
  404bf5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404bff:	nop

0000000000404c00 <flatcc_builder_end_struct@@Base>:
  404c00:	push   rbp
  404c01:	push   rbx
  404c02:	push   rax
  404c03:	mov    rax,QWORD PTR [rdi+0x30]
  404c07:	cmp    WORD PTR [rax+0xe],0x2
  404c0c:	jne    404c9f <flatcc_builder_end_struct@@Base+0x9f>
  404c12:	mov    rbx,rdi
  404c15:	mov    rsi,QWORD PTR [rdi+0x18]
  404c19:	mov    edx,DWORD PTR [rdi+0x20]
  404c1c:	movzx  ecx,WORD PTR [rdi+0xea]
  404c23:	call   4046a0 <flatcc_builder_create_struct@@Base>
  404c28:	mov    ebp,eax
  404c2a:	test   eax,eax
  404c2c:	je     404c96 <flatcc_builder_end_struct@@Base+0x96>
  404c2e:	mov    rdi,QWORD PTR [rbx+0x18]
  404c32:	mov    edx,DWORD PTR [rbx+0x20]
  404c35:	xor    esi,esi
  404c37:	call   403080 <memset@plt>
  404c3c:	mov    rax,QWORD PTR [rbx+0x30]
  404c40:	mov    ecx,DWORD PTR [rax+0x8]
  404c43:	mov    DWORD PTR [rbx+0x20],ecx
  404c46:	mov    ecx,DWORD PTR [rax]
  404c48:	mov    DWORD PTR [rbx+0x28],ecx
  404c4b:	mov    edx,DWORD PTR [rax+0x4]
  404c4e:	mov    rsi,rcx
  404c51:	add    rsi,QWORD PTR [rbx+0x68]
  404c55:	mov    QWORD PTR [rbx+0x18],rsi
  404c59:	mov    esi,DWORD PTR [rbx+0x70]
  404c5c:	sub    esi,ecx
  404c5e:	cmp    esi,edx
  404c60:	cmova  esi,edx
  404c63:	mov    DWORD PTR [rbx+0x24],esi
  404c66:	movzx  ecx,WORD PTR [rbx+0xea]
  404c6d:	cmp    WORD PTR [rbx+0xe8],cx
  404c74:	jae    404c7d <flatcc_builder_end_struct@@Base+0x7d>
  404c76:	mov    WORD PTR [rbx+0xe8],cx
  404c7d:	movzx  ecx,WORD PTR [rax+0xc]
  404c81:	mov    WORD PTR [rbx+0xea],cx
  404c88:	add    rax,0xffffffffffffffdc
  404c8c:	mov    QWORD PTR [rbx+0x30],rax
  404c90:	dec    DWORD PTR [rbx+0x104]
  404c96:	mov    eax,ebp
  404c98:	add    rsp,0x8
  404c9c:	pop    rbx
  404c9d:	pop    rbp
  404c9e:	ret    
  404c9f:	lea    rdi,[rip+0x4c2a]        # 4098d0 <flatcc_builder_padding_base@@Base+0x560>
  404ca6:	lea    rsi,[rip+0x4955]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404cad:	lea    rcx,[rip+0x4c48]        # 4098fc <flatcc_builder_padding_base@@Base+0x58c>
  404cb4:	mov    edx,0x368
  404cb9:	call   403070 <__assert_fail@plt>
  404cbe:	xchg   ax,ax

0000000000404cc0 <flatcc_builder_extend_vector@@Base>:
  404cc0:	push   r14
  404cc2:	push   rbx
  404cc3:	push   rax
  404cc4:	mov    rax,QWORD PTR [rdi+0x30]
  404cc8:	mov    ecx,DWORD PTR [rax+0x14]
  404ccb:	add    ecx,esi
  404ccd:	jb     404d5f <flatcc_builder_extend_vector@@Base+0x9f>
  404cd3:	cmp    ecx,DWORD PTR [rax+0x18]
  404cd6:	ja     404d5f <flatcc_builder_extend_vector@@Base+0x9f>
  404cdc:	mov    rbx,rdi
  404cdf:	mov    DWORD PTR [rax+0x14],ecx
  404ce2:	mov    rax,QWORD PTR [rdi+0x30]
  404ce6:	imul   esi,DWORD PTR [rax+0x10]
  404cea:	mov    r14d,DWORD PTR [rdi+0x20]
  404cee:	add    esi,r14d
  404cf1:	mov    DWORD PTR [rdi+0x20],esi
  404cf4:	cmp    esi,DWORD PTR [rdi+0x24]
  404cf7:	jae    404cff <flatcc_builder_extend_vector@@Base+0x3f>
  404cf9:	mov    rax,QWORD PTR [rbx+0x18]
  404cfd:	jmp    404d54 <flatcc_builder_extend_vector@@Base+0x94>
  404cff:	inc    esi
  404d01:	lea    rax,[rbx+0x68]
  404d05:	mov    rdi,QWORD PTR [rbx+0x40]
  404d09:	mov    edx,DWORD PTR [rbx+0x28]
  404d0c:	add    rdx,rsi
  404d0f:	mov    rsi,rax
  404d12:	mov    ecx,0x1
  404d17:	mov    r8d,0x1
  404d1d:	call   QWORD PTR [rbx+0x50]
  404d20:	test   eax,eax
  404d22:	je     404d28 <flatcc_builder_extend_vector@@Base+0x68>
  404d24:	xor    eax,eax
  404d26:	jmp    404d57 <flatcc_builder_extend_vector@@Base+0x97>
  404d28:	mov    ecx,DWORD PTR [rbx+0x28]
  404d2b:	mov    rax,rcx
  404d2e:	add    rax,QWORD PTR [rbx+0x68]
  404d32:	mov    QWORD PTR [rbx+0x18],rax
  404d36:	mov    edx,DWORD PTR [rbx+0x70]
  404d39:	sub    edx,ecx
  404d3b:	cmp    edx,0xfffffffc
  404d3e:	mov    ecx,0xfffffffc
  404d43:	cmovb  ecx,edx
  404d46:	mov    DWORD PTR [rbx+0x24],ecx
  404d49:	mov    rcx,QWORD PTR [rbx+0x30]
  404d4d:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404d54:	add    rax,r14
  404d57:	add    rsp,0x8
  404d5b:	pop    rbx
  404d5c:	pop    r14
  404d5e:	ret    
  404d5f:	lea    rdi,[rip+0x5965]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  404d66:	lea    rsi,[rip+0x4895]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404d6d:	lea    rcx,[rip+0x5972]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  404d74:	mov    edx,0x37c
  404d79:	call   403070 <__assert_fail@plt>
  404d7e:	xchg   ax,ax

0000000000404d80 <flatcc_builder_vector_push@@Base>:
  404d80:	push   r15
  404d82:	push   r14
  404d84:	push   r13
  404d86:	push   r12
  404d88:	push   rbx
  404d89:	mov    rax,QWORD PTR [rdi+0x30]
  404d8d:	cmp    WORD PTR [rax+0xe],0x4
  404d92:	jne    404e45 <flatcc_builder_vector_push@@Base+0xc5>
  404d98:	mov    ecx,DWORD PTR [rax+0x14]
  404d9b:	cmp    ecx,DWORD PTR [rax+0x18]
  404d9e:	ja     404e64 <flatcc_builder_vector_push@@Base+0xe4>
  404da4:	mov    r14,rsi
  404da7:	mov    rbx,rdi
  404daa:	inc    ecx
  404dac:	mov    DWORD PTR [rax+0x14],ecx
  404daf:	mov    rax,QWORD PTR [rdi+0x30]
  404db3:	mov    r15d,DWORD PTR [rax+0x10]
  404db7:	mov    r13d,DWORD PTR [rdi+0x20]
  404dbb:	lea    eax,[r15+r13*1]
  404dbf:	mov    DWORD PTR [rdi+0x20],eax
  404dc2:	cmp    eax,DWORD PTR [rdi+0x24]
  404dc5:	jae    404dd2 <flatcc_builder_vector_push@@Base+0x52>
  404dc7:	mov    r12,QWORD PTR [rbx+0x18]
  404dcb:	add    r12,r13
  404dce:	jne    404e2a <flatcc_builder_vector_push@@Base+0xaa>
  404dd0:	jmp    404df4 <flatcc_builder_vector_push@@Base+0x74>
  404dd2:	inc    eax
  404dd4:	lea    rsi,[rbx+0x68]
  404dd8:	mov    rdi,QWORD PTR [rbx+0x40]
  404ddc:	mov    edx,DWORD PTR [rbx+0x28]
  404ddf:	add    rdx,rax
  404de2:	mov    ecx,0x1
  404de7:	mov    r8d,0x1
  404ded:	call   QWORD PTR [rbx+0x50]
  404df0:	test   eax,eax
  404df2:	je     404df9 <flatcc_builder_vector_push@@Base+0x79>
  404df4:	xor    r12d,r12d
  404df7:	jmp    404e38 <flatcc_builder_vector_push@@Base+0xb8>
  404df9:	mov    eax,DWORD PTR [rbx+0x28]
  404dfc:	mov    r12,rax
  404dff:	add    r12,QWORD PTR [rbx+0x68]
  404e03:	mov    QWORD PTR [rbx+0x18],r12
  404e07:	mov    ecx,DWORD PTR [rbx+0x70]
  404e0a:	sub    ecx,eax
  404e0c:	cmp    ecx,0xfffffffc
  404e0f:	mov    eax,0xfffffffc
  404e14:	cmovb  eax,ecx
  404e17:	mov    DWORD PTR [rbx+0x24],eax
  404e1a:	mov    rax,QWORD PTR [rbx+0x30]
  404e1e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404e25:	add    r12,r13
  404e28:	je     404df4 <flatcc_builder_vector_push@@Base+0x74>
  404e2a:	mov    rdi,r12
  404e2d:	mov    rsi,r14
  404e30:	mov    rdx,r15
  404e33:	call   4030c0 <memcpy@plt>
  404e38:	mov    rax,r12
  404e3b:	pop    rbx
  404e3c:	pop    r12
  404e3e:	pop    r13
  404e40:	pop    r14
  404e42:	pop    r15
  404e44:	ret    
  404e45:	lea    rdi,[rip+0x4af3]        # 40993f <flatcc_builder_padding_base@@Base+0x5cf>
  404e4c:	lea    rsi,[rip+0x47af]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404e53:	lea    rcx,[rip+0x4b11]        # 40996b <flatcc_builder_padding_base@@Base+0x5fb>
  404e5a:	mov    edx,0x38b
  404e5f:	call   403070 <__assert_fail@plt>
  404e64:	lea    rdi,[rip+0x4b43]        # 4099ae <flatcc_builder_padding_base@@Base+0x63e>
  404e6b:	lea    rsi,[rip+0x4790]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404e72:	lea    rcx,[rip+0x4af2]        # 40996b <flatcc_builder_padding_base@@Base+0x5fb>
  404e79:	mov    edx,0x38c
  404e7e:	call   403070 <__assert_fail@plt>
  404e83:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404e8d:	nop    DWORD PTR [rax]

0000000000404e90 <flatcc_builder_append_vector@@Base>:
  404e90:	push   r15
  404e92:	push   r14
  404e94:	push   r13
  404e96:	push   r12
  404e98:	push   rbx
  404e99:	mov    rax,QWORD PTR [rdi+0x30]
  404e9d:	cmp    WORD PTR [rax+0xe],0x4
  404ea2:	jne    404f7f <flatcc_builder_append_vector@@Base+0xef>
  404ea8:	mov    r15,rdx
  404eab:	mov    ecx,DWORD PTR [rax+0x14]
  404eae:	add    ecx,r15d
  404eb1:	jb     404f60 <flatcc_builder_append_vector@@Base+0xd0>
  404eb7:	cmp    ecx,DWORD PTR [rax+0x18]
  404eba:	ja     404f60 <flatcc_builder_append_vector@@Base+0xd0>
  404ec0:	mov    r14,rsi
  404ec3:	mov    rbx,rdi
  404ec6:	mov    DWORD PTR [rax+0x14],ecx
  404ec9:	mov    rax,QWORD PTR [rdi+0x30]
  404ecd:	imul   r15d,DWORD PTR [rax+0x10]
  404ed2:	mov    r13d,DWORD PTR [rdi+0x20]
  404ed6:	lea    eax,[r15+r13*1]
  404eda:	mov    DWORD PTR [rdi+0x20],eax
  404edd:	cmp    eax,DWORD PTR [rdi+0x24]
  404ee0:	jae    404eed <flatcc_builder_append_vector@@Base+0x5d>
  404ee2:	mov    r12,QWORD PTR [rbx+0x18]
  404ee6:	add    r12,r13
  404ee9:	jne    404f45 <flatcc_builder_append_vector@@Base+0xb5>
  404eeb:	jmp    404f0f <flatcc_builder_append_vector@@Base+0x7f>
  404eed:	inc    eax
  404eef:	lea    rsi,[rbx+0x68]
  404ef3:	mov    rdi,QWORD PTR [rbx+0x40]
  404ef7:	mov    edx,DWORD PTR [rbx+0x28]
  404efa:	add    rdx,rax
  404efd:	mov    ecx,0x1
  404f02:	mov    r8d,0x1
  404f08:	call   QWORD PTR [rbx+0x50]
  404f0b:	test   eax,eax
  404f0d:	je     404f14 <flatcc_builder_append_vector@@Base+0x84>
  404f0f:	xor    r12d,r12d
  404f12:	jmp    404f53 <flatcc_builder_append_vector@@Base+0xc3>
  404f14:	mov    eax,DWORD PTR [rbx+0x28]
  404f17:	mov    r12,rax
  404f1a:	add    r12,QWORD PTR [rbx+0x68]
  404f1e:	mov    QWORD PTR [rbx+0x18],r12
  404f22:	mov    ecx,DWORD PTR [rbx+0x70]
  404f25:	sub    ecx,eax
  404f27:	cmp    ecx,0xfffffffc
  404f2a:	mov    eax,0xfffffffc
  404f2f:	cmovb  eax,ecx
  404f32:	mov    DWORD PTR [rbx+0x24],eax
  404f35:	mov    rax,QWORD PTR [rbx+0x30]
  404f39:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404f40:	add    r12,r13
  404f43:	je     404f0f <flatcc_builder_append_vector@@Base+0x7f>
  404f45:	mov    edx,r15d
  404f48:	mov    rdi,r12
  404f4b:	mov    rsi,r14
  404f4e:	call   4030c0 <memcpy@plt>
  404f53:	mov    rax,r12
  404f56:	pop    rbx
  404f57:	pop    r12
  404f59:	pop    r13
  404f5b:	pop    r14
  404f5d:	pop    r15
  404f5f:	ret    
  404f60:	lea    rdi,[rip+0x5764]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  404f67:	lea    rsi,[rip+0x4694]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404f6e:	lea    rcx,[rip+0x5771]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  404f75:	mov    edx,0x37c
  404f7a:	call   403070 <__assert_fail@plt>
  404f7f:	lea    rdi,[rip+0x49b9]        # 40993f <flatcc_builder_padding_base@@Base+0x5cf>
  404f86:	lea    rsi,[rip+0x4675]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  404f8d:	lea    rcx,[rip+0x4a57]        # 4099eb <flatcc_builder_padding_base@@Base+0x67b>
  404f94:	mov    edx,0x393
  404f99:	call   403070 <__assert_fail@plt>
  404f9e:	xchg   ax,ax

0000000000404fa0 <flatcc_builder_extend_offset_vector@@Base>:
  404fa0:	push   r14
  404fa2:	push   rbx
  404fa3:	push   rax
  404fa4:	mov    rax,QWORD PTR [rdi+0x30]
  404fa8:	mov    ecx,DWORD PTR [rax+0x14]
  404fab:	add    ecx,esi
  404fad:	jb     405034 <flatcc_builder_extend_offset_vector@@Base+0x94>
  404fb3:	cmp    ecx,0x40000000
  404fb9:	jae    405034 <flatcc_builder_extend_offset_vector@@Base+0x94>
  404fbb:	mov    rbx,rdi
  404fbe:	mov    DWORD PTR [rax+0x14],ecx
  404fc1:	mov    r14d,DWORD PTR [rdi+0x20]
  404fc5:	lea    eax,[r14+rsi*4]
  404fc9:	mov    DWORD PTR [rdi+0x20],eax
  404fcc:	cmp    eax,DWORD PTR [rdi+0x24]
  404fcf:	jae    404fd7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  404fd1:	mov    rax,QWORD PTR [rbx+0x18]
  404fd5:	jmp    405029 <flatcc_builder_extend_offset_vector@@Base+0x89>
  404fd7:	inc    eax
  404fd9:	lea    rsi,[rbx+0x68]
  404fdd:	mov    rdi,QWORD PTR [rbx+0x40]
  404fe1:	mov    edx,DWORD PTR [rbx+0x28]
  404fe4:	add    rdx,rax
  404fe7:	mov    ecx,0x1
  404fec:	mov    r8d,0x1
  404ff2:	call   QWORD PTR [rbx+0x50]
  404ff5:	test   eax,eax
  404ff7:	je     404ffd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  404ff9:	xor    eax,eax
  404ffb:	jmp    40502c <flatcc_builder_extend_offset_vector@@Base+0x8c>
  404ffd:	mov    ecx,DWORD PTR [rbx+0x28]
  405000:	mov    rax,rcx
  405003:	add    rax,QWORD PTR [rbx+0x68]
  405007:	mov    QWORD PTR [rbx+0x18],rax
  40500b:	mov    edx,DWORD PTR [rbx+0x70]
  40500e:	sub    edx,ecx
  405010:	cmp    edx,0xfffffffc
  405013:	mov    ecx,0xfffffffc
  405018:	cmovb  ecx,edx
  40501b:	mov    DWORD PTR [rbx+0x24],ecx
  40501e:	mov    rcx,QWORD PTR [rbx+0x30]
  405022:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405029:	add    rax,r14
  40502c:	add    rsp,0x8
  405030:	pop    rbx
  405031:	pop    r14
  405033:	ret    
  405034:	lea    rdi,[rip+0x5690]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  40503b:	lea    rsi,[rip+0x45c0]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405042:	lea    rcx,[rip+0x569d]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  405049:	mov    edx,0x37c
  40504e:	call   403070 <__assert_fail@plt>
  405053:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40505d:	nop    DWORD PTR [rax]

0000000000405060 <flatcc_builder_offset_vector_push@@Base>:
  405060:	push   rbp
  405061:	push   r14
  405063:	push   rbx
  405064:	mov    rax,QWORD PTR [rdi+0x30]
  405068:	cmp    WORD PTR [rax+0xe],0x5
  40506d:	jne    405102 <flatcc_builder_offset_vector_push@@Base+0xa2>
  405073:	mov    ecx,DWORD PTR [rax+0x14]
  405076:	cmp    ecx,0x3fffffff
  40507c:	je     4050c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  40507e:	mov    r14d,esi
  405081:	mov    rbx,rdi
  405084:	inc    ecx
  405086:	mov    DWORD PTR [rax+0x14],ecx
  405089:	mov    ebp,DWORD PTR [rdi+0x20]
  40508c:	lea    eax,[rbp+0x4]
  40508f:	mov    DWORD PTR [rdi+0x20],eax
  405092:	cmp    eax,DWORD PTR [rdi+0x24]
  405095:	jae    4050a2 <flatcc_builder_offset_vector_push@@Base+0x42>
  405097:	mov    rax,QWORD PTR [rbx+0x18]
  40509b:	add    rax,rbp
  40509e:	jne    4050fa <flatcc_builder_offset_vector_push@@Base+0x9a>
  4050a0:	jmp    4050c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4050a2:	lea    eax,[rbp+0x5]
  4050a5:	lea    rsi,[rbx+0x68]
  4050a9:	mov    rdi,QWORD PTR [rbx+0x40]
  4050ad:	mov    edx,DWORD PTR [rbx+0x28]
  4050b0:	add    rdx,rax
  4050b3:	mov    ecx,0x1
  4050b8:	mov    r8d,0x1
  4050be:	call   QWORD PTR [rbx+0x50]
  4050c1:	test   eax,eax
  4050c3:	je     4050c9 <flatcc_builder_offset_vector_push@@Base+0x69>
  4050c5:	xor    eax,eax
  4050c7:	jmp    4050fd <flatcc_builder_offset_vector_push@@Base+0x9d>
  4050c9:	mov    ecx,DWORD PTR [rbx+0x28]
  4050cc:	mov    rax,rcx
  4050cf:	add    rax,QWORD PTR [rbx+0x68]
  4050d3:	mov    QWORD PTR [rbx+0x18],rax
  4050d7:	mov    edx,DWORD PTR [rbx+0x70]
  4050da:	sub    edx,ecx
  4050dc:	cmp    edx,0xfffffffc
  4050df:	mov    ecx,0xfffffffc
  4050e4:	cmovb  ecx,edx
  4050e7:	mov    DWORD PTR [rbx+0x24],ecx
  4050ea:	mov    rcx,QWORD PTR [rbx+0x30]
  4050ee:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4050f5:	add    rax,rbp
  4050f8:	je     4050c5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4050fa:	mov    DWORD PTR [rax],r14d
  4050fd:	pop    rbx
  4050fe:	pop    r14
  405100:	pop    rbp
  405101:	ret    
  405102:	lea    rdi,[rip+0x492f]        # 409a38 <flatcc_builder_padding_base@@Base+0x6c8>
  405109:	lea    rsi,[rip+0x44f2]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405110:	lea    rcx,[rip+0x4954]        # 409a6b <flatcc_builder_padding_base@@Base+0x6fb>
  405117:	mov    edx,0x3a6
  40511c:	call   403070 <__assert_fail@plt>
  405121:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40512b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405130 <flatcc_builder_append_offset_vector@@Base>:
  405130:	push   r15
  405132:	push   r14
  405134:	push   r13
  405136:	push   r12
  405138:	push   rbx
  405139:	mov    rax,QWORD PTR [rdi+0x30]
  40513d:	cmp    WORD PTR [rax+0xe],0x5
  405142:	jne    40521e <flatcc_builder_append_offset_vector@@Base+0xee>
  405148:	mov    r15,rdx
  40514b:	mov    ecx,DWORD PTR [rax+0x14]
  40514e:	add    ecx,r15d
  405151:	jb     4051ff <flatcc_builder_append_offset_vector@@Base+0xcf>
  405157:	cmp    ecx,0x40000000
  40515d:	jae    4051ff <flatcc_builder_append_offset_vector@@Base+0xcf>
  405163:	mov    r14,rsi
  405166:	mov    rbx,rdi
  405169:	mov    DWORD PTR [rax+0x14],ecx
  40516c:	mov    r13d,DWORD PTR [rdi+0x20]
  405170:	lea    eax,[r13+r15*4+0x0]
  405175:	mov    DWORD PTR [rdi+0x20],eax
  405178:	cmp    eax,DWORD PTR [rdi+0x24]
  40517b:	jae    405188 <flatcc_builder_append_offset_vector@@Base+0x58>
  40517d:	mov    r12,QWORD PTR [rbx+0x18]
  405181:	add    r12,r13
  405184:	jne    4051e0 <flatcc_builder_append_offset_vector@@Base+0xb0>
  405186:	jmp    4051aa <flatcc_builder_append_offset_vector@@Base+0x7a>
  405188:	inc    eax
  40518a:	lea    rsi,[rbx+0x68]
  40518e:	mov    rdi,QWORD PTR [rbx+0x40]
  405192:	mov    edx,DWORD PTR [rbx+0x28]
  405195:	add    rdx,rax
  405198:	mov    ecx,0x1
  40519d:	mov    r8d,0x1
  4051a3:	call   QWORD PTR [rbx+0x50]
  4051a6:	test   eax,eax
  4051a8:	je     4051af <flatcc_builder_append_offset_vector@@Base+0x7f>
  4051aa:	xor    r12d,r12d
  4051ad:	jmp    4051f2 <flatcc_builder_append_offset_vector@@Base+0xc2>
  4051af:	mov    eax,DWORD PTR [rbx+0x28]
  4051b2:	mov    r12,rax
  4051b5:	add    r12,QWORD PTR [rbx+0x68]
  4051b9:	mov    QWORD PTR [rbx+0x18],r12
  4051bd:	mov    ecx,DWORD PTR [rbx+0x70]
  4051c0:	sub    ecx,eax
  4051c2:	cmp    ecx,0xfffffffc
  4051c5:	mov    eax,0xfffffffc
  4051ca:	cmovb  eax,ecx
  4051cd:	mov    DWORD PTR [rbx+0x24],eax
  4051d0:	mov    rax,QWORD PTR [rbx+0x30]
  4051d4:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4051db:	add    r12,r13
  4051de:	je     4051aa <flatcc_builder_append_offset_vector@@Base+0x7a>
  4051e0:	shl    r15d,0x2
  4051e4:	mov    edx,r15d
  4051e7:	mov    rdi,r12
  4051ea:	mov    rsi,r14
  4051ed:	call   4030c0 <memcpy@plt>
  4051f2:	mov    rax,r12
  4051f5:	pop    rbx
  4051f6:	pop    r12
  4051f8:	pop    r13
  4051fa:	pop    r14
  4051fc:	pop    r15
  4051fe:	ret    
  4051ff:	lea    rdi,[rip+0x54c5]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  405206:	lea    rsi,[rip+0x43f5]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40520d:	lea    rcx,[rip+0x54d2]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  405214:	mov    edx,0x37c
  405219:	call   403070 <__assert_fail@plt>
  40521e:	lea    rdi,[rip+0x4813]        # 409a38 <flatcc_builder_padding_base@@Base+0x6c8>
  405225:	lea    rsi,[rip+0x43d6]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40522c:	lea    rcx,[rip+0x489a]        # 409acd <flatcc_builder_padding_base@@Base+0x75d>
  405233:	mov    edx,0x3b4
  405238:	call   403070 <__assert_fail@plt>
  40523d:	nop    DWORD PTR [rax]

0000000000405240 <flatcc_builder_extend_string@@Base>:
  405240:	push   r14
  405242:	push   rbx
  405243:	push   rax
  405244:	mov    rax,QWORD PTR [rdi+0x30]
  405248:	cmp    WORD PTR [rax+0xe],0x6
  40524d:	jne    4052d9 <flatcc_builder_extend_string@@Base+0x99>
  405253:	mov    ecx,DWORD PTR [rax+0x14]
  405256:	add    ecx,esi
  405258:	jb     4052f8 <flatcc_builder_extend_string@@Base+0xb8>
  40525e:	mov    rbx,rdi
  405261:	mov    DWORD PTR [rax+0x14],ecx
  405264:	mov    r14d,DWORD PTR [rdi+0x20]
  405268:	add    esi,r14d
  40526b:	mov    DWORD PTR [rdi+0x20],esi
  40526e:	cmp    esi,DWORD PTR [rdi+0x24]
  405271:	jae    405279 <flatcc_builder_extend_string@@Base+0x39>
  405273:	mov    rax,QWORD PTR [rbx+0x18]
  405277:	jmp    4052ce <flatcc_builder_extend_string@@Base+0x8e>
  405279:	inc    esi
  40527b:	lea    rax,[rbx+0x68]
  40527f:	mov    rdi,QWORD PTR [rbx+0x40]
  405283:	mov    edx,DWORD PTR [rbx+0x28]
  405286:	add    rdx,rsi
  405289:	mov    rsi,rax
  40528c:	mov    ecx,0x1
  405291:	mov    r8d,0x1
  405297:	call   QWORD PTR [rbx+0x50]
  40529a:	test   eax,eax
  40529c:	je     4052a2 <flatcc_builder_extend_string@@Base+0x62>
  40529e:	xor    eax,eax
  4052a0:	jmp    4052d1 <flatcc_builder_extend_string@@Base+0x91>
  4052a2:	mov    ecx,DWORD PTR [rbx+0x28]
  4052a5:	mov    rax,rcx
  4052a8:	add    rax,QWORD PTR [rbx+0x68]
  4052ac:	mov    QWORD PTR [rbx+0x18],rax
  4052b0:	mov    edx,DWORD PTR [rbx+0x70]
  4052b3:	sub    edx,ecx
  4052b5:	cmp    edx,0xfffffffc
  4052b8:	mov    ecx,0xfffffffc
  4052bd:	cmovb  ecx,edx
  4052c0:	mov    DWORD PTR [rbx+0x24],ecx
  4052c3:	mov    rcx,QWORD PTR [rbx+0x30]
  4052c7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4052ce:	add    rax,r14
  4052d1:	add    rsp,0x8
  4052d5:	pop    rbx
  4052d6:	pop    r14
  4052d8:	ret    
  4052d9:	lea    rdi,[rip+0x4861]        # 409b41 <flatcc_builder_padding_base@@Base+0x7d1>
  4052e0:	lea    rsi,[rip+0x431b]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4052e7:	lea    rcx,[rip+0x487f]        # 409b6d <flatcc_builder_padding_base@@Base+0x7fd>
  4052ee:	mov    edx,0x3bd
  4052f3:	call   403070 <__assert_fail@plt>
  4052f8:	lea    rdi,[rip+0x53cc]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  4052ff:	lea    rsi,[rip+0x42fc]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405306:	lea    rcx,[rip+0x53d9]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  40530d:	mov    edx,0x37c
  405312:	call   403070 <__assert_fail@plt>
  405317:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405320 <flatcc_builder_append_string@@Base>:
  405320:	push   r15
  405322:	push   r14
  405324:	push   r13
  405326:	push   r12
  405328:	push   rbx
  405329:	mov    rax,QWORD PTR [rdi+0x30]
  40532d:	cmp    WORD PTR [rax+0xe],0x6
  405332:	jne    4053de <flatcc_builder_append_string@@Base+0xbe>
  405338:	mov    r15,rdx
  40533b:	mov    ecx,DWORD PTR [rax+0x14]
  40533e:	add    ecx,r15d
  405341:	jb     4053fd <flatcc_builder_append_string@@Base+0xdd>
  405347:	mov    r14,rsi
  40534a:	mov    rbx,rdi
  40534d:	mov    DWORD PTR [rax+0x14],ecx
  405350:	mov    r13d,DWORD PTR [rdi+0x20]
  405354:	lea    eax,[r15+r13*1]
  405358:	mov    DWORD PTR [rdi+0x20],eax
  40535b:	cmp    eax,DWORD PTR [rdi+0x24]
  40535e:	jae    40536b <flatcc_builder_append_string@@Base+0x4b>
  405360:	mov    r12,QWORD PTR [rbx+0x18]
  405364:	add    r12,r13
  405367:	jne    4053c3 <flatcc_builder_append_string@@Base+0xa3>
  405369:	jmp    40538d <flatcc_builder_append_string@@Base+0x6d>
  40536b:	inc    eax
  40536d:	lea    rsi,[rbx+0x68]
  405371:	mov    rdi,QWORD PTR [rbx+0x40]
  405375:	mov    edx,DWORD PTR [rbx+0x28]
  405378:	add    rdx,rax
  40537b:	mov    ecx,0x1
  405380:	mov    r8d,0x1
  405386:	call   QWORD PTR [rbx+0x50]
  405389:	test   eax,eax
  40538b:	je     405392 <flatcc_builder_append_string@@Base+0x72>
  40538d:	xor    r12d,r12d
  405390:	jmp    4053d1 <flatcc_builder_append_string@@Base+0xb1>
  405392:	mov    eax,DWORD PTR [rbx+0x28]
  405395:	mov    r12,rax
  405398:	add    r12,QWORD PTR [rbx+0x68]
  40539c:	mov    QWORD PTR [rbx+0x18],r12
  4053a0:	mov    ecx,DWORD PTR [rbx+0x70]
  4053a3:	sub    ecx,eax
  4053a5:	cmp    ecx,0xfffffffc
  4053a8:	mov    eax,0xfffffffc
  4053ad:	cmovb  eax,ecx
  4053b0:	mov    DWORD PTR [rbx+0x24],eax
  4053b3:	mov    rax,QWORD PTR [rbx+0x30]
  4053b7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4053be:	add    r12,r13
  4053c1:	je     40538d <flatcc_builder_append_string@@Base+0x6d>
  4053c3:	mov    edx,r15d
  4053c6:	mov    rdi,r12
  4053c9:	mov    rsi,r14
  4053cc:	call   4030c0 <memcpy@plt>
  4053d1:	mov    rax,r12
  4053d4:	pop    rbx
  4053d5:	pop    r12
  4053d7:	pop    r13
  4053d9:	pop    r14
  4053db:	pop    r15
  4053dd:	ret    
  4053de:	lea    rdi,[rip+0x475c]        # 409b41 <flatcc_builder_padding_base@@Base+0x7d1>
  4053e5:	lea    rsi,[rip+0x4216]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4053ec:	lea    rcx,[rip+0x47b9]        # 409bac <flatcc_builder_padding_base@@Base+0x83c>
  4053f3:	mov    edx,0x3c6
  4053f8:	call   403070 <__assert_fail@plt>
  4053fd:	lea    rdi,[rip+0x52c7]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  405404:	lea    rsi,[rip+0x41f7]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40540b:	lea    rcx,[rip+0x52d4]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  405412:	mov    edx,0x37c
  405417:	call   403070 <__assert_fail@plt>
  40541c:	nop    DWORD PTR [rax+0x0]

0000000000405420 <flatcc_builder_append_string_str@@Base>:
  405420:	push   r14
  405422:	push   rbx
  405423:	push   rax
  405424:	mov    rbx,rsi
  405427:	mov    r14,rdi
  40542a:	mov    rdi,rsi
  40542d:	call   403050 <strlen@plt>
  405432:	mov    rdi,r14
  405435:	mov    rsi,rbx
  405438:	mov    rdx,rax
  40543b:	add    rsp,0x8
  40543f:	pop    rbx
  405440:	pop    r14
  405442:	jmp    405320 <flatcc_builder_append_string@@Base>
  405447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405450 <flatcc_builder_append_string_strn@@Base>:
  405450:	push   r15
  405452:	push   r14
  405454:	push   rbx
  405455:	mov    rbx,rdx
  405458:	mov    r14,rsi
  40545b:	mov    r15,rdi
  40545e:	mov    rdi,rsi
  405461:	xor    esi,esi
  405463:	call   4030a0 <memchr@plt>
  405468:	mov    rcx,rax
  40546b:	sub    rcx,r14
  40546e:	test   rax,rax
  405471:	cmovne rbx,rcx
  405475:	mov    rdi,r15
  405478:	mov    rsi,r14
  40547b:	mov    rdx,rbx
  40547e:	pop    rbx
  40547f:	pop    r14
  405481:	pop    r15
  405483:	jmp    405320 <flatcc_builder_append_string@@Base>
  405488:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405490 <flatcc_builder_truncate_vector@@Base>:
  405490:	push   rax
  405491:	mov    rax,QWORD PTR [rdi+0x30]
  405495:	cmp    WORD PTR [rax+0xe],0x4
  40549a:	jne    4054ce <flatcc_builder_truncate_vector@@Base+0x3e>
  40549c:	mov    rdx,rsi
  40549f:	mov    ecx,DWORD PTR [rax+0x14]
  4054a2:	cmp    rcx,rsi
  4054a5:	jb     4054ed <flatcc_builder_truncate_vector@@Base+0x5d>
  4054a7:	sub    ecx,edx
  4054a9:	mov    DWORD PTR [rax+0x14],ecx
  4054ac:	mov    rax,QWORD PTR [rdi+0x30]
  4054b0:	imul   edx,DWORD PTR [rax+0x10]
  4054b4:	mov    eax,DWORD PTR [rdi+0x20]
  4054b7:	sub    eax,edx
  4054b9:	mov    DWORD PTR [rdi+0x20],eax
  4054bc:	add    rax,QWORD PTR [rdi+0x18]
  4054c0:	mov    rdi,rax
  4054c3:	xor    esi,esi
  4054c5:	call   403080 <memset@plt>
  4054ca:	xor    eax,eax
  4054cc:	pop    rcx
  4054cd:	ret    
  4054ce:	lea    rdi,[rip+0x446a]        # 40993f <flatcc_builder_padding_base@@Base+0x5cf>
  4054d5:	lea    rsi,[rip+0x4126]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4054dc:	lea    rcx,[rip+0x4716]        # 409bf9 <flatcc_builder_padding_base@@Base+0x889>
  4054e3:	mov    edx,0x3d9
  4054e8:	call   403070 <__assert_fail@plt>
  4054ed:	lea    rdi,[rip+0x4744]        # 409c38 <flatcc_builder_padding_base@@Base+0x8c8>
  4054f4:	lea    rsi,[rip+0x4107]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4054fb:	lea    rcx,[rip+0x46f7]        # 409bf9 <flatcc_builder_padding_base@@Base+0x889>
  405502:	mov    edx,0x3da
  405507:	call   403070 <__assert_fail@plt>
  40550c:	nop    DWORD PTR [rax+0x0]

0000000000405510 <flatcc_builder_truncate_offset_vector@@Base>:
  405510:	push   rax
  405511:	mov    rax,QWORD PTR [rdi+0x30]
  405515:	cmp    WORD PTR [rax+0xe],0x5
  40551a:	jne    40554b <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  40551c:	mov    rdx,rsi
  40551f:	mov    ecx,DWORD PTR [rax+0x14]
  405522:	sub    ecx,edx
  405524:	jb     40556a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  405526:	mov    DWORD PTR [rax+0x14],ecx
  405529:	mov    rax,QWORD PTR [rdi+0x30]
  40552d:	imul   edx,DWORD PTR [rax+0x10]
  405531:	mov    eax,DWORD PTR [rdi+0x20]
  405534:	sub    eax,edx
  405536:	mov    DWORD PTR [rdi+0x20],eax
  405539:	add    rax,QWORD PTR [rdi+0x18]
  40553d:	mov    rdi,rax
  405540:	xor    esi,esi
  405542:	call   403080 <memset@plt>
  405547:	xor    eax,eax
  405549:	pop    rcx
  40554a:	ret    
  40554b:	lea    rdi,[rip+0x44e6]        # 409a38 <flatcc_builder_padding_base@@Base+0x6c8>
  405552:	lea    rsi,[rip+0x40a9]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405559:	lea    rcx,[rip+0x46fc]        # 409c5c <flatcc_builder_padding_base@@Base+0x8ec>
  405560:	mov    edx,0x3e2
  405565:	call   403070 <__assert_fail@plt>
  40556a:	lea    rdi,[rip+0x4731]        # 409ca2 <flatcc_builder_padding_base@@Base+0x932>
  405571:	lea    rsi,[rip+0x408a]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405578:	lea    rcx,[rip+0x46dd]        # 409c5c <flatcc_builder_padding_base@@Base+0x8ec>
  40557f:	mov    edx,0x3e3
  405584:	call   403070 <__assert_fail@plt>
  405589:	nop    DWORD PTR [rax+0x0]

0000000000405590 <flatcc_builder_truncate_string@@Base>:
  405590:	push   rax
  405591:	mov    rax,QWORD PTR [rdi+0x30]
  405595:	cmp    WORD PTR [rax+0xe],0x6
  40559a:	jne    4055c5 <flatcc_builder_truncate_string@@Base+0x35>
  40559c:	mov    ecx,DWORD PTR [rax+0x14]
  40559f:	cmp    rcx,rsi
  4055a2:	jb     4055e4 <flatcc_builder_truncate_string@@Base+0x54>
  4055a4:	sub    ecx,esi
  4055a6:	mov    DWORD PTR [rax+0x14],ecx
  4055a9:	mov    eax,DWORD PTR [rdi+0x20]
  4055ac:	sub    eax,esi
  4055ae:	mov    DWORD PTR [rdi+0x20],eax
  4055b1:	add    rax,QWORD PTR [rdi+0x18]
  4055b5:	mov    edx,esi
  4055b7:	mov    rdi,rax
  4055ba:	xor    esi,esi
  4055bc:	call   403080 <memset@plt>
  4055c1:	xor    eax,eax
  4055c3:	pop    rcx
  4055c4:	ret    
  4055c5:	lea    rdi,[rip+0x4575]        # 409b41 <flatcc_builder_padding_base@@Base+0x7d1>
  4055cc:	lea    rsi,[rip+0x402f]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4055d3:	lea    rcx,[rip+0x4703]        # 409cdd <flatcc_builder_padding_base@@Base+0x96d>
  4055da:	mov    edx,0x3eb
  4055df:	call   403070 <__assert_fail@plt>
  4055e4:	lea    rdi,[rip+0x4731]        # 409d1c <flatcc_builder_padding_base@@Base+0x9ac>
  4055eb:	lea    rsi,[rip+0x4010]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4055f2:	lea    rcx,[rip+0x46e4]        # 409cdd <flatcc_builder_padding_base@@Base+0x96d>
  4055f9:	mov    edx,0x3ec
  4055fe:	call   403070 <__assert_fail@plt>
  405603:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40560d:	nop    DWORD PTR [rax]

0000000000405610 <flatcc_builder_start_vector@@Base>:
  405610:	push   r15
  405612:	push   r14
  405614:	push   rbx
  405615:	mov    r14,rcx
  405618:	mov    r15,rsi
  40561b:	mov    rbx,rdi
  40561e:	cmp    dx,0x4
  405622:	mov    esi,0x4
  405627:	cmova  esi,edx
  40562a:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  40562f:	mov    ecx,eax
  405631:	mov    eax,0xffffffff
  405636:	test   ecx,ecx
  405638:	jne    405686 <flatcc_builder_start_vector@@Base+0x76>
  40563a:	mov    rax,QWORD PTR [rbx+0x30]
  40563e:	mov    DWORD PTR [rax+0x10],r15d
  405642:	mov    rax,QWORD PTR [rbx+0x30]
  405646:	mov    DWORD PTR [rax+0x14],0x0
  40564d:	mov    rax,QWORD PTR [rbx+0x30]
  405651:	mov    DWORD PTR [rax+0x18],r14d
  405655:	mov    rax,QWORD PTR [rbx+0x30]
  405659:	mov    WORD PTR [rax+0xe],0x4
  40565f:	mov    ecx,DWORD PTR [rbx+0x28]
  405662:	mov    edx,DWORD PTR [rbx+0x70]
  405665:	sub    edx,ecx
  405667:	add    rcx,QWORD PTR [rbx+0x68]
  40566b:	mov    QWORD PTR [rbx+0x18],rcx
  40566f:	cmp    edx,0xfffffffc
  405672:	mov    ecx,0xfffffffc
  405677:	cmovb  ecx,edx
  40567a:	mov    DWORD PTR [rbx+0x24],ecx
  40567d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405684:	xor    eax,eax
  405686:	pop    rbx
  405687:	pop    r14
  405689:	pop    r15
  40568b:	ret    
  40568c:	nop    DWORD PTR [rax+0x0]

0000000000405690 <flatcc_builder_start_offset_vector@@Base>:
  405690:	push   rbx
  405691:	mov    rbx,rdi
  405694:	mov    esi,0x4
  405699:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  40569e:	mov    ecx,eax
  4056a0:	mov    eax,0xffffffff
  4056a5:	test   ecx,ecx
  4056a7:	je     4056ab <flatcc_builder_start_offset_vector@@Base+0x1b>
  4056a9:	pop    rbx
  4056aa:	ret    
  4056ab:	mov    rax,QWORD PTR [rbx+0x30]
  4056af:	mov    DWORD PTR [rax+0x10],0x4
  4056b6:	mov    rax,QWORD PTR [rbx+0x30]
  4056ba:	mov    DWORD PTR [rax+0x14],0x0
  4056c1:	mov    rax,QWORD PTR [rbx+0x30]
  4056c5:	mov    WORD PTR [rax+0xe],0x5
  4056cb:	mov    ecx,DWORD PTR [rbx+0x28]
  4056ce:	mov    edx,DWORD PTR [rbx+0x70]
  4056d1:	sub    edx,ecx
  4056d3:	add    rcx,QWORD PTR [rbx+0x68]
  4056d7:	mov    QWORD PTR [rbx+0x18],rcx
  4056db:	cmp    edx,0xfffffffc
  4056de:	mov    ecx,0xfffffffc
  4056e3:	cmovb  ecx,edx
  4056e6:	mov    DWORD PTR [rbx+0x24],ecx
  4056e9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4056f0:	xor    eax,eax
  4056f2:	pop    rbx
  4056f3:	ret    
  4056f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4056fe:	xchg   ax,ax

0000000000405700 <flatcc_builder_create_offset_vector@@Base>:
  405700:	push   r15
  405702:	push   r14
  405704:	push   r12
  405706:	push   rbx
  405707:	push   rax
  405708:	mov    r14,rdx
  40570b:	mov    r15,rsi
  40570e:	mov    rbx,rdi
  405711:	mov    esi,0x4
  405716:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  40571b:	test   eax,eax
  40571d:	je     40572d <flatcc_builder_create_offset_vector@@Base+0x2d>
  40571f:	xor    eax,eax
  405721:	add    rsp,0x8
  405725:	pop    rbx
  405726:	pop    r12
  405728:	pop    r14
  40572a:	pop    r15
  40572c:	ret    
  40572d:	mov    rax,QWORD PTR [rbx+0x30]
  405731:	mov    DWORD PTR [rax+0x10],0x4
  405738:	mov    rax,QWORD PTR [rbx+0x30]
  40573c:	mov    DWORD PTR [rax+0x14],0x0
  405743:	mov    rax,QWORD PTR [rbx+0x30]
  405747:	mov    WORD PTR [rax+0xe],0x5
  40574d:	mov    ecx,DWORD PTR [rbx+0x28]
  405750:	mov    edx,DWORD PTR [rbx+0x70]
  405753:	sub    edx,ecx
  405755:	add    rcx,QWORD PTR [rbx+0x68]
  405759:	mov    QWORD PTR [rbx+0x18],rcx
  40575d:	cmp    edx,0xfffffffc
  405760:	mov    ecx,0xfffffffc
  405765:	cmovb  ecx,edx
  405768:	mov    DWORD PTR [rbx+0x24],ecx
  40576b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405772:	mov    ecx,DWORD PTR [rax+0x14]
  405775:	add    ecx,r14d
  405778:	jb     405828 <flatcc_builder_create_offset_vector@@Base+0x128>
  40577e:	cmp    ecx,0x40000000
  405784:	jae    405828 <flatcc_builder_create_offset_vector@@Base+0x128>
  40578a:	mov    DWORD PTR [rax+0x14],ecx
  40578d:	mov    r12d,DWORD PTR [rbx+0x20]
  405791:	lea    eax,[r12+r14*4]
  405795:	mov    DWORD PTR [rbx+0x20],eax
  405798:	cmp    eax,DWORD PTR [rbx+0x24]
  40579b:	jae    4057ab <flatcc_builder_create_offset_vector@@Base+0xab>
  40579d:	mov    rdi,QWORD PTR [rbx+0x18]
  4057a1:	add    rdi,r12
  4057a4:	jne    405806 <flatcc_builder_create_offset_vector@@Base+0x106>
  4057a6:	jmp    40571f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4057ab:	inc    eax
  4057ad:	lea    rsi,[rbx+0x68]
  4057b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4057b5:	mov    edx,DWORD PTR [rbx+0x28]
  4057b8:	add    rdx,rax
  4057bb:	mov    ecx,0x1
  4057c0:	mov    r8d,0x1
  4057c6:	call   QWORD PTR [rbx+0x50]
  4057c9:	test   eax,eax
  4057cb:	jne    40571f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4057d1:	mov    eax,DWORD PTR [rbx+0x28]
  4057d4:	mov    rdi,rax
  4057d7:	add    rdi,QWORD PTR [rbx+0x68]
  4057db:	mov    QWORD PTR [rbx+0x18],rdi
  4057df:	mov    ecx,DWORD PTR [rbx+0x70]
  4057e2:	sub    ecx,eax
  4057e4:	cmp    ecx,0xfffffffc
  4057e7:	mov    eax,0xfffffffc
  4057ec:	cmovb  eax,ecx
  4057ef:	mov    DWORD PTR [rbx+0x24],eax
  4057f2:	mov    rax,QWORD PTR [rbx+0x30]
  4057f6:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4057fd:	add    rdi,r12
  405800:	je     40571f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405806:	shl    r14,0x2
  40580a:	mov    rsi,r15
  40580d:	mov    rdx,r14
  405810:	call   4030c0 <memcpy@plt>
  405815:	mov    rdi,rbx
  405818:	add    rsp,0x8
  40581c:	pop    rbx
  40581d:	pop    r12
  40581f:	pop    r14
  405821:	pop    r15
  405823:	jmp    405850 <flatcc_builder_end_offset_vector@@Base>
  405828:	lea    rdi,[rip+0x4e9c]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  40582f:	lea    rsi,[rip+0x3dcc]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405836:	lea    rcx,[rip+0x4ea9]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  40583d:	mov    edx,0x37c
  405842:	call   403070 <__assert_fail@plt>
  405847:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405850 <flatcc_builder_end_offset_vector@@Base>:
  405850:	push   rbp
  405851:	push   rbx
  405852:	push   rax
  405853:	mov    rax,QWORD PTR [rdi+0x30]
  405857:	cmp    WORD PTR [rax+0xe],0x5
  40585c:	jne    4058ea <flatcc_builder_end_offset_vector@@Base+0x9a>
  405862:	mov    rbx,rdi
  405865:	mov    rsi,QWORD PTR [rdi+0x18]
  405869:	mov    edx,DWORD PTR [rax+0x14]
  40586c:	xor    ecx,ecx
  40586e:	call   4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405873:	mov    ebp,eax
  405875:	test   eax,eax
  405877:	je     4058e1 <flatcc_builder_end_offset_vector@@Base+0x91>
  405879:	mov    rdi,QWORD PTR [rbx+0x18]
  40587d:	mov    edx,DWORD PTR [rbx+0x20]
  405880:	xor    esi,esi
  405882:	call   403080 <memset@plt>
  405887:	mov    rax,QWORD PTR [rbx+0x30]
  40588b:	mov    ecx,DWORD PTR [rax+0x8]
  40588e:	mov    DWORD PTR [rbx+0x20],ecx
  405891:	mov    ecx,DWORD PTR [rax]
  405893:	mov    DWORD PTR [rbx+0x28],ecx
  405896:	mov    edx,DWORD PTR [rax+0x4]
  405899:	mov    rsi,rcx
  40589c:	add    rsi,QWORD PTR [rbx+0x68]
  4058a0:	mov    QWORD PTR [rbx+0x18],rsi
  4058a4:	mov    esi,DWORD PTR [rbx+0x70]
  4058a7:	sub    esi,ecx
  4058a9:	cmp    esi,edx
  4058ab:	cmova  esi,edx
  4058ae:	mov    DWORD PTR [rbx+0x24],esi
  4058b1:	movzx  ecx,WORD PTR [rbx+0xea]
  4058b8:	cmp    WORD PTR [rbx+0xe8],cx
  4058bf:	jae    4058c8 <flatcc_builder_end_offset_vector@@Base+0x78>
  4058c1:	mov    WORD PTR [rbx+0xe8],cx
  4058c8:	movzx  ecx,WORD PTR [rax+0xc]
  4058cc:	mov    WORD PTR [rbx+0xea],cx
  4058d3:	add    rax,0xffffffffffffffdc
  4058d7:	mov    QWORD PTR [rbx+0x30],rax
  4058db:	dec    DWORD PTR [rbx+0x104]
  4058e1:	mov    eax,ebp
  4058e3:	add    rsp,0x8
  4058e7:	pop    rbx
  4058e8:	pop    rbp
  4058e9:	ret    
  4058ea:	lea    rdi,[rip+0x4147]        # 409a38 <flatcc_builder_padding_base@@Base+0x6c8>
  4058f1:	lea    rsi,[rip+0x3d0a]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4058f8:	lea    rcx,[rip+0x4768]        # 40a067 <flatcc_builder_padding_base@@Base+0xcf7>
  4058ff:	mov    edx,0x5c8
  405904:	call   403070 <__assert_fail@plt>
  405909:	nop    DWORD PTR [rax+0x0]

0000000000405910 <flatcc_builder_start_string@@Base>:
  405910:	push   rbx
  405911:	mov    rbx,rdi
  405914:	mov    esi,0x1
  405919:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  40591e:	mov    ecx,eax
  405920:	mov    eax,0xffffffff
  405925:	test   ecx,ecx
  405927:	je     40592b <flatcc_builder_start_string@@Base+0x1b>
  405929:	pop    rbx
  40592a:	ret    
  40592b:	mov    rax,QWORD PTR [rbx+0x30]
  40592f:	mov    DWORD PTR [rax+0x10],0x1
  405936:	mov    rax,QWORD PTR [rbx+0x30]
  40593a:	mov    DWORD PTR [rax+0x14],0x0
  405941:	mov    rax,QWORD PTR [rbx+0x30]
  405945:	mov    WORD PTR [rax+0xe],0x6
  40594b:	mov    ecx,DWORD PTR [rbx+0x28]
  40594e:	mov    edx,DWORD PTR [rbx+0x70]
  405951:	sub    edx,ecx
  405953:	add    rcx,QWORD PTR [rbx+0x68]
  405957:	mov    QWORD PTR [rbx+0x18],rcx
  40595b:	cmp    edx,0xfffffffc
  40595e:	mov    ecx,0xfffffffc
  405963:	cmovb  ecx,edx
  405966:	mov    DWORD PTR [rbx+0x24],ecx
  405969:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405970:	xor    eax,eax
  405972:	pop    rbx
  405973:	ret    
  405974:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40597e:	xchg   ax,ax

0000000000405980 <flatcc_builder_reserve_table@@Base>:
  405980:	push   r15
  405982:	push   r14
  405984:	push   rbx
  405985:	test   esi,esi
  405987:	js     405a34 <flatcc_builder_reserve_table@@Base+0xb4>
  40598d:	mov    r14d,esi
  405990:	mov    r15,rdi
  405993:	mov    rax,QWORD PTR [rdi+0x30]
  405997:	movzx  ebx,WORD PTR [rax+0x1c]
  40599b:	add    ebx,ebx
  40599d:	add    ebx,DWORD PTR [rax+0x10]
  4059a0:	lea    edx,[r14+r14*1]
  4059a4:	add    edx,0x4
  4059a7:	add    rdx,rbx
  4059aa:	cmp    rdx,QWORD PTR [rdi+0x60]
  4059ae:	jbe    4059cc <flatcc_builder_reserve_table@@Base+0x4c>
  4059b0:	lea    rsi,[r15+0x58]
  4059b4:	mov    rdi,QWORD PTR [r15+0x40]
  4059b8:	mov    ecx,0x1
  4059bd:	xor    r8d,r8d
  4059c0:	call   QWORD PTR [r15+0x50]
  4059c4:	test   eax,eax
  4059c6:	jne    405a53 <flatcc_builder_reserve_table@@Base+0xd3>
  4059cc:	add    rbx,QWORD PTR [r15+0x58]
  4059d0:	mov    QWORD PTR [r15+0x8],rbx
  4059d4:	je     405a29 <flatcc_builder_reserve_table@@Base+0xa9>
  4059d6:	add    r14d,r14d
  4059d9:	add    rbx,0x4
  4059dd:	mov    QWORD PTR [r15+0x8],rbx
  4059e1:	mov    rax,QWORD PTR [r15+0x30]
  4059e5:	mov    ebx,DWORD PTR [rax+0x14]
  4059e8:	or     r14d,0x1
  4059ec:	add    r14,rbx
  4059ef:	cmp    r14,QWORD PTR [r15+0x90]
  4059f6:	jbe    405a16 <flatcc_builder_reserve_table@@Base+0x96>
  4059f8:	lea    rsi,[r15+0x88]
  4059ff:	mov    rdi,QWORD PTR [r15+0x40]
  405a03:	mov    rdx,r14
  405a06:	xor    ecx,ecx
  405a08:	mov    r8d,0x3
  405a0e:	call   QWORD PTR [r15+0x50]
  405a12:	test   eax,eax
  405a14:	jne    405a53 <flatcc_builder_reserve_table@@Base+0xd3>
  405a16:	xor    eax,eax
  405a18:	add    rbx,QWORD PTR [r15+0x88]
  405a1f:	mov    QWORD PTR [r15],rbx
  405a22:	sete   al
  405a25:	neg    eax
  405a27:	jmp    405a2e <flatcc_builder_reserve_table@@Base+0xae>
  405a29:	mov    eax,0xffffffff
  405a2e:	pop    rbx
  405a2f:	pop    r14
  405a31:	pop    r15
  405a33:	ret    
  405a34:	lea    rdi,[rip+0x4344]        # 409d7f <flatcc_builder_padding_base@@Base+0xa0f>
  405a3b:	lea    rsi,[rip+0x3bc0]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405a42:	lea    rcx,[rip+0x42f5]        # 409d3e <flatcc_builder_padding_base@@Base+0x9ce>
  405a49:	mov    edx,0x429
  405a4e:	call   403070 <__assert_fail@plt>
  405a53:	lea    rdi,[rip+0x4d68]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  405a5a:	lea    rsi,[rip+0x3ba1]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405a61:	lea    rcx,[rip+0x4b94]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  405a68:	mov    edx,0x134
  405a6d:	call   403070 <__assert_fail@plt>
  405a72:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a7c:	nop    DWORD PTR [rax+0x0]

0000000000405a80 <flatcc_builder_start_table@@Base>:
  405a80:	push   rbp
  405a81:	push   r15
  405a83:	push   r14
  405a85:	push   rbx
  405a86:	push   rax
  405a87:	mov    r15d,esi
  405a8a:	mov    rbx,rdi
  405a8d:	mov    esi,0x4
  405a92:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  405a97:	mov    r14d,0xffffffff
  405a9d:	test   eax,eax
  405a9f:	je     405aaf <flatcc_builder_start_table@@Base+0x2f>
  405aa1:	mov    eax,r14d
  405aa4:	add    rsp,0x8
  405aa8:	pop    rbx
  405aa9:	pop    r14
  405aab:	pop    r15
  405aad:	pop    rbp
  405aae:	ret    
  405aaf:	mov    eax,DWORD PTR [rbx+0x8]
  405ab2:	sub    eax,DWORD PTR [rbx+0x58]
  405ab5:	mov    rcx,QWORD PTR [rbx+0x30]
  405ab9:	mov    DWORD PTR [rcx+0x10],eax
  405abc:	mov    eax,DWORD PTR [rbx]
  405abe:	sub    eax,DWORD PTR [rbx+0x88]
  405ac4:	mov    rcx,QWORD PTR [rbx+0x30]
  405ac8:	mov    DWORD PTR [rcx+0x14],eax
  405acb:	mov    eax,DWORD PTR [rbx+0x14]
  405ace:	mov    rcx,QWORD PTR [rbx+0x30]
  405ad2:	mov    DWORD PTR [rcx+0x18],eax
  405ad5:	movzx  eax,WORD PTR [rbx+0x10]
  405ad9:	mov    rcx,QWORD PTR [rbx+0x30]
  405add:	mov    WORD PTR [rcx+0x1c],ax
  405ae1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405ae8:	mov    WORD PTR [rbx+0x10],0x0
  405aee:	mov    rax,QWORD PTR [rbx+0x30]
  405af2:	mov    WORD PTR [rax+0xe],0x3
  405af8:	movzx  ebp,WORD PTR [rax+0x1c]
  405afc:	add    ebp,ebp
  405afe:	add    ebp,DWORD PTR [rax+0x10]
  405b01:	lea    edx,[r15+r15*1]
  405b05:	add    edx,0x4
  405b08:	add    rdx,rbp
  405b0b:	cmp    rdx,QWORD PTR [rbx+0x60]
  405b0f:	jbe    405b2c <flatcc_builder_start_table@@Base+0xac>
  405b11:	lea    rsi,[rbx+0x58]
  405b15:	mov    rdi,QWORD PTR [rbx+0x40]
  405b19:	mov    ecx,0x1
  405b1e:	xor    r8d,r8d
  405b21:	call   QWORD PTR [rbx+0x50]
  405b24:	test   eax,eax
  405b26:	jne    405bc0 <flatcc_builder_start_table@@Base+0x140>
  405b2c:	add    rbp,QWORD PTR [rbx+0x58]
  405b30:	mov    QWORD PTR [rbx+0x8],rbp
  405b34:	je     405aa1 <flatcc_builder_start_table@@Base+0x21>
  405b3a:	add    r15d,r15d
  405b3d:	add    rbp,0x4
  405b41:	mov    QWORD PTR [rbx+0x8],rbp
  405b45:	mov    rax,QWORD PTR [rbx+0x30]
  405b49:	mov    ebp,DWORD PTR [rax+0x14]
  405b4c:	or     r15d,0x1
  405b50:	add    r15,rbp
  405b53:	cmp    r15,QWORD PTR [rbx+0x90]
  405b5a:	jbe    405b79 <flatcc_builder_start_table@@Base+0xf9>
  405b5c:	lea    rsi,[rbx+0x88]
  405b63:	mov    rdi,QWORD PTR [rbx+0x40]
  405b67:	mov    rdx,r15
  405b6a:	xor    ecx,ecx
  405b6c:	mov    r8d,0x3
  405b72:	call   QWORD PTR [rbx+0x50]
  405b75:	test   eax,eax
  405b77:	jne    405bc0 <flatcc_builder_start_table@@Base+0x140>
  405b79:	add    rbp,QWORD PTR [rbx+0x88]
  405b80:	mov    QWORD PTR [rbx],rbp
  405b83:	je     405aa1 <flatcc_builder_start_table@@Base+0x21>
  405b89:	mov    eax,DWORD PTR [rbx+0x28]
  405b8c:	mov    rcx,rax
  405b8f:	add    rcx,QWORD PTR [rbx+0x68]
  405b93:	mov    QWORD PTR [rbx+0x18],rcx
  405b97:	mov    ecx,DWORD PTR [rbx+0x70]
  405b9a:	sub    ecx,eax
  405b9c:	cmp    ecx,0xfffc
  405ba2:	mov    eax,0xfffc
  405ba7:	cmovb  eax,ecx
  405baa:	mov    DWORD PTR [rbx+0x24],eax
  405bad:	mov    rax,QWORD PTR [rbx+0x30]
  405bb1:	mov    DWORD PTR [rax+0x4],0xfffc
  405bb8:	xor    r14d,r14d
  405bbb:	jmp    405aa1 <flatcc_builder_start_table@@Base+0x21>
  405bc0:	lea    rdi,[rip+0x4bfb]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  405bc7:	lea    rsi,[rip+0x3a34]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405bce:	lea    rcx,[rip+0x4a27]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  405bd5:	mov    edx,0x134
  405bda:	call   403070 <__assert_fail@plt>
  405bdf:	nop

0000000000405be0 <flatcc_builder_create_vtable@@Base>:
  405be0:	push   r14
  405be2:	push   rbx
  405be3:	sub    rsp,0x98
  405bea:	mov    r14,rdi
  405bed:	mov    QWORD PTR [rsp+0x8],0x0
  405bf6:	mov    DWORD PTR [rsp+0x10],0x0
  405bfe:	test   dx,dx
  405c01:	je     405c68 <flatcc_builder_create_vtable@@Base+0x88>
  405c03:	movzx  r8d,dx
  405c07:	mov    QWORD PTR [rsp+0x8],r8
  405c0c:	mov    QWORD PTR [rsp+0x18],rsi
  405c11:	mov    QWORD PTR [rsp+0x20],r8
  405c16:	mov    DWORD PTR [rsp+0x10],0x1
  405c1e:	mov    edx,0x1
  405c23:	cmp    DWORD PTR [r14+0x100],0x0
  405c2b:	jne    405c77 <flatcc_builder_create_vtable@@Base+0x97>
  405c2d:	cmp    DWORD PTR [r14+0x124],0x0
  405c35:	jne    405c77 <flatcc_builder_create_vtable@@Base+0x97>
  405c37:	mov    ebx,DWORD PTR [r14+0xf4]
  405c3e:	lea    eax,[r8+rbx*1]
  405c42:	mov    DWORD PTR [r14+0xf4],eax
  405c49:	mov    rdi,QWORD PTR [r14+0x38]
  405c4d:	lea    rsi,[rsp+0x18]
  405c52:	mov    ecx,ebx
  405c54:	call   QWORD PTR [r14+0x48]
  405c58:	test   eax,eax
  405c5a:	jne    405d0b <flatcc_builder_create_vtable@@Base+0x12b>
  405c60:	xor    eax,eax
  405c62:	inc    ebx
  405c64:	jne    405cbc <flatcc_builder_create_vtable@@Base+0xdc>
  405c66:	jmp    405cc2 <flatcc_builder_create_vtable@@Base+0xe2>
  405c68:	xor    edx,edx
  405c6a:	xor    r8d,r8d
  405c6d:	cmp    DWORD PTR [r14+0x100],0x0
  405c75:	je     405c2d <flatcc_builder_create_vtable@@Base+0x4d>
  405c77:	cmp    r8,0x11
  405c7b:	setb   al
  405c7e:	lea    rcx,[r8-0x10]
  405c82:	shr    rcx,0x20
  405c86:	sete   cl
  405c89:	test   r8d,r8d
  405c8c:	je     405ccd <flatcc_builder_create_vtable@@Base+0xed>
  405c8e:	or     al,cl
  405c90:	je     405ccd <flatcc_builder_create_vtable@@Base+0xed>
  405c92:	mov    ebx,DWORD PTR [r14+0xf0]
  405c99:	sub    ebx,r8d
  405c9c:	mov    rdi,QWORD PTR [r14+0x38]
  405ca0:	lea    rsi,[rsp+0x18]
  405ca5:	mov    ecx,ebx
  405ca7:	call   QWORD PTR [r14+0x48]
  405cab:	test   eax,eax
  405cad:	jne    405cec <flatcc_builder_create_vtable@@Base+0x10c>
  405caf:	mov    DWORD PTR [r14+0xf0],ebx
  405cb6:	test   ebx,ebx
  405cb8:	je     405cc0 <flatcc_builder_create_vtable@@Base+0xe0>
  405cba:	inc    ebx
  405cbc:	mov    eax,ebx
  405cbe:	jmp    405cc2 <flatcc_builder_create_vtable@@Base+0xe2>
  405cc0:	xor    eax,eax
  405cc2:	add    rsp,0x98
  405cc9:	pop    rbx
  405cca:	pop    r14
  405ccc:	ret    
  405ccd:	lea    rdi,[rip+0x4aee]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  405cd4:	lea    rsi,[rip+0x3927]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405cdb:	lea    rcx,[rip+0x499f]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  405ce2:	mov    edx,0x287
  405ce7:	call   403070 <__assert_fail@plt>
  405cec:	lea    rdi,[rip+0x4acf]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  405cf3:	lea    rsi,[rip+0x3908]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405cfa:	lea    rcx,[rip+0x4980]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  405d01:	mov    edx,0x28b
  405d06:	call   403070 <__assert_fail@plt>
  405d0b:	lea    rdi,[rip+0x4ab0]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  405d12:	lea    rsi,[rip+0x38e9]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  405d19:	lea    rcx,[rip+0x4a1d]        # 40a73d <flatcc_builder_padding_base@@Base+0x13cd>
  405d20:	mov    edx,0x2a5
  405d25:	call   403070 <__assert_fail@plt>
  405d2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405d30 <flatcc_builder_create_cached_vtable@@Base>:
  405d30:	push   rbp
  405d31:	push   r15
  405d33:	push   r14
  405d35:	push   r13
  405d37:	push   r12
  405d39:	push   rbx
  405d3a:	sub    rsp,0x28
  405d3e:	mov    r15d,ecx
  405d41:	mov    r12d,edx
  405d44:	mov    QWORD PTR [rsp+0x18],rsi
  405d49:	mov    r14,rdi
  405d4c:	mov    rax,QWORD PTR [rdi+0xd8]
  405d53:	test   rax,rax
  405d56:	je     405e26 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  405d5c:	neg    al
  405d5e:	shrx   r13d,r15d,eax
  405d63:	shl    r13,0x2
  405d67:	add    r13,QWORD PTR [r14+0xa8]
  405d6e:	je     405efa <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  405d74:	mov    ebx,DWORD PTR [r13+0x0]
  405d78:	movzx  eax,r12w
  405d7c:	mov    QWORD PTR [rsp],rax
  405d80:	test   ebx,ebx
  405d82:	je     405f01 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  405d88:	mov    rbp,QWORD PTR [r14+0x78]
  405d8c:	mov    QWORD PTR [rsp+0x10],r14
  405d91:	mov    r15,QWORD PTR [r14+0xb8]
  405d98:	xor    eax,eax
  405d9a:	mov    QWORD PTR [rsp+0x20],rax
  405d9f:	mov    QWORD PTR [rsp+0x8],r13
  405da4:	jmp    405dc3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  405da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405db0:	mov    ebx,DWORD PTR [r14+0xc]
  405db4:	add    r14,0xc
  405db8:	mov    r13,r14
  405dbb:	test   ebx,ebx
  405dbd:	je     405ee9 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  405dc3:	mov    eax,ebx
  405dc5:	lea    r14,[r15+rax*1]
  405dc9:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  405dce:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  405dd4:	jne    405db0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405dd6:	add    rsi,rbp
  405dd9:	mov    rdi,QWORD PTR [rsp+0x18]
  405dde:	mov    rdx,QWORD PTR [rsp]
  405de2:	call   4030e0 <bcmp@plt>
  405de7:	test   eax,eax
  405de9:	jne    405db0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405deb:	mov    eax,DWORD PTR [r14+0x4]
  405def:	mov    rcx,QWORD PTR [rsp+0x10]
  405df4:	cmp    eax,DWORD PTR [rcx+0x100]
  405dfa:	je     40606a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  405e00:	lea    r13,[r14+0xc]
  405e04:	mov    ebx,DWORD PTR [r14+0xc]
  405e08:	mov    rax,r14
  405e0b:	mov    QWORD PTR [rsp+0x20],r14
  405e10:	test   ebx,ebx
  405e12:	jne    405dc3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  405e14:	mov    r15,r14
  405e17:	mov    r14,QWORD PTR [rsp+0x10]
  405e1c:	mov    r13,QWORD PTR [rsp+0x8]
  405e21:	jmp    405f04 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  405e26:	cmp    DWORD PTR [r14+0xe4],0x0
  405e2e:	jne    4060a8 <flatcc_builder_create_cached_vtable@@Base+0x378>
  405e34:	lea    r13,[r14+0xb8]
  405e3b:	cmp    QWORD PTR [r14+0xc0],0xf
  405e43:	ja     405e65 <flatcc_builder_create_cached_vtable@@Base+0x135>
  405e45:	mov    rdi,QWORD PTR [r14+0x40]
  405e49:	mov    edx,0x10
  405e4e:	mov    rsi,r13
  405e51:	xor    ecx,ecx
  405e53:	mov    r8d,0x6
  405e59:	call   QWORD PTR [r14+0x50]
  405e5d:	test   eax,eax
  405e5f:	jne    406089 <flatcc_builder_create_cached_vtable@@Base+0x359>
  405e65:	xor    ebx,ebx
  405e67:	cmp    QWORD PTR [r13+0x0],0x0
  405e6c:	je     406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  405e72:	lea    rsi,[r14+0xa8]
  405e79:	mov    DWORD PTR [r14+0xe4],0x10
  405e84:	mov    rdi,QWORD PTR [r14+0x40]
  405e88:	mov    ebp,0x100
  405e8d:	mov    edx,0x100
  405e92:	mov    ecx,0x1
  405e97:	mov    r8d,0x5
  405e9d:	call   QWORD PTR [r14+0x50]
  405ea1:	test   eax,eax
  405ea3:	jne    406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  405ea9:	mov    rax,QWORD PTR [r14+0xb0]
  405eb0:	mov    rcx,rbp
  405eb3:	add    rbp,rbp
  405eb6:	cmp    rbp,rax
  405eb9:	jbe    405eb0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  405ebb:	shr    rcx,0x2
  405ebf:	mov    rax,0xffffffffffffffff
  405ec6:	mov    edx,0x1
  405ecb:	nop    DWORD PTR [rax+rax*1+0x0]
  405ed0:	inc    rax
  405ed3:	shlx   rsi,rdx,rax
  405ed8:	cmp    rsi,rcx
  405edb:	jb     405ed0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405edd:	mov    QWORD PTR [r14+0xd8],rax
  405ee4:	jmp    405d5c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  405ee9:	mov    r14,QWORD PTR [rsp+0x10]
  405eee:	mov    r13,QWORD PTR [rsp+0x8]
  405ef3:	mov    r15,QWORD PTR [rsp+0x20]
  405ef8:	jmp    405f04 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  405efa:	xor    ebx,ebx
  405efc:	jmp    406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  405f01:	xor    r15d,r15d
  405f04:	mov    r12d,DWORD PTR [r14+0xe4]
  405f0b:	lea    rbp,[r14+0xb8]
  405f12:	lea    rdx,[r12+0x10]
  405f17:	cmp    rdx,QWORD PTR [r14+0xc0]
  405f1e:	jbe    405f3b <flatcc_builder_create_cached_vtable@@Base+0x20b>
  405f20:	mov    rdi,QWORD PTR [r14+0x40]
  405f24:	mov    rsi,rbp
  405f27:	xor    ecx,ecx
  405f29:	mov    r8d,0x6
  405f2f:	call   QWORD PTR [r14+0x50]
  405f33:	test   eax,eax
  405f35:	jne    406089 <flatcc_builder_create_cached_vtable@@Base+0x359>
  405f3b:	xor    ebx,ebx
  405f3d:	add    r12,QWORD PTR [rbp+0x0]
  405f41:	je     406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  405f47:	mov    eax,DWORD PTR [r14+0xe4]
  405f4e:	mov    ecx,DWORD PTR [r14+0x100]
  405f55:	lea    edx,[rax+0x10]
  405f58:	mov    DWORD PTR [r14+0xe4],edx
  405f5f:	mov    DWORD PTR [r12+0x4],ecx
  405f64:	mov    ecx,DWORD PTR [r13+0x0]
  405f68:	mov    DWORD PTR [r12+0xc],ecx
  405f6d:	mov    DWORD PTR [r13+0x0],eax
  405f71:	mov    rdi,r14
  405f74:	mov    rsi,QWORD PTR [rsp+0x18]
  405f79:	mov    rdx,QWORD PTR [rsp]
  405f7d:	call   405be0 <flatcc_builder_create_vtable@@Base>
  405f82:	mov    DWORD PTR [r12],eax
  405f86:	test   eax,eax
  405f88:	je     406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  405f8e:	test   r15,r15
  405f91:	je     405fa1 <flatcc_builder_create_cached_vtable@@Base+0x271>
  405f93:	mov    eax,DWORD PTR [r15+0x8]
  405f97:	mov    DWORD PTR [r12+0x8],eax
  405f9c:	jmp    40604e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  405fa1:	mov    rax,QWORD PTR [r14+0x118]
  405fa8:	mov    ebp,DWORD PTR [r14+0xe0]
  405faf:	test   rax,rax
  405fb2:	je     405ff5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  405fb4:	mov    rcx,QWORD PTR [rsp]
  405fb8:	add    ecx,ebp
  405fba:	cmp    rax,rcx
  405fbd:	jae    405ff5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  405fbf:	cmp    QWORD PTR [r14+0xd8],0x0
  405fc7:	je     40604e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  405fcd:	mov    rdi,QWORD PTR [r14+0xa8]
  405fd4:	mov    rdx,QWORD PTR [r14+0xb0]
  405fdb:	xor    esi,esi
  405fdd:	call   403080 <memset@plt>
  405fe2:	movabs rax,0x1000000000
  405fec:	mov    QWORD PTR [r14+0xe0],rax
  405ff3:	jmp    40604e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  405ff5:	lea    rbx,[r14+0x78]
  405ff9:	mov    rax,QWORD PTR [rsp]
  405ffd:	lea    rdx,[rax+rbp*1]
  406001:	cmp    rdx,QWORD PTR [r14+0x80]
  406008:	jbe    406021 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  40600a:	mov    rdi,QWORD PTR [r14+0x40]
  40600e:	mov    rsi,rbx
  406011:	xor    ecx,ecx
  406013:	mov    r8d,0x2
  406019:	call   QWORD PTR [r14+0x50]
  40601d:	test   eax,eax
  40601f:	jne    406089 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406021:	add    rbp,QWORD PTR [rbx]
  406024:	je     406063 <flatcc_builder_create_cached_vtable@@Base+0x333>
  406026:	mov    eax,DWORD PTR [r14+0xe0]
  40602d:	mov    DWORD PTR [r12+0x8],eax
  406032:	mov    rdx,QWORD PTR [rsp]
  406036:	mov    ecx,edx
  406038:	add    ecx,eax
  40603a:	mov    DWORD PTR [r14+0xe0],ecx
  406041:	mov    rdi,rbp
  406044:	mov    rsi,QWORD PTR [rsp+0x18]
  406049:	call   4030c0 <memcpy@plt>
  40604e:	mov    ebx,DWORD PTR [r12]
  406052:	mov    eax,ebx
  406054:	add    rsp,0x28
  406058:	pop    rbx
  406059:	pop    r12
  40605b:	pop    r13
  40605d:	pop    r14
  40605f:	pop    r15
  406061:	pop    rbp
  406062:	ret    
  406063:	mov    ebx,0xffffffff
  406068:	jmp    406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40606a:	mov    rcx,QWORD PTR [rsp+0x8]
  40606f:	cmp    r13,rcx
  406072:	je     406084 <flatcc_builder_create_cached_vtable@@Base+0x354>
  406074:	mov    eax,DWORD PTR [r14+0xc]
  406078:	mov    DWORD PTR [r13+0x0],eax
  40607c:	mov    eax,DWORD PTR [rcx]
  40607e:	mov    DWORD PTR [r14+0xc],eax
  406082:	mov    DWORD PTR [rcx],ebx
  406084:	mov    ebx,DWORD PTR [r14]
  406087:	jmp    406052 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406089:	lea    rdi,[rip+0x4732]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406090:	lea    rsi,[rip+0x356b]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406097:	lea    rcx,[rip+0x455e]        # 40a5fc <flatcc_builder_padding_base@@Base+0x128c>
  40609e:	mov    edx,0x134
  4060a3:	call   403070 <__assert_fail@plt>
  4060a8:	lea    rdi,[rip+0x46d7]        # 40a786 <flatcc_builder_padding_base@@Base+0x1416>
  4060af:	lea    rsi,[rip+0x354c]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4060b6:	lea    rcx,[rip+0x46d8]        # 40a795 <flatcc_builder_padding_base@@Base+0x1425>
  4060bd:	mov    edx,0x156
  4060c2:	call   403070 <__assert_fail@plt>
  4060c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004060d0 <flatcc_builder_create_table@@Base>:
  4060d0:	push   rbp
  4060d1:	push   r14
  4060d3:	push   rbx
  4060d4:	sub    rsp,0xa0
  4060db:	test   r9d,r9d
  4060de:	js     4062f3 <flatcc_builder_create_table@@Base+0x223>
  4060e4:	mov    r14,rdi
  4060e7:	mov    edi,DWORD PTR [rsp+0xc0]
  4060ee:	test   dil,0x1
  4060f2:	je     406312 <flatcc_builder_create_table@@Base+0x242>
  4060f8:	cmp    cx,0x4
  4060fc:	mov    eax,0x4
  406101:	cmova  eax,ecx
  406104:	cmp    WORD PTR [r14+0xe8],ax
  40610c:	jae    406116 <flatcc_builder_create_table@@Base+0x46>
  40610e:	mov    WORD PTR [r14+0xe8],ax
  406116:	mov    ebp,DWORD PTR [r14+0xf0]
  40611d:	sub    ebp,edx
  40611f:	movzx  r10d,ax
  406123:	dec    r10d
  406126:	and    r10d,ebp
  406129:	add    edi,r10d
  40612c:	neg    edi
  40612e:	lea    ecx,[rdi+rbp*1]
  406131:	add    ecx,0xfffffffd
  406134:	mov    DWORD PTR [rsp+0xc],ecx
  406138:	test   r9d,r9d
  40613b:	jle    4061f6 <flatcc_builder_create_table@@Base+0x126>
  406141:	add    ebp,0xfffffffc
  406144:	sub    ebp,r10d
  406147:	mov    ecx,0xfffffffc
  40614c:	sub    ecx,ebp
  40614e:	mov    edi,r9d
  406151:	lea    rbx,[rdi-0x1]
  406155:	mov    r9d,edi
  406158:	and    r9d,0x3
  40615c:	cmp    rbx,0x3
  406160:	jae    40616e <flatcc_builder_create_table@@Base+0x9e>
  406162:	xor    ebx,ebx
  406164:	test   r9,r9
  406167:	jne    4061cd <flatcc_builder_create_table@@Base+0xfd>
  406169:	jmp    4061f6 <flatcc_builder_create_table@@Base+0x126>
  40616e:	sub    rdi,r9
  406171:	xor    ebx,ebx
  406173:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40617d:	nop    DWORD PTR [rax]
  406180:	movzx  eax,WORD PTR [r8+rbx*2]
  406185:	mov    ebp,DWORD PTR [rax+rsi*1]
  406188:	add    ebp,ecx
  40618a:	sub    ebp,eax
  40618c:	mov    DWORD PTR [rax+rsi*1],ebp
  40618f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406195:	mov    ebp,DWORD PTR [rax+rsi*1]
  406198:	add    ebp,ecx
  40619a:	sub    ebp,eax
  40619c:	mov    DWORD PTR [rax+rsi*1],ebp
  40619f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4061a5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061a8:	add    ebp,ecx
  4061aa:	sub    ebp,eax
  4061ac:	mov    DWORD PTR [rax+rsi*1],ebp
  4061af:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4061b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061b8:	add    ebp,ecx
  4061ba:	sub    ebp,eax
  4061bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4061bf:	add    rbx,0x4
  4061c3:	cmp    rdi,rbx
  4061c6:	jne    406180 <flatcc_builder_create_table@@Base+0xb0>
  4061c8:	test   r9,r9
  4061cb:	je     4061f6 <flatcc_builder_create_table@@Base+0x126>
  4061cd:	lea    rdi,[r8+rbx*2]
  4061d1:	xor    ebx,ebx
  4061d3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4061dd:	nop    DWORD PTR [rax]
  4061e0:	movzx  eax,WORD PTR [rdi+rbx*2]
  4061e4:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061e7:	add    ebp,ecx
  4061e9:	sub    ebp,eax
  4061eb:	mov    DWORD PTR [rax+rsi*1],ebp
  4061ee:	inc    rbx
  4061f1:	cmp    r9,rbx
  4061f4:	jne    4061e0 <flatcc_builder_create_table@@Base+0x110>
  4061f6:	mov    QWORD PTR [rsp+0x10],0x4
  4061ff:	lea    rax,[rsp+0xc]
  406204:	mov    QWORD PTR [rsp+0x20],rax
  406209:	mov    QWORD PTR [rsp+0x28],0x4
  406212:	mov    DWORD PTR [rsp+0x18],0x1
  40621a:	test   rdx,rdx
  40621d:	je     4062be <flatcc_builder_create_table@@Base+0x1ee>
  406223:	lea    r8,[rdx+0x4]
  406227:	mov    QWORD PTR [rsp+0x10],r8
  40622c:	mov    QWORD PTR [rsp+0x30],rsi
  406231:	mov    QWORD PTR [rsp+0x38],rdx
  406236:	mov    DWORD PTR [rsp+0x18],0x2
  40623e:	mov    edx,0x2
  406243:	test   r10d,r10d
  406246:	je     40626d <flatcc_builder_create_table@@Base+0x19d>
  406248:	add    r8,r10
  40624b:	mov    QWORD PTR [rsp+0x10],r8
  406250:	mov    eax,edx
  406252:	shl    rax,0x4
  406256:	lea    rcx,[rip+0x3113]        # 409370 <flatcc_builder_padding_base@@Base>
  40625d:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406262:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406267:	inc    edx
  406269:	mov    DWORD PTR [rsp+0x18],edx
  40626d:	cmp    r8,0x11
  406271:	setb   al
  406274:	lea    rcx,[r8-0x10]
  406278:	shr    rcx,0x20
  40627c:	sete   cl
  40627f:	test   r8d,r8d
  406282:	jle    4062d4 <flatcc_builder_create_table@@Base+0x204>
  406284:	or     al,cl
  406286:	je     4062d4 <flatcc_builder_create_table@@Base+0x204>
  406288:	mov    ebp,DWORD PTR [r14+0xf0]
  40628f:	sub    ebp,r8d
  406292:	mov    rdi,QWORD PTR [r14+0x38]
  406296:	lea    rsi,[rsp+0x20]
  40629b:	mov    ecx,ebp
  40629d:	call   QWORD PTR [r14+0x48]
  4062a1:	test   eax,eax
  4062a3:	jne    406331 <flatcc_builder_create_table@@Base+0x261>
  4062a9:	mov    DWORD PTR [r14+0xf0],ebp
  4062b0:	mov    eax,ebp
  4062b2:	add    rsp,0xa0
  4062b9:	pop    rbx
  4062ba:	pop    r14
  4062bc:	pop    rbp
  4062bd:	ret    
  4062be:	mov    r8d,0x4
  4062c4:	mov    edx,0x1
  4062c9:	test   r10d,r10d
  4062cc:	jne    406248 <flatcc_builder_create_table@@Base+0x178>
  4062d2:	jmp    40626d <flatcc_builder_create_table@@Base+0x19d>
  4062d4:	lea    rdi,[rip+0x44e7]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  4062db:	lea    rsi,[rip+0x3320]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4062e2:	lea    rcx,[rip+0x4398]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  4062e9:	mov    edx,0x287
  4062ee:	call   403070 <__assert_fail@plt>
  4062f3:	lea    rdi,[rip+0x3a7e]        # 409d78 <flatcc_builder_padding_base@@Base+0xa08>
  4062fa:	lea    rsi,[rip+0x3301]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406301:	lea    rcx,[rip+0x3a82]        # 409d8a <flatcc_builder_padding_base@@Base+0xa1a>
  406308:	mov    edx,0x4d5
  40630d:	call   403070 <__assert_fail@plt>
  406312:	lea    rdi,[rip+0x3b0d]        # 409e26 <flatcc_builder_padding_base@@Base+0xab6>
  406319:	lea    rsi,[rip+0x32e2]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406320:	lea    rcx,[rip+0x3a63]        # 409d8a <flatcc_builder_padding_base@@Base+0xa1a>
  406327:	mov    edx,0x4db
  40632c:	call   403070 <__assert_fail@plt>
  406331:	lea    rdi,[rip+0x448a]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406338:	lea    rsi,[rip+0x32c3]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40633f:	lea    rcx,[rip+0x433b]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  406346:	mov    edx,0x28b
  40634b:	call   403070 <__assert_fail@plt>

0000000000406350 <flatcc_builder_check_required_field@@Base>:
  406350:	push   rax
  406351:	mov    rax,QWORD PTR [rdi+0x30]
  406355:	cmp    WORD PTR [rax+0xe],0x3
  40635a:	jne    406377 <flatcc_builder_check_required_field@@Base+0x27>
  40635c:	xor    eax,eax
  40635e:	cmp    WORD PTR [rdi+0x10],si
  406362:	jbe    406375 <flatcc_builder_check_required_field@@Base+0x25>
  406364:	mov    rcx,QWORD PTR [rdi+0x8]
  406368:	movzx  edx,si
  40636b:	xor    eax,eax
  40636d:	cmp    WORD PTR [rcx+rdx*2],0x0
  406372:	setne  al
  406375:	pop    rcx
  406376:	ret    
  406377:	lea    rdi,[rip+0x3ab3]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  40637e:	lea    rsi,[rip+0x327d]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406385:	lea    rcx,[rip+0x3ad0]        # 409e5c <flatcc_builder_padding_base@@Base+0xaec>
  40638c:	mov    edx,0x4f8
  406391:	call   403070 <__assert_fail@plt>
  406396:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004063a0 <flatcc_builder_check_union_field@@Base>:
  4063a0:	push   rax
  4063a1:	mov    rax,QWORD PTR [rdi+0x30]
  4063a5:	cmp    WORD PTR [rax+0xe],0x3
  4063aa:	jne    4063f4 <flatcc_builder_check_union_field@@Base+0x54>
  4063ac:	test   si,si
  4063af:	je     4063de <flatcc_builder_check_union_field@@Base+0x3e>
  4063b1:	cmp    WORD PTR [rdi+0x10],si
  4063b5:	jbe    4063de <flatcc_builder_check_union_field@@Base+0x3e>
  4063b7:	movzx  eax,si
  4063ba:	mov    rcx,QWORD PTR [rdi+0x8]
  4063be:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  4063c3:	test   rdx,rdx
  4063c6:	je     4063e2 <flatcc_builder_check_union_field@@Base+0x42>
  4063c8:	mov    rsi,QWORD PTR [rdi+0x18]
  4063cc:	cmp    BYTE PTR [rsi+rdx*1],0x0
  4063d0:	movzx  eax,WORD PTR [rcx+rax*2]
  4063d4:	je     4063e9 <flatcc_builder_check_union_field@@Base+0x49>
  4063d6:	test   ax,ax
  4063d9:	setne  al
  4063dc:	jmp    4063ef <flatcc_builder_check_union_field@@Base+0x4f>
  4063de:	xor    eax,eax
  4063e0:	jmp    4063ef <flatcc_builder_check_union_field@@Base+0x4f>
  4063e2:	cmp    WORD PTR [rcx+rax*2],0x0
  4063e7:	jmp    4063ec <flatcc_builder_check_union_field@@Base+0x4c>
  4063e9:	test   ax,ax
  4063ec:	sete   al
  4063ef:	movzx  eax,al
  4063f2:	pop    rcx
  4063f3:	ret    
  4063f4:	lea    rdi,[rip+0x3a36]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  4063fb:	lea    rsi,[rip+0x3200]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406402:	lea    rcx,[rip+0x3aa6]        # 409eaf <flatcc_builder_padding_base@@Base+0xb3f>
  406409:	mov    edx,0x4ff
  40640e:	call   403070 <__assert_fail@plt>
  406413:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40641d:	nop    DWORD PTR [rax]

0000000000406420 <flatcc_builder_check_required@@Base>:
  406420:	push   rax
  406421:	mov    rax,QWORD PTR [rdi+0x30]
  406425:	cmp    WORD PTR [rax+0xe],0x3
  40642a:	jne    406469 <flatcc_builder_check_required@@Base+0x49>
  40642c:	movzx  ecx,WORD PTR [rdi+0x10]
  406430:	xor    eax,eax
  406432:	cmp    ecx,edx
  406434:	jl     406463 <flatcc_builder_check_required@@Base+0x43>
  406436:	mov    eax,0x1
  40643b:	test   edx,edx
  40643d:	jle    406463 <flatcc_builder_check_required@@Base+0x43>
  40643f:	mov    rcx,QWORD PTR [rdi+0x8]
  406443:	mov    r8d,edx
  406446:	xor    edi,edi
  406448:	nop    DWORD PTR [rax+rax*1+0x0]
  406450:	movzx  edx,WORD PTR [rsi+rdi*2]
  406454:	cmp    WORD PTR [rcx+rdx*2],0x0
  406459:	je     406465 <flatcc_builder_check_required@@Base+0x45>
  40645b:	inc    rdi
  40645e:	cmp    r8,rdi
  406461:	jne    406450 <flatcc_builder_check_required@@Base+0x30>
  406463:	pop    rcx
  406464:	ret    
  406465:	xor    eax,eax
  406467:	pop    rcx
  406468:	ret    
  406469:	lea    rdi,[rip+0x39c1]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  406470:	lea    rsi,[rip+0x318b]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406477:	lea    rcx,[rip+0x3a81]        # 409eff <flatcc_builder_padding_base@@Base+0xb8f>
  40647e:	mov    edx,0x511
  406483:	call   403070 <__assert_fail@plt>
  406488:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406490 <flatcc_builder_end_table@@Base>:
  406490:	push   rbp
  406491:	push   r15
  406493:	push   r14
  406495:	push   r12
  406497:	push   rbx
  406498:	sub    rsp,0x10
  40649c:	mov    rax,QWORD PTR [rdi+0x30]
  4064a0:	cmp    WORD PTR [rax+0xe],0x3
  4064a5:	jne    4065f5 <flatcc_builder_end_table@@Base+0x165>
  4064ab:	mov    rbx,rdi
  4064ae:	mov    rax,QWORD PTR [rdi+0x8]
  4064b2:	mov    ecx,DWORD PTR [rdi+0x10]
  4064b5:	lea    ecx,[rcx+rcx*1]
  4064b8:	add    ecx,0x4
  4064bb:	mov    WORD PTR [rax-0x4],cx
  4064bf:	mov    edx,DWORD PTR [rdi+0x20]
  4064c2:	add    edx,0x4
  4064c5:	mov    WORD PTR [rax-0x2],dx
  4064c9:	lea    r12,[rax-0x4]
  4064cd:	movzx  ebp,cx
  4064d0:	mov    eax,DWORD PTR [rdi+0x14]
  4064d3:	xor    eax,ebp
  4064d5:	imul   eax,eax,0x9e3779b1
  4064db:	movzx  ecx,dx
  4064de:	xor    ecx,eax
  4064e0:	imul   ecx,ecx,0x9e3779b1
  4064e6:	mov    DWORD PTR [rdi+0x14],ecx
  4064e9:	mov    rsi,r12
  4064ec:	mov    edx,ebp
  4064ee:	call   405d30 <flatcc_builder_create_cached_vtable@@Base>
  4064f3:	test   eax,eax
  4064f5:	je     4065e2 <flatcc_builder_end_table@@Base+0x152>
  4064fb:	mov    r14d,eax
  4064fe:	xor    r15d,r15d
  406501:	mov    rdi,r12
  406504:	xor    esi,esi
  406506:	mov    rdx,rbp
  406509:	call   403080 <memset@plt>
  40650e:	mov    rax,QWORD PTR [rbx+0x30]
  406512:	mov    r8d,DWORD PTR [rax+0x14]
  406516:	add    r8,QWORD PTR [rbx+0x88]
  40651d:	mov    r9,QWORD PTR [rbx]
  406520:	mov    rsi,QWORD PTR [rbx+0x18]
  406524:	sub    r9,r8
  406527:	shr    r9,1
  40652a:	mov    edx,DWORD PTR [rbx+0x20]
  40652d:	movzx  ecx,WORD PTR [rbx+0xea]
  406534:	mov    DWORD PTR [rsp],r14d
  406538:	mov    rdi,rbx
  40653b:	call   4060d0 <flatcc_builder_create_table@@Base>
  406540:	test   eax,eax
  406542:	je     4065e5 <flatcc_builder_end_table@@Base+0x155>
  406548:	mov    r14d,eax
  40654b:	mov    rax,QWORD PTR [rbx+0x30]
  40654f:	mov    ecx,DWORD PTR [rax+0x18]
  406552:	mov    DWORD PTR [rbx+0x14],ecx
  406555:	movzx  ecx,WORD PTR [rax+0x1c]
  406559:	mov    WORD PTR [rbx+0x10],cx
  40655d:	mov    ecx,DWORD PTR [rax+0x10]
  406560:	add    rcx,QWORD PTR [rbx+0x58]
  406564:	mov    QWORD PTR [rbx+0x8],rcx
  406568:	mov    eax,DWORD PTR [rax+0x14]
  40656b:	add    rax,QWORD PTR [rbx+0x88]
  406572:	mov    QWORD PTR [rbx],rax
  406575:	mov    rdi,QWORD PTR [rbx+0x18]
  406579:	mov    edx,DWORD PTR [rbx+0x20]
  40657c:	xor    esi,esi
  40657e:	call   403080 <memset@plt>
  406583:	mov    rax,QWORD PTR [rbx+0x30]
  406587:	mov    ecx,DWORD PTR [rax+0x8]
  40658a:	mov    DWORD PTR [rbx+0x20],ecx
  40658d:	mov    ecx,DWORD PTR [rax]
  40658f:	mov    DWORD PTR [rbx+0x28],ecx
  406592:	mov    edx,DWORD PTR [rax+0x4]
  406595:	mov    rsi,rcx
  406598:	add    rsi,QWORD PTR [rbx+0x68]
  40659c:	mov    QWORD PTR [rbx+0x18],rsi
  4065a0:	mov    esi,DWORD PTR [rbx+0x70]
  4065a3:	sub    esi,ecx
  4065a5:	cmp    esi,edx
  4065a7:	cmova  esi,edx
  4065aa:	mov    DWORD PTR [rbx+0x24],esi
  4065ad:	movzx  ecx,WORD PTR [rbx+0xea]
  4065b4:	cmp    WORD PTR [rbx+0xe8],cx
  4065bb:	jae    4065c4 <flatcc_builder_end_table@@Base+0x134>
  4065bd:	mov    WORD PTR [rbx+0xe8],cx
  4065c4:	movzx  ecx,WORD PTR [rax+0xc]
  4065c8:	mov    WORD PTR [rbx+0xea],cx
  4065cf:	add    rax,0xffffffffffffffdc
  4065d3:	mov    QWORD PTR [rbx+0x30],rax
  4065d7:	dec    DWORD PTR [rbx+0x104]
  4065dd:	mov    r15d,r14d
  4065e0:	jmp    4065e5 <flatcc_builder_end_table@@Base+0x155>
  4065e2:	xor    r15d,r15d
  4065e5:	mov    eax,r15d
  4065e8:	add    rsp,0x10
  4065ec:	pop    rbx
  4065ed:	pop    r12
  4065ef:	pop    r14
  4065f1:	pop    r15
  4065f3:	pop    rbp
  4065f4:	ret    
  4065f5:	lea    rdi,[rip+0x3835]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  4065fc:	lea    rsi,[rip+0x2fff]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406603:	lea    rcx,[rip+0x394f]        # 409f59 <flatcc_builder_padding_base@@Base+0xbe9>
  40660a:	mov    edx,0x525
  40660f:	call   403070 <__assert_fail@plt>
  406614:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40661e:	xchg   ax,ax

0000000000406620 <flatcc_builder_create_vector@@Base>:
  406620:	push   rbp
  406621:	push   rbx
  406622:	sub    rsp,0x98
  406629:	cmp    rdx,r9
  40662c:	ja     406756 <flatcc_builder_create_vector@@Base+0x136>
  406632:	mov    rbx,rdi
  406635:	cmp    r8w,0x4
  40663a:	mov    eax,0x4
  40663f:	cmova  eax,r8d
  406643:	cmp    WORD PTR [rdi+0xe8],ax
  40664a:	jae    406653 <flatcc_builder_create_vector@@Base+0x33>
  40664c:	mov    WORD PTR [rbx+0xe8],ax
  406653:	imul   ecx,edx
  406656:	mov    DWORD PTR [rsp+0x4],edx
  40665a:	mov    ebp,DWORD PTR [rbx+0xf0]
  406660:	mov    edx,ebp
  406662:	sub    edx,ecx
  406664:	movzx  eax,ax
  406667:	dec    eax
  406669:	and    eax,edx
  40666b:	mov    QWORD PTR [rsp+0x8],0x4
  406674:	lea    rdx,[rsp+0x4]
  406679:	mov    QWORD PTR [rsp+0x18],rdx
  40667e:	mov    QWORD PTR [rsp+0x20],0x4
  406687:	mov    DWORD PTR [rsp+0x10],0x1
  40668f:	test   ecx,ecx
  406691:	je     406726 <flatcc_builder_create_vector@@Base+0x106>
  406697:	mov    ecx,ecx
  406699:	lea    r8,[rcx+0x4]
  40669d:	mov    QWORD PTR [rsp+0x8],r8
  4066a2:	mov    QWORD PTR [rsp+0x28],rsi
  4066a7:	mov    QWORD PTR [rsp+0x30],rcx
  4066ac:	mov    DWORD PTR [rsp+0x10],0x2
  4066b4:	mov    edx,0x2
  4066b9:	test   eax,eax
  4066bb:	je     4066e4 <flatcc_builder_create_vector@@Base+0xc4>
  4066bd:	mov    eax,eax
  4066bf:	add    r8,rax
  4066c2:	mov    QWORD PTR [rsp+0x8],r8
  4066c7:	mov    ecx,edx
  4066c9:	shl    rcx,0x4
  4066cd:	lea    rsi,[rip+0x2c9c]        # 409370 <flatcc_builder_padding_base@@Base>
  4066d4:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  4066d9:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  4066de:	inc    edx
  4066e0:	mov    DWORD PTR [rsp+0x10],edx
  4066e4:	cmp    r8,0x11
  4066e8:	setb   al
  4066eb:	lea    rcx,[r8-0x10]
  4066ef:	shr    rcx,0x20
  4066f3:	sete   cl
  4066f6:	test   r8d,r8d
  4066f9:	jle    406737 <flatcc_builder_create_vector@@Base+0x117>
  4066fb:	or     al,cl
  4066fd:	je     406737 <flatcc_builder_create_vector@@Base+0x117>
  4066ff:	sub    ebp,r8d
  406702:	mov    rdi,QWORD PTR [rbx+0x38]
  406706:	lea    rsi,[rsp+0x18]
  40670b:	mov    ecx,ebp
  40670d:	call   QWORD PTR [rbx+0x48]
  406710:	test   eax,eax
  406712:	jne    406775 <flatcc_builder_create_vector@@Base+0x155>
  406714:	mov    DWORD PTR [rbx+0xf0],ebp
  40671a:	mov    eax,ebp
  40671c:	add    rsp,0x98
  406723:	pop    rbx
  406724:	pop    rbp
  406725:	ret    
  406726:	mov    r8d,0x4
  40672c:	mov    edx,0x1
  406731:	test   eax,eax
  406733:	jne    4066bd <flatcc_builder_create_vector@@Base+0x9d>
  406735:	jmp    4066e4 <flatcc_builder_create_vector@@Base+0xc4>
  406737:	lea    rdi,[rip+0x4084]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40673e:	lea    rsi,[rip+0x2ebd]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406745:	lea    rcx,[rip+0x3f35]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  40674c:	mov    edx,0x287
  406751:	call   403070 <__assert_fail@plt>
  406756:	lea    rdi,[rip+0x383e]        # 409f9b <flatcc_builder_padding_base@@Base+0xc2b>
  40675d:	lea    rsi,[rip+0x2e9e]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406764:	lea    rcx,[rip+0x3843]        # 409fae <flatcc_builder_padding_base@@Base+0xc3e>
  40676b:	mov    edx,0x555
  406770:	call   403070 <__assert_fail@plt>
  406775:	lea    rdi,[rip+0x4046]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  40677c:	lea    rsi,[rip+0x2e7f]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406783:	lea    rcx,[rip+0x3ef7]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  40678a:	mov    edx,0x28b
  40678f:	call   403070 <__assert_fail@plt>
  406794:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40679e:	xchg   ax,ax

00000000004067a0 <flatcc_builder_end_vector@@Base>:
  4067a0:	push   rbp
  4067a1:	push   rbx
  4067a2:	push   rax
  4067a3:	mov    rax,QWORD PTR [rdi+0x30]
  4067a7:	cmp    WORD PTR [rax+0xe],0x4
  4067ac:	jne    406847 <flatcc_builder_end_vector@@Base+0xa7>
  4067b2:	mov    rbx,rdi
  4067b5:	mov    rsi,QWORD PTR [rdi+0x18]
  4067b9:	mov    ecx,DWORD PTR [rax+0x10]
  4067bc:	mov    edx,DWORD PTR [rax+0x14]
  4067bf:	movzx  r8d,WORD PTR [rdi+0xea]
  4067c7:	mov    r9d,DWORD PTR [rax+0x18]
  4067cb:	call   406620 <flatcc_builder_create_vector@@Base>
  4067d0:	mov    ebp,eax
  4067d2:	test   eax,eax
  4067d4:	je     40683e <flatcc_builder_end_vector@@Base+0x9e>
  4067d6:	mov    rdi,QWORD PTR [rbx+0x18]
  4067da:	mov    edx,DWORD PTR [rbx+0x20]
  4067dd:	xor    esi,esi
  4067df:	call   403080 <memset@plt>
  4067e4:	mov    rax,QWORD PTR [rbx+0x30]
  4067e8:	mov    ecx,DWORD PTR [rax+0x8]
  4067eb:	mov    DWORD PTR [rbx+0x20],ecx
  4067ee:	mov    ecx,DWORD PTR [rax]
  4067f0:	mov    DWORD PTR [rbx+0x28],ecx
  4067f3:	mov    edx,DWORD PTR [rax+0x4]
  4067f6:	mov    rsi,rcx
  4067f9:	add    rsi,QWORD PTR [rbx+0x68]
  4067fd:	mov    QWORD PTR [rbx+0x18],rsi
  406801:	mov    esi,DWORD PTR [rbx+0x70]
  406804:	sub    esi,ecx
  406806:	cmp    esi,edx
  406808:	cmova  esi,edx
  40680b:	mov    DWORD PTR [rbx+0x24],esi
  40680e:	movzx  ecx,WORD PTR [rbx+0xea]
  406815:	cmp    WORD PTR [rbx+0xe8],cx
  40681c:	jae    406825 <flatcc_builder_end_vector@@Base+0x85>
  40681e:	mov    WORD PTR [rbx+0xe8],cx
  406825:	movzx  ecx,WORD PTR [rax+0xc]
  406829:	mov    WORD PTR [rbx+0xea],cx
  406830:	add    rax,0xffffffffffffffdc
  406834:	mov    QWORD PTR [rbx+0x30],rax
  406838:	dec    DWORD PTR [rbx+0x104]
  40683e:	mov    eax,ebp
  406840:	add    rsp,0x8
  406844:	pop    rbx
  406845:	pop    rbp
  406846:	ret    
  406847:	lea    rdi,[rip+0x30f1]        # 40993f <flatcc_builder_padding_base@@Base+0x5cf>
  40684e:	lea    rsi,[rip+0x2dad]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406855:	lea    rcx,[rip+0x37c8]        # 40a024 <flatcc_builder_padding_base@@Base+0xcb4>
  40685c:	mov    edx,0x578
  406861:	call   403070 <__assert_fail@plt>
  406866:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406870 <flatcc_builder_vector_count@@Base>:
  406870:	mov    rax,QWORD PTR [rdi+0x30]
  406874:	mov    eax,DWORD PTR [rax+0x14]
  406877:	ret    
  406878:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406880 <flatcc_builder_vector_edit@@Base>:
  406880:	mov    rax,QWORD PTR [rdi+0x18]
  406884:	ret    
  406885:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40688f:	nop

0000000000406890 <flatcc_builder_create_offset_vector_direct@@Base>:
  406890:	xor    ecx,ecx
  406892:	jmp    4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406894:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40689e:	xchg   ax,ax
  4068a0:	push   r14
  4068a2:	push   rbx
  4068a3:	sub    rsp,0x98
  4068aa:	mov    r10,rdx
  4068ad:	xor    ebx,ebx
  4068af:	test   r10d,0xc0000000
  4068b6:	jne    406a29 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  4068bc:	mov    r14,rdi
  4068bf:	cmp    WORD PTR [rdi+0xe8],0x3
  4068c7:	ja     4068d3 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  4068c9:	mov    WORD PTR [r14+0xe8],0x4
  4068d3:	lea    r8d,[r10*4+0x0]
  4068db:	mov    DWORD PTR [rsp+0x4],r10d
  4068e0:	mov    ebx,DWORD PTR [r14+0xf0]
  4068e7:	mov    r9d,ebx
  4068ea:	and    r9d,0x3
  4068ee:	mov    QWORD PTR [rsp+0x8],0x4
  4068f7:	lea    rdx,[rsp+0x4]
  4068fc:	mov    QWORD PTR [rsp+0x18],rdx
  406901:	mov    QWORD PTR [rsp+0x20],0x4
  40690a:	mov    DWORD PTR [rsp+0x10],0x1
  406912:	test   r8d,r8d
  406915:	je     406a36 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  40691b:	mov    edx,r8d
  40691e:	lea    r8,[rdx+0x4]
  406922:	mov    QWORD PTR [rsp+0x8],r8
  406927:	mov    QWORD PTR [rsp+0x28],rsi
  40692c:	mov    QWORD PTR [rsp+0x30],rdx
  406931:	mov    DWORD PTR [rsp+0x10],0x2
  406939:	mov    edx,0x2
  40693e:	test   r9d,r9d
  406941:	je     406968 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406943:	add    r8,r9
  406946:	mov    QWORD PTR [rsp+0x8],r8
  40694b:	mov    edi,edx
  40694d:	shl    rdi,0x4
  406951:	lea    rax,[rip+0x2a18]        # 409370 <flatcc_builder_padding_base@@Base>
  406958:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40695d:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406962:	inc    edx
  406964:	mov    DWORD PTR [rsp+0x10],edx
  406968:	test   r10d,r10d
  40696b:	je     4069e5 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  40696d:	mov    edi,r8d
  406970:	sub    edi,ebx
  406972:	add    edi,0xfffffffc
  406975:	mov    r9d,r10d
  406978:	xor    ebx,ebx
  40697a:	jmp    40698b <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  40697c:	nop    DWORD PTR [rax+0x0]
  406980:	inc    rbx
  406983:	add    edi,0xfffffffc
  406986:	cmp    r9,rbx
  406989:	je     4069de <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  40698b:	mov    eax,DWORD PTR [rsi+rbx*4]
  40698e:	test   eax,eax
  406990:	je     4069b0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  406992:	add    eax,edi
  406994:	mov    DWORD PTR [rsi+rbx*4],eax
  406997:	test   rcx,rcx
  40699a:	je     406980 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  40699c:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4069a0:	jne    406980 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  4069a2:	jmp    406a4f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  4069a7:	nop    WORD PTR [rax+rax*1+0x0]
  4069b0:	test   rcx,rcx
  4069b3:	je     406a6e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  4069b9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4069bd:	je     406980 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  4069bf:	lea    rdi,[rip+0x3e81]        # 40a847 <flatcc_builder_padding_base@@Base+0x14d7>
  4069c6:	lea    rsi,[rip+0x2c35]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4069cd:	lea    rcx,[rip+0x3df0]        # 40a7c4 <flatcc_builder_padding_base@@Base+0x1454>
  4069d4:	mov    edx,0x5b5
  4069d9:	call   403070 <__assert_fail@plt>
  4069de:	mov    ebx,DWORD PTR [r14+0xf0]
  4069e5:	cmp    r8,0x11
  4069e9:	setb   al
  4069ec:	lea    rcx,[r8-0x10]
  4069f0:	shr    rcx,0x20
  4069f4:	sete   cl
  4069f7:	test   r8d,r8d
  4069fa:	jle    406a8d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406a00:	or     al,cl
  406a02:	je     406a8d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406a08:	sub    ebx,r8d
  406a0b:	mov    rdi,QWORD PTR [r14+0x38]
  406a0f:	lea    rsi,[rsp+0x18]
  406a14:	mov    ecx,ebx
  406a16:	call   QWORD PTR [r14+0x48]
  406a1a:	test   eax,eax
  406a1c:	jne    406aac <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406a22:	mov    DWORD PTR [r14+0xf0],ebx
  406a29:	mov    eax,ebx
  406a2b:	add    rsp,0x98
  406a32:	pop    rbx
  406a33:	pop    r14
  406a35:	ret    
  406a36:	mov    r8d,0x4
  406a3c:	mov    edx,0x1
  406a41:	test   r9d,r9d
  406a44:	jne    406943 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  406a4a:	jmp    406968 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406a4f:	lea    rdi,[rip+0x3d60]        # 40a7b6 <flatcc_builder_padding_base@@Base+0x1446>
  406a56:	lea    rsi,[rip+0x2ba5]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406a5d:	lea    rcx,[rip+0x3d60]        # 40a7c4 <flatcc_builder_padding_base@@Base+0x1454>
  406a64:	mov    edx,0x5b1
  406a69:	call   403070 <__assert_fail@plt>
  406a6e:	lea    rdi,[rip+0x3d4d]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406a75:	lea    rsi,[rip+0x2b86]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406a7c:	lea    rcx,[rip+0x3d41]        # 40a7c4 <flatcc_builder_padding_base@@Base+0x1454>
  406a83:	mov    edx,0x5b7
  406a88:	call   403070 <__assert_fail@plt>
  406a8d:	lea    rdi,[rip+0x3d2e]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406a94:	lea    rsi,[rip+0x2b67]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406a9b:	lea    rcx,[rip+0x3bdf]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  406aa2:	mov    edx,0x287
  406aa7:	call   403070 <__assert_fail@plt>
  406aac:	lea    rdi,[rip+0x3d0f]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406ab3:	lea    rsi,[rip+0x2b48]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406aba:	lea    rcx,[rip+0x3bc0]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  406ac1:	mov    edx,0x28b
  406ac6:	call   403070 <__assert_fail@plt>
  406acb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406ad0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406ad0:	push   rbp
  406ad1:	push   rbx
  406ad2:	push   rax
  406ad3:	mov    rax,QWORD PTR [rdi+0x30]
  406ad7:	cmp    WORD PTR [rax+0xe],0x5
  406adc:	jne    406b6b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  406ae2:	mov    rcx,rsi
  406ae5:	mov    rbx,rdi
  406ae8:	mov    rsi,QWORD PTR [rdi+0x18]
  406aec:	mov    edx,DWORD PTR [rax+0x14]
  406aef:	call   4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406af4:	mov    ebp,eax
  406af6:	test   eax,eax
  406af8:	je     406b62 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  406afa:	mov    rdi,QWORD PTR [rbx+0x18]
  406afe:	mov    edx,DWORD PTR [rbx+0x20]
  406b01:	xor    esi,esi
  406b03:	call   403080 <memset@plt>
  406b08:	mov    rax,QWORD PTR [rbx+0x30]
  406b0c:	mov    ecx,DWORD PTR [rax+0x8]
  406b0f:	mov    DWORD PTR [rbx+0x20],ecx
  406b12:	mov    ecx,DWORD PTR [rax]
  406b14:	mov    DWORD PTR [rbx+0x28],ecx
  406b17:	mov    edx,DWORD PTR [rax+0x4]
  406b1a:	mov    rsi,rcx
  406b1d:	add    rsi,QWORD PTR [rbx+0x68]
  406b21:	mov    QWORD PTR [rbx+0x18],rsi
  406b25:	mov    esi,DWORD PTR [rbx+0x70]
  406b28:	sub    esi,ecx
  406b2a:	cmp    esi,edx
  406b2c:	cmova  esi,edx
  406b2f:	mov    DWORD PTR [rbx+0x24],esi
  406b32:	movzx  ecx,WORD PTR [rbx+0xea]
  406b39:	cmp    WORD PTR [rbx+0xe8],cx
  406b40:	jae    406b49 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  406b42:	mov    WORD PTR [rbx+0xe8],cx
  406b49:	movzx  ecx,WORD PTR [rax+0xc]
  406b4d:	mov    WORD PTR [rbx+0xea],cx
  406b54:	add    rax,0xffffffffffffffdc
  406b58:	mov    QWORD PTR [rbx+0x30],rax
  406b5c:	dec    DWORD PTR [rbx+0x104]
  406b62:	mov    eax,ebp
  406b64:	add    rsp,0x8
  406b68:	pop    rbx
  406b69:	pop    rbp
  406b6a:	ret    
  406b6b:	lea    rdi,[rip+0x2ec6]        # 409a38 <flatcc_builder_padding_base@@Base+0x6c8>
  406b72:	lea    rsi,[rip+0x2a89]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406b79:	lea    rcx,[rip+0x3531]        # 40a0b1 <flatcc_builder_padding_base@@Base+0xd41>
  406b80:	mov    edx,0x5d5
  406b85:	call   403070 <__assert_fail@plt>
  406b8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406b90 <flatcc_builder_offset_vector_edit@@Base>:
  406b90:	mov    rax,QWORD PTR [rdi+0x18]
  406b94:	ret    
  406b95:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b9f:	nop

0000000000406ba0 <flatcc_builder_offset_vector_count@@Base>:
  406ba0:	mov    rax,QWORD PTR [rdi+0x30]
  406ba4:	mov    eax,DWORD PTR [rax+0x14]
  406ba7:	ret    
  406ba8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406bb0 <flatcc_builder_table_add_union@@Base>:
  406bb0:	push   rbp
  406bb1:	push   r15
  406bb3:	push   r14
  406bb5:	push   rbx
  406bb6:	push   rax
  406bb7:	mov    rax,QWORD PTR [rdi+0x30]
  406bbb:	cmp    WORD PTR [rax+0xe],0x3
  406bc0:	jne    406c1e <flatcc_builder_table_add_union@@Base+0x6e>
  406bc2:	mov    r14,rdx
  406bc5:	mov    ebp,esi
  406bc7:	mov    r15,rdi
  406bca:	mov    rbx,rdx
  406bcd:	shr    rbx,0x20
  406bd1:	test   r14b,r14b
  406bd4:	jne    406bda <flatcc_builder_table_add_union@@Base+0x2a>
  406bd6:	test   ebx,ebx
  406bd8:	jne    406c3d <flatcc_builder_table_add_union@@Base+0x8d>
  406bda:	test   ebx,ebx
  406bdc:	je     406bf3 <flatcc_builder_table_add_union@@Base+0x43>
  406bde:	mov    rdi,r15
  406be1:	mov    esi,ebp
  406be3:	call   406ca0 <flatcc_builder_table_add_offset@@Base>
  406be8:	test   rax,rax
  406beb:	je     406c7b <flatcc_builder_table_add_union@@Base+0xcb>
  406bf1:	mov    DWORD PTR [rax],ebx
  406bf3:	dec    ebp
  406bf5:	mov    edx,0x1
  406bfa:	mov    rdi,r15
  406bfd:	mov    esi,ebp
  406bff:	mov    ecx,0x1
  406c04:	call   406e00 <flatcc_builder_table_add@@Base>
  406c09:	test   rax,rax
  406c0c:	je     406c5c <flatcc_builder_table_add_union@@Base+0xac>
  406c0e:	mov    BYTE PTR [rax],r14b
  406c11:	xor    eax,eax
  406c13:	add    rsp,0x8
  406c17:	pop    rbx
  406c18:	pop    r14
  406c1a:	pop    r15
  406c1c:	pop    rbp
  406c1d:	ret    
  406c1e:	lea    rdi,[rip+0x320c]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  406c25:	lea    rsi,[rip+0x29d6]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406c2c:	lea    rcx,[rip+0x34f0]        # 40a123 <flatcc_builder_padding_base@@Base+0xdb3>
  406c33:	mov    edx,0x5ee
  406c38:	call   403070 <__assert_fail@plt>
  406c3d:	lea    rdi,[rip+0x3537]        # 40a17b <flatcc_builder_padding_base@@Base+0xe0b>
  406c44:	lea    rsi,[rip+0x29b7]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406c4b:	lea    rcx,[rip+0x34d1]        # 40a123 <flatcc_builder_padding_base@@Base+0xdb3>
  406c52:	mov    edx,0x5ef
  406c57:	call   403070 <__assert_fail@plt>
  406c5c:	lea    rdi,[rip+0x3544]        # 40a1a7 <flatcc_builder_padding_base@@Base+0xe37>
  406c63:	lea    rsi,[rip+0x2998]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406c6a:	lea    rcx,[rip+0x34b2]        # 40a123 <flatcc_builder_padding_base@@Base+0xdb3>
  406c71:	mov    edx,0x5f6
  406c76:	call   403070 <__assert_fail@plt>
  406c7b:	lea    rdi,[rip+0x351b]        # 40a19d <flatcc_builder_padding_base@@Base+0xe2d>
  406c82:	lea    rsi,[rip+0x2979]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406c89:	lea    rcx,[rip+0x3493]        # 40a123 <flatcc_builder_padding_base@@Base+0xdb3>
  406c90:	mov    edx,0x5f2
  406c95:	call   403070 <__assert_fail@plt>
  406c9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406ca0 <flatcc_builder_table_add_offset@@Base>:
  406ca0:	push   rbp
  406ca1:	push   r15
  406ca3:	push   r14
  406ca5:	push   rbx
  406ca6:	push   rax
  406ca7:	mov    rax,QWORD PTR [rdi+0x30]
  406cab:	cmp    WORD PTR [rax+0xe],0x3
  406cb0:	jne    406d9e <flatcc_builder_table_add_offset@@Base+0xfe>
  406cb6:	mov    r14d,esi
  406cb9:	cmp    esi,0x7ffd
  406cbf:	jae    406dbd <flatcc_builder_table_add_offset@@Base+0x11d>
  406cc5:	mov    rbx,rdi
  406cc8:	mov    rax,QWORD PTR [rdi+0x8]
  406ccc:	movsxd rcx,r14d
  406ccf:	cmp    WORD PTR [rax+rcx*2],0x0
  406cd4:	jne    406ddc <flatcc_builder_table_add_offset@@Base+0x13c>
  406cda:	mov    ecx,DWORD PTR [rbx+0x14]
  406cdd:	xor    ecx,r14d
  406ce0:	imul   ecx,ecx,0x9e3779b1
  406ce6:	xor    ecx,0x4
  406ce9:	imul   ecx,ecx,0x9e3779b1
  406cef:	mov    DWORD PTR [rbx+0x14],ecx
  406cf2:	mov    ebp,DWORD PTR [rbx+0x20]
  406cf5:	mov    ecx,DWORD PTR [rbx+0x24]
  406cf8:	add    ebp,0x3
  406cfb:	and    ebp,0xfffffffc
  406cfe:	lea    r15,[rbp+0x4]
  406d02:	mov    DWORD PTR [rbx+0x20],r15d
  406d06:	cmp    ecx,r15d
  406d09:	jae    406d68 <flatcc_builder_table_add_offset@@Base+0xc8>
  406d0b:	mov    eax,r15d
  406d0e:	and    eax,0xfffffffc
  406d11:	lea    rsi,[rbx+0x68]
  406d15:	mov    rdi,QWORD PTR [rbx+0x40]
  406d19:	mov    edx,DWORD PTR [rbx+0x28]
  406d1c:	add    rdx,rax
  406d1f:	mov    ecx,0x1
  406d24:	mov    r8d,0x1
  406d2a:	call   QWORD PTR [rbx+0x50]
  406d2d:	test   eax,eax
  406d2f:	je     406d35 <flatcc_builder_table_add_offset@@Base+0x95>
  406d31:	xor    ebp,ebp
  406d33:	jmp    406d90 <flatcc_builder_table_add_offset@@Base+0xf0>
  406d35:	mov    eax,DWORD PTR [rbx+0x28]
  406d38:	mov    rcx,rax
  406d3b:	add    rcx,QWORD PTR [rbx+0x68]
  406d3f:	mov    QWORD PTR [rbx+0x18],rcx
  406d43:	mov    ecx,DWORD PTR [rbx+0x70]
  406d46:	sub    ecx,eax
  406d48:	cmp    ecx,0xfffc
  406d4e:	mov    eax,0xfffc
  406d53:	cmovb  eax,ecx
  406d56:	mov    DWORD PTR [rbx+0x24],eax
  406d59:	mov    rax,QWORD PTR [rbx+0x30]
  406d5d:	mov    DWORD PTR [rax+0x4],0xfffc
  406d64:	mov    rax,QWORD PTR [rbx+0x8]
  406d68:	movzx  ecx,r14w
  406d6c:	mov    WORD PTR [rax+rcx*2],r15w
  406d71:	cmp    WORD PTR [rbx+0x10],cx
  406d75:	ja     406d7f <flatcc_builder_table_add_offset@@Base+0xdf>
  406d77:	inc    r14d
  406d7a:	mov    WORD PTR [rbx+0x10],r14w
  406d7f:	mov    rax,QWORD PTR [rbx]
  406d82:	lea    rcx,[rax+0x2]
  406d86:	mov    QWORD PTR [rbx],rcx
  406d89:	mov    WORD PTR [rax],bp
  406d8c:	add    rbp,QWORD PTR [rbx+0x18]
  406d90:	mov    rax,rbp
  406d93:	add    rsp,0x8
  406d97:	pop    rbx
  406d98:	pop    r14
  406d9a:	pop    r15
  406d9c:	pop    rbp
  406d9d:	ret    
  406d9e:	lea    rdi,[rip+0x308c]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  406da5:	lea    rsi,[rip+0x2856]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406dac:	lea    rcx,[rip+0x3772]        # 40a525 <flatcc_builder_padding_base@@Base+0x11b5>
  406db3:	mov    edx,0x713
  406db8:	call   403070 <__assert_fail@plt>
  406dbd:	lea    rdi,[rip+0x36e1]        # 40a4a5 <flatcc_builder_padding_base@@Base+0x1135>
  406dc4:	lea    rsi,[rip+0x2837]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406dcb:	lea    rcx,[rip+0x3753]        # 40a525 <flatcc_builder_padding_base@@Base+0x11b5>
  406dd2:	mov    edx,0x714
  406dd7:	call   403070 <__assert_fail@plt>
  406ddc:	lea    rdi,[rip+0x39df]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406de3:	lea    rsi,[rip+0x2818]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406dea:	lea    rcx,[rip+0x3734]        # 40a525 <flatcc_builder_padding_base@@Base+0x11b5>
  406df1:	mov    edx,0x71b
  406df6:	call   403070 <__assert_fail@plt>
  406dfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406e00 <flatcc_builder_table_add@@Base>:
  406e00:	push   rbp
  406e01:	push   r14
  406e03:	push   rbx
  406e04:	mov    rax,QWORD PTR [rdi+0x30]
  406e08:	cmp    WORD PTR [rax+0xe],0x3
  406e0d:	jne    406ef8 <flatcc_builder_table_add@@Base+0xf8>
  406e13:	mov    r14d,esi
  406e16:	cmp    esi,0x7ffd
  406e1c:	jae    406f17 <flatcc_builder_table_add@@Base+0x117>
  406e22:	mov    rbx,rdi
  406e25:	cmp    WORD PTR [rdi+0xea],cx
  406e2c:	jae    406e35 <flatcc_builder_table_add@@Base+0x35>
  406e2e:	mov    WORD PTR [rbx+0xea],cx
  406e35:	mov    rsi,QWORD PTR [rbx+0x8]
  406e39:	movsxd rax,r14d
  406e3c:	cmp    WORD PTR [rsi+rax*2],0x0
  406e41:	jne    406f36 <flatcc_builder_table_add@@Base+0x136>
  406e47:	mov    eax,DWORD PTR [rbx+0x14]
  406e4a:	xor    eax,r14d
  406e4d:	imul   eax,eax,0x9e3779b1
  406e53:	xor    eax,edx
  406e55:	imul   eax,eax,0x9e3779b1
  406e5b:	mov    DWORD PTR [rbx+0x14],eax
  406e5e:	mov    eax,DWORD PTR [rbx+0x20]
  406e61:	movzx  ebp,cx
  406e64:	lea    eax,[rax+rbp*1]
  406e67:	add    eax,0xffffffff
  406e6a:	neg    ebp
  406e6c:	and    ebp,eax
  406e6e:	add    edx,ebp
  406e70:	mov    DWORD PTR [rbx+0x20],edx
  406e73:	cmp    edx,DWORD PTR [rbx+0x24]
  406e76:	jb     406ed4 <flatcc_builder_table_add@@Base+0xd4>
  406e78:	inc    edx
  406e7a:	lea    rsi,[rbx+0x68]
  406e7e:	mov    rdi,QWORD PTR [rbx+0x40]
  406e82:	mov    eax,DWORD PTR [rbx+0x28]
  406e85:	add    rax,rdx
  406e88:	mov    rdx,rax
  406e8b:	mov    ecx,0x1
  406e90:	mov    r8d,0x1
  406e96:	call   QWORD PTR [rbx+0x50]
  406e99:	test   eax,eax
  406e9b:	je     406ea1 <flatcc_builder_table_add@@Base+0xa1>
  406e9d:	xor    eax,eax
  406e9f:	jmp    406ef3 <flatcc_builder_table_add@@Base+0xf3>
  406ea1:	mov    eax,DWORD PTR [rbx+0x28]
  406ea4:	mov    rcx,rax
  406ea7:	add    rcx,QWORD PTR [rbx+0x68]
  406eab:	mov    QWORD PTR [rbx+0x18],rcx
  406eaf:	mov    ecx,DWORD PTR [rbx+0x70]
  406eb2:	sub    ecx,eax
  406eb4:	cmp    ecx,0xfffc
  406eba:	mov    eax,0xfffc
  406ebf:	cmovb  eax,ecx
  406ec2:	mov    DWORD PTR [rbx+0x24],eax
  406ec5:	mov    rax,QWORD PTR [rbx+0x30]
  406ec9:	mov    DWORD PTR [rax+0x4],0xfffc
  406ed0:	mov    rsi,QWORD PTR [rbx+0x8]
  406ed4:	mov    eax,ebp
  406ed6:	add    ebp,0x4
  406ed9:	movzx  ecx,r14w
  406edd:	mov    WORD PTR [rsi+rcx*2],bp
  406ee1:	cmp    WORD PTR [rbx+0x10],cx
  406ee5:	ja     406eef <flatcc_builder_table_add@@Base+0xef>
  406ee7:	inc    r14d
  406eea:	mov    WORD PTR [rbx+0x10],r14w
  406eef:	add    rax,QWORD PTR [rbx+0x18]
  406ef3:	pop    rbx
  406ef4:	pop    r14
  406ef6:	pop    rbp
  406ef7:	ret    
  406ef8:	lea    rdi,[rip+0x2f32]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  406eff:	lea    rsi,[rip+0x26fc]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406f06:	lea    rcx,[rip+0x354e]        # 40a45b <flatcc_builder_padding_base@@Base+0x10eb>
  406f0d:	mov    edx,0x6ed
  406f12:	call   403070 <__assert_fail@plt>
  406f17:	lea    rdi,[rip+0x3587]        # 40a4a5 <flatcc_builder_padding_base@@Base+0x1135>
  406f1e:	lea    rsi,[rip+0x26dd]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406f25:	lea    rcx,[rip+0x352f]        # 40a45b <flatcc_builder_padding_base@@Base+0x10eb>
  406f2c:	mov    edx,0x6ee
  406f31:	call   403070 <__assert_fail@plt>
  406f36:	lea    rdi,[rip+0x3885]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  406f3d:	lea    rsi,[rip+0x26be]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406f44:	lea    rcx,[rip+0x3510]        # 40a45b <flatcc_builder_padding_base@@Base+0x10eb>
  406f4b:	mov    edx,0x6f8
  406f50:	call   403070 <__assert_fail@plt>
  406f55:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f5f:	nop

0000000000406f60 <flatcc_builder_table_add_union_vector@@Base>:
  406f60:	push   r15
  406f62:	push   r14
  406f64:	push   r12
  406f66:	push   rbx
  406f67:	push   rax
  406f68:	mov    rax,QWORD PTR [rdi+0x30]
  406f6c:	cmp    WORD PTR [rax+0xe],0x3
  406f71:	jne    406fc7 <flatcc_builder_table_add_union_vector@@Base+0x67>
  406f73:	mov    rbx,rdx
  406f76:	mov    r12,rdx
  406f79:	shr    r12,0x20
  406f7d:	test   ebx,ebx
  406f7f:	setne  al
  406f82:	test   r12d,r12d
  406f85:	sete   cl
  406f88:	xor    cl,al
  406f8a:	je     406fe6 <flatcc_builder_table_add_union_vector@@Base+0x86>
  406f8c:	test   ebx,ebx
  406f8e:	je     406fb9 <flatcc_builder_table_add_union_vector@@Base+0x59>
  406f90:	mov    r14d,esi
  406f93:	mov    r15,rdi
  406f96:	lea    esi,[r14-0x1]
  406f9a:	call   406ca0 <flatcc_builder_table_add_offset@@Base>
  406f9f:	test   rax,rax
  406fa2:	je     407005 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  406fa4:	mov    DWORD PTR [rax],ebx
  406fa6:	mov    rdi,r15
  406fa9:	mov    esi,r14d
  406fac:	call   406ca0 <flatcc_builder_table_add_offset@@Base>
  406fb1:	test   rax,rax
  406fb4:	je     407024 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  406fb6:	mov    DWORD PTR [rax],r12d
  406fb9:	xor    eax,eax
  406fbb:	add    rsp,0x8
  406fbf:	pop    rbx
  406fc0:	pop    r12
  406fc2:	pop    r14
  406fc4:	pop    r15
  406fc6:	ret    
  406fc7:	lea    rdi,[rip+0x2e63]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  406fce:	lea    rsi,[rip+0x262d]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406fd5:	lea    rcx,[rip+0x31d7]        # 40a1b3 <flatcc_builder_padding_base@@Base+0xe43>
  406fdc:	mov    edx,0x600
  406fe1:	call   403070 <__assert_fail@plt>
  406fe6:	lea    rdi,[rip+0x3229]        # 40a216 <flatcc_builder_padding_base@@Base+0xea6>
  406fed:	lea    rsi,[rip+0x260e]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  406ff4:	lea    rcx,[rip+0x31b8]        # 40a1b3 <flatcc_builder_padding_base@@Base+0xe43>
  406ffb:	mov    edx,0x601
  407000:	call   403070 <__assert_fail@plt>
  407005:	lea    rdi,[rip+0x3191]        # 40a19d <flatcc_builder_padding_base@@Base+0xe2d>
  40700c:	lea    rsi,[rip+0x25ef]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407013:	lea    rcx,[rip+0x3199]        # 40a1b3 <flatcc_builder_padding_base@@Base+0xe43>
  40701a:	mov    edx,0x604
  40701f:	call   403070 <__assert_fail@plt>
  407024:	lea    rdi,[rip+0x3172]        # 40a19d <flatcc_builder_padding_base@@Base+0xe2d>
  40702b:	lea    rsi,[rip+0x25d0]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407032:	lea    rcx,[rip+0x317a]        # 40a1b3 <flatcc_builder_padding_base@@Base+0xe43>
  407039:	mov    edx,0x608
  40703e:	call   403070 <__assert_fail@plt>
  407043:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40704d:	nop    DWORD PTR [rax]

0000000000407050 <flatcc_builder_create_union_vector@@Base>:
  407050:	push   r15
  407052:	push   r14
  407054:	push   r13
  407056:	push   r12
  407058:	push   rbx
  407059:	mov    r14,rdx
  40705c:	mov    r15,rsi
  40705f:	mov    rbx,rdi
  407062:	mov    esi,0x4
  407067:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  40706c:	test   eax,eax
  40706e:	je     407080 <flatcc_builder_create_union_vector@@Base+0x30>
  407070:	xor    r14d,r14d
  407073:	mov    rax,r14
  407076:	pop    rbx
  407077:	pop    r12
  407079:	pop    r13
  40707b:	pop    r14
  40707d:	pop    r15
  40707f:	ret    
  407080:	mov    rax,QWORD PTR [rbx+0x30]
  407084:	mov    DWORD PTR [rax+0x10],0x4
  40708b:	mov    rax,QWORD PTR [rbx+0x30]
  40708f:	mov    DWORD PTR [rax+0x14],0x0
  407096:	mov    rax,QWORD PTR [rbx+0x30]
  40709a:	mov    WORD PTR [rax+0xe],0x5
  4070a0:	mov    ecx,DWORD PTR [rbx+0x28]
  4070a3:	mov    edx,DWORD PTR [rbx+0x70]
  4070a6:	sub    edx,ecx
  4070a8:	add    rcx,QWORD PTR [rbx+0x68]
  4070ac:	mov    QWORD PTR [rbx+0x18],rcx
  4070b0:	cmp    edx,0xfffffffc
  4070b3:	mov    ecx,0xfffffffc
  4070b8:	cmovb  ecx,edx
  4070bb:	mov    DWORD PTR [rbx+0x24],ecx
  4070be:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4070c5:	mov    ecx,DWORD PTR [rax+0x14]
  4070c8:	add    ecx,r14d
  4070cb:	jb     407338 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4070d1:	cmp    ecx,0x40000000
  4070d7:	jae    407338 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4070dd:	mov    DWORD PTR [rax+0x14],ecx
  4070e0:	mov    r12d,DWORD PTR [rbx+0x20]
  4070e4:	mov    eax,DWORD PTR [rbx+0x24]
  4070e7:	lea    ecx,[r12+r14*4]
  4070eb:	mov    DWORD PTR [rbx+0x20],ecx
  4070ee:	cmp    ecx,eax
  4070f0:	jae    407100 <flatcc_builder_create_union_vector@@Base+0xb0>
  4070f2:	mov    rsi,QWORD PTR [rbx+0x18]
  4070f6:	add    r12,rsi
  4070f9:	jne    40715b <flatcc_builder_create_union_vector@@Base+0x10b>
  4070fb:	jmp    407070 <flatcc_builder_create_union_vector@@Base+0x20>
  407100:	inc    ecx
  407102:	lea    rsi,[rbx+0x68]
  407106:	mov    rdi,QWORD PTR [rbx+0x40]
  40710a:	mov    edx,DWORD PTR [rbx+0x28]
  40710d:	add    rdx,rcx
  407110:	mov    ecx,0x1
  407115:	mov    r8d,0x1
  40711b:	call   QWORD PTR [rbx+0x50]
  40711e:	test   eax,eax
  407120:	jne    407070 <flatcc_builder_create_union_vector@@Base+0x20>
  407126:	mov    eax,DWORD PTR [rbx+0x28]
  407129:	mov    rsi,rax
  40712c:	add    rsi,QWORD PTR [rbx+0x68]
  407130:	mov    QWORD PTR [rbx+0x18],rsi
  407134:	mov    ecx,DWORD PTR [rbx+0x70]
  407137:	sub    ecx,eax
  407139:	cmp    ecx,0xfffffffc
  40713c:	mov    eax,0xfffffffc
  407141:	cmovb  eax,ecx
  407144:	mov    DWORD PTR [rbx+0x24],eax
  407147:	mov    rcx,QWORD PTR [rbx+0x30]
  40714b:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407152:	add    r12,rsi
  407155:	je     407070 <flatcc_builder_create_union_vector@@Base+0x20>
  40715b:	mov    r13d,DWORD PTR [rbx+0x20]
  40715f:	lea    ecx,[r14+r13*1]
  407163:	mov    DWORD PTR [rbx+0x20],ecx
  407166:	cmp    ecx,eax
  407168:	jb     4071bc <flatcc_builder_create_union_vector@@Base+0x16c>
  40716a:	inc    ecx
  40716c:	lea    rsi,[rbx+0x68]
  407170:	mov    rdi,QWORD PTR [rbx+0x40]
  407174:	mov    edx,DWORD PTR [rbx+0x28]
  407177:	add    rdx,rcx
  40717a:	mov    ecx,0x1
  40717f:	mov    r8d,0x1
  407185:	call   QWORD PTR [rbx+0x50]
  407188:	test   eax,eax
  40718a:	jne    407070 <flatcc_builder_create_union_vector@@Base+0x20>
  407190:	mov    eax,DWORD PTR [rbx+0x28]
  407193:	mov    rsi,rax
  407196:	add    rsi,QWORD PTR [rbx+0x68]
  40719a:	mov    QWORD PTR [rbx+0x18],rsi
  40719e:	mov    ecx,DWORD PTR [rbx+0x70]
  4071a1:	sub    ecx,eax
  4071a3:	cmp    ecx,0xfffffffc
  4071a6:	mov    eax,0xfffffffc
  4071ab:	cmovb  eax,ecx
  4071ae:	mov    DWORD PTR [rbx+0x24],eax
  4071b1:	mov    rax,QWORD PTR [rbx+0x30]
  4071b5:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4071bc:	mov    r12,rsi
  4071bf:	add    r12,r13
  4071c2:	je     407070 <flatcc_builder_create_union_vector@@Base+0x20>
  4071c8:	test   r14,r14
  4071cb:	je     407288 <flatcc_builder_create_union_vector@@Base+0x238>
  4071d1:	lea    rcx,[r14-0x1]
  4071d5:	mov    r8d,r14d
  4071d8:	and    r8d,0x3
  4071dc:	cmp    rcx,0x3
  4071e0:	jae    4071ee <flatcc_builder_create_union_vector@@Base+0x19e>
  4071e2:	xor    ecx,ecx
  4071e4:	test   r8,r8
  4071e7:	jne    407257 <flatcc_builder_create_union_vector@@Base+0x207>
  4071e9:	jmp    407288 <flatcc_builder_create_union_vector@@Base+0x238>
  4071ee:	mov    rdx,r14
  4071f1:	sub    rdx,r8
  4071f4:	lea    rdi,[rsi+r13*1]
  4071f8:	add    rdi,0x3
  4071fc:	xor    ecx,ecx
  4071fe:	xchg   ax,ax
  407200:	movzx  eax,BYTE PTR [r15+rcx*8]
  407205:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407209:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40720e:	mov    DWORD PTR [rsi+rcx*4],eax
  407211:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407217:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40721b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407220:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407224:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40722a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40722e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407233:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407237:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40723d:	mov    BYTE PTR [rdi+rcx*1],al
  407240:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407245:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407249:	add    rcx,0x4
  40724d:	cmp    rdx,rcx
  407250:	jne    407200 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407252:	test   r8,r8
  407255:	je     407288 <flatcc_builder_create_union_vector@@Base+0x238>
  407257:	lea    rdx,[rsi+rcx*4]
  40725b:	lea    rdi,[r15+rcx*8]
  40725f:	add    rdi,0x4
  407263:	add    r13,rcx
  407266:	add    r13,rsi
  407269:	xor    ecx,ecx
  40726b:	nop    DWORD PTR [rax+rax*1+0x0]
  407270:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407275:	mov    BYTE PTR [r13+rcx*1+0x0],al
  40727a:	mov    eax,DWORD PTR [rdi+rcx*8]
  40727d:	mov    DWORD PTR [rdx+rcx*4],eax
  407280:	inc    rcx
  407283:	cmp    r8,rcx
  407286:	jne    407270 <flatcc_builder_create_union_vector@@Base+0x220>
  407288:	mov    rdi,rbx
  40728b:	mov    rdx,r14
  40728e:	mov    rcx,r12
  407291:	call   4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407296:	mov    r15d,eax
  407299:	test   eax,eax
  40729b:	je     4072c1 <flatcc_builder_create_union_vector@@Base+0x271>
  40729d:	mov    ecx,0x1
  4072a2:	mov    r9d,0xffffffff
  4072a8:	mov    rdi,rbx
  4072ab:	mov    rsi,r12
  4072ae:	mov    rdx,r14
  4072b1:	mov    r8d,0x1
  4072b7:	call   406620 <flatcc_builder_create_vector@@Base>
  4072bc:	mov    r14d,eax
  4072bf:	jmp    4072c4 <flatcc_builder_create_union_vector@@Base+0x274>
  4072c1:	xor    r14d,r14d
  4072c4:	shl    r15,0x20
  4072c8:	mov    rdi,QWORD PTR [rbx+0x18]
  4072cc:	mov    edx,DWORD PTR [rbx+0x20]
  4072cf:	xor    esi,esi
  4072d1:	call   403080 <memset@plt>
  4072d6:	mov    rax,QWORD PTR [rbx+0x30]
  4072da:	mov    ecx,DWORD PTR [rax+0x8]
  4072dd:	mov    DWORD PTR [rbx+0x20],ecx
  4072e0:	mov    ecx,DWORD PTR [rax]
  4072e2:	mov    DWORD PTR [rbx+0x28],ecx
  4072e5:	mov    edx,DWORD PTR [rax+0x4]
  4072e8:	mov    rsi,rcx
  4072eb:	add    rsi,QWORD PTR [rbx+0x68]
  4072ef:	mov    QWORD PTR [rbx+0x18],rsi
  4072f3:	mov    esi,DWORD PTR [rbx+0x70]
  4072f6:	sub    esi,ecx
  4072f8:	cmp    esi,edx
  4072fa:	cmova  esi,edx
  4072fd:	mov    DWORD PTR [rbx+0x24],esi
  407300:	movzx  ecx,WORD PTR [rbx+0xea]
  407307:	cmp    WORD PTR [rbx+0xe8],cx
  40730e:	jae    407317 <flatcc_builder_create_union_vector@@Base+0x2c7>
  407310:	mov    WORD PTR [rbx+0xe8],cx
  407317:	or     r14,r15
  40731a:	movzx  ecx,WORD PTR [rax+0xc]
  40731e:	mov    WORD PTR [rbx+0xea],cx
  407325:	add    rax,0xffffffffffffffdc
  407329:	mov    QWORD PTR [rbx+0x30],rax
  40732d:	dec    DWORD PTR [rbx+0x104]
  407333:	jmp    407073 <flatcc_builder_create_union_vector@@Base+0x23>
  407338:	lea    rdi,[rip+0x338c]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  40733f:	lea    rsi,[rip+0x22bc]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407346:	lea    rcx,[rip+0x3399]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  40734d:	mov    edx,0x37c
  407352:	call   403070 <__assert_fail@plt>
  407357:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407360 <flatcc_builder_create_union_vector_direct@@Base>:
  407360:	push   r15
  407362:	push   r14
  407364:	push   r12
  407366:	push   rbx
  407367:	push   rax
  407368:	mov    r14,rcx
  40736b:	mov    r15,rsi
  40736e:	mov    r12,rdi
  407371:	mov    rsi,rdx
  407374:	mov    rdx,rcx
  407377:	mov    rcx,r15
  40737a:	call   4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40737f:	mov    ebx,eax
  407381:	test   eax,eax
  407383:	je     4073a8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407385:	mov    ecx,0x1
  40738a:	mov    r9d,0xffffffff
  407390:	mov    rdi,r12
  407393:	mov    rsi,r15
  407396:	mov    rdx,r14
  407399:	mov    r8d,0x1
  40739f:	call   406620 <flatcc_builder_create_vector@@Base>
  4073a4:	mov    eax,eax
  4073a6:	jmp    4073aa <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  4073a8:	xor    eax,eax
  4073aa:	shl    rbx,0x20
  4073ae:	or     rbx,rax
  4073b1:	mov    rax,rbx
  4073b4:	add    rsp,0x8
  4073b8:	pop    rbx
  4073b9:	pop    r12
  4073bb:	pop    r14
  4073bd:	pop    r15
  4073bf:	ret    

00000000004073c0 <flatcc_builder_start_union_vector@@Base>:
  4073c0:	push   rbx
  4073c1:	mov    rbx,rdi
  4073c4:	mov    esi,0x4
  4073c9:	call   4048c0 <flatcc_builder_start_buffer@@Base+0xe0>
  4073ce:	mov    ecx,eax
  4073d0:	mov    eax,0xffffffff
  4073d5:	test   ecx,ecx
  4073d7:	je     4073db <flatcc_builder_start_union_vector@@Base+0x1b>
  4073d9:	pop    rbx
  4073da:	ret    
  4073db:	mov    rax,QWORD PTR [rbx+0x30]
  4073df:	mov    DWORD PTR [rax+0x10],0x8
  4073e6:	mov    rax,QWORD PTR [rbx+0x30]
  4073ea:	mov    DWORD PTR [rax+0x14],0x0
  4073f1:	mov    rax,QWORD PTR [rbx+0x30]
  4073f5:	mov    WORD PTR [rax+0xe],0x7
  4073fb:	mov    ecx,DWORD PTR [rbx+0x28]
  4073fe:	mov    edx,DWORD PTR [rbx+0x70]
  407401:	sub    edx,ecx
  407403:	add    rcx,QWORD PTR [rbx+0x68]
  407407:	mov    QWORD PTR [rbx+0x18],rcx
  40740b:	cmp    edx,0xfffffffc
  40740e:	mov    ecx,0xfffffffc
  407413:	cmovb  ecx,edx
  407416:	mov    DWORD PTR [rbx+0x24],ecx
  407419:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407420:	xor    eax,eax
  407422:	pop    rbx
  407423:	ret    
  407424:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40742e:	xchg   ax,ax

0000000000407430 <flatcc_builder_end_union_vector@@Base>:
  407430:	push   rbp
  407431:	push   r15
  407433:	push   r14
  407435:	push   r13
  407437:	push   r12
  407439:	push   rbx
  40743a:	push   rax
  40743b:	mov    rax,QWORD PTR [rdi+0x30]
  40743f:	cmp    WORD PTR [rax+0xe],0x7
  407444:	jne    407834 <flatcc_builder_end_union_vector@@Base+0x404>
  40744a:	mov    r13,rdi
  40744d:	mov    r14d,DWORD PTR [rax+0x14]
  407451:	lea    eax,[r14+r14*4]
  407455:	mov    r12d,DWORD PTR [rdi+0x20]
  407459:	add    eax,r12d
  40745c:	mov    DWORD PTR [rdi+0x20],eax
  40745f:	cmp    eax,DWORD PTR [rdi+0x24]
  407462:	jae    40746a <flatcc_builder_end_union_vector@@Base+0x3a>
  407464:	mov    r8,QWORD PTR [r13+0x18]
  407468:	jmp    4074c1 <flatcc_builder_end_union_vector@@Base+0x91>
  40746a:	inc    eax
  40746c:	lea    rsi,[r13+0x68]
  407470:	mov    rdi,QWORD PTR [r13+0x40]
  407474:	mov    edx,DWORD PTR [r13+0x28]
  407478:	add    rdx,rax
  40747b:	mov    ecx,0x1
  407480:	mov    r8d,0x1
  407486:	call   QWORD PTR [r13+0x50]
  40748a:	test   eax,eax
  40748c:	jne    4075f6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  407492:	mov    eax,DWORD PTR [r13+0x28]
  407496:	mov    r8,rax
  407499:	add    r8,QWORD PTR [r13+0x68]
  40749d:	mov    QWORD PTR [r13+0x18],r8
  4074a1:	mov    ecx,DWORD PTR [r13+0x70]
  4074a5:	sub    ecx,eax
  4074a7:	cmp    ecx,0xfffffffc
  4074aa:	mov    eax,0xfffffffc
  4074af:	cmovb  eax,ecx
  4074b2:	mov    DWORD PTR [r13+0x24],eax
  4074b6:	mov    rax,QWORD PTR [r13+0x30]
  4074ba:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4074c1:	mov    rsi,r8
  4074c4:	add    rsi,r12
  4074c7:	je     4075f6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  4074cd:	lea    r15,[rsi+r14*4]
  4074d1:	test   r14d,r14d
  4074d4:	je     4075ba <flatcc_builder_end_union_vector@@Base+0x18a>
  4074da:	cmp    r14d,0x9
  4074de:	jae    407689 <flatcc_builder_end_union_vector@@Base+0x259>
  4074e4:	xor    r9d,r9d
  4074e7:	mov    r11d,r14d
  4074ea:	sub    r11d,r9d
  4074ed:	mov    r10,r9
  4074f0:	not    r10
  4074f3:	add    r10,r14
  4074f6:	and    r11,0x3
  4074fa:	je     407540 <flatcc_builder_end_union_vector@@Base+0x110>
  4074fc:	mov    rdx,r9
  4074ff:	neg    rdx
  407502:	lea    rbp,[r12+r9*4]
  407506:	add    rbp,r8
  407509:	lea    rbx,[r8+r9*8]
  40750d:	add    rbx,0x4
  407511:	lea    rax,[r9+r14*4]
  407515:	add    rax,r12
  407518:	add    rax,r8
  40751b:	xor    edi,edi
  40751d:	nop    DWORD PTR [rax]
  407520:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407525:	mov    BYTE PTR [rax+rdi*1],cl
  407528:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40752b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40752f:	dec    rdx
  407532:	inc    rdi
  407535:	cmp    r11,rdi
  407538:	jne    407520 <flatcc_builder_end_union_vector@@Base+0xf0>
  40753a:	neg    rdx
  40753d:	mov    r9,rdx
  407540:	cmp    r10,0x3
  407544:	jb     4075ba <flatcc_builder_end_union_vector@@Base+0x18a>
  407546:	mov    rbp,r14
  407549:	sub    rbp,r9
  40754c:	lea    rcx,[r12+r9*4]
  407550:	lea    rdx,[r8+rcx*1]
  407554:	add    rdx,0xc
  407558:	lea    rdi,[r8+r9*8]
  40755c:	add    rdi,0x1c
  407560:	lea    rcx,[r9+r14*4]
  407564:	add    rcx,r12
  407567:	add    rcx,r8
  40756a:	add    rcx,0x3
  40756e:	xor    ebx,ebx
  407570:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  407575:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  407579:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  40757d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  407581:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  407586:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  40758a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  40758e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  407592:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  407597:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  40759b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  40759f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  4075a3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  4075a8:	mov    BYTE PTR [rcx+rbx*1],al
  4075ab:	mov    eax,DWORD PTR [rdi+rbx*8]
  4075ae:	mov    DWORD PTR [rdx+rbx*4],eax
  4075b1:	add    rbx,0x4
  4075b5:	cmp    rbp,rbx
  4075b8:	jne    407570 <flatcc_builder_end_union_vector@@Base+0x140>
  4075ba:	mov    rdi,r13
  4075bd:	mov    rdx,r14
  4075c0:	mov    rcx,r15
  4075c3:	vzeroupper 
  4075c6:	call   4068a0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4075cb:	mov    r12d,eax
  4075ce:	test   eax,eax
  4075d0:	je     4075fb <flatcc_builder_end_union_vector@@Base+0x1cb>
  4075d2:	mov    ecx,0x1
  4075d7:	mov    r9d,0xffffffff
  4075dd:	mov    rdi,r13
  4075e0:	mov    rsi,r15
  4075e3:	mov    rdx,r14
  4075e6:	mov    r8d,0x1
  4075ec:	call   406620 <flatcc_builder_create_vector@@Base>
  4075f1:	mov    r14d,eax
  4075f4:	jmp    4075fe <flatcc_builder_end_union_vector@@Base+0x1ce>
  4075f6:	xor    r14d,r14d
  4075f9:	jmp    407677 <flatcc_builder_end_union_vector@@Base+0x247>
  4075fb:	xor    r14d,r14d
  4075fe:	shl    r12,0x20
  407602:	mov    rdi,QWORD PTR [r13+0x18]
  407606:	mov    edx,DWORD PTR [r13+0x20]
  40760a:	xor    esi,esi
  40760c:	call   403080 <memset@plt>
  407611:	mov    rax,QWORD PTR [r13+0x30]
  407615:	mov    ecx,DWORD PTR [rax+0x8]
  407618:	mov    DWORD PTR [r13+0x20],ecx
  40761c:	mov    ecx,DWORD PTR [rax]
  40761e:	mov    DWORD PTR [r13+0x28],ecx
  407622:	mov    edx,DWORD PTR [rax+0x4]
  407625:	mov    rsi,rcx
  407628:	add    rsi,QWORD PTR [r13+0x68]
  40762c:	mov    QWORD PTR [r13+0x18],rsi
  407630:	mov    esi,DWORD PTR [r13+0x70]
  407634:	sub    esi,ecx
  407636:	cmp    esi,edx
  407638:	cmova  esi,edx
  40763b:	mov    DWORD PTR [r13+0x24],esi
  40763f:	movzx  ecx,WORD PTR [r13+0xea]
  407647:	cmp    WORD PTR [r13+0xe8],cx
  40764f:	jae    407659 <flatcc_builder_end_union_vector@@Base+0x229>
  407651:	mov    WORD PTR [r13+0xe8],cx
  407659:	or     r14,r12
  40765c:	movzx  ecx,WORD PTR [rax+0xc]
  407660:	mov    WORD PTR [r13+0xea],cx
  407668:	add    rax,0xffffffffffffffdc
  40766c:	mov    QWORD PTR [r13+0x30],rax
  407670:	dec    DWORD PTR [r13+0x104]
  407677:	mov    rax,r14
  40767a:	add    rsp,0x8
  40767e:	pop    rbx
  40767f:	pop    r12
  407681:	pop    r13
  407683:	pop    r14
  407685:	pop    r15
  407687:	pop    rbp
  407688:	ret    
  407689:	lea    rax,[r14-0x1]
  40768d:	mov    ecx,0x8
  407692:	mul    rcx
  407695:	seto   cl
  407698:	mov    rdx,r8
  40769b:	not    rdx
  40769e:	xor    r9d,r9d
  4076a1:	cmp    rax,rdx
  4076a4:	ja     4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4076aa:	test   cl,cl
  4076ac:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4076b2:	lea    rdx,[r8+0x4]
  4076b6:	mov    rdi,rdx
  4076b9:	not    rdi
  4076bc:	cmp    rax,rdi
  4076bf:	ja     4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4076c5:	test   cl,cl
  4076c7:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4076cd:	lea    rcx,[r14+r14*4]
  4076d1:	add    rcx,r12
  4076d4:	add    rcx,r8
  4076d7:	lea    rbx,[r8+r14*8]
  4076db:	add    rbx,0xfffffffffffffff9
  4076df:	cmp    rbx,r15
  4076e2:	seta   r11b
  4076e6:	lea    rdi,[r8+r14*8]
  4076ea:	cmp    r8,rcx
  4076ed:	setb   r10b
  4076f1:	cmp    rdi,r15
  4076f4:	seta   al
  4076f7:	cmp    rdx,rcx
  4076fa:	setb   bpl
  4076fe:	cmp    rsi,rbx
  407701:	setb   cl
  407704:	cmp    r8,r15
  407707:	setb   BYTE PTR [rsp+0x7]
  40770c:	cmp    rsi,rdi
  40770f:	setb   bl
  407712:	cmp    rdx,r15
  407715:	setb   dl
  407718:	xor    r9d,r9d
  40771b:	test   r11b,r10b
  40771e:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407724:	and    al,bpl
  407727:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  40772d:	and    cl,BYTE PTR [rsp+0x7]
  407731:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407737:	and    bl,dl
  407739:	jne    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  40773f:	mov    eax,r14d
  407742:	and    eax,0x7
  407745:	test   rax,rax
  407748:	mov    ecx,0x8
  40774d:	cmovne rcx,rax
  407751:	mov    r9,r14
  407754:	sub    r9,rcx
  407757:	vmovdqa ymm0,YMMWORD PTR [rip+0x1e21]        # 409580 <flatcc_builder_padding_base@@Base+0x210>
  40775f:	vmovdqa ymm1,YMMWORD PTR [rip+0x1e39]        # 4095a0 <flatcc_builder_padding_base@@Base+0x230>
  407767:	xor    eax,eax
  407769:	vmovdqa xmm8,XMMWORD PTR [rip+0x1e4f]        # 4095c0 <flatcc_builder_padding_base@@Base+0x250>
  407771:	vmovdqa xmm9,XMMWORD PTR [rip+0x1e57]        # 4095d0 <flatcc_builder_padding_base@@Base+0x260>
  407779:	vpbroadcastq ymm4,QWORD PTR [rip+0x1e5e]        # 4095e0 <flatcc_builder_padding_base@@Base+0x270>
  407782:	vpbroadcastq ymm5,QWORD PTR [rip+0x1e5d]        # 4095e8 <flatcc_builder_padding_base@@Base+0x278>
  40778b:	mov    rdi,r8
  40778e:	xchg   ax,ax
  407790:	vmovdqu xmm6,XMMWORD PTR [rdi]
  407794:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  407799:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  40779e:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  4077a3:	vpshufb xmm3,xmm3,xmm8
  4077a8:	vpshufb xmm2,xmm2,xmm8
  4077ad:	vpunpcklwd xmm2,xmm2,xmm3
  4077b1:	vpshufb xmm3,xmm7,xmm9
  4077b6:	vpshufb xmm6,xmm6,xmm9
  4077bb:	vpunpcklwd xmm3,xmm6,xmm3
  4077bf:	vpblendd xmm2,xmm3,xmm2,0x2
  4077c5:	vmovq  QWORD PTR [r15+rax*1],xmm2
  4077cb:	vpsllq ymm2,ymm0,0x3
  4077d0:	vmovq  xmm3,r8
  4077d5:	vpbroadcastq ymm3,xmm3
  4077da:	vpaddq ymm2,ymm3,ymm2
  4077de:	vpaddq ymm2,ymm2,ymm4
  4077e2:	vpsllq ymm6,ymm1,0x3
  4077e7:	vpaddq ymm3,ymm3,ymm6
  4077eb:	vpaddq ymm3,ymm3,ymm4
  4077ef:	vpcmpeqd xmm6,xmm6,xmm6
  4077f3:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  4077fd:	vpcmpeqd xmm3,xmm3,xmm3
  407801:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  40780b:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  407811:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  407816:	add    rax,0x8
  40781a:	vpaddq ymm1,ymm1,ymm5
  40781e:	vpaddq ymm0,ymm0,ymm5
  407822:	add    rdi,0x40
  407826:	cmp    r9,rax
  407829:	jne    407790 <flatcc_builder_end_union_vector@@Base+0x360>
  40782f:	jmp    4074e7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407834:	lea    rdi,[rip+0x2a03]        # 40a23e <flatcc_builder_padding_base@@Base+0xece>
  40783b:	lea    rsi,[rip+0x1dc0]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407842:	lea    rcx,[rip+0x2a27]        # 40a270 <flatcc_builder_padding_base@@Base+0xf00>
  407849:	mov    edx,0x651
  40784e:	call   403070 <__assert_fail@plt>
  407853:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40785d:	nop    DWORD PTR [rax]

0000000000407860 <flatcc_builder_union_vector_count@@Base>:
  407860:	mov    rax,QWORD PTR [rdi+0x30]
  407864:	mov    eax,DWORD PTR [rax+0x14]
  407867:	ret    
  407868:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407870 <flatcc_builder_union_vector_edit@@Base>:
  407870:	mov    rax,QWORD PTR [rdi+0x18]
  407874:	ret    
  407875:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40787f:	nop

0000000000407880 <flatcc_builder_extend_union_vector@@Base>:
  407880:	push   r14
  407882:	push   rbx
  407883:	push   rax
  407884:	mov    rax,QWORD PTR [rdi+0x30]
  407888:	mov    ecx,DWORD PTR [rax+0x14]
  40788b:	add    ecx,esi
  40788d:	jb     407914 <flatcc_builder_extend_union_vector@@Base+0x94>
  407893:	cmp    ecx,0x20000000
  407899:	jae    407914 <flatcc_builder_extend_union_vector@@Base+0x94>
  40789b:	mov    rbx,rdi
  40789e:	mov    DWORD PTR [rax+0x14],ecx
  4078a1:	mov    r14d,DWORD PTR [rdi+0x20]
  4078a5:	lea    eax,[r14+rsi*8]
  4078a9:	mov    DWORD PTR [rdi+0x20],eax
  4078ac:	cmp    eax,DWORD PTR [rdi+0x24]
  4078af:	jae    4078b7 <flatcc_builder_extend_union_vector@@Base+0x37>
  4078b1:	mov    rax,QWORD PTR [rbx+0x18]
  4078b5:	jmp    407909 <flatcc_builder_extend_union_vector@@Base+0x89>
  4078b7:	inc    eax
  4078b9:	lea    rsi,[rbx+0x68]
  4078bd:	mov    rdi,QWORD PTR [rbx+0x40]
  4078c1:	mov    edx,DWORD PTR [rbx+0x28]
  4078c4:	add    rdx,rax
  4078c7:	mov    ecx,0x1
  4078cc:	mov    r8d,0x1
  4078d2:	call   QWORD PTR [rbx+0x50]
  4078d5:	test   eax,eax
  4078d7:	je     4078dd <flatcc_builder_extend_union_vector@@Base+0x5d>
  4078d9:	xor    eax,eax
  4078db:	jmp    40790c <flatcc_builder_extend_union_vector@@Base+0x8c>
  4078dd:	mov    ecx,DWORD PTR [rbx+0x28]
  4078e0:	mov    rax,rcx
  4078e3:	add    rax,QWORD PTR [rbx+0x68]
  4078e7:	mov    QWORD PTR [rbx+0x18],rax
  4078eb:	mov    edx,DWORD PTR [rbx+0x70]
  4078ee:	sub    edx,ecx
  4078f0:	cmp    edx,0xfffffffc
  4078f3:	mov    ecx,0xfffffffc
  4078f8:	cmovb  ecx,edx
  4078fb:	mov    DWORD PTR [rbx+0x24],ecx
  4078fe:	mov    rcx,QWORD PTR [rbx+0x30]
  407902:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407909:	add    rax,r14
  40790c:	add    rsp,0x8
  407910:	pop    rbx
  407911:	pop    r14
  407913:	ret    
  407914:	lea    rdi,[rip+0x2db0]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  40791b:	lea    rsi,[rip+0x1ce0]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407922:	lea    rcx,[rip+0x2dbd]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  407929:	mov    edx,0x37c
  40792e:	call   403070 <__assert_fail@plt>
  407933:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40793d:	nop    DWORD PTR [rax]

0000000000407940 <flatcc_builder_truncate_union_vector@@Base>:
  407940:	push   rax
  407941:	mov    rax,QWORD PTR [rdi+0x30]
  407945:	cmp    WORD PTR [rax+0xe],0x7
  40794a:	jne    40797b <flatcc_builder_truncate_union_vector@@Base+0x3b>
  40794c:	mov    rdx,rsi
  40794f:	mov    ecx,DWORD PTR [rax+0x14]
  407952:	sub    ecx,edx
  407954:	jb     40799a <flatcc_builder_truncate_union_vector@@Base+0x5a>
  407956:	mov    DWORD PTR [rax+0x14],ecx
  407959:	mov    rax,QWORD PTR [rdi+0x30]
  40795d:	imul   edx,DWORD PTR [rax+0x10]
  407961:	mov    eax,DWORD PTR [rdi+0x20]
  407964:	sub    eax,edx
  407966:	mov    DWORD PTR [rdi+0x20],eax
  407969:	add    rax,QWORD PTR [rdi+0x18]
  40796d:	mov    rdi,rax
  407970:	xor    esi,esi
  407972:	call   403080 <memset@plt>
  407977:	xor    eax,eax
  407979:	pop    rcx
  40797a:	ret    
  40797b:	lea    rdi,[rip+0x28bc]        # 40a23e <flatcc_builder_padding_base@@Base+0xece>
  407982:	lea    rsi,[rip+0x1c79]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407989:	lea    rcx,[rip+0x2933]        # 40a2c3 <flatcc_builder_padding_base@@Base+0xf53>
  407990:	mov    edx,0x681
  407995:	call   403070 <__assert_fail@plt>
  40799a:	lea    rdi,[rip+0x2301]        # 409ca2 <flatcc_builder_padding_base@@Base+0x932>
  4079a1:	lea    rsi,[rip+0x1c5a]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  4079a8:	lea    rcx,[rip+0x2914]        # 40a2c3 <flatcc_builder_padding_base@@Base+0xf53>
  4079af:	mov    edx,0x682
  4079b4:	call   403070 <__assert_fail@plt>
  4079b9:	nop    DWORD PTR [rax+0x0]

00000000004079c0 <flatcc_builder_union_vector_push@@Base>:
  4079c0:	push   r15
  4079c2:	push   r14
  4079c4:	push   rbx
  4079c5:	mov    rax,QWORD PTR [rdi+0x30]
  4079c9:	cmp    WORD PTR [rax+0xe],0x7
  4079ce:	jne    407a67 <flatcc_builder_union_vector_push@@Base+0xa7>
  4079d4:	mov    ecx,DWORD PTR [rax+0x14]
  4079d7:	cmp    ecx,0x1fffffff
  4079dd:	je     407a29 <flatcc_builder_union_vector_push@@Base+0x69>
  4079df:	mov    r14,rsi
  4079e2:	mov    rbx,rdi
  4079e5:	inc    ecx
  4079e7:	mov    DWORD PTR [rax+0x14],ecx
  4079ea:	mov    r15d,DWORD PTR [rdi+0x20]
  4079ee:	lea    eax,[r15+0x8]
  4079f2:	mov    DWORD PTR [rdi+0x20],eax
  4079f5:	cmp    eax,DWORD PTR [rdi+0x24]
  4079f8:	jae    407a05 <flatcc_builder_union_vector_push@@Base+0x45>
  4079fa:	mov    rax,QWORD PTR [rbx+0x18]
  4079fe:	add    rax,r15
  407a01:	jne    407a5e <flatcc_builder_union_vector_push@@Base+0x9e>
  407a03:	jmp    407a29 <flatcc_builder_union_vector_push@@Base+0x69>
  407a05:	lea    eax,[r15+0x9]
  407a09:	lea    rsi,[rbx+0x68]
  407a0d:	mov    rdi,QWORD PTR [rbx+0x40]
  407a11:	mov    edx,DWORD PTR [rbx+0x28]
  407a14:	add    rdx,rax
  407a17:	mov    ecx,0x1
  407a1c:	mov    r8d,0x1
  407a22:	call   QWORD PTR [rbx+0x50]
  407a25:	test   eax,eax
  407a27:	je     407a2d <flatcc_builder_union_vector_push@@Base+0x6d>
  407a29:	xor    eax,eax
  407a2b:	jmp    407a61 <flatcc_builder_union_vector_push@@Base+0xa1>
  407a2d:	mov    ecx,DWORD PTR [rbx+0x28]
  407a30:	mov    rax,rcx
  407a33:	add    rax,QWORD PTR [rbx+0x68]
  407a37:	mov    QWORD PTR [rbx+0x18],rax
  407a3b:	mov    edx,DWORD PTR [rbx+0x70]
  407a3e:	sub    edx,ecx
  407a40:	cmp    edx,0xfffffffc
  407a43:	mov    ecx,0xfffffffc
  407a48:	cmovb  ecx,edx
  407a4b:	mov    DWORD PTR [rbx+0x24],ecx
  407a4e:	mov    rcx,QWORD PTR [rbx+0x30]
  407a52:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407a59:	add    rax,r15
  407a5c:	je     407a29 <flatcc_builder_union_vector_push@@Base+0x69>
  407a5e:	mov    QWORD PTR [rax],r14
  407a61:	pop    rbx
  407a62:	pop    r14
  407a64:	pop    r15
  407a66:	ret    
  407a67:	lea    rdi,[rip+0x27d0]        # 40a23e <flatcc_builder_padding_base@@Base+0xece>
  407a6e:	lea    rsi,[rip+0x1b8d]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407a75:	lea    rcx,[rip+0x288c]        # 40a308 <flatcc_builder_padding_base@@Base+0xf98>
  407a7c:	mov    edx,0x68d
  407a81:	call   403070 <__assert_fail@plt>
  407a86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407a90 <flatcc_builder_append_union_vector@@Base>:
  407a90:	push   r15
  407a92:	push   r14
  407a94:	push   r13
  407a96:	push   r12
  407a98:	push   rbx
  407a99:	mov    rax,QWORD PTR [rdi+0x30]
  407a9d:	cmp    WORD PTR [rax+0xe],0x7
  407aa2:	jne    407b7e <flatcc_builder_append_union_vector@@Base+0xee>
  407aa8:	mov    r15,rdx
  407aab:	mov    ecx,DWORD PTR [rax+0x14]
  407aae:	add    ecx,r15d
  407ab1:	jb     407b5f <flatcc_builder_append_union_vector@@Base+0xcf>
  407ab7:	cmp    ecx,0x20000000
  407abd:	jae    407b5f <flatcc_builder_append_union_vector@@Base+0xcf>
  407ac3:	mov    r14,rsi
  407ac6:	mov    rbx,rdi
  407ac9:	mov    DWORD PTR [rax+0x14],ecx
  407acc:	mov    r13d,DWORD PTR [rdi+0x20]
  407ad0:	lea    eax,[r13+r15*8+0x0]
  407ad5:	mov    DWORD PTR [rdi+0x20],eax
  407ad8:	cmp    eax,DWORD PTR [rdi+0x24]
  407adb:	jae    407ae8 <flatcc_builder_append_union_vector@@Base+0x58>
  407add:	mov    r12,QWORD PTR [rbx+0x18]
  407ae1:	add    r12,r13
  407ae4:	jne    407b40 <flatcc_builder_append_union_vector@@Base+0xb0>
  407ae6:	jmp    407b0a <flatcc_builder_append_union_vector@@Base+0x7a>
  407ae8:	inc    eax
  407aea:	lea    rsi,[rbx+0x68]
  407aee:	mov    rdi,QWORD PTR [rbx+0x40]
  407af2:	mov    edx,DWORD PTR [rbx+0x28]
  407af5:	add    rdx,rax
  407af8:	mov    ecx,0x1
  407afd:	mov    r8d,0x1
  407b03:	call   QWORD PTR [rbx+0x50]
  407b06:	test   eax,eax
  407b08:	je     407b0f <flatcc_builder_append_union_vector@@Base+0x7f>
  407b0a:	xor    r12d,r12d
  407b0d:	jmp    407b52 <flatcc_builder_append_union_vector@@Base+0xc2>
  407b0f:	mov    eax,DWORD PTR [rbx+0x28]
  407b12:	mov    r12,rax
  407b15:	add    r12,QWORD PTR [rbx+0x68]
  407b19:	mov    QWORD PTR [rbx+0x18],r12
  407b1d:	mov    ecx,DWORD PTR [rbx+0x70]
  407b20:	sub    ecx,eax
  407b22:	cmp    ecx,0xfffffffc
  407b25:	mov    eax,0xfffffffc
  407b2a:	cmovb  eax,ecx
  407b2d:	mov    DWORD PTR [rbx+0x24],eax
  407b30:	mov    rax,QWORD PTR [rbx+0x30]
  407b34:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407b3b:	add    r12,r13
  407b3e:	je     407b0a <flatcc_builder_append_union_vector@@Base+0x7a>
  407b40:	shl    r15d,0x3
  407b44:	mov    edx,r15d
  407b47:	mov    rdi,r12
  407b4a:	mov    rsi,r14
  407b4d:	call   4030c0 <memcpy@plt>
  407b52:	mov    rax,r12
  407b55:	pop    rbx
  407b56:	pop    r12
  407b58:	pop    r13
  407b5a:	pop    r14
  407b5c:	pop    r15
  407b5e:	ret    
  407b5f:	lea    rdi,[rip+0x2b65]        # 40a6cb <flatcc_builder_padding_base@@Base+0x135b>
  407b66:	lea    rsi,[rip+0x1a95]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407b6d:	lea    rcx,[rip+0x2b72]        # 40a6e6 <flatcc_builder_padding_base@@Base+0x1376>
  407b74:	mov    edx,0x37c
  407b79:	call   403070 <__assert_fail@plt>
  407b7e:	lea    rdi,[rip+0x26b9]        # 40a23e <flatcc_builder_padding_base@@Base+0xece>
  407b85:	lea    rsi,[rip+0x1a76]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407b8c:	lea    rcx,[rip+0x27e2]        # 40a375 <flatcc_builder_padding_base@@Base+0x1005>
  407b93:	mov    edx,0x69c
  407b98:	call   403070 <__assert_fail@plt>
  407b9d:	nop    DWORD PTR [rax]

0000000000407ba0 <flatcc_builder_create_string@@Base>:
  407ba0:	push   rbp
  407ba1:	push   rbx
  407ba2:	sub    rsp,0x98
  407ba9:	xor    ebp,ebp
  407bab:	mov    rax,rdx
  407bae:	shr    rax,0x20
  407bb2:	jne    407c86 <flatcc_builder_create_string@@Base+0xe6>
  407bb8:	mov    rbx,rdi
  407bbb:	mov    DWORD PTR [rsp+0x4],edx
  407bbf:	mov    ebp,DWORD PTR [rdi+0xf0]
  407bc5:	mov    eax,edx
  407bc7:	not    eax
  407bc9:	add    eax,ebp
  407bcb:	and    eax,0x3
  407bce:	inc    eax
  407bd0:	mov    QWORD PTR [rsp+0x8],0x4
  407bd9:	lea    rcx,[rsp+0x4]
  407bde:	mov    QWORD PTR [rsp+0x18],rcx
  407be3:	mov    QWORD PTR [rsp+0x20],0x4
  407bec:	mov    DWORD PTR [rsp+0x10],0x1
  407bf4:	test   rdx,rdx
  407bf7:	je     407c1b <flatcc_builder_create_string@@Base+0x7b>
  407bf9:	lea    rcx,[rdx+0x4]
  407bfd:	mov    QWORD PTR [rsp+0x8],rcx
  407c02:	mov    QWORD PTR [rsp+0x28],rsi
  407c07:	mov    QWORD PTR [rsp+0x30],rdx
  407c0c:	mov    DWORD PTR [rsp+0x10],0x2
  407c14:	mov    edx,0x2
  407c19:	jmp    407c25 <flatcc_builder_create_string@@Base+0x85>
  407c1b:	mov    ecx,0x4
  407c20:	mov    edx,0x1
  407c25:	mov    esi,eax
  407c27:	lea    r8,[rcx+rsi*1]
  407c2b:	mov    QWORD PTR [rsp+0x8],r8
  407c30:	mov    eax,edx
  407c32:	shl    rax,0x4
  407c36:	lea    rdi,[rip+0x1733]        # 409370 <flatcc_builder_padding_base@@Base>
  407c3d:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407c42:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407c47:	inc    edx
  407c49:	mov    DWORD PTR [rsp+0x10],edx
  407c4d:	cmp    r8,0x11
  407c51:	setb   al
  407c54:	add    rcx,rsi
  407c57:	add    rcx,0xfffffffffffffff0
  407c5b:	shr    rcx,0x20
  407c5f:	sete   cl
  407c62:	test   r8d,r8d
  407c65:	jle    407c92 <flatcc_builder_create_string@@Base+0xf2>
  407c67:	or     al,cl
  407c69:	je     407c92 <flatcc_builder_create_string@@Base+0xf2>
  407c6b:	sub    ebp,r8d
  407c6e:	mov    rdi,QWORD PTR [rbx+0x38]
  407c72:	lea    rsi,[rsp+0x18]
  407c77:	mov    ecx,ebp
  407c79:	call   QWORD PTR [rbx+0x48]
  407c7c:	test   eax,eax
  407c7e:	jne    407cb1 <flatcc_builder_create_string@@Base+0x111>
  407c80:	mov    DWORD PTR [rbx+0xf0],ebp
  407c86:	mov    eax,ebp
  407c88:	add    rsp,0x98
  407c8f:	pop    rbx
  407c90:	pop    rbp
  407c91:	ret    
  407c92:	lea    rdi,[rip+0x2b29]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  407c99:	lea    rsi,[rip+0x1962]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407ca0:	lea    rcx,[rip+0x29da]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  407ca7:	mov    edx,0x287
  407cac:	call   403070 <__assert_fail@plt>
  407cb1:	lea    rdi,[rip+0x2b0a]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  407cb8:	lea    rsi,[rip+0x1943]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407cbf:	lea    rcx,[rip+0x29bb]        # 40a681 <flatcc_builder_padding_base@@Base+0x1311>
  407cc6:	mov    edx,0x28b
  407ccb:	call   403070 <__assert_fail@plt>

0000000000407cd0 <flatcc_builder_create_string_str@@Base>:
  407cd0:	push   r14
  407cd2:	push   rbx
  407cd3:	push   rax
  407cd4:	mov    rbx,rsi
  407cd7:	mov    r14,rdi
  407cda:	mov    rdi,rsi
  407cdd:	call   403050 <strlen@plt>
  407ce2:	mov    rdi,r14
  407ce5:	mov    rsi,rbx
  407ce8:	mov    rdx,rax
  407ceb:	add    rsp,0x8
  407cef:	pop    rbx
  407cf0:	pop    r14
  407cf2:	jmp    407ba0 <flatcc_builder_create_string@@Base>
  407cf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407d00 <flatcc_builder_create_string_strn@@Base>:
  407d00:	push   r15
  407d02:	push   r14
  407d04:	push   rbx
  407d05:	mov    rbx,rdx
  407d08:	mov    r14,rsi
  407d0b:	mov    r15,rdi
  407d0e:	mov    rdi,rsi
  407d11:	xor    esi,esi
  407d13:	call   4030a0 <memchr@plt>
  407d18:	mov    rcx,rax
  407d1b:	sub    rcx,r14
  407d1e:	test   rax,rax
  407d21:	cmovne rbx,rcx
  407d25:	mov    rdi,r15
  407d28:	mov    rsi,r14
  407d2b:	mov    rdx,rbx
  407d2e:	pop    rbx
  407d2f:	pop    r14
  407d31:	pop    r15
  407d33:	jmp    407ba0 <flatcc_builder_create_string@@Base>
  407d38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407d40 <flatcc_builder_end_string@@Base>:
  407d40:	push   rbp
  407d41:	push   rbx
  407d42:	push   rax
  407d43:	mov    rax,QWORD PTR [rdi+0x30]
  407d47:	cmp    WORD PTR [rax+0xe],0x6
  407d4c:	jne    407de4 <flatcc_builder_end_string@@Base+0xa4>
  407d52:	mov    rbx,rdi
  407d55:	mov    edx,DWORD PTR [rax+0x14]
  407d58:	cmp    edx,DWORD PTR [rdi+0x20]
  407d5b:	jne    407e03 <flatcc_builder_end_string@@Base+0xc3>
  407d61:	mov    rsi,QWORD PTR [rbx+0x18]
  407d65:	mov    rdi,rbx
  407d68:	call   407ba0 <flatcc_builder_create_string@@Base>
  407d6d:	mov    ebp,eax
  407d6f:	test   eax,eax
  407d71:	je     407ddb <flatcc_builder_end_string@@Base+0x9b>
  407d73:	mov    rdi,QWORD PTR [rbx+0x18]
  407d77:	mov    edx,DWORD PTR [rbx+0x20]
  407d7a:	xor    esi,esi
  407d7c:	call   403080 <memset@plt>
  407d81:	mov    rax,QWORD PTR [rbx+0x30]
  407d85:	mov    ecx,DWORD PTR [rax+0x8]
  407d88:	mov    DWORD PTR [rbx+0x20],ecx
  407d8b:	mov    ecx,DWORD PTR [rax]
  407d8d:	mov    DWORD PTR [rbx+0x28],ecx
  407d90:	mov    edx,DWORD PTR [rax+0x4]
  407d93:	mov    rsi,rcx
  407d96:	add    rsi,QWORD PTR [rbx+0x68]
  407d9a:	mov    QWORD PTR [rbx+0x18],rsi
  407d9e:	mov    esi,DWORD PTR [rbx+0x70]
  407da1:	sub    esi,ecx
  407da3:	cmp    esi,edx
  407da5:	cmova  esi,edx
  407da8:	mov    DWORD PTR [rbx+0x24],esi
  407dab:	movzx  ecx,WORD PTR [rbx+0xea]
  407db2:	cmp    WORD PTR [rbx+0xe8],cx
  407db9:	jae    407dc2 <flatcc_builder_end_string@@Base+0x82>
  407dbb:	mov    WORD PTR [rbx+0xe8],cx
  407dc2:	movzx  ecx,WORD PTR [rax+0xc]
  407dc6:	mov    WORD PTR [rbx+0xea],cx
  407dcd:	add    rax,0xffffffffffffffdc
  407dd1:	mov    QWORD PTR [rbx+0x30],rax
  407dd5:	dec    DWORD PTR [rbx+0x104]
  407ddb:	mov    eax,ebp
  407ddd:	add    rsp,0x8
  407de1:	pop    rbx
  407de2:	pop    rbp
  407de3:	ret    
  407de4:	lea    rdi,[rip+0x1d56]        # 409b41 <flatcc_builder_padding_base@@Base+0x7d1>
  407deb:	lea    rsi,[rip+0x1810]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407df2:	lea    rcx,[rip+0x25fb]        # 40a3f4 <flatcc_builder_padding_base@@Base+0x1084>
  407df9:	mov    edx,0x6c4
  407dfe:	call   403070 <__assert_fail@plt>
  407e03:	lea    rdi,[rip+0x262d]        # 40a437 <flatcc_builder_padding_base@@Base+0x10c7>
  407e0a:	lea    rsi,[rip+0x17f1]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407e11:	lea    rcx,[rip+0x25dc]        # 40a3f4 <flatcc_builder_padding_base@@Base+0x1084>
  407e18:	mov    edx,0x6c5
  407e1d:	call   403070 <__assert_fail@plt>
  407e22:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e2c:	nop    DWORD PTR [rax+0x0]

0000000000407e30 <flatcc_builder_string_edit@@Base>:
  407e30:	mov    rax,QWORD PTR [rdi+0x18]
  407e34:	ret    
  407e35:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e3f:	nop

0000000000407e40 <flatcc_builder_string_len@@Base>:
  407e40:	mov    rax,QWORD PTR [rdi+0x30]
  407e44:	mov    eax,DWORD PTR [rax+0x14]
  407e47:	ret    
  407e48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407e50 <flatcc_builder_table_edit@@Base>:
  407e50:	push   rax
  407e51:	mov    rax,QWORD PTR [rdi+0x30]
  407e55:	cmp    WORD PTR [rax+0xe],0x3
  407e5a:	jne    407e68 <flatcc_builder_table_edit@@Base+0x18>
  407e5c:	mov    eax,DWORD PTR [rdi+0x20]
  407e5f:	add    rax,QWORD PTR [rdi+0x18]
  407e63:	sub    rax,rsi
  407e66:	pop    rcx
  407e67:	ret    
  407e68:	lea    rdi,[rip+0x1fc2]        # 409e31 <flatcc_builder_padding_base@@Base+0xac1>
  407e6f:	lea    rsi,[rip+0x178c]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  407e76:	lea    rcx,[rip+0x266c]        # 40a4e9 <flatcc_builder_padding_base@@Base+0x1179>
  407e7d:	mov    edx,0x702
  407e82:	call   403070 <__assert_fail@plt>
  407e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407e90 <flatcc_builder_table_add_copy@@Base>:
  407e90:	push   r15
  407e92:	push   r14
  407e94:	push   rbx
  407e95:	mov    r15,rcx
  407e98:	mov    r14,rdx
  407e9b:	mov    rdx,rcx
  407e9e:	mov    ecx,r8d
  407ea1:	call   406e00 <flatcc_builder_table_add@@Base>
  407ea6:	mov    rbx,rax
  407ea9:	test   rax,rax
  407eac:	je     407ebc <flatcc_builder_table_add_copy@@Base+0x2c>
  407eae:	mov    rdi,rbx
  407eb1:	mov    rsi,r14
  407eb4:	mov    rdx,r15
  407eb7:	call   4030c0 <memcpy@plt>
  407ebc:	mov    rax,rbx
  407ebf:	pop    rbx
  407ec0:	pop    r14
  407ec2:	pop    r15
  407ec4:	ret    
  407ec5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407ecf:	nop

0000000000407ed0 <flatcc_builder_push_buffer_alignment@@Base>:
  407ed0:	movzx  eax,WORD PTR [rdi+0xe8]
  407ed7:	mov    WORD PTR [rdi+0xe8],0x4
  407ee0:	ret    
  407ee1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407eeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ef0 <flatcc_builder_pop_buffer_alignment@@Base>:
  407ef0:	cmp    WORD PTR [rdi+0xe8],si
  407ef7:	jae    407f00 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407ef9:	mov    WORD PTR [rdi+0xe8],si
  407f00:	ret    
  407f01:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f10 <flatcc_builder_get_buffer_alignment@@Base>:
  407f10:	movzx  eax,WORD PTR [rdi+0xe8]
  407f17:	ret    
  407f18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f20 <flatcc_builder_set_vtable_clustering@@Base>:
  407f20:	xor    eax,eax
  407f22:	test   esi,esi
  407f24:	sete   al
  407f27:	mov    DWORD PTR [rdi+0x124],eax
  407f2d:	ret    
  407f2e:	xchg   ax,ax

0000000000407f30 <flatcc_builder_set_block_align@@Base>:
  407f30:	mov    WORD PTR [rdi+0xec],si
  407f37:	ret    
  407f38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f40 <flatcc_builder_get_level@@Base>:
  407f40:	mov    eax,DWORD PTR [rdi+0x104]
  407f46:	ret    
  407f47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407f50 <flatcc_builder_set_max_level@@Base>:
  407f50:	mov    DWORD PTR [rdi+0x120],esi
  407f56:	cmp    DWORD PTR [rdi+0x108],esi
  407f5c:	jge    407f64 <flatcc_builder_set_max_level@@Base+0x14>
  407f5e:	mov    DWORD PTR [rdi+0x108],esi
  407f64:	ret    
  407f65:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f6f:	nop

0000000000407f70 <flatcc_builder_get_buffer_size@@Base>:
  407f70:	movsxd rax,DWORD PTR [rdi+0xf4]
  407f77:	movsxd rcx,DWORD PTR [rdi+0xf0]
  407f7e:	sub    rax,rcx
  407f81:	ret    
  407f82:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f8c:	nop    DWORD PTR [rax+0x0]

0000000000407f90 <flatcc_builder_get_buffer_start@@Base>:
  407f90:	mov    eax,DWORD PTR [rdi+0xf0]
  407f96:	ret    
  407f97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fa0 <flatcc_builder_get_buffer_end@@Base>:
  407fa0:	mov    eax,DWORD PTR [rdi+0xf4]
  407fa6:	ret    
  407fa7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fb0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407fb0:	mov    QWORD PTR [rdi+0x118],rsi
  407fb7:	ret    
  407fb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407fc0 <flatcc_builder_set_identifier@@Base>:
  407fc0:	test   rsi,rsi
  407fc3:	jne    407fcc <flatcc_builder_set_identifier@@Base+0xc>
  407fc5:	lea    rsi,[rip+0x13a4]        # 409370 <flatcc_builder_padding_base@@Base>
  407fcc:	mov    eax,DWORD PTR [rsi]
  407fce:	mov    DWORD PTR [rdi+0x110],eax
  407fd4:	ret    
  407fd5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407fdf:	nop

0000000000407fe0 <flatcc_builder_get_type@@Base>:
  407fe0:	mov    rax,QWORD PTR [rdi+0x30]
  407fe4:	test   rax,rax
  407fe7:	je     407fee <flatcc_builder_get_type@@Base+0xe>
  407fe9:	movzx  eax,WORD PTR [rax+0xe]
  407fed:	ret    
  407fee:	xor    eax,eax
  407ff0:	ret    
  407ff1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407ffb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408000 <flatcc_builder_get_type_at@@Base>:
  408000:	xor    eax,eax
  408002:	test   esi,esi
  408004:	jle    408022 <flatcc_builder_get_type_at@@Base+0x22>
  408006:	mov    ecx,DWORD PTR [rdi+0x104]
  40800c:	cmp    ecx,esi
  40800e:	jl     408022 <flatcc_builder_get_type_at@@Base+0x22>
  408010:	mov    rax,QWORD PTR [rdi+0x30]
  408014:	sub    esi,ecx
  408016:	movsxd rcx,esi
  408019:	lea    rcx,[rcx+rcx*8]
  40801d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408022:	ret    
  408023:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40802d:	nop    DWORD PTR [rax]

0000000000408030 <flatcc_builder_get_direct_buffer@@Base>:
  408030:	cmp    DWORD PTR [rdi+0x128],0x0
  408037:	je     408049 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408039:	mov    rax,QWORD PTR [rdi+0x130]
  408040:	cmp    rax,QWORD PTR [rdi+0x138]
  408047:	je     408058 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408049:	test   rsi,rsi
  40804c:	je     408055 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40804e:	mov    QWORD PTR [rsi],0x0
  408055:	xor    eax,eax
  408057:	ret    
  408058:	test   rsi,rsi
  40805b:	je     408067 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40805d:	mov    rax,QWORD PTR [rdi+0x160]
  408064:	mov    QWORD PTR [rsi],rax
  408067:	mov    rax,QWORD PTR [rdi+0x140]
  40806e:	ret    
  40806f:	nop

0000000000408070 <flatcc_builder_copy_buffer@@Base>:
  408070:	push   rax
  408071:	cmp    DWORD PTR [rdi+0x128],0x0
  408078:	je     40808d <flatcc_builder_copy_buffer@@Base+0x1d>
  40807a:	add    rdi,0x130
  408081:	call   4088f0 <flatcc_emitter_copy_buffer@@Base>
  408086:	test   rax,rax
  408089:	je     408091 <flatcc_builder_copy_buffer@@Base+0x21>
  40808b:	pop    rcx
  40808c:	ret    
  40808d:	xor    eax,eax
  40808f:	pop    rcx
  408090:	ret    
  408091:	lea    rdi,[rip+0x1254]        # 4092ec <_IO_stdin_used@@Base+0x2ec>
  408098:	lea    rsi,[rip+0x1563]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40809f:	lea    rcx,[rip+0x24ce]        # 40a574 <flatcc_builder_padding_base@@Base+0x1204>
  4080a6:	mov    edx,0x786
  4080ab:	call   403070 <__assert_fail@plt>

00000000004080b0 <flatcc_builder_finalize_buffer@@Base>:
  4080b0:	push   r15
  4080b2:	push   r14
  4080b4:	push   rbx
  4080b5:	mov    rbx,rdi
  4080b8:	movsxd r14,DWORD PTR [rdi+0xf4]
  4080bf:	movsxd rax,DWORD PTR [rdi+0xf0]
  4080c6:	sub    r14,rax
  4080c9:	test   rsi,rsi
  4080cc:	je     4080d1 <flatcc_builder_finalize_buffer@@Base+0x21>
  4080ce:	mov    QWORD PTR [rsi],r14
  4080d1:	mov    rdi,r14
  4080d4:	call   4030d0 <malloc@plt>
  4080d9:	test   rax,rax
  4080dc:	je     40810d <flatcc_builder_finalize_buffer@@Base+0x5d>
  4080de:	cmp    DWORD PTR [rbx+0x128],0x0
  4080e5:	je     40812c <flatcc_builder_finalize_buffer@@Base+0x7c>
  4080e7:	mov    r15,rax
  4080ea:	add    rbx,0x130
  4080f1:	mov    rdi,rbx
  4080f4:	mov    rsi,rax
  4080f7:	mov    rdx,r14
  4080fa:	call   4088f0 <flatcc_emitter_copy_buffer@@Base>
  4080ff:	test   rax,rax
  408102:	je     40814b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408104:	mov    rax,r15
  408107:	pop    rbx
  408108:	pop    r14
  40810a:	pop    r15
  40810c:	ret    
  40810d:	lea    rdi,[rip+0x26ae]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  408114:	lea    rsi,[rip+0x14e7]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40811b:	lea    rcx,[rip+0x2497]        # 40a5b9 <flatcc_builder_padding_base@@Base+0x1249>
  408122:	mov    edx,0x798
  408127:	call   403070 <__assert_fail@plt>
  40812c:	lea    rdi,[rip+0x268f]        # 40a7c2 <flatcc_builder_padding_base@@Base+0x1452>
  408133:	lea    rsi,[rip+0x14c8]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40813a:	lea    rcx,[rip+0x2478]        # 40a5b9 <flatcc_builder_padding_base@@Base+0x1249>
  408141:	mov    edx,0x79c
  408146:	call   403070 <__assert_fail@plt>
  40814b:	lea    rdi,[rip+0x119a]        # 4092ec <_IO_stdin_used@@Base+0x2ec>
  408152:	lea    rsi,[rip+0x14a9]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  408159:	lea    rcx,[rip+0x2414]        # 40a574 <flatcc_builder_padding_base@@Base+0x1204>
  408160:	mov    edx,0x786
  408165:	call   403070 <__assert_fail@plt>
  40816a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408170 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408170:	push   r15
  408172:	push   r14
  408174:	push   r12
  408176:	push   rbx
  408177:	push   rax
  408178:	mov    r14,rsi
  40817b:	mov    r15,rdi
  40817e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408185:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40818c:	sub    rax,rcx
  40818f:	test   rsi,rsi
  408192:	je     408197 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408194:	mov    QWORD PTR [r14],rax
  408197:	movzx  ecx,WORD PTR [r15+0xe8]
  40819f:	add    rax,rcx
  4081a2:	add    rax,0xffffffffffffffff
  4081a6:	mov    rbx,rcx
  4081a9:	neg    rbx
  4081ac:	and    rbx,rax
  4081af:	cmp    rcx,0x8
  4081b3:	mov    QWORD PTR [rsp],0x0
  4081bb:	mov    esi,0x8
  4081c0:	cmova  rsi,rcx
  4081c4:	mov    rdi,rsp
  4081c7:	mov    rdx,rbx
  4081ca:	call   403110 <posix_memalign@plt>
  4081cf:	mov    r12,QWORD PTR [rsp]
  4081d3:	test   eax,eax
  4081d5:	je     4081e6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4081d7:	test   r12,r12
  4081da:	je     4081e6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4081dc:	mov    rdi,r12
  4081df:	call   403030 <free@plt>
  4081e4:	jmp    40822e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4081e6:	test   r12,r12
  4081e9:	je     40822e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4081eb:	cmp    DWORD PTR [r15+0x128],0x0
  4081f3:	je     4081dc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  4081f5:	add    r15,0x130
  4081fc:	mov    rdi,r15
  4081ff:	mov    rsi,r12
  408202:	mov    rdx,rbx
  408205:	call   4088f0 <flatcc_emitter_copy_buffer@@Base>
  40820a:	test   rax,rax
  40820d:	jne    40823d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40820f:	lea    rdi,[rip+0x10d6]        # 4092ec <_IO_stdin_used@@Base+0x2ec>
  408216:	lea    rsi,[rip+0x13e5]        # 409602 <flatcc_builder_padding_base@@Base+0x292>
  40821d:	lea    rcx,[rip+0x2350]        # 40a574 <flatcc_builder_padding_base@@Base+0x1204>
  408224:	mov    edx,0x786
  408229:	call   403070 <__assert_fail@plt>
  40822e:	test   r14,r14
  408231:	je     40823a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408233:	mov    QWORD PTR [r14],0x0
  40823a:	xor    r12d,r12d
  40823d:	mov    rax,r12
  408240:	add    rsp,0x8
  408244:	pop    rbx
  408245:	pop    r12
  408247:	pop    r14
  408249:	pop    r15
  40824b:	ret    
  40824c:	nop    DWORD PTR [rax+0x0]

0000000000408250 <flatcc_builder_aligned_alloc@@Base>:
  408250:	push   rax
  408251:	mov    rdx,rsi
  408254:	mov    QWORD PTR [rsp],0x0
  40825c:	cmp    rdi,0x8
  408260:	mov    esi,0x8
  408265:	cmova  rsi,rdi
  408269:	mov    rdi,rsp
  40826c:	call   403110 <posix_memalign@plt>
  408271:	mov    ecx,eax
  408273:	mov    rax,QWORD PTR [rsp]
  408277:	test   ecx,ecx
  408279:	je     408292 <flatcc_builder_aligned_alloc@@Base+0x42>
  40827b:	test   rax,rax
  40827e:	je     408292 <flatcc_builder_aligned_alloc@@Base+0x42>
  408280:	mov    rdi,rax
  408283:	call   403030 <free@plt>
  408288:	mov    QWORD PTR [rsp],0x0
  408290:	xor    eax,eax
  408292:	pop    rcx
  408293:	ret    
  408294:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40829e:	xchg   ax,ax

00000000004082a0 <flatcc_builder_aligned_free@@Base>:
  4082a0:	jmp    403030 <free@plt>
  4082a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082af:	nop

00000000004082b0 <flatcc_builder_get_emit_context@@Base>:
  4082b0:	mov    rax,QWORD PTR [rdi+0x38]
  4082b4:	ret    
  4082b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082bf:	nop

00000000004082c0 <flatcc_emitter_recycle_page@@Base>:
  4082c0:	mov    rcx,QWORD PTR [rdi]
  4082c3:	mov    eax,0xffffffff
  4082c8:	cmp    rcx,rsi
  4082cb:	je     408322 <flatcc_emitter_recycle_page@@Base+0x62>
  4082cd:	cmp    QWORD PTR [rdi+0x8],rsi
  4082d1:	je     408322 <flatcc_emitter_recycle_page@@Base+0x62>
  4082d3:	mov    rax,QWORD PTR [rsi+0xb80]
  4082da:	mov    rdx,QWORD PTR [rsi+0xb88]
  4082e1:	mov    QWORD PTR [rax+0xb88],rdx
  4082e8:	mov    rdx,QWORD PTR [rsi+0xb88]
  4082ef:	mov    QWORD PTR [rdx+0xb80],rax
  4082f6:	mov    rax,QWORD PTR [rcx+0xb88]
  4082fd:	mov    QWORD PTR [rsi+0xb88],rax
  408304:	mov    QWORD PTR [rsi+0xb80],rcx
  40830b:	mov    QWORD PTR [rax+0xb80],rsi
  408312:	mov    rax,QWORD PTR [rsi+0xb80]
  408319:	mov    QWORD PTR [rax+0xb88],rsi
  408320:	xor    eax,eax
  408322:	ret    
  408323:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40832d:	nop    DWORD PTR [rax]

0000000000408330 <flatcc_emitter_reset@@Base>:
  408330:	push   r14
  408332:	push   rbx
  408333:	push   rax
  408334:	mov    rax,QWORD PTR [rdi]
  408337:	test   rax,rax
  40833a:	je     40841b <flatcc_emitter_reset@@Base+0xeb>
  408340:	mov    rbx,rdi
  408343:	mov    QWORD PTR [rdi+0x8],rax
  408347:	lea    rcx,[rax+0x5c0]
  40834e:	mov    QWORD PTR [rdi+0x10],rcx
  408352:	mov    QWORD PTR [rdi+0x20],rcx
  408356:	mov    QWORD PTR [rdi+0x18],0x5c0
  40835e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408366:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408370:	mov    rcx,QWORD PTR [rdi+0x30]
  408374:	mov    rdx,QWORD PTR [rdi+0x40]
  408378:	test   rdx,rdx
  40837b:	jne    408384 <flatcc_emitter_reset@@Base+0x54>
  40837d:	mov    QWORD PTR [rbx+0x40],rcx
  408381:	mov    rdx,rcx
  408384:	lea    rdx,[rdx+rdx*2]
  408388:	shr    rdx,0x2
  40838c:	shr    rcx,0x2
  408390:	add    rcx,rdx
  408393:	mov    QWORD PTR [rbx+0x40],rcx
  408397:	mov    QWORD PTR [rbx+0x30],0x0
  40839f:	add    rcx,rcx
  4083a2:	cmp    rcx,QWORD PTR [rbx+0x38]
  4083a6:	jae    40841b <flatcc_emitter_reset@@Base+0xeb>
  4083a8:	mov    rdi,QWORD PTR [rax+0xb80]
  4083af:	cmp    rdi,rax
  4083b2:	je     40841b <flatcc_emitter_reset@@Base+0xeb>
  4083b4:	lea    rcx,[rax+0xb80]
  4083bb:	mov    r14,0xfffffffffffff480
  4083c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4083cc:	nop    DWORD PTR [rax+0x0]
  4083d0:	mov    rdx,QWORD PTR [rdi+0xb80]
  4083d7:	mov    QWORD PTR [rcx],rdx
  4083da:	mov    rcx,QWORD PTR [rdi+0xb80]
  4083e1:	mov    QWORD PTR [rcx+0xb88],rax
  4083e8:	call   403030 <free@plt>
  4083ed:	mov    rax,QWORD PTR [rbx+0x38]
  4083f1:	add    rax,r14
  4083f4:	mov    QWORD PTR [rbx+0x38],rax
  4083f8:	mov    rcx,QWORD PTR [rbx+0x40]
  4083fc:	add    rcx,rcx
  4083ff:	cmp    rcx,rax
  408402:	jae    40841b <flatcc_emitter_reset@@Base+0xeb>
  408404:	mov    rax,QWORD PTR [rbx+0x8]
  408408:	lea    rcx,[rax+0xb80]
  40840f:	mov    rdi,QWORD PTR [rax+0xb80]
  408416:	cmp    rdi,QWORD PTR [rbx]
  408419:	jne    4083d0 <flatcc_emitter_reset@@Base+0xa0>
  40841b:	add    rsp,0x8
  40841f:	pop    rbx
  408420:	pop    r14
  408422:	ret    
  408423:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40842d:	nop    DWORD PTR [rax]

0000000000408430 <flatcc_emitter_clear@@Base>:
  408430:	push   r14
  408432:	push   rbx
  408433:	push   rax
  408434:	mov    rbx,QWORD PTR [rdi]
  408437:	test   rbx,rbx
  40843a:	je     40849c <flatcc_emitter_clear@@Base+0x6c>
  40843c:	mov    r14,rdi
  40843f:	mov    rax,QWORD PTR [rbx+0xb88]
  408446:	mov    QWORD PTR [rax+0xb80],0x0
  408451:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40845b:	nop    DWORD PTR [rax+rax*1+0x0]
  408460:	mov    rax,QWORD PTR [rbx+0xb80]
  408467:	test   rax,rax
  40846a:	je     40847d <flatcc_emitter_clear@@Base+0x4d>
  40846c:	mov    rbx,rax
  40846f:	mov    rdi,QWORD PTR [rax+0xb88]
  408476:	call   403030 <free@plt>
  40847b:	jmp    408460 <flatcc_emitter_clear@@Base+0x30>
  40847d:	mov    rdi,rbx
  408480:	call   403030 <free@plt>
  408485:	vxorps xmm0,xmm0,xmm0
  408489:	vmovups YMMWORD PTR [r14+0x20],ymm0
  40848f:	vmovups YMMWORD PTR [r14],ymm0
  408494:	mov    QWORD PTR [r14+0x40],0x0
  40849c:	add    rsp,0x8
  4084a0:	pop    rbx
  4084a1:	pop    r14
  4084a3:	vzeroupper 
  4084a6:	ret    
  4084a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004084b0 <flatcc_emitter@@Base>:
  4084b0:	push   rbp
  4084b1:	push   r15
  4084b3:	push   r14
  4084b5:	push   r13
  4084b7:	push   r12
  4084b9:	push   rbx
  4084ba:	push   rax
  4084bb:	mov    r14d,edx
  4084be:	mov    r12,rsi
  4084c1:	mov    rbp,rdi
  4084c4:	add    QWORD PTR [rdi+0x30],r8
  4084c8:	test   ecx,ecx
  4084ca:	js     408645 <flatcc_emitter@@Base+0x195>
  4084d0:	mov    rdx,QWORD PTR [rbp+0x28]
  4084d4:	cmp    rdx,r8
  4084d7:	jae    4087f8 <flatcc_emitter@@Base+0x348>
  4084dd:	xor    eax,eax
  4084df:	test   r14d,r14d
  4084e2:	je     4088d7 <flatcc_emitter@@Base+0x427>
  4084e8:	mov    r15,QWORD PTR [r12+0x8]
  4084ed:	test   r15,r15
  4084f0:	je     408630 <flatcc_emitter@@Base+0x180>
  4084f6:	mov    r13,QWORD PTR [r12]
  4084fa:	jmp    408529 <flatcc_emitter@@Base+0x79>
  4084fc:	mov    rbx,r15
  4084ff:	mov    rdi,QWORD PTR [rbp+0x20]
  408503:	mov    rsi,r13
  408506:	mov    rdx,rbx
  408509:	call   4030c0 <memcpy@plt>
  40850e:	add    QWORD PTR [rbp+0x20],rbx
  408512:	add    r13,rbx
  408515:	mov    rdx,QWORD PTR [rbp+0x28]
  408519:	sub    rdx,rbx
  40851c:	mov    QWORD PTR [rbp+0x28],rdx
  408520:	sub    r15,rbx
  408523:	je     408630 <flatcc_emitter@@Base+0x180>
  408529:	mov    rbx,r15
  40852c:	cmp    r15,rdx
  40852f:	jbe    4084ff <flatcc_emitter@@Base+0x4f>
  408531:	mov    rbx,rdx
  408534:	test   rbx,rbx
  408537:	je     4085a1 <flatcc_emitter@@Base+0xf1>
  408539:	jmp    4084ff <flatcc_emitter@@Base+0x4f>
  40853b:	nop    DWORD PTR [rax+rax*1+0x0]
  408540:	mov    QWORD PTR [rax+0xb88],rbx
  408547:	mov    rcx,QWORD PTR [rbp+0x0]
  40854b:	mov    QWORD PTR [rax+0xb80],rcx
  408552:	mov    QWORD PTR [rcx+0xb88],rax
  408559:	mov    QWORD PTR [rbx+0xb80],rax
  408560:	mov    QWORD PTR [rbp+0x8],rax
  408564:	mov    QWORD PTR [rbp+0x20],rax
  408568:	mov    QWORD PTR [rbp+0x28],0xb80
  408570:	mov    rcx,QWORD PTR [rax+0xb88]
  408577:	mov    ecx,DWORD PTR [rcx+0xb90]
  40857d:	mov    edx,0xb80
  408582:	add    ecx,edx
  408584:	mov    DWORD PTR [rax+0xb90],ecx
  40858a:	mov    ebx,0xb80
  40858f:	cmp    r15,rbx
  408592:	jbe    4084fc <flatcc_emitter@@Base+0x4c>
  408598:	test   rbx,rbx
  40859b:	jne    4084ff <flatcc_emitter@@Base+0x4f>
  4085a1:	mov    rbx,QWORD PTR [rbp+0x8]
  4085a5:	test   rbx,rbx
  4085a8:	je     4085b7 <flatcc_emitter@@Base+0x107>
  4085aa:	mov    rax,QWORD PTR [rbx+0xb80]
  4085b1:	cmp    rax,QWORD PTR [rbp+0x0]
  4085b5:	jne    408560 <flatcc_emitter@@Base+0xb0>
  4085b7:	mov    edi,0xb98
  4085bc:	call   4030d0 <malloc@plt>
  4085c1:	test   rax,rax
  4085c4:	je     40880a <flatcc_emitter@@Base+0x35a>
  4085ca:	add    QWORD PTR [rbp+0x38],0xb80
  4085d2:	test   rbx,rbx
  4085d5:	jne    408540 <flatcc_emitter@@Base+0x90>
  4085db:	mov    QWORD PTR [rbp+0x0],rax
  4085df:	mov    QWORD PTR [rbp+0x8],rax
  4085e3:	mov    QWORD PTR [rax+0xb80],rax
  4085ea:	mov    QWORD PTR [rax+0xb88],rax
  4085f1:	mov    rcx,rax
  4085f4:	add    rcx,0x5c0
  4085fb:	mov    QWORD PTR [rbp+0x10],rcx
  4085ff:	mov    QWORD PTR [rbp+0x20],rcx
  408603:	mov    QWORD PTR [rbp+0x18],0x5c0
  40860b:	mov    QWORD PTR [rbp+0x28],0x5c0
  408613:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40861d:	mov    ebx,0x5c0
  408622:	cmp    r15,rbx
  408625:	ja     408598 <flatcc_emitter@@Base+0xe8>
  40862b:	jmp    4084fc <flatcc_emitter@@Base+0x4c>
  408630:	dec    r14d
  408633:	add    r12,0x10
  408637:	test   r14d,r14d
  40863a:	jne    4084e8 <flatcc_emitter@@Base+0x38>
  408640:	jmp    4088d5 <flatcc_emitter@@Base+0x425>
  408645:	lea    rsi,[rbp+0x18]
  408649:	mov    rdx,QWORD PTR [rbp+0x18]
  40864d:	cmp    rdx,r8
  408650:	jae    408814 <flatcc_emitter@@Base+0x364>
  408656:	xor    eax,eax
  408658:	test   r14d,r14d
  40865b:	je     4088d7 <flatcc_emitter@@Base+0x427>
  408661:	mov    QWORD PTR [rsp],rsi
  408665:	movsxd rax,r14d
  408668:	shl    rax,0x4
  40866c:	add    r12,rax
  40866f:	mov    edx,0xfffff480
  408674:	mov    r15,QWORD PTR [r12-0x8]
  408679:	add    r12,0xfffffffffffffff0
  40867d:	test   r15,r15
  408680:	je     4087ea <flatcc_emitter@@Base+0x33a>
  408686:	mov    r13,QWORD PTR [r12]
  40868a:	add    r13,r15
  40868d:	jmp    4086c1 <flatcc_emitter@@Base+0x211>
  40868f:	nop
  408690:	mov    rbx,r15
  408693:	mov    rdi,QWORD PTR [rbp+0x10]
  408697:	sub    rdi,rbx
  40869a:	mov    QWORD PTR [rbp+0x10],rdi
  40869e:	sub    rax,rbx
  4086a1:	mov    QWORD PTR [rbp+0x18],rax
  4086a5:	sub    r13,rbx
  4086a8:	mov    rsi,r13
  4086ab:	mov    rdx,rbx
  4086ae:	call   4030c0 <memcpy@plt>
  4086b3:	mov    edx,0xfffff480
  4086b8:	sub    r15,rbx
  4086bb:	je     4087ea <flatcc_emitter@@Base+0x33a>
  4086c1:	mov    rax,QWORD PTR [rsp]
  4086c5:	mov    rax,QWORD PTR [rax]
  4086c8:	cmp    r15,rax
  4086cb:	ja     408718 <flatcc_emitter@@Base+0x268>
  4086cd:	jmp    408690 <flatcc_emitter@@Base+0x1e0>
  4086cf:	nop
  4086d0:	mov    ecx,DWORD PTR [rbx+0xb90]
  4086d6:	add    ecx,edx
  4086d8:	mov    DWORD PTR [rax+0xb90],ecx
  4086de:	mov    QWORD PTR [rbp+0x0],rax
  4086e2:	lea    rcx,[rax+0xb80]
  4086e9:	mov    QWORD PTR [rbp+0x10],rcx
  4086ed:	mov    QWORD PTR [rbp+0x18],0xb80
  4086f5:	mov    rcx,QWORD PTR [rax+0xb80]
  4086fc:	mov    ecx,DWORD PTR [rcx+0xb90]
  408702:	add    ecx,edx
  408704:	mov    DWORD PTR [rax+0xb90],ecx
  40870a:	mov    eax,0xb80
  40870f:	cmp    r15,rax
  408712:	jbe    408690 <flatcc_emitter@@Base+0x1e0>
  408718:	mov    rbx,rax
  40871b:	test   rax,rax
  40871e:	jne    408693 <flatcc_emitter@@Base+0x1e3>
  408724:	mov    rbx,QWORD PTR [rbp+0x0]
  408728:	test   rbx,rbx
  40872b:	je     40873a <flatcc_emitter@@Base+0x28a>
  40872d:	mov    rax,QWORD PTR [rbx+0xb88]
  408734:	cmp    rax,QWORD PTR [rbp+0x8]
  408738:	jne    4086d0 <flatcc_emitter@@Base+0x220>
  40873a:	mov    edi,0xb98
  40873f:	call   4030d0 <malloc@plt>
  408744:	test   rax,rax
  408747:	je     40880a <flatcc_emitter@@Base+0x35a>
  40874d:	add    QWORD PTR [rbp+0x38],0xb80
  408755:	test   rbx,rbx
  408758:	je     408790 <flatcc_emitter@@Base+0x2e0>
  40875a:	mov    rcx,QWORD PTR [rbp+0x8]
  40875e:	mov    QWORD PTR [rax+0xb88],rcx
  408765:	mov    QWORD PTR [rax+0xb80],rbx
  40876c:	mov    QWORD PTR [rbx+0xb88],rax
  408773:	mov    QWORD PTR [rcx+0xb80],rax
  40877a:	mov    QWORD PTR [rbp+0x0],rax
  40877e:	mov    edx,0xfffff480
  408783:	jmp    4086e2 <flatcc_emitter@@Base+0x232>
  408788:	nop    DWORD PTR [rax+rax*1+0x0]
  408790:	mov    QWORD PTR [rbp+0x0],rax
  408794:	mov    QWORD PTR [rbp+0x8],rax
  408798:	mov    QWORD PTR [rax+0xb80],rax
  40879f:	mov    QWORD PTR [rax+0xb88],rax
  4087a6:	mov    rcx,rax
  4087a9:	add    rcx,0x5c0
  4087b0:	mov    QWORD PTR [rbp+0x10],rcx
  4087b4:	mov    QWORD PTR [rbp+0x20],rcx
  4087b8:	mov    QWORD PTR [rbp+0x18],0x5c0
  4087c0:	mov    QWORD PTR [rbp+0x28],0x5c0
  4087c8:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4087d2:	mov    eax,0x5c0
  4087d7:	mov    edx,0xfffff480
  4087dc:	cmp    r15,rax
  4087df:	ja     408718 <flatcc_emitter@@Base+0x268>
  4087e5:	jmp    408690 <flatcc_emitter@@Base+0x1e0>
  4087ea:	dec    r14d
  4087ed:	jne    408674 <flatcc_emitter@@Base+0x1c4>
  4087f3:	jmp    4088d5 <flatcc_emitter@@Base+0x425>
  4087f8:	lea    rsi,[rbp+0x28]
  4087fc:	mov    rbx,QWORD PTR [rbp+0x20]
  408800:	lea    rcx,[rbx+r8*1]
  408804:	mov    QWORD PTR [rbp+0x20],rcx
  408808:	jmp    40881f <flatcc_emitter@@Base+0x36f>
  40880a:	mov    eax,0xffffffff
  40880f:	jmp    4088d7 <flatcc_emitter@@Base+0x427>
  408814:	mov    rbx,QWORD PTR [rbp+0x10]
  408818:	sub    rbx,r8
  40881b:	mov    QWORD PTR [rbp+0x10],rbx
  40881f:	sub    rdx,r8
  408822:	mov    QWORD PTR [rsi],rdx
  408825:	xor    eax,eax
  408827:	test   r14d,r14d
  40882a:	je     4088d7 <flatcc_emitter@@Base+0x427>
  408830:	lea    r15d,[r14-0x1]
  408834:	mov    r13d,r14d
  408837:	and    r13d,0x3
  40883b:	je     408864 <flatcc_emitter@@Base+0x3b4>
  40883d:	xor    ebp,ebp
  40883f:	nop
  408840:	mov    rsi,QWORD PTR [r12]
  408844:	mov    rdx,QWORD PTR [r12+0x8]
  408849:	mov    rdi,rbx
  40884c:	call   4030c0 <memcpy@plt>
  408851:	add    rbx,QWORD PTR [r12+0x8]
  408856:	add    r12,0x10
  40885a:	inc    ebp
  40885c:	cmp    r13d,ebp
  40885f:	jne    408840 <flatcc_emitter@@Base+0x390>
  408861:	sub    r14d,ebp
  408864:	cmp    r15d,0x3
  408868:	jb     4088d5 <flatcc_emitter@@Base+0x425>
  40886a:	nop    WORD PTR [rax+rax*1+0x0]
  408870:	mov    rsi,QWORD PTR [r12]
  408874:	mov    rdx,QWORD PTR [r12+0x8]
  408879:	mov    rdi,rbx
  40887c:	call   4030c0 <memcpy@plt>
  408881:	add    rbx,QWORD PTR [r12+0x8]
  408886:	mov    rsi,QWORD PTR [r12+0x10]
  40888b:	mov    rdx,QWORD PTR [r12+0x18]
  408890:	mov    rdi,rbx
  408893:	call   4030c0 <memcpy@plt>
  408898:	add    rbx,QWORD PTR [r12+0x18]
  40889d:	mov    rsi,QWORD PTR [r12+0x20]
  4088a2:	mov    rdx,QWORD PTR [r12+0x28]
  4088a7:	mov    rdi,rbx
  4088aa:	call   4030c0 <memcpy@plt>
  4088af:	add    rbx,QWORD PTR [r12+0x28]
  4088b4:	mov    rsi,QWORD PTR [r12+0x30]
  4088b9:	mov    rdx,QWORD PTR [r12+0x38]
  4088be:	mov    rdi,rbx
  4088c1:	call   4030c0 <memcpy@plt>
  4088c6:	add    rbx,QWORD PTR [r12+0x38]
  4088cb:	add    r12,0x40
  4088cf:	add    r14d,0xfffffffc
  4088d3:	jne    408870 <flatcc_emitter@@Base+0x3c0>
  4088d5:	xor    eax,eax
  4088d7:	add    rsp,0x8
  4088db:	pop    rbx
  4088dc:	pop    r12
  4088de:	pop    r13
  4088e0:	pop    r14
  4088e2:	pop    r15
  4088e4:	pop    rbp
  4088e5:	ret    
  4088e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004088f0 <flatcc_emitter_copy_buffer@@Base>:
  4088f0:	push   r15
  4088f2:	push   r14
  4088f4:	push   r13
  4088f6:	push   r12
  4088f8:	push   rbx
  4088f9:	mov    rax,rdx
  4088fc:	mov    rdx,QWORD PTR [rdi+0x30]
  408900:	cmp    rdx,rax
  408903:	ja     40899b <flatcc_emitter_copy_buffer@@Base+0xab>
  408909:	mov    r14,rdi
  40890c:	mov    rax,QWORD PTR [rdi]
  40890f:	test   rax,rax
  408912:	je     40899b <flatcc_emitter_copy_buffer@@Base+0xab>
  408918:	mov    r12,rsi
  40891b:	cmp    rax,QWORD PTR [r14+0x8]
  40891f:	je     4089ab <flatcc_emitter_copy_buffer@@Base+0xbb>
  408925:	mov    r15d,0xb80
  40892b:	mov    r13d,0xb80
  408931:	sub    r13,QWORD PTR [r14+0x18]
  408935:	mov    rsi,QWORD PTR [r14+0x10]
  408939:	mov    rdi,r12
  40893c:	mov    rdx,r13
  40893f:	call   4030c0 <memcpy@plt>
  408944:	add    r13,r12
  408947:	mov    rax,QWORD PTR [r14]
  40894a:	mov    rbx,QWORD PTR [rax+0xb80]
  408951:	cmp    rbx,QWORD PTR [r14+0x8]
  408955:	je     408984 <flatcc_emitter_copy_buffer@@Base+0x94>
  408957:	nop    WORD PTR [rax+rax*1+0x0]
  408960:	mov    edx,0xb80
  408965:	mov    rdi,r13
  408968:	mov    rsi,rbx
  40896b:	call   4030c0 <memcpy@plt>
  408970:	add    r13,0xb80
  408977:	mov    rbx,QWORD PTR [rbx+0xb80]
  40897e:	cmp    rbx,QWORD PTR [r14+0x8]
  408982:	jne    408960 <flatcc_emitter_copy_buffer@@Base+0x70>
  408984:	sub    r15,QWORD PTR [r14+0x28]
  408988:	mov    rdi,r13
  40898b:	mov    rsi,rbx
  40898e:	mov    rdx,r15
  408991:	call   4030c0 <memcpy@plt>
  408996:	mov    r12,r13
  408999:	jmp    40899e <flatcc_emitter_copy_buffer@@Base+0xae>
  40899b:	xor    r12d,r12d
  40899e:	mov    rax,r12
  4089a1:	pop    rbx
  4089a2:	pop    r12
  4089a4:	pop    r13
  4089a6:	pop    r14
  4089a8:	pop    r15
  4089aa:	ret    
  4089ab:	mov    rsi,QWORD PTR [r14+0x10]
  4089af:	mov    rdi,r12
  4089b2:	call   4030c0 <memcpy@plt>
  4089b7:	jmp    40899e <flatcc_emitter_copy_buffer@@Base+0xae>
  4089b9:	nop    DWORD PTR [rax+0x0]

00000000004089c0 <__libc_csu_init@@Base>:
  4089c0:	endbr64 
  4089c4:	push   r15
  4089c6:	lea    r15,[rip+0x542b]        # 40ddf8 <flatcc_builder_padding_base@@Base+0x4a88>
  4089cd:	push   r14
  4089cf:	mov    r14,rdx
  4089d2:	push   r13
  4089d4:	mov    r13,rsi
  4089d7:	push   r12
  4089d9:	mov    r12d,edi
  4089dc:	push   rbp
  4089dd:	lea    rbp,[rip+0x541c]        # 40de00 <flatcc_builder_padding_base@@Base+0x4a90>
  4089e4:	push   rbx
  4089e5:	sub    rbp,r15
  4089e8:	sub    rsp,0x8
  4089ec:	call   403000 <free@plt-0x30>
  4089f1:	sar    rbp,0x3
  4089f5:	je     408a16 <__libc_csu_init@@Base+0x56>
  4089f7:	xor    ebx,ebx
  4089f9:	nop    DWORD PTR [rax+0x0]
  408a00:	mov    rdx,r14
  408a03:	mov    rsi,r13
  408a06:	mov    edi,r12d
  408a09:	call   QWORD PTR [r15+rbx*8]
  408a0d:	add    rbx,0x1
  408a11:	cmp    rbp,rbx
  408a14:	jne    408a00 <__libc_csu_init@@Base+0x40>
  408a16:	add    rsp,0x8
  408a1a:	pop    rbx
  408a1b:	pop    rbp
  408a1c:	pop    r12
  408a1e:	pop    r13
  408a20:	pop    r14
  408a22:	pop    r15
  408a24:	ret    
  408a25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408a30 <__libc_csu_fini@@Base>:
  408a30:	endbr64 
  408a34:	ret    

Disassembly of section .fini:

0000000000408a38 <.fini>:
  408a38:	endbr64 
  408a3c:	sub    rsp,0x8
  408a40:	add    rsp,0x8
  408a44:	ret    
