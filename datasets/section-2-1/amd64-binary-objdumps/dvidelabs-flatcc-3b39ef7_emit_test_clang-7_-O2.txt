
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xafe1]        # 40dff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xafe2]        # 40e008 <flatcc_builder_padding_base@@Base+0x4ce8>
  403026:	jmp    QWORD PTR [rip+0xafe4]        # 40e010 <flatcc_builder_padding_base@@Base+0x4cf0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xafe2]        # 40e018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xafda]        # 40e020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xafd2]        # 40e028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <printf@plt>:
  403060:	jmp    QWORD PTR [rip+0xafca]        # 40e030 <printf@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <__assert_fail@plt>:
  403070:	jmp    QWORD PTR [rip+0xafc2]        # 40e038 <__assert_fail@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memset@plt>:
  403080:	jmp    QWORD PTR [rip+0xafba]        # 40e040 <memset@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <fputc@plt>:
  403090:	jmp    QWORD PTR [rip+0xafb2]        # 40e048 <fputc@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memchr@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xafaa]        # 40e050 <memchr@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcmp@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xafa2]        # 40e058 <memcmp@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <fprintf@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xaf9a]        # 40e060 <fprintf@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <memcpy@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xaf92]        # 40e068 <memcpy@GLIBC_2.14>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <malloc@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xaf8a]        # 40e070 <malloc@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <realloc@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xaf82]        # 40e078 <realloc@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <fwrite@plt>:
  403100:	jmp    QWORD PTR [rip+0xaf7a]        # 40e080 <fwrite@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <posix_memalign@plt>:
  403110:	jmp    QWORD PTR [rip+0xaf72]        # 40e088 <posix_memalign@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403120 <_start@@Base>:
  403120:	endbr64 
  403124:	xor    ebp,ebp
  403126:	mov    r9,rdx
  403129:	pop    rsi
  40312a:	mov    rdx,rsp
  40312d:	and    rsp,0xfffffffffffffff0
  403131:	push   rax
  403132:	push   rsp
  403133:	mov    r8,0x408b00
  40313a:	mov    rcx,0x408a90
  403141:	mov    rdi,0x4037d0
  403148:	call   QWORD PTR [rip+0xae9a]        # 40dfe8 <__libc_start_main@GLIBC_2.2.5>
  40314e:	hlt    
  40314f:	nop
  403150:	endbr64 
  403154:	ret    
  403155:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40315f:	nop
  403160:	mov    eax,0x40e0a0
  403165:	cmp    rax,0x40e0a0
  40316b:	je     403180 <_start@@Base+0x60>
  40316d:	mov    eax,0x0
  403172:	test   rax,rax
  403175:	je     403180 <_start@@Base+0x60>
  403177:	mov    edi,0x40e0a0
  40317c:	jmp    rax
  40317e:	xchg   ax,ax
  403180:	ret    
  403181:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40318c:	nop    DWORD PTR [rax+0x0]
  403190:	mov    esi,0x40e0a0
  403195:	sub    rsi,0x40e0a0
  40319c:	mov    rax,rsi
  40319f:	shr    rsi,0x3f
  4031a3:	sar    rax,0x3
  4031a7:	add    rsi,rax
  4031aa:	sar    rsi,1
  4031ad:	je     4031c0 <_start@@Base+0xa0>
  4031af:	mov    eax,0x0
  4031b4:	test   rax,rax
  4031b7:	je     4031c0 <_start@@Base+0xa0>
  4031b9:	mov    edi,0x40e0a0
  4031be:	jmp    rax
  4031c0:	ret    
  4031c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031cc:	nop    DWORD PTR [rax+0x0]
  4031d0:	endbr64 
  4031d4:	cmp    BYTE PTR [rip+0xaec5],0x0        # 40e0a0 <__bss_start@@Base>
  4031db:	jne    4031f0 <_start@@Base+0xd0>
  4031dd:	push   rbp
  4031de:	mov    rbp,rsp
  4031e1:	call   403160 <_start@@Base+0x40>
  4031e6:	mov    BYTE PTR [rip+0xaeb3],0x1        # 40e0a0 <__bss_start@@Base>
  4031ed:	pop    rbp
  4031ee:	ret    
  4031ef:	nop
  4031f0:	ret    
  4031f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031fc:	nop    DWORD PTR [rax+0x0]
  403200:	endbr64 
  403204:	jmp    403190 <_start@@Base+0x70>
  403206:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403210 <dbg_emitter@@Base>:
  403210:	push   rbp
  403211:	push   r15
  403213:	push   r14
  403215:	push   r13
  403217:	push   r12
  403219:	push   rbx
  40321a:	push   rax
  40321b:	mov    r13d,ecx
  40321e:	mov    ebp,edx
  403220:	mov    QWORD PTR [rsp],rsi
  403224:	movsxd rdx,ecx
  403227:	lea    rdi,[rip+0x5dda]        # 409008 <_IO_stdin_used@@Base+0x8>
  40322e:	xor    eax,eax
  403230:	mov    esi,ebp
  403232:	mov    rcx,r8
  403235:	call   403060 <printf@plt>
  40323a:	test   ebp,ebp
  40323c:	jle    4032c1 <dbg_emitter@@Base+0xb1>
  403242:	mov    ebp,ebp
  403244:	mov    rax,QWORD PTR [rsp]
  403248:	lea    rbx,[rax+0x8]
  40324c:	lea    r15,[rip+0x60cd]        # 409320 <flatcc_builder_padding_base@@Base>
  403253:	xor    r12d,r12d
  403256:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403260:	mov    rax,QWORD PTR [rbx-0x8]
  403264:	cmp    rax,r15
  403267:	jne    403281 <dbg_emitter@@Base+0x71>
  403269:	movsxd rsi,r13d
  40326c:	mov    rdx,QWORD PTR [rbx]
  40326f:	xor    eax,eax
  403271:	lea    rdi,[rip+0x5dc1]        # 409039 <_IO_stdin_used@@Base+0x39>
  403278:	call   403060 <printf@plt>
  40327d:	mov    rax,QWORD PTR [rbx-0x8]
  403281:	mov    r14,rbx
  403284:	test   rax,rax
  403287:	jne    4032b0 <dbg_emitter@@Base+0xa0>
  403289:	movsxd rsi,r13d
  40328c:	mov    rax,r12
  40328f:	shl    rax,0x4
  403293:	mov    rcx,QWORD PTR [rsp]
  403297:	lea    r14,[rcx+rax*1]
  40329b:	add    r14,0x8
  40329f:	mov    rdx,QWORD PTR [rbx]
  4032a2:	xor    eax,eax
  4032a4:	lea    rdi,[rip+0x5daf]        # 40905a <_IO_stdin_used@@Base+0x5a>
  4032ab:	call   403060 <printf@plt>
  4032b0:	add    r13d,DWORD PTR [r14]
  4032b3:	add    r12,0x1
  4032b7:	add    rbx,0x10
  4032bb:	add    rbp,0xffffffffffffffff
  4032bf:	jne    403260 <dbg_emitter@@Base+0x50>
  4032c1:	xor    eax,eax
  4032c3:	add    rsp,0x8
  4032c7:	pop    rbx
  4032c8:	pop    r12
  4032ca:	pop    r13
  4032cc:	pop    r14
  4032ce:	pop    r15
  4032d0:	pop    rbp
  4032d1:	ret    
  4032d2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4032dc:	nop    DWORD PTR [rax+0x0]

00000000004032e0 <debug_test@@Base>:
  4032e0:	push   rbp
  4032e1:	mov    rbp,rsp
  4032e4:	push   rbx
  4032e5:	and    rsp,0xffffffffffffffe0
  4032e9:	sub    rsp,0x1e0
  4032f0:	vxorps xmm0,xmm0,xmm0
  4032f4:	vmovaps YMMWORD PTR [rsp],ymm0
  4032f9:	mov    QWORD PTR [rsp+0x20],0x0
  403302:	lea    rdi,[rip+0x5f97]        # 4092a0 <_IO_stdin_used@@Base+0x2a0>
  403309:	vzeroupper 
  40330c:	call   403040 <puts@plt>
  403311:	lea    rsi,[rip+0xfffffffffffffef8]        # 403210 <dbg_emitter@@Base>
  403318:	lea    rbx,[rsp+0x40]
  40331d:	xor    edx,edx
  40331f:	xor    ecx,ecx
  403321:	xor    r8d,r8d
  403324:	mov    rdi,rbx
  403327:	call   403980 <flatcc_builder_custom_init@@Base>
  40332c:	mov    rsi,rsp
  40332f:	mov    edx,0xa
  403334:	mov    ecx,0x4
  403339:	mov    r8d,0x4
  40333f:	mov    r9d,0x3fffffff
  403345:	mov    rdi,rbx
  403348:	call   406640 <flatcc_builder_create_vector@@Base>
  40334d:	mov    rdi,rbx
  403350:	mov    esi,eax
  403352:	call   403370 <debug_test@@Base+0x90>
  403357:	mov    rdi,rbx
  40335a:	call   403df0 <flatcc_builder_clear@@Base>
  40335f:	xor    eax,eax
  403361:	lea    rsp,[rbp-0x8]
  403365:	pop    rbx
  403366:	pop    rbp
  403367:	ret    
  403368:	nop    DWORD PTR [rax+rax*1+0x0]
  403370:	push   rbp
  403371:	push   r14
  403373:	push   rbx
  403374:	mov    ebp,esi
  403376:	mov    rbx,rdi
  403379:	xor    r14d,r14d
  40337c:	xor    esi,esi
  40337e:	xor    edx,edx
  403380:	xor    ecx,ecx
  403382:	call   4047d0 <flatcc_builder_start_buffer@@Base>
  403387:	test   eax,eax
  403389:	je     403390 <debug_test@@Base+0xb0>
  40338b:	pop    rbx
  40338c:	pop    r14
  40338e:	pop    rbp
  40338f:	ret    
  403390:	mov    esi,0x3
  403395:	mov    rdi,rbx
  403398:	call   405aa0 <flatcc_builder_start_table@@Base>
  40339d:	test   eax,eax
  40339f:	je     4033b0 <debug_test@@Base+0xd0>
  4033a1:	mov    rdi,rbx
  4033a4:	mov    esi,r14d
  4033a7:	pop    rbx
  4033a8:	pop    r14
  4033aa:	pop    rbp
  4033ab:	jmp    4049f0 <flatcc_builder_end_buffer@@Base>
  4033b0:	xor    r14d,r14d
  4033b3:	xor    esi,esi
  4033b5:	mov    edx,0x8
  4033ba:	mov    ecx,0x8
  4033bf:	mov    rdi,rbx
  4033c2:	call   406e20 <flatcc_builder_table_add@@Base>
  4033c7:	test   rax,rax
  4033ca:	je     4033a1 <debug_test@@Base+0xc1>
  4033cc:	mov    QWORD PTR [rax],0x2a
  4033d3:	test   ebp,ebp
  4033d5:	je     4033a1 <debug_test@@Base+0xc1>
  4033d7:	mov    esi,0x2
  4033dc:	mov    rdi,rbx
  4033df:	call   406cc0 <flatcc_builder_table_add_offset@@Base>
  4033e4:	test   rax,rax
  4033e7:	je     4033a1 <debug_test@@Base+0xc1>
  4033e9:	mov    DWORD PTR [rax],ebp
  4033eb:	mov    esi,0x1
  4033f0:	mov    edx,0x1
  4033f5:	mov    ecx,0x1
  4033fa:	mov    rdi,rbx
  4033fd:	call   406e20 <flatcc_builder_table_add@@Base>
  403402:	test   rax,rax
  403405:	je     4033a1 <debug_test@@Base+0xc1>
  403407:	mov    BYTE PTR [rax],0x1
  40340a:	lea    rsi,[rip+0x5e7b]        # 40928c <_IO_stdin_used@@Base+0x28c>
  403411:	xor    edx,edx
  403413:	mov    rdi,rbx
  403416:	call   406440 <flatcc_builder_check_required@@Base>
  40341b:	test   eax,eax
  40341d:	je     40342f <debug_test@@Base+0x14f>
  40341f:	mov    rdi,rbx
  403422:	call   4064b0 <flatcc_builder_end_table@@Base>
  403427:	mov    r14d,eax
  40342a:	jmp    4033a1 <debug_test@@Base+0xc1>
  40342f:	lea    rdi,[rip+0x5ce2]        # 409118 <_IO_stdin_used@@Base+0x118>
  403436:	lea    rsi,[rip+0x5d47]        # 409184 <_IO_stdin_used@@Base+0x184>
  40343d:	lea    rcx,[rip+0x5db7]        # 4091fb <_IO_stdin_used@@Base+0x1fb>
  403444:	mov    edx,0x15
  403449:	call   403070 <__assert_fail@plt>
  40344e:	xchg   ax,ax

0000000000403450 <emit_test@@Base>:
  403450:	push   rbp
  403451:	push   r15
  403453:	push   r14
  403455:	push   r13
  403457:	push   r12
  403459:	push   rbx
  40345a:	sub    rsp,0x1c8
  403461:	vmovaps xmm0,XMMWORD PTR [rip+0x5e27]        # 409290 <_IO_stdin_used@@Base+0x290>
  403469:	vmovaps XMMWORD PTR [rsp+0x30],xmm0
  40346f:	lea    rbp,[rsp+0x40]
  403474:	mov    rdi,rbp
  403477:	call   403a30 <flatcc_builder_init@@Base>
  40347c:	mov    rdi,rbp
  40347f:	call   4082f0 <flatcc_builder_get_emit_context@@Base>
  403484:	mov    rbx,rax
  403487:	lea    rsi,[rsp+0x30]
  40348c:	mov    edx,0x4
  403491:	mov    ecx,0x4
  403496:	mov    r8d,0x4
  40349c:	mov    r9d,0x3fffffff
  4034a2:	mov    rdi,rbp
  4034a5:	call   406640 <flatcc_builder_create_vector@@Base>
  4034aa:	mov    rdi,rbp
  4034ad:	mov    esi,eax
  4034af:	call   403370 <debug_test@@Base+0x90>
  4034b4:	mov    rcx,QWORD PTR [rbx]
  4034b7:	mov    eax,0xffffffff
  4034bc:	cmp    rcx,QWORD PTR [rbx+0x8]
  4034c0:	jne    4036e5 <emit_test@@Base+0x295>
  4034c6:	mov    r15,QWORD PTR [rbx+0x10]
  4034ca:	test   r15,r15
  4034cd:	je     4036e5 <emit_test@@Base+0x295>
  4034d3:	mov    r13,QWORD PTR [rbx+0x30]
  4034d7:	lea    rdi,[rsp+0x40]
  4034dc:	call   407fb0 <flatcc_builder_get_buffer_size@@Base>
  4034e1:	cmp    r13,rax
  4034e4:	jne    403754 <emit_test@@Base+0x304>
  4034ea:	mov    rbx,QWORD PTR [rip+0xab07]        # 40dff8 <stderr@GLIBC_2.2.5>
  4034f1:	mov    rdi,QWORD PTR [rbx]
  4034f4:	lea    rsi,[rip+0x5c02]        # 4090fd <_IO_stdin_used@@Base+0xfd>
  4034fb:	xor    eax,eax
  4034fd:	mov    edx,r13d
  403500:	call   4030c0 <fprintf@plt>
  403505:	mov    rbx,QWORD PTR [rbx]
  403508:	lea    rsi,[rip+0x5d19]        # 409228 <_IO_stdin_used@@Base+0x228>
  40350f:	lea    rdx,[rip+0x5bf8]        # 40910e <_IO_stdin_used@@Base+0x10e>
  403516:	xor    eax,eax
  403518:	mov    rdi,rbx
  40351b:	call   4030c0 <fprintf@plt>
  403520:	test   r13d,r13d
  403523:	je     40360a <emit_test@@Base+0x1ba>
  403529:	mov    QWORD PTR [rsp+0x8],r13
  40352e:	mov    r12d,r13d
  403531:	lea    r13,[rip+0x5d03]        # 40923b <_IO_stdin_used@@Base+0x23b>
  403538:	xor    ebp,ebp
  40353a:	nop    WORD PTR [rax+rax*1+0x0]
  403540:	mov    r14d,ebp
  403543:	and    r14d,0xf
  403547:	test   r14d,r14d
  40354a:	jne    403580 <emit_test@@Base+0x130>
  40354c:	test   rbp,rbp
  40354f:	je     403567 <emit_test@@Base+0x117>
  403551:	xor    eax,eax
  403553:	mov    rdi,rbx
  403556:	lea    rsi,[rip+0x5cd0]        # 40922d <_IO_stdin_used@@Base+0x22d>
  40355d:	lea    rdx,[rsp+0x10]
  403562:	call   4030c0 <fprintf@plt>
  403567:	xor    eax,eax
  403569:	mov    rdi,rbx
  40356c:	lea    rsi,[rip+0x5cc0]        # 409233 <_IO_stdin_used@@Base+0x233>
  403573:	mov    edx,ebp
  403575:	call   4030c0 <fprintf@plt>
  40357a:	jmp    403593 <emit_test@@Base+0x143>
  40357c:	nop    DWORD PTR [rax+0x0]
  403580:	test   bpl,0x7
  403584:	jne    403593 <emit_test@@Base+0x143>
  403586:	mov    edi,0x20
  40358b:	mov    rsi,rbx
  40358e:	call   403090 <fputc@plt>
  403593:	movzx  edx,BYTE PTR [r15+rbp*1]
  403598:	xor    eax,eax
  40359a:	mov    rdi,rbx
  40359d:	mov    rsi,r13
  4035a0:	call   4030c0 <fprintf@plt>
  4035a5:	movzx  eax,BYTE PTR [r15+rbp*1]
  4035aa:	mov    edx,eax
  4035ac:	add    dl,0xe0
  4035af:	mov    cl,0x2e
  4035b1:	cmp    dl,0x5e
  4035b4:	ja     4035b8 <emit_test@@Base+0x168>
  4035b6:	mov    ecx,eax
  4035b8:	mov    BYTE PTR [rsp+r14*1+0x10],cl
  4035bd:	mov    BYTE PTR [rsp+r14*1+0x11],0x0
  4035c3:	add    rbp,0x1
  4035c7:	cmp    r12,rbp
  4035ca:	jne    403540 <emit_test@@Base+0xf0>
  4035d0:	mov    r13,QWORD PTR [rsp+0x8]
  4035d5:	test   r13b,0xf
  4035d9:	je     40360a <emit_test@@Base+0x1ba>
  4035db:	lea    r12d,[r13+0x1]
  4035df:	lea    r14,[rip+0x5c5b]        # 409241 <_IO_stdin_used@@Base+0x241>
  4035e6:	mov    ebp,r12d
  4035e9:	mov    esi,0x3
  4035ee:	mov    edx,0x1
  4035f3:	mov    rdi,r14
  4035f6:	mov    rcx,rbx
  4035f9:	call   403100 <fwrite@plt>
  4035fe:	add    ebp,0x1
  403601:	test   r12b,0xf
  403605:	mov    r12d,ebp
  403608:	jne    4035e9 <emit_test@@Base+0x199>
  40360a:	lea    rsi,[rip+0x5c1c]        # 40922d <_IO_stdin_used@@Base+0x22d>
  403611:	lea    rdx,[rsp+0x10]
  403616:	xor    eax,eax
  403618:	mov    rdi,rbx
  40361b:	call   4030c0 <fprintf@plt>
  403620:	cmp    r13,0x3a
  403624:	jne    403773 <emit_test@@Base+0x323>
  40362a:	lea    rsi,[rip+0x5c1f]        # 409250 <_IO_stdin_used@@Base+0x250>
  403631:	mov    edx,0x3a
  403636:	mov    rdi,r15
  403639:	call   4030b0 <memcmp@plt>
  40363e:	test   eax,eax
  403640:	jne    403792 <emit_test@@Base+0x342>
  403646:	mov    ecx,DWORD PTR [r15]
  403649:	lea    rax,[r15+rcx*1]
  40364d:	movsxd rcx,DWORD PTR [r15+rcx*1]
  403651:	mov    rdx,rax
  403654:	sub    rdx,rcx
  403657:	movzx  edx,WORD PTR [rdx]
  40365a:	cmp    edx,0x6
  40365d:	jb     4036f7 <emit_test@@Base+0x2a7>
  403663:	neg    rcx
  403666:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  40366b:	test   rsi,rsi
  40366e:	je     4036f7 <emit_test@@Base+0x2a7>
  403674:	cmp    QWORD PTR [rax+rsi*1],0x2a
  403679:	jne    4036f7 <emit_test@@Base+0x2a7>
  40367b:	movzx  edx,dx
  40367e:	cmp    edx,0x8
  403681:	jb     403716 <emit_test@@Base+0x2c6>
  403687:	movzx  esi,WORD PTR [rax+rcx*1+0x6]
  40368c:	test   rsi,rsi
  40368f:	je     403716 <emit_test@@Base+0x2c6>
  403695:	cmp    BYTE PTR [rax+rsi*1],0x1
  403699:	jne    403716 <emit_test@@Base+0x2c6>
  40369b:	cmp    edx,0xa
  40369e:	jb     403735 <emit_test@@Base+0x2e5>
  4036a4:	movzx  ecx,WORD PTR [rax+rcx*1+0x8]
  4036a9:	test   rcx,rcx
  4036ac:	je     403735 <emit_test@@Base+0x2e5>
  4036b2:	lea    rdx,[rax+rcx*1]
  4036b6:	mov    eax,DWORD PTR [rax+rcx*1]
  4036b9:	cmp    DWORD PTR [rax+rdx*1],0x4
  4036bd:	jne    403735 <emit_test@@Base+0x2e5>
  4036bf:	vmovss xmm0,DWORD PTR [rdx+rax*1+0xc]
  4036c5:	vucomiss xmm0,DWORD PTR [rip+0x5937]        # 409004 <_IO_stdin_used@@Base+0x4>
  4036cd:	jne    4037b1 <emit_test@@Base+0x361>
  4036d3:	jp     4037b1 <emit_test@@Base+0x361>
  4036d9:	lea    rdi,[rsp+0x40]
  4036de:	call   403df0 <flatcc_builder_clear@@Base>
  4036e3:	xor    eax,eax
  4036e5:	add    rsp,0x1c8
  4036ec:	pop    rbx
  4036ed:	pop    r12
  4036ef:	pop    r13
  4036f1:	pop    r14
  4036f3:	pop    r15
  4036f5:	pop    rbp
  4036f6:	ret    
  4036f7:	lea    rdi,[rip+0x7064]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4036fe:	lea    rsi,[rip+0x5983]        # 409088 <_IO_stdin_used@@Base+0x88>
  403705:	lea    rcx,[rip+0x59e1]        # 4090ed <_IO_stdin_used@@Base+0xed>
  40370c:	mov    edx,0x70
  403711:	call   403070 <__assert_fail@plt>
  403716:	lea    rdi,[rip+0x7045]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40371d:	lea    rsi,[rip+0x5964]        # 409088 <_IO_stdin_used@@Base+0x88>
  403724:	lea    rcx,[rip+0x59c2]        # 4090ed <_IO_stdin_used@@Base+0xed>
  40372b:	mov    edx,0x71
  403730:	call   403070 <__assert_fail@plt>
  403735:	lea    rdi,[rip+0x7026]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40373c:	lea    rsi,[rip+0x5945]        # 409088 <_IO_stdin_used@@Base+0x88>
  403743:	lea    rcx,[rip+0x59a3]        # 4090ed <_IO_stdin_used@@Base+0xed>
  40374a:	mov    edx,0x72
  40374f:	call   403070 <__assert_fail@plt>
  403754:	lea    rdi,[rip+0x7007]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40375b:	lea    rsi,[rip+0x5926]        # 409088 <_IO_stdin_used@@Base+0x88>
  403762:	lea    rcx,[rip+0x5984]        # 4090ed <_IO_stdin_used@@Base+0xed>
  403769:	mov    edx,0x65
  40376e:	call   403070 <__assert_fail@plt>
  403773:	lea    rdi,[rip+0x6fe8]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40377a:	lea    rsi,[rip+0x5907]        # 409088 <_IO_stdin_used@@Base+0x88>
  403781:	lea    rcx,[rip+0x5965]        # 4090ed <_IO_stdin_used@@Base+0xed>
  403788:	mov    edx,0x6a
  40378d:	call   403070 <__assert_fail@plt>
  403792:	lea    rdi,[rip+0x6fc9]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  403799:	lea    rsi,[rip+0x58e8]        # 409088 <_IO_stdin_used@@Base+0x88>
  4037a0:	lea    rcx,[rip+0x5946]        # 4090ed <_IO_stdin_used@@Base+0xed>
  4037a7:	mov    edx,0x6c
  4037ac:	call   403070 <__assert_fail@plt>
  4037b1:	lea    rdi,[rip+0x6faa]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4037b8:	lea    rsi,[rip+0x58c9]        # 409088 <_IO_stdin_used@@Base+0x88>
  4037bf:	lea    rcx,[rip+0x5927]        # 4090ed <_IO_stdin_used@@Base+0xed>
  4037c6:	mov    edx,0x73
  4037cb:	call   403070 <__assert_fail@plt>

00000000004037d0 <main@@Base>:
  4037d0:	push   rbp
  4037d1:	mov    rbp,rsp
  4037d4:	push   rbx
  4037d5:	and    rsp,0xffffffffffffffe0
  4037d9:	sub    rsp,0x1e0
  4037e0:	vxorps xmm0,xmm0,xmm0
  4037e4:	vmovaps YMMWORD PTR [rsp],ymm0
  4037e9:	mov    QWORD PTR [rsp+0x20],0x0
  4037f2:	lea    rdi,[rip+0x5aa7]        # 4092a0 <_IO_stdin_used@@Base+0x2a0>
  4037f9:	vzeroupper 
  4037fc:	call   403040 <puts@plt>
  403801:	lea    rsi,[rip+0xfffffffffffffa08]        # 403210 <dbg_emitter@@Base>
  403808:	lea    rbx,[rsp+0x40]
  40380d:	xor    edx,edx
  40380f:	xor    ecx,ecx
  403811:	xor    r8d,r8d
  403814:	mov    rdi,rbx
  403817:	call   403980 <flatcc_builder_custom_init@@Base>
  40381c:	mov    rsi,rsp
  40381f:	mov    edx,0xa
  403824:	mov    ecx,0x4
  403829:	mov    r8d,0x4
  40382f:	mov    r9d,0x3fffffff
  403835:	mov    rdi,rbx
  403838:	call   406640 <flatcc_builder_create_vector@@Base>
  40383d:	mov    rdi,rbx
  403840:	mov    esi,eax
  403842:	call   403370 <debug_test@@Base+0x90>
  403847:	mov    rdi,rbx
  40384a:	call   403df0 <flatcc_builder_clear@@Base>
  40384f:	call   403450 <emit_test@@Base>
  403854:	lea    rsp,[rbp-0x8]
  403858:	pop    rbx
  403859:	pop    rbp
  40385a:	ret    
  40385b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403860 <flatcc_builder_default_alloc@@Base>:
  403860:	push   rbp
  403861:	push   r15
  403863:	push   r14
  403865:	push   r12
  403867:	push   rbx
  403868:	mov    rbx,rsi
  40386b:	test   rdx,rdx
  40386e:	je     403899 <flatcc_builder_default_alloc@@Base+0x39>
  403870:	mov    r14d,ecx
  403873:	add    r8d,0xffffffff
  403877:	cmp    r8d,0x6
  40387b:	ja     4038b7 <flatcc_builder_default_alloc@@Base+0x57>
  40387d:	mov    eax,0x100
  403882:	lea    rcx,[rip+0x5a77]        # 409300 <_IO_stdin_used@@Base+0x300>
  403889:	movsxd rsi,DWORD PTR [rcx+r8*4]
  40388d:	add    rsi,rcx
  403890:	jmp    rsi
  403892:	mov    eax,0x120
  403897:	jmp    4038d0 <flatcc_builder_default_alloc@@Base+0x70>
  403899:	mov    rdi,QWORD PTR [rbx]
  40389c:	xor    r15d,r15d
  40389f:	test   rdi,rdi
  4038a2:	je     403930 <flatcc_builder_default_alloc@@Base+0xd0>
  4038a8:	call   403030 <free@plt>
  4038ad:	vxorps xmm0,xmm0,xmm0
  4038b1:	vmovups XMMWORD PTR [rbx],xmm0
  4038b5:	jmp    403930 <flatcc_builder_default_alloc@@Base+0xd0>
  4038b7:	mov    eax,0x20
  4038bc:	jmp    4038d0 <flatcc_builder_default_alloc@@Base+0x70>
  4038be:	mov    rax,rdx
  4038c1:	jmp    4038d0 <flatcc_builder_default_alloc@@Base+0x70>
  4038c3:	mov    eax,0x40
  4038c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4038d0:	mov    rbp,rax
  4038d3:	lea    rax,[rax+rax*1]
  4038d7:	cmp    rbp,rdx
  4038da:	jb     4038d0 <flatcc_builder_default_alloc@@Base+0x70>
  4038dc:	mov    rax,QWORD PTR [rbx+0x8]
  4038e0:	xor    r15d,r15d
  4038e3:	cmp    rax,rdx
  4038e6:	jb     4038f0 <flatcc_builder_default_alloc@@Base+0x90>
  4038e8:	shr    rax,1
  4038eb:	cmp    rax,rbp
  4038ee:	jae    403930 <flatcc_builder_default_alloc@@Base+0xd0>
  4038f0:	mov    rdi,QWORD PTR [rbx]
  4038f3:	mov    rsi,rbp
  4038f6:	call   4030f0 <realloc@plt>
  4038fb:	test   rax,rax
  4038fe:	je     40392a <flatcc_builder_default_alloc@@Base+0xca>
  403900:	mov    r12,rax
  403903:	test   r14d,r14d
  403906:	je     403921 <flatcc_builder_default_alloc@@Base+0xc1>
  403908:	mov    rax,QWORD PTR [rbx+0x8]
  40390c:	mov    rdx,rbp
  40390f:	sub    rdx,rax
  403912:	jbe    403921 <flatcc_builder_default_alloc@@Base+0xc1>
  403914:	mov    rdi,r12
  403917:	add    rdi,rax
  40391a:	xor    esi,esi
  40391c:	call   403080 <memset@plt>
  403921:	mov    QWORD PTR [rbx],r12
  403924:	mov    QWORD PTR [rbx+0x8],rbp
  403928:	jmp    403930 <flatcc_builder_default_alloc@@Base+0xd0>
  40392a:	mov    r15d,0xffffffff
  403930:	mov    eax,r15d
  403933:	pop    rbx
  403934:	pop    r12
  403936:	pop    r14
  403938:	pop    r15
  40393a:	pop    rbp
  40393b:	ret    
  40393c:	nop    DWORD PTR [rax+0x0]

0000000000403940 <flatcc_builder_flush_vtable_cache@@Base>:
  403940:	cmp    QWORD PTR [rdi+0xd8],0x0
  403948:	je     403975 <flatcc_builder_flush_vtable_cache@@Base+0x35>
  40394a:	push   rbx
  40394b:	mov    rbx,rdi
  40394e:	mov    rdi,QWORD PTR [rdi+0xa8]
  403955:	mov    rdx,QWORD PTR [rbx+0xb0]
  40395c:	xor    esi,esi
  40395e:	call   403080 <memset@plt>
  403963:	movabs rax,0x1000000000
  40396d:	mov    QWORD PTR [rbx+0xe0],rax
  403974:	pop    rbx
  403975:	ret    
  403976:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403980 <flatcc_builder_custom_init@@Base>:
  403980:	vxorps xmm0,xmm0,xmm0
  403984:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40398c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403994:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40399c:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4039a4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  4039ac:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  4039b4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  4039bc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  4039c4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  4039c9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4039ce:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4039d3:	vmovups YMMWORD PTR [rdi],ymm0
  4039d7:	mov    QWORD PTR [rdi+0x180],0x0
  4039e2:	test   rsi,rsi
  4039e5:	je     403a09 <flatcc_builder_custom_init@@Base+0x89>
  4039e7:	test   rcx,rcx
  4039ea:	jne    4039f3 <flatcc_builder_custom_init@@Base+0x73>
  4039ec:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403860 <flatcc_builder_default_alloc@@Base>
  4039f3:	mov    QWORD PTR [rdi+0x40],r8
  4039f7:	mov    QWORD PTR [rdi+0x50],rcx
  4039fb:	mov    QWORD PTR [rdi+0x38],rdx
  4039ff:	mov    QWORD PTR [rdi+0x48],rsi
  403a03:	xor    eax,eax
  403a05:	vzeroupper 
  403a08:	ret    
  403a09:	mov    DWORD PTR [rdi+0x128],0x1
  403a13:	lea    rdx,[rdi+0x130]
  403a1a:	lea    rsi,[rip+0x4acf]        # 4084f0 <flatcc_emitter@@Base>
  403a21:	test   rcx,rcx
  403a24:	je     4039ec <flatcc_builder_custom_init@@Base+0x6c>
  403a26:	jmp    4039f3 <flatcc_builder_custom_init@@Base+0x73>
  403a28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403a30 <flatcc_builder_init@@Base>:
  403a30:	vxorps xmm0,xmm0,xmm0
  403a34:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403a3c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403a41:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403a46:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403a4e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403a56:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403a5e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403a66:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403a6e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403a76:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403a7e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403a83:	vmovups YMMWORD PTR [rdi],ymm0
  403a87:	mov    QWORD PTR [rdi+0x180],0x0
  403a92:	mov    DWORD PTR [rdi+0x128],0x1
  403a9c:	lea    rax,[rdi+0x130]
  403aa3:	mov    QWORD PTR [rdi+0x40],0x0
  403aab:	lea    rcx,[rip+0xfffffffffffffdae]        # 403860 <flatcc_builder_default_alloc@@Base>
  403ab2:	mov    QWORD PTR [rdi+0x50],rcx
  403ab6:	mov    QWORD PTR [rdi+0x38],rax
  403aba:	lea    rax,[rip+0x4a2f]        # 4084f0 <flatcc_emitter@@Base>
  403ac1:	mov    QWORD PTR [rdi+0x48],rax
  403ac5:	xor    eax,eax
  403ac7:	vzeroupper 
  403aca:	ret    
  403acb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403ad0 <flatcc_builder_custom_reset@@Base>:
  403ad0:	push   rbp
  403ad1:	push   r15
  403ad3:	push   r14
  403ad5:	push   r12
  403ad7:	push   rbx
  403ad8:	mov    r15d,edx
  403adb:	mov    r14d,esi
  403ade:	mov    r12,rdi
  403ae1:	lea    rbp,[rdi+0x58]
  403ae5:	xor    ebx,ebx
  403ae7:	nop    WORD PTR [rax+rax*1+0x0]
  403af0:	mov    rdi,QWORD PTR [rbp+0x0]
  403af4:	test   rdi,rdi
  403af7:	je     403b40 <flatcc_builder_custom_reset@@Base+0x70>
  403af9:	test   r15d,r15d
  403afc:	je     403b2a <flatcc_builder_custom_reset@@Base+0x5a>
  403afe:	cmp    rbx,0x5
  403b02:	je     403b2a <flatcc_builder_custom_reset@@Base+0x5a>
  403b04:	mov    rdi,QWORD PTR [r12+0x40]
  403b09:	mov    edx,0x1
  403b0e:	mov    ecx,0x1
  403b13:	mov    rsi,rbp
  403b16:	mov    r8d,ebx
  403b19:	call   QWORD PTR [r12+0x50]
  403b1e:	test   eax,eax
  403b20:	jne    403c00 <flatcc_builder_custom_reset@@Base+0x130>
  403b26:	mov    rdi,QWORD PTR [rbp+0x0]
  403b2a:	mov    rdx,QWORD PTR [rbp+0x8]
  403b2e:	xor    esi,esi
  403b30:	call   403080 <memset@plt>
  403b35:	jmp    403b4b <flatcc_builder_custom_reset@@Base+0x7b>
  403b37:	nop    WORD PTR [rax+rax*1+0x0]
  403b40:	cmp    QWORD PTR [rbp+0x8],0x0
  403b45:	jne    403c10 <flatcc_builder_custom_reset@@Base+0x140>
  403b4b:	add    rbx,0x1
  403b4f:	add    rbp,0x10
  403b53:	cmp    rbx,0x8
  403b57:	jb     403af0 <flatcc_builder_custom_reset@@Base+0x20>
  403b59:	mov    DWORD PTR [r12+0xe0],0x0
  403b65:	cmp    DWORD PTR [r12+0xe4],0x0
  403b6e:	je     403b7c <flatcc_builder_custom_reset@@Base+0xac>
  403b70:	mov    DWORD PTR [r12+0xe4],0x10
  403b7c:	mov    WORD PTR [r12+0xe8],0x0
  403b87:	mov    QWORD PTR [r12+0xf0],0x0
  403b93:	mov    QWORD PTR [r12+0x20],0x0
  403b9c:	vxorps xmm0,xmm0,xmm0
  403ba0:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403baa:	mov    rax,QWORD PTR [r12+0x58]
  403baf:	mov    rcx,QWORD PTR [r12+0x68]
  403bb4:	mov    QWORD PTR [r12+0x18],rcx
  403bb9:	mov    rcx,QWORD PTR [r12+0x88]
  403bc1:	mov    QWORD PTR [r12],rcx
  403bc5:	mov    QWORD PTR [r12+0x8],rax
  403bca:	mov    QWORD PTR [r12+0x30],0x0
  403bd3:	test   r14d,r14d
  403bd6:	je     403be2 <flatcc_builder_custom_reset@@Base+0x112>
  403bd8:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403be2:	xor    ebx,ebx
  403be4:	cmp    DWORD PTR [r12+0x128],0x0
  403bed:	je     403c05 <flatcc_builder_custom_reset@@Base+0x135>
  403bef:	add    r12,0x130
  403bf6:	mov    rdi,r12
  403bf9:	call   408370 <flatcc_emitter_reset@@Base>
  403bfe:	jmp    403c05 <flatcc_builder_custom_reset@@Base+0x135>
  403c00:	mov    ebx,0xffffffff
  403c05:	mov    eax,ebx
  403c07:	pop    rbx
  403c08:	pop    r12
  403c0a:	pop    r14
  403c0c:	pop    r15
  403c0e:	pop    rbp
  403c0f:	ret    
  403c10:	lea    rdi,[rip+0x5979]        # 409590 <flatcc_builder_padding_base@@Base+0x270>
  403c17:	lea    rsi,[rip+0x5984]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  403c1e:	lea    rcx,[rip+0x59dd]        # 409602 <flatcc_builder_padding_base@@Base+0x2e2>
  403c25:	mov    edx,0x1b2
  403c2a:	call   403070 <__assert_fail@plt>
  403c2f:	nop

0000000000403c30 <flatcc_builder_reset@@Base>:
  403c30:	push   rbx
  403c31:	mov    rbx,rdi
  403c34:	mov    rdi,QWORD PTR [rdi+0x58]
  403c38:	mov    rdx,QWORD PTR [rbx+0x60]
  403c3c:	test   rdi,rdi
  403c3f:	je     403c4a <flatcc_builder_reset@@Base+0x1a>
  403c41:	xor    esi,esi
  403c43:	call   403080 <memset@plt>
  403c48:	jmp    403c53 <flatcc_builder_reset@@Base+0x23>
  403c4a:	test   rdx,rdx
  403c4d:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403c53:	mov    rdi,QWORD PTR [rbx+0x68]
  403c57:	mov    rdx,QWORD PTR [rbx+0x70]
  403c5b:	test   rdi,rdi
  403c5e:	je     403c69 <flatcc_builder_reset@@Base+0x39>
  403c60:	xor    esi,esi
  403c62:	call   403080 <memset@plt>
  403c67:	jmp    403c72 <flatcc_builder_reset@@Base+0x42>
  403c69:	test   rdx,rdx
  403c6c:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403c72:	mov    rdi,QWORD PTR [rbx+0x78]
  403c76:	mov    rdx,QWORD PTR [rbx+0x80]
  403c7d:	test   rdi,rdi
  403c80:	je     403c8b <flatcc_builder_reset@@Base+0x5b>
  403c82:	xor    esi,esi
  403c84:	call   403080 <memset@plt>
  403c89:	jmp    403c94 <flatcc_builder_reset@@Base+0x64>
  403c8b:	test   rdx,rdx
  403c8e:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403c94:	mov    rdi,QWORD PTR [rbx+0x88]
  403c9b:	mov    rdx,QWORD PTR [rbx+0x90]
  403ca2:	test   rdi,rdi
  403ca5:	je     403cb0 <flatcc_builder_reset@@Base+0x80>
  403ca7:	xor    esi,esi
  403ca9:	call   403080 <memset@plt>
  403cae:	jmp    403cb9 <flatcc_builder_reset@@Base+0x89>
  403cb0:	test   rdx,rdx
  403cb3:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403cb9:	mov    rdi,QWORD PTR [rbx+0x98]
  403cc0:	mov    rdx,QWORD PTR [rbx+0xa0]
  403cc7:	test   rdi,rdi
  403cca:	je     403cd5 <flatcc_builder_reset@@Base+0xa5>
  403ccc:	xor    esi,esi
  403cce:	call   403080 <memset@plt>
  403cd3:	jmp    403cde <flatcc_builder_reset@@Base+0xae>
  403cd5:	test   rdx,rdx
  403cd8:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403cde:	mov    rdi,QWORD PTR [rbx+0xa8]
  403ce5:	mov    rdx,QWORD PTR [rbx+0xb0]
  403cec:	test   rdi,rdi
  403cef:	je     403cfa <flatcc_builder_reset@@Base+0xca>
  403cf1:	xor    esi,esi
  403cf3:	call   403080 <memset@plt>
  403cf8:	jmp    403d03 <flatcc_builder_reset@@Base+0xd3>
  403cfa:	test   rdx,rdx
  403cfd:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403d03:	mov    rdi,QWORD PTR [rbx+0xb8]
  403d0a:	mov    rdx,QWORD PTR [rbx+0xc0]
  403d11:	test   rdi,rdi
  403d14:	je     403d1f <flatcc_builder_reset@@Base+0xef>
  403d16:	xor    esi,esi
  403d18:	call   403080 <memset@plt>
  403d1d:	jmp    403d28 <flatcc_builder_reset@@Base+0xf8>
  403d1f:	test   rdx,rdx
  403d22:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403d28:	mov    rdi,QWORD PTR [rbx+0xc8]
  403d2f:	mov    rdx,QWORD PTR [rbx+0xd0]
  403d36:	test   rdi,rdi
  403d39:	je     403d44 <flatcc_builder_reset@@Base+0x114>
  403d3b:	xor    esi,esi
  403d3d:	call   403080 <memset@plt>
  403d42:	jmp    403d4d <flatcc_builder_reset@@Base+0x11d>
  403d44:	test   rdx,rdx
  403d47:	jne    403dd0 <flatcc_builder_reset@@Base+0x1a0>
  403d4d:	mov    DWORD PTR [rbx+0xe0],0x0
  403d57:	cmp    DWORD PTR [rbx+0xe4],0x0
  403d5e:	je     403d6a <flatcc_builder_reset@@Base+0x13a>
  403d60:	mov    DWORD PTR [rbx+0xe4],0x10
  403d6a:	mov    WORD PTR [rbx+0xe8],0x0
  403d73:	mov    QWORD PTR [rbx+0xf0],0x0
  403d7e:	mov    QWORD PTR [rbx+0x20],0x0
  403d86:	vxorps xmm0,xmm0,xmm0
  403d8a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  403d92:	mov    rax,QWORD PTR [rbx+0x58]
  403d96:	mov    rcx,QWORD PTR [rbx+0x68]
  403d9a:	mov    QWORD PTR [rbx+0x18],rcx
  403d9e:	mov    rcx,QWORD PTR [rbx+0x88]
  403da5:	mov    QWORD PTR [rbx],rcx
  403da8:	mov    QWORD PTR [rbx+0x8],rax
  403dac:	mov    QWORD PTR [rbx+0x30],0x0
  403db4:	cmp    DWORD PTR [rbx+0x128],0x0
  403dbb:	je     403dcc <flatcc_builder_reset@@Base+0x19c>
  403dbd:	add    rbx,0x130
  403dc4:	mov    rdi,rbx
  403dc7:	call   408370 <flatcc_emitter_reset@@Base>
  403dcc:	xor    eax,eax
  403dce:	pop    rbx
  403dcf:	ret    
  403dd0:	lea    rdi,[rip+0x57b9]        # 409590 <flatcc_builder_padding_base@@Base+0x270>
  403dd7:	lea    rsi,[rip+0x57c4]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  403dde:	lea    rcx,[rip+0x581d]        # 409602 <flatcc_builder_padding_base@@Base+0x2e2>
  403de5:	mov    edx,0x1b2
  403dea:	call   403070 <__assert_fail@plt>
  403def:	nop

0000000000403df0 <flatcc_builder_clear@@Base>:
  403df0:	push   rbx
  403df1:	mov    rbx,rdi
  403df4:	lea    rsi,[rdi+0x58]
  403df8:	mov    rdi,QWORD PTR [rdi+0x40]
  403dfc:	xor    edx,edx
  403dfe:	xor    ecx,ecx
  403e00:	xor    r8d,r8d
  403e03:	call   QWORD PTR [rbx+0x50]
  403e06:	lea    rsi,[rbx+0x68]
  403e0a:	mov    rdi,QWORD PTR [rbx+0x40]
  403e0e:	xor    edx,edx
  403e10:	xor    ecx,ecx
  403e12:	mov    r8d,0x1
  403e18:	call   QWORD PTR [rbx+0x50]
  403e1b:	lea    rsi,[rbx+0x78]
  403e1f:	mov    rdi,QWORD PTR [rbx+0x40]
  403e23:	xor    edx,edx
  403e25:	xor    ecx,ecx
  403e27:	mov    r8d,0x2
  403e2d:	call   QWORD PTR [rbx+0x50]
  403e30:	lea    rsi,[rbx+0x88]
  403e37:	mov    rdi,QWORD PTR [rbx+0x40]
  403e3b:	xor    edx,edx
  403e3d:	xor    ecx,ecx
  403e3f:	mov    r8d,0x3
  403e45:	call   QWORD PTR [rbx+0x50]
  403e48:	lea    rsi,[rbx+0x98]
  403e4f:	mov    rdi,QWORD PTR [rbx+0x40]
  403e53:	xor    edx,edx
  403e55:	xor    ecx,ecx
  403e57:	mov    r8d,0x4
  403e5d:	call   QWORD PTR [rbx+0x50]
  403e60:	lea    rsi,[rbx+0xa8]
  403e67:	mov    rdi,QWORD PTR [rbx+0x40]
  403e6b:	xor    edx,edx
  403e6d:	xor    ecx,ecx
  403e6f:	mov    r8d,0x5
  403e75:	call   QWORD PTR [rbx+0x50]
  403e78:	lea    rsi,[rbx+0xb8]
  403e7f:	mov    rdi,QWORD PTR [rbx+0x40]
  403e83:	xor    edx,edx
  403e85:	xor    ecx,ecx
  403e87:	mov    r8d,0x6
  403e8d:	call   QWORD PTR [rbx+0x50]
  403e90:	lea    rsi,[rbx+0xc8]
  403e97:	mov    rdi,QWORD PTR [rbx+0x40]
  403e9b:	xor    edx,edx
  403e9d:	xor    ecx,ecx
  403e9f:	mov    r8d,0x7
  403ea5:	call   QWORD PTR [rbx+0x50]
  403ea8:	cmp    DWORD PTR [rbx+0x128],0x0
  403eaf:	je     403ebd <flatcc_builder_clear@@Base+0xcd>
  403eb1:	lea    rdi,[rbx+0x130]
  403eb8:	call   408470 <flatcc_emitter_clear@@Base>
  403ebd:	vxorps xmm0,xmm0,xmm0
  403ec1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  403ec9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  403ed1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  403ed9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  403ee1:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  403ee9:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  403ef1:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  403ef9:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  403f01:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  403f06:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  403f0b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  403f10:	vmovups YMMWORD PTR [rbx],ymm0
  403f14:	mov    QWORD PTR [rbx+0x180],0x0
  403f1f:	pop    rbx
  403f20:	vzeroupper 
  403f23:	ret    
  403f24:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f2e:	xchg   ax,ax

0000000000403f30 <flatcc_builder_enter_user_frame_ptr@@Base>:
  403f30:	push   r15
  403f32:	push   r14
  403f34:	push   r12
  403f36:	push   rbx
  403f37:	push   rax
  403f38:	mov    r14,rsi
  403f3b:	mov    r15,rdi
  403f3e:	add    r14,0xf
  403f42:	and    r14,0xfffffffffffffff8
  403f46:	mov    rbx,QWORD PTR [rdi+0x180]
  403f4d:	lea    r12,[rdi+0xc8]
  403f54:	lea    rdx,[rbx+r14*1]
  403f58:	cmp    rdx,QWORD PTR [rdi+0xd0]
  403f5f:	jbe    403f78 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  403f61:	mov    rdi,QWORD PTR [r15+0x40]
  403f65:	xor    ecx,ecx
  403f67:	mov    r8d,0x7
  403f6d:	mov    rsi,r12
  403f70:	call   QWORD PTR [r15+0x50]
  403f74:	test   eax,eax
  403f76:	jne    403fc8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  403f78:	add    rbx,QWORD PTR [r12]
  403f7c:	je     403fb7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  403f7e:	xor    esi,esi
  403f80:	mov    rdi,rbx
  403f83:	mov    rdx,r14
  403f86:	call   403080 <memset@plt>
  403f8b:	mov    rax,QWORD PTR [r15+0x178]
  403f92:	mov    QWORD PTR [rbx],rax
  403f95:	add    rbx,0x8
  403f99:	mov    rax,QWORD PTR [r15+0x180]
  403fa0:	lea    rcx,[rax+0x8]
  403fa4:	mov    QWORD PTR [r15+0x178],rcx
  403fab:	add    rax,r14
  403fae:	mov    QWORD PTR [r15+0x180],rax
  403fb5:	jmp    403fb9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  403fb7:	xor    ebx,ebx
  403fb9:	mov    rax,rbx
  403fbc:	add    rsp,0x8
  403fc0:	pop    rbx
  403fc1:	pop    r12
  403fc3:	pop    r14
  403fc5:	pop    r15
  403fc7:	ret    
  403fc8:	lea    rdi,[rip+0x6793]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  403fcf:	lea    rsi,[rip+0x55cc]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  403fd6:	lea    rcx,[rip+0x65bf]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  403fdd:	mov    edx,0x134
  403fe2:	call   403070 <__assert_fail@plt>
  403fe7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403ff0 <flatcc_builder_enter_user_frame@@Base>:
  403ff0:	push   r15
  403ff2:	push   r14
  403ff4:	push   r12
  403ff6:	push   rbx
  403ff7:	push   rax
  403ff8:	mov    r14,rsi
  403ffb:	mov    rbx,rdi
  403ffe:	add    r14,0xf
  404002:	and    r14,0xfffffffffffffff8
  404006:	mov    r15,QWORD PTR [rdi+0x180]
  40400d:	lea    r12,[rdi+0xc8]
  404014:	lea    rdx,[r15+r14*1]
  404018:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40401f:	jbe    404037 <flatcc_builder_enter_user_frame@@Base+0x47>
  404021:	mov    rdi,QWORD PTR [rbx+0x40]
  404025:	xor    ecx,ecx
  404027:	mov    r8d,0x7
  40402d:	mov    rsi,r12
  404030:	call   QWORD PTR [rbx+0x50]
  404033:	test   eax,eax
  404035:	jne    404080 <flatcc_builder_enter_user_frame@@Base+0x90>
  404037:	add    r15,QWORD PTR [r12]
  40403b:	je     404072 <flatcc_builder_enter_user_frame@@Base+0x82>
  40403d:	xor    esi,esi
  40403f:	mov    rdi,r15
  404042:	mov    rdx,r14
  404045:	call   403080 <memset@plt>
  40404a:	mov    rax,QWORD PTR [rbx+0x178]
  404051:	mov    QWORD PTR [r15],rax
  404054:	mov    rcx,QWORD PTR [rbx+0x180]
  40405b:	lea    rax,[rcx+0x8]
  40405f:	mov    QWORD PTR [rbx+0x178],rax
  404066:	add    rcx,r14
  404069:	mov    QWORD PTR [rbx+0x180],rcx
  404070:	jmp    404074 <flatcc_builder_enter_user_frame@@Base+0x84>
  404072:	xor    eax,eax
  404074:	add    rsp,0x8
  404078:	pop    rbx
  404079:	pop    r12
  40407b:	pop    r14
  40407d:	pop    r15
  40407f:	ret    
  404080:	lea    rdi,[rip+0x66db]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  404087:	lea    rsi,[rip+0x5514]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40408e:	lea    rcx,[rip+0x6507]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  404095:	mov    edx,0x134
  40409a:	call   403070 <__assert_fail@plt>
  40409f:	nop

00000000004040a0 <flatcc_builder_exit_user_frame@@Base>:
  4040a0:	mov    rax,QWORD PTR [rdi+0x178]
  4040a7:	test   rax,rax
  4040aa:	je     4040cd <flatcc_builder_exit_user_frame@@Base+0x2d>
  4040ac:	mov    rcx,QWORD PTR [rdi+0xc8]
  4040b3:	mov    edx,eax
  4040b5:	add    rax,0xfffffffffffffff8
  4040b9:	mov    QWORD PTR [rdi+0x180],rax
  4040c0:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4040c5:	mov    QWORD PTR [rdi+0x178],rax
  4040cc:	ret    
  4040cd:	push   rax
  4040ce:	lea    rdi,[rip+0x556b]        # 409640 <flatcc_builder_padding_base@@Base+0x320>
  4040d5:	lea    rsi,[rip+0x54c6]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4040dc:	lea    rcx,[rip+0x5576]        # 409659 <flatcc_builder_padding_base@@Base+0x339>
  4040e3:	mov    edx,0x21e
  4040e8:	call   403070 <__assert_fail@plt>
  4040ed:	nop    DWORD PTR [rax]

00000000004040f0 <flatcc_builder_exit_user_frame_at@@Base>:
  4040f0:	push   rax
  4040f1:	cmp    QWORD PTR [rdi+0x178],rsi
  4040f8:	jb     404128 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  4040fa:	mov    QWORD PTR [rdi+0x178],rsi
  404101:	test   rsi,rsi
  404104:	je     404147 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404106:	mov    rax,QWORD PTR [rdi+0xc8]
  40410d:	mov    ecx,esi
  40410f:	add    rsi,0xfffffffffffffff8
  404113:	mov    QWORD PTR [rdi+0x180],rsi
  40411a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40411f:	mov    QWORD PTR [rdi+0x178],rax
  404126:	pop    rcx
  404127:	ret    
  404128:	lea    rdi,[rip+0x5564]        # 409693 <flatcc_builder_padding_base@@Base+0x373>
  40412f:	lea    rsi,[rip+0x546c]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404136:	lea    rcx,[rip+0x5575]        # 4096b2 <flatcc_builder_padding_base@@Base+0x392>
  40413d:	mov    edx,0x227
  404142:	call   403070 <__assert_fail@plt>
  404147:	lea    rdi,[rip+0x54f2]        # 409640 <flatcc_builder_padding_base@@Base+0x320>
  40414e:	lea    rsi,[rip+0x544d]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404155:	lea    rcx,[rip+0x54fd]        # 409659 <flatcc_builder_padding_base@@Base+0x339>
  40415c:	mov    edx,0x21e
  404161:	call   403070 <__assert_fail@plt>
  404166:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404170 <flatcc_builder_get_current_user_frame@@Base>:
  404170:	mov    rax,QWORD PTR [rdi+0x178]
  404177:	ret    
  404178:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404180 <flatcc_builder_get_user_frame_ptr@@Base>:
  404180:	mov    eax,esi
  404182:	add    rax,QWORD PTR [rdi+0xc8]
  404189:	ret    
  40418a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404190 <flatcc_builder_embed_buffer@@Base>:
  404190:	push   rbp
  404191:	push   r15
  404193:	push   r14
  404195:	push   r12
  404197:	push   rbx
  404198:	sub    rsp,0xa0
  40419f:	mov    ebx,r9d
  4041a2:	mov    rbp,rcx
  4041a5:	mov    r15,rdx
  4041a8:	mov    eax,esi
  4041aa:	mov    r12,rdi
  4041ad:	mov    WORD PTR [rsp+0xa],r8w
  4041b3:	xor    ecx,ecx
  4041b5:	cmp    DWORD PTR [rdi+0x100],0x0
  4041bc:	setne  cl
  4041bf:	lea    rsi,[rsp+0xa]
  4041c4:	mov    edx,eax
  4041c6:	call   404330 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4041cb:	and    ebx,0x2
  4041ce:	movzx  eax,WORD PTR [rsp+0xa]
  4041d3:	mov    r14d,DWORD PTR [r12+0xf0]
  4041db:	lea    ecx,[rbp+rbx*2+0x0]
  4041df:	mov    edx,r14d
  4041e2:	sub    edx,ecx
  4041e4:	add    eax,0xffffffff
  4041e7:	and    eax,edx
  4041e9:	lea    ecx,[rax+rbp*1]
  4041ec:	mov    DWORD PTR [rsp+0xc],ecx
  4041f0:	mov    QWORD PTR [rsp+0x10],0x0
  4041f9:	mov    DWORD PTR [rsp+0x18],0x0
  404201:	cmp    DWORD PTR [r12+0x100],0x0
  40420a:	je     4042de <flatcc_builder_embed_buffer@@Base+0x14e>
  404210:	mov    QWORD PTR [rsp+0x10],0x4
  404219:	lea    rcx,[rsp+0xc]
  40421e:	mov    QWORD PTR [rsp+0x20],rcx
  404223:	mov    QWORD PTR [rsp+0x28],0x4
  40422c:	mov    DWORD PTR [rsp+0x18],0x1
  404234:	mov    edx,0x1
  404239:	mov    r8d,0x4
  40423f:	test   rbp,rbp
  404242:	je     404263 <flatcc_builder_embed_buffer@@Base+0xd3>
  404244:	add    r8,rbp
  404247:	mov    QWORD PTR [rsp+0x10],r8
  40424c:	mov    ecx,edx
  40424e:	shl    rcx,0x4
  404252:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404257:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  40425c:	add    edx,0x1
  40425f:	mov    DWORD PTR [rsp+0x18],edx
  404263:	test   eax,eax
  404265:	je     40428f <flatcc_builder_embed_buffer@@Base+0xff>
  404267:	mov    eax,eax
  404269:	add    r8,rax
  40426c:	mov    QWORD PTR [rsp+0x10],r8
  404271:	mov    ecx,edx
  404273:	shl    rcx,0x4
  404277:	lea    rsi,[rip+0x50a2]        # 409320 <flatcc_builder_padding_base@@Base>
  40427e:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  404283:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404288:	add    edx,0x1
  40428b:	mov    DWORD PTR [rsp+0x18],edx
  40428f:	cmp    r8,0x11
  404293:	setb   al
  404296:	lea    rcx,[r8-0x10]
  40429a:	shr    rcx,0x20
  40429e:	sete   cl
  4042a1:	test   r8d,r8d
  4042a4:	jle    4042f1 <flatcc_builder_embed_buffer@@Base+0x161>
  4042a6:	or     al,cl
  4042a8:	je     4042f1 <flatcc_builder_embed_buffer@@Base+0x161>
  4042aa:	sub    r14d,r8d
  4042ad:	mov    rdi,QWORD PTR [r12+0x38]
  4042b2:	lea    rsi,[rsp+0x20]
  4042b7:	mov    ecx,r14d
  4042ba:	call   QWORD PTR [r12+0x48]
  4042bf:	test   eax,eax
  4042c1:	jne    404310 <flatcc_builder_embed_buffer@@Base+0x180>
  4042c3:	mov    DWORD PTR [r12+0xf0],r14d
  4042cb:	mov    eax,r14d
  4042ce:	add    rsp,0xa0
  4042d5:	pop    rbx
  4042d6:	pop    r12
  4042d8:	pop    r14
  4042da:	pop    r15
  4042dc:	pop    rbp
  4042dd:	ret    
  4042de:	xor    edx,edx
  4042e0:	xor    r8d,r8d
  4042e3:	test   rbp,rbp
  4042e6:	jne    404244 <flatcc_builder_embed_buffer@@Base+0xb4>
  4042ec:	jmp    404263 <flatcc_builder_embed_buffer@@Base+0xd3>
  4042f1:	lea    rdi,[rip+0x646a]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4042f8:	lea    rsi,[rip+0x52a3]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4042ff:	lea    rcx,[rip+0x631b]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  404306:	mov    edx,0x287
  40430b:	call   403070 <__assert_fail@plt>
  404310:	lea    rdi,[rip+0x644b]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  404317:	lea    rsi,[rip+0x5284]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40431e:	lea    rcx,[rip+0x62fc]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  404325:	mov    edx,0x28b
  40432a:	call   403070 <__assert_fail@plt>
  40432f:	nop
  404330:	push   rbx
  404331:	sub    rsp,0x90
  404338:	mov    rax,rdi
  40433b:	test   dx,dx
  40433e:	jne    404351 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404340:	mov    edi,DWORD PTR [rax+0xec]
  404346:	test   di,di
  404349:	mov    edx,0x1
  40434e:	cmovne edx,edi
  404351:	movzx  ebx,WORD PTR [rsi]
  404354:	mov    edi,0x4
  404359:	cmp    ebx,0x4
  40435c:	cmovae edi,ebx
  40435f:	jb     40436c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404361:	cmp    di,dx
  404364:	jb     40436c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404366:	test   ecx,ecx
  404368:	jne    4043d4 <flatcc_builder_embed_buffer@@Base+0x244>
  40436a:	jmp    404379 <flatcc_builder_embed_buffer@@Base+0x1e9>
  40436c:	cmp    di,dx
  40436f:	cmovb  edi,edx
  404372:	mov    WORD PTR [rsi],di
  404375:	test   ecx,ecx
  404377:	jne    4043d4 <flatcc_builder_embed_buffer@@Base+0x244>
  404379:	mov    ebx,DWORD PTR [rax+0xf4]
  40437f:	movzx  r8d,dx
  404383:	add    r8d,0xffffffff
  404387:	and    r8d,ebx
  40438a:	je     4043d4 <flatcc_builder_embed_buffer@@Base+0x244>
  40438c:	mov    QWORD PTR [rsp],r8
  404390:	lea    rcx,[rip+0x4f89]        # 409320 <flatcc_builder_padding_base@@Base>
  404397:	mov    QWORD PTR [rsp+0x10],rcx
  40439c:	mov    QWORD PTR [rsp+0x18],r8
  4043a1:	mov    DWORD PTR [rsp+0x8],0x1
  4043a9:	lea    ecx,[r8+rbx*1]
  4043ad:	mov    DWORD PTR [rax+0xf4],ecx
  4043b3:	test   r8d,r8d
  4043b6:	js     4043dd <flatcc_builder_embed_buffer@@Base+0x24d>
  4043b8:	mov    rdi,QWORD PTR [rax+0x38]
  4043bc:	lea    rsi,[rsp+0x10]
  4043c1:	mov    edx,0x1
  4043c6:	mov    ecx,ebx
  4043c8:	call   QWORD PTR [rax+0x48]
  4043cb:	test   eax,eax
  4043cd:	jne    4043fc <flatcc_builder_embed_buffer@@Base+0x26c>
  4043cf:	cmp    ebx,0xffffffff
  4043d2:	je     40441b <flatcc_builder_embed_buffer@@Base+0x28b>
  4043d4:	add    rsp,0x90
  4043db:	pop    rbx
  4043dc:	ret    
  4043dd:	lea    rdi,[rip+0x637e]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4043e4:	lea    rsi,[rip+0x51b7]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4043eb:	lea    rcx,[rip+0x62eb]        # 40a6dd <flatcc_builder_padding_base@@Base+0x13bd>
  4043f2:	mov    edx,0x2a1
  4043f7:	call   403070 <__assert_fail@plt>
  4043fc:	lea    rdi,[rip+0x635f]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  404403:	lea    rsi,[rip+0x5198]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40440a:	lea    rcx,[rip+0x62cc]        # 40a6dd <flatcc_builder_padding_base@@Base+0x13bd>
  404411:	mov    edx,0x2a5
  404416:	call   403070 <__assert_fail@plt>
  40441b:	lea    rdi,[rip+0x6340]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  404422:	lea    rsi,[rip+0x5179]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404429:	lea    rcx,[rip+0x61af]        # 40a5df <flatcc_builder_padding_base@@Base+0x12bf>
  404430:	mov    edx,0x2be
  404435:	call   403070 <__assert_fail@plt>
  40443a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404440 <flatcc_builder_create_buffer@@Base>:
  404440:	push   rbp
  404441:	push   r15
  404443:	push   r14
  404445:	push   r13
  404447:	push   r12
  404449:	push   rbx
  40444a:	sub    rsp,0xa8
  404451:	mov    r12d,r9d
  404454:	mov    r14d,ecx
  404457:	mov    rbp,rsi
  40445a:	mov    r13,rdi
  40445d:	mov    WORD PTR [rsp+0xa],r8w
  404463:	mov    DWORD PTR [rsp+0xc],0x0
  40446b:	mov    r15d,r9d
  40446e:	and    r15d,0x1
  404472:	lea    rsi,[rsp+0xa]
  404477:	mov    ecx,r15d
  40447a:	call   404330 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40447f:	movzx  eax,WORD PTR [rsp+0xa]
  404484:	cmp    WORD PTR [r13+0xe8],ax
  40448c:	jae    404496 <flatcc_builder_create_buffer@@Base+0x56>
  40448e:	mov    WORD PTR [r13+0xe8],ax
  404496:	movzx  edx,ax
  404499:	xor    eax,eax
  40449b:	test   rbp,rbp
  40449e:	je     4044b8 <flatcc_builder_create_buffer@@Base+0x78>
  4044a0:	mov    ecx,DWORD PTR [rbp+0x0]
  4044a3:	mov    DWORD PTR [rsp+0xc],ecx
  4044a7:	xor    edi,edi
  4044a9:	test   ecx,ecx
  4044ab:	setne  dil
  4044af:	mov    rsi,rdi
  4044b2:	shl    rsi,0x2
  4044b6:	jmp    4044bc <flatcc_builder_create_buffer@@Base+0x7c>
  4044b8:	xor    edi,edi
  4044ba:	xor    esi,esi
  4044bc:	lea    ecx,[r12+r12*1]
  4044c0:	and    ecx,0x4
  4044c3:	mov    ebp,DWORD PTR [r13+0xf0]
  4044ca:	xor    ecx,0xfffffffc
  4044cd:	add    ecx,ebp
  4044cf:	sub    ecx,esi
  4044d1:	add    edx,0xffffffff
  4044d4:	mov    QWORD PTR [rsp+0x18],0x0
  4044dd:	mov    DWORD PTR [rsp+0x20],0x0
  4044e5:	test   r12b,0x3
  4044e9:	je     40451c <flatcc_builder_create_buffer@@Base+0xdc>
  4044eb:	mov    QWORD PTR [rsp+0x18],0x4
  4044f4:	lea    rax,[rsp+0x10]
  4044f9:	mov    QWORD PTR [rsp+0x28],rax
  4044fe:	mov    QWORD PTR [rsp+0x30],0x4
  404507:	mov    DWORD PTR [rsp+0x20],0x1
  40450f:	mov    eax,0x1
  404514:	mov    r8d,0x8
  40451a:	jmp    404522 <flatcc_builder_create_buffer@@Base+0xe2>
  40451c:	mov    r8d,0x4
  404522:	and    ecx,edx
  404524:	mov    QWORD PTR [rsp+0x18],r8
  404529:	mov    edx,eax
  40452b:	shl    rdx,0x4
  40452f:	lea    rbx,[rsp+0x14]
  404534:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  404539:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404542:	lea    edx,[rax+0x1]
  404545:	mov    DWORD PTR [rsp+0x20],edx
  404549:	test   dil,dil
  40454c:	je     404574 <flatcc_builder_create_buffer@@Base+0x134>
  40454e:	add    r8,rsi
  404551:	mov    QWORD PTR [rsp+0x18],r8
  404556:	mov    edx,edx
  404558:	shl    rdx,0x4
  40455c:	lea    rdi,[rsp+0xc]
  404561:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404566:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40456b:	or     eax,0x2
  40456e:	mov    DWORD PTR [rsp+0x20],eax
  404572:	mov    edx,eax
  404574:	test   ecx,ecx
  404576:	je     4045a0 <flatcc_builder_create_buffer@@Base+0x160>
  404578:	mov    eax,ecx
  40457a:	add    r8,rax
  40457d:	mov    QWORD PTR [rsp+0x18],r8
  404582:	mov    ecx,edx
  404584:	shl    rcx,0x4
  404588:	lea    rsi,[rip+0x4d91]        # 409320 <flatcc_builder_padding_base@@Base>
  40458f:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  404594:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  404599:	add    edx,0x1
  40459c:	mov    DWORD PTR [rsp+0x20],edx
  4045a0:	xor    eax,eax
  4045a2:	test   r12b,0x3
  4045a6:	setne  al
  4045a9:	sub    ebp,r8d
  4045ac:	lea    eax,[rbp+rax*4+0x0]
  4045b0:	mov    ecx,r15d
  4045b3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  4045bb:	sub    ecx,eax
  4045bd:	mov    DWORD PTR [rsp+0x10],ecx
  4045c1:	sub    r14d,eax
  4045c4:	mov    DWORD PTR [rsp+0x14],r14d
  4045c9:	cmp    r8,0x11
  4045cd:	setb   al
  4045d0:	lea    rcx,[r8-0x10]
  4045d4:	shr    rcx,0x20
  4045d8:	sete   cl
  4045db:	test   r8d,r8d
  4045de:	jle    404616 <flatcc_builder_create_buffer@@Base+0x1d6>
  4045e0:	or     al,cl
  4045e2:	je     404616 <flatcc_builder_create_buffer@@Base+0x1d6>
  4045e4:	mov    rdi,QWORD PTR [r13+0x38]
  4045e8:	lea    rsi,[rsp+0x28]
  4045ed:	mov    ecx,ebp
  4045ef:	call   QWORD PTR [r13+0x48]
  4045f3:	test   eax,eax
  4045f5:	jne    404635 <flatcc_builder_create_buffer@@Base+0x1f5>
  4045f7:	mov    DWORD PTR [r13+0xf0],ebp
  4045fe:	test   ebp,ebp
  404600:	je     404654 <flatcc_builder_create_buffer@@Base+0x214>
  404602:	mov    eax,ebp
  404604:	add    rsp,0xa8
  40460b:	pop    rbx
  40460c:	pop    r12
  40460e:	pop    r13
  404610:	pop    r14
  404612:	pop    r15
  404614:	pop    rbp
  404615:	ret    
  404616:	lea    rdi,[rip+0x6145]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40461d:	lea    rsi,[rip+0x4f7e]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404624:	lea    rcx,[rip+0x5ff6]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  40462b:	mov    edx,0x287
  404630:	call   403070 <__assert_fail@plt>
  404635:	lea    rdi,[rip+0x6126]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40463c:	lea    rsi,[rip+0x4f5f]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404643:	lea    rcx,[rip+0x5fd7]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  40464a:	mov    edx,0x28b
  40464f:	call   403070 <__assert_fail@plt>
  404654:	lea    rdi,[rip+0x6107]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40465b:	lea    rsi,[rip+0x4f40]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404662:	lea    rcx,[rip+0x508e]        # 4096f7 <flatcc_builder_padding_base@@Base+0x3d7>
  404669:	mov    edx,0x304
  40466e:	call   403070 <__assert_fail@plt>
  404673:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40467d:	nop    DWORD PTR [rax]

0000000000404680 <flatcc_builder_create_struct@@Base>:
  404680:	push   rbp
  404681:	push   r14
  404683:	push   rbx
  404684:	sub    rsp,0x90
  40468b:	test   cx,cx
  40468e:	je     404789 <flatcc_builder_create_struct@@Base+0x109>
  404694:	mov    rax,rdx
  404697:	mov    r14,rdi
  40469a:	cmp    WORD PTR [rdi+0xe8],cx
  4046a1:	jae    4046ab <flatcc_builder_create_struct@@Base+0x2b>
  4046a3:	mov    WORD PTR [r14+0xe8],cx
  4046ab:	mov    ebp,DWORD PTR [r14+0xf0]
  4046b2:	mov    edx,ebp
  4046b4:	sub    edx,eax
  4046b6:	movzx  ecx,cx
  4046b9:	add    ecx,0xffffffff
  4046bc:	and    ecx,edx
  4046be:	mov    QWORD PTR [rsp],0x0
  4046c6:	mov    DWORD PTR [rsp+0x8],0x0
  4046ce:	test   rax,rax
  4046d1:	je     404762 <flatcc_builder_create_struct@@Base+0xe2>
  4046d7:	mov    QWORD PTR [rsp],rax
  4046db:	mov    QWORD PTR [rsp+0x10],rsi
  4046e0:	mov    QWORD PTR [rsp+0x18],rax
  4046e5:	mov    DWORD PTR [rsp+0x8],0x1
  4046ed:	mov    edx,0x1
  4046f2:	test   ecx,ecx
  4046f4:	je     40471b <flatcc_builder_create_struct@@Base+0x9b>
  4046f6:	add    rax,rcx
  4046f9:	mov    QWORD PTR [rsp],rax
  4046fd:	mov    esi,edx
  4046ff:	shl    rsi,0x4
  404703:	lea    rdi,[rip+0x4c16]        # 409320 <flatcc_builder_padding_base@@Base>
  40470a:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  40470f:	mov    QWORD PTR [rsp+rsi*1+0x18],rcx
  404714:	add    edx,0x1
  404717:	mov    DWORD PTR [rsp+0x8],edx
  40471b:	cmp    rax,0x11
  40471f:	setb   cl
  404722:	lea    rsi,[rax-0x10]
  404726:	shr    rsi,0x20
  40472a:	sete   bl
  40472d:	test   eax,eax
  40472f:	jle    40476a <flatcc_builder_create_struct@@Base+0xea>
  404731:	or     cl,bl
  404733:	je     40476a <flatcc_builder_create_struct@@Base+0xea>
  404735:	sub    ebp,eax
  404737:	mov    rdi,QWORD PTR [r14+0x38]
  40473b:	lea    rsi,[rsp+0x10]
  404740:	mov    ecx,ebp
  404742:	mov    r8,rax
  404745:	call   QWORD PTR [r14+0x48]
  404749:	test   eax,eax
  40474b:	jne    4047a8 <flatcc_builder_create_struct@@Base+0x128>
  40474d:	mov    DWORD PTR [r14+0xf0],ebp
  404754:	mov    eax,ebp
  404756:	add    rsp,0x90
  40475d:	pop    rbx
  40475e:	pop    r14
  404760:	pop    rbp
  404761:	ret    
  404762:	xor    edx,edx
  404764:	test   ecx,ecx
  404766:	jne    4046f6 <flatcc_builder_create_struct@@Base+0x76>
  404768:	jmp    40471b <flatcc_builder_create_struct@@Base+0x9b>
  40476a:	lea    rdi,[rip+0x5ff1]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  404771:	lea    rsi,[rip+0x4e2a]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404778:	lea    rcx,[rip+0x5ea2]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  40477f:	mov    edx,0x287
  404784:	call   403070 <__assert_fail@plt>
  404789:	lea    rdi,[rip+0x4fea]        # 40977a <flatcc_builder_padding_base@@Base+0x45a>
  404790:	lea    rsi,[rip+0x4e0b]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404797:	lea    rcx,[rip+0x4fe7]        # 409785 <flatcc_builder_padding_base@@Base+0x465>
  40479e:	mov    edx,0x30f
  4047a3:	call   403070 <__assert_fail@plt>
  4047a8:	lea    rdi,[rip+0x5fb3]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4047af:	lea    rsi,[rip+0x4dec]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4047b6:	lea    rcx,[rip+0x5e64]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  4047bd:	mov    edx,0x28b
  4047c2:	call   403070 <__assert_fail@plt>
  4047c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004047d0 <flatcc_builder_start_buffer@@Base>:
  4047d0:	push   rbp
  4047d1:	push   r15
  4047d3:	push   r14
  4047d5:	push   rbx
  4047d6:	push   rax
  4047d7:	mov    r15d,ecx
  4047da:	mov    ebp,edx
  4047dc:	mov    r14,rsi
  4047df:	mov    rbx,rdi
  4047e2:	movzx  esi,WORD PTR [rdi+0xe8]
  4047e9:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  4047ee:	mov    ecx,eax
  4047f0:	mov    eax,0xffffffff
  4047f5:	test   ecx,ecx
  4047f7:	jne    40489c <flatcc_builder_start_buffer@@Base+0xcc>
  4047fd:	mov    WORD PTR [rbx+0xe8],0x1
  404806:	movzx  eax,WORD PTR [rbx+0xec]
  40480d:	mov    rcx,QWORD PTR [rbx+0x30]
  404811:	mov    WORD PTR [rcx+0x22],ax
  404815:	mov    WORD PTR [rbx+0xec],bp
  40481c:	movzx  eax,WORD PTR [rbx+0x10c]
  404823:	mov    rcx,QWORD PTR [rbx+0x30]
  404827:	mov    WORD PTR [rcx+0x20],ax
  40482b:	mov    WORD PTR [rbx+0x10c],r15w
  404833:	mov    eax,DWORD PTR [rbx+0xf8]
  404839:	mov    rcx,QWORD PTR [rbx+0x30]
  40483d:	mov    DWORD PTR [rcx+0x14],eax
  404840:	mov    eax,DWORD PTR [rbx+0x100]
  404846:	mov    rcx,QWORD PTR [rbx+0x30]
  40484a:	mov    DWORD PTR [rcx+0x1c],eax
  40484d:	mov    eax,DWORD PTR [rbx+0xf0]
  404853:	mov    DWORD PTR [rbx+0xf8],eax
  404859:	mov    eax,DWORD PTR [rbx+0xfc]
  40485f:	lea    ecx,[rax+0x1]
  404862:	mov    DWORD PTR [rbx+0xfc],ecx
  404868:	mov    DWORD PTR [rbx+0x100],eax
  40486e:	mov    eax,DWORD PTR [rbx+0x110]
  404874:	mov    rcx,QWORD PTR [rbx+0x30]
  404878:	mov    DWORD PTR [rcx+0x10],eax
  40487b:	test   r14,r14
  40487e:	jne    404887 <flatcc_builder_start_buffer@@Base+0xb7>
  404880:	lea    r14,[rip+0x4a99]        # 409320 <flatcc_builder_padding_base@@Base>
  404887:	mov    eax,DWORD PTR [r14]
  40488a:	mov    DWORD PTR [rbx+0x110],eax
  404890:	mov    rax,QWORD PTR [rbx+0x30]
  404894:	mov    WORD PTR [rax+0xe],0x1
  40489a:	xor    eax,eax
  40489c:	add    rsp,0x8
  4048a0:	pop    rbx
  4048a1:	pop    r14
  4048a3:	pop    r15
  4048a5:	pop    rbp
  4048a6:	ret    
  4048a7:	nop    WORD PTR [rax+rax*1+0x0]
  4048b0:	push   rbp
  4048b1:	push   r15
  4048b3:	push   r14
  4048b5:	push   rbx
  4048b6:	push   rax
  4048b7:	mov    r14d,esi
  4048ba:	mov    rbx,rdi
  4048bd:	movsxd rbp,DWORD PTR [rdi+0x104]
  4048c4:	lea    eax,[rbp+0x1]
  4048c7:	mov    DWORD PTR [rdi+0x104],eax
  4048cd:	cmp    ebp,DWORD PTR [rdi+0x108]
  4048d3:	jge    4048e6 <flatcc_builder_start_buffer@@Base+0x116>
  4048d5:	mov    rax,QWORD PTR [rbx+0x30]
  4048d9:	add    rax,0x24
  4048dd:	mov    QWORD PTR [rbx+0x30],rax
  4048e1:	jmp    40497b <flatcc_builder_start_buffer@@Base+0x1ab>
  4048e6:	mov    eax,DWORD PTR [rbx+0x120]
  4048ec:	mov    r15d,0xffffffff
  4048f2:	test   eax,eax
  4048f4:	jle    4048fe <flatcc_builder_start_buffer@@Base+0x12e>
  4048f6:	cmp    ebp,eax
  4048f8:	jge    4049b6 <flatcc_builder_start_buffer@@Base+0x1e6>
  4048fe:	shl    rbp,0x2
  404902:	lea    rdx,[rbp*8+0x24]
  40490a:	add    rdx,rbp
  40490d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404914:	jbe    404934 <flatcc_builder_start_buffer@@Base+0x164>
  404916:	lea    rsi,[rbx+0x98]
  40491d:	mov    rdi,QWORD PTR [rbx+0x40]
  404921:	xor    ecx,ecx
  404923:	mov    r8d,0x4
  404929:	call   QWORD PTR [rbx+0x50]
  40492c:	test   eax,eax
  40492e:	jne    4049c4 <flatcc_builder_start_buffer@@Base+0x1f4>
  404934:	lea    rax,[rbp*8+0x0]
  40493c:	add    rax,rbp
  40493f:	add    rax,QWORD PTR [rbx+0x98]
  404946:	mov    QWORD PTR [rbx+0x30],rax
  40494a:	je     4049b6 <flatcc_builder_start_buffer@@Base+0x1e6>
  40494c:	movabs rdx,0xe38e38e38e38e38f
  404956:	mulx   rdx,rcx,QWORD PTR [rbx+0xa0]
  40495f:	shr    rdx,0x5
  404963:	mov    ecx,DWORD PTR [rbx+0x120]
  404969:	cmp    ecx,edx
  40496b:	mov    esi,edx
  40496d:	cmovle esi,ecx
  404970:	test   ecx,ecx
  404972:	cmovle esi,edx
  404975:	mov    DWORD PTR [rbx+0x108],esi
  40497b:	mov    ecx,DWORD PTR [rbx+0x20]
  40497e:	mov    DWORD PTR [rax+0x8],ecx
  404981:	movzx  edx,WORD PTR [rbx+0xea]
  404988:	mov    WORD PTR [rax+0xc],dx
  40498c:	mov    WORD PTR [rbx+0xea],r14w
  404994:	mov    edx,DWORD PTR [rbx+0x28]
  404997:	mov    DWORD PTR [rax],edx
  404999:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4049a0:	lea    eax,[rcx+rdx*1]
  4049a3:	add    eax,0x7
  4049a6:	and    eax,0xfffffff8
  4049a9:	mov    DWORD PTR [rbx+0x28],eax
  4049ac:	mov    DWORD PTR [rbx+0x20],0x0
  4049b3:	xor    r15d,r15d
  4049b6:	mov    eax,r15d
  4049b9:	add    rsp,0x8
  4049bd:	pop    rbx
  4049be:	pop    r14
  4049c0:	pop    r15
  4049c2:	pop    rbp
  4049c3:	ret    
  4049c4:	lea    rdi,[rip+0x5d97]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4049cb:	lea    rsi,[rip+0x4bd0]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4049d2:	lea    rcx,[rip+0x5bc3]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  4049d9:	mov    edx,0x134
  4049de:	call   403070 <__assert_fail@plt>
  4049e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4049ed:	nop    DWORD PTR [rax]

00000000004049f0 <flatcc_builder_end_buffer@@Base>:
  4049f0:	push   rbp
  4049f1:	push   rbx
  4049f2:	push   rax
  4049f3:	mov    rcx,QWORD PTR [rdi+0x30]
  4049f7:	movzx  ecx,WORD PTR [rcx+0xe]
  4049fb:	cmp    ecx,0x1
  4049fe:	jne    404afe <flatcc_builder_end_buffer@@Base+0x10e>
  404a04:	mov    eax,esi
  404a06:	mov    rbx,rdi
  404a09:	movzx  ecx,WORD PTR [rdi+0x10c]
  404a10:	and    ecx,0x2
  404a13:	xor    r9d,r9d
  404a16:	cmp    DWORD PTR [rdi+0x100],0x0
  404a1d:	setne  r9b
  404a21:	or     r9d,ecx
  404a24:	movzx  edi,WORD PTR [rdi+0xe8]
  404a2b:	movzx  ecx,WORD PTR [rbx+0xec]
  404a32:	cmp    di,cx
  404a35:	jae    404a40 <flatcc_builder_end_buffer@@Base+0x50>
  404a37:	mov    WORD PTR [rbx+0xe8],cx
  404a3e:	mov    edi,ecx
  404a40:	lea    rsi,[rbx+0x110]
  404a47:	movzx  edx,cx
  404a4a:	movzx  r8d,di
  404a4e:	mov    rdi,rbx
  404a51:	mov    ecx,eax
  404a53:	call   404440 <flatcc_builder_create_buffer@@Base>
  404a58:	mov    ebp,eax
  404a5a:	test   eax,eax
  404a5c:	je     404af5 <flatcc_builder_end_buffer@@Base+0x105>
  404a62:	mov    rax,QWORD PTR [rbx+0x30]
  404a66:	mov    ecx,DWORD PTR [rax+0x14]
  404a69:	mov    DWORD PTR [rbx+0xf8],ecx
  404a6f:	mov    ecx,DWORD PTR [rax+0x1c]
  404a72:	mov    DWORD PTR [rbx+0x100],ecx
  404a78:	mov    ecx,DWORD PTR [rax+0x10]
  404a7b:	mov    DWORD PTR [rbx+0x110],ecx
  404a81:	movzx  eax,WORD PTR [rax+0x20]
  404a85:	mov    WORD PTR [rbx+0x10c],ax
  404a8c:	mov    rdi,QWORD PTR [rbx+0x18]
  404a90:	mov    edx,DWORD PTR [rbx+0x20]
  404a93:	xor    esi,esi
  404a95:	call   403080 <memset@plt>
  404a9a:	mov    rax,QWORD PTR [rbx+0x30]
  404a9e:	mov    ecx,DWORD PTR [rax+0x8]
  404aa1:	mov    DWORD PTR [rbx+0x20],ecx
  404aa4:	mov    ecx,DWORD PTR [rax]
  404aa6:	mov    DWORD PTR [rbx+0x28],ecx
  404aa9:	mov    edx,DWORD PTR [rax+0x4]
  404aac:	mov    rsi,rcx
  404aaf:	add    rsi,QWORD PTR [rbx+0x68]
  404ab3:	mov    QWORD PTR [rbx+0x18],rsi
  404ab7:	mov    esi,DWORD PTR [rbx+0x70]
  404aba:	sub    esi,ecx
  404abc:	cmp    esi,edx
  404abe:	cmova  esi,edx
  404ac1:	mov    DWORD PTR [rbx+0x24],esi
  404ac4:	movzx  ecx,WORD PTR [rbx+0xea]
  404acb:	cmp    WORD PTR [rbx+0xe8],cx
  404ad2:	jae    404adb <flatcc_builder_end_buffer@@Base+0xeb>
  404ad4:	mov    WORD PTR [rbx+0xe8],cx
  404adb:	movzx  ecx,WORD PTR [rax+0xc]
  404adf:	mov    WORD PTR [rbx+0xea],cx
  404ae6:	add    rax,0xffffffffffffffdc
  404aea:	mov    QWORD PTR [rbx+0x30],rax
  404aee:	add    DWORD PTR [rbx+0x104],0xffffffff
  404af5:	mov    eax,ebp
  404af7:	add    rsp,0x8
  404afb:	pop    rbx
  404afc:	pop    rbp
  404afd:	ret    
  404afe:	lea    rdi,[rip+0x4ce6]        # 4097eb <flatcc_builder_padding_base@@Base+0x4cb>
  404b05:	lea    rsi,[rip+0x4a96]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404b0c:	lea    rcx,[rip+0x4d04]        # 409817 <flatcc_builder_padding_base@@Base+0x4f7>
  404b13:	mov    edx,0x346
  404b18:	call   403070 <__assert_fail@plt>
  404b1d:	nop    DWORD PTR [rax]

0000000000404b20 <flatcc_builder_start_struct@@Base>:
  404b20:	push   r15
  404b22:	push   r14
  404b24:	push   rbx
  404b25:	mov    r14,rsi
  404b28:	mov    rbx,rdi
  404b2b:	mov    esi,edx
  404b2d:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  404b32:	test   eax,eax
  404b34:	je     404b3d <flatcc_builder_start_struct@@Base+0x1d>
  404b36:	xor    eax,eax
  404b38:	jmp    404bd2 <flatcc_builder_start_struct@@Base+0xb2>
  404b3d:	mov    rdx,QWORD PTR [rbx+0x30]
  404b41:	mov    WORD PTR [rdx+0xe],0x2
  404b47:	mov    ecx,DWORD PTR [rbx+0x28]
  404b4a:	mov    esi,DWORD PTR [rbx+0x70]
  404b4d:	mov    rax,QWORD PTR [rbx+0x68]
  404b51:	add    rax,rcx
  404b54:	mov    QWORD PTR [rbx+0x18],rax
  404b58:	sub    esi,ecx
  404b5a:	cmp    esi,0xfffffffc
  404b5d:	mov    edi,0xfffffffc
  404b62:	cmovb  edi,esi
  404b65:	mov    DWORD PTR [rbx+0x24],edi
  404b68:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404b6f:	mov    r15d,DWORD PTR [rbx+0x20]
  404b73:	add    r14d,r15d
  404b76:	mov    DWORD PTR [rbx+0x20],r14d
  404b7a:	cmp    r14d,edi
  404b7d:	jb     404bcf <flatcc_builder_start_struct@@Base+0xaf>
  404b7f:	add    r14d,0x1
  404b83:	lea    rsi,[rbx+0x68]
  404b87:	mov    rdi,QWORD PTR [rbx+0x40]
  404b8b:	add    r14,rcx
  404b8e:	mov    ecx,0x1
  404b93:	mov    r8d,0x1
  404b99:	mov    rdx,r14
  404b9c:	call   QWORD PTR [rbx+0x50]
  404b9f:	test   eax,eax
  404ba1:	jne    404b36 <flatcc_builder_start_struct@@Base+0x16>
  404ba3:	mov    ecx,DWORD PTR [rbx+0x28]
  404ba6:	mov    rax,rcx
  404ba9:	add    rax,QWORD PTR [rbx+0x68]
  404bad:	mov    QWORD PTR [rbx+0x18],rax
  404bb1:	mov    edx,DWORD PTR [rbx+0x70]
  404bb4:	sub    edx,ecx
  404bb6:	cmp    edx,0xfffffffc
  404bb9:	mov    ecx,0xfffffffc
  404bbe:	cmovb  ecx,edx
  404bc1:	mov    DWORD PTR [rbx+0x24],ecx
  404bc4:	mov    rcx,QWORD PTR [rbx+0x30]
  404bc8:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404bcf:	add    rax,r15
  404bd2:	pop    rbx
  404bd3:	pop    r14
  404bd5:	pop    r15
  404bd7:	ret    
  404bd8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404be0 <flatcc_builder_struct_edit@@Base>:
  404be0:	mov    rax,QWORD PTR [rdi+0x18]
  404be4:	ret    
  404be5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404bef:	nop

0000000000404bf0 <flatcc_builder_end_struct@@Base>:
  404bf0:	push   rbp
  404bf1:	push   rbx
  404bf2:	push   rax
  404bf3:	mov    rax,QWORD PTR [rdi+0x30]
  404bf7:	movzx  eax,WORD PTR [rax+0xe]
  404bfb:	cmp    eax,0x2
  404bfe:	jne    404c92 <flatcc_builder_end_struct@@Base+0xa2>
  404c04:	mov    rbx,rdi
  404c07:	mov    rsi,QWORD PTR [rdi+0x18]
  404c0b:	mov    edx,DWORD PTR [rdi+0x20]
  404c0e:	movzx  ecx,WORD PTR [rdi+0xea]
  404c15:	call   404680 <flatcc_builder_create_struct@@Base>
  404c1a:	mov    ebp,eax
  404c1c:	test   eax,eax
  404c1e:	je     404c89 <flatcc_builder_end_struct@@Base+0x99>
  404c20:	mov    rdi,QWORD PTR [rbx+0x18]
  404c24:	mov    edx,DWORD PTR [rbx+0x20]
  404c27:	xor    esi,esi
  404c29:	call   403080 <memset@plt>
  404c2e:	mov    rax,QWORD PTR [rbx+0x30]
  404c32:	mov    ecx,DWORD PTR [rax+0x8]
  404c35:	mov    DWORD PTR [rbx+0x20],ecx
  404c38:	mov    ecx,DWORD PTR [rax]
  404c3a:	mov    DWORD PTR [rbx+0x28],ecx
  404c3d:	mov    edx,DWORD PTR [rax+0x4]
  404c40:	mov    rsi,rcx
  404c43:	add    rsi,QWORD PTR [rbx+0x68]
  404c47:	mov    QWORD PTR [rbx+0x18],rsi
  404c4b:	mov    esi,DWORD PTR [rbx+0x70]
  404c4e:	sub    esi,ecx
  404c50:	cmp    esi,edx
  404c52:	cmova  esi,edx
  404c55:	mov    DWORD PTR [rbx+0x24],esi
  404c58:	movzx  ecx,WORD PTR [rbx+0xea]
  404c5f:	cmp    WORD PTR [rbx+0xe8],cx
  404c66:	jae    404c6f <flatcc_builder_end_struct@@Base+0x7f>
  404c68:	mov    WORD PTR [rbx+0xe8],cx
  404c6f:	movzx  ecx,WORD PTR [rax+0xc]
  404c73:	mov    WORD PTR [rbx+0xea],cx
  404c7a:	add    rax,0xffffffffffffffdc
  404c7e:	mov    QWORD PTR [rbx+0x30],rax
  404c82:	add    DWORD PTR [rbx+0x104],0xffffffff
  404c89:	mov    eax,ebp
  404c8b:	add    rsp,0x8
  404c8f:	pop    rbx
  404c90:	pop    rbp
  404c91:	ret    
  404c92:	lea    rdi,[rip+0x4bd7]        # 409870 <flatcc_builder_padding_base@@Base+0x550>
  404c99:	lea    rsi,[rip+0x4902]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404ca0:	lea    rcx,[rip+0x4bf5]        # 40989c <flatcc_builder_padding_base@@Base+0x57c>
  404ca7:	mov    edx,0x368
  404cac:	call   403070 <__assert_fail@plt>
  404cb1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404cbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404cc0 <flatcc_builder_extend_vector@@Base>:
  404cc0:	push   r14
  404cc2:	push   rbx
  404cc3:	push   rax
  404cc4:	mov    rax,QWORD PTR [rdi+0x30]
  404cc8:	mov    ecx,DWORD PTR [rax+0x14]
  404ccb:	add    ecx,esi
  404ccd:	jb     404d60 <flatcc_builder_extend_vector@@Base+0xa0>
  404cd3:	cmp    ecx,DWORD PTR [rax+0x18]
  404cd6:	ja     404d60 <flatcc_builder_extend_vector@@Base+0xa0>
  404cdc:	mov    rbx,rdi
  404cdf:	mov    DWORD PTR [rax+0x14],ecx
  404ce2:	mov    rax,QWORD PTR [rdi+0x30]
  404ce6:	imul   esi,DWORD PTR [rax+0x10]
  404cea:	mov    r14d,DWORD PTR [rdi+0x20]
  404cee:	add    esi,r14d
  404cf1:	mov    DWORD PTR [rdi+0x20],esi
  404cf4:	cmp    esi,DWORD PTR [rdi+0x24]
  404cf7:	jae    404cff <flatcc_builder_extend_vector@@Base+0x3f>
  404cf9:	mov    rax,QWORD PTR [rbx+0x18]
  404cfd:	jmp    404d55 <flatcc_builder_extend_vector@@Base+0x95>
  404cff:	add    esi,0x1
  404d02:	lea    rax,[rbx+0x68]
  404d06:	mov    rdi,QWORD PTR [rbx+0x40]
  404d0a:	mov    edx,DWORD PTR [rbx+0x28]
  404d0d:	add    rdx,rsi
  404d10:	mov    ecx,0x1
  404d15:	mov    r8d,0x1
  404d1b:	mov    rsi,rax
  404d1e:	call   QWORD PTR [rbx+0x50]
  404d21:	test   eax,eax
  404d23:	je     404d29 <flatcc_builder_extend_vector@@Base+0x69>
  404d25:	xor    eax,eax
  404d27:	jmp    404d58 <flatcc_builder_extend_vector@@Base+0x98>
  404d29:	mov    ecx,DWORD PTR [rbx+0x28]
  404d2c:	mov    rax,rcx
  404d2f:	add    rax,QWORD PTR [rbx+0x68]
  404d33:	mov    QWORD PTR [rbx+0x18],rax
  404d37:	mov    edx,DWORD PTR [rbx+0x70]
  404d3a:	sub    edx,ecx
  404d3c:	cmp    edx,0xfffffffc
  404d3f:	mov    ecx,0xfffffffc
  404d44:	cmovb  ecx,edx
  404d47:	mov    DWORD PTR [rbx+0x24],ecx
  404d4a:	mov    rcx,QWORD PTR [rbx+0x30]
  404d4e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404d55:	add    rax,r14
  404d58:	add    rsp,0x8
  404d5c:	pop    rbx
  404d5d:	pop    r14
  404d5f:	ret    
  404d60:	lea    rdi,[rip+0x5904]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  404d67:	lea    rsi,[rip+0x4834]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404d6e:	lea    rcx,[rip+0x5911]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  404d75:	mov    edx,0x37c
  404d7a:	call   403070 <__assert_fail@plt>
  404d7f:	nop

0000000000404d80 <flatcc_builder_vector_push@@Base>:
  404d80:	push   r15
  404d82:	push   r14
  404d84:	push   r13
  404d86:	push   r12
  404d88:	push   rbx
  404d89:	mov    rax,QWORD PTR [rdi+0x30]
  404d8d:	movzx  ecx,WORD PTR [rax+0xe]
  404d91:	cmp    ecx,0x4
  404d94:	jne    404e49 <flatcc_builder_vector_push@@Base+0xc9>
  404d9a:	mov    ecx,DWORD PTR [rax+0x14]
  404d9d:	cmp    ecx,DWORD PTR [rax+0x18]
  404da0:	ja     404e68 <flatcc_builder_vector_push@@Base+0xe8>
  404da6:	mov    r14,rsi
  404da9:	mov    rbx,rdi
  404dac:	add    ecx,0x1
  404daf:	mov    DWORD PTR [rax+0x14],ecx
  404db2:	mov    rax,QWORD PTR [rdi+0x30]
  404db6:	mov    r15d,DWORD PTR [rax+0x10]
  404dba:	mov    r13d,DWORD PTR [rdi+0x20]
  404dbe:	lea    eax,[r15+r13*1]
  404dc2:	mov    DWORD PTR [rdi+0x20],eax
  404dc5:	cmp    eax,DWORD PTR [rdi+0x24]
  404dc8:	jae    404dd5 <flatcc_builder_vector_push@@Base+0x55>
  404dca:	mov    r12,QWORD PTR [rbx+0x18]
  404dce:	add    r12,r13
  404dd1:	jne    404e2e <flatcc_builder_vector_push@@Base+0xae>
  404dd3:	jmp    404df8 <flatcc_builder_vector_push@@Base+0x78>
  404dd5:	add    eax,0x1
  404dd8:	lea    rsi,[rbx+0x68]
  404ddc:	mov    rdi,QWORD PTR [rbx+0x40]
  404de0:	mov    edx,DWORD PTR [rbx+0x28]
  404de3:	add    rdx,rax
  404de6:	mov    ecx,0x1
  404deb:	mov    r8d,0x1
  404df1:	call   QWORD PTR [rbx+0x50]
  404df4:	test   eax,eax
  404df6:	je     404dfd <flatcc_builder_vector_push@@Base+0x7d>
  404df8:	xor    r12d,r12d
  404dfb:	jmp    404e3c <flatcc_builder_vector_push@@Base+0xbc>
  404dfd:	mov    eax,DWORD PTR [rbx+0x28]
  404e00:	mov    r12,rax
  404e03:	add    r12,QWORD PTR [rbx+0x68]
  404e07:	mov    QWORD PTR [rbx+0x18],r12
  404e0b:	mov    ecx,DWORD PTR [rbx+0x70]
  404e0e:	sub    ecx,eax
  404e10:	cmp    ecx,0xfffffffc
  404e13:	mov    eax,0xfffffffc
  404e18:	cmovb  eax,ecx
  404e1b:	mov    DWORD PTR [rbx+0x24],eax
  404e1e:	mov    rax,QWORD PTR [rbx+0x30]
  404e22:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404e29:	add    r12,r13
  404e2c:	je     404df8 <flatcc_builder_vector_push@@Base+0x78>
  404e2e:	mov    rdi,r12
  404e31:	mov    rsi,r14
  404e34:	mov    rdx,r15
  404e37:	call   4030d0 <memcpy@plt>
  404e3c:	mov    rax,r12
  404e3f:	pop    rbx
  404e40:	pop    r12
  404e42:	pop    r13
  404e44:	pop    r14
  404e46:	pop    r15
  404e48:	ret    
  404e49:	lea    rdi,[rip+0x4a8f]        # 4098df <flatcc_builder_padding_base@@Base+0x5bf>
  404e50:	lea    rsi,[rip+0x474b]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404e57:	lea    rcx,[rip+0x4aad]        # 40990b <flatcc_builder_padding_base@@Base+0x5eb>
  404e5e:	mov    edx,0x38b
  404e63:	call   403070 <__assert_fail@plt>
  404e68:	lea    rdi,[rip+0x4adf]        # 40994e <flatcc_builder_padding_base@@Base+0x62e>
  404e6f:	lea    rsi,[rip+0x472c]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404e76:	lea    rcx,[rip+0x4a8e]        # 40990b <flatcc_builder_padding_base@@Base+0x5eb>
  404e7d:	mov    edx,0x38c
  404e82:	call   403070 <__assert_fail@plt>
  404e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404e90 <flatcc_builder_append_vector@@Base>:
  404e90:	push   r15
  404e92:	push   r14
  404e94:	push   r13
  404e96:	push   r12
  404e98:	push   rbx
  404e99:	mov    rax,QWORD PTR [rdi+0x30]
  404e9d:	movzx  ecx,WORD PTR [rax+0xe]
  404ea1:	cmp    ecx,0x4
  404ea4:	jne    404f82 <flatcc_builder_append_vector@@Base+0xf2>
  404eaa:	mov    r15,rdx
  404ead:	mov    ecx,DWORD PTR [rax+0x14]
  404eb0:	add    ecx,r15d
  404eb3:	jb     404f63 <flatcc_builder_append_vector@@Base+0xd3>
  404eb9:	cmp    ecx,DWORD PTR [rax+0x18]
  404ebc:	ja     404f63 <flatcc_builder_append_vector@@Base+0xd3>
  404ec2:	mov    r14,rsi
  404ec5:	mov    rbx,rdi
  404ec8:	mov    DWORD PTR [rax+0x14],ecx
  404ecb:	mov    rax,QWORD PTR [rdi+0x30]
  404ecf:	imul   r15d,DWORD PTR [rax+0x10]
  404ed4:	mov    r13d,DWORD PTR [rdi+0x20]
  404ed8:	lea    eax,[r15+r13*1]
  404edc:	mov    DWORD PTR [rdi+0x20],eax
  404edf:	cmp    eax,DWORD PTR [rdi+0x24]
  404ee2:	jae    404eef <flatcc_builder_append_vector@@Base+0x5f>
  404ee4:	mov    r12,QWORD PTR [rbx+0x18]
  404ee8:	add    r12,r13
  404eeb:	jne    404f48 <flatcc_builder_append_vector@@Base+0xb8>
  404eed:	jmp    404f12 <flatcc_builder_append_vector@@Base+0x82>
  404eef:	add    eax,0x1
  404ef2:	lea    rsi,[rbx+0x68]
  404ef6:	mov    rdi,QWORD PTR [rbx+0x40]
  404efa:	mov    edx,DWORD PTR [rbx+0x28]
  404efd:	add    rdx,rax
  404f00:	mov    ecx,0x1
  404f05:	mov    r8d,0x1
  404f0b:	call   QWORD PTR [rbx+0x50]
  404f0e:	test   eax,eax
  404f10:	je     404f17 <flatcc_builder_append_vector@@Base+0x87>
  404f12:	xor    r12d,r12d
  404f15:	jmp    404f56 <flatcc_builder_append_vector@@Base+0xc6>
  404f17:	mov    eax,DWORD PTR [rbx+0x28]
  404f1a:	mov    r12,rax
  404f1d:	add    r12,QWORD PTR [rbx+0x68]
  404f21:	mov    QWORD PTR [rbx+0x18],r12
  404f25:	mov    ecx,DWORD PTR [rbx+0x70]
  404f28:	sub    ecx,eax
  404f2a:	cmp    ecx,0xfffffffc
  404f2d:	mov    eax,0xfffffffc
  404f32:	cmovb  eax,ecx
  404f35:	mov    DWORD PTR [rbx+0x24],eax
  404f38:	mov    rax,QWORD PTR [rbx+0x30]
  404f3c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404f43:	add    r12,r13
  404f46:	je     404f12 <flatcc_builder_append_vector@@Base+0x82>
  404f48:	mov    edx,r15d
  404f4b:	mov    rdi,r12
  404f4e:	mov    rsi,r14
  404f51:	call   4030d0 <memcpy@plt>
  404f56:	mov    rax,r12
  404f59:	pop    rbx
  404f5a:	pop    r12
  404f5c:	pop    r13
  404f5e:	pop    r14
  404f60:	pop    r15
  404f62:	ret    
  404f63:	lea    rdi,[rip+0x5701]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  404f6a:	lea    rsi,[rip+0x4631]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404f71:	lea    rcx,[rip+0x570e]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  404f78:	mov    edx,0x37c
  404f7d:	call   403070 <__assert_fail@plt>
  404f82:	lea    rdi,[rip+0x4956]        # 4098df <flatcc_builder_padding_base@@Base+0x5bf>
  404f89:	lea    rsi,[rip+0x4612]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  404f90:	lea    rcx,[rip+0x49f4]        # 40998b <flatcc_builder_padding_base@@Base+0x66b>
  404f97:	mov    edx,0x393
  404f9c:	call   403070 <__assert_fail@plt>
  404fa1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404fab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404fb0 <flatcc_builder_extend_offset_vector@@Base>:
  404fb0:	push   r14
  404fb2:	push   rbx
  404fb3:	push   rax
  404fb4:	mov    rax,QWORD PTR [rdi+0x30]
  404fb8:	mov    ecx,DWORD PTR [rax+0x14]
  404fbb:	add    ecx,esi
  404fbd:	jb     405045 <flatcc_builder_extend_offset_vector@@Base+0x95>
  404fc3:	cmp    ecx,0x40000000
  404fc9:	jae    405045 <flatcc_builder_extend_offset_vector@@Base+0x95>
  404fcb:	mov    rbx,rdi
  404fce:	mov    DWORD PTR [rax+0x14],ecx
  404fd1:	mov    r14d,DWORD PTR [rdi+0x20]
  404fd5:	lea    eax,[r14+rsi*4]
  404fd9:	mov    DWORD PTR [rdi+0x20],eax
  404fdc:	cmp    eax,DWORD PTR [rdi+0x24]
  404fdf:	jae    404fe7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  404fe1:	mov    rax,QWORD PTR [rbx+0x18]
  404fe5:	jmp    40503a <flatcc_builder_extend_offset_vector@@Base+0x8a>
  404fe7:	add    eax,0x1
  404fea:	lea    rsi,[rbx+0x68]
  404fee:	mov    rdi,QWORD PTR [rbx+0x40]
  404ff2:	mov    edx,DWORD PTR [rbx+0x28]
  404ff5:	add    rdx,rax
  404ff8:	mov    ecx,0x1
  404ffd:	mov    r8d,0x1
  405003:	call   QWORD PTR [rbx+0x50]
  405006:	test   eax,eax
  405008:	je     40500e <flatcc_builder_extend_offset_vector@@Base+0x5e>
  40500a:	xor    eax,eax
  40500c:	jmp    40503d <flatcc_builder_extend_offset_vector@@Base+0x8d>
  40500e:	mov    ecx,DWORD PTR [rbx+0x28]
  405011:	mov    rax,rcx
  405014:	add    rax,QWORD PTR [rbx+0x68]
  405018:	mov    QWORD PTR [rbx+0x18],rax
  40501c:	mov    edx,DWORD PTR [rbx+0x70]
  40501f:	sub    edx,ecx
  405021:	cmp    edx,0xfffffffc
  405024:	mov    ecx,0xfffffffc
  405029:	cmovb  ecx,edx
  40502c:	mov    DWORD PTR [rbx+0x24],ecx
  40502f:	mov    rcx,QWORD PTR [rbx+0x30]
  405033:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40503a:	add    rax,r14
  40503d:	add    rsp,0x8
  405041:	pop    rbx
  405042:	pop    r14
  405044:	ret    
  405045:	lea    rdi,[rip+0x561f]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  40504c:	lea    rsi,[rip+0x454f]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405053:	lea    rcx,[rip+0x562c]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  40505a:	mov    edx,0x37c
  40505f:	call   403070 <__assert_fail@plt>
  405064:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40506e:	xchg   ax,ax

0000000000405070 <flatcc_builder_offset_vector_push@@Base>:
  405070:	push   rbp
  405071:	push   r14
  405073:	push   rbx
  405074:	mov    rax,QWORD PTR [rdi+0x30]
  405078:	movzx  ecx,WORD PTR [rax+0xe]
  40507c:	cmp    ecx,0x5
  40507f:	jne    405115 <flatcc_builder_offset_vector_push@@Base+0xa5>
  405085:	mov    ecx,DWORD PTR [rax+0x14]
  405088:	cmp    ecx,0x3fffffff
  40508e:	je     4050d8 <flatcc_builder_offset_vector_push@@Base+0x68>
  405090:	mov    r14d,esi
  405093:	mov    rbx,rdi
  405096:	add    ecx,0x1
  405099:	mov    DWORD PTR [rax+0x14],ecx
  40509c:	mov    ebp,DWORD PTR [rdi+0x20]
  40509f:	lea    eax,[rbp+0x4]
  4050a2:	mov    DWORD PTR [rdi+0x20],eax
  4050a5:	cmp    eax,DWORD PTR [rdi+0x24]
  4050a8:	jae    4050b5 <flatcc_builder_offset_vector_push@@Base+0x45>
  4050aa:	mov    rax,QWORD PTR [rbx+0x18]
  4050ae:	add    rax,rbp
  4050b1:	jne    40510d <flatcc_builder_offset_vector_push@@Base+0x9d>
  4050b3:	jmp    4050d8 <flatcc_builder_offset_vector_push@@Base+0x68>
  4050b5:	lea    eax,[rbp+0x5]
  4050b8:	lea    rsi,[rbx+0x68]
  4050bc:	mov    rdi,QWORD PTR [rbx+0x40]
  4050c0:	mov    edx,DWORD PTR [rbx+0x28]
  4050c3:	add    rdx,rax
  4050c6:	mov    ecx,0x1
  4050cb:	mov    r8d,0x1
  4050d1:	call   QWORD PTR [rbx+0x50]
  4050d4:	test   eax,eax
  4050d6:	je     4050dc <flatcc_builder_offset_vector_push@@Base+0x6c>
  4050d8:	xor    eax,eax
  4050da:	jmp    405110 <flatcc_builder_offset_vector_push@@Base+0xa0>
  4050dc:	mov    ecx,DWORD PTR [rbx+0x28]
  4050df:	mov    rax,rcx
  4050e2:	add    rax,QWORD PTR [rbx+0x68]
  4050e6:	mov    QWORD PTR [rbx+0x18],rax
  4050ea:	mov    edx,DWORD PTR [rbx+0x70]
  4050ed:	sub    edx,ecx
  4050ef:	cmp    edx,0xfffffffc
  4050f2:	mov    ecx,0xfffffffc
  4050f7:	cmovb  ecx,edx
  4050fa:	mov    DWORD PTR [rbx+0x24],ecx
  4050fd:	mov    rcx,QWORD PTR [rbx+0x30]
  405101:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405108:	add    rax,rbp
  40510b:	je     4050d8 <flatcc_builder_offset_vector_push@@Base+0x68>
  40510d:	mov    DWORD PTR [rax],r14d
  405110:	pop    rbx
  405111:	pop    r14
  405113:	pop    rbp
  405114:	ret    
  405115:	lea    rdi,[rip+0x48bc]        # 4099d8 <flatcc_builder_padding_base@@Base+0x6b8>
  40511c:	lea    rsi,[rip+0x447f]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405123:	lea    rcx,[rip+0x48e1]        # 409a0b <flatcc_builder_padding_base@@Base+0x6eb>
  40512a:	mov    edx,0x3a6
  40512f:	call   403070 <__assert_fail@plt>
  405134:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40513e:	xchg   ax,ax

0000000000405140 <flatcc_builder_append_offset_vector@@Base>:
  405140:	push   r15
  405142:	push   r14
  405144:	push   r13
  405146:	push   r12
  405148:	push   rbx
  405149:	mov    rax,QWORD PTR [rdi+0x30]
  40514d:	movzx  ecx,WORD PTR [rax+0xe]
  405151:	cmp    ecx,0x5
  405154:	jne    405231 <flatcc_builder_append_offset_vector@@Base+0xf1>
  40515a:	mov    r15,rdx
  40515d:	mov    ecx,DWORD PTR [rax+0x14]
  405160:	add    ecx,r15d
  405163:	jb     405212 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405169:	cmp    ecx,0x40000000
  40516f:	jae    405212 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405175:	mov    r14,rsi
  405178:	mov    rbx,rdi
  40517b:	mov    DWORD PTR [rax+0x14],ecx
  40517e:	mov    r13d,DWORD PTR [rdi+0x20]
  405182:	lea    eax,[r13+r15*4+0x0]
  405187:	mov    DWORD PTR [rdi+0x20],eax
  40518a:	cmp    eax,DWORD PTR [rdi+0x24]
  40518d:	jae    40519a <flatcc_builder_append_offset_vector@@Base+0x5a>
  40518f:	mov    r12,QWORD PTR [rbx+0x18]
  405193:	add    r12,r13
  405196:	jne    4051f3 <flatcc_builder_append_offset_vector@@Base+0xb3>
  405198:	jmp    4051bd <flatcc_builder_append_offset_vector@@Base+0x7d>
  40519a:	add    eax,0x1
  40519d:	lea    rsi,[rbx+0x68]
  4051a1:	mov    rdi,QWORD PTR [rbx+0x40]
  4051a5:	mov    edx,DWORD PTR [rbx+0x28]
  4051a8:	add    rdx,rax
  4051ab:	mov    ecx,0x1
  4051b0:	mov    r8d,0x1
  4051b6:	call   QWORD PTR [rbx+0x50]
  4051b9:	test   eax,eax
  4051bb:	je     4051c2 <flatcc_builder_append_offset_vector@@Base+0x82>
  4051bd:	xor    r12d,r12d
  4051c0:	jmp    405205 <flatcc_builder_append_offset_vector@@Base+0xc5>
  4051c2:	mov    eax,DWORD PTR [rbx+0x28]
  4051c5:	mov    r12,rax
  4051c8:	add    r12,QWORD PTR [rbx+0x68]
  4051cc:	mov    QWORD PTR [rbx+0x18],r12
  4051d0:	mov    ecx,DWORD PTR [rbx+0x70]
  4051d3:	sub    ecx,eax
  4051d5:	cmp    ecx,0xfffffffc
  4051d8:	mov    eax,0xfffffffc
  4051dd:	cmovb  eax,ecx
  4051e0:	mov    DWORD PTR [rbx+0x24],eax
  4051e3:	mov    rax,QWORD PTR [rbx+0x30]
  4051e7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4051ee:	add    r12,r13
  4051f1:	je     4051bd <flatcc_builder_append_offset_vector@@Base+0x7d>
  4051f3:	shl    r15d,0x2
  4051f7:	mov    edx,r15d
  4051fa:	mov    rdi,r12
  4051fd:	mov    rsi,r14
  405200:	call   4030d0 <memcpy@plt>
  405205:	mov    rax,r12
  405208:	pop    rbx
  405209:	pop    r12
  40520b:	pop    r13
  40520d:	pop    r14
  40520f:	pop    r15
  405211:	ret    
  405212:	lea    rdi,[rip+0x5452]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  405219:	lea    rsi,[rip+0x4382]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405220:	lea    rcx,[rip+0x545f]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  405227:	mov    edx,0x37c
  40522c:	call   403070 <__assert_fail@plt>
  405231:	lea    rdi,[rip+0x47a0]        # 4099d8 <flatcc_builder_padding_base@@Base+0x6b8>
  405238:	lea    rsi,[rip+0x4363]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40523f:	lea    rcx,[rip+0x4827]        # 409a6d <flatcc_builder_padding_base@@Base+0x74d>
  405246:	mov    edx,0x3b4
  40524b:	call   403070 <__assert_fail@plt>

0000000000405250 <flatcc_builder_extend_string@@Base>:
  405250:	push   r14
  405252:	push   rbx
  405253:	push   rax
  405254:	mov    rax,QWORD PTR [rdi+0x30]
  405258:	movzx  ecx,WORD PTR [rax+0xe]
  40525c:	cmp    ecx,0x6
  40525f:	jne    4052ec <flatcc_builder_extend_string@@Base+0x9c>
  405265:	mov    ecx,DWORD PTR [rax+0x14]
  405268:	add    ecx,esi
  40526a:	jb     40530b <flatcc_builder_extend_string@@Base+0xbb>
  405270:	mov    rbx,rdi
  405273:	mov    DWORD PTR [rax+0x14],ecx
  405276:	mov    r14d,DWORD PTR [rdi+0x20]
  40527a:	add    esi,r14d
  40527d:	mov    DWORD PTR [rdi+0x20],esi
  405280:	cmp    esi,DWORD PTR [rdi+0x24]
  405283:	jae    40528b <flatcc_builder_extend_string@@Base+0x3b>
  405285:	mov    rax,QWORD PTR [rbx+0x18]
  405289:	jmp    4052e1 <flatcc_builder_extend_string@@Base+0x91>
  40528b:	add    esi,0x1
  40528e:	lea    rax,[rbx+0x68]
  405292:	mov    rdi,QWORD PTR [rbx+0x40]
  405296:	mov    edx,DWORD PTR [rbx+0x28]
  405299:	add    rdx,rsi
  40529c:	mov    ecx,0x1
  4052a1:	mov    r8d,0x1
  4052a7:	mov    rsi,rax
  4052aa:	call   QWORD PTR [rbx+0x50]
  4052ad:	test   eax,eax
  4052af:	je     4052b5 <flatcc_builder_extend_string@@Base+0x65>
  4052b1:	xor    eax,eax
  4052b3:	jmp    4052e4 <flatcc_builder_extend_string@@Base+0x94>
  4052b5:	mov    ecx,DWORD PTR [rbx+0x28]
  4052b8:	mov    rax,rcx
  4052bb:	add    rax,QWORD PTR [rbx+0x68]
  4052bf:	mov    QWORD PTR [rbx+0x18],rax
  4052c3:	mov    edx,DWORD PTR [rbx+0x70]
  4052c6:	sub    edx,ecx
  4052c8:	cmp    edx,0xfffffffc
  4052cb:	mov    ecx,0xfffffffc
  4052d0:	cmovb  ecx,edx
  4052d3:	mov    DWORD PTR [rbx+0x24],ecx
  4052d6:	mov    rcx,QWORD PTR [rbx+0x30]
  4052da:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4052e1:	add    rax,r14
  4052e4:	add    rsp,0x8
  4052e8:	pop    rbx
  4052e9:	pop    r14
  4052eb:	ret    
  4052ec:	lea    rdi,[rip+0x47ee]        # 409ae1 <flatcc_builder_padding_base@@Base+0x7c1>
  4052f3:	lea    rsi,[rip+0x42a8]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4052fa:	lea    rcx,[rip+0x480c]        # 409b0d <flatcc_builder_padding_base@@Base+0x7ed>
  405301:	mov    edx,0x3bd
  405306:	call   403070 <__assert_fail@plt>
  40530b:	lea    rdi,[rip+0x5359]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  405312:	lea    rsi,[rip+0x4289]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405319:	lea    rcx,[rip+0x5366]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  405320:	mov    edx,0x37c
  405325:	call   403070 <__assert_fail@plt>
  40532a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405330 <flatcc_builder_append_string@@Base>:
  405330:	push   r15
  405332:	push   r14
  405334:	push   r13
  405336:	push   r12
  405338:	push   rbx
  405339:	mov    rax,QWORD PTR [rdi+0x30]
  40533d:	movzx  ecx,WORD PTR [rax+0xe]
  405341:	cmp    ecx,0x6
  405344:	jne    4053f1 <flatcc_builder_append_string@@Base+0xc1>
  40534a:	mov    r15,rdx
  40534d:	mov    ecx,DWORD PTR [rax+0x14]
  405350:	add    ecx,r15d
  405353:	jb     405410 <flatcc_builder_append_string@@Base+0xe0>
  405359:	mov    r14,rsi
  40535c:	mov    rbx,rdi
  40535f:	mov    DWORD PTR [rax+0x14],ecx
  405362:	mov    r13d,DWORD PTR [rdi+0x20]
  405366:	lea    eax,[r15+r13*1]
  40536a:	mov    DWORD PTR [rdi+0x20],eax
  40536d:	cmp    eax,DWORD PTR [rdi+0x24]
  405370:	jae    40537d <flatcc_builder_append_string@@Base+0x4d>
  405372:	mov    r12,QWORD PTR [rbx+0x18]
  405376:	add    r12,r13
  405379:	jne    4053d6 <flatcc_builder_append_string@@Base+0xa6>
  40537b:	jmp    4053a0 <flatcc_builder_append_string@@Base+0x70>
  40537d:	add    eax,0x1
  405380:	lea    rsi,[rbx+0x68]
  405384:	mov    rdi,QWORD PTR [rbx+0x40]
  405388:	mov    edx,DWORD PTR [rbx+0x28]
  40538b:	add    rdx,rax
  40538e:	mov    ecx,0x1
  405393:	mov    r8d,0x1
  405399:	call   QWORD PTR [rbx+0x50]
  40539c:	test   eax,eax
  40539e:	je     4053a5 <flatcc_builder_append_string@@Base+0x75>
  4053a0:	xor    r12d,r12d
  4053a3:	jmp    4053e4 <flatcc_builder_append_string@@Base+0xb4>
  4053a5:	mov    eax,DWORD PTR [rbx+0x28]
  4053a8:	mov    r12,rax
  4053ab:	add    r12,QWORD PTR [rbx+0x68]
  4053af:	mov    QWORD PTR [rbx+0x18],r12
  4053b3:	mov    ecx,DWORD PTR [rbx+0x70]
  4053b6:	sub    ecx,eax
  4053b8:	cmp    ecx,0xfffffffc
  4053bb:	mov    eax,0xfffffffc
  4053c0:	cmovb  eax,ecx
  4053c3:	mov    DWORD PTR [rbx+0x24],eax
  4053c6:	mov    rax,QWORD PTR [rbx+0x30]
  4053ca:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4053d1:	add    r12,r13
  4053d4:	je     4053a0 <flatcc_builder_append_string@@Base+0x70>
  4053d6:	mov    edx,r15d
  4053d9:	mov    rdi,r12
  4053dc:	mov    rsi,r14
  4053df:	call   4030d0 <memcpy@plt>
  4053e4:	mov    rax,r12
  4053e7:	pop    rbx
  4053e8:	pop    r12
  4053ea:	pop    r13
  4053ec:	pop    r14
  4053ee:	pop    r15
  4053f0:	ret    
  4053f1:	lea    rdi,[rip+0x46e9]        # 409ae1 <flatcc_builder_padding_base@@Base+0x7c1>
  4053f8:	lea    rsi,[rip+0x41a3]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4053ff:	lea    rcx,[rip+0x4746]        # 409b4c <flatcc_builder_padding_base@@Base+0x82c>
  405406:	mov    edx,0x3c6
  40540b:	call   403070 <__assert_fail@plt>
  405410:	lea    rdi,[rip+0x5254]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  405417:	lea    rsi,[rip+0x4184]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40541e:	lea    rcx,[rip+0x5261]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  405425:	mov    edx,0x37c
  40542a:	call   403070 <__assert_fail@plt>
  40542f:	nop

0000000000405430 <flatcc_builder_append_string_str@@Base>:
  405430:	push   r14
  405432:	push   rbx
  405433:	push   rax
  405434:	mov    rbx,rsi
  405437:	mov    r14,rdi
  40543a:	mov    rdi,rsi
  40543d:	call   403050 <strlen@plt>
  405442:	mov    rdi,r14
  405445:	mov    rsi,rbx
  405448:	mov    rdx,rax
  40544b:	add    rsp,0x8
  40544f:	pop    rbx
  405450:	pop    r14
  405452:	jmp    405330 <flatcc_builder_append_string@@Base>
  405457:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405460 <flatcc_builder_append_string_strn@@Base>:
  405460:	push   r15
  405462:	push   r14
  405464:	push   rbx
  405465:	mov    rbx,rdx
  405468:	mov    r14,rsi
  40546b:	mov    r15,rdi
  40546e:	xor    esi,esi
  405470:	mov    rdi,r14
  405473:	call   4030a0 <memchr@plt>
  405478:	mov    rcx,rax
  40547b:	sub    rcx,r14
  40547e:	test   rax,rax
  405481:	cmovne rbx,rcx
  405485:	mov    rdi,r15
  405488:	mov    rsi,r14
  40548b:	mov    rdx,rbx
  40548e:	pop    rbx
  40548f:	pop    r14
  405491:	pop    r15
  405493:	jmp    405330 <flatcc_builder_append_string@@Base>
  405498:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004054a0 <flatcc_builder_truncate_vector@@Base>:
  4054a0:	push   rax
  4054a1:	mov    rcx,QWORD PTR [rdi+0x30]
  4054a5:	movzx  edx,WORD PTR [rcx+0xe]
  4054a9:	cmp    edx,0x4
  4054ac:	jne    4054e3 <flatcc_builder_truncate_vector@@Base+0x43>
  4054ae:	mov    rax,rsi
  4054b1:	mov    edx,DWORD PTR [rcx+0x14]
  4054b4:	cmp    rdx,rsi
  4054b7:	jb     405502 <flatcc_builder_truncate_vector@@Base+0x62>
  4054b9:	sub    edx,eax
  4054bb:	mov    DWORD PTR [rcx+0x14],edx
  4054be:	mov    rcx,QWORD PTR [rdi+0x30]
  4054c2:	imul   eax,DWORD PTR [rcx+0x10]
  4054c6:	mov    ecx,DWORD PTR [rdi+0x20]
  4054c9:	sub    ecx,eax
  4054cb:	mov    DWORD PTR [rdi+0x20],ecx
  4054ce:	add    rcx,QWORD PTR [rdi+0x18]
  4054d2:	xor    esi,esi
  4054d4:	mov    rdi,rcx
  4054d7:	mov    rdx,rax
  4054da:	call   403080 <memset@plt>
  4054df:	xor    eax,eax
  4054e1:	pop    rcx
  4054e2:	ret    
  4054e3:	lea    rdi,[rip+0x43f5]        # 4098df <flatcc_builder_padding_base@@Base+0x5bf>
  4054ea:	lea    rsi,[rip+0x40b1]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4054f1:	lea    rcx,[rip+0x46a1]        # 409b99 <flatcc_builder_padding_base@@Base+0x879>
  4054f8:	mov    edx,0x3d9
  4054fd:	call   403070 <__assert_fail@plt>
  405502:	lea    rdi,[rip+0x46cf]        # 409bd8 <flatcc_builder_padding_base@@Base+0x8b8>
  405509:	lea    rsi,[rip+0x4092]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405510:	lea    rcx,[rip+0x4682]        # 409b99 <flatcc_builder_padding_base@@Base+0x879>
  405517:	mov    edx,0x3da
  40551c:	call   403070 <__assert_fail@plt>
  405521:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40552b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405530 <flatcc_builder_truncate_offset_vector@@Base>:
  405530:	push   rax
  405531:	mov    rcx,QWORD PTR [rdi+0x30]
  405535:	movzx  edx,WORD PTR [rcx+0xe]
  405539:	cmp    edx,0x5
  40553c:	jne    405570 <flatcc_builder_truncate_offset_vector@@Base+0x40>
  40553e:	mov    rax,rsi
  405541:	mov    edx,DWORD PTR [rcx+0x14]
  405544:	sub    edx,eax
  405546:	jb     40558f <flatcc_builder_truncate_offset_vector@@Base+0x5f>
  405548:	mov    DWORD PTR [rcx+0x14],edx
  40554b:	mov    rcx,QWORD PTR [rdi+0x30]
  40554f:	imul   eax,DWORD PTR [rcx+0x10]
  405553:	mov    ecx,DWORD PTR [rdi+0x20]
  405556:	sub    ecx,eax
  405558:	mov    DWORD PTR [rdi+0x20],ecx
  40555b:	add    rcx,QWORD PTR [rdi+0x18]
  40555f:	xor    esi,esi
  405561:	mov    rdi,rcx
  405564:	mov    rdx,rax
  405567:	call   403080 <memset@plt>
  40556c:	xor    eax,eax
  40556e:	pop    rcx
  40556f:	ret    
  405570:	lea    rdi,[rip+0x4461]        # 4099d8 <flatcc_builder_padding_base@@Base+0x6b8>
  405577:	lea    rsi,[rip+0x4024]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40557e:	lea    rcx,[rip+0x4677]        # 409bfc <flatcc_builder_padding_base@@Base+0x8dc>
  405585:	mov    edx,0x3e2
  40558a:	call   403070 <__assert_fail@plt>
  40558f:	lea    rdi,[rip+0x46ac]        # 409c42 <flatcc_builder_padding_base@@Base+0x922>
  405596:	lea    rsi,[rip+0x4005]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40559d:	lea    rcx,[rip+0x4658]        # 409bfc <flatcc_builder_padding_base@@Base+0x8dc>
  4055a4:	mov    edx,0x3e3
  4055a9:	call   403070 <__assert_fail@plt>
  4055ae:	xchg   ax,ax

00000000004055b0 <flatcc_builder_truncate_string@@Base>:
  4055b0:	push   rax
  4055b1:	mov    rax,QWORD PTR [rdi+0x30]
  4055b5:	movzx  ecx,WORD PTR [rax+0xe]
  4055b9:	cmp    ecx,0x6
  4055bc:	jne    4055e7 <flatcc_builder_truncate_string@@Base+0x37>
  4055be:	mov    ecx,DWORD PTR [rax+0x14]
  4055c1:	cmp    rcx,rsi
  4055c4:	jb     405606 <flatcc_builder_truncate_string@@Base+0x56>
  4055c6:	sub    ecx,esi
  4055c8:	mov    DWORD PTR [rax+0x14],ecx
  4055cb:	mov    eax,DWORD PTR [rdi+0x20]
  4055ce:	sub    eax,esi
  4055d0:	mov    DWORD PTR [rdi+0x20],eax
  4055d3:	add    rax,QWORD PTR [rdi+0x18]
  4055d7:	mov    edx,esi
  4055d9:	xor    esi,esi
  4055db:	mov    rdi,rax
  4055de:	call   403080 <memset@plt>
  4055e3:	xor    eax,eax
  4055e5:	pop    rcx
  4055e6:	ret    
  4055e7:	lea    rdi,[rip+0x44f3]        # 409ae1 <flatcc_builder_padding_base@@Base+0x7c1>
  4055ee:	lea    rsi,[rip+0x3fad]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4055f5:	lea    rcx,[rip+0x4681]        # 409c7d <flatcc_builder_padding_base@@Base+0x95d>
  4055fc:	mov    edx,0x3eb
  405601:	call   403070 <__assert_fail@plt>
  405606:	lea    rdi,[rip+0x46af]        # 409cbc <flatcc_builder_padding_base@@Base+0x99c>
  40560d:	lea    rsi,[rip+0x3f8e]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405614:	lea    rcx,[rip+0x4662]        # 409c7d <flatcc_builder_padding_base@@Base+0x95d>
  40561b:	mov    edx,0x3ec
  405620:	call   403070 <__assert_fail@plt>
  405625:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40562f:	nop

0000000000405630 <flatcc_builder_start_vector@@Base>:
  405630:	push   r15
  405632:	push   r14
  405634:	push   rbx
  405635:	mov    r14,rcx
  405638:	mov    r15,rsi
  40563b:	mov    rbx,rdi
  40563e:	cmp    edx,0x4
  405641:	mov    esi,0x4
  405646:	cmova  esi,edx
  405649:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40564e:	mov    ecx,eax
  405650:	mov    eax,0xffffffff
  405655:	test   ecx,ecx
  405657:	jne    4056a5 <flatcc_builder_start_vector@@Base+0x75>
  405659:	mov    rax,QWORD PTR [rbx+0x30]
  40565d:	mov    DWORD PTR [rax+0x10],r15d
  405661:	mov    rax,QWORD PTR [rbx+0x30]
  405665:	mov    DWORD PTR [rax+0x14],0x0
  40566c:	mov    rax,QWORD PTR [rbx+0x30]
  405670:	mov    DWORD PTR [rax+0x18],r14d
  405674:	mov    rax,QWORD PTR [rbx+0x30]
  405678:	mov    WORD PTR [rax+0xe],0x4
  40567e:	mov    ecx,DWORD PTR [rbx+0x28]
  405681:	mov    edx,DWORD PTR [rbx+0x70]
  405684:	sub    edx,ecx
  405686:	add    rcx,QWORD PTR [rbx+0x68]
  40568a:	mov    QWORD PTR [rbx+0x18],rcx
  40568e:	cmp    edx,0xfffffffc
  405691:	mov    ecx,0xfffffffc
  405696:	cmovb  ecx,edx
  405699:	mov    DWORD PTR [rbx+0x24],ecx
  40569c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4056a3:	xor    eax,eax
  4056a5:	pop    rbx
  4056a6:	pop    r14
  4056a8:	pop    r15
  4056aa:	ret    
  4056ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004056b0 <flatcc_builder_start_offset_vector@@Base>:
  4056b0:	push   rbx
  4056b1:	mov    rbx,rdi
  4056b4:	mov    esi,0x4
  4056b9:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  4056be:	mov    ecx,eax
  4056c0:	mov    eax,0xffffffff
  4056c5:	test   ecx,ecx
  4056c7:	je     4056cb <flatcc_builder_start_offset_vector@@Base+0x1b>
  4056c9:	pop    rbx
  4056ca:	ret    
  4056cb:	mov    rax,QWORD PTR [rbx+0x30]
  4056cf:	mov    DWORD PTR [rax+0x10],0x4
  4056d6:	mov    rax,QWORD PTR [rbx+0x30]
  4056da:	mov    DWORD PTR [rax+0x14],0x0
  4056e1:	mov    rax,QWORD PTR [rbx+0x30]
  4056e5:	mov    WORD PTR [rax+0xe],0x5
  4056eb:	mov    ecx,DWORD PTR [rbx+0x28]
  4056ee:	mov    edx,DWORD PTR [rbx+0x70]
  4056f1:	sub    edx,ecx
  4056f3:	add    rcx,QWORD PTR [rbx+0x68]
  4056f7:	mov    QWORD PTR [rbx+0x18],rcx
  4056fb:	cmp    edx,0xfffffffc
  4056fe:	mov    ecx,0xfffffffc
  405703:	cmovb  ecx,edx
  405706:	mov    DWORD PTR [rbx+0x24],ecx
  405709:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405710:	xor    eax,eax
  405712:	pop    rbx
  405713:	ret    
  405714:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40571e:	xchg   ax,ax

0000000000405720 <flatcc_builder_create_offset_vector@@Base>:
  405720:	push   r15
  405722:	push   r14
  405724:	push   r12
  405726:	push   rbx
  405727:	push   rax
  405728:	mov    r14,rdx
  40572b:	mov    r15,rsi
  40572e:	mov    rbx,rdi
  405731:	mov    esi,0x4
  405736:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40573b:	test   eax,eax
  40573d:	je     40574d <flatcc_builder_create_offset_vector@@Base+0x2d>
  40573f:	xor    eax,eax
  405741:	add    rsp,0x8
  405745:	pop    rbx
  405746:	pop    r12
  405748:	pop    r14
  40574a:	pop    r15
  40574c:	ret    
  40574d:	mov    rax,QWORD PTR [rbx+0x30]
  405751:	mov    DWORD PTR [rax+0x10],0x4
  405758:	mov    rax,QWORD PTR [rbx+0x30]
  40575c:	mov    DWORD PTR [rax+0x14],0x0
  405763:	mov    rax,QWORD PTR [rbx+0x30]
  405767:	mov    WORD PTR [rax+0xe],0x5
  40576d:	mov    ecx,DWORD PTR [rbx+0x28]
  405770:	mov    edx,DWORD PTR [rbx+0x70]
  405773:	sub    edx,ecx
  405775:	add    rcx,QWORD PTR [rbx+0x68]
  405779:	mov    QWORD PTR [rbx+0x18],rcx
  40577d:	cmp    edx,0xfffffffc
  405780:	mov    ecx,0xfffffffc
  405785:	cmovb  ecx,edx
  405788:	mov    DWORD PTR [rbx+0x24],ecx
  40578b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405792:	mov    ecx,DWORD PTR [rax+0x14]
  405795:	add    ecx,r14d
  405798:	jb     405849 <flatcc_builder_create_offset_vector@@Base+0x129>
  40579e:	cmp    ecx,0x40000000
  4057a4:	jae    405849 <flatcc_builder_create_offset_vector@@Base+0x129>
  4057aa:	mov    DWORD PTR [rax+0x14],ecx
  4057ad:	mov    r12d,DWORD PTR [rbx+0x20]
  4057b1:	lea    eax,[r12+r14*4]
  4057b5:	mov    DWORD PTR [rbx+0x20],eax
  4057b8:	cmp    eax,DWORD PTR [rbx+0x24]
  4057bb:	jae    4057cb <flatcc_builder_create_offset_vector@@Base+0xab>
  4057bd:	mov    rdi,QWORD PTR [rbx+0x18]
  4057c1:	add    rdi,r12
  4057c4:	jne    405827 <flatcc_builder_create_offset_vector@@Base+0x107>
  4057c6:	jmp    40573f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4057cb:	add    eax,0x1
  4057ce:	lea    rsi,[rbx+0x68]
  4057d2:	mov    rdi,QWORD PTR [rbx+0x40]
  4057d6:	mov    edx,DWORD PTR [rbx+0x28]
  4057d9:	add    rdx,rax
  4057dc:	mov    ecx,0x1
  4057e1:	mov    r8d,0x1
  4057e7:	call   QWORD PTR [rbx+0x50]
  4057ea:	test   eax,eax
  4057ec:	jne    40573f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4057f2:	mov    eax,DWORD PTR [rbx+0x28]
  4057f5:	mov    rdi,rax
  4057f8:	add    rdi,QWORD PTR [rbx+0x68]
  4057fc:	mov    QWORD PTR [rbx+0x18],rdi
  405800:	mov    ecx,DWORD PTR [rbx+0x70]
  405803:	sub    ecx,eax
  405805:	cmp    ecx,0xfffffffc
  405808:	mov    eax,0xfffffffc
  40580d:	cmovb  eax,ecx
  405810:	mov    DWORD PTR [rbx+0x24],eax
  405813:	mov    rax,QWORD PTR [rbx+0x30]
  405817:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40581e:	add    rdi,r12
  405821:	je     40573f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405827:	shl    r14,0x2
  40582b:	mov    rsi,r15
  40582e:	mov    rdx,r14
  405831:	call   4030d0 <memcpy@plt>
  405836:	mov    rdi,rbx
  405839:	add    rsp,0x8
  40583d:	pop    rbx
  40583e:	pop    r12
  405840:	pop    r14
  405842:	pop    r15
  405844:	jmp    405870 <flatcc_builder_end_offset_vector@@Base>
  405849:	lea    rdi,[rip+0x4e1b]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  405850:	lea    rsi,[rip+0x3d4b]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405857:	lea    rcx,[rip+0x4e28]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  40585e:	mov    edx,0x37c
  405863:	call   403070 <__assert_fail@plt>
  405868:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405870 <flatcc_builder_end_offset_vector@@Base>:
  405870:	push   rbp
  405871:	push   rbx
  405872:	push   rax
  405873:	mov    rax,QWORD PTR [rdi+0x30]
  405877:	movzx  ecx,WORD PTR [rax+0xe]
  40587b:	cmp    ecx,0x5
  40587e:	jne    40590d <flatcc_builder_end_offset_vector@@Base+0x9d>
  405884:	mov    rbx,rdi
  405887:	mov    rsi,QWORD PTR [rdi+0x18]
  40588b:	mov    edx,DWORD PTR [rax+0x14]
  40588e:	xor    ecx,ecx
  405890:	call   4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405895:	mov    ebp,eax
  405897:	test   eax,eax
  405899:	je     405904 <flatcc_builder_end_offset_vector@@Base+0x94>
  40589b:	mov    rdi,QWORD PTR [rbx+0x18]
  40589f:	mov    edx,DWORD PTR [rbx+0x20]
  4058a2:	xor    esi,esi
  4058a4:	call   403080 <memset@plt>
  4058a9:	mov    rax,QWORD PTR [rbx+0x30]
  4058ad:	mov    ecx,DWORD PTR [rax+0x8]
  4058b0:	mov    DWORD PTR [rbx+0x20],ecx
  4058b3:	mov    ecx,DWORD PTR [rax]
  4058b5:	mov    DWORD PTR [rbx+0x28],ecx
  4058b8:	mov    edx,DWORD PTR [rax+0x4]
  4058bb:	mov    rsi,rcx
  4058be:	add    rsi,QWORD PTR [rbx+0x68]
  4058c2:	mov    QWORD PTR [rbx+0x18],rsi
  4058c6:	mov    esi,DWORD PTR [rbx+0x70]
  4058c9:	sub    esi,ecx
  4058cb:	cmp    esi,edx
  4058cd:	cmova  esi,edx
  4058d0:	mov    DWORD PTR [rbx+0x24],esi
  4058d3:	movzx  ecx,WORD PTR [rbx+0xea]
  4058da:	cmp    WORD PTR [rbx+0xe8],cx
  4058e1:	jae    4058ea <flatcc_builder_end_offset_vector@@Base+0x7a>
  4058e3:	mov    WORD PTR [rbx+0xe8],cx
  4058ea:	movzx  ecx,WORD PTR [rax+0xc]
  4058ee:	mov    WORD PTR [rbx+0xea],cx
  4058f5:	add    rax,0xffffffffffffffdc
  4058f9:	mov    QWORD PTR [rbx+0x30],rax
  4058fd:	add    DWORD PTR [rbx+0x104],0xffffffff
  405904:	mov    eax,ebp
  405906:	add    rsp,0x8
  40590a:	pop    rbx
  40590b:	pop    rbp
  40590c:	ret    
  40590d:	lea    rdi,[rip+0x40c4]        # 4099d8 <flatcc_builder_padding_base@@Base+0x6b8>
  405914:	lea    rsi,[rip+0x3c87]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40591b:	lea    rcx,[rip+0x46e5]        # 40a007 <flatcc_builder_padding_base@@Base+0xce7>
  405922:	mov    edx,0x5c8
  405927:	call   403070 <__assert_fail@plt>
  40592c:	nop    DWORD PTR [rax+0x0]

0000000000405930 <flatcc_builder_start_string@@Base>:
  405930:	push   rbx
  405931:	mov    rbx,rdi
  405934:	mov    esi,0x1
  405939:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40593e:	mov    ecx,eax
  405940:	mov    eax,0xffffffff
  405945:	test   ecx,ecx
  405947:	je     40594b <flatcc_builder_start_string@@Base+0x1b>
  405949:	pop    rbx
  40594a:	ret    
  40594b:	mov    rax,QWORD PTR [rbx+0x30]
  40594f:	mov    DWORD PTR [rax+0x10],0x1
  405956:	mov    rax,QWORD PTR [rbx+0x30]
  40595a:	mov    DWORD PTR [rax+0x14],0x0
  405961:	mov    rax,QWORD PTR [rbx+0x30]
  405965:	mov    WORD PTR [rax+0xe],0x6
  40596b:	mov    ecx,DWORD PTR [rbx+0x28]
  40596e:	mov    edx,DWORD PTR [rbx+0x70]
  405971:	sub    edx,ecx
  405973:	add    rcx,QWORD PTR [rbx+0x68]
  405977:	mov    QWORD PTR [rbx+0x18],rcx
  40597b:	cmp    edx,0xfffffffc
  40597e:	mov    ecx,0xfffffffc
  405983:	cmovb  ecx,edx
  405986:	mov    DWORD PTR [rbx+0x24],ecx
  405989:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405990:	xor    eax,eax
  405992:	pop    rbx
  405993:	ret    
  405994:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40599e:	xchg   ax,ax

00000000004059a0 <flatcc_builder_reserve_table@@Base>:
  4059a0:	push   r15
  4059a2:	push   r14
  4059a4:	push   rbx
  4059a5:	test   esi,esi
  4059a7:	js     405a54 <flatcc_builder_reserve_table@@Base+0xb4>
  4059ad:	mov    r14d,esi
  4059b0:	mov    r15,rdi
  4059b3:	mov    rax,QWORD PTR [rdi+0x30]
  4059b7:	movzx  ebx,WORD PTR [rax+0x1c]
  4059bb:	add    ebx,ebx
  4059bd:	add    ebx,DWORD PTR [rax+0x10]
  4059c0:	lea    edx,[r14+r14*1]
  4059c4:	add    edx,0x4
  4059c7:	add    rdx,rbx
  4059ca:	cmp    rdx,QWORD PTR [rdi+0x60]
  4059ce:	jbe    4059ec <flatcc_builder_reserve_table@@Base+0x4c>
  4059d0:	lea    rsi,[r15+0x58]
  4059d4:	mov    rdi,QWORD PTR [r15+0x40]
  4059d8:	mov    ecx,0x1
  4059dd:	xor    r8d,r8d
  4059e0:	call   QWORD PTR [r15+0x50]
  4059e4:	test   eax,eax
  4059e6:	jne    405a73 <flatcc_builder_reserve_table@@Base+0xd3>
  4059ec:	add    rbx,QWORD PTR [r15+0x58]
  4059f0:	mov    QWORD PTR [r15+0x8],rbx
  4059f4:	je     405a49 <flatcc_builder_reserve_table@@Base+0xa9>
  4059f6:	add    r14d,r14d
  4059f9:	add    rbx,0x4
  4059fd:	mov    QWORD PTR [r15+0x8],rbx
  405a01:	mov    rax,QWORD PTR [r15+0x30]
  405a05:	mov    ebx,DWORD PTR [rax+0x14]
  405a08:	or     r14d,0x1
  405a0c:	add    r14,rbx
  405a0f:	cmp    r14,QWORD PTR [r15+0x90]
  405a16:	jbe    405a36 <flatcc_builder_reserve_table@@Base+0x96>
  405a18:	lea    rsi,[r15+0x88]
  405a1f:	mov    rdi,QWORD PTR [r15+0x40]
  405a23:	xor    ecx,ecx
  405a25:	mov    r8d,0x3
  405a2b:	mov    rdx,r14
  405a2e:	call   QWORD PTR [r15+0x50]
  405a32:	test   eax,eax
  405a34:	jne    405a73 <flatcc_builder_reserve_table@@Base+0xd3>
  405a36:	xor    eax,eax
  405a38:	add    rbx,QWORD PTR [r15+0x88]
  405a3f:	mov    QWORD PTR [r15],rbx
  405a42:	sete   al
  405a45:	neg    eax
  405a47:	jmp    405a4e <flatcc_builder_reserve_table@@Base+0xae>
  405a49:	mov    eax,0xffffffff
  405a4e:	pop    rbx
  405a4f:	pop    r14
  405a51:	pop    r15
  405a53:	ret    
  405a54:	lea    rdi,[rip+0x42c4]        # 409d1f <flatcc_builder_padding_base@@Base+0x9ff>
  405a5b:	lea    rsi,[rip+0x3b40]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405a62:	lea    rcx,[rip+0x4275]        # 409cde <flatcc_builder_padding_base@@Base+0x9be>
  405a69:	mov    edx,0x429
  405a6e:	call   403070 <__assert_fail@plt>
  405a73:	lea    rdi,[rip+0x4ce8]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  405a7a:	lea    rsi,[rip+0x3b21]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405a81:	lea    rcx,[rip+0x4b14]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  405a88:	mov    edx,0x134
  405a8d:	call   403070 <__assert_fail@plt>
  405a92:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a9c:	nop    DWORD PTR [rax+0x0]

0000000000405aa0 <flatcc_builder_start_table@@Base>:
  405aa0:	push   rbp
  405aa1:	push   r15
  405aa3:	push   r14
  405aa5:	push   rbx
  405aa6:	push   rax
  405aa7:	mov    r15d,esi
  405aaa:	mov    rbx,rdi
  405aad:	mov    esi,0x4
  405ab2:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  405ab7:	mov    r14d,0xffffffff
  405abd:	test   eax,eax
  405abf:	je     405acf <flatcc_builder_start_table@@Base+0x2f>
  405ac1:	mov    eax,r14d
  405ac4:	add    rsp,0x8
  405ac8:	pop    rbx
  405ac9:	pop    r14
  405acb:	pop    r15
  405acd:	pop    rbp
  405ace:	ret    
  405acf:	mov    eax,DWORD PTR [rbx+0x8]
  405ad2:	sub    eax,DWORD PTR [rbx+0x58]
  405ad5:	mov    rcx,QWORD PTR [rbx+0x30]
  405ad9:	mov    DWORD PTR [rcx+0x10],eax
  405adc:	mov    eax,DWORD PTR [rbx]
  405ade:	sub    eax,DWORD PTR [rbx+0x88]
  405ae4:	mov    rcx,QWORD PTR [rbx+0x30]
  405ae8:	mov    DWORD PTR [rcx+0x14],eax
  405aeb:	mov    eax,DWORD PTR [rbx+0x14]
  405aee:	mov    rcx,QWORD PTR [rbx+0x30]
  405af2:	mov    DWORD PTR [rcx+0x18],eax
  405af5:	movzx  eax,WORD PTR [rbx+0x10]
  405af9:	mov    rcx,QWORD PTR [rbx+0x30]
  405afd:	mov    WORD PTR [rcx+0x1c],ax
  405b01:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405b08:	mov    WORD PTR [rbx+0x10],0x0
  405b0e:	mov    rax,QWORD PTR [rbx+0x30]
  405b12:	mov    WORD PTR [rax+0xe],0x3
  405b18:	movzx  ebp,WORD PTR [rax+0x1c]
  405b1c:	add    ebp,ebp
  405b1e:	add    ebp,DWORD PTR [rax+0x10]
  405b21:	lea    edx,[r15+r15*1]
  405b25:	add    edx,0x4
  405b28:	add    rdx,rbp
  405b2b:	cmp    rdx,QWORD PTR [rbx+0x60]
  405b2f:	jbe    405b4c <flatcc_builder_start_table@@Base+0xac>
  405b31:	lea    rsi,[rbx+0x58]
  405b35:	mov    rdi,QWORD PTR [rbx+0x40]
  405b39:	mov    ecx,0x1
  405b3e:	xor    r8d,r8d
  405b41:	call   QWORD PTR [rbx+0x50]
  405b44:	test   eax,eax
  405b46:	jne    405be0 <flatcc_builder_start_table@@Base+0x140>
  405b4c:	add    rbp,QWORD PTR [rbx+0x58]
  405b50:	mov    QWORD PTR [rbx+0x8],rbp
  405b54:	je     405ac1 <flatcc_builder_start_table@@Base+0x21>
  405b5a:	add    r15d,r15d
  405b5d:	add    rbp,0x4
  405b61:	mov    QWORD PTR [rbx+0x8],rbp
  405b65:	mov    rax,QWORD PTR [rbx+0x30]
  405b69:	mov    ebp,DWORD PTR [rax+0x14]
  405b6c:	or     r15d,0x1
  405b70:	add    r15,rbp
  405b73:	cmp    r15,QWORD PTR [rbx+0x90]
  405b7a:	jbe    405b99 <flatcc_builder_start_table@@Base+0xf9>
  405b7c:	lea    rsi,[rbx+0x88]
  405b83:	mov    rdi,QWORD PTR [rbx+0x40]
  405b87:	xor    ecx,ecx
  405b89:	mov    r8d,0x3
  405b8f:	mov    rdx,r15
  405b92:	call   QWORD PTR [rbx+0x50]
  405b95:	test   eax,eax
  405b97:	jne    405be0 <flatcc_builder_start_table@@Base+0x140>
  405b99:	add    rbp,QWORD PTR [rbx+0x88]
  405ba0:	mov    QWORD PTR [rbx],rbp
  405ba3:	je     405ac1 <flatcc_builder_start_table@@Base+0x21>
  405ba9:	mov    eax,DWORD PTR [rbx+0x28]
  405bac:	mov    rcx,rax
  405baf:	add    rcx,QWORD PTR [rbx+0x68]
  405bb3:	mov    QWORD PTR [rbx+0x18],rcx
  405bb7:	mov    ecx,DWORD PTR [rbx+0x70]
  405bba:	sub    ecx,eax
  405bbc:	cmp    ecx,0xfffc
  405bc2:	mov    eax,0xfffc
  405bc7:	cmovb  eax,ecx
  405bca:	mov    DWORD PTR [rbx+0x24],eax
  405bcd:	mov    rax,QWORD PTR [rbx+0x30]
  405bd1:	mov    DWORD PTR [rax+0x4],0xfffc
  405bd8:	xor    r14d,r14d
  405bdb:	jmp    405ac1 <flatcc_builder_start_table@@Base+0x21>
  405be0:	lea    rdi,[rip+0x4b7b]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  405be7:	lea    rsi,[rip+0x39b4]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405bee:	lea    rcx,[rip+0x49a7]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  405bf5:	mov    edx,0x134
  405bfa:	call   403070 <__assert_fail@plt>
  405bff:	nop

0000000000405c00 <flatcc_builder_create_vtable@@Base>:
  405c00:	push   r14
  405c02:	push   rbx
  405c03:	sub    rsp,0x98
  405c0a:	mov    r14,rdi
  405c0d:	mov    QWORD PTR [rsp+0x8],0x0
  405c16:	mov    DWORD PTR [rsp+0x10],0x0
  405c1e:	test   dx,dx
  405c21:	je     405c87 <flatcc_builder_create_vtable@@Base+0x87>
  405c23:	movzx  r8d,dx
  405c27:	mov    QWORD PTR [rsp+0x8],r8
  405c2c:	mov    QWORD PTR [rsp+0x18],rsi
  405c31:	mov    QWORD PTR [rsp+0x20],r8
  405c36:	mov    DWORD PTR [rsp+0x10],0x1
  405c3e:	mov    edx,0x1
  405c43:	cmp    DWORD PTR [r14+0x100],0x0
  405c4b:	jne    405c96 <flatcc_builder_create_vtable@@Base+0x96>
  405c4d:	cmp    DWORD PTR [r14+0x124],0x0
  405c55:	jne    405c96 <flatcc_builder_create_vtable@@Base+0x96>
  405c57:	mov    ebx,DWORD PTR [r14+0xf4]
  405c5e:	lea    eax,[r8+rbx*1]
  405c62:	mov    DWORD PTR [r14+0xf4],eax
  405c69:	mov    rdi,QWORD PTR [r14+0x38]
  405c6d:	lea    rsi,[rsp+0x18]
  405c72:	mov    ecx,ebx
  405c74:	call   QWORD PTR [r14+0x48]
  405c78:	test   eax,eax
  405c7a:	jne    405d2b <flatcc_builder_create_vtable@@Base+0x12b>
  405c80:	add    ebx,0x1
  405c83:	jne    405ce0 <flatcc_builder_create_vtable@@Base+0xe0>
  405c85:	jmp    405cde <flatcc_builder_create_vtable@@Base+0xde>
  405c87:	xor    edx,edx
  405c89:	xor    r8d,r8d
  405c8c:	cmp    DWORD PTR [r14+0x100],0x0
  405c94:	je     405c4d <flatcc_builder_create_vtable@@Base+0x4d>
  405c96:	cmp    r8,0x11
  405c9a:	setb   al
  405c9d:	lea    rcx,[r8-0x10]
  405ca1:	shr    rcx,0x20
  405ca5:	sete   cl
  405ca8:	test   r8d,r8d
  405cab:	je     405ced <flatcc_builder_create_vtable@@Base+0xed>
  405cad:	or     al,cl
  405caf:	je     405ced <flatcc_builder_create_vtable@@Base+0xed>
  405cb1:	mov    ebx,DWORD PTR [r14+0xf0]
  405cb8:	sub    ebx,r8d
  405cbb:	mov    rdi,QWORD PTR [r14+0x38]
  405cbf:	lea    rsi,[rsp+0x18]
  405cc4:	mov    ecx,ebx
  405cc6:	call   QWORD PTR [r14+0x48]
  405cca:	test   eax,eax
  405ccc:	jne    405d0c <flatcc_builder_create_vtable@@Base+0x10c>
  405cce:	mov    DWORD PTR [r14+0xf0],ebx
  405cd5:	test   ebx,ebx
  405cd7:	je     405cde <flatcc_builder_create_vtable@@Base+0xde>
  405cd9:	add    ebx,0x1
  405cdc:	jmp    405ce0 <flatcc_builder_create_vtable@@Base+0xe0>
  405cde:	xor    ebx,ebx
  405ce0:	mov    eax,ebx
  405ce2:	add    rsp,0x98
  405ce9:	pop    rbx
  405cea:	pop    r14
  405cec:	ret    
  405ced:	lea    rdi,[rip+0x4a6e]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  405cf4:	lea    rsi,[rip+0x38a7]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405cfb:	lea    rcx,[rip+0x491f]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  405d02:	mov    edx,0x287
  405d07:	call   403070 <__assert_fail@plt>
  405d0c:	lea    rdi,[rip+0x4a4f]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  405d13:	lea    rsi,[rip+0x3888]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405d1a:	lea    rcx,[rip+0x4900]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  405d21:	mov    edx,0x28b
  405d26:	call   403070 <__assert_fail@plt>
  405d2b:	lea    rdi,[rip+0x4a30]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  405d32:	lea    rsi,[rip+0x3869]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  405d39:	lea    rcx,[rip+0x499d]        # 40a6dd <flatcc_builder_padding_base@@Base+0x13bd>
  405d40:	mov    edx,0x2a5
  405d45:	call   403070 <__assert_fail@plt>
  405d4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405d50 <flatcc_builder_create_cached_vtable@@Base>:
  405d50:	push   rbp
  405d51:	push   r15
  405d53:	push   r14
  405d55:	push   r13
  405d57:	push   r12
  405d59:	push   rbx
  405d5a:	sub    rsp,0x28
  405d5e:	mov    r15d,ecx
  405d61:	mov    r8d,edx
  405d64:	mov    QWORD PTR [rsp+0x18],rsi
  405d69:	mov    r13,rdi
  405d6c:	mov    rax,QWORD PTR [rdi+0xd8]
  405d73:	test   rax,rax
  405d76:	je     405e4a <flatcc_builder_create_cached_vtable@@Base+0xfa>
  405d7c:	mov    ecx,0x20
  405d81:	sub    ecx,eax
  405d83:	shrx   r15d,r15d,ecx
  405d88:	shl    r15,0x2
  405d8c:	add    r15,QWORD PTR [r13+0xa8]
  405d93:	je     405f1a <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  405d99:	mov    ebp,DWORD PTR [r15]
  405d9c:	test   ebp,ebp
  405d9e:	je     405f22 <flatcc_builder_create_cached_vtable@@Base+0x1d2>
  405da4:	mov    rbx,QWORD PTR [r13+0x78]
  405da8:	mov    QWORD PTR [rsp+0x10],r13
  405dad:	mov    r13,QWORD PTR [r13+0xb8]
  405db4:	movzx  eax,r8w
  405db8:	mov    QWORD PTR [rsp+0x20],rax
  405dbd:	xor    eax,eax
  405dbf:	mov    QWORD PTR [rsp],rax
  405dc3:	mov    QWORD PTR [rsp+0x8],r15
  405dc8:	mov    r14,r15
  405dcb:	nop    DWORD PTR [rax+rax*1+0x0]
  405dd0:	mov    eax,ebp
  405dd2:	lea    r15,[rax+r13*1]
  405dd6:	mov    esi,DWORD PTR [r13+rax*1+0x8]
  405ddb:	cmp    WORD PTR [rbx+rsi*1],r8w
  405de0:	jne    405dfe <flatcc_builder_create_cached_vtable@@Base+0xae>
  405de2:	add    rsi,rbx
  405de5:	mov    rdi,QWORD PTR [rsp+0x18]
  405dea:	mov    rdx,QWORD PTR [rsp+0x20]
  405def:	mov    r12d,r8d
  405df2:	call   4030b0 <memcmp@plt>
  405df7:	mov    r8d,r12d
  405dfa:	test   eax,eax
  405dfc:	je     405e0f <flatcc_builder_create_cached_vtable@@Base+0xbf>
  405dfe:	mov    ebp,DWORD PTR [r15+0xc]
  405e02:	add    r15,0xc
  405e06:	mov    r14,r15
  405e09:	test   ebp,ebp
  405e0b:	jne    405dd0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405e0d:	jmp    405e3b <flatcc_builder_create_cached_vtable@@Base+0xeb>
  405e0f:	mov    eax,DWORD PTR [r15+0x4]
  405e13:	mov    rcx,QWORD PTR [rsp+0x10]
  405e18:	cmp    eax,DWORD PTR [rcx+0x100]
  405e1e:	je     406084 <flatcc_builder_create_cached_vtable@@Base+0x334>
  405e24:	lea    r14,[r15+0xc]
  405e28:	mov    ebp,DWORD PTR [r15+0xc]
  405e2c:	mov    rax,r15
  405e2f:	mov    QWORD PTR [rsp],r15
  405e33:	test   ebp,ebp
  405e35:	jne    405dd0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405e37:	mov    QWORD PTR [rsp],r15
  405e3b:	mov    r13,QWORD PTR [rsp+0x10]
  405e40:	mov    r15,QWORD PTR [rsp+0x8]
  405e45:	jmp    405f28 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
  405e4a:	cmp    DWORD PTR [r13+0xe4],0x0
  405e52:	jne    4060c1 <flatcc_builder_create_cached_vtable@@Base+0x371>
  405e58:	lea    rbx,[r13+0xb8]
  405e5f:	cmp    QWORD PTR [r13+0xc0],0xf
  405e67:	ja     405e8f <flatcc_builder_create_cached_vtable@@Base+0x13f>
  405e69:	mov    rdi,QWORD PTR [r13+0x40]
  405e6d:	mov    edx,0x10
  405e72:	xor    ecx,ecx
  405e74:	mov    ebp,r8d
  405e77:	mov    r8d,0x6
  405e7d:	mov    rsi,rbx
  405e80:	call   QWORD PTR [r13+0x50]
  405e84:	mov    r8d,ebp
  405e87:	test   eax,eax
  405e89:	jne    4060a2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  405e8f:	xor    r12d,r12d
  405e92:	cmp    QWORD PTR [rbx],0x0
  405e96:	je     40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  405e9c:	mov    ebx,r8d
  405e9f:	lea    rsi,[r13+0xa8]
  405ea6:	mov    DWORD PTR [r13+0xe4],0x10
  405eb1:	mov    rdi,QWORD PTR [r13+0x40]
  405eb5:	mov    edx,0x100
  405eba:	mov    ecx,0x1
  405ebf:	mov    r8d,0x5
  405ec5:	call   QWORD PTR [r13+0x50]
  405ec9:	test   eax,eax
  405ecb:	jne    40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  405ed1:	mov    rax,QWORD PTR [r13+0xb0]
  405ed8:	mov    edx,0x100
  405edd:	nop    DWORD PTR [rax]
  405ee0:	mov    rcx,rdx
  405ee3:	lea    rdx,[rdx+rdx*1]
  405ee7:	cmp    rdx,rax
  405eea:	jbe    405ee0 <flatcc_builder_create_cached_vtable@@Base+0x190>
  405eec:	shr    rcx,0x2
  405ef0:	mov    rax,0xffffffffffffffff
  405ef7:	mov    edx,0x1
  405efc:	mov    r8d,ebx
  405eff:	nop
  405f00:	add    rax,0x1
  405f04:	shlx   rsi,rdx,rax
  405f09:	cmp    rsi,rcx
  405f0c:	jb     405f00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405f0e:	mov    QWORD PTR [r13+0xd8],rax
  405f15:	jmp    405d7c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  405f1a:	xor    r12d,r12d
  405f1d:	jmp    40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  405f22:	xor    eax,eax
  405f24:	mov    QWORD PTR [rsp],rax
  405f28:	mov    ebp,DWORD PTR [r13+0xe4]
  405f2f:	lea    rbx,[r13+0xb8]
  405f36:	lea    rdx,[rbp+0x10]
  405f3a:	cmp    rdx,QWORD PTR [r13+0xc0]
  405f41:	jbe    405f64 <flatcc_builder_create_cached_vtable@@Base+0x214>
  405f43:	mov    rdi,QWORD PTR [r13+0x40]
  405f47:	xor    ecx,ecx
  405f49:	mov    r14d,r8d
  405f4c:	mov    r8d,0x6
  405f52:	mov    rsi,rbx
  405f55:	call   QWORD PTR [r13+0x50]
  405f59:	mov    r8d,r14d
  405f5c:	test   eax,eax
  405f5e:	jne    4060a2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  405f64:	xor    r12d,r12d
  405f67:	add    rbp,QWORD PTR [rbx]
  405f6a:	je     40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  405f70:	mov    eax,DWORD PTR [r13+0xe4]
  405f77:	mov    ecx,DWORD PTR [r13+0x100]
  405f7e:	lea    edx,[rax+0x10]
  405f81:	mov    DWORD PTR [r13+0xe4],edx
  405f88:	mov    DWORD PTR [rbp+0x4],ecx
  405f8b:	mov    ecx,DWORD PTR [r15]
  405f8e:	mov    DWORD PTR [rbp+0xc],ecx
  405f91:	mov    DWORD PTR [r15],eax
  405f94:	movzx  ebx,r8w
  405f98:	mov    rdi,r13
  405f9b:	mov    rsi,QWORD PTR [rsp+0x18]
  405fa0:	mov    edx,ebx
  405fa2:	call   405c00 <flatcc_builder_create_vtable@@Base>
  405fa7:	mov    DWORD PTR [rbp+0x0],eax
  405faa:	test   eax,eax
  405fac:	je     40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  405fb2:	mov    rax,QWORD PTR [rsp]
  405fb6:	test   rax,rax
  405fb9:	je     405fc6 <flatcc_builder_create_cached_vtable@@Base+0x276>
  405fbb:	mov    eax,DWORD PTR [rax+0x8]
  405fbe:	mov    DWORD PTR [rbp+0x8],eax
  405fc1:	jmp    406066 <flatcc_builder_create_cached_vtable@@Base+0x316>
  405fc6:	mov    rax,QWORD PTR [r13+0x118]
  405fcd:	mov    r14d,DWORD PTR [r13+0xe0]
  405fd4:	test   rax,rax
  405fd7:	je     406014 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  405fd9:	lea    ecx,[r14+rbx*1]
  405fdd:	cmp    rax,rcx
  405fe0:	jae    406014 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  405fe2:	cmp    QWORD PTR [r13+0xd8],0x0
  405fea:	je     406066 <flatcc_builder_create_cached_vtable@@Base+0x316>
  405fec:	mov    rdi,QWORD PTR [r13+0xa8]
  405ff3:	mov    rdx,QWORD PTR [r13+0xb0]
  405ffa:	xor    esi,esi
  405ffc:	call   403080 <memset@plt>
  406001:	movabs rax,0x1000000000
  40600b:	mov    QWORD PTR [r13+0xe0],rax
  406012:	jmp    406066 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406014:	lea    r15,[r13+0x78]
  406018:	lea    rdx,[r14+rbx*1]
  40601c:	cmp    rdx,QWORD PTR [r13+0x80]
  406023:	jbe    40603c <flatcc_builder_create_cached_vtable@@Base+0x2ec>
  406025:	mov    rdi,QWORD PTR [r13+0x40]
  406029:	xor    ecx,ecx
  40602b:	mov    r8d,0x2
  406031:	mov    rsi,r15
  406034:	call   QWORD PTR [r13+0x50]
  406038:	test   eax,eax
  40603a:	jne    4060a2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  40603c:	add    r14,QWORD PTR [r15]
  40603f:	je     40607c <flatcc_builder_create_cached_vtable@@Base+0x32c>
  406041:	mov    eax,DWORD PTR [r13+0xe0]
  406048:	mov    DWORD PTR [rbp+0x8],eax
  40604b:	mov    ecx,ebx
  40604d:	add    ecx,eax
  40604f:	mov    DWORD PTR [r13+0xe0],ecx
  406056:	mov    rdi,r14
  406059:	mov    rsi,QWORD PTR [rsp+0x18]
  40605e:	mov    rdx,rbx
  406061:	call   4030d0 <memcpy@plt>
  406066:	mov    r12d,DWORD PTR [rbp+0x0]
  40606a:	mov    eax,r12d
  40606d:	add    rsp,0x28
  406071:	pop    rbx
  406072:	pop    r12
  406074:	pop    r13
  406076:	pop    r14
  406078:	pop    r15
  40607a:	pop    rbp
  40607b:	ret    
  40607c:	mov    r12d,0xffffffff
  406082:	jmp    40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406084:	mov    rcx,QWORD PTR [rsp+0x8]
  406089:	cmp    r14,rcx
  40608c:	je     40609d <flatcc_builder_create_cached_vtable@@Base+0x34d>
  40608e:	mov    eax,DWORD PTR [r15+0xc]
  406092:	mov    DWORD PTR [r14],eax
  406095:	mov    eax,DWORD PTR [rcx]
  406097:	mov    DWORD PTR [r15+0xc],eax
  40609b:	mov    DWORD PTR [rcx],ebp
  40609d:	mov    r12d,DWORD PTR [r15]
  4060a0:	jmp    40606a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4060a2:	lea    rdi,[rip+0x46b9]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4060a9:	lea    rsi,[rip+0x34f2]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4060b0:	lea    rcx,[rip+0x44e5]        # 40a59c <flatcc_builder_padding_base@@Base+0x127c>
  4060b7:	mov    edx,0x134
  4060bc:	call   403070 <__assert_fail@plt>
  4060c1:	lea    rdi,[rip+0x465e]        # 40a726 <flatcc_builder_padding_base@@Base+0x1406>
  4060c8:	lea    rsi,[rip+0x34d3]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4060cf:	lea    rcx,[rip+0x465f]        # 40a735 <flatcc_builder_padding_base@@Base+0x1415>
  4060d6:	mov    edx,0x156
  4060db:	call   403070 <__assert_fail@plt>

00000000004060e0 <flatcc_builder_create_table@@Base>:
  4060e0:	push   rbp
  4060e1:	push   r14
  4060e3:	push   rbx
  4060e4:	sub    rsp,0xa0
  4060eb:	test   r9d,r9d
  4060ee:	js     406305 <flatcc_builder_create_table@@Base+0x225>
  4060f4:	mov    r14,rdi
  4060f7:	mov    edi,DWORD PTR [rsp+0xc0]
  4060fe:	test   dil,0x1
  406102:	je     406324 <flatcc_builder_create_table@@Base+0x244>
  406108:	movzx  ecx,cx
  40610b:	cmp    ecx,0x4
  40610e:	mov    eax,0x4
  406113:	cmova  eax,ecx
  406116:	cmp    WORD PTR [r14+0xe8],ax
  40611e:	jae    406128 <flatcc_builder_create_table@@Base+0x48>
  406120:	mov    WORD PTR [r14+0xe8],ax
  406128:	mov    ebp,DWORD PTR [r14+0xf0]
  40612f:	mov    ecx,ebp
  406131:	sub    ecx,edx
  406133:	movzx  r10d,ax
  406137:	add    r10d,0xffffffff
  40613b:	and    r10d,ecx
  40613e:	mov    ecx,0xfffffffc
  406143:	mov    ebx,0xfffffffc
  406148:	sub    ebx,edx
  40614a:	add    edi,r10d
  40614d:	lea    eax,[rbx+rbp*1]
  406150:	add    eax,0x1
  406153:	sub    eax,edi
  406155:	mov    DWORD PTR [rsp+0xc],eax
  406159:	test   r9d,r9d
  40615c:	jle    406207 <flatcc_builder_create_table@@Base+0x127>
  406162:	add    ebx,ebp
  406164:	sub    ebx,r10d
  406167:	sub    ecx,ebx
  406169:	mov    edi,r9d
  40616c:	lea    rax,[rdi-0x1]
  406170:	mov    r9d,edi
  406173:	and    r9d,0x3
  406177:	cmp    rax,0x3
  40617b:	jae    406189 <flatcc_builder_create_table@@Base+0xa9>
  40617d:	xor    ebx,ebx
  40617f:	test   r9,r9
  406182:	jne    4061dd <flatcc_builder_create_table@@Base+0xfd>
  406184:	jmp    406207 <flatcc_builder_create_table@@Base+0x127>
  406189:	sub    rdi,r9
  40618c:	xor    ebx,ebx
  40618e:	xchg   ax,ax
  406190:	movzx  eax,WORD PTR [r8+rbx*2]
  406195:	mov    ebp,DWORD PTR [rax+rsi*1]
  406198:	add    ebp,ecx
  40619a:	sub    ebp,eax
  40619c:	mov    DWORD PTR [rax+rsi*1],ebp
  40619f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  4061a5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061a8:	add    ebp,ecx
  4061aa:	sub    ebp,eax
  4061ac:	mov    DWORD PTR [rax+rsi*1],ebp
  4061af:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4061b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061b8:	add    ebp,ecx
  4061ba:	sub    ebp,eax
  4061bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4061bf:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4061c5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061c8:	add    ebp,ecx
  4061ca:	sub    ebp,eax
  4061cc:	mov    DWORD PTR [rax+rsi*1],ebp
  4061cf:	add    rbx,0x4
  4061d3:	cmp    rdi,rbx
  4061d6:	jne    406190 <flatcc_builder_create_table@@Base+0xb0>
  4061d8:	test   r9,r9
  4061db:	je     406207 <flatcc_builder_create_table@@Base+0x127>
  4061dd:	lea    rdi,[r8+rbx*2]
  4061e1:	xor    ebx,ebx
  4061e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4061ed:	nop    DWORD PTR [rax]
  4061f0:	movzx  eax,WORD PTR [rdi+rbx*2]
  4061f4:	mov    ebp,DWORD PTR [rax+rsi*1]
  4061f7:	add    ebp,ecx
  4061f9:	sub    ebp,eax
  4061fb:	mov    DWORD PTR [rax+rsi*1],ebp
  4061fe:	add    rbx,0x1
  406202:	cmp    r9,rbx
  406205:	jne    4061f0 <flatcc_builder_create_table@@Base+0x110>
  406207:	mov    QWORD PTR [rsp+0x10],0x4
  406210:	lea    rax,[rsp+0xc]
  406215:	mov    QWORD PTR [rsp+0x20],rax
  40621a:	mov    QWORD PTR [rsp+0x28],0x4
  406223:	mov    DWORD PTR [rsp+0x18],0x1
  40622b:	test   rdx,rdx
  40622e:	je     4062d0 <flatcc_builder_create_table@@Base+0x1f0>
  406234:	lea    r8,[rdx+0x4]
  406238:	mov    QWORD PTR [rsp+0x10],r8
  40623d:	mov    QWORD PTR [rsp+0x30],rsi
  406242:	mov    QWORD PTR [rsp+0x38],rdx
  406247:	mov    DWORD PTR [rsp+0x18],0x2
  40624f:	mov    edx,0x2
  406254:	test   r10d,r10d
  406257:	je     40627f <flatcc_builder_create_table@@Base+0x19f>
  406259:	add    r8,r10
  40625c:	mov    QWORD PTR [rsp+0x10],r8
  406261:	mov    eax,edx
  406263:	shl    rax,0x4
  406267:	lea    rcx,[rip+0x30b2]        # 409320 <flatcc_builder_padding_base@@Base>
  40626e:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406273:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406278:	add    edx,0x1
  40627b:	mov    DWORD PTR [rsp+0x18],edx
  40627f:	cmp    r8,0x11
  406283:	setb   al
  406286:	lea    rcx,[r8-0x10]
  40628a:	shr    rcx,0x20
  40628e:	sete   cl
  406291:	test   r8d,r8d
  406294:	jle    4062e6 <flatcc_builder_create_table@@Base+0x206>
  406296:	or     al,cl
  406298:	je     4062e6 <flatcc_builder_create_table@@Base+0x206>
  40629a:	mov    ebp,DWORD PTR [r14+0xf0]
  4062a1:	sub    ebp,r8d
  4062a4:	mov    rdi,QWORD PTR [r14+0x38]
  4062a8:	lea    rsi,[rsp+0x20]
  4062ad:	mov    ecx,ebp
  4062af:	call   QWORD PTR [r14+0x48]
  4062b3:	test   eax,eax
  4062b5:	jne    406343 <flatcc_builder_create_table@@Base+0x263>
  4062bb:	mov    DWORD PTR [r14+0xf0],ebp
  4062c2:	mov    eax,ebp
  4062c4:	add    rsp,0xa0
  4062cb:	pop    rbx
  4062cc:	pop    r14
  4062ce:	pop    rbp
  4062cf:	ret    
  4062d0:	mov    edx,0x1
  4062d5:	mov    r8d,0x4
  4062db:	test   r10d,r10d
  4062de:	jne    406259 <flatcc_builder_create_table@@Base+0x179>
  4062e4:	jmp    40627f <flatcc_builder_create_table@@Base+0x19f>
  4062e6:	lea    rdi,[rip+0x4475]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  4062ed:	lea    rsi,[rip+0x32ae]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4062f4:	lea    rcx,[rip+0x4326]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  4062fb:	mov    edx,0x287
  406300:	call   403070 <__assert_fail@plt>
  406305:	lea    rdi,[rip+0x3a0c]        # 409d18 <flatcc_builder_padding_base@@Base+0x9f8>
  40630c:	lea    rsi,[rip+0x328f]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406313:	lea    rcx,[rip+0x3a10]        # 409d2a <flatcc_builder_padding_base@@Base+0xa0a>
  40631a:	mov    edx,0x4d5
  40631f:	call   403070 <__assert_fail@plt>
  406324:	lea    rdi,[rip+0x3a9b]        # 409dc6 <flatcc_builder_padding_base@@Base+0xaa6>
  40632b:	lea    rsi,[rip+0x3270]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406332:	lea    rcx,[rip+0x39f1]        # 409d2a <flatcc_builder_padding_base@@Base+0xa0a>
  406339:	mov    edx,0x4db
  40633e:	call   403070 <__assert_fail@plt>
  406343:	lea    rdi,[rip+0x4418]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40634a:	lea    rsi,[rip+0x3251]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406351:	lea    rcx,[rip+0x42c9]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  406358:	mov    edx,0x28b
  40635d:	call   403070 <__assert_fail@plt>
  406362:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40636c:	nop    DWORD PTR [rax+0x0]

0000000000406370 <flatcc_builder_check_required_field@@Base>:
  406370:	mov    rax,QWORD PTR [rdi+0x30]
  406374:	movzx  eax,WORD PTR [rax+0xe]
  406378:	cmp    eax,0x3
  40637b:	jne    406397 <flatcc_builder_check_required_field@@Base+0x27>
  40637d:	xor    eax,eax
  40637f:	cmp    WORD PTR [rdi+0x10],si
  406383:	jbe    406396 <flatcc_builder_check_required_field@@Base+0x26>
  406385:	mov    rcx,QWORD PTR [rdi+0x8]
  406389:	movzx  edx,si
  40638c:	xor    eax,eax
  40638e:	cmp    WORD PTR [rcx+rdx*2],0x0
  406393:	setne  al
  406396:	ret    
  406397:	push   rax
  406398:	lea    rdi,[rip+0x3a32]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  40639f:	lea    rsi,[rip+0x31fc]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4063a6:	lea    rcx,[rip+0x3a4f]        # 409dfc <flatcc_builder_padding_base@@Base+0xadc>
  4063ad:	mov    edx,0x4f8
  4063b2:	call   403070 <__assert_fail@plt>
  4063b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004063c0 <flatcc_builder_check_union_field@@Base>:
  4063c0:	mov    rax,QWORD PTR [rdi+0x30]
  4063c4:	movzx  eax,WORD PTR [rax+0xe]
  4063c8:	cmp    eax,0x3
  4063cb:	jne    40641e <flatcc_builder_check_union_field@@Base+0x5e>
  4063cd:	test   si,si
  4063d0:	je     406401 <flatcc_builder_check_union_field@@Base+0x41>
  4063d2:	cmp    WORD PTR [rdi+0x10],si
  4063d6:	jbe    406407 <flatcc_builder_check_union_field@@Base+0x47>
  4063d8:	movzx  eax,si
  4063db:	mov    rcx,QWORD PTR [rdi+0x8]
  4063df:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  4063e4:	test   rdx,rdx
  4063e7:	je     40640d <flatcc_builder_check_union_field@@Base+0x4d>
  4063e9:	mov    rsi,QWORD PTR [rdi+0x18]
  4063ed:	cmp    BYTE PTR [rsi+rdx*1],0x0
  4063f1:	movzx  eax,WORD PTR [rcx+rax*2]
  4063f5:	je     406414 <flatcc_builder_check_union_field@@Base+0x54>
  4063f7:	test   ax,ax
  4063fa:	setne  al
  4063fd:	movzx  eax,al
  406400:	ret    
  406401:	xor    eax,eax
  406403:	movzx  eax,al
  406406:	ret    
  406407:	xor    eax,eax
  406409:	movzx  eax,al
  40640c:	ret    
  40640d:	cmp    WORD PTR [rcx+rax*2],0x0
  406412:	jmp    406417 <flatcc_builder_check_union_field@@Base+0x57>
  406414:	test   ax,ax
  406417:	sete   al
  40641a:	movzx  eax,al
  40641d:	ret    
  40641e:	push   rax
  40641f:	lea    rdi,[rip+0x39ab]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406426:	lea    rsi,[rip+0x3175]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40642d:	lea    rcx,[rip+0x3a1b]        # 409e4f <flatcc_builder_padding_base@@Base+0xb2f>
  406434:	mov    edx,0x4ff
  406439:	call   403070 <__assert_fail@plt>
  40643e:	xchg   ax,ax

0000000000406440 <flatcc_builder_check_required@@Base>:
  406440:	mov    rax,QWORD PTR [rdi+0x30]
  406444:	movzx  eax,WORD PTR [rax+0xe]
  406448:	cmp    eax,0x3
  40644b:	jne    406488 <flatcc_builder_check_required@@Base+0x48>
  40644d:	movzx  ecx,WORD PTR [rdi+0x10]
  406451:	xor    eax,eax
  406453:	cmp    ecx,edx
  406455:	jl     406484 <flatcc_builder_check_required@@Base+0x44>
  406457:	mov    eax,0x1
  40645c:	test   edx,edx
  40645e:	jle    406484 <flatcc_builder_check_required@@Base+0x44>
  406460:	mov    rcx,QWORD PTR [rdi+0x8]
  406464:	movsxd r8,edx
  406467:	xor    edi,edi
  406469:	nop    DWORD PTR [rax+0x0]
  406470:	movzx  edx,WORD PTR [rsi+rdi*2]
  406474:	cmp    WORD PTR [rcx+rdx*2],0x0
  406479:	je     406485 <flatcc_builder_check_required@@Base+0x45>
  40647b:	add    rdi,0x1
  40647f:	cmp    rdi,r8
  406482:	jl     406470 <flatcc_builder_check_required@@Base+0x30>
  406484:	ret    
  406485:	xor    eax,eax
  406487:	ret    
  406488:	push   rax
  406489:	lea    rdi,[rip+0x3941]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406490:	lea    rsi,[rip+0x310b]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406497:	lea    rcx,[rip+0x3a01]        # 409e9f <flatcc_builder_padding_base@@Base+0xb7f>
  40649e:	mov    edx,0x511
  4064a3:	call   403070 <__assert_fail@plt>
  4064a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004064b0 <flatcc_builder_end_table@@Base>:
  4064b0:	push   rbp
  4064b1:	push   r15
  4064b3:	push   r14
  4064b5:	push   r12
  4064b7:	push   rbx
  4064b8:	sub    rsp,0x10
  4064bc:	mov    rax,QWORD PTR [rdi+0x30]
  4064c0:	movzx  eax,WORD PTR [rax+0xe]
  4064c4:	cmp    eax,0x3
  4064c7:	jne    406618 <flatcc_builder_end_table@@Base+0x168>
  4064cd:	mov    rbx,rdi
  4064d0:	mov    rax,QWORD PTR [rdi+0x8]
  4064d4:	mov    ecx,DWORD PTR [rdi+0x10]
  4064d7:	lea    ecx,[rcx+rcx*1]
  4064da:	add    ecx,0x4
  4064dd:	mov    WORD PTR [rax-0x4],cx
  4064e1:	mov    edx,DWORD PTR [rdi+0x20]
  4064e4:	add    edx,0x4
  4064e7:	mov    WORD PTR [rax-0x2],dx
  4064eb:	lea    r12,[rax-0x4]
  4064ef:	movzx  ebp,cx
  4064f2:	mov    eax,DWORD PTR [rdi+0x14]
  4064f5:	xor    eax,ebp
  4064f7:	imul   eax,eax,0x9e3779b1
  4064fd:	movzx  ecx,dx
  406500:	xor    ecx,eax
  406502:	imul   ecx,ecx,0x9e3779b1
  406508:	mov    DWORD PTR [rdi+0x14],ecx
  40650b:	mov    rsi,r12
  40650e:	mov    edx,ebp
  406510:	call   405d50 <flatcc_builder_create_cached_vtable@@Base>
  406515:	test   eax,eax
  406517:	je     406605 <flatcc_builder_end_table@@Base+0x155>
  40651d:	mov    r14d,eax
  406520:	xor    r15d,r15d
  406523:	xor    esi,esi
  406525:	mov    rdi,r12
  406528:	mov    rdx,rbp
  40652b:	call   403080 <memset@plt>
  406530:	mov    rax,QWORD PTR [rbx+0x30]
  406534:	mov    r8d,DWORD PTR [rax+0x14]
  406538:	add    r8,QWORD PTR [rbx+0x88]
  40653f:	mov    r9,QWORD PTR [rbx]
  406542:	mov    rsi,QWORD PTR [rbx+0x18]
  406546:	sub    r9,r8
  406549:	shr    r9,1
  40654c:	mov    edx,DWORD PTR [rbx+0x20]
  40654f:	movzx  ecx,WORD PTR [rbx+0xea]
  406556:	mov    DWORD PTR [rsp],r14d
  40655a:	mov    rdi,rbx
  40655d:	call   4060e0 <flatcc_builder_create_table@@Base>
  406562:	test   eax,eax
  406564:	je     406608 <flatcc_builder_end_table@@Base+0x158>
  40656a:	mov    r14d,eax
  40656d:	mov    rax,QWORD PTR [rbx+0x30]
  406571:	mov    ecx,DWORD PTR [rax+0x18]
  406574:	mov    DWORD PTR [rbx+0x14],ecx
  406577:	movzx  ecx,WORD PTR [rax+0x1c]
  40657b:	mov    WORD PTR [rbx+0x10],cx
  40657f:	mov    ecx,DWORD PTR [rax+0x10]
  406582:	add    rcx,QWORD PTR [rbx+0x58]
  406586:	mov    QWORD PTR [rbx+0x8],rcx
  40658a:	mov    eax,DWORD PTR [rax+0x14]
  40658d:	add    rax,QWORD PTR [rbx+0x88]
  406594:	mov    QWORD PTR [rbx],rax
  406597:	mov    rdi,QWORD PTR [rbx+0x18]
  40659b:	mov    edx,DWORD PTR [rbx+0x20]
  40659e:	xor    esi,esi
  4065a0:	call   403080 <memset@plt>
  4065a5:	mov    rax,QWORD PTR [rbx+0x30]
  4065a9:	mov    ecx,DWORD PTR [rax+0x8]
  4065ac:	mov    DWORD PTR [rbx+0x20],ecx
  4065af:	mov    ecx,DWORD PTR [rax]
  4065b1:	mov    DWORD PTR [rbx+0x28],ecx
  4065b4:	mov    edx,DWORD PTR [rax+0x4]
  4065b7:	mov    rsi,rcx
  4065ba:	add    rsi,QWORD PTR [rbx+0x68]
  4065be:	mov    QWORD PTR [rbx+0x18],rsi
  4065c2:	mov    esi,DWORD PTR [rbx+0x70]
  4065c5:	sub    esi,ecx
  4065c7:	cmp    esi,edx
  4065c9:	cmova  esi,edx
  4065cc:	mov    DWORD PTR [rbx+0x24],esi
  4065cf:	movzx  ecx,WORD PTR [rbx+0xea]
  4065d6:	cmp    WORD PTR [rbx+0xe8],cx
  4065dd:	jae    4065e6 <flatcc_builder_end_table@@Base+0x136>
  4065df:	mov    WORD PTR [rbx+0xe8],cx
  4065e6:	movzx  ecx,WORD PTR [rax+0xc]
  4065ea:	mov    WORD PTR [rbx+0xea],cx
  4065f1:	add    rax,0xffffffffffffffdc
  4065f5:	mov    QWORD PTR [rbx+0x30],rax
  4065f9:	add    DWORD PTR [rbx+0x104],0xffffffff
  406600:	mov    r15d,r14d
  406603:	jmp    406608 <flatcc_builder_end_table@@Base+0x158>
  406605:	xor    r15d,r15d
  406608:	mov    eax,r15d
  40660b:	add    rsp,0x10
  40660f:	pop    rbx
  406610:	pop    r12
  406612:	pop    r14
  406614:	pop    r15
  406616:	pop    rbp
  406617:	ret    
  406618:	lea    rdi,[rip+0x37b2]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  40661f:	lea    rsi,[rip+0x2f7c]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406626:	lea    rcx,[rip+0x38cc]        # 409ef9 <flatcc_builder_padding_base@@Base+0xbd9>
  40662d:	mov    edx,0x525
  406632:	call   403070 <__assert_fail@plt>
  406637:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406640 <flatcc_builder_create_vector@@Base>:
  406640:	push   rbp
  406641:	push   rbx
  406642:	sub    rsp,0x98
  406649:	cmp    rdx,r9
  40664c:	ja     406779 <flatcc_builder_create_vector@@Base+0x139>
  406652:	mov    rbx,rdi
  406655:	movzx  edi,r8w
  406659:	cmp    edi,0x4
  40665c:	mov    eax,0x4
  406661:	cmova  eax,edi
  406664:	cmp    WORD PTR [rbx+0xe8],ax
  40666b:	jae    406674 <flatcc_builder_create_vector@@Base+0x34>
  40666d:	mov    WORD PTR [rbx+0xe8],ax
  406674:	imul   ecx,edx
  406677:	mov    DWORD PTR [rsp+0x4],edx
  40667b:	mov    ebp,DWORD PTR [rbx+0xf0]
  406681:	mov    edx,ebp
  406683:	sub    edx,ecx
  406685:	movzx  eax,ax
  406688:	add    eax,0xffffffff
  40668b:	and    eax,edx
  40668d:	mov    QWORD PTR [rsp+0x8],0x4
  406696:	lea    rdx,[rsp+0x4]
  40669b:	mov    QWORD PTR [rsp+0x18],rdx
  4066a0:	mov    QWORD PTR [rsp+0x20],0x4
  4066a9:	mov    DWORD PTR [rsp+0x10],0x1
  4066b1:	test   ecx,ecx
  4066b3:	je     406749 <flatcc_builder_create_vector@@Base+0x109>
  4066b9:	mov    ecx,ecx
  4066bb:	lea    r8,[rcx+0x4]
  4066bf:	mov    QWORD PTR [rsp+0x8],r8
  4066c4:	mov    QWORD PTR [rsp+0x28],rsi
  4066c9:	mov    QWORD PTR [rsp+0x30],rcx
  4066ce:	mov    DWORD PTR [rsp+0x10],0x2
  4066d6:	mov    edx,0x2
  4066db:	test   eax,eax
  4066dd:	je     406707 <flatcc_builder_create_vector@@Base+0xc7>
  4066df:	mov    eax,eax
  4066e1:	add    r8,rax
  4066e4:	mov    QWORD PTR [rsp+0x8],r8
  4066e9:	mov    ecx,edx
  4066eb:	shl    rcx,0x4
  4066ef:	lea    rsi,[rip+0x2c2a]        # 409320 <flatcc_builder_padding_base@@Base>
  4066f6:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  4066fb:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  406700:	add    edx,0x1
  406703:	mov    DWORD PTR [rsp+0x10],edx
  406707:	cmp    r8,0x11
  40670b:	setb   al
  40670e:	lea    rcx,[r8-0x10]
  406712:	shr    rcx,0x20
  406716:	sete   cl
  406719:	test   r8d,r8d
  40671c:	jle    40675a <flatcc_builder_create_vector@@Base+0x11a>
  40671e:	or     al,cl
  406720:	je     40675a <flatcc_builder_create_vector@@Base+0x11a>
  406722:	sub    ebp,r8d
  406725:	mov    rdi,QWORD PTR [rbx+0x38]
  406729:	lea    rsi,[rsp+0x18]
  40672e:	mov    ecx,ebp
  406730:	call   QWORD PTR [rbx+0x48]
  406733:	test   eax,eax
  406735:	jne    406798 <flatcc_builder_create_vector@@Base+0x158>
  406737:	mov    DWORD PTR [rbx+0xf0],ebp
  40673d:	mov    eax,ebp
  40673f:	add    rsp,0x98
  406746:	pop    rbx
  406747:	pop    rbp
  406748:	ret    
  406749:	mov    edx,0x1
  40674e:	mov    r8d,0x4
  406754:	test   eax,eax
  406756:	jne    4066df <flatcc_builder_create_vector@@Base+0x9f>
  406758:	jmp    406707 <flatcc_builder_create_vector@@Base+0xc7>
  40675a:	lea    rdi,[rip+0x4001]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406761:	lea    rsi,[rip+0x2e3a]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406768:	lea    rcx,[rip+0x3eb2]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  40676f:	mov    edx,0x287
  406774:	call   403070 <__assert_fail@plt>
  406779:	lea    rdi,[rip+0x37bb]        # 409f3b <flatcc_builder_padding_base@@Base+0xc1b>
  406780:	lea    rsi,[rip+0x2e1b]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406787:	lea    rcx,[rip+0x37c0]        # 409f4e <flatcc_builder_padding_base@@Base+0xc2e>
  40678e:	mov    edx,0x555
  406793:	call   403070 <__assert_fail@plt>
  406798:	lea    rdi,[rip+0x3fc3]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  40679f:	lea    rsi,[rip+0x2dfc]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4067a6:	lea    rcx,[rip+0x3e74]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  4067ad:	mov    edx,0x28b
  4067b2:	call   403070 <__assert_fail@plt>
  4067b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004067c0 <flatcc_builder_end_vector@@Base>:
  4067c0:	push   rbp
  4067c1:	push   rbx
  4067c2:	push   rax
  4067c3:	mov    rax,QWORD PTR [rdi+0x30]
  4067c7:	movzx  ecx,WORD PTR [rax+0xe]
  4067cb:	cmp    ecx,0x4
  4067ce:	jne    40686a <flatcc_builder_end_vector@@Base+0xaa>
  4067d4:	mov    rbx,rdi
  4067d7:	mov    rsi,QWORD PTR [rdi+0x18]
  4067db:	mov    ecx,DWORD PTR [rax+0x10]
  4067de:	mov    edx,DWORD PTR [rax+0x14]
  4067e1:	movzx  r8d,WORD PTR [rdi+0xea]
  4067e9:	mov    r9d,DWORD PTR [rax+0x18]
  4067ed:	call   406640 <flatcc_builder_create_vector@@Base>
  4067f2:	mov    ebp,eax
  4067f4:	test   eax,eax
  4067f6:	je     406861 <flatcc_builder_end_vector@@Base+0xa1>
  4067f8:	mov    rdi,QWORD PTR [rbx+0x18]
  4067fc:	mov    edx,DWORD PTR [rbx+0x20]
  4067ff:	xor    esi,esi
  406801:	call   403080 <memset@plt>
  406806:	mov    rax,QWORD PTR [rbx+0x30]
  40680a:	mov    ecx,DWORD PTR [rax+0x8]
  40680d:	mov    DWORD PTR [rbx+0x20],ecx
  406810:	mov    ecx,DWORD PTR [rax]
  406812:	mov    DWORD PTR [rbx+0x28],ecx
  406815:	mov    edx,DWORD PTR [rax+0x4]
  406818:	mov    rsi,rcx
  40681b:	add    rsi,QWORD PTR [rbx+0x68]
  40681f:	mov    QWORD PTR [rbx+0x18],rsi
  406823:	mov    esi,DWORD PTR [rbx+0x70]
  406826:	sub    esi,ecx
  406828:	cmp    esi,edx
  40682a:	cmova  esi,edx
  40682d:	mov    DWORD PTR [rbx+0x24],esi
  406830:	movzx  ecx,WORD PTR [rbx+0xea]
  406837:	cmp    WORD PTR [rbx+0xe8],cx
  40683e:	jae    406847 <flatcc_builder_end_vector@@Base+0x87>
  406840:	mov    WORD PTR [rbx+0xe8],cx
  406847:	movzx  ecx,WORD PTR [rax+0xc]
  40684b:	mov    WORD PTR [rbx+0xea],cx
  406852:	add    rax,0xffffffffffffffdc
  406856:	mov    QWORD PTR [rbx+0x30],rax
  40685a:	add    DWORD PTR [rbx+0x104],0xffffffff
  406861:	mov    eax,ebp
  406863:	add    rsp,0x8
  406867:	pop    rbx
  406868:	pop    rbp
  406869:	ret    
  40686a:	lea    rdi,[rip+0x306e]        # 4098df <flatcc_builder_padding_base@@Base+0x5bf>
  406871:	lea    rsi,[rip+0x2d2a]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406878:	lea    rcx,[rip+0x3745]        # 409fc4 <flatcc_builder_padding_base@@Base+0xca4>
  40687f:	mov    edx,0x578
  406884:	call   403070 <__assert_fail@plt>
  406889:	nop    DWORD PTR [rax+0x0]

0000000000406890 <flatcc_builder_vector_count@@Base>:
  406890:	mov    rax,QWORD PTR [rdi+0x30]
  406894:	mov    eax,DWORD PTR [rax+0x14]
  406897:	ret    
  406898:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004068a0 <flatcc_builder_vector_edit@@Base>:
  4068a0:	mov    rax,QWORD PTR [rdi+0x18]
  4068a4:	ret    
  4068a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4068af:	nop

00000000004068b0 <flatcc_builder_create_offset_vector_direct@@Base>:
  4068b0:	xor    ecx,ecx
  4068b2:	jmp    4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4068b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4068be:	xchg   ax,ax
  4068c0:	push   r14
  4068c2:	push   rbx
  4068c3:	sub    rsp,0x98
  4068ca:	mov    r10,rdx
  4068cd:	xor    ebx,ebx
  4068cf:	test   r10d,0xc0000000
  4068d6:	jne    406a2a <flatcc_builder_create_offset_vector_direct@@Base+0x17a>
  4068dc:	mov    r14,rdi
  4068df:	movzx  edx,WORD PTR [rdi+0xe8]
  4068e6:	cmp    edx,0x3
  4068e9:	ja     4068f5 <flatcc_builder_create_offset_vector_direct@@Base+0x45>
  4068eb:	mov    WORD PTR [r14+0xe8],0x4
  4068f5:	lea    r8d,[r10*4+0x0]
  4068fd:	mov    DWORD PTR [rsp+0x4],r10d
  406902:	mov    ebx,DWORD PTR [r14+0xf0]
  406909:	mov    r9d,ebx
  40690c:	and    r9d,0x3
  406910:	mov    QWORD PTR [rsp+0x8],0x4
  406919:	lea    rdx,[rsp+0x4]
  40691e:	mov    QWORD PTR [rsp+0x18],rdx
  406923:	mov    QWORD PTR [rsp+0x20],0x4
  40692c:	mov    DWORD PTR [rsp+0x10],0x1
  406934:	test   r8d,r8d
  406937:	je     406a37 <flatcc_builder_create_offset_vector_direct@@Base+0x187>
  40693d:	mov    edx,r8d
  406940:	lea    r8,[rdx+0x4]
  406944:	mov    QWORD PTR [rsp+0x8],r8
  406949:	mov    QWORD PTR [rsp+0x28],rsi
  40694e:	mov    QWORD PTR [rsp+0x30],rdx
  406953:	mov    DWORD PTR [rsp+0x10],0x2
  40695b:	mov    edx,0x2
  406960:	test   r9d,r9d
  406963:	je     40698b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406965:	add    r8,r9
  406968:	mov    QWORD PTR [rsp+0x8],r8
  40696d:	mov    edi,edx
  40696f:	shl    rdi,0x4
  406973:	lea    rax,[rip+0x29a6]        # 409320 <flatcc_builder_padding_base@@Base>
  40697a:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40697f:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406984:	add    edx,0x1
  406987:	mov    DWORD PTR [rsp+0x10],edx
  40698b:	test   r10d,r10d
  40698e:	je     4069e6 <flatcc_builder_create_offset_vector_direct@@Base+0x136>
  406990:	mov    edi,0xfffffffc
  406995:	sub    edi,ebx
  406997:	add    edi,r8d
  40699a:	mov    r9d,r10d
  40699d:	xor    ebx,ebx
  40699f:	nop
  4069a0:	mov    eax,DWORD PTR [rsi+rbx*4]
  4069a3:	test   eax,eax
  4069a5:	je     4069c0 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
  4069a7:	add    eax,edi
  4069a9:	mov    DWORD PTR [rsi+rbx*4],eax
  4069ac:	test   rcx,rcx
  4069af:	je     4069d3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  4069b1:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4069b5:	jne    4069d3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  4069b7:	jmp    406a50 <flatcc_builder_create_offset_vector_direct@@Base+0x1a0>
  4069bc:	nop    DWORD PTR [rax+0x0]
  4069c0:	test   rcx,rcx
  4069c3:	je     406a6f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  4069c9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4069cd:	jne    406a8e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  4069d3:	add    rbx,0x1
  4069d7:	add    edi,0xfffffffc
  4069da:	cmp    rbx,r9
  4069dd:	jb     4069a0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  4069df:	mov    ebx,DWORD PTR [r14+0xf0]
  4069e6:	cmp    r8,0x11
  4069ea:	setb   al
  4069ed:	lea    rcx,[r8-0x10]
  4069f1:	shr    rcx,0x20
  4069f5:	sete   cl
  4069f8:	test   r8d,r8d
  4069fb:	jle    406aad <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406a01:	or     al,cl
  406a03:	je     406aad <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406a09:	sub    ebx,r8d
  406a0c:	mov    rdi,QWORD PTR [r14+0x38]
  406a10:	lea    rsi,[rsp+0x18]
  406a15:	mov    ecx,ebx
  406a17:	call   QWORD PTR [r14+0x48]
  406a1b:	test   eax,eax
  406a1d:	jne    406acc <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406a23:	mov    DWORD PTR [r14+0xf0],ebx
  406a2a:	mov    eax,ebx
  406a2c:	add    rsp,0x98
  406a33:	pop    rbx
  406a34:	pop    r14
  406a36:	ret    
  406a37:	mov    edx,0x1
  406a3c:	mov    r8d,0x4
  406a42:	test   r9d,r9d
  406a45:	jne    406965 <flatcc_builder_create_offset_vector_direct@@Base+0xb5>
  406a4b:	jmp    40698b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406a50:	lea    rdi,[rip+0x3cff]        # 40a756 <flatcc_builder_padding_base@@Base+0x1436>
  406a57:	lea    rsi,[rip+0x2b44]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406a5e:	lea    rcx,[rip+0x3cff]        # 40a764 <flatcc_builder_padding_base@@Base+0x1444>
  406a65:	mov    edx,0x5b1
  406a6a:	call   403070 <__assert_fail@plt>
  406a6f:	lea    rdi,[rip+0x3cec]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406a76:	lea    rsi,[rip+0x2b25]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406a7d:	lea    rcx,[rip+0x3ce0]        # 40a764 <flatcc_builder_padding_base@@Base+0x1444>
  406a84:	mov    edx,0x5b7
  406a89:	call   403070 <__assert_fail@plt>
  406a8e:	lea    rdi,[rip+0x3d52]        # 40a7e7 <flatcc_builder_padding_base@@Base+0x14c7>
  406a95:	lea    rsi,[rip+0x2b06]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406a9c:	lea    rcx,[rip+0x3cc1]        # 40a764 <flatcc_builder_padding_base@@Base+0x1444>
  406aa3:	mov    edx,0x5b5
  406aa8:	call   403070 <__assert_fail@plt>
  406aad:	lea    rdi,[rip+0x3cae]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406ab4:	lea    rsi,[rip+0x2ae7]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406abb:	lea    rcx,[rip+0x3b5f]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  406ac2:	mov    edx,0x287
  406ac7:	call   403070 <__assert_fail@plt>
  406acc:	lea    rdi,[rip+0x3c8f]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406ad3:	lea    rsi,[rip+0x2ac8]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406ada:	lea    rcx,[rip+0x3b40]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  406ae1:	mov    edx,0x28b
  406ae6:	call   403070 <__assert_fail@plt>
  406aeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406af0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406af0:	push   rbp
  406af1:	push   rbx
  406af2:	push   rax
  406af3:	mov    rcx,QWORD PTR [rdi+0x30]
  406af7:	movzx  edx,WORD PTR [rcx+0xe]
  406afb:	cmp    edx,0x5
  406afe:	jne    406b91 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa1>
  406b04:	mov    rax,rsi
  406b07:	mov    rbx,rdi
  406b0a:	mov    rsi,QWORD PTR [rdi+0x18]
  406b0e:	mov    edx,DWORD PTR [rcx+0x14]
  406b11:	mov    rcx,rax
  406b14:	call   4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406b19:	mov    ebp,eax
  406b1b:	test   eax,eax
  406b1d:	je     406b88 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
  406b1f:	mov    rdi,QWORD PTR [rbx+0x18]
  406b23:	mov    edx,DWORD PTR [rbx+0x20]
  406b26:	xor    esi,esi
  406b28:	call   403080 <memset@plt>
  406b2d:	mov    rax,QWORD PTR [rbx+0x30]
  406b31:	mov    ecx,DWORD PTR [rax+0x8]
  406b34:	mov    DWORD PTR [rbx+0x20],ecx
  406b37:	mov    ecx,DWORD PTR [rax]
  406b39:	mov    DWORD PTR [rbx+0x28],ecx
  406b3c:	mov    edx,DWORD PTR [rax+0x4]
  406b3f:	mov    rsi,rcx
  406b42:	add    rsi,QWORD PTR [rbx+0x68]
  406b46:	mov    QWORD PTR [rbx+0x18],rsi
  406b4a:	mov    esi,DWORD PTR [rbx+0x70]
  406b4d:	sub    esi,ecx
  406b4f:	cmp    esi,edx
  406b51:	cmova  esi,edx
  406b54:	mov    DWORD PTR [rbx+0x24],esi
  406b57:	movzx  ecx,WORD PTR [rbx+0xea]
  406b5e:	cmp    WORD PTR [rbx+0xe8],cx
  406b65:	jae    406b6e <flatcc_builder_end_offset_vector_for_unions@@Base+0x7e>
  406b67:	mov    WORD PTR [rbx+0xe8],cx
  406b6e:	movzx  ecx,WORD PTR [rax+0xc]
  406b72:	mov    WORD PTR [rbx+0xea],cx
  406b79:	add    rax,0xffffffffffffffdc
  406b7d:	mov    QWORD PTR [rbx+0x30],rax
  406b81:	add    DWORD PTR [rbx+0x104],0xffffffff
  406b88:	mov    eax,ebp
  406b8a:	add    rsp,0x8
  406b8e:	pop    rbx
  406b8f:	pop    rbp
  406b90:	ret    
  406b91:	lea    rdi,[rip+0x2e40]        # 4099d8 <flatcc_builder_padding_base@@Base+0x6b8>
  406b98:	lea    rsi,[rip+0x2a03]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406b9f:	lea    rcx,[rip+0x34ab]        # 40a051 <flatcc_builder_padding_base@@Base+0xd31>
  406ba6:	mov    edx,0x5d5
  406bab:	call   403070 <__assert_fail@plt>

0000000000406bb0 <flatcc_builder_offset_vector_edit@@Base>:
  406bb0:	mov    rax,QWORD PTR [rdi+0x18]
  406bb4:	ret    
  406bb5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406bbf:	nop

0000000000406bc0 <flatcc_builder_offset_vector_count@@Base>:
  406bc0:	mov    rax,QWORD PTR [rdi+0x30]
  406bc4:	mov    eax,DWORD PTR [rax+0x14]
  406bc7:	ret    
  406bc8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406bd0 <flatcc_builder_table_add_union@@Base>:
  406bd0:	push   rbp
  406bd1:	push   r15
  406bd3:	push   r14
  406bd5:	push   rbx
  406bd6:	push   rax
  406bd7:	mov    rax,QWORD PTR [rdi+0x30]
  406bdb:	movzx  eax,WORD PTR [rax+0xe]
  406bdf:	cmp    eax,0x3
  406be2:	jne    406c41 <flatcc_builder_table_add_union@@Base+0x71>
  406be4:	mov    r14,rdx
  406be7:	mov    ebp,esi
  406be9:	mov    r15,rdi
  406bec:	mov    rbx,rdx
  406bef:	shr    rbx,0x20
  406bf3:	test   r14b,r14b
  406bf6:	jne    406bfc <flatcc_builder_table_add_union@@Base+0x2c>
  406bf8:	test   ebx,ebx
  406bfa:	jne    406c60 <flatcc_builder_table_add_union@@Base+0x90>
  406bfc:	test   ebx,ebx
  406bfe:	je     406c15 <flatcc_builder_table_add_union@@Base+0x45>
  406c00:	mov    rdi,r15
  406c03:	mov    esi,ebp
  406c05:	call   406cc0 <flatcc_builder_table_add_offset@@Base>
  406c0a:	test   rax,rax
  406c0d:	je     406c9e <flatcc_builder_table_add_union@@Base+0xce>
  406c13:	mov    DWORD PTR [rax],ebx
  406c15:	add    ebp,0xffffffff
  406c18:	mov    edx,0x1
  406c1d:	mov    ecx,0x1
  406c22:	mov    rdi,r15
  406c25:	mov    esi,ebp
  406c27:	call   406e20 <flatcc_builder_table_add@@Base>
  406c2c:	test   rax,rax
  406c2f:	je     406c7f <flatcc_builder_table_add_union@@Base+0xaf>
  406c31:	mov    BYTE PTR [rax],r14b
  406c34:	xor    eax,eax
  406c36:	add    rsp,0x8
  406c3a:	pop    rbx
  406c3b:	pop    r14
  406c3d:	pop    r15
  406c3f:	pop    rbp
  406c40:	ret    
  406c41:	lea    rdi,[rip+0x3189]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406c48:	lea    rsi,[rip+0x2953]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406c4f:	lea    rcx,[rip+0x346d]        # 40a0c3 <flatcc_builder_padding_base@@Base+0xda3>
  406c56:	mov    edx,0x5ee
  406c5b:	call   403070 <__assert_fail@plt>
  406c60:	lea    rdi,[rip+0x34b4]        # 40a11b <flatcc_builder_padding_base@@Base+0xdfb>
  406c67:	lea    rsi,[rip+0x2934]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406c6e:	lea    rcx,[rip+0x344e]        # 40a0c3 <flatcc_builder_padding_base@@Base+0xda3>
  406c75:	mov    edx,0x5ef
  406c7a:	call   403070 <__assert_fail@plt>
  406c7f:	lea    rdi,[rip+0x34c1]        # 40a147 <flatcc_builder_padding_base@@Base+0xe27>
  406c86:	lea    rsi,[rip+0x2915]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406c8d:	lea    rcx,[rip+0x342f]        # 40a0c3 <flatcc_builder_padding_base@@Base+0xda3>
  406c94:	mov    edx,0x5f6
  406c99:	call   403070 <__assert_fail@plt>
  406c9e:	lea    rdi,[rip+0x3498]        # 40a13d <flatcc_builder_padding_base@@Base+0xe1d>
  406ca5:	lea    rsi,[rip+0x28f6]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406cac:	lea    rcx,[rip+0x3410]        # 40a0c3 <flatcc_builder_padding_base@@Base+0xda3>
  406cb3:	mov    edx,0x5f2
  406cb8:	call   403070 <__assert_fail@plt>
  406cbd:	nop    DWORD PTR [rax]

0000000000406cc0 <flatcc_builder_table_add_offset@@Base>:
  406cc0:	push   rbp
  406cc1:	push   r15
  406cc3:	push   r14
  406cc5:	push   rbx
  406cc6:	push   rax
  406cc7:	mov    rax,QWORD PTR [rdi+0x30]
  406ccb:	movzx  eax,WORD PTR [rax+0xe]
  406ccf:	cmp    eax,0x3
  406cd2:	jne    406dbe <flatcc_builder_table_add_offset@@Base+0xfe>
  406cd8:	mov    r14d,esi
  406cdb:	cmp    esi,0x7ffd
  406ce1:	jae    406ddd <flatcc_builder_table_add_offset@@Base+0x11d>
  406ce7:	mov    rbx,rdi
  406cea:	mov    rax,QWORD PTR [rdi+0x8]
  406cee:	movsxd rcx,r14d
  406cf1:	cmp    WORD PTR [rax+rcx*2],0x0
  406cf6:	jne    406dfc <flatcc_builder_table_add_offset@@Base+0x13c>
  406cfc:	mov    ecx,DWORD PTR [rbx+0x14]
  406cff:	xor    ecx,r14d
  406d02:	imul   ecx,ecx,0x9e3779b1
  406d08:	xor    ecx,0x4
  406d0b:	imul   ecx,ecx,0x9e3779b1
  406d11:	mov    DWORD PTR [rbx+0x14],ecx
  406d14:	mov    ebp,DWORD PTR [rbx+0x20]
  406d17:	mov    ecx,DWORD PTR [rbx+0x24]
  406d1a:	add    ebp,0x3
  406d1d:	and    ebp,0xfffffffc
  406d20:	lea    r15,[rbp+0x4]
  406d24:	mov    DWORD PTR [rbx+0x20],r15d
  406d28:	cmp    ecx,r15d
  406d2b:	jae    406d87 <flatcc_builder_table_add_offset@@Base+0xc7>
  406d2d:	lea    eax,[rbp+0x4]
  406d30:	lea    rsi,[rbx+0x68]
  406d34:	mov    rdi,QWORD PTR [rbx+0x40]
  406d38:	mov    edx,DWORD PTR [rbx+0x28]
  406d3b:	add    rdx,rax
  406d3e:	mov    ecx,0x1
  406d43:	mov    r8d,0x1
  406d49:	call   QWORD PTR [rbx+0x50]
  406d4c:	test   eax,eax
  406d4e:	je     406d54 <flatcc_builder_table_add_offset@@Base+0x94>
  406d50:	xor    ebp,ebp
  406d52:	jmp    406db0 <flatcc_builder_table_add_offset@@Base+0xf0>
  406d54:	mov    eax,DWORD PTR [rbx+0x28]
  406d57:	mov    rcx,rax
  406d5a:	add    rcx,QWORD PTR [rbx+0x68]
  406d5e:	mov    QWORD PTR [rbx+0x18],rcx
  406d62:	mov    ecx,DWORD PTR [rbx+0x70]
  406d65:	sub    ecx,eax
  406d67:	cmp    ecx,0xfffc
  406d6d:	mov    eax,0xfffc
  406d72:	cmovb  eax,ecx
  406d75:	mov    DWORD PTR [rbx+0x24],eax
  406d78:	mov    rax,QWORD PTR [rbx+0x30]
  406d7c:	mov    DWORD PTR [rax+0x4],0xfffc
  406d83:	mov    rax,QWORD PTR [rbx+0x8]
  406d87:	movzx  ecx,r14w
  406d8b:	mov    WORD PTR [rax+rcx*2],r15w
  406d90:	cmp    WORD PTR [rbx+0x10],cx
  406d94:	ja     406d9f <flatcc_builder_table_add_offset@@Base+0xdf>
  406d96:	add    r14d,0x1
  406d9a:	mov    WORD PTR [rbx+0x10],r14w
  406d9f:	mov    rax,QWORD PTR [rbx]
  406da2:	lea    rcx,[rax+0x2]
  406da6:	mov    QWORD PTR [rbx],rcx
  406da9:	mov    WORD PTR [rax],bp
  406dac:	add    rbp,QWORD PTR [rbx+0x18]
  406db0:	mov    rax,rbp
  406db3:	add    rsp,0x8
  406db7:	pop    rbx
  406db8:	pop    r14
  406dba:	pop    r15
  406dbc:	pop    rbp
  406dbd:	ret    
  406dbe:	lea    rdi,[rip+0x300c]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406dc5:	lea    rsi,[rip+0x27d6]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406dcc:	lea    rcx,[rip+0x36f2]        # 40a4c5 <flatcc_builder_padding_base@@Base+0x11a5>
  406dd3:	mov    edx,0x713
  406dd8:	call   403070 <__assert_fail@plt>
  406ddd:	lea    rdi,[rip+0x3661]        # 40a445 <flatcc_builder_padding_base@@Base+0x1125>
  406de4:	lea    rsi,[rip+0x27b7]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406deb:	lea    rcx,[rip+0x36d3]        # 40a4c5 <flatcc_builder_padding_base@@Base+0x11a5>
  406df2:	mov    edx,0x714
  406df7:	call   403070 <__assert_fail@plt>
  406dfc:	lea    rdi,[rip+0x395f]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406e03:	lea    rsi,[rip+0x2798]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406e0a:	lea    rcx,[rip+0x36b4]        # 40a4c5 <flatcc_builder_padding_base@@Base+0x11a5>
  406e11:	mov    edx,0x71b
  406e16:	call   403070 <__assert_fail@plt>
  406e1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406e20 <flatcc_builder_table_add@@Base>:
  406e20:	push   rbp
  406e21:	push   r14
  406e23:	push   rbx
  406e24:	mov    rax,QWORD PTR [rdi+0x30]
  406e28:	movzx  eax,WORD PTR [rax+0xe]
  406e2c:	cmp    eax,0x3
  406e2f:	jne    406f1c <flatcc_builder_table_add@@Base+0xfc>
  406e35:	mov    r14d,esi
  406e38:	cmp    esi,0x7ffd
  406e3e:	jae    406f3b <flatcc_builder_table_add@@Base+0x11b>
  406e44:	mov    rbx,rdi
  406e47:	cmp    WORD PTR [rdi+0xea],cx
  406e4e:	jae    406e57 <flatcc_builder_table_add@@Base+0x37>
  406e50:	mov    WORD PTR [rbx+0xea],cx
  406e57:	mov    rsi,QWORD PTR [rbx+0x8]
  406e5b:	movsxd rax,r14d
  406e5e:	cmp    WORD PTR [rsi+rax*2],0x0
  406e63:	jne    406f5a <flatcc_builder_table_add@@Base+0x13a>
  406e69:	mov    eax,DWORD PTR [rbx+0x14]
  406e6c:	xor    eax,r14d
  406e6f:	imul   eax,eax,0x9e3779b1
  406e75:	xor    eax,edx
  406e77:	imul   eax,eax,0x9e3779b1
  406e7d:	mov    DWORD PTR [rbx+0x14],eax
  406e80:	mov    eax,DWORD PTR [rbx+0x20]
  406e83:	movzx  ebp,cx
  406e86:	lea    eax,[rax+rbp*1]
  406e89:	add    eax,0xffffffff
  406e8c:	neg    ebp
  406e8e:	and    ebp,eax
  406e90:	add    edx,ebp
  406e92:	mov    DWORD PTR [rbx+0x20],edx
  406e95:	cmp    edx,DWORD PTR [rbx+0x24]
  406e98:	jb     406ef7 <flatcc_builder_table_add@@Base+0xd7>
  406e9a:	add    edx,0x1
  406e9d:	lea    rsi,[rbx+0x68]
  406ea1:	mov    rdi,QWORD PTR [rbx+0x40]
  406ea5:	mov    eax,DWORD PTR [rbx+0x28]
  406ea8:	add    rax,rdx
  406eab:	mov    ecx,0x1
  406eb0:	mov    r8d,0x1
  406eb6:	mov    rdx,rax
  406eb9:	call   QWORD PTR [rbx+0x50]
  406ebc:	test   eax,eax
  406ebe:	je     406ec4 <flatcc_builder_table_add@@Base+0xa4>
  406ec0:	xor    eax,eax
  406ec2:	jmp    406f17 <flatcc_builder_table_add@@Base+0xf7>
  406ec4:	mov    eax,DWORD PTR [rbx+0x28]
  406ec7:	mov    rcx,rax
  406eca:	add    rcx,QWORD PTR [rbx+0x68]
  406ece:	mov    QWORD PTR [rbx+0x18],rcx
  406ed2:	mov    ecx,DWORD PTR [rbx+0x70]
  406ed5:	sub    ecx,eax
  406ed7:	cmp    ecx,0xfffc
  406edd:	mov    eax,0xfffc
  406ee2:	cmovb  eax,ecx
  406ee5:	mov    DWORD PTR [rbx+0x24],eax
  406ee8:	mov    rax,QWORD PTR [rbx+0x30]
  406eec:	mov    DWORD PTR [rax+0x4],0xfffc
  406ef3:	mov    rsi,QWORD PTR [rbx+0x8]
  406ef7:	mov    eax,ebp
  406ef9:	add    ebp,0x4
  406efc:	movzx  ecx,r14w
  406f00:	mov    WORD PTR [rsi+rcx*2],bp
  406f04:	cmp    WORD PTR [rbx+0x10],cx
  406f08:	ja     406f13 <flatcc_builder_table_add@@Base+0xf3>
  406f0a:	add    r14d,0x1
  406f0e:	mov    WORD PTR [rbx+0x10],r14w
  406f13:	add    rax,QWORD PTR [rbx+0x18]
  406f17:	pop    rbx
  406f18:	pop    r14
  406f1a:	pop    rbp
  406f1b:	ret    
  406f1c:	lea    rdi,[rip+0x2eae]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406f23:	lea    rsi,[rip+0x2678]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406f2a:	lea    rcx,[rip+0x34ca]        # 40a3fb <flatcc_builder_padding_base@@Base+0x10db>
  406f31:	mov    edx,0x6ed
  406f36:	call   403070 <__assert_fail@plt>
  406f3b:	lea    rdi,[rip+0x3503]        # 40a445 <flatcc_builder_padding_base@@Base+0x1125>
  406f42:	lea    rsi,[rip+0x2659]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406f49:	lea    rcx,[rip+0x34ab]        # 40a3fb <flatcc_builder_padding_base@@Base+0x10db>
  406f50:	mov    edx,0x6ee
  406f55:	call   403070 <__assert_fail@plt>
  406f5a:	lea    rdi,[rip+0x3801]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  406f61:	lea    rsi,[rip+0x263a]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406f68:	lea    rcx,[rip+0x348c]        # 40a3fb <flatcc_builder_padding_base@@Base+0x10db>
  406f6f:	mov    edx,0x6f8
  406f74:	call   403070 <__assert_fail@plt>
  406f79:	nop    DWORD PTR [rax+0x0]

0000000000406f80 <flatcc_builder_table_add_union_vector@@Base>:
  406f80:	push   r15
  406f82:	push   r14
  406f84:	push   r12
  406f86:	push   rbx
  406f87:	push   rax
  406f88:	mov    rax,QWORD PTR [rdi+0x30]
  406f8c:	movzx  eax,WORD PTR [rax+0xe]
  406f90:	cmp    eax,0x3
  406f93:	jne    406fe9 <flatcc_builder_table_add_union_vector@@Base+0x69>
  406f95:	mov    rbx,rdx
  406f98:	mov    r12,rdx
  406f9b:	shr    r12,0x20
  406f9f:	test   ebx,ebx
  406fa1:	sete   al
  406fa4:	test   r12d,r12d
  406fa7:	sete   cl
  406faa:	cmp    al,cl
  406fac:	jne    407008 <flatcc_builder_table_add_union_vector@@Base+0x88>
  406fae:	test   ebx,ebx
  406fb0:	je     406fdb <flatcc_builder_table_add_union_vector@@Base+0x5b>
  406fb2:	mov    r14d,esi
  406fb5:	mov    r15,rdi
  406fb8:	lea    esi,[r14-0x1]
  406fbc:	call   406cc0 <flatcc_builder_table_add_offset@@Base>
  406fc1:	test   rax,rax
  406fc4:	je     407027 <flatcc_builder_table_add_union_vector@@Base+0xa7>
  406fc6:	mov    DWORD PTR [rax],ebx
  406fc8:	mov    rdi,r15
  406fcb:	mov    esi,r14d
  406fce:	call   406cc0 <flatcc_builder_table_add_offset@@Base>
  406fd3:	test   rax,rax
  406fd6:	je     407046 <flatcc_builder_table_add_union_vector@@Base+0xc6>
  406fd8:	mov    DWORD PTR [rax],r12d
  406fdb:	xor    eax,eax
  406fdd:	add    rsp,0x8
  406fe1:	pop    rbx
  406fe2:	pop    r12
  406fe4:	pop    r14
  406fe6:	pop    r15
  406fe8:	ret    
  406fe9:	lea    rdi,[rip+0x2de1]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  406ff0:	lea    rsi,[rip+0x25ab]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  406ff7:	lea    rcx,[rip+0x3155]        # 40a153 <flatcc_builder_padding_base@@Base+0xe33>
  406ffe:	mov    edx,0x600
  407003:	call   403070 <__assert_fail@plt>
  407008:	lea    rdi,[rip+0x31a7]        # 40a1b6 <flatcc_builder_padding_base@@Base+0xe96>
  40700f:	lea    rsi,[rip+0x258c]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407016:	lea    rcx,[rip+0x3136]        # 40a153 <flatcc_builder_padding_base@@Base+0xe33>
  40701d:	mov    edx,0x601
  407022:	call   403070 <__assert_fail@plt>
  407027:	lea    rdi,[rip+0x310f]        # 40a13d <flatcc_builder_padding_base@@Base+0xe1d>
  40702e:	lea    rsi,[rip+0x256d]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407035:	lea    rcx,[rip+0x3117]        # 40a153 <flatcc_builder_padding_base@@Base+0xe33>
  40703c:	mov    edx,0x604
  407041:	call   403070 <__assert_fail@plt>
  407046:	lea    rdi,[rip+0x30f0]        # 40a13d <flatcc_builder_padding_base@@Base+0xe1d>
  40704d:	lea    rsi,[rip+0x254e]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407054:	lea    rcx,[rip+0x30f8]        # 40a153 <flatcc_builder_padding_base@@Base+0xe33>
  40705b:	mov    edx,0x608
  407060:	call   403070 <__assert_fail@plt>
  407065:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40706f:	nop

0000000000407070 <flatcc_builder_create_union_vector@@Base>:
  407070:	push   r15
  407072:	push   r14
  407074:	push   r13
  407076:	push   r12
  407078:	push   rbx
  407079:	mov    r14,rdx
  40707c:	mov    r15,rsi
  40707f:	mov    rbx,rdi
  407082:	mov    esi,0x4
  407087:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40708c:	test   eax,eax
  40708e:	je     4070a0 <flatcc_builder_create_union_vector@@Base+0x30>
  407090:	xor    r14d,r14d
  407093:	mov    rax,r14
  407096:	pop    rbx
  407097:	pop    r12
  407099:	pop    r13
  40709b:	pop    r14
  40709d:	pop    r15
  40709f:	ret    
  4070a0:	mov    rax,QWORD PTR [rbx+0x30]
  4070a4:	mov    DWORD PTR [rax+0x10],0x4
  4070ab:	mov    rax,QWORD PTR [rbx+0x30]
  4070af:	mov    DWORD PTR [rax+0x14],0x0
  4070b6:	mov    rax,QWORD PTR [rbx+0x30]
  4070ba:	mov    WORD PTR [rax+0xe],0x5
  4070c0:	mov    ecx,DWORD PTR [rbx+0x28]
  4070c3:	mov    edx,DWORD PTR [rbx+0x70]
  4070c6:	sub    edx,ecx
  4070c8:	add    rcx,QWORD PTR [rbx+0x68]
  4070cc:	mov    QWORD PTR [rbx+0x18],rcx
  4070d0:	cmp    edx,0xfffffffc
  4070d3:	mov    ecx,0xfffffffc
  4070d8:	cmovb  ecx,edx
  4070db:	mov    DWORD PTR [rbx+0x24],ecx
  4070de:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4070e5:	mov    ecx,DWORD PTR [rax+0x14]
  4070e8:	add    ecx,r14d
  4070eb:	jb     40735a <flatcc_builder_create_union_vector@@Base+0x2ea>
  4070f1:	cmp    ecx,0x40000000
  4070f7:	jae    40735a <flatcc_builder_create_union_vector@@Base+0x2ea>
  4070fd:	mov    DWORD PTR [rax+0x14],ecx
  407100:	mov    r12d,DWORD PTR [rbx+0x20]
  407104:	mov    eax,DWORD PTR [rbx+0x24]
  407107:	lea    ecx,[r12+r14*4]
  40710b:	mov    DWORD PTR [rbx+0x20],ecx
  40710e:	cmp    ecx,eax
  407110:	jae    407120 <flatcc_builder_create_union_vector@@Base+0xb0>
  407112:	mov    rsi,QWORD PTR [rbx+0x18]
  407116:	add    r12,rsi
  407119:	jne    40717c <flatcc_builder_create_union_vector@@Base+0x10c>
  40711b:	jmp    407090 <flatcc_builder_create_union_vector@@Base+0x20>
  407120:	add    ecx,0x1
  407123:	lea    rsi,[rbx+0x68]
  407127:	mov    rdi,QWORD PTR [rbx+0x40]
  40712b:	mov    edx,DWORD PTR [rbx+0x28]
  40712e:	add    rdx,rcx
  407131:	mov    ecx,0x1
  407136:	mov    r8d,0x1
  40713c:	call   QWORD PTR [rbx+0x50]
  40713f:	test   eax,eax
  407141:	jne    407090 <flatcc_builder_create_union_vector@@Base+0x20>
  407147:	mov    eax,DWORD PTR [rbx+0x28]
  40714a:	mov    rsi,rax
  40714d:	add    rsi,QWORD PTR [rbx+0x68]
  407151:	mov    QWORD PTR [rbx+0x18],rsi
  407155:	mov    ecx,DWORD PTR [rbx+0x70]
  407158:	sub    ecx,eax
  40715a:	cmp    ecx,0xfffffffc
  40715d:	mov    eax,0xfffffffc
  407162:	cmovb  eax,ecx
  407165:	mov    DWORD PTR [rbx+0x24],eax
  407168:	mov    rcx,QWORD PTR [rbx+0x30]
  40716c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407173:	add    r12,rsi
  407176:	je     407090 <flatcc_builder_create_union_vector@@Base+0x20>
  40717c:	mov    r13d,DWORD PTR [rbx+0x20]
  407180:	lea    ecx,[r14+r13*1]
  407184:	mov    DWORD PTR [rbx+0x20],ecx
  407187:	cmp    ecx,eax
  407189:	jb     4071de <flatcc_builder_create_union_vector@@Base+0x16e>
  40718b:	add    ecx,0x1
  40718e:	lea    rsi,[rbx+0x68]
  407192:	mov    rdi,QWORD PTR [rbx+0x40]
  407196:	mov    edx,DWORD PTR [rbx+0x28]
  407199:	add    rdx,rcx
  40719c:	mov    ecx,0x1
  4071a1:	mov    r8d,0x1
  4071a7:	call   QWORD PTR [rbx+0x50]
  4071aa:	test   eax,eax
  4071ac:	jne    407090 <flatcc_builder_create_union_vector@@Base+0x20>
  4071b2:	mov    eax,DWORD PTR [rbx+0x28]
  4071b5:	mov    rsi,rax
  4071b8:	add    rsi,QWORD PTR [rbx+0x68]
  4071bc:	mov    QWORD PTR [rbx+0x18],rsi
  4071c0:	mov    ecx,DWORD PTR [rbx+0x70]
  4071c3:	sub    ecx,eax
  4071c5:	cmp    ecx,0xfffffffc
  4071c8:	mov    eax,0xfffffffc
  4071cd:	cmovb  eax,ecx
  4071d0:	mov    DWORD PTR [rbx+0x24],eax
  4071d3:	mov    rax,QWORD PTR [rbx+0x30]
  4071d7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4071de:	mov    r12,rsi
  4071e1:	add    r12,r13
  4071e4:	je     407090 <flatcc_builder_create_union_vector@@Base+0x20>
  4071ea:	test   r14,r14
  4071ed:	je     4072a9 <flatcc_builder_create_union_vector@@Base+0x239>
  4071f3:	lea    rcx,[r14-0x1]
  4071f7:	mov    r8d,r14d
  4071fa:	and    r8d,0x3
  4071fe:	cmp    rcx,0x3
  407202:	jae    407210 <flatcc_builder_create_union_vector@@Base+0x1a0>
  407204:	xor    ecx,ecx
  407206:	test   r8,r8
  407209:	jne    407277 <flatcc_builder_create_union_vector@@Base+0x207>
  40720b:	jmp    4072a9 <flatcc_builder_create_union_vector@@Base+0x239>
  407210:	mov    rdx,r14
  407213:	sub    rdx,r8
  407216:	lea    rdi,[rsi+r13*1]
  40721a:	add    rdi,0x3
  40721e:	xor    ecx,ecx
  407220:	movzx  eax,BYTE PTR [r15+rcx*8]
  407225:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407229:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40722e:	mov    DWORD PTR [rsi+rcx*4],eax
  407231:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407237:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40723b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407240:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407244:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40724a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40724e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407253:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407257:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40725d:	mov    BYTE PTR [rdi+rcx*1],al
  407260:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407265:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407269:	add    rcx,0x4
  40726d:	cmp    rdx,rcx
  407270:	jne    407220 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407272:	test   r8,r8
  407275:	je     4072a9 <flatcc_builder_create_union_vector@@Base+0x239>
  407277:	lea    rdx,[rsi+rcx*4]
  40727b:	lea    rdi,[r15+rcx*8]
  40727f:	add    rdi,0x4
  407283:	add    r13,rcx
  407286:	add    r13,rsi
  407289:	xor    ecx,ecx
  40728b:	nop    DWORD PTR [rax+rax*1+0x0]
  407290:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407295:	mov    BYTE PTR [r13+rcx*1+0x0],al
  40729a:	mov    eax,DWORD PTR [rdi+rcx*8]
  40729d:	mov    DWORD PTR [rdx+rcx*4],eax
  4072a0:	add    rcx,0x1
  4072a4:	cmp    r8,rcx
  4072a7:	jne    407290 <flatcc_builder_create_union_vector@@Base+0x220>
  4072a9:	mov    rdi,rbx
  4072ac:	mov    rdx,r14
  4072af:	mov    rcx,r12
  4072b2:	call   4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4072b7:	mov    r15d,eax
  4072ba:	test   eax,eax
  4072bc:	je     4072e2 <flatcc_builder_create_union_vector@@Base+0x272>
  4072be:	mov    ecx,0x1
  4072c3:	mov    r8d,0x1
  4072c9:	mov    r9d,0xffffffff
  4072cf:	mov    rdi,rbx
  4072d2:	mov    rsi,r12
  4072d5:	mov    rdx,r14
  4072d8:	call   406640 <flatcc_builder_create_vector@@Base>
  4072dd:	mov    r14d,eax
  4072e0:	jmp    4072e5 <flatcc_builder_create_union_vector@@Base+0x275>
  4072e2:	xor    r14d,r14d
  4072e5:	shl    r15,0x20
  4072e9:	mov    rdi,QWORD PTR [rbx+0x18]
  4072ed:	mov    edx,DWORD PTR [rbx+0x20]
  4072f0:	xor    esi,esi
  4072f2:	call   403080 <memset@plt>
  4072f7:	mov    rax,QWORD PTR [rbx+0x30]
  4072fb:	mov    ecx,DWORD PTR [rax+0x8]
  4072fe:	mov    DWORD PTR [rbx+0x20],ecx
  407301:	mov    ecx,DWORD PTR [rax]
  407303:	mov    DWORD PTR [rbx+0x28],ecx
  407306:	mov    edx,DWORD PTR [rax+0x4]
  407309:	mov    rsi,rcx
  40730c:	add    rsi,QWORD PTR [rbx+0x68]
  407310:	mov    QWORD PTR [rbx+0x18],rsi
  407314:	mov    esi,DWORD PTR [rbx+0x70]
  407317:	sub    esi,ecx
  407319:	cmp    esi,edx
  40731b:	cmova  esi,edx
  40731e:	mov    DWORD PTR [rbx+0x24],esi
  407321:	movzx  ecx,WORD PTR [rbx+0xea]
  407328:	cmp    WORD PTR [rbx+0xe8],cx
  40732f:	jae    407338 <flatcc_builder_create_union_vector@@Base+0x2c8>
  407331:	mov    WORD PTR [rbx+0xe8],cx
  407338:	or     r14,r15
  40733b:	movzx  ecx,WORD PTR [rax+0xc]
  40733f:	mov    WORD PTR [rbx+0xea],cx
  407346:	add    rax,0xffffffffffffffdc
  40734a:	mov    QWORD PTR [rbx+0x30],rax
  40734e:	add    DWORD PTR [rbx+0x104],0xffffffff
  407355:	jmp    407093 <flatcc_builder_create_union_vector@@Base+0x23>
  40735a:	lea    rdi,[rip+0x330a]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  407361:	lea    rsi,[rip+0x223a]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407368:	lea    rcx,[rip+0x3317]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  40736f:	mov    edx,0x37c
  407374:	call   403070 <__assert_fail@plt>
  407379:	nop    DWORD PTR [rax+0x0]

0000000000407380 <flatcc_builder_create_union_vector_direct@@Base>:
  407380:	push   r15
  407382:	push   r14
  407384:	push   r12
  407386:	push   rbx
  407387:	push   rax
  407388:	mov    r14,rcx
  40738b:	mov    r15,rsi
  40738e:	mov    r12,rdi
  407391:	mov    rsi,rdx
  407394:	mov    rdx,rcx
  407397:	mov    rcx,r15
  40739a:	call   4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40739f:	mov    ebx,eax
  4073a1:	test   eax,eax
  4073a3:	je     4073c8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  4073a5:	mov    ecx,0x1
  4073aa:	mov    r8d,0x1
  4073b0:	mov    r9d,0xffffffff
  4073b6:	mov    rdi,r12
  4073b9:	mov    rsi,r15
  4073bc:	mov    rdx,r14
  4073bf:	call   406640 <flatcc_builder_create_vector@@Base>
  4073c4:	mov    eax,eax
  4073c6:	jmp    4073ca <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  4073c8:	xor    eax,eax
  4073ca:	shl    rbx,0x20
  4073ce:	or     rbx,rax
  4073d1:	mov    rax,rbx
  4073d4:	add    rsp,0x8
  4073d8:	pop    rbx
  4073d9:	pop    r12
  4073db:	pop    r14
  4073dd:	pop    r15
  4073df:	ret    

00000000004073e0 <flatcc_builder_start_union_vector@@Base>:
  4073e0:	push   rbx
  4073e1:	mov    rbx,rdi
  4073e4:	mov    esi,0x4
  4073e9:	call   4048b0 <flatcc_builder_start_buffer@@Base+0xe0>
  4073ee:	mov    ecx,eax
  4073f0:	mov    eax,0xffffffff
  4073f5:	test   ecx,ecx
  4073f7:	je     4073fb <flatcc_builder_start_union_vector@@Base+0x1b>
  4073f9:	pop    rbx
  4073fa:	ret    
  4073fb:	mov    rax,QWORD PTR [rbx+0x30]
  4073ff:	mov    DWORD PTR [rax+0x10],0x8
  407406:	mov    rax,QWORD PTR [rbx+0x30]
  40740a:	mov    DWORD PTR [rax+0x14],0x0
  407411:	mov    rax,QWORD PTR [rbx+0x30]
  407415:	mov    WORD PTR [rax+0xe],0x7
  40741b:	mov    ecx,DWORD PTR [rbx+0x28]
  40741e:	mov    edx,DWORD PTR [rbx+0x70]
  407421:	sub    edx,ecx
  407423:	add    rcx,QWORD PTR [rbx+0x68]
  407427:	mov    QWORD PTR [rbx+0x18],rcx
  40742b:	cmp    edx,0xfffffffc
  40742e:	mov    ecx,0xfffffffc
  407433:	cmovb  ecx,edx
  407436:	mov    DWORD PTR [rbx+0x24],ecx
  407439:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407440:	xor    eax,eax
  407442:	pop    rbx
  407443:	ret    
  407444:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40744e:	xchg   ax,ax

0000000000407450 <flatcc_builder_end_union_vector@@Base>:
  407450:	push   rbp
  407451:	push   r15
  407453:	push   r14
  407455:	push   r13
  407457:	push   r12
  407459:	push   rbx
  40745a:	push   rax
  40745b:	mov    rax,QWORD PTR [rdi+0x30]
  40745f:	movzx  ecx,WORD PTR [rax+0xe]
  407463:	cmp    ecx,0x7
  407466:	jne    407866 <flatcc_builder_end_union_vector@@Base+0x416>
  40746c:	mov    r13,rdi
  40746f:	mov    r14d,DWORD PTR [rax+0x14]
  407473:	lea    eax,[r14+r14*4]
  407477:	mov    r12d,DWORD PTR [rdi+0x20]
  40747b:	add    eax,r12d
  40747e:	mov    DWORD PTR [rdi+0x20],eax
  407481:	cmp    eax,DWORD PTR [rdi+0x24]
  407484:	jae    40748c <flatcc_builder_end_union_vector@@Base+0x3c>
  407486:	mov    r8,QWORD PTR [r13+0x18]
  40748a:	jmp    4074e4 <flatcc_builder_end_union_vector@@Base+0x94>
  40748c:	add    eax,0x1
  40748f:	lea    rsi,[r13+0x68]
  407493:	mov    rdi,QWORD PTR [r13+0x40]
  407497:	mov    edx,DWORD PTR [r13+0x28]
  40749b:	add    rdx,rax
  40749e:	mov    ecx,0x1
  4074a3:	mov    r8d,0x1
  4074a9:	call   QWORD PTR [r13+0x50]
  4074ad:	test   eax,eax
  4074af:	jne    407626 <flatcc_builder_end_union_vector@@Base+0x1d6>
  4074b5:	mov    eax,DWORD PTR [r13+0x28]
  4074b9:	mov    r8,rax
  4074bc:	add    r8,QWORD PTR [r13+0x68]
  4074c0:	mov    QWORD PTR [r13+0x18],r8
  4074c4:	mov    ecx,DWORD PTR [r13+0x70]
  4074c8:	sub    ecx,eax
  4074ca:	cmp    ecx,0xfffffffc
  4074cd:	mov    eax,0xfffffffc
  4074d2:	cmovb  eax,ecx
  4074d5:	mov    DWORD PTR [r13+0x24],eax
  4074d9:	mov    rax,QWORD PTR [r13+0x30]
  4074dd:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4074e4:	mov    rsi,r8
  4074e7:	add    rsi,r12
  4074ea:	je     407626 <flatcc_builder_end_union_vector@@Base+0x1d6>
  4074f0:	lea    r15,[rsi+r14*4]
  4074f4:	test   r14d,r14d
  4074f7:	je     4075ea <flatcc_builder_end_union_vector@@Base+0x19a>
  4074fd:	cmp    r14d,0x9
  407501:	jae    4076ba <flatcc_builder_end_union_vector@@Base+0x26a>
  407507:	xor    r9d,r9d
  40750a:	mov    r11d,r14d
  40750d:	sub    r11d,r9d
  407510:	mov    r10,r9
  407513:	not    r10
  407516:	add    r10,r14
  407519:	and    r11,0x3
  40751d:	je     407562 <flatcc_builder_end_union_vector@@Base+0x112>
  40751f:	mov    rdx,r9
  407522:	neg    rdx
  407525:	lea    rbp,[r12+r9*4]
  407529:	add    rbp,r8
  40752c:	lea    rbx,[r8+r9*8]
  407530:	add    rbx,0x4
  407534:	lea    rax,[r9+r14*4]
  407538:	add    rax,r12
  40753b:	add    rax,r8
  40753e:	xor    edi,edi
  407540:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407545:	mov    BYTE PTR [rax+rdi*1],cl
  407548:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40754b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40754f:	add    rdx,0xffffffffffffffff
  407553:	add    rdi,0x1
  407557:	cmp    r11,rdi
  40755a:	jne    407540 <flatcc_builder_end_union_vector@@Base+0xf0>
  40755c:	neg    rdx
  40755f:	mov    r9,rdx
  407562:	cmp    r10,0x3
  407566:	jb     4075ea <flatcc_builder_end_union_vector@@Base+0x19a>
  40756c:	mov    rbp,r14
  40756f:	sub    rbp,r9
  407572:	lea    rcx,[r12+r9*4]
  407576:	lea    rdx,[r8+rcx*1]
  40757a:	add    rdx,0xc
  40757e:	lea    rdi,[r8+r9*8]
  407582:	add    rdi,0x1c
  407586:	lea    rcx,[r9+r14*4]
  40758a:	add    rcx,r12
  40758d:	add    rcx,r8
  407590:	add    rcx,0x3
  407594:	xor    ebx,ebx
  407596:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4075a0:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  4075a5:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  4075a9:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  4075ad:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  4075b1:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  4075b6:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  4075ba:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  4075be:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  4075c2:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  4075c7:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  4075cb:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  4075cf:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  4075d3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  4075d8:	mov    BYTE PTR [rcx+rbx*1],al
  4075db:	mov    eax,DWORD PTR [rdi+rbx*8]
  4075de:	mov    DWORD PTR [rdx+rbx*4],eax
  4075e1:	add    rbx,0x4
  4075e5:	cmp    rbp,rbx
  4075e8:	jne    4075a0 <flatcc_builder_end_union_vector@@Base+0x150>
  4075ea:	mov    rdi,r13
  4075ed:	mov    rdx,r14
  4075f0:	mov    rcx,r15
  4075f3:	vzeroupper 
  4075f6:	call   4068c0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4075fb:	mov    r12d,eax
  4075fe:	test   eax,eax
  407600:	je     40762b <flatcc_builder_end_union_vector@@Base+0x1db>
  407602:	mov    ecx,0x1
  407607:	mov    r8d,0x1
  40760d:	mov    r9d,0xffffffff
  407613:	mov    rdi,r13
  407616:	mov    rsi,r15
  407619:	mov    rdx,r14
  40761c:	call   406640 <flatcc_builder_create_vector@@Base>
  407621:	mov    r14d,eax
  407624:	jmp    40762e <flatcc_builder_end_union_vector@@Base+0x1de>
  407626:	xor    r14d,r14d
  407629:	jmp    4076a8 <flatcc_builder_end_union_vector@@Base+0x258>
  40762b:	xor    r14d,r14d
  40762e:	shl    r12,0x20
  407632:	mov    rdi,QWORD PTR [r13+0x18]
  407636:	mov    edx,DWORD PTR [r13+0x20]
  40763a:	xor    esi,esi
  40763c:	call   403080 <memset@plt>
  407641:	mov    rax,QWORD PTR [r13+0x30]
  407645:	mov    ecx,DWORD PTR [rax+0x8]
  407648:	mov    DWORD PTR [r13+0x20],ecx
  40764c:	mov    ecx,DWORD PTR [rax]
  40764e:	mov    DWORD PTR [r13+0x28],ecx
  407652:	mov    edx,DWORD PTR [rax+0x4]
  407655:	mov    rsi,rcx
  407658:	add    rsi,QWORD PTR [r13+0x68]
  40765c:	mov    QWORD PTR [r13+0x18],rsi
  407660:	mov    esi,DWORD PTR [r13+0x70]
  407664:	sub    esi,ecx
  407666:	cmp    esi,edx
  407668:	cmova  esi,edx
  40766b:	mov    DWORD PTR [r13+0x24],esi
  40766f:	movzx  ecx,WORD PTR [r13+0xea]
  407677:	cmp    WORD PTR [r13+0xe8],cx
  40767f:	jae    407689 <flatcc_builder_end_union_vector@@Base+0x239>
  407681:	mov    WORD PTR [r13+0xe8],cx
  407689:	or     r14,r12
  40768c:	movzx  ecx,WORD PTR [rax+0xc]
  407690:	mov    WORD PTR [r13+0xea],cx
  407698:	add    rax,0xffffffffffffffdc
  40769c:	mov    QWORD PTR [r13+0x30],rax
  4076a0:	add    DWORD PTR [r13+0x104],0xffffffff
  4076a8:	mov    rax,r14
  4076ab:	add    rsp,0x8
  4076af:	pop    rbx
  4076b0:	pop    r12
  4076b2:	pop    r13
  4076b4:	pop    r14
  4076b6:	pop    r15
  4076b8:	pop    rbp
  4076b9:	ret    
  4076ba:	lea    rax,[r14-0x1]
  4076be:	mov    ecx,0x8
  4076c3:	mul    rcx
  4076c6:	seto   cl
  4076c9:	lea    rdi,[r8+0x4]
  4076cd:	mov    rdx,rax
  4076d0:	add    rdx,rdi
  4076d3:	setb   dl
  4076d6:	xor    r9d,r9d
  4076d9:	add    rax,r8
  4076dc:	jb     40750a <flatcc_builder_end_union_vector@@Base+0xba>
  4076e2:	test   cl,cl
  4076e4:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  4076ea:	test   dl,dl
  4076ec:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  4076f2:	test   cl,cl
  4076f4:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  4076fa:	lea    rcx,[r14+r14*4]
  4076fe:	add    rcx,r12
  407701:	add    rcx,r8
  407704:	lea    rdx,[r8+r14*8]
  407708:	add    rdx,0xfffffffffffffff9
  40770c:	cmp    rdx,r15
  40770f:	seta   r11b
  407713:	lea    rbx,[r8+r14*8]
  407717:	cmp    r8,rcx
  40771a:	setb   r10b
  40771e:	cmp    rbx,r15
  407721:	seta   al
  407724:	cmp    rdi,rcx
  407727:	setb   bpl
  40772b:	cmp    rsi,rdx
  40772e:	setb   cl
  407731:	cmp    r8,r15
  407734:	setb   BYTE PTR [rsp+0x7]
  407739:	cmp    rsi,rbx
  40773c:	setb   dl
  40773f:	cmp    rdi,r15
  407742:	setb   dil
  407746:	xor    r9d,r9d
  407749:	test   r11b,r10b
  40774c:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  407752:	and    al,bpl
  407755:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  40775b:	and    cl,BYTE PTR [rsp+0x7]
  40775f:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  407765:	and    dl,dil
  407768:	jne    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  40776e:	mov    eax,r14d
  407771:	and    eax,0x7
  407774:	test   rax,rax
  407777:	mov    ecx,0x8
  40777c:	cmovne rcx,rax
  407780:	mov    r9,r14
  407783:	sub    r9,rcx
  407786:	vmovdqa ymm0,YMMWORD PTR [rip+0x1d92]        # 409520 <flatcc_builder_padding_base@@Base+0x200>
  40778e:	vmovdqa ymm1,YMMWORD PTR [rip+0x1daa]        # 409540 <flatcc_builder_padding_base@@Base+0x220>
  407796:	xor    eax,eax
  407798:	vmovdqa xmm8,XMMWORD PTR [rip+0x1dc0]        # 409560 <flatcc_builder_padding_base@@Base+0x240>
  4077a0:	vmovdqa xmm9,XMMWORD PTR [rip+0x1dc8]        # 409570 <flatcc_builder_padding_base@@Base+0x250>
  4077a8:	vpbroadcastq ymm4,QWORD PTR [rip+0x1dcf]        # 409580 <flatcc_builder_padding_base@@Base+0x260>
  4077b1:	vpbroadcastq ymm5,QWORD PTR [rip+0x1dce]        # 409588 <flatcc_builder_padding_base@@Base+0x268>
  4077ba:	mov    rdi,r8
  4077bd:	nop    DWORD PTR [rax]
  4077c0:	vmovdqu ymm6,YMMWORD PTR [rdi]
  4077c4:	vmovdqu ymm7,YMMWORD PTR [rdi+0x20]
  4077c9:	vextracti128 xmm2,ymm7,0x1
  4077cf:	vpshufb xmm2,xmm2,xmm8
  4077d4:	vpshufb xmm7,xmm7,xmm8
  4077d9:	vpunpcklwd xmm2,xmm7,xmm2
  4077dd:	vextracti128 xmm7,ymm6,0x1
  4077e3:	vpshufb xmm7,xmm7,xmm9
  4077e8:	vpshufb xmm6,xmm6,xmm9
  4077ed:	vpunpcklwd xmm6,xmm6,xmm7
  4077f1:	vpblendd xmm2,xmm6,xmm2,0x2
  4077f7:	vmovq  QWORD PTR [r15+rax*1],xmm2
  4077fd:	vpsllq ymm2,ymm1,0x3
  407802:	vmovq  xmm6,r8
  407807:	vpbroadcastq ymm6,xmm6
  40780c:	vpaddq ymm2,ymm6,ymm2
  407810:	vpaddq ymm2,ymm2,ymm4
  407814:	vpsllq ymm7,ymm0,0x3
  407819:	vpaddq ymm6,ymm6,ymm7
  40781d:	vpaddq ymm6,ymm6,ymm4
  407821:	vpcmpeqd xmm7,xmm7,xmm7
  407825:	vpgatherqd xmm3,DWORD PTR [ymm6*1+0x0],xmm7
  40782f:	vpcmpeqd xmm6,xmm6,xmm6
  407833:	vpgatherqd xmm7,DWORD PTR [ymm2*1+0x0],xmm6
  40783d:	vinserti128 ymm2,ymm7,xmm3,0x1
  407843:	vmovdqu YMMWORD PTR [rsi+rax*4],ymm2
  407848:	add    rax,0x8
  40784c:	vpaddq ymm1,ymm1,ymm5
  407850:	vpaddq ymm0,ymm0,ymm5
  407854:	add    rdi,0x40
  407858:	cmp    r9,rax
  40785b:	jne    4077c0 <flatcc_builder_end_union_vector@@Base+0x370>
  407861:	jmp    40750a <flatcc_builder_end_union_vector@@Base+0xba>
  407866:	lea    rdi,[rip+0x2971]        # 40a1de <flatcc_builder_padding_base@@Base+0xebe>
  40786d:	lea    rsi,[rip+0x1d2e]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407874:	lea    rcx,[rip+0x2995]        # 40a210 <flatcc_builder_padding_base@@Base+0xef0>
  40787b:	mov    edx,0x651
  407880:	call   403070 <__assert_fail@plt>
  407885:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40788f:	nop

0000000000407890 <flatcc_builder_union_vector_count@@Base>:
  407890:	mov    rax,QWORD PTR [rdi+0x30]
  407894:	mov    eax,DWORD PTR [rax+0x14]
  407897:	ret    
  407898:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004078a0 <flatcc_builder_union_vector_edit@@Base>:
  4078a0:	mov    rax,QWORD PTR [rdi+0x18]
  4078a4:	ret    
  4078a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4078af:	nop

00000000004078b0 <flatcc_builder_extend_union_vector@@Base>:
  4078b0:	push   r14
  4078b2:	push   rbx
  4078b3:	push   rax
  4078b4:	mov    rax,QWORD PTR [rdi+0x30]
  4078b8:	mov    ecx,DWORD PTR [rax+0x14]
  4078bb:	add    ecx,esi
  4078bd:	jb     407945 <flatcc_builder_extend_union_vector@@Base+0x95>
  4078c3:	cmp    ecx,0x20000000
  4078c9:	jae    407945 <flatcc_builder_extend_union_vector@@Base+0x95>
  4078cb:	mov    rbx,rdi
  4078ce:	mov    DWORD PTR [rax+0x14],ecx
  4078d1:	mov    r14d,DWORD PTR [rdi+0x20]
  4078d5:	lea    eax,[r14+rsi*8]
  4078d9:	mov    DWORD PTR [rdi+0x20],eax
  4078dc:	cmp    eax,DWORD PTR [rdi+0x24]
  4078df:	jae    4078e7 <flatcc_builder_extend_union_vector@@Base+0x37>
  4078e1:	mov    rax,QWORD PTR [rbx+0x18]
  4078e5:	jmp    40793a <flatcc_builder_extend_union_vector@@Base+0x8a>
  4078e7:	add    eax,0x1
  4078ea:	lea    rsi,[rbx+0x68]
  4078ee:	mov    rdi,QWORD PTR [rbx+0x40]
  4078f2:	mov    edx,DWORD PTR [rbx+0x28]
  4078f5:	add    rdx,rax
  4078f8:	mov    ecx,0x1
  4078fd:	mov    r8d,0x1
  407903:	call   QWORD PTR [rbx+0x50]
  407906:	test   eax,eax
  407908:	je     40790e <flatcc_builder_extend_union_vector@@Base+0x5e>
  40790a:	xor    eax,eax
  40790c:	jmp    40793d <flatcc_builder_extend_union_vector@@Base+0x8d>
  40790e:	mov    ecx,DWORD PTR [rbx+0x28]
  407911:	mov    rax,rcx
  407914:	add    rax,QWORD PTR [rbx+0x68]
  407918:	mov    QWORD PTR [rbx+0x18],rax
  40791c:	mov    edx,DWORD PTR [rbx+0x70]
  40791f:	sub    edx,ecx
  407921:	cmp    edx,0xfffffffc
  407924:	mov    ecx,0xfffffffc
  407929:	cmovb  ecx,edx
  40792c:	mov    DWORD PTR [rbx+0x24],ecx
  40792f:	mov    rcx,QWORD PTR [rbx+0x30]
  407933:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40793a:	add    rax,r14
  40793d:	add    rsp,0x8
  407941:	pop    rbx
  407942:	pop    r14
  407944:	ret    
  407945:	lea    rdi,[rip+0x2d1f]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  40794c:	lea    rsi,[rip+0x1c4f]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407953:	lea    rcx,[rip+0x2d2c]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  40795a:	mov    edx,0x37c
  40795f:	call   403070 <__assert_fail@plt>
  407964:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40796e:	xchg   ax,ax

0000000000407970 <flatcc_builder_truncate_union_vector@@Base>:
  407970:	push   rax
  407971:	mov    rcx,QWORD PTR [rdi+0x30]
  407975:	movzx  edx,WORD PTR [rcx+0xe]
  407979:	cmp    edx,0x7
  40797c:	jne    4079b0 <flatcc_builder_truncate_union_vector@@Base+0x40>
  40797e:	mov    rax,rsi
  407981:	mov    edx,DWORD PTR [rcx+0x14]
  407984:	sub    edx,eax
  407986:	jb     4079cf <flatcc_builder_truncate_union_vector@@Base+0x5f>
  407988:	mov    DWORD PTR [rcx+0x14],edx
  40798b:	mov    rcx,QWORD PTR [rdi+0x30]
  40798f:	imul   eax,DWORD PTR [rcx+0x10]
  407993:	mov    ecx,DWORD PTR [rdi+0x20]
  407996:	sub    ecx,eax
  407998:	mov    DWORD PTR [rdi+0x20],ecx
  40799b:	add    rcx,QWORD PTR [rdi+0x18]
  40799f:	xor    esi,esi
  4079a1:	mov    rdi,rcx
  4079a4:	mov    rdx,rax
  4079a7:	call   403080 <memset@plt>
  4079ac:	xor    eax,eax
  4079ae:	pop    rcx
  4079af:	ret    
  4079b0:	lea    rdi,[rip+0x2827]        # 40a1de <flatcc_builder_padding_base@@Base+0xebe>
  4079b7:	lea    rsi,[rip+0x1be4]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4079be:	lea    rcx,[rip+0x289e]        # 40a263 <flatcc_builder_padding_base@@Base+0xf43>
  4079c5:	mov    edx,0x681
  4079ca:	call   403070 <__assert_fail@plt>
  4079cf:	lea    rdi,[rip+0x226c]        # 409c42 <flatcc_builder_padding_base@@Base+0x922>
  4079d6:	lea    rsi,[rip+0x1bc5]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4079dd:	lea    rcx,[rip+0x287f]        # 40a263 <flatcc_builder_padding_base@@Base+0xf43>
  4079e4:	mov    edx,0x682
  4079e9:	call   403070 <__assert_fail@plt>
  4079ee:	xchg   ax,ax

00000000004079f0 <flatcc_builder_union_vector_push@@Base>:
  4079f0:	push   r15
  4079f2:	push   r14
  4079f4:	push   rbx
  4079f5:	mov    rax,QWORD PTR [rdi+0x30]
  4079f9:	movzx  ecx,WORD PTR [rax+0xe]
  4079fd:	cmp    ecx,0x7
  407a00:	jne    407a9a <flatcc_builder_union_vector_push@@Base+0xaa>
  407a06:	mov    ecx,DWORD PTR [rax+0x14]
  407a09:	cmp    ecx,0x1fffffff
  407a0f:	je     407a5c <flatcc_builder_union_vector_push@@Base+0x6c>
  407a11:	mov    r14,rsi
  407a14:	mov    rbx,rdi
  407a17:	add    ecx,0x1
  407a1a:	mov    DWORD PTR [rax+0x14],ecx
  407a1d:	mov    r15d,DWORD PTR [rdi+0x20]
  407a21:	lea    eax,[r15+0x8]
  407a25:	mov    DWORD PTR [rdi+0x20],eax
  407a28:	cmp    eax,DWORD PTR [rdi+0x24]
  407a2b:	jae    407a38 <flatcc_builder_union_vector_push@@Base+0x48>
  407a2d:	mov    rax,QWORD PTR [rbx+0x18]
  407a31:	add    rax,r15
  407a34:	jne    407a91 <flatcc_builder_union_vector_push@@Base+0xa1>
  407a36:	jmp    407a5c <flatcc_builder_union_vector_push@@Base+0x6c>
  407a38:	lea    eax,[r15+0x9]
  407a3c:	lea    rsi,[rbx+0x68]
  407a40:	mov    rdi,QWORD PTR [rbx+0x40]
  407a44:	mov    edx,DWORD PTR [rbx+0x28]
  407a47:	add    rdx,rax
  407a4a:	mov    ecx,0x1
  407a4f:	mov    r8d,0x1
  407a55:	call   QWORD PTR [rbx+0x50]
  407a58:	test   eax,eax
  407a5a:	je     407a60 <flatcc_builder_union_vector_push@@Base+0x70>
  407a5c:	xor    eax,eax
  407a5e:	jmp    407a94 <flatcc_builder_union_vector_push@@Base+0xa4>
  407a60:	mov    ecx,DWORD PTR [rbx+0x28]
  407a63:	mov    rax,rcx
  407a66:	add    rax,QWORD PTR [rbx+0x68]
  407a6a:	mov    QWORD PTR [rbx+0x18],rax
  407a6e:	mov    edx,DWORD PTR [rbx+0x70]
  407a71:	sub    edx,ecx
  407a73:	cmp    edx,0xfffffffc
  407a76:	mov    ecx,0xfffffffc
  407a7b:	cmovb  ecx,edx
  407a7e:	mov    DWORD PTR [rbx+0x24],ecx
  407a81:	mov    rcx,QWORD PTR [rbx+0x30]
  407a85:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407a8c:	add    rax,r15
  407a8f:	je     407a5c <flatcc_builder_union_vector_push@@Base+0x6c>
  407a91:	mov    QWORD PTR [rax],r14
  407a94:	pop    rbx
  407a95:	pop    r14
  407a97:	pop    r15
  407a99:	ret    
  407a9a:	lea    rdi,[rip+0x273d]        # 40a1de <flatcc_builder_padding_base@@Base+0xebe>
  407aa1:	lea    rsi,[rip+0x1afa]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407aa8:	lea    rcx,[rip+0x27f9]        # 40a2a8 <flatcc_builder_padding_base@@Base+0xf88>
  407aaf:	mov    edx,0x68d
  407ab4:	call   403070 <__assert_fail@plt>
  407ab9:	nop    DWORD PTR [rax+0x0]

0000000000407ac0 <flatcc_builder_append_union_vector@@Base>:
  407ac0:	push   r15
  407ac2:	push   r14
  407ac4:	push   r13
  407ac6:	push   r12
  407ac8:	push   rbx
  407ac9:	mov    rax,QWORD PTR [rdi+0x30]
  407acd:	movzx  ecx,WORD PTR [rax+0xe]
  407ad1:	cmp    ecx,0x7
  407ad4:	jne    407bb1 <flatcc_builder_append_union_vector@@Base+0xf1>
  407ada:	mov    r15,rdx
  407add:	mov    ecx,DWORD PTR [rax+0x14]
  407ae0:	add    ecx,r15d
  407ae3:	jb     407b92 <flatcc_builder_append_union_vector@@Base+0xd2>
  407ae9:	cmp    ecx,0x20000000
  407aef:	jae    407b92 <flatcc_builder_append_union_vector@@Base+0xd2>
  407af5:	mov    r14,rsi
  407af8:	mov    rbx,rdi
  407afb:	mov    DWORD PTR [rax+0x14],ecx
  407afe:	mov    r13d,DWORD PTR [rdi+0x20]
  407b02:	lea    eax,[r13+r15*8+0x0]
  407b07:	mov    DWORD PTR [rdi+0x20],eax
  407b0a:	cmp    eax,DWORD PTR [rdi+0x24]
  407b0d:	jae    407b1a <flatcc_builder_append_union_vector@@Base+0x5a>
  407b0f:	mov    r12,QWORD PTR [rbx+0x18]
  407b13:	add    r12,r13
  407b16:	jne    407b73 <flatcc_builder_append_union_vector@@Base+0xb3>
  407b18:	jmp    407b3d <flatcc_builder_append_union_vector@@Base+0x7d>
  407b1a:	add    eax,0x1
  407b1d:	lea    rsi,[rbx+0x68]
  407b21:	mov    rdi,QWORD PTR [rbx+0x40]
  407b25:	mov    edx,DWORD PTR [rbx+0x28]
  407b28:	add    rdx,rax
  407b2b:	mov    ecx,0x1
  407b30:	mov    r8d,0x1
  407b36:	call   QWORD PTR [rbx+0x50]
  407b39:	test   eax,eax
  407b3b:	je     407b42 <flatcc_builder_append_union_vector@@Base+0x82>
  407b3d:	xor    r12d,r12d
  407b40:	jmp    407b85 <flatcc_builder_append_union_vector@@Base+0xc5>
  407b42:	mov    eax,DWORD PTR [rbx+0x28]
  407b45:	mov    r12,rax
  407b48:	add    r12,QWORD PTR [rbx+0x68]
  407b4c:	mov    QWORD PTR [rbx+0x18],r12
  407b50:	mov    ecx,DWORD PTR [rbx+0x70]
  407b53:	sub    ecx,eax
  407b55:	cmp    ecx,0xfffffffc
  407b58:	mov    eax,0xfffffffc
  407b5d:	cmovb  eax,ecx
  407b60:	mov    DWORD PTR [rbx+0x24],eax
  407b63:	mov    rax,QWORD PTR [rbx+0x30]
  407b67:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407b6e:	add    r12,r13
  407b71:	je     407b3d <flatcc_builder_append_union_vector@@Base+0x7d>
  407b73:	shl    r15d,0x3
  407b77:	mov    edx,r15d
  407b7a:	mov    rdi,r12
  407b7d:	mov    rsi,r14
  407b80:	call   4030d0 <memcpy@plt>
  407b85:	mov    rax,r12
  407b88:	pop    rbx
  407b89:	pop    r12
  407b8b:	pop    r13
  407b8d:	pop    r14
  407b8f:	pop    r15
  407b91:	ret    
  407b92:	lea    rdi,[rip+0x2ad2]        # 40a66b <flatcc_builder_padding_base@@Base+0x134b>
  407b99:	lea    rsi,[rip+0x1a02]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407ba0:	lea    rcx,[rip+0x2adf]        # 40a686 <flatcc_builder_padding_base@@Base+0x1366>
  407ba7:	mov    edx,0x37c
  407bac:	call   403070 <__assert_fail@plt>
  407bb1:	lea    rdi,[rip+0x2626]        # 40a1de <flatcc_builder_padding_base@@Base+0xebe>
  407bb8:	lea    rsi,[rip+0x19e3]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407bbf:	lea    rcx,[rip+0x274f]        # 40a315 <flatcc_builder_padding_base@@Base+0xff5>
  407bc6:	mov    edx,0x69c
  407bcb:	call   403070 <__assert_fail@plt>

0000000000407bd0 <flatcc_builder_create_string@@Base>:
  407bd0:	push   rbp
  407bd1:	push   rbx
  407bd2:	sub    rsp,0x98
  407bd9:	xor    ebp,ebp
  407bdb:	mov    rax,rdx
  407bde:	shr    rax,0x20
  407be2:	jne    407cb8 <flatcc_builder_create_string@@Base+0xe8>
  407be8:	mov    rbx,rdi
  407beb:	mov    DWORD PTR [rsp+0x4],edx
  407bef:	mov    ebp,DWORD PTR [rdi+0xf0]
  407bf5:	mov    eax,edx
  407bf7:	not    eax
  407bf9:	add    eax,ebp
  407bfb:	and    eax,0x3
  407bfe:	add    eax,0x1
  407c01:	mov    QWORD PTR [rsp+0x8],0x4
  407c0a:	lea    rcx,[rsp+0x4]
  407c0f:	mov    QWORD PTR [rsp+0x18],rcx
  407c14:	mov    QWORD PTR [rsp+0x20],0x4
  407c1d:	mov    DWORD PTR [rsp+0x10],0x1
  407c25:	test   rdx,rdx
  407c28:	je     407c4c <flatcc_builder_create_string@@Base+0x7c>
  407c2a:	lea    rcx,[rdx+0x4]
  407c2e:	mov    QWORD PTR [rsp+0x8],rcx
  407c33:	mov    QWORD PTR [rsp+0x28],rsi
  407c38:	mov    QWORD PTR [rsp+0x30],rdx
  407c3d:	mov    DWORD PTR [rsp+0x10],0x2
  407c45:	mov    edx,0x2
  407c4a:	jmp    407c56 <flatcc_builder_create_string@@Base+0x86>
  407c4c:	mov    edx,0x1
  407c51:	mov    ecx,0x4
  407c56:	mov    esi,eax
  407c58:	lea    r8,[rcx+rsi*1]
  407c5c:	mov    QWORD PTR [rsp+0x8],r8
  407c61:	mov    eax,edx
  407c63:	shl    rax,0x4
  407c67:	lea    rdi,[rip+0x16b2]        # 409320 <flatcc_builder_padding_base@@Base>
  407c6e:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407c73:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407c78:	add    edx,0x1
  407c7b:	mov    DWORD PTR [rsp+0x10],edx
  407c7f:	cmp    r8,0x11
  407c83:	setb   al
  407c86:	add    rcx,rsi
  407c89:	add    rcx,0xfffffffffffffff0
  407c8d:	shr    rcx,0x20
  407c91:	sete   cl
  407c94:	test   r8d,r8d
  407c97:	jle    407cc4 <flatcc_builder_create_string@@Base+0xf4>
  407c99:	or     al,cl
  407c9b:	je     407cc4 <flatcc_builder_create_string@@Base+0xf4>
  407c9d:	sub    ebp,r8d
  407ca0:	mov    rdi,QWORD PTR [rbx+0x38]
  407ca4:	lea    rsi,[rsp+0x18]
  407ca9:	mov    ecx,ebp
  407cab:	call   QWORD PTR [rbx+0x48]
  407cae:	test   eax,eax
  407cb0:	jne    407ce3 <flatcc_builder_create_string@@Base+0x113>
  407cb2:	mov    DWORD PTR [rbx+0xf0],ebp
  407cb8:	mov    eax,ebp
  407cba:	add    rsp,0x98
  407cc1:	pop    rbx
  407cc2:	pop    rbp
  407cc3:	ret    
  407cc4:	lea    rdi,[rip+0x2a97]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  407ccb:	lea    rsi,[rip+0x18d0]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407cd2:	lea    rcx,[rip+0x2948]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  407cd9:	mov    edx,0x287
  407cde:	call   403070 <__assert_fail@plt>
  407ce3:	lea    rdi,[rip+0x2a78]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  407cea:	lea    rsi,[rip+0x18b1]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407cf1:	lea    rcx,[rip+0x2929]        # 40a621 <flatcc_builder_padding_base@@Base+0x1301>
  407cf8:	mov    edx,0x28b
  407cfd:	call   403070 <__assert_fail@plt>
  407d02:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d0c:	nop    DWORD PTR [rax+0x0]

0000000000407d10 <flatcc_builder_create_string_str@@Base>:
  407d10:	push   r14
  407d12:	push   rbx
  407d13:	push   rax
  407d14:	mov    rbx,rsi
  407d17:	mov    r14,rdi
  407d1a:	mov    rdi,rsi
  407d1d:	call   403050 <strlen@plt>
  407d22:	mov    rdi,r14
  407d25:	mov    rsi,rbx
  407d28:	mov    rdx,rax
  407d2b:	add    rsp,0x8
  407d2f:	pop    rbx
  407d30:	pop    r14
  407d32:	jmp    407bd0 <flatcc_builder_create_string@@Base>
  407d37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407d40 <flatcc_builder_create_string_strn@@Base>:
  407d40:	push   r15
  407d42:	push   r14
  407d44:	push   rbx
  407d45:	mov    rbx,rdx
  407d48:	mov    r14,rsi
  407d4b:	mov    r15,rdi
  407d4e:	xor    esi,esi
  407d50:	mov    rdi,r14
  407d53:	call   4030a0 <memchr@plt>
  407d58:	mov    rcx,rax
  407d5b:	sub    rcx,r14
  407d5e:	test   rax,rax
  407d61:	cmovne rbx,rcx
  407d65:	mov    rdi,r15
  407d68:	mov    rsi,r14
  407d6b:	mov    rdx,rbx
  407d6e:	pop    rbx
  407d6f:	pop    r14
  407d71:	pop    r15
  407d73:	jmp    407bd0 <flatcc_builder_create_string@@Base>
  407d78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407d80 <flatcc_builder_end_string@@Base>:
  407d80:	push   rbp
  407d81:	push   rbx
  407d82:	push   rax
  407d83:	mov    rax,QWORD PTR [rdi+0x30]
  407d87:	movzx  ecx,WORD PTR [rax+0xe]
  407d8b:	cmp    ecx,0x6
  407d8e:	jne    407e27 <flatcc_builder_end_string@@Base+0xa7>
  407d94:	mov    rbx,rdi
  407d97:	mov    edx,DWORD PTR [rax+0x14]
  407d9a:	cmp    edx,DWORD PTR [rdi+0x20]
  407d9d:	jne    407e46 <flatcc_builder_end_string@@Base+0xc6>
  407da3:	mov    rsi,QWORD PTR [rbx+0x18]
  407da7:	mov    rdi,rbx
  407daa:	call   407bd0 <flatcc_builder_create_string@@Base>
  407daf:	mov    ebp,eax
  407db1:	test   eax,eax
  407db3:	je     407e1e <flatcc_builder_end_string@@Base+0x9e>
  407db5:	mov    rdi,QWORD PTR [rbx+0x18]
  407db9:	mov    edx,DWORD PTR [rbx+0x20]
  407dbc:	xor    esi,esi
  407dbe:	call   403080 <memset@plt>
  407dc3:	mov    rax,QWORD PTR [rbx+0x30]
  407dc7:	mov    ecx,DWORD PTR [rax+0x8]
  407dca:	mov    DWORD PTR [rbx+0x20],ecx
  407dcd:	mov    ecx,DWORD PTR [rax]
  407dcf:	mov    DWORD PTR [rbx+0x28],ecx
  407dd2:	mov    edx,DWORD PTR [rax+0x4]
  407dd5:	mov    rsi,rcx
  407dd8:	add    rsi,QWORD PTR [rbx+0x68]
  407ddc:	mov    QWORD PTR [rbx+0x18],rsi
  407de0:	mov    esi,DWORD PTR [rbx+0x70]
  407de3:	sub    esi,ecx
  407de5:	cmp    esi,edx
  407de7:	cmova  esi,edx
  407dea:	mov    DWORD PTR [rbx+0x24],esi
  407ded:	movzx  ecx,WORD PTR [rbx+0xea]
  407df4:	cmp    WORD PTR [rbx+0xe8],cx
  407dfb:	jae    407e04 <flatcc_builder_end_string@@Base+0x84>
  407dfd:	mov    WORD PTR [rbx+0xe8],cx
  407e04:	movzx  ecx,WORD PTR [rax+0xc]
  407e08:	mov    WORD PTR [rbx+0xea],cx
  407e0f:	add    rax,0xffffffffffffffdc
  407e13:	mov    QWORD PTR [rbx+0x30],rax
  407e17:	add    DWORD PTR [rbx+0x104],0xffffffff
  407e1e:	mov    eax,ebp
  407e20:	add    rsp,0x8
  407e24:	pop    rbx
  407e25:	pop    rbp
  407e26:	ret    
  407e27:	lea    rdi,[rip+0x1cb3]        # 409ae1 <flatcc_builder_padding_base@@Base+0x7c1>
  407e2e:	lea    rsi,[rip+0x176d]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407e35:	lea    rcx,[rip+0x2558]        # 40a394 <flatcc_builder_padding_base@@Base+0x1074>
  407e3c:	mov    edx,0x6c4
  407e41:	call   403070 <__assert_fail@plt>
  407e46:	lea    rdi,[rip+0x258a]        # 40a3d7 <flatcc_builder_padding_base@@Base+0x10b7>
  407e4d:	lea    rsi,[rip+0x174e]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407e54:	lea    rcx,[rip+0x2539]        # 40a394 <flatcc_builder_padding_base@@Base+0x1074>
  407e5b:	mov    edx,0x6c5
  407e60:	call   403070 <__assert_fail@plt>
  407e65:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e6f:	nop

0000000000407e70 <flatcc_builder_string_edit@@Base>:
  407e70:	mov    rax,QWORD PTR [rdi+0x18]
  407e74:	ret    
  407e75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e7f:	nop

0000000000407e80 <flatcc_builder_string_len@@Base>:
  407e80:	mov    rax,QWORD PTR [rdi+0x30]
  407e84:	mov    eax,DWORD PTR [rax+0x14]
  407e87:	ret    
  407e88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407e90 <flatcc_builder_table_edit@@Base>:
  407e90:	mov    rax,QWORD PTR [rdi+0x30]
  407e94:	movzx  eax,WORD PTR [rax+0xe]
  407e98:	cmp    eax,0x3
  407e9b:	jne    407ea8 <flatcc_builder_table_edit@@Base+0x18>
  407e9d:	mov    eax,DWORD PTR [rdi+0x20]
  407ea0:	add    rax,QWORD PTR [rdi+0x18]
  407ea4:	sub    rax,rsi
  407ea7:	ret    
  407ea8:	push   rax
  407ea9:	lea    rdi,[rip+0x1f21]        # 409dd1 <flatcc_builder_padding_base@@Base+0xab1>
  407eb0:	lea    rsi,[rip+0x16eb]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  407eb7:	lea    rcx,[rip+0x25cb]        # 40a489 <flatcc_builder_padding_base@@Base+0x1169>
  407ebe:	mov    edx,0x702
  407ec3:	call   403070 <__assert_fail@plt>
  407ec8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ed0 <flatcc_builder_table_add_copy@@Base>:
  407ed0:	push   r15
  407ed2:	push   r14
  407ed4:	push   rbx
  407ed5:	mov    r15,rcx
  407ed8:	mov    r14,rdx
  407edb:	mov    rdx,rcx
  407ede:	mov    ecx,r8d
  407ee1:	call   406e20 <flatcc_builder_table_add@@Base>
  407ee6:	mov    rbx,rax
  407ee9:	test   rax,rax
  407eec:	je     407efc <flatcc_builder_table_add_copy@@Base+0x2c>
  407eee:	mov    rdi,rbx
  407ef1:	mov    rsi,r14
  407ef4:	mov    rdx,r15
  407ef7:	call   4030d0 <memcpy@plt>
  407efc:	mov    rax,rbx
  407eff:	pop    rbx
  407f00:	pop    r14
  407f02:	pop    r15
  407f04:	ret    
  407f05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f0f:	nop

0000000000407f10 <flatcc_builder_push_buffer_alignment@@Base>:
  407f10:	movzx  eax,WORD PTR [rdi+0xe8]
  407f17:	mov    WORD PTR [rdi+0xe8],0x4
  407f20:	ret    
  407f21:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f30 <flatcc_builder_pop_buffer_alignment@@Base>:
  407f30:	cmp    WORD PTR [rdi+0xe8],si
  407f37:	jae    407f40 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407f39:	mov    WORD PTR [rdi+0xe8],si
  407f40:	ret    
  407f41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f50 <flatcc_builder_get_buffer_alignment@@Base>:
  407f50:	movzx  eax,WORD PTR [rdi+0xe8]
  407f57:	ret    
  407f58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f60 <flatcc_builder_set_vtable_clustering@@Base>:
  407f60:	xor    eax,eax
  407f62:	test   esi,esi
  407f64:	sete   al
  407f67:	mov    DWORD PTR [rdi+0x124],eax
  407f6d:	ret    
  407f6e:	xchg   ax,ax

0000000000407f70 <flatcc_builder_set_block_align@@Base>:
  407f70:	mov    WORD PTR [rdi+0xec],si
  407f77:	ret    
  407f78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f80 <flatcc_builder_get_level@@Base>:
  407f80:	mov    eax,DWORD PTR [rdi+0x104]
  407f86:	ret    
  407f87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407f90 <flatcc_builder_set_max_level@@Base>:
  407f90:	mov    DWORD PTR [rdi+0x120],esi
  407f96:	cmp    DWORD PTR [rdi+0x108],esi
  407f9c:	jge    407fa4 <flatcc_builder_set_max_level@@Base+0x14>
  407f9e:	mov    DWORD PTR [rdi+0x108],esi
  407fa4:	ret    
  407fa5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407faf:	nop

0000000000407fb0 <flatcc_builder_get_buffer_size@@Base>:
  407fb0:	movsxd rax,DWORD PTR [rdi+0xf4]
  407fb7:	movsxd rcx,DWORD PTR [rdi+0xf0]
  407fbe:	sub    rax,rcx
  407fc1:	ret    
  407fc2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407fcc:	nop    DWORD PTR [rax+0x0]

0000000000407fd0 <flatcc_builder_get_buffer_start@@Base>:
  407fd0:	mov    eax,DWORD PTR [rdi+0xf0]
  407fd6:	ret    
  407fd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fe0 <flatcc_builder_get_buffer_end@@Base>:
  407fe0:	mov    eax,DWORD PTR [rdi+0xf4]
  407fe6:	ret    
  407fe7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407ff0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407ff0:	mov    QWORD PTR [rdi+0x118],rsi
  407ff7:	ret    
  407ff8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408000 <flatcc_builder_set_identifier@@Base>:
  408000:	test   rsi,rsi
  408003:	jne    40800c <flatcc_builder_set_identifier@@Base+0xc>
  408005:	lea    rsi,[rip+0x1314]        # 409320 <flatcc_builder_padding_base@@Base>
  40800c:	mov    eax,DWORD PTR [rsi]
  40800e:	mov    DWORD PTR [rdi+0x110],eax
  408014:	ret    
  408015:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40801f:	nop

0000000000408020 <flatcc_builder_get_type@@Base>:
  408020:	mov    rax,QWORD PTR [rdi+0x30]
  408024:	test   rax,rax
  408027:	je     40802e <flatcc_builder_get_type@@Base+0xe>
  408029:	movzx  eax,WORD PTR [rax+0xe]
  40802d:	ret    
  40802e:	xor    eax,eax
  408030:	ret    
  408031:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40803b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408040 <flatcc_builder_get_type_at@@Base>:
  408040:	xor    eax,eax
  408042:	test   esi,esi
  408044:	jle    408062 <flatcc_builder_get_type_at@@Base+0x22>
  408046:	mov    ecx,DWORD PTR [rdi+0x104]
  40804c:	cmp    ecx,esi
  40804e:	jl     408062 <flatcc_builder_get_type_at@@Base+0x22>
  408050:	mov    rax,QWORD PTR [rdi+0x30]
  408054:	sub    esi,ecx
  408056:	movsxd rcx,esi
  408059:	lea    rcx,[rcx+rcx*8]
  40805d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408062:	ret    
  408063:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40806d:	nop    DWORD PTR [rax]

0000000000408070 <flatcc_builder_get_direct_buffer@@Base>:
  408070:	cmp    DWORD PTR [rdi+0x128],0x0
  408077:	je     408089 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408079:	mov    rax,QWORD PTR [rdi+0x130]
  408080:	cmp    rax,QWORD PTR [rdi+0x138]
  408087:	je     408098 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408089:	test   rsi,rsi
  40808c:	je     408095 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40808e:	mov    QWORD PTR [rsi],0x0
  408095:	xor    eax,eax
  408097:	ret    
  408098:	test   rsi,rsi
  40809b:	je     4080a7 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40809d:	mov    rax,QWORD PTR [rdi+0x160]
  4080a4:	mov    QWORD PTR [rsi],rax
  4080a7:	mov    rax,QWORD PTR [rdi+0x140]
  4080ae:	ret    
  4080af:	nop

00000000004080b0 <flatcc_builder_copy_buffer@@Base>:
  4080b0:	push   rax
  4080b1:	cmp    DWORD PTR [rdi+0x128],0x0
  4080b8:	je     4080cd <flatcc_builder_copy_buffer@@Base+0x1d>
  4080ba:	add    rdi,0x130
  4080c1:	call   4089d0 <flatcc_emitter_copy_buffer@@Base>
  4080c6:	test   rax,rax
  4080c9:	je     4080d1 <flatcc_builder_copy_buffer@@Base+0x21>
  4080cb:	pop    rcx
  4080cc:	ret    
  4080cd:	xor    eax,eax
  4080cf:	pop    rcx
  4080d0:	ret    
  4080d1:	lea    rdi,[rip+0x1738]        # 409810 <flatcc_builder_padding_base@@Base+0x4f0>
  4080d8:	lea    rsi,[rip+0x14c3]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  4080df:	lea    rcx,[rip+0x242e]        # 40a514 <flatcc_builder_padding_base@@Base+0x11f4>
  4080e6:	mov    edx,0x786
  4080eb:	call   403070 <__assert_fail@plt>

00000000004080f0 <flatcc_builder_finalize_buffer@@Base>:
  4080f0:	push   r15
  4080f2:	push   r14
  4080f4:	push   rbx
  4080f5:	mov    rbx,rdi
  4080f8:	movsxd r14,DWORD PTR [rdi+0xf4]
  4080ff:	movsxd rax,DWORD PTR [rdi+0xf0]
  408106:	sub    r14,rax
  408109:	test   rsi,rsi
  40810c:	je     408111 <flatcc_builder_finalize_buffer@@Base+0x21>
  40810e:	mov    QWORD PTR [rsi],r14
  408111:	mov    rdi,r14
  408114:	call   4030e0 <malloc@plt>
  408119:	test   rax,rax
  40811c:	je     40814d <flatcc_builder_finalize_buffer@@Base+0x5d>
  40811e:	cmp    DWORD PTR [rbx+0x128],0x0
  408125:	je     40816c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408127:	mov    r15,rax
  40812a:	add    rbx,0x130
  408131:	mov    rdi,rbx
  408134:	mov    rsi,rax
  408137:	mov    rdx,r14
  40813a:	call   4089d0 <flatcc_emitter_copy_buffer@@Base>
  40813f:	test   rax,rax
  408142:	je     40818b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408144:	mov    rax,r15
  408147:	pop    rbx
  408148:	pop    r14
  40814a:	pop    r15
  40814c:	ret    
  40814d:	lea    rdi,[rip+0x260e]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  408154:	lea    rsi,[rip+0x1447]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40815b:	lea    rcx,[rip+0x23f7]        # 40a559 <flatcc_builder_padding_base@@Base+0x1239>
  408162:	mov    edx,0x798
  408167:	call   403070 <__assert_fail@plt>
  40816c:	lea    rdi,[rip+0x25ef]        # 40a762 <flatcc_builder_padding_base@@Base+0x1442>
  408173:	lea    rsi,[rip+0x1428]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40817a:	lea    rcx,[rip+0x23d8]        # 40a559 <flatcc_builder_padding_base@@Base+0x1239>
  408181:	mov    edx,0x79c
  408186:	call   403070 <__assert_fail@plt>
  40818b:	lea    rdi,[rip+0x167e]        # 409810 <flatcc_builder_padding_base@@Base+0x4f0>
  408192:	lea    rsi,[rip+0x1409]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  408199:	lea    rcx,[rip+0x2374]        # 40a514 <flatcc_builder_padding_base@@Base+0x11f4>
  4081a0:	mov    edx,0x786
  4081a5:	call   403070 <__assert_fail@plt>
  4081aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004081b0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4081b0:	push   r15
  4081b2:	push   r14
  4081b4:	push   r12
  4081b6:	push   rbx
  4081b7:	push   rax
  4081b8:	mov    r14,rsi
  4081bb:	mov    r15,rdi
  4081be:	movsxd rax,DWORD PTR [rdi+0xf4]
  4081c5:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4081cc:	sub    rax,rcx
  4081cf:	test   rsi,rsi
  4081d2:	je     4081d7 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  4081d4:	mov    QWORD PTR [r14],rax
  4081d7:	movzx  ecx,WORD PTR [r15+0xe8]
  4081df:	add    rax,rcx
  4081e2:	add    rax,0xffffffffffffffff
  4081e6:	mov    rbx,rcx
  4081e9:	neg    rbx
  4081ec:	and    rbx,rax
  4081ef:	cmp    rcx,0x8
  4081f3:	mov    QWORD PTR [rsp],0x0
  4081fb:	mov    esi,0x8
  408200:	cmova  rsi,rcx
  408204:	mov    rdi,rsp
  408207:	mov    rdx,rbx
  40820a:	call   403110 <posix_memalign@plt>
  40820f:	mov    r12,QWORD PTR [rsp]
  408213:	test   eax,eax
  408215:	je     408226 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408217:	test   r12,r12
  40821a:	je     408226 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  40821c:	mov    rdi,r12
  40821f:	call   403030 <free@plt>
  408224:	jmp    40826e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408226:	test   r12,r12
  408229:	je     40826e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  40822b:	cmp    DWORD PTR [r15+0x128],0x0
  408233:	je     40821c <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408235:	add    r15,0x130
  40823c:	mov    rdi,r15
  40823f:	mov    rsi,r12
  408242:	mov    rdx,rbx
  408245:	call   4089d0 <flatcc_emitter_copy_buffer@@Base>
  40824a:	test   rax,rax
  40824d:	jne    40827d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40824f:	lea    rdi,[rip+0x15ba]        # 409810 <flatcc_builder_padding_base@@Base+0x4f0>
  408256:	lea    rsi,[rip+0x1345]        # 4095a2 <flatcc_builder_padding_base@@Base+0x282>
  40825d:	lea    rcx,[rip+0x22b0]        # 40a514 <flatcc_builder_padding_base@@Base+0x11f4>
  408264:	mov    edx,0x786
  408269:	call   403070 <__assert_fail@plt>
  40826e:	test   r14,r14
  408271:	je     40827a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408273:	mov    QWORD PTR [r14],0x0
  40827a:	xor    r12d,r12d
  40827d:	mov    rax,r12
  408280:	add    rsp,0x8
  408284:	pop    rbx
  408285:	pop    r12
  408287:	pop    r14
  408289:	pop    r15
  40828b:	ret    
  40828c:	nop    DWORD PTR [rax+0x0]

0000000000408290 <flatcc_builder_aligned_alloc@@Base>:
  408290:	push   rax
  408291:	mov    rax,rsi
  408294:	mov    QWORD PTR [rsp],0x0
  40829c:	cmp    rdi,0x8
  4082a0:	mov    esi,0x8
  4082a5:	cmova  rsi,rdi
  4082a9:	mov    rdi,rsp
  4082ac:	mov    rdx,rax
  4082af:	call   403110 <posix_memalign@plt>
  4082b4:	mov    ecx,eax
  4082b6:	mov    rax,QWORD PTR [rsp]
  4082ba:	test   ecx,ecx
  4082bc:	je     4082d5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4082be:	test   rax,rax
  4082c1:	je     4082d5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4082c3:	mov    rdi,rax
  4082c6:	call   403030 <free@plt>
  4082cb:	mov    QWORD PTR [rsp],0x0
  4082d3:	xor    eax,eax
  4082d5:	pop    rcx
  4082d6:	ret    
  4082d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082e0 <flatcc_builder_aligned_free@@Base>:
  4082e0:	jmp    403030 <free@plt>
  4082e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082ef:	nop

00000000004082f0 <flatcc_builder_get_emit_context@@Base>:
  4082f0:	mov    rax,QWORD PTR [rdi+0x38]
  4082f4:	ret    
  4082f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082ff:	nop

0000000000408300 <flatcc_emitter_recycle_page@@Base>:
  408300:	mov    rcx,QWORD PTR [rdi]
  408303:	mov    eax,0xffffffff
  408308:	cmp    rcx,rsi
  40830b:	je     408362 <flatcc_emitter_recycle_page@@Base+0x62>
  40830d:	cmp    QWORD PTR [rdi+0x8],rsi
  408311:	je     408362 <flatcc_emitter_recycle_page@@Base+0x62>
  408313:	mov    rax,QWORD PTR [rsi+0xb80]
  40831a:	mov    rdx,QWORD PTR [rsi+0xb88]
  408321:	mov    QWORD PTR [rax+0xb88],rdx
  408328:	mov    rdx,QWORD PTR [rsi+0xb88]
  40832f:	mov    QWORD PTR [rdx+0xb80],rax
  408336:	mov    rax,QWORD PTR [rcx+0xb88]
  40833d:	mov    QWORD PTR [rsi+0xb88],rax
  408344:	mov    QWORD PTR [rsi+0xb80],rcx
  40834b:	mov    QWORD PTR [rax+0xb80],rsi
  408352:	mov    rax,QWORD PTR [rsi+0xb80]
  408359:	mov    QWORD PTR [rax+0xb88],rsi
  408360:	xor    eax,eax
  408362:	ret    
  408363:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40836d:	nop    DWORD PTR [rax]

0000000000408370 <flatcc_emitter_reset@@Base>:
  408370:	push   r14
  408372:	push   rbx
  408373:	push   rax
  408374:	mov    rax,QWORD PTR [rdi]
  408377:	test   rax,rax
  40837a:	je     40845b <flatcc_emitter_reset@@Base+0xeb>
  408380:	mov    rbx,rdi
  408383:	mov    QWORD PTR [rdi+0x8],rax
  408387:	lea    rcx,[rax+0x5c0]
  40838e:	mov    QWORD PTR [rdi+0x10],rcx
  408392:	mov    QWORD PTR [rdi+0x20],rcx
  408396:	mov    QWORD PTR [rdi+0x18],0x5c0
  40839e:	mov    QWORD PTR [rdi+0x28],0x5c0
  4083a6:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4083b0:	mov    rcx,QWORD PTR [rdi+0x30]
  4083b4:	mov    rdx,QWORD PTR [rdi+0x40]
  4083b8:	test   rdx,rdx
  4083bb:	jne    4083c4 <flatcc_emitter_reset@@Base+0x54>
  4083bd:	mov    QWORD PTR [rbx+0x40],rcx
  4083c1:	mov    rdx,rcx
  4083c4:	lea    rdx,[rdx+rdx*2]
  4083c8:	shr    rdx,0x2
  4083cc:	shr    rcx,0x2
  4083d0:	add    rcx,rdx
  4083d3:	mov    QWORD PTR [rbx+0x40],rcx
  4083d7:	mov    QWORD PTR [rbx+0x30],0x0
  4083df:	add    rcx,rcx
  4083e2:	cmp    rcx,QWORD PTR [rbx+0x38]
  4083e6:	jae    40845b <flatcc_emitter_reset@@Base+0xeb>
  4083e8:	mov    rdi,QWORD PTR [rax+0xb80]
  4083ef:	cmp    rdi,rax
  4083f2:	je     40845b <flatcc_emitter_reset@@Base+0xeb>
  4083f4:	lea    rcx,[rax+0xb80]
  4083fb:	mov    r14,0xfffffffffffff480
  408402:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40840c:	nop    DWORD PTR [rax+0x0]
  408410:	mov    rdx,QWORD PTR [rdi+0xb80]
  408417:	mov    QWORD PTR [rcx],rdx
  40841a:	mov    rcx,QWORD PTR [rdi+0xb80]
  408421:	mov    QWORD PTR [rcx+0xb88],rax
  408428:	call   403030 <free@plt>
  40842d:	mov    rax,QWORD PTR [rbx+0x38]
  408431:	add    rax,r14
  408434:	mov    QWORD PTR [rbx+0x38],rax
  408438:	mov    rcx,QWORD PTR [rbx+0x40]
  40843c:	add    rcx,rcx
  40843f:	cmp    rcx,rax
  408442:	jae    40845b <flatcc_emitter_reset@@Base+0xeb>
  408444:	mov    rax,QWORD PTR [rbx+0x8]
  408448:	lea    rcx,[rax+0xb80]
  40844f:	mov    rdi,QWORD PTR [rax+0xb80]
  408456:	cmp    rdi,QWORD PTR [rbx]
  408459:	jne    408410 <flatcc_emitter_reset@@Base+0xa0>
  40845b:	add    rsp,0x8
  40845f:	pop    rbx
  408460:	pop    r14
  408462:	ret    
  408463:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40846d:	nop    DWORD PTR [rax]

0000000000408470 <flatcc_emitter_clear@@Base>:
  408470:	push   r14
  408472:	push   rbx
  408473:	push   rax
  408474:	mov    rbx,QWORD PTR [rdi]
  408477:	test   rbx,rbx
  40847a:	je     4084da <flatcc_emitter_clear@@Base+0x6a>
  40847c:	mov    r14,rdi
  40847f:	mov    rax,QWORD PTR [rbx+0xb88]
  408486:	mov    QWORD PTR [rax+0xb80],0x0
  408491:	jmp    4084af <flatcc_emitter_clear@@Base+0x3f>
  408493:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40849d:	nop    DWORD PTR [rax]
  4084a0:	mov    rbx,rax
  4084a3:	mov    rdi,QWORD PTR [rax+0xb88]
  4084aa:	call   403030 <free@plt>
  4084af:	mov    rax,QWORD PTR [rbx+0xb80]
  4084b6:	test   rax,rax
  4084b9:	jne    4084a0 <flatcc_emitter_clear@@Base+0x30>
  4084bb:	mov    rdi,rbx
  4084be:	call   403030 <free@plt>
  4084c3:	vxorps xmm0,xmm0,xmm0
  4084c7:	vmovups YMMWORD PTR [r14+0x20],ymm0
  4084cd:	vmovups YMMWORD PTR [r14],ymm0
  4084d2:	mov    QWORD PTR [r14+0x40],0x0
  4084da:	add    rsp,0x8
  4084de:	pop    rbx
  4084df:	pop    r14
  4084e1:	vzeroupper 
  4084e4:	ret    
  4084e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4084ef:	nop

00000000004084f0 <flatcc_emitter@@Base>:
  4084f0:	push   rbp
  4084f1:	push   r15
  4084f3:	push   r14
  4084f5:	push   r13
  4084f7:	push   r12
  4084f9:	push   rbx
  4084fa:	sub    rsp,0x18
  4084fe:	mov    r13d,edx
  408501:	mov    r14,rsi
  408504:	mov    r12,rdi
  408507:	add    QWORD PTR [rdi+0x30],r8
  40850b:	test   ecx,ecx
  40850d:	js     4086a1 <flatcc_emitter@@Base+0x1b1>
  408513:	mov    rdx,QWORD PTR [r12+0x28]
  408518:	cmp    rdx,r8
  40851b:	jae    408888 <flatcc_emitter@@Base+0x398>
  408521:	xor    eax,eax
  408523:	test   r13d,r13d
  408526:	je     4089bf <flatcc_emitter@@Base+0x4cf>
  40852c:	mov    QWORD PTR [rsp+0x8],r13
  408531:	mov    r15,QWORD PTR [r14+0x8]
  408535:	test   r15,r15
  408538:	je     408686 <flatcc_emitter@@Base+0x196>
  40853e:	mov    r13,QWORD PTR [r14]
  408541:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40854b:	nop    DWORD PTR [rax+rax*1+0x0]
  408550:	mov    rbp,r15
  408553:	cmp    r15,rdx
  408556:	jbe    408658 <flatcc_emitter@@Base+0x168>
  40855c:	mov    rbp,rdx
  40855f:	nop
  408560:	test   rbp,rbp
  408563:	jne    408658 <flatcc_emitter@@Base+0x168>
  408569:	mov    rbx,QWORD PTR [r12+0x8]
  40856e:	test   rbx,rbx
  408571:	je     408580 <flatcc_emitter@@Base+0x90>
  408573:	mov    rax,QWORD PTR [rbx+0xb80]
  40857a:	cmp    rax,QWORD PTR [r12]
  40857e:	jne    4085c1 <flatcc_emitter@@Base+0xd1>
  408580:	mov    edi,0xb98
  408585:	call   4030e0 <malloc@plt>
  40858a:	test   rax,rax
  40858d:	je     40889d <flatcc_emitter@@Base+0x3ad>
  408593:	add    QWORD PTR [r12+0x38],0xb80
  40859c:	test   rbx,rbx
  40859f:	je     408600 <flatcc_emitter@@Base+0x110>
  4085a1:	mov    QWORD PTR [rax+0xb88],rbx
  4085a8:	mov    rcx,QWORD PTR [r12]
  4085ac:	mov    QWORD PTR [rax+0xb80],rcx
  4085b3:	mov    QWORD PTR [rcx+0xb88],rax
  4085ba:	mov    QWORD PTR [rbx+0xb80],rax
  4085c1:	mov    QWORD PTR [r12+0x8],rax
  4085c6:	mov    QWORD PTR [r12+0x20],rax
  4085cb:	mov    QWORD PTR [r12+0x28],0xb80
  4085d4:	mov    rcx,QWORD PTR [rax+0xb88]
  4085db:	mov    ecx,DWORD PTR [rcx+0xb90]
  4085e1:	mov    edx,0xb80
  4085e6:	add    ecx,edx
  4085e8:	mov    DWORD PTR [rax+0xb90],ecx
  4085ee:	mov    ebp,0xb80
  4085f3:	cmp    r15,rbp
  4085f6:	ja     408560 <flatcc_emitter@@Base+0x70>
  4085fc:	jmp    408655 <flatcc_emitter@@Base+0x165>
  4085fe:	xchg   ax,ax
  408600:	mov    QWORD PTR [r12],rax
  408604:	mov    QWORD PTR [r12+0x8],rax
  408609:	mov    QWORD PTR [rax+0xb80],rax
  408610:	mov    QWORD PTR [rax+0xb88],rax
  408617:	mov    rcx,rax
  40861a:	add    rcx,0x5c0
  408621:	mov    QWORD PTR [r12+0x10],rcx
  408626:	mov    QWORD PTR [r12+0x20],rcx
  40862b:	mov    QWORD PTR [r12+0x18],0x5c0
  408634:	mov    QWORD PTR [r12+0x28],0x5c0
  40863d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408647:	mov    ebp,0x5c0
  40864c:	cmp    r15,rbp
  40864f:	ja     408560 <flatcc_emitter@@Base+0x70>
  408655:	mov    rbp,r15
  408658:	mov    rdi,QWORD PTR [r12+0x20]
  40865d:	mov    rsi,r13
  408660:	mov    rdx,rbp
  408663:	call   4030d0 <memcpy@plt>
  408668:	add    QWORD PTR [r12+0x20],rbp
  40866d:	add    r13,rbp
  408670:	mov    rdx,QWORD PTR [r12+0x28]
  408675:	sub    rdx,rbp
  408678:	mov    QWORD PTR [r12+0x28],rdx
  40867d:	sub    r15,rbp
  408680:	jne    408550 <flatcc_emitter@@Base+0x60>
  408686:	mov    r13,QWORD PTR [rsp+0x8]
  40868b:	add    r13d,0xffffffff
  40868f:	add    r14,0x10
  408693:	test   r13d,r13d
  408696:	jne    40852c <flatcc_emitter@@Base+0x3c>
  40869c:	jmp    4089bd <flatcc_emitter@@Base+0x4cd>
  4086a1:	lea    rsi,[r12+0x18]
  4086a6:	mov    rdx,QWORD PTR [r12+0x18]
  4086ab:	cmp    rdx,r8
  4086ae:	jae    4088a7 <flatcc_emitter@@Base+0x3b7>
  4086b4:	xor    eax,eax
  4086b6:	test   r13d,r13d
  4086b9:	je     4089bf <flatcc_emitter@@Base+0x4cf>
  4086bf:	mov    QWORD PTR [rsp+0x10],rsi
  4086c4:	movsxd rax,r13d
  4086c7:	shl    rax,0x4
  4086cb:	add    r14,rax
  4086ce:	mov    esi,0xfffff480
  4086d3:	mov    QWORD PTR [rsp+0x8],r13
  4086d8:	mov    r15,QWORD PTR [r14-0x8]
  4086dc:	add    r14,0xfffffffffffffff0
  4086e0:	test   r15,r15
  4086e3:	je     408874 <flatcc_emitter@@Base+0x384>
  4086e9:	mov    r13,QWORD PTR [r14]
  4086ec:	add    r13,r15
  4086ef:	nop
  4086f0:	mov    rax,QWORD PTR [rsp+0x10]
  4086f5:	mov    rax,QWORD PTR [rax]
  4086f8:	cmp    r15,rax
  4086fb:	jbe    408840 <flatcc_emitter@@Base+0x350>
  408701:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40870b:	nop    DWORD PTR [rax+rax*1+0x0]
  408710:	mov    rbp,rax
  408713:	test   rax,rax
  408716:	jne    408843 <flatcc_emitter@@Base+0x353>
  40871c:	mov    rbx,QWORD PTR [r12]
  408720:	test   rbx,rbx
  408723:	je     408750 <flatcc_emitter@@Base+0x260>
  408725:	mov    rax,QWORD PTR [rbx+0xb88]
  40872c:	cmp    rax,QWORD PTR [r12+0x8]
  408731:	je     408750 <flatcc_emitter@@Base+0x260>
  408733:	mov    edx,DWORD PTR [rbx+0xb90]
  408739:	add    edx,esi
  40873b:	lea    rcx,[rax+0xb90]
  408742:	mov    DWORD PTR [rax+0xb90],edx
  408748:	mov    QWORD PTR [r12],rax
  40874c:	jmp    4087a5 <flatcc_emitter@@Base+0x2b5>
  40874e:	xchg   ax,ax
  408750:	mov    edi,0xb98
  408755:	call   4030e0 <malloc@plt>
  40875a:	test   rax,rax
  40875d:	je     40889d <flatcc_emitter@@Base+0x3ad>
  408763:	add    QWORD PTR [r12+0x38],0xb80
  40876c:	test   rbx,rbx
  40876f:	je     4087e0 <flatcc_emitter@@Base+0x2f0>
  408771:	mov    rcx,QWORD PTR [r12+0x8]
  408776:	mov    QWORD PTR [rax+0xb88],rcx
  40877d:	mov    QWORD PTR [rax+0xb80],rbx
  408784:	mov    QWORD PTR [rbx+0xb88],rax
  40878b:	mov    QWORD PTR [rcx+0xb80],rax
  408792:	mov    QWORD PTR [r12],rax
  408796:	mov    rcx,rax
  408799:	add    rcx,0xb90
  4087a0:	mov    esi,0xfffff480
  4087a5:	lea    rdx,[rax+0xb80]
  4087ac:	mov    QWORD PTR [r12+0x10],rdx
  4087b1:	mov    QWORD PTR [r12+0x18],0xb80
  4087ba:	mov    rax,QWORD PTR [rax+0xb80]
  4087c1:	mov    eax,DWORD PTR [rax+0xb90]
  4087c7:	add    eax,esi
  4087c9:	mov    DWORD PTR [rcx],eax
  4087cb:	mov    eax,0xb80
  4087d0:	cmp    r15,rax
  4087d3:	ja     408710 <flatcc_emitter@@Base+0x220>
  4087d9:	jmp    408840 <flatcc_emitter@@Base+0x350>
  4087db:	nop    DWORD PTR [rax+rax*1+0x0]
  4087e0:	mov    QWORD PTR [r12],rax
  4087e4:	mov    QWORD PTR [r12+0x8],rax
  4087e9:	mov    QWORD PTR [rax+0xb80],rax
  4087f0:	mov    QWORD PTR [rax+0xb88],rax
  4087f7:	mov    rcx,rax
  4087fa:	add    rcx,0x5c0
  408801:	mov    QWORD PTR [r12+0x10],rcx
  408806:	mov    QWORD PTR [r12+0x20],rcx
  40880b:	mov    QWORD PTR [r12+0x18],0x5c0
  408814:	mov    QWORD PTR [r12+0x28],0x5c0
  40881d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408827:	mov    eax,0x5c0
  40882c:	mov    esi,0xfffff480
  408831:	cmp    r15,rax
  408834:	ja     408710 <flatcc_emitter@@Base+0x220>
  40883a:	nop    WORD PTR [rax+rax*1+0x0]
  408840:	mov    rbp,r15
  408843:	mov    rdi,QWORD PTR [r12+0x10]
  408848:	sub    rdi,rbp
  40884b:	mov    QWORD PTR [r12+0x10],rdi
  408850:	sub    rax,rbp
  408853:	mov    QWORD PTR [r12+0x18],rax
  408858:	sub    r13,rbp
  40885b:	mov    rsi,r13
  40885e:	mov    rdx,rbp
  408861:	call   4030d0 <memcpy@plt>
  408866:	mov    esi,0xfffff480
  40886b:	sub    r15,rbp
  40886e:	jne    4086f0 <flatcc_emitter@@Base+0x200>
  408874:	mov    r13,QWORD PTR [rsp+0x8]
  408879:	add    r13d,0xffffffff
  40887d:	jne    4086d3 <flatcc_emitter@@Base+0x1e3>
  408883:	jmp    4089bd <flatcc_emitter@@Base+0x4cd>
  408888:	lea    rsi,[r12+0x28]
  40888d:	mov    rbp,QWORD PTR [r12+0x20]
  408892:	lea    rcx,[r8+rbp*1]
  408896:	mov    QWORD PTR [r12+0x20],rcx
  40889b:	jmp    4088b4 <flatcc_emitter@@Base+0x3c4>
  40889d:	mov    eax,0xffffffff
  4088a2:	jmp    4089bf <flatcc_emitter@@Base+0x4cf>
  4088a7:	mov    rbp,QWORD PTR [r12+0x10]
  4088ac:	sub    rbp,r8
  4088af:	mov    QWORD PTR [r12+0x10],rbp
  4088b4:	sub    rdx,r8
  4088b7:	mov    QWORD PTR [rsi],rdx
  4088ba:	xor    eax,eax
  4088bc:	test   r13d,r13d
  4088bf:	je     4089bf <flatcc_emitter@@Base+0x4cf>
  4088c5:	lea    r15d,[r13-0x1]
  4088c9:	mov    r12d,r13d
  4088cc:	and    r12d,0x7
  4088d0:	je     408902 <flatcc_emitter@@Base+0x412>
  4088d2:	xor    ebx,ebx
  4088d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4088de:	xchg   ax,ax
  4088e0:	mov    rsi,QWORD PTR [r14]
  4088e3:	mov    rdx,QWORD PTR [r14+0x8]
  4088e7:	mov    rdi,rbp
  4088ea:	call   4030d0 <memcpy@plt>
  4088ef:	add    rbp,QWORD PTR [r14+0x8]
  4088f3:	add    r14,0x10
  4088f7:	add    ebx,0x1
  4088fa:	cmp    r12d,ebx
  4088fd:	jne    4088e0 <flatcc_emitter@@Base+0x3f0>
  4088ff:	sub    r13d,ebx
  408902:	cmp    r15d,0x7
  408906:	jb     4089bd <flatcc_emitter@@Base+0x4cd>
  40890c:	nop    DWORD PTR [rax+0x0]
  408910:	mov    rsi,QWORD PTR [r14]
  408913:	mov    rdx,QWORD PTR [r14+0x8]
  408917:	mov    rdi,rbp
  40891a:	call   4030d0 <memcpy@plt>
  40891f:	add    rbp,QWORD PTR [r14+0x8]
  408923:	mov    rsi,QWORD PTR [r14+0x10]
  408927:	mov    rdx,QWORD PTR [r14+0x18]
  40892b:	mov    rdi,rbp
  40892e:	call   4030d0 <memcpy@plt>
  408933:	add    rbp,QWORD PTR [r14+0x18]
  408937:	mov    rsi,QWORD PTR [r14+0x20]
  40893b:	mov    rdx,QWORD PTR [r14+0x28]
  40893f:	mov    rdi,rbp
  408942:	call   4030d0 <memcpy@plt>
  408947:	add    rbp,QWORD PTR [r14+0x28]
  40894b:	mov    rsi,QWORD PTR [r14+0x30]
  40894f:	mov    rdx,QWORD PTR [r14+0x38]
  408953:	mov    rdi,rbp
  408956:	call   4030d0 <memcpy@plt>
  40895b:	add    rbp,QWORD PTR [r14+0x38]
  40895f:	mov    rsi,QWORD PTR [r14+0x40]
  408963:	mov    rdx,QWORD PTR [r14+0x48]
  408967:	mov    rdi,rbp
  40896a:	call   4030d0 <memcpy@plt>
  40896f:	add    rbp,QWORD PTR [r14+0x48]
  408973:	mov    rsi,QWORD PTR [r14+0x50]
  408977:	mov    rdx,QWORD PTR [r14+0x58]
  40897b:	mov    rdi,rbp
  40897e:	call   4030d0 <memcpy@plt>
  408983:	add    rbp,QWORD PTR [r14+0x58]
  408987:	mov    rsi,QWORD PTR [r14+0x60]
  40898b:	mov    rdx,QWORD PTR [r14+0x68]
  40898f:	mov    rdi,rbp
  408992:	call   4030d0 <memcpy@plt>
  408997:	add    rbp,QWORD PTR [r14+0x68]
  40899b:	mov    rsi,QWORD PTR [r14+0x70]
  40899f:	mov    rdx,QWORD PTR [r14+0x78]
  4089a3:	mov    rdi,rbp
  4089a6:	call   4030d0 <memcpy@plt>
  4089ab:	add    rbp,QWORD PTR [r14+0x78]
  4089af:	sub    r14,0xffffffffffffff80
  4089b3:	add    r13d,0xfffffff8
  4089b7:	jne    408910 <flatcc_emitter@@Base+0x420>
  4089bd:	xor    eax,eax
  4089bf:	add    rsp,0x18
  4089c3:	pop    rbx
  4089c4:	pop    r12
  4089c6:	pop    r13
  4089c8:	pop    r14
  4089ca:	pop    r15
  4089cc:	pop    rbp
  4089cd:	ret    
  4089ce:	xchg   ax,ax

00000000004089d0 <flatcc_emitter_copy_buffer@@Base>:
  4089d0:	push   r15
  4089d2:	push   r14
  4089d4:	push   r12
  4089d6:	push   rbx
  4089d7:	push   rax
  4089d8:	mov    rax,rdx
  4089db:	mov    rdx,QWORD PTR [rdi+0x30]
  4089df:	cmp    rdx,rax
  4089e2:	ja     408a6d <flatcc_emitter_copy_buffer@@Base+0x9d>
  4089e8:	mov    r14,rdi
  4089eb:	mov    rax,QWORD PTR [rdi]
  4089ee:	test   rax,rax
  4089f1:	je     408a6d <flatcc_emitter_copy_buffer@@Base+0x9d>
  4089f3:	mov    r15,rsi
  4089f6:	cmp    rax,QWORD PTR [r14+0x8]
  4089fa:	je     408a7f <flatcc_emitter_copy_buffer@@Base+0xaf>
  408a00:	mov    r12d,0xb80
  408a06:	sub    r12,QWORD PTR [r14+0x18]
  408a0a:	mov    rsi,QWORD PTR [r14+0x10]
  408a0e:	mov    rdi,r15
  408a11:	mov    rdx,r12
  408a14:	call   4030d0 <memcpy@plt>
  408a19:	add    r12,r15
  408a1c:	mov    rax,QWORD PTR [r14]
  408a1f:	mov    rbx,QWORD PTR [rax+0xb80]
  408a26:	cmp    rbx,QWORD PTR [r14+0x8]
  408a2a:	je     408a54 <flatcc_emitter_copy_buffer@@Base+0x84>
  408a2c:	nop    DWORD PTR [rax+0x0]
  408a30:	mov    edx,0xb80
  408a35:	mov    rdi,r12
  408a38:	mov    rsi,rbx
  408a3b:	call   4030d0 <memcpy@plt>
  408a40:	add    r12,0xb80
  408a47:	mov    rbx,QWORD PTR [rbx+0xb80]
  408a4e:	cmp    rbx,QWORD PTR [r14+0x8]
  408a52:	jne    408a30 <flatcc_emitter_copy_buffer@@Base+0x60>
  408a54:	mov    edx,0xb80
  408a59:	sub    rdx,QWORD PTR [r14+0x28]
  408a5d:	mov    rdi,r12
  408a60:	mov    rsi,rbx
  408a63:	call   4030d0 <memcpy@plt>
  408a68:	mov    r15,r12
  408a6b:	jmp    408a70 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408a6d:	xor    r15d,r15d
  408a70:	mov    rax,r15
  408a73:	add    rsp,0x8
  408a77:	pop    rbx
  408a78:	pop    r12
  408a7a:	pop    r14
  408a7c:	pop    r15
  408a7e:	ret    
  408a7f:	mov    rsi,QWORD PTR [r14+0x10]
  408a83:	mov    rdi,r15
  408a86:	call   4030d0 <memcpy@plt>
  408a8b:	jmp    408a70 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408a8d:	nop    DWORD PTR [rax]

0000000000408a90 <__libc_csu_init@@Base>:
  408a90:	endbr64 
  408a94:	push   r15
  408a96:	lea    r15,[rip+0x535b]        # 40ddf8 <flatcc_builder_padding_base@@Base+0x4ad8>
  408a9d:	push   r14
  408a9f:	mov    r14,rdx
  408aa2:	push   r13
  408aa4:	mov    r13,rsi
  408aa7:	push   r12
  408aa9:	mov    r12d,edi
  408aac:	push   rbp
  408aad:	lea    rbp,[rip+0x534c]        # 40de00 <flatcc_builder_padding_base@@Base+0x4ae0>
  408ab4:	push   rbx
  408ab5:	sub    rbp,r15
  408ab8:	sub    rsp,0x8
  408abc:	call   403000 <free@plt-0x30>
  408ac1:	sar    rbp,0x3
  408ac5:	je     408ae6 <__libc_csu_init@@Base+0x56>
  408ac7:	xor    ebx,ebx
  408ac9:	nop    DWORD PTR [rax+0x0]
  408ad0:	mov    rdx,r14
  408ad3:	mov    rsi,r13
  408ad6:	mov    edi,r12d
  408ad9:	call   QWORD PTR [r15+rbx*8]
  408add:	add    rbx,0x1
  408ae1:	cmp    rbp,rbx
  408ae4:	jne    408ad0 <__libc_csu_init@@Base+0x40>
  408ae6:	add    rsp,0x8
  408aea:	pop    rbx
  408aeb:	pop    rbp
  408aec:	pop    r12
  408aee:	pop    r13
  408af0:	pop    r14
  408af2:	pop    r15
  408af4:	ret    
  408af5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408b00 <__libc_csu_fini@@Base>:
  408b00:	endbr64 
  408b04:	ret    

Disassembly of section .fini:

0000000000408b08 <.fini>:
  408b08:	endbr64 
  408b0c:	sub    rsp,0x8
  408b10:	add    rsp,0x8
  408b14:	ret    
