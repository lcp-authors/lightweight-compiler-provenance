
../repos/prog2/0.11.2:     file format elf64-x86-64


Disassembly of section .init:

0000000000401000 <.init>:
  401000:	endbr64 
  401004:	sub    rsp,0x8
  401008:	mov    rax,QWORD PTR [rip+0x2fe9]        # 403ff8 <__gmon_start__>
  40100f:	test   rax,rax
  401012:	je     401016 <strcpy@plt-0x8a>
  401014:	call   rax
  401016:	add    rsp,0x8
  40101a:	ret    

Disassembly of section .plt:

0000000000401020 <.plt>:
  401020:	push   QWORD PTR [rip+0x2fe2]        # 404008 <_IO_stdin_used@@Base+0x2008>
  401026:	bnd jmp QWORD PTR [rip+0x2fe3]        # 404010 <_IO_stdin_used@@Base+0x2010>
  40102d:	nop    DWORD PTR [rax]
  401030:	endbr64 
  401034:	push   0x0
  401039:	bnd jmp 401020 <strcpy@plt-0x80>
  40103f:	nop
  401040:	endbr64 
  401044:	push   0x1
  401049:	bnd jmp 401020 <strcpy@plt-0x80>
  40104f:	nop
  401050:	endbr64 
  401054:	push   0x2
  401059:	bnd jmp 401020 <strcpy@plt-0x80>
  40105f:	nop
  401060:	endbr64 
  401064:	push   0x3
  401069:	bnd jmp 401020 <strcpy@plt-0x80>
  40106f:	nop
  401070:	endbr64 
  401074:	push   0x4
  401079:	bnd jmp 401020 <strcpy@plt-0x80>
  40107f:	nop
  401080:	endbr64 
  401084:	push   0x5
  401089:	bnd jmp 401020 <strcpy@plt-0x80>
  40108f:	nop
  401090:	endbr64 
  401094:	push   0x6
  401099:	bnd jmp 401020 <strcpy@plt-0x80>
  40109f:	nop

Disassembly of section .plt.sec:

00000000004010a0 <strcpy@plt>:
  4010a0:	endbr64 
  4010a4:	bnd jmp QWORD PTR [rip+0x2f6d]        # 404018 <strcpy@GLIBC_2.2.5>
  4010ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004010b0 <puts@plt>:
  4010b0:	endbr64 
  4010b4:	bnd jmp QWORD PTR [rip+0x2f65]        # 404020 <puts@GLIBC_2.2.5>
  4010bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004010c0 <strlen@plt>:
  4010c0:	endbr64 
  4010c4:	bnd jmp QWORD PTR [rip+0x2f5d]        # 404028 <strlen@GLIBC_2.2.5>
  4010cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004010d0 <__stack_chk_fail@plt>:
  4010d0:	endbr64 
  4010d4:	bnd jmp QWORD PTR [rip+0x2f55]        # 404030 <__stack_chk_fail@GLIBC_2.4>
  4010db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004010e0 <strcmp@plt>:
  4010e0:	endbr64 
  4010e4:	bnd jmp QWORD PTR [rip+0x2f4d]        # 404038 <strcmp@GLIBC_2.2.5>
  4010eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004010f0 <__isoc99_scanf@plt>:
  4010f0:	endbr64 
  4010f4:	bnd jmp QWORD PTR [rip+0x2f45]        # 404040 <__isoc99_scanf@GLIBC_2.7>
  4010fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000401100 <strcat@plt>:
  401100:	endbr64 
  401104:	bnd jmp QWORD PTR [rip+0x2f3d]        # 404048 <strcat@GLIBC_2.2.5>
  40110b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000401110 <_start@@Base>:
  401110:	endbr64 
  401114:	xor    ebp,ebp
  401116:	mov    r9,rdx
  401119:	pop    rsi
  40111a:	mov    rdx,rsp
  40111d:	and    rsp,0xfffffffffffffff0
  401121:	push   rax
  401122:	push   rsp
  401123:	mov    r8,0x401510
  40112a:	mov    rcx,0x4014a0
  401131:	mov    rdi,0x4011f6
  401138:	call   QWORD PTR [rip+0x2eb2]        # 403ff0 <__libc_start_main@GLIBC_2.2.5>
  40113e:	hlt    
  40113f:	nop
  401140:	endbr64 
  401144:	ret    
  401145:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40114f:	nop
  401150:	mov    eax,0x404060
  401155:	cmp    rax,0x404060
  40115b:	je     401170 <_start@@Base+0x60>
  40115d:	mov    eax,0x0
  401162:	test   rax,rax
  401165:	je     401170 <_start@@Base+0x60>
  401167:	mov    edi,0x404060
  40116c:	jmp    rax
  40116e:	xchg   ax,ax
  401170:	ret    
  401171:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40117c:	nop    DWORD PTR [rax+0x0]
  401180:	mov    esi,0x404060
  401185:	sub    rsi,0x404060
  40118c:	sar    rsi,0x3
  401190:	mov    rax,rsi
  401193:	shr    rax,0x3f
  401197:	add    rsi,rax
  40119a:	sar    rsi,1
  40119d:	je     4011b0 <_start@@Base+0xa0>
  40119f:	mov    eax,0x0
  4011a4:	test   rax,rax
  4011a7:	je     4011b0 <_start@@Base+0xa0>
  4011a9:	mov    edi,0x404060
  4011ae:	jmp    rax
  4011b0:	ret    
  4011b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4011bc:	nop    DWORD PTR [rax+0x0]
  4011c0:	endbr64 
  4011c4:	cmp    BYTE PTR [rip+0x2e95],0x0        # 404060 <__bss_start@@Base>
  4011cb:	jne    4011e0 <_start@@Base+0xd0>
  4011cd:	push   rbp
  4011ce:	mov    rbp,rsp
  4011d1:	call   401150 <_start@@Base+0x40>
  4011d6:	mov    BYTE PTR [rip+0x2e83],0x1        # 404060 <__bss_start@@Base>
  4011dd:	pop    rbp
  4011de:	ret    
  4011df:	nop
  4011e0:	ret    
  4011e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4011ec:	nop    DWORD PTR [rax+0x0]
  4011f0:	endbr64 
  4011f4:	jmp    401180 <_start@@Base+0x70>

00000000004011f6 <main@@Base>:
  4011f6:	endbr64 
  4011fa:	push   rbp
  4011fb:	mov    rbp,rsp
  4011fe:	sub    rsp,0x90
  401205:	mov    rax,QWORD PTR fs:0x28
  40120e:	mov    QWORD PTR [rbp-0x8],rax
  401212:	xor    eax,eax
  401214:	mov    QWORD PTR [rbp-0x70],0x0
  40121c:	mov    QWORD PTR [rbp-0x68],0x0
  401224:	mov    QWORD PTR [rbp-0x60],0x0
  40122c:	mov    WORD PTR [rbp-0x58],0x0
  401232:	mov    DWORD PTR [rbp-0x80],0x0
  401239:	lea    rax,[rbp-0x7a]
  40123d:	mov    rsi,rax
  401240:	lea    rdi,[rip+0xdbd]        # 402004 <_IO_stdin_used@@Base+0x4>
  401247:	mov    eax,0x0
  40124c:	call   4010f0 <__isoc99_scanf@plt>
  401251:	movzx  eax,BYTE PTR [rbp-0x7a]
  401255:	cmp    al,0x2e
  401257:	je     401308 <main@@Base+0x112>
  40125d:	lea    rax,[rbp-0x84]
  401264:	mov    rsi,rax
  401267:	lea    rdi,[rip+0xd99]        # 402007 <_IO_stdin_used@@Base+0x7>
  40126e:	mov    eax,0x0
  401273:	call   4010f0 <__isoc99_scanf@plt>
  401278:	mov    DWORD PTR [rbp-0x80],0x0
  40127f:	mov    edx,DWORD PTR [rbp-0x84]
  401285:	lea    rcx,[rbp-0x70]
  401289:	lea    rax,[rbp-0x7a]
  40128d:	mov    rsi,rcx
  401290:	mov    rdi,rax
  401293:	call   401449 <StringSet@@Base>
  401298:	lea    rdx,[rbp-0x50]
  40129c:	lea    rax,[rbp-0x70]
  4012a0:	mov    rsi,rdx
  4012a3:	mov    rdi,rax
  4012a6:	call   401324 <R_ShiftString@@Base>
  4012ab:	jmp    4012fd <main@@Base+0x107>
  4012ad:	lea    rdx,[rbp-0x50]
  4012b1:	lea    rax,[rbp-0x70]
  4012b5:	mov    rsi,rdx
  4012b8:	mov    rdi,rax
  4012bb:	call   4010e0 <strcmp@plt>
  4012c0:	test   eax,eax
  4012c2:	jne    4012cb <main@@Base+0xd5>
  4012c4:	mov    DWORD PTR [rbp-0x80],0x1
  4012cb:	lea    rax,[rbp-0x70]
  4012cf:	mov    rdi,rax
  4012d2:	call   4010b0 <puts@plt>
  4012d7:	lea    rdx,[rbp-0x70]
  4012db:	lea    rax,[rbp-0x30]
  4012df:	mov    rsi,rdx
  4012e2:	mov    rdi,rax
  4012e5:	call   4010a0 <strcpy@plt>
  4012ea:	lea    rdx,[rbp-0x70]
  4012ee:	lea    rax,[rbp-0x30]
  4012f2:	mov    rsi,rdx
  4012f5:	mov    rdi,rax
  4012f8:	call   4013b6 <L_ShiftString@@Base>
  4012fd:	cmp    DWORD PTR [rbp-0x80],0x0
  401301:	je     4012ad <main@@Base+0xb7>
  401303:	jmp    401239 <main@@Base+0x43>
  401308:	nop
  401309:	mov    eax,0x0
  40130e:	mov    rcx,QWORD PTR [rbp-0x8]
  401312:	xor    rcx,QWORD PTR fs:0x28
  40131b:	je     401322 <main@@Base+0x12c>
  40131d:	call   4010d0 <__stack_chk_fail@plt>
  401322:	leave  
  401323:	ret    

0000000000401324 <R_ShiftString@@Base>:
  401324:	endbr64 
  401328:	push   rbp
  401329:	mov    rbp,rsp
  40132c:	push   rbx
  40132d:	sub    rsp,0x28
  401331:	mov    QWORD PTR [rbp-0x28],rdi
  401335:	mov    QWORD PTR [rbp-0x30],rsi
  401339:	mov    rax,QWORD PTR [rbp-0x28]
  40133d:	mov    rdi,rax
  401340:	call   4010c0 <strlen@plt>
  401345:	lea    rdx,[rax-0x1]
  401349:	mov    rax,QWORD PTR [rbp-0x28]
  40134d:	add    rax,rdx
  401350:	movzx  eax,BYTE PTR [rax]
  401353:	mov    rdx,QWORD PTR [rbp-0x30]
  401357:	mov    BYTE PTR [rdx],al
  401359:	mov    DWORD PTR [rbp-0x14],0x1
  401360:	jmp    401387 <R_ShiftString@@Base+0x63>
  401362:	mov    eax,DWORD PTR [rbp-0x14]
  401365:	cdqe   
  401367:	lea    rdx,[rax-0x1]
  40136b:	mov    rax,QWORD PTR [rbp-0x28]
  40136f:	add    rax,rdx
  401372:	mov    edx,DWORD PTR [rbp-0x14]
  401375:	movsxd rcx,edx
  401378:	mov    rdx,QWORD PTR [rbp-0x30]
  40137c:	add    rdx,rcx
  40137f:	movzx  eax,BYTE PTR [rax]
  401382:	mov    BYTE PTR [rdx],al
  401384:	inc    DWORD PTR [rbp-0x14]
  401387:	mov    eax,DWORD PTR [rbp-0x14]
  40138a:	movsxd rbx,eax
  40138d:	mov    rax,QWORD PTR [rbp-0x28]
  401391:	mov    rdi,rax
  401394:	call   4010c0 <strlen@plt>
  401399:	cmp    rbx,rax
  40139c:	jb     401362 <R_ShiftString@@Base+0x3e>
  40139e:	mov    eax,DWORD PTR [rbp-0x14]
  4013a1:	movsxd rdx,eax
  4013a4:	mov    rax,QWORD PTR [rbp-0x30]
  4013a8:	add    rax,rdx
  4013ab:	mov    BYTE PTR [rax],0x0
  4013ae:	nop
  4013af:	add    rsp,0x28
  4013b3:	pop    rbx
  4013b4:	pop    rbp
  4013b5:	ret    

00000000004013b6 <L_ShiftString@@Base>:
  4013b6:	endbr64 
  4013ba:	push   rbp
  4013bb:	mov    rbp,rsp
  4013be:	push   rbx
  4013bf:	sub    rsp,0x28
  4013c3:	mov    QWORD PTR [rbp-0x28],rdi
  4013c7:	mov    QWORD PTR [rbp-0x30],rsi
  4013cb:	mov    rax,QWORD PTR [rbp-0x28]
  4013cf:	mov    rdi,rax
  4013d2:	call   4010c0 <strlen@plt>
  4013d7:	lea    rdx,[rax-0x1]
  4013db:	mov    rax,QWORD PTR [rbp-0x30]
  4013df:	add    rdx,rax
  4013e2:	mov    rax,QWORD PTR [rbp-0x28]
  4013e6:	movzx  eax,BYTE PTR [rax]
  4013e9:	mov    BYTE PTR [rdx],al
  4013eb:	mov    DWORD PTR [rbp-0x14],0x1
  4013f2:	jmp    40141a <L_ShiftString@@Base+0x64>
  4013f4:	mov    eax,DWORD PTR [rbp-0x14]
  4013f7:	movsxd rdx,eax
  4013fa:	mov    rax,QWORD PTR [rbp-0x28]
  4013fe:	add    rax,rdx
  401401:	mov    edx,DWORD PTR [rbp-0x14]
  401404:	movsxd rdx,edx
  401407:	lea    rcx,[rdx-0x1]
  40140b:	mov    rdx,QWORD PTR [rbp-0x30]
  40140f:	add    rdx,rcx
  401412:	movzx  eax,BYTE PTR [rax]
  401415:	mov    BYTE PTR [rdx],al
  401417:	inc    DWORD PTR [rbp-0x14]
  40141a:	mov    eax,DWORD PTR [rbp-0x14]
  40141d:	movsxd rbx,eax
  401420:	mov    rax,QWORD PTR [rbp-0x28]
  401424:	mov    rdi,rax
  401427:	call   4010c0 <strlen@plt>
  40142c:	cmp    rbx,rax
  40142f:	jb     4013f4 <L_ShiftString@@Base+0x3e>
  401431:	mov    eax,DWORD PTR [rbp-0x14]
  401434:	movsxd rdx,eax
  401437:	mov    rax,QWORD PTR [rbp-0x30]
  40143b:	add    rax,rdx
  40143e:	mov    BYTE PTR [rax],0x0
  401441:	nop
  401442:	add    rsp,0x28
  401446:	pop    rbx
  401447:	pop    rbp
  401448:	ret    

0000000000401449 <StringSet@@Base>:
  401449:	endbr64 
  40144d:	push   rbp
  40144e:	mov    rbp,rsp
  401451:	sub    rsp,0x30
  401455:	mov    QWORD PTR [rbp-0x18],rdi
  401459:	mov    QWORD PTR [rbp-0x20],rsi
  40145d:	mov    DWORD PTR [rbp-0x24],edx
  401460:	mov    rax,QWORD PTR [rbp-0x20]
  401464:	mov    BYTE PTR [rax],0x0
  401467:	mov    DWORD PTR [rbp-0x4],0x0
  40146e:	jmp    401486 <StringSet@@Base+0x3d>
  401470:	mov    rdx,QWORD PTR [rbp-0x18]
  401474:	mov    rax,QWORD PTR [rbp-0x20]
  401478:	mov    rsi,rdx
  40147b:	mov    rdi,rax
  40147e:	call   401100 <strcat@plt>
  401483:	inc    DWORD PTR [rbp-0x4]
  401486:	mov    eax,DWORD PTR [rbp-0x4]
  401489:	cmp    eax,DWORD PTR [rbp-0x24]
  40148c:	jl     401470 <StringSet@@Base+0x27>
  40148e:	nop
  40148f:	leave  
  401490:	ret    
  401491:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40149b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004014a0 <__libc_csu_init@@Base>:
  4014a0:	endbr64 
  4014a4:	push   r15
  4014a6:	lea    r15,[rip+0x2963]        # 403e10 <_IO_stdin_used@@Base+0x1e10>
  4014ad:	push   r14
  4014af:	mov    r14,rdx
  4014b2:	push   r13
  4014b4:	mov    r13,rsi
  4014b7:	push   r12
  4014b9:	mov    r12d,edi
  4014bc:	push   rbp
  4014bd:	lea    rbp,[rip+0x2954]        # 403e18 <_IO_stdin_used@@Base+0x1e18>
  4014c4:	push   rbx
  4014c5:	sub    rbp,r15
  4014c8:	sub    rsp,0x8
  4014cc:	call   401000 <strcpy@plt-0xa0>
  4014d1:	sar    rbp,0x3
  4014d5:	je     4014f6 <__libc_csu_init@@Base+0x56>
  4014d7:	xor    ebx,ebx
  4014d9:	nop    DWORD PTR [rax+0x0]
  4014e0:	mov    rdx,r14
  4014e3:	mov    rsi,r13
  4014e6:	mov    edi,r12d
  4014e9:	call   QWORD PTR [r15+rbx*8]
  4014ed:	add    rbx,0x1
  4014f1:	cmp    rbp,rbx
  4014f4:	jne    4014e0 <__libc_csu_init@@Base+0x40>
  4014f6:	add    rsp,0x8
  4014fa:	pop    rbx
  4014fb:	pop    rbp
  4014fc:	pop    r12
  4014fe:	pop    r13
  401500:	pop    r14
  401502:	pop    r15
  401504:	ret    
  401505:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000401510 <__libc_csu_fini@@Base>:
  401510:	endbr64 
  401514:	ret    

Disassembly of section .fini:

0000000000401518 <.fini>:
  401518:	endbr64 
  40151c:	sub    rsp,0x8
  401520:	add    rsp,0x8
  401524:	ret    
