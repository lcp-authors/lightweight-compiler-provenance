
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xafe9]        # 40dff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xafe2]        # 40e008 <flatcc_builder_padding_base@@Base+0x4a38>
  403026:	jmp    QWORD PTR [rip+0xafe4]        # 40e010 <flatcc_builder_padding_base@@Base+0x4a40>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xafe2]        # 40e018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xafda]        # 40e020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <fclose@plt>:
  403050:	jmp    QWORD PTR [rip+0xafd2]        # 40e028 <fclose@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <strlen@plt>:
  403060:	jmp    QWORD PTR [rip+0xafca]        # 40e030 <strlen@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <printf@plt>:
  403070:	jmp    QWORD PTR [rip+0xafc2]        # 40e038 <printf@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <gettimeofday@plt>:
  403080:	jmp    QWORD PTR [rip+0xafba]        # 40e040 <gettimeofday@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <__assert_fail@plt>:
  403090:	jmp    QWORD PTR [rip+0xafb2]        # 40e048 <__assert_fail@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memset@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xafaa]        # 40e050 <memset@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memchr@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xafa2]        # 40e058 <memchr@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <strcmp@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xaf9a]        # 40e060 <strcmp@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <memcpy@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xaf92]        # 40e068 <memcpy@GLIBC_2.14>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <malloc@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xaf8a]        # 40e070 <malloc@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <bcmp@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xaf82]        # 40e078 <bcmp@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <fwrite_unlocked@plt>:
  403100:	jmp    QWORD PTR [rip+0xaf7a]        # 40e080 <fwrite_unlocked@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <realloc@plt>:
  403110:	jmp    QWORD PTR [rip+0xaf72]        # 40e088 <realloc@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

0000000000403120 <fopen@plt>:
  403120:	jmp    QWORD PTR [rip+0xaf6a]        # 40e090 <fopen@GLIBC_2.2.5>
  403126:	push   0xf
  40312b:	jmp    403020 <free@plt-0x10>

0000000000403130 <posix_memalign@plt>:
  403130:	jmp    QWORD PTR [rip+0xaf62]        # 40e098 <posix_memalign@GLIBC_2.2.5>
  403136:	push   0x10
  40313b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403140 <_start@@Base>:
  403140:	endbr64 
  403144:	xor    ebp,ebp
  403146:	mov    r9,rdx
  403149:	pop    rsi
  40314a:	mov    rdx,rsp
  40314d:	and    rsp,0xfffffffffffffff0
  403151:	push   rax
  403152:	push   rsp
  403153:	mov    r8,0x408c60
  40315a:	mov    rcx,0x408bf0
  403161:	mov    rdi,0x403230
  403168:	call   QWORD PTR [rip+0xae82]        # 40dff0 <__libc_start_main@GLIBC_2.2.5>
  40316e:	hlt    
  40316f:	nop
  403170:	endbr64 
  403174:	ret    
  403175:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40317f:	nop
  403180:	mov    eax,0x40e0b0
  403185:	cmp    rax,0x40e0b0
  40318b:	je     4031a0 <_start@@Base+0x60>
  40318d:	mov    eax,0x0
  403192:	test   rax,rax
  403195:	je     4031a0 <_start@@Base+0x60>
  403197:	mov    edi,0x40e0b0
  40319c:	jmp    rax
  40319e:	xchg   ax,ax
  4031a0:	ret    
  4031a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ac:	nop    DWORD PTR [rax+0x0]
  4031b0:	mov    esi,0x40e0b0
  4031b5:	sub    rsi,0x40e0b0
  4031bc:	mov    rax,rsi
  4031bf:	shr    rsi,0x3f
  4031c3:	sar    rax,0x3
  4031c7:	add    rsi,rax
  4031ca:	sar    rsi,1
  4031cd:	je     4031e0 <_start@@Base+0xa0>
  4031cf:	mov    eax,0x0
  4031d4:	test   rax,rax
  4031d7:	je     4031e0 <_start@@Base+0xa0>
  4031d9:	mov    edi,0x40e0b0
  4031de:	jmp    rax
  4031e0:	ret    
  4031e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ec:	nop    DWORD PTR [rax+0x0]
  4031f0:	endbr64 
  4031f4:	cmp    BYTE PTR [rip+0xaeb5],0x0        # 40e0b0 <__bss_start@@Base>
  4031fb:	jne    403210 <_start@@Base+0xd0>
  4031fd:	push   rbp
  4031fe:	mov    rbp,rsp
  403201:	call   403180 <_start@@Base+0x40>
  403206:	mov    BYTE PTR [rip+0xaea3],0x1        # 40e0b0 <__bss_start@@Base>
  40320d:	pop    rbp
  40320e:	ret    
  40320f:	nop
  403210:	ret    
  403211:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40321c:	nop    DWORD PTR [rax+0x0]
  403220:	endbr64 
  403224:	jmp    4031b0 <_start@@Base+0x70>
  403226:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403230 <main@@Base>:
  403230:	push   rbp
  403231:	push   r15
  403233:	push   r14
  403235:	push   r13
  403237:	push   r12
  403239:	push   rbx
  40323a:	sub    rsp,0x1d8
  403241:	lea    rbx,[rsp+0x50]
  403246:	mov    rdi,rbx
  403249:	call   403c80 <flatcc_builder_init@@Base>
  40324e:	mov    rdi,rbx
  403251:	call   403870 <main@@Base+0x640>
  403256:	lea    rsi,[rsp+0x18]
  40325b:	mov    rdi,rbx
  40325e:	call   4082e0 <flatcc_builder_finalize_buffer@@Base>
  403263:	mov    rbp,rax
  403266:	lea    rdi,[rip+0x5de3]        # 409050 <_IO_stdin_used@@Base+0x50>
  40326d:	lea    rsi,[rip+0x5df2]        # 409066 <_IO_stdin_used@@Base+0x66>
  403274:	call   403120 <fopen@plt>
  403279:	test   rax,rax
  40327c:	mov    QWORD PTR [rsp+0x10],rbp
  403281:	je     4036cb <main@@Base+0x49b>
  403287:	mov    rbx,rax
  40328a:	mov    r14,QWORD PTR [rsp+0x18]
  40328f:	mov    esi,0x1
  403294:	mov    rdi,rbp
  403297:	mov    rdx,r14
  40329a:	mov    rcx,rax
  40329d:	call   403100 <fwrite_unlocked@plt>
  4032a2:	mov    r15,rax
  4032a5:	mov    rdi,rbx
  4032a8:	call   403050 <fclose@plt>
  4032ad:	mov    ebx,0x1
  4032b2:	cmp    r14,r15
  4032b5:	jne    403728 <main@@Base+0x4f8>
  4032bb:	mov    rsi,QWORD PTR [rsp+0x18]
  4032c0:	lea    rdi,[rip+0x5da2]        # 409069 <_IO_stdin_used@@Base+0x69>
  4032c7:	xor    ebp,ebp
  4032c9:	xor    eax,eax
  4032cb:	call   403070 <printf@plt>
  4032d0:	lea    rdi,[rip+0x62c1]        # 409598 <_IO_stdin_used@@Base+0x598>
  4032d7:	call   403040 <puts@plt>
  4032dc:	lea    rdi,[rsp+0x20]
  4032e1:	xor    esi,esi
  4032e3:	call   403080 <gettimeofday@plt>
  4032e8:	mov    rax,QWORD PTR [rip+0xb1b9]        # 40e4a8 <__bss_start@@Base+0x3f8>
  4032ef:	test   rax,rax
  4032f2:	jne    403309 <main@@Base+0xd9>
  4032f4:	vmovups xmm0,XMMWORD PTR [rsp+0x20]
  4032fa:	vmovups XMMWORD PTR [rip+0xb1a6],xmm0        # 40e4a8 <__bss_start@@Base+0x3f8>
  403302:	mov    rax,QWORD PTR [rip+0xb19f]        # 40e4a8 <__bss_start@@Base+0x3f8>
  403309:	mov    rcx,QWORD PTR [rsp+0x20]
  40330e:	sub    rcx,rax
  403311:	mov    rax,QWORD PTR [rsp+0x28]
  403316:	vcvtsi2sd xmm0,xmm1,rcx
  40331b:	sub    rax,QWORD PTR [rip+0xb18e]        # 40e4b0 <__bss_start@@Base+0x400>
  403322:	vcvtsi2sd xmm1,xmm1,rax
  403327:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x5cd9]        # 409008 <_IO_stdin_used@@Base+0x8>
  40332f:	vaddsd xmm0,xmm1,xmm0
  403333:	vmovsd QWORD PTR [rsp+0x30],xmm0
  403339:	mov    rbx,QWORD PTR [rsp+0x10]
  40333e:	lea    rax,[rbx+0x8]
  403342:	mov    QWORD PTR [rsp+0x38],rax
  403347:	mov    r14d,0x736e6f4d
  40334d:	mov    r15d,0x72657473
  403353:	lea    r13,[rip+0xad66]        # 40e0c0 <__bss_start@@Base+0x10>
  40335a:	nop    WORD PTR [rax+rax*1+0x0]
  403360:	mov    QWORD PTR [rsp+0x40],rbp
  403365:	lea    rbp,[rsp+0x50]
  40336a:	mov    rdi,rbp
  40336d:	call   403870 <main@@Base+0x640>
  403372:	mov    rdx,QWORD PTR [rsp+0x18]
  403377:	mov    rdi,rbp
  40337a:	mov    rsi,rbx
  40337d:	call   4082a0 <flatcc_builder_copy_buffer@@Base>
  403382:	test   rbx,rbx
  403385:	je     40383e <main@@Base+0x60e>
  40338b:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  403392:	jne    40383e <main@@Base+0x60e>
  403398:	mov    eax,DWORD PTR [rbx]
  40339a:	lea    rbp,[rbx+rax*1]
  40339e:	mov    QWORD PTR [rsp+0x8],rax
  4033a3:	movsxd rbx,DWORD PTR [rbx+rax*1]
  4033a7:	mov    rax,rbp
  4033aa:	sub    rax,rbx
  4033ad:	movzx  r12d,WORD PTR [rax]
  4033b1:	cmp    r12w,0xb
  4033b6:	jbe    4037c2 <main@@Base+0x592>
  4033bc:	neg    rbx
  4033bf:	movzx  eax,WORD PTR [rbp+rbx*1+0xa]
  4033c4:	test   rax,rax
  4033c7:	je     4037c2 <main@@Base+0x592>
  4033cd:	lea    rcx,[rax+rbp*1]
  4033d1:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  4033d5:	lea    rdi,[rax+rcx*1]
  4033d9:	add    rdi,0x4
  4033dd:	lea    rsi,[rip+0x5c97]        # 40907b <_IO_stdin_used@@Base+0x7b>
  4033e4:	call   4030c0 <strcmp@plt>
  4033e9:	test   eax,eax
  4033eb:	jne    403847 <main@@Base+0x617>
  4033f1:	cmp    r12w,0x1c
  4033f6:	jb     40381f <main@@Base+0x5ef>
  4033fc:	movzx  r8d,WORD PTR [rbp+rbx*1+0x1a]
  403402:	test   r8,r8
  403405:	je     40381f <main@@Base+0x5ef>
  40340b:	mov    eax,DWORD PTR [rbp+r8*1+0x0]
  403410:	add    rbp,r8
  403413:	cmp    DWORD PTR [rax+rbp*1],0x3e8
  40341a:	jne    40381f <main@@Base+0x5ef>
  403420:	lea    rcx,[rax+rbp*1]
  403424:	add    rcx,0x4
  403428:	mov    QWORD PTR [rsp+0x48],rcx
  40342d:	add    r8,rax
  403430:	add    r8,QWORD PTR [rsp+0x8]
  403435:	add    r8,QWORD PTR [rsp+0x38]
  40343a:	xor    ebp,ebp
  40343c:	nop    DWORD PTR [rax+0x0]
  403440:	mov    rax,QWORD PTR [rsp+0x48]
  403445:	lea    rsi,[rax+rbp*4]
  403449:	mov    r9d,DWORD PTR [rax+rbp*4]
  40344d:	movsxd rdi,DWORD PTR [r9+rsi*1]
  403451:	add    rsi,r9
  403454:	mov    rcx,rsi
  403457:	sub    rcx,rdi
  40345a:	movzx  eax,WORD PTR [rcx]
  40345d:	cmp    ax,0xc
  403461:	jb     4037c2 <main@@Base+0x592>
  403467:	neg    rdi
  40346a:	movzx  ecx,WORD PTR [rsi+rdi*1+0xa]
  40346f:	test   rcx,rcx
  403472:	je     4037c2 <main@@Base+0x592>
  403478:	lea    rdx,[rsi+rcx*1]
  40347c:	mov    ebx,DWORD PTR [rsi+rcx*1]
  40347f:	add    rdx,rbx
  403482:	add    rdx,0x4
  403486:	cmp    ax,0x10
  40348a:	jb     4034c0 <main@@Base+0x290>
  40348c:	movzx  edi,WORD PTR [rsi+rdi*1+0xe]
  403491:	test   rdi,rdi
  403494:	je     4034c0 <main@@Base+0x290>
  403496:	lea    rax,[rsi+rdi*1]
  40349a:	mov    esi,DWORD PTR [rsi+rdi*1]
  40349d:	lea    r12,[rsi+rax*1]
  4034a1:	add    r12,0x4
  4034a5:	cmp    DWORD PTR [rdx-0x4],0x2bc
  4034ac:	je     4034d0 <main@@Base+0x2a0>
  4034ae:	jmp    403800 <main@@Base+0x5d0>
  4034b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034bd:	nop    DWORD PTR [rax]
  4034c0:	xor    r12d,r12d
  4034c3:	cmp    DWORD PTR [rdx-0x4],0x2bc
  4034ca:	jne    403800 <main@@Base+0x5d0>
  4034d0:	test   r12,r12
  4034d3:	je     4037e1 <main@@Base+0x5b1>
  4034d9:	cmp    DWORD PTR [r12-0x4],0x186a0
  4034e2:	jne    4037e1 <main@@Base+0x5b1>
  4034e8:	add    rbx,rcx
  4034eb:	add    rbx,r9
  4034ee:	add    rbx,r8
  4034f1:	xor    esi,esi
  4034f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034fd:	nop    DWORD PTR [rax]
  403500:	mov    eax,DWORD PTR [rbx]
  403502:	xor    eax,r14d
  403505:	mov    ecx,DWORD PTR [rbx+0x3]
  403508:	xor    ecx,r15d
  40350b:	or     ecx,eax
  40350d:	jne    403760 <main@@Base+0x530>
  403513:	inc    rsi
  403516:	add    rbx,0x7
  40351a:	cmp    rsi,0x64
  40351e:	jne    403500 <main@@Base+0x2d0>
  403520:	mov    QWORD PTR [rsp+0x8],r8
  403525:	xor    ebx,ebx
  403527:	nop    WORD PTR [rax+rax*1+0x0]
  403530:	lea    rdi,[r12+rbx*1]
  403534:	mov    edx,0x3e8
  403539:	mov    rsi,r13
  40353c:	call   4030f0 <bcmp@plt>
  403541:	test   eax,eax
  403543:	jne    4037a3 <main@@Base+0x573>
  403549:	add    rbx,0x3e8
  403550:	cmp    rbx,0x186a0
  403557:	jne    403530 <main@@Base+0x300>
  403559:	inc    rbp
  40355c:	mov    r8,QWORD PTR [rsp+0x8]
  403561:	add    r8,0x4
  403565:	cmp    rbp,0x3e8
  40356c:	jne    403440 <main@@Base+0x210>
  403572:	mov    rbp,QWORD PTR [rsp+0x40]
  403577:	inc    ebp
  403579:	cmp    ebp,0xa
  40357c:	mov    rbx,QWORD PTR [rsp+0x10]
  403581:	jne    403360 <main@@Base+0x130>
  403587:	lea    rdi,[rsp+0x20]
  40358c:	xor    esi,esi
  40358e:	call   403080 <gettimeofday@plt>
  403593:	mov    rax,QWORD PTR [rip+0xaf0e]        # 40e4a8 <__bss_start@@Base+0x3f8>
  40359a:	test   rax,rax
  40359d:	jne    4035b4 <main@@Base+0x384>
  40359f:	vmovupd xmm0,XMMWORD PTR [rsp+0x20]
  4035a5:	vmovupd XMMWORD PTR [rip+0xaefb],xmm0        # 40e4a8 <__bss_start@@Base+0x3f8>
  4035ad:	mov    rax,QWORD PTR [rip+0xaef4]        # 40e4a8 <__bss_start@@Base+0x3f8>
  4035b4:	mov    rcx,QWORD PTR [rsp+0x20]
  4035b9:	sub    rcx,rax
  4035bc:	mov    rax,QWORD PTR [rsp+0x28]
  4035c1:	vcvtsi2sd xmm0,xmm2,rcx
  4035c6:	sub    rax,QWORD PTR [rip+0xaee3]        # 40e4b0 <__bss_start@@Base+0x400>
  4035cd:	vcvtsi2sd xmm1,xmm2,rax
  4035d2:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x5a2e]        # 409008 <_IO_stdin_used@@Base+0x8>
  4035da:	vaddsd xmm0,xmm1,xmm0
  4035de:	vsubsd xmm0,xmm0,QWORD PTR [rsp+0x30]
  4035e4:	vmovsd QWORD PTR [rsp+0x8],xmm0
  4035ea:	mov    r14,QWORD PTR [rsp+0x18]
  4035ef:	lea    rdi,[rip+0x5eaf]        # 4094a5 <_IO_stdin_used@@Base+0x4a5>
  4035f6:	lea    rsi,[rip+0x5b10]        # 40910d <_IO_stdin_used@@Base+0x10d>
  4035fd:	xor    ebx,ebx
  4035ff:	xor    eax,eax
  403601:	call   403070 <printf@plt>
  403606:	lea    rdi,[rip+0x5ea7]        # 4094b4 <_IO_stdin_used@@Base+0x4b4>
  40360d:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  403613:	mov    al,0x1
  403615:	call   403070 <printf@plt>
  40361a:	lea    rdi,[rip+0x5eab]        # 4094cc <_IO_stdin_used@@Base+0x4cc>
  403621:	mov    esi,0xa
  403626:	xor    eax,eax
  403628:	call   403070 <printf@plt>
  40362d:	lea    rdi,[rip+0x5ea8]        # 4094dc <_IO_stdin_used@@Base+0x4dc>
  403634:	mov    rsi,r14
  403637:	xor    eax,eax
  403639:	call   403070 <printf@plt>
  40363e:	vmovq  xmm0,r14
  403643:	vpunpckldq xmm0,xmm0,XMMWORD PTR [rip+0x59e5]        # 409030 <_IO_stdin_used@@Base+0x30>
  40364b:	vsubpd xmm0,xmm0,XMMWORD PTR [rip+0x59ed]        # 409040 <_IO_stdin_used@@Base+0x40>
  403653:	vhaddpd xmm0,xmm0,xmm0
  403657:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59b1]        # 409010 <_IO_stdin_used@@Base+0x10>
  40365f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x59a1]        # 409008 <_IO_stdin_used@@Base+0x8>
  403667:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40366d:	lea    rdi,[rip+0x5e7b]        # 4094ef <_IO_stdin_used@@Base+0x4ef>
  403674:	mov    al,0x1
  403676:	call   403070 <printf@plt>
  40367b:	vmovsd xmm0,QWORD PTR [rip+0x598d]        # 409010 <_IO_stdin_used@@Base+0x10>
  403683:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  403689:	lea    rdi,[rip+0x5e77]        # 409507 <_IO_stdin_used@@Base+0x507>
  403690:	mov    al,0x1
  403692:	call   403070 <printf@plt>
  403697:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  40369d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5973]        # 409018 <_IO_stdin_used@@Base+0x18>
  4036a5:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5963]        # 409010 <_IO_stdin_used@@Base+0x10>
  4036ad:	vmovsd xmm1,QWORD PTR [rip+0x596b]        # 409020 <_IO_stdin_used@@Base+0x20>
  4036b5:	vucomisd xmm1,xmm0
  4036b9:	jbe    4036d2 <main@@Base+0x4a2>
  4036bb:	lea    rdi,[rip+0x5e66]        # 409528 <_IO_stdin_used@@Base+0x528>
  4036c2:	mov    al,0x1
  4036c4:	call   403070 <printf@plt>
  4036c9:	jmp    403728 <main@@Base+0x4f8>
  4036cb:	mov    ebx,0xffffffff
  4036d0:	jmp    403728 <main@@Base+0x4f8>
  4036d2:	vmovsd xmm1,QWORD PTR [rip+0x592e]        # 409008 <_IO_stdin_used@@Base+0x8>
  4036da:	vucomisd xmm1,xmm0
  4036de:	jbe    4036f1 <main@@Base+0x4c1>
  4036e0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5938]        # 409020 <_IO_stdin_used@@Base+0x20>
  4036e8:	lea    rdi,[rip+0x5e51]        # 409540 <_IO_stdin_used@@Base+0x540>
  4036ef:	jmp    40371f <main@@Base+0x4ef>
  4036f1:	vmovsd xmm1,QWORD PTR [rip+0x591f]        # 409018 <_IO_stdin_used@@Base+0x18>
  4036f9:	vucomisd xmm1,xmm0
  4036fd:	jbe    403710 <main@@Base+0x4e0>
  4036ff:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5901]        # 409008 <_IO_stdin_used@@Base+0x8>
  403707:	lea    rdi,[rip+0x5e4a]        # 409558 <_IO_stdin_used@@Base+0x558>
  40370e:	jmp    40371f <main@@Base+0x4ef>
  403710:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5900]        # 409018 <_IO_stdin_used@@Base+0x18>
  403718:	lea    rdi,[rip+0x5e51]        # 409570 <_IO_stdin_used@@Base+0x570>
  40371f:	mov    al,0x1
  403721:	call   403070 <printf@plt>
  403726:	xor    ebx,ebx
  403728:	lea    rdi,[rsp+0x50]
  40372d:	call   404040 <flatcc_builder_clear@@Base>
  403732:	mov    rdi,QWORD PTR [rsp+0x10]
  403737:	call   403030 <free@plt>
  40373c:	test   ebx,ebx
  40373e:	je     40374c <main@@Base+0x51c>
  403740:	lea    rdi,[rip+0x5e40]        # 409587 <_IO_stdin_used@@Base+0x587>
  403747:	call   403040 <puts@plt>
  40374c:	mov    eax,ebx
  40374e:	add    rsp,0x1d8
  403755:	pop    rbx
  403756:	pop    r12
  403758:	pop    r13
  40375a:	pop    r14
  40375c:	pop    r15
  40375e:	pop    rbp
  40375f:	ret    
  403760:	lea    rdi,[rip+0x5d11]        # 409478 <_IO_stdin_used@@Base+0x478>
  403767:	xor    eax,eax
  403769:	call   403070 <printf@plt>
  40376e:	sub    rbx,QWORD PTR [rsp+0x10]
  403773:	lea    rdi,[rip+0x5d1e]        # 409498 <_IO_stdin_used@@Base+0x498>
  40377a:	mov    rsi,rbx
  40377d:	xor    eax,eax
  40377f:	call   403070 <printf@plt>
  403784:	lea    rdi,[rip+0x7297]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40378b:	lea    rsi,[rip+0x58ff]        # 409091 <_IO_stdin_used@@Base+0x91>
  403792:	lea    rcx,[rip+0x5c9e]        # 409437 <_IO_stdin_used@@Base+0x437>
  403799:	mov    edx,0x55
  40379e:	call   403090 <__assert_fail@plt>
  4037a3:	lea    rdi,[rip+0x7278]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4037aa:	lea    rsi,[rip+0x58e0]        # 409091 <_IO_stdin_used@@Base+0x91>
  4037b1:	lea    rcx,[rip+0x5c7f]        # 409437 <_IO_stdin_used@@Base+0x437>
  4037b8:	mov    edx,0x5b
  4037bd:	call   403090 <__assert_fail@plt>
  4037c2:	lea    rdi,[rip+0x5c4d]        # 409416 <_IO_stdin_used@@Base+0x416>
  4037c9:	lea    rsi,[rip+0x5b7c]        # 40934c <_IO_stdin_used@@Base+0x34c>
  4037d0:	lea    rcx,[rip+0x5bee]        # 4093c5 <_IO_stdin_used@@Base+0x3c5>
  4037d7:	mov    edx,0x2bb
  4037dc:	call   403090 <__assert_fail@plt>
  4037e1:	lea    rdi,[rip+0x723a]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4037e8:	lea    rsi,[rip+0x58a2]        # 409091 <_IO_stdin_used@@Base+0x91>
  4037ef:	lea    rcx,[rip+0x5c41]        # 409437 <_IO_stdin_used@@Base+0x437>
  4037f6:	mov    edx,0x4e
  4037fb:	call   403090 <__assert_fail@plt>
  403800:	lea    rdi,[rip+0x721b]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  403807:	lea    rsi,[rip+0x5883]        # 409091 <_IO_stdin_used@@Base+0x91>
  40380e:	lea    rcx,[rip+0x5c22]        # 409437 <_IO_stdin_used@@Base+0x437>
  403815:	mov    edx,0x4a
  40381a:	call   403090 <__assert_fail@plt>
  40381f:	lea    rdi,[rip+0x5862]        # 409088 <_IO_stdin_used@@Base+0x88>
  403826:	lea    rsi,[rip+0x5864]        # 409091 <_IO_stdin_used@@Base+0x91>
  40382d:	lea    rcx,[rip+0x58c2]        # 4090f6 <_IO_stdin_used@@Base+0xf6>
  403834:	mov    edx,0x8f
  403839:	call   403090 <__assert_fail@plt>
  40383e:	lea    rdi,[rip+0x5ae1]        # 409326 <_IO_stdin_used@@Base+0x326>
  403845:	jmp    4037c9 <main@@Base+0x599>
  403847:	lea    rdi,[rip+0x583a]        # 409088 <_IO_stdin_used@@Base+0x88>
  40384e:	lea    rsi,[rip+0x583c]        # 409091 <_IO_stdin_used@@Base+0x91>
  403855:	lea    rcx,[rip+0x589a]        # 4090f6 <_IO_stdin_used@@Base+0xf6>
  40385c:	mov    edx,0x8b
  403861:	call   403090 <__assert_fail@plt>
  403866:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403870:	push   rbp
  403871:	push   r15
  403873:	push   r14
  403875:	push   r13
  403877:	push   r12
  403879:	push   rbx
  40387a:	push   rax
  40387b:	mov    rbx,rdi
  40387e:	call   403e80 <flatcc_builder_reset@@Base>
  403883:	lea    rsi,[rip+0x58db]        # 409165 <_IO_stdin_used@@Base+0x165>
  40388a:	mov    rdi,rbx
  40388d:	xor    edx,edx
  40388f:	xor    ecx,ecx
  403891:	call   404a10 <flatcc_builder_start_buffer@@Base>
  403896:	test   eax,eax
  403898:	jne    4038a7 <main@@Base+0x677>
  40389a:	mov    rdi,rbx
  40389d:	mov    esi,0x24
  4038a2:	call   405cb0 <flatcc_builder_start_table@@Base>
  4038a7:	lea    rsi,[rip+0x57cd]        # 40907b <_IO_stdin_used@@Base+0x7b>
  4038ae:	mov    rdi,rbx
  4038b1:	call   407f00 <flatcc_builder_create_string_str@@Base>
  4038b6:	test   eax,eax
  4038b8:	je     4038d0 <main@@Base+0x6a0>
  4038ba:	mov    ebp,eax
  4038bc:	mov    rdi,rbx
  4038bf:	mov    esi,0x3
  4038c4:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  4038c9:	test   rax,rax
  4038cc:	je     4038d0 <main@@Base+0x6a0>
  4038ce:	mov    DWORD PTR [rax],ebp
  4038d0:	mov    rdi,rbx
  4038d3:	call   4058c0 <flatcc_builder_start_offset_vector@@Base>
  4038d8:	xor    r13d,r13d
  4038db:	lea    r14,[rip+0x58cf]        # 4091b1 <_IO_stdin_used@@Base+0x1b1>
  4038e2:	lea    r15,[rip+0xa7d7]        # 40e0c0 <__bss_start@@Base+0x10>
  4038e9:	lea    r12,[rip+0x5cba]        # 4095aa <_IO_stdin_used@@Base+0x5aa>
  4038f0:	mov    rdi,rbx
  4038f3:	mov    esi,0x24
  4038f8:	call   405cb0 <flatcc_builder_start_table@@Base>
  4038fd:	mov    rdi,rbx
  403900:	call   405b40 <flatcc_builder_start_string@@Base>
  403905:	mov    ebp,0x64
  40390a:	nop    WORD PTR [rax+rax*1+0x0]
  403910:	mov    edx,0x7
  403915:	mov    rdi,rbx
  403918:	mov    rsi,r14
  40391b:	call   405550 <flatcc_builder_append_string@@Base>
  403920:	dec    rbp
  403923:	jne    403910 <main@@Base+0x6e0>
  403925:	mov    rdi,rbx
  403928:	call   407f70 <flatcc_builder_end_string@@Base>
  40392d:	test   eax,eax
  40392f:	je     403947 <main@@Base+0x717>
  403931:	mov    ebp,eax
  403933:	mov    rdi,rbx
  403936:	mov    esi,0x3
  40393b:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  403940:	test   rax,rax
  403943:	je     403947 <main@@Base+0x717>
  403945:	mov    DWORD PTR [rax],ebp
  403947:	mov    esi,0x1
  40394c:	mov    ecx,0xffffffff
  403951:	mov    rdi,rbx
  403954:	mov    edx,0x1
  403959:	call   405840 <flatcc_builder_start_vector@@Base>
  40395e:	mov    ebp,0x64
  403963:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40396d:	nop    DWORD PTR [rax]
  403970:	mov    edx,0x3e8
  403975:	mov    rdi,rbx
  403978:	mov    rsi,r15
  40397b:	call   4050c0 <flatcc_builder_append_vector@@Base>
  403980:	dec    rbp
  403983:	jne    403970 <main@@Base+0x740>
  403985:	mov    rdi,rbx
  403988:	call   4069d0 <flatcc_builder_end_vector@@Base>
  40398d:	test   eax,eax
  40398f:	je     4039a7 <main@@Base+0x777>
  403991:	mov    ebp,eax
  403993:	mov    rdi,rbx
  403996:	mov    esi,0x5
  40399b:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  4039a0:	test   rax,rax
  4039a3:	je     4039a7 <main@@Base+0x777>
  4039a5:	mov    DWORD PTR [rax],ebp
  4039a7:	mov    rdi,rbx
  4039aa:	mov    rsi,r12
  4039ad:	mov    edx,0x1
  4039b2:	call   406650 <flatcc_builder_check_required@@Base>
  4039b7:	test   eax,eax
  4039b9:	je     403a47 <main@@Base+0x817>
  4039bf:	mov    rdi,rbx
  4039c2:	call   4066c0 <flatcc_builder_end_table@@Base>
  4039c7:	test   eax,eax
  4039c9:	je     403a66 <main@@Base+0x836>
  4039cf:	mov    rdi,rbx
  4039d2:	mov    esi,eax
  4039d4:	call   405290 <flatcc_builder_offset_vector_push@@Base>
  4039d9:	inc    r13
  4039dc:	cmp    r13,0x3e8
  4039e3:	jne    4038f0 <main@@Base+0x6c0>
  4039e9:	mov    rdi,rbx
  4039ec:	call   405a80 <flatcc_builder_end_offset_vector@@Base>
  4039f1:	test   eax,eax
  4039f3:	je     403a85 <main@@Base+0x855>
  4039f9:	mov    ebp,eax
  4039fb:	mov    rdi,rbx
  4039fe:	mov    esi,0xb
  403a03:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  403a08:	test   rax,rax
  403a0b:	je     403a0f <main@@Base+0x7df>
  403a0d:	mov    DWORD PTR [rax],ebp
  403a0f:	lea    rsi,[rip+0x5b94]        # 4095aa <_IO_stdin_used@@Base+0x5aa>
  403a16:	mov    rdi,rbx
  403a19:	mov    edx,0x1
  403a1e:	call   406650 <flatcc_builder_check_required@@Base>
  403a23:	test   eax,eax
  403a25:	je     403a47 <main@@Base+0x817>
  403a27:	mov    rdi,rbx
  403a2a:	call   4066c0 <flatcc_builder_end_table@@Base>
  403a2f:	mov    rdi,rbx
  403a32:	mov    esi,eax
  403a34:	add    rsp,0x8
  403a38:	pop    rbx
  403a39:	pop    r12
  403a3b:	pop    r13
  403a3d:	pop    r14
  403a3f:	pop    r15
  403a41:	pop    rbp
  403a42:	jmp    404c30 <flatcc_builder_end_buffer@@Base>
  403a47:	lea    rdi,[rip+0x576b]        # 4091b9 <_IO_stdin_used@@Base+0x1b9>
  403a4e:	lea    rsi,[rip+0x5806]        # 40925b <_IO_stdin_used@@Base+0x25b>
  403a55:	lea    rcx,[rip+0x5879]        # 4092d5 <_IO_stdin_used@@Base+0x2d5>
  403a5c:	mov    edx,0xeb
  403a61:	call   403090 <__assert_fail@plt>
  403a66:	lea    rdi,[rip+0x56fd]        # 40916a <_IO_stdin_used@@Base+0x16a>
  403a6d:	lea    rsi,[rip+0x561d]        # 409091 <_IO_stdin_used@@Base+0x91>
  403a74:	lea    rcx,[rip+0x56f1]        # 40916c <_IO_stdin_used@@Base+0x16c>
  403a7b:	mov    edx,0x2a
  403a80:	call   403090 <__assert_fail@plt>
  403a85:	lea    rdi,[rip+0x56aa]        # 409136 <_IO_stdin_used@@Base+0x136>
  403a8c:	lea    rsi,[rip+0x55fe]        # 409091 <_IO_stdin_used@@Base+0x91>
  403a93:	lea    rcx,[rip+0x569f]        # 409139 <_IO_stdin_used@@Base+0x139>
  403a9a:	mov    edx,0x38
  403a9f:	call   403090 <__assert_fail@plt>
  403aa4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403aae:	xchg   ax,ax

0000000000403ab0 <flatcc_builder_default_alloc@@Base>:
  403ab0:	push   rbp
  403ab1:	push   r15
  403ab3:	push   r14
  403ab5:	push   r12
  403ab7:	push   rbx
  403ab8:	mov    rbx,rsi
  403abb:	test   rdx,rdx
  403abe:	je     403ae8 <flatcc_builder_default_alloc@@Base+0x38>
  403ac0:	mov    r14d,ecx
  403ac3:	dec    r8d
  403ac6:	cmp    r8d,0x6
  403aca:	ja     403b06 <flatcc_builder_default_alloc@@Base+0x56>
  403acc:	mov    eax,0x100
  403ad1:	lea    rcx,[rip+0x5ad8]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  403ad8:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403adc:	add    rsi,rcx
  403adf:	jmp    rsi
  403ae1:	mov    eax,0x120
  403ae6:	jmp    403b20 <flatcc_builder_default_alloc@@Base+0x70>
  403ae8:	mov    rdi,QWORD PTR [rbx]
  403aeb:	xor    r15d,r15d
  403aee:	test   rdi,rdi
  403af1:	je     403b7f <flatcc_builder_default_alloc@@Base+0xcf>
  403af7:	call   403030 <free@plt>
  403afc:	vxorps xmm0,xmm0,xmm0
  403b00:	vmovups XMMWORD PTR [rbx],xmm0
  403b04:	jmp    403b7f <flatcc_builder_default_alloc@@Base+0xcf>
  403b06:	mov    eax,0x20
  403b0b:	jmp    403b20 <flatcc_builder_default_alloc@@Base+0x70>
  403b0d:	mov    rax,rdx
  403b10:	jmp    403b20 <flatcc_builder_default_alloc@@Base+0x70>
  403b12:	mov    eax,0x40
  403b17:	nop    WORD PTR [rax+rax*1+0x0]
  403b20:	mov    rbp,rax
  403b23:	add    rax,rax
  403b26:	cmp    rbp,rdx
  403b29:	jb     403b20 <flatcc_builder_default_alloc@@Base+0x70>
  403b2b:	mov    rax,QWORD PTR [rbx+0x8]
  403b2f:	xor    r15d,r15d
  403b32:	cmp    rax,rdx
  403b35:	jb     403b3f <flatcc_builder_default_alloc@@Base+0x8f>
  403b37:	shr    rax,1
  403b3a:	cmp    rax,rbp
  403b3d:	jae    403b7f <flatcc_builder_default_alloc@@Base+0xcf>
  403b3f:	mov    rdi,QWORD PTR [rbx]
  403b42:	mov    rsi,rbp
  403b45:	call   403110 <realloc@plt>
  403b4a:	test   rax,rax
  403b4d:	je     403b79 <flatcc_builder_default_alloc@@Base+0xc9>
  403b4f:	mov    r12,rax
  403b52:	test   r14d,r14d
  403b55:	je     403b70 <flatcc_builder_default_alloc@@Base+0xc0>
  403b57:	mov    rax,QWORD PTR [rbx+0x8]
  403b5b:	mov    rdx,rbp
  403b5e:	sub    rdx,rax
  403b61:	jbe    403b70 <flatcc_builder_default_alloc@@Base+0xc0>
  403b63:	mov    rdi,r12
  403b66:	add    rdi,rax
  403b69:	xor    esi,esi
  403b6b:	call   4030a0 <memset@plt>
  403b70:	mov    QWORD PTR [rbx],r12
  403b73:	mov    QWORD PTR [rbx+0x8],rbp
  403b77:	jmp    403b7f <flatcc_builder_default_alloc@@Base+0xcf>
  403b79:	mov    r15d,0xffffffff
  403b7f:	mov    eax,r15d
  403b82:	pop    rbx
  403b83:	pop    r12
  403b85:	pop    r14
  403b87:	pop    r15
  403b89:	pop    rbp
  403b8a:	ret    
  403b8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403b90 <flatcc_builder_flush_vtable_cache@@Base>:
  403b90:	push   rbx
  403b91:	cmp    QWORD PTR [rdi+0xd8],0x0
  403b99:	je     403bc4 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  403b9b:	mov    rbx,rdi
  403b9e:	mov    rdi,QWORD PTR [rdi+0xa8]
  403ba5:	mov    rdx,QWORD PTR [rbx+0xb0]
  403bac:	xor    esi,esi
  403bae:	call   4030a0 <memset@plt>
  403bb3:	movabs rax,0x1000000000
  403bbd:	mov    QWORD PTR [rbx+0xe0],rax
  403bc4:	pop    rbx
  403bc5:	ret    
  403bc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403bd0 <flatcc_builder_custom_init@@Base>:
  403bd0:	vxorps xmm0,xmm0,xmm0
  403bd4:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403bdc:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403be4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403bec:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403bf4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403bfc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403c04:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403c0c:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403c14:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403c19:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403c1e:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403c23:	vmovups YMMWORD PTR [rdi],ymm0
  403c27:	mov    QWORD PTR [rdi+0x180],0x0
  403c32:	test   rsi,rsi
  403c35:	je     403c59 <flatcc_builder_custom_init@@Base+0x89>
  403c37:	test   rcx,rcx
  403c3a:	jne    403c43 <flatcc_builder_custom_init@@Base+0x73>
  403c3c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403ab0 <flatcc_builder_default_alloc@@Base>
  403c43:	mov    QWORD PTR [rdi+0x40],r8
  403c47:	mov    QWORD PTR [rdi+0x50],rcx
  403c4b:	mov    QWORD PTR [rdi+0x38],rdx
  403c4f:	mov    QWORD PTR [rdi+0x48],rsi
  403c53:	xor    eax,eax
  403c55:	vzeroupper 
  403c58:	ret    
  403c59:	mov    DWORD PTR [rdi+0x128],0x1
  403c63:	lea    rdx,[rdi+0x130]
  403c6a:	lea    rsi,[rip+0x4a6f]        # 4086e0 <flatcc_emitter@@Base>
  403c71:	test   rcx,rcx
  403c74:	je     403c3c <flatcc_builder_custom_init@@Base+0x6c>
  403c76:	jmp    403c43 <flatcc_builder_custom_init@@Base+0x73>
  403c78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403c80 <flatcc_builder_init@@Base>:
  403c80:	vxorps xmm0,xmm0,xmm0
  403c84:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403c8c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403c91:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403c96:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403c9e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403ca6:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403cae:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403cb6:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403cbe:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403cc6:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403cce:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403cd3:	vmovups YMMWORD PTR [rdi],ymm0
  403cd7:	mov    QWORD PTR [rdi+0x180],0x0
  403ce2:	mov    DWORD PTR [rdi+0x128],0x1
  403cec:	lea    rax,[rdi+0x130]
  403cf3:	mov    QWORD PTR [rdi+0x40],0x0
  403cfb:	lea    rcx,[rip+0xfffffffffffffdae]        # 403ab0 <flatcc_builder_default_alloc@@Base>
  403d02:	mov    QWORD PTR [rdi+0x50],rcx
  403d06:	mov    QWORD PTR [rdi+0x38],rax
  403d0a:	lea    rax,[rip+0x49cf]        # 4086e0 <flatcc_emitter@@Base>
  403d11:	mov    QWORD PTR [rdi+0x48],rax
  403d15:	xor    eax,eax
  403d17:	vzeroupper 
  403d1a:	ret    
  403d1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403d20 <flatcc_builder_custom_reset@@Base>:
  403d20:	push   rbp
  403d21:	push   r15
  403d23:	push   r14
  403d25:	push   r12
  403d27:	push   rbx
  403d28:	mov    r15d,edx
  403d2b:	mov    r14d,esi
  403d2e:	mov    r12,rdi
  403d31:	lea    rbp,[rdi+0x58]
  403d35:	xor    ebx,ebx
  403d37:	jmp    403d58 <flatcc_builder_custom_reset@@Base+0x38>
  403d39:	nop    DWORD PTR [rax+0x0]
  403d40:	cmp    QWORD PTR [rbp+0x8],0x0
  403d45:	jne    403e56 <flatcc_builder_custom_reset@@Base+0x136>
  403d4b:	inc    rbx
  403d4e:	add    rbp,0x10
  403d52:	cmp    rbx,0x8
  403d56:	je     403d9f <flatcc_builder_custom_reset@@Base+0x7f>
  403d58:	mov    rdi,QWORD PTR [rbp+0x0]
  403d5c:	test   rdi,rdi
  403d5f:	je     403d40 <flatcc_builder_custom_reset@@Base+0x20>
  403d61:	test   r15d,r15d
  403d64:	je     403d92 <flatcc_builder_custom_reset@@Base+0x72>
  403d66:	cmp    rbx,0x5
  403d6a:	je     403d92 <flatcc_builder_custom_reset@@Base+0x72>
  403d6c:	mov    rdi,QWORD PTR [r12+0x40]
  403d71:	mov    edx,0x1
  403d76:	mov    rsi,rbp
  403d79:	mov    ecx,0x1
  403d7e:	mov    r8d,ebx
  403d81:	call   QWORD PTR [r12+0x50]
  403d86:	test   eax,eax
  403d88:	jne    403e46 <flatcc_builder_custom_reset@@Base+0x126>
  403d8e:	mov    rdi,QWORD PTR [rbp+0x0]
  403d92:	mov    rdx,QWORD PTR [rbp+0x8]
  403d96:	xor    esi,esi
  403d98:	call   4030a0 <memset@plt>
  403d9d:	jmp    403d4b <flatcc_builder_custom_reset@@Base+0x2b>
  403d9f:	mov    DWORD PTR [r12+0xe0],0x0
  403dab:	cmp    DWORD PTR [r12+0xe4],0x0
  403db4:	je     403dc2 <flatcc_builder_custom_reset@@Base+0xa2>
  403db6:	mov    DWORD PTR [r12+0xe4],0x10
  403dc2:	mov    WORD PTR [r12+0xe8],0x0
  403dcd:	mov    QWORD PTR [r12+0xf0],0x0
  403dd9:	mov    QWORD PTR [r12+0x20],0x0
  403de2:	vxorps xmm0,xmm0,xmm0
  403de6:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403df0:	mov    rax,QWORD PTR [r12+0x58]
  403df5:	mov    rcx,QWORD PTR [r12+0x68]
  403dfa:	mov    QWORD PTR [r12+0x18],rcx
  403dff:	mov    rcx,QWORD PTR [r12+0x88]
  403e07:	mov    QWORD PTR [r12],rcx
  403e0b:	mov    QWORD PTR [r12+0x8],rax
  403e10:	mov    QWORD PTR [r12+0x30],0x0
  403e19:	test   r14d,r14d
  403e1c:	je     403e28 <flatcc_builder_custom_reset@@Base+0x108>
  403e1e:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403e28:	xor    ebx,ebx
  403e2a:	cmp    DWORD PTR [r12+0x128],0x0
  403e33:	je     403e4b <flatcc_builder_custom_reset@@Base+0x12b>
  403e35:	add    r12,0x130
  403e3c:	mov    rdi,r12
  403e3f:	call   408560 <flatcc_emitter_reset@@Base>
  403e44:	jmp    403e4b <flatcc_builder_custom_reset@@Base+0x12b>
  403e46:	mov    ebx,0xffffffff
  403e4b:	mov    eax,ebx
  403e4d:	pop    rbx
  403e4e:	pop    r12
  403e50:	pop    r14
  403e52:	pop    r15
  403e54:	pop    rbp
  403e55:	ret    
  403e56:	lea    rdi,[rip+0x59f3]        # 409850 <flatcc_builder_padding_base@@Base+0x280>
  403e5d:	lea    rsi,[rip+0x59fe]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  403e64:	lea    rcx,[rip+0x5a57]        # 4098c2 <flatcc_builder_padding_base@@Base+0x2f2>
  403e6b:	mov    edx,0x1b2
  403e70:	call   403090 <__assert_fail@plt>
  403e75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403e7f:	nop

0000000000403e80 <flatcc_builder_reset@@Base>:
  403e80:	push   rbx
  403e81:	mov    rbx,rdi
  403e84:	mov    rdi,QWORD PTR [rdi+0x58]
  403e88:	mov    rdx,QWORD PTR [rbx+0x60]
  403e8c:	test   rdi,rdi
  403e8f:	je     403e9a <flatcc_builder_reset@@Base+0x1a>
  403e91:	xor    esi,esi
  403e93:	call   4030a0 <memset@plt>
  403e98:	jmp    403ea3 <flatcc_builder_reset@@Base+0x23>
  403e9a:	test   rdx,rdx
  403e9d:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403ea3:	mov    rdi,QWORD PTR [rbx+0x68]
  403ea7:	mov    rdx,QWORD PTR [rbx+0x70]
  403eab:	test   rdi,rdi
  403eae:	je     403eb9 <flatcc_builder_reset@@Base+0x39>
  403eb0:	xor    esi,esi
  403eb2:	call   4030a0 <memset@plt>
  403eb7:	jmp    403ec2 <flatcc_builder_reset@@Base+0x42>
  403eb9:	test   rdx,rdx
  403ebc:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403ec2:	mov    rdi,QWORD PTR [rbx+0x78]
  403ec6:	mov    rdx,QWORD PTR [rbx+0x80]
  403ecd:	test   rdi,rdi
  403ed0:	je     403edb <flatcc_builder_reset@@Base+0x5b>
  403ed2:	xor    esi,esi
  403ed4:	call   4030a0 <memset@plt>
  403ed9:	jmp    403ee4 <flatcc_builder_reset@@Base+0x64>
  403edb:	test   rdx,rdx
  403ede:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403ee4:	mov    rdi,QWORD PTR [rbx+0x88]
  403eeb:	mov    rdx,QWORD PTR [rbx+0x90]
  403ef2:	test   rdi,rdi
  403ef5:	je     403f00 <flatcc_builder_reset@@Base+0x80>
  403ef7:	xor    esi,esi
  403ef9:	call   4030a0 <memset@plt>
  403efe:	jmp    403f09 <flatcc_builder_reset@@Base+0x89>
  403f00:	test   rdx,rdx
  403f03:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403f09:	mov    rdi,QWORD PTR [rbx+0x98]
  403f10:	mov    rdx,QWORD PTR [rbx+0xa0]
  403f17:	test   rdi,rdi
  403f1a:	je     403f25 <flatcc_builder_reset@@Base+0xa5>
  403f1c:	xor    esi,esi
  403f1e:	call   4030a0 <memset@plt>
  403f23:	jmp    403f2e <flatcc_builder_reset@@Base+0xae>
  403f25:	test   rdx,rdx
  403f28:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403f2e:	mov    rdi,QWORD PTR [rbx+0xa8]
  403f35:	mov    rdx,QWORD PTR [rbx+0xb0]
  403f3c:	test   rdi,rdi
  403f3f:	je     403f4a <flatcc_builder_reset@@Base+0xca>
  403f41:	xor    esi,esi
  403f43:	call   4030a0 <memset@plt>
  403f48:	jmp    403f53 <flatcc_builder_reset@@Base+0xd3>
  403f4a:	test   rdx,rdx
  403f4d:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403f53:	mov    rdi,QWORD PTR [rbx+0xb8]
  403f5a:	mov    rdx,QWORD PTR [rbx+0xc0]
  403f61:	test   rdi,rdi
  403f64:	je     403f6f <flatcc_builder_reset@@Base+0xef>
  403f66:	xor    esi,esi
  403f68:	call   4030a0 <memset@plt>
  403f6d:	jmp    403f78 <flatcc_builder_reset@@Base+0xf8>
  403f6f:	test   rdx,rdx
  403f72:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403f78:	mov    rdi,QWORD PTR [rbx+0xc8]
  403f7f:	mov    rdx,QWORD PTR [rbx+0xd0]
  403f86:	test   rdi,rdi
  403f89:	je     403f94 <flatcc_builder_reset@@Base+0x114>
  403f8b:	xor    esi,esi
  403f8d:	call   4030a0 <memset@plt>
  403f92:	jmp    403f9d <flatcc_builder_reset@@Base+0x11d>
  403f94:	test   rdx,rdx
  403f97:	jne    404020 <flatcc_builder_reset@@Base+0x1a0>
  403f9d:	mov    DWORD PTR [rbx+0xe0],0x0
  403fa7:	cmp    DWORD PTR [rbx+0xe4],0x0
  403fae:	je     403fba <flatcc_builder_reset@@Base+0x13a>
  403fb0:	mov    DWORD PTR [rbx+0xe4],0x10
  403fba:	mov    WORD PTR [rbx+0xe8],0x0
  403fc3:	mov    QWORD PTR [rbx+0xf0],0x0
  403fce:	mov    QWORD PTR [rbx+0x20],0x0
  403fd6:	vxorps xmm0,xmm0,xmm0
  403fda:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  403fe2:	mov    rax,QWORD PTR [rbx+0x58]
  403fe6:	mov    rcx,QWORD PTR [rbx+0x68]
  403fea:	mov    QWORD PTR [rbx+0x18],rcx
  403fee:	mov    rcx,QWORD PTR [rbx+0x88]
  403ff5:	mov    QWORD PTR [rbx],rcx
  403ff8:	mov    QWORD PTR [rbx+0x8],rax
  403ffc:	mov    QWORD PTR [rbx+0x30],0x0
  404004:	cmp    DWORD PTR [rbx+0x128],0x0
  40400b:	je     40401c <flatcc_builder_reset@@Base+0x19c>
  40400d:	add    rbx,0x130
  404014:	mov    rdi,rbx
  404017:	call   408560 <flatcc_emitter_reset@@Base>
  40401c:	xor    eax,eax
  40401e:	pop    rbx
  40401f:	ret    
  404020:	lea    rdi,[rip+0x5829]        # 409850 <flatcc_builder_padding_base@@Base+0x280>
  404027:	lea    rsi,[rip+0x5834]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40402e:	lea    rcx,[rip+0x588d]        # 4098c2 <flatcc_builder_padding_base@@Base+0x2f2>
  404035:	mov    edx,0x1b2
  40403a:	call   403090 <__assert_fail@plt>
  40403f:	nop

0000000000404040 <flatcc_builder_clear@@Base>:
  404040:	push   rbx
  404041:	mov    rbx,rdi
  404044:	lea    rsi,[rdi+0x58]
  404048:	mov    rdi,QWORD PTR [rdi+0x40]
  40404c:	xor    edx,edx
  40404e:	xor    ecx,ecx
  404050:	xor    r8d,r8d
  404053:	call   QWORD PTR [rbx+0x50]
  404056:	lea    rsi,[rbx+0x68]
  40405a:	mov    rdi,QWORD PTR [rbx+0x40]
  40405e:	xor    edx,edx
  404060:	xor    ecx,ecx
  404062:	mov    r8d,0x1
  404068:	call   QWORD PTR [rbx+0x50]
  40406b:	lea    rsi,[rbx+0x78]
  40406f:	mov    rdi,QWORD PTR [rbx+0x40]
  404073:	xor    edx,edx
  404075:	xor    ecx,ecx
  404077:	mov    r8d,0x2
  40407d:	call   QWORD PTR [rbx+0x50]
  404080:	lea    rsi,[rbx+0x88]
  404087:	mov    rdi,QWORD PTR [rbx+0x40]
  40408b:	xor    edx,edx
  40408d:	xor    ecx,ecx
  40408f:	mov    r8d,0x3
  404095:	call   QWORD PTR [rbx+0x50]
  404098:	lea    rsi,[rbx+0x98]
  40409f:	mov    rdi,QWORD PTR [rbx+0x40]
  4040a3:	xor    edx,edx
  4040a5:	xor    ecx,ecx
  4040a7:	mov    r8d,0x4
  4040ad:	call   QWORD PTR [rbx+0x50]
  4040b0:	lea    rsi,[rbx+0xa8]
  4040b7:	mov    rdi,QWORD PTR [rbx+0x40]
  4040bb:	xor    edx,edx
  4040bd:	xor    ecx,ecx
  4040bf:	mov    r8d,0x5
  4040c5:	call   QWORD PTR [rbx+0x50]
  4040c8:	lea    rsi,[rbx+0xb8]
  4040cf:	mov    rdi,QWORD PTR [rbx+0x40]
  4040d3:	xor    edx,edx
  4040d5:	xor    ecx,ecx
  4040d7:	mov    r8d,0x6
  4040dd:	call   QWORD PTR [rbx+0x50]
  4040e0:	lea    rsi,[rbx+0xc8]
  4040e7:	mov    rdi,QWORD PTR [rbx+0x40]
  4040eb:	xor    edx,edx
  4040ed:	xor    ecx,ecx
  4040ef:	mov    r8d,0x7
  4040f5:	call   QWORD PTR [rbx+0x50]
  4040f8:	cmp    DWORD PTR [rbx+0x128],0x0
  4040ff:	je     40410d <flatcc_builder_clear@@Base+0xcd>
  404101:	lea    rdi,[rbx+0x130]
  404108:	call   408660 <flatcc_emitter_clear@@Base>
  40410d:	vxorps xmm0,xmm0,xmm0
  404111:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  404119:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  404121:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  404129:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404131:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404139:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404141:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404149:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404151:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404156:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40415b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404160:	vmovups YMMWORD PTR [rbx],ymm0
  404164:	mov    QWORD PTR [rbx+0x180],0x0
  40416f:	pop    rbx
  404170:	vzeroupper 
  404173:	ret    
  404174:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40417e:	xchg   ax,ax

0000000000404180 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404180:	push   r15
  404182:	push   r14
  404184:	push   r12
  404186:	push   rbx
  404187:	push   rax
  404188:	mov    r14,rsi
  40418b:	mov    r15,rdi
  40418e:	add    r14,0xf
  404192:	and    r14,0xfffffffffffffff8
  404196:	mov    rbx,QWORD PTR [rdi+0x180]
  40419d:	lea    r12,[rdi+0xc8]
  4041a4:	lea    rdx,[rbx+r14*1]
  4041a8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4041af:	jbe    4041c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  4041b1:	mov    rdi,QWORD PTR [r15+0x40]
  4041b5:	mov    rsi,r12
  4041b8:	xor    ecx,ecx
  4041ba:	mov    r8d,0x7
  4041c0:	call   QWORD PTR [r15+0x50]
  4041c4:	test   eax,eax
  4041c6:	jne    404218 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  4041c8:	add    rbx,QWORD PTR [r12]
  4041cc:	je     404207 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  4041ce:	mov    rdi,rbx
  4041d1:	xor    esi,esi
  4041d3:	mov    rdx,r14
  4041d6:	call   4030a0 <memset@plt>
  4041db:	mov    rax,QWORD PTR [r15+0x178]
  4041e2:	mov    QWORD PTR [rbx],rax
  4041e5:	add    rbx,0x8
  4041e9:	mov    rax,QWORD PTR [r15+0x180]
  4041f0:	lea    rcx,[rax+0x8]
  4041f4:	mov    QWORD PTR [r15+0x178],rcx
  4041fb:	add    rax,r14
  4041fe:	mov    QWORD PTR [r15+0x180],rax
  404205:	jmp    404209 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  404207:	xor    ebx,ebx
  404209:	mov    rax,rbx
  40420c:	add    rsp,0x8
  404210:	pop    rbx
  404211:	pop    r12
  404213:	pop    r14
  404215:	pop    r15
  404217:	ret    
  404218:	lea    rdi,[rip+0x6803]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40421f:	lea    rsi,[rip+0x563c]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404226:	lea    rcx,[rip+0x662f]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  40422d:	mov    edx,0x134
  404232:	call   403090 <__assert_fail@plt>
  404237:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404240 <flatcc_builder_enter_user_frame@@Base>:
  404240:	push   r15
  404242:	push   r14
  404244:	push   r12
  404246:	push   rbx
  404247:	push   rax
  404248:	mov    r14,rsi
  40424b:	mov    rbx,rdi
  40424e:	add    r14,0xf
  404252:	and    r14,0xfffffffffffffff8
  404256:	mov    r15,QWORD PTR [rdi+0x180]
  40425d:	lea    r12,[rdi+0xc8]
  404264:	lea    rdx,[r15+r14*1]
  404268:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40426f:	jbe    404287 <flatcc_builder_enter_user_frame@@Base+0x47>
  404271:	mov    rdi,QWORD PTR [rbx+0x40]
  404275:	mov    rsi,r12
  404278:	xor    ecx,ecx
  40427a:	mov    r8d,0x7
  404280:	call   QWORD PTR [rbx+0x50]
  404283:	test   eax,eax
  404285:	jne    4042d0 <flatcc_builder_enter_user_frame@@Base+0x90>
  404287:	add    r15,QWORD PTR [r12]
  40428b:	je     4042c2 <flatcc_builder_enter_user_frame@@Base+0x82>
  40428d:	mov    rdi,r15
  404290:	xor    esi,esi
  404292:	mov    rdx,r14
  404295:	call   4030a0 <memset@plt>
  40429a:	mov    rax,QWORD PTR [rbx+0x178]
  4042a1:	mov    QWORD PTR [r15],rax
  4042a4:	mov    rcx,QWORD PTR [rbx+0x180]
  4042ab:	lea    rax,[rcx+0x8]
  4042af:	mov    QWORD PTR [rbx+0x178],rax
  4042b6:	add    rcx,r14
  4042b9:	mov    QWORD PTR [rbx+0x180],rcx
  4042c0:	jmp    4042c4 <flatcc_builder_enter_user_frame@@Base+0x84>
  4042c2:	xor    eax,eax
  4042c4:	add    rsp,0x8
  4042c8:	pop    rbx
  4042c9:	pop    r12
  4042cb:	pop    r14
  4042cd:	pop    r15
  4042cf:	ret    
  4042d0:	lea    rdi,[rip+0x674b]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4042d7:	lea    rsi,[rip+0x5584]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4042de:	lea    rcx,[rip+0x6577]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  4042e5:	mov    edx,0x134
  4042ea:	call   403090 <__assert_fail@plt>
  4042ef:	nop

00000000004042f0 <flatcc_builder_exit_user_frame@@Base>:
  4042f0:	push   rax
  4042f1:	mov    rax,QWORD PTR [rdi+0x178]
  4042f8:	test   rax,rax
  4042fb:	je     40431f <flatcc_builder_exit_user_frame@@Base+0x2f>
  4042fd:	mov    rcx,QWORD PTR [rdi+0xc8]
  404304:	mov    edx,eax
  404306:	add    rax,0xfffffffffffffff8
  40430a:	mov    QWORD PTR [rdi+0x180],rax
  404311:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  404316:	mov    QWORD PTR [rdi+0x178],rax
  40431d:	pop    rcx
  40431e:	ret    
  40431f:	lea    rdi,[rip+0x55da]        # 409900 <flatcc_builder_padding_base@@Base+0x330>
  404326:	lea    rsi,[rip+0x5535]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40432d:	lea    rcx,[rip+0x55e5]        # 409919 <flatcc_builder_padding_base@@Base+0x349>
  404334:	mov    edx,0x21e
  404339:	call   403090 <__assert_fail@plt>
  40433e:	xchg   ax,ax

0000000000404340 <flatcc_builder_exit_user_frame_at@@Base>:
  404340:	push   rax
  404341:	cmp    QWORD PTR [rdi+0x178],rsi
  404348:	jb     404378 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40434a:	mov    QWORD PTR [rdi+0x178],rsi
  404351:	test   rsi,rsi
  404354:	je     404397 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404356:	mov    rax,QWORD PTR [rdi+0xc8]
  40435d:	mov    ecx,esi
  40435f:	add    rsi,0xfffffffffffffff8
  404363:	mov    QWORD PTR [rdi+0x180],rsi
  40436a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40436f:	mov    QWORD PTR [rdi+0x178],rax
  404376:	pop    rcx
  404377:	ret    
  404378:	lea    rdi,[rip+0x55d4]        # 409953 <flatcc_builder_padding_base@@Base+0x383>
  40437f:	lea    rsi,[rip+0x54dc]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404386:	lea    rcx,[rip+0x55e5]        # 409972 <flatcc_builder_padding_base@@Base+0x3a2>
  40438d:	mov    edx,0x227
  404392:	call   403090 <__assert_fail@plt>
  404397:	lea    rdi,[rip+0x5562]        # 409900 <flatcc_builder_padding_base@@Base+0x330>
  40439e:	lea    rsi,[rip+0x54bd]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4043a5:	lea    rcx,[rip+0x556d]        # 409919 <flatcc_builder_padding_base@@Base+0x349>
  4043ac:	mov    edx,0x21e
  4043b1:	call   403090 <__assert_fail@plt>
  4043b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004043c0 <flatcc_builder_get_current_user_frame@@Base>:
  4043c0:	mov    rax,QWORD PTR [rdi+0x178]
  4043c7:	ret    
  4043c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004043d0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4043d0:	mov    eax,esi
  4043d2:	add    rax,QWORD PTR [rdi+0xc8]
  4043d9:	ret    
  4043da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004043e0 <flatcc_builder_embed_buffer@@Base>:
  4043e0:	push   rbp
  4043e1:	push   r15
  4043e3:	push   r14
  4043e5:	push   r12
  4043e7:	push   rbx
  4043e8:	sub    rsp,0xa0
  4043ef:	mov    ebx,r9d
  4043f2:	mov    rbp,rcx
  4043f5:	mov    r15,rdx
  4043f8:	mov    edx,esi
  4043fa:	mov    r12,rdi
  4043fd:	mov    WORD PTR [rsp+0xa],r8w
  404403:	xor    ecx,ecx
  404405:	cmp    DWORD PTR [rdi+0x100],0x0
  40440c:	setne  cl
  40440f:	lea    rsi,[rsp+0xa]
  404414:	call   404580 <flatcc_builder_embed_buffer@@Base+0x1a0>
  404419:	and    ebx,0x2
  40441c:	movzx  eax,WORD PTR [rsp+0xa]
  404421:	mov    r14d,DWORD PTR [r12+0xf0]
  404429:	lea    ecx,[rbp+rbx*2+0x0]
  40442d:	mov    edx,r14d
  404430:	sub    edx,ecx
  404432:	dec    eax
  404434:	and    eax,edx
  404436:	lea    ecx,[rax+rbp*1]
  404439:	mov    DWORD PTR [rsp+0xc],ecx
  40443d:	mov    QWORD PTR [rsp+0x10],0x0
  404446:	mov    DWORD PTR [rsp+0x18],0x0
  40444e:	cmp    DWORD PTR [r12+0x100],0x0
  404457:	je     404529 <flatcc_builder_embed_buffer@@Base+0x149>
  40445d:	mov    QWORD PTR [rsp+0x10],0x4
  404466:	lea    rcx,[rsp+0xc]
  40446b:	mov    QWORD PTR [rsp+0x20],rcx
  404470:	mov    QWORD PTR [rsp+0x28],0x4
  404479:	mov    DWORD PTR [rsp+0x18],0x1
  404481:	mov    r8d,0x4
  404487:	mov    edx,0x1
  40448c:	test   rbp,rbp
  40448f:	je     4044af <flatcc_builder_embed_buffer@@Base+0xcf>
  404491:	add    r8,rbp
  404494:	mov    QWORD PTR [rsp+0x10],r8
  404499:	mov    ecx,edx
  40449b:	shl    rcx,0x4
  40449f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  4044a4:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  4044a9:	inc    edx
  4044ab:	mov    DWORD PTR [rsp+0x18],edx
  4044af:	test   eax,eax
  4044b1:	je     4044da <flatcc_builder_embed_buffer@@Base+0xfa>
  4044b3:	mov    eax,eax
  4044b5:	add    r8,rax
  4044b8:	mov    QWORD PTR [rsp+0x10],r8
  4044bd:	mov    ecx,edx
  4044bf:	shl    rcx,0x4
  4044c3:	lea    rsi,[rip+0x5106]        # 4095d0 <flatcc_builder_padding_base@@Base>
  4044ca:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  4044cf:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4044d4:	inc    edx
  4044d6:	mov    DWORD PTR [rsp+0x18],edx
  4044da:	cmp    r8,0x11
  4044de:	setb   al
  4044e1:	lea    rcx,[r8-0x10]
  4044e5:	shr    rcx,0x20
  4044e9:	sete   cl
  4044ec:	test   r8d,r8d
  4044ef:	jle    40453c <flatcc_builder_embed_buffer@@Base+0x15c>
  4044f1:	or     al,cl
  4044f3:	je     40453c <flatcc_builder_embed_buffer@@Base+0x15c>
  4044f5:	sub    r14d,r8d
  4044f8:	mov    rdi,QWORD PTR [r12+0x38]
  4044fd:	lea    rsi,[rsp+0x20]
  404502:	mov    ecx,r14d
  404505:	call   QWORD PTR [r12+0x48]
  40450a:	test   eax,eax
  40450c:	jne    40455b <flatcc_builder_embed_buffer@@Base+0x17b>
  40450e:	mov    DWORD PTR [r12+0xf0],r14d
  404516:	mov    eax,r14d
  404519:	add    rsp,0xa0
  404520:	pop    rbx
  404521:	pop    r12
  404523:	pop    r14
  404525:	pop    r15
  404527:	pop    rbp
  404528:	ret    
  404529:	xor    edx,edx
  40452b:	xor    r8d,r8d
  40452e:	test   rbp,rbp
  404531:	jne    404491 <flatcc_builder_embed_buffer@@Base+0xb1>
  404537:	jmp    4044af <flatcc_builder_embed_buffer@@Base+0xcf>
  40453c:	lea    rdi,[rip+0x64df]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404543:	lea    rsi,[rip+0x5318]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40454a:	lea    rcx,[rip+0x6390]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  404551:	mov    edx,0x287
  404556:	call   403090 <__assert_fail@plt>
  40455b:	lea    rdi,[rip+0x64c0]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404562:	lea    rsi,[rip+0x52f9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404569:	lea    rcx,[rip+0x6371]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  404570:	mov    edx,0x28b
  404575:	call   403090 <__assert_fail@plt>
  40457a:	nop    WORD PTR [rax+rax*1+0x0]
  404580:	push   rbx
  404581:	sub    rsp,0x90
  404588:	mov    rax,rdi
  40458b:	test   dx,dx
  40458e:	jne    4045a1 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404590:	mov    edi,DWORD PTR [rax+0xec]
  404596:	test   di,di
  404599:	mov    edx,0x1
  40459e:	cmovne edx,edi
  4045a1:	movzx  ebx,WORD PTR [rsi]
  4045a4:	mov    edi,0x4
  4045a9:	cmp    bx,0x4
  4045ad:	cmovae edi,ebx
  4045b0:	jb     4045bd <flatcc_builder_embed_buffer@@Base+0x1dd>
  4045b2:	cmp    di,dx
  4045b5:	jb     4045bd <flatcc_builder_embed_buffer@@Base+0x1dd>
  4045b7:	test   ecx,ecx
  4045b9:	jne    404624 <flatcc_builder_embed_buffer@@Base+0x244>
  4045bb:	jmp    4045ca <flatcc_builder_embed_buffer@@Base+0x1ea>
  4045bd:	cmp    di,dx
  4045c0:	cmovb  edi,edx
  4045c3:	mov    WORD PTR [rsi],di
  4045c6:	test   ecx,ecx
  4045c8:	jne    404624 <flatcc_builder_embed_buffer@@Base+0x244>
  4045ca:	mov    ebx,DWORD PTR [rax+0xf4]
  4045d0:	movzx  r8d,dx
  4045d4:	dec    r8d
  4045d7:	and    r8d,ebx
  4045da:	je     404624 <flatcc_builder_embed_buffer@@Base+0x244>
  4045dc:	mov    QWORD PTR [rsp],r8
  4045e0:	lea    rcx,[rip+0x4fe9]        # 4095d0 <flatcc_builder_padding_base@@Base>
  4045e7:	mov    QWORD PTR [rsp+0x10],rcx
  4045ec:	mov    QWORD PTR [rsp+0x18],r8
  4045f1:	mov    DWORD PTR [rsp+0x8],0x1
  4045f9:	lea    ecx,[r8+rbx*1]
  4045fd:	mov    DWORD PTR [rax+0xf4],ecx
  404603:	test   r8d,r8d
  404606:	js     40462d <flatcc_builder_embed_buffer@@Base+0x24d>
  404608:	mov    rdi,QWORD PTR [rax+0x38]
  40460c:	lea    rsi,[rsp+0x10]
  404611:	mov    edx,0x1
  404616:	mov    ecx,ebx
  404618:	call   QWORD PTR [rax+0x48]
  40461b:	test   eax,eax
  40461d:	jne    40464c <flatcc_builder_embed_buffer@@Base+0x26c>
  40461f:	cmp    ebx,0xffffffff
  404622:	je     40466b <flatcc_builder_embed_buffer@@Base+0x28b>
  404624:	add    rsp,0x90
  40462b:	pop    rbx
  40462c:	ret    
  40462d:	lea    rdi,[rip+0x63ee]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404634:	lea    rsi,[rip+0x5227]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40463b:	lea    rcx,[rip+0x635b]        # 40a99d <flatcc_builder_padding_base@@Base+0x13cd>
  404642:	mov    edx,0x2a1
  404647:	call   403090 <__assert_fail@plt>
  40464c:	lea    rdi,[rip+0x63cf]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404653:	lea    rsi,[rip+0x5208]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40465a:	lea    rcx,[rip+0x633c]        # 40a99d <flatcc_builder_padding_base@@Base+0x13cd>
  404661:	mov    edx,0x2a5
  404666:	call   403090 <__assert_fail@plt>
  40466b:	lea    rdi,[rip+0x63b0]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404672:	lea    rsi,[rip+0x51e9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404679:	lea    rcx,[rip+0x621f]        # 40a89f <flatcc_builder_padding_base@@Base+0x12cf>
  404680:	mov    edx,0x2be
  404685:	call   403090 <__assert_fail@plt>
  40468a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404690 <flatcc_builder_create_buffer@@Base>:
  404690:	push   rbp
  404691:	push   r15
  404693:	push   r14
  404695:	push   r13
  404697:	push   r12
  404699:	push   rbx
  40469a:	sub    rsp,0xa8
  4046a1:	mov    r12d,r9d
  4046a4:	mov    r14d,ecx
  4046a7:	mov    rbp,rsi
  4046aa:	mov    r13,rdi
  4046ad:	mov    WORD PTR [rsp+0xa],r8w
  4046b3:	mov    DWORD PTR [rsp+0xc],0x0
  4046bb:	mov    r15d,r9d
  4046be:	and    r15d,0x1
  4046c2:	lea    rsi,[rsp+0xa]
  4046c7:	mov    ecx,r15d
  4046ca:	call   404580 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4046cf:	movzx  eax,WORD PTR [rsp+0xa]
  4046d4:	cmp    WORD PTR [r13+0xe8],ax
  4046dc:	jae    4046e6 <flatcc_builder_create_buffer@@Base+0x56>
  4046de:	mov    WORD PTR [r13+0xe8],ax
  4046e6:	movzx  edx,ax
  4046e9:	xor    eax,eax
  4046eb:	test   rbp,rbp
  4046ee:	je     404708 <flatcc_builder_create_buffer@@Base+0x78>
  4046f0:	mov    ecx,DWORD PTR [rbp+0x0]
  4046f3:	mov    DWORD PTR [rsp+0xc],ecx
  4046f7:	xor    edi,edi
  4046f9:	test   ecx,ecx
  4046fb:	setne  dil
  4046ff:	mov    rsi,rdi
  404702:	shl    rsi,0x2
  404706:	jmp    40470c <flatcc_builder_create_buffer@@Base+0x7c>
  404708:	xor    edi,edi
  40470a:	xor    esi,esi
  40470c:	lea    ebx,[r12+r12*1]
  404710:	and    ebx,0x4
  404713:	mov    ebp,DWORD PTR [r13+0xf0]
  40471a:	mov    ecx,ebp
  40471c:	sub    ecx,ebx
  40471e:	sub    ecx,esi
  404720:	add    ecx,0xfffffffc
  404723:	dec    edx
  404725:	mov    QWORD PTR [rsp+0x18],0x0
  40472e:	mov    DWORD PTR [rsp+0x20],0x0
  404736:	test   r12b,0x3
  40473a:	je     40476d <flatcc_builder_create_buffer@@Base+0xdd>
  40473c:	mov    QWORD PTR [rsp+0x18],0x4
  404745:	lea    rax,[rsp+0x10]
  40474a:	mov    QWORD PTR [rsp+0x28],rax
  40474f:	mov    QWORD PTR [rsp+0x30],0x4
  404758:	mov    DWORD PTR [rsp+0x20],0x1
  404760:	mov    r8d,0x8
  404766:	mov    eax,0x1
  40476b:	jmp    404773 <flatcc_builder_create_buffer@@Base+0xe3>
  40476d:	mov    r8d,0x4
  404773:	and    ecx,edx
  404775:	mov    QWORD PTR [rsp+0x18],r8
  40477a:	mov    edx,eax
  40477c:	shl    rdx,0x4
  404780:	lea    rbx,[rsp+0x14]
  404785:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  40478a:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404793:	lea    edx,[rax+0x1]
  404796:	mov    DWORD PTR [rsp+0x20],edx
  40479a:	test   dil,dil
  40479d:	je     4047c5 <flatcc_builder_create_buffer@@Base+0x135>
  40479f:	add    r8,rsi
  4047a2:	mov    QWORD PTR [rsp+0x18],r8
  4047a7:	mov    edx,edx
  4047a9:	shl    rdx,0x4
  4047ad:	lea    rdi,[rsp+0xc]
  4047b2:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  4047b7:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  4047bc:	or     eax,0x2
  4047bf:	mov    DWORD PTR [rsp+0x20],eax
  4047c3:	mov    edx,eax
  4047c5:	test   ecx,ecx
  4047c7:	je     4047f0 <flatcc_builder_create_buffer@@Base+0x160>
  4047c9:	mov    eax,ecx
  4047cb:	add    r8,rax
  4047ce:	mov    QWORD PTR [rsp+0x18],r8
  4047d3:	mov    ecx,edx
  4047d5:	shl    rcx,0x4
  4047d9:	lea    rsi,[rip+0x4df0]        # 4095d0 <flatcc_builder_padding_base@@Base>
  4047e0:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  4047e5:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  4047ea:	inc    edx
  4047ec:	mov    DWORD PTR [rsp+0x20],edx
  4047f0:	xor    eax,eax
  4047f2:	test   r12b,0x3
  4047f6:	setne  al
  4047f9:	sub    ebp,r8d
  4047fc:	lea    eax,[rbp+rax*4+0x0]
  404800:	mov    ecx,r15d
  404803:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  40480b:	sub    ecx,eax
  40480d:	mov    DWORD PTR [rsp+0x10],ecx
  404811:	sub    r14d,eax
  404814:	mov    DWORD PTR [rsp+0x14],r14d
  404819:	cmp    r8,0x11
  40481d:	setb   al
  404820:	lea    rcx,[r8-0x10]
  404824:	shr    rcx,0x20
  404828:	sete   cl
  40482b:	test   r8d,r8d
  40482e:	jle    404866 <flatcc_builder_create_buffer@@Base+0x1d6>
  404830:	or     al,cl
  404832:	je     404866 <flatcc_builder_create_buffer@@Base+0x1d6>
  404834:	mov    rdi,QWORD PTR [r13+0x38]
  404838:	lea    rsi,[rsp+0x28]
  40483d:	mov    ecx,ebp
  40483f:	call   QWORD PTR [r13+0x48]
  404843:	test   eax,eax
  404845:	jne    404885 <flatcc_builder_create_buffer@@Base+0x1f5>
  404847:	mov    DWORD PTR [r13+0xf0],ebp
  40484e:	test   ebp,ebp
  404850:	je     4048a4 <flatcc_builder_create_buffer@@Base+0x214>
  404852:	mov    eax,ebp
  404854:	add    rsp,0xa8
  40485b:	pop    rbx
  40485c:	pop    r12
  40485e:	pop    r13
  404860:	pop    r14
  404862:	pop    r15
  404864:	pop    rbp
  404865:	ret    
  404866:	lea    rdi,[rip+0x61b5]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40486d:	lea    rsi,[rip+0x4fee]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404874:	lea    rcx,[rip+0x6066]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  40487b:	mov    edx,0x287
  404880:	call   403090 <__assert_fail@plt>
  404885:	lea    rdi,[rip+0x6196]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40488c:	lea    rsi,[rip+0x4fcf]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404893:	lea    rcx,[rip+0x6047]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  40489a:	mov    edx,0x28b
  40489f:	call   403090 <__assert_fail@plt>
  4048a4:	lea    rdi,[rip+0x6177]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4048ab:	lea    rsi,[rip+0x4fb0]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4048b2:	lea    rcx,[rip+0x50fe]        # 4099b7 <flatcc_builder_padding_base@@Base+0x3e7>
  4048b9:	mov    edx,0x304
  4048be:	call   403090 <__assert_fail@plt>
  4048c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4048cd:	nop    DWORD PTR [rax]

00000000004048d0 <flatcc_builder_create_struct@@Base>:
  4048d0:	push   rbp
  4048d1:	push   rbx
  4048d2:	sub    rsp,0x98
  4048d9:	test   cx,cx
  4048dc:	je     4049d2 <flatcc_builder_create_struct@@Base+0x102>
  4048e2:	mov    r8,rdx
  4048e5:	mov    rbx,rdi
  4048e8:	cmp    WORD PTR [rdi+0xe8],cx
  4048ef:	jae    4048f8 <flatcc_builder_create_struct@@Base+0x28>
  4048f1:	mov    WORD PTR [rbx+0xe8],cx
  4048f8:	mov    ebp,DWORD PTR [rbx+0xf0]
  4048fe:	mov    edx,ebp
  404900:	sub    edx,r8d
  404903:	movzx  eax,cx
  404906:	dec    eax
  404908:	and    eax,edx
  40490a:	mov    QWORD PTR [rsp+0x8],0x0
  404913:	mov    DWORD PTR [rsp+0x10],0x0
  40491b:	test   r8,r8
  40491e:	je     4049ab <flatcc_builder_create_struct@@Base+0xdb>
  404924:	mov    QWORD PTR [rsp+0x8],r8
  404929:	mov    QWORD PTR [rsp+0x18],rsi
  40492e:	mov    QWORD PTR [rsp+0x20],r8
  404933:	mov    DWORD PTR [rsp+0x10],0x1
  40493b:	mov    edx,0x1
  404940:	test   eax,eax
  404942:	je     404969 <flatcc_builder_create_struct@@Base+0x99>
  404944:	add    r8,rax
  404947:	mov    QWORD PTR [rsp+0x8],r8
  40494c:	mov    ecx,edx
  40494e:	shl    rcx,0x4
  404952:	lea    rsi,[rip+0x4c77]        # 4095d0 <flatcc_builder_padding_base@@Base>
  404959:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40495e:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  404963:	inc    edx
  404965:	mov    DWORD PTR [rsp+0x10],edx
  404969:	cmp    r8,0x11
  40496d:	setb   al
  404970:	lea    rcx,[r8-0x10]
  404974:	shr    rcx,0x20
  404978:	sete   cl
  40497b:	test   r8d,r8d
  40497e:	jle    4049b3 <flatcc_builder_create_struct@@Base+0xe3>
  404980:	or     al,cl
  404982:	je     4049b3 <flatcc_builder_create_struct@@Base+0xe3>
  404984:	sub    ebp,r8d
  404987:	mov    rdi,QWORD PTR [rbx+0x38]
  40498b:	lea    rsi,[rsp+0x18]
  404990:	mov    ecx,ebp
  404992:	call   QWORD PTR [rbx+0x48]
  404995:	test   eax,eax
  404997:	jne    4049f1 <flatcc_builder_create_struct@@Base+0x121>
  404999:	mov    DWORD PTR [rbx+0xf0],ebp
  40499f:	mov    eax,ebp
  4049a1:	add    rsp,0x98
  4049a8:	pop    rbx
  4049a9:	pop    rbp
  4049aa:	ret    
  4049ab:	xor    edx,edx
  4049ad:	test   eax,eax
  4049af:	jne    404944 <flatcc_builder_create_struct@@Base+0x74>
  4049b1:	jmp    404969 <flatcc_builder_create_struct@@Base+0x99>
  4049b3:	lea    rdi,[rip+0x6068]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4049ba:	lea    rsi,[rip+0x4ea1]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4049c1:	lea    rcx,[rip+0x5f19]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  4049c8:	mov    edx,0x287
  4049cd:	call   403090 <__assert_fail@plt>
  4049d2:	lea    rdi,[rip+0x5061]        # 409a3a <flatcc_builder_padding_base@@Base+0x46a>
  4049d9:	lea    rsi,[rip+0x4e82]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4049e0:	lea    rcx,[rip+0x505e]        # 409a45 <flatcc_builder_padding_base@@Base+0x475>
  4049e7:	mov    edx,0x30f
  4049ec:	call   403090 <__assert_fail@plt>
  4049f1:	lea    rdi,[rip+0x602a]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4049f8:	lea    rsi,[rip+0x4e63]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4049ff:	lea    rcx,[rip+0x5edb]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  404a06:	mov    edx,0x28b
  404a0b:	call   403090 <__assert_fail@plt>

0000000000404a10 <flatcc_builder_start_buffer@@Base>:
  404a10:	push   rbp
  404a11:	push   r15
  404a13:	push   r14
  404a15:	push   rbx
  404a16:	push   rax
  404a17:	mov    r15d,ecx
  404a1a:	mov    ebp,edx
  404a1c:	mov    r14,rsi
  404a1f:	mov    rbx,rdi
  404a22:	movzx  esi,WORD PTR [rdi+0xe8]
  404a29:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  404a2e:	mov    ecx,eax
  404a30:	mov    eax,0xffffffff
  404a35:	test   ecx,ecx
  404a37:	jne    404adc <flatcc_builder_start_buffer@@Base+0xcc>
  404a3d:	mov    WORD PTR [rbx+0xe8],0x1
  404a46:	movzx  eax,WORD PTR [rbx+0xec]
  404a4d:	mov    rcx,QWORD PTR [rbx+0x30]
  404a51:	mov    WORD PTR [rcx+0x22],ax
  404a55:	mov    WORD PTR [rbx+0xec],bp
  404a5c:	movzx  eax,WORD PTR [rbx+0x10c]
  404a63:	mov    rcx,QWORD PTR [rbx+0x30]
  404a67:	mov    WORD PTR [rcx+0x20],ax
  404a6b:	mov    WORD PTR [rbx+0x10c],r15w
  404a73:	mov    eax,DWORD PTR [rbx+0xf8]
  404a79:	mov    rcx,QWORD PTR [rbx+0x30]
  404a7d:	mov    DWORD PTR [rcx+0x14],eax
  404a80:	mov    eax,DWORD PTR [rbx+0x100]
  404a86:	mov    rcx,QWORD PTR [rbx+0x30]
  404a8a:	mov    DWORD PTR [rcx+0x1c],eax
  404a8d:	mov    eax,DWORD PTR [rbx+0xf0]
  404a93:	mov    DWORD PTR [rbx+0xf8],eax
  404a99:	mov    eax,DWORD PTR [rbx+0xfc]
  404a9f:	lea    ecx,[rax+0x1]
  404aa2:	mov    DWORD PTR [rbx+0xfc],ecx
  404aa8:	mov    DWORD PTR [rbx+0x100],eax
  404aae:	mov    eax,DWORD PTR [rbx+0x110]
  404ab4:	mov    rcx,QWORD PTR [rbx+0x30]
  404ab8:	mov    DWORD PTR [rcx+0x10],eax
  404abb:	test   r14,r14
  404abe:	jne    404ac7 <flatcc_builder_start_buffer@@Base+0xb7>
  404ac0:	lea    r14,[rip+0x4b09]        # 4095d0 <flatcc_builder_padding_base@@Base>
  404ac7:	mov    eax,DWORD PTR [r14]
  404aca:	mov    DWORD PTR [rbx+0x110],eax
  404ad0:	mov    rax,QWORD PTR [rbx+0x30]
  404ad4:	mov    WORD PTR [rax+0xe],0x1
  404ada:	xor    eax,eax
  404adc:	add    rsp,0x8
  404ae0:	pop    rbx
  404ae1:	pop    r14
  404ae3:	pop    r15
  404ae5:	pop    rbp
  404ae6:	ret    
  404ae7:	nop    WORD PTR [rax+rax*1+0x0]
  404af0:	push   rbp
  404af1:	push   r15
  404af3:	push   r14
  404af5:	push   rbx
  404af6:	push   rax
  404af7:	mov    r14d,esi
  404afa:	mov    rbx,rdi
  404afd:	movsxd rbp,DWORD PTR [rdi+0x104]
  404b04:	lea    eax,[rbp+0x1]
  404b07:	mov    DWORD PTR [rdi+0x104],eax
  404b0d:	cmp    ebp,DWORD PTR [rdi+0x108]
  404b13:	jge    404b26 <flatcc_builder_start_buffer@@Base+0x116>
  404b15:	mov    rcx,QWORD PTR [rbx+0x30]
  404b19:	add    rcx,0x24
  404b1d:	mov    QWORD PTR [rbx+0x30],rcx
  404b21:	jmp    404bb9 <flatcc_builder_start_buffer@@Base+0x1a9>
  404b26:	mov    eax,DWORD PTR [rbx+0x120]
  404b2c:	mov    r15d,0xffffffff
  404b32:	test   eax,eax
  404b34:	jle    404b3e <flatcc_builder_start_buffer@@Base+0x12e>
  404b36:	cmp    ebp,eax
  404b38:	jge    404bf4 <flatcc_builder_start_buffer@@Base+0x1e4>
  404b3e:	shl    rbp,0x2
  404b42:	lea    rdx,[rbp*8+0x24]
  404b4a:	add    rdx,rbp
  404b4d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404b54:	jbe    404b74 <flatcc_builder_start_buffer@@Base+0x164>
  404b56:	lea    rsi,[rbx+0x98]
  404b5d:	mov    rdi,QWORD PTR [rbx+0x40]
  404b61:	xor    ecx,ecx
  404b63:	mov    r8d,0x4
  404b69:	call   QWORD PTR [rbx+0x50]
  404b6c:	test   eax,eax
  404b6e:	jne    404c02 <flatcc_builder_start_buffer@@Base+0x1f2>
  404b74:	lea    rcx,[rbp*8+0x0]
  404b7c:	add    rcx,rbp
  404b7f:	add    rcx,QWORD PTR [rbx+0x98]
  404b86:	mov    QWORD PTR [rbx+0x30],rcx
  404b8a:	je     404bf4 <flatcc_builder_start_buffer@@Base+0x1e4>
  404b8c:	movabs rax,0xe38e38e38e38e38f
  404b96:	mul    QWORD PTR [rbx+0xa0]
  404b9d:	shr    rdx,0x5
  404ba1:	mov    eax,DWORD PTR [rbx+0x120]
  404ba7:	cmp    eax,edx
  404ba9:	mov    esi,edx
  404bab:	cmovle esi,eax
  404bae:	test   eax,eax
  404bb0:	cmovle esi,edx
  404bb3:	mov    DWORD PTR [rbx+0x108],esi
  404bb9:	mov    eax,DWORD PTR [rbx+0x20]
  404bbc:	mov    DWORD PTR [rcx+0x8],eax
  404bbf:	movzx  edx,WORD PTR [rbx+0xea]
  404bc6:	mov    WORD PTR [rcx+0xc],dx
  404bca:	mov    WORD PTR [rbx+0xea],r14w
  404bd2:	mov    edx,DWORD PTR [rbx+0x28]
  404bd5:	mov    DWORD PTR [rcx],edx
  404bd7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404bde:	lea    eax,[rax+rdx*1]
  404be1:	add    eax,0x7
  404be4:	and    eax,0xfffffff8
  404be7:	mov    DWORD PTR [rbx+0x28],eax
  404bea:	mov    DWORD PTR [rbx+0x20],0x0
  404bf1:	xor    r15d,r15d
  404bf4:	mov    eax,r15d
  404bf7:	add    rsp,0x8
  404bfb:	pop    rbx
  404bfc:	pop    r14
  404bfe:	pop    r15
  404c00:	pop    rbp
  404c01:	ret    
  404c02:	lea    rdi,[rip+0x5e19]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  404c09:	lea    rsi,[rip+0x4c52]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404c10:	lea    rcx,[rip+0x5c45]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  404c17:	mov    edx,0x134
  404c1c:	call   403090 <__assert_fail@plt>
  404c21:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404c30 <flatcc_builder_end_buffer@@Base>:
  404c30:	push   rbp
  404c31:	push   rbx
  404c32:	push   rax
  404c33:	mov    rax,QWORD PTR [rdi+0x30]
  404c37:	cmp    WORD PTR [rax+0xe],0x1
  404c3c:	jne    404d39 <flatcc_builder_end_buffer@@Base+0x109>
  404c42:	mov    ecx,esi
  404c44:	mov    rbx,rdi
  404c47:	movzx  eax,WORD PTR [rdi+0x10c]
  404c4e:	and    eax,0x2
  404c51:	xor    r9d,r9d
  404c54:	cmp    DWORD PTR [rdi+0x100],0x0
  404c5b:	setne  r9b
  404c5f:	or     r9d,eax
  404c62:	movzx  edi,WORD PTR [rdi+0xe8]
  404c69:	movzx  eax,WORD PTR [rbx+0xec]
  404c70:	cmp    di,ax
  404c73:	jae    404c7e <flatcc_builder_end_buffer@@Base+0x4e>
  404c75:	mov    WORD PTR [rbx+0xe8],ax
  404c7c:	mov    edi,eax
  404c7e:	lea    rsi,[rbx+0x110]
  404c85:	movzx  edx,ax
  404c88:	movzx  r8d,di
  404c8c:	mov    rdi,rbx
  404c8f:	call   404690 <flatcc_builder_create_buffer@@Base>
  404c94:	mov    ebp,eax
  404c96:	test   eax,eax
  404c98:	je     404d30 <flatcc_builder_end_buffer@@Base+0x100>
  404c9e:	mov    rax,QWORD PTR [rbx+0x30]
  404ca2:	mov    ecx,DWORD PTR [rax+0x14]
  404ca5:	mov    DWORD PTR [rbx+0xf8],ecx
  404cab:	mov    ecx,DWORD PTR [rax+0x1c]
  404cae:	mov    DWORD PTR [rbx+0x100],ecx
  404cb4:	mov    ecx,DWORD PTR [rax+0x10]
  404cb7:	mov    DWORD PTR [rbx+0x110],ecx
  404cbd:	movzx  eax,WORD PTR [rax+0x20]
  404cc1:	mov    WORD PTR [rbx+0x10c],ax
  404cc8:	mov    rdi,QWORD PTR [rbx+0x18]
  404ccc:	mov    edx,DWORD PTR [rbx+0x20]
  404ccf:	xor    esi,esi
  404cd1:	call   4030a0 <memset@plt>
  404cd6:	mov    rax,QWORD PTR [rbx+0x30]
  404cda:	mov    ecx,DWORD PTR [rax+0x8]
  404cdd:	mov    DWORD PTR [rbx+0x20],ecx
  404ce0:	mov    ecx,DWORD PTR [rax]
  404ce2:	mov    DWORD PTR [rbx+0x28],ecx
  404ce5:	mov    edx,DWORD PTR [rax+0x4]
  404ce8:	mov    rsi,rcx
  404ceb:	add    rsi,QWORD PTR [rbx+0x68]
  404cef:	mov    QWORD PTR [rbx+0x18],rsi
  404cf3:	mov    esi,DWORD PTR [rbx+0x70]
  404cf6:	sub    esi,ecx
  404cf8:	cmp    esi,edx
  404cfa:	cmova  esi,edx
  404cfd:	mov    DWORD PTR [rbx+0x24],esi
  404d00:	movzx  ecx,WORD PTR [rbx+0xea]
  404d07:	cmp    WORD PTR [rbx+0xe8],cx
  404d0e:	jae    404d17 <flatcc_builder_end_buffer@@Base+0xe7>
  404d10:	mov    WORD PTR [rbx+0xe8],cx
  404d17:	movzx  ecx,WORD PTR [rax+0xc]
  404d1b:	mov    WORD PTR [rbx+0xea],cx
  404d22:	add    rax,0xffffffffffffffdc
  404d26:	mov    QWORD PTR [rbx+0x30],rax
  404d2a:	dec    DWORD PTR [rbx+0x104]
  404d30:	mov    eax,ebp
  404d32:	add    rsp,0x8
  404d36:	pop    rbx
  404d37:	pop    rbp
  404d38:	ret    
  404d39:	lea    rdi,[rip+0x4d6b]        # 409aab <flatcc_builder_padding_base@@Base+0x4db>
  404d40:	lea    rsi,[rip+0x4b1b]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404d47:	lea    rcx,[rip+0x4d89]        # 409ad7 <flatcc_builder_padding_base@@Base+0x507>
  404d4e:	mov    edx,0x346
  404d53:	call   403090 <__assert_fail@plt>
  404d58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404d60 <flatcc_builder_start_struct@@Base>:
  404d60:	push   r15
  404d62:	push   r14
  404d64:	push   rbx
  404d65:	mov    r14,rsi
  404d68:	mov    rbx,rdi
  404d6b:	mov    esi,edx
  404d6d:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  404d72:	test   eax,eax
  404d74:	je     404d7d <flatcc_builder_start_struct@@Base+0x1d>
  404d76:	xor    eax,eax
  404d78:	jmp    404e11 <flatcc_builder_start_struct@@Base+0xb1>
  404d7d:	mov    rdx,QWORD PTR [rbx+0x30]
  404d81:	mov    WORD PTR [rdx+0xe],0x2
  404d87:	mov    ecx,DWORD PTR [rbx+0x28]
  404d8a:	mov    esi,DWORD PTR [rbx+0x70]
  404d8d:	mov    rax,QWORD PTR [rbx+0x68]
  404d91:	add    rax,rcx
  404d94:	mov    QWORD PTR [rbx+0x18],rax
  404d98:	sub    esi,ecx
  404d9a:	cmp    esi,0xfffffffc
  404d9d:	mov    edi,0xfffffffc
  404da2:	cmovb  edi,esi
  404da5:	mov    DWORD PTR [rbx+0x24],edi
  404da8:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404daf:	mov    r15d,DWORD PTR [rbx+0x20]
  404db3:	add    r14d,r15d
  404db6:	mov    DWORD PTR [rbx+0x20],r14d
  404dba:	cmp    r14d,edi
  404dbd:	jb     404e0e <flatcc_builder_start_struct@@Base+0xae>
  404dbf:	inc    r14d
  404dc2:	lea    rsi,[rbx+0x68]
  404dc6:	mov    rdi,QWORD PTR [rbx+0x40]
  404dca:	add    r14,rcx
  404dcd:	mov    rdx,r14
  404dd0:	mov    ecx,0x1
  404dd5:	mov    r8d,0x1
  404ddb:	call   QWORD PTR [rbx+0x50]
  404dde:	test   eax,eax
  404de0:	jne    404d76 <flatcc_builder_start_struct@@Base+0x16>
  404de2:	mov    ecx,DWORD PTR [rbx+0x28]
  404de5:	mov    rax,rcx
  404de8:	add    rax,QWORD PTR [rbx+0x68]
  404dec:	mov    QWORD PTR [rbx+0x18],rax
  404df0:	mov    edx,DWORD PTR [rbx+0x70]
  404df3:	sub    edx,ecx
  404df5:	cmp    edx,0xfffffffc
  404df8:	mov    ecx,0xfffffffc
  404dfd:	cmovb  ecx,edx
  404e00:	mov    DWORD PTR [rbx+0x24],ecx
  404e03:	mov    rcx,QWORD PTR [rbx+0x30]
  404e07:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404e0e:	add    rax,r15
  404e11:	pop    rbx
  404e12:	pop    r14
  404e14:	pop    r15
  404e16:	ret    
  404e17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404e20 <flatcc_builder_struct_edit@@Base>:
  404e20:	mov    rax,QWORD PTR [rdi+0x18]
  404e24:	ret    
  404e25:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404e2f:	nop

0000000000404e30 <flatcc_builder_end_struct@@Base>:
  404e30:	push   rbp
  404e31:	push   rbx
  404e32:	push   rax
  404e33:	mov    rax,QWORD PTR [rdi+0x30]
  404e37:	cmp    WORD PTR [rax+0xe],0x2
  404e3c:	jne    404ecf <flatcc_builder_end_struct@@Base+0x9f>
  404e42:	mov    rbx,rdi
  404e45:	mov    rsi,QWORD PTR [rdi+0x18]
  404e49:	mov    edx,DWORD PTR [rdi+0x20]
  404e4c:	movzx  ecx,WORD PTR [rdi+0xea]
  404e53:	call   4048d0 <flatcc_builder_create_struct@@Base>
  404e58:	mov    ebp,eax
  404e5a:	test   eax,eax
  404e5c:	je     404ec6 <flatcc_builder_end_struct@@Base+0x96>
  404e5e:	mov    rdi,QWORD PTR [rbx+0x18]
  404e62:	mov    edx,DWORD PTR [rbx+0x20]
  404e65:	xor    esi,esi
  404e67:	call   4030a0 <memset@plt>
  404e6c:	mov    rax,QWORD PTR [rbx+0x30]
  404e70:	mov    ecx,DWORD PTR [rax+0x8]
  404e73:	mov    DWORD PTR [rbx+0x20],ecx
  404e76:	mov    ecx,DWORD PTR [rax]
  404e78:	mov    DWORD PTR [rbx+0x28],ecx
  404e7b:	mov    edx,DWORD PTR [rax+0x4]
  404e7e:	mov    rsi,rcx
  404e81:	add    rsi,QWORD PTR [rbx+0x68]
  404e85:	mov    QWORD PTR [rbx+0x18],rsi
  404e89:	mov    esi,DWORD PTR [rbx+0x70]
  404e8c:	sub    esi,ecx
  404e8e:	cmp    esi,edx
  404e90:	cmova  esi,edx
  404e93:	mov    DWORD PTR [rbx+0x24],esi
  404e96:	movzx  ecx,WORD PTR [rbx+0xea]
  404e9d:	cmp    WORD PTR [rbx+0xe8],cx
  404ea4:	jae    404ead <flatcc_builder_end_struct@@Base+0x7d>
  404ea6:	mov    WORD PTR [rbx+0xe8],cx
  404ead:	movzx  ecx,WORD PTR [rax+0xc]
  404eb1:	mov    WORD PTR [rbx+0xea],cx
  404eb8:	add    rax,0xffffffffffffffdc
  404ebc:	mov    QWORD PTR [rbx+0x30],rax
  404ec0:	dec    DWORD PTR [rbx+0x104]
  404ec6:	mov    eax,ebp
  404ec8:	add    rsp,0x8
  404ecc:	pop    rbx
  404ecd:	pop    rbp
  404ece:	ret    
  404ecf:	lea    rdi,[rip+0x4c5a]        # 409b30 <flatcc_builder_padding_base@@Base+0x560>
  404ed6:	lea    rsi,[rip+0x4985]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404edd:	lea    rcx,[rip+0x4c78]        # 409b5c <flatcc_builder_padding_base@@Base+0x58c>
  404ee4:	mov    edx,0x368
  404ee9:	call   403090 <__assert_fail@plt>
  404eee:	xchg   ax,ax

0000000000404ef0 <flatcc_builder_extend_vector@@Base>:
  404ef0:	push   r14
  404ef2:	push   rbx
  404ef3:	push   rax
  404ef4:	mov    rax,QWORD PTR [rdi+0x30]
  404ef8:	mov    ecx,DWORD PTR [rax+0x14]
  404efb:	add    ecx,esi
  404efd:	jb     404f8f <flatcc_builder_extend_vector@@Base+0x9f>
  404f03:	cmp    ecx,DWORD PTR [rax+0x18]
  404f06:	ja     404f8f <flatcc_builder_extend_vector@@Base+0x9f>
  404f0c:	mov    rbx,rdi
  404f0f:	mov    DWORD PTR [rax+0x14],ecx
  404f12:	mov    rax,QWORD PTR [rdi+0x30]
  404f16:	imul   esi,DWORD PTR [rax+0x10]
  404f1a:	mov    r14d,DWORD PTR [rdi+0x20]
  404f1e:	add    esi,r14d
  404f21:	mov    DWORD PTR [rdi+0x20],esi
  404f24:	cmp    esi,DWORD PTR [rdi+0x24]
  404f27:	jae    404f2f <flatcc_builder_extend_vector@@Base+0x3f>
  404f29:	mov    rax,QWORD PTR [rbx+0x18]
  404f2d:	jmp    404f84 <flatcc_builder_extend_vector@@Base+0x94>
  404f2f:	inc    esi
  404f31:	lea    rax,[rbx+0x68]
  404f35:	mov    rdi,QWORD PTR [rbx+0x40]
  404f39:	mov    edx,DWORD PTR [rbx+0x28]
  404f3c:	add    rdx,rsi
  404f3f:	mov    rsi,rax
  404f42:	mov    ecx,0x1
  404f47:	mov    r8d,0x1
  404f4d:	call   QWORD PTR [rbx+0x50]
  404f50:	test   eax,eax
  404f52:	je     404f58 <flatcc_builder_extend_vector@@Base+0x68>
  404f54:	xor    eax,eax
  404f56:	jmp    404f87 <flatcc_builder_extend_vector@@Base+0x97>
  404f58:	mov    ecx,DWORD PTR [rbx+0x28]
  404f5b:	mov    rax,rcx
  404f5e:	add    rax,QWORD PTR [rbx+0x68]
  404f62:	mov    QWORD PTR [rbx+0x18],rax
  404f66:	mov    edx,DWORD PTR [rbx+0x70]
  404f69:	sub    edx,ecx
  404f6b:	cmp    edx,0xfffffffc
  404f6e:	mov    ecx,0xfffffffc
  404f73:	cmovb  ecx,edx
  404f76:	mov    DWORD PTR [rbx+0x24],ecx
  404f79:	mov    rcx,QWORD PTR [rbx+0x30]
  404f7d:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404f84:	add    rax,r14
  404f87:	add    rsp,0x8
  404f8b:	pop    rbx
  404f8c:	pop    r14
  404f8e:	ret    
  404f8f:	lea    rdi,[rip+0x5995]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  404f96:	lea    rsi,[rip+0x48c5]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  404f9d:	lea    rcx,[rip+0x59a2]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  404fa4:	mov    edx,0x37c
  404fa9:	call   403090 <__assert_fail@plt>
  404fae:	xchg   ax,ax

0000000000404fb0 <flatcc_builder_vector_push@@Base>:
  404fb0:	push   r15
  404fb2:	push   r14
  404fb4:	push   r13
  404fb6:	push   r12
  404fb8:	push   rbx
  404fb9:	mov    rax,QWORD PTR [rdi+0x30]
  404fbd:	cmp    WORD PTR [rax+0xe],0x4
  404fc2:	jne    405075 <flatcc_builder_vector_push@@Base+0xc5>
  404fc8:	mov    ecx,DWORD PTR [rax+0x14]
  404fcb:	cmp    ecx,DWORD PTR [rax+0x18]
  404fce:	ja     405094 <flatcc_builder_vector_push@@Base+0xe4>
  404fd4:	mov    r14,rsi
  404fd7:	mov    rbx,rdi
  404fda:	inc    ecx
  404fdc:	mov    DWORD PTR [rax+0x14],ecx
  404fdf:	mov    rax,QWORD PTR [rdi+0x30]
  404fe3:	mov    r15d,DWORD PTR [rax+0x10]
  404fe7:	mov    r13d,DWORD PTR [rdi+0x20]
  404feb:	lea    eax,[r15+r13*1]
  404fef:	mov    DWORD PTR [rdi+0x20],eax
  404ff2:	cmp    eax,DWORD PTR [rdi+0x24]
  404ff5:	jae    405002 <flatcc_builder_vector_push@@Base+0x52>
  404ff7:	mov    r12,QWORD PTR [rbx+0x18]
  404ffb:	add    r12,r13
  404ffe:	jne    40505a <flatcc_builder_vector_push@@Base+0xaa>
  405000:	jmp    405024 <flatcc_builder_vector_push@@Base+0x74>
  405002:	inc    eax
  405004:	lea    rsi,[rbx+0x68]
  405008:	mov    rdi,QWORD PTR [rbx+0x40]
  40500c:	mov    edx,DWORD PTR [rbx+0x28]
  40500f:	add    rdx,rax
  405012:	mov    ecx,0x1
  405017:	mov    r8d,0x1
  40501d:	call   QWORD PTR [rbx+0x50]
  405020:	test   eax,eax
  405022:	je     405029 <flatcc_builder_vector_push@@Base+0x79>
  405024:	xor    r12d,r12d
  405027:	jmp    405068 <flatcc_builder_vector_push@@Base+0xb8>
  405029:	mov    eax,DWORD PTR [rbx+0x28]
  40502c:	mov    r12,rax
  40502f:	add    r12,QWORD PTR [rbx+0x68]
  405033:	mov    QWORD PTR [rbx+0x18],r12
  405037:	mov    ecx,DWORD PTR [rbx+0x70]
  40503a:	sub    ecx,eax
  40503c:	cmp    ecx,0xfffffffc
  40503f:	mov    eax,0xfffffffc
  405044:	cmovb  eax,ecx
  405047:	mov    DWORD PTR [rbx+0x24],eax
  40504a:	mov    rax,QWORD PTR [rbx+0x30]
  40504e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405055:	add    r12,r13
  405058:	je     405024 <flatcc_builder_vector_push@@Base+0x74>
  40505a:	mov    rdi,r12
  40505d:	mov    rsi,r14
  405060:	mov    rdx,r15
  405063:	call   4030d0 <memcpy@plt>
  405068:	mov    rax,r12
  40506b:	pop    rbx
  40506c:	pop    r12
  40506e:	pop    r13
  405070:	pop    r14
  405072:	pop    r15
  405074:	ret    
  405075:	lea    rdi,[rip+0x4b23]        # 409b9f <flatcc_builder_padding_base@@Base+0x5cf>
  40507c:	lea    rsi,[rip+0x47df]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405083:	lea    rcx,[rip+0x4b41]        # 409bcb <flatcc_builder_padding_base@@Base+0x5fb>
  40508a:	mov    edx,0x38b
  40508f:	call   403090 <__assert_fail@plt>
  405094:	lea    rdi,[rip+0x4b73]        # 409c0e <flatcc_builder_padding_base@@Base+0x63e>
  40509b:	lea    rsi,[rip+0x47c0]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4050a2:	lea    rcx,[rip+0x4b22]        # 409bcb <flatcc_builder_padding_base@@Base+0x5fb>
  4050a9:	mov    edx,0x38c
  4050ae:	call   403090 <__assert_fail@plt>
  4050b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4050bd:	nop    DWORD PTR [rax]

00000000004050c0 <flatcc_builder_append_vector@@Base>:
  4050c0:	push   r15
  4050c2:	push   r14
  4050c4:	push   r13
  4050c6:	push   r12
  4050c8:	push   rbx
  4050c9:	mov    rax,QWORD PTR [rdi+0x30]
  4050cd:	cmp    WORD PTR [rax+0xe],0x4
  4050d2:	jne    4051af <flatcc_builder_append_vector@@Base+0xef>
  4050d8:	mov    r15,rdx
  4050db:	mov    ecx,DWORD PTR [rax+0x14]
  4050de:	add    ecx,r15d
  4050e1:	jb     405190 <flatcc_builder_append_vector@@Base+0xd0>
  4050e7:	cmp    ecx,DWORD PTR [rax+0x18]
  4050ea:	ja     405190 <flatcc_builder_append_vector@@Base+0xd0>
  4050f0:	mov    r14,rsi
  4050f3:	mov    rbx,rdi
  4050f6:	mov    DWORD PTR [rax+0x14],ecx
  4050f9:	mov    rax,QWORD PTR [rdi+0x30]
  4050fd:	imul   r15d,DWORD PTR [rax+0x10]
  405102:	mov    r13d,DWORD PTR [rdi+0x20]
  405106:	lea    eax,[r15+r13*1]
  40510a:	mov    DWORD PTR [rdi+0x20],eax
  40510d:	cmp    eax,DWORD PTR [rdi+0x24]
  405110:	jae    40511d <flatcc_builder_append_vector@@Base+0x5d>
  405112:	mov    r12,QWORD PTR [rbx+0x18]
  405116:	add    r12,r13
  405119:	jne    405175 <flatcc_builder_append_vector@@Base+0xb5>
  40511b:	jmp    40513f <flatcc_builder_append_vector@@Base+0x7f>
  40511d:	inc    eax
  40511f:	lea    rsi,[rbx+0x68]
  405123:	mov    rdi,QWORD PTR [rbx+0x40]
  405127:	mov    edx,DWORD PTR [rbx+0x28]
  40512a:	add    rdx,rax
  40512d:	mov    ecx,0x1
  405132:	mov    r8d,0x1
  405138:	call   QWORD PTR [rbx+0x50]
  40513b:	test   eax,eax
  40513d:	je     405144 <flatcc_builder_append_vector@@Base+0x84>
  40513f:	xor    r12d,r12d
  405142:	jmp    405183 <flatcc_builder_append_vector@@Base+0xc3>
  405144:	mov    eax,DWORD PTR [rbx+0x28]
  405147:	mov    r12,rax
  40514a:	add    r12,QWORD PTR [rbx+0x68]
  40514e:	mov    QWORD PTR [rbx+0x18],r12
  405152:	mov    ecx,DWORD PTR [rbx+0x70]
  405155:	sub    ecx,eax
  405157:	cmp    ecx,0xfffffffc
  40515a:	mov    eax,0xfffffffc
  40515f:	cmovb  eax,ecx
  405162:	mov    DWORD PTR [rbx+0x24],eax
  405165:	mov    rax,QWORD PTR [rbx+0x30]
  405169:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405170:	add    r12,r13
  405173:	je     40513f <flatcc_builder_append_vector@@Base+0x7f>
  405175:	mov    edx,r15d
  405178:	mov    rdi,r12
  40517b:	mov    rsi,r14
  40517e:	call   4030d0 <memcpy@plt>
  405183:	mov    rax,r12
  405186:	pop    rbx
  405187:	pop    r12
  405189:	pop    r13
  40518b:	pop    r14
  40518d:	pop    r15
  40518f:	ret    
  405190:	lea    rdi,[rip+0x5794]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  405197:	lea    rsi,[rip+0x46c4]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40519e:	lea    rcx,[rip+0x57a1]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  4051a5:	mov    edx,0x37c
  4051aa:	call   403090 <__assert_fail@plt>
  4051af:	lea    rdi,[rip+0x49e9]        # 409b9f <flatcc_builder_padding_base@@Base+0x5cf>
  4051b6:	lea    rsi,[rip+0x46a5]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4051bd:	lea    rcx,[rip+0x4a87]        # 409c4b <flatcc_builder_padding_base@@Base+0x67b>
  4051c4:	mov    edx,0x393
  4051c9:	call   403090 <__assert_fail@plt>
  4051ce:	xchg   ax,ax

00000000004051d0 <flatcc_builder_extend_offset_vector@@Base>:
  4051d0:	push   r14
  4051d2:	push   rbx
  4051d3:	push   rax
  4051d4:	mov    rax,QWORD PTR [rdi+0x30]
  4051d8:	mov    ecx,DWORD PTR [rax+0x14]
  4051db:	add    ecx,esi
  4051dd:	jb     405264 <flatcc_builder_extend_offset_vector@@Base+0x94>
  4051e3:	cmp    ecx,0x40000000
  4051e9:	jae    405264 <flatcc_builder_extend_offset_vector@@Base+0x94>
  4051eb:	mov    rbx,rdi
  4051ee:	mov    DWORD PTR [rax+0x14],ecx
  4051f1:	mov    r14d,DWORD PTR [rdi+0x20]
  4051f5:	lea    eax,[r14+rsi*4]
  4051f9:	mov    DWORD PTR [rdi+0x20],eax
  4051fc:	cmp    eax,DWORD PTR [rdi+0x24]
  4051ff:	jae    405207 <flatcc_builder_extend_offset_vector@@Base+0x37>
  405201:	mov    rax,QWORD PTR [rbx+0x18]
  405205:	jmp    405259 <flatcc_builder_extend_offset_vector@@Base+0x89>
  405207:	inc    eax
  405209:	lea    rsi,[rbx+0x68]
  40520d:	mov    rdi,QWORD PTR [rbx+0x40]
  405211:	mov    edx,DWORD PTR [rbx+0x28]
  405214:	add    rdx,rax
  405217:	mov    ecx,0x1
  40521c:	mov    r8d,0x1
  405222:	call   QWORD PTR [rbx+0x50]
  405225:	test   eax,eax
  405227:	je     40522d <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405229:	xor    eax,eax
  40522b:	jmp    40525c <flatcc_builder_extend_offset_vector@@Base+0x8c>
  40522d:	mov    ecx,DWORD PTR [rbx+0x28]
  405230:	mov    rax,rcx
  405233:	add    rax,QWORD PTR [rbx+0x68]
  405237:	mov    QWORD PTR [rbx+0x18],rax
  40523b:	mov    edx,DWORD PTR [rbx+0x70]
  40523e:	sub    edx,ecx
  405240:	cmp    edx,0xfffffffc
  405243:	mov    ecx,0xfffffffc
  405248:	cmovb  ecx,edx
  40524b:	mov    DWORD PTR [rbx+0x24],ecx
  40524e:	mov    rcx,QWORD PTR [rbx+0x30]
  405252:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405259:	add    rax,r14
  40525c:	add    rsp,0x8
  405260:	pop    rbx
  405261:	pop    r14
  405263:	ret    
  405264:	lea    rdi,[rip+0x56c0]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  40526b:	lea    rsi,[rip+0x45f0]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405272:	lea    rcx,[rip+0x56cd]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  405279:	mov    edx,0x37c
  40527e:	call   403090 <__assert_fail@plt>
  405283:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40528d:	nop    DWORD PTR [rax]

0000000000405290 <flatcc_builder_offset_vector_push@@Base>:
  405290:	push   rbp
  405291:	push   r14
  405293:	push   rbx
  405294:	mov    rax,QWORD PTR [rdi+0x30]
  405298:	cmp    WORD PTR [rax+0xe],0x5
  40529d:	jne    405332 <flatcc_builder_offset_vector_push@@Base+0xa2>
  4052a3:	mov    ecx,DWORD PTR [rax+0x14]
  4052a6:	cmp    ecx,0x3fffffff
  4052ac:	je     4052f5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4052ae:	mov    r14d,esi
  4052b1:	mov    rbx,rdi
  4052b4:	inc    ecx
  4052b6:	mov    DWORD PTR [rax+0x14],ecx
  4052b9:	mov    ebp,DWORD PTR [rdi+0x20]
  4052bc:	lea    eax,[rbp+0x4]
  4052bf:	mov    DWORD PTR [rdi+0x20],eax
  4052c2:	cmp    eax,DWORD PTR [rdi+0x24]
  4052c5:	jae    4052d2 <flatcc_builder_offset_vector_push@@Base+0x42>
  4052c7:	mov    rax,QWORD PTR [rbx+0x18]
  4052cb:	add    rax,rbp
  4052ce:	jne    40532a <flatcc_builder_offset_vector_push@@Base+0x9a>
  4052d0:	jmp    4052f5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4052d2:	lea    eax,[rbp+0x5]
  4052d5:	lea    rsi,[rbx+0x68]
  4052d9:	mov    rdi,QWORD PTR [rbx+0x40]
  4052dd:	mov    edx,DWORD PTR [rbx+0x28]
  4052e0:	add    rdx,rax
  4052e3:	mov    ecx,0x1
  4052e8:	mov    r8d,0x1
  4052ee:	call   QWORD PTR [rbx+0x50]
  4052f1:	test   eax,eax
  4052f3:	je     4052f9 <flatcc_builder_offset_vector_push@@Base+0x69>
  4052f5:	xor    eax,eax
  4052f7:	jmp    40532d <flatcc_builder_offset_vector_push@@Base+0x9d>
  4052f9:	mov    ecx,DWORD PTR [rbx+0x28]
  4052fc:	mov    rax,rcx
  4052ff:	add    rax,QWORD PTR [rbx+0x68]
  405303:	mov    QWORD PTR [rbx+0x18],rax
  405307:	mov    edx,DWORD PTR [rbx+0x70]
  40530a:	sub    edx,ecx
  40530c:	cmp    edx,0xfffffffc
  40530f:	mov    ecx,0xfffffffc
  405314:	cmovb  ecx,edx
  405317:	mov    DWORD PTR [rbx+0x24],ecx
  40531a:	mov    rcx,QWORD PTR [rbx+0x30]
  40531e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405325:	add    rax,rbp
  405328:	je     4052f5 <flatcc_builder_offset_vector_push@@Base+0x65>
  40532a:	mov    DWORD PTR [rax],r14d
  40532d:	pop    rbx
  40532e:	pop    r14
  405330:	pop    rbp
  405331:	ret    
  405332:	lea    rdi,[rip+0x495f]        # 409c98 <flatcc_builder_padding_base@@Base+0x6c8>
  405339:	lea    rsi,[rip+0x4522]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405340:	lea    rcx,[rip+0x4984]        # 409ccb <flatcc_builder_padding_base@@Base+0x6fb>
  405347:	mov    edx,0x3a6
  40534c:	call   403090 <__assert_fail@plt>
  405351:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40535b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405360 <flatcc_builder_append_offset_vector@@Base>:
  405360:	push   r15
  405362:	push   r14
  405364:	push   r13
  405366:	push   r12
  405368:	push   rbx
  405369:	mov    rax,QWORD PTR [rdi+0x30]
  40536d:	cmp    WORD PTR [rax+0xe],0x5
  405372:	jne    40544e <flatcc_builder_append_offset_vector@@Base+0xee>
  405378:	mov    r15,rdx
  40537b:	mov    ecx,DWORD PTR [rax+0x14]
  40537e:	add    ecx,r15d
  405381:	jb     40542f <flatcc_builder_append_offset_vector@@Base+0xcf>
  405387:	cmp    ecx,0x40000000
  40538d:	jae    40542f <flatcc_builder_append_offset_vector@@Base+0xcf>
  405393:	mov    r14,rsi
  405396:	mov    rbx,rdi
  405399:	mov    DWORD PTR [rax+0x14],ecx
  40539c:	mov    r13d,DWORD PTR [rdi+0x20]
  4053a0:	lea    eax,[r13+r15*4+0x0]
  4053a5:	mov    DWORD PTR [rdi+0x20],eax
  4053a8:	cmp    eax,DWORD PTR [rdi+0x24]
  4053ab:	jae    4053b8 <flatcc_builder_append_offset_vector@@Base+0x58>
  4053ad:	mov    r12,QWORD PTR [rbx+0x18]
  4053b1:	add    r12,r13
  4053b4:	jne    405410 <flatcc_builder_append_offset_vector@@Base+0xb0>
  4053b6:	jmp    4053da <flatcc_builder_append_offset_vector@@Base+0x7a>
  4053b8:	inc    eax
  4053ba:	lea    rsi,[rbx+0x68]
  4053be:	mov    rdi,QWORD PTR [rbx+0x40]
  4053c2:	mov    edx,DWORD PTR [rbx+0x28]
  4053c5:	add    rdx,rax
  4053c8:	mov    ecx,0x1
  4053cd:	mov    r8d,0x1
  4053d3:	call   QWORD PTR [rbx+0x50]
  4053d6:	test   eax,eax
  4053d8:	je     4053df <flatcc_builder_append_offset_vector@@Base+0x7f>
  4053da:	xor    r12d,r12d
  4053dd:	jmp    405422 <flatcc_builder_append_offset_vector@@Base+0xc2>
  4053df:	mov    eax,DWORD PTR [rbx+0x28]
  4053e2:	mov    r12,rax
  4053e5:	add    r12,QWORD PTR [rbx+0x68]
  4053e9:	mov    QWORD PTR [rbx+0x18],r12
  4053ed:	mov    ecx,DWORD PTR [rbx+0x70]
  4053f0:	sub    ecx,eax
  4053f2:	cmp    ecx,0xfffffffc
  4053f5:	mov    eax,0xfffffffc
  4053fa:	cmovb  eax,ecx
  4053fd:	mov    DWORD PTR [rbx+0x24],eax
  405400:	mov    rax,QWORD PTR [rbx+0x30]
  405404:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40540b:	add    r12,r13
  40540e:	je     4053da <flatcc_builder_append_offset_vector@@Base+0x7a>
  405410:	shl    r15d,0x2
  405414:	mov    edx,r15d
  405417:	mov    rdi,r12
  40541a:	mov    rsi,r14
  40541d:	call   4030d0 <memcpy@plt>
  405422:	mov    rax,r12
  405425:	pop    rbx
  405426:	pop    r12
  405428:	pop    r13
  40542a:	pop    r14
  40542c:	pop    r15
  40542e:	ret    
  40542f:	lea    rdi,[rip+0x54f5]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  405436:	lea    rsi,[rip+0x4425]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40543d:	lea    rcx,[rip+0x5502]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  405444:	mov    edx,0x37c
  405449:	call   403090 <__assert_fail@plt>
  40544e:	lea    rdi,[rip+0x4843]        # 409c98 <flatcc_builder_padding_base@@Base+0x6c8>
  405455:	lea    rsi,[rip+0x4406]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40545c:	lea    rcx,[rip+0x48ca]        # 409d2d <flatcc_builder_padding_base@@Base+0x75d>
  405463:	mov    edx,0x3b4
  405468:	call   403090 <__assert_fail@plt>
  40546d:	nop    DWORD PTR [rax]

0000000000405470 <flatcc_builder_extend_string@@Base>:
  405470:	push   r14
  405472:	push   rbx
  405473:	push   rax
  405474:	mov    rax,QWORD PTR [rdi+0x30]
  405478:	cmp    WORD PTR [rax+0xe],0x6
  40547d:	jne    405509 <flatcc_builder_extend_string@@Base+0x99>
  405483:	mov    ecx,DWORD PTR [rax+0x14]
  405486:	add    ecx,esi
  405488:	jb     405528 <flatcc_builder_extend_string@@Base+0xb8>
  40548e:	mov    rbx,rdi
  405491:	mov    DWORD PTR [rax+0x14],ecx
  405494:	mov    r14d,DWORD PTR [rdi+0x20]
  405498:	add    esi,r14d
  40549b:	mov    DWORD PTR [rdi+0x20],esi
  40549e:	cmp    esi,DWORD PTR [rdi+0x24]
  4054a1:	jae    4054a9 <flatcc_builder_extend_string@@Base+0x39>
  4054a3:	mov    rax,QWORD PTR [rbx+0x18]
  4054a7:	jmp    4054fe <flatcc_builder_extend_string@@Base+0x8e>
  4054a9:	inc    esi
  4054ab:	lea    rax,[rbx+0x68]
  4054af:	mov    rdi,QWORD PTR [rbx+0x40]
  4054b3:	mov    edx,DWORD PTR [rbx+0x28]
  4054b6:	add    rdx,rsi
  4054b9:	mov    rsi,rax
  4054bc:	mov    ecx,0x1
  4054c1:	mov    r8d,0x1
  4054c7:	call   QWORD PTR [rbx+0x50]
  4054ca:	test   eax,eax
  4054cc:	je     4054d2 <flatcc_builder_extend_string@@Base+0x62>
  4054ce:	xor    eax,eax
  4054d0:	jmp    405501 <flatcc_builder_extend_string@@Base+0x91>
  4054d2:	mov    ecx,DWORD PTR [rbx+0x28]
  4054d5:	mov    rax,rcx
  4054d8:	add    rax,QWORD PTR [rbx+0x68]
  4054dc:	mov    QWORD PTR [rbx+0x18],rax
  4054e0:	mov    edx,DWORD PTR [rbx+0x70]
  4054e3:	sub    edx,ecx
  4054e5:	cmp    edx,0xfffffffc
  4054e8:	mov    ecx,0xfffffffc
  4054ed:	cmovb  ecx,edx
  4054f0:	mov    DWORD PTR [rbx+0x24],ecx
  4054f3:	mov    rcx,QWORD PTR [rbx+0x30]
  4054f7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4054fe:	add    rax,r14
  405501:	add    rsp,0x8
  405505:	pop    rbx
  405506:	pop    r14
  405508:	ret    
  405509:	lea    rdi,[rip+0x4891]        # 409da1 <flatcc_builder_padding_base@@Base+0x7d1>
  405510:	lea    rsi,[rip+0x434b]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405517:	lea    rcx,[rip+0x48af]        # 409dcd <flatcc_builder_padding_base@@Base+0x7fd>
  40551e:	mov    edx,0x3bd
  405523:	call   403090 <__assert_fail@plt>
  405528:	lea    rdi,[rip+0x53fc]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  40552f:	lea    rsi,[rip+0x432c]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405536:	lea    rcx,[rip+0x5409]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  40553d:	mov    edx,0x37c
  405542:	call   403090 <__assert_fail@plt>
  405547:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405550 <flatcc_builder_append_string@@Base>:
  405550:	push   r15
  405552:	push   r14
  405554:	push   r13
  405556:	push   r12
  405558:	push   rbx
  405559:	mov    rax,QWORD PTR [rdi+0x30]
  40555d:	cmp    WORD PTR [rax+0xe],0x6
  405562:	jne    40560e <flatcc_builder_append_string@@Base+0xbe>
  405568:	mov    r15,rdx
  40556b:	mov    ecx,DWORD PTR [rax+0x14]
  40556e:	add    ecx,r15d
  405571:	jb     40562d <flatcc_builder_append_string@@Base+0xdd>
  405577:	mov    r14,rsi
  40557a:	mov    rbx,rdi
  40557d:	mov    DWORD PTR [rax+0x14],ecx
  405580:	mov    r13d,DWORD PTR [rdi+0x20]
  405584:	lea    eax,[r15+r13*1]
  405588:	mov    DWORD PTR [rdi+0x20],eax
  40558b:	cmp    eax,DWORD PTR [rdi+0x24]
  40558e:	jae    40559b <flatcc_builder_append_string@@Base+0x4b>
  405590:	mov    r12,QWORD PTR [rbx+0x18]
  405594:	add    r12,r13
  405597:	jne    4055f3 <flatcc_builder_append_string@@Base+0xa3>
  405599:	jmp    4055bd <flatcc_builder_append_string@@Base+0x6d>
  40559b:	inc    eax
  40559d:	lea    rsi,[rbx+0x68]
  4055a1:	mov    rdi,QWORD PTR [rbx+0x40]
  4055a5:	mov    edx,DWORD PTR [rbx+0x28]
  4055a8:	add    rdx,rax
  4055ab:	mov    ecx,0x1
  4055b0:	mov    r8d,0x1
  4055b6:	call   QWORD PTR [rbx+0x50]
  4055b9:	test   eax,eax
  4055bb:	je     4055c2 <flatcc_builder_append_string@@Base+0x72>
  4055bd:	xor    r12d,r12d
  4055c0:	jmp    405601 <flatcc_builder_append_string@@Base+0xb1>
  4055c2:	mov    eax,DWORD PTR [rbx+0x28]
  4055c5:	mov    r12,rax
  4055c8:	add    r12,QWORD PTR [rbx+0x68]
  4055cc:	mov    QWORD PTR [rbx+0x18],r12
  4055d0:	mov    ecx,DWORD PTR [rbx+0x70]
  4055d3:	sub    ecx,eax
  4055d5:	cmp    ecx,0xfffffffc
  4055d8:	mov    eax,0xfffffffc
  4055dd:	cmovb  eax,ecx
  4055e0:	mov    DWORD PTR [rbx+0x24],eax
  4055e3:	mov    rax,QWORD PTR [rbx+0x30]
  4055e7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4055ee:	add    r12,r13
  4055f1:	je     4055bd <flatcc_builder_append_string@@Base+0x6d>
  4055f3:	mov    edx,r15d
  4055f6:	mov    rdi,r12
  4055f9:	mov    rsi,r14
  4055fc:	call   4030d0 <memcpy@plt>
  405601:	mov    rax,r12
  405604:	pop    rbx
  405605:	pop    r12
  405607:	pop    r13
  405609:	pop    r14
  40560b:	pop    r15
  40560d:	ret    
  40560e:	lea    rdi,[rip+0x478c]        # 409da1 <flatcc_builder_padding_base@@Base+0x7d1>
  405615:	lea    rsi,[rip+0x4246]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40561c:	lea    rcx,[rip+0x47e9]        # 409e0c <flatcc_builder_padding_base@@Base+0x83c>
  405623:	mov    edx,0x3c6
  405628:	call   403090 <__assert_fail@plt>
  40562d:	lea    rdi,[rip+0x52f7]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  405634:	lea    rsi,[rip+0x4227]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40563b:	lea    rcx,[rip+0x5304]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  405642:	mov    edx,0x37c
  405647:	call   403090 <__assert_fail@plt>
  40564c:	nop    DWORD PTR [rax+0x0]

0000000000405650 <flatcc_builder_append_string_str@@Base>:
  405650:	push   r14
  405652:	push   rbx
  405653:	push   rax
  405654:	mov    rbx,rsi
  405657:	mov    r14,rdi
  40565a:	mov    rdi,rsi
  40565d:	call   403060 <strlen@plt>
  405662:	mov    rdi,r14
  405665:	mov    rsi,rbx
  405668:	mov    rdx,rax
  40566b:	add    rsp,0x8
  40566f:	pop    rbx
  405670:	pop    r14
  405672:	jmp    405550 <flatcc_builder_append_string@@Base>
  405677:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405680 <flatcc_builder_append_string_strn@@Base>:
  405680:	push   r15
  405682:	push   r14
  405684:	push   rbx
  405685:	mov    rbx,rdx
  405688:	mov    r14,rsi
  40568b:	mov    r15,rdi
  40568e:	mov    rdi,rsi
  405691:	xor    esi,esi
  405693:	call   4030b0 <memchr@plt>
  405698:	mov    rcx,rax
  40569b:	sub    rcx,r14
  40569e:	test   rax,rax
  4056a1:	cmovne rbx,rcx
  4056a5:	mov    rdi,r15
  4056a8:	mov    rsi,r14
  4056ab:	mov    rdx,rbx
  4056ae:	pop    rbx
  4056af:	pop    r14
  4056b1:	pop    r15
  4056b3:	jmp    405550 <flatcc_builder_append_string@@Base>
  4056b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004056c0 <flatcc_builder_truncate_vector@@Base>:
  4056c0:	push   rax
  4056c1:	mov    rax,QWORD PTR [rdi+0x30]
  4056c5:	cmp    WORD PTR [rax+0xe],0x4
  4056ca:	jne    4056fe <flatcc_builder_truncate_vector@@Base+0x3e>
  4056cc:	mov    rdx,rsi
  4056cf:	mov    ecx,DWORD PTR [rax+0x14]
  4056d2:	cmp    rcx,rsi
  4056d5:	jb     40571d <flatcc_builder_truncate_vector@@Base+0x5d>
  4056d7:	sub    ecx,edx
  4056d9:	mov    DWORD PTR [rax+0x14],ecx
  4056dc:	mov    rax,QWORD PTR [rdi+0x30]
  4056e0:	imul   edx,DWORD PTR [rax+0x10]
  4056e4:	mov    eax,DWORD PTR [rdi+0x20]
  4056e7:	sub    eax,edx
  4056e9:	mov    DWORD PTR [rdi+0x20],eax
  4056ec:	add    rax,QWORD PTR [rdi+0x18]
  4056f0:	mov    rdi,rax
  4056f3:	xor    esi,esi
  4056f5:	call   4030a0 <memset@plt>
  4056fa:	xor    eax,eax
  4056fc:	pop    rcx
  4056fd:	ret    
  4056fe:	lea    rdi,[rip+0x449a]        # 409b9f <flatcc_builder_padding_base@@Base+0x5cf>
  405705:	lea    rsi,[rip+0x4156]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40570c:	lea    rcx,[rip+0x4746]        # 409e59 <flatcc_builder_padding_base@@Base+0x889>
  405713:	mov    edx,0x3d9
  405718:	call   403090 <__assert_fail@plt>
  40571d:	lea    rdi,[rip+0x4774]        # 409e98 <flatcc_builder_padding_base@@Base+0x8c8>
  405724:	lea    rsi,[rip+0x4137]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40572b:	lea    rcx,[rip+0x4727]        # 409e59 <flatcc_builder_padding_base@@Base+0x889>
  405732:	mov    edx,0x3da
  405737:	call   403090 <__assert_fail@plt>
  40573c:	nop    DWORD PTR [rax+0x0]

0000000000405740 <flatcc_builder_truncate_offset_vector@@Base>:
  405740:	push   rax
  405741:	mov    rax,QWORD PTR [rdi+0x30]
  405745:	cmp    WORD PTR [rax+0xe],0x5
  40574a:	jne    40577b <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  40574c:	mov    rdx,rsi
  40574f:	mov    ecx,DWORD PTR [rax+0x14]
  405752:	sub    ecx,edx
  405754:	jb     40579a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  405756:	mov    DWORD PTR [rax+0x14],ecx
  405759:	mov    rax,QWORD PTR [rdi+0x30]
  40575d:	imul   edx,DWORD PTR [rax+0x10]
  405761:	mov    eax,DWORD PTR [rdi+0x20]
  405764:	sub    eax,edx
  405766:	mov    DWORD PTR [rdi+0x20],eax
  405769:	add    rax,QWORD PTR [rdi+0x18]
  40576d:	mov    rdi,rax
  405770:	xor    esi,esi
  405772:	call   4030a0 <memset@plt>
  405777:	xor    eax,eax
  405779:	pop    rcx
  40577a:	ret    
  40577b:	lea    rdi,[rip+0x4516]        # 409c98 <flatcc_builder_padding_base@@Base+0x6c8>
  405782:	lea    rsi,[rip+0x40d9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405789:	lea    rcx,[rip+0x472c]        # 409ebc <flatcc_builder_padding_base@@Base+0x8ec>
  405790:	mov    edx,0x3e2
  405795:	call   403090 <__assert_fail@plt>
  40579a:	lea    rdi,[rip+0x4761]        # 409f02 <flatcc_builder_padding_base@@Base+0x932>
  4057a1:	lea    rsi,[rip+0x40ba]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4057a8:	lea    rcx,[rip+0x470d]        # 409ebc <flatcc_builder_padding_base@@Base+0x8ec>
  4057af:	mov    edx,0x3e3
  4057b4:	call   403090 <__assert_fail@plt>
  4057b9:	nop    DWORD PTR [rax+0x0]

00000000004057c0 <flatcc_builder_truncate_string@@Base>:
  4057c0:	push   rax
  4057c1:	mov    rax,QWORD PTR [rdi+0x30]
  4057c5:	cmp    WORD PTR [rax+0xe],0x6
  4057ca:	jne    4057f5 <flatcc_builder_truncate_string@@Base+0x35>
  4057cc:	mov    ecx,DWORD PTR [rax+0x14]
  4057cf:	cmp    rcx,rsi
  4057d2:	jb     405814 <flatcc_builder_truncate_string@@Base+0x54>
  4057d4:	sub    ecx,esi
  4057d6:	mov    DWORD PTR [rax+0x14],ecx
  4057d9:	mov    eax,DWORD PTR [rdi+0x20]
  4057dc:	sub    eax,esi
  4057de:	mov    DWORD PTR [rdi+0x20],eax
  4057e1:	add    rax,QWORD PTR [rdi+0x18]
  4057e5:	mov    edx,esi
  4057e7:	mov    rdi,rax
  4057ea:	xor    esi,esi
  4057ec:	call   4030a0 <memset@plt>
  4057f1:	xor    eax,eax
  4057f3:	pop    rcx
  4057f4:	ret    
  4057f5:	lea    rdi,[rip+0x45a5]        # 409da1 <flatcc_builder_padding_base@@Base+0x7d1>
  4057fc:	lea    rsi,[rip+0x405f]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405803:	lea    rcx,[rip+0x4733]        # 409f3d <flatcc_builder_padding_base@@Base+0x96d>
  40580a:	mov    edx,0x3eb
  40580f:	call   403090 <__assert_fail@plt>
  405814:	lea    rdi,[rip+0x4761]        # 409f7c <flatcc_builder_padding_base@@Base+0x9ac>
  40581b:	lea    rsi,[rip+0x4040]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405822:	lea    rcx,[rip+0x4714]        # 409f3d <flatcc_builder_padding_base@@Base+0x96d>
  405829:	mov    edx,0x3ec
  40582e:	call   403090 <__assert_fail@plt>
  405833:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40583d:	nop    DWORD PTR [rax]

0000000000405840 <flatcc_builder_start_vector@@Base>:
  405840:	push   r15
  405842:	push   r14
  405844:	push   rbx
  405845:	mov    r14,rcx
  405848:	mov    r15,rsi
  40584b:	mov    rbx,rdi
  40584e:	cmp    dx,0x4
  405852:	mov    esi,0x4
  405857:	cmova  esi,edx
  40585a:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  40585f:	mov    ecx,eax
  405861:	mov    eax,0xffffffff
  405866:	test   ecx,ecx
  405868:	jne    4058b6 <flatcc_builder_start_vector@@Base+0x76>
  40586a:	mov    rax,QWORD PTR [rbx+0x30]
  40586e:	mov    DWORD PTR [rax+0x10],r15d
  405872:	mov    rax,QWORD PTR [rbx+0x30]
  405876:	mov    DWORD PTR [rax+0x14],0x0
  40587d:	mov    rax,QWORD PTR [rbx+0x30]
  405881:	mov    DWORD PTR [rax+0x18],r14d
  405885:	mov    rax,QWORD PTR [rbx+0x30]
  405889:	mov    WORD PTR [rax+0xe],0x4
  40588f:	mov    ecx,DWORD PTR [rbx+0x28]
  405892:	mov    edx,DWORD PTR [rbx+0x70]
  405895:	sub    edx,ecx
  405897:	add    rcx,QWORD PTR [rbx+0x68]
  40589b:	mov    QWORD PTR [rbx+0x18],rcx
  40589f:	cmp    edx,0xfffffffc
  4058a2:	mov    ecx,0xfffffffc
  4058a7:	cmovb  ecx,edx
  4058aa:	mov    DWORD PTR [rbx+0x24],ecx
  4058ad:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4058b4:	xor    eax,eax
  4058b6:	pop    rbx
  4058b7:	pop    r14
  4058b9:	pop    r15
  4058bb:	ret    
  4058bc:	nop    DWORD PTR [rax+0x0]

00000000004058c0 <flatcc_builder_start_offset_vector@@Base>:
  4058c0:	push   rbx
  4058c1:	mov    rbx,rdi
  4058c4:	mov    esi,0x4
  4058c9:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  4058ce:	mov    ecx,eax
  4058d0:	mov    eax,0xffffffff
  4058d5:	test   ecx,ecx
  4058d7:	je     4058db <flatcc_builder_start_offset_vector@@Base+0x1b>
  4058d9:	pop    rbx
  4058da:	ret    
  4058db:	mov    rax,QWORD PTR [rbx+0x30]
  4058df:	mov    DWORD PTR [rax+0x10],0x4
  4058e6:	mov    rax,QWORD PTR [rbx+0x30]
  4058ea:	mov    DWORD PTR [rax+0x14],0x0
  4058f1:	mov    rax,QWORD PTR [rbx+0x30]
  4058f5:	mov    WORD PTR [rax+0xe],0x5
  4058fb:	mov    ecx,DWORD PTR [rbx+0x28]
  4058fe:	mov    edx,DWORD PTR [rbx+0x70]
  405901:	sub    edx,ecx
  405903:	add    rcx,QWORD PTR [rbx+0x68]
  405907:	mov    QWORD PTR [rbx+0x18],rcx
  40590b:	cmp    edx,0xfffffffc
  40590e:	mov    ecx,0xfffffffc
  405913:	cmovb  ecx,edx
  405916:	mov    DWORD PTR [rbx+0x24],ecx
  405919:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405920:	xor    eax,eax
  405922:	pop    rbx
  405923:	ret    
  405924:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40592e:	xchg   ax,ax

0000000000405930 <flatcc_builder_create_offset_vector@@Base>:
  405930:	push   r15
  405932:	push   r14
  405934:	push   r12
  405936:	push   rbx
  405937:	push   rax
  405938:	mov    r14,rdx
  40593b:	mov    r15,rsi
  40593e:	mov    rbx,rdi
  405941:	mov    esi,0x4
  405946:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  40594b:	test   eax,eax
  40594d:	je     40595d <flatcc_builder_create_offset_vector@@Base+0x2d>
  40594f:	xor    eax,eax
  405951:	add    rsp,0x8
  405955:	pop    rbx
  405956:	pop    r12
  405958:	pop    r14
  40595a:	pop    r15
  40595c:	ret    
  40595d:	mov    rax,QWORD PTR [rbx+0x30]
  405961:	mov    DWORD PTR [rax+0x10],0x4
  405968:	mov    rax,QWORD PTR [rbx+0x30]
  40596c:	mov    DWORD PTR [rax+0x14],0x0
  405973:	mov    rax,QWORD PTR [rbx+0x30]
  405977:	mov    WORD PTR [rax+0xe],0x5
  40597d:	mov    ecx,DWORD PTR [rbx+0x28]
  405980:	mov    edx,DWORD PTR [rbx+0x70]
  405983:	sub    edx,ecx
  405985:	add    rcx,QWORD PTR [rbx+0x68]
  405989:	mov    QWORD PTR [rbx+0x18],rcx
  40598d:	cmp    edx,0xfffffffc
  405990:	mov    ecx,0xfffffffc
  405995:	cmovb  ecx,edx
  405998:	mov    DWORD PTR [rbx+0x24],ecx
  40599b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4059a2:	mov    ecx,DWORD PTR [rax+0x14]
  4059a5:	add    ecx,r14d
  4059a8:	jb     405a58 <flatcc_builder_create_offset_vector@@Base+0x128>
  4059ae:	cmp    ecx,0x40000000
  4059b4:	jae    405a58 <flatcc_builder_create_offset_vector@@Base+0x128>
  4059ba:	mov    DWORD PTR [rax+0x14],ecx
  4059bd:	mov    r12d,DWORD PTR [rbx+0x20]
  4059c1:	lea    eax,[r12+r14*4]
  4059c5:	mov    DWORD PTR [rbx+0x20],eax
  4059c8:	cmp    eax,DWORD PTR [rbx+0x24]
  4059cb:	jae    4059db <flatcc_builder_create_offset_vector@@Base+0xab>
  4059cd:	mov    rdi,QWORD PTR [rbx+0x18]
  4059d1:	add    rdi,r12
  4059d4:	jne    405a36 <flatcc_builder_create_offset_vector@@Base+0x106>
  4059d6:	jmp    40594f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4059db:	inc    eax
  4059dd:	lea    rsi,[rbx+0x68]
  4059e1:	mov    rdi,QWORD PTR [rbx+0x40]
  4059e5:	mov    edx,DWORD PTR [rbx+0x28]
  4059e8:	add    rdx,rax
  4059eb:	mov    ecx,0x1
  4059f0:	mov    r8d,0x1
  4059f6:	call   QWORD PTR [rbx+0x50]
  4059f9:	test   eax,eax
  4059fb:	jne    40594f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405a01:	mov    eax,DWORD PTR [rbx+0x28]
  405a04:	mov    rdi,rax
  405a07:	add    rdi,QWORD PTR [rbx+0x68]
  405a0b:	mov    QWORD PTR [rbx+0x18],rdi
  405a0f:	mov    ecx,DWORD PTR [rbx+0x70]
  405a12:	sub    ecx,eax
  405a14:	cmp    ecx,0xfffffffc
  405a17:	mov    eax,0xfffffffc
  405a1c:	cmovb  eax,ecx
  405a1f:	mov    DWORD PTR [rbx+0x24],eax
  405a22:	mov    rax,QWORD PTR [rbx+0x30]
  405a26:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a2d:	add    rdi,r12
  405a30:	je     40594f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405a36:	shl    r14,0x2
  405a3a:	mov    rsi,r15
  405a3d:	mov    rdx,r14
  405a40:	call   4030d0 <memcpy@plt>
  405a45:	mov    rdi,rbx
  405a48:	add    rsp,0x8
  405a4c:	pop    rbx
  405a4d:	pop    r12
  405a4f:	pop    r14
  405a51:	pop    r15
  405a53:	jmp    405a80 <flatcc_builder_end_offset_vector@@Base>
  405a58:	lea    rdi,[rip+0x4ecc]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  405a5f:	lea    rsi,[rip+0x3dfc]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405a66:	lea    rcx,[rip+0x4ed9]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  405a6d:	mov    edx,0x37c
  405a72:	call   403090 <__assert_fail@plt>
  405a77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a80 <flatcc_builder_end_offset_vector@@Base>:
  405a80:	push   rbp
  405a81:	push   rbx
  405a82:	push   rax
  405a83:	mov    rax,QWORD PTR [rdi+0x30]
  405a87:	cmp    WORD PTR [rax+0xe],0x5
  405a8c:	jne    405b1a <flatcc_builder_end_offset_vector@@Base+0x9a>
  405a92:	mov    rbx,rdi
  405a95:	mov    rsi,QWORD PTR [rdi+0x18]
  405a99:	mov    edx,DWORD PTR [rax+0x14]
  405a9c:	xor    ecx,ecx
  405a9e:	call   406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405aa3:	mov    ebp,eax
  405aa5:	test   eax,eax
  405aa7:	je     405b11 <flatcc_builder_end_offset_vector@@Base+0x91>
  405aa9:	mov    rdi,QWORD PTR [rbx+0x18]
  405aad:	mov    edx,DWORD PTR [rbx+0x20]
  405ab0:	xor    esi,esi
  405ab2:	call   4030a0 <memset@plt>
  405ab7:	mov    rax,QWORD PTR [rbx+0x30]
  405abb:	mov    ecx,DWORD PTR [rax+0x8]
  405abe:	mov    DWORD PTR [rbx+0x20],ecx
  405ac1:	mov    ecx,DWORD PTR [rax]
  405ac3:	mov    DWORD PTR [rbx+0x28],ecx
  405ac6:	mov    edx,DWORD PTR [rax+0x4]
  405ac9:	mov    rsi,rcx
  405acc:	add    rsi,QWORD PTR [rbx+0x68]
  405ad0:	mov    QWORD PTR [rbx+0x18],rsi
  405ad4:	mov    esi,DWORD PTR [rbx+0x70]
  405ad7:	sub    esi,ecx
  405ad9:	cmp    esi,edx
  405adb:	cmova  esi,edx
  405ade:	mov    DWORD PTR [rbx+0x24],esi
  405ae1:	movzx  ecx,WORD PTR [rbx+0xea]
  405ae8:	cmp    WORD PTR [rbx+0xe8],cx
  405aef:	jae    405af8 <flatcc_builder_end_offset_vector@@Base+0x78>
  405af1:	mov    WORD PTR [rbx+0xe8],cx
  405af8:	movzx  ecx,WORD PTR [rax+0xc]
  405afc:	mov    WORD PTR [rbx+0xea],cx
  405b03:	add    rax,0xffffffffffffffdc
  405b07:	mov    QWORD PTR [rbx+0x30],rax
  405b0b:	dec    DWORD PTR [rbx+0x104]
  405b11:	mov    eax,ebp
  405b13:	add    rsp,0x8
  405b17:	pop    rbx
  405b18:	pop    rbp
  405b19:	ret    
  405b1a:	lea    rdi,[rip+0x4177]        # 409c98 <flatcc_builder_padding_base@@Base+0x6c8>
  405b21:	lea    rsi,[rip+0x3d3a]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405b28:	lea    rcx,[rip+0x4798]        # 40a2c7 <flatcc_builder_padding_base@@Base+0xcf7>
  405b2f:	mov    edx,0x5c8
  405b34:	call   403090 <__assert_fail@plt>
  405b39:	nop    DWORD PTR [rax+0x0]

0000000000405b40 <flatcc_builder_start_string@@Base>:
  405b40:	push   rbx
  405b41:	mov    rbx,rdi
  405b44:	mov    esi,0x1
  405b49:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  405b4e:	mov    ecx,eax
  405b50:	mov    eax,0xffffffff
  405b55:	test   ecx,ecx
  405b57:	je     405b5b <flatcc_builder_start_string@@Base+0x1b>
  405b59:	pop    rbx
  405b5a:	ret    
  405b5b:	mov    rax,QWORD PTR [rbx+0x30]
  405b5f:	mov    DWORD PTR [rax+0x10],0x1
  405b66:	mov    rax,QWORD PTR [rbx+0x30]
  405b6a:	mov    DWORD PTR [rax+0x14],0x0
  405b71:	mov    rax,QWORD PTR [rbx+0x30]
  405b75:	mov    WORD PTR [rax+0xe],0x6
  405b7b:	mov    ecx,DWORD PTR [rbx+0x28]
  405b7e:	mov    edx,DWORD PTR [rbx+0x70]
  405b81:	sub    edx,ecx
  405b83:	add    rcx,QWORD PTR [rbx+0x68]
  405b87:	mov    QWORD PTR [rbx+0x18],rcx
  405b8b:	cmp    edx,0xfffffffc
  405b8e:	mov    ecx,0xfffffffc
  405b93:	cmovb  ecx,edx
  405b96:	mov    DWORD PTR [rbx+0x24],ecx
  405b99:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405ba0:	xor    eax,eax
  405ba2:	pop    rbx
  405ba3:	ret    
  405ba4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405bae:	xchg   ax,ax

0000000000405bb0 <flatcc_builder_reserve_table@@Base>:
  405bb0:	push   r15
  405bb2:	push   r14
  405bb4:	push   rbx
  405bb5:	test   esi,esi
  405bb7:	js     405c64 <flatcc_builder_reserve_table@@Base+0xb4>
  405bbd:	mov    r14d,esi
  405bc0:	mov    r15,rdi
  405bc3:	mov    rax,QWORD PTR [rdi+0x30]
  405bc7:	movzx  ebx,WORD PTR [rax+0x1c]
  405bcb:	add    ebx,ebx
  405bcd:	add    ebx,DWORD PTR [rax+0x10]
  405bd0:	lea    edx,[r14+r14*1]
  405bd4:	add    edx,0x4
  405bd7:	add    rdx,rbx
  405bda:	cmp    rdx,QWORD PTR [rdi+0x60]
  405bde:	jbe    405bfc <flatcc_builder_reserve_table@@Base+0x4c>
  405be0:	lea    rsi,[r15+0x58]
  405be4:	mov    rdi,QWORD PTR [r15+0x40]
  405be8:	mov    ecx,0x1
  405bed:	xor    r8d,r8d
  405bf0:	call   QWORD PTR [r15+0x50]
  405bf4:	test   eax,eax
  405bf6:	jne    405c83 <flatcc_builder_reserve_table@@Base+0xd3>
  405bfc:	add    rbx,QWORD PTR [r15+0x58]
  405c00:	mov    QWORD PTR [r15+0x8],rbx
  405c04:	je     405c59 <flatcc_builder_reserve_table@@Base+0xa9>
  405c06:	add    r14d,r14d
  405c09:	add    rbx,0x4
  405c0d:	mov    QWORD PTR [r15+0x8],rbx
  405c11:	mov    rax,QWORD PTR [r15+0x30]
  405c15:	mov    ebx,DWORD PTR [rax+0x14]
  405c18:	or     r14d,0x1
  405c1c:	add    r14,rbx
  405c1f:	cmp    r14,QWORD PTR [r15+0x90]
  405c26:	jbe    405c46 <flatcc_builder_reserve_table@@Base+0x96>
  405c28:	lea    rsi,[r15+0x88]
  405c2f:	mov    rdi,QWORD PTR [r15+0x40]
  405c33:	mov    rdx,r14
  405c36:	xor    ecx,ecx
  405c38:	mov    r8d,0x3
  405c3e:	call   QWORD PTR [r15+0x50]
  405c42:	test   eax,eax
  405c44:	jne    405c83 <flatcc_builder_reserve_table@@Base+0xd3>
  405c46:	xor    eax,eax
  405c48:	add    rbx,QWORD PTR [r15+0x88]
  405c4f:	mov    QWORD PTR [r15],rbx
  405c52:	sete   al
  405c55:	neg    eax
  405c57:	jmp    405c5e <flatcc_builder_reserve_table@@Base+0xae>
  405c59:	mov    eax,0xffffffff
  405c5e:	pop    rbx
  405c5f:	pop    r14
  405c61:	pop    r15
  405c63:	ret    
  405c64:	lea    rdi,[rip+0x4374]        # 409fdf <flatcc_builder_padding_base@@Base+0xa0f>
  405c6b:	lea    rsi,[rip+0x3bf0]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405c72:	lea    rcx,[rip+0x4325]        # 409f9e <flatcc_builder_padding_base@@Base+0x9ce>
  405c79:	mov    edx,0x429
  405c7e:	call   403090 <__assert_fail@plt>
  405c83:	lea    rdi,[rip+0x4d98]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  405c8a:	lea    rsi,[rip+0x3bd1]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405c91:	lea    rcx,[rip+0x4bc4]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  405c98:	mov    edx,0x134
  405c9d:	call   403090 <__assert_fail@plt>
  405ca2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405cac:	nop    DWORD PTR [rax+0x0]

0000000000405cb0 <flatcc_builder_start_table@@Base>:
  405cb0:	push   rbp
  405cb1:	push   r15
  405cb3:	push   r14
  405cb5:	push   rbx
  405cb6:	push   rax
  405cb7:	mov    r15d,esi
  405cba:	mov    rbx,rdi
  405cbd:	mov    esi,0x4
  405cc2:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  405cc7:	mov    r14d,0xffffffff
  405ccd:	test   eax,eax
  405ccf:	je     405cdf <flatcc_builder_start_table@@Base+0x2f>
  405cd1:	mov    eax,r14d
  405cd4:	add    rsp,0x8
  405cd8:	pop    rbx
  405cd9:	pop    r14
  405cdb:	pop    r15
  405cdd:	pop    rbp
  405cde:	ret    
  405cdf:	mov    eax,DWORD PTR [rbx+0x8]
  405ce2:	sub    eax,DWORD PTR [rbx+0x58]
  405ce5:	mov    rcx,QWORD PTR [rbx+0x30]
  405ce9:	mov    DWORD PTR [rcx+0x10],eax
  405cec:	mov    eax,DWORD PTR [rbx]
  405cee:	sub    eax,DWORD PTR [rbx+0x88]
  405cf4:	mov    rcx,QWORD PTR [rbx+0x30]
  405cf8:	mov    DWORD PTR [rcx+0x14],eax
  405cfb:	mov    eax,DWORD PTR [rbx+0x14]
  405cfe:	mov    rcx,QWORD PTR [rbx+0x30]
  405d02:	mov    DWORD PTR [rcx+0x18],eax
  405d05:	movzx  eax,WORD PTR [rbx+0x10]
  405d09:	mov    rcx,QWORD PTR [rbx+0x30]
  405d0d:	mov    WORD PTR [rcx+0x1c],ax
  405d11:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405d18:	mov    WORD PTR [rbx+0x10],0x0
  405d1e:	mov    rax,QWORD PTR [rbx+0x30]
  405d22:	mov    WORD PTR [rax+0xe],0x3
  405d28:	movzx  ebp,WORD PTR [rax+0x1c]
  405d2c:	add    ebp,ebp
  405d2e:	add    ebp,DWORD PTR [rax+0x10]
  405d31:	lea    edx,[r15+r15*1]
  405d35:	add    edx,0x4
  405d38:	add    rdx,rbp
  405d3b:	cmp    rdx,QWORD PTR [rbx+0x60]
  405d3f:	jbe    405d5c <flatcc_builder_start_table@@Base+0xac>
  405d41:	lea    rsi,[rbx+0x58]
  405d45:	mov    rdi,QWORD PTR [rbx+0x40]
  405d49:	mov    ecx,0x1
  405d4e:	xor    r8d,r8d
  405d51:	call   QWORD PTR [rbx+0x50]
  405d54:	test   eax,eax
  405d56:	jne    405df0 <flatcc_builder_start_table@@Base+0x140>
  405d5c:	add    rbp,QWORD PTR [rbx+0x58]
  405d60:	mov    QWORD PTR [rbx+0x8],rbp
  405d64:	je     405cd1 <flatcc_builder_start_table@@Base+0x21>
  405d6a:	add    r15d,r15d
  405d6d:	add    rbp,0x4
  405d71:	mov    QWORD PTR [rbx+0x8],rbp
  405d75:	mov    rax,QWORD PTR [rbx+0x30]
  405d79:	mov    ebp,DWORD PTR [rax+0x14]
  405d7c:	or     r15d,0x1
  405d80:	add    r15,rbp
  405d83:	cmp    r15,QWORD PTR [rbx+0x90]
  405d8a:	jbe    405da9 <flatcc_builder_start_table@@Base+0xf9>
  405d8c:	lea    rsi,[rbx+0x88]
  405d93:	mov    rdi,QWORD PTR [rbx+0x40]
  405d97:	mov    rdx,r15
  405d9a:	xor    ecx,ecx
  405d9c:	mov    r8d,0x3
  405da2:	call   QWORD PTR [rbx+0x50]
  405da5:	test   eax,eax
  405da7:	jne    405df0 <flatcc_builder_start_table@@Base+0x140>
  405da9:	add    rbp,QWORD PTR [rbx+0x88]
  405db0:	mov    QWORD PTR [rbx],rbp
  405db3:	je     405cd1 <flatcc_builder_start_table@@Base+0x21>
  405db9:	mov    eax,DWORD PTR [rbx+0x28]
  405dbc:	mov    rcx,rax
  405dbf:	add    rcx,QWORD PTR [rbx+0x68]
  405dc3:	mov    QWORD PTR [rbx+0x18],rcx
  405dc7:	mov    ecx,DWORD PTR [rbx+0x70]
  405dca:	sub    ecx,eax
  405dcc:	cmp    ecx,0xfffc
  405dd2:	mov    eax,0xfffc
  405dd7:	cmovb  eax,ecx
  405dda:	mov    DWORD PTR [rbx+0x24],eax
  405ddd:	mov    rax,QWORD PTR [rbx+0x30]
  405de1:	mov    DWORD PTR [rax+0x4],0xfffc
  405de8:	xor    r14d,r14d
  405deb:	jmp    405cd1 <flatcc_builder_start_table@@Base+0x21>
  405df0:	lea    rdi,[rip+0x4c2b]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  405df7:	lea    rsi,[rip+0x3a64]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405dfe:	lea    rcx,[rip+0x4a57]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  405e05:	mov    edx,0x134
  405e0a:	call   403090 <__assert_fail@plt>
  405e0f:	nop

0000000000405e10 <flatcc_builder_create_vtable@@Base>:
  405e10:	push   r14
  405e12:	push   rbx
  405e13:	sub    rsp,0x98
  405e1a:	mov    r14,rdi
  405e1d:	mov    QWORD PTR [rsp+0x8],0x0
  405e26:	mov    DWORD PTR [rsp+0x10],0x0
  405e2e:	test   dx,dx
  405e31:	je     405e98 <flatcc_builder_create_vtable@@Base+0x88>
  405e33:	movzx  r8d,dx
  405e37:	mov    QWORD PTR [rsp+0x8],r8
  405e3c:	mov    QWORD PTR [rsp+0x18],rsi
  405e41:	mov    QWORD PTR [rsp+0x20],r8
  405e46:	mov    DWORD PTR [rsp+0x10],0x1
  405e4e:	mov    edx,0x1
  405e53:	cmp    DWORD PTR [r14+0x100],0x0
  405e5b:	jne    405ea7 <flatcc_builder_create_vtable@@Base+0x97>
  405e5d:	cmp    DWORD PTR [r14+0x124],0x0
  405e65:	jne    405ea7 <flatcc_builder_create_vtable@@Base+0x97>
  405e67:	mov    ebx,DWORD PTR [r14+0xf4]
  405e6e:	lea    eax,[r8+rbx*1]
  405e72:	mov    DWORD PTR [r14+0xf4],eax
  405e79:	mov    rdi,QWORD PTR [r14+0x38]
  405e7d:	lea    rsi,[rsp+0x18]
  405e82:	mov    ecx,ebx
  405e84:	call   QWORD PTR [r14+0x48]
  405e88:	test   eax,eax
  405e8a:	jne    405f3b <flatcc_builder_create_vtable@@Base+0x12b>
  405e90:	xor    eax,eax
  405e92:	inc    ebx
  405e94:	jne    405eec <flatcc_builder_create_vtable@@Base+0xdc>
  405e96:	jmp    405ef2 <flatcc_builder_create_vtable@@Base+0xe2>
  405e98:	xor    edx,edx
  405e9a:	xor    r8d,r8d
  405e9d:	cmp    DWORD PTR [r14+0x100],0x0
  405ea5:	je     405e5d <flatcc_builder_create_vtable@@Base+0x4d>
  405ea7:	cmp    r8,0x11
  405eab:	setb   al
  405eae:	lea    rcx,[r8-0x10]
  405eb2:	shr    rcx,0x20
  405eb6:	sete   cl
  405eb9:	test   r8d,r8d
  405ebc:	je     405efd <flatcc_builder_create_vtable@@Base+0xed>
  405ebe:	or     al,cl
  405ec0:	je     405efd <flatcc_builder_create_vtable@@Base+0xed>
  405ec2:	mov    ebx,DWORD PTR [r14+0xf0]
  405ec9:	sub    ebx,r8d
  405ecc:	mov    rdi,QWORD PTR [r14+0x38]
  405ed0:	lea    rsi,[rsp+0x18]
  405ed5:	mov    ecx,ebx
  405ed7:	call   QWORD PTR [r14+0x48]
  405edb:	test   eax,eax
  405edd:	jne    405f1c <flatcc_builder_create_vtable@@Base+0x10c>
  405edf:	mov    DWORD PTR [r14+0xf0],ebx
  405ee6:	test   ebx,ebx
  405ee8:	je     405ef0 <flatcc_builder_create_vtable@@Base+0xe0>
  405eea:	inc    ebx
  405eec:	mov    eax,ebx
  405eee:	jmp    405ef2 <flatcc_builder_create_vtable@@Base+0xe2>
  405ef0:	xor    eax,eax
  405ef2:	add    rsp,0x98
  405ef9:	pop    rbx
  405efa:	pop    r14
  405efc:	ret    
  405efd:	lea    rdi,[rip+0x4b1e]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  405f04:	lea    rsi,[rip+0x3957]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405f0b:	lea    rcx,[rip+0x49cf]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  405f12:	mov    edx,0x287
  405f17:	call   403090 <__assert_fail@plt>
  405f1c:	lea    rdi,[rip+0x4aff]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  405f23:	lea    rsi,[rip+0x3938]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405f2a:	lea    rcx,[rip+0x49b0]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  405f31:	mov    edx,0x28b
  405f36:	call   403090 <__assert_fail@plt>
  405f3b:	lea    rdi,[rip+0x4ae0]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  405f42:	lea    rsi,[rip+0x3919]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  405f49:	lea    rcx,[rip+0x4a4d]        # 40a99d <flatcc_builder_padding_base@@Base+0x13cd>
  405f50:	mov    edx,0x2a5
  405f55:	call   403090 <__assert_fail@plt>
  405f5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f60 <flatcc_builder_create_cached_vtable@@Base>:
  405f60:	push   rbp
  405f61:	push   r15
  405f63:	push   r14
  405f65:	push   r13
  405f67:	push   r12
  405f69:	push   rbx
  405f6a:	sub    rsp,0x28
  405f6e:	mov    r15d,ecx
  405f71:	mov    r12d,edx
  405f74:	mov    QWORD PTR [rsp+0x18],rsi
  405f79:	mov    r14,rdi
  405f7c:	mov    rax,QWORD PTR [rdi+0xd8]
  405f83:	test   rax,rax
  405f86:	je     406056 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  405f8c:	neg    al
  405f8e:	shrx   r13d,r15d,eax
  405f93:	shl    r13,0x2
  405f97:	add    r13,QWORD PTR [r14+0xa8]
  405f9e:	je     40612a <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  405fa4:	mov    ebx,DWORD PTR [r13+0x0]
  405fa8:	movzx  eax,r12w
  405fac:	mov    QWORD PTR [rsp],rax
  405fb0:	test   ebx,ebx
  405fb2:	je     406131 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  405fb8:	mov    rbp,QWORD PTR [r14+0x78]
  405fbc:	mov    QWORD PTR [rsp+0x10],r14
  405fc1:	mov    r15,QWORD PTR [r14+0xb8]
  405fc8:	xor    eax,eax
  405fca:	mov    QWORD PTR [rsp+0x20],rax
  405fcf:	mov    QWORD PTR [rsp+0x8],r13
  405fd4:	jmp    405ff3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  405fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405fe0:	mov    ebx,DWORD PTR [r14+0xc]
  405fe4:	add    r14,0xc
  405fe8:	mov    r13,r14
  405feb:	test   ebx,ebx
  405fed:	je     406119 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  405ff3:	mov    eax,ebx
  405ff5:	lea    r14,[r15+rax*1]
  405ff9:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  405ffe:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  406004:	jne    405fe0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  406006:	add    rsi,rbp
  406009:	mov    rdi,QWORD PTR [rsp+0x18]
  40600e:	mov    rdx,QWORD PTR [rsp]
  406012:	call   4030f0 <bcmp@plt>
  406017:	test   eax,eax
  406019:	jne    405fe0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  40601b:	mov    eax,DWORD PTR [r14+0x4]
  40601f:	mov    rcx,QWORD PTR [rsp+0x10]
  406024:	cmp    eax,DWORD PTR [rcx+0x100]
  40602a:	je     40629a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  406030:	lea    r13,[r14+0xc]
  406034:	mov    ebx,DWORD PTR [r14+0xc]
  406038:	mov    rax,r14
  40603b:	mov    QWORD PTR [rsp+0x20],r14
  406040:	test   ebx,ebx
  406042:	jne    405ff3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  406044:	mov    r15,r14
  406047:	mov    r14,QWORD PTR [rsp+0x10]
  40604c:	mov    r13,QWORD PTR [rsp+0x8]
  406051:	jmp    406134 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  406056:	cmp    DWORD PTR [r14+0xe4],0x0
  40605e:	jne    4062d8 <flatcc_builder_create_cached_vtable@@Base+0x378>
  406064:	lea    r13,[r14+0xb8]
  40606b:	cmp    QWORD PTR [r14+0xc0],0xf
  406073:	ja     406095 <flatcc_builder_create_cached_vtable@@Base+0x135>
  406075:	mov    rdi,QWORD PTR [r14+0x40]
  406079:	mov    edx,0x10
  40607e:	mov    rsi,r13
  406081:	xor    ecx,ecx
  406083:	mov    r8d,0x6
  406089:	call   QWORD PTR [r14+0x50]
  40608d:	test   eax,eax
  40608f:	jne    4062b9 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406095:	xor    ebx,ebx
  406097:	cmp    QWORD PTR [r13+0x0],0x0
  40609c:	je     406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4060a2:	lea    rsi,[r14+0xa8]
  4060a9:	mov    DWORD PTR [r14+0xe4],0x10
  4060b4:	mov    rdi,QWORD PTR [r14+0x40]
  4060b8:	mov    ebp,0x100
  4060bd:	mov    edx,0x100
  4060c2:	mov    ecx,0x1
  4060c7:	mov    r8d,0x5
  4060cd:	call   QWORD PTR [r14+0x50]
  4060d1:	test   eax,eax
  4060d3:	jne    406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4060d9:	mov    rax,QWORD PTR [r14+0xb0]
  4060e0:	mov    rcx,rbp
  4060e3:	add    rbp,rbp
  4060e6:	cmp    rbp,rax
  4060e9:	jbe    4060e0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  4060eb:	shr    rcx,0x2
  4060ef:	mov    rax,0xffffffffffffffff
  4060f6:	mov    edx,0x1
  4060fb:	nop    DWORD PTR [rax+rax*1+0x0]
  406100:	inc    rax
  406103:	shlx   rsi,rdx,rax
  406108:	cmp    rsi,rcx
  40610b:	jb     406100 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  40610d:	mov    QWORD PTR [r14+0xd8],rax
  406114:	jmp    405f8c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  406119:	mov    r14,QWORD PTR [rsp+0x10]
  40611e:	mov    r13,QWORD PTR [rsp+0x8]
  406123:	mov    r15,QWORD PTR [rsp+0x20]
  406128:	jmp    406134 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  40612a:	xor    ebx,ebx
  40612c:	jmp    406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406131:	xor    r15d,r15d
  406134:	mov    r12d,DWORD PTR [r14+0xe4]
  40613b:	lea    rbp,[r14+0xb8]
  406142:	lea    rdx,[r12+0x10]
  406147:	cmp    rdx,QWORD PTR [r14+0xc0]
  40614e:	jbe    40616b <flatcc_builder_create_cached_vtable@@Base+0x20b>
  406150:	mov    rdi,QWORD PTR [r14+0x40]
  406154:	mov    rsi,rbp
  406157:	xor    ecx,ecx
  406159:	mov    r8d,0x6
  40615f:	call   QWORD PTR [r14+0x50]
  406163:	test   eax,eax
  406165:	jne    4062b9 <flatcc_builder_create_cached_vtable@@Base+0x359>
  40616b:	xor    ebx,ebx
  40616d:	add    r12,QWORD PTR [rbp+0x0]
  406171:	je     406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406177:	mov    eax,DWORD PTR [r14+0xe4]
  40617e:	mov    ecx,DWORD PTR [r14+0x100]
  406185:	lea    edx,[rax+0x10]
  406188:	mov    DWORD PTR [r14+0xe4],edx
  40618f:	mov    DWORD PTR [r12+0x4],ecx
  406194:	mov    ecx,DWORD PTR [r13+0x0]
  406198:	mov    DWORD PTR [r12+0xc],ecx
  40619d:	mov    DWORD PTR [r13+0x0],eax
  4061a1:	mov    rdi,r14
  4061a4:	mov    rsi,QWORD PTR [rsp+0x18]
  4061a9:	mov    rdx,QWORD PTR [rsp]
  4061ad:	call   405e10 <flatcc_builder_create_vtable@@Base>
  4061b2:	mov    DWORD PTR [r12],eax
  4061b6:	test   eax,eax
  4061b8:	je     406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4061be:	test   r15,r15
  4061c1:	je     4061d1 <flatcc_builder_create_cached_vtable@@Base+0x271>
  4061c3:	mov    eax,DWORD PTR [r15+0x8]
  4061c7:	mov    DWORD PTR [r12+0x8],eax
  4061cc:	jmp    40627e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4061d1:	mov    rax,QWORD PTR [r14+0x118]
  4061d8:	mov    ebp,DWORD PTR [r14+0xe0]
  4061df:	test   rax,rax
  4061e2:	je     406225 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  4061e4:	mov    rcx,QWORD PTR [rsp]
  4061e8:	add    ecx,ebp
  4061ea:	cmp    rax,rcx
  4061ed:	jae    406225 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  4061ef:	cmp    QWORD PTR [r14+0xd8],0x0
  4061f7:	je     40627e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4061fd:	mov    rdi,QWORD PTR [r14+0xa8]
  406204:	mov    rdx,QWORD PTR [r14+0xb0]
  40620b:	xor    esi,esi
  40620d:	call   4030a0 <memset@plt>
  406212:	movabs rax,0x1000000000
  40621c:	mov    QWORD PTR [r14+0xe0],rax
  406223:	jmp    40627e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  406225:	lea    rbx,[r14+0x78]
  406229:	mov    rax,QWORD PTR [rsp]
  40622d:	lea    rdx,[rax+rbp*1]
  406231:	cmp    rdx,QWORD PTR [r14+0x80]
  406238:	jbe    406251 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  40623a:	mov    rdi,QWORD PTR [r14+0x40]
  40623e:	mov    rsi,rbx
  406241:	xor    ecx,ecx
  406243:	mov    r8d,0x2
  406249:	call   QWORD PTR [r14+0x50]
  40624d:	test   eax,eax
  40624f:	jne    4062b9 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406251:	add    rbp,QWORD PTR [rbx]
  406254:	je     406293 <flatcc_builder_create_cached_vtable@@Base+0x333>
  406256:	mov    eax,DWORD PTR [r14+0xe0]
  40625d:	mov    DWORD PTR [r12+0x8],eax
  406262:	mov    rdx,QWORD PTR [rsp]
  406266:	mov    ecx,edx
  406268:	add    ecx,eax
  40626a:	mov    DWORD PTR [r14+0xe0],ecx
  406271:	mov    rdi,rbp
  406274:	mov    rsi,QWORD PTR [rsp+0x18]
  406279:	call   4030d0 <memcpy@plt>
  40627e:	mov    ebx,DWORD PTR [r12]
  406282:	mov    eax,ebx
  406284:	add    rsp,0x28
  406288:	pop    rbx
  406289:	pop    r12
  40628b:	pop    r13
  40628d:	pop    r14
  40628f:	pop    r15
  406291:	pop    rbp
  406292:	ret    
  406293:	mov    ebx,0xffffffff
  406298:	jmp    406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40629a:	mov    rcx,QWORD PTR [rsp+0x8]
  40629f:	cmp    r13,rcx
  4062a2:	je     4062b4 <flatcc_builder_create_cached_vtable@@Base+0x354>
  4062a4:	mov    eax,DWORD PTR [r14+0xc]
  4062a8:	mov    DWORD PTR [r13+0x0],eax
  4062ac:	mov    eax,DWORD PTR [rcx]
  4062ae:	mov    DWORD PTR [r14+0xc],eax
  4062b2:	mov    DWORD PTR [rcx],ebx
  4062b4:	mov    ebx,DWORD PTR [r14]
  4062b7:	jmp    406282 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4062b9:	lea    rdi,[rip+0x4762]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4062c0:	lea    rsi,[rip+0x359b]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4062c7:	lea    rcx,[rip+0x458e]        # 40a85c <flatcc_builder_padding_base@@Base+0x128c>
  4062ce:	mov    edx,0x134
  4062d3:	call   403090 <__assert_fail@plt>
  4062d8:	lea    rdi,[rip+0x4707]        # 40a9e6 <flatcc_builder_padding_base@@Base+0x1416>
  4062df:	lea    rsi,[rip+0x357c]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4062e6:	lea    rcx,[rip+0x4708]        # 40a9f5 <flatcc_builder_padding_base@@Base+0x1425>
  4062ed:	mov    edx,0x156
  4062f2:	call   403090 <__assert_fail@plt>
  4062f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406300 <flatcc_builder_create_table@@Base>:
  406300:	push   rbp
  406301:	push   r14
  406303:	push   rbx
  406304:	sub    rsp,0xa0
  40630b:	test   r9d,r9d
  40630e:	js     406523 <flatcc_builder_create_table@@Base+0x223>
  406314:	mov    r14,rdi
  406317:	mov    edi,DWORD PTR [rsp+0xc0]
  40631e:	test   dil,0x1
  406322:	je     406542 <flatcc_builder_create_table@@Base+0x242>
  406328:	cmp    cx,0x4
  40632c:	mov    eax,0x4
  406331:	cmova  eax,ecx
  406334:	cmp    WORD PTR [r14+0xe8],ax
  40633c:	jae    406346 <flatcc_builder_create_table@@Base+0x46>
  40633e:	mov    WORD PTR [r14+0xe8],ax
  406346:	mov    ebp,DWORD PTR [r14+0xf0]
  40634d:	sub    ebp,edx
  40634f:	movzx  r10d,ax
  406353:	dec    r10d
  406356:	and    r10d,ebp
  406359:	add    edi,r10d
  40635c:	neg    edi
  40635e:	lea    ecx,[rdi+rbp*1]
  406361:	add    ecx,0xfffffffd
  406364:	mov    DWORD PTR [rsp+0xc],ecx
  406368:	test   r9d,r9d
  40636b:	jle    406426 <flatcc_builder_create_table@@Base+0x126>
  406371:	add    ebp,0xfffffffc
  406374:	sub    ebp,r10d
  406377:	mov    ecx,0xfffffffc
  40637c:	sub    ecx,ebp
  40637e:	mov    edi,r9d
  406381:	lea    rbx,[rdi-0x1]
  406385:	mov    r9d,edi
  406388:	and    r9d,0x3
  40638c:	cmp    rbx,0x3
  406390:	jae    40639e <flatcc_builder_create_table@@Base+0x9e>
  406392:	xor    ebx,ebx
  406394:	test   r9,r9
  406397:	jne    4063fd <flatcc_builder_create_table@@Base+0xfd>
  406399:	jmp    406426 <flatcc_builder_create_table@@Base+0x126>
  40639e:	sub    rdi,r9
  4063a1:	xor    ebx,ebx
  4063a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4063ad:	nop    DWORD PTR [rax]
  4063b0:	movzx  eax,WORD PTR [r8+rbx*2]
  4063b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4063b8:	add    ebp,ecx
  4063ba:	sub    ebp,eax
  4063bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4063bf:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  4063c5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4063c8:	add    ebp,ecx
  4063ca:	sub    ebp,eax
  4063cc:	mov    DWORD PTR [rax+rsi*1],ebp
  4063cf:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4063d5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4063d8:	add    ebp,ecx
  4063da:	sub    ebp,eax
  4063dc:	mov    DWORD PTR [rax+rsi*1],ebp
  4063df:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4063e5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4063e8:	add    ebp,ecx
  4063ea:	sub    ebp,eax
  4063ec:	mov    DWORD PTR [rax+rsi*1],ebp
  4063ef:	add    rbx,0x4
  4063f3:	cmp    rdi,rbx
  4063f6:	jne    4063b0 <flatcc_builder_create_table@@Base+0xb0>
  4063f8:	test   r9,r9
  4063fb:	je     406426 <flatcc_builder_create_table@@Base+0x126>
  4063fd:	lea    rdi,[r8+rbx*2]
  406401:	xor    ebx,ebx
  406403:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40640d:	nop    DWORD PTR [rax]
  406410:	movzx  eax,WORD PTR [rdi+rbx*2]
  406414:	mov    ebp,DWORD PTR [rax+rsi*1]
  406417:	add    ebp,ecx
  406419:	sub    ebp,eax
  40641b:	mov    DWORD PTR [rax+rsi*1],ebp
  40641e:	inc    rbx
  406421:	cmp    r9,rbx
  406424:	jne    406410 <flatcc_builder_create_table@@Base+0x110>
  406426:	mov    QWORD PTR [rsp+0x10],0x4
  40642f:	lea    rax,[rsp+0xc]
  406434:	mov    QWORD PTR [rsp+0x20],rax
  406439:	mov    QWORD PTR [rsp+0x28],0x4
  406442:	mov    DWORD PTR [rsp+0x18],0x1
  40644a:	test   rdx,rdx
  40644d:	je     4064ee <flatcc_builder_create_table@@Base+0x1ee>
  406453:	lea    r8,[rdx+0x4]
  406457:	mov    QWORD PTR [rsp+0x10],r8
  40645c:	mov    QWORD PTR [rsp+0x30],rsi
  406461:	mov    QWORD PTR [rsp+0x38],rdx
  406466:	mov    DWORD PTR [rsp+0x18],0x2
  40646e:	mov    edx,0x2
  406473:	test   r10d,r10d
  406476:	je     40649d <flatcc_builder_create_table@@Base+0x19d>
  406478:	add    r8,r10
  40647b:	mov    QWORD PTR [rsp+0x10],r8
  406480:	mov    eax,edx
  406482:	shl    rax,0x4
  406486:	lea    rcx,[rip+0x3143]        # 4095d0 <flatcc_builder_padding_base@@Base>
  40648d:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406492:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406497:	inc    edx
  406499:	mov    DWORD PTR [rsp+0x18],edx
  40649d:	cmp    r8,0x11
  4064a1:	setb   al
  4064a4:	lea    rcx,[r8-0x10]
  4064a8:	shr    rcx,0x20
  4064ac:	sete   cl
  4064af:	test   r8d,r8d
  4064b2:	jle    406504 <flatcc_builder_create_table@@Base+0x204>
  4064b4:	or     al,cl
  4064b6:	je     406504 <flatcc_builder_create_table@@Base+0x204>
  4064b8:	mov    ebp,DWORD PTR [r14+0xf0]
  4064bf:	sub    ebp,r8d
  4064c2:	mov    rdi,QWORD PTR [r14+0x38]
  4064c6:	lea    rsi,[rsp+0x20]
  4064cb:	mov    ecx,ebp
  4064cd:	call   QWORD PTR [r14+0x48]
  4064d1:	test   eax,eax
  4064d3:	jne    406561 <flatcc_builder_create_table@@Base+0x261>
  4064d9:	mov    DWORD PTR [r14+0xf0],ebp
  4064e0:	mov    eax,ebp
  4064e2:	add    rsp,0xa0
  4064e9:	pop    rbx
  4064ea:	pop    r14
  4064ec:	pop    rbp
  4064ed:	ret    
  4064ee:	mov    r8d,0x4
  4064f4:	mov    edx,0x1
  4064f9:	test   r10d,r10d
  4064fc:	jne    406478 <flatcc_builder_create_table@@Base+0x178>
  406502:	jmp    40649d <flatcc_builder_create_table@@Base+0x19d>
  406504:	lea    rdi,[rip+0x4517]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40650b:	lea    rsi,[rip+0x3350]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406512:	lea    rcx,[rip+0x43c8]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  406519:	mov    edx,0x287
  40651e:	call   403090 <__assert_fail@plt>
  406523:	lea    rdi,[rip+0x3aae]        # 409fd8 <flatcc_builder_padding_base@@Base+0xa08>
  40652a:	lea    rsi,[rip+0x3331]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406531:	lea    rcx,[rip+0x3ab2]        # 409fea <flatcc_builder_padding_base@@Base+0xa1a>
  406538:	mov    edx,0x4d5
  40653d:	call   403090 <__assert_fail@plt>
  406542:	lea    rdi,[rip+0x3b3d]        # 40a086 <flatcc_builder_padding_base@@Base+0xab6>
  406549:	lea    rsi,[rip+0x3312]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406550:	lea    rcx,[rip+0x3a93]        # 409fea <flatcc_builder_padding_base@@Base+0xa1a>
  406557:	mov    edx,0x4db
  40655c:	call   403090 <__assert_fail@plt>
  406561:	lea    rdi,[rip+0x44ba]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  406568:	lea    rsi,[rip+0x32f3]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40656f:	lea    rcx,[rip+0x436b]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  406576:	mov    edx,0x28b
  40657b:	call   403090 <__assert_fail@plt>

0000000000406580 <flatcc_builder_check_required_field@@Base>:
  406580:	push   rax
  406581:	mov    rax,QWORD PTR [rdi+0x30]
  406585:	cmp    WORD PTR [rax+0xe],0x3
  40658a:	jne    4065a7 <flatcc_builder_check_required_field@@Base+0x27>
  40658c:	xor    eax,eax
  40658e:	cmp    WORD PTR [rdi+0x10],si
  406592:	jbe    4065a5 <flatcc_builder_check_required_field@@Base+0x25>
  406594:	mov    rcx,QWORD PTR [rdi+0x8]
  406598:	movzx  edx,si
  40659b:	xor    eax,eax
  40659d:	cmp    WORD PTR [rcx+rdx*2],0x0
  4065a2:	setne  al
  4065a5:	pop    rcx
  4065a6:	ret    
  4065a7:	lea    rdi,[rip+0x3ae3]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  4065ae:	lea    rsi,[rip+0x32ad]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4065b5:	lea    rcx,[rip+0x3b00]        # 40a0bc <flatcc_builder_padding_base@@Base+0xaec>
  4065bc:	mov    edx,0x4f8
  4065c1:	call   403090 <__assert_fail@plt>
  4065c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004065d0 <flatcc_builder_check_union_field@@Base>:
  4065d0:	push   rax
  4065d1:	mov    rax,QWORD PTR [rdi+0x30]
  4065d5:	cmp    WORD PTR [rax+0xe],0x3
  4065da:	jne    406624 <flatcc_builder_check_union_field@@Base+0x54>
  4065dc:	test   si,si
  4065df:	je     40660e <flatcc_builder_check_union_field@@Base+0x3e>
  4065e1:	cmp    WORD PTR [rdi+0x10],si
  4065e5:	jbe    40660e <flatcc_builder_check_union_field@@Base+0x3e>
  4065e7:	movzx  eax,si
  4065ea:	mov    rcx,QWORD PTR [rdi+0x8]
  4065ee:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  4065f3:	test   rdx,rdx
  4065f6:	je     406612 <flatcc_builder_check_union_field@@Base+0x42>
  4065f8:	mov    rsi,QWORD PTR [rdi+0x18]
  4065fc:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406600:	movzx  eax,WORD PTR [rcx+rax*2]
  406604:	je     406619 <flatcc_builder_check_union_field@@Base+0x49>
  406606:	test   ax,ax
  406609:	setne  al
  40660c:	jmp    40661f <flatcc_builder_check_union_field@@Base+0x4f>
  40660e:	xor    eax,eax
  406610:	jmp    40661f <flatcc_builder_check_union_field@@Base+0x4f>
  406612:	cmp    WORD PTR [rcx+rax*2],0x0
  406617:	jmp    40661c <flatcc_builder_check_union_field@@Base+0x4c>
  406619:	test   ax,ax
  40661c:	sete   al
  40661f:	movzx  eax,al
  406622:	pop    rcx
  406623:	ret    
  406624:	lea    rdi,[rip+0x3a66]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  40662b:	lea    rsi,[rip+0x3230]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406632:	lea    rcx,[rip+0x3ad6]        # 40a10f <flatcc_builder_padding_base@@Base+0xb3f>
  406639:	mov    edx,0x4ff
  40663e:	call   403090 <__assert_fail@plt>
  406643:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40664d:	nop    DWORD PTR [rax]

0000000000406650 <flatcc_builder_check_required@@Base>:
  406650:	push   rax
  406651:	mov    rax,QWORD PTR [rdi+0x30]
  406655:	cmp    WORD PTR [rax+0xe],0x3
  40665a:	jne    406699 <flatcc_builder_check_required@@Base+0x49>
  40665c:	movzx  ecx,WORD PTR [rdi+0x10]
  406660:	xor    eax,eax
  406662:	cmp    ecx,edx
  406664:	jl     406693 <flatcc_builder_check_required@@Base+0x43>
  406666:	mov    eax,0x1
  40666b:	test   edx,edx
  40666d:	jle    406693 <flatcc_builder_check_required@@Base+0x43>
  40666f:	mov    rcx,QWORD PTR [rdi+0x8]
  406673:	mov    r8d,edx
  406676:	xor    edi,edi
  406678:	nop    DWORD PTR [rax+rax*1+0x0]
  406680:	movzx  edx,WORD PTR [rsi+rdi*2]
  406684:	cmp    WORD PTR [rcx+rdx*2],0x0
  406689:	je     406695 <flatcc_builder_check_required@@Base+0x45>
  40668b:	inc    rdi
  40668e:	cmp    r8,rdi
  406691:	jne    406680 <flatcc_builder_check_required@@Base+0x30>
  406693:	pop    rcx
  406694:	ret    
  406695:	xor    eax,eax
  406697:	pop    rcx
  406698:	ret    
  406699:	lea    rdi,[rip+0x39f1]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  4066a0:	lea    rsi,[rip+0x31bb]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4066a7:	lea    rcx,[rip+0x3ab1]        # 40a15f <flatcc_builder_padding_base@@Base+0xb8f>
  4066ae:	mov    edx,0x511
  4066b3:	call   403090 <__assert_fail@plt>
  4066b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004066c0 <flatcc_builder_end_table@@Base>:
  4066c0:	push   rbp
  4066c1:	push   r15
  4066c3:	push   r14
  4066c5:	push   r12
  4066c7:	push   rbx
  4066c8:	sub    rsp,0x10
  4066cc:	mov    rax,QWORD PTR [rdi+0x30]
  4066d0:	cmp    WORD PTR [rax+0xe],0x3
  4066d5:	jne    406825 <flatcc_builder_end_table@@Base+0x165>
  4066db:	mov    rbx,rdi
  4066de:	mov    rax,QWORD PTR [rdi+0x8]
  4066e2:	mov    ecx,DWORD PTR [rdi+0x10]
  4066e5:	lea    ecx,[rcx+rcx*1]
  4066e8:	add    ecx,0x4
  4066eb:	mov    WORD PTR [rax-0x4],cx
  4066ef:	mov    edx,DWORD PTR [rdi+0x20]
  4066f2:	add    edx,0x4
  4066f5:	mov    WORD PTR [rax-0x2],dx
  4066f9:	lea    r12,[rax-0x4]
  4066fd:	movzx  ebp,cx
  406700:	mov    eax,DWORD PTR [rdi+0x14]
  406703:	xor    eax,ebp
  406705:	imul   eax,eax,0x9e3779b1
  40670b:	movzx  ecx,dx
  40670e:	xor    ecx,eax
  406710:	imul   ecx,ecx,0x9e3779b1
  406716:	mov    DWORD PTR [rdi+0x14],ecx
  406719:	mov    rsi,r12
  40671c:	mov    edx,ebp
  40671e:	call   405f60 <flatcc_builder_create_cached_vtable@@Base>
  406723:	test   eax,eax
  406725:	je     406812 <flatcc_builder_end_table@@Base+0x152>
  40672b:	mov    r14d,eax
  40672e:	xor    r15d,r15d
  406731:	mov    rdi,r12
  406734:	xor    esi,esi
  406736:	mov    rdx,rbp
  406739:	call   4030a0 <memset@plt>
  40673e:	mov    rax,QWORD PTR [rbx+0x30]
  406742:	mov    r8d,DWORD PTR [rax+0x14]
  406746:	add    r8,QWORD PTR [rbx+0x88]
  40674d:	mov    r9,QWORD PTR [rbx]
  406750:	mov    rsi,QWORD PTR [rbx+0x18]
  406754:	sub    r9,r8
  406757:	shr    r9,1
  40675a:	mov    edx,DWORD PTR [rbx+0x20]
  40675d:	movzx  ecx,WORD PTR [rbx+0xea]
  406764:	mov    DWORD PTR [rsp],r14d
  406768:	mov    rdi,rbx
  40676b:	call   406300 <flatcc_builder_create_table@@Base>
  406770:	test   eax,eax
  406772:	je     406815 <flatcc_builder_end_table@@Base+0x155>
  406778:	mov    r14d,eax
  40677b:	mov    rax,QWORD PTR [rbx+0x30]
  40677f:	mov    ecx,DWORD PTR [rax+0x18]
  406782:	mov    DWORD PTR [rbx+0x14],ecx
  406785:	movzx  ecx,WORD PTR [rax+0x1c]
  406789:	mov    WORD PTR [rbx+0x10],cx
  40678d:	mov    ecx,DWORD PTR [rax+0x10]
  406790:	add    rcx,QWORD PTR [rbx+0x58]
  406794:	mov    QWORD PTR [rbx+0x8],rcx
  406798:	mov    eax,DWORD PTR [rax+0x14]
  40679b:	add    rax,QWORD PTR [rbx+0x88]
  4067a2:	mov    QWORD PTR [rbx],rax
  4067a5:	mov    rdi,QWORD PTR [rbx+0x18]
  4067a9:	mov    edx,DWORD PTR [rbx+0x20]
  4067ac:	xor    esi,esi
  4067ae:	call   4030a0 <memset@plt>
  4067b3:	mov    rax,QWORD PTR [rbx+0x30]
  4067b7:	mov    ecx,DWORD PTR [rax+0x8]
  4067ba:	mov    DWORD PTR [rbx+0x20],ecx
  4067bd:	mov    ecx,DWORD PTR [rax]
  4067bf:	mov    DWORD PTR [rbx+0x28],ecx
  4067c2:	mov    edx,DWORD PTR [rax+0x4]
  4067c5:	mov    rsi,rcx
  4067c8:	add    rsi,QWORD PTR [rbx+0x68]
  4067cc:	mov    QWORD PTR [rbx+0x18],rsi
  4067d0:	mov    esi,DWORD PTR [rbx+0x70]
  4067d3:	sub    esi,ecx
  4067d5:	cmp    esi,edx
  4067d7:	cmova  esi,edx
  4067da:	mov    DWORD PTR [rbx+0x24],esi
  4067dd:	movzx  ecx,WORD PTR [rbx+0xea]
  4067e4:	cmp    WORD PTR [rbx+0xe8],cx
  4067eb:	jae    4067f4 <flatcc_builder_end_table@@Base+0x134>
  4067ed:	mov    WORD PTR [rbx+0xe8],cx
  4067f4:	movzx  ecx,WORD PTR [rax+0xc]
  4067f8:	mov    WORD PTR [rbx+0xea],cx
  4067ff:	add    rax,0xffffffffffffffdc
  406803:	mov    QWORD PTR [rbx+0x30],rax
  406807:	dec    DWORD PTR [rbx+0x104]
  40680d:	mov    r15d,r14d
  406810:	jmp    406815 <flatcc_builder_end_table@@Base+0x155>
  406812:	xor    r15d,r15d
  406815:	mov    eax,r15d
  406818:	add    rsp,0x10
  40681c:	pop    rbx
  40681d:	pop    r12
  40681f:	pop    r14
  406821:	pop    r15
  406823:	pop    rbp
  406824:	ret    
  406825:	lea    rdi,[rip+0x3865]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  40682c:	lea    rsi,[rip+0x302f]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406833:	lea    rcx,[rip+0x397f]        # 40a1b9 <flatcc_builder_padding_base@@Base+0xbe9>
  40683a:	mov    edx,0x525
  40683f:	call   403090 <__assert_fail@plt>
  406844:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40684e:	xchg   ax,ax

0000000000406850 <flatcc_builder_create_vector@@Base>:
  406850:	push   rbp
  406851:	push   rbx
  406852:	sub    rsp,0x98
  406859:	cmp    rdx,r9
  40685c:	ja     406986 <flatcc_builder_create_vector@@Base+0x136>
  406862:	mov    rbx,rdi
  406865:	cmp    r8w,0x4
  40686a:	mov    eax,0x4
  40686f:	cmova  eax,r8d
  406873:	cmp    WORD PTR [rdi+0xe8],ax
  40687a:	jae    406883 <flatcc_builder_create_vector@@Base+0x33>
  40687c:	mov    WORD PTR [rbx+0xe8],ax
  406883:	imul   ecx,edx
  406886:	mov    DWORD PTR [rsp+0x4],edx
  40688a:	mov    ebp,DWORD PTR [rbx+0xf0]
  406890:	mov    edx,ebp
  406892:	sub    edx,ecx
  406894:	movzx  eax,ax
  406897:	dec    eax
  406899:	and    eax,edx
  40689b:	mov    QWORD PTR [rsp+0x8],0x4
  4068a4:	lea    rdx,[rsp+0x4]
  4068a9:	mov    QWORD PTR [rsp+0x18],rdx
  4068ae:	mov    QWORD PTR [rsp+0x20],0x4
  4068b7:	mov    DWORD PTR [rsp+0x10],0x1
  4068bf:	test   ecx,ecx
  4068c1:	je     406956 <flatcc_builder_create_vector@@Base+0x106>
  4068c7:	mov    ecx,ecx
  4068c9:	lea    r8,[rcx+0x4]
  4068cd:	mov    QWORD PTR [rsp+0x8],r8
  4068d2:	mov    QWORD PTR [rsp+0x28],rsi
  4068d7:	mov    QWORD PTR [rsp+0x30],rcx
  4068dc:	mov    DWORD PTR [rsp+0x10],0x2
  4068e4:	mov    edx,0x2
  4068e9:	test   eax,eax
  4068eb:	je     406914 <flatcc_builder_create_vector@@Base+0xc4>
  4068ed:	mov    eax,eax
  4068ef:	add    r8,rax
  4068f2:	mov    QWORD PTR [rsp+0x8],r8
  4068f7:	mov    ecx,edx
  4068f9:	shl    rcx,0x4
  4068fd:	lea    rsi,[rip+0x2ccc]        # 4095d0 <flatcc_builder_padding_base@@Base>
  406904:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  406909:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  40690e:	inc    edx
  406910:	mov    DWORD PTR [rsp+0x10],edx
  406914:	cmp    r8,0x11
  406918:	setb   al
  40691b:	lea    rcx,[r8-0x10]
  40691f:	shr    rcx,0x20
  406923:	sete   cl
  406926:	test   r8d,r8d
  406929:	jle    406967 <flatcc_builder_create_vector@@Base+0x117>
  40692b:	or     al,cl
  40692d:	je     406967 <flatcc_builder_create_vector@@Base+0x117>
  40692f:	sub    ebp,r8d
  406932:	mov    rdi,QWORD PTR [rbx+0x38]
  406936:	lea    rsi,[rsp+0x18]
  40693b:	mov    ecx,ebp
  40693d:	call   QWORD PTR [rbx+0x48]
  406940:	test   eax,eax
  406942:	jne    4069a5 <flatcc_builder_create_vector@@Base+0x155>
  406944:	mov    DWORD PTR [rbx+0xf0],ebp
  40694a:	mov    eax,ebp
  40694c:	add    rsp,0x98
  406953:	pop    rbx
  406954:	pop    rbp
  406955:	ret    
  406956:	mov    r8d,0x4
  40695c:	mov    edx,0x1
  406961:	test   eax,eax
  406963:	jne    4068ed <flatcc_builder_create_vector@@Base+0x9d>
  406965:	jmp    406914 <flatcc_builder_create_vector@@Base+0xc4>
  406967:	lea    rdi,[rip+0x40b4]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40696e:	lea    rsi,[rip+0x2eed]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406975:	lea    rcx,[rip+0x3f65]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  40697c:	mov    edx,0x287
  406981:	call   403090 <__assert_fail@plt>
  406986:	lea    rdi,[rip+0x386e]        # 40a1fb <flatcc_builder_padding_base@@Base+0xc2b>
  40698d:	lea    rsi,[rip+0x2ece]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406994:	lea    rcx,[rip+0x3873]        # 40a20e <flatcc_builder_padding_base@@Base+0xc3e>
  40699b:	mov    edx,0x555
  4069a0:	call   403090 <__assert_fail@plt>
  4069a5:	lea    rdi,[rip+0x4076]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  4069ac:	lea    rsi,[rip+0x2eaf]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4069b3:	lea    rcx,[rip+0x3f27]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  4069ba:	mov    edx,0x28b
  4069bf:	call   403090 <__assert_fail@plt>
  4069c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4069ce:	xchg   ax,ax

00000000004069d0 <flatcc_builder_end_vector@@Base>:
  4069d0:	push   rbp
  4069d1:	push   rbx
  4069d2:	push   rax
  4069d3:	mov    rax,QWORD PTR [rdi+0x30]
  4069d7:	cmp    WORD PTR [rax+0xe],0x4
  4069dc:	jne    406a77 <flatcc_builder_end_vector@@Base+0xa7>
  4069e2:	mov    rbx,rdi
  4069e5:	mov    rsi,QWORD PTR [rdi+0x18]
  4069e9:	mov    ecx,DWORD PTR [rax+0x10]
  4069ec:	mov    edx,DWORD PTR [rax+0x14]
  4069ef:	movzx  r8d,WORD PTR [rdi+0xea]
  4069f7:	mov    r9d,DWORD PTR [rax+0x18]
  4069fb:	call   406850 <flatcc_builder_create_vector@@Base>
  406a00:	mov    ebp,eax
  406a02:	test   eax,eax
  406a04:	je     406a6e <flatcc_builder_end_vector@@Base+0x9e>
  406a06:	mov    rdi,QWORD PTR [rbx+0x18]
  406a0a:	mov    edx,DWORD PTR [rbx+0x20]
  406a0d:	xor    esi,esi
  406a0f:	call   4030a0 <memset@plt>
  406a14:	mov    rax,QWORD PTR [rbx+0x30]
  406a18:	mov    ecx,DWORD PTR [rax+0x8]
  406a1b:	mov    DWORD PTR [rbx+0x20],ecx
  406a1e:	mov    ecx,DWORD PTR [rax]
  406a20:	mov    DWORD PTR [rbx+0x28],ecx
  406a23:	mov    edx,DWORD PTR [rax+0x4]
  406a26:	mov    rsi,rcx
  406a29:	add    rsi,QWORD PTR [rbx+0x68]
  406a2d:	mov    QWORD PTR [rbx+0x18],rsi
  406a31:	mov    esi,DWORD PTR [rbx+0x70]
  406a34:	sub    esi,ecx
  406a36:	cmp    esi,edx
  406a38:	cmova  esi,edx
  406a3b:	mov    DWORD PTR [rbx+0x24],esi
  406a3e:	movzx  ecx,WORD PTR [rbx+0xea]
  406a45:	cmp    WORD PTR [rbx+0xe8],cx
  406a4c:	jae    406a55 <flatcc_builder_end_vector@@Base+0x85>
  406a4e:	mov    WORD PTR [rbx+0xe8],cx
  406a55:	movzx  ecx,WORD PTR [rax+0xc]
  406a59:	mov    WORD PTR [rbx+0xea],cx
  406a60:	add    rax,0xffffffffffffffdc
  406a64:	mov    QWORD PTR [rbx+0x30],rax
  406a68:	dec    DWORD PTR [rbx+0x104]
  406a6e:	mov    eax,ebp
  406a70:	add    rsp,0x8
  406a74:	pop    rbx
  406a75:	pop    rbp
  406a76:	ret    
  406a77:	lea    rdi,[rip+0x3121]        # 409b9f <flatcc_builder_padding_base@@Base+0x5cf>
  406a7e:	lea    rsi,[rip+0x2ddd]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406a85:	lea    rcx,[rip+0x37f8]        # 40a284 <flatcc_builder_padding_base@@Base+0xcb4>
  406a8c:	mov    edx,0x578
  406a91:	call   403090 <__assert_fail@plt>
  406a96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406aa0 <flatcc_builder_vector_count@@Base>:
  406aa0:	mov    rax,QWORD PTR [rdi+0x30]
  406aa4:	mov    eax,DWORD PTR [rax+0x14]
  406aa7:	ret    
  406aa8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406ab0 <flatcc_builder_vector_edit@@Base>:
  406ab0:	mov    rax,QWORD PTR [rdi+0x18]
  406ab4:	ret    
  406ab5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406abf:	nop

0000000000406ac0 <flatcc_builder_create_offset_vector_direct@@Base>:
  406ac0:	xor    ecx,ecx
  406ac2:	jmp    406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406ac4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406ace:	xchg   ax,ax
  406ad0:	push   r14
  406ad2:	push   rbx
  406ad3:	sub    rsp,0x98
  406ada:	mov    r10,rdx
  406add:	xor    ebx,ebx
  406adf:	test   r10d,0xc0000000
  406ae6:	jne    406c59 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  406aec:	mov    r14,rdi
  406aef:	cmp    WORD PTR [rdi+0xe8],0x3
  406af7:	ja     406b03 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  406af9:	mov    WORD PTR [r14+0xe8],0x4
  406b03:	lea    r8d,[r10*4+0x0]
  406b0b:	mov    DWORD PTR [rsp+0x4],r10d
  406b10:	mov    ebx,DWORD PTR [r14+0xf0]
  406b17:	mov    r9d,ebx
  406b1a:	and    r9d,0x3
  406b1e:	mov    QWORD PTR [rsp+0x8],0x4
  406b27:	lea    rdx,[rsp+0x4]
  406b2c:	mov    QWORD PTR [rsp+0x18],rdx
  406b31:	mov    QWORD PTR [rsp+0x20],0x4
  406b3a:	mov    DWORD PTR [rsp+0x10],0x1
  406b42:	test   r8d,r8d
  406b45:	je     406c66 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  406b4b:	mov    edx,r8d
  406b4e:	lea    r8,[rdx+0x4]
  406b52:	mov    QWORD PTR [rsp+0x8],r8
  406b57:	mov    QWORD PTR [rsp+0x28],rsi
  406b5c:	mov    QWORD PTR [rsp+0x30],rdx
  406b61:	mov    DWORD PTR [rsp+0x10],0x2
  406b69:	mov    edx,0x2
  406b6e:	test   r9d,r9d
  406b71:	je     406b98 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406b73:	add    r8,r9
  406b76:	mov    QWORD PTR [rsp+0x8],r8
  406b7b:	mov    edi,edx
  406b7d:	shl    rdi,0x4
  406b81:	lea    rax,[rip+0x2a48]        # 4095d0 <flatcc_builder_padding_base@@Base>
  406b88:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  406b8d:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406b92:	inc    edx
  406b94:	mov    DWORD PTR [rsp+0x10],edx
  406b98:	test   r10d,r10d
  406b9b:	je     406c15 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  406b9d:	mov    edi,r8d
  406ba0:	sub    edi,ebx
  406ba2:	add    edi,0xfffffffc
  406ba5:	mov    r9d,r10d
  406ba8:	xor    ebx,ebx
  406baa:	jmp    406bbb <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  406bac:	nop    DWORD PTR [rax+0x0]
  406bb0:	inc    rbx
  406bb3:	add    edi,0xfffffffc
  406bb6:	cmp    r9,rbx
  406bb9:	je     406c0e <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  406bbb:	mov    eax,DWORD PTR [rsi+rbx*4]
  406bbe:	test   eax,eax
  406bc0:	je     406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  406bc2:	add    eax,edi
  406bc4:	mov    DWORD PTR [rsi+rbx*4],eax
  406bc7:	test   rcx,rcx
  406bca:	je     406bb0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406bcc:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406bd0:	jne    406bb0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406bd2:	jmp    406c7f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  406bd7:	nop    WORD PTR [rax+rax*1+0x0]
  406be0:	test   rcx,rcx
  406be3:	je     406c9e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  406be9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406bed:	je     406bb0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406bef:	lea    rdi,[rip+0x3eb1]        # 40aaa7 <flatcc_builder_padding_base@@Base+0x14d7>
  406bf6:	lea    rsi,[rip+0x2c65]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406bfd:	lea    rcx,[rip+0x3e20]        # 40aa24 <flatcc_builder_padding_base@@Base+0x1454>
  406c04:	mov    edx,0x5b5
  406c09:	call   403090 <__assert_fail@plt>
  406c0e:	mov    ebx,DWORD PTR [r14+0xf0]
  406c15:	cmp    r8,0x11
  406c19:	setb   al
  406c1c:	lea    rcx,[r8-0x10]
  406c20:	shr    rcx,0x20
  406c24:	sete   cl
  406c27:	test   r8d,r8d
  406c2a:	jle    406cbd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406c30:	or     al,cl
  406c32:	je     406cbd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406c38:	sub    ebx,r8d
  406c3b:	mov    rdi,QWORD PTR [r14+0x38]
  406c3f:	lea    rsi,[rsp+0x18]
  406c44:	mov    ecx,ebx
  406c46:	call   QWORD PTR [r14+0x48]
  406c4a:	test   eax,eax
  406c4c:	jne    406cdc <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406c52:	mov    DWORD PTR [r14+0xf0],ebx
  406c59:	mov    eax,ebx
  406c5b:	add    rsp,0x98
  406c62:	pop    rbx
  406c63:	pop    r14
  406c65:	ret    
  406c66:	mov    r8d,0x4
  406c6c:	mov    edx,0x1
  406c71:	test   r9d,r9d
  406c74:	jne    406b73 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  406c7a:	jmp    406b98 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  406c7f:	lea    rdi,[rip+0x3d90]        # 40aa16 <flatcc_builder_padding_base@@Base+0x1446>
  406c86:	lea    rsi,[rip+0x2bd5]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406c8d:	lea    rcx,[rip+0x3d90]        # 40aa24 <flatcc_builder_padding_base@@Base+0x1454>
  406c94:	mov    edx,0x5b1
  406c99:	call   403090 <__assert_fail@plt>
  406c9e:	lea    rdi,[rip+0x3d7d]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  406ca5:	lea    rsi,[rip+0x2bb6]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406cac:	lea    rcx,[rip+0x3d71]        # 40aa24 <flatcc_builder_padding_base@@Base+0x1454>
  406cb3:	mov    edx,0x5b7
  406cb8:	call   403090 <__assert_fail@plt>
  406cbd:	lea    rdi,[rip+0x3d5e]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  406cc4:	lea    rsi,[rip+0x2b97]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406ccb:	lea    rcx,[rip+0x3c0f]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  406cd2:	mov    edx,0x287
  406cd7:	call   403090 <__assert_fail@plt>
  406cdc:	lea    rdi,[rip+0x3d3f]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  406ce3:	lea    rsi,[rip+0x2b78]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406cea:	lea    rcx,[rip+0x3bf0]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  406cf1:	mov    edx,0x28b
  406cf6:	call   403090 <__assert_fail@plt>
  406cfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406d00 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406d00:	push   rbp
  406d01:	push   rbx
  406d02:	push   rax
  406d03:	mov    rax,QWORD PTR [rdi+0x30]
  406d07:	cmp    WORD PTR [rax+0xe],0x5
  406d0c:	jne    406d9b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  406d12:	mov    rcx,rsi
  406d15:	mov    rbx,rdi
  406d18:	mov    rsi,QWORD PTR [rdi+0x18]
  406d1c:	mov    edx,DWORD PTR [rax+0x14]
  406d1f:	call   406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406d24:	mov    ebp,eax
  406d26:	test   eax,eax
  406d28:	je     406d92 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  406d2a:	mov    rdi,QWORD PTR [rbx+0x18]
  406d2e:	mov    edx,DWORD PTR [rbx+0x20]
  406d31:	xor    esi,esi
  406d33:	call   4030a0 <memset@plt>
  406d38:	mov    rax,QWORD PTR [rbx+0x30]
  406d3c:	mov    ecx,DWORD PTR [rax+0x8]
  406d3f:	mov    DWORD PTR [rbx+0x20],ecx
  406d42:	mov    ecx,DWORD PTR [rax]
  406d44:	mov    DWORD PTR [rbx+0x28],ecx
  406d47:	mov    edx,DWORD PTR [rax+0x4]
  406d4a:	mov    rsi,rcx
  406d4d:	add    rsi,QWORD PTR [rbx+0x68]
  406d51:	mov    QWORD PTR [rbx+0x18],rsi
  406d55:	mov    esi,DWORD PTR [rbx+0x70]
  406d58:	sub    esi,ecx
  406d5a:	cmp    esi,edx
  406d5c:	cmova  esi,edx
  406d5f:	mov    DWORD PTR [rbx+0x24],esi
  406d62:	movzx  ecx,WORD PTR [rbx+0xea]
  406d69:	cmp    WORD PTR [rbx+0xe8],cx
  406d70:	jae    406d79 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  406d72:	mov    WORD PTR [rbx+0xe8],cx
  406d79:	movzx  ecx,WORD PTR [rax+0xc]
  406d7d:	mov    WORD PTR [rbx+0xea],cx
  406d84:	add    rax,0xffffffffffffffdc
  406d88:	mov    QWORD PTR [rbx+0x30],rax
  406d8c:	dec    DWORD PTR [rbx+0x104]
  406d92:	mov    eax,ebp
  406d94:	add    rsp,0x8
  406d98:	pop    rbx
  406d99:	pop    rbp
  406d9a:	ret    
  406d9b:	lea    rdi,[rip+0x2ef6]        # 409c98 <flatcc_builder_padding_base@@Base+0x6c8>
  406da2:	lea    rsi,[rip+0x2ab9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406da9:	lea    rcx,[rip+0x3561]        # 40a311 <flatcc_builder_padding_base@@Base+0xd41>
  406db0:	mov    edx,0x5d5
  406db5:	call   403090 <__assert_fail@plt>
  406dba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406dc0 <flatcc_builder_offset_vector_edit@@Base>:
  406dc0:	mov    rax,QWORD PTR [rdi+0x18]
  406dc4:	ret    
  406dc5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406dcf:	nop

0000000000406dd0 <flatcc_builder_offset_vector_count@@Base>:
  406dd0:	mov    rax,QWORD PTR [rdi+0x30]
  406dd4:	mov    eax,DWORD PTR [rax+0x14]
  406dd7:	ret    
  406dd8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406de0 <flatcc_builder_table_add_union@@Base>:
  406de0:	push   rbp
  406de1:	push   r15
  406de3:	push   r14
  406de5:	push   rbx
  406de6:	push   rax
  406de7:	mov    rax,QWORD PTR [rdi+0x30]
  406deb:	cmp    WORD PTR [rax+0xe],0x3
  406df0:	jne    406e4e <flatcc_builder_table_add_union@@Base+0x6e>
  406df2:	mov    r14,rdx
  406df5:	mov    ebp,esi
  406df7:	mov    r15,rdi
  406dfa:	mov    rbx,rdx
  406dfd:	shr    rbx,0x20
  406e01:	test   r14b,r14b
  406e04:	jne    406e0a <flatcc_builder_table_add_union@@Base+0x2a>
  406e06:	test   ebx,ebx
  406e08:	jne    406e6d <flatcc_builder_table_add_union@@Base+0x8d>
  406e0a:	test   ebx,ebx
  406e0c:	je     406e23 <flatcc_builder_table_add_union@@Base+0x43>
  406e0e:	mov    rdi,r15
  406e11:	mov    esi,ebp
  406e13:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  406e18:	test   rax,rax
  406e1b:	je     406eab <flatcc_builder_table_add_union@@Base+0xcb>
  406e21:	mov    DWORD PTR [rax],ebx
  406e23:	dec    ebp
  406e25:	mov    edx,0x1
  406e2a:	mov    rdi,r15
  406e2d:	mov    esi,ebp
  406e2f:	mov    ecx,0x1
  406e34:	call   407030 <flatcc_builder_table_add@@Base>
  406e39:	test   rax,rax
  406e3c:	je     406e8c <flatcc_builder_table_add_union@@Base+0xac>
  406e3e:	mov    BYTE PTR [rax],r14b
  406e41:	xor    eax,eax
  406e43:	add    rsp,0x8
  406e47:	pop    rbx
  406e48:	pop    r14
  406e4a:	pop    r15
  406e4c:	pop    rbp
  406e4d:	ret    
  406e4e:	lea    rdi,[rip+0x323c]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  406e55:	lea    rsi,[rip+0x2a06]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406e5c:	lea    rcx,[rip+0x3520]        # 40a383 <flatcc_builder_padding_base@@Base+0xdb3>
  406e63:	mov    edx,0x5ee
  406e68:	call   403090 <__assert_fail@plt>
  406e6d:	lea    rdi,[rip+0x3567]        # 40a3db <flatcc_builder_padding_base@@Base+0xe0b>
  406e74:	lea    rsi,[rip+0x29e7]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406e7b:	lea    rcx,[rip+0x3501]        # 40a383 <flatcc_builder_padding_base@@Base+0xdb3>
  406e82:	mov    edx,0x5ef
  406e87:	call   403090 <__assert_fail@plt>
  406e8c:	lea    rdi,[rip+0x3574]        # 40a407 <flatcc_builder_padding_base@@Base+0xe37>
  406e93:	lea    rsi,[rip+0x29c8]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406e9a:	lea    rcx,[rip+0x34e2]        # 40a383 <flatcc_builder_padding_base@@Base+0xdb3>
  406ea1:	mov    edx,0x5f6
  406ea6:	call   403090 <__assert_fail@plt>
  406eab:	lea    rdi,[rip+0x354b]        # 40a3fd <flatcc_builder_padding_base@@Base+0xe2d>
  406eb2:	lea    rsi,[rip+0x29a9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406eb9:	lea    rcx,[rip+0x34c3]        # 40a383 <flatcc_builder_padding_base@@Base+0xdb3>
  406ec0:	mov    edx,0x5f2
  406ec5:	call   403090 <__assert_fail@plt>
  406eca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406ed0 <flatcc_builder_table_add_offset@@Base>:
  406ed0:	push   rbp
  406ed1:	push   r15
  406ed3:	push   r14
  406ed5:	push   rbx
  406ed6:	push   rax
  406ed7:	mov    rax,QWORD PTR [rdi+0x30]
  406edb:	cmp    WORD PTR [rax+0xe],0x3
  406ee0:	jne    406fce <flatcc_builder_table_add_offset@@Base+0xfe>
  406ee6:	mov    r14d,esi
  406ee9:	cmp    esi,0x7ffd
  406eef:	jae    406fed <flatcc_builder_table_add_offset@@Base+0x11d>
  406ef5:	mov    rbx,rdi
  406ef8:	mov    rax,QWORD PTR [rdi+0x8]
  406efc:	movsxd rcx,r14d
  406eff:	cmp    WORD PTR [rax+rcx*2],0x0
  406f04:	jne    40700c <flatcc_builder_table_add_offset@@Base+0x13c>
  406f0a:	mov    ecx,DWORD PTR [rbx+0x14]
  406f0d:	xor    ecx,r14d
  406f10:	imul   ecx,ecx,0x9e3779b1
  406f16:	xor    ecx,0x4
  406f19:	imul   ecx,ecx,0x9e3779b1
  406f1f:	mov    DWORD PTR [rbx+0x14],ecx
  406f22:	mov    ebp,DWORD PTR [rbx+0x20]
  406f25:	mov    ecx,DWORD PTR [rbx+0x24]
  406f28:	add    ebp,0x3
  406f2b:	and    ebp,0xfffffffc
  406f2e:	lea    r15,[rbp+0x4]
  406f32:	mov    DWORD PTR [rbx+0x20],r15d
  406f36:	cmp    ecx,r15d
  406f39:	jae    406f98 <flatcc_builder_table_add_offset@@Base+0xc8>
  406f3b:	mov    eax,r15d
  406f3e:	and    eax,0xfffffffc
  406f41:	lea    rsi,[rbx+0x68]
  406f45:	mov    rdi,QWORD PTR [rbx+0x40]
  406f49:	mov    edx,DWORD PTR [rbx+0x28]
  406f4c:	add    rdx,rax
  406f4f:	mov    ecx,0x1
  406f54:	mov    r8d,0x1
  406f5a:	call   QWORD PTR [rbx+0x50]
  406f5d:	test   eax,eax
  406f5f:	je     406f65 <flatcc_builder_table_add_offset@@Base+0x95>
  406f61:	xor    ebp,ebp
  406f63:	jmp    406fc0 <flatcc_builder_table_add_offset@@Base+0xf0>
  406f65:	mov    eax,DWORD PTR [rbx+0x28]
  406f68:	mov    rcx,rax
  406f6b:	add    rcx,QWORD PTR [rbx+0x68]
  406f6f:	mov    QWORD PTR [rbx+0x18],rcx
  406f73:	mov    ecx,DWORD PTR [rbx+0x70]
  406f76:	sub    ecx,eax
  406f78:	cmp    ecx,0xfffc
  406f7e:	mov    eax,0xfffc
  406f83:	cmovb  eax,ecx
  406f86:	mov    DWORD PTR [rbx+0x24],eax
  406f89:	mov    rax,QWORD PTR [rbx+0x30]
  406f8d:	mov    DWORD PTR [rax+0x4],0xfffc
  406f94:	mov    rax,QWORD PTR [rbx+0x8]
  406f98:	movzx  ecx,r14w
  406f9c:	mov    WORD PTR [rax+rcx*2],r15w
  406fa1:	cmp    WORD PTR [rbx+0x10],cx
  406fa5:	ja     406faf <flatcc_builder_table_add_offset@@Base+0xdf>
  406fa7:	inc    r14d
  406faa:	mov    WORD PTR [rbx+0x10],r14w
  406faf:	mov    rax,QWORD PTR [rbx]
  406fb2:	lea    rcx,[rax+0x2]
  406fb6:	mov    QWORD PTR [rbx],rcx
  406fb9:	mov    WORD PTR [rax],bp
  406fbc:	add    rbp,QWORD PTR [rbx+0x18]
  406fc0:	mov    rax,rbp
  406fc3:	add    rsp,0x8
  406fc7:	pop    rbx
  406fc8:	pop    r14
  406fca:	pop    r15
  406fcc:	pop    rbp
  406fcd:	ret    
  406fce:	lea    rdi,[rip+0x30bc]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  406fd5:	lea    rsi,[rip+0x2886]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406fdc:	lea    rcx,[rip+0x37a2]        # 40a785 <flatcc_builder_padding_base@@Base+0x11b5>
  406fe3:	mov    edx,0x713
  406fe8:	call   403090 <__assert_fail@plt>
  406fed:	lea    rdi,[rip+0x3711]        # 40a705 <flatcc_builder_padding_base@@Base+0x1135>
  406ff4:	lea    rsi,[rip+0x2867]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  406ffb:	lea    rcx,[rip+0x3783]        # 40a785 <flatcc_builder_padding_base@@Base+0x11b5>
  407002:	mov    edx,0x714
  407007:	call   403090 <__assert_fail@plt>
  40700c:	lea    rdi,[rip+0x3a0f]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  407013:	lea    rsi,[rip+0x2848]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40701a:	lea    rcx,[rip+0x3764]        # 40a785 <flatcc_builder_padding_base@@Base+0x11b5>
  407021:	mov    edx,0x71b
  407026:	call   403090 <__assert_fail@plt>
  40702b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407030 <flatcc_builder_table_add@@Base>:
  407030:	push   rbp
  407031:	push   r14
  407033:	push   rbx
  407034:	mov    rax,QWORD PTR [rdi+0x30]
  407038:	cmp    WORD PTR [rax+0xe],0x3
  40703d:	jne    407128 <flatcc_builder_table_add@@Base+0xf8>
  407043:	mov    r14d,esi
  407046:	cmp    esi,0x7ffd
  40704c:	jae    407147 <flatcc_builder_table_add@@Base+0x117>
  407052:	mov    rbx,rdi
  407055:	cmp    WORD PTR [rdi+0xea],cx
  40705c:	jae    407065 <flatcc_builder_table_add@@Base+0x35>
  40705e:	mov    WORD PTR [rbx+0xea],cx
  407065:	mov    rsi,QWORD PTR [rbx+0x8]
  407069:	movsxd rax,r14d
  40706c:	cmp    WORD PTR [rsi+rax*2],0x0
  407071:	jne    407166 <flatcc_builder_table_add@@Base+0x136>
  407077:	mov    eax,DWORD PTR [rbx+0x14]
  40707a:	xor    eax,r14d
  40707d:	imul   eax,eax,0x9e3779b1
  407083:	xor    eax,edx
  407085:	imul   eax,eax,0x9e3779b1
  40708b:	mov    DWORD PTR [rbx+0x14],eax
  40708e:	mov    eax,DWORD PTR [rbx+0x20]
  407091:	movzx  ebp,cx
  407094:	lea    eax,[rax+rbp*1]
  407097:	add    eax,0xffffffff
  40709a:	neg    ebp
  40709c:	and    ebp,eax
  40709e:	add    edx,ebp
  4070a0:	mov    DWORD PTR [rbx+0x20],edx
  4070a3:	cmp    edx,DWORD PTR [rbx+0x24]
  4070a6:	jb     407104 <flatcc_builder_table_add@@Base+0xd4>
  4070a8:	inc    edx
  4070aa:	lea    rsi,[rbx+0x68]
  4070ae:	mov    rdi,QWORD PTR [rbx+0x40]
  4070b2:	mov    eax,DWORD PTR [rbx+0x28]
  4070b5:	add    rax,rdx
  4070b8:	mov    rdx,rax
  4070bb:	mov    ecx,0x1
  4070c0:	mov    r8d,0x1
  4070c6:	call   QWORD PTR [rbx+0x50]
  4070c9:	test   eax,eax
  4070cb:	je     4070d1 <flatcc_builder_table_add@@Base+0xa1>
  4070cd:	xor    eax,eax
  4070cf:	jmp    407123 <flatcc_builder_table_add@@Base+0xf3>
  4070d1:	mov    eax,DWORD PTR [rbx+0x28]
  4070d4:	mov    rcx,rax
  4070d7:	add    rcx,QWORD PTR [rbx+0x68]
  4070db:	mov    QWORD PTR [rbx+0x18],rcx
  4070df:	mov    ecx,DWORD PTR [rbx+0x70]
  4070e2:	sub    ecx,eax
  4070e4:	cmp    ecx,0xfffc
  4070ea:	mov    eax,0xfffc
  4070ef:	cmovb  eax,ecx
  4070f2:	mov    DWORD PTR [rbx+0x24],eax
  4070f5:	mov    rax,QWORD PTR [rbx+0x30]
  4070f9:	mov    DWORD PTR [rax+0x4],0xfffc
  407100:	mov    rsi,QWORD PTR [rbx+0x8]
  407104:	mov    eax,ebp
  407106:	add    ebp,0x4
  407109:	movzx  ecx,r14w
  40710d:	mov    WORD PTR [rsi+rcx*2],bp
  407111:	cmp    WORD PTR [rbx+0x10],cx
  407115:	ja     40711f <flatcc_builder_table_add@@Base+0xef>
  407117:	inc    r14d
  40711a:	mov    WORD PTR [rbx+0x10],r14w
  40711f:	add    rax,QWORD PTR [rbx+0x18]
  407123:	pop    rbx
  407124:	pop    r14
  407126:	pop    rbp
  407127:	ret    
  407128:	lea    rdi,[rip+0x2f62]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  40712f:	lea    rsi,[rip+0x272c]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407136:	lea    rcx,[rip+0x357e]        # 40a6bb <flatcc_builder_padding_base@@Base+0x10eb>
  40713d:	mov    edx,0x6ed
  407142:	call   403090 <__assert_fail@plt>
  407147:	lea    rdi,[rip+0x35b7]        # 40a705 <flatcc_builder_padding_base@@Base+0x1135>
  40714e:	lea    rsi,[rip+0x270d]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407155:	lea    rcx,[rip+0x355f]        # 40a6bb <flatcc_builder_padding_base@@Base+0x10eb>
  40715c:	mov    edx,0x6ee
  407161:	call   403090 <__assert_fail@plt>
  407166:	lea    rdi,[rip+0x38b5]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  40716d:	lea    rsi,[rip+0x26ee]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407174:	lea    rcx,[rip+0x3540]        # 40a6bb <flatcc_builder_padding_base@@Base+0x10eb>
  40717b:	mov    edx,0x6f8
  407180:	call   403090 <__assert_fail@plt>
  407185:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40718f:	nop

0000000000407190 <flatcc_builder_table_add_union_vector@@Base>:
  407190:	push   r15
  407192:	push   r14
  407194:	push   r12
  407196:	push   rbx
  407197:	push   rax
  407198:	mov    rax,QWORD PTR [rdi+0x30]
  40719c:	cmp    WORD PTR [rax+0xe],0x3
  4071a1:	jne    4071f7 <flatcc_builder_table_add_union_vector@@Base+0x67>
  4071a3:	mov    rbx,rdx
  4071a6:	mov    r12,rdx
  4071a9:	shr    r12,0x20
  4071ad:	test   ebx,ebx
  4071af:	setne  al
  4071b2:	test   r12d,r12d
  4071b5:	sete   cl
  4071b8:	xor    cl,al
  4071ba:	je     407216 <flatcc_builder_table_add_union_vector@@Base+0x86>
  4071bc:	test   ebx,ebx
  4071be:	je     4071e9 <flatcc_builder_table_add_union_vector@@Base+0x59>
  4071c0:	mov    r14d,esi
  4071c3:	mov    r15,rdi
  4071c6:	lea    esi,[r14-0x1]
  4071ca:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  4071cf:	test   rax,rax
  4071d2:	je     407235 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  4071d4:	mov    DWORD PTR [rax],ebx
  4071d6:	mov    rdi,r15
  4071d9:	mov    esi,r14d
  4071dc:	call   406ed0 <flatcc_builder_table_add_offset@@Base>
  4071e1:	test   rax,rax
  4071e4:	je     407254 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  4071e6:	mov    DWORD PTR [rax],r12d
  4071e9:	xor    eax,eax
  4071eb:	add    rsp,0x8
  4071ef:	pop    rbx
  4071f0:	pop    r12
  4071f2:	pop    r14
  4071f4:	pop    r15
  4071f6:	ret    
  4071f7:	lea    rdi,[rip+0x2e93]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  4071fe:	lea    rsi,[rip+0x265d]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407205:	lea    rcx,[rip+0x3207]        # 40a413 <flatcc_builder_padding_base@@Base+0xe43>
  40720c:	mov    edx,0x600
  407211:	call   403090 <__assert_fail@plt>
  407216:	lea    rdi,[rip+0x3259]        # 40a476 <flatcc_builder_padding_base@@Base+0xea6>
  40721d:	lea    rsi,[rip+0x263e]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407224:	lea    rcx,[rip+0x31e8]        # 40a413 <flatcc_builder_padding_base@@Base+0xe43>
  40722b:	mov    edx,0x601
  407230:	call   403090 <__assert_fail@plt>
  407235:	lea    rdi,[rip+0x31c1]        # 40a3fd <flatcc_builder_padding_base@@Base+0xe2d>
  40723c:	lea    rsi,[rip+0x261f]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407243:	lea    rcx,[rip+0x31c9]        # 40a413 <flatcc_builder_padding_base@@Base+0xe43>
  40724a:	mov    edx,0x604
  40724f:	call   403090 <__assert_fail@plt>
  407254:	lea    rdi,[rip+0x31a2]        # 40a3fd <flatcc_builder_padding_base@@Base+0xe2d>
  40725b:	lea    rsi,[rip+0x2600]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407262:	lea    rcx,[rip+0x31aa]        # 40a413 <flatcc_builder_padding_base@@Base+0xe43>
  407269:	mov    edx,0x608
  40726e:	call   403090 <__assert_fail@plt>
  407273:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40727d:	nop    DWORD PTR [rax]

0000000000407280 <flatcc_builder_create_union_vector@@Base>:
  407280:	push   r15
  407282:	push   r14
  407284:	push   r13
  407286:	push   r12
  407288:	push   rbx
  407289:	mov    r14,rdx
  40728c:	mov    r15,rsi
  40728f:	mov    rbx,rdi
  407292:	mov    esi,0x4
  407297:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  40729c:	test   eax,eax
  40729e:	je     4072b0 <flatcc_builder_create_union_vector@@Base+0x30>
  4072a0:	xor    r14d,r14d
  4072a3:	mov    rax,r14
  4072a6:	pop    rbx
  4072a7:	pop    r12
  4072a9:	pop    r13
  4072ab:	pop    r14
  4072ad:	pop    r15
  4072af:	ret    
  4072b0:	mov    rax,QWORD PTR [rbx+0x30]
  4072b4:	mov    DWORD PTR [rax+0x10],0x4
  4072bb:	mov    rax,QWORD PTR [rbx+0x30]
  4072bf:	mov    DWORD PTR [rax+0x14],0x0
  4072c6:	mov    rax,QWORD PTR [rbx+0x30]
  4072ca:	mov    WORD PTR [rax+0xe],0x5
  4072d0:	mov    ecx,DWORD PTR [rbx+0x28]
  4072d3:	mov    edx,DWORD PTR [rbx+0x70]
  4072d6:	sub    edx,ecx
  4072d8:	add    rcx,QWORD PTR [rbx+0x68]
  4072dc:	mov    QWORD PTR [rbx+0x18],rcx
  4072e0:	cmp    edx,0xfffffffc
  4072e3:	mov    ecx,0xfffffffc
  4072e8:	cmovb  ecx,edx
  4072eb:	mov    DWORD PTR [rbx+0x24],ecx
  4072ee:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4072f5:	mov    ecx,DWORD PTR [rax+0x14]
  4072f8:	add    ecx,r14d
  4072fb:	jb     407568 <flatcc_builder_create_union_vector@@Base+0x2e8>
  407301:	cmp    ecx,0x40000000
  407307:	jae    407568 <flatcc_builder_create_union_vector@@Base+0x2e8>
  40730d:	mov    DWORD PTR [rax+0x14],ecx
  407310:	mov    r12d,DWORD PTR [rbx+0x20]
  407314:	mov    eax,DWORD PTR [rbx+0x24]
  407317:	lea    ecx,[r12+r14*4]
  40731b:	mov    DWORD PTR [rbx+0x20],ecx
  40731e:	cmp    ecx,eax
  407320:	jae    407330 <flatcc_builder_create_union_vector@@Base+0xb0>
  407322:	mov    rsi,QWORD PTR [rbx+0x18]
  407326:	add    r12,rsi
  407329:	jne    40738b <flatcc_builder_create_union_vector@@Base+0x10b>
  40732b:	jmp    4072a0 <flatcc_builder_create_union_vector@@Base+0x20>
  407330:	inc    ecx
  407332:	lea    rsi,[rbx+0x68]
  407336:	mov    rdi,QWORD PTR [rbx+0x40]
  40733a:	mov    edx,DWORD PTR [rbx+0x28]
  40733d:	add    rdx,rcx
  407340:	mov    ecx,0x1
  407345:	mov    r8d,0x1
  40734b:	call   QWORD PTR [rbx+0x50]
  40734e:	test   eax,eax
  407350:	jne    4072a0 <flatcc_builder_create_union_vector@@Base+0x20>
  407356:	mov    eax,DWORD PTR [rbx+0x28]
  407359:	mov    rsi,rax
  40735c:	add    rsi,QWORD PTR [rbx+0x68]
  407360:	mov    QWORD PTR [rbx+0x18],rsi
  407364:	mov    ecx,DWORD PTR [rbx+0x70]
  407367:	sub    ecx,eax
  407369:	cmp    ecx,0xfffffffc
  40736c:	mov    eax,0xfffffffc
  407371:	cmovb  eax,ecx
  407374:	mov    DWORD PTR [rbx+0x24],eax
  407377:	mov    rcx,QWORD PTR [rbx+0x30]
  40737b:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407382:	add    r12,rsi
  407385:	je     4072a0 <flatcc_builder_create_union_vector@@Base+0x20>
  40738b:	mov    r13d,DWORD PTR [rbx+0x20]
  40738f:	lea    ecx,[r14+r13*1]
  407393:	mov    DWORD PTR [rbx+0x20],ecx
  407396:	cmp    ecx,eax
  407398:	jb     4073ec <flatcc_builder_create_union_vector@@Base+0x16c>
  40739a:	inc    ecx
  40739c:	lea    rsi,[rbx+0x68]
  4073a0:	mov    rdi,QWORD PTR [rbx+0x40]
  4073a4:	mov    edx,DWORD PTR [rbx+0x28]
  4073a7:	add    rdx,rcx
  4073aa:	mov    ecx,0x1
  4073af:	mov    r8d,0x1
  4073b5:	call   QWORD PTR [rbx+0x50]
  4073b8:	test   eax,eax
  4073ba:	jne    4072a0 <flatcc_builder_create_union_vector@@Base+0x20>
  4073c0:	mov    eax,DWORD PTR [rbx+0x28]
  4073c3:	mov    rsi,rax
  4073c6:	add    rsi,QWORD PTR [rbx+0x68]
  4073ca:	mov    QWORD PTR [rbx+0x18],rsi
  4073ce:	mov    ecx,DWORD PTR [rbx+0x70]
  4073d1:	sub    ecx,eax
  4073d3:	cmp    ecx,0xfffffffc
  4073d6:	mov    eax,0xfffffffc
  4073db:	cmovb  eax,ecx
  4073de:	mov    DWORD PTR [rbx+0x24],eax
  4073e1:	mov    rax,QWORD PTR [rbx+0x30]
  4073e5:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4073ec:	mov    r12,rsi
  4073ef:	add    r12,r13
  4073f2:	je     4072a0 <flatcc_builder_create_union_vector@@Base+0x20>
  4073f8:	test   r14,r14
  4073fb:	je     4074b8 <flatcc_builder_create_union_vector@@Base+0x238>
  407401:	lea    rcx,[r14-0x1]
  407405:	mov    r8d,r14d
  407408:	and    r8d,0x3
  40740c:	cmp    rcx,0x3
  407410:	jae    40741e <flatcc_builder_create_union_vector@@Base+0x19e>
  407412:	xor    ecx,ecx
  407414:	test   r8,r8
  407417:	jne    407487 <flatcc_builder_create_union_vector@@Base+0x207>
  407419:	jmp    4074b8 <flatcc_builder_create_union_vector@@Base+0x238>
  40741e:	mov    rdx,r14
  407421:	sub    rdx,r8
  407424:	lea    rdi,[rsi+r13*1]
  407428:	add    rdi,0x3
  40742c:	xor    ecx,ecx
  40742e:	xchg   ax,ax
  407430:	movzx  eax,BYTE PTR [r15+rcx*8]
  407435:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407439:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40743e:	mov    DWORD PTR [rsi+rcx*4],eax
  407441:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407447:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40744b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407450:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407454:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40745a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40745e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407463:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407467:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40746d:	mov    BYTE PTR [rdi+rcx*1],al
  407470:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407475:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407479:	add    rcx,0x4
  40747d:	cmp    rdx,rcx
  407480:	jne    407430 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407482:	test   r8,r8
  407485:	je     4074b8 <flatcc_builder_create_union_vector@@Base+0x238>
  407487:	lea    rdx,[rsi+rcx*4]
  40748b:	lea    rdi,[r15+rcx*8]
  40748f:	add    rdi,0x4
  407493:	add    r13,rcx
  407496:	add    r13,rsi
  407499:	xor    ecx,ecx
  40749b:	nop    DWORD PTR [rax+rax*1+0x0]
  4074a0:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  4074a5:	mov    BYTE PTR [r13+rcx*1+0x0],al
  4074aa:	mov    eax,DWORD PTR [rdi+rcx*8]
  4074ad:	mov    DWORD PTR [rdx+rcx*4],eax
  4074b0:	inc    rcx
  4074b3:	cmp    r8,rcx
  4074b6:	jne    4074a0 <flatcc_builder_create_union_vector@@Base+0x220>
  4074b8:	mov    rdi,rbx
  4074bb:	mov    rdx,r14
  4074be:	mov    rcx,r12
  4074c1:	call   406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4074c6:	mov    r15d,eax
  4074c9:	test   eax,eax
  4074cb:	je     4074f1 <flatcc_builder_create_union_vector@@Base+0x271>
  4074cd:	mov    ecx,0x1
  4074d2:	mov    r9d,0xffffffff
  4074d8:	mov    rdi,rbx
  4074db:	mov    rsi,r12
  4074de:	mov    rdx,r14
  4074e1:	mov    r8d,0x1
  4074e7:	call   406850 <flatcc_builder_create_vector@@Base>
  4074ec:	mov    r14d,eax
  4074ef:	jmp    4074f4 <flatcc_builder_create_union_vector@@Base+0x274>
  4074f1:	xor    r14d,r14d
  4074f4:	shl    r15,0x20
  4074f8:	mov    rdi,QWORD PTR [rbx+0x18]
  4074fc:	mov    edx,DWORD PTR [rbx+0x20]
  4074ff:	xor    esi,esi
  407501:	call   4030a0 <memset@plt>
  407506:	mov    rax,QWORD PTR [rbx+0x30]
  40750a:	mov    ecx,DWORD PTR [rax+0x8]
  40750d:	mov    DWORD PTR [rbx+0x20],ecx
  407510:	mov    ecx,DWORD PTR [rax]
  407512:	mov    DWORD PTR [rbx+0x28],ecx
  407515:	mov    edx,DWORD PTR [rax+0x4]
  407518:	mov    rsi,rcx
  40751b:	add    rsi,QWORD PTR [rbx+0x68]
  40751f:	mov    QWORD PTR [rbx+0x18],rsi
  407523:	mov    esi,DWORD PTR [rbx+0x70]
  407526:	sub    esi,ecx
  407528:	cmp    esi,edx
  40752a:	cmova  esi,edx
  40752d:	mov    DWORD PTR [rbx+0x24],esi
  407530:	movzx  ecx,WORD PTR [rbx+0xea]
  407537:	cmp    WORD PTR [rbx+0xe8],cx
  40753e:	jae    407547 <flatcc_builder_create_union_vector@@Base+0x2c7>
  407540:	mov    WORD PTR [rbx+0xe8],cx
  407547:	or     r14,r15
  40754a:	movzx  ecx,WORD PTR [rax+0xc]
  40754e:	mov    WORD PTR [rbx+0xea],cx
  407555:	add    rax,0xffffffffffffffdc
  407559:	mov    QWORD PTR [rbx+0x30],rax
  40755d:	dec    DWORD PTR [rbx+0x104]
  407563:	jmp    4072a3 <flatcc_builder_create_union_vector@@Base+0x23>
  407568:	lea    rdi,[rip+0x33bc]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  40756f:	lea    rsi,[rip+0x22ec]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407576:	lea    rcx,[rip+0x33c9]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  40757d:	mov    edx,0x37c
  407582:	call   403090 <__assert_fail@plt>
  407587:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407590 <flatcc_builder_create_union_vector_direct@@Base>:
  407590:	push   r15
  407592:	push   r14
  407594:	push   r12
  407596:	push   rbx
  407597:	push   rax
  407598:	mov    r14,rcx
  40759b:	mov    r15,rsi
  40759e:	mov    r12,rdi
  4075a1:	mov    rsi,rdx
  4075a4:	mov    rdx,rcx
  4075a7:	mov    rcx,r15
  4075aa:	call   406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4075af:	mov    ebx,eax
  4075b1:	test   eax,eax
  4075b3:	je     4075d8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  4075b5:	mov    ecx,0x1
  4075ba:	mov    r9d,0xffffffff
  4075c0:	mov    rdi,r12
  4075c3:	mov    rsi,r15
  4075c6:	mov    rdx,r14
  4075c9:	mov    r8d,0x1
  4075cf:	call   406850 <flatcc_builder_create_vector@@Base>
  4075d4:	mov    eax,eax
  4075d6:	jmp    4075da <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  4075d8:	xor    eax,eax
  4075da:	shl    rbx,0x20
  4075de:	or     rbx,rax
  4075e1:	mov    rax,rbx
  4075e4:	add    rsp,0x8
  4075e8:	pop    rbx
  4075e9:	pop    r12
  4075eb:	pop    r14
  4075ed:	pop    r15
  4075ef:	ret    

00000000004075f0 <flatcc_builder_start_union_vector@@Base>:
  4075f0:	push   rbx
  4075f1:	mov    rbx,rdi
  4075f4:	mov    esi,0x4
  4075f9:	call   404af0 <flatcc_builder_start_buffer@@Base+0xe0>
  4075fe:	mov    ecx,eax
  407600:	mov    eax,0xffffffff
  407605:	test   ecx,ecx
  407607:	je     40760b <flatcc_builder_start_union_vector@@Base+0x1b>
  407609:	pop    rbx
  40760a:	ret    
  40760b:	mov    rax,QWORD PTR [rbx+0x30]
  40760f:	mov    DWORD PTR [rax+0x10],0x8
  407616:	mov    rax,QWORD PTR [rbx+0x30]
  40761a:	mov    DWORD PTR [rax+0x14],0x0
  407621:	mov    rax,QWORD PTR [rbx+0x30]
  407625:	mov    WORD PTR [rax+0xe],0x7
  40762b:	mov    ecx,DWORD PTR [rbx+0x28]
  40762e:	mov    edx,DWORD PTR [rbx+0x70]
  407631:	sub    edx,ecx
  407633:	add    rcx,QWORD PTR [rbx+0x68]
  407637:	mov    QWORD PTR [rbx+0x18],rcx
  40763b:	cmp    edx,0xfffffffc
  40763e:	mov    ecx,0xfffffffc
  407643:	cmovb  ecx,edx
  407646:	mov    DWORD PTR [rbx+0x24],ecx
  407649:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407650:	xor    eax,eax
  407652:	pop    rbx
  407653:	ret    
  407654:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40765e:	xchg   ax,ax

0000000000407660 <flatcc_builder_end_union_vector@@Base>:
  407660:	push   rbp
  407661:	push   r15
  407663:	push   r14
  407665:	push   r13
  407667:	push   r12
  407669:	push   rbx
  40766a:	push   rax
  40766b:	mov    rax,QWORD PTR [rdi+0x30]
  40766f:	cmp    WORD PTR [rax+0xe],0x7
  407674:	jne    407a64 <flatcc_builder_end_union_vector@@Base+0x404>
  40767a:	mov    r13,rdi
  40767d:	mov    r14d,DWORD PTR [rax+0x14]
  407681:	lea    eax,[r14+r14*4]
  407685:	mov    r12d,DWORD PTR [rdi+0x20]
  407689:	add    eax,r12d
  40768c:	mov    DWORD PTR [rdi+0x20],eax
  40768f:	cmp    eax,DWORD PTR [rdi+0x24]
  407692:	jae    40769a <flatcc_builder_end_union_vector@@Base+0x3a>
  407694:	mov    r8,QWORD PTR [r13+0x18]
  407698:	jmp    4076f1 <flatcc_builder_end_union_vector@@Base+0x91>
  40769a:	inc    eax
  40769c:	lea    rsi,[r13+0x68]
  4076a0:	mov    rdi,QWORD PTR [r13+0x40]
  4076a4:	mov    edx,DWORD PTR [r13+0x28]
  4076a8:	add    rdx,rax
  4076ab:	mov    ecx,0x1
  4076b0:	mov    r8d,0x1
  4076b6:	call   QWORD PTR [r13+0x50]
  4076ba:	test   eax,eax
  4076bc:	jne    407826 <flatcc_builder_end_union_vector@@Base+0x1c6>
  4076c2:	mov    eax,DWORD PTR [r13+0x28]
  4076c6:	mov    r8,rax
  4076c9:	add    r8,QWORD PTR [r13+0x68]
  4076cd:	mov    QWORD PTR [r13+0x18],r8
  4076d1:	mov    ecx,DWORD PTR [r13+0x70]
  4076d5:	sub    ecx,eax
  4076d7:	cmp    ecx,0xfffffffc
  4076da:	mov    eax,0xfffffffc
  4076df:	cmovb  eax,ecx
  4076e2:	mov    DWORD PTR [r13+0x24],eax
  4076e6:	mov    rax,QWORD PTR [r13+0x30]
  4076ea:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4076f1:	mov    rsi,r8
  4076f4:	add    rsi,r12
  4076f7:	je     407826 <flatcc_builder_end_union_vector@@Base+0x1c6>
  4076fd:	lea    r15,[rsi+r14*4]
  407701:	test   r14d,r14d
  407704:	je     4077ea <flatcc_builder_end_union_vector@@Base+0x18a>
  40770a:	cmp    r14d,0x9
  40770e:	jae    4078b9 <flatcc_builder_end_union_vector@@Base+0x259>
  407714:	xor    r9d,r9d
  407717:	mov    r11d,r14d
  40771a:	sub    r11d,r9d
  40771d:	mov    r10,r9
  407720:	not    r10
  407723:	add    r10,r14
  407726:	and    r11,0x3
  40772a:	je     407770 <flatcc_builder_end_union_vector@@Base+0x110>
  40772c:	mov    rdx,r9
  40772f:	neg    rdx
  407732:	lea    rbp,[r12+r9*4]
  407736:	add    rbp,r8
  407739:	lea    rbx,[r8+r9*8]
  40773d:	add    rbx,0x4
  407741:	lea    rax,[r9+r14*4]
  407745:	add    rax,r12
  407748:	add    rax,r8
  40774b:	xor    edi,edi
  40774d:	nop    DWORD PTR [rax]
  407750:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407755:	mov    BYTE PTR [rax+rdi*1],cl
  407758:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40775b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40775f:	dec    rdx
  407762:	inc    rdi
  407765:	cmp    r11,rdi
  407768:	jne    407750 <flatcc_builder_end_union_vector@@Base+0xf0>
  40776a:	neg    rdx
  40776d:	mov    r9,rdx
  407770:	cmp    r10,0x3
  407774:	jb     4077ea <flatcc_builder_end_union_vector@@Base+0x18a>
  407776:	mov    rbp,r14
  407779:	sub    rbp,r9
  40777c:	lea    rcx,[r12+r9*4]
  407780:	lea    rdx,[r8+rcx*1]
  407784:	add    rdx,0xc
  407788:	lea    rdi,[r8+r9*8]
  40778c:	add    rdi,0x1c
  407790:	lea    rcx,[r9+r14*4]
  407794:	add    rcx,r12
  407797:	add    rcx,r8
  40779a:	add    rcx,0x3
  40779e:	xor    ebx,ebx
  4077a0:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  4077a5:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  4077a9:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  4077ad:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  4077b1:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  4077b6:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  4077ba:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  4077be:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  4077c2:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  4077c7:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  4077cb:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  4077cf:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  4077d3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  4077d8:	mov    BYTE PTR [rcx+rbx*1],al
  4077db:	mov    eax,DWORD PTR [rdi+rbx*8]
  4077de:	mov    DWORD PTR [rdx+rbx*4],eax
  4077e1:	add    rbx,0x4
  4077e5:	cmp    rbp,rbx
  4077e8:	jne    4077a0 <flatcc_builder_end_union_vector@@Base+0x140>
  4077ea:	mov    rdi,r13
  4077ed:	mov    rdx,r14
  4077f0:	mov    rcx,r15
  4077f3:	vzeroupper 
  4077f6:	call   406ad0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4077fb:	mov    r12d,eax
  4077fe:	test   eax,eax
  407800:	je     40782b <flatcc_builder_end_union_vector@@Base+0x1cb>
  407802:	mov    ecx,0x1
  407807:	mov    r9d,0xffffffff
  40780d:	mov    rdi,r13
  407810:	mov    rsi,r15
  407813:	mov    rdx,r14
  407816:	mov    r8d,0x1
  40781c:	call   406850 <flatcc_builder_create_vector@@Base>
  407821:	mov    r14d,eax
  407824:	jmp    40782e <flatcc_builder_end_union_vector@@Base+0x1ce>
  407826:	xor    r14d,r14d
  407829:	jmp    4078a7 <flatcc_builder_end_union_vector@@Base+0x247>
  40782b:	xor    r14d,r14d
  40782e:	shl    r12,0x20
  407832:	mov    rdi,QWORD PTR [r13+0x18]
  407836:	mov    edx,DWORD PTR [r13+0x20]
  40783a:	xor    esi,esi
  40783c:	call   4030a0 <memset@plt>
  407841:	mov    rax,QWORD PTR [r13+0x30]
  407845:	mov    ecx,DWORD PTR [rax+0x8]
  407848:	mov    DWORD PTR [r13+0x20],ecx
  40784c:	mov    ecx,DWORD PTR [rax]
  40784e:	mov    DWORD PTR [r13+0x28],ecx
  407852:	mov    edx,DWORD PTR [rax+0x4]
  407855:	mov    rsi,rcx
  407858:	add    rsi,QWORD PTR [r13+0x68]
  40785c:	mov    QWORD PTR [r13+0x18],rsi
  407860:	mov    esi,DWORD PTR [r13+0x70]
  407864:	sub    esi,ecx
  407866:	cmp    esi,edx
  407868:	cmova  esi,edx
  40786b:	mov    DWORD PTR [r13+0x24],esi
  40786f:	movzx  ecx,WORD PTR [r13+0xea]
  407877:	cmp    WORD PTR [r13+0xe8],cx
  40787f:	jae    407889 <flatcc_builder_end_union_vector@@Base+0x229>
  407881:	mov    WORD PTR [r13+0xe8],cx
  407889:	or     r14,r12
  40788c:	movzx  ecx,WORD PTR [rax+0xc]
  407890:	mov    WORD PTR [r13+0xea],cx
  407898:	add    rax,0xffffffffffffffdc
  40789c:	mov    QWORD PTR [r13+0x30],rax
  4078a0:	dec    DWORD PTR [r13+0x104]
  4078a7:	mov    rax,r14
  4078aa:	add    rsp,0x8
  4078ae:	pop    rbx
  4078af:	pop    r12
  4078b1:	pop    r13
  4078b3:	pop    r14
  4078b5:	pop    r15
  4078b7:	pop    rbp
  4078b8:	ret    
  4078b9:	lea    rax,[r14-0x1]
  4078bd:	mov    ecx,0x8
  4078c2:	mul    rcx
  4078c5:	seto   cl
  4078c8:	mov    rdx,r8
  4078cb:	not    rdx
  4078ce:	xor    r9d,r9d
  4078d1:	cmp    rax,rdx
  4078d4:	ja     407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  4078da:	test   cl,cl
  4078dc:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  4078e2:	lea    rdx,[r8+0x4]
  4078e6:	mov    rdi,rdx
  4078e9:	not    rdi
  4078ec:	cmp    rax,rdi
  4078ef:	ja     407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  4078f5:	test   cl,cl
  4078f7:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  4078fd:	lea    rcx,[r14+r14*4]
  407901:	add    rcx,r12
  407904:	add    rcx,r8
  407907:	lea    rbx,[r8+r14*8]
  40790b:	add    rbx,0xfffffffffffffff9
  40790f:	cmp    rbx,r15
  407912:	seta   r11b
  407916:	lea    rdi,[r8+r14*8]
  40791a:	cmp    r8,rcx
  40791d:	setb   r10b
  407921:	cmp    rdi,r15
  407924:	seta   al
  407927:	cmp    rdx,rcx
  40792a:	setb   bpl
  40792e:	cmp    rsi,rbx
  407931:	setb   cl
  407934:	cmp    r8,r15
  407937:	setb   BYTE PTR [rsp+0x7]
  40793c:	cmp    rsi,rdi
  40793f:	setb   bl
  407942:	cmp    rdx,r15
  407945:	setb   dl
  407948:	xor    r9d,r9d
  40794b:	test   r11b,r10b
  40794e:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  407954:	and    al,bpl
  407957:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  40795d:	and    cl,BYTE PTR [rsp+0x7]
  407961:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  407967:	and    bl,dl
  407969:	jne    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  40796f:	mov    eax,r14d
  407972:	and    eax,0x7
  407975:	test   rax,rax
  407978:	mov    ecx,0x8
  40797d:	cmovne rcx,rax
  407981:	mov    r9,r14
  407984:	sub    r9,rcx
  407987:	vmovdqa ymm0,YMMWORD PTR [rip+0x1e51]        # 4097e0 <flatcc_builder_padding_base@@Base+0x210>
  40798f:	vmovdqa ymm1,YMMWORD PTR [rip+0x1e69]        # 409800 <flatcc_builder_padding_base@@Base+0x230>
  407997:	xor    eax,eax
  407999:	vmovdqa xmm8,XMMWORD PTR [rip+0x1e7f]        # 409820 <flatcc_builder_padding_base@@Base+0x250>
  4079a1:	vmovdqa xmm9,XMMWORD PTR [rip+0x1e87]        # 409830 <flatcc_builder_padding_base@@Base+0x260>
  4079a9:	vpbroadcastq ymm4,QWORD PTR [rip+0x1e8e]        # 409840 <flatcc_builder_padding_base@@Base+0x270>
  4079b2:	vpbroadcastq ymm5,QWORD PTR [rip+0x1e8d]        # 409848 <flatcc_builder_padding_base@@Base+0x278>
  4079bb:	mov    rdi,r8
  4079be:	xchg   ax,ax
  4079c0:	vmovdqu xmm6,XMMWORD PTR [rdi]
  4079c4:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  4079c9:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  4079ce:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  4079d3:	vpshufb xmm3,xmm3,xmm8
  4079d8:	vpshufb xmm2,xmm2,xmm8
  4079dd:	vpunpcklwd xmm2,xmm2,xmm3
  4079e1:	vpshufb xmm3,xmm7,xmm9
  4079e6:	vpshufb xmm6,xmm6,xmm9
  4079eb:	vpunpcklwd xmm3,xmm6,xmm3
  4079ef:	vpblendd xmm2,xmm3,xmm2,0x2
  4079f5:	vmovq  QWORD PTR [r15+rax*1],xmm2
  4079fb:	vpsllq ymm2,ymm0,0x3
  407a00:	vmovq  xmm3,r8
  407a05:	vpbroadcastq ymm3,xmm3
  407a0a:	vpaddq ymm2,ymm3,ymm2
  407a0e:	vpaddq ymm2,ymm2,ymm4
  407a12:	vpsllq ymm6,ymm1,0x3
  407a17:	vpaddq ymm3,ymm3,ymm6
  407a1b:	vpaddq ymm3,ymm3,ymm4
  407a1f:	vpcmpeqd xmm6,xmm6,xmm6
  407a23:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  407a2d:	vpcmpeqd xmm3,xmm3,xmm3
  407a31:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  407a3b:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  407a41:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  407a46:	add    rax,0x8
  407a4a:	vpaddq ymm1,ymm1,ymm5
  407a4e:	vpaddq ymm0,ymm0,ymm5
  407a52:	add    rdi,0x40
  407a56:	cmp    r9,rax
  407a59:	jne    4079c0 <flatcc_builder_end_union_vector@@Base+0x360>
  407a5f:	jmp    407717 <flatcc_builder_end_union_vector@@Base+0xb7>
  407a64:	lea    rdi,[rip+0x2a33]        # 40a49e <flatcc_builder_padding_base@@Base+0xece>
  407a6b:	lea    rsi,[rip+0x1df0]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407a72:	lea    rcx,[rip+0x2a57]        # 40a4d0 <flatcc_builder_padding_base@@Base+0xf00>
  407a79:	mov    edx,0x651
  407a7e:	call   403090 <__assert_fail@plt>
  407a83:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407a8d:	nop    DWORD PTR [rax]

0000000000407a90 <flatcc_builder_union_vector_count@@Base>:
  407a90:	mov    rax,QWORD PTR [rdi+0x30]
  407a94:	mov    eax,DWORD PTR [rax+0x14]
  407a97:	ret    
  407a98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407aa0 <flatcc_builder_union_vector_edit@@Base>:
  407aa0:	mov    rax,QWORD PTR [rdi+0x18]
  407aa4:	ret    
  407aa5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407aaf:	nop

0000000000407ab0 <flatcc_builder_extend_union_vector@@Base>:
  407ab0:	push   r14
  407ab2:	push   rbx
  407ab3:	push   rax
  407ab4:	mov    rax,QWORD PTR [rdi+0x30]
  407ab8:	mov    ecx,DWORD PTR [rax+0x14]
  407abb:	add    ecx,esi
  407abd:	jb     407b44 <flatcc_builder_extend_union_vector@@Base+0x94>
  407ac3:	cmp    ecx,0x20000000
  407ac9:	jae    407b44 <flatcc_builder_extend_union_vector@@Base+0x94>
  407acb:	mov    rbx,rdi
  407ace:	mov    DWORD PTR [rax+0x14],ecx
  407ad1:	mov    r14d,DWORD PTR [rdi+0x20]
  407ad5:	lea    eax,[r14+rsi*8]
  407ad9:	mov    DWORD PTR [rdi+0x20],eax
  407adc:	cmp    eax,DWORD PTR [rdi+0x24]
  407adf:	jae    407ae7 <flatcc_builder_extend_union_vector@@Base+0x37>
  407ae1:	mov    rax,QWORD PTR [rbx+0x18]
  407ae5:	jmp    407b39 <flatcc_builder_extend_union_vector@@Base+0x89>
  407ae7:	inc    eax
  407ae9:	lea    rsi,[rbx+0x68]
  407aed:	mov    rdi,QWORD PTR [rbx+0x40]
  407af1:	mov    edx,DWORD PTR [rbx+0x28]
  407af4:	add    rdx,rax
  407af7:	mov    ecx,0x1
  407afc:	mov    r8d,0x1
  407b02:	call   QWORD PTR [rbx+0x50]
  407b05:	test   eax,eax
  407b07:	je     407b0d <flatcc_builder_extend_union_vector@@Base+0x5d>
  407b09:	xor    eax,eax
  407b0b:	jmp    407b3c <flatcc_builder_extend_union_vector@@Base+0x8c>
  407b0d:	mov    ecx,DWORD PTR [rbx+0x28]
  407b10:	mov    rax,rcx
  407b13:	add    rax,QWORD PTR [rbx+0x68]
  407b17:	mov    QWORD PTR [rbx+0x18],rax
  407b1b:	mov    edx,DWORD PTR [rbx+0x70]
  407b1e:	sub    edx,ecx
  407b20:	cmp    edx,0xfffffffc
  407b23:	mov    ecx,0xfffffffc
  407b28:	cmovb  ecx,edx
  407b2b:	mov    DWORD PTR [rbx+0x24],ecx
  407b2e:	mov    rcx,QWORD PTR [rbx+0x30]
  407b32:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407b39:	add    rax,r14
  407b3c:	add    rsp,0x8
  407b40:	pop    rbx
  407b41:	pop    r14
  407b43:	ret    
  407b44:	lea    rdi,[rip+0x2de0]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  407b4b:	lea    rsi,[rip+0x1d10]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407b52:	lea    rcx,[rip+0x2ded]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  407b59:	mov    edx,0x37c
  407b5e:	call   403090 <__assert_fail@plt>
  407b63:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b6d:	nop    DWORD PTR [rax]

0000000000407b70 <flatcc_builder_truncate_union_vector@@Base>:
  407b70:	push   rax
  407b71:	mov    rax,QWORD PTR [rdi+0x30]
  407b75:	cmp    WORD PTR [rax+0xe],0x7
  407b7a:	jne    407bab <flatcc_builder_truncate_union_vector@@Base+0x3b>
  407b7c:	mov    rdx,rsi
  407b7f:	mov    ecx,DWORD PTR [rax+0x14]
  407b82:	sub    ecx,edx
  407b84:	jb     407bca <flatcc_builder_truncate_union_vector@@Base+0x5a>
  407b86:	mov    DWORD PTR [rax+0x14],ecx
  407b89:	mov    rax,QWORD PTR [rdi+0x30]
  407b8d:	imul   edx,DWORD PTR [rax+0x10]
  407b91:	mov    eax,DWORD PTR [rdi+0x20]
  407b94:	sub    eax,edx
  407b96:	mov    DWORD PTR [rdi+0x20],eax
  407b99:	add    rax,QWORD PTR [rdi+0x18]
  407b9d:	mov    rdi,rax
  407ba0:	xor    esi,esi
  407ba2:	call   4030a0 <memset@plt>
  407ba7:	xor    eax,eax
  407ba9:	pop    rcx
  407baa:	ret    
  407bab:	lea    rdi,[rip+0x28ec]        # 40a49e <flatcc_builder_padding_base@@Base+0xece>
  407bb2:	lea    rsi,[rip+0x1ca9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407bb9:	lea    rcx,[rip+0x2963]        # 40a523 <flatcc_builder_padding_base@@Base+0xf53>
  407bc0:	mov    edx,0x681
  407bc5:	call   403090 <__assert_fail@plt>
  407bca:	lea    rdi,[rip+0x2331]        # 409f02 <flatcc_builder_padding_base@@Base+0x932>
  407bd1:	lea    rsi,[rip+0x1c8a]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407bd8:	lea    rcx,[rip+0x2944]        # 40a523 <flatcc_builder_padding_base@@Base+0xf53>
  407bdf:	mov    edx,0x682
  407be4:	call   403090 <__assert_fail@plt>
  407be9:	nop    DWORD PTR [rax+0x0]

0000000000407bf0 <flatcc_builder_union_vector_push@@Base>:
  407bf0:	push   r15
  407bf2:	push   r14
  407bf4:	push   rbx
  407bf5:	mov    rax,QWORD PTR [rdi+0x30]
  407bf9:	cmp    WORD PTR [rax+0xe],0x7
  407bfe:	jne    407c97 <flatcc_builder_union_vector_push@@Base+0xa7>
  407c04:	mov    ecx,DWORD PTR [rax+0x14]
  407c07:	cmp    ecx,0x1fffffff
  407c0d:	je     407c59 <flatcc_builder_union_vector_push@@Base+0x69>
  407c0f:	mov    r14,rsi
  407c12:	mov    rbx,rdi
  407c15:	inc    ecx
  407c17:	mov    DWORD PTR [rax+0x14],ecx
  407c1a:	mov    r15d,DWORD PTR [rdi+0x20]
  407c1e:	lea    eax,[r15+0x8]
  407c22:	mov    DWORD PTR [rdi+0x20],eax
  407c25:	cmp    eax,DWORD PTR [rdi+0x24]
  407c28:	jae    407c35 <flatcc_builder_union_vector_push@@Base+0x45>
  407c2a:	mov    rax,QWORD PTR [rbx+0x18]
  407c2e:	add    rax,r15
  407c31:	jne    407c8e <flatcc_builder_union_vector_push@@Base+0x9e>
  407c33:	jmp    407c59 <flatcc_builder_union_vector_push@@Base+0x69>
  407c35:	lea    eax,[r15+0x9]
  407c39:	lea    rsi,[rbx+0x68]
  407c3d:	mov    rdi,QWORD PTR [rbx+0x40]
  407c41:	mov    edx,DWORD PTR [rbx+0x28]
  407c44:	add    rdx,rax
  407c47:	mov    ecx,0x1
  407c4c:	mov    r8d,0x1
  407c52:	call   QWORD PTR [rbx+0x50]
  407c55:	test   eax,eax
  407c57:	je     407c5d <flatcc_builder_union_vector_push@@Base+0x6d>
  407c59:	xor    eax,eax
  407c5b:	jmp    407c91 <flatcc_builder_union_vector_push@@Base+0xa1>
  407c5d:	mov    ecx,DWORD PTR [rbx+0x28]
  407c60:	mov    rax,rcx
  407c63:	add    rax,QWORD PTR [rbx+0x68]
  407c67:	mov    QWORD PTR [rbx+0x18],rax
  407c6b:	mov    edx,DWORD PTR [rbx+0x70]
  407c6e:	sub    edx,ecx
  407c70:	cmp    edx,0xfffffffc
  407c73:	mov    ecx,0xfffffffc
  407c78:	cmovb  ecx,edx
  407c7b:	mov    DWORD PTR [rbx+0x24],ecx
  407c7e:	mov    rcx,QWORD PTR [rbx+0x30]
  407c82:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407c89:	add    rax,r15
  407c8c:	je     407c59 <flatcc_builder_union_vector_push@@Base+0x69>
  407c8e:	mov    QWORD PTR [rax],r14
  407c91:	pop    rbx
  407c92:	pop    r14
  407c94:	pop    r15
  407c96:	ret    
  407c97:	lea    rdi,[rip+0x2800]        # 40a49e <flatcc_builder_padding_base@@Base+0xece>
  407c9e:	lea    rsi,[rip+0x1bbd]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407ca5:	lea    rcx,[rip+0x28bc]        # 40a568 <flatcc_builder_padding_base@@Base+0xf98>
  407cac:	mov    edx,0x68d
  407cb1:	call   403090 <__assert_fail@plt>
  407cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407cc0 <flatcc_builder_append_union_vector@@Base>:
  407cc0:	push   r15
  407cc2:	push   r14
  407cc4:	push   r13
  407cc6:	push   r12
  407cc8:	push   rbx
  407cc9:	mov    rax,QWORD PTR [rdi+0x30]
  407ccd:	cmp    WORD PTR [rax+0xe],0x7
  407cd2:	jne    407dae <flatcc_builder_append_union_vector@@Base+0xee>
  407cd8:	mov    r15,rdx
  407cdb:	mov    ecx,DWORD PTR [rax+0x14]
  407cde:	add    ecx,r15d
  407ce1:	jb     407d8f <flatcc_builder_append_union_vector@@Base+0xcf>
  407ce7:	cmp    ecx,0x20000000
  407ced:	jae    407d8f <flatcc_builder_append_union_vector@@Base+0xcf>
  407cf3:	mov    r14,rsi
  407cf6:	mov    rbx,rdi
  407cf9:	mov    DWORD PTR [rax+0x14],ecx
  407cfc:	mov    r13d,DWORD PTR [rdi+0x20]
  407d00:	lea    eax,[r13+r15*8+0x0]
  407d05:	mov    DWORD PTR [rdi+0x20],eax
  407d08:	cmp    eax,DWORD PTR [rdi+0x24]
  407d0b:	jae    407d18 <flatcc_builder_append_union_vector@@Base+0x58>
  407d0d:	mov    r12,QWORD PTR [rbx+0x18]
  407d11:	add    r12,r13
  407d14:	jne    407d70 <flatcc_builder_append_union_vector@@Base+0xb0>
  407d16:	jmp    407d3a <flatcc_builder_append_union_vector@@Base+0x7a>
  407d18:	inc    eax
  407d1a:	lea    rsi,[rbx+0x68]
  407d1e:	mov    rdi,QWORD PTR [rbx+0x40]
  407d22:	mov    edx,DWORD PTR [rbx+0x28]
  407d25:	add    rdx,rax
  407d28:	mov    ecx,0x1
  407d2d:	mov    r8d,0x1
  407d33:	call   QWORD PTR [rbx+0x50]
  407d36:	test   eax,eax
  407d38:	je     407d3f <flatcc_builder_append_union_vector@@Base+0x7f>
  407d3a:	xor    r12d,r12d
  407d3d:	jmp    407d82 <flatcc_builder_append_union_vector@@Base+0xc2>
  407d3f:	mov    eax,DWORD PTR [rbx+0x28]
  407d42:	mov    r12,rax
  407d45:	add    r12,QWORD PTR [rbx+0x68]
  407d49:	mov    QWORD PTR [rbx+0x18],r12
  407d4d:	mov    ecx,DWORD PTR [rbx+0x70]
  407d50:	sub    ecx,eax
  407d52:	cmp    ecx,0xfffffffc
  407d55:	mov    eax,0xfffffffc
  407d5a:	cmovb  eax,ecx
  407d5d:	mov    DWORD PTR [rbx+0x24],eax
  407d60:	mov    rax,QWORD PTR [rbx+0x30]
  407d64:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407d6b:	add    r12,r13
  407d6e:	je     407d3a <flatcc_builder_append_union_vector@@Base+0x7a>
  407d70:	shl    r15d,0x3
  407d74:	mov    edx,r15d
  407d77:	mov    rdi,r12
  407d7a:	mov    rsi,r14
  407d7d:	call   4030d0 <memcpy@plt>
  407d82:	mov    rax,r12
  407d85:	pop    rbx
  407d86:	pop    r12
  407d88:	pop    r13
  407d8a:	pop    r14
  407d8c:	pop    r15
  407d8e:	ret    
  407d8f:	lea    rdi,[rip+0x2b95]        # 40a92b <flatcc_builder_padding_base@@Base+0x135b>
  407d96:	lea    rsi,[rip+0x1ac5]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407d9d:	lea    rcx,[rip+0x2ba2]        # 40a946 <flatcc_builder_padding_base@@Base+0x1376>
  407da4:	mov    edx,0x37c
  407da9:	call   403090 <__assert_fail@plt>
  407dae:	lea    rdi,[rip+0x26e9]        # 40a49e <flatcc_builder_padding_base@@Base+0xece>
  407db5:	lea    rsi,[rip+0x1aa6]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407dbc:	lea    rcx,[rip+0x2812]        # 40a5d5 <flatcc_builder_padding_base@@Base+0x1005>
  407dc3:	mov    edx,0x69c
  407dc8:	call   403090 <__assert_fail@plt>
  407dcd:	nop    DWORD PTR [rax]

0000000000407dd0 <flatcc_builder_create_string@@Base>:
  407dd0:	push   rbp
  407dd1:	push   rbx
  407dd2:	sub    rsp,0x98
  407dd9:	xor    ebp,ebp
  407ddb:	mov    rax,rdx
  407dde:	shr    rax,0x20
  407de2:	jne    407eb6 <flatcc_builder_create_string@@Base+0xe6>
  407de8:	mov    rbx,rdi
  407deb:	mov    DWORD PTR [rsp+0x4],edx
  407def:	mov    ebp,DWORD PTR [rdi+0xf0]
  407df5:	mov    eax,edx
  407df7:	not    eax
  407df9:	add    eax,ebp
  407dfb:	and    eax,0x3
  407dfe:	inc    eax
  407e00:	mov    QWORD PTR [rsp+0x8],0x4
  407e09:	lea    rcx,[rsp+0x4]
  407e0e:	mov    QWORD PTR [rsp+0x18],rcx
  407e13:	mov    QWORD PTR [rsp+0x20],0x4
  407e1c:	mov    DWORD PTR [rsp+0x10],0x1
  407e24:	test   rdx,rdx
  407e27:	je     407e4b <flatcc_builder_create_string@@Base+0x7b>
  407e29:	lea    rcx,[rdx+0x4]
  407e2d:	mov    QWORD PTR [rsp+0x8],rcx
  407e32:	mov    QWORD PTR [rsp+0x28],rsi
  407e37:	mov    QWORD PTR [rsp+0x30],rdx
  407e3c:	mov    DWORD PTR [rsp+0x10],0x2
  407e44:	mov    edx,0x2
  407e49:	jmp    407e55 <flatcc_builder_create_string@@Base+0x85>
  407e4b:	mov    ecx,0x4
  407e50:	mov    edx,0x1
  407e55:	mov    esi,eax
  407e57:	lea    r8,[rcx+rsi*1]
  407e5b:	mov    QWORD PTR [rsp+0x8],r8
  407e60:	mov    eax,edx
  407e62:	shl    rax,0x4
  407e66:	lea    rdi,[rip+0x1763]        # 4095d0 <flatcc_builder_padding_base@@Base>
  407e6d:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407e72:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407e77:	inc    edx
  407e79:	mov    DWORD PTR [rsp+0x10],edx
  407e7d:	cmp    r8,0x11
  407e81:	setb   al
  407e84:	add    rcx,rsi
  407e87:	add    rcx,0xfffffffffffffff0
  407e8b:	shr    rcx,0x20
  407e8f:	sete   cl
  407e92:	test   r8d,r8d
  407e95:	jle    407ec2 <flatcc_builder_create_string@@Base+0xf2>
  407e97:	or     al,cl
  407e99:	je     407ec2 <flatcc_builder_create_string@@Base+0xf2>
  407e9b:	sub    ebp,r8d
  407e9e:	mov    rdi,QWORD PTR [rbx+0x38]
  407ea2:	lea    rsi,[rsp+0x18]
  407ea7:	mov    ecx,ebp
  407ea9:	call   QWORD PTR [rbx+0x48]
  407eac:	test   eax,eax
  407eae:	jne    407ee1 <flatcc_builder_create_string@@Base+0x111>
  407eb0:	mov    DWORD PTR [rbx+0xf0],ebp
  407eb6:	mov    eax,ebp
  407eb8:	add    rsp,0x98
  407ebf:	pop    rbx
  407ec0:	pop    rbp
  407ec1:	ret    
  407ec2:	lea    rdi,[rip+0x2b59]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  407ec9:	lea    rsi,[rip+0x1992]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407ed0:	lea    rcx,[rip+0x2a0a]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  407ed7:	mov    edx,0x287
  407edc:	call   403090 <__assert_fail@plt>
  407ee1:	lea    rdi,[rip+0x2b3a]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  407ee8:	lea    rsi,[rip+0x1973]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  407eef:	lea    rcx,[rip+0x29eb]        # 40a8e1 <flatcc_builder_padding_base@@Base+0x1311>
  407ef6:	mov    edx,0x28b
  407efb:	call   403090 <__assert_fail@plt>

0000000000407f00 <flatcc_builder_create_string_str@@Base>:
  407f00:	push   r14
  407f02:	push   rbx
  407f03:	push   rax
  407f04:	mov    rbx,rsi
  407f07:	mov    r14,rdi
  407f0a:	mov    rdi,rsi
  407f0d:	call   403060 <strlen@plt>
  407f12:	mov    rdi,r14
  407f15:	mov    rsi,rbx
  407f18:	mov    rdx,rax
  407f1b:	add    rsp,0x8
  407f1f:	pop    rbx
  407f20:	pop    r14
  407f22:	jmp    407dd0 <flatcc_builder_create_string@@Base>
  407f27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407f30 <flatcc_builder_create_string_strn@@Base>:
  407f30:	push   r15
  407f32:	push   r14
  407f34:	push   rbx
  407f35:	mov    rbx,rdx
  407f38:	mov    r14,rsi
  407f3b:	mov    r15,rdi
  407f3e:	mov    rdi,rsi
  407f41:	xor    esi,esi
  407f43:	call   4030b0 <memchr@plt>
  407f48:	mov    rcx,rax
  407f4b:	sub    rcx,r14
  407f4e:	test   rax,rax
  407f51:	cmovne rbx,rcx
  407f55:	mov    rdi,r15
  407f58:	mov    rsi,r14
  407f5b:	mov    rdx,rbx
  407f5e:	pop    rbx
  407f5f:	pop    r14
  407f61:	pop    r15
  407f63:	jmp    407dd0 <flatcc_builder_create_string@@Base>
  407f68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f70 <flatcc_builder_end_string@@Base>:
  407f70:	push   rbp
  407f71:	push   rbx
  407f72:	push   rax
  407f73:	mov    rax,QWORD PTR [rdi+0x30]
  407f77:	cmp    WORD PTR [rax+0xe],0x6
  407f7c:	jne    408014 <flatcc_builder_end_string@@Base+0xa4>
  407f82:	mov    rbx,rdi
  407f85:	mov    edx,DWORD PTR [rax+0x14]
  407f88:	cmp    edx,DWORD PTR [rdi+0x20]
  407f8b:	jne    408033 <flatcc_builder_end_string@@Base+0xc3>
  407f91:	mov    rsi,QWORD PTR [rbx+0x18]
  407f95:	mov    rdi,rbx
  407f98:	call   407dd0 <flatcc_builder_create_string@@Base>
  407f9d:	mov    ebp,eax
  407f9f:	test   eax,eax
  407fa1:	je     40800b <flatcc_builder_end_string@@Base+0x9b>
  407fa3:	mov    rdi,QWORD PTR [rbx+0x18]
  407fa7:	mov    edx,DWORD PTR [rbx+0x20]
  407faa:	xor    esi,esi
  407fac:	call   4030a0 <memset@plt>
  407fb1:	mov    rax,QWORD PTR [rbx+0x30]
  407fb5:	mov    ecx,DWORD PTR [rax+0x8]
  407fb8:	mov    DWORD PTR [rbx+0x20],ecx
  407fbb:	mov    ecx,DWORD PTR [rax]
  407fbd:	mov    DWORD PTR [rbx+0x28],ecx
  407fc0:	mov    edx,DWORD PTR [rax+0x4]
  407fc3:	mov    rsi,rcx
  407fc6:	add    rsi,QWORD PTR [rbx+0x68]
  407fca:	mov    QWORD PTR [rbx+0x18],rsi
  407fce:	mov    esi,DWORD PTR [rbx+0x70]
  407fd1:	sub    esi,ecx
  407fd3:	cmp    esi,edx
  407fd5:	cmova  esi,edx
  407fd8:	mov    DWORD PTR [rbx+0x24],esi
  407fdb:	movzx  ecx,WORD PTR [rbx+0xea]
  407fe2:	cmp    WORD PTR [rbx+0xe8],cx
  407fe9:	jae    407ff2 <flatcc_builder_end_string@@Base+0x82>
  407feb:	mov    WORD PTR [rbx+0xe8],cx
  407ff2:	movzx  ecx,WORD PTR [rax+0xc]
  407ff6:	mov    WORD PTR [rbx+0xea],cx
  407ffd:	add    rax,0xffffffffffffffdc
  408001:	mov    QWORD PTR [rbx+0x30],rax
  408005:	dec    DWORD PTR [rbx+0x104]
  40800b:	mov    eax,ebp
  40800d:	add    rsp,0x8
  408011:	pop    rbx
  408012:	pop    rbp
  408013:	ret    
  408014:	lea    rdi,[rip+0x1d86]        # 409da1 <flatcc_builder_padding_base@@Base+0x7d1>
  40801b:	lea    rsi,[rip+0x1840]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  408022:	lea    rcx,[rip+0x262b]        # 40a654 <flatcc_builder_padding_base@@Base+0x1084>
  408029:	mov    edx,0x6c4
  40802e:	call   403090 <__assert_fail@plt>
  408033:	lea    rdi,[rip+0x265d]        # 40a697 <flatcc_builder_padding_base@@Base+0x10c7>
  40803a:	lea    rsi,[rip+0x1821]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  408041:	lea    rcx,[rip+0x260c]        # 40a654 <flatcc_builder_padding_base@@Base+0x1084>
  408048:	mov    edx,0x6c5
  40804d:	call   403090 <__assert_fail@plt>
  408052:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40805c:	nop    DWORD PTR [rax+0x0]

0000000000408060 <flatcc_builder_string_edit@@Base>:
  408060:	mov    rax,QWORD PTR [rdi+0x18]
  408064:	ret    
  408065:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40806f:	nop

0000000000408070 <flatcc_builder_string_len@@Base>:
  408070:	mov    rax,QWORD PTR [rdi+0x30]
  408074:	mov    eax,DWORD PTR [rax+0x14]
  408077:	ret    
  408078:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408080 <flatcc_builder_table_edit@@Base>:
  408080:	push   rax
  408081:	mov    rax,QWORD PTR [rdi+0x30]
  408085:	cmp    WORD PTR [rax+0xe],0x3
  40808a:	jne    408098 <flatcc_builder_table_edit@@Base+0x18>
  40808c:	mov    eax,DWORD PTR [rdi+0x20]
  40808f:	add    rax,QWORD PTR [rdi+0x18]
  408093:	sub    rax,rsi
  408096:	pop    rcx
  408097:	ret    
  408098:	lea    rdi,[rip+0x1ff2]        # 40a091 <flatcc_builder_padding_base@@Base+0xac1>
  40809f:	lea    rsi,[rip+0x17bc]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4080a6:	lea    rcx,[rip+0x269c]        # 40a749 <flatcc_builder_padding_base@@Base+0x1179>
  4080ad:	mov    edx,0x702
  4080b2:	call   403090 <__assert_fail@plt>
  4080b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004080c0 <flatcc_builder_table_add_copy@@Base>:
  4080c0:	push   r15
  4080c2:	push   r14
  4080c4:	push   rbx
  4080c5:	mov    r15,rcx
  4080c8:	mov    r14,rdx
  4080cb:	mov    rdx,rcx
  4080ce:	mov    ecx,r8d
  4080d1:	call   407030 <flatcc_builder_table_add@@Base>
  4080d6:	mov    rbx,rax
  4080d9:	test   rax,rax
  4080dc:	je     4080ec <flatcc_builder_table_add_copy@@Base+0x2c>
  4080de:	mov    rdi,rbx
  4080e1:	mov    rsi,r14
  4080e4:	mov    rdx,r15
  4080e7:	call   4030d0 <memcpy@plt>
  4080ec:	mov    rax,rbx
  4080ef:	pop    rbx
  4080f0:	pop    r14
  4080f2:	pop    r15
  4080f4:	ret    
  4080f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080ff:	nop

0000000000408100 <flatcc_builder_push_buffer_alignment@@Base>:
  408100:	movzx  eax,WORD PTR [rdi+0xe8]
  408107:	mov    WORD PTR [rdi+0xe8],0x4
  408110:	ret    
  408111:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40811b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408120 <flatcc_builder_pop_buffer_alignment@@Base>:
  408120:	cmp    WORD PTR [rdi+0xe8],si
  408127:	jae    408130 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408129:	mov    WORD PTR [rdi+0xe8],si
  408130:	ret    
  408131:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40813b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408140 <flatcc_builder_get_buffer_alignment@@Base>:
  408140:	movzx  eax,WORD PTR [rdi+0xe8]
  408147:	ret    
  408148:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408150 <flatcc_builder_set_vtable_clustering@@Base>:
  408150:	xor    eax,eax
  408152:	test   esi,esi
  408154:	sete   al
  408157:	mov    DWORD PTR [rdi+0x124],eax
  40815d:	ret    
  40815e:	xchg   ax,ax

0000000000408160 <flatcc_builder_set_block_align@@Base>:
  408160:	mov    WORD PTR [rdi+0xec],si
  408167:	ret    
  408168:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408170 <flatcc_builder_get_level@@Base>:
  408170:	mov    eax,DWORD PTR [rdi+0x104]
  408176:	ret    
  408177:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408180 <flatcc_builder_set_max_level@@Base>:
  408180:	mov    DWORD PTR [rdi+0x120],esi
  408186:	cmp    DWORD PTR [rdi+0x108],esi
  40818c:	jge    408194 <flatcc_builder_set_max_level@@Base+0x14>
  40818e:	mov    DWORD PTR [rdi+0x108],esi
  408194:	ret    
  408195:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40819f:	nop

00000000004081a0 <flatcc_builder_get_buffer_size@@Base>:
  4081a0:	movsxd rax,DWORD PTR [rdi+0xf4]
  4081a7:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4081ae:	sub    rax,rcx
  4081b1:	ret    
  4081b2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081bc:	nop    DWORD PTR [rax+0x0]

00000000004081c0 <flatcc_builder_get_buffer_start@@Base>:
  4081c0:	mov    eax,DWORD PTR [rdi+0xf0]
  4081c6:	ret    
  4081c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004081d0 <flatcc_builder_get_buffer_end@@Base>:
  4081d0:	mov    eax,DWORD PTR [rdi+0xf4]
  4081d6:	ret    
  4081d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004081e0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4081e0:	mov    QWORD PTR [rdi+0x118],rsi
  4081e7:	ret    
  4081e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081f0 <flatcc_builder_set_identifier@@Base>:
  4081f0:	test   rsi,rsi
  4081f3:	jne    4081fc <flatcc_builder_set_identifier@@Base+0xc>
  4081f5:	lea    rsi,[rip+0x13d4]        # 4095d0 <flatcc_builder_padding_base@@Base>
  4081fc:	mov    eax,DWORD PTR [rsi]
  4081fe:	mov    DWORD PTR [rdi+0x110],eax
  408204:	ret    
  408205:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40820f:	nop

0000000000408210 <flatcc_builder_get_type@@Base>:
  408210:	mov    rax,QWORD PTR [rdi+0x30]
  408214:	test   rax,rax
  408217:	je     40821e <flatcc_builder_get_type@@Base+0xe>
  408219:	movzx  eax,WORD PTR [rax+0xe]
  40821d:	ret    
  40821e:	xor    eax,eax
  408220:	ret    
  408221:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40822b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408230 <flatcc_builder_get_type_at@@Base>:
  408230:	xor    eax,eax
  408232:	test   esi,esi
  408234:	jle    408252 <flatcc_builder_get_type_at@@Base+0x22>
  408236:	mov    ecx,DWORD PTR [rdi+0x104]
  40823c:	cmp    ecx,esi
  40823e:	jl     408252 <flatcc_builder_get_type_at@@Base+0x22>
  408240:	mov    rax,QWORD PTR [rdi+0x30]
  408244:	sub    esi,ecx
  408246:	movsxd rcx,esi
  408249:	lea    rcx,[rcx+rcx*8]
  40824d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408252:	ret    
  408253:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40825d:	nop    DWORD PTR [rax]

0000000000408260 <flatcc_builder_get_direct_buffer@@Base>:
  408260:	cmp    DWORD PTR [rdi+0x128],0x0
  408267:	je     408279 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408269:	mov    rax,QWORD PTR [rdi+0x130]
  408270:	cmp    rax,QWORD PTR [rdi+0x138]
  408277:	je     408288 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408279:	test   rsi,rsi
  40827c:	je     408285 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40827e:	mov    QWORD PTR [rsi],0x0
  408285:	xor    eax,eax
  408287:	ret    
  408288:	test   rsi,rsi
  40828b:	je     408297 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40828d:	mov    rax,QWORD PTR [rdi+0x160]
  408294:	mov    QWORD PTR [rsi],rax
  408297:	mov    rax,QWORD PTR [rdi+0x140]
  40829e:	ret    
  40829f:	nop

00000000004082a0 <flatcc_builder_copy_buffer@@Base>:
  4082a0:	push   rax
  4082a1:	cmp    DWORD PTR [rdi+0x128],0x0
  4082a8:	je     4082bd <flatcc_builder_copy_buffer@@Base+0x1d>
  4082aa:	add    rdi,0x130
  4082b1:	call   408b20 <flatcc_emitter_copy_buffer@@Base>
  4082b6:	test   rax,rax
  4082b9:	je     4082c1 <flatcc_builder_copy_buffer@@Base+0x21>
  4082bb:	pop    rcx
  4082bc:	ret    
  4082bd:	xor    eax,eax
  4082bf:	pop    rcx
  4082c0:	ret    
  4082c1:	lea    rdi,[rip+0xe67]        # 40912f <_IO_stdin_used@@Base+0x12f>
  4082c8:	lea    rsi,[rip+0x1593]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  4082cf:	lea    rcx,[rip+0x24fe]        # 40a7d4 <flatcc_builder_padding_base@@Base+0x1204>
  4082d6:	mov    edx,0x786
  4082db:	call   403090 <__assert_fail@plt>

00000000004082e0 <flatcc_builder_finalize_buffer@@Base>:
  4082e0:	push   r15
  4082e2:	push   r14
  4082e4:	push   rbx
  4082e5:	mov    rbx,rdi
  4082e8:	movsxd r14,DWORD PTR [rdi+0xf4]
  4082ef:	movsxd rax,DWORD PTR [rdi+0xf0]
  4082f6:	sub    r14,rax
  4082f9:	test   rsi,rsi
  4082fc:	je     408301 <flatcc_builder_finalize_buffer@@Base+0x21>
  4082fe:	mov    QWORD PTR [rsi],r14
  408301:	mov    rdi,r14
  408304:	call   4030e0 <malloc@plt>
  408309:	test   rax,rax
  40830c:	je     40833d <flatcc_builder_finalize_buffer@@Base+0x5d>
  40830e:	cmp    DWORD PTR [rbx+0x128],0x0
  408315:	je     40835c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408317:	mov    r15,rax
  40831a:	add    rbx,0x130
  408321:	mov    rdi,rbx
  408324:	mov    rsi,rax
  408327:	mov    rdx,r14
  40832a:	call   408b20 <flatcc_emitter_copy_buffer@@Base>
  40832f:	test   rax,rax
  408332:	je     40837b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408334:	mov    rax,r15
  408337:	pop    rbx
  408338:	pop    r14
  40833a:	pop    r15
  40833c:	ret    
  40833d:	lea    rdi,[rip+0x26de]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  408344:	lea    rsi,[rip+0x1517]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40834b:	lea    rcx,[rip+0x24c7]        # 40a819 <flatcc_builder_padding_base@@Base+0x1249>
  408352:	mov    edx,0x798
  408357:	call   403090 <__assert_fail@plt>
  40835c:	lea    rdi,[rip+0x26bf]        # 40aa22 <flatcc_builder_padding_base@@Base+0x1452>
  408363:	lea    rsi,[rip+0x14f8]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40836a:	lea    rcx,[rip+0x24a8]        # 40a819 <flatcc_builder_padding_base@@Base+0x1249>
  408371:	mov    edx,0x79c
  408376:	call   403090 <__assert_fail@plt>
  40837b:	lea    rdi,[rip+0xdad]        # 40912f <_IO_stdin_used@@Base+0x12f>
  408382:	lea    rsi,[rip+0x14d9]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  408389:	lea    rcx,[rip+0x2444]        # 40a7d4 <flatcc_builder_padding_base@@Base+0x1204>
  408390:	mov    edx,0x786
  408395:	call   403090 <__assert_fail@plt>
  40839a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004083a0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4083a0:	push   r15
  4083a2:	push   r14
  4083a4:	push   r12
  4083a6:	push   rbx
  4083a7:	push   rax
  4083a8:	mov    r14,rsi
  4083ab:	mov    r15,rdi
  4083ae:	movsxd rax,DWORD PTR [rdi+0xf4]
  4083b5:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4083bc:	sub    rax,rcx
  4083bf:	test   rsi,rsi
  4083c2:	je     4083c7 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  4083c4:	mov    QWORD PTR [r14],rax
  4083c7:	movzx  ecx,WORD PTR [r15+0xe8]
  4083cf:	add    rax,rcx
  4083d2:	add    rax,0xffffffffffffffff
  4083d6:	mov    rbx,rcx
  4083d9:	neg    rbx
  4083dc:	and    rbx,rax
  4083df:	cmp    rcx,0x8
  4083e3:	mov    QWORD PTR [rsp],0x0
  4083eb:	mov    esi,0x8
  4083f0:	cmova  rsi,rcx
  4083f4:	mov    rdi,rsp
  4083f7:	mov    rdx,rbx
  4083fa:	call   403130 <posix_memalign@plt>
  4083ff:	mov    r12,QWORD PTR [rsp]
  408403:	test   eax,eax
  408405:	je     408416 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408407:	test   r12,r12
  40840a:	je     408416 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  40840c:	mov    rdi,r12
  40840f:	call   403030 <free@plt>
  408414:	jmp    40845e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408416:	test   r12,r12
  408419:	je     40845e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  40841b:	cmp    DWORD PTR [r15+0x128],0x0
  408423:	je     40840c <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408425:	add    r15,0x130
  40842c:	mov    rdi,r15
  40842f:	mov    rsi,r12
  408432:	mov    rdx,rbx
  408435:	call   408b20 <flatcc_emitter_copy_buffer@@Base>
  40843a:	test   rax,rax
  40843d:	jne    40846d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40843f:	lea    rdi,[rip+0xce9]        # 40912f <_IO_stdin_used@@Base+0x12f>
  408446:	lea    rsi,[rip+0x1415]        # 409862 <flatcc_builder_padding_base@@Base+0x292>
  40844d:	lea    rcx,[rip+0x2380]        # 40a7d4 <flatcc_builder_padding_base@@Base+0x1204>
  408454:	mov    edx,0x786
  408459:	call   403090 <__assert_fail@plt>
  40845e:	test   r14,r14
  408461:	je     40846a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408463:	mov    QWORD PTR [r14],0x0
  40846a:	xor    r12d,r12d
  40846d:	mov    rax,r12
  408470:	add    rsp,0x8
  408474:	pop    rbx
  408475:	pop    r12
  408477:	pop    r14
  408479:	pop    r15
  40847b:	ret    
  40847c:	nop    DWORD PTR [rax+0x0]

0000000000408480 <flatcc_builder_aligned_alloc@@Base>:
  408480:	push   rax
  408481:	mov    rdx,rsi
  408484:	mov    QWORD PTR [rsp],0x0
  40848c:	cmp    rdi,0x8
  408490:	mov    esi,0x8
  408495:	cmova  rsi,rdi
  408499:	mov    rdi,rsp
  40849c:	call   403130 <posix_memalign@plt>
  4084a1:	mov    ecx,eax
  4084a3:	mov    rax,QWORD PTR [rsp]
  4084a7:	test   ecx,ecx
  4084a9:	je     4084c2 <flatcc_builder_aligned_alloc@@Base+0x42>
  4084ab:	test   rax,rax
  4084ae:	je     4084c2 <flatcc_builder_aligned_alloc@@Base+0x42>
  4084b0:	mov    rdi,rax
  4084b3:	call   403030 <free@plt>
  4084b8:	mov    QWORD PTR [rsp],0x0
  4084c0:	xor    eax,eax
  4084c2:	pop    rcx
  4084c3:	ret    
  4084c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4084ce:	xchg   ax,ax

00000000004084d0 <flatcc_builder_aligned_free@@Base>:
  4084d0:	jmp    403030 <free@plt>
  4084d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4084df:	nop

00000000004084e0 <flatcc_builder_get_emit_context@@Base>:
  4084e0:	mov    rax,QWORD PTR [rdi+0x38]
  4084e4:	ret    
  4084e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4084ef:	nop

00000000004084f0 <flatcc_emitter_recycle_page@@Base>:
  4084f0:	mov    rcx,QWORD PTR [rdi]
  4084f3:	mov    eax,0xffffffff
  4084f8:	cmp    rcx,rsi
  4084fb:	je     408552 <flatcc_emitter_recycle_page@@Base+0x62>
  4084fd:	cmp    QWORD PTR [rdi+0x8],rsi
  408501:	je     408552 <flatcc_emitter_recycle_page@@Base+0x62>
  408503:	mov    rax,QWORD PTR [rsi+0xb80]
  40850a:	mov    rdx,QWORD PTR [rsi+0xb88]
  408511:	mov    QWORD PTR [rax+0xb88],rdx
  408518:	mov    rdx,QWORD PTR [rsi+0xb88]
  40851f:	mov    QWORD PTR [rdx+0xb80],rax
  408526:	mov    rax,QWORD PTR [rcx+0xb88]
  40852d:	mov    QWORD PTR [rsi+0xb88],rax
  408534:	mov    QWORD PTR [rsi+0xb80],rcx
  40853b:	mov    QWORD PTR [rax+0xb80],rsi
  408542:	mov    rax,QWORD PTR [rsi+0xb80]
  408549:	mov    QWORD PTR [rax+0xb88],rsi
  408550:	xor    eax,eax
  408552:	ret    
  408553:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40855d:	nop    DWORD PTR [rax]

0000000000408560 <flatcc_emitter_reset@@Base>:
  408560:	push   r14
  408562:	push   rbx
  408563:	push   rax
  408564:	mov    rax,QWORD PTR [rdi]
  408567:	test   rax,rax
  40856a:	je     40864b <flatcc_emitter_reset@@Base+0xeb>
  408570:	mov    rbx,rdi
  408573:	mov    QWORD PTR [rdi+0x8],rax
  408577:	lea    rcx,[rax+0x5c0]
  40857e:	mov    QWORD PTR [rdi+0x10],rcx
  408582:	mov    QWORD PTR [rdi+0x20],rcx
  408586:	mov    QWORD PTR [rdi+0x18],0x5c0
  40858e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408596:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4085a0:	mov    rcx,QWORD PTR [rdi+0x30]
  4085a4:	mov    rdx,QWORD PTR [rdi+0x40]
  4085a8:	test   rdx,rdx
  4085ab:	jne    4085b4 <flatcc_emitter_reset@@Base+0x54>
  4085ad:	mov    QWORD PTR [rbx+0x40],rcx
  4085b1:	mov    rdx,rcx
  4085b4:	lea    rdx,[rdx+rdx*2]
  4085b8:	shr    rdx,0x2
  4085bc:	shr    rcx,0x2
  4085c0:	add    rcx,rdx
  4085c3:	mov    QWORD PTR [rbx+0x40],rcx
  4085c7:	mov    QWORD PTR [rbx+0x30],0x0
  4085cf:	add    rcx,rcx
  4085d2:	cmp    rcx,QWORD PTR [rbx+0x38]
  4085d6:	jae    40864b <flatcc_emitter_reset@@Base+0xeb>
  4085d8:	mov    rdi,QWORD PTR [rax+0xb80]
  4085df:	cmp    rdi,rax
  4085e2:	je     40864b <flatcc_emitter_reset@@Base+0xeb>
  4085e4:	lea    rcx,[rax+0xb80]
  4085eb:	mov    r14,0xfffffffffffff480
  4085f2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085fc:	nop    DWORD PTR [rax+0x0]
  408600:	mov    rdx,QWORD PTR [rdi+0xb80]
  408607:	mov    QWORD PTR [rcx],rdx
  40860a:	mov    rcx,QWORD PTR [rdi+0xb80]
  408611:	mov    QWORD PTR [rcx+0xb88],rax
  408618:	call   403030 <free@plt>
  40861d:	mov    rax,QWORD PTR [rbx+0x38]
  408621:	add    rax,r14
  408624:	mov    QWORD PTR [rbx+0x38],rax
  408628:	mov    rcx,QWORD PTR [rbx+0x40]
  40862c:	add    rcx,rcx
  40862f:	cmp    rcx,rax
  408632:	jae    40864b <flatcc_emitter_reset@@Base+0xeb>
  408634:	mov    rax,QWORD PTR [rbx+0x8]
  408638:	lea    rcx,[rax+0xb80]
  40863f:	mov    rdi,QWORD PTR [rax+0xb80]
  408646:	cmp    rdi,QWORD PTR [rbx]
  408649:	jne    408600 <flatcc_emitter_reset@@Base+0xa0>
  40864b:	add    rsp,0x8
  40864f:	pop    rbx
  408650:	pop    r14
  408652:	ret    
  408653:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40865d:	nop    DWORD PTR [rax]

0000000000408660 <flatcc_emitter_clear@@Base>:
  408660:	push   r14
  408662:	push   rbx
  408663:	push   rax
  408664:	mov    rbx,QWORD PTR [rdi]
  408667:	test   rbx,rbx
  40866a:	je     4086cc <flatcc_emitter_clear@@Base+0x6c>
  40866c:	mov    r14,rdi
  40866f:	mov    rax,QWORD PTR [rbx+0xb88]
  408676:	mov    QWORD PTR [rax+0xb80],0x0
  408681:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40868b:	nop    DWORD PTR [rax+rax*1+0x0]
  408690:	mov    rax,QWORD PTR [rbx+0xb80]
  408697:	test   rax,rax
  40869a:	je     4086ad <flatcc_emitter_clear@@Base+0x4d>
  40869c:	mov    rbx,rax
  40869f:	mov    rdi,QWORD PTR [rax+0xb88]
  4086a6:	call   403030 <free@plt>
  4086ab:	jmp    408690 <flatcc_emitter_clear@@Base+0x30>
  4086ad:	mov    rdi,rbx
  4086b0:	call   403030 <free@plt>
  4086b5:	vxorps xmm0,xmm0,xmm0
  4086b9:	vmovups YMMWORD PTR [r14+0x20],ymm0
  4086bf:	vmovups YMMWORD PTR [r14],ymm0
  4086c4:	mov    QWORD PTR [r14+0x40],0x0
  4086cc:	add    rsp,0x8
  4086d0:	pop    rbx
  4086d1:	pop    r14
  4086d3:	vzeroupper 
  4086d6:	ret    
  4086d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004086e0 <flatcc_emitter@@Base>:
  4086e0:	push   rbp
  4086e1:	push   r15
  4086e3:	push   r14
  4086e5:	push   r13
  4086e7:	push   r12
  4086e9:	push   rbx
  4086ea:	push   rax
  4086eb:	mov    r14d,edx
  4086ee:	mov    r12,rsi
  4086f1:	mov    rbp,rdi
  4086f4:	add    QWORD PTR [rdi+0x30],r8
  4086f8:	test   ecx,ecx
  4086fa:	js     408875 <flatcc_emitter@@Base+0x195>
  408700:	mov    rdx,QWORD PTR [rbp+0x28]
  408704:	cmp    rdx,r8
  408707:	jae    408a28 <flatcc_emitter@@Base+0x348>
  40870d:	xor    eax,eax
  40870f:	test   r14d,r14d
  408712:	je     408b07 <flatcc_emitter@@Base+0x427>
  408718:	mov    r15,QWORD PTR [r12+0x8]
  40871d:	test   r15,r15
  408720:	je     408860 <flatcc_emitter@@Base+0x180>
  408726:	mov    r13,QWORD PTR [r12]
  40872a:	jmp    408759 <flatcc_emitter@@Base+0x79>
  40872c:	mov    rbx,r15
  40872f:	mov    rdi,QWORD PTR [rbp+0x20]
  408733:	mov    rsi,r13
  408736:	mov    rdx,rbx
  408739:	call   4030d0 <memcpy@plt>
  40873e:	add    QWORD PTR [rbp+0x20],rbx
  408742:	add    r13,rbx
  408745:	mov    rdx,QWORD PTR [rbp+0x28]
  408749:	sub    rdx,rbx
  40874c:	mov    QWORD PTR [rbp+0x28],rdx
  408750:	sub    r15,rbx
  408753:	je     408860 <flatcc_emitter@@Base+0x180>
  408759:	mov    rbx,r15
  40875c:	cmp    r15,rdx
  40875f:	jbe    40872f <flatcc_emitter@@Base+0x4f>
  408761:	mov    rbx,rdx
  408764:	test   rbx,rbx
  408767:	je     4087d1 <flatcc_emitter@@Base+0xf1>
  408769:	jmp    40872f <flatcc_emitter@@Base+0x4f>
  40876b:	nop    DWORD PTR [rax+rax*1+0x0]
  408770:	mov    QWORD PTR [rax+0xb88],rbx
  408777:	mov    rcx,QWORD PTR [rbp+0x0]
  40877b:	mov    QWORD PTR [rax+0xb80],rcx
  408782:	mov    QWORD PTR [rcx+0xb88],rax
  408789:	mov    QWORD PTR [rbx+0xb80],rax
  408790:	mov    QWORD PTR [rbp+0x8],rax
  408794:	mov    QWORD PTR [rbp+0x20],rax
  408798:	mov    QWORD PTR [rbp+0x28],0xb80
  4087a0:	mov    rcx,QWORD PTR [rax+0xb88]
  4087a7:	mov    ecx,DWORD PTR [rcx+0xb90]
  4087ad:	mov    edx,0xb80
  4087b2:	add    ecx,edx
  4087b4:	mov    DWORD PTR [rax+0xb90],ecx
  4087ba:	mov    ebx,0xb80
  4087bf:	cmp    r15,rbx
  4087c2:	jbe    40872c <flatcc_emitter@@Base+0x4c>
  4087c8:	test   rbx,rbx
  4087cb:	jne    40872f <flatcc_emitter@@Base+0x4f>
  4087d1:	mov    rbx,QWORD PTR [rbp+0x8]
  4087d5:	test   rbx,rbx
  4087d8:	je     4087e7 <flatcc_emitter@@Base+0x107>
  4087da:	mov    rax,QWORD PTR [rbx+0xb80]
  4087e1:	cmp    rax,QWORD PTR [rbp+0x0]
  4087e5:	jne    408790 <flatcc_emitter@@Base+0xb0>
  4087e7:	mov    edi,0xb98
  4087ec:	call   4030e0 <malloc@plt>
  4087f1:	test   rax,rax
  4087f4:	je     408a3a <flatcc_emitter@@Base+0x35a>
  4087fa:	add    QWORD PTR [rbp+0x38],0xb80
  408802:	test   rbx,rbx
  408805:	jne    408770 <flatcc_emitter@@Base+0x90>
  40880b:	mov    QWORD PTR [rbp+0x0],rax
  40880f:	mov    QWORD PTR [rbp+0x8],rax
  408813:	mov    QWORD PTR [rax+0xb80],rax
  40881a:	mov    QWORD PTR [rax+0xb88],rax
  408821:	mov    rcx,rax
  408824:	add    rcx,0x5c0
  40882b:	mov    QWORD PTR [rbp+0x10],rcx
  40882f:	mov    QWORD PTR [rbp+0x20],rcx
  408833:	mov    QWORD PTR [rbp+0x18],0x5c0
  40883b:	mov    QWORD PTR [rbp+0x28],0x5c0
  408843:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40884d:	mov    ebx,0x5c0
  408852:	cmp    r15,rbx
  408855:	ja     4087c8 <flatcc_emitter@@Base+0xe8>
  40885b:	jmp    40872c <flatcc_emitter@@Base+0x4c>
  408860:	dec    r14d
  408863:	add    r12,0x10
  408867:	test   r14d,r14d
  40886a:	jne    408718 <flatcc_emitter@@Base+0x38>
  408870:	jmp    408b05 <flatcc_emitter@@Base+0x425>
  408875:	lea    rsi,[rbp+0x18]
  408879:	mov    rdx,QWORD PTR [rbp+0x18]
  40887d:	cmp    rdx,r8
  408880:	jae    408a44 <flatcc_emitter@@Base+0x364>
  408886:	xor    eax,eax
  408888:	test   r14d,r14d
  40888b:	je     408b07 <flatcc_emitter@@Base+0x427>
  408891:	mov    QWORD PTR [rsp],rsi
  408895:	movsxd rax,r14d
  408898:	shl    rax,0x4
  40889c:	add    r12,rax
  40889f:	mov    edx,0xfffff480
  4088a4:	mov    r15,QWORD PTR [r12-0x8]
  4088a9:	add    r12,0xfffffffffffffff0
  4088ad:	test   r15,r15
  4088b0:	je     408a1a <flatcc_emitter@@Base+0x33a>
  4088b6:	mov    r13,QWORD PTR [r12]
  4088ba:	add    r13,r15
  4088bd:	jmp    4088f1 <flatcc_emitter@@Base+0x211>
  4088bf:	nop
  4088c0:	mov    rbx,r15
  4088c3:	mov    rdi,QWORD PTR [rbp+0x10]
  4088c7:	sub    rdi,rbx
  4088ca:	mov    QWORD PTR [rbp+0x10],rdi
  4088ce:	sub    rax,rbx
  4088d1:	mov    QWORD PTR [rbp+0x18],rax
  4088d5:	sub    r13,rbx
  4088d8:	mov    rsi,r13
  4088db:	mov    rdx,rbx
  4088de:	call   4030d0 <memcpy@plt>
  4088e3:	mov    edx,0xfffff480
  4088e8:	sub    r15,rbx
  4088eb:	je     408a1a <flatcc_emitter@@Base+0x33a>
  4088f1:	mov    rax,QWORD PTR [rsp]
  4088f5:	mov    rax,QWORD PTR [rax]
  4088f8:	cmp    r15,rax
  4088fb:	ja     408948 <flatcc_emitter@@Base+0x268>
  4088fd:	jmp    4088c0 <flatcc_emitter@@Base+0x1e0>
  4088ff:	nop
  408900:	mov    ecx,DWORD PTR [rbx+0xb90]
  408906:	add    ecx,edx
  408908:	mov    DWORD PTR [rax+0xb90],ecx
  40890e:	mov    QWORD PTR [rbp+0x0],rax
  408912:	lea    rcx,[rax+0xb80]
  408919:	mov    QWORD PTR [rbp+0x10],rcx
  40891d:	mov    QWORD PTR [rbp+0x18],0xb80
  408925:	mov    rcx,QWORD PTR [rax+0xb80]
  40892c:	mov    ecx,DWORD PTR [rcx+0xb90]
  408932:	add    ecx,edx
  408934:	mov    DWORD PTR [rax+0xb90],ecx
  40893a:	mov    eax,0xb80
  40893f:	cmp    r15,rax
  408942:	jbe    4088c0 <flatcc_emitter@@Base+0x1e0>
  408948:	mov    rbx,rax
  40894b:	test   rax,rax
  40894e:	jne    4088c3 <flatcc_emitter@@Base+0x1e3>
  408954:	mov    rbx,QWORD PTR [rbp+0x0]
  408958:	test   rbx,rbx
  40895b:	je     40896a <flatcc_emitter@@Base+0x28a>
  40895d:	mov    rax,QWORD PTR [rbx+0xb88]
  408964:	cmp    rax,QWORD PTR [rbp+0x8]
  408968:	jne    408900 <flatcc_emitter@@Base+0x220>
  40896a:	mov    edi,0xb98
  40896f:	call   4030e0 <malloc@plt>
  408974:	test   rax,rax
  408977:	je     408a3a <flatcc_emitter@@Base+0x35a>
  40897d:	add    QWORD PTR [rbp+0x38],0xb80
  408985:	test   rbx,rbx
  408988:	je     4089c0 <flatcc_emitter@@Base+0x2e0>
  40898a:	mov    rcx,QWORD PTR [rbp+0x8]
  40898e:	mov    QWORD PTR [rax+0xb88],rcx
  408995:	mov    QWORD PTR [rax+0xb80],rbx
  40899c:	mov    QWORD PTR [rbx+0xb88],rax
  4089a3:	mov    QWORD PTR [rcx+0xb80],rax
  4089aa:	mov    QWORD PTR [rbp+0x0],rax
  4089ae:	mov    edx,0xfffff480
  4089b3:	jmp    408912 <flatcc_emitter@@Base+0x232>
  4089b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4089c0:	mov    QWORD PTR [rbp+0x0],rax
  4089c4:	mov    QWORD PTR [rbp+0x8],rax
  4089c8:	mov    QWORD PTR [rax+0xb80],rax
  4089cf:	mov    QWORD PTR [rax+0xb88],rax
  4089d6:	mov    rcx,rax
  4089d9:	add    rcx,0x5c0
  4089e0:	mov    QWORD PTR [rbp+0x10],rcx
  4089e4:	mov    QWORD PTR [rbp+0x20],rcx
  4089e8:	mov    QWORD PTR [rbp+0x18],0x5c0
  4089f0:	mov    QWORD PTR [rbp+0x28],0x5c0
  4089f8:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408a02:	mov    eax,0x5c0
  408a07:	mov    edx,0xfffff480
  408a0c:	cmp    r15,rax
  408a0f:	ja     408948 <flatcc_emitter@@Base+0x268>
  408a15:	jmp    4088c0 <flatcc_emitter@@Base+0x1e0>
  408a1a:	dec    r14d
  408a1d:	jne    4088a4 <flatcc_emitter@@Base+0x1c4>
  408a23:	jmp    408b05 <flatcc_emitter@@Base+0x425>
  408a28:	lea    rsi,[rbp+0x28]
  408a2c:	mov    rbx,QWORD PTR [rbp+0x20]
  408a30:	lea    rcx,[rbx+r8*1]
  408a34:	mov    QWORD PTR [rbp+0x20],rcx
  408a38:	jmp    408a4f <flatcc_emitter@@Base+0x36f>
  408a3a:	mov    eax,0xffffffff
  408a3f:	jmp    408b07 <flatcc_emitter@@Base+0x427>
  408a44:	mov    rbx,QWORD PTR [rbp+0x10]
  408a48:	sub    rbx,r8
  408a4b:	mov    QWORD PTR [rbp+0x10],rbx
  408a4f:	sub    rdx,r8
  408a52:	mov    QWORD PTR [rsi],rdx
  408a55:	xor    eax,eax
  408a57:	test   r14d,r14d
  408a5a:	je     408b07 <flatcc_emitter@@Base+0x427>
  408a60:	lea    r15d,[r14-0x1]
  408a64:	mov    r13d,r14d
  408a67:	and    r13d,0x3
  408a6b:	je     408a94 <flatcc_emitter@@Base+0x3b4>
  408a6d:	xor    ebp,ebp
  408a6f:	nop
  408a70:	mov    rsi,QWORD PTR [r12]
  408a74:	mov    rdx,QWORD PTR [r12+0x8]
  408a79:	mov    rdi,rbx
  408a7c:	call   4030d0 <memcpy@plt>
  408a81:	add    rbx,QWORD PTR [r12+0x8]
  408a86:	add    r12,0x10
  408a8a:	inc    ebp
  408a8c:	cmp    r13d,ebp
  408a8f:	jne    408a70 <flatcc_emitter@@Base+0x390>
  408a91:	sub    r14d,ebp
  408a94:	cmp    r15d,0x3
  408a98:	jb     408b05 <flatcc_emitter@@Base+0x425>
  408a9a:	nop    WORD PTR [rax+rax*1+0x0]
  408aa0:	mov    rsi,QWORD PTR [r12]
  408aa4:	mov    rdx,QWORD PTR [r12+0x8]
  408aa9:	mov    rdi,rbx
  408aac:	call   4030d0 <memcpy@plt>
  408ab1:	add    rbx,QWORD PTR [r12+0x8]
  408ab6:	mov    rsi,QWORD PTR [r12+0x10]
  408abb:	mov    rdx,QWORD PTR [r12+0x18]
  408ac0:	mov    rdi,rbx
  408ac3:	call   4030d0 <memcpy@plt>
  408ac8:	add    rbx,QWORD PTR [r12+0x18]
  408acd:	mov    rsi,QWORD PTR [r12+0x20]
  408ad2:	mov    rdx,QWORD PTR [r12+0x28]
  408ad7:	mov    rdi,rbx
  408ada:	call   4030d0 <memcpy@plt>
  408adf:	add    rbx,QWORD PTR [r12+0x28]
  408ae4:	mov    rsi,QWORD PTR [r12+0x30]
  408ae9:	mov    rdx,QWORD PTR [r12+0x38]
  408aee:	mov    rdi,rbx
  408af1:	call   4030d0 <memcpy@plt>
  408af6:	add    rbx,QWORD PTR [r12+0x38]
  408afb:	add    r12,0x40
  408aff:	add    r14d,0xfffffffc
  408b03:	jne    408aa0 <flatcc_emitter@@Base+0x3c0>
  408b05:	xor    eax,eax
  408b07:	add    rsp,0x8
  408b0b:	pop    rbx
  408b0c:	pop    r12
  408b0e:	pop    r13
  408b10:	pop    r14
  408b12:	pop    r15
  408b14:	pop    rbp
  408b15:	ret    
  408b16:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408b20 <flatcc_emitter_copy_buffer@@Base>:
  408b20:	push   r15
  408b22:	push   r14
  408b24:	push   r13
  408b26:	push   r12
  408b28:	push   rbx
  408b29:	mov    rax,rdx
  408b2c:	mov    rdx,QWORD PTR [rdi+0x30]
  408b30:	cmp    rdx,rax
  408b33:	ja     408bcb <flatcc_emitter_copy_buffer@@Base+0xab>
  408b39:	mov    r14,rdi
  408b3c:	mov    rax,QWORD PTR [rdi]
  408b3f:	test   rax,rax
  408b42:	je     408bcb <flatcc_emitter_copy_buffer@@Base+0xab>
  408b48:	mov    r12,rsi
  408b4b:	cmp    rax,QWORD PTR [r14+0x8]
  408b4f:	je     408bdb <flatcc_emitter_copy_buffer@@Base+0xbb>
  408b55:	mov    r15d,0xb80
  408b5b:	mov    r13d,0xb80
  408b61:	sub    r13,QWORD PTR [r14+0x18]
  408b65:	mov    rsi,QWORD PTR [r14+0x10]
  408b69:	mov    rdi,r12
  408b6c:	mov    rdx,r13
  408b6f:	call   4030d0 <memcpy@plt>
  408b74:	add    r13,r12
  408b77:	mov    rax,QWORD PTR [r14]
  408b7a:	mov    rbx,QWORD PTR [rax+0xb80]
  408b81:	cmp    rbx,QWORD PTR [r14+0x8]
  408b85:	je     408bb4 <flatcc_emitter_copy_buffer@@Base+0x94>
  408b87:	nop    WORD PTR [rax+rax*1+0x0]
  408b90:	mov    edx,0xb80
  408b95:	mov    rdi,r13
  408b98:	mov    rsi,rbx
  408b9b:	call   4030d0 <memcpy@plt>
  408ba0:	add    r13,0xb80
  408ba7:	mov    rbx,QWORD PTR [rbx+0xb80]
  408bae:	cmp    rbx,QWORD PTR [r14+0x8]
  408bb2:	jne    408b90 <flatcc_emitter_copy_buffer@@Base+0x70>
  408bb4:	sub    r15,QWORD PTR [r14+0x28]
  408bb8:	mov    rdi,r13
  408bbb:	mov    rsi,rbx
  408bbe:	mov    rdx,r15
  408bc1:	call   4030d0 <memcpy@plt>
  408bc6:	mov    r12,r13
  408bc9:	jmp    408bce <flatcc_emitter_copy_buffer@@Base+0xae>
  408bcb:	xor    r12d,r12d
  408bce:	mov    rax,r12
  408bd1:	pop    rbx
  408bd2:	pop    r12
  408bd4:	pop    r13
  408bd6:	pop    r14
  408bd8:	pop    r15
  408bda:	ret    
  408bdb:	mov    rsi,QWORD PTR [r14+0x10]
  408bdf:	mov    rdi,r12
  408be2:	call   4030d0 <memcpy@plt>
  408be7:	jmp    408bce <flatcc_emitter_copy_buffer@@Base+0xae>
  408be9:	nop    DWORD PTR [rax+0x0]

0000000000408bf0 <__libc_csu_init@@Base>:
  408bf0:	endbr64 
  408bf4:	push   r15
  408bf6:	lea    r15,[rip+0x5203]        # 40de00 <flatcc_builder_padding_base@@Base+0x4830>
  408bfd:	push   r14
  408bff:	mov    r14,rdx
  408c02:	push   r13
  408c04:	mov    r13,rsi
  408c07:	push   r12
  408c09:	mov    r12d,edi
  408c0c:	push   rbp
  408c0d:	lea    rbp,[rip+0x51f4]        # 40de08 <flatcc_builder_padding_base@@Base+0x4838>
  408c14:	push   rbx
  408c15:	sub    rbp,r15
  408c18:	sub    rsp,0x8
  408c1c:	call   403000 <free@plt-0x30>
  408c21:	sar    rbp,0x3
  408c25:	je     408c46 <__libc_csu_init@@Base+0x56>
  408c27:	xor    ebx,ebx
  408c29:	nop    DWORD PTR [rax+0x0]
  408c30:	mov    rdx,r14
  408c33:	mov    rsi,r13
  408c36:	mov    edi,r12d
  408c39:	call   QWORD PTR [r15+rbx*8]
  408c3d:	add    rbx,0x1
  408c41:	cmp    rbp,rbx
  408c44:	jne    408c30 <__libc_csu_init@@Base+0x40>
  408c46:	add    rsp,0x8
  408c4a:	pop    rbx
  408c4b:	pop    rbp
  408c4c:	pop    r12
  408c4e:	pop    r13
  408c50:	pop    r14
  408c52:	pop    r15
  408c54:	ret    
  408c55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408c60 <__libc_csu_fini@@Base>:
  408c60:	endbr64 
  408c64:	ret    

Disassembly of section .fini:

0000000000408c68 <.fini>:
  408c68:	endbr64 
  408c6c:	sub    rsp,0x8
  408c70:	add    rsp,0x8
  408c74:	ret    
