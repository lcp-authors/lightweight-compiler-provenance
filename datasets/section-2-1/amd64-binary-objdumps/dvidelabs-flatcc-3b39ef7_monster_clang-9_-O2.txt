
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xbfe9]        # 40eff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xbfe2]        # 40f008 <flatcc_builder_padding_base@@Base+0x4bb8>
  403026:	jmp    QWORD PTR [rip+0xbfe4]        # 40f010 <flatcc_builder_padding_base@@Base+0x4bc0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xbfe2]        # 40f018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xbfda]        # 40f020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xbfd2]        # 40f028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xbfca]        # 40f030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0xbfc2]        # 40f038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0xbfba]        # 40f040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <strcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0xbfb2]        # 40f048 <strcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcpy@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xbfaa]        # 40f050 <memcpy@GLIBC_2.14>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <malloc@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xbfa2]        # 40f058 <malloc@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <bcmp@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xbf9a]        # 40f060 <bcmp@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xbf92]        # 40f068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <posix_memalign@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xbf8a]        # 40f070 <posix_memalign@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

00000000004030f0 <_start@@Base>:
  4030f0:	endbr64 
  4030f4:	xor    ebp,ebp
  4030f6:	mov    r9,rdx
  4030f9:	pop    rsi
  4030fa:	mov    rdx,rsp
  4030fd:	and    rsp,0xfffffffffffffff0
  403101:	push   rax
  403102:	push   rsp
  403103:	mov    r8,0x409110
  40310a:	mov    rcx,0x4090a0
  403111:	mov    rdi,0x403ea0
  403118:	call   QWORD PTR [rip+0xbed2]        # 40eff0 <__libc_start_main@GLIBC_2.2.5>
  40311e:	hlt    
  40311f:	nop
  403120:	endbr64 
  403124:	ret    
  403125:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40312f:	nop
  403130:	mov    eax,0x40f088
  403135:	cmp    rax,0x40f088
  40313b:	je     403150 <_start@@Base+0x60>
  40313d:	mov    eax,0x0
  403142:	test   rax,rax
  403145:	je     403150 <_start@@Base+0x60>
  403147:	mov    edi,0x40f088
  40314c:	jmp    rax
  40314e:	xchg   ax,ax
  403150:	ret    
  403151:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40315c:	nop    DWORD PTR [rax+0x0]
  403160:	mov    esi,0x40f088
  403165:	sub    rsi,0x40f088
  40316c:	mov    rax,rsi
  40316f:	shr    rsi,0x3f
  403173:	sar    rax,0x3
  403177:	add    rsi,rax
  40317a:	sar    rsi,1
  40317d:	je     403190 <_start@@Base+0xa0>
  40317f:	mov    eax,0x0
  403184:	test   rax,rax
  403187:	je     403190 <_start@@Base+0xa0>
  403189:	mov    edi,0x40f088
  40318e:	jmp    rax
  403190:	ret    
  403191:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40319c:	nop    DWORD PTR [rax+0x0]
  4031a0:	endbr64 
  4031a4:	cmp    BYTE PTR [rip+0xbedd],0x0        # 40f088 <__bss_start@@Base>
  4031ab:	jne    4031c0 <_start@@Base+0xd0>
  4031ad:	push   rbp
  4031ae:	mov    rbp,rsp
  4031b1:	call   403130 <_start@@Base+0x40>
  4031b6:	mov    BYTE PTR [rip+0xbecb],0x1        # 40f088 <__bss_start@@Base>
  4031bd:	pop    rbp
  4031be:	ret    
  4031bf:	nop
  4031c0:	ret    
  4031c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031cc:	nop    DWORD PTR [rax+0x0]
  4031d0:	endbr64 
  4031d4:	jmp    403160 <_start@@Base+0x70>
  4031d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031e0 <create_monster_bottom_up@@Base>:
  4031e0:	push   rbp
  4031e1:	push   r15
  4031e3:	push   r14
  4031e5:	push   r13
  4031e7:	push   r12
  4031e9:	push   rbx
  4031ea:	sub    rsp,0x18
  4031ee:	mov    r12d,esi
  4031f1:	mov    rbx,rdi
  4031f4:	lea    rsi,[rip+0x6e15]        # 40a010 <_IO_stdin_used@@Base+0x10>
  4031fb:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  403200:	mov    ebp,eax
  403202:	lea    rsi,[rip+0x6e0d]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403209:	mov    rdi,rbx
  40320c:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  403211:	mov    r15d,eax
  403214:	mov    rdi,rbx
  403217:	mov    esi,0x2
  40321c:	call   406160 <flatcc_builder_start_table@@Base>
  403221:	xor    r13d,r13d
  403224:	mov    r14d,0x0
  40322a:	test   ebp,ebp
  40322c:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  40322e:	mov    r14d,0x0
  403234:	test   eax,eax
  403236:	jne    403291 <create_monster_bottom_up@@Base+0xb1>
  403238:	xor    r14d,r14d
  40323b:	mov    rdi,rbx
  40323e:	xor    esi,esi
  403240:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403245:	test   rax,rax
  403248:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  40324a:	mov    DWORD PTR [rax],ebp
  40324c:	mov    edx,0x2
  403251:	mov    rdi,rbx
  403254:	mov    esi,0x1
  403259:	mov    ecx,0x2
  40325e:	call   4074e0 <flatcc_builder_table_add@@Base>
  403263:	test   rax,rax
  403266:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  403268:	mov    WORD PTR [rax],0x3
  40326d:	lea    rsi,[rip+0x71ae]        # 40a422 <_IO_stdin_used@@Base+0x422>
  403274:	mov    rdi,rbx
  403277:	xor    edx,edx
  403279:	call   406b00 <flatcc_builder_check_required@@Base>
  40327e:	test   eax,eax
  403280:	je     40363b <create_monster_bottom_up@@Base+0x45b>
  403286:	mov    rdi,rbx
  403289:	call   406b70 <flatcc_builder_end_table@@Base>
  40328e:	mov    r14d,eax
  403291:	mov    rdi,rbx
  403294:	mov    esi,0x2
  403299:	call   406160 <flatcc_builder_start_table@@Base>
  40329e:	test   r15d,r15d
  4032a1:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032a3:	test   eax,eax
  4032a5:	jne    403301 <create_monster_bottom_up@@Base+0x121>
  4032a7:	xor    r13d,r13d
  4032aa:	mov    rdi,rbx
  4032ad:	xor    esi,esi
  4032af:	call   407380 <flatcc_builder_table_add_offset@@Base>
  4032b4:	test   rax,rax
  4032b7:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032b9:	mov    DWORD PTR [rax],r15d
  4032bc:	mov    edx,0x2
  4032c1:	mov    rdi,rbx
  4032c4:	mov    esi,0x1
  4032c9:	mov    ecx,0x2
  4032ce:	call   4074e0 <flatcc_builder_table_add@@Base>
  4032d3:	test   rax,rax
  4032d6:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032d8:	mov    WORD PTR [rax],0x5
  4032dd:	lea    rsi,[rip+0x713e]        # 40a422 <_IO_stdin_used@@Base+0x422>
  4032e4:	mov    rdi,rbx
  4032e7:	xor    edx,edx
  4032e9:	call   406b00 <flatcc_builder_check_required@@Base>
  4032ee:	test   eax,eax
  4032f0:	je     40363b <create_monster_bottom_up@@Base+0x45b>
  4032f6:	mov    rdi,rbx
  4032f9:	call   406b70 <flatcc_builder_end_table@@Base>
  4032fe:	mov    r13d,eax
  403301:	lea    rsi,[rip+0x6d12]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  403308:	mov    rdi,rbx
  40330b:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  403310:	mov    r15d,eax
  403313:	movabs rax,0x706050403020100
  40331d:	mov    QWORD PTR [rsp+0x8],rax
  403322:	mov    WORD PTR [rsp+0x10],0x908
  403329:	lea    rsi,[rsp+0x8]
  40332e:	mov    edx,0xa
  403333:	mov    ecx,0x1
  403338:	mov    r9d,0xffffffff
  40333e:	mov    rdi,rbx
  403341:	mov    r8d,0x1
  403347:	call   406d00 <flatcc_builder_create_vector@@Base>
  40334c:	mov    DWORD PTR [rsp+0x4],eax
  403350:	mov    rdi,rbx
  403353:	call   405d70 <flatcc_builder_start_offset_vector@@Base>
  403358:	test   r14d,r14d
  40335b:	je     403368 <create_monster_bottom_up@@Base+0x188>
  40335d:	mov    rdi,rbx
  403360:	mov    esi,r14d
  403363:	call   405740 <flatcc_builder_offset_vector_push@@Base>
  403368:	test   r13d,r13d
  40336b:	je     403378 <create_monster_bottom_up@@Base+0x198>
  40336d:	mov    rdi,rbx
  403370:	mov    esi,r13d
  403373:	call   405740 <flatcc_builder_offset_vector_push@@Base>
  403378:	mov    rdi,rbx
  40337b:	call   405f30 <flatcc_builder_end_offset_vector@@Base>
  403380:	mov    r14d,eax
  403383:	mov    rdi,rbx
  403386:	xor    esi,esi
  403388:	xor    edx,edx
  40338a:	xor    ecx,ecx
  40338c:	call   404ec0 <flatcc_builder_start_buffer@@Base>
  403391:	test   r12d,r12d
  403394:	je     4034d6 <create_monster_bottom_up@@Base+0x2f6>
  40339a:	test   eax,eax
  40339c:	jne    4033ab <create_monster_bottom_up@@Base+0x1cb>
  40339e:	mov    rdi,rbx
  4033a1:	mov    esi,0xa
  4033a6:	call   406160 <flatcc_builder_start_table@@Base>
  4033ab:	mov    edx,0xc
  4033b0:	mov    rdi,rbx
  4033b3:	xor    esi,esi
  4033b5:	mov    ecx,0x4
  4033ba:	call   4074e0 <flatcc_builder_table_add@@Base>
  4033bf:	test   rax,rax
  4033c2:	je     4033d8 <create_monster_bottom_up@@Base+0x1f8>
  4033c4:	movabs rcx,0x400000003f800000
  4033ce:	mov    QWORD PTR [rax],rcx
  4033d1:	mov    DWORD PTR [rax+0x8],0x40400000
  4033d8:	mov    edx,0x2
  4033dd:	mov    rdi,rbx
  4033e0:	mov    esi,0x2
  4033e5:	mov    ecx,0x2
  4033ea:	call   4074e0 <flatcc_builder_table_add@@Base>
  4033ef:	test   rax,rax
  4033f2:	je     4033f9 <create_monster_bottom_up@@Base+0x219>
  4033f4:	mov    WORD PTR [rax],0x12c
  4033f9:	test   r15d,r15d
  4033fc:	je     403413 <create_monster_bottom_up@@Base+0x233>
  4033fe:	mov    rdi,rbx
  403401:	mov    esi,0x3
  403406:	call   407380 <flatcc_builder_table_add_offset@@Base>
  40340b:	test   rax,rax
  40340e:	je     403413 <create_monster_bottom_up@@Base+0x233>
  403410:	mov    DWORD PTR [rax],r15d
  403413:	mov    ebp,DWORD PTR [rsp+0x4]
  403417:	test   ebp,ebp
  403419:	je     40342f <create_monster_bottom_up@@Base+0x24f>
  40341b:	mov    rdi,rbx
  40341e:	mov    esi,0x5
  403423:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403428:	test   rax,rax
  40342b:	je     40342f <create_monster_bottom_up@@Base+0x24f>
  40342d:	mov    DWORD PTR [rax],ebp
  40342f:	mov    edx,0x1
  403434:	mov    rdi,rbx
  403437:	mov    esi,0x6
  40343c:	mov    ecx,0x1
  403441:	call   4074e0 <flatcc_builder_table_add@@Base>
  403446:	test   rax,rax
  403449:	je     40344e <create_monster_bottom_up@@Base+0x26e>
  40344b:	mov    BYTE PTR [rax],0x0
  40344e:	test   r14d,r14d
  403451:	je     403468 <create_monster_bottom_up@@Base+0x288>
  403453:	mov    rdi,rbx
  403456:	mov    esi,0x7
  40345b:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403460:	test   rax,rax
  403463:	je     403468 <create_monster_bottom_up@@Base+0x288>
  403465:	mov    DWORD PTR [rax],r14d
  403468:	test   r13d,r13d
  40346b:	je     4034a5 <create_monster_bottom_up@@Base+0x2c5>
  40346d:	mov    edx,0x1
  403472:	mov    rdi,rbx
  403475:	mov    esi,0x8
  40347a:	mov    ecx,0x1
  40347f:	call   4074e0 <flatcc_builder_table_add@@Base>
  403484:	test   rax,rax
  403487:	je     4034a5 <create_monster_bottom_up@@Base+0x2c5>
  403489:	mov    rbp,rax
  40348c:	mov    rdi,rbx
  40348f:	mov    esi,0x9
  403494:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403499:	test   rax,rax
  40349c:	je     4034a5 <create_monster_bottom_up@@Base+0x2c5>
  40349e:	mov    BYTE PTR [rbp+0x0],0x1
  4034a2:	mov    DWORD PTR [rax],r13d
  4034a5:	lea    rsi,[rip+0x6f78]        # 40a424 <_IO_stdin_used@@Base+0x424>
  4034ac:	mov    rdi,rbx
  4034af:	xor    edx,edx
  4034b1:	call   406b00 <flatcc_builder_check_required@@Base>
  4034b6:	test   eax,eax
  4034b8:	je     40361c <create_monster_bottom_up@@Base+0x43c>
  4034be:	mov    rdi,rbx
  4034c1:	call   406b70 <flatcc_builder_end_table@@Base>
  4034c6:	mov    r14d,eax
  4034c9:	mov    rdi,rbx
  4034cc:	mov    esi,r14d
  4034cf:	call   4050e0 <flatcc_builder_end_buffer@@Base>
  4034d4:	jmp    4034da <create_monster_bottom_up@@Base+0x2fa>
  4034d6:	test   eax,eax
  4034d8:	je     4034eb <create_monster_bottom_up@@Base+0x30b>
  4034da:	xor    eax,eax
  4034dc:	add    rsp,0x18
  4034e0:	pop    rbx
  4034e1:	pop    r12
  4034e3:	pop    r13
  4034e5:	pop    r14
  4034e7:	pop    r15
  4034e9:	pop    rbp
  4034ea:	ret    
  4034eb:	mov    ebp,r14d
  4034ee:	mov    rdi,rbx
  4034f1:	mov    esi,0xa
  4034f6:	call   406160 <flatcc_builder_start_table@@Base>
  4034fb:	xor    r14d,r14d
  4034fe:	test   eax,eax
  403500:	jne    4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403502:	xor    r14d,r14d
  403505:	mov    edx,0xc
  40350a:	mov    rdi,rbx
  40350d:	xor    esi,esi
  40350f:	mov    ecx,0x4
  403514:	call   4074e0 <flatcc_builder_table_add@@Base>
  403519:	test   rax,rax
  40351c:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  40351e:	movabs rcx,0x400000003f800000
  403528:	mov    QWORD PTR [rax],rcx
  40352b:	mov    DWORD PTR [rax+0x8],0x40400000
  403532:	test   r15d,r15d
  403535:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403537:	mov    rdi,rbx
  40353a:	mov    esi,0x3
  40353f:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403544:	test   rax,rax
  403547:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403549:	mov    DWORD PTR [rax],r15d
  40354c:	mov    r15d,DWORD PTR [rsp+0x4]
  403551:	test   r15d,r15d
  403554:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  40355a:	mov    rdi,rbx
  40355d:	mov    esi,0x5
  403562:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403567:	test   rax,rax
  40356a:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403570:	mov    DWORD PTR [rax],r15d
  403573:	test   ebp,ebp
  403575:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  40357b:	mov    rdi,rbx
  40357e:	mov    esi,0x7
  403583:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403588:	test   rax,rax
  40358b:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403591:	mov    DWORD PTR [rax],ebp
  403593:	mov    rdi,rbx
  403596:	mov    esi,0x9
  40359b:	call   407380 <flatcc_builder_table_add_offset@@Base>
  4035a0:	test   rax,rax
  4035a3:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  4035a9:	mov    DWORD PTR [rax],r13d
  4035ac:	mov    edx,0x2
  4035b1:	mov    rdi,rbx
  4035b4:	mov    esi,0x2
  4035b9:	mov    ecx,0x2
  4035be:	call   4074e0 <flatcc_builder_table_add@@Base>
  4035c3:	test   rax,rax
  4035c6:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  4035cc:	mov    WORD PTR [rax],0x12c
  4035d1:	mov    edx,0x1
  4035d6:	mov    rdi,rbx
  4035d9:	mov    esi,0x6
  4035de:	mov    ecx,0x1
  4035e3:	call   4074e0 <flatcc_builder_table_add@@Base>
  4035e8:	test   rax,rax
  4035eb:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  4035f1:	mov    BYTE PTR [rax],0x0
  4035f4:	mov    edx,0x1
  4035f9:	mov    rdi,rbx
  4035fc:	mov    esi,0x8
  403601:	mov    ecx,0x1
  403606:	call   4074e0 <flatcc_builder_table_add@@Base>
  40360b:	test   rax,rax
  40360e:	je     4034c9 <create_monster_bottom_up@@Base+0x2e9>
  403614:	mov    BYTE PTR [rax],0x1
  403617:	jmp    4034a5 <create_monster_bottom_up@@Base+0x2c5>
  40361c:	lea    rdi,[rip+0x6be9]        # 40a20c <_IO_stdin_used@@Base+0x20c>
  403623:	lea    rsi,[rip+0x6b1f]        # 40a149 <_IO_stdin_used@@Base+0x149>
  40362a:	lea    rcx,[rip+0x6c7a]        # 40a2ab <_IO_stdin_used@@Base+0x2ab>
  403631:	mov    edx,0x32
  403636:	call   403060 <__assert_fail@plt>
  40363b:	lea    rdi,[rip+0x6a6b]        # 40a0ad <_IO_stdin_used@@Base+0xad>
  403642:	lea    rsi,[rip+0x6b00]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403649:	lea    rcx,[rip+0x6b6f]        # 40a1bf <_IO_stdin_used@@Base+0x1bf>
  403650:	mov    edx,0x34
  403655:	call   403060 <__assert_fail@plt>
  40365a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403660 <create_monster_top_down@@Base>:
  403660:	push   rbp
  403661:	push   r14
  403663:	push   rbx
  403664:	sub    rsp,0x10
  403668:	mov    rbx,rdi
  40366b:	movabs rax,0x706050403020100
  403675:	mov    QWORD PTR [rsp],rax
  403679:	mov    WORD PTR [rsp+0x8],0x908
  403680:	xor    esi,esi
  403682:	xor    edx,edx
  403684:	xor    ecx,ecx
  403686:	call   404ec0 <flatcc_builder_start_buffer@@Base>
  40368b:	test   eax,eax
  40368d:	jne    40369c <create_monster_top_down@@Base+0x3c>
  40368f:	mov    rdi,rbx
  403692:	mov    esi,0xa
  403697:	call   406160 <flatcc_builder_start_table@@Base>
  40369c:	mov    edx,0xc
  4036a1:	mov    rdi,rbx
  4036a4:	xor    esi,esi
  4036a6:	mov    ecx,0x4
  4036ab:	call   4074e0 <flatcc_builder_table_add@@Base>
  4036b0:	test   rax,rax
  4036b3:	je     4036c9 <create_monster_top_down@@Base+0x69>
  4036b5:	movabs rcx,0x400000003f800000
  4036bf:	mov    QWORD PTR [rax],rcx
  4036c2:	mov    DWORD PTR [rax+0x8],0x40400000
  4036c9:	mov    edx,0x2
  4036ce:	mov    rdi,rbx
  4036d1:	mov    esi,0x2
  4036d6:	mov    ecx,0x2
  4036db:	call   4074e0 <flatcc_builder_table_add@@Base>
  4036e0:	test   rax,rax
  4036e3:	je     4036ea <create_monster_top_down@@Base+0x8a>
  4036e5:	mov    WORD PTR [rax],0x12c
  4036ea:	lea    rsi,[rip+0x6929]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  4036f1:	mov    rdi,rbx
  4036f4:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  4036f9:	test   eax,eax
  4036fb:	je     403713 <create_monster_top_down@@Base+0xb3>
  4036fd:	mov    ebp,eax
  4036ff:	mov    rdi,rbx
  403702:	mov    esi,0x3
  403707:	call   407380 <flatcc_builder_table_add_offset@@Base>
  40370c:	test   rax,rax
  40370f:	je     403713 <create_monster_top_down@@Base+0xb3>
  403711:	mov    DWORD PTR [rax],ebp
  403713:	mov    rsi,rsp
  403716:	mov    edx,0xa
  40371b:	mov    ecx,0x1
  403720:	mov    r9d,0xffffffff
  403726:	mov    rdi,rbx
  403729:	mov    r8d,0x1
  40372f:	call   406d00 <flatcc_builder_create_vector@@Base>
  403734:	test   eax,eax
  403736:	je     40374e <create_monster_top_down@@Base+0xee>
  403738:	mov    ebp,eax
  40373a:	mov    rdi,rbx
  40373d:	mov    esi,0x5
  403742:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403747:	test   rax,rax
  40374a:	je     40374e <create_monster_top_down@@Base+0xee>
  40374c:	mov    DWORD PTR [rax],ebp
  40374e:	mov    edx,0x1
  403753:	mov    rdi,rbx
  403756:	mov    esi,0x6
  40375b:	mov    ecx,0x1
  403760:	call   4074e0 <flatcc_builder_table_add@@Base>
  403765:	test   rax,rax
  403768:	je     40376d <create_monster_top_down@@Base+0x10d>
  40376a:	mov    BYTE PTR [rax],0x0
  40376d:	mov    rdi,rbx
  403770:	call   405d70 <flatcc_builder_start_offset_vector@@Base>
  403775:	lea    rsi,[rip+0x6894]        # 40a010 <_IO_stdin_used@@Base+0x10>
  40377c:	mov    rdi,rbx
  40377f:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  403784:	mov    rdi,rbx
  403787:	mov    esi,eax
  403789:	mov    edx,0x3
  40378e:	call   403870 <create_monster_top_down@@Base+0x210>
  403793:	lea    rsi,[rip+0x687c]        # 40a016 <_IO_stdin_used@@Base+0x16>
  40379a:	mov    rdi,rbx
  40379d:	call   4083b0 <flatcc_builder_create_string_str@@Base>
  4037a2:	mov    rdi,rbx
  4037a5:	mov    esi,eax
  4037a7:	mov    edx,0x5
  4037ac:	call   403870 <create_monster_top_down@@Base+0x210>
  4037b1:	mov    r14d,DWORD PTR [rax]
  4037b4:	mov    rdi,rbx
  4037b7:	call   405f30 <flatcc_builder_end_offset_vector@@Base>
  4037bc:	test   eax,eax
  4037be:	je     4037d6 <create_monster_top_down@@Base+0x176>
  4037c0:	mov    ebp,eax
  4037c2:	mov    rdi,rbx
  4037c5:	mov    esi,0x7
  4037ca:	call   407380 <flatcc_builder_table_add_offset@@Base>
  4037cf:	test   rax,rax
  4037d2:	je     4037d6 <create_monster_top_down@@Base+0x176>
  4037d4:	mov    DWORD PTR [rax],ebp
  4037d6:	test   r14d,r14d
  4037d9:	je     403813 <create_monster_top_down@@Base+0x1b3>
  4037db:	mov    edx,0x1
  4037e0:	mov    rdi,rbx
  4037e3:	mov    esi,0x8
  4037e8:	mov    ecx,0x1
  4037ed:	call   4074e0 <flatcc_builder_table_add@@Base>
  4037f2:	test   rax,rax
  4037f5:	je     403813 <create_monster_top_down@@Base+0x1b3>
  4037f7:	mov    rbp,rax
  4037fa:	mov    rdi,rbx
  4037fd:	mov    esi,0x9
  403802:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403807:	test   rax,rax
  40380a:	je     403813 <create_monster_top_down@@Base+0x1b3>
  40380c:	mov    BYTE PTR [rbp+0x0],0x1
  403810:	mov    DWORD PTR [rax],r14d
  403813:	lea    rsi,[rip+0x6c0a]        # 40a424 <_IO_stdin_used@@Base+0x424>
  40381a:	mov    rdi,rbx
  40381d:	xor    edx,edx
  40381f:	call   406b00 <flatcc_builder_check_required@@Base>
  403824:	test   eax,eax
  403826:	je     403845 <create_monster_top_down@@Base+0x1e5>
  403828:	mov    rdi,rbx
  40382b:	call   406b70 <flatcc_builder_end_table@@Base>
  403830:	mov    rdi,rbx
  403833:	mov    esi,eax
  403835:	call   4050e0 <flatcc_builder_end_buffer@@Base>
  40383a:	xor    eax,eax
  40383c:	add    rsp,0x10
  403840:	pop    rbx
  403841:	pop    r14
  403843:	pop    rbp
  403844:	ret    
  403845:	lea    rdi,[rip+0x69c0]        # 40a20c <_IO_stdin_used@@Base+0x20c>
  40384c:	lea    rsi,[rip+0x68f6]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403853:	lea    rcx,[rip+0x6a51]        # 40a2ab <_IO_stdin_used@@Base+0x2ab>
  40385a:	mov    edx,0x32
  40385f:	call   403060 <__assert_fail@plt>
  403864:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40386e:	xchg   ax,ax
  403870:	push   rbp
  403871:	push   r14
  403873:	push   rbx
  403874:	mov    r14d,edx
  403877:	mov    ebp,esi
  403879:	mov    rbx,rdi
  40387c:	mov    esi,0x2
  403881:	call   406160 <flatcc_builder_start_table@@Base>
  403886:	test   ebp,ebp
  403888:	je     4038f4 <create_monster_top_down@@Base+0x294>
  40388a:	test   eax,eax
  40388c:	jne    4038f4 <create_monster_top_down@@Base+0x294>
  40388e:	mov    rdi,rbx
  403891:	xor    esi,esi
  403893:	call   407380 <flatcc_builder_table_add_offset@@Base>
  403898:	test   rax,rax
  40389b:	je     4038f4 <create_monster_top_down@@Base+0x294>
  40389d:	mov    DWORD PTR [rax],ebp
  40389f:	test   r14w,r14w
  4038a3:	je     4038c5 <create_monster_top_down@@Base+0x265>
  4038a5:	mov    edx,0x2
  4038aa:	mov    rdi,rbx
  4038ad:	mov    esi,0x1
  4038b2:	mov    ecx,0x2
  4038b7:	call   4074e0 <flatcc_builder_table_add@@Base>
  4038bc:	test   rax,rax
  4038bf:	je     4038f4 <create_monster_top_down@@Base+0x294>
  4038c1:	mov    WORD PTR [rax],r14w
  4038c5:	lea    rsi,[rip+0x6b56]        # 40a422 <_IO_stdin_used@@Base+0x422>
  4038cc:	mov    rdi,rbx
  4038cf:	xor    edx,edx
  4038d1:	call   406b00 <flatcc_builder_check_required@@Base>
  4038d6:	test   eax,eax
  4038d8:	je     4038fb <create_monster_top_down@@Base+0x29b>
  4038da:	mov    rdi,rbx
  4038dd:	call   406b70 <flatcc_builder_end_table@@Base>
  4038e2:	test   eax,eax
  4038e4:	je     4038f4 <create_monster_top_down@@Base+0x294>
  4038e6:	mov    rdi,rbx
  4038e9:	mov    esi,eax
  4038eb:	pop    rbx
  4038ec:	pop    r14
  4038ee:	pop    rbp
  4038ef:	jmp    405740 <flatcc_builder_offset_vector_push@@Base>
  4038f4:	xor    eax,eax
  4038f6:	pop    rbx
  4038f7:	pop    r14
  4038f9:	pop    rbp
  4038fa:	ret    
  4038fb:	lea    rdi,[rip+0x67ab]        # 40a0ad <_IO_stdin_used@@Base+0xad>
  403902:	lea    rsi,[rip+0x6840]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403909:	lea    rcx,[rip+0x68af]        # 40a1bf <_IO_stdin_used@@Base+0x1bf>
  403910:	mov    edx,0x34
  403915:	call   403060 <__assert_fail@plt>
  40391a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403920 <access_monster_buffer@@Base>:
  403920:	push   rbp
  403921:	push   r15
  403923:	push   r14
  403925:	push   r12
  403927:	push   rbx
  403928:	test   rdi,rdi
  40392b:	je     403cc5 <access_monster_buffer@@Base+0x3a5>
  403931:	mov    eax,DWORD PTR [rdi]
  403933:	lea    rbx,[rdi+rax*1]
  403937:	movsxd r14,DWORD PTR [rdi+rax*1]
  40393b:	mov    rax,rbx
  40393e:	sub    rax,r14
  403941:	neg    r14
  403944:	movzx  r15d,WORD PTR [rax]
  403948:	cmp    r15w,0x9
  40394d:	jbe    403960 <access_monster_buffer@@Base+0x40>
  40394f:	movzx  eax,WORD PTR [rbx+r14*1+0x8]
  403955:	test   rax,rax
  403958:	je     403970 <access_monster_buffer@@Base+0x50>
  40395a:	movzx  eax,WORD PTR [rbx+rax*1]
  40395e:	jmp    403974 <access_monster_buffer@@Base+0x54>
  403960:	mov    ax,0x64
  403964:	cmp    r15w,0x8
  403969:	jae    403974 <access_monster_buffer@@Base+0x54>
  40396b:	jmp    403ca6 <access_monster_buffer@@Base+0x386>
  403970:	mov    ax,0x64
  403974:	movzx  r12d,WORD PTR [rbx+r14*1+0x6]
  40397a:	test   r12,r12
  40397d:	je     403986 <access_monster_buffer@@Base+0x66>
  40397f:	movzx  ecx,WORD PTR [rbx+r12*1]
  403984:	jmp    40398a <access_monster_buffer@@Base+0x6a>
  403986:	mov    cx,0x96
  40398a:	xor    edi,edi
  40398c:	mov    ebp,0x0
  403991:	cmp    r15w,0xc
  403996:	jb     4039bb <access_monster_buffer@@Base+0x9b>
  403998:	movzx  edx,WORD PTR [rbx+r14*1+0xa]
  40399e:	test   rdx,rdx
  4039a1:	je     4039b7 <access_monster_buffer@@Base+0x97>
  4039a3:	lea    rsi,[rbx+rdx*1]
  4039a7:	mov    edx,DWORD PTR [rbx+rdx*1]
  4039aa:	lea    rdi,[rdx+rsi*1]
  4039ae:	add    rdi,0x4
  4039b2:	mov    ebp,DWORD PTR [rdx+rsi*1]
  4039b5:	jmp    4039bb <access_monster_buffer@@Base+0x9b>
  4039b7:	xor    edi,edi
  4039b9:	xor    ebp,ebp
  4039bb:	movzx  eax,ax
  4039be:	cmp    eax,0x12c
  4039c3:	jne    403ca6 <access_monster_buffer@@Base+0x386>
  4039c9:	movzx  eax,cx
  4039cc:	cmp    eax,0x96
  4039d1:	jne    403ce4 <access_monster_buffer@@Base+0x3c4>
  4039d7:	lea    rsi,[rip+0x663c]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  4039de:	call   403090 <strcmp@plt>
  4039e3:	test   eax,eax
  4039e5:	jne    403d03 <access_monster_buffer@@Base+0x3e3>
  4039eb:	cmp    rbp,0x3
  4039ef:	jne    403d22 <access_monster_buffer@@Base+0x402>
  4039f5:	cmp    r15w,0xa
  4039fa:	jb     403c68 <access_monster_buffer@@Base+0x348>
  403a00:	cmp    WORD PTR [rbx+r14*1+0x8],0x0
  403a07:	je     403c68 <access_monster_buffer@@Base+0x348>
  403a0d:	test   r12w,r12w
  403a11:	jne    403d41 <access_monster_buffer@@Base+0x421>
  403a17:	movzx  eax,WORD PTR [rbx+r14*1+0x4]
  403a1d:	test   rax,rax
  403a20:	je     403d60 <access_monster_buffer@@Base+0x440>
  403a26:	vmovss xmm0,DWORD PTR [rbx+rax*1]
  403a2b:	vucomiss xmm0,DWORD PTR [rip+0x65d1]        # 40a004 <_IO_stdin_used@@Base+0x4>
  403a33:	jne    403d7f <access_monster_buffer@@Base+0x45f>
  403a39:	jp     403d7f <access_monster_buffer@@Base+0x45f>
  403a3f:	vmovss xmm0,DWORD PTR [rbx+rax*1+0x4]
  403a45:	vucomiss xmm0,DWORD PTR [rip+0x65bb]        # 40a008 <_IO_stdin_used@@Base+0x8>
  403a4d:	jne    403d9e <access_monster_buffer@@Base+0x47e>
  403a53:	jp     403d9e <access_monster_buffer@@Base+0x47e>
  403a59:	vmovss xmm0,DWORD PTR [rbx+rax*1+0x8]
  403a5f:	vucomiss xmm0,DWORD PTR [rip+0x65a5]        # 40a00c <_IO_stdin_used@@Base+0xc>
  403a67:	jne    403dbd <access_monster_buffer@@Base+0x49d>
  403a6d:	jp     403dbd <access_monster_buffer@@Base+0x49d>
  403a73:	cmp    r15w,0x10
  403a78:	jb     403c87 <access_monster_buffer@@Base+0x367>
  403a7e:	movzx  eax,WORD PTR [rbx+r14*1+0xe]
  403a84:	test   rax,rax
  403a87:	je     403c87 <access_monster_buffer@@Base+0x367>
  403a8d:	lea    rcx,[rbx+rax*1]
  403a91:	mov    eax,DWORD PTR [rbx+rax*1]
  403a94:	cmp    DWORD PTR [rax+rcx*1],0xa
  403a98:	jne    403ddc <access_monster_buffer@@Base+0x4bc>
  403a9e:	cmp    BYTE PTR [rcx+rax*1+0x6],0x2
  403aa3:	jne    403dfb <access_monster_buffer@@Base+0x4db>
  403aa9:	cmp    r15w,0x14
  403aae:	jb     403c2a <access_monster_buffer@@Base+0x30a>
  403ab4:	movzx  eax,WORD PTR [rbx+r14*1+0x12]
  403aba:	test   rax,rax
  403abd:	je     403c2a <access_monster_buffer@@Base+0x30a>
  403ac3:	lea    rcx,[rbx+rax*1]
  403ac7:	mov    eax,DWORD PTR [rbx+rax*1]
  403aca:	cmp    DWORD PTR [rax+rcx*1],0x2
  403ace:	jne    403c2a <access_monster_buffer@@Base+0x30a>
  403ad4:	add    rcx,rax
  403ad7:	add    rcx,0x4
  403adb:	mov    edx,DWORD PTR [rcx+0x4]
  403ade:	lea    rax,[rcx+rdx*1]
  403ae2:	add    rax,0x4
  403ae6:	movsxd rcx,DWORD PTR [rcx+rdx*1+0x4]
  403aeb:	mov    rdx,rax
  403aee:	sub    rdx,rcx
  403af1:	movzx  edx,WORD PTR [rdx]
  403af4:	cmp    dx,0x6
  403af8:	jb     403c49 <access_monster_buffer@@Base+0x329>
  403afe:	neg    rcx
  403b01:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  403b06:	test   rsi,rsi
  403b09:	je     403b21 <access_monster_buffer@@Base+0x201>
  403b0b:	lea    rdi,[rax+rsi*1]
  403b0f:	mov    esi,DWORD PTR [rax+rsi*1]
  403b12:	add    rdi,rsi
  403b15:	add    rdi,0x4
  403b19:	cmp    dx,0x8
  403b1d:	jb     403b41 <access_monster_buffer@@Base+0x221>
  403b1f:	jmp    403b29 <access_monster_buffer@@Base+0x209>
  403b21:	xor    edi,edi
  403b23:	cmp    dx,0x8
  403b27:	jb     403b41 <access_monster_buffer@@Base+0x221>
  403b29:	movzx  ecx,WORD PTR [rax+rcx*1+0x6]
  403b2e:	test   rcx,rcx
  403b31:	je     403b41 <access_monster_buffer@@Base+0x221>
  403b33:	movzx  ebp,WORD PTR [rax+rcx*1]
  403b37:	test   rdi,rdi
  403b3a:	jne    403b4c <access_monster_buffer@@Base+0x22c>
  403b3c:	jmp    403c49 <access_monster_buffer@@Base+0x329>
  403b41:	xor    ebp,ebp
  403b43:	test   rdi,rdi
  403b46:	je     403c49 <access_monster_buffer@@Base+0x329>
  403b4c:	lea    rsi,[rip+0x64c3]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403b53:	call   403090 <strcmp@plt>
  403b58:	test   eax,eax
  403b5a:	jne    403c49 <access_monster_buffer@@Base+0x329>
  403b60:	cmp    bp,0x5
  403b64:	jne    403e1a <access_monster_buffer@@Base+0x4fa>
  403b6a:	cmp    r15w,0x16
  403b6f:	jb     403c07 <access_monster_buffer@@Base+0x2e7>
  403b75:	movzx  eax,WORD PTR [rbx+r14*1+0x14]
  403b7b:	test   rax,rax
  403b7e:	je     403c07 <access_monster_buffer@@Base+0x2e7>
  403b84:	cmp    BYTE PTR [rbx+rax*1],0x1
  403b88:	jne    403c07 <access_monster_buffer@@Base+0x2e7>
  403b8a:	cmp    r15w,0x18
  403b8f:	jb     403e39 <access_monster_buffer@@Base+0x519>
  403b95:	movzx  eax,WORD PTR [rbx+r14*1+0x16]
  403b9b:	test   rax,rax
  403b9e:	je     403e39 <access_monster_buffer@@Base+0x519>
  403ba4:	lea    rcx,[rbx+rax*1]
  403ba8:	mov    edx,DWORD PTR [rbx+rax*1]
  403bab:	lea    rax,[rcx+rdx*1]
  403baf:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  403bb3:	mov    rdx,rax
  403bb6:	sub    rdx,rcx
  403bb9:	movzx  edx,WORD PTR [rdx]
  403bbc:	cmp    dx,0x5
  403bc0:	jbe    403be5 <access_monster_buffer@@Base+0x2c5>
  403bc2:	neg    rcx
  403bc5:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  403bca:	test   rsi,rsi
  403bcd:	je     403c12 <access_monster_buffer@@Base+0x2f2>
  403bcf:	lea    rdi,[rax+rsi*1]
  403bd3:	mov    esi,DWORD PTR [rax+rsi*1]
  403bd6:	add    rdi,rsi
  403bd9:	add    rdi,0x4
  403bdd:	cmp    dx,0x8
  403be1:	jb     403be7 <access_monster_buffer@@Base+0x2c7>
  403be3:	jmp    403c1a <access_monster_buffer@@Base+0x2fa>
  403be5:	xor    edi,edi
  403be7:	xor    ebx,ebx
  403be9:	lea    rsi,[rip+0x6426]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403bf0:	call   403090 <strcmp@plt>
  403bf5:	test   eax,eax
  403bf7:	jne    403e58 <access_monster_buffer@@Base+0x538>
  403bfd:	cmp    bx,0x5
  403c01:	jne    403e77 <access_monster_buffer@@Base+0x557>
  403c07:	xor    eax,eax
  403c09:	pop    rbx
  403c0a:	pop    r12
  403c0c:	pop    r14
  403c0e:	pop    r15
  403c10:	pop    rbp
  403c11:	ret    
  403c12:	xor    edi,edi
  403c14:	cmp    dx,0x8
  403c18:	jb     403be7 <access_monster_buffer@@Base+0x2c7>
  403c1a:	movzx  ecx,WORD PTR [rax+rcx*1+0x6]
  403c1f:	test   rcx,rcx
  403c22:	je     403be7 <access_monster_buffer@@Base+0x2c7>
  403c24:	movzx  ebx,WORD PTR [rax+rcx*1]
  403c28:	jmp    403be9 <access_monster_buffer@@Base+0x2c9>
  403c2a:	lea    rdi,[rip+0x7c71]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c31:	lea    rsi,[rip+0x63e6]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c38:	lea    rcx,[rip+0x6443]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c3f:	mov    edx,0x10f
  403c44:	call   403060 <__assert_fail@plt>
  403c49:	lea    rdi,[rip+0x7c52]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c50:	lea    rsi,[rip+0x63c7]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c57:	lea    rcx,[rip+0x6424]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c5e:	mov    edx,0x113
  403c63:	call   403060 <__assert_fail@plt>
  403c68:	lea    rdi,[rip+0x7c33]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c6f:	lea    rsi,[rip+0x63a8]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c76:	lea    rcx,[rip+0x6405]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c7d:	mov    edx,0xe3
  403c82:	call   403060 <__assert_fail@plt>
  403c87:	lea    rdi,[rip+0x7c14]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c8e:	lea    rsi,[rip+0x6389]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c95:	lea    rcx,[rip+0x63e6]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c9c:	mov    edx,0x105
  403ca1:	call   403060 <__assert_fail@plt>
  403ca6:	lea    rdi,[rip+0x7bf5]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403cad:	lea    rsi,[rip+0x636a]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403cb4:	lea    rcx,[rip+0x63c7]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cbb:	mov    edx,0xdb
  403cc0:	call   403060 <__assert_fail@plt>
  403cc5:	lea    rdi,[rip+0x7bd6]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403ccc:	lea    rsi,[rip+0x634b]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403cd3:	lea    rcx,[rip+0x63a8]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cda:	mov    edx,0xd3
  403cdf:	call   403060 <__assert_fail@plt>
  403ce4:	lea    rdi,[rip+0x7bb7]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403ceb:	lea    rsi,[rip+0x632c]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403cf2:	lea    rcx,[rip+0x6389]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cf9:	mov    edx,0xdd
  403cfe:	call   403060 <__assert_fail@plt>
  403d03:	lea    rdi,[rip+0x7b98]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d0a:	lea    rsi,[rip+0x630d]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d11:	lea    rcx,[rip+0x636a]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d18:	mov    edx,0xde
  403d1d:	call   403060 <__assert_fail@plt>
  403d22:	lea    rdi,[rip+0x7b79]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d29:	lea    rsi,[rip+0x62ee]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d30:	lea    rcx,[rip+0x634b]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d37:	mov    edx,0xdf
  403d3c:	call   403060 <__assert_fail@plt>
  403d41:	lea    rdi,[rip+0x7b5a]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d48:	lea    rsi,[rip+0x62cf]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d4f:	lea    rcx,[rip+0x632c]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d56:	mov    edx,0xe4
  403d5b:	call   403060 <__assert_fail@plt>
  403d60:	lea    rdi,[rip+0x7b3b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d67:	lea    rsi,[rip+0x62b0]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d6e:	lea    rcx,[rip+0x630d]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d75:	mov    edx,0xe8
  403d7a:	call   403060 <__assert_fail@plt>
  403d7f:	lea    rdi,[rip+0x7b1c]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d86:	lea    rsi,[rip+0x6291]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d8d:	lea    rcx,[rip+0x62ee]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d94:	mov    edx,0xf0
  403d99:	call   403060 <__assert_fail@plt>
  403d9e:	lea    rdi,[rip+0x7afd]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403da5:	lea    rsi,[rip+0x6272]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403dac:	lea    rcx,[rip+0x62cf]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403db3:	mov    edx,0xf1
  403db8:	call   403060 <__assert_fail@plt>
  403dbd:	lea    rdi,[rip+0x7ade]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403dc4:	lea    rsi,[rip+0x6253]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403dcb:	lea    rcx,[rip+0x62b0]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403dd2:	mov    edx,0xf2
  403dd7:	call   403060 <__assert_fail@plt>
  403ddc:	lea    rdi,[rip+0x7abf]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403de3:	lea    rsi,[rip+0x6234]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403dea:	lea    rcx,[rip+0x6291]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403df1:	mov    edx,0x107
  403df6:	call   403060 <__assert_fail@plt>
  403dfb:	lea    rdi,[rip+0x7aa0]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e02:	lea    rsi,[rip+0x6215]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e09:	lea    rcx,[rip+0x6272]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e10:	mov    edx,0x10b
  403e15:	call   403060 <__assert_fail@plt>
  403e1a:	lea    rdi,[rip+0x7a81]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e21:	lea    rsi,[rip+0x61f6]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e28:	lea    rcx,[rip+0x6253]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e2f:	mov    edx,0x114
  403e34:	call   403060 <__assert_fail@plt>
  403e39:	lea    rdi,[rip+0x64ba]        # 40a2fa <_IO_stdin_used@@Base+0x2fa>
  403e40:	lea    rsi,[rip+0x64d9]        # 40a320 <_IO_stdin_used@@Base+0x320>
  403e47:	lea    rcx,[rip+0x6547]        # 40a395 <_IO_stdin_used@@Base+0x395>
  403e4e:	mov    edx,0x94
  403e53:	call   403060 <__assert_fail@plt>
  403e58:	lea    rdi,[rip+0x7a43]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e5f:	lea    rsi,[rip+0x61b8]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e66:	lea    rcx,[rip+0x6215]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e6d:	mov    edx,0x11e
  403e72:	call   403060 <__assert_fail@plt>
  403e77:	lea    rdi,[rip+0x7a24]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e7e:	lea    rsi,[rip+0x6199]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e85:	lea    rcx,[rip+0x61f6]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e8c:	mov    edx,0x11f
  403e91:	call   403060 <__assert_fail@plt>
  403e96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403ea0 <main@@Base>:
  403ea0:	push   r15
  403ea2:	push   r14
  403ea4:	push   rbx
  403ea5:	sub    rsp,0x190
  403eac:	lea    r15,[rsp+0x8]
  403eb1:	mov    rdi,r15
  403eb4:	call   404130 <flatcc_builder_init@@Base>
  403eb9:	mov    rdi,r15
  403ebc:	xor    esi,esi
  403ebe:	call   4031e0 <create_monster_bottom_up@@Base>
  403ec3:	mov    r14,rsp
  403ec6:	mov    rdi,r15
  403ec9:	mov    rsi,r14
  403ecc:	call   408850 <flatcc_builder_finalize_aligned_buffer@@Base>
  403ed1:	mov    rdi,rax
  403ed4:	call   408980 <flatcc_builder_aligned_free@@Base>
  403ed9:	mov    rdi,r15
  403edc:	call   404330 <flatcc_builder_reset@@Base>
  403ee1:	mov    rdi,r15
  403ee4:	mov    esi,0x1
  403ee9:	call   4031e0 <create_monster_bottom_up@@Base>
  403eee:	mov    rdi,r15
  403ef1:	mov    rsi,r14
  403ef4:	call   408850 <flatcc_builder_finalize_aligned_buffer@@Base>
  403ef9:	mov    rbx,rax
  403efc:	mov    rdi,rax
  403eff:	call   403920 <access_monster_buffer@@Base>
  403f04:	mov    rdi,rbx
  403f07:	call   408980 <flatcc_builder_aligned_free@@Base>
  403f0c:	mov    rdi,r15
  403f0f:	call   404330 <flatcc_builder_reset@@Base>
  403f14:	mov    rdi,r15
  403f17:	call   403660 <create_monster_top_down@@Base>
  403f1c:	mov    rdi,r15
  403f1f:	mov    rsi,r14
  403f22:	call   408790 <flatcc_builder_finalize_buffer@@Base>
  403f27:	mov    rbx,rax
  403f2a:	mov    rdi,rax
  403f2d:	call   403920 <access_monster_buffer@@Base>
  403f32:	mov    rdi,rbx
  403f35:	call   403030 <free@plt>
  403f3a:	mov    rdi,r15
  403f3d:	call   4044f0 <flatcc_builder_clear@@Base>
  403f42:	lea    rdi,[rip+0x6499]        # 40a3e2 <_IO_stdin_used@@Base+0x3e2>
  403f49:	call   403040 <puts@plt>
  403f4e:	xor    eax,eax
  403f50:	add    rsp,0x190
  403f57:	pop    rbx
  403f58:	pop    r14
  403f5a:	pop    r15
  403f5c:	ret    
  403f5d:	nop    DWORD PTR [rax]

0000000000403f60 <flatcc_builder_default_alloc@@Base>:
  403f60:	push   rbp
  403f61:	push   r15
  403f63:	push   r14
  403f65:	push   r12
  403f67:	push   rbx
  403f68:	mov    rbx,rsi
  403f6b:	test   rdx,rdx
  403f6e:	je     403f98 <flatcc_builder_default_alloc@@Base+0x38>
  403f70:	mov    r14d,ecx
  403f73:	dec    r8d
  403f76:	cmp    r8d,0x6
  403f7a:	ja     403fb6 <flatcc_builder_default_alloc@@Base+0x56>
  403f7c:	mov    eax,0x100
  403f81:	lea    rcx,[rip+0x64a8]        # 40a430 <_IO_stdin_used@@Base+0x430>
  403f88:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403f8c:	add    rsi,rcx
  403f8f:	jmp    rsi
  403f91:	mov    eax,0x120
  403f96:	jmp    403fd0 <flatcc_builder_default_alloc@@Base+0x70>
  403f98:	mov    rdi,QWORD PTR [rbx]
  403f9b:	xor    r15d,r15d
  403f9e:	test   rdi,rdi
  403fa1:	je     40402f <flatcc_builder_default_alloc@@Base+0xcf>
  403fa7:	call   403030 <free@plt>
  403fac:	vxorps xmm0,xmm0,xmm0
  403fb0:	vmovups XMMWORD PTR [rbx],xmm0
  403fb4:	jmp    40402f <flatcc_builder_default_alloc@@Base+0xcf>
  403fb6:	mov    eax,0x20
  403fbb:	jmp    403fd0 <flatcc_builder_default_alloc@@Base+0x70>
  403fbd:	mov    rax,rdx
  403fc0:	jmp    403fd0 <flatcc_builder_default_alloc@@Base+0x70>
  403fc2:	mov    eax,0x40
  403fc7:	nop    WORD PTR [rax+rax*1+0x0]
  403fd0:	mov    rbp,rax
  403fd3:	add    rax,rax
  403fd6:	cmp    rbp,rdx
  403fd9:	jb     403fd0 <flatcc_builder_default_alloc@@Base+0x70>
  403fdb:	mov    rax,QWORD PTR [rbx+0x8]
  403fdf:	xor    r15d,r15d
  403fe2:	cmp    rax,rdx
  403fe5:	jb     403fef <flatcc_builder_default_alloc@@Base+0x8f>
  403fe7:	shr    rax,1
  403fea:	cmp    rax,rbp
  403fed:	jae    40402f <flatcc_builder_default_alloc@@Base+0xcf>
  403fef:	mov    rdi,QWORD PTR [rbx]
  403ff2:	mov    rsi,rbp
  403ff5:	call   4030d0 <realloc@plt>
  403ffa:	test   rax,rax
  403ffd:	je     404029 <flatcc_builder_default_alloc@@Base+0xc9>
  403fff:	mov    r12,rax
  404002:	test   r14d,r14d
  404005:	je     404020 <flatcc_builder_default_alloc@@Base+0xc0>
  404007:	mov    rax,QWORD PTR [rbx+0x8]
  40400b:	mov    rdx,rbp
  40400e:	sub    rdx,rax
  404011:	jbe    404020 <flatcc_builder_default_alloc@@Base+0xc0>
  404013:	mov    rdi,r12
  404016:	add    rdi,rax
  404019:	xor    esi,esi
  40401b:	call   403070 <memset@plt>
  404020:	mov    QWORD PTR [rbx],r12
  404023:	mov    QWORD PTR [rbx+0x8],rbp
  404027:	jmp    40402f <flatcc_builder_default_alloc@@Base+0xcf>
  404029:	mov    r15d,0xffffffff
  40402f:	mov    eax,r15d
  404032:	pop    rbx
  404033:	pop    r12
  404035:	pop    r14
  404037:	pop    r15
  404039:	pop    rbp
  40403a:	ret    
  40403b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404040 <flatcc_builder_flush_vtable_cache@@Base>:
  404040:	push   rbx
  404041:	cmp    QWORD PTR [rdi+0xd8],0x0
  404049:	je     404074 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  40404b:	mov    rbx,rdi
  40404e:	mov    rdi,QWORD PTR [rdi+0xa8]
  404055:	mov    rdx,QWORD PTR [rbx+0xb0]
  40405c:	xor    esi,esi
  40405e:	call   403070 <memset@plt>
  404063:	movabs rax,0x1000000000
  40406d:	mov    QWORD PTR [rbx+0xe0],rax
  404074:	pop    rbx
  404075:	ret    
  404076:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404080 <flatcc_builder_custom_init@@Base>:
  404080:	vxorps xmm0,xmm0,xmm0
  404084:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40408c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  404094:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40409c:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4040a4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  4040ac:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  4040b4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  4040bc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  4040c4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  4040c9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4040ce:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4040d3:	vmovups YMMWORD PTR [rdi],ymm0
  4040d7:	mov    QWORD PTR [rdi+0x180],0x0
  4040e2:	test   rsi,rsi
  4040e5:	je     404109 <flatcc_builder_custom_init@@Base+0x89>
  4040e7:	test   rcx,rcx
  4040ea:	jne    4040f3 <flatcc_builder_custom_init@@Base+0x73>
  4040ec:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403f60 <flatcc_builder_default_alloc@@Base>
  4040f3:	mov    QWORD PTR [rdi+0x40],r8
  4040f7:	mov    QWORD PTR [rdi+0x50],rcx
  4040fb:	mov    QWORD PTR [rdi+0x38],rdx
  4040ff:	mov    QWORD PTR [rdi+0x48],rsi
  404103:	xor    eax,eax
  404105:	vzeroupper 
  404108:	ret    
  404109:	mov    DWORD PTR [rdi+0x128],0x1
  404113:	lea    rdx,[rdi+0x130]
  40411a:	lea    rsi,[rip+0x4a6f]        # 408b90 <flatcc_emitter@@Base>
  404121:	test   rcx,rcx
  404124:	je     4040ec <flatcc_builder_custom_init@@Base+0x6c>
  404126:	jmp    4040f3 <flatcc_builder_custom_init@@Base+0x73>
  404128:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404130 <flatcc_builder_init@@Base>:
  404130:	vxorps xmm0,xmm0,xmm0
  404134:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40413c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  404141:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  404146:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40414e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  404156:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  40415e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  404166:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40416e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  404176:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40417e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  404183:	vmovups YMMWORD PTR [rdi],ymm0
  404187:	mov    QWORD PTR [rdi+0x180],0x0
  404192:	mov    DWORD PTR [rdi+0x128],0x1
  40419c:	lea    rax,[rdi+0x130]
  4041a3:	mov    QWORD PTR [rdi+0x40],0x0
  4041ab:	lea    rcx,[rip+0xfffffffffffffdae]        # 403f60 <flatcc_builder_default_alloc@@Base>
  4041b2:	mov    QWORD PTR [rdi+0x50],rcx
  4041b6:	mov    QWORD PTR [rdi+0x38],rax
  4041ba:	lea    rax,[rip+0x49cf]        # 408b90 <flatcc_emitter@@Base>
  4041c1:	mov    QWORD PTR [rdi+0x48],rax
  4041c5:	xor    eax,eax
  4041c7:	vzeroupper 
  4041ca:	ret    
  4041cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004041d0 <flatcc_builder_custom_reset@@Base>:
  4041d0:	push   rbp
  4041d1:	push   r15
  4041d3:	push   r14
  4041d5:	push   r12
  4041d7:	push   rbx
  4041d8:	mov    r15d,edx
  4041db:	mov    r14d,esi
  4041de:	mov    r12,rdi
  4041e1:	lea    rbp,[rdi+0x58]
  4041e5:	xor    ebx,ebx
  4041e7:	jmp    404208 <flatcc_builder_custom_reset@@Base+0x38>
  4041e9:	nop    DWORD PTR [rax+0x0]
  4041f0:	cmp    QWORD PTR [rbp+0x8],0x0
  4041f5:	jne    404306 <flatcc_builder_custom_reset@@Base+0x136>
  4041fb:	inc    rbx
  4041fe:	add    rbp,0x10
  404202:	cmp    rbx,0x8
  404206:	je     40424f <flatcc_builder_custom_reset@@Base+0x7f>
  404208:	mov    rdi,QWORD PTR [rbp+0x0]
  40420c:	test   rdi,rdi
  40420f:	je     4041f0 <flatcc_builder_custom_reset@@Base+0x20>
  404211:	test   r15d,r15d
  404214:	je     404242 <flatcc_builder_custom_reset@@Base+0x72>
  404216:	cmp    rbx,0x5
  40421a:	je     404242 <flatcc_builder_custom_reset@@Base+0x72>
  40421c:	mov    rdi,QWORD PTR [r12+0x40]
  404221:	mov    edx,0x1
  404226:	mov    rsi,rbp
  404229:	mov    ecx,0x1
  40422e:	mov    r8d,ebx
  404231:	call   QWORD PTR [r12+0x50]
  404236:	test   eax,eax
  404238:	jne    4042f6 <flatcc_builder_custom_reset@@Base+0x126>
  40423e:	mov    rdi,QWORD PTR [rbp+0x0]
  404242:	mov    rdx,QWORD PTR [rbp+0x8]
  404246:	xor    esi,esi
  404248:	call   403070 <memset@plt>
  40424d:	jmp    4041fb <flatcc_builder_custom_reset@@Base+0x2b>
  40424f:	mov    DWORD PTR [r12+0xe0],0x0
  40425b:	cmp    DWORD PTR [r12+0xe4],0x0
  404264:	je     404272 <flatcc_builder_custom_reset@@Base+0xa2>
  404266:	mov    DWORD PTR [r12+0xe4],0x10
  404272:	mov    WORD PTR [r12+0xe8],0x0
  40427d:	mov    QWORD PTR [r12+0xf0],0x0
  404289:	mov    QWORD PTR [r12+0x20],0x0
  404292:	vxorps xmm0,xmm0,xmm0
  404296:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  4042a0:	mov    rax,QWORD PTR [r12+0x58]
  4042a5:	mov    rcx,QWORD PTR [r12+0x68]
  4042aa:	mov    QWORD PTR [r12+0x18],rcx
  4042af:	mov    rcx,QWORD PTR [r12+0x88]
  4042b7:	mov    QWORD PTR [r12],rcx
  4042bb:	mov    QWORD PTR [r12+0x8],rax
  4042c0:	mov    QWORD PTR [r12+0x30],0x0
  4042c9:	test   r14d,r14d
  4042cc:	je     4042d8 <flatcc_builder_custom_reset@@Base+0x108>
  4042ce:	vmovups XMMWORD PTR [r12+0x118],xmm0
  4042d8:	xor    ebx,ebx
  4042da:	cmp    DWORD PTR [r12+0x128],0x0
  4042e3:	je     4042fb <flatcc_builder_custom_reset@@Base+0x12b>
  4042e5:	add    r12,0x130
  4042ec:	mov    rdi,r12
  4042ef:	call   408a10 <flatcc_emitter_reset@@Base>
  4042f4:	jmp    4042fb <flatcc_builder_custom_reset@@Base+0x12b>
  4042f6:	mov    ebx,0xffffffff
  4042fb:	mov    eax,ebx
  4042fd:	pop    rbx
  4042fe:	pop    r12
  404300:	pop    r14
  404302:	pop    r15
  404304:	pop    rbp
  404305:	ret    
  404306:	lea    rdi,[rip+0x63c3]        # 40a6d0 <flatcc_builder_padding_base@@Base+0x280>
  40430d:	lea    rsi,[rip+0x63ce]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404314:	lea    rcx,[rip+0x6427]        # 40a742 <flatcc_builder_padding_base@@Base+0x2f2>
  40431b:	mov    edx,0x1b2
  404320:	call   403060 <__assert_fail@plt>
  404325:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40432f:	nop

0000000000404330 <flatcc_builder_reset@@Base>:
  404330:	push   rbx
  404331:	mov    rbx,rdi
  404334:	mov    rdi,QWORD PTR [rdi+0x58]
  404338:	mov    rdx,QWORD PTR [rbx+0x60]
  40433c:	test   rdi,rdi
  40433f:	je     40434a <flatcc_builder_reset@@Base+0x1a>
  404341:	xor    esi,esi
  404343:	call   403070 <memset@plt>
  404348:	jmp    404353 <flatcc_builder_reset@@Base+0x23>
  40434a:	test   rdx,rdx
  40434d:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  404353:	mov    rdi,QWORD PTR [rbx+0x68]
  404357:	mov    rdx,QWORD PTR [rbx+0x70]
  40435b:	test   rdi,rdi
  40435e:	je     404369 <flatcc_builder_reset@@Base+0x39>
  404360:	xor    esi,esi
  404362:	call   403070 <memset@plt>
  404367:	jmp    404372 <flatcc_builder_reset@@Base+0x42>
  404369:	test   rdx,rdx
  40436c:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  404372:	mov    rdi,QWORD PTR [rbx+0x78]
  404376:	mov    rdx,QWORD PTR [rbx+0x80]
  40437d:	test   rdi,rdi
  404380:	je     40438b <flatcc_builder_reset@@Base+0x5b>
  404382:	xor    esi,esi
  404384:	call   403070 <memset@plt>
  404389:	jmp    404394 <flatcc_builder_reset@@Base+0x64>
  40438b:	test   rdx,rdx
  40438e:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  404394:	mov    rdi,QWORD PTR [rbx+0x88]
  40439b:	mov    rdx,QWORD PTR [rbx+0x90]
  4043a2:	test   rdi,rdi
  4043a5:	je     4043b0 <flatcc_builder_reset@@Base+0x80>
  4043a7:	xor    esi,esi
  4043a9:	call   403070 <memset@plt>
  4043ae:	jmp    4043b9 <flatcc_builder_reset@@Base+0x89>
  4043b0:	test   rdx,rdx
  4043b3:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  4043b9:	mov    rdi,QWORD PTR [rbx+0x98]
  4043c0:	mov    rdx,QWORD PTR [rbx+0xa0]
  4043c7:	test   rdi,rdi
  4043ca:	je     4043d5 <flatcc_builder_reset@@Base+0xa5>
  4043cc:	xor    esi,esi
  4043ce:	call   403070 <memset@plt>
  4043d3:	jmp    4043de <flatcc_builder_reset@@Base+0xae>
  4043d5:	test   rdx,rdx
  4043d8:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  4043de:	mov    rdi,QWORD PTR [rbx+0xa8]
  4043e5:	mov    rdx,QWORD PTR [rbx+0xb0]
  4043ec:	test   rdi,rdi
  4043ef:	je     4043fa <flatcc_builder_reset@@Base+0xca>
  4043f1:	xor    esi,esi
  4043f3:	call   403070 <memset@plt>
  4043f8:	jmp    404403 <flatcc_builder_reset@@Base+0xd3>
  4043fa:	test   rdx,rdx
  4043fd:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  404403:	mov    rdi,QWORD PTR [rbx+0xb8]
  40440a:	mov    rdx,QWORD PTR [rbx+0xc0]
  404411:	test   rdi,rdi
  404414:	je     40441f <flatcc_builder_reset@@Base+0xef>
  404416:	xor    esi,esi
  404418:	call   403070 <memset@plt>
  40441d:	jmp    404428 <flatcc_builder_reset@@Base+0xf8>
  40441f:	test   rdx,rdx
  404422:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  404428:	mov    rdi,QWORD PTR [rbx+0xc8]
  40442f:	mov    rdx,QWORD PTR [rbx+0xd0]
  404436:	test   rdi,rdi
  404439:	je     404444 <flatcc_builder_reset@@Base+0x114>
  40443b:	xor    esi,esi
  40443d:	call   403070 <memset@plt>
  404442:	jmp    40444d <flatcc_builder_reset@@Base+0x11d>
  404444:	test   rdx,rdx
  404447:	jne    4044d0 <flatcc_builder_reset@@Base+0x1a0>
  40444d:	mov    DWORD PTR [rbx+0xe0],0x0
  404457:	cmp    DWORD PTR [rbx+0xe4],0x0
  40445e:	je     40446a <flatcc_builder_reset@@Base+0x13a>
  404460:	mov    DWORD PTR [rbx+0xe4],0x10
  40446a:	mov    WORD PTR [rbx+0xe8],0x0
  404473:	mov    QWORD PTR [rbx+0xf0],0x0
  40447e:	mov    QWORD PTR [rbx+0x20],0x0
  404486:	vxorps xmm0,xmm0,xmm0
  40448a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  404492:	mov    rax,QWORD PTR [rbx+0x58]
  404496:	mov    rcx,QWORD PTR [rbx+0x68]
  40449a:	mov    QWORD PTR [rbx+0x18],rcx
  40449e:	mov    rcx,QWORD PTR [rbx+0x88]
  4044a5:	mov    QWORD PTR [rbx],rcx
  4044a8:	mov    QWORD PTR [rbx+0x8],rax
  4044ac:	mov    QWORD PTR [rbx+0x30],0x0
  4044b4:	cmp    DWORD PTR [rbx+0x128],0x0
  4044bb:	je     4044cc <flatcc_builder_reset@@Base+0x19c>
  4044bd:	add    rbx,0x130
  4044c4:	mov    rdi,rbx
  4044c7:	call   408a10 <flatcc_emitter_reset@@Base>
  4044cc:	xor    eax,eax
  4044ce:	pop    rbx
  4044cf:	ret    
  4044d0:	lea    rdi,[rip+0x61f9]        # 40a6d0 <flatcc_builder_padding_base@@Base+0x280>
  4044d7:	lea    rsi,[rip+0x6204]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4044de:	lea    rcx,[rip+0x625d]        # 40a742 <flatcc_builder_padding_base@@Base+0x2f2>
  4044e5:	mov    edx,0x1b2
  4044ea:	call   403060 <__assert_fail@plt>
  4044ef:	nop

00000000004044f0 <flatcc_builder_clear@@Base>:
  4044f0:	push   rbx
  4044f1:	mov    rbx,rdi
  4044f4:	lea    rsi,[rdi+0x58]
  4044f8:	mov    rdi,QWORD PTR [rdi+0x40]
  4044fc:	xor    edx,edx
  4044fe:	xor    ecx,ecx
  404500:	xor    r8d,r8d
  404503:	call   QWORD PTR [rbx+0x50]
  404506:	lea    rsi,[rbx+0x68]
  40450a:	mov    rdi,QWORD PTR [rbx+0x40]
  40450e:	xor    edx,edx
  404510:	xor    ecx,ecx
  404512:	mov    r8d,0x1
  404518:	call   QWORD PTR [rbx+0x50]
  40451b:	lea    rsi,[rbx+0x78]
  40451f:	mov    rdi,QWORD PTR [rbx+0x40]
  404523:	xor    edx,edx
  404525:	xor    ecx,ecx
  404527:	mov    r8d,0x2
  40452d:	call   QWORD PTR [rbx+0x50]
  404530:	lea    rsi,[rbx+0x88]
  404537:	mov    rdi,QWORD PTR [rbx+0x40]
  40453b:	xor    edx,edx
  40453d:	xor    ecx,ecx
  40453f:	mov    r8d,0x3
  404545:	call   QWORD PTR [rbx+0x50]
  404548:	lea    rsi,[rbx+0x98]
  40454f:	mov    rdi,QWORD PTR [rbx+0x40]
  404553:	xor    edx,edx
  404555:	xor    ecx,ecx
  404557:	mov    r8d,0x4
  40455d:	call   QWORD PTR [rbx+0x50]
  404560:	lea    rsi,[rbx+0xa8]
  404567:	mov    rdi,QWORD PTR [rbx+0x40]
  40456b:	xor    edx,edx
  40456d:	xor    ecx,ecx
  40456f:	mov    r8d,0x5
  404575:	call   QWORD PTR [rbx+0x50]
  404578:	lea    rsi,[rbx+0xb8]
  40457f:	mov    rdi,QWORD PTR [rbx+0x40]
  404583:	xor    edx,edx
  404585:	xor    ecx,ecx
  404587:	mov    r8d,0x6
  40458d:	call   QWORD PTR [rbx+0x50]
  404590:	lea    rsi,[rbx+0xc8]
  404597:	mov    rdi,QWORD PTR [rbx+0x40]
  40459b:	xor    edx,edx
  40459d:	xor    ecx,ecx
  40459f:	mov    r8d,0x7
  4045a5:	call   QWORD PTR [rbx+0x50]
  4045a8:	cmp    DWORD PTR [rbx+0x128],0x0
  4045af:	je     4045bd <flatcc_builder_clear@@Base+0xcd>
  4045b1:	lea    rdi,[rbx+0x130]
  4045b8:	call   408b10 <flatcc_emitter_clear@@Base>
  4045bd:	vxorps xmm0,xmm0,xmm0
  4045c1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  4045c9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  4045d1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  4045d9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  4045e1:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  4045e9:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  4045f1:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  4045f9:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404601:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404606:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40460b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404610:	vmovups YMMWORD PTR [rbx],ymm0
  404614:	mov    QWORD PTR [rbx+0x180],0x0
  40461f:	pop    rbx
  404620:	vzeroupper 
  404623:	ret    
  404624:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40462e:	xchg   ax,ax

0000000000404630 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404630:	push   r15
  404632:	push   r14
  404634:	push   r12
  404636:	push   rbx
  404637:	push   rax
  404638:	mov    r14,rsi
  40463b:	mov    r15,rdi
  40463e:	add    r14,0xf
  404642:	and    r14,0xfffffffffffffff8
  404646:	mov    rbx,QWORD PTR [rdi+0x180]
  40464d:	lea    r12,[rdi+0xc8]
  404654:	lea    rdx,[rbx+r14*1]
  404658:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40465f:	jbe    404678 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404661:	mov    rdi,QWORD PTR [r15+0x40]
  404665:	mov    rsi,r12
  404668:	xor    ecx,ecx
  40466a:	mov    r8d,0x7
  404670:	call   QWORD PTR [r15+0x50]
  404674:	test   eax,eax
  404676:	jne    4046c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404678:	add    rbx,QWORD PTR [r12]
  40467c:	je     4046b7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40467e:	mov    rdi,rbx
  404681:	xor    esi,esi
  404683:	mov    rdx,r14
  404686:	call   403070 <memset@plt>
  40468b:	mov    rax,QWORD PTR [r15+0x178]
  404692:	mov    QWORD PTR [rbx],rax
  404695:	add    rbx,0x8
  404699:	mov    rax,QWORD PTR [r15+0x180]
  4046a0:	lea    rcx,[rax+0x8]
  4046a4:	mov    QWORD PTR [r15+0x178],rcx
  4046ab:	add    rax,r14
  4046ae:	mov    QWORD PTR [r15+0x180],rax
  4046b5:	jmp    4046b9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  4046b7:	xor    ebx,ebx
  4046b9:	mov    rax,rbx
  4046bc:	add    rsp,0x8
  4046c0:	pop    rbx
  4046c1:	pop    r12
  4046c3:	pop    r14
  4046c5:	pop    r15
  4046c7:	ret    
  4046c8:	lea    rdi,[rip+0x71d3]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4046cf:	lea    rsi,[rip+0x600c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4046d6:	lea    rcx,[rip+0x6fff]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4046dd:	mov    edx,0x134
  4046e2:	call   403060 <__assert_fail@plt>
  4046e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004046f0 <flatcc_builder_enter_user_frame@@Base>:
  4046f0:	push   r15
  4046f2:	push   r14
  4046f4:	push   r12
  4046f6:	push   rbx
  4046f7:	push   rax
  4046f8:	mov    r14,rsi
  4046fb:	mov    rbx,rdi
  4046fe:	add    r14,0xf
  404702:	and    r14,0xfffffffffffffff8
  404706:	mov    r15,QWORD PTR [rdi+0x180]
  40470d:	lea    r12,[rdi+0xc8]
  404714:	lea    rdx,[r15+r14*1]
  404718:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40471f:	jbe    404737 <flatcc_builder_enter_user_frame@@Base+0x47>
  404721:	mov    rdi,QWORD PTR [rbx+0x40]
  404725:	mov    rsi,r12
  404728:	xor    ecx,ecx
  40472a:	mov    r8d,0x7
  404730:	call   QWORD PTR [rbx+0x50]
  404733:	test   eax,eax
  404735:	jne    404780 <flatcc_builder_enter_user_frame@@Base+0x90>
  404737:	add    r15,QWORD PTR [r12]
  40473b:	je     404772 <flatcc_builder_enter_user_frame@@Base+0x82>
  40473d:	mov    rdi,r15
  404740:	xor    esi,esi
  404742:	mov    rdx,r14
  404745:	call   403070 <memset@plt>
  40474a:	mov    rax,QWORD PTR [rbx+0x178]
  404751:	mov    QWORD PTR [r15],rax
  404754:	mov    rcx,QWORD PTR [rbx+0x180]
  40475b:	lea    rax,[rcx+0x8]
  40475f:	mov    QWORD PTR [rbx+0x178],rax
  404766:	add    rcx,r14
  404769:	mov    QWORD PTR [rbx+0x180],rcx
  404770:	jmp    404774 <flatcc_builder_enter_user_frame@@Base+0x84>
  404772:	xor    eax,eax
  404774:	add    rsp,0x8
  404778:	pop    rbx
  404779:	pop    r12
  40477b:	pop    r14
  40477d:	pop    r15
  40477f:	ret    
  404780:	lea    rdi,[rip+0x711b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404787:	lea    rsi,[rip+0x5f54]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40478e:	lea    rcx,[rip+0x6f47]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  404795:	mov    edx,0x134
  40479a:	call   403060 <__assert_fail@plt>
  40479f:	nop

00000000004047a0 <flatcc_builder_exit_user_frame@@Base>:
  4047a0:	push   rax
  4047a1:	mov    rax,QWORD PTR [rdi+0x178]
  4047a8:	test   rax,rax
  4047ab:	je     4047cf <flatcc_builder_exit_user_frame@@Base+0x2f>
  4047ad:	mov    rcx,QWORD PTR [rdi+0xc8]
  4047b4:	mov    edx,eax
  4047b6:	add    rax,0xfffffffffffffff8
  4047ba:	mov    QWORD PTR [rdi+0x180],rax
  4047c1:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4047c6:	mov    QWORD PTR [rdi+0x178],rax
  4047cd:	pop    rcx
  4047ce:	ret    
  4047cf:	lea    rdi,[rip+0x5faa]        # 40a780 <flatcc_builder_padding_base@@Base+0x330>
  4047d6:	lea    rsi,[rip+0x5f05]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4047dd:	lea    rcx,[rip+0x5fb5]        # 40a799 <flatcc_builder_padding_base@@Base+0x349>
  4047e4:	mov    edx,0x21e
  4047e9:	call   403060 <__assert_fail@plt>
  4047ee:	xchg   ax,ax

00000000004047f0 <flatcc_builder_exit_user_frame_at@@Base>:
  4047f0:	push   rax
  4047f1:	cmp    QWORD PTR [rdi+0x178],rsi
  4047f8:	jb     404828 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  4047fa:	mov    QWORD PTR [rdi+0x178],rsi
  404801:	test   rsi,rsi
  404804:	je     404847 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404806:	mov    rax,QWORD PTR [rdi+0xc8]
  40480d:	mov    ecx,esi
  40480f:	add    rsi,0xfffffffffffffff8
  404813:	mov    QWORD PTR [rdi+0x180],rsi
  40481a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40481f:	mov    QWORD PTR [rdi+0x178],rax
  404826:	pop    rcx
  404827:	ret    
  404828:	lea    rdi,[rip+0x5fa4]        # 40a7d3 <flatcc_builder_padding_base@@Base+0x383>
  40482f:	lea    rsi,[rip+0x5eac]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404836:	lea    rcx,[rip+0x5fb5]        # 40a7f2 <flatcc_builder_padding_base@@Base+0x3a2>
  40483d:	mov    edx,0x227
  404842:	call   403060 <__assert_fail@plt>
  404847:	lea    rdi,[rip+0x5f32]        # 40a780 <flatcc_builder_padding_base@@Base+0x330>
  40484e:	lea    rsi,[rip+0x5e8d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404855:	lea    rcx,[rip+0x5f3d]        # 40a799 <flatcc_builder_padding_base@@Base+0x349>
  40485c:	mov    edx,0x21e
  404861:	call   403060 <__assert_fail@plt>
  404866:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404870 <flatcc_builder_get_current_user_frame@@Base>:
  404870:	mov    rax,QWORD PTR [rdi+0x178]
  404877:	ret    
  404878:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404880 <flatcc_builder_get_user_frame_ptr@@Base>:
  404880:	mov    eax,esi
  404882:	add    rax,QWORD PTR [rdi+0xc8]
  404889:	ret    
  40488a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404890 <flatcc_builder_embed_buffer@@Base>:
  404890:	push   rbp
  404891:	push   r15
  404893:	push   r14
  404895:	push   r12
  404897:	push   rbx
  404898:	sub    rsp,0xa0
  40489f:	mov    ebx,r9d
  4048a2:	mov    rbp,rcx
  4048a5:	mov    r15,rdx
  4048a8:	mov    edx,esi
  4048aa:	mov    r12,rdi
  4048ad:	mov    WORD PTR [rsp+0xa],r8w
  4048b3:	xor    ecx,ecx
  4048b5:	cmp    DWORD PTR [rdi+0x100],0x0
  4048bc:	setne  cl
  4048bf:	lea    rsi,[rsp+0xa]
  4048c4:	call   404a30 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4048c9:	and    ebx,0x2
  4048cc:	movzx  eax,WORD PTR [rsp+0xa]
  4048d1:	mov    r14d,DWORD PTR [r12+0xf0]
  4048d9:	lea    ecx,[rbp+rbx*2+0x0]
  4048dd:	mov    edx,r14d
  4048e0:	sub    edx,ecx
  4048e2:	dec    eax
  4048e4:	and    eax,edx
  4048e6:	lea    ecx,[rax+rbp*1]
  4048e9:	mov    DWORD PTR [rsp+0xc],ecx
  4048ed:	mov    QWORD PTR [rsp+0x10],0x0
  4048f6:	mov    DWORD PTR [rsp+0x18],0x0
  4048fe:	cmp    DWORD PTR [r12+0x100],0x0
  404907:	je     4049d9 <flatcc_builder_embed_buffer@@Base+0x149>
  40490d:	mov    QWORD PTR [rsp+0x10],0x4
  404916:	lea    rcx,[rsp+0xc]
  40491b:	mov    QWORD PTR [rsp+0x20],rcx
  404920:	mov    QWORD PTR [rsp+0x28],0x4
  404929:	mov    DWORD PTR [rsp+0x18],0x1
  404931:	mov    r8d,0x4
  404937:	mov    edx,0x1
  40493c:	test   rbp,rbp
  40493f:	je     40495f <flatcc_builder_embed_buffer@@Base+0xcf>
  404941:	add    r8,rbp
  404944:	mov    QWORD PTR [rsp+0x10],r8
  404949:	mov    ecx,edx
  40494b:	shl    rcx,0x4
  40494f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404954:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  404959:	inc    edx
  40495b:	mov    DWORD PTR [rsp+0x18],edx
  40495f:	test   eax,eax
  404961:	je     40498a <flatcc_builder_embed_buffer@@Base+0xfa>
  404963:	mov    eax,eax
  404965:	add    r8,rax
  404968:	mov    QWORD PTR [rsp+0x10],r8
  40496d:	mov    ecx,edx
  40496f:	shl    rcx,0x4
  404973:	lea    rsi,[rip+0x5ad6]        # 40a450 <flatcc_builder_padding_base@@Base>
  40497a:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40497f:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404984:	inc    edx
  404986:	mov    DWORD PTR [rsp+0x18],edx
  40498a:	cmp    r8,0x11
  40498e:	setb   al
  404991:	lea    rcx,[r8-0x10]
  404995:	shr    rcx,0x20
  404999:	sete   cl
  40499c:	test   r8d,r8d
  40499f:	jle    4049ec <flatcc_builder_embed_buffer@@Base+0x15c>
  4049a1:	or     al,cl
  4049a3:	je     4049ec <flatcc_builder_embed_buffer@@Base+0x15c>
  4049a5:	sub    r14d,r8d
  4049a8:	mov    rdi,QWORD PTR [r12+0x38]
  4049ad:	lea    rsi,[rsp+0x20]
  4049b2:	mov    ecx,r14d
  4049b5:	call   QWORD PTR [r12+0x48]
  4049ba:	test   eax,eax
  4049bc:	jne    404a0b <flatcc_builder_embed_buffer@@Base+0x17b>
  4049be:	mov    DWORD PTR [r12+0xf0],r14d
  4049c6:	mov    eax,r14d
  4049c9:	add    rsp,0xa0
  4049d0:	pop    rbx
  4049d1:	pop    r12
  4049d3:	pop    r14
  4049d5:	pop    r15
  4049d7:	pop    rbp
  4049d8:	ret    
  4049d9:	xor    edx,edx
  4049db:	xor    r8d,r8d
  4049de:	test   rbp,rbp
  4049e1:	jne    404941 <flatcc_builder_embed_buffer@@Base+0xb1>
  4049e7:	jmp    40495f <flatcc_builder_embed_buffer@@Base+0xcf>
  4049ec:	lea    rdi,[rip+0x6eaf]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4049f3:	lea    rsi,[rip+0x5ce8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4049fa:	lea    rcx,[rip+0x6d60]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404a01:	mov    edx,0x287
  404a06:	call   403060 <__assert_fail@plt>
  404a0b:	lea    rdi,[rip+0x6e90]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404a12:	lea    rsi,[rip+0x5cc9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404a19:	lea    rcx,[rip+0x6d41]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404a20:	mov    edx,0x28b
  404a25:	call   403060 <__assert_fail@plt>
  404a2a:	nop    WORD PTR [rax+rax*1+0x0]
  404a30:	push   rbx
  404a31:	sub    rsp,0x90
  404a38:	mov    rax,rdi
  404a3b:	test   dx,dx
  404a3e:	jne    404a51 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404a40:	mov    edi,DWORD PTR [rax+0xec]
  404a46:	test   di,di
  404a49:	mov    edx,0x1
  404a4e:	cmovne edx,edi
  404a51:	movzx  ebx,WORD PTR [rsi]
  404a54:	mov    edi,0x4
  404a59:	cmp    bx,0x4
  404a5d:	cmovae edi,ebx
  404a60:	jb     404a6d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404a62:	cmp    di,dx
  404a65:	jb     404a6d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404a67:	test   ecx,ecx
  404a69:	jne    404ad4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a6b:	jmp    404a7a <flatcc_builder_embed_buffer@@Base+0x1ea>
  404a6d:	cmp    di,dx
  404a70:	cmovb  edi,edx
  404a73:	mov    WORD PTR [rsi],di
  404a76:	test   ecx,ecx
  404a78:	jne    404ad4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a7a:	mov    ebx,DWORD PTR [rax+0xf4]
  404a80:	movzx  r8d,dx
  404a84:	dec    r8d
  404a87:	and    r8d,ebx
  404a8a:	je     404ad4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a8c:	mov    QWORD PTR [rsp],r8
  404a90:	lea    rcx,[rip+0x59b9]        # 40a450 <flatcc_builder_padding_base@@Base>
  404a97:	mov    QWORD PTR [rsp+0x10],rcx
  404a9c:	mov    QWORD PTR [rsp+0x18],r8
  404aa1:	mov    DWORD PTR [rsp+0x8],0x1
  404aa9:	lea    ecx,[r8+rbx*1]
  404aad:	mov    DWORD PTR [rax+0xf4],ecx
  404ab3:	test   r8d,r8d
  404ab6:	js     404add <flatcc_builder_embed_buffer@@Base+0x24d>
  404ab8:	mov    rdi,QWORD PTR [rax+0x38]
  404abc:	lea    rsi,[rsp+0x10]
  404ac1:	mov    edx,0x1
  404ac6:	mov    ecx,ebx
  404ac8:	call   QWORD PTR [rax+0x48]
  404acb:	test   eax,eax
  404acd:	jne    404afc <flatcc_builder_embed_buffer@@Base+0x26c>
  404acf:	cmp    ebx,0xffffffff
  404ad2:	je     404b1b <flatcc_builder_embed_buffer@@Base+0x28b>
  404ad4:	add    rsp,0x90
  404adb:	pop    rbx
  404adc:	ret    
  404add:	lea    rdi,[rip+0x6dbe]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404ae4:	lea    rsi,[rip+0x5bf7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404aeb:	lea    rcx,[rip+0x6d2b]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  404af2:	mov    edx,0x2a1
  404af7:	call   403060 <__assert_fail@plt>
  404afc:	lea    rdi,[rip+0x6d9f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404b03:	lea    rsi,[rip+0x5bd8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404b0a:	lea    rcx,[rip+0x6d0c]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  404b11:	mov    edx,0x2a5
  404b16:	call   403060 <__assert_fail@plt>
  404b1b:	lea    rdi,[rip+0x6d80]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404b22:	lea    rsi,[rip+0x5bb9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404b29:	lea    rcx,[rip+0x6bef]        # 40b71f <flatcc_builder_padding_base@@Base+0x12cf>
  404b30:	mov    edx,0x2be
  404b35:	call   403060 <__assert_fail@plt>
  404b3a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404b40 <flatcc_builder_create_buffer@@Base>:
  404b40:	push   rbp
  404b41:	push   r15
  404b43:	push   r14
  404b45:	push   r13
  404b47:	push   r12
  404b49:	push   rbx
  404b4a:	sub    rsp,0xa8
  404b51:	mov    r12d,r9d
  404b54:	mov    r14d,ecx
  404b57:	mov    rbp,rsi
  404b5a:	mov    r13,rdi
  404b5d:	mov    WORD PTR [rsp+0xa],r8w
  404b63:	mov    DWORD PTR [rsp+0xc],0x0
  404b6b:	mov    r15d,r9d
  404b6e:	and    r15d,0x1
  404b72:	lea    rsi,[rsp+0xa]
  404b77:	mov    ecx,r15d
  404b7a:	call   404a30 <flatcc_builder_embed_buffer@@Base+0x1a0>
  404b7f:	movzx  eax,WORD PTR [rsp+0xa]
  404b84:	cmp    WORD PTR [r13+0xe8],ax
  404b8c:	jae    404b96 <flatcc_builder_create_buffer@@Base+0x56>
  404b8e:	mov    WORD PTR [r13+0xe8],ax
  404b96:	movzx  edx,ax
  404b99:	xor    eax,eax
  404b9b:	test   rbp,rbp
  404b9e:	je     404bb8 <flatcc_builder_create_buffer@@Base+0x78>
  404ba0:	mov    ecx,DWORD PTR [rbp+0x0]
  404ba3:	mov    DWORD PTR [rsp+0xc],ecx
  404ba7:	xor    edi,edi
  404ba9:	test   ecx,ecx
  404bab:	setne  dil
  404baf:	mov    rsi,rdi
  404bb2:	shl    rsi,0x2
  404bb6:	jmp    404bbc <flatcc_builder_create_buffer@@Base+0x7c>
  404bb8:	xor    edi,edi
  404bba:	xor    esi,esi
  404bbc:	lea    ebx,[r12+r12*1]
  404bc0:	and    ebx,0x4
  404bc3:	mov    ebp,DWORD PTR [r13+0xf0]
  404bca:	mov    ecx,ebp
  404bcc:	sub    ecx,ebx
  404bce:	sub    ecx,esi
  404bd0:	add    ecx,0xfffffffc
  404bd3:	dec    edx
  404bd5:	mov    QWORD PTR [rsp+0x18],0x0
  404bde:	mov    DWORD PTR [rsp+0x20],0x0
  404be6:	test   r12b,0x3
  404bea:	je     404c1d <flatcc_builder_create_buffer@@Base+0xdd>
  404bec:	mov    QWORD PTR [rsp+0x18],0x4
  404bf5:	lea    rax,[rsp+0x10]
  404bfa:	mov    QWORD PTR [rsp+0x28],rax
  404bff:	mov    QWORD PTR [rsp+0x30],0x4
  404c08:	mov    DWORD PTR [rsp+0x20],0x1
  404c10:	mov    r8d,0x8
  404c16:	mov    eax,0x1
  404c1b:	jmp    404c23 <flatcc_builder_create_buffer@@Base+0xe3>
  404c1d:	mov    r8d,0x4
  404c23:	and    ecx,edx
  404c25:	mov    QWORD PTR [rsp+0x18],r8
  404c2a:	mov    edx,eax
  404c2c:	shl    rdx,0x4
  404c30:	lea    rbx,[rsp+0x14]
  404c35:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  404c3a:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404c43:	lea    edx,[rax+0x1]
  404c46:	mov    DWORD PTR [rsp+0x20],edx
  404c4a:	test   dil,dil
  404c4d:	je     404c75 <flatcc_builder_create_buffer@@Base+0x135>
  404c4f:	add    r8,rsi
  404c52:	mov    QWORD PTR [rsp+0x18],r8
  404c57:	mov    edx,edx
  404c59:	shl    rdx,0x4
  404c5d:	lea    rdi,[rsp+0xc]
  404c62:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404c67:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  404c6c:	or     eax,0x2
  404c6f:	mov    DWORD PTR [rsp+0x20],eax
  404c73:	mov    edx,eax
  404c75:	test   ecx,ecx
  404c77:	je     404ca0 <flatcc_builder_create_buffer@@Base+0x160>
  404c79:	mov    eax,ecx
  404c7b:	add    r8,rax
  404c7e:	mov    QWORD PTR [rsp+0x18],r8
  404c83:	mov    ecx,edx
  404c85:	shl    rcx,0x4
  404c89:	lea    rsi,[rip+0x57c0]        # 40a450 <flatcc_builder_padding_base@@Base>
  404c90:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  404c95:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  404c9a:	inc    edx
  404c9c:	mov    DWORD PTR [rsp+0x20],edx
  404ca0:	xor    eax,eax
  404ca2:	test   r12b,0x3
  404ca6:	setne  al
  404ca9:	sub    ebp,r8d
  404cac:	lea    eax,[rbp+rax*4+0x0]
  404cb0:	mov    ecx,r15d
  404cb3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  404cbb:	sub    ecx,eax
  404cbd:	mov    DWORD PTR [rsp+0x10],ecx
  404cc1:	sub    r14d,eax
  404cc4:	mov    DWORD PTR [rsp+0x14],r14d
  404cc9:	cmp    r8,0x11
  404ccd:	setb   al
  404cd0:	lea    rcx,[r8-0x10]
  404cd4:	shr    rcx,0x20
  404cd8:	sete   cl
  404cdb:	test   r8d,r8d
  404cde:	jle    404d16 <flatcc_builder_create_buffer@@Base+0x1d6>
  404ce0:	or     al,cl
  404ce2:	je     404d16 <flatcc_builder_create_buffer@@Base+0x1d6>
  404ce4:	mov    rdi,QWORD PTR [r13+0x38]
  404ce8:	lea    rsi,[rsp+0x28]
  404ced:	mov    ecx,ebp
  404cef:	call   QWORD PTR [r13+0x48]
  404cf3:	test   eax,eax
  404cf5:	jne    404d35 <flatcc_builder_create_buffer@@Base+0x1f5>
  404cf7:	mov    DWORD PTR [r13+0xf0],ebp
  404cfe:	test   ebp,ebp
  404d00:	je     404d54 <flatcc_builder_create_buffer@@Base+0x214>
  404d02:	mov    eax,ebp
  404d04:	add    rsp,0xa8
  404d0b:	pop    rbx
  404d0c:	pop    r12
  404d0e:	pop    r13
  404d10:	pop    r14
  404d12:	pop    r15
  404d14:	pop    rbp
  404d15:	ret    
  404d16:	lea    rdi,[rip+0x6b85]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d1d:	lea    rsi,[rip+0x59be]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d24:	lea    rcx,[rip+0x6a36]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404d2b:	mov    edx,0x287
  404d30:	call   403060 <__assert_fail@plt>
  404d35:	lea    rdi,[rip+0x6b66]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d3c:	lea    rsi,[rip+0x599f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d43:	lea    rcx,[rip+0x6a17]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404d4a:	mov    edx,0x28b
  404d4f:	call   403060 <__assert_fail@plt>
  404d54:	lea    rdi,[rip+0x6b47]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d5b:	lea    rsi,[rip+0x5980]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d62:	lea    rcx,[rip+0x5ace]        # 40a837 <flatcc_builder_padding_base@@Base+0x3e7>
  404d69:	mov    edx,0x304
  404d6e:	call   403060 <__assert_fail@plt>
  404d73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404d7d:	nop    DWORD PTR [rax]

0000000000404d80 <flatcc_builder_create_struct@@Base>:
  404d80:	push   rbp
  404d81:	push   rbx
  404d82:	sub    rsp,0x98
  404d89:	test   cx,cx
  404d8c:	je     404e82 <flatcc_builder_create_struct@@Base+0x102>
  404d92:	mov    r8,rdx
  404d95:	mov    rbx,rdi
  404d98:	cmp    WORD PTR [rdi+0xe8],cx
  404d9f:	jae    404da8 <flatcc_builder_create_struct@@Base+0x28>
  404da1:	mov    WORD PTR [rbx+0xe8],cx
  404da8:	mov    ebp,DWORD PTR [rbx+0xf0]
  404dae:	mov    edx,ebp
  404db0:	sub    edx,r8d
  404db3:	movzx  eax,cx
  404db6:	dec    eax
  404db8:	and    eax,edx
  404dba:	mov    QWORD PTR [rsp+0x8],0x0
  404dc3:	mov    DWORD PTR [rsp+0x10],0x0
  404dcb:	test   r8,r8
  404dce:	je     404e5b <flatcc_builder_create_struct@@Base+0xdb>
  404dd4:	mov    QWORD PTR [rsp+0x8],r8
  404dd9:	mov    QWORD PTR [rsp+0x18],rsi
  404dde:	mov    QWORD PTR [rsp+0x20],r8
  404de3:	mov    DWORD PTR [rsp+0x10],0x1
  404deb:	mov    edx,0x1
  404df0:	test   eax,eax
  404df2:	je     404e19 <flatcc_builder_create_struct@@Base+0x99>
  404df4:	add    r8,rax
  404df7:	mov    QWORD PTR [rsp+0x8],r8
  404dfc:	mov    ecx,edx
  404dfe:	shl    rcx,0x4
  404e02:	lea    rsi,[rip+0x5647]        # 40a450 <flatcc_builder_padding_base@@Base>
  404e09:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  404e0e:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  404e13:	inc    edx
  404e15:	mov    DWORD PTR [rsp+0x10],edx
  404e19:	cmp    r8,0x11
  404e1d:	setb   al
  404e20:	lea    rcx,[r8-0x10]
  404e24:	shr    rcx,0x20
  404e28:	sete   cl
  404e2b:	test   r8d,r8d
  404e2e:	jle    404e63 <flatcc_builder_create_struct@@Base+0xe3>
  404e30:	or     al,cl
  404e32:	je     404e63 <flatcc_builder_create_struct@@Base+0xe3>
  404e34:	sub    ebp,r8d
  404e37:	mov    rdi,QWORD PTR [rbx+0x38]
  404e3b:	lea    rsi,[rsp+0x18]
  404e40:	mov    ecx,ebp
  404e42:	call   QWORD PTR [rbx+0x48]
  404e45:	test   eax,eax
  404e47:	jne    404ea1 <flatcc_builder_create_struct@@Base+0x121>
  404e49:	mov    DWORD PTR [rbx+0xf0],ebp
  404e4f:	mov    eax,ebp
  404e51:	add    rsp,0x98
  404e58:	pop    rbx
  404e59:	pop    rbp
  404e5a:	ret    
  404e5b:	xor    edx,edx
  404e5d:	test   eax,eax
  404e5f:	jne    404df4 <flatcc_builder_create_struct@@Base+0x74>
  404e61:	jmp    404e19 <flatcc_builder_create_struct@@Base+0x99>
  404e63:	lea    rdi,[rip+0x6a38]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404e6a:	lea    rsi,[rip+0x5871]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404e71:	lea    rcx,[rip+0x68e9]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404e78:	mov    edx,0x287
  404e7d:	call   403060 <__assert_fail@plt>
  404e82:	lea    rdi,[rip+0x5a31]        # 40a8ba <flatcc_builder_padding_base@@Base+0x46a>
  404e89:	lea    rsi,[rip+0x5852]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404e90:	lea    rcx,[rip+0x5a2e]        # 40a8c5 <flatcc_builder_padding_base@@Base+0x475>
  404e97:	mov    edx,0x30f
  404e9c:	call   403060 <__assert_fail@plt>
  404ea1:	lea    rdi,[rip+0x69fa]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404ea8:	lea    rsi,[rip+0x5833]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404eaf:	lea    rcx,[rip+0x68ab]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404eb6:	mov    edx,0x28b
  404ebb:	call   403060 <__assert_fail@plt>

0000000000404ec0 <flatcc_builder_start_buffer@@Base>:
  404ec0:	push   rbp
  404ec1:	push   r15
  404ec3:	push   r14
  404ec5:	push   rbx
  404ec6:	push   rax
  404ec7:	mov    r15d,ecx
  404eca:	mov    ebp,edx
  404ecc:	mov    r14,rsi
  404ecf:	mov    rbx,rdi
  404ed2:	movzx  esi,WORD PTR [rdi+0xe8]
  404ed9:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  404ede:	mov    ecx,eax
  404ee0:	mov    eax,0xffffffff
  404ee5:	test   ecx,ecx
  404ee7:	jne    404f8c <flatcc_builder_start_buffer@@Base+0xcc>
  404eed:	mov    WORD PTR [rbx+0xe8],0x1
  404ef6:	movzx  eax,WORD PTR [rbx+0xec]
  404efd:	mov    rcx,QWORD PTR [rbx+0x30]
  404f01:	mov    WORD PTR [rcx+0x22],ax
  404f05:	mov    WORD PTR [rbx+0xec],bp
  404f0c:	movzx  eax,WORD PTR [rbx+0x10c]
  404f13:	mov    rcx,QWORD PTR [rbx+0x30]
  404f17:	mov    WORD PTR [rcx+0x20],ax
  404f1b:	mov    WORD PTR [rbx+0x10c],r15w
  404f23:	mov    eax,DWORD PTR [rbx+0xf8]
  404f29:	mov    rcx,QWORD PTR [rbx+0x30]
  404f2d:	mov    DWORD PTR [rcx+0x14],eax
  404f30:	mov    eax,DWORD PTR [rbx+0x100]
  404f36:	mov    rcx,QWORD PTR [rbx+0x30]
  404f3a:	mov    DWORD PTR [rcx+0x1c],eax
  404f3d:	mov    eax,DWORD PTR [rbx+0xf0]
  404f43:	mov    DWORD PTR [rbx+0xf8],eax
  404f49:	mov    eax,DWORD PTR [rbx+0xfc]
  404f4f:	lea    ecx,[rax+0x1]
  404f52:	mov    DWORD PTR [rbx+0xfc],ecx
  404f58:	mov    DWORD PTR [rbx+0x100],eax
  404f5e:	mov    eax,DWORD PTR [rbx+0x110]
  404f64:	mov    rcx,QWORD PTR [rbx+0x30]
  404f68:	mov    DWORD PTR [rcx+0x10],eax
  404f6b:	test   r14,r14
  404f6e:	jne    404f77 <flatcc_builder_start_buffer@@Base+0xb7>
  404f70:	lea    r14,[rip+0x54d9]        # 40a450 <flatcc_builder_padding_base@@Base>
  404f77:	mov    eax,DWORD PTR [r14]
  404f7a:	mov    DWORD PTR [rbx+0x110],eax
  404f80:	mov    rax,QWORD PTR [rbx+0x30]
  404f84:	mov    WORD PTR [rax+0xe],0x1
  404f8a:	xor    eax,eax
  404f8c:	add    rsp,0x8
  404f90:	pop    rbx
  404f91:	pop    r14
  404f93:	pop    r15
  404f95:	pop    rbp
  404f96:	ret    
  404f97:	nop    WORD PTR [rax+rax*1+0x0]
  404fa0:	push   rbp
  404fa1:	push   r15
  404fa3:	push   r14
  404fa5:	push   rbx
  404fa6:	push   rax
  404fa7:	mov    r14d,esi
  404faa:	mov    rbx,rdi
  404fad:	movsxd rbp,DWORD PTR [rdi+0x104]
  404fb4:	lea    eax,[rbp+0x1]
  404fb7:	mov    DWORD PTR [rdi+0x104],eax
  404fbd:	cmp    ebp,DWORD PTR [rdi+0x108]
  404fc3:	jge    404fd6 <flatcc_builder_start_buffer@@Base+0x116>
  404fc5:	mov    rcx,QWORD PTR [rbx+0x30]
  404fc9:	add    rcx,0x24
  404fcd:	mov    QWORD PTR [rbx+0x30],rcx
  404fd1:	jmp    405069 <flatcc_builder_start_buffer@@Base+0x1a9>
  404fd6:	mov    eax,DWORD PTR [rbx+0x120]
  404fdc:	mov    r15d,0xffffffff
  404fe2:	test   eax,eax
  404fe4:	jle    404fee <flatcc_builder_start_buffer@@Base+0x12e>
  404fe6:	cmp    ebp,eax
  404fe8:	jge    4050a4 <flatcc_builder_start_buffer@@Base+0x1e4>
  404fee:	shl    rbp,0x2
  404ff2:	lea    rdx,[rbp*8+0x24]
  404ffa:	add    rdx,rbp
  404ffd:	cmp    rdx,QWORD PTR [rbx+0xa0]
  405004:	jbe    405024 <flatcc_builder_start_buffer@@Base+0x164>
  405006:	lea    rsi,[rbx+0x98]
  40500d:	mov    rdi,QWORD PTR [rbx+0x40]
  405011:	xor    ecx,ecx
  405013:	mov    r8d,0x4
  405019:	call   QWORD PTR [rbx+0x50]
  40501c:	test   eax,eax
  40501e:	jne    4050b2 <flatcc_builder_start_buffer@@Base+0x1f2>
  405024:	lea    rcx,[rbp*8+0x0]
  40502c:	add    rcx,rbp
  40502f:	add    rcx,QWORD PTR [rbx+0x98]
  405036:	mov    QWORD PTR [rbx+0x30],rcx
  40503a:	je     4050a4 <flatcc_builder_start_buffer@@Base+0x1e4>
  40503c:	movabs rax,0xe38e38e38e38e38f
  405046:	mul    QWORD PTR [rbx+0xa0]
  40504d:	shr    rdx,0x5
  405051:	mov    eax,DWORD PTR [rbx+0x120]
  405057:	cmp    eax,edx
  405059:	mov    esi,edx
  40505b:	cmovle esi,eax
  40505e:	test   eax,eax
  405060:	cmovle esi,edx
  405063:	mov    DWORD PTR [rbx+0x108],esi
  405069:	mov    eax,DWORD PTR [rbx+0x20]
  40506c:	mov    DWORD PTR [rcx+0x8],eax
  40506f:	movzx  edx,WORD PTR [rbx+0xea]
  405076:	mov    WORD PTR [rcx+0xc],dx
  40507a:	mov    WORD PTR [rbx+0xea],r14w
  405082:	mov    edx,DWORD PTR [rbx+0x28]
  405085:	mov    DWORD PTR [rcx],edx
  405087:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40508e:	lea    eax,[rax+rdx*1]
  405091:	add    eax,0x7
  405094:	and    eax,0xfffffff8
  405097:	mov    DWORD PTR [rbx+0x28],eax
  40509a:	mov    DWORD PTR [rbx+0x20],0x0
  4050a1:	xor    r15d,r15d
  4050a4:	mov    eax,r15d
  4050a7:	add    rsp,0x8
  4050ab:	pop    rbx
  4050ac:	pop    r14
  4050ae:	pop    r15
  4050b0:	pop    rbp
  4050b1:	ret    
  4050b2:	lea    rdi,[rip+0x67e9]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4050b9:	lea    rsi,[rip+0x5622]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4050c0:	lea    rcx,[rip+0x6615]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4050c7:	mov    edx,0x134
  4050cc:	call   403060 <__assert_fail@plt>
  4050d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4050db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004050e0 <flatcc_builder_end_buffer@@Base>:
  4050e0:	push   rbp
  4050e1:	push   rbx
  4050e2:	push   rax
  4050e3:	mov    rax,QWORD PTR [rdi+0x30]
  4050e7:	cmp    WORD PTR [rax+0xe],0x1
  4050ec:	jne    4051e9 <flatcc_builder_end_buffer@@Base+0x109>
  4050f2:	mov    ecx,esi
  4050f4:	mov    rbx,rdi
  4050f7:	movzx  eax,WORD PTR [rdi+0x10c]
  4050fe:	and    eax,0x2
  405101:	xor    r9d,r9d
  405104:	cmp    DWORD PTR [rdi+0x100],0x0
  40510b:	setne  r9b
  40510f:	or     r9d,eax
  405112:	movzx  edi,WORD PTR [rdi+0xe8]
  405119:	movzx  eax,WORD PTR [rbx+0xec]
  405120:	cmp    di,ax
  405123:	jae    40512e <flatcc_builder_end_buffer@@Base+0x4e>
  405125:	mov    WORD PTR [rbx+0xe8],ax
  40512c:	mov    edi,eax
  40512e:	lea    rsi,[rbx+0x110]
  405135:	movzx  edx,ax
  405138:	movzx  r8d,di
  40513c:	mov    rdi,rbx
  40513f:	call   404b40 <flatcc_builder_create_buffer@@Base>
  405144:	mov    ebp,eax
  405146:	test   eax,eax
  405148:	je     4051e0 <flatcc_builder_end_buffer@@Base+0x100>
  40514e:	mov    rax,QWORD PTR [rbx+0x30]
  405152:	mov    ecx,DWORD PTR [rax+0x14]
  405155:	mov    DWORD PTR [rbx+0xf8],ecx
  40515b:	mov    ecx,DWORD PTR [rax+0x1c]
  40515e:	mov    DWORD PTR [rbx+0x100],ecx
  405164:	mov    ecx,DWORD PTR [rax+0x10]
  405167:	mov    DWORD PTR [rbx+0x110],ecx
  40516d:	movzx  eax,WORD PTR [rax+0x20]
  405171:	mov    WORD PTR [rbx+0x10c],ax
  405178:	mov    rdi,QWORD PTR [rbx+0x18]
  40517c:	mov    edx,DWORD PTR [rbx+0x20]
  40517f:	xor    esi,esi
  405181:	call   403070 <memset@plt>
  405186:	mov    rax,QWORD PTR [rbx+0x30]
  40518a:	mov    ecx,DWORD PTR [rax+0x8]
  40518d:	mov    DWORD PTR [rbx+0x20],ecx
  405190:	mov    ecx,DWORD PTR [rax]
  405192:	mov    DWORD PTR [rbx+0x28],ecx
  405195:	mov    edx,DWORD PTR [rax+0x4]
  405198:	mov    rsi,rcx
  40519b:	add    rsi,QWORD PTR [rbx+0x68]
  40519f:	mov    QWORD PTR [rbx+0x18],rsi
  4051a3:	mov    esi,DWORD PTR [rbx+0x70]
  4051a6:	sub    esi,ecx
  4051a8:	cmp    esi,edx
  4051aa:	cmova  esi,edx
  4051ad:	mov    DWORD PTR [rbx+0x24],esi
  4051b0:	movzx  ecx,WORD PTR [rbx+0xea]
  4051b7:	cmp    WORD PTR [rbx+0xe8],cx
  4051be:	jae    4051c7 <flatcc_builder_end_buffer@@Base+0xe7>
  4051c0:	mov    WORD PTR [rbx+0xe8],cx
  4051c7:	movzx  ecx,WORD PTR [rax+0xc]
  4051cb:	mov    WORD PTR [rbx+0xea],cx
  4051d2:	add    rax,0xffffffffffffffdc
  4051d6:	mov    QWORD PTR [rbx+0x30],rax
  4051da:	dec    DWORD PTR [rbx+0x104]
  4051e0:	mov    eax,ebp
  4051e2:	add    rsp,0x8
  4051e6:	pop    rbx
  4051e7:	pop    rbp
  4051e8:	ret    
  4051e9:	lea    rdi,[rip+0x573b]        # 40a92b <flatcc_builder_padding_base@@Base+0x4db>
  4051f0:	lea    rsi,[rip+0x54eb]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4051f7:	lea    rcx,[rip+0x5759]        # 40a957 <flatcc_builder_padding_base@@Base+0x507>
  4051fe:	mov    edx,0x346
  405203:	call   403060 <__assert_fail@plt>
  405208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405210 <flatcc_builder_start_struct@@Base>:
  405210:	push   r15
  405212:	push   r14
  405214:	push   rbx
  405215:	mov    r14,rsi
  405218:	mov    rbx,rdi
  40521b:	mov    esi,edx
  40521d:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  405222:	test   eax,eax
  405224:	je     40522d <flatcc_builder_start_struct@@Base+0x1d>
  405226:	xor    eax,eax
  405228:	jmp    4052c1 <flatcc_builder_start_struct@@Base+0xb1>
  40522d:	mov    rdx,QWORD PTR [rbx+0x30]
  405231:	mov    WORD PTR [rdx+0xe],0x2
  405237:	mov    ecx,DWORD PTR [rbx+0x28]
  40523a:	mov    esi,DWORD PTR [rbx+0x70]
  40523d:	mov    rax,QWORD PTR [rbx+0x68]
  405241:	add    rax,rcx
  405244:	mov    QWORD PTR [rbx+0x18],rax
  405248:	sub    esi,ecx
  40524a:	cmp    esi,0xfffffffc
  40524d:	mov    edi,0xfffffffc
  405252:	cmovb  edi,esi
  405255:	mov    DWORD PTR [rbx+0x24],edi
  405258:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  40525f:	mov    r15d,DWORD PTR [rbx+0x20]
  405263:	add    r14d,r15d
  405266:	mov    DWORD PTR [rbx+0x20],r14d
  40526a:	cmp    r14d,edi
  40526d:	jb     4052be <flatcc_builder_start_struct@@Base+0xae>
  40526f:	inc    r14d
  405272:	lea    rsi,[rbx+0x68]
  405276:	mov    rdi,QWORD PTR [rbx+0x40]
  40527a:	add    r14,rcx
  40527d:	mov    rdx,r14
  405280:	mov    ecx,0x1
  405285:	mov    r8d,0x1
  40528b:	call   QWORD PTR [rbx+0x50]
  40528e:	test   eax,eax
  405290:	jne    405226 <flatcc_builder_start_struct@@Base+0x16>
  405292:	mov    ecx,DWORD PTR [rbx+0x28]
  405295:	mov    rax,rcx
  405298:	add    rax,QWORD PTR [rbx+0x68]
  40529c:	mov    QWORD PTR [rbx+0x18],rax
  4052a0:	mov    edx,DWORD PTR [rbx+0x70]
  4052a3:	sub    edx,ecx
  4052a5:	cmp    edx,0xfffffffc
  4052a8:	mov    ecx,0xfffffffc
  4052ad:	cmovb  ecx,edx
  4052b0:	mov    DWORD PTR [rbx+0x24],ecx
  4052b3:	mov    rcx,QWORD PTR [rbx+0x30]
  4052b7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4052be:	add    rax,r15
  4052c1:	pop    rbx
  4052c2:	pop    r14
  4052c4:	pop    r15
  4052c6:	ret    
  4052c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004052d0 <flatcc_builder_struct_edit@@Base>:
  4052d0:	mov    rax,QWORD PTR [rdi+0x18]
  4052d4:	ret    
  4052d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4052df:	nop

00000000004052e0 <flatcc_builder_end_struct@@Base>:
  4052e0:	push   rbp
  4052e1:	push   rbx
  4052e2:	push   rax
  4052e3:	mov    rax,QWORD PTR [rdi+0x30]
  4052e7:	cmp    WORD PTR [rax+0xe],0x2
  4052ec:	jne    40537f <flatcc_builder_end_struct@@Base+0x9f>
  4052f2:	mov    rbx,rdi
  4052f5:	mov    rsi,QWORD PTR [rdi+0x18]
  4052f9:	mov    edx,DWORD PTR [rdi+0x20]
  4052fc:	movzx  ecx,WORD PTR [rdi+0xea]
  405303:	call   404d80 <flatcc_builder_create_struct@@Base>
  405308:	mov    ebp,eax
  40530a:	test   eax,eax
  40530c:	je     405376 <flatcc_builder_end_struct@@Base+0x96>
  40530e:	mov    rdi,QWORD PTR [rbx+0x18]
  405312:	mov    edx,DWORD PTR [rbx+0x20]
  405315:	xor    esi,esi
  405317:	call   403070 <memset@plt>
  40531c:	mov    rax,QWORD PTR [rbx+0x30]
  405320:	mov    ecx,DWORD PTR [rax+0x8]
  405323:	mov    DWORD PTR [rbx+0x20],ecx
  405326:	mov    ecx,DWORD PTR [rax]
  405328:	mov    DWORD PTR [rbx+0x28],ecx
  40532b:	mov    edx,DWORD PTR [rax+0x4]
  40532e:	mov    rsi,rcx
  405331:	add    rsi,QWORD PTR [rbx+0x68]
  405335:	mov    QWORD PTR [rbx+0x18],rsi
  405339:	mov    esi,DWORD PTR [rbx+0x70]
  40533c:	sub    esi,ecx
  40533e:	cmp    esi,edx
  405340:	cmova  esi,edx
  405343:	mov    DWORD PTR [rbx+0x24],esi
  405346:	movzx  ecx,WORD PTR [rbx+0xea]
  40534d:	cmp    WORD PTR [rbx+0xe8],cx
  405354:	jae    40535d <flatcc_builder_end_struct@@Base+0x7d>
  405356:	mov    WORD PTR [rbx+0xe8],cx
  40535d:	movzx  ecx,WORD PTR [rax+0xc]
  405361:	mov    WORD PTR [rbx+0xea],cx
  405368:	add    rax,0xffffffffffffffdc
  40536c:	mov    QWORD PTR [rbx+0x30],rax
  405370:	dec    DWORD PTR [rbx+0x104]
  405376:	mov    eax,ebp
  405378:	add    rsp,0x8
  40537c:	pop    rbx
  40537d:	pop    rbp
  40537e:	ret    
  40537f:	lea    rdi,[rip+0x562a]        # 40a9b0 <flatcc_builder_padding_base@@Base+0x560>
  405386:	lea    rsi,[rip+0x5355]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40538d:	lea    rcx,[rip+0x5648]        # 40a9dc <flatcc_builder_padding_base@@Base+0x58c>
  405394:	mov    edx,0x368
  405399:	call   403060 <__assert_fail@plt>
  40539e:	xchg   ax,ax

00000000004053a0 <flatcc_builder_extend_vector@@Base>:
  4053a0:	push   r14
  4053a2:	push   rbx
  4053a3:	push   rax
  4053a4:	mov    rax,QWORD PTR [rdi+0x30]
  4053a8:	mov    ecx,DWORD PTR [rax+0x14]
  4053ab:	add    ecx,esi
  4053ad:	jb     40543f <flatcc_builder_extend_vector@@Base+0x9f>
  4053b3:	cmp    ecx,DWORD PTR [rax+0x18]
  4053b6:	ja     40543f <flatcc_builder_extend_vector@@Base+0x9f>
  4053bc:	mov    rbx,rdi
  4053bf:	mov    DWORD PTR [rax+0x14],ecx
  4053c2:	mov    rax,QWORD PTR [rdi+0x30]
  4053c6:	imul   esi,DWORD PTR [rax+0x10]
  4053ca:	mov    r14d,DWORD PTR [rdi+0x20]
  4053ce:	add    esi,r14d
  4053d1:	mov    DWORD PTR [rdi+0x20],esi
  4053d4:	cmp    esi,DWORD PTR [rdi+0x24]
  4053d7:	jae    4053df <flatcc_builder_extend_vector@@Base+0x3f>
  4053d9:	mov    rax,QWORD PTR [rbx+0x18]
  4053dd:	jmp    405434 <flatcc_builder_extend_vector@@Base+0x94>
  4053df:	inc    esi
  4053e1:	lea    rax,[rbx+0x68]
  4053e5:	mov    rdi,QWORD PTR [rbx+0x40]
  4053e9:	mov    edx,DWORD PTR [rbx+0x28]
  4053ec:	add    rdx,rsi
  4053ef:	mov    rsi,rax
  4053f2:	mov    ecx,0x1
  4053f7:	mov    r8d,0x1
  4053fd:	call   QWORD PTR [rbx+0x50]
  405400:	test   eax,eax
  405402:	je     405408 <flatcc_builder_extend_vector@@Base+0x68>
  405404:	xor    eax,eax
  405406:	jmp    405437 <flatcc_builder_extend_vector@@Base+0x97>
  405408:	mov    ecx,DWORD PTR [rbx+0x28]
  40540b:	mov    rax,rcx
  40540e:	add    rax,QWORD PTR [rbx+0x68]
  405412:	mov    QWORD PTR [rbx+0x18],rax
  405416:	mov    edx,DWORD PTR [rbx+0x70]
  405419:	sub    edx,ecx
  40541b:	cmp    edx,0xfffffffc
  40541e:	mov    ecx,0xfffffffc
  405423:	cmovb  ecx,edx
  405426:	mov    DWORD PTR [rbx+0x24],ecx
  405429:	mov    rcx,QWORD PTR [rbx+0x30]
  40542d:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405434:	add    rax,r14
  405437:	add    rsp,0x8
  40543b:	pop    rbx
  40543c:	pop    r14
  40543e:	ret    
  40543f:	lea    rdi,[rip+0x6365]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405446:	lea    rsi,[rip+0x5295]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40544d:	lea    rcx,[rip+0x6372]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405454:	mov    edx,0x37c
  405459:	call   403060 <__assert_fail@plt>
  40545e:	xchg   ax,ax

0000000000405460 <flatcc_builder_vector_push@@Base>:
  405460:	push   r15
  405462:	push   r14
  405464:	push   r13
  405466:	push   r12
  405468:	push   rbx
  405469:	mov    rax,QWORD PTR [rdi+0x30]
  40546d:	cmp    WORD PTR [rax+0xe],0x4
  405472:	jne    405525 <flatcc_builder_vector_push@@Base+0xc5>
  405478:	mov    ecx,DWORD PTR [rax+0x14]
  40547b:	cmp    ecx,DWORD PTR [rax+0x18]
  40547e:	ja     405544 <flatcc_builder_vector_push@@Base+0xe4>
  405484:	mov    r14,rsi
  405487:	mov    rbx,rdi
  40548a:	inc    ecx
  40548c:	mov    DWORD PTR [rax+0x14],ecx
  40548f:	mov    rax,QWORD PTR [rdi+0x30]
  405493:	mov    r15d,DWORD PTR [rax+0x10]
  405497:	mov    r13d,DWORD PTR [rdi+0x20]
  40549b:	lea    eax,[r15+r13*1]
  40549f:	mov    DWORD PTR [rdi+0x20],eax
  4054a2:	cmp    eax,DWORD PTR [rdi+0x24]
  4054a5:	jae    4054b2 <flatcc_builder_vector_push@@Base+0x52>
  4054a7:	mov    r12,QWORD PTR [rbx+0x18]
  4054ab:	add    r12,r13
  4054ae:	jne    40550a <flatcc_builder_vector_push@@Base+0xaa>
  4054b0:	jmp    4054d4 <flatcc_builder_vector_push@@Base+0x74>
  4054b2:	inc    eax
  4054b4:	lea    rsi,[rbx+0x68]
  4054b8:	mov    rdi,QWORD PTR [rbx+0x40]
  4054bc:	mov    edx,DWORD PTR [rbx+0x28]
  4054bf:	add    rdx,rax
  4054c2:	mov    ecx,0x1
  4054c7:	mov    r8d,0x1
  4054cd:	call   QWORD PTR [rbx+0x50]
  4054d0:	test   eax,eax
  4054d2:	je     4054d9 <flatcc_builder_vector_push@@Base+0x79>
  4054d4:	xor    r12d,r12d
  4054d7:	jmp    405518 <flatcc_builder_vector_push@@Base+0xb8>
  4054d9:	mov    eax,DWORD PTR [rbx+0x28]
  4054dc:	mov    r12,rax
  4054df:	add    r12,QWORD PTR [rbx+0x68]
  4054e3:	mov    QWORD PTR [rbx+0x18],r12
  4054e7:	mov    ecx,DWORD PTR [rbx+0x70]
  4054ea:	sub    ecx,eax
  4054ec:	cmp    ecx,0xfffffffc
  4054ef:	mov    eax,0xfffffffc
  4054f4:	cmovb  eax,ecx
  4054f7:	mov    DWORD PTR [rbx+0x24],eax
  4054fa:	mov    rax,QWORD PTR [rbx+0x30]
  4054fe:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405505:	add    r12,r13
  405508:	je     4054d4 <flatcc_builder_vector_push@@Base+0x74>
  40550a:	mov    rdi,r12
  40550d:	mov    rsi,r14
  405510:	mov    rdx,r15
  405513:	call   4030a0 <memcpy@plt>
  405518:	mov    rax,r12
  40551b:	pop    rbx
  40551c:	pop    r12
  40551e:	pop    r13
  405520:	pop    r14
  405522:	pop    r15
  405524:	ret    
  405525:	lea    rdi,[rip+0x54f3]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  40552c:	lea    rsi,[rip+0x51af]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405533:	lea    rcx,[rip+0x5511]        # 40aa4b <flatcc_builder_padding_base@@Base+0x5fb>
  40553a:	mov    edx,0x38b
  40553f:	call   403060 <__assert_fail@plt>
  405544:	lea    rdi,[rip+0x5543]        # 40aa8e <flatcc_builder_padding_base@@Base+0x63e>
  40554b:	lea    rsi,[rip+0x5190]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405552:	lea    rcx,[rip+0x54f2]        # 40aa4b <flatcc_builder_padding_base@@Base+0x5fb>
  405559:	mov    edx,0x38c
  40555e:	call   403060 <__assert_fail@plt>
  405563:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40556d:	nop    DWORD PTR [rax]

0000000000405570 <flatcc_builder_append_vector@@Base>:
  405570:	push   r15
  405572:	push   r14
  405574:	push   r13
  405576:	push   r12
  405578:	push   rbx
  405579:	mov    rax,QWORD PTR [rdi+0x30]
  40557d:	cmp    WORD PTR [rax+0xe],0x4
  405582:	jne    40565f <flatcc_builder_append_vector@@Base+0xef>
  405588:	mov    r15,rdx
  40558b:	mov    ecx,DWORD PTR [rax+0x14]
  40558e:	add    ecx,r15d
  405591:	jb     405640 <flatcc_builder_append_vector@@Base+0xd0>
  405597:	cmp    ecx,DWORD PTR [rax+0x18]
  40559a:	ja     405640 <flatcc_builder_append_vector@@Base+0xd0>
  4055a0:	mov    r14,rsi
  4055a3:	mov    rbx,rdi
  4055a6:	mov    DWORD PTR [rax+0x14],ecx
  4055a9:	mov    rax,QWORD PTR [rdi+0x30]
  4055ad:	imul   r15d,DWORD PTR [rax+0x10]
  4055b2:	mov    r13d,DWORD PTR [rdi+0x20]
  4055b6:	lea    eax,[r15+r13*1]
  4055ba:	mov    DWORD PTR [rdi+0x20],eax
  4055bd:	cmp    eax,DWORD PTR [rdi+0x24]
  4055c0:	jae    4055cd <flatcc_builder_append_vector@@Base+0x5d>
  4055c2:	mov    r12,QWORD PTR [rbx+0x18]
  4055c6:	add    r12,r13
  4055c9:	jne    405625 <flatcc_builder_append_vector@@Base+0xb5>
  4055cb:	jmp    4055ef <flatcc_builder_append_vector@@Base+0x7f>
  4055cd:	inc    eax
  4055cf:	lea    rsi,[rbx+0x68]
  4055d3:	mov    rdi,QWORD PTR [rbx+0x40]
  4055d7:	mov    edx,DWORD PTR [rbx+0x28]
  4055da:	add    rdx,rax
  4055dd:	mov    ecx,0x1
  4055e2:	mov    r8d,0x1
  4055e8:	call   QWORD PTR [rbx+0x50]
  4055eb:	test   eax,eax
  4055ed:	je     4055f4 <flatcc_builder_append_vector@@Base+0x84>
  4055ef:	xor    r12d,r12d
  4055f2:	jmp    405633 <flatcc_builder_append_vector@@Base+0xc3>
  4055f4:	mov    eax,DWORD PTR [rbx+0x28]
  4055f7:	mov    r12,rax
  4055fa:	add    r12,QWORD PTR [rbx+0x68]
  4055fe:	mov    QWORD PTR [rbx+0x18],r12
  405602:	mov    ecx,DWORD PTR [rbx+0x70]
  405605:	sub    ecx,eax
  405607:	cmp    ecx,0xfffffffc
  40560a:	mov    eax,0xfffffffc
  40560f:	cmovb  eax,ecx
  405612:	mov    DWORD PTR [rbx+0x24],eax
  405615:	mov    rax,QWORD PTR [rbx+0x30]
  405619:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405620:	add    r12,r13
  405623:	je     4055ef <flatcc_builder_append_vector@@Base+0x7f>
  405625:	mov    edx,r15d
  405628:	mov    rdi,r12
  40562b:	mov    rsi,r14
  40562e:	call   4030a0 <memcpy@plt>
  405633:	mov    rax,r12
  405636:	pop    rbx
  405637:	pop    r12
  405639:	pop    r13
  40563b:	pop    r14
  40563d:	pop    r15
  40563f:	ret    
  405640:	lea    rdi,[rip+0x6164]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405647:	lea    rsi,[rip+0x5094]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40564e:	lea    rcx,[rip+0x6171]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405655:	mov    edx,0x37c
  40565a:	call   403060 <__assert_fail@plt>
  40565f:	lea    rdi,[rip+0x53b9]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  405666:	lea    rsi,[rip+0x5075]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40566d:	lea    rcx,[rip+0x5457]        # 40aacb <flatcc_builder_padding_base@@Base+0x67b>
  405674:	mov    edx,0x393
  405679:	call   403060 <__assert_fail@plt>
  40567e:	xchg   ax,ax

0000000000405680 <flatcc_builder_extend_offset_vector@@Base>:
  405680:	push   r14
  405682:	push   rbx
  405683:	push   rax
  405684:	mov    rax,QWORD PTR [rdi+0x30]
  405688:	mov    ecx,DWORD PTR [rax+0x14]
  40568b:	add    ecx,esi
  40568d:	jb     405714 <flatcc_builder_extend_offset_vector@@Base+0x94>
  405693:	cmp    ecx,0x40000000
  405699:	jae    405714 <flatcc_builder_extend_offset_vector@@Base+0x94>
  40569b:	mov    rbx,rdi
  40569e:	mov    DWORD PTR [rax+0x14],ecx
  4056a1:	mov    r14d,DWORD PTR [rdi+0x20]
  4056a5:	lea    eax,[r14+rsi*4]
  4056a9:	mov    DWORD PTR [rdi+0x20],eax
  4056ac:	cmp    eax,DWORD PTR [rdi+0x24]
  4056af:	jae    4056b7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  4056b1:	mov    rax,QWORD PTR [rbx+0x18]
  4056b5:	jmp    405709 <flatcc_builder_extend_offset_vector@@Base+0x89>
  4056b7:	inc    eax
  4056b9:	lea    rsi,[rbx+0x68]
  4056bd:	mov    rdi,QWORD PTR [rbx+0x40]
  4056c1:	mov    edx,DWORD PTR [rbx+0x28]
  4056c4:	add    rdx,rax
  4056c7:	mov    ecx,0x1
  4056cc:	mov    r8d,0x1
  4056d2:	call   QWORD PTR [rbx+0x50]
  4056d5:	test   eax,eax
  4056d7:	je     4056dd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4056d9:	xor    eax,eax
  4056db:	jmp    40570c <flatcc_builder_extend_offset_vector@@Base+0x8c>
  4056dd:	mov    ecx,DWORD PTR [rbx+0x28]
  4056e0:	mov    rax,rcx
  4056e3:	add    rax,QWORD PTR [rbx+0x68]
  4056e7:	mov    QWORD PTR [rbx+0x18],rax
  4056eb:	mov    edx,DWORD PTR [rbx+0x70]
  4056ee:	sub    edx,ecx
  4056f0:	cmp    edx,0xfffffffc
  4056f3:	mov    ecx,0xfffffffc
  4056f8:	cmovb  ecx,edx
  4056fb:	mov    DWORD PTR [rbx+0x24],ecx
  4056fe:	mov    rcx,QWORD PTR [rbx+0x30]
  405702:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405709:	add    rax,r14
  40570c:	add    rsp,0x8
  405710:	pop    rbx
  405711:	pop    r14
  405713:	ret    
  405714:	lea    rdi,[rip+0x6090]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  40571b:	lea    rsi,[rip+0x4fc0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405722:	lea    rcx,[rip+0x609d]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405729:	mov    edx,0x37c
  40572e:	call   403060 <__assert_fail@plt>
  405733:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40573d:	nop    DWORD PTR [rax]

0000000000405740 <flatcc_builder_offset_vector_push@@Base>:
  405740:	push   rbp
  405741:	push   r14
  405743:	push   rbx
  405744:	mov    rax,QWORD PTR [rdi+0x30]
  405748:	cmp    WORD PTR [rax+0xe],0x5
  40574d:	jne    4057e2 <flatcc_builder_offset_vector_push@@Base+0xa2>
  405753:	mov    ecx,DWORD PTR [rax+0x14]
  405756:	cmp    ecx,0x3fffffff
  40575c:	je     4057a5 <flatcc_builder_offset_vector_push@@Base+0x65>
  40575e:	mov    r14d,esi
  405761:	mov    rbx,rdi
  405764:	inc    ecx
  405766:	mov    DWORD PTR [rax+0x14],ecx
  405769:	mov    ebp,DWORD PTR [rdi+0x20]
  40576c:	lea    eax,[rbp+0x4]
  40576f:	mov    DWORD PTR [rdi+0x20],eax
  405772:	cmp    eax,DWORD PTR [rdi+0x24]
  405775:	jae    405782 <flatcc_builder_offset_vector_push@@Base+0x42>
  405777:	mov    rax,QWORD PTR [rbx+0x18]
  40577b:	add    rax,rbp
  40577e:	jne    4057da <flatcc_builder_offset_vector_push@@Base+0x9a>
  405780:	jmp    4057a5 <flatcc_builder_offset_vector_push@@Base+0x65>
  405782:	lea    eax,[rbp+0x5]
  405785:	lea    rsi,[rbx+0x68]
  405789:	mov    rdi,QWORD PTR [rbx+0x40]
  40578d:	mov    edx,DWORD PTR [rbx+0x28]
  405790:	add    rdx,rax
  405793:	mov    ecx,0x1
  405798:	mov    r8d,0x1
  40579e:	call   QWORD PTR [rbx+0x50]
  4057a1:	test   eax,eax
  4057a3:	je     4057a9 <flatcc_builder_offset_vector_push@@Base+0x69>
  4057a5:	xor    eax,eax
  4057a7:	jmp    4057dd <flatcc_builder_offset_vector_push@@Base+0x9d>
  4057a9:	mov    ecx,DWORD PTR [rbx+0x28]
  4057ac:	mov    rax,rcx
  4057af:	add    rax,QWORD PTR [rbx+0x68]
  4057b3:	mov    QWORD PTR [rbx+0x18],rax
  4057b7:	mov    edx,DWORD PTR [rbx+0x70]
  4057ba:	sub    edx,ecx
  4057bc:	cmp    edx,0xfffffffc
  4057bf:	mov    ecx,0xfffffffc
  4057c4:	cmovb  ecx,edx
  4057c7:	mov    DWORD PTR [rbx+0x24],ecx
  4057ca:	mov    rcx,QWORD PTR [rbx+0x30]
  4057ce:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4057d5:	add    rax,rbp
  4057d8:	je     4057a5 <flatcc_builder_offset_vector_push@@Base+0x65>
  4057da:	mov    DWORD PTR [rax],r14d
  4057dd:	pop    rbx
  4057de:	pop    r14
  4057e0:	pop    rbp
  4057e1:	ret    
  4057e2:	lea    rdi,[rip+0x532f]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  4057e9:	lea    rsi,[rip+0x4ef2]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4057f0:	lea    rcx,[rip+0x5354]        # 40ab4b <flatcc_builder_padding_base@@Base+0x6fb>
  4057f7:	mov    edx,0x3a6
  4057fc:	call   403060 <__assert_fail@plt>
  405801:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40580b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405810 <flatcc_builder_append_offset_vector@@Base>:
  405810:	push   r15
  405812:	push   r14
  405814:	push   r13
  405816:	push   r12
  405818:	push   rbx
  405819:	mov    rax,QWORD PTR [rdi+0x30]
  40581d:	cmp    WORD PTR [rax+0xe],0x5
  405822:	jne    4058fe <flatcc_builder_append_offset_vector@@Base+0xee>
  405828:	mov    r15,rdx
  40582b:	mov    ecx,DWORD PTR [rax+0x14]
  40582e:	add    ecx,r15d
  405831:	jb     4058df <flatcc_builder_append_offset_vector@@Base+0xcf>
  405837:	cmp    ecx,0x40000000
  40583d:	jae    4058df <flatcc_builder_append_offset_vector@@Base+0xcf>
  405843:	mov    r14,rsi
  405846:	mov    rbx,rdi
  405849:	mov    DWORD PTR [rax+0x14],ecx
  40584c:	mov    r13d,DWORD PTR [rdi+0x20]
  405850:	lea    eax,[r13+r15*4+0x0]
  405855:	mov    DWORD PTR [rdi+0x20],eax
  405858:	cmp    eax,DWORD PTR [rdi+0x24]
  40585b:	jae    405868 <flatcc_builder_append_offset_vector@@Base+0x58>
  40585d:	mov    r12,QWORD PTR [rbx+0x18]
  405861:	add    r12,r13
  405864:	jne    4058c0 <flatcc_builder_append_offset_vector@@Base+0xb0>
  405866:	jmp    40588a <flatcc_builder_append_offset_vector@@Base+0x7a>
  405868:	inc    eax
  40586a:	lea    rsi,[rbx+0x68]
  40586e:	mov    rdi,QWORD PTR [rbx+0x40]
  405872:	mov    edx,DWORD PTR [rbx+0x28]
  405875:	add    rdx,rax
  405878:	mov    ecx,0x1
  40587d:	mov    r8d,0x1
  405883:	call   QWORD PTR [rbx+0x50]
  405886:	test   eax,eax
  405888:	je     40588f <flatcc_builder_append_offset_vector@@Base+0x7f>
  40588a:	xor    r12d,r12d
  40588d:	jmp    4058d2 <flatcc_builder_append_offset_vector@@Base+0xc2>
  40588f:	mov    eax,DWORD PTR [rbx+0x28]
  405892:	mov    r12,rax
  405895:	add    r12,QWORD PTR [rbx+0x68]
  405899:	mov    QWORD PTR [rbx+0x18],r12
  40589d:	mov    ecx,DWORD PTR [rbx+0x70]
  4058a0:	sub    ecx,eax
  4058a2:	cmp    ecx,0xfffffffc
  4058a5:	mov    eax,0xfffffffc
  4058aa:	cmovb  eax,ecx
  4058ad:	mov    DWORD PTR [rbx+0x24],eax
  4058b0:	mov    rax,QWORD PTR [rbx+0x30]
  4058b4:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4058bb:	add    r12,r13
  4058be:	je     40588a <flatcc_builder_append_offset_vector@@Base+0x7a>
  4058c0:	shl    r15d,0x2
  4058c4:	mov    edx,r15d
  4058c7:	mov    rdi,r12
  4058ca:	mov    rsi,r14
  4058cd:	call   4030a0 <memcpy@plt>
  4058d2:	mov    rax,r12
  4058d5:	pop    rbx
  4058d6:	pop    r12
  4058d8:	pop    r13
  4058da:	pop    r14
  4058dc:	pop    r15
  4058de:	ret    
  4058df:	lea    rdi,[rip+0x5ec5]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  4058e6:	lea    rsi,[rip+0x4df5]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4058ed:	lea    rcx,[rip+0x5ed2]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  4058f4:	mov    edx,0x37c
  4058f9:	call   403060 <__assert_fail@plt>
  4058fe:	lea    rdi,[rip+0x5213]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  405905:	lea    rsi,[rip+0x4dd6]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40590c:	lea    rcx,[rip+0x529a]        # 40abad <flatcc_builder_padding_base@@Base+0x75d>
  405913:	mov    edx,0x3b4
  405918:	call   403060 <__assert_fail@plt>
  40591d:	nop    DWORD PTR [rax]

0000000000405920 <flatcc_builder_extend_string@@Base>:
  405920:	push   r14
  405922:	push   rbx
  405923:	push   rax
  405924:	mov    rax,QWORD PTR [rdi+0x30]
  405928:	cmp    WORD PTR [rax+0xe],0x6
  40592d:	jne    4059b9 <flatcc_builder_extend_string@@Base+0x99>
  405933:	mov    ecx,DWORD PTR [rax+0x14]
  405936:	add    ecx,esi
  405938:	jb     4059d8 <flatcc_builder_extend_string@@Base+0xb8>
  40593e:	mov    rbx,rdi
  405941:	mov    DWORD PTR [rax+0x14],ecx
  405944:	mov    r14d,DWORD PTR [rdi+0x20]
  405948:	add    esi,r14d
  40594b:	mov    DWORD PTR [rdi+0x20],esi
  40594e:	cmp    esi,DWORD PTR [rdi+0x24]
  405951:	jae    405959 <flatcc_builder_extend_string@@Base+0x39>
  405953:	mov    rax,QWORD PTR [rbx+0x18]
  405957:	jmp    4059ae <flatcc_builder_extend_string@@Base+0x8e>
  405959:	inc    esi
  40595b:	lea    rax,[rbx+0x68]
  40595f:	mov    rdi,QWORD PTR [rbx+0x40]
  405963:	mov    edx,DWORD PTR [rbx+0x28]
  405966:	add    rdx,rsi
  405969:	mov    rsi,rax
  40596c:	mov    ecx,0x1
  405971:	mov    r8d,0x1
  405977:	call   QWORD PTR [rbx+0x50]
  40597a:	test   eax,eax
  40597c:	je     405982 <flatcc_builder_extend_string@@Base+0x62>
  40597e:	xor    eax,eax
  405980:	jmp    4059b1 <flatcc_builder_extend_string@@Base+0x91>
  405982:	mov    ecx,DWORD PTR [rbx+0x28]
  405985:	mov    rax,rcx
  405988:	add    rax,QWORD PTR [rbx+0x68]
  40598c:	mov    QWORD PTR [rbx+0x18],rax
  405990:	mov    edx,DWORD PTR [rbx+0x70]
  405993:	sub    edx,ecx
  405995:	cmp    edx,0xfffffffc
  405998:	mov    ecx,0xfffffffc
  40599d:	cmovb  ecx,edx
  4059a0:	mov    DWORD PTR [rbx+0x24],ecx
  4059a3:	mov    rcx,QWORD PTR [rbx+0x30]
  4059a7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4059ae:	add    rax,r14
  4059b1:	add    rsp,0x8
  4059b5:	pop    rbx
  4059b6:	pop    r14
  4059b8:	ret    
  4059b9:	lea    rdi,[rip+0x5261]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  4059c0:	lea    rsi,[rip+0x4d1b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4059c7:	lea    rcx,[rip+0x527f]        # 40ac4d <flatcc_builder_padding_base@@Base+0x7fd>
  4059ce:	mov    edx,0x3bd
  4059d3:	call   403060 <__assert_fail@plt>
  4059d8:	lea    rdi,[rip+0x5dcc]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  4059df:	lea    rsi,[rip+0x4cfc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4059e6:	lea    rcx,[rip+0x5dd9]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  4059ed:	mov    edx,0x37c
  4059f2:	call   403060 <__assert_fail@plt>
  4059f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a00 <flatcc_builder_append_string@@Base>:
  405a00:	push   r15
  405a02:	push   r14
  405a04:	push   r13
  405a06:	push   r12
  405a08:	push   rbx
  405a09:	mov    rax,QWORD PTR [rdi+0x30]
  405a0d:	cmp    WORD PTR [rax+0xe],0x6
  405a12:	jne    405abe <flatcc_builder_append_string@@Base+0xbe>
  405a18:	mov    r15,rdx
  405a1b:	mov    ecx,DWORD PTR [rax+0x14]
  405a1e:	add    ecx,r15d
  405a21:	jb     405add <flatcc_builder_append_string@@Base+0xdd>
  405a27:	mov    r14,rsi
  405a2a:	mov    rbx,rdi
  405a2d:	mov    DWORD PTR [rax+0x14],ecx
  405a30:	mov    r13d,DWORD PTR [rdi+0x20]
  405a34:	lea    eax,[r15+r13*1]
  405a38:	mov    DWORD PTR [rdi+0x20],eax
  405a3b:	cmp    eax,DWORD PTR [rdi+0x24]
  405a3e:	jae    405a4b <flatcc_builder_append_string@@Base+0x4b>
  405a40:	mov    r12,QWORD PTR [rbx+0x18]
  405a44:	add    r12,r13
  405a47:	jne    405aa3 <flatcc_builder_append_string@@Base+0xa3>
  405a49:	jmp    405a6d <flatcc_builder_append_string@@Base+0x6d>
  405a4b:	inc    eax
  405a4d:	lea    rsi,[rbx+0x68]
  405a51:	mov    rdi,QWORD PTR [rbx+0x40]
  405a55:	mov    edx,DWORD PTR [rbx+0x28]
  405a58:	add    rdx,rax
  405a5b:	mov    ecx,0x1
  405a60:	mov    r8d,0x1
  405a66:	call   QWORD PTR [rbx+0x50]
  405a69:	test   eax,eax
  405a6b:	je     405a72 <flatcc_builder_append_string@@Base+0x72>
  405a6d:	xor    r12d,r12d
  405a70:	jmp    405ab1 <flatcc_builder_append_string@@Base+0xb1>
  405a72:	mov    eax,DWORD PTR [rbx+0x28]
  405a75:	mov    r12,rax
  405a78:	add    r12,QWORD PTR [rbx+0x68]
  405a7c:	mov    QWORD PTR [rbx+0x18],r12
  405a80:	mov    ecx,DWORD PTR [rbx+0x70]
  405a83:	sub    ecx,eax
  405a85:	cmp    ecx,0xfffffffc
  405a88:	mov    eax,0xfffffffc
  405a8d:	cmovb  eax,ecx
  405a90:	mov    DWORD PTR [rbx+0x24],eax
  405a93:	mov    rax,QWORD PTR [rbx+0x30]
  405a97:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a9e:	add    r12,r13
  405aa1:	je     405a6d <flatcc_builder_append_string@@Base+0x6d>
  405aa3:	mov    edx,r15d
  405aa6:	mov    rdi,r12
  405aa9:	mov    rsi,r14
  405aac:	call   4030a0 <memcpy@plt>
  405ab1:	mov    rax,r12
  405ab4:	pop    rbx
  405ab5:	pop    r12
  405ab7:	pop    r13
  405ab9:	pop    r14
  405abb:	pop    r15
  405abd:	ret    
  405abe:	lea    rdi,[rip+0x515c]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  405ac5:	lea    rsi,[rip+0x4c16]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405acc:	lea    rcx,[rip+0x51b9]        # 40ac8c <flatcc_builder_padding_base@@Base+0x83c>
  405ad3:	mov    edx,0x3c6
  405ad8:	call   403060 <__assert_fail@plt>
  405add:	lea    rdi,[rip+0x5cc7]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405ae4:	lea    rsi,[rip+0x4bf7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405aeb:	lea    rcx,[rip+0x5cd4]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405af2:	mov    edx,0x37c
  405af7:	call   403060 <__assert_fail@plt>
  405afc:	nop    DWORD PTR [rax+0x0]

0000000000405b00 <flatcc_builder_append_string_str@@Base>:
  405b00:	push   r14
  405b02:	push   rbx
  405b03:	push   rax
  405b04:	mov    rbx,rsi
  405b07:	mov    r14,rdi
  405b0a:	mov    rdi,rsi
  405b0d:	call   403050 <strlen@plt>
  405b12:	mov    rdi,r14
  405b15:	mov    rsi,rbx
  405b18:	mov    rdx,rax
  405b1b:	add    rsp,0x8
  405b1f:	pop    rbx
  405b20:	pop    r14
  405b22:	jmp    405a00 <flatcc_builder_append_string@@Base>
  405b27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b30 <flatcc_builder_append_string_strn@@Base>:
  405b30:	push   r15
  405b32:	push   r14
  405b34:	push   rbx
  405b35:	mov    rbx,rdx
  405b38:	mov    r14,rsi
  405b3b:	mov    r15,rdi
  405b3e:	mov    rdi,rsi
  405b41:	xor    esi,esi
  405b43:	call   403080 <memchr@plt>
  405b48:	mov    rcx,rax
  405b4b:	sub    rcx,r14
  405b4e:	test   rax,rax
  405b51:	cmovne rbx,rcx
  405b55:	mov    rdi,r15
  405b58:	mov    rsi,r14
  405b5b:	mov    rdx,rbx
  405b5e:	pop    rbx
  405b5f:	pop    r14
  405b61:	pop    r15
  405b63:	jmp    405a00 <flatcc_builder_append_string@@Base>
  405b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405b70 <flatcc_builder_truncate_vector@@Base>:
  405b70:	push   rax
  405b71:	mov    rax,QWORD PTR [rdi+0x30]
  405b75:	cmp    WORD PTR [rax+0xe],0x4
  405b7a:	jne    405bae <flatcc_builder_truncate_vector@@Base+0x3e>
  405b7c:	mov    rdx,rsi
  405b7f:	mov    ecx,DWORD PTR [rax+0x14]
  405b82:	cmp    rcx,rsi
  405b85:	jb     405bcd <flatcc_builder_truncate_vector@@Base+0x5d>
  405b87:	sub    ecx,edx
  405b89:	mov    DWORD PTR [rax+0x14],ecx
  405b8c:	mov    rax,QWORD PTR [rdi+0x30]
  405b90:	imul   edx,DWORD PTR [rax+0x10]
  405b94:	mov    eax,DWORD PTR [rdi+0x20]
  405b97:	sub    eax,edx
  405b99:	mov    DWORD PTR [rdi+0x20],eax
  405b9c:	add    rax,QWORD PTR [rdi+0x18]
  405ba0:	mov    rdi,rax
  405ba3:	xor    esi,esi
  405ba5:	call   403070 <memset@plt>
  405baa:	xor    eax,eax
  405bac:	pop    rcx
  405bad:	ret    
  405bae:	lea    rdi,[rip+0x4e6a]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  405bb5:	lea    rsi,[rip+0x4b26]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405bbc:	lea    rcx,[rip+0x5116]        # 40acd9 <flatcc_builder_padding_base@@Base+0x889>
  405bc3:	mov    edx,0x3d9
  405bc8:	call   403060 <__assert_fail@plt>
  405bcd:	lea    rdi,[rip+0x5144]        # 40ad18 <flatcc_builder_padding_base@@Base+0x8c8>
  405bd4:	lea    rsi,[rip+0x4b07]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405bdb:	lea    rcx,[rip+0x50f7]        # 40acd9 <flatcc_builder_padding_base@@Base+0x889>
  405be2:	mov    edx,0x3da
  405be7:	call   403060 <__assert_fail@plt>
  405bec:	nop    DWORD PTR [rax+0x0]

0000000000405bf0 <flatcc_builder_truncate_offset_vector@@Base>:
  405bf0:	push   rax
  405bf1:	mov    rax,QWORD PTR [rdi+0x30]
  405bf5:	cmp    WORD PTR [rax+0xe],0x5
  405bfa:	jne    405c2b <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  405bfc:	mov    rdx,rsi
  405bff:	mov    ecx,DWORD PTR [rax+0x14]
  405c02:	sub    ecx,edx
  405c04:	jb     405c4a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  405c06:	mov    DWORD PTR [rax+0x14],ecx
  405c09:	mov    rax,QWORD PTR [rdi+0x30]
  405c0d:	imul   edx,DWORD PTR [rax+0x10]
  405c11:	mov    eax,DWORD PTR [rdi+0x20]
  405c14:	sub    eax,edx
  405c16:	mov    DWORD PTR [rdi+0x20],eax
  405c19:	add    rax,QWORD PTR [rdi+0x18]
  405c1d:	mov    rdi,rax
  405c20:	xor    esi,esi
  405c22:	call   403070 <memset@plt>
  405c27:	xor    eax,eax
  405c29:	pop    rcx
  405c2a:	ret    
  405c2b:	lea    rdi,[rip+0x4ee6]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  405c32:	lea    rsi,[rip+0x4aa9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405c39:	lea    rcx,[rip+0x50fc]        # 40ad3c <flatcc_builder_padding_base@@Base+0x8ec>
  405c40:	mov    edx,0x3e2
  405c45:	call   403060 <__assert_fail@plt>
  405c4a:	lea    rdi,[rip+0x5131]        # 40ad82 <flatcc_builder_padding_base@@Base+0x932>
  405c51:	lea    rsi,[rip+0x4a8a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405c58:	lea    rcx,[rip+0x50dd]        # 40ad3c <flatcc_builder_padding_base@@Base+0x8ec>
  405c5f:	mov    edx,0x3e3
  405c64:	call   403060 <__assert_fail@plt>
  405c69:	nop    DWORD PTR [rax+0x0]

0000000000405c70 <flatcc_builder_truncate_string@@Base>:
  405c70:	push   rax
  405c71:	mov    rax,QWORD PTR [rdi+0x30]
  405c75:	cmp    WORD PTR [rax+0xe],0x6
  405c7a:	jne    405ca5 <flatcc_builder_truncate_string@@Base+0x35>
  405c7c:	mov    ecx,DWORD PTR [rax+0x14]
  405c7f:	cmp    rcx,rsi
  405c82:	jb     405cc4 <flatcc_builder_truncate_string@@Base+0x54>
  405c84:	sub    ecx,esi
  405c86:	mov    DWORD PTR [rax+0x14],ecx
  405c89:	mov    eax,DWORD PTR [rdi+0x20]
  405c8c:	sub    eax,esi
  405c8e:	mov    DWORD PTR [rdi+0x20],eax
  405c91:	add    rax,QWORD PTR [rdi+0x18]
  405c95:	mov    edx,esi
  405c97:	mov    rdi,rax
  405c9a:	xor    esi,esi
  405c9c:	call   403070 <memset@plt>
  405ca1:	xor    eax,eax
  405ca3:	pop    rcx
  405ca4:	ret    
  405ca5:	lea    rdi,[rip+0x4f75]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  405cac:	lea    rsi,[rip+0x4a2f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405cb3:	lea    rcx,[rip+0x5103]        # 40adbd <flatcc_builder_padding_base@@Base+0x96d>
  405cba:	mov    edx,0x3eb
  405cbf:	call   403060 <__assert_fail@plt>
  405cc4:	lea    rdi,[rip+0x5131]        # 40adfc <flatcc_builder_padding_base@@Base+0x9ac>
  405ccb:	lea    rsi,[rip+0x4a10]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405cd2:	lea    rcx,[rip+0x50e4]        # 40adbd <flatcc_builder_padding_base@@Base+0x96d>
  405cd9:	mov    edx,0x3ec
  405cde:	call   403060 <__assert_fail@plt>
  405ce3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405ced:	nop    DWORD PTR [rax]

0000000000405cf0 <flatcc_builder_start_vector@@Base>:
  405cf0:	push   r15
  405cf2:	push   r14
  405cf4:	push   rbx
  405cf5:	mov    r14,rcx
  405cf8:	mov    r15,rsi
  405cfb:	mov    rbx,rdi
  405cfe:	cmp    dx,0x4
  405d02:	mov    esi,0x4
  405d07:	cmova  esi,edx
  405d0a:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  405d0f:	mov    ecx,eax
  405d11:	mov    eax,0xffffffff
  405d16:	test   ecx,ecx
  405d18:	jne    405d66 <flatcc_builder_start_vector@@Base+0x76>
  405d1a:	mov    rax,QWORD PTR [rbx+0x30]
  405d1e:	mov    DWORD PTR [rax+0x10],r15d
  405d22:	mov    rax,QWORD PTR [rbx+0x30]
  405d26:	mov    DWORD PTR [rax+0x14],0x0
  405d2d:	mov    rax,QWORD PTR [rbx+0x30]
  405d31:	mov    DWORD PTR [rax+0x18],r14d
  405d35:	mov    rax,QWORD PTR [rbx+0x30]
  405d39:	mov    WORD PTR [rax+0xe],0x4
  405d3f:	mov    ecx,DWORD PTR [rbx+0x28]
  405d42:	mov    edx,DWORD PTR [rbx+0x70]
  405d45:	sub    edx,ecx
  405d47:	add    rcx,QWORD PTR [rbx+0x68]
  405d4b:	mov    QWORD PTR [rbx+0x18],rcx
  405d4f:	cmp    edx,0xfffffffc
  405d52:	mov    ecx,0xfffffffc
  405d57:	cmovb  ecx,edx
  405d5a:	mov    DWORD PTR [rbx+0x24],ecx
  405d5d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405d64:	xor    eax,eax
  405d66:	pop    rbx
  405d67:	pop    r14
  405d69:	pop    r15
  405d6b:	ret    
  405d6c:	nop    DWORD PTR [rax+0x0]

0000000000405d70 <flatcc_builder_start_offset_vector@@Base>:
  405d70:	push   rbx
  405d71:	mov    rbx,rdi
  405d74:	mov    esi,0x4
  405d79:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  405d7e:	mov    ecx,eax
  405d80:	mov    eax,0xffffffff
  405d85:	test   ecx,ecx
  405d87:	je     405d8b <flatcc_builder_start_offset_vector@@Base+0x1b>
  405d89:	pop    rbx
  405d8a:	ret    
  405d8b:	mov    rax,QWORD PTR [rbx+0x30]
  405d8f:	mov    DWORD PTR [rax+0x10],0x4
  405d96:	mov    rax,QWORD PTR [rbx+0x30]
  405d9a:	mov    DWORD PTR [rax+0x14],0x0
  405da1:	mov    rax,QWORD PTR [rbx+0x30]
  405da5:	mov    WORD PTR [rax+0xe],0x5
  405dab:	mov    ecx,DWORD PTR [rbx+0x28]
  405dae:	mov    edx,DWORD PTR [rbx+0x70]
  405db1:	sub    edx,ecx
  405db3:	add    rcx,QWORD PTR [rbx+0x68]
  405db7:	mov    QWORD PTR [rbx+0x18],rcx
  405dbb:	cmp    edx,0xfffffffc
  405dbe:	mov    ecx,0xfffffffc
  405dc3:	cmovb  ecx,edx
  405dc6:	mov    DWORD PTR [rbx+0x24],ecx
  405dc9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405dd0:	xor    eax,eax
  405dd2:	pop    rbx
  405dd3:	ret    
  405dd4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405dde:	xchg   ax,ax

0000000000405de0 <flatcc_builder_create_offset_vector@@Base>:
  405de0:	push   r15
  405de2:	push   r14
  405de4:	push   r12
  405de6:	push   rbx
  405de7:	push   rax
  405de8:	mov    r14,rdx
  405deb:	mov    r15,rsi
  405dee:	mov    rbx,rdi
  405df1:	mov    esi,0x4
  405df6:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  405dfb:	test   eax,eax
  405dfd:	je     405e0d <flatcc_builder_create_offset_vector@@Base+0x2d>
  405dff:	xor    eax,eax
  405e01:	add    rsp,0x8
  405e05:	pop    rbx
  405e06:	pop    r12
  405e08:	pop    r14
  405e0a:	pop    r15
  405e0c:	ret    
  405e0d:	mov    rax,QWORD PTR [rbx+0x30]
  405e11:	mov    DWORD PTR [rax+0x10],0x4
  405e18:	mov    rax,QWORD PTR [rbx+0x30]
  405e1c:	mov    DWORD PTR [rax+0x14],0x0
  405e23:	mov    rax,QWORD PTR [rbx+0x30]
  405e27:	mov    WORD PTR [rax+0xe],0x5
  405e2d:	mov    ecx,DWORD PTR [rbx+0x28]
  405e30:	mov    edx,DWORD PTR [rbx+0x70]
  405e33:	sub    edx,ecx
  405e35:	add    rcx,QWORD PTR [rbx+0x68]
  405e39:	mov    QWORD PTR [rbx+0x18],rcx
  405e3d:	cmp    edx,0xfffffffc
  405e40:	mov    ecx,0xfffffffc
  405e45:	cmovb  ecx,edx
  405e48:	mov    DWORD PTR [rbx+0x24],ecx
  405e4b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405e52:	mov    ecx,DWORD PTR [rax+0x14]
  405e55:	add    ecx,r14d
  405e58:	jb     405f08 <flatcc_builder_create_offset_vector@@Base+0x128>
  405e5e:	cmp    ecx,0x40000000
  405e64:	jae    405f08 <flatcc_builder_create_offset_vector@@Base+0x128>
  405e6a:	mov    DWORD PTR [rax+0x14],ecx
  405e6d:	mov    r12d,DWORD PTR [rbx+0x20]
  405e71:	lea    eax,[r12+r14*4]
  405e75:	mov    DWORD PTR [rbx+0x20],eax
  405e78:	cmp    eax,DWORD PTR [rbx+0x24]
  405e7b:	jae    405e8b <flatcc_builder_create_offset_vector@@Base+0xab>
  405e7d:	mov    rdi,QWORD PTR [rbx+0x18]
  405e81:	add    rdi,r12
  405e84:	jne    405ee6 <flatcc_builder_create_offset_vector@@Base+0x106>
  405e86:	jmp    405dff <flatcc_builder_create_offset_vector@@Base+0x1f>
  405e8b:	inc    eax
  405e8d:	lea    rsi,[rbx+0x68]
  405e91:	mov    rdi,QWORD PTR [rbx+0x40]
  405e95:	mov    edx,DWORD PTR [rbx+0x28]
  405e98:	add    rdx,rax
  405e9b:	mov    ecx,0x1
  405ea0:	mov    r8d,0x1
  405ea6:	call   QWORD PTR [rbx+0x50]
  405ea9:	test   eax,eax
  405eab:	jne    405dff <flatcc_builder_create_offset_vector@@Base+0x1f>
  405eb1:	mov    eax,DWORD PTR [rbx+0x28]
  405eb4:	mov    rdi,rax
  405eb7:	add    rdi,QWORD PTR [rbx+0x68]
  405ebb:	mov    QWORD PTR [rbx+0x18],rdi
  405ebf:	mov    ecx,DWORD PTR [rbx+0x70]
  405ec2:	sub    ecx,eax
  405ec4:	cmp    ecx,0xfffffffc
  405ec7:	mov    eax,0xfffffffc
  405ecc:	cmovb  eax,ecx
  405ecf:	mov    DWORD PTR [rbx+0x24],eax
  405ed2:	mov    rax,QWORD PTR [rbx+0x30]
  405ed6:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405edd:	add    rdi,r12
  405ee0:	je     405dff <flatcc_builder_create_offset_vector@@Base+0x1f>
  405ee6:	shl    r14,0x2
  405eea:	mov    rsi,r15
  405eed:	mov    rdx,r14
  405ef0:	call   4030a0 <memcpy@plt>
  405ef5:	mov    rdi,rbx
  405ef8:	add    rsp,0x8
  405efc:	pop    rbx
  405efd:	pop    r12
  405eff:	pop    r14
  405f01:	pop    r15
  405f03:	jmp    405f30 <flatcc_builder_end_offset_vector@@Base>
  405f08:	lea    rdi,[rip+0x589c]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405f0f:	lea    rsi,[rip+0x47cc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405f16:	lea    rcx,[rip+0x58a9]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405f1d:	mov    edx,0x37c
  405f22:	call   403060 <__assert_fail@plt>
  405f27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f30 <flatcc_builder_end_offset_vector@@Base>:
  405f30:	push   rbp
  405f31:	push   rbx
  405f32:	push   rax
  405f33:	mov    rax,QWORD PTR [rdi+0x30]
  405f37:	cmp    WORD PTR [rax+0xe],0x5
  405f3c:	jne    405fca <flatcc_builder_end_offset_vector@@Base+0x9a>
  405f42:	mov    rbx,rdi
  405f45:	mov    rsi,QWORD PTR [rdi+0x18]
  405f49:	mov    edx,DWORD PTR [rax+0x14]
  405f4c:	xor    ecx,ecx
  405f4e:	call   406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405f53:	mov    ebp,eax
  405f55:	test   eax,eax
  405f57:	je     405fc1 <flatcc_builder_end_offset_vector@@Base+0x91>
  405f59:	mov    rdi,QWORD PTR [rbx+0x18]
  405f5d:	mov    edx,DWORD PTR [rbx+0x20]
  405f60:	xor    esi,esi
  405f62:	call   403070 <memset@plt>
  405f67:	mov    rax,QWORD PTR [rbx+0x30]
  405f6b:	mov    ecx,DWORD PTR [rax+0x8]
  405f6e:	mov    DWORD PTR [rbx+0x20],ecx
  405f71:	mov    ecx,DWORD PTR [rax]
  405f73:	mov    DWORD PTR [rbx+0x28],ecx
  405f76:	mov    edx,DWORD PTR [rax+0x4]
  405f79:	mov    rsi,rcx
  405f7c:	add    rsi,QWORD PTR [rbx+0x68]
  405f80:	mov    QWORD PTR [rbx+0x18],rsi
  405f84:	mov    esi,DWORD PTR [rbx+0x70]
  405f87:	sub    esi,ecx
  405f89:	cmp    esi,edx
  405f8b:	cmova  esi,edx
  405f8e:	mov    DWORD PTR [rbx+0x24],esi
  405f91:	movzx  ecx,WORD PTR [rbx+0xea]
  405f98:	cmp    WORD PTR [rbx+0xe8],cx
  405f9f:	jae    405fa8 <flatcc_builder_end_offset_vector@@Base+0x78>
  405fa1:	mov    WORD PTR [rbx+0xe8],cx
  405fa8:	movzx  ecx,WORD PTR [rax+0xc]
  405fac:	mov    WORD PTR [rbx+0xea],cx
  405fb3:	add    rax,0xffffffffffffffdc
  405fb7:	mov    QWORD PTR [rbx+0x30],rax
  405fbb:	dec    DWORD PTR [rbx+0x104]
  405fc1:	mov    eax,ebp
  405fc3:	add    rsp,0x8
  405fc7:	pop    rbx
  405fc8:	pop    rbp
  405fc9:	ret    
  405fca:	lea    rdi,[rip+0x4b47]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  405fd1:	lea    rsi,[rip+0x470a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405fd8:	lea    rcx,[rip+0x5168]        # 40b147 <flatcc_builder_padding_base@@Base+0xcf7>
  405fdf:	mov    edx,0x5c8
  405fe4:	call   403060 <__assert_fail@plt>
  405fe9:	nop    DWORD PTR [rax+0x0]

0000000000405ff0 <flatcc_builder_start_string@@Base>:
  405ff0:	push   rbx
  405ff1:	mov    rbx,rdi
  405ff4:	mov    esi,0x1
  405ff9:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  405ffe:	mov    ecx,eax
  406000:	mov    eax,0xffffffff
  406005:	test   ecx,ecx
  406007:	je     40600b <flatcc_builder_start_string@@Base+0x1b>
  406009:	pop    rbx
  40600a:	ret    
  40600b:	mov    rax,QWORD PTR [rbx+0x30]
  40600f:	mov    DWORD PTR [rax+0x10],0x1
  406016:	mov    rax,QWORD PTR [rbx+0x30]
  40601a:	mov    DWORD PTR [rax+0x14],0x0
  406021:	mov    rax,QWORD PTR [rbx+0x30]
  406025:	mov    WORD PTR [rax+0xe],0x6
  40602b:	mov    ecx,DWORD PTR [rbx+0x28]
  40602e:	mov    edx,DWORD PTR [rbx+0x70]
  406031:	sub    edx,ecx
  406033:	add    rcx,QWORD PTR [rbx+0x68]
  406037:	mov    QWORD PTR [rbx+0x18],rcx
  40603b:	cmp    edx,0xfffffffc
  40603e:	mov    ecx,0xfffffffc
  406043:	cmovb  ecx,edx
  406046:	mov    DWORD PTR [rbx+0x24],ecx
  406049:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406050:	xor    eax,eax
  406052:	pop    rbx
  406053:	ret    
  406054:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40605e:	xchg   ax,ax

0000000000406060 <flatcc_builder_reserve_table@@Base>:
  406060:	push   r15
  406062:	push   r14
  406064:	push   rbx
  406065:	test   esi,esi
  406067:	js     406114 <flatcc_builder_reserve_table@@Base+0xb4>
  40606d:	mov    r14d,esi
  406070:	mov    r15,rdi
  406073:	mov    rax,QWORD PTR [rdi+0x30]
  406077:	movzx  ebx,WORD PTR [rax+0x1c]
  40607b:	add    ebx,ebx
  40607d:	add    ebx,DWORD PTR [rax+0x10]
  406080:	lea    edx,[r14+r14*1]
  406084:	add    edx,0x4
  406087:	add    rdx,rbx
  40608a:	cmp    rdx,QWORD PTR [rdi+0x60]
  40608e:	jbe    4060ac <flatcc_builder_reserve_table@@Base+0x4c>
  406090:	lea    rsi,[r15+0x58]
  406094:	mov    rdi,QWORD PTR [r15+0x40]
  406098:	mov    ecx,0x1
  40609d:	xor    r8d,r8d
  4060a0:	call   QWORD PTR [r15+0x50]
  4060a4:	test   eax,eax
  4060a6:	jne    406133 <flatcc_builder_reserve_table@@Base+0xd3>
  4060ac:	add    rbx,QWORD PTR [r15+0x58]
  4060b0:	mov    QWORD PTR [r15+0x8],rbx
  4060b4:	je     406109 <flatcc_builder_reserve_table@@Base+0xa9>
  4060b6:	add    r14d,r14d
  4060b9:	add    rbx,0x4
  4060bd:	mov    QWORD PTR [r15+0x8],rbx
  4060c1:	mov    rax,QWORD PTR [r15+0x30]
  4060c5:	mov    ebx,DWORD PTR [rax+0x14]
  4060c8:	or     r14d,0x1
  4060cc:	add    r14,rbx
  4060cf:	cmp    r14,QWORD PTR [r15+0x90]
  4060d6:	jbe    4060f6 <flatcc_builder_reserve_table@@Base+0x96>
  4060d8:	lea    rsi,[r15+0x88]
  4060df:	mov    rdi,QWORD PTR [r15+0x40]
  4060e3:	mov    rdx,r14
  4060e6:	xor    ecx,ecx
  4060e8:	mov    r8d,0x3
  4060ee:	call   QWORD PTR [r15+0x50]
  4060f2:	test   eax,eax
  4060f4:	jne    406133 <flatcc_builder_reserve_table@@Base+0xd3>
  4060f6:	xor    eax,eax
  4060f8:	add    rbx,QWORD PTR [r15+0x88]
  4060ff:	mov    QWORD PTR [r15],rbx
  406102:	sete   al
  406105:	neg    eax
  406107:	jmp    40610e <flatcc_builder_reserve_table@@Base+0xae>
  406109:	mov    eax,0xffffffff
  40610e:	pop    rbx
  40610f:	pop    r14
  406111:	pop    r15
  406113:	ret    
  406114:	lea    rdi,[rip+0x4d44]        # 40ae5f <flatcc_builder_padding_base@@Base+0xa0f>
  40611b:	lea    rsi,[rip+0x45c0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406122:	lea    rcx,[rip+0x4cf5]        # 40ae1e <flatcc_builder_padding_base@@Base+0x9ce>
  406129:	mov    edx,0x429
  40612e:	call   403060 <__assert_fail@plt>
  406133:	lea    rdi,[rip+0x5768]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  40613a:	lea    rsi,[rip+0x45a1]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406141:	lea    rcx,[rip+0x5594]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  406148:	mov    edx,0x134
  40614d:	call   403060 <__assert_fail@plt>
  406152:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40615c:	nop    DWORD PTR [rax+0x0]

0000000000406160 <flatcc_builder_start_table@@Base>:
  406160:	push   rbp
  406161:	push   r15
  406163:	push   r14
  406165:	push   rbx
  406166:	push   rax
  406167:	mov    r15d,esi
  40616a:	mov    rbx,rdi
  40616d:	mov    esi,0x4
  406172:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  406177:	mov    r14d,0xffffffff
  40617d:	test   eax,eax
  40617f:	je     40618f <flatcc_builder_start_table@@Base+0x2f>
  406181:	mov    eax,r14d
  406184:	add    rsp,0x8
  406188:	pop    rbx
  406189:	pop    r14
  40618b:	pop    r15
  40618d:	pop    rbp
  40618e:	ret    
  40618f:	mov    eax,DWORD PTR [rbx+0x8]
  406192:	sub    eax,DWORD PTR [rbx+0x58]
  406195:	mov    rcx,QWORD PTR [rbx+0x30]
  406199:	mov    DWORD PTR [rcx+0x10],eax
  40619c:	mov    eax,DWORD PTR [rbx]
  40619e:	sub    eax,DWORD PTR [rbx+0x88]
  4061a4:	mov    rcx,QWORD PTR [rbx+0x30]
  4061a8:	mov    DWORD PTR [rcx+0x14],eax
  4061ab:	mov    eax,DWORD PTR [rbx+0x14]
  4061ae:	mov    rcx,QWORD PTR [rbx+0x30]
  4061b2:	mov    DWORD PTR [rcx+0x18],eax
  4061b5:	movzx  eax,WORD PTR [rbx+0x10]
  4061b9:	mov    rcx,QWORD PTR [rbx+0x30]
  4061bd:	mov    WORD PTR [rcx+0x1c],ax
  4061c1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4061c8:	mov    WORD PTR [rbx+0x10],0x0
  4061ce:	mov    rax,QWORD PTR [rbx+0x30]
  4061d2:	mov    WORD PTR [rax+0xe],0x3
  4061d8:	movzx  ebp,WORD PTR [rax+0x1c]
  4061dc:	add    ebp,ebp
  4061de:	add    ebp,DWORD PTR [rax+0x10]
  4061e1:	lea    edx,[r15+r15*1]
  4061e5:	add    edx,0x4
  4061e8:	add    rdx,rbp
  4061eb:	cmp    rdx,QWORD PTR [rbx+0x60]
  4061ef:	jbe    40620c <flatcc_builder_start_table@@Base+0xac>
  4061f1:	lea    rsi,[rbx+0x58]
  4061f5:	mov    rdi,QWORD PTR [rbx+0x40]
  4061f9:	mov    ecx,0x1
  4061fe:	xor    r8d,r8d
  406201:	call   QWORD PTR [rbx+0x50]
  406204:	test   eax,eax
  406206:	jne    4062a0 <flatcc_builder_start_table@@Base+0x140>
  40620c:	add    rbp,QWORD PTR [rbx+0x58]
  406210:	mov    QWORD PTR [rbx+0x8],rbp
  406214:	je     406181 <flatcc_builder_start_table@@Base+0x21>
  40621a:	add    r15d,r15d
  40621d:	add    rbp,0x4
  406221:	mov    QWORD PTR [rbx+0x8],rbp
  406225:	mov    rax,QWORD PTR [rbx+0x30]
  406229:	mov    ebp,DWORD PTR [rax+0x14]
  40622c:	or     r15d,0x1
  406230:	add    r15,rbp
  406233:	cmp    r15,QWORD PTR [rbx+0x90]
  40623a:	jbe    406259 <flatcc_builder_start_table@@Base+0xf9>
  40623c:	lea    rsi,[rbx+0x88]
  406243:	mov    rdi,QWORD PTR [rbx+0x40]
  406247:	mov    rdx,r15
  40624a:	xor    ecx,ecx
  40624c:	mov    r8d,0x3
  406252:	call   QWORD PTR [rbx+0x50]
  406255:	test   eax,eax
  406257:	jne    4062a0 <flatcc_builder_start_table@@Base+0x140>
  406259:	add    rbp,QWORD PTR [rbx+0x88]
  406260:	mov    QWORD PTR [rbx],rbp
  406263:	je     406181 <flatcc_builder_start_table@@Base+0x21>
  406269:	mov    eax,DWORD PTR [rbx+0x28]
  40626c:	mov    rcx,rax
  40626f:	add    rcx,QWORD PTR [rbx+0x68]
  406273:	mov    QWORD PTR [rbx+0x18],rcx
  406277:	mov    ecx,DWORD PTR [rbx+0x70]
  40627a:	sub    ecx,eax
  40627c:	cmp    ecx,0xfffc
  406282:	mov    eax,0xfffc
  406287:	cmovb  eax,ecx
  40628a:	mov    DWORD PTR [rbx+0x24],eax
  40628d:	mov    rax,QWORD PTR [rbx+0x30]
  406291:	mov    DWORD PTR [rax+0x4],0xfffc
  406298:	xor    r14d,r14d
  40629b:	jmp    406181 <flatcc_builder_start_table@@Base+0x21>
  4062a0:	lea    rdi,[rip+0x55fb]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4062a7:	lea    rsi,[rip+0x4434]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4062ae:	lea    rcx,[rip+0x5427]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4062b5:	mov    edx,0x134
  4062ba:	call   403060 <__assert_fail@plt>
  4062bf:	nop

00000000004062c0 <flatcc_builder_create_vtable@@Base>:
  4062c0:	push   r14
  4062c2:	push   rbx
  4062c3:	sub    rsp,0x98
  4062ca:	mov    r14,rdi
  4062cd:	mov    QWORD PTR [rsp+0x8],0x0
  4062d6:	mov    DWORD PTR [rsp+0x10],0x0
  4062de:	test   dx,dx
  4062e1:	je     406348 <flatcc_builder_create_vtable@@Base+0x88>
  4062e3:	movzx  r8d,dx
  4062e7:	mov    QWORD PTR [rsp+0x8],r8
  4062ec:	mov    QWORD PTR [rsp+0x18],rsi
  4062f1:	mov    QWORD PTR [rsp+0x20],r8
  4062f6:	mov    DWORD PTR [rsp+0x10],0x1
  4062fe:	mov    edx,0x1
  406303:	cmp    DWORD PTR [r14+0x100],0x0
  40630b:	jne    406357 <flatcc_builder_create_vtable@@Base+0x97>
  40630d:	cmp    DWORD PTR [r14+0x124],0x0
  406315:	jne    406357 <flatcc_builder_create_vtable@@Base+0x97>
  406317:	mov    ebx,DWORD PTR [r14+0xf4]
  40631e:	lea    eax,[r8+rbx*1]
  406322:	mov    DWORD PTR [r14+0xf4],eax
  406329:	mov    rdi,QWORD PTR [r14+0x38]
  40632d:	lea    rsi,[rsp+0x18]
  406332:	mov    ecx,ebx
  406334:	call   QWORD PTR [r14+0x48]
  406338:	test   eax,eax
  40633a:	jne    4063eb <flatcc_builder_create_vtable@@Base+0x12b>
  406340:	xor    eax,eax
  406342:	inc    ebx
  406344:	jne    40639c <flatcc_builder_create_vtable@@Base+0xdc>
  406346:	jmp    4063a2 <flatcc_builder_create_vtable@@Base+0xe2>
  406348:	xor    edx,edx
  40634a:	xor    r8d,r8d
  40634d:	cmp    DWORD PTR [r14+0x100],0x0
  406355:	je     40630d <flatcc_builder_create_vtable@@Base+0x4d>
  406357:	cmp    r8,0x11
  40635b:	setb   al
  40635e:	lea    rcx,[r8-0x10]
  406362:	shr    rcx,0x20
  406366:	sete   cl
  406369:	test   r8d,r8d
  40636c:	je     4063ad <flatcc_builder_create_vtable@@Base+0xed>
  40636e:	or     al,cl
  406370:	je     4063ad <flatcc_builder_create_vtable@@Base+0xed>
  406372:	mov    ebx,DWORD PTR [r14+0xf0]
  406379:	sub    ebx,r8d
  40637c:	mov    rdi,QWORD PTR [r14+0x38]
  406380:	lea    rsi,[rsp+0x18]
  406385:	mov    ecx,ebx
  406387:	call   QWORD PTR [r14+0x48]
  40638b:	test   eax,eax
  40638d:	jne    4063cc <flatcc_builder_create_vtable@@Base+0x10c>
  40638f:	mov    DWORD PTR [r14+0xf0],ebx
  406396:	test   ebx,ebx
  406398:	je     4063a0 <flatcc_builder_create_vtable@@Base+0xe0>
  40639a:	inc    ebx
  40639c:	mov    eax,ebx
  40639e:	jmp    4063a2 <flatcc_builder_create_vtable@@Base+0xe2>
  4063a0:	xor    eax,eax
  4063a2:	add    rsp,0x98
  4063a9:	pop    rbx
  4063aa:	pop    r14
  4063ac:	ret    
  4063ad:	lea    rdi,[rip+0x54ee]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4063b4:	lea    rsi,[rip+0x4327]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4063bb:	lea    rcx,[rip+0x539f]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4063c2:	mov    edx,0x287
  4063c7:	call   403060 <__assert_fail@plt>
  4063cc:	lea    rdi,[rip+0x54cf]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4063d3:	lea    rsi,[rip+0x4308]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4063da:	lea    rcx,[rip+0x5380]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4063e1:	mov    edx,0x28b
  4063e6:	call   403060 <__assert_fail@plt>
  4063eb:	lea    rdi,[rip+0x54b0]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4063f2:	lea    rsi,[rip+0x42e9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4063f9:	lea    rcx,[rip+0x541d]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  406400:	mov    edx,0x2a5
  406405:	call   403060 <__assert_fail@plt>
  40640a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406410 <flatcc_builder_create_cached_vtable@@Base>:
  406410:	push   rbp
  406411:	push   r15
  406413:	push   r14
  406415:	push   r13
  406417:	push   r12
  406419:	push   rbx
  40641a:	sub    rsp,0x28
  40641e:	mov    r15d,ecx
  406421:	mov    r12d,edx
  406424:	mov    QWORD PTR [rsp+0x18],rsi
  406429:	mov    r14,rdi
  40642c:	mov    rax,QWORD PTR [rdi+0xd8]
  406433:	test   rax,rax
  406436:	je     406506 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  40643c:	neg    al
  40643e:	shrx   r13d,r15d,eax
  406443:	shl    r13,0x2
  406447:	add    r13,QWORD PTR [r14+0xa8]
  40644e:	je     4065da <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  406454:	mov    ebx,DWORD PTR [r13+0x0]
  406458:	movzx  eax,r12w
  40645c:	mov    QWORD PTR [rsp],rax
  406460:	test   ebx,ebx
  406462:	je     4065e1 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  406468:	mov    rbp,QWORD PTR [r14+0x78]
  40646c:	mov    QWORD PTR [rsp+0x10],r14
  406471:	mov    r15,QWORD PTR [r14+0xb8]
  406478:	xor    eax,eax
  40647a:	mov    QWORD PTR [rsp+0x20],rax
  40647f:	mov    QWORD PTR [rsp+0x8],r13
  406484:	jmp    4064a3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  406486:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406490:	mov    ebx,DWORD PTR [r14+0xc]
  406494:	add    r14,0xc
  406498:	mov    r13,r14
  40649b:	test   ebx,ebx
  40649d:	je     4065c9 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  4064a3:	mov    eax,ebx
  4064a5:	lea    r14,[r15+rax*1]
  4064a9:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  4064ae:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  4064b4:	jne    406490 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4064b6:	add    rsi,rbp
  4064b9:	mov    rdi,QWORD PTR [rsp+0x18]
  4064be:	mov    rdx,QWORD PTR [rsp]
  4064c2:	call   4030c0 <bcmp@plt>
  4064c7:	test   eax,eax
  4064c9:	jne    406490 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4064cb:	mov    eax,DWORD PTR [r14+0x4]
  4064cf:	mov    rcx,QWORD PTR [rsp+0x10]
  4064d4:	cmp    eax,DWORD PTR [rcx+0x100]
  4064da:	je     40674a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  4064e0:	lea    r13,[r14+0xc]
  4064e4:	mov    ebx,DWORD PTR [r14+0xc]
  4064e8:	mov    rax,r14
  4064eb:	mov    QWORD PTR [rsp+0x20],r14
  4064f0:	test   ebx,ebx
  4064f2:	jne    4064a3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  4064f4:	mov    r15,r14
  4064f7:	mov    r14,QWORD PTR [rsp+0x10]
  4064fc:	mov    r13,QWORD PTR [rsp+0x8]
  406501:	jmp    4065e4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  406506:	cmp    DWORD PTR [r14+0xe4],0x0
  40650e:	jne    406788 <flatcc_builder_create_cached_vtable@@Base+0x378>
  406514:	lea    r13,[r14+0xb8]
  40651b:	cmp    QWORD PTR [r14+0xc0],0xf
  406523:	ja     406545 <flatcc_builder_create_cached_vtable@@Base+0x135>
  406525:	mov    rdi,QWORD PTR [r14+0x40]
  406529:	mov    edx,0x10
  40652e:	mov    rsi,r13
  406531:	xor    ecx,ecx
  406533:	mov    r8d,0x6
  406539:	call   QWORD PTR [r14+0x50]
  40653d:	test   eax,eax
  40653f:	jne    406769 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406545:	xor    ebx,ebx
  406547:	cmp    QWORD PTR [r13+0x0],0x0
  40654c:	je     406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406552:	lea    rsi,[r14+0xa8]
  406559:	mov    DWORD PTR [r14+0xe4],0x10
  406564:	mov    rdi,QWORD PTR [r14+0x40]
  406568:	mov    ebp,0x100
  40656d:	mov    edx,0x100
  406572:	mov    ecx,0x1
  406577:	mov    r8d,0x5
  40657d:	call   QWORD PTR [r14+0x50]
  406581:	test   eax,eax
  406583:	jne    406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406589:	mov    rax,QWORD PTR [r14+0xb0]
  406590:	mov    rcx,rbp
  406593:	add    rbp,rbp
  406596:	cmp    rbp,rax
  406599:	jbe    406590 <flatcc_builder_create_cached_vtable@@Base+0x180>
  40659b:	shr    rcx,0x2
  40659f:	mov    rax,0xffffffffffffffff
  4065a6:	mov    edx,0x1
  4065ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4065b0:	inc    rax
  4065b3:	shlx   rsi,rdx,rax
  4065b8:	cmp    rsi,rcx
  4065bb:	jb     4065b0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4065bd:	mov    QWORD PTR [r14+0xd8],rax
  4065c4:	jmp    40643c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  4065c9:	mov    r14,QWORD PTR [rsp+0x10]
  4065ce:	mov    r13,QWORD PTR [rsp+0x8]
  4065d3:	mov    r15,QWORD PTR [rsp+0x20]
  4065d8:	jmp    4065e4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  4065da:	xor    ebx,ebx
  4065dc:	jmp    406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4065e1:	xor    r15d,r15d
  4065e4:	mov    r12d,DWORD PTR [r14+0xe4]
  4065eb:	lea    rbp,[r14+0xb8]
  4065f2:	lea    rdx,[r12+0x10]
  4065f7:	cmp    rdx,QWORD PTR [r14+0xc0]
  4065fe:	jbe    40661b <flatcc_builder_create_cached_vtable@@Base+0x20b>
  406600:	mov    rdi,QWORD PTR [r14+0x40]
  406604:	mov    rsi,rbp
  406607:	xor    ecx,ecx
  406609:	mov    r8d,0x6
  40660f:	call   QWORD PTR [r14+0x50]
  406613:	test   eax,eax
  406615:	jne    406769 <flatcc_builder_create_cached_vtable@@Base+0x359>
  40661b:	xor    ebx,ebx
  40661d:	add    r12,QWORD PTR [rbp+0x0]
  406621:	je     406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406627:	mov    eax,DWORD PTR [r14+0xe4]
  40662e:	mov    ecx,DWORD PTR [r14+0x100]
  406635:	lea    edx,[rax+0x10]
  406638:	mov    DWORD PTR [r14+0xe4],edx
  40663f:	mov    DWORD PTR [r12+0x4],ecx
  406644:	mov    ecx,DWORD PTR [r13+0x0]
  406648:	mov    DWORD PTR [r12+0xc],ecx
  40664d:	mov    DWORD PTR [r13+0x0],eax
  406651:	mov    rdi,r14
  406654:	mov    rsi,QWORD PTR [rsp+0x18]
  406659:	mov    rdx,QWORD PTR [rsp]
  40665d:	call   4062c0 <flatcc_builder_create_vtable@@Base>
  406662:	mov    DWORD PTR [r12],eax
  406666:	test   eax,eax
  406668:	je     406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40666e:	test   r15,r15
  406671:	je     406681 <flatcc_builder_create_cached_vtable@@Base+0x271>
  406673:	mov    eax,DWORD PTR [r15+0x8]
  406677:	mov    DWORD PTR [r12+0x8],eax
  40667c:	jmp    40672e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  406681:	mov    rax,QWORD PTR [r14+0x118]
  406688:	mov    ebp,DWORD PTR [r14+0xe0]
  40668f:	test   rax,rax
  406692:	je     4066d5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  406694:	mov    rcx,QWORD PTR [rsp]
  406698:	add    ecx,ebp
  40669a:	cmp    rax,rcx
  40669d:	jae    4066d5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  40669f:	cmp    QWORD PTR [r14+0xd8],0x0
  4066a7:	je     40672e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4066ad:	mov    rdi,QWORD PTR [r14+0xa8]
  4066b4:	mov    rdx,QWORD PTR [r14+0xb0]
  4066bb:	xor    esi,esi
  4066bd:	call   403070 <memset@plt>
  4066c2:	movabs rax,0x1000000000
  4066cc:	mov    QWORD PTR [r14+0xe0],rax
  4066d3:	jmp    40672e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  4066d5:	lea    rbx,[r14+0x78]
  4066d9:	mov    rax,QWORD PTR [rsp]
  4066dd:	lea    rdx,[rax+rbp*1]
  4066e1:	cmp    rdx,QWORD PTR [r14+0x80]
  4066e8:	jbe    406701 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  4066ea:	mov    rdi,QWORD PTR [r14+0x40]
  4066ee:	mov    rsi,rbx
  4066f1:	xor    ecx,ecx
  4066f3:	mov    r8d,0x2
  4066f9:	call   QWORD PTR [r14+0x50]
  4066fd:	test   eax,eax
  4066ff:	jne    406769 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406701:	add    rbp,QWORD PTR [rbx]
  406704:	je     406743 <flatcc_builder_create_cached_vtable@@Base+0x333>
  406706:	mov    eax,DWORD PTR [r14+0xe0]
  40670d:	mov    DWORD PTR [r12+0x8],eax
  406712:	mov    rdx,QWORD PTR [rsp]
  406716:	mov    ecx,edx
  406718:	add    ecx,eax
  40671a:	mov    DWORD PTR [r14+0xe0],ecx
  406721:	mov    rdi,rbp
  406724:	mov    rsi,QWORD PTR [rsp+0x18]
  406729:	call   4030a0 <memcpy@plt>
  40672e:	mov    ebx,DWORD PTR [r12]
  406732:	mov    eax,ebx
  406734:	add    rsp,0x28
  406738:	pop    rbx
  406739:	pop    r12
  40673b:	pop    r13
  40673d:	pop    r14
  40673f:	pop    r15
  406741:	pop    rbp
  406742:	ret    
  406743:	mov    ebx,0xffffffff
  406748:	jmp    406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  40674a:	mov    rcx,QWORD PTR [rsp+0x8]
  40674f:	cmp    r13,rcx
  406752:	je     406764 <flatcc_builder_create_cached_vtable@@Base+0x354>
  406754:	mov    eax,DWORD PTR [r14+0xc]
  406758:	mov    DWORD PTR [r13+0x0],eax
  40675c:	mov    eax,DWORD PTR [rcx]
  40675e:	mov    DWORD PTR [r14+0xc],eax
  406762:	mov    DWORD PTR [rcx],ebx
  406764:	mov    ebx,DWORD PTR [r14]
  406767:	jmp    406732 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406769:	lea    rdi,[rip+0x5132]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406770:	lea    rsi,[rip+0x3f6b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406777:	lea    rcx,[rip+0x4f5e]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  40677e:	mov    edx,0x134
  406783:	call   403060 <__assert_fail@plt>
  406788:	lea    rdi,[rip+0x50d7]        # 40b866 <flatcc_builder_padding_base@@Base+0x1416>
  40678f:	lea    rsi,[rip+0x3f4c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406796:	lea    rcx,[rip+0x50d8]        # 40b875 <flatcc_builder_padding_base@@Base+0x1425>
  40679d:	mov    edx,0x156
  4067a2:	call   403060 <__assert_fail@plt>
  4067a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004067b0 <flatcc_builder_create_table@@Base>:
  4067b0:	push   rbp
  4067b1:	push   r14
  4067b3:	push   rbx
  4067b4:	sub    rsp,0xa0
  4067bb:	test   r9d,r9d
  4067be:	js     4069d3 <flatcc_builder_create_table@@Base+0x223>
  4067c4:	mov    r14,rdi
  4067c7:	mov    edi,DWORD PTR [rsp+0xc0]
  4067ce:	test   dil,0x1
  4067d2:	je     4069f2 <flatcc_builder_create_table@@Base+0x242>
  4067d8:	cmp    cx,0x4
  4067dc:	mov    eax,0x4
  4067e1:	cmova  eax,ecx
  4067e4:	cmp    WORD PTR [r14+0xe8],ax
  4067ec:	jae    4067f6 <flatcc_builder_create_table@@Base+0x46>
  4067ee:	mov    WORD PTR [r14+0xe8],ax
  4067f6:	mov    ebp,DWORD PTR [r14+0xf0]
  4067fd:	sub    ebp,edx
  4067ff:	movzx  r10d,ax
  406803:	dec    r10d
  406806:	and    r10d,ebp
  406809:	add    edi,r10d
  40680c:	neg    edi
  40680e:	lea    ecx,[rdi+rbp*1]
  406811:	add    ecx,0xfffffffd
  406814:	mov    DWORD PTR [rsp+0xc],ecx
  406818:	test   r9d,r9d
  40681b:	jle    4068d6 <flatcc_builder_create_table@@Base+0x126>
  406821:	add    ebp,0xfffffffc
  406824:	sub    ebp,r10d
  406827:	mov    ecx,0xfffffffc
  40682c:	sub    ecx,ebp
  40682e:	mov    edi,r9d
  406831:	lea    rbx,[rdi-0x1]
  406835:	mov    r9d,edi
  406838:	and    r9d,0x3
  40683c:	cmp    rbx,0x3
  406840:	jae    40684e <flatcc_builder_create_table@@Base+0x9e>
  406842:	xor    ebx,ebx
  406844:	test   r9,r9
  406847:	jne    4068ad <flatcc_builder_create_table@@Base+0xfd>
  406849:	jmp    4068d6 <flatcc_builder_create_table@@Base+0x126>
  40684e:	sub    rdi,r9
  406851:	xor    ebx,ebx
  406853:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40685d:	nop    DWORD PTR [rax]
  406860:	movzx  eax,WORD PTR [r8+rbx*2]
  406865:	mov    ebp,DWORD PTR [rax+rsi*1]
  406868:	add    ebp,ecx
  40686a:	sub    ebp,eax
  40686c:	mov    DWORD PTR [rax+rsi*1],ebp
  40686f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406875:	mov    ebp,DWORD PTR [rax+rsi*1]
  406878:	add    ebp,ecx
  40687a:	sub    ebp,eax
  40687c:	mov    DWORD PTR [rax+rsi*1],ebp
  40687f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  406885:	mov    ebp,DWORD PTR [rax+rsi*1]
  406888:	add    ebp,ecx
  40688a:	sub    ebp,eax
  40688c:	mov    DWORD PTR [rax+rsi*1],ebp
  40688f:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  406895:	mov    ebp,DWORD PTR [rax+rsi*1]
  406898:	add    ebp,ecx
  40689a:	sub    ebp,eax
  40689c:	mov    DWORD PTR [rax+rsi*1],ebp
  40689f:	add    rbx,0x4
  4068a3:	cmp    rdi,rbx
  4068a6:	jne    406860 <flatcc_builder_create_table@@Base+0xb0>
  4068a8:	test   r9,r9
  4068ab:	je     4068d6 <flatcc_builder_create_table@@Base+0x126>
  4068ad:	lea    rdi,[r8+rbx*2]
  4068b1:	xor    ebx,ebx
  4068b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4068bd:	nop    DWORD PTR [rax]
  4068c0:	movzx  eax,WORD PTR [rdi+rbx*2]
  4068c4:	mov    ebp,DWORD PTR [rax+rsi*1]
  4068c7:	add    ebp,ecx
  4068c9:	sub    ebp,eax
  4068cb:	mov    DWORD PTR [rax+rsi*1],ebp
  4068ce:	inc    rbx
  4068d1:	cmp    r9,rbx
  4068d4:	jne    4068c0 <flatcc_builder_create_table@@Base+0x110>
  4068d6:	mov    QWORD PTR [rsp+0x10],0x4
  4068df:	lea    rax,[rsp+0xc]
  4068e4:	mov    QWORD PTR [rsp+0x20],rax
  4068e9:	mov    QWORD PTR [rsp+0x28],0x4
  4068f2:	mov    DWORD PTR [rsp+0x18],0x1
  4068fa:	test   rdx,rdx
  4068fd:	je     40699e <flatcc_builder_create_table@@Base+0x1ee>
  406903:	lea    r8,[rdx+0x4]
  406907:	mov    QWORD PTR [rsp+0x10],r8
  40690c:	mov    QWORD PTR [rsp+0x30],rsi
  406911:	mov    QWORD PTR [rsp+0x38],rdx
  406916:	mov    DWORD PTR [rsp+0x18],0x2
  40691e:	mov    edx,0x2
  406923:	test   r10d,r10d
  406926:	je     40694d <flatcc_builder_create_table@@Base+0x19d>
  406928:	add    r8,r10
  40692b:	mov    QWORD PTR [rsp+0x10],r8
  406930:	mov    eax,edx
  406932:	shl    rax,0x4
  406936:	lea    rcx,[rip+0x3b13]        # 40a450 <flatcc_builder_padding_base@@Base>
  40693d:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406942:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406947:	inc    edx
  406949:	mov    DWORD PTR [rsp+0x18],edx
  40694d:	cmp    r8,0x11
  406951:	setb   al
  406954:	lea    rcx,[r8-0x10]
  406958:	shr    rcx,0x20
  40695c:	sete   cl
  40695f:	test   r8d,r8d
  406962:	jle    4069b4 <flatcc_builder_create_table@@Base+0x204>
  406964:	or     al,cl
  406966:	je     4069b4 <flatcc_builder_create_table@@Base+0x204>
  406968:	mov    ebp,DWORD PTR [r14+0xf0]
  40696f:	sub    ebp,r8d
  406972:	mov    rdi,QWORD PTR [r14+0x38]
  406976:	lea    rsi,[rsp+0x20]
  40697b:	mov    ecx,ebp
  40697d:	call   QWORD PTR [r14+0x48]
  406981:	test   eax,eax
  406983:	jne    406a11 <flatcc_builder_create_table@@Base+0x261>
  406989:	mov    DWORD PTR [r14+0xf0],ebp
  406990:	mov    eax,ebp
  406992:	add    rsp,0xa0
  406999:	pop    rbx
  40699a:	pop    r14
  40699c:	pop    rbp
  40699d:	ret    
  40699e:	mov    r8d,0x4
  4069a4:	mov    edx,0x1
  4069a9:	test   r10d,r10d
  4069ac:	jne    406928 <flatcc_builder_create_table@@Base+0x178>
  4069b2:	jmp    40694d <flatcc_builder_create_table@@Base+0x19d>
  4069b4:	lea    rdi,[rip+0x4ee7]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4069bb:	lea    rsi,[rip+0x3d20]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4069c2:	lea    rcx,[rip+0x4d98]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4069c9:	mov    edx,0x287
  4069ce:	call   403060 <__assert_fail@plt>
  4069d3:	lea    rdi,[rip+0x447e]        # 40ae58 <flatcc_builder_padding_base@@Base+0xa08>
  4069da:	lea    rsi,[rip+0x3d01]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4069e1:	lea    rcx,[rip+0x4482]        # 40ae6a <flatcc_builder_padding_base@@Base+0xa1a>
  4069e8:	mov    edx,0x4d5
  4069ed:	call   403060 <__assert_fail@plt>
  4069f2:	lea    rdi,[rip+0x450d]        # 40af06 <flatcc_builder_padding_base@@Base+0xab6>
  4069f9:	lea    rsi,[rip+0x3ce2]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a00:	lea    rcx,[rip+0x4463]        # 40ae6a <flatcc_builder_padding_base@@Base+0xa1a>
  406a07:	mov    edx,0x4db
  406a0c:	call   403060 <__assert_fail@plt>
  406a11:	lea    rdi,[rip+0x4e8a]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406a18:	lea    rsi,[rip+0x3cc3]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a1f:	lea    rcx,[rip+0x4d3b]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406a26:	mov    edx,0x28b
  406a2b:	call   403060 <__assert_fail@plt>

0000000000406a30 <flatcc_builder_check_required_field@@Base>:
  406a30:	push   rax
  406a31:	mov    rax,QWORD PTR [rdi+0x30]
  406a35:	cmp    WORD PTR [rax+0xe],0x3
  406a3a:	jne    406a57 <flatcc_builder_check_required_field@@Base+0x27>
  406a3c:	xor    eax,eax
  406a3e:	cmp    WORD PTR [rdi+0x10],si
  406a42:	jbe    406a55 <flatcc_builder_check_required_field@@Base+0x25>
  406a44:	mov    rcx,QWORD PTR [rdi+0x8]
  406a48:	movzx  edx,si
  406a4b:	xor    eax,eax
  406a4d:	cmp    WORD PTR [rcx+rdx*2],0x0
  406a52:	setne  al
  406a55:	pop    rcx
  406a56:	ret    
  406a57:	lea    rdi,[rip+0x44b3]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406a5e:	lea    rsi,[rip+0x3c7d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a65:	lea    rcx,[rip+0x44d0]        # 40af3c <flatcc_builder_padding_base@@Base+0xaec>
  406a6c:	mov    edx,0x4f8
  406a71:	call   403060 <__assert_fail@plt>
  406a76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406a80 <flatcc_builder_check_union_field@@Base>:
  406a80:	push   rax
  406a81:	mov    rax,QWORD PTR [rdi+0x30]
  406a85:	cmp    WORD PTR [rax+0xe],0x3
  406a8a:	jne    406ad4 <flatcc_builder_check_union_field@@Base+0x54>
  406a8c:	test   si,si
  406a8f:	je     406abe <flatcc_builder_check_union_field@@Base+0x3e>
  406a91:	cmp    WORD PTR [rdi+0x10],si
  406a95:	jbe    406abe <flatcc_builder_check_union_field@@Base+0x3e>
  406a97:	movzx  eax,si
  406a9a:	mov    rcx,QWORD PTR [rdi+0x8]
  406a9e:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  406aa3:	test   rdx,rdx
  406aa6:	je     406ac2 <flatcc_builder_check_union_field@@Base+0x42>
  406aa8:	mov    rsi,QWORD PTR [rdi+0x18]
  406aac:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406ab0:	movzx  eax,WORD PTR [rcx+rax*2]
  406ab4:	je     406ac9 <flatcc_builder_check_union_field@@Base+0x49>
  406ab6:	test   ax,ax
  406ab9:	setne  al
  406abc:	jmp    406acf <flatcc_builder_check_union_field@@Base+0x4f>
  406abe:	xor    eax,eax
  406ac0:	jmp    406acf <flatcc_builder_check_union_field@@Base+0x4f>
  406ac2:	cmp    WORD PTR [rcx+rax*2],0x0
  406ac7:	jmp    406acc <flatcc_builder_check_union_field@@Base+0x4c>
  406ac9:	test   ax,ax
  406acc:	sete   al
  406acf:	movzx  eax,al
  406ad2:	pop    rcx
  406ad3:	ret    
  406ad4:	lea    rdi,[rip+0x4436]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406adb:	lea    rsi,[rip+0x3c00]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406ae2:	lea    rcx,[rip+0x44a6]        # 40af8f <flatcc_builder_padding_base@@Base+0xb3f>
  406ae9:	mov    edx,0x4ff
  406aee:	call   403060 <__assert_fail@plt>
  406af3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406afd:	nop    DWORD PTR [rax]

0000000000406b00 <flatcc_builder_check_required@@Base>:
  406b00:	push   rax
  406b01:	mov    rax,QWORD PTR [rdi+0x30]
  406b05:	cmp    WORD PTR [rax+0xe],0x3
  406b0a:	jne    406b49 <flatcc_builder_check_required@@Base+0x49>
  406b0c:	movzx  ecx,WORD PTR [rdi+0x10]
  406b10:	xor    eax,eax
  406b12:	cmp    ecx,edx
  406b14:	jl     406b43 <flatcc_builder_check_required@@Base+0x43>
  406b16:	mov    eax,0x1
  406b1b:	test   edx,edx
  406b1d:	jle    406b43 <flatcc_builder_check_required@@Base+0x43>
  406b1f:	mov    rcx,QWORD PTR [rdi+0x8]
  406b23:	mov    r8d,edx
  406b26:	xor    edi,edi
  406b28:	nop    DWORD PTR [rax+rax*1+0x0]
  406b30:	movzx  edx,WORD PTR [rsi+rdi*2]
  406b34:	cmp    WORD PTR [rcx+rdx*2],0x0
  406b39:	je     406b45 <flatcc_builder_check_required@@Base+0x45>
  406b3b:	inc    rdi
  406b3e:	cmp    r8,rdi
  406b41:	jne    406b30 <flatcc_builder_check_required@@Base+0x30>
  406b43:	pop    rcx
  406b44:	ret    
  406b45:	xor    eax,eax
  406b47:	pop    rcx
  406b48:	ret    
  406b49:	lea    rdi,[rip+0x43c1]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406b50:	lea    rsi,[rip+0x3b8b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406b57:	lea    rcx,[rip+0x4481]        # 40afdf <flatcc_builder_padding_base@@Base+0xb8f>
  406b5e:	mov    edx,0x511
  406b63:	call   403060 <__assert_fail@plt>
  406b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406b70 <flatcc_builder_end_table@@Base>:
  406b70:	push   rbp
  406b71:	push   r15
  406b73:	push   r14
  406b75:	push   r12
  406b77:	push   rbx
  406b78:	sub    rsp,0x10
  406b7c:	mov    rax,QWORD PTR [rdi+0x30]
  406b80:	cmp    WORD PTR [rax+0xe],0x3
  406b85:	jne    406cd5 <flatcc_builder_end_table@@Base+0x165>
  406b8b:	mov    rbx,rdi
  406b8e:	mov    rax,QWORD PTR [rdi+0x8]
  406b92:	mov    ecx,DWORD PTR [rdi+0x10]
  406b95:	lea    ecx,[rcx+rcx*1]
  406b98:	add    ecx,0x4
  406b9b:	mov    WORD PTR [rax-0x4],cx
  406b9f:	mov    edx,DWORD PTR [rdi+0x20]
  406ba2:	add    edx,0x4
  406ba5:	mov    WORD PTR [rax-0x2],dx
  406ba9:	lea    r12,[rax-0x4]
  406bad:	movzx  ebp,cx
  406bb0:	mov    eax,DWORD PTR [rdi+0x14]
  406bb3:	xor    eax,ebp
  406bb5:	imul   eax,eax,0x9e3779b1
  406bbb:	movzx  ecx,dx
  406bbe:	xor    ecx,eax
  406bc0:	imul   ecx,ecx,0x9e3779b1
  406bc6:	mov    DWORD PTR [rdi+0x14],ecx
  406bc9:	mov    rsi,r12
  406bcc:	mov    edx,ebp
  406bce:	call   406410 <flatcc_builder_create_cached_vtable@@Base>
  406bd3:	test   eax,eax
  406bd5:	je     406cc2 <flatcc_builder_end_table@@Base+0x152>
  406bdb:	mov    r14d,eax
  406bde:	xor    r15d,r15d
  406be1:	mov    rdi,r12
  406be4:	xor    esi,esi
  406be6:	mov    rdx,rbp
  406be9:	call   403070 <memset@plt>
  406bee:	mov    rax,QWORD PTR [rbx+0x30]
  406bf2:	mov    r8d,DWORD PTR [rax+0x14]
  406bf6:	add    r8,QWORD PTR [rbx+0x88]
  406bfd:	mov    r9,QWORD PTR [rbx]
  406c00:	mov    rsi,QWORD PTR [rbx+0x18]
  406c04:	sub    r9,r8
  406c07:	shr    r9,1
  406c0a:	mov    edx,DWORD PTR [rbx+0x20]
  406c0d:	movzx  ecx,WORD PTR [rbx+0xea]
  406c14:	mov    DWORD PTR [rsp],r14d
  406c18:	mov    rdi,rbx
  406c1b:	call   4067b0 <flatcc_builder_create_table@@Base>
  406c20:	test   eax,eax
  406c22:	je     406cc5 <flatcc_builder_end_table@@Base+0x155>
  406c28:	mov    r14d,eax
  406c2b:	mov    rax,QWORD PTR [rbx+0x30]
  406c2f:	mov    ecx,DWORD PTR [rax+0x18]
  406c32:	mov    DWORD PTR [rbx+0x14],ecx
  406c35:	movzx  ecx,WORD PTR [rax+0x1c]
  406c39:	mov    WORD PTR [rbx+0x10],cx
  406c3d:	mov    ecx,DWORD PTR [rax+0x10]
  406c40:	add    rcx,QWORD PTR [rbx+0x58]
  406c44:	mov    QWORD PTR [rbx+0x8],rcx
  406c48:	mov    eax,DWORD PTR [rax+0x14]
  406c4b:	add    rax,QWORD PTR [rbx+0x88]
  406c52:	mov    QWORD PTR [rbx],rax
  406c55:	mov    rdi,QWORD PTR [rbx+0x18]
  406c59:	mov    edx,DWORD PTR [rbx+0x20]
  406c5c:	xor    esi,esi
  406c5e:	call   403070 <memset@plt>
  406c63:	mov    rax,QWORD PTR [rbx+0x30]
  406c67:	mov    ecx,DWORD PTR [rax+0x8]
  406c6a:	mov    DWORD PTR [rbx+0x20],ecx
  406c6d:	mov    ecx,DWORD PTR [rax]
  406c6f:	mov    DWORD PTR [rbx+0x28],ecx
  406c72:	mov    edx,DWORD PTR [rax+0x4]
  406c75:	mov    rsi,rcx
  406c78:	add    rsi,QWORD PTR [rbx+0x68]
  406c7c:	mov    QWORD PTR [rbx+0x18],rsi
  406c80:	mov    esi,DWORD PTR [rbx+0x70]
  406c83:	sub    esi,ecx
  406c85:	cmp    esi,edx
  406c87:	cmova  esi,edx
  406c8a:	mov    DWORD PTR [rbx+0x24],esi
  406c8d:	movzx  ecx,WORD PTR [rbx+0xea]
  406c94:	cmp    WORD PTR [rbx+0xe8],cx
  406c9b:	jae    406ca4 <flatcc_builder_end_table@@Base+0x134>
  406c9d:	mov    WORD PTR [rbx+0xe8],cx
  406ca4:	movzx  ecx,WORD PTR [rax+0xc]
  406ca8:	mov    WORD PTR [rbx+0xea],cx
  406caf:	add    rax,0xffffffffffffffdc
  406cb3:	mov    QWORD PTR [rbx+0x30],rax
  406cb7:	dec    DWORD PTR [rbx+0x104]
  406cbd:	mov    r15d,r14d
  406cc0:	jmp    406cc5 <flatcc_builder_end_table@@Base+0x155>
  406cc2:	xor    r15d,r15d
  406cc5:	mov    eax,r15d
  406cc8:	add    rsp,0x10
  406ccc:	pop    rbx
  406ccd:	pop    r12
  406ccf:	pop    r14
  406cd1:	pop    r15
  406cd3:	pop    rbp
  406cd4:	ret    
  406cd5:	lea    rdi,[rip+0x4235]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406cdc:	lea    rsi,[rip+0x39ff]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406ce3:	lea    rcx,[rip+0x434f]        # 40b039 <flatcc_builder_padding_base@@Base+0xbe9>
  406cea:	mov    edx,0x525
  406cef:	call   403060 <__assert_fail@plt>
  406cf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406cfe:	xchg   ax,ax

0000000000406d00 <flatcc_builder_create_vector@@Base>:
  406d00:	push   rbp
  406d01:	push   rbx
  406d02:	sub    rsp,0x98
  406d09:	cmp    rdx,r9
  406d0c:	ja     406e36 <flatcc_builder_create_vector@@Base+0x136>
  406d12:	mov    rbx,rdi
  406d15:	cmp    r8w,0x4
  406d1a:	mov    eax,0x4
  406d1f:	cmova  eax,r8d
  406d23:	cmp    WORD PTR [rdi+0xe8],ax
  406d2a:	jae    406d33 <flatcc_builder_create_vector@@Base+0x33>
  406d2c:	mov    WORD PTR [rbx+0xe8],ax
  406d33:	imul   ecx,edx
  406d36:	mov    DWORD PTR [rsp+0x4],edx
  406d3a:	mov    ebp,DWORD PTR [rbx+0xf0]
  406d40:	mov    edx,ebp
  406d42:	sub    edx,ecx
  406d44:	movzx  eax,ax
  406d47:	dec    eax
  406d49:	and    eax,edx
  406d4b:	mov    QWORD PTR [rsp+0x8],0x4
  406d54:	lea    rdx,[rsp+0x4]
  406d59:	mov    QWORD PTR [rsp+0x18],rdx
  406d5e:	mov    QWORD PTR [rsp+0x20],0x4
  406d67:	mov    DWORD PTR [rsp+0x10],0x1
  406d6f:	test   ecx,ecx
  406d71:	je     406e06 <flatcc_builder_create_vector@@Base+0x106>
  406d77:	mov    ecx,ecx
  406d79:	lea    r8,[rcx+0x4]
  406d7d:	mov    QWORD PTR [rsp+0x8],r8
  406d82:	mov    QWORD PTR [rsp+0x28],rsi
  406d87:	mov    QWORD PTR [rsp+0x30],rcx
  406d8c:	mov    DWORD PTR [rsp+0x10],0x2
  406d94:	mov    edx,0x2
  406d99:	test   eax,eax
  406d9b:	je     406dc4 <flatcc_builder_create_vector@@Base+0xc4>
  406d9d:	mov    eax,eax
  406d9f:	add    r8,rax
  406da2:	mov    QWORD PTR [rsp+0x8],r8
  406da7:	mov    ecx,edx
  406da9:	shl    rcx,0x4
  406dad:	lea    rsi,[rip+0x369c]        # 40a450 <flatcc_builder_padding_base@@Base>
  406db4:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  406db9:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  406dbe:	inc    edx
  406dc0:	mov    DWORD PTR [rsp+0x10],edx
  406dc4:	cmp    r8,0x11
  406dc8:	setb   al
  406dcb:	lea    rcx,[r8-0x10]
  406dcf:	shr    rcx,0x20
  406dd3:	sete   cl
  406dd6:	test   r8d,r8d
  406dd9:	jle    406e17 <flatcc_builder_create_vector@@Base+0x117>
  406ddb:	or     al,cl
  406ddd:	je     406e17 <flatcc_builder_create_vector@@Base+0x117>
  406ddf:	sub    ebp,r8d
  406de2:	mov    rdi,QWORD PTR [rbx+0x38]
  406de6:	lea    rsi,[rsp+0x18]
  406deb:	mov    ecx,ebp
  406ded:	call   QWORD PTR [rbx+0x48]
  406df0:	test   eax,eax
  406df2:	jne    406e55 <flatcc_builder_create_vector@@Base+0x155>
  406df4:	mov    DWORD PTR [rbx+0xf0],ebp
  406dfa:	mov    eax,ebp
  406dfc:	add    rsp,0x98
  406e03:	pop    rbx
  406e04:	pop    rbp
  406e05:	ret    
  406e06:	mov    r8d,0x4
  406e0c:	mov    edx,0x1
  406e11:	test   eax,eax
  406e13:	jne    406d9d <flatcc_builder_create_vector@@Base+0x9d>
  406e15:	jmp    406dc4 <flatcc_builder_create_vector@@Base+0xc4>
  406e17:	lea    rdi,[rip+0x4a84]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406e1e:	lea    rsi,[rip+0x38bd]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406e25:	lea    rcx,[rip+0x4935]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406e2c:	mov    edx,0x287
  406e31:	call   403060 <__assert_fail@plt>
  406e36:	lea    rdi,[rip+0x423e]        # 40b07b <flatcc_builder_padding_base@@Base+0xc2b>
  406e3d:	lea    rsi,[rip+0x389e]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406e44:	lea    rcx,[rip+0x4243]        # 40b08e <flatcc_builder_padding_base@@Base+0xc3e>
  406e4b:	mov    edx,0x555
  406e50:	call   403060 <__assert_fail@plt>
  406e55:	lea    rdi,[rip+0x4a46]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406e5c:	lea    rsi,[rip+0x387f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406e63:	lea    rcx,[rip+0x48f7]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406e6a:	mov    edx,0x28b
  406e6f:	call   403060 <__assert_fail@plt>
  406e74:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e7e:	xchg   ax,ax

0000000000406e80 <flatcc_builder_end_vector@@Base>:
  406e80:	push   rbp
  406e81:	push   rbx
  406e82:	push   rax
  406e83:	mov    rax,QWORD PTR [rdi+0x30]
  406e87:	cmp    WORD PTR [rax+0xe],0x4
  406e8c:	jne    406f27 <flatcc_builder_end_vector@@Base+0xa7>
  406e92:	mov    rbx,rdi
  406e95:	mov    rsi,QWORD PTR [rdi+0x18]
  406e99:	mov    ecx,DWORD PTR [rax+0x10]
  406e9c:	mov    edx,DWORD PTR [rax+0x14]
  406e9f:	movzx  r8d,WORD PTR [rdi+0xea]
  406ea7:	mov    r9d,DWORD PTR [rax+0x18]
  406eab:	call   406d00 <flatcc_builder_create_vector@@Base>
  406eb0:	mov    ebp,eax
  406eb2:	test   eax,eax
  406eb4:	je     406f1e <flatcc_builder_end_vector@@Base+0x9e>
  406eb6:	mov    rdi,QWORD PTR [rbx+0x18]
  406eba:	mov    edx,DWORD PTR [rbx+0x20]
  406ebd:	xor    esi,esi
  406ebf:	call   403070 <memset@plt>
  406ec4:	mov    rax,QWORD PTR [rbx+0x30]
  406ec8:	mov    ecx,DWORD PTR [rax+0x8]
  406ecb:	mov    DWORD PTR [rbx+0x20],ecx
  406ece:	mov    ecx,DWORD PTR [rax]
  406ed0:	mov    DWORD PTR [rbx+0x28],ecx
  406ed3:	mov    edx,DWORD PTR [rax+0x4]
  406ed6:	mov    rsi,rcx
  406ed9:	add    rsi,QWORD PTR [rbx+0x68]
  406edd:	mov    QWORD PTR [rbx+0x18],rsi
  406ee1:	mov    esi,DWORD PTR [rbx+0x70]
  406ee4:	sub    esi,ecx
  406ee6:	cmp    esi,edx
  406ee8:	cmova  esi,edx
  406eeb:	mov    DWORD PTR [rbx+0x24],esi
  406eee:	movzx  ecx,WORD PTR [rbx+0xea]
  406ef5:	cmp    WORD PTR [rbx+0xe8],cx
  406efc:	jae    406f05 <flatcc_builder_end_vector@@Base+0x85>
  406efe:	mov    WORD PTR [rbx+0xe8],cx
  406f05:	movzx  ecx,WORD PTR [rax+0xc]
  406f09:	mov    WORD PTR [rbx+0xea],cx
  406f10:	add    rax,0xffffffffffffffdc
  406f14:	mov    QWORD PTR [rbx+0x30],rax
  406f18:	dec    DWORD PTR [rbx+0x104]
  406f1e:	mov    eax,ebp
  406f20:	add    rsp,0x8
  406f24:	pop    rbx
  406f25:	pop    rbp
  406f26:	ret    
  406f27:	lea    rdi,[rip+0x3af1]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  406f2e:	lea    rsi,[rip+0x37ad]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406f35:	lea    rcx,[rip+0x41c8]        # 40b104 <flatcc_builder_padding_base@@Base+0xcb4>
  406f3c:	mov    edx,0x578
  406f41:	call   403060 <__assert_fail@plt>
  406f46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406f50 <flatcc_builder_vector_count@@Base>:
  406f50:	mov    rax,QWORD PTR [rdi+0x30]
  406f54:	mov    eax,DWORD PTR [rax+0x14]
  406f57:	ret    
  406f58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406f60 <flatcc_builder_vector_edit@@Base>:
  406f60:	mov    rax,QWORD PTR [rdi+0x18]
  406f64:	ret    
  406f65:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f6f:	nop

0000000000406f70 <flatcc_builder_create_offset_vector_direct@@Base>:
  406f70:	xor    ecx,ecx
  406f72:	jmp    406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406f74:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f7e:	xchg   ax,ax
  406f80:	push   r14
  406f82:	push   rbx
  406f83:	sub    rsp,0x98
  406f8a:	mov    r10,rdx
  406f8d:	xor    ebx,ebx
  406f8f:	test   r10d,0xc0000000
  406f96:	jne    407109 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  406f9c:	mov    r14,rdi
  406f9f:	cmp    WORD PTR [rdi+0xe8],0x3
  406fa7:	ja     406fb3 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  406fa9:	mov    WORD PTR [r14+0xe8],0x4
  406fb3:	lea    r8d,[r10*4+0x0]
  406fbb:	mov    DWORD PTR [rsp+0x4],r10d
  406fc0:	mov    ebx,DWORD PTR [r14+0xf0]
  406fc7:	mov    r9d,ebx
  406fca:	and    r9d,0x3
  406fce:	mov    QWORD PTR [rsp+0x8],0x4
  406fd7:	lea    rdx,[rsp+0x4]
  406fdc:	mov    QWORD PTR [rsp+0x18],rdx
  406fe1:	mov    QWORD PTR [rsp+0x20],0x4
  406fea:	mov    DWORD PTR [rsp+0x10],0x1
  406ff2:	test   r8d,r8d
  406ff5:	je     407116 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  406ffb:	mov    edx,r8d
  406ffe:	lea    r8,[rdx+0x4]
  407002:	mov    QWORD PTR [rsp+0x8],r8
  407007:	mov    QWORD PTR [rsp+0x28],rsi
  40700c:	mov    QWORD PTR [rsp+0x30],rdx
  407011:	mov    DWORD PTR [rsp+0x10],0x2
  407019:	mov    edx,0x2
  40701e:	test   r9d,r9d
  407021:	je     407048 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  407023:	add    r8,r9
  407026:	mov    QWORD PTR [rsp+0x8],r8
  40702b:	mov    edi,edx
  40702d:	shl    rdi,0x4
  407031:	lea    rax,[rip+0x3418]        # 40a450 <flatcc_builder_padding_base@@Base>
  407038:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40703d:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  407042:	inc    edx
  407044:	mov    DWORD PTR [rsp+0x10],edx
  407048:	test   r10d,r10d
  40704b:	je     4070c5 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  40704d:	mov    edi,r8d
  407050:	sub    edi,ebx
  407052:	add    edi,0xfffffffc
  407055:	mov    r9d,r10d
  407058:	xor    ebx,ebx
  40705a:	jmp    40706b <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  40705c:	nop    DWORD PTR [rax+0x0]
  407060:	inc    rbx
  407063:	add    edi,0xfffffffc
  407066:	cmp    r9,rbx
  407069:	je     4070be <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  40706b:	mov    eax,DWORD PTR [rsi+rbx*4]
  40706e:	test   eax,eax
  407070:	je     407090 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  407072:	add    eax,edi
  407074:	mov    DWORD PTR [rsi+rbx*4],eax
  407077:	test   rcx,rcx
  40707a:	je     407060 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  40707c:	cmp    BYTE PTR [rcx+rbx*1],0x0
  407080:	jne    407060 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  407082:	jmp    40712f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  407087:	nop    WORD PTR [rax+rax*1+0x0]
  407090:	test   rcx,rcx
  407093:	je     40714e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  407099:	cmp    BYTE PTR [rcx+rbx*1],0x0
  40709d:	je     407060 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  40709f:	lea    rdi,[rip+0x4881]        # 40b927 <flatcc_builder_padding_base@@Base+0x14d7>
  4070a6:	lea    rsi,[rip+0x3635]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4070ad:	lea    rcx,[rip+0x47f0]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  4070b4:	mov    edx,0x5b5
  4070b9:	call   403060 <__assert_fail@plt>
  4070be:	mov    ebx,DWORD PTR [r14+0xf0]
  4070c5:	cmp    r8,0x11
  4070c9:	setb   al
  4070cc:	lea    rcx,[r8-0x10]
  4070d0:	shr    rcx,0x20
  4070d4:	sete   cl
  4070d7:	test   r8d,r8d
  4070da:	jle    40716d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4070e0:	or     al,cl
  4070e2:	je     40716d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4070e8:	sub    ebx,r8d
  4070eb:	mov    rdi,QWORD PTR [r14+0x38]
  4070ef:	lea    rsi,[rsp+0x18]
  4070f4:	mov    ecx,ebx
  4070f6:	call   QWORD PTR [r14+0x48]
  4070fa:	test   eax,eax
  4070fc:	jne    40718c <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  407102:	mov    DWORD PTR [r14+0xf0],ebx
  407109:	mov    eax,ebx
  40710b:	add    rsp,0x98
  407112:	pop    rbx
  407113:	pop    r14
  407115:	ret    
  407116:	mov    r8d,0x4
  40711c:	mov    edx,0x1
  407121:	test   r9d,r9d
  407124:	jne    407023 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  40712a:	jmp    407048 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  40712f:	lea    rdi,[rip+0x4760]        # 40b896 <flatcc_builder_padding_base@@Base+0x1446>
  407136:	lea    rsi,[rip+0x35a5]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40713d:	lea    rcx,[rip+0x4760]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  407144:	mov    edx,0x5b1
  407149:	call   403060 <__assert_fail@plt>
  40714e:	lea    rdi,[rip+0x474d]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407155:	lea    rsi,[rip+0x3586]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40715c:	lea    rcx,[rip+0x4741]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  407163:	mov    edx,0x5b7
  407168:	call   403060 <__assert_fail@plt>
  40716d:	lea    rdi,[rip+0x472e]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407174:	lea    rsi,[rip+0x3567]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40717b:	lea    rcx,[rip+0x45df]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  407182:	mov    edx,0x287
  407187:	call   403060 <__assert_fail@plt>
  40718c:	lea    rdi,[rip+0x470f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407193:	lea    rsi,[rip+0x3548]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40719a:	lea    rcx,[rip+0x45c0]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4071a1:	mov    edx,0x28b
  4071a6:	call   403060 <__assert_fail@plt>
  4071ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004071b0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  4071b0:	push   rbp
  4071b1:	push   rbx
  4071b2:	push   rax
  4071b3:	mov    rax,QWORD PTR [rdi+0x30]
  4071b7:	cmp    WORD PTR [rax+0xe],0x5
  4071bc:	jne    40724b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  4071c2:	mov    rcx,rsi
  4071c5:	mov    rbx,rdi
  4071c8:	mov    rsi,QWORD PTR [rdi+0x18]
  4071cc:	mov    edx,DWORD PTR [rax+0x14]
  4071cf:	call   406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4071d4:	mov    ebp,eax
  4071d6:	test   eax,eax
  4071d8:	je     407242 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  4071da:	mov    rdi,QWORD PTR [rbx+0x18]
  4071de:	mov    edx,DWORD PTR [rbx+0x20]
  4071e1:	xor    esi,esi
  4071e3:	call   403070 <memset@plt>
  4071e8:	mov    rax,QWORD PTR [rbx+0x30]
  4071ec:	mov    ecx,DWORD PTR [rax+0x8]
  4071ef:	mov    DWORD PTR [rbx+0x20],ecx
  4071f2:	mov    ecx,DWORD PTR [rax]
  4071f4:	mov    DWORD PTR [rbx+0x28],ecx
  4071f7:	mov    edx,DWORD PTR [rax+0x4]
  4071fa:	mov    rsi,rcx
  4071fd:	add    rsi,QWORD PTR [rbx+0x68]
  407201:	mov    QWORD PTR [rbx+0x18],rsi
  407205:	mov    esi,DWORD PTR [rbx+0x70]
  407208:	sub    esi,ecx
  40720a:	cmp    esi,edx
  40720c:	cmova  esi,edx
  40720f:	mov    DWORD PTR [rbx+0x24],esi
  407212:	movzx  ecx,WORD PTR [rbx+0xea]
  407219:	cmp    WORD PTR [rbx+0xe8],cx
  407220:	jae    407229 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  407222:	mov    WORD PTR [rbx+0xe8],cx
  407229:	movzx  ecx,WORD PTR [rax+0xc]
  40722d:	mov    WORD PTR [rbx+0xea],cx
  407234:	add    rax,0xffffffffffffffdc
  407238:	mov    QWORD PTR [rbx+0x30],rax
  40723c:	dec    DWORD PTR [rbx+0x104]
  407242:	mov    eax,ebp
  407244:	add    rsp,0x8
  407248:	pop    rbx
  407249:	pop    rbp
  40724a:	ret    
  40724b:	lea    rdi,[rip+0x38c6]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  407252:	lea    rsi,[rip+0x3489]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407259:	lea    rcx,[rip+0x3f31]        # 40b191 <flatcc_builder_padding_base@@Base+0xd41>
  407260:	mov    edx,0x5d5
  407265:	call   403060 <__assert_fail@plt>
  40726a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407270 <flatcc_builder_offset_vector_edit@@Base>:
  407270:	mov    rax,QWORD PTR [rdi+0x18]
  407274:	ret    
  407275:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40727f:	nop

0000000000407280 <flatcc_builder_offset_vector_count@@Base>:
  407280:	mov    rax,QWORD PTR [rdi+0x30]
  407284:	mov    eax,DWORD PTR [rax+0x14]
  407287:	ret    
  407288:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407290 <flatcc_builder_table_add_union@@Base>:
  407290:	push   rbp
  407291:	push   r15
  407293:	push   r14
  407295:	push   rbx
  407296:	push   rax
  407297:	mov    rax,QWORD PTR [rdi+0x30]
  40729b:	cmp    WORD PTR [rax+0xe],0x3
  4072a0:	jne    4072fe <flatcc_builder_table_add_union@@Base+0x6e>
  4072a2:	mov    r14,rdx
  4072a5:	mov    ebp,esi
  4072a7:	mov    r15,rdi
  4072aa:	mov    rbx,rdx
  4072ad:	shr    rbx,0x20
  4072b1:	test   r14b,r14b
  4072b4:	jne    4072ba <flatcc_builder_table_add_union@@Base+0x2a>
  4072b6:	test   ebx,ebx
  4072b8:	jne    40731d <flatcc_builder_table_add_union@@Base+0x8d>
  4072ba:	test   ebx,ebx
  4072bc:	je     4072d3 <flatcc_builder_table_add_union@@Base+0x43>
  4072be:	mov    rdi,r15
  4072c1:	mov    esi,ebp
  4072c3:	call   407380 <flatcc_builder_table_add_offset@@Base>
  4072c8:	test   rax,rax
  4072cb:	je     40735b <flatcc_builder_table_add_union@@Base+0xcb>
  4072d1:	mov    DWORD PTR [rax],ebx
  4072d3:	dec    ebp
  4072d5:	mov    edx,0x1
  4072da:	mov    rdi,r15
  4072dd:	mov    esi,ebp
  4072df:	mov    ecx,0x1
  4072e4:	call   4074e0 <flatcc_builder_table_add@@Base>
  4072e9:	test   rax,rax
  4072ec:	je     40733c <flatcc_builder_table_add_union@@Base+0xac>
  4072ee:	mov    BYTE PTR [rax],r14b
  4072f1:	xor    eax,eax
  4072f3:	add    rsp,0x8
  4072f7:	pop    rbx
  4072f8:	pop    r14
  4072fa:	pop    r15
  4072fc:	pop    rbp
  4072fd:	ret    
  4072fe:	lea    rdi,[rip+0x3c0c]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  407305:	lea    rsi,[rip+0x33d6]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40730c:	lea    rcx,[rip+0x3ef0]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407313:	mov    edx,0x5ee
  407318:	call   403060 <__assert_fail@plt>
  40731d:	lea    rdi,[rip+0x3f37]        # 40b25b <flatcc_builder_padding_base@@Base+0xe0b>
  407324:	lea    rsi,[rip+0x33b7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40732b:	lea    rcx,[rip+0x3ed1]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407332:	mov    edx,0x5ef
  407337:	call   403060 <__assert_fail@plt>
  40733c:	lea    rdi,[rip+0x3f44]        # 40b287 <flatcc_builder_padding_base@@Base+0xe37>
  407343:	lea    rsi,[rip+0x3398]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40734a:	lea    rcx,[rip+0x3eb2]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407351:	mov    edx,0x5f6
  407356:	call   403060 <__assert_fail@plt>
  40735b:	lea    rdi,[rip+0x3f1b]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  407362:	lea    rsi,[rip+0x3379]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407369:	lea    rcx,[rip+0x3e93]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407370:	mov    edx,0x5f2
  407375:	call   403060 <__assert_fail@plt>
  40737a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407380 <flatcc_builder_table_add_offset@@Base>:
  407380:	push   rbp
  407381:	push   r15
  407383:	push   r14
  407385:	push   rbx
  407386:	push   rax
  407387:	mov    rax,QWORD PTR [rdi+0x30]
  40738b:	cmp    WORD PTR [rax+0xe],0x3
  407390:	jne    40747e <flatcc_builder_table_add_offset@@Base+0xfe>
  407396:	mov    r14d,esi
  407399:	cmp    esi,0x7ffd
  40739f:	jae    40749d <flatcc_builder_table_add_offset@@Base+0x11d>
  4073a5:	mov    rbx,rdi
  4073a8:	mov    rax,QWORD PTR [rdi+0x8]
  4073ac:	movsxd rcx,r14d
  4073af:	cmp    WORD PTR [rax+rcx*2],0x0
  4073b4:	jne    4074bc <flatcc_builder_table_add_offset@@Base+0x13c>
  4073ba:	mov    ecx,DWORD PTR [rbx+0x14]
  4073bd:	xor    ecx,r14d
  4073c0:	imul   ecx,ecx,0x9e3779b1
  4073c6:	xor    ecx,0x4
  4073c9:	imul   ecx,ecx,0x9e3779b1
  4073cf:	mov    DWORD PTR [rbx+0x14],ecx
  4073d2:	mov    ebp,DWORD PTR [rbx+0x20]
  4073d5:	mov    ecx,DWORD PTR [rbx+0x24]
  4073d8:	add    ebp,0x3
  4073db:	and    ebp,0xfffffffc
  4073de:	lea    r15,[rbp+0x4]
  4073e2:	mov    DWORD PTR [rbx+0x20],r15d
  4073e6:	cmp    ecx,r15d
  4073e9:	jae    407448 <flatcc_builder_table_add_offset@@Base+0xc8>
  4073eb:	mov    eax,r15d
  4073ee:	and    eax,0xfffffffc
  4073f1:	lea    rsi,[rbx+0x68]
  4073f5:	mov    rdi,QWORD PTR [rbx+0x40]
  4073f9:	mov    edx,DWORD PTR [rbx+0x28]
  4073fc:	add    rdx,rax
  4073ff:	mov    ecx,0x1
  407404:	mov    r8d,0x1
  40740a:	call   QWORD PTR [rbx+0x50]
  40740d:	test   eax,eax
  40740f:	je     407415 <flatcc_builder_table_add_offset@@Base+0x95>
  407411:	xor    ebp,ebp
  407413:	jmp    407470 <flatcc_builder_table_add_offset@@Base+0xf0>
  407415:	mov    eax,DWORD PTR [rbx+0x28]
  407418:	mov    rcx,rax
  40741b:	add    rcx,QWORD PTR [rbx+0x68]
  40741f:	mov    QWORD PTR [rbx+0x18],rcx
  407423:	mov    ecx,DWORD PTR [rbx+0x70]
  407426:	sub    ecx,eax
  407428:	cmp    ecx,0xfffc
  40742e:	mov    eax,0xfffc
  407433:	cmovb  eax,ecx
  407436:	mov    DWORD PTR [rbx+0x24],eax
  407439:	mov    rax,QWORD PTR [rbx+0x30]
  40743d:	mov    DWORD PTR [rax+0x4],0xfffc
  407444:	mov    rax,QWORD PTR [rbx+0x8]
  407448:	movzx  ecx,r14w
  40744c:	mov    WORD PTR [rax+rcx*2],r15w
  407451:	cmp    WORD PTR [rbx+0x10],cx
  407455:	ja     40745f <flatcc_builder_table_add_offset@@Base+0xdf>
  407457:	inc    r14d
  40745a:	mov    WORD PTR [rbx+0x10],r14w
  40745f:	mov    rax,QWORD PTR [rbx]
  407462:	lea    rcx,[rax+0x2]
  407466:	mov    QWORD PTR [rbx],rcx
  407469:	mov    WORD PTR [rax],bp
  40746c:	add    rbp,QWORD PTR [rbx+0x18]
  407470:	mov    rax,rbp
  407473:	add    rsp,0x8
  407477:	pop    rbx
  407478:	pop    r14
  40747a:	pop    r15
  40747c:	pop    rbp
  40747d:	ret    
  40747e:	lea    rdi,[rip+0x3a8c]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  407485:	lea    rsi,[rip+0x3256]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40748c:	lea    rcx,[rip+0x4172]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  407493:	mov    edx,0x713
  407498:	call   403060 <__assert_fail@plt>
  40749d:	lea    rdi,[rip+0x40e1]        # 40b585 <flatcc_builder_padding_base@@Base+0x1135>
  4074a4:	lea    rsi,[rip+0x3237]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4074ab:	lea    rcx,[rip+0x4153]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  4074b2:	mov    edx,0x714
  4074b7:	call   403060 <__assert_fail@plt>
  4074bc:	lea    rdi,[rip+0x43df]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4074c3:	lea    rsi,[rip+0x3218]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4074ca:	lea    rcx,[rip+0x4134]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  4074d1:	mov    edx,0x71b
  4074d6:	call   403060 <__assert_fail@plt>
  4074db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004074e0 <flatcc_builder_table_add@@Base>:
  4074e0:	push   rbp
  4074e1:	push   r14
  4074e3:	push   rbx
  4074e4:	mov    rax,QWORD PTR [rdi+0x30]
  4074e8:	cmp    WORD PTR [rax+0xe],0x3
  4074ed:	jne    4075d8 <flatcc_builder_table_add@@Base+0xf8>
  4074f3:	mov    r14d,esi
  4074f6:	cmp    esi,0x7ffd
  4074fc:	jae    4075f7 <flatcc_builder_table_add@@Base+0x117>
  407502:	mov    rbx,rdi
  407505:	cmp    WORD PTR [rdi+0xea],cx
  40750c:	jae    407515 <flatcc_builder_table_add@@Base+0x35>
  40750e:	mov    WORD PTR [rbx+0xea],cx
  407515:	mov    rsi,QWORD PTR [rbx+0x8]
  407519:	movsxd rax,r14d
  40751c:	cmp    WORD PTR [rsi+rax*2],0x0
  407521:	jne    407616 <flatcc_builder_table_add@@Base+0x136>
  407527:	mov    eax,DWORD PTR [rbx+0x14]
  40752a:	xor    eax,r14d
  40752d:	imul   eax,eax,0x9e3779b1
  407533:	xor    eax,edx
  407535:	imul   eax,eax,0x9e3779b1
  40753b:	mov    DWORD PTR [rbx+0x14],eax
  40753e:	mov    eax,DWORD PTR [rbx+0x20]
  407541:	movzx  ebp,cx
  407544:	lea    eax,[rax+rbp*1]
  407547:	add    eax,0xffffffff
  40754a:	neg    ebp
  40754c:	and    ebp,eax
  40754e:	add    edx,ebp
  407550:	mov    DWORD PTR [rbx+0x20],edx
  407553:	cmp    edx,DWORD PTR [rbx+0x24]
  407556:	jb     4075b4 <flatcc_builder_table_add@@Base+0xd4>
  407558:	inc    edx
  40755a:	lea    rsi,[rbx+0x68]
  40755e:	mov    rdi,QWORD PTR [rbx+0x40]
  407562:	mov    eax,DWORD PTR [rbx+0x28]
  407565:	add    rax,rdx
  407568:	mov    rdx,rax
  40756b:	mov    ecx,0x1
  407570:	mov    r8d,0x1
  407576:	call   QWORD PTR [rbx+0x50]
  407579:	test   eax,eax
  40757b:	je     407581 <flatcc_builder_table_add@@Base+0xa1>
  40757d:	xor    eax,eax
  40757f:	jmp    4075d3 <flatcc_builder_table_add@@Base+0xf3>
  407581:	mov    eax,DWORD PTR [rbx+0x28]
  407584:	mov    rcx,rax
  407587:	add    rcx,QWORD PTR [rbx+0x68]
  40758b:	mov    QWORD PTR [rbx+0x18],rcx
  40758f:	mov    ecx,DWORD PTR [rbx+0x70]
  407592:	sub    ecx,eax
  407594:	cmp    ecx,0xfffc
  40759a:	mov    eax,0xfffc
  40759f:	cmovb  eax,ecx
  4075a2:	mov    DWORD PTR [rbx+0x24],eax
  4075a5:	mov    rax,QWORD PTR [rbx+0x30]
  4075a9:	mov    DWORD PTR [rax+0x4],0xfffc
  4075b0:	mov    rsi,QWORD PTR [rbx+0x8]
  4075b4:	mov    eax,ebp
  4075b6:	add    ebp,0x4
  4075b9:	movzx  ecx,r14w
  4075bd:	mov    WORD PTR [rsi+rcx*2],bp
  4075c1:	cmp    WORD PTR [rbx+0x10],cx
  4075c5:	ja     4075cf <flatcc_builder_table_add@@Base+0xef>
  4075c7:	inc    r14d
  4075ca:	mov    WORD PTR [rbx+0x10],r14w
  4075cf:	add    rax,QWORD PTR [rbx+0x18]
  4075d3:	pop    rbx
  4075d4:	pop    r14
  4075d6:	pop    rbp
  4075d7:	ret    
  4075d8:	lea    rdi,[rip+0x3932]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  4075df:	lea    rsi,[rip+0x30fc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4075e6:	lea    rcx,[rip+0x3f4e]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  4075ed:	mov    edx,0x6ed
  4075f2:	call   403060 <__assert_fail@plt>
  4075f7:	lea    rdi,[rip+0x3f87]        # 40b585 <flatcc_builder_padding_base@@Base+0x1135>
  4075fe:	lea    rsi,[rip+0x30dd]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407605:	lea    rcx,[rip+0x3f2f]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  40760c:	mov    edx,0x6ee
  407611:	call   403060 <__assert_fail@plt>
  407616:	lea    rdi,[rip+0x4285]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  40761d:	lea    rsi,[rip+0x30be]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407624:	lea    rcx,[rip+0x3f10]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  40762b:	mov    edx,0x6f8
  407630:	call   403060 <__assert_fail@plt>
  407635:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40763f:	nop

0000000000407640 <flatcc_builder_table_add_union_vector@@Base>:
  407640:	push   r15
  407642:	push   r14
  407644:	push   r12
  407646:	push   rbx
  407647:	push   rax
  407648:	mov    rax,QWORD PTR [rdi+0x30]
  40764c:	cmp    WORD PTR [rax+0xe],0x3
  407651:	jne    4076a7 <flatcc_builder_table_add_union_vector@@Base+0x67>
  407653:	mov    rbx,rdx
  407656:	mov    r12,rdx
  407659:	shr    r12,0x20
  40765d:	test   ebx,ebx
  40765f:	setne  al
  407662:	test   r12d,r12d
  407665:	sete   cl
  407668:	xor    cl,al
  40766a:	je     4076c6 <flatcc_builder_table_add_union_vector@@Base+0x86>
  40766c:	test   ebx,ebx
  40766e:	je     407699 <flatcc_builder_table_add_union_vector@@Base+0x59>
  407670:	mov    r14d,esi
  407673:	mov    r15,rdi
  407676:	lea    esi,[r14-0x1]
  40767a:	call   407380 <flatcc_builder_table_add_offset@@Base>
  40767f:	test   rax,rax
  407682:	je     4076e5 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  407684:	mov    DWORD PTR [rax],ebx
  407686:	mov    rdi,r15
  407689:	mov    esi,r14d
  40768c:	call   407380 <flatcc_builder_table_add_offset@@Base>
  407691:	test   rax,rax
  407694:	je     407704 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  407696:	mov    DWORD PTR [rax],r12d
  407699:	xor    eax,eax
  40769b:	add    rsp,0x8
  40769f:	pop    rbx
  4076a0:	pop    r12
  4076a2:	pop    r14
  4076a4:	pop    r15
  4076a6:	ret    
  4076a7:	lea    rdi,[rip+0x3863]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  4076ae:	lea    rsi,[rip+0x302d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4076b5:	lea    rcx,[rip+0x3bd7]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  4076bc:	mov    edx,0x600
  4076c1:	call   403060 <__assert_fail@plt>
  4076c6:	lea    rdi,[rip+0x3c29]        # 40b2f6 <flatcc_builder_padding_base@@Base+0xea6>
  4076cd:	lea    rsi,[rip+0x300e]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4076d4:	lea    rcx,[rip+0x3bb8]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  4076db:	mov    edx,0x601
  4076e0:	call   403060 <__assert_fail@plt>
  4076e5:	lea    rdi,[rip+0x3b91]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  4076ec:	lea    rsi,[rip+0x2fef]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4076f3:	lea    rcx,[rip+0x3b99]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  4076fa:	mov    edx,0x604
  4076ff:	call   403060 <__assert_fail@plt>
  407704:	lea    rdi,[rip+0x3b72]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  40770b:	lea    rsi,[rip+0x2fd0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407712:	lea    rcx,[rip+0x3b7a]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  407719:	mov    edx,0x608
  40771e:	call   403060 <__assert_fail@plt>
  407723:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40772d:	nop    DWORD PTR [rax]

0000000000407730 <flatcc_builder_create_union_vector@@Base>:
  407730:	push   r15
  407732:	push   r14
  407734:	push   r13
  407736:	push   r12
  407738:	push   rbx
  407739:	mov    r14,rdx
  40773c:	mov    r15,rsi
  40773f:	mov    rbx,rdi
  407742:	mov    esi,0x4
  407747:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  40774c:	test   eax,eax
  40774e:	je     407760 <flatcc_builder_create_union_vector@@Base+0x30>
  407750:	xor    r14d,r14d
  407753:	mov    rax,r14
  407756:	pop    rbx
  407757:	pop    r12
  407759:	pop    r13
  40775b:	pop    r14
  40775d:	pop    r15
  40775f:	ret    
  407760:	mov    rax,QWORD PTR [rbx+0x30]
  407764:	mov    DWORD PTR [rax+0x10],0x4
  40776b:	mov    rax,QWORD PTR [rbx+0x30]
  40776f:	mov    DWORD PTR [rax+0x14],0x0
  407776:	mov    rax,QWORD PTR [rbx+0x30]
  40777a:	mov    WORD PTR [rax+0xe],0x5
  407780:	mov    ecx,DWORD PTR [rbx+0x28]
  407783:	mov    edx,DWORD PTR [rbx+0x70]
  407786:	sub    edx,ecx
  407788:	add    rcx,QWORD PTR [rbx+0x68]
  40778c:	mov    QWORD PTR [rbx+0x18],rcx
  407790:	cmp    edx,0xfffffffc
  407793:	mov    ecx,0xfffffffc
  407798:	cmovb  ecx,edx
  40779b:	mov    DWORD PTR [rbx+0x24],ecx
  40779e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4077a5:	mov    ecx,DWORD PTR [rax+0x14]
  4077a8:	add    ecx,r14d
  4077ab:	jb     407a18 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4077b1:	cmp    ecx,0x40000000
  4077b7:	jae    407a18 <flatcc_builder_create_union_vector@@Base+0x2e8>
  4077bd:	mov    DWORD PTR [rax+0x14],ecx
  4077c0:	mov    r12d,DWORD PTR [rbx+0x20]
  4077c4:	mov    eax,DWORD PTR [rbx+0x24]
  4077c7:	lea    ecx,[r12+r14*4]
  4077cb:	mov    DWORD PTR [rbx+0x20],ecx
  4077ce:	cmp    ecx,eax
  4077d0:	jae    4077e0 <flatcc_builder_create_union_vector@@Base+0xb0>
  4077d2:	mov    rsi,QWORD PTR [rbx+0x18]
  4077d6:	add    r12,rsi
  4077d9:	jne    40783b <flatcc_builder_create_union_vector@@Base+0x10b>
  4077db:	jmp    407750 <flatcc_builder_create_union_vector@@Base+0x20>
  4077e0:	inc    ecx
  4077e2:	lea    rsi,[rbx+0x68]
  4077e6:	mov    rdi,QWORD PTR [rbx+0x40]
  4077ea:	mov    edx,DWORD PTR [rbx+0x28]
  4077ed:	add    rdx,rcx
  4077f0:	mov    ecx,0x1
  4077f5:	mov    r8d,0x1
  4077fb:	call   QWORD PTR [rbx+0x50]
  4077fe:	test   eax,eax
  407800:	jne    407750 <flatcc_builder_create_union_vector@@Base+0x20>
  407806:	mov    eax,DWORD PTR [rbx+0x28]
  407809:	mov    rsi,rax
  40780c:	add    rsi,QWORD PTR [rbx+0x68]
  407810:	mov    QWORD PTR [rbx+0x18],rsi
  407814:	mov    ecx,DWORD PTR [rbx+0x70]
  407817:	sub    ecx,eax
  407819:	cmp    ecx,0xfffffffc
  40781c:	mov    eax,0xfffffffc
  407821:	cmovb  eax,ecx
  407824:	mov    DWORD PTR [rbx+0x24],eax
  407827:	mov    rcx,QWORD PTR [rbx+0x30]
  40782b:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407832:	add    r12,rsi
  407835:	je     407750 <flatcc_builder_create_union_vector@@Base+0x20>
  40783b:	mov    r13d,DWORD PTR [rbx+0x20]
  40783f:	lea    ecx,[r14+r13*1]
  407843:	mov    DWORD PTR [rbx+0x20],ecx
  407846:	cmp    ecx,eax
  407848:	jb     40789c <flatcc_builder_create_union_vector@@Base+0x16c>
  40784a:	inc    ecx
  40784c:	lea    rsi,[rbx+0x68]
  407850:	mov    rdi,QWORD PTR [rbx+0x40]
  407854:	mov    edx,DWORD PTR [rbx+0x28]
  407857:	add    rdx,rcx
  40785a:	mov    ecx,0x1
  40785f:	mov    r8d,0x1
  407865:	call   QWORD PTR [rbx+0x50]
  407868:	test   eax,eax
  40786a:	jne    407750 <flatcc_builder_create_union_vector@@Base+0x20>
  407870:	mov    eax,DWORD PTR [rbx+0x28]
  407873:	mov    rsi,rax
  407876:	add    rsi,QWORD PTR [rbx+0x68]
  40787a:	mov    QWORD PTR [rbx+0x18],rsi
  40787e:	mov    ecx,DWORD PTR [rbx+0x70]
  407881:	sub    ecx,eax
  407883:	cmp    ecx,0xfffffffc
  407886:	mov    eax,0xfffffffc
  40788b:	cmovb  eax,ecx
  40788e:	mov    DWORD PTR [rbx+0x24],eax
  407891:	mov    rax,QWORD PTR [rbx+0x30]
  407895:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40789c:	mov    r12,rsi
  40789f:	add    r12,r13
  4078a2:	je     407750 <flatcc_builder_create_union_vector@@Base+0x20>
  4078a8:	test   r14,r14
  4078ab:	je     407968 <flatcc_builder_create_union_vector@@Base+0x238>
  4078b1:	lea    rcx,[r14-0x1]
  4078b5:	mov    r8d,r14d
  4078b8:	and    r8d,0x3
  4078bc:	cmp    rcx,0x3
  4078c0:	jae    4078ce <flatcc_builder_create_union_vector@@Base+0x19e>
  4078c2:	xor    ecx,ecx
  4078c4:	test   r8,r8
  4078c7:	jne    407937 <flatcc_builder_create_union_vector@@Base+0x207>
  4078c9:	jmp    407968 <flatcc_builder_create_union_vector@@Base+0x238>
  4078ce:	mov    rdx,r14
  4078d1:	sub    rdx,r8
  4078d4:	lea    rdi,[rsi+r13*1]
  4078d8:	add    rdi,0x3
  4078dc:	xor    ecx,ecx
  4078de:	xchg   ax,ax
  4078e0:	movzx  eax,BYTE PTR [r15+rcx*8]
  4078e5:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  4078e9:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  4078ee:	mov    DWORD PTR [rsi+rcx*4],eax
  4078f1:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  4078f7:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  4078fb:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407900:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407904:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40790a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40790e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407913:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407917:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40791d:	mov    BYTE PTR [rdi+rcx*1],al
  407920:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407925:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407929:	add    rcx,0x4
  40792d:	cmp    rdx,rcx
  407930:	jne    4078e0 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407932:	test   r8,r8
  407935:	je     407968 <flatcc_builder_create_union_vector@@Base+0x238>
  407937:	lea    rdx,[rsi+rcx*4]
  40793b:	lea    rdi,[r15+rcx*8]
  40793f:	add    rdi,0x4
  407943:	add    r13,rcx
  407946:	add    r13,rsi
  407949:	xor    ecx,ecx
  40794b:	nop    DWORD PTR [rax+rax*1+0x0]
  407950:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407955:	mov    BYTE PTR [r13+rcx*1+0x0],al
  40795a:	mov    eax,DWORD PTR [rdi+rcx*8]
  40795d:	mov    DWORD PTR [rdx+rcx*4],eax
  407960:	inc    rcx
  407963:	cmp    r8,rcx
  407966:	jne    407950 <flatcc_builder_create_union_vector@@Base+0x220>
  407968:	mov    rdi,rbx
  40796b:	mov    rdx,r14
  40796e:	mov    rcx,r12
  407971:	call   406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407976:	mov    r15d,eax
  407979:	test   eax,eax
  40797b:	je     4079a1 <flatcc_builder_create_union_vector@@Base+0x271>
  40797d:	mov    ecx,0x1
  407982:	mov    r9d,0xffffffff
  407988:	mov    rdi,rbx
  40798b:	mov    rsi,r12
  40798e:	mov    rdx,r14
  407991:	mov    r8d,0x1
  407997:	call   406d00 <flatcc_builder_create_vector@@Base>
  40799c:	mov    r14d,eax
  40799f:	jmp    4079a4 <flatcc_builder_create_union_vector@@Base+0x274>
  4079a1:	xor    r14d,r14d
  4079a4:	shl    r15,0x20
  4079a8:	mov    rdi,QWORD PTR [rbx+0x18]
  4079ac:	mov    edx,DWORD PTR [rbx+0x20]
  4079af:	xor    esi,esi
  4079b1:	call   403070 <memset@plt>
  4079b6:	mov    rax,QWORD PTR [rbx+0x30]
  4079ba:	mov    ecx,DWORD PTR [rax+0x8]
  4079bd:	mov    DWORD PTR [rbx+0x20],ecx
  4079c0:	mov    ecx,DWORD PTR [rax]
  4079c2:	mov    DWORD PTR [rbx+0x28],ecx
  4079c5:	mov    edx,DWORD PTR [rax+0x4]
  4079c8:	mov    rsi,rcx
  4079cb:	add    rsi,QWORD PTR [rbx+0x68]
  4079cf:	mov    QWORD PTR [rbx+0x18],rsi
  4079d3:	mov    esi,DWORD PTR [rbx+0x70]
  4079d6:	sub    esi,ecx
  4079d8:	cmp    esi,edx
  4079da:	cmova  esi,edx
  4079dd:	mov    DWORD PTR [rbx+0x24],esi
  4079e0:	movzx  ecx,WORD PTR [rbx+0xea]
  4079e7:	cmp    WORD PTR [rbx+0xe8],cx
  4079ee:	jae    4079f7 <flatcc_builder_create_union_vector@@Base+0x2c7>
  4079f0:	mov    WORD PTR [rbx+0xe8],cx
  4079f7:	or     r14,r15
  4079fa:	movzx  ecx,WORD PTR [rax+0xc]
  4079fe:	mov    WORD PTR [rbx+0xea],cx
  407a05:	add    rax,0xffffffffffffffdc
  407a09:	mov    QWORD PTR [rbx+0x30],rax
  407a0d:	dec    DWORD PTR [rbx+0x104]
  407a13:	jmp    407753 <flatcc_builder_create_union_vector@@Base+0x23>
  407a18:	lea    rdi,[rip+0x3d8c]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  407a1f:	lea    rsi,[rip+0x2cbc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407a26:	lea    rcx,[rip+0x3d99]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  407a2d:	mov    edx,0x37c
  407a32:	call   403060 <__assert_fail@plt>
  407a37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a40 <flatcc_builder_create_union_vector_direct@@Base>:
  407a40:	push   r15
  407a42:	push   r14
  407a44:	push   r12
  407a46:	push   rbx
  407a47:	push   rax
  407a48:	mov    r14,rcx
  407a4b:	mov    r15,rsi
  407a4e:	mov    r12,rdi
  407a51:	mov    rsi,rdx
  407a54:	mov    rdx,rcx
  407a57:	mov    rcx,r15
  407a5a:	call   406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407a5f:	mov    ebx,eax
  407a61:	test   eax,eax
  407a63:	je     407a88 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407a65:	mov    ecx,0x1
  407a6a:	mov    r9d,0xffffffff
  407a70:	mov    rdi,r12
  407a73:	mov    rsi,r15
  407a76:	mov    rdx,r14
  407a79:	mov    r8d,0x1
  407a7f:	call   406d00 <flatcc_builder_create_vector@@Base>
  407a84:	mov    eax,eax
  407a86:	jmp    407a8a <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  407a88:	xor    eax,eax
  407a8a:	shl    rbx,0x20
  407a8e:	or     rbx,rax
  407a91:	mov    rax,rbx
  407a94:	add    rsp,0x8
  407a98:	pop    rbx
  407a99:	pop    r12
  407a9b:	pop    r14
  407a9d:	pop    r15
  407a9f:	ret    

0000000000407aa0 <flatcc_builder_start_union_vector@@Base>:
  407aa0:	push   rbx
  407aa1:	mov    rbx,rdi
  407aa4:	mov    esi,0x4
  407aa9:	call   404fa0 <flatcc_builder_start_buffer@@Base+0xe0>
  407aae:	mov    ecx,eax
  407ab0:	mov    eax,0xffffffff
  407ab5:	test   ecx,ecx
  407ab7:	je     407abb <flatcc_builder_start_union_vector@@Base+0x1b>
  407ab9:	pop    rbx
  407aba:	ret    
  407abb:	mov    rax,QWORD PTR [rbx+0x30]
  407abf:	mov    DWORD PTR [rax+0x10],0x8
  407ac6:	mov    rax,QWORD PTR [rbx+0x30]
  407aca:	mov    DWORD PTR [rax+0x14],0x0
  407ad1:	mov    rax,QWORD PTR [rbx+0x30]
  407ad5:	mov    WORD PTR [rax+0xe],0x7
  407adb:	mov    ecx,DWORD PTR [rbx+0x28]
  407ade:	mov    edx,DWORD PTR [rbx+0x70]
  407ae1:	sub    edx,ecx
  407ae3:	add    rcx,QWORD PTR [rbx+0x68]
  407ae7:	mov    QWORD PTR [rbx+0x18],rcx
  407aeb:	cmp    edx,0xfffffffc
  407aee:	mov    ecx,0xfffffffc
  407af3:	cmovb  ecx,edx
  407af6:	mov    DWORD PTR [rbx+0x24],ecx
  407af9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407b00:	xor    eax,eax
  407b02:	pop    rbx
  407b03:	ret    
  407b04:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b0e:	xchg   ax,ax

0000000000407b10 <flatcc_builder_end_union_vector@@Base>:
  407b10:	push   rbp
  407b11:	push   r15
  407b13:	push   r14
  407b15:	push   r13
  407b17:	push   r12
  407b19:	push   rbx
  407b1a:	push   rax
  407b1b:	mov    rax,QWORD PTR [rdi+0x30]
  407b1f:	cmp    WORD PTR [rax+0xe],0x7
  407b24:	jne    407f14 <flatcc_builder_end_union_vector@@Base+0x404>
  407b2a:	mov    r13,rdi
  407b2d:	mov    r14d,DWORD PTR [rax+0x14]
  407b31:	lea    eax,[r14+r14*4]
  407b35:	mov    r12d,DWORD PTR [rdi+0x20]
  407b39:	add    eax,r12d
  407b3c:	mov    DWORD PTR [rdi+0x20],eax
  407b3f:	cmp    eax,DWORD PTR [rdi+0x24]
  407b42:	jae    407b4a <flatcc_builder_end_union_vector@@Base+0x3a>
  407b44:	mov    r8,QWORD PTR [r13+0x18]
  407b48:	jmp    407ba1 <flatcc_builder_end_union_vector@@Base+0x91>
  407b4a:	inc    eax
  407b4c:	lea    rsi,[r13+0x68]
  407b50:	mov    rdi,QWORD PTR [r13+0x40]
  407b54:	mov    edx,DWORD PTR [r13+0x28]
  407b58:	add    rdx,rax
  407b5b:	mov    ecx,0x1
  407b60:	mov    r8d,0x1
  407b66:	call   QWORD PTR [r13+0x50]
  407b6a:	test   eax,eax
  407b6c:	jne    407cd6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  407b72:	mov    eax,DWORD PTR [r13+0x28]
  407b76:	mov    r8,rax
  407b79:	add    r8,QWORD PTR [r13+0x68]
  407b7d:	mov    QWORD PTR [r13+0x18],r8
  407b81:	mov    ecx,DWORD PTR [r13+0x70]
  407b85:	sub    ecx,eax
  407b87:	cmp    ecx,0xfffffffc
  407b8a:	mov    eax,0xfffffffc
  407b8f:	cmovb  eax,ecx
  407b92:	mov    DWORD PTR [r13+0x24],eax
  407b96:	mov    rax,QWORD PTR [r13+0x30]
  407b9a:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407ba1:	mov    rsi,r8
  407ba4:	add    rsi,r12
  407ba7:	je     407cd6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  407bad:	lea    r15,[rsi+r14*4]
  407bb1:	test   r14d,r14d
  407bb4:	je     407c9a <flatcc_builder_end_union_vector@@Base+0x18a>
  407bba:	cmp    r14d,0x9
  407bbe:	jae    407d69 <flatcc_builder_end_union_vector@@Base+0x259>
  407bc4:	xor    r9d,r9d
  407bc7:	mov    r11d,r14d
  407bca:	sub    r11d,r9d
  407bcd:	mov    r10,r9
  407bd0:	not    r10
  407bd3:	add    r10,r14
  407bd6:	and    r11,0x3
  407bda:	je     407c20 <flatcc_builder_end_union_vector@@Base+0x110>
  407bdc:	mov    rdx,r9
  407bdf:	neg    rdx
  407be2:	lea    rbp,[r12+r9*4]
  407be6:	add    rbp,r8
  407be9:	lea    rbx,[r8+r9*8]
  407bed:	add    rbx,0x4
  407bf1:	lea    rax,[r9+r14*4]
  407bf5:	add    rax,r12
  407bf8:	add    rax,r8
  407bfb:	xor    edi,edi
  407bfd:	nop    DWORD PTR [rax]
  407c00:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407c05:	mov    BYTE PTR [rax+rdi*1],cl
  407c08:	mov    ecx,DWORD PTR [rbx+rdi*8]
  407c0b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  407c0f:	dec    rdx
  407c12:	inc    rdi
  407c15:	cmp    r11,rdi
  407c18:	jne    407c00 <flatcc_builder_end_union_vector@@Base+0xf0>
  407c1a:	neg    rdx
  407c1d:	mov    r9,rdx
  407c20:	cmp    r10,0x3
  407c24:	jb     407c9a <flatcc_builder_end_union_vector@@Base+0x18a>
  407c26:	mov    rbp,r14
  407c29:	sub    rbp,r9
  407c2c:	lea    rcx,[r12+r9*4]
  407c30:	lea    rdx,[r8+rcx*1]
  407c34:	add    rdx,0xc
  407c38:	lea    rdi,[r8+r9*8]
  407c3c:	add    rdi,0x1c
  407c40:	lea    rcx,[r9+r14*4]
  407c44:	add    rcx,r12
  407c47:	add    rcx,r8
  407c4a:	add    rcx,0x3
  407c4e:	xor    ebx,ebx
  407c50:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  407c55:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  407c59:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  407c5d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  407c61:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  407c66:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  407c6a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  407c6e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  407c72:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  407c77:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  407c7b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  407c7f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  407c83:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  407c88:	mov    BYTE PTR [rcx+rbx*1],al
  407c8b:	mov    eax,DWORD PTR [rdi+rbx*8]
  407c8e:	mov    DWORD PTR [rdx+rbx*4],eax
  407c91:	add    rbx,0x4
  407c95:	cmp    rbp,rbx
  407c98:	jne    407c50 <flatcc_builder_end_union_vector@@Base+0x140>
  407c9a:	mov    rdi,r13
  407c9d:	mov    rdx,r14
  407ca0:	mov    rcx,r15
  407ca3:	vzeroupper 
  407ca6:	call   406f80 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407cab:	mov    r12d,eax
  407cae:	test   eax,eax
  407cb0:	je     407cdb <flatcc_builder_end_union_vector@@Base+0x1cb>
  407cb2:	mov    ecx,0x1
  407cb7:	mov    r9d,0xffffffff
  407cbd:	mov    rdi,r13
  407cc0:	mov    rsi,r15
  407cc3:	mov    rdx,r14
  407cc6:	mov    r8d,0x1
  407ccc:	call   406d00 <flatcc_builder_create_vector@@Base>
  407cd1:	mov    r14d,eax
  407cd4:	jmp    407cde <flatcc_builder_end_union_vector@@Base+0x1ce>
  407cd6:	xor    r14d,r14d
  407cd9:	jmp    407d57 <flatcc_builder_end_union_vector@@Base+0x247>
  407cdb:	xor    r14d,r14d
  407cde:	shl    r12,0x20
  407ce2:	mov    rdi,QWORD PTR [r13+0x18]
  407ce6:	mov    edx,DWORD PTR [r13+0x20]
  407cea:	xor    esi,esi
  407cec:	call   403070 <memset@plt>
  407cf1:	mov    rax,QWORD PTR [r13+0x30]
  407cf5:	mov    ecx,DWORD PTR [rax+0x8]
  407cf8:	mov    DWORD PTR [r13+0x20],ecx
  407cfc:	mov    ecx,DWORD PTR [rax]
  407cfe:	mov    DWORD PTR [r13+0x28],ecx
  407d02:	mov    edx,DWORD PTR [rax+0x4]
  407d05:	mov    rsi,rcx
  407d08:	add    rsi,QWORD PTR [r13+0x68]
  407d0c:	mov    QWORD PTR [r13+0x18],rsi
  407d10:	mov    esi,DWORD PTR [r13+0x70]
  407d14:	sub    esi,ecx
  407d16:	cmp    esi,edx
  407d18:	cmova  esi,edx
  407d1b:	mov    DWORD PTR [r13+0x24],esi
  407d1f:	movzx  ecx,WORD PTR [r13+0xea]
  407d27:	cmp    WORD PTR [r13+0xe8],cx
  407d2f:	jae    407d39 <flatcc_builder_end_union_vector@@Base+0x229>
  407d31:	mov    WORD PTR [r13+0xe8],cx
  407d39:	or     r14,r12
  407d3c:	movzx  ecx,WORD PTR [rax+0xc]
  407d40:	mov    WORD PTR [r13+0xea],cx
  407d48:	add    rax,0xffffffffffffffdc
  407d4c:	mov    QWORD PTR [r13+0x30],rax
  407d50:	dec    DWORD PTR [r13+0x104]
  407d57:	mov    rax,r14
  407d5a:	add    rsp,0x8
  407d5e:	pop    rbx
  407d5f:	pop    r12
  407d61:	pop    r13
  407d63:	pop    r14
  407d65:	pop    r15
  407d67:	pop    rbp
  407d68:	ret    
  407d69:	lea    rax,[r14-0x1]
  407d6d:	mov    ecx,0x8
  407d72:	mul    rcx
  407d75:	seto   cl
  407d78:	mov    rdx,r8
  407d7b:	not    rdx
  407d7e:	xor    r9d,r9d
  407d81:	cmp    rax,rdx
  407d84:	ja     407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407d8a:	test   cl,cl
  407d8c:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407d92:	lea    rdx,[r8+0x4]
  407d96:	mov    rdi,rdx
  407d99:	not    rdi
  407d9c:	cmp    rax,rdi
  407d9f:	ja     407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407da5:	test   cl,cl
  407da7:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407dad:	lea    rcx,[r14+r14*4]
  407db1:	add    rcx,r12
  407db4:	add    rcx,r8
  407db7:	lea    rbx,[r8+r14*8]
  407dbb:	add    rbx,0xfffffffffffffff9
  407dbf:	cmp    rbx,r15
  407dc2:	seta   r11b
  407dc6:	lea    rdi,[r8+r14*8]
  407dca:	cmp    r8,rcx
  407dcd:	setb   r10b
  407dd1:	cmp    rdi,r15
  407dd4:	seta   al
  407dd7:	cmp    rdx,rcx
  407dda:	setb   bpl
  407dde:	cmp    rsi,rbx
  407de1:	setb   cl
  407de4:	cmp    r8,r15
  407de7:	setb   BYTE PTR [rsp+0x7]
  407dec:	cmp    rsi,rdi
  407def:	setb   bl
  407df2:	cmp    rdx,r15
  407df5:	setb   dl
  407df8:	xor    r9d,r9d
  407dfb:	test   r11b,r10b
  407dfe:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407e04:	and    al,bpl
  407e07:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407e0d:	and    cl,BYTE PTR [rsp+0x7]
  407e11:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407e17:	and    bl,dl
  407e19:	jne    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407e1f:	mov    eax,r14d
  407e22:	and    eax,0x7
  407e25:	test   rax,rax
  407e28:	mov    ecx,0x8
  407e2d:	cmovne rcx,rax
  407e31:	mov    r9,r14
  407e34:	sub    r9,rcx
  407e37:	vmovdqa ymm0,YMMWORD PTR [rip+0x2821]        # 40a660 <flatcc_builder_padding_base@@Base+0x210>
  407e3f:	vmovdqa ymm1,YMMWORD PTR [rip+0x2839]        # 40a680 <flatcc_builder_padding_base@@Base+0x230>
  407e47:	xor    eax,eax
  407e49:	vmovdqa xmm8,XMMWORD PTR [rip+0x284f]        # 40a6a0 <flatcc_builder_padding_base@@Base+0x250>
  407e51:	vmovdqa xmm9,XMMWORD PTR [rip+0x2857]        # 40a6b0 <flatcc_builder_padding_base@@Base+0x260>
  407e59:	vpbroadcastq ymm4,QWORD PTR [rip+0x285e]        # 40a6c0 <flatcc_builder_padding_base@@Base+0x270>
  407e62:	vpbroadcastq ymm5,QWORD PTR [rip+0x285d]        # 40a6c8 <flatcc_builder_padding_base@@Base+0x278>
  407e6b:	mov    rdi,r8
  407e6e:	xchg   ax,ax
  407e70:	vmovdqu xmm6,XMMWORD PTR [rdi]
  407e74:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  407e79:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  407e7e:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  407e83:	vpshufb xmm3,xmm3,xmm8
  407e88:	vpshufb xmm2,xmm2,xmm8
  407e8d:	vpunpcklwd xmm2,xmm2,xmm3
  407e91:	vpshufb xmm3,xmm7,xmm9
  407e96:	vpshufb xmm6,xmm6,xmm9
  407e9b:	vpunpcklwd xmm3,xmm6,xmm3
  407e9f:	vpblendd xmm2,xmm3,xmm2,0x2
  407ea5:	vmovq  QWORD PTR [r15+rax*1],xmm2
  407eab:	vpsllq ymm2,ymm0,0x3
  407eb0:	vmovq  xmm3,r8
  407eb5:	vpbroadcastq ymm3,xmm3
  407eba:	vpaddq ymm2,ymm3,ymm2
  407ebe:	vpaddq ymm2,ymm2,ymm4
  407ec2:	vpsllq ymm6,ymm1,0x3
  407ec7:	vpaddq ymm3,ymm3,ymm6
  407ecb:	vpaddq ymm3,ymm3,ymm4
  407ecf:	vpcmpeqd xmm6,xmm6,xmm6
  407ed3:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  407edd:	vpcmpeqd xmm3,xmm3,xmm3
  407ee1:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  407eeb:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  407ef1:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  407ef6:	add    rax,0x8
  407efa:	vpaddq ymm1,ymm1,ymm5
  407efe:	vpaddq ymm0,ymm0,ymm5
  407f02:	add    rdi,0x40
  407f06:	cmp    r9,rax
  407f09:	jne    407e70 <flatcc_builder_end_union_vector@@Base+0x360>
  407f0f:	jmp    407bc7 <flatcc_builder_end_union_vector@@Base+0xb7>
  407f14:	lea    rdi,[rip+0x3403]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  407f1b:	lea    rsi,[rip+0x27c0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407f22:	lea    rcx,[rip+0x3427]        # 40b350 <flatcc_builder_padding_base@@Base+0xf00>
  407f29:	mov    edx,0x651
  407f2e:	call   403060 <__assert_fail@plt>
  407f33:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f3d:	nop    DWORD PTR [rax]

0000000000407f40 <flatcc_builder_union_vector_count@@Base>:
  407f40:	mov    rax,QWORD PTR [rdi+0x30]
  407f44:	mov    eax,DWORD PTR [rax+0x14]
  407f47:	ret    
  407f48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407f50 <flatcc_builder_union_vector_edit@@Base>:
  407f50:	mov    rax,QWORD PTR [rdi+0x18]
  407f54:	ret    
  407f55:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f5f:	nop

0000000000407f60 <flatcc_builder_extend_union_vector@@Base>:
  407f60:	push   r14
  407f62:	push   rbx
  407f63:	push   rax
  407f64:	mov    rax,QWORD PTR [rdi+0x30]
  407f68:	mov    ecx,DWORD PTR [rax+0x14]
  407f6b:	add    ecx,esi
  407f6d:	jb     407ff4 <flatcc_builder_extend_union_vector@@Base+0x94>
  407f73:	cmp    ecx,0x20000000
  407f79:	jae    407ff4 <flatcc_builder_extend_union_vector@@Base+0x94>
  407f7b:	mov    rbx,rdi
  407f7e:	mov    DWORD PTR [rax+0x14],ecx
  407f81:	mov    r14d,DWORD PTR [rdi+0x20]
  407f85:	lea    eax,[r14+rsi*8]
  407f89:	mov    DWORD PTR [rdi+0x20],eax
  407f8c:	cmp    eax,DWORD PTR [rdi+0x24]
  407f8f:	jae    407f97 <flatcc_builder_extend_union_vector@@Base+0x37>
  407f91:	mov    rax,QWORD PTR [rbx+0x18]
  407f95:	jmp    407fe9 <flatcc_builder_extend_union_vector@@Base+0x89>
  407f97:	inc    eax
  407f99:	lea    rsi,[rbx+0x68]
  407f9d:	mov    rdi,QWORD PTR [rbx+0x40]
  407fa1:	mov    edx,DWORD PTR [rbx+0x28]
  407fa4:	add    rdx,rax
  407fa7:	mov    ecx,0x1
  407fac:	mov    r8d,0x1
  407fb2:	call   QWORD PTR [rbx+0x50]
  407fb5:	test   eax,eax
  407fb7:	je     407fbd <flatcc_builder_extend_union_vector@@Base+0x5d>
  407fb9:	xor    eax,eax
  407fbb:	jmp    407fec <flatcc_builder_extend_union_vector@@Base+0x8c>
  407fbd:	mov    ecx,DWORD PTR [rbx+0x28]
  407fc0:	mov    rax,rcx
  407fc3:	add    rax,QWORD PTR [rbx+0x68]
  407fc7:	mov    QWORD PTR [rbx+0x18],rax
  407fcb:	mov    edx,DWORD PTR [rbx+0x70]
  407fce:	sub    edx,ecx
  407fd0:	cmp    edx,0xfffffffc
  407fd3:	mov    ecx,0xfffffffc
  407fd8:	cmovb  ecx,edx
  407fdb:	mov    DWORD PTR [rbx+0x24],ecx
  407fde:	mov    rcx,QWORD PTR [rbx+0x30]
  407fe2:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407fe9:	add    rax,r14
  407fec:	add    rsp,0x8
  407ff0:	pop    rbx
  407ff1:	pop    r14
  407ff3:	ret    
  407ff4:	lea    rdi,[rip+0x37b0]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  407ffb:	lea    rsi,[rip+0x26e0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408002:	lea    rcx,[rip+0x37bd]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  408009:	mov    edx,0x37c
  40800e:	call   403060 <__assert_fail@plt>
  408013:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40801d:	nop    DWORD PTR [rax]

0000000000408020 <flatcc_builder_truncate_union_vector@@Base>:
  408020:	push   rax
  408021:	mov    rax,QWORD PTR [rdi+0x30]
  408025:	cmp    WORD PTR [rax+0xe],0x7
  40802a:	jne    40805b <flatcc_builder_truncate_union_vector@@Base+0x3b>
  40802c:	mov    rdx,rsi
  40802f:	mov    ecx,DWORD PTR [rax+0x14]
  408032:	sub    ecx,edx
  408034:	jb     40807a <flatcc_builder_truncate_union_vector@@Base+0x5a>
  408036:	mov    DWORD PTR [rax+0x14],ecx
  408039:	mov    rax,QWORD PTR [rdi+0x30]
  40803d:	imul   edx,DWORD PTR [rax+0x10]
  408041:	mov    eax,DWORD PTR [rdi+0x20]
  408044:	sub    eax,edx
  408046:	mov    DWORD PTR [rdi+0x20],eax
  408049:	add    rax,QWORD PTR [rdi+0x18]
  40804d:	mov    rdi,rax
  408050:	xor    esi,esi
  408052:	call   403070 <memset@plt>
  408057:	xor    eax,eax
  408059:	pop    rcx
  40805a:	ret    
  40805b:	lea    rdi,[rip+0x32bc]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  408062:	lea    rsi,[rip+0x2679]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408069:	lea    rcx,[rip+0x3333]        # 40b3a3 <flatcc_builder_padding_base@@Base+0xf53>
  408070:	mov    edx,0x681
  408075:	call   403060 <__assert_fail@plt>
  40807a:	lea    rdi,[rip+0x2d01]        # 40ad82 <flatcc_builder_padding_base@@Base+0x932>
  408081:	lea    rsi,[rip+0x265a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408088:	lea    rcx,[rip+0x3314]        # 40b3a3 <flatcc_builder_padding_base@@Base+0xf53>
  40808f:	mov    edx,0x682
  408094:	call   403060 <__assert_fail@plt>
  408099:	nop    DWORD PTR [rax+0x0]

00000000004080a0 <flatcc_builder_union_vector_push@@Base>:
  4080a0:	push   r15
  4080a2:	push   r14
  4080a4:	push   rbx
  4080a5:	mov    rax,QWORD PTR [rdi+0x30]
  4080a9:	cmp    WORD PTR [rax+0xe],0x7
  4080ae:	jne    408147 <flatcc_builder_union_vector_push@@Base+0xa7>
  4080b4:	mov    ecx,DWORD PTR [rax+0x14]
  4080b7:	cmp    ecx,0x1fffffff
  4080bd:	je     408109 <flatcc_builder_union_vector_push@@Base+0x69>
  4080bf:	mov    r14,rsi
  4080c2:	mov    rbx,rdi
  4080c5:	inc    ecx
  4080c7:	mov    DWORD PTR [rax+0x14],ecx
  4080ca:	mov    r15d,DWORD PTR [rdi+0x20]
  4080ce:	lea    eax,[r15+0x8]
  4080d2:	mov    DWORD PTR [rdi+0x20],eax
  4080d5:	cmp    eax,DWORD PTR [rdi+0x24]
  4080d8:	jae    4080e5 <flatcc_builder_union_vector_push@@Base+0x45>
  4080da:	mov    rax,QWORD PTR [rbx+0x18]
  4080de:	add    rax,r15
  4080e1:	jne    40813e <flatcc_builder_union_vector_push@@Base+0x9e>
  4080e3:	jmp    408109 <flatcc_builder_union_vector_push@@Base+0x69>
  4080e5:	lea    eax,[r15+0x9]
  4080e9:	lea    rsi,[rbx+0x68]
  4080ed:	mov    rdi,QWORD PTR [rbx+0x40]
  4080f1:	mov    edx,DWORD PTR [rbx+0x28]
  4080f4:	add    rdx,rax
  4080f7:	mov    ecx,0x1
  4080fc:	mov    r8d,0x1
  408102:	call   QWORD PTR [rbx+0x50]
  408105:	test   eax,eax
  408107:	je     40810d <flatcc_builder_union_vector_push@@Base+0x6d>
  408109:	xor    eax,eax
  40810b:	jmp    408141 <flatcc_builder_union_vector_push@@Base+0xa1>
  40810d:	mov    ecx,DWORD PTR [rbx+0x28]
  408110:	mov    rax,rcx
  408113:	add    rax,QWORD PTR [rbx+0x68]
  408117:	mov    QWORD PTR [rbx+0x18],rax
  40811b:	mov    edx,DWORD PTR [rbx+0x70]
  40811e:	sub    edx,ecx
  408120:	cmp    edx,0xfffffffc
  408123:	mov    ecx,0xfffffffc
  408128:	cmovb  ecx,edx
  40812b:	mov    DWORD PTR [rbx+0x24],ecx
  40812e:	mov    rcx,QWORD PTR [rbx+0x30]
  408132:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  408139:	add    rax,r15
  40813c:	je     408109 <flatcc_builder_union_vector_push@@Base+0x69>
  40813e:	mov    QWORD PTR [rax],r14
  408141:	pop    rbx
  408142:	pop    r14
  408144:	pop    r15
  408146:	ret    
  408147:	lea    rdi,[rip+0x31d0]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  40814e:	lea    rsi,[rip+0x258d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408155:	lea    rcx,[rip+0x328c]        # 40b3e8 <flatcc_builder_padding_base@@Base+0xf98>
  40815c:	mov    edx,0x68d
  408161:	call   403060 <__assert_fail@plt>
  408166:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408170 <flatcc_builder_append_union_vector@@Base>:
  408170:	push   r15
  408172:	push   r14
  408174:	push   r13
  408176:	push   r12
  408178:	push   rbx
  408179:	mov    rax,QWORD PTR [rdi+0x30]
  40817d:	cmp    WORD PTR [rax+0xe],0x7
  408182:	jne    40825e <flatcc_builder_append_union_vector@@Base+0xee>
  408188:	mov    r15,rdx
  40818b:	mov    ecx,DWORD PTR [rax+0x14]
  40818e:	add    ecx,r15d
  408191:	jb     40823f <flatcc_builder_append_union_vector@@Base+0xcf>
  408197:	cmp    ecx,0x20000000
  40819d:	jae    40823f <flatcc_builder_append_union_vector@@Base+0xcf>
  4081a3:	mov    r14,rsi
  4081a6:	mov    rbx,rdi
  4081a9:	mov    DWORD PTR [rax+0x14],ecx
  4081ac:	mov    r13d,DWORD PTR [rdi+0x20]
  4081b0:	lea    eax,[r13+r15*8+0x0]
  4081b5:	mov    DWORD PTR [rdi+0x20],eax
  4081b8:	cmp    eax,DWORD PTR [rdi+0x24]
  4081bb:	jae    4081c8 <flatcc_builder_append_union_vector@@Base+0x58>
  4081bd:	mov    r12,QWORD PTR [rbx+0x18]
  4081c1:	add    r12,r13
  4081c4:	jne    408220 <flatcc_builder_append_union_vector@@Base+0xb0>
  4081c6:	jmp    4081ea <flatcc_builder_append_union_vector@@Base+0x7a>
  4081c8:	inc    eax
  4081ca:	lea    rsi,[rbx+0x68]
  4081ce:	mov    rdi,QWORD PTR [rbx+0x40]
  4081d2:	mov    edx,DWORD PTR [rbx+0x28]
  4081d5:	add    rdx,rax
  4081d8:	mov    ecx,0x1
  4081dd:	mov    r8d,0x1
  4081e3:	call   QWORD PTR [rbx+0x50]
  4081e6:	test   eax,eax
  4081e8:	je     4081ef <flatcc_builder_append_union_vector@@Base+0x7f>
  4081ea:	xor    r12d,r12d
  4081ed:	jmp    408232 <flatcc_builder_append_union_vector@@Base+0xc2>
  4081ef:	mov    eax,DWORD PTR [rbx+0x28]
  4081f2:	mov    r12,rax
  4081f5:	add    r12,QWORD PTR [rbx+0x68]
  4081f9:	mov    QWORD PTR [rbx+0x18],r12
  4081fd:	mov    ecx,DWORD PTR [rbx+0x70]
  408200:	sub    ecx,eax
  408202:	cmp    ecx,0xfffffffc
  408205:	mov    eax,0xfffffffc
  40820a:	cmovb  eax,ecx
  40820d:	mov    DWORD PTR [rbx+0x24],eax
  408210:	mov    rax,QWORD PTR [rbx+0x30]
  408214:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40821b:	add    r12,r13
  40821e:	je     4081ea <flatcc_builder_append_union_vector@@Base+0x7a>
  408220:	shl    r15d,0x3
  408224:	mov    edx,r15d
  408227:	mov    rdi,r12
  40822a:	mov    rsi,r14
  40822d:	call   4030a0 <memcpy@plt>
  408232:	mov    rax,r12
  408235:	pop    rbx
  408236:	pop    r12
  408238:	pop    r13
  40823a:	pop    r14
  40823c:	pop    r15
  40823e:	ret    
  40823f:	lea    rdi,[rip+0x3565]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  408246:	lea    rsi,[rip+0x2495]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40824d:	lea    rcx,[rip+0x3572]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  408254:	mov    edx,0x37c
  408259:	call   403060 <__assert_fail@plt>
  40825e:	lea    rdi,[rip+0x30b9]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  408265:	lea    rsi,[rip+0x2476]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40826c:	lea    rcx,[rip+0x31e2]        # 40b455 <flatcc_builder_padding_base@@Base+0x1005>
  408273:	mov    edx,0x69c
  408278:	call   403060 <__assert_fail@plt>
  40827d:	nop    DWORD PTR [rax]

0000000000408280 <flatcc_builder_create_string@@Base>:
  408280:	push   rbp
  408281:	push   rbx
  408282:	sub    rsp,0x98
  408289:	xor    ebp,ebp
  40828b:	mov    rax,rdx
  40828e:	shr    rax,0x20
  408292:	jne    408366 <flatcc_builder_create_string@@Base+0xe6>
  408298:	mov    rbx,rdi
  40829b:	mov    DWORD PTR [rsp+0x4],edx
  40829f:	mov    ebp,DWORD PTR [rdi+0xf0]
  4082a5:	mov    eax,edx
  4082a7:	not    eax
  4082a9:	add    eax,ebp
  4082ab:	and    eax,0x3
  4082ae:	inc    eax
  4082b0:	mov    QWORD PTR [rsp+0x8],0x4
  4082b9:	lea    rcx,[rsp+0x4]
  4082be:	mov    QWORD PTR [rsp+0x18],rcx
  4082c3:	mov    QWORD PTR [rsp+0x20],0x4
  4082cc:	mov    DWORD PTR [rsp+0x10],0x1
  4082d4:	test   rdx,rdx
  4082d7:	je     4082fb <flatcc_builder_create_string@@Base+0x7b>
  4082d9:	lea    rcx,[rdx+0x4]
  4082dd:	mov    QWORD PTR [rsp+0x8],rcx
  4082e2:	mov    QWORD PTR [rsp+0x28],rsi
  4082e7:	mov    QWORD PTR [rsp+0x30],rdx
  4082ec:	mov    DWORD PTR [rsp+0x10],0x2
  4082f4:	mov    edx,0x2
  4082f9:	jmp    408305 <flatcc_builder_create_string@@Base+0x85>
  4082fb:	mov    ecx,0x4
  408300:	mov    edx,0x1
  408305:	mov    esi,eax
  408307:	lea    r8,[rcx+rsi*1]
  40830b:	mov    QWORD PTR [rsp+0x8],r8
  408310:	mov    eax,edx
  408312:	shl    rax,0x4
  408316:	lea    rdi,[rip+0x2133]        # 40a450 <flatcc_builder_padding_base@@Base>
  40831d:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  408322:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  408327:	inc    edx
  408329:	mov    DWORD PTR [rsp+0x10],edx
  40832d:	cmp    r8,0x11
  408331:	setb   al
  408334:	add    rcx,rsi
  408337:	add    rcx,0xfffffffffffffff0
  40833b:	shr    rcx,0x20
  40833f:	sete   cl
  408342:	test   r8d,r8d
  408345:	jle    408372 <flatcc_builder_create_string@@Base+0xf2>
  408347:	or     al,cl
  408349:	je     408372 <flatcc_builder_create_string@@Base+0xf2>
  40834b:	sub    ebp,r8d
  40834e:	mov    rdi,QWORD PTR [rbx+0x38]
  408352:	lea    rsi,[rsp+0x18]
  408357:	mov    ecx,ebp
  408359:	call   QWORD PTR [rbx+0x48]
  40835c:	test   eax,eax
  40835e:	jne    408391 <flatcc_builder_create_string@@Base+0x111>
  408360:	mov    DWORD PTR [rbx+0xf0],ebp
  408366:	mov    eax,ebp
  408368:	add    rsp,0x98
  40836f:	pop    rbx
  408370:	pop    rbp
  408371:	ret    
  408372:	lea    rdi,[rip+0x3529]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  408379:	lea    rsi,[rip+0x2362]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408380:	lea    rcx,[rip+0x33da]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  408387:	mov    edx,0x287
  40838c:	call   403060 <__assert_fail@plt>
  408391:	lea    rdi,[rip+0x350a]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  408398:	lea    rsi,[rip+0x2343]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40839f:	lea    rcx,[rip+0x33bb]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4083a6:	mov    edx,0x28b
  4083ab:	call   403060 <__assert_fail@plt>

00000000004083b0 <flatcc_builder_create_string_str@@Base>:
  4083b0:	push   r14
  4083b2:	push   rbx
  4083b3:	push   rax
  4083b4:	mov    rbx,rsi
  4083b7:	mov    r14,rdi
  4083ba:	mov    rdi,rsi
  4083bd:	call   403050 <strlen@plt>
  4083c2:	mov    rdi,r14
  4083c5:	mov    rsi,rbx
  4083c8:	mov    rdx,rax
  4083cb:	add    rsp,0x8
  4083cf:	pop    rbx
  4083d0:	pop    r14
  4083d2:	jmp    408280 <flatcc_builder_create_string@@Base>
  4083d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004083e0 <flatcc_builder_create_string_strn@@Base>:
  4083e0:	push   r15
  4083e2:	push   r14
  4083e4:	push   rbx
  4083e5:	mov    rbx,rdx
  4083e8:	mov    r14,rsi
  4083eb:	mov    r15,rdi
  4083ee:	mov    rdi,rsi
  4083f1:	xor    esi,esi
  4083f3:	call   403080 <memchr@plt>
  4083f8:	mov    rcx,rax
  4083fb:	sub    rcx,r14
  4083fe:	test   rax,rax
  408401:	cmovne rbx,rcx
  408405:	mov    rdi,r15
  408408:	mov    rsi,r14
  40840b:	mov    rdx,rbx
  40840e:	pop    rbx
  40840f:	pop    r14
  408411:	pop    r15
  408413:	jmp    408280 <flatcc_builder_create_string@@Base>
  408418:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408420 <flatcc_builder_end_string@@Base>:
  408420:	push   rbp
  408421:	push   rbx
  408422:	push   rax
  408423:	mov    rax,QWORD PTR [rdi+0x30]
  408427:	cmp    WORD PTR [rax+0xe],0x6
  40842c:	jne    4084c4 <flatcc_builder_end_string@@Base+0xa4>
  408432:	mov    rbx,rdi
  408435:	mov    edx,DWORD PTR [rax+0x14]
  408438:	cmp    edx,DWORD PTR [rdi+0x20]
  40843b:	jne    4084e3 <flatcc_builder_end_string@@Base+0xc3>
  408441:	mov    rsi,QWORD PTR [rbx+0x18]
  408445:	mov    rdi,rbx
  408448:	call   408280 <flatcc_builder_create_string@@Base>
  40844d:	mov    ebp,eax
  40844f:	test   eax,eax
  408451:	je     4084bb <flatcc_builder_end_string@@Base+0x9b>
  408453:	mov    rdi,QWORD PTR [rbx+0x18]
  408457:	mov    edx,DWORD PTR [rbx+0x20]
  40845a:	xor    esi,esi
  40845c:	call   403070 <memset@plt>
  408461:	mov    rax,QWORD PTR [rbx+0x30]
  408465:	mov    ecx,DWORD PTR [rax+0x8]
  408468:	mov    DWORD PTR [rbx+0x20],ecx
  40846b:	mov    ecx,DWORD PTR [rax]
  40846d:	mov    DWORD PTR [rbx+0x28],ecx
  408470:	mov    edx,DWORD PTR [rax+0x4]
  408473:	mov    rsi,rcx
  408476:	add    rsi,QWORD PTR [rbx+0x68]
  40847a:	mov    QWORD PTR [rbx+0x18],rsi
  40847e:	mov    esi,DWORD PTR [rbx+0x70]
  408481:	sub    esi,ecx
  408483:	cmp    esi,edx
  408485:	cmova  esi,edx
  408488:	mov    DWORD PTR [rbx+0x24],esi
  40848b:	movzx  ecx,WORD PTR [rbx+0xea]
  408492:	cmp    WORD PTR [rbx+0xe8],cx
  408499:	jae    4084a2 <flatcc_builder_end_string@@Base+0x82>
  40849b:	mov    WORD PTR [rbx+0xe8],cx
  4084a2:	movzx  ecx,WORD PTR [rax+0xc]
  4084a6:	mov    WORD PTR [rbx+0xea],cx
  4084ad:	add    rax,0xffffffffffffffdc
  4084b1:	mov    QWORD PTR [rbx+0x30],rax
  4084b5:	dec    DWORD PTR [rbx+0x104]
  4084bb:	mov    eax,ebp
  4084bd:	add    rsp,0x8
  4084c1:	pop    rbx
  4084c2:	pop    rbp
  4084c3:	ret    
  4084c4:	lea    rdi,[rip+0x2756]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  4084cb:	lea    rsi,[rip+0x2210]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4084d2:	lea    rcx,[rip+0x2ffb]        # 40b4d4 <flatcc_builder_padding_base@@Base+0x1084>
  4084d9:	mov    edx,0x6c4
  4084de:	call   403060 <__assert_fail@plt>
  4084e3:	lea    rdi,[rip+0x302d]        # 40b517 <flatcc_builder_padding_base@@Base+0x10c7>
  4084ea:	lea    rsi,[rip+0x21f1]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4084f1:	lea    rcx,[rip+0x2fdc]        # 40b4d4 <flatcc_builder_padding_base@@Base+0x1084>
  4084f8:	mov    edx,0x6c5
  4084fd:	call   403060 <__assert_fail@plt>
  408502:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40850c:	nop    DWORD PTR [rax+0x0]

0000000000408510 <flatcc_builder_string_edit@@Base>:
  408510:	mov    rax,QWORD PTR [rdi+0x18]
  408514:	ret    
  408515:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40851f:	nop

0000000000408520 <flatcc_builder_string_len@@Base>:
  408520:	mov    rax,QWORD PTR [rdi+0x30]
  408524:	mov    eax,DWORD PTR [rax+0x14]
  408527:	ret    
  408528:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408530 <flatcc_builder_table_edit@@Base>:
  408530:	push   rax
  408531:	mov    rax,QWORD PTR [rdi+0x30]
  408535:	cmp    WORD PTR [rax+0xe],0x3
  40853a:	jne    408548 <flatcc_builder_table_edit@@Base+0x18>
  40853c:	mov    eax,DWORD PTR [rdi+0x20]
  40853f:	add    rax,QWORD PTR [rdi+0x18]
  408543:	sub    rax,rsi
  408546:	pop    rcx
  408547:	ret    
  408548:	lea    rdi,[rip+0x29c2]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  40854f:	lea    rsi,[rip+0x218c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408556:	lea    rcx,[rip+0x306c]        # 40b5c9 <flatcc_builder_padding_base@@Base+0x1179>
  40855d:	mov    edx,0x702
  408562:	call   403060 <__assert_fail@plt>
  408567:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408570 <flatcc_builder_table_add_copy@@Base>:
  408570:	push   r15
  408572:	push   r14
  408574:	push   rbx
  408575:	mov    r15,rcx
  408578:	mov    r14,rdx
  40857b:	mov    rdx,rcx
  40857e:	mov    ecx,r8d
  408581:	call   4074e0 <flatcc_builder_table_add@@Base>
  408586:	mov    rbx,rax
  408589:	test   rax,rax
  40858c:	je     40859c <flatcc_builder_table_add_copy@@Base+0x2c>
  40858e:	mov    rdi,rbx
  408591:	mov    rsi,r14
  408594:	mov    rdx,r15
  408597:	call   4030a0 <memcpy@plt>
  40859c:	mov    rax,rbx
  40859f:	pop    rbx
  4085a0:	pop    r14
  4085a2:	pop    r15
  4085a4:	ret    
  4085a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085af:	nop

00000000004085b0 <flatcc_builder_push_buffer_alignment@@Base>:
  4085b0:	movzx  eax,WORD PTR [rdi+0xe8]
  4085b7:	mov    WORD PTR [rdi+0xe8],0x4
  4085c0:	ret    
  4085c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004085d0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4085d0:	cmp    WORD PTR [rdi+0xe8],si
  4085d7:	jae    4085e0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  4085d9:	mov    WORD PTR [rdi+0xe8],si
  4085e0:	ret    
  4085e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004085f0 <flatcc_builder_get_buffer_alignment@@Base>:
  4085f0:	movzx  eax,WORD PTR [rdi+0xe8]
  4085f7:	ret    
  4085f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408600 <flatcc_builder_set_vtable_clustering@@Base>:
  408600:	xor    eax,eax
  408602:	test   esi,esi
  408604:	sete   al
  408607:	mov    DWORD PTR [rdi+0x124],eax
  40860d:	ret    
  40860e:	xchg   ax,ax

0000000000408610 <flatcc_builder_set_block_align@@Base>:
  408610:	mov    WORD PTR [rdi+0xec],si
  408617:	ret    
  408618:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408620 <flatcc_builder_get_level@@Base>:
  408620:	mov    eax,DWORD PTR [rdi+0x104]
  408626:	ret    
  408627:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408630 <flatcc_builder_set_max_level@@Base>:
  408630:	mov    DWORD PTR [rdi+0x120],esi
  408636:	cmp    DWORD PTR [rdi+0x108],esi
  40863c:	jge    408644 <flatcc_builder_set_max_level@@Base+0x14>
  40863e:	mov    DWORD PTR [rdi+0x108],esi
  408644:	ret    
  408645:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40864f:	nop

0000000000408650 <flatcc_builder_get_buffer_size@@Base>:
  408650:	movsxd rax,DWORD PTR [rdi+0xf4]
  408657:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40865e:	sub    rax,rcx
  408661:	ret    
  408662:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40866c:	nop    DWORD PTR [rax+0x0]

0000000000408670 <flatcc_builder_get_buffer_start@@Base>:
  408670:	mov    eax,DWORD PTR [rdi+0xf0]
  408676:	ret    
  408677:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408680 <flatcc_builder_get_buffer_end@@Base>:
  408680:	mov    eax,DWORD PTR [rdi+0xf4]
  408686:	ret    
  408687:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408690 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408690:	mov    QWORD PTR [rdi+0x118],rsi
  408697:	ret    
  408698:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004086a0 <flatcc_builder_set_identifier@@Base>:
  4086a0:	test   rsi,rsi
  4086a3:	jne    4086ac <flatcc_builder_set_identifier@@Base+0xc>
  4086a5:	lea    rsi,[rip+0x1da4]        # 40a450 <flatcc_builder_padding_base@@Base>
  4086ac:	mov    eax,DWORD PTR [rsi]
  4086ae:	mov    DWORD PTR [rdi+0x110],eax
  4086b4:	ret    
  4086b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086bf:	nop

00000000004086c0 <flatcc_builder_get_type@@Base>:
  4086c0:	mov    rax,QWORD PTR [rdi+0x30]
  4086c4:	test   rax,rax
  4086c7:	je     4086ce <flatcc_builder_get_type@@Base+0xe>
  4086c9:	movzx  eax,WORD PTR [rax+0xe]
  4086cd:	ret    
  4086ce:	xor    eax,eax
  4086d0:	ret    
  4086d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004086e0 <flatcc_builder_get_type_at@@Base>:
  4086e0:	xor    eax,eax
  4086e2:	test   esi,esi
  4086e4:	jle    408702 <flatcc_builder_get_type_at@@Base+0x22>
  4086e6:	mov    ecx,DWORD PTR [rdi+0x104]
  4086ec:	cmp    ecx,esi
  4086ee:	jl     408702 <flatcc_builder_get_type_at@@Base+0x22>
  4086f0:	mov    rax,QWORD PTR [rdi+0x30]
  4086f4:	sub    esi,ecx
  4086f6:	movsxd rcx,esi
  4086f9:	lea    rcx,[rcx+rcx*8]
  4086fd:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408702:	ret    
  408703:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40870d:	nop    DWORD PTR [rax]

0000000000408710 <flatcc_builder_get_direct_buffer@@Base>:
  408710:	cmp    DWORD PTR [rdi+0x128],0x0
  408717:	je     408729 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408719:	mov    rax,QWORD PTR [rdi+0x130]
  408720:	cmp    rax,QWORD PTR [rdi+0x138]
  408727:	je     408738 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408729:	test   rsi,rsi
  40872c:	je     408735 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40872e:	mov    QWORD PTR [rsi],0x0
  408735:	xor    eax,eax
  408737:	ret    
  408738:	test   rsi,rsi
  40873b:	je     408747 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40873d:	mov    rax,QWORD PTR [rdi+0x160]
  408744:	mov    QWORD PTR [rsi],rax
  408747:	mov    rax,QWORD PTR [rdi+0x140]
  40874e:	ret    
  40874f:	nop

0000000000408750 <flatcc_builder_copy_buffer@@Base>:
  408750:	push   rax
  408751:	cmp    DWORD PTR [rdi+0x128],0x0
  408758:	je     40876d <flatcc_builder_copy_buffer@@Base+0x1d>
  40875a:	add    rdi,0x130
  408761:	call   408fd0 <flatcc_emitter_copy_buffer@@Base>
  408766:	test   rax,rax
  408769:	je     408771 <flatcc_builder_copy_buffer@@Base+0x21>
  40876b:	pop    rcx
  40876c:	ret    
  40876d:	xor    eax,eax
  40876f:	pop    rcx
  408770:	ret    
  408771:	lea    rdi,[rip+0x21d8]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  408778:	lea    rsi,[rip+0x1f63]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40877f:	lea    rcx,[rip+0x2ece]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  408786:	mov    edx,0x786
  40878b:	call   403060 <__assert_fail@plt>

0000000000408790 <flatcc_builder_finalize_buffer@@Base>:
  408790:	push   r15
  408792:	push   r14
  408794:	push   rbx
  408795:	mov    rbx,rdi
  408798:	movsxd r14,DWORD PTR [rdi+0xf4]
  40879f:	movsxd rax,DWORD PTR [rdi+0xf0]
  4087a6:	sub    r14,rax
  4087a9:	test   rsi,rsi
  4087ac:	je     4087b1 <flatcc_builder_finalize_buffer@@Base+0x21>
  4087ae:	mov    QWORD PTR [rsi],r14
  4087b1:	mov    rdi,r14
  4087b4:	call   4030b0 <malloc@plt>
  4087b9:	test   rax,rax
  4087bc:	je     4087ed <flatcc_builder_finalize_buffer@@Base+0x5d>
  4087be:	cmp    DWORD PTR [rbx+0x128],0x0
  4087c5:	je     40880c <flatcc_builder_finalize_buffer@@Base+0x7c>
  4087c7:	mov    r15,rax
  4087ca:	add    rbx,0x130
  4087d1:	mov    rdi,rbx
  4087d4:	mov    rsi,rax
  4087d7:	mov    rdx,r14
  4087da:	call   408fd0 <flatcc_emitter_copy_buffer@@Base>
  4087df:	test   rax,rax
  4087e2:	je     40882b <flatcc_builder_finalize_buffer@@Base+0x9b>
  4087e4:	mov    rax,r15
  4087e7:	pop    rbx
  4087e8:	pop    r14
  4087ea:	pop    r15
  4087ec:	ret    
  4087ed:	lea    rdi,[rip+0x30ae]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4087f4:	lea    rsi,[rip+0x1ee7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4087fb:	lea    rcx,[rip+0x2e97]        # 40b699 <flatcc_builder_padding_base@@Base+0x1249>
  408802:	mov    edx,0x798
  408807:	call   403060 <__assert_fail@plt>
  40880c:	lea    rdi,[rip+0x308f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  408813:	lea    rsi,[rip+0x1ec8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40881a:	lea    rcx,[rip+0x2e78]        # 40b699 <flatcc_builder_padding_base@@Base+0x1249>
  408821:	mov    edx,0x79c
  408826:	call   403060 <__assert_fail@plt>
  40882b:	lea    rdi,[rip+0x211e]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  408832:	lea    rsi,[rip+0x1ea9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408839:	lea    rcx,[rip+0x2e14]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  408840:	mov    edx,0x786
  408845:	call   403060 <__assert_fail@plt>
  40884a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408850 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408850:	push   r15
  408852:	push   r14
  408854:	push   r12
  408856:	push   rbx
  408857:	push   rax
  408858:	mov    r14,rsi
  40885b:	mov    r15,rdi
  40885e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408865:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40886c:	sub    rax,rcx
  40886f:	test   rsi,rsi
  408872:	je     408877 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408874:	mov    QWORD PTR [r14],rax
  408877:	movzx  ecx,WORD PTR [r15+0xe8]
  40887f:	add    rax,rcx
  408882:	add    rax,0xffffffffffffffff
  408886:	mov    rbx,rcx
  408889:	neg    rbx
  40888c:	and    rbx,rax
  40888f:	cmp    rcx,0x8
  408893:	mov    QWORD PTR [rsp],0x0
  40889b:	mov    esi,0x8
  4088a0:	cmova  rsi,rcx
  4088a4:	mov    rdi,rsp
  4088a7:	mov    rdx,rbx
  4088aa:	call   4030e0 <posix_memalign@plt>
  4088af:	mov    r12,QWORD PTR [rsp]
  4088b3:	test   eax,eax
  4088b5:	je     4088c6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4088b7:	test   r12,r12
  4088ba:	je     4088c6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4088bc:	mov    rdi,r12
  4088bf:	call   403030 <free@plt>
  4088c4:	jmp    40890e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4088c6:	test   r12,r12
  4088c9:	je     40890e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4088cb:	cmp    DWORD PTR [r15+0x128],0x0
  4088d3:	je     4088bc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  4088d5:	add    r15,0x130
  4088dc:	mov    rdi,r15
  4088df:	mov    rsi,r12
  4088e2:	mov    rdx,rbx
  4088e5:	call   408fd0 <flatcc_emitter_copy_buffer@@Base>
  4088ea:	test   rax,rax
  4088ed:	jne    40891d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  4088ef:	lea    rdi,[rip+0x205a]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  4088f6:	lea    rsi,[rip+0x1de5]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4088fd:	lea    rcx,[rip+0x2d50]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  408904:	mov    edx,0x786
  408909:	call   403060 <__assert_fail@plt>
  40890e:	test   r14,r14
  408911:	je     40891a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408913:	mov    QWORD PTR [r14],0x0
  40891a:	xor    r12d,r12d
  40891d:	mov    rax,r12
  408920:	add    rsp,0x8
  408924:	pop    rbx
  408925:	pop    r12
  408927:	pop    r14
  408929:	pop    r15
  40892b:	ret    
  40892c:	nop    DWORD PTR [rax+0x0]

0000000000408930 <flatcc_builder_aligned_alloc@@Base>:
  408930:	push   rax
  408931:	mov    rdx,rsi
  408934:	mov    QWORD PTR [rsp],0x0
  40893c:	cmp    rdi,0x8
  408940:	mov    esi,0x8
  408945:	cmova  rsi,rdi
  408949:	mov    rdi,rsp
  40894c:	call   4030e0 <posix_memalign@plt>
  408951:	mov    ecx,eax
  408953:	mov    rax,QWORD PTR [rsp]
  408957:	test   ecx,ecx
  408959:	je     408972 <flatcc_builder_aligned_alloc@@Base+0x42>
  40895b:	test   rax,rax
  40895e:	je     408972 <flatcc_builder_aligned_alloc@@Base+0x42>
  408960:	mov    rdi,rax
  408963:	call   403030 <free@plt>
  408968:	mov    QWORD PTR [rsp],0x0
  408970:	xor    eax,eax
  408972:	pop    rcx
  408973:	ret    
  408974:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40897e:	xchg   ax,ax

0000000000408980 <flatcc_builder_aligned_free@@Base>:
  408980:	jmp    403030 <free@plt>
  408985:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40898f:	nop

0000000000408990 <flatcc_builder_get_emit_context@@Base>:
  408990:	mov    rax,QWORD PTR [rdi+0x38]
  408994:	ret    
  408995:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40899f:	nop

00000000004089a0 <flatcc_emitter_recycle_page@@Base>:
  4089a0:	mov    rcx,QWORD PTR [rdi]
  4089a3:	mov    eax,0xffffffff
  4089a8:	cmp    rcx,rsi
  4089ab:	je     408a02 <flatcc_emitter_recycle_page@@Base+0x62>
  4089ad:	cmp    QWORD PTR [rdi+0x8],rsi
  4089b1:	je     408a02 <flatcc_emitter_recycle_page@@Base+0x62>
  4089b3:	mov    rax,QWORD PTR [rsi+0xb80]
  4089ba:	mov    rdx,QWORD PTR [rsi+0xb88]
  4089c1:	mov    QWORD PTR [rax+0xb88],rdx
  4089c8:	mov    rdx,QWORD PTR [rsi+0xb88]
  4089cf:	mov    QWORD PTR [rdx+0xb80],rax
  4089d6:	mov    rax,QWORD PTR [rcx+0xb88]
  4089dd:	mov    QWORD PTR [rsi+0xb88],rax
  4089e4:	mov    QWORD PTR [rsi+0xb80],rcx
  4089eb:	mov    QWORD PTR [rax+0xb80],rsi
  4089f2:	mov    rax,QWORD PTR [rsi+0xb80]
  4089f9:	mov    QWORD PTR [rax+0xb88],rsi
  408a00:	xor    eax,eax
  408a02:	ret    
  408a03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a0d:	nop    DWORD PTR [rax]

0000000000408a10 <flatcc_emitter_reset@@Base>:
  408a10:	push   r14
  408a12:	push   rbx
  408a13:	push   rax
  408a14:	mov    rax,QWORD PTR [rdi]
  408a17:	test   rax,rax
  408a1a:	je     408afb <flatcc_emitter_reset@@Base+0xeb>
  408a20:	mov    rbx,rdi
  408a23:	mov    QWORD PTR [rdi+0x8],rax
  408a27:	lea    rcx,[rax+0x5c0]
  408a2e:	mov    QWORD PTR [rdi+0x10],rcx
  408a32:	mov    QWORD PTR [rdi+0x20],rcx
  408a36:	mov    QWORD PTR [rdi+0x18],0x5c0
  408a3e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408a46:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408a50:	mov    rcx,QWORD PTR [rdi+0x30]
  408a54:	mov    rdx,QWORD PTR [rdi+0x40]
  408a58:	test   rdx,rdx
  408a5b:	jne    408a64 <flatcc_emitter_reset@@Base+0x54>
  408a5d:	mov    QWORD PTR [rbx+0x40],rcx
  408a61:	mov    rdx,rcx
  408a64:	lea    rdx,[rdx+rdx*2]
  408a68:	shr    rdx,0x2
  408a6c:	shr    rcx,0x2
  408a70:	add    rcx,rdx
  408a73:	mov    QWORD PTR [rbx+0x40],rcx
  408a77:	mov    QWORD PTR [rbx+0x30],0x0
  408a7f:	add    rcx,rcx
  408a82:	cmp    rcx,QWORD PTR [rbx+0x38]
  408a86:	jae    408afb <flatcc_emitter_reset@@Base+0xeb>
  408a88:	mov    rdi,QWORD PTR [rax+0xb80]
  408a8f:	cmp    rdi,rax
  408a92:	je     408afb <flatcc_emitter_reset@@Base+0xeb>
  408a94:	lea    rcx,[rax+0xb80]
  408a9b:	mov    r14,0xfffffffffffff480
  408aa2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408aac:	nop    DWORD PTR [rax+0x0]
  408ab0:	mov    rdx,QWORD PTR [rdi+0xb80]
  408ab7:	mov    QWORD PTR [rcx],rdx
  408aba:	mov    rcx,QWORD PTR [rdi+0xb80]
  408ac1:	mov    QWORD PTR [rcx+0xb88],rax
  408ac8:	call   403030 <free@plt>
  408acd:	mov    rax,QWORD PTR [rbx+0x38]
  408ad1:	add    rax,r14
  408ad4:	mov    QWORD PTR [rbx+0x38],rax
  408ad8:	mov    rcx,QWORD PTR [rbx+0x40]
  408adc:	add    rcx,rcx
  408adf:	cmp    rcx,rax
  408ae2:	jae    408afb <flatcc_emitter_reset@@Base+0xeb>
  408ae4:	mov    rax,QWORD PTR [rbx+0x8]
  408ae8:	lea    rcx,[rax+0xb80]
  408aef:	mov    rdi,QWORD PTR [rax+0xb80]
  408af6:	cmp    rdi,QWORD PTR [rbx]
  408af9:	jne    408ab0 <flatcc_emitter_reset@@Base+0xa0>
  408afb:	add    rsp,0x8
  408aff:	pop    rbx
  408b00:	pop    r14
  408b02:	ret    
  408b03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b0d:	nop    DWORD PTR [rax]

0000000000408b10 <flatcc_emitter_clear@@Base>:
  408b10:	push   r14
  408b12:	push   rbx
  408b13:	push   rax
  408b14:	mov    rbx,QWORD PTR [rdi]
  408b17:	test   rbx,rbx
  408b1a:	je     408b7c <flatcc_emitter_clear@@Base+0x6c>
  408b1c:	mov    r14,rdi
  408b1f:	mov    rax,QWORD PTR [rbx+0xb88]
  408b26:	mov    QWORD PTR [rax+0xb80],0x0
  408b31:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b3b:	nop    DWORD PTR [rax+rax*1+0x0]
  408b40:	mov    rax,QWORD PTR [rbx+0xb80]
  408b47:	test   rax,rax
  408b4a:	je     408b5d <flatcc_emitter_clear@@Base+0x4d>
  408b4c:	mov    rbx,rax
  408b4f:	mov    rdi,QWORD PTR [rax+0xb88]
  408b56:	call   403030 <free@plt>
  408b5b:	jmp    408b40 <flatcc_emitter_clear@@Base+0x30>
  408b5d:	mov    rdi,rbx
  408b60:	call   403030 <free@plt>
  408b65:	vxorps xmm0,xmm0,xmm0
  408b69:	vmovups YMMWORD PTR [r14+0x20],ymm0
  408b6f:	vmovups YMMWORD PTR [r14],ymm0
  408b74:	mov    QWORD PTR [r14+0x40],0x0
  408b7c:	add    rsp,0x8
  408b80:	pop    rbx
  408b81:	pop    r14
  408b83:	vzeroupper 
  408b86:	ret    
  408b87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408b90 <flatcc_emitter@@Base>:
  408b90:	push   rbp
  408b91:	push   r15
  408b93:	push   r14
  408b95:	push   r13
  408b97:	push   r12
  408b99:	push   rbx
  408b9a:	push   rax
  408b9b:	mov    r14d,edx
  408b9e:	mov    r12,rsi
  408ba1:	mov    rbp,rdi
  408ba4:	add    QWORD PTR [rdi+0x30],r8
  408ba8:	test   ecx,ecx
  408baa:	js     408d25 <flatcc_emitter@@Base+0x195>
  408bb0:	mov    rdx,QWORD PTR [rbp+0x28]
  408bb4:	cmp    rdx,r8
  408bb7:	jae    408ed8 <flatcc_emitter@@Base+0x348>
  408bbd:	xor    eax,eax
  408bbf:	test   r14d,r14d
  408bc2:	je     408fb7 <flatcc_emitter@@Base+0x427>
  408bc8:	mov    r15,QWORD PTR [r12+0x8]
  408bcd:	test   r15,r15
  408bd0:	je     408d10 <flatcc_emitter@@Base+0x180>
  408bd6:	mov    r13,QWORD PTR [r12]
  408bda:	jmp    408c09 <flatcc_emitter@@Base+0x79>
  408bdc:	mov    rbx,r15
  408bdf:	mov    rdi,QWORD PTR [rbp+0x20]
  408be3:	mov    rsi,r13
  408be6:	mov    rdx,rbx
  408be9:	call   4030a0 <memcpy@plt>
  408bee:	add    QWORD PTR [rbp+0x20],rbx
  408bf2:	add    r13,rbx
  408bf5:	mov    rdx,QWORD PTR [rbp+0x28]
  408bf9:	sub    rdx,rbx
  408bfc:	mov    QWORD PTR [rbp+0x28],rdx
  408c00:	sub    r15,rbx
  408c03:	je     408d10 <flatcc_emitter@@Base+0x180>
  408c09:	mov    rbx,r15
  408c0c:	cmp    r15,rdx
  408c0f:	jbe    408bdf <flatcc_emitter@@Base+0x4f>
  408c11:	mov    rbx,rdx
  408c14:	test   rbx,rbx
  408c17:	je     408c81 <flatcc_emitter@@Base+0xf1>
  408c19:	jmp    408bdf <flatcc_emitter@@Base+0x4f>
  408c1b:	nop    DWORD PTR [rax+rax*1+0x0]
  408c20:	mov    QWORD PTR [rax+0xb88],rbx
  408c27:	mov    rcx,QWORD PTR [rbp+0x0]
  408c2b:	mov    QWORD PTR [rax+0xb80],rcx
  408c32:	mov    QWORD PTR [rcx+0xb88],rax
  408c39:	mov    QWORD PTR [rbx+0xb80],rax
  408c40:	mov    QWORD PTR [rbp+0x8],rax
  408c44:	mov    QWORD PTR [rbp+0x20],rax
  408c48:	mov    QWORD PTR [rbp+0x28],0xb80
  408c50:	mov    rcx,QWORD PTR [rax+0xb88]
  408c57:	mov    ecx,DWORD PTR [rcx+0xb90]
  408c5d:	mov    edx,0xb80
  408c62:	add    ecx,edx
  408c64:	mov    DWORD PTR [rax+0xb90],ecx
  408c6a:	mov    ebx,0xb80
  408c6f:	cmp    r15,rbx
  408c72:	jbe    408bdc <flatcc_emitter@@Base+0x4c>
  408c78:	test   rbx,rbx
  408c7b:	jne    408bdf <flatcc_emitter@@Base+0x4f>
  408c81:	mov    rbx,QWORD PTR [rbp+0x8]
  408c85:	test   rbx,rbx
  408c88:	je     408c97 <flatcc_emitter@@Base+0x107>
  408c8a:	mov    rax,QWORD PTR [rbx+0xb80]
  408c91:	cmp    rax,QWORD PTR [rbp+0x0]
  408c95:	jne    408c40 <flatcc_emitter@@Base+0xb0>
  408c97:	mov    edi,0xb98
  408c9c:	call   4030b0 <malloc@plt>
  408ca1:	test   rax,rax
  408ca4:	je     408eea <flatcc_emitter@@Base+0x35a>
  408caa:	add    QWORD PTR [rbp+0x38],0xb80
  408cb2:	test   rbx,rbx
  408cb5:	jne    408c20 <flatcc_emitter@@Base+0x90>
  408cbb:	mov    QWORD PTR [rbp+0x0],rax
  408cbf:	mov    QWORD PTR [rbp+0x8],rax
  408cc3:	mov    QWORD PTR [rax+0xb80],rax
  408cca:	mov    QWORD PTR [rax+0xb88],rax
  408cd1:	mov    rcx,rax
  408cd4:	add    rcx,0x5c0
  408cdb:	mov    QWORD PTR [rbp+0x10],rcx
  408cdf:	mov    QWORD PTR [rbp+0x20],rcx
  408ce3:	mov    QWORD PTR [rbp+0x18],0x5c0
  408ceb:	mov    QWORD PTR [rbp+0x28],0x5c0
  408cf3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408cfd:	mov    ebx,0x5c0
  408d02:	cmp    r15,rbx
  408d05:	ja     408c78 <flatcc_emitter@@Base+0xe8>
  408d0b:	jmp    408bdc <flatcc_emitter@@Base+0x4c>
  408d10:	dec    r14d
  408d13:	add    r12,0x10
  408d17:	test   r14d,r14d
  408d1a:	jne    408bc8 <flatcc_emitter@@Base+0x38>
  408d20:	jmp    408fb5 <flatcc_emitter@@Base+0x425>
  408d25:	lea    rsi,[rbp+0x18]
  408d29:	mov    rdx,QWORD PTR [rbp+0x18]
  408d2d:	cmp    rdx,r8
  408d30:	jae    408ef4 <flatcc_emitter@@Base+0x364>
  408d36:	xor    eax,eax
  408d38:	test   r14d,r14d
  408d3b:	je     408fb7 <flatcc_emitter@@Base+0x427>
  408d41:	mov    QWORD PTR [rsp],rsi
  408d45:	movsxd rax,r14d
  408d48:	shl    rax,0x4
  408d4c:	add    r12,rax
  408d4f:	mov    edx,0xfffff480
  408d54:	mov    r15,QWORD PTR [r12-0x8]
  408d59:	add    r12,0xfffffffffffffff0
  408d5d:	test   r15,r15
  408d60:	je     408eca <flatcc_emitter@@Base+0x33a>
  408d66:	mov    r13,QWORD PTR [r12]
  408d6a:	add    r13,r15
  408d6d:	jmp    408da1 <flatcc_emitter@@Base+0x211>
  408d6f:	nop
  408d70:	mov    rbx,r15
  408d73:	mov    rdi,QWORD PTR [rbp+0x10]
  408d77:	sub    rdi,rbx
  408d7a:	mov    QWORD PTR [rbp+0x10],rdi
  408d7e:	sub    rax,rbx
  408d81:	mov    QWORD PTR [rbp+0x18],rax
  408d85:	sub    r13,rbx
  408d88:	mov    rsi,r13
  408d8b:	mov    rdx,rbx
  408d8e:	call   4030a0 <memcpy@plt>
  408d93:	mov    edx,0xfffff480
  408d98:	sub    r15,rbx
  408d9b:	je     408eca <flatcc_emitter@@Base+0x33a>
  408da1:	mov    rax,QWORD PTR [rsp]
  408da5:	mov    rax,QWORD PTR [rax]
  408da8:	cmp    r15,rax
  408dab:	ja     408df8 <flatcc_emitter@@Base+0x268>
  408dad:	jmp    408d70 <flatcc_emitter@@Base+0x1e0>
  408daf:	nop
  408db0:	mov    ecx,DWORD PTR [rbx+0xb90]
  408db6:	add    ecx,edx
  408db8:	mov    DWORD PTR [rax+0xb90],ecx
  408dbe:	mov    QWORD PTR [rbp+0x0],rax
  408dc2:	lea    rcx,[rax+0xb80]
  408dc9:	mov    QWORD PTR [rbp+0x10],rcx
  408dcd:	mov    QWORD PTR [rbp+0x18],0xb80
  408dd5:	mov    rcx,QWORD PTR [rax+0xb80]
  408ddc:	mov    ecx,DWORD PTR [rcx+0xb90]
  408de2:	add    ecx,edx
  408de4:	mov    DWORD PTR [rax+0xb90],ecx
  408dea:	mov    eax,0xb80
  408def:	cmp    r15,rax
  408df2:	jbe    408d70 <flatcc_emitter@@Base+0x1e0>
  408df8:	mov    rbx,rax
  408dfb:	test   rax,rax
  408dfe:	jne    408d73 <flatcc_emitter@@Base+0x1e3>
  408e04:	mov    rbx,QWORD PTR [rbp+0x0]
  408e08:	test   rbx,rbx
  408e0b:	je     408e1a <flatcc_emitter@@Base+0x28a>
  408e0d:	mov    rax,QWORD PTR [rbx+0xb88]
  408e14:	cmp    rax,QWORD PTR [rbp+0x8]
  408e18:	jne    408db0 <flatcc_emitter@@Base+0x220>
  408e1a:	mov    edi,0xb98
  408e1f:	call   4030b0 <malloc@plt>
  408e24:	test   rax,rax
  408e27:	je     408eea <flatcc_emitter@@Base+0x35a>
  408e2d:	add    QWORD PTR [rbp+0x38],0xb80
  408e35:	test   rbx,rbx
  408e38:	je     408e70 <flatcc_emitter@@Base+0x2e0>
  408e3a:	mov    rcx,QWORD PTR [rbp+0x8]
  408e3e:	mov    QWORD PTR [rax+0xb88],rcx
  408e45:	mov    QWORD PTR [rax+0xb80],rbx
  408e4c:	mov    QWORD PTR [rbx+0xb88],rax
  408e53:	mov    QWORD PTR [rcx+0xb80],rax
  408e5a:	mov    QWORD PTR [rbp+0x0],rax
  408e5e:	mov    edx,0xfffff480
  408e63:	jmp    408dc2 <flatcc_emitter@@Base+0x232>
  408e68:	nop    DWORD PTR [rax+rax*1+0x0]
  408e70:	mov    QWORD PTR [rbp+0x0],rax
  408e74:	mov    QWORD PTR [rbp+0x8],rax
  408e78:	mov    QWORD PTR [rax+0xb80],rax
  408e7f:	mov    QWORD PTR [rax+0xb88],rax
  408e86:	mov    rcx,rax
  408e89:	add    rcx,0x5c0
  408e90:	mov    QWORD PTR [rbp+0x10],rcx
  408e94:	mov    QWORD PTR [rbp+0x20],rcx
  408e98:	mov    QWORD PTR [rbp+0x18],0x5c0
  408ea0:	mov    QWORD PTR [rbp+0x28],0x5c0
  408ea8:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408eb2:	mov    eax,0x5c0
  408eb7:	mov    edx,0xfffff480
  408ebc:	cmp    r15,rax
  408ebf:	ja     408df8 <flatcc_emitter@@Base+0x268>
  408ec5:	jmp    408d70 <flatcc_emitter@@Base+0x1e0>
  408eca:	dec    r14d
  408ecd:	jne    408d54 <flatcc_emitter@@Base+0x1c4>
  408ed3:	jmp    408fb5 <flatcc_emitter@@Base+0x425>
  408ed8:	lea    rsi,[rbp+0x28]
  408edc:	mov    rbx,QWORD PTR [rbp+0x20]
  408ee0:	lea    rcx,[rbx+r8*1]
  408ee4:	mov    QWORD PTR [rbp+0x20],rcx
  408ee8:	jmp    408eff <flatcc_emitter@@Base+0x36f>
  408eea:	mov    eax,0xffffffff
  408eef:	jmp    408fb7 <flatcc_emitter@@Base+0x427>
  408ef4:	mov    rbx,QWORD PTR [rbp+0x10]
  408ef8:	sub    rbx,r8
  408efb:	mov    QWORD PTR [rbp+0x10],rbx
  408eff:	sub    rdx,r8
  408f02:	mov    QWORD PTR [rsi],rdx
  408f05:	xor    eax,eax
  408f07:	test   r14d,r14d
  408f0a:	je     408fb7 <flatcc_emitter@@Base+0x427>
  408f10:	lea    r15d,[r14-0x1]
  408f14:	mov    r13d,r14d
  408f17:	and    r13d,0x3
  408f1b:	je     408f44 <flatcc_emitter@@Base+0x3b4>
  408f1d:	xor    ebp,ebp
  408f1f:	nop
  408f20:	mov    rsi,QWORD PTR [r12]
  408f24:	mov    rdx,QWORD PTR [r12+0x8]
  408f29:	mov    rdi,rbx
  408f2c:	call   4030a0 <memcpy@plt>
  408f31:	add    rbx,QWORD PTR [r12+0x8]
  408f36:	add    r12,0x10
  408f3a:	inc    ebp
  408f3c:	cmp    r13d,ebp
  408f3f:	jne    408f20 <flatcc_emitter@@Base+0x390>
  408f41:	sub    r14d,ebp
  408f44:	cmp    r15d,0x3
  408f48:	jb     408fb5 <flatcc_emitter@@Base+0x425>
  408f4a:	nop    WORD PTR [rax+rax*1+0x0]
  408f50:	mov    rsi,QWORD PTR [r12]
  408f54:	mov    rdx,QWORD PTR [r12+0x8]
  408f59:	mov    rdi,rbx
  408f5c:	call   4030a0 <memcpy@plt>
  408f61:	add    rbx,QWORD PTR [r12+0x8]
  408f66:	mov    rsi,QWORD PTR [r12+0x10]
  408f6b:	mov    rdx,QWORD PTR [r12+0x18]
  408f70:	mov    rdi,rbx
  408f73:	call   4030a0 <memcpy@plt>
  408f78:	add    rbx,QWORD PTR [r12+0x18]
  408f7d:	mov    rsi,QWORD PTR [r12+0x20]
  408f82:	mov    rdx,QWORD PTR [r12+0x28]
  408f87:	mov    rdi,rbx
  408f8a:	call   4030a0 <memcpy@plt>
  408f8f:	add    rbx,QWORD PTR [r12+0x28]
  408f94:	mov    rsi,QWORD PTR [r12+0x30]
  408f99:	mov    rdx,QWORD PTR [r12+0x38]
  408f9e:	mov    rdi,rbx
  408fa1:	call   4030a0 <memcpy@plt>
  408fa6:	add    rbx,QWORD PTR [r12+0x38]
  408fab:	add    r12,0x40
  408faf:	add    r14d,0xfffffffc
  408fb3:	jne    408f50 <flatcc_emitter@@Base+0x3c0>
  408fb5:	xor    eax,eax
  408fb7:	add    rsp,0x8
  408fbb:	pop    rbx
  408fbc:	pop    r12
  408fbe:	pop    r13
  408fc0:	pop    r14
  408fc2:	pop    r15
  408fc4:	pop    rbp
  408fc5:	ret    
  408fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408fd0 <flatcc_emitter_copy_buffer@@Base>:
  408fd0:	push   r15
  408fd2:	push   r14
  408fd4:	push   r13
  408fd6:	push   r12
  408fd8:	push   rbx
  408fd9:	mov    rax,rdx
  408fdc:	mov    rdx,QWORD PTR [rdi+0x30]
  408fe0:	cmp    rdx,rax
  408fe3:	ja     40907b <flatcc_emitter_copy_buffer@@Base+0xab>
  408fe9:	mov    r14,rdi
  408fec:	mov    rax,QWORD PTR [rdi]
  408fef:	test   rax,rax
  408ff2:	je     40907b <flatcc_emitter_copy_buffer@@Base+0xab>
  408ff8:	mov    r12,rsi
  408ffb:	cmp    rax,QWORD PTR [r14+0x8]
  408fff:	je     40908b <flatcc_emitter_copy_buffer@@Base+0xbb>
  409005:	mov    r15d,0xb80
  40900b:	mov    r13d,0xb80
  409011:	sub    r13,QWORD PTR [r14+0x18]
  409015:	mov    rsi,QWORD PTR [r14+0x10]
  409019:	mov    rdi,r12
  40901c:	mov    rdx,r13
  40901f:	call   4030a0 <memcpy@plt>
  409024:	add    r13,r12
  409027:	mov    rax,QWORD PTR [r14]
  40902a:	mov    rbx,QWORD PTR [rax+0xb80]
  409031:	cmp    rbx,QWORD PTR [r14+0x8]
  409035:	je     409064 <flatcc_emitter_copy_buffer@@Base+0x94>
  409037:	nop    WORD PTR [rax+rax*1+0x0]
  409040:	mov    edx,0xb80
  409045:	mov    rdi,r13
  409048:	mov    rsi,rbx
  40904b:	call   4030a0 <memcpy@plt>
  409050:	add    r13,0xb80
  409057:	mov    rbx,QWORD PTR [rbx+0xb80]
  40905e:	cmp    rbx,QWORD PTR [r14+0x8]
  409062:	jne    409040 <flatcc_emitter_copy_buffer@@Base+0x70>
  409064:	sub    r15,QWORD PTR [r14+0x28]
  409068:	mov    rdi,r13
  40906b:	mov    rsi,rbx
  40906e:	mov    rdx,r15
  409071:	call   4030a0 <memcpy@plt>
  409076:	mov    r12,r13
  409079:	jmp    40907e <flatcc_emitter_copy_buffer@@Base+0xae>
  40907b:	xor    r12d,r12d
  40907e:	mov    rax,r12
  409081:	pop    rbx
  409082:	pop    r12
  409084:	pop    r13
  409086:	pop    r14
  409088:	pop    r15
  40908a:	ret    
  40908b:	mov    rsi,QWORD PTR [r14+0x10]
  40908f:	mov    rdi,r12
  409092:	call   4030a0 <memcpy@plt>
  409097:	jmp    40907e <flatcc_emitter_copy_buffer@@Base+0xae>
  409099:	nop    DWORD PTR [rax+0x0]

00000000004090a0 <__libc_csu_init@@Base>:
  4090a0:	endbr64 
  4090a4:	push   r15
  4090a6:	lea    r15,[rip+0x5d53]        # 40ee00 <flatcc_builder_padding_base@@Base+0x49b0>
  4090ad:	push   r14
  4090af:	mov    r14,rdx
  4090b2:	push   r13
  4090b4:	mov    r13,rsi
  4090b7:	push   r12
  4090b9:	mov    r12d,edi
  4090bc:	push   rbp
  4090bd:	lea    rbp,[rip+0x5d44]        # 40ee08 <flatcc_builder_padding_base@@Base+0x49b8>
  4090c4:	push   rbx
  4090c5:	sub    rbp,r15
  4090c8:	sub    rsp,0x8
  4090cc:	call   403000 <free@plt-0x30>
  4090d1:	sar    rbp,0x3
  4090d5:	je     4090f6 <__libc_csu_init@@Base+0x56>
  4090d7:	xor    ebx,ebx
  4090d9:	nop    DWORD PTR [rax+0x0]
  4090e0:	mov    rdx,r14
  4090e3:	mov    rsi,r13
  4090e6:	mov    edi,r12d
  4090e9:	call   QWORD PTR [r15+rbx*8]
  4090ed:	add    rbx,0x1
  4090f1:	cmp    rbp,rbx
  4090f4:	jne    4090e0 <__libc_csu_init@@Base+0x40>
  4090f6:	add    rsp,0x8
  4090fa:	pop    rbx
  4090fb:	pop    rbp
  4090fc:	pop    r12
  4090fe:	pop    r13
  409100:	pop    r14
  409102:	pop    r15
  409104:	ret    
  409105:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000409110 <__libc_csu_fini@@Base>:
  409110:	endbr64 
  409114:	ret    

Disassembly of section .fini:

0000000000409118 <.fini>:
  409118:	endbr64 
  40911c:	sub    rsp,0x8
  409120:	add    rsp,0x8
  409124:	ret    
