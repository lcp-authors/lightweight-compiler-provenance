
../repos/charybdis/wsockd/.libs/wsockd:     file format elf64-x86-64


Disassembly of section .init:

0000000000402000 <.init>:
  402000:	endbr64 
  402004:	sub    rsp,0x8
  402008:	mov    rax,QWORD PTR [rip+0x5fd9]        # 407fe8 <rb_base64_encode@plt+0x5cb8>
  40200f:	test   rax,rax
  402012:	je     402016 <dup2@plt-0x1a>
  402014:	call   rax
  402016:	add    rsp,0x8
  40201a:	ret    

Disassembly of section .plt:

0000000000402020 <dup2@plt-0x10>:
  402020:	push   QWORD PTR [rip+0x5fe2]        # 408008 <rb_base64_encode@plt+0x5cd8>
  402026:	jmp    QWORD PTR [rip+0x5fe4]        # 408010 <rb_base64_encode@plt+0x5ce0>
  40202c:	nop    DWORD PTR [rax+0x0]

0000000000402030 <dup2@plt>:
  402030:	jmp    QWORD PTR [rip+0x5fe2]        # 408018 <rb_base64_encode@plt+0x5ce8>
  402036:	push   0x0
  40203b:	jmp    402020 <dup2@plt-0x10>

0000000000402040 <rb_get_type@plt>:
  402040:	jmp    QWORD PTR [rip+0x5fda]        # 408020 <rb_base64_encode@plt+0x5cf0>
  402046:	push   0x1
  40204b:	jmp    402020 <dup2@plt-0x10>

0000000000402050 <memset@plt>:
  402050:	jmp    QWORD PTR [rip+0x5fd2]        # 408028 <rb_base64_encode@plt+0x5cf8>
  402056:	push   0x2
  40205b:	jmp    402020 <dup2@plt-0x10>

0000000000402060 <rb_event_addish@plt>:
  402060:	jmp    QWORD PTR [rip+0x5fca]        # 408030 <rb_base64_encode@plt+0x5d00>
  402066:	push   0x3
  40206b:	jmp    402020 <dup2@plt-0x10>

0000000000402070 <rb_ignore_errno@plt>:
  402070:	jmp    QWORD PTR [rip+0x5fc2]        # 408038 <rb_base64_encode@plt+0x5d08>
  402076:	push   0x4
  40207b:	jmp    402020 <dup2@plt-0x10>

0000000000402080 <close@plt>:
  402080:	jmp    QWORD PTR [rip+0x5fba]        # 408040 <rb_base64_encode@plt+0x5d10>
  402086:	push   0x5
  40208b:	jmp    402020 <dup2@plt-0x10>

0000000000402090 <rb_setselect@plt>:
  402090:	jmp    QWORD PTR [rip+0x5fb2]        # 408048 <rb_base64_encode@plt+0x5d18>
  402096:	push   0x6
  40209b:	jmp    402020 <dup2@plt-0x10>

00000000004020a0 <rb_send_fd_buf@plt>:
  4020a0:	jmp    QWORD PTR [rip+0x5faa]        # 408050 <rb_base64_encode@plt+0x5d20>
  4020a6:	push   0x7
  4020ab:	jmp    402020 <dup2@plt-0x10>

00000000004020b0 <exit@plt>:
  4020b0:	jmp    QWORD PTR [rip+0x5fa2]        # 408058 <rb_base64_encode@plt+0x5d28>
  4020b6:	push   0x8
  4020bb:	jmp    402020 <dup2@plt-0x10>

00000000004020c0 <rb_set_nb@plt>:
  4020c0:	jmp    QWORD PTR [rip+0x5f9a]        # 408060 <rb_base64_encode@plt+0x5d30>
  4020c6:	push   0x9
  4020cb:	jmp    402020 <dup2@plt-0x10>

00000000004020d0 <rb_linebuf_parse@plt>:
  4020d0:	jmp    QWORD PTR [rip+0x5f92]        # 408068 <rb_base64_encode@plt+0x5d38>
  4020d6:	push   0xa
  4020db:	jmp    402020 <dup2@plt-0x10>

00000000004020e0 <rb_strlcpy@plt>:
  4020e0:	jmp    QWORD PTR [rip+0x5f8a]        # 408070 <rb_base64_encode@plt+0x5d40>
  4020e6:	push   0xb
  4020eb:	jmp    402020 <dup2@plt-0x10>

00000000004020f0 <rb_init_rawbuffers@plt>:
  4020f0:	jmp    QWORD PTR [rip+0x5f82]        # 408078 <rb_base64_encode@plt+0x5d48>
  4020f6:	push   0xc
  4020fb:	jmp    402020 <dup2@plt-0x10>

0000000000402100 <free@plt>:
  402100:	jmp    QWORD PTR [rip+0x5f7a]        # 408080 <rb_base64_encode@plt+0x5d50>
  402106:	push   0xd
  40210b:	jmp    402020 <dup2@plt-0x10>

0000000000402110 <strlen@plt>:
  402110:	jmp    QWORD PTR [rip+0x5f72]        # 408088 <rb_base64_encode@plt+0x5d58>
  402116:	push   0xe
  40211b:	jmp    402020 <dup2@plt-0x10>

0000000000402120 <rb_lib_loop@plt>:
  402120:	jmp    QWORD PTR [rip+0x5f6a]        # 408090 <rb_base64_encode@plt+0x5d60>
  402126:	push   0xf
  40212b:	jmp    402020 <dup2@plt-0x10>

0000000000402130 <rb_read@plt>:
  402130:	jmp    QWORD PTR [rip+0x5f62]        # 408098 <rb_base64_encode@plt+0x5d68>
  402136:	push   0x10
  40213b:	jmp    402020 <dup2@plt-0x10>

0000000000402140 <rb_set_type@plt>:
  402140:	jmp    QWORD PTR [rip+0x5f5a]        # 4080a0 <rb_base64_encode@plt+0x5d70>
  402146:	push   0x11
  40214b:	jmp    402020 <dup2@plt-0x10>

0000000000402150 <rb_linebuf_get@plt>:
  402150:	jmp    QWORD PTR [rip+0x5f52]        # 4080a8 <rb_base64_encode@plt+0x5d78>
  402156:	push   0x12
  40215b:	jmp    402020 <dup2@plt-0x10>

0000000000402160 <rb_linebuf_flush@plt>:
  402160:	jmp    QWORD PTR [rip+0x5f4a]        # 4080b0 <rb_base64_encode@plt+0x5d80>
  402166:	push   0x13
  40216b:	jmp    402020 <dup2@plt-0x10>

0000000000402170 <rb_linebuf_donebuf@plt>:
  402170:	jmp    QWORD PTR [rip+0x5f42]        # 4080b8 <rb_base64_encode@plt+0x5d88>
  402176:	push   0x14
  40217b:	jmp    402020 <dup2@plt-0x10>

0000000000402180 <strerror@plt>:
  402180:	jmp    QWORD PTR [rip+0x5f3a]        # 4080c0 <rb_base64_encode@plt+0x5d90>
  402186:	push   0x15
  40218b:	jmp    402020 <dup2@plt-0x10>

0000000000402190 <sigaction@plt>:
  402190:	jmp    QWORD PTR [rip+0x5f32]        # 4080c8 <rb_base64_encode@plt+0x5d98>
  402196:	push   0x16
  40219b:	jmp    402020 <dup2@plt-0x10>

00000000004021a0 <rb_strcasestr@plt>:
  4021a0:	jmp    QWORD PTR [rip+0x5f2a]        # 4080d0 <rb_base64_encode@plt+0x5da0>
  4021a6:	push   0x17
  4021ab:	jmp    402020 <dup2@plt-0x10>

00000000004021b0 <rb_close@plt>:
  4021b0:	jmp    QWORD PTR [rip+0x5f22]        # 4080d8 <rb_base64_encode@plt+0x5da8>
  4021b6:	push   0x18
  4021bb:	jmp    402020 <dup2@plt-0x10>

00000000004021c0 <strtol@plt>:
  4021c0:	jmp    QWORD PTR [rip+0x5f1a]        # 4080e0 <rb_base64_encode@plt+0x5db0>
  4021c6:	push   0x19
  4021cb:	jmp    402020 <dup2@plt-0x10>

00000000004021d0 <rb_rawbuf_length@plt>:
  4021d0:	jmp    QWORD PTR [rip+0x5f12]        # 4080e8 <rb_base64_encode@plt+0x5db8>
  4021d6:	push   0x1a
  4021db:	jmp    402020 <dup2@plt-0x10>

00000000004021e0 <rb_free_rawbuffer@plt>:
  4021e0:	jmp    QWORD PTR [rip+0x5f0a]        # 4080f0 <rb_base64_encode@plt+0x5dc0>
  4021e6:	push   0x1b
  4021eb:	jmp    402020 <dup2@plt-0x10>

00000000004021f0 <vsnprintf@plt>:
  4021f0:	jmp    QWORD PTR [rip+0x5f02]        # 4080f8 <rb_base64_encode@plt+0x5dc8>
  4021f6:	push   0x1c
  4021fb:	jmp    402020 <dup2@plt-0x10>

0000000000402200 <getenv@plt>:
  402200:	jmp    QWORD PTR [rip+0x5efa]        # 408100 <rb_base64_encode@plt+0x5dd0>
  402206:	push   0x1d
  40220b:	jmp    402020 <dup2@plt-0x10>

0000000000402210 <rb_outofmemory@plt>:
  402210:	jmp    QWORD PTR [rip+0x5ef2]        # 408108 <rb_base64_encode@plt+0x5dd8>
  402216:	push   0x1e
  40221b:	jmp    402020 <dup2@plt-0x10>

0000000000402220 <__errno_location@plt>:
  402220:	jmp    QWORD PTR [rip+0x5eea]        # 408110 <rb_base64_encode@plt+0x5de0>
  402226:	push   0x1f
  40222b:	jmp    402020 <dup2@plt-0x10>

0000000000402230 <sigaddset@plt>:
  402230:	jmp    QWORD PTR [rip+0x5ee2]        # 408118 <rb_base64_encode@plt+0x5de8>
  402236:	push   0x20
  40223b:	jmp    402020 <dup2@plt-0x10>

0000000000402240 <rb_rawbuf_get@plt>:
  402240:	jmp    QWORD PTR [rip+0x5eda]        # 408120 <rb_base64_encode@plt+0x5df0>
  402246:	push   0x21
  40224b:	jmp    402020 <dup2@plt-0x10>

0000000000402250 <rb_lib_init@plt>:
  402250:	jmp    QWORD PTR [rip+0x5ed2]        # 408128 <rb_base64_encode@plt+0x5df8>
  402256:	push   0x22
  40225b:	jmp    402020 <dup2@plt-0x10>

0000000000402260 <rb_new_rawbuffer@plt>:
  402260:	jmp    QWORD PTR [rip+0x5eca]        # 408130 <rb_base64_encode@plt+0x5e00>
  402266:	push   0x23
  40226b:	jmp    402020 <dup2@plt-0x10>

0000000000402270 <rb_open@plt>:
  402270:	jmp    QWORD PTR [rip+0x5ec2]        # 408138 <rb_base64_encode@plt+0x5e08>
  402276:	push   0x24
  40227b:	jmp    402020 <dup2@plt-0x10>

0000000000402280 <rb_recv_fd_buf@plt>:
  402280:	jmp    QWORD PTR [rip+0x5eba]        # 408140 <rb_base64_encode@plt+0x5e10>
  402286:	push   0x25
  40228b:	jmp    402020 <dup2@plt-0x10>

0000000000402290 <calloc@plt>:
  402290:	jmp    QWORD PTR [rip+0x5eb2]        # 408148 <rb_base64_encode@plt+0x5e18>
  402296:	push   0x26
  40229b:	jmp    402020 <dup2@plt-0x10>

00000000004022a0 <getrlimit@plt>:
  4022a0:	jmp    QWORD PTR [rip+0x5eaa]        # 408150 <rb_base64_encode@plt+0x5e20>
  4022a6:	push   0x27
  4022ab:	jmp    402020 <dup2@plt-0x10>

00000000004022b0 <rb_linebuf_newbuf@plt>:
  4022b0:	jmp    QWORD PTR [rip+0x5ea2]        # 408158 <rb_base64_encode@plt+0x5e28>
  4022b6:	push   0x28
  4022bb:	jmp    402020 <dup2@plt-0x10>

00000000004022c0 <rb_linebuf_init@plt>:
  4022c0:	jmp    QWORD PTR [rip+0x5e9a]        # 408160 <rb_base64_encode@plt+0x5e30>
  4022c6:	push   0x29
  4022cb:	jmp    402020 <dup2@plt-0x10>

00000000004022d0 <sigemptyset@plt>:
  4022d0:	jmp    QWORD PTR [rip+0x5e92]        # 408168 <rb_base64_encode@plt+0x5e38>
  4022d6:	push   0x2a
  4022db:	jmp    402020 <dup2@plt-0x10>

00000000004022e0 <fwrite@plt>:
  4022e0:	jmp    QWORD PTR [rip+0x5e8a]        # 408170 <rb_base64_encode@plt+0x5e40>
  4022e6:	push   0x2b
  4022eb:	jmp    402020 <dup2@plt-0x10>

00000000004022f0 <rb_rawbuf_append@plt>:
  4022f0:	jmp    QWORD PTR [rip+0x5e82]        # 408178 <rb_base64_encode@plt+0x5e48>
  4022f6:	push   0x2c
  4022fb:	jmp    402020 <dup2@plt-0x10>

0000000000402300 <rb_rawbuf_flush@plt>:
  402300:	jmp    QWORD PTR [rip+0x5e7a]        # 408180 <rb_base64_encode@plt+0x5e50>
  402306:	push   0x2d
  40230b:	jmp    402020 <dup2@plt-0x10>

0000000000402310 <memcpy@plt>:
  402310:	jmp    QWORD PTR [rip+0x5e72]        # 408188 <rb_base64_encode@plt+0x5e58>
  402316:	push   0x2e
  40231b:	jmp    402020 <dup2@plt-0x10>

0000000000402320 <open@plt>:
  402320:	jmp    QWORD PTR [rip+0x5e6a]        # 408190 <rb_base64_encode@plt+0x5e60>
  402326:	push   0x2f
  40232b:	jmp    402020 <dup2@plt-0x10>

0000000000402330 <rb_base64_encode@plt>:
  402330:	jmp    QWORD PTR [rip+0x5e62]        # 408198 <rb_base64_encode@plt+0x5e68>
  402336:	push   0x30
  40233b:	jmp    402020 <dup2@plt-0x10>

Disassembly of section .text:

0000000000402340 <.text>:
  402340:	endbr64 
  402344:	xor    ebp,ebp
  402346:	mov    r9,rdx
  402349:	pop    rsi
  40234a:	mov    rdx,rsp
  40234d:	and    rsp,0xfffffffffffffff0
  402351:	push   rax
  402352:	push   rsp
  402353:	mov    r8,0x405560
  40235a:	mov    rcx,0x4054f0
  402361:	mov    rdi,0x402430
  402368:	call   QWORD PTR [rip+0x5c82]        # 407ff0 <rb_base64_encode@plt+0x5cc0>
  40236e:	hlt    
  40236f:	nop
  402370:	endbr64 
  402374:	ret    
  402375:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40237f:	nop
  402380:	mov    eax,0x4081b0
  402385:	cmp    rax,0x4081b0
  40238b:	je     4023a0 <rb_base64_encode@plt+0x70>
  40238d:	mov    eax,0x0
  402392:	test   rax,rax
  402395:	je     4023a0 <rb_base64_encode@plt+0x70>
  402397:	mov    edi,0x4081b0
  40239c:	jmp    rax
  40239e:	xchg   ax,ax
  4023a0:	ret    
  4023a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4023ac:	nop    DWORD PTR [rax+0x0]
  4023b0:	mov    esi,0x4081b0
  4023b5:	sub    rsi,0x4081b0
  4023bc:	mov    rax,rsi
  4023bf:	shr    rsi,0x3f
  4023c3:	sar    rax,0x3
  4023c7:	add    rsi,rax
  4023ca:	sar    rsi,1
  4023cd:	je     4023e0 <rb_base64_encode@plt+0xb0>
  4023cf:	mov    eax,0x0
  4023d4:	test   rax,rax
  4023d7:	je     4023e0 <rb_base64_encode@plt+0xb0>
  4023d9:	mov    edi,0x4081b0
  4023de:	jmp    rax
  4023e0:	ret    
  4023e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4023ec:	nop    DWORD PTR [rax+0x0]
  4023f0:	endbr64 
  4023f4:	cmp    BYTE PTR [rip+0x5db5],0x0        # 4081b0 <rb_base64_encode@plt+0x5e80>
  4023fb:	jne    402410 <rb_base64_encode@plt+0xe0>
  4023fd:	push   rbp
  4023fe:	mov    rbp,rsp
  402401:	call   402380 <rb_base64_encode@plt+0x50>
  402406:	mov    BYTE PTR [rip+0x5da3],0x1        # 4081b0 <rb_base64_encode@plt+0x5e80>
  40240d:	pop    rbp
  40240e:	ret    
  40240f:	nop
  402410:	ret    
  402411:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40241c:	nop    DWORD PTR [rax+0x0]
  402420:	endbr64 
  402424:	jmp    4023b0 <rb_base64_encode@plt+0x80>
  402426:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402430:	push   rbp
  402431:	push   r15
  402433:	push   r14
  402435:	push   r12
  402437:	push   rbx
  402438:	sub    rsp,0x20
  40243c:	lea    rsi,[rsp+0x10]
  402441:	mov    edi,0x7
  402446:	call   4022a0 <getrlimit@plt>
  40244b:	mov    r15d,0xffff
  402451:	test   eax,eax
  402453:	jne    40245a <rb_base64_encode@plt+0x12a>
  402455:	mov    r15d,DWORD PTR [rsp+0x10]
  40245a:	lea    rdi,[rip+0x3bbf]        # 406020 <rb_base64_encode@plt+0x3cf0>
  402461:	call   402200 <getenv@plt>
  402466:	mov    rbx,rax
  402469:	lea    rdi,[rip+0x3bb7]        # 406027 <rb_base64_encode@plt+0x3cf7>
  402470:	call   402200 <getenv@plt>
  402475:	mov    r14,rax
  402478:	lea    rdi,[rip+0x3bb1]        # 406030 <rb_base64_encode@plt+0x3d00>
  40247f:	call   402200 <getenv@plt>
  402484:	test   rbx,rbx
  402487:	je     402654 <rb_base64_encode@plt+0x324>
  40248d:	test   r14,r14
  402490:	je     402654 <rb_base64_encode@plt+0x324>
  402496:	mov    r12,rax
  402499:	test   rax,rax
  40249c:	je     402654 <rb_base64_encode@plt+0x324>
  4024a2:	xor    ebp,ebp
  4024a4:	mov    rdi,rbx
  4024a7:	xor    esi,esi
  4024a9:	mov    edx,0xa
  4024ae:	call   4021c0 <strtol@plt>
  4024b3:	mov    rbx,rax
  4024b6:	mov    rdi,r14
  4024b9:	xor    esi,esi
  4024bb:	mov    edx,0xa
  4024c0:	call   4021c0 <strtol@plt>
  4024c5:	mov    r14,rax
  4024c8:	mov    rdi,r12
  4024cb:	xor    esi,esi
  4024cd:	mov    edx,0xa
  4024d2:	call   4021c0 <strtol@plt>
  4024d7:	mov    DWORD PTR [rip+0x5ce3],eax        # 4081c0 <rb_base64_encode@plt+0x5e90>
  4024dd:	test   r15d,r15d
  4024e0:	jg     4024f7 <rb_base64_encode@plt+0x1c7>
  4024e2:	jmp    40250e <rb_base64_encode@plt+0x1de>
  4024e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024ee:	xchg   ax,ax
  4024f0:	inc    ebp
  4024f2:	cmp    r15d,ebp
  4024f5:	je     40250e <rb_base64_encode@plt+0x1de>
  4024f7:	cmp    ebx,ebp
  4024f9:	je     4024f0 <rb_base64_encode@plt+0x1c0>
  4024fb:	cmp    r14d,ebp
  4024fe:	je     4024f0 <rb_base64_encode@plt+0x1c0>
  402500:	cmp    ebp,0x3
  402503:	jb     4024f0 <rb_base64_encode@plt+0x1c0>
  402505:	mov    edi,ebp
  402507:	call   402080 <close@plt>
  40250c:	jmp    4024f0 <rb_base64_encode@plt+0x1c0>
  40250e:	lea    rdi,[rip+0x3b8b]        # 4060a0 <rb_base64_encode@plt+0x3d70>
  402515:	mov    esi,0x2
  40251a:	xor    eax,eax
  40251c:	call   402320 <open@plt>
  402521:	test   eax,eax
  402523:	js     402573 <rb_base64_encode@plt+0x243>
  402525:	mov    ebp,eax
  402527:	test   ebx,ebx
  402529:	je     402539 <rb_base64_encode@plt+0x209>
  40252b:	test   r14d,r14d
  40252e:	je     402539 <rb_base64_encode@plt+0x209>
  402530:	mov    edi,ebp
  402532:	xor    esi,esi
  402534:	call   402030 <dup2@plt>
  402539:	cmp    ebx,0x1
  40253c:	je     402550 <rb_base64_encode@plt+0x220>
  40253e:	cmp    r14d,0x1
  402542:	je     402550 <rb_base64_encode@plt+0x220>
  402544:	mov    edi,ebp
  402546:	mov    esi,0x1
  40254b:	call   402030 <dup2@plt>
  402550:	cmp    ebx,0x2
  402553:	je     402567 <rb_base64_encode@plt+0x237>
  402555:	cmp    r14d,0x2
  402559:	je     402567 <rb_base64_encode@plt+0x237>
  40255b:	mov    edi,ebp
  40255d:	mov    esi,0x2
  402562:	call   402030 <dup2@plt>
  402567:	cmp    ebp,0x3
  40256a:	jl     402573 <rb_base64_encode@plt+0x243>
  40256c:	mov    edi,ebp
  40256e:	call   402080 <close@plt>
  402573:	call   4026a0 <rb_base64_encode@plt+0x370>
  402578:	mov    QWORD PTR [rsp],0x1000
  402580:	mov    r9d,0x400
  402586:	xor    edi,edi
  402588:	xor    esi,esi
  40258a:	xor    edx,edx
  40258c:	xor    ecx,ecx
  40258e:	mov    r8d,r15d
  402591:	call   402250 <rb_lib_init@plt>
  402596:	mov    edi,0x1000
  40259b:	call   4022c0 <rb_linebuf_init@plt>
  4025a0:	mov    edi,0x1000
  4025a5:	call   4020f0 <rb_init_rawbuffers@plt>
  4025aa:	mov    edi,0x60
  4025af:	call   402760 <rb_base64_encode@plt+0x430>
  4025b4:	mov    QWORD PTR [rip+0x5c0d],rax        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025bb:	lea    rdx,[rip+0x3ae8]        # 4060aa <rb_base64_encode@plt+0x3d7a>
  4025c2:	mov    edi,ebx
  4025c4:	mov    esi,0x4
  4025c9:	call   402270 <rb_open@plt>
  4025ce:	mov    rcx,QWORD PTR [rip+0x5bf3]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025d5:	mov    QWORD PTR [rcx+0x20],rax
  4025d9:	lea    rdx,[rip+0x3ade]        # 4060be <rb_base64_encode@plt+0x3d8e>
  4025e0:	mov    edi,r14d
  4025e3:	mov    esi,0x8
  4025e8:	call   402270 <rb_open@plt>
  4025ed:	mov    rcx,QWORD PTR [rip+0x5bd4]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025f4:	mov    QWORD PTR [rcx+0x28],rax
  4025f8:	mov    rdi,QWORD PTR [rcx+0x20]
  4025fc:	call   4020c0 <rb_set_nb@plt>
  402601:	mov    rax,QWORD PTR [rip+0x5bc0]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402608:	mov    rdi,QWORD PTR [rax+0x28]
  40260c:	call   4020c0 <rb_set_nb@plt>
  402611:	lea    rdi,[rip+0x3ab0]        # 4060c8 <rb_base64_encode@plt+0x3d98>
  402618:	lea    rsi,[rip+0x161]        # 402780 <rb_base64_encode@plt+0x450>
  40261f:	mov    ecx,0xa
  402624:	xor    edx,edx
  402626:	call   402060 <rb_event_addish@plt>
  40262b:	mov    rax,QWORD PTR [rip+0x5b96]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402632:	mov    rdi,QWORD PTR [rax+0x28]
  402636:	xor    esi,esi
  402638:	call   4027f0 <rb_base64_encode@plt+0x4c0>
  40263d:	mov    rsi,QWORD PTR [rip+0x5b84]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402644:	mov    rdi,QWORD PTR [rsi+0x20]
  402648:	call   402850 <rb_base64_encode@plt+0x520>
  40264d:	xor    edi,edi
  40264f:	call   402120 <rb_lib_loop@plt>
  402654:	mov    rbx,QWORD PTR [rip+0x599d]        # 407ff8 <rb_base64_encode@plt+0x5cc8>
  40265b:	mov    rcx,QWORD PTR [rbx]
  40265e:	lea    rdi,[rip+0x39d4]        # 406039 <rb_base64_encode@plt+0x3d09>
  402665:	mov    esi,0x34
  40266a:	mov    edx,0x1
  40266f:	call   4022e0 <fwrite@plt>
  402674:	mov    rcx,QWORD PTR [rbx]
  402677:	lea    rdi,[rip+0x39f0]        # 40606e <rb_base64_encode@plt+0x3d3e>
  40267e:	mov    esi,0x31
  402683:	mov    edx,0x1
  402688:	call   4022e0 <fwrite@plt>
  40268d:	mov    edi,0x1
  402692:	call   4020b0 <exit@plt>
  402697:	nop    WORD PTR [rax+rax*1+0x0]
  4026a0:	push   rbx
  4026a1:	sub    rsp,0xa0
  4026a8:	mov    DWORD PTR [rsp+0x90],0x0
  4026b3:	mov    QWORD PTR [rsp+0x8],0x1
  4026bc:	lea    rbx,[rsp+0x10]
  4026c1:	mov    rdi,rbx
  4026c4:	call   4022d0 <sigemptyset@plt>
  4026c9:	mov    rdi,rbx
  4026cc:	mov    esi,0xd
  4026d1:	call   402230 <sigaddset@plt>
  4026d6:	mov    rdi,rbx
  4026d9:	mov    esi,0xe
  4026de:	call   402230 <sigaddset@plt>
  4026e3:	mov    rdi,rbx
  4026e6:	mov    esi,0x5
  4026eb:	call   402230 <sigaddset@plt>
  4026f0:	mov    rdi,rbx
  4026f3:	mov    esi,0x1c
  4026f8:	call   402230 <sigaddset@plt>
  4026fd:	lea    rbx,[rsp+0x8]
  402702:	mov    edi,0x1c
  402707:	mov    rsi,rbx
  40270a:	xor    edx,edx
  40270c:	call   402190 <sigaction@plt>
  402711:	mov    edi,0xd
  402716:	mov    rsi,rbx
  402719:	xor    edx,edx
  40271b:	call   402190 <sigaction@plt>
  402720:	mov    edi,0x5
  402725:	mov    rsi,rbx
  402728:	xor    edx,edx
  40272a:	call   402190 <sigaction@plt>
  40272f:	lea    rax,[rip+0x50a]        # 402c40 <rb_base64_encode@plt+0x910>
  402736:	mov    QWORD PTR [rsp+0x8],rax
  40273b:	mov    edi,0xe
  402740:	mov    rsi,rbx
  402743:	xor    edx,edx
  402745:	call   402190 <sigaction@plt>
  40274a:	add    rsp,0xa0
  402751:	pop    rbx
  402752:	ret    
  402753:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40275d:	nop    DWORD PTR [rax]
  402760:	push   rax
  402761:	mov    rsi,rdi
  402764:	mov    edi,0x1
  402769:	call   402290 <calloc@plt>
  40276e:	test   rax,rax
  402771:	je     402775 <rb_base64_encode@plt+0x445>
  402773:	pop    rcx
  402774:	ret    
  402775:	call   402210 <rb_outofmemory@plt>
  40277a:	nop    WORD PTR [rax+rax*1+0x0]
  402780:	push   r14
  402782:	push   rbx
  402783:	push   rax
  402784:	mov    r14,QWORD PTR [rip+0x5a45]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  40278b:	nop    DWORD PTR [rax+rax*1+0x0]
  402790:	test   r14,r14
  402793:	je     4027d2 <rb_base64_encode@plt+0x4a2>
  402795:	mov    rbx,QWORD PTR [r14]
  402798:	mov    r14,QWORD PTR [r14+0x10]
  40279c:	lea    rdi,[rbx+0x58]
  4027a0:	call   402170 <rb_linebuf_donebuf@plt>
  4027a5:	lea    rdi,[rbx+0x30]
  4027a9:	call   402170 <rb_linebuf_donebuf@plt>
  4027ae:	mov    rdi,QWORD PTR [rbx+0x28]
  4027b2:	call   4021e0 <rb_free_rawbuffer@plt>
  4027b7:	mov    rdi,QWORD PTR [rbx+0x20]
  4027bb:	call   4021e0 <rb_free_rawbuffer@plt>
  4027c0:	test   rbx,rbx
  4027c3:	je     402790 <rb_base64_encode@plt+0x460>
  4027c5:	mov    rdi,rbx
  4027c8:	call   402100 <free@plt>
  4027cd:	test   r14,r14
  4027d0:	jne    402795 <rb_base64_encode@plt+0x465>
  4027d2:	vxorps xmm0,xmm0,xmm0
  4027d6:	vmovups XMMWORD PTR [rip+0x59f2],xmm0        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  4027de:	add    rsp,0x8
  4027e2:	pop    rbx
  4027e3:	pop    r14
  4027e5:	ret    
  4027e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4027f0:	push   r14
  4027f2:	push   rbx
  4027f3:	sub    rsp,0x4008
  4027fa:	mov    rbx,rdi
  4027fd:	mov    r14,rsp
  402800:	mov    rdi,rbx
  402803:	mov    rsi,r14
  402806:	mov    edx,0x4000
  40280b:	call   402130 <rb_read@plt>
  402810:	test   eax,eax
  402812:	jg     402800 <rb_base64_encode@plt+0x4d0>
  402814:	test   eax,eax
  402816:	je     402849 <rb_base64_encode@plt+0x519>
  402818:	call   402220 <__errno_location@plt>
  40281d:	mov    edi,DWORD PTR [rax]
  40281f:	call   402070 <rb_ignore_errno@plt>
  402824:	test   eax,eax
  402826:	je     402849 <rb_base64_encode@plt+0x519>
  402828:	lea    rdx,[rip+0xffffffffffffffc1]        # 4027f0 <rb_base64_encode@plt+0x4c0>
  40282f:	mov    rdi,rbx
  402832:	mov    esi,0x1
  402837:	xor    ecx,ecx
  402839:	call   402090 <rb_setselect@plt>
  40283e:	add    rsp,0x4008
  402845:	pop    rbx
  402846:	pop    r14
  402848:	ret    
  402849:	xor    edi,edi
  40284b:	call   4020b0 <exit@plt>
  402850:	push   rbp
  402851:	push   r15
  402853:	push   r14
  402855:	push   r13
  402857:	push   r12
  402859:	push   rbx
  40285a:	sub    rsp,0x18
  40285e:	mov    r14,rsi
  402861:	mov    edi,0x1
  402866:	mov    esi,0x50
  40286b:	call   402290 <calloc@plt>
  402870:	test   rax,rax
  402873:	je     402c27 <rb_base64_encode@plt+0x8f7>
  402879:	mov    rbx,rax
  40287c:	lea    r12,[r14+0x30]
  402880:	jmp    4028b0 <rb_base64_encode@plt+0x580>
  402882:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40288c:	nop    DWORD PTR [rax+0x0]
  402890:	xor    eax,eax
  402892:	mov    DWORD PTR [rbx+0x48],eax
  402895:	mov    edi,0x1
  40289a:	mov    esi,0x50
  40289f:	call   402290 <calloc@plt>
  4028a4:	mov    rbx,rax
  4028a7:	test   rax,rax
  4028aa:	je     402c27 <rb_base64_encode@plt+0x8f7>
  4028b0:	mov    edi,0x1
  4028b5:	mov    esi,0x4000
  4028ba:	call   402290 <calloc@plt>
  4028bf:	test   rax,rax
  4028c2:	je     402c27 <rb_base64_encode@plt+0x8f7>
  4028c8:	mov    QWORD PTR [rbx+0x18],rax
  4028cc:	mov    QWORD PTR [rbx+0x20],0x4000
  4028d4:	mov    rdi,QWORD PTR [r14+0x20]
  4028d8:	lea    rcx,[rbx+0x28]
  4028dc:	mov    edx,0x4000
  4028e1:	mov    rsi,rax
  4028e4:	mov    r8d,0x4
  4028ea:	call   402280 <rb_recv_fd_buf@plt>
  4028ef:	mov    ebp,eax
  4028f1:	test   eax,eax
  4028f3:	jle    402989 <rb_base64_encode@plt+0x659>
  4028f9:	movsxd rax,ebp
  4028fc:	mov    QWORD PTR [rbx+0x20],rax
  402900:	mov    QWORD PTR [rbx],rbx
  402903:	mov    QWORD PTR [rbx+0x10],0x0
  40290b:	mov    rax,QWORD PTR [r14+0x38]
  40290f:	mov    QWORD PTR [rbx+0x8],rax
  402913:	test   rax,rax
  402916:	je     402930 <rb_base64_encode@plt+0x600>
  402918:	add    rax,0x10
  40291c:	mov    QWORD PTR [rax],rbx
  40291f:	jmp    402937 <rb_base64_encode@plt+0x607>
  402921:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40292b:	nop    DWORD PTR [rax+rax*1+0x0]
  402930:	cmp    QWORD PTR [r12],0x0
  402935:	je     402984 <rb_base64_encode@plt+0x654>
  402937:	mov    QWORD PTR [r14+0x38],rbx
  40293b:	inc    QWORD PTR [r14+0x40]
  40293f:	cmp    QWORD PTR [rbx+0x28],0x0
  402944:	je     402890 <rb_base64_encode@plt+0x560>
  40294a:	cmp    QWORD PTR [rbx+0x30],0x0
  40294f:	je     402970 <rb_base64_encode@plt+0x640>
  402951:	cmp    QWORD PTR [rbx+0x38],0x0
  402956:	je     40297a <rb_base64_encode@plt+0x64a>
  402958:	cmp    QWORD PTR [rbx+0x40],0x1
  40295d:	mov    eax,0x4
  402962:	sbb    eax,0x0
  402965:	jmp    402892 <rb_base64_encode@plt+0x562>
  40296a:	nop    WORD PTR [rax+rax*1+0x0]
  402970:	mov    eax,0x1
  402975:	jmp    402892 <rb_base64_encode@plt+0x562>
  40297a:	mov    eax,0x2
  40297f:	jmp    402892 <rb_base64_encode@plt+0x562>
  402984:	mov    rax,r12
  402987:	jmp    40291c <rb_base64_encode@plt+0x5ec>
  402989:	mov    rdi,QWORD PTR [rbx+0x18]
  40298d:	test   rdi,rdi
  402990:	je     402997 <rb_base64_encode@plt+0x667>
  402992:	call   402100 <free@plt>
  402997:	mov    rdi,rbx
  40299a:	call   402100 <free@plt>
  40299f:	test   ebp,ebp
  4029a1:	je     402c2c <rb_base64_encode@plt+0x8fc>
  4029a7:	call   402220 <__errno_location@plt>
  4029ac:	mov    edi,DWORD PTR [rax]
  4029ae:	call   402070 <rb_ignore_errno@plt>
  4029b3:	test   eax,eax
  4029b5:	je     402c2c <rb_base64_encode@plt+0x8fc>
  4029bb:	mov    r13,QWORD PTR [r12]
  4029bf:	test   r13,r13
  4029c2:	je     402c01 <rb_base64_encode@plt+0x8d1>
  4029c8:	mov    QWORD PTR [rsp+0x8],r12
  4029cd:	nop    DWORD PTR [rax]
  4029d0:	mov    rbx,QWORD PTR [r13+0x0]
  4029d4:	mov    r15,QWORD PTR [r13+0x10]
  4029d8:	mov    rax,QWORD PTR [rbx+0x18]
  4029dc:	cmp    BYTE PTR [rax],0x41
  4029df:	jne    402b90 <rb_base64_encode@plt+0x860>
  4029e5:	mov    eax,DWORD PTR [rbx+0x48]
  4029e8:	cmp    eax,0x2
  4029eb:	jne    402ad0 <rb_base64_encode@plt+0x7a0>
  4029f1:	cmp    QWORD PTR [rbx+0x20],0x5
  4029f6:	jne    402ad8 <rb_base64_encode@plt+0x7a8>
  4029fc:	mov    QWORD PTR [rsp+0x10],r15
  402a01:	mov    rbp,QWORD PTR [rbx+0x28]
  402a05:	mov    r12,QWORD PTR [rbx+0x30]
  402a09:	mov    edi,0x1
  402a0e:	mov    esi,0xe0
  402a13:	call   402290 <calloc@plt>
  402a18:	test   rax,rax
  402a1b:	je     402c27 <rb_base64_encode@plt+0x8f7>
  402a21:	mov    r15,rax
  402a24:	mov    QWORD PTR [rax+0x18],r14
  402a28:	mov    QWORD PTR [rax+0x88],rbp
  402a2f:	mov    QWORD PTR [rax+0x90],r12
  402a36:	mov    DWORD PTR [rax+0x80],0xffffffff
  402a40:	mov    rdi,rbp
  402a43:	call   4020c0 <rb_set_nb@plt>
  402a48:	mov    rdi,r12
  402a4b:	call   4020c0 <rb_set_nb@plt>
  402a50:	lea    rdi,[r15+0x58]
  402a54:	call   4022b0 <rb_linebuf_newbuf@plt>
  402a59:	mov    rdi,r15
  402a5c:	add    rdi,0x30
  402a60:	call   4022b0 <rb_linebuf_newbuf@plt>
  402a65:	call   402260 <rb_new_rawbuffer@plt>
  402a6a:	mov    QWORD PTR [r15+0x28],rax
  402a6e:	call   402260 <rb_new_rawbuffer@plt>
  402a73:	mov    QWORD PTR [r15+0x20],rax
  402a77:	mov    rax,QWORD PTR [rbx+0x18]
  402a7b:	mov    eax,DWORD PTR [rax+0x1]
  402a7e:	mov    DWORD PTR [r15+0x80],eax
  402a85:	imul   rcx,rax,0x10624dd3
  402a8c:	shr    rcx,0x27
  402a90:	imul   ecx,ecx,0x7d0
  402a96:	sub    eax,ecx
  402a98:	lea    rax,[rax+rax*2]
  402a9c:	lea    rsi,[rip+0x574d]        # 4081f0 <rb_base64_encode@plt+0x5ec0>
  402aa3:	lea    rcx,[rsi+rax*8]
  402aa7:	mov    QWORD PTR [r15],r15
  402aaa:	mov    QWORD PTR [r15+0x8],0x0
  402ab2:	mov    rdx,QWORD PTR [rsi+rax*8]
  402ab6:	mov    QWORD PTR [r15+0x10],rdx
  402aba:	test   rdx,rdx
  402abd:	je     402afb <rb_base64_encode@plt+0x7cb>
  402abf:	add    rdx,0x8
  402ac3:	mov    r12,QWORD PTR [rsp+0x8]
  402ac8:	mov    QWORD PTR [rdx],r15
  402acb:	jmp    402b0c <rb_base64_encode@plt+0x7dc>
  402acd:	nop    DWORD PTR [rax]
  402ad0:	test   eax,eax
  402ad2:	jle    402b90 <rb_base64_encode@plt+0x860>
  402ad8:	xor    ebp,ebp
  402ada:	nop    WORD PTR [rax+rax*1+0x0]
  402ae0:	mov    rdi,QWORD PTR [rbx+rbp*8+0x28]
  402ae5:	call   4021b0 <rb_close@plt>
  402aea:	inc    rbp
  402aed:	movsxd rax,DWORD PTR [rbx+0x48]
  402af1:	cmp    rbp,rax
  402af4:	jl     402ae0 <rb_base64_encode@plt+0x7b0>
  402af6:	jmp    402b90 <rb_base64_encode@plt+0x860>
  402afb:	cmp    QWORD PTR [rsi+rax*8+0x8],0x0
  402b01:	mov    r12,QWORD PTR [rsp+0x8]
  402b06:	je     402bf4 <rb_base64_encode@plt+0x8c4>
  402b0c:	mov    QWORD PTR [rcx],r15
  402b0f:	inc    QWORD PTR [rsi+rax*8+0x10]
  402b14:	or     BYTE PTR [r15+0xb8],0x4
  402b1c:	mov    rdi,QWORD PTR [r15+0x88]
  402b23:	call   402040 <rb_get_type@plt>
  402b28:	test   al,0x40
  402b2a:	je     402b3d <rb_base64_encode@plt+0x80d>
  402b2c:	mov    rdi,QWORD PTR [r15+0x88]
  402b33:	mov    esi,0x4
  402b38:	call   402140 <rb_set_type@plt>
  402b3d:	mov    rdi,QWORD PTR [r15+0x90]
  402b44:	call   402040 <rb_get_type@plt>
  402b49:	cmp    al,0x40
  402b4b:	jne    402b5e <rb_base64_encode@plt+0x82e>
  402b4d:	mov    rdi,QWORD PTR [r15+0x90]
  402b54:	mov    esi,0x4
  402b59:	call   402140 <rb_set_type@plt>
  402b5e:	mov    rdi,QWORD PTR [r15+0x88]
  402b65:	mov    rsi,r15
  402b68:	call   402c50 <rb_base64_encode@plt+0x920>
  402b6d:	mov    rdi,QWORD PTR [r15+0x90]
  402b74:	mov    rsi,r15
  402b77:	call   402d90 <rb_base64_encode@plt+0xa60>
  402b7c:	mov    r15,QWORD PTR [rsp+0x10]
  402b81:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402b8b:	nop    DWORD PTR [rax+rax*1+0x0]
  402b90:	mov    rcx,QWORD PTR [r13+0x8]
  402b94:	mov    rax,QWORD PTR [r13+0x10]
  402b98:	add    r13,0x8
  402b9c:	test   rax,rax
  402b9f:	je     402bb0 <rb_base64_encode@plt+0x880>
  402ba1:	mov    QWORD PTR [rax+0x8],rcx
  402ba5:	mov    rcx,QWORD PTR [r13+0x0]
  402ba9:	jmp    402bb4 <rb_base64_encode@plt+0x884>
  402bab:	nop    DWORD PTR [rax+rax*1+0x0]
  402bb0:	mov    QWORD PTR [r14+0x38],rcx
  402bb4:	test   rcx,rcx
  402bb7:	lea    rcx,[rcx+0x10]
  402bbb:	cmove  rcx,r12
  402bbf:	mov    QWORD PTR [rcx],rax
  402bc2:	vxorps xmm0,xmm0,xmm0
  402bc6:	vmovups XMMWORD PTR [r13+0x0],xmm0
  402bcc:	dec    QWORD PTR [r14+0x40]
  402bd0:	mov    rdi,QWORD PTR [rbx+0x18]
  402bd4:	test   rdi,rdi
  402bd7:	je     402bde <rb_base64_encode@plt+0x8ae>
  402bd9:	call   402100 <free@plt>
  402bde:	mov    rdi,rbx
  402be1:	call   402100 <free@plt>
  402be6:	mov    r13,r15
  402be9:	test   r15,r15
  402bec:	jne    4029d0 <rb_base64_encode@plt+0x6a0>
  402bf2:	jmp    402c01 <rb_base64_encode@plt+0x8d1>
  402bf4:	lea    rdx,[rsi+rax*8]
  402bf8:	add    rdx,0x8
  402bfc:	jmp    402ac8 <rb_base64_encode@plt+0x798>
  402c01:	mov    rdi,QWORD PTR [r14+0x20]
  402c05:	lea    rdx,[rip+0xfffffffffffffc44]        # 402850 <rb_base64_encode@plt+0x520>
  402c0c:	mov    esi,0x1
  402c11:	mov    rcx,r14
  402c14:	add    rsp,0x18
  402c18:	pop    rbx
  402c19:	pop    r12
  402c1b:	pop    r13
  402c1d:	pop    r14
  402c1f:	pop    r15
  402c21:	pop    rbp
  402c22:	jmp    402090 <rb_setselect@plt>
  402c27:	call   402210 <rb_outofmemory@plt>
  402c2c:	xor    edi,edi
  402c2e:	call   4020b0 <exit@plt>
  402c33:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c3d:	nop    DWORD PTR [rax]
  402c40:	ret    
  402c41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c4b:	nop    DWORD PTR [rax+rax*1+0x0]
  402c50:	push   r15
  402c52:	push   r14
  402c54:	push   r12
  402c56:	push   rbx
  402c57:	sub    rsp,0x4008
  402c5e:	mov    r12,rsi
  402c61:	mov    r14,rdi
  402c64:	mov    rdi,rsp
  402c67:	mov    edx,0x4000
  402c6c:	xor    esi,esi
  402c6e:	call   402050 <memset@plt>
  402c73:	test   r12,r12
  402c76:	je     402d75 <rb_base64_encode@plt+0xa45>
  402c7c:	test   BYTE PTR [r12+0xb8],0x2
  402c85:	jne    402d75 <rb_base64_encode@plt+0xa45>
  402c8b:	jne    402d75 <rb_base64_encode@plt+0xa45>
  402c91:	mov    r15,rsp
  402c94:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c9e:	xchg   ax,ax
  402ca0:	mov    rdi,r14
  402ca3:	mov    rsi,r15
  402ca6:	mov    edx,0x4000
  402cab:	call   402130 <rb_read@plt>
  402cb0:	mov    rbx,rax
  402cb3:	test   ebx,ebx
  402cb5:	js     402d10 <rb_base64_encode@plt+0x9e0>
  402cb7:	je     402d49 <rb_base64_encode@plt+0xa19>
  402cbd:	mov    rdi,QWORD PTR [r12+0x28]
  402cc2:	mov    rsi,r15
  402cc5:	mov    edx,ebx
  402cc7:	call   4022f0 <rb_rawbuf_append@plt>
  402ccc:	test   BYTE PTR [r12+0xb8],0x8
  402cd5:	jne    402cf0 <rb_base64_encode@plt+0x9c0>
  402cd7:	mov    rdi,r12
  402cda:	call   403250 <rb_base64_encode@plt+0xf20>
  402cdf:	jmp    402cf8 <rb_base64_encode@plt+0x9c8>
  402ce1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402ceb:	nop    DWORD PTR [rax+rax*1+0x0]
  402cf0:	mov    rdi,r12
  402cf3:	call   403480 <rb_base64_encode@plt+0x1150>
  402cf8:	movsxd rax,ebx
  402cfb:	cmp    rax,0x4000
  402d01:	jb     402d5e <rb_base64_encode@plt+0xa2e>
  402d03:	test   BYTE PTR [r12+0xb8],0x2
  402d0c:	je     402ca0 <rb_base64_encode@plt+0x970>
  402d0e:	jmp    402d75 <rb_base64_encode@plt+0xa45>
  402d10:	call   402220 <__errno_location@plt>
  402d15:	mov    edi,DWORD PTR [rax]
  402d17:	call   402070 <rb_ignore_errno@plt>
  402d1c:	test   eax,eax
  402d1e:	je     402d49 <rb_base64_encode@plt+0xa19>
  402d20:	lea    rdx,[rip+0xffffffffffffff29]        # 402c50 <rb_base64_encode@plt+0x920>
  402d27:	mov    rdi,r14
  402d2a:	mov    esi,0x1
  402d2f:	mov    rcx,r12
  402d32:	call   402090 <rb_setselect@plt>
  402d37:	mov    rdi,QWORD PTR [r12+0x90]
  402d3f:	mov    rsi,r12
  402d42:	call   402ee0 <rb_base64_encode@plt+0xbb0>
  402d47:	jmp    402d75 <rb_base64_encode@plt+0xa45>
  402d49:	lea    rdx,[rip+0x3389]        # 4060d9 <rb_base64_encode@plt+0x3da9>
  402d50:	mov    rdi,r12
  402d53:	xor    esi,esi
  402d55:	xor    eax,eax
  402d57:	call   402f80 <rb_base64_encode@plt+0xc50>
  402d5c:	jmp    402d75 <rb_base64_encode@plt+0xa45>
  402d5e:	lea    rdx,[rip+0xfffffffffffffeeb]        # 402c50 <rb_base64_encode@plt+0x920>
  402d65:	mov    rdi,r14
  402d68:	mov    esi,0x1
  402d6d:	mov    rcx,r12
  402d70:	call   402090 <rb_setselect@plt>
  402d75:	add    rsp,0x4008
  402d7c:	pop    rbx
  402d7d:	pop    r12
  402d7f:	pop    r14
  402d81:	pop    r15
  402d83:	ret    
  402d84:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402d8e:	xchg   ax,ax
  402d90:	push   r15
  402d92:	push   r14
  402d94:	push   rbx
  402d95:	sub    rsp,0x4000
  402d9c:	mov    rbx,rsi
  402d9f:	mov    rdi,rsp
  402da2:	mov    edx,0x4000
  402da7:	xor    esi,esi
  402da9:	call   402050 <memset@plt>
  402dae:	test   rbx,rbx
  402db1:	je     402eca <rb_base64_encode@plt+0xb9a>
  402db7:	test   BYTE PTR [rbx+0xb8],0x2
  402dbe:	jne    402eca <rb_base64_encode@plt+0xb9a>
  402dc4:	mov    rdi,QWORD PTR [rbx+0x20]
  402dc8:	call   4021d0 <rb_rawbuf_length@plt>
  402dcd:	cmp    eax,0xfff
  402dd2:	jle    402e11 <rb_base64_encode@plt+0xae1>
  402dd4:	or     BYTE PTR [rbx+0xb8],0x1
  402ddb:	mov    rdi,QWORD PTR [rbx+0x90]
  402de2:	mov    esi,0x1
  402de7:	xor    edx,edx
  402de9:	xor    ecx,ecx
  402deb:	call   402090 <rb_setselect@plt>
  402df0:	test   BYTE PTR [rbx+0xb8],0x8
  402df7:	je     402eca <rb_base64_encode@plt+0xb9a>
  402dfd:	mov    rdi,QWORD PTR [rbx+0x88]
  402e04:	mov    rsi,rbx
  402e07:	call   403cd0 <rb_base64_encode@plt+0x19a0>
  402e0c:	jmp    402eca <rb_base64_encode@plt+0xb9a>
  402e11:	lea    r14,[rbx+0x58]
  402e15:	mov    r15,rsp
  402e18:	nop    DWORD PTR [rax+rax*1+0x0]
  402e20:	test   BYTE PTR [rbx+0xb8],0x2
  402e27:	jne    402eca <rb_base64_encode@plt+0xb9a>
  402e2d:	mov    rdi,QWORD PTR [rbx+0x90]
  402e34:	mov    rsi,r15
  402e37:	mov    edx,0x4000
  402e3c:	call   402130 <rb_read@plt>
  402e41:	test   eax,eax
  402e43:	je     402ebc <rb_base64_encode@plt+0xb8c>
  402e45:	js     402e7e <rb_base64_encode@plt+0xb4e>
  402e47:	movsxd rcx,eax
  402e4a:	add    QWORD PTR [rbx+0xa8],rcx
  402e51:	mov    rdi,r14
  402e54:	mov    rsi,r15
  402e57:	mov    edx,eax
  402e59:	xor    ecx,ecx
  402e5b:	call   4020d0 <rb_linebuf_parse@plt>
  402e60:	test   BYTE PTR [rbx+0xb8],0x2
  402e67:	jne    402eca <rb_base64_encode@plt+0xb9a>
  402e69:	mov    rdi,QWORD PTR [rbx+0x20]
  402e6d:	call   4021d0 <rb_rawbuf_length@plt>
  402e72:	cmp    eax,0x1000
  402e77:	jl     402e20 <rb_base64_encode@plt+0xaf0>
  402e79:	jmp    402dd4 <rb_base64_encode@plt+0xaa4>
  402e7e:	call   402220 <__errno_location@plt>
  402e83:	mov    edi,DWORD PTR [rax]
  402e85:	call   402070 <rb_ignore_errno@plt>
  402e8a:	test   eax,eax
  402e8c:	je     402ebc <rb_base64_encode@plt+0xb8c>
  402e8e:	mov    rdi,QWORD PTR [rbx+0x90]
  402e95:	lea    rdx,[rip+0xfffffffffffffef4]        # 402d90 <rb_base64_encode@plt+0xa60>
  402e9c:	mov    esi,0x1
  402ea1:	mov    rcx,rbx
  402ea4:	call   402090 <rb_setselect@plt>
  402ea9:	test   BYTE PTR [rbx+0xb8],0x8
  402eb0:	je     402eca <rb_base64_encode@plt+0xb9a>
  402eb2:	mov    rdi,rbx
  402eb5:	call   403ab0 <rb_base64_encode@plt+0x1780>
  402eba:	jmp    402eca <rb_base64_encode@plt+0xb9a>
  402ebc:	mov    rdi,rbx
  402ebf:	xor    esi,esi
  402ec1:	xor    edx,edx
  402ec3:	xor    eax,eax
  402ec5:	call   402f80 <rb_base64_encode@plt+0xc50>
  402eca:	add    rsp,0x4000
  402ed1:	pop    rbx
  402ed2:	pop    r14
  402ed4:	pop    r15
  402ed6:	ret    
  402ed7:	nop    WORD PTR [rax+rax*1+0x0]
  402ee0:	push   r15
  402ee2:	push   r14
  402ee4:	push   rbx
  402ee5:	test   BYTE PTR [rsi+0xb8],0x2
  402eec:	jne    402f1a <rb_base64_encode@plt+0xbea>
  402eee:	mov    r14,rsi
  402ef1:	mov    r15,rdi
  402ef4:	lea    rbx,[rsi+0x30]
  402ef8:	nop    DWORD PTR [rax+rax*1+0x0]
  402f00:	mov    rdi,r15
  402f03:	mov    rsi,rbx
  402f06:	call   402160 <rb_linebuf_flush@plt>
  402f0b:	test   eax,eax
  402f0d:	jle    402f20 <rb_base64_encode@plt+0xbf0>
  402f0f:	cdqe   
  402f11:	add    QWORD PTR [r14+0xb0],rax
  402f18:	jmp    402f00 <rb_base64_encode@plt+0xbd0>
  402f1a:	pop    rbx
  402f1b:	pop    r14
  402f1d:	pop    r15
  402f1f:	ret    
  402f20:	test   eax,eax
  402f22:	je     402f53 <rb_base64_encode@plt+0xc23>
  402f24:	call   402220 <__errno_location@plt>
  402f29:	mov    edi,DWORD PTR [rax]
  402f2b:	call   402070 <rb_ignore_errno@plt>
  402f30:	test   eax,eax
  402f32:	je     402f53 <rb_base64_encode@plt+0xc23>
  402f34:	cmp    DWORD PTR [r14+0x4c],0x0
  402f39:	mov    rdi,QWORD PTR [r14+0x90]
  402f40:	jle    402f63 <rb_base64_encode@plt+0xc33>
  402f42:	lea    rdx,[rip+0xffffffffffffff97]        # 402ee0 <rb_base64_encode@plt+0xbb0>
  402f49:	mov    esi,0x2
  402f4e:	mov    rcx,r14
  402f51:	jmp    402f6c <rb_base64_encode@plt+0xc3c>
  402f53:	mov    rdi,r14
  402f56:	xor    esi,esi
  402f58:	xor    edx,edx
  402f5a:	xor    eax,eax
  402f5c:	pop    rbx
  402f5d:	pop    r14
  402f5f:	pop    r15
  402f61:	jmp    402f80 <rb_base64_encode@plt+0xc50>
  402f63:	mov    esi,0x2
  402f68:	xor    edx,edx
  402f6a:	xor    ecx,ecx
  402f6c:	pop    rbx
  402f6d:	pop    r14
  402f6f:	pop    r15
  402f71:	jmp    402090 <rb_setselect@plt>
  402f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402f80:	push   rbp
  402f81:	push   r15
  402f83:	push   r14
  402f85:	push   rbx
  402f86:	sub    rsp,0x258
  402f8d:	mov    r14,rdx
  402f90:	mov    r15d,esi
  402f93:	mov    rbx,rdi
  402f96:	test   al,al
  402f98:	je     402fd9 <rb_base64_encode@plt+0xca9>
  402f9a:	vmovaps XMMWORD PTR [rsp+0x50],xmm0
  402fa0:	vmovaps XMMWORD PTR [rsp+0x60],xmm1
  402fa6:	vmovaps XMMWORD PTR [rsp+0x70],xmm2
  402fac:	vmovaps XMMWORD PTR [rsp+0x80],xmm3
  402fb5:	vmovaps XMMWORD PTR [rsp+0x90],xmm4
  402fbe:	vmovaps XMMWORD PTR [rsp+0xa0],xmm5
  402fc7:	vmovaps XMMWORD PTR [rsp+0xb0],xmm6
  402fd0:	vmovaps XMMWORD PTR [rsp+0xc0],xmm7
  402fd9:	mov    QWORD PTR [rsp+0x38],rcx
  402fde:	mov    QWORD PTR [rsp+0x40],r8
  402fe3:	mov    QWORD PTR [rsp+0x48],r9
  402fe8:	movzx  eax,BYTE PTR [rbx+0xb8]
  402fef:	test   al,0x2
  402ff1:	jne    40322d <rb_base64_encode@plt+0xefd>
  402ff7:	test   al,0x8
  402ff9:	je     403003 <rb_base64_encode@plt+0xcd3>
  402ffb:	mov    rdi,rbx
  402ffe:	call   403ab0 <rb_base64_encode@plt+0x1780>
  403003:	mov    rdi,QWORD PTR [rbx+0x20]
  403007:	mov    rsi,QWORD PTR [rbx+0x88]
  40300e:	call   402300 <rb_rawbuf_flush@plt>
  403013:	mov    rdi,QWORD PTR [rbx+0x90]
  40301a:	lea    rsi,[rbx+0x30]
  40301e:	call   402160 <rb_linebuf_flush@plt>
  403023:	mov    rdi,QWORD PTR [rbx+0x88]
  40302a:	call   4021b0 <rb_close@plt>
  40302f:	or     BYTE PTR [rbx+0xb8],0x2
  403036:	mov    eax,DWORD PTR [rbx+0x80]
  40303c:	imul   rcx,rax,0x10624dd3
  403043:	shr    rcx,0x27
  403047:	imul   ecx,ecx,0x7d0
  40304d:	sub    eax,ecx
  40304f:	lea    rax,[rax+rax*2]
  403053:	lea    rcx,[rip+0x5196]        # 4081f0 <rb_base64_encode@plt+0x5ec0>
  40305a:	lea    rdx,[rcx+rax*8]
  40305e:	mov    rbp,QWORD PTR [rbx+0x8]
  403062:	mov    rdi,QWORD PTR [rbx+0x10]
  403066:	lea    rsi,[rbx+0x8]
  40306a:	test   rdi,rdi
  40306d:	je     403078 <rb_base64_encode@plt+0xd48>
  40306f:	mov    QWORD PTR [rdi+0x8],rbp
  403073:	mov    rbp,QWORD PTR [rsi]
  403076:	jmp    40307d <rb_base64_encode@plt+0xd4d>
  403078:	mov    QWORD PTR [rcx+rax*8+0x8],rbp
  40307d:	test   rbp,rbp
  403080:	lea    rbp,[rbp+0x10]
  403084:	cmove  rbp,rdx
  403088:	mov    QWORD PTR [rbp+0x0],rdi
  40308c:	vxorps xmm0,xmm0,xmm0
  403090:	vmovups XMMWORD PTR [rsi],xmm0
  403094:	dec    QWORD PTR [rcx+rax*8+0x10]
  403099:	mov    rdi,QWORD PTR [rbx+0x90]
  4030a0:	test   r15d,r15d
  4030a3:	je     4031cf <rb_base64_encode@plt+0xe9f>
  4030a9:	test   r14,r14
  4030ac:	je     4031cf <rb_base64_encode@plt+0xe9f>
  4030b2:	lea    rdx,[rip+0xb47]        # 403c00 <rb_base64_encode@plt+0x18d0>
  4030b9:	mov    esi,0x1
  4030be:	mov    rcx,rbx
  4030c1:	call   402090 <rb_setselect@plt>
  4030c6:	mov    rdi,QWORD PTR [rbx+0x90]
  4030cd:	mov    esi,0x2
  4030d2:	xor    edx,edx
  4030d4:	xor    ecx,ecx
  4030d6:	call   402090 <rb_setselect@plt>
  4030db:	lea    rax,[rsp+0x20]
  4030e0:	mov    QWORD PTR [rsp+0x10],rax
  4030e5:	lea    rax,[rsp+0x280]
  4030ed:	mov    QWORD PTR [rsp+0x8],rax
  4030f2:	movabs rax,0x3000000018
  4030fc:	mov    QWORD PTR [rsp],rax
  403100:	lea    rbp,[rsp+0x1d0]
  403108:	mov    rcx,rsp
  40310b:	mov    esi,0x80
  403110:	mov    rdi,rbp
  403113:	mov    rdx,r14
  403116:	call   4021f0 <vsnprintf@plt>
  40311b:	mov    BYTE PTR [rsp+0xd0],0x44
  403123:	mov    eax,DWORD PTR [rbx+0x80]
  403129:	mov    DWORD PTR [rsp+0xd1],eax
  403130:	lea    rdi,[rsp+0xd5]
  403138:	mov    edx,0xfb
  40313d:	mov    rsi,rbp
  403140:	call   4020e0 <rb_strlcpy@plt>
  403145:	mov    rdi,rbp
  403148:	call   402110 <strlen@plt>
  40314d:	mov    r15,rax
  403150:	mov    r14,QWORD PTR [rbx+0x18]
  403154:	mov    edi,0x1
  403159:	mov    esi,0x50
  40315e:	call   402290 <calloc@plt>
  403163:	test   rax,rax
  403166:	je     40324a <rb_base64_encode@plt+0xf1a>
  40316c:	mov    rbp,rax
  40316f:	shl    r15,0x20
  403173:	movabs rbx,0x600000000
  40317d:	add    rbx,r15
  403180:	sar    rbx,0x20
  403184:	mov    edi,0x1
  403189:	mov    rsi,rbx
  40318c:	call   402290 <calloc@plt>
  403191:	test   rax,rax
  403194:	je     40324a <rb_base64_encode@plt+0xf1a>
  40319a:	mov    QWORD PTR [rbp+0x18],rax
  40319e:	mov    QWORD PTR [rbp+0x20],rbx
  4031a2:	lea    rsi,[rsp+0xd0]
  4031aa:	mov    rdi,rax
  4031ad:	mov    rdx,rbx
  4031b0:	call   402310 <memcpy@plt>
  4031b5:	mov    QWORD PTR [rbp+0x0],rbp
  4031b9:	mov    rax,QWORD PTR [r14+0x50]
  4031bd:	mov    QWORD PTR [rbp+0x8],rax
  4031c1:	test   rax,rax
  4031c4:	je     403212 <rb_base64_encode@plt+0xee2>
  4031c6:	add    rax,0x10
  4031ca:	mov    QWORD PTR [rax],rbp
  4031cd:	jmp    403219 <rb_base64_encode@plt+0xee9>
  4031cf:	call   4021b0 <rb_close@plt>
  4031d4:	mov    QWORD PTR [rbx],rbx
  4031d7:	mov    QWORD PTR [rbx+0x8],0x0
  4031df:	mov    rax,QWORD PTR [rip+0x4fea]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  4031e6:	mov    QWORD PTR [rbx+0x10],rax
  4031ea:	test   rax,rax
  4031ed:	je     4031f8 <rb_base64_encode@plt+0xec8>
  4031ef:	add    rax,0x8
  4031f3:	mov    QWORD PTR [rax],rbx
  4031f6:	jmp    403202 <rb_base64_encode@plt+0xed2>
  4031f8:	cmp    QWORD PTR [rip+0x4fd8],0x0        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403200:	je     40323b <rb_base64_encode@plt+0xf0b>
  403202:	mov    QWORD PTR [rip+0x4fc7],rbx        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  403209:	inc    QWORD PTR [rip+0x4fd0]        # 4081e0 <rb_base64_encode@plt+0x5eb0>
  403210:	jmp    40322d <rb_base64_encode@plt+0xefd>
  403212:	cmp    QWORD PTR [r14+0x48],0x0
  403217:	je     403244 <rb_base64_encode@plt+0xf14>
  403219:	mov    QWORD PTR [r14+0x50],rbp
  40321d:	inc    QWORD PTR [r14+0x58]
  403221:	mov    rdi,QWORD PTR [r14+0x20]
  403225:	mov    rsi,r14
  403228:	call   403de0 <rb_base64_encode@plt+0x1ab0>
  40322d:	add    rsp,0x258
  403234:	pop    rbx
  403235:	pop    r14
  403237:	pop    r15
  403239:	pop    rbp
  40323a:	ret    
  40323b:	lea    rax,[rip+0x4f96]        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403242:	jmp    4031f3 <rb_base64_encode@plt+0xec3>
  403244:	lea    rax,[r14+0x48]
  403248:	jmp    4031ca <rb_base64_encode@plt+0xe9a>
  40324a:	call   402210 <rb_outofmemory@plt>
  40324f:	nop
  403250:	push   rbp
  403251:	push   r15
  403253:	push   r14
  403255:	push   r13
  403257:	push   r12
  403259:	push   rbx
  40325a:	sub    rsp,0x4088
  403261:	mov    r12,rdi
  403264:	lea    rbx,[rsp+0x80]
  40326c:	mov    edx,0x4000
  403271:	mov    rdi,rbx
  403274:	xor    esi,esi
  403276:	call   402050 <memset@plt>
  40327b:	mov    rdi,QWORD PTR [r12+0x28]
  403280:	mov    rsi,rbx
  403283:	mov    edx,0x4000
  403288:	call   402240 <rb_rawbuf_get@plt>
  40328d:	test   eax,eax
  40328f:	je     40336a <rb_base64_encode@plt+0x103a>
  403295:	lea    rbx,[rsp+0x4080]
  40329d:	lea    r14,[r12+0xb9]
  4032a5:	lea    rbp,[rsp+0x406e]
  4032ad:	lea    r15,[rip+0x2e69]        # 40611d <rb_base64_encode@plt+0x3ded>
  4032b4:	lea    r13,[rsp+0x80]
  4032bc:	jmp    4032ed <rb_base64_encode@plt+0xfbd>
  4032be:	mov    rsi,rbx
  4032c1:	mov    edx,0x25
  4032c6:	mov    rdi,r14
  4032c9:	call   4020e0 <rb_strlcpy@plt>
  4032ce:	or     BYTE PTR [r12+0xb8],0x8
  4032d7:	mov    rdi,QWORD PTR [r12+0x28]
  4032dc:	mov    rsi,r13
  4032df:	mov    edx,0x4000
  4032e4:	call   402240 <rb_rawbuf_get@plt>
  4032e9:	test   eax,eax
  4032eb:	je     40336a <rb_base64_encode@plt+0x103a>
  4032ed:	mov    rdi,r13
  4032f0:	mov    rsi,r15
  4032f3:	call   4021a0 <rb_strcasestr@plt>
  4032f8:	test   rax,rax
  4032fb:	je     4032d7 <rb_base64_encode@plt+0xfa7>
  4032fd:	lea    rsi,[rax+0x12]
  403301:	cmp    rsi,rbx
  403304:	jb     403318 <rb_base64_encode@plt+0xfe8>
  403306:	cmp    rsi,rbx
  403309:	jae    4032c1 <rb_base64_encode@plt+0xf91>
  40330b:	jmp    403332 <rb_base64_encode@plt+0x1002>
  40330d:	nop    DWORD PTR [rax]
  403310:	inc    rax
  403313:	cmp    rbp,rax
  403316:	je     4032be <rb_base64_encode@plt+0xf8e>
  403318:	movzx  ecx,BYTE PTR [rax+0x12]
  40331c:	cmp    cl,0x20
  40331f:	je     403310 <rb_base64_encode@plt+0xfe0>
  403321:	cmp    cl,0x9
  403324:	je     403310 <rb_base64_encode@plt+0xfe0>
  403326:	add    rax,0x12
  40332a:	mov    rsi,rax
  40332d:	cmp    rsi,rbx
  403330:	jae    4032c1 <rb_base64_encode@plt+0xf91>
  403332:	mov    rax,rsi
  403335:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40333f:	nop
  403340:	movzx  ecx,BYTE PTR [rax]
  403343:	test   cl,cl
  403345:	je     4032c1 <rb_base64_encode@plt+0xf91>
  40334b:	cmp    cl,0xd
  40334e:	je     403362 <rb_base64_encode@plt+0x1032>
  403350:	cmp    cl,0xa
  403353:	je     403362 <rb_base64_encode@plt+0x1032>
  403355:	inc    rax
  403358:	cmp    rbx,rax
  40335b:	jne    403340 <rb_base64_encode@plt+0x1010>
  40335d:	jmp    4032c1 <rb_base64_encode@plt+0xf91>
  403362:	mov    BYTE PTR [rax],0x0
  403365:	jmp    4032c1 <rb_base64_encode@plt+0xf91>
  40336a:	test   BYTE PTR [r12+0xb8],0x8
  403373:	je     4033f3 <rb_base64_encode@plt+0x10c3>
  403375:	lea    r14,[rsp+0x20]
  40337a:	mov    rdi,r14
  40337d:	call   403f30 <rb_base64_encode@plt+0x1c00>
  403382:	lea    rbx,[r12+0xb9]
  40338a:	mov    rdi,rbx
  40338d:	call   402110 <strlen@plt>
  403392:	mov    rdi,r14
  403395:	mov    rsi,rbx
  403398:	mov    rdx,rax
  40339b:	call   403f50 <rb_base64_encode@plt+0x1c20>
  4033a0:	lea    rsi,[rip+0x2d89]        # 406130 <rb_base64_encode@plt+0x3e00>
  4033a7:	mov    edx,0x24
  4033ac:	mov    rdi,r14
  4033af:	call   403f50 <rb_base64_encode@plt+0x1c20>
  4033b4:	mov    rbx,rsp
  4033b7:	mov    rdi,r14
  4033ba:	mov    rsi,rbx
  4033bd:	call   405330 <rb_base64_encode@plt+0x3000>
  4033c2:	mov    rdi,rbx
  4033c5:	mov    esi,0x14
  4033ca:	call   402330 <rb_base64_encode@plt>
  4033cf:	mov    rbx,rax
  4033d2:	mov    al,BYTE PTR [r12+0xb8]
  4033da:	test   al,0x2
  4033dc:	je     403415 <rb_base64_encode@plt+0x10e5>
  4033de:	test   al,0x2
  4033e0:	je     403437 <rb_base64_encode@plt+0x1107>
  4033e2:	test   al,0x2
  4033e4:	je     40345a <rb_base64_encode@plt+0x112a>
  4033e6:	test   rbx,rbx
  4033e9:	je     4033f3 <rb_base64_encode@plt+0x10c3>
  4033eb:	mov    rdi,rbx
  4033ee:	call   402100 <free@plt>
  4033f3:	mov    rdi,QWORD PTR [r12+0x88]
  4033fb:	mov    rsi,r12
  4033fe:	call   403cd0 <rb_base64_encode@plt+0x19a0>
  403403:	add    rsp,0x4088
  40340a:	pop    rbx
  40340b:	pop    r12
  40340d:	pop    r13
  40340f:	pop    r14
  403411:	pop    r15
  403413:	pop    rbp
  403414:	ret    
  403415:	mov    rdi,QWORD PTR [r12+0x20]
  40341a:	lea    rsi,[rip+0x2d34]        # 406155 <rb_base64_encode@plt+0x3e25>
  403421:	mov    edx,0x81
  403426:	call   4022f0 <rb_rawbuf_append@plt>
  40342b:	mov    al,BYTE PTR [r12+0xb8]
  403433:	test   al,0x2
  403435:	jne    4033e2 <rb_base64_encode@plt+0x10b2>
  403437:	mov    rdi,rbx
  40343a:	call   402110 <strlen@plt>
  40343f:	mov    rdi,QWORD PTR [r12+0x20]
  403444:	mov    rsi,rbx
  403447:	mov    edx,eax
  403449:	call   4022f0 <rb_rawbuf_append@plt>
  40344e:	mov    al,BYTE PTR [r12+0xb8]
  403456:	test   al,0x2
  403458:	jne    4033e6 <rb_base64_encode@plt+0x10b6>
  40345a:	mov    rdi,QWORD PTR [r12+0x20]
  40345f:	lea    rsi,[rip+0x2d71]        # 4061d7 <rb_base64_encode@plt+0x3ea7>
  403466:	mov    edx,0x4
  40346b:	call   4022f0 <rb_rawbuf_append@plt>
  403470:	test   rbx,rbx
  403473:	jne    4033eb <rb_base64_encode@plt+0x10bb>
  403479:	jmp    4033f3 <rb_base64_encode@plt+0x10c3>
  40347e:	xchg   ax,ax
  403480:	push   rbp
  403481:	push   r15
  403483:	push   r14
  403485:	push   r13
  403487:	push   r12
  403489:	push   rbx
  40348a:	sub    rsp,0x4028
  403491:	mov    r14,rdi
  403494:	mov    rdi,QWORD PTR [rdi+0x28]
  403498:	lea    rsi,[rsp+0x10]
  40349d:	mov    edx,0x2
  4034a2:	call   402240 <rb_rawbuf_get@plt>
  4034a7:	cmp    eax,0x2
  4034aa:	jne    403a80 <rb_base64_encode@plt+0x1750>
  4034b0:	lea    rbp,[r14+0x30]
  4034b4:	lea    r15,[rsp+0x10]
  4034b9:	lea    r12,[rsp+0x20]
  4034be:	mov    QWORD PTR [rsp+0x18],rbp
  4034c3:	jmp    4034ff <rb_base64_encode@plt+0x11cf>
  4034c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034cf:	nop
  4034d0:	mov    rdi,rbp
  4034d3:	mov    rsi,r12
  4034d6:	mov    edx,eax
  4034d8:	mov    ecx,0x1
  4034dd:	vzeroupper 
  4034e0:	call   4020d0 <rb_linebuf_parse@plt>
  4034e5:	mov    rdi,QWORD PTR [r14+0x28]
  4034e9:	mov    rsi,r15
  4034ec:	mov    edx,0x2
  4034f1:	call   402240 <rb_rawbuf_get@plt>
  4034f6:	cmp    eax,0x2
  4034f9:	jne    403a80 <rb_base64_encode@plt+0x1750>
  4034ff:	movzx  r13d,BYTE PTR [rsp+0x11]
  403505:	mov    edx,r13d
  403508:	and    edx,0x7f
  40350b:	mov    BYTE PTR [rsp+0x11],dl
  40350f:	cmp    edx,0x7f
  403512:	je     4034e5 <rb_base64_encode@plt+0x11b5>
  403514:	shr    r13b,0x7
  403518:	cmp    edx,0x7e
  40351b:	jne    403590 <rb_base64_encode@plt+0x1260>
  40351d:	mov    edx,0x4000
  403522:	mov    rdi,r12
  403525:	xor    esi,esi
  403527:	call   402050 <memset@plt>
  40352c:	mov    rdi,QWORD PTR [r14+0x28]
  403530:	lea    rsi,[rsp+0x16]
  403535:	mov    edx,0x2
  40353a:	call   402240 <rb_rawbuf_get@plt>
  40353f:	test   eax,eax
  403541:	je     403744 <rb_base64_encode@plt+0x1414>
  403547:	movzx  eax,WORD PTR [rsp+0x16]
  40354c:	movbe  WORD PTR [rsp+0x16],ax
  403553:	test   r13b,r13b
  403556:	je     403758 <rb_base64_encode@plt+0x1428>
  40355c:	mov    rdi,QWORD PTR [r14+0x28]
  403560:	lea    rsi,[rsp+0xc]
  403565:	mov    edx,0x4
  40356a:	call   402240 <rb_rawbuf_get@plt>
  40356f:	test   eax,eax
  403571:	je     403730 <rb_base64_encode@plt+0x1400>
  403577:	movzx  eax,WORD PTR [rsp+0x16]
  40357c:	jmp    40375c <rb_base64_encode@plt+0x142c>
  403581:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40358b:	nop    DWORD PTR [rax+rax*1+0x0]
  403590:	test   r13b,r13b
  403593:	je     4035b5 <rb_base64_encode@plt+0x1285>
  403595:	mov    rdi,QWORD PTR [r14+0x28]
  403599:	lea    rsi,[rsp+0xc]
  40359e:	mov    edx,0x4
  4035a3:	call   402240 <rb_rawbuf_get@plt>
  4035a8:	test   eax,eax
  4035aa:	je     403730 <rb_base64_encode@plt+0x1400>
  4035b0:	movzx  edx,BYTE PTR [rsp+0x11]
  4035b5:	mov    rdi,QWORD PTR [r14+0x28]
  4035b9:	mov    rsi,r12
  4035bc:	call   402240 <rb_rawbuf_get@plt>
  4035c1:	test   eax,eax
  4035c3:	je     4038e0 <rb_base64_encode@plt+0x15b0>
  4035c9:	test   r13b,r13b
  4035cc:	je     4034d0 <rb_base64_encode@plt+0x11a0>
  4035d2:	test   eax,eax
  4035d4:	jle    4034d0 <rb_base64_encode@plt+0x11a0>
  4035da:	mov    r9d,eax
  4035dd:	cmp    eax,0x80
  4035e2:	jb     4038fb <rb_base64_encode@plt+0x15cb>
  4035e8:	lea    rdx,[r9-0x1]
  4035ec:	mov    ecx,0x0
  4035f1:	cmp    rdx,0x3
  4035f5:	ja     4038fd <rb_base64_encode@plt+0x15cd>
  4035fb:	mov    ecx,r9d
  4035fe:	and    ecx,0xffffff80
  403601:	lea    rsi,[rcx-0x80]
  403605:	mov    rdi,rsi
  403608:	shr    rdi,0x7
  40360c:	inc    rdi
  40360f:	mov    edx,edi
  403611:	and    edx,0x1
  403614:	test   rsi,rsi
  403617:	je     4039b0 <rb_base64_encode@plt+0x1680>
  40361d:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  403623:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  403629:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  40362f:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  403635:	mov    rsi,rdx
  403638:	sub    rsi,rdi
  40363b:	xor    edi,edi
  40363d:	nop    DWORD PTR [rax]
  403640:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  403646:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  40364c:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  403652:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  40365b:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm4
  403661:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm5
  403667:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm6
  40366d:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm7
  403676:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0xa0]
  40367f:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0xc0]
  403688:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0xe0]
  403691:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x100]
  40369a:	vmovups YMMWORD PTR [rsp+rdi*1+0xa0],ymm4
  4036a3:	vmovups YMMWORD PTR [rsp+rdi*1+0xc0],ymm5
  4036ac:	vmovups YMMWORD PTR [rsp+rdi*1+0xe0],ymm6
  4036b5:	vmovups YMMWORD PTR [rsp+rdi*1+0x100],ymm7
  4036be:	add    rdi,0x100
  4036c5:	add    rsi,0x2
  4036c9:	jne    403640 <rb_base64_encode@plt+0x1310>
  4036cf:	test   rdx,rdx
  4036d2:	je     403722 <rb_base64_encode@plt+0x13f2>
  4036d4:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  4036da:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  4036e0:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  4036e6:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  4036ec:	vxorps ymm0,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  4036f2:	vxorps ymm1,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  4036f8:	vxorps ymm2,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  4036fe:	vxorps ymm3,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  403707:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm0
  40370d:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm1
  403713:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm2
  403719:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm3
  403722:	cmp    rcx,r9
  403725:	je     4034d0 <rb_base64_encode@plt+0x11a0>
  40372b:	jmp    4038fd <rb_base64_encode@plt+0x15cd>
  403730:	mov    rdi,r14
  403733:	mov    esi,0x1
  403738:	lea    rdx,[rip+0x2acb]        # 40620a <rb_base64_encode@plt+0x3eda>
  40373f:	jmp    4038ef <rb_base64_encode@plt+0x15bf>
  403744:	mov    rdi,r14
  403747:	mov    esi,0x1
  40374c:	lea    rdx,[rip+0x2a89]        # 4061dc <rb_base64_encode@plt+0x3eac>
  403753:	jmp    4038ef <rb_base64_encode@plt+0x15bf>
  403758:	rol    ax,0x8
  40375c:	mov    rdi,QWORD PTR [r14+0x28]
  403760:	movzx  edx,ax
  403763:	mov    rsi,r12
  403766:	call   402240 <rb_rawbuf_get@plt>
  40376b:	test   eax,eax
  40376d:	je     4038e0 <rb_base64_encode@plt+0x15b0>
  403773:	test   r13b,r13b
  403776:	je     4034d0 <rb_base64_encode@plt+0x11a0>
  40377c:	test   eax,eax
  40377e:	jle    4034d0 <rb_base64_encode@plt+0x11a0>
  403784:	mov    r9d,eax
  403787:	cmp    eax,0x80
  40378c:	jb     4039c0 <rb_base64_encode@plt+0x1690>
  403792:	lea    rdx,[r9-0x1]
  403796:	mov    ecx,0x0
  40379b:	cmp    rdx,0x3
  40379f:	ja     4039c2 <rb_base64_encode@plt+0x1692>
  4037a5:	mov    ecx,r9d
  4037a8:	and    ecx,0xffffff80
  4037ab:	lea    rsi,[rcx-0x80]
  4037af:	mov    rdi,rsi
  4037b2:	shr    rdi,0x7
  4037b6:	inc    rdi
  4037b9:	mov    edx,edi
  4037bb:	and    edx,0x1
  4037be:	test   rsi,rsi
  4037c1:	je     403a70 <rb_base64_encode@plt+0x1740>
  4037c7:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  4037cd:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  4037d3:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  4037d9:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  4037df:	mov    rsi,rdx
  4037e2:	sub    rsi,rdi
  4037e5:	xor    edi,edi
  4037e7:	nop    WORD PTR [rax+rax*1+0x0]
  4037f0:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  4037f6:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  4037fc:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  403802:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  40380b:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm4
  403811:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm5
  403817:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm6
  40381d:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm7
  403826:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0xa0]
  40382f:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0xc0]
  403838:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0xe0]
  403841:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x100]
  40384a:	vmovups YMMWORD PTR [rsp+rdi*1+0xa0],ymm4
  403853:	vmovups YMMWORD PTR [rsp+rdi*1+0xc0],ymm5
  40385c:	vmovups YMMWORD PTR [rsp+rdi*1+0xe0],ymm6
  403865:	vmovups YMMWORD PTR [rsp+rdi*1+0x100],ymm7
  40386e:	add    rdi,0x100
  403875:	add    rsi,0x2
  403879:	jne    4037f0 <rb_base64_encode@plt+0x14c0>
  40387f:	test   rdx,rdx
  403882:	je     4038d2 <rb_base64_encode@plt+0x15a2>
  403884:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  40388a:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  403890:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  403896:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  40389c:	vxorps ymm0,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  4038a2:	vxorps ymm1,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  4038a8:	vxorps ymm2,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  4038ae:	vxorps ymm3,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  4038b7:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm0
  4038bd:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm1
  4038c3:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm2
  4038c9:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm3
  4038d2:	cmp    rcx,r9
  4038d5:	je     4034d0 <rb_base64_encode@plt+0x11a0>
  4038db:	jmp    4039c2 <rb_base64_encode@plt+0x1692>
  4038e0:	mov    rdi,r14
  4038e3:	mov    esi,0x1
  4038e8:	lea    rdx,[rip+0x2947]        # 406236 <rb_base64_encode@plt+0x3f06>
  4038ef:	xor    eax,eax
  4038f1:	call   402f80 <rb_base64_encode@plt+0xc50>
  4038f6:	jmp    4034e5 <rb_base64_encode@plt+0x11b5>
  4038fb:	xor    ecx,ecx
  4038fd:	mov    r8,rcx
  403900:	not    r8
  403903:	add    r8,r9
  403906:	mov    rdi,r9
  403909:	and    rdi,0x3
  40390d:	je     40394e <rb_base64_encode@plt+0x161e>
  40390f:	mov    rdx,rcx
  403912:	neg    rdx
  403915:	mov    esi,ecx
  403917:	and    esi,0x3
  40391a:	lea    rbp,[rsp+rsi*1]
  40391e:	add    rbp,0xc
  403922:	add    rcx,rsp
  403925:	add    rcx,0x20
  403929:	xor    esi,esi
  40392b:	nop    DWORD PTR [rax+rax*1+0x0]
  403930:	movzx  ebx,BYTE PTR [rbp+rsi*1+0x0]
  403935:	xor    BYTE PTR [rcx+rsi*1],bl
  403938:	dec    rdx
  40393b:	inc    rsi
  40393e:	cmp    rdi,rsi
  403941:	jne    403930 <rb_base64_encode@plt+0x1600>
  403943:	neg    rdx
  403946:	mov    rcx,rdx
  403949:	mov    rbp,QWORD PTR [rsp+0x18]
  40394e:	cmp    r8,0x3
  403952:	jb     4034d0 <rb_base64_encode@plt+0x11a0>
  403958:	mov    edx,ecx
  40395a:	and    edx,0x3
  40395d:	lea    edi,[rcx+0x1]
  403960:	and    edi,0x3
  403963:	lea    ebp,[rcx-0x1]
  403966:	and    ebp,0x3
  403969:	mov    sil,BYTE PTR [rsp+rdx*1+0xc]
  40396e:	xor    rdx,0x2
  403972:	mov    dil,BYTE PTR [rsp+rdi*1+0xc]
  403977:	mov    dl,BYTE PTR [rsp+rdx*1+0xc]
  40397b:	mov    bl,BYTE PTR [rsp+rbp*1+0xc]
  40397f:	mov    rbp,QWORD PTR [rsp+0x18]
  403984:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40398e:	xchg   ax,ax
  403990:	xor    BYTE PTR [rsp+rcx*1+0x20],sil
  403995:	xor    BYTE PTR [rsp+rcx*1+0x21],dil
  40399a:	xor    BYTE PTR [rsp+rcx*1+0x22],dl
  40399e:	xor    BYTE PTR [rsp+rcx*1+0x23],bl
  4039a2:	add    rcx,0x4
  4039a6:	cmp    r9,rcx
  4039a9:	jne    403990 <rb_base64_encode@plt+0x1660>
  4039ab:	jmp    4034d0 <rb_base64_encode@plt+0x11a0>
  4039b0:	xor    edi,edi
  4039b2:	test   rdx,rdx
  4039b5:	jne    4036d4 <rb_base64_encode@plt+0x13a4>
  4039bb:	jmp    403722 <rb_base64_encode@plt+0x13f2>
  4039c0:	xor    ecx,ecx
  4039c2:	mov    r8,rcx
  4039c5:	not    r8
  4039c8:	add    r8,r9
  4039cb:	mov    rdi,r9
  4039ce:	and    rdi,0x3
  4039d2:	je     403a0e <rb_base64_encode@plt+0x16de>
  4039d4:	mov    rdx,rcx
  4039d7:	neg    rdx
  4039da:	mov    esi,ecx
  4039dc:	and    esi,0x3
  4039df:	add    rsi,rsp
  4039e2:	add    rsi,0xc
  4039e6:	lea    rbp,[rsp+rcx*1]
  4039ea:	add    rbp,0x20
  4039ee:	xor    ebx,ebx
  4039f0:	movzx  ecx,BYTE PTR [rsi+rbx*1]
  4039f4:	xor    BYTE PTR [rbp+rbx*1+0x0],cl
  4039f8:	dec    rdx
  4039fb:	inc    rbx
  4039fe:	cmp    rdi,rbx
  403a01:	jne    4039f0 <rb_base64_encode@plt+0x16c0>
  403a03:	neg    rdx
  403a06:	mov    rcx,rdx
  403a09:	mov    rbp,QWORD PTR [rsp+0x18]
  403a0e:	cmp    r8,0x3
  403a12:	jb     4034d0 <rb_base64_encode@plt+0x11a0>
  403a18:	mov    edx,ecx
  403a1a:	and    edx,0x3
  403a1d:	lea    edi,[rcx+0x1]
  403a20:	and    edi,0x3
  403a23:	lea    ebp,[rcx-0x1]
  403a26:	and    ebp,0x3
  403a29:	mov    sil,BYTE PTR [rsp+rdx*1+0xc]
  403a2e:	xor    rdx,0x2
  403a32:	mov    dil,BYTE PTR [rsp+rdi*1+0xc]
  403a37:	mov    dl,BYTE PTR [rsp+rdx*1+0xc]
  403a3b:	mov    bl,BYTE PTR [rsp+rbp*1+0xc]
  403a3f:	mov    rbp,QWORD PTR [rsp+0x18]
  403a44:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403a4e:	xchg   ax,ax
  403a50:	xor    BYTE PTR [rsp+rcx*1+0x20],sil
  403a55:	xor    BYTE PTR [rsp+rcx*1+0x21],dil
  403a5a:	xor    BYTE PTR [rsp+rcx*1+0x22],dl
  403a5e:	xor    BYTE PTR [rsp+rcx*1+0x23],bl
  403a62:	add    rcx,0x4
  403a66:	cmp    r9,rcx
  403a69:	jne    403a50 <rb_base64_encode@plt+0x1720>
  403a6b:	jmp    4034d0 <rb_base64_encode@plt+0x11a0>
  403a70:	xor    edi,edi
  403a72:	test   rdx,rdx
  403a75:	jne    403884 <rb_base64_encode@plt+0x1554>
  403a7b:	jmp    4038d2 <rb_base64_encode@plt+0x15a2>
  403a80:	mov    rdi,QWORD PTR [r14+0x90]
  403a87:	mov    rsi,r14
  403a8a:	call   402ee0 <rb_base64_encode@plt+0xbb0>
  403a8f:	add    rsp,0x4028
  403a96:	pop    rbx
  403a97:	pop    r12
  403a99:	pop    r13
  403a9b:	pop    r14
  403a9d:	pop    r15
  403a9f:	pop    rbp
  403aa0:	ret    
  403aa1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403aab:	nop    DWORD PTR [rax+rax*1+0x0]
  403ab0:	push   rbp
  403ab1:	push   r15
  403ab3:	push   r14
  403ab5:	push   r13
  403ab7:	push   r12
  403ab9:	push   rbx
  403aba:	sub    rsp,0x4018
  403ac1:	mov    rbx,rdi
  403ac4:	lea    rbp,[rsp+0x10]
  403ac9:	mov    edx,0x4000
  403ace:	mov    rdi,rbp
  403ad1:	xor    esi,esi
  403ad3:	call   402050 <memset@plt>
  403ad8:	lea    r14,[rbx+0x58]
  403adc:	mov    rdi,r14
  403adf:	mov    rsi,rbp
  403ae2:	mov    edx,0x4000
  403ae7:	xor    ecx,ecx
  403ae9:	xor    r8d,r8d
  403aec:	call   402150 <rb_linebuf_get@plt>
  403af1:	mov    ebp,eax
  403af3:	mov    al,BYTE PTR [rbx+0xb8]
  403af9:	test   ebp,ebp
  403afb:	je     403bcf <rb_base64_encode@plt+0x189f>
  403b01:	lea    r15,[rsp+0xc]
  403b06:	lea    r12,[rsp+0x10]
  403b0b:	lea    r13,[rip+0x26c7]        # 4061d9 <rb_base64_encode@plt+0x3ea9>
  403b12:	test   al,0x2
  403b14:	je     403b4a <rb_base64_encode@plt+0x181a>
  403b16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b20:	mov    rdi,r14
  403b23:	mov    rsi,r12
  403b26:	mov    edx,0x4000
  403b2b:	xor    ecx,ecx
  403b2d:	xor    r8d,r8d
  403b30:	call   402150 <rb_linebuf_get@plt>
  403b35:	mov    ebp,eax
  403b37:	movzx  eax,BYTE PTR [rbx+0xb8]
  403b3e:	test   ebp,ebp
  403b40:	je     403bcf <rb_base64_encode@plt+0x189f>
  403b46:	test   al,0x2
  403b48:	jne    403b20 <rb_base64_encode@plt+0x17f0>
  403b4a:	cmp    ebp,0x7a
  403b4d:	jg     403b70 <rb_base64_encode@plt+0x1840>
  403b4f:	mov    WORD PTR [rsp+0xc],0x81
  403b56:	lea    eax,[rbp+0x2]
  403b59:	and    al,0x7f
  403b5b:	mov    BYTE PTR [rsp+0xd],al
  403b5f:	mov    rdi,QWORD PTR [rbx+0x20]
  403b63:	mov    rsi,r15
  403b66:	mov    edx,0x2
  403b6b:	jmp    403b8e <rb_base64_encode@plt+0x185e>
  403b6d:	nop    DWORD PTR [rax]
  403b70:	mov    DWORD PTR [rsp+0xc],0x7e81
  403b78:	lea    eax,[rbp+0x2]
  403b7b:	movbe  WORD PTR [rsp+0xe],ax
  403b82:	mov    rdi,QWORD PTR [rbx+0x20]
  403b86:	mov    rsi,r15
  403b89:	mov    edx,0x4
  403b8e:	call   4022f0 <rb_rawbuf_append@plt>
  403b93:	mov    al,BYTE PTR [rbx+0xb8]
  403b99:	test   al,0x2
  403b9b:	jne    403bb1 <rb_base64_encode@plt+0x1881>
  403b9d:	mov    rdi,QWORD PTR [rbx+0x20]
  403ba1:	mov    rsi,r12
  403ba4:	mov    edx,ebp
  403ba6:	call   4022f0 <rb_rawbuf_append@plt>
  403bab:	mov    al,BYTE PTR [rbx+0xb8]
  403bb1:	test   al,0x2
  403bb3:	jne    403b20 <rb_base64_encode@plt+0x17f0>
  403bb9:	mov    rdi,QWORD PTR [rbx+0x20]
  403bbd:	mov    rsi,r13
  403bc0:	mov    edx,0x2
  403bc5:	call   4022f0 <rb_rawbuf_append@plt>
  403bca:	jmp    403b20 <rb_base64_encode@plt+0x17f0>
  403bcf:	test   al,0x8
  403bd1:	je     403be2 <rb_base64_encode@plt+0x18b2>
  403bd3:	mov    rdi,QWORD PTR [rbx+0x88]
  403bda:	mov    rsi,rbx
  403bdd:	call   403cd0 <rb_base64_encode@plt+0x19a0>
  403be2:	add    rsp,0x4018
  403be9:	pop    rbx
  403bea:	pop    r12
  403bec:	pop    r13
  403bee:	pop    r14
  403bf0:	pop    r15
  403bf2:	pop    rbp
  403bf3:	ret    
  403bf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403bfe:	xchg   ax,ax
  403c00:	push   r14
  403c02:	push   rbx
  403c03:	sub    rsp,0x4008
  403c0a:	test   rsi,rsi
  403c0d:	je     403caf <rb_base64_encode@plt+0x197f>
  403c13:	mov    rbx,rsi
  403c16:	mov    r14,rsp
  403c19:	nop    DWORD PTR [rax+0x0]
  403c20:	mov    rdi,QWORD PTR [rbx+0x90]
  403c27:	mov    rsi,r14
  403c2a:	mov    edx,0x4000
  403c2f:	call   402130 <rb_read@plt>
  403c34:	test   eax,eax
  403c36:	je     403c67 <rb_base64_encode@plt+0x1937>
  403c38:	jns    403c20 <rb_base64_encode@plt+0x18f0>
  403c3a:	call   402220 <__errno_location@plt>
  403c3f:	mov    edi,DWORD PTR [rax]
  403c41:	call   402070 <rb_ignore_errno@plt>
  403c46:	test   eax,eax
  403c48:	je     403c67 <rb_base64_encode@plt+0x1937>
  403c4a:	mov    rdi,QWORD PTR [rbx+0x90]
  403c51:	lea    rdx,[rip+0xffffffffffffffa8]        # 403c00 <rb_base64_encode@plt+0x18d0>
  403c58:	mov    esi,0x1
  403c5d:	mov    rcx,rbx
  403c60:	call   402090 <rb_setselect@plt>
  403c65:	jmp    403caf <rb_base64_encode@plt+0x197f>
  403c67:	mov    rdi,QWORD PTR [rbx+0x90]
  403c6e:	call   4021b0 <rb_close@plt>
  403c73:	mov    QWORD PTR [rbx],rbx
  403c76:	mov    QWORD PTR [rbx+0x8],0x0
  403c7e:	mov    rax,QWORD PTR [rip+0x454b]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  403c85:	mov    QWORD PTR [rbx+0x10],rax
  403c89:	test   rax,rax
  403c8c:	je     403c97 <rb_base64_encode@plt+0x1967>
  403c8e:	add    rax,0x8
  403c92:	mov    QWORD PTR [rax],rbx
  403c95:	jmp    403ca1 <rb_base64_encode@plt+0x1971>
  403c97:	cmp    QWORD PTR [rip+0x4539],0x0        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403c9f:	je     403cba <rb_base64_encode@plt+0x198a>
  403ca1:	mov    QWORD PTR [rip+0x4528],rbx        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  403ca8:	inc    QWORD PTR [rip+0x4531]        # 4081e0 <rb_base64_encode@plt+0x5eb0>
  403caf:	add    rsp,0x4008
  403cb6:	pop    rbx
  403cb7:	pop    r14
  403cb9:	ret    
  403cba:	lea    rax,[rip+0x4517]        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403cc1:	jmp    403c92 <rb_base64_encode@plt+0x1962>
  403cc3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403ccd:	nop    DWORD PTR [rax]
  403cd0:	push   r14
  403cd2:	push   rbx
  403cd3:	push   rax
  403cd4:	test   BYTE PTR [rsi+0xb8],0x2
  403cdb:	jne    403db8 <rb_base64_encode@plt+0x1a88>
  403ce1:	mov    r14,rsi
  403ce4:	mov    rbx,rdi
  403ce7:	nop    WORD PTR [rax+rax*1+0x0]
  403cf0:	mov    rdi,QWORD PTR [r14+0x20]
  403cf4:	mov    rsi,rbx
  403cf7:	call   402300 <rb_rawbuf_flush@plt>
  403cfc:	test   eax,eax
  403cfe:	jle    403d0b <rb_base64_encode@plt+0x19db>
  403d00:	cdqe   
  403d02:	add    QWORD PTR [r14+0x98],rax
  403d09:	jmp    403cf0 <rb_base64_encode@plt+0x19c0>
  403d0b:	test   eax,eax
  403d0d:	je     403d47 <rb_base64_encode@plt+0x1a17>
  403d0f:	call   402220 <__errno_location@plt>
  403d14:	mov    rbx,rax
  403d17:	mov    edi,DWORD PTR [rax]
  403d19:	call   402070 <rb_ignore_errno@plt>
  403d1e:	test   eax,eax
  403d20:	je     403d6c <rb_base64_encode@plt+0x1a3c>
  403d22:	mov    rdi,QWORD PTR [r14+0x20]
  403d26:	call   4021d0 <rb_rawbuf_length@plt>
  403d2b:	mov    rdi,QWORD PTR [r14+0x88]
  403d32:	test   eax,eax
  403d34:	jle    403d93 <rb_base64_encode@plt+0x1a63>
  403d36:	lea    rdx,[rip+0xffffffffffffff93]        # 403cd0 <rb_base64_encode@plt+0x19a0>
  403d3d:	mov    esi,0x2
  403d42:	mov    rcx,r14
  403d45:	jmp    403d9c <rb_base64_encode@plt+0x1a6c>
  403d47:	lea    rdx,[rip+0x23aa]        # 4060f8 <rb_base64_encode@plt+0x3dc8>
  403d4e:	lea    rcx,[rip+0x23a6]        # 4060fb <rb_base64_encode@plt+0x3dcb>
  403d55:	mov    rdi,r14
  403d58:	mov    esi,0x1
  403d5d:	xor    eax,eax
  403d5f:	call   402f80 <rb_base64_encode@plt+0xc50>
  403d64:	call   402220 <__errno_location@plt>
  403d69:	mov    rbx,rax
  403d6c:	mov    edi,DWORD PTR [rbx]
  403d6e:	call   402180 <strerror@plt>
  403d73:	lea    rdx,[rip+0x2371]        # 4060eb <rb_base64_encode@plt+0x3dbb>
  403d7a:	mov    rdi,r14
  403d7d:	mov    esi,0x1
  403d82:	mov    rcx,rax
  403d85:	xor    eax,eax
  403d87:	add    rsp,0x8
  403d8b:	pop    rbx
  403d8c:	pop    r14
  403d8e:	jmp    402f80 <rb_base64_encode@plt+0xc50>
  403d93:	mov    esi,0x2
  403d98:	xor    edx,edx
  403d9a:	xor    ecx,ecx
  403d9c:	call   402090 <rb_setselect@plt>
  403da1:	test   BYTE PTR [r14+0xb8],0x1
  403da9:	je     403db8 <rb_base64_encode@plt+0x1a88>
  403dab:	mov    rdi,QWORD PTR [r14+0x20]
  403daf:	call   4021d0 <rb_rawbuf_length@plt>
  403db4:	test   eax,eax
  403db6:	je     403dc0 <rb_base64_encode@plt+0x1a90>
  403db8:	add    rsp,0x8
  403dbc:	pop    rbx
  403dbd:	pop    r14
  403dbf:	ret    
  403dc0:	and    BYTE PTR [r14+0xb8],0xfe
  403dc8:	mov    rdi,QWORD PTR [r14+0x90]
  403dcf:	mov    rsi,r14
  403dd2:	add    rsp,0x8
  403dd6:	pop    rbx
  403dd7:	pop    r14
  403dd9:	jmp    402d90 <rb_base64_encode@plt+0xa60>
  403dde:	xchg   ax,ax
  403de0:	push   rbp
  403de1:	push   r15
  403de3:	push   r14
  403de5:	push   r13
  403de7:	push   r12
  403de9:	push   rbx
  403dea:	push   rax
  403deb:	mov    r14,rsi
  403dee:	mov    rbp,QWORD PTR [rsi+0x48]
  403df2:	test   rbp,rbp
  403df5:	je     403ef2 <rb_base64_encode@plt+0x1bc2>
  403dfb:	lea    r15,[r14+0x48]
  403dff:	jmp    403e1c <rb_base64_encode@plt+0x1aec>
  403e01:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403e0b:	nop    DWORD PTR [rax+rax*1+0x0]
  403e10:	mov    rbp,r12
  403e13:	test   r12,r12
  403e16:	je     403ef2 <rb_base64_encode@plt+0x1bc2>
  403e1c:	mov    rbx,QWORD PTR [rbp+0x0]
  403e20:	mov    r12,QWORD PTR [rbp+0x10]
  403e24:	mov    rdi,QWORD PTR [r14+0x20]
  403e28:	lea    rsi,[rbx+0x28]
  403e2c:	mov    edx,DWORD PTR [rbx+0x48]
  403e2f:	mov    rcx,QWORD PTR [rbx+0x18]
  403e33:	mov    r8,QWORD PTR [rbx+0x20]
  403e37:	mov    r9d,DWORD PTR [rip+0x4382]        # 4081c0 <rb_base64_encode@plt+0x5e90>
  403e3e:	call   4020a0 <rb_send_fd_buf@plt>
  403e43:	mov    r13d,eax
  403e46:	test   eax,eax
  403e48:	jle    403ecc <rb_base64_encode@plt+0x1b9c>
  403e4e:	mov    rcx,QWORD PTR [rbp+0x8]
  403e52:	mov    rax,QWORD PTR [rbp+0x10]
  403e56:	add    rbp,0x8
  403e5a:	test   rax,rax
  403e5d:	je     403e70 <rb_base64_encode@plt+0x1b40>
  403e5f:	mov    QWORD PTR [rax+0x8],rcx
  403e63:	mov    rcx,QWORD PTR [rbp+0x0]
  403e67:	jmp    403e74 <rb_base64_encode@plt+0x1b44>
  403e69:	nop    DWORD PTR [rax+0x0]
  403e70:	mov    QWORD PTR [r14+0x50],rcx
  403e74:	test   rcx,rcx
  403e77:	lea    rcx,[rcx+0x10]
  403e7b:	cmove  rcx,r15
  403e7f:	mov    QWORD PTR [rcx],rax
  403e82:	vxorps xmm0,xmm0,xmm0
  403e86:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  403e8b:	dec    QWORD PTR [r14+0x58]
  403e8f:	cmp    DWORD PTR [rbx+0x48],0x0
  403e93:	jle    403eb6 <rb_base64_encode@plt+0x1b86>
  403e95:	xor    ebp,ebp
  403e97:	nop    WORD PTR [rax+rax*1+0x0]
  403ea0:	mov    rdi,QWORD PTR [rbx+rbp*8+0x28]
  403ea5:	call   4021b0 <rb_close@plt>
  403eaa:	inc    rbp
  403ead:	movsxd rax,DWORD PTR [rbx+0x48]
  403eb1:	cmp    rbp,rax
  403eb4:	jl     403ea0 <rb_base64_encode@plt+0x1b70>
  403eb6:	mov    rdi,QWORD PTR [rbx+0x18]
  403eba:	test   rdi,rdi
  403ebd:	je     403ec4 <rb_base64_encode@plt+0x1b94>
  403ebf:	call   402100 <free@plt>
  403ec4:	mov    rdi,rbx
  403ec7:	call   402100 <free@plt>
  403ecc:	test   r13d,r13d
  403ecf:	je     403eeb <rb_base64_encode@plt+0x1bbb>
  403ed1:	jns    403e10 <rb_base64_encode@plt+0x1ae0>
  403ed7:	call   402220 <__errno_location@plt>
  403edc:	mov    edi,DWORD PTR [rax]
  403ede:	call   402070 <rb_ignore_errno@plt>
  403ee3:	test   eax,eax
  403ee5:	jne    403e10 <rb_base64_encode@plt+0x1ae0>
  403eeb:	xor    edi,edi
  403eed:	call   4020b0 <exit@plt>
  403ef2:	cmp    QWORD PTR [r14+0x58],0x0
  403ef7:	je     403f1f <rb_base64_encode@plt+0x1bef>
  403ef9:	mov    rdi,QWORD PTR [r14+0x20]
  403efd:	lea    rdx,[rip+0xfffffffffffffedc]        # 403de0 <rb_base64_encode@plt+0x1ab0>
  403f04:	mov    esi,0x2
  403f09:	mov    rcx,r14
  403f0c:	add    rsp,0x8
  403f10:	pop    rbx
  403f11:	pop    r12
  403f13:	pop    r13
  403f15:	pop    r14
  403f17:	pop    r15
  403f19:	pop    rbp
  403f1a:	jmp    402090 <rb_setselect@plt>
  403f1f:	add    rsp,0x8
  403f23:	pop    rbx
  403f24:	pop    r12
  403f26:	pop    r13
  403f28:	pop    r14
  403f2a:	pop    r15
  403f2c:	pop    rbp
  403f2d:	ret    
  403f2e:	xchg   ax,ax
  403f30:	vmovaps xmm0,XMMWORD PTR [rip+0x2328]        # 406260 <rb_base64_encode@plt+0x3f30>
  403f38:	vmovups XMMWORD PTR [rdi],xmm0
  403f3c:	mov    DWORD PTR [rdi+0x10],0xc3d2e1f0
  403f43:	mov    QWORD PTR [rdi+0x18],0x0
  403f4b:	ret    
  403f4c:	nop    DWORD PTR [rax+0x0]
  403f50:	push   rbp
  403f51:	push   r15
  403f53:	push   r14
  403f55:	push   r13
  403f57:	push   r12
  403f59:	push   rbx
  403f5a:	push   rax
  403f5b:	mov    r15,rdx
  403f5e:	mov    r14,rsi
  403f61:	mov    r12,rdi
  403f64:	mov    rbp,QWORD PTR [rdi+0x18]
  403f68:	lea    rax,[rdx*8+0x0]
  403f70:	add    rax,rbp
  403f73:	shr    ebp,0x3
  403f76:	and    ebp,0x3f
  403f79:	mov    QWORD PTR [rdi+0x18],rax
  403f7d:	lea    rax,[rdx+rbp*1]
  403f81:	cmp    rax,0x40
  403f85:	jb     403fde <rb_base64_encode@plt+0x1cae>
  403f87:	mov    r13d,0x40
  403f8d:	sub    r13,rbp
  403f90:	lea    rdi,[r12+rbp*1]
  403f94:	add    rdi,0x20
  403f98:	lea    rbx,[r12+0x20]
  403f9d:	mov    rsi,r14
  403fa0:	mov    rdx,r13
  403fa3:	call   402310 <memcpy@plt>
  403fa8:	mov    rdi,r12
  403fab:	mov    rsi,rbx
  403fae:	call   404010 <rb_base64_encode@plt+0x1ce0>
  403fb3:	xor    rbp,0x7f
  403fb7:	cmp    rbp,r15
  403fba:	jae    403fe3 <rb_base64_encode@plt+0x1cb3>
  403fbc:	xor    ebp,ebp
  403fbe:	xchg   ax,ax
  403fc0:	mov    rbx,r13
  403fc3:	lea    rsi,[r14+r13*1]
  403fc7:	mov    rdi,r12
  403fca:	call   404010 <rb_base64_encode@plt+0x1ce0>
  403fcf:	add    r13,0x40
  403fd3:	add    rbx,0x7f
  403fd7:	cmp    rbx,r15
  403fda:	jb     403fc0 <rb_base64_encode@plt+0x1c90>
  403fdc:	jmp    403fe5 <rb_base64_encode@plt+0x1cb5>
  403fde:	xor    r13d,r13d
  403fe1:	jmp    403fe5 <rb_base64_encode@plt+0x1cb5>
  403fe3:	xor    ebp,ebp
  403fe5:	lea    rdi,[r12+rbp*1]
  403fe9:	add    rdi,0x20
  403fed:	add    r14,r13
  403ff0:	sub    r15,r13
  403ff3:	mov    rsi,r14
  403ff6:	mov    rdx,r15
  403ff9:	add    rsp,0x8
  403ffd:	pop    rbx
  403ffe:	pop    r12
  404000:	pop    r13
  404002:	pop    r14
  404004:	pop    r15
  404006:	pop    rbp
  404007:	jmp    402310 <memcpy@plt>
  40400c:	nop    DWORD PTR [rax+0x0]
  404010:	push   rbp
  404011:	push   r15
  404013:	push   r14
  404015:	push   r13
  404017:	push   r12
  404019:	push   rbx
  40401a:	mov    r8,rsi
  40401d:	mov    QWORD PTR [rsp-0x8],rdi
  404022:	mov    esi,DWORD PTR [rdi]
  404024:	vmovdqu xmm0,XMMWORD PTR [rdi+0x4]
  404029:	vpextrd ebp,xmm0,0x1
  40402f:	vpextrd edi,xmm0,0x2
  404035:	vmovd  edx,xmm0
  404039:	andn   eax,edx,edi
  40403e:	mov    ecx,ebp
  404040:	and    ecx,edx
  404042:	or     ecx,eax
  404044:	movbe  eax,DWORD PTR [r8]
  404049:	mov    DWORD PTR [rsp-0x50],eax
  40404d:	rorx   ebx,esi,0x1b
  404053:	add    ebx,eax
  404055:	vpextrd eax,xmm0,0x3
  40405b:	add    eax,ebx
  40405d:	lea    eax,[rcx+rax*1]
  404060:	add    eax,0x5a827999
  404065:	rorx   edx,edx,0x2
  40406b:	andn   ecx,esi,ebp
  404070:	mov    ebx,edx
  404072:	and    ebx,esi
  404074:	mov    DWORD PTR [rsp-0xc],esi
  404078:	or     ebx,ecx
  40407a:	movbe  ecx,DWORD PTR [r8+0x4]
  404080:	mov    DWORD PTR [rsp-0x4c],ecx
  404084:	rorx   r9d,eax,0x1b
  40408a:	add    edi,ecx
  40408c:	add    edi,ebx
  40408e:	lea    ebx,[r9+rdi*1]
  404092:	add    ebx,0x5a827999
  404098:	rorx   edi,esi,0x2
  40409e:	andn   r9d,eax,edx
  4040a3:	mov    ecx,edi
  4040a5:	and    ecx,eax
  4040a7:	or     ecx,r9d
  4040aa:	movbe  r12d,DWORD PTR [r8+0x8]
  4040b0:	rorx   r9d,ebx,0x1b
  4040b6:	add    ebp,r12d
  4040b9:	add    ebp,ecx
  4040bb:	lea    ebp,[r9+rbp*1]
  4040bf:	add    ebp,0x5a827999
  4040c5:	rorx   ecx,eax,0x2
  4040cb:	andn   r9d,ebx,edi
  4040d0:	mov    eax,ecx
  4040d2:	and    eax,ebx
  4040d4:	or     eax,r9d
  4040d7:	movbe  r11d,DWORD PTR [r8+0xc]
  4040dd:	rorx   r9d,ebp,0x1b
  4040e3:	add    edx,r11d
  4040e6:	add    edx,eax
  4040e8:	lea    eax,[r9+rdx*1]
  4040ec:	add    eax,0x5a827999
  4040f1:	rorx   edx,ebx,0x2
  4040f7:	andn   r9d,ebp,ecx
  4040fc:	mov    ebx,edx
  4040fe:	and    ebx,ebp
  404100:	or     ebx,r9d
  404103:	movbe  esi,DWORD PTR [r8+0x10]
  404109:	mov    DWORD PTR [rsp-0x44],esi
  40410d:	rorx   r9d,eax,0x1b
  404113:	add    edi,esi
  404115:	add    edi,ebx
  404117:	lea    r10d,[r9+rdi*1]
  40411b:	add    r10d,0x5a827999
  404122:	rorx   edi,ebp,0x2
  404128:	andn   r9d,eax,edx
  40412d:	mov    ebp,edi
  40412f:	and    ebp,eax
  404131:	or     ebp,r9d
  404134:	movbe  esi,DWORD PTR [r8+0x14]
  40413a:	mov    DWORD PTR [rsp-0x5c],esi
  40413e:	add    ecx,esi
  404140:	add    ecx,ebp
  404142:	rorx   ebp,r10d,0x1b
  404148:	lea    ebp,[rcx+rbp*1]
  40414b:	add    ebp,0x5a827999
  404151:	rorx   ecx,eax,0x2
  404157:	mov    eax,ecx
  404159:	and    eax,r10d
  40415c:	andn   ebx,r10d,edi
  404161:	or     eax,ebx
  404163:	movbe  esi,DWORD PTR [r8+0x18]
  404169:	mov    DWORD PTR [rsp-0x58],esi
  40416d:	add    edx,esi
  40416f:	add    edx,eax
  404171:	rorx   eax,ebp,0x1b
  404177:	lea    r9d,[rax+rdx*1]
  40417b:	add    r9d,0x5a827999
  404182:	rorx   edx,r10d,0x2
  404188:	mov    ebx,edx
  40418a:	and    ebx,ebp
  40418c:	andn   eax,ebp,ecx
  404191:	or     ebx,eax
  404193:	movbe  eax,DWORD PTR [r8+0x1c]
  404199:	mov    DWORD PTR [rsp-0x40],eax
  40419d:	add    edi,eax
  40419f:	add    edi,ebx
  4041a1:	rorx   eax,r9d,0x1b
  4041a7:	lea    r10d,[rax+rdi*1]
  4041ab:	add    r10d,0x5a827999
  4041b2:	rorx   edi,ebp,0x2
  4041b8:	mov    ebp,edi
  4041ba:	and    ebp,r9d
  4041bd:	andn   ebx,r9d,edx
  4041c2:	or     ebp,ebx
  4041c4:	movbe  r14d,DWORD PTR [r8+0x20]
  4041ca:	add    ecx,r14d
  4041cd:	mov    DWORD PTR [rsp-0x2c],r14d
  4041d2:	add    ecx,ebp
  4041d4:	rorx   ebp,r10d,0x1b
  4041da:	lea    ebp,[rcx+rbp*1]
  4041dd:	add    ebp,0x5a827999
  4041e3:	rorx   ecx,r9d,0x2
  4041e9:	mov    ebx,ecx
  4041eb:	and    ebx,r10d
  4041ee:	andn   eax,r10d,edi
  4041f3:	or     ebx,eax
  4041f5:	movbe  r15d,DWORD PTR [r8+0x24]
  4041fb:	add    edx,r15d
  4041fe:	mov    DWORD PTR [rsp-0x30],r15d
  404203:	add    edx,ebx
  404205:	rorx   eax,ebp,0x1b
  40420b:	lea    r9d,[rax+rdx*1]
  40420f:	add    r9d,0x5a827999
  404216:	rorx   edx,r10d,0x2
  40421c:	mov    ebx,edx
  40421e:	and    ebx,ebp
  404220:	andn   eax,ebp,ecx
  404225:	or     ebx,eax
  404227:	movbe  eax,DWORD PTR [r8+0x28]
  40422d:	mov    DWORD PTR [rsp-0x64],eax
  404231:	add    edi,eax
  404233:	add    edi,ebx
  404235:	rorx   eax,r9d,0x1b
  40423b:	lea    r10d,[rax+rdi*1]
  40423f:	add    r10d,0x5a827999
  404246:	rorx   ebp,ebp,0x2
  40424c:	mov    edi,ebp
  40424e:	and    edi,r9d
  404251:	andn   ebx,r9d,edx
  404256:	or     edi,ebx
  404258:	movbe  eax,DWORD PTR [r8+0x2c]
  40425e:	mov    DWORD PTR [rsp-0x48],eax
  404262:	add    ecx,eax
  404264:	add    ecx,edi
  404266:	rorx   edi,r10d,0x1b
  40426c:	lea    ecx,[rdi+rcx*1]
  40426f:	add    ecx,0x5a827999
  404275:	rorx   ebx,r9d,0x2
  40427b:	mov    edi,ebx
  40427d:	and    edi,r10d
  404280:	andn   eax,r10d,ebp
  404285:	or     edi,eax
  404287:	movbe  eax,DWORD PTR [r8+0x30]
  40428d:	mov    DWORD PTR [rsp-0x68],eax
  404291:	add    edx,eax
  404293:	add    edx,edi
  404295:	rorx   eax,ecx,0x1b
  40429b:	lea    r13d,[rax+rdx*1]
  40429f:	add    r13d,0x5a827999
  4042a6:	rorx   edx,r10d,0x2
  4042ac:	mov    edi,edx
  4042ae:	and    edi,ecx
  4042b0:	andn   eax,ecx,ebx
  4042b5:	or     edi,eax
  4042b7:	movbe  eax,DWORD PTR [r8+0x34]
  4042bd:	add    ebp,eax
  4042bf:	mov    r10d,eax
  4042c2:	mov    DWORD PTR [rsp-0x60],eax
  4042c6:	add    ebp,edi
  4042c8:	rorx   eax,r13d,0x1b
  4042ce:	lea    eax,[rax+rbp*1]
  4042d1:	add    eax,0x5a827999
  4042d6:	rorx   ecx,ecx,0x2
  4042dc:	mov    edi,ecx
  4042de:	and    edi,r13d
  4042e1:	andn   ebp,r13d,edx
  4042e6:	or     edi,ebp
  4042e8:	movbe  esi,DWORD PTR [r8+0x38]
  4042ee:	add    ebx,esi
  4042f0:	mov    r9d,esi
  4042f3:	mov    DWORD PTR [rsp-0x3c],esi
  4042f7:	add    ebx,edi
  4042f9:	rorx   edi,eax,0x1b
  4042ff:	lea    esi,[rdi+rbx*1]
  404302:	add    esi,0x5a827999
  404308:	rorx   ebx,r13d,0x2
  40430e:	mov    edi,ebx
  404310:	and    edi,eax
  404312:	andn   ebp,eax,ecx
  404317:	or     edi,ebp
  404319:	movbe  ebp,DWORD PTR [r8+0x3c]
  40431f:	add    edx,ebp
  404321:	mov    r8d,ebp
  404324:	mov    DWORD PTR [rsp-0x54],ebp
  404328:	add    edx,edi
  40432a:	rorx   edi,esi,0x1b
  404330:	lea    ebp,[rdi+rdx*1]
  404333:	add    ebp,0x5a827999
  404339:	rorx   edx,eax,0x2
  40433f:	mov    eax,edx
  404341:	and    eax,esi
  404343:	andn   edi,esi,ebx
  404348:	or     eax,edi
  40434a:	mov    r13d,DWORD PTR [rsp-0x50]
  40434f:	xor    r13d,r12d
  404352:	xor    r14d,r10d
  404355:	xor    r14d,r13d
  404358:	rorx   edi,r14d,0x1f
  40435e:	add    ecx,edi
  404360:	mov    r13d,edi
  404363:	mov    DWORD PTR [rsp-0x38],edi
  404367:	add    ecx,eax
  404369:	rorx   eax,ebp,0x1b
  40436f:	lea    r14d,[rax+rcx*1]
  404373:	add    r14d,0x5a827999
  40437a:	rorx   ecx,esi,0x2
  404380:	mov    eax,ecx
  404382:	and    eax,ebp
  404384:	andn   esi,ebp,edx
  404389:	or     eax,esi
  40438b:	mov    edi,DWORD PTR [rsp-0x4c]
  40438f:	xor    edi,r11d
  404392:	xor    r15d,r9d
  404395:	xor    r15d,edi
  404398:	rorx   r15d,r15d,0x1f
  40439e:	add    ebx,r15d
  4043a1:	mov    DWORD PTR [rsp-0x34],r15d
  4043a6:	add    ebx,eax
  4043a8:	rorx   eax,r14d,0x1b
  4043ae:	lea    ebx,[rax+rbx*1]
  4043b1:	add    ebx,0x5a827999
  4043b7:	rorx   eax,ebp,0x2
  4043bd:	mov    esi,eax
  4043bf:	and    esi,r14d
  4043c2:	andn   ebp,r14d,ecx
  4043c7:	or     esi,ebp
  4043c9:	mov    r10d,DWORD PTR [rsp-0x44]
  4043ce:	xor    r12d,r10d
  4043d1:	mov    ebp,DWORD PTR [rsp-0x64]
  4043d5:	xor    ebp,r8d
  4043d8:	xor    ebp,r12d
  4043db:	rorx   r12d,ebp,0x1f
  4043e1:	add    edx,r12d
  4043e4:	mov    DWORD PTR [rsp-0x14],r12d
  4043e9:	add    edx,esi
  4043eb:	rorx   esi,ebx,0x1b
  4043f1:	lea    r8d,[rsi+rdx*1]
  4043f5:	add    r8d,0x5a827999
  4043fc:	rorx   edx,r14d,0x2
  404402:	mov    esi,edx
  404404:	and    esi,ebx
  404406:	andn   edi,ebx,eax
  40440b:	or     esi,edi
  40440d:	mov    r9d,DWORD PTR [rsp-0x5c]
  404412:	xor    r11d,r9d
  404415:	xor    r11d,DWORD PTR [rsp-0x48]
  40441a:	xor    r11d,r13d
  40441d:	rorx   edi,r11d,0x1f
  404423:	add    ecx,edi
  404425:	mov    r13d,edi
  404428:	mov    DWORD PTR [rsp-0x10],edi
  40442c:	add    ecx,esi
  40442e:	rorx   esi,r8d,0x1b
  404434:	lea    r11d,[rsi+rcx*1]
  404438:	add    r11d,0x5a827999
  40443f:	rorx   ecx,ebx,0x2
  404445:	mov    edi,ecx
  404447:	xor    edi,edx
  404449:	xor    edi,r8d
  40444c:	mov    r14d,DWORD PTR [rsp-0x58]
  404451:	xor    r10d,r14d
  404454:	xor    r10d,DWORD PTR [rsp-0x68]
  404459:	xor    r10d,r15d
  40445c:	rorx   esi,r10d,0x1f
  404462:	add    eax,esi
  404464:	mov    r10d,esi
  404467:	mov    DWORD PTR [rsp-0x24],esi
  40446b:	add    eax,edi
  40446d:	rorx   edi,r11d,0x1b
  404473:	lea    ebx,[rdi+rax*1]
  404476:	add    ebx,0x6ed9eba1
  40447c:	rorx   eax,r8d,0x2
  404482:	mov    edi,eax
  404484:	xor    edi,ecx
  404486:	xor    edi,r11d
  404489:	mov    ebp,DWORD PTR [rsp-0x40]
  40448d:	xor    r9d,ebp
  404490:	xor    r9d,DWORD PTR [rsp-0x60]
  404495:	xor    r9d,r12d
  404498:	rorx   r12d,r9d,0x1f
  40449e:	add    edx,r12d
  4044a1:	mov    DWORD PTR [rsp-0x20],r12d
  4044a6:	add    edx,edi
  4044a8:	rorx   edi,ebx,0x1b
  4044ae:	lea    r8d,[rdi+rdx*1]
  4044b2:	add    r8d,0x6ed9eba1
  4044b9:	rorx   edx,r11d,0x2
  4044bf:	mov    esi,edx
  4044c1:	xor    esi,eax
  4044c3:	xor    esi,ebx
  4044c5:	mov    edi,r14d
  4044c8:	mov    r14d,DWORD PTR [rsp-0x2c]
  4044cd:	xor    edi,r14d
  4044d0:	xor    edi,DWORD PTR [rsp-0x3c]
  4044d4:	xor    edi,r13d
  4044d7:	rorx   edi,edi,0x1f
  4044dd:	add    ecx,edi
  4044df:	mov    r11d,edi
  4044e2:	mov    DWORD PTR [rsp-0x5c],edi
  4044e6:	add    ecx,esi
  4044e8:	rorx   esi,r8d,0x1b
  4044ee:	lea    esi,[rsi+rcx*1]
  4044f1:	add    esi,0x6ed9eba1
  4044f7:	rorx   ecx,ebx,0x2
  4044fd:	mov    edi,ecx
  4044ff:	xor    edi,edx
  404501:	xor    edi,r8d
  404504:	mov    ebx,ebp
  404506:	mov    r15d,DWORD PTR [rsp-0x30]
  40450b:	xor    ebx,r15d
  40450e:	xor    ebx,DWORD PTR [rsp-0x54]
  404512:	xor    ebx,r10d
  404515:	rorx   ebx,ebx,0x1f
  40451b:	add    eax,ebx
  40451d:	mov    r10d,ebx
  404520:	mov    DWORD PTR [rsp-0x58],ebx
  404524:	add    eax,edi
  404526:	rorx   edi,esi,0x1b
  40452c:	lea    edi,[rdi+rax*1]
  40452f:	add    edi,0x6ed9eba1
  404535:	rorx   eax,r8d,0x2
  40453b:	mov    r8d,eax
  40453e:	xor    r8d,ecx
  404541:	xor    r8d,esi
  404544:	mov    r9d,DWORD PTR [rsp-0x64]
  404549:	mov    ebx,r14d
  40454c:	xor    ebx,r9d
  40454f:	xor    ebx,DWORD PTR [rsp-0x38]
  404553:	xor    ebx,r12d
  404556:	rorx   r14d,ebx,0x1f
  40455c:	add    edx,r14d
  40455f:	mov    DWORD PTR [rsp-0x28],r14d
  404564:	add    edx,r8d
  404567:	rorx   ebx,edi,0x1b
  40456d:	lea    r8d,[rbx+rdx*1]
  404571:	add    r8d,0x6ed9eba1
  404578:	rorx   edx,esi,0x2
  40457e:	mov    esi,edx
  404580:	xor    esi,eax
  404582:	xor    esi,edi
  404584:	mov    ebp,DWORD PTR [rsp-0x48]
  404588:	mov    ebx,r15d
  40458b:	xor    ebx,ebp
  40458d:	xor    ebx,DWORD PTR [rsp-0x34]
  404591:	xor    ebx,r11d
  404594:	rorx   ebx,ebx,0x1f
  40459a:	add    ecx,ebx
  40459c:	mov    r15d,ebx
  40459f:	mov    DWORD PTR [rsp-0x2c],ebx
  4045a3:	add    ecx,esi
  4045a5:	rorx   esi,r8d,0x1b
  4045ab:	lea    esi,[rsi+rcx*1]
  4045ae:	add    esi,0x6ed9eba1
  4045b4:	rorx   ecx,edi,0x2
  4045ba:	mov    edi,ecx
  4045bc:	xor    edi,edx
  4045be:	xor    edi,r8d
  4045c1:	mov    r11d,DWORD PTR [rsp-0x68]
  4045c6:	xor    r9d,r11d
  4045c9:	xor    r9d,DWORD PTR [rsp-0x14]
  4045ce:	xor    r9d,r10d
  4045d1:	rorx   r13d,r9d,0x1f
  4045d7:	add    eax,r13d
  4045da:	add    eax,edi
  4045dc:	rorx   edi,esi,0x1b
  4045e2:	lea    edi,[rdi+rax*1]
  4045e5:	add    edi,0x6ed9eba1
  4045eb:	rorx   eax,r8d,0x2
  4045f1:	mov    ebx,eax
  4045f3:	xor    ebx,ecx
  4045f5:	xor    ebx,esi
  4045f7:	mov    r12d,DWORD PTR [rsp-0x60]
  4045fc:	xor    ebp,r12d
  4045ff:	xor    ebp,DWORD PTR [rsp-0x10]
  404603:	xor    ebp,r14d
  404606:	rorx   r8d,ebp,0x1f
  40460c:	add    edx,r8d
  40460f:	mov    r14d,r8d
  404612:	mov    DWORD PTR [rsp-0x4c],r8d
  404617:	add    edx,ebx
  404619:	rorx   ebx,edi,0x1b
  40461f:	lea    r8d,[rbx+rdx*1]
  404623:	add    r8d,0x6ed9eba1
  40462a:	rorx   edx,esi,0x2
  404630:	mov    esi,edx
  404632:	xor    esi,eax
  404634:	xor    esi,edi
  404636:	mov    ebp,r11d
  404639:	mov    r10d,DWORD PTR [rsp-0x3c]
  40463e:	xor    ebp,r10d
  404641:	xor    ebp,DWORD PTR [rsp-0x24]
  404645:	xor    ebp,r15d
  404648:	rorx   r15d,ebp,0x1f
  40464e:	add    ecx,r15d
  404651:	mov    DWORD PTR [rsp-0x50],r15d
  404656:	add    ecx,esi
  404658:	rorx   esi,r8d,0x1b
  40465e:	lea    esi,[rsi+rcx*1]
  404661:	add    esi,0x6ed9eba1
  404667:	rorx   ecx,edi,0x2
  40466d:	mov    edi,ecx
  40466f:	xor    edi,edx
  404671:	xor    edi,r8d
  404674:	mov    ebx,r12d
  404677:	mov    r9d,DWORD PTR [rsp-0x54]
  40467c:	xor    ebx,r9d
  40467f:	xor    ebx,DWORD PTR [rsp-0x20]
  404683:	xor    ebx,r13d
  404686:	rorx   ebx,ebx,0x1f
  40468c:	add    eax,ebx
  40468e:	mov    r12d,ebx
  404691:	mov    DWORD PTR [rsp-0x40],ebx
  404695:	add    eax,edi
  404697:	rorx   edi,esi,0x1b
  40469d:	lea    edi,[rdi+rax*1]
  4046a0:	add    edi,0x6ed9eba1
  4046a6:	rorx   eax,r8d,0x2
  4046ac:	mov    ebx,eax
  4046ae:	xor    ebx,ecx
  4046b0:	xor    ebx,esi
  4046b2:	mov    ebp,r10d
  4046b5:	mov    r11d,DWORD PTR [rsp-0x38]
  4046ba:	xor    ebp,r11d
  4046bd:	xor    ebp,DWORD PTR [rsp-0x5c]
  4046c1:	xor    ebp,r14d
  4046c4:	rorx   r8d,ebp,0x1f
  4046ca:	add    edx,r8d
  4046cd:	mov    ebp,r8d
  4046d0:	mov    DWORD PTR [rsp-0x44],r8d
  4046d5:	add    edx,ebx
  4046d7:	rorx   ebx,edi,0x1b
  4046dd:	lea    r8d,[rbx+rdx*1]
  4046e1:	add    r8d,0x6ed9eba1
  4046e8:	rorx   edx,esi,0x2
  4046ee:	mov    esi,edx
  4046f0:	xor    esi,eax
  4046f2:	xor    esi,edi
  4046f4:	mov    r10d,DWORD PTR [rsp-0x34]
  4046f9:	xor    r9d,r10d
  4046fc:	xor    r9d,DWORD PTR [rsp-0x58]
  404701:	xor    r9d,r15d
  404704:	rorx   r15d,r9d,0x1f
  40470a:	add    ecx,r15d
  40470d:	mov    DWORD PTR [rsp-0x30],r15d
  404712:	add    ecx,esi
  404714:	rorx   esi,r8d,0x1b
  40471a:	lea    r9d,[rsi+rcx*1]
  40471e:	add    r9d,0x6ed9eba1
  404725:	rorx   ecx,edi,0x2
  40472b:	mov    edi,ecx
  40472d:	xor    edi,edx
  40472f:	xor    edi,r8d
  404732:	mov    esi,r11d
  404735:	mov    r11d,DWORD PTR [rsp-0x14]
  40473a:	xor    esi,r11d
  40473d:	xor    esi,DWORD PTR [rsp-0x28]
  404741:	xor    esi,r12d
  404744:	rorx   r12d,esi,0x1f
  40474a:	add    eax,r12d
  40474d:	add    eax,edi
  40474f:	rorx   edi,r9d,0x1b
  404755:	lea    edi,[rdi+rax*1]
  404758:	add    edi,0x6ed9eba1
  40475e:	rorx   eax,r8d,0x2
  404764:	mov    ebx,eax
  404766:	xor    ebx,ecx
  404768:	xor    ebx,r9d
  40476b:	mov    r14d,DWORD PTR [rsp-0x10]
  404770:	xor    r10d,r14d
  404773:	xor    r10d,DWORD PTR [rsp-0x2c]
  404778:	xor    r10d,ebp
  40477b:	rorx   esi,r10d,0x1f
  404781:	mov    DWORD PTR [rsp-0x68],esi
  404785:	add    edx,esi
  404787:	add    edx,ebx
  404789:	rorx   ebx,edi,0x1b
  40478f:	lea    r8d,[rbx+rdx*1]
  404793:	add    r8d,0x6ed9eba1
  40479a:	rorx   edx,r9d,0x2
  4047a0:	mov    esi,edx
  4047a2:	xor    esi,eax
  4047a4:	xor    esi,edi
  4047a6:	mov    ebp,DWORD PTR [rsp-0x24]
  4047aa:	xor    r11d,ebp
  4047ad:	mov    DWORD PTR [rsp-0x1c],r13d
  4047b2:	xor    r11d,r13d
  4047b5:	xor    r11d,r15d
  4047b8:	rorx   ebx,r11d,0x1f
  4047be:	add    ecx,ebx
  4047c0:	mov    DWORD PTR [rsp-0x64],ebx
  4047c4:	add    ecx,esi
  4047c6:	rorx   esi,r8d,0x1b
  4047cc:	lea    r10d,[rsi+rcx*1]
  4047d0:	add    r10d,0x6ed9eba1
  4047d7:	rorx   ecx,edi,0x2
  4047dd:	mov    esi,ecx
  4047df:	xor    esi,edx
  4047e1:	xor    esi,r8d
  4047e4:	mov    r11d,DWORD PTR [rsp-0x20]
  4047e9:	xor    r14d,r11d
  4047ec:	xor    r14d,DWORD PTR [rsp-0x4c]
  4047f1:	xor    r14d,r12d
  4047f4:	rorx   r9d,r14d,0x1f
  4047fa:	add    eax,r9d
  4047fd:	mov    DWORD PTR [rsp-0x60],r9d
  404802:	add    eax,esi
  404804:	rorx   esi,r10d,0x1b
  40480a:	lea    r13d,[rsi+rax*1]
  40480e:	add    r13d,0x6ed9eba1
  404815:	rorx   esi,r8d,0x2
  40481b:	mov    edi,esi
  40481d:	xor    edi,ecx
  40481f:	xor    edi,r10d
  404822:	mov    eax,ebp
  404824:	mov    r15d,DWORD PTR [rsp-0x5c]
  404829:	xor    eax,r15d
  40482c:	xor    eax,DWORD PTR [rsp-0x50]
  404830:	xor    eax,DWORD PTR [rsp-0x68]
  404834:	rorx   ebp,eax,0x1f
  40483a:	add    edx,ebp
  40483c:	mov    r8d,ebp
  40483f:	mov    DWORD PTR [rsp-0x38],ebp
  404843:	add    edx,edi
  404845:	rorx   edi,r13d,0x1b
  40484b:	lea    ebp,[rdi+rdx*1]
  40484e:	add    ebp,0x6ed9eba1
  404854:	rorx   edx,r10d,0x2
  40485a:	mov    edi,edx
  40485c:	xor    edi,esi
  40485e:	xor    edi,r13d
  404861:	mov    eax,r11d
  404864:	mov    r10d,DWORD PTR [rsp-0x58]
  404869:	xor    eax,r10d
  40486c:	xor    eax,DWORD PTR [rsp-0x40]
  404870:	xor    eax,ebx
  404872:	rorx   ebx,eax,0x1f
  404878:	add    ecx,ebx
  40487a:	mov    r11d,ebx
  40487d:	mov    DWORD PTR [rsp-0x34],ebx
  404881:	add    ecx,edi
  404883:	rorx   edi,ebp,0x1b
  404889:	lea    ecx,[rdi+rcx*1]
  40488c:	add    ecx,0x6ed9eba1
  404892:	rorx   eax,r13d,0x2
  404898:	mov    edi,eax
  40489a:	xor    edi,edx
  40489c:	xor    edi,ebp
  40489e:	mov    r14d,DWORD PTR [rsp-0x28]
  4048a3:	mov    ebx,r15d
  4048a6:	xor    ebx,r14d
  4048a9:	xor    ebx,DWORD PTR [rsp-0x44]
  4048ad:	xor    ebx,r9d
  4048b0:	rorx   ebx,ebx,0x1f
  4048b6:	add    esi,ebx
  4048b8:	mov    r15d,ebx
  4048bb:	mov    DWORD PTR [rsp-0x54],ebx
  4048bf:	add    esi,edi
  4048c1:	rorx   edi,ecx,0x1b
  4048c7:	lea    ebx,[rdi+rsi*1]
  4048ca:	add    ebx,0x6ed9eba1
  4048d0:	rorx   esi,ebp,0x2
  4048d6:	mov    ebp,esi
  4048d8:	xor    ebp,eax
  4048da:	xor    ebp,ecx
  4048dc:	mov    edi,r10d
  4048df:	mov    r9d,DWORD PTR [rsp-0x2c]
  4048e4:	xor    edi,r9d
  4048e7:	xor    edi,DWORD PTR [rsp-0x30]
  4048eb:	xor    edi,r8d
  4048ee:	rorx   edi,edi,0x1f
  4048f4:	add    edx,edi
  4048f6:	mov    r8d,edi
  4048f9:	mov    DWORD PTR [rsp-0x58],edi
  4048fd:	add    edx,ebp
  4048ff:	rorx   ebp,ebx,0x1b
  404905:	lea    r10d,[rdx+rbp*1]
  404909:	add    r10d,0x6ed9eba1
  404910:	rorx   ecx,ecx,0x2
  404916:	mov    edx,ebx
  404918:	or     edx,ecx
  40491a:	and    edx,esi
  40491c:	mov    edi,ebx
  40491e:	and    edi,ecx
  404920:	or     edi,edx
  404922:	mov    edx,r14d
  404925:	xor    edx,DWORD PTR [rsp-0x1c]
  404929:	mov    DWORD PTR [rsp-0x18],r12d
  40492e:	xor    edx,r12d
  404931:	xor    edx,r11d
  404934:	rorx   edx,edx,0x1f
  40493a:	add    eax,edx
  40493c:	mov    r14d,edx
  40493f:	mov    DWORD PTR [rsp-0x5c],edx
  404943:	add    eax,edi
  404945:	rorx   edx,r10d,0x1b
  40494b:	lea    r13d,[rdx+rax*1]
  40494f:	add    r13d,0x8f1bbcdc
  404956:	rorx   edx,ebx,0x2
  40495c:	mov    eax,r10d
  40495f:	or     eax,edx
  404961:	and    eax,ecx
  404963:	mov    edi,r10d
  404966:	and    edi,edx
  404968:	or     edi,eax
  40496a:	mov    r11d,DWORD PTR [rsp-0x4c]
  40496f:	mov    eax,r9d
  404972:	xor    eax,r11d
  404975:	xor    eax,DWORD PTR [rsp-0x68]
  404979:	xor    eax,r15d
  40497c:	rorx   r9d,eax,0x1f
  404982:	add    esi,r9d
  404985:	mov    DWORD PTR [rsp-0x3c],r9d
  40498a:	add    esi,edi
  40498c:	rorx   eax,r13d,0x1b
  404992:	lea    r15d,[rax+rsi*1]
  404996:	add    r15d,0x8f1bbcdc
  40499d:	rorx   eax,r10d,0x2
  4049a3:	mov    edi,r13d
  4049a6:	or     edi,eax
  4049a8:	and    edi,edx
  4049aa:	mov    ebp,r13d
  4049ad:	and    ebp,eax
  4049af:	or     ebp,edi
  4049b1:	mov    esi,DWORD PTR [rsp-0x1c]
  4049b5:	mov    ebx,DWORD PTR [rsp-0x50]
  4049b9:	xor    esi,ebx
  4049bb:	xor    esi,DWORD PTR [rsp-0x64]
  4049bf:	xor    esi,r8d
  4049c2:	rorx   esi,esi,0x1f
  4049c8:	mov    DWORD PTR [rsp-0x48],esi
  4049cc:	add    ecx,esi
  4049ce:	add    ecx,ebp
  4049d0:	rorx   edi,r15d,0x1b
  4049d6:	lea    r10d,[rdi+rcx*1]
  4049da:	add    r10d,0x8f1bbcdc
  4049e1:	rorx   ecx,r13d,0x2
  4049e7:	mov    esi,r15d
  4049ea:	or     esi,ecx
  4049ec:	and    esi,eax
  4049ee:	mov    ebp,r15d
  4049f1:	and    ebp,ecx
  4049f3:	or     ebp,esi
  4049f5:	mov    esi,r11d
  4049f8:	mov    r13d,DWORD PTR [rsp-0x40]
  4049fd:	xor    esi,r13d
  404a00:	xor    esi,DWORD PTR [rsp-0x60]
  404a04:	xor    esi,r14d
  404a07:	rorx   r11d,esi,0x1f
  404a0d:	add    edx,r11d
  404a10:	mov    DWORD PTR [rsp-0x4c],r11d
  404a15:	add    edx,ebp
  404a17:	rorx   esi,r10d,0x1b
  404a1d:	lea    ebp,[rsi+rdx*1]
  404a20:	add    ebp,0x8f1bbcdc
  404a26:	rorx   edx,r15d,0x2
  404a2c:	mov    esi,r10d
  404a2f:	or     esi,edx
  404a31:	and    esi,ecx
  404a33:	mov    edi,r10d
  404a36:	and    edi,edx
  404a38:	or     edi,esi
  404a3a:	mov    esi,ebx
  404a3c:	mov    r8d,DWORD PTR [rsp-0x44]
  404a41:	xor    esi,r8d
  404a44:	xor    esi,DWORD PTR [rsp-0x38]
  404a48:	xor    esi,r9d
  404a4b:	rorx   esi,esi,0x1f
  404a51:	add    eax,esi
  404a53:	mov    r9d,esi
  404a56:	mov    DWORD PTR [rsp-0x50],esi
  404a5a:	add    eax,edi
  404a5c:	rorx   esi,ebp,0x1b
  404a62:	lea    r15d,[rsi+rax*1]
  404a66:	add    r15d,0x8f1bbcdc
  404a6d:	rorx   eax,r10d,0x2
  404a73:	mov    edi,ebp
  404a75:	or     edi,eax
  404a77:	and    edi,edx
  404a79:	mov    ebx,ebp
  404a7b:	and    ebx,eax
  404a7d:	or     ebx,edi
  404a7f:	mov    esi,r13d
  404a82:	mov    r12d,DWORD PTR [rsp-0x30]
  404a87:	xor    esi,r12d
  404a8a:	xor    esi,DWORD PTR [rsp-0x34]
  404a8e:	xor    esi,DWORD PTR [rsp-0x48]
  404a92:	rorx   r14d,esi,0x1f
  404a98:	add    ecx,r14d
  404a9b:	mov    DWORD PTR [rsp-0x40],r14d
  404aa0:	add    ecx,ebx
  404aa2:	rorx   edi,r15d,0x1b
  404aa8:	lea    r10d,[rdi+rcx*1]
  404aac:	add    r10d,0x8f1bbcdc
  404ab3:	rorx   ecx,ebp,0x2
  404ab9:	mov    esi,r15d
  404abc:	or     esi,ecx
  404abe:	and    esi,eax
  404ac0:	mov    ebp,r15d
  404ac3:	and    ebp,ecx
  404ac5:	or     ebp,esi
  404ac7:	xor    r8d,DWORD PTR [rsp-0x18]
  404acc:	xor    r8d,DWORD PTR [rsp-0x54]
  404ad1:	xor    r8d,r11d
  404ad4:	rorx   r13d,r8d,0x1f
  404ada:	add    edx,r13d
  404add:	mov    DWORD PTR [rsp-0x44],r13d
  404ae2:	add    edx,ebp
  404ae4:	rorx   esi,r10d,0x1b
  404aea:	lea    ebp,[rsi+rdx*1]
  404aed:	add    ebp,0x8f1bbcdc
  404af3:	rorx   edx,r15d,0x2
  404af9:	mov    esi,r10d
  404afc:	or     esi,edx
  404afe:	and    esi,ecx
  404b00:	mov    edi,r10d
  404b03:	and    edi,edx
  404b05:	or     edi,esi
  404b07:	mov    esi,r12d
  404b0a:	mov    r8d,DWORD PTR [rsp-0x68]
  404b0f:	xor    esi,r8d
  404b12:	xor    esi,DWORD PTR [rsp-0x58]
  404b16:	xor    esi,r9d
  404b19:	rorx   r12d,esi,0x1f
  404b1f:	add    eax,r12d
  404b22:	mov    DWORD PTR [rsp-0x2c],r12d
  404b27:	add    eax,edi
  404b29:	rorx   esi,ebp,0x1b
  404b2f:	lea    r15d,[rsi+rax*1]
  404b33:	add    r15d,0x8f1bbcdc
  404b3a:	rorx   eax,r10d,0x2
  404b40:	mov    edi,ebp
  404b42:	or     edi,eax
  404b44:	and    edi,edx
  404b46:	mov    ebx,ebp
  404b48:	and    ebx,eax
  404b4a:	or     ebx,edi
  404b4c:	mov    esi,DWORD PTR [rsp-0x18]
  404b50:	mov    r11d,DWORD PTR [rsp-0x64]
  404b55:	xor    esi,r11d
  404b58:	xor    esi,DWORD PTR [rsp-0x5c]
  404b5c:	xor    esi,r14d
  404b5f:	rorx   esi,esi,0x1f
  404b65:	add    ecx,esi
  404b67:	mov    r14d,esi
  404b6a:	mov    DWORD PTR [rsp-0x24],esi
  404b6e:	add    ecx,ebx
  404b70:	rorx   edi,r15d,0x1b
  404b76:	lea    r10d,[rdi+rcx*1]
  404b7a:	add    r10d,0x8f1bbcdc
  404b81:	rorx   ecx,ebp,0x2
  404b87:	mov    esi,r15d
  404b8a:	or     esi,ecx
  404b8c:	and    esi,eax
  404b8e:	mov    ebp,r15d
  404b91:	and    ebp,ecx
  404b93:	or     ebp,esi
  404b95:	mov    r9d,DWORD PTR [rsp-0x60]
  404b9a:	xor    r8d,r9d
  404b9d:	xor    r8d,DWORD PTR [rsp-0x3c]
  404ba2:	xor    r8d,r13d
  404ba5:	rorx   esi,r8d,0x1f
  404bab:	mov    DWORD PTR [rsp-0x68],esi
  404baf:	add    edx,esi
  404bb1:	add    edx,ebp
  404bb3:	rorx   esi,r10d,0x1b
  404bb9:	lea    ebp,[rsi+rdx*1]
  404bbc:	add    ebp,0x8f1bbcdc
  404bc2:	rorx   edx,r15d,0x2
  404bc8:	mov    esi,r10d
  404bcb:	or     esi,edx
  404bcd:	and    esi,ecx
  404bcf:	mov    edi,r10d
  404bd2:	and    edi,edx
  404bd4:	or     edi,esi
  404bd6:	mov    r8d,DWORD PTR [rsp-0x38]
  404bdb:	xor    r11d,r8d
  404bde:	xor    r11d,DWORD PTR [rsp-0x48]
  404be3:	xor    r11d,r12d
  404be6:	rorx   esi,r11d,0x1f
  404bec:	mov    DWORD PTR [rsp-0x64],esi
  404bf0:	add    eax,esi
  404bf2:	add    eax,edi
  404bf4:	rorx   esi,ebp,0x1b
  404bfa:	lea    r15d,[rsi+rax*1]
  404bfe:	add    r15d,0x8f1bbcdc
  404c05:	rorx   eax,r10d,0x2
  404c0b:	mov    edi,ebp
  404c0d:	or     edi,eax
  404c0f:	and    edi,edx
  404c11:	mov    ebx,ebp
  404c13:	and    ebx,eax
  404c15:	or     ebx,edi
  404c17:	mov    esi,r9d
  404c1a:	mov    r11d,DWORD PTR [rsp-0x34]
  404c1f:	xor    esi,r11d
  404c22:	xor    esi,DWORD PTR [rsp-0x4c]
  404c26:	xor    esi,r14d
  404c29:	rorx   esi,esi,0x1f
  404c2f:	add    ecx,esi
  404c31:	mov    r13d,esi
  404c34:	mov    DWORD PTR [rsp-0x28],esi
  404c38:	add    ecx,ebx
  404c3a:	rorx   edi,r15d,0x1b
  404c40:	lea    r10d,[rdi+rcx*1]
  404c44:	add    r10d,0x8f1bbcdc
  404c4b:	rorx   ecx,ebp,0x2
  404c51:	mov    esi,r15d
  404c54:	or     esi,ecx
  404c56:	and    esi,eax
  404c58:	mov    ebp,r15d
  404c5b:	and    ebp,ecx
  404c5d:	or     ebp,esi
  404c5f:	mov    esi,r8d
  404c62:	mov    r12d,DWORD PTR [rsp-0x54]
  404c67:	xor    esi,r12d
  404c6a:	xor    esi,DWORD PTR [rsp-0x50]
  404c6e:	xor    esi,DWORD PTR [rsp-0x68]
  404c72:	rorx   esi,esi,0x1f
  404c78:	mov    DWORD PTR [rsp-0x60],esi
  404c7c:	add    edx,esi
  404c7e:	add    edx,ebp
  404c80:	rorx   esi,r10d,0x1b
  404c86:	lea    r9d,[rsi+rdx*1]
  404c8a:	add    r9d,0x8f1bbcdc
  404c91:	rorx   edx,r15d,0x2
  404c97:	mov    esi,r10d
  404c9a:	or     esi,edx
  404c9c:	and    esi,ecx
  404c9e:	mov    edi,r10d
  404ca1:	and    edi,edx
  404ca3:	or     edi,esi
  404ca5:	mov    ebx,DWORD PTR [rsp-0x58]
  404ca9:	mov    esi,r11d
  404cac:	xor    esi,ebx
  404cae:	xor    esi,DWORD PTR [rsp-0x40]
  404cb2:	xor    esi,DWORD PTR [rsp-0x64]
  404cb6:	rorx   esi,esi,0x1f
  404cbc:	add    eax,esi
  404cbe:	mov    r11d,esi
  404cc1:	mov    DWORD PTR [rsp-0x34],esi
  404cc5:	add    eax,edi
  404cc7:	rorx   esi,r9d,0x1b
  404ccd:	lea    r8d,[rsi+rax*1]
  404cd1:	add    r8d,0x8f1bbcdc
  404cd8:	rorx   eax,r10d,0x2
  404cde:	mov    edi,r9d
  404ce1:	or     edi,eax
  404ce3:	and    edi,edx
  404ce5:	mov    ebp,r9d
  404ce8:	and    ebp,eax
  404cea:	or     ebp,edi
  404cec:	mov    r14d,DWORD PTR [rsp-0x5c]
  404cf1:	mov    esi,r12d
  404cf4:	xor    esi,r14d
  404cf7:	xor    esi,DWORD PTR [rsp-0x44]
  404cfb:	xor    esi,r13d
  404cfe:	rorx   r13d,esi,0x1f
  404d04:	add    ecx,r13d
  404d07:	add    ecx,ebp
  404d09:	rorx   edi,r8d,0x1b
  404d0f:	lea    r10d,[rdi+rcx*1]
  404d13:	add    r10d,0x8f1bbcdc
  404d1a:	rorx   ecx,r9d,0x2
  404d20:	mov    esi,r8d
  404d23:	or     esi,ecx
  404d25:	and    esi,eax
  404d27:	mov    ebp,r8d
  404d2a:	and    ebp,ecx
  404d2c:	or     ebp,esi
  404d2e:	mov    esi,ebx
  404d30:	mov    ebx,DWORD PTR [rsp-0x3c]
  404d34:	xor    esi,ebx
  404d36:	xor    esi,DWORD PTR [rsp-0x2c]
  404d3a:	xor    esi,DWORD PTR [rsp-0x60]
  404d3e:	rorx   esi,esi,0x1f
  404d44:	add    edx,esi
  404d46:	mov    r12d,esi
  404d49:	mov    DWORD PTR [rsp-0x54],esi
  404d4d:	add    edx,ebp
  404d4f:	rorx   esi,r10d,0x1b
  404d55:	lea    r9d,[rsi+rdx*1]
  404d59:	add    r9d,0x8f1bbcdc
  404d60:	rorx   edx,r8d,0x2
  404d66:	mov    esi,r10d
  404d69:	or     esi,edx
  404d6b:	and    esi,ecx
  404d6d:	mov    edi,r10d
  404d70:	and    edi,edx
  404d72:	or     edi,esi
  404d74:	mov    esi,r14d
  404d77:	mov    r15d,DWORD PTR [rsp-0x48]
  404d7c:	xor    esi,r15d
  404d7f:	xor    esi,DWORD PTR [rsp-0x24]
  404d83:	xor    esi,r11d
  404d86:	rorx   esi,esi,0x1f
  404d8c:	add    eax,esi
  404d8e:	mov    r11d,esi
  404d91:	mov    DWORD PTR [rsp-0x58],esi
  404d95:	add    eax,edi
  404d97:	rorx   esi,r9d,0x1b
  404d9d:	lea    r8d,[rsi+rax*1]
  404da1:	add    r8d,0x8f1bbcdc
  404da8:	rorx   esi,r10d,0x2
  404dae:	mov    eax,r9d
  404db1:	or     eax,esi
  404db3:	and    eax,edx
  404db5:	mov    edi,r9d
  404db8:	and    edi,esi
  404dba:	or     edi,eax
  404dbc:	mov    eax,ebx
  404dbe:	mov    ebx,DWORD PTR [rsp-0x4c]
  404dc2:	xor    eax,ebx
  404dc4:	xor    eax,DWORD PTR [rsp-0x68]
  404dc8:	xor    eax,r13d
  404dcb:	rorx   eax,eax,0x1f
  404dd1:	add    ecx,eax
  404dd3:	mov    r14d,eax
  404dd6:	mov    DWORD PTR [rsp-0x38],eax
  404dda:	add    ecx,edi
  404ddc:	rorx   eax,r8d,0x1b
  404de2:	lea    ecx,[rax+rcx*1]
  404de5:	add    ecx,0x8f1bbcdc
  404deb:	rorx   eax,r9d,0x2
  404df1:	mov    edi,r8d
  404df4:	or     edi,eax
  404df6:	and    edi,esi
  404df8:	mov    ebp,r8d
  404dfb:	and    ebp,eax
  404dfd:	or     ebp,edi
  404dff:	mov    edi,r15d
  404e02:	mov    r10d,DWORD PTR [rsp-0x50]
  404e07:	xor    edi,r10d
  404e0a:	xor    edi,DWORD PTR [rsp-0x64]
  404e0e:	xor    edi,r12d
  404e11:	rorx   edi,edi,0x1f
  404e17:	add    edx,edi
  404e19:	mov    r15d,edi
  404e1c:	mov    DWORD PTR [rsp-0x30],edi
  404e20:	add    edx,ebp
  404e22:	rorx   edi,ecx,0x1b
  404e28:	lea    r9d,[rdi+rdx*1]
  404e2c:	add    r9d,0x8f1bbcdc
  404e33:	rorx   edx,r8d,0x2
  404e39:	mov    edi,ecx
  404e3b:	or     edi,edx
  404e3d:	and    edi,eax
  404e3f:	mov    ebp,ecx
  404e41:	and    ebp,edx
  404e43:	or     ebp,edi
  404e45:	mov    edi,ebx
  404e47:	mov    ebx,DWORD PTR [rsp-0x40]
  404e4b:	xor    edi,ebx
  404e4d:	xor    edi,DWORD PTR [rsp-0x28]
  404e51:	xor    edi,r11d
  404e54:	rorx   edi,edi,0x1f
  404e5a:	add    esi,edi
  404e5c:	mov    r11d,edi
  404e5f:	mov    DWORD PTR [rsp-0x5c],edi
  404e63:	add    esi,ebp
  404e65:	rorx   edi,r9d,0x1b
  404e6b:	lea    r8d,[rdi+rsi*1]
  404e6f:	add    r8d,0x8f1bbcdc
  404e76:	rorx   esi,ecx,0x2
  404e7c:	mov    ecx,esi
  404e7e:	xor    ecx,edx
  404e80:	xor    ecx,r9d
  404e83:	mov    r12d,DWORD PTR [rsp-0x44]
  404e88:	xor    r10d,r12d
  404e8b:	xor    r10d,DWORD PTR [rsp-0x60]
  404e90:	xor    r10d,r14d
  404e93:	rorx   edi,r10d,0x1f
  404e99:	add    eax,edi
  404e9b:	mov    r10d,edi
  404e9e:	mov    DWORD PTR [rsp-0x48],edi
  404ea2:	add    eax,ecx
  404ea4:	rorx   ecx,r8d,0x1b
  404eaa:	lea    ecx,[rcx+rax*1]
  404ead:	add    ecx,0xca62c1d6
  404eb3:	rorx   eax,r9d,0x2
  404eb9:	mov    edi,eax
  404ebb:	xor    edi,esi
  404ebd:	xor    edi,r8d
  404ec0:	mov    ebp,ebx
  404ec2:	mov    ebx,DWORD PTR [rsp-0x2c]
  404ec6:	xor    ebp,ebx
  404ec8:	xor    ebp,DWORD PTR [rsp-0x34]
  404ecc:	xor    ebp,r15d
  404ecf:	rorx   r15d,ebp,0x1f
  404ed5:	add    edx,r15d
  404ed8:	mov    DWORD PTR [rsp-0x50],r15d
  404edd:	add    edx,edi
  404edf:	rorx   edi,ecx,0x1b
  404ee5:	lea    r9d,[rdi+rdx*1]
  404ee9:	add    r9d,0xca62c1d6
  404ef0:	rorx   edx,r8d,0x2
  404ef6:	mov    edi,edx
  404ef8:	xor    edi,eax
  404efa:	xor    edi,ecx
  404efc:	mov    ebp,r12d
  404eff:	mov    r12d,DWORD PTR [rsp-0x24]
  404f04:	xor    ebp,r12d
  404f07:	xor    ebp,r13d
  404f0a:	xor    ebp,r11d
  404f0d:	rorx   r11d,ebp,0x1f
  404f13:	add    esi,r11d
  404f16:	mov    DWORD PTR [rsp-0x4c],r11d
  404f1b:	add    esi,edi
  404f1d:	rorx   edi,r9d,0x1b
  404f23:	lea    edi,[rdi+rsi*1]
  404f26:	add    edi,0xca62c1d6
  404f2c:	rorx   esi,ecx,0x2
  404f32:	mov    ecx,esi
  404f34:	xor    ecx,edx
  404f36:	xor    ecx,r9d
  404f39:	mov    ebp,ebx
  404f3b:	mov    ebx,DWORD PTR [rsp-0x68]
  404f3f:	xor    ebp,ebx
  404f41:	xor    ebp,DWORD PTR [rsp-0x54]
  404f45:	xor    ebp,r10d
  404f48:	rorx   r14d,ebp,0x1f
  404f4e:	add    eax,r14d
  404f51:	mov    DWORD PTR [rsp-0x3c],r14d
  404f56:	add    eax,ecx
  404f58:	rorx   ecx,edi,0x1b
  404f5e:	lea    r8d,[rcx+rax*1]
  404f62:	add    r8d,0xca62c1d6
  404f69:	rorx   eax,r9d,0x2
  404f6f:	mov    ecx,eax
  404f71:	xor    ecx,esi
  404f73:	xor    ecx,edi
  404f75:	mov    ebp,r12d
  404f78:	mov    r10d,DWORD PTR [rsp-0x64]
  404f7d:	xor    ebp,r10d
  404f80:	xor    ebp,DWORD PTR [rsp-0x58]
  404f84:	xor    ebp,r15d
  404f87:	rorx   r12d,ebp,0x1f
  404f8d:	add    edx,r12d
  404f90:	add    edx,ecx
  404f92:	rorx   ecx,r8d,0x1b
  404f98:	lea    edx,[rcx+rdx*1]
  404f9b:	add    edx,0xca62c1d6
  404fa1:	rorx   ecx,edi,0x2
  404fa7:	mov    edi,ecx
  404fa9:	xor    edi,eax
  404fab:	xor    edi,r8d
  404fae:	mov    ebp,ebx
  404fb0:	mov    r9d,DWORD PTR [rsp-0x28]
  404fb5:	xor    ebp,r9d
  404fb8:	xor    ebp,DWORD PTR [rsp-0x38]
  404fbc:	xor    ebp,r11d
  404fbf:	rorx   ebp,ebp,0x1f
  404fc5:	add    esi,ebp
  404fc7:	mov    r11d,ebp
  404fca:	mov    DWORD PTR [rsp-0x68],ebp
  404fce:	add    esi,edi
  404fd0:	rorx   edi,edx,0x1b
  404fd6:	lea    edi,[rdi+rsi*1]
  404fd9:	add    edi,0xca62c1d6
  404fdf:	rorx   esi,r8d,0x2
  404fe5:	mov    r8d,esi
  404fe8:	xor    r8d,ecx
  404feb:	xor    r8d,edx
  404fee:	mov    ebp,r10d
  404ff1:	mov    r10d,DWORD PTR [rsp-0x60]
  404ff6:	xor    ebp,r10d
  404ff9:	xor    ebp,DWORD PTR [rsp-0x30]
  404ffd:	xor    ebp,r14d
  405000:	rorx   r15d,ebp,0x1f
  405006:	add    eax,r15d
  405009:	mov    DWORD PTR [rsp-0x44],r15d
  40500e:	add    eax,r8d
  405011:	rorx   ebx,edi,0x1b
  405017:	lea    r8d,[rbx+rax*1]
  40501b:	add    r8d,0xca62c1d6
  405022:	rorx   eax,edx,0x2
  405028:	mov    edx,eax
  40502a:	xor    edx,esi
  40502c:	xor    edx,edi
  40502e:	mov    ebp,r9d
  405031:	mov    r9d,DWORD PTR [rsp-0x34]
  405036:	xor    ebp,r9d
  405039:	xor    ebp,DWORD PTR [rsp-0x5c]
  40503d:	xor    ebp,r12d
  405040:	rorx   ebx,ebp,0x1f
  405046:	mov    DWORD PTR [rsp-0x64],ebx
  40504a:	add    ecx,ebx
  40504c:	add    ecx,edx
  40504e:	rorx   edx,r8d,0x1b
  405054:	lea    edx,[rdx+rcx*1]
  405057:	add    edx,0xca62c1d6
  40505d:	rorx   ecx,edi,0x2
  405063:	mov    edi,ecx
  405065:	xor    edi,eax
  405067:	xor    edi,r8d
  40506a:	mov    ebp,r10d
  40506d:	xor    ebp,r13d
  405070:	xor    ebp,DWORD PTR [rsp-0x48]
  405074:	xor    ebp,r11d
  405077:	rorx   r14d,ebp,0x1f
  40507d:	add    esi,r14d
  405080:	mov    DWORD PTR [rsp-0x60],r14d
  405085:	add    esi,edi
  405087:	rorx   edi,edx,0x1b
  40508d:	lea    edi,[rdi+rsi*1]
  405090:	add    edi,0xca62c1d6
  405096:	rorx   esi,r8d,0x2
  40509c:	mov    ebx,esi
  40509e:	xor    ebx,ecx
  4050a0:	xor    ebx,edx
  4050a2:	mov    ebp,r9d
  4050a5:	mov    r10d,DWORD PTR [rsp-0x54]
  4050aa:	xor    ebp,r10d
  4050ad:	xor    ebp,DWORD PTR [rsp-0x50]
  4050b1:	xor    ebp,r15d
  4050b4:	rorx   r9d,ebp,0x1f
  4050ba:	add    eax,r9d
  4050bd:	add    eax,ebx
  4050bf:	rorx   ebx,edi,0x1b
  4050c5:	lea    r8d,[rbx+rax*1]
  4050c9:	add    r8d,0xca62c1d6
  4050d0:	rorx   eax,edx,0x2
  4050d6:	mov    edx,eax
  4050d8:	xor    edx,esi
  4050da:	xor    edx,edi
  4050dc:	mov    r11d,DWORD PTR [rsp-0x58]
  4050e1:	xor    r13d,r11d
  4050e4:	xor    r13d,DWORD PTR [rsp-0x4c]
  4050e9:	xor    r13d,DWORD PTR [rsp-0x64]
  4050ee:	rorx   r15d,r13d,0x1f
  4050f4:	add    ecx,r15d
  4050f7:	add    ecx,edx
  4050f9:	rorx   edx,r8d,0x1b
  4050ff:	lea    r13d,[rdx+rcx*1]
  405103:	add    r13d,0xca62c1d6
  40510a:	rorx   ebx,edi,0x2
  405110:	mov    ecx,ebx
  405112:	xor    ecx,eax
  405114:	xor    ecx,r8d
  405117:	mov    edx,r10d
  40511a:	mov    ebp,DWORD PTR [rsp-0x38]
  40511e:	xor    edx,ebp
  405120:	xor    edx,DWORD PTR [rsp-0x3c]
  405124:	xor    edx,r14d
  405127:	rorx   edx,edx,0x1f
  40512d:	add    esi,edx
  40512f:	mov    r10d,edx
  405132:	mov    DWORD PTR [rsp-0x40],edx
  405136:	add    esi,ecx
  405138:	rorx   ecx,r13d,0x1b
  40513e:	lea    edi,[rcx+rsi*1]
  405141:	add    edi,0xca62c1d6
  405147:	rorx   ecx,r8d,0x2
  40514d:	mov    edx,ecx
  40514f:	xor    edx,ebx
  405151:	xor    edx,r13d
  405154:	mov    esi,r11d
  405157:	mov    r14d,DWORD PTR [rsp-0x30]
  40515c:	xor    esi,r14d
  40515f:	xor    esi,r12d
  405162:	xor    esi,r9d
  405165:	rorx   r8d,esi,0x1f
  40516b:	add    eax,r8d
  40516e:	add    eax,edx
  405170:	rorx   edx,edi,0x1b
  405176:	lea    edx,[rdx+rax*1]
  405179:	add    edx,0xca62c1d6
  40517f:	rorx   r11d,r13d,0x2
  405185:	mov    eax,r11d
  405188:	xor    eax,ecx
  40518a:	xor    eax,edi
  40518c:	mov    esi,DWORD PTR [rsp-0x5c]
  405190:	xor    ebp,esi
  405192:	xor    ebp,DWORD PTR [rsp-0x68]
  405196:	xor    ebp,r15d
  405199:	rorx   ebp,ebp,0x1f
  40519f:	mov    DWORD PTR [rsp-0x54],ebp
  4051a3:	add    ebx,ebp
  4051a5:	add    ebx,eax
  4051a7:	rorx   eax,edx,0x1b
  4051ad:	lea    r13d,[rax+rbx*1]
  4051b1:	add    r13d,0xca62c1d6
  4051b8:	mov    ebp,r14d
  4051bb:	xor    ebp,DWORD PTR [rsp-0x48]
  4051bf:	xor    ebp,DWORD PTR [rsp-0x44]
  4051c3:	rorx   ebx,edi,0x2
  4051c9:	mov    eax,ebx
  4051cb:	xor    eax,r11d
  4051ce:	xor    eax,edx
  4051d0:	xor    ebp,r10d
  4051d3:	rorx   edi,ebp,0x1f
  4051d9:	add    ecx,edi
  4051db:	add    ecx,eax
  4051dd:	rorx   eax,r13d,0x1b
  4051e3:	lea    r10d,[rax+rcx*1]
  4051e7:	add    r10d,0xca62c1d6
  4051ee:	mov    eax,esi
  4051f0:	mov    ecx,DWORD PTR [rsp-0x50]
  4051f4:	xor    eax,ecx
  4051f6:	xor    eax,DWORD PTR [rsp-0x64]
  4051fa:	xor    eax,r8d
  4051fd:	xor    ecx,DWORD PTR [rsp-0x3c]
  405201:	xor    ecx,r9d
  405204:	xor    ecx,edi
  405206:	mov    esi,ecx
  405208:	mov    r8d,DWORD PTR [rsp-0x4c]
  40520d:	xor    r12d,r8d
  405210:	xor    r12d,r15d
  405213:	rorx   edx,edx,0x2
  405219:	rorx   r15d,eax,0x1f
  40521f:	rorx   edi,r13d,0x2
  405225:	rorx   r14d,r10d,0x2
  40522b:	mov    ecx,r14d
  40522e:	xor    ecx,edi
  405230:	xor    r12d,r15d
  405233:	rorx   eax,r12d,0x1f
  405239:	add    eax,edi
  40523b:	xor    edi,edx
  40523d:	rorx   esi,esi,0x1f
  405243:	add    esi,edx
  405245:	xor    edx,ebx
  405247:	xor    edx,r13d
  40524a:	add    r11d,r15d
  40524d:	add    r11d,edx
  405250:	rorx   edx,r10d,0x1b
  405256:	lea    edx,[rdx+r11*1]
  40525a:	add    edx,0xca62c1d6
  405260:	xor    edi,r10d
  405263:	mov    ebp,DWORD PTR [rsp-0x48]
  405267:	xor    ebp,r8d
  40526a:	xor    ebp,DWORD PTR [rsp-0x60]
  40526e:	xor    ebp,DWORD PTR [rsp-0x54]
  405272:	rorx   r8d,ebp,0x1f
  405278:	add    ebx,r8d
  40527b:	add    ebx,edi
  40527d:	rorx   edi,edx,0x1b
  405283:	lea    edi,[rdi+rbx*1]
  405286:	add    edi,0xca62c1d6
  40528c:	xor    ecx,edx
  40528e:	add    esi,ecx
  405290:	rorx   ecx,edi,0x1b
  405296:	lea    ecx,[rcx+rsi*1]
  405299:	add    ecx,0xca62c1d6
  40529f:	rorx   edx,edx,0x2
  4052a5:	mov    esi,edx
  4052a7:	xor    esi,r14d
  4052aa:	xor    esi,edi
  4052ac:	add    eax,esi
  4052ae:	rorx   esi,ecx,0x1b
  4052b4:	lea    eax,[rsi+rax*1]
  4052b7:	add    eax,0xca62c1d6
  4052bc:	rorx   esi,ecx,0x2
  4052c2:	vmovd  xmm1,eax
  4052c6:	vpinsrd xmm1,xmm1,esi,0x1
  4052cc:	rorx   esi,edi,0x2
  4052d2:	vpinsrd xmm1,xmm1,esi,0x2
  4052d8:	xor    esi,edx
  4052da:	xor    esi,ecx
  4052dc:	mov    ecx,DWORD PTR [rsp-0x68]
  4052e0:	xor    ecx,DWORD PTR [rsp-0x3c]
  4052e4:	xor    ecx,DWORD PTR [rsp-0x40]
  4052e8:	xor    ecx,r8d
  4052eb:	rorx   ecx,ecx,0x1f
  4052f1:	add    ecx,DWORD PTR [rsp-0xc]
  4052f5:	add    ecx,r14d
  4052f8:	add    ecx,esi
  4052fa:	rorx   eax,eax,0x1b
  405300:	lea    eax,[rax+rcx*1]
  405303:	add    eax,0xca62c1d6
  405308:	mov    rcx,QWORD PTR [rsp-0x8]
  40530d:	mov    DWORD PTR [rcx],eax
  40530f:	vpinsrd xmm1,xmm1,edx,0x3
  405315:	vpaddd xmm0,xmm1,xmm0
  405319:	vmovdqu XMMWORD PTR [rcx+0x4],xmm0
  40531e:	pop    rbx
  40531f:	pop    r12
  405321:	pop    r13
  405323:	pop    r14
  405325:	pop    r15
  405327:	pop    rbp
  405328:	ret    
  405329:	nop    DWORD PTR [rax+0x0]
  405330:	push   r15
  405332:	push   r14
  405334:	push   r13
  405336:	push   r12
  405338:	push   rbx
  405339:	sub    rsp,0x10
  40533d:	mov    r13,rdi
  405340:	mov    rbx,QWORD PTR [rdi+0x18]
  405344:	movbe  QWORD PTR [rsp+0x8],rbx
  40534b:	mov    r14,rsi
  40534e:	mov    eax,ebx
  405350:	shr    eax,0x3
  405353:	and    eax,0x3f
  405356:	add    rbx,0x8
  40535a:	mov    QWORD PTR [rdi+0x18],rbx
  40535e:	cmp    eax,0x3f
  405361:	jne    405381 <rb_base64_encode@plt+0x3051>
  405363:	lea    rsi,[r13+0x20]
  405367:	mov    BYTE PTR [r13+0x5f],0x80
  40536c:	mov    rdi,r13
  40536f:	call   404010 <rb_base64_encode@plt+0x1ce0>
  405374:	mov    rbx,QWORD PTR [r13+0x18]
  405378:	mov    edx,0x1
  40537d:	xor    eax,eax
  40537f:	jmp    405383 <rb_base64_encode@plt+0x3053>
  405381:	xor    edx,edx
  405383:	lea    rdi,[rax+r13*1]
  405387:	add    rdi,0x20
  40538b:	lea    rsi,[rip+0xede]        # 406270 <rb_base64_encode@plt+0x3f40>
  405392:	add    rsi,rdx
  405395:	xor    rdx,0x1
  405399:	call   402310 <memcpy@plt>
  40539e:	mov    ecx,ebx
  4053a0:	and    ecx,0x1f8
  4053a6:	mov    eax,ebx
  4053a8:	shr    eax,0x3
  4053ab:	and    eax,0x3f
  4053ae:	cmp    rcx,0x1c0
  4053b5:	je     40542b <rb_base64_encode@plt+0x30fb>
  4053b7:	lea    r15,[r13+0x20]
  4053bb:	lea    r12,[rip+0xeb0]        # 406272 <rb_base64_encode@plt+0x3f42>
  4053c2:	jmp    405419 <rb_base64_encode@plt+0x30e9>
  4053c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053ce:	xchg   ax,ax
  4053d0:	mov    BYTE PTR [r13+0x5f],0x0
  4053d5:	mov    rdi,r13
  4053d8:	mov    rsi,r15
  4053db:	call   404010 <rb_base64_encode@plt+0x1ce0>
  4053e0:	mov    edx,0x1
  4053e5:	xor    eax,eax
  4053e7:	lea    rdi,[rax+r13*1]
  4053eb:	add    rdi,0x20
  4053ef:	lea    rsi,[r12+rdx*1]
  4053f3:	xor    rdx,0x1
  4053f7:	call   402310 <memcpy@plt>
  4053fc:	mov    rbx,QWORD PTR [r13+0x18]
  405400:	mov    ecx,ebx
  405402:	and    ecx,0x1f8
  405408:	mov    eax,ebx
  40540a:	shr    eax,0x3
  40540d:	and    eax,0x3f
  405410:	cmp    rcx,0x1c0
  405417:	je     40542b <rb_base64_encode@plt+0x30fb>
  405419:	add    rbx,0x8
  40541d:	mov    QWORD PTR [r13+0x18],rbx
  405421:	cmp    rax,0x3f
  405425:	je     4053d0 <rb_base64_encode@plt+0x30a0>
  405427:	xor    edx,edx
  405429:	jmp    4053e7 <rb_base64_encode@plt+0x30b7>
  40542b:	add    rbx,0x40
  40542f:	mov    QWORD PTR [r13+0x18],rbx
  405433:	cmp    rax,0x38
  405437:	jb     40546a <rb_base64_encode@plt+0x313a>
  405439:	mov    r15d,0x40
  40543f:	sub    r15,rax
  405442:	lea    rdi,[rax+r13*1]
  405446:	add    rdi,0x20
  40544a:	lea    r12,[r13+0x20]
  40544e:	lea    rsi,[rsp+0x8]
  405453:	mov    rdx,r15
  405456:	call   402310 <memcpy@plt>
  40545b:	mov    rdi,r13
  40545e:	mov    rsi,r12
  405461:	call   404010 <rb_base64_encode@plt+0x1ce0>
  405466:	xor    eax,eax
  405468:	jmp    40546d <rb_base64_encode@plt+0x313d>
  40546a:	xor    r15d,r15d
  40546d:	lea    rdi,[rax+r13*1]
  405471:	add    rdi,0x20
  405475:	lea    rsi,[rsp+r15*1]
  405479:	add    rsi,0x8
  40547d:	mov    edx,0x8
  405482:	sub    rdx,r15
  405485:	call   402310 <memcpy@plt>
  40548a:	xor    eax,eax
  40548c:	nop    DWORD PTR [rax+0x0]
  405490:	movzx  ecx,BYTE PTR [r13+rax*1+0x3]
  405496:	mov    BYTE PTR [r14+rax*1],cl
  40549a:	movzx  ecx,BYTE PTR [r13+rax*1+0x2]
  4054a0:	mov    BYTE PTR [r14+rax*1+0x1],cl
  4054a5:	movzx  ecx,BYTE PTR [r13+rax*1+0x1]
  4054ab:	mov    BYTE PTR [r14+rax*1+0x2],cl
  4054b0:	movzx  ecx,BYTE PTR [r13+rax*1+0x0]
  4054b6:	mov    BYTE PTR [r14+rax*1+0x3],cl
  4054bb:	add    rax,0x4
  4054bf:	cmp    rax,0x14
  4054c3:	jne    405490 <rb_base64_encode@plt+0x3160>
  4054c5:	vxorps xmm0,xmm0,xmm0
  4054c9:	vmovups YMMWORD PTR [r13+0x40],ymm0
  4054cf:	vmovups YMMWORD PTR [r13+0x20],ymm0
  4054d5:	vmovups YMMWORD PTR [r13+0x0],ymm0
  4054db:	add    rsp,0x10
  4054df:	pop    rbx
  4054e0:	pop    r12
  4054e2:	pop    r13
  4054e4:	pop    r14
  4054e6:	pop    r15
  4054e8:	vzeroupper 
  4054eb:	ret    
  4054ec:	nop    DWORD PTR [rax+0x0]
  4054f0:	endbr64 
  4054f4:	push   r15
  4054f6:	lea    r15,[rip+0x28cb]        # 407dc8 <rb_base64_encode@plt+0x5a98>
  4054fd:	push   r14
  4054ff:	mov    r14,rdx
  405502:	push   r13
  405504:	mov    r13,rsi
  405507:	push   r12
  405509:	mov    r12d,edi
  40550c:	push   rbp
  40550d:	lea    rbp,[rip+0x28bc]        # 407dd0 <rb_base64_encode@plt+0x5aa0>
  405514:	push   rbx
  405515:	sub    rbp,r15
  405518:	sub    rsp,0x8
  40551c:	call   402000 <dup2@plt-0x30>
  405521:	sar    rbp,0x3
  405525:	je     405546 <rb_base64_encode@plt+0x3216>
  405527:	xor    ebx,ebx
  405529:	nop    DWORD PTR [rax+0x0]
  405530:	mov    rdx,r14
  405533:	mov    rsi,r13
  405536:	mov    edi,r12d
  405539:	call   QWORD PTR [r15+rbx*8]
  40553d:	add    rbx,0x1
  405541:	cmp    rbp,rbx
  405544:	jne    405530 <rb_base64_encode@plt+0x3200>
  405546:	add    rsp,0x8
  40554a:	pop    rbx
  40554b:	pop    rbp
  40554c:	pop    r12
  40554e:	pop    r13
  405550:	pop    r14
  405552:	pop    r15
  405554:	ret    
  405555:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405560:	endbr64 
  405564:	ret    

Disassembly of section .fini:

0000000000405568 <.fini>:
  405568:	endbr64 
  40556c:	sub    rsp,0x8
  405570:	add    rsp,0x8
  405574:	ret    
