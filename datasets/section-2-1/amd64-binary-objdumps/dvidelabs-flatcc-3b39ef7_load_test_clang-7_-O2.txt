
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xafe9]        # 40dff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xafe2]        # 40e008 <flatcc_builder_padding_base@@Base+0x4978>
  403026:	jmp    QWORD PTR [rip+0xafe4]        # 40e010 <flatcc_builder_padding_base@@Base+0x4980>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xafe2]        # 40e018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xafda]        # 40e020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <fclose@plt>:
  403050:	jmp    QWORD PTR [rip+0xafd2]        # 40e028 <fclose@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <strlen@plt>:
  403060:	jmp    QWORD PTR [rip+0xafca]        # 40e030 <strlen@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <printf@plt>:
  403070:	jmp    QWORD PTR [rip+0xafc2]        # 40e038 <printf@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <gettimeofday@plt>:
  403080:	jmp    QWORD PTR [rip+0xafba]        # 40e040 <gettimeofday@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <__assert_fail@plt>:
  403090:	jmp    QWORD PTR [rip+0xafb2]        # 40e048 <__assert_fail@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memset@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xafaa]        # 40e050 <memset@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memchr@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xafa2]        # 40e058 <memchr@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <memcmp@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xaf9a]        # 40e060 <memcmp@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <strcmp@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xaf92]        # 40e068 <strcmp@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <memcpy@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xaf8a]        # 40e070 <memcpy@GLIBC_2.14>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <malloc@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xaf82]        # 40e078 <malloc@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <fwrite_unlocked@plt>:
  403100:	jmp    QWORD PTR [rip+0xaf7a]        # 40e080 <fwrite_unlocked@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <realloc@plt>:
  403110:	jmp    QWORD PTR [rip+0xaf72]        # 40e088 <realloc@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

0000000000403120 <fopen@plt>:
  403120:	jmp    QWORD PTR [rip+0xaf6a]        # 40e090 <fopen@GLIBC_2.2.5>
  403126:	push   0xf
  40312b:	jmp    403020 <free@plt-0x10>

0000000000403130 <posix_memalign@plt>:
  403130:	jmp    QWORD PTR [rip+0xaf62]        # 40e098 <posix_memalign@GLIBC_2.2.5>
  403136:	push   0x10
  40313b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403140 <_start@@Base>:
  403140:	endbr64 
  403144:	xor    ebp,ebp
  403146:	mov    r9,rdx
  403149:	pop    rsi
  40314a:	mov    rdx,rsp
  40314d:	and    rsp,0xfffffffffffffff0
  403151:	push   rax
  403152:	push   rsp
  403153:	mov    r8,0x408d90
  40315a:	mov    rcx,0x408d20
  403161:	mov    rdi,0x403230
  403168:	call   QWORD PTR [rip+0xae82]        # 40dff0 <__libc_start_main@GLIBC_2.2.5>
  40316e:	hlt    
  40316f:	nop
  403170:	endbr64 
  403174:	ret    
  403175:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40317f:	nop
  403180:	mov    eax,0x40e0b0
  403185:	cmp    rax,0x40e0b0
  40318b:	je     4031a0 <_start@@Base+0x60>
  40318d:	mov    eax,0x0
  403192:	test   rax,rax
  403195:	je     4031a0 <_start@@Base+0x60>
  403197:	mov    edi,0x40e0b0
  40319c:	jmp    rax
  40319e:	xchg   ax,ax
  4031a0:	ret    
  4031a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ac:	nop    DWORD PTR [rax+0x0]
  4031b0:	mov    esi,0x40e0b0
  4031b5:	sub    rsi,0x40e0b0
  4031bc:	mov    rax,rsi
  4031bf:	shr    rsi,0x3f
  4031c3:	sar    rax,0x3
  4031c7:	add    rsi,rax
  4031ca:	sar    rsi,1
  4031cd:	je     4031e0 <_start@@Base+0xa0>
  4031cf:	mov    eax,0x0
  4031d4:	test   rax,rax
  4031d7:	je     4031e0 <_start@@Base+0xa0>
  4031d9:	mov    edi,0x40e0b0
  4031de:	jmp    rax
  4031e0:	ret    
  4031e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ec:	nop    DWORD PTR [rax+0x0]
  4031f0:	endbr64 
  4031f4:	cmp    BYTE PTR [rip+0xaeb5],0x0        # 40e0b0 <__bss_start@@Base>
  4031fb:	jne    403210 <_start@@Base+0xd0>
  4031fd:	push   rbp
  4031fe:	mov    rbp,rsp
  403201:	call   403180 <_start@@Base+0x40>
  403206:	mov    BYTE PTR [rip+0xaea3],0x1        # 40e0b0 <__bss_start@@Base>
  40320d:	pop    rbp
  40320e:	ret    
  40320f:	nop
  403210:	ret    
  403211:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40321c:	nop    DWORD PTR [rax+0x0]
  403220:	endbr64 
  403224:	jmp    4031b0 <_start@@Base+0x70>
  403226:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403230 <main@@Base>:
  403230:	push   rbp
  403231:	push   r15
  403233:	push   r14
  403235:	push   r13
  403237:	push   r12
  403239:	push   rbx
  40323a:	sub    rsp,0x1e8
  403241:	lea    rbx,[rsp+0x60]
  403246:	mov    rdi,rbx
  403249:	call   403cc0 <flatcc_builder_init@@Base>
  40324e:	mov    rdi,rbx
  403251:	call   4038b0 <main@@Base+0x680>
  403256:	lea    rsi,[rsp+0x10]
  40325b:	mov    rdi,rbx
  40325e:	call   408380 <flatcc_builder_finalize_buffer@@Base>
  403263:	mov    r12,rax
  403266:	lea    rdi,[rip+0x5de3]        # 409050 <_IO_stdin_used@@Base+0x50>
  40326d:	lea    rsi,[rip+0x5df2]        # 409066 <_IO_stdin_used@@Base+0x66>
  403274:	call   403120 <fopen@plt>
  403279:	test   rax,rax
  40327c:	je     4036ed <main@@Base+0x4bd>
  403282:	mov    rbx,rax
  403285:	mov    r15,QWORD PTR [rsp+0x10]
  40328a:	mov    esi,0x1
  40328f:	mov    rdi,r12
  403292:	mov    rdx,r15
  403295:	mov    rcx,rax
  403298:	call   403100 <fwrite_unlocked@plt>
  40329d:	mov    QWORD PTR [rsp+0x18],r12
  4032a2:	mov    r14,rax
  4032a5:	mov    rdi,rbx
  4032a8:	call   403050 <fclose@plt>
  4032ad:	mov    ebx,0x1
  4032b2:	cmp    r15,r14
  4032b5:	mov    r12,QWORD PTR [rsp+0x18]
  4032ba:	jne    40374a <main@@Base+0x51a>
  4032c0:	mov    rsi,QWORD PTR [rsp+0x10]
  4032c5:	lea    rdi,[rip+0x5d9d]        # 409069 <_IO_stdin_used@@Base+0x69>
  4032cc:	xor    ebp,ebp
  4032ce:	xor    eax,eax
  4032d0:	call   403070 <printf@plt>
  4032d5:	lea    rdi,[rip+0x6374]        # 409650 <_IO_stdin_used@@Base+0x650>
  4032dc:	call   403040 <puts@plt>
  4032e1:	lea    rdi,[rsp+0x20]
  4032e6:	xor    esi,esi
  4032e8:	call   403080 <gettimeofday@plt>
  4032ed:	mov    rax,QWORD PTR [rip+0xb1b4]        # 40e4a8 <__bss_start@@Base+0x3f8>
  4032f4:	test   rax,rax
  4032f7:	jne    40330e <main@@Base+0xde>
  4032f9:	vmovups xmm0,XMMWORD PTR [rsp+0x20]
  4032ff:	vmovups XMMWORD PTR [rip+0xb1a1],xmm0        # 40e4a8 <__bss_start@@Base+0x3f8>
  403307:	mov    rax,QWORD PTR [rip+0xb19a]        # 40e4a8 <__bss_start@@Base+0x3f8>
  40330e:	mov    rcx,QWORD PTR [rsp+0x20]
  403313:	sub    rcx,rax
  403316:	mov    rax,QWORD PTR [rsp+0x28]
  40331b:	vcvtsi2sd xmm0,xmm1,rcx
  403320:	sub    rax,QWORD PTR [rip+0xb189]        # 40e4b0 <__bss_start@@Base+0x400>
  403327:	vcvtsi2sd xmm1,xmm1,rax
  40332c:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x5cd4]        # 409008 <_IO_stdin_used@@Base+0x8>
  403334:	vaddsd xmm0,xmm1,xmm0
  403338:	vmovsd QWORD PTR [rsp+0x30],xmm0
  40333e:	lea    rax,[r12+0x8]
  403343:	mov    QWORD PTR [rsp+0x38],rax
  403348:	lea    r13,[rip+0x5e62]        # 4091b1 <_IO_stdin_used@@Base+0x1b1>
  40334f:	lea    r14,[rip+0xad6a]        # 40e0c0 <__bss_start@@Base+0x10>
  403356:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403360:	mov    QWORD PTR [rsp+0x40],rbp
  403365:	lea    rbp,[rsp+0x60]
  40336a:	mov    rdi,rbp
  40336d:	call   4038b0 <main@@Base+0x680>
  403372:	mov    rdx,QWORD PTR [rsp+0x10]
  403377:	mov    rdi,rbp
  40337a:	mov    rsi,r12
  40337d:	call   408340 <flatcc_builder_copy_buffer@@Base>
  403382:	test   r12,r12
  403385:	je     403812 <main@@Base+0x5e2>
  40338b:	cmp    DWORD PTR [r12+0x4],0x534e4f4d
  403394:	jne    403812 <main@@Base+0x5e2>
  40339a:	mov    ebx,DWORD PTR [r12]
  40339e:	lea    rbp,[r12+rbx*1]
  4033a2:	movsxd r15,DWORD PTR [r12+rbx*1]
  4033a6:	mov    rax,rbp
  4033a9:	sub    rax,r15
  4033ac:	movzx  r12d,WORD PTR [rax]
  4033b0:	cmp    r12d,0xb
  4033b4:	jbe    4037ea <main@@Base+0x5ba>
  4033ba:	neg    r15
  4033bd:	movzx  eax,WORD PTR [rbp+r15*1+0xa]
  4033c3:	test   rax,rax
  4033c6:	je     4037ea <main@@Base+0x5ba>
  4033cc:	lea    rcx,[rax+rbp*1]
  4033d0:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  4033d4:	lea    rdi,[rax+rcx*1]
  4033d8:	add    rdi,0x4
  4033dc:	lea    rsi,[rip+0x5c98]        # 40907b <_IO_stdin_used@@Base+0x7b>
  4033e3:	call   4030d0 <strcmp@plt>
  4033e8:	test   eax,eax
  4033ea:	jne    40388e <main@@Base+0x65e>
  4033f0:	movzx  eax,r12w
  4033f4:	cmp    eax,0x1c
  4033f7:	jb     40386f <main@@Base+0x63f>
  4033fd:	movzx  r9d,WORD PTR [rbp+r15*1+0x1a]
  403403:	test   r9,r9
  403406:	je     40386f <main@@Base+0x63f>
  40340c:	mov    eax,DWORD PTR [rbp+r9*1+0x0]
  403411:	add    rbp,r9
  403414:	cmp    DWORD PTR [rax+rbp*1],0x3e8
  40341b:	jne    40386f <main@@Base+0x63f>
  403421:	lea    rcx,[rax+rbp*1]
  403425:	add    rcx,0x4
  403429:	mov    QWORD PTR [rsp+0x58],rcx
  40342e:	mov    ecx,DWORD PTR [rcx-0x4]
  403431:	mov    QWORD PTR [rsp+0x50],rcx
  403436:	add    r9,rax
  403439:	add    r9,rbx
  40343c:	add    r9,QWORD PTR [rsp+0x38]
  403441:	xor    ebx,ebx
  403443:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40344d:	nop    DWORD PTR [rax]
  403450:	cmp    rbx,QWORD PTR [rsp+0x50]
  403455:	jae    403831 <main@@Base+0x601>
  40345b:	mov    rax,QWORD PTR [rsp+0x58]
  403460:	lea    rdx,[rax+rbx*4]
  403464:	mov    r8d,DWORD PTR [rax+rbx*4]
  403468:	add    rdx,r8
  40346b:	je     403812 <main@@Base+0x5e2>
  403471:	movsxd rsi,DWORD PTR [rdx]
  403474:	mov    rcx,rdx
  403477:	sub    rcx,rsi
  40347a:	movzx  edi,WORD PTR [rcx]
  40347d:	cmp    edi,0xc
  403480:	jb     4037ea <main@@Base+0x5ba>
  403486:	neg    rsi
  403489:	movzx  ecx,WORD PTR [rdx+rsi*1+0xa]
  40348e:	test   rcx,rcx
  403491:	je     4037ea <main@@Base+0x5ba>
  403497:	lea    rax,[rdx+rcx*1]
  40349b:	mov    ebp,DWORD PTR [rdx+rcx*1]
  40349e:	lea    r10,[rax+rbp*1]
  4034a2:	add    r10,0x4
  4034a6:	movzx  eax,di
  4034a9:	cmp    eax,0x10
  4034ac:	jb     4034e0 <main@@Base+0x2b0>
  4034ae:	movzx  esi,WORD PTR [rdx+rsi*1+0xe]
  4034b3:	test   rsi,rsi
  4034b6:	je     4034e0 <main@@Base+0x2b0>
  4034b8:	lea    rax,[rdx+rsi*1]
  4034bc:	mov    edx,DWORD PTR [rdx+rsi*1]
  4034bf:	lea    r15,[rdx+rax*1]
  4034c3:	add    r15,0x4
  4034c7:	cmp    DWORD PTR [r10-0x4],0x2bc
  4034cf:	je     4034f1 <main@@Base+0x2c1>
  4034d1:	jmp    403850 <main@@Base+0x620>
  4034d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034e0:	xor    r15d,r15d
  4034e3:	cmp    DWORD PTR [r10-0x4],0x2bc
  4034eb:	jne    403850 <main@@Base+0x620>
  4034f1:	mov    QWORD PTR [rsp+0x48],r10
  4034f6:	test   r15,r15
  4034f9:	je     4037f3 <main@@Base+0x5c3>
  4034ff:	cmp    DWORD PTR [r15-0x4],0x186a0
  403507:	jne    4037f3 <main@@Base+0x5c3>
  40350d:	add    rbp,rcx
  403510:	add    rbp,r8
  403513:	mov    QWORD PTR [rsp+0x8],r9
  403518:	add    rbp,r9
  40351b:	xor    r12d,r12d
  40351e:	xchg   ax,ax
  403520:	mov    edx,0x7
  403525:	mov    rdi,rbp
  403528:	mov    rsi,r13
  40352b:	call   4030c0 <memcmp@plt>
  403530:	test   eax,eax
  403532:	jne    403780 <main@@Base+0x550>
  403538:	add    r12,0x1
  40353c:	add    rbp,0x7
  403540:	cmp    r12,0x64
  403544:	jb     403520 <main@@Base+0x2f0>
  403546:	xor    ebp,ebp
  403548:	nop    DWORD PTR [rax+rax*1+0x0]
  403550:	mov    edx,0x3e8
  403555:	mov    rdi,r15
  403558:	mov    rsi,r14
  40355b:	call   4030c0 <memcmp@plt>
  403560:	test   eax,eax
  403562:	jne    4037cb <main@@Base+0x59b>
  403568:	add    rbp,0x1
  40356c:	add    r15,0x3e8
  403573:	cmp    rbp,0x63
  403577:	jbe    403550 <main@@Base+0x320>
  403579:	add    rbx,0x1
  40357d:	mov    r9,QWORD PTR [rsp+0x8]
  403582:	add    r9,0x4
  403586:	cmp    rbx,0x3e7
  40358d:	jbe    403450 <main@@Base+0x220>
  403593:	mov    rbp,QWORD PTR [rsp+0x40]
  403598:	add    ebp,0x1
  40359b:	cmp    ebp,0xa
  40359e:	mov    r12,QWORD PTR [rsp+0x18]
  4035a3:	jb     403360 <main@@Base+0x130>
  4035a9:	lea    rdi,[rsp+0x20]
  4035ae:	xor    esi,esi
  4035b0:	call   403080 <gettimeofday@plt>
  4035b5:	mov    rax,QWORD PTR [rip+0xaeec]        # 40e4a8 <__bss_start@@Base+0x3f8>
  4035bc:	test   rax,rax
  4035bf:	jne    4035d6 <main@@Base+0x3a6>
  4035c1:	vmovupd xmm0,XMMWORD PTR [rsp+0x20]
  4035c7:	vmovupd XMMWORD PTR [rip+0xaed9],xmm0        # 40e4a8 <__bss_start@@Base+0x3f8>
  4035cf:	mov    rax,QWORD PTR [rip+0xaed2]        # 40e4a8 <__bss_start@@Base+0x3f8>
  4035d6:	mov    rcx,QWORD PTR [rsp+0x20]
  4035db:	sub    rcx,rax
  4035de:	mov    rax,QWORD PTR [rsp+0x28]
  4035e3:	vcvtsi2sd xmm0,xmm1,rcx
  4035e8:	sub    rax,QWORD PTR [rip+0xaec1]        # 40e4b0 <__bss_start@@Base+0x400>
  4035ef:	vcvtsi2sd xmm1,xmm1,rax
  4035f4:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x5a0c]        # 409008 <_IO_stdin_used@@Base+0x8>
  4035fc:	vaddsd xmm0,xmm1,xmm0
  403600:	vsubsd xmm0,xmm0,QWORD PTR [rsp+0x30]
  403606:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40360c:	mov    r14,QWORD PTR [rsp+0x10]
  403611:	lea    rdi,[rip+0x5f27]        # 40953f <_IO_stdin_used@@Base+0x53f>
  403618:	lea    rsi,[rip+0x5aee]        # 40910d <_IO_stdin_used@@Base+0x10d>
  40361f:	xor    ebx,ebx
  403621:	xor    eax,eax
  403623:	call   403070 <printf@plt>
  403628:	lea    rdi,[rip+0x5f1f]        # 40954e <_IO_stdin_used@@Base+0x54e>
  40362f:	mov    al,0x1
  403631:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  403637:	call   403070 <printf@plt>
  40363c:	lea    rdi,[rip+0x5f23]        # 409566 <_IO_stdin_used@@Base+0x566>
  403643:	mov    esi,0xa
  403648:	xor    eax,eax
  40364a:	call   403070 <printf@plt>
  40364f:	lea    rdi,[rip+0x5f20]        # 409576 <_IO_stdin_used@@Base+0x576>
  403656:	xor    eax,eax
  403658:	mov    rsi,r14
  40365b:	call   403070 <printf@plt>
  403660:	vmovq  xmm0,r14
  403665:	vpunpckldq xmm0,xmm0,XMMWORD PTR [rip+0x59c3]        # 409030 <_IO_stdin_used@@Base+0x30>
  40366d:	vsubpd xmm0,xmm0,XMMWORD PTR [rip+0x59cb]        # 409040 <_IO_stdin_used@@Base+0x40>
  403675:	vhaddpd xmm0,xmm0,xmm0
  403679:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x598f]        # 409010 <_IO_stdin_used@@Base+0x10>
  403681:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x597f]        # 409008 <_IO_stdin_used@@Base+0x8>
  403689:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40368f:	lea    rdi,[rip+0x5ef3]        # 409589 <_IO_stdin_used@@Base+0x589>
  403696:	mov    al,0x1
  403698:	call   403070 <printf@plt>
  40369d:	vmovsd xmm0,QWORD PTR [rip+0x596b]        # 409010 <_IO_stdin_used@@Base+0x10>
  4036a5:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  4036ab:	lea    rdi,[rip+0x5eef]        # 4095a1 <_IO_stdin_used@@Base+0x5a1>
  4036b2:	mov    al,0x1
  4036b4:	call   403070 <printf@plt>
  4036b9:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  4036bf:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5951]        # 409018 <_IO_stdin_used@@Base+0x18>
  4036c7:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5941]        # 409010 <_IO_stdin_used@@Base+0x10>
  4036cf:	vmovsd xmm1,QWORD PTR [rip+0x5949]        # 409020 <_IO_stdin_used@@Base+0x20>
  4036d7:	vucomisd xmm1,xmm0
  4036db:	jbe    4036f4 <main@@Base+0x4c4>
  4036dd:	lea    rdi,[rip+0x5ede]        # 4095c2 <_IO_stdin_used@@Base+0x5c2>
  4036e4:	mov    al,0x1
  4036e6:	call   403070 <printf@plt>
  4036eb:	jmp    40374a <main@@Base+0x51a>
  4036ed:	mov    ebx,0xffffffff
  4036f2:	jmp    40374a <main@@Base+0x51a>
  4036f4:	vmovsd xmm1,QWORD PTR [rip+0x590c]        # 409008 <_IO_stdin_used@@Base+0x8>
  4036fc:	vucomisd xmm1,xmm0
  403700:	jbe    403713 <main@@Base+0x4e3>
  403702:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5916]        # 409020 <_IO_stdin_used@@Base+0x20>
  40370a:	lea    rdi,[rip+0x5ec9]        # 4095da <_IO_stdin_used@@Base+0x5da>
  403711:	jmp    403741 <main@@Base+0x511>
  403713:	vmovsd xmm1,QWORD PTR [rip+0x58fd]        # 409018 <_IO_stdin_used@@Base+0x18>
  40371b:	vucomisd xmm1,xmm0
  40371f:	jbe    403732 <main@@Base+0x502>
  403721:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58df]        # 409008 <_IO_stdin_used@@Base+0x8>
  403729:	lea    rdi,[rip+0x5ec2]        # 4095f2 <_IO_stdin_used@@Base+0x5f2>
  403730:	jmp    403741 <main@@Base+0x511>
  403732:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58de]        # 409018 <_IO_stdin_used@@Base+0x18>
  40373a:	lea    rdi,[rip+0x5ec9]        # 40960a <_IO_stdin_used@@Base+0x60a>
  403741:	mov    al,0x1
  403743:	call   403070 <printf@plt>
  403748:	xor    ebx,ebx
  40374a:	lea    rdi,[rsp+0x60]
  40374f:	call   404080 <flatcc_builder_clear@@Base>
  403754:	mov    rdi,r12
  403757:	call   403030 <free@plt>
  40375c:	test   ebx,ebx
  40375e:	je     40376c <main@@Base+0x53c>
  403760:	lea    rdi,[rip+0x5ec9]        # 409630 <_IO_stdin_used@@Base+0x630>
  403767:	call   403040 <puts@plt>
  40376c:	mov    eax,ebx
  40376e:	add    rsp,0x1e8
  403775:	pop    rbx
  403776:	pop    r12
  403778:	pop    r13
  40377a:	pop    r14
  40377c:	pop    r15
  40377e:	pop    rbp
  40377f:	ret    
  403780:	lea    rdi,[rip+0x5cf1]        # 409478 <_IO_stdin_used@@Base+0x478>
  403787:	xor    eax,eax
  403789:	mov    rsi,r12
  40378c:	mov    rdx,QWORD PTR [rsp+0x48]
  403791:	call   403070 <printf@plt>
  403796:	sub    rbp,QWORD PTR [rsp+0x18]
  40379b:	lea    rdi,[rip+0x5cf6]        # 409498 <_IO_stdin_used@@Base+0x498>
  4037a2:	xor    eax,eax
  4037a4:	mov    rsi,rbp
  4037a7:	call   403070 <printf@plt>
  4037ac:	lea    rdi,[rip+0x732f]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4037b3:	lea    rsi,[rip+0x58d7]        # 409091 <_IO_stdin_used@@Base+0x91>
  4037ba:	lea    rcx,[rip+0x5c76]        # 409437 <_IO_stdin_used@@Base+0x437>
  4037c1:	mov    edx,0x55
  4037c6:	call   403090 <__assert_fail@plt>
  4037cb:	lea    rdi,[rip+0x7310]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4037d2:	lea    rsi,[rip+0x58b8]        # 409091 <_IO_stdin_used@@Base+0x91>
  4037d9:	lea    rcx,[rip+0x5c57]        # 409437 <_IO_stdin_used@@Base+0x437>
  4037e0:	mov    edx,0x5b
  4037e5:	call   403090 <__assert_fail@plt>
  4037ea:	lea    rdi,[rip+0x5c25]        # 409416 <_IO_stdin_used@@Base+0x416>
  4037f1:	jmp    403819 <main@@Base+0x5e9>
  4037f3:	lea    rdi,[rip+0x72e8]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4037fa:	lea    rsi,[rip+0x5890]        # 409091 <_IO_stdin_used@@Base+0x91>
  403801:	lea    rcx,[rip+0x5c2f]        # 409437 <_IO_stdin_used@@Base+0x437>
  403808:	mov    edx,0x4e
  40380d:	call   403090 <__assert_fail@plt>
  403812:	lea    rdi,[rip+0x5b0d]        # 409326 <_IO_stdin_used@@Base+0x326>
  403819:	lea    rsi,[rip+0x5b2c]        # 40934c <_IO_stdin_used@@Base+0x34c>
  403820:	lea    rcx,[rip+0x5b9e]        # 4093c5 <_IO_stdin_used@@Base+0x3c5>
  403827:	mov    edx,0x2bb
  40382c:	call   403090 <__assert_fail@plt>
  403831:	lea    rdi,[rip+0x5c6d]        # 4094a5 <_IO_stdin_used@@Base+0x4a5>
  403838:	lea    rsi,[rip+0x5b0d]        # 40934c <_IO_stdin_used@@Base+0x34c>
  40383f:	lea    rcx,[rip+0x5c96]        # 4094dc <_IO_stdin_used@@Base+0x4dc>
  403846:	mov    edx,0x2b5
  40384b:	call   403090 <__assert_fail@plt>
  403850:	lea    rdi,[rip+0x728b]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  403857:	lea    rsi,[rip+0x5833]        # 409091 <_IO_stdin_used@@Base+0x91>
  40385e:	lea    rcx,[rip+0x5bd2]        # 409437 <_IO_stdin_used@@Base+0x437>
  403865:	mov    edx,0x4a
  40386a:	call   403090 <__assert_fail@plt>
  40386f:	lea    rdi,[rip+0x5812]        # 409088 <_IO_stdin_used@@Base+0x88>
  403876:	lea    rsi,[rip+0x5814]        # 409091 <_IO_stdin_used@@Base+0x91>
  40387d:	lea    rcx,[rip+0x5872]        # 4090f6 <_IO_stdin_used@@Base+0xf6>
  403884:	mov    edx,0x8f
  403889:	call   403090 <__assert_fail@plt>
  40388e:	lea    rdi,[rip+0x57f3]        # 409088 <_IO_stdin_used@@Base+0x88>
  403895:	lea    rsi,[rip+0x57f5]        # 409091 <_IO_stdin_used@@Base+0x91>
  40389c:	lea    rcx,[rip+0x5853]        # 4090f6 <_IO_stdin_used@@Base+0xf6>
  4038a3:	mov    edx,0x8b
  4038a8:	call   403090 <__assert_fail@plt>
  4038ad:	nop    DWORD PTR [rax]
  4038b0:	push   rbp
  4038b1:	push   r15
  4038b3:	push   r14
  4038b5:	push   r13
  4038b7:	push   r12
  4038b9:	push   rbx
  4038ba:	push   rax
  4038bb:	mov    rbx,rdi
  4038be:	call   403ec0 <flatcc_builder_reset@@Base>
  4038c3:	lea    rsi,[rip+0x589b]        # 409165 <_IO_stdin_used@@Base+0x165>
  4038ca:	xor    edx,edx
  4038cc:	xor    ecx,ecx
  4038ce:	mov    rdi,rbx
  4038d1:	call   404a60 <flatcc_builder_start_buffer@@Base>
  4038d6:	test   eax,eax
  4038d8:	jne    4038e7 <main@@Base+0x6b7>
  4038da:	mov    esi,0x24
  4038df:	mov    rdi,rbx
  4038e2:	call   405d30 <flatcc_builder_start_table@@Base>
  4038e7:	lea    rsi,[rip+0x578d]        # 40907b <_IO_stdin_used@@Base+0x7b>
  4038ee:	mov    rdi,rbx
  4038f1:	call   407fa0 <flatcc_builder_create_string_str@@Base>
  4038f6:	test   eax,eax
  4038f8:	je     403910 <main@@Base+0x6e0>
  4038fa:	mov    ebp,eax
  4038fc:	mov    esi,0x3
  403901:	mov    rdi,rbx
  403904:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  403909:	test   rax,rax
  40390c:	je     403910 <main@@Base+0x6e0>
  40390e:	mov    DWORD PTR [rax],ebp
  403910:	mov    rdi,rbx
  403913:	call   405940 <flatcc_builder_start_offset_vector@@Base>
  403918:	xor    r13d,r13d
  40391b:	lea    r14,[rip+0x588f]        # 4091b1 <_IO_stdin_used@@Base+0x1b1>
  403922:	lea    r15,[rip+0xa797]        # 40e0c0 <__bss_start@@Base+0x10>
  403929:	lea    r12,[rip+0x5cf2]        # 409622 <_IO_stdin_used@@Base+0x622>
  403930:	mov    esi,0x24
  403935:	mov    rdi,rbx
  403938:	call   405d30 <flatcc_builder_start_table@@Base>
  40393d:	mov    rdi,rbx
  403940:	call   405bc0 <flatcc_builder_start_string@@Base>
  403945:	mov    ebp,0x64
  40394a:	nop    WORD PTR [rax+rax*1+0x0]
  403950:	mov    edx,0x7
  403955:	mov    rdi,rbx
  403958:	mov    rsi,r14
  40395b:	call   4055c0 <flatcc_builder_append_string@@Base>
  403960:	add    rbp,0xffffffffffffffff
  403964:	jne    403950 <main@@Base+0x720>
  403966:	mov    rdi,rbx
  403969:	call   408010 <flatcc_builder_end_string@@Base>
  40396e:	test   eax,eax
  403970:	je     403988 <main@@Base+0x758>
  403972:	mov    ebp,eax
  403974:	mov    esi,0x3
  403979:	mov    rdi,rbx
  40397c:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  403981:	test   rax,rax
  403984:	je     403988 <main@@Base+0x758>
  403986:	mov    DWORD PTR [rax],ebp
  403988:	mov    esi,0x1
  40398d:	mov    edx,0x1
  403992:	mov    ecx,0xffffffff
  403997:	mov    rdi,rbx
  40399a:	call   4058c0 <flatcc_builder_start_vector@@Base>
  40399f:	mov    ebp,0x64
  4039a4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039ae:	xchg   ax,ax
  4039b0:	mov    edx,0x3e8
  4039b5:	mov    rdi,rbx
  4039b8:	mov    rsi,r15
  4039bb:	call   405120 <flatcc_builder_append_vector@@Base>
  4039c0:	add    rbp,0xffffffffffffffff
  4039c4:	jne    4039b0 <main@@Base+0x780>
  4039c6:	mov    rdi,rbx
  4039c9:	call   406a50 <flatcc_builder_end_vector@@Base>
  4039ce:	test   eax,eax
  4039d0:	je     4039e8 <main@@Base+0x7b8>
  4039d2:	mov    ebp,eax
  4039d4:	mov    esi,0x5
  4039d9:	mov    rdi,rbx
  4039dc:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  4039e1:	test   rax,rax
  4039e4:	je     4039e8 <main@@Base+0x7b8>
  4039e6:	mov    DWORD PTR [rax],ebp
  4039e8:	mov    edx,0x1
  4039ed:	mov    rdi,rbx
  4039f0:	mov    rsi,r12
  4039f3:	call   4066d0 <flatcc_builder_check_required@@Base>
  4039f8:	test   eax,eax
  4039fa:	je     403a89 <main@@Base+0x859>
  403a00:	mov    rdi,rbx
  403a03:	call   406740 <flatcc_builder_end_table@@Base>
  403a08:	test   eax,eax
  403a0a:	je     403aa8 <main@@Base+0x878>
  403a10:	mov    rdi,rbx
  403a13:	mov    esi,eax
  403a15:	call   405300 <flatcc_builder_offset_vector_push@@Base>
  403a1a:	add    r13,0x1
  403a1e:	cmp    r13,0x3e8
  403a25:	jb     403930 <main@@Base+0x700>
  403a2b:	mov    rdi,rbx
  403a2e:	call   405b00 <flatcc_builder_end_offset_vector@@Base>
  403a33:	test   eax,eax
  403a35:	je     403ac7 <main@@Base+0x897>
  403a3b:	mov    ebp,eax
  403a3d:	mov    esi,0xb
  403a42:	mov    rdi,rbx
  403a45:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  403a4a:	test   rax,rax
  403a4d:	je     403a51 <main@@Base+0x821>
  403a4f:	mov    DWORD PTR [rax],ebp
  403a51:	lea    rsi,[rip+0x5bca]        # 409622 <_IO_stdin_used@@Base+0x622>
  403a58:	mov    edx,0x1
  403a5d:	mov    rdi,rbx
  403a60:	call   4066d0 <flatcc_builder_check_required@@Base>
  403a65:	test   eax,eax
  403a67:	je     403a89 <main@@Base+0x859>
  403a69:	mov    rdi,rbx
  403a6c:	call   406740 <flatcc_builder_end_table@@Base>
  403a71:	mov    rdi,rbx
  403a74:	mov    esi,eax
  403a76:	add    rsp,0x8
  403a7a:	pop    rbx
  403a7b:	pop    r12
  403a7d:	pop    r13
  403a7f:	pop    r14
  403a81:	pop    r15
  403a83:	pop    rbp
  403a84:	jmp    404c80 <flatcc_builder_end_buffer@@Base>
  403a89:	lea    rdi,[rip+0x5729]        # 4091b9 <_IO_stdin_used@@Base+0x1b9>
  403a90:	lea    rsi,[rip+0x57c4]        # 40925b <_IO_stdin_used@@Base+0x25b>
  403a97:	lea    rcx,[rip+0x5837]        # 4092d5 <_IO_stdin_used@@Base+0x2d5>
  403a9e:	mov    edx,0xeb
  403aa3:	call   403090 <__assert_fail@plt>
  403aa8:	lea    rdi,[rip+0x56bb]        # 40916a <_IO_stdin_used@@Base+0x16a>
  403aaf:	lea    rsi,[rip+0x55db]        # 409091 <_IO_stdin_used@@Base+0x91>
  403ab6:	lea    rcx,[rip+0x56af]        # 40916c <_IO_stdin_used@@Base+0x16c>
  403abd:	mov    edx,0x2a
  403ac2:	call   403090 <__assert_fail@plt>
  403ac7:	lea    rdi,[rip+0x5668]        # 409136 <_IO_stdin_used@@Base+0x136>
  403ace:	lea    rsi,[rip+0x55bc]        # 409091 <_IO_stdin_used@@Base+0x91>
  403ad5:	lea    rcx,[rip+0x565d]        # 409139 <_IO_stdin_used@@Base+0x139>
  403adc:	mov    edx,0x38
  403ae1:	call   403090 <__assert_fail@plt>
  403ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403af0 <flatcc_builder_default_alloc@@Base>:
  403af0:	push   rbp
  403af1:	push   r15
  403af3:	push   r14
  403af5:	push   r12
  403af7:	push   rbx
  403af8:	mov    rbx,rsi
  403afb:	test   rdx,rdx
  403afe:	je     403b29 <flatcc_builder_default_alloc@@Base+0x39>
  403b00:	mov    r14d,ecx
  403b03:	add    r8d,0xffffffff
  403b07:	cmp    r8d,0x6
  403b0b:	ja     403b47 <flatcc_builder_default_alloc@@Base+0x57>
  403b0d:	mov    eax,0x100
  403b12:	lea    rcx,[rip+0x5b57]        # 409670 <_IO_stdin_used@@Base+0x670>
  403b19:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403b1d:	add    rsi,rcx
  403b20:	jmp    rsi
  403b22:	mov    eax,0x120
  403b27:	jmp    403b60 <flatcc_builder_default_alloc@@Base+0x70>
  403b29:	mov    rdi,QWORD PTR [rbx]
  403b2c:	xor    r15d,r15d
  403b2f:	test   rdi,rdi
  403b32:	je     403bc0 <flatcc_builder_default_alloc@@Base+0xd0>
  403b38:	call   403030 <free@plt>
  403b3d:	vxorps xmm0,xmm0,xmm0
  403b41:	vmovups XMMWORD PTR [rbx],xmm0
  403b45:	jmp    403bc0 <flatcc_builder_default_alloc@@Base+0xd0>
  403b47:	mov    eax,0x20
  403b4c:	jmp    403b60 <flatcc_builder_default_alloc@@Base+0x70>
  403b4e:	mov    rax,rdx
  403b51:	jmp    403b60 <flatcc_builder_default_alloc@@Base+0x70>
  403b53:	mov    eax,0x40
  403b58:	nop    DWORD PTR [rax+rax*1+0x0]
  403b60:	mov    rbp,rax
  403b63:	lea    rax,[rax+rax*1]
  403b67:	cmp    rbp,rdx
  403b6a:	jb     403b60 <flatcc_builder_default_alloc@@Base+0x70>
  403b6c:	mov    rax,QWORD PTR [rbx+0x8]
  403b70:	xor    r15d,r15d
  403b73:	cmp    rax,rdx
  403b76:	jb     403b80 <flatcc_builder_default_alloc@@Base+0x90>
  403b78:	shr    rax,1
  403b7b:	cmp    rax,rbp
  403b7e:	jae    403bc0 <flatcc_builder_default_alloc@@Base+0xd0>
  403b80:	mov    rdi,QWORD PTR [rbx]
  403b83:	mov    rsi,rbp
  403b86:	call   403110 <realloc@plt>
  403b8b:	test   rax,rax
  403b8e:	je     403bba <flatcc_builder_default_alloc@@Base+0xca>
  403b90:	mov    r12,rax
  403b93:	test   r14d,r14d
  403b96:	je     403bb1 <flatcc_builder_default_alloc@@Base+0xc1>
  403b98:	mov    rax,QWORD PTR [rbx+0x8]
  403b9c:	mov    rdx,rbp
  403b9f:	sub    rdx,rax
  403ba2:	jbe    403bb1 <flatcc_builder_default_alloc@@Base+0xc1>
  403ba4:	mov    rdi,r12
  403ba7:	add    rdi,rax
  403baa:	xor    esi,esi
  403bac:	call   4030a0 <memset@plt>
  403bb1:	mov    QWORD PTR [rbx],r12
  403bb4:	mov    QWORD PTR [rbx+0x8],rbp
  403bb8:	jmp    403bc0 <flatcc_builder_default_alloc@@Base+0xd0>
  403bba:	mov    r15d,0xffffffff
  403bc0:	mov    eax,r15d
  403bc3:	pop    rbx
  403bc4:	pop    r12
  403bc6:	pop    r14
  403bc8:	pop    r15
  403bca:	pop    rbp
  403bcb:	ret    
  403bcc:	nop    DWORD PTR [rax+0x0]

0000000000403bd0 <flatcc_builder_flush_vtable_cache@@Base>:
  403bd0:	cmp    QWORD PTR [rdi+0xd8],0x0
  403bd8:	je     403c05 <flatcc_builder_flush_vtable_cache@@Base+0x35>
  403bda:	push   rbx
  403bdb:	mov    rbx,rdi
  403bde:	mov    rdi,QWORD PTR [rdi+0xa8]
  403be5:	mov    rdx,QWORD PTR [rbx+0xb0]
  403bec:	xor    esi,esi
  403bee:	call   4030a0 <memset@plt>
  403bf3:	movabs rax,0x1000000000
  403bfd:	mov    QWORD PTR [rbx+0xe0],rax
  403c04:	pop    rbx
  403c05:	ret    
  403c06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403c10 <flatcc_builder_custom_init@@Base>:
  403c10:	vxorps xmm0,xmm0,xmm0
  403c14:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403c1c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403c24:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403c2c:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403c34:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403c3c:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403c44:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403c4c:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403c54:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403c59:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403c5e:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403c63:	vmovups YMMWORD PTR [rdi],ymm0
  403c67:	mov    QWORD PTR [rdi+0x180],0x0
  403c72:	test   rsi,rsi
  403c75:	je     403c99 <flatcc_builder_custom_init@@Base+0x89>
  403c77:	test   rcx,rcx
  403c7a:	jne    403c83 <flatcc_builder_custom_init@@Base+0x73>
  403c7c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403af0 <flatcc_builder_default_alloc@@Base>
  403c83:	mov    QWORD PTR [rdi+0x40],r8
  403c87:	mov    QWORD PTR [rdi+0x50],rcx
  403c8b:	mov    QWORD PTR [rdi+0x38],rdx
  403c8f:	mov    QWORD PTR [rdi+0x48],rsi
  403c93:	xor    eax,eax
  403c95:	vzeroupper 
  403c98:	ret    
  403c99:	mov    DWORD PTR [rdi+0x128],0x1
  403ca3:	lea    rdx,[rdi+0x130]
  403caa:	lea    rsi,[rip+0x4acf]        # 408780 <flatcc_emitter@@Base>
  403cb1:	test   rcx,rcx
  403cb4:	je     403c7c <flatcc_builder_custom_init@@Base+0x6c>
  403cb6:	jmp    403c83 <flatcc_builder_custom_init@@Base+0x73>
  403cb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403cc0 <flatcc_builder_init@@Base>:
  403cc0:	vxorps xmm0,xmm0,xmm0
  403cc4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403ccc:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403cd1:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403cd6:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403cde:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403ce6:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403cee:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403cf6:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403cfe:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403d06:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403d0e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403d13:	vmovups YMMWORD PTR [rdi],ymm0
  403d17:	mov    QWORD PTR [rdi+0x180],0x0
  403d22:	mov    DWORD PTR [rdi+0x128],0x1
  403d2c:	lea    rax,[rdi+0x130]
  403d33:	mov    QWORD PTR [rdi+0x40],0x0
  403d3b:	lea    rcx,[rip+0xfffffffffffffdae]        # 403af0 <flatcc_builder_default_alloc@@Base>
  403d42:	mov    QWORD PTR [rdi+0x50],rcx
  403d46:	mov    QWORD PTR [rdi+0x38],rax
  403d4a:	lea    rax,[rip+0x4a2f]        # 408780 <flatcc_emitter@@Base>
  403d51:	mov    QWORD PTR [rdi+0x48],rax
  403d55:	xor    eax,eax
  403d57:	vzeroupper 
  403d5a:	ret    
  403d5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403d60 <flatcc_builder_custom_reset@@Base>:
  403d60:	push   rbp
  403d61:	push   r15
  403d63:	push   r14
  403d65:	push   r12
  403d67:	push   rbx
  403d68:	mov    r15d,edx
  403d6b:	mov    r14d,esi
  403d6e:	mov    r12,rdi
  403d71:	lea    rbp,[rdi+0x58]
  403d75:	xor    ebx,ebx
  403d77:	nop    WORD PTR [rax+rax*1+0x0]
  403d80:	mov    rdi,QWORD PTR [rbp+0x0]
  403d84:	test   rdi,rdi
  403d87:	je     403dd0 <flatcc_builder_custom_reset@@Base+0x70>
  403d89:	test   r15d,r15d
  403d8c:	je     403dba <flatcc_builder_custom_reset@@Base+0x5a>
  403d8e:	cmp    rbx,0x5
  403d92:	je     403dba <flatcc_builder_custom_reset@@Base+0x5a>
  403d94:	mov    rdi,QWORD PTR [r12+0x40]
  403d99:	mov    edx,0x1
  403d9e:	mov    ecx,0x1
  403da3:	mov    rsi,rbp
  403da6:	mov    r8d,ebx
  403da9:	call   QWORD PTR [r12+0x50]
  403dae:	test   eax,eax
  403db0:	jne    403e90 <flatcc_builder_custom_reset@@Base+0x130>
  403db6:	mov    rdi,QWORD PTR [rbp+0x0]
  403dba:	mov    rdx,QWORD PTR [rbp+0x8]
  403dbe:	xor    esi,esi
  403dc0:	call   4030a0 <memset@plt>
  403dc5:	jmp    403ddb <flatcc_builder_custom_reset@@Base+0x7b>
  403dc7:	nop    WORD PTR [rax+rax*1+0x0]
  403dd0:	cmp    QWORD PTR [rbp+0x8],0x0
  403dd5:	jne    403ea0 <flatcc_builder_custom_reset@@Base+0x140>
  403ddb:	add    rbx,0x1
  403ddf:	add    rbp,0x10
  403de3:	cmp    rbx,0x8
  403de7:	jb     403d80 <flatcc_builder_custom_reset@@Base+0x20>
  403de9:	mov    DWORD PTR [r12+0xe0],0x0
  403df5:	cmp    DWORD PTR [r12+0xe4],0x0
  403dfe:	je     403e0c <flatcc_builder_custom_reset@@Base+0xac>
  403e00:	mov    DWORD PTR [r12+0xe4],0x10
  403e0c:	mov    WORD PTR [r12+0xe8],0x0
  403e17:	mov    QWORD PTR [r12+0xf0],0x0
  403e23:	mov    QWORD PTR [r12+0x20],0x0
  403e2c:	vxorps xmm0,xmm0,xmm0
  403e30:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403e3a:	mov    rax,QWORD PTR [r12+0x58]
  403e3f:	mov    rcx,QWORD PTR [r12+0x68]
  403e44:	mov    QWORD PTR [r12+0x18],rcx
  403e49:	mov    rcx,QWORD PTR [r12+0x88]
  403e51:	mov    QWORD PTR [r12],rcx
  403e55:	mov    QWORD PTR [r12+0x8],rax
  403e5a:	mov    QWORD PTR [r12+0x30],0x0
  403e63:	test   r14d,r14d
  403e66:	je     403e72 <flatcc_builder_custom_reset@@Base+0x112>
  403e68:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403e72:	xor    ebx,ebx
  403e74:	cmp    DWORD PTR [r12+0x128],0x0
  403e7d:	je     403e95 <flatcc_builder_custom_reset@@Base+0x135>
  403e7f:	add    r12,0x130
  403e86:	mov    rdi,r12
  403e89:	call   408600 <flatcc_emitter_reset@@Base>
  403e8e:	jmp    403e95 <flatcc_builder_custom_reset@@Base+0x135>
  403e90:	mov    ebx,0xffffffff
  403e95:	mov    eax,ebx
  403e97:	pop    rbx
  403e98:	pop    r12
  403e9a:	pop    r14
  403e9c:	pop    r15
  403e9e:	pop    rbp
  403e9f:	ret    
  403ea0:	lea    rdi,[rip+0x5a69]        # 409910 <flatcc_builder_padding_base@@Base+0x280>
  403ea7:	lea    rsi,[rip+0x5a74]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  403eae:	lea    rcx,[rip+0x5acd]        # 409982 <flatcc_builder_padding_base@@Base+0x2f2>
  403eb5:	mov    edx,0x1b2
  403eba:	call   403090 <__assert_fail@plt>
  403ebf:	nop

0000000000403ec0 <flatcc_builder_reset@@Base>:
  403ec0:	push   rbx
  403ec1:	mov    rbx,rdi
  403ec4:	mov    rdi,QWORD PTR [rdi+0x58]
  403ec8:	mov    rdx,QWORD PTR [rbx+0x60]
  403ecc:	test   rdi,rdi
  403ecf:	je     403eda <flatcc_builder_reset@@Base+0x1a>
  403ed1:	xor    esi,esi
  403ed3:	call   4030a0 <memset@plt>
  403ed8:	jmp    403ee3 <flatcc_builder_reset@@Base+0x23>
  403eda:	test   rdx,rdx
  403edd:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403ee3:	mov    rdi,QWORD PTR [rbx+0x68]
  403ee7:	mov    rdx,QWORD PTR [rbx+0x70]
  403eeb:	test   rdi,rdi
  403eee:	je     403ef9 <flatcc_builder_reset@@Base+0x39>
  403ef0:	xor    esi,esi
  403ef2:	call   4030a0 <memset@plt>
  403ef7:	jmp    403f02 <flatcc_builder_reset@@Base+0x42>
  403ef9:	test   rdx,rdx
  403efc:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403f02:	mov    rdi,QWORD PTR [rbx+0x78]
  403f06:	mov    rdx,QWORD PTR [rbx+0x80]
  403f0d:	test   rdi,rdi
  403f10:	je     403f1b <flatcc_builder_reset@@Base+0x5b>
  403f12:	xor    esi,esi
  403f14:	call   4030a0 <memset@plt>
  403f19:	jmp    403f24 <flatcc_builder_reset@@Base+0x64>
  403f1b:	test   rdx,rdx
  403f1e:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403f24:	mov    rdi,QWORD PTR [rbx+0x88]
  403f2b:	mov    rdx,QWORD PTR [rbx+0x90]
  403f32:	test   rdi,rdi
  403f35:	je     403f40 <flatcc_builder_reset@@Base+0x80>
  403f37:	xor    esi,esi
  403f39:	call   4030a0 <memset@plt>
  403f3e:	jmp    403f49 <flatcc_builder_reset@@Base+0x89>
  403f40:	test   rdx,rdx
  403f43:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403f49:	mov    rdi,QWORD PTR [rbx+0x98]
  403f50:	mov    rdx,QWORD PTR [rbx+0xa0]
  403f57:	test   rdi,rdi
  403f5a:	je     403f65 <flatcc_builder_reset@@Base+0xa5>
  403f5c:	xor    esi,esi
  403f5e:	call   4030a0 <memset@plt>
  403f63:	jmp    403f6e <flatcc_builder_reset@@Base+0xae>
  403f65:	test   rdx,rdx
  403f68:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403f6e:	mov    rdi,QWORD PTR [rbx+0xa8]
  403f75:	mov    rdx,QWORD PTR [rbx+0xb0]
  403f7c:	test   rdi,rdi
  403f7f:	je     403f8a <flatcc_builder_reset@@Base+0xca>
  403f81:	xor    esi,esi
  403f83:	call   4030a0 <memset@plt>
  403f88:	jmp    403f93 <flatcc_builder_reset@@Base+0xd3>
  403f8a:	test   rdx,rdx
  403f8d:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403f93:	mov    rdi,QWORD PTR [rbx+0xb8]
  403f9a:	mov    rdx,QWORD PTR [rbx+0xc0]
  403fa1:	test   rdi,rdi
  403fa4:	je     403faf <flatcc_builder_reset@@Base+0xef>
  403fa6:	xor    esi,esi
  403fa8:	call   4030a0 <memset@plt>
  403fad:	jmp    403fb8 <flatcc_builder_reset@@Base+0xf8>
  403faf:	test   rdx,rdx
  403fb2:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403fb8:	mov    rdi,QWORD PTR [rbx+0xc8]
  403fbf:	mov    rdx,QWORD PTR [rbx+0xd0]
  403fc6:	test   rdi,rdi
  403fc9:	je     403fd4 <flatcc_builder_reset@@Base+0x114>
  403fcb:	xor    esi,esi
  403fcd:	call   4030a0 <memset@plt>
  403fd2:	jmp    403fdd <flatcc_builder_reset@@Base+0x11d>
  403fd4:	test   rdx,rdx
  403fd7:	jne    404060 <flatcc_builder_reset@@Base+0x1a0>
  403fdd:	mov    DWORD PTR [rbx+0xe0],0x0
  403fe7:	cmp    DWORD PTR [rbx+0xe4],0x0
  403fee:	je     403ffa <flatcc_builder_reset@@Base+0x13a>
  403ff0:	mov    DWORD PTR [rbx+0xe4],0x10
  403ffa:	mov    WORD PTR [rbx+0xe8],0x0
  404003:	mov    QWORD PTR [rbx+0xf0],0x0
  40400e:	mov    QWORD PTR [rbx+0x20],0x0
  404016:	vxorps xmm0,xmm0,xmm0
  40401a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  404022:	mov    rax,QWORD PTR [rbx+0x58]
  404026:	mov    rcx,QWORD PTR [rbx+0x68]
  40402a:	mov    QWORD PTR [rbx+0x18],rcx
  40402e:	mov    rcx,QWORD PTR [rbx+0x88]
  404035:	mov    QWORD PTR [rbx],rcx
  404038:	mov    QWORD PTR [rbx+0x8],rax
  40403c:	mov    QWORD PTR [rbx+0x30],0x0
  404044:	cmp    DWORD PTR [rbx+0x128],0x0
  40404b:	je     40405c <flatcc_builder_reset@@Base+0x19c>
  40404d:	add    rbx,0x130
  404054:	mov    rdi,rbx
  404057:	call   408600 <flatcc_emitter_reset@@Base>
  40405c:	xor    eax,eax
  40405e:	pop    rbx
  40405f:	ret    
  404060:	lea    rdi,[rip+0x58a9]        # 409910 <flatcc_builder_padding_base@@Base+0x280>
  404067:	lea    rsi,[rip+0x58b4]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40406e:	lea    rcx,[rip+0x590d]        # 409982 <flatcc_builder_padding_base@@Base+0x2f2>
  404075:	mov    edx,0x1b2
  40407a:	call   403090 <__assert_fail@plt>
  40407f:	nop

0000000000404080 <flatcc_builder_clear@@Base>:
  404080:	push   rbx
  404081:	mov    rbx,rdi
  404084:	lea    rsi,[rdi+0x58]
  404088:	mov    rdi,QWORD PTR [rdi+0x40]
  40408c:	xor    edx,edx
  40408e:	xor    ecx,ecx
  404090:	xor    r8d,r8d
  404093:	call   QWORD PTR [rbx+0x50]
  404096:	lea    rsi,[rbx+0x68]
  40409a:	mov    rdi,QWORD PTR [rbx+0x40]
  40409e:	xor    edx,edx
  4040a0:	xor    ecx,ecx
  4040a2:	mov    r8d,0x1
  4040a8:	call   QWORD PTR [rbx+0x50]
  4040ab:	lea    rsi,[rbx+0x78]
  4040af:	mov    rdi,QWORD PTR [rbx+0x40]
  4040b3:	xor    edx,edx
  4040b5:	xor    ecx,ecx
  4040b7:	mov    r8d,0x2
  4040bd:	call   QWORD PTR [rbx+0x50]
  4040c0:	lea    rsi,[rbx+0x88]
  4040c7:	mov    rdi,QWORD PTR [rbx+0x40]
  4040cb:	xor    edx,edx
  4040cd:	xor    ecx,ecx
  4040cf:	mov    r8d,0x3
  4040d5:	call   QWORD PTR [rbx+0x50]
  4040d8:	lea    rsi,[rbx+0x98]
  4040df:	mov    rdi,QWORD PTR [rbx+0x40]
  4040e3:	xor    edx,edx
  4040e5:	xor    ecx,ecx
  4040e7:	mov    r8d,0x4
  4040ed:	call   QWORD PTR [rbx+0x50]
  4040f0:	lea    rsi,[rbx+0xa8]
  4040f7:	mov    rdi,QWORD PTR [rbx+0x40]
  4040fb:	xor    edx,edx
  4040fd:	xor    ecx,ecx
  4040ff:	mov    r8d,0x5
  404105:	call   QWORD PTR [rbx+0x50]
  404108:	lea    rsi,[rbx+0xb8]
  40410f:	mov    rdi,QWORD PTR [rbx+0x40]
  404113:	xor    edx,edx
  404115:	xor    ecx,ecx
  404117:	mov    r8d,0x6
  40411d:	call   QWORD PTR [rbx+0x50]
  404120:	lea    rsi,[rbx+0xc8]
  404127:	mov    rdi,QWORD PTR [rbx+0x40]
  40412b:	xor    edx,edx
  40412d:	xor    ecx,ecx
  40412f:	mov    r8d,0x7
  404135:	call   QWORD PTR [rbx+0x50]
  404138:	cmp    DWORD PTR [rbx+0x128],0x0
  40413f:	je     40414d <flatcc_builder_clear@@Base+0xcd>
  404141:	lea    rdi,[rbx+0x130]
  404148:	call   408700 <flatcc_emitter_clear@@Base>
  40414d:	vxorps xmm0,xmm0,xmm0
  404151:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  404159:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  404161:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  404169:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404171:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404179:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404181:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404189:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404191:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404196:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40419b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  4041a0:	vmovups YMMWORD PTR [rbx],ymm0
  4041a4:	mov    QWORD PTR [rbx+0x180],0x0
  4041af:	pop    rbx
  4041b0:	vzeroupper 
  4041b3:	ret    
  4041b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4041be:	xchg   ax,ax

00000000004041c0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  4041c0:	push   r15
  4041c2:	push   r14
  4041c4:	push   r12
  4041c6:	push   rbx
  4041c7:	push   rax
  4041c8:	mov    r14,rsi
  4041cb:	mov    r15,rdi
  4041ce:	add    r14,0xf
  4041d2:	and    r14,0xfffffffffffffff8
  4041d6:	mov    rbx,QWORD PTR [rdi+0x180]
  4041dd:	lea    r12,[rdi+0xc8]
  4041e4:	lea    rdx,[rbx+r14*1]
  4041e8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4041ef:	jbe    404208 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  4041f1:	mov    rdi,QWORD PTR [r15+0x40]
  4041f5:	xor    ecx,ecx
  4041f7:	mov    r8d,0x7
  4041fd:	mov    rsi,r12
  404200:	call   QWORD PTR [r15+0x50]
  404204:	test   eax,eax
  404206:	jne    404258 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404208:	add    rbx,QWORD PTR [r12]
  40420c:	je     404247 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40420e:	xor    esi,esi
  404210:	mov    rdi,rbx
  404213:	mov    rdx,r14
  404216:	call   4030a0 <memset@plt>
  40421b:	mov    rax,QWORD PTR [r15+0x178]
  404222:	mov    QWORD PTR [rbx],rax
  404225:	add    rbx,0x8
  404229:	mov    rax,QWORD PTR [r15+0x180]
  404230:	lea    rcx,[rax+0x8]
  404234:	mov    QWORD PTR [r15+0x178],rcx
  40423b:	add    rax,r14
  40423e:	mov    QWORD PTR [r15+0x180],rax
  404245:	jmp    404249 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  404247:	xor    ebx,ebx
  404249:	mov    rax,rbx
  40424c:	add    rsp,0x8
  404250:	pop    rbx
  404251:	pop    r12
  404253:	pop    r14
  404255:	pop    r15
  404257:	ret    
  404258:	lea    rdi,[rip+0x6883]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  40425f:	lea    rsi,[rip+0x56bc]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404266:	lea    rcx,[rip+0x66af]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  40426d:	mov    edx,0x134
  404272:	call   403090 <__assert_fail@plt>
  404277:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404280 <flatcc_builder_enter_user_frame@@Base>:
  404280:	push   r15
  404282:	push   r14
  404284:	push   r12
  404286:	push   rbx
  404287:	push   rax
  404288:	mov    r14,rsi
  40428b:	mov    rbx,rdi
  40428e:	add    r14,0xf
  404292:	and    r14,0xfffffffffffffff8
  404296:	mov    r15,QWORD PTR [rdi+0x180]
  40429d:	lea    r12,[rdi+0xc8]
  4042a4:	lea    rdx,[r15+r14*1]
  4042a8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4042af:	jbe    4042c7 <flatcc_builder_enter_user_frame@@Base+0x47>
  4042b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4042b5:	xor    ecx,ecx
  4042b7:	mov    r8d,0x7
  4042bd:	mov    rsi,r12
  4042c0:	call   QWORD PTR [rbx+0x50]
  4042c3:	test   eax,eax
  4042c5:	jne    404310 <flatcc_builder_enter_user_frame@@Base+0x90>
  4042c7:	add    r15,QWORD PTR [r12]
  4042cb:	je     404302 <flatcc_builder_enter_user_frame@@Base+0x82>
  4042cd:	xor    esi,esi
  4042cf:	mov    rdi,r15
  4042d2:	mov    rdx,r14
  4042d5:	call   4030a0 <memset@plt>
  4042da:	mov    rax,QWORD PTR [rbx+0x178]
  4042e1:	mov    QWORD PTR [r15],rax
  4042e4:	mov    rcx,QWORD PTR [rbx+0x180]
  4042eb:	lea    rax,[rcx+0x8]
  4042ef:	mov    QWORD PTR [rbx+0x178],rax
  4042f6:	add    rcx,r14
  4042f9:	mov    QWORD PTR [rbx+0x180],rcx
  404300:	jmp    404304 <flatcc_builder_enter_user_frame@@Base+0x84>
  404302:	xor    eax,eax
  404304:	add    rsp,0x8
  404308:	pop    rbx
  404309:	pop    r12
  40430b:	pop    r14
  40430d:	pop    r15
  40430f:	ret    
  404310:	lea    rdi,[rip+0x67cb]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404317:	lea    rsi,[rip+0x5604]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40431e:	lea    rcx,[rip+0x65f7]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  404325:	mov    edx,0x134
  40432a:	call   403090 <__assert_fail@plt>
  40432f:	nop

0000000000404330 <flatcc_builder_exit_user_frame@@Base>:
  404330:	mov    rax,QWORD PTR [rdi+0x178]
  404337:	test   rax,rax
  40433a:	je     40435d <flatcc_builder_exit_user_frame@@Base+0x2d>
  40433c:	mov    rcx,QWORD PTR [rdi+0xc8]
  404343:	mov    edx,eax
  404345:	add    rax,0xfffffffffffffff8
  404349:	mov    QWORD PTR [rdi+0x180],rax
  404350:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  404355:	mov    QWORD PTR [rdi+0x178],rax
  40435c:	ret    
  40435d:	push   rax
  40435e:	lea    rdi,[rip+0x565b]        # 4099c0 <flatcc_builder_padding_base@@Base+0x330>
  404365:	lea    rsi,[rip+0x55b6]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40436c:	lea    rcx,[rip+0x5666]        # 4099d9 <flatcc_builder_padding_base@@Base+0x349>
  404373:	mov    edx,0x21e
  404378:	call   403090 <__assert_fail@plt>
  40437d:	nop    DWORD PTR [rax]

0000000000404380 <flatcc_builder_exit_user_frame_at@@Base>:
  404380:	push   rax
  404381:	cmp    QWORD PTR [rdi+0x178],rsi
  404388:	jb     4043b8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40438a:	mov    QWORD PTR [rdi+0x178],rsi
  404391:	test   rsi,rsi
  404394:	je     4043d7 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404396:	mov    rax,QWORD PTR [rdi+0xc8]
  40439d:	mov    ecx,esi
  40439f:	add    rsi,0xfffffffffffffff8
  4043a3:	mov    QWORD PTR [rdi+0x180],rsi
  4043aa:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  4043af:	mov    QWORD PTR [rdi+0x178],rax
  4043b6:	pop    rcx
  4043b7:	ret    
  4043b8:	lea    rdi,[rip+0x5654]        # 409a13 <flatcc_builder_padding_base@@Base+0x383>
  4043bf:	lea    rsi,[rip+0x555c]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4043c6:	lea    rcx,[rip+0x5665]        # 409a32 <flatcc_builder_padding_base@@Base+0x3a2>
  4043cd:	mov    edx,0x227
  4043d2:	call   403090 <__assert_fail@plt>
  4043d7:	lea    rdi,[rip+0x55e2]        # 4099c0 <flatcc_builder_padding_base@@Base+0x330>
  4043de:	lea    rsi,[rip+0x553d]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4043e5:	lea    rcx,[rip+0x55ed]        # 4099d9 <flatcc_builder_padding_base@@Base+0x349>
  4043ec:	mov    edx,0x21e
  4043f1:	call   403090 <__assert_fail@plt>
  4043f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404400 <flatcc_builder_get_current_user_frame@@Base>:
  404400:	mov    rax,QWORD PTR [rdi+0x178]
  404407:	ret    
  404408:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404410 <flatcc_builder_get_user_frame_ptr@@Base>:
  404410:	mov    eax,esi
  404412:	add    rax,QWORD PTR [rdi+0xc8]
  404419:	ret    
  40441a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404420 <flatcc_builder_embed_buffer@@Base>:
  404420:	push   rbp
  404421:	push   r15
  404423:	push   r14
  404425:	push   r12
  404427:	push   rbx
  404428:	sub    rsp,0xa0
  40442f:	mov    ebx,r9d
  404432:	mov    rbp,rcx
  404435:	mov    r15,rdx
  404438:	mov    eax,esi
  40443a:	mov    r12,rdi
  40443d:	mov    WORD PTR [rsp+0xa],r8w
  404443:	xor    ecx,ecx
  404445:	cmp    DWORD PTR [rdi+0x100],0x0
  40444c:	setne  cl
  40444f:	lea    rsi,[rsp+0xa]
  404454:	mov    edx,eax
  404456:	call   4045c0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40445b:	and    ebx,0x2
  40445e:	movzx  eax,WORD PTR [rsp+0xa]
  404463:	mov    r14d,DWORD PTR [r12+0xf0]
  40446b:	lea    ecx,[rbp+rbx*2+0x0]
  40446f:	mov    edx,r14d
  404472:	sub    edx,ecx
  404474:	add    eax,0xffffffff
  404477:	and    eax,edx
  404479:	lea    ecx,[rax+rbp*1]
  40447c:	mov    DWORD PTR [rsp+0xc],ecx
  404480:	mov    QWORD PTR [rsp+0x10],0x0
  404489:	mov    DWORD PTR [rsp+0x18],0x0
  404491:	cmp    DWORD PTR [r12+0x100],0x0
  40449a:	je     40456e <flatcc_builder_embed_buffer@@Base+0x14e>
  4044a0:	mov    QWORD PTR [rsp+0x10],0x4
  4044a9:	lea    rcx,[rsp+0xc]
  4044ae:	mov    QWORD PTR [rsp+0x20],rcx
  4044b3:	mov    QWORD PTR [rsp+0x28],0x4
  4044bc:	mov    DWORD PTR [rsp+0x18],0x1
  4044c4:	mov    edx,0x1
  4044c9:	mov    r8d,0x4
  4044cf:	test   rbp,rbp
  4044d2:	je     4044f3 <flatcc_builder_embed_buffer@@Base+0xd3>
  4044d4:	add    r8,rbp
  4044d7:	mov    QWORD PTR [rsp+0x10],r8
  4044dc:	mov    ecx,edx
  4044de:	shl    rcx,0x4
  4044e2:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  4044e7:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  4044ec:	add    edx,0x1
  4044ef:	mov    DWORD PTR [rsp+0x18],edx
  4044f3:	test   eax,eax
  4044f5:	je     40451f <flatcc_builder_embed_buffer@@Base+0xff>
  4044f7:	mov    eax,eax
  4044f9:	add    r8,rax
  4044fc:	mov    QWORD PTR [rsp+0x10],r8
  404501:	mov    ecx,edx
  404503:	shl    rcx,0x4
  404507:	lea    rsi,[rip+0x5182]        # 409690 <flatcc_builder_padding_base@@Base>
  40450e:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  404513:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404518:	add    edx,0x1
  40451b:	mov    DWORD PTR [rsp+0x18],edx
  40451f:	cmp    r8,0x11
  404523:	setb   al
  404526:	lea    rcx,[r8-0x10]
  40452a:	shr    rcx,0x20
  40452e:	sete   cl
  404531:	test   r8d,r8d
  404534:	jle    404581 <flatcc_builder_embed_buffer@@Base+0x161>
  404536:	or     al,cl
  404538:	je     404581 <flatcc_builder_embed_buffer@@Base+0x161>
  40453a:	sub    r14d,r8d
  40453d:	mov    rdi,QWORD PTR [r12+0x38]
  404542:	lea    rsi,[rsp+0x20]
  404547:	mov    ecx,r14d
  40454a:	call   QWORD PTR [r12+0x48]
  40454f:	test   eax,eax
  404551:	jne    4045a0 <flatcc_builder_embed_buffer@@Base+0x180>
  404553:	mov    DWORD PTR [r12+0xf0],r14d
  40455b:	mov    eax,r14d
  40455e:	add    rsp,0xa0
  404565:	pop    rbx
  404566:	pop    r12
  404568:	pop    r14
  40456a:	pop    r15
  40456c:	pop    rbp
  40456d:	ret    
  40456e:	xor    edx,edx
  404570:	xor    r8d,r8d
  404573:	test   rbp,rbp
  404576:	jne    4044d4 <flatcc_builder_embed_buffer@@Base+0xb4>
  40457c:	jmp    4044f3 <flatcc_builder_embed_buffer@@Base+0xd3>
  404581:	lea    rdi,[rip+0x655a]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404588:	lea    rsi,[rip+0x5393]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40458f:	lea    rcx,[rip+0x640b]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  404596:	mov    edx,0x287
  40459b:	call   403090 <__assert_fail@plt>
  4045a0:	lea    rdi,[rip+0x653b]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4045a7:	lea    rsi,[rip+0x5374]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4045ae:	lea    rcx,[rip+0x63ec]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  4045b5:	mov    edx,0x28b
  4045ba:	call   403090 <__assert_fail@plt>
  4045bf:	nop
  4045c0:	push   rbx
  4045c1:	sub    rsp,0x90
  4045c8:	mov    rax,rdi
  4045cb:	test   dx,dx
  4045ce:	jne    4045e1 <flatcc_builder_embed_buffer@@Base+0x1c1>
  4045d0:	mov    edi,DWORD PTR [rax+0xec]
  4045d6:	test   di,di
  4045d9:	mov    edx,0x1
  4045de:	cmovne edx,edi
  4045e1:	movzx  ebx,WORD PTR [rsi]
  4045e4:	mov    edi,0x4
  4045e9:	cmp    ebx,0x4
  4045ec:	cmovae edi,ebx
  4045ef:	jb     4045fc <flatcc_builder_embed_buffer@@Base+0x1dc>
  4045f1:	cmp    di,dx
  4045f4:	jb     4045fc <flatcc_builder_embed_buffer@@Base+0x1dc>
  4045f6:	test   ecx,ecx
  4045f8:	jne    404664 <flatcc_builder_embed_buffer@@Base+0x244>
  4045fa:	jmp    404609 <flatcc_builder_embed_buffer@@Base+0x1e9>
  4045fc:	cmp    di,dx
  4045ff:	cmovb  edi,edx
  404602:	mov    WORD PTR [rsi],di
  404605:	test   ecx,ecx
  404607:	jne    404664 <flatcc_builder_embed_buffer@@Base+0x244>
  404609:	mov    ebx,DWORD PTR [rax+0xf4]
  40460f:	movzx  r8d,dx
  404613:	add    r8d,0xffffffff
  404617:	and    r8d,ebx
  40461a:	je     404664 <flatcc_builder_embed_buffer@@Base+0x244>
  40461c:	mov    QWORD PTR [rsp],r8
  404620:	lea    rcx,[rip+0x5069]        # 409690 <flatcc_builder_padding_base@@Base>
  404627:	mov    QWORD PTR [rsp+0x10],rcx
  40462c:	mov    QWORD PTR [rsp+0x18],r8
  404631:	mov    DWORD PTR [rsp+0x8],0x1
  404639:	lea    ecx,[r8+rbx*1]
  40463d:	mov    DWORD PTR [rax+0xf4],ecx
  404643:	test   r8d,r8d
  404646:	js     40466d <flatcc_builder_embed_buffer@@Base+0x24d>
  404648:	mov    rdi,QWORD PTR [rax+0x38]
  40464c:	lea    rsi,[rsp+0x10]
  404651:	mov    edx,0x1
  404656:	mov    ecx,ebx
  404658:	call   QWORD PTR [rax+0x48]
  40465b:	test   eax,eax
  40465d:	jne    40468c <flatcc_builder_embed_buffer@@Base+0x26c>
  40465f:	cmp    ebx,0xffffffff
  404662:	je     4046ab <flatcc_builder_embed_buffer@@Base+0x28b>
  404664:	add    rsp,0x90
  40466b:	pop    rbx
  40466c:	ret    
  40466d:	lea    rdi,[rip+0x646e]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404674:	lea    rsi,[rip+0x52a7]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40467b:	lea    rcx,[rip+0x63db]        # 40aa5d <flatcc_builder_padding_base@@Base+0x13cd>
  404682:	mov    edx,0x2a1
  404687:	call   403090 <__assert_fail@plt>
  40468c:	lea    rdi,[rip+0x644f]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404693:	lea    rsi,[rip+0x5288]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40469a:	lea    rcx,[rip+0x63bc]        # 40aa5d <flatcc_builder_padding_base@@Base+0x13cd>
  4046a1:	mov    edx,0x2a5
  4046a6:	call   403090 <__assert_fail@plt>
  4046ab:	lea    rdi,[rip+0x6430]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4046b2:	lea    rsi,[rip+0x5269]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4046b9:	lea    rcx,[rip+0x629f]        # 40a95f <flatcc_builder_padding_base@@Base+0x12cf>
  4046c0:	mov    edx,0x2be
  4046c5:	call   403090 <__assert_fail@plt>
  4046ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004046d0 <flatcc_builder_create_buffer@@Base>:
  4046d0:	push   rbp
  4046d1:	push   r15
  4046d3:	push   r14
  4046d5:	push   r13
  4046d7:	push   r12
  4046d9:	push   rbx
  4046da:	sub    rsp,0xa8
  4046e1:	mov    r12d,r9d
  4046e4:	mov    r14d,ecx
  4046e7:	mov    rbp,rsi
  4046ea:	mov    r13,rdi
  4046ed:	mov    WORD PTR [rsp+0xa],r8w
  4046f3:	mov    DWORD PTR [rsp+0xc],0x0
  4046fb:	mov    r15d,r9d
  4046fe:	and    r15d,0x1
  404702:	lea    rsi,[rsp+0xa]
  404707:	mov    ecx,r15d
  40470a:	call   4045c0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40470f:	movzx  eax,WORD PTR [rsp+0xa]
  404714:	cmp    WORD PTR [r13+0xe8],ax
  40471c:	jae    404726 <flatcc_builder_create_buffer@@Base+0x56>
  40471e:	mov    WORD PTR [r13+0xe8],ax
  404726:	movzx  edx,ax
  404729:	xor    eax,eax
  40472b:	test   rbp,rbp
  40472e:	je     404748 <flatcc_builder_create_buffer@@Base+0x78>
  404730:	mov    ecx,DWORD PTR [rbp+0x0]
  404733:	mov    DWORD PTR [rsp+0xc],ecx
  404737:	xor    edi,edi
  404739:	test   ecx,ecx
  40473b:	setne  dil
  40473f:	mov    rsi,rdi
  404742:	shl    rsi,0x2
  404746:	jmp    40474c <flatcc_builder_create_buffer@@Base+0x7c>
  404748:	xor    edi,edi
  40474a:	xor    esi,esi
  40474c:	lea    ecx,[r12+r12*1]
  404750:	and    ecx,0x4
  404753:	mov    ebp,DWORD PTR [r13+0xf0]
  40475a:	xor    ecx,0xfffffffc
  40475d:	add    ecx,ebp
  40475f:	sub    ecx,esi
  404761:	add    edx,0xffffffff
  404764:	mov    QWORD PTR [rsp+0x18],0x0
  40476d:	mov    DWORD PTR [rsp+0x20],0x0
  404775:	test   r12b,0x3
  404779:	je     4047ac <flatcc_builder_create_buffer@@Base+0xdc>
  40477b:	mov    QWORD PTR [rsp+0x18],0x4
  404784:	lea    rax,[rsp+0x10]
  404789:	mov    QWORD PTR [rsp+0x28],rax
  40478e:	mov    QWORD PTR [rsp+0x30],0x4
  404797:	mov    DWORD PTR [rsp+0x20],0x1
  40479f:	mov    eax,0x1
  4047a4:	mov    r8d,0x8
  4047aa:	jmp    4047b2 <flatcc_builder_create_buffer@@Base+0xe2>
  4047ac:	mov    r8d,0x4
  4047b2:	and    ecx,edx
  4047b4:	mov    QWORD PTR [rsp+0x18],r8
  4047b9:	mov    edx,eax
  4047bb:	shl    rdx,0x4
  4047bf:	lea    rbx,[rsp+0x14]
  4047c4:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  4047c9:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  4047d2:	lea    edx,[rax+0x1]
  4047d5:	mov    DWORD PTR [rsp+0x20],edx
  4047d9:	test   dil,dil
  4047dc:	je     404804 <flatcc_builder_create_buffer@@Base+0x134>
  4047de:	add    r8,rsi
  4047e1:	mov    QWORD PTR [rsp+0x18],r8
  4047e6:	mov    edx,edx
  4047e8:	shl    rdx,0x4
  4047ec:	lea    rdi,[rsp+0xc]
  4047f1:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  4047f6:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  4047fb:	or     eax,0x2
  4047fe:	mov    DWORD PTR [rsp+0x20],eax
  404802:	mov    edx,eax
  404804:	test   ecx,ecx
  404806:	je     404830 <flatcc_builder_create_buffer@@Base+0x160>
  404808:	mov    eax,ecx
  40480a:	add    r8,rax
  40480d:	mov    QWORD PTR [rsp+0x18],r8
  404812:	mov    ecx,edx
  404814:	shl    rcx,0x4
  404818:	lea    rsi,[rip+0x4e71]        # 409690 <flatcc_builder_padding_base@@Base>
  40481f:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  404824:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  404829:	add    edx,0x1
  40482c:	mov    DWORD PTR [rsp+0x20],edx
  404830:	xor    eax,eax
  404832:	test   r12b,0x3
  404836:	setne  al
  404839:	sub    ebp,r8d
  40483c:	lea    eax,[rbp+rax*4+0x0]
  404840:	mov    ecx,r15d
  404843:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  40484b:	sub    ecx,eax
  40484d:	mov    DWORD PTR [rsp+0x10],ecx
  404851:	sub    r14d,eax
  404854:	mov    DWORD PTR [rsp+0x14],r14d
  404859:	cmp    r8,0x11
  40485d:	setb   al
  404860:	lea    rcx,[r8-0x10]
  404864:	shr    rcx,0x20
  404868:	sete   cl
  40486b:	test   r8d,r8d
  40486e:	jle    4048a6 <flatcc_builder_create_buffer@@Base+0x1d6>
  404870:	or     al,cl
  404872:	je     4048a6 <flatcc_builder_create_buffer@@Base+0x1d6>
  404874:	mov    rdi,QWORD PTR [r13+0x38]
  404878:	lea    rsi,[rsp+0x28]
  40487d:	mov    ecx,ebp
  40487f:	call   QWORD PTR [r13+0x48]
  404883:	test   eax,eax
  404885:	jne    4048c5 <flatcc_builder_create_buffer@@Base+0x1f5>
  404887:	mov    DWORD PTR [r13+0xf0],ebp
  40488e:	test   ebp,ebp
  404890:	je     4048e4 <flatcc_builder_create_buffer@@Base+0x214>
  404892:	mov    eax,ebp
  404894:	add    rsp,0xa8
  40489b:	pop    rbx
  40489c:	pop    r12
  40489e:	pop    r13
  4048a0:	pop    r14
  4048a2:	pop    r15
  4048a4:	pop    rbp
  4048a5:	ret    
  4048a6:	lea    rdi,[rip+0x6235]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4048ad:	lea    rsi,[rip+0x506e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4048b4:	lea    rcx,[rip+0x60e6]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  4048bb:	mov    edx,0x287
  4048c0:	call   403090 <__assert_fail@plt>
  4048c5:	lea    rdi,[rip+0x6216]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4048cc:	lea    rsi,[rip+0x504f]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4048d3:	lea    rcx,[rip+0x60c7]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  4048da:	mov    edx,0x28b
  4048df:	call   403090 <__assert_fail@plt>
  4048e4:	lea    rdi,[rip+0x61f7]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4048eb:	lea    rsi,[rip+0x5030]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4048f2:	lea    rcx,[rip+0x517e]        # 409a77 <flatcc_builder_padding_base@@Base+0x3e7>
  4048f9:	mov    edx,0x304
  4048fe:	call   403090 <__assert_fail@plt>
  404903:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40490d:	nop    DWORD PTR [rax]

0000000000404910 <flatcc_builder_create_struct@@Base>:
  404910:	push   rbp
  404911:	push   r14
  404913:	push   rbx
  404914:	sub    rsp,0x90
  40491b:	test   cx,cx
  40491e:	je     404a19 <flatcc_builder_create_struct@@Base+0x109>
  404924:	mov    rax,rdx
  404927:	mov    r14,rdi
  40492a:	cmp    WORD PTR [rdi+0xe8],cx
  404931:	jae    40493b <flatcc_builder_create_struct@@Base+0x2b>
  404933:	mov    WORD PTR [r14+0xe8],cx
  40493b:	mov    ebp,DWORD PTR [r14+0xf0]
  404942:	mov    edx,ebp
  404944:	sub    edx,eax
  404946:	movzx  ecx,cx
  404949:	add    ecx,0xffffffff
  40494c:	and    ecx,edx
  40494e:	mov    QWORD PTR [rsp],0x0
  404956:	mov    DWORD PTR [rsp+0x8],0x0
  40495e:	test   rax,rax
  404961:	je     4049f2 <flatcc_builder_create_struct@@Base+0xe2>
  404967:	mov    QWORD PTR [rsp],rax
  40496b:	mov    QWORD PTR [rsp+0x10],rsi
  404970:	mov    QWORD PTR [rsp+0x18],rax
  404975:	mov    DWORD PTR [rsp+0x8],0x1
  40497d:	mov    edx,0x1
  404982:	test   ecx,ecx
  404984:	je     4049ab <flatcc_builder_create_struct@@Base+0x9b>
  404986:	add    rax,rcx
  404989:	mov    QWORD PTR [rsp],rax
  40498d:	mov    esi,edx
  40498f:	shl    rsi,0x4
  404993:	lea    rdi,[rip+0x4cf6]        # 409690 <flatcc_builder_padding_base@@Base>
  40499a:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  40499f:	mov    QWORD PTR [rsp+rsi*1+0x18],rcx
  4049a4:	add    edx,0x1
  4049a7:	mov    DWORD PTR [rsp+0x8],edx
  4049ab:	cmp    rax,0x11
  4049af:	setb   cl
  4049b2:	lea    rsi,[rax-0x10]
  4049b6:	shr    rsi,0x20
  4049ba:	sete   bl
  4049bd:	test   eax,eax
  4049bf:	jle    4049fa <flatcc_builder_create_struct@@Base+0xea>
  4049c1:	or     cl,bl
  4049c3:	je     4049fa <flatcc_builder_create_struct@@Base+0xea>
  4049c5:	sub    ebp,eax
  4049c7:	mov    rdi,QWORD PTR [r14+0x38]
  4049cb:	lea    rsi,[rsp+0x10]
  4049d0:	mov    ecx,ebp
  4049d2:	mov    r8,rax
  4049d5:	call   QWORD PTR [r14+0x48]
  4049d9:	test   eax,eax
  4049db:	jne    404a38 <flatcc_builder_create_struct@@Base+0x128>
  4049dd:	mov    DWORD PTR [r14+0xf0],ebp
  4049e4:	mov    eax,ebp
  4049e6:	add    rsp,0x90
  4049ed:	pop    rbx
  4049ee:	pop    r14
  4049f0:	pop    rbp
  4049f1:	ret    
  4049f2:	xor    edx,edx
  4049f4:	test   ecx,ecx
  4049f6:	jne    404986 <flatcc_builder_create_struct@@Base+0x76>
  4049f8:	jmp    4049ab <flatcc_builder_create_struct@@Base+0x9b>
  4049fa:	lea    rdi,[rip+0x60e1]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404a01:	lea    rsi,[rip+0x4f1a]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404a08:	lea    rcx,[rip+0x5f92]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  404a0f:	mov    edx,0x287
  404a14:	call   403090 <__assert_fail@plt>
  404a19:	lea    rdi,[rip+0x50da]        # 409afa <flatcc_builder_padding_base@@Base+0x46a>
  404a20:	lea    rsi,[rip+0x4efb]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404a27:	lea    rcx,[rip+0x50d7]        # 409b05 <flatcc_builder_padding_base@@Base+0x475>
  404a2e:	mov    edx,0x30f
  404a33:	call   403090 <__assert_fail@plt>
  404a38:	lea    rdi,[rip+0x60a3]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404a3f:	lea    rsi,[rip+0x4edc]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404a46:	lea    rcx,[rip+0x5f54]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  404a4d:	mov    edx,0x28b
  404a52:	call   403090 <__assert_fail@plt>
  404a57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404a60 <flatcc_builder_start_buffer@@Base>:
  404a60:	push   rbp
  404a61:	push   r15
  404a63:	push   r14
  404a65:	push   rbx
  404a66:	push   rax
  404a67:	mov    r15d,ecx
  404a6a:	mov    ebp,edx
  404a6c:	mov    r14,rsi
  404a6f:	mov    rbx,rdi
  404a72:	movzx  esi,WORD PTR [rdi+0xe8]
  404a79:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  404a7e:	mov    ecx,eax
  404a80:	mov    eax,0xffffffff
  404a85:	test   ecx,ecx
  404a87:	jne    404b2c <flatcc_builder_start_buffer@@Base+0xcc>
  404a8d:	mov    WORD PTR [rbx+0xe8],0x1
  404a96:	movzx  eax,WORD PTR [rbx+0xec]
  404a9d:	mov    rcx,QWORD PTR [rbx+0x30]
  404aa1:	mov    WORD PTR [rcx+0x22],ax
  404aa5:	mov    WORD PTR [rbx+0xec],bp
  404aac:	movzx  eax,WORD PTR [rbx+0x10c]
  404ab3:	mov    rcx,QWORD PTR [rbx+0x30]
  404ab7:	mov    WORD PTR [rcx+0x20],ax
  404abb:	mov    WORD PTR [rbx+0x10c],r15w
  404ac3:	mov    eax,DWORD PTR [rbx+0xf8]
  404ac9:	mov    rcx,QWORD PTR [rbx+0x30]
  404acd:	mov    DWORD PTR [rcx+0x14],eax
  404ad0:	mov    eax,DWORD PTR [rbx+0x100]
  404ad6:	mov    rcx,QWORD PTR [rbx+0x30]
  404ada:	mov    DWORD PTR [rcx+0x1c],eax
  404add:	mov    eax,DWORD PTR [rbx+0xf0]
  404ae3:	mov    DWORD PTR [rbx+0xf8],eax
  404ae9:	mov    eax,DWORD PTR [rbx+0xfc]
  404aef:	lea    ecx,[rax+0x1]
  404af2:	mov    DWORD PTR [rbx+0xfc],ecx
  404af8:	mov    DWORD PTR [rbx+0x100],eax
  404afe:	mov    eax,DWORD PTR [rbx+0x110]
  404b04:	mov    rcx,QWORD PTR [rbx+0x30]
  404b08:	mov    DWORD PTR [rcx+0x10],eax
  404b0b:	test   r14,r14
  404b0e:	jne    404b17 <flatcc_builder_start_buffer@@Base+0xb7>
  404b10:	lea    r14,[rip+0x4b79]        # 409690 <flatcc_builder_padding_base@@Base>
  404b17:	mov    eax,DWORD PTR [r14]
  404b1a:	mov    DWORD PTR [rbx+0x110],eax
  404b20:	mov    rax,QWORD PTR [rbx+0x30]
  404b24:	mov    WORD PTR [rax+0xe],0x1
  404b2a:	xor    eax,eax
  404b2c:	add    rsp,0x8
  404b30:	pop    rbx
  404b31:	pop    r14
  404b33:	pop    r15
  404b35:	pop    rbp
  404b36:	ret    
  404b37:	nop    WORD PTR [rax+rax*1+0x0]
  404b40:	push   rbp
  404b41:	push   r15
  404b43:	push   r14
  404b45:	push   rbx
  404b46:	push   rax
  404b47:	mov    r14d,esi
  404b4a:	mov    rbx,rdi
  404b4d:	movsxd rbp,DWORD PTR [rdi+0x104]
  404b54:	lea    eax,[rbp+0x1]
  404b57:	mov    DWORD PTR [rdi+0x104],eax
  404b5d:	cmp    ebp,DWORD PTR [rdi+0x108]
  404b63:	jge    404b76 <flatcc_builder_start_buffer@@Base+0x116>
  404b65:	mov    rax,QWORD PTR [rbx+0x30]
  404b69:	add    rax,0x24
  404b6d:	mov    QWORD PTR [rbx+0x30],rax
  404b71:	jmp    404c0b <flatcc_builder_start_buffer@@Base+0x1ab>
  404b76:	mov    eax,DWORD PTR [rbx+0x120]
  404b7c:	mov    r15d,0xffffffff
  404b82:	test   eax,eax
  404b84:	jle    404b8e <flatcc_builder_start_buffer@@Base+0x12e>
  404b86:	cmp    ebp,eax
  404b88:	jge    404c46 <flatcc_builder_start_buffer@@Base+0x1e6>
  404b8e:	shl    rbp,0x2
  404b92:	lea    rdx,[rbp*8+0x24]
  404b9a:	add    rdx,rbp
  404b9d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404ba4:	jbe    404bc4 <flatcc_builder_start_buffer@@Base+0x164>
  404ba6:	lea    rsi,[rbx+0x98]
  404bad:	mov    rdi,QWORD PTR [rbx+0x40]
  404bb1:	xor    ecx,ecx
  404bb3:	mov    r8d,0x4
  404bb9:	call   QWORD PTR [rbx+0x50]
  404bbc:	test   eax,eax
  404bbe:	jne    404c54 <flatcc_builder_start_buffer@@Base+0x1f4>
  404bc4:	lea    rax,[rbp*8+0x0]
  404bcc:	add    rax,rbp
  404bcf:	add    rax,QWORD PTR [rbx+0x98]
  404bd6:	mov    QWORD PTR [rbx+0x30],rax
  404bda:	je     404c46 <flatcc_builder_start_buffer@@Base+0x1e6>
  404bdc:	movabs rdx,0xe38e38e38e38e38f
  404be6:	mulx   rdx,rcx,QWORD PTR [rbx+0xa0]
  404bef:	shr    rdx,0x5
  404bf3:	mov    ecx,DWORD PTR [rbx+0x120]
  404bf9:	cmp    ecx,edx
  404bfb:	mov    esi,edx
  404bfd:	cmovle esi,ecx
  404c00:	test   ecx,ecx
  404c02:	cmovle esi,edx
  404c05:	mov    DWORD PTR [rbx+0x108],esi
  404c0b:	mov    ecx,DWORD PTR [rbx+0x20]
  404c0e:	mov    DWORD PTR [rax+0x8],ecx
  404c11:	movzx  edx,WORD PTR [rbx+0xea]
  404c18:	mov    WORD PTR [rax+0xc],dx
  404c1c:	mov    WORD PTR [rbx+0xea],r14w
  404c24:	mov    edx,DWORD PTR [rbx+0x28]
  404c27:	mov    DWORD PTR [rax],edx
  404c29:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404c30:	lea    eax,[rcx+rdx*1]
  404c33:	add    eax,0x7
  404c36:	and    eax,0xfffffff8
  404c39:	mov    DWORD PTR [rbx+0x28],eax
  404c3c:	mov    DWORD PTR [rbx+0x20],0x0
  404c43:	xor    r15d,r15d
  404c46:	mov    eax,r15d
  404c49:	add    rsp,0x8
  404c4d:	pop    rbx
  404c4e:	pop    r14
  404c50:	pop    r15
  404c52:	pop    rbp
  404c53:	ret    
  404c54:	lea    rdi,[rip+0x5e87]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  404c5b:	lea    rsi,[rip+0x4cc0]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404c62:	lea    rcx,[rip+0x5cb3]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  404c69:	mov    edx,0x134
  404c6e:	call   403090 <__assert_fail@plt>
  404c73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c7d:	nop    DWORD PTR [rax]

0000000000404c80 <flatcc_builder_end_buffer@@Base>:
  404c80:	push   rbp
  404c81:	push   rbx
  404c82:	push   rax
  404c83:	mov    rcx,QWORD PTR [rdi+0x30]
  404c87:	movzx  ecx,WORD PTR [rcx+0xe]
  404c8b:	cmp    ecx,0x1
  404c8e:	jne    404d8e <flatcc_builder_end_buffer@@Base+0x10e>
  404c94:	mov    eax,esi
  404c96:	mov    rbx,rdi
  404c99:	movzx  ecx,WORD PTR [rdi+0x10c]
  404ca0:	and    ecx,0x2
  404ca3:	xor    r9d,r9d
  404ca6:	cmp    DWORD PTR [rdi+0x100],0x0
  404cad:	setne  r9b
  404cb1:	or     r9d,ecx
  404cb4:	movzx  edi,WORD PTR [rdi+0xe8]
  404cbb:	movzx  ecx,WORD PTR [rbx+0xec]
  404cc2:	cmp    di,cx
  404cc5:	jae    404cd0 <flatcc_builder_end_buffer@@Base+0x50>
  404cc7:	mov    WORD PTR [rbx+0xe8],cx
  404cce:	mov    edi,ecx
  404cd0:	lea    rsi,[rbx+0x110]
  404cd7:	movzx  edx,cx
  404cda:	movzx  r8d,di
  404cde:	mov    rdi,rbx
  404ce1:	mov    ecx,eax
  404ce3:	call   4046d0 <flatcc_builder_create_buffer@@Base>
  404ce8:	mov    ebp,eax
  404cea:	test   eax,eax
  404cec:	je     404d85 <flatcc_builder_end_buffer@@Base+0x105>
  404cf2:	mov    rax,QWORD PTR [rbx+0x30]
  404cf6:	mov    ecx,DWORD PTR [rax+0x14]
  404cf9:	mov    DWORD PTR [rbx+0xf8],ecx
  404cff:	mov    ecx,DWORD PTR [rax+0x1c]
  404d02:	mov    DWORD PTR [rbx+0x100],ecx
  404d08:	mov    ecx,DWORD PTR [rax+0x10]
  404d0b:	mov    DWORD PTR [rbx+0x110],ecx
  404d11:	movzx  eax,WORD PTR [rax+0x20]
  404d15:	mov    WORD PTR [rbx+0x10c],ax
  404d1c:	mov    rdi,QWORD PTR [rbx+0x18]
  404d20:	mov    edx,DWORD PTR [rbx+0x20]
  404d23:	xor    esi,esi
  404d25:	call   4030a0 <memset@plt>
  404d2a:	mov    rax,QWORD PTR [rbx+0x30]
  404d2e:	mov    ecx,DWORD PTR [rax+0x8]
  404d31:	mov    DWORD PTR [rbx+0x20],ecx
  404d34:	mov    ecx,DWORD PTR [rax]
  404d36:	mov    DWORD PTR [rbx+0x28],ecx
  404d39:	mov    edx,DWORD PTR [rax+0x4]
  404d3c:	mov    rsi,rcx
  404d3f:	add    rsi,QWORD PTR [rbx+0x68]
  404d43:	mov    QWORD PTR [rbx+0x18],rsi
  404d47:	mov    esi,DWORD PTR [rbx+0x70]
  404d4a:	sub    esi,ecx
  404d4c:	cmp    esi,edx
  404d4e:	cmova  esi,edx
  404d51:	mov    DWORD PTR [rbx+0x24],esi
  404d54:	movzx  ecx,WORD PTR [rbx+0xea]
  404d5b:	cmp    WORD PTR [rbx+0xe8],cx
  404d62:	jae    404d6b <flatcc_builder_end_buffer@@Base+0xeb>
  404d64:	mov    WORD PTR [rbx+0xe8],cx
  404d6b:	movzx  ecx,WORD PTR [rax+0xc]
  404d6f:	mov    WORD PTR [rbx+0xea],cx
  404d76:	add    rax,0xffffffffffffffdc
  404d7a:	mov    QWORD PTR [rbx+0x30],rax
  404d7e:	add    DWORD PTR [rbx+0x104],0xffffffff
  404d85:	mov    eax,ebp
  404d87:	add    rsp,0x8
  404d8b:	pop    rbx
  404d8c:	pop    rbp
  404d8d:	ret    
  404d8e:	lea    rdi,[rip+0x4dd6]        # 409b6b <flatcc_builder_padding_base@@Base+0x4db>
  404d95:	lea    rsi,[rip+0x4b86]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404d9c:	lea    rcx,[rip+0x4df4]        # 409b97 <flatcc_builder_padding_base@@Base+0x507>
  404da3:	mov    edx,0x346
  404da8:	call   403090 <__assert_fail@plt>
  404dad:	nop    DWORD PTR [rax]

0000000000404db0 <flatcc_builder_start_struct@@Base>:
  404db0:	push   r15
  404db2:	push   r14
  404db4:	push   rbx
  404db5:	mov    r14,rsi
  404db8:	mov    rbx,rdi
  404dbb:	mov    esi,edx
  404dbd:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  404dc2:	test   eax,eax
  404dc4:	je     404dcd <flatcc_builder_start_struct@@Base+0x1d>
  404dc6:	xor    eax,eax
  404dc8:	jmp    404e62 <flatcc_builder_start_struct@@Base+0xb2>
  404dcd:	mov    rdx,QWORD PTR [rbx+0x30]
  404dd1:	mov    WORD PTR [rdx+0xe],0x2
  404dd7:	mov    ecx,DWORD PTR [rbx+0x28]
  404dda:	mov    esi,DWORD PTR [rbx+0x70]
  404ddd:	mov    rax,QWORD PTR [rbx+0x68]
  404de1:	add    rax,rcx
  404de4:	mov    QWORD PTR [rbx+0x18],rax
  404de8:	sub    esi,ecx
  404dea:	cmp    esi,0xfffffffc
  404ded:	mov    edi,0xfffffffc
  404df2:	cmovb  edi,esi
  404df5:	mov    DWORD PTR [rbx+0x24],edi
  404df8:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404dff:	mov    r15d,DWORD PTR [rbx+0x20]
  404e03:	add    r14d,r15d
  404e06:	mov    DWORD PTR [rbx+0x20],r14d
  404e0a:	cmp    r14d,edi
  404e0d:	jb     404e5f <flatcc_builder_start_struct@@Base+0xaf>
  404e0f:	add    r14d,0x1
  404e13:	lea    rsi,[rbx+0x68]
  404e17:	mov    rdi,QWORD PTR [rbx+0x40]
  404e1b:	add    r14,rcx
  404e1e:	mov    ecx,0x1
  404e23:	mov    r8d,0x1
  404e29:	mov    rdx,r14
  404e2c:	call   QWORD PTR [rbx+0x50]
  404e2f:	test   eax,eax
  404e31:	jne    404dc6 <flatcc_builder_start_struct@@Base+0x16>
  404e33:	mov    ecx,DWORD PTR [rbx+0x28]
  404e36:	mov    rax,rcx
  404e39:	add    rax,QWORD PTR [rbx+0x68]
  404e3d:	mov    QWORD PTR [rbx+0x18],rax
  404e41:	mov    edx,DWORD PTR [rbx+0x70]
  404e44:	sub    edx,ecx
  404e46:	cmp    edx,0xfffffffc
  404e49:	mov    ecx,0xfffffffc
  404e4e:	cmovb  ecx,edx
  404e51:	mov    DWORD PTR [rbx+0x24],ecx
  404e54:	mov    rcx,QWORD PTR [rbx+0x30]
  404e58:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404e5f:	add    rax,r15
  404e62:	pop    rbx
  404e63:	pop    r14
  404e65:	pop    r15
  404e67:	ret    
  404e68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404e70 <flatcc_builder_struct_edit@@Base>:
  404e70:	mov    rax,QWORD PTR [rdi+0x18]
  404e74:	ret    
  404e75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404e7f:	nop

0000000000404e80 <flatcc_builder_end_struct@@Base>:
  404e80:	push   rbp
  404e81:	push   rbx
  404e82:	push   rax
  404e83:	mov    rax,QWORD PTR [rdi+0x30]
  404e87:	movzx  eax,WORD PTR [rax+0xe]
  404e8b:	cmp    eax,0x2
  404e8e:	jne    404f22 <flatcc_builder_end_struct@@Base+0xa2>
  404e94:	mov    rbx,rdi
  404e97:	mov    rsi,QWORD PTR [rdi+0x18]
  404e9b:	mov    edx,DWORD PTR [rdi+0x20]
  404e9e:	movzx  ecx,WORD PTR [rdi+0xea]
  404ea5:	call   404910 <flatcc_builder_create_struct@@Base>
  404eaa:	mov    ebp,eax
  404eac:	test   eax,eax
  404eae:	je     404f19 <flatcc_builder_end_struct@@Base+0x99>
  404eb0:	mov    rdi,QWORD PTR [rbx+0x18]
  404eb4:	mov    edx,DWORD PTR [rbx+0x20]
  404eb7:	xor    esi,esi
  404eb9:	call   4030a0 <memset@plt>
  404ebe:	mov    rax,QWORD PTR [rbx+0x30]
  404ec2:	mov    ecx,DWORD PTR [rax+0x8]
  404ec5:	mov    DWORD PTR [rbx+0x20],ecx
  404ec8:	mov    ecx,DWORD PTR [rax]
  404eca:	mov    DWORD PTR [rbx+0x28],ecx
  404ecd:	mov    edx,DWORD PTR [rax+0x4]
  404ed0:	mov    rsi,rcx
  404ed3:	add    rsi,QWORD PTR [rbx+0x68]
  404ed7:	mov    QWORD PTR [rbx+0x18],rsi
  404edb:	mov    esi,DWORD PTR [rbx+0x70]
  404ede:	sub    esi,ecx
  404ee0:	cmp    esi,edx
  404ee2:	cmova  esi,edx
  404ee5:	mov    DWORD PTR [rbx+0x24],esi
  404ee8:	movzx  ecx,WORD PTR [rbx+0xea]
  404eef:	cmp    WORD PTR [rbx+0xe8],cx
  404ef6:	jae    404eff <flatcc_builder_end_struct@@Base+0x7f>
  404ef8:	mov    WORD PTR [rbx+0xe8],cx
  404eff:	movzx  ecx,WORD PTR [rax+0xc]
  404f03:	mov    WORD PTR [rbx+0xea],cx
  404f0a:	add    rax,0xffffffffffffffdc
  404f0e:	mov    QWORD PTR [rbx+0x30],rax
  404f12:	add    DWORD PTR [rbx+0x104],0xffffffff
  404f19:	mov    eax,ebp
  404f1b:	add    rsp,0x8
  404f1f:	pop    rbx
  404f20:	pop    rbp
  404f21:	ret    
  404f22:	lea    rdi,[rip+0x4cc7]        # 409bf0 <flatcc_builder_padding_base@@Base+0x560>
  404f29:	lea    rsi,[rip+0x49f2]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404f30:	lea    rcx,[rip+0x4ce5]        # 409c1c <flatcc_builder_padding_base@@Base+0x58c>
  404f37:	mov    edx,0x368
  404f3c:	call   403090 <__assert_fail@plt>
  404f41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404f4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404f50 <flatcc_builder_extend_vector@@Base>:
  404f50:	push   r14
  404f52:	push   rbx
  404f53:	push   rax
  404f54:	mov    rax,QWORD PTR [rdi+0x30]
  404f58:	mov    ecx,DWORD PTR [rax+0x14]
  404f5b:	add    ecx,esi
  404f5d:	jb     404ff0 <flatcc_builder_extend_vector@@Base+0xa0>
  404f63:	cmp    ecx,DWORD PTR [rax+0x18]
  404f66:	ja     404ff0 <flatcc_builder_extend_vector@@Base+0xa0>
  404f6c:	mov    rbx,rdi
  404f6f:	mov    DWORD PTR [rax+0x14],ecx
  404f72:	mov    rax,QWORD PTR [rdi+0x30]
  404f76:	imul   esi,DWORD PTR [rax+0x10]
  404f7a:	mov    r14d,DWORD PTR [rdi+0x20]
  404f7e:	add    esi,r14d
  404f81:	mov    DWORD PTR [rdi+0x20],esi
  404f84:	cmp    esi,DWORD PTR [rdi+0x24]
  404f87:	jae    404f8f <flatcc_builder_extend_vector@@Base+0x3f>
  404f89:	mov    rax,QWORD PTR [rbx+0x18]
  404f8d:	jmp    404fe5 <flatcc_builder_extend_vector@@Base+0x95>
  404f8f:	add    esi,0x1
  404f92:	lea    rax,[rbx+0x68]
  404f96:	mov    rdi,QWORD PTR [rbx+0x40]
  404f9a:	mov    edx,DWORD PTR [rbx+0x28]
  404f9d:	add    rdx,rsi
  404fa0:	mov    ecx,0x1
  404fa5:	mov    r8d,0x1
  404fab:	mov    rsi,rax
  404fae:	call   QWORD PTR [rbx+0x50]
  404fb1:	test   eax,eax
  404fb3:	je     404fb9 <flatcc_builder_extend_vector@@Base+0x69>
  404fb5:	xor    eax,eax
  404fb7:	jmp    404fe8 <flatcc_builder_extend_vector@@Base+0x98>
  404fb9:	mov    ecx,DWORD PTR [rbx+0x28]
  404fbc:	mov    rax,rcx
  404fbf:	add    rax,QWORD PTR [rbx+0x68]
  404fc3:	mov    QWORD PTR [rbx+0x18],rax
  404fc7:	mov    edx,DWORD PTR [rbx+0x70]
  404fca:	sub    edx,ecx
  404fcc:	cmp    edx,0xfffffffc
  404fcf:	mov    ecx,0xfffffffc
  404fd4:	cmovb  ecx,edx
  404fd7:	mov    DWORD PTR [rbx+0x24],ecx
  404fda:	mov    rcx,QWORD PTR [rbx+0x30]
  404fde:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404fe5:	add    rax,r14
  404fe8:	add    rsp,0x8
  404fec:	pop    rbx
  404fed:	pop    r14
  404fef:	ret    
  404ff0:	lea    rdi,[rip+0x59f4]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  404ff7:	lea    rsi,[rip+0x4924]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  404ffe:	lea    rcx,[rip+0x5a01]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  405005:	mov    edx,0x37c
  40500a:	call   403090 <__assert_fail@plt>
  40500f:	nop

0000000000405010 <flatcc_builder_vector_push@@Base>:
  405010:	push   r15
  405012:	push   r14
  405014:	push   r13
  405016:	push   r12
  405018:	push   rbx
  405019:	mov    rax,QWORD PTR [rdi+0x30]
  40501d:	movzx  ecx,WORD PTR [rax+0xe]
  405021:	cmp    ecx,0x4
  405024:	jne    4050d9 <flatcc_builder_vector_push@@Base+0xc9>
  40502a:	mov    ecx,DWORD PTR [rax+0x14]
  40502d:	cmp    ecx,DWORD PTR [rax+0x18]
  405030:	ja     4050f8 <flatcc_builder_vector_push@@Base+0xe8>
  405036:	mov    r14,rsi
  405039:	mov    rbx,rdi
  40503c:	add    ecx,0x1
  40503f:	mov    DWORD PTR [rax+0x14],ecx
  405042:	mov    rax,QWORD PTR [rdi+0x30]
  405046:	mov    r15d,DWORD PTR [rax+0x10]
  40504a:	mov    r13d,DWORD PTR [rdi+0x20]
  40504e:	lea    eax,[r15+r13*1]
  405052:	mov    DWORD PTR [rdi+0x20],eax
  405055:	cmp    eax,DWORD PTR [rdi+0x24]
  405058:	jae    405065 <flatcc_builder_vector_push@@Base+0x55>
  40505a:	mov    r12,QWORD PTR [rbx+0x18]
  40505e:	add    r12,r13
  405061:	jne    4050be <flatcc_builder_vector_push@@Base+0xae>
  405063:	jmp    405088 <flatcc_builder_vector_push@@Base+0x78>
  405065:	add    eax,0x1
  405068:	lea    rsi,[rbx+0x68]
  40506c:	mov    rdi,QWORD PTR [rbx+0x40]
  405070:	mov    edx,DWORD PTR [rbx+0x28]
  405073:	add    rdx,rax
  405076:	mov    ecx,0x1
  40507b:	mov    r8d,0x1
  405081:	call   QWORD PTR [rbx+0x50]
  405084:	test   eax,eax
  405086:	je     40508d <flatcc_builder_vector_push@@Base+0x7d>
  405088:	xor    r12d,r12d
  40508b:	jmp    4050cc <flatcc_builder_vector_push@@Base+0xbc>
  40508d:	mov    eax,DWORD PTR [rbx+0x28]
  405090:	mov    r12,rax
  405093:	add    r12,QWORD PTR [rbx+0x68]
  405097:	mov    QWORD PTR [rbx+0x18],r12
  40509b:	mov    ecx,DWORD PTR [rbx+0x70]
  40509e:	sub    ecx,eax
  4050a0:	cmp    ecx,0xfffffffc
  4050a3:	mov    eax,0xfffffffc
  4050a8:	cmovb  eax,ecx
  4050ab:	mov    DWORD PTR [rbx+0x24],eax
  4050ae:	mov    rax,QWORD PTR [rbx+0x30]
  4050b2:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4050b9:	add    r12,r13
  4050bc:	je     405088 <flatcc_builder_vector_push@@Base+0x78>
  4050be:	mov    rdi,r12
  4050c1:	mov    rsi,r14
  4050c4:	mov    rdx,r15
  4050c7:	call   4030e0 <memcpy@plt>
  4050cc:	mov    rax,r12
  4050cf:	pop    rbx
  4050d0:	pop    r12
  4050d2:	pop    r13
  4050d4:	pop    r14
  4050d6:	pop    r15
  4050d8:	ret    
  4050d9:	lea    rdi,[rip+0x4b7f]        # 409c5f <flatcc_builder_padding_base@@Base+0x5cf>
  4050e0:	lea    rsi,[rip+0x483b]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4050e7:	lea    rcx,[rip+0x4b9d]        # 409c8b <flatcc_builder_padding_base@@Base+0x5fb>
  4050ee:	mov    edx,0x38b
  4050f3:	call   403090 <__assert_fail@plt>
  4050f8:	lea    rdi,[rip+0x4bcf]        # 409cce <flatcc_builder_padding_base@@Base+0x63e>
  4050ff:	lea    rsi,[rip+0x481c]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405106:	lea    rcx,[rip+0x4b7e]        # 409c8b <flatcc_builder_padding_base@@Base+0x5fb>
  40510d:	mov    edx,0x38c
  405112:	call   403090 <__assert_fail@plt>
  405117:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405120 <flatcc_builder_append_vector@@Base>:
  405120:	push   r15
  405122:	push   r14
  405124:	push   r13
  405126:	push   r12
  405128:	push   rbx
  405129:	mov    rax,QWORD PTR [rdi+0x30]
  40512d:	movzx  ecx,WORD PTR [rax+0xe]
  405131:	cmp    ecx,0x4
  405134:	jne    405212 <flatcc_builder_append_vector@@Base+0xf2>
  40513a:	mov    r15,rdx
  40513d:	mov    ecx,DWORD PTR [rax+0x14]
  405140:	add    ecx,r15d
  405143:	jb     4051f3 <flatcc_builder_append_vector@@Base+0xd3>
  405149:	cmp    ecx,DWORD PTR [rax+0x18]
  40514c:	ja     4051f3 <flatcc_builder_append_vector@@Base+0xd3>
  405152:	mov    r14,rsi
  405155:	mov    rbx,rdi
  405158:	mov    DWORD PTR [rax+0x14],ecx
  40515b:	mov    rax,QWORD PTR [rdi+0x30]
  40515f:	imul   r15d,DWORD PTR [rax+0x10]
  405164:	mov    r13d,DWORD PTR [rdi+0x20]
  405168:	lea    eax,[r15+r13*1]
  40516c:	mov    DWORD PTR [rdi+0x20],eax
  40516f:	cmp    eax,DWORD PTR [rdi+0x24]
  405172:	jae    40517f <flatcc_builder_append_vector@@Base+0x5f>
  405174:	mov    r12,QWORD PTR [rbx+0x18]
  405178:	add    r12,r13
  40517b:	jne    4051d8 <flatcc_builder_append_vector@@Base+0xb8>
  40517d:	jmp    4051a2 <flatcc_builder_append_vector@@Base+0x82>
  40517f:	add    eax,0x1
  405182:	lea    rsi,[rbx+0x68]
  405186:	mov    rdi,QWORD PTR [rbx+0x40]
  40518a:	mov    edx,DWORD PTR [rbx+0x28]
  40518d:	add    rdx,rax
  405190:	mov    ecx,0x1
  405195:	mov    r8d,0x1
  40519b:	call   QWORD PTR [rbx+0x50]
  40519e:	test   eax,eax
  4051a0:	je     4051a7 <flatcc_builder_append_vector@@Base+0x87>
  4051a2:	xor    r12d,r12d
  4051a5:	jmp    4051e6 <flatcc_builder_append_vector@@Base+0xc6>
  4051a7:	mov    eax,DWORD PTR [rbx+0x28]
  4051aa:	mov    r12,rax
  4051ad:	add    r12,QWORD PTR [rbx+0x68]
  4051b1:	mov    QWORD PTR [rbx+0x18],r12
  4051b5:	mov    ecx,DWORD PTR [rbx+0x70]
  4051b8:	sub    ecx,eax
  4051ba:	cmp    ecx,0xfffffffc
  4051bd:	mov    eax,0xfffffffc
  4051c2:	cmovb  eax,ecx
  4051c5:	mov    DWORD PTR [rbx+0x24],eax
  4051c8:	mov    rax,QWORD PTR [rbx+0x30]
  4051cc:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4051d3:	add    r12,r13
  4051d6:	je     4051a2 <flatcc_builder_append_vector@@Base+0x82>
  4051d8:	mov    edx,r15d
  4051db:	mov    rdi,r12
  4051de:	mov    rsi,r14
  4051e1:	call   4030e0 <memcpy@plt>
  4051e6:	mov    rax,r12
  4051e9:	pop    rbx
  4051ea:	pop    r12
  4051ec:	pop    r13
  4051ee:	pop    r14
  4051f0:	pop    r15
  4051f2:	ret    
  4051f3:	lea    rdi,[rip+0x57f1]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4051fa:	lea    rsi,[rip+0x4721]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405201:	lea    rcx,[rip+0x57fe]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  405208:	mov    edx,0x37c
  40520d:	call   403090 <__assert_fail@plt>
  405212:	lea    rdi,[rip+0x4a46]        # 409c5f <flatcc_builder_padding_base@@Base+0x5cf>
  405219:	lea    rsi,[rip+0x4702]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405220:	lea    rcx,[rip+0x4ae4]        # 409d0b <flatcc_builder_padding_base@@Base+0x67b>
  405227:	mov    edx,0x393
  40522c:	call   403090 <__assert_fail@plt>
  405231:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40523b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405240 <flatcc_builder_extend_offset_vector@@Base>:
  405240:	push   r14
  405242:	push   rbx
  405243:	push   rax
  405244:	mov    rax,QWORD PTR [rdi+0x30]
  405248:	mov    ecx,DWORD PTR [rax+0x14]
  40524b:	add    ecx,esi
  40524d:	jb     4052d5 <flatcc_builder_extend_offset_vector@@Base+0x95>
  405253:	cmp    ecx,0x40000000
  405259:	jae    4052d5 <flatcc_builder_extend_offset_vector@@Base+0x95>
  40525b:	mov    rbx,rdi
  40525e:	mov    DWORD PTR [rax+0x14],ecx
  405261:	mov    r14d,DWORD PTR [rdi+0x20]
  405265:	lea    eax,[r14+rsi*4]
  405269:	mov    DWORD PTR [rdi+0x20],eax
  40526c:	cmp    eax,DWORD PTR [rdi+0x24]
  40526f:	jae    405277 <flatcc_builder_extend_offset_vector@@Base+0x37>
  405271:	mov    rax,QWORD PTR [rbx+0x18]
  405275:	jmp    4052ca <flatcc_builder_extend_offset_vector@@Base+0x8a>
  405277:	add    eax,0x1
  40527a:	lea    rsi,[rbx+0x68]
  40527e:	mov    rdi,QWORD PTR [rbx+0x40]
  405282:	mov    edx,DWORD PTR [rbx+0x28]
  405285:	add    rdx,rax
  405288:	mov    ecx,0x1
  40528d:	mov    r8d,0x1
  405293:	call   QWORD PTR [rbx+0x50]
  405296:	test   eax,eax
  405298:	je     40529e <flatcc_builder_extend_offset_vector@@Base+0x5e>
  40529a:	xor    eax,eax
  40529c:	jmp    4052cd <flatcc_builder_extend_offset_vector@@Base+0x8d>
  40529e:	mov    ecx,DWORD PTR [rbx+0x28]
  4052a1:	mov    rax,rcx
  4052a4:	add    rax,QWORD PTR [rbx+0x68]
  4052a8:	mov    QWORD PTR [rbx+0x18],rax
  4052ac:	mov    edx,DWORD PTR [rbx+0x70]
  4052af:	sub    edx,ecx
  4052b1:	cmp    edx,0xfffffffc
  4052b4:	mov    ecx,0xfffffffc
  4052b9:	cmovb  ecx,edx
  4052bc:	mov    DWORD PTR [rbx+0x24],ecx
  4052bf:	mov    rcx,QWORD PTR [rbx+0x30]
  4052c3:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4052ca:	add    rax,r14
  4052cd:	add    rsp,0x8
  4052d1:	pop    rbx
  4052d2:	pop    r14
  4052d4:	ret    
  4052d5:	lea    rdi,[rip+0x570f]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4052dc:	lea    rsi,[rip+0x463f]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4052e3:	lea    rcx,[rip+0x571c]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  4052ea:	mov    edx,0x37c
  4052ef:	call   403090 <__assert_fail@plt>
  4052f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4052fe:	xchg   ax,ax

0000000000405300 <flatcc_builder_offset_vector_push@@Base>:
  405300:	push   rbp
  405301:	push   r14
  405303:	push   rbx
  405304:	mov    rax,QWORD PTR [rdi+0x30]
  405308:	movzx  ecx,WORD PTR [rax+0xe]
  40530c:	cmp    ecx,0x5
  40530f:	jne    4053a5 <flatcc_builder_offset_vector_push@@Base+0xa5>
  405315:	mov    ecx,DWORD PTR [rax+0x14]
  405318:	cmp    ecx,0x3fffffff
  40531e:	je     405368 <flatcc_builder_offset_vector_push@@Base+0x68>
  405320:	mov    r14d,esi
  405323:	mov    rbx,rdi
  405326:	add    ecx,0x1
  405329:	mov    DWORD PTR [rax+0x14],ecx
  40532c:	mov    ebp,DWORD PTR [rdi+0x20]
  40532f:	lea    eax,[rbp+0x4]
  405332:	mov    DWORD PTR [rdi+0x20],eax
  405335:	cmp    eax,DWORD PTR [rdi+0x24]
  405338:	jae    405345 <flatcc_builder_offset_vector_push@@Base+0x45>
  40533a:	mov    rax,QWORD PTR [rbx+0x18]
  40533e:	add    rax,rbp
  405341:	jne    40539d <flatcc_builder_offset_vector_push@@Base+0x9d>
  405343:	jmp    405368 <flatcc_builder_offset_vector_push@@Base+0x68>
  405345:	lea    eax,[rbp+0x5]
  405348:	lea    rsi,[rbx+0x68]
  40534c:	mov    rdi,QWORD PTR [rbx+0x40]
  405350:	mov    edx,DWORD PTR [rbx+0x28]
  405353:	add    rdx,rax
  405356:	mov    ecx,0x1
  40535b:	mov    r8d,0x1
  405361:	call   QWORD PTR [rbx+0x50]
  405364:	test   eax,eax
  405366:	je     40536c <flatcc_builder_offset_vector_push@@Base+0x6c>
  405368:	xor    eax,eax
  40536a:	jmp    4053a0 <flatcc_builder_offset_vector_push@@Base+0xa0>
  40536c:	mov    ecx,DWORD PTR [rbx+0x28]
  40536f:	mov    rax,rcx
  405372:	add    rax,QWORD PTR [rbx+0x68]
  405376:	mov    QWORD PTR [rbx+0x18],rax
  40537a:	mov    edx,DWORD PTR [rbx+0x70]
  40537d:	sub    edx,ecx
  40537f:	cmp    edx,0xfffffffc
  405382:	mov    ecx,0xfffffffc
  405387:	cmovb  ecx,edx
  40538a:	mov    DWORD PTR [rbx+0x24],ecx
  40538d:	mov    rcx,QWORD PTR [rbx+0x30]
  405391:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405398:	add    rax,rbp
  40539b:	je     405368 <flatcc_builder_offset_vector_push@@Base+0x68>
  40539d:	mov    DWORD PTR [rax],r14d
  4053a0:	pop    rbx
  4053a1:	pop    r14
  4053a3:	pop    rbp
  4053a4:	ret    
  4053a5:	lea    rdi,[rip+0x49ac]        # 409d58 <flatcc_builder_padding_base@@Base+0x6c8>
  4053ac:	lea    rsi,[rip+0x456f]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4053b3:	lea    rcx,[rip+0x49d1]        # 409d8b <flatcc_builder_padding_base@@Base+0x6fb>
  4053ba:	mov    edx,0x3a6
  4053bf:	call   403090 <__assert_fail@plt>
  4053c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053ce:	xchg   ax,ax

00000000004053d0 <flatcc_builder_append_offset_vector@@Base>:
  4053d0:	push   r15
  4053d2:	push   r14
  4053d4:	push   r13
  4053d6:	push   r12
  4053d8:	push   rbx
  4053d9:	mov    rax,QWORD PTR [rdi+0x30]
  4053dd:	movzx  ecx,WORD PTR [rax+0xe]
  4053e1:	cmp    ecx,0x5
  4053e4:	jne    4054c1 <flatcc_builder_append_offset_vector@@Base+0xf1>
  4053ea:	mov    r15,rdx
  4053ed:	mov    ecx,DWORD PTR [rax+0x14]
  4053f0:	add    ecx,r15d
  4053f3:	jb     4054a2 <flatcc_builder_append_offset_vector@@Base+0xd2>
  4053f9:	cmp    ecx,0x40000000
  4053ff:	jae    4054a2 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405405:	mov    r14,rsi
  405408:	mov    rbx,rdi
  40540b:	mov    DWORD PTR [rax+0x14],ecx
  40540e:	mov    r13d,DWORD PTR [rdi+0x20]
  405412:	lea    eax,[r13+r15*4+0x0]
  405417:	mov    DWORD PTR [rdi+0x20],eax
  40541a:	cmp    eax,DWORD PTR [rdi+0x24]
  40541d:	jae    40542a <flatcc_builder_append_offset_vector@@Base+0x5a>
  40541f:	mov    r12,QWORD PTR [rbx+0x18]
  405423:	add    r12,r13
  405426:	jne    405483 <flatcc_builder_append_offset_vector@@Base+0xb3>
  405428:	jmp    40544d <flatcc_builder_append_offset_vector@@Base+0x7d>
  40542a:	add    eax,0x1
  40542d:	lea    rsi,[rbx+0x68]
  405431:	mov    rdi,QWORD PTR [rbx+0x40]
  405435:	mov    edx,DWORD PTR [rbx+0x28]
  405438:	add    rdx,rax
  40543b:	mov    ecx,0x1
  405440:	mov    r8d,0x1
  405446:	call   QWORD PTR [rbx+0x50]
  405449:	test   eax,eax
  40544b:	je     405452 <flatcc_builder_append_offset_vector@@Base+0x82>
  40544d:	xor    r12d,r12d
  405450:	jmp    405495 <flatcc_builder_append_offset_vector@@Base+0xc5>
  405452:	mov    eax,DWORD PTR [rbx+0x28]
  405455:	mov    r12,rax
  405458:	add    r12,QWORD PTR [rbx+0x68]
  40545c:	mov    QWORD PTR [rbx+0x18],r12
  405460:	mov    ecx,DWORD PTR [rbx+0x70]
  405463:	sub    ecx,eax
  405465:	cmp    ecx,0xfffffffc
  405468:	mov    eax,0xfffffffc
  40546d:	cmovb  eax,ecx
  405470:	mov    DWORD PTR [rbx+0x24],eax
  405473:	mov    rax,QWORD PTR [rbx+0x30]
  405477:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40547e:	add    r12,r13
  405481:	je     40544d <flatcc_builder_append_offset_vector@@Base+0x7d>
  405483:	shl    r15d,0x2
  405487:	mov    edx,r15d
  40548a:	mov    rdi,r12
  40548d:	mov    rsi,r14
  405490:	call   4030e0 <memcpy@plt>
  405495:	mov    rax,r12
  405498:	pop    rbx
  405499:	pop    r12
  40549b:	pop    r13
  40549d:	pop    r14
  40549f:	pop    r15
  4054a1:	ret    
  4054a2:	lea    rdi,[rip+0x5542]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4054a9:	lea    rsi,[rip+0x4472]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4054b0:	lea    rcx,[rip+0x554f]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  4054b7:	mov    edx,0x37c
  4054bc:	call   403090 <__assert_fail@plt>
  4054c1:	lea    rdi,[rip+0x4890]        # 409d58 <flatcc_builder_padding_base@@Base+0x6c8>
  4054c8:	lea    rsi,[rip+0x4453]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4054cf:	lea    rcx,[rip+0x4917]        # 409ded <flatcc_builder_padding_base@@Base+0x75d>
  4054d6:	mov    edx,0x3b4
  4054db:	call   403090 <__assert_fail@plt>

00000000004054e0 <flatcc_builder_extend_string@@Base>:
  4054e0:	push   r14
  4054e2:	push   rbx
  4054e3:	push   rax
  4054e4:	mov    rax,QWORD PTR [rdi+0x30]
  4054e8:	movzx  ecx,WORD PTR [rax+0xe]
  4054ec:	cmp    ecx,0x6
  4054ef:	jne    40557c <flatcc_builder_extend_string@@Base+0x9c>
  4054f5:	mov    ecx,DWORD PTR [rax+0x14]
  4054f8:	add    ecx,esi
  4054fa:	jb     40559b <flatcc_builder_extend_string@@Base+0xbb>
  405500:	mov    rbx,rdi
  405503:	mov    DWORD PTR [rax+0x14],ecx
  405506:	mov    r14d,DWORD PTR [rdi+0x20]
  40550a:	add    esi,r14d
  40550d:	mov    DWORD PTR [rdi+0x20],esi
  405510:	cmp    esi,DWORD PTR [rdi+0x24]
  405513:	jae    40551b <flatcc_builder_extend_string@@Base+0x3b>
  405515:	mov    rax,QWORD PTR [rbx+0x18]
  405519:	jmp    405571 <flatcc_builder_extend_string@@Base+0x91>
  40551b:	add    esi,0x1
  40551e:	lea    rax,[rbx+0x68]
  405522:	mov    rdi,QWORD PTR [rbx+0x40]
  405526:	mov    edx,DWORD PTR [rbx+0x28]
  405529:	add    rdx,rsi
  40552c:	mov    ecx,0x1
  405531:	mov    r8d,0x1
  405537:	mov    rsi,rax
  40553a:	call   QWORD PTR [rbx+0x50]
  40553d:	test   eax,eax
  40553f:	je     405545 <flatcc_builder_extend_string@@Base+0x65>
  405541:	xor    eax,eax
  405543:	jmp    405574 <flatcc_builder_extend_string@@Base+0x94>
  405545:	mov    ecx,DWORD PTR [rbx+0x28]
  405548:	mov    rax,rcx
  40554b:	add    rax,QWORD PTR [rbx+0x68]
  40554f:	mov    QWORD PTR [rbx+0x18],rax
  405553:	mov    edx,DWORD PTR [rbx+0x70]
  405556:	sub    edx,ecx
  405558:	cmp    edx,0xfffffffc
  40555b:	mov    ecx,0xfffffffc
  405560:	cmovb  ecx,edx
  405563:	mov    DWORD PTR [rbx+0x24],ecx
  405566:	mov    rcx,QWORD PTR [rbx+0x30]
  40556a:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405571:	add    rax,r14
  405574:	add    rsp,0x8
  405578:	pop    rbx
  405579:	pop    r14
  40557b:	ret    
  40557c:	lea    rdi,[rip+0x48de]        # 409e61 <flatcc_builder_padding_base@@Base+0x7d1>
  405583:	lea    rsi,[rip+0x4398]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40558a:	lea    rcx,[rip+0x48fc]        # 409e8d <flatcc_builder_padding_base@@Base+0x7fd>
  405591:	mov    edx,0x3bd
  405596:	call   403090 <__assert_fail@plt>
  40559b:	lea    rdi,[rip+0x5449]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4055a2:	lea    rsi,[rip+0x4379]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4055a9:	lea    rcx,[rip+0x5456]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  4055b0:	mov    edx,0x37c
  4055b5:	call   403090 <__assert_fail@plt>
  4055ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000004055c0 <flatcc_builder_append_string@@Base>:
  4055c0:	push   r15
  4055c2:	push   r14
  4055c4:	push   r13
  4055c6:	push   r12
  4055c8:	push   rbx
  4055c9:	mov    rax,QWORD PTR [rdi+0x30]
  4055cd:	movzx  ecx,WORD PTR [rax+0xe]
  4055d1:	cmp    ecx,0x6
  4055d4:	jne    405681 <flatcc_builder_append_string@@Base+0xc1>
  4055da:	mov    r15,rdx
  4055dd:	mov    ecx,DWORD PTR [rax+0x14]
  4055e0:	add    ecx,r15d
  4055e3:	jb     4056a0 <flatcc_builder_append_string@@Base+0xe0>
  4055e9:	mov    r14,rsi
  4055ec:	mov    rbx,rdi
  4055ef:	mov    DWORD PTR [rax+0x14],ecx
  4055f2:	mov    r13d,DWORD PTR [rdi+0x20]
  4055f6:	lea    eax,[r15+r13*1]
  4055fa:	mov    DWORD PTR [rdi+0x20],eax
  4055fd:	cmp    eax,DWORD PTR [rdi+0x24]
  405600:	jae    40560d <flatcc_builder_append_string@@Base+0x4d>
  405602:	mov    r12,QWORD PTR [rbx+0x18]
  405606:	add    r12,r13
  405609:	jne    405666 <flatcc_builder_append_string@@Base+0xa6>
  40560b:	jmp    405630 <flatcc_builder_append_string@@Base+0x70>
  40560d:	add    eax,0x1
  405610:	lea    rsi,[rbx+0x68]
  405614:	mov    rdi,QWORD PTR [rbx+0x40]
  405618:	mov    edx,DWORD PTR [rbx+0x28]
  40561b:	add    rdx,rax
  40561e:	mov    ecx,0x1
  405623:	mov    r8d,0x1
  405629:	call   QWORD PTR [rbx+0x50]
  40562c:	test   eax,eax
  40562e:	je     405635 <flatcc_builder_append_string@@Base+0x75>
  405630:	xor    r12d,r12d
  405633:	jmp    405674 <flatcc_builder_append_string@@Base+0xb4>
  405635:	mov    eax,DWORD PTR [rbx+0x28]
  405638:	mov    r12,rax
  40563b:	add    r12,QWORD PTR [rbx+0x68]
  40563f:	mov    QWORD PTR [rbx+0x18],r12
  405643:	mov    ecx,DWORD PTR [rbx+0x70]
  405646:	sub    ecx,eax
  405648:	cmp    ecx,0xfffffffc
  40564b:	mov    eax,0xfffffffc
  405650:	cmovb  eax,ecx
  405653:	mov    DWORD PTR [rbx+0x24],eax
  405656:	mov    rax,QWORD PTR [rbx+0x30]
  40565a:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405661:	add    r12,r13
  405664:	je     405630 <flatcc_builder_append_string@@Base+0x70>
  405666:	mov    edx,r15d
  405669:	mov    rdi,r12
  40566c:	mov    rsi,r14
  40566f:	call   4030e0 <memcpy@plt>
  405674:	mov    rax,r12
  405677:	pop    rbx
  405678:	pop    r12
  40567a:	pop    r13
  40567c:	pop    r14
  40567e:	pop    r15
  405680:	ret    
  405681:	lea    rdi,[rip+0x47d9]        # 409e61 <flatcc_builder_padding_base@@Base+0x7d1>
  405688:	lea    rsi,[rip+0x4293]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40568f:	lea    rcx,[rip+0x4836]        # 409ecc <flatcc_builder_padding_base@@Base+0x83c>
  405696:	mov    edx,0x3c6
  40569b:	call   403090 <__assert_fail@plt>
  4056a0:	lea    rdi,[rip+0x5344]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4056a7:	lea    rsi,[rip+0x4274]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4056ae:	lea    rcx,[rip+0x5351]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  4056b5:	mov    edx,0x37c
  4056ba:	call   403090 <__assert_fail@plt>
  4056bf:	nop

00000000004056c0 <flatcc_builder_append_string_str@@Base>:
  4056c0:	push   r14
  4056c2:	push   rbx
  4056c3:	push   rax
  4056c4:	mov    rbx,rsi
  4056c7:	mov    r14,rdi
  4056ca:	mov    rdi,rsi
  4056cd:	call   403060 <strlen@plt>
  4056d2:	mov    rdi,r14
  4056d5:	mov    rsi,rbx
  4056d8:	mov    rdx,rax
  4056db:	add    rsp,0x8
  4056df:	pop    rbx
  4056e0:	pop    r14
  4056e2:	jmp    4055c0 <flatcc_builder_append_string@@Base>
  4056e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004056f0 <flatcc_builder_append_string_strn@@Base>:
  4056f0:	push   r15
  4056f2:	push   r14
  4056f4:	push   rbx
  4056f5:	mov    rbx,rdx
  4056f8:	mov    r14,rsi
  4056fb:	mov    r15,rdi
  4056fe:	xor    esi,esi
  405700:	mov    rdi,r14
  405703:	call   4030b0 <memchr@plt>
  405708:	mov    rcx,rax
  40570b:	sub    rcx,r14
  40570e:	test   rax,rax
  405711:	cmovne rbx,rcx
  405715:	mov    rdi,r15
  405718:	mov    rsi,r14
  40571b:	mov    rdx,rbx
  40571e:	pop    rbx
  40571f:	pop    r14
  405721:	pop    r15
  405723:	jmp    4055c0 <flatcc_builder_append_string@@Base>
  405728:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405730 <flatcc_builder_truncate_vector@@Base>:
  405730:	push   rax
  405731:	mov    rcx,QWORD PTR [rdi+0x30]
  405735:	movzx  edx,WORD PTR [rcx+0xe]
  405739:	cmp    edx,0x4
  40573c:	jne    405773 <flatcc_builder_truncate_vector@@Base+0x43>
  40573e:	mov    rax,rsi
  405741:	mov    edx,DWORD PTR [rcx+0x14]
  405744:	cmp    rdx,rsi
  405747:	jb     405792 <flatcc_builder_truncate_vector@@Base+0x62>
  405749:	sub    edx,eax
  40574b:	mov    DWORD PTR [rcx+0x14],edx
  40574e:	mov    rcx,QWORD PTR [rdi+0x30]
  405752:	imul   eax,DWORD PTR [rcx+0x10]
  405756:	mov    ecx,DWORD PTR [rdi+0x20]
  405759:	sub    ecx,eax
  40575b:	mov    DWORD PTR [rdi+0x20],ecx
  40575e:	add    rcx,QWORD PTR [rdi+0x18]
  405762:	xor    esi,esi
  405764:	mov    rdi,rcx
  405767:	mov    rdx,rax
  40576a:	call   4030a0 <memset@plt>
  40576f:	xor    eax,eax
  405771:	pop    rcx
  405772:	ret    
  405773:	lea    rdi,[rip+0x44e5]        # 409c5f <flatcc_builder_padding_base@@Base+0x5cf>
  40577a:	lea    rsi,[rip+0x41a1]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405781:	lea    rcx,[rip+0x4791]        # 409f19 <flatcc_builder_padding_base@@Base+0x889>
  405788:	mov    edx,0x3d9
  40578d:	call   403090 <__assert_fail@plt>
  405792:	lea    rdi,[rip+0x47bf]        # 409f58 <flatcc_builder_padding_base@@Base+0x8c8>
  405799:	lea    rsi,[rip+0x4182]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4057a0:	lea    rcx,[rip+0x4772]        # 409f19 <flatcc_builder_padding_base@@Base+0x889>
  4057a7:	mov    edx,0x3da
  4057ac:	call   403090 <__assert_fail@plt>
  4057b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4057bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004057c0 <flatcc_builder_truncate_offset_vector@@Base>:
  4057c0:	push   rax
  4057c1:	mov    rcx,QWORD PTR [rdi+0x30]
  4057c5:	movzx  edx,WORD PTR [rcx+0xe]
  4057c9:	cmp    edx,0x5
  4057cc:	jne    405800 <flatcc_builder_truncate_offset_vector@@Base+0x40>
  4057ce:	mov    rax,rsi
  4057d1:	mov    edx,DWORD PTR [rcx+0x14]
  4057d4:	sub    edx,eax
  4057d6:	jb     40581f <flatcc_builder_truncate_offset_vector@@Base+0x5f>
  4057d8:	mov    DWORD PTR [rcx+0x14],edx
  4057db:	mov    rcx,QWORD PTR [rdi+0x30]
  4057df:	imul   eax,DWORD PTR [rcx+0x10]
  4057e3:	mov    ecx,DWORD PTR [rdi+0x20]
  4057e6:	sub    ecx,eax
  4057e8:	mov    DWORD PTR [rdi+0x20],ecx
  4057eb:	add    rcx,QWORD PTR [rdi+0x18]
  4057ef:	xor    esi,esi
  4057f1:	mov    rdi,rcx
  4057f4:	mov    rdx,rax
  4057f7:	call   4030a0 <memset@plt>
  4057fc:	xor    eax,eax
  4057fe:	pop    rcx
  4057ff:	ret    
  405800:	lea    rdi,[rip+0x4551]        # 409d58 <flatcc_builder_padding_base@@Base+0x6c8>
  405807:	lea    rsi,[rip+0x4114]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40580e:	lea    rcx,[rip+0x4767]        # 409f7c <flatcc_builder_padding_base@@Base+0x8ec>
  405815:	mov    edx,0x3e2
  40581a:	call   403090 <__assert_fail@plt>
  40581f:	lea    rdi,[rip+0x479c]        # 409fc2 <flatcc_builder_padding_base@@Base+0x932>
  405826:	lea    rsi,[rip+0x40f5]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40582d:	lea    rcx,[rip+0x4748]        # 409f7c <flatcc_builder_padding_base@@Base+0x8ec>
  405834:	mov    edx,0x3e3
  405839:	call   403090 <__assert_fail@plt>
  40583e:	xchg   ax,ax

0000000000405840 <flatcc_builder_truncate_string@@Base>:
  405840:	push   rax
  405841:	mov    rax,QWORD PTR [rdi+0x30]
  405845:	movzx  ecx,WORD PTR [rax+0xe]
  405849:	cmp    ecx,0x6
  40584c:	jne    405877 <flatcc_builder_truncate_string@@Base+0x37>
  40584e:	mov    ecx,DWORD PTR [rax+0x14]
  405851:	cmp    rcx,rsi
  405854:	jb     405896 <flatcc_builder_truncate_string@@Base+0x56>
  405856:	sub    ecx,esi
  405858:	mov    DWORD PTR [rax+0x14],ecx
  40585b:	mov    eax,DWORD PTR [rdi+0x20]
  40585e:	sub    eax,esi
  405860:	mov    DWORD PTR [rdi+0x20],eax
  405863:	add    rax,QWORD PTR [rdi+0x18]
  405867:	mov    edx,esi
  405869:	xor    esi,esi
  40586b:	mov    rdi,rax
  40586e:	call   4030a0 <memset@plt>
  405873:	xor    eax,eax
  405875:	pop    rcx
  405876:	ret    
  405877:	lea    rdi,[rip+0x45e3]        # 409e61 <flatcc_builder_padding_base@@Base+0x7d1>
  40587e:	lea    rsi,[rip+0x409d]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405885:	lea    rcx,[rip+0x4771]        # 409ffd <flatcc_builder_padding_base@@Base+0x96d>
  40588c:	mov    edx,0x3eb
  405891:	call   403090 <__assert_fail@plt>
  405896:	lea    rdi,[rip+0x479f]        # 40a03c <flatcc_builder_padding_base@@Base+0x9ac>
  40589d:	lea    rsi,[rip+0x407e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4058a4:	lea    rcx,[rip+0x4752]        # 409ffd <flatcc_builder_padding_base@@Base+0x96d>
  4058ab:	mov    edx,0x3ec
  4058b0:	call   403090 <__assert_fail@plt>
  4058b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4058bf:	nop

00000000004058c0 <flatcc_builder_start_vector@@Base>:
  4058c0:	push   r15
  4058c2:	push   r14
  4058c4:	push   rbx
  4058c5:	mov    r14,rcx
  4058c8:	mov    r15,rsi
  4058cb:	mov    rbx,rdi
  4058ce:	cmp    edx,0x4
  4058d1:	mov    esi,0x4
  4058d6:	cmova  esi,edx
  4058d9:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  4058de:	mov    ecx,eax
  4058e0:	mov    eax,0xffffffff
  4058e5:	test   ecx,ecx
  4058e7:	jne    405935 <flatcc_builder_start_vector@@Base+0x75>
  4058e9:	mov    rax,QWORD PTR [rbx+0x30]
  4058ed:	mov    DWORD PTR [rax+0x10],r15d
  4058f1:	mov    rax,QWORD PTR [rbx+0x30]
  4058f5:	mov    DWORD PTR [rax+0x14],0x0
  4058fc:	mov    rax,QWORD PTR [rbx+0x30]
  405900:	mov    DWORD PTR [rax+0x18],r14d
  405904:	mov    rax,QWORD PTR [rbx+0x30]
  405908:	mov    WORD PTR [rax+0xe],0x4
  40590e:	mov    ecx,DWORD PTR [rbx+0x28]
  405911:	mov    edx,DWORD PTR [rbx+0x70]
  405914:	sub    edx,ecx
  405916:	add    rcx,QWORD PTR [rbx+0x68]
  40591a:	mov    QWORD PTR [rbx+0x18],rcx
  40591e:	cmp    edx,0xfffffffc
  405921:	mov    ecx,0xfffffffc
  405926:	cmovb  ecx,edx
  405929:	mov    DWORD PTR [rbx+0x24],ecx
  40592c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405933:	xor    eax,eax
  405935:	pop    rbx
  405936:	pop    r14
  405938:	pop    r15
  40593a:	ret    
  40593b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405940 <flatcc_builder_start_offset_vector@@Base>:
  405940:	push   rbx
  405941:	mov    rbx,rdi
  405944:	mov    esi,0x4
  405949:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  40594e:	mov    ecx,eax
  405950:	mov    eax,0xffffffff
  405955:	test   ecx,ecx
  405957:	je     40595b <flatcc_builder_start_offset_vector@@Base+0x1b>
  405959:	pop    rbx
  40595a:	ret    
  40595b:	mov    rax,QWORD PTR [rbx+0x30]
  40595f:	mov    DWORD PTR [rax+0x10],0x4
  405966:	mov    rax,QWORD PTR [rbx+0x30]
  40596a:	mov    DWORD PTR [rax+0x14],0x0
  405971:	mov    rax,QWORD PTR [rbx+0x30]
  405975:	mov    WORD PTR [rax+0xe],0x5
  40597b:	mov    ecx,DWORD PTR [rbx+0x28]
  40597e:	mov    edx,DWORD PTR [rbx+0x70]
  405981:	sub    edx,ecx
  405983:	add    rcx,QWORD PTR [rbx+0x68]
  405987:	mov    QWORD PTR [rbx+0x18],rcx
  40598b:	cmp    edx,0xfffffffc
  40598e:	mov    ecx,0xfffffffc
  405993:	cmovb  ecx,edx
  405996:	mov    DWORD PTR [rbx+0x24],ecx
  405999:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4059a0:	xor    eax,eax
  4059a2:	pop    rbx
  4059a3:	ret    
  4059a4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4059ae:	xchg   ax,ax

00000000004059b0 <flatcc_builder_create_offset_vector@@Base>:
  4059b0:	push   r15
  4059b2:	push   r14
  4059b4:	push   r12
  4059b6:	push   rbx
  4059b7:	push   rax
  4059b8:	mov    r14,rdx
  4059bb:	mov    r15,rsi
  4059be:	mov    rbx,rdi
  4059c1:	mov    esi,0x4
  4059c6:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  4059cb:	test   eax,eax
  4059cd:	je     4059dd <flatcc_builder_create_offset_vector@@Base+0x2d>
  4059cf:	xor    eax,eax
  4059d1:	add    rsp,0x8
  4059d5:	pop    rbx
  4059d6:	pop    r12
  4059d8:	pop    r14
  4059da:	pop    r15
  4059dc:	ret    
  4059dd:	mov    rax,QWORD PTR [rbx+0x30]
  4059e1:	mov    DWORD PTR [rax+0x10],0x4
  4059e8:	mov    rax,QWORD PTR [rbx+0x30]
  4059ec:	mov    DWORD PTR [rax+0x14],0x0
  4059f3:	mov    rax,QWORD PTR [rbx+0x30]
  4059f7:	mov    WORD PTR [rax+0xe],0x5
  4059fd:	mov    ecx,DWORD PTR [rbx+0x28]
  405a00:	mov    edx,DWORD PTR [rbx+0x70]
  405a03:	sub    edx,ecx
  405a05:	add    rcx,QWORD PTR [rbx+0x68]
  405a09:	mov    QWORD PTR [rbx+0x18],rcx
  405a0d:	cmp    edx,0xfffffffc
  405a10:	mov    ecx,0xfffffffc
  405a15:	cmovb  ecx,edx
  405a18:	mov    DWORD PTR [rbx+0x24],ecx
  405a1b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a22:	mov    ecx,DWORD PTR [rax+0x14]
  405a25:	add    ecx,r14d
  405a28:	jb     405ad9 <flatcc_builder_create_offset_vector@@Base+0x129>
  405a2e:	cmp    ecx,0x40000000
  405a34:	jae    405ad9 <flatcc_builder_create_offset_vector@@Base+0x129>
  405a3a:	mov    DWORD PTR [rax+0x14],ecx
  405a3d:	mov    r12d,DWORD PTR [rbx+0x20]
  405a41:	lea    eax,[r12+r14*4]
  405a45:	mov    DWORD PTR [rbx+0x20],eax
  405a48:	cmp    eax,DWORD PTR [rbx+0x24]
  405a4b:	jae    405a5b <flatcc_builder_create_offset_vector@@Base+0xab>
  405a4d:	mov    rdi,QWORD PTR [rbx+0x18]
  405a51:	add    rdi,r12
  405a54:	jne    405ab7 <flatcc_builder_create_offset_vector@@Base+0x107>
  405a56:	jmp    4059cf <flatcc_builder_create_offset_vector@@Base+0x1f>
  405a5b:	add    eax,0x1
  405a5e:	lea    rsi,[rbx+0x68]
  405a62:	mov    rdi,QWORD PTR [rbx+0x40]
  405a66:	mov    edx,DWORD PTR [rbx+0x28]
  405a69:	add    rdx,rax
  405a6c:	mov    ecx,0x1
  405a71:	mov    r8d,0x1
  405a77:	call   QWORD PTR [rbx+0x50]
  405a7a:	test   eax,eax
  405a7c:	jne    4059cf <flatcc_builder_create_offset_vector@@Base+0x1f>
  405a82:	mov    eax,DWORD PTR [rbx+0x28]
  405a85:	mov    rdi,rax
  405a88:	add    rdi,QWORD PTR [rbx+0x68]
  405a8c:	mov    QWORD PTR [rbx+0x18],rdi
  405a90:	mov    ecx,DWORD PTR [rbx+0x70]
  405a93:	sub    ecx,eax
  405a95:	cmp    ecx,0xfffffffc
  405a98:	mov    eax,0xfffffffc
  405a9d:	cmovb  eax,ecx
  405aa0:	mov    DWORD PTR [rbx+0x24],eax
  405aa3:	mov    rax,QWORD PTR [rbx+0x30]
  405aa7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405aae:	add    rdi,r12
  405ab1:	je     4059cf <flatcc_builder_create_offset_vector@@Base+0x1f>
  405ab7:	shl    r14,0x2
  405abb:	mov    rsi,r15
  405abe:	mov    rdx,r14
  405ac1:	call   4030e0 <memcpy@plt>
  405ac6:	mov    rdi,rbx
  405ac9:	add    rsp,0x8
  405acd:	pop    rbx
  405ace:	pop    r12
  405ad0:	pop    r14
  405ad2:	pop    r15
  405ad4:	jmp    405b00 <flatcc_builder_end_offset_vector@@Base>
  405ad9:	lea    rdi,[rip+0x4f0b]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  405ae0:	lea    rsi,[rip+0x3e3b]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405ae7:	lea    rcx,[rip+0x4f18]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  405aee:	mov    edx,0x37c
  405af3:	call   403090 <__assert_fail@plt>
  405af8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405b00 <flatcc_builder_end_offset_vector@@Base>:
  405b00:	push   rbp
  405b01:	push   rbx
  405b02:	push   rax
  405b03:	mov    rax,QWORD PTR [rdi+0x30]
  405b07:	movzx  ecx,WORD PTR [rax+0xe]
  405b0b:	cmp    ecx,0x5
  405b0e:	jne    405b9d <flatcc_builder_end_offset_vector@@Base+0x9d>
  405b14:	mov    rbx,rdi
  405b17:	mov    rsi,QWORD PTR [rdi+0x18]
  405b1b:	mov    edx,DWORD PTR [rax+0x14]
  405b1e:	xor    ecx,ecx
  405b20:	call   406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405b25:	mov    ebp,eax
  405b27:	test   eax,eax
  405b29:	je     405b94 <flatcc_builder_end_offset_vector@@Base+0x94>
  405b2b:	mov    rdi,QWORD PTR [rbx+0x18]
  405b2f:	mov    edx,DWORD PTR [rbx+0x20]
  405b32:	xor    esi,esi
  405b34:	call   4030a0 <memset@plt>
  405b39:	mov    rax,QWORD PTR [rbx+0x30]
  405b3d:	mov    ecx,DWORD PTR [rax+0x8]
  405b40:	mov    DWORD PTR [rbx+0x20],ecx
  405b43:	mov    ecx,DWORD PTR [rax]
  405b45:	mov    DWORD PTR [rbx+0x28],ecx
  405b48:	mov    edx,DWORD PTR [rax+0x4]
  405b4b:	mov    rsi,rcx
  405b4e:	add    rsi,QWORD PTR [rbx+0x68]
  405b52:	mov    QWORD PTR [rbx+0x18],rsi
  405b56:	mov    esi,DWORD PTR [rbx+0x70]
  405b59:	sub    esi,ecx
  405b5b:	cmp    esi,edx
  405b5d:	cmova  esi,edx
  405b60:	mov    DWORD PTR [rbx+0x24],esi
  405b63:	movzx  ecx,WORD PTR [rbx+0xea]
  405b6a:	cmp    WORD PTR [rbx+0xe8],cx
  405b71:	jae    405b7a <flatcc_builder_end_offset_vector@@Base+0x7a>
  405b73:	mov    WORD PTR [rbx+0xe8],cx
  405b7a:	movzx  ecx,WORD PTR [rax+0xc]
  405b7e:	mov    WORD PTR [rbx+0xea],cx
  405b85:	add    rax,0xffffffffffffffdc
  405b89:	mov    QWORD PTR [rbx+0x30],rax
  405b8d:	add    DWORD PTR [rbx+0x104],0xffffffff
  405b94:	mov    eax,ebp
  405b96:	add    rsp,0x8
  405b9a:	pop    rbx
  405b9b:	pop    rbp
  405b9c:	ret    
  405b9d:	lea    rdi,[rip+0x41b4]        # 409d58 <flatcc_builder_padding_base@@Base+0x6c8>
  405ba4:	lea    rsi,[rip+0x3d77]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405bab:	lea    rcx,[rip+0x47d5]        # 40a387 <flatcc_builder_padding_base@@Base+0xcf7>
  405bb2:	mov    edx,0x5c8
  405bb7:	call   403090 <__assert_fail@plt>
  405bbc:	nop    DWORD PTR [rax+0x0]

0000000000405bc0 <flatcc_builder_start_string@@Base>:
  405bc0:	push   rbx
  405bc1:	mov    rbx,rdi
  405bc4:	mov    esi,0x1
  405bc9:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  405bce:	mov    ecx,eax
  405bd0:	mov    eax,0xffffffff
  405bd5:	test   ecx,ecx
  405bd7:	je     405bdb <flatcc_builder_start_string@@Base+0x1b>
  405bd9:	pop    rbx
  405bda:	ret    
  405bdb:	mov    rax,QWORD PTR [rbx+0x30]
  405bdf:	mov    DWORD PTR [rax+0x10],0x1
  405be6:	mov    rax,QWORD PTR [rbx+0x30]
  405bea:	mov    DWORD PTR [rax+0x14],0x0
  405bf1:	mov    rax,QWORD PTR [rbx+0x30]
  405bf5:	mov    WORD PTR [rax+0xe],0x6
  405bfb:	mov    ecx,DWORD PTR [rbx+0x28]
  405bfe:	mov    edx,DWORD PTR [rbx+0x70]
  405c01:	sub    edx,ecx
  405c03:	add    rcx,QWORD PTR [rbx+0x68]
  405c07:	mov    QWORD PTR [rbx+0x18],rcx
  405c0b:	cmp    edx,0xfffffffc
  405c0e:	mov    ecx,0xfffffffc
  405c13:	cmovb  ecx,edx
  405c16:	mov    DWORD PTR [rbx+0x24],ecx
  405c19:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405c20:	xor    eax,eax
  405c22:	pop    rbx
  405c23:	ret    
  405c24:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c2e:	xchg   ax,ax

0000000000405c30 <flatcc_builder_reserve_table@@Base>:
  405c30:	push   r15
  405c32:	push   r14
  405c34:	push   rbx
  405c35:	test   esi,esi
  405c37:	js     405ce4 <flatcc_builder_reserve_table@@Base+0xb4>
  405c3d:	mov    r14d,esi
  405c40:	mov    r15,rdi
  405c43:	mov    rax,QWORD PTR [rdi+0x30]
  405c47:	movzx  ebx,WORD PTR [rax+0x1c]
  405c4b:	add    ebx,ebx
  405c4d:	add    ebx,DWORD PTR [rax+0x10]
  405c50:	lea    edx,[r14+r14*1]
  405c54:	add    edx,0x4
  405c57:	add    rdx,rbx
  405c5a:	cmp    rdx,QWORD PTR [rdi+0x60]
  405c5e:	jbe    405c7c <flatcc_builder_reserve_table@@Base+0x4c>
  405c60:	lea    rsi,[r15+0x58]
  405c64:	mov    rdi,QWORD PTR [r15+0x40]
  405c68:	mov    ecx,0x1
  405c6d:	xor    r8d,r8d
  405c70:	call   QWORD PTR [r15+0x50]
  405c74:	test   eax,eax
  405c76:	jne    405d03 <flatcc_builder_reserve_table@@Base+0xd3>
  405c7c:	add    rbx,QWORD PTR [r15+0x58]
  405c80:	mov    QWORD PTR [r15+0x8],rbx
  405c84:	je     405cd9 <flatcc_builder_reserve_table@@Base+0xa9>
  405c86:	add    r14d,r14d
  405c89:	add    rbx,0x4
  405c8d:	mov    QWORD PTR [r15+0x8],rbx
  405c91:	mov    rax,QWORD PTR [r15+0x30]
  405c95:	mov    ebx,DWORD PTR [rax+0x14]
  405c98:	or     r14d,0x1
  405c9c:	add    r14,rbx
  405c9f:	cmp    r14,QWORD PTR [r15+0x90]
  405ca6:	jbe    405cc6 <flatcc_builder_reserve_table@@Base+0x96>
  405ca8:	lea    rsi,[r15+0x88]
  405caf:	mov    rdi,QWORD PTR [r15+0x40]
  405cb3:	xor    ecx,ecx
  405cb5:	mov    r8d,0x3
  405cbb:	mov    rdx,r14
  405cbe:	call   QWORD PTR [r15+0x50]
  405cc2:	test   eax,eax
  405cc4:	jne    405d03 <flatcc_builder_reserve_table@@Base+0xd3>
  405cc6:	xor    eax,eax
  405cc8:	add    rbx,QWORD PTR [r15+0x88]
  405ccf:	mov    QWORD PTR [r15],rbx
  405cd2:	sete   al
  405cd5:	neg    eax
  405cd7:	jmp    405cde <flatcc_builder_reserve_table@@Base+0xae>
  405cd9:	mov    eax,0xffffffff
  405cde:	pop    rbx
  405cdf:	pop    r14
  405ce1:	pop    r15
  405ce3:	ret    
  405ce4:	lea    rdi,[rip+0x43b4]        # 40a09f <flatcc_builder_padding_base@@Base+0xa0f>
  405ceb:	lea    rsi,[rip+0x3c30]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405cf2:	lea    rcx,[rip+0x4365]        # 40a05e <flatcc_builder_padding_base@@Base+0x9ce>
  405cf9:	mov    edx,0x429
  405cfe:	call   403090 <__assert_fail@plt>
  405d03:	lea    rdi,[rip+0x4dd8]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  405d0a:	lea    rsi,[rip+0x3c11]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405d11:	lea    rcx,[rip+0x4c04]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  405d18:	mov    edx,0x134
  405d1d:	call   403090 <__assert_fail@plt>
  405d22:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d2c:	nop    DWORD PTR [rax+0x0]

0000000000405d30 <flatcc_builder_start_table@@Base>:
  405d30:	push   rbp
  405d31:	push   r15
  405d33:	push   r14
  405d35:	push   rbx
  405d36:	push   rax
  405d37:	mov    r15d,esi
  405d3a:	mov    rbx,rdi
  405d3d:	mov    esi,0x4
  405d42:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  405d47:	mov    r14d,0xffffffff
  405d4d:	test   eax,eax
  405d4f:	je     405d5f <flatcc_builder_start_table@@Base+0x2f>
  405d51:	mov    eax,r14d
  405d54:	add    rsp,0x8
  405d58:	pop    rbx
  405d59:	pop    r14
  405d5b:	pop    r15
  405d5d:	pop    rbp
  405d5e:	ret    
  405d5f:	mov    eax,DWORD PTR [rbx+0x8]
  405d62:	sub    eax,DWORD PTR [rbx+0x58]
  405d65:	mov    rcx,QWORD PTR [rbx+0x30]
  405d69:	mov    DWORD PTR [rcx+0x10],eax
  405d6c:	mov    eax,DWORD PTR [rbx]
  405d6e:	sub    eax,DWORD PTR [rbx+0x88]
  405d74:	mov    rcx,QWORD PTR [rbx+0x30]
  405d78:	mov    DWORD PTR [rcx+0x14],eax
  405d7b:	mov    eax,DWORD PTR [rbx+0x14]
  405d7e:	mov    rcx,QWORD PTR [rbx+0x30]
  405d82:	mov    DWORD PTR [rcx+0x18],eax
  405d85:	movzx  eax,WORD PTR [rbx+0x10]
  405d89:	mov    rcx,QWORD PTR [rbx+0x30]
  405d8d:	mov    WORD PTR [rcx+0x1c],ax
  405d91:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405d98:	mov    WORD PTR [rbx+0x10],0x0
  405d9e:	mov    rax,QWORD PTR [rbx+0x30]
  405da2:	mov    WORD PTR [rax+0xe],0x3
  405da8:	movzx  ebp,WORD PTR [rax+0x1c]
  405dac:	add    ebp,ebp
  405dae:	add    ebp,DWORD PTR [rax+0x10]
  405db1:	lea    edx,[r15+r15*1]
  405db5:	add    edx,0x4
  405db8:	add    rdx,rbp
  405dbb:	cmp    rdx,QWORD PTR [rbx+0x60]
  405dbf:	jbe    405ddc <flatcc_builder_start_table@@Base+0xac>
  405dc1:	lea    rsi,[rbx+0x58]
  405dc5:	mov    rdi,QWORD PTR [rbx+0x40]
  405dc9:	mov    ecx,0x1
  405dce:	xor    r8d,r8d
  405dd1:	call   QWORD PTR [rbx+0x50]
  405dd4:	test   eax,eax
  405dd6:	jne    405e70 <flatcc_builder_start_table@@Base+0x140>
  405ddc:	add    rbp,QWORD PTR [rbx+0x58]
  405de0:	mov    QWORD PTR [rbx+0x8],rbp
  405de4:	je     405d51 <flatcc_builder_start_table@@Base+0x21>
  405dea:	add    r15d,r15d
  405ded:	add    rbp,0x4
  405df1:	mov    QWORD PTR [rbx+0x8],rbp
  405df5:	mov    rax,QWORD PTR [rbx+0x30]
  405df9:	mov    ebp,DWORD PTR [rax+0x14]
  405dfc:	or     r15d,0x1
  405e00:	add    r15,rbp
  405e03:	cmp    r15,QWORD PTR [rbx+0x90]
  405e0a:	jbe    405e29 <flatcc_builder_start_table@@Base+0xf9>
  405e0c:	lea    rsi,[rbx+0x88]
  405e13:	mov    rdi,QWORD PTR [rbx+0x40]
  405e17:	xor    ecx,ecx
  405e19:	mov    r8d,0x3
  405e1f:	mov    rdx,r15
  405e22:	call   QWORD PTR [rbx+0x50]
  405e25:	test   eax,eax
  405e27:	jne    405e70 <flatcc_builder_start_table@@Base+0x140>
  405e29:	add    rbp,QWORD PTR [rbx+0x88]
  405e30:	mov    QWORD PTR [rbx],rbp
  405e33:	je     405d51 <flatcc_builder_start_table@@Base+0x21>
  405e39:	mov    eax,DWORD PTR [rbx+0x28]
  405e3c:	mov    rcx,rax
  405e3f:	add    rcx,QWORD PTR [rbx+0x68]
  405e43:	mov    QWORD PTR [rbx+0x18],rcx
  405e47:	mov    ecx,DWORD PTR [rbx+0x70]
  405e4a:	sub    ecx,eax
  405e4c:	cmp    ecx,0xfffc
  405e52:	mov    eax,0xfffc
  405e57:	cmovb  eax,ecx
  405e5a:	mov    DWORD PTR [rbx+0x24],eax
  405e5d:	mov    rax,QWORD PTR [rbx+0x30]
  405e61:	mov    DWORD PTR [rax+0x4],0xfffc
  405e68:	xor    r14d,r14d
  405e6b:	jmp    405d51 <flatcc_builder_start_table@@Base+0x21>
  405e70:	lea    rdi,[rip+0x4c6b]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  405e77:	lea    rsi,[rip+0x3aa4]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405e7e:	lea    rcx,[rip+0x4a97]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  405e85:	mov    edx,0x134
  405e8a:	call   403090 <__assert_fail@plt>
  405e8f:	nop

0000000000405e90 <flatcc_builder_create_vtable@@Base>:
  405e90:	push   r14
  405e92:	push   rbx
  405e93:	sub    rsp,0x98
  405e9a:	mov    r14,rdi
  405e9d:	mov    QWORD PTR [rsp+0x8],0x0
  405ea6:	mov    DWORD PTR [rsp+0x10],0x0
  405eae:	test   dx,dx
  405eb1:	je     405f17 <flatcc_builder_create_vtable@@Base+0x87>
  405eb3:	movzx  r8d,dx
  405eb7:	mov    QWORD PTR [rsp+0x8],r8
  405ebc:	mov    QWORD PTR [rsp+0x18],rsi
  405ec1:	mov    QWORD PTR [rsp+0x20],r8
  405ec6:	mov    DWORD PTR [rsp+0x10],0x1
  405ece:	mov    edx,0x1
  405ed3:	cmp    DWORD PTR [r14+0x100],0x0
  405edb:	jne    405f26 <flatcc_builder_create_vtable@@Base+0x96>
  405edd:	cmp    DWORD PTR [r14+0x124],0x0
  405ee5:	jne    405f26 <flatcc_builder_create_vtable@@Base+0x96>
  405ee7:	mov    ebx,DWORD PTR [r14+0xf4]
  405eee:	lea    eax,[r8+rbx*1]
  405ef2:	mov    DWORD PTR [r14+0xf4],eax
  405ef9:	mov    rdi,QWORD PTR [r14+0x38]
  405efd:	lea    rsi,[rsp+0x18]
  405f02:	mov    ecx,ebx
  405f04:	call   QWORD PTR [r14+0x48]
  405f08:	test   eax,eax
  405f0a:	jne    405fbb <flatcc_builder_create_vtable@@Base+0x12b>
  405f10:	add    ebx,0x1
  405f13:	jne    405f70 <flatcc_builder_create_vtable@@Base+0xe0>
  405f15:	jmp    405f6e <flatcc_builder_create_vtable@@Base+0xde>
  405f17:	xor    edx,edx
  405f19:	xor    r8d,r8d
  405f1c:	cmp    DWORD PTR [r14+0x100],0x0
  405f24:	je     405edd <flatcc_builder_create_vtable@@Base+0x4d>
  405f26:	cmp    r8,0x11
  405f2a:	setb   al
  405f2d:	lea    rcx,[r8-0x10]
  405f31:	shr    rcx,0x20
  405f35:	sete   cl
  405f38:	test   r8d,r8d
  405f3b:	je     405f7d <flatcc_builder_create_vtable@@Base+0xed>
  405f3d:	or     al,cl
  405f3f:	je     405f7d <flatcc_builder_create_vtable@@Base+0xed>
  405f41:	mov    ebx,DWORD PTR [r14+0xf0]
  405f48:	sub    ebx,r8d
  405f4b:	mov    rdi,QWORD PTR [r14+0x38]
  405f4f:	lea    rsi,[rsp+0x18]
  405f54:	mov    ecx,ebx
  405f56:	call   QWORD PTR [r14+0x48]
  405f5a:	test   eax,eax
  405f5c:	jne    405f9c <flatcc_builder_create_vtable@@Base+0x10c>
  405f5e:	mov    DWORD PTR [r14+0xf0],ebx
  405f65:	test   ebx,ebx
  405f67:	je     405f6e <flatcc_builder_create_vtable@@Base+0xde>
  405f69:	add    ebx,0x1
  405f6c:	jmp    405f70 <flatcc_builder_create_vtable@@Base+0xe0>
  405f6e:	xor    ebx,ebx
  405f70:	mov    eax,ebx
  405f72:	add    rsp,0x98
  405f79:	pop    rbx
  405f7a:	pop    r14
  405f7c:	ret    
  405f7d:	lea    rdi,[rip+0x4b5e]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  405f84:	lea    rsi,[rip+0x3997]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405f8b:	lea    rcx,[rip+0x4a0f]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  405f92:	mov    edx,0x287
  405f97:	call   403090 <__assert_fail@plt>
  405f9c:	lea    rdi,[rip+0x4b3f]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  405fa3:	lea    rsi,[rip+0x3978]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405faa:	lea    rcx,[rip+0x49f0]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  405fb1:	mov    edx,0x28b
  405fb6:	call   403090 <__assert_fail@plt>
  405fbb:	lea    rdi,[rip+0x4b20]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  405fc2:	lea    rsi,[rip+0x3959]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  405fc9:	lea    rcx,[rip+0x4a8d]        # 40aa5d <flatcc_builder_padding_base@@Base+0x13cd>
  405fd0:	mov    edx,0x2a5
  405fd5:	call   403090 <__assert_fail@plt>
  405fda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405fe0 <flatcc_builder_create_cached_vtable@@Base>:
  405fe0:	push   rbp
  405fe1:	push   r15
  405fe3:	push   r14
  405fe5:	push   r13
  405fe7:	push   r12
  405fe9:	push   rbx
  405fea:	sub    rsp,0x28
  405fee:	mov    r15d,ecx
  405ff1:	mov    r8d,edx
  405ff4:	mov    QWORD PTR [rsp+0x18],rsi
  405ff9:	mov    r13,rdi
  405ffc:	mov    rax,QWORD PTR [rdi+0xd8]
  406003:	test   rax,rax
  406006:	je     4060da <flatcc_builder_create_cached_vtable@@Base+0xfa>
  40600c:	mov    ecx,0x20
  406011:	sub    ecx,eax
  406013:	shrx   r15d,r15d,ecx
  406018:	shl    r15,0x2
  40601c:	add    r15,QWORD PTR [r13+0xa8]
  406023:	je     4061aa <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  406029:	mov    ebp,DWORD PTR [r15]
  40602c:	test   ebp,ebp
  40602e:	je     4061b2 <flatcc_builder_create_cached_vtable@@Base+0x1d2>
  406034:	mov    rbx,QWORD PTR [r13+0x78]
  406038:	mov    QWORD PTR [rsp+0x10],r13
  40603d:	mov    r13,QWORD PTR [r13+0xb8]
  406044:	movzx  eax,r8w
  406048:	mov    QWORD PTR [rsp+0x20],rax
  40604d:	xor    eax,eax
  40604f:	mov    QWORD PTR [rsp],rax
  406053:	mov    QWORD PTR [rsp+0x8],r15
  406058:	mov    r14,r15
  40605b:	nop    DWORD PTR [rax+rax*1+0x0]
  406060:	mov    eax,ebp
  406062:	lea    r15,[rax+r13*1]
  406066:	mov    esi,DWORD PTR [r13+rax*1+0x8]
  40606b:	cmp    WORD PTR [rbx+rsi*1],r8w
  406070:	jne    40608e <flatcc_builder_create_cached_vtable@@Base+0xae>
  406072:	add    rsi,rbx
  406075:	mov    rdi,QWORD PTR [rsp+0x18]
  40607a:	mov    rdx,QWORD PTR [rsp+0x20]
  40607f:	mov    r12d,r8d
  406082:	call   4030c0 <memcmp@plt>
  406087:	mov    r8d,r12d
  40608a:	test   eax,eax
  40608c:	je     40609f <flatcc_builder_create_cached_vtable@@Base+0xbf>
  40608e:	mov    ebp,DWORD PTR [r15+0xc]
  406092:	add    r15,0xc
  406096:	mov    r14,r15
  406099:	test   ebp,ebp
  40609b:	jne    406060 <flatcc_builder_create_cached_vtable@@Base+0x80>
  40609d:	jmp    4060cb <flatcc_builder_create_cached_vtable@@Base+0xeb>
  40609f:	mov    eax,DWORD PTR [r15+0x4]
  4060a3:	mov    rcx,QWORD PTR [rsp+0x10]
  4060a8:	cmp    eax,DWORD PTR [rcx+0x100]
  4060ae:	je     406314 <flatcc_builder_create_cached_vtable@@Base+0x334>
  4060b4:	lea    r14,[r15+0xc]
  4060b8:	mov    ebp,DWORD PTR [r15+0xc]
  4060bc:	mov    rax,r15
  4060bf:	mov    QWORD PTR [rsp],r15
  4060c3:	test   ebp,ebp
  4060c5:	jne    406060 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4060c7:	mov    QWORD PTR [rsp],r15
  4060cb:	mov    r13,QWORD PTR [rsp+0x10]
  4060d0:	mov    r15,QWORD PTR [rsp+0x8]
  4060d5:	jmp    4061b8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
  4060da:	cmp    DWORD PTR [r13+0xe4],0x0
  4060e2:	jne    406351 <flatcc_builder_create_cached_vtable@@Base+0x371>
  4060e8:	lea    rbx,[r13+0xb8]
  4060ef:	cmp    QWORD PTR [r13+0xc0],0xf
  4060f7:	ja     40611f <flatcc_builder_create_cached_vtable@@Base+0x13f>
  4060f9:	mov    rdi,QWORD PTR [r13+0x40]
  4060fd:	mov    edx,0x10
  406102:	xor    ecx,ecx
  406104:	mov    ebp,r8d
  406107:	mov    r8d,0x6
  40610d:	mov    rsi,rbx
  406110:	call   QWORD PTR [r13+0x50]
  406114:	mov    r8d,ebp
  406117:	test   eax,eax
  406119:	jne    406332 <flatcc_builder_create_cached_vtable@@Base+0x352>
  40611f:	xor    r12d,r12d
  406122:	cmp    QWORD PTR [rbx],0x0
  406126:	je     4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  40612c:	mov    ebx,r8d
  40612f:	lea    rsi,[r13+0xa8]
  406136:	mov    DWORD PTR [r13+0xe4],0x10
  406141:	mov    rdi,QWORD PTR [r13+0x40]
  406145:	mov    edx,0x100
  40614a:	mov    ecx,0x1
  40614f:	mov    r8d,0x5
  406155:	call   QWORD PTR [r13+0x50]
  406159:	test   eax,eax
  40615b:	jne    4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406161:	mov    rax,QWORD PTR [r13+0xb0]
  406168:	mov    edx,0x100
  40616d:	nop    DWORD PTR [rax]
  406170:	mov    rcx,rdx
  406173:	lea    rdx,[rdx+rdx*1]
  406177:	cmp    rdx,rax
  40617a:	jbe    406170 <flatcc_builder_create_cached_vtable@@Base+0x190>
  40617c:	shr    rcx,0x2
  406180:	mov    rax,0xffffffffffffffff
  406187:	mov    edx,0x1
  40618c:	mov    r8d,ebx
  40618f:	nop
  406190:	add    rax,0x1
  406194:	shlx   rsi,rdx,rax
  406199:	cmp    rsi,rcx
  40619c:	jb     406190 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  40619e:	mov    QWORD PTR [r13+0xd8],rax
  4061a5:	jmp    40600c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  4061aa:	xor    r12d,r12d
  4061ad:	jmp    4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4061b2:	xor    eax,eax
  4061b4:	mov    QWORD PTR [rsp],rax
  4061b8:	mov    ebp,DWORD PTR [r13+0xe4]
  4061bf:	lea    rbx,[r13+0xb8]
  4061c6:	lea    rdx,[rbp+0x10]
  4061ca:	cmp    rdx,QWORD PTR [r13+0xc0]
  4061d1:	jbe    4061f4 <flatcc_builder_create_cached_vtable@@Base+0x214>
  4061d3:	mov    rdi,QWORD PTR [r13+0x40]
  4061d7:	xor    ecx,ecx
  4061d9:	mov    r14d,r8d
  4061dc:	mov    r8d,0x6
  4061e2:	mov    rsi,rbx
  4061e5:	call   QWORD PTR [r13+0x50]
  4061e9:	mov    r8d,r14d
  4061ec:	test   eax,eax
  4061ee:	jne    406332 <flatcc_builder_create_cached_vtable@@Base+0x352>
  4061f4:	xor    r12d,r12d
  4061f7:	add    rbp,QWORD PTR [rbx]
  4061fa:	je     4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406200:	mov    eax,DWORD PTR [r13+0xe4]
  406207:	mov    ecx,DWORD PTR [r13+0x100]
  40620e:	lea    edx,[rax+0x10]
  406211:	mov    DWORD PTR [r13+0xe4],edx
  406218:	mov    DWORD PTR [rbp+0x4],ecx
  40621b:	mov    ecx,DWORD PTR [r15]
  40621e:	mov    DWORD PTR [rbp+0xc],ecx
  406221:	mov    DWORD PTR [r15],eax
  406224:	movzx  ebx,r8w
  406228:	mov    rdi,r13
  40622b:	mov    rsi,QWORD PTR [rsp+0x18]
  406230:	mov    edx,ebx
  406232:	call   405e90 <flatcc_builder_create_vtable@@Base>
  406237:	mov    DWORD PTR [rbp+0x0],eax
  40623a:	test   eax,eax
  40623c:	je     4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406242:	mov    rax,QWORD PTR [rsp]
  406246:	test   rax,rax
  406249:	je     406256 <flatcc_builder_create_cached_vtable@@Base+0x276>
  40624b:	mov    eax,DWORD PTR [rax+0x8]
  40624e:	mov    DWORD PTR [rbp+0x8],eax
  406251:	jmp    4062f6 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406256:	mov    rax,QWORD PTR [r13+0x118]
  40625d:	mov    r14d,DWORD PTR [r13+0xe0]
  406264:	test   rax,rax
  406267:	je     4062a4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  406269:	lea    ecx,[r14+rbx*1]
  40626d:	cmp    rax,rcx
  406270:	jae    4062a4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  406272:	cmp    QWORD PTR [r13+0xd8],0x0
  40627a:	je     4062f6 <flatcc_builder_create_cached_vtable@@Base+0x316>
  40627c:	mov    rdi,QWORD PTR [r13+0xa8]
  406283:	mov    rdx,QWORD PTR [r13+0xb0]
  40628a:	xor    esi,esi
  40628c:	call   4030a0 <memset@plt>
  406291:	movabs rax,0x1000000000
  40629b:	mov    QWORD PTR [r13+0xe0],rax
  4062a2:	jmp    4062f6 <flatcc_builder_create_cached_vtable@@Base+0x316>
  4062a4:	lea    r15,[r13+0x78]
  4062a8:	lea    rdx,[r14+rbx*1]
  4062ac:	cmp    rdx,QWORD PTR [r13+0x80]
  4062b3:	jbe    4062cc <flatcc_builder_create_cached_vtable@@Base+0x2ec>
  4062b5:	mov    rdi,QWORD PTR [r13+0x40]
  4062b9:	xor    ecx,ecx
  4062bb:	mov    r8d,0x2
  4062c1:	mov    rsi,r15
  4062c4:	call   QWORD PTR [r13+0x50]
  4062c8:	test   eax,eax
  4062ca:	jne    406332 <flatcc_builder_create_cached_vtable@@Base+0x352>
  4062cc:	add    r14,QWORD PTR [r15]
  4062cf:	je     40630c <flatcc_builder_create_cached_vtable@@Base+0x32c>
  4062d1:	mov    eax,DWORD PTR [r13+0xe0]
  4062d8:	mov    DWORD PTR [rbp+0x8],eax
  4062db:	mov    ecx,ebx
  4062dd:	add    ecx,eax
  4062df:	mov    DWORD PTR [r13+0xe0],ecx
  4062e6:	mov    rdi,r14
  4062e9:	mov    rsi,QWORD PTR [rsp+0x18]
  4062ee:	mov    rdx,rbx
  4062f1:	call   4030e0 <memcpy@plt>
  4062f6:	mov    r12d,DWORD PTR [rbp+0x0]
  4062fa:	mov    eax,r12d
  4062fd:	add    rsp,0x28
  406301:	pop    rbx
  406302:	pop    r12
  406304:	pop    r13
  406306:	pop    r14
  406308:	pop    r15
  40630a:	pop    rbp
  40630b:	ret    
  40630c:	mov    r12d,0xffffffff
  406312:	jmp    4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406314:	mov    rcx,QWORD PTR [rsp+0x8]
  406319:	cmp    r14,rcx
  40631c:	je     40632d <flatcc_builder_create_cached_vtable@@Base+0x34d>
  40631e:	mov    eax,DWORD PTR [r15+0xc]
  406322:	mov    DWORD PTR [r14],eax
  406325:	mov    eax,DWORD PTR [rcx]
  406327:	mov    DWORD PTR [r15+0xc],eax
  40632b:	mov    DWORD PTR [rcx],ebp
  40632d:	mov    r12d,DWORD PTR [r15]
  406330:	jmp    4062fa <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406332:	lea    rdi,[rip+0x47a9]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  406339:	lea    rsi,[rip+0x35e2]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406340:	lea    rcx,[rip+0x45d5]        # 40a91c <flatcc_builder_padding_base@@Base+0x128c>
  406347:	mov    edx,0x134
  40634c:	call   403090 <__assert_fail@plt>
  406351:	lea    rdi,[rip+0x474e]        # 40aaa6 <flatcc_builder_padding_base@@Base+0x1416>
  406358:	lea    rsi,[rip+0x35c3]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40635f:	lea    rcx,[rip+0x474f]        # 40aab5 <flatcc_builder_padding_base@@Base+0x1425>
  406366:	mov    edx,0x156
  40636b:	call   403090 <__assert_fail@plt>

0000000000406370 <flatcc_builder_create_table@@Base>:
  406370:	push   rbp
  406371:	push   r14
  406373:	push   rbx
  406374:	sub    rsp,0xa0
  40637b:	test   r9d,r9d
  40637e:	js     406595 <flatcc_builder_create_table@@Base+0x225>
  406384:	mov    r14,rdi
  406387:	mov    edi,DWORD PTR [rsp+0xc0]
  40638e:	test   dil,0x1
  406392:	je     4065b4 <flatcc_builder_create_table@@Base+0x244>
  406398:	movzx  ecx,cx
  40639b:	cmp    ecx,0x4
  40639e:	mov    eax,0x4
  4063a3:	cmova  eax,ecx
  4063a6:	cmp    WORD PTR [r14+0xe8],ax
  4063ae:	jae    4063b8 <flatcc_builder_create_table@@Base+0x48>
  4063b0:	mov    WORD PTR [r14+0xe8],ax
  4063b8:	mov    ebp,DWORD PTR [r14+0xf0]
  4063bf:	mov    ecx,ebp
  4063c1:	sub    ecx,edx
  4063c3:	movzx  r10d,ax
  4063c7:	add    r10d,0xffffffff
  4063cb:	and    r10d,ecx
  4063ce:	mov    ecx,0xfffffffc
  4063d3:	mov    ebx,0xfffffffc
  4063d8:	sub    ebx,edx
  4063da:	add    edi,r10d
  4063dd:	lea    eax,[rbx+rbp*1]
  4063e0:	add    eax,0x1
  4063e3:	sub    eax,edi
  4063e5:	mov    DWORD PTR [rsp+0xc],eax
  4063e9:	test   r9d,r9d
  4063ec:	jle    406497 <flatcc_builder_create_table@@Base+0x127>
  4063f2:	add    ebx,ebp
  4063f4:	sub    ebx,r10d
  4063f7:	sub    ecx,ebx
  4063f9:	mov    edi,r9d
  4063fc:	lea    rax,[rdi-0x1]
  406400:	mov    r9d,edi
  406403:	and    r9d,0x3
  406407:	cmp    rax,0x3
  40640b:	jae    406419 <flatcc_builder_create_table@@Base+0xa9>
  40640d:	xor    ebx,ebx
  40640f:	test   r9,r9
  406412:	jne    40646d <flatcc_builder_create_table@@Base+0xfd>
  406414:	jmp    406497 <flatcc_builder_create_table@@Base+0x127>
  406419:	sub    rdi,r9
  40641c:	xor    ebx,ebx
  40641e:	xchg   ax,ax
  406420:	movzx  eax,WORD PTR [r8+rbx*2]
  406425:	mov    ebp,DWORD PTR [rax+rsi*1]
  406428:	add    ebp,ecx
  40642a:	sub    ebp,eax
  40642c:	mov    DWORD PTR [rax+rsi*1],ebp
  40642f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406435:	mov    ebp,DWORD PTR [rax+rsi*1]
  406438:	add    ebp,ecx
  40643a:	sub    ebp,eax
  40643c:	mov    DWORD PTR [rax+rsi*1],ebp
  40643f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  406445:	mov    ebp,DWORD PTR [rax+rsi*1]
  406448:	add    ebp,ecx
  40644a:	sub    ebp,eax
  40644c:	mov    DWORD PTR [rax+rsi*1],ebp
  40644f:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  406455:	mov    ebp,DWORD PTR [rax+rsi*1]
  406458:	add    ebp,ecx
  40645a:	sub    ebp,eax
  40645c:	mov    DWORD PTR [rax+rsi*1],ebp
  40645f:	add    rbx,0x4
  406463:	cmp    rdi,rbx
  406466:	jne    406420 <flatcc_builder_create_table@@Base+0xb0>
  406468:	test   r9,r9
  40646b:	je     406497 <flatcc_builder_create_table@@Base+0x127>
  40646d:	lea    rdi,[r8+rbx*2]
  406471:	xor    ebx,ebx
  406473:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40647d:	nop    DWORD PTR [rax]
  406480:	movzx  eax,WORD PTR [rdi+rbx*2]
  406484:	mov    ebp,DWORD PTR [rax+rsi*1]
  406487:	add    ebp,ecx
  406489:	sub    ebp,eax
  40648b:	mov    DWORD PTR [rax+rsi*1],ebp
  40648e:	add    rbx,0x1
  406492:	cmp    r9,rbx
  406495:	jne    406480 <flatcc_builder_create_table@@Base+0x110>
  406497:	mov    QWORD PTR [rsp+0x10],0x4
  4064a0:	lea    rax,[rsp+0xc]
  4064a5:	mov    QWORD PTR [rsp+0x20],rax
  4064aa:	mov    QWORD PTR [rsp+0x28],0x4
  4064b3:	mov    DWORD PTR [rsp+0x18],0x1
  4064bb:	test   rdx,rdx
  4064be:	je     406560 <flatcc_builder_create_table@@Base+0x1f0>
  4064c4:	lea    r8,[rdx+0x4]
  4064c8:	mov    QWORD PTR [rsp+0x10],r8
  4064cd:	mov    QWORD PTR [rsp+0x30],rsi
  4064d2:	mov    QWORD PTR [rsp+0x38],rdx
  4064d7:	mov    DWORD PTR [rsp+0x18],0x2
  4064df:	mov    edx,0x2
  4064e4:	test   r10d,r10d
  4064e7:	je     40650f <flatcc_builder_create_table@@Base+0x19f>
  4064e9:	add    r8,r10
  4064ec:	mov    QWORD PTR [rsp+0x10],r8
  4064f1:	mov    eax,edx
  4064f3:	shl    rax,0x4
  4064f7:	lea    rcx,[rip+0x3192]        # 409690 <flatcc_builder_padding_base@@Base>
  4064fe:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406503:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406508:	add    edx,0x1
  40650b:	mov    DWORD PTR [rsp+0x18],edx
  40650f:	cmp    r8,0x11
  406513:	setb   al
  406516:	lea    rcx,[r8-0x10]
  40651a:	shr    rcx,0x20
  40651e:	sete   cl
  406521:	test   r8d,r8d
  406524:	jle    406576 <flatcc_builder_create_table@@Base+0x206>
  406526:	or     al,cl
  406528:	je     406576 <flatcc_builder_create_table@@Base+0x206>
  40652a:	mov    ebp,DWORD PTR [r14+0xf0]
  406531:	sub    ebp,r8d
  406534:	mov    rdi,QWORD PTR [r14+0x38]
  406538:	lea    rsi,[rsp+0x20]
  40653d:	mov    ecx,ebp
  40653f:	call   QWORD PTR [r14+0x48]
  406543:	test   eax,eax
  406545:	jne    4065d3 <flatcc_builder_create_table@@Base+0x263>
  40654b:	mov    DWORD PTR [r14+0xf0],ebp
  406552:	mov    eax,ebp
  406554:	add    rsp,0xa0
  40655b:	pop    rbx
  40655c:	pop    r14
  40655e:	pop    rbp
  40655f:	ret    
  406560:	mov    edx,0x1
  406565:	mov    r8d,0x4
  40656b:	test   r10d,r10d
  40656e:	jne    4064e9 <flatcc_builder_create_table@@Base+0x179>
  406574:	jmp    40650f <flatcc_builder_create_table@@Base+0x19f>
  406576:	lea    rdi,[rip+0x4565]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  40657d:	lea    rsi,[rip+0x339e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406584:	lea    rcx,[rip+0x4416]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  40658b:	mov    edx,0x287
  406590:	call   403090 <__assert_fail@plt>
  406595:	lea    rdi,[rip+0x3afc]        # 40a098 <flatcc_builder_padding_base@@Base+0xa08>
  40659c:	lea    rsi,[rip+0x337f]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4065a3:	lea    rcx,[rip+0x3b00]        # 40a0aa <flatcc_builder_padding_base@@Base+0xa1a>
  4065aa:	mov    edx,0x4d5
  4065af:	call   403090 <__assert_fail@plt>
  4065b4:	lea    rdi,[rip+0x3b8b]        # 40a146 <flatcc_builder_padding_base@@Base+0xab6>
  4065bb:	lea    rsi,[rip+0x3360]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4065c2:	lea    rcx,[rip+0x3ae1]        # 40a0aa <flatcc_builder_padding_base@@Base+0xa1a>
  4065c9:	mov    edx,0x4db
  4065ce:	call   403090 <__assert_fail@plt>
  4065d3:	lea    rdi,[rip+0x4508]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4065da:	lea    rsi,[rip+0x3341]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4065e1:	lea    rcx,[rip+0x43b9]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  4065e8:	mov    edx,0x28b
  4065ed:	call   403090 <__assert_fail@plt>
  4065f2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4065fc:	nop    DWORD PTR [rax+0x0]

0000000000406600 <flatcc_builder_check_required_field@@Base>:
  406600:	mov    rax,QWORD PTR [rdi+0x30]
  406604:	movzx  eax,WORD PTR [rax+0xe]
  406608:	cmp    eax,0x3
  40660b:	jne    406627 <flatcc_builder_check_required_field@@Base+0x27>
  40660d:	xor    eax,eax
  40660f:	cmp    WORD PTR [rdi+0x10],si
  406613:	jbe    406626 <flatcc_builder_check_required_field@@Base+0x26>
  406615:	mov    rcx,QWORD PTR [rdi+0x8]
  406619:	movzx  edx,si
  40661c:	xor    eax,eax
  40661e:	cmp    WORD PTR [rcx+rdx*2],0x0
  406623:	setne  al
  406626:	ret    
  406627:	push   rax
  406628:	lea    rdi,[rip+0x3b22]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  40662f:	lea    rsi,[rip+0x32ec]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406636:	lea    rcx,[rip+0x3b3f]        # 40a17c <flatcc_builder_padding_base@@Base+0xaec>
  40663d:	mov    edx,0x4f8
  406642:	call   403090 <__assert_fail@plt>
  406647:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406650 <flatcc_builder_check_union_field@@Base>:
  406650:	mov    rax,QWORD PTR [rdi+0x30]
  406654:	movzx  eax,WORD PTR [rax+0xe]
  406658:	cmp    eax,0x3
  40665b:	jne    4066ae <flatcc_builder_check_union_field@@Base+0x5e>
  40665d:	test   si,si
  406660:	je     406691 <flatcc_builder_check_union_field@@Base+0x41>
  406662:	cmp    WORD PTR [rdi+0x10],si
  406666:	jbe    406697 <flatcc_builder_check_union_field@@Base+0x47>
  406668:	movzx  eax,si
  40666b:	mov    rcx,QWORD PTR [rdi+0x8]
  40666f:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  406674:	test   rdx,rdx
  406677:	je     40669d <flatcc_builder_check_union_field@@Base+0x4d>
  406679:	mov    rsi,QWORD PTR [rdi+0x18]
  40667d:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406681:	movzx  eax,WORD PTR [rcx+rax*2]
  406685:	je     4066a4 <flatcc_builder_check_union_field@@Base+0x54>
  406687:	test   ax,ax
  40668a:	setne  al
  40668d:	movzx  eax,al
  406690:	ret    
  406691:	xor    eax,eax
  406693:	movzx  eax,al
  406696:	ret    
  406697:	xor    eax,eax
  406699:	movzx  eax,al
  40669c:	ret    
  40669d:	cmp    WORD PTR [rcx+rax*2],0x0
  4066a2:	jmp    4066a7 <flatcc_builder_check_union_field@@Base+0x57>
  4066a4:	test   ax,ax
  4066a7:	sete   al
  4066aa:	movzx  eax,al
  4066ad:	ret    
  4066ae:	push   rax
  4066af:	lea    rdi,[rip+0x3a9b]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  4066b6:	lea    rsi,[rip+0x3265]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4066bd:	lea    rcx,[rip+0x3b0b]        # 40a1cf <flatcc_builder_padding_base@@Base+0xb3f>
  4066c4:	mov    edx,0x4ff
  4066c9:	call   403090 <__assert_fail@plt>
  4066ce:	xchg   ax,ax

00000000004066d0 <flatcc_builder_check_required@@Base>:
  4066d0:	mov    rax,QWORD PTR [rdi+0x30]
  4066d4:	movzx  eax,WORD PTR [rax+0xe]
  4066d8:	cmp    eax,0x3
  4066db:	jne    406718 <flatcc_builder_check_required@@Base+0x48>
  4066dd:	movzx  ecx,WORD PTR [rdi+0x10]
  4066e1:	xor    eax,eax
  4066e3:	cmp    ecx,edx
  4066e5:	jl     406714 <flatcc_builder_check_required@@Base+0x44>
  4066e7:	mov    eax,0x1
  4066ec:	test   edx,edx
  4066ee:	jle    406714 <flatcc_builder_check_required@@Base+0x44>
  4066f0:	mov    rcx,QWORD PTR [rdi+0x8]
  4066f4:	movsxd r8,edx
  4066f7:	xor    edi,edi
  4066f9:	nop    DWORD PTR [rax+0x0]
  406700:	movzx  edx,WORD PTR [rsi+rdi*2]
  406704:	cmp    WORD PTR [rcx+rdx*2],0x0
  406709:	je     406715 <flatcc_builder_check_required@@Base+0x45>
  40670b:	add    rdi,0x1
  40670f:	cmp    rdi,r8
  406712:	jl     406700 <flatcc_builder_check_required@@Base+0x30>
  406714:	ret    
  406715:	xor    eax,eax
  406717:	ret    
  406718:	push   rax
  406719:	lea    rdi,[rip+0x3a31]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  406720:	lea    rsi,[rip+0x31fb]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406727:	lea    rcx,[rip+0x3af1]        # 40a21f <flatcc_builder_padding_base@@Base+0xb8f>
  40672e:	mov    edx,0x511
  406733:	call   403090 <__assert_fail@plt>
  406738:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406740 <flatcc_builder_end_table@@Base>:
  406740:	push   rbp
  406741:	push   r15
  406743:	push   r14
  406745:	push   r12
  406747:	push   rbx
  406748:	sub    rsp,0x10
  40674c:	mov    rax,QWORD PTR [rdi+0x30]
  406750:	movzx  eax,WORD PTR [rax+0xe]
  406754:	cmp    eax,0x3
  406757:	jne    4068a8 <flatcc_builder_end_table@@Base+0x168>
  40675d:	mov    rbx,rdi
  406760:	mov    rax,QWORD PTR [rdi+0x8]
  406764:	mov    ecx,DWORD PTR [rdi+0x10]
  406767:	lea    ecx,[rcx+rcx*1]
  40676a:	add    ecx,0x4
  40676d:	mov    WORD PTR [rax-0x4],cx
  406771:	mov    edx,DWORD PTR [rdi+0x20]
  406774:	add    edx,0x4
  406777:	mov    WORD PTR [rax-0x2],dx
  40677b:	lea    r12,[rax-0x4]
  40677f:	movzx  ebp,cx
  406782:	mov    eax,DWORD PTR [rdi+0x14]
  406785:	xor    eax,ebp
  406787:	imul   eax,eax,0x9e3779b1
  40678d:	movzx  ecx,dx
  406790:	xor    ecx,eax
  406792:	imul   ecx,ecx,0x9e3779b1
  406798:	mov    DWORD PTR [rdi+0x14],ecx
  40679b:	mov    rsi,r12
  40679e:	mov    edx,ebp
  4067a0:	call   405fe0 <flatcc_builder_create_cached_vtable@@Base>
  4067a5:	test   eax,eax
  4067a7:	je     406895 <flatcc_builder_end_table@@Base+0x155>
  4067ad:	mov    r14d,eax
  4067b0:	xor    r15d,r15d
  4067b3:	xor    esi,esi
  4067b5:	mov    rdi,r12
  4067b8:	mov    rdx,rbp
  4067bb:	call   4030a0 <memset@plt>
  4067c0:	mov    rax,QWORD PTR [rbx+0x30]
  4067c4:	mov    r8d,DWORD PTR [rax+0x14]
  4067c8:	add    r8,QWORD PTR [rbx+0x88]
  4067cf:	mov    r9,QWORD PTR [rbx]
  4067d2:	mov    rsi,QWORD PTR [rbx+0x18]
  4067d6:	sub    r9,r8
  4067d9:	shr    r9,1
  4067dc:	mov    edx,DWORD PTR [rbx+0x20]
  4067df:	movzx  ecx,WORD PTR [rbx+0xea]
  4067e6:	mov    DWORD PTR [rsp],r14d
  4067ea:	mov    rdi,rbx
  4067ed:	call   406370 <flatcc_builder_create_table@@Base>
  4067f2:	test   eax,eax
  4067f4:	je     406898 <flatcc_builder_end_table@@Base+0x158>
  4067fa:	mov    r14d,eax
  4067fd:	mov    rax,QWORD PTR [rbx+0x30]
  406801:	mov    ecx,DWORD PTR [rax+0x18]
  406804:	mov    DWORD PTR [rbx+0x14],ecx
  406807:	movzx  ecx,WORD PTR [rax+0x1c]
  40680b:	mov    WORD PTR [rbx+0x10],cx
  40680f:	mov    ecx,DWORD PTR [rax+0x10]
  406812:	add    rcx,QWORD PTR [rbx+0x58]
  406816:	mov    QWORD PTR [rbx+0x8],rcx
  40681a:	mov    eax,DWORD PTR [rax+0x14]
  40681d:	add    rax,QWORD PTR [rbx+0x88]
  406824:	mov    QWORD PTR [rbx],rax
  406827:	mov    rdi,QWORD PTR [rbx+0x18]
  40682b:	mov    edx,DWORD PTR [rbx+0x20]
  40682e:	xor    esi,esi
  406830:	call   4030a0 <memset@plt>
  406835:	mov    rax,QWORD PTR [rbx+0x30]
  406839:	mov    ecx,DWORD PTR [rax+0x8]
  40683c:	mov    DWORD PTR [rbx+0x20],ecx
  40683f:	mov    ecx,DWORD PTR [rax]
  406841:	mov    DWORD PTR [rbx+0x28],ecx
  406844:	mov    edx,DWORD PTR [rax+0x4]
  406847:	mov    rsi,rcx
  40684a:	add    rsi,QWORD PTR [rbx+0x68]
  40684e:	mov    QWORD PTR [rbx+0x18],rsi
  406852:	mov    esi,DWORD PTR [rbx+0x70]
  406855:	sub    esi,ecx
  406857:	cmp    esi,edx
  406859:	cmova  esi,edx
  40685c:	mov    DWORD PTR [rbx+0x24],esi
  40685f:	movzx  ecx,WORD PTR [rbx+0xea]
  406866:	cmp    WORD PTR [rbx+0xe8],cx
  40686d:	jae    406876 <flatcc_builder_end_table@@Base+0x136>
  40686f:	mov    WORD PTR [rbx+0xe8],cx
  406876:	movzx  ecx,WORD PTR [rax+0xc]
  40687a:	mov    WORD PTR [rbx+0xea],cx
  406881:	add    rax,0xffffffffffffffdc
  406885:	mov    QWORD PTR [rbx+0x30],rax
  406889:	add    DWORD PTR [rbx+0x104],0xffffffff
  406890:	mov    r15d,r14d
  406893:	jmp    406898 <flatcc_builder_end_table@@Base+0x158>
  406895:	xor    r15d,r15d
  406898:	mov    eax,r15d
  40689b:	add    rsp,0x10
  40689f:	pop    rbx
  4068a0:	pop    r12
  4068a2:	pop    r14
  4068a4:	pop    r15
  4068a6:	pop    rbp
  4068a7:	ret    
  4068a8:	lea    rdi,[rip+0x38a2]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  4068af:	lea    rsi,[rip+0x306c]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4068b6:	lea    rcx,[rip+0x39bc]        # 40a279 <flatcc_builder_padding_base@@Base+0xbe9>
  4068bd:	mov    edx,0x525
  4068c2:	call   403090 <__assert_fail@plt>
  4068c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004068d0 <flatcc_builder_create_vector@@Base>:
  4068d0:	push   rbp
  4068d1:	push   rbx
  4068d2:	sub    rsp,0x98
  4068d9:	cmp    rdx,r9
  4068dc:	ja     406a09 <flatcc_builder_create_vector@@Base+0x139>
  4068e2:	mov    rbx,rdi
  4068e5:	movzx  edi,r8w
  4068e9:	cmp    edi,0x4
  4068ec:	mov    eax,0x4
  4068f1:	cmova  eax,edi
  4068f4:	cmp    WORD PTR [rbx+0xe8],ax
  4068fb:	jae    406904 <flatcc_builder_create_vector@@Base+0x34>
  4068fd:	mov    WORD PTR [rbx+0xe8],ax
  406904:	imul   ecx,edx
  406907:	mov    DWORD PTR [rsp+0x4],edx
  40690b:	mov    ebp,DWORD PTR [rbx+0xf0]
  406911:	mov    edx,ebp
  406913:	sub    edx,ecx
  406915:	movzx  eax,ax
  406918:	add    eax,0xffffffff
  40691b:	and    eax,edx
  40691d:	mov    QWORD PTR [rsp+0x8],0x4
  406926:	lea    rdx,[rsp+0x4]
  40692b:	mov    QWORD PTR [rsp+0x18],rdx
  406930:	mov    QWORD PTR [rsp+0x20],0x4
  406939:	mov    DWORD PTR [rsp+0x10],0x1
  406941:	test   ecx,ecx
  406943:	je     4069d9 <flatcc_builder_create_vector@@Base+0x109>
  406949:	mov    ecx,ecx
  40694b:	lea    r8,[rcx+0x4]
  40694f:	mov    QWORD PTR [rsp+0x8],r8
  406954:	mov    QWORD PTR [rsp+0x28],rsi
  406959:	mov    QWORD PTR [rsp+0x30],rcx
  40695e:	mov    DWORD PTR [rsp+0x10],0x2
  406966:	mov    edx,0x2
  40696b:	test   eax,eax
  40696d:	je     406997 <flatcc_builder_create_vector@@Base+0xc7>
  40696f:	mov    eax,eax
  406971:	add    r8,rax
  406974:	mov    QWORD PTR [rsp+0x8],r8
  406979:	mov    ecx,edx
  40697b:	shl    rcx,0x4
  40697f:	lea    rsi,[rip+0x2d0a]        # 409690 <flatcc_builder_padding_base@@Base>
  406986:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40698b:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  406990:	add    edx,0x1
  406993:	mov    DWORD PTR [rsp+0x10],edx
  406997:	cmp    r8,0x11
  40699b:	setb   al
  40699e:	lea    rcx,[r8-0x10]
  4069a2:	shr    rcx,0x20
  4069a6:	sete   cl
  4069a9:	test   r8d,r8d
  4069ac:	jle    4069ea <flatcc_builder_create_vector@@Base+0x11a>
  4069ae:	or     al,cl
  4069b0:	je     4069ea <flatcc_builder_create_vector@@Base+0x11a>
  4069b2:	sub    ebp,r8d
  4069b5:	mov    rdi,QWORD PTR [rbx+0x38]
  4069b9:	lea    rsi,[rsp+0x18]
  4069be:	mov    ecx,ebp
  4069c0:	call   QWORD PTR [rbx+0x48]
  4069c3:	test   eax,eax
  4069c5:	jne    406a28 <flatcc_builder_create_vector@@Base+0x158>
  4069c7:	mov    DWORD PTR [rbx+0xf0],ebp
  4069cd:	mov    eax,ebp
  4069cf:	add    rsp,0x98
  4069d6:	pop    rbx
  4069d7:	pop    rbp
  4069d8:	ret    
  4069d9:	mov    edx,0x1
  4069de:	mov    r8d,0x4
  4069e4:	test   eax,eax
  4069e6:	jne    40696f <flatcc_builder_create_vector@@Base+0x9f>
  4069e8:	jmp    406997 <flatcc_builder_create_vector@@Base+0xc7>
  4069ea:	lea    rdi,[rip+0x40f1]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4069f1:	lea    rsi,[rip+0x2f2a]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4069f8:	lea    rcx,[rip+0x3fa2]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  4069ff:	mov    edx,0x287
  406a04:	call   403090 <__assert_fail@plt>
  406a09:	lea    rdi,[rip+0x38ab]        # 40a2bb <flatcc_builder_padding_base@@Base+0xc2b>
  406a10:	lea    rsi,[rip+0x2f0b]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406a17:	lea    rcx,[rip+0x38b0]        # 40a2ce <flatcc_builder_padding_base@@Base+0xc3e>
  406a1e:	mov    edx,0x555
  406a23:	call   403090 <__assert_fail@plt>
  406a28:	lea    rdi,[rip+0x40b3]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  406a2f:	lea    rsi,[rip+0x2eec]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406a36:	lea    rcx,[rip+0x3f64]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  406a3d:	mov    edx,0x28b
  406a42:	call   403090 <__assert_fail@plt>
  406a47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406a50 <flatcc_builder_end_vector@@Base>:
  406a50:	push   rbp
  406a51:	push   rbx
  406a52:	push   rax
  406a53:	mov    rax,QWORD PTR [rdi+0x30]
  406a57:	movzx  ecx,WORD PTR [rax+0xe]
  406a5b:	cmp    ecx,0x4
  406a5e:	jne    406afa <flatcc_builder_end_vector@@Base+0xaa>
  406a64:	mov    rbx,rdi
  406a67:	mov    rsi,QWORD PTR [rdi+0x18]
  406a6b:	mov    ecx,DWORD PTR [rax+0x10]
  406a6e:	mov    edx,DWORD PTR [rax+0x14]
  406a71:	movzx  r8d,WORD PTR [rdi+0xea]
  406a79:	mov    r9d,DWORD PTR [rax+0x18]
  406a7d:	call   4068d0 <flatcc_builder_create_vector@@Base>
  406a82:	mov    ebp,eax
  406a84:	test   eax,eax
  406a86:	je     406af1 <flatcc_builder_end_vector@@Base+0xa1>
  406a88:	mov    rdi,QWORD PTR [rbx+0x18]
  406a8c:	mov    edx,DWORD PTR [rbx+0x20]
  406a8f:	xor    esi,esi
  406a91:	call   4030a0 <memset@plt>
  406a96:	mov    rax,QWORD PTR [rbx+0x30]
  406a9a:	mov    ecx,DWORD PTR [rax+0x8]
  406a9d:	mov    DWORD PTR [rbx+0x20],ecx
  406aa0:	mov    ecx,DWORD PTR [rax]
  406aa2:	mov    DWORD PTR [rbx+0x28],ecx
  406aa5:	mov    edx,DWORD PTR [rax+0x4]
  406aa8:	mov    rsi,rcx
  406aab:	add    rsi,QWORD PTR [rbx+0x68]
  406aaf:	mov    QWORD PTR [rbx+0x18],rsi
  406ab3:	mov    esi,DWORD PTR [rbx+0x70]
  406ab6:	sub    esi,ecx
  406ab8:	cmp    esi,edx
  406aba:	cmova  esi,edx
  406abd:	mov    DWORD PTR [rbx+0x24],esi
  406ac0:	movzx  ecx,WORD PTR [rbx+0xea]
  406ac7:	cmp    WORD PTR [rbx+0xe8],cx
  406ace:	jae    406ad7 <flatcc_builder_end_vector@@Base+0x87>
  406ad0:	mov    WORD PTR [rbx+0xe8],cx
  406ad7:	movzx  ecx,WORD PTR [rax+0xc]
  406adb:	mov    WORD PTR [rbx+0xea],cx
  406ae2:	add    rax,0xffffffffffffffdc
  406ae6:	mov    QWORD PTR [rbx+0x30],rax
  406aea:	add    DWORD PTR [rbx+0x104],0xffffffff
  406af1:	mov    eax,ebp
  406af3:	add    rsp,0x8
  406af7:	pop    rbx
  406af8:	pop    rbp
  406af9:	ret    
  406afa:	lea    rdi,[rip+0x315e]        # 409c5f <flatcc_builder_padding_base@@Base+0x5cf>
  406b01:	lea    rsi,[rip+0x2e1a]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406b08:	lea    rcx,[rip+0x3835]        # 40a344 <flatcc_builder_padding_base@@Base+0xcb4>
  406b0f:	mov    edx,0x578
  406b14:	call   403090 <__assert_fail@plt>
  406b19:	nop    DWORD PTR [rax+0x0]

0000000000406b20 <flatcc_builder_vector_count@@Base>:
  406b20:	mov    rax,QWORD PTR [rdi+0x30]
  406b24:	mov    eax,DWORD PTR [rax+0x14]
  406b27:	ret    
  406b28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406b30 <flatcc_builder_vector_edit@@Base>:
  406b30:	mov    rax,QWORD PTR [rdi+0x18]
  406b34:	ret    
  406b35:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b3f:	nop

0000000000406b40 <flatcc_builder_create_offset_vector_direct@@Base>:
  406b40:	xor    ecx,ecx
  406b42:	jmp    406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406b44:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b4e:	xchg   ax,ax
  406b50:	push   r14
  406b52:	push   rbx
  406b53:	sub    rsp,0x98
  406b5a:	mov    r10,rdx
  406b5d:	xor    ebx,ebx
  406b5f:	test   r10d,0xc0000000
  406b66:	jne    406cba <flatcc_builder_create_offset_vector_direct@@Base+0x17a>
  406b6c:	mov    r14,rdi
  406b6f:	movzx  edx,WORD PTR [rdi+0xe8]
  406b76:	cmp    edx,0x3
  406b79:	ja     406b85 <flatcc_builder_create_offset_vector_direct@@Base+0x45>
  406b7b:	mov    WORD PTR [r14+0xe8],0x4
  406b85:	lea    r8d,[r10*4+0x0]
  406b8d:	mov    DWORD PTR [rsp+0x4],r10d
  406b92:	mov    ebx,DWORD PTR [r14+0xf0]
  406b99:	mov    r9d,ebx
  406b9c:	and    r9d,0x3
  406ba0:	mov    QWORD PTR [rsp+0x8],0x4
  406ba9:	lea    rdx,[rsp+0x4]
  406bae:	mov    QWORD PTR [rsp+0x18],rdx
  406bb3:	mov    QWORD PTR [rsp+0x20],0x4
  406bbc:	mov    DWORD PTR [rsp+0x10],0x1
  406bc4:	test   r8d,r8d
  406bc7:	je     406cc7 <flatcc_builder_create_offset_vector_direct@@Base+0x187>
  406bcd:	mov    edx,r8d
  406bd0:	lea    r8,[rdx+0x4]
  406bd4:	mov    QWORD PTR [rsp+0x8],r8
  406bd9:	mov    QWORD PTR [rsp+0x28],rsi
  406bde:	mov    QWORD PTR [rsp+0x30],rdx
  406be3:	mov    DWORD PTR [rsp+0x10],0x2
  406beb:	mov    edx,0x2
  406bf0:	test   r9d,r9d
  406bf3:	je     406c1b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406bf5:	add    r8,r9
  406bf8:	mov    QWORD PTR [rsp+0x8],r8
  406bfd:	mov    edi,edx
  406bff:	shl    rdi,0x4
  406c03:	lea    rax,[rip+0x2a86]        # 409690 <flatcc_builder_padding_base@@Base>
  406c0a:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  406c0f:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406c14:	add    edx,0x1
  406c17:	mov    DWORD PTR [rsp+0x10],edx
  406c1b:	test   r10d,r10d
  406c1e:	je     406c76 <flatcc_builder_create_offset_vector_direct@@Base+0x136>
  406c20:	mov    edi,0xfffffffc
  406c25:	sub    edi,ebx
  406c27:	add    edi,r8d
  406c2a:	mov    r9d,r10d
  406c2d:	xor    ebx,ebx
  406c2f:	nop
  406c30:	mov    eax,DWORD PTR [rsi+rbx*4]
  406c33:	test   eax,eax
  406c35:	je     406c50 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
  406c37:	add    eax,edi
  406c39:	mov    DWORD PTR [rsi+rbx*4],eax
  406c3c:	test   rcx,rcx
  406c3f:	je     406c63 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  406c41:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406c45:	jne    406c63 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  406c47:	jmp    406ce0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a0>
  406c4c:	nop    DWORD PTR [rax+0x0]
  406c50:	test   rcx,rcx
  406c53:	je     406cff <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  406c59:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406c5d:	jne    406d1e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  406c63:	add    rbx,0x1
  406c67:	add    edi,0xfffffffc
  406c6a:	cmp    rbx,r9
  406c6d:	jb     406c30 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406c6f:	mov    ebx,DWORD PTR [r14+0xf0]
  406c76:	cmp    r8,0x11
  406c7a:	setb   al
  406c7d:	lea    rcx,[r8-0x10]
  406c81:	shr    rcx,0x20
  406c85:	sete   cl
  406c88:	test   r8d,r8d
  406c8b:	jle    406d3d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406c91:	or     al,cl
  406c93:	je     406d3d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406c99:	sub    ebx,r8d
  406c9c:	mov    rdi,QWORD PTR [r14+0x38]
  406ca0:	lea    rsi,[rsp+0x18]
  406ca5:	mov    ecx,ebx
  406ca7:	call   QWORD PTR [r14+0x48]
  406cab:	test   eax,eax
  406cad:	jne    406d5c <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406cb3:	mov    DWORD PTR [r14+0xf0],ebx
  406cba:	mov    eax,ebx
  406cbc:	add    rsp,0x98
  406cc3:	pop    rbx
  406cc4:	pop    r14
  406cc6:	ret    
  406cc7:	mov    edx,0x1
  406ccc:	mov    r8d,0x4
  406cd2:	test   r9d,r9d
  406cd5:	jne    406bf5 <flatcc_builder_create_offset_vector_direct@@Base+0xb5>
  406cdb:	jmp    406c1b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406ce0:	lea    rdi,[rip+0x3def]        # 40aad6 <flatcc_builder_padding_base@@Base+0x1446>
  406ce7:	lea    rsi,[rip+0x2c34]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406cee:	lea    rcx,[rip+0x3def]        # 40aae4 <flatcc_builder_padding_base@@Base+0x1454>
  406cf5:	mov    edx,0x5b1
  406cfa:	call   403090 <__assert_fail@plt>
  406cff:	lea    rdi,[rip+0x3ddc]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  406d06:	lea    rsi,[rip+0x2c15]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406d0d:	lea    rcx,[rip+0x3dd0]        # 40aae4 <flatcc_builder_padding_base@@Base+0x1454>
  406d14:	mov    edx,0x5b7
  406d19:	call   403090 <__assert_fail@plt>
  406d1e:	lea    rdi,[rip+0x3e42]        # 40ab67 <flatcc_builder_padding_base@@Base+0x14d7>
  406d25:	lea    rsi,[rip+0x2bf6]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406d2c:	lea    rcx,[rip+0x3db1]        # 40aae4 <flatcc_builder_padding_base@@Base+0x1454>
  406d33:	mov    edx,0x5b5
  406d38:	call   403090 <__assert_fail@plt>
  406d3d:	lea    rdi,[rip+0x3d9e]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  406d44:	lea    rsi,[rip+0x2bd7]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406d4b:	lea    rcx,[rip+0x3c4f]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  406d52:	mov    edx,0x287
  406d57:	call   403090 <__assert_fail@plt>
  406d5c:	lea    rdi,[rip+0x3d7f]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  406d63:	lea    rsi,[rip+0x2bb8]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406d6a:	lea    rcx,[rip+0x3c30]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  406d71:	mov    edx,0x28b
  406d76:	call   403090 <__assert_fail@plt>
  406d7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406d80 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406d80:	push   rbp
  406d81:	push   rbx
  406d82:	push   rax
  406d83:	mov    rcx,QWORD PTR [rdi+0x30]
  406d87:	movzx  edx,WORD PTR [rcx+0xe]
  406d8b:	cmp    edx,0x5
  406d8e:	jne    406e21 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa1>
  406d94:	mov    rax,rsi
  406d97:	mov    rbx,rdi
  406d9a:	mov    rsi,QWORD PTR [rdi+0x18]
  406d9e:	mov    edx,DWORD PTR [rcx+0x14]
  406da1:	mov    rcx,rax
  406da4:	call   406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406da9:	mov    ebp,eax
  406dab:	test   eax,eax
  406dad:	je     406e18 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
  406daf:	mov    rdi,QWORD PTR [rbx+0x18]
  406db3:	mov    edx,DWORD PTR [rbx+0x20]
  406db6:	xor    esi,esi
  406db8:	call   4030a0 <memset@plt>
  406dbd:	mov    rax,QWORD PTR [rbx+0x30]
  406dc1:	mov    ecx,DWORD PTR [rax+0x8]
  406dc4:	mov    DWORD PTR [rbx+0x20],ecx
  406dc7:	mov    ecx,DWORD PTR [rax]
  406dc9:	mov    DWORD PTR [rbx+0x28],ecx
  406dcc:	mov    edx,DWORD PTR [rax+0x4]
  406dcf:	mov    rsi,rcx
  406dd2:	add    rsi,QWORD PTR [rbx+0x68]
  406dd6:	mov    QWORD PTR [rbx+0x18],rsi
  406dda:	mov    esi,DWORD PTR [rbx+0x70]
  406ddd:	sub    esi,ecx
  406ddf:	cmp    esi,edx
  406de1:	cmova  esi,edx
  406de4:	mov    DWORD PTR [rbx+0x24],esi
  406de7:	movzx  ecx,WORD PTR [rbx+0xea]
  406dee:	cmp    WORD PTR [rbx+0xe8],cx
  406df5:	jae    406dfe <flatcc_builder_end_offset_vector_for_unions@@Base+0x7e>
  406df7:	mov    WORD PTR [rbx+0xe8],cx
  406dfe:	movzx  ecx,WORD PTR [rax+0xc]
  406e02:	mov    WORD PTR [rbx+0xea],cx
  406e09:	add    rax,0xffffffffffffffdc
  406e0d:	mov    QWORD PTR [rbx+0x30],rax
  406e11:	add    DWORD PTR [rbx+0x104],0xffffffff
  406e18:	mov    eax,ebp
  406e1a:	add    rsp,0x8
  406e1e:	pop    rbx
  406e1f:	pop    rbp
  406e20:	ret    
  406e21:	lea    rdi,[rip+0x2f30]        # 409d58 <flatcc_builder_padding_base@@Base+0x6c8>
  406e28:	lea    rsi,[rip+0x2af3]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406e2f:	lea    rcx,[rip+0x359b]        # 40a3d1 <flatcc_builder_padding_base@@Base+0xd41>
  406e36:	mov    edx,0x5d5
  406e3b:	call   403090 <__assert_fail@plt>

0000000000406e40 <flatcc_builder_offset_vector_edit@@Base>:
  406e40:	mov    rax,QWORD PTR [rdi+0x18]
  406e44:	ret    
  406e45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e4f:	nop

0000000000406e50 <flatcc_builder_offset_vector_count@@Base>:
  406e50:	mov    rax,QWORD PTR [rdi+0x30]
  406e54:	mov    eax,DWORD PTR [rax+0x14]
  406e57:	ret    
  406e58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406e60 <flatcc_builder_table_add_union@@Base>:
  406e60:	push   rbp
  406e61:	push   r15
  406e63:	push   r14
  406e65:	push   rbx
  406e66:	push   rax
  406e67:	mov    rax,QWORD PTR [rdi+0x30]
  406e6b:	movzx  eax,WORD PTR [rax+0xe]
  406e6f:	cmp    eax,0x3
  406e72:	jne    406ed1 <flatcc_builder_table_add_union@@Base+0x71>
  406e74:	mov    r14,rdx
  406e77:	mov    ebp,esi
  406e79:	mov    r15,rdi
  406e7c:	mov    rbx,rdx
  406e7f:	shr    rbx,0x20
  406e83:	test   r14b,r14b
  406e86:	jne    406e8c <flatcc_builder_table_add_union@@Base+0x2c>
  406e88:	test   ebx,ebx
  406e8a:	jne    406ef0 <flatcc_builder_table_add_union@@Base+0x90>
  406e8c:	test   ebx,ebx
  406e8e:	je     406ea5 <flatcc_builder_table_add_union@@Base+0x45>
  406e90:	mov    rdi,r15
  406e93:	mov    esi,ebp
  406e95:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  406e9a:	test   rax,rax
  406e9d:	je     406f2e <flatcc_builder_table_add_union@@Base+0xce>
  406ea3:	mov    DWORD PTR [rax],ebx
  406ea5:	add    ebp,0xffffffff
  406ea8:	mov    edx,0x1
  406ead:	mov    ecx,0x1
  406eb2:	mov    rdi,r15
  406eb5:	mov    esi,ebp
  406eb7:	call   4070b0 <flatcc_builder_table_add@@Base>
  406ebc:	test   rax,rax
  406ebf:	je     406f0f <flatcc_builder_table_add_union@@Base+0xaf>
  406ec1:	mov    BYTE PTR [rax],r14b
  406ec4:	xor    eax,eax
  406ec6:	add    rsp,0x8
  406eca:	pop    rbx
  406ecb:	pop    r14
  406ecd:	pop    r15
  406ecf:	pop    rbp
  406ed0:	ret    
  406ed1:	lea    rdi,[rip+0x3279]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  406ed8:	lea    rsi,[rip+0x2a43]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406edf:	lea    rcx,[rip+0x355d]        # 40a443 <flatcc_builder_padding_base@@Base+0xdb3>
  406ee6:	mov    edx,0x5ee
  406eeb:	call   403090 <__assert_fail@plt>
  406ef0:	lea    rdi,[rip+0x35a4]        # 40a49b <flatcc_builder_padding_base@@Base+0xe0b>
  406ef7:	lea    rsi,[rip+0x2a24]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406efe:	lea    rcx,[rip+0x353e]        # 40a443 <flatcc_builder_padding_base@@Base+0xdb3>
  406f05:	mov    edx,0x5ef
  406f0a:	call   403090 <__assert_fail@plt>
  406f0f:	lea    rdi,[rip+0x35b1]        # 40a4c7 <flatcc_builder_padding_base@@Base+0xe37>
  406f16:	lea    rsi,[rip+0x2a05]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406f1d:	lea    rcx,[rip+0x351f]        # 40a443 <flatcc_builder_padding_base@@Base+0xdb3>
  406f24:	mov    edx,0x5f6
  406f29:	call   403090 <__assert_fail@plt>
  406f2e:	lea    rdi,[rip+0x3588]        # 40a4bd <flatcc_builder_padding_base@@Base+0xe2d>
  406f35:	lea    rsi,[rip+0x29e6]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  406f3c:	lea    rcx,[rip+0x3500]        # 40a443 <flatcc_builder_padding_base@@Base+0xdb3>
  406f43:	mov    edx,0x5f2
  406f48:	call   403090 <__assert_fail@plt>
  406f4d:	nop    DWORD PTR [rax]

0000000000406f50 <flatcc_builder_table_add_offset@@Base>:
  406f50:	push   rbp
  406f51:	push   r15
  406f53:	push   r14
  406f55:	push   rbx
  406f56:	push   rax
  406f57:	mov    rax,QWORD PTR [rdi+0x30]
  406f5b:	movzx  eax,WORD PTR [rax+0xe]
  406f5f:	cmp    eax,0x3
  406f62:	jne    40704e <flatcc_builder_table_add_offset@@Base+0xfe>
  406f68:	mov    r14d,esi
  406f6b:	cmp    esi,0x7ffd
  406f71:	jae    40706d <flatcc_builder_table_add_offset@@Base+0x11d>
  406f77:	mov    rbx,rdi
  406f7a:	mov    rax,QWORD PTR [rdi+0x8]
  406f7e:	movsxd rcx,r14d
  406f81:	cmp    WORD PTR [rax+rcx*2],0x0
  406f86:	jne    40708c <flatcc_builder_table_add_offset@@Base+0x13c>
  406f8c:	mov    ecx,DWORD PTR [rbx+0x14]
  406f8f:	xor    ecx,r14d
  406f92:	imul   ecx,ecx,0x9e3779b1
  406f98:	xor    ecx,0x4
  406f9b:	imul   ecx,ecx,0x9e3779b1
  406fa1:	mov    DWORD PTR [rbx+0x14],ecx
  406fa4:	mov    ebp,DWORD PTR [rbx+0x20]
  406fa7:	mov    ecx,DWORD PTR [rbx+0x24]
  406faa:	add    ebp,0x3
  406fad:	and    ebp,0xfffffffc
  406fb0:	lea    r15,[rbp+0x4]
  406fb4:	mov    DWORD PTR [rbx+0x20],r15d
  406fb8:	cmp    ecx,r15d
  406fbb:	jae    407017 <flatcc_builder_table_add_offset@@Base+0xc7>
  406fbd:	lea    eax,[rbp+0x4]
  406fc0:	lea    rsi,[rbx+0x68]
  406fc4:	mov    rdi,QWORD PTR [rbx+0x40]
  406fc8:	mov    edx,DWORD PTR [rbx+0x28]
  406fcb:	add    rdx,rax
  406fce:	mov    ecx,0x1
  406fd3:	mov    r8d,0x1
  406fd9:	call   QWORD PTR [rbx+0x50]
  406fdc:	test   eax,eax
  406fde:	je     406fe4 <flatcc_builder_table_add_offset@@Base+0x94>
  406fe0:	xor    ebp,ebp
  406fe2:	jmp    407040 <flatcc_builder_table_add_offset@@Base+0xf0>
  406fe4:	mov    eax,DWORD PTR [rbx+0x28]
  406fe7:	mov    rcx,rax
  406fea:	add    rcx,QWORD PTR [rbx+0x68]
  406fee:	mov    QWORD PTR [rbx+0x18],rcx
  406ff2:	mov    ecx,DWORD PTR [rbx+0x70]
  406ff5:	sub    ecx,eax
  406ff7:	cmp    ecx,0xfffc
  406ffd:	mov    eax,0xfffc
  407002:	cmovb  eax,ecx
  407005:	mov    DWORD PTR [rbx+0x24],eax
  407008:	mov    rax,QWORD PTR [rbx+0x30]
  40700c:	mov    DWORD PTR [rax+0x4],0xfffc
  407013:	mov    rax,QWORD PTR [rbx+0x8]
  407017:	movzx  ecx,r14w
  40701b:	mov    WORD PTR [rax+rcx*2],r15w
  407020:	cmp    WORD PTR [rbx+0x10],cx
  407024:	ja     40702f <flatcc_builder_table_add_offset@@Base+0xdf>
  407026:	add    r14d,0x1
  40702a:	mov    WORD PTR [rbx+0x10],r14w
  40702f:	mov    rax,QWORD PTR [rbx]
  407032:	lea    rcx,[rax+0x2]
  407036:	mov    QWORD PTR [rbx],rcx
  407039:	mov    WORD PTR [rax],bp
  40703c:	add    rbp,QWORD PTR [rbx+0x18]
  407040:	mov    rax,rbp
  407043:	add    rsp,0x8
  407047:	pop    rbx
  407048:	pop    r14
  40704a:	pop    r15
  40704c:	pop    rbp
  40704d:	ret    
  40704e:	lea    rdi,[rip+0x30fc]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  407055:	lea    rsi,[rip+0x28c6]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40705c:	lea    rcx,[rip+0x37e2]        # 40a845 <flatcc_builder_padding_base@@Base+0x11b5>
  407063:	mov    edx,0x713
  407068:	call   403090 <__assert_fail@plt>
  40706d:	lea    rdi,[rip+0x3751]        # 40a7c5 <flatcc_builder_padding_base@@Base+0x1135>
  407074:	lea    rsi,[rip+0x28a7]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40707b:	lea    rcx,[rip+0x37c3]        # 40a845 <flatcc_builder_padding_base@@Base+0x11b5>
  407082:	mov    edx,0x714
  407087:	call   403090 <__assert_fail@plt>
  40708c:	lea    rdi,[rip+0x3a4f]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  407093:	lea    rsi,[rip+0x2888]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40709a:	lea    rcx,[rip+0x37a4]        # 40a845 <flatcc_builder_padding_base@@Base+0x11b5>
  4070a1:	mov    edx,0x71b
  4070a6:	call   403090 <__assert_fail@plt>
  4070ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004070b0 <flatcc_builder_table_add@@Base>:
  4070b0:	push   rbp
  4070b1:	push   r14
  4070b3:	push   rbx
  4070b4:	mov    rax,QWORD PTR [rdi+0x30]
  4070b8:	movzx  eax,WORD PTR [rax+0xe]
  4070bc:	cmp    eax,0x3
  4070bf:	jne    4071ac <flatcc_builder_table_add@@Base+0xfc>
  4070c5:	mov    r14d,esi
  4070c8:	cmp    esi,0x7ffd
  4070ce:	jae    4071cb <flatcc_builder_table_add@@Base+0x11b>
  4070d4:	mov    rbx,rdi
  4070d7:	cmp    WORD PTR [rdi+0xea],cx
  4070de:	jae    4070e7 <flatcc_builder_table_add@@Base+0x37>
  4070e0:	mov    WORD PTR [rbx+0xea],cx
  4070e7:	mov    rsi,QWORD PTR [rbx+0x8]
  4070eb:	movsxd rax,r14d
  4070ee:	cmp    WORD PTR [rsi+rax*2],0x0
  4070f3:	jne    4071ea <flatcc_builder_table_add@@Base+0x13a>
  4070f9:	mov    eax,DWORD PTR [rbx+0x14]
  4070fc:	xor    eax,r14d
  4070ff:	imul   eax,eax,0x9e3779b1
  407105:	xor    eax,edx
  407107:	imul   eax,eax,0x9e3779b1
  40710d:	mov    DWORD PTR [rbx+0x14],eax
  407110:	mov    eax,DWORD PTR [rbx+0x20]
  407113:	movzx  ebp,cx
  407116:	lea    eax,[rax+rbp*1]
  407119:	add    eax,0xffffffff
  40711c:	neg    ebp
  40711e:	and    ebp,eax
  407120:	add    edx,ebp
  407122:	mov    DWORD PTR [rbx+0x20],edx
  407125:	cmp    edx,DWORD PTR [rbx+0x24]
  407128:	jb     407187 <flatcc_builder_table_add@@Base+0xd7>
  40712a:	add    edx,0x1
  40712d:	lea    rsi,[rbx+0x68]
  407131:	mov    rdi,QWORD PTR [rbx+0x40]
  407135:	mov    eax,DWORD PTR [rbx+0x28]
  407138:	add    rax,rdx
  40713b:	mov    ecx,0x1
  407140:	mov    r8d,0x1
  407146:	mov    rdx,rax
  407149:	call   QWORD PTR [rbx+0x50]
  40714c:	test   eax,eax
  40714e:	je     407154 <flatcc_builder_table_add@@Base+0xa4>
  407150:	xor    eax,eax
  407152:	jmp    4071a7 <flatcc_builder_table_add@@Base+0xf7>
  407154:	mov    eax,DWORD PTR [rbx+0x28]
  407157:	mov    rcx,rax
  40715a:	add    rcx,QWORD PTR [rbx+0x68]
  40715e:	mov    QWORD PTR [rbx+0x18],rcx
  407162:	mov    ecx,DWORD PTR [rbx+0x70]
  407165:	sub    ecx,eax
  407167:	cmp    ecx,0xfffc
  40716d:	mov    eax,0xfffc
  407172:	cmovb  eax,ecx
  407175:	mov    DWORD PTR [rbx+0x24],eax
  407178:	mov    rax,QWORD PTR [rbx+0x30]
  40717c:	mov    DWORD PTR [rax+0x4],0xfffc
  407183:	mov    rsi,QWORD PTR [rbx+0x8]
  407187:	mov    eax,ebp
  407189:	add    ebp,0x4
  40718c:	movzx  ecx,r14w
  407190:	mov    WORD PTR [rsi+rcx*2],bp
  407194:	cmp    WORD PTR [rbx+0x10],cx
  407198:	ja     4071a3 <flatcc_builder_table_add@@Base+0xf3>
  40719a:	add    r14d,0x1
  40719e:	mov    WORD PTR [rbx+0x10],r14w
  4071a3:	add    rax,QWORD PTR [rbx+0x18]
  4071a7:	pop    rbx
  4071a8:	pop    r14
  4071aa:	pop    rbp
  4071ab:	ret    
  4071ac:	lea    rdi,[rip+0x2f9e]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  4071b3:	lea    rsi,[rip+0x2768]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4071ba:	lea    rcx,[rip+0x35ba]        # 40a77b <flatcc_builder_padding_base@@Base+0x10eb>
  4071c1:	mov    edx,0x6ed
  4071c6:	call   403090 <__assert_fail@plt>
  4071cb:	lea    rdi,[rip+0x35f3]        # 40a7c5 <flatcc_builder_padding_base@@Base+0x1135>
  4071d2:	lea    rsi,[rip+0x2749]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4071d9:	lea    rcx,[rip+0x359b]        # 40a77b <flatcc_builder_padding_base@@Base+0x10eb>
  4071e0:	mov    edx,0x6ee
  4071e5:	call   403090 <__assert_fail@plt>
  4071ea:	lea    rdi,[rip+0x38f1]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4071f1:	lea    rsi,[rip+0x272a]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4071f8:	lea    rcx,[rip+0x357c]        # 40a77b <flatcc_builder_padding_base@@Base+0x10eb>
  4071ff:	mov    edx,0x6f8
  407204:	call   403090 <__assert_fail@plt>
  407209:	nop    DWORD PTR [rax+0x0]

0000000000407210 <flatcc_builder_table_add_union_vector@@Base>:
  407210:	push   r15
  407212:	push   r14
  407214:	push   r12
  407216:	push   rbx
  407217:	push   rax
  407218:	mov    rax,QWORD PTR [rdi+0x30]
  40721c:	movzx  eax,WORD PTR [rax+0xe]
  407220:	cmp    eax,0x3
  407223:	jne    407279 <flatcc_builder_table_add_union_vector@@Base+0x69>
  407225:	mov    rbx,rdx
  407228:	mov    r12,rdx
  40722b:	shr    r12,0x20
  40722f:	test   ebx,ebx
  407231:	sete   al
  407234:	test   r12d,r12d
  407237:	sete   cl
  40723a:	cmp    al,cl
  40723c:	jne    407298 <flatcc_builder_table_add_union_vector@@Base+0x88>
  40723e:	test   ebx,ebx
  407240:	je     40726b <flatcc_builder_table_add_union_vector@@Base+0x5b>
  407242:	mov    r14d,esi
  407245:	mov    r15,rdi
  407248:	lea    esi,[r14-0x1]
  40724c:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  407251:	test   rax,rax
  407254:	je     4072b7 <flatcc_builder_table_add_union_vector@@Base+0xa7>
  407256:	mov    DWORD PTR [rax],ebx
  407258:	mov    rdi,r15
  40725b:	mov    esi,r14d
  40725e:	call   406f50 <flatcc_builder_table_add_offset@@Base>
  407263:	test   rax,rax
  407266:	je     4072d6 <flatcc_builder_table_add_union_vector@@Base+0xc6>
  407268:	mov    DWORD PTR [rax],r12d
  40726b:	xor    eax,eax
  40726d:	add    rsp,0x8
  407271:	pop    rbx
  407272:	pop    r12
  407274:	pop    r14
  407276:	pop    r15
  407278:	ret    
  407279:	lea    rdi,[rip+0x2ed1]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  407280:	lea    rsi,[rip+0x269b]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407287:	lea    rcx,[rip+0x3245]        # 40a4d3 <flatcc_builder_padding_base@@Base+0xe43>
  40728e:	mov    edx,0x600
  407293:	call   403090 <__assert_fail@plt>
  407298:	lea    rdi,[rip+0x3297]        # 40a536 <flatcc_builder_padding_base@@Base+0xea6>
  40729f:	lea    rsi,[rip+0x267c]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4072a6:	lea    rcx,[rip+0x3226]        # 40a4d3 <flatcc_builder_padding_base@@Base+0xe43>
  4072ad:	mov    edx,0x601
  4072b2:	call   403090 <__assert_fail@plt>
  4072b7:	lea    rdi,[rip+0x31ff]        # 40a4bd <flatcc_builder_padding_base@@Base+0xe2d>
  4072be:	lea    rsi,[rip+0x265d]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4072c5:	lea    rcx,[rip+0x3207]        # 40a4d3 <flatcc_builder_padding_base@@Base+0xe43>
  4072cc:	mov    edx,0x604
  4072d1:	call   403090 <__assert_fail@plt>
  4072d6:	lea    rdi,[rip+0x31e0]        # 40a4bd <flatcc_builder_padding_base@@Base+0xe2d>
  4072dd:	lea    rsi,[rip+0x263e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4072e4:	lea    rcx,[rip+0x31e8]        # 40a4d3 <flatcc_builder_padding_base@@Base+0xe43>
  4072eb:	mov    edx,0x608
  4072f0:	call   403090 <__assert_fail@plt>
  4072f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4072ff:	nop

0000000000407300 <flatcc_builder_create_union_vector@@Base>:
  407300:	push   r15
  407302:	push   r14
  407304:	push   r13
  407306:	push   r12
  407308:	push   rbx
  407309:	mov    r14,rdx
  40730c:	mov    r15,rsi
  40730f:	mov    rbx,rdi
  407312:	mov    esi,0x4
  407317:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  40731c:	test   eax,eax
  40731e:	je     407330 <flatcc_builder_create_union_vector@@Base+0x30>
  407320:	xor    r14d,r14d
  407323:	mov    rax,r14
  407326:	pop    rbx
  407327:	pop    r12
  407329:	pop    r13
  40732b:	pop    r14
  40732d:	pop    r15
  40732f:	ret    
  407330:	mov    rax,QWORD PTR [rbx+0x30]
  407334:	mov    DWORD PTR [rax+0x10],0x4
  40733b:	mov    rax,QWORD PTR [rbx+0x30]
  40733f:	mov    DWORD PTR [rax+0x14],0x0
  407346:	mov    rax,QWORD PTR [rbx+0x30]
  40734a:	mov    WORD PTR [rax+0xe],0x5
  407350:	mov    ecx,DWORD PTR [rbx+0x28]
  407353:	mov    edx,DWORD PTR [rbx+0x70]
  407356:	sub    edx,ecx
  407358:	add    rcx,QWORD PTR [rbx+0x68]
  40735c:	mov    QWORD PTR [rbx+0x18],rcx
  407360:	cmp    edx,0xfffffffc
  407363:	mov    ecx,0xfffffffc
  407368:	cmovb  ecx,edx
  40736b:	mov    DWORD PTR [rbx+0x24],ecx
  40736e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407375:	mov    ecx,DWORD PTR [rax+0x14]
  407378:	add    ecx,r14d
  40737b:	jb     4075ea <flatcc_builder_create_union_vector@@Base+0x2ea>
  407381:	cmp    ecx,0x40000000
  407387:	jae    4075ea <flatcc_builder_create_union_vector@@Base+0x2ea>
  40738d:	mov    DWORD PTR [rax+0x14],ecx
  407390:	mov    r12d,DWORD PTR [rbx+0x20]
  407394:	mov    eax,DWORD PTR [rbx+0x24]
  407397:	lea    ecx,[r12+r14*4]
  40739b:	mov    DWORD PTR [rbx+0x20],ecx
  40739e:	cmp    ecx,eax
  4073a0:	jae    4073b0 <flatcc_builder_create_union_vector@@Base+0xb0>
  4073a2:	mov    rsi,QWORD PTR [rbx+0x18]
  4073a6:	add    r12,rsi
  4073a9:	jne    40740c <flatcc_builder_create_union_vector@@Base+0x10c>
  4073ab:	jmp    407320 <flatcc_builder_create_union_vector@@Base+0x20>
  4073b0:	add    ecx,0x1
  4073b3:	lea    rsi,[rbx+0x68]
  4073b7:	mov    rdi,QWORD PTR [rbx+0x40]
  4073bb:	mov    edx,DWORD PTR [rbx+0x28]
  4073be:	add    rdx,rcx
  4073c1:	mov    ecx,0x1
  4073c6:	mov    r8d,0x1
  4073cc:	call   QWORD PTR [rbx+0x50]
  4073cf:	test   eax,eax
  4073d1:	jne    407320 <flatcc_builder_create_union_vector@@Base+0x20>
  4073d7:	mov    eax,DWORD PTR [rbx+0x28]
  4073da:	mov    rsi,rax
  4073dd:	add    rsi,QWORD PTR [rbx+0x68]
  4073e1:	mov    QWORD PTR [rbx+0x18],rsi
  4073e5:	mov    ecx,DWORD PTR [rbx+0x70]
  4073e8:	sub    ecx,eax
  4073ea:	cmp    ecx,0xfffffffc
  4073ed:	mov    eax,0xfffffffc
  4073f2:	cmovb  eax,ecx
  4073f5:	mov    DWORD PTR [rbx+0x24],eax
  4073f8:	mov    rcx,QWORD PTR [rbx+0x30]
  4073fc:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407403:	add    r12,rsi
  407406:	je     407320 <flatcc_builder_create_union_vector@@Base+0x20>
  40740c:	mov    r13d,DWORD PTR [rbx+0x20]
  407410:	lea    ecx,[r14+r13*1]
  407414:	mov    DWORD PTR [rbx+0x20],ecx
  407417:	cmp    ecx,eax
  407419:	jb     40746e <flatcc_builder_create_union_vector@@Base+0x16e>
  40741b:	add    ecx,0x1
  40741e:	lea    rsi,[rbx+0x68]
  407422:	mov    rdi,QWORD PTR [rbx+0x40]
  407426:	mov    edx,DWORD PTR [rbx+0x28]
  407429:	add    rdx,rcx
  40742c:	mov    ecx,0x1
  407431:	mov    r8d,0x1
  407437:	call   QWORD PTR [rbx+0x50]
  40743a:	test   eax,eax
  40743c:	jne    407320 <flatcc_builder_create_union_vector@@Base+0x20>
  407442:	mov    eax,DWORD PTR [rbx+0x28]
  407445:	mov    rsi,rax
  407448:	add    rsi,QWORD PTR [rbx+0x68]
  40744c:	mov    QWORD PTR [rbx+0x18],rsi
  407450:	mov    ecx,DWORD PTR [rbx+0x70]
  407453:	sub    ecx,eax
  407455:	cmp    ecx,0xfffffffc
  407458:	mov    eax,0xfffffffc
  40745d:	cmovb  eax,ecx
  407460:	mov    DWORD PTR [rbx+0x24],eax
  407463:	mov    rax,QWORD PTR [rbx+0x30]
  407467:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40746e:	mov    r12,rsi
  407471:	add    r12,r13
  407474:	je     407320 <flatcc_builder_create_union_vector@@Base+0x20>
  40747a:	test   r14,r14
  40747d:	je     407539 <flatcc_builder_create_union_vector@@Base+0x239>
  407483:	lea    rcx,[r14-0x1]
  407487:	mov    r8d,r14d
  40748a:	and    r8d,0x3
  40748e:	cmp    rcx,0x3
  407492:	jae    4074a0 <flatcc_builder_create_union_vector@@Base+0x1a0>
  407494:	xor    ecx,ecx
  407496:	test   r8,r8
  407499:	jne    407507 <flatcc_builder_create_union_vector@@Base+0x207>
  40749b:	jmp    407539 <flatcc_builder_create_union_vector@@Base+0x239>
  4074a0:	mov    rdx,r14
  4074a3:	sub    rdx,r8
  4074a6:	lea    rdi,[rsi+r13*1]
  4074aa:	add    rdi,0x3
  4074ae:	xor    ecx,ecx
  4074b0:	movzx  eax,BYTE PTR [r15+rcx*8]
  4074b5:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  4074b9:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  4074be:	mov    DWORD PTR [rsi+rcx*4],eax
  4074c1:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  4074c7:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  4074cb:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  4074d0:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  4074d4:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  4074da:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  4074de:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  4074e3:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  4074e7:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  4074ed:	mov    BYTE PTR [rdi+rcx*1],al
  4074f0:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  4074f5:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  4074f9:	add    rcx,0x4
  4074fd:	cmp    rdx,rcx
  407500:	jne    4074b0 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407502:	test   r8,r8
  407505:	je     407539 <flatcc_builder_create_union_vector@@Base+0x239>
  407507:	lea    rdx,[rsi+rcx*4]
  40750b:	lea    rdi,[r15+rcx*8]
  40750f:	add    rdi,0x4
  407513:	add    r13,rcx
  407516:	add    r13,rsi
  407519:	xor    ecx,ecx
  40751b:	nop    DWORD PTR [rax+rax*1+0x0]
  407520:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407525:	mov    BYTE PTR [r13+rcx*1+0x0],al
  40752a:	mov    eax,DWORD PTR [rdi+rcx*8]
  40752d:	mov    DWORD PTR [rdx+rcx*4],eax
  407530:	add    rcx,0x1
  407534:	cmp    r8,rcx
  407537:	jne    407520 <flatcc_builder_create_union_vector@@Base+0x220>
  407539:	mov    rdi,rbx
  40753c:	mov    rdx,r14
  40753f:	mov    rcx,r12
  407542:	call   406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407547:	mov    r15d,eax
  40754a:	test   eax,eax
  40754c:	je     407572 <flatcc_builder_create_union_vector@@Base+0x272>
  40754e:	mov    ecx,0x1
  407553:	mov    r8d,0x1
  407559:	mov    r9d,0xffffffff
  40755f:	mov    rdi,rbx
  407562:	mov    rsi,r12
  407565:	mov    rdx,r14
  407568:	call   4068d0 <flatcc_builder_create_vector@@Base>
  40756d:	mov    r14d,eax
  407570:	jmp    407575 <flatcc_builder_create_union_vector@@Base+0x275>
  407572:	xor    r14d,r14d
  407575:	shl    r15,0x20
  407579:	mov    rdi,QWORD PTR [rbx+0x18]
  40757d:	mov    edx,DWORD PTR [rbx+0x20]
  407580:	xor    esi,esi
  407582:	call   4030a0 <memset@plt>
  407587:	mov    rax,QWORD PTR [rbx+0x30]
  40758b:	mov    ecx,DWORD PTR [rax+0x8]
  40758e:	mov    DWORD PTR [rbx+0x20],ecx
  407591:	mov    ecx,DWORD PTR [rax]
  407593:	mov    DWORD PTR [rbx+0x28],ecx
  407596:	mov    edx,DWORD PTR [rax+0x4]
  407599:	mov    rsi,rcx
  40759c:	add    rsi,QWORD PTR [rbx+0x68]
  4075a0:	mov    QWORD PTR [rbx+0x18],rsi
  4075a4:	mov    esi,DWORD PTR [rbx+0x70]
  4075a7:	sub    esi,ecx
  4075a9:	cmp    esi,edx
  4075ab:	cmova  esi,edx
  4075ae:	mov    DWORD PTR [rbx+0x24],esi
  4075b1:	movzx  ecx,WORD PTR [rbx+0xea]
  4075b8:	cmp    WORD PTR [rbx+0xe8],cx
  4075bf:	jae    4075c8 <flatcc_builder_create_union_vector@@Base+0x2c8>
  4075c1:	mov    WORD PTR [rbx+0xe8],cx
  4075c8:	or     r14,r15
  4075cb:	movzx  ecx,WORD PTR [rax+0xc]
  4075cf:	mov    WORD PTR [rbx+0xea],cx
  4075d6:	add    rax,0xffffffffffffffdc
  4075da:	mov    QWORD PTR [rbx+0x30],rax
  4075de:	add    DWORD PTR [rbx+0x104],0xffffffff
  4075e5:	jmp    407323 <flatcc_builder_create_union_vector@@Base+0x23>
  4075ea:	lea    rdi,[rip+0x33fa]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  4075f1:	lea    rsi,[rip+0x232a]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4075f8:	lea    rcx,[rip+0x3407]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  4075ff:	mov    edx,0x37c
  407604:	call   403090 <__assert_fail@plt>
  407609:	nop    DWORD PTR [rax+0x0]

0000000000407610 <flatcc_builder_create_union_vector_direct@@Base>:
  407610:	push   r15
  407612:	push   r14
  407614:	push   r12
  407616:	push   rbx
  407617:	push   rax
  407618:	mov    r14,rcx
  40761b:	mov    r15,rsi
  40761e:	mov    r12,rdi
  407621:	mov    rsi,rdx
  407624:	mov    rdx,rcx
  407627:	mov    rcx,r15
  40762a:	call   406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40762f:	mov    ebx,eax
  407631:	test   eax,eax
  407633:	je     407658 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407635:	mov    ecx,0x1
  40763a:	mov    r8d,0x1
  407640:	mov    r9d,0xffffffff
  407646:	mov    rdi,r12
  407649:	mov    rsi,r15
  40764c:	mov    rdx,r14
  40764f:	call   4068d0 <flatcc_builder_create_vector@@Base>
  407654:	mov    eax,eax
  407656:	jmp    40765a <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  407658:	xor    eax,eax
  40765a:	shl    rbx,0x20
  40765e:	or     rbx,rax
  407661:	mov    rax,rbx
  407664:	add    rsp,0x8
  407668:	pop    rbx
  407669:	pop    r12
  40766b:	pop    r14
  40766d:	pop    r15
  40766f:	ret    

0000000000407670 <flatcc_builder_start_union_vector@@Base>:
  407670:	push   rbx
  407671:	mov    rbx,rdi
  407674:	mov    esi,0x4
  407679:	call   404b40 <flatcc_builder_start_buffer@@Base+0xe0>
  40767e:	mov    ecx,eax
  407680:	mov    eax,0xffffffff
  407685:	test   ecx,ecx
  407687:	je     40768b <flatcc_builder_start_union_vector@@Base+0x1b>
  407689:	pop    rbx
  40768a:	ret    
  40768b:	mov    rax,QWORD PTR [rbx+0x30]
  40768f:	mov    DWORD PTR [rax+0x10],0x8
  407696:	mov    rax,QWORD PTR [rbx+0x30]
  40769a:	mov    DWORD PTR [rax+0x14],0x0
  4076a1:	mov    rax,QWORD PTR [rbx+0x30]
  4076a5:	mov    WORD PTR [rax+0xe],0x7
  4076ab:	mov    ecx,DWORD PTR [rbx+0x28]
  4076ae:	mov    edx,DWORD PTR [rbx+0x70]
  4076b1:	sub    edx,ecx
  4076b3:	add    rcx,QWORD PTR [rbx+0x68]
  4076b7:	mov    QWORD PTR [rbx+0x18],rcx
  4076bb:	cmp    edx,0xfffffffc
  4076be:	mov    ecx,0xfffffffc
  4076c3:	cmovb  ecx,edx
  4076c6:	mov    DWORD PTR [rbx+0x24],ecx
  4076c9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4076d0:	xor    eax,eax
  4076d2:	pop    rbx
  4076d3:	ret    
  4076d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4076de:	xchg   ax,ax

00000000004076e0 <flatcc_builder_end_union_vector@@Base>:
  4076e0:	push   rbp
  4076e1:	push   r15
  4076e3:	push   r14
  4076e5:	push   r13
  4076e7:	push   r12
  4076e9:	push   rbx
  4076ea:	push   rax
  4076eb:	mov    rax,QWORD PTR [rdi+0x30]
  4076ef:	movzx  ecx,WORD PTR [rax+0xe]
  4076f3:	cmp    ecx,0x7
  4076f6:	jne    407af6 <flatcc_builder_end_union_vector@@Base+0x416>
  4076fc:	mov    r13,rdi
  4076ff:	mov    r14d,DWORD PTR [rax+0x14]
  407703:	lea    eax,[r14+r14*4]
  407707:	mov    r12d,DWORD PTR [rdi+0x20]
  40770b:	add    eax,r12d
  40770e:	mov    DWORD PTR [rdi+0x20],eax
  407711:	cmp    eax,DWORD PTR [rdi+0x24]
  407714:	jae    40771c <flatcc_builder_end_union_vector@@Base+0x3c>
  407716:	mov    r8,QWORD PTR [r13+0x18]
  40771a:	jmp    407774 <flatcc_builder_end_union_vector@@Base+0x94>
  40771c:	add    eax,0x1
  40771f:	lea    rsi,[r13+0x68]
  407723:	mov    rdi,QWORD PTR [r13+0x40]
  407727:	mov    edx,DWORD PTR [r13+0x28]
  40772b:	add    rdx,rax
  40772e:	mov    ecx,0x1
  407733:	mov    r8d,0x1
  407739:	call   QWORD PTR [r13+0x50]
  40773d:	test   eax,eax
  40773f:	jne    4078b6 <flatcc_builder_end_union_vector@@Base+0x1d6>
  407745:	mov    eax,DWORD PTR [r13+0x28]
  407749:	mov    r8,rax
  40774c:	add    r8,QWORD PTR [r13+0x68]
  407750:	mov    QWORD PTR [r13+0x18],r8
  407754:	mov    ecx,DWORD PTR [r13+0x70]
  407758:	sub    ecx,eax
  40775a:	cmp    ecx,0xfffffffc
  40775d:	mov    eax,0xfffffffc
  407762:	cmovb  eax,ecx
  407765:	mov    DWORD PTR [r13+0x24],eax
  407769:	mov    rax,QWORD PTR [r13+0x30]
  40776d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407774:	mov    rsi,r8
  407777:	add    rsi,r12
  40777a:	je     4078b6 <flatcc_builder_end_union_vector@@Base+0x1d6>
  407780:	lea    r15,[rsi+r14*4]
  407784:	test   r14d,r14d
  407787:	je     40787a <flatcc_builder_end_union_vector@@Base+0x19a>
  40778d:	cmp    r14d,0x9
  407791:	jae    40794a <flatcc_builder_end_union_vector@@Base+0x26a>
  407797:	xor    r9d,r9d
  40779a:	mov    r11d,r14d
  40779d:	sub    r11d,r9d
  4077a0:	mov    r10,r9
  4077a3:	not    r10
  4077a6:	add    r10,r14
  4077a9:	and    r11,0x3
  4077ad:	je     4077f2 <flatcc_builder_end_union_vector@@Base+0x112>
  4077af:	mov    rdx,r9
  4077b2:	neg    rdx
  4077b5:	lea    rbp,[r12+r9*4]
  4077b9:	add    rbp,r8
  4077bc:	lea    rbx,[r8+r9*8]
  4077c0:	add    rbx,0x4
  4077c4:	lea    rax,[r9+r14*4]
  4077c8:	add    rax,r12
  4077cb:	add    rax,r8
  4077ce:	xor    edi,edi
  4077d0:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  4077d5:	mov    BYTE PTR [rax+rdi*1],cl
  4077d8:	mov    ecx,DWORD PTR [rbx+rdi*8]
  4077db:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  4077df:	add    rdx,0xffffffffffffffff
  4077e3:	add    rdi,0x1
  4077e7:	cmp    r11,rdi
  4077ea:	jne    4077d0 <flatcc_builder_end_union_vector@@Base+0xf0>
  4077ec:	neg    rdx
  4077ef:	mov    r9,rdx
  4077f2:	cmp    r10,0x3
  4077f6:	jb     40787a <flatcc_builder_end_union_vector@@Base+0x19a>
  4077fc:	mov    rbp,r14
  4077ff:	sub    rbp,r9
  407802:	lea    rcx,[r12+r9*4]
  407806:	lea    rdx,[r8+rcx*1]
  40780a:	add    rdx,0xc
  40780e:	lea    rdi,[r8+r9*8]
  407812:	add    rdi,0x1c
  407816:	lea    rcx,[r9+r14*4]
  40781a:	add    rcx,r12
  40781d:	add    rcx,r8
  407820:	add    rcx,0x3
  407824:	xor    ebx,ebx
  407826:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407830:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  407835:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  407839:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  40783d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  407841:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  407846:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  40784a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  40784e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  407852:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  407857:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  40785b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  40785f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  407863:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  407868:	mov    BYTE PTR [rcx+rbx*1],al
  40786b:	mov    eax,DWORD PTR [rdi+rbx*8]
  40786e:	mov    DWORD PTR [rdx+rbx*4],eax
  407871:	add    rbx,0x4
  407875:	cmp    rbp,rbx
  407878:	jne    407830 <flatcc_builder_end_union_vector@@Base+0x150>
  40787a:	mov    rdi,r13
  40787d:	mov    rdx,r14
  407880:	mov    rcx,r15
  407883:	vzeroupper 
  407886:	call   406b50 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40788b:	mov    r12d,eax
  40788e:	test   eax,eax
  407890:	je     4078bb <flatcc_builder_end_union_vector@@Base+0x1db>
  407892:	mov    ecx,0x1
  407897:	mov    r8d,0x1
  40789d:	mov    r9d,0xffffffff
  4078a3:	mov    rdi,r13
  4078a6:	mov    rsi,r15
  4078a9:	mov    rdx,r14
  4078ac:	call   4068d0 <flatcc_builder_create_vector@@Base>
  4078b1:	mov    r14d,eax
  4078b4:	jmp    4078be <flatcc_builder_end_union_vector@@Base+0x1de>
  4078b6:	xor    r14d,r14d
  4078b9:	jmp    407938 <flatcc_builder_end_union_vector@@Base+0x258>
  4078bb:	xor    r14d,r14d
  4078be:	shl    r12,0x20
  4078c2:	mov    rdi,QWORD PTR [r13+0x18]
  4078c6:	mov    edx,DWORD PTR [r13+0x20]
  4078ca:	xor    esi,esi
  4078cc:	call   4030a0 <memset@plt>
  4078d1:	mov    rax,QWORD PTR [r13+0x30]
  4078d5:	mov    ecx,DWORD PTR [rax+0x8]
  4078d8:	mov    DWORD PTR [r13+0x20],ecx
  4078dc:	mov    ecx,DWORD PTR [rax]
  4078de:	mov    DWORD PTR [r13+0x28],ecx
  4078e2:	mov    edx,DWORD PTR [rax+0x4]
  4078e5:	mov    rsi,rcx
  4078e8:	add    rsi,QWORD PTR [r13+0x68]
  4078ec:	mov    QWORD PTR [r13+0x18],rsi
  4078f0:	mov    esi,DWORD PTR [r13+0x70]
  4078f4:	sub    esi,ecx
  4078f6:	cmp    esi,edx
  4078f8:	cmova  esi,edx
  4078fb:	mov    DWORD PTR [r13+0x24],esi
  4078ff:	movzx  ecx,WORD PTR [r13+0xea]
  407907:	cmp    WORD PTR [r13+0xe8],cx
  40790f:	jae    407919 <flatcc_builder_end_union_vector@@Base+0x239>
  407911:	mov    WORD PTR [r13+0xe8],cx
  407919:	or     r14,r12
  40791c:	movzx  ecx,WORD PTR [rax+0xc]
  407920:	mov    WORD PTR [r13+0xea],cx
  407928:	add    rax,0xffffffffffffffdc
  40792c:	mov    QWORD PTR [r13+0x30],rax
  407930:	add    DWORD PTR [r13+0x104],0xffffffff
  407938:	mov    rax,r14
  40793b:	add    rsp,0x8
  40793f:	pop    rbx
  407940:	pop    r12
  407942:	pop    r13
  407944:	pop    r14
  407946:	pop    r15
  407948:	pop    rbp
  407949:	ret    
  40794a:	lea    rax,[r14-0x1]
  40794e:	mov    ecx,0x8
  407953:	mul    rcx
  407956:	seto   cl
  407959:	lea    rdi,[r8+0x4]
  40795d:	mov    rdx,rax
  407960:	add    rdx,rdi
  407963:	setb   dl
  407966:	xor    r9d,r9d
  407969:	add    rax,r8
  40796c:	jb     40779a <flatcc_builder_end_union_vector@@Base+0xba>
  407972:	test   cl,cl
  407974:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  40797a:	test   dl,dl
  40797c:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  407982:	test   cl,cl
  407984:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  40798a:	lea    rcx,[r14+r14*4]
  40798e:	add    rcx,r12
  407991:	add    rcx,r8
  407994:	lea    rdx,[r8+r14*8]
  407998:	add    rdx,0xfffffffffffffff9
  40799c:	cmp    rdx,r15
  40799f:	seta   r11b
  4079a3:	lea    rbx,[r8+r14*8]
  4079a7:	cmp    r8,rcx
  4079aa:	setb   r10b
  4079ae:	cmp    rbx,r15
  4079b1:	seta   al
  4079b4:	cmp    rdi,rcx
  4079b7:	setb   bpl
  4079bb:	cmp    rsi,rdx
  4079be:	setb   cl
  4079c1:	cmp    r8,r15
  4079c4:	setb   BYTE PTR [rsp+0x7]
  4079c9:	cmp    rsi,rbx
  4079cc:	setb   dl
  4079cf:	cmp    rdi,r15
  4079d2:	setb   dil
  4079d6:	xor    r9d,r9d
  4079d9:	test   r11b,r10b
  4079dc:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  4079e2:	and    al,bpl
  4079e5:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  4079eb:	and    cl,BYTE PTR [rsp+0x7]
  4079ef:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  4079f5:	and    dl,dil
  4079f8:	jne    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  4079fe:	mov    eax,r14d
  407a01:	and    eax,0x7
  407a04:	test   rax,rax
  407a07:	mov    ecx,0x8
  407a0c:	cmovne rcx,rax
  407a10:	mov    r9,r14
  407a13:	sub    r9,rcx
  407a16:	vmovdqa ymm0,YMMWORD PTR [rip+0x1e82]        # 4098a0 <flatcc_builder_padding_base@@Base+0x210>
  407a1e:	vmovdqa ymm1,YMMWORD PTR [rip+0x1e9a]        # 4098c0 <flatcc_builder_padding_base@@Base+0x230>
  407a26:	xor    eax,eax
  407a28:	vmovdqa xmm8,XMMWORD PTR [rip+0x1eb0]        # 4098e0 <flatcc_builder_padding_base@@Base+0x250>
  407a30:	vmovdqa xmm9,XMMWORD PTR [rip+0x1eb8]        # 4098f0 <flatcc_builder_padding_base@@Base+0x260>
  407a38:	vpbroadcastq ymm4,QWORD PTR [rip+0x1ebf]        # 409900 <flatcc_builder_padding_base@@Base+0x270>
  407a41:	vpbroadcastq ymm5,QWORD PTR [rip+0x1ebe]        # 409908 <flatcc_builder_padding_base@@Base+0x278>
  407a4a:	mov    rdi,r8
  407a4d:	nop    DWORD PTR [rax]
  407a50:	vmovdqu ymm6,YMMWORD PTR [rdi]
  407a54:	vmovdqu ymm7,YMMWORD PTR [rdi+0x20]
  407a59:	vextracti128 xmm2,ymm7,0x1
  407a5f:	vpshufb xmm2,xmm2,xmm8
  407a64:	vpshufb xmm7,xmm7,xmm8
  407a69:	vpunpcklwd xmm2,xmm7,xmm2
  407a6d:	vextracti128 xmm7,ymm6,0x1
  407a73:	vpshufb xmm7,xmm7,xmm9
  407a78:	vpshufb xmm6,xmm6,xmm9
  407a7d:	vpunpcklwd xmm6,xmm6,xmm7
  407a81:	vpblendd xmm2,xmm6,xmm2,0x2
  407a87:	vmovq  QWORD PTR [r15+rax*1],xmm2
  407a8d:	vpsllq ymm2,ymm1,0x3
  407a92:	vmovq  xmm6,r8
  407a97:	vpbroadcastq ymm6,xmm6
  407a9c:	vpaddq ymm2,ymm6,ymm2
  407aa0:	vpaddq ymm2,ymm2,ymm4
  407aa4:	vpsllq ymm7,ymm0,0x3
  407aa9:	vpaddq ymm6,ymm6,ymm7
  407aad:	vpaddq ymm6,ymm6,ymm4
  407ab1:	vpcmpeqd xmm7,xmm7,xmm7
  407ab5:	vpgatherqd xmm3,DWORD PTR [ymm6*1+0x0],xmm7
  407abf:	vpcmpeqd xmm6,xmm6,xmm6
  407ac3:	vpgatherqd xmm7,DWORD PTR [ymm2*1+0x0],xmm6
  407acd:	vinserti128 ymm2,ymm7,xmm3,0x1
  407ad3:	vmovdqu YMMWORD PTR [rsi+rax*4],ymm2
  407ad8:	add    rax,0x8
  407adc:	vpaddq ymm1,ymm1,ymm5
  407ae0:	vpaddq ymm0,ymm0,ymm5
  407ae4:	add    rdi,0x40
  407ae8:	cmp    r9,rax
  407aeb:	jne    407a50 <flatcc_builder_end_union_vector@@Base+0x370>
  407af1:	jmp    40779a <flatcc_builder_end_union_vector@@Base+0xba>
  407af6:	lea    rdi,[rip+0x2a61]        # 40a55e <flatcc_builder_padding_base@@Base+0xece>
  407afd:	lea    rsi,[rip+0x1e1e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407b04:	lea    rcx,[rip+0x2a85]        # 40a590 <flatcc_builder_padding_base@@Base+0xf00>
  407b0b:	mov    edx,0x651
  407b10:	call   403090 <__assert_fail@plt>
  407b15:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b1f:	nop

0000000000407b20 <flatcc_builder_union_vector_count@@Base>:
  407b20:	mov    rax,QWORD PTR [rdi+0x30]
  407b24:	mov    eax,DWORD PTR [rax+0x14]
  407b27:	ret    
  407b28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407b30 <flatcc_builder_union_vector_edit@@Base>:
  407b30:	mov    rax,QWORD PTR [rdi+0x18]
  407b34:	ret    
  407b35:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b3f:	nop

0000000000407b40 <flatcc_builder_extend_union_vector@@Base>:
  407b40:	push   r14
  407b42:	push   rbx
  407b43:	push   rax
  407b44:	mov    rax,QWORD PTR [rdi+0x30]
  407b48:	mov    ecx,DWORD PTR [rax+0x14]
  407b4b:	add    ecx,esi
  407b4d:	jb     407bd5 <flatcc_builder_extend_union_vector@@Base+0x95>
  407b53:	cmp    ecx,0x20000000
  407b59:	jae    407bd5 <flatcc_builder_extend_union_vector@@Base+0x95>
  407b5b:	mov    rbx,rdi
  407b5e:	mov    DWORD PTR [rax+0x14],ecx
  407b61:	mov    r14d,DWORD PTR [rdi+0x20]
  407b65:	lea    eax,[r14+rsi*8]
  407b69:	mov    DWORD PTR [rdi+0x20],eax
  407b6c:	cmp    eax,DWORD PTR [rdi+0x24]
  407b6f:	jae    407b77 <flatcc_builder_extend_union_vector@@Base+0x37>
  407b71:	mov    rax,QWORD PTR [rbx+0x18]
  407b75:	jmp    407bca <flatcc_builder_extend_union_vector@@Base+0x8a>
  407b77:	add    eax,0x1
  407b7a:	lea    rsi,[rbx+0x68]
  407b7e:	mov    rdi,QWORD PTR [rbx+0x40]
  407b82:	mov    edx,DWORD PTR [rbx+0x28]
  407b85:	add    rdx,rax
  407b88:	mov    ecx,0x1
  407b8d:	mov    r8d,0x1
  407b93:	call   QWORD PTR [rbx+0x50]
  407b96:	test   eax,eax
  407b98:	je     407b9e <flatcc_builder_extend_union_vector@@Base+0x5e>
  407b9a:	xor    eax,eax
  407b9c:	jmp    407bcd <flatcc_builder_extend_union_vector@@Base+0x8d>
  407b9e:	mov    ecx,DWORD PTR [rbx+0x28]
  407ba1:	mov    rax,rcx
  407ba4:	add    rax,QWORD PTR [rbx+0x68]
  407ba8:	mov    QWORD PTR [rbx+0x18],rax
  407bac:	mov    edx,DWORD PTR [rbx+0x70]
  407baf:	sub    edx,ecx
  407bb1:	cmp    edx,0xfffffffc
  407bb4:	mov    ecx,0xfffffffc
  407bb9:	cmovb  ecx,edx
  407bbc:	mov    DWORD PTR [rbx+0x24],ecx
  407bbf:	mov    rcx,QWORD PTR [rbx+0x30]
  407bc3:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407bca:	add    rax,r14
  407bcd:	add    rsp,0x8
  407bd1:	pop    rbx
  407bd2:	pop    r14
  407bd4:	ret    
  407bd5:	lea    rdi,[rip+0x2e0f]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  407bdc:	lea    rsi,[rip+0x1d3f]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407be3:	lea    rcx,[rip+0x2e1c]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  407bea:	mov    edx,0x37c
  407bef:	call   403090 <__assert_fail@plt>
  407bf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407bfe:	xchg   ax,ax

0000000000407c00 <flatcc_builder_truncate_union_vector@@Base>:
  407c00:	push   rax
  407c01:	mov    rcx,QWORD PTR [rdi+0x30]
  407c05:	movzx  edx,WORD PTR [rcx+0xe]
  407c09:	cmp    edx,0x7
  407c0c:	jne    407c40 <flatcc_builder_truncate_union_vector@@Base+0x40>
  407c0e:	mov    rax,rsi
  407c11:	mov    edx,DWORD PTR [rcx+0x14]
  407c14:	sub    edx,eax
  407c16:	jb     407c5f <flatcc_builder_truncate_union_vector@@Base+0x5f>
  407c18:	mov    DWORD PTR [rcx+0x14],edx
  407c1b:	mov    rcx,QWORD PTR [rdi+0x30]
  407c1f:	imul   eax,DWORD PTR [rcx+0x10]
  407c23:	mov    ecx,DWORD PTR [rdi+0x20]
  407c26:	sub    ecx,eax
  407c28:	mov    DWORD PTR [rdi+0x20],ecx
  407c2b:	add    rcx,QWORD PTR [rdi+0x18]
  407c2f:	xor    esi,esi
  407c31:	mov    rdi,rcx
  407c34:	mov    rdx,rax
  407c37:	call   4030a0 <memset@plt>
  407c3c:	xor    eax,eax
  407c3e:	pop    rcx
  407c3f:	ret    
  407c40:	lea    rdi,[rip+0x2917]        # 40a55e <flatcc_builder_padding_base@@Base+0xece>
  407c47:	lea    rsi,[rip+0x1cd4]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407c4e:	lea    rcx,[rip+0x298e]        # 40a5e3 <flatcc_builder_padding_base@@Base+0xf53>
  407c55:	mov    edx,0x681
  407c5a:	call   403090 <__assert_fail@plt>
  407c5f:	lea    rdi,[rip+0x235c]        # 409fc2 <flatcc_builder_padding_base@@Base+0x932>
  407c66:	lea    rsi,[rip+0x1cb5]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407c6d:	lea    rcx,[rip+0x296f]        # 40a5e3 <flatcc_builder_padding_base@@Base+0xf53>
  407c74:	mov    edx,0x682
  407c79:	call   403090 <__assert_fail@plt>
  407c7e:	xchg   ax,ax

0000000000407c80 <flatcc_builder_union_vector_push@@Base>:
  407c80:	push   r15
  407c82:	push   r14
  407c84:	push   rbx
  407c85:	mov    rax,QWORD PTR [rdi+0x30]
  407c89:	movzx  ecx,WORD PTR [rax+0xe]
  407c8d:	cmp    ecx,0x7
  407c90:	jne    407d2a <flatcc_builder_union_vector_push@@Base+0xaa>
  407c96:	mov    ecx,DWORD PTR [rax+0x14]
  407c99:	cmp    ecx,0x1fffffff
  407c9f:	je     407cec <flatcc_builder_union_vector_push@@Base+0x6c>
  407ca1:	mov    r14,rsi
  407ca4:	mov    rbx,rdi
  407ca7:	add    ecx,0x1
  407caa:	mov    DWORD PTR [rax+0x14],ecx
  407cad:	mov    r15d,DWORD PTR [rdi+0x20]
  407cb1:	lea    eax,[r15+0x8]
  407cb5:	mov    DWORD PTR [rdi+0x20],eax
  407cb8:	cmp    eax,DWORD PTR [rdi+0x24]
  407cbb:	jae    407cc8 <flatcc_builder_union_vector_push@@Base+0x48>
  407cbd:	mov    rax,QWORD PTR [rbx+0x18]
  407cc1:	add    rax,r15
  407cc4:	jne    407d21 <flatcc_builder_union_vector_push@@Base+0xa1>
  407cc6:	jmp    407cec <flatcc_builder_union_vector_push@@Base+0x6c>
  407cc8:	lea    eax,[r15+0x9]
  407ccc:	lea    rsi,[rbx+0x68]
  407cd0:	mov    rdi,QWORD PTR [rbx+0x40]
  407cd4:	mov    edx,DWORD PTR [rbx+0x28]
  407cd7:	add    rdx,rax
  407cda:	mov    ecx,0x1
  407cdf:	mov    r8d,0x1
  407ce5:	call   QWORD PTR [rbx+0x50]
  407ce8:	test   eax,eax
  407cea:	je     407cf0 <flatcc_builder_union_vector_push@@Base+0x70>
  407cec:	xor    eax,eax
  407cee:	jmp    407d24 <flatcc_builder_union_vector_push@@Base+0xa4>
  407cf0:	mov    ecx,DWORD PTR [rbx+0x28]
  407cf3:	mov    rax,rcx
  407cf6:	add    rax,QWORD PTR [rbx+0x68]
  407cfa:	mov    QWORD PTR [rbx+0x18],rax
  407cfe:	mov    edx,DWORD PTR [rbx+0x70]
  407d01:	sub    edx,ecx
  407d03:	cmp    edx,0xfffffffc
  407d06:	mov    ecx,0xfffffffc
  407d0b:	cmovb  ecx,edx
  407d0e:	mov    DWORD PTR [rbx+0x24],ecx
  407d11:	mov    rcx,QWORD PTR [rbx+0x30]
  407d15:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407d1c:	add    rax,r15
  407d1f:	je     407cec <flatcc_builder_union_vector_push@@Base+0x6c>
  407d21:	mov    QWORD PTR [rax],r14
  407d24:	pop    rbx
  407d25:	pop    r14
  407d27:	pop    r15
  407d29:	ret    
  407d2a:	lea    rdi,[rip+0x282d]        # 40a55e <flatcc_builder_padding_base@@Base+0xece>
  407d31:	lea    rsi,[rip+0x1bea]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407d38:	lea    rcx,[rip+0x28e9]        # 40a628 <flatcc_builder_padding_base@@Base+0xf98>
  407d3f:	mov    edx,0x68d
  407d44:	call   403090 <__assert_fail@plt>
  407d49:	nop    DWORD PTR [rax+0x0]

0000000000407d50 <flatcc_builder_append_union_vector@@Base>:
  407d50:	push   r15
  407d52:	push   r14
  407d54:	push   r13
  407d56:	push   r12
  407d58:	push   rbx
  407d59:	mov    rax,QWORD PTR [rdi+0x30]
  407d5d:	movzx  ecx,WORD PTR [rax+0xe]
  407d61:	cmp    ecx,0x7
  407d64:	jne    407e41 <flatcc_builder_append_union_vector@@Base+0xf1>
  407d6a:	mov    r15,rdx
  407d6d:	mov    ecx,DWORD PTR [rax+0x14]
  407d70:	add    ecx,r15d
  407d73:	jb     407e22 <flatcc_builder_append_union_vector@@Base+0xd2>
  407d79:	cmp    ecx,0x20000000
  407d7f:	jae    407e22 <flatcc_builder_append_union_vector@@Base+0xd2>
  407d85:	mov    r14,rsi
  407d88:	mov    rbx,rdi
  407d8b:	mov    DWORD PTR [rax+0x14],ecx
  407d8e:	mov    r13d,DWORD PTR [rdi+0x20]
  407d92:	lea    eax,[r13+r15*8+0x0]
  407d97:	mov    DWORD PTR [rdi+0x20],eax
  407d9a:	cmp    eax,DWORD PTR [rdi+0x24]
  407d9d:	jae    407daa <flatcc_builder_append_union_vector@@Base+0x5a>
  407d9f:	mov    r12,QWORD PTR [rbx+0x18]
  407da3:	add    r12,r13
  407da6:	jne    407e03 <flatcc_builder_append_union_vector@@Base+0xb3>
  407da8:	jmp    407dcd <flatcc_builder_append_union_vector@@Base+0x7d>
  407daa:	add    eax,0x1
  407dad:	lea    rsi,[rbx+0x68]
  407db1:	mov    rdi,QWORD PTR [rbx+0x40]
  407db5:	mov    edx,DWORD PTR [rbx+0x28]
  407db8:	add    rdx,rax
  407dbb:	mov    ecx,0x1
  407dc0:	mov    r8d,0x1
  407dc6:	call   QWORD PTR [rbx+0x50]
  407dc9:	test   eax,eax
  407dcb:	je     407dd2 <flatcc_builder_append_union_vector@@Base+0x82>
  407dcd:	xor    r12d,r12d
  407dd0:	jmp    407e15 <flatcc_builder_append_union_vector@@Base+0xc5>
  407dd2:	mov    eax,DWORD PTR [rbx+0x28]
  407dd5:	mov    r12,rax
  407dd8:	add    r12,QWORD PTR [rbx+0x68]
  407ddc:	mov    QWORD PTR [rbx+0x18],r12
  407de0:	mov    ecx,DWORD PTR [rbx+0x70]
  407de3:	sub    ecx,eax
  407de5:	cmp    ecx,0xfffffffc
  407de8:	mov    eax,0xfffffffc
  407ded:	cmovb  eax,ecx
  407df0:	mov    DWORD PTR [rbx+0x24],eax
  407df3:	mov    rax,QWORD PTR [rbx+0x30]
  407df7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407dfe:	add    r12,r13
  407e01:	je     407dcd <flatcc_builder_append_union_vector@@Base+0x7d>
  407e03:	shl    r15d,0x3
  407e07:	mov    edx,r15d
  407e0a:	mov    rdi,r12
  407e0d:	mov    rsi,r14
  407e10:	call   4030e0 <memcpy@plt>
  407e15:	mov    rax,r12
  407e18:	pop    rbx
  407e19:	pop    r12
  407e1b:	pop    r13
  407e1d:	pop    r14
  407e1f:	pop    r15
  407e21:	ret    
  407e22:	lea    rdi,[rip+0x2bc2]        # 40a9eb <flatcc_builder_padding_base@@Base+0x135b>
  407e29:	lea    rsi,[rip+0x1af2]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407e30:	lea    rcx,[rip+0x2bcf]        # 40aa06 <flatcc_builder_padding_base@@Base+0x1376>
  407e37:	mov    edx,0x37c
  407e3c:	call   403090 <__assert_fail@plt>
  407e41:	lea    rdi,[rip+0x2716]        # 40a55e <flatcc_builder_padding_base@@Base+0xece>
  407e48:	lea    rsi,[rip+0x1ad3]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407e4f:	lea    rcx,[rip+0x283f]        # 40a695 <flatcc_builder_padding_base@@Base+0x1005>
  407e56:	mov    edx,0x69c
  407e5b:	call   403090 <__assert_fail@plt>

0000000000407e60 <flatcc_builder_create_string@@Base>:
  407e60:	push   rbp
  407e61:	push   rbx
  407e62:	sub    rsp,0x98
  407e69:	xor    ebp,ebp
  407e6b:	mov    rax,rdx
  407e6e:	shr    rax,0x20
  407e72:	jne    407f48 <flatcc_builder_create_string@@Base+0xe8>
  407e78:	mov    rbx,rdi
  407e7b:	mov    DWORD PTR [rsp+0x4],edx
  407e7f:	mov    ebp,DWORD PTR [rdi+0xf0]
  407e85:	mov    eax,edx
  407e87:	not    eax
  407e89:	add    eax,ebp
  407e8b:	and    eax,0x3
  407e8e:	add    eax,0x1
  407e91:	mov    QWORD PTR [rsp+0x8],0x4
  407e9a:	lea    rcx,[rsp+0x4]
  407e9f:	mov    QWORD PTR [rsp+0x18],rcx
  407ea4:	mov    QWORD PTR [rsp+0x20],0x4
  407ead:	mov    DWORD PTR [rsp+0x10],0x1
  407eb5:	test   rdx,rdx
  407eb8:	je     407edc <flatcc_builder_create_string@@Base+0x7c>
  407eba:	lea    rcx,[rdx+0x4]
  407ebe:	mov    QWORD PTR [rsp+0x8],rcx
  407ec3:	mov    QWORD PTR [rsp+0x28],rsi
  407ec8:	mov    QWORD PTR [rsp+0x30],rdx
  407ecd:	mov    DWORD PTR [rsp+0x10],0x2
  407ed5:	mov    edx,0x2
  407eda:	jmp    407ee6 <flatcc_builder_create_string@@Base+0x86>
  407edc:	mov    edx,0x1
  407ee1:	mov    ecx,0x4
  407ee6:	mov    esi,eax
  407ee8:	lea    r8,[rcx+rsi*1]
  407eec:	mov    QWORD PTR [rsp+0x8],r8
  407ef1:	mov    eax,edx
  407ef3:	shl    rax,0x4
  407ef7:	lea    rdi,[rip+0x1792]        # 409690 <flatcc_builder_padding_base@@Base>
  407efe:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407f03:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407f08:	add    edx,0x1
  407f0b:	mov    DWORD PTR [rsp+0x10],edx
  407f0f:	cmp    r8,0x11
  407f13:	setb   al
  407f16:	add    rcx,rsi
  407f19:	add    rcx,0xfffffffffffffff0
  407f1d:	shr    rcx,0x20
  407f21:	sete   cl
  407f24:	test   r8d,r8d
  407f27:	jle    407f54 <flatcc_builder_create_string@@Base+0xf4>
  407f29:	or     al,cl
  407f2b:	je     407f54 <flatcc_builder_create_string@@Base+0xf4>
  407f2d:	sub    ebp,r8d
  407f30:	mov    rdi,QWORD PTR [rbx+0x38]
  407f34:	lea    rsi,[rsp+0x18]
  407f39:	mov    ecx,ebp
  407f3b:	call   QWORD PTR [rbx+0x48]
  407f3e:	test   eax,eax
  407f40:	jne    407f73 <flatcc_builder_create_string@@Base+0x113>
  407f42:	mov    DWORD PTR [rbx+0xf0],ebp
  407f48:	mov    eax,ebp
  407f4a:	add    rsp,0x98
  407f51:	pop    rbx
  407f52:	pop    rbp
  407f53:	ret    
  407f54:	lea    rdi,[rip+0x2b87]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  407f5b:	lea    rsi,[rip+0x19c0]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407f62:	lea    rcx,[rip+0x2a38]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  407f69:	mov    edx,0x287
  407f6e:	call   403090 <__assert_fail@plt>
  407f73:	lea    rdi,[rip+0x2b68]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  407f7a:	lea    rsi,[rip+0x19a1]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  407f81:	lea    rcx,[rip+0x2a19]        # 40a9a1 <flatcc_builder_padding_base@@Base+0x1311>
  407f88:	mov    edx,0x28b
  407f8d:	call   403090 <__assert_fail@plt>
  407f92:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f9c:	nop    DWORD PTR [rax+0x0]

0000000000407fa0 <flatcc_builder_create_string_str@@Base>:
  407fa0:	push   r14
  407fa2:	push   rbx
  407fa3:	push   rax
  407fa4:	mov    rbx,rsi
  407fa7:	mov    r14,rdi
  407faa:	mov    rdi,rsi
  407fad:	call   403060 <strlen@plt>
  407fb2:	mov    rdi,r14
  407fb5:	mov    rsi,rbx
  407fb8:	mov    rdx,rax
  407fbb:	add    rsp,0x8
  407fbf:	pop    rbx
  407fc0:	pop    r14
  407fc2:	jmp    407e60 <flatcc_builder_create_string@@Base>
  407fc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fd0 <flatcc_builder_create_string_strn@@Base>:
  407fd0:	push   r15
  407fd2:	push   r14
  407fd4:	push   rbx
  407fd5:	mov    rbx,rdx
  407fd8:	mov    r14,rsi
  407fdb:	mov    r15,rdi
  407fde:	xor    esi,esi
  407fe0:	mov    rdi,r14
  407fe3:	call   4030b0 <memchr@plt>
  407fe8:	mov    rcx,rax
  407feb:	sub    rcx,r14
  407fee:	test   rax,rax
  407ff1:	cmovne rbx,rcx
  407ff5:	mov    rdi,r15
  407ff8:	mov    rsi,r14
  407ffb:	mov    rdx,rbx
  407ffe:	pop    rbx
  407fff:	pop    r14
  408001:	pop    r15
  408003:	jmp    407e60 <flatcc_builder_create_string@@Base>
  408008:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408010 <flatcc_builder_end_string@@Base>:
  408010:	push   rbp
  408011:	push   rbx
  408012:	push   rax
  408013:	mov    rax,QWORD PTR [rdi+0x30]
  408017:	movzx  ecx,WORD PTR [rax+0xe]
  40801b:	cmp    ecx,0x6
  40801e:	jne    4080b7 <flatcc_builder_end_string@@Base+0xa7>
  408024:	mov    rbx,rdi
  408027:	mov    edx,DWORD PTR [rax+0x14]
  40802a:	cmp    edx,DWORD PTR [rdi+0x20]
  40802d:	jne    4080d6 <flatcc_builder_end_string@@Base+0xc6>
  408033:	mov    rsi,QWORD PTR [rbx+0x18]
  408037:	mov    rdi,rbx
  40803a:	call   407e60 <flatcc_builder_create_string@@Base>
  40803f:	mov    ebp,eax
  408041:	test   eax,eax
  408043:	je     4080ae <flatcc_builder_end_string@@Base+0x9e>
  408045:	mov    rdi,QWORD PTR [rbx+0x18]
  408049:	mov    edx,DWORD PTR [rbx+0x20]
  40804c:	xor    esi,esi
  40804e:	call   4030a0 <memset@plt>
  408053:	mov    rax,QWORD PTR [rbx+0x30]
  408057:	mov    ecx,DWORD PTR [rax+0x8]
  40805a:	mov    DWORD PTR [rbx+0x20],ecx
  40805d:	mov    ecx,DWORD PTR [rax]
  40805f:	mov    DWORD PTR [rbx+0x28],ecx
  408062:	mov    edx,DWORD PTR [rax+0x4]
  408065:	mov    rsi,rcx
  408068:	add    rsi,QWORD PTR [rbx+0x68]
  40806c:	mov    QWORD PTR [rbx+0x18],rsi
  408070:	mov    esi,DWORD PTR [rbx+0x70]
  408073:	sub    esi,ecx
  408075:	cmp    esi,edx
  408077:	cmova  esi,edx
  40807a:	mov    DWORD PTR [rbx+0x24],esi
  40807d:	movzx  ecx,WORD PTR [rbx+0xea]
  408084:	cmp    WORD PTR [rbx+0xe8],cx
  40808b:	jae    408094 <flatcc_builder_end_string@@Base+0x84>
  40808d:	mov    WORD PTR [rbx+0xe8],cx
  408094:	movzx  ecx,WORD PTR [rax+0xc]
  408098:	mov    WORD PTR [rbx+0xea],cx
  40809f:	add    rax,0xffffffffffffffdc
  4080a3:	mov    QWORD PTR [rbx+0x30],rax
  4080a7:	add    DWORD PTR [rbx+0x104],0xffffffff
  4080ae:	mov    eax,ebp
  4080b0:	add    rsp,0x8
  4080b4:	pop    rbx
  4080b5:	pop    rbp
  4080b6:	ret    
  4080b7:	lea    rdi,[rip+0x1da3]        # 409e61 <flatcc_builder_padding_base@@Base+0x7d1>
  4080be:	lea    rsi,[rip+0x185d]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4080c5:	lea    rcx,[rip+0x2648]        # 40a714 <flatcc_builder_padding_base@@Base+0x1084>
  4080cc:	mov    edx,0x6c4
  4080d1:	call   403090 <__assert_fail@plt>
  4080d6:	lea    rdi,[rip+0x267a]        # 40a757 <flatcc_builder_padding_base@@Base+0x10c7>
  4080dd:	lea    rsi,[rip+0x183e]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4080e4:	lea    rcx,[rip+0x2629]        # 40a714 <flatcc_builder_padding_base@@Base+0x1084>
  4080eb:	mov    edx,0x6c5
  4080f0:	call   403090 <__assert_fail@plt>
  4080f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080ff:	nop

0000000000408100 <flatcc_builder_string_edit@@Base>:
  408100:	mov    rax,QWORD PTR [rdi+0x18]
  408104:	ret    
  408105:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40810f:	nop

0000000000408110 <flatcc_builder_string_len@@Base>:
  408110:	mov    rax,QWORD PTR [rdi+0x30]
  408114:	mov    eax,DWORD PTR [rax+0x14]
  408117:	ret    
  408118:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408120 <flatcc_builder_table_edit@@Base>:
  408120:	mov    rax,QWORD PTR [rdi+0x30]
  408124:	movzx  eax,WORD PTR [rax+0xe]
  408128:	cmp    eax,0x3
  40812b:	jne    408138 <flatcc_builder_table_edit@@Base+0x18>
  40812d:	mov    eax,DWORD PTR [rdi+0x20]
  408130:	add    rax,QWORD PTR [rdi+0x18]
  408134:	sub    rax,rsi
  408137:	ret    
  408138:	push   rax
  408139:	lea    rdi,[rip+0x2011]        # 40a151 <flatcc_builder_padding_base@@Base+0xac1>
  408140:	lea    rsi,[rip+0x17db]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  408147:	lea    rcx,[rip+0x26bb]        # 40a809 <flatcc_builder_padding_base@@Base+0x1179>
  40814e:	mov    edx,0x702
  408153:	call   403090 <__assert_fail@plt>
  408158:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408160 <flatcc_builder_table_add_copy@@Base>:
  408160:	push   r15
  408162:	push   r14
  408164:	push   rbx
  408165:	mov    r15,rcx
  408168:	mov    r14,rdx
  40816b:	mov    rdx,rcx
  40816e:	mov    ecx,r8d
  408171:	call   4070b0 <flatcc_builder_table_add@@Base>
  408176:	mov    rbx,rax
  408179:	test   rax,rax
  40817c:	je     40818c <flatcc_builder_table_add_copy@@Base+0x2c>
  40817e:	mov    rdi,rbx
  408181:	mov    rsi,r14
  408184:	mov    rdx,r15
  408187:	call   4030e0 <memcpy@plt>
  40818c:	mov    rax,rbx
  40818f:	pop    rbx
  408190:	pop    r14
  408192:	pop    r15
  408194:	ret    
  408195:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40819f:	nop

00000000004081a0 <flatcc_builder_push_buffer_alignment@@Base>:
  4081a0:	movzx  eax,WORD PTR [rdi+0xe8]
  4081a7:	mov    WORD PTR [rdi+0xe8],0x4
  4081b0:	ret    
  4081b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081c0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4081c0:	cmp    WORD PTR [rdi+0xe8],si
  4081c7:	jae    4081d0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  4081c9:	mov    WORD PTR [rdi+0xe8],si
  4081d0:	ret    
  4081d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081e0 <flatcc_builder_get_buffer_alignment@@Base>:
  4081e0:	movzx  eax,WORD PTR [rdi+0xe8]
  4081e7:	ret    
  4081e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081f0 <flatcc_builder_set_vtable_clustering@@Base>:
  4081f0:	xor    eax,eax
  4081f2:	test   esi,esi
  4081f4:	sete   al
  4081f7:	mov    DWORD PTR [rdi+0x124],eax
  4081fd:	ret    
  4081fe:	xchg   ax,ax

0000000000408200 <flatcc_builder_set_block_align@@Base>:
  408200:	mov    WORD PTR [rdi+0xec],si
  408207:	ret    
  408208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408210 <flatcc_builder_get_level@@Base>:
  408210:	mov    eax,DWORD PTR [rdi+0x104]
  408216:	ret    
  408217:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408220 <flatcc_builder_set_max_level@@Base>:
  408220:	mov    DWORD PTR [rdi+0x120],esi
  408226:	cmp    DWORD PTR [rdi+0x108],esi
  40822c:	jge    408234 <flatcc_builder_set_max_level@@Base+0x14>
  40822e:	mov    DWORD PTR [rdi+0x108],esi
  408234:	ret    
  408235:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40823f:	nop

0000000000408240 <flatcc_builder_get_buffer_size@@Base>:
  408240:	movsxd rax,DWORD PTR [rdi+0xf4]
  408247:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40824e:	sub    rax,rcx
  408251:	ret    
  408252:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40825c:	nop    DWORD PTR [rax+0x0]

0000000000408260 <flatcc_builder_get_buffer_start@@Base>:
  408260:	mov    eax,DWORD PTR [rdi+0xf0]
  408266:	ret    
  408267:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408270 <flatcc_builder_get_buffer_end@@Base>:
  408270:	mov    eax,DWORD PTR [rdi+0xf4]
  408276:	ret    
  408277:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408280 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408280:	mov    QWORD PTR [rdi+0x118],rsi
  408287:	ret    
  408288:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408290 <flatcc_builder_set_identifier@@Base>:
  408290:	test   rsi,rsi
  408293:	jne    40829c <flatcc_builder_set_identifier@@Base+0xc>
  408295:	lea    rsi,[rip+0x13f4]        # 409690 <flatcc_builder_padding_base@@Base>
  40829c:	mov    eax,DWORD PTR [rsi]
  40829e:	mov    DWORD PTR [rdi+0x110],eax
  4082a4:	ret    
  4082a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082af:	nop

00000000004082b0 <flatcc_builder_get_type@@Base>:
  4082b0:	mov    rax,QWORD PTR [rdi+0x30]
  4082b4:	test   rax,rax
  4082b7:	je     4082be <flatcc_builder_get_type@@Base+0xe>
  4082b9:	movzx  eax,WORD PTR [rax+0xe]
  4082bd:	ret    
  4082be:	xor    eax,eax
  4082c0:	ret    
  4082c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004082d0 <flatcc_builder_get_type_at@@Base>:
  4082d0:	xor    eax,eax
  4082d2:	test   esi,esi
  4082d4:	jle    4082f2 <flatcc_builder_get_type_at@@Base+0x22>
  4082d6:	mov    ecx,DWORD PTR [rdi+0x104]
  4082dc:	cmp    ecx,esi
  4082de:	jl     4082f2 <flatcc_builder_get_type_at@@Base+0x22>
  4082e0:	mov    rax,QWORD PTR [rdi+0x30]
  4082e4:	sub    esi,ecx
  4082e6:	movsxd rcx,esi
  4082e9:	lea    rcx,[rcx+rcx*8]
  4082ed:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  4082f2:	ret    
  4082f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082fd:	nop    DWORD PTR [rax]

0000000000408300 <flatcc_builder_get_direct_buffer@@Base>:
  408300:	cmp    DWORD PTR [rdi+0x128],0x0
  408307:	je     408319 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408309:	mov    rax,QWORD PTR [rdi+0x130]
  408310:	cmp    rax,QWORD PTR [rdi+0x138]
  408317:	je     408328 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408319:	test   rsi,rsi
  40831c:	je     408325 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40831e:	mov    QWORD PTR [rsi],0x0
  408325:	xor    eax,eax
  408327:	ret    
  408328:	test   rsi,rsi
  40832b:	je     408337 <flatcc_builder_get_direct_buffer@@Base+0x37>
  40832d:	mov    rax,QWORD PTR [rdi+0x160]
  408334:	mov    QWORD PTR [rsi],rax
  408337:	mov    rax,QWORD PTR [rdi+0x140]
  40833e:	ret    
  40833f:	nop

0000000000408340 <flatcc_builder_copy_buffer@@Base>:
  408340:	push   rax
  408341:	cmp    DWORD PTR [rdi+0x128],0x0
  408348:	je     40835d <flatcc_builder_copy_buffer@@Base+0x1d>
  40834a:	add    rdi,0x130
  408351:	call   408c60 <flatcc_emitter_copy_buffer@@Base>
  408356:	test   rax,rax
  408359:	je     408361 <flatcc_builder_copy_buffer@@Base+0x21>
  40835b:	pop    rcx
  40835c:	ret    
  40835d:	xor    eax,eax
  40835f:	pop    rcx
  408360:	ret    
  408361:	lea    rdi,[rip+0xdc7]        # 40912f <_IO_stdin_used@@Base+0x12f>
  408368:	lea    rsi,[rip+0x15b3]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40836f:	lea    rcx,[rip+0x251e]        # 40a894 <flatcc_builder_padding_base@@Base+0x1204>
  408376:	mov    edx,0x786
  40837b:	call   403090 <__assert_fail@plt>

0000000000408380 <flatcc_builder_finalize_buffer@@Base>:
  408380:	push   r15
  408382:	push   r14
  408384:	push   rbx
  408385:	mov    rbx,rdi
  408388:	movsxd r14,DWORD PTR [rdi+0xf4]
  40838f:	movsxd rax,DWORD PTR [rdi+0xf0]
  408396:	sub    r14,rax
  408399:	test   rsi,rsi
  40839c:	je     4083a1 <flatcc_builder_finalize_buffer@@Base+0x21>
  40839e:	mov    QWORD PTR [rsi],r14
  4083a1:	mov    rdi,r14
  4083a4:	call   4030f0 <malloc@plt>
  4083a9:	test   rax,rax
  4083ac:	je     4083dd <flatcc_builder_finalize_buffer@@Base+0x5d>
  4083ae:	cmp    DWORD PTR [rbx+0x128],0x0
  4083b5:	je     4083fc <flatcc_builder_finalize_buffer@@Base+0x7c>
  4083b7:	mov    r15,rax
  4083ba:	add    rbx,0x130
  4083c1:	mov    rdi,rbx
  4083c4:	mov    rsi,rax
  4083c7:	mov    rdx,r14
  4083ca:	call   408c60 <flatcc_emitter_copy_buffer@@Base>
  4083cf:	test   rax,rax
  4083d2:	je     40841b <flatcc_builder_finalize_buffer@@Base+0x9b>
  4083d4:	mov    rax,r15
  4083d7:	pop    rbx
  4083d8:	pop    r14
  4083da:	pop    r15
  4083dc:	ret    
  4083dd:	lea    rdi,[rip+0x26fe]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  4083e4:	lea    rsi,[rip+0x1537]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4083eb:	lea    rcx,[rip+0x24e7]        # 40a8d9 <flatcc_builder_padding_base@@Base+0x1249>
  4083f2:	mov    edx,0x798
  4083f7:	call   403090 <__assert_fail@plt>
  4083fc:	lea    rdi,[rip+0x26df]        # 40aae2 <flatcc_builder_padding_base@@Base+0x1452>
  408403:	lea    rsi,[rip+0x1518]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  40840a:	lea    rcx,[rip+0x24c8]        # 40a8d9 <flatcc_builder_padding_base@@Base+0x1249>
  408411:	mov    edx,0x79c
  408416:	call   403090 <__assert_fail@plt>
  40841b:	lea    rdi,[rip+0xd0d]        # 40912f <_IO_stdin_used@@Base+0x12f>
  408422:	lea    rsi,[rip+0x14f9]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  408429:	lea    rcx,[rip+0x2464]        # 40a894 <flatcc_builder_padding_base@@Base+0x1204>
  408430:	mov    edx,0x786
  408435:	call   403090 <__assert_fail@plt>
  40843a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408440 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408440:	push   r15
  408442:	push   r14
  408444:	push   r12
  408446:	push   rbx
  408447:	push   rax
  408448:	mov    r14,rsi
  40844b:	mov    r15,rdi
  40844e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408455:	movsxd rcx,DWORD PTR [rdi+0xf0]
  40845c:	sub    rax,rcx
  40845f:	test   rsi,rsi
  408462:	je     408467 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408464:	mov    QWORD PTR [r14],rax
  408467:	movzx  ecx,WORD PTR [r15+0xe8]
  40846f:	add    rax,rcx
  408472:	add    rax,0xffffffffffffffff
  408476:	mov    rbx,rcx
  408479:	neg    rbx
  40847c:	and    rbx,rax
  40847f:	cmp    rcx,0x8
  408483:	mov    QWORD PTR [rsp],0x0
  40848b:	mov    esi,0x8
  408490:	cmova  rsi,rcx
  408494:	mov    rdi,rsp
  408497:	mov    rdx,rbx
  40849a:	call   403130 <posix_memalign@plt>
  40849f:	mov    r12,QWORD PTR [rsp]
  4084a3:	test   eax,eax
  4084a5:	je     4084b6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4084a7:	test   r12,r12
  4084aa:	je     4084b6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  4084ac:	mov    rdi,r12
  4084af:	call   403030 <free@plt>
  4084b4:	jmp    4084fe <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4084b6:	test   r12,r12
  4084b9:	je     4084fe <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  4084bb:	cmp    DWORD PTR [r15+0x128],0x0
  4084c3:	je     4084ac <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  4084c5:	add    r15,0x130
  4084cc:	mov    rdi,r15
  4084cf:	mov    rsi,r12
  4084d2:	mov    rdx,rbx
  4084d5:	call   408c60 <flatcc_emitter_copy_buffer@@Base>
  4084da:	test   rax,rax
  4084dd:	jne    40850d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  4084df:	lea    rdi,[rip+0xc49]        # 40912f <_IO_stdin_used@@Base+0x12f>
  4084e6:	lea    rsi,[rip+0x1435]        # 409922 <flatcc_builder_padding_base@@Base+0x292>
  4084ed:	lea    rcx,[rip+0x23a0]        # 40a894 <flatcc_builder_padding_base@@Base+0x1204>
  4084f4:	mov    edx,0x786
  4084f9:	call   403090 <__assert_fail@plt>
  4084fe:	test   r14,r14
  408501:	je     40850a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408503:	mov    QWORD PTR [r14],0x0
  40850a:	xor    r12d,r12d
  40850d:	mov    rax,r12
  408510:	add    rsp,0x8
  408514:	pop    rbx
  408515:	pop    r12
  408517:	pop    r14
  408519:	pop    r15
  40851b:	ret    
  40851c:	nop    DWORD PTR [rax+0x0]

0000000000408520 <flatcc_builder_aligned_alloc@@Base>:
  408520:	push   rax
  408521:	mov    rax,rsi
  408524:	mov    QWORD PTR [rsp],0x0
  40852c:	cmp    rdi,0x8
  408530:	mov    esi,0x8
  408535:	cmova  rsi,rdi
  408539:	mov    rdi,rsp
  40853c:	mov    rdx,rax
  40853f:	call   403130 <posix_memalign@plt>
  408544:	mov    ecx,eax
  408546:	mov    rax,QWORD PTR [rsp]
  40854a:	test   ecx,ecx
  40854c:	je     408565 <flatcc_builder_aligned_alloc@@Base+0x45>
  40854e:	test   rax,rax
  408551:	je     408565 <flatcc_builder_aligned_alloc@@Base+0x45>
  408553:	mov    rdi,rax
  408556:	call   403030 <free@plt>
  40855b:	mov    QWORD PTR [rsp],0x0
  408563:	xor    eax,eax
  408565:	pop    rcx
  408566:	ret    
  408567:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408570 <flatcc_builder_aligned_free@@Base>:
  408570:	jmp    403030 <free@plt>
  408575:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40857f:	nop

0000000000408580 <flatcc_builder_get_emit_context@@Base>:
  408580:	mov    rax,QWORD PTR [rdi+0x38]
  408584:	ret    
  408585:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40858f:	nop

0000000000408590 <flatcc_emitter_recycle_page@@Base>:
  408590:	mov    rcx,QWORD PTR [rdi]
  408593:	mov    eax,0xffffffff
  408598:	cmp    rcx,rsi
  40859b:	je     4085f2 <flatcc_emitter_recycle_page@@Base+0x62>
  40859d:	cmp    QWORD PTR [rdi+0x8],rsi
  4085a1:	je     4085f2 <flatcc_emitter_recycle_page@@Base+0x62>
  4085a3:	mov    rax,QWORD PTR [rsi+0xb80]
  4085aa:	mov    rdx,QWORD PTR [rsi+0xb88]
  4085b1:	mov    QWORD PTR [rax+0xb88],rdx
  4085b8:	mov    rdx,QWORD PTR [rsi+0xb88]
  4085bf:	mov    QWORD PTR [rdx+0xb80],rax
  4085c6:	mov    rax,QWORD PTR [rcx+0xb88]
  4085cd:	mov    QWORD PTR [rsi+0xb88],rax
  4085d4:	mov    QWORD PTR [rsi+0xb80],rcx
  4085db:	mov    QWORD PTR [rax+0xb80],rsi
  4085e2:	mov    rax,QWORD PTR [rsi+0xb80]
  4085e9:	mov    QWORD PTR [rax+0xb88],rsi
  4085f0:	xor    eax,eax
  4085f2:	ret    
  4085f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085fd:	nop    DWORD PTR [rax]

0000000000408600 <flatcc_emitter_reset@@Base>:
  408600:	push   r14
  408602:	push   rbx
  408603:	push   rax
  408604:	mov    rax,QWORD PTR [rdi]
  408607:	test   rax,rax
  40860a:	je     4086eb <flatcc_emitter_reset@@Base+0xeb>
  408610:	mov    rbx,rdi
  408613:	mov    QWORD PTR [rdi+0x8],rax
  408617:	lea    rcx,[rax+0x5c0]
  40861e:	mov    QWORD PTR [rdi+0x10],rcx
  408622:	mov    QWORD PTR [rdi+0x20],rcx
  408626:	mov    QWORD PTR [rdi+0x18],0x5c0
  40862e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408636:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408640:	mov    rcx,QWORD PTR [rdi+0x30]
  408644:	mov    rdx,QWORD PTR [rdi+0x40]
  408648:	test   rdx,rdx
  40864b:	jne    408654 <flatcc_emitter_reset@@Base+0x54>
  40864d:	mov    QWORD PTR [rbx+0x40],rcx
  408651:	mov    rdx,rcx
  408654:	lea    rdx,[rdx+rdx*2]
  408658:	shr    rdx,0x2
  40865c:	shr    rcx,0x2
  408660:	add    rcx,rdx
  408663:	mov    QWORD PTR [rbx+0x40],rcx
  408667:	mov    QWORD PTR [rbx+0x30],0x0
  40866f:	add    rcx,rcx
  408672:	cmp    rcx,QWORD PTR [rbx+0x38]
  408676:	jae    4086eb <flatcc_emitter_reset@@Base+0xeb>
  408678:	mov    rdi,QWORD PTR [rax+0xb80]
  40867f:	cmp    rdi,rax
  408682:	je     4086eb <flatcc_emitter_reset@@Base+0xeb>
  408684:	lea    rcx,[rax+0xb80]
  40868b:	mov    r14,0xfffffffffffff480
  408692:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40869c:	nop    DWORD PTR [rax+0x0]
  4086a0:	mov    rdx,QWORD PTR [rdi+0xb80]
  4086a7:	mov    QWORD PTR [rcx],rdx
  4086aa:	mov    rcx,QWORD PTR [rdi+0xb80]
  4086b1:	mov    QWORD PTR [rcx+0xb88],rax
  4086b8:	call   403030 <free@plt>
  4086bd:	mov    rax,QWORD PTR [rbx+0x38]
  4086c1:	add    rax,r14
  4086c4:	mov    QWORD PTR [rbx+0x38],rax
  4086c8:	mov    rcx,QWORD PTR [rbx+0x40]
  4086cc:	add    rcx,rcx
  4086cf:	cmp    rcx,rax
  4086d2:	jae    4086eb <flatcc_emitter_reset@@Base+0xeb>
  4086d4:	mov    rax,QWORD PTR [rbx+0x8]
  4086d8:	lea    rcx,[rax+0xb80]
  4086df:	mov    rdi,QWORD PTR [rax+0xb80]
  4086e6:	cmp    rdi,QWORD PTR [rbx]
  4086e9:	jne    4086a0 <flatcc_emitter_reset@@Base+0xa0>
  4086eb:	add    rsp,0x8
  4086ef:	pop    rbx
  4086f0:	pop    r14
  4086f2:	ret    
  4086f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086fd:	nop    DWORD PTR [rax]

0000000000408700 <flatcc_emitter_clear@@Base>:
  408700:	push   r14
  408702:	push   rbx
  408703:	push   rax
  408704:	mov    rbx,QWORD PTR [rdi]
  408707:	test   rbx,rbx
  40870a:	je     40876a <flatcc_emitter_clear@@Base+0x6a>
  40870c:	mov    r14,rdi
  40870f:	mov    rax,QWORD PTR [rbx+0xb88]
  408716:	mov    QWORD PTR [rax+0xb80],0x0
  408721:	jmp    40873f <flatcc_emitter_clear@@Base+0x3f>
  408723:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40872d:	nop    DWORD PTR [rax]
  408730:	mov    rbx,rax
  408733:	mov    rdi,QWORD PTR [rax+0xb88]
  40873a:	call   403030 <free@plt>
  40873f:	mov    rax,QWORD PTR [rbx+0xb80]
  408746:	test   rax,rax
  408749:	jne    408730 <flatcc_emitter_clear@@Base+0x30>
  40874b:	mov    rdi,rbx
  40874e:	call   403030 <free@plt>
  408753:	vxorps xmm0,xmm0,xmm0
  408757:	vmovups YMMWORD PTR [r14+0x20],ymm0
  40875d:	vmovups YMMWORD PTR [r14],ymm0
  408762:	mov    QWORD PTR [r14+0x40],0x0
  40876a:	add    rsp,0x8
  40876e:	pop    rbx
  40876f:	pop    r14
  408771:	vzeroupper 
  408774:	ret    
  408775:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40877f:	nop

0000000000408780 <flatcc_emitter@@Base>:
  408780:	push   rbp
  408781:	push   r15
  408783:	push   r14
  408785:	push   r13
  408787:	push   r12
  408789:	push   rbx
  40878a:	sub    rsp,0x18
  40878e:	mov    r13d,edx
  408791:	mov    r14,rsi
  408794:	mov    r12,rdi
  408797:	add    QWORD PTR [rdi+0x30],r8
  40879b:	test   ecx,ecx
  40879d:	js     408931 <flatcc_emitter@@Base+0x1b1>
  4087a3:	mov    rdx,QWORD PTR [r12+0x28]
  4087a8:	cmp    rdx,r8
  4087ab:	jae    408b18 <flatcc_emitter@@Base+0x398>
  4087b1:	xor    eax,eax
  4087b3:	test   r13d,r13d
  4087b6:	je     408c4f <flatcc_emitter@@Base+0x4cf>
  4087bc:	mov    QWORD PTR [rsp+0x8],r13
  4087c1:	mov    r15,QWORD PTR [r14+0x8]
  4087c5:	test   r15,r15
  4087c8:	je     408916 <flatcc_emitter@@Base+0x196>
  4087ce:	mov    r13,QWORD PTR [r14]
  4087d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4087db:	nop    DWORD PTR [rax+rax*1+0x0]
  4087e0:	mov    rbp,r15
  4087e3:	cmp    r15,rdx
  4087e6:	jbe    4088e8 <flatcc_emitter@@Base+0x168>
  4087ec:	mov    rbp,rdx
  4087ef:	nop
  4087f0:	test   rbp,rbp
  4087f3:	jne    4088e8 <flatcc_emitter@@Base+0x168>
  4087f9:	mov    rbx,QWORD PTR [r12+0x8]
  4087fe:	test   rbx,rbx
  408801:	je     408810 <flatcc_emitter@@Base+0x90>
  408803:	mov    rax,QWORD PTR [rbx+0xb80]
  40880a:	cmp    rax,QWORD PTR [r12]
  40880e:	jne    408851 <flatcc_emitter@@Base+0xd1>
  408810:	mov    edi,0xb98
  408815:	call   4030f0 <malloc@plt>
  40881a:	test   rax,rax
  40881d:	je     408b2d <flatcc_emitter@@Base+0x3ad>
  408823:	add    QWORD PTR [r12+0x38],0xb80
  40882c:	test   rbx,rbx
  40882f:	je     408890 <flatcc_emitter@@Base+0x110>
  408831:	mov    QWORD PTR [rax+0xb88],rbx
  408838:	mov    rcx,QWORD PTR [r12]
  40883c:	mov    QWORD PTR [rax+0xb80],rcx
  408843:	mov    QWORD PTR [rcx+0xb88],rax
  40884a:	mov    QWORD PTR [rbx+0xb80],rax
  408851:	mov    QWORD PTR [r12+0x8],rax
  408856:	mov    QWORD PTR [r12+0x20],rax
  40885b:	mov    QWORD PTR [r12+0x28],0xb80
  408864:	mov    rcx,QWORD PTR [rax+0xb88]
  40886b:	mov    ecx,DWORD PTR [rcx+0xb90]
  408871:	mov    edx,0xb80
  408876:	add    ecx,edx
  408878:	mov    DWORD PTR [rax+0xb90],ecx
  40887e:	mov    ebp,0xb80
  408883:	cmp    r15,rbp
  408886:	ja     4087f0 <flatcc_emitter@@Base+0x70>
  40888c:	jmp    4088e5 <flatcc_emitter@@Base+0x165>
  40888e:	xchg   ax,ax
  408890:	mov    QWORD PTR [r12],rax
  408894:	mov    QWORD PTR [r12+0x8],rax
  408899:	mov    QWORD PTR [rax+0xb80],rax
  4088a0:	mov    QWORD PTR [rax+0xb88],rax
  4088a7:	mov    rcx,rax
  4088aa:	add    rcx,0x5c0
  4088b1:	mov    QWORD PTR [r12+0x10],rcx
  4088b6:	mov    QWORD PTR [r12+0x20],rcx
  4088bb:	mov    QWORD PTR [r12+0x18],0x5c0
  4088c4:	mov    QWORD PTR [r12+0x28],0x5c0
  4088cd:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4088d7:	mov    ebp,0x5c0
  4088dc:	cmp    r15,rbp
  4088df:	ja     4087f0 <flatcc_emitter@@Base+0x70>
  4088e5:	mov    rbp,r15
  4088e8:	mov    rdi,QWORD PTR [r12+0x20]
  4088ed:	mov    rsi,r13
  4088f0:	mov    rdx,rbp
  4088f3:	call   4030e0 <memcpy@plt>
  4088f8:	add    QWORD PTR [r12+0x20],rbp
  4088fd:	add    r13,rbp
  408900:	mov    rdx,QWORD PTR [r12+0x28]
  408905:	sub    rdx,rbp
  408908:	mov    QWORD PTR [r12+0x28],rdx
  40890d:	sub    r15,rbp
  408910:	jne    4087e0 <flatcc_emitter@@Base+0x60>
  408916:	mov    r13,QWORD PTR [rsp+0x8]
  40891b:	add    r13d,0xffffffff
  40891f:	add    r14,0x10
  408923:	test   r13d,r13d
  408926:	jne    4087bc <flatcc_emitter@@Base+0x3c>
  40892c:	jmp    408c4d <flatcc_emitter@@Base+0x4cd>
  408931:	lea    rsi,[r12+0x18]
  408936:	mov    rdx,QWORD PTR [r12+0x18]
  40893b:	cmp    rdx,r8
  40893e:	jae    408b37 <flatcc_emitter@@Base+0x3b7>
  408944:	xor    eax,eax
  408946:	test   r13d,r13d
  408949:	je     408c4f <flatcc_emitter@@Base+0x4cf>
  40894f:	mov    QWORD PTR [rsp+0x10],rsi
  408954:	movsxd rax,r13d
  408957:	shl    rax,0x4
  40895b:	add    r14,rax
  40895e:	mov    esi,0xfffff480
  408963:	mov    QWORD PTR [rsp+0x8],r13
  408968:	mov    r15,QWORD PTR [r14-0x8]
  40896c:	add    r14,0xfffffffffffffff0
  408970:	test   r15,r15
  408973:	je     408b04 <flatcc_emitter@@Base+0x384>
  408979:	mov    r13,QWORD PTR [r14]
  40897c:	add    r13,r15
  40897f:	nop
  408980:	mov    rax,QWORD PTR [rsp+0x10]
  408985:	mov    rax,QWORD PTR [rax]
  408988:	cmp    r15,rax
  40898b:	jbe    408ad0 <flatcc_emitter@@Base+0x350>
  408991:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40899b:	nop    DWORD PTR [rax+rax*1+0x0]
  4089a0:	mov    rbp,rax
  4089a3:	test   rax,rax
  4089a6:	jne    408ad3 <flatcc_emitter@@Base+0x353>
  4089ac:	mov    rbx,QWORD PTR [r12]
  4089b0:	test   rbx,rbx
  4089b3:	je     4089e0 <flatcc_emitter@@Base+0x260>
  4089b5:	mov    rax,QWORD PTR [rbx+0xb88]
  4089bc:	cmp    rax,QWORD PTR [r12+0x8]
  4089c1:	je     4089e0 <flatcc_emitter@@Base+0x260>
  4089c3:	mov    edx,DWORD PTR [rbx+0xb90]
  4089c9:	add    edx,esi
  4089cb:	lea    rcx,[rax+0xb90]
  4089d2:	mov    DWORD PTR [rax+0xb90],edx
  4089d8:	mov    QWORD PTR [r12],rax
  4089dc:	jmp    408a35 <flatcc_emitter@@Base+0x2b5>
  4089de:	xchg   ax,ax
  4089e0:	mov    edi,0xb98
  4089e5:	call   4030f0 <malloc@plt>
  4089ea:	test   rax,rax
  4089ed:	je     408b2d <flatcc_emitter@@Base+0x3ad>
  4089f3:	add    QWORD PTR [r12+0x38],0xb80
  4089fc:	test   rbx,rbx
  4089ff:	je     408a70 <flatcc_emitter@@Base+0x2f0>
  408a01:	mov    rcx,QWORD PTR [r12+0x8]
  408a06:	mov    QWORD PTR [rax+0xb88],rcx
  408a0d:	mov    QWORD PTR [rax+0xb80],rbx
  408a14:	mov    QWORD PTR [rbx+0xb88],rax
  408a1b:	mov    QWORD PTR [rcx+0xb80],rax
  408a22:	mov    QWORD PTR [r12],rax
  408a26:	mov    rcx,rax
  408a29:	add    rcx,0xb90
  408a30:	mov    esi,0xfffff480
  408a35:	lea    rdx,[rax+0xb80]
  408a3c:	mov    QWORD PTR [r12+0x10],rdx
  408a41:	mov    QWORD PTR [r12+0x18],0xb80
  408a4a:	mov    rax,QWORD PTR [rax+0xb80]
  408a51:	mov    eax,DWORD PTR [rax+0xb90]
  408a57:	add    eax,esi
  408a59:	mov    DWORD PTR [rcx],eax
  408a5b:	mov    eax,0xb80
  408a60:	cmp    r15,rax
  408a63:	ja     4089a0 <flatcc_emitter@@Base+0x220>
  408a69:	jmp    408ad0 <flatcc_emitter@@Base+0x350>
  408a6b:	nop    DWORD PTR [rax+rax*1+0x0]
  408a70:	mov    QWORD PTR [r12],rax
  408a74:	mov    QWORD PTR [r12+0x8],rax
  408a79:	mov    QWORD PTR [rax+0xb80],rax
  408a80:	mov    QWORD PTR [rax+0xb88],rax
  408a87:	mov    rcx,rax
  408a8a:	add    rcx,0x5c0
  408a91:	mov    QWORD PTR [r12+0x10],rcx
  408a96:	mov    QWORD PTR [r12+0x20],rcx
  408a9b:	mov    QWORD PTR [r12+0x18],0x5c0
  408aa4:	mov    QWORD PTR [r12+0x28],0x5c0
  408aad:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408ab7:	mov    eax,0x5c0
  408abc:	mov    esi,0xfffff480
  408ac1:	cmp    r15,rax
  408ac4:	ja     4089a0 <flatcc_emitter@@Base+0x220>
  408aca:	nop    WORD PTR [rax+rax*1+0x0]
  408ad0:	mov    rbp,r15
  408ad3:	mov    rdi,QWORD PTR [r12+0x10]
  408ad8:	sub    rdi,rbp
  408adb:	mov    QWORD PTR [r12+0x10],rdi
  408ae0:	sub    rax,rbp
  408ae3:	mov    QWORD PTR [r12+0x18],rax
  408ae8:	sub    r13,rbp
  408aeb:	mov    rsi,r13
  408aee:	mov    rdx,rbp
  408af1:	call   4030e0 <memcpy@plt>
  408af6:	mov    esi,0xfffff480
  408afb:	sub    r15,rbp
  408afe:	jne    408980 <flatcc_emitter@@Base+0x200>
  408b04:	mov    r13,QWORD PTR [rsp+0x8]
  408b09:	add    r13d,0xffffffff
  408b0d:	jne    408963 <flatcc_emitter@@Base+0x1e3>
  408b13:	jmp    408c4d <flatcc_emitter@@Base+0x4cd>
  408b18:	lea    rsi,[r12+0x28]
  408b1d:	mov    rbp,QWORD PTR [r12+0x20]
  408b22:	lea    rcx,[r8+rbp*1]
  408b26:	mov    QWORD PTR [r12+0x20],rcx
  408b2b:	jmp    408b44 <flatcc_emitter@@Base+0x3c4>
  408b2d:	mov    eax,0xffffffff
  408b32:	jmp    408c4f <flatcc_emitter@@Base+0x4cf>
  408b37:	mov    rbp,QWORD PTR [r12+0x10]
  408b3c:	sub    rbp,r8
  408b3f:	mov    QWORD PTR [r12+0x10],rbp
  408b44:	sub    rdx,r8
  408b47:	mov    QWORD PTR [rsi],rdx
  408b4a:	xor    eax,eax
  408b4c:	test   r13d,r13d
  408b4f:	je     408c4f <flatcc_emitter@@Base+0x4cf>
  408b55:	lea    r15d,[r13-0x1]
  408b59:	mov    r12d,r13d
  408b5c:	and    r12d,0x7
  408b60:	je     408b92 <flatcc_emitter@@Base+0x412>
  408b62:	xor    ebx,ebx
  408b64:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b6e:	xchg   ax,ax
  408b70:	mov    rsi,QWORD PTR [r14]
  408b73:	mov    rdx,QWORD PTR [r14+0x8]
  408b77:	mov    rdi,rbp
  408b7a:	call   4030e0 <memcpy@plt>
  408b7f:	add    rbp,QWORD PTR [r14+0x8]
  408b83:	add    r14,0x10
  408b87:	add    ebx,0x1
  408b8a:	cmp    r12d,ebx
  408b8d:	jne    408b70 <flatcc_emitter@@Base+0x3f0>
  408b8f:	sub    r13d,ebx
  408b92:	cmp    r15d,0x7
  408b96:	jb     408c4d <flatcc_emitter@@Base+0x4cd>
  408b9c:	nop    DWORD PTR [rax+0x0]
  408ba0:	mov    rsi,QWORD PTR [r14]
  408ba3:	mov    rdx,QWORD PTR [r14+0x8]
  408ba7:	mov    rdi,rbp
  408baa:	call   4030e0 <memcpy@plt>
  408baf:	add    rbp,QWORD PTR [r14+0x8]
  408bb3:	mov    rsi,QWORD PTR [r14+0x10]
  408bb7:	mov    rdx,QWORD PTR [r14+0x18]
  408bbb:	mov    rdi,rbp
  408bbe:	call   4030e0 <memcpy@plt>
  408bc3:	add    rbp,QWORD PTR [r14+0x18]
  408bc7:	mov    rsi,QWORD PTR [r14+0x20]
  408bcb:	mov    rdx,QWORD PTR [r14+0x28]
  408bcf:	mov    rdi,rbp
  408bd2:	call   4030e0 <memcpy@plt>
  408bd7:	add    rbp,QWORD PTR [r14+0x28]
  408bdb:	mov    rsi,QWORD PTR [r14+0x30]
  408bdf:	mov    rdx,QWORD PTR [r14+0x38]
  408be3:	mov    rdi,rbp
  408be6:	call   4030e0 <memcpy@plt>
  408beb:	add    rbp,QWORD PTR [r14+0x38]
  408bef:	mov    rsi,QWORD PTR [r14+0x40]
  408bf3:	mov    rdx,QWORD PTR [r14+0x48]
  408bf7:	mov    rdi,rbp
  408bfa:	call   4030e0 <memcpy@plt>
  408bff:	add    rbp,QWORD PTR [r14+0x48]
  408c03:	mov    rsi,QWORD PTR [r14+0x50]
  408c07:	mov    rdx,QWORD PTR [r14+0x58]
  408c0b:	mov    rdi,rbp
  408c0e:	call   4030e0 <memcpy@plt>
  408c13:	add    rbp,QWORD PTR [r14+0x58]
  408c17:	mov    rsi,QWORD PTR [r14+0x60]
  408c1b:	mov    rdx,QWORD PTR [r14+0x68]
  408c1f:	mov    rdi,rbp
  408c22:	call   4030e0 <memcpy@plt>
  408c27:	add    rbp,QWORD PTR [r14+0x68]
  408c2b:	mov    rsi,QWORD PTR [r14+0x70]
  408c2f:	mov    rdx,QWORD PTR [r14+0x78]
  408c33:	mov    rdi,rbp
  408c36:	call   4030e0 <memcpy@plt>
  408c3b:	add    rbp,QWORD PTR [r14+0x78]
  408c3f:	sub    r14,0xffffffffffffff80
  408c43:	add    r13d,0xfffffff8
  408c47:	jne    408ba0 <flatcc_emitter@@Base+0x420>
  408c4d:	xor    eax,eax
  408c4f:	add    rsp,0x18
  408c53:	pop    rbx
  408c54:	pop    r12
  408c56:	pop    r13
  408c58:	pop    r14
  408c5a:	pop    r15
  408c5c:	pop    rbp
  408c5d:	ret    
  408c5e:	xchg   ax,ax

0000000000408c60 <flatcc_emitter_copy_buffer@@Base>:
  408c60:	push   r15
  408c62:	push   r14
  408c64:	push   r12
  408c66:	push   rbx
  408c67:	push   rax
  408c68:	mov    rax,rdx
  408c6b:	mov    rdx,QWORD PTR [rdi+0x30]
  408c6f:	cmp    rdx,rax
  408c72:	ja     408cfd <flatcc_emitter_copy_buffer@@Base+0x9d>
  408c78:	mov    r14,rdi
  408c7b:	mov    rax,QWORD PTR [rdi]
  408c7e:	test   rax,rax
  408c81:	je     408cfd <flatcc_emitter_copy_buffer@@Base+0x9d>
  408c83:	mov    r15,rsi
  408c86:	cmp    rax,QWORD PTR [r14+0x8]
  408c8a:	je     408d0f <flatcc_emitter_copy_buffer@@Base+0xaf>
  408c90:	mov    r12d,0xb80
  408c96:	sub    r12,QWORD PTR [r14+0x18]
  408c9a:	mov    rsi,QWORD PTR [r14+0x10]
  408c9e:	mov    rdi,r15
  408ca1:	mov    rdx,r12
  408ca4:	call   4030e0 <memcpy@plt>
  408ca9:	add    r12,r15
  408cac:	mov    rax,QWORD PTR [r14]
  408caf:	mov    rbx,QWORD PTR [rax+0xb80]
  408cb6:	cmp    rbx,QWORD PTR [r14+0x8]
  408cba:	je     408ce4 <flatcc_emitter_copy_buffer@@Base+0x84>
  408cbc:	nop    DWORD PTR [rax+0x0]
  408cc0:	mov    edx,0xb80
  408cc5:	mov    rdi,r12
  408cc8:	mov    rsi,rbx
  408ccb:	call   4030e0 <memcpy@plt>
  408cd0:	add    r12,0xb80
  408cd7:	mov    rbx,QWORD PTR [rbx+0xb80]
  408cde:	cmp    rbx,QWORD PTR [r14+0x8]
  408ce2:	jne    408cc0 <flatcc_emitter_copy_buffer@@Base+0x60>
  408ce4:	mov    edx,0xb80
  408ce9:	sub    rdx,QWORD PTR [r14+0x28]
  408ced:	mov    rdi,r12
  408cf0:	mov    rsi,rbx
  408cf3:	call   4030e0 <memcpy@plt>
  408cf8:	mov    r15,r12
  408cfb:	jmp    408d00 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408cfd:	xor    r15d,r15d
  408d00:	mov    rax,r15
  408d03:	add    rsp,0x8
  408d07:	pop    rbx
  408d08:	pop    r12
  408d0a:	pop    r14
  408d0c:	pop    r15
  408d0e:	ret    
  408d0f:	mov    rsi,QWORD PTR [r14+0x10]
  408d13:	mov    rdi,r15
  408d16:	call   4030e0 <memcpy@plt>
  408d1b:	jmp    408d00 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408d1d:	nop    DWORD PTR [rax]

0000000000408d20 <__libc_csu_init@@Base>:
  408d20:	endbr64 
  408d24:	push   r15
  408d26:	lea    r15,[rip+0x50d3]        # 40de00 <flatcc_builder_padding_base@@Base+0x4770>
  408d2d:	push   r14
  408d2f:	mov    r14,rdx
  408d32:	push   r13
  408d34:	mov    r13,rsi
  408d37:	push   r12
  408d39:	mov    r12d,edi
  408d3c:	push   rbp
  408d3d:	lea    rbp,[rip+0x50c4]        # 40de08 <flatcc_builder_padding_base@@Base+0x4778>
  408d44:	push   rbx
  408d45:	sub    rbp,r15
  408d48:	sub    rsp,0x8
  408d4c:	call   403000 <free@plt-0x30>
  408d51:	sar    rbp,0x3
  408d55:	je     408d76 <__libc_csu_init@@Base+0x56>
  408d57:	xor    ebx,ebx
  408d59:	nop    DWORD PTR [rax+0x0]
  408d60:	mov    rdx,r14
  408d63:	mov    rsi,r13
  408d66:	mov    edi,r12d
  408d69:	call   QWORD PTR [r15+rbx*8]
  408d6d:	add    rbx,0x1
  408d71:	cmp    rbp,rbx
  408d74:	jne    408d60 <__libc_csu_init@@Base+0x40>
  408d76:	add    rsp,0x8
  408d7a:	pop    rbx
  408d7b:	pop    rbp
  408d7c:	pop    r12
  408d7e:	pop    r13
  408d80:	pop    r14
  408d82:	pop    r15
  408d84:	ret    
  408d85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408d90 <__libc_csu_fini@@Base>:
  408d90:	endbr64 
  408d94:	ret    

Disassembly of section .fini:

0000000000408d98 <.fini>:
  408d98:	endbr64 
  408d9c:	sub    rsp,0x8
  408da0:	add    rsp,0x8
  408da4:	ret    
