
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xcfe1]        # 40fff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xcfe2]        # 410008 <flatcc_builder_padding_base@@Base+0x4e28>
  403026:	jmp    QWORD PTR [rip+0xcfe4]        # 410010 <flatcc_builder_padding_base@@Base+0x4e30>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xcfe2]        # 410018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strncpy@plt>:
  403040:	jmp    QWORD PTR [rip+0xcfda]        # 410020 <strncpy@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xcfd2]        # 410028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xcfca]        # 410030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0xcfc2]        # 410038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0xcfba]        # 410040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0xcfb2]        # 410048 <memcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcpy@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xcfaa]        # 410050 <memcpy@GLIBC_2.14>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <malloc@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xcfa2]        # 410058 <malloc@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <realloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xcf9a]        # 410060 <realloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <posix_memalign@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xcf92]        # 410068 <posix_memalign@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

00000000004030e0 <_start@@Base>:
  4030e0:	endbr64 
  4030e4:	xor    ebp,ebp
  4030e6:	mov    r9,rdx
  4030e9:	pop    rsi
  4030ea:	mov    rdx,rsp
  4030ed:	and    rsp,0xfffffffffffffff0
  4030f1:	push   rax
  4030f2:	push   rsp
  4030f3:	mov    r8,0x40a500
  4030fa:	mov    rcx,0x40a490
  403101:	mov    rdi,0x4031d0
  403108:	call   QWORD PTR [rip+0xceda]        # 40ffe8 <__libc_start_main@GLIBC_2.2.5>
  40310e:	hlt    
  40310f:	nop
  403110:	endbr64 
  403114:	ret    
  403115:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40311f:	nop
  403120:	mov    eax,0x410080
  403125:	cmp    rax,0x410080
  40312b:	je     403140 <_start@@Base+0x60>
  40312d:	mov    eax,0x0
  403132:	test   rax,rax
  403135:	je     403140 <_start@@Base+0x60>
  403137:	mov    edi,0x410080
  40313c:	jmp    rax
  40313e:	xchg   ax,ax
  403140:	ret    
  403141:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40314c:	nop    DWORD PTR [rax+0x0]
  403150:	mov    esi,0x410080
  403155:	sub    rsi,0x410080
  40315c:	mov    rax,rsi
  40315f:	shr    rsi,0x3f
  403163:	sar    rax,0x3
  403167:	add    rsi,rax
  40316a:	sar    rsi,1
  40316d:	je     403180 <_start@@Base+0xa0>
  40316f:	mov    eax,0x0
  403174:	test   rax,rax
  403177:	je     403180 <_start@@Base+0xa0>
  403179:	mov    edi,0x410080
  40317e:	jmp    rax
  403180:	ret    
  403181:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40318c:	nop    DWORD PTR [rax+0x0]
  403190:	endbr64 
  403194:	cmp    BYTE PTR [rip+0xcee5],0x0        # 410080 <__bss_start@@Base>
  40319b:	jne    4031b0 <_start@@Base+0xd0>
  40319d:	push   rbp
  40319e:	mov    rbp,rsp
  4031a1:	call   403120 <_start@@Base+0x40>
  4031a6:	mov    BYTE PTR [rip+0xced3],0x1        # 410080 <__bss_start@@Base>
  4031ad:	pop    rbp
  4031ae:	ret    
  4031af:	nop
  4031b0:	ret    
  4031b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031bc:	nop    DWORD PTR [rax+0x0]
  4031c0:	endbr64 
  4031c4:	jmp    403150 <_start@@Base+0x70>
  4031c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031d0 <main@@Base>:
  4031d0:	push   rbp
  4031d1:	push   rbx
  4031d2:	sub    rsp,0x198
  4031d9:	lea    rbx,[rsp+0x10]
  4031de:	mov    rdi,rbx
  4031e1:	call   403d50 <flatcc_builder_init@@Base>
  4031e6:	lea    rsi,[rip+0x7e59]        # 40b046 <_IO_stdin_used@@Base+0x46>
  4031ed:	xor    edx,edx
  4031ef:	xor    ecx,ecx
  4031f1:	mov    rdi,rbx
  4031f4:	call   404af0 <flatcc_builder_start_buffer@@Base>
  4031f9:	test   eax,eax
  4031fb:	jne    40320c <main@@Base+0x3c>
  4031fd:	lea    rdi,[rsp+0x10]
  403202:	mov    esi,0x24
  403207:	call   405dc0 <flatcc_builder_start_table@@Base>
  40320c:	lea    rsi,[rip+0x7e29]        # 40b03c <_IO_stdin_used@@Base+0x3c>
  403213:	lea    rdi,[rsp+0x10]
  403218:	call   408030 <flatcc_builder_create_string_str@@Base>
  40321d:	test   eax,eax
  40321f:	je     403239 <main@@Base+0x69>
  403221:	mov    ebx,eax
  403223:	lea    rdi,[rsp+0x10]
  403228:	mov    esi,0x3
  40322d:	call   406fe0 <flatcc_builder_table_add_offset@@Base>
  403232:	test   rax,rax
  403235:	je     403239 <main@@Base+0x69>
  403237:	mov    DWORD PTR [rax],ebx
  403239:	lea    rsi,[rip+0x7df8]        # 40b038 <_IO_stdin_used@@Base+0x38>
  403240:	lea    rdi,[rsp+0x10]
  403245:	mov    edx,0x1
  40324a:	call   406760 <flatcc_builder_check_required@@Base>
  40324f:	test   eax,eax
  403251:	je     4032a8 <main@@Base+0xd8>
  403253:	lea    rbx,[rsp+0x10]
  403258:	mov    rdi,rbx
  40325b:	call   4067d0 <flatcc_builder_end_table@@Base>
  403260:	mov    rdi,rbx
  403263:	mov    esi,eax
  403265:	call   404d10 <flatcc_builder_end_buffer@@Base>
  40326a:	lea    rsi,[rsp+0x8]
  40326f:	mov    rdi,rbx
  403272:	call   408390 <flatcc_builder_get_direct_buffer@@Base>
  403277:	mov    rsi,QWORD PTR [rsp+0x8]
  40327c:	lea    rdx,[rip+0x7dc3]        # 40b046 <_IO_stdin_used@@Base+0x46>
  403283:	lea    rcx,[rip+0x46]        # 4032d0 <main@@Base+0x100>
  40328a:	mov    rdi,rax
  40328d:	call   409930 <flatcc_verify_table_as_root@@Base>
  403292:	mov    ebp,eax
  403294:	mov    rdi,rbx
  403297:	call   404110 <flatcc_builder_clear@@Base>
  40329c:	mov    eax,ebp
  40329e:	add    rsp,0x198
  4032a5:	pop    rbx
  4032a6:	pop    rbp
  4032a7:	ret    
  4032a8:	lea    rdi,[rip+0x7d9c]        # 40b04b <_IO_stdin_used@@Base+0x4b>
  4032af:	lea    rsi,[rip+0x7e37]        # 40b0ed <_IO_stdin_used@@Base+0xed>
  4032b6:	lea    rcx,[rip+0x7eaa]        # 40b167 <_IO_stdin_used@@Base+0x167>
  4032bd:	mov    edx,0x95e
  4032c2:	call   403060 <__assert_fail@plt>
  4032c7:	nop    WORD PTR [rax+rax*1+0x0]
  4032d0:	push   rbx
  4032d1:	mov    rbx,rdi
  4032d4:	xor    esi,esi
  4032d6:	mov    edx,0x20
  4032db:	mov    ecx,0x10
  4032e0:	call   408dd0 <flatcc_verify_field@@Base>
  4032e5:	test   eax,eax
  4032e7:	jne    4036f2 <main@@Base+0x522>
  4032ed:	mov    esi,0x2
  4032f2:	mov    edx,0x2
  4032f7:	mov    ecx,0x2
  4032fc:	mov    rdi,rbx
  4032ff:	call   408dd0 <flatcc_verify_field@@Base>
  403304:	test   eax,eax
  403306:	jne    4036f2 <main@@Base+0x522>
  40330c:	mov    esi,0x1
  403311:	mov    edx,0x2
  403316:	mov    ecx,0x2
  40331b:	mov    rdi,rbx
  40331e:	call   408dd0 <flatcc_verify_field@@Base>
  403323:	test   eax,eax
  403325:	jne    4036f2 <main@@Base+0x522>
  40332b:	mov    esi,0x3
  403330:	mov    edx,0x1
  403335:	mov    rdi,rbx
  403338:	call   408e30 <flatcc_verify_string_field@@Base>
  40333d:	test   eax,eax
  40333f:	jne    4036f2 <main@@Base+0x522>
  403345:	mov    esi,0x6
  40334a:	mov    edx,0x1
  40334f:	mov    ecx,0x1
  403354:	mov    rdi,rbx
  403357:	call   408dd0 <flatcc_verify_field@@Base>
  40335c:	test   eax,eax
  40335e:	jne    4036f2 <main@@Base+0x522>
  403364:	mov    esi,0x5
  403369:	xor    edx,edx
  40336b:	mov    ecx,0x1
  403370:	mov    r8d,0x1
  403376:	mov    r9d,0xffffffff
  40337c:	mov    rdi,rbx
  40337f:	call   408ee0 <flatcc_verify_vector_field@@Base>
  403384:	test   eax,eax
  403386:	jne    4036f2 <main@@Base+0x522>
  40338c:	lea    rcx,[rip+0xffffffffffffff3d]        # 4032d0 <main@@Base+0x100>
  403393:	mov    esi,0xb
  403398:	xor    edx,edx
  40339a:	mov    rdi,rbx
  40339d:	call   409250 <flatcc_verify_table_vector_field@@Base>
  4033a2:	test   eax,eax
  4033a4:	jne    4036f2 <main@@Base+0x522>
  4033aa:	mov    esi,0xa
  4033af:	xor    edx,edx
  4033b1:	mov    rdi,rbx
  4033b4:	call   408fb0 <flatcc_verify_string_vector_field@@Base>
  4033b9:	test   eax,eax
  4033bb:	jne    4036f2 <main@@Base+0x522>
  4033c1:	mov    esi,0x1c
  4033c6:	xor    edx,edx
  4033c8:	mov    rdi,rbx
  4033cb:	call   408fb0 <flatcc_verify_string_vector_field@@Base>
  4033d0:	test   eax,eax
  4033d2:	jne    4036f2 <main@@Base+0x522>
  4033d8:	mov    esi,0x18
  4033dd:	xor    edx,edx
  4033df:	mov    ecx,0x1
  4033e4:	mov    r8d,0x1
  4033ea:	mov    r9d,0xffffffff
  4033f0:	mov    rdi,rbx
  4033f3:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4033f8:	test   eax,eax
  4033fa:	jne    4036f2 <main@@Base+0x522>
  403400:	mov    esi,0x1d
  403405:	xor    edx,edx
  403407:	mov    ecx,0x8
  40340c:	mov    r8d,0x4
  403412:	mov    r9d,0x1fffffff
  403418:	mov    rdi,rbx
  40341b:	call   408ee0 <flatcc_verify_vector_field@@Base>
  403420:	test   eax,eax
  403422:	jne    4036f2 <main@@Base+0x522>
  403428:	lea    rcx,[rip+0xfffffffffffffea1]        # 4032d0 <main@@Base+0x100>
  40342f:	mov    esi,0xc
  403434:	xor    edx,edx
  403436:	mov    rdi,rbx
  403439:	call   409110 <flatcc_verify_table_field@@Base>
  40343e:	test   eax,eax
  403440:	jne    4036f2 <main@@Base+0x522>
  403446:	lea    rcx,[rip+0x2c3]        # 403710 <main@@Base+0x540>
  40344d:	mov    esi,0x8
  403452:	xor    edx,edx
  403454:	mov    rdi,rbx
  403457:	call   40a020 <flatcc_verify_union_field@@Base>
  40345c:	test   eax,eax
  40345e:	jne    4036f2 <main@@Base+0x522>
  403464:	mov    esi,0x9
  403469:	xor    edx,edx
  40346b:	mov    ecx,0x4
  403470:	mov    r8d,0x2
  403476:	mov    r9d,0x3fffffff
  40347c:	mov    rdi,rbx
  40347f:	call   408ee0 <flatcc_verify_vector_field@@Base>
  403484:	test   eax,eax
  403486:	jne    4036f2 <main@@Base+0x522>
  40348c:	mov    esi,0x1f
  403491:	xor    edx,edx
  403493:	mov    ecx,0x4
  403498:	mov    r8d,0x2
  40349e:	mov    r9d,0x3fffffff
  4034a4:	mov    rdi,rbx
  4034a7:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4034ac:	test   eax,eax
  4034ae:	jne    4036f2 <main@@Base+0x522>
  4034b4:	lea    r9,[rip+0xfffffffffffffe15]        # 4032d0 <main@@Base+0x100>
  4034bb:	mov    esi,0xd
  4034c0:	xor    edx,edx
  4034c2:	xor    ecx,ecx
  4034c4:	mov    r8d,0x1
  4034ca:	mov    rdi,rbx
  4034cd:	call   409d40 <flatcc_verify_table_as_nested_root@@Base>
  4034d2:	test   eax,eax
  4034d4:	jne    4036f2 <main@@Base+0x522>
  4034da:	lea    rcx,[rip+0x24f]        # 403730 <main@@Base+0x560>
  4034e1:	mov    esi,0xe
  4034e6:	xor    edx,edx
  4034e8:	mov    rdi,rbx
  4034eb:	call   409110 <flatcc_verify_table_field@@Base>
  4034f0:	test   eax,eax
  4034f2:	jne    4036f2 <main@@Base+0x522>
  4034f8:	mov    esi,0xf
  4034fd:	mov    edx,0x1
  403502:	mov    ecx,0x1
  403507:	mov    rdi,rbx
  40350a:	call   408dd0 <flatcc_verify_field@@Base>
  40350f:	test   eax,eax
  403511:	jne    4036f2 <main@@Base+0x522>
  403517:	mov    esi,0x10
  40351c:	mov    edx,0x4
  403521:	mov    ecx,0x4
  403526:	mov    rdi,rbx
  403529:	call   408dd0 <flatcc_verify_field@@Base>
  40352e:	test   eax,eax
  403530:	jne    4036f2 <main@@Base+0x522>
  403536:	mov    esi,0x11
  40353b:	mov    edx,0x4
  403540:	mov    ecx,0x4
  403545:	mov    rdi,rbx
  403548:	call   408dd0 <flatcc_verify_field@@Base>
  40354d:	test   eax,eax
  40354f:	jne    4036f2 <main@@Base+0x522>
  403555:	mov    esi,0x12
  40355a:	mov    edx,0x8
  40355f:	mov    ecx,0x8
  403564:	mov    rdi,rbx
  403567:	call   408dd0 <flatcc_verify_field@@Base>
  40356c:	test   eax,eax
  40356e:	jne    4036f2 <main@@Base+0x522>
  403574:	mov    esi,0x13
  403579:	mov    edx,0x8
  40357e:	mov    ecx,0x8
  403583:	mov    rdi,rbx
  403586:	call   408dd0 <flatcc_verify_field@@Base>
  40358b:	test   eax,eax
  40358d:	jne    4036f2 <main@@Base+0x522>
  403593:	mov    esi,0x14
  403598:	mov    edx,0x4
  40359d:	mov    ecx,0x4
  4035a2:	mov    rdi,rbx
  4035a5:	call   408dd0 <flatcc_verify_field@@Base>
  4035aa:	test   eax,eax
  4035ac:	jne    4036f2 <main@@Base+0x522>
  4035b2:	mov    esi,0x15
  4035b7:	mov    edx,0x4
  4035bc:	mov    ecx,0x4
  4035c1:	mov    rdi,rbx
  4035c4:	call   408dd0 <flatcc_verify_field@@Base>
  4035c9:	test   eax,eax
  4035cb:	jne    4036f2 <main@@Base+0x522>
  4035d1:	mov    esi,0x16
  4035d6:	mov    edx,0x8
  4035db:	mov    ecx,0x8
  4035e0:	mov    rdi,rbx
  4035e3:	call   408dd0 <flatcc_verify_field@@Base>
  4035e8:	test   eax,eax
  4035ea:	jne    4036f2 <main@@Base+0x522>
  4035f0:	mov    esi,0x17
  4035f5:	mov    edx,0x8
  4035fa:	mov    ecx,0x8
  4035ff:	mov    rdi,rbx
  403602:	call   408dd0 <flatcc_verify_field@@Base>
  403607:	test   eax,eax
  403609:	jne    4036f2 <main@@Base+0x522>
  40360f:	mov    esi,0x19
  403614:	mov    edx,0x4
  403619:	mov    ecx,0x4
  40361e:	mov    rdi,rbx
  403621:	call   408dd0 <flatcc_verify_field@@Base>
  403626:	test   eax,eax
  403628:	jne    4036f2 <main@@Base+0x522>
  40362e:	mov    esi,0x1a
  403633:	mov    edx,0x4
  403638:	mov    ecx,0x4
  40363d:	mov    rdi,rbx
  403640:	call   408dd0 <flatcc_verify_field@@Base>
  403645:	test   eax,eax
  403647:	jne    4036f2 <main@@Base+0x522>
  40364d:	mov    esi,0x1b
  403652:	mov    edx,0x4
  403657:	mov    ecx,0x4
  40365c:	mov    rdi,rbx
  40365f:	call   408dd0 <flatcc_verify_field@@Base>
  403664:	test   eax,eax
  403666:	jne    4036f2 <main@@Base+0x522>
  40366c:	mov    esi,0x1e
  403671:	xor    edx,edx
  403673:	mov    ecx,0x1
  403678:	mov    r8d,0x1
  40367e:	mov    r9d,0xffffffff
  403684:	mov    rdi,rbx
  403687:	call   408ee0 <flatcc_verify_vector_field@@Base>
  40368c:	test   eax,eax
  40368e:	jne    4036f2 <main@@Base+0x522>
  403690:	mov    esi,0x20
  403695:	xor    edx,edx
  403697:	mov    ecx,0x8
  40369c:	mov    r8d,0x8
  4036a2:	mov    r9d,0x1fffffff
  4036a8:	mov    rdi,rbx
  4036ab:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4036b0:	test   eax,eax
  4036b2:	jne    4036f2 <main@@Base+0x522>
  4036b4:	mov    esi,0x21
  4036b9:	xor    edx,edx
  4036bb:	mov    ecx,0x8
  4036c0:	mov    r8d,0x8
  4036c6:	mov    r9d,0x1fffffff
  4036cc:	mov    rdi,rbx
  4036cf:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4036d4:	test   eax,eax
  4036d6:	jne    4036f2 <main@@Base+0x522>
  4036d8:	lea    rcx,[rip+0xa1]        # 403780 <main@@Base+0x5b0>
  4036df:	mov    esi,0x22
  4036e4:	xor    edx,edx
  4036e6:	mov    rdi,rbx
  4036e9:	call   409110 <flatcc_verify_table_field@@Base>
  4036ee:	test   eax,eax
  4036f0:	je     4036f4 <main@@Base+0x524>
  4036f2:	pop    rbx
  4036f3:	ret    
  4036f4:	lea    rcx,[rip+0x95]        # 403790 <main@@Base+0x5c0>
  4036fb:	mov    esi,0x23
  403700:	xor    edx,edx
  403702:	mov    rdi,rbx
  403705:	pop    rbx
  403706:	jmp    409110 <flatcc_verify_table_field@@Base>
  40370b:	nop    DWORD PTR [rax+rax*1+0x0]
  403710:	mov    al,BYTE PTR [rdi+0x10]
  403713:	add    al,0xff
  403715:	cmp    al,0x3
  403717:	ja     40372d <main@@Base+0x55d>
  403719:	movsx  rax,al
  40371d:	lea    rcx,[rip+0xc59c]        # 40fcc0 <flatcc_builder_padding_base@@Base+0x4ae0>
  403724:	mov    rsi,QWORD PTR [rcx+rax*8]
  403728:	jmp    409590 <flatcc_verify_union_table@@Base>
  40372d:	xor    eax,eax
  40372f:	ret    
  403730:	push   rbx
  403731:	mov    rbx,rdi
  403734:	xor    esi,esi
  403736:	xor    edx,edx
  403738:	call   408e30 <flatcc_verify_string_field@@Base>
  40373d:	test   eax,eax
  40373f:	jne    40375c <main@@Base+0x58c>
  403741:	mov    esi,0x1
  403746:	mov    edx,0x8
  40374b:	mov    ecx,0x8
  403750:	mov    rdi,rbx
  403753:	call   408dd0 <flatcc_verify_field@@Base>
  403758:	test   eax,eax
  40375a:	je     40375e <main@@Base+0x58e>
  40375c:	pop    rbx
  40375d:	ret    
  40375e:	mov    esi,0x2
  403763:	mov    edx,0x2
  403768:	mov    ecx,0x2
  40376d:	mov    rdi,rbx
  403770:	pop    rbx
  403771:	jmp    408dd0 <flatcc_verify_field@@Base>
  403776:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403780:	xor    eax,eax
  403782:	ret    
  403783:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40378d:	nop    DWORD PTR [rax]
  403790:	push   rbx
  403791:	mov    rbx,rdi
  403794:	xor    esi,esi
  403796:	xor    edx,edx
  403798:	mov    ecx,0x1
  40379d:	mov    r8d,0x1
  4037a3:	mov    r9d,0xffffffff
  4037a9:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4037ae:	test   eax,eax
  4037b0:	jne    4037d6 <main@@Base+0x606>
  4037b2:	mov    esi,0x1
  4037b7:	xor    edx,edx
  4037b9:	mov    ecx,0x1
  4037be:	mov    r8d,0x1
  4037c4:	mov    r9d,0xffffffff
  4037ca:	mov    rdi,rbx
  4037cd:	call   408ee0 <flatcc_verify_vector_field@@Base>
  4037d2:	test   eax,eax
  4037d4:	je     4037d8 <main@@Base+0x608>
  4037d6:	pop    rbx
  4037d7:	ret    
  4037d8:	lea    r9,[rip+0xfffffffffffffaf1]        # 4032d0 <main@@Base+0x100>
  4037df:	mov    esi,0x2
  4037e4:	xor    edx,edx
  4037e6:	xor    ecx,ecx
  4037e8:	mov    r8d,0x1
  4037ee:	mov    rdi,rbx
  4037f1:	pop    rbx
  4037f2:	jmp    409d40 <flatcc_verify_table_as_nested_root@@Base>
  4037f7:	nop    WORD PTR [rax+rax*1+0x0]
  403800:	push   rbx
  403801:	mov    rbx,rdi
  403804:	xor    esi,esi
  403806:	mov    edx,0x1
  40380b:	mov    ecx,0x1
  403810:	call   408dd0 <flatcc_verify_field@@Base>
  403815:	test   eax,eax
  403817:	jne    40384f <main@@Base+0x67f>
  403819:	mov    esi,0x1
  40381e:	mov    edx,0x1
  403823:	mov    ecx,0x1
  403828:	mov    rdi,rbx
  40382b:	call   408dd0 <flatcc_verify_field@@Base>
  403830:	test   eax,eax
  403832:	jne    40384f <main@@Base+0x67f>
  403834:	mov    esi,0x2
  403839:	mov    edx,0x1
  40383e:	mov    ecx,0x1
  403843:	mov    rdi,rbx
  403846:	call   408dd0 <flatcc_verify_field@@Base>
  40384b:	test   eax,eax
  40384d:	je     403851 <main@@Base+0x681>
  40384f:	pop    rbx
  403850:	ret    
  403851:	mov    esi,0x3
  403856:	mov    edx,0x1
  40385b:	mov    ecx,0x1
  403860:	mov    rdi,rbx
  403863:	pop    rbx
  403864:	jmp    408dd0 <flatcc_verify_field@@Base>
  403869:	nop    DWORD PTR [rax+0x0]
  403870:	xor    eax,eax
  403872:	ret    
  403873:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40387d:	nop    DWORD PTR [rax]
  403880:	push   rbx
  403881:	mov    rbx,rdi
  403884:	lea    rcx,[rip+0x45]        # 4038d0 <main@@Base+0x700>
  40388b:	xor    esi,esi
  40388d:	xor    edx,edx
  40388f:	call   409110 <flatcc_verify_table_field@@Base>
  403894:	test   eax,eax
  403896:	jne    4038b2 <main@@Base+0x6e2>
  403898:	lea    rcx,[rip+0x81]        # 403920 <main@@Base+0x750>
  40389f:	mov    esi,0x1
  4038a4:	xor    edx,edx
  4038a6:	mov    rdi,rbx
  4038a9:	call   409110 <flatcc_verify_table_field@@Base>
  4038ae:	test   eax,eax
  4038b0:	je     4038b4 <main@@Base+0x6e4>
  4038b2:	pop    rbx
  4038b3:	ret    
  4038b4:	lea    rcx,[rip+0xfffffffffffffe55]        # 403710 <main@@Base+0x540>
  4038bb:	mov    esi,0x3
  4038c0:	xor    edx,edx
  4038c2:	mov    rdi,rbx
  4038c5:	pop    rbx
  4038c6:	jmp    40a160 <flatcc_verify_union_vector_field@@Base>
  4038cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4038d0:	push   rbx
  4038d1:	mov    rbx,rdi
  4038d4:	lea    rcx,[rip+0xd5]        # 4039b0 <main@@Base+0x7e0>
  4038db:	xor    esi,esi
  4038dd:	xor    edx,edx
  4038df:	call   409110 <flatcc_verify_table_field@@Base>
  4038e4:	test   eax,eax
  4038e6:	jne    403902 <main@@Base+0x732>
  4038e8:	lea    rcx,[rip+0x1a1]        # 403a90 <main@@Base+0x8c0>
  4038ef:	mov    esi,0x1
  4038f4:	xor    edx,edx
  4038f6:	mov    rdi,rbx
  4038f9:	call   409110 <flatcc_verify_table_field@@Base>
  4038fe:	test   eax,eax
  403900:	je     403904 <main@@Base+0x734>
  403902:	pop    rbx
  403903:	ret    
  403904:	lea    rcx,[rip+0x1c5]        # 403ad0 <main@@Base+0x900>
  40390b:	mov    esi,0x2
  403910:	xor    edx,edx
  403912:	mov    rdi,rbx
  403915:	pop    rbx
  403916:	jmp    409110 <flatcc_verify_table_field@@Base>
  40391b:	nop    DWORD PTR [rax+rax*1+0x0]
  403920:	push   rbx
  403921:	mov    rbx,rdi
  403924:	lea    rcx,[rip+0x1e5]        # 403b10 <main@@Base+0x940>
  40392b:	mov    esi,0x1
  403930:	xor    edx,edx
  403932:	call   40a020 <flatcc_verify_union_field@@Base>
  403937:	test   eax,eax
  403939:	jne    403989 <main@@Base+0x7b9>
  40393b:	lea    rcx,[rip+0x1ce]        # 403b10 <main@@Base+0x940>
  403942:	mov    esi,0x3
  403947:	xor    edx,edx
  403949:	mov    rdi,rbx
  40394c:	call   40a020 <flatcc_verify_union_field@@Base>
  403951:	test   eax,eax
  403953:	jne    403989 <main@@Base+0x7b9>
  403955:	lea    rcx,[rip+0x1b4]        # 403b10 <main@@Base+0x940>
  40395c:	mov    esi,0x5
  403961:	xor    edx,edx
  403963:	mov    rdi,rbx
  403966:	call   40a020 <flatcc_verify_union_field@@Base>
  40396b:	test   eax,eax
  40396d:	jne    403989 <main@@Base+0x7b9>
  40396f:	lea    rcx,[rip+0x19a]        # 403b10 <main@@Base+0x940>
  403976:	mov    esi,0x7
  40397b:	xor    edx,edx
  40397d:	mov    rdi,rbx
  403980:	call   40a020 <flatcc_verify_union_field@@Base>
  403985:	test   eax,eax
  403987:	je     40398b <main@@Base+0x7bb>
  403989:	pop    rbx
  40398a:	ret    
  40398b:	lea    rcx,[rip+0x17e]        # 403b10 <main@@Base+0x940>
  403992:	mov    esi,0x9
  403997:	xor    edx,edx
  403999:	mov    rdi,rbx
  40399c:	pop    rbx
  40399d:	jmp    40a160 <flatcc_verify_union_vector_field@@Base>
  4039a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039ac:	nop    DWORD PTR [rax+0x0]
  4039b0:	push   rbx
  4039b1:	mov    rbx,rdi
  4039b4:	xor    esi,esi
  4039b6:	xor    edx,edx
  4039b8:	call   408e30 <flatcc_verify_string_field@@Base>
  4039bd:	test   eax,eax
  4039bf:	jne    403a76 <main@@Base+0x8a6>
  4039c5:	mov    esi,0x1
  4039ca:	mov    edx,0x4
  4039cf:	mov    ecx,0x4
  4039d4:	mov    rdi,rbx
  4039d7:	call   408dd0 <flatcc_verify_field@@Base>
  4039dc:	test   eax,eax
  4039de:	jne    403a76 <main@@Base+0x8a6>
  4039e4:	mov    esi,0x2
  4039e9:	xor    edx,edx
  4039eb:	mov    rdi,rbx
  4039ee:	call   408e30 <flatcc_verify_string_field@@Base>
  4039f3:	test   eax,eax
  4039f5:	jne    403a76 <main@@Base+0x8a6>
  4039f7:	mov    esi,0x3
  4039fc:	mov    edx,0x8
  403a01:	mov    ecx,0x8
  403a06:	mov    rdi,rbx
  403a09:	call   408dd0 <flatcc_verify_field@@Base>
  403a0e:	test   eax,eax
  403a10:	jne    403a76 <main@@Base+0x8a6>
  403a12:	mov    esi,0x4
  403a17:	xor    edx,edx
  403a19:	mov    rdi,rbx
  403a1c:	call   408e30 <flatcc_verify_string_field@@Base>
  403a21:	test   eax,eax
  403a23:	jne    403a76 <main@@Base+0x8a6>
  403a25:	mov    esi,0x5
  403a2a:	mov    edx,0x8
  403a2f:	mov    ecx,0x8
  403a34:	mov    rdi,rbx
  403a37:	call   408dd0 <flatcc_verify_field@@Base>
  403a3c:	test   eax,eax
  403a3e:	jne    403a76 <main@@Base+0x8a6>
  403a40:	mov    esi,0x6
  403a45:	mov    edx,0x4
  403a4a:	mov    ecx,0x4
  403a4f:	mov    rdi,rbx
  403a52:	call   408dd0 <flatcc_verify_field@@Base>
  403a57:	test   eax,eax
  403a59:	jne    403a76 <main@@Base+0x8a6>
  403a5b:	mov    esi,0x7
  403a60:	mov    edx,0x8
  403a65:	mov    ecx,0x8
  403a6a:	mov    rdi,rbx
  403a6d:	call   408dd0 <flatcc_verify_field@@Base>
  403a72:	test   eax,eax
  403a74:	je     403a78 <main@@Base+0x8a8>
  403a76:	pop    rbx
  403a77:	ret    
  403a78:	mov    esi,0x8
  403a7d:	mov    edx,0x4
  403a82:	mov    ecx,0x4
  403a87:	mov    rdi,rbx
  403a8a:	pop    rbx
  403a8b:	jmp    408dd0 <flatcc_verify_field@@Base>
  403a90:	push   rbx
  403a91:	mov    rbx,rdi
  403a94:	xor    esi,esi
  403a96:	mov    edx,0x8
  403a9b:	mov    ecx,0x8
  403aa0:	call   408dd0 <flatcc_verify_field@@Base>
  403aa5:	test   eax,eax
  403aa7:	je     403aab <main@@Base+0x8db>
  403aa9:	pop    rbx
  403aaa:	ret    
  403aab:	mov    esi,0x1
  403ab0:	mov    edx,0x4
  403ab5:	mov    ecx,0x4
  403aba:	mov    rdi,rbx
  403abd:	pop    rbx
  403abe:	jmp    408dd0 <flatcc_verify_field@@Base>
  403ac3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403acd:	nop    DWORD PTR [rax]
  403ad0:	push   rbx
  403ad1:	mov    rbx,rdi
  403ad4:	xor    esi,esi
  403ad6:	mov    edx,0x8
  403adb:	mov    ecx,0x8
  403ae0:	call   408dd0 <flatcc_verify_field@@Base>
  403ae5:	test   eax,eax
  403ae7:	je     403aeb <main@@Base+0x91b>
  403ae9:	pop    rbx
  403aea:	ret    
  403aeb:	mov    esi,0x1
  403af0:	mov    edx,0x4
  403af5:	mov    ecx,0x4
  403afa:	mov    rdi,rbx
  403afd:	pop    rbx
  403afe:	jmp    408dd0 <flatcc_verify_field@@Base>
  403b03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b0d:	nop    DWORD PTR [rax]
  403b10:	mov    al,BYTE PTR [rdi+0x10]
  403b13:	add    al,0x1
  403b15:	cmp    al,0xc
  403b17:	ja     403b40 <main@@Base+0x970>
  403b19:	movzx  eax,al
  403b1c:	lea    rcx,[rip+0x74e1]        # 40b004 <_IO_stdin_used@@Base+0x4>
  403b23:	movsxd rax,DWORD PTR [rcx+rax*4]
  403b27:	add    rax,rcx
  403b2a:	jmp    rax
  403b2c:	jmp    4096c0 <flatcc_verify_union_string@@Base>
  403b31:	mov    esi,0x4
  403b36:	mov    edx,0x4
  403b3b:	jmp    409680 <flatcc_verify_union_struct@@Base>
  403b40:	xor    eax,eax
  403b42:	ret    
  403b43:	lea    rsi,[rip+0x16]        # 403b60 <main@@Base+0x990>
  403b4a:	jmp    409590 <flatcc_verify_union_table@@Base>
  403b4f:	mov    esi,0x2
  403b54:	mov    edx,0x2
  403b59:	jmp    409680 <flatcc_verify_union_struct@@Base>
  403b5e:	xchg   ax,ax
  403b60:	xor    esi,esi
  403b62:	mov    edx,0x4
  403b67:	mov    ecx,0x4
  403b6c:	jmp    408dd0 <flatcc_verify_field@@Base>
  403b71:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403b80 <flatcc_builder_default_alloc@@Base>:
  403b80:	push   rbp
  403b81:	push   r15
  403b83:	push   r14
  403b85:	push   r12
  403b87:	push   rbx
  403b88:	mov    rbx,rsi
  403b8b:	test   rdx,rdx
  403b8e:	je     403bb9 <flatcc_builder_default_alloc@@Base+0x39>
  403b90:	mov    r14d,ecx
  403b93:	add    r8d,0xffffffff
  403b97:	cmp    r8d,0x6
  403b9b:	ja     403bd7 <flatcc_builder_default_alloc@@Base+0x57>
  403b9d:	mov    eax,0x100
  403ba2:	lea    rcx,[rip+0x7617]        # 40b1c0 <_IO_stdin_used@@Base+0x1c0>
  403ba9:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403bad:	add    rsi,rcx
  403bb0:	jmp    rsi
  403bb2:	mov    eax,0x120
  403bb7:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bb9:	mov    rdi,QWORD PTR [rbx]
  403bbc:	xor    r15d,r15d
  403bbf:	test   rdi,rdi
  403bc2:	je     403c50 <flatcc_builder_default_alloc@@Base+0xd0>
  403bc8:	call   403030 <free@plt>
  403bcd:	vxorps xmm0,xmm0,xmm0
  403bd1:	vmovups XMMWORD PTR [rbx],xmm0
  403bd5:	jmp    403c50 <flatcc_builder_default_alloc@@Base+0xd0>
  403bd7:	mov    eax,0x20
  403bdc:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bde:	mov    rax,rdx
  403be1:	jmp    403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403be3:	mov    eax,0x40
  403be8:	nop    DWORD PTR [rax+rax*1+0x0]
  403bf0:	mov    rbp,rax
  403bf3:	lea    rax,[rax+rax*1]
  403bf7:	cmp    rbp,rdx
  403bfa:	jb     403bf0 <flatcc_builder_default_alloc@@Base+0x70>
  403bfc:	mov    rax,QWORD PTR [rbx+0x8]
  403c00:	xor    r15d,r15d
  403c03:	cmp    rax,rdx
  403c06:	jb     403c10 <flatcc_builder_default_alloc@@Base+0x90>
  403c08:	shr    rax,1
  403c0b:	cmp    rax,rbp
  403c0e:	jae    403c50 <flatcc_builder_default_alloc@@Base+0xd0>
  403c10:	mov    rdi,QWORD PTR [rbx]
  403c13:	mov    rsi,rbp
  403c16:	call   4030c0 <realloc@plt>
  403c1b:	test   rax,rax
  403c1e:	je     403c4a <flatcc_builder_default_alloc@@Base+0xca>
  403c20:	mov    r12,rax
  403c23:	test   r14d,r14d
  403c26:	je     403c41 <flatcc_builder_default_alloc@@Base+0xc1>
  403c28:	mov    rax,QWORD PTR [rbx+0x8]
  403c2c:	mov    rdx,rbp
  403c2f:	sub    rdx,rax
  403c32:	jbe    403c41 <flatcc_builder_default_alloc@@Base+0xc1>
  403c34:	mov    rdi,r12
  403c37:	add    rdi,rax
  403c3a:	xor    esi,esi
  403c3c:	call   403070 <memset@plt>
  403c41:	mov    QWORD PTR [rbx],r12
  403c44:	mov    QWORD PTR [rbx+0x8],rbp
  403c48:	jmp    403c50 <flatcc_builder_default_alloc@@Base+0xd0>
  403c4a:	mov    r15d,0xffffffff
  403c50:	mov    eax,r15d
  403c53:	pop    rbx
  403c54:	pop    r12
  403c56:	pop    r14
  403c58:	pop    r15
  403c5a:	pop    rbp
  403c5b:	ret    
  403c5c:	nop    DWORD PTR [rax+0x0]

0000000000403c60 <flatcc_builder_flush_vtable_cache@@Base>:
  403c60:	cmp    QWORD PTR [rdi+0xd8],0x0
  403c68:	je     403c95 <flatcc_builder_flush_vtable_cache@@Base+0x35>
  403c6a:	push   rbx
  403c6b:	mov    rbx,rdi
  403c6e:	mov    rdi,QWORD PTR [rdi+0xa8]
  403c75:	mov    rdx,QWORD PTR [rbx+0xb0]
  403c7c:	xor    esi,esi
  403c7e:	call   403070 <memset@plt>
  403c83:	movabs rax,0x1000000000
  403c8d:	mov    QWORD PTR [rbx+0xe0],rax
  403c94:	pop    rbx
  403c95:	ret    
  403c96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403ca0 <flatcc_builder_custom_init@@Base>:
  403ca0:	vxorps xmm0,xmm0,xmm0
  403ca4:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403cac:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403cb4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403cbc:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403cc4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403ccc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403cd4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403cdc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403ce4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403ce9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403cee:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403cf3:	vmovups YMMWORD PTR [rdi],ymm0
  403cf7:	mov    QWORD PTR [rdi+0x180],0x0
  403d02:	test   rsi,rsi
  403d05:	je     403d29 <flatcc_builder_custom_init@@Base+0x89>
  403d07:	test   rcx,rcx
  403d0a:	jne    403d13 <flatcc_builder_custom_init@@Base+0x73>
  403d0c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403b80 <flatcc_builder_default_alloc@@Base>
  403d13:	mov    QWORD PTR [rdi+0x40],r8
  403d17:	mov    QWORD PTR [rdi+0x50],rcx
  403d1b:	mov    QWORD PTR [rdi+0x38],rdx
  403d1f:	mov    QWORD PTR [rdi+0x48],rsi
  403d23:	xor    eax,eax
  403d25:	vzeroupper 
  403d28:	ret    
  403d29:	mov    DWORD PTR [rdi+0x128],0x1
  403d33:	lea    rdx,[rdi+0x130]
  403d3a:	lea    rsi,[rip+0x4acf]        # 408810 <flatcc_emitter@@Base>
  403d41:	test   rcx,rcx
  403d44:	je     403d0c <flatcc_builder_custom_init@@Base+0x6c>
  403d46:	jmp    403d13 <flatcc_builder_custom_init@@Base+0x73>
  403d48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403d50 <flatcc_builder_init@@Base>:
  403d50:	vxorps xmm0,xmm0,xmm0
  403d54:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  403d5c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  403d61:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  403d66:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  403d6e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  403d76:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  403d7e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  403d86:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  403d8e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  403d96:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  403d9e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  403da3:	vmovups YMMWORD PTR [rdi],ymm0
  403da7:	mov    QWORD PTR [rdi+0x180],0x0
  403db2:	mov    DWORD PTR [rdi+0x128],0x1
  403dbc:	lea    rax,[rdi+0x130]
  403dc3:	mov    QWORD PTR [rdi+0x40],0x0
  403dcb:	lea    rcx,[rip+0xfffffffffffffdae]        # 403b80 <flatcc_builder_default_alloc@@Base>
  403dd2:	mov    QWORD PTR [rdi+0x50],rcx
  403dd6:	mov    QWORD PTR [rdi+0x38],rax
  403dda:	lea    rax,[rip+0x4a2f]        # 408810 <flatcc_emitter@@Base>
  403de1:	mov    QWORD PTR [rdi+0x48],rax
  403de5:	xor    eax,eax
  403de7:	vzeroupper 
  403dea:	ret    
  403deb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403df0 <flatcc_builder_custom_reset@@Base>:
  403df0:	push   rbp
  403df1:	push   r15
  403df3:	push   r14
  403df5:	push   r12
  403df7:	push   rbx
  403df8:	mov    r15d,edx
  403dfb:	mov    r14d,esi
  403dfe:	mov    r12,rdi
  403e01:	lea    rbp,[rdi+0x58]
  403e05:	xor    ebx,ebx
  403e07:	nop    WORD PTR [rax+rax*1+0x0]
  403e10:	mov    rdi,QWORD PTR [rbp+0x0]
  403e14:	test   rdi,rdi
  403e17:	je     403e60 <flatcc_builder_custom_reset@@Base+0x70>
  403e19:	test   r15d,r15d
  403e1c:	je     403e4a <flatcc_builder_custom_reset@@Base+0x5a>
  403e1e:	cmp    rbx,0x5
  403e22:	je     403e4a <flatcc_builder_custom_reset@@Base+0x5a>
  403e24:	mov    rdi,QWORD PTR [r12+0x40]
  403e29:	mov    edx,0x1
  403e2e:	mov    ecx,0x1
  403e33:	mov    rsi,rbp
  403e36:	mov    r8d,ebx
  403e39:	call   QWORD PTR [r12+0x50]
  403e3e:	test   eax,eax
  403e40:	jne    403f20 <flatcc_builder_custom_reset@@Base+0x130>
  403e46:	mov    rdi,QWORD PTR [rbp+0x0]
  403e4a:	mov    rdx,QWORD PTR [rbp+0x8]
  403e4e:	xor    esi,esi
  403e50:	call   403070 <memset@plt>
  403e55:	jmp    403e6b <flatcc_builder_custom_reset@@Base+0x7b>
  403e57:	nop    WORD PTR [rax+rax*1+0x0]
  403e60:	cmp    QWORD PTR [rbp+0x8],0x0
  403e65:	jne    403f30 <flatcc_builder_custom_reset@@Base+0x140>
  403e6b:	add    rbx,0x1
  403e6f:	add    rbp,0x10
  403e73:	cmp    rbx,0x8
  403e77:	jb     403e10 <flatcc_builder_custom_reset@@Base+0x20>
  403e79:	mov    DWORD PTR [r12+0xe0],0x0
  403e85:	cmp    DWORD PTR [r12+0xe4],0x0
  403e8e:	je     403e9c <flatcc_builder_custom_reset@@Base+0xac>
  403e90:	mov    DWORD PTR [r12+0xe4],0x10
  403e9c:	mov    WORD PTR [r12+0xe8],0x0
  403ea7:	mov    QWORD PTR [r12+0xf0],0x0
  403eb3:	mov    QWORD PTR [r12+0x20],0x0
  403ebc:	vxorps xmm0,xmm0,xmm0
  403ec0:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  403eca:	mov    rax,QWORD PTR [r12+0x58]
  403ecf:	mov    rcx,QWORD PTR [r12+0x68]
  403ed4:	mov    QWORD PTR [r12+0x18],rcx
  403ed9:	mov    rcx,QWORD PTR [r12+0x88]
  403ee1:	mov    QWORD PTR [r12],rcx
  403ee5:	mov    QWORD PTR [r12+0x8],rax
  403eea:	mov    QWORD PTR [r12+0x30],0x0
  403ef3:	test   r14d,r14d
  403ef6:	je     403f02 <flatcc_builder_custom_reset@@Base+0x112>
  403ef8:	vmovups XMMWORD PTR [r12+0x118],xmm0
  403f02:	xor    ebx,ebx
  403f04:	cmp    DWORD PTR [r12+0x128],0x0
  403f0d:	je     403f25 <flatcc_builder_custom_reset@@Base+0x135>
  403f0f:	add    r12,0x130
  403f16:	mov    rdi,r12
  403f19:	call   408690 <flatcc_emitter_reset@@Base>
  403f1e:	jmp    403f25 <flatcc_builder_custom_reset@@Base+0x135>
  403f20:	mov    ebx,0xffffffff
  403f25:	mov    eax,ebx
  403f27:	pop    rbx
  403f28:	pop    r12
  403f2a:	pop    r14
  403f2c:	pop    r15
  403f2e:	pop    rbp
  403f2f:	ret    
  403f30:	lea    rdi,[rip+0x7519]        # 40b450 <flatcc_builder_padding_base@@Base+0x270>
  403f37:	lea    rsi,[rip+0x7524]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  403f3e:	lea    rcx,[rip+0x757d]        # 40b4c2 <flatcc_builder_padding_base@@Base+0x2e2>
  403f45:	mov    edx,0x1b2
  403f4a:	call   403060 <__assert_fail@plt>
  403f4f:	nop

0000000000403f50 <flatcc_builder_reset@@Base>:
  403f50:	push   rbx
  403f51:	mov    rbx,rdi
  403f54:	mov    rdi,QWORD PTR [rdi+0x58]
  403f58:	mov    rdx,QWORD PTR [rbx+0x60]
  403f5c:	test   rdi,rdi
  403f5f:	je     403f6a <flatcc_builder_reset@@Base+0x1a>
  403f61:	xor    esi,esi
  403f63:	call   403070 <memset@plt>
  403f68:	jmp    403f73 <flatcc_builder_reset@@Base+0x23>
  403f6a:	test   rdx,rdx
  403f6d:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403f73:	mov    rdi,QWORD PTR [rbx+0x68]
  403f77:	mov    rdx,QWORD PTR [rbx+0x70]
  403f7b:	test   rdi,rdi
  403f7e:	je     403f89 <flatcc_builder_reset@@Base+0x39>
  403f80:	xor    esi,esi
  403f82:	call   403070 <memset@plt>
  403f87:	jmp    403f92 <flatcc_builder_reset@@Base+0x42>
  403f89:	test   rdx,rdx
  403f8c:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403f92:	mov    rdi,QWORD PTR [rbx+0x78]
  403f96:	mov    rdx,QWORD PTR [rbx+0x80]
  403f9d:	test   rdi,rdi
  403fa0:	je     403fab <flatcc_builder_reset@@Base+0x5b>
  403fa2:	xor    esi,esi
  403fa4:	call   403070 <memset@plt>
  403fa9:	jmp    403fb4 <flatcc_builder_reset@@Base+0x64>
  403fab:	test   rdx,rdx
  403fae:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403fb4:	mov    rdi,QWORD PTR [rbx+0x88]
  403fbb:	mov    rdx,QWORD PTR [rbx+0x90]
  403fc2:	test   rdi,rdi
  403fc5:	je     403fd0 <flatcc_builder_reset@@Base+0x80>
  403fc7:	xor    esi,esi
  403fc9:	call   403070 <memset@plt>
  403fce:	jmp    403fd9 <flatcc_builder_reset@@Base+0x89>
  403fd0:	test   rdx,rdx
  403fd3:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403fd9:	mov    rdi,QWORD PTR [rbx+0x98]
  403fe0:	mov    rdx,QWORD PTR [rbx+0xa0]
  403fe7:	test   rdi,rdi
  403fea:	je     403ff5 <flatcc_builder_reset@@Base+0xa5>
  403fec:	xor    esi,esi
  403fee:	call   403070 <memset@plt>
  403ff3:	jmp    403ffe <flatcc_builder_reset@@Base+0xae>
  403ff5:	test   rdx,rdx
  403ff8:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  403ffe:	mov    rdi,QWORD PTR [rbx+0xa8]
  404005:	mov    rdx,QWORD PTR [rbx+0xb0]
  40400c:	test   rdi,rdi
  40400f:	je     40401a <flatcc_builder_reset@@Base+0xca>
  404011:	xor    esi,esi
  404013:	call   403070 <memset@plt>
  404018:	jmp    404023 <flatcc_builder_reset@@Base+0xd3>
  40401a:	test   rdx,rdx
  40401d:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  404023:	mov    rdi,QWORD PTR [rbx+0xb8]
  40402a:	mov    rdx,QWORD PTR [rbx+0xc0]
  404031:	test   rdi,rdi
  404034:	je     40403f <flatcc_builder_reset@@Base+0xef>
  404036:	xor    esi,esi
  404038:	call   403070 <memset@plt>
  40403d:	jmp    404048 <flatcc_builder_reset@@Base+0xf8>
  40403f:	test   rdx,rdx
  404042:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  404048:	mov    rdi,QWORD PTR [rbx+0xc8]
  40404f:	mov    rdx,QWORD PTR [rbx+0xd0]
  404056:	test   rdi,rdi
  404059:	je     404064 <flatcc_builder_reset@@Base+0x114>
  40405b:	xor    esi,esi
  40405d:	call   403070 <memset@plt>
  404062:	jmp    40406d <flatcc_builder_reset@@Base+0x11d>
  404064:	test   rdx,rdx
  404067:	jne    4040f0 <flatcc_builder_reset@@Base+0x1a0>
  40406d:	mov    DWORD PTR [rbx+0xe0],0x0
  404077:	cmp    DWORD PTR [rbx+0xe4],0x0
  40407e:	je     40408a <flatcc_builder_reset@@Base+0x13a>
  404080:	mov    DWORD PTR [rbx+0xe4],0x10
  40408a:	mov    WORD PTR [rbx+0xe8],0x0
  404093:	mov    QWORD PTR [rbx+0xf0],0x0
  40409e:	mov    QWORD PTR [rbx+0x20],0x0
  4040a6:	vxorps xmm0,xmm0,xmm0
  4040aa:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  4040b2:	mov    rax,QWORD PTR [rbx+0x58]
  4040b6:	mov    rcx,QWORD PTR [rbx+0x68]
  4040ba:	mov    QWORD PTR [rbx+0x18],rcx
  4040be:	mov    rcx,QWORD PTR [rbx+0x88]
  4040c5:	mov    QWORD PTR [rbx],rcx
  4040c8:	mov    QWORD PTR [rbx+0x8],rax
  4040cc:	mov    QWORD PTR [rbx+0x30],0x0
  4040d4:	cmp    DWORD PTR [rbx+0x128],0x0
  4040db:	je     4040ec <flatcc_builder_reset@@Base+0x19c>
  4040dd:	add    rbx,0x130
  4040e4:	mov    rdi,rbx
  4040e7:	call   408690 <flatcc_emitter_reset@@Base>
  4040ec:	xor    eax,eax
  4040ee:	pop    rbx
  4040ef:	ret    
  4040f0:	lea    rdi,[rip+0x7359]        # 40b450 <flatcc_builder_padding_base@@Base+0x270>
  4040f7:	lea    rsi,[rip+0x7364]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4040fe:	lea    rcx,[rip+0x73bd]        # 40b4c2 <flatcc_builder_padding_base@@Base+0x2e2>
  404105:	mov    edx,0x1b2
  40410a:	call   403060 <__assert_fail@plt>
  40410f:	nop

0000000000404110 <flatcc_builder_clear@@Base>:
  404110:	push   rbx
  404111:	mov    rbx,rdi
  404114:	lea    rsi,[rdi+0x58]
  404118:	mov    rdi,QWORD PTR [rdi+0x40]
  40411c:	xor    edx,edx
  40411e:	xor    ecx,ecx
  404120:	xor    r8d,r8d
  404123:	call   QWORD PTR [rbx+0x50]
  404126:	lea    rsi,[rbx+0x68]
  40412a:	mov    rdi,QWORD PTR [rbx+0x40]
  40412e:	xor    edx,edx
  404130:	xor    ecx,ecx
  404132:	mov    r8d,0x1
  404138:	call   QWORD PTR [rbx+0x50]
  40413b:	lea    rsi,[rbx+0x78]
  40413f:	mov    rdi,QWORD PTR [rbx+0x40]
  404143:	xor    edx,edx
  404145:	xor    ecx,ecx
  404147:	mov    r8d,0x2
  40414d:	call   QWORD PTR [rbx+0x50]
  404150:	lea    rsi,[rbx+0x88]
  404157:	mov    rdi,QWORD PTR [rbx+0x40]
  40415b:	xor    edx,edx
  40415d:	xor    ecx,ecx
  40415f:	mov    r8d,0x3
  404165:	call   QWORD PTR [rbx+0x50]
  404168:	lea    rsi,[rbx+0x98]
  40416f:	mov    rdi,QWORD PTR [rbx+0x40]
  404173:	xor    edx,edx
  404175:	xor    ecx,ecx
  404177:	mov    r8d,0x4
  40417d:	call   QWORD PTR [rbx+0x50]
  404180:	lea    rsi,[rbx+0xa8]
  404187:	mov    rdi,QWORD PTR [rbx+0x40]
  40418b:	xor    edx,edx
  40418d:	xor    ecx,ecx
  40418f:	mov    r8d,0x5
  404195:	call   QWORD PTR [rbx+0x50]
  404198:	lea    rsi,[rbx+0xb8]
  40419f:	mov    rdi,QWORD PTR [rbx+0x40]
  4041a3:	xor    edx,edx
  4041a5:	xor    ecx,ecx
  4041a7:	mov    r8d,0x6
  4041ad:	call   QWORD PTR [rbx+0x50]
  4041b0:	lea    rsi,[rbx+0xc8]
  4041b7:	mov    rdi,QWORD PTR [rbx+0x40]
  4041bb:	xor    edx,edx
  4041bd:	xor    ecx,ecx
  4041bf:	mov    r8d,0x7
  4041c5:	call   QWORD PTR [rbx+0x50]
  4041c8:	cmp    DWORD PTR [rbx+0x128],0x0
  4041cf:	je     4041dd <flatcc_builder_clear@@Base+0xcd>
  4041d1:	lea    rdi,[rbx+0x130]
  4041d8:	call   408790 <flatcc_emitter_clear@@Base>
  4041dd:	vxorps xmm0,xmm0,xmm0
  4041e1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  4041e9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  4041f1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  4041f9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404201:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404209:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404211:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404219:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404221:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404226:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40422b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404230:	vmovups YMMWORD PTR [rbx],ymm0
  404234:	mov    QWORD PTR [rbx+0x180],0x0
  40423f:	pop    rbx
  404240:	vzeroupper 
  404243:	ret    
  404244:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40424e:	xchg   ax,ax

0000000000404250 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404250:	push   r15
  404252:	push   r14
  404254:	push   r12
  404256:	push   rbx
  404257:	push   rax
  404258:	mov    r14,rsi
  40425b:	mov    r15,rdi
  40425e:	add    r14,0xf
  404262:	and    r14,0xfffffffffffffff8
  404266:	mov    rbx,QWORD PTR [rdi+0x180]
  40426d:	lea    r12,[rdi+0xc8]
  404274:	lea    rdx,[rbx+r14*1]
  404278:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40427f:	jbe    404298 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404281:	mov    rdi,QWORD PTR [r15+0x40]
  404285:	xor    ecx,ecx
  404287:	mov    r8d,0x7
  40428d:	mov    rsi,r12
  404290:	call   QWORD PTR [r15+0x50]
  404294:	test   eax,eax
  404296:	jne    4042e8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404298:	add    rbx,QWORD PTR [r12]
  40429c:	je     4042d7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40429e:	xor    esi,esi
  4042a0:	mov    rdi,rbx
  4042a3:	mov    rdx,r14
  4042a6:	call   403070 <memset@plt>
  4042ab:	mov    rax,QWORD PTR [r15+0x178]
  4042b2:	mov    QWORD PTR [rbx],rax
  4042b5:	add    rbx,0x8
  4042b9:	mov    rax,QWORD PTR [r15+0x180]
  4042c0:	lea    rcx,[rax+0x8]
  4042c4:	mov    QWORD PTR [r15+0x178],rcx
  4042cb:	add    rax,r14
  4042ce:	mov    QWORD PTR [r15+0x180],rax
  4042d5:	jmp    4042d9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  4042d7:	xor    ebx,ebx
  4042d9:	mov    rax,rbx
  4042dc:	add    rsp,0x8
  4042e0:	pop    rbx
  4042e1:	pop    r12
  4042e3:	pop    r14
  4042e5:	pop    r15
  4042e7:	ret    
  4042e8:	lea    rdi,[rip+0x8333]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4042ef:	lea    rsi,[rip+0x716c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4042f6:	lea    rcx,[rip+0x815f]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  4042fd:	mov    edx,0x134
  404302:	call   403060 <__assert_fail@plt>
  404307:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404310 <flatcc_builder_enter_user_frame@@Base>:
  404310:	push   r15
  404312:	push   r14
  404314:	push   r12
  404316:	push   rbx
  404317:	push   rax
  404318:	mov    r14,rsi
  40431b:	mov    rbx,rdi
  40431e:	add    r14,0xf
  404322:	and    r14,0xfffffffffffffff8
  404326:	mov    r15,QWORD PTR [rdi+0x180]
  40432d:	lea    r12,[rdi+0xc8]
  404334:	lea    rdx,[r15+r14*1]
  404338:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40433f:	jbe    404357 <flatcc_builder_enter_user_frame@@Base+0x47>
  404341:	mov    rdi,QWORD PTR [rbx+0x40]
  404345:	xor    ecx,ecx
  404347:	mov    r8d,0x7
  40434d:	mov    rsi,r12
  404350:	call   QWORD PTR [rbx+0x50]
  404353:	test   eax,eax
  404355:	jne    4043a0 <flatcc_builder_enter_user_frame@@Base+0x90>
  404357:	add    r15,QWORD PTR [r12]
  40435b:	je     404392 <flatcc_builder_enter_user_frame@@Base+0x82>
  40435d:	xor    esi,esi
  40435f:	mov    rdi,r15
  404362:	mov    rdx,r14
  404365:	call   403070 <memset@plt>
  40436a:	mov    rax,QWORD PTR [rbx+0x178]
  404371:	mov    QWORD PTR [r15],rax
  404374:	mov    rcx,QWORD PTR [rbx+0x180]
  40437b:	lea    rax,[rcx+0x8]
  40437f:	mov    QWORD PTR [rbx+0x178],rax
  404386:	add    rcx,r14
  404389:	mov    QWORD PTR [rbx+0x180],rcx
  404390:	jmp    404394 <flatcc_builder_enter_user_frame@@Base+0x84>
  404392:	xor    eax,eax
  404394:	add    rsp,0x8
  404398:	pop    rbx
  404399:	pop    r12
  40439b:	pop    r14
  40439d:	pop    r15
  40439f:	ret    
  4043a0:	lea    rdi,[rip+0x827b]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4043a7:	lea    rsi,[rip+0x70b4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4043ae:	lea    rcx,[rip+0x80a7]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  4043b5:	mov    edx,0x134
  4043ba:	call   403060 <__assert_fail@plt>
  4043bf:	nop

00000000004043c0 <flatcc_builder_exit_user_frame@@Base>:
  4043c0:	mov    rax,QWORD PTR [rdi+0x178]
  4043c7:	test   rax,rax
  4043ca:	je     4043ed <flatcc_builder_exit_user_frame@@Base+0x2d>
  4043cc:	mov    rcx,QWORD PTR [rdi+0xc8]
  4043d3:	mov    edx,eax
  4043d5:	add    rax,0xfffffffffffffff8
  4043d9:	mov    QWORD PTR [rdi+0x180],rax
  4043e0:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4043e5:	mov    QWORD PTR [rdi+0x178],rax
  4043ec:	ret    
  4043ed:	push   rax
  4043ee:	lea    rdi,[rip+0x710b]        # 40b500 <flatcc_builder_padding_base@@Base+0x320>
  4043f5:	lea    rsi,[rip+0x7066]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4043fc:	lea    rcx,[rip+0x7116]        # 40b519 <flatcc_builder_padding_base@@Base+0x339>
  404403:	mov    edx,0x21e
  404408:	call   403060 <__assert_fail@plt>
  40440d:	nop    DWORD PTR [rax]

0000000000404410 <flatcc_builder_exit_user_frame_at@@Base>:
  404410:	push   rax
  404411:	cmp    QWORD PTR [rdi+0x178],rsi
  404418:	jb     404448 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40441a:	mov    QWORD PTR [rdi+0x178],rsi
  404421:	test   rsi,rsi
  404424:	je     404467 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404426:	mov    rax,QWORD PTR [rdi+0xc8]
  40442d:	mov    ecx,esi
  40442f:	add    rsi,0xfffffffffffffff8
  404433:	mov    QWORD PTR [rdi+0x180],rsi
  40443a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40443f:	mov    QWORD PTR [rdi+0x178],rax
  404446:	pop    rcx
  404447:	ret    
  404448:	lea    rdi,[rip+0x7104]        # 40b553 <flatcc_builder_padding_base@@Base+0x373>
  40444f:	lea    rsi,[rip+0x700c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404456:	lea    rcx,[rip+0x7115]        # 40b572 <flatcc_builder_padding_base@@Base+0x392>
  40445d:	mov    edx,0x227
  404462:	call   403060 <__assert_fail@plt>
  404467:	lea    rdi,[rip+0x7092]        # 40b500 <flatcc_builder_padding_base@@Base+0x320>
  40446e:	lea    rsi,[rip+0x6fed]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404475:	lea    rcx,[rip+0x709d]        # 40b519 <flatcc_builder_padding_base@@Base+0x339>
  40447c:	mov    edx,0x21e
  404481:	call   403060 <__assert_fail@plt>
  404486:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404490 <flatcc_builder_get_current_user_frame@@Base>:
  404490:	mov    rax,QWORD PTR [rdi+0x178]
  404497:	ret    
  404498:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004044a0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4044a0:	mov    eax,esi
  4044a2:	add    rax,QWORD PTR [rdi+0xc8]
  4044a9:	ret    
  4044aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004044b0 <flatcc_builder_embed_buffer@@Base>:
  4044b0:	push   rbp
  4044b1:	push   r15
  4044b3:	push   r14
  4044b5:	push   r12
  4044b7:	push   rbx
  4044b8:	sub    rsp,0xa0
  4044bf:	mov    ebx,r9d
  4044c2:	mov    rbp,rcx
  4044c5:	mov    r15,rdx
  4044c8:	mov    eax,esi
  4044ca:	mov    r12,rdi
  4044cd:	mov    WORD PTR [rsp+0xa],r8w
  4044d3:	xor    ecx,ecx
  4044d5:	cmp    DWORD PTR [rdi+0x100],0x0
  4044dc:	setne  cl
  4044df:	lea    rsi,[rsp+0xa]
  4044e4:	mov    edx,eax
  4044e6:	call   404650 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4044eb:	and    ebx,0x2
  4044ee:	movzx  eax,WORD PTR [rsp+0xa]
  4044f3:	mov    r14d,DWORD PTR [r12+0xf0]
  4044fb:	lea    ecx,[rbp+rbx*2+0x0]
  4044ff:	mov    edx,r14d
  404502:	sub    edx,ecx
  404504:	add    eax,0xffffffff
  404507:	and    eax,edx
  404509:	lea    ecx,[rax+rbp*1]
  40450c:	mov    DWORD PTR [rsp+0xc],ecx
  404510:	mov    QWORD PTR [rsp+0x10],0x0
  404519:	mov    DWORD PTR [rsp+0x18],0x0
  404521:	cmp    DWORD PTR [r12+0x100],0x0
  40452a:	je     4045fe <flatcc_builder_embed_buffer@@Base+0x14e>
  404530:	mov    QWORD PTR [rsp+0x10],0x4
  404539:	lea    rcx,[rsp+0xc]
  40453e:	mov    QWORD PTR [rsp+0x20],rcx
  404543:	mov    QWORD PTR [rsp+0x28],0x4
  40454c:	mov    DWORD PTR [rsp+0x18],0x1
  404554:	mov    edx,0x1
  404559:	mov    r8d,0x4
  40455f:	test   rbp,rbp
  404562:	je     404583 <flatcc_builder_embed_buffer@@Base+0xd3>
  404564:	add    r8,rbp
  404567:	mov    QWORD PTR [rsp+0x10],r8
  40456c:	mov    ecx,edx
  40456e:	shl    rcx,0x4
  404572:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404577:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  40457c:	add    edx,0x1
  40457f:	mov    DWORD PTR [rsp+0x18],edx
  404583:	test   eax,eax
  404585:	je     4045af <flatcc_builder_embed_buffer@@Base+0xff>
  404587:	mov    eax,eax
  404589:	add    r8,rax
  40458c:	mov    QWORD PTR [rsp+0x10],r8
  404591:	mov    ecx,edx
  404593:	shl    rcx,0x4
  404597:	lea    rsi,[rip+0x6c42]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  40459e:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  4045a3:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4045a8:	add    edx,0x1
  4045ab:	mov    DWORD PTR [rsp+0x18],edx
  4045af:	cmp    r8,0x11
  4045b3:	setb   al
  4045b6:	lea    rcx,[r8-0x10]
  4045ba:	shr    rcx,0x20
  4045be:	sete   cl
  4045c1:	test   r8d,r8d
  4045c4:	jle    404611 <flatcc_builder_embed_buffer@@Base+0x161>
  4045c6:	or     al,cl
  4045c8:	je     404611 <flatcc_builder_embed_buffer@@Base+0x161>
  4045ca:	sub    r14d,r8d
  4045cd:	mov    rdi,QWORD PTR [r12+0x38]
  4045d2:	lea    rsi,[rsp+0x20]
  4045d7:	mov    ecx,r14d
  4045da:	call   QWORD PTR [r12+0x48]
  4045df:	test   eax,eax
  4045e1:	jne    404630 <flatcc_builder_embed_buffer@@Base+0x180>
  4045e3:	mov    DWORD PTR [r12+0xf0],r14d
  4045eb:	mov    eax,r14d
  4045ee:	add    rsp,0xa0
  4045f5:	pop    rbx
  4045f6:	pop    r12
  4045f8:	pop    r14
  4045fa:	pop    r15
  4045fc:	pop    rbp
  4045fd:	ret    
  4045fe:	xor    edx,edx
  404600:	xor    r8d,r8d
  404603:	test   rbp,rbp
  404606:	jne    404564 <flatcc_builder_embed_buffer@@Base+0xb4>
  40460c:	jmp    404583 <flatcc_builder_embed_buffer@@Base+0xd3>
  404611:	lea    rdi,[rip+0x800a]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404618:	lea    rsi,[rip+0x6e43]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40461f:	lea    rcx,[rip+0x7ebb]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404626:	mov    edx,0x287
  40462b:	call   403060 <__assert_fail@plt>
  404630:	lea    rdi,[rip+0x7feb]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404637:	lea    rsi,[rip+0x6e24]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40463e:	lea    rcx,[rip+0x7e9c]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404645:	mov    edx,0x28b
  40464a:	call   403060 <__assert_fail@plt>
  40464f:	nop
  404650:	push   rbx
  404651:	sub    rsp,0x90
  404658:	mov    rax,rdi
  40465b:	test   dx,dx
  40465e:	jne    404671 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404660:	mov    edi,DWORD PTR [rax+0xec]
  404666:	test   di,di
  404669:	mov    edx,0x1
  40466e:	cmovne edx,edi
  404671:	movzx  ebx,WORD PTR [rsi]
  404674:	mov    edi,0x4
  404679:	cmp    ebx,0x4
  40467c:	cmovae edi,ebx
  40467f:	jb     40468c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404681:	cmp    di,dx
  404684:	jb     40468c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404686:	test   ecx,ecx
  404688:	jne    4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  40468a:	jmp    404699 <flatcc_builder_embed_buffer@@Base+0x1e9>
  40468c:	cmp    di,dx
  40468f:	cmovb  edi,edx
  404692:	mov    WORD PTR [rsi],di
  404695:	test   ecx,ecx
  404697:	jne    4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  404699:	mov    ebx,DWORD PTR [rax+0xf4]
  40469f:	movzx  r8d,dx
  4046a3:	add    r8d,0xffffffff
  4046a7:	and    r8d,ebx
  4046aa:	je     4046f4 <flatcc_builder_embed_buffer@@Base+0x244>
  4046ac:	mov    QWORD PTR [rsp],r8
  4046b0:	lea    rcx,[rip+0x6b29]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4046b7:	mov    QWORD PTR [rsp+0x10],rcx
  4046bc:	mov    QWORD PTR [rsp+0x18],r8
  4046c1:	mov    DWORD PTR [rsp+0x8],0x1
  4046c9:	lea    ecx,[r8+rbx*1]
  4046cd:	mov    DWORD PTR [rax+0xf4],ecx
  4046d3:	test   r8d,r8d
  4046d6:	js     4046fd <flatcc_builder_embed_buffer@@Base+0x24d>
  4046d8:	mov    rdi,QWORD PTR [rax+0x38]
  4046dc:	lea    rsi,[rsp+0x10]
  4046e1:	mov    edx,0x1
  4046e6:	mov    ecx,ebx
  4046e8:	call   QWORD PTR [rax+0x48]
  4046eb:	test   eax,eax
  4046ed:	jne    40471c <flatcc_builder_embed_buffer@@Base+0x26c>
  4046ef:	cmp    ebx,0xffffffff
  4046f2:	je     40473b <flatcc_builder_embed_buffer@@Base+0x28b>
  4046f4:	add    rsp,0x90
  4046fb:	pop    rbx
  4046fc:	ret    
  4046fd:	lea    rdi,[rip+0x7f1e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404704:	lea    rsi,[rip+0x6d57]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40470b:	lea    rcx,[rip+0x7e8b]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  404712:	mov    edx,0x2a1
  404717:	call   403060 <__assert_fail@plt>
  40471c:	lea    rdi,[rip+0x7eff]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404723:	lea    rsi,[rip+0x6d38]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40472a:	lea    rcx,[rip+0x7e6c]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  404731:	mov    edx,0x2a5
  404736:	call   403060 <__assert_fail@plt>
  40473b:	lea    rdi,[rip+0x7ee0]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404742:	lea    rsi,[rip+0x6d19]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404749:	lea    rcx,[rip+0x7d4f]        # 40c49f <flatcc_builder_padding_base@@Base+0x12bf>
  404750:	mov    edx,0x2be
  404755:	call   403060 <__assert_fail@plt>
  40475a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404760 <flatcc_builder_create_buffer@@Base>:
  404760:	push   rbp
  404761:	push   r15
  404763:	push   r14
  404765:	push   r13
  404767:	push   r12
  404769:	push   rbx
  40476a:	sub    rsp,0xa8
  404771:	mov    r12d,r9d
  404774:	mov    r14d,ecx
  404777:	mov    rbp,rsi
  40477a:	mov    r13,rdi
  40477d:	mov    WORD PTR [rsp+0xa],r8w
  404783:	mov    DWORD PTR [rsp+0xc],0x0
  40478b:	mov    r15d,r9d
  40478e:	and    r15d,0x1
  404792:	lea    rsi,[rsp+0xa]
  404797:	mov    ecx,r15d
  40479a:	call   404650 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40479f:	movzx  eax,WORD PTR [rsp+0xa]
  4047a4:	cmp    WORD PTR [r13+0xe8],ax
  4047ac:	jae    4047b6 <flatcc_builder_create_buffer@@Base+0x56>
  4047ae:	mov    WORD PTR [r13+0xe8],ax
  4047b6:	movzx  edx,ax
  4047b9:	xor    eax,eax
  4047bb:	test   rbp,rbp
  4047be:	je     4047d8 <flatcc_builder_create_buffer@@Base+0x78>
  4047c0:	mov    ecx,DWORD PTR [rbp+0x0]
  4047c3:	mov    DWORD PTR [rsp+0xc],ecx
  4047c7:	xor    edi,edi
  4047c9:	test   ecx,ecx
  4047cb:	setne  dil
  4047cf:	mov    rsi,rdi
  4047d2:	shl    rsi,0x2
  4047d6:	jmp    4047dc <flatcc_builder_create_buffer@@Base+0x7c>
  4047d8:	xor    edi,edi
  4047da:	xor    esi,esi
  4047dc:	lea    ecx,[r12+r12*1]
  4047e0:	and    ecx,0x4
  4047e3:	mov    ebp,DWORD PTR [r13+0xf0]
  4047ea:	xor    ecx,0xfffffffc
  4047ed:	add    ecx,ebp
  4047ef:	sub    ecx,esi
  4047f1:	add    edx,0xffffffff
  4047f4:	mov    QWORD PTR [rsp+0x18],0x0
  4047fd:	mov    DWORD PTR [rsp+0x20],0x0
  404805:	test   r12b,0x3
  404809:	je     40483c <flatcc_builder_create_buffer@@Base+0xdc>
  40480b:	mov    QWORD PTR [rsp+0x18],0x4
  404814:	lea    rax,[rsp+0x10]
  404819:	mov    QWORD PTR [rsp+0x28],rax
  40481e:	mov    QWORD PTR [rsp+0x30],0x4
  404827:	mov    DWORD PTR [rsp+0x20],0x1
  40482f:	mov    eax,0x1
  404834:	mov    r8d,0x8
  40483a:	jmp    404842 <flatcc_builder_create_buffer@@Base+0xe2>
  40483c:	mov    r8d,0x4
  404842:	and    ecx,edx
  404844:	mov    QWORD PTR [rsp+0x18],r8
  404849:	mov    edx,eax
  40484b:	shl    rdx,0x4
  40484f:	lea    rbx,[rsp+0x14]
  404854:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  404859:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404862:	lea    edx,[rax+0x1]
  404865:	mov    DWORD PTR [rsp+0x20],edx
  404869:	test   dil,dil
  40486c:	je     404894 <flatcc_builder_create_buffer@@Base+0x134>
  40486e:	add    r8,rsi
  404871:	mov    QWORD PTR [rsp+0x18],r8
  404876:	mov    edx,edx
  404878:	shl    rdx,0x4
  40487c:	lea    rdi,[rsp+0xc]
  404881:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404886:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40488b:	or     eax,0x2
  40488e:	mov    DWORD PTR [rsp+0x20],eax
  404892:	mov    edx,eax
  404894:	test   ecx,ecx
  404896:	je     4048c0 <flatcc_builder_create_buffer@@Base+0x160>
  404898:	mov    eax,ecx
  40489a:	add    r8,rax
  40489d:	mov    QWORD PTR [rsp+0x18],r8
  4048a2:	mov    ecx,edx
  4048a4:	shl    rcx,0x4
  4048a8:	lea    rsi,[rip+0x6931]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  4048af:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  4048b4:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  4048b9:	add    edx,0x1
  4048bc:	mov    DWORD PTR [rsp+0x20],edx
  4048c0:	xor    eax,eax
  4048c2:	test   r12b,0x3
  4048c6:	setne  al
  4048c9:	sub    ebp,r8d
  4048cc:	lea    eax,[rbp+rax*4+0x0]
  4048d0:	mov    ecx,r15d
  4048d3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  4048db:	sub    ecx,eax
  4048dd:	mov    DWORD PTR [rsp+0x10],ecx
  4048e1:	sub    r14d,eax
  4048e4:	mov    DWORD PTR [rsp+0x14],r14d
  4048e9:	cmp    r8,0x11
  4048ed:	setb   al
  4048f0:	lea    rcx,[r8-0x10]
  4048f4:	shr    rcx,0x20
  4048f8:	sete   cl
  4048fb:	test   r8d,r8d
  4048fe:	jle    404936 <flatcc_builder_create_buffer@@Base+0x1d6>
  404900:	or     al,cl
  404902:	je     404936 <flatcc_builder_create_buffer@@Base+0x1d6>
  404904:	mov    rdi,QWORD PTR [r13+0x38]
  404908:	lea    rsi,[rsp+0x28]
  40490d:	mov    ecx,ebp
  40490f:	call   QWORD PTR [r13+0x48]
  404913:	test   eax,eax
  404915:	jne    404955 <flatcc_builder_create_buffer@@Base+0x1f5>
  404917:	mov    DWORD PTR [r13+0xf0],ebp
  40491e:	test   ebp,ebp
  404920:	je     404974 <flatcc_builder_create_buffer@@Base+0x214>
  404922:	mov    eax,ebp
  404924:	add    rsp,0xa8
  40492b:	pop    rbx
  40492c:	pop    r12
  40492e:	pop    r13
  404930:	pop    r14
  404932:	pop    r15
  404934:	pop    rbp
  404935:	ret    
  404936:	lea    rdi,[rip+0x7ce5]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40493d:	lea    rsi,[rip+0x6b1e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404944:	lea    rcx,[rip+0x7b96]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  40494b:	mov    edx,0x287
  404950:	call   403060 <__assert_fail@plt>
  404955:	lea    rdi,[rip+0x7cc6]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40495c:	lea    rsi,[rip+0x6aff]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404963:	lea    rcx,[rip+0x7b77]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  40496a:	mov    edx,0x28b
  40496f:	call   403060 <__assert_fail@plt>
  404974:	lea    rdi,[rip+0x7ca7]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40497b:	lea    rsi,[rip+0x6ae0]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404982:	lea    rcx,[rip+0x6c2e]        # 40b5b7 <flatcc_builder_padding_base@@Base+0x3d7>
  404989:	mov    edx,0x304
  40498e:	call   403060 <__assert_fail@plt>
  404993:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40499d:	nop    DWORD PTR [rax]

00000000004049a0 <flatcc_builder_create_struct@@Base>:
  4049a0:	push   rbp
  4049a1:	push   r14
  4049a3:	push   rbx
  4049a4:	sub    rsp,0x90
  4049ab:	test   cx,cx
  4049ae:	je     404aa9 <flatcc_builder_create_struct@@Base+0x109>
  4049b4:	mov    rax,rdx
  4049b7:	mov    r14,rdi
  4049ba:	cmp    WORD PTR [rdi+0xe8],cx
  4049c1:	jae    4049cb <flatcc_builder_create_struct@@Base+0x2b>
  4049c3:	mov    WORD PTR [r14+0xe8],cx
  4049cb:	mov    ebp,DWORD PTR [r14+0xf0]
  4049d2:	mov    edx,ebp
  4049d4:	sub    edx,eax
  4049d6:	movzx  ecx,cx
  4049d9:	add    ecx,0xffffffff
  4049dc:	and    ecx,edx
  4049de:	mov    QWORD PTR [rsp],0x0
  4049e6:	mov    DWORD PTR [rsp+0x8],0x0
  4049ee:	test   rax,rax
  4049f1:	je     404a82 <flatcc_builder_create_struct@@Base+0xe2>
  4049f7:	mov    QWORD PTR [rsp],rax
  4049fb:	mov    QWORD PTR [rsp+0x10],rsi
  404a00:	mov    QWORD PTR [rsp+0x18],rax
  404a05:	mov    DWORD PTR [rsp+0x8],0x1
  404a0d:	mov    edx,0x1
  404a12:	test   ecx,ecx
  404a14:	je     404a3b <flatcc_builder_create_struct@@Base+0x9b>
  404a16:	add    rax,rcx
  404a19:	mov    QWORD PTR [rsp],rax
  404a1d:	mov    esi,edx
  404a1f:	shl    rsi,0x4
  404a23:	lea    rdi,[rip+0x67b6]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  404a2a:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  404a2f:	mov    QWORD PTR [rsp+rsi*1+0x18],rcx
  404a34:	add    edx,0x1
  404a37:	mov    DWORD PTR [rsp+0x8],edx
  404a3b:	cmp    rax,0x11
  404a3f:	setb   cl
  404a42:	lea    rsi,[rax-0x10]
  404a46:	shr    rsi,0x20
  404a4a:	sete   bl
  404a4d:	test   eax,eax
  404a4f:	jle    404a8a <flatcc_builder_create_struct@@Base+0xea>
  404a51:	or     cl,bl
  404a53:	je     404a8a <flatcc_builder_create_struct@@Base+0xea>
  404a55:	sub    ebp,eax
  404a57:	mov    rdi,QWORD PTR [r14+0x38]
  404a5b:	lea    rsi,[rsp+0x10]
  404a60:	mov    ecx,ebp
  404a62:	mov    r8,rax
  404a65:	call   QWORD PTR [r14+0x48]
  404a69:	test   eax,eax
  404a6b:	jne    404ac8 <flatcc_builder_create_struct@@Base+0x128>
  404a6d:	mov    DWORD PTR [r14+0xf0],ebp
  404a74:	mov    eax,ebp
  404a76:	add    rsp,0x90
  404a7d:	pop    rbx
  404a7e:	pop    r14
  404a80:	pop    rbp
  404a81:	ret    
  404a82:	xor    edx,edx
  404a84:	test   ecx,ecx
  404a86:	jne    404a16 <flatcc_builder_create_struct@@Base+0x76>
  404a88:	jmp    404a3b <flatcc_builder_create_struct@@Base+0x9b>
  404a8a:	lea    rdi,[rip+0x7b91]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404a91:	lea    rsi,[rip+0x69ca]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404a98:	lea    rcx,[rip+0x7a42]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404a9f:	mov    edx,0x287
  404aa4:	call   403060 <__assert_fail@plt>
  404aa9:	lea    rdi,[rip+0x6b8a]        # 40b63a <flatcc_builder_padding_base@@Base+0x45a>
  404ab0:	lea    rsi,[rip+0x69ab]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404ab7:	lea    rcx,[rip+0x6b87]        # 40b645 <flatcc_builder_padding_base@@Base+0x465>
  404abe:	mov    edx,0x30f
  404ac3:	call   403060 <__assert_fail@plt>
  404ac8:	lea    rdi,[rip+0x7b53]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404acf:	lea    rsi,[rip+0x698c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404ad6:	lea    rcx,[rip+0x7a04]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  404add:	mov    edx,0x28b
  404ae2:	call   403060 <__assert_fail@plt>
  404ae7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404af0 <flatcc_builder_start_buffer@@Base>:
  404af0:	push   rbp
  404af1:	push   r15
  404af3:	push   r14
  404af5:	push   rbx
  404af6:	push   rax
  404af7:	mov    r15d,ecx
  404afa:	mov    ebp,edx
  404afc:	mov    r14,rsi
  404aff:	mov    rbx,rdi
  404b02:	movzx  esi,WORD PTR [rdi+0xe8]
  404b09:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  404b0e:	mov    ecx,eax
  404b10:	mov    eax,0xffffffff
  404b15:	test   ecx,ecx
  404b17:	jne    404bbc <flatcc_builder_start_buffer@@Base+0xcc>
  404b1d:	mov    WORD PTR [rbx+0xe8],0x1
  404b26:	movzx  eax,WORD PTR [rbx+0xec]
  404b2d:	mov    rcx,QWORD PTR [rbx+0x30]
  404b31:	mov    WORD PTR [rcx+0x22],ax
  404b35:	mov    WORD PTR [rbx+0xec],bp
  404b3c:	movzx  eax,WORD PTR [rbx+0x10c]
  404b43:	mov    rcx,QWORD PTR [rbx+0x30]
  404b47:	mov    WORD PTR [rcx+0x20],ax
  404b4b:	mov    WORD PTR [rbx+0x10c],r15w
  404b53:	mov    eax,DWORD PTR [rbx+0xf8]
  404b59:	mov    rcx,QWORD PTR [rbx+0x30]
  404b5d:	mov    DWORD PTR [rcx+0x14],eax
  404b60:	mov    eax,DWORD PTR [rbx+0x100]
  404b66:	mov    rcx,QWORD PTR [rbx+0x30]
  404b6a:	mov    DWORD PTR [rcx+0x1c],eax
  404b6d:	mov    eax,DWORD PTR [rbx+0xf0]
  404b73:	mov    DWORD PTR [rbx+0xf8],eax
  404b79:	mov    eax,DWORD PTR [rbx+0xfc]
  404b7f:	lea    ecx,[rax+0x1]
  404b82:	mov    DWORD PTR [rbx+0xfc],ecx
  404b88:	mov    DWORD PTR [rbx+0x100],eax
  404b8e:	mov    eax,DWORD PTR [rbx+0x110]
  404b94:	mov    rcx,QWORD PTR [rbx+0x30]
  404b98:	mov    DWORD PTR [rcx+0x10],eax
  404b9b:	test   r14,r14
  404b9e:	jne    404ba7 <flatcc_builder_start_buffer@@Base+0xb7>
  404ba0:	lea    r14,[rip+0x6639]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  404ba7:	mov    eax,DWORD PTR [r14]
  404baa:	mov    DWORD PTR [rbx+0x110],eax
  404bb0:	mov    rax,QWORD PTR [rbx+0x30]
  404bb4:	mov    WORD PTR [rax+0xe],0x1
  404bba:	xor    eax,eax
  404bbc:	add    rsp,0x8
  404bc0:	pop    rbx
  404bc1:	pop    r14
  404bc3:	pop    r15
  404bc5:	pop    rbp
  404bc6:	ret    
  404bc7:	nop    WORD PTR [rax+rax*1+0x0]
  404bd0:	push   rbp
  404bd1:	push   r15
  404bd3:	push   r14
  404bd5:	push   rbx
  404bd6:	push   rax
  404bd7:	mov    r14d,esi
  404bda:	mov    rbx,rdi
  404bdd:	movsxd rbp,DWORD PTR [rdi+0x104]
  404be4:	lea    eax,[rbp+0x1]
  404be7:	mov    DWORD PTR [rdi+0x104],eax
  404bed:	cmp    ebp,DWORD PTR [rdi+0x108]
  404bf3:	jge    404c06 <flatcc_builder_start_buffer@@Base+0x116>
  404bf5:	mov    rax,QWORD PTR [rbx+0x30]
  404bf9:	add    rax,0x24
  404bfd:	mov    QWORD PTR [rbx+0x30],rax
  404c01:	jmp    404c9b <flatcc_builder_start_buffer@@Base+0x1ab>
  404c06:	mov    eax,DWORD PTR [rbx+0x120]
  404c0c:	mov    r15d,0xffffffff
  404c12:	test   eax,eax
  404c14:	jle    404c1e <flatcc_builder_start_buffer@@Base+0x12e>
  404c16:	cmp    ebp,eax
  404c18:	jge    404cd6 <flatcc_builder_start_buffer@@Base+0x1e6>
  404c1e:	shl    rbp,0x2
  404c22:	lea    rdx,[rbp*8+0x24]
  404c2a:	add    rdx,rbp
  404c2d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404c34:	jbe    404c54 <flatcc_builder_start_buffer@@Base+0x164>
  404c36:	lea    rsi,[rbx+0x98]
  404c3d:	mov    rdi,QWORD PTR [rbx+0x40]
  404c41:	xor    ecx,ecx
  404c43:	mov    r8d,0x4
  404c49:	call   QWORD PTR [rbx+0x50]
  404c4c:	test   eax,eax
  404c4e:	jne    404ce4 <flatcc_builder_start_buffer@@Base+0x1f4>
  404c54:	lea    rax,[rbp*8+0x0]
  404c5c:	add    rax,rbp
  404c5f:	add    rax,QWORD PTR [rbx+0x98]
  404c66:	mov    QWORD PTR [rbx+0x30],rax
  404c6a:	je     404cd6 <flatcc_builder_start_buffer@@Base+0x1e6>
  404c6c:	movabs rdx,0xe38e38e38e38e38f
  404c76:	mulx   rdx,rcx,QWORD PTR [rbx+0xa0]
  404c7f:	shr    rdx,0x5
  404c83:	mov    ecx,DWORD PTR [rbx+0x120]
  404c89:	cmp    ecx,edx
  404c8b:	mov    esi,edx
  404c8d:	cmovle esi,ecx
  404c90:	test   ecx,ecx
  404c92:	cmovle esi,edx
  404c95:	mov    DWORD PTR [rbx+0x108],esi
  404c9b:	mov    ecx,DWORD PTR [rbx+0x20]
  404c9e:	mov    DWORD PTR [rax+0x8],ecx
  404ca1:	movzx  edx,WORD PTR [rbx+0xea]
  404ca8:	mov    WORD PTR [rax+0xc],dx
  404cac:	mov    WORD PTR [rbx+0xea],r14w
  404cb4:	mov    edx,DWORD PTR [rbx+0x28]
  404cb7:	mov    DWORD PTR [rax],edx
  404cb9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404cc0:	lea    eax,[rcx+rdx*1]
  404cc3:	add    eax,0x7
  404cc6:	and    eax,0xfffffff8
  404cc9:	mov    DWORD PTR [rbx+0x28],eax
  404ccc:	mov    DWORD PTR [rbx+0x20],0x0
  404cd3:	xor    r15d,r15d
  404cd6:	mov    eax,r15d
  404cd9:	add    rsp,0x8
  404cdd:	pop    rbx
  404cde:	pop    r14
  404ce0:	pop    r15
  404ce2:	pop    rbp
  404ce3:	ret    
  404ce4:	lea    rdi,[rip+0x7937]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  404ceb:	lea    rsi,[rip+0x6770]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404cf2:	lea    rcx,[rip+0x7763]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  404cf9:	mov    edx,0x134
  404cfe:	call   403060 <__assert_fail@plt>
  404d03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404d0d:	nop    DWORD PTR [rax]

0000000000404d10 <flatcc_builder_end_buffer@@Base>:
  404d10:	push   rbp
  404d11:	push   rbx
  404d12:	push   rax
  404d13:	mov    rcx,QWORD PTR [rdi+0x30]
  404d17:	movzx  ecx,WORD PTR [rcx+0xe]
  404d1b:	cmp    ecx,0x1
  404d1e:	jne    404e1e <flatcc_builder_end_buffer@@Base+0x10e>
  404d24:	mov    eax,esi
  404d26:	mov    rbx,rdi
  404d29:	movzx  ecx,WORD PTR [rdi+0x10c]
  404d30:	and    ecx,0x2
  404d33:	xor    r9d,r9d
  404d36:	cmp    DWORD PTR [rdi+0x100],0x0
  404d3d:	setne  r9b
  404d41:	or     r9d,ecx
  404d44:	movzx  edi,WORD PTR [rdi+0xe8]
  404d4b:	movzx  ecx,WORD PTR [rbx+0xec]
  404d52:	cmp    di,cx
  404d55:	jae    404d60 <flatcc_builder_end_buffer@@Base+0x50>
  404d57:	mov    WORD PTR [rbx+0xe8],cx
  404d5e:	mov    edi,ecx
  404d60:	lea    rsi,[rbx+0x110]
  404d67:	movzx  edx,cx
  404d6a:	movzx  r8d,di
  404d6e:	mov    rdi,rbx
  404d71:	mov    ecx,eax
  404d73:	call   404760 <flatcc_builder_create_buffer@@Base>
  404d78:	mov    ebp,eax
  404d7a:	test   eax,eax
  404d7c:	je     404e15 <flatcc_builder_end_buffer@@Base+0x105>
  404d82:	mov    rax,QWORD PTR [rbx+0x30]
  404d86:	mov    ecx,DWORD PTR [rax+0x14]
  404d89:	mov    DWORD PTR [rbx+0xf8],ecx
  404d8f:	mov    ecx,DWORD PTR [rax+0x1c]
  404d92:	mov    DWORD PTR [rbx+0x100],ecx
  404d98:	mov    ecx,DWORD PTR [rax+0x10]
  404d9b:	mov    DWORD PTR [rbx+0x110],ecx
  404da1:	movzx  eax,WORD PTR [rax+0x20]
  404da5:	mov    WORD PTR [rbx+0x10c],ax
  404dac:	mov    rdi,QWORD PTR [rbx+0x18]
  404db0:	mov    edx,DWORD PTR [rbx+0x20]
  404db3:	xor    esi,esi
  404db5:	call   403070 <memset@plt>
  404dba:	mov    rax,QWORD PTR [rbx+0x30]
  404dbe:	mov    ecx,DWORD PTR [rax+0x8]
  404dc1:	mov    DWORD PTR [rbx+0x20],ecx
  404dc4:	mov    ecx,DWORD PTR [rax]
  404dc6:	mov    DWORD PTR [rbx+0x28],ecx
  404dc9:	mov    edx,DWORD PTR [rax+0x4]
  404dcc:	mov    rsi,rcx
  404dcf:	add    rsi,QWORD PTR [rbx+0x68]
  404dd3:	mov    QWORD PTR [rbx+0x18],rsi
  404dd7:	mov    esi,DWORD PTR [rbx+0x70]
  404dda:	sub    esi,ecx
  404ddc:	cmp    esi,edx
  404dde:	cmova  esi,edx
  404de1:	mov    DWORD PTR [rbx+0x24],esi
  404de4:	movzx  ecx,WORD PTR [rbx+0xea]
  404deb:	cmp    WORD PTR [rbx+0xe8],cx
  404df2:	jae    404dfb <flatcc_builder_end_buffer@@Base+0xeb>
  404df4:	mov    WORD PTR [rbx+0xe8],cx
  404dfb:	movzx  ecx,WORD PTR [rax+0xc]
  404dff:	mov    WORD PTR [rbx+0xea],cx
  404e06:	add    rax,0xffffffffffffffdc
  404e0a:	mov    QWORD PTR [rbx+0x30],rax
  404e0e:	add    DWORD PTR [rbx+0x104],0xffffffff
  404e15:	mov    eax,ebp
  404e17:	add    rsp,0x8
  404e1b:	pop    rbx
  404e1c:	pop    rbp
  404e1d:	ret    
  404e1e:	lea    rdi,[rip+0x6886]        # 40b6ab <flatcc_builder_padding_base@@Base+0x4cb>
  404e25:	lea    rsi,[rip+0x6636]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404e2c:	lea    rcx,[rip+0x68a4]        # 40b6d7 <flatcc_builder_padding_base@@Base+0x4f7>
  404e33:	mov    edx,0x346
  404e38:	call   403060 <__assert_fail@plt>
  404e3d:	nop    DWORD PTR [rax]

0000000000404e40 <flatcc_builder_start_struct@@Base>:
  404e40:	push   r15
  404e42:	push   r14
  404e44:	push   rbx
  404e45:	mov    r14,rsi
  404e48:	mov    rbx,rdi
  404e4b:	mov    esi,edx
  404e4d:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  404e52:	test   eax,eax
  404e54:	je     404e5d <flatcc_builder_start_struct@@Base+0x1d>
  404e56:	xor    eax,eax
  404e58:	jmp    404ef2 <flatcc_builder_start_struct@@Base+0xb2>
  404e5d:	mov    rdx,QWORD PTR [rbx+0x30]
  404e61:	mov    WORD PTR [rdx+0xe],0x2
  404e67:	mov    ecx,DWORD PTR [rbx+0x28]
  404e6a:	mov    esi,DWORD PTR [rbx+0x70]
  404e6d:	mov    rax,QWORD PTR [rbx+0x68]
  404e71:	add    rax,rcx
  404e74:	mov    QWORD PTR [rbx+0x18],rax
  404e78:	sub    esi,ecx
  404e7a:	cmp    esi,0xfffffffc
  404e7d:	mov    edi,0xfffffffc
  404e82:	cmovb  edi,esi
  404e85:	mov    DWORD PTR [rbx+0x24],edi
  404e88:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  404e8f:	mov    r15d,DWORD PTR [rbx+0x20]
  404e93:	add    r14d,r15d
  404e96:	mov    DWORD PTR [rbx+0x20],r14d
  404e9a:	cmp    r14d,edi
  404e9d:	jb     404eef <flatcc_builder_start_struct@@Base+0xaf>
  404e9f:	add    r14d,0x1
  404ea3:	lea    rsi,[rbx+0x68]
  404ea7:	mov    rdi,QWORD PTR [rbx+0x40]
  404eab:	add    r14,rcx
  404eae:	mov    ecx,0x1
  404eb3:	mov    r8d,0x1
  404eb9:	mov    rdx,r14
  404ebc:	call   QWORD PTR [rbx+0x50]
  404ebf:	test   eax,eax
  404ec1:	jne    404e56 <flatcc_builder_start_struct@@Base+0x16>
  404ec3:	mov    ecx,DWORD PTR [rbx+0x28]
  404ec6:	mov    rax,rcx
  404ec9:	add    rax,QWORD PTR [rbx+0x68]
  404ecd:	mov    QWORD PTR [rbx+0x18],rax
  404ed1:	mov    edx,DWORD PTR [rbx+0x70]
  404ed4:	sub    edx,ecx
  404ed6:	cmp    edx,0xfffffffc
  404ed9:	mov    ecx,0xfffffffc
  404ede:	cmovb  ecx,edx
  404ee1:	mov    DWORD PTR [rbx+0x24],ecx
  404ee4:	mov    rcx,QWORD PTR [rbx+0x30]
  404ee8:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404eef:	add    rax,r15
  404ef2:	pop    rbx
  404ef3:	pop    r14
  404ef5:	pop    r15
  404ef7:	ret    
  404ef8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404f00 <flatcc_builder_struct_edit@@Base>:
  404f00:	mov    rax,QWORD PTR [rdi+0x18]
  404f04:	ret    
  404f05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404f0f:	nop

0000000000404f10 <flatcc_builder_end_struct@@Base>:
  404f10:	push   rbp
  404f11:	push   rbx
  404f12:	push   rax
  404f13:	mov    rax,QWORD PTR [rdi+0x30]
  404f17:	movzx  eax,WORD PTR [rax+0xe]
  404f1b:	cmp    eax,0x2
  404f1e:	jne    404fb2 <flatcc_builder_end_struct@@Base+0xa2>
  404f24:	mov    rbx,rdi
  404f27:	mov    rsi,QWORD PTR [rdi+0x18]
  404f2b:	mov    edx,DWORD PTR [rdi+0x20]
  404f2e:	movzx  ecx,WORD PTR [rdi+0xea]
  404f35:	call   4049a0 <flatcc_builder_create_struct@@Base>
  404f3a:	mov    ebp,eax
  404f3c:	test   eax,eax
  404f3e:	je     404fa9 <flatcc_builder_end_struct@@Base+0x99>
  404f40:	mov    rdi,QWORD PTR [rbx+0x18]
  404f44:	mov    edx,DWORD PTR [rbx+0x20]
  404f47:	xor    esi,esi
  404f49:	call   403070 <memset@plt>
  404f4e:	mov    rax,QWORD PTR [rbx+0x30]
  404f52:	mov    ecx,DWORD PTR [rax+0x8]
  404f55:	mov    DWORD PTR [rbx+0x20],ecx
  404f58:	mov    ecx,DWORD PTR [rax]
  404f5a:	mov    DWORD PTR [rbx+0x28],ecx
  404f5d:	mov    edx,DWORD PTR [rax+0x4]
  404f60:	mov    rsi,rcx
  404f63:	add    rsi,QWORD PTR [rbx+0x68]
  404f67:	mov    QWORD PTR [rbx+0x18],rsi
  404f6b:	mov    esi,DWORD PTR [rbx+0x70]
  404f6e:	sub    esi,ecx
  404f70:	cmp    esi,edx
  404f72:	cmova  esi,edx
  404f75:	mov    DWORD PTR [rbx+0x24],esi
  404f78:	movzx  ecx,WORD PTR [rbx+0xea]
  404f7f:	cmp    WORD PTR [rbx+0xe8],cx
  404f86:	jae    404f8f <flatcc_builder_end_struct@@Base+0x7f>
  404f88:	mov    WORD PTR [rbx+0xe8],cx
  404f8f:	movzx  ecx,WORD PTR [rax+0xc]
  404f93:	mov    WORD PTR [rbx+0xea],cx
  404f9a:	add    rax,0xffffffffffffffdc
  404f9e:	mov    QWORD PTR [rbx+0x30],rax
  404fa2:	add    DWORD PTR [rbx+0x104],0xffffffff
  404fa9:	mov    eax,ebp
  404fab:	add    rsp,0x8
  404faf:	pop    rbx
  404fb0:	pop    rbp
  404fb1:	ret    
  404fb2:	lea    rdi,[rip+0x6777]        # 40b730 <flatcc_builder_padding_base@@Base+0x550>
  404fb9:	lea    rsi,[rip+0x64a2]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  404fc0:	lea    rcx,[rip+0x6795]        # 40b75c <flatcc_builder_padding_base@@Base+0x57c>
  404fc7:	mov    edx,0x368
  404fcc:	call   403060 <__assert_fail@plt>
  404fd1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404fdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404fe0 <flatcc_builder_extend_vector@@Base>:
  404fe0:	push   r14
  404fe2:	push   rbx
  404fe3:	push   rax
  404fe4:	mov    rax,QWORD PTR [rdi+0x30]
  404fe8:	mov    ecx,DWORD PTR [rax+0x14]
  404feb:	add    ecx,esi
  404fed:	jb     405080 <flatcc_builder_extend_vector@@Base+0xa0>
  404ff3:	cmp    ecx,DWORD PTR [rax+0x18]
  404ff6:	ja     405080 <flatcc_builder_extend_vector@@Base+0xa0>
  404ffc:	mov    rbx,rdi
  404fff:	mov    DWORD PTR [rax+0x14],ecx
  405002:	mov    rax,QWORD PTR [rdi+0x30]
  405006:	imul   esi,DWORD PTR [rax+0x10]
  40500a:	mov    r14d,DWORD PTR [rdi+0x20]
  40500e:	add    esi,r14d
  405011:	mov    DWORD PTR [rdi+0x20],esi
  405014:	cmp    esi,DWORD PTR [rdi+0x24]
  405017:	jae    40501f <flatcc_builder_extend_vector@@Base+0x3f>
  405019:	mov    rax,QWORD PTR [rbx+0x18]
  40501d:	jmp    405075 <flatcc_builder_extend_vector@@Base+0x95>
  40501f:	add    esi,0x1
  405022:	lea    rax,[rbx+0x68]
  405026:	mov    rdi,QWORD PTR [rbx+0x40]
  40502a:	mov    edx,DWORD PTR [rbx+0x28]
  40502d:	add    rdx,rsi
  405030:	mov    ecx,0x1
  405035:	mov    r8d,0x1
  40503b:	mov    rsi,rax
  40503e:	call   QWORD PTR [rbx+0x50]
  405041:	test   eax,eax
  405043:	je     405049 <flatcc_builder_extend_vector@@Base+0x69>
  405045:	xor    eax,eax
  405047:	jmp    405078 <flatcc_builder_extend_vector@@Base+0x98>
  405049:	mov    ecx,DWORD PTR [rbx+0x28]
  40504c:	mov    rax,rcx
  40504f:	add    rax,QWORD PTR [rbx+0x68]
  405053:	mov    QWORD PTR [rbx+0x18],rax
  405057:	mov    edx,DWORD PTR [rbx+0x70]
  40505a:	sub    edx,ecx
  40505c:	cmp    edx,0xfffffffc
  40505f:	mov    ecx,0xfffffffc
  405064:	cmovb  ecx,edx
  405067:	mov    DWORD PTR [rbx+0x24],ecx
  40506a:	mov    rcx,QWORD PTR [rbx+0x30]
  40506e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405075:	add    rax,r14
  405078:	add    rsp,0x8
  40507c:	pop    rbx
  40507d:	pop    r14
  40507f:	ret    
  405080:	lea    rdi,[rip+0x74a4]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405087:	lea    rsi,[rip+0x63d4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40508e:	lea    rcx,[rip+0x74b1]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405095:	mov    edx,0x37c
  40509a:	call   403060 <__assert_fail@plt>
  40509f:	nop

00000000004050a0 <flatcc_builder_vector_push@@Base>:
  4050a0:	push   r15
  4050a2:	push   r14
  4050a4:	push   r13
  4050a6:	push   r12
  4050a8:	push   rbx
  4050a9:	mov    rax,QWORD PTR [rdi+0x30]
  4050ad:	movzx  ecx,WORD PTR [rax+0xe]
  4050b1:	cmp    ecx,0x4
  4050b4:	jne    405169 <flatcc_builder_vector_push@@Base+0xc9>
  4050ba:	mov    ecx,DWORD PTR [rax+0x14]
  4050bd:	cmp    ecx,DWORD PTR [rax+0x18]
  4050c0:	ja     405188 <flatcc_builder_vector_push@@Base+0xe8>
  4050c6:	mov    r14,rsi
  4050c9:	mov    rbx,rdi
  4050cc:	add    ecx,0x1
  4050cf:	mov    DWORD PTR [rax+0x14],ecx
  4050d2:	mov    rax,QWORD PTR [rdi+0x30]
  4050d6:	mov    r15d,DWORD PTR [rax+0x10]
  4050da:	mov    r13d,DWORD PTR [rdi+0x20]
  4050de:	lea    eax,[r15+r13*1]
  4050e2:	mov    DWORD PTR [rdi+0x20],eax
  4050e5:	cmp    eax,DWORD PTR [rdi+0x24]
  4050e8:	jae    4050f5 <flatcc_builder_vector_push@@Base+0x55>
  4050ea:	mov    r12,QWORD PTR [rbx+0x18]
  4050ee:	add    r12,r13
  4050f1:	jne    40514e <flatcc_builder_vector_push@@Base+0xae>
  4050f3:	jmp    405118 <flatcc_builder_vector_push@@Base+0x78>
  4050f5:	add    eax,0x1
  4050f8:	lea    rsi,[rbx+0x68]
  4050fc:	mov    rdi,QWORD PTR [rbx+0x40]
  405100:	mov    edx,DWORD PTR [rbx+0x28]
  405103:	add    rdx,rax
  405106:	mov    ecx,0x1
  40510b:	mov    r8d,0x1
  405111:	call   QWORD PTR [rbx+0x50]
  405114:	test   eax,eax
  405116:	je     40511d <flatcc_builder_vector_push@@Base+0x7d>
  405118:	xor    r12d,r12d
  40511b:	jmp    40515c <flatcc_builder_vector_push@@Base+0xbc>
  40511d:	mov    eax,DWORD PTR [rbx+0x28]
  405120:	mov    r12,rax
  405123:	add    r12,QWORD PTR [rbx+0x68]
  405127:	mov    QWORD PTR [rbx+0x18],r12
  40512b:	mov    ecx,DWORD PTR [rbx+0x70]
  40512e:	sub    ecx,eax
  405130:	cmp    ecx,0xfffffffc
  405133:	mov    eax,0xfffffffc
  405138:	cmovb  eax,ecx
  40513b:	mov    DWORD PTR [rbx+0x24],eax
  40513e:	mov    rax,QWORD PTR [rbx+0x30]
  405142:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405149:	add    r12,r13
  40514c:	je     405118 <flatcc_builder_vector_push@@Base+0x78>
  40514e:	mov    rdi,r12
  405151:	mov    rsi,r14
  405154:	mov    rdx,r15
  405157:	call   4030a0 <memcpy@plt>
  40515c:	mov    rax,r12
  40515f:	pop    rbx
  405160:	pop    r12
  405162:	pop    r13
  405164:	pop    r14
  405166:	pop    r15
  405168:	ret    
  405169:	lea    rdi,[rip+0x662f]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  405170:	lea    rsi,[rip+0x62eb]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405177:	lea    rcx,[rip+0x664d]        # 40b7cb <flatcc_builder_padding_base@@Base+0x5eb>
  40517e:	mov    edx,0x38b
  405183:	call   403060 <__assert_fail@plt>
  405188:	lea    rdi,[rip+0x667f]        # 40b80e <flatcc_builder_padding_base@@Base+0x62e>
  40518f:	lea    rsi,[rip+0x62cc]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405196:	lea    rcx,[rip+0x662e]        # 40b7cb <flatcc_builder_padding_base@@Base+0x5eb>
  40519d:	mov    edx,0x38c
  4051a2:	call   403060 <__assert_fail@plt>
  4051a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004051b0 <flatcc_builder_append_vector@@Base>:
  4051b0:	push   r15
  4051b2:	push   r14
  4051b4:	push   r13
  4051b6:	push   r12
  4051b8:	push   rbx
  4051b9:	mov    rax,QWORD PTR [rdi+0x30]
  4051bd:	movzx  ecx,WORD PTR [rax+0xe]
  4051c1:	cmp    ecx,0x4
  4051c4:	jne    4052a2 <flatcc_builder_append_vector@@Base+0xf2>
  4051ca:	mov    r15,rdx
  4051cd:	mov    ecx,DWORD PTR [rax+0x14]
  4051d0:	add    ecx,r15d
  4051d3:	jb     405283 <flatcc_builder_append_vector@@Base+0xd3>
  4051d9:	cmp    ecx,DWORD PTR [rax+0x18]
  4051dc:	ja     405283 <flatcc_builder_append_vector@@Base+0xd3>
  4051e2:	mov    r14,rsi
  4051e5:	mov    rbx,rdi
  4051e8:	mov    DWORD PTR [rax+0x14],ecx
  4051eb:	mov    rax,QWORD PTR [rdi+0x30]
  4051ef:	imul   r15d,DWORD PTR [rax+0x10]
  4051f4:	mov    r13d,DWORD PTR [rdi+0x20]
  4051f8:	lea    eax,[r15+r13*1]
  4051fc:	mov    DWORD PTR [rdi+0x20],eax
  4051ff:	cmp    eax,DWORD PTR [rdi+0x24]
  405202:	jae    40520f <flatcc_builder_append_vector@@Base+0x5f>
  405204:	mov    r12,QWORD PTR [rbx+0x18]
  405208:	add    r12,r13
  40520b:	jne    405268 <flatcc_builder_append_vector@@Base+0xb8>
  40520d:	jmp    405232 <flatcc_builder_append_vector@@Base+0x82>
  40520f:	add    eax,0x1
  405212:	lea    rsi,[rbx+0x68]
  405216:	mov    rdi,QWORD PTR [rbx+0x40]
  40521a:	mov    edx,DWORD PTR [rbx+0x28]
  40521d:	add    rdx,rax
  405220:	mov    ecx,0x1
  405225:	mov    r8d,0x1
  40522b:	call   QWORD PTR [rbx+0x50]
  40522e:	test   eax,eax
  405230:	je     405237 <flatcc_builder_append_vector@@Base+0x87>
  405232:	xor    r12d,r12d
  405235:	jmp    405276 <flatcc_builder_append_vector@@Base+0xc6>
  405237:	mov    eax,DWORD PTR [rbx+0x28]
  40523a:	mov    r12,rax
  40523d:	add    r12,QWORD PTR [rbx+0x68]
  405241:	mov    QWORD PTR [rbx+0x18],r12
  405245:	mov    ecx,DWORD PTR [rbx+0x70]
  405248:	sub    ecx,eax
  40524a:	cmp    ecx,0xfffffffc
  40524d:	mov    eax,0xfffffffc
  405252:	cmovb  eax,ecx
  405255:	mov    DWORD PTR [rbx+0x24],eax
  405258:	mov    rax,QWORD PTR [rbx+0x30]
  40525c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405263:	add    r12,r13
  405266:	je     405232 <flatcc_builder_append_vector@@Base+0x82>
  405268:	mov    edx,r15d
  40526b:	mov    rdi,r12
  40526e:	mov    rsi,r14
  405271:	call   4030a0 <memcpy@plt>
  405276:	mov    rax,r12
  405279:	pop    rbx
  40527a:	pop    r12
  40527c:	pop    r13
  40527e:	pop    r14
  405280:	pop    r15
  405282:	ret    
  405283:	lea    rdi,[rip+0x72a1]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  40528a:	lea    rsi,[rip+0x61d1]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405291:	lea    rcx,[rip+0x72ae]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405298:	mov    edx,0x37c
  40529d:	call   403060 <__assert_fail@plt>
  4052a2:	lea    rdi,[rip+0x64f6]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  4052a9:	lea    rsi,[rip+0x61b2]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4052b0:	lea    rcx,[rip+0x6594]        # 40b84b <flatcc_builder_padding_base@@Base+0x66b>
  4052b7:	mov    edx,0x393
  4052bc:	call   403060 <__assert_fail@plt>
  4052c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4052cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004052d0 <flatcc_builder_extend_offset_vector@@Base>:
  4052d0:	push   r14
  4052d2:	push   rbx
  4052d3:	push   rax
  4052d4:	mov    rax,QWORD PTR [rdi+0x30]
  4052d8:	mov    ecx,DWORD PTR [rax+0x14]
  4052db:	add    ecx,esi
  4052dd:	jb     405365 <flatcc_builder_extend_offset_vector@@Base+0x95>
  4052e3:	cmp    ecx,0x40000000
  4052e9:	jae    405365 <flatcc_builder_extend_offset_vector@@Base+0x95>
  4052eb:	mov    rbx,rdi
  4052ee:	mov    DWORD PTR [rax+0x14],ecx
  4052f1:	mov    r14d,DWORD PTR [rdi+0x20]
  4052f5:	lea    eax,[r14+rsi*4]
  4052f9:	mov    DWORD PTR [rdi+0x20],eax
  4052fc:	cmp    eax,DWORD PTR [rdi+0x24]
  4052ff:	jae    405307 <flatcc_builder_extend_offset_vector@@Base+0x37>
  405301:	mov    rax,QWORD PTR [rbx+0x18]
  405305:	jmp    40535a <flatcc_builder_extend_offset_vector@@Base+0x8a>
  405307:	add    eax,0x1
  40530a:	lea    rsi,[rbx+0x68]
  40530e:	mov    rdi,QWORD PTR [rbx+0x40]
  405312:	mov    edx,DWORD PTR [rbx+0x28]
  405315:	add    rdx,rax
  405318:	mov    ecx,0x1
  40531d:	mov    r8d,0x1
  405323:	call   QWORD PTR [rbx+0x50]
  405326:	test   eax,eax
  405328:	je     40532e <flatcc_builder_extend_offset_vector@@Base+0x5e>
  40532a:	xor    eax,eax
  40532c:	jmp    40535d <flatcc_builder_extend_offset_vector@@Base+0x8d>
  40532e:	mov    ecx,DWORD PTR [rbx+0x28]
  405331:	mov    rax,rcx
  405334:	add    rax,QWORD PTR [rbx+0x68]
  405338:	mov    QWORD PTR [rbx+0x18],rax
  40533c:	mov    edx,DWORD PTR [rbx+0x70]
  40533f:	sub    edx,ecx
  405341:	cmp    edx,0xfffffffc
  405344:	mov    ecx,0xfffffffc
  405349:	cmovb  ecx,edx
  40534c:	mov    DWORD PTR [rbx+0x24],ecx
  40534f:	mov    rcx,QWORD PTR [rbx+0x30]
  405353:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40535a:	add    rax,r14
  40535d:	add    rsp,0x8
  405361:	pop    rbx
  405362:	pop    r14
  405364:	ret    
  405365:	lea    rdi,[rip+0x71bf]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  40536c:	lea    rsi,[rip+0x60ef]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405373:	lea    rcx,[rip+0x71cc]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  40537a:	mov    edx,0x37c
  40537f:	call   403060 <__assert_fail@plt>
  405384:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40538e:	xchg   ax,ax

0000000000405390 <flatcc_builder_offset_vector_push@@Base>:
  405390:	push   rbp
  405391:	push   r14
  405393:	push   rbx
  405394:	mov    rax,QWORD PTR [rdi+0x30]
  405398:	movzx  ecx,WORD PTR [rax+0xe]
  40539c:	cmp    ecx,0x5
  40539f:	jne    405435 <flatcc_builder_offset_vector_push@@Base+0xa5>
  4053a5:	mov    ecx,DWORD PTR [rax+0x14]
  4053a8:	cmp    ecx,0x3fffffff
  4053ae:	je     4053f8 <flatcc_builder_offset_vector_push@@Base+0x68>
  4053b0:	mov    r14d,esi
  4053b3:	mov    rbx,rdi
  4053b6:	add    ecx,0x1
  4053b9:	mov    DWORD PTR [rax+0x14],ecx
  4053bc:	mov    ebp,DWORD PTR [rdi+0x20]
  4053bf:	lea    eax,[rbp+0x4]
  4053c2:	mov    DWORD PTR [rdi+0x20],eax
  4053c5:	cmp    eax,DWORD PTR [rdi+0x24]
  4053c8:	jae    4053d5 <flatcc_builder_offset_vector_push@@Base+0x45>
  4053ca:	mov    rax,QWORD PTR [rbx+0x18]
  4053ce:	add    rax,rbp
  4053d1:	jne    40542d <flatcc_builder_offset_vector_push@@Base+0x9d>
  4053d3:	jmp    4053f8 <flatcc_builder_offset_vector_push@@Base+0x68>
  4053d5:	lea    eax,[rbp+0x5]
  4053d8:	lea    rsi,[rbx+0x68]
  4053dc:	mov    rdi,QWORD PTR [rbx+0x40]
  4053e0:	mov    edx,DWORD PTR [rbx+0x28]
  4053e3:	add    rdx,rax
  4053e6:	mov    ecx,0x1
  4053eb:	mov    r8d,0x1
  4053f1:	call   QWORD PTR [rbx+0x50]
  4053f4:	test   eax,eax
  4053f6:	je     4053fc <flatcc_builder_offset_vector_push@@Base+0x6c>
  4053f8:	xor    eax,eax
  4053fa:	jmp    405430 <flatcc_builder_offset_vector_push@@Base+0xa0>
  4053fc:	mov    ecx,DWORD PTR [rbx+0x28]
  4053ff:	mov    rax,rcx
  405402:	add    rax,QWORD PTR [rbx+0x68]
  405406:	mov    QWORD PTR [rbx+0x18],rax
  40540a:	mov    edx,DWORD PTR [rbx+0x70]
  40540d:	sub    edx,ecx
  40540f:	cmp    edx,0xfffffffc
  405412:	mov    ecx,0xfffffffc
  405417:	cmovb  ecx,edx
  40541a:	mov    DWORD PTR [rbx+0x24],ecx
  40541d:	mov    rcx,QWORD PTR [rbx+0x30]
  405421:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405428:	add    rax,rbp
  40542b:	je     4053f8 <flatcc_builder_offset_vector_push@@Base+0x68>
  40542d:	mov    DWORD PTR [rax],r14d
  405430:	pop    rbx
  405431:	pop    r14
  405433:	pop    rbp
  405434:	ret    
  405435:	lea    rdi,[rip+0x645c]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  40543c:	lea    rsi,[rip+0x601f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405443:	lea    rcx,[rip+0x6481]        # 40b8cb <flatcc_builder_padding_base@@Base+0x6eb>
  40544a:	mov    edx,0x3a6
  40544f:	call   403060 <__assert_fail@plt>
  405454:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40545e:	xchg   ax,ax

0000000000405460 <flatcc_builder_append_offset_vector@@Base>:
  405460:	push   r15
  405462:	push   r14
  405464:	push   r13
  405466:	push   r12
  405468:	push   rbx
  405469:	mov    rax,QWORD PTR [rdi+0x30]
  40546d:	movzx  ecx,WORD PTR [rax+0xe]
  405471:	cmp    ecx,0x5
  405474:	jne    405551 <flatcc_builder_append_offset_vector@@Base+0xf1>
  40547a:	mov    r15,rdx
  40547d:	mov    ecx,DWORD PTR [rax+0x14]
  405480:	add    ecx,r15d
  405483:	jb     405532 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405489:	cmp    ecx,0x40000000
  40548f:	jae    405532 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405495:	mov    r14,rsi
  405498:	mov    rbx,rdi
  40549b:	mov    DWORD PTR [rax+0x14],ecx
  40549e:	mov    r13d,DWORD PTR [rdi+0x20]
  4054a2:	lea    eax,[r13+r15*4+0x0]
  4054a7:	mov    DWORD PTR [rdi+0x20],eax
  4054aa:	cmp    eax,DWORD PTR [rdi+0x24]
  4054ad:	jae    4054ba <flatcc_builder_append_offset_vector@@Base+0x5a>
  4054af:	mov    r12,QWORD PTR [rbx+0x18]
  4054b3:	add    r12,r13
  4054b6:	jne    405513 <flatcc_builder_append_offset_vector@@Base+0xb3>
  4054b8:	jmp    4054dd <flatcc_builder_append_offset_vector@@Base+0x7d>
  4054ba:	add    eax,0x1
  4054bd:	lea    rsi,[rbx+0x68]
  4054c1:	mov    rdi,QWORD PTR [rbx+0x40]
  4054c5:	mov    edx,DWORD PTR [rbx+0x28]
  4054c8:	add    rdx,rax
  4054cb:	mov    ecx,0x1
  4054d0:	mov    r8d,0x1
  4054d6:	call   QWORD PTR [rbx+0x50]
  4054d9:	test   eax,eax
  4054db:	je     4054e2 <flatcc_builder_append_offset_vector@@Base+0x82>
  4054dd:	xor    r12d,r12d
  4054e0:	jmp    405525 <flatcc_builder_append_offset_vector@@Base+0xc5>
  4054e2:	mov    eax,DWORD PTR [rbx+0x28]
  4054e5:	mov    r12,rax
  4054e8:	add    r12,QWORD PTR [rbx+0x68]
  4054ec:	mov    QWORD PTR [rbx+0x18],r12
  4054f0:	mov    ecx,DWORD PTR [rbx+0x70]
  4054f3:	sub    ecx,eax
  4054f5:	cmp    ecx,0xfffffffc
  4054f8:	mov    eax,0xfffffffc
  4054fd:	cmovb  eax,ecx
  405500:	mov    DWORD PTR [rbx+0x24],eax
  405503:	mov    rax,QWORD PTR [rbx+0x30]
  405507:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40550e:	add    r12,r13
  405511:	je     4054dd <flatcc_builder_append_offset_vector@@Base+0x7d>
  405513:	shl    r15d,0x2
  405517:	mov    edx,r15d
  40551a:	mov    rdi,r12
  40551d:	mov    rsi,r14
  405520:	call   4030a0 <memcpy@plt>
  405525:	mov    rax,r12
  405528:	pop    rbx
  405529:	pop    r12
  40552b:	pop    r13
  40552d:	pop    r14
  40552f:	pop    r15
  405531:	ret    
  405532:	lea    rdi,[rip+0x6ff2]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405539:	lea    rsi,[rip+0x5f22]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405540:	lea    rcx,[rip+0x6fff]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405547:	mov    edx,0x37c
  40554c:	call   403060 <__assert_fail@plt>
  405551:	lea    rdi,[rip+0x6340]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405558:	lea    rsi,[rip+0x5f03]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40555f:	lea    rcx,[rip+0x63c7]        # 40b92d <flatcc_builder_padding_base@@Base+0x74d>
  405566:	mov    edx,0x3b4
  40556b:	call   403060 <__assert_fail@plt>

0000000000405570 <flatcc_builder_extend_string@@Base>:
  405570:	push   r14
  405572:	push   rbx
  405573:	push   rax
  405574:	mov    rax,QWORD PTR [rdi+0x30]
  405578:	movzx  ecx,WORD PTR [rax+0xe]
  40557c:	cmp    ecx,0x6
  40557f:	jne    40560c <flatcc_builder_extend_string@@Base+0x9c>
  405585:	mov    ecx,DWORD PTR [rax+0x14]
  405588:	add    ecx,esi
  40558a:	jb     40562b <flatcc_builder_extend_string@@Base+0xbb>
  405590:	mov    rbx,rdi
  405593:	mov    DWORD PTR [rax+0x14],ecx
  405596:	mov    r14d,DWORD PTR [rdi+0x20]
  40559a:	add    esi,r14d
  40559d:	mov    DWORD PTR [rdi+0x20],esi
  4055a0:	cmp    esi,DWORD PTR [rdi+0x24]
  4055a3:	jae    4055ab <flatcc_builder_extend_string@@Base+0x3b>
  4055a5:	mov    rax,QWORD PTR [rbx+0x18]
  4055a9:	jmp    405601 <flatcc_builder_extend_string@@Base+0x91>
  4055ab:	add    esi,0x1
  4055ae:	lea    rax,[rbx+0x68]
  4055b2:	mov    rdi,QWORD PTR [rbx+0x40]
  4055b6:	mov    edx,DWORD PTR [rbx+0x28]
  4055b9:	add    rdx,rsi
  4055bc:	mov    ecx,0x1
  4055c1:	mov    r8d,0x1
  4055c7:	mov    rsi,rax
  4055ca:	call   QWORD PTR [rbx+0x50]
  4055cd:	test   eax,eax
  4055cf:	je     4055d5 <flatcc_builder_extend_string@@Base+0x65>
  4055d1:	xor    eax,eax
  4055d3:	jmp    405604 <flatcc_builder_extend_string@@Base+0x94>
  4055d5:	mov    ecx,DWORD PTR [rbx+0x28]
  4055d8:	mov    rax,rcx
  4055db:	add    rax,QWORD PTR [rbx+0x68]
  4055df:	mov    QWORD PTR [rbx+0x18],rax
  4055e3:	mov    edx,DWORD PTR [rbx+0x70]
  4055e6:	sub    edx,ecx
  4055e8:	cmp    edx,0xfffffffc
  4055eb:	mov    ecx,0xfffffffc
  4055f0:	cmovb  ecx,edx
  4055f3:	mov    DWORD PTR [rbx+0x24],ecx
  4055f6:	mov    rcx,QWORD PTR [rbx+0x30]
  4055fa:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405601:	add    rax,r14
  405604:	add    rsp,0x8
  405608:	pop    rbx
  405609:	pop    r14
  40560b:	ret    
  40560c:	lea    rdi,[rip+0x638e]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  405613:	lea    rsi,[rip+0x5e48]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40561a:	lea    rcx,[rip+0x63ac]        # 40b9cd <flatcc_builder_padding_base@@Base+0x7ed>
  405621:	mov    edx,0x3bd
  405626:	call   403060 <__assert_fail@plt>
  40562b:	lea    rdi,[rip+0x6ef9]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405632:	lea    rsi,[rip+0x5e29]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405639:	lea    rcx,[rip+0x6f06]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405640:	mov    edx,0x37c
  405645:	call   403060 <__assert_fail@plt>
  40564a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405650 <flatcc_builder_append_string@@Base>:
  405650:	push   r15
  405652:	push   r14
  405654:	push   r13
  405656:	push   r12
  405658:	push   rbx
  405659:	mov    rax,QWORD PTR [rdi+0x30]
  40565d:	movzx  ecx,WORD PTR [rax+0xe]
  405661:	cmp    ecx,0x6
  405664:	jne    405711 <flatcc_builder_append_string@@Base+0xc1>
  40566a:	mov    r15,rdx
  40566d:	mov    ecx,DWORD PTR [rax+0x14]
  405670:	add    ecx,r15d
  405673:	jb     405730 <flatcc_builder_append_string@@Base+0xe0>
  405679:	mov    r14,rsi
  40567c:	mov    rbx,rdi
  40567f:	mov    DWORD PTR [rax+0x14],ecx
  405682:	mov    r13d,DWORD PTR [rdi+0x20]
  405686:	lea    eax,[r15+r13*1]
  40568a:	mov    DWORD PTR [rdi+0x20],eax
  40568d:	cmp    eax,DWORD PTR [rdi+0x24]
  405690:	jae    40569d <flatcc_builder_append_string@@Base+0x4d>
  405692:	mov    r12,QWORD PTR [rbx+0x18]
  405696:	add    r12,r13
  405699:	jne    4056f6 <flatcc_builder_append_string@@Base+0xa6>
  40569b:	jmp    4056c0 <flatcc_builder_append_string@@Base+0x70>
  40569d:	add    eax,0x1
  4056a0:	lea    rsi,[rbx+0x68]
  4056a4:	mov    rdi,QWORD PTR [rbx+0x40]
  4056a8:	mov    edx,DWORD PTR [rbx+0x28]
  4056ab:	add    rdx,rax
  4056ae:	mov    ecx,0x1
  4056b3:	mov    r8d,0x1
  4056b9:	call   QWORD PTR [rbx+0x50]
  4056bc:	test   eax,eax
  4056be:	je     4056c5 <flatcc_builder_append_string@@Base+0x75>
  4056c0:	xor    r12d,r12d
  4056c3:	jmp    405704 <flatcc_builder_append_string@@Base+0xb4>
  4056c5:	mov    eax,DWORD PTR [rbx+0x28]
  4056c8:	mov    r12,rax
  4056cb:	add    r12,QWORD PTR [rbx+0x68]
  4056cf:	mov    QWORD PTR [rbx+0x18],r12
  4056d3:	mov    ecx,DWORD PTR [rbx+0x70]
  4056d6:	sub    ecx,eax
  4056d8:	cmp    ecx,0xfffffffc
  4056db:	mov    eax,0xfffffffc
  4056e0:	cmovb  eax,ecx
  4056e3:	mov    DWORD PTR [rbx+0x24],eax
  4056e6:	mov    rax,QWORD PTR [rbx+0x30]
  4056ea:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4056f1:	add    r12,r13
  4056f4:	je     4056c0 <flatcc_builder_append_string@@Base+0x70>
  4056f6:	mov    edx,r15d
  4056f9:	mov    rdi,r12
  4056fc:	mov    rsi,r14
  4056ff:	call   4030a0 <memcpy@plt>
  405704:	mov    rax,r12
  405707:	pop    rbx
  405708:	pop    r12
  40570a:	pop    r13
  40570c:	pop    r14
  40570e:	pop    r15
  405710:	ret    
  405711:	lea    rdi,[rip+0x6289]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  405718:	lea    rsi,[rip+0x5d43]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40571f:	lea    rcx,[rip+0x62e6]        # 40ba0c <flatcc_builder_padding_base@@Base+0x82c>
  405726:	mov    edx,0x3c6
  40572b:	call   403060 <__assert_fail@plt>
  405730:	lea    rdi,[rip+0x6df4]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405737:	lea    rsi,[rip+0x5d24]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40573e:	lea    rcx,[rip+0x6e01]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405745:	mov    edx,0x37c
  40574a:	call   403060 <__assert_fail@plt>
  40574f:	nop

0000000000405750 <flatcc_builder_append_string_str@@Base>:
  405750:	push   r14
  405752:	push   rbx
  405753:	push   rax
  405754:	mov    rbx,rsi
  405757:	mov    r14,rdi
  40575a:	mov    rdi,rsi
  40575d:	call   403050 <strlen@plt>
  405762:	mov    rdi,r14
  405765:	mov    rsi,rbx
  405768:	mov    rdx,rax
  40576b:	add    rsp,0x8
  40576f:	pop    rbx
  405770:	pop    r14
  405772:	jmp    405650 <flatcc_builder_append_string@@Base>
  405777:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405780 <flatcc_builder_append_string_strn@@Base>:
  405780:	push   r15
  405782:	push   r14
  405784:	push   rbx
  405785:	mov    rbx,rdx
  405788:	mov    r14,rsi
  40578b:	mov    r15,rdi
  40578e:	xor    esi,esi
  405790:	mov    rdi,r14
  405793:	call   403080 <memchr@plt>
  405798:	mov    rcx,rax
  40579b:	sub    rcx,r14
  40579e:	test   rax,rax
  4057a1:	cmovne rbx,rcx
  4057a5:	mov    rdi,r15
  4057a8:	mov    rsi,r14
  4057ab:	mov    rdx,rbx
  4057ae:	pop    rbx
  4057af:	pop    r14
  4057b1:	pop    r15
  4057b3:	jmp    405650 <flatcc_builder_append_string@@Base>
  4057b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004057c0 <flatcc_builder_truncate_vector@@Base>:
  4057c0:	push   rax
  4057c1:	mov    rcx,QWORD PTR [rdi+0x30]
  4057c5:	movzx  edx,WORD PTR [rcx+0xe]
  4057c9:	cmp    edx,0x4
  4057cc:	jne    405803 <flatcc_builder_truncate_vector@@Base+0x43>
  4057ce:	mov    rax,rsi
  4057d1:	mov    edx,DWORD PTR [rcx+0x14]
  4057d4:	cmp    rdx,rsi
  4057d7:	jb     405822 <flatcc_builder_truncate_vector@@Base+0x62>
  4057d9:	sub    edx,eax
  4057db:	mov    DWORD PTR [rcx+0x14],edx
  4057de:	mov    rcx,QWORD PTR [rdi+0x30]
  4057e2:	imul   eax,DWORD PTR [rcx+0x10]
  4057e6:	mov    ecx,DWORD PTR [rdi+0x20]
  4057e9:	sub    ecx,eax
  4057eb:	mov    DWORD PTR [rdi+0x20],ecx
  4057ee:	add    rcx,QWORD PTR [rdi+0x18]
  4057f2:	xor    esi,esi
  4057f4:	mov    rdi,rcx
  4057f7:	mov    rdx,rax
  4057fa:	call   403070 <memset@plt>
  4057ff:	xor    eax,eax
  405801:	pop    rcx
  405802:	ret    
  405803:	lea    rdi,[rip+0x5f95]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  40580a:	lea    rsi,[rip+0x5c51]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405811:	lea    rcx,[rip+0x6241]        # 40ba59 <flatcc_builder_padding_base@@Base+0x879>
  405818:	mov    edx,0x3d9
  40581d:	call   403060 <__assert_fail@plt>
  405822:	lea    rdi,[rip+0x626f]        # 40ba98 <flatcc_builder_padding_base@@Base+0x8b8>
  405829:	lea    rsi,[rip+0x5c32]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405830:	lea    rcx,[rip+0x6222]        # 40ba59 <flatcc_builder_padding_base@@Base+0x879>
  405837:	mov    edx,0x3da
  40583c:	call   403060 <__assert_fail@plt>
  405841:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40584b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405850 <flatcc_builder_truncate_offset_vector@@Base>:
  405850:	push   rax
  405851:	mov    rcx,QWORD PTR [rdi+0x30]
  405855:	movzx  edx,WORD PTR [rcx+0xe]
  405859:	cmp    edx,0x5
  40585c:	jne    405890 <flatcc_builder_truncate_offset_vector@@Base+0x40>
  40585e:	mov    rax,rsi
  405861:	mov    edx,DWORD PTR [rcx+0x14]
  405864:	sub    edx,eax
  405866:	jb     4058af <flatcc_builder_truncate_offset_vector@@Base+0x5f>
  405868:	mov    DWORD PTR [rcx+0x14],edx
  40586b:	mov    rcx,QWORD PTR [rdi+0x30]
  40586f:	imul   eax,DWORD PTR [rcx+0x10]
  405873:	mov    ecx,DWORD PTR [rdi+0x20]
  405876:	sub    ecx,eax
  405878:	mov    DWORD PTR [rdi+0x20],ecx
  40587b:	add    rcx,QWORD PTR [rdi+0x18]
  40587f:	xor    esi,esi
  405881:	mov    rdi,rcx
  405884:	mov    rdx,rax
  405887:	call   403070 <memset@plt>
  40588c:	xor    eax,eax
  40588e:	pop    rcx
  40588f:	ret    
  405890:	lea    rdi,[rip+0x6001]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405897:	lea    rsi,[rip+0x5bc4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40589e:	lea    rcx,[rip+0x6217]        # 40babc <flatcc_builder_padding_base@@Base+0x8dc>
  4058a5:	mov    edx,0x3e2
  4058aa:	call   403060 <__assert_fail@plt>
  4058af:	lea    rdi,[rip+0x624c]        # 40bb02 <flatcc_builder_padding_base@@Base+0x922>
  4058b6:	lea    rsi,[rip+0x5ba5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4058bd:	lea    rcx,[rip+0x61f8]        # 40babc <flatcc_builder_padding_base@@Base+0x8dc>
  4058c4:	mov    edx,0x3e3
  4058c9:	call   403060 <__assert_fail@plt>
  4058ce:	xchg   ax,ax

00000000004058d0 <flatcc_builder_truncate_string@@Base>:
  4058d0:	push   rax
  4058d1:	mov    rax,QWORD PTR [rdi+0x30]
  4058d5:	movzx  ecx,WORD PTR [rax+0xe]
  4058d9:	cmp    ecx,0x6
  4058dc:	jne    405907 <flatcc_builder_truncate_string@@Base+0x37>
  4058de:	mov    ecx,DWORD PTR [rax+0x14]
  4058e1:	cmp    rcx,rsi
  4058e4:	jb     405926 <flatcc_builder_truncate_string@@Base+0x56>
  4058e6:	sub    ecx,esi
  4058e8:	mov    DWORD PTR [rax+0x14],ecx
  4058eb:	mov    eax,DWORD PTR [rdi+0x20]
  4058ee:	sub    eax,esi
  4058f0:	mov    DWORD PTR [rdi+0x20],eax
  4058f3:	add    rax,QWORD PTR [rdi+0x18]
  4058f7:	mov    edx,esi
  4058f9:	xor    esi,esi
  4058fb:	mov    rdi,rax
  4058fe:	call   403070 <memset@plt>
  405903:	xor    eax,eax
  405905:	pop    rcx
  405906:	ret    
  405907:	lea    rdi,[rip+0x6093]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  40590e:	lea    rsi,[rip+0x5b4d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405915:	lea    rcx,[rip+0x6221]        # 40bb3d <flatcc_builder_padding_base@@Base+0x95d>
  40591c:	mov    edx,0x3eb
  405921:	call   403060 <__assert_fail@plt>
  405926:	lea    rdi,[rip+0x624f]        # 40bb7c <flatcc_builder_padding_base@@Base+0x99c>
  40592d:	lea    rsi,[rip+0x5b2e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405934:	lea    rcx,[rip+0x6202]        # 40bb3d <flatcc_builder_padding_base@@Base+0x95d>
  40593b:	mov    edx,0x3ec
  405940:	call   403060 <__assert_fail@plt>
  405945:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40594f:	nop

0000000000405950 <flatcc_builder_start_vector@@Base>:
  405950:	push   r15
  405952:	push   r14
  405954:	push   rbx
  405955:	mov    r14,rcx
  405958:	mov    r15,rsi
  40595b:	mov    rbx,rdi
  40595e:	cmp    edx,0x4
  405961:	mov    esi,0x4
  405966:	cmova  esi,edx
  405969:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  40596e:	mov    ecx,eax
  405970:	mov    eax,0xffffffff
  405975:	test   ecx,ecx
  405977:	jne    4059c5 <flatcc_builder_start_vector@@Base+0x75>
  405979:	mov    rax,QWORD PTR [rbx+0x30]
  40597d:	mov    DWORD PTR [rax+0x10],r15d
  405981:	mov    rax,QWORD PTR [rbx+0x30]
  405985:	mov    DWORD PTR [rax+0x14],0x0
  40598c:	mov    rax,QWORD PTR [rbx+0x30]
  405990:	mov    DWORD PTR [rax+0x18],r14d
  405994:	mov    rax,QWORD PTR [rbx+0x30]
  405998:	mov    WORD PTR [rax+0xe],0x4
  40599e:	mov    ecx,DWORD PTR [rbx+0x28]
  4059a1:	mov    edx,DWORD PTR [rbx+0x70]
  4059a4:	sub    edx,ecx
  4059a6:	add    rcx,QWORD PTR [rbx+0x68]
  4059aa:	mov    QWORD PTR [rbx+0x18],rcx
  4059ae:	cmp    edx,0xfffffffc
  4059b1:	mov    ecx,0xfffffffc
  4059b6:	cmovb  ecx,edx
  4059b9:	mov    DWORD PTR [rbx+0x24],ecx
  4059bc:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4059c3:	xor    eax,eax
  4059c5:	pop    rbx
  4059c6:	pop    r14
  4059c8:	pop    r15
  4059ca:	ret    
  4059cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004059d0 <flatcc_builder_start_offset_vector@@Base>:
  4059d0:	push   rbx
  4059d1:	mov    rbx,rdi
  4059d4:	mov    esi,0x4
  4059d9:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  4059de:	mov    ecx,eax
  4059e0:	mov    eax,0xffffffff
  4059e5:	test   ecx,ecx
  4059e7:	je     4059eb <flatcc_builder_start_offset_vector@@Base+0x1b>
  4059e9:	pop    rbx
  4059ea:	ret    
  4059eb:	mov    rax,QWORD PTR [rbx+0x30]
  4059ef:	mov    DWORD PTR [rax+0x10],0x4
  4059f6:	mov    rax,QWORD PTR [rbx+0x30]
  4059fa:	mov    DWORD PTR [rax+0x14],0x0
  405a01:	mov    rax,QWORD PTR [rbx+0x30]
  405a05:	mov    WORD PTR [rax+0xe],0x5
  405a0b:	mov    ecx,DWORD PTR [rbx+0x28]
  405a0e:	mov    edx,DWORD PTR [rbx+0x70]
  405a11:	sub    edx,ecx
  405a13:	add    rcx,QWORD PTR [rbx+0x68]
  405a17:	mov    QWORD PTR [rbx+0x18],rcx
  405a1b:	cmp    edx,0xfffffffc
  405a1e:	mov    ecx,0xfffffffc
  405a23:	cmovb  ecx,edx
  405a26:	mov    DWORD PTR [rbx+0x24],ecx
  405a29:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a30:	xor    eax,eax
  405a32:	pop    rbx
  405a33:	ret    
  405a34:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a3e:	xchg   ax,ax

0000000000405a40 <flatcc_builder_create_offset_vector@@Base>:
  405a40:	push   r15
  405a42:	push   r14
  405a44:	push   r12
  405a46:	push   rbx
  405a47:	push   rax
  405a48:	mov    r14,rdx
  405a4b:	mov    r15,rsi
  405a4e:	mov    rbx,rdi
  405a51:	mov    esi,0x4
  405a56:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  405a5b:	test   eax,eax
  405a5d:	je     405a6d <flatcc_builder_create_offset_vector@@Base+0x2d>
  405a5f:	xor    eax,eax
  405a61:	add    rsp,0x8
  405a65:	pop    rbx
  405a66:	pop    r12
  405a68:	pop    r14
  405a6a:	pop    r15
  405a6c:	ret    
  405a6d:	mov    rax,QWORD PTR [rbx+0x30]
  405a71:	mov    DWORD PTR [rax+0x10],0x4
  405a78:	mov    rax,QWORD PTR [rbx+0x30]
  405a7c:	mov    DWORD PTR [rax+0x14],0x0
  405a83:	mov    rax,QWORD PTR [rbx+0x30]
  405a87:	mov    WORD PTR [rax+0xe],0x5
  405a8d:	mov    ecx,DWORD PTR [rbx+0x28]
  405a90:	mov    edx,DWORD PTR [rbx+0x70]
  405a93:	sub    edx,ecx
  405a95:	add    rcx,QWORD PTR [rbx+0x68]
  405a99:	mov    QWORD PTR [rbx+0x18],rcx
  405a9d:	cmp    edx,0xfffffffc
  405aa0:	mov    ecx,0xfffffffc
  405aa5:	cmovb  ecx,edx
  405aa8:	mov    DWORD PTR [rbx+0x24],ecx
  405aab:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405ab2:	mov    ecx,DWORD PTR [rax+0x14]
  405ab5:	add    ecx,r14d
  405ab8:	jb     405b69 <flatcc_builder_create_offset_vector@@Base+0x129>
  405abe:	cmp    ecx,0x40000000
  405ac4:	jae    405b69 <flatcc_builder_create_offset_vector@@Base+0x129>
  405aca:	mov    DWORD PTR [rax+0x14],ecx
  405acd:	mov    r12d,DWORD PTR [rbx+0x20]
  405ad1:	lea    eax,[r12+r14*4]
  405ad5:	mov    DWORD PTR [rbx+0x20],eax
  405ad8:	cmp    eax,DWORD PTR [rbx+0x24]
  405adb:	jae    405aeb <flatcc_builder_create_offset_vector@@Base+0xab>
  405add:	mov    rdi,QWORD PTR [rbx+0x18]
  405ae1:	add    rdi,r12
  405ae4:	jne    405b47 <flatcc_builder_create_offset_vector@@Base+0x107>
  405ae6:	jmp    405a5f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405aeb:	add    eax,0x1
  405aee:	lea    rsi,[rbx+0x68]
  405af2:	mov    rdi,QWORD PTR [rbx+0x40]
  405af6:	mov    edx,DWORD PTR [rbx+0x28]
  405af9:	add    rdx,rax
  405afc:	mov    ecx,0x1
  405b01:	mov    r8d,0x1
  405b07:	call   QWORD PTR [rbx+0x50]
  405b0a:	test   eax,eax
  405b0c:	jne    405a5f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405b12:	mov    eax,DWORD PTR [rbx+0x28]
  405b15:	mov    rdi,rax
  405b18:	add    rdi,QWORD PTR [rbx+0x68]
  405b1c:	mov    QWORD PTR [rbx+0x18],rdi
  405b20:	mov    ecx,DWORD PTR [rbx+0x70]
  405b23:	sub    ecx,eax
  405b25:	cmp    ecx,0xfffffffc
  405b28:	mov    eax,0xfffffffc
  405b2d:	cmovb  eax,ecx
  405b30:	mov    DWORD PTR [rbx+0x24],eax
  405b33:	mov    rax,QWORD PTR [rbx+0x30]
  405b37:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405b3e:	add    rdi,r12
  405b41:	je     405a5f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405b47:	shl    r14,0x2
  405b4b:	mov    rsi,r15
  405b4e:	mov    rdx,r14
  405b51:	call   4030a0 <memcpy@plt>
  405b56:	mov    rdi,rbx
  405b59:	add    rsp,0x8
  405b5d:	pop    rbx
  405b5e:	pop    r12
  405b60:	pop    r14
  405b62:	pop    r15
  405b64:	jmp    405b90 <flatcc_builder_end_offset_vector@@Base>
  405b69:	lea    rdi,[rip+0x69bb]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  405b70:	lea    rsi,[rip+0x58eb]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405b77:	lea    rcx,[rip+0x69c8]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  405b7e:	mov    edx,0x37c
  405b83:	call   403060 <__assert_fail@plt>
  405b88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405b90 <flatcc_builder_end_offset_vector@@Base>:
  405b90:	push   rbp
  405b91:	push   rbx
  405b92:	push   rax
  405b93:	mov    rax,QWORD PTR [rdi+0x30]
  405b97:	movzx  ecx,WORD PTR [rax+0xe]
  405b9b:	cmp    ecx,0x5
  405b9e:	jne    405c2d <flatcc_builder_end_offset_vector@@Base+0x9d>
  405ba4:	mov    rbx,rdi
  405ba7:	mov    rsi,QWORD PTR [rdi+0x18]
  405bab:	mov    edx,DWORD PTR [rax+0x14]
  405bae:	xor    ecx,ecx
  405bb0:	call   406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405bb5:	mov    ebp,eax
  405bb7:	test   eax,eax
  405bb9:	je     405c24 <flatcc_builder_end_offset_vector@@Base+0x94>
  405bbb:	mov    rdi,QWORD PTR [rbx+0x18]
  405bbf:	mov    edx,DWORD PTR [rbx+0x20]
  405bc2:	xor    esi,esi
  405bc4:	call   403070 <memset@plt>
  405bc9:	mov    rax,QWORD PTR [rbx+0x30]
  405bcd:	mov    ecx,DWORD PTR [rax+0x8]
  405bd0:	mov    DWORD PTR [rbx+0x20],ecx
  405bd3:	mov    ecx,DWORD PTR [rax]
  405bd5:	mov    DWORD PTR [rbx+0x28],ecx
  405bd8:	mov    edx,DWORD PTR [rax+0x4]
  405bdb:	mov    rsi,rcx
  405bde:	add    rsi,QWORD PTR [rbx+0x68]
  405be2:	mov    QWORD PTR [rbx+0x18],rsi
  405be6:	mov    esi,DWORD PTR [rbx+0x70]
  405be9:	sub    esi,ecx
  405beb:	cmp    esi,edx
  405bed:	cmova  esi,edx
  405bf0:	mov    DWORD PTR [rbx+0x24],esi
  405bf3:	movzx  ecx,WORD PTR [rbx+0xea]
  405bfa:	cmp    WORD PTR [rbx+0xe8],cx
  405c01:	jae    405c0a <flatcc_builder_end_offset_vector@@Base+0x7a>
  405c03:	mov    WORD PTR [rbx+0xe8],cx
  405c0a:	movzx  ecx,WORD PTR [rax+0xc]
  405c0e:	mov    WORD PTR [rbx+0xea],cx
  405c15:	add    rax,0xffffffffffffffdc
  405c19:	mov    QWORD PTR [rbx+0x30],rax
  405c1d:	add    DWORD PTR [rbx+0x104],0xffffffff
  405c24:	mov    eax,ebp
  405c26:	add    rsp,0x8
  405c2a:	pop    rbx
  405c2b:	pop    rbp
  405c2c:	ret    
  405c2d:	lea    rdi,[rip+0x5c64]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  405c34:	lea    rsi,[rip+0x5827]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405c3b:	lea    rcx,[rip+0x6285]        # 40bec7 <flatcc_builder_padding_base@@Base+0xce7>
  405c42:	mov    edx,0x5c8
  405c47:	call   403060 <__assert_fail@plt>
  405c4c:	nop    DWORD PTR [rax+0x0]

0000000000405c50 <flatcc_builder_start_string@@Base>:
  405c50:	push   rbx
  405c51:	mov    rbx,rdi
  405c54:	mov    esi,0x1
  405c59:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  405c5e:	mov    ecx,eax
  405c60:	mov    eax,0xffffffff
  405c65:	test   ecx,ecx
  405c67:	je     405c6b <flatcc_builder_start_string@@Base+0x1b>
  405c69:	pop    rbx
  405c6a:	ret    
  405c6b:	mov    rax,QWORD PTR [rbx+0x30]
  405c6f:	mov    DWORD PTR [rax+0x10],0x1
  405c76:	mov    rax,QWORD PTR [rbx+0x30]
  405c7a:	mov    DWORD PTR [rax+0x14],0x0
  405c81:	mov    rax,QWORD PTR [rbx+0x30]
  405c85:	mov    WORD PTR [rax+0xe],0x6
  405c8b:	mov    ecx,DWORD PTR [rbx+0x28]
  405c8e:	mov    edx,DWORD PTR [rbx+0x70]
  405c91:	sub    edx,ecx
  405c93:	add    rcx,QWORD PTR [rbx+0x68]
  405c97:	mov    QWORD PTR [rbx+0x18],rcx
  405c9b:	cmp    edx,0xfffffffc
  405c9e:	mov    ecx,0xfffffffc
  405ca3:	cmovb  ecx,edx
  405ca6:	mov    DWORD PTR [rbx+0x24],ecx
  405ca9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405cb0:	xor    eax,eax
  405cb2:	pop    rbx
  405cb3:	ret    
  405cb4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405cbe:	xchg   ax,ax

0000000000405cc0 <flatcc_builder_reserve_table@@Base>:
  405cc0:	push   r15
  405cc2:	push   r14
  405cc4:	push   rbx
  405cc5:	test   esi,esi
  405cc7:	js     405d74 <flatcc_builder_reserve_table@@Base+0xb4>
  405ccd:	mov    r14d,esi
  405cd0:	mov    r15,rdi
  405cd3:	mov    rax,QWORD PTR [rdi+0x30]
  405cd7:	movzx  ebx,WORD PTR [rax+0x1c]
  405cdb:	add    ebx,ebx
  405cdd:	add    ebx,DWORD PTR [rax+0x10]
  405ce0:	lea    edx,[r14+r14*1]
  405ce4:	add    edx,0x4
  405ce7:	add    rdx,rbx
  405cea:	cmp    rdx,QWORD PTR [rdi+0x60]
  405cee:	jbe    405d0c <flatcc_builder_reserve_table@@Base+0x4c>
  405cf0:	lea    rsi,[r15+0x58]
  405cf4:	mov    rdi,QWORD PTR [r15+0x40]
  405cf8:	mov    ecx,0x1
  405cfd:	xor    r8d,r8d
  405d00:	call   QWORD PTR [r15+0x50]
  405d04:	test   eax,eax
  405d06:	jne    405d93 <flatcc_builder_reserve_table@@Base+0xd3>
  405d0c:	add    rbx,QWORD PTR [r15+0x58]
  405d10:	mov    QWORD PTR [r15+0x8],rbx
  405d14:	je     405d69 <flatcc_builder_reserve_table@@Base+0xa9>
  405d16:	add    r14d,r14d
  405d19:	add    rbx,0x4
  405d1d:	mov    QWORD PTR [r15+0x8],rbx
  405d21:	mov    rax,QWORD PTR [r15+0x30]
  405d25:	mov    ebx,DWORD PTR [rax+0x14]
  405d28:	or     r14d,0x1
  405d2c:	add    r14,rbx
  405d2f:	cmp    r14,QWORD PTR [r15+0x90]
  405d36:	jbe    405d56 <flatcc_builder_reserve_table@@Base+0x96>
  405d38:	lea    rsi,[r15+0x88]
  405d3f:	mov    rdi,QWORD PTR [r15+0x40]
  405d43:	xor    ecx,ecx
  405d45:	mov    r8d,0x3
  405d4b:	mov    rdx,r14
  405d4e:	call   QWORD PTR [r15+0x50]
  405d52:	test   eax,eax
  405d54:	jne    405d93 <flatcc_builder_reserve_table@@Base+0xd3>
  405d56:	xor    eax,eax
  405d58:	add    rbx,QWORD PTR [r15+0x88]
  405d5f:	mov    QWORD PTR [r15],rbx
  405d62:	sete   al
  405d65:	neg    eax
  405d67:	jmp    405d6e <flatcc_builder_reserve_table@@Base+0xae>
  405d69:	mov    eax,0xffffffff
  405d6e:	pop    rbx
  405d6f:	pop    r14
  405d71:	pop    r15
  405d73:	ret    
  405d74:	lea    rdi,[rip+0x5e64]        # 40bbdf <flatcc_builder_padding_base@@Base+0x9ff>
  405d7b:	lea    rsi,[rip+0x56e0]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405d82:	lea    rcx,[rip+0x5e15]        # 40bb9e <flatcc_builder_padding_base@@Base+0x9be>
  405d89:	mov    edx,0x429
  405d8e:	call   403060 <__assert_fail@plt>
  405d93:	lea    rdi,[rip+0x6888]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405d9a:	lea    rsi,[rip+0x56c1]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405da1:	lea    rcx,[rip+0x66b4]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  405da8:	mov    edx,0x134
  405dad:	call   403060 <__assert_fail@plt>
  405db2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405dbc:	nop    DWORD PTR [rax+0x0]

0000000000405dc0 <flatcc_builder_start_table@@Base>:
  405dc0:	push   rbp
  405dc1:	push   r15
  405dc3:	push   r14
  405dc5:	push   rbx
  405dc6:	push   rax
  405dc7:	mov    r15d,esi
  405dca:	mov    rbx,rdi
  405dcd:	mov    esi,0x4
  405dd2:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  405dd7:	mov    r14d,0xffffffff
  405ddd:	test   eax,eax
  405ddf:	je     405def <flatcc_builder_start_table@@Base+0x2f>
  405de1:	mov    eax,r14d
  405de4:	add    rsp,0x8
  405de8:	pop    rbx
  405de9:	pop    r14
  405deb:	pop    r15
  405ded:	pop    rbp
  405dee:	ret    
  405def:	mov    eax,DWORD PTR [rbx+0x8]
  405df2:	sub    eax,DWORD PTR [rbx+0x58]
  405df5:	mov    rcx,QWORD PTR [rbx+0x30]
  405df9:	mov    DWORD PTR [rcx+0x10],eax
  405dfc:	mov    eax,DWORD PTR [rbx]
  405dfe:	sub    eax,DWORD PTR [rbx+0x88]
  405e04:	mov    rcx,QWORD PTR [rbx+0x30]
  405e08:	mov    DWORD PTR [rcx+0x14],eax
  405e0b:	mov    eax,DWORD PTR [rbx+0x14]
  405e0e:	mov    rcx,QWORD PTR [rbx+0x30]
  405e12:	mov    DWORD PTR [rcx+0x18],eax
  405e15:	movzx  eax,WORD PTR [rbx+0x10]
  405e19:	mov    rcx,QWORD PTR [rbx+0x30]
  405e1d:	mov    WORD PTR [rcx+0x1c],ax
  405e21:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405e28:	mov    WORD PTR [rbx+0x10],0x0
  405e2e:	mov    rax,QWORD PTR [rbx+0x30]
  405e32:	mov    WORD PTR [rax+0xe],0x3
  405e38:	movzx  ebp,WORD PTR [rax+0x1c]
  405e3c:	add    ebp,ebp
  405e3e:	add    ebp,DWORD PTR [rax+0x10]
  405e41:	lea    edx,[r15+r15*1]
  405e45:	add    edx,0x4
  405e48:	add    rdx,rbp
  405e4b:	cmp    rdx,QWORD PTR [rbx+0x60]
  405e4f:	jbe    405e6c <flatcc_builder_start_table@@Base+0xac>
  405e51:	lea    rsi,[rbx+0x58]
  405e55:	mov    rdi,QWORD PTR [rbx+0x40]
  405e59:	mov    ecx,0x1
  405e5e:	xor    r8d,r8d
  405e61:	call   QWORD PTR [rbx+0x50]
  405e64:	test   eax,eax
  405e66:	jne    405f00 <flatcc_builder_start_table@@Base+0x140>
  405e6c:	add    rbp,QWORD PTR [rbx+0x58]
  405e70:	mov    QWORD PTR [rbx+0x8],rbp
  405e74:	je     405de1 <flatcc_builder_start_table@@Base+0x21>
  405e7a:	add    r15d,r15d
  405e7d:	add    rbp,0x4
  405e81:	mov    QWORD PTR [rbx+0x8],rbp
  405e85:	mov    rax,QWORD PTR [rbx+0x30]
  405e89:	mov    ebp,DWORD PTR [rax+0x14]
  405e8c:	or     r15d,0x1
  405e90:	add    r15,rbp
  405e93:	cmp    r15,QWORD PTR [rbx+0x90]
  405e9a:	jbe    405eb9 <flatcc_builder_start_table@@Base+0xf9>
  405e9c:	lea    rsi,[rbx+0x88]
  405ea3:	mov    rdi,QWORD PTR [rbx+0x40]
  405ea7:	xor    ecx,ecx
  405ea9:	mov    r8d,0x3
  405eaf:	mov    rdx,r15
  405eb2:	call   QWORD PTR [rbx+0x50]
  405eb5:	test   eax,eax
  405eb7:	jne    405f00 <flatcc_builder_start_table@@Base+0x140>
  405eb9:	add    rbp,QWORD PTR [rbx+0x88]
  405ec0:	mov    QWORD PTR [rbx],rbp
  405ec3:	je     405de1 <flatcc_builder_start_table@@Base+0x21>
  405ec9:	mov    eax,DWORD PTR [rbx+0x28]
  405ecc:	mov    rcx,rax
  405ecf:	add    rcx,QWORD PTR [rbx+0x68]
  405ed3:	mov    QWORD PTR [rbx+0x18],rcx
  405ed7:	mov    ecx,DWORD PTR [rbx+0x70]
  405eda:	sub    ecx,eax
  405edc:	cmp    ecx,0xfffc
  405ee2:	mov    eax,0xfffc
  405ee7:	cmovb  eax,ecx
  405eea:	mov    DWORD PTR [rbx+0x24],eax
  405eed:	mov    rax,QWORD PTR [rbx+0x30]
  405ef1:	mov    DWORD PTR [rax+0x4],0xfffc
  405ef8:	xor    r14d,r14d
  405efb:	jmp    405de1 <flatcc_builder_start_table@@Base+0x21>
  405f00:	lea    rdi,[rip+0x671b]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  405f07:	lea    rsi,[rip+0x5554]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  405f0e:	lea    rcx,[rip+0x6547]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  405f15:	mov    edx,0x134
  405f1a:	call   403060 <__assert_fail@plt>
  405f1f:	nop

0000000000405f20 <flatcc_builder_create_vtable@@Base>:
  405f20:	push   r14
  405f22:	push   rbx
  405f23:	sub    rsp,0x98
  405f2a:	mov    r14,rdi
  405f2d:	mov    QWORD PTR [rsp+0x8],0x0
  405f36:	mov    DWORD PTR [rsp+0x10],0x0
  405f3e:	test   dx,dx
  405f41:	je     405fa7 <flatcc_builder_create_vtable@@Base+0x87>
  405f43:	movzx  r8d,dx
  405f47:	mov    QWORD PTR [rsp+0x8],r8
  405f4c:	mov    QWORD PTR [rsp+0x18],rsi
  405f51:	mov    QWORD PTR [rsp+0x20],r8
  405f56:	mov    DWORD PTR [rsp+0x10],0x1
  405f5e:	mov    edx,0x1
  405f63:	cmp    DWORD PTR [r14+0x100],0x0
  405f6b:	jne    405fb6 <flatcc_builder_create_vtable@@Base+0x96>
  405f6d:	cmp    DWORD PTR [r14+0x124],0x0
  405f75:	jne    405fb6 <flatcc_builder_create_vtable@@Base+0x96>
  405f77:	mov    ebx,DWORD PTR [r14+0xf4]
  405f7e:	lea    eax,[r8+rbx*1]
  405f82:	mov    DWORD PTR [r14+0xf4],eax
  405f89:	mov    rdi,QWORD PTR [r14+0x38]
  405f8d:	lea    rsi,[rsp+0x18]
  405f92:	mov    ecx,ebx
  405f94:	call   QWORD PTR [r14+0x48]
  405f98:	test   eax,eax
  405f9a:	jne    40604b <flatcc_builder_create_vtable@@Base+0x12b>
  405fa0:	add    ebx,0x1
  405fa3:	jne    406000 <flatcc_builder_create_vtable@@Base+0xe0>
  405fa5:	jmp    405ffe <flatcc_builder_create_vtable@@Base+0xde>
  405fa7:	xor    edx,edx
  405fa9:	xor    r8d,r8d
  405fac:	cmp    DWORD PTR [r14+0x100],0x0
  405fb4:	je     405f6d <flatcc_builder_create_vtable@@Base+0x4d>
  405fb6:	cmp    r8,0x11
  405fba:	setb   al
  405fbd:	lea    rcx,[r8-0x10]
  405fc1:	shr    rcx,0x20
  405fc5:	sete   cl
  405fc8:	test   r8d,r8d
  405fcb:	je     40600d <flatcc_builder_create_vtable@@Base+0xed>
  405fcd:	or     al,cl
  405fcf:	je     40600d <flatcc_builder_create_vtable@@Base+0xed>
  405fd1:	mov    ebx,DWORD PTR [r14+0xf0]
  405fd8:	sub    ebx,r8d
  405fdb:	mov    rdi,QWORD PTR [r14+0x38]
  405fdf:	lea    rsi,[rsp+0x18]
  405fe4:	mov    ecx,ebx
  405fe6:	call   QWORD PTR [r14+0x48]
  405fea:	test   eax,eax
  405fec:	jne    40602c <flatcc_builder_create_vtable@@Base+0x10c>
  405fee:	mov    DWORD PTR [r14+0xf0],ebx
  405ff5:	test   ebx,ebx
  405ff7:	je     405ffe <flatcc_builder_create_vtable@@Base+0xde>
  405ff9:	add    ebx,0x1
  405ffc:	jmp    406000 <flatcc_builder_create_vtable@@Base+0xe0>
  405ffe:	xor    ebx,ebx
  406000:	mov    eax,ebx
  406002:	add    rsp,0x98
  406009:	pop    rbx
  40600a:	pop    r14
  40600c:	ret    
  40600d:	lea    rdi,[rip+0x660e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406014:	lea    rsi,[rip+0x5447]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40601b:	lea    rcx,[rip+0x64bf]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406022:	mov    edx,0x287
  406027:	call   403060 <__assert_fail@plt>
  40602c:	lea    rdi,[rip+0x65ef]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406033:	lea    rsi,[rip+0x5428]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40603a:	lea    rcx,[rip+0x64a0]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406041:	mov    edx,0x28b
  406046:	call   403060 <__assert_fail@plt>
  40604b:	lea    rdi,[rip+0x65d0]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406052:	lea    rsi,[rip+0x5409]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406059:	lea    rcx,[rip+0x653d]        # 40c59d <flatcc_builder_padding_base@@Base+0x13bd>
  406060:	mov    edx,0x2a5
  406065:	call   403060 <__assert_fail@plt>
  40606a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406070 <flatcc_builder_create_cached_vtable@@Base>:
  406070:	push   rbp
  406071:	push   r15
  406073:	push   r14
  406075:	push   r13
  406077:	push   r12
  406079:	push   rbx
  40607a:	sub    rsp,0x28
  40607e:	mov    r15d,ecx
  406081:	mov    r8d,edx
  406084:	mov    QWORD PTR [rsp+0x18],rsi
  406089:	mov    r13,rdi
  40608c:	mov    rax,QWORD PTR [rdi+0xd8]
  406093:	test   rax,rax
  406096:	je     40616a <flatcc_builder_create_cached_vtable@@Base+0xfa>
  40609c:	mov    ecx,0x20
  4060a1:	sub    ecx,eax
  4060a3:	shrx   r15d,r15d,ecx
  4060a8:	shl    r15,0x2
  4060ac:	add    r15,QWORD PTR [r13+0xa8]
  4060b3:	je     40623a <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  4060b9:	mov    ebp,DWORD PTR [r15]
  4060bc:	test   ebp,ebp
  4060be:	je     406242 <flatcc_builder_create_cached_vtable@@Base+0x1d2>
  4060c4:	mov    rbx,QWORD PTR [r13+0x78]
  4060c8:	mov    QWORD PTR [rsp+0x10],r13
  4060cd:	mov    r13,QWORD PTR [r13+0xb8]
  4060d4:	movzx  eax,r8w
  4060d8:	mov    QWORD PTR [rsp+0x20],rax
  4060dd:	xor    eax,eax
  4060df:	mov    QWORD PTR [rsp],rax
  4060e3:	mov    QWORD PTR [rsp+0x8],r15
  4060e8:	mov    r14,r15
  4060eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4060f0:	mov    eax,ebp
  4060f2:	lea    r15,[rax+r13*1]
  4060f6:	mov    esi,DWORD PTR [r13+rax*1+0x8]
  4060fb:	cmp    WORD PTR [rbx+rsi*1],r8w
  406100:	jne    40611e <flatcc_builder_create_cached_vtable@@Base+0xae>
  406102:	add    rsi,rbx
  406105:	mov    rdi,QWORD PTR [rsp+0x18]
  40610a:	mov    rdx,QWORD PTR [rsp+0x20]
  40610f:	mov    r12d,r8d
  406112:	call   403090 <memcmp@plt>
  406117:	mov    r8d,r12d
  40611a:	test   eax,eax
  40611c:	je     40612f <flatcc_builder_create_cached_vtable@@Base+0xbf>
  40611e:	mov    ebp,DWORD PTR [r15+0xc]
  406122:	add    r15,0xc
  406126:	mov    r14,r15
  406129:	test   ebp,ebp
  40612b:	jne    4060f0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  40612d:	jmp    40615b <flatcc_builder_create_cached_vtable@@Base+0xeb>
  40612f:	mov    eax,DWORD PTR [r15+0x4]
  406133:	mov    rcx,QWORD PTR [rsp+0x10]
  406138:	cmp    eax,DWORD PTR [rcx+0x100]
  40613e:	je     4063a4 <flatcc_builder_create_cached_vtable@@Base+0x334>
  406144:	lea    r14,[r15+0xc]
  406148:	mov    ebp,DWORD PTR [r15+0xc]
  40614c:	mov    rax,r15
  40614f:	mov    QWORD PTR [rsp],r15
  406153:	test   ebp,ebp
  406155:	jne    4060f0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  406157:	mov    QWORD PTR [rsp],r15
  40615b:	mov    r13,QWORD PTR [rsp+0x10]
  406160:	mov    r15,QWORD PTR [rsp+0x8]
  406165:	jmp    406248 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
  40616a:	cmp    DWORD PTR [r13+0xe4],0x0
  406172:	jne    4063e1 <flatcc_builder_create_cached_vtable@@Base+0x371>
  406178:	lea    rbx,[r13+0xb8]
  40617f:	cmp    QWORD PTR [r13+0xc0],0xf
  406187:	ja     4061af <flatcc_builder_create_cached_vtable@@Base+0x13f>
  406189:	mov    rdi,QWORD PTR [r13+0x40]
  40618d:	mov    edx,0x10
  406192:	xor    ecx,ecx
  406194:	mov    ebp,r8d
  406197:	mov    r8d,0x6
  40619d:	mov    rsi,rbx
  4061a0:	call   QWORD PTR [r13+0x50]
  4061a4:	mov    r8d,ebp
  4061a7:	test   eax,eax
  4061a9:	jne    4063c2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  4061af:	xor    r12d,r12d
  4061b2:	cmp    QWORD PTR [rbx],0x0
  4061b6:	je     40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4061bc:	mov    ebx,r8d
  4061bf:	lea    rsi,[r13+0xa8]
  4061c6:	mov    DWORD PTR [r13+0xe4],0x10
  4061d1:	mov    rdi,QWORD PTR [r13+0x40]
  4061d5:	mov    edx,0x100
  4061da:	mov    ecx,0x1
  4061df:	mov    r8d,0x5
  4061e5:	call   QWORD PTR [r13+0x50]
  4061e9:	test   eax,eax
  4061eb:	jne    40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4061f1:	mov    rax,QWORD PTR [r13+0xb0]
  4061f8:	mov    edx,0x100
  4061fd:	nop    DWORD PTR [rax]
  406200:	mov    rcx,rdx
  406203:	lea    rdx,[rdx+rdx*1]
  406207:	cmp    rdx,rax
  40620a:	jbe    406200 <flatcc_builder_create_cached_vtable@@Base+0x190>
  40620c:	shr    rcx,0x2
  406210:	mov    rax,0xffffffffffffffff
  406217:	mov    edx,0x1
  40621c:	mov    r8d,ebx
  40621f:	nop
  406220:	add    rax,0x1
  406224:	shlx   rsi,rdx,rax
  406229:	cmp    rsi,rcx
  40622c:	jb     406220 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  40622e:	mov    QWORD PTR [r13+0xd8],rax
  406235:	jmp    40609c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  40623a:	xor    r12d,r12d
  40623d:	jmp    40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406242:	xor    eax,eax
  406244:	mov    QWORD PTR [rsp],rax
  406248:	mov    ebp,DWORD PTR [r13+0xe4]
  40624f:	lea    rbx,[r13+0xb8]
  406256:	lea    rdx,[rbp+0x10]
  40625a:	cmp    rdx,QWORD PTR [r13+0xc0]
  406261:	jbe    406284 <flatcc_builder_create_cached_vtable@@Base+0x214>
  406263:	mov    rdi,QWORD PTR [r13+0x40]
  406267:	xor    ecx,ecx
  406269:	mov    r14d,r8d
  40626c:	mov    r8d,0x6
  406272:	mov    rsi,rbx
  406275:	call   QWORD PTR [r13+0x50]
  406279:	mov    r8d,r14d
  40627c:	test   eax,eax
  40627e:	jne    4063c2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  406284:	xor    r12d,r12d
  406287:	add    rbp,QWORD PTR [rbx]
  40628a:	je     40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406290:	mov    eax,DWORD PTR [r13+0xe4]
  406297:	mov    ecx,DWORD PTR [r13+0x100]
  40629e:	lea    edx,[rax+0x10]
  4062a1:	mov    DWORD PTR [r13+0xe4],edx
  4062a8:	mov    DWORD PTR [rbp+0x4],ecx
  4062ab:	mov    ecx,DWORD PTR [r15]
  4062ae:	mov    DWORD PTR [rbp+0xc],ecx
  4062b1:	mov    DWORD PTR [r15],eax
  4062b4:	movzx  ebx,r8w
  4062b8:	mov    rdi,r13
  4062bb:	mov    rsi,QWORD PTR [rsp+0x18]
  4062c0:	mov    edx,ebx
  4062c2:	call   405f20 <flatcc_builder_create_vtable@@Base>
  4062c7:	mov    DWORD PTR [rbp+0x0],eax
  4062ca:	test   eax,eax
  4062cc:	je     40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4062d2:	mov    rax,QWORD PTR [rsp]
  4062d6:	test   rax,rax
  4062d9:	je     4062e6 <flatcc_builder_create_cached_vtable@@Base+0x276>
  4062db:	mov    eax,DWORD PTR [rax+0x8]
  4062de:	mov    DWORD PTR [rbp+0x8],eax
  4062e1:	jmp    406386 <flatcc_builder_create_cached_vtable@@Base+0x316>
  4062e6:	mov    rax,QWORD PTR [r13+0x118]
  4062ed:	mov    r14d,DWORD PTR [r13+0xe0]
  4062f4:	test   rax,rax
  4062f7:	je     406334 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  4062f9:	lea    ecx,[r14+rbx*1]
  4062fd:	cmp    rax,rcx
  406300:	jae    406334 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  406302:	cmp    QWORD PTR [r13+0xd8],0x0
  40630a:	je     406386 <flatcc_builder_create_cached_vtable@@Base+0x316>
  40630c:	mov    rdi,QWORD PTR [r13+0xa8]
  406313:	mov    rdx,QWORD PTR [r13+0xb0]
  40631a:	xor    esi,esi
  40631c:	call   403070 <memset@plt>
  406321:	movabs rax,0x1000000000
  40632b:	mov    QWORD PTR [r13+0xe0],rax
  406332:	jmp    406386 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406334:	lea    r15,[r13+0x78]
  406338:	lea    rdx,[r14+rbx*1]
  40633c:	cmp    rdx,QWORD PTR [r13+0x80]
  406343:	jbe    40635c <flatcc_builder_create_cached_vtable@@Base+0x2ec>
  406345:	mov    rdi,QWORD PTR [r13+0x40]
  406349:	xor    ecx,ecx
  40634b:	mov    r8d,0x2
  406351:	mov    rsi,r15
  406354:	call   QWORD PTR [r13+0x50]
  406358:	test   eax,eax
  40635a:	jne    4063c2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  40635c:	add    r14,QWORD PTR [r15]
  40635f:	je     40639c <flatcc_builder_create_cached_vtable@@Base+0x32c>
  406361:	mov    eax,DWORD PTR [r13+0xe0]
  406368:	mov    DWORD PTR [rbp+0x8],eax
  40636b:	mov    ecx,ebx
  40636d:	add    ecx,eax
  40636f:	mov    DWORD PTR [r13+0xe0],ecx
  406376:	mov    rdi,r14
  406379:	mov    rsi,QWORD PTR [rsp+0x18]
  40637e:	mov    rdx,rbx
  406381:	call   4030a0 <memcpy@plt>
  406386:	mov    r12d,DWORD PTR [rbp+0x0]
  40638a:	mov    eax,r12d
  40638d:	add    rsp,0x28
  406391:	pop    rbx
  406392:	pop    r12
  406394:	pop    r13
  406396:	pop    r14
  406398:	pop    r15
  40639a:	pop    rbp
  40639b:	ret    
  40639c:	mov    r12d,0xffffffff
  4063a2:	jmp    40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4063a4:	mov    rcx,QWORD PTR [rsp+0x8]
  4063a9:	cmp    r14,rcx
  4063ac:	je     4063bd <flatcc_builder_create_cached_vtable@@Base+0x34d>
  4063ae:	mov    eax,DWORD PTR [r15+0xc]
  4063b2:	mov    DWORD PTR [r14],eax
  4063b5:	mov    eax,DWORD PTR [rcx]
  4063b7:	mov    DWORD PTR [r15+0xc],eax
  4063bb:	mov    DWORD PTR [rcx],ebp
  4063bd:	mov    r12d,DWORD PTR [r15]
  4063c0:	jmp    40638a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4063c2:	lea    rdi,[rip+0x6259]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  4063c9:	lea    rsi,[rip+0x5092]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4063d0:	lea    rcx,[rip+0x6085]        # 40c45c <flatcc_builder_padding_base@@Base+0x127c>
  4063d7:	mov    edx,0x134
  4063dc:	call   403060 <__assert_fail@plt>
  4063e1:	lea    rdi,[rip+0x61fe]        # 40c5e6 <flatcc_builder_padding_base@@Base+0x1406>
  4063e8:	lea    rsi,[rip+0x5073]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4063ef:	lea    rcx,[rip+0x61ff]        # 40c5f5 <flatcc_builder_padding_base@@Base+0x1415>
  4063f6:	mov    edx,0x156
  4063fb:	call   403060 <__assert_fail@plt>

0000000000406400 <flatcc_builder_create_table@@Base>:
  406400:	push   rbp
  406401:	push   r14
  406403:	push   rbx
  406404:	sub    rsp,0xa0
  40640b:	test   r9d,r9d
  40640e:	js     406625 <flatcc_builder_create_table@@Base+0x225>
  406414:	mov    r14,rdi
  406417:	mov    edi,DWORD PTR [rsp+0xc0]
  40641e:	test   dil,0x1
  406422:	je     406644 <flatcc_builder_create_table@@Base+0x244>
  406428:	movzx  ecx,cx
  40642b:	cmp    ecx,0x4
  40642e:	mov    eax,0x4
  406433:	cmova  eax,ecx
  406436:	cmp    WORD PTR [r14+0xe8],ax
  40643e:	jae    406448 <flatcc_builder_create_table@@Base+0x48>
  406440:	mov    WORD PTR [r14+0xe8],ax
  406448:	mov    ebp,DWORD PTR [r14+0xf0]
  40644f:	mov    ecx,ebp
  406451:	sub    ecx,edx
  406453:	movzx  r10d,ax
  406457:	add    r10d,0xffffffff
  40645b:	and    r10d,ecx
  40645e:	mov    ecx,0xfffffffc
  406463:	mov    ebx,0xfffffffc
  406468:	sub    ebx,edx
  40646a:	add    edi,r10d
  40646d:	lea    eax,[rbx+rbp*1]
  406470:	add    eax,0x1
  406473:	sub    eax,edi
  406475:	mov    DWORD PTR [rsp+0xc],eax
  406479:	test   r9d,r9d
  40647c:	jle    406527 <flatcc_builder_create_table@@Base+0x127>
  406482:	add    ebx,ebp
  406484:	sub    ebx,r10d
  406487:	sub    ecx,ebx
  406489:	mov    edi,r9d
  40648c:	lea    rax,[rdi-0x1]
  406490:	mov    r9d,edi
  406493:	and    r9d,0x3
  406497:	cmp    rax,0x3
  40649b:	jae    4064a9 <flatcc_builder_create_table@@Base+0xa9>
  40649d:	xor    ebx,ebx
  40649f:	test   r9,r9
  4064a2:	jne    4064fd <flatcc_builder_create_table@@Base+0xfd>
  4064a4:	jmp    406527 <flatcc_builder_create_table@@Base+0x127>
  4064a9:	sub    rdi,r9
  4064ac:	xor    ebx,ebx
  4064ae:	xchg   ax,ax
  4064b0:	movzx  eax,WORD PTR [r8+rbx*2]
  4064b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064b8:	add    ebp,ecx
  4064ba:	sub    ebp,eax
  4064bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4064bf:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  4064c5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064c8:	add    ebp,ecx
  4064ca:	sub    ebp,eax
  4064cc:	mov    DWORD PTR [rax+rsi*1],ebp
  4064cf:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4064d5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064d8:	add    ebp,ecx
  4064da:	sub    ebp,eax
  4064dc:	mov    DWORD PTR [rax+rsi*1],ebp
  4064df:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4064e5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4064e8:	add    ebp,ecx
  4064ea:	sub    ebp,eax
  4064ec:	mov    DWORD PTR [rax+rsi*1],ebp
  4064ef:	add    rbx,0x4
  4064f3:	cmp    rdi,rbx
  4064f6:	jne    4064b0 <flatcc_builder_create_table@@Base+0xb0>
  4064f8:	test   r9,r9
  4064fb:	je     406527 <flatcc_builder_create_table@@Base+0x127>
  4064fd:	lea    rdi,[r8+rbx*2]
  406501:	xor    ebx,ebx
  406503:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40650d:	nop    DWORD PTR [rax]
  406510:	movzx  eax,WORD PTR [rdi+rbx*2]
  406514:	mov    ebp,DWORD PTR [rax+rsi*1]
  406517:	add    ebp,ecx
  406519:	sub    ebp,eax
  40651b:	mov    DWORD PTR [rax+rsi*1],ebp
  40651e:	add    rbx,0x1
  406522:	cmp    r9,rbx
  406525:	jne    406510 <flatcc_builder_create_table@@Base+0x110>
  406527:	mov    QWORD PTR [rsp+0x10],0x4
  406530:	lea    rax,[rsp+0xc]
  406535:	mov    QWORD PTR [rsp+0x20],rax
  40653a:	mov    QWORD PTR [rsp+0x28],0x4
  406543:	mov    DWORD PTR [rsp+0x18],0x1
  40654b:	test   rdx,rdx
  40654e:	je     4065f0 <flatcc_builder_create_table@@Base+0x1f0>
  406554:	lea    r8,[rdx+0x4]
  406558:	mov    QWORD PTR [rsp+0x10],r8
  40655d:	mov    QWORD PTR [rsp+0x30],rsi
  406562:	mov    QWORD PTR [rsp+0x38],rdx
  406567:	mov    DWORD PTR [rsp+0x18],0x2
  40656f:	mov    edx,0x2
  406574:	test   r10d,r10d
  406577:	je     40659f <flatcc_builder_create_table@@Base+0x19f>
  406579:	add    r8,r10
  40657c:	mov    QWORD PTR [rsp+0x10],r8
  406581:	mov    eax,edx
  406583:	shl    rax,0x4
  406587:	lea    rcx,[rip+0x4c52]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  40658e:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406593:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406598:	add    edx,0x1
  40659b:	mov    DWORD PTR [rsp+0x18],edx
  40659f:	cmp    r8,0x11
  4065a3:	setb   al
  4065a6:	lea    rcx,[r8-0x10]
  4065aa:	shr    rcx,0x20
  4065ae:	sete   cl
  4065b1:	test   r8d,r8d
  4065b4:	jle    406606 <flatcc_builder_create_table@@Base+0x206>
  4065b6:	or     al,cl
  4065b8:	je     406606 <flatcc_builder_create_table@@Base+0x206>
  4065ba:	mov    ebp,DWORD PTR [r14+0xf0]
  4065c1:	sub    ebp,r8d
  4065c4:	mov    rdi,QWORD PTR [r14+0x38]
  4065c8:	lea    rsi,[rsp+0x20]
  4065cd:	mov    ecx,ebp
  4065cf:	call   QWORD PTR [r14+0x48]
  4065d3:	test   eax,eax
  4065d5:	jne    406663 <flatcc_builder_create_table@@Base+0x263>
  4065db:	mov    DWORD PTR [r14+0xf0],ebp
  4065e2:	mov    eax,ebp
  4065e4:	add    rsp,0xa0
  4065eb:	pop    rbx
  4065ec:	pop    r14
  4065ee:	pop    rbp
  4065ef:	ret    
  4065f0:	mov    edx,0x1
  4065f5:	mov    r8d,0x4
  4065fb:	test   r10d,r10d
  4065fe:	jne    406579 <flatcc_builder_create_table@@Base+0x179>
  406604:	jmp    40659f <flatcc_builder_create_table@@Base+0x19f>
  406606:	lea    rdi,[rip+0x6015]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40660d:	lea    rsi,[rip+0x4e4e]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406614:	lea    rcx,[rip+0x5ec6]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  40661b:	mov    edx,0x287
  406620:	call   403060 <__assert_fail@plt>
  406625:	lea    rdi,[rip+0x55ac]        # 40bbd8 <flatcc_builder_padding_base@@Base+0x9f8>
  40662c:	lea    rsi,[rip+0x4e2f]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406633:	lea    rcx,[rip+0x55b0]        # 40bbea <flatcc_builder_padding_base@@Base+0xa0a>
  40663a:	mov    edx,0x4d5
  40663f:	call   403060 <__assert_fail@plt>
  406644:	lea    rdi,[rip+0x563b]        # 40bc86 <flatcc_builder_padding_base@@Base+0xaa6>
  40664b:	lea    rsi,[rip+0x4e10]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406652:	lea    rcx,[rip+0x5591]        # 40bbea <flatcc_builder_padding_base@@Base+0xa0a>
  406659:	mov    edx,0x4db
  40665e:	call   403060 <__assert_fail@plt>
  406663:	lea    rdi,[rip+0x5fb8]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40666a:	lea    rsi,[rip+0x4df1]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406671:	lea    rcx,[rip+0x5e69]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406678:	mov    edx,0x28b
  40667d:	call   403060 <__assert_fail@plt>
  406682:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40668c:	nop    DWORD PTR [rax+0x0]

0000000000406690 <flatcc_builder_check_required_field@@Base>:
  406690:	mov    rax,QWORD PTR [rdi+0x30]
  406694:	movzx  eax,WORD PTR [rax+0xe]
  406698:	cmp    eax,0x3
  40669b:	jne    4066b7 <flatcc_builder_check_required_field@@Base+0x27>
  40669d:	xor    eax,eax
  40669f:	cmp    WORD PTR [rdi+0x10],si
  4066a3:	jbe    4066b6 <flatcc_builder_check_required_field@@Base+0x26>
  4066a5:	mov    rcx,QWORD PTR [rdi+0x8]
  4066a9:	movzx  edx,si
  4066ac:	xor    eax,eax
  4066ae:	cmp    WORD PTR [rcx+rdx*2],0x0
  4066b3:	setne  al
  4066b6:	ret    
  4066b7:	push   rax
  4066b8:	lea    rdi,[rip+0x55d2]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4066bf:	lea    rsi,[rip+0x4d9c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4066c6:	lea    rcx,[rip+0x55ef]        # 40bcbc <flatcc_builder_padding_base@@Base+0xadc>
  4066cd:	mov    edx,0x4f8
  4066d2:	call   403060 <__assert_fail@plt>
  4066d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004066e0 <flatcc_builder_check_union_field@@Base>:
  4066e0:	mov    rax,QWORD PTR [rdi+0x30]
  4066e4:	movzx  eax,WORD PTR [rax+0xe]
  4066e8:	cmp    eax,0x3
  4066eb:	jne    40673e <flatcc_builder_check_union_field@@Base+0x5e>
  4066ed:	test   si,si
  4066f0:	je     406721 <flatcc_builder_check_union_field@@Base+0x41>
  4066f2:	cmp    WORD PTR [rdi+0x10],si
  4066f6:	jbe    406727 <flatcc_builder_check_union_field@@Base+0x47>
  4066f8:	movzx  eax,si
  4066fb:	mov    rcx,QWORD PTR [rdi+0x8]
  4066ff:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  406704:	test   rdx,rdx
  406707:	je     40672d <flatcc_builder_check_union_field@@Base+0x4d>
  406709:	mov    rsi,QWORD PTR [rdi+0x18]
  40670d:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406711:	movzx  eax,WORD PTR [rcx+rax*2]
  406715:	je     406734 <flatcc_builder_check_union_field@@Base+0x54>
  406717:	test   ax,ax
  40671a:	setne  al
  40671d:	movzx  eax,al
  406720:	ret    
  406721:	xor    eax,eax
  406723:	movzx  eax,al
  406726:	ret    
  406727:	xor    eax,eax
  406729:	movzx  eax,al
  40672c:	ret    
  40672d:	cmp    WORD PTR [rcx+rax*2],0x0
  406732:	jmp    406737 <flatcc_builder_check_union_field@@Base+0x57>
  406734:	test   ax,ax
  406737:	sete   al
  40673a:	movzx  eax,al
  40673d:	ret    
  40673e:	push   rax
  40673f:	lea    rdi,[rip+0x554b]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  406746:	lea    rsi,[rip+0x4d15]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40674d:	lea    rcx,[rip+0x55bb]        # 40bd0f <flatcc_builder_padding_base@@Base+0xb2f>
  406754:	mov    edx,0x4ff
  406759:	call   403060 <__assert_fail@plt>
  40675e:	xchg   ax,ax

0000000000406760 <flatcc_builder_check_required@@Base>:
  406760:	mov    rax,QWORD PTR [rdi+0x30]
  406764:	movzx  eax,WORD PTR [rax+0xe]
  406768:	cmp    eax,0x3
  40676b:	jne    4067a8 <flatcc_builder_check_required@@Base+0x48>
  40676d:	movzx  ecx,WORD PTR [rdi+0x10]
  406771:	xor    eax,eax
  406773:	cmp    ecx,edx
  406775:	jl     4067a4 <flatcc_builder_check_required@@Base+0x44>
  406777:	mov    eax,0x1
  40677c:	test   edx,edx
  40677e:	jle    4067a4 <flatcc_builder_check_required@@Base+0x44>
  406780:	mov    rcx,QWORD PTR [rdi+0x8]
  406784:	movsxd r8,edx
  406787:	xor    edi,edi
  406789:	nop    DWORD PTR [rax+0x0]
  406790:	movzx  edx,WORD PTR [rsi+rdi*2]
  406794:	cmp    WORD PTR [rcx+rdx*2],0x0
  406799:	je     4067a5 <flatcc_builder_check_required@@Base+0x45>
  40679b:	add    rdi,0x1
  40679f:	cmp    rdi,r8
  4067a2:	jl     406790 <flatcc_builder_check_required@@Base+0x30>
  4067a4:	ret    
  4067a5:	xor    eax,eax
  4067a7:	ret    
  4067a8:	push   rax
  4067a9:	lea    rdi,[rip+0x54e1]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4067b0:	lea    rsi,[rip+0x4cab]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4067b7:	lea    rcx,[rip+0x55a1]        # 40bd5f <flatcc_builder_padding_base@@Base+0xb7f>
  4067be:	mov    edx,0x511
  4067c3:	call   403060 <__assert_fail@plt>
  4067c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004067d0 <flatcc_builder_end_table@@Base>:
  4067d0:	push   rbp
  4067d1:	push   r15
  4067d3:	push   r14
  4067d5:	push   r12
  4067d7:	push   rbx
  4067d8:	sub    rsp,0x10
  4067dc:	mov    rax,QWORD PTR [rdi+0x30]
  4067e0:	movzx  eax,WORD PTR [rax+0xe]
  4067e4:	cmp    eax,0x3
  4067e7:	jne    406938 <flatcc_builder_end_table@@Base+0x168>
  4067ed:	mov    rbx,rdi
  4067f0:	mov    rax,QWORD PTR [rdi+0x8]
  4067f4:	mov    ecx,DWORD PTR [rdi+0x10]
  4067f7:	lea    ecx,[rcx+rcx*1]
  4067fa:	add    ecx,0x4
  4067fd:	mov    WORD PTR [rax-0x4],cx
  406801:	mov    edx,DWORD PTR [rdi+0x20]
  406804:	add    edx,0x4
  406807:	mov    WORD PTR [rax-0x2],dx
  40680b:	lea    r12,[rax-0x4]
  40680f:	movzx  ebp,cx
  406812:	mov    eax,DWORD PTR [rdi+0x14]
  406815:	xor    eax,ebp
  406817:	imul   eax,eax,0x9e3779b1
  40681d:	movzx  ecx,dx
  406820:	xor    ecx,eax
  406822:	imul   ecx,ecx,0x9e3779b1
  406828:	mov    DWORD PTR [rdi+0x14],ecx
  40682b:	mov    rsi,r12
  40682e:	mov    edx,ebp
  406830:	call   406070 <flatcc_builder_create_cached_vtable@@Base>
  406835:	test   eax,eax
  406837:	je     406925 <flatcc_builder_end_table@@Base+0x155>
  40683d:	mov    r14d,eax
  406840:	xor    r15d,r15d
  406843:	xor    esi,esi
  406845:	mov    rdi,r12
  406848:	mov    rdx,rbp
  40684b:	call   403070 <memset@plt>
  406850:	mov    rax,QWORD PTR [rbx+0x30]
  406854:	mov    r8d,DWORD PTR [rax+0x14]
  406858:	add    r8,QWORD PTR [rbx+0x88]
  40685f:	mov    r9,QWORD PTR [rbx]
  406862:	mov    rsi,QWORD PTR [rbx+0x18]
  406866:	sub    r9,r8
  406869:	shr    r9,1
  40686c:	mov    edx,DWORD PTR [rbx+0x20]
  40686f:	movzx  ecx,WORD PTR [rbx+0xea]
  406876:	mov    DWORD PTR [rsp],r14d
  40687a:	mov    rdi,rbx
  40687d:	call   406400 <flatcc_builder_create_table@@Base>
  406882:	test   eax,eax
  406884:	je     406928 <flatcc_builder_end_table@@Base+0x158>
  40688a:	mov    r14d,eax
  40688d:	mov    rax,QWORD PTR [rbx+0x30]
  406891:	mov    ecx,DWORD PTR [rax+0x18]
  406894:	mov    DWORD PTR [rbx+0x14],ecx
  406897:	movzx  ecx,WORD PTR [rax+0x1c]
  40689b:	mov    WORD PTR [rbx+0x10],cx
  40689f:	mov    ecx,DWORD PTR [rax+0x10]
  4068a2:	add    rcx,QWORD PTR [rbx+0x58]
  4068a6:	mov    QWORD PTR [rbx+0x8],rcx
  4068aa:	mov    eax,DWORD PTR [rax+0x14]
  4068ad:	add    rax,QWORD PTR [rbx+0x88]
  4068b4:	mov    QWORD PTR [rbx],rax
  4068b7:	mov    rdi,QWORD PTR [rbx+0x18]
  4068bb:	mov    edx,DWORD PTR [rbx+0x20]
  4068be:	xor    esi,esi
  4068c0:	call   403070 <memset@plt>
  4068c5:	mov    rax,QWORD PTR [rbx+0x30]
  4068c9:	mov    ecx,DWORD PTR [rax+0x8]
  4068cc:	mov    DWORD PTR [rbx+0x20],ecx
  4068cf:	mov    ecx,DWORD PTR [rax]
  4068d1:	mov    DWORD PTR [rbx+0x28],ecx
  4068d4:	mov    edx,DWORD PTR [rax+0x4]
  4068d7:	mov    rsi,rcx
  4068da:	add    rsi,QWORD PTR [rbx+0x68]
  4068de:	mov    QWORD PTR [rbx+0x18],rsi
  4068e2:	mov    esi,DWORD PTR [rbx+0x70]
  4068e5:	sub    esi,ecx
  4068e7:	cmp    esi,edx
  4068e9:	cmova  esi,edx
  4068ec:	mov    DWORD PTR [rbx+0x24],esi
  4068ef:	movzx  ecx,WORD PTR [rbx+0xea]
  4068f6:	cmp    WORD PTR [rbx+0xe8],cx
  4068fd:	jae    406906 <flatcc_builder_end_table@@Base+0x136>
  4068ff:	mov    WORD PTR [rbx+0xe8],cx
  406906:	movzx  ecx,WORD PTR [rax+0xc]
  40690a:	mov    WORD PTR [rbx+0xea],cx
  406911:	add    rax,0xffffffffffffffdc
  406915:	mov    QWORD PTR [rbx+0x30],rax
  406919:	add    DWORD PTR [rbx+0x104],0xffffffff
  406920:	mov    r15d,r14d
  406923:	jmp    406928 <flatcc_builder_end_table@@Base+0x158>
  406925:	xor    r15d,r15d
  406928:	mov    eax,r15d
  40692b:	add    rsp,0x10
  40692f:	pop    rbx
  406930:	pop    r12
  406932:	pop    r14
  406934:	pop    r15
  406936:	pop    rbp
  406937:	ret    
  406938:	lea    rdi,[rip+0x5352]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  40693f:	lea    rsi,[rip+0x4b1c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406946:	lea    rcx,[rip+0x546c]        # 40bdb9 <flatcc_builder_padding_base@@Base+0xbd9>
  40694d:	mov    edx,0x525
  406952:	call   403060 <__assert_fail@plt>
  406957:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406960 <flatcc_builder_create_vector@@Base>:
  406960:	push   rbp
  406961:	push   rbx
  406962:	sub    rsp,0x98
  406969:	cmp    rdx,r9
  40696c:	ja     406a99 <flatcc_builder_create_vector@@Base+0x139>
  406972:	mov    rbx,rdi
  406975:	movzx  edi,r8w
  406979:	cmp    edi,0x4
  40697c:	mov    eax,0x4
  406981:	cmova  eax,edi
  406984:	cmp    WORD PTR [rbx+0xe8],ax
  40698b:	jae    406994 <flatcc_builder_create_vector@@Base+0x34>
  40698d:	mov    WORD PTR [rbx+0xe8],ax
  406994:	imul   ecx,edx
  406997:	mov    DWORD PTR [rsp+0x4],edx
  40699b:	mov    ebp,DWORD PTR [rbx+0xf0]
  4069a1:	mov    edx,ebp
  4069a3:	sub    edx,ecx
  4069a5:	movzx  eax,ax
  4069a8:	add    eax,0xffffffff
  4069ab:	and    eax,edx
  4069ad:	mov    QWORD PTR [rsp+0x8],0x4
  4069b6:	lea    rdx,[rsp+0x4]
  4069bb:	mov    QWORD PTR [rsp+0x18],rdx
  4069c0:	mov    QWORD PTR [rsp+0x20],0x4
  4069c9:	mov    DWORD PTR [rsp+0x10],0x1
  4069d1:	test   ecx,ecx
  4069d3:	je     406a69 <flatcc_builder_create_vector@@Base+0x109>
  4069d9:	mov    ecx,ecx
  4069db:	lea    r8,[rcx+0x4]
  4069df:	mov    QWORD PTR [rsp+0x8],r8
  4069e4:	mov    QWORD PTR [rsp+0x28],rsi
  4069e9:	mov    QWORD PTR [rsp+0x30],rcx
  4069ee:	mov    DWORD PTR [rsp+0x10],0x2
  4069f6:	mov    edx,0x2
  4069fb:	test   eax,eax
  4069fd:	je     406a27 <flatcc_builder_create_vector@@Base+0xc7>
  4069ff:	mov    eax,eax
  406a01:	add    r8,rax
  406a04:	mov    QWORD PTR [rsp+0x8],r8
  406a09:	mov    ecx,edx
  406a0b:	shl    rcx,0x4
  406a0f:	lea    rsi,[rip+0x47ca]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  406a16:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  406a1b:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  406a20:	add    edx,0x1
  406a23:	mov    DWORD PTR [rsp+0x10],edx
  406a27:	cmp    r8,0x11
  406a2b:	setb   al
  406a2e:	lea    rcx,[r8-0x10]
  406a32:	shr    rcx,0x20
  406a36:	sete   cl
  406a39:	test   r8d,r8d
  406a3c:	jle    406a7a <flatcc_builder_create_vector@@Base+0x11a>
  406a3e:	or     al,cl
  406a40:	je     406a7a <flatcc_builder_create_vector@@Base+0x11a>
  406a42:	sub    ebp,r8d
  406a45:	mov    rdi,QWORD PTR [rbx+0x38]
  406a49:	lea    rsi,[rsp+0x18]
  406a4e:	mov    ecx,ebp
  406a50:	call   QWORD PTR [rbx+0x48]
  406a53:	test   eax,eax
  406a55:	jne    406ab8 <flatcc_builder_create_vector@@Base+0x158>
  406a57:	mov    DWORD PTR [rbx+0xf0],ebp
  406a5d:	mov    eax,ebp
  406a5f:	add    rsp,0x98
  406a66:	pop    rbx
  406a67:	pop    rbp
  406a68:	ret    
  406a69:	mov    edx,0x1
  406a6e:	mov    r8d,0x4
  406a74:	test   eax,eax
  406a76:	jne    4069ff <flatcc_builder_create_vector@@Base+0x9f>
  406a78:	jmp    406a27 <flatcc_builder_create_vector@@Base+0xc7>
  406a7a:	lea    rdi,[rip+0x5ba1]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406a81:	lea    rsi,[rip+0x49da]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406a88:	lea    rcx,[rip+0x5a52]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406a8f:	mov    edx,0x287
  406a94:	call   403060 <__assert_fail@plt>
  406a99:	lea    rdi,[rip+0x535b]        # 40bdfb <flatcc_builder_padding_base@@Base+0xc1b>
  406aa0:	lea    rsi,[rip+0x49bb]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406aa7:	lea    rcx,[rip+0x5360]        # 40be0e <flatcc_builder_padding_base@@Base+0xc2e>
  406aae:	mov    edx,0x555
  406ab3:	call   403060 <__assert_fail@plt>
  406ab8:	lea    rdi,[rip+0x5b63]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406abf:	lea    rsi,[rip+0x499c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406ac6:	lea    rcx,[rip+0x5a14]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406acd:	mov    edx,0x28b
  406ad2:	call   403060 <__assert_fail@plt>
  406ad7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406ae0 <flatcc_builder_end_vector@@Base>:
  406ae0:	push   rbp
  406ae1:	push   rbx
  406ae2:	push   rax
  406ae3:	mov    rax,QWORD PTR [rdi+0x30]
  406ae7:	movzx  ecx,WORD PTR [rax+0xe]
  406aeb:	cmp    ecx,0x4
  406aee:	jne    406b8a <flatcc_builder_end_vector@@Base+0xaa>
  406af4:	mov    rbx,rdi
  406af7:	mov    rsi,QWORD PTR [rdi+0x18]
  406afb:	mov    ecx,DWORD PTR [rax+0x10]
  406afe:	mov    edx,DWORD PTR [rax+0x14]
  406b01:	movzx  r8d,WORD PTR [rdi+0xea]
  406b09:	mov    r9d,DWORD PTR [rax+0x18]
  406b0d:	call   406960 <flatcc_builder_create_vector@@Base>
  406b12:	mov    ebp,eax
  406b14:	test   eax,eax
  406b16:	je     406b81 <flatcc_builder_end_vector@@Base+0xa1>
  406b18:	mov    rdi,QWORD PTR [rbx+0x18]
  406b1c:	mov    edx,DWORD PTR [rbx+0x20]
  406b1f:	xor    esi,esi
  406b21:	call   403070 <memset@plt>
  406b26:	mov    rax,QWORD PTR [rbx+0x30]
  406b2a:	mov    ecx,DWORD PTR [rax+0x8]
  406b2d:	mov    DWORD PTR [rbx+0x20],ecx
  406b30:	mov    ecx,DWORD PTR [rax]
  406b32:	mov    DWORD PTR [rbx+0x28],ecx
  406b35:	mov    edx,DWORD PTR [rax+0x4]
  406b38:	mov    rsi,rcx
  406b3b:	add    rsi,QWORD PTR [rbx+0x68]
  406b3f:	mov    QWORD PTR [rbx+0x18],rsi
  406b43:	mov    esi,DWORD PTR [rbx+0x70]
  406b46:	sub    esi,ecx
  406b48:	cmp    esi,edx
  406b4a:	cmova  esi,edx
  406b4d:	mov    DWORD PTR [rbx+0x24],esi
  406b50:	movzx  ecx,WORD PTR [rbx+0xea]
  406b57:	cmp    WORD PTR [rbx+0xe8],cx
  406b5e:	jae    406b67 <flatcc_builder_end_vector@@Base+0x87>
  406b60:	mov    WORD PTR [rbx+0xe8],cx
  406b67:	movzx  ecx,WORD PTR [rax+0xc]
  406b6b:	mov    WORD PTR [rbx+0xea],cx
  406b72:	add    rax,0xffffffffffffffdc
  406b76:	mov    QWORD PTR [rbx+0x30],rax
  406b7a:	add    DWORD PTR [rbx+0x104],0xffffffff
  406b81:	mov    eax,ebp
  406b83:	add    rsp,0x8
  406b87:	pop    rbx
  406b88:	pop    rbp
  406b89:	ret    
  406b8a:	lea    rdi,[rip+0x4c0e]        # 40b79f <flatcc_builder_padding_base@@Base+0x5bf>
  406b91:	lea    rsi,[rip+0x48ca]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406b98:	lea    rcx,[rip+0x52e5]        # 40be84 <flatcc_builder_padding_base@@Base+0xca4>
  406b9f:	mov    edx,0x578
  406ba4:	call   403060 <__assert_fail@plt>
  406ba9:	nop    DWORD PTR [rax+0x0]

0000000000406bb0 <flatcc_builder_vector_count@@Base>:
  406bb0:	mov    rax,QWORD PTR [rdi+0x30]
  406bb4:	mov    eax,DWORD PTR [rax+0x14]
  406bb7:	ret    
  406bb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406bc0 <flatcc_builder_vector_edit@@Base>:
  406bc0:	mov    rax,QWORD PTR [rdi+0x18]
  406bc4:	ret    
  406bc5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406bcf:	nop

0000000000406bd0 <flatcc_builder_create_offset_vector_direct@@Base>:
  406bd0:	xor    ecx,ecx
  406bd2:	jmp    406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406bd4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406bde:	xchg   ax,ax
  406be0:	push   r14
  406be2:	push   rbx
  406be3:	sub    rsp,0x98
  406bea:	mov    r10,rdx
  406bed:	xor    ebx,ebx
  406bef:	test   r10d,0xc0000000
  406bf6:	jne    406d4a <flatcc_builder_create_offset_vector_direct@@Base+0x17a>
  406bfc:	mov    r14,rdi
  406bff:	movzx  edx,WORD PTR [rdi+0xe8]
  406c06:	cmp    edx,0x3
  406c09:	ja     406c15 <flatcc_builder_create_offset_vector_direct@@Base+0x45>
  406c0b:	mov    WORD PTR [r14+0xe8],0x4
  406c15:	lea    r8d,[r10*4+0x0]
  406c1d:	mov    DWORD PTR [rsp+0x4],r10d
  406c22:	mov    ebx,DWORD PTR [r14+0xf0]
  406c29:	mov    r9d,ebx
  406c2c:	and    r9d,0x3
  406c30:	mov    QWORD PTR [rsp+0x8],0x4
  406c39:	lea    rdx,[rsp+0x4]
  406c3e:	mov    QWORD PTR [rsp+0x18],rdx
  406c43:	mov    QWORD PTR [rsp+0x20],0x4
  406c4c:	mov    DWORD PTR [rsp+0x10],0x1
  406c54:	test   r8d,r8d
  406c57:	je     406d57 <flatcc_builder_create_offset_vector_direct@@Base+0x187>
  406c5d:	mov    edx,r8d
  406c60:	lea    r8,[rdx+0x4]
  406c64:	mov    QWORD PTR [rsp+0x8],r8
  406c69:	mov    QWORD PTR [rsp+0x28],rsi
  406c6e:	mov    QWORD PTR [rsp+0x30],rdx
  406c73:	mov    DWORD PTR [rsp+0x10],0x2
  406c7b:	mov    edx,0x2
  406c80:	test   r9d,r9d
  406c83:	je     406cab <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406c85:	add    r8,r9
  406c88:	mov    QWORD PTR [rsp+0x8],r8
  406c8d:	mov    edi,edx
  406c8f:	shl    rdi,0x4
  406c93:	lea    rax,[rip+0x4546]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  406c9a:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  406c9f:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  406ca4:	add    edx,0x1
  406ca7:	mov    DWORD PTR [rsp+0x10],edx
  406cab:	test   r10d,r10d
  406cae:	je     406d06 <flatcc_builder_create_offset_vector_direct@@Base+0x136>
  406cb0:	mov    edi,0xfffffffc
  406cb5:	sub    edi,ebx
  406cb7:	add    edi,r8d
  406cba:	mov    r9d,r10d
  406cbd:	xor    ebx,ebx
  406cbf:	nop
  406cc0:	mov    eax,DWORD PTR [rsi+rbx*4]
  406cc3:	test   eax,eax
  406cc5:	je     406ce0 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
  406cc7:	add    eax,edi
  406cc9:	mov    DWORD PTR [rsi+rbx*4],eax
  406ccc:	test   rcx,rcx
  406ccf:	je     406cf3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  406cd1:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406cd5:	jne    406cf3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  406cd7:	jmp    406d70 <flatcc_builder_create_offset_vector_direct@@Base+0x1a0>
  406cdc:	nop    DWORD PTR [rax+0x0]
  406ce0:	test   rcx,rcx
  406ce3:	je     406d8f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  406ce9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  406ced:	jne    406dae <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  406cf3:	add    rbx,0x1
  406cf7:	add    edi,0xfffffffc
  406cfa:	cmp    rbx,r9
  406cfd:	jb     406cc0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  406cff:	mov    ebx,DWORD PTR [r14+0xf0]
  406d06:	cmp    r8,0x11
  406d0a:	setb   al
  406d0d:	lea    rcx,[r8-0x10]
  406d11:	shr    rcx,0x20
  406d15:	sete   cl
  406d18:	test   r8d,r8d
  406d1b:	jle    406dcd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406d21:	or     al,cl
  406d23:	je     406dcd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  406d29:	sub    ebx,r8d
  406d2c:	mov    rdi,QWORD PTR [r14+0x38]
  406d30:	lea    rsi,[rsp+0x18]
  406d35:	mov    ecx,ebx
  406d37:	call   QWORD PTR [r14+0x48]
  406d3b:	test   eax,eax
  406d3d:	jne    406dec <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  406d43:	mov    DWORD PTR [r14+0xf0],ebx
  406d4a:	mov    eax,ebx
  406d4c:	add    rsp,0x98
  406d53:	pop    rbx
  406d54:	pop    r14
  406d56:	ret    
  406d57:	mov    edx,0x1
  406d5c:	mov    r8d,0x4
  406d62:	test   r9d,r9d
  406d65:	jne    406c85 <flatcc_builder_create_offset_vector_direct@@Base+0xb5>
  406d6b:	jmp    406cab <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  406d70:	lea    rdi,[rip+0x589f]        # 40c616 <flatcc_builder_padding_base@@Base+0x1436>
  406d77:	lea    rsi,[rip+0x46e4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406d7e:	lea    rcx,[rip+0x589f]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406d85:	mov    edx,0x5b1
  406d8a:	call   403060 <__assert_fail@plt>
  406d8f:	lea    rdi,[rip+0x588c]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406d96:	lea    rsi,[rip+0x46c5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406d9d:	lea    rcx,[rip+0x5880]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406da4:	mov    edx,0x5b7
  406da9:	call   403060 <__assert_fail@plt>
  406dae:	lea    rdi,[rip+0x58f2]        # 40c6a7 <flatcc_builder_padding_base@@Base+0x14c7>
  406db5:	lea    rsi,[rip+0x46a6]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406dbc:	lea    rcx,[rip+0x5861]        # 40c624 <flatcc_builder_padding_base@@Base+0x1444>
  406dc3:	mov    edx,0x5b5
  406dc8:	call   403060 <__assert_fail@plt>
  406dcd:	lea    rdi,[rip+0x584e]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406dd4:	lea    rsi,[rip+0x4687]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406ddb:	lea    rcx,[rip+0x56ff]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406de2:	mov    edx,0x287
  406de7:	call   403060 <__assert_fail@plt>
  406dec:	lea    rdi,[rip+0x582f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  406df3:	lea    rsi,[rip+0x4668]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406dfa:	lea    rcx,[rip+0x56e0]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  406e01:	mov    edx,0x28b
  406e06:	call   403060 <__assert_fail@plt>
  406e0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406e10 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406e10:	push   rbp
  406e11:	push   rbx
  406e12:	push   rax
  406e13:	mov    rcx,QWORD PTR [rdi+0x30]
  406e17:	movzx  edx,WORD PTR [rcx+0xe]
  406e1b:	cmp    edx,0x5
  406e1e:	jne    406eb1 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa1>
  406e24:	mov    rax,rsi
  406e27:	mov    rbx,rdi
  406e2a:	mov    rsi,QWORD PTR [rdi+0x18]
  406e2e:	mov    edx,DWORD PTR [rcx+0x14]
  406e31:	mov    rcx,rax
  406e34:	call   406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406e39:	mov    ebp,eax
  406e3b:	test   eax,eax
  406e3d:	je     406ea8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
  406e3f:	mov    rdi,QWORD PTR [rbx+0x18]
  406e43:	mov    edx,DWORD PTR [rbx+0x20]
  406e46:	xor    esi,esi
  406e48:	call   403070 <memset@plt>
  406e4d:	mov    rax,QWORD PTR [rbx+0x30]
  406e51:	mov    ecx,DWORD PTR [rax+0x8]
  406e54:	mov    DWORD PTR [rbx+0x20],ecx
  406e57:	mov    ecx,DWORD PTR [rax]
  406e59:	mov    DWORD PTR [rbx+0x28],ecx
  406e5c:	mov    edx,DWORD PTR [rax+0x4]
  406e5f:	mov    rsi,rcx
  406e62:	add    rsi,QWORD PTR [rbx+0x68]
  406e66:	mov    QWORD PTR [rbx+0x18],rsi
  406e6a:	mov    esi,DWORD PTR [rbx+0x70]
  406e6d:	sub    esi,ecx
  406e6f:	cmp    esi,edx
  406e71:	cmova  esi,edx
  406e74:	mov    DWORD PTR [rbx+0x24],esi
  406e77:	movzx  ecx,WORD PTR [rbx+0xea]
  406e7e:	cmp    WORD PTR [rbx+0xe8],cx
  406e85:	jae    406e8e <flatcc_builder_end_offset_vector_for_unions@@Base+0x7e>
  406e87:	mov    WORD PTR [rbx+0xe8],cx
  406e8e:	movzx  ecx,WORD PTR [rax+0xc]
  406e92:	mov    WORD PTR [rbx+0xea],cx
  406e99:	add    rax,0xffffffffffffffdc
  406e9d:	mov    QWORD PTR [rbx+0x30],rax
  406ea1:	add    DWORD PTR [rbx+0x104],0xffffffff
  406ea8:	mov    eax,ebp
  406eaa:	add    rsp,0x8
  406eae:	pop    rbx
  406eaf:	pop    rbp
  406eb0:	ret    
  406eb1:	lea    rdi,[rip+0x49e0]        # 40b898 <flatcc_builder_padding_base@@Base+0x6b8>
  406eb8:	lea    rsi,[rip+0x45a3]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406ebf:	lea    rcx,[rip+0x504b]        # 40bf11 <flatcc_builder_padding_base@@Base+0xd31>
  406ec6:	mov    edx,0x5d5
  406ecb:	call   403060 <__assert_fail@plt>

0000000000406ed0 <flatcc_builder_offset_vector_edit@@Base>:
  406ed0:	mov    rax,QWORD PTR [rdi+0x18]
  406ed4:	ret    
  406ed5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406edf:	nop

0000000000406ee0 <flatcc_builder_offset_vector_count@@Base>:
  406ee0:	mov    rax,QWORD PTR [rdi+0x30]
  406ee4:	mov    eax,DWORD PTR [rax+0x14]
  406ee7:	ret    
  406ee8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406ef0 <flatcc_builder_table_add_union@@Base>:
  406ef0:	push   rbp
  406ef1:	push   r15
  406ef3:	push   r14
  406ef5:	push   rbx
  406ef6:	push   rax
  406ef7:	mov    rax,QWORD PTR [rdi+0x30]
  406efb:	movzx  eax,WORD PTR [rax+0xe]
  406eff:	cmp    eax,0x3
  406f02:	jne    406f61 <flatcc_builder_table_add_union@@Base+0x71>
  406f04:	mov    r14,rdx
  406f07:	mov    ebp,esi
  406f09:	mov    r15,rdi
  406f0c:	mov    rbx,rdx
  406f0f:	shr    rbx,0x20
  406f13:	test   r14b,r14b
  406f16:	jne    406f1c <flatcc_builder_table_add_union@@Base+0x2c>
  406f18:	test   ebx,ebx
  406f1a:	jne    406f80 <flatcc_builder_table_add_union@@Base+0x90>
  406f1c:	test   ebx,ebx
  406f1e:	je     406f35 <flatcc_builder_table_add_union@@Base+0x45>
  406f20:	mov    rdi,r15
  406f23:	mov    esi,ebp
  406f25:	call   406fe0 <flatcc_builder_table_add_offset@@Base>
  406f2a:	test   rax,rax
  406f2d:	je     406fbe <flatcc_builder_table_add_union@@Base+0xce>
  406f33:	mov    DWORD PTR [rax],ebx
  406f35:	add    ebp,0xffffffff
  406f38:	mov    edx,0x1
  406f3d:	mov    ecx,0x1
  406f42:	mov    rdi,r15
  406f45:	mov    esi,ebp
  406f47:	call   407140 <flatcc_builder_table_add@@Base>
  406f4c:	test   rax,rax
  406f4f:	je     406f9f <flatcc_builder_table_add_union@@Base+0xaf>
  406f51:	mov    BYTE PTR [rax],r14b
  406f54:	xor    eax,eax
  406f56:	add    rsp,0x8
  406f5a:	pop    rbx
  406f5b:	pop    r14
  406f5d:	pop    r15
  406f5f:	pop    rbp
  406f60:	ret    
  406f61:	lea    rdi,[rip+0x4d29]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  406f68:	lea    rsi,[rip+0x44f3]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f6f:	lea    rcx,[rip+0x500d]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f76:	mov    edx,0x5ee
  406f7b:	call   403060 <__assert_fail@plt>
  406f80:	lea    rdi,[rip+0x5054]        # 40bfdb <flatcc_builder_padding_base@@Base+0xdfb>
  406f87:	lea    rsi,[rip+0x44d4]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406f8e:	lea    rcx,[rip+0x4fee]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406f95:	mov    edx,0x5ef
  406f9a:	call   403060 <__assert_fail@plt>
  406f9f:	lea    rdi,[rip+0x5061]        # 40c007 <flatcc_builder_padding_base@@Base+0xe27>
  406fa6:	lea    rsi,[rip+0x44b5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406fad:	lea    rcx,[rip+0x4fcf]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406fb4:	mov    edx,0x5f6
  406fb9:	call   403060 <__assert_fail@plt>
  406fbe:	lea    rdi,[rip+0x5038]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  406fc5:	lea    rsi,[rip+0x4496]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  406fcc:	lea    rcx,[rip+0x4fb0]        # 40bf83 <flatcc_builder_padding_base@@Base+0xda3>
  406fd3:	mov    edx,0x5f2
  406fd8:	call   403060 <__assert_fail@plt>
  406fdd:	nop    DWORD PTR [rax]

0000000000406fe0 <flatcc_builder_table_add_offset@@Base>:
  406fe0:	push   rbp
  406fe1:	push   r15
  406fe3:	push   r14
  406fe5:	push   rbx
  406fe6:	push   rax
  406fe7:	mov    rax,QWORD PTR [rdi+0x30]
  406feb:	movzx  eax,WORD PTR [rax+0xe]
  406fef:	cmp    eax,0x3
  406ff2:	jne    4070de <flatcc_builder_table_add_offset@@Base+0xfe>
  406ff8:	mov    r14d,esi
  406ffb:	cmp    esi,0x7ffd
  407001:	jae    4070fd <flatcc_builder_table_add_offset@@Base+0x11d>
  407007:	mov    rbx,rdi
  40700a:	mov    rax,QWORD PTR [rdi+0x8]
  40700e:	movsxd rcx,r14d
  407011:	cmp    WORD PTR [rax+rcx*2],0x0
  407016:	jne    40711c <flatcc_builder_table_add_offset@@Base+0x13c>
  40701c:	mov    ecx,DWORD PTR [rbx+0x14]
  40701f:	xor    ecx,r14d
  407022:	imul   ecx,ecx,0x9e3779b1
  407028:	xor    ecx,0x4
  40702b:	imul   ecx,ecx,0x9e3779b1
  407031:	mov    DWORD PTR [rbx+0x14],ecx
  407034:	mov    ebp,DWORD PTR [rbx+0x20]
  407037:	mov    ecx,DWORD PTR [rbx+0x24]
  40703a:	add    ebp,0x3
  40703d:	and    ebp,0xfffffffc
  407040:	lea    r15,[rbp+0x4]
  407044:	mov    DWORD PTR [rbx+0x20],r15d
  407048:	cmp    ecx,r15d
  40704b:	jae    4070a7 <flatcc_builder_table_add_offset@@Base+0xc7>
  40704d:	lea    eax,[rbp+0x4]
  407050:	lea    rsi,[rbx+0x68]
  407054:	mov    rdi,QWORD PTR [rbx+0x40]
  407058:	mov    edx,DWORD PTR [rbx+0x28]
  40705b:	add    rdx,rax
  40705e:	mov    ecx,0x1
  407063:	mov    r8d,0x1
  407069:	call   QWORD PTR [rbx+0x50]
  40706c:	test   eax,eax
  40706e:	je     407074 <flatcc_builder_table_add_offset@@Base+0x94>
  407070:	xor    ebp,ebp
  407072:	jmp    4070d0 <flatcc_builder_table_add_offset@@Base+0xf0>
  407074:	mov    eax,DWORD PTR [rbx+0x28]
  407077:	mov    rcx,rax
  40707a:	add    rcx,QWORD PTR [rbx+0x68]
  40707e:	mov    QWORD PTR [rbx+0x18],rcx
  407082:	mov    ecx,DWORD PTR [rbx+0x70]
  407085:	sub    ecx,eax
  407087:	cmp    ecx,0xfffc
  40708d:	mov    eax,0xfffc
  407092:	cmovb  eax,ecx
  407095:	mov    DWORD PTR [rbx+0x24],eax
  407098:	mov    rax,QWORD PTR [rbx+0x30]
  40709c:	mov    DWORD PTR [rax+0x4],0xfffc
  4070a3:	mov    rax,QWORD PTR [rbx+0x8]
  4070a7:	movzx  ecx,r14w
  4070ab:	mov    WORD PTR [rax+rcx*2],r15w
  4070b0:	cmp    WORD PTR [rbx+0x10],cx
  4070b4:	ja     4070bf <flatcc_builder_table_add_offset@@Base+0xdf>
  4070b6:	add    r14d,0x1
  4070ba:	mov    WORD PTR [rbx+0x10],r14w
  4070bf:	mov    rax,QWORD PTR [rbx]
  4070c2:	lea    rcx,[rax+0x2]
  4070c6:	mov    QWORD PTR [rbx],rcx
  4070c9:	mov    WORD PTR [rax],bp
  4070cc:	add    rbp,QWORD PTR [rbx+0x18]
  4070d0:	mov    rax,rbp
  4070d3:	add    rsp,0x8
  4070d7:	pop    rbx
  4070d8:	pop    r14
  4070da:	pop    r15
  4070dc:	pop    rbp
  4070dd:	ret    
  4070de:	lea    rdi,[rip+0x4bac]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4070e5:	lea    rsi,[rip+0x4376]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4070ec:	lea    rcx,[rip+0x5292]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  4070f3:	mov    edx,0x713
  4070f8:	call   403060 <__assert_fail@plt>
  4070fd:	lea    rdi,[rip+0x5201]        # 40c305 <flatcc_builder_padding_base@@Base+0x1125>
  407104:	lea    rsi,[rip+0x4357]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40710b:	lea    rcx,[rip+0x5273]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  407112:	mov    edx,0x714
  407117:	call   403060 <__assert_fail@plt>
  40711c:	lea    rdi,[rip+0x54ff]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  407123:	lea    rsi,[rip+0x4338]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40712a:	lea    rcx,[rip+0x5254]        # 40c385 <flatcc_builder_padding_base@@Base+0x11a5>
  407131:	mov    edx,0x71b
  407136:	call   403060 <__assert_fail@plt>
  40713b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407140 <flatcc_builder_table_add@@Base>:
  407140:	push   rbp
  407141:	push   r14
  407143:	push   rbx
  407144:	mov    rax,QWORD PTR [rdi+0x30]
  407148:	movzx  eax,WORD PTR [rax+0xe]
  40714c:	cmp    eax,0x3
  40714f:	jne    40723c <flatcc_builder_table_add@@Base+0xfc>
  407155:	mov    r14d,esi
  407158:	cmp    esi,0x7ffd
  40715e:	jae    40725b <flatcc_builder_table_add@@Base+0x11b>
  407164:	mov    rbx,rdi
  407167:	cmp    WORD PTR [rdi+0xea],cx
  40716e:	jae    407177 <flatcc_builder_table_add@@Base+0x37>
  407170:	mov    WORD PTR [rbx+0xea],cx
  407177:	mov    rsi,QWORD PTR [rbx+0x8]
  40717b:	movsxd rax,r14d
  40717e:	cmp    WORD PTR [rsi+rax*2],0x0
  407183:	jne    40727a <flatcc_builder_table_add@@Base+0x13a>
  407189:	mov    eax,DWORD PTR [rbx+0x14]
  40718c:	xor    eax,r14d
  40718f:	imul   eax,eax,0x9e3779b1
  407195:	xor    eax,edx
  407197:	imul   eax,eax,0x9e3779b1
  40719d:	mov    DWORD PTR [rbx+0x14],eax
  4071a0:	mov    eax,DWORD PTR [rbx+0x20]
  4071a3:	movzx  ebp,cx
  4071a6:	lea    eax,[rax+rbp*1]
  4071a9:	add    eax,0xffffffff
  4071ac:	neg    ebp
  4071ae:	and    ebp,eax
  4071b0:	add    edx,ebp
  4071b2:	mov    DWORD PTR [rbx+0x20],edx
  4071b5:	cmp    edx,DWORD PTR [rbx+0x24]
  4071b8:	jb     407217 <flatcc_builder_table_add@@Base+0xd7>
  4071ba:	add    edx,0x1
  4071bd:	lea    rsi,[rbx+0x68]
  4071c1:	mov    rdi,QWORD PTR [rbx+0x40]
  4071c5:	mov    eax,DWORD PTR [rbx+0x28]
  4071c8:	add    rax,rdx
  4071cb:	mov    ecx,0x1
  4071d0:	mov    r8d,0x1
  4071d6:	mov    rdx,rax
  4071d9:	call   QWORD PTR [rbx+0x50]
  4071dc:	test   eax,eax
  4071de:	je     4071e4 <flatcc_builder_table_add@@Base+0xa4>
  4071e0:	xor    eax,eax
  4071e2:	jmp    407237 <flatcc_builder_table_add@@Base+0xf7>
  4071e4:	mov    eax,DWORD PTR [rbx+0x28]
  4071e7:	mov    rcx,rax
  4071ea:	add    rcx,QWORD PTR [rbx+0x68]
  4071ee:	mov    QWORD PTR [rbx+0x18],rcx
  4071f2:	mov    ecx,DWORD PTR [rbx+0x70]
  4071f5:	sub    ecx,eax
  4071f7:	cmp    ecx,0xfffc
  4071fd:	mov    eax,0xfffc
  407202:	cmovb  eax,ecx
  407205:	mov    DWORD PTR [rbx+0x24],eax
  407208:	mov    rax,QWORD PTR [rbx+0x30]
  40720c:	mov    DWORD PTR [rax+0x4],0xfffc
  407213:	mov    rsi,QWORD PTR [rbx+0x8]
  407217:	mov    eax,ebp
  407219:	add    ebp,0x4
  40721c:	movzx  ecx,r14w
  407220:	mov    WORD PTR [rsi+rcx*2],bp
  407224:	cmp    WORD PTR [rbx+0x10],cx
  407228:	ja     407233 <flatcc_builder_table_add@@Base+0xf3>
  40722a:	add    r14d,0x1
  40722e:	mov    WORD PTR [rbx+0x10],r14w
  407233:	add    rax,QWORD PTR [rbx+0x18]
  407237:	pop    rbx
  407238:	pop    r14
  40723a:	pop    rbp
  40723b:	ret    
  40723c:	lea    rdi,[rip+0x4a4e]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  407243:	lea    rsi,[rip+0x4218]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40724a:	lea    rcx,[rip+0x506a]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  407251:	mov    edx,0x6ed
  407256:	call   403060 <__assert_fail@plt>
  40725b:	lea    rdi,[rip+0x50a3]        # 40c305 <flatcc_builder_padding_base@@Base+0x1125>
  407262:	lea    rsi,[rip+0x41f9]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407269:	lea    rcx,[rip+0x504b]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  407270:	mov    edx,0x6ee
  407275:	call   403060 <__assert_fail@plt>
  40727a:	lea    rdi,[rip+0x53a1]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  407281:	lea    rsi,[rip+0x41da]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407288:	lea    rcx,[rip+0x502c]        # 40c2bb <flatcc_builder_padding_base@@Base+0x10db>
  40728f:	mov    edx,0x6f8
  407294:	call   403060 <__assert_fail@plt>
  407299:	nop    DWORD PTR [rax+0x0]

00000000004072a0 <flatcc_builder_table_add_union_vector@@Base>:
  4072a0:	push   r15
  4072a2:	push   r14
  4072a4:	push   r12
  4072a6:	push   rbx
  4072a7:	push   rax
  4072a8:	mov    rax,QWORD PTR [rdi+0x30]
  4072ac:	movzx  eax,WORD PTR [rax+0xe]
  4072b0:	cmp    eax,0x3
  4072b3:	jne    407309 <flatcc_builder_table_add_union_vector@@Base+0x69>
  4072b5:	mov    rbx,rdx
  4072b8:	mov    r12,rdx
  4072bb:	shr    r12,0x20
  4072bf:	test   ebx,ebx
  4072c1:	sete   al
  4072c4:	test   r12d,r12d
  4072c7:	sete   cl
  4072ca:	cmp    al,cl
  4072cc:	jne    407328 <flatcc_builder_table_add_union_vector@@Base+0x88>
  4072ce:	test   ebx,ebx
  4072d0:	je     4072fb <flatcc_builder_table_add_union_vector@@Base+0x5b>
  4072d2:	mov    r14d,esi
  4072d5:	mov    r15,rdi
  4072d8:	lea    esi,[r14-0x1]
  4072dc:	call   406fe0 <flatcc_builder_table_add_offset@@Base>
  4072e1:	test   rax,rax
  4072e4:	je     407347 <flatcc_builder_table_add_union_vector@@Base+0xa7>
  4072e6:	mov    DWORD PTR [rax],ebx
  4072e8:	mov    rdi,r15
  4072eb:	mov    esi,r14d
  4072ee:	call   406fe0 <flatcc_builder_table_add_offset@@Base>
  4072f3:	test   rax,rax
  4072f6:	je     407366 <flatcc_builder_table_add_union_vector@@Base+0xc6>
  4072f8:	mov    DWORD PTR [rax],r12d
  4072fb:	xor    eax,eax
  4072fd:	add    rsp,0x8
  407301:	pop    rbx
  407302:	pop    r12
  407304:	pop    r14
  407306:	pop    r15
  407308:	ret    
  407309:	lea    rdi,[rip+0x4981]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  407310:	lea    rsi,[rip+0x414b]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407317:	lea    rcx,[rip+0x4cf5]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  40731e:	mov    edx,0x600
  407323:	call   403060 <__assert_fail@plt>
  407328:	lea    rdi,[rip+0x4d47]        # 40c076 <flatcc_builder_padding_base@@Base+0xe96>
  40732f:	lea    rsi,[rip+0x412c]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407336:	lea    rcx,[rip+0x4cd6]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  40733d:	mov    edx,0x601
  407342:	call   403060 <__assert_fail@plt>
  407347:	lea    rdi,[rip+0x4caf]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  40734e:	lea    rsi,[rip+0x410d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407355:	lea    rcx,[rip+0x4cb7]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  40735c:	mov    edx,0x604
  407361:	call   403060 <__assert_fail@plt>
  407366:	lea    rdi,[rip+0x4c90]        # 40bffd <flatcc_builder_padding_base@@Base+0xe1d>
  40736d:	lea    rsi,[rip+0x40ee]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407374:	lea    rcx,[rip+0x4c98]        # 40c013 <flatcc_builder_padding_base@@Base+0xe33>
  40737b:	mov    edx,0x608
  407380:	call   403060 <__assert_fail@plt>
  407385:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40738f:	nop

0000000000407390 <flatcc_builder_create_union_vector@@Base>:
  407390:	push   r15
  407392:	push   r14
  407394:	push   r13
  407396:	push   r12
  407398:	push   rbx
  407399:	mov    r14,rdx
  40739c:	mov    r15,rsi
  40739f:	mov    rbx,rdi
  4073a2:	mov    esi,0x4
  4073a7:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  4073ac:	test   eax,eax
  4073ae:	je     4073c0 <flatcc_builder_create_union_vector@@Base+0x30>
  4073b0:	xor    r14d,r14d
  4073b3:	mov    rax,r14
  4073b6:	pop    rbx
  4073b7:	pop    r12
  4073b9:	pop    r13
  4073bb:	pop    r14
  4073bd:	pop    r15
  4073bf:	ret    
  4073c0:	mov    rax,QWORD PTR [rbx+0x30]
  4073c4:	mov    DWORD PTR [rax+0x10],0x4
  4073cb:	mov    rax,QWORD PTR [rbx+0x30]
  4073cf:	mov    DWORD PTR [rax+0x14],0x0
  4073d6:	mov    rax,QWORD PTR [rbx+0x30]
  4073da:	mov    WORD PTR [rax+0xe],0x5
  4073e0:	mov    ecx,DWORD PTR [rbx+0x28]
  4073e3:	mov    edx,DWORD PTR [rbx+0x70]
  4073e6:	sub    edx,ecx
  4073e8:	add    rcx,QWORD PTR [rbx+0x68]
  4073ec:	mov    QWORD PTR [rbx+0x18],rcx
  4073f0:	cmp    edx,0xfffffffc
  4073f3:	mov    ecx,0xfffffffc
  4073f8:	cmovb  ecx,edx
  4073fb:	mov    DWORD PTR [rbx+0x24],ecx
  4073fe:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407405:	mov    ecx,DWORD PTR [rax+0x14]
  407408:	add    ecx,r14d
  40740b:	jb     40767a <flatcc_builder_create_union_vector@@Base+0x2ea>
  407411:	cmp    ecx,0x40000000
  407417:	jae    40767a <flatcc_builder_create_union_vector@@Base+0x2ea>
  40741d:	mov    DWORD PTR [rax+0x14],ecx
  407420:	mov    r12d,DWORD PTR [rbx+0x20]
  407424:	mov    eax,DWORD PTR [rbx+0x24]
  407427:	lea    ecx,[r12+r14*4]
  40742b:	mov    DWORD PTR [rbx+0x20],ecx
  40742e:	cmp    ecx,eax
  407430:	jae    407440 <flatcc_builder_create_union_vector@@Base+0xb0>
  407432:	mov    rsi,QWORD PTR [rbx+0x18]
  407436:	add    r12,rsi
  407439:	jne    40749c <flatcc_builder_create_union_vector@@Base+0x10c>
  40743b:	jmp    4073b0 <flatcc_builder_create_union_vector@@Base+0x20>
  407440:	add    ecx,0x1
  407443:	lea    rsi,[rbx+0x68]
  407447:	mov    rdi,QWORD PTR [rbx+0x40]
  40744b:	mov    edx,DWORD PTR [rbx+0x28]
  40744e:	add    rdx,rcx
  407451:	mov    ecx,0x1
  407456:	mov    r8d,0x1
  40745c:	call   QWORD PTR [rbx+0x50]
  40745f:	test   eax,eax
  407461:	jne    4073b0 <flatcc_builder_create_union_vector@@Base+0x20>
  407467:	mov    eax,DWORD PTR [rbx+0x28]
  40746a:	mov    rsi,rax
  40746d:	add    rsi,QWORD PTR [rbx+0x68]
  407471:	mov    QWORD PTR [rbx+0x18],rsi
  407475:	mov    ecx,DWORD PTR [rbx+0x70]
  407478:	sub    ecx,eax
  40747a:	cmp    ecx,0xfffffffc
  40747d:	mov    eax,0xfffffffc
  407482:	cmovb  eax,ecx
  407485:	mov    DWORD PTR [rbx+0x24],eax
  407488:	mov    rcx,QWORD PTR [rbx+0x30]
  40748c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407493:	add    r12,rsi
  407496:	je     4073b0 <flatcc_builder_create_union_vector@@Base+0x20>
  40749c:	mov    r13d,DWORD PTR [rbx+0x20]
  4074a0:	lea    ecx,[r14+r13*1]
  4074a4:	mov    DWORD PTR [rbx+0x20],ecx
  4074a7:	cmp    ecx,eax
  4074a9:	jb     4074fe <flatcc_builder_create_union_vector@@Base+0x16e>
  4074ab:	add    ecx,0x1
  4074ae:	lea    rsi,[rbx+0x68]
  4074b2:	mov    rdi,QWORD PTR [rbx+0x40]
  4074b6:	mov    edx,DWORD PTR [rbx+0x28]
  4074b9:	add    rdx,rcx
  4074bc:	mov    ecx,0x1
  4074c1:	mov    r8d,0x1
  4074c7:	call   QWORD PTR [rbx+0x50]
  4074ca:	test   eax,eax
  4074cc:	jne    4073b0 <flatcc_builder_create_union_vector@@Base+0x20>
  4074d2:	mov    eax,DWORD PTR [rbx+0x28]
  4074d5:	mov    rsi,rax
  4074d8:	add    rsi,QWORD PTR [rbx+0x68]
  4074dc:	mov    QWORD PTR [rbx+0x18],rsi
  4074e0:	mov    ecx,DWORD PTR [rbx+0x70]
  4074e3:	sub    ecx,eax
  4074e5:	cmp    ecx,0xfffffffc
  4074e8:	mov    eax,0xfffffffc
  4074ed:	cmovb  eax,ecx
  4074f0:	mov    DWORD PTR [rbx+0x24],eax
  4074f3:	mov    rax,QWORD PTR [rbx+0x30]
  4074f7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4074fe:	mov    r12,rsi
  407501:	add    r12,r13
  407504:	je     4073b0 <flatcc_builder_create_union_vector@@Base+0x20>
  40750a:	test   r14,r14
  40750d:	je     4075c9 <flatcc_builder_create_union_vector@@Base+0x239>
  407513:	lea    rcx,[r14-0x1]
  407517:	mov    r8d,r14d
  40751a:	and    r8d,0x3
  40751e:	cmp    rcx,0x3
  407522:	jae    407530 <flatcc_builder_create_union_vector@@Base+0x1a0>
  407524:	xor    ecx,ecx
  407526:	test   r8,r8
  407529:	jne    407597 <flatcc_builder_create_union_vector@@Base+0x207>
  40752b:	jmp    4075c9 <flatcc_builder_create_union_vector@@Base+0x239>
  407530:	mov    rdx,r14
  407533:	sub    rdx,r8
  407536:	lea    rdi,[rsi+r13*1]
  40753a:	add    rdi,0x3
  40753e:	xor    ecx,ecx
  407540:	movzx  eax,BYTE PTR [r15+rcx*8]
  407545:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407549:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40754e:	mov    DWORD PTR [rsi+rcx*4],eax
  407551:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407557:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40755b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407560:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407564:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40756a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40756e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407573:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407577:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40757d:	mov    BYTE PTR [rdi+rcx*1],al
  407580:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407585:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407589:	add    rcx,0x4
  40758d:	cmp    rdx,rcx
  407590:	jne    407540 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407592:	test   r8,r8
  407595:	je     4075c9 <flatcc_builder_create_union_vector@@Base+0x239>
  407597:	lea    rdx,[rsi+rcx*4]
  40759b:	lea    rdi,[r15+rcx*8]
  40759f:	add    rdi,0x4
  4075a3:	add    r13,rcx
  4075a6:	add    r13,rsi
  4075a9:	xor    ecx,ecx
  4075ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4075b0:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  4075b5:	mov    BYTE PTR [r13+rcx*1+0x0],al
  4075ba:	mov    eax,DWORD PTR [rdi+rcx*8]
  4075bd:	mov    DWORD PTR [rdx+rcx*4],eax
  4075c0:	add    rcx,0x1
  4075c4:	cmp    r8,rcx
  4075c7:	jne    4075b0 <flatcc_builder_create_union_vector@@Base+0x220>
  4075c9:	mov    rdi,rbx
  4075cc:	mov    rdx,r14
  4075cf:	mov    rcx,r12
  4075d2:	call   406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4075d7:	mov    r15d,eax
  4075da:	test   eax,eax
  4075dc:	je     407602 <flatcc_builder_create_union_vector@@Base+0x272>
  4075de:	mov    ecx,0x1
  4075e3:	mov    r8d,0x1
  4075e9:	mov    r9d,0xffffffff
  4075ef:	mov    rdi,rbx
  4075f2:	mov    rsi,r12
  4075f5:	mov    rdx,r14
  4075f8:	call   406960 <flatcc_builder_create_vector@@Base>
  4075fd:	mov    r14d,eax
  407600:	jmp    407605 <flatcc_builder_create_union_vector@@Base+0x275>
  407602:	xor    r14d,r14d
  407605:	shl    r15,0x20
  407609:	mov    rdi,QWORD PTR [rbx+0x18]
  40760d:	mov    edx,DWORD PTR [rbx+0x20]
  407610:	xor    esi,esi
  407612:	call   403070 <memset@plt>
  407617:	mov    rax,QWORD PTR [rbx+0x30]
  40761b:	mov    ecx,DWORD PTR [rax+0x8]
  40761e:	mov    DWORD PTR [rbx+0x20],ecx
  407621:	mov    ecx,DWORD PTR [rax]
  407623:	mov    DWORD PTR [rbx+0x28],ecx
  407626:	mov    edx,DWORD PTR [rax+0x4]
  407629:	mov    rsi,rcx
  40762c:	add    rsi,QWORD PTR [rbx+0x68]
  407630:	mov    QWORD PTR [rbx+0x18],rsi
  407634:	mov    esi,DWORD PTR [rbx+0x70]
  407637:	sub    esi,ecx
  407639:	cmp    esi,edx
  40763b:	cmova  esi,edx
  40763e:	mov    DWORD PTR [rbx+0x24],esi
  407641:	movzx  ecx,WORD PTR [rbx+0xea]
  407648:	cmp    WORD PTR [rbx+0xe8],cx
  40764f:	jae    407658 <flatcc_builder_create_union_vector@@Base+0x2c8>
  407651:	mov    WORD PTR [rbx+0xe8],cx
  407658:	or     r14,r15
  40765b:	movzx  ecx,WORD PTR [rax+0xc]
  40765f:	mov    WORD PTR [rbx+0xea],cx
  407666:	add    rax,0xffffffffffffffdc
  40766a:	mov    QWORD PTR [rbx+0x30],rax
  40766e:	add    DWORD PTR [rbx+0x104],0xffffffff
  407675:	jmp    4073b3 <flatcc_builder_create_union_vector@@Base+0x23>
  40767a:	lea    rdi,[rip+0x4eaa]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  407681:	lea    rsi,[rip+0x3dda]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407688:	lea    rcx,[rip+0x4eb7]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  40768f:	mov    edx,0x37c
  407694:	call   403060 <__assert_fail@plt>
  407699:	nop    DWORD PTR [rax+0x0]

00000000004076a0 <flatcc_builder_create_union_vector_direct@@Base>:
  4076a0:	push   r15
  4076a2:	push   r14
  4076a4:	push   r12
  4076a6:	push   rbx
  4076a7:	push   rax
  4076a8:	mov    r14,rcx
  4076ab:	mov    r15,rsi
  4076ae:	mov    r12,rdi
  4076b1:	mov    rsi,rdx
  4076b4:	mov    rdx,rcx
  4076b7:	mov    rcx,r15
  4076ba:	call   406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4076bf:	mov    ebx,eax
  4076c1:	test   eax,eax
  4076c3:	je     4076e8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  4076c5:	mov    ecx,0x1
  4076ca:	mov    r8d,0x1
  4076d0:	mov    r9d,0xffffffff
  4076d6:	mov    rdi,r12
  4076d9:	mov    rsi,r15
  4076dc:	mov    rdx,r14
  4076df:	call   406960 <flatcc_builder_create_vector@@Base>
  4076e4:	mov    eax,eax
  4076e6:	jmp    4076ea <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  4076e8:	xor    eax,eax
  4076ea:	shl    rbx,0x20
  4076ee:	or     rbx,rax
  4076f1:	mov    rax,rbx
  4076f4:	add    rsp,0x8
  4076f8:	pop    rbx
  4076f9:	pop    r12
  4076fb:	pop    r14
  4076fd:	pop    r15
  4076ff:	ret    

0000000000407700 <flatcc_builder_start_union_vector@@Base>:
  407700:	push   rbx
  407701:	mov    rbx,rdi
  407704:	mov    esi,0x4
  407709:	call   404bd0 <flatcc_builder_start_buffer@@Base+0xe0>
  40770e:	mov    ecx,eax
  407710:	mov    eax,0xffffffff
  407715:	test   ecx,ecx
  407717:	je     40771b <flatcc_builder_start_union_vector@@Base+0x1b>
  407719:	pop    rbx
  40771a:	ret    
  40771b:	mov    rax,QWORD PTR [rbx+0x30]
  40771f:	mov    DWORD PTR [rax+0x10],0x8
  407726:	mov    rax,QWORD PTR [rbx+0x30]
  40772a:	mov    DWORD PTR [rax+0x14],0x0
  407731:	mov    rax,QWORD PTR [rbx+0x30]
  407735:	mov    WORD PTR [rax+0xe],0x7
  40773b:	mov    ecx,DWORD PTR [rbx+0x28]
  40773e:	mov    edx,DWORD PTR [rbx+0x70]
  407741:	sub    edx,ecx
  407743:	add    rcx,QWORD PTR [rbx+0x68]
  407747:	mov    QWORD PTR [rbx+0x18],rcx
  40774b:	cmp    edx,0xfffffffc
  40774e:	mov    ecx,0xfffffffc
  407753:	cmovb  ecx,edx
  407756:	mov    DWORD PTR [rbx+0x24],ecx
  407759:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407760:	xor    eax,eax
  407762:	pop    rbx
  407763:	ret    
  407764:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40776e:	xchg   ax,ax

0000000000407770 <flatcc_builder_end_union_vector@@Base>:
  407770:	push   rbp
  407771:	push   r15
  407773:	push   r14
  407775:	push   r13
  407777:	push   r12
  407779:	push   rbx
  40777a:	push   rax
  40777b:	mov    rax,QWORD PTR [rdi+0x30]
  40777f:	movzx  ecx,WORD PTR [rax+0xe]
  407783:	cmp    ecx,0x7
  407786:	jne    407b86 <flatcc_builder_end_union_vector@@Base+0x416>
  40778c:	mov    r13,rdi
  40778f:	mov    r14d,DWORD PTR [rax+0x14]
  407793:	lea    eax,[r14+r14*4]
  407797:	mov    r12d,DWORD PTR [rdi+0x20]
  40779b:	add    eax,r12d
  40779e:	mov    DWORD PTR [rdi+0x20],eax
  4077a1:	cmp    eax,DWORD PTR [rdi+0x24]
  4077a4:	jae    4077ac <flatcc_builder_end_union_vector@@Base+0x3c>
  4077a6:	mov    r8,QWORD PTR [r13+0x18]
  4077aa:	jmp    407804 <flatcc_builder_end_union_vector@@Base+0x94>
  4077ac:	add    eax,0x1
  4077af:	lea    rsi,[r13+0x68]
  4077b3:	mov    rdi,QWORD PTR [r13+0x40]
  4077b7:	mov    edx,DWORD PTR [r13+0x28]
  4077bb:	add    rdx,rax
  4077be:	mov    ecx,0x1
  4077c3:	mov    r8d,0x1
  4077c9:	call   QWORD PTR [r13+0x50]
  4077cd:	test   eax,eax
  4077cf:	jne    407946 <flatcc_builder_end_union_vector@@Base+0x1d6>
  4077d5:	mov    eax,DWORD PTR [r13+0x28]
  4077d9:	mov    r8,rax
  4077dc:	add    r8,QWORD PTR [r13+0x68]
  4077e0:	mov    QWORD PTR [r13+0x18],r8
  4077e4:	mov    ecx,DWORD PTR [r13+0x70]
  4077e8:	sub    ecx,eax
  4077ea:	cmp    ecx,0xfffffffc
  4077ed:	mov    eax,0xfffffffc
  4077f2:	cmovb  eax,ecx
  4077f5:	mov    DWORD PTR [r13+0x24],eax
  4077f9:	mov    rax,QWORD PTR [r13+0x30]
  4077fd:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407804:	mov    rsi,r8
  407807:	add    rsi,r12
  40780a:	je     407946 <flatcc_builder_end_union_vector@@Base+0x1d6>
  407810:	lea    r15,[rsi+r14*4]
  407814:	test   r14d,r14d
  407817:	je     40790a <flatcc_builder_end_union_vector@@Base+0x19a>
  40781d:	cmp    r14d,0x9
  407821:	jae    4079da <flatcc_builder_end_union_vector@@Base+0x26a>
  407827:	xor    r9d,r9d
  40782a:	mov    r11d,r14d
  40782d:	sub    r11d,r9d
  407830:	mov    r10,r9
  407833:	not    r10
  407836:	add    r10,r14
  407839:	and    r11,0x3
  40783d:	je     407882 <flatcc_builder_end_union_vector@@Base+0x112>
  40783f:	mov    rdx,r9
  407842:	neg    rdx
  407845:	lea    rbp,[r12+r9*4]
  407849:	add    rbp,r8
  40784c:	lea    rbx,[r8+r9*8]
  407850:	add    rbx,0x4
  407854:	lea    rax,[r9+r14*4]
  407858:	add    rax,r12
  40785b:	add    rax,r8
  40785e:	xor    edi,edi
  407860:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407865:	mov    BYTE PTR [rax+rdi*1],cl
  407868:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40786b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40786f:	add    rdx,0xffffffffffffffff
  407873:	add    rdi,0x1
  407877:	cmp    r11,rdi
  40787a:	jne    407860 <flatcc_builder_end_union_vector@@Base+0xf0>
  40787c:	neg    rdx
  40787f:	mov    r9,rdx
  407882:	cmp    r10,0x3
  407886:	jb     40790a <flatcc_builder_end_union_vector@@Base+0x19a>
  40788c:	mov    rbp,r14
  40788f:	sub    rbp,r9
  407892:	lea    rcx,[r12+r9*4]
  407896:	lea    rdx,[r8+rcx*1]
  40789a:	add    rdx,0xc
  40789e:	lea    rdi,[r8+r9*8]
  4078a2:	add    rdi,0x1c
  4078a6:	lea    rcx,[r9+r14*4]
  4078aa:	add    rcx,r12
  4078ad:	add    rcx,r8
  4078b0:	add    rcx,0x3
  4078b4:	xor    ebx,ebx
  4078b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4078c0:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  4078c5:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  4078c9:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  4078cd:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  4078d1:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  4078d6:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  4078da:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  4078de:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  4078e2:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  4078e7:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  4078eb:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  4078ef:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  4078f3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  4078f8:	mov    BYTE PTR [rcx+rbx*1],al
  4078fb:	mov    eax,DWORD PTR [rdi+rbx*8]
  4078fe:	mov    DWORD PTR [rdx+rbx*4],eax
  407901:	add    rbx,0x4
  407905:	cmp    rbp,rbx
  407908:	jne    4078c0 <flatcc_builder_end_union_vector@@Base+0x150>
  40790a:	mov    rdi,r13
  40790d:	mov    rdx,r14
  407910:	mov    rcx,r15
  407913:	vzeroupper 
  407916:	call   406be0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40791b:	mov    r12d,eax
  40791e:	test   eax,eax
  407920:	je     40794b <flatcc_builder_end_union_vector@@Base+0x1db>
  407922:	mov    ecx,0x1
  407927:	mov    r8d,0x1
  40792d:	mov    r9d,0xffffffff
  407933:	mov    rdi,r13
  407936:	mov    rsi,r15
  407939:	mov    rdx,r14
  40793c:	call   406960 <flatcc_builder_create_vector@@Base>
  407941:	mov    r14d,eax
  407944:	jmp    40794e <flatcc_builder_end_union_vector@@Base+0x1de>
  407946:	xor    r14d,r14d
  407949:	jmp    4079c8 <flatcc_builder_end_union_vector@@Base+0x258>
  40794b:	xor    r14d,r14d
  40794e:	shl    r12,0x20
  407952:	mov    rdi,QWORD PTR [r13+0x18]
  407956:	mov    edx,DWORD PTR [r13+0x20]
  40795a:	xor    esi,esi
  40795c:	call   403070 <memset@plt>
  407961:	mov    rax,QWORD PTR [r13+0x30]
  407965:	mov    ecx,DWORD PTR [rax+0x8]
  407968:	mov    DWORD PTR [r13+0x20],ecx
  40796c:	mov    ecx,DWORD PTR [rax]
  40796e:	mov    DWORD PTR [r13+0x28],ecx
  407972:	mov    edx,DWORD PTR [rax+0x4]
  407975:	mov    rsi,rcx
  407978:	add    rsi,QWORD PTR [r13+0x68]
  40797c:	mov    QWORD PTR [r13+0x18],rsi
  407980:	mov    esi,DWORD PTR [r13+0x70]
  407984:	sub    esi,ecx
  407986:	cmp    esi,edx
  407988:	cmova  esi,edx
  40798b:	mov    DWORD PTR [r13+0x24],esi
  40798f:	movzx  ecx,WORD PTR [r13+0xea]
  407997:	cmp    WORD PTR [r13+0xe8],cx
  40799f:	jae    4079a9 <flatcc_builder_end_union_vector@@Base+0x239>
  4079a1:	mov    WORD PTR [r13+0xe8],cx
  4079a9:	or     r14,r12
  4079ac:	movzx  ecx,WORD PTR [rax+0xc]
  4079b0:	mov    WORD PTR [r13+0xea],cx
  4079b8:	add    rax,0xffffffffffffffdc
  4079bc:	mov    QWORD PTR [r13+0x30],rax
  4079c0:	add    DWORD PTR [r13+0x104],0xffffffff
  4079c8:	mov    rax,r14
  4079cb:	add    rsp,0x8
  4079cf:	pop    rbx
  4079d0:	pop    r12
  4079d2:	pop    r13
  4079d4:	pop    r14
  4079d6:	pop    r15
  4079d8:	pop    rbp
  4079d9:	ret    
  4079da:	lea    rax,[r14-0x1]
  4079de:	mov    ecx,0x8
  4079e3:	mul    rcx
  4079e6:	seto   cl
  4079e9:	lea    rdi,[r8+0x4]
  4079ed:	mov    rdx,rax
  4079f0:	add    rdx,rdi
  4079f3:	setb   dl
  4079f6:	xor    r9d,r9d
  4079f9:	add    rax,r8
  4079fc:	jb     40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a02:	test   cl,cl
  407a04:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a0a:	test   dl,dl
  407a0c:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a12:	test   cl,cl
  407a14:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a1a:	lea    rcx,[r14+r14*4]
  407a1e:	add    rcx,r12
  407a21:	add    rcx,r8
  407a24:	lea    rdx,[r8+r14*8]
  407a28:	add    rdx,0xfffffffffffffff9
  407a2c:	cmp    rdx,r15
  407a2f:	seta   r11b
  407a33:	lea    rbx,[r8+r14*8]
  407a37:	cmp    r8,rcx
  407a3a:	setb   r10b
  407a3e:	cmp    rbx,r15
  407a41:	seta   al
  407a44:	cmp    rdi,rcx
  407a47:	setb   bpl
  407a4b:	cmp    rsi,rdx
  407a4e:	setb   cl
  407a51:	cmp    r8,r15
  407a54:	setb   BYTE PTR [rsp+0x7]
  407a59:	cmp    rsi,rbx
  407a5c:	setb   dl
  407a5f:	cmp    rdi,r15
  407a62:	setb   dil
  407a66:	xor    r9d,r9d
  407a69:	test   r11b,r10b
  407a6c:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a72:	and    al,bpl
  407a75:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a7b:	and    cl,BYTE PTR [rsp+0x7]
  407a7f:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a85:	and    dl,dil
  407a88:	jne    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407a8e:	mov    eax,r14d
  407a91:	and    eax,0x7
  407a94:	test   rax,rax
  407a97:	mov    ecx,0x8
  407a9c:	cmovne rcx,rax
  407aa0:	mov    r9,r14
  407aa3:	sub    r9,rcx
  407aa6:	vmovdqa ymm0,YMMWORD PTR [rip+0x3932]        # 40b3e0 <flatcc_builder_padding_base@@Base+0x200>
  407aae:	vmovdqa ymm1,YMMWORD PTR [rip+0x394a]        # 40b400 <flatcc_builder_padding_base@@Base+0x220>
  407ab6:	xor    eax,eax
  407ab8:	vmovdqa xmm8,XMMWORD PTR [rip+0x3960]        # 40b420 <flatcc_builder_padding_base@@Base+0x240>
  407ac0:	vmovdqa xmm9,XMMWORD PTR [rip+0x3968]        # 40b430 <flatcc_builder_padding_base@@Base+0x250>
  407ac8:	vpbroadcastq ymm4,QWORD PTR [rip+0x396f]        # 40b440 <flatcc_builder_padding_base@@Base+0x260>
  407ad1:	vpbroadcastq ymm5,QWORD PTR [rip+0x396e]        # 40b448 <flatcc_builder_padding_base@@Base+0x268>
  407ada:	mov    rdi,r8
  407add:	nop    DWORD PTR [rax]
  407ae0:	vmovdqu ymm6,YMMWORD PTR [rdi]
  407ae4:	vmovdqu ymm7,YMMWORD PTR [rdi+0x20]
  407ae9:	vextracti128 xmm2,ymm7,0x1
  407aef:	vpshufb xmm2,xmm2,xmm8
  407af4:	vpshufb xmm7,xmm7,xmm8
  407af9:	vpunpcklwd xmm2,xmm7,xmm2
  407afd:	vextracti128 xmm7,ymm6,0x1
  407b03:	vpshufb xmm7,xmm7,xmm9
  407b08:	vpshufb xmm6,xmm6,xmm9
  407b0d:	vpunpcklwd xmm6,xmm6,xmm7
  407b11:	vpblendd xmm2,xmm6,xmm2,0x2
  407b17:	vmovq  QWORD PTR [r15+rax*1],xmm2
  407b1d:	vpsllq ymm2,ymm1,0x3
  407b22:	vmovq  xmm6,r8
  407b27:	vpbroadcastq ymm6,xmm6
  407b2c:	vpaddq ymm2,ymm6,ymm2
  407b30:	vpaddq ymm2,ymm2,ymm4
  407b34:	vpsllq ymm7,ymm0,0x3
  407b39:	vpaddq ymm6,ymm6,ymm7
  407b3d:	vpaddq ymm6,ymm6,ymm4
  407b41:	vpcmpeqd xmm7,xmm7,xmm7
  407b45:	vpgatherqd xmm3,DWORD PTR [ymm6*1+0x0],xmm7
  407b4f:	vpcmpeqd xmm6,xmm6,xmm6
  407b53:	vpgatherqd xmm7,DWORD PTR [ymm2*1+0x0],xmm6
  407b5d:	vinserti128 ymm2,ymm7,xmm3,0x1
  407b63:	vmovdqu YMMWORD PTR [rsi+rax*4],ymm2
  407b68:	add    rax,0x8
  407b6c:	vpaddq ymm1,ymm1,ymm5
  407b70:	vpaddq ymm0,ymm0,ymm5
  407b74:	add    rdi,0x40
  407b78:	cmp    r9,rax
  407b7b:	jne    407ae0 <flatcc_builder_end_union_vector@@Base+0x370>
  407b81:	jmp    40782a <flatcc_builder_end_union_vector@@Base+0xba>
  407b86:	lea    rdi,[rip+0x4511]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407b8d:	lea    rsi,[rip+0x38ce]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407b94:	lea    rcx,[rip+0x4535]        # 40c0d0 <flatcc_builder_padding_base@@Base+0xef0>
  407b9b:	mov    edx,0x651
  407ba0:	call   403060 <__assert_fail@plt>
  407ba5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407baf:	nop

0000000000407bb0 <flatcc_builder_union_vector_count@@Base>:
  407bb0:	mov    rax,QWORD PTR [rdi+0x30]
  407bb4:	mov    eax,DWORD PTR [rax+0x14]
  407bb7:	ret    
  407bb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407bc0 <flatcc_builder_union_vector_edit@@Base>:
  407bc0:	mov    rax,QWORD PTR [rdi+0x18]
  407bc4:	ret    
  407bc5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407bcf:	nop

0000000000407bd0 <flatcc_builder_extend_union_vector@@Base>:
  407bd0:	push   r14
  407bd2:	push   rbx
  407bd3:	push   rax
  407bd4:	mov    rax,QWORD PTR [rdi+0x30]
  407bd8:	mov    ecx,DWORD PTR [rax+0x14]
  407bdb:	add    ecx,esi
  407bdd:	jb     407c65 <flatcc_builder_extend_union_vector@@Base+0x95>
  407be3:	cmp    ecx,0x20000000
  407be9:	jae    407c65 <flatcc_builder_extend_union_vector@@Base+0x95>
  407beb:	mov    rbx,rdi
  407bee:	mov    DWORD PTR [rax+0x14],ecx
  407bf1:	mov    r14d,DWORD PTR [rdi+0x20]
  407bf5:	lea    eax,[r14+rsi*8]
  407bf9:	mov    DWORD PTR [rdi+0x20],eax
  407bfc:	cmp    eax,DWORD PTR [rdi+0x24]
  407bff:	jae    407c07 <flatcc_builder_extend_union_vector@@Base+0x37>
  407c01:	mov    rax,QWORD PTR [rbx+0x18]
  407c05:	jmp    407c5a <flatcc_builder_extend_union_vector@@Base+0x8a>
  407c07:	add    eax,0x1
  407c0a:	lea    rsi,[rbx+0x68]
  407c0e:	mov    rdi,QWORD PTR [rbx+0x40]
  407c12:	mov    edx,DWORD PTR [rbx+0x28]
  407c15:	add    rdx,rax
  407c18:	mov    ecx,0x1
  407c1d:	mov    r8d,0x1
  407c23:	call   QWORD PTR [rbx+0x50]
  407c26:	test   eax,eax
  407c28:	je     407c2e <flatcc_builder_extend_union_vector@@Base+0x5e>
  407c2a:	xor    eax,eax
  407c2c:	jmp    407c5d <flatcc_builder_extend_union_vector@@Base+0x8d>
  407c2e:	mov    ecx,DWORD PTR [rbx+0x28]
  407c31:	mov    rax,rcx
  407c34:	add    rax,QWORD PTR [rbx+0x68]
  407c38:	mov    QWORD PTR [rbx+0x18],rax
  407c3c:	mov    edx,DWORD PTR [rbx+0x70]
  407c3f:	sub    edx,ecx
  407c41:	cmp    edx,0xfffffffc
  407c44:	mov    ecx,0xfffffffc
  407c49:	cmovb  ecx,edx
  407c4c:	mov    DWORD PTR [rbx+0x24],ecx
  407c4f:	mov    rcx,QWORD PTR [rbx+0x30]
  407c53:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407c5a:	add    rax,r14
  407c5d:	add    rsp,0x8
  407c61:	pop    rbx
  407c62:	pop    r14
  407c64:	ret    
  407c65:	lea    rdi,[rip+0x48bf]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  407c6c:	lea    rsi,[rip+0x37ef]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407c73:	lea    rcx,[rip+0x48cc]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  407c7a:	mov    edx,0x37c
  407c7f:	call   403060 <__assert_fail@plt>
  407c84:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c8e:	xchg   ax,ax

0000000000407c90 <flatcc_builder_truncate_union_vector@@Base>:
  407c90:	push   rax
  407c91:	mov    rcx,QWORD PTR [rdi+0x30]
  407c95:	movzx  edx,WORD PTR [rcx+0xe]
  407c99:	cmp    edx,0x7
  407c9c:	jne    407cd0 <flatcc_builder_truncate_union_vector@@Base+0x40>
  407c9e:	mov    rax,rsi
  407ca1:	mov    edx,DWORD PTR [rcx+0x14]
  407ca4:	sub    edx,eax
  407ca6:	jb     407cef <flatcc_builder_truncate_union_vector@@Base+0x5f>
  407ca8:	mov    DWORD PTR [rcx+0x14],edx
  407cab:	mov    rcx,QWORD PTR [rdi+0x30]
  407caf:	imul   eax,DWORD PTR [rcx+0x10]
  407cb3:	mov    ecx,DWORD PTR [rdi+0x20]
  407cb6:	sub    ecx,eax
  407cb8:	mov    DWORD PTR [rdi+0x20],ecx
  407cbb:	add    rcx,QWORD PTR [rdi+0x18]
  407cbf:	xor    esi,esi
  407cc1:	mov    rdi,rcx
  407cc4:	mov    rdx,rax
  407cc7:	call   403070 <memset@plt>
  407ccc:	xor    eax,eax
  407cce:	pop    rcx
  407ccf:	ret    
  407cd0:	lea    rdi,[rip+0x43c7]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407cd7:	lea    rsi,[rip+0x3784]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407cde:	lea    rcx,[rip+0x443e]        # 40c123 <flatcc_builder_padding_base@@Base+0xf43>
  407ce5:	mov    edx,0x681
  407cea:	call   403060 <__assert_fail@plt>
  407cef:	lea    rdi,[rip+0x3e0c]        # 40bb02 <flatcc_builder_padding_base@@Base+0x922>
  407cf6:	lea    rsi,[rip+0x3765]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407cfd:	lea    rcx,[rip+0x441f]        # 40c123 <flatcc_builder_padding_base@@Base+0xf43>
  407d04:	mov    edx,0x682
  407d09:	call   403060 <__assert_fail@plt>
  407d0e:	xchg   ax,ax

0000000000407d10 <flatcc_builder_union_vector_push@@Base>:
  407d10:	push   r15
  407d12:	push   r14
  407d14:	push   rbx
  407d15:	mov    rax,QWORD PTR [rdi+0x30]
  407d19:	movzx  ecx,WORD PTR [rax+0xe]
  407d1d:	cmp    ecx,0x7
  407d20:	jne    407dba <flatcc_builder_union_vector_push@@Base+0xaa>
  407d26:	mov    ecx,DWORD PTR [rax+0x14]
  407d29:	cmp    ecx,0x1fffffff
  407d2f:	je     407d7c <flatcc_builder_union_vector_push@@Base+0x6c>
  407d31:	mov    r14,rsi
  407d34:	mov    rbx,rdi
  407d37:	add    ecx,0x1
  407d3a:	mov    DWORD PTR [rax+0x14],ecx
  407d3d:	mov    r15d,DWORD PTR [rdi+0x20]
  407d41:	lea    eax,[r15+0x8]
  407d45:	mov    DWORD PTR [rdi+0x20],eax
  407d48:	cmp    eax,DWORD PTR [rdi+0x24]
  407d4b:	jae    407d58 <flatcc_builder_union_vector_push@@Base+0x48>
  407d4d:	mov    rax,QWORD PTR [rbx+0x18]
  407d51:	add    rax,r15
  407d54:	jne    407db1 <flatcc_builder_union_vector_push@@Base+0xa1>
  407d56:	jmp    407d7c <flatcc_builder_union_vector_push@@Base+0x6c>
  407d58:	lea    eax,[r15+0x9]
  407d5c:	lea    rsi,[rbx+0x68]
  407d60:	mov    rdi,QWORD PTR [rbx+0x40]
  407d64:	mov    edx,DWORD PTR [rbx+0x28]
  407d67:	add    rdx,rax
  407d6a:	mov    ecx,0x1
  407d6f:	mov    r8d,0x1
  407d75:	call   QWORD PTR [rbx+0x50]
  407d78:	test   eax,eax
  407d7a:	je     407d80 <flatcc_builder_union_vector_push@@Base+0x70>
  407d7c:	xor    eax,eax
  407d7e:	jmp    407db4 <flatcc_builder_union_vector_push@@Base+0xa4>
  407d80:	mov    ecx,DWORD PTR [rbx+0x28]
  407d83:	mov    rax,rcx
  407d86:	add    rax,QWORD PTR [rbx+0x68]
  407d8a:	mov    QWORD PTR [rbx+0x18],rax
  407d8e:	mov    edx,DWORD PTR [rbx+0x70]
  407d91:	sub    edx,ecx
  407d93:	cmp    edx,0xfffffffc
  407d96:	mov    ecx,0xfffffffc
  407d9b:	cmovb  ecx,edx
  407d9e:	mov    DWORD PTR [rbx+0x24],ecx
  407da1:	mov    rcx,QWORD PTR [rbx+0x30]
  407da5:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407dac:	add    rax,r15
  407daf:	je     407d7c <flatcc_builder_union_vector_push@@Base+0x6c>
  407db1:	mov    QWORD PTR [rax],r14
  407db4:	pop    rbx
  407db5:	pop    r14
  407db7:	pop    r15
  407db9:	ret    
  407dba:	lea    rdi,[rip+0x42dd]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407dc1:	lea    rsi,[rip+0x369a]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407dc8:	lea    rcx,[rip+0x4399]        # 40c168 <flatcc_builder_padding_base@@Base+0xf88>
  407dcf:	mov    edx,0x68d
  407dd4:	call   403060 <__assert_fail@plt>
  407dd9:	nop    DWORD PTR [rax+0x0]

0000000000407de0 <flatcc_builder_append_union_vector@@Base>:
  407de0:	push   r15
  407de2:	push   r14
  407de4:	push   r13
  407de6:	push   r12
  407de8:	push   rbx
  407de9:	mov    rax,QWORD PTR [rdi+0x30]
  407ded:	movzx  ecx,WORD PTR [rax+0xe]
  407df1:	cmp    ecx,0x7
  407df4:	jne    407ed1 <flatcc_builder_append_union_vector@@Base+0xf1>
  407dfa:	mov    r15,rdx
  407dfd:	mov    ecx,DWORD PTR [rax+0x14]
  407e00:	add    ecx,r15d
  407e03:	jb     407eb2 <flatcc_builder_append_union_vector@@Base+0xd2>
  407e09:	cmp    ecx,0x20000000
  407e0f:	jae    407eb2 <flatcc_builder_append_union_vector@@Base+0xd2>
  407e15:	mov    r14,rsi
  407e18:	mov    rbx,rdi
  407e1b:	mov    DWORD PTR [rax+0x14],ecx
  407e1e:	mov    r13d,DWORD PTR [rdi+0x20]
  407e22:	lea    eax,[r13+r15*8+0x0]
  407e27:	mov    DWORD PTR [rdi+0x20],eax
  407e2a:	cmp    eax,DWORD PTR [rdi+0x24]
  407e2d:	jae    407e3a <flatcc_builder_append_union_vector@@Base+0x5a>
  407e2f:	mov    r12,QWORD PTR [rbx+0x18]
  407e33:	add    r12,r13
  407e36:	jne    407e93 <flatcc_builder_append_union_vector@@Base+0xb3>
  407e38:	jmp    407e5d <flatcc_builder_append_union_vector@@Base+0x7d>
  407e3a:	add    eax,0x1
  407e3d:	lea    rsi,[rbx+0x68]
  407e41:	mov    rdi,QWORD PTR [rbx+0x40]
  407e45:	mov    edx,DWORD PTR [rbx+0x28]
  407e48:	add    rdx,rax
  407e4b:	mov    ecx,0x1
  407e50:	mov    r8d,0x1
  407e56:	call   QWORD PTR [rbx+0x50]
  407e59:	test   eax,eax
  407e5b:	je     407e62 <flatcc_builder_append_union_vector@@Base+0x82>
  407e5d:	xor    r12d,r12d
  407e60:	jmp    407ea5 <flatcc_builder_append_union_vector@@Base+0xc5>
  407e62:	mov    eax,DWORD PTR [rbx+0x28]
  407e65:	mov    r12,rax
  407e68:	add    r12,QWORD PTR [rbx+0x68]
  407e6c:	mov    QWORD PTR [rbx+0x18],r12
  407e70:	mov    ecx,DWORD PTR [rbx+0x70]
  407e73:	sub    ecx,eax
  407e75:	cmp    ecx,0xfffffffc
  407e78:	mov    eax,0xfffffffc
  407e7d:	cmovb  eax,ecx
  407e80:	mov    DWORD PTR [rbx+0x24],eax
  407e83:	mov    rax,QWORD PTR [rbx+0x30]
  407e87:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407e8e:	add    r12,r13
  407e91:	je     407e5d <flatcc_builder_append_union_vector@@Base+0x7d>
  407e93:	shl    r15d,0x3
  407e97:	mov    edx,r15d
  407e9a:	mov    rdi,r12
  407e9d:	mov    rsi,r14
  407ea0:	call   4030a0 <memcpy@plt>
  407ea5:	mov    rax,r12
  407ea8:	pop    rbx
  407ea9:	pop    r12
  407eab:	pop    r13
  407ead:	pop    r14
  407eaf:	pop    r15
  407eb1:	ret    
  407eb2:	lea    rdi,[rip+0x4672]        # 40c52b <flatcc_builder_padding_base@@Base+0x134b>
  407eb9:	lea    rsi,[rip+0x35a2]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407ec0:	lea    rcx,[rip+0x467f]        # 40c546 <flatcc_builder_padding_base@@Base+0x1366>
  407ec7:	mov    edx,0x37c
  407ecc:	call   403060 <__assert_fail@plt>
  407ed1:	lea    rdi,[rip+0x41c6]        # 40c09e <flatcc_builder_padding_base@@Base+0xebe>
  407ed8:	lea    rsi,[rip+0x3583]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407edf:	lea    rcx,[rip+0x42ef]        # 40c1d5 <flatcc_builder_padding_base@@Base+0xff5>
  407ee6:	mov    edx,0x69c
  407eeb:	call   403060 <__assert_fail@plt>

0000000000407ef0 <flatcc_builder_create_string@@Base>:
  407ef0:	push   rbp
  407ef1:	push   rbx
  407ef2:	sub    rsp,0x98
  407ef9:	xor    ebp,ebp
  407efb:	mov    rax,rdx
  407efe:	shr    rax,0x20
  407f02:	jne    407fd8 <flatcc_builder_create_string@@Base+0xe8>
  407f08:	mov    rbx,rdi
  407f0b:	mov    DWORD PTR [rsp+0x4],edx
  407f0f:	mov    ebp,DWORD PTR [rdi+0xf0]
  407f15:	mov    eax,edx
  407f17:	not    eax
  407f19:	add    eax,ebp
  407f1b:	and    eax,0x3
  407f1e:	add    eax,0x1
  407f21:	mov    QWORD PTR [rsp+0x8],0x4
  407f2a:	lea    rcx,[rsp+0x4]
  407f2f:	mov    QWORD PTR [rsp+0x18],rcx
  407f34:	mov    QWORD PTR [rsp+0x20],0x4
  407f3d:	mov    DWORD PTR [rsp+0x10],0x1
  407f45:	test   rdx,rdx
  407f48:	je     407f6c <flatcc_builder_create_string@@Base+0x7c>
  407f4a:	lea    rcx,[rdx+0x4]
  407f4e:	mov    QWORD PTR [rsp+0x8],rcx
  407f53:	mov    QWORD PTR [rsp+0x28],rsi
  407f58:	mov    QWORD PTR [rsp+0x30],rdx
  407f5d:	mov    DWORD PTR [rsp+0x10],0x2
  407f65:	mov    edx,0x2
  407f6a:	jmp    407f76 <flatcc_builder_create_string@@Base+0x86>
  407f6c:	mov    edx,0x1
  407f71:	mov    ecx,0x4
  407f76:	mov    esi,eax
  407f78:	lea    r8,[rcx+rsi*1]
  407f7c:	mov    QWORD PTR [rsp+0x8],r8
  407f81:	mov    eax,edx
  407f83:	shl    rax,0x4
  407f87:	lea    rdi,[rip+0x3252]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  407f8e:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  407f93:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  407f98:	add    edx,0x1
  407f9b:	mov    DWORD PTR [rsp+0x10],edx
  407f9f:	cmp    r8,0x11
  407fa3:	setb   al
  407fa6:	add    rcx,rsi
  407fa9:	add    rcx,0xfffffffffffffff0
  407fad:	shr    rcx,0x20
  407fb1:	sete   cl
  407fb4:	test   r8d,r8d
  407fb7:	jle    407fe4 <flatcc_builder_create_string@@Base+0xf4>
  407fb9:	or     al,cl
  407fbb:	je     407fe4 <flatcc_builder_create_string@@Base+0xf4>
  407fbd:	sub    ebp,r8d
  407fc0:	mov    rdi,QWORD PTR [rbx+0x38]
  407fc4:	lea    rsi,[rsp+0x18]
  407fc9:	mov    ecx,ebp
  407fcb:	call   QWORD PTR [rbx+0x48]
  407fce:	test   eax,eax
  407fd0:	jne    408003 <flatcc_builder_create_string@@Base+0x113>
  407fd2:	mov    DWORD PTR [rbx+0xf0],ebp
  407fd8:	mov    eax,ebp
  407fda:	add    rsp,0x98
  407fe1:	pop    rbx
  407fe2:	pop    rbp
  407fe3:	ret    
  407fe4:	lea    rdi,[rip+0x4637]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  407feb:	lea    rsi,[rip+0x3470]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  407ff2:	lea    rcx,[rip+0x44e8]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  407ff9:	mov    edx,0x287
  407ffe:	call   403060 <__assert_fail@plt>
  408003:	lea    rdi,[rip+0x4618]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  40800a:	lea    rsi,[rip+0x3451]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408011:	lea    rcx,[rip+0x44c9]        # 40c4e1 <flatcc_builder_padding_base@@Base+0x1301>
  408018:	mov    edx,0x28b
  40801d:	call   403060 <__assert_fail@plt>
  408022:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40802c:	nop    DWORD PTR [rax+0x0]

0000000000408030 <flatcc_builder_create_string_str@@Base>:
  408030:	push   r14
  408032:	push   rbx
  408033:	push   rax
  408034:	mov    rbx,rsi
  408037:	mov    r14,rdi
  40803a:	mov    rdi,rsi
  40803d:	call   403050 <strlen@plt>
  408042:	mov    rdi,r14
  408045:	mov    rsi,rbx
  408048:	mov    rdx,rax
  40804b:	add    rsp,0x8
  40804f:	pop    rbx
  408050:	pop    r14
  408052:	jmp    407ef0 <flatcc_builder_create_string@@Base>
  408057:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408060 <flatcc_builder_create_string_strn@@Base>:
  408060:	push   r15
  408062:	push   r14
  408064:	push   rbx
  408065:	mov    rbx,rdx
  408068:	mov    r14,rsi
  40806b:	mov    r15,rdi
  40806e:	xor    esi,esi
  408070:	mov    rdi,r14
  408073:	call   403080 <memchr@plt>
  408078:	mov    rcx,rax
  40807b:	sub    rcx,r14
  40807e:	test   rax,rax
  408081:	cmovne rbx,rcx
  408085:	mov    rdi,r15
  408088:	mov    rsi,r14
  40808b:	mov    rdx,rbx
  40808e:	pop    rbx
  40808f:	pop    r14
  408091:	pop    r15
  408093:	jmp    407ef0 <flatcc_builder_create_string@@Base>
  408098:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004080a0 <flatcc_builder_end_string@@Base>:
  4080a0:	push   rbp
  4080a1:	push   rbx
  4080a2:	push   rax
  4080a3:	mov    rax,QWORD PTR [rdi+0x30]
  4080a7:	movzx  ecx,WORD PTR [rax+0xe]
  4080ab:	cmp    ecx,0x6
  4080ae:	jne    408147 <flatcc_builder_end_string@@Base+0xa7>
  4080b4:	mov    rbx,rdi
  4080b7:	mov    edx,DWORD PTR [rax+0x14]
  4080ba:	cmp    edx,DWORD PTR [rdi+0x20]
  4080bd:	jne    408166 <flatcc_builder_end_string@@Base+0xc6>
  4080c3:	mov    rsi,QWORD PTR [rbx+0x18]
  4080c7:	mov    rdi,rbx
  4080ca:	call   407ef0 <flatcc_builder_create_string@@Base>
  4080cf:	mov    ebp,eax
  4080d1:	test   eax,eax
  4080d3:	je     40813e <flatcc_builder_end_string@@Base+0x9e>
  4080d5:	mov    rdi,QWORD PTR [rbx+0x18]
  4080d9:	mov    edx,DWORD PTR [rbx+0x20]
  4080dc:	xor    esi,esi
  4080de:	call   403070 <memset@plt>
  4080e3:	mov    rax,QWORD PTR [rbx+0x30]
  4080e7:	mov    ecx,DWORD PTR [rax+0x8]
  4080ea:	mov    DWORD PTR [rbx+0x20],ecx
  4080ed:	mov    ecx,DWORD PTR [rax]
  4080ef:	mov    DWORD PTR [rbx+0x28],ecx
  4080f2:	mov    edx,DWORD PTR [rax+0x4]
  4080f5:	mov    rsi,rcx
  4080f8:	add    rsi,QWORD PTR [rbx+0x68]
  4080fc:	mov    QWORD PTR [rbx+0x18],rsi
  408100:	mov    esi,DWORD PTR [rbx+0x70]
  408103:	sub    esi,ecx
  408105:	cmp    esi,edx
  408107:	cmova  esi,edx
  40810a:	mov    DWORD PTR [rbx+0x24],esi
  40810d:	movzx  ecx,WORD PTR [rbx+0xea]
  408114:	cmp    WORD PTR [rbx+0xe8],cx
  40811b:	jae    408124 <flatcc_builder_end_string@@Base+0x84>
  40811d:	mov    WORD PTR [rbx+0xe8],cx
  408124:	movzx  ecx,WORD PTR [rax+0xc]
  408128:	mov    WORD PTR [rbx+0xea],cx
  40812f:	add    rax,0xffffffffffffffdc
  408133:	mov    QWORD PTR [rbx+0x30],rax
  408137:	add    DWORD PTR [rbx+0x104],0xffffffff
  40813e:	mov    eax,ebp
  408140:	add    rsp,0x8
  408144:	pop    rbx
  408145:	pop    rbp
  408146:	ret    
  408147:	lea    rdi,[rip+0x3853]        # 40b9a1 <flatcc_builder_padding_base@@Base+0x7c1>
  40814e:	lea    rsi,[rip+0x330d]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408155:	lea    rcx,[rip+0x40f8]        # 40c254 <flatcc_builder_padding_base@@Base+0x1074>
  40815c:	mov    edx,0x6c4
  408161:	call   403060 <__assert_fail@plt>
  408166:	lea    rdi,[rip+0x412a]        # 40c297 <flatcc_builder_padding_base@@Base+0x10b7>
  40816d:	lea    rsi,[rip+0x32ee]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  408174:	lea    rcx,[rip+0x40d9]        # 40c254 <flatcc_builder_padding_base@@Base+0x1074>
  40817b:	mov    edx,0x6c5
  408180:	call   403060 <__assert_fail@plt>
  408185:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40818f:	nop

0000000000408190 <flatcc_builder_string_edit@@Base>:
  408190:	mov    rax,QWORD PTR [rdi+0x18]
  408194:	ret    
  408195:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40819f:	nop

00000000004081a0 <flatcc_builder_string_len@@Base>:
  4081a0:	mov    rax,QWORD PTR [rdi+0x30]
  4081a4:	mov    eax,DWORD PTR [rax+0x14]
  4081a7:	ret    
  4081a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081b0 <flatcc_builder_table_edit@@Base>:
  4081b0:	mov    rax,QWORD PTR [rdi+0x30]
  4081b4:	movzx  eax,WORD PTR [rax+0xe]
  4081b8:	cmp    eax,0x3
  4081bb:	jne    4081c8 <flatcc_builder_table_edit@@Base+0x18>
  4081bd:	mov    eax,DWORD PTR [rdi+0x20]
  4081c0:	add    rax,QWORD PTR [rdi+0x18]
  4081c4:	sub    rax,rsi
  4081c7:	ret    
  4081c8:	push   rax
  4081c9:	lea    rdi,[rip+0x3ac1]        # 40bc91 <flatcc_builder_padding_base@@Base+0xab1>
  4081d0:	lea    rsi,[rip+0x328b]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4081d7:	lea    rcx,[rip+0x416b]        # 40c349 <flatcc_builder_padding_base@@Base+0x1169>
  4081de:	mov    edx,0x702
  4081e3:	call   403060 <__assert_fail@plt>
  4081e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081f0 <flatcc_builder_table_add_copy@@Base>:
  4081f0:	push   r15
  4081f2:	push   r14
  4081f4:	push   rbx
  4081f5:	mov    r15,rcx
  4081f8:	mov    r14,rdx
  4081fb:	mov    rdx,rcx
  4081fe:	mov    ecx,r8d
  408201:	call   407140 <flatcc_builder_table_add@@Base>
  408206:	mov    rbx,rax
  408209:	test   rax,rax
  40820c:	je     40821c <flatcc_builder_table_add_copy@@Base+0x2c>
  40820e:	mov    rdi,rbx
  408211:	mov    rsi,r14
  408214:	mov    rdx,r15
  408217:	call   4030a0 <memcpy@plt>
  40821c:	mov    rax,rbx
  40821f:	pop    rbx
  408220:	pop    r14
  408222:	pop    r15
  408224:	ret    
  408225:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40822f:	nop

0000000000408230 <flatcc_builder_push_buffer_alignment@@Base>:
  408230:	movzx  eax,WORD PTR [rdi+0xe8]
  408237:	mov    WORD PTR [rdi+0xe8],0x4
  408240:	ret    
  408241:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40824b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408250 <flatcc_builder_pop_buffer_alignment@@Base>:
  408250:	cmp    WORD PTR [rdi+0xe8],si
  408257:	jae    408260 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408259:	mov    WORD PTR [rdi+0xe8],si
  408260:	ret    
  408261:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40826b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408270 <flatcc_builder_get_buffer_alignment@@Base>:
  408270:	movzx  eax,WORD PTR [rdi+0xe8]
  408277:	ret    
  408278:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408280 <flatcc_builder_set_vtable_clustering@@Base>:
  408280:	xor    eax,eax
  408282:	test   esi,esi
  408284:	sete   al
  408287:	mov    DWORD PTR [rdi+0x124],eax
  40828d:	ret    
  40828e:	xchg   ax,ax

0000000000408290 <flatcc_builder_set_block_align@@Base>:
  408290:	mov    WORD PTR [rdi+0xec],si
  408297:	ret    
  408298:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004082a0 <flatcc_builder_get_level@@Base>:
  4082a0:	mov    eax,DWORD PTR [rdi+0x104]
  4082a6:	ret    
  4082a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082b0 <flatcc_builder_set_max_level@@Base>:
  4082b0:	mov    DWORD PTR [rdi+0x120],esi
  4082b6:	cmp    DWORD PTR [rdi+0x108],esi
  4082bc:	jge    4082c4 <flatcc_builder_set_max_level@@Base+0x14>
  4082be:	mov    DWORD PTR [rdi+0x108],esi
  4082c4:	ret    
  4082c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082cf:	nop

00000000004082d0 <flatcc_builder_get_buffer_size@@Base>:
  4082d0:	movsxd rax,DWORD PTR [rdi+0xf4]
  4082d7:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4082de:	sub    rax,rcx
  4082e1:	ret    
  4082e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082ec:	nop    DWORD PTR [rax+0x0]

00000000004082f0 <flatcc_builder_get_buffer_start@@Base>:
  4082f0:	mov    eax,DWORD PTR [rdi+0xf0]
  4082f6:	ret    
  4082f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408300 <flatcc_builder_get_buffer_end@@Base>:
  408300:	mov    eax,DWORD PTR [rdi+0xf4]
  408306:	ret    
  408307:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408310 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408310:	mov    QWORD PTR [rdi+0x118],rsi
  408317:	ret    
  408318:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408320 <flatcc_builder_set_identifier@@Base>:
  408320:	test   rsi,rsi
  408323:	jne    40832c <flatcc_builder_set_identifier@@Base+0xc>
  408325:	lea    rsi,[rip+0x2eb4]        # 40b1e0 <flatcc_builder_padding_base@@Base>
  40832c:	mov    eax,DWORD PTR [rsi]
  40832e:	mov    DWORD PTR [rdi+0x110],eax
  408334:	ret    
  408335:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40833f:	nop

0000000000408340 <flatcc_builder_get_type@@Base>:
  408340:	mov    rax,QWORD PTR [rdi+0x30]
  408344:	test   rax,rax
  408347:	je     40834e <flatcc_builder_get_type@@Base+0xe>
  408349:	movzx  eax,WORD PTR [rax+0xe]
  40834d:	ret    
  40834e:	xor    eax,eax
  408350:	ret    
  408351:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40835b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408360 <flatcc_builder_get_type_at@@Base>:
  408360:	xor    eax,eax
  408362:	test   esi,esi
  408364:	jle    408382 <flatcc_builder_get_type_at@@Base+0x22>
  408366:	mov    ecx,DWORD PTR [rdi+0x104]
  40836c:	cmp    ecx,esi
  40836e:	jl     408382 <flatcc_builder_get_type_at@@Base+0x22>
  408370:	mov    rax,QWORD PTR [rdi+0x30]
  408374:	sub    esi,ecx
  408376:	movsxd rcx,esi
  408379:	lea    rcx,[rcx+rcx*8]
  40837d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408382:	ret    
  408383:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40838d:	nop    DWORD PTR [rax]

0000000000408390 <flatcc_builder_get_direct_buffer@@Base>:
  408390:	cmp    DWORD PTR [rdi+0x128],0x0
  408397:	je     4083a9 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408399:	mov    rax,QWORD PTR [rdi+0x130]
  4083a0:	cmp    rax,QWORD PTR [rdi+0x138]
  4083a7:	je     4083b8 <flatcc_builder_get_direct_buffer@@Base+0x28>
  4083a9:	test   rsi,rsi
  4083ac:	je     4083b5 <flatcc_builder_get_direct_buffer@@Base+0x25>
  4083ae:	mov    QWORD PTR [rsi],0x0
  4083b5:	xor    eax,eax
  4083b7:	ret    
  4083b8:	test   rsi,rsi
  4083bb:	je     4083c7 <flatcc_builder_get_direct_buffer@@Base+0x37>
  4083bd:	mov    rax,QWORD PTR [rdi+0x160]
  4083c4:	mov    QWORD PTR [rsi],rax
  4083c7:	mov    rax,QWORD PTR [rdi+0x140]
  4083ce:	ret    
  4083cf:	nop

00000000004083d0 <flatcc_builder_copy_buffer@@Base>:
  4083d0:	push   rax
  4083d1:	cmp    DWORD PTR [rdi+0x128],0x0
  4083d8:	je     4083ed <flatcc_builder_copy_buffer@@Base+0x1d>
  4083da:	add    rdi,0x130
  4083e1:	call   408cf0 <flatcc_emitter_copy_buffer@@Base>
  4083e6:	test   rax,rax
  4083e9:	je     4083f1 <flatcc_builder_copy_buffer@@Base+0x21>
  4083eb:	pop    rcx
  4083ec:	ret    
  4083ed:	xor    eax,eax
  4083ef:	pop    rcx
  4083f0:	ret    
  4083f1:	lea    rdi,[rip+0x32d8]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  4083f8:	lea    rsi,[rip+0x3063]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4083ff:	lea    rcx,[rip+0x3fce]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  408406:	mov    edx,0x786
  40840b:	call   403060 <__assert_fail@plt>

0000000000408410 <flatcc_builder_finalize_buffer@@Base>:
  408410:	push   r15
  408412:	push   r14
  408414:	push   rbx
  408415:	mov    rbx,rdi
  408418:	movsxd r14,DWORD PTR [rdi+0xf4]
  40841f:	movsxd rax,DWORD PTR [rdi+0xf0]
  408426:	sub    r14,rax
  408429:	test   rsi,rsi
  40842c:	je     408431 <flatcc_builder_finalize_buffer@@Base+0x21>
  40842e:	mov    QWORD PTR [rsi],r14
  408431:	mov    rdi,r14
  408434:	call   4030b0 <malloc@plt>
  408439:	test   rax,rax
  40843c:	je     40846d <flatcc_builder_finalize_buffer@@Base+0x5d>
  40843e:	cmp    DWORD PTR [rbx+0x128],0x0
  408445:	je     40848c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408447:	mov    r15,rax
  40844a:	add    rbx,0x130
  408451:	mov    rdi,rbx
  408454:	mov    rsi,rax
  408457:	mov    rdx,r14
  40845a:	call   408cf0 <flatcc_emitter_copy_buffer@@Base>
  40845f:	test   rax,rax
  408462:	je     4084ab <flatcc_builder_finalize_buffer@@Base+0x9b>
  408464:	mov    rax,r15
  408467:	pop    rbx
  408468:	pop    r14
  40846a:	pop    r15
  40846c:	ret    
  40846d:	lea    rdi,[rip+0x41ae]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  408474:	lea    rsi,[rip+0x2fe7]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40847b:	lea    rcx,[rip+0x3f97]        # 40c419 <flatcc_builder_padding_base@@Base+0x1239>
  408482:	mov    edx,0x798
  408487:	call   403060 <__assert_fail@plt>
  40848c:	lea    rdi,[rip+0x418f]        # 40c622 <flatcc_builder_padding_base@@Base+0x1442>
  408493:	lea    rsi,[rip+0x2fc8]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40849a:	lea    rcx,[rip+0x3f78]        # 40c419 <flatcc_builder_padding_base@@Base+0x1239>
  4084a1:	mov    edx,0x79c
  4084a6:	call   403060 <__assert_fail@plt>
  4084ab:	lea    rdi,[rip+0x321e]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  4084b2:	lea    rsi,[rip+0x2fa9]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  4084b9:	lea    rcx,[rip+0x3f14]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  4084c0:	mov    edx,0x786
  4084c5:	call   403060 <__assert_fail@plt>
  4084ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004084d0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4084d0:	push   r15
  4084d2:	push   r14
  4084d4:	push   r12
  4084d6:	push   rbx
  4084d7:	push   rax
  4084d8:	mov    r14,rsi
  4084db:	mov    r15,rdi
  4084de:	movsxd rax,DWORD PTR [rdi+0xf4]
  4084e5:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4084ec:	sub    rax,rcx
  4084ef:	test   rsi,rsi
  4084f2:	je     4084f7 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  4084f4:	mov    QWORD PTR [r14],rax
  4084f7:	movzx  ecx,WORD PTR [r15+0xe8]
  4084ff:	add    rax,rcx
  408502:	add    rax,0xffffffffffffffff
  408506:	mov    rbx,rcx
  408509:	neg    rbx
  40850c:	and    rbx,rax
  40850f:	cmp    rcx,0x8
  408513:	mov    QWORD PTR [rsp],0x0
  40851b:	mov    esi,0x8
  408520:	cmova  rsi,rcx
  408524:	mov    rdi,rsp
  408527:	mov    rdx,rbx
  40852a:	call   4030d0 <posix_memalign@plt>
  40852f:	mov    r12,QWORD PTR [rsp]
  408533:	test   eax,eax
  408535:	je     408546 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408537:	test   r12,r12
  40853a:	je     408546 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  40853c:	mov    rdi,r12
  40853f:	call   403030 <free@plt>
  408544:	jmp    40858e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408546:	test   r12,r12
  408549:	je     40858e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  40854b:	cmp    DWORD PTR [r15+0x128],0x0
  408553:	je     40853c <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408555:	add    r15,0x130
  40855c:	mov    rdi,r15
  40855f:	mov    rsi,r12
  408562:	mov    rdx,rbx
  408565:	call   408cf0 <flatcc_emitter_copy_buffer@@Base>
  40856a:	test   rax,rax
  40856d:	jne    40859d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40856f:	lea    rdi,[rip+0x315a]        # 40b6d0 <flatcc_builder_padding_base@@Base+0x4f0>
  408576:	lea    rsi,[rip+0x2ee5]        # 40b462 <flatcc_builder_padding_base@@Base+0x282>
  40857d:	lea    rcx,[rip+0x3e50]        # 40c3d4 <flatcc_builder_padding_base@@Base+0x11f4>
  408584:	mov    edx,0x786
  408589:	call   403060 <__assert_fail@plt>
  40858e:	test   r14,r14
  408591:	je     40859a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408593:	mov    QWORD PTR [r14],0x0
  40859a:	xor    r12d,r12d
  40859d:	mov    rax,r12
  4085a0:	add    rsp,0x8
  4085a4:	pop    rbx
  4085a5:	pop    r12
  4085a7:	pop    r14
  4085a9:	pop    r15
  4085ab:	ret    
  4085ac:	nop    DWORD PTR [rax+0x0]

00000000004085b0 <flatcc_builder_aligned_alloc@@Base>:
  4085b0:	push   rax
  4085b1:	mov    rax,rsi
  4085b4:	mov    QWORD PTR [rsp],0x0
  4085bc:	cmp    rdi,0x8
  4085c0:	mov    esi,0x8
  4085c5:	cmova  rsi,rdi
  4085c9:	mov    rdi,rsp
  4085cc:	mov    rdx,rax
  4085cf:	call   4030d0 <posix_memalign@plt>
  4085d4:	mov    ecx,eax
  4085d6:	mov    rax,QWORD PTR [rsp]
  4085da:	test   ecx,ecx
  4085dc:	je     4085f5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4085de:	test   rax,rax
  4085e1:	je     4085f5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4085e3:	mov    rdi,rax
  4085e6:	call   403030 <free@plt>
  4085eb:	mov    QWORD PTR [rsp],0x0
  4085f3:	xor    eax,eax
  4085f5:	pop    rcx
  4085f6:	ret    
  4085f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408600 <flatcc_builder_aligned_free@@Base>:
  408600:	jmp    403030 <free@plt>
  408605:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40860f:	nop

0000000000408610 <flatcc_builder_get_emit_context@@Base>:
  408610:	mov    rax,QWORD PTR [rdi+0x38]
  408614:	ret    
  408615:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40861f:	nop

0000000000408620 <flatcc_emitter_recycle_page@@Base>:
  408620:	mov    rcx,QWORD PTR [rdi]
  408623:	mov    eax,0xffffffff
  408628:	cmp    rcx,rsi
  40862b:	je     408682 <flatcc_emitter_recycle_page@@Base+0x62>
  40862d:	cmp    QWORD PTR [rdi+0x8],rsi
  408631:	je     408682 <flatcc_emitter_recycle_page@@Base+0x62>
  408633:	mov    rax,QWORD PTR [rsi+0xb80]
  40863a:	mov    rdx,QWORD PTR [rsi+0xb88]
  408641:	mov    QWORD PTR [rax+0xb88],rdx
  408648:	mov    rdx,QWORD PTR [rsi+0xb88]
  40864f:	mov    QWORD PTR [rdx+0xb80],rax
  408656:	mov    rax,QWORD PTR [rcx+0xb88]
  40865d:	mov    QWORD PTR [rsi+0xb88],rax
  408664:	mov    QWORD PTR [rsi+0xb80],rcx
  40866b:	mov    QWORD PTR [rax+0xb80],rsi
  408672:	mov    rax,QWORD PTR [rsi+0xb80]
  408679:	mov    QWORD PTR [rax+0xb88],rsi
  408680:	xor    eax,eax
  408682:	ret    
  408683:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40868d:	nop    DWORD PTR [rax]

0000000000408690 <flatcc_emitter_reset@@Base>:
  408690:	push   r14
  408692:	push   rbx
  408693:	push   rax
  408694:	mov    rax,QWORD PTR [rdi]
  408697:	test   rax,rax
  40869a:	je     40877b <flatcc_emitter_reset@@Base+0xeb>
  4086a0:	mov    rbx,rdi
  4086a3:	mov    QWORD PTR [rdi+0x8],rax
  4086a7:	lea    rcx,[rax+0x5c0]
  4086ae:	mov    QWORD PTR [rdi+0x10],rcx
  4086b2:	mov    QWORD PTR [rdi+0x20],rcx
  4086b6:	mov    QWORD PTR [rdi+0x18],0x5c0
  4086be:	mov    QWORD PTR [rdi+0x28],0x5c0
  4086c6:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4086d0:	mov    rcx,QWORD PTR [rdi+0x30]
  4086d4:	mov    rdx,QWORD PTR [rdi+0x40]
  4086d8:	test   rdx,rdx
  4086db:	jne    4086e4 <flatcc_emitter_reset@@Base+0x54>
  4086dd:	mov    QWORD PTR [rbx+0x40],rcx
  4086e1:	mov    rdx,rcx
  4086e4:	lea    rdx,[rdx+rdx*2]
  4086e8:	shr    rdx,0x2
  4086ec:	shr    rcx,0x2
  4086f0:	add    rcx,rdx
  4086f3:	mov    QWORD PTR [rbx+0x40],rcx
  4086f7:	mov    QWORD PTR [rbx+0x30],0x0
  4086ff:	add    rcx,rcx
  408702:	cmp    rcx,QWORD PTR [rbx+0x38]
  408706:	jae    40877b <flatcc_emitter_reset@@Base+0xeb>
  408708:	mov    rdi,QWORD PTR [rax+0xb80]
  40870f:	cmp    rdi,rax
  408712:	je     40877b <flatcc_emitter_reset@@Base+0xeb>
  408714:	lea    rcx,[rax+0xb80]
  40871b:	mov    r14,0xfffffffffffff480
  408722:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40872c:	nop    DWORD PTR [rax+0x0]
  408730:	mov    rdx,QWORD PTR [rdi+0xb80]
  408737:	mov    QWORD PTR [rcx],rdx
  40873a:	mov    rcx,QWORD PTR [rdi+0xb80]
  408741:	mov    QWORD PTR [rcx+0xb88],rax
  408748:	call   403030 <free@plt>
  40874d:	mov    rax,QWORD PTR [rbx+0x38]
  408751:	add    rax,r14
  408754:	mov    QWORD PTR [rbx+0x38],rax
  408758:	mov    rcx,QWORD PTR [rbx+0x40]
  40875c:	add    rcx,rcx
  40875f:	cmp    rcx,rax
  408762:	jae    40877b <flatcc_emitter_reset@@Base+0xeb>
  408764:	mov    rax,QWORD PTR [rbx+0x8]
  408768:	lea    rcx,[rax+0xb80]
  40876f:	mov    rdi,QWORD PTR [rax+0xb80]
  408776:	cmp    rdi,QWORD PTR [rbx]
  408779:	jne    408730 <flatcc_emitter_reset@@Base+0xa0>
  40877b:	add    rsp,0x8
  40877f:	pop    rbx
  408780:	pop    r14
  408782:	ret    
  408783:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40878d:	nop    DWORD PTR [rax]

0000000000408790 <flatcc_emitter_clear@@Base>:
  408790:	push   r14
  408792:	push   rbx
  408793:	push   rax
  408794:	mov    rbx,QWORD PTR [rdi]
  408797:	test   rbx,rbx
  40879a:	je     4087fa <flatcc_emitter_clear@@Base+0x6a>
  40879c:	mov    r14,rdi
  40879f:	mov    rax,QWORD PTR [rbx+0xb88]
  4087a6:	mov    QWORD PTR [rax+0xb80],0x0
  4087b1:	jmp    4087cf <flatcc_emitter_clear@@Base+0x3f>
  4087b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4087bd:	nop    DWORD PTR [rax]
  4087c0:	mov    rbx,rax
  4087c3:	mov    rdi,QWORD PTR [rax+0xb88]
  4087ca:	call   403030 <free@plt>
  4087cf:	mov    rax,QWORD PTR [rbx+0xb80]
  4087d6:	test   rax,rax
  4087d9:	jne    4087c0 <flatcc_emitter_clear@@Base+0x30>
  4087db:	mov    rdi,rbx
  4087de:	call   403030 <free@plt>
  4087e3:	vxorps xmm0,xmm0,xmm0
  4087e7:	vmovups YMMWORD PTR [r14+0x20],ymm0
  4087ed:	vmovups YMMWORD PTR [r14],ymm0
  4087f2:	mov    QWORD PTR [r14+0x40],0x0
  4087fa:	add    rsp,0x8
  4087fe:	pop    rbx
  4087ff:	pop    r14
  408801:	vzeroupper 
  408804:	ret    
  408805:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40880f:	nop

0000000000408810 <flatcc_emitter@@Base>:
  408810:	push   rbp
  408811:	push   r15
  408813:	push   r14
  408815:	push   r13
  408817:	push   r12
  408819:	push   rbx
  40881a:	sub    rsp,0x18
  40881e:	mov    r13d,edx
  408821:	mov    r14,rsi
  408824:	mov    r12,rdi
  408827:	add    QWORD PTR [rdi+0x30],r8
  40882b:	test   ecx,ecx
  40882d:	js     4089c1 <flatcc_emitter@@Base+0x1b1>
  408833:	mov    rdx,QWORD PTR [r12+0x28]
  408838:	cmp    rdx,r8
  40883b:	jae    408ba8 <flatcc_emitter@@Base+0x398>
  408841:	xor    eax,eax
  408843:	test   r13d,r13d
  408846:	je     408cdf <flatcc_emitter@@Base+0x4cf>
  40884c:	mov    QWORD PTR [rsp+0x8],r13
  408851:	mov    r15,QWORD PTR [r14+0x8]
  408855:	test   r15,r15
  408858:	je     4089a6 <flatcc_emitter@@Base+0x196>
  40885e:	mov    r13,QWORD PTR [r14]
  408861:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40886b:	nop    DWORD PTR [rax+rax*1+0x0]
  408870:	mov    rbp,r15
  408873:	cmp    r15,rdx
  408876:	jbe    408978 <flatcc_emitter@@Base+0x168>
  40887c:	mov    rbp,rdx
  40887f:	nop
  408880:	test   rbp,rbp
  408883:	jne    408978 <flatcc_emitter@@Base+0x168>
  408889:	mov    rbx,QWORD PTR [r12+0x8]
  40888e:	test   rbx,rbx
  408891:	je     4088a0 <flatcc_emitter@@Base+0x90>
  408893:	mov    rax,QWORD PTR [rbx+0xb80]
  40889a:	cmp    rax,QWORD PTR [r12]
  40889e:	jne    4088e1 <flatcc_emitter@@Base+0xd1>
  4088a0:	mov    edi,0xb98
  4088a5:	call   4030b0 <malloc@plt>
  4088aa:	test   rax,rax
  4088ad:	je     408bbd <flatcc_emitter@@Base+0x3ad>
  4088b3:	add    QWORD PTR [r12+0x38],0xb80
  4088bc:	test   rbx,rbx
  4088bf:	je     408920 <flatcc_emitter@@Base+0x110>
  4088c1:	mov    QWORD PTR [rax+0xb88],rbx
  4088c8:	mov    rcx,QWORD PTR [r12]
  4088cc:	mov    QWORD PTR [rax+0xb80],rcx
  4088d3:	mov    QWORD PTR [rcx+0xb88],rax
  4088da:	mov    QWORD PTR [rbx+0xb80],rax
  4088e1:	mov    QWORD PTR [r12+0x8],rax
  4088e6:	mov    QWORD PTR [r12+0x20],rax
  4088eb:	mov    QWORD PTR [r12+0x28],0xb80
  4088f4:	mov    rcx,QWORD PTR [rax+0xb88]
  4088fb:	mov    ecx,DWORD PTR [rcx+0xb90]
  408901:	mov    edx,0xb80
  408906:	add    ecx,edx
  408908:	mov    DWORD PTR [rax+0xb90],ecx
  40890e:	mov    ebp,0xb80
  408913:	cmp    r15,rbp
  408916:	ja     408880 <flatcc_emitter@@Base+0x70>
  40891c:	jmp    408975 <flatcc_emitter@@Base+0x165>
  40891e:	xchg   ax,ax
  408920:	mov    QWORD PTR [r12],rax
  408924:	mov    QWORD PTR [r12+0x8],rax
  408929:	mov    QWORD PTR [rax+0xb80],rax
  408930:	mov    QWORD PTR [rax+0xb88],rax
  408937:	mov    rcx,rax
  40893a:	add    rcx,0x5c0
  408941:	mov    QWORD PTR [r12+0x10],rcx
  408946:	mov    QWORD PTR [r12+0x20],rcx
  40894b:	mov    QWORD PTR [r12+0x18],0x5c0
  408954:	mov    QWORD PTR [r12+0x28],0x5c0
  40895d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408967:	mov    ebp,0x5c0
  40896c:	cmp    r15,rbp
  40896f:	ja     408880 <flatcc_emitter@@Base+0x70>
  408975:	mov    rbp,r15
  408978:	mov    rdi,QWORD PTR [r12+0x20]
  40897d:	mov    rsi,r13
  408980:	mov    rdx,rbp
  408983:	call   4030a0 <memcpy@plt>
  408988:	add    QWORD PTR [r12+0x20],rbp
  40898d:	add    r13,rbp
  408990:	mov    rdx,QWORD PTR [r12+0x28]
  408995:	sub    rdx,rbp
  408998:	mov    QWORD PTR [r12+0x28],rdx
  40899d:	sub    r15,rbp
  4089a0:	jne    408870 <flatcc_emitter@@Base+0x60>
  4089a6:	mov    r13,QWORD PTR [rsp+0x8]
  4089ab:	add    r13d,0xffffffff
  4089af:	add    r14,0x10
  4089b3:	test   r13d,r13d
  4089b6:	jne    40884c <flatcc_emitter@@Base+0x3c>
  4089bc:	jmp    408cdd <flatcc_emitter@@Base+0x4cd>
  4089c1:	lea    rsi,[r12+0x18]
  4089c6:	mov    rdx,QWORD PTR [r12+0x18]
  4089cb:	cmp    rdx,r8
  4089ce:	jae    408bc7 <flatcc_emitter@@Base+0x3b7>
  4089d4:	xor    eax,eax
  4089d6:	test   r13d,r13d
  4089d9:	je     408cdf <flatcc_emitter@@Base+0x4cf>
  4089df:	mov    QWORD PTR [rsp+0x10],rsi
  4089e4:	movsxd rax,r13d
  4089e7:	shl    rax,0x4
  4089eb:	add    r14,rax
  4089ee:	mov    esi,0xfffff480
  4089f3:	mov    QWORD PTR [rsp+0x8],r13
  4089f8:	mov    r15,QWORD PTR [r14-0x8]
  4089fc:	add    r14,0xfffffffffffffff0
  408a00:	test   r15,r15
  408a03:	je     408b94 <flatcc_emitter@@Base+0x384>
  408a09:	mov    r13,QWORD PTR [r14]
  408a0c:	add    r13,r15
  408a0f:	nop
  408a10:	mov    rax,QWORD PTR [rsp+0x10]
  408a15:	mov    rax,QWORD PTR [rax]
  408a18:	cmp    r15,rax
  408a1b:	jbe    408b60 <flatcc_emitter@@Base+0x350>
  408a21:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a2b:	nop    DWORD PTR [rax+rax*1+0x0]
  408a30:	mov    rbp,rax
  408a33:	test   rax,rax
  408a36:	jne    408b63 <flatcc_emitter@@Base+0x353>
  408a3c:	mov    rbx,QWORD PTR [r12]
  408a40:	test   rbx,rbx
  408a43:	je     408a70 <flatcc_emitter@@Base+0x260>
  408a45:	mov    rax,QWORD PTR [rbx+0xb88]
  408a4c:	cmp    rax,QWORD PTR [r12+0x8]
  408a51:	je     408a70 <flatcc_emitter@@Base+0x260>
  408a53:	mov    edx,DWORD PTR [rbx+0xb90]
  408a59:	add    edx,esi
  408a5b:	lea    rcx,[rax+0xb90]
  408a62:	mov    DWORD PTR [rax+0xb90],edx
  408a68:	mov    QWORD PTR [r12],rax
  408a6c:	jmp    408ac5 <flatcc_emitter@@Base+0x2b5>
  408a6e:	xchg   ax,ax
  408a70:	mov    edi,0xb98
  408a75:	call   4030b0 <malloc@plt>
  408a7a:	test   rax,rax
  408a7d:	je     408bbd <flatcc_emitter@@Base+0x3ad>
  408a83:	add    QWORD PTR [r12+0x38],0xb80
  408a8c:	test   rbx,rbx
  408a8f:	je     408b00 <flatcc_emitter@@Base+0x2f0>
  408a91:	mov    rcx,QWORD PTR [r12+0x8]
  408a96:	mov    QWORD PTR [rax+0xb88],rcx
  408a9d:	mov    QWORD PTR [rax+0xb80],rbx
  408aa4:	mov    QWORD PTR [rbx+0xb88],rax
  408aab:	mov    QWORD PTR [rcx+0xb80],rax
  408ab2:	mov    QWORD PTR [r12],rax
  408ab6:	mov    rcx,rax
  408ab9:	add    rcx,0xb90
  408ac0:	mov    esi,0xfffff480
  408ac5:	lea    rdx,[rax+0xb80]
  408acc:	mov    QWORD PTR [r12+0x10],rdx
  408ad1:	mov    QWORD PTR [r12+0x18],0xb80
  408ada:	mov    rax,QWORD PTR [rax+0xb80]
  408ae1:	mov    eax,DWORD PTR [rax+0xb90]
  408ae7:	add    eax,esi
  408ae9:	mov    DWORD PTR [rcx],eax
  408aeb:	mov    eax,0xb80
  408af0:	cmp    r15,rax
  408af3:	ja     408a30 <flatcc_emitter@@Base+0x220>
  408af9:	jmp    408b60 <flatcc_emitter@@Base+0x350>
  408afb:	nop    DWORD PTR [rax+rax*1+0x0]
  408b00:	mov    QWORD PTR [r12],rax
  408b04:	mov    QWORD PTR [r12+0x8],rax
  408b09:	mov    QWORD PTR [rax+0xb80],rax
  408b10:	mov    QWORD PTR [rax+0xb88],rax
  408b17:	mov    rcx,rax
  408b1a:	add    rcx,0x5c0
  408b21:	mov    QWORD PTR [r12+0x10],rcx
  408b26:	mov    QWORD PTR [r12+0x20],rcx
  408b2b:	mov    QWORD PTR [r12+0x18],0x5c0
  408b34:	mov    QWORD PTR [r12+0x28],0x5c0
  408b3d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408b47:	mov    eax,0x5c0
  408b4c:	mov    esi,0xfffff480
  408b51:	cmp    r15,rax
  408b54:	ja     408a30 <flatcc_emitter@@Base+0x220>
  408b5a:	nop    WORD PTR [rax+rax*1+0x0]
  408b60:	mov    rbp,r15
  408b63:	mov    rdi,QWORD PTR [r12+0x10]
  408b68:	sub    rdi,rbp
  408b6b:	mov    QWORD PTR [r12+0x10],rdi
  408b70:	sub    rax,rbp
  408b73:	mov    QWORD PTR [r12+0x18],rax
  408b78:	sub    r13,rbp
  408b7b:	mov    rsi,r13
  408b7e:	mov    rdx,rbp
  408b81:	call   4030a0 <memcpy@plt>
  408b86:	mov    esi,0xfffff480
  408b8b:	sub    r15,rbp
  408b8e:	jne    408a10 <flatcc_emitter@@Base+0x200>
  408b94:	mov    r13,QWORD PTR [rsp+0x8]
  408b99:	add    r13d,0xffffffff
  408b9d:	jne    4089f3 <flatcc_emitter@@Base+0x1e3>
  408ba3:	jmp    408cdd <flatcc_emitter@@Base+0x4cd>
  408ba8:	lea    rsi,[r12+0x28]
  408bad:	mov    rbp,QWORD PTR [r12+0x20]
  408bb2:	lea    rcx,[r8+rbp*1]
  408bb6:	mov    QWORD PTR [r12+0x20],rcx
  408bbb:	jmp    408bd4 <flatcc_emitter@@Base+0x3c4>
  408bbd:	mov    eax,0xffffffff
  408bc2:	jmp    408cdf <flatcc_emitter@@Base+0x4cf>
  408bc7:	mov    rbp,QWORD PTR [r12+0x10]
  408bcc:	sub    rbp,r8
  408bcf:	mov    QWORD PTR [r12+0x10],rbp
  408bd4:	sub    rdx,r8
  408bd7:	mov    QWORD PTR [rsi],rdx
  408bda:	xor    eax,eax
  408bdc:	test   r13d,r13d
  408bdf:	je     408cdf <flatcc_emitter@@Base+0x4cf>
  408be5:	lea    r15d,[r13-0x1]
  408be9:	mov    r12d,r13d
  408bec:	and    r12d,0x7
  408bf0:	je     408c22 <flatcc_emitter@@Base+0x412>
  408bf2:	xor    ebx,ebx
  408bf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bfe:	xchg   ax,ax
  408c00:	mov    rsi,QWORD PTR [r14]
  408c03:	mov    rdx,QWORD PTR [r14+0x8]
  408c07:	mov    rdi,rbp
  408c0a:	call   4030a0 <memcpy@plt>
  408c0f:	add    rbp,QWORD PTR [r14+0x8]
  408c13:	add    r14,0x10
  408c17:	add    ebx,0x1
  408c1a:	cmp    r12d,ebx
  408c1d:	jne    408c00 <flatcc_emitter@@Base+0x3f0>
  408c1f:	sub    r13d,ebx
  408c22:	cmp    r15d,0x7
  408c26:	jb     408cdd <flatcc_emitter@@Base+0x4cd>
  408c2c:	nop    DWORD PTR [rax+0x0]
  408c30:	mov    rsi,QWORD PTR [r14]
  408c33:	mov    rdx,QWORD PTR [r14+0x8]
  408c37:	mov    rdi,rbp
  408c3a:	call   4030a0 <memcpy@plt>
  408c3f:	add    rbp,QWORD PTR [r14+0x8]
  408c43:	mov    rsi,QWORD PTR [r14+0x10]
  408c47:	mov    rdx,QWORD PTR [r14+0x18]
  408c4b:	mov    rdi,rbp
  408c4e:	call   4030a0 <memcpy@plt>
  408c53:	add    rbp,QWORD PTR [r14+0x18]
  408c57:	mov    rsi,QWORD PTR [r14+0x20]
  408c5b:	mov    rdx,QWORD PTR [r14+0x28]
  408c5f:	mov    rdi,rbp
  408c62:	call   4030a0 <memcpy@plt>
  408c67:	add    rbp,QWORD PTR [r14+0x28]
  408c6b:	mov    rsi,QWORD PTR [r14+0x30]
  408c6f:	mov    rdx,QWORD PTR [r14+0x38]
  408c73:	mov    rdi,rbp
  408c76:	call   4030a0 <memcpy@plt>
  408c7b:	add    rbp,QWORD PTR [r14+0x38]
  408c7f:	mov    rsi,QWORD PTR [r14+0x40]
  408c83:	mov    rdx,QWORD PTR [r14+0x48]
  408c87:	mov    rdi,rbp
  408c8a:	call   4030a0 <memcpy@plt>
  408c8f:	add    rbp,QWORD PTR [r14+0x48]
  408c93:	mov    rsi,QWORD PTR [r14+0x50]
  408c97:	mov    rdx,QWORD PTR [r14+0x58]
  408c9b:	mov    rdi,rbp
  408c9e:	call   4030a0 <memcpy@plt>
  408ca3:	add    rbp,QWORD PTR [r14+0x58]
  408ca7:	mov    rsi,QWORD PTR [r14+0x60]
  408cab:	mov    rdx,QWORD PTR [r14+0x68]
  408caf:	mov    rdi,rbp
  408cb2:	call   4030a0 <memcpy@plt>
  408cb7:	add    rbp,QWORD PTR [r14+0x68]
  408cbb:	mov    rsi,QWORD PTR [r14+0x70]
  408cbf:	mov    rdx,QWORD PTR [r14+0x78]
  408cc3:	mov    rdi,rbp
  408cc6:	call   4030a0 <memcpy@plt>
  408ccb:	add    rbp,QWORD PTR [r14+0x78]
  408ccf:	sub    r14,0xffffffffffffff80
  408cd3:	add    r13d,0xfffffff8
  408cd7:	jne    408c30 <flatcc_emitter@@Base+0x420>
  408cdd:	xor    eax,eax
  408cdf:	add    rsp,0x18
  408ce3:	pop    rbx
  408ce4:	pop    r12
  408ce6:	pop    r13
  408ce8:	pop    r14
  408cea:	pop    r15
  408cec:	pop    rbp
  408ced:	ret    
  408cee:	xchg   ax,ax

0000000000408cf0 <flatcc_emitter_copy_buffer@@Base>:
  408cf0:	push   r15
  408cf2:	push   r14
  408cf4:	push   r12
  408cf6:	push   rbx
  408cf7:	push   rax
  408cf8:	mov    rax,rdx
  408cfb:	mov    rdx,QWORD PTR [rdi+0x30]
  408cff:	cmp    rdx,rax
  408d02:	ja     408d8d <flatcc_emitter_copy_buffer@@Base+0x9d>
  408d08:	mov    r14,rdi
  408d0b:	mov    rax,QWORD PTR [rdi]
  408d0e:	test   rax,rax
  408d11:	je     408d8d <flatcc_emitter_copy_buffer@@Base+0x9d>
  408d13:	mov    r15,rsi
  408d16:	cmp    rax,QWORD PTR [r14+0x8]
  408d1a:	je     408d9f <flatcc_emitter_copy_buffer@@Base+0xaf>
  408d20:	mov    r12d,0xb80
  408d26:	sub    r12,QWORD PTR [r14+0x18]
  408d2a:	mov    rsi,QWORD PTR [r14+0x10]
  408d2e:	mov    rdi,r15
  408d31:	mov    rdx,r12
  408d34:	call   4030a0 <memcpy@plt>
  408d39:	add    r12,r15
  408d3c:	mov    rax,QWORD PTR [r14]
  408d3f:	mov    rbx,QWORD PTR [rax+0xb80]
  408d46:	cmp    rbx,QWORD PTR [r14+0x8]
  408d4a:	je     408d74 <flatcc_emitter_copy_buffer@@Base+0x84>
  408d4c:	nop    DWORD PTR [rax+0x0]
  408d50:	mov    edx,0xb80
  408d55:	mov    rdi,r12
  408d58:	mov    rsi,rbx
  408d5b:	call   4030a0 <memcpy@plt>
  408d60:	add    r12,0xb80
  408d67:	mov    rbx,QWORD PTR [rbx+0xb80]
  408d6e:	cmp    rbx,QWORD PTR [r14+0x8]
  408d72:	jne    408d50 <flatcc_emitter_copy_buffer@@Base+0x60>
  408d74:	mov    edx,0xb80
  408d79:	sub    rdx,QWORD PTR [r14+0x28]
  408d7d:	mov    rdi,r12
  408d80:	mov    rsi,rbx
  408d83:	call   4030a0 <memcpy@plt>
  408d88:	mov    r15,r12
  408d8b:	jmp    408d90 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408d8d:	xor    r15d,r15d
  408d90:	mov    rax,r15
  408d93:	add    rsp,0x8
  408d97:	pop    rbx
  408d98:	pop    r12
  408d9a:	pop    r14
  408d9c:	pop    r15
  408d9e:	ret    
  408d9f:	mov    rsi,QWORD PTR [r14+0x10]
  408da3:	mov    rdi,r15
  408da6:	call   4030a0 <memcpy@plt>
  408dab:	jmp    408d90 <flatcc_emitter_copy_buffer@@Base+0xa0>
  408dad:	nop    DWORD PTR [rax]

0000000000408db0 <flatcc_verify_error_string@@Base>:
  408db0:	cmp    edi,0x24
  408db3:	ja     408dc4 <flatcc_verify_error_string@@Base+0x14>
  408db5:	movsxd rax,edi
  408db8:	lea    rcx,[rip+0x6f21]        # 40fce0 <flatcc_builder_padding_base@@Base+0x4b00>
  408dbf:	mov    rax,QWORD PTR [rcx+rax*8]
  408dc3:	ret    
  408dc4:	lea    rax,[rip+0x3d15]        # 40cae0 <flatcc_builder_padding_base@@Base+0x1900>
  408dcb:	ret    
  408dcc:	nop    DWORD PTR [rax+0x0]

0000000000408dd0 <flatcc_verify_field@@Base>:
  408dd0:	lea    esi,[rsi+rsi*1]
  408dd3:	add    esi,0x4
  408dd6:	xor    eax,eax
  408dd8:	cmp    si,WORD PTR [rdi+0x1e]
  408ddc:	jae    408e22 <flatcc_verify_field@@Base+0x52>
  408dde:	mov    r8,QWORD PTR [rdi+0x10]
  408de2:	movzx  esi,si
  408de5:	movzx  esi,WORD PTR [r8+rsi*1]
  408dea:	test   esi,esi
  408dec:	je     408e22 <flatcc_verify_field@@Base+0x52>
  408dee:	add    edx,esi
  408df0:	movzx  r8d,WORD PTR [rdi+0x1c]
  408df5:	mov    eax,0xd
  408dfa:	cmp    edx,r8d
  408dfd:	ja     408e22 <flatcc_verify_field@@Base+0x52>
  408dff:	add    esi,DWORD PTR [rdi]
  408e01:	mov    edx,DWORD PTR [rdi+0x18]
  408e04:	add    edx,esi
  408e06:	movzx  ecx,cx
  408e09:	add    ecx,0xffffffff
  408e0c:	mov    eax,0x0
  408e11:	test   edx,ecx
  408e13:	je     408e22 <flatcc_verify_field@@Base+0x52>
  408e15:	add    esi,DWORD PTR [rdi+0x18]
  408e18:	and    esi,ecx
  408e1a:	mov    eax,0xc
  408e1f:	cmove  eax,esi
  408e22:	ret    
  408e23:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408e2d:	nop    DWORD PTR [rax]

0000000000408e30 <flatcc_verify_string_field@@Base>:
  408e30:	lea    eax,[rsi+rsi*1]
  408e33:	add    eax,0x4
  408e36:	cmp    ax,WORD PTR [rdi+0x1e]
  408e3a:	jae    408e6a <flatcc_verify_string_field@@Base+0x3a>
  408e3c:	mov    rcx,QWORD PTR [rdi+0x10]
  408e40:	movzx  eax,ax
  408e43:	movzx  esi,WORD PTR [rcx+rax*1]
  408e47:	test   esi,esi
  408e49:	je     408e6a <flatcc_verify_string_field@@Base+0x3a>
  408e4b:	lea    ecx,[rsi+0x4]
  408e4e:	movzx  edx,WORD PTR [rdi+0x1c]
  408e52:	mov    eax,0xd
  408e57:	cmp    ecx,edx
  408e59:	ja     408e69 <flatcc_verify_string_field@@Base+0x39>
  408e5b:	add    esi,DWORD PTR [rdi+0x18]
  408e5e:	mov    eax,0xc
  408e63:	test   sil,0x3
  408e67:	je     408e75 <flatcc_verify_string_field@@Base+0x45>
  408e69:	ret    
  408e6a:	xor    eax,eax
  408e6c:	test   edx,edx
  408e6e:	setne  al
  408e71:	shl    eax,0x2
  408e74:	ret    
  408e75:	test   esi,esi
  408e77:	je     408ecf <flatcc_verify_string_field@@Base+0x9f>
  408e79:	mov    rcx,QWORD PTR [rdi]
  408e7c:	mov    eax,esi
  408e7e:	mov    edx,DWORD PTR [rcx+rax*1]
  408e81:	add    edx,esi
  408e83:	mov    eax,0x11
  408e88:	cmp    edx,esi
  408e8a:	jbe    408e69 <flatcc_verify_string_field@@Base+0x39>
  408e8c:	mov    r8d,DWORD PTR [rdi+0x8]
  408e90:	mov    edi,edx
  408e92:	lea    rsi,[rdi+0x4]
  408e96:	cmp    rsi,r8
  408e99:	ja     408e69 <flatcc_verify_string_field@@Base+0x39>
  408e9b:	mov    esi,edi
  408e9d:	and    esi,0x3
  408ea0:	test   rsi,rsi
  408ea3:	jne    408e69 <flatcc_verify_string_field@@Base+0x39>
  408ea5:	mov    edi,DWORD PTR [rcx+rdi*1]
  408ea8:	add    edx,0x4
  408eab:	sub    r8d,edx
  408eae:	lea    esi,[rdi+0x1]
  408eb1:	mov    eax,0x8
  408eb6:	cmp    r8d,esi
  408eb9:	jb     408e69 <flatcc_verify_string_field@@Base+0x39>
  408ebb:	mov    eax,edx
  408ebd:	add    rcx,rax
  408ec0:	xor    edx,edx
  408ec2:	cmp    BYTE PTR [rdi+rcx*1],0x0
  408ec6:	mov    eax,0x7
  408ecb:	cmove  eax,edx
  408ece:	ret    
  408ecf:	xor    eax,eax
  408ed1:	ret    
  408ed2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408edc:	nop    DWORD PTR [rax+0x0]

0000000000408ee0 <flatcc_verify_vector_field@@Base>:
  408ee0:	lea    eax,[rsi+rsi*1]
  408ee3:	add    eax,0x4
  408ee6:	cmp    ax,WORD PTR [rdi+0x1e]
  408eea:	jae    408f1c <flatcc_verify_vector_field@@Base+0x3c>
  408eec:	mov    rsi,QWORD PTR [rdi+0x10]
  408ef0:	movzx  eax,ax
  408ef3:	movzx  esi,WORD PTR [rsi+rax*1]
  408ef7:	test   esi,esi
  408ef9:	je     408f1c <flatcc_verify_vector_field@@Base+0x3c>
  408efb:	lea    r10d,[rsi+0x4]
  408eff:	movzx  edx,WORD PTR [rdi+0x1c]
  408f03:	mov    eax,0xd
  408f08:	cmp    r10d,edx
  408f0b:	ja     408f1b <flatcc_verify_vector_field@@Base+0x3b>
  408f0d:	add    esi,DWORD PTR [rdi+0x18]
  408f10:	mov    eax,0xc
  408f15:	test   sil,0x3
  408f19:	je     408f27 <flatcc_verify_vector_field@@Base+0x47>
  408f1b:	ret    
  408f1c:	xor    eax,eax
  408f1e:	test   edx,edx
  408f20:	setne  al
  408f23:	shl    eax,0x2
  408f26:	ret    
  408f27:	test   esi,esi
  408f29:	je     408fa1 <flatcc_verify_vector_field@@Base+0xc1>
  408f2b:	mov    r10,QWORD PTR [rdi]
  408f2e:	mov    eax,esi
  408f30:	mov    r11d,DWORD PTR [r10+rax*1]
  408f34:	add    r11d,esi
  408f37:	movzx  eax,r8w
  408f3b:	cmp    eax,0x4
  408f3e:	mov    edx,0x4
  408f43:	cmova  edx,eax
  408f46:	mov    eax,0x10
  408f4b:	cmp    r11d,esi
  408f4e:	jbe    408f1b <flatcc_verify_vector_field@@Base+0x3b>
  408f50:	mov    r8d,DWORD PTR [rdi+0x8]
  408f54:	mov    edi,r11d
  408f57:	lea    rsi,[rdi+0x4]
  408f5b:	cmp    rsi,r8
  408f5e:	ja     408f1b <flatcc_verify_vector_field@@Base+0x3b>
  408f60:	push   rbx
  408f61:	movzx  edx,dx
  408f64:	movabs rbx,0x1ffffffff
  408f6e:	add    rbx,rdx
  408f71:	or     rbx,0x3
  408f75:	test   rsi,rbx
  408f78:	pop    rbx
  408f79:	jne    408f1b <flatcc_verify_vector_field@@Base+0x3b>
  408f7b:	mov    edx,DWORD PTR [r10+rdi*1]
  408f7f:	mov    eax,0x19
  408f84:	cmp    edx,r9d
  408f87:	ja     408f1b <flatcc_verify_vector_field@@Base+0x3b>
  408f89:	add    r8d,0xfffffffc
  408f8d:	sub    r8d,r11d
  408f90:	imul   edx,ecx
  408f93:	xor    ecx,ecx
  408f95:	cmp    r8d,edx
  408f98:	mov    eax,0x1a
  408f9d:	cmovae eax,ecx
  408fa0:	ret    
  408fa1:	xor    eax,eax
  408fa3:	ret    
  408fa4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408fae:	xchg   ax,ax

0000000000408fb0 <flatcc_verify_string_vector_field@@Base>:
  408fb0:	push   r14
  408fb2:	push   rbx
  408fb3:	lea    eax,[rsi+rsi*1]
  408fb6:	add    eax,0x4
  408fb9:	cmp    ax,WORD PTR [rdi+0x1e]
  408fbd:	jae    4090ed <flatcc_verify_string_vector_field@@Base+0x13d>
  408fc3:	mov    rcx,QWORD PTR [rdi+0x10]
  408fc7:	movzx  eax,ax
  408fca:	movzx  esi,WORD PTR [rcx+rax*1]
  408fce:	test   esi,esi
  408fd0:	je     4090ed <flatcc_verify_string_vector_field@@Base+0x13d>
  408fd6:	lea    ecx,[rsi+0x4]
  408fd9:	movzx  edx,WORD PTR [rdi+0x1c]
  408fdd:	mov    eax,0xd
  408fe2:	cmp    ecx,edx
  408fe4:	ja     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  408fea:	mov    edx,DWORD PTR [rdi+0x18]
  408fed:	lea    ebx,[rdx+rsi*1]
  408ff0:	mov    eax,0xc
  408ff5:	test   bl,0x3
  408ff8:	jne    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  408ffe:	xor    eax,eax
  409000:	test   ebx,ebx
  409002:	je     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409008:	mov    r10,QWORD PTR [rdi]
  40900b:	mov    eax,ebx
  40900d:	mov    r14d,DWORD PTR [r10+rax*1]
  409011:	lea    ecx,[r14+rbx*1]
  409015:	mov    eax,0x10
  40901a:	cmp    ecx,ebx
  40901c:	jbe    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409022:	test   cl,0x3
  409025:	jne    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  40902b:	mov    r9d,DWORD PTR [rdi+0x8]
  40902f:	mov    edi,ecx
  409031:	lea    rbx,[rdi+0x4]
  409035:	cmp    rbx,r9
  409038:	ja     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  40903e:	mov    r8d,DWORD PTR [r10+rdi*1]
  409042:	mov    eax,0x19
  409047:	cmp    r8d,0x3fffffff
  40904e:	ja     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409054:	lea    edi,[r9-0x4]
  409058:	sub    edi,ecx
  40905a:	lea    ecx,[r8*4+0x0]
  409062:	mov    eax,0x1a
  409067:	cmp    edi,ecx
  409069:	jb     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  40906f:	mov    eax,0x0
  409074:	test   r8d,r8d
  409077:	je     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409079:	lea    eax,[r14+rdx*1]
  40907d:	lea    edi,[rsi+rax*1]
  409080:	add    edi,0x4
  409083:	lea    r11d,[r9-0x8]
  409087:	sub    r11d,esi
  40908a:	sub    r11d,r14d
  40908d:	sub    r11d,edx
  409090:	xor    edx,edx
  409092:	mov    eax,edi
  409094:	mov    ecx,DWORD PTR [r10+rax*1]
  409098:	lea    esi,[rdi+rcx*1]
  40909b:	mov    eax,0x11
  4090a0:	cmp    esi,edi
  4090a2:	jbe    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  4090a4:	mov    esi,esi
  4090a6:	lea    rbx,[rsi+0x4]
  4090aa:	cmp    rbx,r9
  4090ad:	ja     4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  4090af:	mov    ebx,esi
  4090b1:	and    ebx,0x3
  4090b4:	test   rbx,rbx
  4090b7:	jne    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  4090b9:	mov    eax,DWORD PTR [r10+rsi*1]
  4090bd:	mov    esi,r11d
  4090c0:	sub    esi,ecx
  4090c2:	lea    ebx,[rax+0x1]
  4090c5:	cmp    esi,ebx
  4090c7:	jb     4090fb <flatcc_verify_string_vector_field@@Base+0x14b>
  4090c9:	lea    ecx,[rdi+rcx*1]
  4090cc:	add    ecx,0x4
  4090cf:	mov    ecx,ecx
  4090d1:	add    rcx,r10
  4090d4:	cmp    BYTE PTR [rax+rcx*1],0x0
  4090d8:	jne    409102 <flatcc_verify_string_vector_field@@Base+0x152>
  4090da:	add    edx,0x1
  4090dd:	add    edi,0x4
  4090e0:	add    r11d,0xfffffffc
  4090e4:	xor    eax,eax
  4090e6:	cmp    edx,r8d
  4090e9:	jb     409092 <flatcc_verify_string_vector_field@@Base+0xe2>
  4090eb:	jmp    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  4090ed:	xor    eax,eax
  4090ef:	test   edx,edx
  4090f1:	setne  al
  4090f4:	shl    eax,0x2
  4090f7:	pop    rbx
  4090f8:	pop    r14
  4090fa:	ret    
  4090fb:	mov    eax,0x8
  409100:	jmp    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409102:	mov    eax,0x7
  409107:	jmp    4090f7 <flatcc_verify_string_vector_field@@Base+0x147>
  409109:	nop    DWORD PTR [rax+0x0]

0000000000409110 <flatcc_verify_table_field@@Base>:
  409110:	lea    eax,[rsi+rsi*1]
  409113:	add    eax,0x4
  409116:	cmp    ax,WORD PTR [rdi+0x1e]
  40911a:	jae    40914c <flatcc_verify_table_field@@Base+0x3c>
  40911c:	mov    rsi,QWORD PTR [rdi+0x10]
  409120:	movzx  eax,ax
  409123:	movzx  esi,WORD PTR [rsi+rax*1]
  409127:	test   esi,esi
  409129:	je     40914c <flatcc_verify_table_field@@Base+0x3c>
  40912b:	lea    r8d,[rsi+0x4]
  40912f:	movzx  edx,WORD PTR [rdi+0x1c]
  409133:	mov    eax,0xd
  409138:	cmp    r8d,edx
  40913b:	ja     40914b <flatcc_verify_table_field@@Base+0x3b>
  40913d:	add    esi,DWORD PTR [rdi+0x18]
  409140:	mov    eax,0xc
  409145:	test   sil,0x3
  409149:	je     409157 <flatcc_verify_table_field@@Base+0x47>
  40914b:	ret    
  40914c:	xor    eax,eax
  40914e:	test   edx,edx
  409150:	setne  al
  409153:	shl    eax,0x2
  409156:	ret    
  409157:	test   esi,esi
  409159:	je     40923f <flatcc_verify_table_field@@Base+0x12f>
  40915f:	sub    rsp,0x28
  409163:	mov    r10,QWORD PTR [rdi]
  409166:	mov    r8d,DWORD PTR [rdi+0x8]
  40916a:	mov    eax,esi
  40916c:	mov    edx,DWORD PTR [r10+rax*1]
  409170:	mov    eax,DWORD PTR [rdi+0xc]
  409173:	add    eax,0xffffffff
  409176:	mov    DWORD PTR [rsp+0x14],eax
  40917a:	je     409242 <flatcc_verify_table_field@@Base+0x132>
  409180:	add    edx,esi
  409182:	mov    eax,0xf
  409187:	cmp    edx,esi
  409189:	jbe    409247 <flatcc_verify_table_field@@Base+0x137>
  40918f:	mov    esi,edx
  409191:	lea    rdi,[rsi+0x4]
  409195:	cmp    rdi,r8
  409198:	ja     409247 <flatcc_verify_table_field@@Base+0x137>
  40919e:	mov    edi,esi
  4091a0:	and    edi,0x3
  4091a3:	test   rdi,rdi
  4091a6:	jne    409247 <flatcc_verify_table_field@@Base+0x137>
  4091ac:	mov    DWORD PTR [rsp+0x20],edx
  4091b0:	mov    edi,edx
  4091b2:	sub    edi,DWORD PTR [r10+rsi*1]
  4091b6:	mov    eax,0x1d
  4091bb:	test   edi,0x80000001
  4091c1:	jne    409247 <flatcc_verify_table_field@@Base+0x137>
  4091c7:	mov    r9d,edi
  4091ca:	lea    rsi,[r9+0x2]
  4091ce:	mov    eax,0x1b
  4091d3:	cmp    rsi,r8
  4091d6:	ja     409247 <flatcc_verify_table_field@@Base+0x137>
  4091d8:	movzx  r11d,WORD PTR [r10+r9*1]
  4091dd:	mov    WORD PTR [rsp+0x26],r11w
  4091e3:	mov    eax,0x1e
  4091e8:	test   r11b,0x1
  4091ec:	jne    409247 <flatcc_verify_table_field@@Base+0x137>
  4091ee:	mov    esi,r11d
  4091f1:	add    esi,edi
  4091f3:	cmp    esi,r8d
  4091f6:	ja     409247 <flatcc_verify_table_field@@Base+0x137>
  4091f8:	movzx  esi,r11w
  4091fc:	mov    eax,0x1c
  409201:	cmp    esi,0x4
  409204:	jb     409247 <flatcc_verify_table_field@@Base+0x137>
  409206:	add    edi,0x2
  409209:	movzx  esi,WORD PTR [r10+rdi*1]
  40920e:	mov    WORD PTR [rsp+0x24],si
  409213:	mov    edi,r8d
  409216:	sub    edi,edx
  409218:	mov    eax,0x14
  40921d:	cmp    edi,esi
  40921f:	jb     409247 <flatcc_verify_table_field@@Base+0x137>
  409221:	add    r9,r10
  409224:	mov    QWORD PTR [rsp+0x18],r9
  409229:	mov    QWORD PTR [rsp+0x8],r10
  40922e:	mov    DWORD PTR [rsp+0x10],r8d
  409233:	lea    rdi,[rsp+0x8]
  409238:	call   rcx
  40923a:	add    rsp,0x28
  40923e:	ret    
  40923f:	xor    eax,eax
  409241:	ret    
  409242:	mov    eax,0x3
  409247:	add    rsp,0x28
  40924b:	ret    
  40924c:	nop    DWORD PTR [rax+0x0]

0000000000409250 <flatcc_verify_table_vector_field@@Base>:
  409250:	push   rbp
  409251:	push   r15
  409253:	push   r14
  409255:	push   r13
  409257:	push   r12
  409259:	push   rbx
  40925a:	sub    rsp,0x38
  40925e:	lea    eax,[rsi+rsi*1]
  409261:	add    eax,0x4
  409264:	cmp    ax,WORD PTR [rdi+0x1e]
  409268:	jae    409471 <flatcc_verify_table_vector_field@@Base+0x221>
  40926e:	mov    rbx,rcx
  409271:	mov    rcx,QWORD PTR [rdi+0x10]
  409275:	movzx  eax,ax
  409278:	movzx  ecx,WORD PTR [rcx+rax*1]
  40927c:	test   ecx,ecx
  40927e:	je     409471 <flatcc_verify_table_vector_field@@Base+0x221>
  409284:	lea    edx,[rcx+0x4]
  409287:	movzx  esi,WORD PTR [rdi+0x1c]
  40928b:	mov    eax,0xd
  409290:	cmp    edx,esi
  409292:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409298:	mov    edx,DWORD PTR [rdi+0x18]
  40929b:	lea    esi,[rdx+rcx*1]
  40929e:	mov    eax,0xc
  4092a3:	test   sil,0x3
  4092a7:	jne    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4092ad:	xor    eax,eax
  4092af:	test   esi,esi
  4092b1:	je     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4092b7:	mov    r12d,DWORD PTR [rdi+0xc]
  4092bb:	test   r12d,r12d
  4092be:	jle    40948a <flatcc_verify_table_vector_field@@Base+0x23a>
  4092c4:	mov    r15,QWORD PTR [rdi]
  4092c7:	mov    eax,esi
  4092c9:	mov    r8d,DWORD PTR [r15+rax*1]
  4092cd:	lea    ebp,[r8+rsi*1]
  4092d1:	mov    eax,0x10
  4092d6:	cmp    ebp,esi
  4092d8:	jbe    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4092de:	test   bpl,0x3
  4092e2:	jne    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4092e8:	mov    r9d,DWORD PTR [rdi+0x8]
  4092ec:	mov    esi,ebp
  4092ee:	lea    rdi,[rsi+0x4]
  4092f2:	cmp    rdi,r9
  4092f5:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4092fb:	mov    r10d,DWORD PTR [r15+rsi*1]
  4092ff:	mov    eax,0x19
  409304:	cmp    r10d,0x3fffffff
  40930b:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409311:	lea    r11d,[r9-0x4]
  409315:	mov    esi,r11d
  409318:	sub    esi,ebp
  40931a:	lea    edi,[r10*4+0x0]
  409322:	mov    eax,0x1a
  409327:	cmp    esi,edi
  409329:	jb     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  40932f:	mov    eax,0x0
  409334:	test   r10d,r10d
  409337:	je     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  40933d:	add    r12d,0xfffffffe
  409341:	lea    eax,[r8+rdx*1]
  409345:	lea    r13d,[rcx+rax*1]
  409349:	add    r13d,0x4
  40934d:	sub    r11d,ecx
  409350:	sub    r11d,r8d
  409353:	sub    r11d,edx
  409356:	xor    ecx,ecx
  409358:	mov    QWORD PTR [rsp+0x30],r9
  40935d:	mov    QWORD PTR [rsp+0x28],r15
  409362:	mov    r13d,r13d
  409365:	mov    r14d,DWORD PTR [r15+r13*1]
  409369:	mov    DWORD PTR [rsp+0x14],r12d
  40936e:	test   r12d,r12d
  409371:	je     409559 <flatcc_verify_table_vector_field@@Base+0x309>
  409377:	lea    eax,[r14+r13*1]
  40937b:	cmp    eax,r13d
  40937e:	jbe    409491 <flatcc_verify_table_vector_field@@Base+0x241>
  409384:	mov    edx,eax
  409386:	lea    rsi,[rdx+0x4]
  40938a:	cmp    rsi,r9
  40938d:	ja     409491 <flatcc_verify_table_vector_field@@Base+0x241>
  409393:	mov    esi,edx
  409395:	and    esi,0x3
  409398:	test   rsi,rsi
  40939b:	jne    409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093a1:	mov    DWORD PTR [rsp+0x20],eax
  4093a5:	mov    esi,DWORD PTR [r15+rdx*1]
  4093a9:	mov    edx,r14d
  4093ac:	sub    edx,esi
  4093ae:	lea    eax,[rdx+r13*1]
  4093b2:	test   eax,0x80000001
  4093b7:	jne    409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093bd:	mov    eax,eax
  4093bf:	lea    rdi,[rax+0x2]
  4093c3:	cmp    rdi,r9
  4093c6:	ja     409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093cc:	movzx  ebp,WORD PTR [r15+rax*1]
  4093d1:	mov    WORD PTR [rsp+0x26],bp
  4093d6:	cmp    ebp,0x4
  4093d9:	jb     409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093df:	mov    edi,ebp
  4093e1:	and    edi,0x1
  4093e4:	test   di,di
  4093e7:	jne    409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093ed:	add    ebp,r14d
  4093f0:	sub    ebp,esi
  4093f2:	add    ebp,r13d
  4093f5:	cmp    ebp,r9d
  4093f8:	ja     409491 <flatcc_verify_table_vector_field@@Base+0x241>
  4093fe:	lea    edx,[rdx+r13*1]
  409402:	add    edx,0x2
  409405:	movzx  edx,WORD PTR [r15+rdx*1]
  40940a:	mov    WORD PTR [rsp+0x24],dx
  40940f:	mov    esi,r11d
  409412:	sub    esi,r14d
  409415:	cmp    esi,edx
  409417:	jb     409491 <flatcc_verify_table_vector_field@@Base+0x241>
  409419:	mov    rdx,r15
  40941c:	mov    r15d,ecx
  40941f:	mov    ebp,r11d
  409422:	mov    r14,r10
  409425:	add    rax,rdx
  409428:	mov    QWORD PTR [rsp+0x18],rax
  40942d:	mov    QWORD PTR [rsp+0x8],rdx
  409432:	mov    DWORD PTR [rsp+0x10],r9d
  409437:	lea    rdi,[rsp+0x8]
  40943c:	call   rbx
  40943e:	test   eax,eax
  409440:	jne    40956b <flatcc_verify_table_vector_field@@Base+0x31b>
  409446:	mov    ecx,r15d
  409449:	add    ecx,0x1
  40944c:	add    r13d,0x4
  409450:	mov    r11d,ebp
  409453:	add    r11d,0xfffffffc
  409457:	xor    eax,eax
  409459:	mov    r10,r14
  40945c:	cmp    ecx,r10d
  40945f:	mov    r9,QWORD PTR [rsp+0x30]
  409464:	mov    r15,QWORD PTR [rsp+0x28]
  409469:	jb     409362 <flatcc_verify_table_vector_field@@Base+0x112>
  40946f:	jmp    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409471:	xor    eax,eax
  409473:	test   edx,edx
  409475:	setne  al
  409478:	shl    eax,0x2
  40947b:	add    rsp,0x38
  40947f:	pop    rbx
  409480:	pop    r12
  409482:	pop    r13
  409484:	pop    r14
  409486:	pop    r15
  409488:	pop    rbp
  409489:	ret    
  40948a:	mov    eax,0x3
  40948f:	jmp    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409491:	mov    DWORD PTR [rsp+0x14],r12d
  409496:	add    r14d,r13d
  409499:	mov    eax,0xf
  40949e:	cmp    r14d,r13d
  4094a1:	jbe    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094a3:	mov    edx,r14d
  4094a6:	lea    rsi,[rdx+0x4]
  4094aa:	cmp    rsi,r9
  4094ad:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094af:	mov    esi,edx
  4094b1:	and    esi,0x3
  4094b4:	test   rsi,rsi
  4094b7:	jne    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094b9:	mov    DWORD PTR [rsp+0x20],r14d
  4094be:	mov    esi,r14d
  4094c1:	sub    esi,DWORD PTR [r15+rdx*1]
  4094c5:	mov    eax,0x1d
  4094ca:	test   esi,0x80000001
  4094d0:	jne    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094d2:	mov    edx,esi
  4094d4:	lea    rdi,[rdx+0x2]
  4094d8:	mov    eax,0x1b
  4094dd:	cmp    rdi,r9
  4094e0:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094e2:	movzx  ebp,WORD PTR [r15+rdx*1]
  4094e7:	mov    WORD PTR [rsp+0x26],bp
  4094ec:	mov    eax,0x1e
  4094f1:	test   bpl,0x1
  4094f5:	jne    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  4094f7:	mov    edi,ebp
  4094f9:	add    edi,esi
  4094fb:	mov    r8,r9
  4094fe:	cmp    edi,r8d
  409501:	ja     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409507:	movzx  edi,bp
  40950a:	mov    eax,0x1c
  40950f:	cmp    edi,0x4
  409512:	jb     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409518:	mov    rcx,r15
  40951b:	add    esi,0x2
  40951e:	movzx  esi,WORD PTR [r15+rsi*1]
  409523:	mov    WORD PTR [rsp+0x24],si
  409528:	mov    edi,r8d
  40952b:	sub    edi,r14d
  40952e:	mov    eax,0x14
  409533:	cmp    edi,esi
  409535:	jb     40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  40953b:	add    rdx,rcx
  40953e:	mov    QWORD PTR [rsp+0x18],rdx
  409543:	mov    QWORD PTR [rsp+0x8],rcx
  409548:	mov    DWORD PTR [rsp+0x10],r8d
  40954d:	lea    rdi,[rsp+0x8]
  409552:	call   rbx
  409554:	jmp    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  409559:	mov    DWORD PTR [rsp+0x14],0x0
  409561:	mov    eax,0x3
  409566:	jmp    40947b <flatcc_verify_table_vector_field@@Base+0x22b>
  40956b:	mov    r15,QWORD PTR [rsp+0x28]
  409570:	mov    r14d,DWORD PTR [r15+r13*1]
  409574:	add    r14d,r13d
  409577:	mov    DWORD PTR [rsp+0x14],r12d
  40957c:	mov    r9,QWORD PTR [rsp+0x30]
  409581:	jmp    409499 <flatcc_verify_table_vector_field@@Base+0x249>
  409586:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000409590 <flatcc_verify_union_table@@Base>:
  409590:	sub    rsp,0x28
  409594:	mov    r8,QWORD PTR [rdi]
  409597:	mov    r11d,DWORD PTR [rdi+0x8]
  40959b:	mov    edx,DWORD PTR [rdi+0x14]
  40959e:	mov    ecx,DWORD PTR [rdi+0x18]
  4095a1:	mov    eax,DWORD PTR [rdi+0xc]
  4095a4:	add    eax,0xffffffff
  4095a7:	mov    DWORD PTR [rsp+0x14],eax
  4095ab:	je     40966d <flatcc_verify_union_table@@Base+0xdd>
  4095b1:	add    ecx,edx
  4095b3:	mov    eax,0xf
  4095b8:	cmp    ecx,edx
  4095ba:	jbe    409668 <flatcc_verify_union_table@@Base+0xd8>
  4095c0:	mov    edi,ecx
  4095c2:	lea    rdx,[rdi+0x4]
  4095c6:	cmp    rdx,r11
  4095c9:	ja     409668 <flatcc_verify_union_table@@Base+0xd8>
  4095cf:	mov    edx,edi
  4095d1:	and    edx,0x3
  4095d4:	test   rdx,rdx
  4095d7:	jne    409668 <flatcc_verify_union_table@@Base+0xd8>
  4095dd:	mov    DWORD PTR [rsp+0x20],ecx
  4095e1:	mov    r10d,ecx
  4095e4:	sub    r10d,DWORD PTR [r8+rdi*1]
  4095e8:	mov    eax,0x1d
  4095ed:	test   r10d,0x80000001
  4095f4:	jne    409668 <flatcc_verify_union_table@@Base+0xd8>
  4095f6:	mov    r9d,r10d
  4095f9:	lea    rdx,[r9+0x2]
  4095fd:	mov    eax,0x1b
  409602:	cmp    rdx,r11
  409605:	ja     409668 <flatcc_verify_union_table@@Base+0xd8>
  409607:	movzx  edi,WORD PTR [r8+r9*1]
  40960c:	mov    WORD PTR [rsp+0x26],di
  409611:	mov    eax,0x1e
  409616:	test   dil,0x1
  40961a:	jne    409668 <flatcc_verify_union_table@@Base+0xd8>
  40961c:	mov    edx,edi
  40961e:	add    edx,r10d
  409621:	cmp    edx,r11d
  409624:	ja     409668 <flatcc_verify_union_table@@Base+0xd8>
  409626:	movzx  edx,di
  409629:	mov    eax,0x1c
  40962e:	cmp    edx,0x4
  409631:	jb     409668 <flatcc_verify_union_table@@Base+0xd8>
  409633:	add    r10d,0x2
  409637:	movzx  edx,WORD PTR [r8+r10*1]
  40963c:	mov    WORD PTR [rsp+0x24],dx
  409641:	mov    edi,r11d
  409644:	sub    edi,ecx
  409646:	mov    eax,0x14
  40964b:	cmp    edi,edx
  40964d:	jb     409668 <flatcc_verify_union_table@@Base+0xd8>
  40964f:	add    r9,r8
  409652:	mov    QWORD PTR [rsp+0x18],r9
  409657:	mov    QWORD PTR [rsp+0x8],r8
  40965c:	mov    DWORD PTR [rsp+0x10],r11d
  409661:	lea    rdi,[rsp+0x8]
  409666:	call   rsi
  409668:	add    rsp,0x28
  40966c:	ret    
  40966d:	mov    eax,0x3
  409672:	add    rsp,0x28
  409676:	ret    
  409677:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409680 <flatcc_verify_union_struct@@Base>:
  409680:	mov    ecx,DWORD PTR [rdi+0x18]
  409683:	mov    eax,0x12
  409688:	test   ecx,ecx
  40968a:	je     4096bb <flatcc_verify_union_struct@@Base+0x3b>
  40968c:	mov    r8d,DWORD PTR [rdi+0x8]
  409690:	add    ecx,DWORD PTR [rdi+0x14]
  409693:	cmp    ecx,r8d
  409696:	ja     4096bb <flatcc_verify_union_struct@@Base+0x3b>
  409698:	mov    eax,0xa
  40969d:	add    esi,ecx
  40969f:	jb     4096bb <flatcc_verify_union_struct@@Base+0x3b>
  4096a1:	mov    eax,0x9
  4096a6:	cmp    esi,r8d
  4096a9:	ja     4096bb <flatcc_verify_union_struct@@Base+0x3b>
  4096ab:	movzx  eax,dx
  4096ae:	add    eax,0xffffffff
  4096b1:	and    ecx,eax
  4096b3:	mov    eax,0xb
  4096b8:	cmove  eax,ecx
  4096bb:	ret    
  4096bc:	nop    DWORD PTR [rax+0x0]

00000000004096c0 <flatcc_verify_union_string@@Base>:
  4096c0:	mov    edx,DWORD PTR [rdi+0x14]
  4096c3:	mov    ecx,DWORD PTR [rdi+0x18]
  4096c6:	add    ecx,edx
  4096c8:	mov    eax,0x11
  4096cd:	cmp    ecx,edx
  4096cf:	jbe    409716 <flatcc_verify_union_string@@Base+0x56>
  4096d1:	mov    r8d,DWORD PTR [rdi+0x8]
  4096d5:	mov    esi,ecx
  4096d7:	lea    rdx,[rsi+0x4]
  4096db:	cmp    rdx,r8
  4096de:	ja     409716 <flatcc_verify_union_string@@Base+0x56>
  4096e0:	mov    edx,esi
  4096e2:	and    edx,0x3
  4096e5:	test   rdx,rdx
  4096e8:	jne    409716 <flatcc_verify_union_string@@Base+0x56>
  4096ea:	mov    rdi,QWORD PTR [rdi]
  4096ed:	mov    esi,DWORD PTR [rdi+rsi*1]
  4096f0:	add    ecx,0x4
  4096f3:	sub    r8d,ecx
  4096f6:	lea    edx,[rsi+0x1]
  4096f9:	mov    eax,0x8
  4096fe:	cmp    r8d,edx
  409701:	jb     409716 <flatcc_verify_union_string@@Base+0x56>
  409703:	mov    eax,ecx
  409705:	add    rdi,rax
  409708:	xor    ecx,ecx
  40970a:	cmp    BYTE PTR [rsi+rdi*1],0x0
  40970e:	mov    eax,0x7
  409713:	cmove  eax,ecx
  409716:	ret    
  409717:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409720 <flatcc_verify_buffer_header@@Base>:
  409720:	push   rbx
  409721:	sub    rsp,0x10
  409725:	mov    rbx,rdi
  409728:	mov    eax,0x5
  40972d:	test   bl,0x3
  409730:	jne    409788 <flatcc_verify_buffer_header@@Base+0x68>
  409732:	mov    rcx,rdx
  409735:	mov    rdx,rsi
  409738:	shr    rdx,0x3
  40973c:	mov    eax,0x6
  409741:	cmp    rdx,0x1ffffffe
  409748:	ja     409788 <flatcc_verify_buffer_header@@Base+0x68>
  40974a:	mov    eax,0x1
  40974f:	cmp    rsi,0x8
  409753:	jb     409788 <flatcc_verify_buffer_header@@Base+0x68>
  409755:	test   rcx,rcx
  409758:	je     409786 <flatcc_verify_buffer_header@@Base+0x66>
  40975a:	mov    DWORD PTR [rsp+0xc],0x0
  409762:	lea    rdi,[rsp+0xc]
  409767:	mov    edx,0x4
  40976c:	mov    rsi,rcx
  40976f:	call   403040 <strncpy@plt>
  409774:	mov    ecx,DWORD PTR [rsp+0xc]
  409778:	test   ecx,ecx
  40977a:	je     409786 <flatcc_verify_buffer_header@@Base+0x66>
  40977c:	mov    eax,0x2
  409781:	cmp    DWORD PTR [rbx+0x4],ecx
  409784:	jne    409788 <flatcc_verify_buffer_header@@Base+0x68>
  409786:	xor    eax,eax
  409788:	add    rsp,0x10
  40978c:	pop    rbx
  40978d:	ret    
  40978e:	xchg   ax,ax

0000000000409790 <flatcc_verify_typed_buffer_header@@Base>:
  409790:	mov    eax,0x5
  409795:	test   dil,0x3
  409799:	jne    4097cb <flatcc_verify_typed_buffer_header@@Base+0x3b>
  40979b:	mov    rcx,rsi
  40979e:	shr    rcx,0x3
  4097a2:	mov    eax,0x6
  4097a7:	cmp    rcx,0x1ffffffe
  4097ae:	ja     4097cb <flatcc_verify_typed_buffer_header@@Base+0x3b>
  4097b0:	mov    eax,0x1
  4097b5:	cmp    rsi,0x8
  4097b9:	jb     4097cb <flatcc_verify_typed_buffer_header@@Base+0x3b>
  4097bb:	test   edx,edx
  4097bd:	je     4097c9 <flatcc_verify_typed_buffer_header@@Base+0x39>
  4097bf:	mov    eax,0x2
  4097c4:	cmp    DWORD PTR [rdi+0x4],edx
  4097c7:	jne    4097cb <flatcc_verify_typed_buffer_header@@Base+0x3b>
  4097c9:	xor    eax,eax
  4097cb:	ret    
  4097cc:	nop    DWORD PTR [rax+0x0]

00000000004097d0 <flatcc_verify_struct_as_root@@Base>:
  4097d0:	push   rbp
  4097d1:	push   r15
  4097d3:	push   r14
  4097d5:	push   r12
  4097d7:	push   rbx
  4097d8:	sub    rsp,0x10
  4097dc:	mov    rbx,rdi
  4097df:	mov    eax,0x5
  4097e4:	test   bl,0x3
  4097e7:	jne    4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  4097ed:	mov    r15,rcx
  4097f0:	mov    rbp,rsi
  4097f3:	mov    rcx,rsi
  4097f6:	shr    rcx,0x3
  4097fa:	mov    eax,0x6
  4097ff:	cmp    rcx,0x1ffffffe
  409806:	ja     4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  40980c:	mov    eax,0x1
  409811:	cmp    rbp,0x8
  409815:	jb     4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  40981b:	mov    r14d,r8d
  40981e:	mov    r12,rdx
  409821:	test   rdx,rdx
  409824:	je     40987c <flatcc_verify_struct_as_root@@Base+0xac>
  409826:	mov    DWORD PTR [rsp+0x8],0x0
  40982e:	lea    rdi,[rsp+0x8]
  409833:	mov    edx,0x4
  409838:	mov    rsi,r12
  40983b:	call   403040 <strncpy@plt>
  409840:	mov    eax,DWORD PTR [rsp+0x8]
  409844:	test   eax,eax
  409846:	je     40987c <flatcc_verify_struct_as_root@@Base+0xac>
  409848:	cmp    DWORD PTR [rbx+0x4],eax
  40984b:	je     40987c <flatcc_verify_struct_as_root@@Base+0xac>
  40984d:	mov    DWORD PTR [rsp+0xc],0x0
  409855:	lea    rdi,[rsp+0xc]
  40985a:	mov    edx,0x4
  40985f:	mov    rsi,r12
  409862:	call   403040 <strncpy@plt>
  409867:	mov    ecx,DWORD PTR [rsp+0xc]
  40986b:	xor    eax,eax
  40986d:	cmp    DWORD PTR [rbx+0x4],ecx
  409870:	setne  al
  409873:	add    eax,eax
  409875:	test   ecx,ecx
  409877:	cmove  eax,ecx
  40987a:	jmp    4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  40987c:	mov    ecx,DWORD PTR [rbx]
  40987e:	lea    edx,[rcx-0x1]
  409881:	mov    eax,0x12
  409886:	cmp    edx,ebp
  409888:	jae    4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  40988a:	mov    eax,0xa
  40988f:	add    r15d,ecx
  409892:	jb     4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  409894:	mov    eax,0x9
  409899:	cmp    r15d,ebp
  40989c:	ja     4098af <flatcc_verify_struct_as_root@@Base+0xdf>
  40989e:	movzx  eax,r14w
  4098a2:	add    eax,0xffffffff
  4098a5:	and    ecx,eax
  4098a7:	mov    eax,0xb
  4098ac:	cmove  eax,ecx
  4098af:	add    rsp,0x10
  4098b3:	pop    rbx
  4098b4:	pop    r12
  4098b6:	pop    r14
  4098b8:	pop    r15
  4098ba:	pop    rbp
  4098bb:	ret    
  4098bc:	nop    DWORD PTR [rax+0x0]

00000000004098c0 <flatcc_verify_struct_as_typed_root@@Base>:
  4098c0:	mov    eax,0x5
  4098c5:	test   dil,0x3
  4098c9:	jne    40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  4098cb:	mov    r9,rsi
  4098ce:	shr    r9,0x3
  4098d2:	mov    eax,0x6
  4098d7:	cmp    r9,0x1ffffffe
  4098de:	ja     40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  4098e0:	mov    eax,0x1
  4098e5:	cmp    rsi,0x8
  4098e9:	jb     40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  4098eb:	test   edx,edx
  4098ed:	je     4098f9 <flatcc_verify_struct_as_typed_root@@Base+0x39>
  4098ef:	mov    eax,0x2
  4098f4:	cmp    DWORD PTR [rdi+0x4],edx
  4098f7:	jne    40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  4098f9:	mov    edx,DWORD PTR [rdi]
  4098fb:	lea    edi,[rdx-0x1]
  4098fe:	mov    eax,0x12
  409903:	cmp    edi,esi
  409905:	jae    40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  409907:	mov    eax,0xa
  40990c:	add    ecx,edx
  40990e:	jb     40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  409910:	mov    eax,0x9
  409915:	cmp    ecx,esi
  409917:	ja     40992a <flatcc_verify_struct_as_typed_root@@Base+0x6a>
  409919:	movzx  eax,r8w
  40991d:	add    eax,0xffffffff
  409920:	and    edx,eax
  409922:	mov    eax,0xb
  409927:	cmove  eax,edx
  40992a:	ret    
  40992b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409930 <flatcc_verify_table_as_root@@Base>:
  409930:	push   r15
  409932:	push   r14
  409934:	push   r13
  409936:	push   r12
  409938:	push   rbx
  409939:	sub    rsp,0x20
  40993d:	mov    r12,rdi
  409940:	mov    eax,0x5
  409945:	test   r12b,0x3
  409949:	jne    409a95 <flatcc_verify_table_as_root@@Base+0x165>
  40994f:	mov    r14,rcx
  409952:	mov    r15,rsi
  409955:	mov    r13d,r15d
  409958:	mov    rcx,r13
  40995b:	shr    rcx,0x3
  40995f:	mov    eax,0x6
  409964:	cmp    rcx,0x1ffffffe
  40996b:	ja     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409971:	mov    eax,0x1
  409976:	cmp    r13,0x8
  40997a:	jb     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409980:	mov    rbx,rdx
  409983:	test   rdx,rdx
  409986:	je     4099dd <flatcc_verify_table_as_root@@Base+0xad>
  409988:	mov    DWORD PTR [rsp],0x0
  40998f:	mov    rdi,rsp
  409992:	mov    edx,0x4
  409997:	mov    rsi,rbx
  40999a:	call   403040 <strncpy@plt>
  40999f:	mov    eax,DWORD PTR [rsp]
  4099a2:	test   eax,eax
  4099a4:	je     4099dd <flatcc_verify_table_as_root@@Base+0xad>
  4099a6:	cmp    DWORD PTR [r12+0x4],eax
  4099ab:	je     4099dd <flatcc_verify_table_as_root@@Base+0xad>
  4099ad:	mov    DWORD PTR [rsp],0x0
  4099b4:	mov    rdi,rsp
  4099b7:	mov    edx,0x4
  4099bc:	mov    rsi,rbx
  4099bf:	call   403040 <strncpy@plt>
  4099c4:	mov    ecx,DWORD PTR [rsp]
  4099c7:	xor    eax,eax
  4099c9:	cmp    DWORD PTR [r12+0x4],ecx
  4099ce:	setne  al
  4099d1:	add    eax,eax
  4099d3:	test   ecx,ecx
  4099d5:	cmove  eax,ecx
  4099d8:	jmp    409a95 <flatcc_verify_table_as_root@@Base+0x165>
  4099dd:	mov    ecx,DWORD PTR [r12]
  4099e1:	mov    DWORD PTR [rsp+0xc],0x63
  4099e9:	mov    eax,0xf
  4099ee:	test   rcx,rcx
  4099f1:	je     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  4099f7:	lea    rdx,[rcx+0x4]
  4099fb:	cmp    rdx,r13
  4099fe:	ja     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a04:	mov    edx,ecx
  409a06:	and    edx,0x3
  409a09:	test   rdx,rdx
  409a0c:	jne    409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a12:	mov    DWORD PTR [rsp+0x18],ecx
  409a16:	mov    esi,ecx
  409a18:	sub    esi,DWORD PTR [r12+rcx*1]
  409a1c:	mov    eax,0x1d
  409a21:	test   esi,0x80000001
  409a27:	jne    409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a29:	mov    edx,esi
  409a2b:	lea    rdi,[rdx+0x2]
  409a2f:	mov    eax,0x1b
  409a34:	cmp    rdi,r13
  409a37:	ja     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a39:	movzx  ebx,WORD PTR [r12+rdx*1]
  409a3e:	mov    WORD PTR [rsp+0x1e],bx
  409a43:	mov    eax,0x1e
  409a48:	test   bl,0x1
  409a4b:	jne    409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a4d:	mov    edi,ebx
  409a4f:	add    edi,esi
  409a51:	cmp    edi,r15d
  409a54:	ja     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a56:	movzx  edi,bx
  409a59:	mov    eax,0x1c
  409a5e:	cmp    edi,0x4
  409a61:	jb     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a63:	add    esi,0x2
  409a66:	movzx  esi,WORD PTR [r12+rsi*1]
  409a6b:	mov    WORD PTR [rsp+0x1c],si
  409a70:	mov    edi,r15d
  409a73:	sub    edi,ecx
  409a75:	mov    eax,0x14
  409a7a:	cmp    edi,esi
  409a7c:	jb     409a95 <flatcc_verify_table_as_root@@Base+0x165>
  409a7e:	add    rdx,r12
  409a81:	mov    QWORD PTR [rsp+0x10],rdx
  409a86:	mov    QWORD PTR [rsp],r12
  409a8a:	mov    DWORD PTR [rsp+0x8],r15d
  409a8f:	mov    rdi,rsp
  409a92:	call   r14
  409a95:	add    rsp,0x20
  409a99:	pop    rbx
  409a9a:	pop    r12
  409a9c:	pop    r13
  409a9e:	pop    r14
  409aa0:	pop    r15
  409aa2:	ret    
  409aa3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409aad:	nop    DWORD PTR [rax]

0000000000409ab0 <flatcc_verify_table_as_typed_root@@Base>:
  409ab0:	mov    eax,0x5
  409ab5:	test   dil,0x3
  409ab9:	jne    409bc8 <flatcc_verify_table_as_typed_root@@Base+0x118>
  409abf:	mov    r8d,esi
  409ac2:	mov    r9,r8
  409ac5:	shr    r9,0x3
  409ac9:	mov    eax,0x6
  409ace:	cmp    r9,0x1ffffffe
  409ad5:	ja     409bc8 <flatcc_verify_table_as_typed_root@@Base+0x118>
  409adb:	mov    eax,0x1
  409ae0:	cmp    r8,0x8
  409ae4:	jb     409bc8 <flatcc_verify_table_as_typed_root@@Base+0x118>
  409aea:	test   edx,edx
  409aec:	je     409afc <flatcc_verify_table_as_typed_root@@Base+0x4c>
  409aee:	mov    eax,0x2
  409af3:	cmp    DWORD PTR [rdi+0x4],edx
  409af6:	jne    409bc8 <flatcc_verify_table_as_typed_root@@Base+0x118>
  409afc:	sub    rsp,0x28
  409b00:	mov    r11d,DWORD PTR [rdi]
  409b03:	mov    DWORD PTR [rsp+0x14],0x63
  409b0b:	mov    eax,0xf
  409b10:	test   r11,r11
  409b13:	je     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b19:	lea    rdx,[r11+0x4]
  409b1d:	cmp    rdx,r8
  409b20:	ja     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b26:	mov    edx,r11d
  409b29:	and    edx,0x3
  409b2c:	test   rdx,rdx
  409b2f:	jne    409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b35:	mov    DWORD PTR [rsp+0x20],r11d
  409b3a:	mov    r10d,r11d
  409b3d:	sub    r10d,DWORD PTR [rdi+r11*1]
  409b41:	mov    eax,0x1d
  409b46:	test   r10d,0x80000001
  409b4d:	jne    409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b4f:	mov    r9d,r10d
  409b52:	lea    rdx,[r9+0x2]
  409b56:	mov    eax,0x1b
  409b5b:	cmp    rdx,r8
  409b5e:	ja     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b60:	movzx  r8d,WORD PTR [rdi+r9*1]
  409b65:	mov    WORD PTR [rsp+0x26],r8w
  409b6b:	mov    eax,0x1e
  409b70:	test   r8b,0x1
  409b74:	jne    409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b76:	mov    edx,r8d
  409b79:	add    edx,r10d
  409b7c:	cmp    edx,esi
  409b7e:	ja     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b80:	movzx  edx,r8w
  409b84:	mov    eax,0x1c
  409b89:	cmp    edx,0x4
  409b8c:	jb     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409b8e:	add    r10d,0x2
  409b92:	movzx  r8d,WORD PTR [rdi+r10*1]
  409b97:	mov    WORD PTR [rsp+0x24],r8w
  409b9d:	mov    edx,esi
  409b9f:	sub    edx,r11d
  409ba2:	mov    eax,0x14
  409ba7:	cmp    edx,r8d
  409baa:	jb     409bc4 <flatcc_verify_table_as_typed_root@@Base+0x114>
  409bac:	add    r9,rdi
  409baf:	mov    QWORD PTR [rsp+0x18],r9
  409bb4:	mov    QWORD PTR [rsp+0x8],rdi
  409bb9:	mov    DWORD PTR [rsp+0x10],esi
  409bbd:	lea    rdi,[rsp+0x8]
  409bc2:	call   rcx
  409bc4:	add    rsp,0x28
  409bc8:	ret    
  409bc9:	nop    DWORD PTR [rax+0x0]

0000000000409bd0 <flatcc_verify_struct_as_nested_root@@Base>:
  409bd0:	push   r14
  409bd2:	push   rbx
  409bd3:	lea    esi,[rsi+rsi*1]
  409bd6:	add    esi,0x4
  409bd9:	movzx  r10d,WORD PTR [rdi+0x1e]
  409bde:	cmp    si,r10w
  409be2:	jae    409c4c <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  409be4:	mov    r11,QWORD PTR [rdi+0x10]
  409be8:	movzx  ebx,si
  409beb:	movzx  eax,WORD PTR [r11+rbx*1]
  409bf0:	test   eax,eax
  409bf2:	je     409c4c <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  409bf4:	add    r11,rbx
  409bf7:	lea    esi,[rax+0x4]
  409bfa:	movzx  ebx,WORD PTR [rdi+0x1c]
  409bfe:	cmp    esi,ebx
  409c00:	ja     409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c02:	add    eax,DWORD PTR [rdi+0x18]
  409c05:	test   al,0x3
  409c07:	jne    409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c09:	test   eax,eax
  409c0b:	je     409cfd <flatcc_verify_struct_as_nested_root@@Base+0x12d>
  409c11:	mov    r10,QWORD PTR [rdi]
  409c14:	mov    esi,eax
  409c16:	mov    esi,DWORD PTR [r10+rsi*1]
  409c1a:	add    esi,eax
  409c1c:	cmp    esi,eax
  409c1e:	jbe    409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c20:	test   sil,0x3
  409c24:	jne    409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c26:	mov    eax,DWORD PTR [rdi+0x8]
  409c29:	mov    r14d,esi
  409c2c:	lea    rbx,[r14+0x4]
  409c30:	cmp    rbx,rax
  409c33:	ja     409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c35:	movzx  ebx,r9w
  409c39:	add    eax,0xfffffffc
  409c3c:	sub    eax,esi
  409c3e:	imul   ebx,DWORD PTR [r10+r14*1]
  409c43:	cmp    eax,ebx
  409c45:	jb     409c66 <flatcc_verify_struct_as_nested_root@@Base+0x96>
  409c47:	jmp    409cfd <flatcc_verify_struct_as_nested_root@@Base+0x12d>
  409c4c:	test   edx,edx
  409c4e:	je     409ced <flatcc_verify_struct_as_nested_root@@Base+0x11d>
  409c54:	cmp    si,r10w
  409c58:	jae    409ce1 <flatcc_verify_struct_as_nested_root@@Base+0x111>
  409c5e:	movzx  r11d,si
  409c62:	add    r11,QWORD PTR [rdi+0x10]
  409c66:	movzx  ecx,WORD PTR [r11]
  409c6a:	test   ecx,ecx
  409c6c:	je     409ce1 <flatcc_verify_struct_as_nested_root@@Base+0x111>
  409c6e:	lea    edx,[rcx+0x4]
  409c71:	movzx  esi,WORD PTR [rdi+0x1c]
  409c75:	mov    eax,0xd
  409c7a:	cmp    edx,esi
  409c7c:	ja     409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409c82:	add    ecx,DWORD PTR [rdi+0x18]
  409c85:	mov    eax,0xc
  409c8a:	test   cl,0x3
  409c8d:	jne    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409c93:	test   ecx,ecx
  409c95:	je     409d35 <flatcc_verify_struct_as_nested_root@@Base+0x165>
  409c9b:	mov    rdx,QWORD PTR [rdi]
  409c9e:	mov    eax,ecx
  409ca0:	mov    esi,DWORD PTR [rdx+rax*1]
  409ca3:	add    esi,ecx
  409ca5:	mov    eax,0x10
  409caa:	cmp    esi,ecx
  409cac:	jbe    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409cb2:	test   sil,0x3
  409cb6:	jne    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409cb8:	mov    ecx,DWORD PTR [rdi+0x8]
  409cbb:	mov    edi,esi
  409cbd:	lea    rbx,[rdi+0x4]
  409cc1:	cmp    rbx,rcx
  409cc4:	ja     409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409cc6:	movzx  eax,r9w
  409cca:	add    ecx,0xfffffffc
  409ccd:	sub    ecx,esi
  409ccf:	imul   eax,DWORD PTR [rdx+rdi*1]
  409cd3:	xor    edx,edx
  409cd5:	cmp    ecx,eax
  409cd7:	mov    eax,0x1a
  409cdc:	cmovae eax,edx
  409cdf:	jmp    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409ce1:	xor    eax,eax
  409ce3:	test   edx,edx
  409ce5:	setne  al
  409ce8:	shl    eax,0x2
  409ceb:	jmp    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409ced:	xor    eax,eax
  409cef:	cmp    si,r10w
  409cf3:	jae    409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409cf5:	movzx  r11d,si
  409cf9:	add    r11,QWORD PTR [rdi+0x10]
  409cfd:	movzx  esi,WORD PTR [r11]
  409d01:	xor    eax,eax
  409d03:	test   rsi,rsi
  409d06:	je     409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409d08:	mov    edx,DWORD PTR [rdi+0x18]
  409d0b:	add    rdx,QWORD PTR [rdi]
  409d0e:	add    rdx,rsi
  409d11:	je     409d37 <flatcc_verify_struct_as_nested_root@@Base+0x167>
  409d13:	mov    eax,DWORD PTR [rdx]
  409d15:	mov    esi,DWORD PTR [rax+rdx*1]
  409d18:	lea    rdi,[rax+rdx*1]
  409d1c:	add    rdi,0x4
  409d20:	movzx  eax,r9w
  409d24:	mov    rdx,rcx
  409d27:	mov    rcx,r8
  409d2a:	mov    r8d,eax
  409d2d:	pop    rbx
  409d2e:	pop    r14
  409d30:	jmp    4097d0 <flatcc_verify_struct_as_root@@Base>
  409d35:	xor    eax,eax
  409d37:	pop    rbx
  409d38:	pop    r14
  409d3a:	ret    
  409d3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409d40 <flatcc_verify_table_as_nested_root@@Base>:
  409d40:	push   rbp
  409d41:	push   r15
  409d43:	push   r14
  409d45:	push   r13
  409d47:	push   r12
  409d49:	push   rbx
  409d4a:	sub    rsp,0x28
  409d4e:	mov    r14,r9
  409d51:	mov    r15,rcx
  409d54:	mov    rbx,rdi
  409d57:	lea    esi,[rsi+rsi*1]
  409d5a:	add    esi,0x4
  409d5d:	movzx  edi,WORD PTR [rdi+0x1e]
  409d61:	cmp    si,di
  409d64:	jae    409dcd <flatcc_verify_table_as_nested_root@@Base+0x8d>
  409d66:	mov    rax,QWORD PTR [rbx+0x10]
  409d6a:	movzx  ebp,si
  409d6d:	movzx  ecx,WORD PTR [rax+rbp*1]
  409d71:	test   ecx,ecx
  409d73:	je     409dcd <flatcc_verify_table_as_nested_root@@Base+0x8d>
  409d75:	add    rax,rbp
  409d78:	lea    esi,[rcx+0x4]
  409d7b:	movzx  edi,WORD PTR [rbx+0x1c]
  409d7f:	cmp    esi,edi
  409d81:	ja     409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409d83:	add    ecx,DWORD PTR [rbx+0x18]
  409d86:	test   cl,0x3
  409d89:	jne    409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409d8b:	test   ecx,ecx
  409d8d:	je     409e8b <flatcc_verify_table_as_nested_root@@Base+0x14b>
  409d93:	mov    rsi,QWORD PTR [rbx]
  409d96:	mov    edi,ecx
  409d98:	mov    edi,DWORD PTR [rsi+rdi*1]
  409d9b:	add    edi,ecx
  409d9d:	cmp    edi,ecx
  409d9f:	jbe    409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409da1:	test   dil,0x3
  409da5:	jne    409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409da7:	mov    ecx,DWORD PTR [rbx+0x8]
  409daa:	mov    r9d,edi
  409dad:	lea    rbp,[r9+0x4]
  409db1:	cmp    rbp,rcx
  409db4:	ja     409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409db6:	movzx  ebp,r8w
  409dba:	add    ecx,0xfffffffc
  409dbd:	sub    ecx,edi
  409dbf:	imul   ebp,DWORD PTR [rsi+r9*1]
  409dc4:	cmp    ecx,ebp
  409dc6:	jb     409de5 <flatcc_verify_table_as_nested_root@@Base+0xa5>
  409dc8:	jmp    409e8b <flatcc_verify_table_as_nested_root@@Base+0x14b>
  409dcd:	test   edx,edx
  409dcf:	je     409e79 <flatcc_verify_table_as_nested_root@@Base+0x139>
  409dd5:	cmp    si,di
  409dd8:	jae    409e6a <flatcc_verify_table_as_nested_root@@Base+0x12a>
  409dde:	movzx  eax,si
  409de1:	add    rax,QWORD PTR [rbx+0x10]
  409de5:	movzx  ecx,WORD PTR [rax]
  409de8:	test   ecx,ecx
  409dea:	je     409e6a <flatcc_verify_table_as_nested_root@@Base+0x12a>
  409dec:	lea    edx,[rcx+0x4]
  409def:	movzx  esi,WORD PTR [rbx+0x1c]
  409df3:	mov    eax,0xd
  409df8:	cmp    edx,esi
  409dfa:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e00:	add    ecx,DWORD PTR [rbx+0x18]
  409e03:	mov    eax,0xc
  409e08:	test   cl,0x3
  409e0b:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e11:	test   ecx,ecx
  409e13:	je     409f3c <flatcc_verify_table_as_nested_root@@Base+0x1fc>
  409e19:	mov    rdx,QWORD PTR [rbx]
  409e1c:	mov    eax,ecx
  409e1e:	mov    esi,DWORD PTR [rdx+rax*1]
  409e21:	add    esi,ecx
  409e23:	mov    eax,0x10
  409e28:	cmp    esi,ecx
  409e2a:	jbe    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e30:	test   sil,0x3
  409e34:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e3a:	mov    ecx,DWORD PTR [rbx+0x8]
  409e3d:	mov    edi,esi
  409e3f:	lea    rbp,[rdi+0x4]
  409e43:	cmp    rbp,rcx
  409e46:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e4c:	movzx  eax,r8w
  409e50:	add    ecx,0xfffffffc
  409e53:	sub    ecx,esi
  409e55:	imul   eax,DWORD PTR [rdx+rdi*1]
  409e59:	xor    edx,edx
  409e5b:	cmp    ecx,eax
  409e5d:	mov    eax,0x1a
  409e62:	cmovae eax,edx
  409e65:	jmp    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e6a:	xor    eax,eax
  409e6c:	test   edx,edx
  409e6e:	setne  al
  409e71:	shl    eax,0x2
  409e74:	jmp    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e79:	xor    eax,eax
  409e7b:	cmp    si,di
  409e7e:	jae    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e84:	movzx  eax,si
  409e87:	add    rax,QWORD PTR [rbx+0x10]
  409e8b:	movzx  ecx,WORD PTR [rax]
  409e8e:	xor    eax,eax
  409e90:	test   rcx,rcx
  409e93:	je     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409e99:	mov    r13d,DWORD PTR [rbx+0x18]
  409e9d:	add    r13,QWORD PTR [rbx]
  409ea0:	add    r13,rcx
  409ea3:	je     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409ea9:	mov    ebp,DWORD PTR [r13+0x0]
  409ead:	lea    r12,[r13*1+0x4]
  409eb5:	add    r12,rbp
  409eb8:	mov    eax,0x5
  409ebd:	test   r12b,0x3
  409ec1:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409ec3:	mov    ecx,DWORD PTR [rbp+r13*1+0x0]
  409ec8:	mov    eax,0x6
  409ecd:	cmp    ecx,0xfffffff7
  409ed0:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409ed2:	mov    eax,0x1
  409ed7:	cmp    ecx,0x8
  409eda:	jb     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409edc:	test   r15,r15
  409edf:	je     409f4d <flatcc_verify_table_as_nested_root@@Base+0x20d>
  409ee1:	mov    DWORD PTR [rsp],0x0
  409ee8:	mov    rdi,rsp
  409eeb:	mov    edx,0x4
  409ef0:	mov    rsi,r15
  409ef3:	mov    QWORD PTR [rsp+0x20],rcx
  409ef8:	call   403040 <strncpy@plt>
  409efd:	mov    rcx,QWORD PTR [rsp+0x20]
  409f02:	mov    eax,DWORD PTR [rsp]
  409f05:	test   eax,eax
  409f07:	je     409f4d <flatcc_verify_table_as_nested_root@@Base+0x20d>
  409f09:	add    rbp,r13
  409f0c:	cmp    DWORD PTR [rbp+0x8],eax
  409f0f:	je     409f4d <flatcc_verify_table_as_nested_root@@Base+0x20d>
  409f11:	mov    DWORD PTR [rsp],0x0
  409f18:	mov    rdi,rsp
  409f1b:	mov    edx,0x4
  409f20:	mov    rsi,r15
  409f23:	call   403040 <strncpy@plt>
  409f28:	mov    ecx,DWORD PTR [rsp]
  409f2b:	xor    eax,eax
  409f2d:	cmp    DWORD PTR [rbp+0x8],ecx
  409f30:	setne  al
  409f33:	add    eax,eax
  409f35:	test   ecx,ecx
  409f37:	cmove  eax,ecx
  409f3a:	jmp    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409f3c:	xor    eax,eax
  409f3e:	add    rsp,0x28
  409f42:	pop    rbx
  409f43:	pop    r12
  409f45:	pop    r13
  409f47:	pop    r14
  409f49:	pop    r15
  409f4b:	pop    rbp
  409f4c:	ret    
  409f4d:	mov    ebp,DWORD PTR [r12]
  409f51:	mov    eax,DWORD PTR [rbx+0xc]
  409f54:	add    eax,0xffffffff
  409f57:	mov    DWORD PTR [rsp+0xc],eax
  409f5b:	je     40a00e <flatcc_verify_table_as_nested_root@@Base+0x2ce>
  409f61:	mov    eax,0xf
  409f66:	test   ebp,ebp
  409f68:	je     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409f6a:	lea    rdx,[rbp+0x4]
  409f6e:	cmp    rdx,rcx
  409f71:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409f73:	mov    edx,ebp
  409f75:	and    edx,0x3
  409f78:	test   rdx,rdx
  409f7b:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409f7d:	mov    DWORD PTR [rsp+0x18],ebp
  409f81:	mov    esi,ebp
  409f83:	sub    esi,DWORD PTR [r12+rbp*1]
  409f87:	mov    eax,0x1d
  409f8c:	test   esi,0x80000001
  409f92:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409f94:	mov    edx,esi
  409f96:	lea    rdi,[rdx+0x2]
  409f9a:	mov    eax,0x1b
  409f9f:	cmp    rdi,rcx
  409fa2:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409fa4:	movzx  ebx,WORD PTR [r12+rdx*1]
  409fa9:	mov    WORD PTR [rsp+0x1e],bx
  409fae:	mov    eax,0x1e
  409fb3:	test   bl,0x1
  409fb6:	jne    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409fb8:	mov    edi,ebx
  409fba:	add    edi,esi
  409fbc:	cmp    edi,ecx
  409fbe:	ja     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409fc4:	movzx  edi,bx
  409fc7:	mov    eax,0x1c
  409fcc:	cmp    edi,0x4
  409fcf:	jb     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409fd5:	add    esi,0x2
  409fd8:	movzx  esi,WORD PTR [r12+rsi*1]
  409fdd:	mov    WORD PTR [rsp+0x1c],si
  409fe2:	mov    edi,ecx
  409fe4:	sub    edi,ebp
  409fe6:	mov    eax,0x14
  409feb:	cmp    edi,esi
  409fed:	jb     409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  409ff3:	add    rdx,r12
  409ff6:	mov    QWORD PTR [rsp+0x10],rdx
  409ffb:	mov    QWORD PTR [rsp],r12
  409fff:	mov    DWORD PTR [rsp+0x8],ecx
  40a003:	mov    rdi,rsp
  40a006:	call   r14
  40a009:	jmp    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  40a00e:	mov    eax,0x3
  40a013:	jmp    409f3e <flatcc_verify_table_as_nested_root@@Base+0x1fe>
  40a018:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040a020 <flatcc_verify_union_field@@Base>:
  40a020:	push   rbp
  40a021:	push   r14
  40a023:	push   rbx
  40a024:	sub    rsp,0x20
  40a028:	lea    r9d,[rsi+rsi*1]
  40a02c:	lea    eax,[rsi+rsi*1]
  40a02f:	add    eax,0x2
  40a032:	movzx  esi,WORD PTR [rdi+0x1e]
  40a036:	cmp    ax,si
  40a039:	jae    40a11b <flatcc_verify_union_field@@Base+0xfb>
  40a03f:	mov    rbx,QWORD PTR [rdi+0x10]
  40a043:	movzx  eax,ax
  40a046:	movzx  r10d,WORD PTR [rbx+rax*1]
  40a04b:	test   r10,r10
  40a04e:	je     40a11b <flatcc_verify_union_field@@Base+0xfb>
  40a054:	mov    eax,0xd
  40a059:	cmp    r10w,WORD PTR [rdi+0x1c]
  40a05e:	jae    40a143 <flatcc_verify_union_field@@Base+0x123>
  40a064:	mov    r8,QWORD PTR [rdi]
  40a067:	add    r9d,0x4
  40a06b:	mov    al,0x1
  40a06d:	cmp    r9w,si
  40a071:	jae    40a07f <flatcc_verify_union_field@@Base+0x5f>
  40a073:	movzx  eax,r9w
  40a077:	cmp    WORD PTR [rbx+rax*1],0x0
  40a07c:	sete   al
  40a07f:	mov    r14d,DWORD PTR [rdi+0x18]
  40a083:	lea    r11,[r8+r14*1]
  40a087:	mov    bpl,BYTE PTR [r10+r11*1]
  40a08b:	test   al,al
  40a08d:	jne    40a09d <flatcc_verify_union_field@@Base+0x7d>
  40a08f:	mov    eax,0x18
  40a094:	test   bpl,bpl
  40a097:	je     40a143 <flatcc_verify_union_field@@Base+0x123>
  40a09d:	xor    eax,eax
  40a09f:	test   bpl,bpl
  40a0a2:	je     40a143 <flatcc_verify_union_field@@Base+0x123>
  40a0a8:	cmp    r9w,si
  40a0ac:	jae    40a14c <flatcc_verify_union_field@@Base+0x12c>
  40a0b2:	movzx  eax,r9w
  40a0b6:	movzx  esi,WORD PTR [rbx+rax*1]
  40a0ba:	test   esi,esi
  40a0bc:	je     40a14c <flatcc_verify_union_field@@Base+0x12c>
  40a0c2:	lea    edx,[rsi+0x4]
  40a0c5:	movzx  ebp,WORD PTR [rdi+0x1c]
  40a0c9:	mov    eax,0xd
  40a0ce:	cmp    edx,ebp
  40a0d0:	ja     40a143 <flatcc_verify_union_field@@Base+0x123>
  40a0d2:	add    r14d,esi
  40a0d5:	mov    eax,0xc
  40a0da:	test   r14b,0x3
  40a0de:	jne    40a143 <flatcc_verify_union_field@@Base+0x123>
  40a0e0:	mov    eax,0x0
  40a0e5:	test   r14d,r14d
  40a0e8:	je     40a143 <flatcc_verify_union_field@@Base+0x123>
  40a0ea:	mov    QWORD PTR [rsp],r8
  40a0ee:	mov    eax,DWORD PTR [rdi+0x8]
  40a0f1:	mov    DWORD PTR [rsp+0x8],eax
  40a0f5:	mov    eax,DWORD PTR [rdi+0xc]
  40a0f8:	mov    DWORD PTR [rsp+0xc],eax
  40a0fc:	mov    DWORD PTR [rsp+0x14],r14d
  40a101:	mov    eax,r14d
  40a104:	mov    eax,DWORD PTR [r8+rax*1]
  40a108:	mov    DWORD PTR [rsp+0x18],eax
  40a10c:	mov    al,BYTE PTR [r11+r10*1]
  40a110:	mov    BYTE PTR [rsp+0x10],al
  40a114:	mov    rdi,rsp
  40a117:	call   rcx
  40a119:	jmp    40a143 <flatcc_verify_union_field@@Base+0x123>
  40a11b:	add    r9d,0x4
  40a11f:	cmp    r9w,si
  40a123:	jae    40a139 <flatcc_verify_union_field@@Base+0x119>
  40a125:	mov    rcx,QWORD PTR [rdi+0x10]
  40a129:	movzx  esi,r9w
  40a12d:	mov    eax,0x17
  40a132:	cmp    WORD PTR [rcx+rsi*1],0x0
  40a137:	jne    40a143 <flatcc_verify_union_field@@Base+0x123>
  40a139:	test   edx,edx
  40a13b:	mov    eax,0x15
  40a140:	cmove  eax,edx
  40a143:	add    rsp,0x20
  40a147:	pop    rbx
  40a148:	pop    r14
  40a14a:	pop    rbp
  40a14b:	ret    
  40a14c:	xor    eax,eax
  40a14e:	test   edx,edx
  40a150:	setne  al
  40a153:	shl    eax,0x2
  40a156:	jmp    40a143 <flatcc_verify_union_field@@Base+0x123>
  40a158:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040a160 <flatcc_verify_union_vector_field@@Base>:
  40a160:	push   rbp
  40a161:	push   r15
  40a163:	push   r14
  40a165:	push   r13
  40a167:	push   r12
  40a169:	push   rbx
  40a16a:	sub    rsp,0x28
  40a16e:	mov    r12,rcx
  40a171:	lea    r10d,[rsi+rsi*1]
  40a175:	lea    ecx,[rsi+rsi*1]
  40a178:	add    ecx,0x2
  40a17b:	movzx  esi,WORD PTR [rdi+0x1e]
  40a17f:	cmp    cx,si
  40a182:	jae    40a195 <flatcc_verify_union_vector_field@@Base+0x35>
  40a184:	mov    r11,QWORD PTR [rdi+0x10]
  40a188:	movzx  eax,cx
  40a18b:	movzx  ebp,WORD PTR [r11+rax*1]
  40a190:	test   bp,bp
  40a193:	jne    40a1d6 <flatcc_verify_union_vector_field@@Base+0x76>
  40a195:	lea    eax,[r10+0x4]
  40a199:	cmp    ax,si
  40a19c:	jae    40a22b <flatcc_verify_union_vector_field@@Base+0xcb>
  40a1a2:	test   edx,edx
  40a1a4:	je     40a1c0 <flatcc_verify_union_vector_field@@Base+0x60>
  40a1a6:	mov    rbp,QWORD PTR [rdi+0x10]
  40a1aa:	movzx  eax,ax
  40a1ad:	movzx  ebp,WORD PTR [rbp+rax*1+0x0]
  40a1b2:	mov    eax,0x16
  40a1b7:	test   bp,bp
  40a1ba:	je     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a1c0:	cmp    cx,si
  40a1c3:	jae    40a23a <flatcc_verify_union_vector_field@@Base+0xda>
  40a1c5:	mov    r11,QWORD PTR [rdi+0x10]
  40a1c9:	movzx  eax,cx
  40a1cc:	movzx  ebp,WORD PTR [r11+rax*1]
  40a1d1:	test   bp,bp
  40a1d4:	je     40a23a <flatcc_verify_union_vector_field@@Base+0xda>
  40a1d6:	add    rax,r11
  40a1d9:	movzx  ecx,bp
  40a1dc:	lea    ebp,[rcx+0x4]
  40a1df:	movzx  ebx,WORD PTR [rdi+0x1c]
  40a1e3:	cmp    ebp,ebx
  40a1e5:	ja     40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a1e7:	add    ecx,DWORD PTR [rdi+0x18]
  40a1ea:	test   cl,0x3
  40a1ed:	jne    40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a1ef:	test   ecx,ecx
  40a1f1:	je     40a2e9 <flatcc_verify_union_vector_field@@Base+0x189>
  40a1f7:	mov    r8,QWORD PTR [rdi]
  40a1fa:	mov    ebp,ecx
  40a1fc:	mov    ebp,DWORD PTR [r8+rbp*1]
  40a200:	add    ebp,ecx
  40a202:	cmp    ebp,ecx
  40a204:	jbe    40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a206:	test   bpl,0x3
  40a20a:	jne    40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a20c:	mov    ecx,DWORD PTR [rdi+0x8]
  40a20f:	mov    r9d,ebp
  40a212:	lea    rbx,[r9+0x4]
  40a216:	cmp    rbx,rcx
  40a219:	ja     40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a21b:	add    ecx,0xfffffffc
  40a21e:	sub    ecx,ebp
  40a220:	cmp    ecx,DWORD PTR [r8+r9*1]
  40a224:	jb     40a252 <flatcc_verify_union_vector_field@@Base+0xf2>
  40a226:	jmp    40a2e9 <flatcc_verify_union_vector_field@@Base+0x189>
  40a22b:	mov    eax,0x16
  40a230:	test   edx,edx
  40a232:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a238:	jmp    40a1c0 <flatcc_verify_union_vector_field@@Base+0x60>
  40a23a:	test   edx,edx
  40a23c:	je     40a2d4 <flatcc_verify_union_vector_field@@Base+0x174>
  40a242:	cmp    cx,si
  40a245:	jae    40a447 <flatcc_verify_union_vector_field@@Base+0x2e7>
  40a24b:	movzx  eax,cx
  40a24e:	add    rax,QWORD PTR [rdi+0x10]
  40a252:	movzx  ecx,WORD PTR [rax]
  40a255:	test   ecx,ecx
  40a257:	je     40a447 <flatcc_verify_union_vector_field@@Base+0x2e7>
  40a25d:	lea    edx,[rcx+0x4]
  40a260:	movzx  esi,WORD PTR [rdi+0x1c]
  40a264:	mov    eax,0xd
  40a269:	cmp    edx,esi
  40a26b:	ja     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a271:	add    ecx,DWORD PTR [rdi+0x18]
  40a274:	mov    eax,0xc
  40a279:	test   cl,0x3
  40a27c:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a282:	test   ecx,ecx
  40a284:	je     40a460 <flatcc_verify_union_vector_field@@Base+0x300>
  40a28a:	mov    rdx,QWORD PTR [rdi]
  40a28d:	mov    eax,ecx
  40a28f:	mov    esi,DWORD PTR [rdx+rax*1]
  40a292:	add    esi,ecx
  40a294:	mov    eax,0x10
  40a299:	cmp    esi,ecx
  40a29b:	jbe    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2a1:	test   sil,0x3
  40a2a5:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2ab:	mov    ecx,DWORD PTR [rdi+0x8]
  40a2ae:	mov    edi,esi
  40a2b0:	lea    rbp,[rdi+0x4]
  40a2b4:	cmp    rbp,rcx
  40a2b7:	ja     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2bd:	add    ecx,0xfffffffc
  40a2c0:	sub    ecx,esi
  40a2c2:	xor    esi,esi
  40a2c4:	cmp    ecx,DWORD PTR [rdx+rdi*1]
  40a2c7:	mov    eax,0x1a
  40a2cc:	cmovae eax,esi
  40a2cf:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2d4:	xor    eax,eax
  40a2d6:	cmp    cx,si
  40a2d9:	jae    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2df:	mov    r11,QWORD PTR [rdi+0x10]
  40a2e3:	movzx  eax,cx
  40a2e6:	add    rax,r11
  40a2e9:	movzx  ecx,WORD PTR [rax]
  40a2ec:	xor    eax,eax
  40a2ee:	test   rcx,rcx
  40a2f1:	je     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a2f7:	mov    r15,QWORD PTR [rdi]
  40a2fa:	mov    r8d,DWORD PTR [rdi+0x18]
  40a2fe:	lea    r9,[r15+r8*1]
  40a302:	add    r9,rcx
  40a305:	je     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a30b:	add    r10d,0x4
  40a30f:	cmp    r10w,si
  40a313:	jae    40a447 <flatcc_verify_union_vector_field@@Base+0x2e7>
  40a319:	movzx  eax,r10w
  40a31d:	movzx  ecx,WORD PTR [r11+rax*1]
  40a322:	test   ecx,ecx
  40a324:	je     40a447 <flatcc_verify_union_vector_field@@Base+0x2e7>
  40a32a:	lea    edx,[rcx+0x4]
  40a32d:	movzx  esi,WORD PTR [rdi+0x1c]
  40a331:	mov    eax,0xd
  40a336:	cmp    edx,esi
  40a338:	ja     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a33e:	lea    ebx,[r8+rcx*1]
  40a342:	mov    eax,0xc
  40a347:	test   bl,0x3
  40a34a:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a350:	mov    eax,0x0
  40a355:	test   ebx,ebx
  40a357:	je     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a35d:	mov    esi,DWORD PTR [rdi+0xc]
  40a360:	test   esi,esi
  40a362:	jle    40a464 <flatcc_verify_union_vector_field@@Base+0x304>
  40a368:	mov    eax,ebx
  40a36a:	mov    edx,DWORD PTR [r15+rax*1]
  40a36e:	lea    ebp,[rdx+rbx*1]
  40a371:	mov    eax,0x10
  40a376:	cmp    ebp,ebx
  40a378:	jbe    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a37e:	test   bpl,0x3
  40a382:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a388:	mov    r10d,DWORD PTR [rdi+0x8]
  40a38c:	mov    ebx,ebp
  40a38e:	lea    rdi,[rbx+0x4]
  40a392:	cmp    rdi,r10
  40a395:	ja     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a39b:	mov    ebx,DWORD PTR [r15+rbx*1]
  40a39f:	mov    eax,0x19
  40a3a4:	cmp    ebx,0x3fffffff
  40a3aa:	ja     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a3b0:	lea    edi,[r10-0x4]
  40a3b4:	sub    edi,ebp
  40a3b6:	lea    ebp,[rbx*4+0x0]
  40a3bd:	mov    eax,0x1a
  40a3c2:	cmp    edi,ebp
  40a3c4:	jb     40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a3ca:	mov    r13d,DWORD PTR [r9]
  40a3cd:	mov    edi,DWORD PTR [r13+r9*1+0x0]
  40a3d2:	mov    eax,0x22
  40a3d7:	cmp    ebx,edi
  40a3d9:	jne    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a3db:	add    esi,0xffffffff
  40a3de:	mov    QWORD PTR [rsp+0x8],r15
  40a3e3:	mov    DWORD PTR [rsp+0x10],r10d
  40a3e8:	mov    DWORD PTR [rsp+0x14],esi
  40a3ec:	test   edi,edi
  40a3ee:	je     40a460 <flatcc_verify_union_vector_field@@Base+0x300>
  40a3f0:	mov    rax,rdi
  40a3f3:	add    r13,r9
  40a3f6:	add    edx,r8d
  40a3f9:	lea    ebp,[rcx+rdx*1]
  40a3fc:	add    ebp,0x4
  40a3ff:	xor    r14d,r14d
  40a402:	mov    rbx,rdi
  40a405:	mov    eax,ebp
  40a407:	mov    eax,DWORD PTR [r15+rax*1]
  40a40b:	movzx  ecx,BYTE PTR [r13+r14*1+0x4]
  40a411:	test   eax,eax
  40a413:	je     40a433 <flatcc_verify_union_vector_field@@Base+0x2d3>
  40a415:	test   cl,cl
  40a417:	je     40a46b <flatcc_verify_union_vector_field@@Base+0x30b>
  40a419:	mov    BYTE PTR [rsp+0x18],cl
  40a41d:	mov    DWORD PTR [rsp+0x1c],ebp
  40a421:	mov    DWORD PTR [rsp+0x20],eax
  40a425:	lea    rdi,[rsp+0x8]
  40a42a:	call   r12
  40a42d:	test   eax,eax
  40a42f:	je     40a437 <flatcc_verify_union_vector_field@@Base+0x2d7>
  40a431:	jmp    40a472 <flatcc_verify_union_vector_field@@Base+0x312>
  40a433:	test   cl,cl
  40a435:	jne    40a47c <flatcc_verify_union_vector_field@@Base+0x31c>
  40a437:	add    r14,0x1
  40a43b:	add    ebp,0x4
  40a43e:	xor    eax,eax
  40a440:	cmp    r14,rbx
  40a443:	jb     40a405 <flatcc_verify_union_vector_field@@Base+0x2a5>
  40a445:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a447:	xor    eax,eax
  40a449:	test   edx,edx
  40a44b:	setne  al
  40a44e:	shl    eax,0x2
  40a451:	add    rsp,0x28
  40a455:	pop    rbx
  40a456:	pop    r12
  40a458:	pop    r13
  40a45a:	pop    r14
  40a45c:	pop    r15
  40a45e:	pop    rbp
  40a45f:	ret    
  40a460:	xor    eax,eax
  40a462:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a464:	mov    eax,0x3
  40a469:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a46b:	mov    eax,0x21
  40a470:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a472:	lea    rdi,[rsp+0x8]
  40a477:	call   r12
  40a47a:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a47c:	mov    eax,0x20
  40a481:	jmp    40a451 <flatcc_verify_union_vector_field@@Base+0x2f1>
  40a483:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a48d:	nop    DWORD PTR [rax]

000000000040a490 <__libc_csu_init@@Base>:
  40a490:	endbr64 
  40a494:	push   r15
  40a496:	lea    r15,[rip+0x5813]        # 40fcb0 <flatcc_builder_padding_base@@Base+0x4ad0>
  40a49d:	push   r14
  40a49f:	mov    r14,rdx
  40a4a2:	push   r13
  40a4a4:	mov    r13,rsi
  40a4a7:	push   r12
  40a4a9:	mov    r12d,edi
  40a4ac:	push   rbp
  40a4ad:	lea    rbp,[rip+0x5804]        # 40fcb8 <flatcc_builder_padding_base@@Base+0x4ad8>
  40a4b4:	push   rbx
  40a4b5:	sub    rbp,r15
  40a4b8:	sub    rsp,0x8
  40a4bc:	call   403000 <free@plt-0x30>
  40a4c1:	sar    rbp,0x3
  40a4c5:	je     40a4e6 <__libc_csu_init@@Base+0x56>
  40a4c7:	xor    ebx,ebx
  40a4c9:	nop    DWORD PTR [rax+0x0]
  40a4d0:	mov    rdx,r14
  40a4d3:	mov    rsi,r13
  40a4d6:	mov    edi,r12d
  40a4d9:	call   QWORD PTR [r15+rbx*8]
  40a4dd:	add    rbx,0x1
  40a4e1:	cmp    rbp,rbx
  40a4e4:	jne    40a4d0 <__libc_csu_init@@Base+0x40>
  40a4e6:	add    rsp,0x8
  40a4ea:	pop    rbx
  40a4eb:	pop    rbp
  40a4ec:	pop    r12
  40a4ee:	pop    r13
  40a4f0:	pop    r14
  40a4f2:	pop    r15
  40a4f4:	ret    
  40a4f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040a500 <__libc_csu_fini@@Base>:
  40a500:	endbr64 
  40a504:	ret    

Disassembly of section .fini:

000000000040a508 <.fini>:
  40a508:	endbr64 
  40a50c:	sub    rsp,0x8
  40a510:	add    rsp,0x8
  40a514:	ret    
