
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x1dfe1]        # 420ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x1dfe2]        # 421008 <flatcc_builder_padding_base@@Base+0x5fa8>
  403026:	jmp    QWORD PTR [rip+0x1dfe4]        # 421010 <flatcc_builder_padding_base@@Base+0x5fb0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x1dfe2]        # 421018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <fread@plt>:
  403040:	jmp    QWORD PTR [rip+0x1dfda]        # 421020 <fread@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strtod@plt>:
  403050:	jmp    QWORD PTR [rip+0x1dfd2]        # 421028 <strtod@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <fclose@plt>:
  403060:	jmp    QWORD PTR [rip+0x1dfca]        # 421030 <fclose@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <strlen@plt>:
  403070:	jmp    QWORD PTR [rip+0x1dfc2]        # 421038 <strlen@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <__stack_chk_fail@plt>:
  403080:	jmp    QWORD PTR [rip+0x1dfba]        # 421040 <__stack_chk_fail@GLIBC_2.4>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <rewind@plt>:
  403090:	jmp    QWORD PTR [rip+0x1dfb2]        # 421048 <rewind@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <__assert_fail@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x1dfaa]        # 421050 <__assert_fail@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memset@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x1dfa2]        # 421058 <memset@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <memchr@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x1df9a]        # 421060 <memchr@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <memcmp@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x1df92]        # 421068 <memcmp@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <ftell@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x1df8a]        # 421070 <ftell@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <memcpy@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x1df82]        # 421078 <memcpy@GLIBC_2.14>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <malloc@plt>:
  403100:	jmp    QWORD PTR [rip+0x1df7a]        # 421080 <malloc@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <fseek@plt>:
  403110:	jmp    QWORD PTR [rip+0x1df72]        # 421088 <fseek@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

0000000000403120 <realloc@plt>:
  403120:	jmp    QWORD PTR [rip+0x1df6a]        # 421090 <realloc@GLIBC_2.2.5>
  403126:	push   0xf
  40312b:	jmp    403020 <free@plt-0x10>

0000000000403130 <fopen@plt>:
  403130:	jmp    QWORD PTR [rip+0x1df62]        # 421098 <fopen@GLIBC_2.2.5>
  403136:	push   0x10
  40313b:	jmp    403020 <free@plt-0x10>

0000000000403140 <exit@plt>:
  403140:	jmp    QWORD PTR [rip+0x1df5a]        # 4210a0 <exit@GLIBC_2.2.5>
  403146:	push   0x11
  40314b:	jmp    403020 <free@plt-0x10>

0000000000403150 <__fprintf_chk@plt>:
  403150:	jmp    QWORD PTR [rip+0x1df52]        # 4210a8 <__fprintf_chk@GLIBC_2.3.4>
  403156:	push   0x12
  40315b:	jmp    403020 <free@plt-0x10>

0000000000403160 <posix_memalign@plt>:
  403160:	jmp    QWORD PTR [rip+0x1df4a]        # 4210b0 <posix_memalign@GLIBC_2.2.5>
  403166:	push   0x13
  40316b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403170 <main@@Base-0x240>:
  403170:	push   r15
  403172:	push   r14
  403174:	mov    r15,rdi
  403177:	push   r13
  403179:	push   r12
  40317b:	mov    r13,r8
  40317e:	push   rbp
  40317f:	push   rbx
  403180:	mov    rbp,rsi
  403183:	mov    rbx,rdx
  403186:	sub    rsp,0x58
  40318a:	mov    QWORD PTR [r8],0x0
  403191:	mov    rax,QWORD PTR fs:0x28
  40319a:	mov    QWORD PTR [rsp+0x48],rax
  40319f:	xor    eax,eax
  4031a1:	cmp    rsi,rdx
  4031a4:	mov    QWORD PTR [rsp],rcx
  4031a8:	je     4031d6 <posix_memalign@plt+0x76>
  4031aa:	mov    al,BYTE PTR [rsi]
  4031ac:	cmp    al,0x22
  4031ae:	jne    4031bc <posix_memalign@plt+0x5c>
  4031b0:	inc    rbp
  4031b3:	mov    DWORD PTR [rdi+0x14],0x0
  4031ba:	jmp    4031d6 <posix_memalign@plt+0x76>
  4031bc:	cmp    al,0x2e
  4031be:	jne    4031cf <posix_memalign@plt+0x6f>
  4031c0:	mov    ecx,0x5
  4031c5:	call   416820 <flatcc_json_parser_set_error@@Base>
  4031ca:	mov    rbp,rax
  4031cd:	jmp    4031d6 <posix_memalign@plt+0x76>
  4031cf:	mov    DWORD PTR [rdi+0x14],0x1
  4031d6:	cmp    DWORD PTR [r15+0x14],0x0
  4031db:	jne    4031ee <posix_memalign@plt+0x8e>
  4031dd:	mov    rsi,rbp
  4031e0:	mov    rdx,rbx
  4031e3:	mov    rdi,r15
  4031e6:	call   403680 <_start@@Base+0x260>
  4031eb:	mov    rbp,rax
  4031ee:	cmp    rbx,rbp
  4031f1:	je     4032aa <posix_memalign@plt+0x14a>
  4031f7:	lea    rax,[rsp+0x3c]
  4031fc:	mov    r10,r13
  4031ff:	xor    r12d,r12d
  403202:	mov    r13,rbp
  403205:	xor    r14d,r14d
  403208:	mov    rbp,rbx
  40320b:	mov    QWORD PTR [rsp+0x8],rax
  403210:	lea    rax,[rsp+0x40]
  403215:	mov    QWORD PTR [rsp+0x10],rax
  40321a:	lea    rax,[rsp+0x38]
  40321f:	mov    QWORD PTR [rsp+0x18],rax
  403224:	mov    rbx,QWORD PTR [rsp]
  403228:	mov    QWORD PTR [rsp+0x20],r10
  40322d:	mov    r9,QWORD PTR [rsp+0x8]
  403232:	mov    rdx,rbp
  403235:	mov    r8,QWORD PTR [rsp+0x10]
  40323a:	mov    rcx,QWORD PTR [rsp+0x18]
  40323f:	mov    rsi,r13
  403242:	mov    rdi,r15
  403245:	call   QWORD PTR [rbx]
  403247:	cmp    rbp,rax
  40324a:	je     4032a7 <posix_memalign@plt+0x147>
  40324c:	cmp    r13,rax
  40324f:	mov    r10,QWORD PTR [rsp+0x20]
  403254:	jne    4032c2 <posix_memalign@plt+0x162>
  403256:	add    rbx,0x8
  40325a:	cmp    QWORD PTR [rbx],0x0
  40325e:	jne    403228 <posix_memalign@plt+0xc8>
  403260:	mov    rbx,rbp
  403263:	mov    ecx,0x17
  403268:	mov    rsi,r13
  40326b:	mov    rdx,rbx
  40326e:	mov    rdi,r15
  403271:	call   416820 <flatcc_json_parser_set_error@@Base>
  403276:	mov    rbx,rax
  403279:	jmp    4032aa <posix_memalign@plt+0x14a>
  40327b:	mov    rsi,r8
  40327e:	mov    ecx,0x8
  403283:	mov    rdx,rbp
  403286:	mov    rdi,r15
  403289:	mov    QWORD PTR [rsp+0x28],r10
  40328e:	mov    QWORD PTR [rsp+0x20],r8
  403293:	call   416820 <flatcc_json_parser_set_error@@Base>
  403298:	cmp    rbp,rax
  40329b:	mov    r8,QWORD PTR [rsp+0x20]
  4032a0:	mov    r10,QWORD PTR [rsp+0x28]
  4032a5:	jne    4032f5 <posix_memalign@plt+0x195>
  4032a7:	mov    rbx,rbp
  4032aa:	mov    rcx,QWORD PTR [rsp+0x48]
  4032af:	xor    rcx,QWORD PTR fs:0x28
  4032b8:	mov    rax,rbx
  4032bb:	je     40330f <posix_memalign@plt+0x1af>
  4032bd:	call   403080 <__stack_chk_fail@plt>
  4032c2:	test   r12d,r12d
  4032c5:	mov    r8,rax
  4032c8:	je     4032e9 <posix_memalign@plt+0x189>
  4032ca:	cmp    DWORD PTR [r15+0x14],0x0
  4032cf:	je     4032e9 <posix_memalign@plt+0x189>
  4032d1:	mov    ecx,0xe
  4032d6:	mov    rdx,rbp
  4032d9:	mov    rsi,r8
  4032dc:	mov    rdi,r15
  4032df:	call   416820 <flatcc_json_parser_set_error@@Base>
  4032e4:	mov    rbx,rax
  4032e7:	jmp    4032aa <posix_memalign@plt+0x14a>
  4032e9:	cmp    DWORD PTR [rsp+0x38],0x0
  4032ee:	jne    40327b <posix_memalign@plt+0x11b>
  4032f0:	mov    r14,QWORD PTR [rsp+0x40]
  4032f5:	add    QWORD PTR [r10],r14
  4032f8:	inc    r12d
  4032fb:	cmp    DWORD PTR [rsp+0x3c],0x0
  403300:	je     40330a <posix_memalign@plt+0x1aa>
  403302:	mov    r13,r8
  403305:	jmp    403224 <posix_memalign@plt+0xc4>
  40330a:	mov    rbx,r8
  40330d:	jmp    4032aa <posix_memalign@plt+0x14a>
  40330f:	add    rsp,0x58
  403313:	pop    rbx
  403314:	pop    rbp
  403315:	pop    r12
  403317:	pop    r13
  403319:	pop    r14
  40331b:	pop    r15
  40331d:	ret    
  40331e:	lea    rcx,[rip+0x17d0b]        # 41b030 <_IO_stdin_used@@Base+0x1030>
  403325:	lea    rsi,[rip+0x1723c]        # 41a568 <_IO_stdin_used@@Base+0x568>
  40332c:	lea    rdi,[rip+0x175cc]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  403333:	sub    rsp,0x8
  403337:	mov    edx,0x134
  40333c:	call   4030a0 <__assert_fail@plt>
  403341:	lea    rcx,[rip+0x17c78]        # 41afc0 <_IO_stdin_used@@Base+0xfc0>
  403348:	lea    rsi,[rip+0x17219]        # 41a568 <_IO_stdin_used@@Base+0x568>
  40334f:	lea    rdi,[rip+0x175a9]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  403356:	sub    rsp,0x8
  40335a:	mov    edx,0x2a1
  40335f:	call   4030a0 <__assert_fail@plt>
  403364:	lea    rcx,[rip+0x17c45]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  40336b:	lea    rsi,[rip+0x171f6]        # 41a568 <_IO_stdin_used@@Base+0x568>
  403372:	lea    rdi,[rip+0x17586]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  403379:	sub    rsp,0x8
  40337d:	mov    edx,0x28b
  403382:	call   4030a0 <__assert_fail@plt>
  403387:	lea    rcx,[rip+0x17b82]        # 41af10 <_IO_stdin_used@@Base+0xf10>
  40338e:	lea    rsi,[rip+0x171d3]        # 41a568 <_IO_stdin_used@@Base+0x568>
  403395:	lea    rdi,[rip+0x1753c]        # 41a8d8 <_IO_stdin_used@@Base+0x8d8>
  40339c:	sub    rsp,0x8
  4033a0:	mov    edx,0x37c
  4033a5:	call   4030a0 <__assert_fail@plt>
  4033aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004033b0 <main@@Base>:
  4033b0:	push   r12
  4033b2:	mov    r12,QWORD PTR [rip+0x1dc3f]        # 420ff8 <stderr@GLIBC_2.2.5>
  4033b9:	lea    rdx,[rip+0x16f4c]        # 41a30c <_IO_stdin_used@@Base+0x30c>
  4033c0:	push   rbp
  4033c1:	push   rbx
  4033c2:	mov    ebx,edi
  4033c4:	xor    eax,eax
  4033c6:	mov    rbp,rsi
  4033c9:	mov    esi,0x1
  4033ce:	mov    rdi,QWORD PTR [r12]
  4033d2:	call   403150 <__fprintf_chk@plt>
  4033d7:	lea    eax,[rbx-0x1]
  4033da:	cmp    eax,0x1
  4033dd:	ja     4033fd <main@@Base+0x4d>
  4033df:	cmp    ebx,0x2
  4033e2:	jne    4033f2 <main@@Base+0x42>
  4033e4:	mov    rdx,QWORD PTR [rbp+0x8]
  4033e8:	mov    rax,0x4217e0
  4033ef:	mov    QWORD PTR [rax],rdx
  4033f2:	pop    rbx
  4033f3:	pop    rbp
  4033f4:	pop    r12
  4033f6:	xor    eax,eax
  4033f8:	jmp    410db0 <test_parse@@Base>
  4033fd:	mov    rdi,QWORD PTR [r12]
  403401:	lea    rdx,[rip+0x170e0]        # 41a4e8 <_IO_stdin_used@@Base+0x4e8>
  403408:	mov    esi,0x1
  40340d:	xor    eax,eax
  40340f:	call   403150 <__fprintf_chk@plt>
  403414:	mov    edi,0x1
  403419:	call   403140 <exit@plt>
  40341e:	xchg   ax,ax

0000000000403420 <_start@@Base>:
  403420:	endbr64 
  403424:	xor    ebp,ebp
  403426:	mov    r9,rdx
  403429:	pop    rsi
  40342a:	mov    rdx,rsp
  40342d:	and    rsp,0xfffffffffffffff0
  403431:	push   rax
  403432:	push   rsp
  403433:	mov    r8,0x419710
  40343a:	mov    rcx,0x4196a0
  403441:	mov    rdi,0x4033b0
  403448:	call   QWORD PTR [rip+0x1db9a]        # 420fe8 <__libc_start_main@GLIBC_2.2.5>
  40344e:	hlt    
  40344f:	nop
  403450:	endbr64 
  403454:	ret    
  403455:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40345f:	nop
  403460:	mov    eax,0x421877
  403465:	push   rbp
  403466:	sub    rax,0x421870
  40346c:	cmp    rax,0xe
  403470:	mov    rbp,rsp
  403473:	jbe    403490 <_start@@Base+0x70>
  403475:	mov    eax,0x0
  40347a:	test   rax,rax
  40347d:	je     403490 <_start@@Base+0x70>
  40347f:	pop    rbp
  403480:	mov    edi,0x421870
  403485:	jmp    rax
  403487:	nop    WORD PTR [rax+rax*1+0x0]
  403490:	pop    rbp
  403491:	ret    
  403492:	nop    DWORD PTR [rax+0x0]
  403496:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034a0:	mov    esi,0x421870
  4034a5:	push   rbp
  4034a6:	sub    rsi,0x421870
  4034ad:	sar    rsi,0x3
  4034b1:	mov    rbp,rsp
  4034b4:	mov    rax,rsi
  4034b7:	shr    rax,0x3f
  4034bb:	add    rsi,rax
  4034be:	sar    rsi,1
  4034c1:	je     4034d8 <_start@@Base+0xb8>
  4034c3:	mov    eax,0x0
  4034c8:	test   rax,rax
  4034cb:	je     4034d8 <_start@@Base+0xb8>
  4034cd:	pop    rbp
  4034ce:	mov    edi,0x421870
  4034d3:	jmp    rax
  4034d5:	nop    DWORD PTR [rax]
  4034d8:	pop    rbp
  4034d9:	ret    
  4034da:	nop    WORD PTR [rax+rax*1+0x0]
  4034e0:	cmp    BYTE PTR [rip+0x1e389],0x0        # 421870 <__bss_start@@Base>
  4034e7:	jne    4034fa <_start@@Base+0xda>
  4034e9:	push   rbp
  4034ea:	mov    rbp,rsp
  4034ed:	call   403460 <_start@@Base+0x40>
  4034f2:	pop    rbp
  4034f3:	mov    BYTE PTR [rip+0x1e376],0x1        # 421870 <__bss_start@@Base>
  4034fa:	repz ret 
  4034fc:	nop    DWORD PTR [rax+0x0]
  403500:	mov    edi,0x420e08
  403505:	cmp    QWORD PTR [rdi],0x0
  403509:	jne    403510 <_start@@Base+0xf0>
  40350b:	jmp    4034a0 <_start@@Base+0x80>
  40350d:	nop    DWORD PTR [rax]
  403510:	mov    eax,0x0
  403515:	test   rax,rax
  403518:	je     40350b <_start@@Base+0xeb>
  40351a:	push   rbp
  40351b:	mov    rbp,rsp
  40351e:	call   rax
  403520:	pop    rbp
  403521:	jmp    4034a0 <_start@@Base+0x80>
  403526:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403530:	sub    rsi,rdi
  403533:	cmp    rsi,0x8
  403537:	jbe    4035a8 <_start@@Base+0x188>
  403539:	movsx  rax,BYTE PTR [rdi+0x7]
  40353e:	movsx  rdx,BYTE PTR [rdi+0x6]
  403543:	mov    rcx,rdx
  403546:	shl    rcx,0x8
  40354a:	or     rcx,rax
  40354d:	movsx  rdx,BYTE PTR [rdi+0x5]
  403552:	mov    rax,rdx
  403555:	shl    rax,0x10
  403559:	or     rcx,rax
  40355c:	movsx  rdx,BYTE PTR [rdi+0x4]
  403561:	mov    rax,rdx
  403564:	shl    rax,0x18
  403568:	or     rax,rcx
  40356b:	movsx  rdx,BYTE PTR [rdi+0x3]
  403570:	shl    rdx,0x20
  403574:	or     rax,rdx
  403577:	movsx  rdx,BYTE PTR [rdi+0x2]
  40357c:	mov    rcx,rdx
  40357f:	shl    rcx,0x28
  403583:	or     rcx,rax
  403586:	movsx  rdx,BYTE PTR [rdi+0x1]
  40358b:	mov    rax,rdx
  40358e:	shl    rax,0x30
  403592:	or     rcx,rax
  403595:	movsx  rdx,BYTE PTR [rdi]
  403599:	mov    rax,rdx
  40359c:	shl    rax,0x38
  4035a0:	or     rax,rcx
  4035a3:	ret    
  4035a4:	nop    DWORD PTR [rax+0x0]
  4035a8:	lea    rdx,[rip+0x16a61]        # 41a010 <_IO_stdin_used@@Base+0x10>
  4035af:	movsxd rax,DWORD PTR [rdx+rsi*4]
  4035b3:	add    rax,rdx
  4035b6:	jmp    rax
  4035b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4035c0:	xor    eax,eax
  4035c2:	jmp    40353e <_start@@Base+0x11e>
  4035c7:	nop    WORD PTR [rax+rax*1+0x0]
  4035d0:	xor    ecx,ecx
  4035d2:	jmp    40354d <_start@@Base+0x12d>
  4035d7:	nop    WORD PTR [rax+rax*1+0x0]
  4035e0:	xor    ecx,ecx
  4035e2:	jmp    40355c <_start@@Base+0x13c>
  4035e7:	nop    WORD PTR [rax+rax*1+0x0]
  4035f0:	xor    eax,eax
  4035f2:	jmp    40356b <_start@@Base+0x14b>
  4035f7:	nop    WORD PTR [rax+rax*1+0x0]
  403600:	xor    eax,eax
  403602:	jmp    403577 <_start@@Base+0x157>
  403607:	nop    WORD PTR [rax+rax*1+0x0]
  403610:	xor    ecx,ecx
  403612:	jmp    403586 <_start@@Base+0x166>
  403617:	nop    WORD PTR [rax+rax*1+0x0]
  403620:	xor    ecx,ecx
  403622:	jmp    403595 <_start@@Base+0x175>
  403627:	nop    WORD PTR [rax+rax*1+0x0]
  403630:	xor    eax,eax
  403632:	ret    
  403633:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40363e:	xchg   ax,ax
  403640:	xor    eax,eax
  403642:	cmp    dil,0x4
  403646:	setbe  al
  403649:	ret    
  40364a:	nop    WORD PTR [rax+rax*1+0x0]
  403650:	cmp    dil,0xb
  403654:	ja     403670 <_start@@Base+0x250>
  403656:	cmp    dil,0x8
  40365a:	jae    403676 <_start@@Base+0x256>
  40365c:	test   dil,dil
  40365f:	je     403676 <_start@@Base+0x256>
  403661:	cmp    dil,0x2
  403665:	je     403676 <_start@@Base+0x256>
  403667:	xor    eax,eax
  403669:	ret    
  40366a:	nop    WORD PTR [rax+rax*1+0x0]
  403670:	cmp    dil,0xff
  403674:	jne    403667 <_start@@Base+0x247>
  403676:	mov    eax,0x1
  40367b:	ret    
  40367c:	nop    DWORD PTR [rax+0x0]
  403680:	mov    rax,rdx
  403683:	sub    rax,rsi
  403686:	cmp    rax,0x1
  40368a:	jle    403693 <_start@@Base+0x273>
  40368c:	cmp    BYTE PTR [rsi],0x20
  40368f:	jg     4036a0 <_start@@Base+0x280>
  403691:	je     4036a8 <_start@@Base+0x288>
  403693:	jmp    4168b0 <flatcc_json_parser_space_ext@@Base>
  403698:	nop    DWORD PTR [rax+rax*1+0x0]
  4036a0:	mov    rax,rsi
  4036a3:	ret    
  4036a4:	nop    DWORD PTR [rax+0x0]
  4036a8:	cmp    BYTE PTR [rsi+0x1],0x20
  4036ac:	jle    403693 <_start@@Base+0x273>
  4036ae:	lea    rax,[rsi+0x1]
  4036b2:	ret    
  4036b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4036be:	xchg   ax,ax
  4036c0:	mov    rax,rdx
  4036c3:	push   r12
  4036c5:	mov    r11,rdi
  4036c8:	sub    rax,rsi
  4036cb:	push   rbp
  4036cc:	mov    r10,rdx
  4036cf:	cmp    rax,0x7
  4036d3:	push   rbx
  4036d4:	mov    rbp,rcx
  4036d7:	mov    rbx,rsi
  4036da:	mov    r12,r8
  4036dd:	jbe    403770 <_start@@Base+0x350>
  4036e3:	movbe  rax,QWORD PTR [rsi]
  4036e8:	movabs rdx,0x4e4f4e44ffffffff
  4036f2:	cmp    rax,rdx
  4036f5:	ja     40378e <_start@@Base+0x36e>
  4036fb:	movabs rdx,0x426f6f6b46616dff
  403705:	cmp    rax,rdx
  403708:	jbe    403838 <_start@@Base+0x418>
  40370e:	mov    rcx,rax
  403711:	movabs rdx,0x4d754c616e000000
  40371b:	and    rcx,0xffffffffff000000
  403722:	cmp    rcx,rdx
  403725:	je     403920 <_start@@Base+0x500>
  40372b:	xor    al,al
  40372d:	movabs rdx,0x426f6f6b46616e00
  403737:	cmp    rax,rdx
  40373a:	jne    4037bd <_start@@Base+0x39d>
  403740:	mov    r8,r9
  403743:	mov    ecx,0x7
  403748:	mov    rdx,r10
  40374b:	mov    rsi,rbx
  40374e:	mov    rdi,r11
  403751:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403756:	cmp    rbx,rax
  403759:	je     4037bd <_start@@Base+0x39d>
  40375b:	mov    QWORD PTR [r12],0xa
  403763:	mov    rbx,rax
  403766:	mov    DWORD PTR [rbp+0x0],0x0
  40376d:	jmp    4037bd <_start@@Base+0x39d>
  40376f:	nop
  403770:	mov    rsi,rdx
  403773:	mov    rdi,rbx
  403776:	call   403530 <_start@@Base+0x110>
  40377b:	movabs rdx,0x4e4f4e44ffffffff
  403785:	cmp    rax,rdx
  403788:	jbe    4036fb <_start@@Base+0x2db>
  40378e:	movabs rdx,0x4f74686571ffffff
  403798:	cmp    rax,rdx
  40379b:	ja     4037c8 <_start@@Base+0x3a8>
  40379d:	movabs rdx,0xffffffff00000000
  4037a7:	and    rax,rdx
  4037aa:	movabs rdx,0x4e4f4e4500000000
  4037b4:	cmp    rax,rdx
  4037b7:	je     4038e0 <_start@@Base+0x4c0>
  4037bd:	mov    rax,rbx
  4037c0:	pop    rbx
  4037c1:	pop    rbp
  4037c2:	pop    r12
  4037c4:	ret    
  4037c5:	nop    DWORD PTR [rax]
  4037c8:	movabs rdx,0x526170756e7a656b
  4037d2:	cmp    rax,rdx
  4037d5:	jbe    403890 <_start@@Base+0x470>
  4037db:	mov    rcx,rax
  4037de:	movabs rdx,0x556e757365640000
  4037e8:	xor    cx,cx
  4037eb:	cmp    rcx,rdx
  4037ee:	je     403960 <_start@@Base+0x540>
  4037f4:	movabs rdx,0x526170756e7a656c
  4037fe:	cmp    rax,rdx
  403801:	jne    4037bd <_start@@Base+0x39d>
  403803:	mov    r8,r9
  403806:	mov    ecx,0x8
  40380b:	mov    rdx,r10
  40380e:	mov    rsi,rbx
  403811:	mov    rdi,r11
  403814:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403819:	cmp    rbx,rax
  40381c:	je     4037bd <_start@@Base+0x39d>
  40381e:	mov    QWORD PTR [r12],0x8
  403826:	mov    rbx,rax
  403829:	mov    DWORD PTR [rbp+0x0],0x0
  403830:	jmp    4037bd <_start@@Base+0x39d>
  403832:	nop    WORD PTR [rax+rax*1+0x0]
  403838:	and    rax,0xffffffffff000000
  40383e:	movabs rdx,0x42656c6c65000000
  403848:	cmp    rax,rdx
  40384b:	jne    4037bd <_start@@Base+0x39d>
  403851:	mov    r8,r9
  403854:	mov    ecx,0x5
  403859:	mov    rdx,r10
  40385c:	mov    rsi,rbx
  40385f:	mov    rdi,r11
  403862:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403867:	cmp    rbx,rax
  40386a:	je     4037bd <_start@@Base+0x39d>
  403870:	mov    QWORD PTR [r12],0x9
  403878:	mov    rbx,rax
  40387b:	mov    DWORD PTR [rbp+0x0],0x0
  403882:	jmp    4037bd <_start@@Base+0x39d>
  403887:	nop    WORD PTR [rax+rax*1+0x0]
  403890:	and    rax,0xffffffffff000000
  403896:	movabs rdx,0x4f74686572000000
  4038a0:	cmp    rax,rdx
  4038a3:	jne    4037bd <_start@@Base+0x39d>
  4038a9:	mov    r8,r9
  4038ac:	mov    ecx,0x5
  4038b1:	mov    rdx,r10
  4038b4:	mov    rsi,rbx
  4038b7:	mov    rdi,r11
  4038ba:	call   417370 <flatcc_json_parser_match_constant@@Base>
  4038bf:	cmp    rbx,rax
  4038c2:	je     4037bd <_start@@Base+0x39d>
  4038c8:	mov    QWORD PTR [r12],0xb
  4038d0:	mov    rbx,rax
  4038d3:	mov    DWORD PTR [rbp+0x0],0x0
  4038da:	jmp    4037bd <_start@@Base+0x39d>
  4038df:	nop
  4038e0:	mov    r8,r9
  4038e3:	mov    ecx,0x4
  4038e8:	mov    rdx,r10
  4038eb:	mov    rsi,rbx
  4038ee:	mov    rdi,r11
  4038f1:	call   417370 <flatcc_json_parser_match_constant@@Base>
  4038f6:	cmp    rbx,rax
  4038f9:	je     4037bd <_start@@Base+0x39d>
  4038ff:	mov    QWORD PTR [r12],0x0
  403907:	mov    rbx,rax
  40390a:	mov    DWORD PTR [rbp+0x0],0x0
  403911:	jmp    4037bd <_start@@Base+0x39d>
  403916:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403920:	mov    r8,r9
  403923:	mov    ecx,0x5
  403928:	mov    rdx,r10
  40392b:	mov    rsi,rbx
  40392e:	mov    rdi,r11
  403931:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403936:	cmp    rbx,rax
  403939:	je     4037bd <_start@@Base+0x39d>
  40393f:	mov    QWORD PTR [r12],0x2
  403947:	mov    rbx,rax
  40394a:	mov    DWORD PTR [rbp+0x0],0x0
  403951:	jmp    4037bd <_start@@Base+0x39d>
  403956:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403960:	mov    r8,r9
  403963:	mov    ecx,0x6
  403968:	mov    rdx,r10
  40396b:	mov    rsi,rbx
  40396e:	mov    rdi,r11
  403971:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403976:	cmp    rbx,rax
  403979:	je     4037bd <_start@@Base+0x39d>
  40397f:	mov    QWORD PTR [r12],0xff
  403987:	mov    rbx,rax
  40398a:	mov    DWORD PTR [rbp+0x0],0x0
  403991:	jmp    4037bd <_start@@Base+0x39d>
  403996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039a0:	push   r15
  4039a2:	mov    rax,rdx
  4039a5:	push   r14
  4039a7:	push   r13
  4039a9:	push   r12
  4039ab:	sub    rax,rsi
  4039ae:	push   rbp
  4039af:	push   rbx
  4039b0:	mov    r13,rdi
  4039b3:	mov    rbx,rsi
  4039b6:	mov    r12,rdx
  4039b9:	mov    r14,rcx
  4039bc:	sub    rsp,0x18
  4039c0:	cmp    rax,0x7
  4039c4:	mov    r15,r8
  4039c7:	jbe    403b10 <_start@@Base+0x6f0>
  4039cd:	movbe  rbp,QWORD PTR [rsi]
  4039d2:	movabs rax,0x4d6f6e73746571ff
  4039dc:	cmp    rbp,rax
  4039df:	ja     403a18 <_start@@Base+0x5f8>
  4039e1:	movabs rax,0xffffff0000000000
  4039eb:	and    rbp,rax
  4039ee:	movabs rax,0x416c740000000000
  4039f8:	cmp    rbp,rax
  4039fb:	je     403b30 <_start@@Base+0x710>
  403a01:	mov    rax,rbx
  403a04:	add    rsp,0x18
  403a08:	pop    rbx
  403a09:	pop    rbp
  403a0a:	pop    r12
  403a0c:	pop    r13
  403a0e:	pop    r14
  403a10:	pop    r15
  403a12:	ret    
  403a13:	nop    DWORD PTR [rax+rax*1+0x0]
  403a18:	movabs rax,0x4d6f6e7374657232
  403a22:	cmp    rbp,rax
  403a25:	je     403b68 <_start@@Base+0x748>
  403a2b:	mov    rdx,rbp
  403a2e:	movabs rax,0x4d6f6e7374657200
  403a38:	xor    dl,dl
  403a3a:	cmp    rdx,rax
  403a3d:	je     403bc0 <_start@@Base+0x7a0>
  403a43:	movabs rax,0xffffffff00000000
  403a4d:	movabs rdx,0x4e4f4e4500000000
  403a57:	and    rax,rbp
  403a5a:	cmp    rax,rdx
  403a5d:	je     403c00 <_start@@Base+0x7e0>
  403a63:	movabs rax,0x5465737453696d70
  403a6d:	cmp    rbp,rax
  403a70:	jne    403a01 <_start@@Base+0x5e1>
  403a72:	lea    rdi,[rbx+0x8]
  403a76:	mov    rax,r12
  403a79:	sub    rax,rdi
  403a7c:	cmp    rax,0x7
  403a80:	jbe    403ba0 <_start@@Base+0x780>
  403a86:	movbe  rax,QWORD PTR [rbx+0x8]
  403a8c:	movabs rdx,0x6c655461626c6557
  403a96:	cmp    rax,rdx
  403a99:	jne    403a01 <_start@@Base+0x5e1>
  403a9f:	lea    rbp,[rbx+0x10]
  403aa3:	mov    rax,r12
  403aa6:	sub    rax,rbp
  403aa9:	cmp    rax,0x7
  403aad:	ja     403c38 <_start@@Base+0x818>
  403ab3:	mov    rsi,r12
  403ab6:	mov    rdi,rbp
  403ab9:	mov    QWORD PTR [rsp+0x8],r9
  403abe:	call   403530 <_start@@Base+0x110>
  403ac3:	mov    r9,QWORD PTR [rsp+0x8]
  403ac8:	xor    al,al
  403aca:	movabs rdx,0x697468456e756d00
  403ad4:	cmp    rax,rdx
  403ad7:	jne    403a01 <_start@@Base+0x5e1>
  403add:	mov    r8,r9
  403ae0:	mov    ecx,0x7
  403ae5:	mov    rdx,r12
  403ae8:	mov    rsi,rbp
  403aeb:	mov    rdi,r13
  403aee:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403af3:	cmp    rbp,rax
  403af6:	je     403a01 <_start@@Base+0x5e1>
  403afc:	mov    QWORD PTR [r15],0x2
  403b03:	mov    DWORD PTR [r14],0x0
  403b0a:	jmp    403a04 <_start@@Base+0x5e4>
  403b0f:	nop
  403b10:	mov    rsi,rdx
  403b13:	mov    rdi,rbx
  403b16:	mov    QWORD PTR [rsp+0x8],r9
  403b1b:	call   403530 <_start@@Base+0x110>
  403b20:	mov    r9,QWORD PTR [rsp+0x8]
  403b25:	mov    rbp,rax
  403b28:	jmp    4039d2 <_start@@Base+0x5b2>
  403b2d:	nop    DWORD PTR [rax]
  403b30:	mov    r8,r9
  403b33:	mov    ecx,0x3
  403b38:	mov    rdx,r12
  403b3b:	mov    rsi,rbx
  403b3e:	mov    rdi,r13
  403b41:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403b46:	cmp    rbx,rax
  403b49:	je     403a04 <_start@@Base+0x5e4>
  403b4f:	mov    QWORD PTR [r15],0x4
  403b56:	mov    DWORD PTR [r14],0x0
  403b5d:	jmp    403a04 <_start@@Base+0x5e4>
  403b62:	nop    WORD PTR [rax+rax*1+0x0]
  403b68:	mov    r8,r9
  403b6b:	mov    ecx,0x8
  403b70:	mov    rdx,r12
  403b73:	mov    rsi,rbx
  403b76:	mov    rdi,r13
  403b79:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403b7e:	cmp    rbx,rax
  403b81:	je     403a01 <_start@@Base+0x5e1>
  403b87:	mov    QWORD PTR [r15],0x3
  403b8e:	mov    DWORD PTR [r14],0x0
  403b95:	jmp    403a04 <_start@@Base+0x5e4>
  403b9a:	nop    WORD PTR [rax+rax*1+0x0]
  403ba0:	mov    rsi,r12
  403ba3:	mov    QWORD PTR [rsp+0x8],r9
  403ba8:	call   403530 <_start@@Base+0x110>
  403bad:	mov    r9,QWORD PTR [rsp+0x8]
  403bb2:	jmp    403a8c <_start@@Base+0x66c>
  403bb7:	nop    WORD PTR [rax+rax*1+0x0]
  403bc0:	mov    r8,r9
  403bc3:	mov    ecx,0x7
  403bc8:	mov    rdx,r12
  403bcb:	mov    rsi,rbx
  403bce:	mov    rdi,r13
  403bd1:	mov    QWORD PTR [rsp+0x8],r9
  403bd6:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403bdb:	cmp    rbx,rax
  403bde:	mov    r9,QWORD PTR [rsp+0x8]
  403be3:	je     403a43 <_start@@Base+0x623>
  403be9:	mov    QWORD PTR [r15],0x1
  403bf0:	mov    DWORD PTR [r14],0x0
  403bf7:	jmp    403a04 <_start@@Base+0x5e4>
  403bfc:	nop    DWORD PTR [rax+0x0]
  403c00:	mov    r8,r9
  403c03:	mov    ecx,0x4
  403c08:	mov    rdx,r12
  403c0b:	mov    rsi,rbx
  403c0e:	mov    rdi,r13
  403c11:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403c16:	cmp    rbx,rax
  403c19:	je     403a01 <_start@@Base+0x5e1>
  403c1f:	mov    QWORD PTR [r15],0x0
  403c26:	mov    DWORD PTR [r14],0x0
  403c2d:	jmp    403a04 <_start@@Base+0x5e4>
  403c32:	nop    WORD PTR [rax+rax*1+0x0]
  403c38:	movbe  rax,QWORD PTR [rbx+0x10]
  403c3e:	jmp    403ac8 <_start@@Base+0x6a8>
  403c43:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403c4e:	xchg   ax,ax
  403c50:	push   r13
  403c52:	mov    rax,rdx
  403c55:	push   r12
  403c57:	push   rbp
  403c58:	push   rbx
  403c59:	sub    rax,rsi
  403c5c:	mov    r11,rdi
  403c5f:	mov    rbx,rsi
  403c62:	mov    r10,rdx
  403c65:	sub    rsp,0x8
  403c69:	cmp    rax,0x7
  403c6d:	mov    rbp,rcx
  403c70:	mov    r12,r8
  403c73:	jbe    403cc0 <_start@@Base+0x8a0>
  403c75:	movbe  rax,QWORD PTR [rsi]
  403c7a:	movabs rdx,0x496e506172656e74
  403c84:	cmp    rax,rdx
  403c87:	je     403cda <_start@@Base+0x8ba>
  403c89:	movabs rdx,0xffffffff00000000
  403c93:	and    rax,rdx
  403c96:	movabs rdx,0x4e4f4e4500000000
  403ca0:	cmp    rax,rdx
  403ca3:	je     403d88 <_start@@Base+0x968>
  403ca9:	mov    rax,rbx
  403cac:	add    rsp,0x8
  403cb0:	pop    rbx
  403cb1:	pop    rbp
  403cb2:	pop    r12
  403cb4:	pop    r13
  403cb6:	ret    
  403cb7:	nop    WORD PTR [rax+rax*1+0x0]
  403cc0:	mov    rsi,rdx
  403cc3:	mov    rdi,rbx
  403cc6:	call   403530 <_start@@Base+0x110>
  403ccb:	movabs rdx,0x496e506172656e74
  403cd5:	cmp    rax,rdx
  403cd8:	jne    403c89 <_start@@Base+0x869>
  403cda:	lea    rdi,[rbx+0x8]
  403cde:	mov    rax,r10
  403ce1:	sub    rax,rdi
  403ce4:	cmp    rax,0x7
  403ce8:	ja     403d78 <_start@@Base+0x958>
  403cee:	mov    rsi,r10
  403cf1:	call   403530 <_start@@Base+0x110>
  403cf6:	movabs rdx,0x4e616d6573706163
  403d00:	cmp    rax,rdx
  403d03:	jne    403ca9 <_start@@Base+0x889>
  403d05:	lea    r13,[rbx+0x10]
  403d09:	mov    rax,r10
  403d0c:	sub    rax,r13
  403d0f:	cmp    rax,0x7
  403d13:	jbe    403dc8 <_start@@Base+0x9a8>
  403d19:	movbe  rax,QWORD PTR [rbx+0x10]
  403d1f:	movabs rdx,0xff00000000000000
  403d29:	and    rax,rdx
  403d2c:	movabs rdx,0x6500000000000000
  403d36:	cmp    rax,rdx
  403d39:	jne    403ca9 <_start@@Base+0x889>
  403d3f:	mov    r8,r9
  403d42:	mov    ecx,0x1
  403d47:	mov    rdx,r10
  403d4a:	mov    rsi,r13
  403d4d:	mov    rdi,r11
  403d50:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403d55:	cmp    r13,rax
  403d58:	je     403ca9 <_start@@Base+0x889>
  403d5e:	mov    QWORD PTR [r12],0x1
  403d66:	mov    DWORD PTR [rbp+0x0],0x0
  403d6d:	jmp    403cac <_start@@Base+0x88c>
  403d72:	nop    WORD PTR [rax+rax*1+0x0]
  403d78:	movbe  rax,QWORD PTR [rbx+0x8]
  403d7e:	jmp    403cf6 <_start@@Base+0x8d6>
  403d83:	nop    DWORD PTR [rax+rax*1+0x0]
  403d88:	mov    r8,r9
  403d8b:	mov    ecx,0x4
  403d90:	mov    rdx,r10
  403d93:	mov    rsi,rbx
  403d96:	mov    rdi,r11
  403d99:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403d9e:	cmp    rbx,rax
  403da1:	je     403cac <_start@@Base+0x88c>
  403da7:	mov    QWORD PTR [r12],0x0
  403daf:	mov    DWORD PTR [rbp+0x0],0x0
  403db6:	add    rsp,0x8
  403dba:	pop    rbx
  403dbb:	pop    rbp
  403dbc:	pop    r12
  403dbe:	pop    r13
  403dc0:	ret    
  403dc1:	nop    DWORD PTR [rax+0x0]
  403dc8:	mov    rsi,r10
  403dcb:	mov    rdi,r13
  403dce:	call   403530 <_start@@Base+0x110>
  403dd3:	jmp    403d1f <_start@@Base+0x8ff>
  403dd8:	nop    DWORD PTR [rax+rax*1+0x0]
  403de0:	mov    rax,rdx
  403de3:	push   r12
  403de5:	mov    r11,rdi
  403de8:	sub    rax,rsi
  403deb:	push   rbp
  403dec:	mov    r10,rdx
  403def:	cmp    rax,0x7
  403df3:	push   rbx
  403df4:	mov    rbp,rcx
  403df7:	mov    rbx,rsi
  403dfa:	mov    r12,r8
  403dfd:	jbe    403ea8 <_start@@Base+0xa88>
  403e03:	movbe  rax,QWORD PTR [rsi]
  403e08:	movabs rdx,0x68657831ffffffff
  403e12:	cmp    rax,rdx
  403e15:	ja     403e40 <_start@@Base+0xa20>
  403e17:	movabs rdx,0xffffffff00000000
  403e21:	and    rax,rdx
  403e24:	movabs rdx,0x6865783100000000
  403e2e:	cmp    rax,rdx
  403e31:	je     403ec0 <_start@@Base+0xaa0>
  403e37:	mov    rax,rbx
  403e3a:	pop    rbx
  403e3b:	pop    rbp
  403e3c:	pop    r12
  403e3e:	ret    
  403e3f:	nop
  403e40:	mov    rcx,rax
  403e43:	movabs rdx,0x6865786e65670000
  403e4d:	xor    cx,cx
  403e50:	cmp    rcx,rdx
  403e53:	je     403f00 <_start@@Base+0xae0>
  403e59:	movabs rdx,0xffffffff00000000
  403e63:	and    rax,rdx
  403e66:	movabs rdx,0x6865783200000000
  403e70:	cmp    rax,rdx
  403e73:	jne    403e37 <_start@@Base+0xa17>
  403e75:	mov    r8,r9
  403e78:	mov    ecx,0x4
  403e7d:	mov    rdx,r10
  403e80:	mov    rsi,rbx
  403e83:	mov    rdi,r11
  403e86:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403e8b:	cmp    rbx,rax
  403e8e:	je     403e37 <_start@@Base+0xa17>
  403e90:	mov    QWORD PTR [r12],0x7eafbeaf
  403e98:	mov    rbx,rax
  403e9b:	mov    DWORD PTR [rbp+0x0],0x0
  403ea2:	jmp    403e37 <_start@@Base+0xa17>
  403ea4:	nop    DWORD PTR [rax+0x0]
  403ea8:	mov    rsi,rdx
  403eab:	mov    rdi,rbx
  403eae:	call   403530 <_start@@Base+0x110>
  403eb3:	jmp    403e08 <_start@@Base+0x9e8>
  403eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  403ec0:	mov    r8,r9
  403ec3:	mov    ecx,0x4
  403ec8:	mov    rdx,r10
  403ecb:	mov    rsi,rbx
  403ece:	mov    rdi,r11
  403ed1:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403ed6:	cmp    rbx,rax
  403ed9:	je     403e37 <_start@@Base+0xa17>
  403edf:	mov    QWORD PTR [r12],0x3
  403ee7:	mov    rbx,rax
  403eea:	mov    DWORD PTR [rbp+0x0],0x0
  403ef1:	jmp    403e37 <_start@@Base+0xa17>
  403ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f00:	mov    r8,r9
  403f03:	mov    ecx,0x6
  403f08:	mov    rdx,r10
  403f0b:	mov    rsi,rbx
  403f0e:	mov    rdi,r11
  403f11:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403f16:	cmp    rbx,rax
  403f19:	je     403e37 <_start@@Base+0xa17>
  403f1f:	mov    QWORD PTR [r12],0xfffffffffffffffe
  403f27:	mov    rbx,rax
  403f2a:	mov    DWORD PTR [rbp+0x0],0x1
  403f31:	jmp    403e37 <_start@@Base+0xa17>
  403f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f40:	mov    rax,rdx
  403f43:	push   r12
  403f45:	mov    r10,rdi
  403f48:	sub    rax,rsi
  403f4b:	push   rbp
  403f4c:	mov    r12,rsi
  403f4f:	cmp    rax,0x7
  403f53:	push   rbx
  403f54:	mov    r11,rdx
  403f57:	mov    rbx,rcx
  403f5a:	mov    rbp,r8
  403f5d:	jbe    404010 <_start@@Base+0xbf0>
  403f63:	movbe  rax,QWORD PTR [rsi]
  403f68:	movabs rdx,0x696e7431ffffffff
  403f72:	cmp    rax,rdx
  403f75:	ja     403fa0 <_start@@Base+0xb80>
  403f77:	movabs rdx,0xffffffff00000000
  403f81:	and    rax,rdx
  403f84:	movabs rdx,0x696e743100000000
  403f8e:	cmp    rax,rdx
  403f91:	je     404078 <_start@@Base+0xc58>
  403f97:	mov    rax,r12
  403f9a:	pop    rbx
  403f9b:	pop    rbp
  403f9c:	pop    r12
  403f9e:	ret    
  403f9f:	nop
  403fa0:	movabs rdx,0x696e746e6566ffff
  403faa:	cmp    rax,rdx
  403fad:	jbe    404020 <_start@@Base+0xc00>
  403faf:	mov    rcx,rax
  403fb2:	movabs rdx,0x696e746e65673200
  403fbc:	xor    cl,cl
  403fbe:	cmp    rcx,rdx
  403fc1:	je     4040b0 <_start@@Base+0xc90>
  403fc7:	xor    ax,ax
  403fca:	movabs rdx,0x696e746e65670000
  403fd4:	cmp    rax,rdx
  403fd7:	jne    403f97 <_start@@Base+0xb77>
  403fd9:	mov    r8,r9
  403fdc:	mov    ecx,0x6
  403fe1:	mov    rdx,r11
  403fe4:	mov    rsi,r12
  403fe7:	mov    rdi,r10
  403fea:	call   417370 <flatcc_json_parser_match_constant@@Base>
  403fef:	cmp    r12,rax
  403ff2:	je     403f97 <_start@@Base+0xb77>
  403ff4:	mov    QWORD PTR [rbp+0x0],0xfffffffffffffffe
  403ffc:	mov    r12,rax
  403fff:	mov    DWORD PTR [rbx],0x1
  404005:	jmp    403f97 <_start@@Base+0xb77>
  404007:	nop    WORD PTR [rax+rax*1+0x0]
  404010:	mov    rsi,rdx
  404013:	mov    rdi,r12
  404016:	call   403530 <_start@@Base+0x110>
  40401b:	jmp    403f68 <_start@@Base+0xb48>
  404020:	movabs rdx,0xffffffff00000000
  40402a:	and    rax,rdx
  40402d:	movabs rdx,0x696e743200000000
  404037:	cmp    rax,rdx
  40403a:	jne    403f97 <_start@@Base+0xb77>
  404040:	mov    r8,r9
  404043:	mov    ecx,0x4
  404048:	mov    rdx,r11
  40404b:	mov    rsi,r12
  40404e:	mov    rdi,r10
  404051:	call   417370 <flatcc_json_parser_match_constant@@Base>
  404056:	cmp    r12,rax
  404059:	je     403f97 <_start@@Base+0xb77>
  40405f:	mov    QWORD PTR [rbp+0x0],0x2a
  404067:	mov    r12,rax
  40406a:	mov    DWORD PTR [rbx],0x0
  404070:	jmp    403f97 <_start@@Base+0xb77>
  404075:	nop    DWORD PTR [rax]
  404078:	mov    r8,r9
  40407b:	mov    ecx,0x4
  404080:	mov    rdx,r11
  404083:	mov    rsi,r12
  404086:	mov    rdi,r10
  404089:	call   417370 <flatcc_json_parser_match_constant@@Base>
  40408e:	cmp    r12,rax
  404091:	je     403f97 <_start@@Base+0xb77>
  404097:	mov    QWORD PTR [rbp+0x0],0x2
  40409f:	mov    r12,rax
  4040a2:	mov    DWORD PTR [rbx],0x0
  4040a8:	jmp    403f97 <_start@@Base+0xb77>
  4040ad:	nop    DWORD PTR [rax]
  4040b0:	mov    r8,r9
  4040b3:	mov    ecx,0x7
  4040b8:	mov    rdx,r11
  4040bb:	mov    rsi,r12
  4040be:	mov    rdi,r10
  4040c1:	call   417370 <flatcc_json_parser_match_constant@@Base>
  4040c6:	cmp    r12,rax
  4040c9:	je     403f97 <_start@@Base+0xb77>
  4040cf:	mov    QWORD PTR [rbp+0x0],0xffffffffffffffff
  4040d7:	mov    r12,rax
  4040da:	mov    DWORD PTR [rbx],0x1
  4040e0:	jmp    403f97 <_start@@Base+0xb77>
  4040e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4040f0:	mov    rax,rdx
  4040f3:	push   r12
  4040f5:	mov    r11,rdi
  4040f8:	sub    rax,rsi
  4040fb:	push   rbp
  4040fc:	mov    r10,rdx
  4040ff:	cmp    rax,0x7
  404103:	push   rbx
  404104:	mov    rbp,rcx
  404107:	mov    rbx,rsi
  40410a:	mov    r12,r8
  40410d:	jbe    4041a8 <_start@@Base+0xd88>
  404113:	movbe  rax,QWORD PTR [rsi]
  404118:	movabs rdx,0x6e656731ffffffff
  404122:	cmp    rax,rdx
  404125:	movabs rdx,0xffffffff00000000
  40412f:	ja     404150 <_start@@Base+0xd30>
  404131:	and    rax,rdx
  404134:	movabs rdx,0x6e65673100000000
  40413e:	cmp    rax,rdx
  404141:	je     4041c0 <_start@@Base+0xda0>
  404143:	mov    rax,rbx
  404146:	pop    rbx
  404147:	pop    rbp
  404148:	pop    r12
  40414a:	ret    
  40414b:	nop    DWORD PTR [rax+rax*1+0x0]
  404150:	and    rax,rdx
  404153:	movabs rdx,0x6e65673300000000
  40415d:	cmp    rax,rdx
  404160:	je     404200 <_start@@Base+0xde0>
  404166:	movabs rdx,0x6e65673200000000
  404170:	cmp    rax,rdx
  404173:	jne    404143 <_start@@Base+0xd23>
  404175:	mov    r8,r9
  404178:	mov    ecx,0x4
  40417d:	mov    rdx,r10
  404180:	mov    rsi,rbx
  404183:	mov    rdi,r11
  404186:	call   417370 <flatcc_json_parser_match_constant@@Base>
  40418b:	cmp    rbx,rax
  40418e:	je     404143 <_start@@Base+0xd23>
  404190:	mov    QWORD PTR [r12],0xfffffffffffffff5
  404198:	mov    rbx,rax
  40419b:	mov    DWORD PTR [rbp+0x0],0x1
  4041a2:	jmp    404143 <_start@@Base+0xd23>
  4041a4:	nop    DWORD PTR [rax+0x0]
  4041a8:	mov    rsi,rdx
  4041ab:	mov    rdi,rbx
  4041ae:	call   403530 <_start@@Base+0x110>
  4041b3:	jmp    404118 <_start@@Base+0xcf8>
  4041b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4041c0:	mov    r8,r9
  4041c3:	mov    ecx,0x4
  4041c8:	mov    rdx,r10
  4041cb:	mov    rsi,rbx
  4041ce:	mov    rdi,r11
  4041d1:	call   417370 <flatcc_json_parser_match_constant@@Base>
  4041d6:	cmp    rbx,rax
  4041d9:	je     404143 <_start@@Base+0xd23>
  4041df:	mov    QWORD PTR [r12],0xfffffffffffffff4
  4041e7:	mov    rbx,rax
  4041ea:	mov    DWORD PTR [rbp+0x0],0x1
  4041f1:	jmp    404143 <_start@@Base+0xd23>
  4041f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404200:	mov    r8,r9
  404203:	mov    ecx,0x4
  404208:	mov    rdx,r10
  40420b:	mov    rsi,rbx
  40420e:	mov    rdi,r11
  404211:	call   417370 <flatcc_json_parser_match_constant@@Base>
  404216:	cmp    rbx,rax
  404219:	je     404143 <_start@@Base+0xd23>
  40421f:	mov    QWORD PTR [r12],0xfffffffffffffff6
  404227:	mov    rbx,rax
  40422a:	mov    DWORD PTR [rbp+0x0],0x1
  404231:	jmp    404143 <_start@@Base+0xd23>
  404236:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404240:	mov    rax,rdx
  404243:	push   r12
  404245:	mov    r11,rdi
  404248:	sub    rax,rsi
  40424b:	push   rbp
  40424c:	mov    r10,rdx
  40424f:	cmp    rax,0x7
  404253:	push   rbx
  404254:	mov    rbp,rcx
  404257:	mov    rbx,rsi
  40425a:	mov    r12,r8
  40425d:	jbe    404308 <_start@@Base+0xee8>
  404263:	movbe  rax,QWORD PTR [rsi]
  404268:	movabs rdx,0x477265656dffffff
  404272:	cmp    rax,rdx
  404275:	ja     4042a0 <_start@@Base+0xe80>
  404277:	movabs rdx,0xffffffff00000000
  404281:	and    rax,rdx
  404284:	movabs rdx,0x426c756500000000
  40428e:	cmp    rax,rdx
  404291:	je     404320 <_start@@Base+0xf00>
  404297:	mov    rax,rbx
  40429a:	pop    rbx
  40429b:	pop    rbp
  40429c:	pop    r12
  40429e:	ret    
  40429f:	nop
  4042a0:	movabs rdx,0xffffff0000000000
  4042aa:	movabs rcx,0x5265640000000000
  4042b4:	and    rdx,rax
  4042b7:	cmp    rdx,rcx
  4042ba:	je     404360 <_start@@Base+0xf40>
  4042c0:	and    rax,0xffffffffff000000
  4042c6:	movabs rdx,0x477265656e000000
  4042d0:	cmp    rax,rdx
  4042d3:	jne    404297 <_start@@Base+0xe77>
  4042d5:	mov    r8,r9
  4042d8:	mov    ecx,0x5
  4042dd:	mov    rdx,r10
  4042e0:	mov    rsi,rbx
  4042e3:	mov    rdi,r11
  4042e6:	call   417370 <flatcc_json_parser_match_constant@@Base>
  4042eb:	cmp    rbx,rax
  4042ee:	je     404297 <_start@@Base+0xe77>
  4042f0:	mov    QWORD PTR [r12],0x2
  4042f8:	mov    rbx,rax
  4042fb:	mov    DWORD PTR [rbp+0x0],0x0
  404302:	jmp    404297 <_start@@Base+0xe77>
  404304:	nop    DWORD PTR [rax+0x0]
  404308:	mov    rsi,rdx
  40430b:	mov    rdi,rbx
  40430e:	call   403530 <_start@@Base+0x110>
  404313:	jmp    404268 <_start@@Base+0xe48>
  404318:	nop    DWORD PTR [rax+rax*1+0x0]
  404320:	mov    r8,r9
  404323:	mov    ecx,0x4
  404328:	mov    rdx,r10
  40432b:	mov    rsi,rbx
  40432e:	mov    rdi,r11
  404331:	call   417370 <flatcc_json_parser_match_constant@@Base>
  404336:	cmp    rbx,rax
  404339:	je     404297 <_start@@Base+0xe77>
  40433f:	mov    QWORD PTR [r12],0x8
  404347:	mov    rbx,rax
  40434a:	mov    DWORD PTR [rbp+0x0],0x0
  404351:	jmp    404297 <_start@@Base+0xe77>
  404356:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404360:	mov    r8,r9
  404363:	mov    ecx,0x3
  404368:	mov    rdx,r10
  40436b:	mov    rsi,rbx
  40436e:	mov    rdi,r11
  404371:	call   417370 <flatcc_json_parser_match_constant@@Base>
  404376:	cmp    rbx,rax
  404379:	je     404297 <_start@@Base+0xe77>
  40437f:	mov    QWORD PTR [r12],0x1
  404387:	mov    rbx,rax
  40438a:	mov    DWORD PTR [rbp+0x0],0x0
  404391:	jmp    404297 <_start@@Base+0xe77>
  404396:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4043a0:	push   r13
  4043a2:	push   r12
  4043a4:	push   rbp
  4043a5:	push   rbx
  4043a6:	sub    rsp,0x28
  4043aa:	mov    BYTE PTR [rcx],0x0
  4043ad:	mov    rax,QWORD PTR fs:0x28
  4043b6:	mov    QWORD PTR [rsp+0x18],rax
  4043bb:	xor    eax,eax
  4043bd:	cmp    rsi,rdx
  4043c0:	mov    QWORD PTR [rsp+0x10],0x0
  4043c9:	mov    DWORD PTR [rsp+0xc],0x0
  4043d1:	mov    rax,rsi
  4043d4:	je     404410 <_start@@Base+0xff0>
  4043d6:	mov    r12,rcx
  4043d9:	lea    r8,[rsp+0x10]
  4043de:	lea    rcx,[rsp+0xc]
  4043e3:	mov    rbp,rsi
  4043e6:	mov    r13,rdi
  4043e9:	mov    rbx,rdx
  4043ec:	call   4183c0 <flatcc_json_parser_integer@@Base>
  4043f1:	cmp    rbp,rax
  4043f4:	je     404410 <_start@@Base+0xff0>
  4043f6:	mov    edx,DWORD PTR [rsp+0xc]
  4043fa:	test   edx,edx
  4043fc:	jne    404430 <_start@@Base+0x1010>
  4043fe:	mov    rdx,QWORD PTR [rsp+0x10]
  404403:	cmp    rdx,0xff
  40440a:	ja     404448 <_start@@Base+0x1028>
  40440c:	mov    BYTE PTR [r12],dl
  404410:	mov    rsi,QWORD PTR [rsp+0x18]
  404415:	xor    rsi,QWORD PTR fs:0x28
  40441e:	jne    40445d <_start@@Base+0x103d>
  404420:	add    rsp,0x28
  404424:	pop    rbx
  404425:	pop    rbp
  404426:	pop    r12
  404428:	pop    r13
  40442a:	ret    
  40442b:	nop    DWORD PTR [rax+rax*1+0x0]
  404430:	mov    ecx,0x8
  404435:	mov    rdx,rbx
  404438:	mov    rsi,rax
  40443b:	mov    rdi,r13
  40443e:	call   416820 <flatcc_json_parser_set_error@@Base>
  404443:	jmp    404410 <_start@@Base+0xff0>
  404445:	nop    DWORD PTR [rax]
  404448:	mov    ecx,0x7
  40444d:	mov    rdx,rbx
  404450:	mov    rsi,rax
  404453:	mov    rdi,r13
  404456:	call   416820 <flatcc_json_parser_set_error@@Base>
  40445b:	jmp    404410 <_start@@Base+0xff0>
  40445d:	call   403080 <__stack_chk_fail@plt>
  404462:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40446d:	nop    DWORD PTR [rax]
  404470:	push   r13
  404472:	push   r12
  404474:	push   rbp
  404475:	push   rbx
  404476:	sub    rsp,0x28
  40447a:	mov    DWORD PTR [rcx],0x0
  404480:	mov    rax,QWORD PTR fs:0x28
  404489:	mov    QWORD PTR [rsp+0x18],rax
  40448e:	xor    eax,eax
  404490:	cmp    rsi,rdx
  404493:	mov    QWORD PTR [rsp+0x10],0x0
  40449c:	mov    DWORD PTR [rsp+0xc],0x0
  4044a4:	mov    rax,rsi
  4044a7:	je     4044e4 <_start@@Base+0x10c4>
  4044a9:	mov    r12,rcx
  4044ac:	lea    r8,[rsp+0x10]
  4044b1:	lea    rcx,[rsp+0xc]
  4044b6:	mov    rbp,rsi
  4044b9:	mov    r13,rdi
  4044bc:	mov    rbx,rdx
  4044bf:	call   4183c0 <flatcc_json_parser_integer@@Base>
  4044c4:	cmp    rbp,rax
  4044c7:	je     4044e4 <_start@@Base+0x10c4>
  4044c9:	mov    edx,DWORD PTR [rsp+0xc]
  4044cd:	test   edx,edx
  4044cf:	jne    404500 <_start@@Base+0x10e0>
  4044d1:	mov    rdx,QWORD PTR [rsp+0x10]
  4044d6:	mov    ecx,0xffffffff
  4044db:	cmp    rdx,rcx
  4044de:	ja     404518 <_start@@Base+0x10f8>
  4044e0:	mov    DWORD PTR [r12],edx
  4044e4:	mov    rsi,QWORD PTR [rsp+0x18]
  4044e9:	xor    rsi,QWORD PTR fs:0x28
  4044f2:	jne    40452d <_start@@Base+0x110d>
  4044f4:	add    rsp,0x28
  4044f8:	pop    rbx
  4044f9:	pop    rbp
  4044fa:	pop    r12
  4044fc:	pop    r13
  4044fe:	ret    
  4044ff:	nop
  404500:	mov    ecx,0x8
  404505:	mov    rdx,rbx
  404508:	mov    rsi,rax
  40450b:	mov    rdi,r13
  40450e:	call   416820 <flatcc_json_parser_set_error@@Base>
  404513:	jmp    4044e4 <_start@@Base+0x10c4>
  404515:	nop    DWORD PTR [rax]
  404518:	mov    ecx,0x7
  40451d:	mov    rdx,rbx
  404520:	mov    rsi,rax
  404523:	mov    rdi,r13
  404526:	call   416820 <flatcc_json_parser_set_error@@Base>
  40452b:	jmp    4044e4 <_start@@Base+0x10c4>
  40452d:	call   403080 <__stack_chk_fail@plt>
  404532:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40453d:	nop    DWORD PTR [rax]
  404540:	push   r13
  404542:	push   r12
  404544:	push   rbp
  404545:	push   rbx
  404546:	sub    rsp,0x28
  40454a:	mov    DWORD PTR [rcx],0x0
  404550:	mov    rax,QWORD PTR fs:0x28
  404559:	mov    QWORD PTR [rsp+0x18],rax
  40455e:	xor    eax,eax
  404560:	cmp    rsi,rdx
  404563:	mov    QWORD PTR [rsp+0x10],0x0
  40456c:	mov    DWORD PTR [rsp+0xc],0x0
  404574:	mov    rax,rsi
  404577:	je     4045b6 <_start@@Base+0x1196>
  404579:	mov    r12,rcx
  40457c:	lea    r8,[rsp+0x10]
  404581:	lea    rcx,[rsp+0xc]
  404586:	mov    rbp,rsi
  404589:	mov    r13,rdi
  40458c:	mov    rbx,rdx
  40458f:	call   4183c0 <flatcc_json_parser_integer@@Base>
  404594:	cmp    rbp,rax
  404597:	je     4045b6 <_start@@Base+0x1196>
  404599:	mov    ecx,DWORD PTR [rsp+0xc]
  40459d:	mov    rdx,QWORD PTR [rsp+0x10]
  4045a2:	test   ecx,ecx
  4045a4:	je     4045d8 <_start@@Base+0x11b8>
  4045a6:	mov    ecx,0x80000000
  4045ab:	cmp    rdx,rcx
  4045ae:	ja     4045f0 <_start@@Base+0x11d0>
  4045b0:	neg    edx
  4045b2:	mov    DWORD PTR [r12],edx
  4045b6:	mov    rsi,QWORD PTR [rsp+0x18]
  4045bb:	xor    rsi,QWORD PTR fs:0x28
  4045c4:	jne    40461d <_start@@Base+0x11fd>
  4045c6:	add    rsp,0x28
  4045ca:	pop    rbx
  4045cb:	pop    rbp
  4045cc:	pop    r12
  4045ce:	pop    r13
  4045d0:	ret    
  4045d1:	nop    DWORD PTR [rax+0x0]
  4045d8:	cmp    rdx,0x7fffffff
  4045df:	ja     404608 <_start@@Base+0x11e8>
  4045e1:	mov    DWORD PTR [r12],edx
  4045e5:	jmp    4045b6 <_start@@Base+0x1196>
  4045e7:	nop    WORD PTR [rax+rax*1+0x0]
  4045f0:	mov    ecx,0x8
  4045f5:	mov    rdx,rbx
  4045f8:	mov    rsi,rax
  4045fb:	mov    rdi,r13
  4045fe:	call   416820 <flatcc_json_parser_set_error@@Base>
  404603:	jmp    4045b6 <_start@@Base+0x1196>
  404605:	nop    DWORD PTR [rax]
  404608:	mov    ecx,0x7
  40460d:	mov    rdx,rbx
  404610:	mov    rsi,rax
  404613:	mov    rdi,r13
  404616:	call   416820 <flatcc_json_parser_set_error@@Base>
  40461b:	jmp    4045b6 <_start@@Base+0x1196>
  40461d:	call   403080 <__stack_chk_fail@plt>
  404622:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40462d:	nop    DWORD PTR [rax]
  404630:	push   r13
  404632:	push   r12
  404634:	xor    r8d,r8d
  404637:	push   rbp
  404638:	push   rbx
  404639:	sub    rsp,0x28
  40463d:	mov    WORD PTR [rcx],r8w
  404641:	mov    rax,QWORD PTR fs:0x28
  40464a:	mov    QWORD PTR [rsp+0x18],rax
  40464f:	xor    eax,eax
  404651:	cmp    rsi,rdx
  404654:	mov    QWORD PTR [rsp+0x10],0x0
  40465d:	mov    DWORD PTR [rsp+0xc],0x0
  404665:	mov    rax,rsi
  404668:	je     4046a7 <_start@@Base+0x1287>
  40466a:	mov    r12,rcx
  40466d:	lea    r8,[rsp+0x10]
  404672:	lea    rcx,[rsp+0xc]
  404677:	mov    rbp,rsi
  40467a:	mov    r13,rdi
  40467d:	mov    rbx,rdx
  404680:	call   4183c0 <flatcc_json_parser_integer@@Base>
  404685:	cmp    rbp,rax
  404688:	je     4046a7 <_start@@Base+0x1287>
  40468a:	mov    ecx,DWORD PTR [rsp+0xc]
  40468e:	mov    rdx,QWORD PTR [rsp+0x10]
  404693:	test   ecx,ecx
  404695:	je     4046c8 <_start@@Base+0x12a8>
  404697:	cmp    rdx,0x8000
  40469e:	ja     4046e0 <_start@@Base+0x12c0>
  4046a0:	neg    edx
  4046a2:	mov    WORD PTR [r12],dx
  4046a7:	mov    rsi,QWORD PTR [rsp+0x18]
  4046ac:	xor    rsi,QWORD PTR fs:0x28
  4046b5:	jne    40470d <_start@@Base+0x12ed>
  4046b7:	add    rsp,0x28
  4046bb:	pop    rbx
  4046bc:	pop    rbp
  4046bd:	pop    r12
  4046bf:	pop    r13
  4046c1:	ret    
  4046c2:	nop    WORD PTR [rax+rax*1+0x0]
  4046c8:	cmp    rdx,0x7fff
  4046cf:	ja     4046f8 <_start@@Base+0x12d8>
  4046d1:	mov    WORD PTR [r12],dx
  4046d6:	jmp    4046a7 <_start@@Base+0x1287>
  4046d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4046e0:	mov    ecx,0x8
  4046e5:	mov    rdx,rbx
  4046e8:	mov    rsi,rax
  4046eb:	mov    rdi,r13
  4046ee:	call   416820 <flatcc_json_parser_set_error@@Base>
  4046f3:	jmp    4046a7 <_start@@Base+0x1287>
  4046f5:	nop    DWORD PTR [rax]
  4046f8:	mov    ecx,0x7
  4046fd:	mov    rdx,rbx
  404700:	mov    rsi,rax
  404703:	mov    rdi,r13
  404706:	call   416820 <flatcc_json_parser_set_error@@Base>
  40470b:	jmp    4046a7 <_start@@Base+0x1287>
  40470d:	call   403080 <__stack_chk_fail@plt>
  404712:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40471d:	nop    DWORD PTR [rax]
  404720:	push   r13
  404722:	push   r12
  404724:	push   rbp
  404725:	push   rbx
  404726:	sub    rsp,0x28
  40472a:	mov    QWORD PTR [rcx],0x0
  404731:	mov    rax,QWORD PTR fs:0x28
  40473a:	mov    QWORD PTR [rsp+0x18],rax
  40473f:	xor    eax,eax
  404741:	cmp    rsi,rdx
  404744:	mov    QWORD PTR [rsp+0x10],0x0
  40474d:	mov    DWORD PTR [rsp+0xc],0x0
  404755:	mov    rax,rsi
  404758:	je     40479d <_start@@Base+0x137d>
  40475a:	mov    r12,rcx
  40475d:	lea    r8,[rsp+0x10]
  404762:	lea    rcx,[rsp+0xc]
  404767:	mov    rbp,rsi
  40476a:	mov    r13,rdi
  40476d:	mov    rbx,rdx
  404770:	call   4183c0 <flatcc_json_parser_integer@@Base>
  404775:	cmp    rbp,rax
  404778:	je     40479d <_start@@Base+0x137d>
  40477a:	mov    ecx,DWORD PTR [rsp+0xc]
  40477e:	mov    rdx,QWORD PTR [rsp+0x10]
  404783:	test   ecx,ecx
  404785:	je     4047c0 <_start@@Base+0x13a0>
  404787:	movabs rcx,0x8000000000000000
  404791:	cmp    rdx,rcx
  404794:	ja     4047d0 <_start@@Base+0x13b0>
  404796:	neg    rdx
  404799:	mov    QWORD PTR [r12],rdx
  40479d:	mov    rsi,QWORD PTR [rsp+0x18]
  4047a2:	xor    rsi,QWORD PTR fs:0x28
  4047ab:	jne    4047fd <_start@@Base+0x13dd>
  4047ad:	add    rsp,0x28
  4047b1:	pop    rbx
  4047b2:	pop    rbp
  4047b3:	pop    r12
  4047b5:	pop    r13
  4047b7:	ret    
  4047b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4047c0:	test   rdx,rdx
  4047c3:	js     4047e8 <_start@@Base+0x13c8>
  4047c5:	mov    QWORD PTR [r12],rdx
  4047c9:	jmp    40479d <_start@@Base+0x137d>
  4047cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4047d0:	mov    ecx,0x8
  4047d5:	mov    rdx,rbx
  4047d8:	mov    rsi,rax
  4047db:	mov    rdi,r13
  4047de:	call   416820 <flatcc_json_parser_set_error@@Base>
  4047e3:	jmp    40479d <_start@@Base+0x137d>
  4047e5:	nop    DWORD PTR [rax]
  4047e8:	mov    ecx,0x7
  4047ed:	mov    rdx,rbx
  4047f0:	mov    rsi,rax
  4047f3:	mov    rdi,r13
  4047f6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4047fb:	jmp    40479d <_start@@Base+0x137d>
  4047fd:	call   403080 <__stack_chk_fail@plt>
  404802:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40480d:	nop    DWORD PTR [rax]
  404810:	push   r13
  404812:	mov    rax,rdx
  404815:	push   r12
  404817:	push   rbp
  404818:	push   rbx
  404819:	sub    rax,rsi
  40481c:	mov    rbx,rdi
  40481f:	mov    r10,rsi
  404822:	mov    r11,rdx
  404825:	sub    rsp,0x8
  404829:	cmp    rax,0x7
  40482d:	mov    rbp,rcx
  404830:	jbe    404858 <_start@@Base+0x1438>
  404832:	movbe  rax,QWORD PTR [rsi]
  404837:	movabs rdx,0x4368617261637465
  404841:	cmp    rax,rdx
  404844:	je     404872 <_start@@Base+0x1452>
  404846:	add    rsp,0x8
  40484a:	mov    rax,r10
  40484d:	pop    rbx
  40484e:	pop    rbp
  40484f:	pop    r12
  404851:	pop    r13
  404853:	ret    
  404854:	nop    DWORD PTR [rax+0x0]
  404858:	mov    rsi,rdx
  40485b:	mov    rdi,r10
  40485e:	call   403530 <_start@@Base+0x110>
  404863:	movabs rdx,0x4368617261637465
  40486d:	cmp    rax,rdx
  404870:	jne    404846 <_start@@Base+0x1426>
  404872:	lea    r13,[r10+0x8]
  404876:	mov    r12,r11
  404879:	sub    r12,r13
  40487c:	cmp    r12,0x7
  404880:	ja     4048e0 <_start@@Base+0x14c0>
  404882:	mov    rsi,r11
  404885:	mov    rdi,r13
  404888:	call   403530 <_start@@Base+0x110>
  40488d:	movabs rdx,0xff00000000000000
  404897:	and    rax,rdx
  40489a:	movabs rdx,0x7200000000000000
  4048a4:	cmp    rax,rdx
  4048a7:	jne    404846 <_start@@Base+0x1426>
  4048a9:	cmp    r12,0x1
  4048ad:	jle    404846 <_start@@Base+0x1426>
  4048af:	cmp    BYTE PTR [r10+0x9],0x2e
  4048b4:	jne    404846 <_start@@Base+0x1426>
  4048b6:	lea    rsi,[r10+0xa]
  4048ba:	cmp    r13,rsi
  4048bd:	je     404846 <_start@@Base+0x1426>
  4048bf:	add    rsp,0x8
  4048c3:	mov    rcx,rbp
  4048c6:	mov    rdi,rbx
  4048c9:	pop    rbx
  4048ca:	pop    rbp
  4048cb:	pop    r12
  4048cd:	pop    r13
  4048cf:	mov    rdx,r11
  4048d2:	jmp    4036c0 <_start@@Base+0x2a0>
  4048d7:	nop    WORD PTR [rax+rax*1+0x0]
  4048e0:	movbe  rax,QWORD PTR [r10+0x8]
  4048e6:	jmp    40488d <_start@@Base+0x146d>
  4048e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4048f0:	cmp    rsi,rdx
  4048f3:	je     4048fa <_start@@Base+0x14da>
  4048f5:	cmp    BYTE PTR [rsi],0x7b
  4048f8:	je     404910 <_start@@Base+0x14f0>
  4048fa:	mov    DWORD PTR [rcx],0x0
  404900:	mov    ecx,0x15
  404905:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  40490a:	nop    WORD PTR [rax+rax*1+0x0]
  404910:	lea    rax,[rsi+0x1]
  404914:	push   r12
  404916:	push   rbp
  404917:	push   rbx
  404918:	mov    rbx,rdx
  40491b:	mov    rbp,rcx
  40491e:	sub    rdx,rax
  404921:	mov    r12,rdi
  404924:	cmp    rdx,0x1
  404928:	jle    404932 <_start@@Base+0x1512>
  40492a:	cmp    BYTE PTR [rsi+0x1],0x20
  40492e:	jg     404940 <_start@@Base+0x1520>
  404930:	je     404960 <_start@@Base+0x1540>
  404932:	mov    rdx,rbx
  404935:	mov    rsi,rax
  404938:	mov    rdi,r12
  40493b:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  404940:	cmp    rbx,rax
  404943:	je     40494a <_start@@Base+0x152a>
  404945:	cmp    BYTE PTR [rax],0x7d
  404948:	je     404970 <_start@@Base+0x1550>
  40494a:	mov    DWORD PTR [rbp+0x0],0x1
  404951:	pop    rbx
  404952:	pop    rbp
  404953:	pop    r12
  404955:	ret    
  404956:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404960:	cmp    BYTE PTR [rsi+0x2],0x20
  404964:	jle    404932 <_start@@Base+0x1512>
  404966:	lea    rax,[rsi+0x2]
  40496a:	jmp    404940 <_start@@Base+0x1520>
  40496c:	nop    DWORD PTR [rax+0x0]
  404970:	mov    DWORD PTR [rbp+0x0],0x0
  404977:	mov    rdx,rbx
  40497a:	mov    rdi,r12
  40497d:	pop    rbx
  40497e:	pop    rbp
  40497f:	pop    r12
  404981:	lea    rsi,[rax+0x1]
  404985:	jmp    403680 <_start@@Base+0x260>
  40498a:	nop    WORD PTR [rax+rax*1+0x0]
  404990:	cmp    rsi,rdx
  404993:	je     40499a <_start@@Base+0x157a>
  404995:	cmp    BYTE PTR [rsi],0x5b
  404998:	je     4049b0 <_start@@Base+0x1590>
  40499a:	mov    DWORD PTR [rcx],0x0
  4049a0:	mov    ecx,0x16
  4049a5:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  4049aa:	nop    WORD PTR [rax+rax*1+0x0]
  4049b0:	lea    rax,[rsi+0x1]
  4049b4:	push   r12
  4049b6:	push   rbp
  4049b7:	push   rbx
  4049b8:	mov    rbx,rdx
  4049bb:	mov    rbp,rcx
  4049be:	sub    rdx,rax
  4049c1:	mov    r12,rdi
  4049c4:	cmp    rdx,0x1
  4049c8:	jle    4049d2 <_start@@Base+0x15b2>
  4049ca:	cmp    BYTE PTR [rsi+0x1],0x20
  4049ce:	jg     4049e0 <_start@@Base+0x15c0>
  4049d0:	je     404a00 <_start@@Base+0x15e0>
  4049d2:	mov    rdx,rbx
  4049d5:	mov    rsi,rax
  4049d8:	mov    rdi,r12
  4049db:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4049e0:	cmp    rbx,rax
  4049e3:	je     4049ea <_start@@Base+0x15ca>
  4049e5:	cmp    BYTE PTR [rax],0x5d
  4049e8:	je     404a10 <_start@@Base+0x15f0>
  4049ea:	mov    DWORD PTR [rbp+0x0],0x1
  4049f1:	pop    rbx
  4049f2:	pop    rbp
  4049f3:	pop    r12
  4049f5:	ret    
  4049f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404a00:	cmp    BYTE PTR [rsi+0x2],0x20
  404a04:	jle    4049d2 <_start@@Base+0x15b2>
  404a06:	lea    rax,[rsi+0x2]
  404a0a:	jmp    4049e0 <_start@@Base+0x15c0>
  404a0c:	nop    DWORD PTR [rax+0x0]
  404a10:	mov    DWORD PTR [rbp+0x0],0x0
  404a17:	mov    rdx,rbx
  404a1a:	mov    rdi,r12
  404a1d:	pop    rbx
  404a1e:	pop    rbp
  404a1f:	pop    r12
  404a21:	lea    rsi,[rax+0x1]
  404a25:	jmp    403680 <_start@@Base+0x260>
  404a2a:	nop    WORD PTR [rax+rax*1+0x0]
  404a30:	push   r15
  404a32:	push   r14
  404a34:	push   r13
  404a36:	push   r12
  404a38:	mov    r12,rdi
  404a3b:	push   rbp
  404a3c:	push   rbx
  404a3d:	mov    rbp,rdx
  404a40:	mov    rbx,rsi
  404a43:	sub    rsp,0x48
  404a47:	mov    QWORD PTR [r8],0x0
  404a4e:	mov    QWORD PTR [rsp+0x10],rcx
  404a53:	mov    QWORD PTR [rsp+0x18],r8
  404a58:	mov    rcx,QWORD PTR fs:0x28
  404a61:	mov    QWORD PTR [rsp+0x38],rcx
  404a66:	xor    ecx,ecx
  404a68:	cmp    rsi,rdx
  404a6b:	je     404c25 <_start@@Base+0x1805>
  404a71:	movzx  eax,BYTE PTR [rsi]
  404a74:	cmp    al,0x22
  404a76:	je     404ba8 <_start@@Base+0x1788>
  404a7c:	cmp    al,0x2e
  404a7e:	je     404c38 <_start@@Base+0x1818>
  404a84:	mov    DWORD PTR [rdi+0x14],0x1
  404a8b:	lea    rax,[rsp+0x28]
  404a90:	lea    r15,[rsp+0x2c]
  404a95:	lea    r14,[rsp+0x30]
  404a9a:	mov    DWORD PTR [rsp+0xc],0x0
  404aa2:	mov    QWORD PTR [rsp],rax
  404aa6:	mov    r13,QWORD PTR [rsp+0x10]
  404aab:	mov    rax,QWORD PTR [r13+0x0]
  404aaf:	jmp    404ace <_start@@Base+0x16ae>
  404ab1:	nop    DWORD PTR [rax+0x0]
  404ab8:	cmp    rbx,rax
  404abb:	jne    404b10 <_start@@Base+0x16f0>
  404abd:	add    r13,0x8
  404ac1:	mov    rax,QWORD PTR [r13+0x0]
  404ac5:	test   rax,rax
  404ac8:	je     404b78 <_start@@Base+0x1758>
  404ace:	mov    r9,r15
  404ad1:	mov    r8,r14
  404ad4:	mov    rcx,QWORD PTR [rsp]
  404ad8:	mov    rdx,rbp
  404adb:	mov    rsi,rbx
  404ade:	mov    rdi,r12
  404ae1:	call   rax
  404ae3:	cmp    rbp,rax
  404ae6:	jne    404ab8 <_start@@Base+0x1698>
  404ae8:	mov    rdi,QWORD PTR [rsp+0x38]
  404aed:	xor    rdi,QWORD PTR fs:0x28
  404af6:	mov    rax,rbp
  404af9:	jne    404c90 <_start@@Base+0x1870>
  404aff:	add    rsp,0x48
  404b03:	pop    rbx
  404b04:	pop    rbp
  404b05:	pop    r12
  404b07:	pop    r13
  404b09:	pop    r14
  404b0b:	pop    r15
  404b0d:	ret    
  404b0e:	xchg   ax,ax
  404b10:	mov    edx,DWORD PTR [rsp+0xc]
  404b14:	test   edx,edx
  404b16:	je     404b26 <_start@@Base+0x1706>
  404b18:	mov    r8d,DWORD PTR [r12+0x14]
  404b1d:	test   r8d,r8d
  404b20:	jne    404c75 <_start@@Base+0x1855>
  404b26:	mov    edi,DWORD PTR [rsp+0x28]
  404b2a:	mov    rdx,QWORD PTR [rsp+0x30]
  404b2f:	test   edi,edi
  404b31:	je     404b98 <_start@@Base+0x1778>
  404b33:	test   rdx,rdx
  404b36:	js     404be9 <_start@@Base+0x17c9>
  404b3c:	vxorpd xmm0,xmm0,xmm0
  404b40:	vcvtsi2sd xmm0,xmm0,rdx
  404b45:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x159e3]        # 41a530 <_IO_stdin_used@@Base+0x530>
  404b4d:	mov    rsi,QWORD PTR [rsp+0x18]
  404b52:	add    DWORD PTR [rsp+0xc],0x1
  404b57:	vaddsd xmm0,xmm0,QWORD PTR [rsi]
  404b5b:	vmovsd QWORD PTR [rsi],xmm0
  404b5f:	mov    esi,DWORD PTR [rsp+0x2c]
  404b63:	test   esi,esi
  404b65:	je     404c6d <_start@@Base+0x184d>
  404b6b:	mov    rbx,rax
  404b6e:	jmp    404aa6 <_start@@Base+0x1686>
  404b73:	nop    DWORD PTR [rax+rax*1+0x0]
  404b78:	mov    rdx,rbp
  404b7b:	mov    ecx,0x17
  404b80:	mov    rsi,rbx
  404b83:	mov    rdi,r12
  404b86:	call   416820 <flatcc_json_parser_set_error@@Base>
  404b8b:	mov    rbp,rax
  404b8e:	jmp    404ae8 <_start@@Base+0x16c8>
  404b93:	nop    DWORD PTR [rax+rax*1+0x0]
  404b98:	test   rdx,rdx
  404b9b:	js     404c07 <_start@@Base+0x17e7>
  404b9d:	vxorpd xmm0,xmm0,xmm0
  404ba1:	vcvtsi2sd xmm0,xmm0,rdx
  404ba6:	jmp    404b4d <_start@@Base+0x172d>
  404ba8:	add    rbx,0x1
  404bac:	mov    rax,rdx
  404baf:	mov    DWORD PTR [rdi+0x14],0x0
  404bb6:	sub    rax,rbx
  404bb9:	cmp    rax,0x1
  404bbd:	jle    404bca <_start@@Base+0x17aa>
  404bbf:	cmp    BYTE PTR [rbx],0x20
  404bc2:	jg     404bdb <_start@@Base+0x17bb>
  404bc4:	je     404c5a <_start@@Base+0x183a>
  404bca:	mov    rsi,rbx
  404bcd:	mov    rdx,rbp
  404bd0:	mov    rdi,r12
  404bd3:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  404bd8:	mov    rbx,rax
  404bdb:	cmp    rbp,rbx
  404bde:	jne    404a8b <_start@@Base+0x166b>
  404be4:	jmp    404ae8 <_start@@Base+0x16c8>
  404be9:	mov    rcx,rdx
  404bec:	vxorpd xmm0,xmm0,xmm0
  404bf0:	shr    rcx,1
  404bf3:	and    edx,0x1
  404bf6:	or     rcx,rdx
  404bf9:	vcvtsi2sd xmm0,xmm0,rcx
  404bfe:	vaddsd xmm0,xmm0,xmm0
  404c02:	jmp    404b45 <_start@@Base+0x1725>
  404c07:	mov    rcx,rdx
  404c0a:	vxorpd xmm0,xmm0,xmm0
  404c0e:	shr    rcx,1
  404c11:	and    edx,0x1
  404c14:	or     rcx,rdx
  404c17:	vcvtsi2sd xmm0,xmm0,rcx
  404c1c:	vaddsd xmm0,xmm0,xmm0
  404c20:	jmp    404b4d <_start@@Base+0x172d>
  404c25:	mov    ecx,DWORD PTR [rdi+0x14]
  404c28:	test   ecx,ecx
  404c2a:	je     404bca <_start@@Base+0x17aa>
  404c2c:	jmp    404ae8 <_start@@Base+0x16c8>
  404c31:	nop    DWORD PTR [rax+0x0]
  404c38:	mov    ecx,0x5
  404c3d:	call   416820 <flatcc_json_parser_set_error@@Base>
  404c42:	mov    r9d,DWORD PTR [r12+0x14]
  404c47:	mov    rbx,rax
  404c4a:	test   r9d,r9d
  404c4d:	jne    404bdb <_start@@Base+0x17bb>
  404c4f:	mov    rax,rbp
  404c52:	sub    rax,rbx
  404c55:	jmp    404bb9 <_start@@Base+0x1799>
  404c5a:	cmp    BYTE PTR [rbx+0x1],0x20
  404c5e:	jle    404bca <_start@@Base+0x17aa>
  404c64:	add    rbx,0x1
  404c68:	jmp    404bdb <_start@@Base+0x17bb>
  404c6d:	mov    rbp,rax
  404c70:	jmp    404ae8 <_start@@Base+0x16c8>
  404c75:	mov    rdx,rbp
  404c78:	mov    ecx,0xe
  404c7d:	mov    rsi,rax
  404c80:	mov    rdi,r12
  404c83:	call   416820 <flatcc_json_parser_set_error@@Base>
  404c88:	mov    rbp,rax
  404c8b:	jmp    404ae8 <_start@@Base+0x16c8>
  404c90:	call   403080 <__stack_chk_fail@plt>
  404c95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404ca0:	push   r15
  404ca2:	push   r14
  404ca4:	push   r13
  404ca6:	push   r12
  404ca8:	mov    r12,rdi
  404cab:	push   rbp
  404cac:	push   rbx
  404cad:	mov    rbp,rdx
  404cb0:	mov    rbx,rsi
  404cb3:	sub    rsp,0x48
  404cb7:	mov    DWORD PTR [r8],0x0
  404cbe:	mov    QWORD PTR [rsp+0x10],rcx
  404cc3:	mov    QWORD PTR [rsp+0x18],r8
  404cc8:	mov    rcx,QWORD PTR fs:0x28
  404cd1:	mov    QWORD PTR [rsp+0x38],rcx
  404cd6:	xor    ecx,ecx
  404cd8:	cmp    rsi,rdx
  404cdb:	je     404e95 <_start@@Base+0x1a75>
  404ce1:	movzx  eax,BYTE PTR [rsi]
  404ce4:	cmp    al,0x22
  404ce6:	je     404e18 <_start@@Base+0x19f8>
  404cec:	cmp    al,0x2e
  404cee:	je     404ea8 <_start@@Base+0x1a88>
  404cf4:	mov    DWORD PTR [rdi+0x14],0x1
  404cfb:	lea    rax,[rsp+0x28]
  404d00:	lea    r15,[rsp+0x2c]
  404d05:	lea    r14,[rsp+0x30]
  404d0a:	mov    DWORD PTR [rsp+0xc],0x0
  404d12:	mov    QWORD PTR [rsp],rax
  404d16:	mov    r13,QWORD PTR [rsp+0x10]
  404d1b:	mov    rax,QWORD PTR [r13+0x0]
  404d1f:	jmp    404d3e <_start@@Base+0x191e>
  404d21:	nop    DWORD PTR [rax+0x0]
  404d28:	cmp    rbx,rax
  404d2b:	jne    404d80 <_start@@Base+0x1960>
  404d2d:	add    r13,0x8
  404d31:	mov    rax,QWORD PTR [r13+0x0]
  404d35:	test   rax,rax
  404d38:	je     404de8 <_start@@Base+0x19c8>
  404d3e:	mov    r9,r15
  404d41:	mov    r8,r14
  404d44:	mov    rcx,QWORD PTR [rsp]
  404d48:	mov    rdx,rbp
  404d4b:	mov    rsi,rbx
  404d4e:	mov    rdi,r12
  404d51:	call   rax
  404d53:	cmp    rbp,rax
  404d56:	jne    404d28 <_start@@Base+0x1908>
  404d58:	mov    rdi,QWORD PTR [rsp+0x38]
  404d5d:	xor    rdi,QWORD PTR fs:0x28
  404d66:	mov    rax,rbp
  404d69:	jne    404f00 <_start@@Base+0x1ae0>
  404d6f:	add    rsp,0x48
  404d73:	pop    rbx
  404d74:	pop    rbp
  404d75:	pop    r12
  404d77:	pop    r13
  404d79:	pop    r14
  404d7b:	pop    r15
  404d7d:	ret    
  404d7e:	xchg   ax,ax
  404d80:	mov    edx,DWORD PTR [rsp+0xc]
  404d84:	test   edx,edx
  404d86:	je     404d96 <_start@@Base+0x1976>
  404d88:	mov    r8d,DWORD PTR [r12+0x14]
  404d8d:	test   r8d,r8d
  404d90:	jne    404ee5 <_start@@Base+0x1ac5>
  404d96:	mov    edi,DWORD PTR [rsp+0x28]
  404d9a:	mov    rdx,QWORD PTR [rsp+0x30]
  404d9f:	test   edi,edi
  404da1:	je     404e08 <_start@@Base+0x19e8>
  404da3:	test   rdx,rdx
  404da6:	js     404e59 <_start@@Base+0x1a39>
  404dac:	vxorps xmm0,xmm0,xmm0
  404db0:	vcvtsi2ss xmm0,xmm0,rdx
  404db5:	vxorps xmm0,xmm0,XMMWORD PTR [rip+0x15783]        # 41a540 <_IO_stdin_used@@Base+0x540>
  404dbd:	mov    rsi,QWORD PTR [rsp+0x18]
  404dc2:	add    DWORD PTR [rsp+0xc],0x1
  404dc7:	vaddss xmm0,xmm0,DWORD PTR [rsi]
  404dcb:	vmovss DWORD PTR [rsi],xmm0
  404dcf:	mov    esi,DWORD PTR [rsp+0x2c]
  404dd3:	test   esi,esi
  404dd5:	je     404edd <_start@@Base+0x1abd>
  404ddb:	mov    rbx,rax
  404dde:	jmp    404d16 <_start@@Base+0x18f6>
  404de3:	nop    DWORD PTR [rax+rax*1+0x0]
  404de8:	mov    rdx,rbp
  404deb:	mov    ecx,0x17
  404df0:	mov    rsi,rbx
  404df3:	mov    rdi,r12
  404df6:	call   416820 <flatcc_json_parser_set_error@@Base>
  404dfb:	mov    rbp,rax
  404dfe:	jmp    404d58 <_start@@Base+0x1938>
  404e03:	nop    DWORD PTR [rax+rax*1+0x0]
  404e08:	test   rdx,rdx
  404e0b:	js     404e77 <_start@@Base+0x1a57>
  404e0d:	vxorps xmm0,xmm0,xmm0
  404e11:	vcvtsi2ss xmm0,xmm0,rdx
  404e16:	jmp    404dbd <_start@@Base+0x199d>
  404e18:	add    rbx,0x1
  404e1c:	mov    rax,rdx
  404e1f:	mov    DWORD PTR [rdi+0x14],0x0
  404e26:	sub    rax,rbx
  404e29:	cmp    rax,0x1
  404e2d:	jle    404e3a <_start@@Base+0x1a1a>
  404e2f:	cmp    BYTE PTR [rbx],0x20
  404e32:	jg     404e4b <_start@@Base+0x1a2b>
  404e34:	je     404eca <_start@@Base+0x1aaa>
  404e3a:	mov    rsi,rbx
  404e3d:	mov    rdx,rbp
  404e40:	mov    rdi,r12
  404e43:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  404e48:	mov    rbx,rax
  404e4b:	cmp    rbp,rbx
  404e4e:	jne    404cfb <_start@@Base+0x18db>
  404e54:	jmp    404d58 <_start@@Base+0x1938>
  404e59:	mov    rcx,rdx
  404e5c:	vxorps xmm0,xmm0,xmm0
  404e60:	shr    rcx,1
  404e63:	and    edx,0x1
  404e66:	or     rcx,rdx
  404e69:	vcvtsi2ss xmm0,xmm0,rcx
  404e6e:	vaddss xmm0,xmm0,xmm0
  404e72:	jmp    404db5 <_start@@Base+0x1995>
  404e77:	mov    rcx,rdx
  404e7a:	vxorps xmm0,xmm0,xmm0
  404e7e:	shr    rcx,1
  404e81:	and    edx,0x1
  404e84:	or     rcx,rdx
  404e87:	vcvtsi2ss xmm0,xmm0,rcx
  404e8c:	vaddss xmm0,xmm0,xmm0
  404e90:	jmp    404dbd <_start@@Base+0x199d>
  404e95:	mov    ecx,DWORD PTR [rdi+0x14]
  404e98:	test   ecx,ecx
  404e9a:	je     404e3a <_start@@Base+0x1a1a>
  404e9c:	jmp    404d58 <_start@@Base+0x1938>
  404ea1:	nop    DWORD PTR [rax+0x0]
  404ea8:	mov    ecx,0x5
  404ead:	call   416820 <flatcc_json_parser_set_error@@Base>
  404eb2:	mov    r9d,DWORD PTR [r12+0x14]
  404eb7:	mov    rbx,rax
  404eba:	test   r9d,r9d
  404ebd:	jne    404e4b <_start@@Base+0x1a2b>
  404ebf:	mov    rax,rbp
  404ec2:	sub    rax,rbx
  404ec5:	jmp    404e29 <_start@@Base+0x1a09>
  404eca:	cmp    BYTE PTR [rbx+0x1],0x20
  404ece:	jle    404e3a <_start@@Base+0x1a1a>
  404ed4:	add    rbx,0x1
  404ed8:	jmp    404e4b <_start@@Base+0x1a2b>
  404edd:	mov    rbp,rax
  404ee0:	jmp    404d58 <_start@@Base+0x1938>
  404ee5:	mov    rdx,rbp
  404ee8:	mov    ecx,0xe
  404eed:	mov    rsi,rax
  404ef0:	mov    rdi,r12
  404ef3:	call   416820 <flatcc_json_parser_set_error@@Base>
  404ef8:	mov    rbp,rax
  404efb:	jmp    404d58 <_start@@Base+0x1938>
  404f00:	call   403080 <__stack_chk_fail@plt>
  404f05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404f10:	push   r15
  404f12:	push   r14
  404f14:	push   r13
  404f16:	push   r12
  404f18:	mov    r12,rdi
  404f1b:	push   rbp
  404f1c:	push   rbx
  404f1d:	mov    rbx,rdx
  404f20:	mov    rbp,rsi
  404f23:	sub    rsp,0x58
  404f27:	mov    BYTE PTR [r8],0x0
  404f2b:	mov    rdx,QWORD PTR fs:0x28
  404f34:	mov    QWORD PTR [rsp+0x48],rdx
  404f39:	xor    edx,edx
  404f3b:	cmp    rsi,rbx
  404f3e:	mov    QWORD PTR [rsp+0x18],rcx
  404f43:	mov    QWORD PTR [rsp+0x20],r8
  404f48:	je     4050c5 <_start@@Base+0x1ca5>
  404f4e:	movzx  eax,BYTE PTR [rsi]
  404f51:	cmp    al,0x22
  404f53:	je     405087 <_start@@Base+0x1c67>
  404f59:	cmp    al,0x2e
  404f5b:	je     4050d8 <_start@@Base+0x1cb8>
  404f61:	mov    DWORD PTR [rdi+0x14],0x1
  404f68:	lea    rax,[rsp+0x38]
  404f6d:	lea    r15,[rsp+0x3c]
  404f72:	lea    r14,[rsp+0x40]
  404f77:	mov    DWORD PTR [rsp+0x10],0x0
  404f7f:	mov    BYTE PTR [rsp+0x17],0x0
  404f84:	mov    QWORD PTR [rsp+0x8],rax
  404f89:	mov    r13,QWORD PTR [rsp+0x18]
  404f8e:	mov    rax,QWORD PTR [r13+0x0]
  404f92:	jmp    404fae <_start@@Base+0x1b8e>
  404f94:	nop    DWORD PTR [rax+0x0]
  404f98:	cmp    rbp,rax
  404f9b:	jne    404ff0 <_start@@Base+0x1bd0>
  404f9d:	add    r13,0x8
  404fa1:	mov    rax,QWORD PTR [r13+0x0]
  404fa5:	test   rax,rax
  404fa8:	je     405040 <_start@@Base+0x1c20>
  404fae:	mov    r9,r15
  404fb1:	mov    r8,r14
  404fb4:	mov    rcx,QWORD PTR [rsp+0x8]
  404fb9:	mov    rdx,rbx
  404fbc:	mov    rsi,rbp
  404fbf:	mov    rdi,r12
  404fc2:	call   rax
  404fc4:	cmp    rbx,rax
  404fc7:	jne    404f98 <_start@@Base+0x1b78>
  404fc9:	mov    rsi,QWORD PTR [rsp+0x48]
  404fce:	xor    rsi,QWORD PTR fs:0x28
  404fd7:	mov    rax,rbx
  404fda:	jne    405129 <_start@@Base+0x1d09>
  404fe0:	add    rsp,0x58
  404fe4:	pop    rbx
  404fe5:	pop    rbp
  404fe6:	pop    r12
  404fe8:	pop    r13
  404fea:	pop    r14
  404fec:	pop    r15
  404fee:	ret    
  404fef:	nop
  404ff0:	mov    r8,rax
  404ff3:	mov    eax,DWORD PTR [rsp+0x10]
  404ff7:	test   eax,eax
  404ff9:	je     405008 <_start@@Base+0x1be8>
  404ffb:	mov    edi,DWORD PTR [r12+0x14]
  405000:	test   edi,edi
  405002:	jne    40510e <_start@@Base+0x1cee>
  405008:	mov    esi,DWORD PTR [rsp+0x38]
  40500c:	test   esi,esi
  40500e:	jne    405060 <_start@@Base+0x1c40>
  405010:	cmp    QWORD PTR [rsp+0x40],0x0
  405016:	setne  BYTE PTR [rsp+0x17]
  40501b:	mov    rax,QWORD PTR [rsp+0x20]
  405020:	movzx  ecx,BYTE PTR [rsp+0x17]
  405025:	add    DWORD PTR [rsp+0x10],0x1
  40502a:	add    BYTE PTR [rax],cl
  40502c:	mov    ecx,DWORD PTR [rsp+0x3c]
  405030:	test   ecx,ecx
  405032:	je     405106 <_start@@Base+0x1ce6>
  405038:	mov    rbp,r8
  40503b:	jmp    404f89 <_start@@Base+0x1b69>
  405040:	mov    rdx,rbx
  405043:	mov    ecx,0x17
  405048:	mov    rsi,rbp
  40504b:	mov    rdi,r12
  40504e:	call   416820 <flatcc_json_parser_set_error@@Base>
  405053:	mov    rbx,rax
  405056:	jmp    404fc9 <_start@@Base+0x1ba9>
  40505b:	nop    DWORD PTR [rax+rax*1+0x0]
  405060:	mov    rsi,r8
  405063:	mov    ecx,0x8
  405068:	mov    rdx,rbx
  40506b:	mov    rdi,r12
  40506e:	mov    QWORD PTR [rsp+0x28],r8
  405073:	call   416820 <flatcc_json_parser_set_error@@Base>
  405078:	cmp    rbx,rax
  40507b:	mov    r8,QWORD PTR [rsp+0x28]
  405080:	jne    40501b <_start@@Base+0x1bfb>
  405082:	jmp    404fc9 <_start@@Base+0x1ba9>
  405087:	add    rbp,0x1
  40508b:	mov    rax,rbx
  40508e:	mov    DWORD PTR [rdi+0x14],0x0
  405095:	sub    rax,rbp
  405098:	cmp    rax,0x1
  40509c:	jle    4050a6 <_start@@Base+0x1c86>
  40509e:	cmp    BYTE PTR [rbp+0x0],0x20
  4050a2:	jg     4050b7 <_start@@Base+0x1c97>
  4050a4:	je     4050fa <_start@@Base+0x1cda>
  4050a6:	mov    rsi,rbp
  4050a9:	mov    rdx,rbx
  4050ac:	mov    rdi,r12
  4050af:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4050b4:	mov    rbp,rax
  4050b7:	cmp    rbx,rbp
  4050ba:	jne    404f68 <_start@@Base+0x1b48>
  4050c0:	jmp    404fc9 <_start@@Base+0x1ba9>
  4050c5:	mov    edx,DWORD PTR [rdi+0x14]
  4050c8:	test   edx,edx
  4050ca:	je     4050a6 <_start@@Base+0x1c86>
  4050cc:	jmp    404fc9 <_start@@Base+0x1ba9>
  4050d1:	nop    DWORD PTR [rax+0x0]
  4050d8:	mov    ecx,0x5
  4050dd:	mov    rdx,rbx
  4050e0:	call   416820 <flatcc_json_parser_set_error@@Base>
  4050e5:	mov    r8d,DWORD PTR [r12+0x14]
  4050ea:	mov    rbp,rax
  4050ed:	test   r8d,r8d
  4050f0:	jne    4050b7 <_start@@Base+0x1c97>
  4050f2:	mov    rax,rbx
  4050f5:	sub    rax,rbp
  4050f8:	jmp    405098 <_start@@Base+0x1c78>
  4050fa:	cmp    BYTE PTR [rbp+0x1],0x20
  4050fe:	jle    4050a6 <_start@@Base+0x1c86>
  405100:	add    rbp,0x1
  405104:	jmp    4050b7 <_start@@Base+0x1c97>
  405106:	mov    rbx,r8
  405109:	jmp    404fc9 <_start@@Base+0x1ba9>
  40510e:	mov    rdx,rbx
  405111:	mov    ecx,0xe
  405116:	mov    rsi,r8
  405119:	mov    rdi,r12
  40511c:	call   416820 <flatcc_json_parser_set_error@@Base>
  405121:	mov    rbx,rax
  405124:	jmp    404fc9 <_start@@Base+0x1ba9>
  405129:	call   403080 <__stack_chk_fail@plt>
  40512e:	xchg   ax,ax
  405130:	push   r15
  405132:	push   r14
  405134:	xor    r10d,r10d
  405137:	push   r13
  405139:	push   r12
  40513b:	mov    r12,rdi
  40513e:	push   rbp
  40513f:	push   rbx
  405140:	mov    rbx,rdx
  405143:	mov    rbp,rsi
  405146:	sub    rsp,0x58
  40514a:	mov    WORD PTR [r8],r10w
  40514e:	mov    rdx,QWORD PTR fs:0x28
  405157:	mov    QWORD PTR [rsp+0x48],rdx
  40515c:	xor    edx,edx
  40515e:	cmp    rsi,rbx
  405161:	mov    QWORD PTR [rsp+0x10],rcx
  405166:	mov    QWORD PTR [rsp+0x20],r8
  40516b:	je     405300 <_start@@Base+0x1ee0>
  405171:	movzx  eax,BYTE PTR [rsi]
  405174:	cmp    al,0x22
  405176:	je     4052c2 <_start@@Base+0x1ea2>
  40517c:	cmp    al,0x2e
  40517e:	je     405310 <_start@@Base+0x1ef0>
  405184:	mov    DWORD PTR [rdi+0x14],0x1
  40518b:	lea    rax,[rsp+0x38]
  405190:	xor    r8d,r8d
  405193:	lea    r15,[rsp+0x3c]
  405198:	lea    r14,[rsp+0x40]
  40519d:	mov    DWORD PTR [rsp+0x18],0x0
  4051a5:	mov    WORD PTR [rsp+0x1e],r8w
  4051ab:	mov    QWORD PTR [rsp+0x8],rax
  4051b0:	mov    r13,QWORD PTR [rsp+0x10]
  4051b5:	mov    rax,QWORD PTR [r13+0x0]
  4051b9:	jmp    4051d6 <_start@@Base+0x1db6>
  4051bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4051c0:	cmp    rbp,rax
  4051c3:	jne    405220 <_start@@Base+0x1e00>
  4051c5:	add    r13,0x8
  4051c9:	mov    rax,QWORD PTR [r13+0x0]
  4051cd:	test   rax,rax
  4051d0:	je     405280 <_start@@Base+0x1e60>
  4051d6:	mov    r9,r15
  4051d9:	mov    r8,r14
  4051dc:	mov    rcx,QWORD PTR [rsp+0x8]
  4051e1:	mov    rdx,rbx
  4051e4:	mov    rsi,rbp
  4051e7:	mov    rdi,r12
  4051ea:	call   rax
  4051ec:	cmp    rbx,rax
  4051ef:	jne    4051c0 <_start@@Base+0x1da0>
  4051f1:	mov    rsi,QWORD PTR [rsp+0x48]
  4051f6:	xor    rsi,QWORD PTR fs:0x28
  4051ff:	mov    rax,rbx
  405202:	jne    405361 <_start@@Base+0x1f41>
  405208:	add    rsp,0x58
  40520c:	pop    rbx
  40520d:	pop    rbp
  40520e:	pop    r12
  405210:	pop    r13
  405212:	pop    r14
  405214:	pop    r15
  405216:	ret    
  405217:	nop    WORD PTR [rax+rax*1+0x0]
  405220:	mov    r8,rax
  405223:	mov    eax,DWORD PTR [rsp+0x18]
  405227:	test   eax,eax
  405229:	je     405238 <_start@@Base+0x1e18>
  40522b:	mov    edi,DWORD PTR [r12+0x14]
  405230:	test   edi,edi
  405232:	jne    405346 <_start@@Base+0x1f26>
  405238:	mov    esi,DWORD PTR [rsp+0x38]
  40523c:	mov    ecx,0x8
  405241:	test   esi,esi
  405243:	jne    4052a0 <_start@@Base+0x1e80>
  405245:	mov    rax,QWORD PTR [rsp+0x40]
  40524a:	cmp    rax,0xffff
  405250:	ja     40529b <_start@@Base+0x1e7b>
  405252:	mov    WORD PTR [rsp+0x1e],ax
  405257:	mov    rax,QWORD PTR [rsp+0x20]
  40525c:	movzx  ecx,WORD PTR [rsp+0x1e]
  405261:	add    DWORD PTR [rsp+0x18],0x1
  405266:	add    WORD PTR [rax],cx
  405269:	mov    ecx,DWORD PTR [rsp+0x3c]
  40526d:	test   ecx,ecx
  40526f:	je     40533e <_start@@Base+0x1f1e>
  405275:	mov    rbp,r8
  405278:	jmp    4051b0 <_start@@Base+0x1d90>
  40527d:	nop    DWORD PTR [rax]
  405280:	mov    rdx,rbx
  405283:	mov    ecx,0x17
  405288:	mov    rsi,rbp
  40528b:	mov    rdi,r12
  40528e:	call   416820 <flatcc_json_parser_set_error@@Base>
  405293:	mov    rbx,rax
  405296:	jmp    4051f1 <_start@@Base+0x1dd1>
  40529b:	mov    ecx,0x7
  4052a0:	mov    rsi,r8
  4052a3:	mov    rdx,rbx
  4052a6:	mov    rdi,r12
  4052a9:	mov    QWORD PTR [rsp+0x28],r8
  4052ae:	call   416820 <flatcc_json_parser_set_error@@Base>
  4052b3:	cmp    rbx,rax
  4052b6:	mov    r8,QWORD PTR [rsp+0x28]
  4052bb:	jne    405257 <_start@@Base+0x1e37>
  4052bd:	jmp    4051f1 <_start@@Base+0x1dd1>
  4052c2:	add    rbp,0x1
  4052c6:	mov    rax,rbx
  4052c9:	mov    DWORD PTR [rdi+0x14],0x0
  4052d0:	sub    rax,rbp
  4052d3:	cmp    rax,0x1
  4052d7:	jle    4052e1 <_start@@Base+0x1ec1>
  4052d9:	cmp    BYTE PTR [rbp+0x0],0x20
  4052dd:	jg     4052f2 <_start@@Base+0x1ed2>
  4052df:	je     405332 <_start@@Base+0x1f12>
  4052e1:	mov    rsi,rbp
  4052e4:	mov    rdx,rbx
  4052e7:	mov    rdi,r12
  4052ea:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4052ef:	mov    rbp,rax
  4052f2:	cmp    rbx,rbp
  4052f5:	jne    40518b <_start@@Base+0x1d6b>
  4052fb:	jmp    4051f1 <_start@@Base+0x1dd1>
  405300:	mov    edx,DWORD PTR [rdi+0x14]
  405303:	test   edx,edx
  405305:	je     4052e1 <_start@@Base+0x1ec1>
  405307:	jmp    4051f1 <_start@@Base+0x1dd1>
  40530c:	nop    DWORD PTR [rax+0x0]
  405310:	mov    ecx,0x5
  405315:	mov    rdx,rbx
  405318:	call   416820 <flatcc_json_parser_set_error@@Base>
  40531d:	mov    r9d,DWORD PTR [r12+0x14]
  405322:	mov    rbp,rax
  405325:	test   r9d,r9d
  405328:	jne    4052f2 <_start@@Base+0x1ed2>
  40532a:	mov    rax,rbx
  40532d:	sub    rax,rbp
  405330:	jmp    4052d3 <_start@@Base+0x1eb3>
  405332:	cmp    BYTE PTR [rbp+0x1],0x20
  405336:	jle    4052e1 <_start@@Base+0x1ec1>
  405338:	add    rbp,0x1
  40533c:	jmp    4052f2 <_start@@Base+0x1ed2>
  40533e:	mov    rbx,r8
  405341:	jmp    4051f1 <_start@@Base+0x1dd1>
  405346:	mov    rdx,rbx
  405349:	mov    ecx,0xe
  40534e:	mov    rsi,r8
  405351:	mov    rdi,r12
  405354:	call   416820 <flatcc_json_parser_set_error@@Base>
  405359:	mov    rbx,rax
  40535c:	jmp    4051f1 <_start@@Base+0x1dd1>
  405361:	call   403080 <__stack_chk_fail@plt>
  405366:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405370:	push   r15
  405372:	push   r14
  405374:	push   r13
  405376:	push   r12
  405378:	mov    r12,rdi
  40537b:	push   rbp
  40537c:	push   rbx
  40537d:	mov    rbp,rsi
  405380:	mov    rbx,rdx
  405383:	sub    rsp,0x58
  405387:	mov    DWORD PTR [r8],0x0
  40538e:	mov    rsi,QWORD PTR fs:0x28
  405397:	mov    QWORD PTR [rsp+0x48],rsi
  40539c:	xor    esi,esi
  40539e:	cmp    rbp,rdx
  4053a1:	mov    QWORD PTR [rsp+0x18],rcx
  4053a6:	mov    QWORD PTR [rsp+0x20],r8
  4053ab:	je     405553 <_start@@Base+0x2133>
  4053b1:	movzx  eax,BYTE PTR [rbp+0x0]
  4053b5:	cmp    al,0x22
  4053b7:	je     405515 <_start@@Base+0x20f5>
  4053bd:	cmp    al,0x2e
  4053bf:	je     405560 <_start@@Base+0x2140>
  4053c5:	mov    DWORD PTR [rdi+0x14],0x1
  4053cc:	lea    rax,[rsp+0x38]
  4053d1:	lea    r15,[rsp+0x3c]
  4053d6:	lea    r14,[rsp+0x40]
  4053db:	mov    DWORD PTR [rsp+0x10],0x0
  4053e3:	mov    DWORD PTR [rsp+0x14],0x0
  4053eb:	mov    QWORD PTR [rsp+0x8],rax
  4053f0:	mov    r13,QWORD PTR [rsp+0x18]
  4053f5:	mov    rax,QWORD PTR [r13+0x0]
  4053f9:	jmp    405416 <_start@@Base+0x1ff6>
  4053fb:	nop    DWORD PTR [rax+rax*1+0x0]
  405400:	cmp    rbp,rax
  405403:	jne    405460 <_start@@Base+0x2040>
  405405:	add    r13,0x8
  405409:	mov    rax,QWORD PTR [r13+0x0]
  40540d:	test   rax,rax
  405410:	je     4054c0 <_start@@Base+0x20a0>
  405416:	mov    r9,r15
  405419:	mov    r8,r14
  40541c:	mov    rcx,QWORD PTR [rsp+0x8]
  405421:	mov    rdx,rbx
  405424:	mov    rsi,rbp
  405427:	mov    rdi,r12
  40542a:	call   rax
  40542c:	cmp    rbx,rax
  40542f:	jne    405400 <_start@@Base+0x1fe0>
  405431:	mov    rdi,QWORD PTR [rsp+0x48]
  405436:	xor    rdi,QWORD PTR fs:0x28
  40543f:	mov    rax,rbx
  405442:	jne    4055b1 <_start@@Base+0x2191>
  405448:	add    rsp,0x58
  40544c:	pop    rbx
  40544d:	pop    rbp
  40544e:	pop    r12
  405450:	pop    r13
  405452:	pop    r14
  405454:	pop    r15
  405456:	ret    
  405457:	nop    WORD PTR [rax+rax*1+0x0]
  405460:	mov    r8,rax
  405463:	mov    eax,DWORD PTR [rsp+0x10]
  405467:	test   eax,eax
  405469:	je     405478 <_start@@Base+0x2058>
  40546b:	mov    edi,DWORD PTR [r12+0x14]
  405470:	test   edi,edi
  405472:	jne    405596 <_start@@Base+0x2176>
  405478:	mov    esi,DWORD PTR [rsp+0x38]
  40547c:	mov    rax,QWORD PTR [rsp+0x40]
  405481:	test   esi,esi
  405483:	je     4054e0 <_start@@Base+0x20c0>
  405485:	mov    edx,0x80000000
  40548a:	mov    ecx,0x8
  40548f:	cmp    rax,rdx
  405492:	ja     4054f3 <_start@@Base+0x20d3>
  405494:	neg    eax
  405496:	mov    DWORD PTR [rsp+0x14],eax
  40549a:	mov    rax,QWORD PTR [rsp+0x20]
  40549f:	mov    ecx,DWORD PTR [rsp+0x14]
  4054a3:	add    DWORD PTR [rsp+0x10],0x1
  4054a8:	add    DWORD PTR [rax],ecx
  4054aa:	mov    ecx,DWORD PTR [rsp+0x3c]
  4054ae:	test   ecx,ecx
  4054b0:	je     40558e <_start@@Base+0x216e>
  4054b6:	mov    rbp,r8
  4054b9:	jmp    4053f0 <_start@@Base+0x1fd0>
  4054be:	xchg   ax,ax
  4054c0:	mov    rdx,rbx
  4054c3:	mov    ecx,0x17
  4054c8:	mov    rsi,rbp
  4054cb:	mov    rdi,r12
  4054ce:	call   416820 <flatcc_json_parser_set_error@@Base>
  4054d3:	mov    rbx,rax
  4054d6:	jmp    405431 <_start@@Base+0x2011>
  4054db:	nop    DWORD PTR [rax+rax*1+0x0]
  4054e0:	cmp    rax,0x7fffffff
  4054e6:	ja     4054ee <_start@@Base+0x20ce>
  4054e8:	mov    DWORD PTR [rsp+0x14],eax
  4054ec:	jmp    40549a <_start@@Base+0x207a>
  4054ee:	mov    ecx,0x7
  4054f3:	mov    rsi,r8
  4054f6:	mov    rdx,rbx
  4054f9:	mov    rdi,r12
  4054fc:	mov    QWORD PTR [rsp+0x28],r8
  405501:	call   416820 <flatcc_json_parser_set_error@@Base>
  405506:	cmp    rbx,rax
  405509:	mov    r8,QWORD PTR [rsp+0x28]
  40550e:	jne    40549a <_start@@Base+0x207a>
  405510:	jmp    405431 <_start@@Base+0x2011>
  405515:	add    rbp,0x1
  405519:	mov    rax,rdx
  40551c:	mov    DWORD PTR [rdi+0x14],0x0
  405523:	sub    rax,rbp
  405526:	cmp    rax,0x1
  40552a:	jle    405534 <_start@@Base+0x2114>
  40552c:	cmp    BYTE PTR [rbp+0x0],0x20
  405530:	jg     405545 <_start@@Base+0x2125>
  405532:	je     405582 <_start@@Base+0x2162>
  405534:	mov    rsi,rbp
  405537:	mov    rdx,rbx
  40553a:	mov    rdi,r12
  40553d:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  405542:	mov    rbp,rax
  405545:	cmp    rbx,rbp
  405548:	jne    4053cc <_start@@Base+0x1fac>
  40554e:	jmp    405431 <_start@@Base+0x2011>
  405553:	mov    edx,DWORD PTR [rdi+0x14]
  405556:	test   edx,edx
  405558:	jne    405431 <_start@@Base+0x2011>
  40555e:	jmp    405534 <_start@@Base+0x2114>
  405560:	mov    rsi,rbp
  405563:	mov    ecx,0x5
  405568:	call   416820 <flatcc_json_parser_set_error@@Base>
  40556d:	mov    r8d,DWORD PTR [r12+0x14]
  405572:	mov    rbp,rax
  405575:	test   r8d,r8d
  405578:	jne    405545 <_start@@Base+0x2125>
  40557a:	mov    rax,rbx
  40557d:	sub    rax,rbp
  405580:	jmp    405526 <_start@@Base+0x2106>
  405582:	cmp    BYTE PTR [rbp+0x1],0x20
  405586:	jle    405534 <_start@@Base+0x2114>
  405588:	add    rbp,0x1
  40558c:	jmp    405545 <_start@@Base+0x2125>
  40558e:	mov    rbx,r8
  405591:	jmp    405431 <_start@@Base+0x2011>
  405596:	mov    rdx,rbx
  405599:	mov    ecx,0xe
  40559e:	mov    rsi,r8
  4055a1:	mov    rdi,r12
  4055a4:	call   416820 <flatcc_json_parser_set_error@@Base>
  4055a9:	mov    rbx,rax
  4055ac:	jmp    405431 <_start@@Base+0x2011>
  4055b1:	call   403080 <__stack_chk_fail@plt>
  4055b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4055c0:	push   r15
  4055c2:	push   r14
  4055c4:	push   r13
  4055c6:	push   r12
  4055c8:	mov    r12,rdi
  4055cb:	push   rbp
  4055cc:	push   rbx
  4055cd:	mov    rbx,rdx
  4055d0:	mov    rbp,rsi
  4055d3:	sub    rsp,0x58
  4055d7:	mov    BYTE PTR [r8],0x0
  4055db:	mov    rdx,QWORD PTR fs:0x28
  4055e4:	mov    QWORD PTR [rsp+0x48],rdx
  4055e9:	xor    edx,edx
  4055eb:	cmp    rsi,rbx
  4055ee:	mov    QWORD PTR [rsp+0x18],rcx
  4055f3:	mov    QWORD PTR [rsp+0x20],r8
  4055f8:	je     405791 <_start@@Base+0x2371>
  4055fe:	movzx  eax,BYTE PTR [rsi]
  405601:	cmp    al,0x22
  405603:	je     405753 <_start@@Base+0x2333>
  405609:	cmp    al,0x2e
  40560b:	je     40579e <_start@@Base+0x237e>
  405611:	mov    DWORD PTR [rdi+0x14],0x1
  405618:	lea    rax,[rsp+0x38]
  40561d:	lea    r15,[rsp+0x3c]
  405622:	lea    r14,[rsp+0x40]
  405627:	mov    DWORD PTR [rsp+0x10],0x0
  40562f:	mov    BYTE PTR [rsp+0x17],0x0
  405634:	mov    QWORD PTR [rsp+0x8],rax
  405639:	mov    r13,QWORD PTR [rsp+0x18]
  40563e:	mov    rax,QWORD PTR [r13+0x0]
  405642:	jmp    40565e <_start@@Base+0x223e>
  405644:	nop    DWORD PTR [rax+0x0]
  405648:	cmp    rbp,rax
  40564b:	jne    4056a0 <_start@@Base+0x2280>
  40564d:	add    r13,0x8
  405651:	mov    rax,QWORD PTR [r13+0x0]
  405655:	test   rax,rax
  405658:	je     405700 <_start@@Base+0x22e0>
  40565e:	mov    r9,r15
  405661:	mov    r8,r14
  405664:	mov    rcx,QWORD PTR [rsp+0x8]
  405669:	mov    rdx,rbx
  40566c:	mov    rsi,rbp
  40566f:	mov    rdi,r12
  405672:	call   rax
  405674:	cmp    rbx,rax
  405677:	jne    405648 <_start@@Base+0x2228>
  405679:	mov    rsi,QWORD PTR [rsp+0x48]
  40567e:	xor    rsi,QWORD PTR fs:0x28
  405687:	mov    rax,rbx
  40568a:	jne    4057ef <_start@@Base+0x23cf>
  405690:	add    rsp,0x58
  405694:	pop    rbx
  405695:	pop    rbp
  405696:	pop    r12
  405698:	pop    r13
  40569a:	pop    r14
  40569c:	pop    r15
  40569e:	ret    
  40569f:	nop
  4056a0:	mov    r8,rax
  4056a3:	mov    eax,DWORD PTR [rsp+0x10]
  4056a7:	test   eax,eax
  4056a9:	je     4056b8 <_start@@Base+0x2298>
  4056ab:	mov    edi,DWORD PTR [r12+0x14]
  4056b0:	test   edi,edi
  4056b2:	jne    4057d4 <_start@@Base+0x23b4>
  4056b8:	mov    esi,DWORD PTR [rsp+0x38]
  4056bc:	mov    rax,QWORD PTR [rsp+0x40]
  4056c1:	test   esi,esi
  4056c3:	je     405720 <_start@@Base+0x2300>
  4056c5:	cmp    rax,0x80
  4056cb:	mov    ecx,0x8
  4056d0:	ja     405731 <_start@@Base+0x2311>
  4056d2:	neg    eax
  4056d4:	mov    BYTE PTR [rsp+0x17],al
  4056d8:	mov    rax,QWORD PTR [rsp+0x20]
  4056dd:	movzx  ecx,BYTE PTR [rsp+0x17]
  4056e2:	add    DWORD PTR [rsp+0x10],0x1
  4056e7:	add    BYTE PTR [rax],cl
  4056e9:	mov    ecx,DWORD PTR [rsp+0x3c]
  4056ed:	test   ecx,ecx
  4056ef:	je     4057cc <_start@@Base+0x23ac>
  4056f5:	mov    rbp,r8
  4056f8:	jmp    405639 <_start@@Base+0x2219>
  4056fd:	nop    DWORD PTR [rax]
  405700:	mov    rdx,rbx
  405703:	mov    ecx,0x17
  405708:	mov    rsi,rbp
  40570b:	mov    rdi,r12
  40570e:	call   416820 <flatcc_json_parser_set_error@@Base>
  405713:	mov    rbx,rax
  405716:	jmp    405679 <_start@@Base+0x2259>
  40571b:	nop    DWORD PTR [rax+rax*1+0x0]
  405720:	cmp    rax,0x7f
  405724:	ja     40572c <_start@@Base+0x230c>
  405726:	mov    BYTE PTR [rsp+0x17],al
  40572a:	jmp    4056d8 <_start@@Base+0x22b8>
  40572c:	mov    ecx,0x7
  405731:	mov    rsi,r8
  405734:	mov    rdx,rbx
  405737:	mov    rdi,r12
  40573a:	mov    QWORD PTR [rsp+0x28],r8
  40573f:	call   416820 <flatcc_json_parser_set_error@@Base>
  405744:	cmp    rbx,rax
  405747:	mov    r8,QWORD PTR [rsp+0x28]
  40574c:	jne    4056d8 <_start@@Base+0x22b8>
  40574e:	jmp    405679 <_start@@Base+0x2259>
  405753:	add    rbp,0x1
  405757:	mov    rax,rbx
  40575a:	mov    DWORD PTR [rdi+0x14],0x0
  405761:	sub    rax,rbp
  405764:	cmp    rax,0x1
  405768:	jle    405772 <_start@@Base+0x2352>
  40576a:	cmp    BYTE PTR [rbp+0x0],0x20
  40576e:	jg     405783 <_start@@Base+0x2363>
  405770:	je     4057c0 <_start@@Base+0x23a0>
  405772:	mov    rsi,rbp
  405775:	mov    rdx,rbx
  405778:	mov    rdi,r12
  40577b:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  405780:	mov    rbp,rax
  405783:	cmp    rbx,rbp
  405786:	jne    405618 <_start@@Base+0x21f8>
  40578c:	jmp    405679 <_start@@Base+0x2259>
  405791:	mov    edx,DWORD PTR [rdi+0x14]
  405794:	test   edx,edx
  405796:	jne    405679 <_start@@Base+0x2259>
  40579c:	jmp    405772 <_start@@Base+0x2352>
  40579e:	mov    ecx,0x5
  4057a3:	mov    rdx,rbx
  4057a6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4057ab:	mov    r8d,DWORD PTR [r12+0x14]
  4057b0:	mov    rbp,rax
  4057b3:	test   r8d,r8d
  4057b6:	jne    405783 <_start@@Base+0x2363>
  4057b8:	mov    rax,rbx
  4057bb:	sub    rax,rbp
  4057be:	jmp    405764 <_start@@Base+0x2344>
  4057c0:	cmp    BYTE PTR [rbp+0x1],0x20
  4057c4:	jle    405772 <_start@@Base+0x2352>
  4057c6:	add    rbp,0x1
  4057ca:	jmp    405783 <_start@@Base+0x2363>
  4057cc:	mov    rbx,r8
  4057cf:	jmp    405679 <_start@@Base+0x2259>
  4057d4:	mov    rdx,rbx
  4057d7:	mov    ecx,0xe
  4057dc:	mov    rsi,r8
  4057df:	mov    rdi,r12
  4057e2:	call   416820 <flatcc_json_parser_set_error@@Base>
  4057e7:	mov    rbx,rax
  4057ea:	jmp    405679 <_start@@Base+0x2259>
  4057ef:	call   403080 <__stack_chk_fail@plt>
  4057f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4057ff:	nop
  405800:	push   r15
  405802:	push   r14
  405804:	push   r13
  405806:	push   r12
  405808:	mov    r12,rdi
  40580b:	push   rbp
  40580c:	push   rbx
  40580d:	mov    rbx,rsi
  405810:	mov    rbp,rdx
  405813:	sub    rsp,0x58
  405817:	mov    QWORD PTR [r8],0x0
  40581e:	mov    rsi,QWORD PTR fs:0x28
  405827:	mov    QWORD PTR [rsp+0x48],rsi
  40582c:	xor    esi,esi
  40582e:	cmp    rbx,rdx
  405831:	mov    QWORD PTR [rsp+0x18],rcx
  405836:	mov    QWORD PTR [rsp+0x20],r8
  40583b:	je     4059f0 <_start@@Base+0x25d0>
  405841:	movzx  eax,BYTE PTR [rbx]
  405844:	cmp    al,0x22
  405846:	je     4059b3 <_start@@Base+0x2593>
  40584c:	cmp    al,0x2e
  40584e:	je     405a00 <_start@@Base+0x25e0>
  405854:	mov    DWORD PTR [rdi+0x14],0x1
  40585b:	lea    rax,[rsp+0x38]
  405860:	lea    r15,[rsp+0x3c]
  405865:	lea    r14,[rsp+0x40]
  40586a:	mov    DWORD PTR [rsp+0xc],0x0
  405872:	mov    QWORD PTR [rsp+0x10],0x0
  40587b:	mov    QWORD PTR [rsp],rax
  40587f:	mov    r13,QWORD PTR [rsp+0x18]
  405884:	mov    rax,QWORD PTR [r13+0x0]
  405888:	jmp    4058a6 <_start@@Base+0x2486>
  40588a:	nop    WORD PTR [rax+rax*1+0x0]
  405890:	cmp    rbx,rax
  405893:	jne    4058f0 <_start@@Base+0x24d0>
  405895:	add    r13,0x8
  405899:	mov    rax,QWORD PTR [r13+0x0]
  40589d:	test   rax,rax
  4058a0:	je     405960 <_start@@Base+0x2540>
  4058a6:	mov    r9,r15
  4058a9:	mov    r8,r14
  4058ac:	mov    rcx,QWORD PTR [rsp]
  4058b0:	mov    rdx,rbp
  4058b3:	mov    rsi,rbx
  4058b6:	mov    rdi,r12
  4058b9:	call   rax
  4058bb:	cmp    rbp,rax
  4058be:	jne    405890 <_start@@Base+0x2470>
  4058c0:	mov    rdi,QWORD PTR [rsp+0x48]
  4058c5:	xor    rdi,QWORD PTR fs:0x28
  4058ce:	mov    rax,rbp
  4058d1:	jne    405a51 <_start@@Base+0x2631>
  4058d7:	add    rsp,0x58
  4058db:	pop    rbx
  4058dc:	pop    rbp
  4058dd:	pop    r12
  4058df:	pop    r13
  4058e1:	pop    r14
  4058e3:	pop    r15
  4058e5:	ret    
  4058e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4058f0:	mov    r8,rax
  4058f3:	mov    eax,DWORD PTR [rsp+0xc]
  4058f7:	test   eax,eax
  4058f9:	je     405908 <_start@@Base+0x24e8>
  4058fb:	mov    edi,DWORD PTR [r12+0x14]
  405900:	test   edi,edi
  405902:	jne    405a36 <_start@@Base+0x2616>
  405908:	mov    esi,DWORD PTR [rsp+0x38]
  40590c:	mov    rax,QWORD PTR [rsp+0x40]
  405911:	test   esi,esi
  405913:	je     405980 <_start@@Base+0x2560>
  405915:	movabs rdx,0x8000000000000000
  40591f:	mov    ecx,0x8
  405924:	cmp    rax,rdx
  405927:	ja     405991 <_start@@Base+0x2571>
  405929:	neg    rax
  40592c:	mov    QWORD PTR [rsp+0x10],rax
  405931:	mov    rax,QWORD PTR [rsp+0x20]
  405936:	mov    rcx,QWORD PTR [rsp+0x10]
  40593b:	add    DWORD PTR [rsp+0xc],0x1
  405940:	add    QWORD PTR [rax],rcx
  405943:	mov    ecx,DWORD PTR [rsp+0x3c]
  405947:	test   ecx,ecx
  405949:	je     405a2e <_start@@Base+0x260e>
  40594f:	mov    rbx,r8
  405952:	jmp    40587f <_start@@Base+0x245f>
  405957:	nop    WORD PTR [rax+rax*1+0x0]
  405960:	mov    rdx,rbp
  405963:	mov    ecx,0x17
  405968:	mov    rsi,rbx
  40596b:	mov    rdi,r12
  40596e:	call   416820 <flatcc_json_parser_set_error@@Base>
  405973:	mov    rbp,rax
  405976:	jmp    4058c0 <_start@@Base+0x24a0>
  40597b:	nop    DWORD PTR [rax+rax*1+0x0]
  405980:	test   rax,rax
  405983:	js     40598c <_start@@Base+0x256c>
  405985:	mov    QWORD PTR [rsp+0x10],rax
  40598a:	jmp    405931 <_start@@Base+0x2511>
  40598c:	mov    ecx,0x7
  405991:	mov    rsi,r8
  405994:	mov    rdx,rbp
  405997:	mov    rdi,r12
  40599a:	mov    QWORD PTR [rsp+0x28],r8
  40599f:	call   416820 <flatcc_json_parser_set_error@@Base>
  4059a4:	cmp    rbp,rax
  4059a7:	mov    r8,QWORD PTR [rsp+0x28]
  4059ac:	jne    405931 <_start@@Base+0x2511>
  4059ae:	jmp    4058c0 <_start@@Base+0x24a0>
  4059b3:	add    rbx,0x1
  4059b7:	mov    rax,rdx
  4059ba:	mov    DWORD PTR [rdi+0x14],0x0
  4059c1:	sub    rax,rbx
  4059c4:	cmp    rax,0x1
  4059c8:	jle    4059d1 <_start@@Base+0x25b1>
  4059ca:	cmp    BYTE PTR [rbx],0x20
  4059cd:	jg     4059e2 <_start@@Base+0x25c2>
  4059cf:	je     405a22 <_start@@Base+0x2602>
  4059d1:	mov    rsi,rbx
  4059d4:	mov    rdx,rbp
  4059d7:	mov    rdi,r12
  4059da:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4059df:	mov    rbx,rax
  4059e2:	cmp    rbp,rbx
  4059e5:	jne    40585b <_start@@Base+0x243b>
  4059eb:	jmp    4058c0 <_start@@Base+0x24a0>
  4059f0:	mov    edx,DWORD PTR [rdi+0x14]
  4059f3:	test   edx,edx
  4059f5:	je     4059d1 <_start@@Base+0x25b1>
  4059f7:	jmp    4058c0 <_start@@Base+0x24a0>
  4059fc:	nop    DWORD PTR [rax+0x0]
  405a00:	mov    rsi,rbx
  405a03:	mov    ecx,0x5
  405a08:	call   416820 <flatcc_json_parser_set_error@@Base>
  405a0d:	mov    r8d,DWORD PTR [r12+0x14]
  405a12:	mov    rbx,rax
  405a15:	test   r8d,r8d
  405a18:	jne    4059e2 <_start@@Base+0x25c2>
  405a1a:	mov    rax,rbp
  405a1d:	sub    rax,rbx
  405a20:	jmp    4059c4 <_start@@Base+0x25a4>
  405a22:	cmp    BYTE PTR [rbx+0x1],0x20
  405a26:	jle    4059d1 <_start@@Base+0x25b1>
  405a28:	add    rbx,0x1
  405a2c:	jmp    4059e2 <_start@@Base+0x25c2>
  405a2e:	mov    rbp,r8
  405a31:	jmp    4058c0 <_start@@Base+0x24a0>
  405a36:	mov    rdx,rbp
  405a39:	mov    ecx,0xe
  405a3e:	mov    rsi,r8
  405a41:	mov    rdi,r12
  405a44:	call   416820 <flatcc_json_parser_set_error@@Base>
  405a49:	mov    rbp,rax
  405a4c:	jmp    4058c0 <_start@@Base+0x24a0>
  405a51:	call   403080 <__stack_chk_fail@plt>
  405a56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a60:	push   r15
  405a62:	push   r14
  405a64:	push   r13
  405a66:	push   r12
  405a68:	mov    r12,rdi
  405a6b:	push   rbp
  405a6c:	push   rbx
  405a6d:	mov    rbx,rdx
  405a70:	mov    rbp,rsi
  405a73:	sub    rsp,0x58
  405a77:	mov    BYTE PTR [r8],0x0
  405a7b:	mov    rdx,QWORD PTR fs:0x28
  405a84:	mov    QWORD PTR [rsp+0x48],rdx
  405a89:	xor    edx,edx
  405a8b:	cmp    rsi,rbx
  405a8e:	mov    QWORD PTR [rsp+0x10],rcx
  405a93:	mov    QWORD PTR [rsp+0x20],r8
  405a98:	je     405c20 <_start@@Base+0x2800>
  405a9e:	movzx  eax,BYTE PTR [rsi]
  405aa1:	cmp    al,0x22
  405aa3:	je     405be2 <_start@@Base+0x27c2>
  405aa9:	cmp    al,0x2e
  405aab:	je     405c30 <_start@@Base+0x2810>
  405ab1:	mov    DWORD PTR [rdi+0x14],0x1
  405ab8:	lea    rax,[rsp+0x38]
  405abd:	lea    r15,[rsp+0x3c]
  405ac2:	lea    r14,[rsp+0x40]
  405ac7:	mov    DWORD PTR [rsp+0x18],0x0
  405acf:	mov    BYTE PTR [rsp+0x1f],0x0
  405ad4:	mov    QWORD PTR [rsp+0x8],rax
  405ad9:	mov    r13,QWORD PTR [rsp+0x10]
  405ade:	mov    rax,QWORD PTR [r13+0x0]
  405ae2:	jmp    405afe <_start@@Base+0x26de>
  405ae4:	nop    DWORD PTR [rax+0x0]
  405ae8:	cmp    rbp,rax
  405aeb:	jne    405b40 <_start@@Base+0x2720>
  405aed:	add    r13,0x8
  405af1:	mov    rax,QWORD PTR [r13+0x0]
  405af5:	test   rax,rax
  405af8:	je     405ba0 <_start@@Base+0x2780>
  405afe:	mov    r9,r15
  405b01:	mov    r8,r14
  405b04:	mov    rcx,QWORD PTR [rsp+0x8]
  405b09:	mov    rdx,rbx
  405b0c:	mov    rsi,rbp
  405b0f:	mov    rdi,r12
  405b12:	call   rax
  405b14:	cmp    rbx,rax
  405b17:	jne    405ae8 <_start@@Base+0x26c8>
  405b19:	mov    rsi,QWORD PTR [rsp+0x48]
  405b1e:	xor    rsi,QWORD PTR fs:0x28
  405b27:	mov    rax,rbx
  405b2a:	jne    405c81 <_start@@Base+0x2861>
  405b30:	add    rsp,0x58
  405b34:	pop    rbx
  405b35:	pop    rbp
  405b36:	pop    r12
  405b38:	pop    r13
  405b3a:	pop    r14
  405b3c:	pop    r15
  405b3e:	ret    
  405b3f:	nop
  405b40:	mov    r8,rax
  405b43:	mov    eax,DWORD PTR [rsp+0x18]
  405b47:	test   eax,eax
  405b49:	je     405b58 <_start@@Base+0x2738>
  405b4b:	mov    edi,DWORD PTR [r12+0x14]
  405b50:	test   edi,edi
  405b52:	jne    405c66 <_start@@Base+0x2846>
  405b58:	mov    esi,DWORD PTR [rsp+0x38]
  405b5c:	mov    ecx,0x8
  405b61:	test   esi,esi
  405b63:	jne    405bc0 <_start@@Base+0x27a0>
  405b65:	mov    rax,QWORD PTR [rsp+0x40]
  405b6a:	cmp    rax,0xff
  405b70:	ja     405bbb <_start@@Base+0x279b>
  405b72:	mov    BYTE PTR [rsp+0x1f],al
  405b76:	mov    rax,QWORD PTR [rsp+0x20]
  405b7b:	movzx  ecx,BYTE PTR [rsp+0x1f]
  405b80:	add    DWORD PTR [rsp+0x18],0x1
  405b85:	add    BYTE PTR [rax],cl
  405b87:	mov    ecx,DWORD PTR [rsp+0x3c]
  405b8b:	test   ecx,ecx
  405b8d:	je     405c5e <_start@@Base+0x283e>
  405b93:	mov    rbp,r8
  405b96:	jmp    405ad9 <_start@@Base+0x26b9>
  405b9b:	nop    DWORD PTR [rax+rax*1+0x0]
  405ba0:	mov    rdx,rbx
  405ba3:	mov    ecx,0x17
  405ba8:	mov    rsi,rbp
  405bab:	mov    rdi,r12
  405bae:	call   416820 <flatcc_json_parser_set_error@@Base>
  405bb3:	mov    rbx,rax
  405bb6:	jmp    405b19 <_start@@Base+0x26f9>
  405bbb:	mov    ecx,0x7
  405bc0:	mov    rsi,r8
  405bc3:	mov    rdx,rbx
  405bc6:	mov    rdi,r12
  405bc9:	mov    QWORD PTR [rsp+0x28],r8
  405bce:	call   416820 <flatcc_json_parser_set_error@@Base>
  405bd3:	cmp    rbx,rax
  405bd6:	mov    r8,QWORD PTR [rsp+0x28]
  405bdb:	jne    405b76 <_start@@Base+0x2756>
  405bdd:	jmp    405b19 <_start@@Base+0x26f9>
  405be2:	add    rbp,0x1
  405be6:	mov    rax,rbx
  405be9:	mov    DWORD PTR [rdi+0x14],0x0
  405bf0:	sub    rax,rbp
  405bf3:	cmp    rax,0x1
  405bf7:	jle    405c01 <_start@@Base+0x27e1>
  405bf9:	cmp    BYTE PTR [rbp+0x0],0x20
  405bfd:	jg     405c12 <_start@@Base+0x27f2>
  405bff:	je     405c52 <_start@@Base+0x2832>
  405c01:	mov    rsi,rbp
  405c04:	mov    rdx,rbx
  405c07:	mov    rdi,r12
  405c0a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  405c0f:	mov    rbp,rax
  405c12:	cmp    rbx,rbp
  405c15:	jne    405ab8 <_start@@Base+0x2698>
  405c1b:	jmp    405b19 <_start@@Base+0x26f9>
  405c20:	mov    edx,DWORD PTR [rdi+0x14]
  405c23:	test   edx,edx
  405c25:	je     405c01 <_start@@Base+0x27e1>
  405c27:	jmp    405b19 <_start@@Base+0x26f9>
  405c2c:	nop    DWORD PTR [rax+0x0]
  405c30:	mov    ecx,0x5
  405c35:	mov    rdx,rbx
  405c38:	call   416820 <flatcc_json_parser_set_error@@Base>
  405c3d:	mov    r8d,DWORD PTR [r12+0x14]
  405c42:	mov    rbp,rax
  405c45:	test   r8d,r8d
  405c48:	jne    405c12 <_start@@Base+0x27f2>
  405c4a:	mov    rax,rbx
  405c4d:	sub    rax,rbp
  405c50:	jmp    405bf3 <_start@@Base+0x27d3>
  405c52:	cmp    BYTE PTR [rbp+0x1],0x20
  405c56:	jle    405c01 <_start@@Base+0x27e1>
  405c58:	add    rbp,0x1
  405c5c:	jmp    405c12 <_start@@Base+0x27f2>
  405c5e:	mov    rbx,r8
  405c61:	jmp    405b19 <_start@@Base+0x26f9>
  405c66:	mov    rdx,rbx
  405c69:	mov    ecx,0xe
  405c6e:	mov    rsi,r8
  405c71:	mov    rdi,r12
  405c74:	call   416820 <flatcc_json_parser_set_error@@Base>
  405c79:	mov    rbx,rax
  405c7c:	jmp    405b19 <_start@@Base+0x26f9>
  405c81:	call   403080 <__stack_chk_fail@plt>
  405c86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c90:	push   r15
  405c92:	push   r14
  405c94:	xor    r10d,r10d
  405c97:	push   r13
  405c99:	push   r12
  405c9b:	mov    r12,rdi
  405c9e:	push   rbp
  405c9f:	push   rbx
  405ca0:	mov    rbx,rdx
  405ca3:	mov    rbp,rsi
  405ca6:	sub    rsp,0x58
  405caa:	mov    WORD PTR [r8],r10w
  405cae:	mov    rdx,QWORD PTR fs:0x28
  405cb7:	mov    QWORD PTR [rsp+0x48],rdx
  405cbc:	xor    edx,edx
  405cbe:	cmp    rsi,rbx
  405cc1:	mov    QWORD PTR [rsp+0x18],rcx
  405cc6:	mov    QWORD PTR [rsp+0x20],r8
  405ccb:	je     405e74 <_start@@Base+0x2a54>
  405cd1:	movzx  eax,BYTE PTR [rsi]
  405cd4:	cmp    al,0x22
  405cd6:	je     405e36 <_start@@Base+0x2a16>
  405cdc:	cmp    al,0x2e
  405cde:	je     405e81 <_start@@Base+0x2a61>
  405ce4:	mov    DWORD PTR [rdi+0x14],0x1
  405ceb:	lea    rax,[rsp+0x38]
  405cf0:	xor    r8d,r8d
  405cf3:	lea    r15,[rsp+0x3c]
  405cf8:	lea    r14,[rsp+0x40]
  405cfd:	mov    DWORD PTR [rsp+0x10],0x0
  405d05:	mov    WORD PTR [rsp+0x16],r8w
  405d0b:	mov    QWORD PTR [rsp+0x8],rax
  405d10:	mov    r13,QWORD PTR [rsp+0x18]
  405d15:	mov    rax,QWORD PTR [r13+0x0]
  405d19:	jmp    405d36 <_start@@Base+0x2916>
  405d1b:	nop    DWORD PTR [rax+rax*1+0x0]
  405d20:	cmp    rbp,rax
  405d23:	jne    405d80 <_start@@Base+0x2960>
  405d25:	add    r13,0x8
  405d29:	mov    rax,QWORD PTR [r13+0x0]
  405d2d:	test   rax,rax
  405d30:	je     405de0 <_start@@Base+0x29c0>
  405d36:	mov    r9,r15
  405d39:	mov    r8,r14
  405d3c:	mov    rcx,QWORD PTR [rsp+0x8]
  405d41:	mov    rdx,rbx
  405d44:	mov    rsi,rbp
  405d47:	mov    rdi,r12
  405d4a:	call   rax
  405d4c:	cmp    rbx,rax
  405d4f:	jne    405d20 <_start@@Base+0x2900>
  405d51:	mov    rsi,QWORD PTR [rsp+0x48]
  405d56:	xor    rsi,QWORD PTR fs:0x28
  405d5f:	mov    rax,rbx
  405d62:	jne    405ed2 <_start@@Base+0x2ab2>
  405d68:	add    rsp,0x58
  405d6c:	pop    rbx
  405d6d:	pop    rbp
  405d6e:	pop    r12
  405d70:	pop    r13
  405d72:	pop    r14
  405d74:	pop    r15
  405d76:	ret    
  405d77:	nop    WORD PTR [rax+rax*1+0x0]
  405d80:	mov    r8,rax
  405d83:	mov    eax,DWORD PTR [rsp+0x10]
  405d87:	test   eax,eax
  405d89:	je     405d98 <_start@@Base+0x2978>
  405d8b:	mov    edi,DWORD PTR [r12+0x14]
  405d90:	test   edi,edi
  405d92:	jne    405eb7 <_start@@Base+0x2a97>
  405d98:	mov    esi,DWORD PTR [rsp+0x38]
  405d9c:	mov    rax,QWORD PTR [rsp+0x40]
  405da1:	test   esi,esi
  405da3:	je     405e00 <_start@@Base+0x29e0>
  405da5:	cmp    rax,0x8000
  405dab:	mov    ecx,0x8
  405db0:	ja     405e14 <_start@@Base+0x29f4>
  405db2:	neg    eax
  405db4:	mov    WORD PTR [rsp+0x16],ax
  405db9:	mov    rax,QWORD PTR [rsp+0x20]
  405dbe:	movzx  ecx,WORD PTR [rsp+0x16]
  405dc3:	add    DWORD PTR [rsp+0x10],0x1
  405dc8:	add    WORD PTR [rax],cx
  405dcb:	mov    ecx,DWORD PTR [rsp+0x3c]
  405dcf:	test   ecx,ecx
  405dd1:	je     405eaf <_start@@Base+0x2a8f>
  405dd7:	mov    rbp,r8
  405dda:	jmp    405d10 <_start@@Base+0x28f0>
  405ddf:	nop
  405de0:	mov    rdx,rbx
  405de3:	mov    ecx,0x17
  405de8:	mov    rsi,rbp
  405deb:	mov    rdi,r12
  405dee:	call   416820 <flatcc_json_parser_set_error@@Base>
  405df3:	mov    rbx,rax
  405df6:	jmp    405d51 <_start@@Base+0x2931>
  405dfb:	nop    DWORD PTR [rax+rax*1+0x0]
  405e00:	cmp    rax,0x7fff
  405e06:	ja     405e0f <_start@@Base+0x29ef>
  405e08:	mov    WORD PTR [rsp+0x16],ax
  405e0d:	jmp    405db9 <_start@@Base+0x2999>
  405e0f:	mov    ecx,0x7
  405e14:	mov    rsi,r8
  405e17:	mov    rdx,rbx
  405e1a:	mov    rdi,r12
  405e1d:	mov    QWORD PTR [rsp+0x28],r8
  405e22:	call   416820 <flatcc_json_parser_set_error@@Base>
  405e27:	cmp    rbx,rax
  405e2a:	mov    r8,QWORD PTR [rsp+0x28]
  405e2f:	jne    405db9 <_start@@Base+0x2999>
  405e31:	jmp    405d51 <_start@@Base+0x2931>
  405e36:	add    rbp,0x1
  405e3a:	mov    rax,rbx
  405e3d:	mov    DWORD PTR [rdi+0x14],0x0
  405e44:	sub    rax,rbp
  405e47:	cmp    rax,0x1
  405e4b:	jle    405e55 <_start@@Base+0x2a35>
  405e4d:	cmp    BYTE PTR [rbp+0x0],0x20
  405e51:	jg     405e66 <_start@@Base+0x2a46>
  405e53:	je     405ea3 <_start@@Base+0x2a83>
  405e55:	mov    rsi,rbp
  405e58:	mov    rdx,rbx
  405e5b:	mov    rdi,r12
  405e5e:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  405e63:	mov    rbp,rax
  405e66:	cmp    rbx,rbp
  405e69:	jne    405ceb <_start@@Base+0x28cb>
  405e6f:	jmp    405d51 <_start@@Base+0x2931>
  405e74:	mov    edx,DWORD PTR [rdi+0x14]
  405e77:	test   edx,edx
  405e79:	jne    405d51 <_start@@Base+0x2931>
  405e7f:	jmp    405e55 <_start@@Base+0x2a35>
  405e81:	mov    ecx,0x5
  405e86:	mov    rdx,rbx
  405e89:	call   416820 <flatcc_json_parser_set_error@@Base>
  405e8e:	mov    r9d,DWORD PTR [r12+0x14]
  405e93:	mov    rbp,rax
  405e96:	test   r9d,r9d
  405e99:	jne    405e66 <_start@@Base+0x2a46>
  405e9b:	mov    rax,rbx
  405e9e:	sub    rax,rbp
  405ea1:	jmp    405e47 <_start@@Base+0x2a27>
  405ea3:	cmp    BYTE PTR [rbp+0x1],0x20
  405ea7:	jle    405e55 <_start@@Base+0x2a35>
  405ea9:	add    rbp,0x1
  405ead:	jmp    405e66 <_start@@Base+0x2a46>
  405eaf:	mov    rbx,r8
  405eb2:	jmp    405d51 <_start@@Base+0x2931>
  405eb7:	mov    rdx,rbx
  405eba:	mov    ecx,0xe
  405ebf:	mov    rsi,r8
  405ec2:	mov    rdi,r12
  405ec5:	call   416820 <flatcc_json_parser_set_error@@Base>
  405eca:	mov    rbx,rax
  405ecd:	jmp    405d51 <_start@@Base+0x2931>
  405ed2:	call   403080 <__stack_chk_fail@plt>
  405ed7:	nop    WORD PTR [rax+rax*1+0x0]
  405ee0:	push   r15
  405ee2:	push   r14
  405ee4:	push   r13
  405ee6:	push   r12
  405ee8:	mov    r12,rdi
  405eeb:	push   rbp
  405eec:	push   rbx
  405eed:	mov    rbp,rsi
  405ef0:	mov    rbx,rdx
  405ef3:	sub    rsp,0x58
  405ef7:	mov    DWORD PTR [r8],0x0
  405efe:	mov    rsi,QWORD PTR fs:0x28
  405f07:	mov    QWORD PTR [rsp+0x48],rsi
  405f0c:	xor    esi,esi
  405f0e:	cmp    rbp,rdx
  405f11:	mov    QWORD PTR [rsp+0x10],rcx
  405f16:	mov    QWORD PTR [rsp+0x20],r8
  405f1b:	je     4060b0 <_start@@Base+0x2c90>
  405f21:	movzx  eax,BYTE PTR [rbp+0x0]
  405f25:	cmp    al,0x22
  405f27:	je     406072 <_start@@Base+0x2c52>
  405f2d:	cmp    al,0x2e
  405f2f:	je     4060c0 <_start@@Base+0x2ca0>
  405f35:	mov    DWORD PTR [rdi+0x14],0x1
  405f3c:	lea    rax,[rsp+0x38]
  405f41:	lea    r15,[rsp+0x3c]
  405f46:	lea    r14,[rsp+0x40]
  405f4b:	mov    DWORD PTR [rsp+0x18],0x0
  405f53:	mov    DWORD PTR [rsp+0x1c],0x0
  405f5b:	mov    QWORD PTR [rsp+0x8],rax
  405f60:	mov    r13,QWORD PTR [rsp+0x10]
  405f65:	mov    rax,QWORD PTR [r13+0x0]
  405f69:	jmp    405f86 <_start@@Base+0x2b66>
  405f6b:	nop    DWORD PTR [rax+rax*1+0x0]
  405f70:	cmp    rbp,rax
  405f73:	jne    405fd0 <_start@@Base+0x2bb0>
  405f75:	add    r13,0x8
  405f79:	mov    rax,QWORD PTR [r13+0x0]
  405f7d:	test   rax,rax
  405f80:	je     406030 <_start@@Base+0x2c10>
  405f86:	mov    r9,r15
  405f89:	mov    r8,r14
  405f8c:	mov    rcx,QWORD PTR [rsp+0x8]
  405f91:	mov    rdx,rbx
  405f94:	mov    rsi,rbp
  405f97:	mov    rdi,r12
  405f9a:	call   rax
  405f9c:	cmp    rbx,rax
  405f9f:	jne    405f70 <_start@@Base+0x2b50>
  405fa1:	mov    rdi,QWORD PTR [rsp+0x48]
  405fa6:	xor    rdi,QWORD PTR fs:0x28
  405faf:	mov    rax,rbx
  405fb2:	jne    406111 <_start@@Base+0x2cf1>
  405fb8:	add    rsp,0x58
  405fbc:	pop    rbx
  405fbd:	pop    rbp
  405fbe:	pop    r12
  405fc0:	pop    r13
  405fc2:	pop    r14
  405fc4:	pop    r15
  405fc6:	ret    
  405fc7:	nop    WORD PTR [rax+rax*1+0x0]
  405fd0:	mov    r8,rax
  405fd3:	mov    eax,DWORD PTR [rsp+0x18]
  405fd7:	test   eax,eax
  405fd9:	je     405fe8 <_start@@Base+0x2bc8>
  405fdb:	mov    edi,DWORD PTR [r12+0x14]
  405fe0:	test   edi,edi
  405fe2:	jne    4060f6 <_start@@Base+0x2cd6>
  405fe8:	mov    esi,DWORD PTR [rsp+0x38]
  405fec:	mov    ecx,0x8
  405ff1:	test   esi,esi
  405ff3:	jne    406050 <_start@@Base+0x2c30>
  405ff5:	mov    rax,QWORD PTR [rsp+0x40]
  405ffa:	mov    edx,0xffffffff
  405fff:	cmp    rax,rdx
  406002:	ja     40604b <_start@@Base+0x2c2b>
  406004:	mov    DWORD PTR [rsp+0x1c],eax
  406008:	mov    rax,QWORD PTR [rsp+0x20]
  40600d:	mov    ecx,DWORD PTR [rsp+0x1c]
  406011:	add    DWORD PTR [rsp+0x18],0x1
  406016:	add    DWORD PTR [rax],ecx
  406018:	mov    ecx,DWORD PTR [rsp+0x3c]
  40601c:	test   ecx,ecx
  40601e:	je     4060ee <_start@@Base+0x2cce>
  406024:	mov    rbp,r8
  406027:	jmp    405f60 <_start@@Base+0x2b40>
  40602c:	nop    DWORD PTR [rax+0x0]
  406030:	mov    rdx,rbx
  406033:	mov    ecx,0x17
  406038:	mov    rsi,rbp
  40603b:	mov    rdi,r12
  40603e:	call   416820 <flatcc_json_parser_set_error@@Base>
  406043:	mov    rbx,rax
  406046:	jmp    405fa1 <_start@@Base+0x2b81>
  40604b:	mov    ecx,0x7
  406050:	mov    rsi,r8
  406053:	mov    rdx,rbx
  406056:	mov    rdi,r12
  406059:	mov    QWORD PTR [rsp+0x28],r8
  40605e:	call   416820 <flatcc_json_parser_set_error@@Base>
  406063:	cmp    rbx,rax
  406066:	mov    r8,QWORD PTR [rsp+0x28]
  40606b:	jne    406008 <_start@@Base+0x2be8>
  40606d:	jmp    405fa1 <_start@@Base+0x2b81>
  406072:	add    rbp,0x1
  406076:	mov    rax,rdx
  406079:	mov    DWORD PTR [rdi+0x14],0x0
  406080:	sub    rax,rbp
  406083:	cmp    rax,0x1
  406087:	jle    406091 <_start@@Base+0x2c71>
  406089:	cmp    BYTE PTR [rbp+0x0],0x20
  40608d:	jg     4060a2 <_start@@Base+0x2c82>
  40608f:	je     4060e2 <_start@@Base+0x2cc2>
  406091:	mov    rsi,rbp
  406094:	mov    rdx,rbx
  406097:	mov    rdi,r12
  40609a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40609f:	mov    rbp,rax
  4060a2:	cmp    rbx,rbp
  4060a5:	jne    405f3c <_start@@Base+0x2b1c>
  4060ab:	jmp    405fa1 <_start@@Base+0x2b81>
  4060b0:	mov    edx,DWORD PTR [rdi+0x14]
  4060b3:	test   edx,edx
  4060b5:	je     406091 <_start@@Base+0x2c71>
  4060b7:	jmp    405fa1 <_start@@Base+0x2b81>
  4060bc:	nop    DWORD PTR [rax+0x0]
  4060c0:	mov    rsi,rbp
  4060c3:	mov    ecx,0x5
  4060c8:	call   416820 <flatcc_json_parser_set_error@@Base>
  4060cd:	mov    r8d,DWORD PTR [r12+0x14]
  4060d2:	mov    rbp,rax
  4060d5:	test   r8d,r8d
  4060d8:	jne    4060a2 <_start@@Base+0x2c82>
  4060da:	mov    rax,rbx
  4060dd:	sub    rax,rbp
  4060e0:	jmp    406083 <_start@@Base+0x2c63>
  4060e2:	cmp    BYTE PTR [rbp+0x1],0x20
  4060e6:	jle    406091 <_start@@Base+0x2c71>
  4060e8:	add    rbp,0x1
  4060ec:	jmp    4060a2 <_start@@Base+0x2c82>
  4060ee:	mov    rbx,r8
  4060f1:	jmp    405fa1 <_start@@Base+0x2b81>
  4060f6:	mov    rdx,rbx
  4060f9:	mov    ecx,0xe
  4060fe:	mov    rsi,r8
  406101:	mov    rdi,r12
  406104:	call   416820 <flatcc_json_parser_set_error@@Base>
  406109:	mov    rbx,rax
  40610c:	jmp    405fa1 <_start@@Base+0x2b81>
  406111:	call   403080 <__stack_chk_fail@plt>
  406116:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406120:	mov    rax,rdx
  406123:	push   r12
  406125:	mov    r12,rcx
  406128:	sub    rax,rsi
  40612b:	push   rbp
  40612c:	mov    rbp,rdi
  40612f:	cmp    rax,0x1
  406133:	push   rbx
  406134:	mov    rbx,rdx
  406137:	jle    406140 <_start@@Base+0x2d20>
  406139:	cmp    BYTE PTR [rsi],0x20
  40613c:	jg     40614e <_start@@Base+0x2d2e>
  40613e:	je     4061b0 <_start@@Base+0x2d90>
  406140:	mov    rdx,rbx
  406143:	mov    rdi,rbp
  406146:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40614b:	mov    rsi,rax
  40614e:	cmp    rbx,rsi
  406151:	je     406200 <_start@@Base+0x2de0>
  406157:	cmp    BYTE PTR [rsi],0x2c
  40615a:	je     4061c0 <_start@@Base+0x2da0>
  40615c:	mov    DWORD PTR [r12],0x0
  406164:	cmp    BYTE PTR [rsi],0x5d
  406167:	je     406180 <_start@@Base+0x2d60>
  406169:	mov    ecx,0x9
  40616e:	mov    rdx,rbx
  406171:	pop    rbx
  406172:	mov    rdi,rbp
  406175:	pop    rbp
  406176:	pop    r12
  406178:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  40617d:	nop    DWORD PTR [rax]
  406180:	lea    rax,[rsi+0x1]
  406184:	mov    rdx,rbx
  406187:	sub    rdx,rax
  40618a:	cmp    rdx,0x1
  40618e:	jle    40619c <_start@@Base+0x2d7c>
  406190:	cmp    BYTE PTR [rsi+0x1],0x20
  406194:	jg     4061f8 <_start@@Base+0x2dd8>
  406196:	je     406220 <_start@@Base+0x2e00>
  40619c:	mov    rdx,rbx
  40619f:	mov    rdi,rbp
  4061a2:	mov    rsi,rax
  4061a5:	pop    rbx
  4061a6:	pop    rbp
  4061a7:	pop    r12
  4061a9:	jmp    4168b0 <flatcc_json_parser_space_ext@@Base>
  4061ae:	xchg   ax,ax
  4061b0:	cmp    BYTE PTR [rsi+0x1],0x20
  4061b4:	jle    406140 <_start@@Base+0x2d20>
  4061b6:	add    rsi,0x1
  4061ba:	jmp    40614e <_start@@Base+0x2d2e>
  4061bc:	nop    DWORD PTR [rax+0x0]
  4061c0:	lea    rax,[rsi+0x1]
  4061c4:	mov    rdx,rbx
  4061c7:	sub    rdx,rax
  4061ca:	cmp    rdx,0x1
  4061ce:	jle    4061d8 <_start@@Base+0x2db8>
  4061d0:	cmp    BYTE PTR [rsi+0x1],0x20
  4061d4:	jg     4061e6 <_start@@Base+0x2dc6>
  4061d6:	je     406210 <_start@@Base+0x2df0>
  4061d8:	mov    rdx,rbx
  4061db:	mov    rsi,rax
  4061de:	mov    rdi,rbp
  4061e1:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4061e6:	cmp    rbx,rax
  4061e9:	je     40624b <_start@@Base+0x2e2b>
  4061eb:	cmp    BYTE PTR [rax],0x5d
  4061ee:	je     406230 <_start@@Base+0x2e10>
  4061f0:	mov    DWORD PTR [r12],0x1
  4061f8:	pop    rbx
  4061f9:	pop    rbp
  4061fa:	pop    r12
  4061fc:	ret    
  4061fd:	nop    DWORD PTR [rax]
  406200:	mov    rax,rbx
  406203:	mov    DWORD PTR [r12],0x0
  40620b:	pop    rbx
  40620c:	pop    rbp
  40620d:	pop    r12
  40620f:	ret    
  406210:	cmp    BYTE PTR [rsi+0x2],0x20
  406214:	jle    4061d8 <_start@@Base+0x2db8>
  406216:	lea    rax,[rsi+0x2]
  40621a:	jmp    4061e6 <_start@@Base+0x2dc6>
  40621c:	nop    DWORD PTR [rax+0x0]
  406220:	cmp    BYTE PTR [rsi+0x2],0x20
  406224:	jle    40619c <_start@@Base+0x2d7c>
  40622a:	lea    rax,[rsi+0x2]
  40622e:	jmp    4061f8 <_start@@Base+0x2dd8>
  406230:	mov    DWORD PTR [r12],0x0
  406238:	mov    rdx,rbx
  40623b:	mov    rdi,rbp
  40623e:	pop    rbx
  40623f:	pop    rbp
  406240:	pop    r12
  406242:	lea    rsi,[rax+0x1]
  406246:	jmp    403680 <_start@@Base+0x260>
  40624b:	mov    DWORD PTR [r12],0x0
  406253:	mov    ecx,0x9
  406258:	mov    rdx,rbx
  40625b:	mov    rsi,rbx
  40625e:	jmp    406171 <_start@@Base+0x2d51>
  406263:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40626e:	xchg   ax,ax
  406270:	mov    rax,rdx
  406273:	push   r12
  406275:	mov    r12,rcx
  406278:	sub    rax,rsi
  40627b:	push   rbp
  40627c:	mov    rbp,rdi
  40627f:	cmp    rax,0x1
  406283:	push   rbx
  406284:	mov    rbx,rdx
  406287:	jle    406290 <_start@@Base+0x2e70>
  406289:	cmp    BYTE PTR [rsi],0x20
  40628c:	jg     40629e <_start@@Base+0x2e7e>
  40628e:	je     406300 <_start@@Base+0x2ee0>
  406290:	mov    rdx,rbx
  406293:	mov    rdi,rbp
  406296:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40629b:	mov    rsi,rax
  40629e:	cmp    rbx,rsi
  4062a1:	je     406350 <_start@@Base+0x2f30>
  4062a7:	cmp    BYTE PTR [rsi],0x2c
  4062aa:	je     406310 <_start@@Base+0x2ef0>
  4062ac:	mov    DWORD PTR [r12],0x0
  4062b4:	cmp    BYTE PTR [rsi],0x7d
  4062b7:	je     4062d0 <_start@@Base+0x2eb0>
  4062b9:	mov    ecx,0xa
  4062be:	mov    rdx,rbx
  4062c1:	pop    rbx
  4062c2:	mov    rdi,rbp
  4062c5:	pop    rbp
  4062c6:	pop    r12
  4062c8:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  4062cd:	nop    DWORD PTR [rax]
  4062d0:	lea    rax,[rsi+0x1]
  4062d4:	mov    rdx,rbx
  4062d7:	sub    rdx,rax
  4062da:	cmp    rdx,0x1
  4062de:	jle    4062ec <_start@@Base+0x2ecc>
  4062e0:	cmp    BYTE PTR [rsi+0x1],0x20
  4062e4:	jg     406348 <_start@@Base+0x2f28>
  4062e6:	je     406370 <_start@@Base+0x2f50>
  4062ec:	mov    rdx,rbx
  4062ef:	mov    rdi,rbp
  4062f2:	mov    rsi,rax
  4062f5:	pop    rbx
  4062f6:	pop    rbp
  4062f7:	pop    r12
  4062f9:	jmp    4168b0 <flatcc_json_parser_space_ext@@Base>
  4062fe:	xchg   ax,ax
  406300:	cmp    BYTE PTR [rsi+0x1],0x20
  406304:	jle    406290 <_start@@Base+0x2e70>
  406306:	add    rsi,0x1
  40630a:	jmp    40629e <_start@@Base+0x2e7e>
  40630c:	nop    DWORD PTR [rax+0x0]
  406310:	lea    rax,[rsi+0x1]
  406314:	mov    rdx,rbx
  406317:	sub    rdx,rax
  40631a:	cmp    rdx,0x1
  40631e:	jle    406328 <_start@@Base+0x2f08>
  406320:	cmp    BYTE PTR [rsi+0x1],0x20
  406324:	jg     406336 <_start@@Base+0x2f16>
  406326:	je     406360 <_start@@Base+0x2f40>
  406328:	mov    rdx,rbx
  40632b:	mov    rsi,rax
  40632e:	mov    rdi,rbp
  406331:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406336:	cmp    rbx,rax
  406339:	je     40639b <_start@@Base+0x2f7b>
  40633b:	cmp    BYTE PTR [rax],0x7d
  40633e:	je     406380 <_start@@Base+0x2f60>
  406340:	mov    DWORD PTR [r12],0x1
  406348:	pop    rbx
  406349:	pop    rbp
  40634a:	pop    r12
  40634c:	ret    
  40634d:	nop    DWORD PTR [rax]
  406350:	mov    rax,rbx
  406353:	mov    DWORD PTR [r12],0x0
  40635b:	pop    rbx
  40635c:	pop    rbp
  40635d:	pop    r12
  40635f:	ret    
  406360:	cmp    BYTE PTR [rsi+0x2],0x20
  406364:	jle    406328 <_start@@Base+0x2f08>
  406366:	lea    rax,[rsi+0x2]
  40636a:	jmp    406336 <_start@@Base+0x2f16>
  40636c:	nop    DWORD PTR [rax+0x0]
  406370:	cmp    BYTE PTR [rsi+0x2],0x20
  406374:	jle    4062ec <_start@@Base+0x2ecc>
  40637a:	lea    rax,[rsi+0x2]
  40637e:	jmp    406348 <_start@@Base+0x2f28>
  406380:	mov    DWORD PTR [r12],0x0
  406388:	mov    rdx,rbx
  40638b:	mov    rdi,rbp
  40638e:	pop    rbx
  40638f:	pop    rbp
  406390:	pop    r12
  406392:	lea    rsi,[rax+0x1]
  406396:	jmp    403680 <_start@@Base+0x260>
  40639b:	mov    DWORD PTR [r12],0x0
  4063a3:	mov    ecx,0xa
  4063a8:	mov    rdx,rbx
  4063ab:	mov    rsi,rbx
  4063ae:	jmp    4062c1 <_start@@Base+0x2ea1>
  4063b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4063be:	xchg   ax,ax
  4063c0:	push   r15
  4063c2:	push   r14
  4063c4:	mov    r15,rdx
  4063c7:	push   r13
  4063c9:	push   r12
  4063cb:	push   rbp
  4063cc:	push   rbx
  4063cd:	mov    rbx,rdi
  4063d0:	sub    rsp,0x48
  4063d4:	mov    rax,QWORD PTR fs:0x28
  4063dd:	mov    QWORD PTR [rsp+0x38],rax
  4063e2:	xor    eax,eax
  4063e4:	cmp    rsi,rdx
  4063e7:	je     4063ee <_start@@Base+0x2fce>
  4063e9:	cmp    BYTE PTR [rsi],0x7b
  4063ec:	je     40642e <_start@@Base+0x300e>
  4063ee:	mov    rdx,r15
  4063f1:	mov    ecx,0x15
  4063f6:	mov    rdi,rbx
  4063f9:	call   416820 <flatcc_json_parser_set_error@@Base>
  4063fe:	mov    r15,rax
  406401:	nop    DWORD PTR [rax+0x0]
  406408:	mov    rdi,QWORD PTR [rsp+0x38]
  40640d:	xor    rdi,QWORD PTR fs:0x28
  406416:	mov    rax,r15
  406419:	jne    406b97 <_start@@Base+0x3777>
  40641f:	add    rsp,0x48
  406423:	pop    rbx
  406424:	pop    rbp
  406425:	pop    r12
  406427:	pop    r13
  406429:	pop    r14
  40642b:	pop    r15
  40642d:	ret    
  40642e:	lea    r13,[rsi+0x1]
  406432:	mov    rax,rdx
  406435:	mov    r12,rcx
  406438:	sub    rax,r13
  40643b:	cmp    rax,0x1
  40643f:	jle    40644d <_start@@Base+0x302d>
  406441:	cmp    BYTE PTR [rsi+0x1],0x20
  406445:	jg     40645e <_start@@Base+0x303e>
  406447:	je     406b5e <_start@@Base+0x373e>
  40644d:	mov    rsi,r13
  406450:	mov    rdx,r15
  406453:	mov    rdi,rbx
  406456:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40645b:	mov    r13,rax
  40645e:	cmp    r15,r13
  406461:	je     40646e <_start@@Base+0x304e>
  406463:	cmp    BYTE PTR [r13+0x0],0x7d
  406468:	je     406b80 <_start@@Base+0x3760>
  40646e:	lea    rax,[rsp+0x2a]
  406473:	movabs rbp,0xff00000000000000
  40647d:	mov    QWORD PTR [rsp+0x18],rax
  406482:	lea    rax,[rsp+0x30]
  406487:	mov    QWORD PTR [rsp+0x8],rax
  40648c:	lea    rax,[rsp+0x2c]
  406491:	mov    QWORD PTR [rsp+0x10],rax
  406496:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4064a0:	cmp    r15,r13
  4064a3:	je     406530 <_start@@Base+0x3110>
  4064a9:	movzx  eax,BYTE PTR [r13+0x0]
  4064ae:	cmp    al,0x22
  4064b0:	je     406780 <_start@@Base+0x3360>
  4064b6:	cmp    al,0x2e
  4064b8:	je     406990 <_start@@Base+0x3570>
  4064be:	mov    rcx,r15
  4064c1:	mov    DWORD PTR [rbx+0x14],0x1
  4064c8:	sub    rcx,r13
  4064cb:	cmp    rcx,0x7
  4064cf:	jbe    4066c8 <_start@@Base+0x32a8>
  4064d5:	movbe  rax,QWORD PTR [r13+0x0]
  4064db:	and    rax,rbp
  4064de:	movabs rdx,0x6200000000000000
  4064e8:	cmp    rax,rdx
  4064eb:	je     4065a0 <_start@@Base+0x3180>
  4064f1:	movabs rdx,0x6100000000000000
  4064fb:	cmp    rax,rdx
  4064fe:	jne    406530 <_start@@Base+0x3110>
  406500:	cmp    rcx,0x1
  406504:	jle    406530 <_start@@Base+0x3110>
  406506:	mov    r8d,DWORD PTR [rbx+0x14]
  40650a:	test   r8d,r8d
  40650d:	je     406838 <_start@@Base+0x3418>
  406513:	movzx  eax,BYTE PTR [r13+0x1]
  406518:	cmp    al,0x20
  40651a:	jle    4069b8 <_start@@Base+0x3598>
  406520:	cmp    al,0x3a
  406522:	je     4069b8 <_start@@Base+0x3598>
  406528:	nop    DWORD PTR [rax+rax*1+0x0]
  406530:	mov    rdx,r15
  406533:	mov    rsi,r13
  406536:	mov    rdi,rbx
  406539:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40653e:	mov    rdx,r15
  406541:	sub    rdx,rax
  406544:	cmp    rdx,0x1
  406548:	jle    406555 <_start@@Base+0x3135>
  40654a:	cmp    BYTE PTR [rax],0x20
  40654d:	jg     406563 <_start@@Base+0x3143>
  40654f:	je     4067a0 <_start@@Base+0x3380>
  406555:	mov    rdx,r15
  406558:	mov    rsi,rax
  40655b:	mov    rdi,rbx
  40655e:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406563:	cmp    r15,rax
  406566:	je     406408 <_start@@Base+0x2fe8>
  40656c:	movzx  edx,BYTE PTR [rax]
  40656f:	cmp    dl,0x2c
  406572:	je     4067b8 <_start@@Base+0x3398>
  406578:	cmp    dl,0x7d
  40657b:	mov    ecx,0xa
  406580:	je     406690 <_start@@Base+0x3270>
  406586:	mov    rdx,r15
  406589:	mov    rsi,rax
  40658c:	mov    rdi,rbx
  40658f:	call   416820 <flatcc_json_parser_set_error@@Base>
  406594:	mov    r15,rax
  406597:	jmp    406408 <_start@@Base+0x2fe8>
  40659c:	nop    DWORD PTR [rax+0x0]
  4065a0:	cmp    rcx,0x1
  4065a4:	jle    406530 <_start@@Base+0x3110>
  4065a6:	mov    r10d,DWORD PTR [rbx+0x14]
  4065aa:	test   r10d,r10d
  4065ad:	je     406940 <_start@@Base+0x3520>
  4065b3:	movzx  eax,BYTE PTR [r13+0x1]
  4065b8:	cmp    al,0x20
  4065ba:	jle    4065c4 <_start@@Base+0x31a4>
  4065bc:	cmp    al,0x3a
  4065be:	jne    406530 <_start@@Base+0x3110>
  4065c4:	lea    rsi,[r13+0x1]
  4065c8:	mov    DWORD PTR [rbx+0x14],0x0
  4065cf:	mov    rax,r15
  4065d2:	sub    rax,rsi
  4065d5:	cmp    rax,0x1
  4065d9:	jle    4065e6 <_start@@Base+0x31c6>
  4065db:	cmp    BYTE PTR [rsi],0x20
  4065de:	jg     4065f4 <_start@@Base+0x31d4>
  4065e0:	je     406ad8 <_start@@Base+0x36b8>
  4065e6:	mov    rdx,r15
  4065e9:	mov    rdi,rbx
  4065ec:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4065f1:	mov    rsi,rax
  4065f4:	cmp    r15,rsi
  4065f7:	je     406602 <_start@@Base+0x31e2>
  4065f9:	cmp    BYTE PTR [rsi],0x3a
  4065fc:	je     406b1d <_start@@Base+0x36fd>
  406602:	mov    ecx,0x4
  406607:	mov    rdx,r15
  40660a:	mov    rdi,rbx
  40660d:	call   416820 <flatcc_json_parser_set_error@@Base>
  406612:	mov    r14,rax
  406615:	cmp    r14,r13
  406618:	je     406530 <_start@@Base+0x3110>
  40661e:	cmp    r15,r14
  406621:	mov    BYTE PTR [rsp+0x2a],0x0
  406626:	mov    QWORD PTR [rsp+0x30],0x0
  40662f:	mov    DWORD PTR [rsp+0x2c],0x0
  406637:	je     406a90 <_start@@Base+0x3670>
  40663d:	mov    r8,QWORD PTR [rsp+0x8]
  406642:	mov    rcx,QWORD PTR [rsp+0x10]
  406647:	mov    rdx,r15
  40664a:	mov    rsi,r14
  40664d:	mov    rdi,rbx
  406650:	call   4183c0 <flatcc_json_parser_integer@@Base>
  406655:	cmp    r14,rax
  406658:	je     406a90 <_start@@Base+0x3670>
  40665e:	mov    r9d,DWORD PTR [rsp+0x2c]
  406663:	mov    rdx,QWORD PTR [rsp+0x30]
  406668:	test   r9d,r9d
  40666b:	mov    ecx,edx
  40666d:	je     406958 <_start@@Base+0x3538>
  406673:	neg    ecx
  406675:	cmp    rdx,0x80
  40667c:	ja     406a00 <_start@@Base+0x35e0>
  406682:	mov    BYTE PTR [r12+0x2],cl
  406687:	jmp    40653e <_start@@Base+0x311e>
  40668c:	nop    DWORD PTR [rax+0x0]
  406690:	lea    rsi,[rax+0x1]
  406694:	mov    rdx,r15
  406697:	sub    rdx,rsi
  40669a:	cmp    rdx,0x1
  40669e:	jle    4066b0 <_start@@Base+0x3290>
  4066a0:	cmp    BYTE PTR [rax+0x1],0x20
  4066a4:	jg     406930 <_start@@Base+0x3510>
  4066aa:	je     4069d0 <_start@@Base+0x35b0>
  4066b0:	mov    rdx,r15
  4066b3:	mov    rdi,rbx
  4066b6:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4066bb:	mov    r15,rax
  4066be:	jmp    406408 <_start@@Base+0x2fe8>
  4066c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4066c8:	lea    rdx,[rip+0x13965]        # 41a034 <_IO_stdin_used@@Base+0x34>
  4066cf:	movsxd rax,DWORD PTR [rdx+rcx*4]
  4066d3:	add    rax,rdx
  4066d6:	jmp    rax
  4066d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4066e0:	movsx  rsi,BYTE PTR [r13+0x6]
  4066e5:	shl    rsi,0x8
  4066e9:	movsx  rdx,BYTE PTR [r13+0x5]
  4066ee:	mov    rax,rdx
  4066f1:	shl    rax,0x10
  4066f5:	or     rsi,rax
  4066f8:	movsx  rdx,BYTE PTR [r13+0x4]
  4066fd:	mov    rax,rdx
  406700:	shl    rax,0x18
  406704:	or     rax,rsi
  406707:	movsx  rdx,BYTE PTR [r13+0x3]
  40670c:	mov    rsi,rdx
  40670f:	shl    rsi,0x20
  406713:	or     rax,rsi
  406716:	movsx  rdx,BYTE PTR [r13+0x2]
  40671b:	mov    rsi,rdx
  40671e:	shl    rsi,0x28
  406722:	or     rsi,rax
  406725:	movsx  rdx,BYTE PTR [r13+0x1]
  40672a:	mov    rax,rdx
  40672d:	shl    rax,0x30
  406731:	or     rsi,rax
  406734:	movsx  rdx,BYTE PTR [r13+0x0]
  406739:	mov    rax,rdx
  40673c:	shl    rax,0x38
  406740:	or     rax,rsi
  406743:	jmp    4064db <_start@@Base+0x30bb>
  406748:	nop    DWORD PTR [rax+rax*1+0x0]
  406750:	xor    esi,esi
  406752:	jmp    4066e9 <_start@@Base+0x32c9>
  406754:	nop    DWORD PTR [rax+0x0]
  406758:	xor    esi,esi
  40675a:	jmp    4066f8 <_start@@Base+0x32d8>
  40675c:	nop    DWORD PTR [rax+0x0]
  406760:	xor    eax,eax
  406762:	jmp    406707 <_start@@Base+0x32e7>
  406764:	nop    DWORD PTR [rax+0x0]
  406768:	xor    eax,eax
  40676a:	jmp    406716 <_start@@Base+0x32f6>
  40676c:	nop    DWORD PTR [rax+0x0]
  406770:	xor    esi,esi
  406772:	jmp    406725 <_start@@Base+0x3305>
  406774:	nop    DWORD PTR [rax+0x0]
  406778:	xor    esi,esi
  40677a:	jmp    406734 <_start@@Base+0x3314>
  40677c:	nop    DWORD PTR [rax+0x0]
  406780:	add    r13,0x1
  406784:	mov    rcx,r15
  406787:	mov    DWORD PTR [rbx+0x14],0x0
  40678e:	sub    rcx,r13
  406791:	jmp    4064cb <_start@@Base+0x30ab>
  406796:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4067a0:	cmp    BYTE PTR [rax+0x1],0x20
  4067a4:	jle    406555 <_start@@Base+0x3135>
  4067aa:	add    rax,0x1
  4067ae:	jmp    406563 <_start@@Base+0x3143>
  4067b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4067b8:	lea    r13,[rax+0x1]
  4067bc:	mov    rdx,r15
  4067bf:	sub    rdx,r13
  4067c2:	cmp    rdx,0x1
  4067c6:	jle    4067d4 <_start@@Base+0x33b4>
  4067c8:	cmp    BYTE PTR [rax+0x1],0x20
  4067cc:	jg     4067e5 <_start@@Base+0x33c5>
  4067ce:	je     406a58 <_start@@Base+0x3638>
  4067d4:	mov    rsi,r13
  4067d7:	mov    rdx,r15
  4067da:	mov    rdi,rbx
  4067dd:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4067e2:	mov    r13,rax
  4067e5:	cmp    r15,r13
  4067e8:	je     406a6f <_start@@Base+0x364f>
  4067ee:	cmp    BYTE PTR [r13+0x0],0x7d
  4067f3:	jne    4064a0 <_start@@Base+0x3080>
  4067f9:	lea    rsi,[r13+0x1]
  4067fd:	mov    rax,r15
  406800:	sub    rax,rsi
  406803:	cmp    rax,0x1
  406807:	jle    4066b0 <_start@@Base+0x3290>
  40680d:	cmp    BYTE PTR [r13+0x1],0x20
  406812:	jg     406930 <_start@@Base+0x3510>
  406818:	jne    4066b0 <_start@@Base+0x3290>
  40681e:	cmp    BYTE PTR [r13+0x2],0x20
  406823:	jle    4066b0 <_start@@Base+0x3290>
  406829:	lea    r15,[r13+0x2]
  40682d:	jmp    406408 <_start@@Base+0x2fe8>
  406832:	nop    WORD PTR [rax+rax*1+0x0]
  406838:	cmp    BYTE PTR [r13+0x1],0x22
  40683d:	jne    406530 <_start@@Base+0x3110>
  406843:	lea    rsi,[r13+0x2]
  406847:	mov    rax,r15
  40684a:	sub    rax,rsi
  40684d:	cmp    rax,0x1
  406851:	jle    40685e <_start@@Base+0x343e>
  406853:	cmp    BYTE PTR [rsi],0x20
  406856:	jg     40686c <_start@@Base+0x344c>
  406858:	je     406ac0 <_start@@Base+0x36a0>
  40685e:	mov    rdx,r15
  406861:	mov    rdi,rbx
  406864:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406869:	mov    rsi,rax
  40686c:	cmp    r15,rsi
  40686f:	je     40687a <_start@@Base+0x345a>
  406871:	cmp    BYTE PTR [rsi],0x3a
  406874:	je     406aeb <_start@@Base+0x36cb>
  40687a:	mov    ecx,0x4
  40687f:	mov    rdx,r15
  406882:	mov    rdi,rbx
  406885:	call   416820 <flatcc_json_parser_set_error@@Base>
  40688a:	mov    r14,rax
  40688d:	cmp    r14,r13
  406890:	je     406530 <_start@@Base+0x3110>
  406896:	xor    edi,edi
  406898:	cmp    r15,r14
  40689b:	mov    QWORD PTR [rsp+0x30],0x0
  4068a4:	mov    WORD PTR [rsp+0x2a],di
  4068a9:	mov    DWORD PTR [rsp+0x2c],0x0
  4068b1:	je     406a20 <_start@@Base+0x3600>
  4068b7:	mov    r8,QWORD PTR [rsp+0x8]
  4068bc:	mov    rcx,QWORD PTR [rsp+0x10]
  4068c1:	mov    rdx,r15
  4068c4:	mov    rsi,r14
  4068c7:	mov    rdi,rbx
  4068ca:	call   4183c0 <flatcc_json_parser_integer@@Base>
  4068cf:	cmp    r14,rax
  4068d2:	je     406a20 <_start@@Base+0x3600>
  4068d8:	mov    esi,DWORD PTR [rsp+0x2c]
  4068dc:	mov    rdx,QWORD PTR [rsp+0x30]
  4068e1:	test   esi,esi
  4068e3:	mov    ecx,edx
  4068e5:	je     406900 <_start@@Base+0x34e0>
  4068e7:	neg    ecx
  4068e9:	cmp    rdx,0x8000
  4068f0:	ja     4069e8 <_start@@Base+0x35c8>
  4068f6:	mov    WORD PTR [r12],cx
  4068fb:	jmp    40653e <_start@@Base+0x311e>
  406900:	cmp    rdx,0x7fff
  406907:	jbe    4068f6 <_start@@Base+0x34d6>
  406909:	mov    ecx,0x7
  40690e:	mov    rdx,r15
  406911:	mov    rsi,rax
  406914:	mov    rdi,rbx
  406917:	call   416820 <flatcc_json_parser_set_error@@Base>
  40691c:	cmp    r14,rax
  40691f:	je     406a20 <_start@@Base+0x3600>
  406925:	movzx  ecx,WORD PTR [rsp+0x2a]
  40692a:	jmp    4068f6 <_start@@Base+0x34d6>
  40692c:	nop    DWORD PTR [rax+0x0]
  406930:	mov    r15,rsi
  406933:	jmp    406408 <_start@@Base+0x2fe8>
  406938:	nop    DWORD PTR [rax+rax*1+0x0]
  406940:	cmp    BYTE PTR [r13+0x1],0x22
  406945:	jne    406530 <_start@@Base+0x3110>
  40694b:	lea    rsi,[r13+0x2]
  40694f:	jmp    4065cf <_start@@Base+0x31af>
  406954:	nop    DWORD PTR [rax+0x0]
  406958:	cmp    rdx,0x7f
  40695c:	jbe    406682 <_start@@Base+0x3262>
  406962:	mov    ecx,0x7
  406967:	mov    rdx,r15
  40696a:	mov    rsi,rax
  40696d:	mov    rdi,rbx
  406970:	call   416820 <flatcc_json_parser_set_error@@Base>
  406975:	cmp    r14,rax
  406978:	je     406a90 <_start@@Base+0x3670>
  40697e:	movzx  ecx,BYTE PTR [rsp+0x2a]
  406983:	jmp    406682 <_start@@Base+0x3262>
  406988:	nop    DWORD PTR [rax+rax*1+0x0]
  406990:	mov    ecx,0x5
  406995:	mov    rsi,r13
  406998:	mov    rdx,r15
  40699b:	mov    rdi,rbx
  40699e:	call   416820 <flatcc_json_parser_set_error@@Base>
  4069a3:	mov    rcx,r15
  4069a6:	mov    r13,rax
  4069a9:	sub    rcx,rax
  4069ac:	jmp    4064cb <_start@@Base+0x30ab>
  4069b1:	nop    DWORD PTR [rax+0x0]
  4069b8:	lea    rsi,[r13+0x1]
  4069bc:	mov    DWORD PTR [rbx+0x14],0x0
  4069c3:	jmp    406847 <_start@@Base+0x3427>
  4069c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4069d0:	cmp    BYTE PTR [rax+0x2],0x20
  4069d4:	jle    4066b0 <_start@@Base+0x3290>
  4069da:	lea    r15,[rax+0x2]
  4069de:	jmp    406408 <_start@@Base+0x2fe8>
  4069e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4069e8:	mov    ecx,0x8
  4069ed:	mov    rdx,r15
  4069f0:	mov    rsi,rax
  4069f3:	mov    rdi,rbx
  4069f6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4069fb:	jmp    40691c <_start@@Base+0x34fc>
  406a00:	mov    ecx,0x8
  406a05:	mov    rdx,r15
  406a08:	mov    rsi,rax
  406a0b:	mov    rdi,rbx
  406a0e:	call   416820 <flatcc_json_parser_set_error@@Base>
  406a13:	jmp    406975 <_start@@Base+0x3555>
  406a18:	nop    DWORD PTR [rax+rax*1+0x0]
  406a20:	mov    r8,QWORD PTR [rsp+0x18]
  406a25:	lea    rcx,[rip+0x1a734]        # 421160 <__data_start@@Base+0xa0>
  406a2c:	mov    rdx,r15
  406a2f:	mov    rsi,r14
  406a32:	mov    rdi,rbx
  406a35:	call   405c90 <_start@@Base+0x2870>
  406a3a:	cmp    rax,r14
  406a3d:	je     406a48 <_start@@Base+0x3628>
  406a3f:	cmp    r15,rax
  406a42:	jne    406925 <_start@@Base+0x3505>
  406a48:	mov    ecx,0x21
  406a4d:	jmp    406586 <_start@@Base+0x3166>
  406a52:	nop    WORD PTR [rax+rax*1+0x0]
  406a58:	cmp    BYTE PTR [rax+0x2],0x20
  406a5c:	jle    4067d4 <_start@@Base+0x33b4>
  406a62:	lea    r13,[rax+0x2]
  406a66:	cmp    r15,r13
  406a69:	jne    4067ee <_start@@Base+0x33ce>
  406a6f:	mov    rdx,r15
  406a72:	mov    rsi,r15
  406a75:	mov    ecx,0xa
  406a7a:	mov    rdi,rbx
  406a7d:	call   416820 <flatcc_json_parser_set_error@@Base>
  406a82:	mov    r15,rax
  406a85:	jmp    406408 <_start@@Base+0x2fe8>
  406a8a:	nop    WORD PTR [rax+rax*1+0x0]
  406a90:	mov    r8,QWORD PTR [rsp+0x18]
  406a95:	lea    rcx,[rip+0x1a6e4]        # 421180 <__data_start@@Base+0xc0>
  406a9c:	mov    rdx,r15
  406a9f:	mov    rsi,r14
  406aa2:	mov    rdi,rbx
  406aa5:	call   4055c0 <_start@@Base+0x21a0>
  406aaa:	cmp    rax,r14
  406aad:	je     406a48 <_start@@Base+0x3628>
  406aaf:	cmp    r15,rax
  406ab2:	jne    40697e <_start@@Base+0x355e>
  406ab8:	jmp    406a48 <_start@@Base+0x3628>
  406aba:	nop    WORD PTR [rax+rax*1+0x0]
  406ac0:	cmp    BYTE PTR [rsi+0x1],0x20
  406ac4:	jle    40685e <_start@@Base+0x343e>
  406aca:	add    rsi,0x1
  406ace:	jmp    40686c <_start@@Base+0x344c>
  406ad3:	nop    DWORD PTR [rax+rax*1+0x0]
  406ad8:	cmp    BYTE PTR [rsi+0x1],0x20
  406adc:	jle    4065e6 <_start@@Base+0x31c6>
  406ae2:	add    rsi,0x1
  406ae6:	jmp    4065f4 <_start@@Base+0x31d4>
  406aeb:	lea    r14,[rsi+0x1]
  406aef:	mov    rax,r15
  406af2:	sub    rax,r14
  406af5:	cmp    rax,0x1
  406af9:	jle    406b07 <_start@@Base+0x36e7>
  406afb:	cmp    BYTE PTR [rsi+0x1],0x20
  406aff:	jg     40688d <_start@@Base+0x346d>
  406b05:	je     406b4f <_start@@Base+0x372f>
  406b07:	mov    rsi,r14
  406b0a:	mov    rdx,r15
  406b0d:	mov    rdi,rbx
  406b10:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406b15:	mov    r14,rax
  406b18:	jmp    40688d <_start@@Base+0x346d>
  406b1d:	lea    r14,[rsi+0x1]
  406b21:	mov    rax,r15
  406b24:	sub    rax,r14
  406b27:	cmp    rax,0x1
  406b2b:	jle    406b39 <_start@@Base+0x3719>
  406b2d:	cmp    BYTE PTR [rsi+0x1],0x20
  406b31:	jg     406615 <_start@@Base+0x31f5>
  406b37:	je     406b71 <_start@@Base+0x3751>
  406b39:	mov    rsi,r14
  406b3c:	mov    rdx,r15
  406b3f:	mov    rdi,rbx
  406b42:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406b47:	mov    r14,rax
  406b4a:	jmp    406615 <_start@@Base+0x31f5>
  406b4f:	cmp    BYTE PTR [rsi+0x2],0x20
  406b53:	jle    406b07 <_start@@Base+0x36e7>
  406b55:	lea    r14,[rsi+0x2]
  406b59:	jmp    40688d <_start@@Base+0x346d>
  406b5e:	cmp    BYTE PTR [rsi+0x2],0x20
  406b62:	jle    40644d <_start@@Base+0x302d>
  406b68:	lea    r13,[rsi+0x2]
  406b6c:	jmp    40645e <_start@@Base+0x303e>
  406b71:	cmp    BYTE PTR [rsi+0x2],0x20
  406b75:	jle    406b39 <_start@@Base+0x3719>
  406b77:	lea    r14,[rsi+0x2]
  406b7b:	jmp    406615 <_start@@Base+0x31f5>
  406b80:	lea    rsi,[r13+0x1]
  406b84:	mov    rdx,r15
  406b87:	mov    rdi,rbx
  406b8a:	call   403680 <_start@@Base+0x260>
  406b8f:	mov    r15,rax
  406b92:	jmp    406408 <_start@@Base+0x2fe8>
  406b97:	call   403080 <__stack_chk_fail@plt>
  406b9c:	nop    DWORD PTR [rax+0x0]
  406ba0:	push   r15
  406ba2:	push   r14
  406ba4:	mov    r15,rcx
  406ba7:	push   r13
  406ba9:	push   r12
  406bab:	mov    r13,rdx
  406bae:	push   rbp
  406baf:	push   rbx
  406bb0:	mov    rbx,rdi
  406bb3:	mov    r12,rsi
  406bb6:	mov    edx,0x4
  406bbb:	mov    esi,0x4
  406bc0:	sub    rsp,0x48
  406bc4:	mov    rdi,QWORD PTR [rdi]
  406bc7:	mov    DWORD PTR [rcx],0x0
  406bcd:	mov    rax,QWORD PTR fs:0x28
  406bd6:	mov    QWORD PTR [rsp+0x38],rax
  406bdb:	xor    eax,eax
  406bdd:	call   412630 <flatcc_builder_start_struct@@Base>
  406be2:	test   rax,rax
  406be5:	je     407248 <_start@@Base+0x3e28>
  406beb:	cmp    r12,r13
  406bee:	je     406bf7 <_start@@Base+0x37d7>
  406bf0:	cmp    BYTE PTR [r12],0x7b
  406bf5:	je     406c69 <_start@@Base+0x3849>
  406bf7:	mov    rsi,r12
  406bfa:	mov    ecx,0x15
  406bff:	mov    rdx,r13
  406c02:	mov    rdi,rbx
  406c05:	call   416820 <flatcc_json_parser_set_error@@Base>
  406c0a:	mov    rsi,rax
  406c0d:	nop    DWORD PTR [rax]
  406c10:	cmp    r13,rsi
  406c13:	je     406c30 <_start@@Base+0x3810>
  406c15:	mov    rdi,QWORD PTR [rbx]
  406c18:	mov    QWORD PTR [rsp],rsi
  406c1c:	call   4126e0 <flatcc_builder_end_struct@@Base>
  406c21:	test   eax,eax
  406c23:	mov    DWORD PTR [r15],eax
  406c26:	mov    rsi,QWORD PTR [rsp]
  406c2a:	jne    406c43 <_start@@Base+0x3823>
  406c2c:	nop    DWORD PTR [rax+0x0]
  406c30:	mov    ecx,0x21
  406c35:	mov    rdx,r13
  406c38:	mov    rdi,rbx
  406c3b:	call   416820 <flatcc_json_parser_set_error@@Base>
  406c40:	mov    rsi,rax
  406c43:	mov    rbx,QWORD PTR [rsp+0x38]
  406c48:	xor    rbx,QWORD PTR fs:0x28
  406c51:	mov    rax,rsi
  406c54:	jne    4072f6 <_start@@Base+0x3ed6>
  406c5a:	add    rsp,0x48
  406c5e:	pop    rbx
  406c5f:	pop    rbp
  406c60:	pop    r12
  406c62:	pop    r13
  406c64:	pop    r14
  406c66:	pop    r15
  406c68:	ret    
  406c69:	lea    rdi,[r12+0x1]
  406c6e:	mov    rbp,rax
  406c71:	mov    rax,r13
  406c74:	sub    rax,rdi
  406c77:	cmp    rax,0x1
  406c7b:	jle    406c8b <_start@@Base+0x386b>
  406c7d:	cmp    BYTE PTR [r12+0x1],0x20
  406c83:	jg     406c9c <_start@@Base+0x387c>
  406c85:	je     4072ba <_start@@Base+0x3e9a>
  406c8b:	mov    rsi,rdi
  406c8e:	mov    rdx,r13
  406c91:	mov    rdi,rbx
  406c94:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406c99:	mov    rdi,rax
  406c9c:	cmp    r13,rdi
  406c9f:	je     406caa <_start@@Base+0x388a>
  406ca1:	cmp    BYTE PTR [rdi],0x7d
  406ca4:	je     4072d0 <_start@@Base+0x3eb0>
  406caa:	lea    rax,[rsp+0x28]
  406caf:	lea    r12,[rip+0x133be]        # 41a074 <_IO_stdin_used@@Base+0x74>
  406cb6:	mov    QWORD PTR [rsp+0x18],rax
  406cbb:	lea    rax,[rsp+0x30]
  406cc0:	mov    QWORD PTR [rsp],rax
  406cc4:	lea    rax,[rsp+0x2c]
  406cc9:	mov    QWORD PTR [rsp+0x8],rax
  406cce:	xchg   ax,ax
  406cd0:	cmp    r13,rdi
  406cd3:	je     406e90 <_start@@Base+0x3a70>
  406cd9:	movzx  eax,BYTE PTR [rdi]
  406cdc:	cmp    al,0x22
  406cde:	je     406ef0 <_start@@Base+0x3ad0>
  406ce4:	cmp    al,0x2e
  406ce6:	je     407168 <_start@@Base+0x3d48>
  406cec:	mov    DWORD PTR [rbx+0x14],0x1
  406cf3:	mov    rax,r13
  406cf6:	sub    rax,rdi
  406cf9:	cmp    rax,0x7
  406cfd:	jbe    406f10 <_start@@Base+0x3af0>
  406d03:	movbe  rax,QWORD PTR [rdi]
  406d08:	movabs rdx,0x626f6f6b735f7265
  406d12:	cmp    rax,rdx
  406d15:	jne    406e90 <_start@@Base+0x3a70>
  406d1b:	lea    r8,[rdi+0x8]
  406d1f:	mov    rcx,r13
  406d22:	sub    rcx,r8
  406d25:	cmp    rcx,0x7
  406d29:	ja     406ea8 <_start@@Base+0x3a88>
  406d2f:	lea    rdx,[rip+0x1331e]        # 41a054 <_IO_stdin_used@@Base+0x54>
  406d36:	movsxd rax,DWORD PTR [rdx+rcx*4]
  406d3a:	add    rax,rdx
  406d3d:	jmp    rax
  406d3f:	nop
  406d40:	movsx  rsi,BYTE PTR [rdi+0xe]
  406d45:	shl    rsi,0x8
  406d49:	movsx  rdx,BYTE PTR [rdi+0xd]
  406d4e:	mov    rax,rdx
  406d51:	shl    rax,0x10
  406d55:	or     rsi,rax
  406d58:	movsx  rdx,BYTE PTR [rdi+0xc]
  406d5d:	mov    rax,rdx
  406d60:	shl    rax,0x18
  406d64:	or     rax,rsi
  406d67:	movsx  rdx,BYTE PTR [rdi+0xb]
  406d6c:	mov    rsi,rdx
  406d6f:	shl    rsi,0x20
  406d73:	or     rax,rsi
  406d76:	movsx  rdx,BYTE PTR [rdi+0xa]
  406d7b:	mov    rsi,rdx
  406d7e:	shl    rsi,0x28
  406d82:	or     rsi,rax
  406d85:	movsx  rdx,BYTE PTR [rdi+0x9]
  406d8a:	mov    rax,rdx
  406d8d:	shl    rax,0x30
  406d91:	or     rsi,rax
  406d94:	movsx  rdx,BYTE PTR [rdi+0x8]
  406d99:	mov    rax,rdx
  406d9c:	shl    rax,0x38
  406da0:	or     rax,rsi
  406da3:	movabs rdx,0xffff000000000000
  406dad:	and    rax,rdx
  406db0:	movabs rdx,0x6164000000000000
  406dba:	cmp    rax,rdx
  406dbd:	jne    406dc9 <_start@@Base+0x39a9>
  406dbf:	cmp    rcx,0x2
  406dc3:	jg     407070 <_start@@Base+0x3c50>
  406dc9:	mov    rdx,r13
  406dcc:	mov    rsi,r8
  406dcf:	mov    rdi,rbx
  406dd2:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  406dd7:	mov    rdx,r13
  406dda:	sub    rdx,rax
  406ddd:	cmp    rdx,0x1
  406de1:	jle    406dee <_start@@Base+0x39ce>
  406de3:	cmp    BYTE PTR [rax],0x20
  406de6:	jg     406dfc <_start@@Base+0x39dc>
  406de8:	je     406fc0 <_start@@Base+0x3ba0>
  406dee:	mov    rdx,r13
  406df1:	mov    rsi,rax
  406df4:	mov    rdi,rbx
  406df7:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406dfc:	cmp    r13,rax
  406dff:	je     406fe0 <_start@@Base+0x3bc0>
  406e05:	movzx  edx,BYTE PTR [rax]
  406e08:	cmp    dl,0x2c
  406e0b:	je     406ff0 <_start@@Base+0x3bd0>
  406e11:	cmp    dl,0x7d
  406e14:	je     406eb8 <_start@@Base+0x3a98>
  406e1a:	mov    ecx,0xa
  406e1f:	mov    rsi,rax
  406e22:	mov    rdx,r13
  406e25:	mov    rdi,rbx
  406e28:	call   416820 <flatcc_json_parser_set_error@@Base>
  406e2d:	mov    rsi,rax
  406e30:	jmp    406c10 <_start@@Base+0x37f0>
  406e35:	nop    DWORD PTR [rax]
  406e38:	xor    esi,esi
  406e3a:	jmp    406d49 <_start@@Base+0x3929>
  406e3f:	nop
  406e40:	xor    eax,eax
  406e42:	jmp    406d67 <_start@@Base+0x3947>
  406e47:	nop    WORD PTR [rax+rax*1+0x0]
  406e50:	xor    eax,eax
  406e52:	jmp    406d76 <_start@@Base+0x3956>
  406e57:	nop    WORD PTR [rax+rax*1+0x0]
  406e60:	xor    esi,esi
  406e62:	jmp    406d85 <_start@@Base+0x3965>
  406e67:	nop    WORD PTR [rax+rax*1+0x0]
  406e70:	xor    esi,esi
  406e72:	jmp    406d94 <_start@@Base+0x3974>
  406e77:	nop    WORD PTR [rax+rax*1+0x0]
  406e80:	xor    esi,esi
  406e82:	jmp    406d58 <_start@@Base+0x3938>
  406e87:	nop    WORD PTR [rax+rax*1+0x0]
  406e90:	mov    rsi,rdi
  406e93:	mov    rdx,r13
  406e96:	mov    rdi,rbx
  406e99:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  406e9e:	jmp    406dd7 <_start@@Base+0x39b7>
  406ea3:	nop    DWORD PTR [rax+rax*1+0x0]
  406ea8:	movbe  rax,QWORD PTR [rdi+0x8]
  406eae:	jmp    406da3 <_start@@Base+0x3983>
  406eb3:	nop    DWORD PTR [rax+rax*1+0x0]
  406eb8:	lea    rsi,[rax+0x1]
  406ebc:	mov    rdx,r13
  406ebf:	sub    rdx,rsi
  406ec2:	cmp    rdx,0x1
  406ec6:	jle    406ed8 <_start@@Base+0x3ab8>
  406ec8:	cmp    BYTE PTR [rax+0x1],0x20
  406ecc:	jg     406c10 <_start@@Base+0x37f0>
  406ed2:	je     4071c8 <_start@@Base+0x3da8>
  406ed8:	mov    rdx,r13
  406edb:	mov    rdi,rbx
  406ede:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  406ee3:	mov    rsi,rax
  406ee6:	jmp    406c10 <_start@@Base+0x37f0>
  406eeb:	nop    DWORD PTR [rax+rax*1+0x0]
  406ef0:	add    rdi,0x1
  406ef4:	mov    rax,r13
  406ef7:	mov    DWORD PTR [rbx+0x14],0x0
  406efe:	sub    rax,rdi
  406f01:	cmp    rax,0x7
  406f05:	ja     406d03 <_start@@Base+0x38e3>
  406f0b:	nop    DWORD PTR [rax+rax*1+0x0]
  406f10:	movsxd rax,DWORD PTR [r12+rax*4]
  406f14:	add    rax,r12
  406f17:	jmp    rax
  406f19:	nop    DWORD PTR [rax+0x0]
  406f20:	movsx  rcx,BYTE PTR [rdi+0x6]
  406f25:	shl    rcx,0x8
  406f29:	movsx  rdx,BYTE PTR [rdi+0x5]
  406f2e:	mov    rax,rdx
  406f31:	shl    rax,0x10
  406f35:	or     rcx,rax
  406f38:	movsx  rdx,BYTE PTR [rdi+0x4]
  406f3d:	mov    rax,rdx
  406f40:	shl    rax,0x18
  406f44:	or     rax,rcx
  406f47:	movsx  rdx,BYTE PTR [rdi+0x3]
  406f4c:	mov    rcx,rdx
  406f4f:	shl    rcx,0x20
  406f53:	or     rax,rcx
  406f56:	movsx  rdx,BYTE PTR [rdi+0x2]
  406f5b:	mov    rcx,rdx
  406f5e:	shl    rcx,0x28
  406f62:	or     rcx,rax
  406f65:	movsx  rdx,BYTE PTR [rdi+0x1]
  406f6a:	mov    rax,rdx
  406f6d:	shl    rax,0x30
  406f71:	or     rcx,rax
  406f74:	movsx  rdx,BYTE PTR [rdi]
  406f78:	mov    rax,rdx
  406f7b:	shl    rax,0x38
  406f7f:	or     rax,rcx
  406f82:	jmp    406d08 <_start@@Base+0x38e8>
  406f87:	nop    WORD PTR [rax+rax*1+0x0]
  406f90:	xor    ecx,ecx
  406f92:	jmp    406f29 <_start@@Base+0x3b09>
  406f94:	nop    DWORD PTR [rax+0x0]
  406f98:	xor    ecx,ecx
  406f9a:	jmp    406f38 <_start@@Base+0x3b18>
  406f9c:	nop    DWORD PTR [rax+0x0]
  406fa0:	xor    eax,eax
  406fa2:	jmp    406f47 <_start@@Base+0x3b27>
  406fa4:	nop    DWORD PTR [rax+0x0]
  406fa8:	xor    eax,eax
  406faa:	jmp    406f56 <_start@@Base+0x3b36>
  406fac:	nop    DWORD PTR [rax+0x0]
  406fb0:	xor    ecx,ecx
  406fb2:	jmp    406f65 <_start@@Base+0x3b45>
  406fb4:	nop    DWORD PTR [rax+0x0]
  406fb8:	xor    ecx,ecx
  406fba:	jmp    406f74 <_start@@Base+0x3b54>
  406fbc:	nop    DWORD PTR [rax+0x0]
  406fc0:	cmp    BYTE PTR [rax+0x1],0x20
  406fc4:	jle    406dee <_start@@Base+0x39ce>
  406fca:	add    rax,0x1
  406fce:	cmp    r13,rax
  406fd1:	jne    406e05 <_start@@Base+0x39e5>
  406fd7:	nop    WORD PTR [rax+rax*1+0x0]
  406fe0:	mov    rsi,r13
  406fe3:	jmp    406c30 <_start@@Base+0x3810>
  406fe8:	nop    DWORD PTR [rax+rax*1+0x0]
  406ff0:	lea    rdi,[rax+0x1]
  406ff4:	mov    rdx,r13
  406ff7:	sub    rdx,rdi
  406ffa:	cmp    rdx,0x1
  406ffe:	jle    40700c <_start@@Base+0x3bec>
  407000:	cmp    BYTE PTR [rax+0x1],0x20
  407004:	jg     40701d <_start@@Base+0x3bfd>
  407006:	je     4071e0 <_start@@Base+0x3dc0>
  40700c:	mov    rsi,rdi
  40700f:	mov    rdx,r13
  407012:	mov    rdi,rbx
  407015:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40701a:	mov    rdi,rax
  40701d:	cmp    r13,rdi
  407020:	je     407250 <_start@@Base+0x3e30>
  407026:	cmp    BYTE PTR [rdi],0x7d
  407029:	jne    406cd0 <_start@@Base+0x38b0>
  40702f:	lea    rsi,[rdi+0x1]
  407033:	mov    rax,r13
  407036:	sub    rax,rsi
  407039:	cmp    rax,0x1
  40703d:	jle    406ed8 <_start@@Base+0x3ab8>
  407043:	cmp    BYTE PTR [rdi+0x1],0x20
  407047:	jg     406c10 <_start@@Base+0x37f0>
  40704d:	jne    406ed8 <_start@@Base+0x3ab8>
  407053:	cmp    BYTE PTR [rdi+0x2],0x20
  407057:	jle    406ed8 <_start@@Base+0x3ab8>
  40705d:	lea    rsi,[rdi+0x2]
  407061:	jmp    406c10 <_start@@Base+0x37f0>
  407066:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407070:	mov    r9d,DWORD PTR [rbx+0x14]
  407074:	test   r9d,r9d
  407077:	je     4071b0 <_start@@Base+0x3d90>
  40707d:	movzx  eax,BYTE PTR [rdi+0xa]
  407081:	cmp    al,0x20
  407083:	jle    40708d <_start@@Base+0x3c6d>
  407085:	cmp    al,0x3a
  407087:	jne    406dc9 <_start@@Base+0x39a9>
  40708d:	lea    rsi,[rdi+0xa]
  407091:	mov    DWORD PTR [rbx+0x14],0x0
  407098:	mov    rax,r13
  40709b:	sub    rax,rsi
  40709e:	cmp    rax,0x1
  4070a2:	jle    4070af <_start@@Base+0x3c8f>
  4070a4:	cmp    BYTE PTR [rsi],0x20
  4070a7:	jg     4070c7 <_start@@Base+0x3ca7>
  4070a9:	je     40726b <_start@@Base+0x3e4b>
  4070af:	mov    rdx,r13
  4070b2:	mov    rdi,rbx
  4070b5:	mov    QWORD PTR [rsp+0x10],r8
  4070ba:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4070bf:	mov    r8,QWORD PTR [rsp+0x10]
  4070c4:	mov    rsi,rax
  4070c7:	cmp    r13,rsi
  4070ca:	je     4070d5 <_start@@Base+0x3cb5>
  4070cc:	cmp    BYTE PTR [rsi],0x3a
  4070cf:	je     40727e <_start@@Base+0x3e5e>
  4070d5:	mov    ecx,0x4
  4070da:	mov    rdx,r13
  4070dd:	mov    rdi,rbx
  4070e0:	mov    QWORD PTR [rsp+0x10],r8
  4070e5:	call   416820 <flatcc_json_parser_set_error@@Base>
  4070ea:	mov    r8,QWORD PTR [rsp+0x10]
  4070ef:	mov    r14,rax
  4070f2:	cmp    r8,r14
  4070f5:	je     406dc9 <_start@@Base+0x39a9>
  4070fb:	cmp    r13,r14
  4070fe:	mov    DWORD PTR [rsp+0x28],0x0
  407106:	mov    QWORD PTR [rsp+0x30],0x0
  40710f:	mov    DWORD PTR [rsp+0x2c],0x0
  407117:	je     407210 <_start@@Base+0x3df0>
  40711d:	mov    r8,QWORD PTR [rsp]
  407121:	mov    rcx,QWORD PTR [rsp+0x8]
  407126:	mov    rdx,r13
  407129:	mov    rsi,r14
  40712c:	mov    rdi,rbx
  40712f:	call   4183c0 <flatcc_json_parser_integer@@Base>
  407134:	cmp    r14,rax
  407137:	je     407210 <_start@@Base+0x3df0>
  40713d:	mov    esi,DWORD PTR [rsp+0x2c]
  407141:	mov    rdx,QWORD PTR [rsp+0x30]
  407146:	test   esi,esi
  407148:	mov    ecx,edx
  40714a:	je     407188 <_start@@Base+0x3d68>
  40714c:	mov    esi,0x80000000
  407151:	neg    ecx
  407153:	cmp    rdx,rsi
  407156:	ja     4071f8 <_start@@Base+0x3dd8>
  40715c:	mov    DWORD PTR [rbp+0x0],ecx
  40715f:	jmp    406dd7 <_start@@Base+0x39b7>
  407164:	nop    DWORD PTR [rax+0x0]
  407168:	mov    rsi,rdi
  40716b:	mov    ecx,0x5
  407170:	mov    rdi,rbx
  407173:	mov    rdx,r13
  407176:	call   416820 <flatcc_json_parser_set_error@@Base>
  40717b:	mov    rdi,rax
  40717e:	jmp    406cf3 <_start@@Base+0x38d3>
  407183:	nop    DWORD PTR [rax+rax*1+0x0]
  407188:	cmp    rdx,0x7fffffff
  40718f:	jbe    40715c <_start@@Base+0x3d3c>
  407191:	mov    ecx,0x7
  407196:	mov    rdx,r13
  407199:	mov    rsi,rax
  40719c:	mov    rdi,rbx
  40719f:	call   416820 <flatcc_json_parser_set_error@@Base>
  4071a4:	cmp    r14,rax
  4071a7:	je     407210 <_start@@Base+0x3df0>
  4071a9:	mov    ecx,DWORD PTR [rsp+0x28]
  4071ad:	jmp    40715c <_start@@Base+0x3d3c>
  4071af:	nop
  4071b0:	cmp    BYTE PTR [rdi+0xa],0x22
  4071b4:	jne    406dc9 <_start@@Base+0x39a9>
  4071ba:	lea    rsi,[rdi+0xb]
  4071be:	jmp    407098 <_start@@Base+0x3c78>
  4071c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4071c8:	cmp    BYTE PTR [rax+0x2],0x20
  4071cc:	jle    406ed8 <_start@@Base+0x3ab8>
  4071d2:	lea    rsi,[rax+0x2]
  4071d6:	jmp    406c10 <_start@@Base+0x37f0>
  4071db:	nop    DWORD PTR [rax+rax*1+0x0]
  4071e0:	cmp    BYTE PTR [rax+0x2],0x20
  4071e4:	jle    40700c <_start@@Base+0x3bec>
  4071ea:	lea    rdi,[rax+0x2]
  4071ee:	jmp    40701d <_start@@Base+0x3bfd>
  4071f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4071f8:	mov    ecx,0x8
  4071fd:	mov    rdx,r13
  407200:	mov    rsi,rax
  407203:	mov    rdi,rbx
  407206:	call   416820 <flatcc_json_parser_set_error@@Base>
  40720b:	jmp    4071a4 <_start@@Base+0x3d84>
  40720d:	nop    DWORD PTR [rax]
  407210:	mov    r8,QWORD PTR [rsp+0x18]
  407215:	lea    rcx,[rip+0x1a024]        # 421240 <__data_start@@Base+0x180>
  40721c:	mov    rdx,r13
  40721f:	mov    rsi,r14
  407222:	mov    rdi,rbx
  407225:	call   405370 <_start@@Base+0x1f50>
  40722a:	cmp    rax,r14
  40722d:	je     407238 <_start@@Base+0x3e18>
  40722f:	cmp    r13,rax
  407232:	jne    4071a9 <_start@@Base+0x3d89>
  407238:	mov    ecx,0x21
  40723d:	jmp    406e1f <_start@@Base+0x39ff>
  407242:	nop    WORD PTR [rax+rax*1+0x0]
  407248:	mov    rsi,r12
  40724b:	jmp    406c30 <_start@@Base+0x3810>
  407250:	mov    rsi,r13
  407253:	mov    ecx,0xa
  407258:	mov    rdx,r13
  40725b:	mov    rdi,rbx
  40725e:	call   416820 <flatcc_json_parser_set_error@@Base>
  407263:	mov    rsi,rax
  407266:	jmp    406c10 <_start@@Base+0x37f0>
  40726b:	cmp    BYTE PTR [rsi+0x1],0x20
  40726f:	jle    4070af <_start@@Base+0x3c8f>
  407275:	add    rsi,0x1
  407279:	jmp    4070c7 <_start@@Base+0x3ca7>
  40727e:	lea    r14,[rsi+0x1]
  407282:	mov    rax,r13
  407285:	sub    rax,r14
  407288:	cmp    rax,0x1
  40728c:	jle    40729a <_start@@Base+0x3e7a>
  40728e:	cmp    BYTE PTR [rsi+0x1],0x20
  407292:	jg     4070f2 <_start@@Base+0x3cd2>
  407298:	je     4072e7 <_start@@Base+0x3ec7>
  40729a:	mov    rsi,r14
  40729d:	mov    rdx,r13
  4072a0:	mov    rdi,rbx
  4072a3:	mov    QWORD PTR [rsp+0x10],r8
  4072a8:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4072ad:	mov    r8,QWORD PTR [rsp+0x10]
  4072b2:	mov    r14,rax
  4072b5:	jmp    4070f2 <_start@@Base+0x3cd2>
  4072ba:	cmp    BYTE PTR [r12+0x2],0x20
  4072c0:	jle    406c8b <_start@@Base+0x386b>
  4072c6:	lea    rdi,[r12+0x2]
  4072cb:	jmp    406c9c <_start@@Base+0x387c>
  4072d0:	lea    rsi,[rdi+0x1]
  4072d4:	mov    rdx,r13
  4072d7:	mov    rdi,rbx
  4072da:	call   403680 <_start@@Base+0x260>
  4072df:	mov    rsi,rax
  4072e2:	jmp    406c10 <_start@@Base+0x37f0>
  4072e7:	cmp    BYTE PTR [rsi+0x2],0x20
  4072eb:	jle    40729a <_start@@Base+0x3e7a>
  4072ed:	lea    r14,[rsi+0x2]
  4072f1:	jmp    4070f2 <_start@@Base+0x3cd2>
  4072f6:	call   403080 <__stack_chk_fail@plt>
  4072fb:	nop    DWORD PTR [rax+rax*1+0x0]
  407300:	mov    rax,rdx
  407303:	push   r12
  407305:	mov    r12,r8
  407308:	sub    rax,rsi
  40730b:	push   rbp
  40730c:	mov    rbp,rcx
  40730f:	cmp    rax,0x7
  407313:	push   rbx
  407314:	mov    rbx,rsi
  407317:	ja     407330 <_start@@Base+0x3f10>
  407319:	lea    rcx,[rip+0x12d74]        # 41a094 <_IO_stdin_used@@Base+0x94>
  407320:	movsxd rax,DWORD PTR [rcx+rax*4]
  407324:	add    rax,rcx
  407327:	jmp    rax
  407329:	nop    DWORD PTR [rax+0x0]
  407330:	movbe  rax,QWORD PTR [rsi]
  407335:	movabs rcx,0xff00000000000000
  40733f:	and    rax,rcx
  407342:	movabs rcx,0x7800000000000000
  40734c:	cmp    rax,rcx
  40734f:	jne    407378 <_start@@Base+0x3f58>
  407351:	mov    r8,r9
  407354:	mov    ecx,0x1
  407359:	mov    rsi,rbx
  40735c:	call   417370 <flatcc_json_parser_match_constant@@Base>
  407361:	cmp    rbx,rax
  407364:	je     407378 <_start@@Base+0x3f58>
  407366:	mov    QWORD PTR [r12],0x0
  40736e:	mov    rbx,rax
  407371:	mov    DWORD PTR [rbp+0x0],0x0
  407378:	mov    rax,rbx
  40737b:	pop    rbx
  40737c:	pop    rbp
  40737d:	pop    r12
  40737f:	ret    
  407380:	movsx  rsi,BYTE PTR [rsi+0x6]
  407385:	shl    rsi,0x8
  407389:	movsx  rcx,BYTE PTR [rbx+0x5]
  40738e:	mov    rax,rcx
  407391:	shl    rax,0x10
  407395:	or     rsi,rax
  407398:	movsx  rcx,BYTE PTR [rbx+0x4]
  40739d:	mov    rax,rcx
  4073a0:	shl    rax,0x18
  4073a4:	or     rax,rsi
  4073a7:	movsx  rcx,BYTE PTR [rbx+0x3]
  4073ac:	mov    rsi,rcx
  4073af:	shl    rsi,0x20
  4073b3:	or     rax,rsi
  4073b6:	movsx  rcx,BYTE PTR [rbx+0x2]
  4073bb:	mov    rsi,rcx
  4073be:	shl    rsi,0x28
  4073c2:	or     rsi,rax
  4073c5:	movsx  rcx,BYTE PTR [rbx+0x1]
  4073ca:	mov    rax,rcx
  4073cd:	shl    rax,0x30
  4073d1:	or     rsi,rax
  4073d4:	movsx  rcx,BYTE PTR [rbx]
  4073d8:	mov    rax,rcx
  4073db:	shl    rax,0x38
  4073df:	or     rax,rsi
  4073e2:	jmp    407335 <_start@@Base+0x3f15>
  4073e7:	nop    WORD PTR [rax+rax*1+0x0]
  4073f0:	xor    eax,eax
  4073f2:	jmp    4073b6 <_start@@Base+0x3f96>
  4073f4:	nop    DWORD PTR [rax+0x0]
  4073f8:	xor    eax,eax
  4073fa:	jmp    4073a7 <_start@@Base+0x3f87>
  4073fc:	nop    DWORD PTR [rax+0x0]
  407400:	xor    esi,esi
  407402:	jmp    407389 <_start@@Base+0x3f69>
  407404:	nop    DWORD PTR [rax+0x0]
  407408:	xor    esi,esi
  40740a:	jmp    407398 <_start@@Base+0x3f78>
  40740c:	nop    DWORD PTR [rax+0x0]
  407410:	xor    esi,esi
  407412:	jmp    4073c5 <_start@@Base+0x3fa5>
  407414:	nop    DWORD PTR [rax+0x0]
  407418:	xor    esi,esi
  40741a:	jmp    4073d4 <_start@@Base+0x3fb4>
  40741c:	nop    DWORD PTR [rax+0x0]
  407420:	mov    rax,rdx
  407423:	push   r14
  407425:	mov    r10,rsi
  407428:	sub    rax,rsi
  40742b:	push   r13
  40742d:	mov    r11,rdx
  407430:	cmp    rax,0x7
  407434:	push   r12
  407436:	mov    r12,rdi
  407439:	push   rbp
  40743a:	mov    rbp,r8
  40743d:	push   rbx
  40743e:	mov    rbx,rcx
  407441:	jbe    4075d0 <_start@@Base+0x41b0>
  407447:	movbe  rax,QWORD PTR [rsi]
  40744c:	movabs rdx,0x4d7947616d652e44
  407456:	cmp    rax,rdx
  407459:	ja     407480 <_start@@Base+0x4060>
  40745b:	movabs rdx,0x46616e746173792e
  407465:	cmp    rax,rdx
  407468:	je     4075e0 <_start@@Base+0x41c0>
  40746e:	pop    rbx
  40746f:	mov    rax,r10
  407472:	pop    rbp
  407473:	pop    r12
  407475:	pop    r13
  407477:	pop    r14
  407479:	ret    
  40747a:	nop    WORD PTR [rax+rax*1+0x0]
  407480:	movabs rdx,0x4d7947616d652e45
  40748a:	cmp    rax,rdx
  40748d:	je     407680 <_start@@Base+0x4260>
  407493:	movabs rdx,0x4d7947616d652e4f
  40749d:	cmp    rax,rdx
  4074a0:	jne    40746e <_start@@Base+0x404e>
  4074a2:	lea    rdi,[r10+0x8]
  4074a6:	mov    rax,r11
  4074a9:	sub    rax,rdi
  4074ac:	cmp    rax,0x7
  4074b0:	jbe    407818 <_start@@Base+0x43f8>
  4074b6:	movbe  rax,QWORD PTR [r10+0x8]
  4074bc:	movabs rdx,0x746865724e616d65
  4074c6:	cmp    rax,rdx
  4074c9:	jne    40746e <_start@@Base+0x404e>
  4074cb:	lea    rdi,[r10+0x10]
  4074cf:	mov    rax,r11
  4074d2:	sub    rax,rdi
  4074d5:	cmp    rax,0x7
  4074d9:	ja     407928 <_start@@Base+0x4508>
  4074df:	mov    rsi,r11
  4074e2:	call   403530 <_start@@Base+0x110>
  4074e7:	movabs rdx,0x53706163652e4672
  4074f1:	cmp    rax,rdx
  4074f4:	jne    40746e <_start@@Base+0x404e>
  4074fa:	lea    rdi,[r10+0x18]
  4074fe:	mov    rax,r11
  407501:	sub    rax,rdi
  407504:	cmp    rax,0x7
  407508:	jbe    407a68 <_start@@Base+0x4648>
  40750e:	movbe  rax,QWORD PTR [r10+0x18]
  407514:	movabs rdx,0x6f6d496e636c7564
  40751e:	cmp    rax,rdx
  407521:	jne    40746e <_start@@Base+0x404e>
  407527:	lea    rdi,[r10+0x20]
  40752b:	mov    r8,r11
  40752e:	sub    r8,rdi
  407531:	cmp    r8,0x7
  407535:	jbe    407aa9 <_start@@Base+0x4689>
  40753b:	movbe  rax,QWORD PTR [r10+0x20]
  407541:	movabs rdx,0xff00000000000000
  40754b:	and    rax,rdx
  40754e:	movabs rdx,0x6500000000000000
  407558:	cmp    rax,rdx
  40755b:	jne    40746e <_start@@Base+0x404e>
  407561:	cmp    r8,0x1
  407565:	jle    40746e <_start@@Base+0x404e>
  40756b:	cmp    BYTE PTR [r10+0x21],0x2e
  407570:	jne    40746e <_start@@Base+0x404e>
  407576:	lea    r13,[r10+0x22]
  40757a:	mov    rax,r11
  40757d:	sub    rax,r13
  407580:	cmp    rax,0x7
  407584:	jbe    407b02 <_start@@Base+0x46e2>
  40758a:	movbe  rax,QWORD PTR [r10+0x22]
  407590:	movabs rdx,0xffffff0000000000
  40759a:	movabs rcx,0x466f6f0000000000
  4075a4:	and    rdx,rax
  4075a7:	cmp    rdx,rcx
  4075aa:	je     407b9a <_start@@Base+0x477a>
  4075b0:	movabs rdx,0x496e636c75646556
  4075ba:	cmp    rax,rdx
  4075bd:	je     407b1f <_start@@Base+0x46ff>
  4075c3:	mov    r10,r13
  4075c6:	jmp    40746e <_start@@Base+0x404e>
  4075cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4075d0:	mov    rsi,rdx
  4075d3:	mov    rdi,r10
  4075d6:	call   403530 <_start@@Base+0x110>
  4075db:	jmp    40744c <_start@@Base+0x402c>
  4075e0:	lea    rdi,[r10+0x8]
  4075e4:	mov    rax,r11
  4075e7:	sub    rax,rdi
  4075ea:	cmp    rax,0x7
  4075ee:	jbe    407758 <_start@@Base+0x4338>
  4075f4:	movbe  rax,QWORD PTR [r10+0x8]
  4075fa:	movabs rdx,0x4368617261637465
  407604:	cmp    rax,rdx
  407607:	jne    40746e <_start@@Base+0x404e>
  40760d:	lea    rdi,[r10+0x10]
  407611:	mov    r8,r11
  407614:	sub    r8,rdi
  407617:	cmp    r8,0x7
  40761b:	ja     407828 <_start@@Base+0x4408>
  407621:	mov    rsi,r11
  407624:	call   403530 <_start@@Base+0x110>
  407629:	movabs rdx,0xff00000000000000
  407633:	and    rax,rdx
  407636:	movabs rdx,0x7200000000000000
  407640:	cmp    rax,rdx
  407643:	jne    40746e <_start@@Base+0x404e>
  407649:	cmp    r8,0x1
  40764d:	jle    40746e <_start@@Base+0x404e>
  407653:	cmp    BYTE PTR [r10+0x11],0x2e
  407658:	jne    40746e <_start@@Base+0x404e>
  40765e:	mov    r8,rbp
  407661:	mov    rcx,rbx
  407664:	mov    rdi,r12
  407667:	pop    rbx
  407668:	pop    rbp
  407669:	pop    r12
  40766b:	pop    r13
  40766d:	pop    r14
  40766f:	lea    rsi,[r10+0x12]
  407673:	mov    rdx,r11
  407676:	jmp    4036c0 <_start@@Base+0x2a0>
  40767b:	nop    DWORD PTR [rax+rax*1+0x0]
  407680:	lea    rdi,[r10+0x8]
  407684:	mov    rax,r11
  407687:	sub    rax,rdi
  40768a:	cmp    rax,0x7
  40768e:	jbe    407808 <_start@@Base+0x43e8>
  407694:	movbe  rax,QWORD PTR [r10+0x8]
  40769a:	movabs rdx,0x78616d706c652e67
  4076a4:	cmp    rax,rdx
  4076a7:	ja     407768 <_start@@Base+0x4348>
  4076ad:	movabs rdx,0x78616d706c652e42
  4076b7:	cmp    rax,rdx
  4076ba:	jbe    407838 <_start@@Base+0x4418>
  4076c0:	movabs rdx,0x78616d706c652e43
  4076ca:	cmp    rax,rdx
  4076cd:	je     407a00 <_start@@Base+0x45e0>
  4076d3:	movabs rdx,0x78616d706c652e46
  4076dd:	cmp    rax,rdx
  4076e0:	jne    40746e <_start@@Base+0x404e>
  4076e6:	lea    rdi,[r10+0x10]
  4076ea:	mov    r8,r11
  4076ed:	sub    r8,rdi
  4076f0:	cmp    r8,0x7
  4076f4:	jbe    407a9c <_start@@Base+0x467c>
  4076fa:	movbe  rax,QWORD PTR [r10+0x10]
  407700:	movabs rdx,0xffff000000000000
  40770a:	and    rax,rdx
  40770d:	movabs rdx,0x6f6f000000000000
  407717:	cmp    rax,rdx
  40771a:	jne    40746e <_start@@Base+0x404e>
  407720:	cmp    r8,0x2
  407724:	jle    40746e <_start@@Base+0x404e>
  40772a:	cmp    BYTE PTR [r10+0x12],0x2e
  40772f:	jne    40746e <_start@@Base+0x404e>
  407735:	mov    r8,rbp
  407738:	mov    rcx,rbx
  40773b:	mov    rdi,r12
  40773e:	pop    rbx
  40773f:	pop    rbp
  407740:	pop    r12
  407742:	pop    r13
  407744:	pop    r14
  407746:	lea    rsi,[r10+0x13]
  40774a:	mov    rdx,r11
  40774d:	jmp    403c50 <_start@@Base+0x830>
  407752:	nop    WORD PTR [rax+rax*1+0x0]
  407758:	mov    rsi,r11
  40775b:	call   403530 <_start@@Base+0x110>
  407760:	jmp    4075fa <_start@@Base+0x41da>
  407765:	nop    DWORD PTR [rax]
  407768:	movabs rdx,0x78616d706c652e68
  407772:	cmp    rax,rdx
  407775:	je     4078c0 <_start@@Base+0x44a0>
  40777b:	movabs rdx,0x78616d706c652e6d
  407785:	cmp    rax,rdx
  407788:	ja     407938 <_start@@Base+0x4518>
  40778e:	movabs rdx,0x78616d706c652e69
  407798:	cmp    rax,rdx
  40779b:	jne    40746e <_start@@Base+0x404e>
  4077a1:	lea    rdi,[r10+0x10]
  4077a5:	mov    r8,r11
  4077a8:	sub    r8,rdi
  4077ab:	cmp    r8,0x7
  4077af:	jbe    407ac3 <_start@@Base+0x46a3>
  4077b5:	movbe  rax,QWORD PTR [r10+0x10]
  4077bb:	xor    al,al
  4077bd:	movabs rdx,0x6e745f656e756d00
  4077c7:	cmp    rax,rdx
  4077ca:	jne    40746e <_start@@Base+0x404e>
  4077d0:	cmp    r8,0x7
  4077d4:	jle    40746e <_start@@Base+0x404e>
  4077da:	cmp    BYTE PTR [r10+0x17],0x2e
  4077df:	jne    40746e <_start@@Base+0x404e>
  4077e5:	mov    r8,rbp
  4077e8:	mov    rcx,rbx
  4077eb:	mov    rdi,r12
  4077ee:	pop    rbx
  4077ef:	pop    rbp
  4077f0:	pop    r12
  4077f2:	pop    r13
  4077f4:	pop    r14
  4077f6:	lea    rsi,[r10+0x18]
  4077fa:	mov    rdx,r11
  4077fd:	jmp    403f40 <_start@@Base+0xb20>
  407802:	nop    WORD PTR [rax+rax*1+0x0]
  407808:	mov    rsi,r11
  40780b:	call   403530 <_start@@Base+0x110>
  407810:	jmp    40769a <_start@@Base+0x427a>
  407815:	nop    DWORD PTR [rax]
  407818:	mov    rsi,r11
  40781b:	call   403530 <_start@@Base+0x110>
  407820:	jmp    4074bc <_start@@Base+0x409c>
  407825:	nop    DWORD PTR [rax]
  407828:	movbe  rax,QWORD PTR [r10+0x10]
  40782e:	jmp    407629 <_start@@Base+0x4209>
  407833:	nop    DWORD PTR [rax+rax*1+0x0]
  407838:	movabs rdx,0x78616d706c652e41
  407842:	cmp    rax,rdx
  407845:	jne    40746e <_start@@Base+0x404e>
  40784b:	lea    rdi,[r10+0x10]
  40784f:	mov    r8,r11
  407852:	sub    r8,rdi
  407855:	cmp    r8,0x7
  407859:	jbe    407a75 <_start@@Base+0x4655>
  40785f:	movbe  rax,QWORD PTR [r10+0x10]
  407865:	movabs rdx,0xffff000000000000
  40786f:	and    rax,rdx
  407872:	movabs rdx,0x6e79000000000000
  40787c:	cmp    rax,rdx
  40787f:	jne    40746e <_start@@Base+0x404e>
  407885:	cmp    r8,0x2
  407889:	jle    40746e <_start@@Base+0x404e>
  40788f:	cmp    BYTE PTR [r10+0x12],0x2e
  407894:	jne    40746e <_start@@Base+0x404e>
  40789a:	mov    r8,rbp
  40789d:	mov    rcx,rbx
  4078a0:	mov    rdi,r12
  4078a3:	pop    rbx
  4078a4:	pop    rbp
  4078a5:	pop    r12
  4078a7:	pop    r13
  4078a9:	pop    r14
  4078ab:	lea    rsi,[r10+0x13]
  4078af:	mov    rdx,r11
  4078b2:	jmp    4039a0 <_start@@Base+0x580>
  4078b7:	nop    WORD PTR [rax+rax*1+0x0]
  4078c0:	lea    rdi,[r10+0x10]
  4078c4:	mov    r8,r11
  4078c7:	sub    r8,rdi
  4078ca:	cmp    r8,0x7
  4078ce:	jbe    407a82 <_start@@Base+0x4662>
  4078d4:	movbe  rax,QWORD PTR [r10+0x10]
  4078da:	xor    al,al
  4078dc:	movabs rdx,0x65785f656e756d00
  4078e6:	cmp    rax,rdx
  4078e9:	jne    40746e <_start@@Base+0x404e>
  4078ef:	cmp    r8,0x7
  4078f3:	jle    40746e <_start@@Base+0x404e>
  4078f9:	cmp    BYTE PTR [r10+0x17],0x2e
  4078fe:	jne    40746e <_start@@Base+0x404e>
  407904:	mov    r8,rbp
  407907:	mov    rcx,rbx
  40790a:	mov    rdi,r12
  40790d:	pop    rbx
  40790e:	pop    rbp
  40790f:	pop    r12
  407911:	pop    r13
  407913:	pop    r14
  407915:	lea    rsi,[r10+0x18]
  407919:	mov    rdx,r11
  40791c:	jmp    403de0 <_start@@Base+0x9c0>
  407921:	nop    DWORD PTR [rax+0x0]
  407928:	movbe  rax,QWORD PTR [r10+0x10]
  40792e:	jmp    4074e7 <_start@@Base+0x40c7>
  407933:	nop    DWORD PTR [rax+rax*1+0x0]
  407938:	movabs rdx,0x78616d706c652e6e
  407942:	cmp    rax,rdx
  407945:	jne    40746e <_start@@Base+0x404e>
  40794b:	lea    rdi,[r10+0x10]
  40794f:	mov    r8,r11
  407952:	sub    r8,rdi
  407955:	cmp    r8,0x7
  407959:	jbe    407ab6 <_start@@Base+0x4696>
  40795f:	movbe  rax,QWORD PTR [r10+0x10]
  407965:	mov    rcx,rax
  407968:	movabs rdx,0x65675f656e756d00
  407972:	xor    cl,cl
  407974:	cmp    rcx,rdx
  407977:	je     407ad0 <_start@@Base+0x46b0>
  40797d:	movabs rdx,0x6f74656d70747965
  407987:	cmp    rax,rdx
  40798a:	jne    40746e <_start@@Base+0x404e>
  407990:	lea    rdi,[r10+0x18]
  407994:	mov    r8,r11
  407997:	sub    r8,rdi
  40799a:	cmp    r8,0x7
  40799e:	jbe    407b12 <_start@@Base+0x46f2>
  4079a4:	movbe  rax,QWORD PTR [r10+0x18]
  4079aa:	movabs rdx,0xffffff0000000000
  4079b4:	and    rax,rdx
  4079b7:	movabs rdx,0x6e756d0000000000
  4079c1:	cmp    rax,rdx
  4079c4:	jne    40746e <_start@@Base+0x404e>
  4079ca:	cmp    r8,0x3
  4079ce:	jle    40746e <_start@@Base+0x404e>
  4079d4:	cmp    BYTE PTR [r10+0x1b],0x2e
  4079d9:	jne    40746e <_start@@Base+0x404e>
  4079df:	mov    r8,rbp
  4079e2:	mov    rcx,rbx
  4079e5:	mov    rdi,r12
  4079e8:	pop    rbx
  4079e9:	pop    rbp
  4079ea:	pop    r12
  4079ec:	pop    r13
  4079ee:	pop    r14
  4079f0:	lea    rsi,[r10+0x1c]
  4079f4:	mov    rdx,r11
  4079f7:	jmp    407300 <_start@@Base+0x3ee0>
  4079fc:	nop    DWORD PTR [rax+0x0]
  407a00:	lea    rdi,[r10+0x10]
  407a04:	mov    r8,r11
  407a07:	sub    r8,rdi
  407a0a:	cmp    r8,0x7
  407a0e:	jbe    407a8f <_start@@Base+0x466f>
  407a10:	movbe  rax,QWORD PTR [r10+0x10]
  407a16:	movabs rdx,0xffffffff00000000
  407a20:	and    rax,rdx
  407a23:	movabs rdx,0x6f6c6f7200000000
  407a2d:	cmp    rax,rdx
  407a30:	jne    40746e <_start@@Base+0x404e>
  407a36:	cmp    r8,0x4
  407a3a:	jle    40746e <_start@@Base+0x404e>
  407a40:	cmp    BYTE PTR [r10+0x14],0x2e
  407a45:	jne    40746e <_start@@Base+0x404e>
  407a4b:	mov    r8,rbp
  407a4e:	mov    rcx,rbx
  407a51:	mov    rdi,r12
  407a54:	pop    rbx
  407a55:	pop    rbp
  407a56:	pop    r12
  407a58:	pop    r13
  407a5a:	pop    r14
  407a5c:	lea    rsi,[r10+0x15]
  407a60:	mov    rdx,r11
  407a63:	jmp    404240 <_start@@Base+0xe20>
  407a68:	mov    rsi,r11
  407a6b:	call   403530 <_start@@Base+0x110>
  407a70:	jmp    407514 <_start@@Base+0x40f4>
  407a75:	mov    rsi,r11
  407a78:	call   403530 <_start@@Base+0x110>
  407a7d:	jmp    407865 <_start@@Base+0x4445>
  407a82:	mov    rsi,r11
  407a85:	call   403530 <_start@@Base+0x110>
  407a8a:	jmp    4078da <_start@@Base+0x44ba>
  407a8f:	mov    rsi,r11
  407a92:	call   403530 <_start@@Base+0x110>
  407a97:	jmp    407a16 <_start@@Base+0x45f6>
  407a9c:	mov    rsi,r11
  407a9f:	call   403530 <_start@@Base+0x110>
  407aa4:	jmp    407700 <_start@@Base+0x42e0>
  407aa9:	mov    rsi,r11
  407aac:	call   403530 <_start@@Base+0x110>
  407ab1:	jmp    407541 <_start@@Base+0x4121>
  407ab6:	mov    rsi,r11
  407ab9:	call   403530 <_start@@Base+0x110>
  407abe:	jmp    407965 <_start@@Base+0x4545>
  407ac3:	mov    rsi,r11
  407ac6:	call   403530 <_start@@Base+0x110>
  407acb:	jmp    4077bb <_start@@Base+0x439b>
  407ad0:	cmp    r8,0x7
  407ad4:	jle    40746e <_start@@Base+0x404e>
  407ada:	cmp    BYTE PTR [r10+0x17],0x2e
  407adf:	jne    40746e <_start@@Base+0x404e>
  407ae5:	mov    r8,rbp
  407ae8:	mov    rcx,rbx
  407aeb:	mov    rdi,r12
  407aee:	pop    rbx
  407aef:	pop    rbp
  407af0:	pop    r12
  407af2:	pop    r13
  407af4:	pop    r14
  407af6:	lea    rsi,[r10+0x18]
  407afa:	mov    rdx,r11
  407afd:	jmp    4040f0 <_start@@Base+0xcd0>
  407b02:	mov    rsi,r11
  407b05:	mov    rdi,r13
  407b08:	call   403530 <_start@@Base+0x110>
  407b0d:	jmp    407590 <_start@@Base+0x4170>
  407b12:	mov    rsi,r11
  407b15:	call   403530 <_start@@Base+0x110>
  407b1a:	jmp    4079aa <_start@@Base+0x458a>
  407b1f:	lea    r14,[r10+0x2a]
  407b23:	mov    rax,r11
  407b26:	sub    rax,r14
  407b29:	cmp    rax,0x7
  407b2d:	jbe    407b8d <_start@@Base+0x476d>
  407b2f:	movbe  rax,QWORD PTR [r10+0x2a]
  407b35:	movabs rdx,0xffff000000000000
  407b3f:	mov    r10,r13
  407b42:	and    rax,rdx
  407b45:	movabs rdx,0x616c000000000000
  407b4f:	cmp    rax,rdx
  407b52:	jne    40746e <_start@@Base+0x404e>
  407b58:	mov    r8,r9
  407b5b:	mov    ecx,0x2
  407b60:	mov    rdx,r11
  407b63:	mov    rsi,r14
  407b66:	mov    rdi,r12
  407b69:	call   417370 <flatcc_json_parser_match_constant@@Base>
  407b6e:	cmp    r14,rax
  407b71:	mov    r10,rax
  407b74:	je     4075c3 <_start@@Base+0x41a3>
  407b7a:	mov    QWORD PTR [rbp+0x0],0x0
  407b82:	mov    DWORD PTR [rbx],0x0
  407b88:	jmp    40746e <_start@@Base+0x404e>
  407b8d:	mov    rsi,r11
  407b90:	mov    rdi,r14
  407b93:	call   403530 <_start@@Base+0x110>
  407b98:	jmp    407b35 <_start@@Base+0x4715>
  407b9a:	mov    r8,r9
  407b9d:	mov    ecx,0x3
  407ba2:	mov    rdx,r11
  407ba5:	mov    rsi,r13
  407ba8:	mov    rdi,r12
  407bab:	call   417370 <flatcc_json_parser_match_constant@@Base>
  407bb0:	cmp    r13,rax
  407bb3:	mov    r10,rax
  407bb6:	je     40746e <_start@@Base+0x404e>
  407bbc:	mov    QWORD PTR [rbp+0x0],0x11
  407bc4:	mov    DWORD PTR [rbx],0x0
  407bca:	jmp    40746e <_start@@Base+0x404e>
  407bcf:	nop
  407bd0:	push   r13
  407bd2:	push   r12
  407bd4:	mov    r10,rsi
  407bd7:	push   rbp
  407bd8:	push   rbx
  407bd9:	mov    rbx,rdx
  407bdc:	sub    rbx,rsi
  407bdf:	mov    rbp,rdi
  407be2:	mov    r11,rdx
  407be5:	sub    rsp,0x8
  407be9:	cmp    rbx,0x7
  407bed:	mov    r12,rcx
  407bf0:	jbe    407c58 <_start@@Base+0x4838>
  407bf2:	movbe  rax,QWORD PTR [rsi]
  407bf7:	movabs rdx,0x6865785f656e756c
  407c01:	cmp    rax,rdx
  407c04:	ja     407c72 <_start@@Base+0x4852>
  407c06:	movabs rdx,0x436f6c6f71ffffff
  407c10:	cmp    rax,rdx
  407c13:	movabs rdx,0xffffff0000000000
  407c1d:	ja     407d20 <_start@@Base+0x4900>
  407c23:	and    rax,rdx
  407c26:	movabs rdx,0x416e790000000000
  407c30:	cmp    rax,rdx
  407c33:	jne    407c46 <_start@@Base+0x4826>
  407c35:	cmp    rbx,0x3
  407c39:	jle    407c46 <_start@@Base+0x4826>
  407c3b:	cmp    BYTE PTR [r10+0x3],0x2e
  407c40:	je     407e58 <_start@@Base+0x4a38>
  407c46:	add    rsp,0x8
  407c4a:	mov    rax,r10
  407c4d:	pop    rbx
  407c4e:	pop    rbp
  407c4f:	pop    r12
  407c51:	pop    r13
  407c53:	ret    
  407c54:	nop    DWORD PTR [rax+0x0]
  407c58:	mov    rsi,rdx
  407c5b:	mov    rdi,r10
  407c5e:	call   403530 <_start@@Base+0x110>
  407c63:	movabs rdx,0x6865785f656e756c
  407c6d:	cmp    rax,rdx
  407c70:	jbe    407c06 <_start@@Base+0x47e6>
  407c72:	movabs rdx,0x696e745f656e756c
  407c7c:	cmp    rax,rdx
  407c7f:	ja     407cc0 <_start@@Base+0x48a0>
  407c81:	movabs rdx,0x6865785f656e756d
  407c8b:	cmp    rax,rdx
  407c8e:	jne    407c46 <_start@@Base+0x4826>
  407c90:	cmp    rbx,0x8
  407c94:	jle    407c46 <_start@@Base+0x4826>
  407c96:	cmp    BYTE PTR [r10+0x8],0x2e
  407c9b:	jne    407c46 <_start@@Base+0x4826>
  407c9d:	add    rsp,0x8
  407ca1:	mov    rcx,r12
  407ca4:	mov    rdi,rbp
  407ca7:	pop    rbx
  407ca8:	pop    rbp
  407ca9:	pop    r12
  407cab:	pop    r13
  407cad:	lea    rsi,[r10+0x9]
  407cb1:	mov    rdx,r11
  407cb4:	jmp    403de0 <_start@@Base+0x9c0>
  407cb9:	nop    DWORD PTR [rax+0x0]
  407cc0:	movabs rdx,0x6e65675f656e756c
  407cca:	cmp    rax,rdx
  407ccd:	ja     407d80 <_start@@Base+0x4960>
  407cd3:	movabs rdx,0x696e745f656e756d
  407cdd:	cmp    rax,rdx
  407ce0:	jne    407c46 <_start@@Base+0x4826>
  407ce6:	cmp    rbx,0x8
  407cea:	jle    407c46 <_start@@Base+0x4826>
  407cf0:	cmp    BYTE PTR [r10+0x8],0x2e
  407cf5:	jne    407c46 <_start@@Base+0x4826>
  407cfb:	add    rsp,0x8
  407cff:	mov    rcx,r12
  407d02:	mov    rdi,rbp
  407d05:	pop    rbx
  407d06:	pop    rbp
  407d07:	pop    r12
  407d09:	pop    r13
  407d0b:	lea    rsi,[r10+0x9]
  407d0f:	mov    rdx,r11
  407d12:	jmp    403f40 <_start@@Base+0xb20>
  407d17:	nop    WORD PTR [rax+rax*1+0x0]
  407d20:	and    rdx,rax
  407d23:	movabs rcx,0x466f6f0000000000
  407d2d:	cmp    rdx,rcx
  407d30:	je     407e20 <_start@@Base+0x4a00>
  407d36:	and    rax,0xffffffffff000000
  407d3c:	movabs rdx,0x436f6c6f72000000
  407d46:	cmp    rax,rdx
  407d49:	jne    407c46 <_start@@Base+0x4826>
  407d4f:	cmp    rbx,0x5
  407d53:	jle    407c46 <_start@@Base+0x4826>
  407d59:	cmp    BYTE PTR [r10+0x5],0x2e
  407d5e:	jne    407c46 <_start@@Base+0x4826>
  407d64:	add    rsp,0x8
  407d68:	mov    rcx,r12
  407d6b:	mov    rdi,rbp
  407d6e:	pop    rbx
  407d6f:	pop    rbp
  407d70:	pop    r12
  407d72:	pop    r13
  407d74:	lea    rsi,[r10+0x6]
  407d78:	mov    rdx,r11
  407d7b:	jmp    404240 <_start@@Base+0xe20>
  407d80:	movabs rdx,0x6e65675f656e756d
  407d8a:	cmp    rax,rdx
  407d8d:	je     407e78 <_start@@Base+0x4a58>
  407d93:	movabs rdx,0x6e6f74656d707479
  407d9d:	cmp    rax,rdx
  407da0:	jne    407c46 <_start@@Base+0x4826>
  407da6:	lea    r13,[r10+0x8]
  407daa:	mov    rbx,r11
  407dad:	sub    rbx,r13
  407db0:	cmp    rbx,0x7
  407db4:	jbe    407eb0 <_start@@Base+0x4a90>
  407dba:	movbe  rax,QWORD PTR [r10+0x8]
  407dc0:	movabs rdx,0xffffffff00000000
  407dca:	and    rax,rdx
  407dcd:	movabs rdx,0x656e756d00000000
  407dd7:	cmp    rax,rdx
  407dda:	jne    407c46 <_start@@Base+0x4826>
  407de0:	cmp    rbx,0x4
  407de4:	jle    407c46 <_start@@Base+0x4826>
  407dea:	cmp    BYTE PTR [r10+0xc],0x2e
  407def:	jne    407c46 <_start@@Base+0x4826>
  407df5:	lea    rsi,[r10+0xd]
  407df9:	cmp    r13,rsi
  407dfc:	je     407c46 <_start@@Base+0x4826>
  407e02:	add    rsp,0x8
  407e06:	mov    rcx,r12
  407e09:	mov    rdi,rbp
  407e0c:	pop    rbx
  407e0d:	pop    rbp
  407e0e:	pop    r12
  407e10:	pop    r13
  407e12:	mov    rdx,r11
  407e15:	jmp    407300 <_start@@Base+0x3ee0>
  407e1a:	nop    WORD PTR [rax+rax*1+0x0]
  407e20:	cmp    rbx,0x3
  407e24:	jle    407c46 <_start@@Base+0x4826>
  407e2a:	cmp    BYTE PTR [r10+0x3],0x2e
  407e2f:	jne    407c46 <_start@@Base+0x4826>
  407e35:	add    rsp,0x8
  407e39:	mov    rcx,r12
  407e3c:	mov    rdi,rbp
  407e3f:	pop    rbx
  407e40:	pop    rbp
  407e41:	pop    r12
  407e43:	pop    r13
  407e45:	lea    rsi,[r10+0x4]
  407e49:	mov    rdx,r11
  407e4c:	jmp    403c50 <_start@@Base+0x830>
  407e51:	nop    DWORD PTR [rax+0x0]
  407e58:	add    rsp,0x8
  407e5c:	mov    rcx,r12
  407e5f:	mov    rdi,rbp
  407e62:	pop    rbx
  407e63:	pop    rbp
  407e64:	pop    r12
  407e66:	pop    r13
  407e68:	lea    rsi,[r10+0x4]
  407e6c:	mov    rdx,r11
  407e6f:	jmp    4039a0 <_start@@Base+0x580>
  407e74:	nop    DWORD PTR [rax+0x0]
  407e78:	cmp    rbx,0x8
  407e7c:	jle    407c46 <_start@@Base+0x4826>
  407e82:	cmp    BYTE PTR [r10+0x8],0x2e
  407e87:	jne    407c46 <_start@@Base+0x4826>
  407e8d:	add    rsp,0x8
  407e91:	mov    rcx,r12
  407e94:	mov    rdi,rbp
  407e97:	pop    rbx
  407e98:	pop    rbp
  407e99:	pop    r12
  407e9b:	pop    r13
  407e9d:	lea    rsi,[r10+0x9]
  407ea1:	mov    rdx,r11
  407ea4:	jmp    4040f0 <_start@@Base+0xcd0>
  407ea9:	nop    DWORD PTR [rax+0x0]
  407eb0:	mov    rsi,r11
  407eb3:	mov    rdi,r13
  407eb6:	call   403530 <_start@@Base+0x110>
  407ebb:	jmp    407dc0 <_start@@Base+0x49a0>
  407ec0:	push   r13
  407ec2:	push   r12
  407ec4:	mov    r13,rsi
  407ec7:	push   rbp
  407ec8:	push   rbx
  407ec9:	mov    rbp,rdi
  407ecc:	xor    esi,esi
  407ece:	mov    rbx,rdx
  407ed1:	mov    r12,rcx
  407ed4:	sub    rsp,0x8
  407ed8:	mov    rdi,QWORD PTR [rdi]
  407edb:	mov    DWORD PTR [rcx],0x0
  407ee1:	call   413080 <flatcc_builder_start_table@@Base>
  407ee6:	test   eax,eax
  407ee8:	jne    407f17 <_start@@Base+0x4af7>
  407eea:	cmp    r13,rbx
  407eed:	je     407ef6 <_start@@Base+0x4ad6>
  407eef:	cmp    BYTE PTR [r13+0x0],0x7b
  407ef4:	je     407f60 <_start@@Base+0x4b40>
  407ef6:	mov    rsi,r13
  407ef9:	mov    ecx,0x15
  407efe:	mov    rdx,rbx
  407f01:	mov    rdi,rbp
  407f04:	call   416820 <flatcc_json_parser_set_error@@Base>
  407f09:	mov    r13,rax
  407f0c:	nop    DWORD PTR [rax+0x0]
  407f10:	mov    eax,DWORD PTR [rbp+0x20]
  407f13:	test   eax,eax
  407f15:	je     407f38 <_start@@Base+0x4b18>
  407f17:	add    rsp,0x8
  407f1b:	mov    rdx,rbx
  407f1e:	mov    rsi,r13
  407f21:	pop    rbx
  407f22:	mov    rdi,rbp
  407f25:	mov    ecx,0x21
  407f2a:	pop    rbp
  407f2b:	pop    r12
  407f2d:	pop    r13
  407f2f:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  407f34:	nop    DWORD PTR [rax+0x0]
  407f38:	mov    rdi,QWORD PTR [rbp+0x0]
  407f3c:	call   413a40 <flatcc_builder_end_table@@Base>
  407f41:	test   eax,eax
  407f43:	mov    DWORD PTR [r12],eax
  407f47:	je     407f17 <_start@@Base+0x4af7>
  407f49:	add    rsp,0x8
  407f4d:	mov    rax,r13
  407f50:	pop    rbx
  407f51:	pop    rbp
  407f52:	pop    r12
  407f54:	pop    r13
  407f56:	ret    
  407f57:	nop    WORD PTR [rax+rax*1+0x0]
  407f60:	lea    rsi,[r13+0x1]
  407f64:	mov    rax,rbx
  407f67:	sub    rax,rsi
  407f6a:	cmp    rax,0x1
  407f6e:	jle    407f7d <_start@@Base+0x4b5d>
  407f70:	cmp    BYTE PTR [r13+0x1],0x20
  407f75:	jg     407f8b <_start@@Base+0x4b6b>
  407f77:	je     40815b <_start@@Base+0x4d3b>
  407f7d:	mov    rdx,rbx
  407f80:	mov    rdi,rbp
  407f83:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  407f88:	mov    rsi,rax
  407f8b:	cmp    rbx,rsi
  407f8e:	je     407fa0 <_start@@Base+0x4b80>
  407f90:	cmp    BYTE PTR [rsi],0x7d
  407f93:	je     40818a <_start@@Base+0x4d6a>
  407f99:	nop    DWORD PTR [rax+0x0]
  407fa0:	cmp    rbx,rsi
  407fa3:	je     407fbf <_start@@Base+0x4b9f>
  407fa5:	movzx  eax,BYTE PTR [rsi]
  407fa8:	cmp    al,0x22
  407faa:	je     408060 <_start@@Base+0x4c40>
  407fb0:	cmp    al,0x2e
  407fb2:	je     408118 <_start@@Base+0x4cf8>
  407fb8:	mov    DWORD PTR [rbp+0x14],0x1
  407fbf:	mov    rdx,rbx
  407fc2:	mov    rdi,rbp
  407fc5:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  407fca:	mov    rdx,rbx
  407fcd:	sub    rdx,rax
  407fd0:	cmp    rdx,0x1
  407fd4:	jle    407fe1 <_start@@Base+0x4bc1>
  407fd6:	cmp    BYTE PTR [rax],0x20
  407fd9:	jg     407fef <_start@@Base+0x4bcf>
  407fdb:	je     408070 <_start@@Base+0x4c50>
  407fe1:	mov    rdx,rbx
  407fe4:	mov    rsi,rax
  407fe7:	mov    rdi,rbp
  407fea:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  407fef:	cmp    rbx,rax
  407ff2:	je     408090 <_start@@Base+0x4c70>
  407ff8:	movzx  edx,BYTE PTR [rax]
  407ffb:	cmp    dl,0x2c
  407ffe:	je     4080a0 <_start@@Base+0x4c80>
  408004:	cmp    dl,0x7d
  408007:	je     408028 <_start@@Base+0x4c08>
  408009:	mov    ecx,0xa
  40800e:	mov    rdx,rbx
  408011:	mov    rsi,rax
  408014:	mov    rdi,rbp
  408017:	call   416820 <flatcc_json_parser_set_error@@Base>
  40801c:	mov    r13,rax
  40801f:	jmp    407f10 <_start@@Base+0x4af0>
  408024:	nop    DWORD PTR [rax+0x0]
  408028:	lea    r13,[rax+0x1]
  40802c:	mov    rdx,rbx
  40802f:	sub    rdx,r13
  408032:	cmp    rdx,0x1
  408036:	jle    408048 <_start@@Base+0x4c28>
  408038:	cmp    BYTE PTR [rax+0x1],0x20
  40803c:	jg     407f10 <_start@@Base+0x4af0>
  408042:	je     408130 <_start@@Base+0x4d10>
  408048:	mov    rsi,r13
  40804b:	mov    rdx,rbx
  40804e:	mov    rdi,rbp
  408051:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  408056:	mov    r13,rax
  408059:	jmp    407f10 <_start@@Base+0x4af0>
  40805e:	xchg   ax,ax
  408060:	add    rsi,0x1
  408064:	mov    DWORD PTR [rbp+0x14],0x0
  40806b:	jmp    407fbf <_start@@Base+0x4b9f>
  408070:	cmp    BYTE PTR [rax+0x1],0x20
  408074:	jle    407fe1 <_start@@Base+0x4bc1>
  40807a:	add    rax,0x1
  40807e:	cmp    rbx,rax
  408081:	jne    407ff8 <_start@@Base+0x4bd8>
  408087:	nop    WORD PTR [rax+rax*1+0x0]
  408090:	mov    r13,rbx
  408093:	jmp    407f10 <_start@@Base+0x4af0>
  408098:	nop    DWORD PTR [rax+rax*1+0x0]
  4080a0:	lea    rsi,[rax+0x1]
  4080a4:	mov    rdx,rbx
  4080a7:	sub    rdx,rsi
  4080aa:	cmp    rdx,0x1
  4080ae:	jle    4080bc <_start@@Base+0x4c9c>
  4080b0:	cmp    BYTE PTR [rax+0x1],0x20
  4080b4:	jg     4080ca <_start@@Base+0x4caa>
  4080b6:	je     408148 <_start@@Base+0x4d28>
  4080bc:	mov    rdx,rbx
  4080bf:	mov    rdi,rbp
  4080c2:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4080c7:	mov    rsi,rax
  4080ca:	cmp    rbx,rsi
  4080cd:	je     40816f <_start@@Base+0x4d4f>
  4080d3:	cmp    BYTE PTR [rsi],0x7d
  4080d6:	jne    407fa0 <_start@@Base+0x4b80>
  4080dc:	lea    r13,[rsi+0x1]
  4080e0:	mov    rax,rbx
  4080e3:	sub    rax,r13
  4080e6:	cmp    rax,0x1
  4080ea:	jle    408048 <_start@@Base+0x4c28>
  4080f0:	cmp    BYTE PTR [rsi+0x1],0x20
  4080f4:	jg     407f10 <_start@@Base+0x4af0>
  4080fa:	jne    408048 <_start@@Base+0x4c28>
  408100:	cmp    BYTE PTR [rsi+0x2],0x20
  408104:	jle    408048 <_start@@Base+0x4c28>
  40810a:	lea    r13,[rsi+0x2]
  40810e:	jmp    407f10 <_start@@Base+0x4af0>
  408113:	nop    DWORD PTR [rax+rax*1+0x0]
  408118:	mov    ecx,0x5
  40811d:	mov    rdx,rbx
  408120:	mov    rdi,rbp
  408123:	call   416820 <flatcc_json_parser_set_error@@Base>
  408128:	mov    rsi,rax
  40812b:	jmp    407fbf <_start@@Base+0x4b9f>
  408130:	cmp    BYTE PTR [rax+0x2],0x20
  408134:	jle    408048 <_start@@Base+0x4c28>
  40813a:	lea    r13,[rax+0x2]
  40813e:	jmp    407f10 <_start@@Base+0x4af0>
  408143:	nop    DWORD PTR [rax+rax*1+0x0]
  408148:	cmp    BYTE PTR [rax+0x2],0x20
  40814c:	jle    4080bc <_start@@Base+0x4c9c>
  408152:	lea    rsi,[rax+0x2]
  408156:	jmp    4080ca <_start@@Base+0x4caa>
  40815b:	cmp    BYTE PTR [r13+0x2],0x20
  408160:	jle    407f7d <_start@@Base+0x4b5d>
  408166:	lea    rsi,[r13+0x2]
  40816a:	jmp    407f8b <_start@@Base+0x4b6b>
  40816f:	mov    ecx,0xa
  408174:	mov    rdx,rbx
  408177:	mov    rsi,rbx
  40817a:	mov    rdi,rbp
  40817d:	call   416820 <flatcc_json_parser_set_error@@Base>
  408182:	mov    r13,rax
  408185:	jmp    407f10 <_start@@Base+0x4af0>
  40818a:	add    rsi,0x1
  40818e:	mov    rdx,rbx
  408191:	mov    rdi,rbp
  408194:	call   403680 <_start@@Base+0x260>
  408199:	mov    r13,rax
  40819c:	jmp    407f10 <_start@@Base+0x4af0>
  4081a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4081ac:	nop    DWORD PTR [rax+0x0]
  4081b0:	push   rbp
  4081b1:	push   rbx
  4081b2:	mov    rbp,rdx
  4081b5:	mov    rbx,rdi
  4081b8:	movsxd rcx,ecx
  4081bb:	sub    rsp,0x8
  4081bf:	mov    eax,DWORD PTR [rdi+0x14]
  4081c2:	test   eax,eax
  4081c4:	je     4081e0 <_start@@Base+0x4dc0>
  4081c6:	lea    rdi,[rsi+rcx*1]
  4081ca:	movzx  eax,BYTE PTR [rdi]
  4081cd:	cmp    al,0x20
  4081cf:	jle    4081f0 <_start@@Base+0x4dd0>
  4081d1:	cmp    al,0x3a
  4081d3:	je     4081f0 <_start@@Base+0x4dd0>
  4081d5:	add    rsp,0x8
  4081d9:	mov    rax,rsi
  4081dc:	pop    rbx
  4081dd:	pop    rbp
  4081de:	ret    
  4081df:	nop
  4081e0:	cmp    BYTE PTR [rsi+rcx*1],0x22
  4081e4:	jne    4081d5 <_start@@Base+0x4db5>
  4081e6:	lea    rdi,[rsi+rcx*1+0x1]
  4081eb:	jmp    4081f7 <_start@@Base+0x4dd7>
  4081ed:	nop    DWORD PTR [rax]
  4081f0:	mov    DWORD PTR [rbx+0x14],0x0
  4081f7:	mov    rax,rbp
  4081fa:	sub    rax,rdi
  4081fd:	cmp    rax,0x1
  408201:	jle    40820a <_start@@Base+0x4dea>
  408203:	cmp    BYTE PTR [rdi],0x20
  408206:	jg     40821b <_start@@Base+0x4dfb>
  408208:	je     408240 <_start@@Base+0x4e20>
  40820a:	mov    rsi,rdi
  40820d:	mov    rdx,rbp
  408210:	mov    rdi,rbx
  408213:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  408218:	mov    rdi,rax
  40821b:	cmp    rbp,rdi
  40821e:	je     408225 <_start@@Base+0x4e05>
  408220:	cmp    BYTE PTR [rdi],0x3a
  408223:	je     408250 <_start@@Base+0x4e30>
  408225:	add    rsp,0x8
  408229:	mov    rdx,rbp
  40822c:	mov    rsi,rdi
  40822f:	mov    rdi,rbx
  408232:	mov    ecx,0x4
  408237:	pop    rbx
  408238:	pop    rbp
  408239:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  40823e:	xchg   ax,ax
  408240:	cmp    BYTE PTR [rdi+0x1],0x20
  408244:	jle    40820a <_start@@Base+0x4dea>
  408246:	add    rdi,0x1
  40824a:	jmp    40821b <_start@@Base+0x4dfb>
  40824c:	nop    DWORD PTR [rax+0x0]
  408250:	lea    rsi,[rdi+0x1]
  408254:	mov    rax,rbp
  408257:	sub    rax,rsi
  40825a:	cmp    rax,0x1
  40825e:	jle    40826c <_start@@Base+0x4e4c>
  408260:	cmp    BYTE PTR [rdi+0x1],0x20
  408264:	jg     4081d5 <_start@@Base+0x4db5>
  40826a:	je     40827d <_start@@Base+0x4e5d>
  40826c:	add    rsp,0x8
  408270:	mov    rdx,rbp
  408273:	mov    rdi,rbx
  408276:	pop    rbx
  408277:	pop    rbp
  408278:	jmp    4168b0 <flatcc_json_parser_space_ext@@Base>
  40827d:	cmp    BYTE PTR [rdi+0x2],0x20
  408281:	jle    40826c <_start@@Base+0x4e4c>
  408283:	lea    rsi,[rdi+0x2]
  408287:	jmp    4081d5 <_start@@Base+0x4db5>
  40828c:	nop    DWORD PTR [rax+0x0]
  408290:	push   r15
  408292:	push   r14
  408294:	mov    rax,rcx
  408297:	push   r13
  408299:	push   r12
  40829b:	mov    r14,rsi
  40829e:	push   rbp
  40829f:	push   rbx
  4082a0:	mov    rbp,rdi
  4082a3:	mov    esi,0x24
  4082a8:	mov    rbx,rdx
  4082ab:	sub    rsp,0x78
  4082af:	mov    rdi,QWORD PTR [rdi]
  4082b2:	mov    DWORD PTR [rax],0x0
  4082b8:	mov    QWORD PTR [rsp+0x10],rcx
  4082bd:	mov    rcx,QWORD PTR fs:0x28
  4082c6:	mov    QWORD PTR [rsp+0x68],rcx
  4082cb:	xor    ecx,ecx
  4082cd:	call   413080 <flatcc_builder_start_table@@Base>
  4082d2:	test   eax,eax
  4082d4:	jne    408520 <_start@@Base+0x5100>
  4082da:	lea    r8,[rsp+0x50]
  4082df:	mov    ecx,0x1
  4082e4:	mov    rdx,rbx
  4082e7:	mov    rsi,r14
  4082ea:	mov    rdi,rbp
  4082ed:	call   418a50 <flatcc_json_parser_prepare_unions@@Base>
  4082f2:	cmp    rbx,rax
  4082f5:	je     408520 <_start@@Base+0x5100>
  4082fb:	lea    rax,[rsp+0x40]
  408300:	mov    rsi,r14
  408303:	mov    rdx,rbx
  408306:	mov    rdi,rbp
  408309:	mov    rcx,rax
  40830c:	mov    r13,rax
  40830f:	call   4048f0 <_start@@Base+0x14d0>
  408314:	mov    r14,rax
  408317:	mov    eax,DWORD PTR [rsp+0x40]
  40831b:	test   eax,eax
  40831d:	je     408a28 <_start@@Base+0x5608>
  408323:	lea    rax,[rsp+0x60]
  408328:	mov    QWORD PTR [rsp],rax
  40832c:	nop    DWORD PTR [rax+0x0]
  408330:	cmp    rbx,r14
  408333:	je     408560 <_start@@Base+0x5140>
  408339:	movzx  eax,BYTE PTR [r14]
  40833d:	cmp    al,0x22
  40833f:	je     4086b0 <_start@@Base+0x5290>
  408345:	cmp    al,0x2e
  408347:	je     4089c8 <_start@@Base+0x55a8>
  40834d:	mov    r15,rbx
  408350:	mov    DWORD PTR [rbp+0x14],0x1
  408357:	sub    r15,r14
  40835a:	cmp    r15,0x7
  40835e:	jbe    408568 <_start@@Base+0x5148>
  408364:	movbe  r12,QWORD PTR [r14]
  408369:	movabs rax,0x7465737461727260
  408373:	cmp    r12,rax
  408376:	ja     408589 <_start@@Base+0x5169>
  40837c:	movabs rax,0x6e616d64ffffffff
  408386:	cmp    r12,rax
  408389:	ja     408600 <_start@@Base+0x51e0>
  40838f:	movabs rax,0x666c6577ffffffff
  408399:	cmp    r12,rax
  40839c:	ja     4087b8 <_start@@Base+0x5398>
  4083a2:	and    r12,0xffffffffff000000
  4083a9:	movabs rax,0x656e656d79000000
  4083b3:	cmp    r12,rax
  4083b6:	je     409180 <_start@@Base+0x5d60>
  4083bc:	movabs rax,0x636f6c6f72000000
  4083c6:	cmp    r12,rax
  4083c9:	je     408dc8 <_start@@Base+0x59a8>
  4083cf:	mov    rsi,r14
  4083d2:	mov    rdx,rbx
  4083d5:	mov    rdi,rbp
  4083d8:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4083dd:	mov    r14,rax
  4083e0:	jmp    408a08 <_start@@Base+0x55e8>
  4083e5:	lea    r12,[r14+0x10]
  4083e9:	mov    r8,rbx
  4083ec:	sub    r8,r12
  4083ef:	cmp    r8,0x7
  4083f3:	jbe    40b180 <_start@@Base+0x7d60>
  4083f9:	movbe  rax,QWORD PTR [r14+0x10]
  4083ff:	movabs rdx,0xff00000000000000
  408409:	and    rax,rdx
  40840c:	movabs rdx,0x7300000000000000
  408416:	cmp    rax,rdx
  408419:	jne    40b0ab <_start@@Base+0x7c8b>
  40841f:	cmp    r8,0x1
  408423:	jle    40c020 <_start@@Base+0x8c00>
  408429:	mov    ecx,0x1
  40842e:	mov    rdx,rbx
  408431:	mov    rsi,r12
  408434:	mov    rdi,rbp
  408437:	call   4081b0 <_start@@Base+0x4d90>
  40843c:	cmp    r12,rax
  40843f:	mov    r14,rax
  408442:	je     40c020 <_start@@Base+0x8c00>
  408448:	mov    rdi,QWORD PTR [rbp+0x0]
  40844c:	mov    ecx,0x1fffffff
  408451:	mov    edx,0x8
  408456:	mov    esi,0x8
  40845b:	call   412e60 <flatcc_builder_start_vector@@Base>
  408460:	test   eax,eax
  408462:	jne    408520 <_start@@Base+0x5100>
  408468:	mov    rsi,r14
  40846b:	mov    rcx,r13
  40846e:	mov    rdx,rbx
  408471:	mov    rdi,rbp
  408474:	call   404990 <_start@@Base+0x1570>
  408479:	mov    r8d,DWORD PTR [rsp+0x40]
  40847e:	mov    r14,rax
  408481:	test   r8d,r8d
  408484:	je     40ba96 <_start@@Base+0x8676>
  40848a:	mov    r12,QWORD PTR [rsp]
  40848e:	jmp    4084bb <_start@@Base+0x509b>
  408490:	vmovsd xmm0,QWORD PTR [rsp+0x60]
  408496:	mov    rdi,rbp
  408499:	mov    rcx,r13
  40849c:	mov    rdx,rbx
  40849f:	mov    rsi,rax
  4084a2:	vmovsd QWORD PTR [r15],xmm0
  4084a7:	call   406120 <_start@@Base+0x2d00>
  4084ac:	mov    edi,DWORD PTR [rsp+0x40]
  4084b0:	mov    r14,rax
  4084b3:	test   edi,edi
  4084b5:	je     40ba96 <_start@@Base+0x8676>
  4084bb:	mov    rdi,QWORD PTR [rbp+0x0]
  4084bf:	mov    esi,0x1
  4084c4:	mov    QWORD PTR [rsp+0x60],0x0
  4084cd:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  4084d2:	test   rax,rax
  4084d5:	mov    r15,rax
  4084d8:	je     408520 <_start@@Base+0x5100>
  4084da:	mov    rcx,r12
  4084dd:	mov    rdx,rbx
  4084e0:	mov    rsi,r14
  4084e3:	mov    rdi,rbp
  4084e6:	call   417540 <flatcc_json_parser_double@@Base>
  4084eb:	cmp    rax,r14
  4084ee:	jne    408490 <_start@@Base+0x5070>
  4084f0:	lea    rcx,[rip+0x19049]        # 421540 <__data_start@@Base+0x480>
  4084f7:	mov    r8,r12
  4084fa:	mov    rdx,rbx
  4084fd:	mov    rsi,r14
  408500:	mov    rdi,rbp
  408503:	call   404a30 <_start@@Base+0x1610>
  408508:	cmp    rax,r14
  40850b:	je     408516 <_start@@Base+0x50f6>
  40850d:	cmp    rbx,rax
  408510:	jne    408490 <_start@@Base+0x5070>
  408516:	mov    r14,rax
  408519:	nop    DWORD PTR [rax+0x0]
  408520:	mov    ecx,0x21
  408525:	mov    rdx,rbx
  408528:	mov    rsi,r14
  40852b:	mov    rdi,rbp
  40852e:	call   416820 <flatcc_json_parser_set_error@@Base>
  408533:	mov    rcx,QWORD PTR [rsp+0x68]
  408538:	xor    rcx,QWORD PTR fs:0x28
  408541:	jne    40c140 <_start@@Base+0x8d20>
  408547:	add    rsp,0x78
  40854b:	pop    rbx
  40854c:	pop    rbp
  40854d:	pop    r12
  40854f:	pop    r13
  408551:	pop    r14
  408553:	pop    r15
  408555:	ret    
  408556:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408560:	xor    r15d,r15d
  408563:	nop    DWORD PTR [rax+rax*1+0x0]
  408568:	mov    rsi,rbx
  40856b:	mov    rdi,r14
  40856e:	call   403530 <_start@@Base+0x110>
  408573:	mov    r12,rax
  408576:	movabs rax,0x7465737461727260
  408580:	cmp    r12,rax
  408583:	jbe    40837c <_start@@Base+0x4f5c>
  408589:	movabs rax,0x746573746632ffff
  408593:	cmp    r12,rax
  408596:	ja     408660 <_start@@Base+0x5240>
  40859c:	movabs rax,0x7465737461727261
  4085a6:	cmp    r12,rax
  4085a9:	je     408920 <_start@@Base+0x5500>
  4085af:	movabs rax,0x74657374656d7073
  4085b9:	cmp    r12,rax
  4085bc:	ja     4088d0 <_start@@Base+0x54b0>
  4085c2:	movabs rax,0x7465737462617365
  4085cc:	cmp    r12,rax
  4085cf:	je     409260 <_start@@Base+0x5e40>
  4085d5:	movabs rax,0x74657374626f6f6c
  4085df:	cmp    r12,rax
  4085e2:	je     408f30 <_start@@Base+0x5b10>
  4085e8:	mov    rsi,r14
  4085eb:	mov    rdx,rbx
  4085ee:	mov    rdi,rbp
  4085f1:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4085f6:	mov    r14,rax
  4085f9:	jmp    408a08 <_start@@Base+0x55e8>
  4085fe:	xchg   ax,ax
  408600:	movabs rax,0x74657373ffffffff
  40860a:	cmp    r12,rax
  40860d:	ja     4086d0 <_start@@Base+0x52b0>
  408613:	movabs rax,0x706172656e745f6d
  40861d:	cmp    r12,rax
  408620:	ja     408ac0 <_start@@Base+0x56a0>
  408626:	movabs rax,0xffffffff00000000
  408630:	and    r12,rax
  408633:	movabs rax,0x6e616d6500000000
  40863d:	cmp    r12,rax
  408640:	je     408fa0 <_start@@Base+0x5b80>
  408646:	mov    rsi,r14
  408649:	mov    rdx,rbx
  40864c:	mov    rdi,rbp
  40864f:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408654:	mov    r14,rax
  408657:	jmp    408a08 <_start@@Base+0x55e8>
  40865c:	nop    DWORD PTR [rax+0x0]
  408660:	movabs rax,0x7465737468617367
  40866a:	cmp    r12,rax
  40866d:	ja     408808 <_start@@Base+0x53e8>
  408673:	xor    r12w,r12w
  408677:	movabs rax,0x7465737466330000
  408681:	cmp    r12,rax
  408684:	jne    4089f0 <_start@@Base+0x55d0>
  40868a:	cmp    r15,0x6
  40868e:	jg     408fe0 <_start@@Base+0x5bc0>
  408694:	mov    rsi,r14
  408697:	mov    rdx,rbx
  40869a:	mov    rdi,rbp
  40869d:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4086a2:	mov    r14,rax
  4086a5:	jmp    408a08 <_start@@Base+0x55e8>
  4086aa:	nop    WORD PTR [rax+rax*1+0x0]
  4086b0:	add    r14,0x1
  4086b4:	mov    r15,rbx
  4086b7:	mov    DWORD PTR [rbp+0x14],0x0
  4086be:	sub    r15,r14
  4086c1:	jmp    40835a <_start@@Base+0x4f3a>
  4086c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086d0:	mov    r8,r12
  4086d3:	movabs rax,0x7465737434000000
  4086dd:	and    r8,0xffffffffff000000
  4086e4:	cmp    r8,rax
  4086e7:	je     4091a0 <_start@@Base+0x5d80>
  4086ed:	cmp    r15,0x4
  4086f1:	jg     40a7e0 <_start@@Base+0x73c0>
  4086f7:	movabs rax,0x7465737435000000
  408701:	cmp    r8,rax
  408704:	je     4090f8 <_start@@Base+0x5cd8>
  40870a:	movabs rax,0x746573745f747970
  408714:	cmp    r12,rax
  408717:	jne    409102 <_start@@Base+0x5ce2>
  40871d:	lea    r12,[r14+0x8]
  408721:	mov    r8,rbx
  408724:	sub    r8,r12
  408727:	cmp    r8,0x7
  40872b:	jbe    4094a6 <_start@@Base+0x6086>
  408731:	movbe  rax,QWORD PTR [r14+0x8]
  408737:	movabs rdx,0xff00000000000000
  408741:	and    rax,rdx
  408744:	movabs rdx,0x6500000000000000
  40874e:	cmp    rax,rdx
  408751:	jne    409490 <_start@@Base+0x6070>
  408757:	cmp    r8,0x1
  40875b:	jle    409826 <_start@@Base+0x6406>
  408761:	mov    rsi,r12
  408764:	mov    ecx,0x1
  408769:	mov    rdx,rbx
  40876c:	mov    rdi,rbp
  40876f:	call   4081b0 <_start@@Base+0x4d90>
  408774:	cmp    r12,rax
  408777:	mov    rsi,rax
  40877a:	je     409826 <_start@@Base+0x6406>
  408780:	lea    rax,[rip+0x7959]        # 4100e0 <_start@@Base+0xccc0>
  408787:	mov    rdx,rbx
  40878a:	mov    r8d,0x8
  408790:	xor    ecx,ecx
  408792:	mov    rdi,rbp
  408795:	push   rax
  408796:	lea    rax,[rip+0x18f83]        # 421720 <__data_start@@Base+0x660>
  40879d:	push   rax
  40879e:	mov    r9,QWORD PTR [rsp+0x60]
  4087a3:	call   418c60 <flatcc_json_parser_union_type@@Base>
  4087a8:	mov    r14,rax
  4087ab:	pop    rax
  4087ac:	pop    rdx
  4087ad:	jmp    408a08 <_start@@Base+0x55e8>
  4087b2:	nop    WORD PTR [rax+rax*1+0x0]
  4087b8:	movabs rax,0x686fffffffffffff
  4087c2:	cmp    r12,rax
  4087c5:	ja     408a68 <_start@@Base+0x5648>
  4087cb:	movabs rax,0xffffffff00000000
  4087d5:	and    r12,rax
  4087d8:	movabs rax,0x666c657800000000
  4087e2:	cmp    r12,rax
  4087e5:	je     408fc0 <_start@@Base+0x5ba0>
  4087eb:	mov    rsi,r14
  4087ee:	mov    rdx,rbx
  4087f1:	mov    rdi,rbp
  4087f4:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4087f9:	mov    r14,rax
  4087fc:	jmp    408a08 <_start@@Base+0x55e8>
  408801:	nop    DWORD PTR [rax+0x0]
  408808:	movabs rax,0x7465737468617368
  408812:	cmp    r12,rax
  408815:	je     409120 <_start@@Base+0x5d00>
  40881b:	movabs rax,0x766563746f725f6e
  408825:	cmp    r12,rax
  408828:	ja     408d48 <_start@@Base+0x5928>
  40882e:	movabs rax,0x746573746e657374
  408838:	cmp    r12,rax
  40883b:	jne    409320 <_start@@Base+0x5f00>
  408841:	lea    r8,[r14+0x8]
  408845:	mov    rax,rbx
  408848:	sub    rax,r8
  40884b:	cmp    rax,0x7
  40884f:	ja     409625 <_start@@Base+0x6205>
  408855:	mov    rsi,rbx
  408858:	mov    rdi,r8
  40885b:	call   403530 <_start@@Base+0x110>
  408860:	movabs rdx,0x6564666c61746275
  40886a:	cmp    rax,rdx
  40886d:	jne    409d91 <_start@@Base+0x6971>
  408873:	lea    r12,[r14+0x10]
  408877:	mov    r8,rbx
  40887a:	sub    r8,r12
  40887d:	cmp    r8,0x7
  408881:	jbe    40ae40 <_start@@Base+0x7a20>
  408887:	movbe  rax,QWORD PTR [r14+0x10]
  40888d:	movabs rdx,0xffffffff00000000
  408897:	and    rax,rdx
  40889a:	movabs rdx,0x6666657200000000
  4088a4:	cmp    rax,rdx
  4088a7:	jne    40ae50 <_start@@Base+0x7a30>
  4088ad:	cmp    r8,0x4
  4088b1:	jg     40b94a <_start@@Base+0x852a>
  4088b7:	mov    rdx,rbx
  4088ba:	mov    rsi,r12
  4088bd:	mov    rdi,rbp
  4088c0:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4088c5:	mov    r14,rax
  4088c8:	jmp    408a08 <_start@@Base+0x55e8>
  4088cd:	nop    DWORD PTR [rax]
  4088d0:	movabs rax,0x7465737465ffffff
  4088da:	cmp    r12,rax
  4088dd:	jbe    408b18 <_start@@Base+0x56f8>
  4088e3:	xor    r12w,r12w
  4088e7:	movabs rax,0x7465737466320000
  4088f1:	cmp    r12,rax
  4088f4:	je     4095db <_start@@Base+0x61bb>
  4088fa:	cmp    r15,0x5
  4088fe:	jg     40aec1 <_start@@Base+0x7aa1>
  408904:	mov    rsi,r14
  408907:	mov    rdx,rbx
  40890a:	mov    rdi,rbp
  40890d:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408912:	mov    r14,rax
  408915:	jmp    408a08 <_start@@Base+0x55e8>
  40891a:	nop    WORD PTR [rax+rax*1+0x0]
  408920:	lea    r12,[r14+0x8]
  408924:	mov    r8,rbx
  408927:	sub    r8,r12
  40892a:	cmp    r8,0x7
  40892e:	ja     408df0 <_start@@Base+0x59d0>
  408934:	mov    rsi,rbx
  408937:	mov    rdi,r12
  40893a:	call   403530 <_start@@Base+0x110>
  40893f:	movabs rdx,0x796f66737472696d
  408949:	cmp    rax,rdx
  40894c:	ja     408e09 <_start@@Base+0x59e9>
  408952:	movabs rdx,0x796f66626f6f6c73
  40895c:	cmp    rax,rdx
  40895f:	je     40a000 <_start@@Base+0x6be0>
  408965:	movabs rdx,0x796f66736f727465
  40896f:	cmp    rax,rdx
  408972:	jne    4094d0 <_start@@Base+0x60b0>
  408978:	lea    r12,[r14+0x10]
  40897c:	mov    r8,rbx
  40897f:	sub    r8,r12
  408982:	cmp    r8,0x7
  408986:	jbe    40983c <_start@@Base+0x641c>
  40898c:	movbe  rax,QWORD PTR [r14+0x10]
  408992:	xor    al,al
  408994:	movabs rdx,0x6473747275637400
  40899e:	cmp    rax,rdx
  4089a1:	jne    40a838 <_start@@Base+0x7418>
  4089a7:	cmp    r8,0x7
  4089ab:	jg     40b510 <_start@@Base+0x80f0>
  4089b1:	mov    rdx,rbx
  4089b4:	mov    rsi,r12
  4089b7:	mov    rdi,rbp
  4089ba:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4089bf:	mov    r14,rax
  4089c2:	jmp    408a08 <_start@@Base+0x55e8>
  4089c4:	nop    DWORD PTR [rax+0x0]
  4089c8:	mov    rsi,r14
  4089cb:	mov    ecx,0x5
  4089d0:	mov    rdx,rbx
  4089d3:	mov    rdi,rbp
  4089d6:	mov    r15,rbx
  4089d9:	call   416820 <flatcc_json_parser_set_error@@Base>
  4089de:	mov    r14,rax
  4089e1:	sub    r15,rax
  4089e4:	jmp    40835a <_start@@Base+0x4f3a>
  4089e9:	nop    DWORD PTR [rax+0x0]
  4089f0:	mov    rsi,r14
  4089f3:	mov    rdx,rbx
  4089f6:	mov    rdi,rbp
  4089f9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4089fe:	mov    r14,rax
  408a01:	nop    DWORD PTR [rax+0x0]
  408a08:	mov    rdx,rbx
  408a0b:	mov    rsi,r14
  408a0e:	mov    rcx,r13
  408a11:	mov    rdi,rbp
  408a14:	call   406270 <_start@@Base+0x2e50>
  408a19:	mov    edx,DWORD PTR [rsp+0x40]
  408a1d:	mov    r14,rax
  408a20:	test   edx,edx
  408a22:	jne    408330 <_start@@Base+0x4f10>
  408a28:	mov    eax,DWORD PTR [rbp+0x20]
  408a2b:	test   eax,eax
  408a2d:	jne    408520 <_start@@Base+0x5100>
  408a33:	mov    rdi,QWORD PTR [rbp+0x0]
  408a37:	mov    esi,0x3
  408a3c:	call   413900 <flatcc_builder_check_required_field@@Base>
  408a41:	test   eax,eax
  408a43:	jne    40b148 <_start@@Base+0x7d28>
  408a49:	mov    rsi,r14
  408a4c:	mov    ecx,0x1d
  408a51:	mov    rdx,rbx
  408a54:	mov    rdi,rbp
  408a57:	call   416820 <flatcc_json_parser_set_error@@Base>
  408a5c:	mov    r14,rax
  408a5f:	jmp    408520 <_start@@Base+0x5100>
  408a64:	nop    DWORD PTR [rax+0x0]
  408a68:	movabs rax,0x696e76656e746f71
  408a72:	cmp    r12,rax
  408a75:	ja     408f50 <_start@@Base+0x5b30>
  408a7b:	movabs rax,0xffff000000000000
  408a85:	and    r12,rax
  408a88:	movabs rax,0x6870000000000000
  408a92:	cmp    r12,rax
  408a95:	jne    4094b6 <_start@@Base+0x6096>
  408a9b:	cmp    r15,0x2
  408a9f:	jg     409904 <_start@@Base+0x64e4>
  408aa5:	mov    rsi,r14
  408aa8:	mov    rdx,rbx
  408aab:	mov    rdi,rbp
  408aae:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408ab3:	mov    r14,rax
  408ab6:	jmp    408a08 <_start@@Base+0x55e8>
  408abb:	nop    DWORD PTR [rax+rax*1+0x0]
  408ac0:	movabs rax,0x706172656e745f6e
  408aca:	cmp    r12,rax
  408acd:	je     40906d <_start@@Base+0x5c4d>
  408ad3:	movabs rax,0xffffff0000000000
  408add:	and    r12,rax
  408ae0:	movabs rax,0x706f730000000000
  408aea:	cmp    r12,rax
  408aed:	jne    409300 <_start@@Base+0x5ee0>
  408af3:	cmp    r15,0x3
  408af7:	jg     40a88a <_start@@Base+0x746a>
  408afd:	mov    rsi,r14
  408b00:	mov    rdx,rbx
  408b03:	mov    rdi,rbp
  408b06:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408b0b:	mov    r14,rax
  408b0e:	jmp    408a08 <_start@@Base+0x55e8>
  408b13:	nop    DWORD PTR [rax+rax*1+0x0]
  408b18:	movabs rax,0x74657374656d7074
  408b22:	cmp    r12,rax
  408b25:	jne    4092e0 <_start@@Base+0x5ec0>
  408b2b:	lea    r12,[r14+0x8]
  408b2f:	mov    r8,rbx
  408b32:	sub    r8,r12
  408b35:	cmp    r8,0x7
  408b39:	ja     409650 <_start@@Base+0x6230>
  408b3f:	mov    rsi,rbx
  408b42:	mov    rdi,r12
  408b45:	call   403530 <_start@@Base+0x110>
  408b4a:	movabs rdx,0xff00000000000000
  408b54:	and    rax,rdx
  408b57:	movabs rdx,0x7900000000000000
  408b61:	cmp    rax,rdx
  408b64:	jne    409da7 <_start@@Base+0x6987>
  408b6a:	cmp    r8,0x1
  408b6e:	jle    40b934 <_start@@Base+0x8514>
  408b74:	mov    ecx,0x1
  408b79:	mov    rdx,rbx
  408b7c:	mov    rsi,r12
  408b7f:	mov    rdi,rbp
  408b82:	call   4081b0 <_start@@Base+0x4d90>
  408b87:	cmp    r12,rax
  408b8a:	mov    r14,rax
  408b8d:	je     40b934 <_start@@Base+0x8514>
  408b93:	mov    rdi,QWORD PTR [rbp+0x0]
  408b97:	mov    esi,0x3
  408b9c:	mov    DWORD PTR [rsp+0x44],0x0
  408ba4:	call   413080 <flatcc_builder_start_table@@Base>
  408ba9:	test   eax,eax
  408bab:	jne    40a5ec <_start@@Base+0x71cc>
  408bb1:	lea    r12,[rsp+0x48]
  408bb6:	mov    rsi,r14
  408bb9:	mov    rdi,rbp
  408bbc:	mov    rdx,rbx
  408bbf:	mov    rcx,r12
  408bc2:	call   4048f0 <_start@@Base+0x14d0>
  408bc7:	mov    edi,DWORD PTR [rsp+0x48]
  408bcb:	mov    r14,rax
  408bce:	test   edi,edi
  408bd0:	je     40b19f <_start@@Base+0x7d7f>
  408bd6:	lea    rax,[rsp+0x4c]
  408bdb:	mov    QWORD PTR [rsp+0x20],r13
  408be0:	mov    r15,QWORD PTR [rsp]
  408be4:	mov    QWORD PTR [rsp+0x18],rax
  408be9:	lea    rax,[rsp+0x3e]
  408bee:	mov    QWORD PTR [rsp+0x28],rax
  408bf3:	lea    rax,[rsp+0x58]
  408bf8:	mov    QWORD PTR [rsp+0x8],rax
  408bfd:	jmp    408c50 <_start@@Base+0x5830>
  408bff:	nop
  408c00:	and    rax,0xffffffffff000000
  408c06:	movabs rdx,0x636f756e74000000
  408c10:	cmp    rax,rdx
  408c13:	jne    408c1f <_start@@Base+0x57ff>
  408c15:	cmp    r8,0x5
  408c19:	jg     409dbd <_start@@Base+0x699d>
  408c1f:	mov    rsi,r14
  408c22:	mov    rdx,rbx
  408c25:	mov    rdi,rbp
  408c28:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408c2d:	mov    r14,rax
  408c30:	mov    rsi,r14
  408c33:	mov    rcx,r12
  408c36:	mov    rdx,rbx
  408c39:	mov    rdi,rbp
  408c3c:	call   406270 <_start@@Base+0x2e50>
  408c41:	mov    r14,rax
  408c44:	mov    eax,DWORD PTR [rsp+0x48]
  408c48:	test   eax,eax
  408c4a:	je     40b19a <_start@@Base+0x7d7a>
  408c50:	cmp    rbx,r14
  408c53:	je     409bcc <_start@@Base+0x67ac>
  408c59:	movzx  eax,BYTE PTR [r14]
  408c5d:	cmp    al,0x22
  408c5f:	je     409c00 <_start@@Base+0x67e0>
  408c65:	cmp    al,0x2e
  408c67:	je     40a20e <_start@@Base+0x6dee>
  408c6d:	mov    DWORD PTR [rbp+0x14],0x1
  408c74:	mov    r8,rbx
  408c77:	sub    r8,r14
  408c7a:	cmp    r8,0x7
  408c7e:	jbe    409bd2 <_start@@Base+0x67b2>
  408c84:	movbe  rax,QWORD PTR [r14]
  408c89:	movabs rdx,0x6963ffffffffffff
  408c93:	cmp    rax,rdx
  408c96:	jbe    408c00 <_start@@Base+0x57e0>
  408c9c:	movabs rdx,0xffffff0000000000
  408ca6:	movabs rcx,0x76616c0000000000
  408cb0:	and    rdx,rax
  408cb3:	cmp    rdx,rcx
  408cb6:	je     409c20 <_start@@Base+0x6800>
  408cbc:	movabs rdx,0xffff000000000000
  408cc6:	and    rax,rdx
  408cc9:	movabs rdx,0x6964000000000000
  408cd3:	cmp    rax,rdx
  408cd6:	jne    408c1f <_start@@Base+0x57ff>
  408cdc:	cmp    r8,0x2
  408ce0:	jle    408c1f <_start@@Base+0x57ff>
  408ce6:	mov    rsi,r14
  408ce9:	mov    ecx,0x2
  408cee:	mov    rdx,rbx
  408cf1:	mov    rdi,rbp
  408cf4:	call   4081b0 <_start@@Base+0x4d90>
  408cf9:	cmp    rax,r14
  408cfc:	mov    rsi,rax
  408cff:	je     408c1f <_start@@Base+0x57ff>
  408d05:	mov    rcx,QWORD PTR [rsp+0x18]
  408d0a:	mov    rdx,rbx
  408d0d:	mov    rdi,rbp
  408d10:	call   418880 <flatcc_json_parser_build_string@@Base>
  408d15:	mov    edx,DWORD PTR [rsp+0x4c]
  408d19:	mov    r14,rax
  408d1c:	test   edx,edx
  408d1e:	je     40bb62 <_start@@Base+0x8742>
  408d24:	mov    rdi,QWORD PTR [rbp+0x0]
  408d28:	xor    esi,esi
  408d2a:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  408d2f:	test   rax,rax
  408d32:	je     40bb62 <_start@@Base+0x8742>
  408d38:	mov    edx,DWORD PTR [rsp+0x4c]
  408d3c:	mov    DWORD PTR [rax],edx
  408d3e:	jmp    408c30 <_start@@Base+0x5810>
  408d43:	nop    DWORD PTR [rax+rax*1+0x0]
  408d48:	movabs rax,0x766563746f725f6f
  408d52:	cmp    r12,rax
  408d55:	jne    4092c0 <_start@@Base+0x5ea0>
  408d5b:	lea    r12,[r14+0x8]
  408d5f:	mov    r8,rbx
  408d62:	sub    r8,r12
  408d65:	cmp    r8,0x7
  408d69:	ja     40961a <_start@@Base+0x61fa>
  408d6f:	mov    rsi,rbx
  408d72:	mov    rdi,r12
  408d75:	call   403530 <_start@@Base+0x110>
  408d7a:	movabs rdx,0x665f646f75626c65
  408d84:	cmp    rax,rdx
  408d87:	je     4083e5 <_start@@Base+0x4fc5>
  408d8d:	xor    al,al
  408d8f:	movabs rdx,0x665f6c6f6e677300
  408d99:	cmp    rax,rdx
  408d9c:	jne    40a7c7 <_start@@Base+0x73a7>
  408da2:	cmp    r8,0x7
  408da6:	jg     40b3a3 <_start@@Base+0x7f83>
  408dac:	mov    rdx,rbx
  408daf:	mov    rsi,r12
  408db2:	mov    rdi,rbp
  408db5:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408dba:	mov    r14,rax
  408dbd:	jmp    408a08 <_start@@Base+0x55e8>
  408dc2:	nop    WORD PTR [rax+rax*1+0x0]
  408dc8:	cmp    r15,0x5
  408dcc:	jg     409512 <_start@@Base+0x60f2>
  408dd2:	mov    rsi,r14
  408dd5:	mov    rdx,rbx
  408dd8:	mov    rdi,rbp
  408ddb:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408de0:	mov    r14,rax
  408de3:	jmp    408a08 <_start@@Base+0x55e8>
  408de8:	nop    DWORD PTR [rax+rax*1+0x0]
  408df0:	movbe  rax,QWORD PTR [r14+0x8]
  408df6:	movabs rdx,0x796f66737472696d
  408e00:	cmp    rax,rdx
  408e03:	jbe    408952 <_start@@Base+0x5532>
  408e09:	movabs rdx,0x796f66737472696e
  408e13:	cmp    rax,rdx
  408e16:	je     409ee3 <_start@@Base+0x6ac3>
  408e1c:	movabs rdx,0x796f667461626c65
  408e26:	cmp    rax,rdx
  408e29:	jne    4094fc <_start@@Base+0x60dc>
  408e2f:	lea    r12,[r14+0x10]
  408e33:	mov    r8,rbx
  408e36:	sub    r8,r12
  408e39:	cmp    r8,0x7
  408e3d:	ja     4098f9 <_start@@Base+0x64d9>
  408e43:	mov    rsi,rbx
  408e46:	mov    rdi,r12
  408e49:	call   403530 <_start@@Base+0x110>
  408e4e:	movabs rdx,0xff00000000000000
  408e58:	and    rax,rdx
  408e5b:	movabs rdx,0x7300000000000000
  408e65:	cmp    rax,rdx
  408e68:	jne    40adc0 <_start@@Base+0x79a0>
  408e6e:	cmp    r8,0x1
  408e72:	jle    40bc98 <_start@@Base+0x8878>
  408e78:	mov    ecx,0x1
  408e7d:	mov    rdx,rbx
  408e80:	mov    rsi,r12
  408e83:	mov    rdi,rbp
  408e86:	call   4081b0 <_start@@Base+0x4d90>
  408e8b:	cmp    r12,rax
  408e8e:	mov    r14,rax
  408e91:	je     40bc98 <_start@@Base+0x8878>
  408e97:	mov    rdi,QWORD PTR [rbp+0x0]
  408e9b:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  408ea0:	test   eax,eax
  408ea2:	jne    408520 <_start@@Base+0x5100>
  408ea8:	mov    rdx,rbx
  408eab:	mov    rsi,r14
  408eae:	mov    rcx,r13
  408eb1:	mov    rdi,rbp
  408eb4:	call   404990 <_start@@Base+0x1570>
  408eb9:	mov    edx,DWORD PTR [rsp+0x40]
  408ebd:	mov    r14,rax
  408ec0:	test   edx,edx
  408ec2:	je     40b8fd <_start@@Base+0x84dd>
  408ec8:	lea    r12,[rsp+0x44]
  408ecd:	jmp    408f0d <_start@@Base+0x5aed>
  408ecf:	nop
  408ed0:	mov    rdi,QWORD PTR [rbp+0x0]
  408ed4:	mov    esi,0x1
  408ed9:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  408ede:	test   rax,rax
  408ee1:	je     408520 <_start@@Base+0x5100>
  408ee7:	mov    edx,DWORD PTR [rsp+0x44]
  408eeb:	mov    rsi,r14
  408eee:	mov    rcx,r13
  408ef1:	mov    rdi,rbp
  408ef4:	mov    DWORD PTR [rax],edx
  408ef6:	mov    rdx,rbx
  408ef9:	call   406120 <_start@@Base+0x2d00>
  408efe:	mov    r14,rax
  408f01:	mov    eax,DWORD PTR [rsp+0x40]
  408f05:	test   eax,eax
  408f07:	je     40b8fd <_start@@Base+0x84dd>
  408f0d:	mov    rsi,r14
  408f10:	mov    rcx,r12
  408f13:	mov    rdx,rbx
  408f16:	mov    rdi,rbp
  408f19:	call   408290 <_start@@Base+0x4e70>
  408f1e:	mov    r14,rax
  408f21:	mov    eax,DWORD PTR [rsp+0x44]
  408f25:	test   eax,eax
  408f27:	jne    408ed0 <_start@@Base+0x5ab0>
  408f29:	jmp    408520 <_start@@Base+0x5100>
  408f2e:	xchg   ax,ax
  408f30:	cmp    r15,0x8
  408f34:	jg     40a288 <_start@@Base+0x6e68>
  408f3a:	mov    rsi,r14
  408f3d:	mov    rdx,rbx
  408f40:	mov    rdi,rbp
  408f43:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408f48:	mov    r14,rax
  408f4b:	jmp    408a08 <_start@@Base+0x55e8>
  408f50:	movabs rax,0x696e76656e746f72
  408f5a:	cmp    r12,rax
  408f5d:	je     40a64b <_start@@Base+0x722b>
  408f63:	movabs rax,0xffffffff00000000
  408f6d:	and    r12,rax
  408f70:	movabs rax,0x6d616e6100000000
  408f7a:	cmp    r12,rax
  408f7d:	je     409630 <_start@@Base+0x6210>
  408f83:	mov    rsi,r14
  408f86:	mov    rdx,rbx
  408f89:	mov    rdi,rbp
  408f8c:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408f91:	mov    r14,rax
  408f94:	jmp    408a08 <_start@@Base+0x55e8>
  408f99:	nop    DWORD PTR [rax+0x0]
  408fa0:	cmp    r15,0x4
  408fa4:	jg     40a57c <_start@@Base+0x715c>
  408faa:	mov    rsi,r14
  408fad:	mov    rdx,rbx
  408fb0:	mov    rdi,rbp
  408fb3:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408fb8:	mov    r14,rax
  408fbb:	jmp    408a08 <_start@@Base+0x55e8>
  408fc0:	cmp    r15,0x4
  408fc4:	jg     40a3b2 <_start@@Base+0x6f92>
  408fca:	mov    rsi,r14
  408fcd:	mov    rdx,rbx
  408fd0:	mov    rdi,rbp
  408fd3:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  408fd8:	mov    r14,rax
  408fdb:	jmp    408a08 <_start@@Base+0x55e8>
  408fe0:	mov    ecx,0x6
  408fe5:	mov    rdx,rbx
  408fe8:	mov    rsi,r14
  408feb:	mov    rdi,rbp
  408fee:	call   4081b0 <_start@@Base+0x4d90>
  408ff3:	cmp    rax,r14
  408ff6:	mov    r12,rax
  408ff9:	je     408694 <_start@@Base+0x5274>
  408fff:	mov    rcx,QWORD PTR [rsp]
  409003:	mov    rdx,rbx
  409006:	mov    rsi,rax
  409009:	mov    rdi,rbp
  40900c:	mov    DWORD PTR [rsp+0x60],0x0
  409014:	call   417620 <flatcc_json_parser_float@@Base>
  409019:	cmp    rax,r12
  40901c:	mov    r14,rax
  40901f:	je     40b010 <_start@@Base+0x7bf0>
  409025:	vxorps xmm1,xmm1,xmm1
  409029:	vucomiss xmm1,DWORD PTR [rsp+0x60]
  40902f:	jp     40903d <_start@@Base+0x5c1d>
  409031:	jne    40903d <_start@@Base+0x5c1d>
  409033:	test   BYTE PTR [rbp+0x10],0x2
  409037:	je     408a08 <_start@@Base+0x55e8>
  40903d:	mov    rdi,QWORD PTR [rbp+0x0]
  409041:	mov    ecx,0x4
  409046:	mov    edx,0x4
  40904b:	mov    esi,0x1b
  409050:	call   414920 <flatcc_builder_table_add@@Base>
  409055:	test   rax,rax
  409058:	je     408520 <_start@@Base+0x5100>
  40905e:	vmovss xmm0,DWORD PTR [rsp+0x60]
  409064:	vmovss DWORD PTR [rax],xmm0
  409068:	jmp    408a08 <_start@@Base+0x55e8>
  40906d:	lea    r8,[r14+0x8]
  409071:	mov    rax,rbx
  409074:	sub    rax,r8
  409077:	cmp    rax,0x7
  40907b:	ja     409748 <_start@@Base+0x6328>
  409081:	mov    rsi,rbx
  409084:	mov    rdi,r8
  409087:	call   403530 <_start@@Base+0x110>
  40908c:	movabs rdx,0x616d657370616365
  409096:	cmp    rax,rdx
  409099:	jne    40a39c <_start@@Base+0x6f7c>
  40909f:	lea    r12,[r14+0x10]
  4090a3:	mov    r8,rbx
  4090a6:	sub    r8,r12
  4090a9:	cmp    r8,0x7
  4090ad:	jbe    40af8e <_start@@Base+0x7b6e>
  4090b3:	movbe  rax,QWORD PTR [r14+0x10]
  4090b9:	and    rax,0xffffffffff000000
  4090bf:	movabs rdx,0x5f74657374000000
  4090c9:	cmp    rax,rdx
  4090cc:	jne    40af9e <_start@@Base+0x7b7e>
  4090d2:	cmp    r8,0x5
  4090d6:	jg     40bacd <_start@@Base+0x86ad>
  4090dc:	mov    rdx,rbx
  4090df:	mov    rsi,r12
  4090e2:	mov    rdi,rbp
  4090e5:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4090ea:	mov    r14,rax
  4090ed:	jmp    408a08 <_start@@Base+0x55e8>
  4090f2:	nop    WORD PTR [rax+rax*1+0x0]
  4090f8:	cmp    r15,0x5
  4090fc:	jg     40984c <_start@@Base+0x642c>
  409102:	mov    rsi,r14
  409105:	mov    rdx,rbx
  409108:	mov    rdi,rbp
  40910b:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409110:	mov    r14,rax
  409113:	jmp    408a08 <_start@@Base+0x55e8>
  409118:	nop    DWORD PTR [rax+rax*1+0x0]
  409120:	lea    r12,[r14+0x8]
  409124:	mov    r8,rbx
  409127:	sub    r8,r12
  40912a:	cmp    r8,0x7
  40912e:	jbe    409480 <_start@@Base+0x6060>
  409134:	movbe  rax,QWORD PTR [r14+0x8]
  40913a:	movabs rdx,0x7336345f666e7630
  409144:	cmp    rax,rdx
  409147:	ja     409336 <_start@@Base+0x5f16>
  40914d:	movabs rdx,0x7333325f666e7631
  409157:	cmp    rax,rdx
  40915a:	je     409753 <_start@@Base+0x6333>
  409160:	mov    rdx,rbx
  409163:	mov    rsi,r12
  409166:	mov    rdi,rbp
  409169:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40916e:	mov    r14,rax
  409171:	jmp    408a08 <_start@@Base+0x55e8>
  409176:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409180:	cmp    r15,0x5
  409184:	jg     409e80 <_start@@Base+0x6a60>
  40918a:	mov    rsi,r14
  40918d:	mov    rdx,rbx
  409190:	mov    rdi,rbp
  409193:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409198:	mov    r14,rax
  40919b:	jmp    408a08 <_start@@Base+0x55e8>
  4091a0:	cmp    r15,0x5
  4091a4:	jle    409102 <_start@@Base+0x5ce2>
  4091aa:	mov    ecx,0x5
  4091af:	mov    rdx,rbx
  4091b2:	mov    rsi,r14
  4091b5:	mov    rdi,rbp
  4091b8:	call   4081b0 <_start@@Base+0x4d90>
  4091bd:	cmp    rax,r14
  4091c0:	mov    r12,rax
  4091c3:	je     409102 <_start@@Base+0x5ce2>
  4091c9:	mov    rdi,QWORD PTR [rbp+0x0]
  4091cd:	mov    ecx,0x3fffffff
  4091d2:	mov    edx,0x2
  4091d7:	mov    esi,0x4
  4091dc:	call   412e60 <flatcc_builder_start_vector@@Base>
  4091e1:	test   eax,eax
  4091e3:	jne    40bfc8 <_start@@Base+0x8ba8>
  4091e9:	mov    rcx,r13
  4091ec:	mov    rdx,rbx
  4091ef:	mov    rsi,r12
  4091f2:	mov    rdi,rbp
  4091f5:	call   404990 <_start@@Base+0x1570>
  4091fa:	mov    r10d,DWORD PTR [rsp+0x40]
  4091ff:	mov    r14,rax
  409202:	test   r10d,r10d
  409205:	jne    409243 <_start@@Base+0x5e23>
  409207:	jmp    409d5a <_start@@Base+0x693a>
  40920c:	nop    DWORD PTR [rax+0x0]
  409210:	mov    rsi,r14
  409213:	mov    rcx,rax
  409216:	mov    rdx,rbx
  409219:	mov    rdi,rbp
  40921c:	call   4063c0 <_start@@Base+0x2fa0>
  409221:	mov    rcx,r13
  409224:	mov    rdx,rbx
  409227:	mov    rsi,rax
  40922a:	mov    rdi,rbp
  40922d:	call   406120 <_start@@Base+0x2d00>
  409232:	mov    r9d,DWORD PTR [rsp+0x40]
  409237:	mov    r14,rax
  40923a:	test   r9d,r9d
  40923d:	je     409d5a <_start@@Base+0x693a>
  409243:	mov    rdi,QWORD PTR [rbp+0x0]
  409247:	mov    esi,0x1
  40924c:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  409251:	test   rax,rax
  409254:	jne    409210 <_start@@Base+0x5df0>
  409256:	jmp    408520 <_start@@Base+0x5100>
  40925b:	nop    DWORD PTR [rax+rax*1+0x0]
  409260:	lea    r12,[r14+0x8]
  409264:	mov    r8,rbx
  409267:	sub    r8,r12
  40926a:	cmp    r8,0x7
  40926e:	jbe    4095cb <_start@@Base+0x61ab>
  409274:	movbe  rax,QWORD PTR [r14+0x8]
  40927a:	movabs rdx,0xffff000000000000
  409284:	and    rax,rdx
  409287:	movabs rdx,0x3634000000000000
  409291:	cmp    rax,rdx
  409294:	jne    4094e6 <_start@@Base+0x60c6>
  40929a:	cmp    r8,0x2
  40929e:	jg     409a1b <_start@@Base+0x65fb>
  4092a4:	mov    rdx,rbx
  4092a7:	mov    rsi,r12
  4092aa:	mov    rdi,rbp
  4092ad:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4092b2:	mov    r14,rax
  4092b5:	jmp    408a08 <_start@@Base+0x55e8>
  4092ba:	nop    WORD PTR [rax+rax*1+0x0]
  4092c0:	mov    rsi,r14
  4092c3:	mov    rdx,rbx
  4092c6:	mov    rdi,rbp
  4092c9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4092ce:	mov    r14,rax
  4092d1:	jmp    408a08 <_start@@Base+0x55e8>
  4092d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4092e0:	mov    rsi,r14
  4092e3:	mov    rdx,rbx
  4092e6:	mov    rdi,rbp
  4092e9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4092ee:	mov    r14,rax
  4092f1:	jmp    408a08 <_start@@Base+0x55e8>
  4092f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409300:	mov    rsi,r14
  409303:	mov    rdx,rbx
  409306:	mov    rdi,rbp
  409309:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40930e:	mov    r14,rax
  409311:	jmp    408a08 <_start@@Base+0x55e8>
  409316:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409320:	mov    rsi,r14
  409323:	mov    rdx,rbx
  409326:	mov    rdi,rbp
  409329:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40932e:	mov    r14,rax
  409331:	jmp    408a08 <_start@@Base+0x55e8>
  409336:	movabs rdx,0x7533325f666e7630
  409340:	cmp    rax,rdx
  409343:	jbe    40965b <_start@@Base+0x623b>
  409349:	movabs rdx,0x7533325f666e7631
  409353:	cmp    rax,rdx
  409356:	je     40b243 <_start@@Base+0x7e23>
  40935c:	movabs rdx,0x7536345f666e7631
  409366:	cmp    rax,rdx
  409369:	jne    40b05e <_start@@Base+0x7c3e>
  40936f:	cmp    r8,0x8
  409373:	jg     40bb6c <_start@@Base+0x874c>
  409379:	lea    r14,[r12+0x8]
  40937e:	mov    r8,rbx
  409381:	sub    r8,r14
  409384:	cmp    r8,0x7
  409388:	jbe    40c0b8 <_start@@Base+0x8c98>
  40938e:	movbe  rax,QWORD PTR [r12+0x8]
  409395:	movabs rdx,0xff00000000000000
  40939f:	and    rax,rdx
  4093a2:	movabs rdx,0x6100000000000000
  4093ac:	cmp    rax,rdx
  4093af:	jne    40bfd0 <_start@@Base+0x8bb0>
  4093b5:	cmp    r8,0x1
  4093b9:	jle    40c171 <_start@@Base+0x8d51>
  4093bf:	mov    ecx,0x1
  4093c4:	mov    rdx,rbx
  4093c7:	mov    rsi,r14
  4093ca:	mov    rdi,rbp
  4093cd:	call   4081b0 <_start@@Base+0x4d90>
  4093d2:	cmp    r14,rax
  4093d5:	mov    r12,rax
  4093d8:	je     40c174 <_start@@Base+0x8d54>
  4093de:	cmp    rbx,rax
  4093e1:	mov    QWORD PTR [rsp+0x58],0x0
  4093ea:	mov    QWORD PTR [rsp+0x60],0x0
  4093f3:	mov    DWORD PTR [rsp+0x4c],0x0
  4093fb:	je     40c2f1 <_start@@Base+0x8ed1>
  409401:	mov    r8,QWORD PTR [rsp]
  409405:	lea    rcx,[rsp+0x4c]
  40940a:	mov    rdx,rbx
  40940d:	mov    rsi,rax
  409410:	mov    rdi,rbp
  409413:	call   4183c0 <flatcc_json_parser_integer@@Base>
  409418:	cmp    r12,rax
  40941b:	mov    r14,rax
  40941e:	je     40c2f4 <_start@@Base+0x8ed4>
  409424:	mov    r11d,DWORD PTR [rsp+0x4c]
  409429:	mov    rax,QWORD PTR [rsp+0x60]
  40942e:	test   r11d,r11d
  409431:	jne    40c145 <_start@@Base+0x8d25>
  409437:	mov    QWORD PTR [rsp+0x58],rax
  40943c:	test   rax,rax
  40943f:	jne    40944b <_start@@Base+0x602b>
  409441:	test   BYTE PTR [rbp+0x10],0x2
  409445:	je     408a08 <_start@@Base+0x55e8>
  40944b:	mov    rdi,QWORD PTR [rbp+0x0]
  40944f:	mov    ecx,0x8
  409454:	mov    edx,0x8
  409459:	mov    esi,0x17
  40945e:	call   414920 <flatcc_builder_table_add@@Base>
  409463:	test   rax,rax
  409466:	je     408520 <_start@@Base+0x5100>
  40946c:	mov    rdx,QWORD PTR [rsp+0x58]
  409471:	mov    QWORD PTR [rax],rdx
  409474:	jmp    408a08 <_start@@Base+0x55e8>
  409479:	nop    DWORD PTR [rax+0x0]
  409480:	mov    rsi,rbx
  409483:	mov    rdi,r12
  409486:	call   403530 <_start@@Base+0x110>
  40948b:	jmp    40913a <_start@@Base+0x5d1a>
  409490:	mov    rdx,rbx
  409493:	mov    rsi,r12
  409496:	mov    rdi,rbp
  409499:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40949e:	mov    r14,rax
  4094a1:	jmp    408a08 <_start@@Base+0x55e8>
  4094a6:	mov    rsi,rbx
  4094a9:	mov    rdi,r12
  4094ac:	call   403530 <_start@@Base+0x110>
  4094b1:	jmp    408737 <_start@@Base+0x5317>
  4094b6:	mov    rsi,r14
  4094b9:	mov    rdx,rbx
  4094bc:	mov    rdi,rbp
  4094bf:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4094c4:	mov    r14,rax
  4094c7:	jmp    408a08 <_start@@Base+0x55e8>
  4094cc:	nop    DWORD PTR [rax+0x0]
  4094d0:	mov    rdx,rbx
  4094d3:	mov    rsi,r12
  4094d6:	mov    rdi,rbp
  4094d9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4094de:	mov    r14,rax
  4094e1:	jmp    408a08 <_start@@Base+0x55e8>
  4094e6:	mov    rdx,rbx
  4094e9:	mov    rsi,r12
  4094ec:	mov    rdi,rbp
  4094ef:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4094f4:	mov    r14,rax
  4094f7:	jmp    408a08 <_start@@Base+0x55e8>
  4094fc:	mov    rdx,rbx
  4094ff:	mov    rsi,r12
  409502:	mov    rdi,rbp
  409505:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40950a:	mov    r14,rax
  40950d:	jmp    408a08 <_start@@Base+0x55e8>
  409512:	mov    ecx,0x5
  409517:	mov    rdx,rbx
  40951a:	mov    rsi,r14
  40951d:	mov    rdi,rbp
  409520:	call   4081b0 <_start@@Base+0x4d90>
  409525:	cmp    rax,r14
  409528:	mov    r12,rax
  40952b:	je     408dd2 <_start@@Base+0x59b2>
  409531:	cmp    rbx,rax
  409534:	mov    BYTE PTR [rsp+0x4c],0x0
  409539:	mov    QWORD PTR [rsp+0x60],0x0
  409542:	mov    DWORD PTR [rsp+0x58],0x0
  40954a:	je     40a851 <_start@@Base+0x7431>
  409550:	mov    r8,QWORD PTR [rsp]
  409554:	lea    rcx,[rsp+0x58]
  409559:	mov    rdx,rbx
  40955c:	mov    rsi,rax
  40955f:	mov    rdi,rbp
  409562:	call   4183c0 <flatcc_json_parser_integer@@Base>
  409567:	cmp    r12,rax
  40956a:	mov    r14,rax
  40956d:	je     40a84e <_start@@Base+0x742e>
  409573:	mov    eax,DWORD PTR [rsp+0x58]
  409577:	mov    rdx,QWORD PTR [rsp+0x60]
  40957c:	test   eax,eax
  40957e:	jne    4095fb <_start@@Base+0x61db>
  409580:	cmp    rdx,0x7f
  409584:	ja     40ae14 <_start@@Base+0x79f4>
  40958a:	mov    eax,edx
  40958c:	mov    BYTE PTR [rsp+0x4c],dl
  409590:	cmp    al,0x8
  409592:	jne    40959e <_start@@Base+0x617e>
  409594:	test   BYTE PTR [rbp+0x10],0x2
  409598:	je     408a08 <_start@@Base+0x55e8>
  40959e:	mov    rdi,QWORD PTR [rbp+0x0]
  4095a2:	mov    ecx,0x1
  4095a7:	mov    edx,0x1
  4095ac:	mov    esi,0x6
  4095b1:	call   414920 <flatcc_builder_table_add@@Base>
  4095b6:	test   rax,rax
  4095b9:	je     408520 <_start@@Base+0x5100>
  4095bf:	movzx  edx,BYTE PTR [rsp+0x4c]
  4095c4:	mov    BYTE PTR [rax],dl
  4095c6:	jmp    408a08 <_start@@Base+0x55e8>
  4095cb:	mov    rsi,rbx
  4095ce:	mov    rdi,r12
  4095d1:	call   403530 <_start@@Base+0x110>
  4095d6:	jmp    40927a <_start@@Base+0x5e5a>
  4095db:	cmp    r15,0x6
  4095df:	jg     40998a <_start@@Base+0x656a>
  4095e5:	mov    rsi,r14
  4095e8:	mov    rdx,rbx
  4095eb:	mov    rdi,rbp
  4095ee:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  4095f3:	mov    r14,rax
  4095f6:	jmp    408a08 <_start@@Base+0x55e8>
  4095fb:	cmp    rdx,0x80
  409602:	mov    ecx,0x8
  409607:	ja     40ae19 <_start@@Base+0x79f9>
  40960d:	mov    eax,edx
  40960f:	neg    eax
  409611:	mov    BYTE PTR [rsp+0x4c],al
  409615:	jmp    409590 <_start@@Base+0x6170>
  40961a:	movbe  rax,QWORD PTR [r14+0x8]
  409620:	jmp    408d7a <_start@@Base+0x595a>
  409625:	movbe  rax,QWORD PTR [r14+0x8]
  40962b:	jmp    408860 <_start@@Base+0x5440>
  409630:	cmp    r15,0x4
  409634:	jg     40b0c1 <_start@@Base+0x7ca1>
  40963a:	mov    rsi,r14
  40963d:	mov    rdx,rbx
  409640:	mov    rdi,rbp
  409643:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409648:	mov    r14,rax
  40964b:	jmp    408a08 <_start@@Base+0x55e8>
  409650:	movbe  rax,QWORD PTR [r14+0x8]
  409656:	jmp    408b4a <_start@@Base+0x572a>
  40965b:	movabs rdx,0x7336345f666e7631
  409665:	cmp    rax,rdx
  409668:	jne    40af68 <_start@@Base+0x7b48>
  40966e:	cmp    r8,0x8
  409672:	jg     40b9ea <_start@@Base+0x85ca>
  409678:	lea    r14,[r12+0x8]
  40967d:	mov    r8,rbx
  409680:	sub    r8,r14
  409683:	cmp    r8,0x7
  409687:	jbe    40bfb8 <_start@@Base+0x8b98>
  40968d:	movbe  rax,QWORD PTR [r12+0x8]
  409694:	movabs rdx,0xff00000000000000
  40969e:	and    rax,rdx
  4096a1:	movabs rdx,0x6100000000000000
  4096ab:	cmp    rax,rdx
  4096ae:	jne    40bdd8 <_start@@Base+0x89b8>
  4096b4:	cmp    r8,0x1
  4096b8:	jle    40c220 <_start@@Base+0x8e00>
  4096be:	mov    ecx,0x1
  4096c3:	mov    rdx,rbx
  4096c6:	mov    rsi,r14
  4096c9:	mov    rdi,rbp
  4096cc:	call   4081b0 <_start@@Base+0x4d90>
  4096d1:	cmp    r14,rax
  4096d4:	mov    r12,rax
  4096d7:	je     40c223 <_start@@Base+0x8e03>
  4096dd:	mov    rcx,QWORD PTR [rsp]
  4096e1:	mov    rdx,rbx
  4096e4:	mov    rsi,rax
  4096e7:	mov    rdi,rbp
  4096ea:	mov    QWORD PTR [rsp+0x60],0x0
  4096f3:	call   404720 <_start@@Base+0x1300>
  4096f8:	cmp    rax,r12
  4096fb:	mov    r14,rax
  4096fe:	je     40c264 <_start@@Base+0x8e44>
  409704:	cmp    QWORD PTR [rsp+0x60],0x0
  40970a:	jne    409716 <_start@@Base+0x62f6>
  40970c:	test   BYTE PTR [rbp+0x10],0x2
  409710:	je     408a08 <_start@@Base+0x55e8>
  409716:	mov    rdi,QWORD PTR [rbp+0x0]
  40971a:	mov    ecx,0x8
  40971f:	mov    edx,0x8
  409724:	mov    esi,0x16
  409729:	call   414920 <flatcc_builder_table_add@@Base>
  40972e:	test   rax,rax
  409731:	je     40c29a <_start@@Base+0x8e7a>
  409737:	mov    rdx,QWORD PTR [rsp+0x60]
  40973c:	mov    QWORD PTR [rax],rdx
  40973f:	jmp    408a08 <_start@@Base+0x55e8>
  409744:	nop    DWORD PTR [rax+0x0]
  409748:	movbe  rax,QWORD PTR [r14+0x8]
  40974e:	jmp    40908c <_start@@Base+0x5c6c>
  409753:	cmp    r8,0x8
  409757:	jg     40b320 <_start@@Base+0x7f00>
  40975d:	lea    r14,[r12+0x8]
  409762:	mov    r8,rbx
  409765:	sub    r8,r14
  409768:	cmp    r8,0x7
  40976c:	jbe    40ba86 <_start@@Base+0x8666>
  409772:	movbe  rax,QWORD PTR [r12+0x8]
  409779:	movabs rdx,0xff00000000000000
  409783:	and    rax,rdx
  409786:	movabs rdx,0x6100000000000000
  409790:	cmp    rax,rdx
  409793:	jne    40ba70 <_start@@Base+0x8650>
  409799:	cmp    r8,0x1
  40979d:	jle    40c1d0 <_start@@Base+0x8db0>
  4097a3:	mov    ecx,0x1
  4097a8:	mov    rdx,rbx
  4097ab:	mov    rsi,r14
  4097ae:	mov    rdi,rbp
  4097b1:	call   4081b0 <_start@@Base+0x4d90>
  4097b6:	cmp    r14,rax
  4097b9:	mov    r12,rax
  4097bc:	je     40c1d0 <_start@@Base+0x8db0>
  4097c2:	mov    rcx,QWORD PTR [rsp]
  4097c6:	mov    rdx,rbx
  4097c9:	mov    rsi,rax
  4097cc:	mov    rdi,rbp
  4097cf:	mov    DWORD PTR [rsp+0x60],0x0
  4097d7:	call   404540 <_start@@Base+0x1120>
  4097dc:	cmp    rax,r12
  4097df:	mov    r14,rax
  4097e2:	je     40c2bb <_start@@Base+0x8e9b>
  4097e8:	mov    eax,DWORD PTR [rsp+0x60]
  4097ec:	test   eax,eax
  4097ee:	jne    4097fa <_start@@Base+0x63da>
  4097f0:	test   BYTE PTR [rbp+0x10],0x2
  4097f4:	je     408a08 <_start@@Base+0x55e8>
  4097fa:	mov    rdi,QWORD PTR [rbp+0x0]
  4097fe:	mov    ecx,0x4
  409803:	mov    edx,0x4
  409808:	mov    esi,0x14
  40980d:	call   414920 <flatcc_builder_table_add@@Base>
  409812:	test   rax,rax
  409815:	je     40c2a5 <_start@@Base+0x8e85>
  40981b:	mov    edx,DWORD PTR [rsp+0x60]
  40981f:	mov    DWORD PTR [rax],edx
  409821:	jmp    408a08 <_start@@Base+0x55e8>
  409826:	mov    rdx,rbx
  409829:	mov    rsi,r12
  40982c:	mov    rdi,rbp
  40982f:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409834:	mov    r14,rax
  409837:	jmp    408a08 <_start@@Base+0x55e8>
  40983c:	mov    rsi,rbx
  40983f:	mov    rdi,r12
  409842:	call   403530 <_start@@Base+0x110>
  409847:	jmp    408992 <_start@@Base+0x5572>
  40984c:	mov    ecx,0x5
  409851:	mov    rdx,rbx
  409854:	mov    rsi,r14
  409857:	mov    rdi,rbp
  40985a:	call   4081b0 <_start@@Base+0x4d90>
  40985f:	cmp    rax,r14
  409862:	mov    r12,rax
  409865:	je     409102 <_start@@Base+0x5ce2>
  40986b:	mov    rdi,QWORD PTR [rbp+0x0]
  40986f:	mov    ecx,0x3fffffff
  409874:	mov    edx,0x2
  409879:	mov    esi,0x4
  40987e:	call   412e60 <flatcc_builder_start_vector@@Base>
  409883:	test   eax,eax
  409885:	jne    40c0e7 <_start@@Base+0x8cc7>
  40988b:	mov    rsi,r12
  40988e:	mov    rcx,r13
  409891:	mov    rdx,rbx
  409894:	mov    rdi,rbp
  409897:	call   404990 <_start@@Base+0x1570>
  40989c:	mov    esi,DWORD PTR [rsp+0x40]
  4098a0:	mov    r14,rax
  4098a3:	test   esi,esi
  4098a5:	jne    4098e1 <_start@@Base+0x64c1>
  4098a7:	jmp    40a790 <_start@@Base+0x7370>
  4098ac:	nop    DWORD PTR [rax+0x0]
  4098b0:	mov    rsi,r14
  4098b3:	mov    rcx,rax
  4098b6:	mov    rdx,rbx
  4098b9:	mov    rdi,rbp
  4098bc:	call   4063c0 <_start@@Base+0x2fa0>
  4098c1:	mov    rcx,r13
  4098c4:	mov    rdx,rbx
  4098c7:	mov    rsi,rax
  4098ca:	mov    rdi,rbp
  4098cd:	call   406120 <_start@@Base+0x2d00>
  4098d2:	mov    ecx,DWORD PTR [rsp+0x40]
  4098d6:	mov    r14,rax
  4098d9:	test   ecx,ecx
  4098db:	je     40a790 <_start@@Base+0x7370>
  4098e1:	mov    rdi,QWORD PTR [rbp+0x0]
  4098e5:	mov    esi,0x1
  4098ea:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  4098ef:	test   rax,rax
  4098f2:	jne    4098b0 <_start@@Base+0x6490>
  4098f4:	jmp    408520 <_start@@Base+0x5100>
  4098f9:	movbe  rax,QWORD PTR [r14+0x10]
  4098ff:	jmp    408e4e <_start@@Base+0x5a2e>
  409904:	mov    ecx,0x2
  409909:	mov    rdx,rbx
  40990c:	mov    rsi,r14
  40990f:	mov    rdi,rbp
  409912:	call   4081b0 <_start@@Base+0x4d90>
  409917:	cmp    rax,r14
  40991a:	mov    r12,rax
  40991d:	je     408aa5 <_start@@Base+0x5685>
  409923:	mov    rcx,QWORD PTR [rsp]
  409927:	xor    r14d,r14d
  40992a:	mov    rdx,rbx
  40992d:	mov    rsi,rax
  409930:	mov    rdi,rbp
  409933:	mov    WORD PTR [rsp+0x60],r14w
  409939:	call   404630 <_start@@Base+0x1210>
  40993e:	cmp    rax,r12
  409941:	mov    r14,rax
  409944:	je     40bc26 <_start@@Base+0x8806>
  40994a:	cmp    WORD PTR [rsp+0x60],0x64
  409950:	jne    40995c <_start@@Base+0x653c>
  409952:	test   BYTE PTR [rbp+0x10],0x2
  409956:	je     408a08 <_start@@Base+0x55e8>
  40995c:	mov    rdi,QWORD PTR [rbp+0x0]
  409960:	mov    ecx,0x2
  409965:	mov    edx,0x2
  40996a:	mov    esi,0x2
  40996f:	call   414920 <flatcc_builder_table_add@@Base>
  409974:	test   rax,rax
  409977:	je     408520 <_start@@Base+0x5100>
  40997d:	movzx  edx,WORD PTR [rsp+0x60]
  409982:	mov    WORD PTR [rax],dx
  409985:	jmp    408a08 <_start@@Base+0x55e8>
  40998a:	mov    ecx,0x6
  40998f:	mov    rdx,rbx
  409992:	mov    rsi,r14
  409995:	mov    rdi,rbp
  409998:	call   4081b0 <_start@@Base+0x4d90>
  40999d:	cmp    rax,r14
  4099a0:	mov    r12,rax
  4099a3:	je     4095e5 <_start@@Base+0x61c5>
  4099a9:	mov    rcx,QWORD PTR [rsp]
  4099ad:	mov    rdx,rbx
  4099b0:	mov    rsi,rax
  4099b3:	mov    rdi,rbp
  4099b6:	mov    DWORD PTR [rsp+0x60],0x0
  4099be:	call   417620 <flatcc_json_parser_float@@Base>
  4099c3:	cmp    rax,r12
  4099c6:	mov    r14,rax
  4099c9:	je     40bda2 <_start@@Base+0x8982>
  4099cf:	vmovss xmm0,DWORD PTR [rsp+0x60]
  4099d5:	vucomiss xmm0,DWORD PTR [rip+0x10b73]        # 41a550 <_IO_stdin_used@@Base+0x550>
  4099dd:	jp     4099eb <_start@@Base+0x65cb>
  4099df:	jne    4099eb <_start@@Base+0x65cb>
  4099e1:	test   BYTE PTR [rbp+0x10],0x2
  4099e5:	je     408a08 <_start@@Base+0x55e8>
  4099eb:	mov    rdi,QWORD PTR [rbp+0x0]
  4099ef:	mov    ecx,0x4
  4099f4:	mov    edx,0x4
  4099f9:	mov    esi,0x1a
  4099fe:	call   414920 <flatcc_builder_table_add@@Base>
  409a03:	test   rax,rax
  409a06:	je     408520 <_start@@Base+0x5100>
  409a0c:	vmovss xmm0,DWORD PTR [rsp+0x60]
  409a12:	vmovss DWORD PTR [rax],xmm0
  409a16:	jmp    408a08 <_start@@Base+0x55e8>
  409a1b:	mov    ecx,0x2
  409a20:	mov    rdx,rbx
  409a23:	mov    rsi,r12
  409a26:	mov    rdi,rbp
  409a29:	call   4081b0 <_start@@Base+0x4d90>
  409a2e:	cmp    r12,rax
  409a31:	mov    r14,rax
  409a34:	je     4092a4 <_start@@Base+0x5e84>
  409a3a:	mov    rdi,QWORD PTR [rbp+0x0]
  409a3e:	mov    esi,0x3
  409a43:	mov    DWORD PTR [rsp+0x44],0x0
  409a4b:	call   413080 <flatcc_builder_start_table@@Base>
  409a50:	test   eax,eax
  409a52:	jne    409d14 <_start@@Base+0x68f4>
  409a58:	lea    r12,[rsp+0x58]
  409a5d:	mov    rsi,r14
  409a60:	mov    rdx,rbx
  409a63:	mov    rdi,rbp
  409a66:	mov    rcx,r12
  409a69:	call   4048f0 <_start@@Base+0x14d0>
  409a6e:	mov    r14,rax
  409a71:	mov    eax,DWORD PTR [rsp+0x58]
  409a75:	test   eax,eax
  409a77:	je     40b1fc <_start@@Base+0x7ddc>
  409a7d:	mov    QWORD PTR [rsp+0x8],r13
  409a82:	movabs r15,0x6e6573746563ffff
  409a8c:	mov    r13,QWORD PTR [rsp]
  409a90:	jmp    409af1 <_start@@Base+0x66d1>
  409a92:	nop    WORD PTR [rax+rax*1+0x0]
  409a98:	movabs rdx,0xffffffff00000000
  409aa2:	and    rax,rdx
  409aa5:	movabs rdx,0x6461746100000000
  409aaf:	cmp    rax,rdx
  409ab2:	jne    409abe <_start@@Base+0x669e>
  409ab4:	cmp    r9,0x4
  409ab8:	jg     40a229 <_start@@Base+0x6e09>
  409abe:	mov    rsi,r14
  409ac1:	mov    rdx,rbx
  409ac4:	mov    rdi,rbp
  409ac7:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409acc:	mov    r14,rax
  409acf:	mov    rsi,r14
  409ad2:	mov    rcx,r12
  409ad5:	mov    rdx,rbx
  409ad8:	mov    rdi,rbp
  409adb:	call   406270 <_start@@Base+0x2e50>
  409ae0:	mov    r11d,DWORD PTR [rsp+0x58]
  409ae5:	mov    r14,rax
  409ae8:	test   r11d,r11d
  409aeb:	je     40b1f7 <_start@@Base+0x7dd7>
  409af1:	cmp    rbx,r14
  409af4:	je     409be2 <_start@@Base+0x67c2>
  409afa:	movzx  eax,BYTE PTR [r14]
  409afe:	cmp    al,0x22
  409b00:	je     409c10 <_start@@Base+0x67f0>
  409b06:	cmp    al,0x2e
  409b08:	je     40a630 <_start@@Base+0x7210>
  409b0e:	mov    DWORD PTR [rbp+0x14],0x1
  409b15:	mov    r9,rbx
  409b18:	sub    r9,r14
  409b1b:	cmp    r9,0x7
  409b1f:	jbe    409be8 <_start@@Base+0x67c8>
  409b25:	movbe  rax,QWORD PTR [r14]
  409b2a:	cmp    rax,r15
  409b2d:	jbe    409a98 <_start@@Base+0x6678>
  409b33:	mov    rdx,rax
  409b36:	movabs rcx,0x75726c6461746100
  409b40:	xor    dl,dl
  409b42:	cmp    rdx,rcx
  409b45:	je     409cb0 <_start@@Base+0x6890>
  409b4b:	xor    ax,ax
  409b4e:	movabs rcx,0x6e65737465640000
  409b58:	cmp    rax,rcx
  409b5b:	jne    409abe <_start@@Base+0x669e>
  409b61:	cmp    r9,0x6
  409b65:	jle    409abe <_start@@Base+0x669e>
  409b6b:	mov    rsi,r14
  409b6e:	mov    ecx,0x6
  409b73:	mov    rdx,rbx
  409b76:	mov    rdi,rbp
  409b79:	call   4081b0 <_start@@Base+0x4d90>
  409b7e:	cmp    rax,r14
  409b81:	mov    rsi,rax
  409b84:	je     409abe <_start@@Base+0x669e>
  409b8a:	xor    r8d,r8d
  409b8d:	mov    rcx,r13
  409b90:	mov    rdx,rbx
  409b93:	mov    rdi,rbp
  409b96:	call   418480 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  409b9b:	mov    r14,rax
  409b9e:	mov    eax,DWORD PTR [rsp+0x60]
  409ba2:	test   eax,eax
  409ba4:	je     409d0f <_start@@Base+0x68ef>
  409baa:	mov    rdi,QWORD PTR [rbp+0x0]
  409bae:	mov    esi,0x2
  409bb3:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  409bb8:	test   rax,rax
  409bbb:	je     409d0f <_start@@Base+0x68ef>
  409bc1:	mov    edx,DWORD PTR [rsp+0x60]
  409bc5:	mov    DWORD PTR [rax],edx
  409bc7:	jmp    409acf <_start@@Base+0x66af>
  409bcc:	xor    r8d,r8d
  409bcf:	mov    r14,rbx
  409bd2:	mov    rsi,rbx
  409bd5:	mov    rdi,r14
  409bd8:	call   403530 <_start@@Base+0x110>
  409bdd:	jmp    408c89 <_start@@Base+0x5869>
  409be2:	xor    r9d,r9d
  409be5:	mov    r14,rbx
  409be8:	mov    rsi,rbx
  409beb:	mov    rdi,r14
  409bee:	call   403530 <_start@@Base+0x110>
  409bf3:	jmp    409b2a <_start@@Base+0x670a>
  409bf8:	nop    DWORD PTR [rax+rax*1+0x0]
  409c00:	add    r14,0x1
  409c04:	mov    DWORD PTR [rbp+0x14],0x0
  409c0b:	jmp    408c74 <_start@@Base+0x5854>
  409c10:	add    r14,0x1
  409c14:	mov    DWORD PTR [rbp+0x14],0x0
  409c1b:	jmp    409b15 <_start@@Base+0x66f5>
  409c20:	cmp    r8,0x3
  409c24:	jle    408c1f <_start@@Base+0x57ff>
  409c2a:	mov    ecx,0x3
  409c2f:	mov    rdx,rbx
  409c32:	mov    rsi,r14
  409c35:	mov    rdi,rbp
  409c38:	call   4081b0 <_start@@Base+0x4d90>
  409c3d:	cmp    rax,r14
  409c40:	mov    r13,rax
  409c43:	je     408c1f <_start@@Base+0x57ff>
  409c49:	mov    rcx,r15
  409c4c:	mov    rdx,rbx
  409c4f:	mov    rsi,rax
  409c52:	mov    rdi,rbp
  409c55:	mov    QWORD PTR [rsp+0x60],0x0
  409c5e:	call   404720 <_start@@Base+0x1300>
  409c63:	cmp    r13,rax
  409c66:	mov    r14,rax
  409c69:	je     40bb30 <_start@@Base+0x8710>
  409c6f:	cmp    QWORD PTR [rsp+0x60],0x0
  409c75:	jne    409c81 <_start@@Base+0x6861>
  409c77:	test   BYTE PTR [rbp+0x10],0x2
  409c7b:	je     408c30 <_start@@Base+0x5810>
  409c81:	mov    rdi,QWORD PTR [rbp+0x0]
  409c85:	mov    ecx,0x8
  409c8a:	mov    edx,0x8
  409c8f:	mov    esi,0x1
  409c94:	call   414920 <flatcc_builder_table_add@@Base>
  409c99:	test   rax,rax
  409c9c:	je     40a5e1 <_start@@Base+0x71c1>
  409ca2:	mov    rdx,QWORD PTR [rsp+0x60]
  409ca7:	mov    QWORD PTR [rax],rdx
  409caa:	jmp    408c30 <_start@@Base+0x5810>
  409caf:	nop
  409cb0:	cmp    r9,0x7
  409cb4:	jle    409abe <_start@@Base+0x669e>
  409cba:	mov    rsi,r14
  409cbd:	mov    ecx,0x7
  409cc2:	mov    rdx,rbx
  409cc5:	mov    rdi,rbp
  409cc8:	call   4081b0 <_start@@Base+0x4d90>
  409ccd:	cmp    rax,r14
  409cd0:	mov    rsi,rax
  409cd3:	je     409abe <_start@@Base+0x669e>
  409cd9:	mov    r8d,0x1
  409cdf:	mov    rcx,r13
  409ce2:	mov    rdx,rbx
  409ce5:	mov    rdi,rbp
  409ce8:	call   418480 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  409ced:	mov    r14,rax
  409cf0:	mov    eax,DWORD PTR [rsp+0x60]
  409cf4:	test   eax,eax
  409cf6:	je     409d0f <_start@@Base+0x68ef>
  409cf8:	mov    rdi,QWORD PTR [rbp+0x0]
  409cfc:	mov    esi,0x1
  409d01:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  409d06:	test   rax,rax
  409d09:	jne    409bc1 <_start@@Base+0x67a1>
  409d0f:	mov    r13,QWORD PTR [rsp+0x8]
  409d14:	mov    rsi,r14
  409d17:	mov    ecx,0x21
  409d1c:	mov    rdx,rbx
  409d1f:	mov    rdi,rbp
  409d22:	call   416820 <flatcc_json_parser_set_error@@Base>
  409d27:	mov    r9d,DWORD PTR [rsp+0x44]
  409d2c:	mov    r14,rax
  409d2f:	test   r9d,r9d
  409d32:	je     408520 <_start@@Base+0x5100>
  409d38:	mov    rdi,QWORD PTR [rbp+0x0]
  409d3c:	mov    esi,0x23
  409d41:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  409d46:	test   rax,rax
  409d49:	je     408520 <_start@@Base+0x5100>
  409d4f:	mov    edx,DWORD PTR [rsp+0x44]
  409d53:	mov    DWORD PTR [rax],edx
  409d55:	jmp    408a08 <_start@@Base+0x55e8>
  409d5a:	mov    rdi,QWORD PTR [rbp+0x0]
  409d5e:	call   413d60 <flatcc_builder_end_vector@@Base>
  409d63:	test   eax,eax
  409d65:	mov    DWORD PTR [rsp+0x44],eax
  409d69:	je     408520 <_start@@Base+0x5100>
  409d6f:	mov    rdi,QWORD PTR [rbp+0x0]
  409d73:	mov    esi,0x9
  409d78:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  409d7d:	test   rax,rax
  409d80:	je     408520 <_start@@Base+0x5100>
  409d86:	mov    edx,DWORD PTR [rsp+0x44]
  409d8a:	mov    DWORD PTR [rax],edx
  409d8c:	jmp    408a08 <_start@@Base+0x55e8>
  409d91:	mov    rdx,rbx
  409d94:	mov    rsi,r8
  409d97:	mov    rdi,rbp
  409d9a:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409d9f:	mov    r14,rax
  409da2:	jmp    408a08 <_start@@Base+0x55e8>
  409da7:	mov    rdx,rbx
  409daa:	mov    rsi,r12
  409dad:	mov    rdi,rbp
  409db0:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  409db5:	mov    r14,rax
  409db8:	jmp    408a08 <_start@@Base+0x55e8>
  409dbd:	mov    ecx,0x5
  409dc2:	mov    rdx,rbx
  409dc5:	mov    rsi,r14
  409dc8:	mov    rdi,rbp
  409dcb:	call   4081b0 <_start@@Base+0x4d90>
  409dd0:	cmp    rax,r14
  409dd3:	mov    r13,rax
  409dd6:	je     408c1f <_start@@Base+0x57ff>
  409ddc:	xor    esi,esi
  409dde:	cmp    rbx,rax
  409de1:	mov    QWORD PTR [rsp+0x60],0x0
  409dea:	mov    WORD PTR [rsp+0x3e],si
  409def:	mov    DWORD PTR [rsp+0x58],0x0
  409df7:	je     40ae78 <_start@@Base+0x7a58>
  409dfd:	mov    rcx,QWORD PTR [rsp+0x8]
  409e02:	mov    r8,r15
  409e05:	mov    rdx,rbx
  409e08:	mov    rsi,rax
  409e0b:	mov    rdi,rbp
  409e0e:	call   4183c0 <flatcc_json_parser_integer@@Base>
  409e13:	cmp    r13,rax
  409e16:	mov    r14,rax
  409e19:	je     40ae75 <_start@@Base+0x7a55>
  409e1f:	mov    ecx,DWORD PTR [rsp+0x58]
  409e23:	test   ecx,ecx
  409e25:	jne    40afb4 <_start@@Base+0x7b94>
  409e2b:	mov    rax,QWORD PTR [rsp+0x60]
  409e30:	cmp    rax,0xffff
  409e36:	ja     40b190 <_start@@Base+0x7d70>
  409e3c:	mov    edx,eax
  409e3e:	mov    WORD PTR [rsp+0x3e],ax
  409e43:	test   dx,dx
  409e46:	jne    409e52 <_start@@Base+0x6a32>
  409e48:	test   BYTE PTR [rbp+0x10],0x2
  409e4c:	je     408c30 <_start@@Base+0x5810>
  409e52:	mov    rdi,QWORD PTR [rbp+0x0]
  409e56:	mov    ecx,0x2
  409e5b:	mov    edx,0x2
  409e60:	mov    esi,0x2
  409e65:	call   414920 <flatcc_builder_table_add@@Base>
  409e6a:	test   rax,rax
  409e6d:	je     40bb62 <_start@@Base+0x8742>
  409e73:	movzx  edx,WORD PTR [rsp+0x3e]
  409e78:	mov    WORD PTR [rax],dx
  409e7b:	jmp    408c30 <_start@@Base+0x5810>
  409e80:	mov    rsi,r14
  409e83:	mov    ecx,0x5
  409e88:	mov    rdx,rbx
  409e8b:	mov    rdi,rbp
  409e8e:	call   4081b0 <_start@@Base+0x4d90>
  409e93:	cmp    rax,r14
  409e96:	mov    rsi,rax
  409e99:	je     40918a <_start@@Base+0x5d6a>
  409e9f:	lea    r12,[rsp+0x44]
  409ea4:	mov    rdx,rbx
  409ea7:	mov    rdi,rbp
  409eaa:	mov    rcx,r12
  409ead:	call   408290 <_start@@Base+0x4e70>
  409eb2:	mov    r14,rax
  409eb5:	mov    eax,DWORD PTR [rsp+0x44]
  409eb9:	test   eax,eax
  409ebb:	je     408520 <_start@@Base+0x5100>
  409ec1:	mov    rdi,QWORD PTR [rbp+0x0]
  409ec5:	mov    esi,0xc
  409eca:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  409ecf:	test   rax,rax
  409ed2:	je     408520 <_start@@Base+0x5100>
  409ed8:	mov    edx,DWORD PTR [rsp+0x44]
  409edc:	mov    DWORD PTR [rax],edx
  409ede:	jmp    408a08 <_start@@Base+0x55e8>
  409ee3:	lea    r12,[r14+0x10]
  409ee7:	mov    r8,rbx
  409eea:	sub    r8,r12
  409eed:	cmp    r8,0x7
  409ef1:	jbe    40aeb1 <_start@@Base+0x7a91>
  409ef7:	movbe  rax,QWORD PTR [r14+0x10]
  409efd:	movabs rdx,0xffff000000000000
  409f07:	movabs rcx,0x6732000000000000
  409f11:	and    rdx,rax
  409f14:	cmp    rdx,rcx
  409f17:	je     40b223 <_start@@Base+0x7e03>
  409f1d:	movabs rdx,0xff00000000000000
  409f27:	and    rax,rdx
  409f2a:	movabs rdx,0x6700000000000000
  409f34:	cmp    rax,rdx
  409f37:	jne    40b048 <_start@@Base+0x7c28>
  409f3d:	cmp    r8,0x1
  409f41:	jle    40bec6 <_start@@Base+0x8aa6>
  409f47:	mov    ecx,0x1
  409f4c:	mov    rdx,rbx
  409f4f:	mov    rsi,r12
  409f52:	mov    rdi,rbp
  409f55:	call   4081b0 <_start@@Base+0x4d90>
  409f5a:	cmp    r12,rax
  409f5d:	mov    r14,rax
  409f60:	je     40bec6 <_start@@Base+0x8aa6>
  409f66:	mov    rdi,QWORD PTR [rbp+0x0]
  409f6a:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  409f6f:	test   eax,eax
  409f71:	jne    408520 <_start@@Base+0x5100>
  409f77:	mov    rsi,r14
  409f7a:	mov    rdi,rbp
  409f7d:	mov    rcx,r13
  409f80:	mov    rdx,rbx
  409f83:	call   404990 <_start@@Base+0x1570>
  409f88:	mov    edi,DWORD PTR [rsp+0x40]
  409f8c:	mov    r14,rax
  409f8f:	test   edi,edi
  409f91:	je     40bcae <_start@@Base+0x888e>
  409f97:	lea    r12,[rsp+0x44]
  409f9c:	jmp    409fdd <_start@@Base+0x6bbd>
  409f9e:	xchg   ax,ax
  409fa0:	mov    rdi,QWORD PTR [rbp+0x0]
  409fa4:	mov    esi,0x1
  409fa9:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  409fae:	test   rax,rax
  409fb1:	je     408520 <_start@@Base+0x5100>
  409fb7:	mov    edx,DWORD PTR [rsp+0x44]
  409fbb:	mov    rcx,r13
  409fbe:	mov    rsi,r14
  409fc1:	mov    rdi,rbp
  409fc4:	mov    DWORD PTR [rax],edx
  409fc6:	mov    rdx,rbx
  409fc9:	call   406120 <_start@@Base+0x2d00>
  409fce:	mov    ecx,DWORD PTR [rsp+0x40]
  409fd2:	mov    r14,rax
  409fd5:	test   ecx,ecx
  409fd7:	je     40bcae <_start@@Base+0x888e>
  409fdd:	mov    rsi,r14
  409fe0:	mov    rcx,r12
  409fe3:	mov    rdx,rbx
  409fe6:	mov    rdi,rbp
  409fe9:	call   418880 <flatcc_json_parser_build_string@@Base>
  409fee:	mov    esi,DWORD PTR [rsp+0x44]
  409ff2:	mov    r14,rax
  409ff5:	test   esi,esi
  409ff7:	jne    409fa0 <_start@@Base+0x6b80>
  409ff9:	jmp    408520 <_start@@Base+0x5100>
  409ffe:	xchg   ax,ax
  40a000:	cmp    r8,0x8
  40a004:	jle    4094d0 <_start@@Base+0x60b0>
  40a00a:	mov    ecx,0x8
  40a00f:	mov    rdx,rbx
  40a012:	mov    rsi,r12
  40a015:	mov    rdi,rbp
  40a018:	call   4081b0 <_start@@Base+0x4d90>
  40a01d:	cmp    r12,rax
  40a020:	mov    r14,rax
  40a023:	je     4094d0 <_start@@Base+0x60b0>
  40a029:	mov    rdi,QWORD PTR [rbp+0x0]
  40a02d:	mov    ecx,0xffffffff
  40a032:	mov    edx,0x1
  40a037:	mov    esi,0x1
  40a03c:	call   412e60 <flatcc_builder_start_vector@@Base>
  40a041:	test   eax,eax
  40a043:	jne    408520 <_start@@Base+0x5100>
  40a049:	mov    rsi,r14
  40a04c:	mov    rcx,r13
  40a04f:	mov    rdx,rbx
  40a052:	mov    rdi,rbp
  40a055:	call   404990 <_start@@Base+0x1570>
  40a05a:	mov    r14,rax
  40a05d:	mov    eax,DWORD PTR [rsp+0x40]
  40a061:	test   eax,eax
  40a063:	je     40b074 <_start@@Base+0x7c54>
  40a069:	lea    rax,[rsp+0x58]
  40a06e:	mov    QWORD PTR [rsp+0x8],rax
  40a073:	lea    rax,[rsp+0x4c]
  40a078:	mov    QWORD PTR [rsp+0x18],rax
  40a07d:	jmp    40a120 <_start@@Base+0x6d00>
  40a082:	nop    WORD PTR [rax+rax*1+0x0]
  40a088:	cmp    rbx,r14
  40a08b:	mov    QWORD PTR [rsp+0x60],0x0
  40a094:	mov    DWORD PTR [rsp+0x58],0x0
  40a09c:	je     40a1fa <_start@@Base+0x6dda>
  40a0a2:	mov    r8,QWORD PTR [rsp]
  40a0a6:	mov    rcx,QWORD PTR [rsp+0x8]
  40a0ab:	mov    rsi,r14
  40a0ae:	mov    rdx,rbx
  40a0b1:	mov    rdi,rbp
  40a0b4:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40a0b9:	cmp    rax,r14
  40a0bc:	mov    rsi,rax
  40a0bf:	je     40a204 <_start@@Base+0x6de4>
  40a0c5:	mov    eax,DWORD PTR [rsp+0x58]
  40a0c9:	mov    ecx,0x8
  40a0ce:	test   eax,eax
  40a0d0:	jne    40a1e5 <_start@@Base+0x6dc5>
  40a0d6:	mov    rdx,QWORD PTR [rsp+0x60]
  40a0db:	test   dl,dl
  40a0dd:	setne  al
  40a0e0:	cmp    rdx,0xff
  40a0e7:	ja     40a1e0 <_start@@Base+0x6dc0>
  40a0ed:	mov    BYTE PTR [rsp+0x4c],al
  40a0f1:	cmp    rsi,r14
  40a0f4:	je     40a1ae <_start@@Base+0x6d8e>
  40a0fa:	movzx  eax,BYTE PTR [rsp+0x4c]
  40a0ff:	mov    rcx,r13
  40a102:	mov    rdx,rbx
  40a105:	mov    rdi,rbp
  40a108:	mov    BYTE PTR [r12],al
  40a10c:	call   406120 <_start@@Base+0x2d00>
  40a111:	mov    r14,rax
  40a114:	mov    eax,DWORD PTR [rsp+0x40]
  40a118:	test   eax,eax
  40a11a:	je     40b074 <_start@@Base+0x7c54>
  40a120:	mov    rdi,QWORD PTR [rbp+0x0]
  40a124:	mov    esi,0x1
  40a129:	mov    BYTE PTR [rsp+0x4c],0x0
  40a12e:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40a133:	test   rax,rax
  40a136:	mov    r12,rax
  40a139:	je     408520 <_start@@Base+0x5100>
  40a13f:	mov    r15,rbx
  40a142:	sub    r15,r14
  40a145:	cmp    r15,0x3
  40a149:	jle    40a088 <_start@@Base+0x6c68>
  40a14f:	lea    rsi,[rip+0x10147]        # 41a29d <_IO_stdin_used@@Base+0x29d>
  40a156:	mov    edx,0x4
  40a15b:	mov    rdi,r14
  40a15e:	call   4030d0 <memcmp@plt>
  40a163:	test   eax,eax
  40a165:	je     40a1a0 <_start@@Base+0x6d80>
  40a167:	cmp    r15,0x4
  40a16b:	je     40a088 <_start@@Base+0x6c68>
  40a171:	lea    rsi,[rip+0x1012a]        # 41a2a2 <_IO_stdin_used@@Base+0x2a2>
  40a178:	mov    edx,0x5
  40a17d:	mov    rdi,r14
  40a180:	call   4030d0 <memcmp@plt>
  40a185:	test   eax,eax
  40a187:	jne    40a088 <_start@@Base+0x6c68>
  40a18d:	mov    BYTE PTR [rsp+0x4c],0x0
  40a192:	lea    rsi,[r14+0x5]
  40a196:	jmp    40a0f1 <_start@@Base+0x6cd1>
  40a19b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a1a0:	mov    BYTE PTR [rsp+0x4c],0x1
  40a1a5:	lea    rsi,[r14+0x4]
  40a1a9:	jmp    40a0f1 <_start@@Base+0x6cd1>
  40a1ae:	mov    r8,QWORD PTR [rsp+0x18]
  40a1b3:	lea    rcx,[rip+0x17546]        # 421700 <__data_start@@Base+0x640>
  40a1ba:	mov    rdx,rbx
  40a1bd:	mov    rdi,rbp
  40a1c0:	call   404f10 <_start@@Base+0x1af0>
  40a1c5:	cmp    rax,r14
  40a1c8:	mov    rsi,rax
  40a1cb:	je     40a1d6 <_start@@Base+0x6db6>
  40a1cd:	cmp    rbx,rax
  40a1d0:	jne    40a0fa <_start@@Base+0x6cda>
  40a1d6:	mov    r14,rsi
  40a1d9:	jmp    408520 <_start@@Base+0x5100>
  40a1de:	xchg   ax,ax
  40a1e0:	mov    ecx,0x7
  40a1e5:	mov    rdx,rbx
  40a1e8:	mov    rdi,rbp
  40a1eb:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a1f0:	mov    rsi,rax
  40a1f3:	xor    eax,eax
  40a1f5:	jmp    40a0ed <_start@@Base+0x6ccd>
  40a1fa:	mov    rsi,rbx
  40a1fd:	xor    eax,eax
  40a1ff:	jmp    40a0ed <_start@@Base+0x6ccd>
  40a204:	mov    rsi,r14
  40a207:	xor    eax,eax
  40a209:	jmp    40a0ed <_start@@Base+0x6ccd>
  40a20e:	mov    rsi,r14
  40a211:	mov    ecx,0x5
  40a216:	mov    rdx,rbx
  40a219:	mov    rdi,rbp
  40a21c:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a221:	mov    r14,rax
  40a224:	jmp    408c74 <_start@@Base+0x5854>
  40a229:	mov    rsi,r14
  40a22c:	mov    ecx,0x4
  40a231:	mov    rdx,rbx
  40a234:	mov    rdi,rbp
  40a237:	call   4081b0 <_start@@Base+0x4d90>
  40a23c:	cmp    rax,r14
  40a23f:	mov    rsi,rax
  40a242:	je     409abe <_start@@Base+0x669e>
  40a248:	xor    r8d,r8d
  40a24b:	mov    rcx,r13
  40a24e:	mov    rdx,rbx
  40a251:	mov    rdi,rbp
  40a254:	call   418480 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40a259:	mov    r14,rax
  40a25c:	mov    eax,DWORD PTR [rsp+0x60]
  40a260:	test   eax,eax
  40a262:	je     409d0f <_start@@Base+0x68ef>
  40a268:	mov    rdi,QWORD PTR [rbp+0x0]
  40a26c:	xor    esi,esi
  40a26e:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40a273:	test   rax,rax
  40a276:	jne    409bc1 <_start@@Base+0x67a1>
  40a27c:	jmp    409d0f <_start@@Base+0x68ef>
  40a281:	nop    DWORD PTR [rax+0x0]
  40a288:	mov    ecx,0x8
  40a28d:	mov    rdx,rbx
  40a290:	mov    rsi,r14
  40a293:	mov    rdi,rbp
  40a296:	call   4081b0 <_start@@Base+0x4d90>
  40a29b:	cmp    rax,r14
  40a29e:	mov    r12,rax
  40a2a1:	je     408f3a <_start@@Base+0x5b1a>
  40a2a7:	mov    r14,rbx
  40a2aa:	mov    BYTE PTR [rsp+0x4c],0x0
  40a2af:	sub    r14,rax
  40a2b2:	cmp    r14,0x3
  40a2b6:	jle    40a2f7 <_start@@Base+0x6ed7>
  40a2b8:	lea    rsi,[rip+0xffde]        # 41a29d <_IO_stdin_used@@Base+0x29d>
  40a2bf:	mov    edx,0x4
  40a2c4:	mov    rdi,rax
  40a2c7:	call   4030d0 <memcmp@plt>
  40a2cc:	test   eax,eax
  40a2ce:	je     40ae66 <_start@@Base+0x7a46>
  40a2d4:	cmp    r14,0x4
  40a2d8:	je     40a2f7 <_start@@Base+0x6ed7>
  40a2da:	lea    rsi,[rip+0xffc1]        # 41a2a2 <_IO_stdin_used@@Base+0x2a2>
  40a2e1:	mov    edx,0x5
  40a2e6:	mov    rdi,r12
  40a2e9:	lea    r14,[r12+0x5]
  40a2ee:	call   4030d0 <memcmp@plt>
  40a2f3:	test   eax,eax
  40a2f5:	je     40a36f <_start@@Base+0x6f4f>
  40a2f7:	cmp    rbx,r12
  40a2fa:	mov    QWORD PTR [rsp+0x60],0x0
  40a303:	mov    DWORD PTR [rsp+0x58],0x0
  40a30b:	je     40add6 <_start@@Base+0x79b6>
  40a311:	mov    r8,QWORD PTR [rsp]
  40a315:	lea    rcx,[rsp+0x58]
  40a31a:	mov    rdx,rbx
  40a31d:	mov    rsi,r12
  40a320:	mov    rdi,rbp
  40a323:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40a328:	cmp    r12,rax
  40a32b:	mov    r14,rax
  40a32e:	je     40add6 <_start@@Base+0x79b6>
  40a334:	mov    r8d,DWORD PTR [rsp+0x58]
  40a339:	mov    ecx,0x8
  40a33e:	test   r8d,r8d
  40a341:	jne    40afe5 <_start@@Base+0x7bc5>
  40a347:	mov    rax,QWORD PTR [rsp+0x60]
  40a34c:	cmp    rax,0xff
  40a352:	ja     40afe0 <_start@@Base+0x7bc0>
  40a358:	test   al,al
  40a35a:	setne  al
  40a35d:	mov    BYTE PTR [rsp+0x4c],al
  40a361:	cmp    al,0x1
  40a363:	jne    40a36f <_start@@Base+0x6f4f>
  40a365:	test   BYTE PTR [rbp+0x10],0x2
  40a369:	je     408a08 <_start@@Base+0x55e8>
  40a36f:	mov    rdi,QWORD PTR [rbp+0x0]
  40a373:	mov    ecx,0x1
  40a378:	mov    edx,0x1
  40a37d:	mov    esi,0xf
  40a382:	call   414920 <flatcc_builder_table_add@@Base>
  40a387:	test   rax,rax
  40a38a:	je     408520 <_start@@Base+0x5100>
  40a390:	movzx  edx,BYTE PTR [rsp+0x4c]
  40a395:	mov    BYTE PTR [rax],dl
  40a397:	jmp    408a08 <_start@@Base+0x55e8>
  40a39c:	mov    rdx,rbx
  40a39f:	mov    rsi,r8
  40a3a2:	mov    rdi,rbp
  40a3a5:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a3aa:	mov    r14,rax
  40a3ad:	jmp    408a08 <_start@@Base+0x55e8>
  40a3b2:	mov    ecx,0x4
  40a3b7:	mov    rdx,rbx
  40a3ba:	mov    rsi,r14
  40a3bd:	mov    rdi,rbp
  40a3c0:	call   4081b0 <_start@@Base+0x4d90>
  40a3c5:	cmp    rax,r14
  40a3c8:	mov    r12,rax
  40a3cb:	je     408fca <_start@@Base+0x5baa>
  40a3d1:	mov    rdi,QWORD PTR [rbp+0x0]
  40a3d5:	mov    ecx,0xffffffff
  40a3da:	mov    edx,0x1
  40a3df:	mov    esi,0x1
  40a3e4:	call   412e60 <flatcc_builder_start_vector@@Base>
  40a3e9:	test   eax,eax
  40a3eb:	jne    40bebe <_start@@Base+0x8a9e>
  40a3f1:	mov    rcx,r13
  40a3f4:	mov    rdx,rbx
  40a3f7:	mov    rsi,r12
  40a3fa:	mov    rdi,rbp
  40a3fd:	call   404990 <_start@@Base+0x1570>
  40a402:	mov    r14,rax
  40a405:	mov    eax,DWORD PTR [rsp+0x40]
  40a409:	test   eax,eax
  40a40b:	je     40a545 <_start@@Base+0x7125>
  40a411:	lea    rax,[rsp+0x4c]
  40a416:	lea    r12,[rsp+0x58]
  40a41b:	mov    QWORD PTR [rsp+0x8],rax
  40a420:	jmp    40a48f <_start@@Base+0x706f>
  40a422:	nop    WORD PTR [rax+rax*1+0x0]
  40a428:	mov    r8,QWORD PTR [rsp]
  40a42c:	mov    rsi,r14
  40a42f:	mov    rcx,r12
  40a432:	mov    rdx,rbx
  40a435:	mov    rdi,rbp
  40a438:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40a43d:	cmp    rax,r14
  40a440:	mov    rsi,rax
  40a443:	je     40a4cd <_start@@Base+0x70ad>
  40a449:	mov    eax,DWORD PTR [rsp+0x58]
  40a44d:	test   eax,eax
  40a44f:	jne    40a510 <_start@@Base+0x70f0>
  40a455:	mov    rdx,QWORD PTR [rsp+0x60]
  40a45a:	cmp    rdx,0xff
  40a461:	ja     40a530 <_start@@Base+0x7110>
  40a467:	mov    eax,edx
  40a469:	mov    BYTE PTR [rsp+0x4c],dl
  40a46d:	mov    BYTE PTR [r15],al
  40a470:	mov    rcx,r13
  40a473:	mov    rdx,rbx
  40a476:	mov    rdi,rbp
  40a479:	call   406120 <_start@@Base+0x2d00>
  40a47e:	mov    r15d,DWORD PTR [rsp+0x40]
  40a483:	mov    r14,rax
  40a486:	test   r15d,r15d
  40a489:	je     40a545 <_start@@Base+0x7125>
  40a48f:	mov    rdi,QWORD PTR [rbp+0x0]
  40a493:	mov    esi,0x1
  40a498:	mov    BYTE PTR [rsp+0x4c],0x0
  40a49d:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40a4a2:	test   rax,rax
  40a4a5:	mov    r15,rax
  40a4a8:	je     408520 <_start@@Base+0x5100>
  40a4ae:	cmp    rbx,r14
  40a4b1:	mov    QWORD PTR [rsp+0x60],0x0
  40a4ba:	mov    DWORD PTR [rsp+0x58],0x0
  40a4c2:	mov    BYTE PTR [rsp+0x4c],0x0
  40a4c7:	jne    40a428 <_start@@Base+0x7008>
  40a4cd:	mov    r8,QWORD PTR [rsp+0x8]
  40a4d2:	lea    rcx,[rip+0x172c7]        # 4217a0 <__data_start@@Base+0x6e0>
  40a4d9:	mov    rsi,r14
  40a4dc:	mov    rdx,rbx
  40a4df:	mov    rdi,rbp
  40a4e2:	call   405a60 <_start@@Base+0x2640>
  40a4e7:	cmp    rax,r14
  40a4ea:	mov    rsi,rax
  40a4ed:	je     40b88b <_start@@Base+0x846b>
  40a4f3:	cmp    rbx,rax
  40a4f6:	je     40b88b <_start@@Base+0x846b>
  40a4fc:	movzx  eax,BYTE PTR [rsp+0x4c]
  40a501:	jmp    40a46d <_start@@Base+0x704d>
  40a506:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a510:	mov    ecx,0x8
  40a515:	mov    rdx,rbx
  40a518:	mov    rdi,rbp
  40a51b:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a520:	mov    rsi,rax
  40a523:	cmp    rsi,r14
  40a526:	jne    40a4fc <_start@@Base+0x70dc>
  40a528:	jmp    40a4cd <_start@@Base+0x70ad>
  40a52a:	nop    WORD PTR [rax+rax*1+0x0]
  40a530:	mov    ecx,0x7
  40a535:	mov    rdx,rbx
  40a538:	mov    rdi,rbp
  40a53b:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a540:	mov    rsi,rax
  40a543:	jmp    40a523 <_start@@Base+0x7103>
  40a545:	mov    rdi,QWORD PTR [rbp+0x0]
  40a549:	call   413d60 <flatcc_builder_end_vector@@Base>
  40a54e:	test   eax,eax
  40a550:	mov    DWORD PTR [rsp+0x44],eax
  40a554:	je     408520 <_start@@Base+0x5100>
  40a55a:	mov    rdi,QWORD PTR [rbp+0x0]
  40a55e:	mov    esi,0x1e
  40a563:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40a568:	test   rax,rax
  40a56b:	je     408520 <_start@@Base+0x5100>
  40a571:	mov    edx,DWORD PTR [rsp+0x44]
  40a575:	mov    DWORD PTR [rax],edx
  40a577:	jmp    408a08 <_start@@Base+0x55e8>
  40a57c:	mov    rsi,r14
  40a57f:	mov    ecx,0x4
  40a584:	mov    rdx,rbx
  40a587:	mov    rdi,rbp
  40a58a:	call   4081b0 <_start@@Base+0x4d90>
  40a58f:	cmp    rax,r14
  40a592:	mov    rsi,rax
  40a595:	je     408faa <_start@@Base+0x5b8a>
  40a59b:	lea    r12,[rsp+0x44]
  40a5a0:	mov    rdx,rbx
  40a5a3:	mov    rdi,rbp
  40a5a6:	mov    rcx,r12
  40a5a9:	call   418880 <flatcc_json_parser_build_string@@Base>
  40a5ae:	mov    r8d,DWORD PTR [rsp+0x44]
  40a5b3:	mov    r14,rax
  40a5b6:	test   r8d,r8d
  40a5b9:	je     408520 <_start@@Base+0x5100>
  40a5bf:	mov    rdi,QWORD PTR [rbp+0x0]
  40a5c3:	mov    esi,0x3
  40a5c8:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40a5cd:	test   rax,rax
  40a5d0:	je     408520 <_start@@Base+0x5100>
  40a5d6:	mov    edx,DWORD PTR [rsp+0x44]
  40a5da:	mov    DWORD PTR [rax],edx
  40a5dc:	jmp    408a08 <_start@@Base+0x55e8>
  40a5e1:	mov    r13,QWORD PTR [rsp+0x20]
  40a5e6:	mov    rax,r14
  40a5e9:	mov    r14,rax
  40a5ec:	mov    rsi,r14
  40a5ef:	mov    ecx,0x21
  40a5f4:	mov    rdx,rbx
  40a5f7:	mov    rdi,rbp
  40a5fa:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a5ff:	mov    r14,rax
  40a602:	mov    eax,DWORD PTR [rsp+0x44]
  40a606:	test   eax,eax
  40a608:	je     408520 <_start@@Base+0x5100>
  40a60e:	mov    rdi,QWORD PTR [rbp+0x0]
  40a612:	mov    esi,0xe
  40a617:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40a61c:	test   rax,rax
  40a61f:	je     408520 <_start@@Base+0x5100>
  40a625:	mov    edx,DWORD PTR [rsp+0x44]
  40a629:	mov    DWORD PTR [rax],edx
  40a62b:	jmp    408a08 <_start@@Base+0x55e8>
  40a630:	mov    rsi,r14
  40a633:	mov    ecx,0x5
  40a638:	mov    rdx,rbx
  40a63b:	mov    rdi,rbp
  40a63e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40a643:	mov    r14,rax
  40a646:	jmp    409b15 <_start@@Base+0x66f5>
  40a64b:	lea    r12,[r14+0x8]
  40a64f:	mov    r8,rbx
  40a652:	sub    r8,r12
  40a655:	cmp    r8,0x7
  40a659:	jbe    40af7e <_start@@Base+0x7b5e>
  40a65f:	movbe  rax,QWORD PTR [r14+0x8]
  40a665:	movabs rdx,0xff00000000000000
  40a66f:	and    rax,rdx
  40a672:	movabs rdx,0x7900000000000000
  40a67c:	cmp    rax,rdx
  40a67f:	jne    40af52 <_start@@Base+0x7b32>
  40a685:	cmp    r8,0x1
  40a689:	jle    40bea8 <_start@@Base+0x8a88>
  40a68f:	mov    ecx,0x1
  40a694:	mov    rdx,rbx
  40a697:	mov    rsi,r12
  40a69a:	mov    rdi,rbp
  40a69d:	call   4081b0 <_start@@Base+0x4d90>
  40a6a2:	cmp    r12,rax
  40a6a5:	mov    r14,rax
  40a6a8:	je     40bea8 <_start@@Base+0x8a88>
  40a6ae:	mov    rdi,QWORD PTR [rbp+0x0]
  40a6b2:	mov    ecx,0xffffffff
  40a6b7:	mov    edx,0x1
  40a6bc:	mov    esi,0x1
  40a6c1:	call   412e60 <flatcc_builder_start_vector@@Base>
  40a6c6:	test   eax,eax
  40a6c8:	jne    408520 <_start@@Base+0x5100>
  40a6ce:	mov    rsi,r14
  40a6d1:	mov    rcx,r13
  40a6d4:	mov    rdx,rbx
  40a6d7:	mov    rdi,rbp
  40a6da:	call   404990 <_start@@Base+0x1570>
  40a6df:	mov    r11d,DWORD PTR [rsp+0x40]
  40a6e4:	mov    r14,rax
  40a6e7:	test   r11d,r11d
  40a6ea:	je     40b8c6 <_start@@Base+0x84a6>
  40a6f0:	mov    r12,QWORD PTR [rsp]
  40a6f4:	jmp    40a72a <_start@@Base+0x730a>
  40a6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a700:	movzx  edx,BYTE PTR [rsp+0x60]
  40a705:	mov    rcx,r13
  40a708:	mov    rsi,rax
  40a70b:	mov    rdi,rbp
  40a70e:	mov    BYTE PTR [r15],dl
  40a711:	mov    rdx,rbx
  40a714:	call   406120 <_start@@Base+0x2d00>
  40a719:	mov    r10d,DWORD PTR [rsp+0x40]
  40a71e:	mov    r14,rax
  40a721:	test   r10d,r10d
  40a724:	je     40b8c6 <_start@@Base+0x84a6>
  40a72a:	mov    rdi,QWORD PTR [rbp+0x0]
  40a72e:	mov    esi,0x1
  40a733:	mov    BYTE PTR [rsp+0x60],0x0
  40a738:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40a73d:	test   rax,rax
  40a740:	mov    r15,rax
  40a743:	je     408520 <_start@@Base+0x5100>
  40a749:	mov    rcx,r12
  40a74c:	mov    rdx,rbx
  40a74f:	mov    rsi,r14
  40a752:	mov    rdi,rbp
  40a755:	call   4043a0 <_start@@Base+0xf80>
  40a75a:	cmp    rax,r14
  40a75d:	jne    40a700 <_start@@Base+0x72e0>
  40a75f:	lea    rcx,[rip+0x16ffa]        # 421760 <__data_start@@Base+0x6a0>
  40a766:	mov    r8,r12
  40a769:	mov    rdx,rbx
  40a76c:	mov    rsi,r14
  40a76f:	mov    rdi,rbp
  40a772:	call   405a60 <_start@@Base+0x2640>
  40a777:	cmp    rax,r14
  40a77a:	je     40a785 <_start@@Base+0x7365>
  40a77c:	cmp    rbx,rax
  40a77f:	jne    40a700 <_start@@Base+0x72e0>
  40a785:	mov    r14,rax
  40a788:	jmp    408520 <_start@@Base+0x5100>
  40a78d:	nop    DWORD PTR [rax]
  40a790:	mov    rdi,QWORD PTR [rbp+0x0]
  40a794:	call   413d60 <flatcc_builder_end_vector@@Base>
  40a799:	test   eax,eax
  40a79b:	mov    DWORD PTR [rsp+0x44],eax
  40a79f:	je     408520 <_start@@Base+0x5100>
  40a7a5:	mov    rdi,QWORD PTR [rbp+0x0]
  40a7a9:	mov    esi,0x1f
  40a7ae:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40a7b3:	test   rax,rax
  40a7b6:	je     408520 <_start@@Base+0x5100>
  40a7bc:	mov    edx,DWORD PTR [rsp+0x44]
  40a7c0:	mov    DWORD PTR [rax],edx
  40a7c2:	jmp    408a08 <_start@@Base+0x55e8>
  40a7c7:	mov    rdx,rbx
  40a7ca:	mov    rsi,r12
  40a7cd:	mov    rdi,rbp
  40a7d0:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a7d5:	mov    r14,rax
  40a7d8:	jmp    408a08 <_start@@Base+0x55e8>
  40a7dd:	nop    DWORD PTR [rax]
  40a7e0:	mov    rsi,r14
  40a7e3:	mov    ecx,0x4
  40a7e8:	mov    rdx,rbx
  40a7eb:	mov    rdi,rbp
  40a7ee:	mov    QWORD PTR [rsp+0x8],r8
  40a7f3:	call   4081b0 <_start@@Base+0x4d90>
  40a7f8:	cmp    rax,r14
  40a7fb:	mov    rsi,rax
  40a7fe:	mov    r8,QWORD PTR [rsp+0x8]
  40a803:	je     4086f7 <_start@@Base+0x52d7>
  40a809:	lea    rax,[rip+0x58d0]        # 4100e0 <_start@@Base+0xccc0>
  40a810:	sub    rsp,0x8
  40a814:	mov    r8d,0x8
  40a81a:	mov    rdi,rbp
  40a81d:	xor    ecx,ecx
  40a81f:	mov    rdx,rbx
  40a822:	push   rax
  40a823:	mov    r9,QWORD PTR [rsp+0x60]
  40a828:	call   418b20 <flatcc_json_parser_union@@Base>
  40a82d:	pop    rdi
  40a82e:	mov    r14,rax
  40a831:	pop    r8
  40a833:	jmp    408a08 <_start@@Base+0x55e8>
  40a838:	mov    rdx,rbx
  40a83b:	mov    rsi,r12
  40a83e:	mov    rdi,rbp
  40a841:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a846:	mov    r14,rax
  40a849:	jmp    408a08 <_start@@Base+0x55e8>
  40a84e:	mov    r12,rax
  40a851:	lea    r8,[rsp+0x4c]
  40a856:	lea    rcx,[rip+0x16f63]        # 4217c0 <__data_start@@Base+0x700>
  40a85d:	mov    rdx,rbx
  40a860:	mov    rsi,r12
  40a863:	mov    rdi,rbp
  40a866:	call   4055c0 <_start@@Base+0x21a0>
  40a86b:	cmp    rax,r12
  40a86e:	mov    r14,rax
  40a871:	je     408520 <_start@@Base+0x5100>
  40a877:	cmp    rbx,rax
  40a87a:	je     408520 <_start@@Base+0x5100>
  40a880:	movzx  eax,BYTE PTR [rsp+0x4c]
  40a885:	jmp    409590 <_start@@Base+0x6170>
  40a88a:	mov    ecx,0x3
  40a88f:	mov    rdx,rbx
  40a892:	mov    rsi,r14
  40a895:	mov    rdi,rbp
  40a898:	call   4081b0 <_start@@Base+0x4d90>
  40a89d:	cmp    rax,r14
  40a8a0:	mov    QWORD PTR [rsp+0x8],rax
  40a8a5:	je     408afd <_start@@Base+0x56dd>
  40a8ab:	mov    rdi,QWORD PTR [rbp+0x0]
  40a8af:	xor    esi,esi
  40a8b1:	mov    ecx,0x10
  40a8b6:	mov    edx,0x20
  40a8bb:	call   414920 <flatcc_builder_table_add@@Base>
  40a8c0:	test   rax,rax
  40a8c3:	mov    r15,rax
  40a8c6:	je     40c0da <_start@@Base+0x8cba>
  40a8cc:	mov    rsi,QWORD PTR [rsp+0x8]
  40a8d1:	lea    r12,[rsp+0x4c]
  40a8d6:	mov    rdx,rbx
  40a8d9:	mov    rdi,rbp
  40a8dc:	mov    rcx,r12
  40a8df:	call   4048f0 <_start@@Base+0x14d0>
  40a8e4:	mov    esi,DWORD PTR [rsp+0x4c]
  40a8e8:	mov    r14,rax
  40a8eb:	test   esi,esi
  40a8ed:	je     408a08 <_start@@Base+0x55e8>
  40a8f3:	mov    QWORD PTR [rsp+0x18],r13
  40a8f8:	jmp    40a96b <_start@@Base+0x754b>
  40a8fa:	nop    WORD PTR [rax+rax*1+0x0]
  40a900:	and    rax,0xffffffffff000000
  40a906:	movabs rdx,0x7465737432000000
  40a910:	cmp    rax,rdx
  40a913:	je     40aad0 <_start@@Base+0x76b0>
  40a919:	movabs rdx,0x7465737431000000
  40a923:	cmp    rax,rdx
  40a926:	jne    40a938 <_start@@Base+0x7518>
  40a928:	cmp    r9,0x5
  40a92c:	jg     40ac30 <_start@@Base+0x7810>
  40a932:	nop    WORD PTR [rax+rax*1+0x0]
  40a938:	mov    rsi,r14
  40a93b:	mov    rdx,rbx
  40a93e:	mov    rdi,rbp
  40a941:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40a946:	mov    r14,rax
  40a949:	mov    rsi,r14
  40a94c:	mov    rcx,r12
  40a94f:	mov    rdx,rbx
  40a952:	mov    rdi,rbp
  40a955:	call   406270 <_start@@Base+0x2e50>
  40a95a:	mov    r11d,DWORD PTR [rsp+0x4c]
  40a95f:	mov    r14,rax
  40a962:	test   r11d,r11d
  40a965:	je     40ad2f <_start@@Base+0x790f>
  40a96b:	cmp    rbx,r14
  40a96e:	je     40aa20 <_start@@Base+0x7600>
  40a974:	movzx  eax,BYTE PTR [r14]
  40a978:	cmp    al,0x22
  40a97a:	je     40aac0 <_start@@Base+0x76a0>
  40a980:	cmp    al,0x2e
  40a982:	je     40ac10 <_start@@Base+0x77f0>
  40a988:	mov    DWORD PTR [rbp+0x14],0x1
  40a98f:	mov    r9,rbx
  40a992:	sub    r9,r14
  40a995:	cmp    r9,0x7
  40a999:	jbe    40aa26 <_start@@Base+0x7606>
  40a99f:	movbe  rax,QWORD PTR [r14]
  40a9a4:	movabs rdx,0x7465737432ffffff
  40a9ae:	cmp    rax,rdx
  40a9b1:	jbe    40a900 <_start@@Base+0x74e0>
  40a9b7:	movabs rdx,0x77ffffffffffffff
  40a9c1:	cmp    rax,rdx
  40a9c4:	ja     40aa40 <_start@@Base+0x7620>
  40a9c6:	and    rax,0xffffffffff000000
  40a9cc:	movabs rdx,0x7465737433000000
  40a9d6:	cmp    rax,rdx
  40a9d9:	jne    40a938 <_start@@Base+0x7518>
  40a9df:	cmp    r9,0x5
  40a9e3:	jle    40a938 <_start@@Base+0x7518>
  40a9e9:	mov    rsi,r14
  40a9ec:	mov    ecx,0x5
  40a9f1:	mov    rdx,rbx
  40a9f4:	mov    rdi,rbp
  40a9f7:	call   4081b0 <_start@@Base+0x4d90>
  40a9fc:	cmp    rax,r14
  40a9ff:	mov    rsi,rax
  40aa02:	je     40a938 <_start@@Base+0x7518>
  40aa08:	lea    rcx,[r15+0x1a]
  40aa0c:	mov    rdx,rbx
  40aa0f:	mov    rdi,rbp
  40aa12:	call   4063c0 <_start@@Base+0x2fa0>
  40aa17:	mov    r14,rax
  40aa1a:	jmp    40a949 <_start@@Base+0x7529>
  40aa1f:	nop
  40aa20:	xor    r9d,r9d
  40aa23:	mov    r14,rbx
  40aa26:	mov    rsi,rbx
  40aa29:	mov    rdi,r14
  40aa2c:	call   403530 <_start@@Base+0x110>
  40aa31:	jmp    40a9a4 <_start@@Base+0x7584>
  40aa36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40aa40:	movabs rdx,0x78ffffffffffffff
  40aa4a:	cmp    rax,rdx
  40aa4d:	ja     40ab70 <_start@@Base+0x7750>
  40aa53:	cmp    r9,0x1
  40aa57:	jle    40a938 <_start@@Base+0x7518>
  40aa5d:	mov    ecx,0x1
  40aa62:	mov    rdx,rbx
  40aa65:	mov    rsi,r14
  40aa68:	mov    rdi,rbp
  40aa6b:	call   4081b0 <_start@@Base+0x4d90>
  40aa70:	cmp    rax,r14
  40aa73:	je     40a938 <_start@@Base+0x7518>
  40aa79:	mov    rcx,QWORD PTR [rsp]
  40aa7d:	mov    rdx,rbx
  40aa80:	mov    rsi,rax
  40aa83:	mov    rdi,rbp
  40aa86:	mov    DWORD PTR [rsp+0x60],0x0
  40aa8e:	mov    QWORD PTR [rsp+0x8],rax
  40aa93:	call   417620 <flatcc_json_parser_float@@Base>
  40aa98:	mov    r10,QWORD PTR [rsp+0x8]
  40aa9d:	mov    r14,rax
  40aaa0:	cmp    r10,rax
  40aaa3:	je     40b1c4 <_start@@Base+0x7da4>
  40aaa9:	vmovss xmm0,DWORD PTR [rsp+0x60]
  40aaaf:	vmovss DWORD PTR [r15],xmm0
  40aab4:	jmp    40a949 <_start@@Base+0x7529>
  40aab9:	nop    DWORD PTR [rax+0x0]
  40aac0:	add    r14,0x1
  40aac4:	mov    DWORD PTR [rbp+0x14],0x0
  40aacb:	jmp    40a98f <_start@@Base+0x756f>
  40aad0:	cmp    r9,0x5
  40aad4:	jle    40a938 <_start@@Base+0x7518>
  40aada:	mov    ecx,0x5
  40aadf:	mov    rdx,rbx
  40aae2:	mov    rsi,r14
  40aae5:	mov    rdi,rbp
  40aae8:	call   4081b0 <_start@@Base+0x4d90>
  40aaed:	cmp    rax,r14
  40aaf0:	mov    r13,rax
  40aaf3:	je     40a938 <_start@@Base+0x7518>
  40aaf9:	cmp    rbx,rax
  40aafc:	mov    BYTE PTR [rsp+0x48],0x0
  40ab01:	mov    QWORD PTR [rsp+0x60],0x0
  40ab0a:	mov    DWORD PTR [rsp+0x58],0x0
  40ab12:	je     40ad70 <_start@@Base+0x7950>
  40ab18:	mov    r8,QWORD PTR [rsp]
  40ab1c:	lea    rcx,[rsp+0x58]
  40ab21:	mov    rdx,rbx
  40ab24:	mov    rsi,rax
  40ab27:	mov    rdi,rbp
  40ab2a:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40ab2f:	cmp    r13,rax
  40ab32:	mov    r14,rax
  40ab35:	je     40ad70 <_start@@Base+0x7950>
  40ab3b:	mov    ecx,DWORD PTR [rsp+0x58]
  40ab3f:	mov    rax,QWORD PTR [rsp+0x60]
  40ab44:	test   ecx,ecx
  40ab46:	mov    edx,eax
  40ab48:	je     40ac90 <_start@@Base+0x7870>
  40ab4e:	neg    edx
  40ab50:	cmp    rax,0x80
  40ab56:	mov    ecx,0x8
  40ab5b:	ja     40ac9f <_start@@Base+0x787f>
  40ab61:	mov    BYTE PTR [r15+0x18],dl
  40ab65:	jmp    40a949 <_start@@Base+0x7529>
  40ab6a:	nop    WORD PTR [rax+rax*1+0x0]
  40ab70:	movabs rdx,0xff00000000000000
  40ab7a:	and    rax,rdx
  40ab7d:	movabs rdx,0x7a00000000000000
  40ab87:	cmp    rax,rdx
  40ab8a:	je     40acc8 <_start@@Base+0x78a8>
  40ab90:	movabs rdx,0x7900000000000000
  40ab9a:	cmp    rax,rdx
  40ab9d:	jne    40a938 <_start@@Base+0x7518>
  40aba3:	cmp    r9,0x1
  40aba7:	jle    40a938 <_start@@Base+0x7518>
  40abad:	mov    ecx,0x1
  40abb2:	mov    rdx,rbx
  40abb5:	mov    rsi,r14
  40abb8:	mov    rdi,rbp
  40abbb:	call   4081b0 <_start@@Base+0x4d90>
  40abc0:	cmp    rax,r14
  40abc3:	je     40a938 <_start@@Base+0x7518>
  40abc9:	mov    rcx,QWORD PTR [rsp]
  40abcd:	mov    rdx,rbx
  40abd0:	mov    rsi,rax
  40abd3:	mov    rdi,rbp
  40abd6:	mov    DWORD PTR [rsp+0x60],0x0
  40abde:	mov    QWORD PTR [rsp+0x8],rax
  40abe3:	call   417620 <flatcc_json_parser_float@@Base>
  40abe8:	mov    r10,QWORD PTR [rsp+0x8]
  40abed:	mov    r14,rax
  40abf0:	cmp    r10,rax
  40abf3:	je     40b4ce <_start@@Base+0x80ae>
  40abf9:	vmovss xmm0,DWORD PTR [rsp+0x60]
  40abff:	vmovss DWORD PTR [r15+0x4],xmm0
  40ac05:	jmp    40a949 <_start@@Base+0x7529>
  40ac0a:	nop    WORD PTR [rax+rax*1+0x0]
  40ac10:	mov    rsi,r14
  40ac13:	mov    ecx,0x5
  40ac18:	mov    rdx,rbx
  40ac1b:	mov    rdi,rbp
  40ac1e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ac23:	mov    r14,rax
  40ac26:	jmp    40a98f <_start@@Base+0x756f>
  40ac2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ac30:	mov    ecx,0x5
  40ac35:	mov    rdx,rbx
  40ac38:	mov    rsi,r14
  40ac3b:	mov    rdi,rbp
  40ac3e:	call   4081b0 <_start@@Base+0x4d90>
  40ac43:	cmp    rax,r14
  40ac46:	mov    r13,rax
  40ac49:	je     40a938 <_start@@Base+0x7518>
  40ac4f:	mov    rcx,QWORD PTR [rsp]
  40ac53:	mov    rdx,rbx
  40ac56:	mov    rsi,rax
  40ac59:	mov    rdi,rbp
  40ac5c:	mov    QWORD PTR [rsp+0x60],0x0
  40ac65:	call   417540 <flatcc_json_parser_double@@Base>
  40ac6a:	cmp    r13,rax
  40ac6d:	mov    r14,rax
  40ac70:	je     40ad39 <_start@@Base+0x7919>
  40ac76:	vmovsd xmm0,QWORD PTR [rsp+0x60]
  40ac7c:	vmovsd QWORD PTR [r15+0x10],xmm0
  40ac82:	jmp    40a949 <_start@@Base+0x7529>
  40ac87:	nop    WORD PTR [rax+rax*1+0x0]
  40ac90:	cmp    rax,0x7f
  40ac94:	jbe    40ab61 <_start@@Base+0x7741>
  40ac9a:	mov    ecx,0x7
  40ac9f:	mov    rsi,r14
  40aca2:	mov    rdx,rbx
  40aca5:	mov    rdi,rbp
  40aca8:	call   416820 <flatcc_json_parser_set_error@@Base>
  40acad:	cmp    r13,rax
  40acb0:	mov    r14,rax
  40acb3:	je     40ad70 <_start@@Base+0x7950>
  40acb9:	movzx  edx,BYTE PTR [rsp+0x48]
  40acbe:	jmp    40ab61 <_start@@Base+0x7741>
  40acc3:	nop    DWORD PTR [rax+rax*1+0x0]
  40acc8:	cmp    r9,0x1
  40accc:	jle    40a938 <_start@@Base+0x7518>
  40acd2:	mov    ecx,0x1
  40acd7:	mov    rdx,rbx
  40acda:	mov    rsi,r14
  40acdd:	mov    rdi,rbp
  40ace0:	call   4081b0 <_start@@Base+0x4d90>
  40ace5:	cmp    rax,r14
  40ace8:	je     40a938 <_start@@Base+0x7518>
  40acee:	mov    rcx,QWORD PTR [rsp]
  40acf2:	mov    rdx,rbx
  40acf5:	mov    rsi,rax
  40acf8:	mov    rdi,rbp
  40acfb:	mov    DWORD PTR [rsp+0x60],0x0
  40ad03:	mov    QWORD PTR [rsp+0x8],rax
  40ad08:	call   417620 <flatcc_json_parser_float@@Base>
  40ad0d:	mov    r10,QWORD PTR [rsp+0x8]
  40ad12:	mov    r14,rax
  40ad15:	cmp    r10,rax
  40ad18:	je     40b893 <_start@@Base+0x8473>
  40ad1e:	vmovss xmm0,DWORD PTR [rsp+0x60]
  40ad24:	vmovss DWORD PTR [r15+0x8],xmm0
  40ad2a:	jmp    40a949 <_start@@Base+0x7529>
  40ad2f:	mov    r13,QWORD PTR [rsp+0x18]
  40ad34:	jmp    408a08 <_start@@Base+0x55e8>
  40ad39:	mov    r8,QWORD PTR [rsp]
  40ad3d:	lea    rcx,[rip+0x164bc]        # 421200 <__data_start@@Base+0x140>
  40ad44:	mov    rdx,rbx
  40ad47:	mov    rsi,rax
  40ad4a:	mov    rdi,rbp
  40ad4d:	call   404a30 <_start@@Base+0x1610>
  40ad52:	cmp    r14,rax
  40ad55:	je     40c190 <_start@@Base+0x8d70>
  40ad5b:	cmp    rbx,rax
  40ad5e:	je     40c190 <_start@@Base+0x8d70>
  40ad64:	mov    r14,rax
  40ad67:	jmp    40ac76 <_start@@Base+0x7856>
  40ad6c:	nop    DWORD PTR [rax+0x0]
  40ad70:	lea    r8,[rsp+0x48]
  40ad75:	lea    rcx,[rip+0x164a4]        # 421220 <__data_start@@Base+0x160>
  40ad7c:	mov    rdx,rbx
  40ad7f:	mov    rsi,r13
  40ad82:	mov    rdi,rbp
  40ad85:	call   4055c0 <_start@@Base+0x21a0>
  40ad8a:	cmp    rax,r13
  40ad8d:	mov    r14,rax
  40ad90:	je     40ad9b <_start@@Base+0x797b>
  40ad92:	cmp    rbx,rax
  40ad95:	jne    40acb9 <_start@@Base+0x7899>
  40ad9b:	mov    r13,QWORD PTR [rsp+0x18]
  40ada0:	mov    rsi,r14
  40ada3:	mov    ecx,0x21
  40ada8:	mov    rdx,rbx
  40adab:	mov    rdi,rbp
  40adae:	call   416820 <flatcc_json_parser_set_error@@Base>
  40adb3:	mov    r14,rax
  40adb6:	jmp    408a08 <_start@@Base+0x55e8>
  40adbb:	nop    DWORD PTR [rax+rax*1+0x0]
  40adc0:	mov    rdx,rbx
  40adc3:	mov    rsi,r12
  40adc6:	mov    rdi,rbp
  40adc9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40adce:	mov    r14,rax
  40add1:	jmp    408a08 <_start@@Base+0x55e8>
  40add6:	mov    BYTE PTR [rsp+0x4c],0x0
  40addb:	lea    r8,[rsp+0x4c]
  40ade0:	lea    rcx,[rip+0x168f9]        # 4216e0 <__data_start@@Base+0x620>
  40ade7:	mov    rdx,rbx
  40adea:	mov    rsi,r12
  40aded:	mov    rdi,rbp
  40adf0:	call   404f10 <_start@@Base+0x1af0>
  40adf5:	cmp    rax,r12
  40adf8:	mov    r14,rax
  40adfb:	je     408520 <_start@@Base+0x5100>
  40ae01:	cmp    rbx,rax
  40ae04:	je     408520 <_start@@Base+0x5100>
  40ae0a:	movzx  eax,BYTE PTR [rsp+0x4c]
  40ae0f:	jmp    40a361 <_start@@Base+0x6f41>
  40ae14:	mov    ecx,0x7
  40ae19:	mov    rsi,r14
  40ae1c:	mov    rdx,rbx
  40ae1f:	mov    rdi,rbp
  40ae22:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ae27:	cmp    r12,rax
  40ae2a:	mov    r14,rax
  40ae2d:	jne    40a880 <_start@@Base+0x7460>
  40ae33:	jmp    40a851 <_start@@Base+0x7431>
  40ae38:	nop    DWORD PTR [rax+rax*1+0x0]
  40ae40:	mov    rsi,rbx
  40ae43:	mov    rdi,r12
  40ae46:	call   403530 <_start@@Base+0x110>
  40ae4b:	jmp    40888d <_start@@Base+0x546d>
  40ae50:	mov    rdx,rbx
  40ae53:	mov    rsi,r12
  40ae56:	mov    rdi,rbp
  40ae59:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ae5e:	mov    r14,rax
  40ae61:	jmp    408a08 <_start@@Base+0x55e8>
  40ae66:	mov    BYTE PTR [rsp+0x4c],0x1
  40ae6b:	lea    r14,[r12+0x4]
  40ae70:	jmp    40a365 <_start@@Base+0x6f45>
  40ae75:	mov    r13,rax
  40ae78:	mov    r8,QWORD PTR [rsp+0x28]
  40ae7d:	lea    rcx,[rip+0x1627c]        # 421100 <__data_start@@Base+0x40>
  40ae84:	mov    rdx,rbx
  40ae87:	mov    rsi,r13
  40ae8a:	mov    rdi,rbp
  40ae8d:	call   405130 <_start@@Base+0x1d10>
  40ae92:	cmp    rax,r13
  40ae95:	mov    r14,rax
  40ae98:	je     40bb62 <_start@@Base+0x8742>
  40ae9e:	cmp    rbx,rax
  40aea1:	je     40bb62 <_start@@Base+0x8742>
  40aea7:	movzx  edx,WORD PTR [rsp+0x3e]
  40aeac:	jmp    409e43 <_start@@Base+0x6a23>
  40aeb1:	mov    rsi,rbx
  40aeb4:	mov    rdi,r12
  40aeb7:	call   403530 <_start@@Base+0x110>
  40aebc:	jmp    409efd <_start@@Base+0x6add>
  40aec1:	mov    ecx,0x5
  40aec6:	mov    rdx,rbx
  40aec9:	mov    rsi,r14
  40aecc:	mov    rdi,rbp
  40aecf:	call   4081b0 <_start@@Base+0x4d90>
  40aed4:	cmp    rax,r14
  40aed7:	mov    r12,rax
  40aeda:	je     408904 <_start@@Base+0x54e4>
  40aee0:	mov    rcx,QWORD PTR [rsp]
  40aee4:	mov    rdx,rbx
  40aee7:	mov    rsi,rax
  40aeea:	mov    rdi,rbp
  40aeed:	mov    DWORD PTR [rsp+0x60],0x0
  40aef5:	call   417620 <flatcc_json_parser_float@@Base>
  40aefa:	cmp    rax,r12
  40aefd:	mov    r14,rax
  40af00:	je     40bc60 <_start@@Base+0x8840>
  40af06:	vmovss xmm0,DWORD PTR [rsp+0x60]
  40af0c:	vucomiss xmm0,DWORD PTR [rip+0xf640]        # 41a554 <_IO_stdin_used@@Base+0x554>
  40af14:	jp     40af22 <_start@@Base+0x7b02>
  40af16:	jne    40af22 <_start@@Base+0x7b02>
  40af18:	test   BYTE PTR [rbp+0x10],0x2
  40af1c:	je     408a08 <_start@@Base+0x55e8>
  40af22:	mov    rdi,QWORD PTR [rbp+0x0]
  40af26:	mov    ecx,0x4
  40af2b:	mov    edx,0x4
  40af30:	mov    esi,0x19
  40af35:	call   414920 <flatcc_builder_table_add@@Base>
  40af3a:	test   rax,rax
  40af3d:	je     408520 <_start@@Base+0x5100>
  40af43:	vmovss xmm0,DWORD PTR [rsp+0x60]
  40af49:	vmovss DWORD PTR [rax],xmm0
  40af4d:	jmp    408a08 <_start@@Base+0x55e8>
  40af52:	mov    rdx,rbx
  40af55:	mov    rsi,r12
  40af58:	mov    rdi,rbp
  40af5b:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40af60:	mov    r14,rax
  40af63:	jmp    408a08 <_start@@Base+0x55e8>
  40af68:	mov    rdx,rbx
  40af6b:	mov    rsi,r12
  40af6e:	mov    rdi,rbp
  40af71:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40af76:	mov    r14,rax
  40af79:	jmp    408a08 <_start@@Base+0x55e8>
  40af7e:	mov    rsi,rbx
  40af81:	mov    rdi,r12
  40af84:	call   403530 <_start@@Base+0x110>
  40af89:	jmp    40a665 <_start@@Base+0x7245>
  40af8e:	mov    rsi,rbx
  40af91:	mov    rdi,r12
  40af94:	call   403530 <_start@@Base+0x110>
  40af99:	jmp    4090b9 <_start@@Base+0x5c99>
  40af9e:	mov    rdx,rbx
  40afa1:	mov    rsi,r12
  40afa4:	mov    rdi,rbp
  40afa7:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40afac:	mov    r14,rax
  40afaf:	jmp    408a08 <_start@@Base+0x55e8>
  40afb4:	mov    ecx,0x8
  40afb9:	mov    rsi,r14
  40afbc:	mov    rdx,rbx
  40afbf:	mov    rdi,rbp
  40afc2:	call   416820 <flatcc_json_parser_set_error@@Base>
  40afc7:	cmp    r13,rax
  40afca:	mov    r14,rax
  40afcd:	jne    40aea7 <_start@@Base+0x7a87>
  40afd3:	jmp    40ae78 <_start@@Base+0x7a58>
  40afd8:	nop    DWORD PTR [rax+rax*1+0x0]
  40afe0:	mov    ecx,0x7
  40afe5:	mov    rsi,r14
  40afe8:	mov    rdx,rbx
  40afeb:	mov    rdi,rbp
  40afee:	call   416820 <flatcc_json_parser_set_error@@Base>
  40aff3:	cmp    r12,rax
  40aff6:	mov    r14,rax
  40aff9:	mov    BYTE PTR [rsp+0x4c],0x0
  40affe:	jne    40a36f <_start@@Base+0x6f4f>
  40b004:	jmp    40addb <_start@@Base+0x79bb>
  40b009:	nop    DWORD PTR [rax+0x0]
  40b010:	mov    r8,QWORD PTR [rsp]
  40b014:	lea    rcx,[rip+0x16665]        # 421680 <__data_start@@Base+0x5c0>
  40b01b:	mov    rdx,rbx
  40b01e:	mov    rsi,rax
  40b021:	mov    rdi,rbp
  40b024:	call   404ca0 <_start@@Base+0x1880>
  40b029:	cmp    r14,rax
  40b02c:	mov    r14,rax
  40b02f:	je     408520 <_start@@Base+0x5100>
  40b035:	cmp    rbx,rax
  40b038:	jne    409025 <_start@@Base+0x5c05>
  40b03e:	jmp    408520 <_start@@Base+0x5100>
  40b043:	nop    DWORD PTR [rax+rax*1+0x0]
  40b048:	mov    rdx,rbx
  40b04b:	mov    rsi,r12
  40b04e:	mov    rdi,rbp
  40b051:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b056:	mov    r14,rax
  40b059:	jmp    408a08 <_start@@Base+0x55e8>
  40b05e:	mov    rdx,rbx
  40b061:	mov    rsi,r12
  40b064:	mov    rdi,rbp
  40b067:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b06c:	mov    r14,rax
  40b06f:	jmp    408a08 <_start@@Base+0x55e8>
  40b074:	mov    rdi,QWORD PTR [rbp+0x0]
  40b078:	call   413d60 <flatcc_builder_end_vector@@Base>
  40b07d:	test   eax,eax
  40b07f:	mov    DWORD PTR [rsp+0x44],eax
  40b083:	je     408520 <_start@@Base+0x5100>
  40b089:	mov    rdi,QWORD PTR [rbp+0x0]
  40b08d:	mov    esi,0x18
  40b092:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b097:	test   rax,rax
  40b09a:	je     408520 <_start@@Base+0x5100>
  40b0a0:	mov    edx,DWORD PTR [rsp+0x44]
  40b0a4:	mov    DWORD PTR [rax],edx
  40b0a6:	jmp    408a08 <_start@@Base+0x55e8>
  40b0ab:	mov    rdx,rbx
  40b0ae:	mov    rsi,r12
  40b0b1:	mov    rdi,rbp
  40b0b4:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b0b9:	mov    r14,rax
  40b0bc:	jmp    408a08 <_start@@Base+0x55e8>
  40b0c1:	mov    ecx,0x4
  40b0c6:	mov    rdx,rbx
  40b0c9:	mov    rsi,r14
  40b0cc:	mov    rdi,rbp
  40b0cf:	call   4081b0 <_start@@Base+0x4d90>
  40b0d4:	cmp    rax,r14
  40b0d7:	mov    r12,rax
  40b0da:	je     40963a <_start@@Base+0x621a>
  40b0e0:	mov    rcx,QWORD PTR [rsp]
  40b0e4:	xor    r9d,r9d
  40b0e7:	mov    rdx,rbx
  40b0ea:	mov    rsi,rax
  40b0ed:	mov    rdi,rbp
  40b0f0:	mov    WORD PTR [rsp+0x60],r9w
  40b0f6:	call   404630 <_start@@Base+0x1210>
  40b0fb:	cmp    rax,r12
  40b0fe:	mov    r14,rax
  40b101:	je     40bfe6 <_start@@Base+0x8bc6>
  40b107:	cmp    WORD PTR [rsp+0x60],0x96
  40b10e:	jne    40b11a <_start@@Base+0x7cfa>
  40b110:	test   BYTE PTR [rbp+0x10],0x2
  40b114:	je     408a08 <_start@@Base+0x55e8>
  40b11a:	mov    rdi,QWORD PTR [rbp+0x0]
  40b11e:	mov    ecx,0x2
  40b123:	mov    edx,0x2
  40b128:	mov    esi,0x1
  40b12d:	call   414920 <flatcc_builder_table_add@@Base>
  40b132:	test   rax,rax
  40b135:	je     408520 <_start@@Base+0x5100>
  40b13b:	movzx  edx,WORD PTR [rsp+0x60]
  40b140:	mov    WORD PTR [rax],dx
  40b143:	jmp    408a08 <_start@@Base+0x55e8>
  40b148:	mov    rcx,QWORD PTR [rsp+0x50]
  40b14d:	mov    rdx,rbx
  40b150:	mov    rsi,r14
  40b153:	mov    rdi,rbp
  40b156:	call   418ac0 <flatcc_json_parser_finalize_unions@@Base>
  40b15b:	mov    rdi,QWORD PTR [rbp+0x0]
  40b15f:	mov    r14,rax
  40b162:	call   413a40 <flatcc_builder_end_table@@Base>
  40b167:	mov    edx,eax
  40b169:	mov    rax,QWORD PTR [rsp+0x10]
  40b16e:	test   edx,edx
  40b170:	mov    DWORD PTR [rax],edx
  40b172:	mov    rax,r14
  40b175:	je     408520 <_start@@Base+0x5100>
  40b17b:	jmp    408533 <_start@@Base+0x5113>
  40b180:	mov    rsi,rbx
  40b183:	mov    rdi,r12
  40b186:	call   403530 <_start@@Base+0x110>
  40b18b:	jmp    4083ff <_start@@Base+0x4fdf>
  40b190:	mov    ecx,0x7
  40b195:	jmp    40afb9 <_start@@Base+0x7b99>
  40b19a:	mov    r13,QWORD PTR [rsp+0x20]
  40b19f:	mov    eax,DWORD PTR [rbp+0x20]
  40b1a2:	test   eax,eax
  40b1a4:	jne    40a5ec <_start@@Base+0x71cc>
  40b1aa:	mov    rdi,QWORD PTR [rbp+0x0]
  40b1ae:	call   413a40 <flatcc_builder_end_table@@Base>
  40b1b3:	test   eax,eax
  40b1b5:	mov    DWORD PTR [rsp+0x44],eax
  40b1b9:	je     40a5ec <_start@@Base+0x71cc>
  40b1bf:	jmp    40a60e <_start@@Base+0x71ee>
  40b1c4:	mov    r8,QWORD PTR [rsp]
  40b1c8:	lea    rcx,[rip+0x16011]        # 4211e0 <__data_start@@Base+0x120>
  40b1cf:	mov    rdx,rbx
  40b1d2:	mov    rsi,rax
  40b1d5:	mov    rdi,rbp
  40b1d8:	call   404ca0 <_start@@Base+0x1880>
  40b1dd:	cmp    r14,rax
  40b1e0:	je     40c190 <_start@@Base+0x8d70>
  40b1e6:	cmp    rbx,rax
  40b1e9:	je     40c190 <_start@@Base+0x8d70>
  40b1ef:	mov    r14,rax
  40b1f2:	jmp    40aaa9 <_start@@Base+0x7689>
  40b1f7:	mov    r13,QWORD PTR [rsp+0x8]
  40b1fc:	mov    r10d,DWORD PTR [rbp+0x20]
  40b200:	test   r10d,r10d
  40b203:	jne    409d14 <_start@@Base+0x68f4>
  40b209:	mov    rdi,QWORD PTR [rbp+0x0]
  40b20d:	call   413a40 <flatcc_builder_end_table@@Base>
  40b212:	test   eax,eax
  40b214:	mov    DWORD PTR [rsp+0x44],eax
  40b218:	je     409d14 <_start@@Base+0x68f4>
  40b21e:	jmp    409d38 <_start@@Base+0x6918>
  40b223:	cmp    r8,0x2
  40b227:	jg     40bce5 <_start@@Base+0x88c5>
  40b22d:	mov    rdx,rbx
  40b230:	mov    rsi,r12
  40b233:	mov    rdi,rbp
  40b236:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b23b:	mov    r14,rax
  40b23e:	jmp    408a08 <_start@@Base+0x55e8>
  40b243:	cmp    r8,0x8
  40b247:	jg     40bdee <_start@@Base+0x89ce>
  40b24d:	lea    r14,[r12+0x8]
  40b252:	mov    r8,rbx
  40b255:	sub    r8,r14
  40b258:	cmp    r8,0x7
  40b25c:	jbe    40c036 <_start@@Base+0x8c16>
  40b262:	movbe  rax,QWORD PTR [r12+0x8]
  40b269:	movabs rdx,0xff00000000000000
  40b273:	and    rax,rdx
  40b276:	movabs rdx,0x6100000000000000
  40b280:	cmp    rax,rdx
  40b283:	jne    40c046 <_start@@Base+0x8c26>
  40b289:	cmp    r8,0x1
  40b28d:	jle    40c122 <_start@@Base+0x8d02>
  40b293:	mov    ecx,0x1
  40b298:	mov    rdx,rbx
  40b29b:	mov    rsi,r14
  40b29e:	mov    rdi,rbp
  40b2a1:	call   4081b0 <_start@@Base+0x4d90>
  40b2a6:	cmp    r14,rax
  40b2a9:	mov    r12,rax
  40b2ac:	je     40c125 <_start@@Base+0x8d05>
  40b2b2:	mov    rcx,QWORD PTR [rsp]
  40b2b6:	mov    rdx,rbx
  40b2b9:	mov    rsi,rax
  40b2bc:	mov    rdi,rbp
  40b2bf:	mov    DWORD PTR [rsp+0x60],0x0
  40b2c7:	call   404470 <_start@@Base+0x1050>
  40b2cc:	cmp    rax,r12
  40b2cf:	mov    r14,rax
  40b2d2:	je     40c239 <_start@@Base+0x8e19>
  40b2d8:	mov    r15d,DWORD PTR [rsp+0x60]
  40b2dd:	test   r15d,r15d
  40b2e0:	jne    40b2ec <_start@@Base+0x7ecc>
  40b2e2:	test   BYTE PTR [rbp+0x10],0x2
  40b2e6:	je     408a08 <_start@@Base+0x55e8>
  40b2ec:	mov    rdi,QWORD PTR [rbp+0x0]
  40b2f0:	mov    ecx,0x4
  40b2f5:	mov    edx,0x4
  40b2fa:	mov    esi,0x15
  40b2ff:	call   414920 <flatcc_builder_table_add@@Base>
  40b304:	test   rax,rax
  40b307:	je     40c28f <_start@@Base+0x8e6f>
  40b30d:	mov    edx,DWORD PTR [rsp+0x60]
  40b311:	mov    DWORD PTR [rax],edx
  40b313:	jmp    408a08 <_start@@Base+0x55e8>
  40b318:	nop    DWORD PTR [rax+rax*1+0x0]
  40b320:	mov    ecx,0x8
  40b325:	mov    rdx,rbx
  40b328:	mov    rsi,r12
  40b32b:	mov    rdi,rbp
  40b32e:	call   4081b0 <_start@@Base+0x4d90>
  40b333:	cmp    r12,rax
  40b336:	mov    r15,rax
  40b339:	je     40975d <_start@@Base+0x633d>
  40b33f:	mov    rcx,QWORD PTR [rsp]
  40b343:	mov    rdx,rbx
  40b346:	mov    rsi,rax
  40b349:	mov    rdi,rbp
  40b34c:	mov    DWORD PTR [rsp+0x60],0x0
  40b354:	call   404540 <_start@@Base+0x1120>
  40b359:	cmp    rax,r15
  40b35c:	mov    r14,rax
  40b35f:	je     40c085 <_start@@Base+0x8c65>
  40b365:	mov    eax,DWORD PTR [rsp+0x60]
  40b369:	test   eax,eax
  40b36b:	jne    40b377 <_start@@Base+0x7f57>
  40b36d:	test   BYTE PTR [rbp+0x10],0x2
  40b371:	je     408a08 <_start@@Base+0x55e8>
  40b377:	mov    rdi,QWORD PTR [rbp+0x0]
  40b37b:	mov    ecx,0x4
  40b380:	mov    edx,0x4
  40b385:	mov    esi,0x10
  40b38a:	call   414920 <flatcc_builder_table_add@@Base>
  40b38f:	test   rax,rax
  40b392:	je     40c2e6 <_start@@Base+0x8ec6>
  40b398:	mov    edx,DWORD PTR [rsp+0x60]
  40b39c:	mov    DWORD PTR [rax],edx
  40b39e:	jmp    408a08 <_start@@Base+0x55e8>
  40b3a3:	mov    ecx,0x7
  40b3a8:	mov    rdx,rbx
  40b3ab:	mov    rsi,r12
  40b3ae:	mov    rdi,rbp
  40b3b1:	call   4081b0 <_start@@Base+0x4d90>
  40b3b6:	cmp    r12,rax
  40b3b9:	mov    r14,rax
  40b3bc:	je     408dac <_start@@Base+0x598c>
  40b3c2:	mov    rdi,QWORD PTR [rbp+0x0]
  40b3c6:	mov    ecx,0x1fffffff
  40b3cb:	mov    edx,0x8
  40b3d0:	mov    esi,0x8
  40b3d5:	call   412e60 <flatcc_builder_start_vector@@Base>
  40b3da:	test   eax,eax
  40b3dc:	jne    408520 <_start@@Base+0x5100>
  40b3e2:	mov    rsi,r14
  40b3e5:	mov    rcx,r13
  40b3e8:	mov    rdx,rbx
  40b3eb:	mov    rdi,rbp
  40b3ee:	call   404990 <_start@@Base+0x1570>
  40b3f3:	mov    esi,DWORD PTR [rsp+0x40]
  40b3f7:	mov    r14,rax
  40b3fa:	test   esi,esi
  40b3fc:	je     40b497 <_start@@Base+0x8077>
  40b402:	mov    r12,QWORD PTR [rsp]
  40b406:	jmp    40b434 <_start@@Base+0x8014>
  40b408:	nop    DWORD PTR [rax+rax*1+0x0]
  40b410:	mov    rdx,QWORD PTR [rsp+0x60]
  40b415:	mov    rcx,r13
  40b418:	mov    rsi,rax
  40b41b:	mov    rdi,rbp
  40b41e:	mov    QWORD PTR [r15],rdx
  40b421:	mov    rdx,rbx
  40b424:	call   406120 <_start@@Base+0x2d00>
  40b429:	mov    ecx,DWORD PTR [rsp+0x40]
  40b42d:	mov    r14,rax
  40b430:	test   ecx,ecx
  40b432:	je     40b497 <_start@@Base+0x8077>
  40b434:	mov    rdi,QWORD PTR [rbp+0x0]
  40b438:	mov    esi,0x1
  40b43d:	mov    QWORD PTR [rsp+0x60],0x0
  40b446:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40b44b:	test   rax,rax
  40b44e:	mov    r15,rax
  40b451:	je     408520 <_start@@Base+0x5100>
  40b457:	mov    rcx,r12
  40b45a:	mov    rdx,rbx
  40b45d:	mov    rsi,r14
  40b460:	mov    rdi,rbp
  40b463:	call   404720 <_start@@Base+0x1300>
  40b468:	cmp    rax,r14
  40b46b:	jne    40b410 <_start@@Base+0x7ff0>
  40b46d:	lea    rcx,[rip+0x160ac]        # 421520 <__data_start@@Base+0x460>
  40b474:	mov    r8,r12
  40b477:	mov    rdx,rbx
  40b47a:	mov    rsi,r14
  40b47d:	mov    rdi,rbp
  40b480:	call   405800 <_start@@Base+0x23e0>
  40b485:	cmp    rax,r14
  40b488:	je     40b48f <_start@@Base+0x806f>
  40b48a:	cmp    rbx,rax
  40b48d:	jne    40b410 <_start@@Base+0x7ff0>
  40b48f:	mov    r14,rax
  40b492:	jmp    408520 <_start@@Base+0x5100>
  40b497:	mov    rdi,QWORD PTR [rbp+0x0]
  40b49b:	call   413d60 <flatcc_builder_end_vector@@Base>
  40b4a0:	test   eax,eax
  40b4a2:	mov    DWORD PTR [rsp+0x44],eax
  40b4a6:	je     408520 <_start@@Base+0x5100>
  40b4ac:	mov    rdi,QWORD PTR [rbp+0x0]
  40b4b0:	mov    esi,0x20
  40b4b5:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b4ba:	test   rax,rax
  40b4bd:	je     408520 <_start@@Base+0x5100>
  40b4c3:	mov    edx,DWORD PTR [rsp+0x44]
  40b4c7:	mov    DWORD PTR [rax],edx
  40b4c9:	jmp    408a08 <_start@@Base+0x55e8>
  40b4ce:	mov    r8,QWORD PTR [rsp]
  40b4d2:	lea    rcx,[rip+0x15cc7]        # 4211a0 <__data_start@@Base+0xe0>
  40b4d9:	mov    rsi,r10
  40b4dc:	mov    rdx,rbx
  40b4df:	mov    rdi,rbp
  40b4e2:	call   404ca0 <_start@@Base+0x1880>
  40b4e7:	mov    r10,QWORD PTR [rsp+0x8]
  40b4ec:	mov    r14,rax
  40b4ef:	cmp    r10,rax
  40b4f2:	je     40ad9b <_start@@Base+0x797b>
  40b4f8:	cmp    rbx,rax
  40b4fb:	jne    40abf9 <_start@@Base+0x77d9>
  40b501:	jmp    40ad9b <_start@@Base+0x797b>
  40b506:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b510:	mov    ecx,0x7
  40b515:	mov    rdx,rbx
  40b518:	mov    rsi,r12
  40b51b:	mov    rdi,rbp
  40b51e:	call   4081b0 <_start@@Base+0x4d90>
  40b523:	cmp    r12,rax
  40b526:	mov    r14,rax
  40b529:	je     4089b1 <_start@@Base+0x5591>
  40b52f:	mov    rdi,QWORD PTR [rbp+0x0]
  40b533:	mov    ecx,0x1fffffff
  40b538:	mov    edx,0x4
  40b53d:	mov    esi,0x8
  40b542:	call   412e60 <flatcc_builder_start_vector@@Base>
  40b547:	test   eax,eax
  40b549:	jne    408520 <_start@@Base+0x5100>
  40b54f:	mov    rsi,r14
  40b552:	mov    rcx,r13
  40b555:	mov    rdx,rbx
  40b558:	mov    rdi,rbp
  40b55b:	call   404990 <_start@@Base+0x1570>
  40b560:	mov    r14,rax
  40b563:	mov    eax,DWORD PTR [rsp+0x40]
  40b567:	test   eax,eax
  40b569:	je     40b7d4 <_start@@Base+0x83b4>
  40b56f:	lea    r15,[rsp+0x58]
  40b574:	mov    r12,r14
  40b577:	mov    QWORD PTR [rsp+0x18],r13
  40b57c:	nop    DWORD PTR [rax+0x0]
  40b580:	mov    rdi,QWORD PTR [rbp+0x0]
  40b584:	mov    esi,0x1
  40b589:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40b58e:	test   rax,rax
  40b591:	mov    r14,rax
  40b594:	je     40b883 <_start@@Base+0x8463>
  40b59a:	mov    rcx,r15
  40b59d:	mov    rdx,rbx
  40b5a0:	mov    rsi,r12
  40b5a3:	mov    rdi,rbp
  40b5a6:	call   4048f0 <_start@@Base+0x14d0>
  40b5ab:	mov    r13,rax
  40b5ae:	mov    eax,DWORD PTR [rsp+0x58]
  40b5b2:	test   eax,eax
  40b5b4:	je     40b7a8 <_start@@Base+0x8388>
  40b5ba:	mov    QWORD PTR [rsp+0x8],r14
  40b5bf:	movabs r12,0x6964000000000000
  40b5c9:	mov    r14,r13
  40b5cc:	jmp    40b637 <_start@@Base+0x8217>
  40b5ce:	xchg   ax,ax
  40b5d0:	movbe  rax,QWORD PTR [r14]
  40b5d5:	movabs rdx,0xffff000000000000
  40b5df:	and    rdx,rax
  40b5e2:	cmp    rdx,r12
  40b5e5:	je     40b680 <_start@@Base+0x8260>
  40b5eb:	movabs rcx,0x64697374616e6365
  40b5f5:	cmp    rax,rcx
  40b5f8:	jne    40b604 <_start@@Base+0x81e4>
  40b5fa:	cmp    r9,0x8
  40b5fe:	jg     40b6f0 <_start@@Base+0x82d0>
  40b604:	mov    rsi,r14
  40b607:	mov    rdx,rbx
  40b60a:	mov    rdi,rbp
  40b60d:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b612:	mov    r14,rax
  40b615:	mov    rsi,r14
  40b618:	mov    rcx,r15
  40b61b:	mov    rdx,rbx
  40b61e:	mov    rdi,rbp
  40b621:	call   406270 <_start@@Base+0x2e50>
  40b626:	mov    r13d,DWORD PTR [rsp+0x58]
  40b62b:	mov    r14,rax
  40b62e:	test   r13d,r13d
  40b631:	je     40b810 <_start@@Base+0x83f0>
  40b637:	cmp    rbx,r14
  40b63a:	je     40b750 <_start@@Base+0x8330>
  40b640:	movzx  eax,BYTE PTR [r14]
  40b644:	cmp    al,0x22
  40b646:	je     40b6e0 <_start@@Base+0x82c0>
  40b64c:	cmp    al,0x2e
  40b64e:	je     40b770 <_start@@Base+0x8350>
  40b654:	mov    DWORD PTR [rbp+0x14],0x1
  40b65b:	mov    r9,rbx
  40b65e:	sub    r9,r14
  40b661:	cmp    r9,0x7
  40b665:	ja     40b5d0 <_start@@Base+0x81b0>
  40b66b:	mov    rsi,rbx
  40b66e:	mov    rdi,r14
  40b671:	call   403530 <_start@@Base+0x110>
  40b676:	jmp    40b5d5 <_start@@Base+0x81b5>
  40b67b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b680:	cmp    r9,0x2
  40b684:	jle    40b604 <_start@@Base+0x81e4>
  40b68a:	mov    ecx,0x2
  40b68f:	mov    rdx,rbx
  40b692:	mov    rsi,r14
  40b695:	mov    rdi,rbp
  40b698:	call   4081b0 <_start@@Base+0x4d90>
  40b69d:	cmp    rax,r14
  40b6a0:	mov    r13,rax
  40b6a3:	je     40b604 <_start@@Base+0x81e4>
  40b6a9:	mov    rcx,QWORD PTR [rsp]
  40b6ad:	mov    rdx,rbx
  40b6b0:	mov    rsi,rax
  40b6b3:	mov    rdi,rbp
  40b6b6:	mov    DWORD PTR [rsp+0x60],0x0
  40b6be:	call   404470 <_start@@Base+0x1050>
  40b6c3:	cmp    r13,rax
  40b6c6:	mov    r14,rax
  40b6c9:	je     40b850 <_start@@Base+0x8430>
  40b6cf:	mov    eax,DWORD PTR [rsp+0x60]
  40b6d3:	mov    rcx,QWORD PTR [rsp+0x8]
  40b6d8:	mov    DWORD PTR [rcx],eax
  40b6da:	jmp    40b615 <_start@@Base+0x81f5>
  40b6df:	nop
  40b6e0:	add    r14,0x1
  40b6e4:	mov    DWORD PTR [rbp+0x14],0x0
  40b6eb:	jmp    40b65b <_start@@Base+0x823b>
  40b6f0:	mov    ecx,0x8
  40b6f5:	mov    rdx,rbx
  40b6f8:	mov    rsi,r14
  40b6fb:	mov    rdi,rbp
  40b6fe:	call   4081b0 <_start@@Base+0x4d90>
  40b703:	cmp    rax,r14
  40b706:	mov    r13,rax
  40b709:	je     40b604 <_start@@Base+0x81e4>
  40b70f:	mov    rcx,QWORD PTR [rsp]
  40b713:	mov    rdx,rbx
  40b716:	mov    rsi,rax
  40b719:	mov    rdi,rbp
  40b71c:	mov    DWORD PTR [rsp+0x60],0x0
  40b724:	call   404470 <_start@@Base+0x1050>
  40b729:	cmp    r13,rax
  40b72c:	mov    r14,rax
  40b72f:	je     40b818 <_start@@Base+0x83f8>
  40b735:	mov    eax,DWORD PTR [rsp+0x60]
  40b739:	mov    rcx,QWORD PTR [rsp+0x8]
  40b73e:	mov    DWORD PTR [rcx+0x4],eax
  40b741:	jmp    40b615 <_start@@Base+0x81f5>
  40b746:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b750:	mov    r14,rbx
  40b753:	mov    rsi,rbx
  40b756:	xor    r9d,r9d
  40b759:	mov    rdi,r14
  40b75c:	call   403530 <_start@@Base+0x110>
  40b761:	jmp    40b5d5 <_start@@Base+0x81b5>
  40b766:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b770:	mov    rsi,r14
  40b773:	mov    ecx,0x5
  40b778:	mov    rdx,rbx
  40b77b:	mov    rdi,rbp
  40b77e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40b783:	mov    r14,rax
  40b786:	jmp    40b65b <_start@@Base+0x823b>
  40b78b:	mov    ecx,0x21
  40b790:	mov    rdx,rbx
  40b793:	mov    rsi,rax
  40b796:	mov    rdi,rbp
  40b799:	call   416820 <flatcc_json_parser_set_error@@Base>
  40b79e:	mov    r13,rax
  40b7a1:	nop    DWORD PTR [rax+0x0]
  40b7a8:	mov    rcx,QWORD PTR [rsp+0x18]
  40b7ad:	mov    rdx,rbx
  40b7b0:	mov    rsi,r13
  40b7b3:	mov    rdi,rbp
  40b7b6:	call   406120 <_start@@Base+0x2d00>
  40b7bb:	mov    r11d,DWORD PTR [rsp+0x40]
  40b7c0:	mov    r12,rax
  40b7c3:	test   r11d,r11d
  40b7c6:	jne    40b580 <_start@@Base+0x8160>
  40b7cc:	mov    r13,QWORD PTR [rsp+0x18]
  40b7d1:	mov    r14,rax
  40b7d4:	mov    rdi,QWORD PTR [rbp+0x0]
  40b7d8:	call   413d60 <flatcc_builder_end_vector@@Base>
  40b7dd:	test   eax,eax
  40b7df:	mov    DWORD PTR [rsp+0x44],eax
  40b7e3:	je     408520 <_start@@Base+0x5100>
  40b7e9:	mov    rdi,QWORD PTR [rbp+0x0]
  40b7ed:	mov    esi,0x1d
  40b7f2:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b7f7:	test   rax,rax
  40b7fa:	je     408520 <_start@@Base+0x5100>
  40b800:	mov    edx,DWORD PTR [rsp+0x44]
  40b804:	mov    DWORD PTR [rax],edx
  40b806:	jmp    408a08 <_start@@Base+0x55e8>
  40b80b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b810:	mov    r13,rax
  40b813:	jmp    40b7a8 <_start@@Base+0x8388>
  40b815:	nop    DWORD PTR [rax]
  40b818:	mov    r8,QWORD PTR [rsp]
  40b81c:	lea    rcx,[rip+0x158fd]        # 421120 <__data_start@@Base+0x60>
  40b823:	mov    rdx,rbx
  40b826:	mov    rsi,rax
  40b829:	mov    rdi,rbp
  40b82c:	call   405ee0 <_start@@Base+0x2ac0>
  40b831:	cmp    r14,rax
  40b834:	je     40b78b <_start@@Base+0x836b>
  40b83a:	cmp    rbx,rax
  40b83d:	je     40b78b <_start@@Base+0x836b>
  40b843:	mov    r14,rax
  40b846:	jmp    40b735 <_start@@Base+0x8315>
  40b84b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b850:	mov    r8,QWORD PTR [rsp]
  40b854:	lea    rcx,[rip+0x158e5]        # 421140 <__data_start@@Base+0x80>
  40b85b:	mov    rdx,rbx
  40b85e:	mov    rsi,rax
  40b861:	mov    rdi,rbp
  40b864:	call   405ee0 <_start@@Base+0x2ac0>
  40b869:	cmp    r14,rax
  40b86c:	je     40b78b <_start@@Base+0x836b>
  40b872:	cmp    rbx,rax
  40b875:	je     40b78b <_start@@Base+0x836b>
  40b87b:	mov    r14,rax
  40b87e:	jmp    40b6cf <_start@@Base+0x82af>
  40b883:	mov    r14,r12
  40b886:	jmp    408520 <_start@@Base+0x5100>
  40b88b:	mov    r14,rsi
  40b88e:	jmp    408520 <_start@@Base+0x5100>
  40b893:	mov    r8,QWORD PTR [rsp]
  40b897:	lea    rcx,[rip+0x15922]        # 4211c0 <__data_start@@Base+0x100>
  40b89e:	mov    rdx,rbx
  40b8a1:	mov    rsi,rax
  40b8a4:	mov    rdi,rbp
  40b8a7:	call   404ca0 <_start@@Base+0x1880>
  40b8ac:	cmp    r14,rax
  40b8af:	je     40c190 <_start@@Base+0x8d70>
  40b8b5:	cmp    rbx,rax
  40b8b8:	je     40c190 <_start@@Base+0x8d70>
  40b8be:	mov    r14,rax
  40b8c1:	jmp    40ad1e <_start@@Base+0x78fe>
  40b8c6:	mov    rdi,QWORD PTR [rbp+0x0]
  40b8ca:	call   413d60 <flatcc_builder_end_vector@@Base>
  40b8cf:	test   eax,eax
  40b8d1:	mov    DWORD PTR [rsp+0x44],eax
  40b8d5:	je     408520 <_start@@Base+0x5100>
  40b8db:	mov    rdi,QWORD PTR [rbp+0x0]
  40b8df:	mov    esi,0x5
  40b8e4:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b8e9:	test   rax,rax
  40b8ec:	je     408520 <_start@@Base+0x5100>
  40b8f2:	mov    edx,DWORD PTR [rsp+0x44]
  40b8f6:	mov    DWORD PTR [rax],edx
  40b8f8:	jmp    408a08 <_start@@Base+0x55e8>
  40b8fd:	mov    rdi,QWORD PTR [rbp+0x0]
  40b901:	call   413e70 <flatcc_builder_end_offset_vector@@Base>
  40b906:	test   eax,eax
  40b908:	mov    DWORD PTR [rsp+0x44],eax
  40b90c:	je     408520 <_start@@Base+0x5100>
  40b912:	mov    rdi,QWORD PTR [rbp+0x0]
  40b916:	mov    esi,0xb
  40b91b:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b920:	test   rax,rax
  40b923:	je     408520 <_start@@Base+0x5100>
  40b929:	mov    edx,DWORD PTR [rsp+0x44]
  40b92d:	mov    DWORD PTR [rax],edx
  40b92f:	jmp    408a08 <_start@@Base+0x55e8>
  40b934:	mov    rdx,rbx
  40b937:	mov    rsi,r12
  40b93a:	mov    rdi,rbp
  40b93d:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40b942:	mov    r14,rax
  40b945:	jmp    408a08 <_start@@Base+0x55e8>
  40b94a:	mov    ecx,0x4
  40b94f:	mov    rdx,rbx
  40b952:	mov    rsi,r12
  40b955:	mov    rdi,rbp
  40b958:	call   4081b0 <_start@@Base+0x4d90>
  40b95d:	cmp    r12,rax
  40b960:	mov    r14,rax
  40b963:	je     4088b7 <_start@@Base+0x5497>
  40b969:	cmp    rbx,rax
  40b96c:	je     40b977 <_start@@Base+0x8557>
  40b96e:	cmp    BYTE PTR [rax],0x5b
  40b971:	je     40bedc <_start@@Base+0x8abc>
  40b977:	mov    rdi,QWORD PTR [rbp+0x0]
  40b97b:	xor    ecx,ecx
  40b97d:	xor    edx,edx
  40b97f:	xor    esi,esi
  40b981:	call   412410 <flatcc_builder_start_buffer@@Base>
  40b986:	test   eax,eax
  40b988:	jne    408520 <_start@@Base+0x5100>
  40b98e:	lea    r12,[rsp+0x44]
  40b993:	mov    rsi,r14
  40b996:	mov    rdx,rbx
  40b999:	mov    rdi,rbp
  40b99c:	mov    rcx,r12
  40b99f:	call   408290 <_start@@Base+0x4e70>
  40b9a4:	mov    esi,DWORD PTR [rsp+0x44]
  40b9a8:	mov    r14,rax
  40b9ab:	test   esi,esi
  40b9ad:	je     408520 <_start@@Base+0x5100>
  40b9b3:	mov    rdi,QWORD PTR [rbp+0x0]
  40b9b7:	call   4124f0 <flatcc_builder_end_buffer@@Base>
  40b9bc:	mov    DWORD PTR [rsp+0x44],eax
  40b9c0:	test   eax,eax
  40b9c2:	je     408520 <_start@@Base+0x5100>
  40b9c8:	mov    rdi,QWORD PTR [rbp+0x0]
  40b9cc:	mov    esi,0xd
  40b9d1:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40b9d6:	test   rax,rax
  40b9d9:	je     408520 <_start@@Base+0x5100>
  40b9df:	mov    edx,DWORD PTR [rsp+0x44]
  40b9e3:	mov    DWORD PTR [rax],edx
  40b9e5:	jmp    408a08 <_start@@Base+0x55e8>
  40b9ea:	mov    ecx,0x8
  40b9ef:	mov    rdx,rbx
  40b9f2:	mov    rsi,r12
  40b9f5:	mov    rdi,rbp
  40b9f8:	call   4081b0 <_start@@Base+0x4d90>
  40b9fd:	cmp    r12,rax
  40ba00:	mov    r15,rax
  40ba03:	je     409678 <_start@@Base+0x6258>
  40ba09:	mov    rcx,QWORD PTR [rsp]
  40ba0d:	mov    rdx,rbx
  40ba10:	mov    rsi,rax
  40ba13:	mov    rdi,rbp
  40ba16:	mov    QWORD PTR [rsp+0x60],0x0
  40ba1f:	call   404720 <_start@@Base+0x1300>
  40ba24:	cmp    rax,r15
  40ba27:	mov    r14,rax
  40ba2a:	je     40c19d <_start@@Base+0x8d7d>
  40ba30:	cmp    QWORD PTR [rsp+0x60],0x0
  40ba36:	jne    40ba42 <_start@@Base+0x8622>
  40ba38:	test   BYTE PTR [rbp+0x10],0x2
  40ba3c:	je     408a08 <_start@@Base+0x55e8>
  40ba42:	mov    rdi,QWORD PTR [rbp+0x0]
  40ba46:	mov    ecx,0x8
  40ba4b:	mov    edx,0x8
  40ba50:	mov    esi,0x12
  40ba55:	call   414920 <flatcc_builder_table_add@@Base>
  40ba5a:	test   rax,rax
  40ba5d:	je     40c2b0 <_start@@Base+0x8e90>
  40ba63:	mov    rdx,QWORD PTR [rsp+0x60]
  40ba68:	mov    QWORD PTR [rax],rdx
  40ba6b:	jmp    408a08 <_start@@Base+0x55e8>
  40ba70:	mov    rsi,r14
  40ba73:	mov    rdx,rbx
  40ba76:	mov    rdi,rbp
  40ba79:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ba7e:	mov    r14,rax
  40ba81:	jmp    408a08 <_start@@Base+0x55e8>
  40ba86:	mov    rsi,rbx
  40ba89:	mov    rdi,r14
  40ba8c:	call   403530 <_start@@Base+0x110>
  40ba91:	jmp    409779 <_start@@Base+0x6359>
  40ba96:	mov    rdi,QWORD PTR [rbp+0x0]
  40ba9a:	call   413d60 <flatcc_builder_end_vector@@Base>
  40ba9f:	test   eax,eax
  40baa1:	mov    DWORD PTR [rsp+0x44],eax
  40baa5:	je     408520 <_start@@Base+0x5100>
  40baab:	mov    rdi,QWORD PTR [rbp+0x0]
  40baaf:	mov    esi,0x21
  40bab4:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40bab9:	test   rax,rax
  40babc:	je     408520 <_start@@Base+0x5100>
  40bac2:	mov    edx,DWORD PTR [rsp+0x44]
  40bac6:	mov    DWORD PTR [rax],edx
  40bac8:	jmp    408a08 <_start@@Base+0x55e8>
  40bacd:	mov    ecx,0x5
  40bad2:	mov    rdx,rbx
  40bad5:	mov    rsi,r12
  40bad8:	mov    rdi,rbp
  40badb:	call   4081b0 <_start@@Base+0x4d90>
  40bae0:	cmp    r12,rax
  40bae3:	je     4090dc <_start@@Base+0x5cbc>
  40bae9:	lea    r12,[rsp+0x44]
  40baee:	mov    rdi,rbp
  40baf1:	mov    rdx,rbx
  40baf4:	mov    rsi,rax
  40baf7:	mov    rcx,r12
  40bafa:	call   407ec0 <_start@@Base+0x4aa0>
  40baff:	mov    edi,DWORD PTR [rsp+0x44]
  40bb03:	mov    r14,rax
  40bb06:	test   edi,edi
  40bb08:	je     408520 <_start@@Base+0x5100>
  40bb0e:	mov    rdi,QWORD PTR [rbp+0x0]
  40bb12:	mov    esi,0x22
  40bb17:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40bb1c:	test   rax,rax
  40bb1f:	je     408520 <_start@@Base+0x5100>
  40bb25:	mov    edx,DWORD PTR [rsp+0x44]
  40bb29:	mov    DWORD PTR [rax],edx
  40bb2b:	jmp    408a08 <_start@@Base+0x55e8>
  40bb30:	lea    rcx,[rip+0x155a9]        # 4210e0 <__data_start@@Base+0x20>
  40bb37:	mov    r8,r15
  40bb3a:	mov    rdx,rbx
  40bb3d:	mov    rsi,rax
  40bb40:	mov    rdi,rbp
  40bb43:	call   405800 <_start@@Base+0x23e0>
  40bb48:	cmp    r14,rax
  40bb4b:	je     40c33b <_start@@Base+0x8f1b>
  40bb51:	cmp    rbx,rax
  40bb54:	je     40c33b <_start@@Base+0x8f1b>
  40bb5a:	mov    r14,rax
  40bb5d:	jmp    409c6f <_start@@Base+0x684f>
  40bb62:	mov    r13,QWORD PTR [rsp+0x20]
  40bb67:	jmp    40a5ec <_start@@Base+0x71cc>
  40bb6c:	mov    ecx,0x8
  40bb71:	mov    rdx,rbx
  40bb74:	mov    rsi,r12
  40bb77:	mov    rdi,rbp
  40bb7a:	call   4081b0 <_start@@Base+0x4d90>
  40bb7f:	cmp    r12,rax
  40bb82:	mov    r15,rax
  40bb85:	je     409379 <_start@@Base+0x5f59>
  40bb8b:	cmp    rbx,rax
  40bb8e:	mov    QWORD PTR [rsp+0x58],0x0
  40bb97:	mov    QWORD PTR [rsp+0x60],0x0
  40bba0:	mov    DWORD PTR [rsp+0x4c],0x0
  40bba8:	je     40c1e9 <_start@@Base+0x8dc9>
  40bbae:	mov    r8,QWORD PTR [rsp]
  40bbb2:	lea    rcx,[rsp+0x4c]
  40bbb7:	mov    rdx,rbx
  40bbba:	mov    rsi,rax
  40bbbd:	mov    rdi,rbp
  40bbc0:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40bbc5:	cmp    r15,rax
  40bbc8:	mov    r14,rax
  40bbcb:	je     40c1e9 <_start@@Base+0x8dc9>
  40bbd1:	mov    r12d,DWORD PTR [rsp+0x4c]
  40bbd6:	test   r12d,r12d
  40bbd9:	jne    40c05c <_start@@Base+0x8c3c>
  40bbdf:	mov    rax,QWORD PTR [rsp+0x60]
  40bbe4:	mov    QWORD PTR [rsp+0x58],rax
  40bbe9:	test   rax,rax
  40bbec:	jne    40bbf8 <_start@@Base+0x87d8>
  40bbee:	test   BYTE PTR [rbp+0x10],0x2
  40bbf2:	je     408a08 <_start@@Base+0x55e8>
  40bbf8:	mov    rdi,QWORD PTR [rbp+0x0]
  40bbfc:	mov    ecx,0x8
  40bc01:	mov    edx,0x8
  40bc06:	mov    esi,0x13
  40bc0b:	call   414920 <flatcc_builder_table_add@@Base>
  40bc10:	test   rax,rax
  40bc13:	je     408520 <_start@@Base+0x5100>
  40bc19:	mov    rdx,QWORD PTR [rsp+0x58]
  40bc1e:	mov    QWORD PTR [rax],rdx
  40bc21:	jmp    408a08 <_start@@Base+0x55e8>
  40bc26:	mov    r8,QWORD PTR [rsp]
  40bc2a:	lea    rcx,[rip+0x15b4f]        # 421780 <__data_start@@Base+0x6c0>
  40bc31:	mov    rdx,rbx
  40bc34:	mov    rsi,rax
  40bc37:	mov    rdi,rbp
  40bc3a:	call   405c90 <_start@@Base+0x2870>
  40bc3f:	cmp    r14,rax
  40bc42:	mov    r14,rax
  40bc45:	je     408520 <_start@@Base+0x5100>
  40bc4b:	cmp    rbx,rax
  40bc4e:	jne    40994a <_start@@Base+0x652a>
  40bc54:	jmp    408520 <_start@@Base+0x5100>
  40bc59:	nop    DWORD PTR [rax+0x0]
  40bc60:	mov    r8,QWORD PTR [rsp]
  40bc64:	lea    rcx,[rip+0x15a35]        # 4216a0 <__data_start@@Base+0x5e0>
  40bc6b:	mov    rdx,rbx
  40bc6e:	mov    rsi,rax
  40bc71:	mov    rdi,rbp
  40bc74:	call   404ca0 <_start@@Base+0x1880>
  40bc79:	cmp    r14,rax
  40bc7c:	mov    r14,rax
  40bc7f:	je     408520 <_start@@Base+0x5100>
  40bc85:	cmp    rbx,rax
  40bc88:	jne    40af06 <_start@@Base+0x7ae6>
  40bc8e:	jmp    408520 <_start@@Base+0x5100>
  40bc93:	nop    DWORD PTR [rax+rax*1+0x0]
  40bc98:	mov    rdx,rbx
  40bc9b:	mov    rsi,r12
  40bc9e:	mov    rdi,rbp
  40bca1:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40bca6:	mov    r14,rax
  40bca9:	jmp    408a08 <_start@@Base+0x55e8>
  40bcae:	mov    rdi,QWORD PTR [rbp+0x0]
  40bcb2:	call   413e70 <flatcc_builder_end_offset_vector@@Base>
  40bcb7:	test   eax,eax
  40bcb9:	mov    DWORD PTR [rsp+0x44],eax
  40bcbd:	je     408520 <_start@@Base+0x5100>
  40bcc3:	mov    rdi,QWORD PTR [rbp+0x0]
  40bcc7:	mov    esi,0xa
  40bccc:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40bcd1:	test   rax,rax
  40bcd4:	je     408520 <_start@@Base+0x5100>
  40bcda:	mov    edx,DWORD PTR [rsp+0x44]
  40bcde:	mov    DWORD PTR [rax],edx
  40bce0:	jmp    408a08 <_start@@Base+0x55e8>
  40bce5:	mov    ecx,0x2
  40bcea:	mov    rdx,rbx
  40bced:	mov    rsi,r12
  40bcf0:	mov    rdi,rbp
  40bcf3:	call   4081b0 <_start@@Base+0x4d90>
  40bcf8:	cmp    r12,rax
  40bcfb:	mov    r14,rax
  40bcfe:	je     40b22d <_start@@Base+0x7e0d>
  40bd04:	mov    rdi,QWORD PTR [rbp+0x0]
  40bd08:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  40bd0d:	test   eax,eax
  40bd0f:	jne    408520 <_start@@Base+0x5100>
  40bd15:	mov    rsi,r14
  40bd18:	mov    rcx,r13
  40bd1b:	mov    rdx,rbx
  40bd1e:	mov    rdi,rbp
  40bd21:	call   404990 <_start@@Base+0x1570>
  40bd26:	mov    r10d,DWORD PTR [rsp+0x40]
  40bd2b:	mov    r14,rax
  40bd2e:	test   r10d,r10d
  40bd31:	je     40be71 <_start@@Base+0x8a51>
  40bd37:	lea    r12,[rsp+0x44]
  40bd3c:	jmp    40bd7f <_start@@Base+0x895f>
  40bd3e:	xchg   ax,ax
  40bd40:	mov    rdi,QWORD PTR [rbp+0x0]
  40bd44:	mov    esi,0x1
  40bd49:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  40bd4e:	test   rax,rax
  40bd51:	je     408520 <_start@@Base+0x5100>
  40bd57:	mov    edx,DWORD PTR [rsp+0x44]
  40bd5b:	mov    rsi,r14
  40bd5e:	mov    rcx,r13
  40bd61:	mov    rdi,rbp
  40bd64:	mov    DWORD PTR [rax],edx
  40bd66:	mov    rdx,rbx
  40bd69:	call   406120 <_start@@Base+0x2d00>
  40bd6e:	mov    r8d,DWORD PTR [rsp+0x40]
  40bd73:	mov    r14,rax
  40bd76:	test   r8d,r8d
  40bd79:	je     40be71 <_start@@Base+0x8a51>
  40bd7f:	mov    rsi,r14
  40bd82:	mov    rcx,r12
  40bd85:	mov    rdx,rbx
  40bd88:	mov    rdi,rbp
  40bd8b:	call   418880 <flatcc_json_parser_build_string@@Base>
  40bd90:	mov    r9d,DWORD PTR [rsp+0x44]
  40bd95:	mov    r14,rax
  40bd98:	test   r9d,r9d
  40bd9b:	jne    40bd40 <_start@@Base+0x8920>
  40bd9d:	jmp    408520 <_start@@Base+0x5100>
  40bda2:	mov    r8,QWORD PTR [rsp]
  40bda6:	lea    rcx,[rip+0x15913]        # 4216c0 <__data_start@@Base+0x600>
  40bdad:	mov    rdx,rbx
  40bdb0:	mov    rsi,rax
  40bdb3:	mov    rdi,rbp
  40bdb6:	call   404ca0 <_start@@Base+0x1880>
  40bdbb:	cmp    r14,rax
  40bdbe:	mov    r14,rax
  40bdc1:	je     408520 <_start@@Base+0x5100>
  40bdc7:	cmp    rbx,rax
  40bdca:	jne    4099cf <_start@@Base+0x65af>
  40bdd0:	jmp    408520 <_start@@Base+0x5100>
  40bdd5:	nop    DWORD PTR [rax]
  40bdd8:	mov    rsi,r14
  40bddb:	mov    rdx,rbx
  40bdde:	mov    rdi,rbp
  40bde1:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40bde6:	mov    r14,rax
  40bde9:	jmp    408a08 <_start@@Base+0x55e8>
  40bdee:	mov    ecx,0x8
  40bdf3:	mov    rdx,rbx
  40bdf6:	mov    rsi,r12
  40bdf9:	mov    rdi,rbp
  40bdfc:	call   4081b0 <_start@@Base+0x4d90>
  40be01:	cmp    r12,rax
  40be04:	mov    r15,rax
  40be07:	je     40b24d <_start@@Base+0x7e2d>
  40be0d:	mov    rcx,QWORD PTR [rsp]
  40be11:	mov    rdx,rbx
  40be14:	mov    rsi,rax
  40be17:	mov    rdi,rbp
  40be1a:	mov    DWORD PTR [rsp+0x60],0x0
  40be22:	call   404470 <_start@@Base+0x1050>
  40be27:	cmp    rax,r15
  40be2a:	mov    r14,rax
  40be2d:	je     40c0ef <_start@@Base+0x8ccf>
  40be33:	mov    eax,DWORD PTR [rsp+0x60]
  40be37:	test   eax,eax
  40be39:	jne    40be45 <_start@@Base+0x8a25>
  40be3b:	test   BYTE PTR [rbp+0x10],0x2
  40be3f:	je     408a08 <_start@@Base+0x55e8>
  40be45:	mov    rdi,QWORD PTR [rbp+0x0]
  40be49:	mov    ecx,0x4
  40be4e:	mov    edx,0x4
  40be53:	mov    esi,0x11
  40be58:	call   414920 <flatcc_builder_table_add@@Base>
  40be5d:	test   rax,rax
  40be60:	je     40c330 <_start@@Base+0x8f10>
  40be66:	mov    edx,DWORD PTR [rsp+0x60]
  40be6a:	mov    DWORD PTR [rax],edx
  40be6c:	jmp    408a08 <_start@@Base+0x55e8>
  40be71:	mov    rdi,QWORD PTR [rbp+0x0]
  40be75:	call   413e70 <flatcc_builder_end_offset_vector@@Base>
  40be7a:	test   eax,eax
  40be7c:	mov    DWORD PTR [rsp+0x44],eax
  40be80:	je     408520 <_start@@Base+0x5100>
  40be86:	mov    rdi,QWORD PTR [rbp+0x0]
  40be8a:	mov    esi,0x1c
  40be8f:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40be94:	test   rax,rax
  40be97:	je     408520 <_start@@Base+0x5100>
  40be9d:	mov    edx,DWORD PTR [rsp+0x44]
  40bea1:	mov    DWORD PTR [rax],edx
  40bea3:	jmp    408a08 <_start@@Base+0x55e8>
  40bea8:	mov    rdx,rbx
  40beab:	mov    rsi,r12
  40beae:	mov    rdi,rbp
  40beb1:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40beb6:	mov    r14,rax
  40beb9:	jmp    408a08 <_start@@Base+0x55e8>
  40bebe:	mov    r14,r12
  40bec1:	jmp    408520 <_start@@Base+0x5100>
  40bec6:	mov    rdx,rbx
  40bec9:	mov    rsi,r12
  40becc:	mov    rdi,rbp
  40becf:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40bed4:	mov    r14,rax
  40bed7:	jmp    408a08 <_start@@Base+0x55e8>
  40bedc:	mov    rdi,QWORD PTR [rbp+0x0]
  40bee0:	mov    ecx,0xffffffff
  40bee5:	mov    edx,0x1
  40beea:	mov    esi,0x1
  40beef:	call   412e60 <flatcc_builder_start_vector@@Base>
  40bef4:	test   eax,eax
  40bef6:	jne    408520 <_start@@Base+0x5100>
  40befc:	mov    rsi,r14
  40beff:	mov    rcx,r13
  40bf02:	mov    rdx,rbx
  40bf05:	mov    rdi,rbp
  40bf08:	call   404990 <_start@@Base+0x1570>
  40bf0d:	mov    r10d,DWORD PTR [rsp+0x40]
  40bf12:	mov    r14,rax
  40bf15:	test   r10d,r10d
  40bf18:	je     40c0c8 <_start@@Base+0x8ca8>
  40bf1e:	mov    r12,QWORD PTR [rsp]
  40bf22:	jmp    40bf52 <_start@@Base+0x8b32>
  40bf24:	nop    DWORD PTR [rax+0x0]
  40bf28:	movzx  edx,BYTE PTR [rsp+0x60]
  40bf2d:	mov    rcx,r13
  40bf30:	mov    rsi,rax
  40bf33:	mov    rdi,rbp
  40bf36:	mov    BYTE PTR [r15],dl
  40bf39:	mov    rdx,rbx
  40bf3c:	call   406120 <_start@@Base+0x2d00>
  40bf41:	mov    r9d,DWORD PTR [rsp+0x40]
  40bf46:	mov    r14,rax
  40bf49:	test   r9d,r9d
  40bf4c:	je     40c0c8 <_start@@Base+0x8ca8>
  40bf52:	mov    rdi,QWORD PTR [rbp+0x0]
  40bf56:	mov    esi,0x1
  40bf5b:	mov    BYTE PTR [rsp+0x60],0x0
  40bf60:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  40bf65:	test   rax,rax
  40bf68:	mov    r15,rax
  40bf6b:	je     408520 <_start@@Base+0x5100>
  40bf71:	mov    rcx,r12
  40bf74:	mov    rdx,rbx
  40bf77:	mov    rsi,r14
  40bf7a:	mov    rdi,rbp
  40bf7d:	call   4043a0 <_start@@Base+0xf80>
  40bf82:	cmp    rax,r14
  40bf85:	jne    40bf28 <_start@@Base+0x8b08>
  40bf87:	lea    rcx,[rip+0x155d2]        # 421560 <__data_start@@Base+0x4a0>
  40bf8e:	mov    r8,r12
  40bf91:	mov    rdx,rbx
  40bf94:	mov    rsi,r14
  40bf97:	mov    rdi,rbp
  40bf9a:	call   405a60 <_start@@Base+0x2640>
  40bf9f:	cmp    rax,r14
  40bfa2:	je     40bfad <_start@@Base+0x8b8d>
  40bfa4:	cmp    rbx,rax
  40bfa7:	jne    40bf28 <_start@@Base+0x8b08>
  40bfad:	mov    r14,rax
  40bfb0:	jmp    408520 <_start@@Base+0x5100>
  40bfb5:	nop    DWORD PTR [rax]
  40bfb8:	mov    rsi,rbx
  40bfbb:	mov    rdi,r14
  40bfbe:	call   403530 <_start@@Base+0x110>
  40bfc3:	jmp    409694 <_start@@Base+0x6274>
  40bfc8:	mov    r14,r12
  40bfcb:	jmp    408520 <_start@@Base+0x5100>
  40bfd0:	mov    rsi,r14
  40bfd3:	mov    rdx,rbx
  40bfd6:	mov    rdi,rbp
  40bfd9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40bfde:	mov    r14,rax
  40bfe1:	jmp    408a08 <_start@@Base+0x55e8>
  40bfe6:	mov    r8,QWORD PTR [rsp]
  40bfea:	lea    rcx,[rip+0x1574f]        # 421740 <__data_start@@Base+0x680>
  40bff1:	mov    rdx,rbx
  40bff4:	mov    rsi,rax
  40bff7:	mov    rdi,rbp
  40bffa:	call   405c90 <_start@@Base+0x2870>
  40bfff:	cmp    r14,rax
  40c002:	mov    r14,rax
  40c005:	je     408520 <_start@@Base+0x5100>
  40c00b:	cmp    rbx,rax
  40c00e:	jne    40b107 <_start@@Base+0x7ce7>
  40c014:	jmp    408520 <_start@@Base+0x5100>
  40c019:	nop    DWORD PTR [rax+0x0]
  40c020:	mov    rdx,rbx
  40c023:	mov    rsi,r12
  40c026:	mov    rdi,rbp
  40c029:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c02e:	mov    r14,rax
  40c031:	jmp    408a08 <_start@@Base+0x55e8>
  40c036:	mov    rsi,rbx
  40c039:	mov    rdi,r14
  40c03c:	call   403530 <_start@@Base+0x110>
  40c041:	jmp    40b269 <_start@@Base+0x7e49>
  40c046:	mov    rsi,r14
  40c049:	mov    rdx,rbx
  40c04c:	mov    rdi,rbp
  40c04f:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c054:	mov    r14,rax
  40c057:	jmp    408a08 <_start@@Base+0x55e8>
  40c05c:	mov    ecx,0x8
  40c061:	mov    rdx,rbx
  40c064:	mov    rsi,rax
  40c067:	mov    rdi,rbp
  40c06a:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c06f:	cmp    r15,rax
  40c072:	mov    r14,rax
  40c075:	je     40c1e6 <_start@@Base+0x8dc6>
  40c07b:	mov    rax,QWORD PTR [rsp+0x58]
  40c080:	jmp    40bbe9 <_start@@Base+0x87c9>
  40c085:	mov    r8,QWORD PTR [rsp]
  40c089:	lea    rcx,[rip+0x155d0]        # 421660 <__data_start@@Base+0x5a0>
  40c090:	mov    rdx,rbx
  40c093:	mov    rsi,rax
  40c096:	mov    rdi,rbp
  40c099:	call   405370 <_start@@Base+0x1f50>
  40c09e:	cmp    r14,rax
  40c0a1:	je     40c2e9 <_start@@Base+0x8ec9>
  40c0a7:	cmp    rbx,rax
  40c0aa:	je     40c2e9 <_start@@Base+0x8ec9>
  40c0b0:	mov    r14,rax
  40c0b3:	jmp    40b365 <_start@@Base+0x7f45>
  40c0b8:	mov    rsi,rbx
  40c0bb:	mov    rdi,r14
  40c0be:	call   403530 <_start@@Base+0x110>
  40c0c3:	jmp    409395 <_start@@Base+0x5f75>
  40c0c8:	mov    rdi,QWORD PTR [rbp+0x0]
  40c0cc:	call   413d60 <flatcc_builder_end_vector@@Base>
  40c0d1:	mov    DWORD PTR [rsp+0x44],eax
  40c0d5:	jmp    40b9c0 <_start@@Base+0x85a0>
  40c0da:	mov    r15,QWORD PTR [rsp+0x8]
  40c0df:	mov    r14,r15
  40c0e2:	jmp    408520 <_start@@Base+0x5100>
  40c0e7:	mov    r14,r12
  40c0ea:	jmp    408520 <_start@@Base+0x5100>
  40c0ef:	mov    r8,QWORD PTR [rsp]
  40c0f3:	lea    rcx,[rip+0x154e6]        # 4215e0 <__data_start@@Base+0x520>
  40c0fa:	mov    rdx,rbx
  40c0fd:	mov    rsi,rax
  40c100:	mov    rdi,rbp
  40c103:	call   405ee0 <_start@@Base+0x2ac0>
  40c108:	cmp    r14,rax
  40c10b:	je     40c333 <_start@@Base+0x8f13>
  40c111:	cmp    rbx,rax
  40c114:	je     40c333 <_start@@Base+0x8f13>
  40c11a:	mov    r14,rax
  40c11d:	jmp    40be33 <_start@@Base+0x8a13>
  40c122:	mov    r12,r14
  40c125:	mov    rdx,rbx
  40c128:	mov    rsi,r12
  40c12b:	mov    rdi,rbp
  40c12e:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c133:	mov    r14,rax
  40c136:	jmp    408a08 <_start@@Base+0x55e8>
  40c13b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c140:	call   403080 <__stack_chk_fail@plt>
  40c145:	mov    ecx,0x8
  40c14a:	mov    rdx,rbx
  40c14d:	mov    rsi,r14
  40c150:	mov    rdi,rbp
  40c153:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c158:	cmp    r12,rax
  40c15b:	mov    r15,rax
  40c15e:	je     40c2f7 <_start@@Base+0x8ed7>
  40c164:	mov    rax,QWORD PTR [rsp+0x58]
  40c169:	mov    r14,r15
  40c16c:	jmp    40943c <_start@@Base+0x601c>
  40c171:	mov    r12,r14
  40c174:	mov    rdx,rbx
  40c177:	mov    rsi,r12
  40c17a:	mov    rdi,rbp
  40c17d:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c182:	mov    r14,rax
  40c185:	jmp    408a08 <_start@@Base+0x55e8>
  40c18a:	nop    WORD PTR [rax+rax*1+0x0]
  40c190:	mov    r13,QWORD PTR [rsp+0x18]
  40c195:	mov    r14,rax
  40c198:	jmp    40ada0 <_start@@Base+0x7980>
  40c19d:	mov    r8,QWORD PTR [rsp]
  40c1a1:	lea    rcx,[rip+0x15478]        # 421620 <__data_start@@Base+0x560>
  40c1a8:	mov    rdx,rbx
  40c1ab:	mov    rsi,rax
  40c1ae:	mov    rdi,rbp
  40c1b1:	call   405800 <_start@@Base+0x23e0>
  40c1b6:	cmp    r14,rax
  40c1b9:	je     40c2b3 <_start@@Base+0x8e93>
  40c1bf:	cmp    rbx,rax
  40c1c2:	je     40c2b3 <_start@@Base+0x8e93>
  40c1c8:	mov    r14,rax
  40c1cb:	jmp    40ba30 <_start@@Base+0x8610>
  40c1d0:	mov    rsi,r14
  40c1d3:	mov    rdx,rbx
  40c1d6:	mov    rdi,rbp
  40c1d9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c1de:	mov    r14,rax
  40c1e1:	jmp    408a08 <_start@@Base+0x55e8>
  40c1e6:	mov    r15,rax
  40c1e9:	lea    r8,[rsp+0x58]
  40c1ee:	lea    rcx,[rip+0x153ab]        # 4215a0 <__data_start@@Base+0x4e0>
  40c1f5:	mov    rdx,rbx
  40c1f8:	mov    rsi,r15
  40c1fb:	mov    rdi,rbp
  40c1fe:	call   403170 <posix_memalign@plt+0x10>
  40c203:	cmp    rax,r15
  40c206:	mov    r14,rax
  40c209:	je     408520 <_start@@Base+0x5100>
  40c20f:	cmp    rbx,rax
  40c212:	jne    40c07b <_start@@Base+0x8c5b>
  40c218:	jmp    408520 <_start@@Base+0x5100>
  40c21d:	nop    DWORD PTR [rax]
  40c220:	mov    r12,r14
  40c223:	mov    rdx,rbx
  40c226:	mov    rsi,r12
  40c229:	mov    rdi,rbp
  40c22c:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c231:	mov    r14,rax
  40c234:	jmp    408a08 <_start@@Base+0x55e8>
  40c239:	mov    r8,QWORD PTR [rsp]
  40c23d:	lea    rcx,[rip+0x1537c]        # 4215c0 <__data_start@@Base+0x500>
  40c244:	mov    rdx,rbx
  40c247:	mov    rsi,rax
  40c24a:	mov    rdi,rbp
  40c24d:	call   405ee0 <_start@@Base+0x2ac0>
  40c252:	cmp    r14,rax
  40c255:	je     40c292 <_start@@Base+0x8e72>
  40c257:	cmp    rbx,rax
  40c25a:	je     40c292 <_start@@Base+0x8e72>
  40c25c:	mov    r14,rax
  40c25f:	jmp    40b2d8 <_start@@Base+0x7eb8>
  40c264:	mov    r8,QWORD PTR [rsp]
  40c268:	lea    rcx,[rip+0x15391]        # 421600 <__data_start@@Base+0x540>
  40c26f:	mov    rdx,rbx
  40c272:	mov    rsi,rax
  40c275:	mov    rdi,rbp
  40c278:	call   405800 <_start@@Base+0x23e0>
  40c27d:	cmp    r14,rax
  40c280:	je     40c29d <_start@@Base+0x8e7d>
  40c282:	cmp    rbx,rax
  40c285:	je     40c29d <_start@@Base+0x8e7d>
  40c287:	mov    r14,rax
  40c28a:	jmp    409704 <_start@@Base+0x62e4>
  40c28f:	mov    rax,r14
  40c292:	mov    r14,rax
  40c295:	jmp    408520 <_start@@Base+0x5100>
  40c29a:	mov    rax,r14
  40c29d:	mov    r14,rax
  40c2a0:	jmp    408520 <_start@@Base+0x5100>
  40c2a5:	mov    rax,r14
  40c2a8:	mov    r14,rax
  40c2ab:	jmp    408520 <_start@@Base+0x5100>
  40c2b0:	mov    rax,r14
  40c2b3:	mov    r14,rax
  40c2b6:	jmp    408520 <_start@@Base+0x5100>
  40c2bb:	mov    r8,QWORD PTR [rsp]
  40c2bf:	lea    rcx,[rip+0x1537a]        # 421640 <__data_start@@Base+0x580>
  40c2c6:	mov    rdx,rbx
  40c2c9:	mov    rsi,rax
  40c2cc:	mov    rdi,rbp
  40c2cf:	call   405370 <_start@@Base+0x1f50>
  40c2d4:	cmp    r14,rax
  40c2d7:	je     40c2a8 <_start@@Base+0x8e88>
  40c2d9:	cmp    rbx,rax
  40c2dc:	je     40c2a8 <_start@@Base+0x8e88>
  40c2de:	mov    r14,rax
  40c2e1:	jmp    4097e8 <_start@@Base+0x63c8>
  40c2e6:	mov    rax,r14
  40c2e9:	mov    r14,rax
  40c2ec:	jmp    408520 <_start@@Base+0x5100>
  40c2f1:	mov    r14,rbx
  40c2f4:	mov    r15,r14
  40c2f7:	lea    r8,[rsp+0x58]
  40c2fc:	lea    rcx,[rip+0x1527d]        # 421580 <__data_start@@Base+0x4c0>
  40c303:	mov    rdx,rbx
  40c306:	mov    rsi,r15
  40c309:	mov    rdi,rbp
  40c30c:	call   403170 <posix_memalign@plt+0x10>
  40c311:	cmp    rax,r15
  40c314:	mov    r14,rax
  40c317:	je     408520 <_start@@Base+0x5100>
  40c31d:	cmp    rbx,rax
  40c320:	je     408520 <_start@@Base+0x5100>
  40c326:	mov    rax,QWORD PTR [rsp+0x58]
  40c32b:	jmp    40943c <_start@@Base+0x601c>
  40c330:	mov    rax,r14
  40c333:	mov    r14,rax
  40c336:	jmp    408520 <_start@@Base+0x5100>
  40c33b:	mov    r13,QWORD PTR [rsp+0x20]
  40c340:	jmp    40a5e9 <_start@@Base+0x71c9>
  40c345:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c350:	push   r15
  40c352:	push   r14
  40c354:	mov    r14,rsi
  40c357:	push   r13
  40c359:	push   r12
  40c35b:	mov    r12,r8
  40c35e:	push   rbp
  40c35f:	push   rbx
  40c360:	mov    rbp,rdi
  40c363:	mov    rbx,rdx
  40c366:	sub    rsp,0x48
  40c36a:	mov    DWORD PTR [r8],0x0
  40c371:	mov    rax,QWORD PTR fs:0x28
  40c37a:	mov    QWORD PTR [rsp+0x38],rax
  40c37f:	xor    eax,eax
  40c381:	cmp    cl,0x9
  40c384:	je     40c440 <_start@@Base+0x9020>
  40c38a:	jbe    40c3f0 <_start@@Base+0x8fd0>
  40c38c:	cmp    cl,0xb
  40c38f:	je     40c488 <_start@@Base+0x9068>
  40c395:	jb     40c440 <_start@@Base+0x9020>
  40c39b:	cmp    cl,0xff
  40c39e:	je     40c488 <_start@@Base+0x9068>
  40c3a4:	test   BYTE PTR [rbp+0x10],0x1
  40c3a8:	jne    40cad0 <_start@@Base+0x96b0>
  40c3ae:	mov    ecx,0xf
  40c3b3:	mov    rsi,r14
  40c3b6:	mov    rdx,rbx
  40c3b9:	mov    rdi,rbp
  40c3bc:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c3c1:	mov    rsi,rax
  40c3c4:	nop    DWORD PTR [rax+0x0]
  40c3c8:	mov    rdi,QWORD PTR [rsp+0x38]
  40c3cd:	xor    rdi,QWORD PTR fs:0x28
  40c3d6:	mov    rax,rsi
  40c3d9:	jne    40ccc8 <_start@@Base+0x98a8>
  40c3df:	add    rsp,0x48
  40c3e3:	pop    rbx
  40c3e4:	pop    rbp
  40c3e5:	pop    r12
  40c3e7:	pop    r13
  40c3e9:	pop    r14
  40c3eb:	pop    r15
  40c3ed:	ret    
  40c3ee:	xchg   ax,ax
  40c3f0:	cmp    cl,0x2
  40c3f3:	je     40c730 <_start@@Base+0x9310>
  40c3f9:	cmp    cl,0x8
  40c3fc:	je     40c4a0 <_start@@Base+0x9080>
  40c402:	test   cl,cl
  40c404:	jne    40c3a4 <_start@@Base+0x8f84>
  40c406:	mov    rax,rdx
  40c409:	sub    rax,rsi
  40c40c:	cmp    rax,0x3
  40c410:	jle    40c42e <_start@@Base+0x900e>
  40c412:	lea    rsi,[rip+0xde8f]        # 41a2a8 <_IO_stdin_used@@Base+0x2a8>
  40c419:	mov    edx,0x4
  40c41e:	mov    rdi,r14
  40c421:	call   4030d0 <memcmp@plt>
  40c426:	test   eax,eax
  40c428:	lea    rsi,[r14+0x4]
  40c42c:	je     40c3c8 <_start@@Base+0x8fa8>
  40c42e:	mov    ecx,0x1a
  40c433:	jmp    40c3b3 <_start@@Base+0x8f93>
  40c438:	nop    DWORD PTR [rax+rax*1+0x0]
  40c440:	mov    rsi,r14
  40c443:	mov    rcx,r12
  40c446:	mov    rdx,rbx
  40c449:	mov    rdi,rbp
  40c44c:	call   406ba0 <_start@@Base+0x3780>
  40c451:	mov    rsi,rax
  40c454:	mov    edx,DWORD PTR [rbp+0x20]
  40c457:	test   edx,edx
  40c459:	jne    40c3c8 <_start@@Base+0x8fa8>
  40c45f:	mov    eax,DWORD PTR [r12]
  40c463:	test   eax,eax
  40c465:	jne    40c3c8 <_start@@Base+0x8fa8>
  40c46b:	mov    ecx,0x21
  40c470:	mov    rdx,rbx
  40c473:	mov    rdi,rbp
  40c476:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c47b:	mov    rsi,rax
  40c47e:	jmp    40c3c8 <_start@@Base+0x8fa8>
  40c483:	nop    DWORD PTR [rax+rax*1+0x0]
  40c488:	mov    rsi,r14
  40c48b:	mov    rcx,r12
  40c48e:	mov    rdx,rbx
  40c491:	mov    rdi,rbp
  40c494:	call   418880 <flatcc_json_parser_build_string@@Base>
  40c499:	mov    rsi,rax
  40c49c:	jmp    40c454 <_start@@Base+0x9034>
  40c49e:	xchg   ax,ax
  40c4a0:	mov    rdi,QWORD PTR [rdi]
  40c4a3:	mov    edx,0x2
  40c4a8:	mov    esi,0x2
  40c4ad:	call   412630 <flatcc_builder_start_struct@@Base>
  40c4b2:	test   rax,rax
  40c4b5:	mov    QWORD PTR [rsp],rax
  40c4b9:	je     40cc88 <_start@@Base+0x9868>
  40c4bf:	lea    r13,[rsp+0x28]
  40c4c4:	mov    rsi,r14
  40c4c7:	mov    rdx,rbx
  40c4ca:	mov    rdi,rbp
  40c4cd:	mov    rcx,r13
  40c4d0:	call   4048f0 <_start@@Base+0x14d0>
  40c4d5:	mov    r9d,DWORD PTR [rsp+0x28]
  40c4da:	mov    rsi,rax
  40c4dd:	test   r9d,r9d
  40c4e0:	je     40c9f0 <_start@@Base+0x95d0>
  40c4e6:	lea    rax,[rsp+0x24]
  40c4eb:	mov    QWORD PTR [rsp+0x18],rax
  40c4f0:	lea    rax,[rsp+0x30]
  40c4f5:	mov    QWORD PTR [rsp+0x8],rax
  40c4fa:	lea    rax,[rsp+0x2c]
  40c4ff:	mov    QWORD PTR [rsp+0x10],rax
  40c504:	jmp    40c57e <_start@@Base+0x915e>
  40c506:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c510:	lea    r14,[rsi+0x8]
  40c514:	mov    r9,rbx
  40c517:	sub    r9,r14
  40c51a:	cmp    r9,0x7
  40c51e:	jbe    40c5d0 <_start@@Base+0x91b0>
  40c524:	movbe  rax,QWORD PTR [rsi+0x8]
  40c52a:	movabs rdx,0xffffff0000000000
  40c534:	and    rax,rdx
  40c537:	movabs rdx,0x6774680000000000
  40c541:	cmp    rax,rdx
  40c544:	jne    40c550 <_start@@Base+0x9130>
  40c546:	cmp    r9,0x3
  40c54a:	jg     40c680 <_start@@Base+0x9260>
  40c550:	mov    rsi,r14
  40c553:	mov    rdx,rbx
  40c556:	mov    rdi,rbp
  40c559:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c55e:	mov    rsi,rax
  40c561:	mov    rcx,r13
  40c564:	mov    rdx,rbx
  40c567:	mov    rdi,rbp
  40c56a:	call   406270 <_start@@Base+0x2e50>
  40c56f:	mov    ecx,DWORD PTR [rsp+0x28]
  40c573:	mov    rsi,rax
  40c576:	test   ecx,ecx
  40c578:	je     40c9f0 <_start@@Base+0x95d0>
  40c57e:	cmp    rbx,rsi
  40c581:	je     40c5bd <_start@@Base+0x919d>
  40c583:	movzx  eax,BYTE PTR [rsi]
  40c586:	cmp    al,0x22
  40c588:	je     40c5e0 <_start@@Base+0x91c0>
  40c58a:	cmp    al,0x2e
  40c58c:	je     40c718 <_start@@Base+0x92f8>
  40c592:	mov    DWORD PTR [rbp+0x14],0x1
  40c599:	mov    rax,rbx
  40c59c:	sub    rax,rsi
  40c59f:	cmp    rax,0x7
  40c5a3:	jbe    40c600 <_start@@Base+0x91e0>
  40c5a5:	movbe  rax,QWORD PTR [rsi]
  40c5aa:	movabs rdx,0x686169725f6c656e
  40c5b4:	cmp    rax,rdx
  40c5b7:	je     40c510 <_start@@Base+0x90f0>
  40c5bd:	mov    rdx,rbx
  40c5c0:	mov    rdi,rbp
  40c5c3:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c5c8:	mov    rsi,rax
  40c5cb:	jmp    40c561 <_start@@Base+0x9141>
  40c5cd:	nop    DWORD PTR [rax]
  40c5d0:	mov    rsi,rbx
  40c5d3:	mov    rdi,r14
  40c5d6:	call   403530 <_start@@Base+0x110>
  40c5db:	jmp    40c52a <_start@@Base+0x910a>
  40c5e0:	add    rsi,0x1
  40c5e4:	mov    rax,rbx
  40c5e7:	mov    DWORD PTR [rbp+0x14],0x0
  40c5ee:	sub    rax,rsi
  40c5f1:	cmp    rax,0x7
  40c5f5:	ja     40c5a5 <_start@@Base+0x9185>
  40c5f7:	nop    WORD PTR [rax+rax*1+0x0]
  40c600:	lea    rdi,[rip+0xdaad]        # 41a0b4 <_IO_stdin_used@@Base+0xb4>
  40c607:	movsxd rax,DWORD PTR [rdi+rax*4]
  40c60b:	add    rax,rdi
  40c60e:	jmp    rax
  40c610:	movsx  rcx,BYTE PTR [rsi+0x6]
  40c615:	shl    rcx,0x8
  40c619:	movsx  rdx,BYTE PTR [rsi+0x5]
  40c61e:	mov    rax,rdx
  40c621:	shl    rax,0x10
  40c625:	or     rcx,rax
  40c628:	movsx  rdx,BYTE PTR [rsi+0x4]
  40c62d:	mov    rax,rdx
  40c630:	shl    rax,0x18
  40c634:	or     rax,rcx
  40c637:	movsx  rdx,BYTE PTR [rsi+0x3]
  40c63c:	mov    rcx,rdx
  40c63f:	shl    rcx,0x20
  40c643:	or     rax,rcx
  40c646:	movsx  rdx,BYTE PTR [rsi+0x2]
  40c64b:	mov    rcx,rdx
  40c64e:	shl    rcx,0x28
  40c652:	or     rcx,rax
  40c655:	movsx  rdx,BYTE PTR [rsi+0x1]
  40c65a:	mov    rax,rdx
  40c65d:	shl    rax,0x30
  40c661:	or     rcx,rax
  40c664:	movsx  rdx,BYTE PTR [rsi]
  40c668:	mov    rax,rdx
  40c66b:	shl    rax,0x38
  40c66f:	or     rax,rcx
  40c672:	jmp    40c5aa <_start@@Base+0x918a>
  40c677:	nop    WORD PTR [rax+rax*1+0x0]
  40c680:	mov    ecx,0x3
  40c685:	mov    rdx,rbx
  40c688:	mov    rsi,r14
  40c68b:	mov    rdi,rbp
  40c68e:	call   4081b0 <_start@@Base+0x4d90>
  40c693:	cmp    r14,rax
  40c696:	mov    r15,rax
  40c699:	je     40c550 <_start@@Base+0x9130>
  40c69f:	xor    r8d,r8d
  40c6a2:	cmp    rbx,rax
  40c6a5:	mov    QWORD PTR [rsp+0x30],0x0
  40c6ae:	mov    WORD PTR [rsp+0x24],r8w
  40c6b4:	mov    DWORD PTR [rsp+0x2c],0x0
  40c6bc:	je     40c9b0 <_start@@Base+0x9590>
  40c6c2:	mov    r8,QWORD PTR [rsp+0x8]
  40c6c7:	mov    rcx,QWORD PTR [rsp+0x10]
  40c6cc:	mov    rsi,rax
  40c6cf:	mov    rdx,rbx
  40c6d2:	mov    rdi,rbp
  40c6d5:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40c6da:	cmp    r15,rax
  40c6dd:	mov    rsi,rax
  40c6e0:	je     40c9b0 <_start@@Base+0x9590>
  40c6e6:	mov    edi,DWORD PTR [rsp+0x2c]
  40c6ea:	test   edi,edi
  40c6ec:	jne    40caf0 <_start@@Base+0x96d0>
  40c6f2:	mov    rdx,QWORD PTR [rsp+0x30]
  40c6f7:	cmp    rdx,0xffff
  40c6fe:	mov    eax,edx
  40c700:	ja     40cc70 <_start@@Base+0x9850>
  40c706:	mov    rdi,QWORD PTR [rsp]
  40c70a:	mov    WORD PTR [rdi],ax
  40c70d:	jmp    40c561 <_start@@Base+0x9141>
  40c712:	nop    WORD PTR [rax+rax*1+0x0]
  40c718:	mov    ecx,0x5
  40c71d:	mov    rdx,rbx
  40c720:	mov    rdi,rbp
  40c723:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c728:	mov    rsi,rax
  40c72b:	jmp    40c599 <_start@@Base+0x9179>
  40c730:	mov    rdi,QWORD PTR [rdi]
  40c733:	mov    esi,0x1
  40c738:	call   413080 <flatcc_builder_start_table@@Base>
  40c73d:	test   eax,eax
  40c73f:	jne    40c98d <_start@@Base+0x956d>
  40c745:	lea    r13,[rsp+0x24]
  40c74a:	mov    rsi,r14
  40c74d:	mov    rdx,rbx
  40c750:	mov    rdi,rbp
  40c753:	mov    rcx,r13
  40c756:	call   4048f0 <_start@@Base+0x14d0>
  40c75b:	mov    r14,rax
  40c75e:	mov    eax,DWORD PTR [rsp+0x24]
  40c762:	test   eax,eax
  40c764:	je     40c980 <_start@@Base+0x9560>
  40c76a:	lea    rax,[rsp+0x28]
  40c76f:	mov    QWORD PTR [rsp+0x18],rax
  40c774:	lea    rax,[rsp+0x30]
  40c779:	mov    QWORD PTR [rsp+0x8],rax
  40c77e:	lea    rax,[rsp+0x2c]
  40c783:	mov    QWORD PTR [rsp+0x10],rax
  40c788:	jmp    40c832 <_start@@Base+0x9412>
  40c78d:	nop    DWORD PTR [rax]
  40c790:	lea    r8,[r14+0x8]
  40c794:	mov    rax,rbx
  40c797:	sub    rax,r8
  40c79a:	cmp    rax,0x7
  40c79e:	jbe    40c8a0 <_start@@Base+0x9480>
  40c7a4:	movbe  rax,QWORD PTR [r14+0x8]
  40c7aa:	movabs rdx,0x7461636b5f64616d
  40c7b4:	cmp    rax,rdx
  40c7b7:	jne    40c888 <_start@@Base+0x9468>
  40c7bd:	lea    r15,[r14+0x10]
  40c7c1:	mov    r10,rbx
  40c7c4:	sub    r10,r15
  40c7c7:	cmp    r10,0x7
  40c7cb:	jbe    40c950 <_start@@Base+0x9530>
  40c7d1:	movbe  rax,QWORD PTR [r14+0x10]
  40c7d7:	movabs rdx,0xffffff0000000000
  40c7e1:	and    rax,rdx
  40c7e4:	movabs rdx,0x6167650000000000
  40c7ee:	cmp    rax,rdx
  40c7f1:	jne    40c7fd <_start@@Base+0x93dd>
  40c7f3:	cmp    r10,0x3
  40c7f7:	jg     40ca30 <_start@@Base+0x9610>
  40c7fd:	mov    rdx,rbx
  40c800:	mov    rsi,r15
  40c803:	mov    rdi,rbp
  40c806:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c80b:	mov    r14,rax
  40c80e:	xchg   ax,ax
  40c810:	mov    rsi,r14
  40c813:	mov    rcx,r13
  40c816:	mov    rdx,rbx
  40c819:	mov    rdi,rbp
  40c81c:	call   406270 <_start@@Base+0x2e50>
  40c821:	mov    r11d,DWORD PTR [rsp+0x24]
  40c826:	mov    r14,rax
  40c829:	test   r11d,r11d
  40c82c:	je     40c980 <_start@@Base+0x9560>
  40c832:	cmp    rbx,r14
  40c835:	je     40c872 <_start@@Base+0x9452>
  40c837:	movzx  eax,BYTE PTR [r14]
  40c83b:	cmp    al,0x22
  40c83d:	je     40c8b0 <_start@@Base+0x9490>
  40c83f:	cmp    al,0x2e
  40c841:	je     40c960 <_start@@Base+0x9540>
  40c847:	mov    DWORD PTR [rbp+0x14],0x1
  40c84e:	mov    rax,rbx
  40c851:	sub    rax,r14
  40c854:	cmp    rax,0x7
  40c858:	jbe    40c8d0 <_start@@Base+0x94b0>
  40c85a:	movbe  rax,QWORD PTR [r14]
  40c85f:	movabs rdx,0x73776f72645f6174
  40c869:	cmp    rax,rdx
  40c86c:	je     40c790 <_start@@Base+0x9370>
  40c872:	mov    rsi,r14
  40c875:	mov    rdx,rbx
  40c878:	mov    rdi,rbp
  40c87b:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c880:	mov    r14,rax
  40c883:	jmp    40c810 <_start@@Base+0x93f0>
  40c885:	nop    DWORD PTR [rax]
  40c888:	mov    rdx,rbx
  40c88b:	mov    rsi,r8
  40c88e:	mov    rdi,rbp
  40c891:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40c896:	mov    r14,rax
  40c899:	jmp    40c810 <_start@@Base+0x93f0>
  40c89e:	xchg   ax,ax
  40c8a0:	mov    rsi,rbx
  40c8a3:	mov    rdi,r8
  40c8a6:	call   403530 <_start@@Base+0x110>
  40c8ab:	jmp    40c7aa <_start@@Base+0x938a>
  40c8b0:	add    r14,0x1
  40c8b4:	mov    rax,rbx
  40c8b7:	mov    DWORD PTR [rbp+0x14],0x0
  40c8be:	sub    rax,r14
  40c8c1:	cmp    rax,0x7
  40c8c5:	ja     40c85a <_start@@Base+0x943a>
  40c8c7:	nop    WORD PTR [rax+rax*1+0x0]
  40c8d0:	lea    rdi,[rip+0xd7fd]        # 41a0d4 <_IO_stdin_used@@Base+0xd4>
  40c8d7:	movsxd rax,DWORD PTR [rdi+rax*4]
  40c8db:	add    rax,rdi
  40c8de:	jmp    rax
  40c8e0:	movsx  rcx,BYTE PTR [r14+0x6]
  40c8e5:	shl    rcx,0x8
  40c8e9:	movsx  rdx,BYTE PTR [r14+0x5]
  40c8ee:	mov    rax,rdx
  40c8f1:	shl    rax,0x10
  40c8f5:	or     rcx,rax
  40c8f8:	movsx  rdx,BYTE PTR [r14+0x4]
  40c8fd:	mov    rax,rdx
  40c900:	shl    rax,0x18
  40c904:	or     rax,rcx
  40c907:	movsx  rdx,BYTE PTR [r14+0x3]
  40c90c:	mov    rcx,rdx
  40c90f:	shl    rcx,0x20
  40c913:	or     rax,rcx
  40c916:	movsx  rdx,BYTE PTR [r14+0x2]
  40c91b:	mov    rcx,rdx
  40c91e:	shl    rcx,0x28
  40c922:	or     rcx,rax
  40c925:	movsx  rdx,BYTE PTR [r14+0x1]
  40c92a:	mov    rax,rdx
  40c92d:	shl    rax,0x30
  40c931:	or     rcx,rax
  40c934:	movsx  rdx,BYTE PTR [r14]
  40c938:	mov    rax,rdx
  40c93b:	shl    rax,0x38
  40c93f:	or     rax,rcx
  40c942:	jmp    40c85f <_start@@Base+0x943f>
  40c947:	nop    WORD PTR [rax+rax*1+0x0]
  40c950:	mov    rsi,rbx
  40c953:	mov    rdi,r15
  40c956:	call   403530 <_start@@Base+0x110>
  40c95b:	jmp    40c7d7 <_start@@Base+0x93b7>
  40c960:	mov    rsi,r14
  40c963:	mov    ecx,0x5
  40c968:	mov    rdx,rbx
  40c96b:	mov    rdi,rbp
  40c96e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c973:	mov    r14,rax
  40c976:	jmp    40c84e <_start@@Base+0x942e>
  40c97b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c980:	mov    r10d,DWORD PTR [rbp+0x20]
  40c984:	test   r10d,r10d
  40c987:	je     40cc27 <_start@@Base+0x9807>
  40c98d:	mov    rsi,r14
  40c990:	mov    ecx,0x21
  40c995:	mov    rdx,rbx
  40c998:	mov    rdi,rbp
  40c99b:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c9a0:	mov    rsi,rax
  40c9a3:	jmp    40c454 <_start@@Base+0x9034>
  40c9a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c9b0:	mov    r8,QWORD PTR [rsp+0x18]
  40c9b5:	lea    rcx,[rip+0x148a4]        # 421260 <__data_start@@Base+0x1a0>
  40c9bc:	mov    rsi,r15
  40c9bf:	mov    rdx,rbx
  40c9c2:	mov    rdi,rbp
  40c9c5:	call   405130 <_start@@Base+0x1d10>
  40c9ca:	cmp    rax,r15
  40c9cd:	mov    rsi,rax
  40c9d0:	je     40c9db <_start@@Base+0x95bb>
  40c9d2:	cmp    rbx,rax
  40c9d5:	jne    40cb0c <_start@@Base+0x96ec>
  40c9db:	mov    ecx,0x21
  40c9e0:	mov    rdx,rbx
  40c9e3:	mov    rdi,rbp
  40c9e6:	call   416820 <flatcc_json_parser_set_error@@Base>
  40c9eb:	mov    rsi,rax
  40c9ee:	xchg   ax,ax
  40c9f0:	cmp    rbx,rsi
  40c9f3:	je     40ca12 <_start@@Base+0x95f2>
  40c9f5:	mov    rdi,QWORD PTR [rbp+0x0]
  40c9f9:	mov    QWORD PTR [rsp],rsi
  40c9fd:	call   4126e0 <flatcc_builder_end_struct@@Base>
  40ca02:	test   eax,eax
  40ca04:	mov    DWORD PTR [r12],eax
  40ca08:	mov    rsi,QWORD PTR [rsp]
  40ca0c:	jne    40c3c8 <_start@@Base+0x8fa8>
  40ca12:	mov    ecx,0x21
  40ca17:	mov    rdx,rbx
  40ca1a:	mov    rdi,rbp
  40ca1d:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ca22:	mov    rsi,rax
  40ca25:	jmp    40c454 <_start@@Base+0x9034>
  40ca2a:	nop    WORD PTR [rax+rax*1+0x0]
  40ca30:	mov    ecx,0x3
  40ca35:	mov    rdx,rbx
  40ca38:	mov    rsi,r15
  40ca3b:	mov    rdi,rbp
  40ca3e:	call   4081b0 <_start@@Base+0x4d90>
  40ca43:	cmp    r15,rax
  40ca46:	mov    r10,rax
  40ca49:	je     40c7fd <_start@@Base+0x93dd>
  40ca4f:	cmp    rbx,rax
  40ca52:	mov    DWORD PTR [rsp+0x28],0x0
  40ca5a:	mov    QWORD PTR [rsp+0x30],0x0
  40ca63:	mov    DWORD PTR [rsp+0x2c],0x0
  40ca6b:	je     40cc90 <_start@@Base+0x9870>
  40ca71:	mov    r8,QWORD PTR [rsp+0x8]
  40ca76:	mov    rcx,QWORD PTR [rsp+0x10]
  40ca7b:	mov    rdx,rbx
  40ca7e:	mov    rsi,rax
  40ca81:	mov    rdi,rbp
  40ca84:	mov    QWORD PTR [rsp],rax
  40ca88:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40ca8d:	mov    r10,QWORD PTR [rsp]
  40ca91:	mov    r14,rax
  40ca94:	cmp    r10,rax
  40ca97:	je     40cc90 <_start@@Base+0x9870>
  40ca9d:	mov    r15d,DWORD PTR [rsp+0x2c]
  40caa2:	mov    rax,QWORD PTR [rsp+0x30]
  40caa7:	test   r15d,r15d
  40caaa:	je     40cb20 <_start@@Base+0x9700>
  40caac:	mov    edx,0x80000000
  40cab1:	mov    ecx,0x8
  40cab6:	cmp    rax,rdx
  40cab9:	ja     40cc4d <_start@@Base+0x982d>
  40cabf:	mov    edx,eax
  40cac1:	neg    edx
  40cac3:	mov    DWORD PTR [rsp+0x28],edx
  40cac7:	jmp    40cb32 <_start@@Base+0x9712>
  40cac9:	nop    DWORD PTR [rax+0x0]
  40cad0:	mov    rsi,r14
  40cad3:	mov    rdx,rbx
  40cad6:	mov    rdi,rbp
  40cad9:	call   417760 <flatcc_json_parser_generic_json@@Base>
  40cade:	mov    rsi,rax
  40cae1:	jmp    40c3c8 <_start@@Base+0x8fa8>
  40cae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40caf0:	mov    ecx,0x8
  40caf5:	mov    rdx,rbx
  40caf8:	mov    rdi,rbp
  40cafb:	call   416820 <flatcc_json_parser_set_error@@Base>
  40cb00:	mov    rsi,rax
  40cb03:	cmp    r15,rsi
  40cb06:	je     40c9b0 <_start@@Base+0x9590>
  40cb0c:	movzx  eax,WORD PTR [rsp+0x24]
  40cb11:	jmp    40c706 <_start@@Base+0x92e6>
  40cb16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cb20:	cmp    rax,0x7fffffff
  40cb26:	ja     40cc44 <_start@@Base+0x9824>
  40cb2c:	mov    edx,eax
  40cb2e:	mov    DWORD PTR [rsp+0x28],eax
  40cb32:	test   edx,edx
  40cb34:	jne    40cb40 <_start@@Base+0x9720>
  40cb36:	test   BYTE PTR [rbp+0x10],0x2
  40cb3a:	je     40c810 <_start@@Base+0x93f0>
  40cb40:	mov    rdi,QWORD PTR [rbp+0x0]
  40cb44:	xor    esi,esi
  40cb46:	mov    ecx,0x4
  40cb4b:	mov    edx,0x4
  40cb50:	call   414920 <flatcc_builder_table_add@@Base>
  40cb55:	test   rax,rax
  40cb58:	je     40c98d <_start@@Base+0x956d>
  40cb5e:	mov    edx,DWORD PTR [rsp+0x28]
  40cb62:	mov    DWORD PTR [rax],edx
  40cb64:	jmp    40c810 <_start@@Base+0x93f0>
  40cb69:	nop    DWORD PTR [rax+0x0]
  40cb70:	xor    ecx,ecx
  40cb72:	jmp    40c619 <_start@@Base+0x91f9>
  40cb77:	nop    WORD PTR [rax+rax*1+0x0]
  40cb80:	xor    ecx,ecx
  40cb82:	jmp    40c628 <_start@@Base+0x9208>
  40cb87:	nop    WORD PTR [rax+rax*1+0x0]
  40cb90:	xor    eax,eax
  40cb92:	jmp    40c637 <_start@@Base+0x9217>
  40cb97:	nop    WORD PTR [rax+rax*1+0x0]
  40cba0:	xor    eax,eax
  40cba2:	jmp    40c646 <_start@@Base+0x9226>
  40cba7:	nop    WORD PTR [rax+rax*1+0x0]
  40cbb0:	xor    ecx,ecx
  40cbb2:	jmp    40c655 <_start@@Base+0x9235>
  40cbb7:	nop    WORD PTR [rax+rax*1+0x0]
  40cbc0:	xor    ecx,ecx
  40cbc2:	jmp    40c664 <_start@@Base+0x9244>
  40cbc7:	nop    WORD PTR [rax+rax*1+0x0]
  40cbd0:	xor    ecx,ecx
  40cbd2:	jmp    40c8e9 <_start@@Base+0x94c9>
  40cbd7:	nop    WORD PTR [rax+rax*1+0x0]
  40cbe0:	xor    ecx,ecx
  40cbe2:	jmp    40c8f8 <_start@@Base+0x94d8>
  40cbe7:	nop    WORD PTR [rax+rax*1+0x0]
  40cbf0:	xor    eax,eax
  40cbf2:	jmp    40c907 <_start@@Base+0x94e7>
  40cbf7:	nop    WORD PTR [rax+rax*1+0x0]
  40cc00:	xor    eax,eax
  40cc02:	jmp    40c916 <_start@@Base+0x94f6>
  40cc07:	nop    WORD PTR [rax+rax*1+0x0]
  40cc10:	xor    ecx,ecx
  40cc12:	jmp    40c925 <_start@@Base+0x9505>
  40cc17:	nop    WORD PTR [rax+rax*1+0x0]
  40cc20:	xor    ecx,ecx
  40cc22:	jmp    40c934 <_start@@Base+0x9514>
  40cc27:	mov    rdi,QWORD PTR [rbp+0x0]
  40cc2b:	call   413a40 <flatcc_builder_end_table@@Base>
  40cc30:	test   eax,eax
  40cc32:	mov    DWORD PTR [r12],eax
  40cc36:	mov    rsi,r14
  40cc39:	je     40c98d <_start@@Base+0x956d>
  40cc3f:	jmp    40c454 <_start@@Base+0x9034>
  40cc44:	mov    QWORD PTR [rsp],r10
  40cc48:	mov    ecx,0x7
  40cc4d:	mov    rsi,r14
  40cc50:	mov    rdx,rbx
  40cc53:	mov    rdi,rbp
  40cc56:	call   416820 <flatcc_json_parser_set_error@@Base>
  40cc5b:	mov    r10,QWORD PTR [rsp]
  40cc5f:	mov    r14,rax
  40cc62:	cmp    r10,rax
  40cc65:	je     40cc90 <_start@@Base+0x9870>
  40cc67:	mov    edx,DWORD PTR [rsp+0x28]
  40cc6b:	jmp    40cb32 <_start@@Base+0x9712>
  40cc70:	mov    ecx,0x7
  40cc75:	mov    rdx,rbx
  40cc78:	mov    rdi,rbp
  40cc7b:	call   416820 <flatcc_json_parser_set_error@@Base>
  40cc80:	mov    rsi,rax
  40cc83:	jmp    40cb03 <_start@@Base+0x96e3>
  40cc88:	mov    rsi,r14
  40cc8b:	jmp    40ca12 <_start@@Base+0x95f2>
  40cc90:	mov    r8,QWORD PTR [rsp+0x18]
  40cc95:	lea    rcx,[rip+0x145e4]        # 421280 <__data_start@@Base+0x1c0>
  40cc9c:	mov    rsi,r10
  40cc9f:	mov    rdx,rbx
  40cca2:	mov    rdi,rbp
  40cca5:	mov    QWORD PTR [rsp],r10
  40cca9:	call   405370 <_start@@Base+0x1f50>
  40ccae:	mov    r10,QWORD PTR [rsp]
  40ccb2:	mov    r14,rax
  40ccb5:	cmp    rax,r10
  40ccb8:	je     40c98d <_start@@Base+0x956d>
  40ccbe:	cmp    rbx,rax
  40ccc1:	jne    40cc67 <_start@@Base+0x9847>
  40ccc3:	jmp    40c98d <_start@@Base+0x956d>
  40ccc8:	call   403080 <__stack_chk_fail@plt>
  40cccd:	nop    DWORD PTR [rax]
  40ccd0:	push   r15
  40ccd2:	push   r14
  40ccd4:	mov    r15,rsi
  40ccd7:	push   r13
  40ccd9:	push   r12
  40ccdb:	mov    esi,0x9
  40cce0:	push   rbp
  40cce1:	push   rbx
  40cce2:	mov    rbp,rdi
  40cce5:	mov    rbx,rdx
  40cce8:	sub    rsp,0x58
  40ccec:	mov    DWORD PTR [rcx],0x0
  40ccf2:	mov    rdi,QWORD PTR fs:0x28
  40ccfb:	mov    QWORD PTR [rsp+0x48],rdi
  40cd00:	xor    edi,edi
  40cd02:	mov    rdi,QWORD PTR [rbp+0x0]
  40cd06:	mov    QWORD PTR [rsp+0x18],rcx
  40cd0b:	call   413080 <flatcc_builder_start_table@@Base>
  40cd10:	test   eax,eax
  40cd12:	jne    40cea0 <_start@@Base+0x9a80>
  40cd18:	lea    rcx,[rsp+0x2c]
  40cd1d:	mov    rsi,r15
  40cd20:	mov    rdi,rbp
  40cd23:	mov    rdx,rbx
  40cd26:	lea    r13,[rsp+0x40]
  40cd2b:	call   4048f0 <_start@@Base+0x14d0>
  40cd30:	lea    rdi,[rsp+0x38]
  40cd35:	mov    r15,rax
  40cd38:	mov    eax,DWORD PTR [rsp+0x2c]
  40cd3c:	mov    QWORD PTR [rsp+0x10],rdi
  40cd41:	lea    rdi,[rsp+0x34]
  40cd46:	mov    QWORD PTR [rsp],rdi
  40cd4a:	nop    WORD PTR [rax+rax*1+0x0]
  40cd50:	test   eax,eax
  40cd52:	je     40d0ab <_start@@Base+0x9c8b>
  40cd58:	lea    r12,[rsp+0x30]
  40cd5d:	cmp    rbx,r15
  40cd60:	je     40ce10 <_start@@Base+0x99f0>
  40cd66:	movzx  eax,BYTE PTR [r15]
  40cd6a:	cmp    al,0x22
  40cd6c:	je     40d060 <_start@@Base+0x9c40>
  40cd72:	cmp    al,0x2e
  40cd74:	je     40d4d0 <_start@@Base+0xa0b0>
  40cd7a:	mov    rdx,rbx
  40cd7d:	mov    DWORD PTR [rbp+0x14],0x1
  40cd84:	sub    rdx,r15
  40cd87:	cmp    rdx,0x7
  40cd8b:	jbe    40cf90 <_start@@Base+0x9b70>
  40cd91:	movbe  rax,QWORD PTR [r15]
  40cd96:	movabs rcx,0x63636362ffffffff
  40cda0:	cmp    rax,rcx
  40cda3:	ja     40cee0 <_start@@Base+0x9ac0>
  40cda9:	movabs rcx,0x6161616131323334
  40cdb3:	cmp    rax,rcx
  40cdb6:	je     40d1b0 <_start@@Base+0x9d90>
  40cdbc:	movabs rcx,0xffffffff00000000
  40cdc6:	movabs rsi,0x6161616100000000
  40cdd0:	and    rcx,rax
  40cdd3:	cmp    rcx,rsi
  40cdd6:	je     40d310 <_start@@Base+0x9ef0>
  40cddc:	movabs rsi,0x6262626231323334
  40cde6:	cmp    rax,rsi
  40cde9:	je     40d3e0 <_start@@Base+0x9fc0>
  40cdef:	movabs rax,0x6262626200000000
  40cdf9:	cmp    rcx,rax
  40cdfc:	jne    40ce10 <_start@@Base+0x99f0>
  40cdfe:	cmp    rdx,0x4
  40ce02:	jg     40d7f8 <_start@@Base+0xa3d8>
  40ce08:	nop    DWORD PTR [rax+rax*1+0x0]
  40ce10:	mov    rdx,rbx
  40ce13:	mov    rsi,r15
  40ce16:	mov    rdi,rbp
  40ce19:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ce1e:	mov    r14,rax
  40ce21:	mov    rax,rbx
  40ce24:	sub    rax,r14
  40ce27:	cmp    rax,0x1
  40ce2b:	jle    40ce39 <_start@@Base+0x9a19>
  40ce2d:	cmp    BYTE PTR [r14],0x20
  40ce31:	jg     40ce4a <_start@@Base+0x9a2a>
  40ce33:	je     40d080 <_start@@Base+0x9c60>
  40ce39:	mov    rsi,r14
  40ce3c:	mov    rdx,rbx
  40ce3f:	mov    rdi,rbp
  40ce42:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ce47:	mov    r14,rax
  40ce4a:	cmp    rbx,r14
  40ce4d:	je     40d0a0 <_start@@Base+0x9c80>
  40ce53:	cmp    BYTE PTR [r14],0x2c
  40ce57:	je     40d2c0 <_start@@Base+0x9ea0>
  40ce5d:	mov    DWORD PTR [rsp+0x2c],0x0
  40ce65:	cmp    BYTE PTR [r14],0x7d
  40ce69:	je     40d020 <_start@@Base+0x9c00>
  40ce6f:	mov    ecx,0xa
  40ce74:	mov    rdx,rbx
  40ce77:	mov    rsi,r14
  40ce7a:	mov    rdi,rbp
  40ce7d:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ce82:	mov    r15,rax
  40ce85:	mov    eax,DWORD PTR [rsp+0x2c]
  40ce89:	test   eax,eax
  40ce8b:	jne    40cd58 <_start@@Base+0x9938>
  40ce91:	mov    eax,DWORD PTR [rbp+0x20]
  40ce94:	test   eax,eax
  40ce96:	je     40d0b6 <_start@@Base+0x9c96>
  40ce9c:	nop    DWORD PTR [rax+0x0]
  40cea0:	mov    ecx,0x21
  40cea5:	mov    rdx,rbx
  40cea8:	mov    rsi,r15
  40ceab:	mov    rdi,rbp
  40ceae:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ceb3:	mov    rdi,QWORD PTR [rsp+0x48]
  40ceb8:	xor    rdi,QWORD PTR fs:0x28
  40cec1:	jne    40db32 <_start@@Base+0xa712>
  40cec7:	add    rsp,0x58
  40cecb:	pop    rbx
  40cecc:	pop    rbp
  40cecd:	pop    r12
  40cecf:	pop    r13
  40ced1:	pop    r14
  40ced3:	pop    r15
  40ced5:	ret    
  40ced6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cee0:	movabs rcx,0x6363636331323334
  40ceea:	cmp    rax,rcx
  40ceed:	je     40d0e0 <_start@@Base+0x9cc0>
  40cef3:	movabs rcx,0xffffffff00000000
  40cefd:	movabs rsi,0x6363636300000000
  40cf07:	and    rcx,rax
  40cf0a:	cmp    rcx,rsi
  40cf0d:	je     40d370 <_start@@Base+0x9f50>
  40cf13:	movabs rcx,0x6464646431323334
  40cf1d:	cmp    rax,rcx
  40cf20:	jne    40ce10 <_start@@Base+0x99f0>
  40cf26:	cmp    rdx,0x8
  40cf2a:	jg     40d4f8 <_start@@Base+0xa0d8>
  40cf30:	lea    r14,[r15+0x8]
  40cf34:	mov    r10,rbx
  40cf37:	sub    r10,r14
  40cf3a:	cmp    r10,0x7
  40cf3e:	jbe    40d858 <_start@@Base+0xa438>
  40cf44:	movbe  rax,QWORD PTR [r15+0x8]
  40cf4a:	movabs rdx,0xff00000000000000
  40cf54:	and    rax,rdx
  40cf57:	movabs rdx,0x3500000000000000
  40cf61:	cmp    rax,rdx
  40cf64:	je     40d750 <_start@@Base+0xa330>
  40cf6a:	nop    WORD PTR [rax+rax*1+0x0]
  40cf70:	mov    rsi,r14
  40cf73:	mov    rdx,rbx
  40cf76:	mov    rdi,rbp
  40cf79:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40cf7e:	mov    r14,rax
  40cf81:	jmp    40ce21 <_start@@Base+0x9a01>
  40cf86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cf90:	cmp    rdx,0x8
  40cf94:	ja     40ce10 <_start@@Base+0x99f0>
  40cf9a:	lea    rcx,[rip+0xd153]        # 41a0f4 <_IO_stdin_used@@Base+0xf4>
  40cfa1:	movsxd rax,DWORD PTR [rcx+rdx*4]
  40cfa5:	add    rax,rcx
  40cfa8:	jmp    rax
  40cfaa:	nop    WORD PTR [rax+rax*1+0x0]
  40cfb0:	movsx  rax,BYTE PTR [r15+0x7]
  40cfb5:	movsx  rsi,BYTE PTR [r15+0x6]
  40cfba:	shl    rsi,0x8
  40cfbe:	mov    rcx,rsi
  40cfc1:	or     rcx,rax
  40cfc4:	movsx  rsi,BYTE PTR [r15+0x5]
  40cfc9:	mov    rax,rsi
  40cfcc:	shl    rax,0x10
  40cfd0:	or     rcx,rax
  40cfd3:	movsx  rsi,BYTE PTR [r15+0x4]
  40cfd8:	mov    rax,rsi
  40cfdb:	shl    rax,0x18
  40cfdf:	or     rax,rcx
  40cfe2:	movsx  rsi,BYTE PTR [r15+0x3]
  40cfe7:	shl    rsi,0x20
  40cfeb:	or     rax,rsi
  40cfee:	movsx  rsi,BYTE PTR [r15+0x2]
  40cff3:	shl    rsi,0x28
  40cff7:	mov    rcx,rsi
  40cffa:	or     rcx,rax
  40cffd:	movsx  rsi,BYTE PTR [r15+0x1]
  40d002:	mov    rax,rsi
  40d005:	shl    rax,0x30
  40d009:	or     rcx,rax
  40d00c:	movsx  rax,BYTE PTR [r15]
  40d010:	shl    rax,0x38
  40d014:	or     rax,rcx
  40d017:	jmp    40cd96 <_start@@Base+0x9976>
  40d01c:	nop    DWORD PTR [rax+0x0]
  40d020:	lea    r15,[r14+0x1]
  40d024:	mov    rax,rbx
  40d027:	sub    rax,r15
  40d02a:	cmp    rax,0x1
  40d02e:	jle    40d03d <_start@@Base+0x9c1d>
  40d030:	cmp    BYTE PTR [r14+0x1],0x20
  40d035:	jg     40d0ab <_start@@Base+0x9c8b>
  40d037:	je     40d7e0 <_start@@Base+0xa3c0>
  40d03d:	mov    rsi,r15
  40d040:	mov    rdx,rbx
  40d043:	mov    rdi,rbp
  40d046:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40d04b:	mov    r15,rax
  40d04e:	mov    eax,DWORD PTR [rsp+0x2c]
  40d052:	jmp    40cd50 <_start@@Base+0x9930>
  40d057:	nop    WORD PTR [rax+rax*1+0x0]
  40d060:	add    r15,0x1
  40d064:	mov    rdx,rbx
  40d067:	mov    DWORD PTR [rbp+0x14],0x0
  40d06e:	sub    rdx,r15
  40d071:	jmp    40cd87 <_start@@Base+0x9967>
  40d076:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d080:	cmp    BYTE PTR [r14+0x1],0x20
  40d085:	jle    40ce39 <_start@@Base+0x9a19>
  40d08b:	add    r14,0x1
  40d08f:	cmp    rbx,r14
  40d092:	jne    40ce53 <_start@@Base+0x9a33>
  40d098:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0a0:	mov    DWORD PTR [rsp+0x2c],0x0
  40d0a8:	mov    r15,rbx
  40d0ab:	mov    eax,DWORD PTR [rbp+0x20]
  40d0ae:	test   eax,eax
  40d0b0:	jne    40cea0 <_start@@Base+0x9a80>
  40d0b6:	mov    rdi,QWORD PTR [rbp+0x0]
  40d0ba:	call   413a40 <flatcc_builder_end_table@@Base>
  40d0bf:	mov    edx,eax
  40d0c1:	mov    rax,QWORD PTR [rsp+0x18]
  40d0c6:	test   edx,edx
  40d0c8:	mov    DWORD PTR [rax],edx
  40d0ca:	mov    rax,r15
  40d0cd:	je     40cea0 <_start@@Base+0x9a80>
  40d0d3:	jmp    40ceb3 <_start@@Base+0x9a93>
  40d0d8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0e0:	cmp    rdx,0x8
  40d0e4:	jg     40d5c8 <_start@@Base+0xa1a8>
  40d0ea:	lea    r14,[r15+0x8]
  40d0ee:	mov    r10,rbx
  40d0f1:	sub    r10,r14
  40d0f4:	cmp    r10,0x7
  40d0f8:	jbe    40d888 <_start@@Base+0xa468>
  40d0fe:	movbe  rax,QWORD PTR [r15+0x8]
  40d104:	movabs rdx,0xff00000000000000
  40d10e:	and    rax,rdx
  40d111:	movabs rdx,0x3500000000000000
  40d11b:	cmp    rax,rdx
  40d11e:	jne    40cf70 <_start@@Base+0x9b50>
  40d124:	cmp    r10,0x1
  40d128:	jle    40cf70 <_start@@Base+0x9b50>
  40d12e:	mov    ecx,0x1
  40d133:	mov    rdx,rbx
  40d136:	mov    rsi,r14
  40d139:	mov    rdi,rbp
  40d13c:	call   4081b0 <_start@@Base+0x4d90>
  40d141:	cmp    r14,rax
  40d144:	mov    r15,rax
  40d147:	je     40cf70 <_start@@Base+0x9b50>
  40d14d:	mov    rcx,r13
  40d150:	mov    rdx,rbx
  40d153:	mov    rsi,rax
  40d156:	mov    rdi,rbp
  40d159:	mov    DWORD PTR [rsp+0x40],0x0
  40d161:	call   404470 <_start@@Base+0x1050>
  40d166:	cmp    rax,r15
  40d169:	mov    r14,rax
  40d16c:	je     40dac8 <_start@@Base+0xa6a8>
  40d172:	mov    edi,DWORD PTR [rsp+0x40]
  40d176:	test   edi,edi
  40d178:	jne    40d184 <_start@@Base+0x9d64>
  40d17a:	test   BYTE PTR [rbp+0x10],0x2
  40d17e:	je     40ce21 <_start@@Base+0x9a01>
  40d184:	mov    rdi,QWORD PTR [rbp+0x0]
  40d188:	mov    ecx,0x4
  40d18d:	mov    edx,0x4
  40d192:	mov    esi,0x6
  40d197:	call   414920 <flatcc_builder_table_add@@Base>
  40d19c:	test   rax,rax
  40d19f:	jne    40d7d1 <_start@@Base+0xa3b1>
  40d1a5:	nop    DWORD PTR [rax]
  40d1a8:	mov    r15,r14
  40d1ab:	jmp    40cea0 <_start@@Base+0x9a80>
  40d1b0:	lea    r14,[r15+0x8]
  40d1b4:	mov    r10,rbx
  40d1b7:	sub    r10,r14
  40d1ba:	cmp    r10,0x7
  40d1be:	jbe    40d4c0 <_start@@Base+0xa0a0>
  40d1c4:	movbe  rax,QWORD PTR [r15+0x8]
  40d1ca:	movabs rdx,0xff00000000000000
  40d1d4:	and    rax,rdx
  40d1d7:	movabs rdx,0x3500000000000000
  40d1e1:	cmp    rax,rdx
  40d1e4:	jne    40cf70 <_start@@Base+0x9b50>
  40d1ea:	cmp    r10,0x1
  40d1ee:	jle    40cf70 <_start@@Base+0x9b50>
  40d1f4:	mov    ecx,0x1
  40d1f9:	mov    rdx,rbx
  40d1fc:	mov    rsi,r14
  40d1ff:	mov    rdi,rbp
  40d202:	call   4081b0 <_start@@Base+0x4d90>
  40d207:	cmp    r14,rax
  40d20a:	mov    r15,rax
  40d20d:	je     40cf70 <_start@@Base+0x9b50>
  40d213:	cmp    rbx,rax
  40d216:	mov    DWORD PTR [rsp+0x34],0x0
  40d21e:	mov    QWORD PTR [rsp+0x40],0x0
  40d227:	mov    DWORD PTR [rsp+0x38],0x0
  40d22f:	je     40da90 <_start@@Base+0xa670>
  40d235:	mov    rcx,QWORD PTR [rsp+0x10]
  40d23a:	mov    r8,r13
  40d23d:	mov    rdx,rbx
  40d240:	mov    rsi,rax
  40d243:	mov    rdi,rbp
  40d246:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40d24b:	cmp    r15,rax
  40d24e:	mov    r14,rax
  40d251:	je     40da90 <_start@@Base+0xa670>
  40d257:	mov    eax,DWORD PTR [rsp+0x38]
  40d25b:	mov    ecx,0x8
  40d260:	test   eax,eax
  40d262:	jne    40d8b9 <_start@@Base+0xa499>
  40d268:	mov    rax,QWORD PTR [rsp+0x40]
  40d26d:	mov    edx,0xffffffff
  40d272:	cmp    rax,rdx
  40d275:	ja     40d8b4 <_start@@Base+0xa494>
  40d27b:	mov    edx,eax
  40d27d:	mov    DWORD PTR [rsp+0x34],eax
  40d281:	test   edx,edx
  40d283:	jne    40d28f <_start@@Base+0x9e6f>
  40d285:	test   BYTE PTR [rbp+0x10],0x2
  40d289:	je     40ce21 <_start@@Base+0x9a01>
  40d28f:	mov    rdi,QWORD PTR [rbp+0x0]
  40d293:	mov    ecx,0x4
  40d298:	mov    edx,0x4
  40d29d:	mov    esi,0x1
  40d2a2:	call   414920 <flatcc_builder_table_add@@Base>
  40d2a7:	test   rax,rax
  40d2aa:	je     40d1a8 <_start@@Base+0x9d88>
  40d2b0:	mov    edx,DWORD PTR [rsp+0x34]
  40d2b4:	mov    DWORD PTR [rax],edx
  40d2b6:	jmp    40ce21 <_start@@Base+0x9a01>
  40d2bb:	nop    DWORD PTR [rax+rax*1+0x0]
  40d2c0:	lea    r15,[r14+0x1]
  40d2c4:	mov    rax,rbx
  40d2c7:	sub    rax,r15
  40d2ca:	cmp    rax,0x1
  40d2ce:	jle    40d2dd <_start@@Base+0x9ebd>
  40d2d0:	cmp    BYTE PTR [r14+0x1],0x20
  40d2d5:	jg     40d2ee <_start@@Base+0x9ece>
  40d2d7:	je     40d8a0 <_start@@Base+0xa480>
  40d2dd:	mov    rsi,r15
  40d2e0:	mov    rdx,rbx
  40d2e3:	mov    rdi,rbp
  40d2e6:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40d2eb:	mov    r15,rax
  40d2ee:	cmp    rbx,r15
  40d2f1:	je     40da20 <_start@@Base+0xa600>
  40d2f7:	cmp    BYTE PTR [r15],0x7d
  40d2fb:	je     40d948 <_start@@Base+0xa528>
  40d301:	mov    DWORD PTR [rsp+0x2c],0x1
  40d309:	jmp    40cd5d <_start@@Base+0x993d>
  40d30e:	xchg   ax,ax
  40d310:	cmp    rdx,0x4
  40d314:	jle    40ce10 <_start@@Base+0x99f0>
  40d31a:	mov    rsi,r15
  40d31d:	mov    ecx,0x4
  40d322:	mov    rdx,rbx
  40d325:	mov    rdi,rbp
  40d328:	call   4081b0 <_start@@Base+0x4d90>
  40d32d:	cmp    rax,r15
  40d330:	mov    rsi,rax
  40d333:	je     40ce10 <_start@@Base+0x99f0>
  40d339:	mov    rcx,r12
  40d33c:	mov    rdx,rbx
  40d33f:	mov    rdi,rbp
  40d342:	call   418880 <flatcc_json_parser_build_string@@Base>
  40d347:	mov    r15d,DWORD PTR [rsp+0x30]
  40d34c:	mov    r14,rax
  40d34f:	test   r15d,r15d
  40d352:	je     40d1a8 <_start@@Base+0x9d88>
  40d358:	mov    rdi,QWORD PTR [rbp+0x0]
  40d35c:	xor    esi,esi
  40d35e:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40d363:	test   rax,rax
  40d366:	jne    40d3cd <_start@@Base+0x9fad>
  40d368:	jmp    40d1a8 <_start@@Base+0x9d88>
  40d36d:	nop    DWORD PTR [rax]
  40d370:	cmp    rdx,0x4
  40d374:	jle    40ce10 <_start@@Base+0x99f0>
  40d37a:	mov    rsi,r15
  40d37d:	mov    ecx,0x4
  40d382:	mov    rdx,rbx
  40d385:	mov    rdi,rbp
  40d388:	call   4081b0 <_start@@Base+0x4d90>
  40d38d:	cmp    rax,r15
  40d390:	mov    rsi,rax
  40d393:	je     40ce10 <_start@@Base+0x99f0>
  40d399:	mov    rcx,r12
  40d39c:	mov    rdx,rbx
  40d39f:	mov    rdi,rbp
  40d3a2:	call   418880 <flatcc_json_parser_build_string@@Base>
  40d3a7:	mov    esi,DWORD PTR [rsp+0x30]
  40d3ab:	mov    r14,rax
  40d3ae:	test   esi,esi
  40d3b0:	je     40d1a8 <_start@@Base+0x9d88>
  40d3b6:	mov    rdi,QWORD PTR [rbp+0x0]
  40d3ba:	mov    esi,0x4
  40d3bf:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40d3c4:	test   rax,rax
  40d3c7:	je     40d1a8 <_start@@Base+0x9d88>
  40d3cd:	mov    edx,DWORD PTR [rsp+0x30]
  40d3d1:	mov    DWORD PTR [rax],edx
  40d3d3:	jmp    40ce21 <_start@@Base+0x9a01>
  40d3d8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d3e0:	cmp    rdx,0x8
  40d3e4:	jle    40ce10 <_start@@Base+0x99f0>
  40d3ea:	mov    ecx,0x8
  40d3ef:	mov    rdx,rbx
  40d3f2:	mov    rsi,r15
  40d3f5:	mov    rdi,rbp
  40d3f8:	call   4081b0 <_start@@Base+0x4d90>
  40d3fd:	cmp    rax,r15
  40d400:	mov    r10,rax
  40d403:	je     40ce10 <_start@@Base+0x99f0>
  40d409:	cmp    rbx,rax
  40d40c:	mov    QWORD PTR [rsp+0x38],0x0
  40d415:	mov    QWORD PTR [rsp+0x40],0x0
  40d41e:	mov    DWORD PTR [rsp+0x34],0x0
  40d426:	je     40da50 <_start@@Base+0xa630>
  40d42c:	mov    rcx,QWORD PTR [rsp]
  40d430:	mov    r8,r13
  40d433:	mov    rdx,rbx
  40d436:	mov    rsi,rax
  40d439:	mov    rdi,rbp
  40d43c:	mov    QWORD PTR [rsp+0x8],rax
  40d441:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40d446:	mov    r10,QWORD PTR [rsp+0x8]
  40d44b:	mov    r14,rax
  40d44e:	cmp    r10,rax
  40d451:	je     40da50 <_start@@Base+0xa630>
  40d457:	mov    r11d,DWORD PTR [rsp+0x34]
  40d45c:	mov    rax,QWORD PTR [rsp+0x40]
  40d461:	test   r11d,r11d
  40d464:	je     40d870 <_start@@Base+0xa450>
  40d46a:	movabs rdx,0x8000000000000000
  40d474:	mov    ecx,0x8
  40d479:	cmp    rax,rdx
  40d47c:	ja     40d975 <_start@@Base+0xa555>
  40d482:	neg    rax
  40d485:	mov    QWORD PTR [rsp+0x38],rax
  40d48a:	test   rax,rax
  40d48d:	jne    40d499 <_start@@Base+0xa079>
  40d48f:	test   BYTE PTR [rbp+0x10],0x2
  40d493:	je     40ce21 <_start@@Base+0x9a01>
  40d499:	mov    rdi,QWORD PTR [rbp+0x0]
  40d49d:	mov    ecx,0x8
  40d4a2:	mov    edx,0x8
  40d4a7:	mov    esi,0x3
  40d4ac:	call   414920 <flatcc_builder_table_add@@Base>
  40d4b1:	test   rax,rax
  40d4b4:	jne    40d5b4 <_start@@Base+0xa194>
  40d4ba:	jmp    40d1a8 <_start@@Base+0x9d88>
  40d4bf:	nop
  40d4c0:	mov    rsi,rbx
  40d4c3:	mov    rdi,r14
  40d4c6:	call   403530 <_start@@Base+0x110>
  40d4cb:	jmp    40d1ca <_start@@Base+0x9daa>
  40d4d0:	mov    rdx,rbx
  40d4d3:	mov    rsi,r15
  40d4d6:	mov    ecx,0x5
  40d4db:	mov    rdi,rbp
  40d4de:	call   416820 <flatcc_json_parser_set_error@@Base>
  40d4e3:	mov    rdx,rbx
  40d4e6:	mov    r15,rax
  40d4e9:	sub    rdx,rax
  40d4ec:	jmp    40cd87 <_start@@Base+0x9967>
  40d4f1:	nop    DWORD PTR [rax+0x0]
  40d4f8:	mov    ecx,0x8
  40d4fd:	mov    rdx,rbx
  40d500:	mov    rsi,r15
  40d503:	mov    rdi,rbp
  40d506:	call   4081b0 <_start@@Base+0x4d90>
  40d50b:	cmp    rax,r15
  40d50e:	mov    r10,rax
  40d511:	je     40cf30 <_start@@Base+0x9b10>
  40d517:	cmp    rbx,rax
  40d51a:	mov    QWORD PTR [rsp+0x38],0x0
  40d523:	mov    QWORD PTR [rsp+0x40],0x0
  40d52c:	mov    DWORD PTR [rsp+0x34],0x0
  40d534:	je     40d9a0 <_start@@Base+0xa580>
  40d53a:	mov    rcx,QWORD PTR [rsp]
  40d53e:	mov    r8,r13
  40d541:	mov    rdx,rbx
  40d544:	mov    rsi,rax
  40d547:	mov    rdi,rbp
  40d54a:	mov    QWORD PTR [rsp+0x8],rax
  40d54f:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40d554:	mov    r10,QWORD PTR [rsp+0x8]
  40d559:	mov    r14,rax
  40d55c:	cmp    r10,rax
  40d55f:	je     40d9a0 <_start@@Base+0xa580>
  40d565:	mov    ecx,DWORD PTR [rsp+0x34]
  40d569:	mov    rax,QWORD PTR [rsp+0x40]
  40d56e:	test   ecx,ecx
  40d570:	jne    40d690 <_start@@Base+0xa270>
  40d576:	test   rax,rax
  40d579:	js     40d8dc <_start@@Base+0xa4bc>
  40d57f:	mov    QWORD PTR [rsp+0x38],rax
  40d584:	test   rax,rax
  40d587:	jne    40d593 <_start@@Base+0xa173>
  40d589:	test   BYTE PTR [rbp+0x10],0x2
  40d58d:	je     40ce21 <_start@@Base+0x9a01>
  40d593:	mov    rdi,QWORD PTR [rbp+0x0]
  40d597:	mov    ecx,0x8
  40d59c:	mov    edx,0x8
  40d5a1:	mov    esi,0x7
  40d5a6:	call   414920 <flatcc_builder_table_add@@Base>
  40d5ab:	test   rax,rax
  40d5ae:	je     40d1a8 <_start@@Base+0x9d88>
  40d5b4:	mov    rdx,QWORD PTR [rsp+0x38]
  40d5b9:	mov    QWORD PTR [rax],rdx
  40d5bc:	jmp    40ce21 <_start@@Base+0x9a01>
  40d5c1:	nop    DWORD PTR [rax+0x0]
  40d5c8:	mov    ecx,0x8
  40d5cd:	mov    rdx,rbx
  40d5d0:	mov    rsi,r15
  40d5d3:	mov    rdi,rbp
  40d5d6:	call   4081b0 <_start@@Base+0x4d90>
  40d5db:	cmp    rax,r15
  40d5de:	mov    r10,rax
  40d5e1:	je     40d0ea <_start@@Base+0x9cca>
  40d5e7:	cmp    rbx,rax
  40d5ea:	mov    QWORD PTR [rsp+0x38],0x0
  40d5f3:	mov    QWORD PTR [rsp+0x40],0x0
  40d5fc:	mov    DWORD PTR [rsp+0x34],0x0
  40d604:	je     40d9e0 <_start@@Base+0xa5c0>
  40d60a:	mov    rcx,QWORD PTR [rsp]
  40d60e:	mov    r8,r13
  40d611:	mov    rdx,rbx
  40d614:	mov    rsi,rax
  40d617:	mov    rdi,rbp
  40d61a:	mov    QWORD PTR [rsp+0x8],rax
  40d61f:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40d624:	mov    r10,QWORD PTR [rsp+0x8]
  40d629:	mov    r14,rax
  40d62c:	cmp    r10,rax
  40d62f:	je     40d9e0 <_start@@Base+0xa5c0>
  40d635:	mov    r8d,DWORD PTR [rsp+0x34]
  40d63a:	mov    rax,QWORD PTR [rsp+0x40]
  40d63f:	test   r8d,r8d
  40d642:	jne    40d6b8 <_start@@Base+0xa298>
  40d644:	test   rax,rax
  40d647:	js     40d90f <_start@@Base+0xa4ef>
  40d64d:	mov    QWORD PTR [rsp+0x38],rax
  40d652:	test   rax,rax
  40d655:	jne    40d661 <_start@@Base+0xa241>
  40d657:	test   BYTE PTR [rbp+0x10],0x2
  40d65b:	je     40ce21 <_start@@Base+0x9a01>
  40d661:	mov    rdi,QWORD PTR [rbp+0x0]
  40d665:	mov    ecx,0x8
  40d66a:	mov    edx,0x8
  40d66f:	mov    esi,0x5
  40d674:	call   414920 <flatcc_builder_table_add@@Base>
  40d679:	test   rax,rax
  40d67c:	jne    40d5b4 <_start@@Base+0xa194>
  40d682:	jmp    40d1a8 <_start@@Base+0x9d88>
  40d687:	nop    WORD PTR [rax+rax*1+0x0]
  40d690:	movabs rdx,0x8000000000000000
  40d69a:	mov    ecx,0x8
  40d69f:	cmp    rax,rdx
  40d6a2:	ja     40d8e6 <_start@@Base+0xa4c6>
  40d6a8:	neg    rax
  40d6ab:	mov    QWORD PTR [rsp+0x38],rax
  40d6b0:	jmp    40d584 <_start@@Base+0xa164>
  40d6b5:	nop    DWORD PTR [rax]
  40d6b8:	movabs rdx,0x8000000000000000
  40d6c2:	mov    ecx,0x8
  40d6c7:	cmp    rax,rdx
  40d6ca:	ja     40d919 <_start@@Base+0xa4f9>
  40d6d0:	neg    rax
  40d6d3:	mov    QWORD PTR [rsp+0x38],rax
  40d6d8:	jmp    40d652 <_start@@Base+0xa232>
  40d6dd:	nop    DWORD PTR [rax]
  40d6e0:	xor    eax,eax
  40d6e2:	jmp    40cfb5 <_start@@Base+0x9b95>
  40d6e7:	nop    WORD PTR [rax+rax*1+0x0]
  40d6f0:	xor    ecx,ecx
  40d6f2:	jmp    40cfc4 <_start@@Base+0x9ba4>
  40d6f7:	nop    WORD PTR [rax+rax*1+0x0]
  40d700:	xor    ecx,ecx
  40d702:	jmp    40cfd3 <_start@@Base+0x9bb3>
  40d707:	nop    WORD PTR [rax+rax*1+0x0]
  40d710:	xor    eax,eax
  40d712:	jmp    40cfe2 <_start@@Base+0x9bc2>
  40d717:	nop    WORD PTR [rax+rax*1+0x0]
  40d720:	xor    eax,eax
  40d722:	jmp    40cfee <_start@@Base+0x9bce>
  40d727:	nop    WORD PTR [rax+rax*1+0x0]
  40d730:	xor    ecx,ecx
  40d732:	jmp    40cffd <_start@@Base+0x9bdd>
  40d737:	nop    WORD PTR [rax+rax*1+0x0]
  40d740:	xor    ecx,ecx
  40d742:	jmp    40d00c <_start@@Base+0x9bec>
  40d747:	nop    WORD PTR [rax+rax*1+0x0]
  40d750:	cmp    r10,0x1
  40d754:	jle    40cf70 <_start@@Base+0x9b50>
  40d75a:	mov    ecx,0x1
  40d75f:	mov    rdx,rbx
  40d762:	mov    rsi,r14
  40d765:	mov    rdi,rbp
  40d768:	call   4081b0 <_start@@Base+0x4d90>
  40d76d:	cmp    r14,rax
  40d770:	mov    r15,rax
  40d773:	je     40cf70 <_start@@Base+0x9b50>
  40d779:	mov    rcx,r13
  40d77c:	mov    rdx,rbx
  40d77f:	mov    rsi,rax
  40d782:	mov    rdi,rbp
  40d785:	mov    DWORD PTR [rsp+0x40],0x0
  40d78d:	call   404470 <_start@@Base+0x1050>
  40d792:	cmp    rax,r15
  40d795:	mov    r14,rax
  40d798:	je     40db00 <_start@@Base+0xa6e0>
  40d79e:	mov    edx,DWORD PTR [rsp+0x40]
  40d7a2:	test   edx,edx
  40d7a4:	jne    40d7b0 <_start@@Base+0xa390>
  40d7a6:	test   BYTE PTR [rbp+0x10],0x2
  40d7aa:	je     40ce21 <_start@@Base+0x9a01>
  40d7b0:	mov    rdi,QWORD PTR [rbp+0x0]
  40d7b4:	mov    ecx,0x4
  40d7b9:	mov    edx,0x4
  40d7be:	mov    esi,0x8
  40d7c3:	call   414920 <flatcc_builder_table_add@@Base>
  40d7c8:	test   rax,rax
  40d7cb:	je     40d1a8 <_start@@Base+0x9d88>
  40d7d1:	mov    edx,DWORD PTR [rsp+0x40]
  40d7d5:	mov    DWORD PTR [rax],edx
  40d7d7:	jmp    40ce21 <_start@@Base+0x9a01>
  40d7dc:	nop    DWORD PTR [rax+0x0]
  40d7e0:	cmp    BYTE PTR [r14+0x2],0x20
  40d7e5:	jle    40d03d <_start@@Base+0x9c1d>
  40d7eb:	lea    r15,[r14+0x2]
  40d7ef:	jmp    40d0ab <_start@@Base+0x9c8b>
  40d7f4:	nop    DWORD PTR [rax+0x0]
  40d7f8:	mov    rsi,r15
  40d7fb:	mov    ecx,0x4
  40d800:	mov    rdx,rbx
  40d803:	mov    rdi,rbp
  40d806:	call   4081b0 <_start@@Base+0x4d90>
  40d80b:	cmp    rax,r15
  40d80e:	mov    rsi,rax
  40d811:	je     40ce10 <_start@@Base+0x99f0>
  40d817:	mov    rcx,r12
  40d81a:	mov    rdx,rbx
  40d81d:	mov    rdi,rbp
  40d820:	call   418880 <flatcc_json_parser_build_string@@Base>
  40d825:	mov    r9d,DWORD PTR [rsp+0x30]
  40d82a:	mov    r14,rax
  40d82d:	test   r9d,r9d
  40d830:	je     40d1a8 <_start@@Base+0x9d88>
  40d836:	mov    rdi,QWORD PTR [rbp+0x0]
  40d83a:	mov    esi,0x2
  40d83f:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40d844:	test   rax,rax
  40d847:	jne    40d3cd <_start@@Base+0x9fad>
  40d84d:	jmp    40d1a8 <_start@@Base+0x9d88>
  40d852:	nop    WORD PTR [rax+rax*1+0x0]
  40d858:	mov    rsi,rbx
  40d85b:	mov    rdi,r14
  40d85e:	call   403530 <_start@@Base+0x110>
  40d863:	jmp    40cf4a <_start@@Base+0x9b2a>
  40d868:	nop    DWORD PTR [rax+rax*1+0x0]
  40d870:	test   rax,rax
  40d873:	js     40d96b <_start@@Base+0xa54b>
  40d879:	mov    QWORD PTR [rsp+0x38],rax
  40d87e:	jmp    40d48a <_start@@Base+0xa06a>
  40d883:	nop    DWORD PTR [rax+rax*1+0x0]
  40d888:	mov    rsi,rbx
  40d88b:	mov    rdi,r14
  40d88e:	call   403530 <_start@@Base+0x110>
  40d893:	jmp    40d104 <_start@@Base+0x9ce4>
  40d898:	nop    DWORD PTR [rax+rax*1+0x0]
  40d8a0:	cmp    BYTE PTR [r14+0x2],0x20
  40d8a5:	jle    40d2dd <_start@@Base+0x9ebd>
  40d8ab:	lea    r15,[r14+0x2]
  40d8af:	jmp    40d2ee <_start@@Base+0x9ece>
  40d8b4:	mov    ecx,0x7
  40d8b9:	mov    rsi,r14
  40d8bc:	mov    rdx,rbx
  40d8bf:	mov    rdi,rbp
  40d8c2:	call   416820 <flatcc_json_parser_set_error@@Base>
  40d8c7:	cmp    r15,rax
  40d8ca:	mov    r14,rax
  40d8cd:	je     40da90 <_start@@Base+0xa670>
  40d8d3:	mov    edx,DWORD PTR [rsp+0x34]
  40d8d7:	jmp    40d281 <_start@@Base+0x9e61>
  40d8dc:	mov    QWORD PTR [rsp+0x8],r10
  40d8e1:	mov    ecx,0x7
  40d8e6:	mov    rsi,r14
  40d8e9:	mov    rdx,rbx
  40d8ec:	mov    rdi,rbp
  40d8ef:	call   416820 <flatcc_json_parser_set_error@@Base>
  40d8f4:	mov    r10,QWORD PTR [rsp+0x8]
  40d8f9:	mov    r14,rax
  40d8fc:	cmp    r10,rax
  40d8ff:	je     40d9a0 <_start@@Base+0xa580>
  40d905:	mov    rax,QWORD PTR [rsp+0x38]
  40d90a:	jmp    40d584 <_start@@Base+0xa164>
  40d90f:	mov    QWORD PTR [rsp+0x8],r10
  40d914:	mov    ecx,0x7
  40d919:	mov    rsi,r14
  40d91c:	mov    rdx,rbx
  40d91f:	mov    rdi,rbp
  40d922:	call   416820 <flatcc_json_parser_set_error@@Base>
  40d927:	mov    r10,QWORD PTR [rsp+0x8]
  40d92c:	mov    r14,rax
  40d92f:	cmp    r10,rax
  40d932:	je     40d9e0 <_start@@Base+0xa5c0>
  40d938:	mov    rax,QWORD PTR [rsp+0x38]
  40d93d:	jmp    40d652 <_start@@Base+0xa232>
  40d942:	nop    WORD PTR [rax+rax*1+0x0]
  40d948:	lea    rsi,[r15+0x1]
  40d94c:	mov    rdx,rbx
  40d94f:	mov    rdi,rbp
  40d952:	mov    DWORD PTR [rsp+0x2c],0x0
  40d95a:	call   403680 <_start@@Base+0x260>
  40d95f:	mov    r15,rax
  40d962:	mov    eax,DWORD PTR [rsp+0x2c]
  40d966:	jmp    40cd50 <_start@@Base+0x9930>
  40d96b:	mov    QWORD PTR [rsp+0x8],r10
  40d970:	mov    ecx,0x7
  40d975:	mov    rsi,r14
  40d978:	mov    rdx,rbx
  40d97b:	mov    rdi,rbp
  40d97e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40d983:	mov    r10,QWORD PTR [rsp+0x8]
  40d988:	mov    r14,rax
  40d98b:	cmp    r10,rax
  40d98e:	je     40da50 <_start@@Base+0xa630>
  40d994:	mov    rax,QWORD PTR [rsp+0x38]
  40d999:	jmp    40d48a <_start@@Base+0xa06a>
  40d99e:	xchg   ax,ax
  40d9a0:	mov    r8,QWORD PTR [rsp+0x10]
  40d9a5:	lea    rcx,[rip+0x139f4]        # 4213a0 <__data_start@@Base+0x2e0>
  40d9ac:	mov    rsi,r10
  40d9af:	mov    rdx,rbx
  40d9b2:	mov    rdi,rbp
  40d9b5:	mov    QWORD PTR [rsp+0x8],r10
  40d9ba:	call   405800 <_start@@Base+0x23e0>
  40d9bf:	mov    r10,QWORD PTR [rsp+0x8]
  40d9c4:	mov    r14,rax
  40d9c7:	cmp    rax,r10
  40d9ca:	je     40d1a8 <_start@@Base+0x9d88>
  40d9d0:	cmp    rbx,rax
  40d9d3:	jne    40d905 <_start@@Base+0xa4e5>
  40d9d9:	jmp    40d1a8 <_start@@Base+0x9d88>
  40d9de:	xchg   ax,ax
  40d9e0:	mov    r8,QWORD PTR [rsp+0x10]
  40d9e5:	lea    rcx,[rip+0x139f4]        # 4213e0 <__data_start@@Base+0x320>
  40d9ec:	mov    rsi,r10
  40d9ef:	mov    rdx,rbx
  40d9f2:	mov    rdi,rbp
  40d9f5:	mov    QWORD PTR [rsp+0x8],r10
  40d9fa:	call   405800 <_start@@Base+0x23e0>
  40d9ff:	mov    r10,QWORD PTR [rsp+0x8]
  40da04:	mov    r14,rax
  40da07:	cmp    rax,r10
  40da0a:	je     40d1a8 <_start@@Base+0x9d88>
  40da10:	cmp    rbx,rax
  40da13:	jne    40d938 <_start@@Base+0xa518>
  40da19:	jmp    40d1a8 <_start@@Base+0x9d88>
  40da1e:	xchg   ax,ax
  40da20:	mov    ecx,0xa
  40da25:	mov    rdx,rbx
  40da28:	mov    rsi,rbx
  40da2b:	mov    rdi,rbp
  40da2e:	mov    DWORD PTR [rsp+0x2c],0x0
  40da36:	call   416820 <flatcc_json_parser_set_error@@Base>
  40da3b:	mov    r15,rax
  40da3e:	mov    eax,DWORD PTR [rsp+0x2c]
  40da42:	jmp    40cd50 <_start@@Base+0x9930>
  40da47:	nop    WORD PTR [rax+rax*1+0x0]
  40da50:	mov    r8,QWORD PTR [rsp+0x10]
  40da55:	lea    rcx,[rip+0x139a4]        # 421400 <__data_start@@Base+0x340>
  40da5c:	mov    rsi,r10
  40da5f:	mov    rdx,rbx
  40da62:	mov    rdi,rbp
  40da65:	mov    QWORD PTR [rsp+0x8],r10
  40da6a:	call   405800 <_start@@Base+0x23e0>
  40da6f:	mov    r10,QWORD PTR [rsp+0x8]
  40da74:	mov    r14,rax
  40da77:	cmp    rax,r10
  40da7a:	je     40d1a8 <_start@@Base+0x9d88>
  40da80:	cmp    rbx,rax
  40da83:	jne    40d994 <_start@@Base+0xa574>
  40da89:	jmp    40d1a8 <_start@@Base+0x9d88>
  40da8e:	xchg   ax,ax
  40da90:	mov    r8,QWORD PTR [rsp]
  40da94:	lea    rcx,[rip+0x13985]        # 421420 <__data_start@@Base+0x360>
  40da9b:	mov    rdx,rbx
  40da9e:	mov    rsi,r15
  40daa1:	mov    rdi,rbp
  40daa4:	call   405ee0 <_start@@Base+0x2ac0>
  40daa9:	cmp    rax,r15
  40daac:	mov    r14,rax
  40daaf:	je     40d1a8 <_start@@Base+0x9d88>
  40dab5:	cmp    rbx,rax
  40dab8:	jne    40d8d3 <_start@@Base+0xa4b3>
  40dabe:	jmp    40d1a8 <_start@@Base+0x9d88>
  40dac3:	nop    DWORD PTR [rax+rax*1+0x0]
  40dac8:	lea    rcx,[rip+0x138f1]        # 4213c0 <__data_start@@Base+0x300>
  40dacf:	mov    r8,r13
  40dad2:	mov    rdx,rbx
  40dad5:	mov    rsi,rax
  40dad8:	mov    rdi,rbp
  40dadb:	call   405ee0 <_start@@Base+0x2ac0>
  40dae0:	cmp    r14,rax
  40dae3:	mov    r14,rax
  40dae6:	je     40d1a8 <_start@@Base+0x9d88>
  40daec:	cmp    rbx,rax
  40daef:	jne    40d172 <_start@@Base+0x9d52>
  40daf5:	jmp    40d1a8 <_start@@Base+0x9d88>
  40dafa:	nop    WORD PTR [rax+rax*1+0x0]
  40db00:	lea    rcx,[rip+0x13879]        # 421380 <__data_start@@Base+0x2c0>
  40db07:	mov    r8,r13
  40db0a:	mov    rdx,rbx
  40db0d:	mov    rsi,rax
  40db10:	mov    rdi,rbp
  40db13:	call   405ee0 <_start@@Base+0x2ac0>
  40db18:	cmp    r14,rax
  40db1b:	mov    r14,rax
  40db1e:	je     40d1a8 <_start@@Base+0x9d88>
  40db24:	cmp    rbx,rax
  40db27:	jne    40d79e <_start@@Base+0xa37e>
  40db2d:	jmp    40d1a8 <_start@@Base+0x9d88>
  40db32:	call   403080 <__stack_chk_fail@plt>
  40db37:	nop    WORD PTR [rax+rax*1+0x0]
  40db40:	push   r15
  40db42:	push   r14
  40db44:	push   r13
  40db46:	push   r12
  40db48:	mov    r13,rsi
  40db4b:	push   rbp
  40db4c:	push   rbx
  40db4d:	mov    rbx,rdi
  40db50:	mov    esi,0x4
  40db55:	mov    rbp,rdx
  40db58:	sub    rsp,0x58
  40db5c:	mov    DWORD PTR [rcx],0x0
  40db62:	mov    rdi,QWORD PTR fs:0x28
  40db6b:	mov    QWORD PTR [rsp+0x48],rdi
  40db70:	xor    edi,edi
  40db72:	mov    rdi,QWORD PTR [rbx]
  40db75:	mov    QWORD PTR [rsp+0x10],rcx
  40db7a:	call   413080 <flatcc_builder_start_table@@Base>
  40db7f:	test   eax,eax
  40db81:	jne    40dd20 <_start@@Base+0xa900>
  40db87:	lea    r8,[rsp+0x30]
  40db8c:	mov    ecx,0x1
  40db91:	mov    rdx,rbp
  40db94:	mov    rsi,r13
  40db97:	mov    rdi,rbx
  40db9a:	call   418a50 <flatcc_json_parser_prepare_unions@@Base>
  40db9f:	cmp    rbp,rax
  40dba2:	je     40dd20 <_start@@Base+0xa900>
  40dba8:	lea    rcx,[rsp+0x24]
  40dbad:	mov    rsi,r13
  40dbb0:	mov    rdi,rbx
  40dbb3:	mov    rdx,rbp
  40dbb6:	call   4048f0 <_start@@Base+0x14d0>
  40dbbb:	lea    rdi,[rsp+0x40]
  40dbc0:	mov    r13,rax
  40dbc3:	mov    eax,DWORD PTR [rsp+0x24]
  40dbc7:	mov    QWORD PTR [rsp],rdi
  40dbcb:	lea    rdi,[rsp+0x2c]
  40dbd0:	mov    QWORD PTR [rsp+0x8],rdi
  40dbd5:	nop    DWORD PTR [rax]
  40dbd8:	test   eax,eax
  40dbda:	je     40dd10 <_start@@Base+0xa8f0>
  40dbe0:	cmp    rbp,r13
  40dbe3:	lea    r14,[rsp+0x38]
  40dbe8:	je     40dff8 <_start@@Base+0xabd8>
  40dbee:	movzx  eax,BYTE PTR [r13+0x0]
  40dbf3:	cmp    al,0x22
  40dbf5:	je     40dea8 <_start@@Base+0xaa88>
  40dbfb:	cmp    al,0x2e
  40dbfd:	je     40e008 <_start@@Base+0xabe8>
  40dc03:	mov    r15,rbp
  40dc06:	mov    DWORD PTR [rbx+0x14],0x1
  40dc0d:	sub    r15,r13
  40dc10:	cmp    r15,0x7
  40dc14:	jbe    40de00 <_start@@Base+0xa9e0>
  40dc1a:	movbe  r12,QWORD PTR [r13+0x0]
  40dc20:	movabs rax,0x6d616e79616e795f
  40dc2a:	cmp    r12,rax
  40dc2d:	je     40dd60 <_start@@Base+0xa940>
  40dc33:	mov    rdx,r12
  40dc36:	movabs rax,0x6d616e79616e7900
  40dc40:	xor    dl,dl
  40dc42:	cmp    rdx,rax
  40dc45:	jne    40dc51 <_start@@Base+0xa831>
  40dc47:	cmp    r15,0x7
  40dc4b:	jg     40e4c8 <_start@@Base+0xb0a8>
  40dc51:	mov    rdx,r12
  40dc54:	movabs rax,0x7072656669780000
  40dc5e:	xor    dx,dx
  40dc61:	cmp    rdx,rax
  40dc64:	je     40dec0 <_start@@Base+0xaaa0>
  40dc6a:	and    r12,0xffffffffff000000
  40dc71:	movabs rax,0x6d6f766965000000
  40dc7b:	cmp    r12,rax
  40dc7e:	jne    40dc8a <_start@@Base+0xa86a>
  40dc80:	cmp    r15,0x5
  40dc84:	jg     40e030 <_start@@Base+0xac10>
  40dc8a:	mov    rdx,rbp
  40dc8d:	mov    rsi,r13
  40dc90:	mov    rdi,rbx
  40dc93:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40dc98:	mov    r15,rax
  40dc9b:	mov    rax,rbp
  40dc9e:	sub    rax,r15
  40dca1:	cmp    rax,0x1
  40dca5:	jle    40dcb3 <_start@@Base+0xa893>
  40dca7:	cmp    BYTE PTR [r15],0x20
  40dcab:	jg     40dcc4 <_start@@Base+0xa8a4>
  40dcad:	je     40df50 <_start@@Base+0xab30>
  40dcb3:	mov    rsi,r15
  40dcb6:	mov    rdx,rbp
  40dcb9:	mov    rdi,rbx
  40dcbc:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40dcc1:	mov    r15,rax
  40dcc4:	cmp    rbp,r15
  40dcc7:	je     40df70 <_start@@Base+0xab50>
  40dccd:	cmp    BYTE PTR [r15],0x2c
  40dcd1:	je     40dfa0 <_start@@Base+0xab80>
  40dcd7:	mov    DWORD PTR [rsp+0x24],0x0
  40dcdf:	cmp    BYTE PTR [r15],0x7d
  40dce3:	je     40ddc0 <_start@@Base+0xa9a0>
  40dce9:	mov    ecx,0xa
  40dcee:	mov    rdx,rbp
  40dcf1:	mov    rsi,r15
  40dcf4:	mov    rdi,rbx
  40dcf7:	call   416820 <flatcc_json_parser_set_error@@Base>
  40dcfc:	mov    r13,rax
  40dcff:	mov    eax,DWORD PTR [rsp+0x24]
  40dd03:	test   eax,eax
  40dd05:	jne    40dbe0 <_start@@Base+0xa7c0>
  40dd0b:	nop    DWORD PTR [rax+rax*1+0x0]
  40dd10:	mov    eax,DWORD PTR [rbx+0x20]
  40dd13:	test   eax,eax
  40dd15:	je     40e904 <_start@@Base+0xb4e4>
  40dd1b:	nop    DWORD PTR [rax+rax*1+0x0]
  40dd20:	mov    ecx,0x21
  40dd25:	mov    rdx,rbp
  40dd28:	mov    rsi,r13
  40dd2b:	mov    rdi,rbx
  40dd2e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40dd33:	mov    rbx,QWORD PTR [rsp+0x48]
  40dd38:	xor    rbx,QWORD PTR fs:0x28
  40dd41:	jne    4100d6 <_start@@Base+0xccb6>
  40dd47:	add    rsp,0x58
  40dd4b:	pop    rbx
  40dd4c:	pop    rbp
  40dd4d:	pop    r12
  40dd4f:	pop    r13
  40dd51:	pop    r14
  40dd53:	pop    r15
  40dd55:	ret    
  40dd56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40dd60:	lea    r12,[r13+0x8]
  40dd64:	mov    r8,rbp
  40dd67:	sub    r8,r12
  40dd6a:	cmp    r8,0x7
  40dd6e:	jbe    40df90 <_start@@Base+0xab70>
  40dd74:	movbe  rax,QWORD PTR [r13+0x8]
  40dd7a:	movabs rdx,0xffffffff00000000
  40dd84:	and    rax,rdx
  40dd87:	movabs rdx,0x7479706500000000
  40dd91:	cmp    rax,rdx
  40dd94:	jne    40dda0 <_start@@Base+0xa980>
  40dd96:	cmp    r8,0x4
  40dd9a:	jg     40e600 <_start@@Base+0xb1e0>
  40dda0:	mov    rdx,rbp
  40dda3:	mov    rsi,r12
  40dda6:	mov    rdi,rbx
  40dda9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ddae:	mov    r15,rax
  40ddb1:	jmp    40dc9b <_start@@Base+0xa87b>
  40ddb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ddc0:	lea    r13,[r15+0x1]
  40ddc4:	mov    rax,rbp
  40ddc7:	sub    rax,r13
  40ddca:	cmp    rax,0x1
  40ddce:	jle    40dde1 <_start@@Base+0xa9c1>
  40ddd0:	cmp    BYTE PTR [r15+0x1],0x20
  40ddd5:	jg     40dd10 <_start@@Base+0xa8f0>
  40dddb:	je     40e67a <_start@@Base+0xb25a>
  40dde1:	mov    rsi,r13
  40dde4:	mov    rdx,rbp
  40dde7:	mov    rdi,rbx
  40ddea:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ddef:	mov    r13,rax
  40ddf2:	mov    eax,DWORD PTR [rsp+0x24]
  40ddf6:	jmp    40dbd8 <_start@@Base+0xa7b8>
  40ddfb:	nop    DWORD PTR [rax+rax*1+0x0]
  40de00:	cmp    r15,0x8
  40de04:	ja     40dffb <_start@@Base+0xabdb>
  40de0a:	lea    rdx,[rip+0xc307]        # 41a118 <_IO_stdin_used@@Base+0x118>
  40de11:	movsxd rax,DWORD PTR [rdx+r15*4]
  40de15:	add    rax,rdx
  40de18:	jmp    rax
  40de1a:	movsx  r12,BYTE PTR [r13+0x7]
  40de1f:	movsx  rdx,BYTE PTR [r13+0x6]
  40de24:	mov    rax,rdx
  40de27:	shl    rax,0x8
  40de2b:	or     rax,r12
  40de2e:	movsx  rdx,BYTE PTR [r13+0x5]
  40de33:	shl    rdx,0x10
  40de37:	or     rax,rdx
  40de3a:	movsx  rdx,BYTE PTR [r13+0x4]
  40de3f:	shl    rdx,0x18
  40de43:	mov    r12,rdx
  40de46:	or     r12,rax
  40de49:	movsx  rdx,BYTE PTR [r13+0x3]
  40de4e:	mov    rax,rdx
  40de51:	shl    rax,0x20
  40de55:	or     r12,rax
  40de58:	movsx  rdx,BYTE PTR [r13+0x2]
  40de5d:	mov    rax,rdx
  40de60:	shl    rax,0x28
  40de64:	or     rax,r12
  40de67:	movsx  rdx,BYTE PTR [r13+0x1]
  40de6c:	shl    rdx,0x30
  40de70:	or     rax,rdx
  40de73:	movsx  r12,BYTE PTR [r13+0x0]
  40de78:	shl    r12,0x38
  40de7c:	or     r12,rax
  40de7f:	jmp    40dc20 <_start@@Base+0xa800>
  40de84:	xor    r12d,r12d
  40de87:	jmp    40de1f <_start@@Base+0xa9ff>
  40de89:	xor    eax,eax
  40de8b:	jmp    40de2e <_start@@Base+0xaa0e>
  40de8d:	xor    eax,eax
  40de8f:	jmp    40de3a <_start@@Base+0xaa1a>
  40de91:	xor    r12d,r12d
  40de94:	jmp    40de49 <_start@@Base+0xaa29>
  40de96:	xor    r12d,r12d
  40de99:	jmp    40de58 <_start@@Base+0xaa38>
  40de9b:	xor    eax,eax
  40de9d:	jmp    40de67 <_start@@Base+0xaa47>
  40de9f:	xor    eax,eax
  40dea1:	jmp    40de73 <_start@@Base+0xaa53>
  40dea3:	nop    DWORD PTR [rax+rax*1+0x0]
  40dea8:	add    r13,0x1
  40deac:	mov    r15,rbp
  40deaf:	mov    DWORD PTR [rbx+0x14],0x0
  40deb6:	sub    r15,r13
  40deb9:	jmp    40dc10 <_start@@Base+0xa7f0>
  40debe:	xchg   ax,ax
  40dec0:	cmp    r15,0x6
  40dec4:	jle    40dc8a <_start@@Base+0xa86a>
  40deca:	mov    ecx,0x6
  40decf:	mov    rdx,rbp
  40ded2:	mov    rsi,r13
  40ded5:	mov    rdi,rbx
  40ded8:	call   4081b0 <_start@@Base+0x4d90>
  40dedd:	cmp    rax,r13
  40dee0:	mov    r15,rax
  40dee3:	je     40dc8a <_start@@Base+0xa86a>
  40dee9:	mov    rdi,QWORD PTR [rbx]
  40deec:	mov    esi,0x3
  40def1:	call   413080 <flatcc_builder_start_table@@Base>
  40def6:	test   eax,eax
  40def8:	jne    40df30 <_start@@Base+0xab10>
  40defa:	cmp    rbp,r15
  40defd:	je     40df09 <_start@@Base+0xaae9>
  40deff:	cmp    BYTE PTR [r15],0x7b
  40df03:	je     40e9e4 <_start@@Base+0xb5c4>
  40df09:	mov    rsi,r15
  40df0c:	mov    ecx,0x15
  40df11:	mov    rdx,rbp
  40df14:	mov    rdi,rbx
  40df17:	call   416820 <flatcc_json_parser_set_error@@Base>
  40df1c:	mov    r15,rax
  40df1f:	nop
  40df20:	mov    edi,DWORD PTR [rbx+0x20]
  40df23:	test   edi,edi
  40df25:	je     40e94f <_start@@Base+0xb52f>
  40df2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df30:	mov    ecx,0x21
  40df35:	mov    rdx,rbp
  40df38:	mov    rsi,r15
  40df3b:	mov    rdi,rbx
  40df3e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40df43:	mov    r13,rax
  40df46:	jmp    40dd20 <_start@@Base+0xa900>
  40df4b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df50:	cmp    BYTE PTR [r15+0x1],0x20
  40df55:	jle    40dcb3 <_start@@Base+0xa893>
  40df5b:	add    r15,0x1
  40df5f:	cmp    rbp,r15
  40df62:	jne    40dccd <_start@@Base+0xa8ad>
  40df68:	nop    DWORD PTR [rax+rax*1+0x0]
  40df70:	mov    eax,DWORD PTR [rbx+0x20]
  40df73:	mov    DWORD PTR [rsp+0x24],0x0
  40df7b:	mov    r13,rbp
  40df7e:	test   eax,eax
  40df80:	jne    40dd20 <_start@@Base+0xa900>
  40df86:	jmp    40e904 <_start@@Base+0xb4e4>
  40df8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df90:	mov    rsi,rbp
  40df93:	mov    rdi,r12
  40df96:	call   403530 <_start@@Base+0x110>
  40df9b:	jmp    40dd7a <_start@@Base+0xa95a>
  40dfa0:	lea    r13,[r15+0x1]
  40dfa4:	mov    rax,rbp
  40dfa7:	sub    rax,r13
  40dfaa:	cmp    rax,0x1
  40dfae:	jle    40dfbd <_start@@Base+0xab9d>
  40dfb0:	cmp    BYTE PTR [r15+0x1],0x20
  40dfb5:	jg     40dfce <_start@@Base+0xabae>
  40dfb7:	je     40e93b <_start@@Base+0xb51b>
  40dfbd:	mov    rsi,r13
  40dfc0:	mov    rdx,rbp
  40dfc3:	mov    rdi,rbx
  40dfc6:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40dfcb:	mov    r13,rax
  40dfce:	cmp    rbp,r13
  40dfd1:	je     410012 <_start@@Base+0xcbf2>
  40dfd7:	cmp    BYTE PTR [r13+0x0],0x7d
  40dfdc:	je     40ffc0 <_start@@Base+0xcba0>
  40dfe2:	cmp    rbp,r13
  40dfe5:	mov    DWORD PTR [rsp+0x24],0x1
  40dfed:	jne    40dbee <_start@@Base+0xa7ce>
  40dff3:	nop    DWORD PTR [rax+rax*1+0x0]
  40dff8:	xor    r15d,r15d
  40dffb:	xor    r12d,r12d
  40dffe:	jmp    40dc6a <_start@@Base+0xa84a>
  40e003:	nop    DWORD PTR [rax+rax*1+0x0]
  40e008:	mov    rsi,r13
  40e00b:	mov    ecx,0x5
  40e010:	mov    rdx,rbp
  40e013:	mov    rdi,rbx
  40e016:	mov    r15,rbp
  40e019:	call   416820 <flatcc_json_parser_set_error@@Base>
  40e01e:	mov    r13,rax
  40e021:	sub    r15,rax
  40e024:	jmp    40dc10 <_start@@Base+0xa7f0>
  40e029:	nop    DWORD PTR [rax+0x0]
  40e030:	mov    ecx,0x5
  40e035:	mov    rdx,rbp
  40e038:	mov    rsi,r13
  40e03b:	mov    rdi,rbx
  40e03e:	call   4081b0 <_start@@Base+0x4d90>
  40e043:	cmp    rax,r13
  40e046:	mov    r15,rax
  40e049:	je     40dc8a <_start@@Base+0xa86a>
  40e04f:	mov    rdi,QWORD PTR [rbx]
  40e052:	mov    esi,0xa
  40e057:	call   413080 <flatcc_builder_start_table@@Base>
  40e05c:	test   eax,eax
  40e05e:	jne    40df30 <_start@@Base+0xab10>
  40e064:	mov    r8,QWORD PTR [rsp]
  40e068:	mov    ecx,0x5
  40e06d:	mov    rdx,rbp
  40e070:	mov    rsi,r15
  40e073:	mov    rdi,rbx
  40e076:	call   418a50 <flatcc_json_parser_prepare_unions@@Base>
  40e07b:	cmp    rbp,rax
  40e07e:	je     40df30 <_start@@Base+0xab10>
  40e084:	mov    rsi,r15
  40e087:	mov    rcx,r14
  40e08a:	mov    rdx,rbp
  40e08d:	mov    rdi,rbx
  40e090:	call   4048f0 <_start@@Base+0x14d0>
  40e095:	mov    esi,DWORD PTR [rsp+0x38]
  40e099:	mov    r15,rax
  40e09c:	test   esi,esi
  40e09e:	je     40e470 <_start@@Base+0xb050>
  40e0a4:	movabs r12,0x6368617261637464
  40e0ae:	movabs r13,0x6d61696e5f636860
  40e0b8:	jmp    40e133 <_start@@Base+0xad13>
  40e0ba:	nop    WORD PTR [rax+rax*1+0x0]
  40e0c0:	movabs rdx,0x616e7461676f6e69
  40e0ca:	cmp    rax,rdx
  40e0cd:	je     40e310 <_start@@Base+0xaef0>
  40e0d3:	movabs rdx,0x63616d656f5f7479
  40e0dd:	cmp    rax,rdx
  40e0e0:	je     40e3c8 <_start@@Base+0xafa8>
  40e0e6:	and    rax,0xffffffffff000000
  40e0ec:	movabs rdx,0x63616d656f000000
  40e0f6:	cmp    rax,rdx
  40e0f9:	jne    40e105 <_start@@Base+0xace5>
  40e0fb:	cmp    r8,0x5
  40e0ff:	jg     40e727 <_start@@Base+0xb307>
  40e105:	mov    rdx,rbp
  40e108:	mov    rsi,r15
  40e10b:	mov    rdi,rbx
  40e10e:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e113:	mov    rcx,r14
  40e116:	mov    rdx,rbp
  40e119:	mov    rsi,rax
  40e11c:	mov    rdi,rbx
  40e11f:	call   406270 <_start@@Base+0x2e50>
  40e124:	mov    ecx,DWORD PTR [rsp+0x38]
  40e128:	mov    r15,rax
  40e12b:	test   ecx,ecx
  40e12d:	je     40e470 <_start@@Base+0xb050>
  40e133:	cmp    rbp,r15
  40e136:	je     40e208 <_start@@Base+0xade8>
  40e13c:	movzx  eax,BYTE PTR [r15]
  40e140:	cmp    al,0x22
  40e142:	je     40e300 <_start@@Base+0xaee0>
  40e148:	cmp    al,0x2e
  40e14a:	je     40e5e0 <_start@@Base+0xb1c0>
  40e150:	mov    DWORD PTR [rbx+0x14],0x1
  40e157:	mov    r8,rbp
  40e15a:	sub    r8,r15
  40e15d:	cmp    r8,0x7
  40e161:	jbe    40e20e <_start@@Base+0xadee>
  40e167:	movbe  rax,QWORD PTR [r15]
  40e16c:	cmp    rax,r12
  40e16f:	jbe    40e0c0 <_start@@Base+0xaca0>
  40e175:	cmp    rax,r13
  40e178:	ja     40e220 <_start@@Base+0xae00>
  40e17e:	movabs rdx,0x6368617261637465
  40e188:	cmp    rax,rdx
  40e18b:	jne    40e105 <_start@@Base+0xace5>
  40e191:	lea    r8,[r15+0x8]
  40e195:	mov    r9,rbp
  40e198:	sub    r9,r8
  40e19b:	cmp    r9,0x7
  40e19f:	jbe    40e660 <_start@@Base+0xb240>
  40e1a5:	movbe  rax,QWORD PTR [r15+0x8]
  40e1ab:	mov    rcx,rax
  40e1ae:	movabs rdx,0x72735f7479706500
  40e1b8:	xor    cl,cl
  40e1ba:	cmp    rcx,rdx
  40e1bd:	je     40e83a <_start@@Base+0xb41a>
  40e1c3:	movabs rdx,0xffff000000000000
  40e1cd:	and    rax,rdx
  40e1d0:	movabs rdx,0x7273000000000000
  40e1da:	cmp    rax,rdx
  40e1dd:	jne    40e1f0 <_start@@Base+0xadd0>
  40e1df:	cmp    r9,0x2
  40e1e3:	jg     40e8ad <_start@@Base+0xb48d>
  40e1e9:	nop    DWORD PTR [rax+0x0]
  40e1f0:	mov    rdx,rbp
  40e1f3:	mov    rsi,r8
  40e1f6:	mov    rdi,rbx
  40e1f9:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40e1fe:	jmp    40e113 <_start@@Base+0xacf3>
  40e203:	nop    DWORD PTR [rax+rax*1+0x0]
  40e208:	xor    r8d,r8d
  40e20b:	mov    r15,rbp
  40e20e:	mov    rsi,rbp
  40e211:	mov    rdi,r15
  40e214:	call   403530 <_start@@Base+0x110>
  40e219:	jmp    40e16c <_start@@Base+0xad4c>
  40e21e:	xchg   ax,ax
  40e220:	movabs rdi,0x6d61696e5f636861
  40e22a:	cmp    rax,rdi
  40e22d:	je     40e538 <_start@@Base+0xb118>
  40e233:	movabs rdi,0x736964655f6b6963
  40e23d:	cmp    rax,rdi
  40e240:	jne    40e105 <_start@@Base+0xace5>
  40e246:	lea    r8,[r15+0x8]
  40e24a:	mov    r9,rbp
  40e24d:	sub    r9,r8
  40e250:	cmp    r9,0x7
  40e254:	jbe    40e6a8 <_start@@Base+0xb288>
  40e25a:	movbe  rax,QWORD PTR [r15+0x8]
  40e260:	mov    rcx,rax
  40e263:	movabs rdx,0x6b5f747970650000
  40e26d:	xor    cx,cx
  40e270:	cmp    rcx,rdx
  40e273:	je     40e97d <_start@@Base+0xb55d>
  40e279:	movabs rdx,0xff00000000000000
  40e283:	and    rax,rdx
  40e286:	movabs rdx,0x6b00000000000000
  40e290:	cmp    rax,rdx
  40e293:	jne    40e1f0 <_start@@Base+0xadd0>
  40e299:	cmp    r9,0x1
  40e29d:	jle    40e1f0 <_start@@Base+0xadd0>
  40e2a3:	mov    rsi,r8
  40e2a6:	mov    ecx,0x1
  40e2ab:	mov    rdx,rbp
  40e2ae:	mov    rdi,rbx
  40e2b1:	mov    QWORD PTR [rsp+0x18],r8
  40e2b6:	call   4081b0 <_start@@Base+0x4d90>
  40e2bb:	mov    r8,QWORD PTR [rsp+0x18]
  40e2c0:	mov    rsi,rax
  40e2c3:	cmp    r8,rax
  40e2c6:	je     40e1f0 <_start@@Base+0xadd0>
  40e2cc:	lea    rax,[rip+0xffffffffffffe07d]        # 40c350 <_start@@Base+0x8f30>
  40e2d3:	sub    rsp,0x8
  40e2d7:	mov    rdi,rbx
  40e2da:	mov    r8d,0x5
  40e2e0:	mov    ecx,0x2
  40e2e5:	mov    rdx,rbp
  40e2e8:	push   rax
  40e2e9:	mov    r9,QWORD PTR [rsp+0x50]
  40e2ee:	call   418b20 <flatcc_json_parser_union@@Base>
  40e2f3:	pop    rsi
  40e2f4:	pop    rdi
  40e2f5:	jmp    40e113 <_start@@Base+0xacf3>
  40e2fa:	nop    WORD PTR [rax+rax*1+0x0]
  40e300:	add    r15,0x1
  40e304:	mov    DWORD PTR [rbx+0x14],0x0
  40e30b:	jmp    40e157 <_start@@Base+0xad37>
  40e310:	lea    r8,[r15+0x8]
  40e314:	mov    r9,rbp
  40e317:	sub    r9,r8
  40e31a:	cmp    r9,0x7
  40e31e:	jbe    40e518 <_start@@Base+0xb0f8>
  40e324:	movbe  rax,QWORD PTR [r15+0x8]
  40e32a:	mov    rcx,rax
  40e32d:	movabs rdx,0x73745f7479706500
  40e337:	xor    cl,cl
  40e339:	cmp    rcx,rdx
  40e33c:	je     40e6c2 <_start@@Base+0xb2a2>
  40e342:	movabs rdx,0xffff000000000000
  40e34c:	and    rax,rdx
  40e34f:	movabs rdx,0x7374000000000000
  40e359:	cmp    rax,rdx
  40e35c:	jne    40e1f0 <_start@@Base+0xadd0>
  40e362:	cmp    r9,0x2
  40e366:	jle    40e1f0 <_start@@Base+0xadd0>
  40e36c:	mov    rsi,r8
  40e36f:	mov    ecx,0x2
  40e374:	mov    rdx,rbp
  40e377:	mov    rdi,rbx
  40e37a:	mov    QWORD PTR [rsp+0x18],r8
  40e37f:	call   4081b0 <_start@@Base+0x4d90>
  40e384:	mov    r8,QWORD PTR [rsp+0x18]
  40e389:	mov    rsi,rax
  40e38c:	cmp    r8,rax
  40e38f:	je     40e1f0 <_start@@Base+0xadd0>
  40e395:	lea    rax,[rip+0xffffffffffffdfb4]        # 40c350 <_start@@Base+0x8f30>
  40e39c:	sub    rsp,0x8
  40e3a0:	mov    r8d,0x3
  40e3a6:	mov    ecx,0x1
  40e3ab:	mov    rdx,rbp
  40e3ae:	mov    rdi,rbx
  40e3b1:	push   rax
  40e3b2:	mov    r9,QWORD PTR [rsp+0x50]
  40e3b7:	call   418b20 <flatcc_json_parser_union@@Base>
  40e3bc:	pop    r11
  40e3be:	pop    r15
  40e3c0:	jmp    40e113 <_start@@Base+0xacf3>
  40e3c5:	nop    DWORD PTR [rax]
  40e3c8:	lea    r8,[r15+0x8]
  40e3cc:	mov    r9,rbp
  40e3cf:	sub    r9,r8
  40e3d2:	cmp    r9,0x7
  40e3d6:	jbe    40e68e <_start@@Base+0xb26e>
  40e3dc:	movbe  rax,QWORD PTR [r15+0x8]
  40e3e2:	movabs rdx,0xffff000000000000
  40e3ec:	and    rax,rdx
  40e3ef:	movabs rdx,0x7065000000000000
  40e3f9:	cmp    rax,rdx
  40e3fc:	jne    40e1f0 <_start@@Base+0xadd0>
  40e402:	cmp    r9,0x2
  40e406:	jle    40e1f0 <_start@@Base+0xadd0>
  40e40c:	mov    rsi,r8
  40e40f:	mov    ecx,0x2
  40e414:	mov    rdx,rbp
  40e417:	mov    rdi,rbx
  40e41a:	mov    QWORD PTR [rsp+0x18],r8
  40e41f:	call   4081b0 <_start@@Base+0x4d90>
  40e424:	mov    r8,QWORD PTR [rsp+0x18]
  40e429:	mov    rsi,rax
  40e42c:	cmp    r8,rax
  40e42f:	je     40e1f0 <_start@@Base+0xadd0>
  40e435:	lea    rax,[rip+0xffffffffffffdf14]        # 40c350 <_start@@Base+0x8f30>
  40e43c:	mov    r8d,0x7
  40e442:	mov    ecx,0x3
  40e447:	mov    rdx,rbp
  40e44a:	mov    rdi,rbx
  40e44d:	push   rax
  40e44e:	lea    rax,[rip+0x12eab]        # 421300 <__data_start@@Base+0x240>
  40e455:	push   rax
  40e456:	mov    r9,QWORD PTR [rsp+0x50]
  40e45b:	call   418c60 <flatcc_json_parser_union_type@@Base>
  40e460:	pop    r9
  40e462:	pop    r10
  40e464:	jmp    40e113 <_start@@Base+0xacf3>
  40e469:	nop    DWORD PTR [rax+0x0]
  40e470:	mov    edx,DWORD PTR [rbx+0x20]
  40e473:	test   edx,edx
  40e475:	jne    40df30 <_start@@Base+0xab10>
  40e47b:	mov    rcx,QWORD PTR [rsp+0x40]
  40e480:	mov    rsi,r15
  40e483:	mov    rdx,rbp
  40e486:	mov    rdi,rbx
  40e489:	call   418ac0 <flatcc_json_parser_finalize_unions@@Base>
  40e48e:	mov    rdi,QWORD PTR [rbx]
  40e491:	mov    r15,rax
  40e494:	call   413a40 <flatcc_builder_end_table@@Base>
  40e499:	test   eax,eax
  40e49b:	mov    r12d,eax
  40e49e:	je     40df30 <_start@@Base+0xab10>
  40e4a4:	mov    rdi,QWORD PTR [rbx]
  40e4a7:	mov    esi,0x1
  40e4ac:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40e4b1:	test   rax,rax
  40e4b4:	je     40e975 <_start@@Base+0xb555>
  40e4ba:	mov    DWORD PTR [rax],r12d
  40e4bd:	jmp    40dc9b <_start@@Base+0xa87b>
  40e4c2:	nop    WORD PTR [rax+rax*1+0x0]
  40e4c8:	mov    rsi,r13
  40e4cb:	mov    ecx,0x7
  40e4d0:	mov    rdx,rbp
  40e4d3:	mov    rdi,rbx
  40e4d6:	call   4081b0 <_start@@Base+0x4d90>
  40e4db:	cmp    rax,r13
  40e4de:	mov    rsi,rax
  40e4e1:	je     40dc51 <_start@@Base+0xa831>
  40e4e7:	lea    rax,[rip+0x1bf2]        # 4100e0 <_start@@Base+0xccc0>
  40e4ee:	sub    rsp,0x8
  40e4f2:	xor    ecx,ecx
  40e4f4:	mov    r8d,0x3
  40e4fa:	mov    rdx,rbp
  40e4fd:	mov    rdi,rbx
  40e500:	push   rax
  40e501:	mov    r9,QWORD PTR [rsp+0x40]
  40e506:	call   418ed0 <flatcc_json_parser_union_vector@@Base>
  40e50b:	pop    rcx
  40e50c:	mov    r15,rax
  40e50f:	pop    rsi
  40e510:	jmp    40dc9b <_start@@Base+0xa87b>
  40e515:	nop    DWORD PTR [rax]
  40e518:	mov    rdi,r8
  40e51b:	mov    rsi,rbp
  40e51e:	mov    QWORD PTR [rsp+0x18],r8
  40e523:	call   403530 <_start@@Base+0x110>
  40e528:	mov    r8,QWORD PTR [rsp+0x18]
  40e52d:	jmp    40e32a <_start@@Base+0xaf0a>
  40e532:	nop    WORD PTR [rax+rax*1+0x0]
  40e538:	lea    r8,[r15+0x8]
  40e53c:	mov    r9,rbp
  40e53f:	sub    r9,r8
  40e542:	cmp    r9,0x7
  40e546:	jbe    40e775 <_start@@Base+0xb355>
  40e54c:	movbe  rax,QWORD PTR [r15+0x8]
  40e552:	movabs rdx,0x7261637465725f74
  40e55c:	cmp    rax,rdx
  40e55f:	je     40e79d <_start@@Base+0xb37d>
  40e565:	xor    ax,ax
  40e568:	movabs rdx,0x7261637465720000
  40e572:	cmp    rax,rdx
  40e575:	jne    40e1f0 <_start@@Base+0xadd0>
  40e57b:	cmp    r9,0x6
  40e57f:	jle    40e1f0 <_start@@Base+0xadd0>
  40e585:	mov    rsi,r8
  40e588:	mov    ecx,0x6
  40e58d:	mov    rdx,rbp
  40e590:	mov    rdi,rbx
  40e593:	mov    QWORD PTR [rsp+0x18],r8
  40e598:	call   4081b0 <_start@@Base+0x4d90>
  40e59d:	mov    r8,QWORD PTR [rsp+0x18]
  40e5a2:	mov    rsi,rax
  40e5a5:	cmp    r8,rax
  40e5a8:	je     40e1f0 <_start@@Base+0xadd0>
  40e5ae:	lea    rax,[rip+0xffffffffffffdd9b]        # 40c350 <_start@@Base+0x8f30>
  40e5b5:	sub    rsp,0x8
  40e5b9:	mov    r8d,0x1
  40e5bf:	xor    ecx,ecx
  40e5c1:	mov    rdx,rbp
  40e5c4:	mov    rdi,rbx
  40e5c7:	push   rax
  40e5c8:	mov    r9,QWORD PTR [rsp+0x50]
  40e5cd:	call   418b20 <flatcc_json_parser_union@@Base>
  40e5d2:	pop    r10
  40e5d4:	pop    r11
  40e5d6:	jmp    40e113 <_start@@Base+0xacf3>
  40e5db:	nop    DWORD PTR [rax+rax*1+0x0]
  40e5e0:	mov    rsi,r15
  40e5e3:	mov    ecx,0x5
  40e5e8:	mov    rdx,rbp
  40e5eb:	mov    rdi,rbx
  40e5ee:	call   416820 <flatcc_json_parser_set_error@@Base>
  40e5f3:	mov    r15,rax
  40e5f6:	jmp    40e157 <_start@@Base+0xad37>
  40e5fb:	nop    DWORD PTR [rax+rax*1+0x0]
  40e600:	mov    rsi,r12
  40e603:	mov    ecx,0x4
  40e608:	mov    rdx,rbp
  40e60b:	mov    rdi,rbx
  40e60e:	call   4081b0 <_start@@Base+0x4d90>
  40e613:	cmp    r12,rax
  40e616:	mov    rsi,rax
  40e619:	je     40dda0 <_start@@Base+0xa980>
  40e61f:	lea    rax,[rip+0xffffffffffff501a]        # 403640 <_start@@Base+0x220>
  40e626:	sub    rsp,0x8
  40e62a:	mov    r8d,0x3
  40e630:	xor    ecx,ecx
  40e632:	mov    rdx,rbp
  40e635:	mov    rdi,rbx
  40e638:	push   rax
  40e639:	lea    rax,[rip+0x1aa0]        # 4100e0 <_start@@Base+0xccc0>
  40e640:	push   rax
  40e641:	lea    rax,[rip+0x12e38]        # 421480 <__data_start@@Base+0x3c0>
  40e648:	push   rax
  40e649:	mov    r9,QWORD PTR [rsp+0x50]
  40e64e:	call   418fb0 <flatcc_json_parser_union_type_vector@@Base>
  40e653:	add    rsp,0x20
  40e657:	mov    r15,rax
  40e65a:	jmp    40dc9b <_start@@Base+0xa87b>
  40e65f:	nop
  40e660:	mov    rdi,r8
  40e663:	mov    rsi,rbp
  40e666:	mov    QWORD PTR [rsp+0x18],r8
  40e66b:	call   403530 <_start@@Base+0x110>
  40e670:	mov    r8,QWORD PTR [rsp+0x18]
  40e675:	jmp    40e1ab <_start@@Base+0xad8b>
  40e67a:	cmp    BYTE PTR [r15+0x2],0x20
  40e67f:	jle    40dde1 <_start@@Base+0xa9c1>
  40e685:	lea    r13,[r15+0x2]
  40e689:	jmp    40dd10 <_start@@Base+0xa8f0>
  40e68e:	mov    rdi,r8
  40e691:	mov    rsi,rbp
  40e694:	mov    QWORD PTR [rsp+0x18],r8
  40e699:	call   403530 <_start@@Base+0x110>
  40e69e:	mov    r8,QWORD PTR [rsp+0x18]
  40e6a3:	jmp    40e3e2 <_start@@Base+0xafc2>
  40e6a8:	mov    rdi,r8
  40e6ab:	mov    rsi,rbp
  40e6ae:	mov    QWORD PTR [rsp+0x18],r8
  40e6b3:	call   403530 <_start@@Base+0x110>
  40e6b8:	mov    r8,QWORD PTR [rsp+0x18]
  40e6bd:	jmp    40e260 <_start@@Base+0xae40>
  40e6c2:	cmp    r9,0x7
  40e6c6:	jle    40e1f0 <_start@@Base+0xadd0>
  40e6cc:	mov    rsi,r8
  40e6cf:	mov    ecx,0x7
  40e6d4:	mov    rdx,rbp
  40e6d7:	mov    rdi,rbx
  40e6da:	mov    QWORD PTR [rsp+0x18],r8
  40e6df:	call   4081b0 <_start@@Base+0x4d90>
  40e6e4:	mov    r8,QWORD PTR [rsp+0x18]
  40e6e9:	mov    rsi,rax
  40e6ec:	cmp    r8,rax
  40e6ef:	je     40e1f0 <_start@@Base+0xadd0>
  40e6f5:	lea    rax,[rip+0xffffffffffffdc54]        # 40c350 <_start@@Base+0x8f30>
  40e6fc:	mov    ecx,0x1
  40e701:	mov    rdx,rbp
  40e704:	mov    r8d,0x3
  40e70a:	mov    rdi,rbx
  40e70d:	push   rax
  40e70e:	lea    rax,[rip+0x12c0b]        # 421320 <__data_start@@Base+0x260>
  40e715:	push   rax
  40e716:	mov    r9,QWORD PTR [rsp+0x50]
  40e71b:	call   418c60 <flatcc_json_parser_union_type@@Base>
  40e720:	pop    rdx
  40e721:	pop    rcx
  40e722:	jmp    40e113 <_start@@Base+0xacf3>
  40e727:	mov    rsi,r15
  40e72a:	mov    ecx,0x5
  40e72f:	mov    rdx,rbp
  40e732:	mov    rdi,rbx
  40e735:	call   4081b0 <_start@@Base+0x4d90>
  40e73a:	cmp    rax,r15
  40e73d:	mov    rsi,rax
  40e740:	je     40e105 <_start@@Base+0xace5>
  40e746:	lea    rax,[rip+0xffffffffffffdc03]        # 40c350 <_start@@Base+0x8f30>
  40e74d:	sub    rsp,0x8
  40e751:	mov    r8d,0x7
  40e757:	mov    rdi,rbx
  40e75a:	mov    ecx,0x3
  40e75f:	mov    rdx,rbp
  40e762:	push   rax
  40e763:	mov    r9,QWORD PTR [rsp+0x50]
  40e768:	call   418b20 <flatcc_json_parser_union@@Base>
  40e76d:	pop    rdi
  40e76e:	pop    r8
  40e770:	jmp    40e113 <_start@@Base+0xacf3>
  40e775:	mov    rdi,r8
  40e778:	mov    rsi,rbp
  40e77b:	mov    QWORD PTR [rsp+0x18],r8
  40e780:	call   403530 <_start@@Base+0x110>
  40e785:	movabs rdx,0x7261637465725f74
  40e78f:	mov    r8,QWORD PTR [rsp+0x18]
  40e794:	cmp    rax,rdx
  40e797:	jne    40e565 <_start@@Base+0xb145>
  40e79d:	lea    r8,[r15+0x10]
  40e7a1:	mov    r9,rbp
  40e7a4:	sub    r9,r8
  40e7a7:	cmp    r9,0x7
  40e7ab:	jbe    40fff8 <_start@@Base+0xcbd8>
  40e7b1:	movbe  rax,QWORD PTR [r15+0x10]
  40e7b7:	movabs rdx,0xffffff0000000000
  40e7c1:	and    rax,rdx
  40e7c4:	movabs rdx,0x7970650000000000
  40e7ce:	cmp    rax,rdx
  40e7d1:	jne    40e1f0 <_start@@Base+0xadd0>
  40e7d7:	cmp    r9,0x3
  40e7db:	jle    40e1f0 <_start@@Base+0xadd0>
  40e7e1:	mov    rsi,r8
  40e7e4:	mov    ecx,0x3
  40e7e9:	mov    rdx,rbp
  40e7ec:	mov    rdi,rbx
  40e7ef:	mov    QWORD PTR [rsp+0x18],r8
  40e7f4:	call   4081b0 <_start@@Base+0x4d90>
  40e7f9:	mov    r8,QWORD PTR [rsp+0x18]
  40e7fe:	cmp    r8,rax
  40e801:	je     40e1f0 <_start@@Base+0xadd0>
  40e807:	lea    rdi,[rip+0xffffffffffffdb42]        # 40c350 <_start@@Base+0x8f30>
  40e80e:	mov    rdx,rbp
  40e811:	mov    r8d,0x1
  40e817:	xor    ecx,ecx
  40e819:	mov    rsi,rax
  40e81c:	push   rdi
  40e81d:	lea    rdi,[rip+0x12a9c]        # 4212c0 <__data_start@@Base+0x200>
  40e824:	push   rdi
  40e825:	mov    r9,QWORD PTR [rsp+0x50]
  40e82a:	mov    rdi,rbx
  40e82d:	call   418c60 <flatcc_json_parser_union_type@@Base>
  40e832:	pop    r15
  40e834:	pop    rdx
  40e835:	jmp    40e113 <_start@@Base+0xacf3>
  40e83a:	cmp    r9,0x7
  40e83e:	jle    40e1f0 <_start@@Base+0xadd0>
  40e844:	mov    rsi,r8
  40e847:	mov    ecx,0x7
  40e84c:	mov    rdx,rbp
  40e84f:	mov    rdi,rbx
  40e852:	mov    QWORD PTR [rsp+0x18],r8
  40e857:	call   4081b0 <_start@@Base+0x4d90>
  40e85c:	mov    r8,QWORD PTR [rsp+0x18]
  40e861:	mov    rsi,rax
  40e864:	cmp    r8,rax
  40e867:	je     40e1f0 <_start@@Base+0xadd0>
  40e86d:	lea    rax,[rip+0xffffffffffff4ddc]        # 403650 <_start@@Base+0x230>
  40e874:	sub    rsp,0x8
  40e878:	mov    r8d,0x9
  40e87e:	mov    ecx,0x4
  40e883:	mov    rdx,rbp
  40e886:	mov    rdi,rbx
  40e889:	push   rax
  40e88a:	lea    rax,[rip+0xffffffffffffdabf]        # 40c350 <_start@@Base+0x8f30>
  40e891:	push   rax
  40e892:	lea    rax,[rip+0x12a47]        # 4212e0 <__data_start@@Base+0x220>
  40e899:	push   rax
  40e89a:	mov    r9,QWORD PTR [rsp+0x60]
  40e89f:	call   418fb0 <flatcc_json_parser_union_type_vector@@Base>
  40e8a4:	add    rsp,0x20
  40e8a8:	jmp    40e113 <_start@@Base+0xacf3>
  40e8ad:	mov    rsi,r8
  40e8b0:	mov    ecx,0x2
  40e8b5:	mov    rdx,rbp
  40e8b8:	mov    rdi,rbx
  40e8bb:	mov    QWORD PTR [rsp+0x18],r8
  40e8c0:	call   4081b0 <_start@@Base+0x4d90>
  40e8c5:	mov    r8,QWORD PTR [rsp+0x18]
  40e8ca:	mov    rsi,rax
  40e8cd:	cmp    r8,rax
  40e8d0:	je     40e1f0 <_start@@Base+0xadd0>
  40e8d6:	lea    rax,[rip+0xffffffffffffda73]        # 40c350 <_start@@Base+0x8f30>
  40e8dd:	sub    rsp,0x8
  40e8e1:	mov    ecx,0x4
  40e8e6:	mov    r8d,0x9
  40e8ec:	mov    rdx,rbp
  40e8ef:	mov    rdi,rbx
  40e8f2:	push   rax
  40e8f3:	mov    r9,QWORD PTR [rsp+0x50]
  40e8f8:	call   418ed0 <flatcc_json_parser_union_vector@@Base>
  40e8fd:	pop    rcx
  40e8fe:	pop    rsi
  40e8ff:	jmp    40e113 <_start@@Base+0xacf3>
  40e904:	mov    rcx,QWORD PTR [rsp+0x30]
  40e909:	mov    rdx,rbp
  40e90c:	mov    rsi,r13
  40e90f:	mov    rdi,rbx
  40e912:	call   418ac0 <flatcc_json_parser_finalize_unions@@Base>
  40e917:	mov    rdi,QWORD PTR [rbx]
  40e91a:	mov    r13,rax
  40e91d:	call   413a40 <flatcc_builder_end_table@@Base>
  40e922:	mov    edx,eax
  40e924:	mov    rax,QWORD PTR [rsp+0x10]
  40e929:	test   edx,edx
  40e92b:	mov    DWORD PTR [rax],edx
  40e92d:	mov    rax,r13
  40e930:	je     40dd20 <_start@@Base+0xa900>
  40e936:	jmp    40dd33 <_start@@Base+0xa913>
  40e93b:	cmp    BYTE PTR [r15+0x2],0x20
  40e940:	jle    40dfbd <_start@@Base+0xab9d>
  40e946:	lea    r13,[r15+0x2]
  40e94a:	jmp    40dfce <_start@@Base+0xabae>
  40e94f:	mov    rdi,QWORD PTR [rbx]
  40e952:	call   413a40 <flatcc_builder_end_table@@Base>
  40e957:	test   eax,eax
  40e959:	mov    r12d,eax
  40e95c:	je     40df30 <_start@@Base+0xab10>
  40e962:	mov    rdi,QWORD PTR [rbx]
  40e965:	xor    esi,esi
  40e967:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40e96c:	test   rax,rax
  40e96f:	jne    40e4ba <_start@@Base+0xb09a>
  40e975:	mov    r13,r15
  40e978:	jmp    40dd20 <_start@@Base+0xa900>
  40e97d:	cmp    r9,0x6
  40e981:	jle    40e1f0 <_start@@Base+0xadd0>
  40e987:	mov    rsi,r8
  40e98a:	mov    ecx,0x6
  40e98f:	mov    rdx,rbp
  40e992:	mov    rdi,rbx
  40e995:	mov    QWORD PTR [rsp+0x18],r8
  40e99a:	call   4081b0 <_start@@Base+0x4d90>
  40e99f:	mov    r8,QWORD PTR [rsp+0x18]
  40e9a4:	mov    rsi,rax
  40e9a7:	cmp    r8,rax
  40e9aa:	je     40e1f0 <_start@@Base+0xadd0>
  40e9b0:	lea    rax,[rip+0xffffffffffffd999]        # 40c350 <_start@@Base+0x8f30>
  40e9b7:	mov    r8d,0x5
  40e9bd:	mov    ecx,0x2
  40e9c2:	mov    rdx,rbp
  40e9c5:	mov    rdi,rbx
  40e9c8:	push   rax
  40e9c9:	lea    rax,[rip+0x128d0]        # 4212a0 <__data_start@@Base+0x1e0>
  40e9d0:	push   rax
  40e9d1:	mov    r9,QWORD PTR [rsp+0x50]
  40e9d6:	call   418c60 <flatcc_json_parser_union_type@@Base>
  40e9db:	pop    r8
  40e9dd:	pop    r9
  40e9df:	jmp    40e113 <_start@@Base+0xacf3>
  40e9e4:	lea    rsi,[r15+0x1]
  40e9e8:	mov    rax,rbp
  40e9eb:	sub    rax,rsi
  40e9ee:	cmp    rax,0x1
  40e9f2:	jle    40ea01 <_start@@Base+0xb5e1>
  40e9f4:	cmp    BYTE PTR [r15+0x1],0x20
  40e9f9:	jg     40ea0f <_start@@Base+0xb5ef>
  40e9fb:	je     410067 <_start@@Base+0xcc47>
  40ea01:	mov    rdx,rbp
  40ea04:	mov    rdi,rbx
  40ea07:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ea0c:	mov    rsi,rax
  40ea0f:	cmp    rbp,rsi
  40ea12:	je     40ea20 <_start@@Base+0xb600>
  40ea14:	cmp    BYTE PTR [rsi],0x7d
  40ea17:	je     410091 <_start@@Base+0xcc71>
  40ea1d:	nop    DWORD PTR [rax]
  40ea20:	cmp    rbp,rsi
  40ea23:	je     40ed00 <_start@@Base+0xb8e0>
  40ea29:	movzx  eax,BYTE PTR [rsi]
  40ea2c:	cmp    al,0x22
  40ea2e:	je     40ed68 <_start@@Base+0xb948>
  40ea34:	cmp    al,0x2e
  40ea36:	je     40efc0 <_start@@Base+0xbba0>
  40ea3c:	mov    DWORD PTR [rbx+0x14],0x1
  40ea43:	mov    rax,rbp
  40ea46:	sub    rax,rsi
  40ea49:	cmp    rax,0x7
  40ea4d:	jbe    40ed88 <_start@@Base+0xb968>
  40ea53:	movbe  rax,QWORD PTR [rsi]
  40ea58:	movabs rdx,0x746573746a736f6e
  40ea62:	cmp    rax,rdx
  40ea65:	jne    40ed00 <_start@@Base+0xb8e0>
  40ea6b:	lea    rcx,[rsi+0x8]
  40ea6f:	mov    rax,rbp
  40ea72:	sub    rax,rcx
  40ea75:	cmp    rax,0x7
  40ea79:	ja     40ed18 <_start@@Base+0xb8f8>
  40ea7f:	lea    rdx,[rip+0xb6b6]        # 41a13c <_IO_stdin_used@@Base+0x13c>
  40ea86:	movsxd rax,DWORD PTR [rdx+rax*4]
  40ea8a:	add    rax,rdx
  40ea8d:	jmp    rax
  40ea8f:	nop
  40ea90:	movsx  rdi,BYTE PTR [rsi+0xe]
  40ea95:	shl    rdi,0x8
  40ea99:	movsx  rdx,BYTE PTR [rsi+0xd]
  40ea9e:	mov    rax,rdx
  40eaa1:	shl    rax,0x10
  40eaa5:	or     rdi,rax
  40eaa8:	movsx  rdx,BYTE PTR [rsi+0xc]
  40eaad:	mov    rax,rdx
  40eab0:	shl    rax,0x18
  40eab4:	or     rax,rdi
  40eab7:	movsx  rdx,BYTE PTR [rsi+0xb]
  40eabc:	mov    rdi,rdx
  40eabf:	shl    rdi,0x20
  40eac3:	or     rax,rdi
  40eac6:	movsx  rdx,BYTE PTR [rsi+0xa]
  40eacb:	mov    rdi,rdx
  40eace:	shl    rdi,0x28
  40ead2:	or     rdi,rax
  40ead5:	movsx  rdx,BYTE PTR [rsi+0x9]
  40eada:	mov    rax,rdx
  40eadd:	shl    rax,0x30
  40eae1:	or     rdi,rax
  40eae4:	movsx  rdx,BYTE PTR [rsi+0x8]
  40eae9:	mov    rax,rdx
  40eaec:	shl    rax,0x38
  40eaf0:	or     rax,rdi
  40eaf3:	movabs rdx,0x7072656669787061
  40eafd:	cmp    rax,rdx
  40eb00:	jne    40eb90 <_start@@Base+0xb770>
  40eb06:	lea    r13,[rsi+0x10]
  40eb0a:	mov    rcx,rbp
  40eb0d:	sub    rcx,r13
  40eb10:	cmp    rcx,0x7
  40eb14:	ja     40eef0 <_start@@Base+0xbad0>
  40eb1a:	lea    rdx,[rip+0xb63b]        # 41a15c <_IO_stdin_used@@Base+0x15c>
  40eb21:	movsxd rax,DWORD PTR [rdx+rcx*4]
  40eb25:	add    rax,rdx
  40eb28:	jmp    rax
  40eb2a:	nop    WORD PTR [rax+rax*1+0x0]
  40eb30:	xor    edi,edi
  40eb32:	jmp    40ea99 <_start@@Base+0xb679>
  40eb37:	nop    WORD PTR [rax+rax*1+0x0]
  40eb40:	xor    eax,eax
  40eb42:	jmp    40eab7 <_start@@Base+0xb697>
  40eb47:	nop    WORD PTR [rax+rax*1+0x0]
  40eb50:	xor    eax,eax
  40eb52:	jmp    40eac6 <_start@@Base+0xb6a6>
  40eb57:	nop    WORD PTR [rax+rax*1+0x0]
  40eb60:	xor    edi,edi
  40eb62:	jmp    40ead5 <_start@@Base+0xb6b5>
  40eb67:	nop    WORD PTR [rax+rax*1+0x0]
  40eb70:	xor    edi,edi
  40eb72:	jmp    40eae4 <_start@@Base+0xb6c4>
  40eb77:	nop    WORD PTR [rax+rax*1+0x0]
  40eb80:	xor    edi,edi
  40eb82:	jmp    40eaa8 <_start@@Base+0xb688>
  40eb87:	nop    WORD PTR [rax+rax*1+0x0]
  40eb90:	mov    rdx,rbp
  40eb93:	mov    rsi,rcx
  40eb96:	mov    rdi,rbx
  40eb99:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40eb9e:	mov    r12,rax
  40eba1:	mov    rax,rbp
  40eba4:	sub    rax,r12
  40eba7:	cmp    rax,0x1
  40ebab:	jle    40ebba <_start@@Base+0xb79a>
  40ebad:	cmp    BYTE PTR [r12],0x20
  40ebb2:	jg     40ebcb <_start@@Base+0xb7ab>
  40ebb4:	je     40ee40 <_start@@Base+0xba20>
  40ebba:	mov    rsi,r12
  40ebbd:	mov    rdx,rbp
  40ebc0:	mov    rdi,rbx
  40ebc3:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ebc8:	mov    r12,rax
  40ebcb:	cmp    rbp,r12
  40ebce:	je     40ee60 <_start@@Base+0xba40>
  40ebd4:	movzx  eax,BYTE PTR [r12]
  40ebd9:	cmp    al,0x2c
  40ebdb:	je     40ee70 <_start@@Base+0xba50>
  40ebe1:	cmp    al,0x7d
  40ebe3:	je     40ed28 <_start@@Base+0xb908>
  40ebe9:	mov    ecx,0xa
  40ebee:	mov    rdx,rbp
  40ebf1:	mov    rsi,r12
  40ebf4:	mov    rdi,rbx
  40ebf7:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ebfc:	mov    r15,rax
  40ebff:	jmp    40df20 <_start@@Base+0xab00>
  40ec04:	movsx  rdi,BYTE PTR [rsi+0x16]
  40ec09:	shl    rdi,0x8
  40ec0d:	movsx  rdx,BYTE PTR [rsi+0x15]
  40ec12:	mov    rax,rdx
  40ec15:	shl    rax,0x10
  40ec19:	or     rdi,rax
  40ec1c:	movsx  rdx,BYTE PTR [rsi+0x14]
  40ec21:	mov    rax,rdx
  40ec24:	shl    rax,0x18
  40ec28:	or     rax,rdi
  40ec2b:	movsx  rdx,BYTE PTR [rsi+0x13]
  40ec30:	mov    rdi,rdx
  40ec33:	shl    rdi,0x20
  40ec37:	or     rax,rdi
  40ec3a:	movsx  rdx,BYTE PTR [rsi+0x12]
  40ec3f:	mov    rdi,rdx
  40ec42:	shl    rdi,0x28
  40ec46:	or     rdi,rax
  40ec49:	movsx  rdx,BYTE PTR [rsi+0x11]
  40ec4e:	mov    rax,rdx
  40ec51:	shl    rax,0x30
  40ec55:	or     rdi,rax
  40ec58:	movsx  rdx,BYTE PTR [rsi+0x10]
  40ec5d:	mov    rax,rdx
  40ec60:	shl    rax,0x38
  40ec64:	or     rax,rdi
  40ec67:	mov    r12,rax
  40ec6a:	movabs rdx,0x7273696e67320000
  40ec74:	xor    r12w,r12w
  40ec78:	cmp    r12,rdx
  40ec7b:	je     40ef00 <_start@@Base+0xbae0>
  40ec81:	and    rax,0xffffffffff000000
  40ec87:	movabs rdx,0x7273696e67000000
  40ec91:	cmp    rax,rdx
  40ec94:	jne    40eca0 <_start@@Base+0xb880>
  40ec96:	cmp    rcx,0x5
  40ec9a:	jg     40f0e8 <_start@@Base+0xbcc8>
  40eca0:	movabs rax,0x7273696e67330000
  40ecaa:	cmp    r12,rax
  40ecad:	jne    40ecbf <_start@@Base+0xb89f>
  40ecaf:	mov    rax,rbp
  40ecb2:	sub    rax,r13
  40ecb5:	cmp    rax,0x6
  40ecb9:	jg     40f000 <_start@@Base+0xbbe0>
  40ecbf:	mov    rdx,rbp
  40ecc2:	mov    rsi,r13
  40ecc5:	mov    rdi,rbx
  40ecc8:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40eccd:	mov    r12,rax
  40ecd0:	jmp    40eba1 <_start@@Base+0xb781>
  40ecd5:	xor    edi,edi
  40ecd7:	jmp    40ec0d <_start@@Base+0xb7ed>
  40ecdc:	xor    edi,edi
  40ecde:	jmp    40ec1c <_start@@Base+0xb7fc>
  40ece3:	xor    eax,eax
  40ece5:	jmp    40ec2b <_start@@Base+0xb80b>
  40ecea:	xor    eax,eax
  40ecec:	jmp    40ec3a <_start@@Base+0xb81a>
  40ecf1:	xor    edi,edi
  40ecf3:	jmp    40ec49 <_start@@Base+0xb829>
  40ecf8:	xor    edi,edi
  40ecfa:	jmp    40ec58 <_start@@Base+0xb838>
  40ecff:	nop
  40ed00:	mov    rdx,rbp
  40ed03:	mov    rdi,rbx
  40ed06:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40ed0b:	mov    r12,rax
  40ed0e:	jmp    40eba1 <_start@@Base+0xb781>
  40ed13:	nop    DWORD PTR [rax+rax*1+0x0]
  40ed18:	movbe  rax,QWORD PTR [rsi+0x8]
  40ed1e:	jmp    40eaf3 <_start@@Base+0xb6d3>
  40ed23:	nop    DWORD PTR [rax+rax*1+0x0]
  40ed28:	lea    r15,[r12+0x1]
  40ed2d:	mov    rax,rbp
  40ed30:	sub    rax,r15
  40ed33:	cmp    rax,0x1
  40ed37:	jle    40ed4b <_start@@Base+0xb92b>
  40ed39:	cmp    BYTE PTR [r12+0x1],0x20
  40ed3f:	jg     40df20 <_start@@Base+0xab00>
  40ed45:	je     40efe0 <_start@@Base+0xbbc0>
  40ed4b:	mov    rsi,r15
  40ed4e:	mov    rdx,rbp
  40ed51:	mov    rdi,rbx
  40ed54:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ed59:	mov    r15,rax
  40ed5c:	jmp    40df20 <_start@@Base+0xab00>
  40ed61:	nop    DWORD PTR [rax+0x0]
  40ed68:	add    rsi,0x1
  40ed6c:	mov    rax,rbp
  40ed6f:	mov    DWORD PTR [rbx+0x14],0x0
  40ed76:	sub    rax,rsi
  40ed79:	cmp    rax,0x7
  40ed7d:	ja     40ea53 <_start@@Base+0xb633>
  40ed83:	nop    DWORD PTR [rax+rax*1+0x0]
  40ed88:	lea    rdx,[rip+0xb3ed]        # 41a17c <_IO_stdin_used@@Base+0x17c>
  40ed8f:	movsxd rax,DWORD PTR [rdx+rax*4]
  40ed93:	add    rax,rdx
  40ed96:	jmp    rax
  40ed98:	nop    DWORD PTR [rax+rax*1+0x0]
  40eda0:	movsx  rcx,BYTE PTR [rsi+0x6]
  40eda5:	shl    rcx,0x8
  40eda9:	movsx  rdx,BYTE PTR [rsi+0x5]
  40edae:	mov    rax,rdx
  40edb1:	shl    rax,0x10
  40edb5:	or     rcx,rax
  40edb8:	movsx  rdx,BYTE PTR [rsi+0x4]
  40edbd:	mov    rax,rdx
  40edc0:	shl    rax,0x18
  40edc4:	or     rax,rcx
  40edc7:	movsx  rdx,BYTE PTR [rsi+0x3]
  40edcc:	mov    rcx,rdx
  40edcf:	shl    rcx,0x20
  40edd3:	or     rax,rcx
  40edd6:	movsx  rdx,BYTE PTR [rsi+0x2]
  40eddb:	mov    rcx,rdx
  40edde:	shl    rcx,0x28
  40ede2:	or     rcx,rax
  40ede5:	movsx  rdx,BYTE PTR [rsi+0x1]
  40edea:	mov    rax,rdx
  40eded:	shl    rax,0x30
  40edf1:	or     rcx,rax
  40edf4:	movsx  rdx,BYTE PTR [rsi]
  40edf8:	mov    rax,rdx
  40edfb:	shl    rax,0x38
  40edff:	or     rax,rcx
  40ee02:	jmp    40ea58 <_start@@Base+0xb638>
  40ee07:	nop    WORD PTR [rax+rax*1+0x0]
  40ee10:	xor    ecx,ecx
  40ee12:	jmp    40eda9 <_start@@Base+0xb989>
  40ee14:	nop    DWORD PTR [rax+0x0]
  40ee18:	xor    ecx,ecx
  40ee1a:	jmp    40edb8 <_start@@Base+0xb998>
  40ee1c:	nop    DWORD PTR [rax+0x0]
  40ee20:	xor    eax,eax
  40ee22:	jmp    40edc7 <_start@@Base+0xb9a7>
  40ee24:	nop    DWORD PTR [rax+0x0]
  40ee28:	xor    eax,eax
  40ee2a:	jmp    40edd6 <_start@@Base+0xb9b6>
  40ee2c:	nop    DWORD PTR [rax+0x0]
  40ee30:	xor    ecx,ecx
  40ee32:	jmp    40ede5 <_start@@Base+0xb9c5>
  40ee34:	nop    DWORD PTR [rax+0x0]
  40ee38:	xor    ecx,ecx
  40ee3a:	jmp    40edf4 <_start@@Base+0xb9d4>
  40ee3c:	nop    DWORD PTR [rax+0x0]
  40ee40:	cmp    BYTE PTR [r12+0x1],0x20
  40ee46:	jle    40ebba <_start@@Base+0xb79a>
  40ee4c:	add    r12,0x1
  40ee50:	cmp    rbp,r12
  40ee53:	jne    40ebd4 <_start@@Base+0xb7b4>
  40ee59:	nop    DWORD PTR [rax+0x0]
  40ee60:	mov    r15,rbp
  40ee63:	jmp    40df20 <_start@@Base+0xab00>
  40ee68:	nop    DWORD PTR [rax+rax*1+0x0]
  40ee70:	lea    rsi,[r12+0x1]
  40ee75:	mov    rax,rbp
  40ee78:	sub    rax,rsi
  40ee7b:	cmp    rax,0x1
  40ee7f:	jle    40ee8f <_start@@Base+0xba6f>
  40ee81:	cmp    BYTE PTR [r12+0x1],0x20
  40ee87:	jg     40ee9d <_start@@Base+0xba7d>
  40ee89:	je     40f0b0 <_start@@Base+0xbc90>
  40ee8f:	mov    rdx,rbp
  40ee92:	mov    rdi,rbx
  40ee95:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ee9a:	mov    rsi,rax
  40ee9d:	cmp    rbp,rsi
  40eea0:	je     40f0ca <_start@@Base+0xbcaa>
  40eea6:	cmp    BYTE PTR [rsi],0x7d
  40eea9:	jne    40ea20 <_start@@Base+0xb600>
  40eeaf:	lea    r15,[rsi+0x1]
  40eeb3:	mov    rax,rbp
  40eeb6:	sub    rax,r15
  40eeb9:	cmp    rax,0x1
  40eebd:	jle    40ed4b <_start@@Base+0xb92b>
  40eec3:	cmp    BYTE PTR [rsi+0x1],0x20
  40eec7:	jg     40df20 <_start@@Base+0xab00>
  40eecd:	jne    40ed4b <_start@@Base+0xb92b>
  40eed3:	cmp    BYTE PTR [rsi+0x2],0x20
  40eed7:	jle    40ed4b <_start@@Base+0xb92b>
  40eedd:	lea    r15,[rsi+0x2]
  40eee1:	jmp    40df20 <_start@@Base+0xab00>
  40eee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40eef0:	movbe  rax,QWORD PTR [rsi+0x10]
  40eef6:	jmp    40ec67 <_start@@Base+0xb847>
  40eefb:	nop    DWORD PTR [rax+rax*1+0x0]
  40ef00:	cmp    rcx,0x6
  40ef04:	jle    40ecbf <_start@@Base+0xb89f>
  40ef0a:	mov    ecx,0x6
  40ef0f:	mov    rdx,rbp
  40ef12:	mov    rsi,r13
  40ef15:	mov    rdi,rbx
  40ef18:	call   4081b0 <_start@@Base+0x4d90>
  40ef1d:	cmp    r13,rax
  40ef20:	mov    r12,rax
  40ef23:	je     40ecbf <_start@@Base+0xb89f>
  40ef29:	mov    rdi,QWORD PTR [rbx]
  40ef2c:	mov    esi,0x2
  40ef31:	mov    DWORD PTR [rsp+0x28],0x0
  40ef39:	call   413080 <flatcc_builder_start_table@@Base>
  40ef3e:	test   eax,eax
  40ef40:	jne    40ef7b <_start@@Base+0xbb5b>
  40ef42:	cmp    rbp,r12
  40ef45:	je     40ef52 <_start@@Base+0xbb32>
  40ef47:	cmp    BYTE PTR [r12],0x7b
  40ef4c:	je     40f900 <_start@@Base+0xc4e0>
  40ef52:	mov    rsi,r12
  40ef55:	mov    ecx,0x15
  40ef5a:	mov    rdx,rbp
  40ef5d:	mov    rdi,rbx
  40ef60:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ef65:	mov    r12,rax
  40ef68:	nop    DWORD PTR [rax+rax*1+0x0]
  40ef70:	mov    eax,DWORD PTR [rbx+0x20]
  40ef73:	test   eax,eax
  40ef75:	je     40f8b5 <_start@@Base+0xc495>
  40ef7b:	mov    rsi,r12
  40ef7e:	mov    ecx,0x21
  40ef83:	mov    rdx,rbp
  40ef86:	mov    rdi,rbx
  40ef89:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ef8e:	mov    r15d,DWORD PTR [rsp+0x28]
  40ef93:	mov    r12,rax
  40ef96:	test   r15d,r15d
  40ef99:	je     40f0a3 <_start@@Base+0xbc83>
  40ef9f:	mov    rdi,QWORD PTR [rbx]
  40efa2:	mov    esi,0x1
  40efa7:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40efac:	test   rax,rax
  40efaf:	je     40f0a3 <_start@@Base+0xbc83>
  40efb5:	mov    edx,DWORD PTR [rsp+0x28]
  40efb9:	mov    DWORD PTR [rax],edx
  40efbb:	jmp    40eba1 <_start@@Base+0xb781>
  40efc0:	mov    ecx,0x5
  40efc5:	mov    rdx,rbp
  40efc8:	mov    rdi,rbx
  40efcb:	call   416820 <flatcc_json_parser_set_error@@Base>
  40efd0:	mov    rsi,rax
  40efd3:	jmp    40ea43 <_start@@Base+0xb623>
  40efd8:	nop    DWORD PTR [rax+rax*1+0x0]
  40efe0:	cmp    BYTE PTR [r12+0x2],0x20
  40efe6:	jle    40ed4b <_start@@Base+0xb92b>
  40efec:	lea    r15,[r12+0x2]
  40eff1:	jmp    40df20 <_start@@Base+0xab00>
  40eff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f000:	mov    ecx,0x6
  40f005:	mov    rdx,rbp
  40f008:	mov    rsi,r13
  40f00b:	mov    rdi,rbx
  40f00e:	call   4081b0 <_start@@Base+0x4d90>
  40f013:	cmp    r13,rax
  40f016:	mov    r12,rax
  40f019:	je     40ecbf <_start@@Base+0xb89f>
  40f01f:	mov    rdi,QWORD PTR [rbx]
  40f022:	mov    esi,0x2
  40f027:	mov    DWORD PTR [rsp+0x28],0x0
  40f02f:	call   413080 <flatcc_builder_start_table@@Base>
  40f034:	test   eax,eax
  40f036:	jne    40f06d <_start@@Base+0xbc4d>
  40f038:	cmp    rbp,r12
  40f03b:	je     40f048 <_start@@Base+0xbc28>
  40f03d:	cmp    BYTE PTR [r12],0x7b
  40f042:	je     40f159 <_start@@Base+0xbd39>
  40f048:	mov    rsi,r12
  40f04b:	mov    ecx,0x15
  40f050:	mov    rdx,rbp
  40f053:	mov    rdi,rbx
  40f056:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f05b:	mov    r12,rax
  40f05e:	xchg   ax,ax
  40f060:	mov    r9d,DWORD PTR [rbx+0x20]
  40f064:	test   r9d,r9d
  40f067:	je     40f140 <_start@@Base+0xbd20>
  40f06d:	mov    rsi,r12
  40f070:	mov    ecx,0x21
  40f075:	mov    rdx,rbp
  40f078:	mov    rdi,rbx
  40f07b:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f080:	mov    r8d,DWORD PTR [rsp+0x28]
  40f085:	mov    r12,rax
  40f088:	test   r8d,r8d
  40f08b:	je     40f0a3 <_start@@Base+0xbc83>
  40f08d:	mov    rdi,QWORD PTR [rbx]
  40f090:	mov    esi,0x2
  40f095:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40f09a:	test   rax,rax
  40f09d:	jne    40efb5 <_start@@Base+0xbb95>
  40f0a3:	mov    r15,r12
  40f0a6:	jmp    40df30 <_start@@Base+0xab10>
  40f0ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40f0b0:	cmp    BYTE PTR [r12+0x2],0x20
  40f0b6:	jle    40ee8f <_start@@Base+0xba6f>
  40f0bc:	lea    rsi,[r12+0x2]
  40f0c1:	cmp    rbp,rsi
  40f0c4:	jne    40eea6 <_start@@Base+0xba86>
  40f0ca:	mov    ecx,0xa
  40f0cf:	mov    rdx,rbp
  40f0d2:	mov    rsi,rbp
  40f0d5:	mov    rdi,rbx
  40f0d8:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f0dd:	mov    r15,rax
  40f0e0:	jmp    40df20 <_start@@Base+0xab00>
  40f0e5:	nop    DWORD PTR [rax]
  40f0e8:	mov    rsi,r13
  40f0eb:	mov    ecx,0x5
  40f0f0:	mov    rdx,rbp
  40f0f3:	mov    rdi,rbx
  40f0f6:	call   4081b0 <_start@@Base+0x4d90>
  40f0fb:	cmp    r13,rax
  40f0fe:	mov    rsi,rax
  40f101:	je     40eca0 <_start@@Base+0xb880>
  40f107:	lea    rcx,[rsp+0x28]
  40f10c:	mov    rdx,rbp
  40f10f:	mov    rdi,rbx
  40f112:	call   40ccd0 <_start@@Base+0x98b0>
  40f117:	mov    r13d,DWORD PTR [rsp+0x28]
  40f11c:	mov    r12,rax
  40f11f:	test   r13d,r13d
  40f122:	je     40f0a3 <_start@@Base+0xbc83>
  40f128:	mov    rdi,QWORD PTR [rbx]
  40f12b:	xor    esi,esi
  40f12d:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  40f132:	test   rax,rax
  40f135:	jne    40efb5 <_start@@Base+0xbb95>
  40f13b:	jmp    40f0a3 <_start@@Base+0xbc83>
  40f140:	mov    rdi,QWORD PTR [rbx]
  40f143:	call   413a40 <flatcc_builder_end_table@@Base>
  40f148:	test   eax,eax
  40f14a:	mov    DWORD PTR [rsp+0x28],eax
  40f14e:	je     40f06d <_start@@Base+0xbc4d>
  40f154:	jmp    40f08d <_start@@Base+0xbc6d>
  40f159:	lea    rsi,[r12+0x1]
  40f15e:	mov    rax,rbp
  40f161:	sub    rax,rsi
  40f164:	cmp    rax,0x1
  40f168:	jle    40f178 <_start@@Base+0xbd58>
  40f16a:	cmp    BYTE PTR [r12+0x1],0x20
  40f170:	jg     40f186 <_start@@Base+0xbd66>
  40f172:	je     410051 <_start@@Base+0xcc31>
  40f178:	mov    rdx,rbp
  40f17b:	mov    rdi,rbx
  40f17e:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40f183:	mov    rsi,rax
  40f186:	cmp    rbp,rsi
  40f189:	je     40f194 <_start@@Base+0xbd74>
  40f18b:	cmp    BYTE PTR [rsi],0x7d
  40f18e:	je     4100a8 <_start@@Base+0xcc88>
  40f194:	lea    r12,[rip+0xb041]        # 41a1dc <_IO_stdin_used@@Base+0x1dc>
  40f19b:	nop    DWORD PTR [rax+rax*1+0x0]
  40f1a0:	cmp    rbp,rsi
  40f1a3:	je     40f370 <_start@@Base+0xbf50>
  40f1a9:	movzx  eax,BYTE PTR [rsi]
  40f1ac:	cmp    al,0x22
  40f1ae:	je     40f400 <_start@@Base+0xbfe0>
  40f1b4:	cmp    al,0x2e
  40f1b6:	je     40f6f8 <_start@@Base+0xc2d8>
  40f1bc:	mov    DWORD PTR [rbx+0x14],0x1
  40f1c3:	mov    rax,rbp
  40f1c6:	sub    rax,rsi
  40f1c9:	cmp    rax,0x7
  40f1cd:	jbe    40f420 <_start@@Base+0xc000>
  40f1d3:	movbe  rax,QWORD PTR [rsi]
  40f1d8:	movabs rdx,0x616161615f626262
  40f1e2:	cmp    rax,rdx
  40f1e5:	jne    40f370 <_start@@Base+0xbf50>
  40f1eb:	lea    r13,[rsi+0x8]
  40f1ef:	mov    rcx,rbp
  40f1f2:	sub    rcx,r13
  40f1f5:	cmp    rcx,0x7
  40f1f9:	ja     40f388 <_start@@Base+0xbf68>
  40f1ff:	lea    rdx,[rip+0xaf96]        # 41a19c <_IO_stdin_used@@Base+0x19c>
  40f206:	movsxd rax,DWORD PTR [rdx+rcx*4]
  40f20a:	add    rax,rdx
  40f20d:	jmp    rax
  40f20f:	nop
  40f210:	movsx  rdi,BYTE PTR [rsi+0xe]
  40f215:	shl    rdi,0x8
  40f219:	movsx  rdx,BYTE PTR [rsi+0xd]
  40f21e:	mov    rax,rdx
  40f221:	shl    rax,0x10
  40f225:	or     rdi,rax
  40f228:	movsx  rdx,BYTE PTR [rsi+0xc]
  40f22d:	mov    rax,rdx
  40f230:	shl    rax,0x18
  40f234:	or     rax,rdi
  40f237:	movsx  rdx,BYTE PTR [rsi+0xb]
  40f23c:	mov    rdi,rdx
  40f23f:	shl    rdi,0x20
  40f243:	or     rax,rdi
  40f246:	movsx  rdx,BYTE PTR [rsi+0xa]
  40f24b:	mov    rdi,rdx
  40f24e:	shl    rdi,0x28
  40f252:	or     rdi,rax
  40f255:	movsx  rdx,BYTE PTR [rsi+0x9]
  40f25a:	mov    rax,rdx
  40f25d:	shl    rax,0x30
  40f261:	or     rdi,rax
  40f264:	movsx  rdx,BYTE PTR [rsi+0x8]
  40f269:	mov    rax,rdx
  40f26c:	movabs rdx,0x625f73746172745f
  40f276:	shl    rax,0x38
  40f27a:	or     rax,rdi
  40f27d:	cmp    rax,rdx
  40f280:	je     40f3a1 <_start@@Base+0xbf81>
  40f286:	xor    al,al
  40f288:	movabs rdx,0x625f737465707300
  40f292:	cmp    rax,rdx
  40f295:	jne    40f2a1 <_start@@Base+0xbe81>
  40f297:	cmp    rcx,0x7
  40f29b:	jg     40f710 <_start@@Base+0xc2f0>
  40f2a1:	mov    rsi,r13
  40f2a4:	mov    rdx,rbp
  40f2a7:	mov    rdi,rbx
  40f2aa:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40f2af:	mov    r13,rax
  40f2b2:	mov    rax,rbp
  40f2b5:	sub    rax,r13
  40f2b8:	cmp    rax,0x1
  40f2bc:	jle    40f2cb <_start@@Base+0xbeab>
  40f2be:	cmp    BYTE PTR [r13+0x0],0x20
  40f2c3:	jg     40f2dc <_start@@Base+0xbebc>
  40f2c5:	je     40f4d0 <_start@@Base+0xc0b0>
  40f2cb:	mov    rsi,r13
  40f2ce:	mov    rdx,rbp
  40f2d1:	mov    rdi,rbx
  40f2d4:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40f2d9:	mov    r13,rax
  40f2dc:	cmp    rbp,r13
  40f2df:	je     40f4f0 <_start@@Base+0xc0d0>
  40f2e5:	movzx  eax,BYTE PTR [r13+0x0]
  40f2ea:	cmp    al,0x2c
  40f2ec:	je     40f670 <_start@@Base+0xc250>
  40f2f2:	cmp    al,0x7d
  40f2f4:	je     40f3c8 <_start@@Base+0xbfa8>
  40f2fa:	mov    ecx,0xa
  40f2ff:	mov    rdx,rbp
  40f302:	mov    rsi,r13
  40f305:	mov    rdi,rbx
  40f308:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f30d:	mov    r12,rax
  40f310:	jmp    40f060 <_start@@Base+0xbc40>
  40f315:	nop    DWORD PTR [rax]
  40f318:	xor    edi,edi
  40f31a:	jmp    40f219 <_start@@Base+0xbdf9>
  40f31f:	nop
  40f320:	xor    eax,eax
  40f322:	jmp    40f237 <_start@@Base+0xbe17>
  40f327:	nop    WORD PTR [rax+rax*1+0x0]
  40f330:	xor    eax,eax
  40f332:	jmp    40f246 <_start@@Base+0xbe26>
  40f337:	nop    WORD PTR [rax+rax*1+0x0]
  40f340:	xor    edi,edi
  40f342:	jmp    40f255 <_start@@Base+0xbe35>
  40f347:	nop    WORD PTR [rax+rax*1+0x0]
  40f350:	xor    edi,edi
  40f352:	jmp    40f264 <_start@@Base+0xbe44>
  40f357:	nop    WORD PTR [rax+rax*1+0x0]
  40f360:	xor    edi,edi
  40f362:	jmp    40f228 <_start@@Base+0xbe08>
  40f367:	nop    WORD PTR [rax+rax*1+0x0]
  40f370:	mov    rdx,rbp
  40f373:	mov    rdi,rbx
  40f376:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40f37b:	mov    r13,rax
  40f37e:	jmp    40f2b2 <_start@@Base+0xbe92>
  40f383:	nop    DWORD PTR [rax+rax*1+0x0]
  40f388:	movbe  rax,QWORD PTR [rsi+0x8]
  40f38e:	movabs rdx,0x625f73746172745f
  40f398:	cmp    rax,rdx
  40f39b:	jne    40f286 <_start@@Base+0xbe66>
  40f3a1:	lea    r13,[rsi+0x10]
  40f3a5:	mov    rcx,rbp
  40f3a8:	sub    rcx,r13
  40f3ab:	cmp    rcx,0x7
  40f3af:	ja     40f6e8 <_start@@Base+0xc2c8>
  40f3b5:	lea    rdx,[rip+0xae00]        # 41a1bc <_IO_stdin_used@@Base+0x1bc>
  40f3bc:	movsxd rax,DWORD PTR [rdx+rcx*4]
  40f3c0:	add    rax,rdx
  40f3c3:	jmp    rax
  40f3c5:	nop    DWORD PTR [rax]
  40f3c8:	lea    r12,[r13+0x1]
  40f3cc:	mov    rax,rbp
  40f3cf:	sub    rax,r12
  40f3d2:	cmp    rax,0x1
  40f3d6:	jle    40f3e9 <_start@@Base+0xbfc9>
  40f3d8:	cmp    BYTE PTR [r13+0x1],0x20
  40f3dd:	jg     40f060 <_start@@Base+0xbc40>
  40f3e3:	je     40f7f0 <_start@@Base+0xc3d0>
  40f3e9:	mov    rsi,r12
  40f3ec:	mov    rdx,rbp
  40f3ef:	mov    rdi,rbx
  40f3f2:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40f3f7:	mov    r12,rax
  40f3fa:	jmp    40f060 <_start@@Base+0xbc40>
  40f3ff:	nop
  40f400:	add    rsi,0x1
  40f404:	mov    rax,rbp
  40f407:	mov    DWORD PTR [rbx+0x14],0x0
  40f40e:	sub    rax,rsi
  40f411:	cmp    rax,0x7
  40f415:	ja     40f1d3 <_start@@Base+0xbdb3>
  40f41b:	nop    DWORD PTR [rax+rax*1+0x0]
  40f420:	movsxd rax,DWORD PTR [r12+rax*4]
  40f424:	add    rax,r12
  40f427:	jmp    rax
  40f429:	nop    DWORD PTR [rax+0x0]
  40f430:	movsx  rcx,BYTE PTR [rsi+0x6]
  40f435:	shl    rcx,0x8
  40f439:	movsx  rdx,BYTE PTR [rsi+0x5]
  40f43e:	mov    rax,rdx
  40f441:	shl    rax,0x10
  40f445:	or     rcx,rax
  40f448:	movsx  rdx,BYTE PTR [rsi+0x4]
  40f44d:	mov    rax,rdx
  40f450:	shl    rax,0x18
  40f454:	or     rax,rcx
  40f457:	movsx  rdx,BYTE PTR [rsi+0x3]
  40f45c:	mov    rcx,rdx
  40f45f:	shl    rcx,0x20
  40f463:	or     rax,rcx
  40f466:	movsx  rdx,BYTE PTR [rsi+0x2]
  40f46b:	mov    rcx,rdx
  40f46e:	shl    rcx,0x28
  40f472:	or     rcx,rax
  40f475:	movsx  rdx,BYTE PTR [rsi+0x1]
  40f47a:	mov    rax,rdx
  40f47d:	shl    rax,0x30
  40f481:	or     rcx,rax
  40f484:	movsx  rdx,BYTE PTR [rsi]
  40f488:	mov    rax,rdx
  40f48b:	shl    rax,0x38
  40f48f:	or     rax,rcx
  40f492:	jmp    40f1d8 <_start@@Base+0xbdb8>
  40f497:	nop    WORD PTR [rax+rax*1+0x0]
  40f4a0:	xor    ecx,ecx
  40f4a2:	jmp    40f439 <_start@@Base+0xc019>
  40f4a4:	nop    DWORD PTR [rax+0x0]
  40f4a8:	xor    ecx,ecx
  40f4aa:	jmp    40f448 <_start@@Base+0xc028>
  40f4ac:	nop    DWORD PTR [rax+0x0]
  40f4b0:	xor    eax,eax
  40f4b2:	jmp    40f457 <_start@@Base+0xc037>
  40f4b4:	nop    DWORD PTR [rax+0x0]
  40f4b8:	xor    eax,eax
  40f4ba:	jmp    40f466 <_start@@Base+0xc046>
  40f4bc:	nop    DWORD PTR [rax+0x0]
  40f4c0:	xor    ecx,ecx
  40f4c2:	jmp    40f475 <_start@@Base+0xc055>
  40f4c4:	nop    DWORD PTR [rax+0x0]
  40f4c8:	xor    ecx,ecx
  40f4ca:	jmp    40f484 <_start@@Base+0xc064>
  40f4cc:	nop    DWORD PTR [rax+0x0]
  40f4d0:	cmp    BYTE PTR [r13+0x1],0x20
  40f4d5:	jle    40f2cb <_start@@Base+0xbeab>
  40f4db:	add    r13,0x1
  40f4df:	cmp    rbp,r13
  40f4e2:	jne    40f2e5 <_start@@Base+0xbec5>
  40f4e8:	nop    DWORD PTR [rax+rax*1+0x0]
  40f4f0:	mov    r12,rbp
  40f4f3:	jmp    40f060 <_start@@Base+0xbc40>
  40f4f8:	movsx  rdi,BYTE PTR [rsi+0x16]
  40f4fd:	shl    rdi,0x8
  40f501:	movsx  rdx,BYTE PTR [rsi+0x15]
  40f506:	mov    rax,rdx
  40f509:	shl    rax,0x10
  40f50d:	or     rdi,rax
  40f510:	movsx  rdx,BYTE PTR [rsi+0x14]
  40f515:	mov    rax,rdx
  40f518:	shl    rax,0x18
  40f51c:	or     rax,rdi
  40f51f:	movsx  rdx,BYTE PTR [rsi+0x13]
  40f524:	mov    rdi,rdx
  40f527:	shl    rdi,0x20
  40f52b:	or     rax,rdi
  40f52e:	movsx  rdx,BYTE PTR [rsi+0x12]
  40f533:	mov    rdi,rdx
  40f536:	shl    rdi,0x28
  40f53a:	or     rdi,rax
  40f53d:	movsx  rdx,BYTE PTR [rsi+0x11]
  40f542:	mov    rax,rdx
  40f545:	shl    rax,0x30
  40f549:	or     rdi,rax
  40f54c:	movsx  rdx,BYTE PTR [rsi+0x10]
  40f551:	mov    rax,rdx
  40f554:	shl    rax,0x38
  40f558:	or     rax,rdi
  40f55b:	and    rax,0xffffffffff000000
  40f561:	movabs rdx,0x7374657073000000
  40f56b:	cmp    rax,rdx
  40f56e:	jne    40f2a1 <_start@@Base+0xbe81>
  40f574:	cmp    rcx,0x5
  40f578:	jle    40f2a1 <_start@@Base+0xbe81>
  40f57e:	mov    ecx,0x5
  40f583:	mov    rdx,rbp
  40f586:	mov    rsi,r13
  40f589:	mov    rdi,rbx
  40f58c:	call   4081b0 <_start@@Base+0x4d90>
  40f591:	cmp    r13,rax
  40f594:	mov    r15,rax
  40f597:	je     40f2a1 <_start@@Base+0xbe81>
  40f59d:	cmp    rbp,rax
  40f5a0:	mov    DWORD PTR [rsp+0x2c],0x0
  40f5a8:	mov    QWORD PTR [rsp+0x40],0x0
  40f5b1:	mov    DWORD PTR [rsp+0x38],0x0
  40f5b9:	je     40f8d0 <_start@@Base+0xc4b0>
  40f5bf:	mov    r8,QWORD PTR [rsp]
  40f5c3:	mov    rcx,r14
  40f5c6:	mov    rdx,rbp
  40f5c9:	mov    rsi,rax
  40f5cc:	mov    rdi,rbx
  40f5cf:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40f5d4:	cmp    r15,rax
  40f5d7:	mov    r13,rax
  40f5da:	je     40f8d0 <_start@@Base+0xc4b0>
  40f5e0:	mov    r11d,DWORD PTR [rsp+0x38]
  40f5e5:	mov    ecx,0x8
  40f5ea:	test   r11d,r11d
  40f5ed:	jne    40f865 <_start@@Base+0xc445>
  40f5f3:	mov    rax,QWORD PTR [rsp+0x40]
  40f5f8:	mov    edx,0xffffffff
  40f5fd:	cmp    rax,rdx
  40f600:	ja     40f860 <_start@@Base+0xc440>
  40f606:	mov    edx,eax
  40f608:	mov    DWORD PTR [rsp+0x2c],eax
  40f60c:	test   edx,edx
  40f60e:	jne    40f61a <_start@@Base+0xc1fa>
  40f610:	test   BYTE PTR [rbx+0x10],0x2
  40f614:	je     40f2b2 <_start@@Base+0xbe92>
  40f61a:	mov    rdi,QWORD PTR [rbx]
  40f61d:	mov    ecx,0x4
  40f622:	mov    edx,0x4
  40f627:	mov    esi,0x1
  40f62c:	call   414920 <flatcc_builder_table_add@@Base>
  40f631:	test   rax,rax
  40f634:	je     40f8ad <_start@@Base+0xc48d>
  40f63a:	mov    edx,DWORD PTR [rsp+0x2c]
  40f63e:	mov    DWORD PTR [rax],edx
  40f640:	jmp    40f2b2 <_start@@Base+0xbe92>
  40f645:	xor    edi,edi
  40f647:	jmp    40f501 <_start@@Base+0xc0e1>
  40f64c:	xor    edi,edi
  40f64e:	jmp    40f510 <_start@@Base+0xc0f0>
  40f653:	xor    eax,eax
  40f655:	jmp    40f51f <_start@@Base+0xc0ff>
  40f65a:	xor    eax,eax
  40f65c:	jmp    40f52e <_start@@Base+0xc10e>
  40f661:	xor    edi,edi
  40f663:	jmp    40f53d <_start@@Base+0xc11d>
  40f668:	xor    edi,edi
  40f66a:	jmp    40f54c <_start@@Base+0xc12c>
  40f66f:	nop
  40f670:	lea    rsi,[r13+0x1]
  40f674:	mov    rax,rbp
  40f677:	sub    rax,rsi
  40f67a:	cmp    rax,0x1
  40f67e:	jle    40f68d <_start@@Base+0xc26d>
  40f680:	cmp    BYTE PTR [r13+0x1],0x20
  40f685:	jg     40f69b <_start@@Base+0xc27b>
  40f687:	je     40f808 <_start@@Base+0xc3e8>
  40f68d:	mov    rdx,rbp
  40f690:	mov    rdi,rbx
  40f693:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40f698:	mov    rsi,rax
  40f69b:	cmp    rbp,rsi
  40f69e:	je     40f820 <_start@@Base+0xc400>
  40f6a4:	cmp    BYTE PTR [rsi],0x7d
  40f6a7:	jne    40f1a0 <_start@@Base+0xbd80>
  40f6ad:	lea    r12,[rsi+0x1]
  40f6b1:	mov    rax,rbp
  40f6b4:	sub    rax,r12
  40f6b7:	cmp    rax,0x1
  40f6bb:	jle    40f3e9 <_start@@Base+0xbfc9>
  40f6c1:	cmp    BYTE PTR [rsi+0x1],0x20
  40f6c5:	jg     40f060 <_start@@Base+0xbc40>
  40f6cb:	jne    40f3e9 <_start@@Base+0xbfc9>
  40f6d1:	cmp    BYTE PTR [rsi+0x2],0x20
  40f6d5:	jle    40f3e9 <_start@@Base+0xbfc9>
  40f6db:	lea    r12,[rsi+0x2]
  40f6df:	jmp    40f060 <_start@@Base+0xbc40>
  40f6e4:	nop    DWORD PTR [rax+0x0]
  40f6e8:	movbe  rax,QWORD PTR [rsi+0x10]
  40f6ee:	jmp    40f55b <_start@@Base+0xc13b>
  40f6f3:	nop    DWORD PTR [rax+rax*1+0x0]
  40f6f8:	mov    ecx,0x5
  40f6fd:	mov    rdx,rbp
  40f700:	mov    rdi,rbx
  40f703:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f708:	mov    rsi,rax
  40f70b:	jmp    40f1c3 <_start@@Base+0xbda3>
  40f710:	mov    ecx,0x7
  40f715:	mov    rdx,rbp
  40f718:	mov    rsi,r13
  40f71b:	mov    rdi,rbx
  40f71e:	call   4081b0 <_start@@Base+0x4d90>
  40f723:	cmp    r13,rax
  40f726:	mov    r15,rax
  40f729:	je     40f2a1 <_start@@Base+0xbe81>
  40f72f:	cmp    rbp,rax
  40f732:	mov    QWORD PTR [rsp+0x38],0x0
  40f73b:	mov    QWORD PTR [rsp+0x40],0x0
  40f744:	mov    DWORD PTR [rsp+0x2c],0x0
  40f74c:	je     40f888 <_start@@Base+0xc468>
  40f752:	mov    r8,QWORD PTR [rsp]
  40f756:	mov    rcx,QWORD PTR [rsp+0x8]
  40f75b:	mov    rdx,rbp
  40f75e:	mov    rsi,rax
  40f761:	mov    rdi,rbx
  40f764:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40f769:	cmp    r15,rax
  40f76c:	mov    r13,rax
  40f76f:	je     40f888 <_start@@Base+0xc468>
  40f775:	mov    r10d,DWORD PTR [rsp+0x2c]
  40f77a:	mov    rax,QWORD PTR [rsp+0x40]
  40f77f:	test   r10d,r10d
  40f782:	je     40f7e0 <_start@@Base+0xc3c0>
  40f784:	movabs rdx,0x8000000000000000
  40f78e:	mov    ecx,0x8
  40f793:	cmp    rax,rdx
  40f796:	ja     40f840 <_start@@Base+0xc420>
  40f79c:	neg    rax
  40f79f:	mov    QWORD PTR [rsp+0x38],rax
  40f7a4:	test   rax,rax
  40f7a7:	jne    40f7b3 <_start@@Base+0xc393>
  40f7a9:	test   BYTE PTR [rbx+0x10],0x2
  40f7ad:	je     40f2b2 <_start@@Base+0xbe92>
  40f7b3:	mov    rdi,QWORD PTR [rbx]
  40f7b6:	xor    esi,esi
  40f7b8:	mov    ecx,0x8
  40f7bd:	mov    edx,0x8
  40f7c2:	call   414920 <flatcc_builder_table_add@@Base>
  40f7c7:	test   rax,rax
  40f7ca:	je     40f8ad <_start@@Base+0xc48d>
  40f7d0:	mov    rdx,QWORD PTR [rsp+0x38]
  40f7d5:	mov    QWORD PTR [rax],rdx
  40f7d8:	jmp    40f2b2 <_start@@Base+0xbe92>
  40f7dd:	nop    DWORD PTR [rax]
  40f7e0:	test   rax,rax
  40f7e3:	js     40f83b <_start@@Base+0xc41b>
  40f7e5:	mov    QWORD PTR [rsp+0x38],rax
  40f7ea:	jmp    40f7a4 <_start@@Base+0xc384>
  40f7ec:	nop    DWORD PTR [rax+0x0]
  40f7f0:	cmp    BYTE PTR [r13+0x2],0x20
  40f7f5:	jle    40f3e9 <_start@@Base+0xbfc9>
  40f7fb:	lea    r12,[r13+0x2]
  40f7ff:	jmp    40f060 <_start@@Base+0xbc40>
  40f804:	nop    DWORD PTR [rax+0x0]
  40f808:	cmp    BYTE PTR [r13+0x2],0x20
  40f80d:	jle    40f68d <_start@@Base+0xc26d>
  40f813:	lea    rsi,[r13+0x2]
  40f817:	cmp    rbp,rsi
  40f81a:	jne    40f6a4 <_start@@Base+0xc284>
  40f820:	mov    ecx,0xa
  40f825:	mov    rdx,rbp
  40f828:	mov    rsi,rbp
  40f82b:	mov    rdi,rbx
  40f82e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f833:	mov    r12,rax
  40f836:	jmp    40f060 <_start@@Base+0xbc40>
  40f83b:	mov    ecx,0x7
  40f840:	mov    rsi,r13
  40f843:	mov    rdx,rbp
  40f846:	mov    rdi,rbx
  40f849:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f84e:	cmp    r15,rax
  40f851:	mov    r13,rax
  40f854:	je     40f888 <_start@@Base+0xc468>
  40f856:	mov    rax,QWORD PTR [rsp+0x38]
  40f85b:	jmp    40f7a4 <_start@@Base+0xc384>
  40f860:	mov    ecx,0x7
  40f865:	mov    rsi,r13
  40f868:	mov    rdx,rbp
  40f86b:	mov    rdi,rbx
  40f86e:	call   416820 <flatcc_json_parser_set_error@@Base>
  40f873:	cmp    r15,rax
  40f876:	mov    r13,rax
  40f879:	je     40f8d0 <_start@@Base+0xc4b0>
  40f87b:	mov    edx,DWORD PTR [rsp+0x2c]
  40f87f:	jmp    40f60c <_start@@Base+0xc1ec>
  40f884:	nop    DWORD PTR [rax+0x0]
  40f888:	lea    rcx,[rip+0x11ab1]        # 421340 <__data_start@@Base+0x280>
  40f88f:	mov    r8,r14
  40f892:	mov    rdx,rbp
  40f895:	mov    rsi,r15
  40f898:	mov    rdi,rbx
  40f89b:	call   405800 <_start@@Base+0x23e0>
  40f8a0:	cmp    rax,r15
  40f8a3:	mov    r13,rax
  40f8a6:	je     40f8ad <_start@@Base+0xc48d>
  40f8a8:	cmp    rbp,rax
  40f8ab:	jne    40f856 <_start@@Base+0xc436>
  40f8ad:	mov    r12,r13
  40f8b0:	jmp    40f06d <_start@@Base+0xbc4d>
  40f8b5:	mov    rdi,QWORD PTR [rbx]
  40f8b8:	call   413a40 <flatcc_builder_end_table@@Base>
  40f8bd:	test   eax,eax
  40f8bf:	mov    DWORD PTR [rsp+0x28],eax
  40f8c3:	je     40ef7b <_start@@Base+0xbb5b>
  40f8c9:	jmp    40ef9f <_start@@Base+0xbb7f>
  40f8ce:	xchg   ax,ax
  40f8d0:	mov    r8,QWORD PTR [rsp+0x8]
  40f8d5:	lea    rcx,[rip+0x11a84]        # 421360 <__data_start@@Base+0x2a0>
  40f8dc:	mov    rdx,rbp
  40f8df:	mov    rsi,r15
  40f8e2:	mov    rdi,rbx
  40f8e5:	call   405ee0 <_start@@Base+0x2ac0>
  40f8ea:	cmp    rax,r15
  40f8ed:	mov    r13,rax
  40f8f0:	je     40f8ad <_start@@Base+0xc48d>
  40f8f2:	cmp    rbp,rax
  40f8f5:	jne    40f87b <_start@@Base+0xc45b>
  40f8fb:	jmp    40f8ad <_start@@Base+0xc48d>
  40f8fd:	nop    DWORD PTR [rax]
  40f900:	lea    rsi,[r12+0x1]
  40f905:	mov    rax,rbp
  40f908:	sub    rax,rsi
  40f90b:	cmp    rax,0x1
  40f90f:	jle    40f91f <_start@@Base+0xc4ff>
  40f911:	cmp    BYTE PTR [r12+0x1],0x20
  40f917:	jg     40f92d <_start@@Base+0xc50d>
  40f919:	je     41007b <_start@@Base+0xcc5b>
  40f91f:	mov    rdx,rbp
  40f922:	mov    rdi,rbx
  40f925:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40f92a:	mov    rsi,rax
  40f92d:	cmp    rbp,rsi
  40f930:	je     40f93b <_start@@Base+0xc51b>
  40f932:	cmp    BYTE PTR [rsi],0x7d
  40f935:	je     4100bf <_start@@Base+0xcc9f>
  40f93b:	lea    r12,[rip+0xa8da]        # 41a21c <_IO_stdin_used@@Base+0x21c>
  40f942:	nop    WORD PTR [rax+rax*1+0x0]
  40f948:	cmp    rbp,rsi
  40f94b:	je     40fb20 <_start@@Base+0xc700>
  40f951:	movzx  eax,BYTE PTR [rsi]
  40f954:	cmp    al,0x22
  40f956:	je     40fb80 <_start@@Base+0xc760>
  40f95c:	cmp    al,0x2e
  40f95e:	je     40fdd8 <_start@@Base+0xc9b8>
  40f964:	mov    DWORD PTR [rbx+0x14],0x1
  40f96b:	mov    rax,rbp
  40f96e:	sub    rax,rsi
  40f971:	cmp    rax,0x7
  40f975:	jbe    40fba0 <_start@@Base+0xc780>
  40f97b:	movbe  rax,QWORD PTR [rsi]
  40f980:	movabs rdx,0x616161615f626262
  40f98a:	cmp    rax,rdx
  40f98d:	jne    40fb20 <_start@@Base+0xc700>
  40f993:	lea    r13,[rsi+0x8]
  40f997:	mov    rdx,rbp
  40f99a:	sub    rdx,r13
  40f99d:	cmp    rdx,0x7
  40f9a1:	ja     40fb38 <_start@@Base+0xc718>
  40f9a7:	lea    rcx,[rip+0xa84e]        # 41a1fc <_IO_stdin_used@@Base+0x1fc>
  40f9ae:	movsxd rax,DWORD PTR [rcx+rdx*4]
  40f9b2:	add    rax,rcx
  40f9b5:	jmp    rax
  40f9b7:	nop    WORD PTR [rax+rax*1+0x0]
  40f9c0:	movsx  rcx,BYTE PTR [rsi+0xe]
  40f9c5:	shl    rcx,0x8
  40f9c9:	movsx  rdi,BYTE PTR [rsi+0xd]
  40f9ce:	mov    rax,rdi
  40f9d1:	shl    rax,0x10
  40f9d5:	or     rcx,rax
  40f9d8:	movsx  rdi,BYTE PTR [rsi+0xc]
  40f9dd:	mov    rax,rdi
  40f9e0:	shl    rax,0x18
  40f9e4:	or     rax,rcx
  40f9e7:	movsx  rdi,BYTE PTR [rsi+0xb]
  40f9ec:	shl    rdi,0x20
  40f9f0:	or     rax,rdi
  40f9f3:	movsx  rdi,BYTE PTR [rsi+0xa]
  40f9f8:	shl    rdi,0x28
  40f9fc:	mov    rcx,rdi
  40f9ff:	or     rcx,rax
  40fa02:	movsx  rdi,BYTE PTR [rsi+0x9]
  40fa07:	mov    rax,rdi
  40fa0a:	shl    rax,0x30
  40fa0e:	or     rcx,rax
  40fa11:	movsx  rax,BYTE PTR [rsi+0x8]
  40fa16:	shl    rax,0x38
  40fa1a:	or     rax,rcx
  40fa1d:	mov    rsi,rax
  40fa20:	movabs rcx,0x625f737465707300
  40fa2a:	xor    sil,sil
  40fa2d:	cmp    rsi,rcx
  40fa30:	je     40fc80 <_start@@Base+0xc860>
  40fa36:	movabs rcx,0x625f73746172745f
  40fa40:	cmp    rax,rcx
  40fa43:	jne    40fa4f <_start@@Base+0xc62f>
  40fa45:	cmp    rdx,0x8
  40fa49:	jg     40fdf0 <_start@@Base+0xc9d0>
  40fa4f:	mov    rsi,r13
  40fa52:	mov    rdx,rbp
  40fa55:	mov    rdi,rbx
  40fa58:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40fa5d:	mov    r13,rax
  40fa60:	mov    rax,rbp
  40fa63:	sub    rax,r13
  40fa66:	cmp    rax,0x1
  40fa6a:	jle    40fa79 <_start@@Base+0xc659>
  40fa6c:	cmp    BYTE PTR [r13+0x0],0x20
  40fa71:	jg     40fa8a <_start@@Base+0xc66a>
  40fa73:	je     40fc50 <_start@@Base+0xc830>
  40fa79:	mov    rsi,r13
  40fa7c:	mov    rdx,rbp
  40fa7f:	mov    rdi,rbx
  40fa82:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40fa87:	mov    r13,rax
  40fa8a:	cmp    rbp,r13
  40fa8d:	je     40fc70 <_start@@Base+0xc850>
  40fa93:	movzx  eax,BYTE PTR [r13+0x0]
  40fa98:	cmp    al,0x2c
  40fa9a:	je     40fd60 <_start@@Base+0xc940>
  40faa0:	cmp    al,0x7d
  40faa2:	je     40fb48 <_start@@Base+0xc728>
  40faa8:	mov    ecx,0xa
  40faad:	mov    rdx,rbp
  40fab0:	mov    rsi,r13
  40fab3:	mov    rdi,rbx
  40fab6:	call   416820 <flatcc_json_parser_set_error@@Base>
  40fabb:	mov    r12,rax
  40fabe:	jmp    40ef70 <_start@@Base+0xbb50>
  40fac3:	nop    DWORD PTR [rax+rax*1+0x0]
  40fac8:	xor    ecx,ecx
  40faca:	jmp    40f9c9 <_start@@Base+0xc5a9>
  40facf:	nop
  40fad0:	xor    ecx,ecx
  40fad2:	jmp    40f9d8 <_start@@Base+0xc5b8>
  40fad7:	nop    WORD PTR [rax+rax*1+0x0]
  40fae0:	xor    eax,eax
  40fae2:	jmp    40f9e7 <_start@@Base+0xc5c7>
  40fae7:	nop    WORD PTR [rax+rax*1+0x0]
  40faf0:	xor    eax,eax
  40faf2:	jmp    40f9f3 <_start@@Base+0xc5d3>
  40faf7:	nop    WORD PTR [rax+rax*1+0x0]
  40fb00:	xor    ecx,ecx
  40fb02:	jmp    40fa02 <_start@@Base+0xc5e2>
  40fb07:	nop    WORD PTR [rax+rax*1+0x0]
  40fb10:	xor    ecx,ecx
  40fb12:	jmp    40fa11 <_start@@Base+0xc5f1>
  40fb17:	nop    WORD PTR [rax+rax*1+0x0]
  40fb20:	mov    rdx,rbp
  40fb23:	mov    rdi,rbx
  40fb26:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  40fb2b:	mov    r13,rax
  40fb2e:	jmp    40fa60 <_start@@Base+0xc640>
  40fb33:	nop    DWORD PTR [rax+rax*1+0x0]
  40fb38:	movbe  rax,QWORD PTR [rsi+0x8]
  40fb3e:	jmp    40fa1d <_start@@Base+0xc5fd>
  40fb43:	nop    DWORD PTR [rax+rax*1+0x0]
  40fb48:	lea    r12,[r13+0x1]
  40fb4c:	mov    rax,rbp
  40fb4f:	sub    rax,r12
  40fb52:	cmp    rax,0x1
  40fb56:	jle    40fb69 <_start@@Base+0xc749>
  40fb58:	cmp    BYTE PTR [r13+0x1],0x20
  40fb5d:	jg     40ef70 <_start@@Base+0xbb50>
  40fb63:	je     40fee8 <_start@@Base+0xcac8>
  40fb69:	mov    rsi,r12
  40fb6c:	mov    rdx,rbp
  40fb6f:	mov    rdi,rbx
  40fb72:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40fb77:	mov    r12,rax
  40fb7a:	jmp    40ef70 <_start@@Base+0xbb50>
  40fb7f:	nop
  40fb80:	add    rsi,0x1
  40fb84:	mov    rax,rbp
  40fb87:	mov    DWORD PTR [rbx+0x14],0x0
  40fb8e:	sub    rax,rsi
  40fb91:	cmp    rax,0x7
  40fb95:	ja     40f97b <_start@@Base+0xc55b>
  40fb9b:	nop    DWORD PTR [rax+rax*1+0x0]
  40fba0:	movsxd rax,DWORD PTR [r12+rax*4]
  40fba4:	add    rax,r12
  40fba7:	jmp    rax
  40fba9:	nop    DWORD PTR [rax+0x0]
  40fbb0:	movsx  rcx,BYTE PTR [rsi+0x6]
  40fbb5:	shl    rcx,0x8
  40fbb9:	movsx  rdx,BYTE PTR [rsi+0x5]
  40fbbe:	mov    rax,rdx
  40fbc1:	shl    rax,0x10
  40fbc5:	or     rcx,rax
  40fbc8:	movsx  rdx,BYTE PTR [rsi+0x4]
  40fbcd:	mov    rax,rdx
  40fbd0:	shl    rax,0x18
  40fbd4:	or     rax,rcx
  40fbd7:	movsx  rdx,BYTE PTR [rsi+0x3]
  40fbdc:	mov    rcx,rdx
  40fbdf:	shl    rcx,0x20
  40fbe3:	or     rax,rcx
  40fbe6:	movsx  rdx,BYTE PTR [rsi+0x2]
  40fbeb:	mov    rcx,rdx
  40fbee:	shl    rcx,0x28
  40fbf2:	or     rcx,rax
  40fbf5:	movsx  rdx,BYTE PTR [rsi+0x1]
  40fbfa:	mov    rax,rdx
  40fbfd:	shl    rax,0x30
  40fc01:	or     rcx,rax
  40fc04:	movsx  rdx,BYTE PTR [rsi]
  40fc08:	mov    rax,rdx
  40fc0b:	shl    rax,0x38
  40fc0f:	or     rax,rcx
  40fc12:	jmp    40f980 <_start@@Base+0xc560>
  40fc17:	nop    WORD PTR [rax+rax*1+0x0]
  40fc20:	xor    ecx,ecx
  40fc22:	jmp    40fbb9 <_start@@Base+0xc799>
  40fc24:	nop    DWORD PTR [rax+0x0]
  40fc28:	xor    ecx,ecx
  40fc2a:	jmp    40fbc8 <_start@@Base+0xc7a8>
  40fc2c:	nop    DWORD PTR [rax+0x0]
  40fc30:	xor    eax,eax
  40fc32:	jmp    40fbd7 <_start@@Base+0xc7b7>
  40fc34:	nop    DWORD PTR [rax+0x0]
  40fc38:	xor    eax,eax
  40fc3a:	jmp    40fbe6 <_start@@Base+0xc7c6>
  40fc3c:	nop    DWORD PTR [rax+0x0]
  40fc40:	xor    ecx,ecx
  40fc42:	jmp    40fbf5 <_start@@Base+0xc7d5>
  40fc44:	nop    DWORD PTR [rax+0x0]
  40fc48:	xor    ecx,ecx
  40fc4a:	jmp    40fc04 <_start@@Base+0xc7e4>
  40fc4c:	nop    DWORD PTR [rax+0x0]
  40fc50:	cmp    BYTE PTR [r13+0x1],0x20
  40fc55:	jle    40fa79 <_start@@Base+0xc659>
  40fc5b:	add    r13,0x1
  40fc5f:	cmp    rbp,r13
  40fc62:	jne    40fa93 <_start@@Base+0xc673>
  40fc68:	nop    DWORD PTR [rax+rax*1+0x0]
  40fc70:	mov    r12,rbp
  40fc73:	jmp    40ef70 <_start@@Base+0xbb50>
  40fc78:	nop    DWORD PTR [rax+rax*1+0x0]
  40fc80:	cmp    rdx,0x7
  40fc84:	jle    40fa4f <_start@@Base+0xc62f>
  40fc8a:	mov    ecx,0x7
  40fc8f:	mov    rdx,rbp
  40fc92:	mov    rsi,r13
  40fc95:	mov    rdi,rbx
  40fc98:	call   4081b0 <_start@@Base+0x4d90>
  40fc9d:	cmp    r13,rax
  40fca0:	mov    r15,rax
  40fca3:	je     40fa4f <_start@@Base+0xc62f>
  40fca9:	cmp    rbp,rax
  40fcac:	mov    QWORD PTR [rsp+0x38],0x0
  40fcb5:	mov    QWORD PTR [rsp+0x40],0x0
  40fcbe:	mov    DWORD PTR [rsp+0x2c],0x0
  40fcc6:	je     40ff98 <_start@@Base+0xcb78>
  40fccc:	mov    r8,QWORD PTR [rsp]
  40fcd0:	mov    rcx,QWORD PTR [rsp+0x8]
  40fcd5:	mov    rdx,rbp
  40fcd8:	mov    rsi,rax
  40fcdb:	mov    rdi,rbx
  40fcde:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40fce3:	cmp    r15,rax
  40fce6:	mov    r13,rax
  40fce9:	je     40ff98 <_start@@Base+0xcb78>
  40fcef:	mov    edx,DWORD PTR [rsp+0x2c]
  40fcf3:	mov    rax,QWORD PTR [rsp+0x40]
  40fcf8:	test   edx,edx
  40fcfa:	je     40feb0 <_start@@Base+0xca90>
  40fd00:	movabs rdx,0x8000000000000000
  40fd0a:	mov    ecx,0x8
  40fd0f:	cmp    rax,rdx
  40fd12:	ja     40ff38 <_start@@Base+0xcb18>
  40fd18:	neg    rax
  40fd1b:	mov    QWORD PTR [rsp+0x38],rax
  40fd20:	test   rax,rax
  40fd23:	jne    40fd2f <_start@@Base+0xc90f>
  40fd25:	test   BYTE PTR [rbx+0x10],0x2
  40fd29:	je     40fa60 <_start@@Base+0xc640>
  40fd2f:	mov    rdi,QWORD PTR [rbx]
  40fd32:	xor    esi,esi
  40fd34:	mov    ecx,0x8
  40fd39:	mov    edx,0x8
  40fd3e:	call   414920 <flatcc_builder_table_add@@Base>
  40fd43:	test   rax,rax
  40fd46:	je     40ff8b <_start@@Base+0xcb6b>
  40fd4c:	mov    rdx,QWORD PTR [rsp+0x38]
  40fd51:	mov    QWORD PTR [rax],rdx
  40fd54:	jmp    40fa60 <_start@@Base+0xc640>
  40fd59:	nop    DWORD PTR [rax+0x0]
  40fd60:	lea    rsi,[r13+0x1]
  40fd64:	mov    rax,rbp
  40fd67:	sub    rax,rsi
  40fd6a:	cmp    rax,0x1
  40fd6e:	jle    40fd7d <_start@@Base+0xc95d>
  40fd70:	cmp    BYTE PTR [r13+0x1],0x20
  40fd75:	jg     40fd8b <_start@@Base+0xc96b>
  40fd77:	je     40ff00 <_start@@Base+0xcae0>
  40fd7d:	mov    rdx,rbp
  40fd80:	mov    rdi,rbx
  40fd83:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40fd88:	mov    rsi,rax
  40fd8b:	cmp    rbp,rsi
  40fd8e:	je     40ff18 <_start@@Base+0xcaf8>
  40fd94:	cmp    BYTE PTR [rsi],0x7d
  40fd97:	jne    40f948 <_start@@Base+0xc528>
  40fd9d:	lea    r12,[rsi+0x1]
  40fda1:	mov    rax,rbp
  40fda4:	sub    rax,r12
  40fda7:	cmp    rax,0x1
  40fdab:	jle    40fb69 <_start@@Base+0xc749>
  40fdb1:	cmp    BYTE PTR [rsi+0x1],0x20
  40fdb5:	jg     40ef70 <_start@@Base+0xbb50>
  40fdbb:	jne    40fb69 <_start@@Base+0xc749>
  40fdc1:	cmp    BYTE PTR [rsi+0x2],0x20
  40fdc5:	jle    40fb69 <_start@@Base+0xc749>
  40fdcb:	lea    r12,[rsi+0x2]
  40fdcf:	jmp    40ef70 <_start@@Base+0xbb50>
  40fdd4:	nop    DWORD PTR [rax+0x0]
  40fdd8:	mov    ecx,0x5
  40fddd:	mov    rdx,rbp
  40fde0:	mov    rdi,rbx
  40fde3:	call   416820 <flatcc_json_parser_set_error@@Base>
  40fde8:	mov    rsi,rax
  40fdeb:	jmp    40f96b <_start@@Base+0xc54b>
  40fdf0:	mov    ecx,0x8
  40fdf5:	mov    rdx,rbp
  40fdf8:	mov    rsi,r13
  40fdfb:	mov    rdi,rbx
  40fdfe:	call   4081b0 <_start@@Base+0x4d90>
  40fe03:	cmp    r13,rax
  40fe06:	mov    r15,rax
  40fe09:	je     40fa4f <_start@@Base+0xc62f>
  40fe0f:	cmp    rbp,rax
  40fe12:	mov    DWORD PTR [rsp+0x2c],0x0
  40fe1a:	mov    QWORD PTR [rsp+0x40],0x0
  40fe23:	mov    DWORD PTR [rsp+0x38],0x0
  40fe2b:	je     40ff60 <_start@@Base+0xcb40>
  40fe31:	mov    r8,QWORD PTR [rsp]
  40fe35:	mov    rcx,r14
  40fe38:	mov    rdx,rbp
  40fe3b:	mov    rsi,rax
  40fe3e:	mov    rdi,rbx
  40fe41:	call   4183c0 <flatcc_json_parser_integer@@Base>
  40fe46:	cmp    r15,rax
  40fe49:	mov    r13,rax
  40fe4c:	je     40ff60 <_start@@Base+0xcb40>
  40fe52:	mov    eax,DWORD PTR [rsp+0x38]
  40fe56:	mov    ecx,0x8
  40fe5b:	test   eax,eax
  40fe5d:	jne    40fec5 <_start@@Base+0xcaa5>
  40fe5f:	mov    rax,QWORD PTR [rsp+0x40]
  40fe64:	mov    edx,0xffffffff
  40fe69:	cmp    rax,rdx
  40fe6c:	ja     40fec0 <_start@@Base+0xcaa0>
  40fe6e:	mov    edx,eax
  40fe70:	mov    DWORD PTR [rsp+0x2c],eax
  40fe74:	test   edx,edx
  40fe76:	jne    40fe82 <_start@@Base+0xca62>
  40fe78:	test   BYTE PTR [rbx+0x10],0x2
  40fe7c:	je     40fa60 <_start@@Base+0xc640>
  40fe82:	mov    rdi,QWORD PTR [rbx]
  40fe85:	mov    ecx,0x4
  40fe8a:	mov    edx,0x4
  40fe8f:	mov    esi,0x1
  40fe94:	call   414920 <flatcc_builder_table_add@@Base>
  40fe99:	test   rax,rax
  40fe9c:	je     40ff8b <_start@@Base+0xcb6b>
  40fea2:	mov    edx,DWORD PTR [rsp+0x2c]
  40fea6:	mov    DWORD PTR [rax],edx
  40fea8:	jmp    40fa60 <_start@@Base+0xc640>
  40fead:	nop    DWORD PTR [rax]
  40feb0:	test   rax,rax
  40feb3:	js     40ff33 <_start@@Base+0xcb13>
  40feb5:	mov    QWORD PTR [rsp+0x38],rax
  40feba:	jmp    40fd20 <_start@@Base+0xc900>
  40febf:	nop
  40fec0:	mov    ecx,0x7
  40fec5:	mov    rsi,r13
  40fec8:	mov    rdx,rbp
  40fecb:	mov    rdi,rbx
  40fece:	call   416820 <flatcc_json_parser_set_error@@Base>
  40fed3:	cmp    r15,rax
  40fed6:	mov    r13,rax
  40fed9:	je     40ff60 <_start@@Base+0xcb40>
  40fedf:	mov    edx,DWORD PTR [rsp+0x2c]
  40fee3:	jmp    40fe74 <_start@@Base+0xca54>
  40fee5:	nop    DWORD PTR [rax]
  40fee8:	cmp    BYTE PTR [r13+0x2],0x20
  40feed:	jle    40fb69 <_start@@Base+0xc749>
  40fef3:	lea    r12,[r13+0x2]
  40fef7:	jmp    40ef70 <_start@@Base+0xbb50>
  40fefc:	nop    DWORD PTR [rax+0x0]
  40ff00:	cmp    BYTE PTR [r13+0x2],0x20
  40ff05:	jle    40fd7d <_start@@Base+0xc95d>
  40ff0b:	lea    rsi,[r13+0x2]
  40ff0f:	cmp    rbp,rsi
  40ff12:	jne    40fd94 <_start@@Base+0xc974>
  40ff18:	mov    ecx,0xa
  40ff1d:	mov    rdx,rbp
  40ff20:	mov    rsi,rbp
  40ff23:	mov    rdi,rbx
  40ff26:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ff2b:	mov    r12,rax
  40ff2e:	jmp    40ef70 <_start@@Base+0xbb50>
  40ff33:	mov    ecx,0x7
  40ff38:	mov    rsi,r13
  40ff3b:	mov    rdx,rbp
  40ff3e:	mov    rdi,rbx
  40ff41:	call   416820 <flatcc_json_parser_set_error@@Base>
  40ff46:	cmp    r15,rax
  40ff49:	mov    r13,rax
  40ff4c:	je     40ff98 <_start@@Base+0xcb78>
  40ff4e:	mov    rax,QWORD PTR [rsp+0x38]
  40ff53:	jmp    40fd20 <_start@@Base+0xc900>
  40ff58:	nop    DWORD PTR [rax+rax*1+0x0]
  40ff60:	mov    r8,QWORD PTR [rsp+0x8]
  40ff65:	lea    rcx,[rip+0x114d4]        # 421440 <__data_start@@Base+0x380>
  40ff6c:	mov    rdx,rbp
  40ff6f:	mov    rsi,r15
  40ff72:	mov    rdi,rbx
  40ff75:	call   405ee0 <_start@@Base+0x2ac0>
  40ff7a:	cmp    rax,r15
  40ff7d:	mov    r13,rax
  40ff80:	je     40ff8b <_start@@Base+0xcb6b>
  40ff82:	cmp    rbp,rax
  40ff85:	jne    40fedf <_start@@Base+0xcabf>
  40ff8b:	mov    r12,r13
  40ff8e:	jmp    40ef7b <_start@@Base+0xbb5b>
  40ff93:	nop    DWORD PTR [rax+rax*1+0x0]
  40ff98:	lea    rcx,[rip+0x114c1]        # 421460 <__data_start@@Base+0x3a0>
  40ff9f:	mov    r8,r14
  40ffa2:	mov    rdx,rbp
  40ffa5:	mov    rsi,r15
  40ffa8:	mov    rdi,rbx
  40ffab:	call   405800 <_start@@Base+0x23e0>
  40ffb0:	cmp    rax,r15
  40ffb3:	mov    r13,rax
  40ffb6:	je     40ff8b <_start@@Base+0xcb6b>
  40ffb8:	cmp    rbp,rax
  40ffbb:	jne    40ff4e <_start@@Base+0xcb2e>
  40ffbd:	jmp    40ff8b <_start@@Base+0xcb6b>
  40ffbf:	nop
  40ffc0:	lea    rsi,[r13+0x1]
  40ffc4:	mov    rax,rbp
  40ffc7:	mov    DWORD PTR [rsp+0x24],0x0
  40ffcf:	sub    rax,rsi
  40ffd2:	cmp    rax,0x1
  40ffd6:	jle    40ffe1 <_start@@Base+0xcbc1>
  40ffd8:	cmp    BYTE PTR [r13+0x1],0x20
  40ffdd:	jg     410049 <_start@@Base+0xcc29>
  40ffdf:	je     410039 <_start@@Base+0xcc19>
  40ffe1:	mov    rdx,rbp
  40ffe4:	mov    rdi,rbx
  40ffe7:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  40ffec:	mov    r13,rax
  40ffef:	mov    eax,DWORD PTR [rsp+0x24]
  40fff3:	jmp    40dbd8 <_start@@Base+0xa7b8>
  40fff8:	mov    rdi,r8
  40fffb:	mov    rsi,rbp
  40fffe:	mov    QWORD PTR [rsp+0x18],r8
  410003:	call   403530 <_start@@Base+0x110>
  410008:	mov    r8,QWORD PTR [rsp+0x18]
  41000d:	jmp    40e7b7 <_start@@Base+0xb397>
  410012:	mov    ecx,0xa
  410017:	mov    rdx,rbp
  41001a:	mov    rsi,rbp
  41001d:	mov    rdi,rbx
  410020:	mov    DWORD PTR [rsp+0x24],0x0
  410028:	call   416820 <flatcc_json_parser_set_error@@Base>
  41002d:	mov    r13,rax
  410030:	mov    eax,DWORD PTR [rsp+0x24]
  410034:	jmp    40dbd8 <_start@@Base+0xa7b8>
  410039:	cmp    BYTE PTR [r13+0x2],0x20
  41003e:	jle    40ffe1 <_start@@Base+0xcbc1>
  410040:	add    r13,0x2
  410044:	jmp    40dd10 <_start@@Base+0xa8f0>
  410049:	mov    r13,rsi
  41004c:	jmp    40dd10 <_start@@Base+0xa8f0>
  410051:	cmp    BYTE PTR [r12+0x2],0x20
  410057:	jle    40f178 <_start@@Base+0xbd58>
  41005d:	lea    rsi,[r12+0x2]
  410062:	jmp    40f186 <_start@@Base+0xbd66>
  410067:	cmp    BYTE PTR [r15+0x2],0x20
  41006c:	jle    40ea01 <_start@@Base+0xb5e1>
  410072:	lea    rsi,[r15+0x2]
  410076:	jmp    40ea0f <_start@@Base+0xb5ef>
  41007b:	cmp    BYTE PTR [r12+0x2],0x20
  410081:	jle    40f91f <_start@@Base+0xc4ff>
  410087:	lea    rsi,[r12+0x2]
  41008c:	jmp    40f92d <_start@@Base+0xc50d>
  410091:	add    rsi,0x1
  410095:	mov    rdx,rbp
  410098:	mov    rdi,rbx
  41009b:	call   403680 <_start@@Base+0x260>
  4100a0:	mov    r15,rax
  4100a3:	jmp    40df20 <_start@@Base+0xab00>
  4100a8:	add    rsi,0x1
  4100ac:	mov    rdx,rbp
  4100af:	mov    rdi,rbx
  4100b2:	call   403680 <_start@@Base+0x260>
  4100b7:	mov    r12,rax
  4100ba:	jmp    40f060 <_start@@Base+0xbc40>
  4100bf:	add    rsi,0x1
  4100c3:	mov    rdx,rbp
  4100c6:	mov    rdi,rbx
  4100c9:	call   403680 <_start@@Base+0x260>
  4100ce:	mov    r12,rax
  4100d1:	jmp    40ef70 <_start@@Base+0xbb50>
  4100d6:	call   403080 <__stack_chk_fail@plt>
  4100db:	nop    DWORD PTR [rax+rax*1+0x0]
  4100e0:	push   r15
  4100e2:	push   r14
  4100e4:	mov    r14,rsi
  4100e7:	push   r13
  4100e9:	push   r12
  4100eb:	push   rbp
  4100ec:	push   rbx
  4100ed:	mov    rbp,rdi
  4100f0:	mov    rbx,rdx
  4100f3:	sub    rsp,0x48
  4100f7:	mov    DWORD PTR [r8],0x0
  4100fe:	mov    rdi,QWORD PTR fs:0x28
  410107:	mov    QWORD PTR [rsp+0x38],rdi
  41010c:	xor    edi,edi
  41010e:	cmp    cl,0x4
  410111:	ja     4107f0 <_start@@Base+0xd3d0>
  410117:	lea    rdx,[rip+0xa11e]        # 41a23c <_IO_stdin_used@@Base+0x23c>
  41011e:	movzx  eax,cl
  410121:	mov    r13,r8
  410124:	movsxd rax,DWORD PTR [rdx+rax*4]
  410128:	add    rax,rdx
  41012b:	jmp    rax
  41012d:	nop    DWORD PTR [rax]
  410130:	mov    rcx,r8
  410133:	mov    rdx,rbx
  410136:	mov    rdi,rbp
  410139:	call   407ec0 <_start@@Base+0x4aa0>
  41013e:	mov    ecx,DWORD PTR [rbp+0x20]
  410141:	test   ecx,ecx
  410143:	jne    410160 <_start@@Base+0xcd40>
  410145:	mov    edx,DWORD PTR [r13+0x0]
  410149:	test   edx,edx
  41014b:	jne    410160 <_start@@Base+0xcd40>
  41014d:	mov    ecx,0x21
  410152:	mov    rdx,rbx
  410155:	mov    rsi,rax
  410158:	mov    rdi,rbp
  41015b:	call   416820 <flatcc_json_parser_set_error@@Base>
  410160:	mov    rcx,QWORD PTR [rsp+0x38]
  410165:	xor    rcx,QWORD PTR fs:0x28
  41016e:	jne    410bd7 <_start@@Base+0xd7b7>
  410174:	add    rsp,0x48
  410178:	pop    rbx
  410179:	pop    rbp
  41017a:	pop    r12
  41017c:	pop    r13
  41017e:	pop    r14
  410180:	pop    r15
  410182:	ret    
  410183:	nop    DWORD PTR [rax+rax*1+0x0]
  410188:	mov    rcx,r8
  41018b:	mov    rdx,rbx
  41018e:	mov    rdi,rbp
  410191:	call   40db40 <_start@@Base+0xa720>
  410196:	jmp    41013e <_start@@Base+0xcd1e>
  410198:	nop    DWORD PTR [rax+rax*1+0x0]
  4101a0:	mov    rax,rbx
  4101a3:	sub    rax,rsi
  4101a6:	cmp    rax,0x3
  4101aa:	jle    4101c8 <_start@@Base+0xcda8>
  4101ac:	lea    rsi,[rip+0xa0f5]        # 41a2a8 <_IO_stdin_used@@Base+0x2a8>
  4101b3:	mov    edx,0x4
  4101b8:	mov    rdi,r14
  4101bb:	call   4030d0 <memcmp@plt>
  4101c0:	test   eax,eax
  4101c2:	je     410a68 <_start@@Base+0xd648>
  4101c8:	mov    ecx,0x1a
  4101cd:	mov    rdx,rbx
  4101d0:	mov    rsi,r14
  4101d3:	mov    rdi,rbp
  4101d6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4101db:	jmp    410160 <_start@@Base+0xcd40>
  4101dd:	nop    DWORD PTR [rax]
  4101e0:	mov    rcx,r8
  4101e3:	mov    rdx,rbx
  4101e6:	mov    rdi,rbp
  4101e9:	call   408290 <_start@@Base+0x4e70>
  4101ee:	jmp    41013e <_start@@Base+0xcd1e>
  4101f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4101f8:	mov    rdi,QWORD PTR [rbp+0x0]
  4101fc:	mov    esi,0x4
  410201:	call   413080 <flatcc_builder_start_table@@Base>
  410206:	test   eax,eax
  410208:	jne    410398 <_start@@Base+0xcf78>
  41020e:	lea    rcx,[rsp+0x28]
  410213:	mov    rsi,r14
  410216:	mov    rdx,rbx
  410219:	mov    rdi,rbp
  41021c:	call   4048f0 <_start@@Base+0x14d0>
  410221:	lea    rsi,[rsp+0x27]
  410226:	mov    r14,rax
  410229:	lea    rcx,[rsp+0x2c]
  41022e:	mov    eax,DWORD PTR [rsp+0x28]
  410232:	mov    QWORD PTR [rsp+0x18],rsi
  410237:	lea    rsi,[rsp+0x30]
  41023c:	mov    QWORD PTR [rsp+0x8],rcx
  410241:	mov    QWORD PTR [rsp],rsi
  410245:	nop    DWORD PTR [rax]
  410248:	test   eax,eax
  41024a:	je     410388 <_start@@Base+0xcf68>
  410250:	movabs r12,0xffff000000000000
  41025a:	cmp    rbx,r14
  41025d:	je     41027a <_start@@Base+0xce5a>
  41025f:	movzx  eax,BYTE PTR [r14]
  410263:	cmp    al,0x22
  410265:	je     410660 <_start@@Base+0xd240>
  41026b:	cmp    al,0x2e
  41026d:	je     4107d0 <_start@@Base+0xd3b0>
  410273:	mov    DWORD PTR [rbp+0x14],0x1
  41027a:	mov    r15,rbx
  41027d:	sub    r15,r14
  410280:	cmp    r15,0x7
  410284:	jbe    4104a0 <_start@@Base+0xd080>
  41028a:	movbe  r8,QWORD PTR [r14]
  41028f:	mov    rdx,r8
  410292:	movabs rax,0x636f6c6f72320000
  41029c:	xor    dx,dx
  41029f:	cmp    rdx,rax
  4102a2:	je     4103b0 <_start@@Base+0xcf90>
  4102a8:	mov    rdx,r8
  4102ab:	movabs rax,0x636f6c6f72000000
  4102b5:	and    rdx,0xffffffffff000000
  4102bc:	cmp    rdx,rax
  4102bf:	jne    4102cb <_start@@Base+0xceab>
  4102c1:	cmp    r15,0x5
  4102c5:	jg     410828 <_start@@Base+0xd408>
  4102cb:	movabs rax,0xffffff0000000000
  4102d5:	movabs rdx,0x7563320000000000
  4102df:	and    rax,r8
  4102e2:	cmp    rax,rdx
  4102e5:	je     410580 <_start@@Base+0xd160>
  4102eb:	and    r8,r12
  4102ee:	movabs rax,0x7563000000000000
  4102f8:	cmp    r8,rax
  4102fb:	jne    410307 <_start@@Base+0xcee7>
  4102fd:	cmp    r15,0x2
  410301:	jg     410700 <_start@@Base+0xd2e0>
  410307:	mov    rdx,rbx
  41030a:	mov    rsi,r14
  41030d:	mov    rdi,rbp
  410310:	call   4181a0 <flatcc_json_parser_unmatched_symbol@@Base>
  410315:	mov    r15,rax
  410318:	mov    rax,rbx
  41031b:	sub    rax,r15
  41031e:	cmp    rax,0x1
  410322:	jle    410330 <_start@@Base+0xcf10>
  410324:	cmp    BYTE PTR [r15],0x20
  410328:	jg     410341 <_start@@Base+0xcf21>
  41032a:	je     410670 <_start@@Base+0xd250>
  410330:	mov    rsi,r15
  410333:	mov    rdx,rbx
  410336:	mov    rdi,rbp
  410339:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41033e:	mov    r15,rax
  410341:	cmp    rbx,r15
  410344:	je     410690 <_start@@Base+0xd270>
  41034a:	cmp    BYTE PTR [r15],0x2c
  41034e:	je     4106b0 <_start@@Base+0xd290>
  410354:	mov    DWORD PTR [rsp+0x28],0x0
  41035c:	cmp    BYTE PTR [r15],0x7d
  410360:	je     410540 <_start@@Base+0xd120>
  410366:	mov    ecx,0xa
  41036b:	mov    rdx,rbx
  41036e:	mov    rsi,r15
  410371:	mov    rdi,rbp
  410374:	call   416820 <flatcc_json_parser_set_error@@Base>
  410379:	mov    r14,rax
  41037c:	mov    eax,DWORD PTR [rsp+0x28]
  410380:	test   eax,eax
  410382:	jne    410250 <_start@@Base+0xce30>
  410388:	mov    esi,DWORD PTR [rbp+0x20]
  41038b:	test   esi,esi
  41038d:	je     410a30 <_start@@Base+0xd610>
  410393:	nop    DWORD PTR [rax+rax*1+0x0]
  410398:	mov    ecx,0x21
  41039d:	mov    rdx,rbx
  4103a0:	mov    rsi,r14
  4103a3:	mov    rdi,rbp
  4103a6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4103ab:	jmp    41013e <_start@@Base+0xcd1e>
  4103b0:	cmp    r15,0x6
  4103b4:	jle    4102eb <_start@@Base+0xcecb>
  4103ba:	mov    ecx,0x6
  4103bf:	mov    rdx,rbx
  4103c2:	mov    rsi,r14
  4103c5:	mov    rdi,rbp
  4103c8:	mov    QWORD PTR [rsp+0x10],r8
  4103cd:	call   4081b0 <_start@@Base+0x4d90>
  4103d2:	cmp    rax,r14
  4103d5:	mov    r10,rax
  4103d8:	mov    r8,QWORD PTR [rsp+0x10]
  4103dd:	je     4102eb <_start@@Base+0xcecb>
  4103e3:	cmp    rbx,rax
  4103e6:	mov    BYTE PTR [rsp+0x27],0x0
  4103eb:	mov    QWORD PTR [rsp+0x30],0x0
  4103f4:	mov    DWORD PTR [rsp+0x2c],0x0
  4103fc:	je     410ac0 <_start@@Base+0xd6a0>
  410402:	mov    r8,QWORD PTR [rsp]
  410406:	mov    rcx,QWORD PTR [rsp+0x8]
  41040b:	mov    rdx,rbx
  41040e:	mov    rsi,rax
  410411:	mov    rdi,rbp
  410414:	mov    QWORD PTR [rsp+0x10],rax
  410419:	call   4183c0 <flatcc_json_parser_integer@@Base>
  41041e:	mov    r10,QWORD PTR [rsp+0x10]
  410423:	mov    r15,rax
  410426:	cmp    r10,rax
  410429:	je     410ac0 <_start@@Base+0xd6a0>
  41042f:	mov    r11d,DWORD PTR [rsp+0x2c]
  410434:	mov    rax,QWORD PTR [rsp+0x30]
  410439:	test   r11d,r11d
  41043c:	je     410810 <_start@@Base+0xd3f0>
  410442:	cmp    rax,0x80
  410448:	mov    ecx,0x8
  41044d:	ja     4109ba <_start@@Base+0xd59a>
  410453:	mov    edx,eax
  410455:	neg    edx
  410457:	mov    BYTE PTR [rsp+0x27],dl
  41045b:	cmp    dl,0x2
  41045e:	jne    41046a <_start@@Base+0xd04a>
  410460:	test   BYTE PTR [rbp+0x10],0x2
  410464:	je     410318 <_start@@Base+0xcef8>
  41046a:	mov    rdi,QWORD PTR [rbp+0x0]
  41046e:	mov    ecx,0x1
  410473:	mov    edx,0x1
  410478:	mov    esi,0x1
  41047d:	call   414920 <flatcc_builder_table_add@@Base>
  410482:	test   rax,rax
  410485:	je     41064f <_start@@Base+0xd22f>
  41048b:	movzx  edx,BYTE PTR [rsp+0x27]
  410490:	mov    BYTE PTR [rax],dl
  410492:	jmp    410318 <_start@@Base+0xcef8>
  410497:	nop    WORD PTR [rax+rax*1+0x0]
  4104a0:	lea    rdx,[rip+0x9da9]        # 41a250 <_IO_stdin_used@@Base+0x250>
  4104a7:	movsxd rax,DWORD PTR [rdx+r15*4]
  4104ab:	add    rax,rdx
  4104ae:	jmp    rax
  4104b0:	movsx  rax,BYTE PTR [r14+0x6]
  4104b5:	shl    rax,0x8
  4104b9:	movsx  rdx,BYTE PTR [r14+0x5]
  4104be:	shl    rdx,0x10
  4104c2:	or     rax,rdx
  4104c5:	movsx  rdx,BYTE PTR [r14+0x4]
  4104ca:	shl    rdx,0x18
  4104ce:	mov    r8,rdx
  4104d1:	or     r8,rax
  4104d4:	movsx  rdx,BYTE PTR [r14+0x3]
  4104d9:	mov    rax,rdx
  4104dc:	shl    rax,0x20
  4104e0:	or     r8,rax
  4104e3:	movsx  rdx,BYTE PTR [r14+0x2]
  4104e8:	mov    rax,rdx
  4104eb:	shl    rax,0x28
  4104ef:	or     rax,r8
  4104f2:	movsx  rdx,BYTE PTR [r14+0x1]
  4104f7:	shl    rdx,0x30
  4104fb:	or     rax,rdx
  4104fe:	movsx  r8,BYTE PTR [r14]
  410502:	shl    r8,0x38
  410506:	or     r8,rax
  410509:	jmp    41028f <_start@@Base+0xce6f>
  41050e:	xchg   ax,ax
  410510:	xor    eax,eax
  410512:	jmp    4104b9 <_start@@Base+0xd099>
  410514:	nop    DWORD PTR [rax+0x0]
  410518:	xor    eax,eax
  41051a:	jmp    4104c5 <_start@@Base+0xd0a5>
  41051c:	nop    DWORD PTR [rax+0x0]
  410520:	xor    r8d,r8d
  410523:	jmp    4104d4 <_start@@Base+0xd0b4>
  410525:	nop    DWORD PTR [rax]
  410528:	xor    r8d,r8d
  41052b:	jmp    4104e3 <_start@@Base+0xd0c3>
  41052d:	nop    DWORD PTR [rax]
  410530:	xor    eax,eax
  410532:	jmp    4104f2 <_start@@Base+0xd0d2>
  410534:	nop    DWORD PTR [rax+0x0]
  410538:	xor    eax,eax
  41053a:	jmp    4104fe <_start@@Base+0xd0de>
  41053c:	nop    DWORD PTR [rax+0x0]
  410540:	lea    r14,[r15+0x1]
  410544:	mov    rax,rbx
  410547:	sub    rax,r14
  41054a:	cmp    rax,0x1
  41054e:	jle    410561 <_start@@Base+0xd141>
  410550:	cmp    BYTE PTR [r15+0x1],0x20
  410555:	jg     410388 <_start@@Base+0xcf68>
  41055b:	je     410988 <_start@@Base+0xd568>
  410561:	mov    rsi,r14
  410564:	mov    rdx,rbx
  410567:	mov    rdi,rbp
  41056a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41056f:	mov    r14,rax
  410572:	mov    eax,DWORD PTR [rsp+0x28]
  410576:	jmp    410248 <_start@@Base+0xce28>
  41057b:	nop    DWORD PTR [rax+rax*1+0x0]
  410580:	cmp    r15,0x3
  410584:	jle    410307 <_start@@Base+0xcee7>
  41058a:	mov    ecx,0x3
  41058f:	mov    rdx,rbx
  410592:	mov    rsi,r14
  410595:	mov    rdi,rbp
  410598:	call   4081b0 <_start@@Base+0x4d90>
  41059d:	cmp    rax,r14
  4105a0:	mov    r10,rax
  4105a3:	je     410307 <_start@@Base+0xcee7>
  4105a9:	cmp    rbx,rax
  4105ac:	mov    BYTE PTR [rsp+0x27],0x0
  4105b1:	mov    QWORD PTR [rsp+0x30],0x0
  4105ba:	mov    DWORD PTR [rsp+0x2c],0x0
  4105c2:	je     410b28 <_start@@Base+0xd708>
  4105c8:	mov    r8,QWORD PTR [rsp]
  4105cc:	mov    rcx,QWORD PTR [rsp+0x8]
  4105d1:	mov    rdx,rbx
  4105d4:	mov    rsi,rax
  4105d7:	mov    rdi,rbp
  4105da:	mov    QWORD PTR [rsp+0x10],rax
  4105df:	call   4183c0 <flatcc_json_parser_integer@@Base>
  4105e4:	mov    r10,QWORD PTR [rsp+0x10]
  4105e9:	mov    r15,rax
  4105ec:	cmp    r10,rax
  4105ef:	je     410b28 <_start@@Base+0xd708>
  4105f5:	mov    r8d,DWORD PTR [rsp+0x2c]
  4105fa:	mov    ecx,0x8
  4105ff:	test   r8d,r8d
  410602:	jne    41095a <_start@@Base+0xd53a>
  410608:	mov    rax,QWORD PTR [rsp+0x30]
  41060d:	cmp    rax,0xff
  410613:	ja     410950 <_start@@Base+0xd530>
  410619:	mov    edx,eax
  41061b:	mov    BYTE PTR [rsp+0x27],al
  41061f:	cmp    dl,0x2
  410622:	jne    41062e <_start@@Base+0xd20e>
  410624:	test   BYTE PTR [rbp+0x10],0x2
  410628:	je     410318 <_start@@Base+0xcef8>
  41062e:	mov    rdi,QWORD PTR [rbp+0x0]
  410632:	mov    ecx,0x1
  410637:	mov    edx,0x1
  41063c:	mov    esi,0x3
  410641:	call   414920 <flatcc_builder_table_add@@Base>
  410646:	test   rax,rax
  410649:	jne    41048b <_start@@Base+0xd06b>
  41064f:	mov    r14,r15
  410652:	jmp    410398 <_start@@Base+0xcf78>
  410657:	nop    WORD PTR [rax+rax*1+0x0]
  410660:	add    r14,0x1
  410664:	mov    DWORD PTR [rbp+0x14],0x0
  41066b:	jmp    41027a <_start@@Base+0xce5a>
  410670:	cmp    BYTE PTR [r15+0x1],0x20
  410675:	jle    410330 <_start@@Base+0xcf10>
  41067b:	add    r15,0x1
  41067f:	cmp    rbx,r15
  410682:	jne    41034a <_start@@Base+0xcf2a>
  410688:	nop    DWORD PTR [rax+rax*1+0x0]
  410690:	mov    esi,DWORD PTR [rbp+0x20]
  410693:	mov    DWORD PTR [rsp+0x28],0x0
  41069b:	mov    r14,rbx
  41069e:	test   esi,esi
  4106a0:	jne    410398 <_start@@Base+0xcf78>
  4106a6:	jmp    410a30 <_start@@Base+0xd610>
  4106ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4106b0:	lea    r14,[r15+0x1]
  4106b4:	mov    rax,rbx
  4106b7:	sub    rax,r14
  4106ba:	cmp    rax,0x1
  4106be:	jle    4106cd <_start@@Base+0xd2ad>
  4106c0:	cmp    BYTE PTR [r15+0x1],0x20
  4106c5:	jg     4106de <_start@@Base+0xd2be>
  4106c7:	je     410a50 <_start@@Base+0xd630>
  4106cd:	mov    rsi,r14
  4106d0:	mov    rdx,rbx
  4106d3:	mov    rdi,rbp
  4106d6:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4106db:	mov    r14,rax
  4106de:	cmp    rbx,r14
  4106e1:	je     410bb0 <_start@@Base+0xd790>
  4106e7:	cmp    BYTE PTR [r14],0x7d
  4106eb:	je     410b00 <_start@@Base+0xd6e0>
  4106f1:	mov    DWORD PTR [rsp+0x28],0x1
  4106f9:	jmp    41025a <_start@@Base+0xce3a>
  4106fe:	xchg   ax,ax
  410700:	mov    ecx,0x2
  410705:	mov    rdx,rbx
  410708:	mov    rsi,r14
  41070b:	mov    rdi,rbp
  41070e:	call   4081b0 <_start@@Base+0x4d90>
  410713:	cmp    rax,r14
  410716:	mov    r10,rax
  410719:	je     410307 <_start@@Base+0xcee7>
  41071f:	cmp    rbx,rax
  410722:	mov    BYTE PTR [rsp+0x27],0x0
  410727:	mov    QWORD PTR [rsp+0x30],0x0
  410730:	mov    DWORD PTR [rsp+0x2c],0x0
  410738:	je     410a78 <_start@@Base+0xd658>
  41073e:	mov    r8,QWORD PTR [rsp]
  410742:	mov    rcx,QWORD PTR [rsp+0x8]
  410747:	mov    rdx,rbx
  41074a:	mov    rsi,rax
  41074d:	mov    rdi,rbp
  410750:	mov    QWORD PTR [rsp+0x10],rax
  410755:	call   4183c0 <flatcc_json_parser_integer@@Base>
  41075a:	mov    r10,QWORD PTR [rsp+0x10]
  41075f:	mov    r15,rax
  410762:	cmp    r10,rax
  410765:	je     410a78 <_start@@Base+0xd658>
  41076b:	mov    edi,DWORD PTR [rsp+0x2c]
  41076f:	mov    ecx,0x8
  410774:	test   edi,edi
  410776:	jne    41090a <_start@@Base+0xd4ea>
  41077c:	mov    rax,QWORD PTR [rsp+0x30]
  410781:	cmp    rax,0xff
  410787:	ja     410900 <_start@@Base+0xd4e0>
  41078d:	mov    edx,eax
  41078f:	mov    BYTE PTR [rsp+0x27],al
  410793:	cmp    dl,0x2
  410796:	jne    4107a2 <_start@@Base+0xd382>
  410798:	test   BYTE PTR [rbp+0x10],0x2
  41079c:	je     410318 <_start@@Base+0xcef8>
  4107a2:	mov    rdi,QWORD PTR [rbp+0x0]
  4107a6:	mov    ecx,0x1
  4107ab:	mov    edx,0x1
  4107b0:	mov    esi,0x2
  4107b5:	call   414920 <flatcc_builder_table_add@@Base>
  4107ba:	test   rax,rax
  4107bd:	jne    41048b <_start@@Base+0xd06b>
  4107c3:	jmp    41064f <_start@@Base+0xd22f>
  4107c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4107d0:	mov    rsi,r14
  4107d3:	mov    ecx,0x5
  4107d8:	mov    rdx,rbx
  4107db:	mov    rdi,rbp
  4107de:	call   416820 <flatcc_json_parser_set_error@@Base>
  4107e3:	mov    r14,rax
  4107e6:	jmp    41027a <_start@@Base+0xce5a>
  4107eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4107f0:	test   BYTE PTR [rbp+0x10],0x1
  4107f4:	jne    4109a0 <_start@@Base+0xd580>
  4107fa:	mov    ecx,0xf
  4107ff:	mov    rdi,rbp
  410802:	call   416820 <flatcc_json_parser_set_error@@Base>
  410807:	jmp    410160 <_start@@Base+0xcd40>
  41080c:	nop    DWORD PTR [rax+0x0]
  410810:	cmp    rax,0x7f
  410814:	ja     4109b0 <_start@@Base+0xd590>
  41081a:	mov    edx,eax
  41081c:	mov    BYTE PTR [rsp+0x27],al
  410820:	jmp    41045b <_start@@Base+0xd03b>
  410825:	nop    DWORD PTR [rax]
  410828:	mov    ecx,0x5
  41082d:	mov    rdx,rbx
  410830:	mov    rsi,r14
  410833:	mov    rdi,rbp
  410836:	mov    QWORD PTR [rsp+0x10],r8
  41083b:	call   4081b0 <_start@@Base+0x4d90>
  410840:	cmp    rax,r14
  410843:	mov    r10,rax
  410846:	mov    r8,QWORD PTR [rsp+0x10]
  41084b:	je     4102cb <_start@@Base+0xceab>
  410851:	cmp    rbx,rax
  410854:	mov    BYTE PTR [rsp+0x27],0x0
  410859:	mov    QWORD PTR [rsp+0x30],0x0
  410862:	mov    DWORD PTR [rsp+0x2c],0x0
  41086a:	je     410b70 <_start@@Base+0xd750>
  410870:	mov    r8,QWORD PTR [rsp]
  410874:	mov    rcx,QWORD PTR [rsp+0x8]
  410879:	mov    rdx,rbx
  41087c:	mov    rsi,rax
  41087f:	mov    rdi,rbp
  410882:	mov    QWORD PTR [rsp+0x10],rax
  410887:	call   4183c0 <flatcc_json_parser_integer@@Base>
  41088c:	mov    r10,QWORD PTR [rsp+0x10]
  410891:	mov    r15,rax
  410894:	cmp    r10,rax
  410897:	je     410b70 <_start@@Base+0xd750>
  41089d:	mov    r9d,DWORD PTR [rsp+0x2c]
  4108a2:	mov    rax,QWORD PTR [rsp+0x30]
  4108a7:	test   r9d,r9d
  4108aa:	je     410938 <_start@@Base+0xd518>
  4108b0:	cmp    rax,0x80
  4108b6:	mov    ecx,0x8
  4108bb:	ja     4109ed <_start@@Base+0xd5cd>
  4108c1:	mov    edx,eax
  4108c3:	neg    edx
  4108c5:	mov    BYTE PTR [rsp+0x27],dl
  4108c9:	cmp    dl,0x2
  4108cc:	jne    4108d8 <_start@@Base+0xd4b8>
  4108ce:	test   BYTE PTR [rbp+0x10],0x2
  4108d2:	je     410318 <_start@@Base+0xcef8>
  4108d8:	mov    rdi,QWORD PTR [rbp+0x0]
  4108dc:	xor    esi,esi
  4108de:	mov    ecx,0x1
  4108e3:	mov    edx,0x1
  4108e8:	call   414920 <flatcc_builder_table_add@@Base>
  4108ed:	test   rax,rax
  4108f0:	jne    41048b <_start@@Base+0xd06b>
  4108f6:	jmp    41064f <_start@@Base+0xd22f>
  4108fb:	nop    DWORD PTR [rax+rax*1+0x0]
  410900:	mov    QWORD PTR [rsp+0x10],r10
  410905:	mov    ecx,0x7
  41090a:	mov    rsi,r15
  41090d:	mov    rdx,rbx
  410910:	mov    rdi,rbp
  410913:	call   416820 <flatcc_json_parser_set_error@@Base>
  410918:	mov    r10,QWORD PTR [rsp+0x10]
  41091d:	mov    r15,rax
  410920:	cmp    r10,rax
  410923:	je     410a78 <_start@@Base+0xd658>
  410929:	movzx  edx,BYTE PTR [rsp+0x27]
  41092e:	jmp    410793 <_start@@Base+0xd373>
  410933:	nop    DWORD PTR [rax+rax*1+0x0]
  410938:	cmp    rax,0x7f
  41093c:	ja     4109e3 <_start@@Base+0xd5c3>
  410942:	mov    edx,eax
  410944:	mov    BYTE PTR [rsp+0x27],al
  410948:	jmp    4108c9 <_start@@Base+0xd4a9>
  41094d:	nop    DWORD PTR [rax]
  410950:	mov    QWORD PTR [rsp+0x10],r10
  410955:	mov    ecx,0x7
  41095a:	mov    rsi,r15
  41095d:	mov    rdx,rbx
  410960:	mov    rdi,rbp
  410963:	call   416820 <flatcc_json_parser_set_error@@Base>
  410968:	mov    r10,QWORD PTR [rsp+0x10]
  41096d:	mov    r15,rax
  410970:	cmp    r10,rax
  410973:	je     410b28 <_start@@Base+0xd708>
  410979:	movzx  edx,BYTE PTR [rsp+0x27]
  41097e:	jmp    41061f <_start@@Base+0xd1ff>
  410983:	nop    DWORD PTR [rax+rax*1+0x0]
  410988:	cmp    BYTE PTR [r15+0x2],0x20
  41098d:	jle    410561 <_start@@Base+0xd141>
  410993:	lea    r14,[r15+0x2]
  410997:	jmp    410388 <_start@@Base+0xcf68>
  41099c:	nop    DWORD PTR [rax+0x0]
  4109a0:	mov    rdi,rbp
  4109a3:	call   417760 <flatcc_json_parser_generic_json@@Base>
  4109a8:	jmp    410160 <_start@@Base+0xcd40>
  4109ad:	nop    DWORD PTR [rax]
  4109b0:	mov    QWORD PTR [rsp+0x10],r10
  4109b5:	mov    ecx,0x7
  4109ba:	mov    rsi,r15
  4109bd:	mov    rdx,rbx
  4109c0:	mov    rdi,rbp
  4109c3:	call   416820 <flatcc_json_parser_set_error@@Base>
  4109c8:	mov    r10,QWORD PTR [rsp+0x10]
  4109cd:	mov    r15,rax
  4109d0:	cmp    r10,rax
  4109d3:	je     410ac0 <_start@@Base+0xd6a0>
  4109d9:	movzx  edx,BYTE PTR [rsp+0x27]
  4109de:	jmp    41045b <_start@@Base+0xd03b>
  4109e3:	mov    QWORD PTR [rsp+0x10],r10
  4109e8:	mov    ecx,0x7
  4109ed:	mov    rsi,r15
  4109f0:	mov    rdx,rbx
  4109f3:	mov    rdi,rbp
  4109f6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4109fb:	mov    r10,QWORD PTR [rsp+0x10]
  410a00:	mov    r15,rax
  410a03:	cmp    r10,rax
  410a06:	je     410b70 <_start@@Base+0xd750>
  410a0c:	movzx  edx,BYTE PTR [rsp+0x27]
  410a11:	jmp    4108c9 <_start@@Base+0xd4a9>
  410a16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410a20:	xor    r8d,r8d
  410a23:	jmp    4102eb <_start@@Base+0xcecb>
  410a28:	nop    DWORD PTR [rax+rax*1+0x0]
  410a30:	mov    rdi,QWORD PTR [rbp+0x0]
  410a34:	call   413a40 <flatcc_builder_end_table@@Base>
  410a39:	mov    edx,eax
  410a3b:	mov    DWORD PTR [r13+0x0],eax
  410a3f:	mov    rax,r14
  410a42:	test   edx,edx
  410a44:	je     410398 <_start@@Base+0xcf78>
  410a4a:	jmp    41013e <_start@@Base+0xcd1e>
  410a4f:	nop
  410a50:	cmp    BYTE PTR [r15+0x2],0x20
  410a55:	jle    4106cd <_start@@Base+0xd2ad>
  410a5b:	lea    r14,[r15+0x2]
  410a5f:	jmp    4106de <_start@@Base+0xd2be>
  410a64:	nop    DWORD PTR [rax+0x0]
  410a68:	lea    rax,[r14+0x4]
  410a6c:	jmp    410160 <_start@@Base+0xcd40>
  410a71:	nop    DWORD PTR [rax+0x0]
  410a78:	mov    r8,QWORD PTR [rsp+0x18]
  410a7d:	lea    rcx,[rip+0x10a1c]        # 4214a0 <__data_start@@Base+0x3e0>
  410a84:	mov    rsi,r10
  410a87:	mov    rdx,rbx
  410a8a:	mov    rdi,rbp
  410a8d:	mov    QWORD PTR [rsp+0x10],r10
  410a92:	call   405a60 <_start@@Base+0x2640>
  410a97:	mov    r10,QWORD PTR [rsp+0x10]
  410a9c:	mov    r15,rax
  410a9f:	cmp    rax,r10
  410aa2:	je     41064f <_start@@Base+0xd22f>
  410aa8:	cmp    rbx,rax
  410aab:	jne    410929 <_start@@Base+0xd509>
  410ab1:	jmp    41064f <_start@@Base+0xd22f>
  410ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410ac0:	mov    r8,QWORD PTR [rsp+0x18]
  410ac5:	lea    rcx,[rip+0x10a34]        # 421500 <__data_start@@Base+0x440>
  410acc:	mov    rsi,r10
  410acf:	mov    rdx,rbx
  410ad2:	mov    rdi,rbp
  410ad5:	mov    QWORD PTR [rsp+0x10],r10
  410ada:	call   4055c0 <_start@@Base+0x21a0>
  410adf:	mov    r10,QWORD PTR [rsp+0x10]
  410ae4:	mov    r15,rax
  410ae7:	cmp    rax,r10
  410aea:	je     41064f <_start@@Base+0xd22f>
  410af0:	cmp    rbx,rax
  410af3:	jne    4109d9 <_start@@Base+0xd5b9>
  410af9:	jmp    41064f <_start@@Base+0xd22f>
  410afe:	xchg   ax,ax
  410b00:	lea    rsi,[r14+0x1]
  410b04:	mov    rdx,rbx
  410b07:	mov    rdi,rbp
  410b0a:	mov    DWORD PTR [rsp+0x28],0x0
  410b12:	call   403680 <_start@@Base+0x260>
  410b17:	mov    r14,rax
  410b1a:	mov    eax,DWORD PTR [rsp+0x28]
  410b1e:	jmp    410248 <_start@@Base+0xce28>
  410b23:	nop    DWORD PTR [rax+rax*1+0x0]
  410b28:	mov    r8,QWORD PTR [rsp+0x18]
  410b2d:	lea    rcx,[rip+0x1098c]        # 4214c0 <__data_start@@Base+0x400>
  410b34:	mov    rsi,r10
  410b37:	mov    rdx,rbx
  410b3a:	mov    rdi,rbp
  410b3d:	mov    QWORD PTR [rsp+0x10],r10
  410b42:	call   405a60 <_start@@Base+0x2640>
  410b47:	mov    r10,QWORD PTR [rsp+0x10]
  410b4c:	mov    r15,rax
  410b4f:	cmp    rax,r10
  410b52:	je     41064f <_start@@Base+0xd22f>
  410b58:	cmp    rbx,rax
  410b5b:	jne    410979 <_start@@Base+0xd559>
  410b61:	jmp    41064f <_start@@Base+0xd22f>
  410b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410b70:	mov    r8,QWORD PTR [rsp+0x18]
  410b75:	lea    rcx,[rip+0x10964]        # 4214e0 <__data_start@@Base+0x420>
  410b7c:	mov    rsi,r10
  410b7f:	mov    rdx,rbx
  410b82:	mov    rdi,rbp
  410b85:	mov    QWORD PTR [rsp+0x10],r10
  410b8a:	call   4055c0 <_start@@Base+0x21a0>
  410b8f:	mov    r10,QWORD PTR [rsp+0x10]
  410b94:	mov    r15,rax
  410b97:	cmp    rax,r10
  410b9a:	je     41064f <_start@@Base+0xd22f>
  410ba0:	cmp    rbx,rax
  410ba3:	jne    410a0c <_start@@Base+0xd5ec>
  410ba9:	jmp    41064f <_start@@Base+0xd22f>
  410bae:	xchg   ax,ax
  410bb0:	mov    ecx,0xa
  410bb5:	mov    rdx,rbx
  410bb8:	mov    rsi,rbx
  410bbb:	mov    rdi,rbp
  410bbe:	mov    DWORD PTR [rsp+0x28],0x0
  410bc6:	call   416820 <flatcc_json_parser_set_error@@Base>
  410bcb:	mov    r14,rax
  410bce:	mov    eax,DWORD PTR [rsp+0x28]
  410bd2:	jmp    410248 <_start@@Base+0xce28>
  410bd7:	call   403080 <__stack_chk_fail@plt>
  410bdc:	nop    DWORD PTR [rax+0x0]

0000000000410be0 <verify_parse@@Base>:
  410be0:	sub    rsp,0x8
  410be4:	test   rdi,rdi
  410be7:	je     410bf2 <verify_parse@@Base+0x12>
  410be9:	cmp    DWORD PTR [rdi+0x4],0x534e4f4d
  410bf0:	je     410c18 <verify_parse@@Base+0x38>
  410bf2:	lea    rcx,[rip+0x9677]        # 41a270 <_IO_stdin_used@@Base+0x270>
  410bf9:	lea    rsi,[rip+0x9738]        # 41a338 <_IO_stdin_used@@Base+0x338>
  410c00:	lea    rdi,[rip+0x97b1]        # 41a3b8 <_IO_stdin_used@@Base+0x3b8>
  410c07:	mov    edx,0x2b8
  410c0c:	call   4030a0 <__assert_fail@plt>
  410c11:	nop    DWORD PTR [rax+0x0]
  410c18:	mov    eax,DWORD PTR [rdi]
  410c1a:	add    rdi,rax
  410c1d:	je     410bf2 <verify_parse@@Base+0x12>
  410c1f:	movsxd rax,DWORD PTR [rdi]
  410c22:	mov    rdx,rdi
  410c25:	sub    rdx,rax
  410c28:	cmp    WORD PTR [rdx],0x5
  410c2c:	ja     410c50 <verify_parse@@Base+0x70>
  410c2e:	lea    rcx,[rip+0x965b]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410c35:	lea    rsi,[rip+0x97a4]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410c3c:	lea    rdi,[rip+0x9cbc]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410c43:	mov    edx,0x2d
  410c48:	call   4030a0 <__assert_fail@plt>
  410c4d:	nop    DWORD PTR [rax]
  410c50:	movzx  eax,WORD PTR [rdx+0x4]
  410c54:	test   ax,ax
  410c57:	je     410c2e <verify_parse@@Base+0x4e>
  410c59:	add    rdi,rax
  410c5c:	je     410c2e <verify_parse@@Base+0x4e>
  410c5e:	vmovss xmm0,DWORD PTR [rip+0x98f2]        # 41a558 <_IO_stdin_used@@Base+0x558>
  410c66:	vucomiss xmm0,DWORD PTR [rdi]
  410c6a:	jp     410ccf <verify_parse@@Base+0xef>
  410c6c:	jne    410ccf <verify_parse@@Base+0xef>
  410c6e:	vmovss xmm0,DWORD PTR [rdi+0x4]
  410c73:	vucomiss xmm0,DWORD PTR [rip+0x98e1]        # 41a55c <_IO_stdin_used@@Base+0x55c>
  410c7b:	jp     410cee <verify_parse@@Base+0x10e>
  410c7d:	jne    410cee <verify_parse@@Base+0x10e>
  410c7f:	vmovss xmm0,DWORD PTR [rdi+0x8]
  410c84:	vucomiss xmm0,DWORD PTR [rip+0x98c4]        # 41a550 <_IO_stdin_used@@Base+0x550>
  410c8c:	jp     410d0d <verify_parse@@Base+0x12d>
  410c8e:	jne    410d0d <verify_parse@@Base+0x12d>
  410c90:	vmovsd xmm0,QWORD PTR [rip+0x98c8]        # 41a560 <_IO_stdin_used@@Base+0x560>
  410c98:	vucomisd xmm0,QWORD PTR [rdi+0x10]
  410c9d:	jp     410d2c <verify_parse@@Base+0x14c>
  410ca3:	jne    410d2c <verify_parse@@Base+0x14c>
  410ca9:	cmp    BYTE PTR [rdi+0x18],0x2
  410cad:	jne    410d4b <verify_parse@@Base+0x16b>
  410cb3:	cmp    WORD PTR [rdi+0x1a],0x5
  410cb8:	jne    410d6a <verify_parse@@Base+0x18a>
  410cbe:	cmp    BYTE PTR [rdi+0x1c],0x6
  410cc2:	jne    410d89 <verify_parse@@Base+0x1a9>
  410cc8:	xor    eax,eax
  410cca:	add    rsp,0x8
  410cce:	ret    
  410ccf:	lea    rcx,[rip+0x95ba]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410cd6:	lea    rsi,[rip+0x9703]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410cdd:	lea    rdi,[rip+0x9c1b]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410ce4:	mov    edx,0x2e
  410ce9:	call   4030a0 <__assert_fail@plt>
  410cee:	lea    rcx,[rip+0x959b]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410cf5:	lea    rsi,[rip+0x96e4]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410cfc:	lea    rdi,[rip+0x9bfc]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d03:	mov    edx,0x2f
  410d08:	call   4030a0 <__assert_fail@plt>
  410d0d:	lea    rcx,[rip+0x957c]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410d14:	lea    rsi,[rip+0x96c5]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410d1b:	lea    rdi,[rip+0x9bdd]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d22:	mov    edx,0x30
  410d27:	call   4030a0 <__assert_fail@plt>
  410d2c:	lea    rcx,[rip+0x955d]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410d33:	lea    rsi,[rip+0x96a6]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410d3a:	lea    rdi,[rip+0x9bbe]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d41:	mov    edx,0x31
  410d46:	call   4030a0 <__assert_fail@plt>
  410d4b:	lea    rcx,[rip+0x953e]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410d52:	lea    rsi,[rip+0x9687]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410d59:	lea    rdi,[rip+0x9b9f]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d60:	mov    edx,0x32
  410d65:	call   4030a0 <__assert_fail@plt>
  410d6a:	lea    rcx,[rip+0x951f]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410d71:	lea    rsi,[rip+0x9668]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410d78:	lea    rdi,[rip+0x9b80]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d7f:	mov    edx,0x35
  410d84:	call   4030a0 <__assert_fail@plt>
  410d89:	lea    rcx,[rip+0x9500]        # 41a290 <_IO_stdin_used@@Base+0x290>
  410d90:	lea    rsi,[rip+0x9649]        # 41a3e0 <_IO_stdin_used@@Base+0x3e0>
  410d97:	lea    rdi,[rip+0x9b61]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  410d9e:	mov    edx,0x36
  410da3:	call   4030a0 <__assert_fail@plt>
  410da8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000410db0 <test_parse@@Base>:
  410db0:	push   r15
  410db2:	push   r14
  410db4:	push   r13
  410db6:	push   r12
  410db8:	push   rbp
  410db9:	push   rbx
  410dba:	sub    rsp,0x248
  410dc1:	mov    rax,QWORD PTR fs:0x28
  410dca:	mov    QWORD PTR [rsp+0x238],rax
  410dd2:	xor    eax,eax
  410dd4:	lea    rax,[rsp+0x90]
  410ddc:	mov    rdi,rax
  410ddf:	mov    QWORD PTR [rsp+0x8],rax
  410de4:	call   411a10 <flatcc_builder_init@@Base>
  410de9:	mov    rax,0x4217e0
  410df0:	lea    rsi,[rip+0x94b6]        # 41a2ad <_IO_stdin_used@@Base+0x2ad>
  410df7:	mov    rdi,QWORD PTR [rax]
  410dfa:	call   403130 <fopen@plt>
  410dff:	test   rax,rax
  410e02:	je     410fa8 <test_parse@@Base+0x1f8>
  410e08:	xor    esi,esi
  410e0a:	mov    r13,rax
  410e0d:	mov    edx,0x2
  410e12:	mov    rdi,rax
  410e15:	call   403110 <fseek@plt>
  410e1a:	mov    rdi,r13
  410e1d:	call   4030e0 <ftell@plt>
  410e22:	cmp    rax,0x2800
  410e28:	mov    r14,rax
  410e2b:	ja     410fa0 <test_parse@@Base+0x1f0>
  410e31:	mov    rdi,r13
  410e34:	call   403090 <rewind@plt>
  410e39:	test   r14,r14
  410e3c:	mov    edi,0x1
  410e41:	cmovne rdi,r14
  410e45:	call   403100 <malloc@plt>
  410e4a:	test   rax,rax
  410e4d:	mov    r12,rax
  410e50:	je     410fa0 <test_parse@@Base+0x1f0>
  410e56:	xor    ebx,ebx
  410e58:	jmp    410e63 <test_parse@@Base+0xb3>
  410e5a:	nop    WORD PTR [rax+rax*1+0x0]
  410e60:	add    rbx,rax
  410e63:	lea    rbp,[r12+rbx*1]
  410e67:	mov    rdx,r14
  410e6a:	mov    rcx,r13
  410e6d:	sub    rdx,rbx
  410e70:	mov    esi,0x1
  410e75:	mov    rdi,rbp
  410e78:	call   403040 <fread@plt>
  410e7d:	test   rax,rax
  410e80:	jne    410e60 <test_parse@@Base+0xb0>
  410e82:	cmp    r14,rbx
  410e85:	mov    r15,rax
  410e88:	mov    rdi,r13
  410e8b:	jne    410fe0 <test_parse@@Base+0x230>
  410e91:	lea    r14,[rsp+0x40]
  410e96:	call   403060 <fclose@plt>
  410e9b:	mov    rax,r15
  410e9e:	mov    ecx,0x9
  410ea3:	mov    rdi,r14
  410ea6:	rep stos QWORD PTR es:[rdi],rax
  410ea9:	mov    rax,QWORD PTR [rsp+0x8]
  410eae:	lea    rsi,[rip+0x93fb]        # 41a2b0 <_IO_stdin_used@@Base+0x2b0>
  410eb5:	xor    edx,edx
  410eb7:	mov    QWORD PTR [rsp+0x48],r12
  410ebc:	mov    DWORD PTR [rsp+0x58],0x1
  410ec4:	mov    QWORD PTR [rsp+0x68],r12
  410ec9:	mov    QWORD PTR [rsp+0x70],rbp
  410ece:	mov    rdi,rax
  410ed1:	mov    QWORD PTR [rsp+0x40],rax
  410ed6:	mov    QWORD PTR [rsp+0x78],r12
  410edb:	call   412410 <flatcc_builder_start_buffer@@Base>
  410ee0:	test   eax,eax
  410ee2:	jne    4112f0 <test_parse@@Base+0x540>
  410ee8:	lea    r13,[rsp+0x38]
  410eed:	mov    rdx,rbp
  410ef0:	mov    rsi,r12
  410ef3:	mov    rdi,r14
  410ef6:	mov    rcx,r13
  410ef9:	call   408290 <_start@@Base+0x4e70>
  410efe:	mov    eax,DWORD PTR [rsp+0x60]
  410f02:	test   eax,eax
  410f04:	mov    DWORD PTR [rsp+0x14],eax
  410f08:	je     410ff0 <test_parse@@Base+0x240>
  410f0e:	mov    edi,DWORD PTR [rsp+0x14]
  410f12:	call   4165c0 <flatcc_json_parser_error_string@@Base>
  410f17:	mov    rdx,QWORD PTR [rsp+0x78]
  410f1c:	sub    rsp,0x8
  410f20:	sub    rdx,QWORD PTR [rsp+0x50]
  410f25:	push   rax
  410f26:	mov    rax,0x4217e0
  410f2d:	mov    esi,0x1
  410f32:	mov    r8d,DWORD PTR [rsp+0x68]
  410f37:	mov    rcx,QWORD PTR [rax]
  410f3a:	mov    rax,QWORD PTR [rip+0x100b7]        # 420ff8 <stderr@GLIBC_2.2.5>
  410f41:	lea    r9d,[rdx+0x1]
  410f45:	lea    rdx,[rip+0x93b2]        # 41a2fe <_IO_stdin_used@@Base+0x2fe>
  410f4c:	mov    rdi,QWORD PTR [rax]
  410f4f:	xor    eax,eax
  410f51:	call   403150 <__fprintf_chk@plt>
  410f56:	pop    rax
  410f57:	pop    rdx
  410f58:	mov    DWORD PTR [rsp+0x14],0xffffffff
  410f60:	mov    rdi,r12
  410f63:	call   403030 <free@plt>
  410f68:	mov    rdi,QWORD PTR [rsp+0x8]
  410f6d:	call   411be0 <flatcc_builder_clear@@Base>
  410f72:	mov    rsi,QWORD PTR [rsp+0x238]
  410f7a:	xor    rsi,QWORD PTR fs:0x28
  410f83:	mov    eax,DWORD PTR [rsp+0x14]
  410f87:	jne    41130f <test_parse@@Base+0x55f>
  410f8d:	add    rsp,0x248
  410f94:	pop    rbx
  410f95:	pop    rbp
  410f96:	pop    r12
  410f98:	pop    r13
  410f9a:	pop    r14
  410f9c:	pop    r15
  410f9e:	ret    
  410f9f:	nop
  410fa0:	mov    rdi,r13
  410fa3:	call   403060 <fclose@plt>
  410fa8:	mov    rax,0x4217e0
  410faf:	lea    rdx,[rip+0x950a]        # 41a4c0 <_IO_stdin_used@@Base+0x4c0>
  410fb6:	mov    esi,0x1
  410fbb:	mov    rcx,QWORD PTR [rax]
  410fbe:	mov    rax,QWORD PTR [rip+0x10033]        # 420ff8 <stderr@GLIBC_2.2.5>
  410fc5:	mov    rdi,QWORD PTR [rax]
  410fc8:	xor    eax,eax
  410fca:	call   403150 <__fprintf_chk@plt>
  410fcf:	mov    DWORD PTR [rsp+0x14],0xffffffff
  410fd7:	jmp    410f72 <test_parse@@Base+0x1c2>
  410fd9:	nop    DWORD PTR [rax+0x0]
  410fe0:	call   403060 <fclose@plt>
  410fe5:	mov    rdi,r12
  410fe8:	call   403030 <free@plt>
  410fed:	jmp    410fa8 <test_parse@@Base+0x1f8>
  410fef:	nop
  410ff0:	mov    esi,DWORD PTR [rsp+0x38]
  410ff4:	mov    rdi,QWORD PTR [rsp+0x8]
  410ff9:	call   4124f0 <flatcc_builder_end_buffer@@Base>
  410ffe:	test   eax,eax
  411000:	je     4112f0 <test_parse@@Base+0x540>
  411006:	mov    rax,0x4217e0
  41100d:	mov    r8d,DWORD PTR [rsp+0x58]
  411012:	lea    rdx,[rip+0x9437]        # 41a450 <_IO_stdin_used@@Base+0x450>
  411019:	mov    esi,0x1
  41101e:	mov    QWORD PTR [rsp+0x80],r12
  411026:	mov    rcx,QWORD PTR [rax]
  411029:	mov    rax,QWORD PTR [rip+0xffc8]        # 420ff8 <stderr@GLIBC_2.2.5>
  411030:	mov    rdi,QWORD PTR [rax]
  411033:	xor    eax,eax
  411035:	call   403150 <__fprintf_chk@plt>
  41103a:	mov    rdi,QWORD PTR [rsp+0x8]
  41103f:	mov    rsi,r13
  411042:	call   4150e0 <flatcc_builder_finalize_aligned_buffer@@Base>
  411047:	mov    QWORD PTR [rsp+0x18],rax
  41104c:	mov    rax,QWORD PTR [rip+0xff8d]        # 420fe0 <stdout@GLIBC_2.2.5>
  411053:	lea    rcx,[rip+0x941e]        # 41a478 <_IO_stdin_used@@Base+0x478>
  41105a:	mov    rbp,QWORD PTR [rsp+0x38]
  41105f:	lea    rdx,[rip+0x924f]        # 41a2b5 <_IO_stdin_used@@Base+0x2b5>
  411066:	mov    esi,0x1
  41106b:	mov    r13,QWORD PTR [rax]
  41106e:	xor    eax,eax
  411070:	mov    rdi,r13
  411073:	call   403150 <__fprintf_chk@plt>
  411078:	test   ebp,ebp
  41107a:	je     4112fd <test_parse@@Base+0x54d>
  411080:	mov    r15,QWORD PTR [rsp+0x18]
  411085:	lea    rax,[rsp+0x220]
  41108d:	mov    QWORD PTR [rsp+0x28],rbx
  411092:	xor    r14d,r14d
  411095:	mov    QWORD PTR [rsp+0x20],rax
  41109a:	mov    rbx,r15
  41109d:	mov    r15d,ebp
  4110a0:	jmp    411110 <test_parse@@Base+0x360>
  4110a2:	nop    WORD PTR [rax+rax*1+0x0]
  4110a8:	test   r14d,r14d
  4110ab:	jne    411150 <test_parse@@Base+0x3a0>
  4110b1:	lea    rdx,[rip+0x9225]        # 41a2dd <_IO_stdin_used@@Base+0x2dd>
  4110b8:	mov    ecx,r14d
  4110bb:	mov    esi,0x1
  4110c0:	mov    rdi,r13
  4110c3:	xor    eax,eax
  4110c5:	call   403150 <__fprintf_chk@plt>
  4110ca:	movzx  ecx,BYTE PTR [rbx]
  4110cd:	lea    rdx,[rip+0x9211]        # 41a2e5 <_IO_stdin_used@@Base+0x2e5>
  4110d4:	xor    eax,eax
  4110d6:	mov    esi,0x1
  4110db:	mov    rdi,r13
  4110de:	call   403150 <__fprintf_chk@plt>
  4110e3:	movzx  eax,BYTE PTR [rbx]
  4110e6:	lea    edx,[rax-0x20]
  4110e9:	cmp    dl,0x5e
  4110ec:	jbe    411140 <test_parse@@Base+0x390>
  4110ee:	mov    eax,ebp
  4110f0:	mov    BYTE PTR [rsp+rax*1+0x220],0x2e
  4110f8:	add    r14d,0x1
  4110fc:	add    ebp,0x1
  4110ff:	add    rbx,0x1
  411103:	cmp    r14d,r15d
  411106:	mov    BYTE PTR [rsp+rbp*1+0x220],0x0
  41110e:	je     411170 <test_parse@@Base+0x3c0>
  411110:	mov    ebp,r14d
  411113:	and    ebp,0xf
  411116:	je     4110a8 <test_parse@@Base+0x2f8>
  411118:	test   r14b,0x7
  41111c:	jne    4110ca <test_parse@@Base+0x31a>
  41111e:	lea    rdx,[rip+0x91ce]        # 41a2f3 <_IO_stdin_used@@Base+0x2f3>
  411125:	mov    esi,0x1
  41112a:	mov    rdi,r13
  41112d:	xor    eax,eax
  41112f:	call   403150 <__fprintf_chk@plt>
  411134:	jmp    4110ca <test_parse@@Base+0x31a>
  411136:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411140:	mov    edx,ebp
  411142:	mov    BYTE PTR [rsp+rdx*1+0x220],al
  411149:	jmp    4110f8 <test_parse@@Base+0x348>
  41114b:	nop    DWORD PTR [rax+rax*1+0x0]
  411150:	mov    rcx,QWORD PTR [rsp+0x20]
  411155:	lea    rdx,[rip+0x915e]        # 41a2ba <_IO_stdin_used@@Base+0x2ba>
  41115c:	mov    esi,0x1
  411161:	mov    rdi,r13
  411164:	xor    eax,eax
  411166:	call   403150 <__fprintf_chk@plt>
  41116b:	jmp    4110b1 <test_parse@@Base+0x301>
  411170:	test   r14b,0xf
  411174:	mov    rbx,QWORD PTR [rsp+0x28]
  411179:	je     4111a4 <test_parse@@Base+0x3f4>
  41117b:	lea    rbp,[rip+0x916f]        # 41a2f1 <_IO_stdin_used@@Base+0x2f1>
  411182:	nop    WORD PTR [rax+rax*1+0x0]
  411188:	xor    eax,eax
  41118a:	mov    rdx,rbp
  41118d:	mov    esi,0x1
  411192:	mov    rdi,r13
  411195:	add    r14d,0x1
  411199:	call   403150 <__fprintf_chk@plt>
  41119e:	test   r14b,0xf
  4111a2:	jne    411188 <test_parse@@Base+0x3d8>
  4111a4:	mov    rcx,QWORD PTR [rsp+0x20]
  4111a9:	lea    rdx,[rip+0x910a]        # 41a2ba <_IO_stdin_used@@Base+0x2ba>
  4111b0:	mov    rdi,r13
  4111b3:	mov    esi,0x1
  4111b8:	xor    eax,eax
  4111ba:	xor    r15d,r15d
  4111bd:	lea    r14,[rip+0x912c]        # 41a2f0 <_IO_stdin_used@@Base+0x2f0>
  4111c4:	call   403150 <__fprintf_chk@plt>
  4111c9:	mov    rax,QWORD PTR [rip+0xfe28]        # 420ff8 <stderr@GLIBC_2.2.5>
  4111d0:	mov    r8,QWORD PTR [rsp+0x38]
  4111d5:	lea    rdx,[rip+0x92bc]        # 41a498 <_IO_stdin_used@@Base+0x498>
  4111dc:	mov    rcx,rbx
  4111df:	mov    esi,0x1
  4111e4:	mov    rdi,QWORD PTR [rax]
  4111e7:	xor    eax,eax
  4111e9:	call   403150 <__fprintf_chk@plt>
  4111ee:	mov    rbx,QWORD PTR [rsp+0x18]
  4111f3:	mov    rdi,rbx
  4111f6:	call   410be0 <verify_parse@@Base>
  4111fb:	mov    rax,QWORD PTR [rip+0xfdde]        # 420fe0 <stdout@GLIBC_2.2.5>
  411202:	mov    r8,QWORD PTR [rsp+0x38]
  411207:	lea    rcx,[rip+0x9120]        # 41a32e <_IO_stdin_used@@Base+0x32e>
  41120e:	lea    rdx,[rip+0x90ab]        # 41a2c0 <_IO_stdin_used@@Base+0x2c0>
  411215:	mov    esi,0x1
  41121a:	mov    rbp,QWORD PTR [rax]
  41121d:	xor    eax,eax
  41121f:	mov    QWORD PTR [rsp+0x20],r8
  411224:	mov    rdi,rbp
  411227:	call   403150 <__fprintf_chk@plt>
  41122c:	mov    r8,QWORD PTR [rsp+0x20]
  411231:	test   r8d,r8d
  411234:	mov    r13d,r8d
  411237:	jne    41126c <test_parse@@Base+0x4bc>
  411239:	jmp    4112b0 <test_parse@@Base+0x500>
  41123b:	nop    DWORD PTR [rax+rax*1+0x0]
  411240:	test   r15b,0x7
  411244:	je     411290 <test_parse@@Base+0x4e0>
  411246:	movzx  ecx,BYTE PTR [rbx]
  411249:	lea    rdx,[rip+0x90a5]        # 41a2f5 <_IO_stdin_used@@Base+0x2f5>
  411250:	xor    eax,eax
  411252:	mov    esi,0x1
  411257:	mov    rdi,rbp
  41125a:	add    r15d,0x1
  41125e:	add    rbx,0x1
  411262:	call   403150 <__fprintf_chk@plt>
  411267:	cmp    r15d,r13d
  41126a:	je     4112b0 <test_parse@@Base+0x500>
  41126c:	test   r15b,0xf
  411270:	jne    411240 <test_parse@@Base+0x490>
  411272:	mov    rdx,r14
  411275:	mov    esi,0x1
  41127a:	mov    rdi,rbp
  41127d:	xor    eax,eax
  41127f:	call   403150 <__fprintf_chk@plt>
  411284:	jmp    411246 <test_parse@@Base+0x496>
  411286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411290:	lea    rdx,[rip+0x905a]        # 41a2f1 <_IO_stdin_used@@Base+0x2f1>
  411297:	mov    esi,0x1
  41129c:	mov    rdi,rbp
  41129f:	xor    eax,eax
  4112a1:	call   403150 <__fprintf_chk@plt>
  4112a6:	jmp    411246 <test_parse@@Base+0x496>
  4112a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4112b0:	lea    rdx,[rip+0x9034]        # 41a2eb <_IO_stdin_used@@Base+0x2eb>
  4112b7:	mov    esi,0x1
  4112bc:	mov    rdi,rbp
  4112bf:	xor    eax,eax
  4112c1:	call   403150 <__fprintf_chk@plt>
  4112c6:	mov    rdi,QWORD PTR [rsp+0x8]
  4112cb:	call   411bd0 <flatcc_builder_reset@@Base>
  4112d0:	cmp    QWORD PTR [rsp+0x18],0x0
  4112d6:	je     410f60 <test_parse@@Base+0x1b0>
  4112dc:	mov    rdi,QWORD PTR [rsp+0x18]
  4112e1:	call   415230 <flatcc_builder_aligned_free@@Base>
  4112e6:	jmp    410f60 <test_parse@@Base+0x1b0>
  4112eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4112f0:	mov    eax,DWORD PTR [rsp+0x60]
  4112f4:	mov    DWORD PTR [rsp+0x14],eax
  4112f8:	jmp    410f0e <test_parse@@Base+0x15e>
  4112fd:	lea    rax,[rsp+0x220]
  411305:	mov    QWORD PTR [rsp+0x20],rax
  41130a:	jmp    4111a4 <test_parse@@Base+0x3f4>
  41130f:	call   403080 <__stack_chk_fail@plt>
  411314:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41131e:	xchg   ax,ax
  411320:	push   rbp
  411321:	push   rbx
  411322:	mov    ebp,edx
  411324:	mov    rbx,rdi
  411327:	mov    r8d,0x1
  41132d:	mov    ecx,0x1
  411332:	sub    rsp,0x8
  411336:	mov    edx,DWORD PTR [rdi+0x28]
  411339:	add    rdx,rsi
  41133c:	lea    rsi,[rdi+0x68]
  411340:	mov    rdi,QWORD PTR [rdi+0x40]
  411344:	call   QWORD PTR [rbx+0x50]
  411347:	test   eax,eax
  411349:	jne    411378 <test_parse@@Base+0x5c8>
  41134b:	mov    edx,DWORD PTR [rbx+0x28]
  41134e:	mov    rcx,rdx
  411351:	add    rdx,QWORD PTR [rbx+0x68]
  411355:	mov    QWORD PTR [rbx+0x18],rdx
  411359:	mov    edx,DWORD PTR [rbx+0x70]
  41135c:	sub    edx,ecx
  41135e:	cmp    ebp,edx
  411360:	cmovb  edx,ebp
  411363:	mov    DWORD PTR [rbx+0x24],edx
  411366:	mov    rdx,QWORD PTR [rbx+0x30]
  41136a:	mov    DWORD PTR [rdx+0x4],ebp
  41136d:	add    rsp,0x8
  411371:	pop    rbx
  411372:	pop    rbp
  411373:	ret    
  411374:	nop    DWORD PTR [rax+0x0]
  411378:	mov    eax,0xffffffff
  41137d:	jmp    41136d <test_parse@@Base+0x5bd>
  41137f:	nop

0000000000411380 <flatcc_builder_default_alloc@@Base>:
  411380:	push   r12
  411382:	push   rbp
  411383:	mov    rbp,rsi
  411386:	push   rbx
  411387:	sub    rsp,0x10
  41138b:	test   rdx,rdx
  41138e:	jne    4113c0 <flatcc_builder_default_alloc@@Base+0x40>
  411390:	mov    rdi,QWORD PTR [rsi]
  411393:	xor    eax,eax
  411395:	test   rdi,rdi
  411398:	je     4113b7 <flatcc_builder_default_alloc@@Base+0x37>
  41139a:	mov    DWORD PTR [rsp+0xc],eax
  41139e:	call   403030 <free@plt>
  4113a3:	mov    eax,DWORD PTR [rsp+0xc]
  4113a7:	mov    QWORD PTR [rbp+0x0],0x0
  4113af:	mov    QWORD PTR [rbp+0x8],0x0
  4113b7:	add    rsp,0x10
  4113bb:	pop    rbx
  4113bc:	pop    rbp
  4113bd:	pop    r12
  4113bf:	ret    
  4113c0:	cmp    r8d,0x4
  4113c4:	je     411460 <flatcc_builder_default_alloc@@Base+0xe0>
  4113ca:	jle    411470 <flatcc_builder_default_alloc@@Base+0xf0>
  4113d0:	cmp    r8d,0x5
  4113d4:	mov    rbx,rdx
  4113d7:	je     4113f8 <flatcc_builder_default_alloc@@Base+0x78>
  4113d9:	cmp    r8d,0x7
  4113dd:	mov    ebx,0x40
  4113e2:	je     4113f3 <flatcc_builder_default_alloc@@Base+0x73>
  4113e4:	jmp    41147f <flatcc_builder_default_alloc@@Base+0xff>
  4113e9:	nop    DWORD PTR [rax+0x0]
  4113f0:	add    rbx,rbx
  4113f3:	cmp    rdx,rbx
  4113f6:	ja     4113f0 <flatcc_builder_default_alloc@@Base+0x70>
  4113f8:	mov    rax,QWORD PTR [rbp+0x8]
  4113fc:	cmp    rdx,rax
  4113ff:	ja     41140e <flatcc_builder_default_alloc@@Base+0x8e>
  411401:	shr    rax,1
  411404:	mov    rdx,rax
  411407:	xor    eax,eax
  411409:	cmp    rdx,rbx
  41140c:	jae    4113b7 <flatcc_builder_default_alloc@@Base+0x37>
  41140e:	mov    rdi,QWORD PTR [rbp+0x0]
  411412:	mov    rsi,rbx
  411415:	mov    DWORD PTR [rsp+0xc],ecx
  411419:	call   403120 <realloc@plt>
  41141e:	test   rax,rax
  411421:	mov    r12,rax
  411424:	je     411489 <flatcc_builder_default_alloc@@Base+0x109>
  411426:	mov    ecx,DWORD PTR [rsp+0xc]
  41142a:	test   ecx,ecx
  41142c:	je     411448 <flatcc_builder_default_alloc@@Base+0xc8>
  41142e:	mov    rax,QWORD PTR [rbp+0x8]
  411432:	cmp    rax,rbx
  411435:	jae    411448 <flatcc_builder_default_alloc@@Base+0xc8>
  411437:	mov    rdx,rbx
  41143a:	lea    rdi,[r12+rax*1]
  41143e:	xor    esi,esi
  411440:	sub    rdx,rax
  411443:	call   4030b0 <memset@plt>
  411448:	mov    QWORD PTR [rbp+0x0],r12
  41144c:	mov    QWORD PTR [rbp+0x8],rbx
  411450:	add    rsp,0x10
  411454:	pop    rbx
  411455:	xor    eax,eax
  411457:	pop    rbp
  411458:	pop    r12
  41145a:	ret    
  41145b:	nop    DWORD PTR [rax+rax*1+0x0]
  411460:	mov    ebx,0x120
  411465:	jmp    4113f3 <flatcc_builder_default_alloc@@Base+0x73>
  411467:	nop    WORD PTR [rax+rax*1+0x0]
  411470:	cmp    r8d,0x1
  411474:	mov    ebx,0x100
  411479:	je     4113f3 <flatcc_builder_default_alloc@@Base+0x73>
  41147f:	mov    ebx,0x20
  411484:	jmp    4113f3 <flatcc_builder_default_alloc@@Base+0x73>
  411489:	mov    eax,0xffffffff
  41148e:	jmp    4113b7 <flatcc_builder_default_alloc@@Base+0x37>
  411493:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41149e:	xchg   ax,ax
  4114a0:	push   rbx
  4114a1:	mov    r9,rdi
  4114a4:	sub    rsp,0xa0
  4114ab:	mov    rbx,QWORD PTR fs:0x28
  4114b4:	mov    QWORD PTR [rsp+0x98],rbx
  4114bc:	xor    ebx,ebx
  4114be:	test   dx,dx
  4114c1:	je     411520 <flatcc_builder_default_alloc@@Base+0x1a0>
  4114c3:	mov    eax,edx
  4114c5:	movzx  edx,dx
  4114c8:	movzx  edi,WORD PTR [rsi]
  4114cb:	cmp    di,0x3
  4114cf:	ja     4114de <flatcc_builder_default_alloc@@Base+0x15e>
  4114d1:	mov    edi,0x4
  4114d6:	mov    WORD PTR [rsi],di
  4114d9:	mov    edi,0x4
  4114de:	cmp    ax,di
  4114e1:	jbe    4114e6 <flatcc_builder_default_alloc@@Base+0x166>
  4114e3:	mov    WORD PTR [rsi],ax
  4114e6:	test   ecx,ecx
  4114e8:	jne    4114f8 <flatcc_builder_default_alloc@@Base+0x178>
  4114ea:	mov    ebx,DWORD PTR [r9+0xf4]
  4114f1:	sub    edx,0x1
  4114f4:	and    edx,ebx
  4114f6:	jne    411540 <flatcc_builder_default_alloc@@Base+0x1c0>
  4114f8:	xor    eax,eax
  4114fa:	mov    rbx,QWORD PTR [rsp+0x98]
  411502:	xor    rbx,QWORD PTR fs:0x28
  41150b:	jne    4115ad <flatcc_builder_default_alloc@@Base+0x22d>
  411511:	add    rsp,0xa0
  411518:	pop    rbx
  411519:	ret    
  41151a:	nop    WORD PTR [rax+rax*1+0x0]
  411520:	movzx  eax,WORD PTR [rdi+0xec]
  411527:	test   ax,ax
  41152a:	movzx  edx,ax
  41152d:	jne    4114c8 <flatcc_builder_default_alloc@@Base+0x148>
  41152f:	mov    edx,0x1
  411534:	mov    eax,0x1
  411539:	jmp    4114c8 <flatcc_builder_default_alloc@@Base+0x148>
  41153b:	nop    DWORD PTR [rax+rax*1+0x0]
  411540:	mov    rax,0x41b060
  411547:	movsxd r8,edx
  41154a:	add    edx,ebx
  41154c:	cmp    ebx,edx
  41154e:	mov    QWORD PTR [rsp],r8
  411552:	mov    QWORD PTR [rsp+0x18],r8
  411557:	mov    DWORD PTR [rsp+0x8],0x1
  41155f:	mov    DWORD PTR [r9+0xf4],edx
  411566:	mov    QWORD PTR [rsp+0x10],rax
  41156b:	jg     4115b2 <flatcc_builder_default_alloc@@Base+0x232>
  41156d:	lea    rsi,[rsp+0x10]
  411572:	mov    rdi,QWORD PTR [r9+0x38]
  411576:	mov    ecx,ebx
  411578:	mov    edx,0x1
  41157d:	call   QWORD PTR [r9+0x48]
  411581:	test   eax,eax
  411583:	jne    4115b7 <flatcc_builder_default_alloc@@Base+0x237>
  411585:	cmp    ebx,0xffffffff
  411588:	jne    4114f8 <flatcc_builder_default_alloc@@Base+0x178>
  41158e:	lea    rcx,[rip+0x9a3b]        # 41afd0 <_IO_stdin_used@@Base+0xfd0>
  411595:	lea    rsi,[rip+0x8fcc]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41159c:	lea    rdi,[rip+0x935c]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4115a3:	mov    edx,0x2be
  4115a8:	call   4030a0 <__assert_fail@plt>
  4115ad:	call   403080 <__stack_chk_fail@plt>
  4115b2:	call   403341 <posix_memalign@plt+0x1e1>
  4115b7:	lea    rcx,[rip+0x9a02]        # 41afc0 <_IO_stdin_used@@Base+0xfc0>
  4115be:	lea    rsi,[rip+0x8fa3]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4115c5:	lea    rdi,[rip+0x9333]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4115cc:	mov    edx,0x2a5
  4115d1:	call   4030a0 <__assert_fail@plt>
  4115d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4115e0:	push   r12
  4115e2:	push   rbp
  4115e3:	mov    r12d,esi
  4115e6:	push   rbx
  4115e7:	movsxd rax,DWORD PTR [rdi+0x104]
  4115ee:	mov    rbx,rdi
  4115f1:	lea    edx,[rax+0x1]
  4115f4:	cmp    edx,DWORD PTR [rdi+0x108]
  4115fa:	mov    DWORD PTR [rdi+0x104],edx
  411600:	jle    411680 <flatcc_builder_default_alloc@@Base+0x300>
  411602:	mov    ecx,DWORD PTR [rdi+0x120]
  411608:	test   ecx,ecx
  41160a:	jle    411614 <flatcc_builder_default_alloc@@Base+0x294>
  41160c:	cmp    edx,ecx
  41160e:	jg     411700 <flatcc_builder_default_alloc@@Base+0x380>
  411614:	lea    rcx,[rax+rax*8]
  411618:	lea    rbp,[rcx*4+0x0]
  411620:	lea    rdx,[rbp+0x24]
  411624:	cmp    rdx,QWORD PTR [rbx+0xa0]
  41162b:	ja     4116d8 <flatcc_builder_default_alloc@@Base+0x358>
  411631:	mov    rcx,rbp
  411634:	add    rcx,QWORD PTR [rbx+0x98]
  41163b:	test   rcx,rcx
  41163e:	mov    QWORD PTR [rbx+0x30],rcx
  411642:	je     411700 <flatcc_builder_default_alloc@@Base+0x380>
  411648:	movabs rdx,0xe38e38e38e38e38f
  411652:	mov    rax,rdx
  411655:	mul    QWORD PTR [rbx+0xa0]
  41165c:	mov    eax,DWORD PTR [rbx+0x120]
  411662:	shr    rdx,0x5
  411666:	test   eax,eax
  411668:	mov    DWORD PTR [rbx+0x108],edx
  41166e:	jle    4116d0 <flatcc_builder_default_alloc@@Base+0x350>
  411670:	cmp    eax,edx
  411672:	jge    4116d0 <flatcc_builder_default_alloc@@Base+0x350>
  411674:	mov    DWORD PTR [rbx+0x108],eax
  41167a:	mov    rax,rcx
  41167d:	jmp    41168c <flatcc_builder_default_alloc@@Base+0x30c>
  41167f:	nop
  411680:	mov    rax,QWORD PTR [rdi+0x30]
  411684:	add    rax,0x24
  411688:	mov    QWORD PTR [rdi+0x30],rax
  41168c:	movzx  edx,WORD PTR [rbx+0xea]
  411693:	mov    ecx,DWORD PTR [rbx+0x20]
  411696:	mov    DWORD PTR [rax+0x8],ecx
  411699:	mov    WORD PTR [rax+0xc],dx
  41169d:	mov    edx,DWORD PTR [rbx+0x28]
  4116a0:	mov    WORD PTR [rbx+0xea],r12w
  4116a8:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4116af:	mov    DWORD PTR [rax],edx
  4116b1:	lea    eax,[rcx+rdx*1+0x7]
  4116b5:	mov    DWORD PTR [rbx+0x20],0x0
  4116bc:	and    eax,0xfffffff8
  4116bf:	mov    DWORD PTR [rbx+0x28],eax
  4116c2:	xor    eax,eax
  4116c4:	pop    rbx
  4116c5:	pop    rbp
  4116c6:	pop    r12
  4116c8:	ret    
  4116c9:	nop    DWORD PTR [rax+0x0]
  4116d0:	mov    rax,rcx
  4116d3:	jmp    41168c <flatcc_builder_default_alloc@@Base+0x30c>
  4116d5:	nop    DWORD PTR [rax]
  4116d8:	xor    ecx,ecx
  4116da:	lea    rsi,[rbx+0x98]
  4116e1:	mov    rdi,QWORD PTR [rbx+0x40]
  4116e5:	mov    r8d,0x4
  4116eb:	call   QWORD PTR [rbx+0x50]
  4116ee:	test   eax,eax
  4116f0:	je     411631 <flatcc_builder_default_alloc@@Base+0x2b1>
  4116f6:	call   40331e <posix_memalign@plt+0x1be>
  4116fb:	nop    DWORD PTR [rax+rax*1+0x0]
  411700:	mov    eax,0xffffffff
  411705:	jmp    4116c4 <flatcc_builder_default_alloc@@Base+0x344>
  411707:	nop    WORD PTR [rax+rax*1+0x0]
  411710:	push   rbp
  411711:	push   rbx
  411712:	sub    rsp,0xb8
  411719:	mov    rax,QWORD PTR fs:0x28
  411722:	mov    QWORD PTR [rsp+0xa8],rax
  41172a:	xor    eax,eax
  41172c:	cmp    edx,0x3fffffff
  411732:	ja     4118c8 <flatcc_builder_default_alloc@@Base+0x548>
  411738:	cmp    WORD PTR [rdi+0xe8],0x3
  411740:	mov    rbx,rdi
  411743:	mov    r10d,edx
  411746:	ja     411754 <flatcc_builder_default_alloc@@Base+0x3d4>
  411748:	mov    eax,0x4
  41174d:	mov    WORD PTR [rdi+0xe8],ax
  411754:	mov    eax,DWORD PTR [rbx+0xf0]
  41175a:	lea    r9d,[rdx*4+0x0]
  411762:	lea    r8,[rsp+0xc]
  411767:	mov    DWORD PTR [rsp+0xc],edx
  41176b:	mov    QWORD PTR [rsp+0x10],0x4
  411774:	mov    QWORD PTR [rsp+0x20],r8
  411779:	mov    QWORD PTR [rsp+0x28],0x4
  411782:	mov    r8d,0x4
  411788:	mov    edi,eax
  41178a:	mov    DWORD PTR [rsp+0x18],0x1
  411792:	and    edi,0x3
  411795:	test   r9d,r9d
  411798:	je     4117b5 <flatcc_builder_default_alloc@@Base+0x435>
  41179a:	lea    r8,[r9+0x4]
  41179e:	mov    QWORD PTR [rsp+0x30],rsi
  4117a3:	mov    QWORD PTR [rsp+0x38],r9
  4117a8:	mov    DWORD PTR [rsp+0x18],0x2
  4117b0:	mov    QWORD PTR [rsp+0x10],r8
  4117b5:	test   edi,edi
  4117b7:	jne    411890 <flatcc_builder_default_alloc@@Base+0x510>
  4117bd:	mov    r11d,eax
  4117c0:	sub    r11d,r8d
  4117c3:	test   edx,edx
  4117c5:	je     411836 <flatcc_builder_default_alloc@@Base+0x4b6>
  4117c7:	mov    edx,0xfffffffc
  4117cc:	xor    eax,eax
  4117ce:	jmp    4117f7 <flatcc_builder_default_alloc@@Base+0x477>
  4117d0:	mov    r9d,edx
  4117d3:	sub    r9d,r11d
  4117d6:	add    edi,r9d
  4117d9:	test   rcx,rcx
  4117dc:	mov    DWORD PTR [rsi+rax*4],edi
  4117df:	je     4117eb <flatcc_builder_default_alloc@@Base+0x46b>
  4117e1:	cmp    BYTE PTR [rcx+rax*1],0x0
  4117e5:	je     4118eb <flatcc_builder_default_alloc@@Base+0x56b>
  4117eb:	add    rax,0x1
  4117ef:	sub    edx,0x4
  4117f2:	cmp    r10d,eax
  4117f5:	jbe    411830 <flatcc_builder_default_alloc@@Base+0x4b0>
  4117f7:	mov    edi,DWORD PTR [rsi+rax*4]
  4117fa:	test   edi,edi
  4117fc:	jne    4117d0 <flatcc_builder_default_alloc@@Base+0x450>
  4117fe:	test   rcx,rcx
  411801:	je     4118cc <flatcc_builder_default_alloc@@Base+0x54c>
  411807:	cmp    BYTE PTR [rcx+rax*1],0x0
  41180b:	je     4117eb <flatcc_builder_default_alloc@@Base+0x46b>
  41180d:	lea    rcx,[rip+0x941c]        # 41ac30 <_IO_stdin_used@@Base+0xc30>
  411814:	lea    rsi,[rip+0x8d4d]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41181b:	lea    rdi,[rip+0x90df]        # 41a901 <_IO_stdin_used@@Base+0x901>
  411822:	mov    edx,0x5b5
  411827:	call   4030a0 <__assert_fail@plt>
  41182c:	nop    DWORD PTR [rax+0x0]
  411830:	mov    eax,DWORD PTR [rbx+0xf0]
  411836:	mov    ebp,eax
  411838:	sub    ebp,r8d
  41183b:	cmp    ebp,eax
  41183d:	jge    41190a <flatcc_builder_default_alloc@@Base+0x58a>
  411843:	lea    rsi,[rsp+0x20]
  411848:	mov    rdi,QWORD PTR [rbx+0x38]
  41184c:	mov    ecx,ebp
  41184e:	mov    edx,DWORD PTR [rsp+0x18]
  411852:	call   QWORD PTR [rbx+0x48]
  411855:	test   eax,eax
  411857:	jne    41192e <flatcc_builder_default_alloc@@Base+0x5ae>
  41185d:	mov    DWORD PTR [rbx+0xf0],ebp
  411863:	mov    rbx,QWORD PTR [rsp+0xa8]
  41186b:	xor    rbx,QWORD PTR fs:0x28
  411874:	mov    eax,ebp
  411876:	jne    411929 <flatcc_builder_default_alloc@@Base+0x5a9>
  41187c:	add    rsp,0xb8
  411883:	pop    rbx
  411884:	pop    rbp
  411885:	ret    
  411886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411890:	movsxd r11,DWORD PTR [rsp+0x18]
  411895:	mov    rbp,0x41b060
  41189c:	add    r8,rdi
  41189f:	mov    QWORD PTR [rsp+0x10],r8
  4118a4:	mov    r9,r11
  4118a7:	shl    r11,0x4
  4118ab:	add    r9d,0x1
  4118af:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  4118b4:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  4118b9:	mov    DWORD PTR [rsp+0x18],r9d
  4118be:	jmp    4117bd <flatcc_builder_default_alloc@@Base+0x43d>
  4118c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4118c8:	xor    ebp,ebp
  4118ca:	jmp    411863 <flatcc_builder_default_alloc@@Base+0x4e3>
  4118cc:	lea    rcx,[rip+0x935d]        # 41ac30 <_IO_stdin_used@@Base+0xc30>
  4118d3:	lea    rsi,[rip+0x8c8e]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4118da:	lea    rdi,[rip+0x901e]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4118e1:	mov    edx,0x5b7
  4118e6:	call   4030a0 <__assert_fail@plt>
  4118eb:	lea    rcx,[rip+0x933e]        # 41ac30 <_IO_stdin_used@@Base+0xc30>
  4118f2:	lea    rsi,[rip+0x8c6f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4118f9:	lea    rdi,[rip+0x8ff3]        # 41a8f3 <_IO_stdin_used@@Base+0x8f3>
  411900:	mov    edx,0x5b1
  411905:	call   4030a0 <__assert_fail@plt>
  41190a:	lea    rcx,[rip+0x969f]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  411911:	lea    rsi,[rip+0x8c50]        # 41a568 <_IO_stdin_used@@Base+0x568>
  411918:	lea    rdi,[rip+0x8fe0]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  41191f:	mov    edx,0x287
  411924:	call   4030a0 <__assert_fail@plt>
  411929:	call   403080 <__stack_chk_fail@plt>
  41192e:	call   403364 <posix_memalign@plt+0x204>
  411933:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41193e:	xchg   ax,ax

0000000000411940 <flatcc_builder_flush_vtable_cache@@Base>:
  411940:	cmp    QWORD PTR [rdi+0xd8],0x0
  411948:	jne    411950 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  41194a:	ret    
  41194b:	nop    DWORD PTR [rax+rax*1+0x0]
  411950:	push   rbx
  411951:	mov    rbx,rdi
  411954:	mov    rdi,QWORD PTR [rdi+0xa8]
  41195b:	mov    rdx,QWORD PTR [rbx+0xb0]
  411962:	xor    esi,esi
  411964:	call   4030b0 <memset@plt>
  411969:	mov    DWORD PTR [rbx+0xe4],0x10
  411973:	mov    DWORD PTR [rbx+0xe0],0x0
  41197d:	pop    rbx
  41197e:	ret    
  41197f:	nop

0000000000411980 <flatcc_builder_custom_init@@Base>:
  411980:	mov    QWORD PTR [rdi],0x0
  411987:	mov    QWORD PTR [rdi+0x180],0x0
  411992:	mov    r9,rdi
  411995:	lea    rdi,[rdi+0x8]
  411999:	mov    r10,rcx
  41199c:	mov    rcx,r9
  41199f:	xor    eax,eax
  4119a1:	and    rdi,0xfffffffffffffff8
  4119a5:	sub    rcx,rdi
  4119a8:	add    ecx,0x188
  4119ae:	shr    ecx,0x3
  4119b1:	test   rsi,rsi
  4119b4:	rep stos QWORD PTR es:[rdi],rax
  4119b7:	je     4119e8 <flatcc_builder_custom_init@@Base+0x68>
  4119b9:	test   r10,r10
  4119bc:	je     4119d8 <flatcc_builder_custom_init@@Base+0x58>
  4119be:	mov    QWORD PTR [r9+0x40],r8
  4119c2:	mov    QWORD PTR [r9+0x50],r10
  4119c6:	xor    eax,eax
  4119c8:	mov    QWORD PTR [r9+0x38],rdx
  4119cc:	mov    QWORD PTR [r9+0x48],rsi
  4119d0:	ret    
  4119d1:	nop    DWORD PTR [rax+0x0]
  4119d8:	mov    r10,0x411380
  4119df:	jmp    4119be <flatcc_builder_custom_init@@Base+0x3e>
  4119e1:	nop    DWORD PTR [rax+0x0]
  4119e8:	mov    DWORD PTR [r9+0x128],0x1
  4119f3:	lea    rdx,[r9+0x130]
  4119fa:	mov    rsi,0x415430
  411a01:	jmp    4119b9 <flatcc_builder_custom_init@@Base+0x39>
  411a03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411a0e:	xchg   ax,ax

0000000000411a10 <flatcc_builder_init@@Base>:
  411a10:	xor    r8d,r8d
  411a13:	xor    ecx,ecx
  411a15:	xor    edx,edx
  411a17:	xor    esi,esi
  411a19:	jmp    411980 <flatcc_builder_custom_init@@Base>
  411a1e:	xchg   ax,ax

0000000000411a20 <flatcc_builder_custom_reset@@Base>:
  411a20:	push   r14
  411a22:	mov    r14d,esi
  411a25:	push   r13
  411a27:	mov    r13d,edx
  411a2a:	push   r12
  411a2c:	mov    r12,rdi
  411a2f:	push   rbp
  411a30:	xor    ebp,ebp
  411a32:	push   rbx
  411a33:	lea    rbx,[rdi+0x58]
  411a37:	jmp    411a86 <flatcc_builder_custom_reset@@Base+0x66>
  411a39:	nop    DWORD PTR [rax+0x0]
  411a40:	cmp    ebp,0x5
  411a43:	je     411a6f <flatcc_builder_custom_reset@@Base+0x4f>
  411a45:	test   r13d,r13d
  411a48:	je     411a6f <flatcc_builder_custom_reset@@Base+0x4f>
  411a4a:	mov    rdi,QWORD PTR [r12+0x40]
  411a4f:	mov    r8d,ebp
  411a52:	mov    ecx,0x1
  411a57:	mov    edx,0x1
  411a5c:	mov    rsi,rbx
  411a5f:	call   QWORD PTR [r12+0x50]
  411a64:	test   eax,eax
  411a66:	jne    411bc0 <flatcc_builder_custom_reset@@Base+0x1a0>
  411a6c:	mov    rdi,QWORD PTR [rbx]
  411a6f:	mov    rdx,QWORD PTR [rbx+0x8]
  411a73:	xor    esi,esi
  411a75:	call   4030b0 <memset@plt>
  411a7a:	add    ebp,0x1
  411a7d:	add    rbx,0x10
  411a81:	cmp    ebp,0x8
  411a84:	je     411ab8 <flatcc_builder_custom_reset@@Base+0x98>
  411a86:	mov    rdi,QWORD PTR [rbx]
  411a89:	test   rdi,rdi
  411a8c:	jne    411a40 <flatcc_builder_custom_reset@@Base+0x20>
  411a8e:	cmp    QWORD PTR [rbx+0x8],0x0
  411a93:	je     411a7a <flatcc_builder_custom_reset@@Base+0x5a>
  411a95:	lea    rcx,[rip+0x95a4]        # 41b040 <_IO_stdin_used@@Base+0x1040>
  411a9c:	lea    rsi,[rip+0x8ac5]        # 41a568 <_IO_stdin_used@@Base+0x568>
  411aa3:	lea    rdi,[rip+0x8e65]        # 41a90f <_IO_stdin_used@@Base+0x90f>
  411aaa:	mov    edx,0x1b2
  411aaf:	call   4030a0 <__assert_fail@plt>
  411ab4:	nop    DWORD PTR [rax+0x0]
  411ab8:	mov    edx,DWORD PTR [r12+0xe4]
  411ac0:	mov    DWORD PTR [r12+0xe0],0x0
  411acc:	test   edx,edx
  411ace:	je     411adc <flatcc_builder_custom_reset@@Base+0xbc>
  411ad0:	mov    DWORD PTR [r12+0xe4],0x10
  411adc:	xor    eax,eax
  411ade:	test   r14d,r14d
  411ae1:	mov    DWORD PTR [r12+0xf0],0x0
  411aed:	mov    WORD PTR [r12+0xe8],ax
  411af6:	mov    rax,QWORD PTR [r12+0x68]
  411afb:	mov    DWORD PTR [r12+0xf4],0x0
  411b07:	mov    DWORD PTR [r12+0x104],0x0
  411b13:	mov    DWORD PTR [r12+0x108],0x0
  411b1f:	mov    DWORD PTR [r12+0x20],0x0
  411b28:	mov    QWORD PTR [r12+0x18],rax
  411b2d:	mov    rax,QWORD PTR [r12+0x88]
  411b35:	mov    DWORD PTR [r12+0x24],0x0
  411b3e:	mov    DWORD PTR [r12+0xfc],0x0
  411b4a:	mov    DWORD PTR [r12+0x100],0x0
  411b56:	mov    QWORD PTR [r12+0x30],0x0
  411b5f:	mov    QWORD PTR [r12],rax
  411b63:	mov    rax,QWORD PTR [r12+0x58]
  411b68:	mov    QWORD PTR [r12+0x8],rax
  411b6d:	jne    411b98 <flatcc_builder_custom_reset@@Base+0x178>
  411b6f:	mov    eax,DWORD PTR [r12+0x128]
  411b77:	test   eax,eax
  411b79:	je     411b8a <flatcc_builder_custom_reset@@Base+0x16a>
  411b7b:	lea    rdi,[r12+0x130]
  411b83:	call   4152c0 <flatcc_emitter_reset@@Base>
  411b88:	xor    eax,eax
  411b8a:	pop    rbx
  411b8b:	pop    rbp
  411b8c:	pop    r12
  411b8e:	pop    r13
  411b90:	pop    r14
  411b92:	ret    
  411b93:	nop    DWORD PTR [rax+rax*1+0x0]
  411b98:	mov    QWORD PTR [r12+0x118],0x0
  411ba4:	mov    DWORD PTR [r12+0x120],0x0
  411bb0:	mov    DWORD PTR [r12+0x124],0x0
  411bbc:	jmp    411b6f <flatcc_builder_custom_reset@@Base+0x14f>
  411bbe:	xchg   ax,ax
  411bc0:	mov    eax,0xffffffff
  411bc5:	jmp    411b8a <flatcc_builder_custom_reset@@Base+0x16a>
  411bc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000411bd0 <flatcc_builder_reset@@Base>:
  411bd0:	xor    edx,edx
  411bd2:	xor    esi,esi
  411bd4:	jmp    411a20 <flatcc_builder_custom_reset@@Base>
  411bd9:	nop    DWORD PTR [rax+0x0]

0000000000411be0 <flatcc_builder_clear@@Base>:
  411be0:	push   r12
  411be2:	lea    r12,[rdi+0x58]
  411be6:	push   rbp
  411be7:	xor    ebp,ebp
  411be9:	push   rbx
  411bea:	mov    rbx,rdi
  411bed:	nop    DWORD PTR [rax]
  411bf0:	mov    r8d,ebp
  411bf3:	add    ebp,0x1
  411bf6:	xor    ecx,ecx
  411bf8:	xor    edx,edx
  411bfa:	mov    rsi,r12
  411bfd:	mov    rdi,QWORD PTR [rbx+0x40]
  411c01:	add    r12,0x10
  411c05:	call   QWORD PTR [rbx+0x50]
  411c08:	cmp    ebp,0x8
  411c0b:	jne    411bf0 <flatcc_builder_clear@@Base+0x10>
  411c0d:	mov    eax,DWORD PTR [rbx+0x128]
  411c13:	test   eax,eax
  411c15:	je     411c23 <flatcc_builder_clear@@Base+0x43>
  411c17:	lea    rdi,[rbx+0x130]
  411c1e:	call   4153a0 <flatcc_emitter_clear@@Base>
  411c23:	lea    rdi,[rbx+0x8]
  411c27:	mov    QWORD PTR [rbx],0x0
  411c2e:	mov    QWORD PTR [rbx+0x180],0x0
  411c39:	xor    eax,eax
  411c3b:	and    rdi,0xfffffffffffffff8
  411c3f:	sub    rbx,rdi
  411c42:	lea    ecx,[rbx+0x188]
  411c48:	shr    ecx,0x3
  411c4b:	rep stos QWORD PTR es:[rdi],rax
  411c4e:	pop    rbx
  411c4f:	pop    rbp
  411c50:	pop    r12
  411c52:	ret    
  411c53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411c5e:	xchg   ax,ax

0000000000411c60 <flatcc_builder_enter_user_frame_ptr@@Base>:
  411c60:	push   r12
  411c62:	push   rbp
  411c63:	mov    r12,rdi
  411c66:	push   rbx
  411c67:	lea    rbx,[rsi+0x7]
  411c6b:	mov    rbp,QWORD PTR [rdi+0x180]
  411c72:	and    rbx,0xfffffffffffffff8
  411c76:	add    rbx,0x8
  411c7a:	lea    rdx,[rbx+rbp*1]
  411c7e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  411c85:	ja     411cd8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  411c87:	add    rbp,QWORD PTR [r12+0xc8]
  411c8f:	je     411d00 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  411c91:	mov    rdx,rbx
  411c94:	xor    esi,esi
  411c96:	mov    rdi,rbp
  411c99:	call   4030b0 <memset@plt>
  411c9e:	mov    rax,QWORD PTR [r12+0x178]
  411ca6:	mov    QWORD PTR [rbp+0x0],rax
  411caa:	mov    rax,QWORD PTR [r12+0x180]
  411cb2:	lea    rdx,[rax+0x8]
  411cb6:	add    rbx,rax
  411cb9:	lea    rax,[rbp+0x8]
  411cbd:	mov    QWORD PTR [r12+0x180],rbx
  411cc5:	mov    QWORD PTR [r12+0x178],rdx
  411ccd:	pop    rbx
  411cce:	pop    rbp
  411ccf:	pop    r12
  411cd1:	ret    
  411cd2:	nop    WORD PTR [rax+rax*1+0x0]
  411cd8:	lea    rsi,[rdi+0xc8]
  411cdf:	xor    ecx,ecx
  411ce1:	mov    rdi,QWORD PTR [rdi+0x40]
  411ce5:	mov    r8d,0x7
  411ceb:	call   QWORD PTR [r12+0x50]
  411cf0:	test   eax,eax
  411cf2:	je     411c87 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  411cf4:	call   40331e <posix_memalign@plt+0x1be>
  411cf9:	nop    DWORD PTR [rax+0x0]
  411d00:	xor    eax,eax
  411d02:	jmp    411ccd <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  411d04:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411d0f:	nop

0000000000411d10 <flatcc_builder_enter_user_frame@@Base>:
  411d10:	push   r12
  411d12:	push   rbp
  411d13:	mov    r12,rdi
  411d16:	push   rbx
  411d17:	lea    rbx,[rsi+0x7]
  411d1b:	mov    rbp,QWORD PTR [rdi+0x180]
  411d22:	and    rbx,0xfffffffffffffff8
  411d26:	add    rbx,0x8
  411d2a:	lea    rdx,[rbx+rbp*1]
  411d2e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  411d35:	ja     411d80 <flatcc_builder_enter_user_frame@@Base+0x70>
  411d37:	xor    eax,eax
  411d39:	add    rbp,QWORD PTR [r12+0xc8]
  411d41:	je     411d7b <flatcc_builder_enter_user_frame@@Base+0x6b>
  411d43:	mov    rdx,rbx
  411d46:	xor    esi,esi
  411d48:	mov    rdi,rbp
  411d4b:	call   4030b0 <memset@plt>
  411d50:	mov    rax,QWORD PTR [r12+0x178]
  411d58:	mov    QWORD PTR [rbp+0x0],rax
  411d5c:	mov    rdx,QWORD PTR [r12+0x180]
  411d64:	lea    rax,[rdx+0x8]
  411d68:	add    rbx,rdx
  411d6b:	mov    QWORD PTR [r12+0x180],rbx
  411d73:	mov    QWORD PTR [r12+0x178],rax
  411d7b:	pop    rbx
  411d7c:	pop    rbp
  411d7d:	pop    r12
  411d7f:	ret    
  411d80:	lea    rsi,[rdi+0xc8]
  411d87:	xor    ecx,ecx
  411d89:	mov    rdi,QWORD PTR [rdi+0x40]
  411d8d:	mov    r8d,0x7
  411d93:	call   QWORD PTR [r12+0x50]
  411d98:	test   eax,eax
  411d9a:	je     411d37 <flatcc_builder_enter_user_frame@@Base+0x27>
  411d9c:	call   40331e <posix_memalign@plt+0x1be>
  411da1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  411dac:	nop    DWORD PTR [rax+0x0]

0000000000411db0 <flatcc_builder_exit_user_frame@@Base>:
  411db0:	mov    rax,QWORD PTR [rdi+0x178]
  411db7:	test   rax,rax
  411dba:	je     411ddc <flatcc_builder_exit_user_frame@@Base+0x2c>
  411dbc:	mov    edx,eax
  411dbe:	add    rdx,QWORD PTR [rdi+0xc8]
  411dc5:	sub    rax,0x8
  411dc9:	mov    QWORD PTR [rdi+0x180],rax
  411dd0:	mov    rax,QWORD PTR [rdx-0x8]
  411dd4:	mov    QWORD PTR [rdi+0x178],rax
  411ddb:	ret    
  411ddc:	lea    rcx,[rip+0x922d]        # 41b010 <_IO_stdin_used@@Base+0x1010>
  411de3:	lea    rsi,[rip+0x877e]        # 41a568 <_IO_stdin_used@@Base+0x568>
  411dea:	lea    rdi,[rip+0x8b30]        # 41a921 <_IO_stdin_used@@Base+0x921>
  411df1:	sub    rsp,0x8
  411df5:	mov    edx,0x21e
  411dfa:	call   4030a0 <__assert_fail@plt>
  411dff:	nop

0000000000411e00 <flatcc_builder_exit_user_frame_at@@Base>:
  411e00:	cmp    QWORD PTR [rdi+0x178],rsi
  411e07:	jb     411e15 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  411e09:	mov    QWORD PTR [rdi+0x178],rsi
  411e10:	jmp    411db0 <flatcc_builder_exit_user_frame@@Base>
  411e15:	lea    rcx,[rip+0x91c4]        # 41afe0 <_IO_stdin_used@@Base+0xfe0>
  411e1c:	lea    rsi,[rip+0x8745]        # 41a568 <_IO_stdin_used@@Base+0x568>
  411e23:	lea    rdi,[rip+0x879e]        # 41a5c8 <_IO_stdin_used@@Base+0x5c8>
  411e2a:	sub    rsp,0x8
  411e2e:	mov    edx,0x227
  411e33:	call   4030a0 <__assert_fail@plt>
  411e38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000411e40 <flatcc_builder_get_current_user_frame@@Base>:
  411e40:	mov    rax,QWORD PTR [rdi+0x178]
  411e47:	ret    
  411e48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000411e50 <flatcc_builder_get_user_frame_ptr@@Base>:
  411e50:	mov    eax,esi
  411e52:	add    rax,QWORD PTR [rdi+0xc8]
  411e59:	ret    
  411e5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000411e60 <flatcc_builder_embed_buffer@@Base>:
  411e60:	push   r13
  411e62:	push   r12
  411e64:	mov    r12,rcx
  411e67:	push   rbp
  411e68:	push   rbx
  411e69:	xor    ecx,ecx
  411e6b:	mov    rbp,rdx
  411e6e:	movzx  edx,si
  411e71:	mov    rbx,rdi
  411e74:	sub    rsp,0xc8
  411e7b:	mov    r13d,r9d
  411e7e:	mov    WORD PTR [rsp+0xc],r8w
  411e84:	mov    r8d,DWORD PTR [rdi+0x100]
  411e8b:	lea    rsi,[rsp+0xc]
  411e90:	mov    rax,QWORD PTR fs:0x28
  411e99:	mov    QWORD PTR [rsp+0xb8],rax
  411ea1:	xor    eax,eax
  411ea3:	test   r8d,r8d
  411ea6:	setne  cl
  411ea9:	call   4114a0 <flatcc_builder_default_alloc@@Base+0x120>
  411eae:	test   eax,eax
  411eb0:	jne    411ff8 <flatcc_builder_embed_buffer@@Base+0x198>
  411eb6:	mov    edx,DWORD PTR [rbx+0xf0]
  411ebc:	movzx  ecx,WORD PTR [rsp+0xc]
  411ec1:	xor    esi,esi
  411ec3:	and    r13d,0x2
  411ec7:	mov    QWORD PTR [rsp+0x20],0x0
  411ed0:	mov    DWORD PTR [rsp+0x28],0x0
  411ed8:	setne  sil
  411edc:	xor    r8d,r8d
  411edf:	mov    eax,edx
  411ee1:	shl    esi,0x2
  411ee4:	sub    eax,r12d
  411ee7:	sub    ecx,0x1
  411eea:	sub    eax,esi
  411eec:	and    eax,ecx
  411eee:	lea    ecx,[rax+r12*1]
  411ef2:	mov    DWORD PTR [rsp+0x1c],ecx
  411ef6:	mov    ecx,DWORD PTR [rbx+0x100]
  411efc:	test   ecx,ecx
  411efe:	je     411f2a <flatcc_builder_embed_buffer@@Base+0xca>
  411f00:	lea    rcx,[rsp+0x1c]
  411f05:	mov    QWORD PTR [rsp+0x20],0x4
  411f0e:	mov    QWORD PTR [rsp+0x38],0x4
  411f17:	mov    DWORD PTR [rsp+0x28],0x1
  411f1f:	mov    r8d,0x4
  411f25:	mov    QWORD PTR [rsp+0x30],rcx
  411f2a:	test   r12,r12
  411f2d:	je     411f54 <flatcc_builder_embed_buffer@@Base+0xf4>
  411f2f:	movsxd rsi,DWORD PTR [rsp+0x28]
  411f34:	add    r8,r12
  411f37:	mov    QWORD PTR [rsp+0x20],r8
  411f3c:	mov    rcx,rsi
  411f3f:	shl    rsi,0x4
  411f43:	add    ecx,0x1
  411f46:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  411f4b:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  411f50:	mov    DWORD PTR [rsp+0x28],ecx
  411f54:	test   eax,eax
  411f56:	jne    411fc0 <flatcc_builder_embed_buffer@@Base+0x160>
  411f58:	mov    ebp,edx
  411f5a:	sub    ebp,r8d
  411f5d:	cmp    edx,ebp
  411f5f:	jle    411ffc <flatcc_builder_embed_buffer@@Base+0x19c>
  411f65:	movabs rax,0x10000000f
  411f6f:	cmp    r8,rax
  411f72:	ja     411ffc <flatcc_builder_embed_buffer@@Base+0x19c>
  411f78:	lea    rsi,[rsp+0x30]
  411f7d:	mov    rdi,QWORD PTR [rbx+0x38]
  411f81:	mov    ecx,ebp
  411f83:	mov    edx,DWORD PTR [rsp+0x28]
  411f87:	call   QWORD PTR [rbx+0x48]
  411f8a:	test   eax,eax
  411f8c:	jne    412020 <flatcc_builder_embed_buffer@@Base+0x1c0>
  411f92:	mov    DWORD PTR [rbx+0xf0],ebp
  411f98:	mov    rdi,QWORD PTR [rsp+0xb8]
  411fa0:	xor    rdi,QWORD PTR fs:0x28
  411fa9:	mov    eax,ebp
  411fab:	jne    41201b <flatcc_builder_embed_buffer@@Base+0x1bb>
  411fad:	add    rsp,0xc8
  411fb4:	pop    rbx
  411fb5:	pop    rbp
  411fb6:	pop    r12
  411fb8:	pop    r13
  411fba:	ret    
  411fbb:	nop    DWORD PTR [rax+rax*1+0x0]
  411fc0:	movsxd rsi,DWORD PTR [rsp+0x28]
  411fc5:	mov    rdi,0x41b060
  411fcc:	add    r8,rax
  411fcf:	mov    QWORD PTR [rsp+0x20],r8
  411fd4:	mov    rcx,rsi
  411fd7:	shl    rsi,0x4
  411fdb:	add    ecx,0x1
  411fde:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  411fe3:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  411fe8:	mov    DWORD PTR [rsp+0x28],ecx
  411fec:	jmp    411f58 <flatcc_builder_embed_buffer@@Base+0xf8>
  411ff1:	nop    DWORD PTR [rax+0x0]
  411ff8:	xor    ebp,ebp
  411ffa:	jmp    411f98 <flatcc_builder_embed_buffer@@Base+0x138>
  411ffc:	lea    rcx,[rip+0x8fad]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  412003:	lea    rsi,[rip+0x855e]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41200a:	lea    rdi,[rip+0x88ee]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  412011:	mov    edx,0x287
  412016:	call   4030a0 <__assert_fail@plt>
  41201b:	call   403080 <__stack_chk_fail@plt>
  412020:	call   403364 <posix_memalign@plt+0x204>
  412025:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000412030 <flatcc_builder_create_buffer@@Base>:
  412030:	push   r14
  412032:	push   r13
  412034:	mov    r13d,r9d
  412037:	push   r12
  412039:	push   rbp
  41203a:	and    r13d,0x1
  41203e:	push   rbx
  41203f:	mov    r14,rsi
  412042:	mov    r12d,ecx
  412045:	movzx  edx,dx
  412048:	mov    ecx,r13d
  41204b:	mov    rbp,rdi
  41204e:	sub    rsp,0xc0
  412055:	mov    ebx,r9d
  412058:	lea    rsi,[rsp+0xc]
  41205d:	mov    WORD PTR [rsp+0xc],r8w
  412063:	mov    DWORD PTR [rsp+0x1c],0x0
  41206b:	mov    rax,QWORD PTR fs:0x28
  412074:	mov    QWORD PTR [rsp+0xb8],rax
  41207c:	xor    eax,eax
  41207e:	call   4114a0 <flatcc_builder_default_alloc@@Base+0x120>
  412083:	test   eax,eax
  412085:	jne    412240 <flatcc_builder_create_buffer@@Base+0x210>
  41208b:	movzx  ecx,WORD PTR [rsp+0xc]
  412090:	cmp    cx,WORD PTR [rbp+0xe8]
  412097:	ja     412230 <flatcc_builder_create_buffer@@Base+0x200>
  41209d:	test   r14,r14
  4120a0:	mov    eax,DWORD PTR [rsp+0x1c]
  4120a4:	je     4120ad <flatcc_builder_create_buffer@@Base+0x7d>
  4120a6:	mov    eax,DWORD PTR [r14]
  4120a9:	mov    DWORD PTR [rsp+0x1c],eax
  4120ad:	xor    r10d,r10d
  4120b0:	test   eax,eax
  4120b2:	mov    edi,ebx
  4120b4:	setne  r10b
  4120b8:	and    edi,0x1
  4120bb:	mov    edx,DWORD PTR [rbp+0xf0]
  4120c1:	shl    r10d,0x2
  4120c5:	and    ebx,0x2
  4120c8:	jne    4121f8 <flatcc_builder_create_buffer@@Base+0x1c8>
  4120ce:	lea    eax,[rdx-0x4]
  4120d1:	sub    ecx,0x1
  4120d4:	sub    eax,r10d
  4120d7:	and    eax,ecx
  4120d9:	test   dil,dil
  4120dc:	jne    412203 <flatcc_builder_create_buffer@@Base+0x1d3>
  4120e2:	mov    ecx,0x1
  4120e7:	mov    r8d,0x4
  4120ed:	movsxd rsi,ebx
  4120f0:	lea    r9,[rsp+0x14]
  4120f5:	mov    QWORD PTR [rsp+0x20],r8
  4120fa:	shl    rsi,0x4
  4120fe:	test   r10d,r10d
  412101:	mov    DWORD PTR [rsp+0x28],ecx
  412105:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  41210a:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  412113:	je     412137 <flatcc_builder_create_buffer@@Base+0x107>
  412115:	lea    rsi,[rsp+0x1c]
  41211a:	shl    rcx,0x4
  41211e:	add    r8,r10
  412121:	add    ebx,0x2
  412124:	mov    QWORD PTR [rsp+0x20],r8
  412129:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  41212e:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  412133:	mov    DWORD PTR [rsp+0x28],ebx
  412137:	test   eax,eax
  412139:	je     412167 <flatcc_builder_create_buffer@@Base+0x137>
  41213b:	movsxd rsi,DWORD PTR [rsp+0x28]
  412140:	mov    r9,0x41b060
  412147:	add    r8,rax
  41214a:	mov    QWORD PTR [rsp+0x20],r8
  41214f:	mov    rcx,rsi
  412152:	shl    rsi,0x4
  412156:	add    ecx,0x1
  412159:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  41215e:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  412163:	mov    DWORD PTR [rsp+0x28],ecx
  412167:	mov    eax,edx
  412169:	sub    eax,r8d
  41216c:	test   dil,dil
  41216f:	je     412248 <flatcc_builder_create_buffer@@Base+0x218>
  412175:	add    eax,0x4
  412178:	test   r13d,r13d
  41217b:	je     412248 <flatcc_builder_create_buffer@@Base+0x218>
  412181:	mov    ecx,DWORD PTR [rbp+0xf8]
  412187:	sub    ecx,eax
  412189:	mov    DWORD PTR [rsp+0x18],ecx
  41218d:	mov    ebx,edx
  41218f:	sub    r12d,eax
  412192:	sub    ebx,r8d
  412195:	mov    DWORD PTR [rsp+0x14],r12d
  41219a:	cmp    ebx,edx
  41219c:	jge    412259 <flatcc_builder_create_buffer@@Base+0x229>
  4121a2:	lea    rsi,[rsp+0x30]
  4121a7:	mov    rdi,QWORD PTR [rbp+0x38]
  4121ab:	mov    ecx,ebx
  4121ad:	mov    edx,DWORD PTR [rsp+0x28]
  4121b1:	call   QWORD PTR [rbp+0x48]
  4121b4:	test   eax,eax
  4121b6:	jne    41227d <flatcc_builder_create_buffer@@Base+0x24d>
  4121bc:	test   ebx,ebx
  4121be:	mov    DWORD PTR [rbp+0xf0],ebx
  4121c4:	je     412282 <flatcc_builder_create_buffer@@Base+0x252>
  4121ca:	mov    rdi,QWORD PTR [rsp+0xb8]
  4121d2:	xor    rdi,QWORD PTR fs:0x28
  4121db:	mov    eax,ebx
  4121dd:	jne    412278 <flatcc_builder_create_buffer@@Base+0x248>
  4121e3:	add    rsp,0xc0
  4121ea:	pop    rbx
  4121eb:	pop    rbp
  4121ec:	pop    r12
  4121ee:	pop    r13
  4121f0:	pop    r14
  4121f2:	ret    
  4121f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4121f8:	lea    eax,[rdx-0x8]
  4121fb:	sub    ecx,0x1
  4121fe:	sub    eax,r10d
  412201:	and    eax,ecx
  412203:	lea    rcx,[rsp+0x18]
  412208:	mov    QWORD PTR [rsp+0x38],0x4
  412211:	mov    ebx,0x1
  412216:	mov    r8d,0x8
  41221c:	mov    edi,0x1
  412221:	mov    QWORD PTR [rsp+0x30],rcx
  412226:	mov    ecx,0x2
  41222b:	jmp    4120ed <flatcc_builder_create_buffer@@Base+0xbd>
  412230:	mov    WORD PTR [rbp+0xe8],cx
  412237:	jmp    41209d <flatcc_builder_create_buffer@@Base+0x6d>
  41223c:	nop    DWORD PTR [rax+0x0]
  412240:	xor    ebx,ebx
  412242:	jmp    4121ca <flatcc_builder_create_buffer@@Base+0x19a>
  412244:	nop    DWORD PTR [rax+0x0]
  412248:	mov    ecx,DWORD PTR [rbp+0xf4]
  41224e:	sub    ecx,eax
  412250:	mov    DWORD PTR [rsp+0x18],ecx
  412254:	jmp    41218d <flatcc_builder_create_buffer@@Base+0x15d>
  412259:	lea    rcx,[rip+0x8d50]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  412260:	lea    rsi,[rip+0x8301]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412267:	lea    rdi,[rip+0x8691]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  41226e:	mov    edx,0x287
  412273:	call   4030a0 <__assert_fail@plt>
  412278:	call   403080 <__stack_chk_fail@plt>
  41227d:	call   403364 <posix_memalign@plt+0x204>
  412282:	lea    rcx,[rip+0x8d07]        # 41af90 <_IO_stdin_used@@Base+0xf90>
  412289:	lea    rsi,[rip+0x82d8]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412290:	lea    rdi,[rip+0x8668]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  412297:	mov    edx,0x304
  41229c:	call   4030a0 <__assert_fail@plt>
  4122a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4122ac:	nop    DWORD PTR [rax+0x0]

00000000004122b0 <flatcc_builder_create_struct@@Base>:
  4122b0:	push   rbp
  4122b1:	push   rbx
  4122b2:	sub    rsp,0xa8
  4122b9:	mov    rax,QWORD PTR fs:0x28
  4122c2:	mov    QWORD PTR [rsp+0x98],rax
  4122ca:	xor    eax,eax
  4122cc:	test   cx,cx
  4122cf:	je     4123df <flatcc_builder_create_struct@@Base+0x12f>
  4122d5:	mov    rbx,rdi
  4122d8:	mov    r8,rdx
  4122db:	movzx  edi,cx
  4122de:	cmp    cx,WORD PTR [rbx+0xe8]
  4122e5:	jbe    4122ee <flatcc_builder_create_struct@@Base+0x3e>
  4122e7:	mov    WORD PTR [rbx+0xe8],cx
  4122ee:	mov    edx,DWORD PTR [rbx+0xf0]
  4122f4:	lea    ecx,[rdi-0x1]
  4122f7:	mov    QWORD PTR [rsp],0x0
  4122ff:	mov    DWORD PTR [rsp+0x8],0x0
  412307:	mov    eax,edx
  412309:	sub    eax,r8d
  41230c:	and    eax,ecx
  41230e:	test   r8,r8
  412311:	jne    4123a0 <flatcc_builder_create_struct@@Base+0xf0>
  412317:	test   eax,eax
  412319:	je     412346 <flatcc_builder_create_struct@@Base+0x96>
  41231b:	movsxd rsi,DWORD PTR [rsp+0x8]
  412320:	mov    rdi,0x41b060
  412327:	add    r8,rax
  41232a:	mov    QWORD PTR [rsp],r8
  41232e:	mov    rcx,rsi
  412331:	shl    rsi,0x4
  412335:	add    ecx,0x1
  412338:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  41233d:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  412342:	mov    DWORD PTR [rsp+0x8],ecx
  412346:	mov    ebp,edx
  412348:	movabs rax,0x10000000f
  412352:	sub    ebp,r8d
  412355:	cmp    r8,rax
  412358:	ja     4123bb <flatcc_builder_create_struct@@Base+0x10b>
  41235a:	cmp    edx,ebp
  41235c:	jle    4123bb <flatcc_builder_create_struct@@Base+0x10b>
  41235e:	lea    rsi,[rsp+0x10]
  412363:	mov    rdi,QWORD PTR [rbx+0x38]
  412367:	mov    ecx,ebp
  412369:	mov    edx,DWORD PTR [rsp+0x8]
  41236d:	call   QWORD PTR [rbx+0x48]
  412370:	test   eax,eax
  412372:	jne    4123da <flatcc_builder_create_struct@@Base+0x12a>
  412374:	mov    rdx,QWORD PTR [rsp+0x98]
  41237c:	xor    rdx,QWORD PTR fs:0x28
  412385:	mov    DWORD PTR [rbx+0xf0],ebp
  41238b:	mov    eax,ebp
  41238d:	jne    4123fe <flatcc_builder_create_struct@@Base+0x14e>
  41238f:	add    rsp,0xa8
  412396:	pop    rbx
  412397:	pop    rbp
  412398:	ret    
  412399:	nop    DWORD PTR [rax+0x0]
  4123a0:	mov    QWORD PTR [rsp],r8
  4123a4:	mov    QWORD PTR [rsp+0x10],rsi
  4123a9:	mov    QWORD PTR [rsp+0x18],r8
  4123ae:	mov    DWORD PTR [rsp+0x8],0x1
  4123b6:	jmp    412317 <flatcc_builder_create_struct@@Base+0x67>
  4123bb:	lea    rcx,[rip+0x8bee]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  4123c2:	lea    rsi,[rip+0x819f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4123c9:	lea    rdi,[rip+0x852f]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4123d0:	mov    edx,0x287
  4123d5:	call   4030a0 <__assert_fail@plt>
  4123da:	call   403364 <posix_memalign@plt+0x204>
  4123df:	lea    rcx,[rip+0x8b8a]        # 41af70 <_IO_stdin_used@@Base+0xf70>
  4123e6:	lea    rsi,[rip+0x817b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4123ed:	lea    rdi,[rip+0x8546]        # 41a93a <_IO_stdin_used@@Base+0x93a>
  4123f4:	mov    edx,0x30f
  4123f9:	call   4030a0 <__assert_fail@plt>
  4123fe:	call   403080 <__stack_chk_fail@plt>
  412403:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41240e:	xchg   ax,ax

0000000000412410 <flatcc_builder_start_buffer@@Base>:
  412410:	push   r13
  412412:	push   r12
  412414:	mov    r13d,edx
  412417:	push   rbp
  412418:	push   rbx
  412419:	mov    rbp,rsi
  41241c:	mov    rbx,rdi
  41241f:	mov    r12d,ecx
  412422:	sub    rsp,0x8
  412426:	movzx  esi,WORD PTR [rdi+0xe8]
  41242d:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  412432:	test   eax,eax
  412434:	jne    4124e0 <flatcc_builder_start_buffer@@Base+0xd0>
  41243a:	movzx  edx,WORD PTR [rbx+0xec]
  412441:	mov    rdi,QWORD PTR [rbx+0x30]
  412445:	mov    ecx,0x1
  41244a:	mov    WORD PTR [rbx+0xe8],cx
  412451:	test   rbp,rbp
  412454:	mov    rsi,rbp
  412457:	mov    WORD PTR [rdi+0x22],dx
  41245b:	movzx  edx,WORD PTR [rbx+0x10c]
  412462:	mov    WORD PTR [rbx+0xec],r13w
  41246a:	mov    WORD PTR [rdi+0x20],dx
  41246e:	mov    edx,DWORD PTR [rbx+0xf8]
  412474:	mov    WORD PTR [rbx+0x10c],r12w
  41247c:	mov    DWORD PTR [rdi+0x14],edx
  41247f:	mov    edx,DWORD PTR [rbx+0x100]
  412485:	mov    DWORD PTR [rdi+0x1c],edx
  412488:	mov    edx,DWORD PTR [rbx+0xf0]
  41248e:	mov    DWORD PTR [rbx+0xf8],edx
  412494:	mov    edx,DWORD PTR [rbx+0xfc]
  41249a:	lea    ecx,[rdx+0x1]
  41249d:	mov    DWORD PTR [rbx+0x100],edx
  4124a3:	mov    edx,DWORD PTR [rbx+0x110]
  4124a9:	mov    DWORD PTR [rbx+0xfc],ecx
  4124af:	mov    DWORD PTR [rdi+0x10],edx
  4124b2:	je     4124d0 <flatcc_builder_start_buffer@@Base+0xc0>
  4124b4:	mov    edx,DWORD PTR [rsi]
  4124b6:	mov    DWORD PTR [rbx+0x110],edx
  4124bc:	mov    edx,0x1
  4124c1:	mov    WORD PTR [rdi+0xe],dx
  4124c5:	add    rsp,0x8
  4124c9:	pop    rbx
  4124ca:	pop    rbp
  4124cb:	pop    r12
  4124cd:	pop    r13
  4124cf:	ret    
  4124d0:	mov    rsi,0x41b060
  4124d7:	jmp    4124b4 <flatcc_builder_start_buffer@@Base+0xa4>
  4124d9:	nop    DWORD PTR [rax+0x0]
  4124e0:	mov    eax,0xffffffff
  4124e5:	jmp    4124c5 <flatcc_builder_start_buffer@@Base+0xb5>
  4124e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004124f0 <flatcc_builder_end_buffer@@Base>:
  4124f0:	push   rbp
  4124f1:	push   rbx
  4124f2:	xor    eax,eax
  4124f4:	sub    rsp,0x8
  4124f8:	movzx  r9d,WORD PTR [rdi+0x10c]
  412500:	mov    edx,DWORD PTR [rdi+0x100]
  412506:	and    r9d,0x2
  41250a:	test   edx,edx
  41250c:	setne  al
  41250f:	or     r9d,eax
  412512:	mov    rax,QWORD PTR [rdi+0x30]
  412516:	cmp    WORD PTR [rax+0xe],0x1
  41251b:	jne    412611 <flatcc_builder_end_buffer@@Base+0x121>
  412521:	movzx  edx,WORD PTR [rdi+0xec]
  412528:	movzx  r8d,WORD PTR [rdi+0xe8]
  412530:	mov    rbx,rdi
  412533:	mov    ecx,esi
  412535:	cmp    dx,r8w
  412539:	ja     412560 <flatcc_builder_end_buffer@@Base+0x70>
  41253b:	lea    rsi,[rbx+0x110]
  412542:	mov    rdi,rbx
  412545:	call   412030 <flatcc_builder_create_buffer@@Base>
  41254a:	test   eax,eax
  41254c:	mov    ebp,eax
  41254e:	jne    412570 <flatcc_builder_end_buffer@@Base+0x80>
  412550:	add    rsp,0x8
  412554:	mov    eax,ebp
  412556:	pop    rbx
  412557:	pop    rbp
  412558:	ret    
  412559:	nop    DWORD PTR [rax+0x0]
  412560:	mov    WORD PTR [rbx+0xe8],dx
  412567:	mov    r8d,edx
  41256a:	jmp    41253b <flatcc_builder_end_buffer@@Base+0x4b>
  41256c:	nop    DWORD PTR [rax+0x0]
  412570:	mov    rax,QWORD PTR [rbx+0x30]
  412574:	mov    rdi,QWORD PTR [rbx+0x18]
  412578:	xor    esi,esi
  41257a:	mov    edx,DWORD PTR [rax+0x14]
  41257d:	mov    DWORD PTR [rbx+0xf8],edx
  412583:	mov    edx,DWORD PTR [rax+0x1c]
  412586:	mov    DWORD PTR [rbx+0x100],edx
  41258c:	mov    edx,DWORD PTR [rax+0x10]
  41258f:	mov    DWORD PTR [rbx+0x110],edx
  412595:	movzx  eax,WORD PTR [rax+0x20]
  412599:	mov    edx,DWORD PTR [rbx+0x20]
  41259c:	mov    WORD PTR [rbx+0x10c],ax
  4125a3:	call   4030b0 <memset@plt>
  4125a8:	mov    rax,QWORD PTR [rbx+0x30]
  4125ac:	mov    edi,DWORD PTR [rbx+0x70]
  4125af:	mov    esi,DWORD PTR [rax]
  4125b1:	mov    edx,DWORD PTR [rax+0x8]
  4125b4:	mov    ecx,DWORD PTR [rax+0x4]
  4125b7:	mov    DWORD PTR [rbx+0x20],edx
  4125ba:	mov    rdx,rsi
  4125bd:	mov    DWORD PTR [rbx+0x28],esi
  4125c0:	add    rsi,QWORD PTR [rbx+0x68]
  4125c4:	sub    edi,edx
  4125c6:	cmp    ecx,edi
  4125c8:	mov    edx,edi
  4125ca:	cmovb  edx,ecx
  4125cd:	mov    DWORD PTR [rbx+0x24],edx
  4125d0:	movzx  edx,WORD PTR [rbx+0xea]
  4125d7:	cmp    dx,WORD PTR [rbx+0xe8]
  4125de:	mov    QWORD PTR [rbx+0x18],rsi
  4125e2:	mov    DWORD PTR [rax+0x4],ecx
  4125e5:	jbe    4125ee <flatcc_builder_end_buffer@@Base+0xfe>
  4125e7:	mov    WORD PTR [rbx+0xe8],dx
  4125ee:	movzx  edx,WORD PTR [rax+0xc]
  4125f2:	sub    rax,0x24
  4125f6:	sub    DWORD PTR [rbx+0x104],0x1
  4125fd:	mov    QWORD PTR [rbx+0x30],rax
  412601:	mov    eax,ebp
  412603:	mov    WORD PTR [rbx+0xea],dx
  41260a:	add    rsp,0x8
  41260e:	pop    rbx
  41260f:	pop    rbp
  412610:	ret    
  412611:	lea    rcx,[rip+0x8938]        # 41af50 <_IO_stdin_used@@Base+0xf50>
  412618:	lea    rsi,[rip+0x7f49]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41261f:	lea    rdi,[rip+0x7fc2]        # 41a5e8 <_IO_stdin_used@@Base+0x5e8>
  412626:	mov    edx,0x346
  41262b:	call   4030a0 <__assert_fail@plt>

0000000000412630 <flatcc_builder_start_struct@@Base>:
  412630:	push   r12
  412632:	push   rbp
  412633:	mov    rbp,rsi
  412636:	push   rbx
  412637:	movzx  esi,dx
  41263a:	mov    rbx,rdi
  41263d:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  412642:	test   eax,eax
  412644:	jne    4126c0 <flatcc_builder_start_struct@@Base+0x90>
  412646:	mov    rcx,QWORD PTR [rbx+0x30]
  41264a:	mov    eax,0x2
  41264f:	mov    edi,DWORD PTR [rbx+0x70]
  412652:	mov    WORD PTR [rcx+0xe],ax
  412656:	mov    eax,DWORD PTR [rbx+0x28]
  412659:	mov    rdx,rax
  41265c:	add    rax,QWORD PTR [rbx+0x68]
  412660:	sub    edi,edx
  412662:	cmp    edi,0xfffffffc
  412665:	mov    edx,edi
  412667:	mov    QWORD PTR [rbx+0x18],rax
  41266b:	ja     412690 <flatcc_builder_start_struct@@Base+0x60>
  41266d:	mov    DWORD PTR [rbx+0x24],edi
  412670:	mov    r12d,DWORD PTR [rbx+0x20]
  412674:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  41267b:	mov    rsi,r12
  41267e:	add    esi,ebp
  412680:	cmp    esi,edx
  412682:	mov    DWORD PTR [rbx+0x20],esi
  412685:	jae    4126a0 <flatcc_builder_start_struct@@Base+0x70>
  412687:	add    rax,r12
  41268a:	pop    rbx
  41268b:	pop    rbp
  41268c:	pop    r12
  41268e:	ret    
  41268f:	nop
  412690:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  412697:	mov    edx,0xfffffffc
  41269c:	jmp    412670 <flatcc_builder_start_struct@@Base+0x40>
  41269e:	xchg   ax,ax
  4126a0:	add    esi,0x1
  4126a3:	mov    edx,0xfffffffc
  4126a8:	mov    rdi,rbx
  4126ab:	call   411320 <test_parse@@Base+0x570>
  4126b0:	test   eax,eax
  4126b2:	jne    4126c0 <flatcc_builder_start_struct@@Base+0x90>
  4126b4:	mov    rax,QWORD PTR [rbx+0x18]
  4126b8:	jmp    412687 <flatcc_builder_start_struct@@Base+0x57>
  4126ba:	nop    WORD PTR [rax+rax*1+0x0]
  4126c0:	pop    rbx
  4126c1:	xor    eax,eax
  4126c3:	pop    rbp
  4126c4:	pop    r12
  4126c6:	ret    
  4126c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004126d0 <flatcc_builder_struct_edit@@Base>:
  4126d0:	mov    rax,QWORD PTR [rdi+0x18]
  4126d4:	ret    
  4126d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004126e0 <flatcc_builder_end_struct@@Base>:
  4126e0:	push   rbp
  4126e1:	push   rbx
  4126e2:	sub    rsp,0x8
  4126e6:	mov    rax,QWORD PTR [rdi+0x30]
  4126ea:	cmp    WORD PTR [rax+0xe],0x2
  4126ef:	jne    412797 <flatcc_builder_end_struct@@Base+0xb7>
  4126f5:	movzx  ecx,WORD PTR [rdi+0xea]
  4126fc:	mov    edx,DWORD PTR [rdi+0x20]
  4126ff:	mov    rbx,rdi
  412702:	mov    rsi,QWORD PTR [rdi+0x18]
  412706:	call   4122b0 <flatcc_builder_create_struct@@Base>
  41270b:	test   eax,eax
  41270d:	mov    ebp,eax
  41270f:	jne    412720 <flatcc_builder_end_struct@@Base+0x40>
  412711:	add    rsp,0x8
  412715:	mov    eax,ebp
  412717:	pop    rbx
  412718:	pop    rbp
  412719:	ret    
  41271a:	nop    WORD PTR [rax+rax*1+0x0]
  412720:	mov    edx,DWORD PTR [rbx+0x20]
  412723:	mov    rdi,QWORD PTR [rbx+0x18]
  412727:	xor    esi,esi
  412729:	call   4030b0 <memset@plt>
  41272e:	mov    rax,QWORD PTR [rbx+0x30]
  412732:	mov    edi,DWORD PTR [rbx+0x70]
  412735:	mov    esi,DWORD PTR [rax]
  412737:	mov    edx,DWORD PTR [rax+0x8]
  41273a:	mov    ecx,DWORD PTR [rax+0x4]
  41273d:	mov    DWORD PTR [rbx+0x20],edx
  412740:	mov    rdx,rsi
  412743:	mov    DWORD PTR [rbx+0x28],esi
  412746:	add    rsi,QWORD PTR [rbx+0x68]
  41274a:	sub    edi,edx
  41274c:	cmp    ecx,edi
  41274e:	mov    edx,edi
  412750:	cmovb  edx,ecx
  412753:	mov    DWORD PTR [rbx+0x24],edx
  412756:	movzx  edx,WORD PTR [rbx+0xea]
  41275d:	cmp    dx,WORD PTR [rbx+0xe8]
  412764:	mov    QWORD PTR [rbx+0x18],rsi
  412768:	mov    DWORD PTR [rax+0x4],ecx
  41276b:	jbe    412774 <flatcc_builder_end_struct@@Base+0x94>
  41276d:	mov    WORD PTR [rbx+0xe8],dx
  412774:	movzx  edx,WORD PTR [rax+0xc]
  412778:	sub    rax,0x24
  41277c:	sub    DWORD PTR [rbx+0x104],0x1
  412783:	mov    QWORD PTR [rbx+0x30],rax
  412787:	mov    eax,ebp
  412789:	mov    WORD PTR [rbx+0xea],dx
  412790:	add    rsp,0x8
  412794:	pop    rbx
  412795:	pop    rbp
  412796:	ret    
  412797:	lea    rcx,[rip+0x8792]        # 41af30 <_IO_stdin_used@@Base+0xf30>
  41279e:	lea    rsi,[rip+0x7dc3]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4127a5:	lea    rdi,[rip+0x7e6c]        # 41a618 <_IO_stdin_used@@Base+0x618>
  4127ac:	mov    edx,0x368
  4127b1:	call   4030a0 <__assert_fail@plt>
  4127b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004127c0 <flatcc_builder_extend_vector@@Base>:
  4127c0:	push   rbp
  4127c1:	push   rbx
  4127c2:	mov    eax,esi
  4127c4:	sub    rsp,0x8
  4127c8:	mov    rdx,QWORD PTR [rdi+0x30]
  4127cc:	add    eax,DWORD PTR [rdx+0x14]
  4127cf:	setb   cl
  4127d2:	cmp    DWORD PTR [rdx+0x18],eax
  4127d5:	jb     41281d <flatcc_builder_extend_vector@@Base+0x5d>
  4127d7:	movzx  ecx,cl
  4127da:	test   ecx,ecx
  4127dc:	jne    41281d <flatcc_builder_extend_vector@@Base+0x5d>
  4127de:	imul   esi,DWORD PTR [rdx+0x10]
  4127e2:	mov    DWORD PTR [rdx+0x14],eax
  4127e5:	mov    ebp,DWORD PTR [rdi+0x20]
  4127e8:	mov    rbx,rdi
  4127eb:	add    esi,ebp
  4127ed:	cmp    esi,DWORD PTR [rdi+0x24]
  4127f0:	mov    DWORD PTR [rdi+0x20],esi
  4127f3:	jae    412808 <flatcc_builder_extend_vector@@Base+0x48>
  4127f5:	mov    rax,rbp
  4127f8:	add    rax,QWORD PTR [rbx+0x18]
  4127fc:	add    rsp,0x8
  412800:	pop    rbx
  412801:	pop    rbp
  412802:	ret    
  412803:	nop    DWORD PTR [rax+rax*1+0x0]
  412808:	add    esi,0x1
  41280b:	mov    edx,0xfffffffc
  412810:	call   411320 <test_parse@@Base+0x570>
  412815:	test   eax,eax
  412817:	je     4127f5 <flatcc_builder_extend_vector@@Base+0x35>
  412819:	xor    eax,eax
  41281b:	jmp    4127fc <flatcc_builder_extend_vector@@Base+0x3c>
  41281d:	call   403387 <posix_memalign@plt+0x227>
  412822:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41282d:	nop    DWORD PTR [rax]

0000000000412830 <flatcc_builder_vector_push@@Base>:
  412830:	push   r13
  412832:	push   r12
  412834:	push   rbp
  412835:	push   rbx
  412836:	sub    rsp,0x8
  41283a:	mov    rax,QWORD PTR [rdi+0x30]
  41283e:	cmp    WORD PTR [rax+0xe],0x4
  412843:	jne    4128c4 <flatcc_builder_vector_push@@Base+0x94>
  412845:	mov    edx,DWORD PTR [rax+0x14]
  412848:	cmp    edx,DWORD PTR [rax+0x18]
  41284b:	ja     4128a5 <flatcc_builder_vector_push@@Base+0x75>
  41284d:	add    edx,0x1
  412850:	mov    r12d,DWORD PTR [rax+0x10]
  412854:	mov    rbx,rdi
  412857:	mov    DWORD PTR [rax+0x14],edx
  41285a:	mov    ebp,DWORD PTR [rdi+0x20]
  41285d:	mov    r13,rsi
  412860:	mov    rcx,rbp
  412863:	add    ecx,r12d
  412866:	cmp    ecx,DWORD PTR [rdi+0x24]
  412869:	mov    DWORD PTR [rdi+0x20],ecx
  41286c:	jae    412890 <flatcc_builder_vector_push@@Base+0x60>
  41286e:	add    rbp,QWORD PTR [rbx+0x18]
  412872:	je     412882 <flatcc_builder_vector_push@@Base+0x52>
  412874:	mov    edx,r12d
  412877:	mov    rsi,r13
  41287a:	mov    rdi,rbp
  41287d:	call   4030f0 <memcpy@plt>
  412882:	add    rsp,0x8
  412886:	mov    rax,rbp
  412889:	pop    rbx
  41288a:	pop    rbp
  41288b:	pop    r12
  41288d:	pop    r13
  41288f:	ret    
  412890:	lea    esi,[rcx+0x1]
  412893:	mov    edx,0xfffffffc
  412898:	call   411320 <test_parse@@Base+0x570>
  41289d:	test   eax,eax
  41289f:	je     41286e <flatcc_builder_vector_push@@Base+0x3e>
  4128a1:	xor    ebp,ebp
  4128a3:	jmp    412882 <flatcc_builder_vector_push@@Base+0x52>
  4128a5:	lea    rcx,[rip+0x8644]        # 41aef0 <_IO_stdin_used@@Base+0xef0>
  4128ac:	lea    rsi,[rip+0x7cb5]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4128b3:	lea    rdi,[rip+0x7dbe]        # 41a678 <_IO_stdin_used@@Base+0x678>
  4128ba:	mov    edx,0x38c
  4128bf:	call   4030a0 <__assert_fail@plt>
  4128c4:	lea    rcx,[rip+0x8625]        # 41aef0 <_IO_stdin_used@@Base+0xef0>
  4128cb:	lea    rsi,[rip+0x7c96]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4128d2:	lea    rdi,[rip+0x7d6f]        # 41a648 <_IO_stdin_used@@Base+0x648>
  4128d9:	mov    edx,0x38b
  4128de:	call   4030a0 <__assert_fail@plt>
  4128e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4128ee:	xchg   ax,ax

00000000004128f0 <flatcc_builder_append_vector@@Base>:
  4128f0:	push   r13
  4128f2:	push   r12
  4128f4:	push   rbp
  4128f5:	push   rbx
  4128f6:	sub    rsp,0x8
  4128fa:	mov    rax,QWORD PTR [rdi+0x30]
  4128fe:	cmp    WORD PTR [rax+0xe],0x4
  412903:	jne    41297b <flatcc_builder_append_vector@@Base+0x8b>
  412905:	mov    r13,rsi
  412908:	mov    ecx,edx
  41290a:	xor    esi,esi
  41290c:	add    ecx,DWORD PTR [rax+0x14]
  41290f:	setb   sil
  412913:	cmp    DWORD PTR [rax+0x18],ecx
  412916:	jb     412976 <flatcc_builder_append_vector@@Base+0x86>
  412918:	test   esi,esi
  41291a:	jne    412976 <flatcc_builder_append_vector@@Base+0x86>
  41291c:	mov    ebx,DWORD PTR [rax+0x10]
  41291f:	mov    DWORD PTR [rax+0x14],ecx
  412922:	mov    rbp,rdi
  412925:	mov    r12d,DWORD PTR [rdi+0x20]
  412929:	imul   ebx,edx
  41292c:	mov    rdx,r12
  41292f:	add    edx,ebx
  412931:	cmp    edx,DWORD PTR [rdi+0x24]
  412934:	mov    DWORD PTR [rdi+0x20],edx
  412937:	jae    412960 <flatcc_builder_append_vector@@Base+0x70>
  412939:	add    r12,QWORD PTR [rbp+0x18]
  41293d:	je     41294c <flatcc_builder_append_vector@@Base+0x5c>
  41293f:	mov    edx,ebx
  412941:	mov    rsi,r13
  412944:	mov    rdi,r12
  412947:	call   4030f0 <memcpy@plt>
  41294c:	add    rsp,0x8
  412950:	mov    rax,r12
  412953:	pop    rbx
  412954:	pop    rbp
  412955:	pop    r12
  412957:	pop    r13
  412959:	ret    
  41295a:	nop    WORD PTR [rax+rax*1+0x0]
  412960:	lea    esi,[rdx+0x1]
  412963:	mov    edx,0xfffffffc
  412968:	call   411320 <test_parse@@Base+0x570>
  41296d:	test   eax,eax
  41296f:	je     412939 <flatcc_builder_append_vector@@Base+0x49>
  412971:	xor    r12d,r12d
  412974:	jmp    41294c <flatcc_builder_append_vector@@Base+0x5c>
  412976:	call   403387 <posix_memalign@plt+0x227>
  41297b:	lea    rcx,[rip+0x854e]        # 41aed0 <_IO_stdin_used@@Base+0xed0>
  412982:	lea    rsi,[rip+0x7bdf]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412989:	lea    rdi,[rip+0x7cb8]        # 41a648 <_IO_stdin_used@@Base+0x648>
  412990:	mov    edx,0x393
  412995:	call   4030a0 <__assert_fail@plt>
  41299a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004129a0 <flatcc_builder_extend_offset_vector@@Base>:
  4129a0:	push   rbp
  4129a1:	push   rbx
  4129a2:	xor    edx,edx
  4129a4:	mov    ecx,esi
  4129a6:	sub    rsp,0x8
  4129aa:	mov    rax,QWORD PTR [rdi+0x30]
  4129ae:	add    ecx,DWORD PTR [rax+0x14]
  4129b1:	setb   dl
  4129b4:	test   edx,edx
  4129b6:	jne    4129fd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4129b8:	cmp    ecx,0x3fffffff
  4129be:	ja     4129fd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4129c0:	mov    DWORD PTR [rax+0x14],ecx
  4129c3:	mov    ebp,DWORD PTR [rdi+0x20]
  4129c6:	mov    rbx,rdi
  4129c9:	lea    eax,[rbp+rsi*4+0x0]
  4129cd:	cmp    eax,DWORD PTR [rdi+0x24]
  4129d0:	mov    DWORD PTR [rdi+0x20],eax
  4129d3:	jae    4129e8 <flatcc_builder_extend_offset_vector@@Base+0x48>
  4129d5:	mov    rax,rbp
  4129d8:	add    rax,QWORD PTR [rbx+0x18]
  4129dc:	add    rsp,0x8
  4129e0:	pop    rbx
  4129e1:	pop    rbp
  4129e2:	ret    
  4129e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4129e8:	lea    esi,[rax+0x1]
  4129eb:	mov    edx,0xfffffffc
  4129f0:	call   411320 <test_parse@@Base+0x570>
  4129f5:	test   eax,eax
  4129f7:	je     4129d5 <flatcc_builder_extend_offset_vector@@Base+0x35>
  4129f9:	xor    eax,eax
  4129fb:	jmp    4129dc <flatcc_builder_extend_offset_vector@@Base+0x3c>
  4129fd:	call   403387 <posix_memalign@plt+0x227>
  412a02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  412a0d:	nop    DWORD PTR [rax]

0000000000412a10 <flatcc_builder_offset_vector_push@@Base>:
  412a10:	push   r12
  412a12:	push   rbp
  412a13:	push   rbx
  412a14:	mov    rdx,QWORD PTR [rdi+0x30]
  412a18:	cmp    WORD PTR [rdx+0xe],0x5
  412a1d:	jne    412a70 <flatcc_builder_offset_vector_push@@Base+0x60>
  412a1f:	mov    eax,DWORD PTR [rdx+0x14]
  412a22:	cmp    eax,0x3fffffff
  412a27:	je     412a69 <flatcc_builder_offset_vector_push@@Base+0x59>
  412a29:	add    eax,0x1
  412a2c:	mov    rbp,rdi
  412a2f:	mov    r12d,esi
  412a32:	mov    DWORD PTR [rdx+0x14],eax
  412a35:	mov    ebx,DWORD PTR [rdi+0x20]
  412a38:	lea    edx,[rbx+0x4]
  412a3b:	cmp    edx,DWORD PTR [rdi+0x24]
  412a3e:	mov    DWORD PTR [rdi+0x20],edx
  412a41:	jae    412a58 <flatcc_builder_offset_vector_push@@Base+0x48>
  412a43:	mov    rax,rbx
  412a46:	add    rax,QWORD PTR [rbp+0x18]
  412a4a:	je     412a69 <flatcc_builder_offset_vector_push@@Base+0x59>
  412a4c:	mov    DWORD PTR [rax],r12d
  412a4f:	pop    rbx
  412a50:	pop    rbp
  412a51:	pop    r12
  412a53:	ret    
  412a54:	nop    DWORD PTR [rax+0x0]
  412a58:	lea    esi,[rbx+0x5]
  412a5b:	mov    edx,0xfffffffc
  412a60:	call   411320 <test_parse@@Base+0x570>
  412a65:	test   eax,eax
  412a67:	je     412a43 <flatcc_builder_offset_vector_push@@Base+0x33>
  412a69:	pop    rbx
  412a6a:	xor    eax,eax
  412a6c:	pop    rbp
  412a6d:	pop    r12
  412a6f:	ret    
  412a70:	lea    rcx,[rip+0x8429]        # 41aea0 <_IO_stdin_used@@Base+0xea0>
  412a77:	lea    rsi,[rip+0x7aea]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412a7e:	lea    rdi,[rip+0x7c33]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  412a85:	mov    edx,0x3a6
  412a8a:	call   4030a0 <__assert_fail@plt>
  412a8f:	nop

0000000000412a90 <flatcc_builder_append_offset_vector@@Base>:
  412a90:	push   r13
  412a92:	push   r12
  412a94:	push   rbp
  412a95:	push   rbx
  412a96:	sub    rsp,0x8
  412a9a:	mov    rax,QWORD PTR [rdi+0x30]
  412a9e:	cmp    WORD PTR [rax+0xe],0x5
  412aa3:	jne    412b1b <flatcc_builder_append_offset_vector@@Base+0x8b>
  412aa5:	mov    r13,rsi
  412aa8:	mov    ecx,edx
  412aaa:	xor    esi,esi
  412aac:	add    ecx,DWORD PTR [rax+0x14]
  412aaf:	setb   sil
  412ab3:	test   esi,esi
  412ab5:	jne    412b16 <flatcc_builder_append_offset_vector@@Base+0x86>
  412ab7:	cmp    ecx,0x3fffffff
  412abd:	ja     412b16 <flatcc_builder_append_offset_vector@@Base+0x86>
  412abf:	mov    DWORD PTR [rax+0x14],ecx
  412ac2:	mov    r12d,DWORD PTR [rdi+0x20]
  412ac6:	lea    ebx,[rdx*4+0x0]
  412acd:	mov    rbp,rdi
  412ad0:	mov    rdx,r12
  412ad3:	add    edx,ebx
  412ad5:	cmp    edx,DWORD PTR [rdi+0x24]
  412ad8:	mov    DWORD PTR [rdi+0x20],edx
  412adb:	jae    412b00 <flatcc_builder_append_offset_vector@@Base+0x70>
  412add:	add    r12,QWORD PTR [rbp+0x18]
  412ae1:	je     412af0 <flatcc_builder_append_offset_vector@@Base+0x60>
  412ae3:	mov    edx,ebx
  412ae5:	mov    rsi,r13
  412ae8:	mov    rdi,r12
  412aeb:	call   4030f0 <memcpy@plt>
  412af0:	add    rsp,0x8
  412af4:	mov    rax,r12
  412af7:	pop    rbx
  412af8:	pop    rbp
  412af9:	pop    r12
  412afb:	pop    r13
  412afd:	ret    
  412afe:	xchg   ax,ax
  412b00:	lea    esi,[rdx+0x1]
  412b03:	mov    edx,0xfffffffc
  412b08:	call   411320 <test_parse@@Base+0x570>
  412b0d:	test   eax,eax
  412b0f:	je     412add <flatcc_builder_append_offset_vector@@Base+0x4d>
  412b11:	xor    r12d,r12d
  412b14:	jmp    412af0 <flatcc_builder_append_offset_vector@@Base+0x60>
  412b16:	call   403387 <posix_memalign@plt+0x227>
  412b1b:	lea    rcx,[rip+0x833e]        # 41ae60 <_IO_stdin_used@@Base+0xe60>
  412b22:	lea    rsi,[rip+0x7a3f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412b29:	lea    rdi,[rip+0x7b88]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  412b30:	mov    edx,0x3b4
  412b35:	call   4030a0 <__assert_fail@plt>
  412b3a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412b40 <flatcc_builder_extend_string@@Base>:
  412b40:	push   rbp
  412b41:	push   rbx
  412b42:	sub    rsp,0x8
  412b46:	mov    rax,QWORD PTR [rdi+0x30]
  412b4a:	cmp    WORD PTR [rax+0xe],0x6
  412b4f:	jne    412b9a <flatcc_builder_extend_string@@Base+0x5a>
  412b51:	mov    edx,esi
  412b53:	add    edx,DWORD PTR [rax+0x14]
  412b56:	jb     412b95 <flatcc_builder_extend_string@@Base+0x55>
  412b58:	mov    DWORD PTR [rax+0x14],edx
  412b5b:	mov    ebp,DWORD PTR [rdi+0x20]
  412b5e:	mov    rbx,rdi
  412b61:	add    esi,ebp
  412b63:	cmp    esi,DWORD PTR [rdi+0x24]
  412b66:	mov    DWORD PTR [rdi+0x20],esi
  412b69:	jae    412b80 <flatcc_builder_extend_string@@Base+0x40>
  412b6b:	mov    rax,rbp
  412b6e:	add    rax,QWORD PTR [rbx+0x18]
  412b72:	add    rsp,0x8
  412b76:	pop    rbx
  412b77:	pop    rbp
  412b78:	ret    
  412b79:	nop    DWORD PTR [rax+0x0]
  412b80:	add    esi,0x1
  412b83:	mov    edx,0xfffffffc
  412b88:	call   411320 <test_parse@@Base+0x570>
  412b8d:	test   eax,eax
  412b8f:	je     412b6b <flatcc_builder_extend_string@@Base+0x2b>
  412b91:	xor    eax,eax
  412b93:	jmp    412b72 <flatcc_builder_extend_string@@Base+0x32>
  412b95:	call   403387 <posix_memalign@plt+0x227>
  412b9a:	lea    rcx,[rip+0x828f]        # 41ae30 <_IO_stdin_used@@Base+0xe30>
  412ba1:	lea    rsi,[rip+0x79c0]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412ba8:	lea    rdi,[rip+0x7b41]        # 41a6f0 <_IO_stdin_used@@Base+0x6f0>
  412baf:	mov    edx,0x3bd
  412bb4:	call   4030a0 <__assert_fail@plt>
  412bb9:	nop    DWORD PTR [rax+0x0]

0000000000412bc0 <flatcc_builder_append_string@@Base>:
  412bc0:	push   r13
  412bc2:	push   r12
  412bc4:	push   rbp
  412bc5:	push   rbx
  412bc6:	sub    rsp,0x8
  412bca:	mov    rax,QWORD PTR [rdi+0x30]
  412bce:	cmp    WORD PTR [rax+0xe],0x6
  412bd3:	jne    412c3b <flatcc_builder_append_string@@Base+0x7b>
  412bd5:	mov    rbp,rdx
  412bd8:	add    edx,DWORD PTR [rax+0x14]
  412bdb:	jb     412c36 <flatcc_builder_append_string@@Base+0x76>
  412bdd:	mov    DWORD PTR [rax+0x14],edx
  412be0:	mov    r12d,DWORD PTR [rdi+0x20]
  412be4:	mov    rbx,rdi
  412be7:	mov    r13,rsi
  412bea:	mov    rdx,r12
  412bed:	add    edx,ebp
  412bef:	cmp    edx,DWORD PTR [rdi+0x24]
  412bf2:	mov    DWORD PTR [rdi+0x20],edx
  412bf5:	jae    412c20 <flatcc_builder_append_string@@Base+0x60>
  412bf7:	add    r12,QWORD PTR [rbx+0x18]
  412bfb:	je     412c0a <flatcc_builder_append_string@@Base+0x4a>
  412bfd:	mov    edx,ebp
  412bff:	mov    rsi,r13
  412c02:	mov    rdi,r12
  412c05:	call   4030f0 <memcpy@plt>
  412c0a:	add    rsp,0x8
  412c0e:	mov    rax,r12
  412c11:	pop    rbx
  412c12:	pop    rbp
  412c13:	pop    r12
  412c15:	pop    r13
  412c17:	ret    
  412c18:	nop    DWORD PTR [rax+rax*1+0x0]
  412c20:	lea    esi,[rdx+0x1]
  412c23:	mov    edx,0xfffffffc
  412c28:	call   411320 <test_parse@@Base+0x570>
  412c2d:	test   eax,eax
  412c2f:	je     412bf7 <flatcc_builder_append_string@@Base+0x37>
  412c31:	xor    r12d,r12d
  412c34:	jmp    412c0a <flatcc_builder_append_string@@Base+0x4a>
  412c36:	call   403387 <posix_memalign@plt+0x227>
  412c3b:	lea    rcx,[rip+0x81ce]        # 41ae10 <_IO_stdin_used@@Base+0xe10>
  412c42:	lea    rsi,[rip+0x791f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412c49:	lea    rdi,[rip+0x7aa0]        # 41a6f0 <_IO_stdin_used@@Base+0x6f0>
  412c50:	mov    edx,0x3c6
  412c55:	call   4030a0 <__assert_fail@plt>
  412c5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412c60 <flatcc_builder_append_string_str@@Base>:
  412c60:	push   rbp
  412c61:	push   rbx
  412c62:	mov    rbp,rdi
  412c65:	mov    rdi,rsi
  412c68:	mov    rbx,rsi
  412c6b:	sub    rsp,0x8
  412c6f:	call   403070 <strlen@plt>
  412c74:	add    rsp,0x8
  412c78:	mov    rsi,rbx
  412c7b:	mov    rdi,rbp
  412c7e:	pop    rbx
  412c7f:	pop    rbp
  412c80:	mov    rdx,rax
  412c83:	jmp    412bc0 <flatcc_builder_append_string@@Base>
  412c88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000412c90 <flatcc_builder_append_string_strn@@Base>:
  412c90:	push   r12
  412c92:	push   rbp
  412c93:	mov    rbp,rsi
  412c96:	push   rbx
  412c97:	mov    r12,rdi
  412c9a:	xor    esi,esi
  412c9c:	mov    rdi,rbp
  412c9f:	mov    rbx,rdx
  412ca2:	call   4030c0 <memchr@plt>
  412ca7:	mov    rdx,rax
  412caa:	mov    rsi,rbp
  412cad:	mov    rdi,r12
  412cb0:	sub    rdx,rbp
  412cb3:	test   rax,rax
  412cb6:	cmovne rbx,rdx
  412cba:	mov    rdx,rbx
  412cbd:	pop    rbx
  412cbe:	pop    rbp
  412cbf:	pop    r12
  412cc1:	jmp    412bc0 <flatcc_builder_append_string@@Base>
  412cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000412cd0 <flatcc_builder_truncate_vector@@Base>:
  412cd0:	sub    rsp,0x8
  412cd4:	mov    rax,QWORD PTR [rdi+0x30]
  412cd8:	cmp    WORD PTR [rax+0xe],0x4
  412cdd:	jne    412d13 <flatcc_builder_truncate_vector@@Base+0x43>
  412cdf:	mov    ecx,DWORD PTR [rax+0x14]
  412ce2:	cmp    rcx,rsi
  412ce5:	mov    rdx,rcx
  412ce8:	jb     412d32 <flatcc_builder_truncate_vector@@Base+0x62>
  412cea:	sub    edx,esi
  412cec:	imul   esi,DWORD PTR [rax+0x10]
  412cf0:	mov    DWORD PTR [rax+0x14],edx
  412cf3:	mov    eax,DWORD PTR [rdi+0x20]
  412cf6:	mov    rcx,QWORD PTR [rdi+0x18]
  412cfa:	sub    eax,esi
  412cfc:	mov    edx,esi
  412cfe:	xor    esi,esi
  412d00:	mov    DWORD PTR [rdi+0x20],eax
  412d03:	lea    rdi,[rcx+rax*1]
  412d07:	call   4030b0 <memset@plt>
  412d0c:	xor    eax,eax
  412d0e:	add    rsp,0x8
  412d12:	ret    
  412d13:	lea    rcx,[rip+0x80d6]        # 41adf0 <_IO_stdin_used@@Base+0xdf0>
  412d1a:	lea    rsi,[rip+0x7847]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412d21:	lea    rdi,[rip+0x7920]        # 41a648 <_IO_stdin_used@@Base+0x648>
  412d28:	mov    edx,0x3d9
  412d2d:	call   4030a0 <__assert_fail@plt>
  412d32:	lea    rcx,[rip+0x80b7]        # 41adf0 <_IO_stdin_used@@Base+0xdf0>
  412d39:	lea    rsi,[rip+0x7828]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412d40:	lea    rdi,[rip+0x79d9]        # 41a720 <_IO_stdin_used@@Base+0x720>
  412d47:	mov    edx,0x3da
  412d4c:	call   4030a0 <__assert_fail@plt>
  412d51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  412d5c:	nop    DWORD PTR [rax+0x0]

0000000000412d60 <flatcc_builder_truncate_offset_vector@@Base>:
  412d60:	sub    rsp,0x8
  412d64:	mov    rax,QWORD PTR [rdi+0x30]
  412d68:	cmp    WORD PTR [rax+0xe],0x5
  412d6d:	jne    412d9f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  412d6f:	mov    edx,DWORD PTR [rax+0x14]
  412d72:	cmp    edx,esi
  412d74:	jb     412dbe <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  412d76:	sub    edx,esi
  412d78:	imul   esi,DWORD PTR [rax+0x10]
  412d7c:	mov    DWORD PTR [rax+0x14],edx
  412d7f:	mov    eax,DWORD PTR [rdi+0x20]
  412d82:	mov    rcx,QWORD PTR [rdi+0x18]
  412d86:	sub    eax,esi
  412d88:	mov    edx,esi
  412d8a:	xor    esi,esi
  412d8c:	mov    DWORD PTR [rdi+0x20],eax
  412d8f:	lea    rdi,[rcx+rax*1]
  412d93:	call   4030b0 <memset@plt>
  412d98:	xor    eax,eax
  412d9a:	add    rsp,0x8
  412d9e:	ret    
  412d9f:	lea    rcx,[rip+0x801a]        # 41adc0 <_IO_stdin_used@@Base+0xdc0>
  412da6:	lea    rsi,[rip+0x77bb]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412dad:	lea    rdi,[rip+0x7904]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  412db4:	mov    edx,0x3e2
  412db9:	call   4030a0 <__assert_fail@plt>
  412dbe:	lea    rcx,[rip+0x7ffb]        # 41adc0 <_IO_stdin_used@@Base+0xdc0>
  412dc5:	lea    rsi,[rip+0x779c]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412dcc:	lea    rdi,[rip+0x7975]        # 41a748 <_IO_stdin_used@@Base+0x748>
  412dd3:	mov    edx,0x3e3
  412dd8:	call   4030a0 <__assert_fail@plt>
  412ddd:	nop    DWORD PTR [rax]

0000000000412de0 <flatcc_builder_truncate_string@@Base>:
  412de0:	sub    rsp,0x8
  412de4:	mov    rdx,QWORD PTR [rdi+0x30]
  412de8:	cmp    WORD PTR [rdx+0xe],0x6
  412ded:	jne    412e20 <flatcc_builder_truncate_string@@Base+0x40>
  412def:	mov    ecx,DWORD PTR [rdx+0x14]
  412df2:	cmp    rcx,rsi
  412df5:	mov    rax,rcx
  412df8:	jb     412e3f <flatcc_builder_truncate_string@@Base+0x5f>
  412dfa:	sub    eax,esi
  412dfc:	mov    DWORD PTR [rdx+0x14],eax
  412dff:	mov    eax,DWORD PTR [rdi+0x20]
  412e02:	mov    rdx,QWORD PTR [rdi+0x18]
  412e06:	sub    eax,esi
  412e08:	mov    DWORD PTR [rdi+0x20],eax
  412e0b:	lea    rdi,[rdx+rax*1]
  412e0f:	mov    rdx,rsi
  412e12:	xor    esi,esi
  412e14:	call   4030b0 <memset@plt>
  412e19:	xor    eax,eax
  412e1b:	add    rsp,0x8
  412e1f:	ret    
  412e20:	lea    rcx,[rip+0x7f79]        # 41ada0 <_IO_stdin_used@@Base+0xda0>
  412e27:	lea    rsi,[rip+0x773a]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412e2e:	lea    rdi,[rip+0x78bb]        # 41a6f0 <_IO_stdin_used@@Base+0x6f0>
  412e35:	mov    edx,0x3eb
  412e3a:	call   4030a0 <__assert_fail@plt>
  412e3f:	lea    rcx,[rip+0x7f5a]        # 41ada0 <_IO_stdin_used@@Base+0xda0>
  412e46:	lea    rsi,[rip+0x771b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  412e4d:	lea    rdi,[rip+0x7934]        # 41a788 <_IO_stdin_used@@Base+0x788>
  412e54:	mov    edx,0x3ec
  412e59:	call   4030a0 <__assert_fail@plt>
  412e5e:	xchg   ax,ax

0000000000412e60 <flatcc_builder_start_vector@@Base>:
  412e60:	push   r12
  412e62:	cmp    dx,0x4
  412e66:	push   rbp
  412e67:	mov    rbp,rsi
  412e6a:	mov    esi,0x4
  412e6f:	push   rbx
  412e70:	cmovb  edx,esi
  412e73:	mov    rbx,rdi
  412e76:	mov    r12,rcx
  412e79:	movzx  esi,dx
  412e7c:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  412e81:	test   eax,eax
  412e83:	jne    412ed0 <flatcc_builder_start_vector@@Base+0x70>
  412e85:	mov    rsi,QWORD PTR [rbx+0x30]
  412e89:	mov    edx,0x4
  412e8e:	mov    DWORD PTR [rsi+0x10],ebp
  412e91:	mov    DWORD PTR [rsi+0x14],0x0
  412e98:	mov    DWORD PTR [rsi+0x18],r12d
  412e9c:	mov    WORD PTR [rsi+0xe],dx
  412ea0:	mov    edx,DWORD PTR [rbx+0x28]
  412ea3:	mov    rcx,rdx
  412ea6:	add    rdx,QWORD PTR [rbx+0x68]
  412eaa:	mov    QWORD PTR [rbx+0x18],rdx
  412eae:	mov    edx,DWORD PTR [rbx+0x70]
  412eb1:	sub    edx,ecx
  412eb3:	mov    ecx,0xfffffffc
  412eb8:	cmp    edx,ecx
  412eba:	cmova  edx,ecx
  412ebd:	mov    DWORD PTR [rbx+0x24],edx
  412ec0:	mov    DWORD PTR [rsi+0x4],ecx
  412ec3:	pop    rbx
  412ec4:	pop    rbp
  412ec5:	pop    r12
  412ec7:	ret    
  412ec8:	nop    DWORD PTR [rax+rax*1+0x0]
  412ed0:	mov    eax,0xffffffff
  412ed5:	jmp    412ec3 <flatcc_builder_start_vector@@Base+0x63>
  412ed7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412ee0 <flatcc_builder_start_offset_vector@@Base>:
  412ee0:	push   rbx
  412ee1:	mov    esi,0x4
  412ee6:	mov    rbx,rdi
  412ee9:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  412eee:	test   eax,eax
  412ef0:	jne    412f38 <flatcc_builder_start_offset_vector@@Base+0x58>
  412ef2:	mov    rcx,QWORD PTR [rbx+0x30]
  412ef6:	mov    edx,0x5
  412efb:	mov    DWORD PTR [rcx+0x10],0x4
  412f02:	mov    DWORD PTR [rcx+0x14],0x0
  412f09:	mov    WORD PTR [rcx+0xe],dx
  412f0d:	mov    edx,DWORD PTR [rbx+0x28]
  412f10:	mov    rsi,rdx
  412f13:	add    rdx,QWORD PTR [rbx+0x68]
  412f17:	mov    QWORD PTR [rbx+0x18],rdx
  412f1b:	mov    edx,DWORD PTR [rbx+0x70]
  412f1e:	sub    edx,esi
  412f20:	mov    esi,0xfffffffc
  412f25:	cmp    edx,esi
  412f27:	cmova  edx,esi
  412f2a:	mov    DWORD PTR [rbx+0x24],edx
  412f2d:	mov    DWORD PTR [rcx+0x4],esi
  412f30:	pop    rbx
  412f31:	ret    
  412f32:	nop    WORD PTR [rax+rax*1+0x0]
  412f38:	mov    eax,0xffffffff
  412f3d:	pop    rbx
  412f3e:	ret    
  412f3f:	nop

0000000000412f40 <flatcc_builder_start_string@@Base>:
  412f40:	push   rbx
  412f41:	mov    esi,0x1
  412f46:	mov    rbx,rdi
  412f49:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  412f4e:	test   eax,eax
  412f50:	jne    412f98 <flatcc_builder_start_string@@Base+0x58>
  412f52:	mov    rcx,QWORD PTR [rbx+0x30]
  412f56:	mov    edx,0x6
  412f5b:	mov    DWORD PTR [rcx+0x10],0x1
  412f62:	mov    DWORD PTR [rcx+0x14],0x0
  412f69:	mov    WORD PTR [rcx+0xe],dx
  412f6d:	mov    edx,DWORD PTR [rbx+0x28]
  412f70:	mov    rsi,rdx
  412f73:	add    rdx,QWORD PTR [rbx+0x68]
  412f77:	mov    QWORD PTR [rbx+0x18],rdx
  412f7b:	mov    edx,DWORD PTR [rbx+0x70]
  412f7e:	sub    edx,esi
  412f80:	mov    esi,0xfffffffc
  412f85:	cmp    edx,esi
  412f87:	cmova  edx,esi
  412f8a:	mov    DWORD PTR [rbx+0x24],edx
  412f8d:	mov    DWORD PTR [rcx+0x4],esi
  412f90:	pop    rbx
  412f91:	ret    
  412f92:	nop    WORD PTR [rax+rax*1+0x0]
  412f98:	mov    eax,0xffffffff
  412f9d:	pop    rbx
  412f9e:	ret    
  412f9f:	nop

0000000000412fa0 <flatcc_builder_reserve_table@@Base>:
  412fa0:	test   esi,esi
  412fa2:	push   r12
  412fa4:	push   rbp
  412fa5:	push   rbx
  412fa6:	js     41305f <flatcc_builder_reserve_table@@Base+0xbf>
  412fac:	mov    rax,QWORD PTR [rdi+0x30]
  412fb0:	lea    r12d,[rsi+rsi*1+0x4]
  412fb5:	mov    rbx,rdi
  412fb8:	movzx  edx,WORD PTR [rax+0x1c]
  412fbc:	mov    eax,DWORD PTR [rax+0x10]
  412fbf:	lea    ebp,[rax+rdx*2]
  412fc2:	mov    edx,r12d
  412fc5:	add    rdx,rbp
  412fc8:	cmp    rdx,QWORD PTR [rdi+0x60]
  412fcc:	ja     413010 <flatcc_builder_reserve_table@@Base+0x70>
  412fce:	add    rbp,QWORD PTR [rbx+0x58]
  412fd2:	je     413050 <flatcc_builder_reserve_table@@Base+0xb0>
  412fd4:	mov    rax,QWORD PTR [rbx+0x30]
  412fd8:	add    rbp,0x4
  412fdc:	lea    edx,[r12-0x3]
  412fe1:	mov    QWORD PTR [rbx+0x8],rbp
  412fe5:	mov    ebp,DWORD PTR [rax+0x14]
  412fe8:	add    rdx,rbp
  412feb:	cmp    rdx,QWORD PTR [rbx+0x90]
  412ff2:	ja     413030 <flatcc_builder_reserve_table@@Base+0x90>
  412ff4:	add    rbp,QWORD PTR [rbx+0x88]
  412ffb:	xor    eax,eax
  412ffd:	test   rbp,rbp
  413000:	mov    QWORD PTR [rbx],rbp
  413003:	sete   al
  413006:	neg    eax
  413008:	pop    rbx
  413009:	pop    rbp
  41300a:	pop    r12
  41300c:	ret    
  41300d:	nop    DWORD PTR [rax]
  413010:	lea    rsi,[rdi+0x58]
  413014:	xor    r8d,r8d
  413017:	mov    rdi,QWORD PTR [rdi+0x40]
  41301b:	mov    ecx,0x1
  413020:	call   QWORD PTR [rbx+0x50]
  413023:	test   eax,eax
  413025:	je     412fce <flatcc_builder_reserve_table@@Base+0x2e>
  413027:	call   40331e <posix_memalign@plt+0x1be>
  41302c:	nop    DWORD PTR [rax+0x0]
  413030:	xor    ecx,ecx
  413032:	lea    rsi,[rbx+0x88]
  413039:	mov    rdi,QWORD PTR [rbx+0x40]
  41303d:	mov    r8d,0x3
  413043:	call   QWORD PTR [rbx+0x50]
  413046:	test   eax,eax
  413048:	je     412ff4 <flatcc_builder_reserve_table@@Base+0x54>
  41304a:	jmp    413027 <flatcc_builder_reserve_table@@Base+0x87>
  41304c:	nop    DWORD PTR [rax+0x0]
  413050:	mov    QWORD PTR [rbx+0x8],0x0
  413058:	mov    eax,0xffffffff
  41305d:	jmp    413008 <flatcc_builder_reserve_table@@Base+0x68>
  41305f:	lea    rcx,[rip+0x7d1a]        # 41ad80 <_IO_stdin_used@@Base+0xd80>
  413066:	lea    rsi,[rip+0x74fb]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41306d:	lea    rdi,[rip+0x78e7]        # 41a95b <_IO_stdin_used@@Base+0x95b>
  413074:	mov    edx,0x429
  413079:	call   4030a0 <__assert_fail@plt>
  41307e:	xchg   ax,ax

0000000000413080 <flatcc_builder_start_table@@Base>:
  413080:	push   r13
  413082:	push   r12
  413084:	mov    r12d,esi
  413087:	push   rbp
  413088:	push   rbx
  413089:	mov    esi,0x4
  41308e:	mov    rbx,rdi
  413091:	sub    rsp,0x8
  413095:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  41309a:	test   eax,eax
  41309c:	jne    4131d0 <flatcc_builder_start_table@@Base+0x150>
  4130a2:	mov    rcx,QWORD PTR [rbx+0x8]
  4130a6:	mov    ebp,eax
  4130a8:	mov    rax,QWORD PTR [rbx+0x58]
  4130ac:	mov    rdx,QWORD PTR [rbx+0x30]
  4130b0:	xor    edi,edi
  4130b2:	mov    r8d,0x3
  4130b8:	sub    rcx,rax
  4130bb:	mov    DWORD PTR [rdx+0x10],ecx
  4130be:	mov    rsi,QWORD PTR [rbx]
  4130c1:	sub    rsi,QWORD PTR [rbx+0x88]
  4130c8:	mov    DWORD PTR [rdx+0x14],esi
  4130cb:	mov    esi,DWORD PTR [rbx+0x14]
  4130ce:	mov    DWORD PTR [rdx+0x18],esi
  4130d1:	movzx  esi,WORD PTR [rbx+0x10]
  4130d5:	mov    WORD PTR [rdx+0x1c],si
  4130d9:	lea    r13d,[rcx+rsi*2]
  4130dd:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4130e4:	mov    WORD PTR [rbx+0x10],di
  4130e8:	mov    WORD PTR [rdx+0xe],r8w
  4130ed:	lea    edx,[r12+r12*1+0x4]
  4130f2:	add    rdx,r13
  4130f5:	cmp    rdx,QWORD PTR [rbx+0x60]
  4130f9:	ja     413178 <flatcc_builder_start_table@@Base+0xf8>
  4130fb:	add    rax,r13
  4130fe:	je     4131c8 <flatcc_builder_start_table@@Base+0x148>
  413104:	add    rax,0x4
  413108:	lea    edx,[r12+r12*1+0x1]
  41310d:	mov    QWORD PTR [rbx+0x8],rax
  413111:	mov    rax,QWORD PTR [rbx+0x30]
  413115:	mov    r13d,DWORD PTR [rax+0x14]
  413119:	add    rdx,r13
  41311c:	cmp    rdx,QWORD PTR [rbx+0x90]
  413123:	ja     4131a0 <flatcc_builder_start_table@@Base+0x120>
  413125:	add    r13,QWORD PTR [rbx+0x88]
  41312c:	test   r13,r13
  41312f:	mov    QWORD PTR [rbx],r13
  413132:	je     4131d0 <flatcc_builder_start_table@@Base+0x150>
  413138:	mov    eax,DWORD PTR [rbx+0x28]
  41313b:	mov    rdx,rax
  41313e:	add    rax,QWORD PTR [rbx+0x68]
  413142:	mov    QWORD PTR [rbx+0x18],rax
  413146:	mov    eax,DWORD PTR [rbx+0x70]
  413149:	sub    eax,edx
  41314b:	mov    edx,0xfffc
  413150:	cmp    eax,0xfffc
  413155:	cmova  eax,edx
  413158:	mov    DWORD PTR [rbx+0x24],eax
  41315b:	mov    rax,QWORD PTR [rbx+0x30]
  41315f:	mov    DWORD PTR [rax+0x4],0xfffc
  413166:	add    rsp,0x8
  41316a:	mov    eax,ebp
  41316c:	pop    rbx
  41316d:	pop    rbp
  41316e:	pop    r12
  413170:	pop    r13
  413172:	ret    
  413173:	nop    DWORD PTR [rax+rax*1+0x0]
  413178:	xor    r8d,r8d
  41317b:	lea    rsi,[rbx+0x58]
  41317f:	mov    rdi,QWORD PTR [rbx+0x40]
  413183:	mov    ecx,0x1
  413188:	call   QWORD PTR [rbx+0x50]
  41318b:	test   eax,eax
  41318d:	jne    4131be <flatcc_builder_start_table@@Base+0x13e>
  41318f:	mov    rax,QWORD PTR [rbx+0x58]
  413193:	jmp    4130fb <flatcc_builder_start_table@@Base+0x7b>
  413198:	nop    DWORD PTR [rax+rax*1+0x0]
  4131a0:	xor    ecx,ecx
  4131a2:	lea    rsi,[rbx+0x88]
  4131a9:	mov    rdi,QWORD PTR [rbx+0x40]
  4131ad:	mov    r8d,0x3
  4131b3:	call   QWORD PTR [rbx+0x50]
  4131b6:	test   eax,eax
  4131b8:	je     413125 <flatcc_builder_start_table@@Base+0xa5>
  4131be:	call   40331e <posix_memalign@plt+0x1be>
  4131c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4131c8:	mov    QWORD PTR [rbx+0x8],0x0
  4131d0:	add    rsp,0x8
  4131d4:	mov    ebp,0xffffffff
  4131d9:	pop    rbx
  4131da:	mov    eax,ebp
  4131dc:	pop    rbp
  4131dd:	pop    r12
  4131df:	pop    r13
  4131e1:	ret    
  4131e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4131ed:	nop    DWORD PTR [rax]

00000000004131f0 <flatcc_builder_create_vtable@@Base>:
  4131f0:	push   rbp
  4131f1:	push   rbx
  4131f2:	mov    rbp,rdi
  4131f5:	sub    rsp,0xa8
  4131fc:	mov    rax,QWORD PTR fs:0x28
  413205:	mov    QWORD PTR [rsp+0x98],rax
  41320d:	xor    eax,eax
  41320f:	test   dx,dx
  413212:	mov    QWORD PTR [rsp],0x0
  41321a:	mov    DWORD PTR [rsp+0x8],0x0
  413222:	je     4132b0 <flatcc_builder_create_vtable@@Base+0xc0>
  413228:	mov    QWORD PTR [rsp+0x10],rsi
  41322d:	mov    esi,DWORD PTR [rdi+0x100]
  413233:	movzx  r8d,dx
  413237:	mov    QWORD PTR [rsp],r8
  41323b:	mov    QWORD PTR [rsp+0x18],r8
  413240:	movzx  edx,dx
  413243:	mov    DWORD PTR [rsp+0x8],0x1
  41324b:	test   esi,esi
  41324d:	je     4132e8 <flatcc_builder_create_vtable@@Base+0xf8>
  413253:	mov    eax,DWORD PTR [rbp+0xf0]
  413259:	mov    ebx,eax
  41325b:	sub    ebx,edx
  41325d:	cmp    eax,ebx
  41325f:	jle    4132c4 <flatcc_builder_create_vtable@@Base+0xd4>
  413261:	lea    rsi,[rsp+0x10]
  413266:	mov    rdi,QWORD PTR [rbp+0x38]
  41326a:	mov    ecx,ebx
  41326c:	mov    edx,DWORD PTR [rsp+0x8]
  413270:	call   QWORD PTR [rbp+0x48]
  413273:	test   eax,eax
  413275:	jne    413340 <flatcc_builder_create_vtable@@Base+0x150>
  41327b:	cmp    ebx,0x1
  41327e:	mov    DWORD PTR [rbp+0xf0],ebx
  413284:	sbb    ebx,0xffffffff
  413287:	mov    rcx,QWORD PTR [rsp+0x98]
  41328f:	xor    rcx,QWORD PTR fs:0x28
  413298:	mov    eax,ebx
  41329a:	jne    41333b <flatcc_builder_create_vtable@@Base+0x14b>
  4132a0:	add    rsp,0xa8
  4132a7:	pop    rbx
  4132a8:	pop    rbp
  4132a9:	ret    
  4132aa:	nop    WORD PTR [rax+rax*1+0x0]
  4132b0:	mov    edx,DWORD PTR [rdi+0x100]
  4132b6:	test   edx,edx
  4132b8:	jne    4132c4 <flatcc_builder_create_vtable@@Base+0xd4>
  4132ba:	mov    eax,DWORD PTR [rdi+0x124]
  4132c0:	test   eax,eax
  4132c2:	je     413330 <flatcc_builder_create_vtable@@Base+0x140>
  4132c4:	lea    rcx,[rip+0x7ce5]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  4132cb:	lea    rsi,[rip+0x7296]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4132d2:	lea    rdi,[rip+0x7626]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4132d9:	mov    edx,0x287
  4132de:	call   4030a0 <__assert_fail@plt>
  4132e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4132e8:	mov    ecx,DWORD PTR [rdi+0x124]
  4132ee:	test   ecx,ecx
  4132f0:	jne    413253 <flatcc_builder_create_vtable@@Base+0x63>
  4132f6:	mov    ebx,DWORD PTR [rdi+0xf4]
  4132fc:	add    edx,ebx
  4132fe:	cmp    ebx,edx
  413300:	mov    DWORD PTR [rdi+0xf4],edx
  413306:	jg     413364 <flatcc_builder_create_vtable@@Base+0x174>
  413308:	lea    rsi,[rsp+0x10]
  41330d:	mov    rdi,QWORD PTR [rbp+0x38]
  413311:	mov    ecx,ebx
  413313:	mov    edx,DWORD PTR [rsp+0x8]
  413317:	call   QWORD PTR [rbp+0x48]
  41331a:	test   eax,eax
  41331c:	jne    413345 <flatcc_builder_create_vtable@@Base+0x155>
  41331e:	add    ebx,0x1
  413321:	jmp    413287 <flatcc_builder_create_vtable@@Base+0x97>
  413326:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413330:	mov    ebx,DWORD PTR [rbp+0xf4]
  413336:	xor    r8d,r8d
  413339:	jmp    413308 <flatcc_builder_create_vtable@@Base+0x118>
  41333b:	call   403080 <__stack_chk_fail@plt>
  413340:	call   403364 <posix_memalign@plt+0x204>
  413345:	lea    rcx,[rip+0x7c74]        # 41afc0 <_IO_stdin_used@@Base+0xfc0>
  41334c:	lea    rsi,[rip+0x7215]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413353:	lea    rdi,[rip+0x75a5]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  41335a:	mov    edx,0x2a5
  41335f:	call   4030a0 <__assert_fail@plt>
  413364:	call   403341 <posix_memalign@plt+0x1e1>
  413369:	nop    DWORD PTR [rax+0x0]

0000000000413370 <flatcc_builder_create_cached_vtable@@Base>:
  413370:	push   r15
  413372:	push   r14
  413374:	mov    r15,rdi
  413377:	push   r13
  413379:	push   r12
  41337b:	movzx  r14d,dx
  41337f:	push   rbp
  413380:	push   rbx
  413381:	mov    ebp,ecx
  413383:	sub    rsp,0x38
  413387:	mov    rbx,QWORD PTR [rdi+0xd8]
  41338e:	mov    QWORD PTR [rsp+0x10],rsi
  413393:	mov    DWORD PTR [rsp+0x2c],edx
  413397:	test   rbx,rbx
  41339a:	je     413528 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  4133a0:	mov    eax,0x20
  4133a5:	sub    eax,ebx
  4133a7:	shrx   ebp,ebp,eax
  4133ac:	mov    rax,QWORD PTR [r15+0xa8]
  4133b3:	lea    r12,[rax+rbp*4]
  4133b7:	test   r12,r12
  4133ba:	je     413510 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4133c0:	mov    ebp,DWORD PTR [r12]
  4133c4:	test   ebp,ebp
  4133c6:	je     413630 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  4133cc:	movzx  eax,r14w
  4133d0:	mov    r11,QWORD PTR [r15+0xb8]
  4133d7:	mov    r8,QWORD PTR [r15+0x78]
  4133db:	mov    r13,r12
  4133de:	mov    QWORD PTR [rsp+0x20],0x0
  4133e7:	mov    QWORD PTR [rsp+0x18],rax
  4133ec:	jmp    4133fb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  4133ee:	xchg   ax,ax
  4133f0:	mov    ebp,DWORD PTR [rbx+0xc]
  4133f3:	lea    r13,[rbx+0xc]
  4133f7:	test   ebp,ebp
  4133f9:	je     413458 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  4133fb:	mov    ebx,ebp
  4133fd:	add    rbx,r11
  413400:	mov    esi,DWORD PTR [rbx+0x8]
  413403:	add    rsi,r8
  413406:	cmp    WORD PTR [rsi],r14w
  41340a:	jne    4133f0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  41340c:	mov    rdx,QWORD PTR [rsp+0x18]
  413411:	mov    rdi,QWORD PTR [rsp+0x10]
  413416:	mov    QWORD PTR [rsp+0x8],r8
  41341b:	mov    QWORD PTR [rsp],r11
  41341f:	call   4030d0 <memcmp@plt>
  413424:	test   eax,eax
  413426:	mov    r11,QWORD PTR [rsp]
  41342a:	mov    r8,QWORD PTR [rsp+0x8]
  41342f:	jne    4133f0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  413431:	mov    eax,DWORD PTR [r15+0x100]
  413438:	cmp    DWORD PTR [rbx+0x4],eax
  41343b:	je     4134e0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  413441:	mov    ebp,DWORD PTR [rbx+0xc]
  413444:	lea    r13,[rbx+0xc]
  413448:	mov    QWORD PTR [rsp+0x20],rbx
  41344d:	test   ebp,ebp
  41344f:	jne    4133fb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  413451:	nop    DWORD PTR [rax+0x0]
  413458:	mov    ebx,DWORD PTR [r15+0xe4]
  41345f:	lea    rdx,[rbx+0x10]
  413463:	cmp    rdx,QWORD PTR [r15+0xc0]
  41346a:	ja     413608 <flatcc_builder_create_cached_vtable@@Base+0x298>
  413470:	add    rbx,QWORD PTR [r15+0xb8]
  413477:	je     413510 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  41347d:	mov    eax,DWORD PTR [r15+0xe4]
  413484:	movzx  ebp,WORD PTR [rsp+0x2c]
  413489:	mov    rdi,r15
  41348c:	mov    rsi,QWORD PTR [rsp+0x10]
  413491:	lea    edx,[rax+0x10]
  413494:	mov    DWORD PTR [r15+0xe4],edx
  41349b:	mov    edx,DWORD PTR [r15+0x100]
  4134a2:	mov    DWORD PTR [rbx+0x4],edx
  4134a5:	mov    edx,DWORD PTR [r12]
  4134a9:	mov    DWORD PTR [rbx+0xc],edx
  4134ac:	mov    DWORD PTR [r12],eax
  4134b0:	mov    edx,ebp
  4134b2:	call   4131f0 <flatcc_builder_create_vtable@@Base>
  4134b7:	test   eax,eax
  4134b9:	mov    DWORD PTR [rbx],eax
  4134bb:	je     413510 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4134bd:	mov    rdi,QWORD PTR [rsp+0x20]
  4134c2:	test   rdi,rdi
  4134c5:	je     41363e <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  4134cb:	mov    edx,DWORD PTR [rdi+0x8]
  4134ce:	mov    DWORD PTR [rbx+0x8],edx
  4134d1:	add    rsp,0x38
  4134d5:	pop    rbx
  4134d6:	pop    rbp
  4134d7:	pop    r12
  4134d9:	pop    r13
  4134db:	pop    r14
  4134dd:	pop    r15
  4134df:	ret    
  4134e0:	cmp    r12,r13
  4134e3:	je     4134f7 <flatcc_builder_create_cached_vtable@@Base+0x187>
  4134e5:	mov    eax,DWORD PTR [rbx+0xc]
  4134e8:	mov    DWORD PTR [r13+0x0],eax
  4134ec:	mov    eax,DWORD PTR [r12]
  4134f0:	mov    DWORD PTR [rbx+0xc],eax
  4134f3:	mov    DWORD PTR [r12],ebp
  4134f7:	mov    eax,DWORD PTR [rbx]
  4134f9:	add    rsp,0x38
  4134fd:	pop    rbx
  4134fe:	pop    rbp
  4134ff:	pop    r12
  413501:	pop    r13
  413503:	pop    r14
  413505:	pop    r15
  413507:	ret    
  413508:	nop    DWORD PTR [rax+rax*1+0x0]
  413510:	add    rsp,0x38
  413514:	xor    eax,eax
  413516:	pop    rbx
  413517:	pop    rbp
  413518:	pop    r12
  41351a:	pop    r13
  41351c:	pop    r14
  41351e:	pop    r15
  413520:	ret    
  413521:	nop    DWORD PTR [rax+0x0]
  413528:	mov    eax,DWORD PTR [rdi+0xe4]
  41352e:	lea    r12,[rdi+0xa8]
  413535:	test   eax,eax
  413537:	jne    4136cf <flatcc_builder_create_cached_vtable@@Base+0x35f>
  41353d:	cmp    QWORD PTR [rdi+0xc0],0xf
  413545:	jbe    4135d8 <flatcc_builder_create_cached_vtable@@Base+0x268>
  41354b:	cmp    QWORD PTR [r15+0xb8],0x0
  413553:	je     413510 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  413555:	mov    DWORD PTR [r15+0xe4],0x10
  413560:	mov    rdi,QWORD PTR [r15+0x40]
  413564:	mov    r8d,0x5
  41356a:	mov    ecx,0x1
  41356f:	mov    edx,0x100
  413574:	mov    rsi,r12
  413577:	call   QWORD PTR [r15+0x50]
  41357b:	test   eax,eax
  41357d:	jne    413510 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  41357f:	mov    rcx,QWORD PTR [r15+0xb0]
  413586:	mov    eax,0x100
  41358b:	jmp    413593 <flatcc_builder_create_cached_vtable@@Base+0x223>
  41358d:	nop    DWORD PTR [rax]
  413590:	mov    rax,rdx
  413593:	lea    rdx,[rax+rax*1]
  413597:	cmp    rdx,rcx
  41359a:	jbe    413590 <flatcc_builder_create_cached_vtable@@Base+0x220>
  41359c:	shr    rax,0x2
  4135a0:	cmp    rax,0x1
  4135a4:	jbe    413698 <flatcc_builder_create_cached_vtable@@Base+0x328>
  4135aa:	mov    esi,0x1
  4135af:	nop
  4135b0:	add    rbx,0x1
  4135b4:	shlx   rdx,rsi,rbx
  4135b9:	cmp    rax,rdx
  4135bc:	ja     4135b0 <flatcc_builder_create_cached_vtable@@Base+0x240>
  4135be:	mov    eax,0x20
  4135c3:	sub    eax,ebx
  4135c5:	mov    QWORD PTR [r15+0xd8],rbx
  4135cc:	jmp    4133a7 <flatcc_builder_create_cached_vtable@@Base+0x37>
  4135d1:	nop    DWORD PTR [rax+0x0]
  4135d8:	lea    rsi,[rdi+0xb8]
  4135df:	xor    ecx,ecx
  4135e1:	mov    rdi,QWORD PTR [rdi+0x40]
  4135e5:	mov    r8d,0x6
  4135eb:	mov    edx,0x10
  4135f0:	call   QWORD PTR [r15+0x50]
  4135f4:	test   eax,eax
  4135f6:	je     41354b <flatcc_builder_create_cached_vtable@@Base+0x1db>
  4135fc:	jmp    4136ba <flatcc_builder_create_cached_vtable@@Base+0x34a>
  413601:	nop    DWORD PTR [rax+0x0]
  413608:	xor    ecx,ecx
  41360a:	lea    rsi,[r15+0xb8]
  413611:	mov    rdi,QWORD PTR [r15+0x40]
  413615:	mov    r8d,0x6
  41361b:	call   QWORD PTR [r15+0x50]
  41361f:	test   eax,eax
  413621:	je     413470 <flatcc_builder_create_cached_vtable@@Base+0x100>
  413627:	jmp    4136ba <flatcc_builder_create_cached_vtable@@Base+0x34a>
  41362c:	nop    DWORD PTR [rax+0x0]
  413630:	mov    QWORD PTR [rsp+0x20],0x0
  413639:	jmp    413458 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  41363e:	mov    rax,QWORD PTR [r15+0x118]
  413645:	mov    r12d,DWORD PTR [r15+0xe0]
  41364c:	test   rax,rax
  41364f:	je     41365b <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  413651:	lea    edx,[rbp+r12*1+0x0]
  413656:	cmp    rax,rdx
  413659:	jb     4136c0 <flatcc_builder_create_cached_vtable@@Base+0x350>
  41365b:	lea    rdx,[r14+r12*1]
  41365f:	cmp    rdx,QWORD PTR [r15+0x80]
  413666:	ja     4136a2 <flatcc_builder_create_cached_vtable@@Base+0x332>
  413668:	mov    rdi,r12
  41366b:	add    rdi,QWORD PTR [r15+0x78]
  41366f:	je     4136ee <flatcc_builder_create_cached_vtable@@Base+0x37e>
  413671:	mov    eax,DWORD PTR [r15+0xe0]
  413678:	mov    rsi,QWORD PTR [rsp+0x10]
  41367d:	mov    rdx,r14
  413680:	add    ebp,eax
  413682:	mov    DWORD PTR [rbx+0x8],eax
  413685:	mov    DWORD PTR [r15+0xe0],ebp
  41368c:	call   4030f0 <memcpy@plt>
  413691:	mov    eax,DWORD PTR [rbx]
  413693:	jmp    4134d1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  413698:	mov    eax,0x20
  41369d:	jmp    4135c5 <flatcc_builder_create_cached_vtable@@Base+0x255>
  4136a2:	xor    ecx,ecx
  4136a4:	lea    rsi,[r15+0x78]
  4136a8:	mov    rdi,QWORD PTR [r15+0x40]
  4136ac:	mov    r8d,0x2
  4136b2:	call   QWORD PTR [r15+0x50]
  4136b6:	test   eax,eax
  4136b8:	je     413668 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  4136ba:	call   40331e <posix_memalign@plt+0x1be>
  4136bf:	nop
  4136c0:	mov    rdi,r15
  4136c3:	call   411940 <flatcc_builder_flush_vtable_cache@@Base>
  4136c8:	mov    eax,DWORD PTR [rbx]
  4136ca:	jmp    4134f9 <flatcc_builder_create_cached_vtable@@Base+0x189>
  4136cf:	lea    rcx,[rip+0x769a]        # 41ad70 <_IO_stdin_used@@Base+0xd70>
  4136d6:	lea    rsi,[rip+0x6e8b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4136dd:	lea    rdi,[rip+0x7261]        # 41a945 <_IO_stdin_used@@Base+0x945>
  4136e4:	mov    edx,0x156
  4136e9:	call   4030a0 <__assert_fail@plt>
  4136ee:	mov    eax,0xffffffff
  4136f3:	jmp    4134d1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  4136f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413700 <flatcc_builder_create_table@@Base>:
  413700:	push   rbp
  413701:	push   rbx
  413702:	sub    rsp,0xb8
  413709:	mov    rax,QWORD PTR fs:0x28
  413712:	mov    QWORD PTR [rsp+0xa8],rax
  41371a:	xor    eax,eax
  41371c:	test   r9d,r9d
  41371f:	mov    r11d,DWORD PTR [rsp+0xd0]
  413727:	js     4138cd <flatcc_builder_create_table@@Base+0x1cd>
  41372d:	test   r11b,0x1
  413731:	je     4138ae <flatcc_builder_create_table@@Base+0x1ae>
  413737:	cmp    cx,0x4
  41373b:	mov    eax,0x4
  413740:	mov    rbx,rdi
  413743:	cmovb  ecx,eax
  413746:	cmp    WORD PTR [rdi+0xe8],cx
  41374d:	movzx  eax,cx
  413750:	jae    413759 <flatcc_builder_create_table@@Base+0x59>
  413752:	mov    WORD PTR [rdi+0xe8],cx
  413759:	mov    ecx,DWORD PTR [rbx+0xf0]
  41375f:	sub    eax,0x1
  413762:	mov    edi,0xfffffffc
  413767:	sub    r11d,0x1
  41376b:	mov    r10d,ecx
  41376e:	sub    r10d,edx
  413771:	and    r10d,eax
  413774:	mov    eax,edi
  413776:	sub    eax,edx
  413778:	add    eax,ecx
  41377a:	sub    eax,r10d
  41377d:	mov    ebp,eax
  41377f:	sub    ebp,r11d
  413782:	test   r9d,r9d
  413785:	mov    DWORD PTR [rsp+0xc],ebp
  413789:	je     4137bd <flatcc_builder_create_table@@Base+0xbd>
  41378b:	lea    ecx,[r9-0x1]
  41378f:	sub    edi,eax
  413791:	lea    r9,[r8+rcx*2+0x2]
  413796:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4137a0:	movzx  ecx,WORD PTR [r8]
  4137a4:	mov    r11d,edi
  4137a7:	add    r8,0x2
  4137ab:	sub    r11d,ecx
  4137ae:	add    DWORD PTR [rsi+rcx*1],r11d
  4137b2:	cmp    r9,r8
  4137b5:	jne    4137a0 <flatcc_builder_create_table@@Base+0xa0>
  4137b7:	mov    ecx,DWORD PTR [rbx+0xf0]
  4137bd:	lea    rax,[rsp+0xc]
  4137c2:	test   rdx,rdx
  4137c5:	mov    QWORD PTR [rsp+0x10],0x4
  4137ce:	mov    QWORD PTR [rsp+0x28],0x4
  4137d7:	mov    DWORD PTR [rsp+0x18],0x1
  4137df:	mov    r8d,0x4
  4137e5:	mov    QWORD PTR [rsp+0x20],rax
  4137ea:	je     413807 <flatcc_builder_create_table@@Base+0x107>
  4137ec:	lea    r8,[rdx+0x4]
  4137f0:	mov    QWORD PTR [rsp+0x30],rsi
  4137f5:	mov    QWORD PTR [rsp+0x38],rdx
  4137fa:	mov    DWORD PTR [rsp+0x18],0x2
  413802:	mov    QWORD PTR [rsp+0x10],r8
  413807:	test   r10d,r10d
  41380a:	je     413838 <flatcc_builder_create_table@@Base+0x138>
  41380c:	movsxd rdx,DWORD PTR [rsp+0x18]
  413811:	mov    rsi,0x41b060
  413818:	add    r8,r10
  41381b:	mov    QWORD PTR [rsp+0x10],r8
  413820:	mov    rax,rdx
  413823:	shl    rdx,0x4
  413827:	add    eax,0x1
  41382a:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  41382f:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  413834:	mov    DWORD PTR [rsp+0x18],eax
  413838:	mov    ebp,ecx
  41383a:	movabs rax,0x10000000f
  413844:	sub    ebp,r8d
  413847:	cmp    r8,rax
  41384a:	ja     41388f <flatcc_builder_create_table@@Base+0x18f>
  41384c:	cmp    ebp,ecx
  41384e:	jge    41388f <flatcc_builder_create_table@@Base+0x18f>
  413850:	lea    rsi,[rsp+0x20]
  413855:	mov    rdi,QWORD PTR [rbx+0x38]
  413859:	mov    ecx,ebp
  41385b:	mov    edx,DWORD PTR [rsp+0x18]
  41385f:	call   QWORD PTR [rbx+0x48]
  413862:	test   eax,eax
  413864:	jne    4138f1 <flatcc_builder_create_table@@Base+0x1f1>
  41386a:	mov    DWORD PTR [rbx+0xf0],ebp
  413870:	mov    eax,ebp
  413872:	mov    rbx,QWORD PTR [rsp+0xa8]
  41387a:	xor    rbx,QWORD PTR fs:0x28
  413883:	jne    4138ec <flatcc_builder_create_table@@Base+0x1ec>
  413885:	add    rsp,0xb8
  41388c:	pop    rbx
  41388d:	pop    rbp
  41388e:	ret    
  41388f:	lea    rcx,[rip+0x771a]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  413896:	lea    rsi,[rip+0x6ccb]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41389d:	lea    rdi,[rip+0x705b]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4138a4:	mov    edx,0x287
  4138a9:	call   4030a0 <__assert_fail@plt>
  4138ae:	lea    rcx,[rip+0x749b]        # 41ad50 <_IO_stdin_used@@Base+0xd50>
  4138b5:	lea    rsi,[rip+0x6cac]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4138bc:	lea    rdi,[rip+0x70a3]        # 41a966 <_IO_stdin_used@@Base+0x966>
  4138c3:	mov    edx,0x4db
  4138c8:	call   4030a0 <__assert_fail@plt>
  4138cd:	lea    rcx,[rip+0x747c]        # 41ad50 <_IO_stdin_used@@Base+0xd50>
  4138d4:	lea    rsi,[rip+0x6c8d]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4138db:	lea    rdi,[rip+0x7072]        # 41a954 <_IO_stdin_used@@Base+0x954>
  4138e2:	mov    edx,0x4d5
  4138e7:	call   4030a0 <__assert_fail@plt>
  4138ec:	call   403080 <__stack_chk_fail@plt>
  4138f1:	call   403364 <posix_memalign@plt+0x204>
  4138f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000413900 <flatcc_builder_check_required_field@@Base>:
  413900:	mov    rax,QWORD PTR [rdi+0x30]
  413904:	cmp    WORD PTR [rax+0xe],0x3
  413909:	jne    413926 <flatcc_builder_check_required_field@@Base+0x26>
  41390b:	xor    eax,eax
  41390d:	cmp    WORD PTR [rdi+0x10],si
  413911:	jbe    413922 <flatcc_builder_check_required_field@@Base+0x22>
  413913:	mov    rax,QWORD PTR [rdi+0x8]
  413917:	movzx  edx,si
  41391a:	cmp    WORD PTR [rax+rdx*2],0x0
  41391f:	setne  al
  413922:	movzx  eax,al
  413925:	ret    
  413926:	lea    rcx,[rip+0x73f3]        # 41ad20 <_IO_stdin_used@@Base+0xd20>
  41392d:	lea    rsi,[rip+0x6c34]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413934:	lea    rdi,[rip+0x6e75]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  41393b:	sub    rsp,0x8
  41393f:	mov    edx,0x4f8
  413944:	call   4030a0 <__assert_fail@plt>
  413949:	nop    DWORD PTR [rax+0x0]

0000000000413950 <flatcc_builder_check_union_field@@Base>:
  413950:	mov    rax,QWORD PTR [rdi+0x30]
  413954:	cmp    WORD PTR [rax+0xe],0x3
  413959:	jne    41399b <flatcc_builder_check_union_field@@Base+0x4b>
  41395b:	xor    eax,eax
  41395d:	test   si,si
  413960:	je     41398d <flatcc_builder_check_union_field@@Base+0x3d>
  413962:	cmp    si,WORD PTR [rdi+0x10]
  413966:	jae    41398d <flatcc_builder_check_union_field@@Base+0x3d>
  413968:	mov    rcx,QWORD PTR [rdi+0x8]
  41396c:	movzx  edx,si
  41396f:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  413974:	test   ax,ax
  413977:	je     413983 <flatcc_builder_check_union_field@@Base+0x33>
  413979:	mov    rsi,QWORD PTR [rdi+0x18]
  41397d:	cmp    BYTE PTR [rsi+rax*1],0x0
  413981:	jne    413990 <flatcc_builder_check_union_field@@Base+0x40>
  413983:	xor    eax,eax
  413985:	cmp    WORD PTR [rcx+rdx*2],0x0
  41398a:	sete   al
  41398d:	repz ret 
  41398f:	nop
  413990:	xor    eax,eax
  413992:	cmp    WORD PTR [rcx+rdx*2],0x0
  413997:	setne  al
  41399a:	ret    
  41399b:	lea    rcx,[rip+0x733e]        # 41ace0 <_IO_stdin_used@@Base+0xce0>
  4139a2:	lea    rsi,[rip+0x6bbf]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4139a9:	lea    rdi,[rip+0x6e00]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  4139b0:	sub    rsp,0x8
  4139b4:	mov    edx,0x4ff
  4139b9:	call   4030a0 <__assert_fail@plt>
  4139be:	xchg   ax,ax

00000000004139c0 <flatcc_builder_check_required@@Base>:
  4139c0:	mov    rax,QWORD PTR [rdi+0x30]
  4139c4:	cmp    WORD PTR [rax+0xe],0x3
  4139c9:	jne    413a1b <flatcc_builder_check_required@@Base+0x5b>
  4139cb:	movzx  ecx,WORD PTR [rdi+0x10]
  4139cf:	xor    eax,eax
  4139d1:	cmp    ecx,edx
  4139d3:	jl     413a10 <flatcc_builder_check_required@@Base+0x50>
  4139d5:	test   edx,edx
  4139d7:	jle    413a0b <flatcc_builder_check_required@@Base+0x4b>
  4139d9:	mov    rcx,QWORD PTR [rdi+0x8]
  4139dd:	movzx  edi,WORD PTR [rsi]
  4139e0:	cmp    WORD PTR [rcx+rdi*2],0x0
  4139e5:	je     413a10 <flatcc_builder_check_required@@Base+0x50>
  4139e7:	sub    edx,0x1
  4139ea:	lea    rax,[rsi+0x2]
  4139ee:	lea    rsi,[rsi+rdx*2+0x2]
  4139f3:	jmp    413a06 <flatcc_builder_check_required@@Base+0x46>
  4139f5:	nop    DWORD PTR [rax]
  4139f8:	movzx  edx,WORD PTR [rax]
  4139fb:	add    rax,0x2
  4139ff:	cmp    WORD PTR [rcx+rdx*2],0x0
  413a04:	je     413a18 <flatcc_builder_check_required@@Base+0x58>
  413a06:	cmp    rax,rsi
  413a09:	jne    4139f8 <flatcc_builder_check_required@@Base+0x38>
  413a0b:	mov    eax,0x1
  413a10:	repz ret 
  413a12:	nop    WORD PTR [rax+rax*1+0x0]
  413a18:	xor    eax,eax
  413a1a:	ret    
  413a1b:	lea    rcx,[rip+0x728e]        # 41acb0 <_IO_stdin_used@@Base+0xcb0>
  413a22:	lea    rsi,[rip+0x6b3f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413a29:	lea    rdi,[rip+0x6d80]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  413a30:	sub    rsp,0x8
  413a34:	mov    edx,0x511
  413a39:	call   4030a0 <__assert_fail@plt>
  413a3e:	xchg   ax,ax

0000000000413a40 <flatcc_builder_end_table@@Base>:
  413a40:	push   r13
  413a42:	push   r12
  413a44:	push   rbp
  413a45:	push   rbx
  413a46:	sub    rsp,0x8
  413a4a:	mov    rax,QWORD PTR [rdi+0x30]
  413a4e:	cmp    WORD PTR [rax+0xe],0x3
  413a53:	jne    413bae <flatcc_builder_end_table@@Base+0x16e>
  413a59:	movzx  ebp,WORD PTR [rdi+0x10]
  413a5d:	movzx  eax,WORD PTR [rdi+0x20]
  413a61:	mov    rbx,rdi
  413a64:	mov    rcx,QWORD PTR [rdi+0x8]
  413a68:	add    ebp,0x2
  413a6b:	add    eax,0x4
  413a6e:	lea    r12,[rcx-0x4]
  413a72:	add    ebp,ebp
  413a74:	mov    WORD PTR [rcx-0x2],ax
  413a78:	movzx  eax,ax
  413a7b:	mov    WORD PTR [rcx-0x4],bp
  413a7f:	mov    ecx,DWORD PTR [rdi+0x14]
  413a82:	movzx  edx,bp
  413a85:	mov    rsi,r12
  413a88:	xor    ecx,edx
  413a8a:	imul   ecx,ecx,0x9e3779b1
  413a90:	xor    ecx,eax
  413a92:	imul   ecx,ecx,0x9e3779b1
  413a98:	mov    DWORD PTR [rdi+0x14],ecx
  413a9b:	call   413370 <flatcc_builder_create_cached_vtable@@Base>
  413aa0:	test   eax,eax
  413aa2:	mov    r13d,eax
  413aa5:	jne    413ac0 <flatcc_builder_end_table@@Base+0x80>
  413aa7:	add    rsp,0x8
  413aab:	xor    ebp,ebp
  413aad:	pop    rbx
  413aae:	mov    eax,ebp
  413ab0:	pop    rbp
  413ab1:	pop    r12
  413ab3:	pop    r13
  413ab5:	ret    
  413ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413ac0:	movzx  edx,bp
  413ac3:	xor    esi,esi
  413ac5:	mov    rdi,r12
  413ac8:	call   4030b0 <memset@plt>
  413acd:	mov    rax,QWORD PTR [rbx+0x30]
  413ad1:	mov    r9,QWORD PTR [rbx]
  413ad4:	sub    rsp,0x8
  413ad8:	mov    edx,DWORD PTR [rbx+0x20]
  413adb:	movzx  ecx,WORD PTR [rbx+0xea]
  413ae2:	mov    rdi,rbx
  413ae5:	mov    rsi,QWORD PTR [rbx+0x18]
  413ae9:	mov    r8d,DWORD PTR [rax+0x14]
  413aed:	add    r8,QWORD PTR [rbx+0x88]
  413af4:	push   r13
  413af6:	sub    r9,r8
  413af9:	shr    r9,1
  413afc:	call   413700 <flatcc_builder_create_table@@Base>
  413b01:	mov    ebp,eax
  413b03:	test   ebp,ebp
  413b05:	pop    rax
  413b06:	pop    rdx
  413b07:	je     413aa7 <flatcc_builder_end_table@@Base+0x67>
  413b09:	mov    rax,QWORD PTR [rbx+0x30]
  413b0d:	mov    rdi,QWORD PTR [rbx+0x18]
  413b11:	xor    esi,esi
  413b13:	mov    edx,DWORD PTR [rax+0x18]
  413b16:	mov    DWORD PTR [rbx+0x14],edx
  413b19:	movzx  edx,WORD PTR [rax+0x1c]
  413b1d:	mov    WORD PTR [rbx+0x10],dx
  413b21:	mov    edx,DWORD PTR [rax+0x10]
  413b24:	add    rdx,QWORD PTR [rbx+0x58]
  413b28:	mov    QWORD PTR [rbx+0x8],rdx
  413b2c:	mov    eax,DWORD PTR [rax+0x14]
  413b2f:	add    rax,QWORD PTR [rbx+0x88]
  413b36:	mov    edx,DWORD PTR [rbx+0x20]
  413b39:	mov    QWORD PTR [rbx],rax
  413b3c:	call   4030b0 <memset@plt>
  413b41:	mov    rax,QWORD PTR [rbx+0x30]
  413b45:	mov    edi,DWORD PTR [rbx+0x70]
  413b48:	mov    esi,DWORD PTR [rax]
  413b4a:	mov    edx,DWORD PTR [rax+0x8]
  413b4d:	mov    ecx,DWORD PTR [rax+0x4]
  413b50:	mov    DWORD PTR [rbx+0x20],edx
  413b53:	mov    rdx,rsi
  413b56:	mov    DWORD PTR [rbx+0x28],esi
  413b59:	add    rsi,QWORD PTR [rbx+0x68]
  413b5d:	sub    edi,edx
  413b5f:	cmp    ecx,edi
  413b61:	mov    edx,edi
  413b63:	cmovb  edx,ecx
  413b66:	mov    DWORD PTR [rbx+0x24],edx
  413b69:	movzx  edx,WORD PTR [rbx+0xea]
  413b70:	cmp    dx,WORD PTR [rbx+0xe8]
  413b77:	mov    QWORD PTR [rbx+0x18],rsi
  413b7b:	mov    DWORD PTR [rax+0x4],ecx
  413b7e:	jbe    413b87 <flatcc_builder_end_table@@Base+0x147>
  413b80:	mov    WORD PTR [rbx+0xe8],dx
  413b87:	movzx  edx,WORD PTR [rax+0xc]
  413b8b:	sub    rax,0x24
  413b8f:	sub    DWORD PTR [rbx+0x104],0x1
  413b96:	mov    QWORD PTR [rbx+0x30],rax
  413b9a:	mov    eax,ebp
  413b9c:	mov    WORD PTR [rbx+0xea],dx
  413ba3:	add    rsp,0x8
  413ba7:	pop    rbx
  413ba8:	pop    rbp
  413ba9:	pop    r12
  413bab:	pop    r13
  413bad:	ret    
  413bae:	lea    rcx,[rip+0x70db]        # 41ac90 <_IO_stdin_used@@Base+0xc90>
  413bb5:	lea    rsi,[rip+0x69ac]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413bbc:	lea    rdi,[rip+0x6bed]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  413bc3:	mov    edx,0x525
  413bc8:	call   4030a0 <__assert_fail@plt>
  413bcd:	nop    DWORD PTR [rax]

0000000000413bd0 <flatcc_builder_create_vector@@Base>:
  413bd0:	push   rbp
  413bd1:	push   rbx
  413bd2:	sub    rsp,0xb8
  413bd9:	mov    rax,QWORD PTR fs:0x28
  413be2:	mov    QWORD PTR [rsp+0xa8],rax
  413bea:	xor    eax,eax
  413bec:	cmp    rdx,r9
  413bef:	ja     413d34 <flatcc_builder_create_vector@@Base+0x164>
  413bf5:	mov    rbx,rdi
  413bf8:	cmp    r8w,0x4
  413bfd:	mov    eax,0x4
  413c02:	cmovb  r8d,eax
  413c06:	cmp    r8w,WORD PTR [rbx+0xe8]
  413c0e:	movzx  edi,r8w
  413c12:	jbe    413c1c <flatcc_builder_create_vector@@Base+0x4c>
  413c14:	mov    WORD PTR [rbx+0xe8],r8w
  413c1c:	imul   ecx,edx
  413c1f:	mov    DWORD PTR [rsp+0xc],edx
  413c23:	mov    edx,DWORD PTR [rbx+0xf0]
  413c29:	sub    edi,0x1
  413c2c:	mov    QWORD PTR [rsp+0x10],0x4
  413c35:	mov    QWORD PTR [rsp+0x28],0x4
  413c3e:	mov    DWORD PTR [rsp+0x18],0x1
  413c46:	mov    r8d,0x4
  413c4c:	mov    eax,edx
  413c4e:	sub    eax,ecx
  413c50:	and    eax,edi
  413c52:	lea    rdi,[rsp+0xc]
  413c57:	test   ecx,ecx
  413c59:	mov    QWORD PTR [rsp+0x20],rdi
  413c5e:	jne    413cf0 <flatcc_builder_create_vector@@Base+0x120>
  413c64:	test   eax,eax
  413c66:	je     413c94 <flatcc_builder_create_vector@@Base+0xc4>
  413c68:	movsxd rsi,DWORD PTR [rsp+0x18]
  413c6d:	mov    rdi,0x41b060
  413c74:	add    r8,rax
  413c77:	mov    QWORD PTR [rsp+0x10],r8
  413c7c:	mov    rcx,rsi
  413c7f:	shl    rsi,0x4
  413c83:	add    ecx,0x1
  413c86:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  413c8b:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  413c90:	mov    DWORD PTR [rsp+0x18],ecx
  413c94:	mov    ebp,edx
  413c96:	movabs rax,0x10000000f
  413ca0:	sub    ebp,r8d
  413ca3:	cmp    r8,rax
  413ca6:	ja     413d10 <flatcc_builder_create_vector@@Base+0x140>
  413ca8:	cmp    edx,ebp
  413caa:	jle    413d10 <flatcc_builder_create_vector@@Base+0x140>
  413cac:	lea    rsi,[rsp+0x20]
  413cb1:	mov    rdi,QWORD PTR [rbx+0x38]
  413cb5:	mov    ecx,ebp
  413cb7:	mov    edx,DWORD PTR [rsp+0x18]
  413cbb:	call   QWORD PTR [rbx+0x48]
  413cbe:	test   eax,eax
  413cc0:	jne    413d2f <flatcc_builder_create_vector@@Base+0x15f>
  413cc2:	mov    DWORD PTR [rbx+0xf0],ebp
  413cc8:	mov    eax,ebp
  413cca:	mov    rbx,QWORD PTR [rsp+0xa8]
  413cd2:	xor    rbx,QWORD PTR fs:0x28
  413cdb:	jne    413d53 <flatcc_builder_create_vector@@Base+0x183>
  413cdd:	add    rsp,0xb8
  413ce4:	pop    rbx
  413ce5:	pop    rbp
  413ce6:	ret    
  413ce7:	nop    WORD PTR [rax+rax*1+0x0]
  413cf0:	lea    r8,[rcx+0x4]
  413cf4:	mov    QWORD PTR [rsp+0x30],rsi
  413cf9:	mov    QWORD PTR [rsp+0x38],rcx
  413cfe:	mov    DWORD PTR [rsp+0x18],0x2
  413d06:	mov    QWORD PTR [rsp+0x10],r8
  413d0b:	jmp    413c64 <flatcc_builder_create_vector@@Base+0x94>
  413d10:	lea    rcx,[rip+0x7299]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  413d17:	lea    rsi,[rip+0x684a]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413d1e:	lea    rdi,[rip+0x6bda]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  413d25:	mov    edx,0x287
  413d2a:	call   4030a0 <__assert_fail@plt>
  413d2f:	call   403364 <posix_memalign@plt+0x204>
  413d34:	lea    rcx,[rip+0x6f35]        # 41ac70 <_IO_stdin_used@@Base+0xc70>
  413d3b:	lea    rsi,[rip+0x6826]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413d42:	lea    rdi,[rip+0x6c28]        # 41a971 <_IO_stdin_used@@Base+0x971>
  413d49:	mov    edx,0x555
  413d4e:	call   4030a0 <__assert_fail@plt>
  413d53:	call   403080 <__stack_chk_fail@plt>
  413d58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413d60 <flatcc_builder_end_vector@@Base>:
  413d60:	push   rbp
  413d61:	push   rbx
  413d62:	sub    rsp,0x8
  413d66:	mov    rax,QWORD PTR [rdi+0x30]
  413d6a:	cmp    WORD PTR [rax+0xe],0x4
  413d6f:	jne    413e1f <flatcc_builder_end_vector@@Base+0xbf>
  413d75:	mov    ecx,DWORD PTR [rax+0x10]
  413d78:	mov    edx,DWORD PTR [rax+0x14]
  413d7b:	mov    rbx,rdi
  413d7e:	mov    r9d,DWORD PTR [rax+0x18]
  413d82:	movzx  r8d,WORD PTR [rdi+0xea]
  413d8a:	mov    rsi,QWORD PTR [rdi+0x18]
  413d8e:	call   413bd0 <flatcc_builder_create_vector@@Base>
  413d93:	test   eax,eax
  413d95:	mov    ebp,eax
  413d97:	jne    413da8 <flatcc_builder_end_vector@@Base+0x48>
  413d99:	add    rsp,0x8
  413d9d:	mov    eax,ebp
  413d9f:	pop    rbx
  413da0:	pop    rbp
  413da1:	ret    
  413da2:	nop    WORD PTR [rax+rax*1+0x0]
  413da8:	mov    edx,DWORD PTR [rbx+0x20]
  413dab:	mov    rdi,QWORD PTR [rbx+0x18]
  413daf:	xor    esi,esi
  413db1:	call   4030b0 <memset@plt>
  413db6:	mov    rax,QWORD PTR [rbx+0x30]
  413dba:	mov    edi,DWORD PTR [rbx+0x70]
  413dbd:	mov    esi,DWORD PTR [rax]
  413dbf:	mov    edx,DWORD PTR [rax+0x8]
  413dc2:	mov    ecx,DWORD PTR [rax+0x4]
  413dc5:	mov    DWORD PTR [rbx+0x20],edx
  413dc8:	mov    rdx,rsi
  413dcb:	mov    DWORD PTR [rbx+0x28],esi
  413dce:	add    rsi,QWORD PTR [rbx+0x68]
  413dd2:	sub    edi,edx
  413dd4:	cmp    ecx,edi
  413dd6:	mov    edx,edi
  413dd8:	cmovb  edx,ecx
  413ddb:	mov    DWORD PTR [rbx+0x24],edx
  413dde:	movzx  edx,WORD PTR [rbx+0xea]
  413de5:	cmp    dx,WORD PTR [rbx+0xe8]
  413dec:	mov    QWORD PTR [rbx+0x18],rsi
  413df0:	mov    DWORD PTR [rax+0x4],ecx
  413df3:	jbe    413dfc <flatcc_builder_end_vector@@Base+0x9c>
  413df5:	mov    WORD PTR [rbx+0xe8],dx
  413dfc:	movzx  edx,WORD PTR [rax+0xc]
  413e00:	sub    rax,0x24
  413e04:	sub    DWORD PTR [rbx+0x104],0x1
  413e0b:	mov    QWORD PTR [rbx+0x30],rax
  413e0f:	mov    eax,ebp
  413e11:	mov    WORD PTR [rbx+0xea],dx
  413e18:	add    rsp,0x8
  413e1c:	pop    rbx
  413e1d:	pop    rbp
  413e1e:	ret    
  413e1f:	lea    rcx,[rip+0x6e2a]        # 41ac50 <_IO_stdin_used@@Base+0xc50>
  413e26:	lea    rsi,[rip+0x673b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413e2d:	lea    rdi,[rip+0x6814]        # 41a648 <_IO_stdin_used@@Base+0x648>
  413e34:	mov    edx,0x578
  413e39:	call   4030a0 <__assert_fail@plt>
  413e3e:	xchg   ax,ax

0000000000413e40 <flatcc_builder_vector_count@@Base>:
  413e40:	mov    rax,QWORD PTR [rdi+0x30]
  413e44:	mov    eax,DWORD PTR [rax+0x14]
  413e47:	ret    
  413e48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413e50 <flatcc_builder_vector_edit@@Base>:
  413e50:	mov    rax,QWORD PTR [rdi+0x18]
  413e54:	ret    
  413e55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000413e60 <flatcc_builder_create_offset_vector_direct@@Base>:
  413e60:	xor    ecx,ecx
  413e62:	jmp    411710 <flatcc_builder_default_alloc@@Base+0x390>
  413e67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413e70 <flatcc_builder_end_offset_vector@@Base>:
  413e70:	push   rbp
  413e71:	push   rbx
  413e72:	sub    rsp,0x8
  413e76:	mov    rax,QWORD PTR [rdi+0x30]
  413e7a:	cmp    WORD PTR [rax+0xe],0x5
  413e7f:	jne    413f1f <flatcc_builder_end_offset_vector@@Base+0xaf>
  413e85:	mov    edx,DWORD PTR [rax+0x14]
  413e88:	mov    rsi,QWORD PTR [rdi+0x18]
  413e8c:	mov    rbx,rdi
  413e8f:	call   413e60 <flatcc_builder_create_offset_vector_direct@@Base>
  413e94:	test   eax,eax
  413e96:	mov    ebp,eax
  413e98:	jne    413ea8 <flatcc_builder_end_offset_vector@@Base+0x38>
  413e9a:	add    rsp,0x8
  413e9e:	mov    eax,ebp
  413ea0:	pop    rbx
  413ea1:	pop    rbp
  413ea2:	ret    
  413ea3:	nop    DWORD PTR [rax+rax*1+0x0]
  413ea8:	mov    edx,DWORD PTR [rbx+0x20]
  413eab:	mov    rdi,QWORD PTR [rbx+0x18]
  413eaf:	xor    esi,esi
  413eb1:	call   4030b0 <memset@plt>
  413eb6:	mov    rax,QWORD PTR [rbx+0x30]
  413eba:	mov    edi,DWORD PTR [rbx+0x70]
  413ebd:	mov    esi,DWORD PTR [rax]
  413ebf:	mov    edx,DWORD PTR [rax+0x8]
  413ec2:	mov    ecx,DWORD PTR [rax+0x4]
  413ec5:	mov    DWORD PTR [rbx+0x20],edx
  413ec8:	mov    rdx,rsi
  413ecb:	mov    DWORD PTR [rbx+0x28],esi
  413ece:	add    rsi,QWORD PTR [rbx+0x68]
  413ed2:	sub    edi,edx
  413ed4:	cmp    ecx,edi
  413ed6:	mov    edx,edi
  413ed8:	cmovb  edx,ecx
  413edb:	mov    DWORD PTR [rbx+0x24],edx
  413ede:	movzx  edx,WORD PTR [rbx+0xea]
  413ee5:	cmp    dx,WORD PTR [rbx+0xe8]
  413eec:	mov    QWORD PTR [rbx+0x18],rsi
  413ef0:	mov    DWORD PTR [rax+0x4],ecx
  413ef3:	jbe    413efc <flatcc_builder_end_offset_vector@@Base+0x8c>
  413ef5:	mov    WORD PTR [rbx+0xe8],dx
  413efc:	movzx  edx,WORD PTR [rax+0xc]
  413f00:	sub    rax,0x24
  413f04:	sub    DWORD PTR [rbx+0x104],0x1
  413f0b:	mov    QWORD PTR [rbx+0x30],rax
  413f0f:	mov    eax,ebp
  413f11:	mov    WORD PTR [rbx+0xea],dx
  413f18:	add    rsp,0x8
  413f1c:	pop    rbx
  413f1d:	pop    rbp
  413f1e:	ret    
  413f1f:	lea    rcx,[rip+0x6cda]        # 41ac00 <_IO_stdin_used@@Base+0xc00>
  413f26:	lea    rsi,[rip+0x663b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  413f2d:	lea    rdi,[rip+0x6784]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  413f34:	mov    edx,0x5c8
  413f39:	call   4030a0 <__assert_fail@plt>
  413f3e:	xchg   ax,ax

0000000000413f40 <flatcc_builder_create_offset_vector@@Base>:
  413f40:	push   r12
  413f42:	push   rbp
  413f43:	mov    r12,rsi
  413f46:	push   rbx
  413f47:	mov    rbp,rdx
  413f4a:	mov    rbx,rdi
  413f4d:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  413f52:	test   eax,eax
  413f54:	je     413f60 <flatcc_builder_create_offset_vector@@Base+0x20>
  413f56:	pop    rbx
  413f57:	xor    eax,eax
  413f59:	pop    rbp
  413f5a:	pop    r12
  413f5c:	ret    
  413f5d:	nop    DWORD PTR [rax]
  413f60:	mov    rsi,rbp
  413f63:	mov    rdi,rbx
  413f66:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  413f6b:	test   rax,rax
  413f6e:	je     413f56 <flatcc_builder_create_offset_vector@@Base+0x16>
  413f70:	lea    rdx,[rbp*4+0x0]
  413f78:	mov    rsi,r12
  413f7b:	mov    rdi,rax
  413f7e:	call   4030f0 <memcpy@plt>
  413f83:	mov    rdi,rbx
  413f86:	pop    rbx
  413f87:	pop    rbp
  413f88:	pop    r12
  413f8a:	jmp    413e70 <flatcc_builder_end_offset_vector@@Base>
  413f8f:	nop

0000000000413f90 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  413f90:	push   rbp
  413f91:	push   rbx
  413f92:	sub    rsp,0x8
  413f96:	mov    rax,QWORD PTR [rdi+0x30]
  413f9a:	cmp    WORD PTR [rax+0xe],0x5
  413f9f:	jne    414047 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  413fa5:	mov    edx,DWORD PTR [rax+0x14]
  413fa8:	mov    rcx,rsi
  413fab:	mov    rsi,QWORD PTR [rdi+0x18]
  413faf:	mov    rbx,rdi
  413fb2:	call   411710 <flatcc_builder_default_alloc@@Base+0x390>
  413fb7:	test   eax,eax
  413fb9:	mov    ebp,eax
  413fbb:	jne    413fd0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  413fbd:	add    rsp,0x8
  413fc1:	mov    eax,ebp
  413fc3:	pop    rbx
  413fc4:	pop    rbp
  413fc5:	ret    
  413fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413fd0:	mov    edx,DWORD PTR [rbx+0x20]
  413fd3:	mov    rdi,QWORD PTR [rbx+0x18]
  413fd7:	xor    esi,esi
  413fd9:	call   4030b0 <memset@plt>
  413fde:	mov    rax,QWORD PTR [rbx+0x30]
  413fe2:	mov    edi,DWORD PTR [rbx+0x70]
  413fe5:	mov    esi,DWORD PTR [rax]
  413fe7:	mov    edx,DWORD PTR [rax+0x8]
  413fea:	mov    ecx,DWORD PTR [rax+0x4]
  413fed:	mov    DWORD PTR [rbx+0x20],edx
  413ff0:	mov    rdx,rsi
  413ff3:	mov    DWORD PTR [rbx+0x28],esi
  413ff6:	add    rsi,QWORD PTR [rbx+0x68]
  413ffa:	sub    edi,edx
  413ffc:	cmp    ecx,edi
  413ffe:	mov    edx,edi
  414000:	cmovb  edx,ecx
  414003:	mov    DWORD PTR [rbx+0x24],edx
  414006:	movzx  edx,WORD PTR [rbx+0xea]
  41400d:	cmp    dx,WORD PTR [rbx+0xe8]
  414014:	mov    QWORD PTR [rbx+0x18],rsi
  414018:	mov    DWORD PTR [rax+0x4],ecx
  41401b:	jbe    414024 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  41401d:	mov    WORD PTR [rbx+0xe8],dx
  414024:	movzx  edx,WORD PTR [rax+0xc]
  414028:	sub    rax,0x24
  41402c:	sub    DWORD PTR [rbx+0x104],0x1
  414033:	mov    QWORD PTR [rbx+0x30],rax
  414037:	mov    eax,ebp
  414039:	mov    WORD PTR [rbx+0xea],dx
  414040:	add    rsp,0x8
  414044:	pop    rbx
  414045:	pop    rbp
  414046:	ret    
  414047:	lea    rcx,[rip+0x6b72]        # 41abc0 <_IO_stdin_used@@Base+0xbc0>
  41404e:	lea    rsi,[rip+0x6513]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414055:	lea    rdi,[rip+0x665c]        # 41a6b8 <_IO_stdin_used@@Base+0x6b8>
  41405c:	mov    edx,0x5d5
  414061:	call   4030a0 <__assert_fail@plt>
  414066:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000414070 <flatcc_builder_offset_vector_edit@@Base>:
  414070:	mov    rax,QWORD PTR [rdi+0x18]
  414074:	ret    
  414075:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000414080 <flatcc_builder_offset_vector_count@@Base>:
  414080:	mov    rax,QWORD PTR [rdi+0x30]
  414084:	mov    eax,DWORD PTR [rax+0x14]
  414087:	ret    
  414088:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414090 <flatcc_builder_create_union_vector_direct@@Base>:
  414090:	push   r13
  414092:	push   r12
  414094:	mov    r13,rcx
  414097:	push   rbp
  414098:	push   rbx
  414099:	mov    r12,rsi
  41409c:	mov    rcx,r12
  41409f:	mov    rsi,rdx
  4140a2:	mov    rdx,r13
  4140a5:	sub    rsp,0x8
  4140a9:	mov    rbp,rdi
  4140ac:	call   411710 <flatcc_builder_default_alloc@@Base+0x390>
  4140b1:	test   eax,eax
  4140b3:	jne    4140c8 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  4140b5:	add    rsp,0x8
  4140b9:	xor    eax,eax
  4140bb:	pop    rbx
  4140bc:	pop    rbp
  4140bd:	pop    r12
  4140bf:	pop    r13
  4140c1:	ret    
  4140c2:	nop    WORD PTR [rax+rax*1+0x0]
  4140c8:	mov    ebx,eax
  4140ca:	mov    rdx,r13
  4140cd:	mov    ecx,0x1
  4140d2:	mov    rsi,r12
  4140d5:	mov    rdi,rbp
  4140d8:	mov    r9d,0xffffffff
  4140de:	mov    r8d,0x1
  4140e4:	call   413bd0 <flatcc_builder_create_vector@@Base>
  4140e9:	mov    rcx,rbx
  4140ec:	mov    edx,eax
  4140ee:	shl    rcx,0x20
  4140f2:	mov    rbx,rcx
  4140f5:	or     rbx,rdx
  4140f8:	test   eax,eax
  4140fa:	mov    rax,rcx
  4140fd:	cmovne rax,rbx
  414101:	add    rsp,0x8
  414105:	pop    rbx
  414106:	pop    rbp
  414107:	pop    r12
  414109:	pop    r13
  41410b:	ret    
  41410c:	nop    DWORD PTR [rax+0x0]

0000000000414110 <flatcc_builder_create_union_vector@@Base>:
  414110:	push   r13
  414112:	push   r12
  414114:	mov    r12,rdx
  414117:	push   rbp
  414118:	push   rbx
  414119:	mov    rbp,rsi
  41411c:	mov    rbx,rdi
  41411f:	sub    rsp,0x8
  414123:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  414128:	test   eax,eax
  41412a:	je     414140 <flatcc_builder_create_union_vector@@Base+0x30>
  41412c:	add    rsp,0x8
  414130:	xor    eax,eax
  414132:	pop    rbx
  414133:	pop    rbp
  414134:	pop    r12
  414136:	pop    r13
  414138:	ret    
  414139:	nop    DWORD PTR [rax+0x0]
  414140:	mov    rsi,r12
  414143:	mov    rdi,rbx
  414146:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  41414b:	test   rax,rax
  41414e:	je     41412c <flatcc_builder_create_union_vector@@Base+0x1c>
  414150:	mov    r13d,DWORD PTR [rbx+0x20]
  414154:	mov    rax,r13
  414157:	add    eax,r12d
  41415a:	cmp    eax,DWORD PTR [rbx+0x24]
  41415d:	mov    DWORD PTR [rbx+0x20],eax
  414160:	jae    414240 <flatcc_builder_create_union_vector@@Base+0x130>
  414166:	add    r13,QWORD PTR [rbx+0x18]
  41416a:	je     41412c <flatcc_builder_create_union_vector@@Base+0x1c>
  41416c:	mov    rdi,rbx
  41416f:	call   414070 <flatcc_builder_offset_vector_edit@@Base>
  414174:	xor    edi,edi
  414176:	test   r12,r12
  414179:	je     41419d <flatcc_builder_create_union_vector@@Base+0x8d>
  41417b:	nop    DWORD PTR [rax+rax*1+0x0]
  414180:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  414186:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  41418b:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  414190:	mov    DWORD PTR [rax+rdi*4],r8d
  414194:	add    rdi,0x1
  414198:	cmp    r12,rdi
  41419b:	jne    414180 <flatcc_builder_create_union_vector@@Base+0x70>
  41419d:	mov    rcx,r12
  4141a0:	mov    rdx,rax
  4141a3:	mov    rsi,r13
  4141a6:	mov    rdi,rbx
  4141a9:	call   414090 <flatcc_builder_create_union_vector_direct@@Base>
  4141ae:	mov    edx,DWORD PTR [rbx+0x20]
  4141b1:	mov    rdi,QWORD PTR [rbx+0x18]
  4141b5:	xor    esi,esi
  4141b7:	mov    r12,rax
  4141ba:	mov    rbp,rax
  4141bd:	sar    r12,0x20
  4141c1:	call   4030b0 <memset@plt>
  4141c6:	mov    rax,QWORD PTR [rbx+0x30]
  4141ca:	mov    esi,DWORD PTR [rax]
  4141cc:	mov    edx,DWORD PTR [rax+0x8]
  4141cf:	mov    ecx,DWORD PTR [rax+0x4]
  4141d2:	mov    DWORD PTR [rbx+0x20],edx
  4141d5:	mov    DWORD PTR [rbx+0x28],esi
  4141d8:	mov    rdx,rsi
  4141db:	add    rsi,QWORD PTR [rbx+0x68]
  4141df:	mov    QWORD PTR [rbx+0x18],rsi
  4141e3:	mov    esi,DWORD PTR [rbx+0x70]
  4141e6:	sub    esi,edx
  4141e8:	cmp    ecx,esi
  4141ea:	mov    edx,esi
  4141ec:	cmovb  edx,ecx
  4141ef:	mov    DWORD PTR [rbx+0x24],edx
  4141f2:	movzx  edx,WORD PTR [rbx+0xea]
  4141f9:	cmp    dx,WORD PTR [rbx+0xe8]
  414200:	mov    DWORD PTR [rax+0x4],ecx
  414203:	jbe    41420c <flatcc_builder_create_union_vector@@Base+0xfc>
  414205:	mov    WORD PTR [rbx+0xe8],dx
  41420c:	movzx  edx,WORD PTR [rax+0xc]
  414210:	sub    rax,0x24
  414214:	sub    DWORD PTR [rbx+0x104],0x1
  41421b:	mov    QWORD PTR [rbx+0x30],rax
  41421f:	shl    r12,0x20
  414223:	mov    eax,ebp
  414225:	or     rax,r12
  414228:	mov    WORD PTR [rbx+0xea],dx
  41422f:	add    rsp,0x8
  414233:	pop    rbx
  414234:	pop    rbp
  414235:	pop    r12
  414237:	pop    r13
  414239:	ret    
  41423a:	nop    WORD PTR [rax+rax*1+0x0]
  414240:	lea    esi,[rax+0x1]
  414243:	mov    edx,0xfffffffc
  414248:	mov    rdi,rbx
  41424b:	call   411320 <test_parse@@Base+0x570>
  414250:	test   eax,eax
  414252:	je     414166 <flatcc_builder_create_union_vector@@Base+0x56>
  414258:	jmp    41412c <flatcc_builder_create_union_vector@@Base+0x1c>
  41425d:	nop    DWORD PTR [rax]

0000000000414260 <flatcc_builder_start_union_vector@@Base>:
  414260:	push   rbx
  414261:	mov    esi,0x4
  414266:	mov    rbx,rdi
  414269:	call   4115e0 <flatcc_builder_default_alloc@@Base+0x260>
  41426e:	test   eax,eax
  414270:	jne    4142b8 <flatcc_builder_start_union_vector@@Base+0x58>
  414272:	mov    rcx,QWORD PTR [rbx+0x30]
  414276:	mov    edx,0x7
  41427b:	mov    DWORD PTR [rcx+0x10],0x8
  414282:	mov    DWORD PTR [rcx+0x14],0x0
  414289:	mov    WORD PTR [rcx+0xe],dx
  41428d:	mov    edx,DWORD PTR [rbx+0x28]
  414290:	mov    rsi,rdx
  414293:	add    rdx,QWORD PTR [rbx+0x68]
  414297:	mov    QWORD PTR [rbx+0x18],rdx
  41429b:	mov    edx,DWORD PTR [rbx+0x70]
  41429e:	sub    edx,esi
  4142a0:	mov    esi,0xfffffffc
  4142a5:	cmp    edx,esi
  4142a7:	cmova  edx,esi
  4142aa:	mov    DWORD PTR [rbx+0x24],edx
  4142ad:	mov    DWORD PTR [rcx+0x4],esi
  4142b0:	pop    rbx
  4142b1:	ret    
  4142b2:	nop    WORD PTR [rax+rax*1+0x0]
  4142b8:	mov    eax,0xffffffff
  4142bd:	pop    rbx
  4142be:	ret    
  4142bf:	nop

00000000004142c0 <flatcc_builder_union_vector_edit@@Base>:
  4142c0:	mov    rax,QWORD PTR [rdi+0x18]
  4142c4:	ret    
  4142c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004142d0 <flatcc_builder_union_vector_count@@Base>:
  4142d0:	mov    rax,QWORD PTR [rdi+0x30]
  4142d4:	mov    eax,DWORD PTR [rax+0x14]
  4142d7:	ret    
  4142d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004142e0 <flatcc_builder_end_union_vector@@Base>:
  4142e0:	push   r13
  4142e2:	push   r12
  4142e4:	push   rbp
  4142e5:	push   rbx
  4142e6:	sub    rsp,0x8
  4142ea:	mov    rax,QWORD PTR [rdi+0x30]
  4142ee:	cmp    WORD PTR [rax+0xe],0x7
  4142f3:	jne    414425 <flatcc_builder_end_union_vector@@Base+0x145>
  4142f9:	mov    rbx,rdi
  4142fc:	call   4142d0 <flatcc_builder_union_vector_count@@Base>
  414301:	mov    ebp,DWORD PTR [rbx+0x20]
  414304:	mov    r12,rax
  414307:	lea    eax,[rax+rax*4]
  41430a:	add    eax,ebp
  41430c:	cmp    eax,DWORD PTR [rbx+0x24]
  41430f:	mov    DWORD PTR [rbx+0x20],eax
  414312:	jae    414400 <flatcc_builder_end_union_vector@@Base+0x120>
  414318:	add    rbp,QWORD PTR [rbx+0x18]
  41431c:	je     414418 <flatcc_builder_end_union_vector@@Base+0x138>
  414322:	mov    rdi,rbx
  414325:	lea    r13,[rbp+r12*4+0x0]
  41432a:	call   4142c0 <flatcc_builder_union_vector_edit@@Base>
  41432f:	xor    edi,edi
  414331:	test   r12,r12
  414334:	je     41435d <flatcc_builder_end_union_vector@@Base+0x7d>
  414336:	nop    WORD PTR cs:[rax+rax*1+0x0]
  414340:	movzx  r8d,BYTE PTR [rax+rdi*8]
  414345:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  41434a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  41434f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  414354:	add    rdi,0x1
  414358:	cmp    r12,rdi
  41435b:	jne    414340 <flatcc_builder_end_union_vector@@Base+0x60>
  41435d:	mov    rcx,r12
  414360:	mov    rdx,rbp
  414363:	mov    rsi,r13
  414366:	mov    rdi,rbx
  414369:	call   414090 <flatcc_builder_create_union_vector_direct@@Base>
  41436e:	mov    edx,DWORD PTR [rbx+0x20]
  414371:	mov    rdi,QWORD PTR [rbx+0x18]
  414375:	xor    esi,esi
  414377:	mov    r12,rax
  41437a:	mov    rbp,rax
  41437d:	sar    r12,0x20
  414381:	call   4030b0 <memset@plt>
  414386:	mov    rax,QWORD PTR [rbx+0x30]
  41438a:	mov    esi,DWORD PTR [rax]
  41438c:	mov    edx,DWORD PTR [rax+0x8]
  41438f:	mov    ecx,DWORD PTR [rax+0x4]
  414392:	mov    DWORD PTR [rbx+0x20],edx
  414395:	mov    DWORD PTR [rbx+0x28],esi
  414398:	mov    rdx,rsi
  41439b:	add    rsi,QWORD PTR [rbx+0x68]
  41439f:	mov    QWORD PTR [rbx+0x18],rsi
  4143a3:	mov    esi,DWORD PTR [rbx+0x70]
  4143a6:	sub    esi,edx
  4143a8:	cmp    ecx,esi
  4143aa:	mov    edx,esi
  4143ac:	cmovb  edx,ecx
  4143af:	mov    DWORD PTR [rbx+0x24],edx
  4143b2:	movzx  edx,WORD PTR [rbx+0xea]
  4143b9:	cmp    dx,WORD PTR [rbx+0xe8]
  4143c0:	mov    DWORD PTR [rax+0x4],ecx
  4143c3:	jbe    4143cc <flatcc_builder_end_union_vector@@Base+0xec>
  4143c5:	mov    WORD PTR [rbx+0xe8],dx
  4143cc:	movzx  edx,WORD PTR [rax+0xc]
  4143d0:	sub    rax,0x24
  4143d4:	sub    DWORD PTR [rbx+0x104],0x1
  4143db:	mov    QWORD PTR [rbx+0x30],rax
  4143df:	shl    r12,0x20
  4143e3:	mov    eax,ebp
  4143e5:	or     rax,r12
  4143e8:	mov    WORD PTR [rbx+0xea],dx
  4143ef:	add    rsp,0x8
  4143f3:	pop    rbx
  4143f4:	pop    rbp
  4143f5:	pop    r12
  4143f7:	pop    r13
  4143f9:	ret    
  4143fa:	nop    WORD PTR [rax+rax*1+0x0]
  414400:	lea    esi,[rax+0x1]
  414403:	mov    edx,0xfffffffc
  414408:	mov    rdi,rbx
  41440b:	call   411320 <test_parse@@Base+0x570>
  414410:	test   eax,eax
  414412:	je     414318 <flatcc_builder_end_union_vector@@Base+0x38>
  414418:	add    rsp,0x8
  41441c:	xor    eax,eax
  41441e:	pop    rbx
  41441f:	pop    rbp
  414420:	pop    r12
  414422:	pop    r13
  414424:	ret    
  414425:	lea    rcx,[rip+0x6714]        # 41ab40 <_IO_stdin_used@@Base+0xb40>
  41442c:	lea    rsi,[rip+0x6135]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414433:	lea    rdi,[rip+0x63a6]        # 41a7e0 <_IO_stdin_used@@Base+0x7e0>
  41443a:	mov    edx,0x651
  41443f:	call   4030a0 <__assert_fail@plt>
  414444:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41444f:	nop

0000000000414450 <flatcc_builder_extend_union_vector@@Base>:
  414450:	push   rbp
  414451:	push   rbx
  414452:	xor    edx,edx
  414454:	mov    ecx,esi
  414456:	sub    rsp,0x8
  41445a:	mov    rax,QWORD PTR [rdi+0x30]
  41445e:	add    ecx,DWORD PTR [rax+0x14]
  414461:	setb   dl
  414464:	test   edx,edx
  414466:	jne    4144ad <flatcc_builder_extend_union_vector@@Base+0x5d>
  414468:	cmp    ecx,0x1fffffff
  41446e:	ja     4144ad <flatcc_builder_extend_union_vector@@Base+0x5d>
  414470:	mov    DWORD PTR [rax+0x14],ecx
  414473:	mov    ebp,DWORD PTR [rdi+0x20]
  414476:	mov    rbx,rdi
  414479:	lea    eax,[rbp+rsi*8+0x0]
  41447d:	cmp    eax,DWORD PTR [rdi+0x24]
  414480:	mov    DWORD PTR [rdi+0x20],eax
  414483:	jae    414498 <flatcc_builder_extend_union_vector@@Base+0x48>
  414485:	mov    rax,rbp
  414488:	add    rax,QWORD PTR [rbx+0x18]
  41448c:	add    rsp,0x8
  414490:	pop    rbx
  414491:	pop    rbp
  414492:	ret    
  414493:	nop    DWORD PTR [rax+rax*1+0x0]
  414498:	lea    esi,[rax+0x1]
  41449b:	mov    edx,0xfffffffc
  4144a0:	call   411320 <test_parse@@Base+0x570>
  4144a5:	test   eax,eax
  4144a7:	je     414485 <flatcc_builder_extend_union_vector@@Base+0x35>
  4144a9:	xor    eax,eax
  4144ab:	jmp    41448c <flatcc_builder_extend_union_vector@@Base+0x3c>
  4144ad:	call   403387 <posix_memalign@plt+0x227>
  4144b2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4144bd:	nop    DWORD PTR [rax]

00000000004144c0 <flatcc_builder_truncate_union_vector@@Base>:
  4144c0:	sub    rsp,0x8
  4144c4:	mov    rax,QWORD PTR [rdi+0x30]
  4144c8:	cmp    WORD PTR [rax+0xe],0x7
  4144cd:	jne    4144ff <flatcc_builder_truncate_union_vector@@Base+0x3f>
  4144cf:	mov    edx,DWORD PTR [rax+0x14]
  4144d2:	cmp    edx,esi
  4144d4:	jb     41451e <flatcc_builder_truncate_union_vector@@Base+0x5e>
  4144d6:	sub    edx,esi
  4144d8:	imul   esi,DWORD PTR [rax+0x10]
  4144dc:	mov    DWORD PTR [rax+0x14],edx
  4144df:	mov    eax,DWORD PTR [rdi+0x20]
  4144e2:	mov    rcx,QWORD PTR [rdi+0x18]
  4144e6:	sub    eax,esi
  4144e8:	mov    edx,esi
  4144ea:	xor    esi,esi
  4144ec:	mov    DWORD PTR [rdi+0x20],eax
  4144ef:	lea    rdi,[rcx+rax*1]
  4144f3:	call   4030b0 <memset@plt>
  4144f8:	xor    eax,eax
  4144fa:	add    rsp,0x8
  4144fe:	ret    
  4144ff:	lea    rcx,[rip+0x65fa]        # 41ab00 <_IO_stdin_used@@Base+0xb00>
  414506:	lea    rsi,[rip+0x605b]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41450d:	lea    rdi,[rip+0x62cc]        # 41a7e0 <_IO_stdin_used@@Base+0x7e0>
  414514:	mov    edx,0x681
  414519:	call   4030a0 <__assert_fail@plt>
  41451e:	lea    rcx,[rip+0x65db]        # 41ab00 <_IO_stdin_used@@Base+0xb00>
  414525:	lea    rsi,[rip+0x603c]        # 41a568 <_IO_stdin_used@@Base+0x568>
  41452c:	lea    rdi,[rip+0x6215]        # 41a748 <_IO_stdin_used@@Base+0x748>
  414533:	mov    edx,0x682
  414538:	call   4030a0 <__assert_fail@plt>
  41453d:	nop    DWORD PTR [rax]

0000000000414540 <flatcc_builder_union_vector_push@@Base>:
  414540:	push   r12
  414542:	push   rbp
  414543:	push   rbx
  414544:	mov    rdx,QWORD PTR [rdi+0x30]
  414548:	cmp    WORD PTR [rdx+0xe],0x7
  41454d:	jne    4145a0 <flatcc_builder_union_vector_push@@Base+0x60>
  41454f:	mov    eax,DWORD PTR [rdx+0x14]
  414552:	cmp    eax,0x1fffffff
  414557:	je     414599 <flatcc_builder_union_vector_push@@Base+0x59>
  414559:	add    eax,0x1
  41455c:	mov    rbp,rdi
  41455f:	mov    r12,rsi
  414562:	mov    DWORD PTR [rdx+0x14],eax
  414565:	mov    ebx,DWORD PTR [rdi+0x20]
  414568:	lea    edx,[rbx+0x8]
  41456b:	cmp    edx,DWORD PTR [rdi+0x24]
  41456e:	mov    DWORD PTR [rdi+0x20],edx
  414571:	jae    414588 <flatcc_builder_union_vector_push@@Base+0x48>
  414573:	mov    rax,rbx
  414576:	add    rax,QWORD PTR [rbp+0x18]
  41457a:	je     414599 <flatcc_builder_union_vector_push@@Base+0x59>
  41457c:	mov    QWORD PTR [rax],r12
  41457f:	pop    rbx
  414580:	pop    rbp
  414581:	pop    r12
  414583:	ret    
  414584:	nop    DWORD PTR [rax+0x0]
  414588:	lea    esi,[rbx+0x9]
  41458b:	mov    edx,0xfffffffc
  414590:	call   411320 <test_parse@@Base+0x570>
  414595:	test   eax,eax
  414597:	je     414573 <flatcc_builder_union_vector_push@@Base+0x33>
  414599:	pop    rbx
  41459a:	xor    eax,eax
  41459c:	pop    rbp
  41459d:	pop    r12
  41459f:	ret    
  4145a0:	lea    rcx,[rip+0x6519]        # 41aac0 <_IO_stdin_used@@Base+0xac0>
  4145a7:	lea    rsi,[rip+0x5fba]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4145ae:	lea    rdi,[rip+0x622b]        # 41a7e0 <_IO_stdin_used@@Base+0x7e0>
  4145b5:	mov    edx,0x68d
  4145ba:	call   4030a0 <__assert_fail@plt>
  4145bf:	nop

00000000004145c0 <flatcc_builder_append_union_vector@@Base>:
  4145c0:	push   r13
  4145c2:	push   r12
  4145c4:	push   rbp
  4145c5:	push   rbx
  4145c6:	sub    rsp,0x8
  4145ca:	mov    rax,QWORD PTR [rdi+0x30]
  4145ce:	cmp    WORD PTR [rax+0xe],0x7
  4145d3:	jne    41464b <flatcc_builder_append_union_vector@@Base+0x8b>
  4145d5:	mov    r13,rsi
  4145d8:	mov    ecx,edx
  4145da:	xor    esi,esi
  4145dc:	add    ecx,DWORD PTR [rax+0x14]
  4145df:	setb   sil
  4145e3:	test   esi,esi
  4145e5:	jne    414646 <flatcc_builder_append_union_vector@@Base+0x86>
  4145e7:	cmp    ecx,0x1fffffff
  4145ed:	ja     414646 <flatcc_builder_append_union_vector@@Base+0x86>
  4145ef:	mov    DWORD PTR [rax+0x14],ecx
  4145f2:	mov    r12d,DWORD PTR [rdi+0x20]
  4145f6:	lea    ebx,[rdx*8+0x0]
  4145fd:	mov    rbp,rdi
  414600:	mov    rdx,r12
  414603:	add    edx,ebx
  414605:	cmp    edx,DWORD PTR [rdi+0x24]
  414608:	mov    DWORD PTR [rdi+0x20],edx
  41460b:	jae    414630 <flatcc_builder_append_union_vector@@Base+0x70>
  41460d:	add    r12,QWORD PTR [rbp+0x18]
  414611:	je     414620 <flatcc_builder_append_union_vector@@Base+0x60>
  414613:	mov    edx,ebx
  414615:	mov    rsi,r13
  414618:	mov    rdi,r12
  41461b:	call   4030f0 <memcpy@plt>
  414620:	add    rsp,0x8
  414624:	mov    rax,r12
  414627:	pop    rbx
  414628:	pop    rbp
  414629:	pop    r12
  41462b:	pop    r13
  41462d:	ret    
  41462e:	xchg   ax,ax
  414630:	lea    esi,[rdx+0x1]
  414633:	mov    edx,0xfffffffc
  414638:	call   411320 <test_parse@@Base+0x570>
  41463d:	test   eax,eax
  41463f:	je     41460d <flatcc_builder_append_union_vector@@Base+0x4d>
  414641:	xor    r12d,r12d
  414644:	jmp    414620 <flatcc_builder_append_union_vector@@Base+0x60>
  414646:	call   403387 <posix_memalign@plt+0x227>
  41464b:	lea    rcx,[rip+0x642e]        # 41aa80 <_IO_stdin_used@@Base+0xa80>
  414652:	lea    rsi,[rip+0x5f0f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414659:	lea    rdi,[rip+0x6180]        # 41a7e0 <_IO_stdin_used@@Base+0x7e0>
  414660:	mov    edx,0x69c
  414665:	call   4030a0 <__assert_fail@plt>
  41466a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414670 <flatcc_builder_create_string@@Base>:
  414670:	push   rbp
  414671:	push   rbx
  414672:	sub    rsp,0xb8
  414679:	mov    rax,QWORD PTR fs:0x28
  414682:	mov    QWORD PTR [rsp+0xa8],rax
  41468a:	xor    eax,eax
  41468c:	mov    eax,0xffffffff
  414691:	cmp    rdx,rax
  414694:	ja     414760 <flatcc_builder_create_string@@Base+0xf0>
  41469a:	mov    rbx,rdi
  41469d:	mov    edi,DWORD PTR [rdi+0xf0]
  4146a3:	lea    rcx,[rsp+0xc]
  4146a8:	mov    DWORD PTR [rsp+0xc],edx
  4146ac:	mov    QWORD PTR [rsp+0x28],0x4
  4146b5:	mov    QWORD PTR [rsp+0x20],rcx
  4146ba:	lea    eax,[rdi-0x1]
  4146bd:	sub    eax,edx
  4146bf:	and    eax,0x3
  4146c2:	add    eax,0x1
  4146c5:	test   rdx,rdx
  4146c8:	jne    414740 <flatcc_builder_create_string@@Base+0xd0>
  4146ca:	mov    edx,0x2
  4146cf:	mov    ecx,0x1
  4146d4:	mov    r8d,0x4
  4146da:	add    r8,rax
  4146dd:	mov    rsi,0x41b060
  4146e4:	mov    ebp,edi
  4146e6:	sub    ebp,r8d
  4146e9:	shl    rcx,0x4
  4146ed:	mov    QWORD PTR [rsp+0x10],r8
  4146f2:	cmp    edi,ebp
  4146f4:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4146f9:	mov    DWORD PTR [rsp+0x18],edx
  4146fd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  414702:	jle    414764 <flatcc_builder_create_string@@Base+0xf4>
  414704:	lea    rsi,[rsp+0x20]
  414709:	mov    rdi,QWORD PTR [rbx+0x38]
  41470d:	mov    ecx,ebp
  41470f:	call   QWORD PTR [rbx+0x48]
  414712:	test   eax,eax
  414714:	jne    414788 <flatcc_builder_create_string@@Base+0x118>
  414716:	mov    DWORD PTR [rbx+0xf0],ebp
  41471c:	mov    rbx,QWORD PTR [rsp+0xa8]
  414724:	xor    rbx,QWORD PTR fs:0x28
  41472d:	mov    eax,ebp
  41472f:	jne    414783 <flatcc_builder_create_string@@Base+0x113>
  414731:	add    rsp,0xb8
  414738:	pop    rbx
  414739:	pop    rbp
  41473a:	ret    
  41473b:	nop    DWORD PTR [rax+rax*1+0x0]
  414740:	lea    r8,[rdx+0x4]
  414744:	mov    QWORD PTR [rsp+0x38],rdx
  414749:	mov    QWORD PTR [rsp+0x30],rsi
  41474e:	mov    edx,0x3
  414753:	mov    ecx,0x2
  414758:	jmp    4146da <flatcc_builder_create_string@@Base+0x6a>
  41475d:	nop    DWORD PTR [rax]
  414760:	xor    ebp,ebp
  414762:	jmp    41471c <flatcc_builder_create_string@@Base+0xac>
  414764:	lea    rcx,[rip+0x6845]        # 41afb0 <_IO_stdin_used@@Base+0xfb0>
  41476b:	lea    rsi,[rip+0x5df6]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414772:	lea    rdi,[rip+0x6186]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  414779:	mov    edx,0x287
  41477e:	call   4030a0 <__assert_fail@plt>
  414783:	call   403080 <__stack_chk_fail@plt>
  414788:	call   403364 <posix_memalign@plt+0x204>
  41478d:	nop    DWORD PTR [rax]

0000000000414790 <flatcc_builder_create_string_str@@Base>:
  414790:	push   rbp
  414791:	push   rbx
  414792:	mov    rbp,rdi
  414795:	mov    rdi,rsi
  414798:	mov    rbx,rsi
  41479b:	sub    rsp,0x8
  41479f:	call   403070 <strlen@plt>
  4147a4:	add    rsp,0x8
  4147a8:	mov    rsi,rbx
  4147ab:	mov    rdi,rbp
  4147ae:	pop    rbx
  4147af:	pop    rbp
  4147b0:	mov    rdx,rax
  4147b3:	jmp    414670 <flatcc_builder_create_string@@Base>
  4147b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004147c0 <flatcc_builder_create_string_strn@@Base>:
  4147c0:	push   r12
  4147c2:	push   rbp
  4147c3:	mov    rbp,rsi
  4147c6:	push   rbx
  4147c7:	mov    r12,rdi
  4147ca:	xor    esi,esi
  4147cc:	mov    rdi,rbp
  4147cf:	mov    rbx,rdx
  4147d2:	call   4030c0 <memchr@plt>
  4147d7:	mov    rdx,rax
  4147da:	mov    rsi,rbp
  4147dd:	mov    rdi,r12
  4147e0:	sub    rdx,rbp
  4147e3:	test   rax,rax
  4147e6:	cmovne rbx,rdx
  4147ea:	mov    rdx,rbx
  4147ed:	pop    rbx
  4147ee:	pop    rbp
  4147ef:	pop    r12
  4147f1:	jmp    414670 <flatcc_builder_create_string@@Base>
  4147f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000414800 <flatcc_builder_end_string@@Base>:
  414800:	push   rbp
  414801:	push   rbx
  414802:	sub    rsp,0x8
  414806:	mov    rax,QWORD PTR [rdi+0x30]
  41480a:	cmp    WORD PTR [rax+0xe],0x6
  41480f:	jne    4148d6 <flatcc_builder_end_string@@Base+0xd6>
  414815:	mov    edx,DWORD PTR [rax+0x14]
  414818:	mov    rbx,rdi
  41481b:	cmp    edx,DWORD PTR [rdi+0x20]
  41481e:	jne    4148b7 <flatcc_builder_end_string@@Base+0xb7>
  414824:	mov    rsi,QWORD PTR [rdi+0x18]
  414828:	call   414670 <flatcc_builder_create_string@@Base>
  41482d:	test   eax,eax
  41482f:	mov    ebp,eax
  414831:	jne    414840 <flatcc_builder_end_string@@Base+0x40>
  414833:	add    rsp,0x8
  414837:	mov    eax,ebp
  414839:	pop    rbx
  41483a:	pop    rbp
  41483b:	ret    
  41483c:	nop    DWORD PTR [rax+0x0]
  414840:	mov    edx,DWORD PTR [rbx+0x20]
  414843:	mov    rdi,QWORD PTR [rbx+0x18]
  414847:	xor    esi,esi
  414849:	call   4030b0 <memset@plt>
  41484e:	mov    rax,QWORD PTR [rbx+0x30]
  414852:	mov    edi,DWORD PTR [rbx+0x70]
  414855:	mov    esi,DWORD PTR [rax]
  414857:	mov    edx,DWORD PTR [rax+0x8]
  41485a:	mov    ecx,DWORD PTR [rax+0x4]
  41485d:	mov    DWORD PTR [rbx+0x20],edx
  414860:	mov    rdx,rsi
  414863:	mov    DWORD PTR [rbx+0x28],esi
  414866:	add    rsi,QWORD PTR [rbx+0x68]
  41486a:	sub    edi,edx
  41486c:	cmp    ecx,edi
  41486e:	mov    edx,edi
  414870:	cmovb  edx,ecx
  414873:	mov    DWORD PTR [rbx+0x24],edx
  414876:	movzx  edx,WORD PTR [rbx+0xea]
  41487d:	cmp    dx,WORD PTR [rbx+0xe8]
  414884:	mov    QWORD PTR [rbx+0x18],rsi
  414888:	mov    DWORD PTR [rax+0x4],ecx
  41488b:	jbe    414894 <flatcc_builder_end_string@@Base+0x94>
  41488d:	mov    WORD PTR [rbx+0xe8],dx
  414894:	movzx  edx,WORD PTR [rax+0xc]
  414898:	sub    rax,0x24
  41489c:	sub    DWORD PTR [rbx+0x104],0x1
  4148a3:	mov    QWORD PTR [rbx+0x30],rax
  4148a7:	mov    eax,ebp
  4148a9:	mov    WORD PTR [rbx+0xea],dx
  4148b0:	add    rsp,0x8
  4148b4:	pop    rbx
  4148b5:	pop    rbp
  4148b6:	ret    
  4148b7:	lea    rcx,[rip+0x61a2]        # 41aa60 <_IO_stdin_used@@Base+0xa60>
  4148be:	lea    rsi,[rip+0x5ca3]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4148c5:	lea    rdi,[rip+0x5f4c]        # 41a818 <_IO_stdin_used@@Base+0x818>
  4148cc:	mov    edx,0x6c5
  4148d1:	call   4030a0 <__assert_fail@plt>
  4148d6:	lea    rcx,[rip+0x6183]        # 41aa60 <_IO_stdin_used@@Base+0xa60>
  4148dd:	lea    rsi,[rip+0x5c84]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4148e4:	lea    rdi,[rip+0x5e05]        # 41a6f0 <_IO_stdin_used@@Base+0x6f0>
  4148eb:	mov    edx,0x6c4
  4148f0:	call   4030a0 <__assert_fail@plt>
  4148f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000414900 <flatcc_builder_string_edit@@Base>:
  414900:	mov    rax,QWORD PTR [rdi+0x18]
  414904:	ret    
  414905:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000414910 <flatcc_builder_string_len@@Base>:
  414910:	mov    rax,QWORD PTR [rdi+0x30]
  414914:	mov    eax,DWORD PTR [rax+0x14]
  414917:	ret    
  414918:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414920 <flatcc_builder_table_add@@Base>:
  414920:	push   r13
  414922:	push   r12
  414924:	push   rbp
  414925:	push   rbx
  414926:	sub    rsp,0x8
  41492a:	mov    rax,QWORD PTR [rdi+0x30]
  41492e:	cmp    WORD PTR [rax+0xe],0x3
  414933:	jne    414a42 <flatcc_builder_table_add@@Base+0x122>
  414939:	cmp    esi,0x7ffc
  41493f:	mov    r12d,esi
  414942:	ja     414a23 <flatcc_builder_table_add@@Base+0x103>
  414948:	cmp    WORD PTR [rdi+0xea],cx
  41494f:	mov    rbx,rdi
  414952:	jb     4149c0 <flatcc_builder_table_add@@Base+0xa0>
  414954:	movsxd r13,r12d
  414957:	add    r13,r13
  41495a:	mov    rsi,r13
  41495d:	add    rsi,QWORD PTR [rbx+0x8]
  414961:	cmp    WORD PTR [rsi],0x0
  414965:	jne    414a04 <flatcc_builder_table_add@@Base+0xe4>
  41496b:	mov    eax,DWORD PTR [rbx+0x14]
  41496e:	movzx  ecx,cx
  414971:	xor    eax,r12d
  414974:	imul   eax,eax,0x9e3779b1
  41497a:	xor    eax,edx
  41497c:	imul   eax,eax,0x9e3779b1
  414982:	mov    DWORD PTR [rbx+0x14],eax
  414985:	mov    eax,DWORD PTR [rbx+0x20]
  414988:	lea    ebp,[rcx+rax*1-0x1]
  41498c:	neg    ecx
  41498e:	and    ebp,ecx
  414990:	add    edx,ebp
  414992:	cmp    edx,DWORD PTR [rbx+0x24]
  414995:	mov    DWORD PTR [rbx+0x20],edx
  414998:	jae    4149e0 <flatcc_builder_table_add@@Base+0xc0>
  41499a:	lea    eax,[rbp+0x4]
  41499d:	mov    WORD PTR [rsi],ax
  4149a0:	cmp    r12w,WORD PTR [rbx+0x10]
  4149a5:	jae    4149d0 <flatcc_builder_table_add@@Base+0xb0>
  4149a7:	mov    eax,ebp
  4149a9:	add    rax,QWORD PTR [rbx+0x18]
  4149ad:	add    rsp,0x8
  4149b1:	pop    rbx
  4149b2:	pop    rbp
  4149b3:	pop    r12
  4149b5:	pop    r13
  4149b7:	ret    
  4149b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4149c0:	mov    WORD PTR [rdi+0xea],cx
  4149c7:	jmp    414954 <flatcc_builder_table_add@@Base+0x34>
  4149c9:	nop    DWORD PTR [rax+0x0]
  4149d0:	add    r12d,0x1
  4149d4:	mov    WORD PTR [rbx+0x10],r12w
  4149d9:	jmp    4149a7 <flatcc_builder_table_add@@Base+0x87>
  4149db:	nop    DWORD PTR [rax+rax*1+0x0]
  4149e0:	lea    esi,[rdx+0x1]
  4149e3:	mov    rdi,rbx
  4149e6:	mov    edx,0xfffc
  4149eb:	call   411320 <test_parse@@Base+0x570>
  4149f0:	test   eax,eax
  4149f2:	jne    414a00 <flatcc_builder_table_add@@Base+0xe0>
  4149f4:	mov    rsi,r13
  4149f7:	add    rsi,QWORD PTR [rbx+0x8]
  4149fb:	jmp    41499a <flatcc_builder_table_add@@Base+0x7a>
  4149fd:	nop    DWORD PTR [rax]
  414a00:	xor    eax,eax
  414a02:	jmp    4149ad <flatcc_builder_table_add@@Base+0x8d>
  414a04:	lea    rcx,[rip+0x6035]        # 41aa40 <_IO_stdin_used@@Base+0xa40>
  414a0b:	lea    rsi,[rip+0x5b56]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414a12:	lea    rdi,[rip+0x5ee6]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  414a19:	mov    edx,0x6f8
  414a1e:	call   4030a0 <__assert_fail@plt>
  414a23:	lea    rcx,[rip+0x6016]        # 41aa40 <_IO_stdin_used@@Base+0xa40>
  414a2a:	lea    rsi,[rip+0x5b37]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414a31:	lea    rdi,[rip+0x5e08]        # 41a840 <_IO_stdin_used@@Base+0x840>
  414a38:	mov    edx,0x6ee
  414a3d:	call   4030a0 <__assert_fail@plt>
  414a42:	lea    rcx,[rip+0x5ff7]        # 41aa40 <_IO_stdin_used@@Base+0xa40>
  414a49:	lea    rsi,[rip+0x5b18]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414a50:	lea    rdi,[rip+0x5d59]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  414a57:	mov    edx,0x6ed
  414a5c:	call   4030a0 <__assert_fail@plt>
  414a61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414a6c:	nop    DWORD PTR [rax+0x0]

0000000000414a70 <flatcc_builder_table_edit@@Base>:
  414a70:	mov    rax,QWORD PTR [rdi+0x30]
  414a74:	cmp    WORD PTR [rax+0xe],0x3
  414a79:	jne    414a86 <flatcc_builder_table_edit@@Base+0x16>
  414a7b:	mov    eax,DWORD PTR [rdi+0x20]
  414a7e:	sub    rax,rsi
  414a81:	add    rax,QWORD PTR [rdi+0x18]
  414a85:	ret    
  414a86:	lea    rcx,[rip+0x5f93]        # 41aa20 <_IO_stdin_used@@Base+0xa20>
  414a8d:	lea    rsi,[rip+0x5ad4]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414a94:	lea    rdi,[rip+0x5d15]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  414a9b:	sub    rsp,0x8
  414a9f:	mov    edx,0x702
  414aa4:	call   4030a0 <__assert_fail@plt>
  414aa9:	nop    DWORD PTR [rax+0x0]

0000000000414ab0 <flatcc_builder_table_add_copy@@Base>:
  414ab0:	push   rbp
  414ab1:	push   rbx
  414ab2:	mov    rbx,rcx
  414ab5:	mov    rbp,rdx
  414ab8:	movzx  ecx,r8w
  414abc:	mov    rdx,rbx
  414abf:	sub    rsp,0x8
  414ac3:	call   414920 <flatcc_builder_table_add@@Base>
  414ac8:	test   rax,rax
  414acb:	mov    rcx,rax
  414ace:	je     414ae1 <flatcc_builder_table_add_copy@@Base+0x31>
  414ad0:	mov    rdx,rbx
  414ad3:	mov    rsi,rbp
  414ad6:	mov    rdi,rax
  414ad9:	call   4030f0 <memcpy@plt>
  414ade:	mov    rcx,rax
  414ae1:	add    rsp,0x8
  414ae5:	mov    rax,rcx
  414ae8:	pop    rbx
  414ae9:	pop    rbp
  414aea:	ret    
  414aeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414af0 <flatcc_builder_table_add_offset@@Base>:
  414af0:	push   r13
  414af2:	push   r12
  414af4:	push   rbp
  414af5:	push   rbx
  414af6:	sub    rsp,0x8
  414afa:	mov    rax,QWORD PTR [rdi+0x30]
  414afe:	cmp    WORD PTR [rax+0xe],0x3
  414b03:	jne    414c02 <flatcc_builder_table_add_offset@@Base+0x112>
  414b09:	cmp    esi,0x7ffc
  414b0f:	mov    r12d,esi
  414b12:	ja     414be3 <flatcc_builder_table_add_offset@@Base+0xf3>
  414b18:	movsxd r13,esi
  414b1b:	mov    rbx,rdi
  414b1e:	add    r13,r13
  414b21:	mov    rdx,r13
  414b24:	add    rdx,QWORD PTR [rdi+0x8]
  414b28:	cmp    WORD PTR [rdx],0x0
  414b2c:	jne    414bc4 <flatcc_builder_table_add_offset@@Base+0xd4>
  414b32:	mov    eax,DWORD PTR [rdi+0x14]
  414b35:	xor    eax,esi
  414b37:	imul   eax,eax,0x9e3779b1
  414b3d:	xor    eax,0x4
  414b40:	imul   eax,eax,0x9e3779b1
  414b46:	mov    DWORD PTR [rdi+0x14],eax
  414b49:	mov    eax,DWORD PTR [rdi+0x20]
  414b4c:	lea    ebp,[rax+0x3]
  414b4f:	and    ebp,0xfffffffc
  414b52:	lea    esi,[rbp+0x4]
  414b55:	cmp    esi,DWORD PTR [rdi+0x24]
  414b58:	mov    DWORD PTR [rdi+0x20],esi
  414b5b:	ja     414ba0 <flatcc_builder_table_add_offset@@Base+0xb0>
  414b5d:	lea    eax,[rbp+0x4]
  414b60:	mov    WORD PTR [rdx],ax
  414b63:	cmp    r12w,WORD PTR [rbx+0x10]
  414b68:	jae    414b90 <flatcc_builder_table_add_offset@@Base+0xa0>
  414b6a:	mov    rax,QWORD PTR [rbx]
  414b6d:	lea    rdx,[rax+0x2]
  414b71:	mov    QWORD PTR [rbx],rdx
  414b74:	mov    WORD PTR [rax],bp
  414b77:	mov    eax,ebp
  414b79:	add    rax,QWORD PTR [rbx+0x18]
  414b7d:	add    rsp,0x8
  414b81:	pop    rbx
  414b82:	pop    rbp
  414b83:	pop    r12
  414b85:	pop    r13
  414b87:	ret    
  414b88:	nop    DWORD PTR [rax+rax*1+0x0]
  414b90:	lea    esi,[r12+0x1]
  414b95:	mov    WORD PTR [rbx+0x10],si
  414b99:	jmp    414b6a <flatcc_builder_table_add_offset@@Base+0x7a>
  414b9b:	nop    DWORD PTR [rax+rax*1+0x0]
  414ba0:	mov    edx,0xfffc
  414ba5:	call   411320 <test_parse@@Base+0x570>
  414baa:	test   eax,eax
  414bac:	jne    414bc0 <flatcc_builder_table_add_offset@@Base+0xd0>
  414bae:	mov    rdx,r13
  414bb1:	add    rdx,QWORD PTR [rbx+0x8]
  414bb5:	jmp    414b5d <flatcc_builder_table_add_offset@@Base+0x6d>
  414bb7:	nop    WORD PTR [rax+rax*1+0x0]
  414bc0:	xor    eax,eax
  414bc2:	jmp    414b7d <flatcc_builder_table_add_offset@@Base+0x8d>
  414bc4:	lea    rcx,[rip+0x5e35]        # 41aa00 <_IO_stdin_used@@Base+0xa00>
  414bcb:	lea    rsi,[rip+0x5996]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414bd2:	lea    rdi,[rip+0x5d26]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  414bd9:	mov    edx,0x71b
  414bde:	call   4030a0 <__assert_fail@plt>
  414be3:	lea    rcx,[rip+0x5e16]        # 41aa00 <_IO_stdin_used@@Base+0xa00>
  414bea:	lea    rsi,[rip+0x5977]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414bf1:	lea    rdi,[rip+0x5c48]        # 41a840 <_IO_stdin_used@@Base+0x840>
  414bf8:	mov    edx,0x714
  414bfd:	call   4030a0 <__assert_fail@plt>
  414c02:	lea    rcx,[rip+0x5df7]        # 41aa00 <_IO_stdin_used@@Base+0xa00>
  414c09:	lea    rsi,[rip+0x5958]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414c10:	lea    rdi,[rip+0x5b99]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  414c17:	mov    edx,0x713
  414c1c:	call   4030a0 <__assert_fail@plt>
  414c21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414c2c:	nop    DWORD PTR [rax+0x0]

0000000000414c30 <flatcc_builder_table_add_union@@Base>:
  414c30:	push   r13
  414c32:	push   r12
  414c34:	mov    r13,rdx
  414c37:	push   rbp
  414c38:	push   rbx
  414c39:	sar    r13,0x20
  414c3d:	sub    rsp,0x8
  414c41:	mov    rax,QWORD PTR [rdi+0x30]
  414c45:	cmp    WORD PTR [rax+0xe],0x3
  414c4a:	jne    414cc4 <flatcc_builder_table_add_union@@Base+0x94>
  414c4c:	test   dl,dl
  414c4e:	mov    r12,rdi
  414c51:	mov    ebx,esi
  414c53:	mov    rbp,rdx
  414c56:	je     414ca0 <flatcc_builder_table_add_union@@Base+0x70>
  414c58:	test   r13d,r13d
  414c5b:	je     414c6e <flatcc_builder_table_add_union@@Base+0x3e>
  414c5d:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  414c62:	test   rax,rax
  414c65:	je     414d02 <flatcc_builder_table_add_union@@Base+0xd2>
  414c6b:	mov    DWORD PTR [rax],r13d
  414c6e:	lea    esi,[rbx-0x1]
  414c71:	mov    ecx,0x1
  414c76:	mov    edx,0x1
  414c7b:	mov    rdi,r12
  414c7e:	call   414920 <flatcc_builder_table_add@@Base>
  414c83:	test   rax,rax
  414c86:	je     414ce3 <flatcc_builder_table_add_union@@Base+0xb3>
  414c88:	mov    BYTE PTR [rax],bpl
  414c8b:	add    rsp,0x8
  414c8f:	xor    eax,eax
  414c91:	pop    rbx
  414c92:	pop    rbp
  414c93:	pop    r12
  414c95:	pop    r13
  414c97:	ret    
  414c98:	nop    DWORD PTR [rax+rax*1+0x0]
  414ca0:	test   r13d,r13d
  414ca3:	je     414c6e <flatcc_builder_table_add_union@@Base+0x3e>
  414ca5:	lea    rcx,[rip+0x5ee4]        # 41ab90 <_IO_stdin_used@@Base+0xb90>
  414cac:	lea    rsi,[rip+0x58b5]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414cb3:	lea    rdi,[rip+0x5bce]        # 41a888 <_IO_stdin_used@@Base+0x888>
  414cba:	mov    edx,0x5ef
  414cbf:	call   4030a0 <__assert_fail@plt>
  414cc4:	lea    rcx,[rip+0x5ec5]        # 41ab90 <_IO_stdin_used@@Base+0xb90>
  414ccb:	lea    rsi,[rip+0x5896]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414cd2:	lea    rdi,[rip+0x5ad7]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  414cd9:	mov    edx,0x5ee
  414cde:	call   4030a0 <__assert_fail@plt>
  414ce3:	lea    rcx,[rip+0x5ea6]        # 41ab90 <_IO_stdin_used@@Base+0xb90>
  414cea:	lea    rsi,[rip+0x5877]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414cf1:	lea    rdi,[rip+0x5c96]        # 41a98e <_IO_stdin_used@@Base+0x98e>
  414cf8:	mov    edx,0x5f6
  414cfd:	call   4030a0 <__assert_fail@plt>
  414d02:	lea    rcx,[rip+0x5e87]        # 41ab90 <_IO_stdin_used@@Base+0xb90>
  414d09:	lea    rsi,[rip+0x5858]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414d10:	lea    rdi,[rip+0x5c6d]        # 41a984 <_IO_stdin_used@@Base+0x984>
  414d17:	mov    edx,0x5f2
  414d1c:	call   4030a0 <__assert_fail@plt>
  414d21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414d2c:	nop    DWORD PTR [rax+0x0]

0000000000414d30 <flatcc_builder_table_add_union_vector@@Base>:
  414d30:	push   r13
  414d32:	push   r12
  414d34:	push   rbp
  414d35:	push   rbx
  414d36:	mov    rbp,rdx
  414d39:	sar    rbp,0x20
  414d3d:	sub    rsp,0x18
  414d41:	mov    rax,QWORD PTR [rdi+0x30]
  414d45:	cmp    WORD PTR [rax+0xe],0x3
  414d4a:	jne    414dc6 <flatcc_builder_table_add_union_vector@@Base+0x96>
  414d4c:	test   ebp,ebp
  414d4e:	sete   al
  414d51:	test   edx,edx
  414d53:	sete   cl
  414d56:	cmp    cl,al
  414d58:	je     414d80 <flatcc_builder_table_add_union_vector@@Base+0x50>
  414d5a:	test   edx,edx
  414d5c:	setne  dl
  414d5f:	cmp    al,dl
  414d61:	je     414de5 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  414d67:	mov    r12d,0xffffffff
  414d6d:	add    rsp,0x18
  414d71:	mov    eax,r12d
  414d74:	pop    rbx
  414d75:	pop    rbp
  414d76:	pop    r12
  414d78:	pop    r13
  414d7a:	ret    
  414d7b:	nop    DWORD PTR [rax+rax*1+0x0]
  414d80:	xor    r12d,r12d
  414d83:	test   edx,edx
  414d85:	je     414d6d <flatcc_builder_table_add_union_vector@@Base+0x3d>
  414d87:	mov    r13d,esi
  414d8a:	lea    esi,[rsi-0x1]
  414d8d:	mov    QWORD PTR [rsp+0x8],rdx
  414d92:	mov    rbx,rdi
  414d95:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  414d9a:	test   rax,rax
  414d9d:	mov    rdx,QWORD PTR [rsp+0x8]
  414da2:	je     414e23 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  414da4:	mov    DWORD PTR [rax],edx
  414da6:	mov    esi,r13d
  414da9:	mov    rdi,rbx
  414dac:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  414db1:	test   rax,rax
  414db4:	je     414e04 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  414db6:	mov    DWORD PTR [rax],ebp
  414db8:	add    rsp,0x18
  414dbc:	mov    eax,r12d
  414dbf:	pop    rbx
  414dc0:	pop    rbp
  414dc1:	pop    r12
  414dc3:	pop    r13
  414dc5:	ret    
  414dc6:	lea    rcx,[rip+0x5d93]        # 41ab60 <_IO_stdin_used@@Base+0xb60>
  414dcd:	lea    rsi,[rip+0x5794]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414dd4:	lea    rdi,[rip+0x59d5]        # 41a7b0 <_IO_stdin_used@@Base+0x7b0>
  414ddb:	mov    edx,0x600
  414de0:	call   4030a0 <__assert_fail@plt>
  414de5:	lea    rcx,[rip+0x5d74]        # 41ab60 <_IO_stdin_used@@Base+0xb60>
  414dec:	lea    rsi,[rip+0x5775]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414df3:	lea    rdi,[rip+0x5ab6]        # 41a8b0 <_IO_stdin_used@@Base+0x8b0>
  414dfa:	mov    edx,0x601
  414dff:	call   4030a0 <__assert_fail@plt>
  414e04:	lea    rcx,[rip+0x5d55]        # 41ab60 <_IO_stdin_used@@Base+0xb60>
  414e0b:	lea    rsi,[rip+0x5756]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414e12:	lea    rdi,[rip+0x5b6b]        # 41a984 <_IO_stdin_used@@Base+0x984>
  414e19:	mov    edx,0x608
  414e1e:	call   4030a0 <__assert_fail@plt>
  414e23:	lea    rcx,[rip+0x5d36]        # 41ab60 <_IO_stdin_used@@Base+0xb60>
  414e2a:	lea    rsi,[rip+0x5737]        # 41a568 <_IO_stdin_used@@Base+0x568>
  414e31:	lea    rdi,[rip+0x5b4c]        # 41a984 <_IO_stdin_used@@Base+0x984>
  414e38:	mov    edx,0x604
  414e3d:	call   4030a0 <__assert_fail@plt>
  414e42:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414e4d:	nop    DWORD PTR [rax]

0000000000414e50 <flatcc_builder_push_buffer_alignment@@Base>:
  414e50:	mov    edx,0x4
  414e55:	movzx  eax,WORD PTR [rdi+0xe8]
  414e5c:	mov    WORD PTR [rdi+0xe8],dx
  414e63:	ret    
  414e64:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414e6f:	nop

0000000000414e70 <flatcc_builder_pop_buffer_alignment@@Base>:
  414e70:	cmp    si,WORD PTR [rdi+0xe8]
  414e77:	jbe    414e80 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  414e79:	mov    WORD PTR [rdi+0xe8],si
  414e80:	repz ret 
  414e82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414e8d:	nop    DWORD PTR [rax]

0000000000414e90 <flatcc_builder_get_buffer_alignment@@Base>:
  414e90:	movzx  eax,WORD PTR [rdi+0xe8]
  414e97:	ret    
  414e98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414ea0 <flatcc_builder_set_vtable_clustering@@Base>:
  414ea0:	xor    eax,eax
  414ea2:	test   esi,esi
  414ea4:	sete   al
  414ea7:	mov    DWORD PTR [rdi+0x124],eax
  414ead:	ret    
  414eae:	xchg   ax,ax

0000000000414eb0 <flatcc_builder_set_block_align@@Base>:
  414eb0:	mov    WORD PTR [rdi+0xec],si
  414eb7:	ret    
  414eb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414ec0 <flatcc_builder_get_level@@Base>:
  414ec0:	mov    eax,DWORD PTR [rdi+0x104]
  414ec6:	ret    
  414ec7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414ed0 <flatcc_builder_set_max_level@@Base>:
  414ed0:	cmp    esi,DWORD PTR [rdi+0x108]
  414ed6:	mov    DWORD PTR [rdi+0x120],esi
  414edc:	jle    414ee4 <flatcc_builder_set_max_level@@Base+0x14>
  414ede:	mov    DWORD PTR [rdi+0x108],esi
  414ee4:	repz ret 
  414ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000414ef0 <flatcc_builder_get_buffer_size@@Base>:
  414ef0:	mov    eax,DWORD PTR [rdi+0xf4]
  414ef6:	sub    eax,DWORD PTR [rdi+0xf0]
  414efc:	cdqe   
  414efe:	ret    
  414eff:	nop

0000000000414f00 <flatcc_builder_get_buffer_start@@Base>:
  414f00:	mov    eax,DWORD PTR [rdi+0xf0]
  414f06:	ret    
  414f07:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414f10 <flatcc_builder_get_buffer_end@@Base>:
  414f10:	mov    eax,DWORD PTR [rdi+0xf4]
  414f16:	ret    
  414f17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000414f20 <flatcc_builder_set_vtable_cache_limit@@Base>:
  414f20:	mov    QWORD PTR [rdi+0x118],rsi
  414f27:	ret    
  414f28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414f30 <flatcc_builder_set_identifier@@Base>:
  414f30:	test   rsi,rsi
  414f33:	je     414f40 <flatcc_builder_set_identifier@@Base+0x10>
  414f35:	mov    eax,DWORD PTR [rsi]
  414f37:	mov    DWORD PTR [rdi+0x110],eax
  414f3d:	ret    
  414f3e:	xchg   ax,ax
  414f40:	mov    rsi,0x41b060
  414f47:	mov    eax,DWORD PTR [rsi]
  414f49:	mov    DWORD PTR [rdi+0x110],eax
  414f4f:	ret    

0000000000414f50 <flatcc_builder_get_type@@Base>:
  414f50:	mov    rax,QWORD PTR [rdi+0x30]
  414f54:	test   rax,rax
  414f57:	je     414f60 <flatcc_builder_get_type@@Base+0x10>
  414f59:	movzx  eax,WORD PTR [rax+0xe]
  414f5d:	ret    
  414f5e:	xchg   ax,ax
  414f60:	xor    eax,eax
  414f62:	ret    
  414f63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414f6e:	xchg   ax,ax

0000000000414f70 <flatcc_builder_get_type_at@@Base>:
  414f70:	test   esi,esi
  414f72:	jle    414fa0 <flatcc_builder_get_type_at@@Base+0x30>
  414f74:	mov    edx,DWORD PTR [rdi+0x104]
  414f7a:	xor    eax,eax
  414f7c:	cmp    esi,edx
  414f7e:	jg     414fa2 <flatcc_builder_get_type_at@@Base+0x32>
  414f80:	sub    esi,edx
  414f82:	mov    rdx,QWORD PTR [rdi+0x30]
  414f86:	movsxd rsi,esi
  414f89:	lea    rax,[rsi+rsi*8]
  414f8d:	lea    rax,[rdx+rax*4]
  414f91:	movzx  eax,WORD PTR [rax+0xe]
  414f95:	ret    
  414f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  414fa0:	xor    eax,eax
  414fa2:	repz ret 
  414fa4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  414faf:	nop

0000000000414fb0 <flatcc_builder_get_direct_buffer@@Base>:
  414fb0:	mov    eax,DWORD PTR [rdi+0x128]
  414fb6:	test   eax,eax
  414fb8:	je     414fca <flatcc_builder_get_direct_buffer@@Base+0x1a>
  414fba:	mov    rax,QWORD PTR [rdi+0x138]
  414fc1:	cmp    QWORD PTR [rdi+0x130],rax
  414fc8:	je     414fe0 <flatcc_builder_get_direct_buffer@@Base+0x30>
  414fca:	test   rsi,rsi
  414fcd:	jne    414fd2 <flatcc_builder_get_direct_buffer@@Base+0x22>
  414fcf:	xor    eax,eax
  414fd1:	ret    
  414fd2:	mov    QWORD PTR [rsi],0x0
  414fd9:	xor    eax,eax
  414fdb:	ret    
  414fdc:	nop    DWORD PTR [rax+0x0]
  414fe0:	test   rsi,rsi
  414fe3:	je     414fef <flatcc_builder_get_direct_buffer@@Base+0x3f>
  414fe5:	mov    rax,QWORD PTR [rdi+0x160]
  414fec:	mov    QWORD PTR [rsi],rax
  414fef:	mov    rax,QWORD PTR [rdi+0x140]
  414ff6:	ret    
  414ff7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415000 <flatcc_builder_copy_buffer@@Base>:
  415000:	mov    eax,DWORD PTR [rdi+0x128]
  415006:	test   eax,eax
  415008:	je     415028 <flatcc_builder_copy_buffer@@Base+0x28>
  41500a:	sub    rsp,0x8
  41500e:	add    rdi,0x130
  415015:	call   415800 <flatcc_emitter_copy_buffer@@Base>
  41501a:	test   rax,rax
  41501d:	je     41502b <flatcc_builder_copy_buffer@@Base+0x2b>
  41501f:	add    rsp,0x8
  415023:	ret    
  415024:	nop    DWORD PTR [rax+0x0]
  415028:	xor    eax,eax
  41502a:	ret    
  41502b:	lea    rcx,[rip+0x59ae]        # 41a9e0 <_IO_stdin_used@@Base+0x9e0>
  415032:	lea    rsi,[rip+0x552f]        # 41a568 <_IO_stdin_used@@Base+0x568>
  415039:	lea    rdi,[rip+0x595a]        # 41a99a <_IO_stdin_used@@Base+0x99a>
  415040:	mov    edx,0x786
  415045:	call   4030a0 <__assert_fail@plt>
  41504a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415050 <flatcc_builder_finalize_buffer@@Base>:
  415050:	push   r12
  415052:	push   rbp
  415053:	mov    r12,rdi
  415056:	push   rbx
  415057:	mov    rbx,rsi
  41505a:	call   414ef0 <flatcc_builder_get_buffer_size@@Base>
  41505f:	test   rbx,rbx
  415062:	mov    rbp,rax
  415065:	je     41506a <flatcc_builder_finalize_buffer@@Base+0x1a>
  415067:	mov    QWORD PTR [rbx],rax
  41506a:	mov    rdi,rbp
  41506d:	call   403100 <malloc@plt>
  415072:	test   rax,rax
  415075:	mov    rbx,rax
  415078:	je     415095 <flatcc_builder_finalize_buffer@@Base+0x45>
  41507a:	mov    rdx,rbp
  41507d:	mov    rsi,rax
  415080:	mov    rdi,r12
  415083:	call   415000 <flatcc_builder_copy_buffer@@Base>
  415088:	test   rax,rax
  41508b:	je     4150b4 <flatcc_builder_finalize_buffer@@Base+0x64>
  41508d:	mov    rax,rbx
  415090:	pop    rbx
  415091:	pop    rbp
  415092:	pop    r12
  415094:	ret    
  415095:	lea    rcx,[rip+0x5924]        # 41a9c0 <_IO_stdin_used@@Base+0x9c0>
  41509c:	lea    rsi,[rip+0x54c5]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4150a3:	lea    rdi,[rip+0x5855]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4150aa:	mov    edx,0x798
  4150af:	call   4030a0 <__assert_fail@plt>
  4150b4:	lea    rcx,[rip+0x5905]        # 41a9c0 <_IO_stdin_used@@Base+0x9c0>
  4150bb:	lea    rsi,[rip+0x54a6]        # 41a568 <_IO_stdin_used@@Base+0x568>
  4150c2:	lea    rdi,[rip+0x5836]        # 41a8ff <_IO_stdin_used@@Base+0x8ff>
  4150c9:	mov    edx,0x79c
  4150ce:	call   4030a0 <__assert_fail@plt>
  4150d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4150de:	xchg   ax,ax

00000000004150e0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4150e0:	push   r13
  4150e2:	push   r12
  4150e4:	mov    r12,rdi
  4150e7:	push   rbp
  4150e8:	push   rbx
  4150e9:	mov    rbp,rsi
  4150ec:	sub    rsp,0x18
  4150f0:	mov    rax,QWORD PTR fs:0x28
  4150f9:	mov    QWORD PTR [rsp+0x8],rax
  4150fe:	xor    eax,eax
  415100:	call   414ef0 <flatcc_builder_get_buffer_size@@Base>
  415105:	test   rbp,rbp
  415108:	mov    rbx,rax
  41510b:	je     415111 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  41510d:	mov    QWORD PTR [rbp+0x0],rax
  415111:	mov    rdi,r12
  415114:	call   414e90 <flatcc_builder_get_buffer_alignment@@Base>
  415119:	movzx  eax,ax
  41511c:	mov    esi,0x8
  415121:	mov    rdi,rsp
  415124:	lea    rdx,[rbx+rax*1-0x1]
  415129:	mov    rbx,rax
  41512c:	mov    QWORD PTR [rsp],0x0
  415134:	neg    rbx
  415137:	and    rbx,rdx
  41513a:	cmp    rax,0x8
  41513e:	cmovae rsi,rax
  415142:	mov    rdx,rbx
  415145:	call   403160 <posix_memalign@plt>
  41514a:	test   eax,eax
  41514c:	je     415190 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  41514e:	mov    rdi,QWORD PTR [rsp]
  415152:	test   rdi,rdi
  415155:	je     41515c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  415157:	call   403030 <free@plt>
  41515c:	test   rbp,rbp
  41515f:	je     4151b6 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  415161:	mov    QWORD PTR [rbp+0x0],0x0
  415169:	xor    r13d,r13d
  41516c:	mov    rcx,QWORD PTR [rsp+0x8]
  415171:	xor    rcx,QWORD PTR fs:0x28
  41517a:	mov    rax,r13
  41517d:	jne    4151b1 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  41517f:	add    rsp,0x18
  415183:	pop    rbx
  415184:	pop    rbp
  415185:	pop    r12
  415187:	pop    r13
  415189:	ret    
  41518a:	nop    WORD PTR [rax+rax*1+0x0]
  415190:	mov    r13,QWORD PTR [rsp]
  415194:	test   r13,r13
  415197:	je     41515c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  415199:	mov    rdx,rbx
  41519c:	mov    rsi,r13
  41519f:	mov    rdi,r12
  4151a2:	call   415000 <flatcc_builder_copy_buffer@@Base>
  4151a7:	test   rax,rax
  4151aa:	jne    41516c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  4151ac:	mov    rdi,r13
  4151af:	jmp    415157 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  4151b1:	call   403080 <__stack_chk_fail@plt>
  4151b6:	xor    r13d,r13d
  4151b9:	jmp    41516c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  4151bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004151c0 <flatcc_builder_aligned_alloc@@Base>:
  4151c0:	sub    rsp,0x18
  4151c4:	mov    rdx,rsi
  4151c7:	mov    esi,0x8
  4151cc:	mov    rax,QWORD PTR fs:0x28
  4151d5:	mov    QWORD PTR [rsp+0x8],rax
  4151da:	xor    eax,eax
  4151dc:	cmp    rdi,0x8
  4151e0:	mov    QWORD PTR [rsp],0x0
  4151e8:	cmovae rsi,rdi
  4151ec:	mov    rdi,rsp
  4151ef:	call   403160 <posix_memalign@plt>
  4151f4:	test   eax,eax
  4151f6:	mov    rax,QWORD PTR [rsp]
  4151fa:	je     41520b <flatcc_builder_aligned_alloc@@Base+0x4b>
  4151fc:	test   rax,rax
  4151ff:	je     41520b <flatcc_builder_aligned_alloc@@Base+0x4b>
  415201:	mov    rdi,rax
  415204:	call   403030 <free@plt>
  415209:	xor    eax,eax
  41520b:	mov    rcx,QWORD PTR [rsp+0x8]
  415210:	xor    rcx,QWORD PTR fs:0x28
  415219:	jne    415220 <flatcc_builder_aligned_alloc@@Base+0x60>
  41521b:	add    rsp,0x18
  41521f:	ret    
  415220:	call   403080 <__stack_chk_fail@plt>
  415225:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000415230 <flatcc_builder_aligned_free@@Base>:
  415230:	jmp    403030 <free@plt>
  415235:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000415240 <flatcc_builder_get_emit_context@@Base>:
  415240:	mov    rax,QWORD PTR [rdi+0x38]
  415244:	ret    
  415245:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41524f:	nop

0000000000415250 <flatcc_emitter_recycle_page@@Base>:
  415250:	mov    rax,QWORD PTR [rdi]
  415253:	cmp    rax,rsi
  415256:	je     4152b0 <flatcc_emitter_recycle_page@@Base+0x60>
  415258:	cmp    rsi,QWORD PTR [rdi+0x8]
  41525c:	je     4152b0 <flatcc_emitter_recycle_page@@Base+0x60>
  41525e:	mov    rdx,QWORD PTR [rsi+0xb80]
  415265:	mov    rcx,QWORD PTR [rsi+0xb88]
  41526c:	mov    QWORD PTR [rdx+0xb88],rcx
  415273:	mov    rcx,QWORD PTR [rsi+0xb88]
  41527a:	mov    QWORD PTR [rcx+0xb80],rdx
  415281:	mov    rdx,QWORD PTR [rax+0xb88]
  415288:	mov    QWORD PTR [rsi+0xb80],rax
  41528f:	mov    QWORD PTR [rsi+0xb88],rdx
  415296:	mov    QWORD PTR [rdx+0xb80],rsi
  41529d:	mov    rax,QWORD PTR [rsi+0xb80]
  4152a4:	mov    QWORD PTR [rax+0xb88],rsi
  4152ab:	xor    eax,eax
  4152ad:	ret    
  4152ae:	xchg   ax,ax
  4152b0:	mov    eax,0xffffffff
  4152b5:	ret    
  4152b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004152c0 <flatcc_emitter_reset@@Base>:
  4152c0:	mov    rax,QWORD PTR [rdi]
  4152c3:	test   rax,rax
  4152c6:	je     41538d <flatcc_emitter_reset@@Base+0xcd>
  4152cc:	lea    rdx,[rax+0x5c0]
  4152d3:	mov    QWORD PTR [rdi+0x8],rax
  4152d7:	mov    QWORD PTR [rdi+0x18],0x5c0
  4152df:	mov    QWORD PTR [rdi+0x28],0x5c0
  4152e7:	mov    rcx,QWORD PTR [rdi+0x30]
  4152eb:	mov    QWORD PTR [rdi+0x10],rdx
  4152ef:	mov    QWORD PTR [rdi+0x20],rdx
  4152f3:	mov    rdx,QWORD PTR [rdi+0x40]
  4152f7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  415301:	test   rdx,rdx
  415304:	je     415390 <flatcc_emitter_reset@@Base+0xd0>
  41530a:	lea    rdx,[rdx+rdx*2]
  41530e:	shr    rcx,0x2
  415312:	mov    QWORD PTR [rdi+0x30],0x0
  41531a:	shr    rdx,0x2
  41531e:	add    rdx,rcx
  415321:	mov    QWORD PTR [rdi+0x40],rdx
  415325:	add    rdx,rdx
  415328:	cmp    QWORD PTR [rdi+0x38],rdx
  41532c:	jbe    41538d <flatcc_emitter_reset@@Base+0xcd>
  41532e:	push   rbx
  41532f:	mov    rbx,rdi
  415332:	mov    rdi,QWORD PTR [rax+0xb80]
  415339:	cmp    rax,rdi
  41533c:	jne    415350 <flatcc_emitter_reset@@Base+0x90>
  41533e:	jmp    41538c <flatcc_emitter_reset@@Base+0xcc>
  415340:	mov    rax,QWORD PTR [rbx+0x8]
  415344:	mov    rdi,QWORD PTR [rax+0xb80]
  41534b:	cmp    rdi,QWORD PTR [rbx]
  41534e:	je     41538c <flatcc_emitter_reset@@Base+0xcc>
  415350:	mov    rdx,QWORD PTR [rdi+0xb80]
  415357:	mov    QWORD PTR [rax+0xb80],rdx
  41535e:	mov    rdx,QWORD PTR [rdi+0xb80]
  415365:	mov    QWORD PTR [rdx+0xb88],rax
  41536c:	call   403030 <free@plt>
  415371:	mov    rsi,QWORD PTR [rbx+0x40]
  415375:	mov    rax,QWORD PTR [rbx+0x38]
  415379:	lea    rdx,[rsi+rsi*1]
  41537d:	sub    rax,0xb80
  415383:	mov    QWORD PTR [rbx+0x38],rax
  415387:	cmp    rdx,rax
  41538a:	jb     415340 <flatcc_emitter_reset@@Base+0x80>
  41538c:	pop    rbx
  41538d:	repz ret 
  41538f:	nop
  415390:	mov    rdx,rcx
  415393:	jmp    41530a <flatcc_emitter_reset@@Base+0x4a>
  415398:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004153a0 <flatcc_emitter_clear@@Base>:
  4153a0:	mov    rax,QWORD PTR [rdi]
  4153a3:	test   rax,rax
  4153a6:	je     415427 <flatcc_emitter_clear@@Base+0x87>
  4153a8:	push   rbp
  4153a9:	push   rbx
  4153aa:	mov    rbp,rdi
  4153ad:	sub    rsp,0x8
  4153b1:	mov    rdx,QWORD PTR [rax+0xb88]
  4153b8:	mov    QWORD PTR [rdx+0xb80],0x0
  4153c3:	mov    rbx,QWORD PTR [rax+0xb80]
  4153ca:	test   rbx,rbx
  4153cd:	jne    4153db <flatcc_emitter_clear@@Base+0x3b>
  4153cf:	jmp    415429 <flatcc_emitter_clear@@Base+0x89>
  4153d1:	nop    DWORD PTR [rax+0x0]
  4153d8:	mov    rbx,rax
  4153db:	mov    rdi,QWORD PTR [rbx+0xb88]
  4153e2:	call   403030 <free@plt>
  4153e7:	mov    rax,QWORD PTR [rbx+0xb80]
  4153ee:	test   rax,rax
  4153f1:	jne    4153d8 <flatcc_emitter_clear@@Base+0x38>
  4153f3:	mov    rdi,rbx
  4153f6:	call   403030 <free@plt>
  4153fb:	lea    rdi,[rbp+0x8]
  4153ff:	mov    QWORD PTR [rbp+0x0],0x0
  415407:	mov    QWORD PTR [rbp+0x40],0x0
  41540f:	xor    eax,eax
  415411:	and    rdi,0xfffffffffffffff8
  415415:	sub    rbp,rdi
  415418:	lea    ecx,[rbp+0x48]
  41541b:	shr    ecx,0x3
  41541e:	rep stos QWORD PTR es:[rdi],rax
  415421:	add    rsp,0x8
  415425:	pop    rbx
  415426:	pop    rbp
  415427:	repz ret 
  415429:	mov    rbx,rax
  41542c:	jmp    4153f3 <flatcc_emitter_clear@@Base+0x53>
  41542e:	xchg   ax,ax

0000000000415430 <flatcc_emitter@@Base>:
  415430:	push   r15
  415432:	push   r14
  415434:	mov    r14,rsi
  415437:	push   r13
  415439:	push   r12
  41543b:	push   rbp
  41543c:	push   rbx
  41543d:	mov    rbx,rdi
  415440:	sub    rsp,0x18
  415444:	add    QWORD PTR [rdi+0x30],r8
  415448:	test   ecx,ecx
  41544a:	js     41563e <flatcc_emitter@@Base+0x20e>
  415450:	mov    rax,QWORD PTR [rdi+0x28]
  415454:	cmp    r8,rax
  415457:	jbe    4154e4 <flatcc_emitter@@Base+0xb4>
  41545d:	test   edx,edx
  41545f:	je     4154d3 <flatcc_emitter@@Base+0xa3>
  415461:	lea    r15d,[rdx-0x1]
  415465:	add    r15,0x1
  415469:	shl    r15,0x4
  41546d:	lea    rax,[rsi+r15*1]
  415471:	mov    QWORD PTR [rsp+0x8],rax
  415476:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415480:	mov    r12,QWORD PTR [r14+0x8]
  415484:	mov    r13,QWORD PTR [r14]
  415487:	test   r12,r12
  41548a:	je     4154c8 <flatcc_emitter@@Base+0x98>
  41548c:	nop    DWORD PTR [rax+0x0]
  415490:	mov    rbp,QWORD PTR [rbx+0x28]
  415494:	cmp    rbp,r12
  415497:	jae    415538 <flatcc_emitter@@Base+0x108>
  41549d:	test   rbp,rbp
  4154a0:	je     415548 <flatcc_emitter@@Base+0x118>
  4154a6:	sub    r12,rbp
  4154a9:	mov    rdi,QWORD PTR [rbx+0x20]
  4154ad:	mov    rsi,r13
  4154b0:	mov    rdx,rbp
  4154b3:	add    r13,rbp
  4154b6:	call   4030f0 <memcpy@plt>
  4154bb:	add    QWORD PTR [rbx+0x20],rbp
  4154bf:	sub    QWORD PTR [rbx+0x28],rbp
  4154c3:	test   r12,r12
  4154c6:	jne    415490 <flatcc_emitter@@Base+0x60>
  4154c8:	add    r14,0x10
  4154cc:	cmp    r14,QWORD PTR [rsp+0x8]
  4154d1:	jne    415480 <flatcc_emitter@@Base+0x50>
  4154d3:	add    rsp,0x18
  4154d7:	xor    eax,eax
  4154d9:	pop    rbx
  4154da:	pop    rbp
  4154db:	pop    r12
  4154dd:	pop    r13
  4154df:	pop    r14
  4154e1:	pop    r15
  4154e3:	ret    
  4154e4:	mov    rcx,QWORD PTR [rdi+0x20]
  4154e8:	sub    rax,r8
  4154eb:	mov    QWORD PTR [rdi+0x28],rax
  4154ef:	lea    rsi,[rcx+r8*1]
  4154f3:	mov    QWORD PTR [rdi+0x20],rsi
  4154f7:	test   edx,edx
  4154f9:	je     4154d3 <flatcc_emitter@@Base+0xa3>
  4154fb:	lea    ebx,[rdx-0x1]
  4154fe:	add    rbx,0x1
  415502:	shl    rbx,0x4
  415506:	add    rbx,r14
  415509:	nop    DWORD PTR [rax+0x0]
  415510:	mov    rsi,QWORD PTR [r14]
  415513:	mov    rdx,QWORD PTR [r14+0x8]
  415517:	mov    rdi,rcx
  41551a:	add    r14,0x10
  41551e:	call   4030f0 <memcpy@plt>
  415523:	mov    rcx,rax
  415526:	add    rcx,QWORD PTR [r14-0x8]
  41552a:	cmp    rbx,r14
  41552d:	jne    415510 <flatcc_emitter@@Base+0xe0>
  41552f:	jmp    4154d3 <flatcc_emitter@@Base+0xa3>
  415531:	nop    DWORD PTR [rax+0x0]
  415538:	mov    rbp,r12
  41553b:	xor    r12d,r12d
  41553e:	jmp    4154a9 <flatcc_emitter@@Base+0x79>
  415543:	nop    DWORD PTR [rax+rax*1+0x0]
  415548:	mov    r15,QWORD PTR [rbx+0x8]
  41554c:	test   r15,r15
  41554f:	je     4155d0 <flatcc_emitter@@Base+0x1a0>
  415551:	mov    rbp,QWORD PTR [r15+0xb80]
  415558:	cmp    rbp,QWORD PTR [rbx]
  41555b:	je     415590 <flatcc_emitter@@Base+0x160>
  41555d:	mov    QWORD PTR [rbx+0x8],rbp
  415561:	mov    rax,QWORD PTR [rbp+0xb88]
  415568:	mov    QWORD PTR [rbx+0x20],rbp
  41556c:	mov    QWORD PTR [rbx+0x28],0xb80
  415574:	mov    eax,DWORD PTR [rax+0xb90]
  41557a:	add    eax,0xb80
  41557f:	mov    DWORD PTR [rbp+0xb90],eax
  415585:	jmp    415490 <flatcc_emitter@@Base+0x60>
  41558a:	nop    WORD PTR [rax+rax*1+0x0]
  415590:	mov    edi,0xb98
  415595:	call   403100 <malloc@plt>
  41559a:	test   rax,rax
  41559d:	je     4155df <flatcc_emitter@@Base+0x1af>
  41559f:	mov    QWORD PTR [rax+0xb80],rbp
  4155a6:	add    QWORD PTR [rbx+0x38],0xb80
  4155ae:	mov    QWORD PTR [rax+0xb88],r15
  4155b5:	mov    QWORD PTR [rbp+0xb88],rax
  4155bc:	mov    rbp,rax
  4155bf:	mov    QWORD PTR [r15+0xb80],rax
  4155c6:	mov    QWORD PTR [rbx+0x8],rax
  4155ca:	jmp    415561 <flatcc_emitter@@Base+0x131>
  4155cc:	nop    DWORD PTR [rax+0x0]
  4155d0:	mov    edi,0xb98
  4155d5:	call   403100 <malloc@plt>
  4155da:	test   rax,rax
  4155dd:	jne    4155f3 <flatcc_emitter@@Base+0x1c3>
  4155df:	add    rsp,0x18
  4155e3:	mov    eax,0xffffffff
  4155e8:	pop    rbx
  4155e9:	pop    rbp
  4155ea:	pop    r12
  4155ec:	pop    r13
  4155ee:	pop    r14
  4155f0:	pop    r15
  4155f2:	ret    
  4155f3:	lea    rdx,[rax+0x5c0]
  4155fa:	add    QWORD PTR [rbx+0x38],0xb80
  415602:	mov    QWORD PTR [rbx],rax
  415605:	mov    QWORD PTR [rbx+0x8],rax
  415609:	mov    QWORD PTR [rax+0xb80],rax
  415610:	mov    QWORD PTR [rax+0xb88],rax
  415617:	mov    QWORD PTR [rbx+0x10],rdx
  41561b:	mov    QWORD PTR [rbx+0x20],rdx
  41561f:	mov    QWORD PTR [rbx+0x18],0x5c0
  415627:	mov    QWORD PTR [rbx+0x28],0x5c0
  41562f:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  415639:	jmp    415490 <flatcc_emitter@@Base+0x60>
  41563e:	mov    rax,QWORD PTR [rdi+0x18]
  415642:	cmp    r8,rax
  415645:	jbe    4156dc <flatcc_emitter@@Base+0x2ac>
  41564b:	movsxd rax,edx
  41564e:	shl    rax,0x4
  415652:	add    r14,rax
  415655:	mov    eax,edx
  415657:	shl    rax,0x4
  41565b:	mov    rcx,r14
  41565e:	sub    rcx,rax
  415661:	mov    QWORD PTR [rsp+0x8],rcx
  415666:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415670:	cmp    r14,QWORD PTR [rsp+0x8]
  415675:	je     4154d3 <flatcc_emitter@@Base+0xa3>
  41567b:	sub    r14,0x10
  41567f:	mov    rbp,QWORD PTR [r14+0x8]
  415683:	mov    r12,rbp
  415686:	add    r12,QWORD PTR [r14]
  415689:	test   rbp,rbp
  41568c:	je     415670 <flatcc_emitter@@Base+0x240>
  41568e:	mov    rdx,QWORD PTR [rbx+0x18]
  415692:	cmp    rdx,rbp
  415695:	jae    4156cf <flatcc_emitter@@Base+0x29f>
  415697:	test   rdx,rdx
  41569a:	je     4156f8 <flatcc_emitter@@Base+0x2c8>
  41569c:	sub    rbp,rdx
  41569f:	xor    ecx,ecx
  4156a1:	mov    rax,rdx
  4156a4:	mov    QWORD PTR [rbx+0x18],rcx
  4156a8:	neg    rax
  4156ab:	mov    rdi,rax
  4156ae:	add    rdi,QWORD PTR [rbx+0x10]
  4156b2:	add    r12,rax
  4156b5:	mov    rsi,r12
  4156b8:	mov    QWORD PTR [rbx+0x10],rdi
  4156bc:	call   4030f0 <memcpy@plt>
  4156c1:	test   rbp,rbp
  4156c4:	je     415670 <flatcc_emitter@@Base+0x240>
  4156c6:	mov    rdx,QWORD PTR [rbx+0x18]
  4156ca:	cmp    rdx,rbp
  4156cd:	jb     415697 <flatcc_emitter@@Base+0x267>
  4156cf:	mov    rcx,rdx
  4156d2:	mov    rdx,rbp
  4156d5:	sub    rcx,rbp
  4156d8:	xor    ebp,ebp
  4156da:	jmp    4156a1 <flatcc_emitter@@Base+0x271>
  4156dc:	mov    rcx,QWORD PTR [rdi+0x10]
  4156e0:	sub    rax,r8
  4156e3:	mov    QWORD PTR [rdi+0x18],rax
  4156e7:	sub    rcx,r8
  4156ea:	mov    QWORD PTR [rdi+0x10],rcx
  4156ee:	jmp    4154f7 <flatcc_emitter@@Base+0xc7>
  4156f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4156f8:	mov    r13,QWORD PTR [rbx]
  4156fb:	test   r13,r13
  4156fe:	je     41579f <flatcc_emitter@@Base+0x36f>
  415704:	mov    r15,QWORD PTR [r13+0xb88]
  41570b:	cmp    r15,QWORD PTR [rbx+0x8]
  41570f:	je     415760 <flatcc_emitter@@Base+0x330>
  415711:	mov    eax,DWORD PTR [r13+0xb90]
  415718:	sub    eax,0xb80
  41571d:	mov    DWORD PTR [r15+0xb90],eax
  415724:	mov    QWORD PTR [rbx],r15
  415727:	lea    rax,[r15+0xb80]
  41572e:	mov    QWORD PTR [rbx+0x18],0xb80
  415736:	mov    QWORD PTR [rbx+0x10],rax
  41573a:	mov    rax,QWORD PTR [r15+0xb80]
  415741:	mov    eax,DWORD PTR [rax+0xb90]
  415747:	sub    eax,0xb80
  41574c:	mov    DWORD PTR [r15+0xb90],eax
  415753:	jmp    41568e <flatcc_emitter@@Base+0x25e>
  415758:	nop    DWORD PTR [rax+rax*1+0x0]
  415760:	mov    edi,0xb98
  415765:	call   403100 <malloc@plt>
  41576a:	test   rax,rax
  41576d:	je     4155df <flatcc_emitter@@Base+0x1af>
  415773:	mov    QWORD PTR [rax+0xb88],r15
  41577a:	add    QWORD PTR [rbx+0x38],0xb80
  415782:	mov    QWORD PTR [rax+0xb80],r13
  415789:	mov    QWORD PTR [r13+0xb88],rax
  415790:	mov    QWORD PTR [r15+0xb80],rax
  415797:	mov    QWORD PTR [rbx],rax
  41579a:	mov    r15,rax
  41579d:	jmp    415727 <flatcc_emitter@@Base+0x2f7>
  41579f:	mov    edi,0xb98
  4157a4:	call   403100 <malloc@plt>
  4157a9:	test   rax,rax
  4157ac:	je     4155df <flatcc_emitter@@Base+0x1af>
  4157b2:	lea    rdx,[rax+0x5c0]
  4157b9:	add    QWORD PTR [rbx+0x38],0xb80
  4157c1:	mov    QWORD PTR [rbx],rax
  4157c4:	mov    QWORD PTR [rbx+0x8],rax
  4157c8:	mov    QWORD PTR [rax+0xb80],rax
  4157cf:	mov    QWORD PTR [rax+0xb88],rax
  4157d6:	mov    QWORD PTR [rbx+0x10],rdx
  4157da:	mov    QWORD PTR [rbx+0x20],rdx
  4157de:	mov    QWORD PTR [rbx+0x18],0x5c0
  4157e6:	mov    QWORD PTR [rbx+0x28],0x5c0
  4157ee:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4157f8:	jmp    41568e <flatcc_emitter@@Base+0x25e>
  4157fd:	nop    DWORD PTR [rax]

0000000000415800 <flatcc_emitter_copy_buffer@@Base>:
  415800:	push   rbp
  415801:	push   rbx
  415802:	sub    rsp,0x8
  415806:	mov    r9,QWORD PTR [rdi+0x30]
  41580a:	cmp    r9,rdx
  41580d:	ja     4158d0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  415813:	mov    rax,QWORD PTR [rdi]
  415816:	test   rax,rax
  415819:	je     4158d0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  41581f:	cmp    rax,QWORD PTR [rdi+0x8]
  415823:	mov    rcx,rsi
  415826:	mov    rbx,rdi
  415829:	je     4158e0 <flatcc_emitter_copy_buffer@@Base+0xe0>
  41582f:	mov    r8d,0xb80
  415835:	sub    r8,QWORD PTR [rdi+0x18]
  415839:	mov    rsi,QWORD PTR [rdi+0x10]
  41583d:	mov    rdi,rcx
  415840:	mov    rbp,r8
  415843:	mov    rdx,r8
  415846:	call   4030f0 <memcpy@plt>
  41584b:	add    rbp,rax
  41584e:	mov    rax,QWORD PTR [rbx]
  415851:	mov    rsi,QWORD PTR [rbx+0x8]
  415855:	mov    rax,QWORD PTR [rax+0xb80]
  41585c:	cmp    rax,rsi
  41585f:	je     4158b4 <flatcc_emitter_copy_buffer@@Base+0xb4>
  415861:	nop    DWORD PTR [rax+0x0]
  415868:	mov    rdx,QWORD PTR [rax]
  41586b:	lea    rdi,[rbp+0x8]
  41586f:	mov    rcx,rbp
  415872:	mov    rsi,rax
  415875:	add    rbp,0xb80
  41587c:	and    rdi,0xfffffffffffffff8
  415880:	mov    QWORD PTR [rbp-0xb80],rdx
  415887:	mov    rdx,QWORD PTR [rax+0xb78]
  41588e:	sub    rcx,rdi
  415891:	sub    rsi,rcx
  415894:	add    ecx,0xb80
  41589a:	shr    ecx,0x3
  41589d:	mov    QWORD PTR [rbp-0x8],rdx
  4158a1:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  4158a4:	mov    rax,QWORD PTR [rax+0xb80]
  4158ab:	mov    rsi,QWORD PTR [rbx+0x8]
  4158af:	cmp    rsi,rax
  4158b2:	jne    415868 <flatcc_emitter_copy_buffer@@Base+0x68>
  4158b4:	mov    edx,0xb80
  4158b9:	sub    rdx,QWORD PTR [rbx+0x28]
  4158bd:	mov    rdi,rbp
  4158c0:	call   4030f0 <memcpy@plt>
  4158c5:	add    rsp,0x8
  4158c9:	mov    rax,rbp
  4158cc:	pop    rbx
  4158cd:	pop    rbp
  4158ce:	ret    
  4158cf:	nop
  4158d0:	xor    ebp,ebp
  4158d2:	add    rsp,0x8
  4158d6:	mov    rax,rbp
  4158d9:	pop    rbx
  4158da:	pop    rbp
  4158db:	ret    
  4158dc:	nop    DWORD PTR [rax+0x0]
  4158e0:	mov    rsi,QWORD PTR [rdi+0x10]
  4158e4:	mov    rdx,r9
  4158e7:	mov    rdi,rcx
  4158ea:	call   4030f0 <memcpy@plt>
  4158ef:	mov    rbp,rax
  4158f2:	jmp    4158c5 <flatcc_emitter_copy_buffer@@Base+0xc5>
  4158f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4158fe:	xchg   ax,ax
  415900:	mov    r9,rdi
  415903:	mov    eax,edx
  415905:	mov    edi,edi
  415907:	shr    r9,0x20
  41590b:	mov    r11,rdi
  41590e:	mov    r10,rdx
  415911:	imul   rdi,rax
  415915:	mov    r8,r9
  415918:	shr    r10,0x20
  41591c:	imul   r8,rax
  415920:	mov    QWORD PTR [rsp-0x10],0x0
  415929:	imul   r11,r10
  41592d:	mov    rax,rdi
  415930:	shr    rax,0x20
  415934:	mov    edi,r8d
  415937:	add    rax,rdi
  41593a:	mov    edi,0x80000000
  41593f:	mov    edx,r11d
  415942:	add    rax,rdi
  415945:	shr    r11,0x20
  415949:	imul   r9,r10
  41594d:	add    rax,rdx
  415950:	mov    rdx,r8
  415953:	shr    rdx,0x20
  415957:	shr    rax,0x20
  41595b:	add    rdx,r11
  41595e:	lea    r8,[rdx+r9*1]
  415962:	add    rax,r8
  415965:	mov    QWORD PTR [rsp-0x18],rax
  41596a:	lea    eax,[rsi+rcx*1+0x40]
  41596e:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  415974:	vpinsrd xmm0,xmm1,eax,0x2
  41597a:	vmovaps XMMWORD PTR [rsp-0x18],xmm0
  415980:	mov    rax,QWORD PTR [rsp-0x18]
  415985:	mov    rdx,QWORD PTR [rsp-0x10]
  41598a:	ret    
  41598b:	nop    DWORD PTR [rax+rax*1+0x0]
  415990:	sub    rsp,0x18
  415994:	test   rdi,rdi
  415997:	mov    QWORD PTR [rsp+0x8],rsi
  41599c:	mov    QWORD PTR [rsp],rdi
  4159a0:	mov    ecx,DWORD PTR [rsp+0x8]
  4159a4:	je     415a0c <flatcc_emitter_copy_buffer@@Base+0x20c>
  4159a6:	mov    rax,rdi
  4159a9:	movabs rdi,0xffc0000000000000
  4159b3:	lea    edx,[rcx-0xa]
  4159b6:	test   rax,rdi
  4159b9:	mov    rsi,rdi
  4159bc:	jne    4159ce <flatcc_emitter_copy_buffer@@Base+0x1ce>
  4159be:	xchg   ax,ax
  4159c0:	shl    rax,0xa
  4159c4:	mov    ecx,edx
  4159c6:	sub    edx,0xa
  4159c9:	test   rax,rsi
  4159cc:	je     4159c0 <flatcc_emitter_copy_buffer@@Base+0x1c0>
  4159ce:	test   rax,rax
  4159d1:	js     4159ea <flatcc_emitter_copy_buffer@@Base+0x1ea>
  4159d3:	lea    edx,[rcx-0x1]
  4159d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4159e0:	mov    ecx,edx
  4159e2:	sub    edx,0x1
  4159e5:	add    rax,rax
  4159e8:	jns    4159e0 <flatcc_emitter_copy_buffer@@Base+0x1e0>
  4159ea:	mov    QWORD PTR [rsp],rax
  4159ee:	vmovdqa xmm1,XMMWORD PTR [rsp]
  4159f3:	vpinsrd xmm0,xmm1,ecx,0x2
  4159f9:	vmovaps XMMWORD PTR [rsp],xmm0
  4159fe:	mov    rax,QWORD PTR [rsp]
  415a02:	mov    rdx,QWORD PTR [rsp+0x8]
  415a07:	add    rsp,0x18
  415a0b:	ret    
  415a0c:	lea    rcx,[rip+0x61ed]        # 41bc00 <flatcc_builder_padding_base@@Base+0xba0>
  415a13:	lea    rsi,[rip+0x5846]        # 41b260 <flatcc_builder_padding_base@@Base+0x200>
  415a1a:	lea    rdi,[rip+0x5a23]        # 41b444 <flatcc_builder_padding_base@@Base+0x3e4>
  415a21:	mov    edx,0x104
  415a26:	call   4030a0 <__assert_fail@plt>
  415a2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000415a30 <grisu3_diy_fp_encode_double@@Base>:
  415a30:	push   r15
  415a32:	push   r14
  415a34:	mov    eax,0x4
  415a39:	push   r13
  415a3b:	push   r12
  415a3d:	mov    r12d,ecx
  415a40:	push   rbp
  415a41:	push   rbx
  415a42:	mov    r13d,edx
  415a45:	mov    rbx,r8
  415a48:	sub    rsp,0x18
  415a4c:	test   ecx,ecx
  415a4e:	mov    QWORD PTR [rsp+0x8],0x0
  415a57:	mov    QWORD PTR [rsp],rdi
  415a5b:	cmovne r12d,eax
  415a5f:	vmovdqa xmm2,XMMWORD PTR [rsp]
  415a64:	xor    eax,eax
  415a66:	sub    esi,edx
  415a68:	vpinsrd xmm1,xmm2,eax,0x2
  415a6e:	mov    ebp,esi
  415a70:	vmovaps XMMWORD PTR [rsp],xmm1
  415a75:	mov    rsi,QWORD PTR [rsp+0x8]
  415a7a:	mov    rdi,QWORD PTR [rsp]
  415a7e:	call   415990 <flatcc_emitter_copy_buffer@@Base+0x190>
  415a83:	mov    QWORD PTR [rsp+0x8],rdx
  415a88:	mov    esi,DWORD PTR [rsp+0x8]
  415a8c:	mov    QWORD PTR [rsp],rax
  415a90:	mov    rdi,QWORD PTR [rsp]
  415a94:	mov    ecx,esi
  415a96:	neg    ecx
  415a98:	cmp    ebp,0xfffffea4
  415a9e:	shlx   r12d,r12d,ecx
  415aa3:	jl     415d90 <grisu3_diy_fp_encode_double@@Base+0x360>
  415aa9:	cmp    ebp,0x15b
  415aaf:	jg     415d71 <grisu3_diy_fp_encode_double@@Base+0x341>
  415ab5:	lea    eax,[rbp+0x15c]
  415abb:	lea    rdx,[rip+0x619e]        # 41bc60 <flatcc_builder_padding_base@@Base+0xc00>
  415ac2:	sar    eax,0x3
  415ac5:	cdqe   
  415ac7:	shl    rax,0x4
  415acb:	add    rax,rdx
  415ace:	movsx  edx,WORD PTR [rax+0xa]
  415ad2:	mov    r14,QWORD PTR [rax]
  415ad5:	movsx  r15d,WORD PTR [rax+0x8]
  415ada:	cmp    ebp,edx
  415adc:	jl     415d52 <grisu3_diy_fp_encode_double@@Base+0x322>
  415ae2:	lea    eax,[rdx+0x7]
  415ae5:	cmp    ebp,eax
  415ae7:	jg     415d33 <grisu3_diy_fp_encode_double@@Base+0x303>
  415aed:	cmp    ebp,edx
  415aef:	je     415b41 <grisu3_diy_fp_encode_double@@Base+0x111>
  415af1:	sub    ebp,edx
  415af3:	sub    ebp,0x1
  415af6:	cmp    ebp,0x6
  415af9:	ja     415d14 <grisu3_diy_fp_encode_double@@Base+0x2e4>
  415aff:	lea    rdx,[rip+0xbcfa]        # 421800 <filename@@Base+0x20>
  415b06:	movsxd rax,ebp
  415b09:	mov    rdi,QWORD PTR [rsp]
  415b0d:	shl    rax,0x4
  415b11:	add    rax,rdx
  415b14:	mov    ecx,DWORD PTR [rax+0x8]
  415b17:	mov    rdx,QWORD PTR [rax]
  415b1a:	call   415900 <flatcc_emitter_copy_buffer@@Base+0x100>
  415b1f:	mov    QWORD PTR [rsp+0x8],rdx
  415b24:	lea    edx,[rbp+r13*1+0x1]
  415b29:	mov    QWORD PTR [rsp],rax
  415b2d:	mov    esi,DWORD PTR [rsp+0x8]
  415b31:	lea    eax,[r12+0x4]
  415b36:	mov    rdi,QWORD PTR [rsp]
  415b3a:	cmp    edx,0x14
  415b3d:	cmovge r12d,eax
  415b41:	mov    ecx,r15d
  415b44:	mov    rdx,r14
  415b47:	call   415900 <flatcc_emitter_copy_buffer@@Base+0x100>
  415b4c:	mov    QWORD PTR [rsp],rax
  415b50:	mov    QWORD PTR [rsp+0x8],rdx
  415b55:	xor    eax,eax
  415b57:	mov    rdi,QWORD PTR [rsp]
  415b5b:	mov    rsi,QWORD PTR [rsp+0x8]
  415b60:	test   r12d,r12d
  415b63:	setne  al
  415b66:	mov    ebp,DWORD PTR [rsp+0x8]
  415b6a:	lea    r12d,[r12+rax*1+0x8]
  415b6f:	call   415990 <flatcc_emitter_copy_buffer@@Base+0x190>
  415b74:	mov    QWORD PTR [rsp+0x8],rdx
  415b79:	mov    edx,DWORD PTR [rsp+0x8]
  415b7d:	mov    QWORD PTR [rsp],rax
  415b81:	mov    rax,QWORD PTR [rsp]
  415b85:	lea    ecx,[rdx+0x40]
  415b88:	sub    ebp,edx
  415b8a:	shlx   edi,r12d,ebp
  415b8f:	cmp    ecx,0xfffffc0e
  415b95:	jl     415c80 <grisu3_diy_fp_encode_double@@Base+0x250>
  415b9b:	mov    r8d,0x4
  415ba1:	xor    r9d,r9d
  415ba4:	xor    ecx,ecx
  415ba6:	lea    r10d,[rdi+r8*1]
  415baa:	add    edx,ecx
  415bac:	shrx   rax,rax,rcx
  415bb1:	cmp    ecx,r10d
  415bb4:	jl     415bc7 <grisu3_diy_fp_encode_double@@Base+0x197>
  415bb6:	add    rax,0x1
  415bba:	bt     rax,0x35
  415bbf:	jae    415bc7 <grisu3_diy_fp_encode_double@@Base+0x197>
  415bc1:	shr    rax,1
  415bc4:	add    edx,0x1
  415bc7:	movabs rcx,0x1fffffffffffff
  415bd1:	cmp    rax,rcx
  415bd4:	jbe    415beb <grisu3_diy_fp_encode_double@@Base+0x1bb>
  415bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415be0:	shr    rax,1
  415be3:	add    edx,0x1
  415be6:	cmp    rax,rcx
  415be9:	ja     415be0 <grisu3_diy_fp_encode_double@@Base+0x1b0>
  415beb:	cmp    edx,0xfffffbce
  415bf1:	vxorpd xmm0,xmm0,xmm0
  415bf5:	jl     415c4f <grisu3_diy_fp_encode_double@@Base+0x21f>
  415bf7:	je     415c29 <grisu3_diy_fp_encode_double@@Base+0x1f9>
  415bf9:	bt     rax,0x34
  415bfe:	movabs rsi,0x10000000000000
  415c08:	jae    415c1b <grisu3_diy_fp_encode_double@@Base+0x1eb>
  415c0a:	jmp    415cd7 <grisu3_diy_fp_encode_double@@Base+0x2a7>
  415c0f:	nop
  415c10:	test   rax,rsi
  415c13:	jne    415cc0 <grisu3_diy_fp_encode_double@@Base+0x290>
  415c19:	mov    edx,ecx
  415c1b:	lea    ecx,[rdx-0x1]
  415c1e:	add    rax,rax
  415c21:	cmp    ecx,0xfffffbce
  415c27:	jne    415c10 <grisu3_diy_fp_encode_double@@Base+0x1e0>
  415c29:	movabs rdx,0x10000000000000
  415c33:	and    rdx,rax
  415c36:	movabs rcx,0xfffffffffffff
  415c40:	and    rax,rcx
  415c43:	or     rdx,rax
  415c46:	mov    QWORD PTR [rsp],rdx
  415c4a:	vmovsd xmm0,QWORD PTR [rsp]
  415c4f:	sub    r8d,edi
  415c52:	vmovsd QWORD PTR [rbx],xmm0
  415c56:	cmp    r8d,r9d
  415c59:	setge  al
  415c5c:	cmp    r10d,r9d
  415c5f:	setle  dl
  415c62:	add    rsp,0x18
  415c66:	or     eax,edx
  415c68:	pop    rbx
  415c69:	movzx  eax,al
  415c6c:	pop    rbp
  415c6d:	pop    r12
  415c6f:	pop    r13
  415c71:	pop    r14
  415c73:	pop    r15
  415c75:	ret    
  415c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415c80:	cmp    ecx,0xfffffbcf
  415c86:	jl     415cd0 <grisu3_diy_fp_encode_double@@Base+0x2a0>
  415c88:	lea    esi,[rdx+0x472]
  415c8e:	mov    ecx,0x40
  415c93:	sub    ecx,esi
  415c95:	cmp    ecx,0x3c
  415c98:	jle    415ce6 <grisu3_diy_fp_encode_double@@Base+0x2b6>
  415c9a:	mov    ecx,0x2
  415c9f:	sub    ecx,esi
  415ca1:	sarx   edi,edi,ecx
  415ca6:	shrx   rax,rax,rcx
  415cab:	add    edx,ecx
  415cad:	add    edi,0x9
  415cb0:	xor    r9d,r9d
  415cb3:	xor    r8d,r8d
  415cb6:	mov    ecx,0x3e
  415cbb:	jmp    415ba6 <grisu3_diy_fp_encode_double@@Base+0x176>
  415cc0:	add    edx,0x432
  415cc6:	shl    rdx,0x34
  415cca:	jmp    415c36 <grisu3_diy_fp_encode_double@@Base+0x206>
  415ccf:	nop
  415cd0:	mov    ecx,0x2
  415cd5:	jmp    415ca1 <grisu3_diy_fp_encode_double@@Base+0x271>
  415cd7:	add    edx,0x433
  415cdd:	shl    rdx,0x34
  415ce1:	jmp    415c36 <grisu3_diy_fp_encode_double@@Base+0x206>
  415ce6:	mov    r8d,0x3f
  415cec:	mov    r9d,0x1
  415cf2:	sub    r8d,esi
  415cf5:	mov    esi,r8d
  415cf8:	mov    r8d,0x8
  415cfe:	shlx   r9,r9,rsi
  415d03:	shlx   r8,r8,rsi
  415d08:	and    r9,rax
  415d0b:	shl    r9d,0x3
  415d0f:	jmp    415ba6 <grisu3_diy_fp_encode_double@@Base+0x176>
  415d14:	lea    rcx,[rip+0x5f25]        # 41bc40 <flatcc_builder_padding_base@@Base+0xbe0>
  415d1b:	lea    rsi,[rip+0x55ae]        # 41b2d0 <flatcc_builder_padding_base@@Base+0x270>
  415d22:	lea    rdi,[rip+0x574e]        # 41b477 <flatcc_builder_padding_base@@Base+0x417>
  415d29:	mov    edx,0xb9
  415d2e:	call   4030a0 <__assert_fail@plt>
  415d33:	lea    rcx,[rip+0x5ee6]        # 41bc20 <flatcc_builder_padding_base@@Base+0xbc0>
  415d3a:	lea    rsi,[rip+0x558f]        # 41b2d0 <flatcc_builder_padding_base@@Base+0x270>
  415d41:	lea    rdi,[rip+0x5714]        # 41b45c <flatcc_builder_padding_base@@Base+0x3fc>
  415d48:	mov    edx,0x59
  415d4d:	call   4030a0 <__assert_fail@plt>
  415d52:	lea    rcx,[rip+0x5ec7]        # 41bc20 <flatcc_builder_padding_base@@Base+0xbc0>
  415d59:	lea    rsi,[rip+0x5570]        # 41b2d0 <flatcc_builder_padding_base@@Base+0x270>
  415d60:	lea    rdi,[rip+0x56e6]        # 41b44d <flatcc_builder_padding_base@@Base+0x3ed>
  415d67:	mov    edx,0x58
  415d6c:	call   4030a0 <__assert_fail@plt>
  415d71:	lea    rcx,[rip+0x5ea8]        # 41bc20 <flatcc_builder_padding_base@@Base+0xbc0>
  415d78:	lea    rsi,[rip+0x5551]        # 41b2d0 <flatcc_builder_padding_base@@Base+0x270>
  415d7f:	lea    rdi,[rip+0x55e2]        # 41b368 <flatcc_builder_padding_base@@Base+0x308>
  415d86:	mov    edx,0x51
  415d8b:	call   4030a0 <__assert_fail@plt>
  415d90:	lea    rcx,[rip+0x5e89]        # 41bc20 <flatcc_builder_padding_base@@Base+0xbc0>
  415d97:	lea    rsi,[rip+0x5532]        # 41b2d0 <flatcc_builder_padding_base@@Base+0x270>
  415d9e:	lea    rdi,[rip+0x55a3]        # 41b348 <flatcc_builder_padding_base@@Base+0x2e8>
  415da5:	mov    edx,0x50
  415daa:	call   4030a0 <__assert_fail@plt>
  415daf:	nop
  415db0:	push   r13
  415db2:	push   r12
  415db4:	lea    r8,[rdi+0x3e9]
  415dbb:	push   rbp
  415dbc:	push   rbx
  415dbd:	sub    rsp,0x18
  415dc1:	mov    QWORD PTR [rdx],0x0
  415dc8:	mov    rax,QWORD PTR fs:0x28
  415dd1:	mov    QWORD PTR [rsp+0x8],rax
  415dd6:	xor    eax,eax
  415dd8:	movsxd rax,esi
  415ddb:	cmp    esi,0x3e8
  415de1:	lea    rax,[rdi+rax*1+0x1]
  415de6:	cmovle r8,rax
  415dea:	cmp    r8,rdi
  415ded:	je     4161e0 <grisu3_diy_fp_encode_double@@Base+0x7b0>
  415df3:	movzx  eax,BYTE PTR [rdi]
  415df6:	xor    r13d,r13d
  415df9:	mov    r12,rdx
  415dfc:	mov    rbp,rdi
  415dff:	mov    rdx,rdi
  415e02:	cmp    al,0x2d
  415e04:	je     415f90 <grisu3_diy_fp_encode_double@@Base+0x560>
  415e0a:	cmp    al,0x30
  415e0c:	je     415fab <grisu3_diy_fp_encode_double@@Base+0x57b>
  415e12:	lea    ecx,[rax-0x31]
  415e15:	cmp    cl,0x8
  415e18:	ja     415f20 <grisu3_diy_fp_encode_double@@Base+0x4f0>
  415e1e:	lea    r9,[rdx+0x1]
  415e22:	movsx  edi,al
  415e25:	sub    edi,0x30
  415e28:	cmp    r8,r9
  415e2b:	movsxd rdi,edi
  415e2e:	je     416597 <grisu3_diy_fp_encode_double@@Base+0xb67>
  415e34:	movsx  rax,BYTE PTR [rdx+0x1]
  415e39:	lea    edx,[rax-0x30]
  415e3c:	mov    rbx,r9
  415e3f:	movabs rcx,0x1999999999999998
  415e49:	cmp    dl,0x9
  415e4c:	jbe    415e61 <grisu3_diy_fp_encode_double@@Base+0x431>
  415e4e:	jmp    416590 <grisu3_diy_fp_encode_double@@Base+0xb60>
  415e53:	nop    DWORD PTR [rax+rax*1+0x0]
  415e58:	cmp    rdi,rcx
  415e5b:	ja     415f50 <grisu3_diy_fp_encode_double@@Base+0x520>
  415e61:	add    rbx,0x1
  415e65:	lea    rdx,[rdi+rdi*4]
  415e69:	cmp    r8,rbx
  415e6c:	lea    rdi,[rax+rdx*2-0x30]
  415e71:	je     41652f <grisu3_diy_fp_encode_double@@Base+0xaff>
  415e77:	movsx  rax,BYTE PTR [rbx]
  415e7b:	lea    edx,[rax-0x30]
  415e7e:	cmp    dl,0x9
  415e81:	jbe    415e58 <grisu3_diy_fp_encode_double@@Base+0x428>
  415e83:	mov    edx,ebx
  415e85:	sub    edx,r9d
  415e88:	lea    r9d,[rax-0x31]
  415e8c:	xor    ecx,ecx
  415e8e:	xor    esi,esi
  415e90:	cmp    r9b,0x8
  415e94:	jbe    416003 <grisu3_diy_fp_encode_double@@Base+0x5d3>
  415e9a:	cmp    al,0x2e
  415e9c:	je     4160a0 <grisu3_diy_fp_encode_double@@Base+0x670>
  415ea2:	add    esi,edx
  415ea4:	cmp    r8,rbx
  415ea7:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  415ead:	or     eax,0x20
  415eb0:	cmp    al,0x65
  415eb2:	je     416128 <grisu3_diy_fp_encode_double@@Base+0x6f8>
  415eb8:	test   rdi,rdi
  415ebb:	je     416068 <grisu3_diy_fp_encode_double@@Base+0x638>
  415ec1:	cmp    esi,0xfffffebc
  415ec7:	jl     416068 <grisu3_diy_fp_encode_double@@Base+0x638>
  415ecd:	cmp    esi,0x136
  415ed3:	jg     416090 <grisu3_diy_fp_encode_double@@Base+0x660>
  415ed9:	movabs rax,0x1fffffffffffff
  415ee3:	cmp    rdi,rax
  415ee6:	ja     416200 <grisu3_diy_fp_encode_double@@Base+0x7d0>
  415eec:	cmp    esi,0x16
  415eef:	ja     416200 <grisu3_diy_fp_encode_double@@Base+0x7d0>
  415ef5:	sub    esi,edx
  415ef7:	vxorpd xmm0,xmm0,xmm0
  415efb:	lea    eax,[rsi+0x16]
  415efe:	cmp    eax,0x2c
  415f01:	vcvtsi2sd xmm0,xmm0,rdi
  415f06:	ja     41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  415f0c:	lea    rdx,[rip+0x57ed]        # 41b700 <flatcc_builder_padding_base@@Base+0x6a0>
  415f13:	movsxd rax,DWORD PTR [rdx+rax*4]
  415f17:	add    rax,rdx
  415f1a:	jmp    rax
  415f1c:	nop    DWORD PTR [rax+0x0]
  415f20:	test   r13d,r13d
  415f23:	mov    ebx,0x0
  415f28:	cmove  rbx,rbp
  415f2c:	mov    rcx,QWORD PTR [rsp+0x8]
  415f31:	xor    rcx,QWORD PTR fs:0x28
  415f3a:	mov    rax,rbx
  415f3d:	jne    4165aa <grisu3_diy_fp_encode_double@@Base+0xb7a>
  415f43:	add    rsp,0x18
  415f47:	pop    rbx
  415f48:	pop    rbp
  415f49:	pop    r12
  415f4b:	pop    r13
  415f4d:	ret    
  415f4e:	xchg   ax,ax
  415f50:	xor    edx,edx
  415f52:	cmp    al,0x34
  415f54:	setg   dl
  415f57:	add    rdi,rdx
  415f5a:	mov    edx,ebx
  415f5c:	sub    edx,r9d
  415f5f:	cmp    al,0x30
  415f61:	jne    4165af <grisu3_diy_fp_encode_double@@Base+0xb7f>
  415f67:	xor    esi,esi
  415f69:	jmp    415f77 <grisu3_diy_fp_encode_double@@Base+0x547>
  415f6b:	nop    DWORD PTR [rax+rax*1+0x0]
  415f70:	movzx  eax,BYTE PTR [rbx]
  415f73:	cmp    al,0x30
  415f75:	jne    415ff0 <grisu3_diy_fp_encode_double@@Base+0x5c0>
  415f77:	add    rbx,0x1
  415f7b:	add    esi,0x1
  415f7e:	cmp    r8,rbx
  415f81:	jne    415f70 <grisu3_diy_fp_encode_double@@Base+0x540>
  415f83:	xor    ebx,ebx
  415f85:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  415f87:	nop    WORD PTR [rax+rax*1+0x0]
  415f90:	lea    rdx,[rdi+0x1]
  415f94:	cmp    r8,rdx
  415f97:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  415f99:	movzx  eax,BYTE PTR [rdi+0x1]
  415f9d:	mov    r13d,0x1
  415fa3:	cmp    al,0x30
  415fa5:	jne    415e12 <grisu3_diy_fp_encode_double@@Base+0x3e2>
  415fab:	lea    r9,[rdx+0x1]
  415faf:	cmp    r8,r9
  415fb2:	je     4161f3 <grisu3_diy_fp_encode_double@@Base+0x7c3>
  415fb8:	movsx  rax,BYTE PTR [rdx+0x1]
  415fbd:	mov    edx,eax
  415fbf:	or     edx,0x20
  415fc2:	cmp    dl,0x78
  415fc5:	je     416231 <grisu3_diy_fp_encode_double@@Base+0x801>
  415fcb:	cmp    al,0x30
  415fcd:	jne    415fe5 <grisu3_diy_fp_encode_double@@Base+0x5b5>
  415fcf:	nop
  415fd0:	add    r9,0x1
  415fd4:	cmp    r8,r9
  415fd7:	je     4161f0 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  415fdd:	movsx  rax,BYTE PTR [r9]
  415fe1:	cmp    al,0x30
  415fe3:	je     415fd0 <grisu3_diy_fp_encode_double@@Base+0x5a0>
  415fe5:	xor    edi,edi
  415fe7:	jmp    415e39 <grisu3_diy_fp_encode_double@@Base+0x409>
  415fec:	nop    DWORD PTR [rax+0x0]
  415ff0:	mov    ecx,0x1
  415ff5:	lea    r9d,[rax-0x31]
  415ff9:	cmp    r9b,0x8
  415ffd:	ja     415e9a <grisu3_diy_fp_encode_double@@Base+0x46a>
  416003:	lea    rcx,[rbx+0x1]
  416007:	add    esi,0x1
  41600a:	cmp    r8,rcx
  41600d:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  416013:	movzx  eax,BYTE PTR [rbx+0x1]
  416017:	lea    r9d,[rax-0x30]
  41601b:	cmp    r9b,0x9
  41601f:	jbe    416041 <grisu3_diy_fp_encode_double@@Base+0x611>
  416021:	jmp    416470 <grisu3_diy_fp_encode_double@@Base+0xa40>
  416026:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416030:	movzx  eax,BYTE PTR [rcx]
  416033:	lea    r9d,[rax-0x30]
  416037:	cmp    r9b,0x9
  41603b:	ja     416470 <grisu3_diy_fp_encode_double@@Base+0xa40>
  416041:	add    rcx,0x1
  416045:	add    esi,0x1
  416048:	cmp    r8,rcx
  41604b:	jne    416030 <grisu3_diy_fp_encode_double@@Base+0x600>
  41604d:	xor    ebx,ebx
  41604f:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  416054:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x6184]        # 41c1e0 <flatcc_builder_padding_base@@Base+0x1180>
  41605c:	vmovsd QWORD PTR [r12],xmm0
  416062:	nop    WORD PTR [rax+rax*1+0x0]
  416068:	test   r13d,r13d
  41606b:	je     415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  416071:	vmovsd xmm0,QWORD PTR [r12]
  416077:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x44b1]        # 41a530 <_IO_stdin_used@@Base+0x530>
  41607f:	vmovsd QWORD PTR [r12],xmm0
  416085:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  41608a:	nop    WORD PTR [rax+rax*1+0x0]
  416090:	vmovsd xmm1,QWORD PTR [rip+0x6138]        # 41c1d0 <flatcc_builder_padding_base@@Base+0x1170>
  416098:	vmovsd QWORD PTR [r12],xmm1
  41609e:	jmp    416068 <grisu3_diy_fp_encode_double@@Base+0x638>
  4160a0:	movsx  rax,BYTE PTR [rbx+0x1]
  4160a5:	lea    r9,[rbx+0x1]
  4160a9:	lea    r10d,[rax-0x30]
  4160ad:	cmp    r10b,0x9
  4160b1:	ja     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  4160b7:	cmp    r8,r9
  4160ba:	je     4165a3 <grisu3_diy_fp_encode_double@@Base+0xb73>
  4160c0:	movabs r11,0x1999999999999998
  4160ca:	mov    rbx,r9
  4160cd:	cmp    rdi,r11
  4160d0:	jbe    4160fb <grisu3_diy_fp_encode_double@@Base+0x6cb>
  4160d2:	jmp    41659e <grisu3_diy_fp_encode_double@@Base+0xb6e>
  4160d7:	nop    WORD PTR [rax+rax*1+0x0]
  4160e0:	movsx  rax,BYTE PTR [rbx]
  4160e4:	lea    r10d,[rax-0x30]
  4160e8:	cmp    r10b,0x9
  4160ec:	ja     4164aa <grisu3_diy_fp_encode_double@@Base+0xa7a>
  4160f2:	cmp    rdi,r11
  4160f5:	ja     41653d <grisu3_diy_fp_encode_double@@Base+0xb0d>
  4160fb:	add    rbx,0x1
  4160ff:	lea    rdi,[rdi+rdi*4]
  416103:	sub    esi,0x1
  416106:	cmp    r8,rbx
  416109:	lea    rdi,[rax+rdi*2-0x30]
  41610e:	jne    4160e0 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  416110:	mov    eax,r8d
  416113:	sub    eax,r9d
  416116:	mov    r9,r8
  416119:	add    edx,eax
  41611b:	add    esi,edx
  41611d:	jmp    4161fb <grisu3_diy_fp_encode_double@@Base+0x7cb>
  416122:	nop    WORD PTR [rax+rax*1+0x0]
  416128:	mov    rax,r8
  41612b:	sub    rax,rbx
  41612e:	cmp    rax,0x1
  416132:	jle    415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  416138:	movsx  r9d,BYTE PTR [rbx+0x1]
  41613d:	cmp    r9b,0x2b
  416141:	je     416490 <grisu3_diy_fp_encode_double@@Base+0xa60>
  416147:	cmp    r9b,0x2d
  41614b:	je     416573 <grisu3_diy_fp_encode_double@@Base+0xb43>
  416151:	lea    rax,[rbx+0x1]
  416155:	xor    r10d,r10d
  416158:	lea    r11d,[r9-0x30]
  41615c:	cmp    r11b,0x9
  416160:	ja     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  416166:	lea    rbx,[rax+0x1]
  41616a:	sub    r9d,0x30
  41616e:	cmp    r8,rbx
  416171:	je     4161bf <grisu3_diy_fp_encode_double@@Base+0x78f>
  416173:	movsx  eax,BYTE PTR [rax+0x1]
  416177:	lea    r11d,[rax-0x30]
  41617b:	cmp    r11b,0x9
  41617f:	jbe    4161a1 <grisu3_diy_fp_encode_double@@Base+0x771>
  416181:	jmp    41647d <grisu3_diy_fp_encode_double@@Base+0xa4d>
  416186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416190:	movsx  eax,BYTE PTR [rbx]
  416193:	lea    r11d,[rax-0x30]
  416197:	cmp    r11b,0x9
  41619b:	ja     41647d <grisu3_diy_fp_encode_double@@Base+0xa4d>
  4161a1:	cmp    r9d,0x7fff
  4161a8:	jg     4161b3 <grisu3_diy_fp_encode_double@@Base+0x783>
  4161aa:	lea    r9d,[r9+r9*4]
  4161ae:	lea    r9d,[rax+r9*2-0x30]
  4161b3:	add    rbx,0x1
  4161b7:	cmp    r8,rbx
  4161ba:	jne    416190 <grisu3_diy_fp_encode_double@@Base+0x760>
  4161bc:	mov    rbx,r8
  4161bf:	test   r10d,r10d
  4161c2:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  4161c8:	sub    esi,r9d
  4161cb:	cmp    r8,rbx
  4161ce:	jne    415eb8 <grisu3_diy_fp_encode_double@@Base+0x488>
  4161d4:	xor    ebx,ebx
  4161d6:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4161db:	nop    DWORD PTR [rax+rax*1+0x0]
  4161e0:	mov    rbx,r8
  4161e3:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4161e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4161f0:	mov    r9,r8
  4161f3:	xor    edx,edx
  4161f5:	xor    edi,edi
  4161f7:	mov    esi,edx
  4161f9:	xor    ecx,ecx
  4161fb:	mov    rbx,r9
  4161fe:	jmp    4161cb <grisu3_diy_fp_encode_double@@Base+0x79b>
  416200:	mov    r8,r12
  416203:	call   415a30 <grisu3_diy_fp_encode_double@@Base>
  416208:	test   eax,eax
  41620a:	jne    416068 <grisu3_diy_fp_encode_double@@Base+0x638>
  416210:	mov    rsi,rsp
  416213:	mov    rdi,rbp
  416216:	call   403050 <strtod@plt>
  41621b:	mov    rax,QWORD PTR [rsp]
  41621f:	vmovsd QWORD PTR [r12],xmm0
  416225:	cmp    rbx,rax
  416228:	cmova  rbx,rax
  41622c:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  416231:	mov    rbx,rbp
  416234:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  416239:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5fa7]        # 41c1e8 <flatcc_builder_padding_base@@Base+0x1188>
  416241:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416246:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5fa2]        # 41c1f0 <flatcc_builder_padding_base@@Base+0x1190>
  41624e:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416253:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f9d]        # 41c1f8 <flatcc_builder_padding_base@@Base+0x1198>
  41625b:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416260:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f98]        # 41c200 <flatcc_builder_padding_base@@Base+0x11a0>
  416268:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41626d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f93]        # 41c208 <flatcc_builder_padding_base@@Base+0x11a8>
  416275:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41627a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f8e]        # 41c210 <flatcc_builder_padding_base@@Base+0x11b0>
  416282:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416287:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f89]        # 41c218 <flatcc_builder_padding_base@@Base+0x11b8>
  41628f:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416294:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f84]        # 41c220 <flatcc_builder_padding_base@@Base+0x11c0>
  41629c:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162a1:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f7f]        # 41c228 <flatcc_builder_padding_base@@Base+0x11c8>
  4162a9:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162ae:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f7a]        # 41c230 <flatcc_builder_padding_base@@Base+0x11d0>
  4162b6:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162bb:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f75]        # 41c238 <flatcc_builder_padding_base@@Base+0x11d8>
  4162c3:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162c8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f70]        # 41c240 <flatcc_builder_padding_base@@Base+0x11e0>
  4162d0:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162d5:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f6b]        # 41c248 <flatcc_builder_padding_base@@Base+0x11e8>
  4162dd:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162e2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f66]        # 41c250 <flatcc_builder_padding_base@@Base+0x11f0>
  4162ea:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162ef:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f61]        # 41c258 <flatcc_builder_padding_base@@Base+0x11f8>
  4162f7:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4162fc:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f5c]        # 41c260 <flatcc_builder_padding_base@@Base+0x1200>
  416304:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416309:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f57]        # 41c268 <flatcc_builder_padding_base@@Base+0x1208>
  416311:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416316:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f52]        # 41c270 <flatcc_builder_padding_base@@Base+0x1210>
  41631e:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416323:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f4d]        # 41c278 <flatcc_builder_padding_base@@Base+0x1218>
  41632b:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416330:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5f48]        # 41c280 <flatcc_builder_padding_base@@Base+0x1220>
  416338:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41633d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5e93]        # 41c1d8 <flatcc_builder_padding_base@@Base+0x1178>
  416345:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41634a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5f2e]        # 41c280 <flatcc_builder_padding_base@@Base+0x1220>
  416352:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416357:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5f19]        # 41c278 <flatcc_builder_padding_base@@Base+0x1218>
  41635f:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416364:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5f04]        # 41c270 <flatcc_builder_padding_base@@Base+0x1210>
  41636c:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416371:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5eef]        # 41c268 <flatcc_builder_padding_base@@Base+0x1208>
  416379:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41637e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5eda]        # 41c260 <flatcc_builder_padding_base@@Base+0x1200>
  416386:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41638b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5ec5]        # 41c258 <flatcc_builder_padding_base@@Base+0x11f8>
  416393:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416398:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5eb0]        # 41c250 <flatcc_builder_padding_base@@Base+0x11f0>
  4163a0:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163a5:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e9b]        # 41c248 <flatcc_builder_padding_base@@Base+0x11e8>
  4163ad:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163b2:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e86]        # 41c240 <flatcc_builder_padding_base@@Base+0x11e0>
  4163ba:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163bf:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e71]        # 41c238 <flatcc_builder_padding_base@@Base+0x11d8>
  4163c7:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163cc:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e5c]        # 41c230 <flatcc_builder_padding_base@@Base+0x11d0>
  4163d4:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163d9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e47]        # 41c228 <flatcc_builder_padding_base@@Base+0x11c8>
  4163e1:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163e6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e32]        # 41c220 <flatcc_builder_padding_base@@Base+0x11c0>
  4163ee:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4163f3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e1d]        # 41c218 <flatcc_builder_padding_base@@Base+0x11b8>
  4163fb:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416400:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e08]        # 41c210 <flatcc_builder_padding_base@@Base+0x11b0>
  416408:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41640d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5df3]        # 41c208 <flatcc_builder_padding_base@@Base+0x11a8>
  416415:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41641a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5dde]        # 41c200 <flatcc_builder_padding_base@@Base+0x11a0>
  416422:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416427:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5dc9]        # 41c1f8 <flatcc_builder_padding_base@@Base+0x1198>
  41642f:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416434:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5db4]        # 41c1f0 <flatcc_builder_padding_base@@Base+0x1190>
  41643c:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416441:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5d9f]        # 41c1e8 <flatcc_builder_padding_base@@Base+0x1188>
  416449:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41644e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5d8a]        # 41c1e0 <flatcc_builder_padding_base@@Base+0x1180>
  416456:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  41645b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5d75]        # 41c1d8 <flatcc_builder_padding_base@@Base+0x1178>
  416463:	jmp    41605c <grisu3_diy_fp_encode_double@@Base+0x62c>
  416468:	nop    DWORD PTR [rax+rax*1+0x0]
  416470:	mov    rbx,rcx
  416473:	mov    ecx,0x1
  416478:	jmp    415e9a <grisu3_diy_fp_encode_double@@Base+0x46a>
  41647d:	test   r10d,r10d
  416480:	jne    4161c8 <grisu3_diy_fp_encode_double@@Base+0x798>
  416486:	add    esi,r9d
  416489:	jmp    415eb8 <grisu3_diy_fp_encode_double@@Base+0x488>
  41648e:	xchg   ax,ax
  416490:	lea    rax,[rbx+0x2]
  416494:	cmp    r8,rax
  416497:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  41649d:	movsx  r9d,BYTE PTR [rbx+0x2]
  4164a2:	xor    r10d,r10d
  4164a5:	jmp    416158 <grisu3_diy_fp_encode_double@@Base+0x728>
  4164aa:	mov    rax,rbx
  4164ad:	sub    rax,r9
  4164b0:	add    edx,eax
  4164b2:	jmp    4164c8 <grisu3_diy_fp_encode_double@@Base+0xa98>
  4164b4:	nop    DWORD PTR [rax+0x0]
  4164b8:	add    rbx,0x1
  4164bc:	add    esi,0x1
  4164bf:	cmp    r8,rbx
  4164c2:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  4164c8:	movzx  eax,BYTE PTR [rbx]
  4164cb:	cmp    al,0x30
  4164cd:	je     4164b8 <grisu3_diy_fp_encode_double@@Base+0xa88>
  4164cf:	lea    r9d,[rax-0x31]
  4164d3:	cmp    r9b,0x8
  4164d7:	ja     416528 <grisu3_diy_fp_encode_double@@Base+0xaf8>
  4164d9:	lea    rcx,[rbx+0x1]
  4164dd:	cmp    r8,rcx
  4164e0:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  4164e6:	movzx  eax,BYTE PTR [rbx+0x1]
  4164ea:	lea    r9d,[rax-0x30]
  4164ee:	cmp    r9b,0x9
  4164f2:	jbe    41650d <grisu3_diy_fp_encode_double@@Base+0xadd>
  4164f4:	jmp    41651d <grisu3_diy_fp_encode_double@@Base+0xaed>
  4164f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416500:	movzx  eax,BYTE PTR [rcx]
  416503:	lea    r9d,[rax-0x30]
  416507:	cmp    r9b,0x9
  41650b:	ja     41651d <grisu3_diy_fp_encode_double@@Base+0xaed>
  41650d:	add    rcx,0x1
  416511:	cmp    r8,rcx
  416514:	jne    416500 <grisu3_diy_fp_encode_double@@Base+0xad0>
  416516:	xor    ebx,ebx
  416518:	jmp    415f2c <grisu3_diy_fp_encode_double@@Base+0x4fc>
  41651d:	mov    rbx,rcx
  416520:	mov    ecx,0x1
  416525:	nop    DWORD PTR [rax]
  416528:	add    esi,edx
  41652a:	jmp    415ead <grisu3_diy_fp_encode_double@@Base+0x47d>
  41652f:	mov    edx,r8d
  416532:	sub    edx,r9d
  416535:	mov    r9,r8
  416538:	jmp    4161f7 <grisu3_diy_fp_encode_double@@Base+0x7c7>
  41653d:	mov    r10d,ebx
  416540:	sub    r10d,r9d
  416543:	mov    r9d,r10d
  416546:	test   ecx,ecx
  416548:	je     416552 <grisu3_diy_fp_encode_double@@Base+0xb22>
  41654a:	add    edx,r9d
  41654d:	jmp    4164c8 <grisu3_diy_fp_encode_double@@Base+0xa98>
  416552:	cmp    al,0x34
  416554:	setg   al
  416557:	add    edx,r9d
  41655a:	movzx  eax,al
  41655d:	add    rdi,rax
  416560:	cmp    r8,rbx
  416563:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  416569:	mov    ecx,0x1
  41656e:	jmp    4164c8 <grisu3_diy_fp_encode_double@@Base+0xa98>
  416573:	lea    rax,[rbx+0x2]
  416577:	cmp    r8,rax
  41657a:	je     415f83 <grisu3_diy_fp_encode_double@@Base+0x553>
  416580:	movsx  r9d,BYTE PTR [rbx+0x2]
  416585:	mov    r10d,0x1
  41658b:	jmp    416158 <grisu3_diy_fp_encode_double@@Base+0x728>
  416590:	xor    edx,edx
  416592:	jmp    415e88 <grisu3_diy_fp_encode_double@@Base+0x458>
  416597:	xor    edx,edx
  416599:	jmp    4161f7 <grisu3_diy_fp_encode_double@@Base+0x7c7>
  41659e:	xor    r9d,r9d
  4165a1:	jmp    416546 <grisu3_diy_fp_encode_double@@Base+0xb16>
  4165a3:	xor    eax,eax
  4165a5:	jmp    416119 <grisu3_diy_fp_encode_double@@Base+0x6e9>
  4165aa:	call   403080 <__stack_chk_fail@plt>
  4165af:	mov    ecx,0x1
  4165b4:	xor    esi,esi
  4165b6:	jmp    415ff5 <grisu3_diy_fp_encode_double@@Base+0x5c5>
  4165bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004165c0 <flatcc_json_parser_error_string@@Base>:
  4165c0:	cmp    edi,0x22
  4165c3:	ja     416810 <flatcc_json_parser_error_string@@Base+0x250>
  4165c9:	lea    rdx,[rip+0x51e4]        # 41b7b4 <flatcc_builder_padding_base@@Base+0x754>
  4165d0:	mov    edi,edi
  4165d2:	movsxd rax,DWORD PTR [rdx+rdi*4]
  4165d6:	add    rax,rdx
  4165d9:	jmp    rax
  4165db:	nop    DWORD PTR [rax+rax*1+0x0]
  4165e0:	lea    rax,[rip+0x4eac]        # 41b493 <flatcc_builder_padding_base@@Base+0x433>
  4165e7:	ret    
  4165e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4165f0:	lea    rax,[rip+0x50ce]        # 41b6c5 <flatcc_builder_padding_base@@Base+0x665>
  4165f7:	ret    
  4165f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416600:	lea    rax,[rip+0x50b0]        # 41b6b7 <flatcc_builder_padding_base@@Base+0x657>
  416607:	ret    
  416608:	nop    DWORD PTR [rax+rax*1+0x0]
  416610:	lea    rax,[rip+0x5086]        # 41b69d <flatcc_builder_padding_base@@Base+0x63d>
  416617:	ret    
  416618:	nop    DWORD PTR [rax+rax*1+0x0]
  416620:	lea    rax,[rip+0x505f]        # 41b686 <flatcc_builder_padding_base@@Base+0x626>
  416627:	ret    
  416628:	nop    DWORD PTR [rax+rax*1+0x0]
  416630:	lea    rax,[rip+0x5032]        # 41b669 <flatcc_builder_padding_base@@Base+0x609>
  416637:	ret    
  416638:	nop    DWORD PTR [rax+rax*1+0x0]
  416640:	lea    rax,[rip+0x500b]        # 41b652 <flatcc_builder_padding_base@@Base+0x5f2>
  416647:	ret    
  416648:	nop    DWORD PTR [rax+rax*1+0x0]
  416650:	lea    rax,[rip+0x4fe1]        # 41b638 <flatcc_builder_padding_base@@Base+0x5d8>
  416657:	ret    
  416658:	nop    DWORD PTR [rax+rax*1+0x0]
  416660:	lea    rax,[rip+0x4fb6]        # 41b61d <flatcc_builder_padding_base@@Base+0x5bd>
  416667:	ret    
  416668:	nop    DWORD PTR [rax+rax*1+0x0]
  416670:	lea    rax,[rip+0x4d49]        # 41b3c0 <flatcc_builder_padding_base@@Base+0x360>
  416677:	ret    
  416678:	nop    DWORD PTR [rax+rax*1+0x0]
  416680:	lea    rax,[rip+0x4f79]        # 41b600 <flatcc_builder_padding_base@@Base+0x5a0>
  416687:	ret    
  416688:	nop    DWORD PTR [rax+rax*1+0x0]
  416690:	lea    rax,[rip+0x4f55]        # 41b5ec <flatcc_builder_padding_base@@Base+0x58c>
  416697:	ret    
  416698:	nop    DWORD PTR [rax+rax*1+0x0]
  4166a0:	lea    rax,[rip+0x4cf1]        # 41b398 <flatcc_builder_padding_base@@Base+0x338>
  4166a7:	ret    
  4166a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166b0:	lea    rax,[rip+0x4f26]        # 41b5dd <flatcc_builder_padding_base@@Base+0x57d>
  4166b7:	ret    
  4166b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166c0:	lea    rax,[rip+0x4f06]        # 41b5cd <flatcc_builder_padding_base@@Base+0x56d>
  4166c7:	ret    
  4166c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166d0:	lea    rax,[rip+0x4ee2]        # 41b5b9 <flatcc_builder_padding_base@@Base+0x559>
  4166d7:	ret    
  4166d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166e0:	lea    rax,[rip+0x4ec5]        # 41b5ac <flatcc_builder_padding_base@@Base+0x54c>
  4166e7:	ret    
  4166e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4166f0:	lea    rax,[rip+0x4ea6]        # 41b59d <flatcc_builder_padding_base@@Base+0x53d>
  4166f7:	ret    
  4166f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416700:	lea    rax,[rip+0x4e84]        # 41b58b <flatcc_builder_padding_base@@Base+0x52b>
  416707:	ret    
  416708:	nop    DWORD PTR [rax+rax*1+0x0]
  416710:	lea    rax,[rip+0x4e64]        # 41b57b <flatcc_builder_padding_base@@Base+0x51b>
  416717:	ret    
  416718:	nop    DWORD PTR [rax+rax*1+0x0]
  416720:	lea    rax,[rip+0x4e41]        # 41b568 <flatcc_builder_padding_base@@Base+0x508>
  416727:	ret    
  416728:	nop    DWORD PTR [rax+rax*1+0x0]
  416730:	lea    rax,[rip+0x4e18]        # 41b54f <flatcc_builder_padding_base@@Base+0x4ef>
  416737:	ret    
  416738:	nop    DWORD PTR [rax+rax*1+0x0]
  416740:	lea    rax,[rip+0x4df9]        # 41b540 <flatcc_builder_padding_base@@Base+0x4e0>
  416747:	ret    
  416748:	nop    DWORD PTR [rax+rax*1+0x0]
  416750:	lea    rax,[rip+0x4dd8]        # 41b52f <flatcc_builder_padding_base@@Base+0x4cf>
  416757:	ret    
  416758:	nop    DWORD PTR [rax+rax*1+0x0]
  416760:	lea    rax,[rip+0x4db9]        # 41b520 <flatcc_builder_padding_base@@Base+0x4c0>
  416767:	ret    
  416768:	nop    DWORD PTR [rax+rax*1+0x0]
  416770:	lea    rax,[rip+0x4d97]        # 41b50e <flatcc_builder_padding_base@@Base+0x4ae>
  416777:	ret    
  416778:	nop    DWORD PTR [rax+rax*1+0x0]
  416780:	lea    rax,[rip+0x4d76]        # 41b4fd <flatcc_builder_padding_base@@Base+0x49d>
  416787:	ret    
  416788:	nop    DWORD PTR [rax+rax*1+0x0]
  416790:	lea    rax,[rip+0x4d5c]        # 41b4f3 <flatcc_builder_padding_base@@Base+0x493>
  416797:	ret    
  416798:	nop    DWORD PTR [rax+rax*1+0x0]
  4167a0:	lea    rax,[rip+0x4d43]        # 41b4ea <flatcc_builder_padding_base@@Base+0x48a>
  4167a7:	ret    
  4167a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167b0:	lea    rax,[rip+0x4d23]        # 41b4da <flatcc_builder_padding_base@@Base+0x47a>
  4167b7:	ret    
  4167b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167c0:	lea    rax,[rip+0x4cfe]        # 41b4c5 <flatcc_builder_padding_base@@Base+0x465>
  4167c7:	ret    
  4167c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167d0:	lea    rax,[rip+0x4cdf]        # 41b4b6 <flatcc_builder_padding_base@@Base+0x456>
  4167d7:	ret    
  4167d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167e0:	lea    rax,[rip+0x4cc0]        # 41b4a7 <flatcc_builder_padding_base@@Base+0x447>
  4167e7:	ret    
  4167e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4167f0:	lea    rax,[rip+0x4ca3]        # 41b49a <flatcc_builder_padding_base@@Base+0x43a>
  4167f7:	ret    
  4167f8:	nop    DWORD PTR [rax+rax*1+0x0]
  416800:	lea    rax,[rip+0x4c8f]        # 41b496 <flatcc_builder_padding_base@@Base+0x436>
  416807:	ret    
  416808:	nop    DWORD PTR [rax+rax*1+0x0]
  416810:	lea    rax,[rip+0x4ebc]        # 41b6d3 <flatcc_builder_padding_base@@Base+0x673>
  416817:	ret    
  416818:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000416820 <flatcc_json_parser_set_error@@Base>:
  416820:	mov    rax,rdx
  416823:	mov    edx,DWORD PTR [rdi+0x20]
  416826:	test   edx,edx
  416828:	jne    41683e <flatcc_json_parser_set_error@@Base+0x1e>
  41682a:	mov    DWORD PTR [rdi+0x20],ecx
  41682d:	mov    rcx,rsi
  416830:	sub    rcx,QWORD PTR [rdi+0x8]
  416834:	mov    QWORD PTR [rdi+0x38],rsi
  416838:	add    ecx,0x1
  41683b:	mov    DWORD PTR [rdi+0x1c],ecx
  41683e:	repz ret 

0000000000416840 <flatcc_json_parser_string_part@@Base>:
  416840:	cmp    rsi,rdx
  416843:	mov    r8,rdx
  416846:	je     416878 <flatcc_json_parser_string_part@@Base+0x38>
  416848:	movzx  eax,BYTE PTR [rsi]
  41684b:	cmp    al,0x22
  41684d:	je     4168a8 <flatcc_json_parser_string_part@@Base+0x68>
  41684f:	cmp    al,0x5c
  416851:	je     416890 <flatcc_json_parser_string_part@@Base+0x50>
  416853:	cmp    al,0x1f
  416855:	ja     41686f <flatcc_json_parser_string_part@@Base+0x2f>
  416857:	jmp    416890 <flatcc_json_parser_string_part@@Base+0x50>
  416859:	nop    DWORD PTR [rax+0x0]
  416860:	movzx  eax,BYTE PTR [rsi]
  416863:	cmp    al,0x22
  416865:	je     4168a8 <flatcc_json_parser_string_part@@Base+0x68>
  416867:	cmp    al,0x1f
  416869:	jbe    416890 <flatcc_json_parser_string_part@@Base+0x50>
  41686b:	cmp    al,0x5c
  41686d:	je     416890 <flatcc_json_parser_string_part@@Base+0x50>
  41686f:	add    rsi,0x1
  416873:	cmp    r8,rsi
  416876:	jne    416860 <flatcc_json_parser_string_part@@Base+0x20>
  416878:	mov    ecx,0x14
  41687d:	mov    rdx,r8
  416880:	mov    rsi,r8
  416883:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  416888:	nop    DWORD PTR [rax+rax*1+0x0]
  416890:	cmp    al,0x1f
  416892:	jg     4168a8 <flatcc_json_parser_string_part@@Base+0x68>
  416894:	mov    ecx,0x11
  416899:	mov    rdx,r8
  41689c:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  4168a1:	nop    DWORD PTR [rax+0x0]
  4168a8:	mov    rax,rsi
  4168ab:	ret    
  4168ac:	nop    DWORD PTR [rax+0x0]

00000000004168b0 <flatcc_json_parser_space_ext@@Base>:
  4168b0:	mov    rax,rdx
  4168b3:	sub    rax,rsi
  4168b6:	cmp    rax,0xf
  4168ba:	jle    4168f4 <flatcc_json_parser_space_ext@@Base+0x44>
  4168bc:	movzx  ecx,BYTE PTR [rsi]
  4168bf:	cmp    cl,0x20
  4168c2:	jg     416954 <flatcc_json_parser_space_ext@@Base+0xa4>
  4168c8:	cmp    WORD PTR [rsi],0x2020
  4168cd:	je     416970 <flatcc_json_parser_space_ext@@Base+0xc0>
  4168d3:	cmp    cl,0x20
  4168d6:	je     41697c <flatcc_json_parser_space_ext@@Base+0xcc>
  4168dc:	cmp    rsi,rdx
  4168df:	jne    416900 <flatcc_json_parser_space_ext@@Base+0x50>
  4168e1:	mov    rax,rdx
  4168e4:	ret    
  4168e5:	nop    DWORD PTR [rax]
  4168e8:	movzx  ecx,BYTE PTR [rsi]
  4168eb:	cmp    cl,0x20
  4168ee:	jne    416900 <flatcc_json_parser_space_ext@@Base+0x50>
  4168f0:	add    rsi,0x1
  4168f4:	cmp    rdx,rsi
  4168f7:	jne    4168e8 <flatcc_json_parser_space_ext@@Base+0x38>
  4168f9:	jmp    4168e1 <flatcc_json_parser_space_ext@@Base+0x31>
  4168fb:	nop    DWORD PTR [rax+rax*1+0x0]
  416900:	cmp    cl,0x20
  416903:	jg     416954 <flatcc_json_parser_space_ext@@Base+0xa4>
  416905:	cmp    cl,0xa
  416908:	je     41693b <flatcc_json_parser_space_ext@@Base+0x8b>
  41690a:	jle    416960 <flatcc_json_parser_space_ext@@Base+0xb0>
  41690c:	cmp    cl,0xd
  41690f:	je     416920 <flatcc_json_parser_space_ext@@Base+0x70>
  416911:	cmp    cl,0x20
  416914:	je     4168b0 <flatcc_json_parser_space_ext@@Base>
  416916:	mov    ecx,0x5
  41691b:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  416920:	mov    rcx,rdx
  416923:	xor    eax,eax
  416925:	sub    rcx,rsi
  416928:	cmp    rcx,0x1
  41692c:	jle    416935 <flatcc_json_parser_space_ext@@Base+0x85>
  41692e:	cmp    BYTE PTR [rsi+0x1],0xa
  416932:	sete   al
  416935:	movzx  eax,al
  416938:	add    rsi,rax
  41693b:	add    DWORD PTR [rdi+0x18],0x1
  41693f:	add    rsi,0x1
  416943:	mov    QWORD PTR [rdi+0x8],rsi
  416947:	cmp    rdx,rsi
  41694a:	je     4168e1 <flatcc_json_parser_space_ext@@Base+0x31>
  41694c:	movzx  ecx,BYTE PTR [rsi]
  41694f:	cmp    cl,0x20
  416952:	jle    416905 <flatcc_json_parser_space_ext@@Base+0x55>
  416954:	mov    rdx,rsi
  416957:	jmp    4168e1 <flatcc_json_parser_space_ext@@Base+0x31>
  41695c:	nop    DWORD PTR [rax+0x0]
  416960:	cmp    cl,0x9
  416963:	jne    416916 <flatcc_json_parser_space_ext@@Base+0x66>
  416965:	add    rsi,0x1
  416969:	jmp    416947 <flatcc_json_parser_space_ext@@Base+0x97>
  41696b:	nop    DWORD PTR [rax+rax*1+0x0]
  416970:	movzx  eax,BYTE PTR [rsi+0x2]
  416974:	add    rsi,0x2
  416978:	cmp    al,0x20
  41697a:	jne    416984 <flatcc_json_parser_space_ext@@Base+0xd4>
  41697c:	movzx  eax,BYTE PTR [rsi+0x1]
  416980:	add    rsi,0x1
  416984:	cmp    al,0x20
  416986:	jle    4168f4 <flatcc_json_parser_space_ext@@Base+0x44>
  41698c:	jmp    416954 <flatcc_json_parser_space_ext@@Base+0xa4>
  41698e:	xchg   ax,ax
  416990:	push   r15
  416992:	push   r14
  416994:	push   r13
  416996:	push   r12
  416998:	mov    r12,rdi
  41699b:	push   rbp
  41699c:	push   rbx
  41699d:	mov    rbx,rdx
  4169a0:	mov    rbp,rsi
  4169a3:	sub    rsp,0x58
  4169a7:	mov    BYTE PTR [r8],0x0
  4169ab:	mov    rdx,QWORD PTR fs:0x28
  4169b4:	mov    QWORD PTR [rsp+0x48],rdx
  4169b9:	xor    edx,edx
  4169bb:	cmp    rsi,rbx
  4169be:	mov    QWORD PTR [rsp+0x10],rcx
  4169c3:	mov    QWORD PTR [rsp+0x20],r8
  4169c8:	je     416b50 <flatcc_json_parser_space_ext@@Base+0x2a0>
  4169ce:	movzx  eax,BYTE PTR [rsi]
  4169d1:	cmp    al,0x22
  4169d3:	je     416b12 <flatcc_json_parser_space_ext@@Base+0x262>
  4169d9:	cmp    al,0x2e
  4169db:	je     416b60 <flatcc_json_parser_space_ext@@Base+0x2b0>
  4169e1:	mov    DWORD PTR [rdi+0x14],0x1
  4169e8:	lea    rax,[rsp+0x38]
  4169ed:	lea    r15,[rsp+0x3c]
  4169f2:	lea    r14,[rsp+0x40]
  4169f7:	mov    DWORD PTR [rsp+0x18],0x0
  4169ff:	mov    BYTE PTR [rsp+0x1f],0x0
  416a04:	mov    QWORD PTR [rsp+0x8],rax
  416a09:	mov    r13,QWORD PTR [rsp+0x10]
  416a0e:	mov    rax,QWORD PTR [r13+0x0]
  416a12:	jmp    416a2e <flatcc_json_parser_space_ext@@Base+0x17e>
  416a14:	nop    DWORD PTR [rax+0x0]
  416a18:	cmp    rbp,rax
  416a1b:	jne    416a70 <flatcc_json_parser_space_ext@@Base+0x1c0>
  416a1d:	add    r13,0x8
  416a21:	mov    rax,QWORD PTR [r13+0x0]
  416a25:	test   rax,rax
  416a28:	je     416ad0 <flatcc_json_parser_space_ext@@Base+0x220>
  416a2e:	mov    r9,r15
  416a31:	mov    r8,r14
  416a34:	mov    rcx,QWORD PTR [rsp+0x8]
  416a39:	mov    rdx,rbx
  416a3c:	mov    rsi,rbp
  416a3f:	mov    rdi,r12
  416a42:	call   rax
  416a44:	cmp    rbx,rax
  416a47:	jne    416a18 <flatcc_json_parser_space_ext@@Base+0x168>
  416a49:	mov    rsi,QWORD PTR [rsp+0x48]
  416a4e:	xor    rsi,QWORD PTR fs:0x28
  416a57:	mov    rax,rbx
  416a5a:	jne    416bb1 <flatcc_json_parser_space_ext@@Base+0x301>
  416a60:	add    rsp,0x58
  416a64:	pop    rbx
  416a65:	pop    rbp
  416a66:	pop    r12
  416a68:	pop    r13
  416a6a:	pop    r14
  416a6c:	pop    r15
  416a6e:	ret    
  416a6f:	nop
  416a70:	mov    r8,rax
  416a73:	mov    eax,DWORD PTR [rsp+0x18]
  416a77:	test   eax,eax
  416a79:	je     416a88 <flatcc_json_parser_space_ext@@Base+0x1d8>
  416a7b:	mov    edi,DWORD PTR [r12+0x14]
  416a80:	test   edi,edi
  416a82:	jne    416b96 <flatcc_json_parser_space_ext@@Base+0x2e6>
  416a88:	mov    esi,DWORD PTR [rsp+0x38]
  416a8c:	mov    ecx,0x8
  416a91:	test   esi,esi
  416a93:	jne    416af0 <flatcc_json_parser_space_ext@@Base+0x240>
  416a95:	mov    rax,QWORD PTR [rsp+0x40]
  416a9a:	cmp    rax,0xff
  416aa0:	ja     416aeb <flatcc_json_parser_space_ext@@Base+0x23b>
  416aa2:	mov    BYTE PTR [rsp+0x1f],al
  416aa6:	mov    rax,QWORD PTR [rsp+0x20]
  416aab:	movzx  ecx,BYTE PTR [rsp+0x1f]
  416ab0:	add    DWORD PTR [rsp+0x18],0x1
  416ab5:	add    BYTE PTR [rax],cl
  416ab7:	mov    ecx,DWORD PTR [rsp+0x3c]
  416abb:	test   ecx,ecx
  416abd:	je     416b8e <flatcc_json_parser_space_ext@@Base+0x2de>
  416ac3:	mov    rbp,r8
  416ac6:	jmp    416a09 <flatcc_json_parser_space_ext@@Base+0x159>
  416acb:	nop    DWORD PTR [rax+rax*1+0x0]
  416ad0:	mov    rdx,rbx
  416ad3:	mov    ecx,0x17
  416ad8:	mov    rsi,rbp
  416adb:	mov    rdi,r12
  416ade:	call   416820 <flatcc_json_parser_set_error@@Base>
  416ae3:	mov    rbx,rax
  416ae6:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416aeb:	mov    ecx,0x7
  416af0:	mov    rsi,r8
  416af3:	mov    rdx,rbx
  416af6:	mov    rdi,r12
  416af9:	mov    QWORD PTR [rsp+0x28],r8
  416afe:	call   416820 <flatcc_json_parser_set_error@@Base>
  416b03:	cmp    rbx,rax
  416b06:	mov    r8,QWORD PTR [rsp+0x28]
  416b0b:	jne    416aa6 <flatcc_json_parser_space_ext@@Base+0x1f6>
  416b0d:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416b12:	add    rbp,0x1
  416b16:	mov    rax,rbx
  416b19:	mov    DWORD PTR [rdi+0x14],0x0
  416b20:	sub    rax,rbp
  416b23:	cmp    rax,0x1
  416b27:	jle    416b31 <flatcc_json_parser_space_ext@@Base+0x281>
  416b29:	cmp    BYTE PTR [rbp+0x0],0x20
  416b2d:	jg     416b42 <flatcc_json_parser_space_ext@@Base+0x292>
  416b2f:	je     416b82 <flatcc_json_parser_space_ext@@Base+0x2d2>
  416b31:	mov    rsi,rbp
  416b34:	mov    rdx,rbx
  416b37:	mov    rdi,r12
  416b3a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416b3f:	mov    rbp,rax
  416b42:	cmp    rbx,rbp
  416b45:	jne    4169e8 <flatcc_json_parser_space_ext@@Base+0x138>
  416b4b:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416b50:	mov    edx,DWORD PTR [rdi+0x14]
  416b53:	test   edx,edx
  416b55:	je     416b31 <flatcc_json_parser_space_ext@@Base+0x281>
  416b57:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416b5c:	nop    DWORD PTR [rax+0x0]
  416b60:	mov    ecx,0x5
  416b65:	mov    rdx,rbx
  416b68:	call   416820 <flatcc_json_parser_set_error@@Base>
  416b6d:	mov    r8d,DWORD PTR [r12+0x14]
  416b72:	mov    rbp,rax
  416b75:	test   r8d,r8d
  416b78:	jne    416b42 <flatcc_json_parser_space_ext@@Base+0x292>
  416b7a:	mov    rax,rbx
  416b7d:	sub    rax,rbp
  416b80:	jmp    416b23 <flatcc_json_parser_space_ext@@Base+0x273>
  416b82:	cmp    BYTE PTR [rbp+0x1],0x20
  416b86:	jle    416b31 <flatcc_json_parser_space_ext@@Base+0x281>
  416b88:	add    rbp,0x1
  416b8c:	jmp    416b42 <flatcc_json_parser_space_ext@@Base+0x292>
  416b8e:	mov    rbx,r8
  416b91:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416b96:	mov    rdx,rbx
  416b99:	mov    ecx,0xe
  416b9e:	mov    rsi,r8
  416ba1:	mov    rdi,r12
  416ba4:	call   416820 <flatcc_json_parser_set_error@@Base>
  416ba9:	mov    rbx,rax
  416bac:	jmp    416a49 <flatcc_json_parser_space_ext@@Base+0x199>
  416bb1:	call   403080 <__stack_chk_fail@plt>
  416bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416bc0:	push   r15
  416bc2:	push   r14
  416bc4:	mov    r14,rsi
  416bc7:	push   r13
  416bc9:	push   r12
  416bcb:	mov    r12d,r8d
  416bce:	push   rbp
  416bcf:	push   rbx
  416bd0:	mov    rbp,rdi
  416bd3:	mov    rbx,rdx
  416bd6:	sub    rsp,0x38
  416bda:	mov    rdi,QWORD PTR [rdi]
  416bdd:	mov    rax,QWORD PTR fs:0x28
  416be6:	mov    QWORD PTR [rsp+0x28],rax
  416beb:	xor    eax,eax
  416bed:	mov    QWORD PTR [rsp],rcx
  416bf1:	mov    DWORD PTR [rsp+0x1c],r9d
  416bf6:	mov    r15,QWORD PTR [rsp+0x70]
  416bfb:	mov    DWORD PTR [rsp+0x24],0x0
  416c03:	call   412ee0 <flatcc_builder_start_offset_vector@@Base>
  416c08:	test   eax,eax
  416c0a:	jne    416c60 <flatcc_json_parser_space_ext@@Base+0x3b0>
  416c0c:	cmp    r14,rbx
  416c0f:	je     416c1b <flatcc_json_parser_space_ext@@Base+0x36b>
  416c11:	cmp    BYTE PTR [r14],0x5b
  416c15:	je     416ca0 <flatcc_json_parser_space_ext@@Base+0x3f0>
  416c1b:	mov    rsi,r14
  416c1e:	mov    ecx,0x16
  416c23:	mov    rdx,rbx
  416c26:	mov    rdi,rbp
  416c29:	call   416820 <flatcc_json_parser_set_error@@Base>
  416c2e:	mov    r14,rax
  416c31:	mov    eax,r12d
  416c34:	mov    QWORD PTR [rsp+0x8],rax
  416c39:	xor    eax,eax
  416c3b:	nop    DWORD PTR [rax+rax*1+0x0]
  416c40:	cmp    rax,QWORD PTR [rsp+0x8]
  416c45:	je     416f19 <flatcc_json_parser_space_ext@@Base+0x669>
  416c4b:	mov    ecx,0x1e
  416c50:	mov    rdx,rbx
  416c53:	mov    rsi,r14
  416c56:	mov    rdi,rbp
  416c59:	call   416820 <flatcc_json_parser_set_error@@Base>
  416c5e:	jmp    416c73 <flatcc_json_parser_space_ext@@Base+0x3c3>
  416c60:	mov    ecx,0x21
  416c65:	mov    rdx,rbx
  416c68:	mov    rsi,r14
  416c6b:	mov    rdi,rbp
  416c6e:	call   416820 <flatcc_json_parser_set_error@@Base>
  416c73:	mov    rcx,QWORD PTR [rsp+0x28]
  416c78:	xor    rcx,QWORD PTR fs:0x28
  416c81:	jne    416ffb <flatcc_json_parser_space_ext@@Base+0x74b>
  416c87:	add    rsp,0x38
  416c8b:	pop    rbx
  416c8c:	pop    rbp
  416c8d:	pop    r12
  416c8f:	pop    r13
  416c91:	pop    r14
  416c93:	pop    r15
  416c95:	ret    
  416c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416ca0:	lea    r13,[r14+0x1]
  416ca4:	mov    rax,rbx
  416ca7:	sub    rax,r13
  416caa:	cmp    rax,0x1
  416cae:	jle    416cbd <flatcc_json_parser_space_ext@@Base+0x40d>
  416cb0:	cmp    BYTE PTR [r14+0x1],0x20
  416cb5:	jg     416cce <flatcc_json_parser_space_ext@@Base+0x41e>
  416cb7:	je     416f63 <flatcc_json_parser_space_ext@@Base+0x6b3>
  416cbd:	mov    rsi,r13
  416cc0:	mov    rdx,rbx
  416cc3:	mov    rdi,rbp
  416cc6:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416ccb:	mov    r13,rax
  416cce:	cmp    rbx,r13
  416cd1:	je     416cde <flatcc_json_parser_space_ext@@Base+0x42e>
  416cd3:	cmp    BYTE PTR [r13+0x0],0x5d
  416cd8:	je     416fab <flatcc_json_parser_space_ext@@Base+0x6fb>
  416cde:	mov    eax,r12d
  416ce1:	test   rax,rax
  416ce4:	mov    QWORD PTR [rsp+0x8],rax
  416ce9:	je     416e6d <flatcc_json_parser_space_ext@@Base+0x5bd>
  416cef:	lea    rax,[rsp+0x24]
  416cf4:	xor    r12d,r12d
  416cf7:	mov    QWORD PTR [rsp+0x10],rax
  416cfc:	nop    DWORD PTR [rax+0x0]
  416d00:	mov    rsi,QWORD PTR [rsp]
  416d04:	mov    rdi,QWORD PTR [rbp+0x0]
  416d08:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  416d0d:	movzx  ecx,BYTE PTR [rax+r12*1]
  416d12:	mov    r8,QWORD PTR [rsp+0x10]
  416d17:	mov    rdx,rbx
  416d1a:	mov    rsi,r13
  416d1d:	mov    rdi,rbp
  416d20:	call   r15
  416d23:	cmp    rbx,rax
  416d26:	mov    r14,rax
  416d29:	je     416eb0 <flatcc_json_parser_space_ext@@Base+0x600>
  416d2f:	mov    rdi,QWORD PTR [rbp+0x0]
  416d33:	mov    esi,0x1
  416d38:	call   4129a0 <flatcc_builder_extend_offset_vector@@Base>
  416d3d:	test   rax,rax
  416d40:	je     416c60 <flatcc_json_parser_space_ext@@Base+0x3b0>
  416d46:	mov    edx,DWORD PTR [rsp+0x24]
  416d4a:	mov    DWORD PTR [rax],edx
  416d4c:	mov    rax,rbx
  416d4f:	sub    rax,r14
  416d52:	cmp    rax,0x1
  416d56:	jle    416d66 <flatcc_json_parser_space_ext@@Base+0x4b6>
  416d58:	movzx  eax,BYTE PTR [r14]
  416d5c:	cmp    al,0x20
  416d5e:	jg     416d84 <flatcc_json_parser_space_ext@@Base+0x4d4>
  416d60:	je     416df0 <flatcc_json_parser_space_ext@@Base+0x540>
  416d66:	mov    rsi,r14
  416d69:	mov    rdx,rbx
  416d6c:	mov    rdi,rbp
  416d6f:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416d74:	mov    r14,rax
  416d77:	cmp    rbx,r14
  416d7a:	je     416e10 <flatcc_json_parser_space_ext@@Base+0x560>
  416d80:	movzx  eax,BYTE PTR [r14]
  416d84:	cmp    al,0x2c
  416d86:	je     416e20 <flatcc_json_parser_space_ext@@Base+0x570>
  416d8c:	cmp    al,0x5d
  416d8e:	je     416db0 <flatcc_json_parser_space_ext@@Base+0x500>
  416d90:	mov    rsi,r14
  416d93:	mov    ecx,0x9
  416d98:	mov    rdx,rbx
  416d9b:	mov    rdi,rbp
  416d9e:	call   416820 <flatcc_json_parser_set_error@@Base>
  416da3:	mov    r14,rax
  416da6:	lea    rax,[r12+0x1]
  416dab:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416db0:	lea    rsi,[r14+0x1]
  416db4:	mov    rax,rbx
  416db7:	sub    rax,rsi
  416dba:	cmp    rax,0x1
  416dbe:	jle    416dd1 <flatcc_json_parser_space_ext@@Base+0x521>
  416dc0:	cmp    BYTE PTR [r14+0x1],0x20
  416dc5:	jg     416e88 <flatcc_json_parser_space_ext@@Base+0x5d8>
  416dcb:	je     416e98 <flatcc_json_parser_space_ext@@Base+0x5e8>
  416dd1:	mov    rdx,rbx
  416dd4:	mov    rdi,rbp
  416dd7:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416ddc:	mov    r14,rax
  416ddf:	lea    rax,[r12+0x1]
  416de4:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416de9:	nop    DWORD PTR [rax+0x0]
  416df0:	cmp    BYTE PTR [r14+0x1],0x20
  416df5:	jle    416d66 <flatcc_json_parser_space_ext@@Base+0x4b6>
  416dfb:	add    r14,0x1
  416dff:	cmp    rbx,r14
  416e02:	jne    416d80 <flatcc_json_parser_space_ext@@Base+0x4d0>
  416e08:	nop    DWORD PTR [rax+rax*1+0x0]
  416e10:	lea    rax,[r12+0x1]
  416e15:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416e1a:	nop    WORD PTR [rax+rax*1+0x0]
  416e20:	lea    r13,[r14+0x1]
  416e24:	mov    rax,rbx
  416e27:	sub    rax,r13
  416e2a:	cmp    rax,0x1
  416e2e:	jle    416e3d <flatcc_json_parser_space_ext@@Base+0x58d>
  416e30:	cmp    BYTE PTR [r14+0x1],0x20
  416e35:	jg     416e4e <flatcc_json_parser_space_ext@@Base+0x59e>
  416e37:	je     416ec0 <flatcc_json_parser_space_ext@@Base+0x610>
  416e3d:	mov    rsi,r13
  416e40:	mov    rdx,rbx
  416e43:	mov    rdi,rbp
  416e46:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416e4b:	mov    r13,rax
  416e4e:	cmp    rbx,r13
  416e51:	je     416f77 <flatcc_json_parser_space_ext@@Base+0x6c7>
  416e57:	cmp    BYTE PTR [r13+0x0],0x5d
  416e5c:	je     416ed8 <flatcc_json_parser_space_ext@@Base+0x628>
  416e5e:	add    r12,0x1
  416e62:	cmp    QWORD PTR [rsp+0x8],r12
  416e67:	jne    416d00 <flatcc_json_parser_space_ext@@Base+0x450>
  416e6d:	mov    ecx,0x1e
  416e72:	mov    rdx,rbx
  416e75:	mov    rsi,r13
  416e78:	mov    rdi,rbp
  416e7b:	call   416820 <flatcc_json_parser_set_error@@Base>
  416e80:	jmp    416c73 <flatcc_json_parser_space_ext@@Base+0x3c3>
  416e85:	nop    DWORD PTR [rax]
  416e88:	lea    rax,[r12+0x1]
  416e8d:	mov    r14,rsi
  416e90:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416e95:	nop    DWORD PTR [rax]
  416e98:	cmp    BYTE PTR [r14+0x2],0x20
  416e9d:	jle    416dd1 <flatcc_json_parser_space_ext@@Base+0x521>
  416ea3:	add    r14,0x2
  416ea7:	jmp    416e10 <flatcc_json_parser_space_ext@@Base+0x560>
  416eac:	nop    DWORD PTR [rax+0x0]
  416eb0:	mov    rax,rbx
  416eb3:	jmp    416c73 <flatcc_json_parser_space_ext@@Base+0x3c3>
  416eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  416ec0:	cmp    BYTE PTR [r14+0x2],0x20
  416ec5:	jle    416e3d <flatcc_json_parser_space_ext@@Base+0x58d>
  416ecb:	lea    r13,[r14+0x2]
  416ecf:	jmp    416e4e <flatcc_json_parser_space_ext@@Base+0x59e>
  416ed4:	nop    DWORD PTR [rax+0x0]
  416ed8:	lea    r14,[r13+0x1]
  416edc:	mov    rax,rbx
  416edf:	sub    rax,r14
  416ee2:	cmp    rax,0x1
  416ee6:	jle    416efe <flatcc_json_parser_space_ext@@Base+0x64e>
  416ee8:	cmp    BYTE PTR [r13+0x1],0x20
  416eed:	lea    rax,[r12+0x1]
  416ef2:	jg     416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416ef8:	je     416f97 <flatcc_json_parser_space_ext@@Base+0x6e7>
  416efe:	mov    rsi,r14
  416f01:	mov    rdx,rbx
  416f04:	mov    rdi,rbp
  416f07:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416f0c:	mov    r14,rax
  416f0f:	lea    rax,[r12+0x1]
  416f14:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416f19:	mov    rsi,QWORD PTR [rsp]
  416f1d:	mov    rdi,QWORD PTR [rbp+0x0]
  416f21:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  416f26:	mov    rdi,QWORD PTR [rbp+0x0]
  416f2a:	mov    rsi,rax
  416f2d:	call   413f90 <flatcc_builder_end_offset_vector_for_unions@@Base>
  416f32:	test   eax,eax
  416f34:	mov    DWORD PTR [rsp+0x24],eax
  416f38:	je     416c60 <flatcc_json_parser_space_ext@@Base+0x3b0>
  416f3e:	movzx  esi,WORD PTR [rsp+0x1c]
  416f43:	mov    rdi,QWORD PTR [rbp+0x0]
  416f47:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  416f4c:	test   rax,rax
  416f4f:	je     416c60 <flatcc_json_parser_space_ext@@Base+0x3b0>
  416f55:	mov    edx,DWORD PTR [rsp+0x24]
  416f59:	mov    DWORD PTR [rax],edx
  416f5b:	mov    rax,r14
  416f5e:	jmp    416c73 <flatcc_json_parser_space_ext@@Base+0x3c3>
  416f63:	cmp    BYTE PTR [r14+0x2],0x20
  416f68:	jle    416cbd <flatcc_json_parser_space_ext@@Base+0x40d>
  416f6e:	lea    r13,[r14+0x2]
  416f72:	jmp    416cce <flatcc_json_parser_space_ext@@Base+0x41e>
  416f77:	mov    ecx,0x9
  416f7c:	mov    rdx,rbx
  416f7f:	mov    rsi,rbx
  416f82:	mov    rdi,rbp
  416f85:	call   416820 <flatcc_json_parser_set_error@@Base>
  416f8a:	mov    r14,rax
  416f8d:	lea    rax,[r12+0x1]
  416f92:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416f97:	cmp    BYTE PTR [r13+0x2],0x20
  416f9c:	jle    416efe <flatcc_json_parser_space_ext@@Base+0x64e>
  416fa2:	lea    r14,[r13+0x2]
  416fa6:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416fab:	lea    r14,[r13+0x1]
  416faf:	mov    rax,rbx
  416fb2:	sub    rax,r14
  416fb5:	cmp    rax,0x1
  416fb9:	jle    416fd2 <flatcc_json_parser_space_ext@@Base+0x722>
  416fbb:	mov    eax,r12d
  416fbe:	mov    QWORD PTR [rsp+0x8],rax
  416fc3:	xor    eax,eax
  416fc5:	cmp    BYTE PTR [r13+0x1],0x20
  416fca:	jg     416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416fd0:	je     416ff2 <flatcc_json_parser_space_ext@@Base+0x742>
  416fd2:	mov    rsi,r14
  416fd5:	mov    rdx,rbx
  416fd8:	mov    rdi,rbp
  416fdb:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  416fe0:	mov    r14,rax
  416fe3:	mov    eax,r12d
  416fe6:	mov    QWORD PTR [rsp+0x8],rax
  416feb:	xor    eax,eax
  416fed:	jmp    416c40 <flatcc_json_parser_space_ext@@Base+0x390>
  416ff2:	cmp    BYTE PTR [r13+0x2],0x20
  416ff7:	jle    416fd2 <flatcc_json_parser_space_ext@@Base+0x722>
  416ff9:	jmp    416fa2 <flatcc_json_parser_space_ext@@Base+0x6f2>
  416ffb:	call   403080 <__stack_chk_fail@plt>

0000000000417000 <flatcc_json_parser_string_escape@@Base>:
  417000:	mov    r8,rdx
  417003:	sub    r8,rsi
  417006:	cmp    r8,0x1
  41700a:	jle    417011 <flatcc_json_parser_string_escape@@Base+0x11>
  41700c:	cmp    BYTE PTR [rsi],0x5c
  41700f:	je     417020 <flatcc_json_parser_string_escape@@Base+0x20>
  417011:	mov    BYTE PTR [rcx],0x0
  417014:	mov    ecx,0x12
  417019:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  41701e:	xchg   ax,ax
  417020:	movzx  eax,BYTE PTR [rsi+0x1]
  417024:	sub    eax,0x22
  417027:	cmp    al,0x56
  417029:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  41702b:	lea    r9,[rip+0x480e]        # 41b840 <flatcc_builder_padding_base@@Base+0x7e0>
  417032:	movzx  eax,al
  417035:	movsxd rax,DWORD PTR [r9+rax*4]
  417039:	add    rax,r9
  41703c:	jmp    rax
  41703e:	xchg   ax,ax
  417040:	cmp    r8,0x3
  417044:	mov    BYTE PTR [rcx],0x1
  417047:	jle    417011 <flatcc_json_parser_string_escape@@Base+0x11>
  417049:	movzx  eax,BYTE PTR [rsi+0x2]
  41704d:	lea    r8d,[rax-0x30]
  417051:	cmp    r8b,0x9
  417055:	ja     417190 <flatcc_json_parser_string_escape@@Base+0x190>
  41705b:	shl    eax,0x4
  41705e:	movzx  r8d,BYTE PTR [rsi+0x3]
  417063:	lea    r9d,[r8-0x30]
  417067:	cmp    r9b,0x9
  41706b:	ja     4171f8 <flatcc_json_parser_string_escape@@Base+0x1f8>
  417071:	or     eax,r9d
  417074:	mov    BYTE PTR [rcx+0x1],al
  417077:	lea    rax,[rsi+0x4]
  41707b:	ret    
  41707c:	nop    DWORD PTR [rax+0x0]
  417080:	mov    BYTE PTR [rcx],0x1
  417083:	mov    BYTE PTR [rcx+0x1],0x22
  417087:	lea    rax,[rsi+0x2]
  41708b:	ret    
  41708c:	nop    DWORD PTR [rax+0x0]
  417090:	mov    BYTE PTR [rcx],0x1
  417093:	mov    BYTE PTR [rcx+0x1],0x2f
  417097:	lea    rax,[rsi+0x2]
  41709b:	ret    
  41709c:	nop    DWORD PTR [rax+0x0]
  4170a0:	mov    BYTE PTR [rcx],0x1
  4170a3:	mov    BYTE PTR [rcx+0x1],0x5c
  4170a7:	lea    rax,[rsi+0x2]
  4170ab:	ret    
  4170ac:	nop    DWORD PTR [rax+0x0]
  4170b0:	mov    BYTE PTR [rcx],0x1
  4170b3:	mov    BYTE PTR [rcx+0x1],0x8
  4170b7:	lea    rax,[rsi+0x2]
  4170bb:	ret    
  4170bc:	nop    DWORD PTR [rax+0x0]
  4170c0:	mov    BYTE PTR [rcx],0x1
  4170c3:	mov    BYTE PTR [rcx+0x1],0xc
  4170c7:	lea    rax,[rsi+0x2]
  4170cb:	ret    
  4170cc:	nop    DWORD PTR [rax+0x0]
  4170d0:	mov    BYTE PTR [rcx],0x1
  4170d3:	mov    BYTE PTR [rcx+0x1],0xa
  4170d7:	lea    rax,[rsi+0x2]
  4170db:	ret    
  4170dc:	nop    DWORD PTR [rax+0x0]
  4170e0:	mov    BYTE PTR [rcx],0x1
  4170e3:	mov    BYTE PTR [rcx+0x1],0xd
  4170e7:	lea    rax,[rsi+0x2]
  4170eb:	ret    
  4170ec:	nop    DWORD PTR [rax+0x0]
  4170f0:	mov    BYTE PTR [rcx],0x1
  4170f3:	mov    BYTE PTR [rcx+0x1],0x9
  4170f7:	lea    rax,[rsi+0x2]
  4170fb:	ret    
  4170fc:	nop    DWORD PTR [rax+0x0]
  417100:	cmp    r8,0x5
  417104:	jle    417011 <flatcc_json_parser_string_escape@@Base+0x11>
  41710a:	movzx  eax,BYTE PTR [rsi+0x2]
  41710e:	lea    r8d,[rax-0x30]
  417112:	cmp    r8b,0x9
  417116:	ja     4171b0 <flatcc_json_parser_string_escape@@Base+0x1b0>
  41711c:	shl    eax,0xc
  41711f:	movzx  r8d,BYTE PTR [rsi+0x3]
  417124:	lea    r9d,[r8-0x30]
  417128:	cmp    r9b,0x9
  41712c:	ja     4171d0 <flatcc_json_parser_string_escape@@Base+0x1d0>
  417132:	shl    r8d,0x8
  417136:	sub    r8w,0x3000
  41713c:	or     eax,r8d
  41713f:	movsx  r8w,BYTE PTR [rsi+0x4]
  417145:	lea    r9d,[r8-0x30]
  417149:	cmp    r9b,0x9
  41714d:	ja     417216 <flatcc_json_parser_string_escape@@Base+0x216>
  417153:	sub    r8d,0x30
  417157:	shl    r8d,0x4
  41715b:	or     eax,r8d
  41715e:	movzx  r8d,BYTE PTR [rsi+0x5]
  417163:	lea    r9d,[r8-0x30]
  417167:	cmp    r9b,0x9
  41716b:	ja     41723d <flatcc_json_parser_string_escape@@Base+0x23d>
  417171:	movsx  dx,r8b
  417176:	sub    edx,0x30
  417179:	or     eax,edx
  41717b:	cmp    ax,0x7f
  41717f:	ja     41725f <flatcc_json_parser_string_escape@@Base+0x25f>
  417185:	mov    BYTE PTR [rcx],0x1
  417188:	mov    BYTE PTR [rcx+0x1],al
  41718b:	lea    rax,[rsi+0x6]
  41718f:	ret    
  417190:	or     eax,0x20
  417193:	lea    r8d,[rax-0x61]
  417197:	cmp    r8b,0x5
  41719b:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  4171a1:	shl    eax,0x4
  4171a4:	sub    eax,0x70
  4171a7:	jmp    41705e <flatcc_json_parser_string_escape@@Base+0x5e>
  4171ac:	nop    DWORD PTR [rax+0x0]
  4171b0:	or     eax,0x20
  4171b3:	lea    r8d,[rax-0x61]
  4171b7:	cmp    r8b,0x5
  4171bb:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  4171c1:	shl    eax,0xc
  4171c4:	sub    ax,0x7000
  4171c8:	jmp    41711f <flatcc_json_parser_string_escape@@Base+0x11f>
  4171cd:	nop    DWORD PTR [rax]
  4171d0:	or     r8d,0x20
  4171d4:	lea    r9d,[r8-0x61]
  4171d8:	cmp    r9b,0x5
  4171dc:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  4171e2:	shl    r8d,0x8
  4171e6:	sub    r8w,0x5700
  4171ec:	or     eax,r8d
  4171ef:	jmp    41713f <flatcc_json_parser_string_escape@@Base+0x13f>
  4171f4:	nop    DWORD PTR [rax+0x0]
  4171f8:	or     r8d,0x20
  4171fc:	lea    r9d,[r8-0x61]
  417200:	cmp    r9b,0x5
  417204:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  41720a:	sub    r8d,0x57
  41720e:	or     eax,r8d
  417211:	jmp    417074 <flatcc_json_parser_string_escape@@Base+0x74>
  417216:	or     r8d,0x20
  41721a:	lea    r9d,[r8-0x61]
  41721e:	cmp    r9b,0x5
  417222:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  417228:	movsx  r8w,r8b
  41722d:	sub    r8d,0x57
  417231:	shl    r8d,0x4
  417235:	or     eax,r8d
  417238:	jmp    41715e <flatcc_json_parser_string_escape@@Base+0x15e>
  41723d:	or     r8d,0x20
  417241:	lea    r9d,[r8-0x61]
  417245:	cmp    r9b,0x5
  417249:	ja     417011 <flatcc_json_parser_string_escape@@Base+0x11>
  41724f:	movsx  r8w,r8b
  417254:	lea    edx,[r8-0x57]
  417258:	or     eax,edx
  41725a:	jmp    41717b <flatcc_json_parser_string_escape@@Base+0x17b>
  41725f:	cmp    ax,0x7ff
  417263:	ja     417282 <flatcc_json_parser_string_escape@@Base+0x282>
  417265:	mov    edx,eax
  417267:	and    eax,0x3f
  41726a:	mov    BYTE PTR [rcx],0x2
  41726d:	shr    dx,0x6
  417271:	or     eax,0xffffff80
  417274:	or     edx,0xffffffc0
  417277:	mov    BYTE PTR [rcx+0x2],al
  41727a:	mov    BYTE PTR [rcx+0x1],dl
  41727d:	jmp    41718b <flatcc_json_parser_string_escape@@Base+0x18b>
  417282:	mov    edx,eax
  417284:	mov    BYTE PTR [rcx],0x3
  417287:	shr    dx,0xc
  41728b:	or     edx,0xffffffe0
  41728e:	mov    BYTE PTR [rcx+0x1],dl
  417291:	mov    edx,eax
  417293:	and    eax,0x3f
  417296:	shr    dx,0x6
  41729a:	or     eax,0xffffff80
  41729d:	and    edx,0x3f
  4172a0:	mov    BYTE PTR [rcx+0x3],al
  4172a3:	or     edx,0xffffff80
  4172a6:	mov    BYTE PTR [rcx+0x2],dl
  4172a9:	jmp    41718b <flatcc_json_parser_string_escape@@Base+0x18b>
  4172ae:	xchg   ax,ax

00000000004172b0 <flatcc_json_parser_skip_constant@@Base>:
  4172b0:	push   r13
  4172b2:	push   r12
  4172b4:	push   rbp
  4172b5:	push   rbx
  4172b6:	mov    rbp,rdx
  4172b9:	sub    rsp,0x8
  4172bd:	cmp    rsi,rdx
  4172c0:	je     417340 <flatcc_json_parser_skip_constant@@Base+0x90>
  4172c2:	mov    r13,rdi
  4172c5:	mov    rbx,rsi
  4172c8:	movabs r12,0x2000000000ffd
  4172d2:	jmp    4172f1 <flatcc_json_parser_skip_constant@@Base+0x41>
  4172d4:	nop    DWORD PTR [rax+0x0]
  4172d8:	mov    edx,eax
  4172da:	or     edx,0x20
  4172dd:	sub    edx,0x61
  4172e0:	cmp    dl,0x19
  4172e3:	ja     417313 <flatcc_json_parser_skip_constant@@Base+0x63>
  4172e5:	nop    DWORD PTR [rax]
  4172e8:	add    rbx,0x1
  4172ec:	cmp    rbp,rbx
  4172ef:	je     417340 <flatcc_json_parser_skip_constant@@Base+0x90>
  4172f1:	movzx  eax,BYTE PTR [rbx]
  4172f4:	test   al,al
  4172f6:	js     4172e8 <flatcc_json_parser_skip_constant@@Base+0x38>
  4172f8:	lea    edx,[rax-0x2e]
  4172fb:	cmp    dl,0x31
  4172fe:	ja     4172d8 <flatcc_json_parser_skip_constant@@Base+0x28>
  417300:	bt     r12,rdx
  417304:	jb     4172e8 <flatcc_json_parser_skip_constant@@Base+0x38>
  417306:	mov    edx,eax
  417308:	or     edx,0x20
  41730b:	sub    edx,0x61
  41730e:	cmp    dl,0x19
  417311:	jbe    4172e8 <flatcc_json_parser_skip_constant@@Base+0x38>
  417313:	mov    rdx,rbp
  417316:	sub    rdx,rbx
  417319:	cmp    rdx,0x1
  41731d:	jle    417325 <flatcc_json_parser_skip_constant@@Base+0x75>
  41731f:	cmp    al,0x20
  417321:	jg     417350 <flatcc_json_parser_skip_constant@@Base+0xa0>
  417323:	je     417361 <flatcc_json_parser_skip_constant@@Base+0xb1>
  417325:	mov    rdx,rbp
  417328:	mov    rsi,rbx
  41732b:	mov    rdi,r13
  41732e:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417333:	cmp    rbx,rax
  417336:	je     417350 <flatcc_json_parser_skip_constant@@Base+0xa0>
  417338:	mov    rbx,rax
  41733b:	cmp    rbp,rbx
  41733e:	jne    4172f1 <flatcc_json_parser_skip_constant@@Base+0x41>
  417340:	add    rsp,0x8
  417344:	mov    rax,rbp
  417347:	pop    rbx
  417348:	pop    rbp
  417349:	pop    r12
  41734b:	pop    r13
  41734d:	ret    
  41734e:	xchg   ax,ax
  417350:	add    rsp,0x8
  417354:	mov    rbp,rbx
  417357:	mov    rax,rbp
  41735a:	pop    rbx
  41735b:	pop    rbp
  41735c:	pop    r12
  41735e:	pop    r13
  417360:	ret    
  417361:	cmp    BYTE PTR [rbx+0x1],0x20
  417365:	lea    rax,[rbx+0x1]
  417369:	jle    417325 <flatcc_json_parser_skip_constant@@Base+0x75>
  41736b:	jmp    417333 <flatcc_json_parser_skip_constant@@Base+0x83>
  41736d:	nop    DWORD PTR [rax]

0000000000417370 <flatcc_json_parser_match_constant@@Base>:
  417370:	mov    rax,rdx
  417373:	movsxd rcx,ecx
  417376:	sub    rax,rsi
  417379:	cmp    rax,rcx
  41737c:	jle    4173d8 <flatcc_json_parser_match_constant@@Base+0x68>
  41737e:	push   r13
  417380:	push   r12
  417382:	mov    r13,r8
  417385:	push   rbp
  417386:	push   rbx
  417387:	mov    rbp,rdx
  41738a:	mov    r12,rsi
  41738d:	lea    rbx,[rsi+rcx*1]
  417391:	sub    rsp,0x8
  417395:	mov    eax,DWORD PTR [rdi+0x14]
  417398:	test   eax,eax
  41739a:	jne    4173e8 <flatcc_json_parser_match_constant@@Base+0x78>
  41739c:	movzx  eax,BYTE PTR [rbx]
  41739f:	cmp    al,0x20
  4173a1:	je     417490 <flatcc_json_parser_match_constant@@Base+0x120>
  4173a7:	cmp    al,0x22
  4173a9:	je     4174d0 <flatcc_json_parser_match_constant@@Base+0x160>
  4173af:	cmp    al,0x5c
  4173b1:	mov    DWORD PTR [r8],0x0
  4173b8:	jne    417460 <flatcc_json_parser_match_constant@@Base+0xf0>
  4173be:	add    rsp,0x8
  4173c2:	mov    rsi,rbx
  4173c5:	mov    ecx,0x12
  4173ca:	pop    rbx
  4173cb:	pop    rbp
  4173cc:	pop    r12
  4173ce:	pop    r13
  4173d0:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  4173d5:	nop    DWORD PTR [rax]
  4173d8:	mov    DWORD PTR [r8],0x0
  4173df:	mov    rax,rsi
  4173e2:	ret    
  4173e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4173e8:	mov    rax,rdx
  4173eb:	sub    rax,rbx
  4173ee:	cmp    rax,0x1
  4173f2:	jle    417403 <flatcc_json_parser_match_constant@@Base+0x93>
  4173f4:	cmp    BYTE PTR [rbx],0x20
  4173f7:	jg     417500 <flatcc_json_parser_match_constant@@Base+0x190>
  4173fd:	je     417520 <flatcc_json_parser_match_constant@@Base+0x1b0>
  417403:	mov    rdx,rbp
  417406:	mov    rsi,rbx
  417409:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41740e:	cmp    rbp,rax
  417411:	je     4174b9 <flatcc_json_parser_match_constant@@Base+0x149>
  417417:	cmp    rbx,rax
  41741a:	je     417433 <flatcc_json_parser_match_constant@@Base+0xc3>
  41741c:	movzx  edx,BYTE PTR [rax]
  41741f:	cmp    dl,0x5f
  417422:	je     417478 <flatcc_json_parser_match_constant@@Base+0x108>
  417424:	test   dl,dl
  417426:	js     417478 <flatcc_json_parser_match_constant@@Base+0x108>
  417428:	or     edx,0x20
  41742b:	sub    edx,0x61
  41742e:	cmp    dl,0x19
  417431:	jbe    417478 <flatcc_json_parser_match_constant@@Base+0x108>
  417433:	mov    DWORD PTR [r13+0x0],0x0
  41743b:	movzx  edx,BYTE PTR [rax]
  41743e:	mov    ecx,edx
  417440:	and    ecx,0xffffffdf
  417443:	cmp    cl,0x5d
  417446:	je     41744f <flatcc_json_parser_match_constant@@Base+0xdf>
  417448:	cmp    dl,0x2c
  41744b:	cmovne rax,r12
  41744f:	add    rsp,0x8
  417453:	pop    rbx
  417454:	pop    rbp
  417455:	pop    r12
  417457:	pop    r13
  417459:	ret    
  41745a:	nop    WORD PTR [rax+rax*1+0x0]
  417460:	add    rsp,0x8
  417464:	mov    rax,rsi
  417467:	pop    rbx
  417468:	pop    rbp
  417469:	pop    r12
  41746b:	pop    r13
  41746d:	ret    
  41746e:	xchg   ax,ax
  417470:	cmp    dl,0x22
  417473:	mov    rbx,rax
  417476:	je     4174d0 <flatcc_json_parser_match_constant@@Base+0x160>
  417478:	mov    DWORD PTR [r13+0x0],0x1
  417480:	add    rsp,0x8
  417484:	pop    rbx
  417485:	pop    rbp
  417486:	pop    r12
  417488:	pop    r13
  41748a:	ret    
  41748b:	nop    DWORD PTR [rax+rax*1+0x0]
  417490:	lea    rax,[rbx+0x1]
  417494:	cmp    rdx,rax
  417497:	je     4174b9 <flatcc_json_parser_match_constant@@Base+0x149>
  417499:	movzx  edx,BYTE PTR [rbx+0x1]
  41749d:	cmp    dl,0x20
  4174a0:	je     4174b0 <flatcc_json_parser_match_constant@@Base+0x140>
  4174a2:	jmp    417470 <flatcc_json_parser_match_constant@@Base+0x100>
  4174a4:	nop    DWORD PTR [rax+0x0]
  4174a8:	movzx  edx,BYTE PTR [rax]
  4174ab:	cmp    dl,0x20
  4174ae:	jne    417470 <flatcc_json_parser_match_constant@@Base+0x100>
  4174b0:	add    rax,0x1
  4174b4:	cmp    rbp,rax
  4174b7:	jne    4174a8 <flatcc_json_parser_match_constant@@Base+0x138>
  4174b9:	mov    DWORD PTR [r13+0x0],0x0
  4174c1:	mov    rax,rbp
  4174c4:	jmp    41744f <flatcc_json_parser_match_constant@@Base+0xdf>
  4174c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4174d0:	lea    rax,[rbx+0x1]
  4174d4:	cmp    rax,0xffffffffffffffff
  4174d8:	jge    4174e2 <flatcc_json_parser_match_constant@@Base+0x172>
  4174da:	cmp    BYTE PTR [rbx+0x1],0x20
  4174de:	jg     4174ec <flatcc_json_parser_match_constant@@Base+0x17c>
  4174e0:	je     417510 <flatcc_json_parser_match_constant@@Base+0x1a0>
  4174e2:	xor    edx,edx
  4174e4:	mov    rsi,rax
  4174e7:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4174ec:	mov    DWORD PTR [r13+0x0],0x0
  4174f4:	add    rsp,0x8
  4174f8:	pop    rbx
  4174f9:	pop    rbp
  4174fa:	pop    r12
  4174fc:	pop    r13
  4174fe:	ret    
  4174ff:	nop
  417500:	cmp    rbx,rdx
  417503:	mov    rax,rbx
  417506:	je     4174b9 <flatcc_json_parser_match_constant@@Base+0x149>
  417508:	jmp    417433 <flatcc_json_parser_match_constant@@Base+0xc3>
  41750d:	nop    DWORD PTR [rax]
  417510:	cmp    BYTE PTR [rbx+0x2],0x20
  417514:	jle    4174e2 <flatcc_json_parser_match_constant@@Base+0x172>
  417516:	lea    rax,[rbx+0x2]
  41751a:	jmp    4174ec <flatcc_json_parser_match_constant@@Base+0x17c>
  41751c:	nop    DWORD PTR [rax+0x0]
  417520:	cmp    BYTE PTR [rbx+0x1],0x20
  417524:	lea    rax,[rbx+0x1]
  417528:	jle    417403 <flatcc_json_parser_match_constant@@Base+0x93>
  41752e:	jmp    41740e <flatcc_json_parser_match_constant@@Base+0x9e>
  417533:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41753e:	xchg   ax,ax

0000000000417540 <flatcc_json_parser_double@@Base>:
  417540:	cmp    rsi,rdx
  417543:	mov    QWORD PTR [rcx],0x0
  41754a:	je     417618 <flatcc_json_parser_double@@Base+0xd8>
  417550:	xor    eax,eax
  417552:	cmp    BYTE PTR [rsi],0x2d
  417555:	mov    r8,rdx
  417558:	sete   al
  41755b:	add    rax,rsi
  41755e:	sub    r8,rax
  417561:	cmp    r8,0x1
  417565:	jle    41757f <flatcc_json_parser_double@@Base+0x3f>
  417567:	movzx  r8d,BYTE PTR [rax]
  41756b:	cmp    r8b,0x2e
  41756f:	je     41760a <flatcc_json_parser_double@@Base+0xca>
  417575:	cmp    r8b,0x30
  417579:	je     417600 <flatcc_json_parser_double@@Base+0xc0>
  41757f:	push   r13
  417581:	push   r12
  417583:	mov    r13,rdi
  417586:	push   rbp
  417587:	push   rbx
  417588:	mov    rbx,rsi
  41758b:	mov    rsi,rdx
  41758e:	mov    rbp,rdx
  417591:	mov    rdi,rbx
  417594:	sub    rsp,0x8
  417598:	sub    rsi,rbx
  41759b:	mov    rdx,rcx
  41759e:	mov    r12,rcx
  4175a1:	call   415db0 <grisu3_diy_fp_encode_double@@Base+0x380>
  4175a6:	test   rax,rax
  4175a9:	je     4175c0 <flatcc_json_parser_double@@Base+0x80>
  4175ab:	cmp    rbx,rax
  4175ae:	je     4175c0 <flatcc_json_parser_double@@Base+0x80>
  4175b0:	add    rsp,0x8
  4175b4:	pop    rbx
  4175b5:	pop    rbp
  4175b6:	pop    r12
  4175b8:	pop    r13
  4175ba:	ret    
  4175bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4175c0:	vmovsd xmm0,QWORD PTR [r12]
  4175c6:	mov    ecx,0x6
  4175cb:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x4cbd]        # 41c290 <flatcc_builder_padding_base@@Base+0x1230>
  4175d3:	vucomisd xmm0,QWORD PTR [rip+0x4cad]        # 41c288 <flatcc_builder_padding_base@@Base+0x1228>
  4175db:	jbe    4175e2 <flatcc_json_parser_double@@Base+0xa2>
  4175dd:	mov    ecx,0x7
  4175e2:	add    rsp,0x8
  4175e6:	mov    rdx,rbp
  4175e9:	mov    rsi,rbx
  4175ec:	mov    rdi,r13
  4175ef:	pop    rbx
  4175f0:	pop    rbp
  4175f1:	pop    r12
  4175f3:	pop    r13
  4175f5:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  4175fa:	nop    WORD PTR [rax+rax*1+0x0]
  417600:	cmp    BYTE PTR [rax+0x1],0x30
  417604:	jne    41757f <flatcc_json_parser_double@@Base+0x3f>
  41760a:	mov    ecx,0x6
  41760f:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  417614:	nop    DWORD PTR [rax+0x0]
  417618:	mov    rax,rsi
  41761b:	ret    
  41761c:	nop    DWORD PTR [rax+0x0]

0000000000417620 <flatcc_json_parser_float@@Base>:
  417620:	push   r13
  417622:	push   r12
  417624:	push   rbp
  417625:	push   rbx
  417626:	mov    rbx,rsi
  417629:	sub    rsp,0x18
  41762d:	mov    DWORD PTR [rcx],0x0
  417633:	mov    rax,QWORD PTR fs:0x28
  41763c:	mov    QWORD PTR [rsp+0x8],rax
  417641:	xor    eax,eax
  417643:	cmp    rsi,rdx
  417646:	je     417748 <flatcc_json_parser_float@@Base+0x128>
  41764c:	xor    eax,eax
  41764e:	cmp    BYTE PTR [rsi],0x2d
  417651:	mov    rbp,rdx
  417654:	mov    r13,rdi
  417657:	mov    r12,rcx
  41765a:	sete   al
  41765d:	add    rax,rsi
  417660:	sub    rdx,rax
  417663:	cmp    rdx,0x1
  417667:	jle    41767e <flatcc_json_parser_float@@Base+0x5e>
  417669:	movzx  edx,BYTE PTR [rax]
  41766c:	cmp    dl,0x2e
  41766f:	je     417710 <flatcc_json_parser_float@@Base+0xf0>
  417675:	cmp    dl,0x30
  417678:	je     417728 <flatcc_json_parser_float@@Base+0x108>
  41767e:	mov    rsi,rbp
  417681:	mov    rdx,rsp
  417684:	mov    rdi,rbx
  417687:	sub    rsi,rbx
  41768a:	call   415db0 <grisu3_diy_fp_encode_double@@Base+0x380>
  41768f:	vxorps xmm0,xmm0,xmm0
  417693:	vmovsd xmm1,QWORD PTR [rsp]
  417698:	vcvtsd2ss xmm0,xmm0,xmm1
  41769c:	vmovss DWORD PTR [r12],xmm0
  4176a2:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x4bf6]        # 41c2a0 <flatcc_builder_padding_base@@Base+0x1240>
  4176aa:	vucomiss xmm0,DWORD PTR [rip+0x4c06]        # 41c2b8 <flatcc_builder_padding_base@@Base+0x1258>
  4176b2:	jbe    417700 <flatcc_json_parser_float@@Base+0xe0>
  4176b4:	vxorpd xmm0,xmm0,xmm0
  4176b8:	vucomisd xmm0,xmm1
  4176bc:	ja     417738 <flatcc_json_parser_float@@Base+0x118>
  4176be:	vmovss xmm0,DWORD PTR [rip+0x4bee]        # 41c2b4 <flatcc_builder_padding_base@@Base+0x1254>
  4176c6:	vmovss DWORD PTR [r12],xmm0
  4176cc:	mov    ecx,0x7
  4176d1:	mov    rdx,rbp
  4176d4:	mov    rsi,rbx
  4176d7:	mov    rdi,r13
  4176da:	call   416820 <flatcc_json_parser_set_error@@Base>
  4176df:	mov    rcx,QWORD PTR [rsp+0x8]
  4176e4:	xor    rcx,QWORD PTR fs:0x28
  4176ed:	jne    41774d <flatcc_json_parser_float@@Base+0x12d>
  4176ef:	add    rsp,0x18
  4176f3:	pop    rbx
  4176f4:	pop    rbp
  4176f5:	pop    r12
  4176f7:	pop    r13
  4176f9:	ret    
  4176fa:	nop    WORD PTR [rax+rax*1+0x0]
  417700:	test   rax,rax
  417703:	je     417710 <flatcc_json_parser_float@@Base+0xf0>
  417705:	cmp    rbx,rax
  417708:	jne    4176df <flatcc_json_parser_float@@Base+0xbf>
  41770a:	nop    WORD PTR [rax+rax*1+0x0]
  417710:	mov    ecx,0x6
  417715:	mov    rdx,rbp
  417718:	mov    rsi,rbx
  41771b:	mov    rdi,r13
  41771e:	call   416820 <flatcc_json_parser_set_error@@Base>
  417723:	jmp    4176df <flatcc_json_parser_float@@Base+0xbf>
  417725:	nop    DWORD PTR [rax]
  417728:	cmp    BYTE PTR [rax+0x1],0x30
  41772c:	jne    41767e <flatcc_json_parser_float@@Base+0x5e>
  417732:	jmp    417710 <flatcc_json_parser_float@@Base+0xf0>
  417734:	nop    DWORD PTR [rax+0x0]
  417738:	vmovss xmm0,DWORD PTR [rip+0x4b70]        # 41c2b0 <flatcc_builder_padding_base@@Base+0x1250>
  417740:	jmp    4176c6 <flatcc_json_parser_float@@Base+0xa6>
  417742:	nop    WORD PTR [rax+rax*1+0x0]
  417748:	mov    rax,rsi
  41774b:	jmp    4176df <flatcc_json_parser_float@@Base+0xbf>
  41774d:	call   403080 <__stack_chk_fail@plt>
  417752:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41775d:	nop    DWORD PTR [rax]

0000000000417760 <flatcc_json_parser_generic_json@@Base>:
  417760:	push   r15
  417762:	push   r14
  417764:	mov    r10,rsi
  417767:	push   r13
  417769:	push   r12
  41776b:	push   rbp
  41776c:	push   rbx
  41776d:	sub    rsp,0x238
  417774:	mov    rax,QWORD PTR fs:0x28
  41777d:	mov    QWORD PTR [rsp+0x228],rax
  417785:	xor    eax,eax
  417787:	cmp    rsi,rdx
  41778a:	je     4180dd <flatcc_json_parser_generic_json@@Base+0x97d>
  417790:	lea    r12,[rsp+0x20]
  417795:	mov    r15,rdx
  417798:	movzx  edx,BYTE PTR [rsi]
  41779b:	lea    r13,[rsp+0x1c]
  4177a0:	mov    rbx,rdi
  4177a3:	lea    rax,[r12+0x200]
  4177ab:	mov    r14,r12
  4177ae:	mov    QWORD PTR [rsp],rax
  4177b2:	cmp    r14,r12
  4177b5:	je     417844 <flatcc_json_parser_generic_json@@Base+0xe4>
  4177bb:	cmp    BYTE PTR [r14-0x1],0x7d
  4177c0:	je     417c30 <flatcc_json_parser_generic_json@@Base+0x4d0>
  4177c6:	cmp    dl,0x39
  4177c9:	jle    417850 <flatcc_json_parser_generic_json@@Base+0xf0>
  4177cf:	cmp    dl,0x5b
  4177d2:	je     417bc8 <flatcc_json_parser_generic_json@@Base+0x468>
  4177d8:	cmp    dl,0x7b
  4177db:	jne    417930 <flatcc_json_parser_generic_json@@Base+0x1d0>
  4177e1:	cmp    r14,QWORD PTR [rsp]
  4177e5:	je     4180ed <flatcc_json_parser_generic_json@@Base+0x98d>
  4177eb:	lea    rsi,[r10+0x1]
  4177ef:	mov    rax,r15
  4177f2:	lea    rbp,[r14+0x1]
  4177f6:	mov    BYTE PTR [r14],0x7d
  4177fa:	sub    rax,rsi
  4177fd:	cmp    rax,0x1
  417801:	jle    417814 <flatcc_json_parser_generic_json@@Base+0xb4>
  417803:	cmp    BYTE PTR [r10+0x1],0x20
  417808:	jg     417ed0 <flatcc_json_parser_generic_json@@Base+0x770>
  41780e:	je     417d75 <flatcc_json_parser_generic_json@@Base+0x615>
  417814:	mov    rdx,r15
  417817:	mov    rdi,rbx
  41781a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41781f:	mov    r10,rax
  417822:	cmp    r15,r10
  417825:	je     417ed8 <flatcc_json_parser_generic_json@@Base+0x778>
  41782b:	movzx  edx,BYTE PTR [r10]
  41782f:	cmp    dl,0x7d
  417832:	je     417c1f <flatcc_json_parser_generic_json@@Base+0x4bf>
  417838:	mov    r14,rbp
  41783b:	cmp    r14,r12
  41783e:	jne    4177bb <flatcc_json_parser_generic_json@@Base+0x5b>
  417844:	cmp    dl,0x39
  417847:	jg     417d40 <flatcc_json_parser_generic_json@@Base+0x5e0>
  41784d:	nop    DWORD PTR [rax]
  417850:	cmp    dl,0x30
  417853:	jge    4178b5 <flatcc_json_parser_generic_json@@Base+0x155>
  417855:	cmp    dl,0x22
  417858:	jne    4178b0 <flatcc_json_parser_generic_json@@Base+0x150>
  41785a:	lea    rax,[r10+0x1]
  41785e:	cmp    r15,rax
  417861:	jne    4178a2 <flatcc_json_parser_generic_json@@Base+0x142>
  417863:	jmp    417dcb <flatcc_json_parser_generic_json@@Base+0x66b>
  417868:	nop    DWORD PTR [rax+rax*1+0x0]
  417870:	mov    rdx,r15
  417873:	mov    rsi,rax
  417876:	mov    rdi,rbx
  417879:	call   416840 <flatcc_json_parser_string_part@@Base>
  41787e:	cmp    r15,rax
  417881:	je     417888 <flatcc_json_parser_generic_json@@Base+0x128>
  417883:	cmp    BYTE PTR [rax],0x22
  417886:	je     4178a7 <flatcc_json_parser_generic_json@@Base+0x147>
  417888:	mov    rcx,r13
  41788b:	mov    rdx,r15
  41788e:	mov    rsi,rax
  417891:	mov    rdi,rbx
  417894:	call   417000 <flatcc_json_parser_string_escape@@Base>
  417899:	cmp    r15,rax
  41789c:	je     417dc8 <flatcc_json_parser_generic_json@@Base+0x668>
  4178a2:	cmp    BYTE PTR [rax],0x22
  4178a5:	jne    417870 <flatcc_json_parser_generic_json@@Base+0x110>
  4178a7:	add    rax,0x1
  4178ab:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  4178b0:	cmp    dl,0x2d
  4178b3:	jne    417930 <flatcc_json_parser_generic_json@@Base+0x1d0>
  4178b5:	cmp    r15,r10
  4178b8:	je     418046 <flatcc_json_parser_generic_json@@Base+0x8e6>
  4178be:	cmp    dl,0x2d
  4178c1:	je     417ee0 <flatcc_json_parser_generic_json@@Base+0x780>
  4178c7:	movzx  eax,BYTE PTR [r10]
  4178cb:	cmp    al,0x30
  4178cd:	je     417de3 <flatcc_json_parser_generic_json@@Base+0x683>
  4178d3:	sub    eax,0x31
  4178d6:	cmp    al,0x8
  4178d8:	ja     417fa4 <flatcc_json_parser_generic_json@@Base+0x844>
  4178de:	lea    rax,[r10+0x1]
  4178e2:	cmp    r15,rax
  4178e5:	je     41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  4178e7:	movzx  edx,BYTE PTR [r10+0x1]
  4178ec:	lea    ecx,[rdx-0x30]
  4178ef:	cmp    cl,0x9
  4178f2:	jbe    41790f <flatcc_json_parser_generic_json@@Base+0x1af>
  4178f4:	jmp    417df5 <flatcc_json_parser_generic_json@@Base+0x695>
  4178f9:	nop    DWORD PTR [rax+0x0]
  417900:	movzx  edx,BYTE PTR [rax]
  417903:	lea    ecx,[rdx-0x30]
  417906:	cmp    cl,0x9
  417909:	ja     417df5 <flatcc_json_parser_generic_json@@Base+0x695>
  41790f:	add    rax,0x1
  417913:	cmp    r15,rax
  417916:	jne    417900 <flatcc_json_parser_generic_json@@Base+0x1a0>
  417918:	mov    rax,r15
  41791b:	mov    ecx,0x6
  417920:	mov    rdx,r15
  417923:	mov    rsi,rax
  417926:	mov    rdi,rbx
  417929:	call   416820 <flatcc_json_parser_set_error@@Base>
  41792e:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417930:	mov    rsi,r10
  417933:	mov    rdx,r15
  417936:	mov    rdi,rbx
  417939:	mov    QWORD PTR [rsp+0x8],r10
  41793e:	call   4172b0 <flatcc_json_parser_skip_constant@@Base>
  417943:	mov    r10,QWORD PTR [rsp+0x8]
  417948:	cmp    rax,r10
  41794b:	je     418136 <flatcc_json_parser_generic_json@@Base+0x9d6>
  417951:	cmp    r15,rax
  417954:	jne    4179bc <flatcc_json_parser_generic_json@@Base+0x25c>
  417956:	jmp    418046 <flatcc_json_parser_generic_json@@Base+0x8e6>
  41795b:	nop    DWORD PTR [rax+rax*1+0x0]
  417960:	cmp    rdx,0x1
  417964:	jle    417971 <flatcc_json_parser_generic_json@@Base+0x211>
  417966:	cmp    BYTE PTR [rax],0x20
  417969:	jg     41797f <flatcc_json_parser_generic_json@@Base+0x21f>
  41796b:	je     417a50 <flatcc_json_parser_generic_json@@Base+0x2f0>
  417971:	mov    rdx,r15
  417974:	mov    rsi,rax
  417977:	mov    rdi,rbx
  41797a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41797f:	cmp    r15,rax
  417982:	je     417a70 <flatcc_json_parser_generic_json@@Base+0x310>
  417988:	movzx  edx,BYTE PTR [rax]
  41798b:	cmp    dl,0x2c
  41798e:	je     417ac0 <flatcc_json_parser_generic_json@@Base+0x360>
  417994:	cmp    dl,0x7d
  417997:	je     417a20 <flatcc_json_parser_generic_json@@Base+0x2c0>
  41799d:	mov    ecx,0xa
  4179a2:	mov    rdx,r15
  4179a5:	mov    rsi,rax
  4179a8:	mov    rdi,rbx
  4179ab:	call   416820 <flatcc_json_parser_set_error@@Base>
  4179b0:	cmp    r15,rax
  4179b3:	je     417a70 <flatcc_json_parser_generic_json@@Base+0x310>
  4179b9:	mov    r14,rbp
  4179bc:	cmp    r14,r12
  4179bf:	je     417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  4179c5:	mov    rdx,r15
  4179c8:	lea    rbp,[r14-0x1]
  4179cc:	sub    rdx,rax
  4179cf:	cmp    BYTE PTR [r14-0x1],0x5d
  4179d4:	jne    417960 <flatcc_json_parser_generic_json@@Base+0x200>
  4179d6:	cmp    rdx,0x1
  4179da:	jle    4179e7 <flatcc_json_parser_generic_json@@Base+0x287>
  4179dc:	cmp    BYTE PTR [rax],0x20
  4179df:	jg     4179f5 <flatcc_json_parser_generic_json@@Base+0x295>
  4179e1:	je     417b50 <flatcc_json_parser_generic_json@@Base+0x3f0>
  4179e7:	mov    rdx,r15
  4179ea:	mov    rsi,rax
  4179ed:	mov    rdi,rbx
  4179f0:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4179f5:	cmp    r15,rax
  4179f8:	je     417a70 <flatcc_json_parser_generic_json@@Base+0x310>
  4179fa:	movzx  edx,BYTE PTR [rax]
  4179fd:	cmp    dl,0x2c
  417a00:	je     417b68 <flatcc_json_parser_generic_json@@Base+0x408>
  417a06:	cmp    dl,0x5d
  417a09:	je     417a20 <flatcc_json_parser_generic_json@@Base+0x2c0>
  417a0b:	mov    ecx,0x9
  417a10:	mov    rdx,r15
  417a13:	mov    rsi,rax
  417a16:	mov    rdi,rbx
  417a19:	call   416820 <flatcc_json_parser_set_error@@Base>
  417a1e:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417a20:	lea    rsi,[rax+0x1]
  417a24:	mov    rdx,r15
  417a27:	sub    rdx,rsi
  417a2a:	cmp    rdx,0x1
  417a2e:	jle    417a40 <flatcc_json_parser_generic_json@@Base+0x2e0>
  417a30:	cmp    BYTE PTR [rax+0x1],0x20
  417a34:	jg     417b40 <flatcc_json_parser_generic_json@@Base+0x3e0>
  417a3a:	je     417bb0 <flatcc_json_parser_generic_json@@Base+0x450>
  417a40:	mov    rdx,r15
  417a43:	mov    rdi,rbx
  417a46:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417a4b:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417a50:	cmp    BYTE PTR [rax+0x1],0x20
  417a54:	jle    417971 <flatcc_json_parser_generic_json@@Base+0x211>
  417a5a:	add    rax,0x1
  417a5e:	cmp    r15,rax
  417a61:	jne    417988 <flatcc_json_parser_generic_json@@Base+0x228>
  417a67:	nop    WORD PTR [rax+rax*1+0x0]
  417a70:	mov    rax,r15
  417a73:	cmp    rbp,r12
  417a76:	je     417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  417a78:	xor    ecx,ecx
  417a7a:	cmp    BYTE PTR [rbp-0x1],0x5d
  417a7e:	mov    rdx,r15
  417a81:	mov    rsi,r15
  417a84:	mov    rdi,rbx
  417a87:	setne  cl
  417a8a:	add    ecx,0x9
  417a8d:	call   416820 <flatcc_json_parser_set_error@@Base>
  417a92:	mov    rcx,QWORD PTR [rsp+0x228]
  417a9a:	xor    rcx,QWORD PTR fs:0x28
  417aa3:	jne    418196 <flatcc_json_parser_generic_json@@Base+0xa36>
  417aa9:	add    rsp,0x238
  417ab0:	pop    rbx
  417ab1:	pop    rbp
  417ab2:	pop    r12
  417ab4:	pop    r13
  417ab6:	pop    r14
  417ab8:	pop    r15
  417aba:	ret    
  417abb:	nop    DWORD PTR [rax+rax*1+0x0]
  417ac0:	lea    r10,[rax+0x1]
  417ac4:	mov    rdx,r15
  417ac7:	sub    rdx,r10
  417aca:	cmp    rdx,0x1
  417ace:	jle    417adc <flatcc_json_parser_generic_json@@Base+0x37c>
  417ad0:	cmp    BYTE PTR [rax+0x1],0x20
  417ad4:	jg     417aed <flatcc_json_parser_generic_json@@Base+0x38d>
  417ad6:	je     417e80 <flatcc_json_parser_generic_json@@Base+0x720>
  417adc:	mov    rsi,r10
  417adf:	mov    rdx,r15
  417ae2:	mov    rdi,rbx
  417ae5:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417aea:	mov    r10,rax
  417aed:	cmp    r15,r10
  417af0:	je     417f8c <flatcc_json_parser_generic_json@@Base+0x82c>
  417af6:	movzx  edx,BYTE PTR [r10]
  417afa:	cmp    dl,0x7d
  417afd:	jne    4177b2 <flatcc_json_parser_generic_json@@Base+0x52>
  417b03:	lea    rax,[r10+0x1]
  417b07:	mov    rdx,r15
  417b0a:	sub    rdx,rax
  417b0d:	cmp    rdx,0x1
  417b11:	jle    417b24 <flatcc_json_parser_generic_json@@Base+0x3c4>
  417b13:	cmp    BYTE PTR [r10+0x1],0x20
  417b18:	jg     4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417b1e:	je     4180a9 <flatcc_json_parser_generic_json@@Base+0x949>
  417b24:	mov    rdx,r15
  417b27:	mov    rsi,rax
  417b2a:	mov    rdi,rbx
  417b2d:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417b32:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417b37:	nop    WORD PTR [rax+rax*1+0x0]
  417b40:	mov    rax,rsi
  417b43:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417b48:	nop    DWORD PTR [rax+rax*1+0x0]
  417b50:	cmp    BYTE PTR [rax+0x1],0x20
  417b54:	jle    4179e7 <flatcc_json_parser_generic_json@@Base+0x287>
  417b5a:	add    rax,0x1
  417b5e:	jmp    4179f5 <flatcc_json_parser_generic_json@@Base+0x295>
  417b63:	nop    DWORD PTR [rax+rax*1+0x0]
  417b68:	lea    r10,[rax+0x1]
  417b6c:	mov    rdx,r15
  417b6f:	sub    rdx,r10
  417b72:	cmp    rdx,0x1
  417b76:	jle    417b84 <flatcc_json_parser_generic_json@@Base+0x424>
  417b78:	cmp    BYTE PTR [rax+0x1],0x20
  417b7c:	jg     417b95 <flatcc_json_parser_generic_json@@Base+0x435>
  417b7e:	je     417d4e <flatcc_json_parser_generic_json@@Base+0x5ee>
  417b84:	mov    rsi,r10
  417b87:	mov    rdx,r15
  417b8a:	mov    rdi,rbx
  417b8d:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417b92:	mov    r10,rax
  417b95:	cmp    r15,r10
  417b98:	je     4180bd <flatcc_json_parser_generic_json@@Base+0x95d>
  417b9e:	movzx  edx,BYTE PTR [r10]
  417ba2:	cmp    dl,0x5d
  417ba5:	jne    4177b2 <flatcc_json_parser_generic_json@@Base+0x52>
  417bab:	jmp    417b03 <flatcc_json_parser_generic_json@@Base+0x3a3>
  417bb0:	cmp    BYTE PTR [rax+0x2],0x20
  417bb4:	jle    417a40 <flatcc_json_parser_generic_json@@Base+0x2e0>
  417bba:	add    rax,0x2
  417bbe:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417bc3:	nop    DWORD PTR [rax+rax*1+0x0]
  417bc8:	cmp    r14,QWORD PTR [rsp]
  417bcc:	je     4180ed <flatcc_json_parser_generic_json@@Base+0x98d>
  417bd2:	lea    rsi,[r10+0x1]
  417bd6:	mov    rax,r15
  417bd9:	lea    rbp,[r14+0x1]
  417bdd:	mov    BYTE PTR [r14],0x5d
  417be1:	sub    rax,rsi
  417be4:	cmp    rax,0x1
  417be8:	jle    417bfb <flatcc_json_parser_generic_json@@Base+0x49b>
  417bea:	cmp    BYTE PTR [r10+0x1],0x20
  417bef:	jg     417ec8 <flatcc_json_parser_generic_json@@Base+0x768>
  417bf5:	je     417d61 <flatcc_json_parser_generic_json@@Base+0x601>
  417bfb:	mov    rdx,r15
  417bfe:	mov    rdi,rbx
  417c01:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417c06:	mov    r10,rax
  417c09:	cmp    r15,r10
  417c0c:	je     417ed8 <flatcc_json_parser_generic_json@@Base+0x778>
  417c12:	movzx  edx,BYTE PTR [r10]
  417c16:	cmp    dl,0x5d
  417c19:	jne    417838 <flatcc_json_parser_generic_json@@Base+0xd8>
  417c1f:	mov    r14,rbp
  417c22:	mov    rax,r10
  417c25:	jmp    4179bc <flatcc_json_parser_generic_json@@Base+0x25c>
  417c2a:	nop    WORD PTR [rax+rax*1+0x0]
  417c30:	cmp    dl,0x22
  417c33:	je     417fbc <flatcc_json_parser_generic_json@@Base+0x85c>
  417c39:	cmp    dl,0x2e
  417c3c:	je     418051 <flatcc_json_parser_generic_json@@Base+0x8f1>
  417c42:	mov    DWORD PTR [rbx+0x14],0x1
  417c49:	cmp    r15,r10
  417c4c:	mov    rax,r15
  417c4f:	je     417cb1 <flatcc_json_parser_generic_json@@Base+0x551>
  417c51:	movzx  ecx,BYTE PTR [r10]
  417c55:	lea    rdx,[r10+0x1]
  417c59:	cmp    cl,0x20
  417c5c:	jle    41817e <flatcc_json_parser_generic_json@@Base+0xa1e>
  417c62:	nop    WORD PTR [rax+rax*1+0x0]
  417c68:	lea    esi,[rcx-0x2e]
  417c6b:	lea    rax,[rdx-0x1]
  417c6f:	cmp    sil,0x31
  417c73:	jbe    417d90 <flatcc_json_parser_generic_json@@Base+0x630>
  417c79:	mov    esi,ecx
  417c7b:	or     esi,0x20
  417c7e:	sub    esi,0x61
  417c81:	cmp    sil,0x19
  417c85:	jbe    417da4 <flatcc_json_parser_generic_json@@Base+0x644>
  417c8b:	cmp    cl,0x2e
  417c8e:	je     418105 <flatcc_json_parser_generic_json@@Base+0x9a5>
  417c94:	mov    rdx,r15
  417c97:	sub    rdx,rax
  417c9a:	cmp    rdx,0x1
  417c9e:	jle    417cb1 <flatcc_json_parser_generic_json@@Base+0x551>
  417ca0:	movzx  ecx,BYTE PTR [rax]
  417ca3:	cmp    cl,0x20
  417ca6:	jg     417cbf <flatcc_json_parser_generic_json@@Base+0x55f>
  417ca8:	cmp    cl,0x20
  417cab:	je     418080 <flatcc_json_parser_generic_json@@Base+0x920>
  417cb1:	mov    rdx,r15
  417cb4:	mov    rsi,rax
  417cb7:	mov    rdi,rbx
  417cba:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417cbf:	cmp    r15,rax
  417cc2:	je     418166 <flatcc_json_parser_generic_json@@Base+0xa06>
  417cc8:	cmp    BYTE PTR [rax],0x3a
  417ccb:	jne    41814e <flatcc_json_parser_generic_json@@Base+0x9ee>
  417cd1:	lea    r10,[rax+0x1]
  417cd5:	mov    rdx,r15
  417cd8:	sub    rdx,r10
  417cdb:	cmp    rdx,0x1
  417cdf:	jle    417cf0 <flatcc_json_parser_generic_json@@Base+0x590>
  417ce1:	movzx  edx,BYTE PTR [rax+0x1]
  417ce5:	cmp    dl,0x20
  417ce8:	jg     417d04 <flatcc_json_parser_generic_json@@Base+0x5a4>
  417cea:	je     418093 <flatcc_json_parser_generic_json@@Base+0x933>
  417cf0:	mov    rdx,r15
  417cf3:	mov    rsi,r10
  417cf6:	mov    rdi,rbx
  417cf9:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  417cfe:	movzx  edx,BYTE PTR [rax]
  417d01:	mov    r10,rax
  417d04:	cmp    dl,0x39
  417d07:	jg     4177cf <flatcc_json_parser_generic_json@@Base+0x6f>
  417d0d:	cmp    dl,0x30
  417d10:	jge    4178b5 <flatcc_json_parser_generic_json@@Base+0x155>
  417d16:	cmp    dl,0x22
  417d19:	jne    4178b0 <flatcc_json_parser_generic_json@@Base+0x150>
  417d1f:	cmp    r10,r15
  417d22:	jne    41785a <flatcc_json_parser_generic_json@@Base+0xfa>
  417d28:	mov    ecx,0x10
  417d2d:	mov    rdx,r15
  417d30:	mov    rsi,r15
  417d33:	mov    rdi,rbx
  417d36:	call   416820 <flatcc_json_parser_set_error@@Base>
  417d3b:	jmp    41785e <flatcc_json_parser_generic_json@@Base+0xfe>
  417d40:	cmp    dl,0x5b
  417d43:	jne    4177d8 <flatcc_json_parser_generic_json@@Base+0x78>
  417d49:	jmp    417bd2 <flatcc_json_parser_generic_json@@Base+0x472>
  417d4e:	cmp    BYTE PTR [rax+0x2],0x20
  417d52:	jle    417b84 <flatcc_json_parser_generic_json@@Base+0x424>
  417d58:	lea    r10,[rax+0x2]
  417d5c:	jmp    417b95 <flatcc_json_parser_generic_json@@Base+0x435>
  417d61:	cmp    BYTE PTR [r10+0x2],0x20
  417d66:	jle    417bfb <flatcc_json_parser_generic_json@@Base+0x49b>
  417d6c:	add    r10,0x2
  417d70:	jmp    417c09 <flatcc_json_parser_generic_json@@Base+0x4a9>
  417d75:	cmp    BYTE PTR [r10+0x2],0x20
  417d7a:	jle    417814 <flatcc_json_parser_generic_json@@Base+0xb4>
  417d80:	add    r10,0x2
  417d84:	jmp    417822 <flatcc_json_parser_generic_json@@Base+0xc2>
  417d89:	nop    DWORD PTR [rax+0x0]
  417d90:	movabs rdi,0x2000000000ffd
  417d9a:	bt     rdi,rsi
  417d9e:	jae    417c79 <flatcc_json_parser_generic_json@@Base+0x519>
  417da4:	cmp    r15,rdx
  417da7:	mov    rax,rdx
  417daa:	je     4180d5 <flatcc_json_parser_generic_json@@Base+0x975>
  417db0:	movzx  esi,BYTE PTR [rdx]
  417db3:	add    rdx,0x1
  417db7:	cmp    sil,0x20
  417dbb:	jle    417c8b <flatcc_json_parser_generic_json@@Base+0x52b>
  417dc1:	mov    ecx,esi
  417dc3:	jmp    417c68 <flatcc_json_parser_generic_json@@Base+0x508>
  417dc8:	mov    rax,r15
  417dcb:	mov    ecx,0x14
  417dd0:	mov    rdx,r15
  417dd3:	mov    rsi,rax
  417dd6:	mov    rdi,rbx
  417dd9:	call   416820 <flatcc_json_parser_set_error@@Base>
  417dde:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417de3:	lea    rax,[r10+0x1]
  417de7:	cmp    r15,rax
  417dea:	je     41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  417df0:	movzx  edx,BYTE PTR [r10+0x1]
  417df5:	cmp    dl,0x2e
  417df8:	je     417f3a <flatcc_json_parser_generic_json@@Base+0x7da>
  417dfe:	mov    ecx,edx
  417e00:	and    ecx,0xffffffdf
  417e03:	cmp    cl,0x45
  417e06:	jne    417e93 <flatcc_json_parser_generic_json@@Base+0x733>
  417e0c:	lea    rsi,[rax+0x1]
  417e10:	cmp    r15,rsi
  417e13:	je     417eed <flatcc_json_parser_generic_json@@Base+0x78d>
  417e19:	movzx  edx,BYTE PTR [rax+0x1]
  417e1d:	lea    ecx,[rdx-0x2b]
  417e20:	and    ecx,0xfd
  417e26:	jne    417e39 <flatcc_json_parser_generic_json@@Base+0x6d9>
  417e28:	lea    rsi,[rax+0x2]
  417e2c:	cmp    r15,rsi
  417e2f:	je     417f25 <flatcc_json_parser_generic_json@@Base+0x7c5>
  417e35:	movzx  edx,BYTE PTR [rax+0x2]
  417e39:	sub    edx,0x30
  417e3c:	cmp    dl,0x9
  417e3f:	ja     417f25 <flatcc_json_parser_generic_json@@Base+0x7c5>
  417e45:	lea    rax,[rsi+0x1]
  417e49:	cmp    r15,rax
  417e4c:	je     41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  417e52:	movzx  edx,BYTE PTR [rsi+0x1]
  417e56:	lea    ecx,[rdx-0x30]
  417e59:	cmp    cl,0x9
  417e5c:	jbe    417e6b <flatcc_json_parser_generic_json@@Base+0x70b>
  417e5e:	jmp    417e93 <flatcc_json_parser_generic_json@@Base+0x733>
  417e60:	movzx  edx,BYTE PTR [rax]
  417e63:	lea    ecx,[rdx-0x30]
  417e66:	cmp    cl,0x9
  417e69:	ja     417e93 <flatcc_json_parser_generic_json@@Base+0x733>
  417e6b:	add    rax,0x1
  417e6f:	cmp    r15,rax
  417e72:	jne    417e60 <flatcc_json_parser_generic_json@@Base+0x700>
  417e74:	jmp    417918 <flatcc_json_parser_generic_json@@Base+0x1b8>
  417e79:	nop    DWORD PTR [rax+0x0]
  417e80:	cmp    BYTE PTR [rax+0x2],0x20
  417e84:	jle    417adc <flatcc_json_parser_generic_json@@Base+0x37c>
  417e8a:	lea    r10,[rax+0x2]
  417e8e:	jmp    417aed <flatcc_json_parser_generic_json@@Base+0x38d>
  417e93:	cmp    dl,0x20
  417e96:	je     417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417e9c:	jle    417f05 <flatcc_json_parser_generic_json@@Base+0x7a5>
  417e9e:	cmp    dl,0x3a
  417ea1:	je     417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417ea7:	jle    41800c <flatcc_json_parser_generic_json@@Base+0x8ac>
  417ead:	cmp    dl,0x5d
  417eb0:	je     417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417eb6:	cmp    dl,0x7d
  417eb9:	jne    41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  417ebf:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417ec4:	nop    DWORD PTR [rax+0x0]
  417ec8:	mov    r10,rsi
  417ecb:	jmp    417c09 <flatcc_json_parser_generic_json@@Base+0x4a9>
  417ed0:	mov    r10,rsi
  417ed3:	jmp    417822 <flatcc_json_parser_generic_json@@Base+0xc2>
  417ed8:	mov    rax,r15
  417edb:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  417ee0:	add    r10,0x1
  417ee4:	cmp    r15,r10
  417ee7:	jne    4178c7 <flatcc_json_parser_generic_json@@Base+0x167>
  417eed:	mov    ecx,0x6
  417ef2:	mov    rdx,r15
  417ef5:	mov    rsi,r15
  417ef8:	mov    rdi,rbx
  417efb:	call   416820 <flatcc_json_parser_set_error@@Base>
  417f00:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417f05:	cmp    dl,0x9
  417f08:	jl     41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  417f0e:	cmp    dl,0xb
  417f11:	jle    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417f17:	cmp    dl,0xd
  417f1a:	jne    41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  417f20:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417f25:	mov    ecx,0x6
  417f2a:	mov    rdx,r15
  417f2d:	mov    rdi,rbx
  417f30:	call   416820 <flatcc_json_parser_set_error@@Base>
  417f35:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417f3a:	movzx  ecx,BYTE PTR [rax+0x1]
  417f3e:	lea    edx,[rcx-0x30]
  417f41:	cmp    dl,0x9
  417f44:	ja     41811d <flatcc_json_parser_generic_json@@Base+0x9bd>
  417f4a:	lea    rcx,[rax+0x2]
  417f4e:	cmp    r15,rcx
  417f51:	je     417918 <flatcc_json_parser_generic_json@@Base+0x1b8>
  417f57:	movzx  edx,BYTE PTR [rax+0x2]
  417f5b:	lea    eax,[rdx-0x30]
  417f5e:	cmp    al,0x9
  417f60:	jbe    417f7e <flatcc_json_parser_generic_json@@Base+0x81e>
  417f62:	jmp    4180e5 <flatcc_json_parser_generic_json@@Base+0x985>
  417f67:	nop    WORD PTR [rax+rax*1+0x0]
  417f70:	movzx  edx,BYTE PTR [rcx]
  417f73:	lea    eax,[rdx-0x30]
  417f76:	cmp    al,0x9
  417f78:	ja     4180e5 <flatcc_json_parser_generic_json@@Base+0x985>
  417f7e:	add    rcx,0x1
  417f82:	cmp    r15,rcx
  417f85:	jne    417f70 <flatcc_json_parser_generic_json@@Base+0x810>
  417f87:	jmp    417918 <flatcc_json_parser_generic_json@@Base+0x1b8>
  417f8c:	mov    ecx,0xa
  417f91:	mov    rdx,r15
  417f94:	mov    rsi,r15
  417f97:	mov    rdi,rbx
  417f9a:	call   416820 <flatcc_json_parser_set_error@@Base>
  417f9f:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  417fa4:	mov    ecx,0x6
  417fa9:	mov    rdx,r15
  417fac:	mov    rsi,r10
  417faf:	mov    rdi,rbx
  417fb2:	call   416820 <flatcc_json_parser_set_error@@Base>
  417fb7:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  417fbc:	add    r10,0x1
  417fc0:	mov    DWORD PTR [rbx+0x14],0x0
  417fc7:	cmp    r15,r10
  417fca:	je     418038 <flatcc_json_parser_generic_json@@Base+0x8d8>
  417fcc:	movzx  edx,BYTE PTR [r10]
  417fd0:	cmp    dl,0x22
  417fd3:	jne    417ff2 <flatcc_json_parser_generic_json@@Base+0x892>
  417fd5:	jmp    41803d <flatcc_json_parser_generic_json@@Base+0x8dd>
  417fd7:	nop    WORD PTR [rax+rax*1+0x0]
  417fe0:	lea    r10,[rax+0x1]
  417fe4:	cmp    r15,r10
  417fe7:	je     418038 <flatcc_json_parser_generic_json@@Base+0x8d8>
  417fe9:	movzx  edx,BYTE PTR [rax+0x1]
  417fed:	cmp    dl,0x22
  417ff0:	je     41803d <flatcc_json_parser_generic_json@@Base+0x8dd>
  417ff2:	cmp    dl,0x5c
  417ff5:	mov    rax,r10
  417ff8:	jne    417fe0 <flatcc_json_parser_generic_json@@Base+0x880>
  417ffa:	mov    rdx,r15
  417ffd:	sub    rdx,r10
  418000:	cmp    rdx,0x1
  418004:	jle    41801a <flatcc_json_parser_generic_json@@Base+0x8ba>
  418006:	add    rax,0x1
  41800a:	jmp    417fe0 <flatcc_json_parser_generic_json@@Base+0x880>
  41800c:	cmp    dl,0x2c
  41800f:	jne    41791b <flatcc_json_parser_generic_json@@Base+0x1bb>
  418015:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  41801a:	cmp    BYTE PTR [r10],0x22
  41801e:	je     41803d <flatcc_json_parser_generic_json@@Base+0x8dd>
  418020:	mov    ecx,0x14
  418025:	mov    rdx,r15
  418028:	mov    rsi,r10
  41802b:	mov    rdi,rbx
  41802e:	call   416820 <flatcc_json_parser_set_error@@Base>
  418033:	jmp    417c94 <flatcc_json_parser_generic_json@@Base+0x534>
  418038:	mov    r10,r15
  41803b:	jmp    418020 <flatcc_json_parser_generic_json@@Base+0x8c0>
  41803d:	lea    rax,[r10+0x1]
  418041:	jmp    417c94 <flatcc_json_parser_generic_json@@Base+0x534>
  418046:	mov    rbp,r14
  418049:	mov    rax,r15
  41804c:	jmp    417a73 <flatcc_json_parser_generic_json@@Base+0x313>
  418051:	mov    rsi,r10
  418054:	mov    ecx,0x5
  418059:	mov    rdx,r15
  41805c:	mov    rdi,rbx
  41805f:	call   416820 <flatcc_json_parser_set_error@@Base>
  418064:	mov    r10,rax
  418067:	mov    eax,DWORD PTR [rbx+0x14]
  41806a:	test   eax,eax
  41806c:	je     417fc7 <flatcc_json_parser_generic_json@@Base+0x867>
  418072:	jmp    417c49 <flatcc_json_parser_generic_json@@Base+0x4e9>
  418077:	nop    WORD PTR [rax+rax*1+0x0]
  418080:	cmp    BYTE PTR [rax+0x1],0x20
  418084:	jle    417cb1 <flatcc_json_parser_generic_json@@Base+0x551>
  41808a:	add    rax,0x1
  41808e:	jmp    417cbf <flatcc_json_parser_generic_json@@Base+0x55f>
  418093:	movzx  edx,BYTE PTR [rax+0x2]
  418097:	cmp    dl,0x20
  41809a:	jle    417cf0 <flatcc_json_parser_generic_json@@Base+0x590>
  4180a0:	lea    r10,[rax+0x2]
  4180a4:	jmp    417d04 <flatcc_json_parser_generic_json@@Base+0x5a4>
  4180a9:	cmp    BYTE PTR [r10+0x2],0x20
  4180ae:	jle    417b24 <flatcc_json_parser_generic_json@@Base+0x3c4>
  4180b4:	lea    rax,[r10+0x2]
  4180b8:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  4180bd:	mov    ecx,0x9
  4180c2:	mov    rdx,r15
  4180c5:	mov    rsi,r15
  4180c8:	mov    rdi,rbx
  4180cb:	call   416820 <flatcc_json_parser_set_error@@Base>
  4180d0:	jmp    4179b0 <flatcc_json_parser_generic_json@@Base+0x250>
  4180d5:	mov    rax,r15
  4180d8:	jmp    417c8b <flatcc_json_parser_generic_json@@Base+0x52b>
  4180dd:	mov    rax,rsi
  4180e0:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  4180e5:	mov    rax,rcx
  4180e8:	jmp    417dfe <flatcc_json_parser_generic_json@@Base+0x69e>
  4180ed:	mov    ecx,0x2
  4180f2:	mov    rdx,r15
  4180f5:	mov    rsi,r10
  4180f8:	mov    rdi,rbx
  4180fb:	call   416820 <flatcc_json_parser_set_error@@Base>
  418100:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  418105:	mov    ecx,0x5
  41810a:	mov    rdx,r15
  41810d:	mov    rsi,rax
  418110:	mov    rdi,rbx
  418113:	call   416820 <flatcc_json_parser_set_error@@Base>
  418118:	jmp    417c94 <flatcc_json_parser_generic_json@@Base+0x534>
  41811d:	lea    rsi,[rax+0x1]
  418121:	mov    ecx,0x6
  418126:	mov    rdx,r15
  418129:	mov    rdi,rbx
  41812c:	call   416820 <flatcc_json_parser_set_error@@Base>
  418131:	jmp    417951 <flatcc_json_parser_generic_json@@Base+0x1f1>
  418136:	mov    ecx,0x5
  41813b:	mov    rdx,r15
  41813e:	mov    rsi,r10
  418141:	mov    rdi,rbx
  418144:	call   416820 <flatcc_json_parser_set_error@@Base>
  418149:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  41814e:	mov    ecx,0x4
  418153:	mov    rdx,r15
  418156:	mov    rsi,rax
  418159:	mov    rdi,rbx
  41815c:	call   416820 <flatcc_json_parser_set_error@@Base>
  418161:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  418166:	mov    ecx,0xa
  41816b:	mov    rdx,r15
  41816e:	mov    rsi,r15
  418171:	mov    rdi,rbx
  418174:	call   416820 <flatcc_json_parser_set_error@@Base>
  418179:	jmp    417a92 <flatcc_json_parser_generic_json@@Base+0x332>
  41817e:	mov    rdx,r15
  418181:	mov    rax,r10
  418184:	sub    rdx,r10
  418187:	cmp    rdx,0x1
  41818b:	jg     417ca8 <flatcc_json_parser_generic_json@@Base+0x548>
  418191:	jmp    417cb1 <flatcc_json_parser_generic_json@@Base+0x551>
  418196:	call   403080 <__stack_chk_fail@plt>
  41819b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004181a0 <flatcc_json_parser_unmatched_symbol@@Base>:
  4181a0:	push   r12
  4181a2:	push   rbp
  4181a3:	mov    rbp,rdi
  4181a6:	push   rbx
  4181a7:	test   BYTE PTR [rdi+0x10],0x1
  4181ab:	mov    rbx,rdx
  4181ae:	je     418258 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
  4181b4:	mov    eax,DWORD PTR [rdi+0x14]
  4181b7:	test   eax,eax
  4181b9:	je     418270 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
  4181bf:	cmp    rsi,rdx
  4181c2:	je     41820a <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  4181c4:	movzx  ecx,BYTE PTR [rsi]
  4181c7:	cmp    cl,0x20
  4181ca:	jle    41820a <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  4181cc:	lea    rax,[rsi+0x1]
  4181d0:	movabs rdi,0x2000000000ffd
  4181da:	nop    WORD PTR [rax+rax*1+0x0]
  4181e0:	lea    edx,[rcx-0x2e]
  4181e3:	lea    rsi,[rax-0x1]
  4181e7:	cmp    dl,0x31
  4181ea:	jbe    4182d0 <flatcc_json_parser_unmatched_symbol@@Base+0x130>
  4181f0:	mov    edx,ecx
  4181f2:	or     edx,0x20
  4181f5:	sub    edx,0x61
  4181f8:	cmp    dl,0x19
  4181fb:	jbe    4182da <flatcc_json_parser_unmatched_symbol@@Base+0x13a>
  418201:	cmp    cl,0x2e
  418204:	je     418388 <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
  41820a:	mov    r12,rbx
  41820d:	mov    rax,r12
  418210:	sub    rax,rsi
  418213:	cmp    rax,0x1
  418217:	jle    418224 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
  418219:	cmp    BYTE PTR [rsi],0x20
  41821c:	jg     418232 <flatcc_json_parser_unmatched_symbol@@Base+0x92>
  41821e:	je     418300 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
  418224:	mov    rdx,rbx
  418227:	mov    rdi,rbp
  41822a:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41822f:	mov    rsi,rax
  418232:	cmp    rbx,rsi
  418235:	je     418240 <flatcc_json_parser_unmatched_symbol@@Base+0xa0>
  418237:	cmp    BYTE PTR [rsi],0x3a
  41823a:	je     418348 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
  418240:	mov    rdx,rbx
  418243:	mov    rdi,rbp
  418246:	mov    ecx,0x4
  41824b:	pop    rbx
  41824c:	pop    rbp
  41824d:	pop    r12
  41824f:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  418254:	nop    DWORD PTR [rax+0x0]
  418258:	mov    rdx,rbx
  41825b:	mov    rdi,rbp
  41825e:	mov    ecx,0xd
  418263:	pop    rbx
  418264:	pop    rbp
  418265:	pop    r12
  418267:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  41826c:	nop    DWORD PTR [rax+0x0]
  418270:	cmp    rsi,rdx
  418273:	je     4183ac <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
  418279:	movzx  edx,BYTE PTR [rsi]
  41827c:	mov    r12,rbx
  41827f:	cmp    dl,0x22
  418282:	jne    4182a6 <flatcc_json_parser_unmatched_symbol@@Base+0x106>
  418284:	jmp    418330 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
  418289:	nop    DWORD PTR [rax+0x0]
  418290:	lea    rsi,[rax+0x1]
  418294:	cmp    rbx,rsi
  418297:	je     4182c7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  418299:	movzx  edx,BYTE PTR [rax+0x1]
  41829d:	cmp    dl,0x22
  4182a0:	je     418338 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
  4182a6:	cmp    dl,0x5c
  4182a9:	mov    rax,rsi
  4182ac:	jne    418290 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  4182ae:	mov    rdx,rbx
  4182b1:	sub    rdx,rsi
  4182b4:	cmp    rdx,0x1
  4182b8:	jle    418313 <flatcc_json_parser_unmatched_symbol@@Base+0x173>
  4182ba:	add    rax,0x1
  4182be:	lea    rsi,[rax+0x1]
  4182c2:	cmp    rbx,rsi
  4182c5:	jne    418299 <flatcc_json_parser_unmatched_symbol@@Base+0xf9>
  4182c7:	mov    rsi,rbx
  4182ca:	jmp    418318 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
  4182cc:	nop    DWORD PTR [rax+0x0]
  4182d0:	bt     rdi,rdx
  4182d4:	jae    4181f0 <flatcc_json_parser_unmatched_symbol@@Base+0x50>
  4182da:	cmp    rbx,rax
  4182dd:	mov    rsi,rax
  4182e0:	je     418380 <flatcc_json_parser_unmatched_symbol@@Base+0x1e0>
  4182e6:	movzx  edx,BYTE PTR [rax]
  4182e9:	add    rax,0x1
  4182ed:	cmp    dl,0x20
  4182f0:	jle    418201 <flatcc_json_parser_unmatched_symbol@@Base+0x61>
  4182f6:	mov    ecx,edx
  4182f8:	jmp    4181e0 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
  4182fd:	nop    DWORD PTR [rax]
  418300:	cmp    BYTE PTR [rsi+0x1],0x20
  418304:	jle    418224 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
  41830a:	add    rsi,0x1
  41830e:	jmp    418232 <flatcc_json_parser_unmatched_symbol@@Base+0x92>
  418313:	cmp    BYTE PTR [rsi],0x22
  418316:	je     418338 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
  418318:	mov    ecx,0x14
  41831d:	mov    rdx,rbx
  418320:	mov    rdi,rbp
  418323:	call   416820 <flatcc_json_parser_set_error@@Base>
  418328:	mov    rsi,rax
  41832b:	jmp    41820d <flatcc_json_parser_unmatched_symbol@@Base+0x6d>
  418330:	mov    r12,rbx
  418333:	nop    DWORD PTR [rax+rax*1+0x0]
  418338:	add    rsi,0x1
  41833c:	jmp    41820d <flatcc_json_parser_unmatched_symbol@@Base+0x6d>
  418341:	nop    DWORD PTR [rax+0x0]
  418348:	lea    rax,[rsi+0x1]
  41834c:	sub    r12,rax
  41834f:	cmp    r12,0x1
  418353:	jle    41835d <flatcc_json_parser_unmatched_symbol@@Base+0x1bd>
  418355:	cmp    BYTE PTR [rsi+0x1],0x20
  418359:	jg     41836b <flatcc_json_parser_unmatched_symbol@@Base+0x1cb>
  41835b:	je     4183a0 <flatcc_json_parser_unmatched_symbol@@Base+0x200>
  41835d:	mov    rdx,rbx
  418360:	mov    rsi,rax
  418363:	mov    rdi,rbp
  418366:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  41836b:	mov    rdx,rbx
  41836e:	mov    rdi,rbp
  418371:	mov    rsi,rax
  418374:	pop    rbx
  418375:	pop    rbp
  418376:	pop    r12
  418378:	jmp    417760 <flatcc_json_parser_generic_json@@Base>
  41837d:	nop    DWORD PTR [rax]
  418380:	mov    rsi,rbx
  418383:	jmp    418201 <flatcc_json_parser_unmatched_symbol@@Base+0x61>
  418388:	mov    ecx,0x5
  41838d:	mov    rdx,rbx
  418390:	mov    rdi,rbp
  418393:	call   416820 <flatcc_json_parser_set_error@@Base>
  418398:	mov    rsi,rax
  41839b:	jmp    41820a <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  4183a0:	cmp    BYTE PTR [rsi+0x2],0x20
  4183a4:	jle    41835d <flatcc_json_parser_unmatched_symbol@@Base+0x1bd>
  4183a6:	lea    rax,[rsi+0x2]
  4183aa:	jmp    41836b <flatcc_json_parser_unmatched_symbol@@Base+0x1cb>
  4183ac:	mov    r12,rsi
  4183af:	jmp    418318 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
  4183b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4183bf:	nop

00000000004183c0 <flatcc_json_parser_integer@@Base>:
  4183c0:	cmp    rsi,rdx
  4183c3:	je     418470 <flatcc_json_parser_integer@@Base+0xb0>
  4183c9:	cmp    BYTE PTR [rsi],0x2d
  4183cc:	sete   al
  4183cf:	movzx  r9d,al
  4183d3:	movzx  eax,al
  4183d6:	add    rax,rsi
  4183d9:	mov    DWORD PTR [rcx],r9d
  4183dc:	cmp    rdx,rax
  4183df:	je     418476 <flatcc_json_parser_integer@@Base+0xb6>
  4183e5:	movsx  r9,BYTE PTR [rax]
  4183e9:	lea    ecx,[r9-0x30]
  4183ed:	cmp    cl,0x9
  4183f0:	ja     41842f <flatcc_json_parser_integer@@Base+0x6f>
  4183f2:	sub    r9,0x30
  4183f6:	jmp    41841f <flatcc_json_parser_integer@@Base+0x5f>
  4183f8:	nop    DWORD PTR [rax+rax*1+0x0]
  418400:	movsx  rcx,BYTE PTR [rax]
  418404:	lea    r10d,[rcx-0x30]
  418408:	cmp    r10b,0x9
  41840c:	ja     418438 <flatcc_json_parser_integer@@Base+0x78>
  41840e:	lea    r10,[r9+r9*4]
  418412:	lea    rcx,[rcx+r10*2-0x30]
  418417:	cmp    rcx,r9
  41841a:	jb     418460 <flatcc_json_parser_integer@@Base+0xa0>
  41841c:	mov    r9,rcx
  41841f:	add    rax,0x1
  418423:	cmp    rdx,rax
  418426:	jne    418400 <flatcc_json_parser_integer@@Base+0x40>
  418428:	mov    rax,rdx
  41842b:	mov    QWORD PTR [r8],r9
  41842e:	ret    
  41842f:	xor    r9d,r9d
  418432:	nop    WORD PTR [rax+rax*1+0x0]
  418438:	cmp    rsi,rax
  41843b:	je     418474 <flatcc_json_parser_integer@@Base+0xb4>
  41843d:	movzx  ecx,BYTE PTR [rax]
  418440:	mov    esi,ecx
  418442:	and    esi,0xffffffdf
  418445:	cmp    sil,0x45
  418449:	je     418450 <flatcc_json_parser_integer@@Base+0x90>
  41844b:	cmp    cl,0x2e
  41844e:	jne    41842b <flatcc_json_parser_integer@@Base+0x6b>
  418450:	mov    ecx,0xc
  418455:	mov    rsi,rax
  418458:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  41845d:	nop    DWORD PTR [rax]
  418460:	mov    ecx,0x8
  418465:	mov    rsi,rax
  418468:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  41846d:	nop    DWORD PTR [rax]
  418470:	mov    rax,rsi
  418473:	ret    
  418474:	repz ret 
  418476:	xor    r9d,r9d
  418479:	jmp    418428 <flatcc_json_parser_integer@@Base+0x68>
  41847b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000418480 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  418480:	push   r15
  418482:	push   r14
  418484:	mov    r14,rdx
  418487:	push   r13
  418489:	push   r12
  41848b:	mov    r13,rcx
  41848e:	push   rbp
  41848f:	push   rbx
  418490:	mov    r12d,r8d
  418493:	mov    rbx,rdi
  418496:	sub    rsp,0x38
  41849a:	mov    rax,QWORD PTR fs:0x28
  4184a3:	mov    QWORD PTR [rsp+0x28],rax
  4184a8:	xor    eax,eax
  4184aa:	test   r8d,r8d
  4184ad:	setne  BYTE PTR [rsp+0x8]
  4184b2:	cmp    rsi,rdx
  4184b5:	je     4184c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
  4184b7:	cmp    BYTE PTR [rsi],0x22
  4184ba:	lea    rbp,[rsi+0x1]
  4184be:	je     4184d3 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x53>
  4184c0:	mov    ecx,0x10
  4184c5:	mov    rdx,r14
  4184c8:	mov    rdi,rbx
  4184cb:	call   416820 <flatcc_json_parser_set_error@@Base>
  4184d0:	mov    rbp,rax
  4184d3:	mov    rdx,r14
  4184d6:	mov    rsi,rbp
  4184d9:	mov    rdi,rbx
  4184dc:	call   416840 <flatcc_json_parser_string_part@@Base>
  4184e1:	cmp    r14,rax
  4184e4:	mov    r15,rax
  4184e7:	je     4184ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  4184e9:	cmp    BYTE PTR [rax],0x22
  4184ec:	je     418538 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xb8>
  4184ee:	xor    ecx,ecx
  4184f0:	test   r12d,r12d
  4184f3:	mov    DWORD PTR [r13+0x0],0x0
  4184fb:	setne  cl
  4184fe:	add    ecx,0x1f
  418501:	mov    rax,QWORD PTR [rsp+0x28]
  418506:	xor    rax,QWORD PTR fs:0x28
  41850f:	jne    418878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  418515:	add    rsp,0x38
  418519:	mov    rdx,r14
  41851c:	mov    rsi,r15
  41851f:	mov    rdi,rbx
  418522:	pop    rbx
  418523:	pop    rbp
  418524:	pop    r12
  418526:	pop    r13
  418528:	pop    r14
  41852a:	pop    r15
  41852c:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  418531:	nop    DWORD PTR [rax+0x0]
  418538:	sub    rax,rbp
  41853b:	mov    rdx,rax
  41853e:	mov    QWORD PTR [rsp+0x18],rax
  418543:	shr    rax,0x2
  418547:	lea    rax,[rax+rax*2]
  41854b:	and    edx,0x3
  41854e:	cmp    rdx,0x2
  418552:	lea    rdi,[rax+0x1]
  418556:	mov    QWORD PTR [rsp+0x10],rdi
  41855b:	je     41856e <flatcc_json_parser_build_uint8_vector_base64@@Base+0xee>
  41855d:	lea    rsi,[rax+0x2]
  418561:	cmp    rdx,0x3
  418565:	cmove  rax,rsi
  418569:	mov    QWORD PTR [rsp+0x10],rax
  41856e:	mov    rdi,QWORD PTR [rbx]
  418571:	mov    ecx,0xffffffff
  418576:	mov    edx,0x1
  41857b:	mov    esi,0x1
  418580:	call   412e60 <flatcc_builder_start_vector@@Base>
  418585:	test   eax,eax
  418587:	jne    418648 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  41858d:	mov    rsi,QWORD PTR [rsp+0x10]
  418592:	mov    rdi,QWORD PTR [rbx]
  418595:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  41859a:	test   rax,rax
  41859d:	je     418648 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  4185a3:	cmp    BYTE PTR [rsp+0x8],0x1
  4185a8:	mov    rcx,QWORD PTR [rsp+0x10]
  4185ad:	lea    rdx,[rip+0x354c]        # 41bb00 <flatcc_builder_padding_base@@Base+0xaa0>
  4185b4:	lea    rdi,[rip+0x3445]        # 41ba00 <flatcc_builder_padding_base@@Base+0x9a0>
  4185bb:	mov    r9,QWORD PTR [rsp+0x18]
  4185c0:	mov    r11,rbp
  4185c3:	mov    r8,rax
  4185c6:	cmovne rdi,rdx
  4185ca:	test   rcx,rcx
  4185cd:	mov    rdx,0xffffffffffffffff
  4185d4:	cmovne rdx,rcx
  4185d8:	mov    QWORD PTR [rsp+0x8],rdx
  4185dd:	test   r9,r9
  4185e0:	je     418790 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
  4185e6:	mov    r10,r9
  4185e9:	xor    edx,edx
  4185eb:	movzx  ecx,BYTE PTR [r11+rdx*1]
  4185f0:	movzx  esi,BYTE PTR [rdi+rcx*1]
  4185f4:	cmp    sil,0x3f
  4185f8:	mov    BYTE PTR [rsp+rdx*1+0x24],sil
  4185fd:	jbe    41867c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
  4185ff:	cmp    sil,0x41
  418603:	je     418670 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
  418605:	cmp    sil,0x42
  418609:	mov    rcx,rdx
  41860c:	je     4186a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
  418612:	sub    r10,rcx
  418615:	cmp    rdx,0x2
  418619:	je     418760 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
  41861f:	cmp    rdx,0x3
  418623:	je     4186f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  418629:	test   rdx,rdx
  41862c:	je     418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  418632:	mov    r15,QWORD PTR [rsp+0x18]
  418637:	sub    r15,r9
  41863a:	add    r15,rbp
  41863d:	jmp    4184ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  418642:	nop    WORD PTR [rax+rax*1+0x0]
  418648:	mov    rax,QWORD PTR [rsp+0x28]
  41864d:	xor    rax,QWORD PTR fs:0x28
  418656:	mov    DWORD PTR [r13+0x0],0x0
  41865e:	jne    418878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  418664:	mov    ecx,0x21
  418669:	jmp    418515 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x95>
  41866e:	xchg   ax,ax
  418670:	add    r11,0x1
  418674:	sub    r10,0x1
  418678:	sub    rdx,0x1
  41867c:	add    rdx,0x1
  418680:	cmp    rdx,0x3
  418684:	ja     4187ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x36e>
  41868a:	cmp    rdx,r10
  41868d:	jne    4185eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16b>
  418693:	xor    r10d,r10d
  418696:	jmp    418615 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x195>
  41869b:	nop    DWORD PTR [rax+rax*1+0x0]
  4186a0:	lea    rcx,[rdx+0x1]
  4186a4:	cmp    rcx,0x7
  4186a8:	ja     418612 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  4186ae:	cmp    r10,rcx
  4186b1:	ja     4186d7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x257>
  4186b3:	jmp    418612 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  4186b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4186c0:	add    rcx,0x1
  4186c4:	cmp    r10,rcx
  4186c7:	jbe    418612 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  4186cd:	cmp    rcx,0x7
  4186d1:	ja     418612 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  4186d7:	movzx  esi,BYTE PTR [r11+rcx*1]
  4186dc:	movzx  esi,BYTE PTR [rdi+rsi*1]
  4186e0:	sub    esi,0x41
  4186e3:	cmp    sil,0x1
  4186e7:	jbe    4186c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x240>
  4186e9:	jmp    418612 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  4186ee:	xchg   ax,ax
  4186f0:	movzx  edx,BYTE PTR [rsp+0x26]
  4186f5:	mov    ecx,edx
  4186f7:	shl    ecx,0x6
  4186fa:	and    ecx,0xc0
  418700:	jne    418632 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  418706:	cmp    QWORD PTR [rsp+0x8],0x1
  41870c:	je     418632 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  418712:	movzx  ecx,BYTE PTR [rsp+0x25]
  418717:	movzx  esi,BYTE PTR [rsp+0x24]
  41871c:	shr    dl,0x2
  41871f:	add    r8,0x2
  418723:	lea    edi,[rsi*4+0x0]
  41872a:	mov    esi,ecx
  41872c:	shl    ecx,0x4
  41872f:	shr    sil,0x4
  418733:	or     edx,ecx
  418735:	or     esi,edi
  418737:	mov    BYTE PTR [r8-0x1],dl
  41873b:	mov    BYTE PTR [r8-0x2],sil
  41873f:	nop
  418740:	mov    rdi,QWORD PTR [rsp+0x18]
  418745:	mov    rdx,rdi
  418748:	sub    rdx,r10
  41874b:	cmp    rdi,rdx
  41874e:	je     418790 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
  418750:	lea    r15,[rbp+rdx*1+0x0]
  418755:	jmp    4184ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  41875a:	nop    WORD PTR [rax+rax*1+0x0]
  418760:	movzx  edx,BYTE PTR [rsp+0x25]
  418765:	mov    ecx,edx
  418767:	shl    ecx,0x4
  41876a:	and    ecx,0xf0
  418770:	jne    418632 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  418776:	movzx  ecx,BYTE PTR [rsp+0x24]
  41877b:	shr    dl,0x4
  41877e:	add    r8,0x1
  418782:	shl    ecx,0x2
  418785:	or     edx,ecx
  418787:	mov    BYTE PTR [r8-0x1],dl
  41878b:	jmp    418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  41878d:	nop    DWORD PTR [rax]
  418790:	sub    r8,rax
  418793:	cmp    QWORD PTR [rsp+0x10],r8
  418798:	jbe    4187b2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x332>
  41879a:	mov    rsi,QWORD PTR [rsp+0x10]
  41879f:	mov    rdi,QWORD PTR [rbx]
  4187a2:	sub    rsi,r8
  4187a5:	call   412cd0 <flatcc_builder_truncate_vector@@Base>
  4187aa:	test   eax,eax
  4187ac:	jne    418648 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  4187b2:	mov    rdi,QWORD PTR [rbx]
  4187b5:	call   413d60 <flatcc_builder_end_vector@@Base>
  4187ba:	test   eax,eax
  4187bc:	mov    DWORD PTR [r13+0x0],eax
  4187c0:	je     418648 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  4187c6:	cmp    BYTE PTR [r15],0x22
  4187ca:	je     418855 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d5>
  4187d0:	mov    rax,QWORD PTR [rsp+0x28]
  4187d5:	xor    rax,QWORD PTR fs:0x28
  4187de:	jne    418878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  4187e4:	mov    ecx,0x14
  4187e9:	jmp    418515 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x95>
  4187ee:	cmp    QWORD PTR [rsp+0x8],0x2
  4187f4:	jbe    418632 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  4187fa:	movzx  ecx,BYTE PTR [rsp+0x25]
  4187ff:	movzx  edx,BYTE PTR [rsp+0x24]
  418804:	add    r8,0x3
  418808:	add    r11,0x4
  41880c:	lea    r9,[r10-0x4]
  418810:	lea    esi,[rdx*4+0x0]
  418817:	mov    edx,ecx
  418819:	shl    ecx,0x4
  41881c:	shr    dl,0x4
  41881f:	or     edx,esi
  418821:	mov    BYTE PTR [r8-0x3],dl
  418825:	movzx  edx,BYTE PTR [rsp+0x26]
  41882a:	mov    esi,edx
  41882c:	shl    edx,0x6
  41882f:	or     dl,BYTE PTR [rsp+0x27]
  418833:	shr    sil,0x2
  418837:	or     ecx,esi
  418839:	mov    BYTE PTR [r8-0x2],cl
  41883d:	mov    BYTE PTR [r8-0x1],dl
  418841:	sub    QWORD PTR [rsp+0x8],0x3
  418847:	jne    4185dd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x15d>
  41884d:	mov    r10,r9
  418850:	jmp    418740 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  418855:	mov    rbx,QWORD PTR [rsp+0x28]
  41885a:	xor    rbx,QWORD PTR fs:0x28
  418863:	lea    rax,[r15+0x1]
  418867:	jne    418878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  418869:	add    rsp,0x38
  41886d:	pop    rbx
  41886e:	pop    rbp
  41886f:	pop    r12
  418871:	pop    r13
  418873:	pop    r14
  418875:	pop    r15
  418877:	ret    
  418878:	call   403080 <__stack_chk_fail@plt>
  41887d:	nop    DWORD PTR [rax]

0000000000418880 <flatcc_json_parser_build_string@@Base>:
  418880:	push   r15
  418882:	push   r14
  418884:	push   r13
  418886:	push   r12
  418888:	push   rbp
  418889:	push   rbx
  41888a:	mov    rbp,rdx
  41888d:	mov    rbx,rdi
  418890:	sub    rsp,0x28
  418894:	mov    rax,QWORD PTR fs:0x28
  41889d:	mov    QWORD PTR [rsp+0x18],rax
  4188a2:	xor    eax,eax
  4188a4:	cmp    rsi,rdx
  4188a7:	mov    QWORD PTR [rsp+0x8],rcx
  4188ac:	je     4188b7 <flatcc_json_parser_build_string@@Base+0x37>
  4188ae:	cmp    BYTE PTR [rsi],0x22
  4188b1:	lea    r12,[rsi+0x1]
  4188b5:	je     4188ca <flatcc_json_parser_build_string@@Base+0x4a>
  4188b7:	mov    ecx,0x10
  4188bc:	mov    rdx,rbp
  4188bf:	mov    rdi,rbx
  4188c2:	call   416820 <flatcc_json_parser_set_error@@Base>
  4188c7:	mov    r12,rax
  4188ca:	mov    rdx,rbp
  4188cd:	mov    rsi,r12
  4188d0:	mov    rdi,rbx
  4188d3:	call   416840 <flatcc_json_parser_string_part@@Base>
  4188d8:	cmp    rbp,rax
  4188db:	mov    r15,rax
  4188de:	je     4188e9 <flatcc_json_parser_build_string@@Base+0x69>
  4188e0:	cmp    BYTE PTR [rax],0x22
  4188e3:	je     4189f8 <flatcc_json_parser_build_string@@Base+0x178>
  4188e9:	mov    rdi,QWORD PTR [rbx]
  4188ec:	call   412f40 <flatcc_builder_start_string@@Base>
  4188f1:	test   eax,eax
  4188f3:	je     418930 <flatcc_json_parser_build_string@@Base+0xb0>
  4188f5:	mov    rax,QWORD PTR [rsp+0x8]
  4188fa:	mov    DWORD PTR [rax],0x0
  418900:	mov    rcx,QWORD PTR [rsp+0x18]
  418905:	xor    rcx,QWORD PTR fs:0x28
  41890e:	mov    rax,r15
  418911:	jne    418a40 <flatcc_json_parser_build_string@@Base+0x1c0>
  418917:	add    rsp,0x28
  41891b:	pop    rbx
  41891c:	pop    rbp
  41891d:	pop    r12
  41891f:	pop    r13
  418921:	pop    r14
  418923:	pop    r15
  418925:	ret    
  418926:	nop    WORD PTR cs:[rax+rax*1+0x0]
  418930:	mov    rdi,QWORD PTR [rbx]
  418933:	mov    rdx,r15
  418936:	mov    rsi,r12
  418939:	sub    rdx,r12
  41893c:	call   412bc0 <flatcc_builder_append_string@@Base>
  418941:	test   rax,rax
  418944:	je     4188f5 <flatcc_json_parser_build_string@@Base+0x75>
  418946:	cmp    rbp,r15
  418949:	je     4189c8 <flatcc_json_parser_build_string@@Base+0x148>
  41894b:	cmp    BYTE PTR [r15],0x22
  41894f:	je     418a20 <flatcc_json_parser_build_string@@Base+0x1a0>
  418955:	lea    r13,[rsp+0x14]
  41895a:	lea    r14,[r13+0x1]
  41895e:	jmp    418984 <flatcc_json_parser_build_string@@Base+0x104>
  418960:	mov    rdi,QWORD PTR [rbx]
  418963:	mov    rdx,rax
  418966:	mov    rsi,r12
  418969:	sub    rdx,r12
  41896c:	call   412bc0 <flatcc_builder_append_string@@Base>
  418971:	test   rax,rax
  418974:	je     4188f5 <flatcc_json_parser_build_string@@Base+0x75>
  41897a:	cmp    BYTE PTR [r15],0x22
  41897e:	je     418a20 <flatcc_json_parser_build_string@@Base+0x1a0>
  418984:	mov    rcx,r13
  418987:	mov    rdx,rbp
  41898a:	mov    rsi,r15
  41898d:	mov    rdi,rbx
  418990:	call   417000 <flatcc_json_parser_string_escape@@Base>
  418995:	movsx  rdx,BYTE PTR [rsp+0x14]
  41899b:	mov    rdi,QWORD PTR [rbx]
  41899e:	mov    rsi,r14
  4189a1:	mov    r12,rax
  4189a4:	call   412bc0 <flatcc_builder_append_string@@Base>
  4189a9:	test   rax,rax
  4189ac:	je     418a38 <flatcc_json_parser_build_string@@Base+0x1b8>
  4189b2:	mov    rdx,rbp
  4189b5:	mov    rsi,r12
  4189b8:	mov    rdi,rbx
  4189bb:	call   416840 <flatcc_json_parser_string_part@@Base>
  4189c0:	cmp    rbp,rax
  4189c3:	mov    r15,rax
  4189c6:	jne    418960 <flatcc_json_parser_build_string@@Base+0xe0>
  4189c8:	mov    rdi,QWORD PTR [rbx]
  4189cb:	call   414800 <flatcc_builder_end_string@@Base>
  4189d0:	mov    rcx,QWORD PTR [rsp+0x8]
  4189d5:	mov    DWORD PTR [rcx],eax
  4189d7:	mov    rsi,r15
  4189da:	mov    ecx,0x14
  4189df:	mov    rdx,rbp
  4189e2:	mov    rdi,rbx
  4189e5:	call   416820 <flatcc_json_parser_set_error@@Base>
  4189ea:	mov    r15,rax
  4189ed:	jmp    418900 <flatcc_json_parser_build_string@@Base+0x80>
  4189f2:	nop    WORD PTR [rax+rax*1+0x0]
  4189f8:	mov    rdi,QWORD PTR [rbx]
  4189fb:	mov    rdx,rax
  4189fe:	mov    rsi,r12
  418a01:	sub    rdx,r12
  418a04:	call   414670 <flatcc_builder_create_string@@Base>
  418a09:	mov    rcx,QWORD PTR [rsp+0x8]
  418a0e:	mov    DWORD PTR [rcx],eax
  418a10:	cmp    BYTE PTR [r15],0x22
  418a14:	jne    4189d7 <flatcc_json_parser_build_string@@Base+0x157>
  418a16:	add    r15,0x1
  418a1a:	jmp    418900 <flatcc_json_parser_build_string@@Base+0x80>
  418a1f:	nop
  418a20:	mov    rdi,QWORD PTR [rbx]
  418a23:	call   414800 <flatcc_builder_end_string@@Base>
  418a28:	mov    rcx,QWORD PTR [rsp+0x8]
  418a2d:	mov    DWORD PTR [rcx],eax
  418a2f:	jmp    418a10 <flatcc_json_parser_build_string@@Base+0x190>
  418a31:	nop    DWORD PTR [rax+0x0]
  418a38:	mov    r15,r12
  418a3b:	jmp    4188f5 <flatcc_json_parser_build_string@@Base+0x75>
  418a40:	call   403080 <__stack_chk_fail@plt>
  418a45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000418a50 <flatcc_json_parser_prepare_unions@@Base>:
  418a50:	lea    rax,[rcx+rcx*4]
  418a54:	push   r14
  418a56:	push   r13
  418a58:	push   r12
  418a5a:	push   rbp
  418a5b:	mov    rbp,rdi
  418a5e:	push   rbx
  418a5f:	mov    rdi,QWORD PTR [rdi]
  418a62:	mov    r12,rsi
  418a65:	lea    rsi,[rax*8+0x10]
  418a6d:	mov    r13,r8
  418a70:	mov    r14,rdx
  418a73:	mov    rbx,rcx
  418a76:	call   411d10 <flatcc_builder_enter_user_frame@@Base>
  418a7b:	test   rax,rax
  418a7e:	mov    QWORD PTR [r13+0x0],rax
  418a82:	je     418aa0 <flatcc_json_parser_prepare_unions@@Base+0x50>
  418a84:	mov    rdi,QWORD PTR [rbp+0x0]
  418a88:	mov    rsi,rax
  418a8b:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  418a90:	mov    QWORD PTR [rax],rbx
  418a93:	mov    rax,r12
  418a96:	pop    rbx
  418a97:	pop    rbp
  418a98:	pop    r12
  418a9a:	pop    r13
  418a9c:	pop    r14
  418a9e:	ret    
  418a9f:	nop
  418aa0:	pop    rbx
  418aa1:	mov    rdx,r14
  418aa4:	mov    rsi,r12
  418aa7:	mov    rdi,rbp
  418aaa:	pop    rbp
  418aab:	pop    r12
  418aad:	pop    r13
  418aaf:	pop    r14
  418ab1:	mov    ecx,0x21
  418ab6:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  418abb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000418ac0 <flatcc_json_parser_finalize_unions@@Base>:
  418ac0:	push   r13
  418ac2:	push   r12
  418ac4:	mov    r12,rsi
  418ac7:	push   rbp
  418ac8:	push   rbx
  418ac9:	mov    rbx,rdi
  418acc:	mov    rsi,rcx
  418acf:	mov    r13,rdx
  418ad2:	mov    rbp,rcx
  418ad5:	sub    rsp,0x8
  418ad9:	mov    rdi,QWORD PTR [rdi]
  418adc:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  418ae1:	cmp    QWORD PTR [rax+0x8],0x0
  418ae6:	je     418afe <flatcc_json_parser_finalize_unions@@Base+0x3e>
  418ae8:	mov    rsi,r12
  418aeb:	mov    ecx,0x1b
  418af0:	mov    rdx,r13
  418af3:	mov    rdi,rbx
  418af6:	call   416820 <flatcc_json_parser_set_error@@Base>
  418afb:	mov    r12,rax
  418afe:	mov    rdi,QWORD PTR [rbx]
  418b01:	mov    rsi,rbp
  418b04:	call   411e00 <flatcc_builder_exit_user_frame_at@@Base>
  418b09:	add    rsp,0x8
  418b0d:	mov    rax,r12
  418b10:	pop    rbx
  418b11:	pop    rbp
  418b12:	pop    r12
  418b14:	pop    r13
  418b16:	ret    
  418b17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418b20 <flatcc_json_parser_union@@Base>:
  418b20:	push   r15
  418b22:	push   r14
  418b24:	mov    r14d,r8d
  418b27:	push   r13
  418b29:	push   r12
  418b2b:	mov    r13,rsi
  418b2e:	push   rbp
  418b2f:	push   rbx
  418b30:	mov    rbx,rdi
  418b33:	mov    rbp,rcx
  418b36:	mov    rsi,r9
  418b39:	mov    r12,rdx
  418b3c:	sub    rsp,0x18
  418b40:	mov    rdi,QWORD PTR [rdi]
  418b43:	mov    rax,QWORD PTR fs:0x28
  418b4c:	mov    QWORD PTR [rsp+0x8],rax
  418b51:	xor    eax,eax
  418b53:	mov    r15,QWORD PTR [rsp+0x50]
  418b58:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  418b5d:	lea    rdx,[rbp+rbp*4+0x0]
  418b62:	mov    ecx,0x1c
  418b67:	lea    rdx,[rax+rdx*8]
  418b6b:	cmp    QWORD PTR [rdx+0x10],0x0
  418b70:	je     418bb0 <flatcc_json_parser_union@@Base+0x90>
  418b72:	mov    rdx,r12
  418b75:	mov    rsi,r13
  418b78:	mov    rdi,rbx
  418b7b:	call   416820 <flatcc_json_parser_set_error@@Base>
  418b80:	mov    rbp,rax
  418b83:	mov    rdi,QWORD PTR [rsp+0x8]
  418b88:	xor    rdi,QWORD PTR fs:0x28
  418b91:	mov    rax,rbp
  418b94:	jne    418c4d <flatcc_json_parser_union@@Base+0x12d>
  418b9a:	add    rsp,0x18
  418b9e:	pop    rbx
  418b9f:	pop    rbp
  418ba0:	pop    r12
  418ba2:	pop    r13
  418ba4:	pop    r14
  418ba6:	pop    r15
  418ba8:	ret    
  418ba9:	nop    DWORD PTR [rax+0x0]
  418bb0:	cmp    BYTE PTR [rdx+0x24],0x0
  418bb4:	je     418c20 <flatcc_json_parser_union@@Base+0x100>
  418bb6:	movzx  ecx,BYTE PTR [rdx+0x25]
  418bba:	test   cl,cl
  418bbc:	mov    BYTE PTR [rsp],cl
  418bbf:	je     418c10 <flatcc_json_parser_union@@Base+0xf0>
  418bc1:	sub    QWORD PTR [rax+0x8],0x1
  418bc6:	lea    r8,[rsp+0x4]
  418bcb:	mov    rdx,r12
  418bce:	mov    rsi,r13
  418bd1:	mov    rdi,rbx
  418bd4:	call   r15
  418bd7:	cmp    r12,rax
  418bda:	mov    rbp,rax
  418bdd:	je     418b83 <flatcc_json_parser_union@@Base+0x63>
  418bdf:	mov    rdx,QWORD PTR [rsp]
  418be3:	mov    rdi,QWORD PTR [rbx]
  418be6:	movzx  esi,r14w
  418bea:	call   414c30 <flatcc_builder_table_add_union@@Base>
  418bef:	test   eax,eax
  418bf1:	je     418b83 <flatcc_json_parser_union@@Base+0x63>
  418bf3:	mov    rsi,rbp
  418bf6:	mov    ecx,0x1c
  418bfb:	mov    rdx,r12
  418bfe:	mov    rdi,rbx
  418c01:	call   416820 <flatcc_json_parser_set_error@@Base>
  418c06:	mov    rbp,rax
  418c09:	jmp    418b83 <flatcc_json_parser_union@@Base+0x63>
  418c0e:	xchg   ax,ax
  418c10:	mov    ecx,0x19
  418c15:	jmp    418b72 <flatcc_json_parser_union@@Base+0x52>
  418c1a:	nop    WORD PTR [rax+rax*1+0x0]
  418c20:	add    QWORD PTR [rax+0x8],0x1
  418c25:	mov    eax,DWORD PTR [rbx+0x18]
  418c28:	mov    rsi,r13
  418c2b:	mov    rdi,rbx
  418c2e:	mov    DWORD PTR [rdx+0x20],eax
  418c31:	mov    rax,QWORD PTR [rbx+0x8]
  418c35:	mov    QWORD PTR [rdx+0x10],r13
  418c39:	mov    QWORD PTR [rdx+0x18],rax
  418c3d:	mov    rdx,r12
  418c40:	call   417760 <flatcc_json_parser_generic_json@@Base>
  418c45:	mov    rbp,rax
  418c48:	jmp    418b83 <flatcc_json_parser_union@@Base+0x63>
  418c4d:	call   403080 <__stack_chk_fail@plt>
  418c52:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418c5d:	nop    DWORD PTR [rax]

0000000000418c60 <flatcc_json_parser_union_type@@Base>:
  418c60:	push   r15
  418c62:	push   r14
  418c64:	push   r13
  418c66:	push   r12
  418c68:	mov    r13,rcx
  418c6b:	push   rbp
  418c6c:	push   rbx
  418c6d:	mov    rbx,rdi
  418c70:	mov    r12,rsi
  418c73:	mov    rsi,r9
  418c76:	mov    rbp,rdx
  418c79:	sub    rsp,0x48
  418c7d:	mov    rdi,QWORD PTR [rdi]
  418c80:	mov    rax,QWORD PTR [rsp+0x80]
  418c88:	mov    DWORD PTR [rsp+0xc],r8d
  418c8d:	mov    r14,QWORD PTR [rsp+0x88]
  418c95:	mov    QWORD PTR [rsp+0x10],rax
  418c9a:	mov    rax,QWORD PTR fs:0x28
  418ca3:	mov    QWORD PTR [rsp+0x38],rax
  418ca8:	xor    eax,eax
  418caa:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  418caf:	mov    r15,rax
  418cb2:	lea    rax,[r13+r13*4+0x0]
  418cb7:	lea    r9,[r15+rax*8+0x10]
  418cbc:	cmp    BYTE PTR [r9+0x14],0x0
  418cc1:	jne    418de0 <flatcc_json_parser_union_type@@Base+0x180>
  418cc7:	cmp    r12,rbp
  418cca:	mov    BYTE PTR [r9+0x14],0x1
  418ccf:	mov    DWORD PTR [rsp+0x2c],0x0
  418cd7:	mov    QWORD PTR [rsp+0x30],0x0
  418ce0:	mov    BYTE PTR [r9+0x15],0x0
  418ce5:	je     418e00 <flatcc_json_parser_union_type@@Base+0x1a0>
  418ceb:	lea    rcx,[rsp+0x2c]
  418cf0:	lea    r8,[rsp+0x30]
  418cf5:	mov    rdx,rbp
  418cf8:	mov    rsi,r12
  418cfb:	mov    rdi,rbx
  418cfe:	mov    QWORD PTR [rsp+0x18],r9
  418d03:	call   4183c0 <flatcc_json_parser_integer@@Base>
  418d08:	cmp    r12,rax
  418d0b:	mov    r13,rax
  418d0e:	mov    r9,QWORD PTR [rsp+0x18]
  418d13:	je     418e03 <flatcc_json_parser_union_type@@Base+0x1a3>
  418d19:	mov    eax,DWORD PTR [rsp+0x2c]
  418d1d:	mov    ecx,0x8
  418d22:	test   eax,eax
  418d24:	jne    418e3a <flatcc_json_parser_union_type@@Base+0x1da>
  418d2a:	mov    rax,QWORD PTR [rsp+0x30]
  418d2f:	cmp    rax,0xff
  418d35:	ja     418e30 <flatcc_json_parser_union_type@@Base+0x1d0>
  418d3b:	mov    BYTE PTR [r9+0x15],al
  418d3f:	mov    rsi,QWORD PTR [r9]
  418d42:	test   rsi,rsi
  418d45:	je     418e90 <flatcc_json_parser_union_type@@Base+0x230>
  418d4b:	mov    rax,QWORD PTR [r15+0x8]
  418d4f:	test   rax,rax
  418d52:	je     418ea8 <flatcc_json_parser_union_type@@Base+0x248>
  418d58:	sub    rax,0x1
  418d5c:	mov    r12,QWORD PTR [rbx+0x8]
  418d60:	lea    r8,[rsp+0x34]
  418d65:	mov    QWORD PTR [r15+0x8],rax
  418d69:	mov    eax,DWORD PTR [r9+0x10]
  418d6d:	mov    rdx,rbp
  418d70:	mov    r15d,DWORD PTR [rbx+0x18]
  418d74:	mov    rdi,rbx
  418d77:	mov    DWORD PTR [rbx+0x18],eax
  418d7a:	mov    rax,QWORD PTR [r9+0x8]
  418d7e:	mov    QWORD PTR [rbx+0x8],rax
  418d82:	movzx  ecx,BYTE PTR [r9+0x15]
  418d87:	mov    BYTE PTR [rsp+0x30],cl
  418d8b:	call   r14
  418d8e:	cmp    rbp,rax
  418d91:	je     418e60 <flatcc_json_parser_union_type@@Base+0x200>
  418d97:	movzx  esi,WORD PTR [rsp+0xc]
  418d9c:	mov    rdx,QWORD PTR [rsp+0x30]
  418da1:	mov    rdi,QWORD PTR [rbx]
  418da4:	call   414c30 <flatcc_builder_table_add_union@@Base>
  418da9:	test   eax,eax
  418dab:	jne    418e70 <flatcc_json_parser_union_type@@Base+0x210>
  418db1:	mov    DWORD PTR [rbx+0x18],r15d
  418db5:	mov    QWORD PTR [rbx+0x8],r12
  418db9:	mov    rdx,QWORD PTR [rsp+0x38]
  418dbe:	xor    rdx,QWORD PTR fs:0x28
  418dc7:	mov    rax,r13
  418dca:	jne    418ea3 <flatcc_json_parser_union_type@@Base+0x243>
  418dd0:	add    rsp,0x48
  418dd4:	pop    rbx
  418dd5:	pop    rbp
  418dd6:	pop    r12
  418dd8:	pop    r13
  418dda:	pop    r14
  418ddc:	pop    r15
  418dde:	ret    
  418ddf:	nop
  418de0:	mov    ecx,0x1c
  418de5:	mov    rdx,rbp
  418de8:	mov    rsi,r12
  418deb:	mov    rdi,rbx
  418dee:	call   416820 <flatcc_json_parser_set_error@@Base>
  418df3:	mov    r13,rax
  418df6:	jmp    418db9 <flatcc_json_parser_union_type@@Base+0x159>
  418df8:	nop    DWORD PTR [rax+rax*1+0x0]
  418e00:	mov    r13,rbp
  418e03:	mov    rcx,QWORD PTR [rsp+0x10]
  418e08:	lea    r8,[r9+0x15]
  418e0c:	mov    rsi,r13
  418e0f:	mov    rdx,rbp
  418e12:	mov    rdi,rbx
  418e15:	mov    QWORD PTR [rsp+0x18],r9
  418e1a:	call   416990 <flatcc_json_parser_space_ext@@Base+0xe0>
  418e1f:	mov    r9,QWORD PTR [rsp+0x18]
  418e24:	mov    r13,rax
  418e27:	jmp    418d3f <flatcc_json_parser_union_type@@Base+0xdf>
  418e2c:	nop    DWORD PTR [rax+0x0]
  418e30:	mov    QWORD PTR [rsp+0x18],r9
  418e35:	mov    ecx,0x7
  418e3a:	mov    rsi,r13
  418e3d:	mov    rdx,rbp
  418e40:	mov    rdi,rbx
  418e43:	call   416820 <flatcc_json_parser_set_error@@Base>
  418e48:	cmp    r12,rax
  418e4b:	mov    r13,rax
  418e4e:	mov    r9,QWORD PTR [rsp+0x18]
  418e53:	jne    418d3f <flatcc_json_parser_union_type@@Base+0xdf>
  418e59:	jmp    418e03 <flatcc_json_parser_union_type@@Base+0x1a3>
  418e5b:	nop    DWORD PTR [rax+rax*1+0x0]
  418e60:	mov    r13,rbp
  418e63:	jmp    418db9 <flatcc_json_parser_union_type@@Base+0x159>
  418e68:	nop    DWORD PTR [rax+rax*1+0x0]
  418e70:	mov    rsi,r13
  418e73:	mov    ecx,0x1c
  418e78:	mov    rdx,rbp
  418e7b:	mov    rdi,rbx
  418e7e:	call   416820 <flatcc_json_parser_set_error@@Base>
  418e83:	mov    r13,rax
  418e86:	jmp    418db9 <flatcc_json_parser_union_type@@Base+0x159>
  418e8b:	nop    DWORD PTR [rax+rax*1+0x0]
  418e90:	xor    eax,eax
  418e92:	cmp    BYTE PTR [r9+0x15],0x0
  418e97:	setne  al
  418e9a:	add    QWORD PTR [r15+0x8],rax
  418e9e:	jmp    418db9 <flatcc_json_parser_union_type@@Base+0x159>
  418ea3:	call   403080 <__stack_chk_fail@plt>
  418ea8:	lea    rcx,[rip+0x2b21]        # 41b9d0 <flatcc_builder_padding_base@@Base+0x970>
  418eaf:	lea    rsi,[rip+0x252a]        # 41b3e0 <flatcc_builder_padding_base@@Base+0x380>
  418eb6:	lea    rdi,[rip+0x281e]        # 41b6db <flatcc_builder_padding_base@@Base+0x67b>
  418ebd:	mov    edx,0x3c5
  418ec2:	call   4030a0 <__assert_fail@plt>
  418ec7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418ed0 <flatcc_json_parser_union_vector@@Base>:
  418ed0:	push   r15
  418ed2:	push   r14
  418ed4:	mov    r15d,r8d
  418ed7:	push   r13
  418ed9:	push   r12
  418edb:	mov    r12,rsi
  418ede:	push   rbp
  418edf:	push   rbx
  418ee0:	mov    rbx,rdi
  418ee3:	mov    rbp,rcx
  418ee6:	mov    rsi,r9
  418ee9:	mov    r13,rdx
  418eec:	sub    rsp,0x8
  418ef0:	mov    rdi,QWORD PTR [rdi]
  418ef3:	mov    r14,QWORD PTR [rsp+0x40]
  418ef8:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  418efd:	lea    rdx,[rbp+rbp*4+0x0]
  418f02:	lea    rcx,[rax+rdx*8+0x10]
  418f07:	cmp    QWORD PTR [rcx],0x0
  418f0b:	je     418f30 <flatcc_json_parser_union_vector@@Base+0x60>
  418f0d:	add    rsp,0x8
  418f11:	mov    rdx,r13
  418f14:	mov    rsi,r12
  418f17:	mov    rdi,rbx
  418f1a:	mov    ecx,0x1c
  418f1f:	pop    rbx
  418f20:	pop    rbp
  418f21:	pop    r12
  418f23:	pop    r13
  418f25:	pop    r14
  418f27:	pop    r15
  418f29:	jmp    416820 <flatcc_json_parser_set_error@@Base>
  418f2e:	xchg   ax,ax
  418f30:	cmp    BYTE PTR [rcx+0x14],0x0
  418f34:	je     418f70 <flatcc_json_parser_union_vector@@Base+0xa0>
  418f36:	sub    QWORD PTR [rax+0x8],0x1
  418f3b:	mov    r8d,DWORD PTR [rcx+0x18]
  418f3f:	movzx  r9d,r15w
  418f43:	mov    rcx,QWORD PTR [rcx+0x20]
  418f47:	mov    QWORD PTR [rsp+0x40],r14
  418f4c:	add    rsp,0x8
  418f50:	mov    rdx,r13
  418f53:	mov    rsi,r12
  418f56:	mov    rdi,rbx
  418f59:	pop    rbx
  418f5a:	pop    rbp
  418f5b:	pop    r12
  418f5d:	pop    r13
  418f5f:	pop    r14
  418f61:	pop    r15
  418f63:	jmp    416bc0 <flatcc_json_parser_space_ext@@Base+0x310>
  418f68:	nop    DWORD PTR [rax+rax*1+0x0]
  418f70:	add    QWORD PTR [rax+0x8],0x1
  418f75:	mov    eax,DWORD PTR [rbx+0x18]
  418f78:	mov    rdx,r13
  418f7b:	mov    rsi,r12
  418f7e:	mov    rdi,rbx
  418f81:	mov    DWORD PTR [rcx+0x10],eax
  418f84:	mov    rax,QWORD PTR [rbx+0x8]
  418f88:	mov    QWORD PTR [rcx],r12
  418f8b:	mov    QWORD PTR [rcx+0x8],rax
  418f8f:	add    rsp,0x8
  418f93:	pop    rbx
  418f94:	pop    rbp
  418f95:	pop    r12
  418f97:	pop    r13
  418f99:	pop    r14
  418f9b:	pop    r15
  418f9d:	jmp    417760 <flatcc_json_parser_generic_json@@Base>
  418fa2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418fad:	nop    DWORD PTR [rax]

0000000000418fb0 <flatcc_json_parser_union_type_vector@@Base>:
  418fb0:	push   r15
  418fb2:	push   r14
  418fb4:	push   r13
  418fb6:	push   r12
  418fb8:	mov    r12,rdi
  418fbb:	push   rbp
  418fbc:	push   rbx
  418fbd:	mov    r13,rcx
  418fc0:	mov    rbp,rsi
  418fc3:	mov    rsi,r9
  418fc6:	mov    rbx,rdx
  418fc9:	sub    rsp,0x78
  418fcd:	mov    rdi,QWORD PTR [rdi]
  418fd0:	mov    rax,QWORD PTR [rsp+0xb0]
  418fd8:	mov    DWORD PTR [rsp+0x2c],r8d
  418fdd:	mov    QWORD PTR [rsp+0x30],r9
  418fe2:	mov    r14,QWORD PTR [rsp+0xc0]
  418fea:	mov    QWORD PTR [rsp+0x20],rax
  418fef:	mov    rax,QWORD PTR [rsp+0xb8]
  418ff7:	mov    QWORD PTR [rsp+0x38],rax
  418ffc:	mov    rax,QWORD PTR fs:0x28
  419005:	mov    QWORD PTR [rsp+0x68],rax
  41900a:	xor    eax,eax
  41900c:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  419011:	lea    rdx,[r13+r13*4+0x0]
  419016:	lea    rcx,[rdx*8+0x0]
  41901e:	lea    rax,[rax+rcx*1+0x10]
  419023:	mov    QWORD PTR [rsp+0x40],rcx
  419028:	cmp    BYTE PTR [rax+0x14],0x0
  41902c:	mov    QWORD PTR [rsp+0x18],rax
  419031:	jne    419130 <flatcc_json_parser_union_type_vector@@Base+0x180>
  419037:	mov    rax,QWORD PTR [rsp+0x18]
  41903c:	mov    ecx,0xffffffff
  419041:	mov    edx,0x1
  419046:	mov    esi,0x1
  41904b:	mov    BYTE PTR [rax+0x14],0x1
  41904f:	mov    rdi,QWORD PTR [r12]
  419053:	call   412e60 <flatcc_builder_start_vector@@Base>
  419058:	test   eax,eax
  41905a:	jne    4190f0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  419060:	cmp    rbp,rbx
  419063:	je     41906f <flatcc_json_parser_union_type_vector@@Base+0xbf>
  419065:	cmp    BYTE PTR [rbp+0x0],0x5b
  419069:	je     419148 <flatcc_json_parser_union_type_vector@@Base+0x198>
  41906f:	mov    rsi,rbp
  419072:	mov    ecx,0x16
  419077:	mov    rdx,rbx
  41907a:	mov    rdi,r12
  41907d:	call   416820 <flatcc_json_parser_set_error@@Base>
  419082:	mov    rbp,rax
  419085:	nop    DWORD PTR [rax]
  419088:	mov    rdi,QWORD PTR [r12]
  41908c:	call   413e40 <flatcc_builder_vector_count@@Base>
  419091:	mov    r14,rax
  419094:	mov    rax,QWORD PTR [rsp+0x18]
  419099:	mov    rdi,QWORD PTR [r12]
  41909d:	mov    r15d,r14d
  4190a0:	mov    rsi,r15
  4190a3:	mov    DWORD PTR [rax+0x18],r14d
  4190a7:	call   411d10 <flatcc_builder_enter_user_frame@@Base>
  4190ac:	mov    rdi,QWORD PTR [r12]
  4190b0:	mov    rsi,rax
  4190b3:	mov    QWORD PTR [rsp+0x8],rax
  4190b8:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  4190bd:	mov    rdi,QWORD PTR [r12]
  4190c1:	mov    r13,rax
  4190c4:	call   413e50 <flatcc_builder_vector_edit@@Base>
  4190c9:	mov    rdx,r15
  4190cc:	mov    rsi,rax
  4190cf:	mov    rdi,r13
  4190d2:	call   4030f0 <memcpy@plt>
  4190d7:	mov    rdi,QWORD PTR [r12]
  4190db:	call   413d60 <flatcc_builder_end_vector@@Base>
  4190e0:	test   eax,eax
  4190e2:	mov    r15d,eax
  4190e5:	jne    4192b1 <flatcc_json_parser_union_type_vector@@Base+0x301>
  4190eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4190f0:	mov    ecx,0x21
  4190f5:	mov    rdx,rbx
  4190f8:	mov    rsi,rbp
  4190fb:	mov    rdi,r12
  4190fe:	call   416820 <flatcc_json_parser_set_error@@Base>
  419103:	mov    rdx,QWORD PTR [rsp+0x68]
  419108:	xor    rdx,QWORD PTR fs:0x28
  419111:	jne    419556 <flatcc_json_parser_union_type_vector@@Base+0x5a6>
  419117:	add    rsp,0x78
  41911b:	pop    rbx
  41911c:	pop    rbp
  41911d:	pop    r12
  41911f:	pop    r13
  419121:	pop    r14
  419123:	pop    r15
  419125:	ret    
  419126:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419130:	mov    ecx,0x1c
  419135:	mov    rdx,rbx
  419138:	mov    rsi,rbp
  41913b:	mov    rdi,r12
  41913e:	call   416820 <flatcc_json_parser_set_error@@Base>
  419143:	jmp    419103 <flatcc_json_parser_union_type_vector@@Base+0x153>
  419145:	nop    DWORD PTR [rax]
  419148:	lea    rsi,[rbp+0x1]
  41914c:	mov    rax,rbx
  41914f:	sub    rax,rsi
  419152:	cmp    rax,0x1
  419156:	jle    419168 <flatcc_json_parser_union_type_vector@@Base+0x1b8>
  419158:	cmp    BYTE PTR [rbp+0x1],0x20
  41915c:	jg     419372 <flatcc_json_parser_union_type_vector@@Base+0x3c2>
  419162:	je     419523 <flatcc_json_parser_union_type_vector@@Base+0x573>
  419168:	mov    rdx,rbx
  41916b:	mov    rdi,r12
  41916e:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  419173:	mov    rbp,rax
  419176:	cmp    rbx,rbp
  419179:	je     419185 <flatcc_json_parser_union_type_vector@@Base+0x1d5>
  41917b:	cmp    BYTE PTR [rbp+0x0],0x5d
  41917f:	je     41948d <flatcc_json_parser_union_type_vector@@Base+0x4dd>
  419185:	lea    rax,[rsp+0x5b]
  41918a:	mov    QWORD PTR [rsp+0x48],rax
  41918f:	lea    rax,[rsp+0x60]
  419194:	mov    QWORD PTR [rsp+0x8],rax
  419199:	lea    rax,[rsp+0x5c]
  41919e:	mov    QWORD PTR [rsp+0x10],rax
  4191a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4191a8:	mov    rdi,QWORD PTR [r12]
  4191ac:	mov    esi,0x1
  4191b1:	call   4127c0 <flatcc_builder_extend_vector@@Base>
  4191b6:	test   rax,rax
  4191b9:	mov    r13,rax
  4191bc:	je     4190f0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  4191c2:	cmp    rbx,rbp
  4191c5:	mov    QWORD PTR [rsp+0x60],0x0
  4191ce:	mov    DWORD PTR [rsp+0x5c],0x0
  4191d6:	mov    BYTE PTR [rsp+0x5b],0x0
  4191db:	je     4193f0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  4191e1:	mov    r8,QWORD PTR [rsp+0x8]
  4191e6:	mov    rcx,QWORD PTR [rsp+0x10]
  4191eb:	mov    rdx,rbx
  4191ee:	mov    rsi,rbp
  4191f1:	mov    rdi,r12
  4191f4:	call   4183c0 <flatcc_json_parser_integer@@Base>
  4191f9:	cmp    rax,rbp
  4191fc:	mov    r15,rax
  4191ff:	je     4193f0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  419205:	mov    esi,DWORD PTR [rsp+0x5c]
  419209:	mov    ecx,0x8
  41920e:	test   esi,esi
  419210:	jne    419395 <flatcc_json_parser_union_type_vector@@Base+0x3e5>
  419216:	mov    rax,QWORD PTR [rsp+0x60]
  41921b:	cmp    rax,0xff
  419221:	ja     419390 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  419227:	movzx  edi,al
  41922a:	mov    BYTE PTR [rsp+0x5b],al
  41922e:	call   r14
  419231:	test   eax,eax
  419233:	jne    419380 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  419239:	test   BYTE PTR [r12+0x10],0x1
  41923f:	je     4194e8 <flatcc_json_parser_union_type_vector@@Base+0x538>
  419245:	mov    BYTE PTR [rsp+0x5b],0x0
  41924a:	xor    eax,eax
  41924c:	mov    BYTE PTR [r13+0x0],al
  419250:	mov    rax,rbx
  419253:	sub    rax,r15
  419256:	cmp    rax,0x1
  41925a:	jle    419268 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
  41925c:	cmp    BYTE PTR [r15],0x20
  419260:	jg     419279 <flatcc_json_parser_union_type_vector@@Base+0x2c9>
  419262:	je     419420 <flatcc_json_parser_union_type_vector@@Base+0x470>
  419268:	mov    rsi,r15
  41926b:	mov    rdx,rbx
  41926e:	mov    rdi,r12
  419271:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  419276:	mov    r15,rax
  419279:	cmp    rbx,r15
  41927c:	je     419440 <flatcc_json_parser_union_type_vector@@Base+0x490>
  419282:	movzx  eax,BYTE PTR [r15]
  419286:	cmp    al,0x2c
  419288:	je     419450 <flatcc_json_parser_union_type_vector@@Base+0x4a0>
  41928e:	cmp    al,0x5d
  419290:	je     4193b8 <flatcc_json_parser_union_type_vector@@Base+0x408>
  419296:	mov    ecx,0x9
  41929b:	mov    rdx,rbx
  41929e:	mov    rsi,r15
  4192a1:	mov    rdi,r12
  4192a4:	call   416820 <flatcc_json_parser_set_error@@Base>
  4192a9:	mov    rbp,rax
  4192ac:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  4192b1:	movzx  r13d,WORD PTR [rsp+0x2c]
  4192b7:	mov    rdi,QWORD PTR [r12]
  4192bb:	lea    esi,[r13-0x1]
  4192bf:	call   414af0 <flatcc_builder_table_add_offset@@Base>
  4192c4:	test   rax,rax
  4192c7:	je     4190f0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  4192cd:	mov    rsi,QWORD PTR [rsp+0x30]
  4192d2:	mov    rdi,QWORD PTR [r12]
  4192d6:	mov    DWORD PTR [rax],r15d
  4192d9:	call   411e50 <flatcc_builder_get_user_frame_ptr@@Base>
  4192de:	mov    rdx,QWORD PTR [rsp+0x40]
  4192e3:	mov    rcx,QWORD PTR [rsp+0x8]
  4192e8:	lea    rdx,[rax+rdx*1+0x10]
  4192ed:	mov    rsi,QWORD PTR [rdx]
  4192f0:	mov    QWORD PTR [rdx+0x20],rcx
  4192f4:	test   rsi,rsi
  4192f7:	je     419549 <flatcc_json_parser_union_type_vector@@Base+0x599>
  4192fd:	mov    rcx,QWORD PTR [rax+0x8]
  419301:	test   rcx,rcx
  419304:	je     41955b <flatcc_json_parser_union_type_vector@@Base+0x5ab>
  41930a:	sub    rcx,0x1
  41930e:	sub    rsp,0x8
  419312:	mov    r15d,DWORD PTR [r12+0x18]
  419317:	mov    QWORD PTR [rax+0x8],rcx
  41931b:	mov    rax,QWORD PTR [r12+0x8]
  419320:	mov    r9d,r13d
  419323:	mov    r8d,r14d
  419326:	mov    rdi,r12
  419329:	mov    QWORD PTR [rsp+0x18],rax
  41932e:	mov    eax,DWORD PTR [rdx+0x10]
  419331:	mov    DWORD PTR [r12+0x18],eax
  419336:	mov    rax,QWORD PTR [rdx+0x8]
  41933a:	mov    rdx,rbx
  41933d:	push   QWORD PTR [rsp+0x40]
  419341:	mov    rcx,QWORD PTR [rsp+0x18]
  419346:	mov    QWORD PTR [r12+0x8],rax
  41934b:	call   416bc0 <flatcc_json_parser_space_ext@@Base+0x310>
  419350:	cmp    rbx,rax
  419353:	pop    rdx
  419354:	pop    rcx
  419355:	je     419103 <flatcc_json_parser_union_type_vector@@Base+0x153>
  41935b:	mov    rax,QWORD PTR [rsp+0x10]
  419360:	mov    DWORD PTR [r12+0x18],r15d
  419365:	mov    QWORD PTR [r12+0x8],rax
  41936a:	mov    rax,rbp
  41936d:	jmp    419103 <flatcc_json_parser_union_type_vector@@Base+0x153>
  419372:	mov    rbp,rsi
  419375:	jmp    419176 <flatcc_json_parser_union_type_vector@@Base+0x1c6>
  41937a:	nop    WORD PTR [rax+rax*1+0x0]
  419380:	movzx  eax,BYTE PTR [rsp+0x5b]
  419385:	jmp    41924c <flatcc_json_parser_union_type_vector@@Base+0x29c>
  41938a:	nop    WORD PTR [rax+rax*1+0x0]
  419390:	mov    ecx,0x7
  419395:	mov    rsi,r15
  419398:	mov    rdx,rbx
  41939b:	mov    rdi,r12
  41939e:	call   416820 <flatcc_json_parser_set_error@@Base>
  4193a3:	cmp    rax,rbp
  4193a6:	mov    r15,rax
  4193a9:	je     4193f0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  4193ab:	movzx  edi,BYTE PTR [rsp+0x5b]
  4193b0:	jmp    41922e <flatcc_json_parser_union_type_vector@@Base+0x27e>
  4193b5:	nop    DWORD PTR [rax]
  4193b8:	lea    rbp,[r15+0x1]
  4193bc:	mov    rax,rbx
  4193bf:	sub    rax,rbp
  4193c2:	cmp    rax,0x1
  4193c6:	jle    4193d9 <flatcc_json_parser_union_type_vector@@Base+0x429>
  4193c8:	cmp    BYTE PTR [r15+0x1],0x20
  4193cd:	jg     419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  4193d3:	je     4194c0 <flatcc_json_parser_union_type_vector@@Base+0x510>
  4193d9:	mov    rsi,rbp
  4193dc:	mov    rdx,rbx
  4193df:	mov    rdi,r12
  4193e2:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4193e7:	mov    rbp,rax
  4193ea:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  4193ef:	nop
  4193f0:	mov    r8,QWORD PTR [rsp+0x48]
  4193f5:	mov    rcx,QWORD PTR [rsp+0x20]
  4193fa:	mov    rdx,rbx
  4193fd:	mov    rsi,rbp
  419400:	mov    rdi,r12
  419403:	call   416990 <flatcc_json_parser_space_ext@@Base+0xe0>
  419408:	cmp    rax,rbp
  41940b:	mov    r15,rax
  41940e:	je     419415 <flatcc_json_parser_union_type_vector@@Base+0x465>
  419410:	cmp    rbx,rax
  419413:	jne    4193ab <flatcc_json_parser_union_type_vector@@Base+0x3fb>
  419415:	mov    rbp,r15
  419418:	jmp    4190f0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  41941d:	nop    DWORD PTR [rax]
  419420:	cmp    BYTE PTR [r15+0x1],0x20
  419425:	jle    419268 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
  41942b:	add    r15,0x1
  41942f:	cmp    rbx,r15
  419432:	jne    419282 <flatcc_json_parser_union_type_vector@@Base+0x2d2>
  419438:	nop    DWORD PTR [rax+rax*1+0x0]
  419440:	mov    rbp,rbx
  419443:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  419448:	nop    DWORD PTR [rax+rax*1+0x0]
  419450:	lea    rbp,[r15+0x1]
  419454:	mov    rax,rbx
  419457:	sub    rax,rbp
  41945a:	cmp    rax,0x1
  41945e:	jle    419469 <flatcc_json_parser_union_type_vector@@Base+0x4b9>
  419460:	cmp    BYTE PTR [r15+0x1],0x20
  419465:	jg     41947a <flatcc_json_parser_union_type_vector@@Base+0x4ca>
  419467:	je     4194d8 <flatcc_json_parser_union_type_vector@@Base+0x528>
  419469:	mov    rsi,rbp
  41946c:	mov    rdx,rbx
  41946f:	mov    rdi,r12
  419472:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  419477:	mov    rbp,rax
  41947a:	cmp    rbx,rbp
  41947d:	je     419500 <flatcc_json_parser_union_type_vector@@Base+0x550>
  419483:	cmp    BYTE PTR [rbp+0x0],0x5d
  419487:	jne    4191a8 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
  41948d:	lea    rsi,[rbp+0x1]
  419491:	mov    rax,rbx
  419494:	sub    rax,rsi
  419497:	cmp    rax,0x1
  41949b:	jle    4194a9 <flatcc_json_parser_union_type_vector@@Base+0x4f9>
  41949d:	cmp    BYTE PTR [rbp+0x1],0x20
  4194a1:	jg     41951b <flatcc_json_parser_union_type_vector@@Base+0x56b>
  4194a3:	je     419536 <flatcc_json_parser_union_type_vector@@Base+0x586>
  4194a9:	mov    rdx,rbx
  4194ac:	mov    rdi,r12
  4194af:	call   4168b0 <flatcc_json_parser_space_ext@@Base>
  4194b4:	mov    rbp,rax
  4194b7:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  4194bc:	nop    DWORD PTR [rax+0x0]
  4194c0:	cmp    BYTE PTR [r15+0x2],0x20
  4194c5:	jle    4193d9 <flatcc_json_parser_union_type_vector@@Base+0x429>
  4194cb:	lea    rbp,[r15+0x2]
  4194cf:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  4194d4:	nop    DWORD PTR [rax+0x0]
  4194d8:	cmp    BYTE PTR [r15+0x2],0x20
  4194dd:	jle    419469 <flatcc_json_parser_union_type_vector@@Base+0x4b9>
  4194df:	lea    rbp,[r15+0x2]
  4194e3:	jmp    41947a <flatcc_json_parser_union_type_vector@@Base+0x4ca>
  4194e5:	nop    DWORD PTR [rax]
  4194e8:	mov    ecx,0xf
  4194ed:	mov    rdx,rbx
  4194f0:	mov    rsi,r15
  4194f3:	mov    rdi,r12
  4194f6:	call   416820 <flatcc_json_parser_set_error@@Base>
  4194fb:	jmp    419103 <flatcc_json_parser_union_type_vector@@Base+0x153>
  419500:	mov    ecx,0x9
  419505:	mov    rdx,rbx
  419508:	mov    rsi,rbx
  41950b:	mov    rdi,r12
  41950e:	call   416820 <flatcc_json_parser_set_error@@Base>
  419513:	mov    rbp,rax
  419516:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  41951b:	mov    rbp,rsi
  41951e:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  419523:	cmp    BYTE PTR [rbp+0x2],0x20
  419527:	jle    419168 <flatcc_json_parser_union_type_vector@@Base+0x1b8>
  41952d:	add    rbp,0x2
  419531:	jmp    419176 <flatcc_json_parser_union_type_vector@@Base+0x1c6>
  419536:	cmp    BYTE PTR [rbp+0x2],0x20
  41953a:	jle    4194a9 <flatcc_json_parser_union_type_vector@@Base+0x4f9>
  419540:	add    rbp,0x2
  419544:	jmp    419088 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  419549:	add    QWORD PTR [rax+0x8],0x1
  41954e:	mov    rax,rbp
  419551:	jmp    419103 <flatcc_json_parser_union_type_vector@@Base+0x153>
  419556:	call   403080 <__stack_chk_fail@plt>
  41955b:	lea    rcx,[rip+0x243e]        # 41b9a0 <flatcc_builder_padding_base@@Base+0x940>
  419562:	lea    rsi,[rip+0x1e77]        # 41b3e0 <flatcc_builder_padding_base@@Base+0x380>
  419569:	lea    rdi,[rip+0x216b]        # 41b6db <flatcc_builder_padding_base@@Base+0x67b>
  419570:	mov    edx,0x462
  419575:	call   4030a0 <__assert_fail@plt>
  41957a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419580 <flatcc_json_parser_struct_as_root@@Base>:
  419580:	push   r14
  419582:	push   r13
  419584:	mov    r13,rdx
  419587:	push   r12
  419589:	push   rbp
  41958a:	mov    edx,r8d
  41958d:	push   rbx
  41958e:	mov    rbx,rsi
  419591:	mov    rbp,rdi
  419594:	lea    r14,[r13+rcx*1+0x0]
  419599:	sub    rsp,0x60
  41959d:	mov    rax,QWORD PTR fs:0x28
  4195a6:	mov    QWORD PTR [rsp+0x58],rax
  4195ab:	xor    eax,eax
  4195ad:	and    edx,0x4
  4195b0:	mov    eax,0x2
  4195b5:	mov    r12,QWORD PTR [rsp+0x90]
  4195bd:	cmovne edx,eax
  4195c0:	lea    rax,[rsp+0x10]
  4195c5:	test   rsi,rsi
  4195c8:	mov    rsi,r9
  4195cb:	cmove  rbx,rax
  4195cf:	xor    eax,eax
  4195d1:	lea    rdi,[rbx+0x8]
  4195d5:	mov    rcx,rbx
  4195d8:	mov    QWORD PTR [rbx+0x40],0x0
  4195e0:	and    rdi,0xfffffffffffffff8
  4195e4:	sub    rcx,rdi
  4195e7:	add    ecx,0x48
  4195ea:	shr    ecx,0x3
  4195ed:	rep stos QWORD PTR es:[rdi],rax
  4195f0:	mov    ecx,edx
  4195f2:	mov    QWORD PTR [rbx],rbp
  4195f5:	xor    edx,edx
  4195f7:	mov    QWORD PTR [rbx+0x8],r13
  4195fb:	mov    DWORD PTR [rbx+0x18],0x1
  419602:	mov    rdi,rbp
  419605:	mov    DWORD PTR [rbx+0x10],r8d
  419609:	mov    QWORD PTR [rbx+0x28],r13
  41960d:	mov    QWORD PTR [rbx+0x30],r14
  419611:	mov    QWORD PTR [rbx+0x38],r13
  419615:	call   412410 <flatcc_builder_start_buffer@@Base>
  41961a:	test   eax,eax
  41961c:	jne    419680 <flatcc_json_parser_struct_as_root@@Base+0x100>
  41961e:	lea    rcx,[rsp+0xc]
  419623:	mov    rdx,r14
  419626:	mov    rsi,r13
  419629:	mov    rdi,rbx
  41962c:	call   r12
  41962f:	mov    r12d,DWORD PTR [rbx+0x20]
  419633:	test   r12d,r12d
  419636:	je     419660 <flatcc_json_parser_struct_as_root@@Base+0xe0>
  419638:	mov    rsi,QWORD PTR [rsp+0x58]
  41963d:	xor    rsi,QWORD PTR fs:0x28
  419646:	mov    eax,r12d
  419649:	jne    419688 <flatcc_json_parser_struct_as_root@@Base+0x108>
  41964b:	add    rsp,0x60
  41964f:	pop    rbx
  419650:	pop    rbp
  419651:	pop    r12
  419653:	pop    r13
  419655:	pop    r14
  419657:	ret    
  419658:	nop    DWORD PTR [rax+rax*1+0x0]
  419660:	mov    esi,DWORD PTR [rsp+0xc]
  419664:	mov    rdi,rbp
  419667:	call   4124f0 <flatcc_builder_end_buffer@@Base>
  41966c:	test   eax,eax
  41966e:	je     419680 <flatcc_json_parser_struct_as_root@@Base+0x100>
  419670:	mov    QWORD PTR [rbx+0x40],r13
  419674:	jmp    419638 <flatcc_json_parser_struct_as_root@@Base+0xb8>
  419676:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419680:	mov    r12d,0xffffffff
  419686:	jmp    419638 <flatcc_json_parser_struct_as_root@@Base+0xb8>
  419688:	call   403080 <__stack_chk_fail@plt>
  41968d:	nop    DWORD PTR [rax]

0000000000419690 <flatcc_json_parser_table_as_root@@Base>:
  419690:	jmp    419580 <flatcc_json_parser_struct_as_root@@Base>
  419695:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41969f:	nop

00000000004196a0 <__libc_csu_init@@Base>:
  4196a0:	endbr64 
  4196a4:	push   r15
  4196a6:	lea    r15,[rip+0x774b]        # 420df8 <flatcc_builder_padding_base@@Base+0x5d98>
  4196ad:	push   r14
  4196af:	mov    r14,rdx
  4196b2:	push   r13
  4196b4:	mov    r13,rsi
  4196b7:	push   r12
  4196b9:	mov    r12d,edi
  4196bc:	push   rbp
  4196bd:	lea    rbp,[rip+0x773c]        # 420e00 <flatcc_builder_padding_base@@Base+0x5da0>
  4196c4:	push   rbx
  4196c5:	sub    rbp,r15
  4196c8:	sub    rsp,0x8
  4196cc:	call   403000 <free@plt-0x30>
  4196d1:	sar    rbp,0x3
  4196d5:	je     4196f6 <__libc_csu_init@@Base+0x56>
  4196d7:	xor    ebx,ebx
  4196d9:	nop    DWORD PTR [rax+0x0]
  4196e0:	mov    rdx,r14
  4196e3:	mov    rsi,r13
  4196e6:	mov    edi,r12d
  4196e9:	call   QWORD PTR [r15+rbx*8]
  4196ed:	add    rbx,0x1
  4196f1:	cmp    rbp,rbx
  4196f4:	jne    4196e0 <__libc_csu_init@@Base+0x40>
  4196f6:	add    rsp,0x8
  4196fa:	pop    rbx
  4196fb:	pop    rbp
  4196fc:	pop    r12
  4196fe:	pop    r13
  419700:	pop    r14
  419702:	pop    r15
  419704:	ret    
  419705:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000419710 <__libc_csu_fini@@Base>:
  419710:	endbr64 
  419714:	ret    

Disassembly of section .fini:

0000000000419718 <.fini>:
  419718:	endbr64 
  41971c:	sub    rsp,0x8
  419720:	add    rsp,0x8
  419724:	ret    
