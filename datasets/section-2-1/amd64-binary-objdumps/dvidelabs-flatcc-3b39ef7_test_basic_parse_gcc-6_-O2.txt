
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xffe1]        # 412ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xffe2]        # 413008 <flatcc_builder_padding_base@@Base+0x51c8>
  403026:	jmp    QWORD PTR [rip+0xffe4]        # 413010 <flatcc_builder_padding_base@@Base+0x51d0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xffe2]        # 413018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strtod@plt>:
  403040:	jmp    QWORD PTR [rip+0xffda]        # 413020 <strtod@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xffd2]        # 413028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__stack_chk_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xffca]        # 413030 <__stack_chk_fail@GLIBC_2.4>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <__assert_fail@plt>:
  403070:	jmp    QWORD PTR [rip+0xffc2]        # 413038 <__assert_fail@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memset@plt>:
  403080:	jmp    QWORD PTR [rip+0xffba]        # 413040 <memset@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memchr@plt>:
  403090:	jmp    QWORD PTR [rip+0xffb2]        # 413048 <memchr@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcmp@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xffaa]        # 413050 <memcmp@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcpy@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xffa2]        # 413058 <memcpy@GLIBC_2.14>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <malloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xff9a]        # 413060 <malloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xff92]        # 413068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <__fprintf_chk@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xff8a]        # 413070 <__fprintf_chk@GLIBC_2.3.4>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <posix_memalign@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xff82]        # 413078 <posix_memalign@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403100 <main@@Base-0x90>:
  403100:	lea    rcx,[rip+0xad09]        # 40de10 <g_data@@Base+0xd50>
  403107:	lea    rsi,[rip+0xa23a]        # 40d348 <g_data@@Base+0x288>
  40310e:	lea    rdi,[rip+0xa5ca]        # 40d6df <g_data@@Base+0x61f>
  403115:	sub    rsp,0x8
  403119:	mov    edx,0x134
  40311e:	call   403070 <__assert_fail@plt>
  403123:	lea    rcx,[rip+0xac76]        # 40dda0 <g_data@@Base+0xce0>
  40312a:	lea    rsi,[rip+0xa217]        # 40d348 <g_data@@Base+0x288>
  403131:	lea    rdi,[rip+0xa5a7]        # 40d6df <g_data@@Base+0x61f>
  403138:	sub    rsp,0x8
  40313c:	mov    edx,0x2a1
  403141:	call   403070 <__assert_fail@plt>
  403146:	lea    rcx,[rip+0xac43]        # 40dd90 <g_data@@Base+0xcd0>
  40314d:	lea    rsi,[rip+0xa1f4]        # 40d348 <g_data@@Base+0x288>
  403154:	lea    rdi,[rip+0xa584]        # 40d6df <g_data@@Base+0x61f>
  40315b:	sub    rsp,0x8
  40315f:	mov    edx,0x28b
  403164:	call   403070 <__assert_fail@plt>
  403169:	lea    rcx,[rip+0xab80]        # 40dcf0 <g_data@@Base+0xc30>
  403170:	lea    rsi,[rip+0xa1d1]        # 40d348 <g_data@@Base+0x288>
  403177:	lea    rdi,[rip+0xa53a]        # 40d6b8 <g_data@@Base+0x5f8>
  40317e:	sub    rsp,0x8
  403182:	mov    edx,0x37c
  403187:	call   403070 <__assert_fail@plt>
  40318c:	nop    DWORD PTR [rax+0x0]

0000000000403190 <main@@Base>:
  403190:	push   rbx
  403191:	sub    rsp,0x1a0
  403198:	lea    rbx,[rsp+0x10]
  40319d:	mov    DWORD PTR [rsp+0xc],0xffffffff
  4031a5:	mov    rax,QWORD PTR fs:0x28
  4031ae:	mov    QWORD PTR [rsp+0x198],rax
  4031b6:	xor    eax,eax
  4031b8:	mov    rdi,rbx
  4031bb:	call   404dd0 <flatcc_builder_init@@Base>
  4031c0:	mov    rsi,0x40d0c0
  4031c7:	lea    rcx,[rsp+0xc]
  4031cc:	mov    rdi,rbx
  4031cf:	lea    rdx,[rsi+0x285]
  4031d6:	call   403320 <test@@Base>
  4031db:	mov    rdi,rbx
  4031de:	call   404fa0 <flatcc_builder_clear@@Base>
  4031e3:	mov    rdx,QWORD PTR [rsp+0x198]
  4031eb:	xor    rdx,QWORD PTR fs:0x28
  4031f4:	mov    eax,DWORD PTR [rsp+0xc]
  4031f8:	jne    403203 <main@@Base+0x73>
  4031fa:	add    rsp,0x1a0
  403201:	pop    rbx
  403202:	ret    
  403203:	call   403060 <__stack_chk_fail@plt>
  403208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403210 <_start@@Base>:
  403210:	endbr64 
  403214:	xor    ebp,ebp
  403216:	mov    r9,rdx
  403219:	pop    rsi
  40321a:	mov    rdx,rsp
  40321d:	and    rsp,0xfffffffffffffff0
  403221:	push   rax
  403222:	push   rsp
  403223:	mov    r8,0x40cad0
  40322a:	mov    rcx,0x40ca60
  403231:	mov    rdi,0x403190
  403238:	call   QWORD PTR [rip+0xfdaa]        # 412fe8 <__libc_start_main@GLIBC_2.2.5>
  40323e:	hlt    
  40323f:	nop
  403240:	endbr64 
  403244:	ret    
  403245:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40324f:	nop
  403250:	mov    eax,0x413117
  403255:	push   rbp
  403256:	sub    rax,0x413110
  40325c:	cmp    rax,0xe
  403260:	mov    rbp,rsp
  403263:	jbe    403280 <_start@@Base+0x70>
  403265:	mov    eax,0x0
  40326a:	test   rax,rax
  40326d:	je     403280 <_start@@Base+0x70>
  40326f:	pop    rbp
  403270:	mov    edi,0x413110
  403275:	jmp    rax
  403277:	nop    WORD PTR [rax+rax*1+0x0]
  403280:	pop    rbp
  403281:	ret    
  403282:	nop    DWORD PTR [rax+0x0]
  403286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403290:	mov    esi,0x413110
  403295:	push   rbp
  403296:	sub    rsi,0x413110
  40329d:	sar    rsi,0x3
  4032a1:	mov    rbp,rsp
  4032a4:	mov    rax,rsi
  4032a7:	shr    rax,0x3f
  4032ab:	add    rsi,rax
  4032ae:	sar    rsi,1
  4032b1:	je     4032c8 <_start@@Base+0xb8>
  4032b3:	mov    eax,0x0
  4032b8:	test   rax,rax
  4032bb:	je     4032c8 <_start@@Base+0xb8>
  4032bd:	pop    rbp
  4032be:	mov    edi,0x413110
  4032c3:	jmp    rax
  4032c5:	nop    DWORD PTR [rax]
  4032c8:	pop    rbp
  4032c9:	ret    
  4032ca:	nop    WORD PTR [rax+rax*1+0x0]
  4032d0:	cmp    BYTE PTR [rip+0xfe39],0x0        # 413110 <__bss_start@@Base>
  4032d7:	jne    4032ea <_start@@Base+0xda>
  4032d9:	push   rbp
  4032da:	mov    rbp,rsp
  4032dd:	call   403250 <_start@@Base+0x40>
  4032e2:	pop    rbp
  4032e3:	mov    BYTE PTR [rip+0xfe26],0x1        # 413110 <__bss_start@@Base>
  4032ea:	repz ret 
  4032ec:	nop    DWORD PTR [rax+0x0]
  4032f0:	mov    edi,0x412e10
  4032f5:	cmp    QWORD PTR [rdi],0x0
  4032f9:	jne    403300 <_start@@Base+0xf0>
  4032fb:	jmp    403290 <_start@@Base+0x80>
  4032fd:	nop    DWORD PTR [rax]
  403300:	mov    eax,0x0
  403305:	test   rax,rax
  403308:	je     4032fb <_start@@Base+0xeb>
  40330a:	push   rbp
  40330b:	mov    rbp,rsp
  40330e:	call   rax
  403310:	pop    rbp
  403311:	jmp    403290 <_start@@Base+0x80>
  403316:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403320 <test@@Base>:
  403320:	push   r15
  403322:	push   r14
  403324:	mov    r14,rsi
  403327:	push   r13
  403329:	push   r12
  40332b:	mov    r12,rdi
  40332e:	push   rbp
  40332f:	push   rbx
  403330:	mov    rbx,rdx
  403333:	xor    edx,edx
  403335:	sub    rsp,0xa8
  40333c:	lea    rbp,[rsp+0x40]
  403341:	mov    QWORD PTR [rsp+0x8],rcx
  403346:	mov    ecx,0x9
  40334b:	mov    rax,QWORD PTR fs:0x28
  403354:	mov    QWORD PTR [rsp+0x98],rax
  40335c:	xor    eax,eax
  40335e:	mov    rdi,rbp
  403361:	rep stos QWORD PTR es:[rdi],rax
  403364:	mov    QWORD PTR [rsp+0x48],rsi
  403369:	lea    rsi,[rip+0x9c94]        # 40d004 <_IO_stdin_used@@Base+0x4>
  403370:	mov    rdi,r12
  403373:	mov    DWORD PTR [rsp+0x58],0x1
  40337b:	call   4057d0 <flatcc_builder_start_buffer@@Base>
  403380:	mov    rax,rbx
  403383:	sub    rax,r14
  403386:	cmp    rax,0x1
  40338a:	jle    403398 <test@@Base+0x78>
  40338c:	cmp    BYTE PTR [r14],0x20
  403390:	jg     4033a9 <test@@Base+0x89>
  403392:	je     403490 <test@@Base+0x170>
  403398:	mov    rsi,r14
  40339b:	mov    rdx,rbx
  40339e:	mov    rdi,rbp
  4033a1:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  4033a6:	mov    r14,rax
  4033a9:	cmp    rbx,r14
  4033ac:	je     4036b0 <test@@Base+0x390>
  4033b2:	jbe    4033be <test@@Base+0x9e>
  4033b4:	cmp    BYTE PTR [r14],0x7b
  4033b8:	je     4034a8 <test@@Base+0x188>
  4033be:	mov    r15,QWORD PTR [rip+0xfc33]        # 412ff8 <stderr@GLIBC_2.2.5>
  4033c5:	mov    ecx,0x7b
  4033ca:	mov    rdi,QWORD PTR [r15]
  4033cd:	lea    rdx,[rip+0x9c43]        # 40d017 <_IO_stdin_used@@Base+0x17>
  4033d4:	mov    esi,0x1
  4033d9:	xor    eax,eax
  4033db:	call   4030e0 <__fprintf_chk@plt>
  4033e0:	mov    ecx,0x11
  4033e5:	mov    rdx,rbx
  4033e8:	mov    rsi,r14
  4033eb:	mov    rdi,rbp
  4033ee:	call   409be0 <flatcc_json_parser_set_error@@Base>
  4033f3:	mov    r13,rax
  4033f6:	mov    edi,DWORD PTR [rsp+0x60]
  4033fa:	test   edi,edi
  4033fc:	jne    403450 <test@@Base+0x130>
  4033fe:	mov    rdi,QWORD PTR [r15]
  403401:	lea    rdx,[rip+0x9c4b]        # 40d053 <_IO_stdin_used@@Base+0x53>
  403408:	mov    esi,0x1
  40340d:	xor    eax,eax
  40340f:	call   4030e0 <__fprintf_chk@plt>
  403414:	mov    eax,DWORD PTR [rsp+0x60]
  403418:	mov    rcx,QWORD PTR [rsp+0x8]
  40341d:	mov    rsi,QWORD PTR [rsp+0x98]
  403425:	xor    rsi,QWORD PTR fs:0x28
  40342e:	mov    DWORD PTR [rcx],eax
  403430:	mov    rax,r13
  403433:	jne    4046b0 <test@@Base+0x1390>
  403439:	add    rsp,0xa8
  403440:	pop    rbx
  403441:	pop    rbp
  403442:	pop    r12
  403444:	pop    r13
  403446:	pop    r14
  403448:	pop    r15
  40344a:	ret    
  40344b:	nop    DWORD PTR [rax+rax*1+0x0]
  403450:	call   409980 <flatcc_json_parser_error_string@@Base>
  403455:	mov    rdx,QWORD PTR [rsp+0x78]
  40345a:	sub    rdx,QWORD PTR [rsp+0x48]
  40345f:	mov    r9,rax
  403462:	mov    rdi,QWORD PTR [r15]
  403465:	mov    ecx,DWORD PTR [rsp+0x58]
  403469:	mov    esi,0x1
  40346e:	xor    eax,eax
  403470:	lea    r8d,[rdx+0x1]
  403474:	lea    rdx,[rip+0x9bcd]        # 40d048 <_IO_stdin_used@@Base+0x48>
  40347b:	call   4030e0 <__fprintf_chk@plt>
  403480:	mov    rdi,r12
  403483:	call   404f90 <flatcc_builder_reset@@Base>
  403488:	jmp    403414 <test@@Base+0xf4>
  40348a:	nop    WORD PTR [rax+rax*1+0x0]
  403490:	cmp    BYTE PTR [r14+0x1],0x20
  403495:	jle    403398 <test@@Base+0x78>
  40349b:	add    r14,0x1
  40349f:	jmp    4033a9 <test@@Base+0x89>
  4034a4:	nop    DWORD PTR [rax+0x0]
  4034a8:	lea    r13,[r14+0x1]
  4034ac:	mov    rax,rbx
  4034af:	sub    rax,r13
  4034b2:	cmp    rax,0x1
  4034b6:	jle    403ad0 <test@@Base+0x7b0>
  4034bc:	cmp    BYTE PTR [r14+0x1],0x20
  4034c1:	jg     4034e0 <test@@Base+0x1c0>
  4034c3:	jne    403ad0 <test@@Base+0x7b0>
  4034c9:	cmp    BYTE PTR [r14+0x2],0x20
  4034ce:	jle    403ad0 <test@@Base+0x7b0>
  4034d4:	lea    r13,[r14+0x2]
  4034d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4034e0:	cmp    rbx,r13
  4034e3:	je     403e58 <test@@Base+0xb38>
  4034e9:	lea    r15,[rsp+0x94]
  4034f1:	mov    esi,0xb
  4034f6:	mov    rdi,r12
  4034f9:	call   406440 <flatcc_builder_start_table@@Base>
  4034fe:	lea    rax,[r15+0x1]
  403502:	mov    QWORD PTR [rsp+0x10],rax
  403507:	lea    rax,[rsp+0x38]
  40350c:	mov    QWORD PTR [rsp+0x20],rax
  403511:	lea    rax,[rsp+0x34]
  403516:	mov    QWORD PTR [rsp+0x28],rax
  40351b:	movzx  eax,BYTE PTR [r13+0x0]
  403520:	cmp    al,0x22
  403522:	je     403de8 <test@@Base+0xac8>
  403528:	cmp    al,0x2e
  40352a:	je     403f28 <test@@Base+0xc08>
  403530:	mov    rdx,rbx
  403533:	mov    DWORD PTR [rsp+0x54],0x1
  40353b:	sub    rdx,r13
  40353e:	cmp    rdx,0x7
  403542:	jbe    403ac0 <test@@Base+0x7a0>
  403548:	movbe  rax,QWORD PTR [r13+0x0]
  40354e:	lea    rsi,[r13+0x8]
  403552:	mov    rdi,rax
  403555:	xor    di,di
  403558:	cmp    rdx,0x8
  40355c:	cmovle rsi,rbx
  403560:	movabs rdx,0x7365636f6e63ffff
  40356a:	cmp    rdi,rdx
  40356d:	ja     403600 <test@@Base+0x2e0>
  403573:	and    rax,0xffffffffff000000
  403579:	movabs rdx,0x6669727374000000
  403583:	cmp    rax,rdx
  403586:	jne    4044e2 <test@@Base+0x11c2>
  40358c:	mov    r11d,DWORD PTR [rsp+0x54]
  403591:	lea    r14,[r13+0x5]
  403595:	test   r11d,r11d
  403598:	jne    4038b0 <test@@Base+0x590>
  40359e:	cmp    rbx,r14
  4035a1:	je     403e03 <test@@Base+0xae3>
  4035a7:	movzx  edx,BYTE PTR [r13+0x5]
  4035ac:	cmp    dl,0x22
  4035af:	jne    4035da <test@@Base+0x2ba>
  4035b1:	jmp    403e18 <test@@Base+0xaf8>
  4035b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4035c0:	lea    r14,[rax+0x1]
  4035c4:	cmp    rbx,r14
  4035c7:	je     403e00 <test@@Base+0xae0>
  4035cd:	movzx  edx,BYTE PTR [rax+0x1]
  4035d1:	cmp    dl,0x22
  4035d4:	je     403e18 <test@@Base+0xaf8>
  4035da:	cmp    dl,0x5c
  4035dd:	mov    rax,r14
  4035e0:	jne    4035c0 <test@@Base+0x2a0>
  4035e2:	mov    rdx,rbx
  4035e5:	sub    rdx,r14
  4035e8:	cmp    rdx,0x1
  4035ec:	jle    403e0d <test@@Base+0xaed>
  4035f2:	add    rax,0x1
  4035f6:	jmp    4035c0 <test@@Base+0x2a0>
  4035f8:	nop    DWORD PTR [rax+rax*1+0x0]
  403600:	movabs rdx,0xffffffff00000000
  40360a:	movabs rcx,0x7a756c74ffffffff
  403614:	and    rdx,rax
  403617:	cmp    rdx,rcx
  40361a:	ja     4036d8 <test@@Base+0x3b8>
  403620:	movabs rdx,0x7365636f6e64731f
  40362a:	cmp    rax,rdx
  40362d:	ja     403af0 <test@@Base+0x7d0>
  403633:	movabs rax,0x7365636f6e640000
  40363d:	cmp    rdi,rax
  403640:	jne    4044e2 <test@@Base+0x11c2>
  403646:	mov    r8d,DWORD PTR [rsp+0x54]
  40364b:	lea    r14,[r13+0x6]
  40364f:	test   r8d,r8d
  403652:	jne    403f88 <test@@Base+0xc68>
  403658:	cmp    rbx,r14
  40365b:	je     40414b <test@@Base+0xe2b>
  403661:	movzx  edx,BYTE PTR [r13+0x6]
  403666:	cmp    dl,0x22
  403669:	jne    40368a <test@@Base+0x36a>
  40366b:	jmp    4041b6 <test@@Base+0xe96>
  403670:	lea    r14,[rax+0x1]
  403674:	cmp    rbx,r14
  403677:	je     404148 <test@@Base+0xe28>
  40367d:	movzx  edx,BYTE PTR [rax+0x1]
  403681:	cmp    dl,0x22
  403684:	je     4041b6 <test@@Base+0xe96>
  40368a:	cmp    dl,0x5c
  40368d:	mov    rax,r14
  403690:	jne    403670 <test@@Base+0x350>
  403692:	mov    rdx,rbx
  403695:	sub    rdx,r14
  403698:	cmp    rdx,0x1
  40369c:	jle    4041b0 <test@@Base+0xe90>
  4036a2:	add    rax,0x1
  4036a6:	jmp    403670 <test@@Base+0x350>
  4036a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4036b0:	mov    r15,QWORD PTR [rip+0xf941]        # 412ff8 <stderr@GLIBC_2.2.5>
  4036b7:	lea    rdx,[rip+0x994b]        # 40d009 <_IO_stdin_used@@Base+0x9>
  4036be:	mov    esi,0x1
  4036c3:	xor    eax,eax
  4036c5:	mov    r13,rbx
  4036c8:	mov    rdi,QWORD PTR [r15]
  4036cb:	call   4030e0 <__fprintf_chk@plt>
  4036d0:	jmp    4033f6 <test@@Base+0xd6>
  4036d5:	nop    DWORD PTR [rax]
  4036d8:	movabs rax,0x7a756c7500000000
  4036e2:	cmp    rdx,rax
  4036e5:	jne    4044e2 <test@@Base+0x11c2>
  4036eb:	mov    eax,DWORD PTR [rsp+0x54]
  4036ef:	lea    r14,[r13+0x4]
  4036f3:	test   eax,eax
  4036f5:	je     403b28 <test@@Base+0x808>
  4036fb:	cmp    rbx,r14
  4036fe:	je     403760 <test@@Base+0x440>
  403700:	movzx  edx,BYTE PTR [r13+0x4]
  403705:	cmp    dl,0x20
  403708:	jle    403748 <test@@Base+0x428>
  40370a:	lea    r10,[r13+0x5]
  40370e:	movabs rcx,0x2000000000ffd
  403718:	nop    DWORD PTR [rax+rax*1+0x0]
  403720:	lea    eax,[rdx-0x2e]
  403723:	lea    r14,[r10-0x1]
  403727:	cmp    al,0x31
  403729:	jbe    403db8 <test@@Base+0xa98>
  40372f:	mov    eax,edx
  403731:	or     eax,0x20
  403734:	sub    eax,0x61
  403737:	cmp    al,0x19
  403739:	jbe    403dc2 <test@@Base+0xaa2>
  40373f:	cmp    dl,0x2e
  403742:	je     4044d8 <test@@Base+0x11b8>
  403748:	mov    rax,rbx
  40374b:	sub    rax,r14
  40374e:	cmp    rax,0x1
  403752:	jle    403760 <test@@Base+0x440>
  403754:	cmp    BYTE PTR [r14],0x20
  403758:	jg     403771 <test@@Base+0x451>
  40375a:	je     404188 <test@@Base+0xe68>
  403760:	mov    rsi,r14
  403763:	mov    rdx,rbx
  403766:	mov    rdi,rbp
  403769:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40376e:	mov    r14,rax
  403771:	cmp    rbx,r14
  403774:	je     4036b0 <test@@Base+0x390>
  40377a:	jbe    404170 <test@@Base+0xe50>
  403780:	cmp    BYTE PTR [r14],0x3a
  403784:	jne    404170 <test@@Base+0xe50>
  40378a:	lea    r13,[r14+0x1]
  40378e:	mov    rax,rbx
  403791:	sub    rax,r13
  403794:	cmp    rax,0x1
  403798:	jle    4037a7 <test@@Base+0x487>
  40379a:	cmp    BYTE PTR [r14+0x1],0x20
  40379f:	jg     4037b8 <test@@Base+0x498>
  4037a1:	je     40419c <test@@Base+0xe7c>
  4037a7:	mov    rsi,r13
  4037aa:	mov    rdx,rbx
  4037ad:	mov    rdi,rbp
  4037b0:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  4037b5:	mov    r13,rax
  4037b8:	cmp    rbx,r13
  4037bb:	je     403e58 <test@@Base+0xb38>
  4037c1:	cmp    BYTE PTR [r13+0x0],0x22
  4037c6:	lea    r14,[r13+0x1]
  4037ca:	je     4037e2 <test@@Base+0x4c2>
  4037cc:	mov    ecx,0x10
  4037d1:	mov    rdx,rbx
  4037d4:	mov    rsi,r13
  4037d7:	mov    rdi,rbp
  4037da:	call   409be0 <flatcc_json_parser_set_error@@Base>
  4037df:	mov    r14,rax
  4037e2:	mov    rdx,rbx
  4037e5:	mov    rsi,r14
  4037e8:	mov    rdi,rbp
  4037eb:	call   409c00 <flatcc_json_parser_string_part@@Base>
  4037f0:	cmp    rbx,rax
  4037f3:	mov    r13,rax
  4037f6:	je     40389c <test@@Base+0x57c>
  4037fc:	cmp    BYTE PTR [rax],0x22
  4037ff:	je     403f68 <test@@Base+0xc48>
  403805:	mov    rdi,r12
  403808:	call   406300 <flatcc_builder_start_string@@Base>
  40380d:	mov    rdx,r13
  403810:	mov    rdi,r12
  403813:	sub    rdx,r14
  403816:	mov    rsi,rdx
  403819:	mov    QWORD PTR [rsp+0x18],rdx
  40381e:	call   405f00 <flatcc_builder_extend_string@@Base>
  403823:	test   rax,rax
  403826:	mov    rdx,QWORD PTR [rsp+0x18]
  40382b:	je     40389c <test@@Base+0x57c>
  40382d:	mov    rsi,r14
  403830:	mov    rdi,rax
  403833:	call   4030b0 <memcpy@plt>
  403838:	jmp    40385c <test@@Base+0x53c>
  40383a:	nop    WORD PTR [rax+rax*1+0x0]
  403840:	mov    rdx,rax
  403843:	mov    rsi,r14
  403846:	mov    rdi,r12
  403849:	sub    rdx,r14
  40384c:	call   405f80 <flatcc_builder_append_string@@Base>
  403851:	cmp    BYTE PTR [r13+0x0],0x22
  403856:	je     403ea0 <test@@Base+0xb80>
  40385c:	mov    rcx,r15
  40385f:	mov    rsi,r13
  403862:	mov    rdx,rbx
  403865:	mov    rdi,rbp
  403868:	call   40a3c0 <flatcc_json_parser_string_escape@@Base>
  40386d:	movsx  rdx,BYTE PTR [rsp+0x94]
  403876:	mov    rsi,QWORD PTR [rsp+0x10]
  40387b:	mov    r14,rax
  40387e:	mov    rdi,r12
  403881:	call   405f80 <flatcc_builder_append_string@@Base>
  403886:	mov    rdx,rbx
  403889:	mov    rsi,r14
  40388c:	mov    rdi,rbp
  40388f:	call   409c00 <flatcc_json_parser_string_part@@Base>
  403894:	cmp    rbx,rax
  403897:	mov    r13,rax
  40389a:	jne    403840 <test@@Base+0x520>
  40389c:	mov    r15,QWORD PTR [rip+0xf755]        # 412ff8 <stderr@GLIBC_2.2.5>
  4038a3:	jmp    4033f6 <test@@Base+0xd6>
  4038a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4038b0:	cmp    rbx,r14
  4038b3:	je     403910 <test@@Base+0x5f0>
  4038b5:	movzx  edx,BYTE PTR [r13+0x5]
  4038ba:	cmp    dl,0x20
  4038bd:	jle    4038f8 <test@@Base+0x5d8>
  4038bf:	lea    r10,[r13+0x6]
  4038c3:	movabs rcx,0x2000000000ffd
  4038cd:	nop    DWORD PTR [rax]
  4038d0:	lea    eax,[rdx-0x2e]
  4038d3:	lea    r14,[r10-0x1]
  4038d7:	cmp    al,0x31
  4038d9:	jbe    403a90 <test@@Base+0x770>
  4038df:	mov    eax,edx
  4038e1:	or     eax,0x20
  4038e4:	sub    eax,0x61
  4038e7:	cmp    al,0x19
  4038e9:	jbe    403a9a <test@@Base+0x77a>
  4038ef:	cmp    dl,0x2e
  4038f2:	je     403c54 <test@@Base+0x934>
  4038f8:	mov    rax,rbx
  4038fb:	sub    rax,r14
  4038fe:	cmp    rax,0x1
  403902:	jle    403910 <test@@Base+0x5f0>
  403904:	cmp    BYTE PTR [r14],0x20
  403908:	jg     403921 <test@@Base+0x601>
  40390a:	je     403f00 <test@@Base+0xbe0>
  403910:	mov    rsi,r14
  403913:	mov    rdx,rbx
  403916:	mov    rdi,rbp
  403919:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40391e:	mov    r14,rax
  403921:	cmp    rbx,r14
  403924:	je     4036b0 <test@@Base+0x390>
  40392a:	jbe    404170 <test@@Base+0xe50>
  403930:	cmp    BYTE PTR [r14],0x3a
  403934:	jne    404170 <test@@Base+0xe50>
  40393a:	lea    r13,[r14+0x1]
  40393e:	mov    rax,rbx
  403941:	sub    rax,r13
  403944:	cmp    rax,0x1
  403948:	jle    403957 <test@@Base+0x637>
  40394a:	cmp    BYTE PTR [r14+0x1],0x20
  40394f:	jg     403968 <test@@Base+0x648>
  403951:	je     403b80 <test@@Base+0x860>
  403957:	mov    rsi,r13
  40395a:	mov    rdx,rbx
  40395d:	mov    rdi,rbp
  403960:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  403965:	mov    r13,rax
  403968:	cmp    rbx,r13
  40396b:	je     403e58 <test@@Base+0xb38>
  403971:	xor    esi,esi
  403973:	mov    ecx,0x1
  403978:	mov    edx,0x1
  40397d:	mov    rdi,r12
  403980:	call   407ce0 <flatcc_builder_table_add@@Base>
  403985:	test   rax,rax
  403988:	je     40389c <test@@Base+0x57c>
  40398e:	mov    r8,QWORD PTR [rsp+0x20]
  403993:	mov    rcx,QWORD PTR [rsp+0x28]
  403998:	mov    rdx,rbx
  40399b:	mov    QWORD PTR [rsp+0x38],0x0
  4039a4:	mov    DWORD PTR [rsp+0x34],0x0
  4039ac:	mov    rsi,r13
  4039af:	mov    BYTE PTR [rax],0x0
  4039b2:	mov    rdi,rbp
  4039b5:	mov    QWORD PTR [rsp+0x18],rax
  4039ba:	call   40b780 <flatcc_json_parser_integer@@Base>
  4039bf:	cmp    r13,rax
  4039c2:	mov    r14,rax
  4039c5:	mov    r9,QWORD PTR [rsp+0x18]
  4039ca:	je     40389c <test@@Base+0x57c>
  4039d0:	mov    r10d,DWORD PTR [rsp+0x34]
  4039d5:	test   r10d,r10d
  4039d8:	jne    403f18 <test@@Base+0xbf8>
  4039de:	mov    rax,QWORD PTR [rsp+0x38]
  4039e3:	cmp    rax,0xff
  4039e9:	ja     403b98 <test@@Base+0x878>
  4039ef:	mov    BYTE PTR [r9],al
  4039f2:	mov    rax,rbx
  4039f5:	sub    rax,r14
  4039f8:	cmp    rax,0x1
  4039fc:	jle    403a0a <test@@Base+0x6ea>
  4039fe:	cmp    BYTE PTR [r14],0x20
  403a02:	jg     403a1b <test@@Base+0x6fb>
  403a04:	je     403e28 <test@@Base+0xb08>
  403a0a:	mov    rsi,r14
  403a0d:	mov    rdx,rbx
  403a10:	mov    rdi,rbp
  403a13:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  403a18:	mov    r14,rax
  403a1b:	cmp    rbx,r14
  403a1e:	je     4036b0 <test@@Base+0x390>
  403a24:	movzx  eax,BYTE PTR [r14]
  403a28:	cmp    al,0x2c
  403a2a:	jne    40459b <test@@Base+0x127b>
  403a30:	lea    r13,[r14+0x1]
  403a34:	mov    rax,rbx
  403a37:	sub    rax,r13
  403a3a:	cmp    rax,0x1
  403a3e:	jle    403a4d <test@@Base+0x72d>
  403a40:	cmp    BYTE PTR [r14+0x1],0x20
  403a45:	jg     403a5e <test@@Base+0x73e>
  403a47:	je     403e40 <test@@Base+0xb20>
  403a4d:	mov    rsi,r13
  403a50:	mov    rdx,rbx
  403a53:	mov    rdi,rbp
  403a56:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  403a5b:	mov    r13,rax
  403a5e:	cmp    rbx,r13
  403a61:	je     403e58 <test@@Base+0xb38>
  403a67:	cmp    BYTE PTR [r13+0x0],0x7d
  403a6c:	jne    40351b <test@@Base+0x1fb>
  403a72:	cmp    rbx,r13
  403a75:	ja     4045af <test@@Base+0x128f>
  403a7b:	mov    r14,r13
  403a7e:	mov    r15,QWORD PTR [rip+0xf573]        # 412ff8 <stderr@GLIBC_2.2.5>
  403a85:	mov    ecx,0x7d
  403a8a:	jmp    4033ca <test@@Base+0xaa>
  403a8f:	nop
  403a90:	bt     rcx,rax
  403a94:	jae    4038df <test@@Base+0x5bf>
  403a9a:	cmp    rbx,r10
  403a9d:	mov    r14,r10
  403aa0:	je     403c48 <test@@Base+0x928>
  403aa6:	movzx  eax,BYTE PTR [r10]
  403aaa:	add    r10,0x1
  403aae:	cmp    al,0x20
  403ab0:	jle    4038ef <test@@Base+0x5cf>
  403ab6:	mov    edx,eax
  403ab8:	jmp    4038d0 <test@@Base+0x5b0>
  403abd:	nop    DWORD PTR [rax]
  403ac0:	lea    rcx,[rip+0x95b9]        # 40d080 <_IO_stdin_used@@Base+0x80>
  403ac7:	movsxd rax,DWORD PTR [rcx+rdx*4]
  403acb:	add    rax,rcx
  403ace:	jmp    rax
  403ad0:	mov    rsi,r13
  403ad3:	mov    rdx,rbx
  403ad6:	mov    rdi,rbp
  403ad9:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  403ade:	mov    r13,rax
  403ae1:	jmp    4034e0 <test@@Base+0x1c0>
  403ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403af0:	movabs rdx,0x7365636f6e647320
  403afa:	cmp    rax,rdx
  403afd:	jne    4044e2 <test@@Base+0x11c2>
  403b03:	mov    rax,rbx
  403b06:	sub    rax,rsi
  403b09:	cmp    rax,0x7
  403b0d:	ja     4040c0 <test@@Base+0xda0>
  403b13:	lea    rdx,[rip+0x9586]        # 40d0a0 <_IO_stdin_used@@Base+0xa0>
  403b1a:	movsxd rax,DWORD PTR [rdx+rax*4]
  403b1e:	add    rax,rdx
  403b21:	jmp    rax
  403b23:	nop    DWORD PTR [rax+rax*1+0x0]
  403b28:	cmp    rbx,r14
  403b2b:	je     403e83 <test@@Base+0xb63>
  403b31:	movzx  edx,BYTE PTR [r13+0x4]
  403b36:	cmp    dl,0x22
  403b39:	jne    403b5a <test@@Base+0x83a>
  403b3b:	jmp    403f58 <test@@Base+0xc38>
  403b40:	lea    r14,[rax+0x1]
  403b44:	cmp    rbx,r14
  403b47:	je     403e80 <test@@Base+0xb60>
  403b4d:	movzx  edx,BYTE PTR [rax+0x1]
  403b51:	cmp    dl,0x22
  403b54:	je     403f58 <test@@Base+0xc38>
  403b5a:	cmp    dl,0x5c
  403b5d:	mov    rax,r14
  403b60:	jne    403b40 <test@@Base+0x820>
  403b62:	mov    rdx,rbx
  403b65:	sub    rdx,r14
  403b68:	cmp    rdx,0x1
  403b6c:	jle    403f49 <test@@Base+0xc29>
  403b72:	add    rax,0x1
  403b76:	jmp    403b40 <test@@Base+0x820>
  403b78:	nop    DWORD PTR [rax+rax*1+0x0]
  403b80:	cmp    BYTE PTR [r14+0x2],0x20
  403b85:	jle    403957 <test@@Base+0x637>
  403b8b:	lea    r13,[r14+0x2]
  403b8f:	jmp    403968 <test@@Base+0x648>
  403b94:	nop    DWORD PTR [rax+0x0]
  403b98:	mov    ecx,0x7
  403b9d:	mov    rsi,r14
  403ba0:	mov    rdx,rbx
  403ba3:	mov    rdi,rbp
  403ba6:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403bab:	cmp    r13,rax
  403bae:	mov    r14,rax
  403bb1:	jne    4039f2 <test@@Base+0x6d2>
  403bb7:	jmp    40389c <test@@Base+0x57c>
  403bbc:	nop    DWORD PTR [rax+0x0]
  403bc0:	movsx  rdx,BYTE PTR [r13+0x6]
  403bc5:	shl    rdx,0x8
  403bc9:	movsx  rcx,BYTE PTR [r13+0x5]
  403bce:	mov    rax,rcx
  403bd1:	shl    rax,0x10
  403bd5:	or     rdx,rax
  403bd8:	movsx  rcx,BYTE PTR [r13+0x4]
  403bdd:	mov    rax,rcx
  403be0:	shl    rax,0x18
  403be4:	or     rax,rdx
  403be7:	movsx  rcx,BYTE PTR [r13+0x3]
  403bec:	shl    rcx,0x20
  403bf0:	or     rax,rcx
  403bf3:	movsx  rcx,BYTE PTR [r13+0x2]
  403bf8:	shl    rcx,0x28
  403bfc:	mov    rdx,rcx
  403bff:	or     rdx,rax
  403c02:	movsx  rcx,BYTE PTR [r13+0x1]
  403c07:	mov    rax,rcx
  403c0a:	shl    rax,0x30
  403c0e:	or     rdx,rax
  403c11:	movsx  rax,BYTE PTR [r13+0x0]
  403c16:	mov    rsi,rbx
  403c19:	shl    rax,0x38
  403c1d:	or     rax,rdx
  403c20:	mov    rdi,rax
  403c23:	xor    di,di
  403c26:	jmp    403560 <test@@Base+0x240>
  403c2b:	xor    edx,edx
  403c2d:	jmp    403c11 <test@@Base+0x8f1>
  403c2f:	xor    eax,eax
  403c31:	jmp    403bf3 <test@@Base+0x8d3>
  403c33:	xor    edx,edx
  403c35:	jmp    403c02 <test@@Base+0x8e2>
  403c37:	xor    edx,edx
  403c39:	jmp    403bc9 <test@@Base+0x8a9>
  403c3b:	xor    edx,edx
  403c3d:	jmp    403bd8 <test@@Base+0x8b8>
  403c3f:	xor    eax,eax
  403c41:	jmp    403be7 <test@@Base+0x8c7>
  403c43:	nop    DWORD PTR [rax+rax*1+0x0]
  403c48:	cmp    dl,0x2e
  403c4b:	mov    r14,rbx
  403c4e:	jne    403910 <test@@Base+0x5f0>
  403c54:	mov    ecx,0x5
  403c59:	nop    DWORD PTR [rax+0x0]
  403c60:	mov    rsi,r14
  403c63:	mov    rdx,rbx
  403c66:	mov    rdi,rbp
  403c69:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403c6e:	mov    r14,rax
  403c71:	jmp    4038f8 <test@@Base+0x5d8>
  403c76:	movsx  rcx,BYTE PTR [rsi+0x6]
  403c7b:	shl    rcx,0x8
  403c7f:	movsx  rax,BYTE PTR [rsi+0x5]
  403c84:	shl    rax,0x10
  403c88:	or     rcx,rax
  403c8b:	movsx  rdx,BYTE PTR [rsi+0x4]
  403c90:	mov    rax,rdx
  403c93:	shl    rax,0x18
  403c97:	or     rax,rcx
  403c9a:	movsx  rdx,BYTE PTR [rsi+0x3]
  403c9f:	mov    rcx,rdx
  403ca2:	shl    rcx,0x20
  403ca6:	or     rax,rcx
  403ca9:	movsx  rdx,BYTE PTR [rsi+0x2]
  403cae:	mov    rcx,rdx
  403cb1:	shl    rcx,0x28
  403cb5:	or     rcx,rax
  403cb8:	movsx  rdx,BYTE PTR [rsi+0x1]
  403cbd:	mov    rax,rdx
  403cc0:	shl    rax,0x30
  403cc4:	or     rcx,rax
  403cc7:	movsx  rdx,BYTE PTR [rsi]
  403ccb:	mov    rax,rdx
  403cce:	shl    rax,0x38
  403cd2:	or     rax,rcx
  403cd5:	movabs rdx,0xffffffff00000000
  403cdf:	and    rax,rdx
  403ce2:	movabs rdx,0x6c656673ffffffff
  403cec:	cmp    rax,rdx
  403cef:	ja     4040d0 <test@@Base+0xdb0>
  403cf5:	movabs rdx,0x6c65616400000000
  403cff:	cmp    rax,rdx
  403d02:	jne    403d92 <test@@Base+0xa72>
  403d08:	mov    edi,DWORD PTR [rsp+0x54]
  403d0c:	lea    r14,[rsi+0x4]
  403d10:	test   edi,edi
  403d12:	jne    40433c <test@@Base+0x101c>
  403d18:	cmp    rbx,r14
  403d1b:	je     404507 <test@@Base+0x11e7>
  403d21:	movzx  edx,BYTE PTR [rsi+0x4]
  403d25:	cmp    dl,0x22
  403d28:	jne    403d4a <test@@Base+0xa2a>
  403d2a:	jmp    404592 <test@@Base+0x1272>
  403d2f:	nop
  403d30:	lea    r14,[rax+0x1]
  403d34:	cmp    rbx,r14
  403d37:	je     404504 <test@@Base+0x11e4>
  403d3d:	movzx  edx,BYTE PTR [rax+0x1]
  403d41:	cmp    dl,0x22
  403d44:	je     404592 <test@@Base+0x1272>
  403d4a:	cmp    dl,0x5c
  403d4d:	mov    rax,r14
  403d50:	jne    403d30 <test@@Base+0xa10>
  403d52:	mov    rdx,rbx
  403d55:	sub    rdx,r14
  403d58:	cmp    rdx,0x1
  403d5c:	jle    404588 <test@@Base+0x1268>
  403d62:	add    rax,0x1
  403d66:	jmp    403d30 <test@@Base+0xa10>
  403d68:	xor    ecx,ecx
  403d6a:	jmp    403cc7 <test@@Base+0x9a7>
  403d6f:	xor    ecx,ecx
  403d71:	jmp    403c8b <test@@Base+0x96b>
  403d76:	xor    eax,eax
  403d78:	jmp    403c9a <test@@Base+0x97a>
  403d7d:	xor    eax,eax
  403d7f:	jmp    403ca9 <test@@Base+0x989>
  403d84:	xor    ecx,ecx
  403d86:	jmp    403cb8 <test@@Base+0x998>
  403d8b:	xor    ecx,ecx
  403d8d:	jmp    403c7f <test@@Base+0x95f>
  403d92:	mov    ecx,0xd
  403d97:	mov    rdx,rbx
  403d9a:	mov    rdi,rbp
  403d9d:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403da2:	mov    r15,QWORD PTR [rip+0xf24f]        # 412ff8 <stderr@GLIBC_2.2.5>
  403da9:	mov    r13,rax
  403dac:	jmp    4033f6 <test@@Base+0xd6>
  403db1:	nop    DWORD PTR [rax+0x0]
  403db8:	bt     rcx,rax
  403dbc:	jae    40372f <test@@Base+0x40f>
  403dc2:	cmp    rbx,r10
  403dc5:	mov    r14,r10
  403dc8:	je     4044cc <test@@Base+0x11ac>
  403dce:	movzx  eax,BYTE PTR [r10]
  403dd2:	add    r10,0x1
  403dd6:	cmp    al,0x20
  403dd8:	jle    40373f <test@@Base+0x41f>
  403dde:	mov    edx,eax
  403de0:	jmp    403720 <test@@Base+0x400>
  403de5:	nop    DWORD PTR [rax]
  403de8:	add    r13,0x1
  403dec:	mov    rdx,rbx
  403def:	mov    DWORD PTR [rsp+0x54],0x0
  403df7:	sub    rdx,r13
  403dfa:	jmp    40353e <test@@Base+0x21e>
  403dff:	nop
  403e00:	mov    r14,rbx
  403e03:	mov    ecx,0x14
  403e08:	jmp    403c60 <test@@Base+0x940>
  403e0d:	cmp    BYTE PTR [r14],0x22
  403e11:	jne    403e03 <test@@Base+0xae3>
  403e13:	nop    DWORD PTR [rax+rax*1+0x0]
  403e18:	add    r14,0x1
  403e1c:	jmp    4038f8 <test@@Base+0x5d8>
  403e21:	nop    DWORD PTR [rax+0x0]
  403e28:	cmp    BYTE PTR [r14+0x1],0x20
  403e2d:	jle    403a0a <test@@Base+0x6ea>
  403e33:	add    r14,0x1
  403e37:	jmp    403a1b <test@@Base+0x6fb>
  403e3c:	nop    DWORD PTR [rax+0x0]
  403e40:	cmp    BYTE PTR [r14+0x2],0x20
  403e45:	jle    403a4d <test@@Base+0x72d>
  403e4b:	lea    r13,[r14+0x2]
  403e4f:	jmp    403a5e <test@@Base+0x73e>
  403e54:	nop    DWORD PTR [rax+0x0]
  403e58:	mov    r15,QWORD PTR [rip+0xf199]        # 412ff8 <stderr@GLIBC_2.2.5>
  403e5f:	lea    rdx,[rip+0x91a3]        # 40d009 <_IO_stdin_used@@Base+0x9>
  403e66:	mov    esi,0x1
  403e6b:	xor    eax,eax
  403e6d:	mov    rdi,QWORD PTR [r15]
  403e70:	call   4030e0 <__fprintf_chk@plt>
  403e75:	jmp    4033f6 <test@@Base+0xd6>
  403e7a:	nop    WORD PTR [rax+rax*1+0x0]
  403e80:	mov    r14,rbx
  403e83:	mov    ecx,0x14
  403e88:	mov    rsi,r14
  403e8b:	mov    rdx,rbx
  403e8e:	mov    rdi,rbp
  403e91:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403e96:	mov    r14,rax
  403e99:	jmp    403748 <test@@Base+0x428>
  403e9e:	xchg   ax,ax
  403ea0:	mov    rdi,r12
  403ea3:	call   407bc0 <flatcc_builder_end_string@@Base>
  403ea8:	mov    r14d,eax
  403eab:	test   r14d,r14d
  403eae:	je     40389c <test@@Base+0x57c>
  403eb4:	mov    esi,0xa
  403eb9:	mov    rdi,r12
  403ebc:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  403ec1:	test   rax,rax
  403ec4:	je     40389c <test@@Base+0x57c>
  403eca:	cmp    r13,rbx
  403ecd:	mov    DWORD PTR [rax],r14d
  403ed0:	je     403ee1 <test@@Base+0xbc1>
  403ed2:	cmp    BYTE PTR [r13+0x0],0x22
  403ed7:	lea    r14,[r13+0x1]
  403edb:	je     4039f2 <test@@Base+0x6d2>
  403ee1:	mov    ecx,0x14
  403ee6:	mov    rdx,rbx
  403ee9:	mov    rsi,r13
  403eec:	mov    rdi,rbp
  403eef:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403ef4:	mov    r14,rax
  403ef7:	jmp    4039f2 <test@@Base+0x6d2>
  403efc:	nop    DWORD PTR [rax+0x0]
  403f00:	cmp    BYTE PTR [r14+0x1],0x20
  403f05:	jle    403910 <test@@Base+0x5f0>
  403f0b:	add    r14,0x1
  403f0f:	jmp    403921 <test@@Base+0x601>
  403f14:	nop    DWORD PTR [rax+0x0]
  403f18:	mov    ecx,0x8
  403f1d:	jmp    403b9d <test@@Base+0x87d>
  403f22:	nop    WORD PTR [rax+rax*1+0x0]
  403f28:	mov    rdx,rbx
  403f2b:	mov    rsi,r13
  403f2e:	mov    ecx,0x5
  403f33:	mov    rdi,rbp
  403f36:	call   409be0 <flatcc_json_parser_set_error@@Base>
  403f3b:	mov    rdx,rbx
  403f3e:	mov    r13,rax
  403f41:	sub    rdx,rax
  403f44:	jmp    40353e <test@@Base+0x21e>
  403f49:	cmp    BYTE PTR [r14],0x22
  403f4d:	jne    403e83 <test@@Base+0xb63>
  403f53:	nop    DWORD PTR [rax+rax*1+0x0]
  403f58:	add    r14,0x1
  403f5c:	jmp    403748 <test@@Base+0x428>
  403f61:	nop    DWORD PTR [rax+0x0]
  403f68:	mov    rdx,rax
  403f6b:	mov    rsi,r14
  403f6e:	mov    rdi,r12
  403f71:	sub    rdx,r14
  403f74:	call   407a30 <flatcc_builder_create_string@@Base>
  403f79:	mov    r14d,eax
  403f7c:	jmp    403eab <test@@Base+0xb8b>
  403f81:	nop    DWORD PTR [rax+0x0]
  403f88:	cmp    rbx,r14
  403f8b:	je     403fe8 <test@@Base+0xcc8>
  403f8d:	movzx  edx,BYTE PTR [r13+0x6]
  403f92:	cmp    dl,0x20
  403f95:	jle    403fd0 <test@@Base+0xcb0>
  403f97:	lea    r10,[r13+0x7]
  403f9b:	movabs rcx,0x2000000000ffd
  403fa5:	nop    DWORD PTR [rax]
  403fa8:	lea    eax,[rdx-0x2e]
  403fab:	lea    r14,[r10-0x1]
  403faf:	cmp    al,0x31
  403fb1:	jbe    404090 <test@@Base+0xd70>
  403fb7:	mov    eax,edx
  403fb9:	or     eax,0x20
  403fbc:	sub    eax,0x61
  403fbf:	cmp    al,0x19
  403fc1:	jbe    40409a <test@@Base+0xd7a>
  403fc7:	cmp    dl,0x2e
  403fca:	je     40462a <test@@Base+0x130a>
  403fd0:	mov    rax,rbx
  403fd3:	sub    rax,r14
  403fd6:	cmp    rax,0x1
  403fda:	jle    403fe8 <test@@Base+0xcc8>
  403fdc:	cmp    BYTE PTR [r14],0x20
  403fe0:	jg     403ff9 <test@@Base+0xcd9>
  403fe2:	je     404540 <test@@Base+0x1220>
  403fe8:	mov    rsi,r14
  403feb:	mov    rdx,rbx
  403fee:	mov    rdi,rbp
  403ff1:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  403ff6:	mov    r14,rax
  403ff9:	cmp    rbx,r14
  403ffc:	je     4036b0 <test@@Base+0x390>
  404002:	jbe    404170 <test@@Base+0xe50>
  404008:	cmp    BYTE PTR [r14],0x3a
  40400c:	jne    404170 <test@@Base+0xe50>
  404012:	lea    r13,[r14+0x1]
  404016:	mov    rax,rbx
  404019:	sub    rax,r13
  40401c:	cmp    rax,0x1
  404020:	jle    40402f <test@@Base+0xd0f>
  404022:	cmp    BYTE PTR [r14+0x1],0x20
  404027:	jg     404040 <test@@Base+0xd20>
  404029:	je     404554 <test@@Base+0x1234>
  40402f:	mov    rsi,r13
  404032:	mov    rdx,rbx
  404035:	mov    rdi,rbp
  404038:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40403d:	mov    r13,rax
  404040:	cmp    rbx,r13
  404043:	je     403e58 <test@@Base+0xb38>
  404049:	mov    ecx,0x8
  40404e:	mov    edx,0x8
  404053:	mov    esi,0x1
  404058:	mov    rdi,r12
  40405b:	call   407ce0 <flatcc_builder_table_add@@Base>
  404060:	test   rax,rax
  404063:	je     40389c <test@@Base+0x57c>
  404069:	mov    rcx,rax
  40406c:	mov    rdx,rbx
  40406f:	mov    rsi,r13
  404072:	mov    rdi,rbp
  404075:	call   40a900 <flatcc_json_parser_double@@Base>
  40407a:	cmp    rax,r13
  40407d:	mov    r14,rax
  404080:	jne    4039f2 <test@@Base+0x6d2>
  404086:	jmp    40389c <test@@Base+0x57c>
  40408b:	nop    DWORD PTR [rax+rax*1+0x0]
  404090:	bt     rcx,rax
  404094:	jae    403fb7 <test@@Base+0xc97>
  40409a:	cmp    rbx,r10
  40409d:	mov    r14,r10
  4040a0:	je     40461e <test@@Base+0x12fe>
  4040a6:	movzx  eax,BYTE PTR [r10]
  4040aa:	add    r10,0x1
  4040ae:	cmp    al,0x20
  4040b0:	jle    403fc7 <test@@Base+0xca7>
  4040b6:	mov    edx,eax
  4040b8:	jmp    403fa8 <test@@Base+0xc88>
  4040bd:	nop    DWORD PTR [rax]
  4040c0:	movbe  rax,QWORD PTR [rsi]
  4040c5:	jmp    403cd5 <test@@Base+0x9b5>
  4040ca:	nop    WORD PTR [rax+rax*1+0x0]
  4040d0:	movabs rdx,0x6c65667400000000
  4040da:	cmp    rax,rdx
  4040dd:	jne    403d92 <test@@Base+0xa72>
  4040e3:	mov    ecx,DWORD PTR [rsp+0x54]
  4040e7:	lea    r14,[rsi+0x4]
  4040eb:	test   ecx,ecx
  4040ed:	jne    4041bf <test@@Base+0xe9f>
  4040f3:	cmp    rbx,r14
  4040f6:	je     404525 <test@@Base+0x1205>
  4040fc:	movzx  edx,BYTE PTR [rsi+0x4]
  404100:	cmp    dl,0x22
  404103:	jne    40412a <test@@Base+0xe0a>
  404105:	jmp    40457f <test@@Base+0x125f>
  40410a:	nop    WORD PTR [rax+rax*1+0x0]
  404110:	lea    r14,[rax+0x1]
  404114:	cmp    rbx,r14
  404117:	je     404522 <test@@Base+0x1202>
  40411d:	movzx  edx,BYTE PTR [rax+0x1]
  404121:	cmp    dl,0x22
  404124:	je     40457f <test@@Base+0x125f>
  40412a:	cmp    dl,0x5c
  40412d:	mov    rax,r14
  404130:	jne    404110 <test@@Base+0xdf0>
  404132:	mov    rdx,rbx
  404135:	sub    rdx,r14
  404138:	cmp    rdx,0x1
  40413c:	jle    404579 <test@@Base+0x1259>
  404142:	add    rax,0x1
  404146:	jmp    404110 <test@@Base+0xdf0>
  404148:	mov    r14,rbx
  40414b:	mov    ecx,0x14
  404150:	mov    rsi,r14
  404153:	mov    rdx,rbx
  404156:	mov    rdi,rbp
  404159:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40415e:	mov    r14,rax
  404161:	jmp    403fd0 <test@@Base+0xcb0>
  404166:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404170:	mov    r15,QWORD PTR [rip+0xee81]        # 412ff8 <stderr@GLIBC_2.2.5>
  404177:	mov    ecx,0x3a
  40417c:	jmp    4033ca <test@@Base+0xaa>
  404181:	nop    DWORD PTR [rax+0x0]
  404188:	cmp    BYTE PTR [r14+0x1],0x20
  40418d:	jle    403760 <test@@Base+0x440>
  404193:	add    r14,0x1
  404197:	jmp    403771 <test@@Base+0x451>
  40419c:	cmp    BYTE PTR [r14+0x2],0x20
  4041a1:	jle    4037a7 <test@@Base+0x487>
  4041a7:	lea    r13,[r14+0x2]
  4041ab:	jmp    4037b8 <test@@Base+0x498>
  4041b0:	cmp    BYTE PTR [r14],0x22
  4041b4:	jne    40414b <test@@Base+0xe2b>
  4041b6:	add    r14,0x1
  4041ba:	jmp    403fd0 <test@@Base+0xcb0>
  4041bf:	cmp    rbx,r14
  4041c2:	je     404220 <test@@Base+0xf00>
  4041c4:	movzx  edx,BYTE PTR [rsi+0x4]
  4041c8:	cmp    dl,0x20
  4041cb:	jle    404208 <test@@Base+0xee8>
  4041cd:	add    rsi,0x5
  4041d1:	movabs rcx,0x2000000000ffd
  4041db:	nop    DWORD PTR [rax+rax*1+0x0]
  4041e0:	lea    eax,[rdx-0x2e]
  4041e3:	lea    r14,[rsi-0x1]
  4041e7:	cmp    al,0x31
  4041e9:	jbe    404310 <test@@Base+0xff0>
  4041ef:	mov    eax,edx
  4041f1:	or     eax,0x20
  4041f4:	sub    eax,0x61
  4041f7:	cmp    al,0x19
  4041f9:	jbe    40431a <test@@Base+0xffa>
  4041ff:	cmp    dl,0x2e
  404202:	je     4046a6 <test@@Base+0x1386>
  404208:	mov    rax,rbx
  40420b:	sub    rax,r14
  40420e:	cmp    rax,0x1
  404212:	jle    404220 <test@@Base+0xf00>
  404214:	cmp    BYTE PTR [r14],0x20
  404218:	jg     404231 <test@@Base+0xf11>
  40421a:	je     404648 <test@@Base+0x1328>
  404220:	mov    rsi,r14
  404223:	mov    rdx,rbx
  404226:	mov    rdi,rbp
  404229:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40422e:	mov    r14,rax
  404231:	cmp    rbx,r14
  404234:	je     4036b0 <test@@Base+0x390>
  40423a:	jbe    404170 <test@@Base+0xe50>
  404240:	cmp    BYTE PTR [r14],0x3a
  404244:	jne    404170 <test@@Base+0xe50>
  40424a:	lea    r13,[r14+0x1]
  40424e:	mov    rax,rbx
  404251:	sub    rax,r13
  404254:	cmp    rax,0x1
  404258:	jle    404267 <test@@Base+0xf47>
  40425a:	cmp    BYTE PTR [r14+0x1],0x20
  40425f:	jg     404278 <test@@Base+0xf58>
  404261:	je     404670 <test@@Base+0x1350>
  404267:	mov    rsi,r13
  40426a:	mov    rdx,rbx
  40426d:	mov    rdi,rbp
  404270:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  404275:	mov    r13,rax
  404278:	cmp    rbx,r13
  40427b:	je     403e58 <test@@Base+0xb38>
  404281:	mov    ecx,0x4
  404286:	mov    edx,0x4
  40428b:	mov    esi,0x2
  404290:	mov    rdi,r12
  404293:	call   407ce0 <flatcc_builder_table_add@@Base>
  404298:	test   rax,rax
  40429b:	je     40389c <test@@Base+0x57c>
  4042a1:	mov    r8,QWORD PTR [rsp+0x20]
  4042a6:	mov    rcx,QWORD PTR [rsp+0x28]
  4042ab:	mov    rdx,rbx
  4042ae:	mov    QWORD PTR [rsp+0x38],0x0
  4042b7:	mov    DWORD PTR [rsp+0x34],0x0
  4042bf:	mov    rsi,r13
  4042c2:	mov    DWORD PTR [rax],0x0
  4042c8:	mov    rdi,rbp
  4042cb:	mov    QWORD PTR [rsp+0x18],rax
  4042d0:	call   40b780 <flatcc_json_parser_integer@@Base>
  4042d5:	cmp    r13,rax
  4042d8:	mov    r14,rax
  4042db:	mov    r9,QWORD PTR [rsp+0x18]
  4042e0:	je     40389c <test@@Base+0x57c>
  4042e6:	mov    edx,DWORD PTR [rsp+0x34]
  4042ea:	test   edx,edx
  4042ec:	jne    403f18 <test@@Base+0xbf8>
  4042f2:	mov    rax,QWORD PTR [rsp+0x38]
  4042f7:	mov    edx,0xffffffff
  4042fc:	cmp    rax,rdx
  4042ff:	ja     403b98 <test@@Base+0x878>
  404305:	mov    DWORD PTR [r9],eax
  404308:	jmp    4039f2 <test@@Base+0x6d2>
  40430d:	nop    DWORD PTR [rax]
  404310:	bt     rcx,rax
  404314:	jae    4041ef <test@@Base+0xecf>
  40431a:	cmp    rbx,rsi
  40431d:	mov    r14,rsi
  404320:	je     40469a <test@@Base+0x137a>
  404326:	movzx  eax,BYTE PTR [rsi]
  404329:	add    rsi,0x1
  40432d:	cmp    al,0x20
  40432f:	jle    4041ff <test@@Base+0xedf>
  404335:	mov    edx,eax
  404337:	jmp    4041e0 <test@@Base+0xec0>
  40433c:	cmp    rbx,r14
  40433f:	je     4043a0 <test@@Base+0x1080>
  404341:	movzx  edx,BYTE PTR [rsi+0x4]
  404345:	cmp    dl,0x20
  404348:	jle    404388 <test@@Base+0x1068>
  40434a:	add    rsi,0x5
  40434e:	movabs rcx,0x2000000000ffd
  404358:	nop    DWORD PTR [rax+rax*1+0x0]
  404360:	lea    eax,[rdx-0x2e]
  404363:	lea    r14,[rsi-0x1]
  404367:	cmp    al,0x31
  404369:	jbe    4044a0 <test@@Base+0x1180>
  40436f:	mov    eax,edx
  404371:	or     eax,0x20
  404374:	sub    eax,0x61
  404377:	cmp    al,0x19
  404379:	jbe    4044aa <test@@Base+0x118a>
  40437f:	cmp    dl,0x2e
  404382:	je     404690 <test@@Base+0x1370>
  404388:	mov    rax,rbx
  40438b:	sub    rax,r14
  40438e:	cmp    rax,0x1
  404392:	jle    4043a0 <test@@Base+0x1080>
  404394:	cmp    BYTE PTR [r14],0x20
  404398:	jg     4043b1 <test@@Base+0x1091>
  40439a:	je     404634 <test@@Base+0x1314>
  4043a0:	mov    rsi,r14
  4043a3:	mov    rdx,rbx
  4043a6:	mov    rdi,rbp
  4043a9:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  4043ae:	mov    r14,rax
  4043b1:	cmp    rbx,r14
  4043b4:	je     4036b0 <test@@Base+0x390>
  4043ba:	jbe    404170 <test@@Base+0xe50>
  4043c0:	cmp    BYTE PTR [r14],0x3a
  4043c4:	jne    404170 <test@@Base+0xe50>
  4043ca:	lea    r13,[r14+0x1]
  4043ce:	mov    rax,rbx
  4043d1:	sub    rax,r13
  4043d4:	cmp    rax,0x1
  4043d8:	jle    4043e7 <test@@Base+0x10c7>
  4043da:	cmp    BYTE PTR [r14+0x1],0x20
  4043df:	jg     4043f8 <test@@Base+0x10d8>
  4043e1:	je     40465c <test@@Base+0x133c>
  4043e7:	mov    rsi,r13
  4043ea:	mov    rdx,rbx
  4043ed:	mov    rdi,rbp
  4043f0:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  4043f5:	mov    r13,rax
  4043f8:	cmp    rbx,r13
  4043fb:	je     403e58 <test@@Base+0xb38>
  404401:	mov    ecx,0x8
  404406:	mov    edx,0x8
  40440b:	mov    esi,0x3
  404410:	mov    rdi,r12
  404413:	call   407ce0 <flatcc_builder_table_add@@Base>
  404418:	test   rax,rax
  40441b:	je     40389c <test@@Base+0x57c>
  404421:	mov    r8,QWORD PTR [rsp+0x20]
  404426:	mov    rcx,QWORD PTR [rsp+0x28]
  40442b:	mov    rdx,rbx
  40442e:	mov    QWORD PTR [rsp+0x38],0x0
  404437:	mov    DWORD PTR [rsp+0x34],0x0
  40443f:	mov    rsi,r13
  404442:	mov    QWORD PTR [rax],0x0
  404449:	mov    rdi,rbp
  40444c:	mov    QWORD PTR [rsp+0x18],rax
  404451:	call   40b780 <flatcc_json_parser_integer@@Base>
  404456:	cmp    r13,rax
  404459:	mov    r14,rax
  40445c:	mov    r9,QWORD PTR [rsp+0x18]
  404461:	je     40389c <test@@Base+0x57c>
  404467:	mov    esi,DWORD PTR [rsp+0x34]
  40446b:	mov    rax,QWORD PTR [rsp+0x38]
  404470:	test   esi,esi
  404472:	je     404568 <test@@Base+0x1248>
  404478:	movabs rdx,0x8000000000000000
  404482:	cmp    rax,rdx
  404485:	ja     403f18 <test@@Base+0xbf8>
  40448b:	neg    rax
  40448e:	mov    QWORD PTR [r9],rax
  404491:	jmp    4039f2 <test@@Base+0x6d2>
  404496:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4044a0:	bt     rcx,rax
  4044a4:	jae    40436f <test@@Base+0x104f>
  4044aa:	cmp    rbx,rsi
  4044ad:	mov    r14,rsi
  4044b0:	je     404684 <test@@Base+0x1364>
  4044b6:	movzx  eax,BYTE PTR [rsi]
  4044b9:	add    rsi,0x1
  4044bd:	cmp    al,0x20
  4044bf:	jle    40437f <test@@Base+0x105f>
  4044c5:	mov    edx,eax
  4044c7:	jmp    404360 <test@@Base+0x1040>
  4044cc:	cmp    dl,0x2e
  4044cf:	mov    r14,rbx
  4044d2:	jne    403760 <test@@Base+0x440>
  4044d8:	mov    ecx,0x5
  4044dd:	jmp    403e88 <test@@Base+0xb68>
  4044e2:	mov    rsi,r13
  4044e5:	mov    ecx,0xd
  4044ea:	mov    rdx,rbx
  4044ed:	mov    rdi,rbp
  4044f0:	call   409be0 <flatcc_json_parser_set_error@@Base>
  4044f5:	mov    r15,QWORD PTR [rip+0xeafc]        # 412ff8 <stderr@GLIBC_2.2.5>
  4044fc:	mov    r13,rax
  4044ff:	jmp    4033f6 <test@@Base+0xd6>
  404504:	mov    r14,rbx
  404507:	mov    ecx,0x14
  40450c:	mov    rsi,r14
  40450f:	mov    rdx,rbx
  404512:	mov    rdi,rbp
  404515:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40451a:	mov    r14,rax
  40451d:	jmp    404388 <test@@Base+0x1068>
  404522:	mov    r14,rbx
  404525:	mov    ecx,0x14
  40452a:	mov    rsi,r14
  40452d:	mov    rdx,rbx
  404530:	mov    rdi,rbp
  404533:	call   409be0 <flatcc_json_parser_set_error@@Base>
  404538:	mov    r14,rax
  40453b:	jmp    404208 <test@@Base+0xee8>
  404540:	cmp    BYTE PTR [r14+0x1],0x20
  404545:	jle    403fe8 <test@@Base+0xcc8>
  40454b:	add    r14,0x1
  40454f:	jmp    403ff9 <test@@Base+0xcd9>
  404554:	cmp    BYTE PTR [r14+0x2],0x20
  404559:	jle    40402f <test@@Base+0xd0f>
  40455f:	lea    r13,[r14+0x2]
  404563:	jmp    404040 <test@@Base+0xd20>
  404568:	test   rax,rax
  40456b:	js     403b98 <test@@Base+0x878>
  404571:	mov    QWORD PTR [r9],rax
  404574:	jmp    4039f2 <test@@Base+0x6d2>
  404579:	cmp    BYTE PTR [r14],0x22
  40457d:	jne    404525 <test@@Base+0x1205>
  40457f:	add    r14,0x1
  404583:	jmp    404208 <test@@Base+0xee8>
  404588:	cmp    BYTE PTR [r14],0x22
  40458c:	jne    404507 <test@@Base+0x11e7>
  404592:	add    r14,0x1
  404596:	jmp    404388 <test@@Base+0x1068>
  40459b:	cmp    rbx,r14
  40459e:	jbe    403a7e <test@@Base+0x75e>
  4045a4:	cmp    al,0x7d
  4045a6:	jne    403a7e <test@@Base+0x75e>
  4045ac:	mov    r13,r14
  4045af:	mov    rdi,r12
  4045b2:	lea    r14,[r13+0x1]
  4045b6:	call   406e00 <flatcc_builder_end_table@@Base>
  4045bb:	mov    rdi,r12
  4045be:	mov    esi,eax
  4045c0:	call   4058b0 <flatcc_builder_end_buffer@@Base>
  4045c5:	mov    rax,rbx
  4045c8:	sub    rax,r14
  4045cb:	sub    rax,0x1
  4045cf:	jle    4045e2 <test@@Base+0x12c2>
  4045d1:	cmp    BYTE PTR [r13+0x1],0x20
  4045d6:	jg     4046b5 <test@@Base+0x1395>
  4045dc:	je     4046bd <test@@Base+0x139d>
  4045e2:	mov    rdx,rbx
  4045e5:	mov    rsi,r14
  4045e8:	mov    rdi,rbp
  4045eb:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  4045f0:	mov    r13,rax
  4045f3:	cmp    rbx,r13
  4045f6:	mov    r15,QWORD PTR [rip+0xe9fb]        # 412ff8 <stderr@GLIBC_2.2.5>
  4045fd:	je     4033f6 <test@@Base+0xd6>
  404603:	mov    rdi,QWORD PTR [r15]
  404606:	lea    rdx,[rip+0x8a20]        # 40d02d <_IO_stdin_used@@Base+0x2d>
  40460d:	mov    esi,0x1
  404612:	xor    eax,eax
  404614:	call   4030e0 <__fprintf_chk@plt>
  404619:	jmp    4033f6 <test@@Base+0xd6>
  40461e:	cmp    dl,0x2e
  404621:	mov    r14,rbx
  404624:	jne    403fe8 <test@@Base+0xcc8>
  40462a:	mov    ecx,0x5
  40462f:	jmp    404150 <test@@Base+0xe30>
  404634:	cmp    BYTE PTR [r14+0x1],0x20
  404639:	jle    4043a0 <test@@Base+0x1080>
  40463f:	add    r14,0x1
  404643:	jmp    4043b1 <test@@Base+0x1091>
  404648:	cmp    BYTE PTR [r14+0x1],0x20
  40464d:	jle    404220 <test@@Base+0xf00>
  404653:	add    r14,0x1
  404657:	jmp    404231 <test@@Base+0xf11>
  40465c:	cmp    BYTE PTR [r14+0x2],0x20
  404661:	jle    4043e7 <test@@Base+0x10c7>
  404667:	lea    r13,[r14+0x2]
  40466b:	jmp    4043f8 <test@@Base+0x10d8>
  404670:	cmp    BYTE PTR [r14+0x2],0x20
  404675:	jle    404267 <test@@Base+0xf47>
  40467b:	lea    r13,[r14+0x2]
  40467f:	jmp    404278 <test@@Base+0xf58>
  404684:	cmp    dl,0x2e
  404687:	mov    r14,rbx
  40468a:	jne    4043a0 <test@@Base+0x1080>
  404690:	mov    ecx,0x5
  404695:	jmp    40450c <test@@Base+0x11ec>
  40469a:	cmp    dl,0x2e
  40469d:	mov    r14,rbx
  4046a0:	jne    404220 <test@@Base+0xf00>
  4046a6:	mov    ecx,0x5
  4046ab:	jmp    40452a <test@@Base+0x120a>
  4046b0:	call   403060 <__stack_chk_fail@plt>
  4046b5:	mov    r13,r14
  4046b8:	jmp    4045f3 <test@@Base+0x12d3>
  4046bd:	cmp    BYTE PTR [r13+0x2],0x20
  4046c2:	jle    4045e2 <test@@Base+0x12c2>
  4046c8:	add    r13,0x2
  4046cc:	jmp    4045f3 <test@@Base+0x12d3>
  4046d1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4046db:	nop    DWORD PTR [rax+rax*1+0x0]
  4046e0:	push   rbp
  4046e1:	push   rbx
  4046e2:	mov    ebp,edx
  4046e4:	mov    rbx,rdi
  4046e7:	mov    r8d,0x1
  4046ed:	mov    ecx,0x1
  4046f2:	sub    rsp,0x8
  4046f6:	mov    edx,DWORD PTR [rdi+0x28]
  4046f9:	add    rdx,rsi
  4046fc:	lea    rsi,[rdi+0x68]
  404700:	mov    rdi,QWORD PTR [rdi+0x40]
  404704:	call   QWORD PTR [rbx+0x50]
  404707:	test   eax,eax
  404709:	jne    404738 <test@@Base+0x1418>
  40470b:	mov    edx,DWORD PTR [rbx+0x28]
  40470e:	mov    rcx,rdx
  404711:	add    rdx,QWORD PTR [rbx+0x68]
  404715:	mov    QWORD PTR [rbx+0x18],rdx
  404719:	mov    edx,DWORD PTR [rbx+0x70]
  40471c:	sub    edx,ecx
  40471e:	cmp    ebp,edx
  404720:	cmovb  edx,ebp
  404723:	mov    DWORD PTR [rbx+0x24],edx
  404726:	mov    rdx,QWORD PTR [rbx+0x30]
  40472a:	mov    DWORD PTR [rdx+0x4],ebp
  40472d:	add    rsp,0x8
  404731:	pop    rbx
  404732:	pop    rbp
  404733:	ret    
  404734:	nop    DWORD PTR [rax+0x0]
  404738:	mov    eax,0xffffffff
  40473d:	jmp    40472d <test@@Base+0x140d>
  40473f:	nop

0000000000404740 <flatcc_builder_default_alloc@@Base>:
  404740:	push   r12
  404742:	push   rbp
  404743:	mov    rbp,rsi
  404746:	push   rbx
  404747:	sub    rsp,0x10
  40474b:	test   rdx,rdx
  40474e:	jne    404780 <flatcc_builder_default_alloc@@Base+0x40>
  404750:	mov    rdi,QWORD PTR [rsi]
  404753:	xor    eax,eax
  404755:	test   rdi,rdi
  404758:	je     404777 <flatcc_builder_default_alloc@@Base+0x37>
  40475a:	mov    DWORD PTR [rsp+0xc],eax
  40475e:	call   403030 <free@plt>
  404763:	mov    eax,DWORD PTR [rsp+0xc]
  404767:	mov    QWORD PTR [rbp+0x0],0x0
  40476f:	mov    QWORD PTR [rbp+0x8],0x0
  404777:	add    rsp,0x10
  40477b:	pop    rbx
  40477c:	pop    rbp
  40477d:	pop    r12
  40477f:	ret    
  404780:	cmp    r8d,0x4
  404784:	je     404820 <flatcc_builder_default_alloc@@Base+0xe0>
  40478a:	jle    404830 <flatcc_builder_default_alloc@@Base+0xf0>
  404790:	cmp    r8d,0x5
  404794:	mov    rbx,rdx
  404797:	je     4047b8 <flatcc_builder_default_alloc@@Base+0x78>
  404799:	cmp    r8d,0x7
  40479d:	mov    ebx,0x40
  4047a2:	je     4047b3 <flatcc_builder_default_alloc@@Base+0x73>
  4047a4:	jmp    40483f <flatcc_builder_default_alloc@@Base+0xff>
  4047a9:	nop    DWORD PTR [rax+0x0]
  4047b0:	add    rbx,rbx
  4047b3:	cmp    rdx,rbx
  4047b6:	ja     4047b0 <flatcc_builder_default_alloc@@Base+0x70>
  4047b8:	mov    rax,QWORD PTR [rbp+0x8]
  4047bc:	cmp    rdx,rax
  4047bf:	ja     4047ce <flatcc_builder_default_alloc@@Base+0x8e>
  4047c1:	shr    rax,1
  4047c4:	mov    rdx,rax
  4047c7:	xor    eax,eax
  4047c9:	cmp    rdx,rbx
  4047cc:	jae    404777 <flatcc_builder_default_alloc@@Base+0x37>
  4047ce:	mov    rdi,QWORD PTR [rbp+0x0]
  4047d2:	mov    rsi,rbx
  4047d5:	mov    DWORD PTR [rsp+0xc],ecx
  4047d9:	call   4030d0 <realloc@plt>
  4047de:	test   rax,rax
  4047e1:	mov    r12,rax
  4047e4:	je     404849 <flatcc_builder_default_alloc@@Base+0x109>
  4047e6:	mov    ecx,DWORD PTR [rsp+0xc]
  4047ea:	test   ecx,ecx
  4047ec:	je     404808 <flatcc_builder_default_alloc@@Base+0xc8>
  4047ee:	mov    rax,QWORD PTR [rbp+0x8]
  4047f2:	cmp    rax,rbx
  4047f5:	jae    404808 <flatcc_builder_default_alloc@@Base+0xc8>
  4047f7:	mov    rdx,rbx
  4047fa:	lea    rdi,[r12+rax*1]
  4047fe:	xor    esi,esi
  404800:	sub    rdx,rax
  404803:	call   403080 <memset@plt>
  404808:	mov    QWORD PTR [rbp+0x0],r12
  40480c:	mov    QWORD PTR [rbp+0x8],rbx
  404810:	add    rsp,0x10
  404814:	pop    rbx
  404815:	xor    eax,eax
  404817:	pop    rbp
  404818:	pop    r12
  40481a:	ret    
  40481b:	nop    DWORD PTR [rax+rax*1+0x0]
  404820:	mov    ebx,0x120
  404825:	jmp    4047b3 <flatcc_builder_default_alloc@@Base+0x73>
  404827:	nop    WORD PTR [rax+rax*1+0x0]
  404830:	cmp    r8d,0x1
  404834:	mov    ebx,0x100
  404839:	je     4047b3 <flatcc_builder_default_alloc@@Base+0x73>
  40483f:	mov    ebx,0x20
  404844:	jmp    4047b3 <flatcc_builder_default_alloc@@Base+0x73>
  404849:	mov    eax,0xffffffff
  40484e:	jmp    404777 <flatcc_builder_default_alloc@@Base+0x37>
  404853:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40485e:	xchg   ax,ax
  404860:	push   rbx
  404861:	mov    r9,rdi
  404864:	sub    rsp,0xa0
  40486b:	mov    rbx,QWORD PTR fs:0x28
  404874:	mov    QWORD PTR [rsp+0x98],rbx
  40487c:	xor    ebx,ebx
  40487e:	test   dx,dx
  404881:	je     4048e0 <flatcc_builder_default_alloc@@Base+0x1a0>
  404883:	mov    eax,edx
  404885:	movzx  edx,dx
  404888:	movzx  edi,WORD PTR [rsi]
  40488b:	cmp    di,0x3
  40488f:	ja     40489e <flatcc_builder_default_alloc@@Base+0x15e>
  404891:	mov    edi,0x4
  404896:	mov    WORD PTR [rsi],di
  404899:	mov    edi,0x4
  40489e:	cmp    ax,di
  4048a1:	jbe    4048a6 <flatcc_builder_default_alloc@@Base+0x166>
  4048a3:	mov    WORD PTR [rsi],ax
  4048a6:	test   ecx,ecx
  4048a8:	jne    4048b8 <flatcc_builder_default_alloc@@Base+0x178>
  4048aa:	mov    ebx,DWORD PTR [r9+0xf4]
  4048b1:	sub    edx,0x1
  4048b4:	and    edx,ebx
  4048b6:	jne    404900 <flatcc_builder_default_alloc@@Base+0x1c0>
  4048b8:	xor    eax,eax
  4048ba:	mov    rbx,QWORD PTR [rsp+0x98]
  4048c2:	xor    rbx,QWORD PTR fs:0x28
  4048cb:	jne    40496d <flatcc_builder_default_alloc@@Base+0x22d>
  4048d1:	add    rsp,0xa0
  4048d8:	pop    rbx
  4048d9:	ret    
  4048da:	nop    WORD PTR [rax+rax*1+0x0]
  4048e0:	movzx  eax,WORD PTR [rdi+0xec]
  4048e7:	test   ax,ax
  4048ea:	movzx  edx,ax
  4048ed:	jne    404888 <flatcc_builder_default_alloc@@Base+0x148>
  4048ef:	mov    edx,0x1
  4048f4:	mov    eax,0x1
  4048f9:	jmp    404888 <flatcc_builder_default_alloc@@Base+0x148>
  4048fb:	nop    DWORD PTR [rax+rax*1+0x0]
  404900:	mov    rax,0x40de40
  404907:	movsxd r8,edx
  40490a:	add    edx,ebx
  40490c:	cmp    ebx,edx
  40490e:	mov    QWORD PTR [rsp],r8
  404912:	mov    QWORD PTR [rsp+0x18],r8
  404917:	mov    DWORD PTR [rsp+0x8],0x1
  40491f:	mov    DWORD PTR [r9+0xf4],edx
  404926:	mov    QWORD PTR [rsp+0x10],rax
  40492b:	jg     404972 <flatcc_builder_default_alloc@@Base+0x232>
  40492d:	lea    rsi,[rsp+0x10]
  404932:	mov    rdi,QWORD PTR [r9+0x38]
  404936:	mov    ecx,ebx
  404938:	mov    edx,0x1
  40493d:	call   QWORD PTR [r9+0x48]
  404941:	test   eax,eax
  404943:	jne    404977 <flatcc_builder_default_alloc@@Base+0x237>
  404945:	cmp    ebx,0xffffffff
  404948:	jne    4048b8 <flatcc_builder_default_alloc@@Base+0x178>
  40494e:	lea    rcx,[rip+0x945b]        # 40ddb0 <g_data@@Base+0xcf0>
  404955:	lea    rsi,[rip+0x89ec]        # 40d348 <g_data@@Base+0x288>
  40495c:	lea    rdi,[rip+0x8d7c]        # 40d6df <g_data@@Base+0x61f>
  404963:	mov    edx,0x2be
  404968:	call   403070 <__assert_fail@plt>
  40496d:	call   403060 <__stack_chk_fail@plt>
  404972:	call   403123 <posix_memalign@plt+0x33>
  404977:	lea    rcx,[rip+0x9422]        # 40dda0 <g_data@@Base+0xce0>
  40497e:	lea    rsi,[rip+0x89c3]        # 40d348 <g_data@@Base+0x288>
  404985:	lea    rdi,[rip+0x8d53]        # 40d6df <g_data@@Base+0x61f>
  40498c:	mov    edx,0x2a5
  404991:	call   403070 <__assert_fail@plt>
  404996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4049a0:	push   r12
  4049a2:	push   rbp
  4049a3:	mov    r12d,esi
  4049a6:	push   rbx
  4049a7:	movsxd rax,DWORD PTR [rdi+0x104]
  4049ae:	mov    rbx,rdi
  4049b1:	lea    edx,[rax+0x1]
  4049b4:	cmp    edx,DWORD PTR [rdi+0x108]
  4049ba:	mov    DWORD PTR [rdi+0x104],edx
  4049c0:	jle    404a40 <flatcc_builder_default_alloc@@Base+0x300>
  4049c2:	mov    ecx,DWORD PTR [rdi+0x120]
  4049c8:	test   ecx,ecx
  4049ca:	jle    4049d4 <flatcc_builder_default_alloc@@Base+0x294>
  4049cc:	cmp    edx,ecx
  4049ce:	jg     404ac0 <flatcc_builder_default_alloc@@Base+0x380>
  4049d4:	lea    rcx,[rax+rax*8]
  4049d8:	lea    rbp,[rcx*4+0x0]
  4049e0:	lea    rdx,[rbp+0x24]
  4049e4:	cmp    rdx,QWORD PTR [rbx+0xa0]
  4049eb:	ja     404a98 <flatcc_builder_default_alloc@@Base+0x358>
  4049f1:	mov    rcx,rbp
  4049f4:	add    rcx,QWORD PTR [rbx+0x98]
  4049fb:	test   rcx,rcx
  4049fe:	mov    QWORD PTR [rbx+0x30],rcx
  404a02:	je     404ac0 <flatcc_builder_default_alloc@@Base+0x380>
  404a08:	movabs rdx,0xe38e38e38e38e38f
  404a12:	mov    rax,rdx
  404a15:	mul    QWORD PTR [rbx+0xa0]
  404a1c:	mov    eax,DWORD PTR [rbx+0x120]
  404a22:	shr    rdx,0x5
  404a26:	test   eax,eax
  404a28:	mov    DWORD PTR [rbx+0x108],edx
  404a2e:	jle    404a90 <flatcc_builder_default_alloc@@Base+0x350>
  404a30:	cmp    eax,edx
  404a32:	jge    404a90 <flatcc_builder_default_alloc@@Base+0x350>
  404a34:	mov    DWORD PTR [rbx+0x108],eax
  404a3a:	mov    rax,rcx
  404a3d:	jmp    404a4c <flatcc_builder_default_alloc@@Base+0x30c>
  404a3f:	nop
  404a40:	mov    rax,QWORD PTR [rdi+0x30]
  404a44:	add    rax,0x24
  404a48:	mov    QWORD PTR [rdi+0x30],rax
  404a4c:	movzx  edx,WORD PTR [rbx+0xea]
  404a53:	mov    ecx,DWORD PTR [rbx+0x20]
  404a56:	mov    DWORD PTR [rax+0x8],ecx
  404a59:	mov    WORD PTR [rax+0xc],dx
  404a5d:	mov    edx,DWORD PTR [rbx+0x28]
  404a60:	mov    WORD PTR [rbx+0xea],r12w
  404a68:	mov    DWORD PTR [rax+0x4],0xfffffffc
  404a6f:	mov    DWORD PTR [rax],edx
  404a71:	lea    eax,[rcx+rdx*1+0x7]
  404a75:	mov    DWORD PTR [rbx+0x20],0x0
  404a7c:	and    eax,0xfffffff8
  404a7f:	mov    DWORD PTR [rbx+0x28],eax
  404a82:	xor    eax,eax
  404a84:	pop    rbx
  404a85:	pop    rbp
  404a86:	pop    r12
  404a88:	ret    
  404a89:	nop    DWORD PTR [rax+0x0]
  404a90:	mov    rax,rcx
  404a93:	jmp    404a4c <flatcc_builder_default_alloc@@Base+0x30c>
  404a95:	nop    DWORD PTR [rax]
  404a98:	xor    ecx,ecx
  404a9a:	lea    rsi,[rbx+0x98]
  404aa1:	mov    rdi,QWORD PTR [rbx+0x40]
  404aa5:	mov    r8d,0x4
  404aab:	call   QWORD PTR [rbx+0x50]
  404aae:	test   eax,eax
  404ab0:	je     4049f1 <flatcc_builder_default_alloc@@Base+0x2b1>
  404ab6:	call   403100 <posix_memalign@plt+0x10>
  404abb:	nop    DWORD PTR [rax+rax*1+0x0]
  404ac0:	mov    eax,0xffffffff
  404ac5:	jmp    404a84 <flatcc_builder_default_alloc@@Base+0x344>
  404ac7:	nop    WORD PTR [rax+rax*1+0x0]
  404ad0:	push   rbp
  404ad1:	push   rbx
  404ad2:	sub    rsp,0xb8
  404ad9:	mov    rax,QWORD PTR fs:0x28
  404ae2:	mov    QWORD PTR [rsp+0xa8],rax
  404aea:	xor    eax,eax
  404aec:	cmp    edx,0x3fffffff
  404af2:	ja     404c88 <flatcc_builder_default_alloc@@Base+0x548>
  404af8:	cmp    WORD PTR [rdi+0xe8],0x3
  404b00:	mov    rbx,rdi
  404b03:	mov    r10d,edx
  404b06:	ja     404b14 <flatcc_builder_default_alloc@@Base+0x3d4>
  404b08:	mov    eax,0x4
  404b0d:	mov    WORD PTR [rdi+0xe8],ax
  404b14:	mov    eax,DWORD PTR [rbx+0xf0]
  404b1a:	lea    r9d,[rdx*4+0x0]
  404b22:	lea    r8,[rsp+0xc]
  404b27:	mov    DWORD PTR [rsp+0xc],edx
  404b2b:	mov    QWORD PTR [rsp+0x10],0x4
  404b34:	mov    QWORD PTR [rsp+0x20],r8
  404b39:	mov    QWORD PTR [rsp+0x28],0x4
  404b42:	mov    r8d,0x4
  404b48:	mov    edi,eax
  404b4a:	mov    DWORD PTR [rsp+0x18],0x1
  404b52:	and    edi,0x3
  404b55:	test   r9d,r9d
  404b58:	je     404b75 <flatcc_builder_default_alloc@@Base+0x435>
  404b5a:	lea    r8,[r9+0x4]
  404b5e:	mov    QWORD PTR [rsp+0x30],rsi
  404b63:	mov    QWORD PTR [rsp+0x38],r9
  404b68:	mov    DWORD PTR [rsp+0x18],0x2
  404b70:	mov    QWORD PTR [rsp+0x10],r8
  404b75:	test   edi,edi
  404b77:	jne    404c50 <flatcc_builder_default_alloc@@Base+0x510>
  404b7d:	mov    r11d,eax
  404b80:	sub    r11d,r8d
  404b83:	test   edx,edx
  404b85:	je     404bf6 <flatcc_builder_default_alloc@@Base+0x4b6>
  404b87:	mov    edx,0xfffffffc
  404b8c:	xor    eax,eax
  404b8e:	jmp    404bb7 <flatcc_builder_default_alloc@@Base+0x477>
  404b90:	mov    r9d,edx
  404b93:	sub    r9d,r11d
  404b96:	add    edi,r9d
  404b99:	test   rcx,rcx
  404b9c:	mov    DWORD PTR [rsi+rax*4],edi
  404b9f:	je     404bab <flatcc_builder_default_alloc@@Base+0x46b>
  404ba1:	cmp    BYTE PTR [rcx+rax*1],0x0
  404ba5:	je     404cab <flatcc_builder_default_alloc@@Base+0x56b>
  404bab:	add    rax,0x1
  404baf:	sub    edx,0x4
  404bb2:	cmp    r10d,eax
  404bb5:	jbe    404bf0 <flatcc_builder_default_alloc@@Base+0x4b0>
  404bb7:	mov    edi,DWORD PTR [rsi+rax*4]
  404bba:	test   edi,edi
  404bbc:	jne    404b90 <flatcc_builder_default_alloc@@Base+0x450>
  404bbe:	test   rcx,rcx
  404bc1:	je     404c8c <flatcc_builder_default_alloc@@Base+0x54c>
  404bc7:	cmp    BYTE PTR [rcx+rax*1],0x0
  404bcb:	je     404bab <flatcc_builder_default_alloc@@Base+0x46b>
  404bcd:	lea    rcx,[rip+0x8e3c]        # 40da10 <g_data@@Base+0x950>
  404bd4:	lea    rsi,[rip+0x876d]        # 40d348 <g_data@@Base+0x288>
  404bdb:	lea    rdi,[rip+0x8aff]        # 40d6e1 <g_data@@Base+0x621>
  404be2:	mov    edx,0x5b5
  404be7:	call   403070 <__assert_fail@plt>
  404bec:	nop    DWORD PTR [rax+0x0]
  404bf0:	mov    eax,DWORD PTR [rbx+0xf0]
  404bf6:	mov    ebp,eax
  404bf8:	sub    ebp,r8d
  404bfb:	cmp    ebp,eax
  404bfd:	jge    404cca <flatcc_builder_default_alloc@@Base+0x58a>
  404c03:	lea    rsi,[rsp+0x20]
  404c08:	mov    rdi,QWORD PTR [rbx+0x38]
  404c0c:	mov    ecx,ebp
  404c0e:	mov    edx,DWORD PTR [rsp+0x18]
  404c12:	call   QWORD PTR [rbx+0x48]
  404c15:	test   eax,eax
  404c17:	jne    404cee <flatcc_builder_default_alloc@@Base+0x5ae>
  404c1d:	mov    DWORD PTR [rbx+0xf0],ebp
  404c23:	mov    rbx,QWORD PTR [rsp+0xa8]
  404c2b:	xor    rbx,QWORD PTR fs:0x28
  404c34:	mov    eax,ebp
  404c36:	jne    404ce9 <flatcc_builder_default_alloc@@Base+0x5a9>
  404c3c:	add    rsp,0xb8
  404c43:	pop    rbx
  404c44:	pop    rbp
  404c45:	ret    
  404c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c50:	movsxd r11,DWORD PTR [rsp+0x18]
  404c55:	mov    rbp,0x40de40
  404c5c:	add    r8,rdi
  404c5f:	mov    QWORD PTR [rsp+0x10],r8
  404c64:	mov    r9,r11
  404c67:	shl    r11,0x4
  404c6b:	add    r9d,0x1
  404c6f:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  404c74:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  404c79:	mov    DWORD PTR [rsp+0x18],r9d
  404c7e:	jmp    404b7d <flatcc_builder_default_alloc@@Base+0x43d>
  404c83:	nop    DWORD PTR [rax+rax*1+0x0]
  404c88:	xor    ebp,ebp
  404c8a:	jmp    404c23 <flatcc_builder_default_alloc@@Base+0x4e3>
  404c8c:	lea    rcx,[rip+0x8d7d]        # 40da10 <g_data@@Base+0x950>
  404c93:	lea    rsi,[rip+0x86ae]        # 40d348 <g_data@@Base+0x288>
  404c9a:	lea    rdi,[rip+0x8a3e]        # 40d6df <g_data@@Base+0x61f>
  404ca1:	mov    edx,0x5b7
  404ca6:	call   403070 <__assert_fail@plt>
  404cab:	lea    rcx,[rip+0x8d5e]        # 40da10 <g_data@@Base+0x950>
  404cb2:	lea    rsi,[rip+0x868f]        # 40d348 <g_data@@Base+0x288>
  404cb9:	lea    rdi,[rip+0x8a13]        # 40d6d3 <g_data@@Base+0x613>
  404cc0:	mov    edx,0x5b1
  404cc5:	call   403070 <__assert_fail@plt>
  404cca:	lea    rcx,[rip+0x90bf]        # 40dd90 <g_data@@Base+0xcd0>
  404cd1:	lea    rsi,[rip+0x8670]        # 40d348 <g_data@@Base+0x288>
  404cd8:	lea    rdi,[rip+0x8a00]        # 40d6df <g_data@@Base+0x61f>
  404cdf:	mov    edx,0x287
  404ce4:	call   403070 <__assert_fail@plt>
  404ce9:	call   403060 <__stack_chk_fail@plt>
  404cee:	call   403146 <posix_memalign@plt+0x56>
  404cf3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404cfe:	xchg   ax,ax

0000000000404d00 <flatcc_builder_flush_vtable_cache@@Base>:
  404d00:	cmp    QWORD PTR [rdi+0xd8],0x0
  404d08:	jne    404d10 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  404d0a:	ret    
  404d0b:	nop    DWORD PTR [rax+rax*1+0x0]
  404d10:	push   rbx
  404d11:	mov    rbx,rdi
  404d14:	mov    rdi,QWORD PTR [rdi+0xa8]
  404d1b:	mov    rdx,QWORD PTR [rbx+0xb0]
  404d22:	xor    esi,esi
  404d24:	call   403080 <memset@plt>
  404d29:	mov    DWORD PTR [rbx+0xe4],0x10
  404d33:	mov    DWORD PTR [rbx+0xe0],0x0
  404d3d:	pop    rbx
  404d3e:	ret    
  404d3f:	nop

0000000000404d40 <flatcc_builder_custom_init@@Base>:
  404d40:	mov    QWORD PTR [rdi],0x0
  404d47:	mov    QWORD PTR [rdi+0x180],0x0
  404d52:	mov    r9,rdi
  404d55:	lea    rdi,[rdi+0x8]
  404d59:	mov    r10,rcx
  404d5c:	mov    rcx,r9
  404d5f:	xor    eax,eax
  404d61:	and    rdi,0xfffffffffffffff8
  404d65:	sub    rcx,rdi
  404d68:	add    ecx,0x188
  404d6e:	shr    ecx,0x3
  404d71:	test   rsi,rsi
  404d74:	rep stos QWORD PTR es:[rdi],rax
  404d77:	je     404da8 <flatcc_builder_custom_init@@Base+0x68>
  404d79:	test   r10,r10
  404d7c:	je     404d98 <flatcc_builder_custom_init@@Base+0x58>
  404d7e:	mov    QWORD PTR [r9+0x40],r8
  404d82:	mov    QWORD PTR [r9+0x50],r10
  404d86:	xor    eax,eax
  404d88:	mov    QWORD PTR [r9+0x38],rdx
  404d8c:	mov    QWORD PTR [r9+0x48],rsi
  404d90:	ret    
  404d91:	nop    DWORD PTR [rax+0x0]
  404d98:	mov    r10,0x404740
  404d9f:	jmp    404d7e <flatcc_builder_custom_init@@Base+0x3e>
  404da1:	nop    DWORD PTR [rax+0x0]
  404da8:	mov    DWORD PTR [r9+0x128],0x1
  404db3:	lea    rdx,[r9+0x130]
  404dba:	mov    rsi,0x4087f0
  404dc1:	jmp    404d79 <flatcc_builder_custom_init@@Base+0x39>
  404dc3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404dce:	xchg   ax,ax

0000000000404dd0 <flatcc_builder_init@@Base>:
  404dd0:	xor    r8d,r8d
  404dd3:	xor    ecx,ecx
  404dd5:	xor    edx,edx
  404dd7:	xor    esi,esi
  404dd9:	jmp    404d40 <flatcc_builder_custom_init@@Base>
  404dde:	xchg   ax,ax

0000000000404de0 <flatcc_builder_custom_reset@@Base>:
  404de0:	push   r14
  404de2:	mov    r14d,esi
  404de5:	push   r13
  404de7:	mov    r13d,edx
  404dea:	push   r12
  404dec:	mov    r12,rdi
  404def:	push   rbp
  404df0:	xor    ebp,ebp
  404df2:	push   rbx
  404df3:	lea    rbx,[rdi+0x58]
  404df7:	jmp    404e46 <flatcc_builder_custom_reset@@Base+0x66>
  404df9:	nop    DWORD PTR [rax+0x0]
  404e00:	cmp    ebp,0x5
  404e03:	je     404e2f <flatcc_builder_custom_reset@@Base+0x4f>
  404e05:	test   r13d,r13d
  404e08:	je     404e2f <flatcc_builder_custom_reset@@Base+0x4f>
  404e0a:	mov    rdi,QWORD PTR [r12+0x40]
  404e0f:	mov    r8d,ebp
  404e12:	mov    ecx,0x1
  404e17:	mov    edx,0x1
  404e1c:	mov    rsi,rbx
  404e1f:	call   QWORD PTR [r12+0x50]
  404e24:	test   eax,eax
  404e26:	jne    404f80 <flatcc_builder_custom_reset@@Base+0x1a0>
  404e2c:	mov    rdi,QWORD PTR [rbx]
  404e2f:	mov    rdx,QWORD PTR [rbx+0x8]
  404e33:	xor    esi,esi
  404e35:	call   403080 <memset@plt>
  404e3a:	add    ebp,0x1
  404e3d:	add    rbx,0x10
  404e41:	cmp    ebp,0x8
  404e44:	je     404e78 <flatcc_builder_custom_reset@@Base+0x98>
  404e46:	mov    rdi,QWORD PTR [rbx]
  404e49:	test   rdi,rdi
  404e4c:	jne    404e00 <flatcc_builder_custom_reset@@Base+0x20>
  404e4e:	cmp    QWORD PTR [rbx+0x8],0x0
  404e53:	je     404e3a <flatcc_builder_custom_reset@@Base+0x5a>
  404e55:	lea    rcx,[rip+0x8fc4]        # 40de20 <g_data@@Base+0xd60>
  404e5c:	lea    rsi,[rip+0x84e5]        # 40d348 <g_data@@Base+0x288>
  404e63:	lea    rdi,[rip+0x8885]        # 40d6ef <g_data@@Base+0x62f>
  404e6a:	mov    edx,0x1b2
  404e6f:	call   403070 <__assert_fail@plt>
  404e74:	nop    DWORD PTR [rax+0x0]
  404e78:	mov    edx,DWORD PTR [r12+0xe4]
  404e80:	mov    DWORD PTR [r12+0xe0],0x0
  404e8c:	test   edx,edx
  404e8e:	je     404e9c <flatcc_builder_custom_reset@@Base+0xbc>
  404e90:	mov    DWORD PTR [r12+0xe4],0x10
  404e9c:	xor    eax,eax
  404e9e:	test   r14d,r14d
  404ea1:	mov    DWORD PTR [r12+0xf0],0x0
  404ead:	mov    WORD PTR [r12+0xe8],ax
  404eb6:	mov    rax,QWORD PTR [r12+0x68]
  404ebb:	mov    DWORD PTR [r12+0xf4],0x0
  404ec7:	mov    DWORD PTR [r12+0x104],0x0
  404ed3:	mov    DWORD PTR [r12+0x108],0x0
  404edf:	mov    DWORD PTR [r12+0x20],0x0
  404ee8:	mov    QWORD PTR [r12+0x18],rax
  404eed:	mov    rax,QWORD PTR [r12+0x88]
  404ef5:	mov    DWORD PTR [r12+0x24],0x0
  404efe:	mov    DWORD PTR [r12+0xfc],0x0
  404f0a:	mov    DWORD PTR [r12+0x100],0x0
  404f16:	mov    QWORD PTR [r12+0x30],0x0
  404f1f:	mov    QWORD PTR [r12],rax
  404f23:	mov    rax,QWORD PTR [r12+0x58]
  404f28:	mov    QWORD PTR [r12+0x8],rax
  404f2d:	jne    404f58 <flatcc_builder_custom_reset@@Base+0x178>
  404f2f:	mov    eax,DWORD PTR [r12+0x128]
  404f37:	test   eax,eax
  404f39:	je     404f4a <flatcc_builder_custom_reset@@Base+0x16a>
  404f3b:	lea    rdi,[r12+0x130]
  404f43:	call   408680 <flatcc_emitter_reset@@Base>
  404f48:	xor    eax,eax
  404f4a:	pop    rbx
  404f4b:	pop    rbp
  404f4c:	pop    r12
  404f4e:	pop    r13
  404f50:	pop    r14
  404f52:	ret    
  404f53:	nop    DWORD PTR [rax+rax*1+0x0]
  404f58:	mov    QWORD PTR [r12+0x118],0x0
  404f64:	mov    DWORD PTR [r12+0x120],0x0
  404f70:	mov    DWORD PTR [r12+0x124],0x0
  404f7c:	jmp    404f2f <flatcc_builder_custom_reset@@Base+0x14f>
  404f7e:	xchg   ax,ax
  404f80:	mov    eax,0xffffffff
  404f85:	jmp    404f4a <flatcc_builder_custom_reset@@Base+0x16a>
  404f87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404f90 <flatcc_builder_reset@@Base>:
  404f90:	xor    edx,edx
  404f92:	xor    esi,esi
  404f94:	jmp    404de0 <flatcc_builder_custom_reset@@Base>
  404f99:	nop    DWORD PTR [rax+0x0]

0000000000404fa0 <flatcc_builder_clear@@Base>:
  404fa0:	push   r12
  404fa2:	lea    r12,[rdi+0x58]
  404fa6:	push   rbp
  404fa7:	xor    ebp,ebp
  404fa9:	push   rbx
  404faa:	mov    rbx,rdi
  404fad:	nop    DWORD PTR [rax]
  404fb0:	mov    r8d,ebp
  404fb3:	add    ebp,0x1
  404fb6:	xor    ecx,ecx
  404fb8:	xor    edx,edx
  404fba:	mov    rsi,r12
  404fbd:	mov    rdi,QWORD PTR [rbx+0x40]
  404fc1:	add    r12,0x10
  404fc5:	call   QWORD PTR [rbx+0x50]
  404fc8:	cmp    ebp,0x8
  404fcb:	jne    404fb0 <flatcc_builder_clear@@Base+0x10>
  404fcd:	mov    eax,DWORD PTR [rbx+0x128]
  404fd3:	test   eax,eax
  404fd5:	je     404fe3 <flatcc_builder_clear@@Base+0x43>
  404fd7:	lea    rdi,[rbx+0x130]
  404fde:	call   408760 <flatcc_emitter_clear@@Base>
  404fe3:	lea    rdi,[rbx+0x8]
  404fe7:	mov    QWORD PTR [rbx],0x0
  404fee:	mov    QWORD PTR [rbx+0x180],0x0
  404ff9:	xor    eax,eax
  404ffb:	and    rdi,0xfffffffffffffff8
  404fff:	sub    rbx,rdi
  405002:	lea    ecx,[rbx+0x188]
  405008:	shr    ecx,0x3
  40500b:	rep stos QWORD PTR es:[rdi],rax
  40500e:	pop    rbx
  40500f:	pop    rbp
  405010:	pop    r12
  405012:	ret    
  405013:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40501e:	xchg   ax,ax

0000000000405020 <flatcc_builder_enter_user_frame_ptr@@Base>:
  405020:	push   r12
  405022:	push   rbp
  405023:	mov    r12,rdi
  405026:	push   rbx
  405027:	lea    rbx,[rsi+0x7]
  40502b:	mov    rbp,QWORD PTR [rdi+0x180]
  405032:	and    rbx,0xfffffffffffffff8
  405036:	add    rbx,0x8
  40503a:	lea    rdx,[rbx+rbp*1]
  40503e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  405045:	ja     405098 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  405047:	add    rbp,QWORD PTR [r12+0xc8]
  40504f:	je     4050c0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  405051:	mov    rdx,rbx
  405054:	xor    esi,esi
  405056:	mov    rdi,rbp
  405059:	call   403080 <memset@plt>
  40505e:	mov    rax,QWORD PTR [r12+0x178]
  405066:	mov    QWORD PTR [rbp+0x0],rax
  40506a:	mov    rax,QWORD PTR [r12+0x180]
  405072:	lea    rdx,[rax+0x8]
  405076:	add    rbx,rax
  405079:	lea    rax,[rbp+0x8]
  40507d:	mov    QWORD PTR [r12+0x180],rbx
  405085:	mov    QWORD PTR [r12+0x178],rdx
  40508d:	pop    rbx
  40508e:	pop    rbp
  40508f:	pop    r12
  405091:	ret    
  405092:	nop    WORD PTR [rax+rax*1+0x0]
  405098:	lea    rsi,[rdi+0xc8]
  40509f:	xor    ecx,ecx
  4050a1:	mov    rdi,QWORD PTR [rdi+0x40]
  4050a5:	mov    r8d,0x7
  4050ab:	call   QWORD PTR [r12+0x50]
  4050b0:	test   eax,eax
  4050b2:	je     405047 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  4050b4:	call   403100 <posix_memalign@plt+0x10>
  4050b9:	nop    DWORD PTR [rax+0x0]
  4050c0:	xor    eax,eax
  4050c2:	jmp    40508d <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  4050c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4050cf:	nop

00000000004050d0 <flatcc_builder_enter_user_frame@@Base>:
  4050d0:	push   r12
  4050d2:	push   rbp
  4050d3:	mov    r12,rdi
  4050d6:	push   rbx
  4050d7:	lea    rbx,[rsi+0x7]
  4050db:	mov    rbp,QWORD PTR [rdi+0x180]
  4050e2:	and    rbx,0xfffffffffffffff8
  4050e6:	add    rbx,0x8
  4050ea:	lea    rdx,[rbx+rbp*1]
  4050ee:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4050f5:	ja     405140 <flatcc_builder_enter_user_frame@@Base+0x70>
  4050f7:	xor    eax,eax
  4050f9:	add    rbp,QWORD PTR [r12+0xc8]
  405101:	je     40513b <flatcc_builder_enter_user_frame@@Base+0x6b>
  405103:	mov    rdx,rbx
  405106:	xor    esi,esi
  405108:	mov    rdi,rbp
  40510b:	call   403080 <memset@plt>
  405110:	mov    rax,QWORD PTR [r12+0x178]
  405118:	mov    QWORD PTR [rbp+0x0],rax
  40511c:	mov    rdx,QWORD PTR [r12+0x180]
  405124:	lea    rax,[rdx+0x8]
  405128:	add    rbx,rdx
  40512b:	mov    QWORD PTR [r12+0x180],rbx
  405133:	mov    QWORD PTR [r12+0x178],rax
  40513b:	pop    rbx
  40513c:	pop    rbp
  40513d:	pop    r12
  40513f:	ret    
  405140:	lea    rsi,[rdi+0xc8]
  405147:	xor    ecx,ecx
  405149:	mov    rdi,QWORD PTR [rdi+0x40]
  40514d:	mov    r8d,0x7
  405153:	call   QWORD PTR [r12+0x50]
  405158:	test   eax,eax
  40515a:	je     4050f7 <flatcc_builder_enter_user_frame@@Base+0x27>
  40515c:	call   403100 <posix_memalign@plt+0x10>
  405161:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40516c:	nop    DWORD PTR [rax+0x0]

0000000000405170 <flatcc_builder_exit_user_frame@@Base>:
  405170:	mov    rax,QWORD PTR [rdi+0x178]
  405177:	test   rax,rax
  40517a:	je     40519c <flatcc_builder_exit_user_frame@@Base+0x2c>
  40517c:	mov    edx,eax
  40517e:	add    rdx,QWORD PTR [rdi+0xc8]
  405185:	sub    rax,0x8
  405189:	mov    QWORD PTR [rdi+0x180],rax
  405190:	mov    rax,QWORD PTR [rdx-0x8]
  405194:	mov    QWORD PTR [rdi+0x178],rax
  40519b:	ret    
  40519c:	lea    rcx,[rip+0x8c4d]        # 40ddf0 <g_data@@Base+0xd30>
  4051a3:	lea    rsi,[rip+0x819e]        # 40d348 <g_data@@Base+0x288>
  4051aa:	lea    rdi,[rip+0x8550]        # 40d701 <g_data@@Base+0x641>
  4051b1:	sub    rsp,0x8
  4051b5:	mov    edx,0x21e
  4051ba:	call   403070 <__assert_fail@plt>
  4051bf:	nop

00000000004051c0 <flatcc_builder_exit_user_frame_at@@Base>:
  4051c0:	cmp    QWORD PTR [rdi+0x178],rsi
  4051c7:	jb     4051d5 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  4051c9:	mov    QWORD PTR [rdi+0x178],rsi
  4051d0:	jmp    405170 <flatcc_builder_exit_user_frame@@Base>
  4051d5:	lea    rcx,[rip+0x8be4]        # 40ddc0 <g_data@@Base+0xd00>
  4051dc:	lea    rsi,[rip+0x8165]        # 40d348 <g_data@@Base+0x288>
  4051e3:	lea    rdi,[rip+0x81be]        # 40d3a8 <g_data@@Base+0x2e8>
  4051ea:	sub    rsp,0x8
  4051ee:	mov    edx,0x227
  4051f3:	call   403070 <__assert_fail@plt>
  4051f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405200 <flatcc_builder_get_current_user_frame@@Base>:
  405200:	mov    rax,QWORD PTR [rdi+0x178]
  405207:	ret    
  405208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405210 <flatcc_builder_get_user_frame_ptr@@Base>:
  405210:	mov    eax,esi
  405212:	add    rax,QWORD PTR [rdi+0xc8]
  405219:	ret    
  40521a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405220 <flatcc_builder_embed_buffer@@Base>:
  405220:	push   r13
  405222:	push   r12
  405224:	mov    r12,rcx
  405227:	push   rbp
  405228:	push   rbx
  405229:	xor    ecx,ecx
  40522b:	mov    rbp,rdx
  40522e:	movzx  edx,si
  405231:	mov    rbx,rdi
  405234:	sub    rsp,0xc8
  40523b:	mov    r13d,r9d
  40523e:	mov    WORD PTR [rsp+0xc],r8w
  405244:	mov    r8d,DWORD PTR [rdi+0x100]
  40524b:	lea    rsi,[rsp+0xc]
  405250:	mov    rax,QWORD PTR fs:0x28
  405259:	mov    QWORD PTR [rsp+0xb8],rax
  405261:	xor    eax,eax
  405263:	test   r8d,r8d
  405266:	setne  cl
  405269:	call   404860 <flatcc_builder_default_alloc@@Base+0x120>
  40526e:	test   eax,eax
  405270:	jne    4053b8 <flatcc_builder_embed_buffer@@Base+0x198>
  405276:	mov    edx,DWORD PTR [rbx+0xf0]
  40527c:	movzx  ecx,WORD PTR [rsp+0xc]
  405281:	xor    esi,esi
  405283:	and    r13d,0x2
  405287:	mov    QWORD PTR [rsp+0x20],0x0
  405290:	mov    DWORD PTR [rsp+0x28],0x0
  405298:	setne  sil
  40529c:	xor    r8d,r8d
  40529f:	mov    eax,edx
  4052a1:	shl    esi,0x2
  4052a4:	sub    eax,r12d
  4052a7:	sub    ecx,0x1
  4052aa:	sub    eax,esi
  4052ac:	and    eax,ecx
  4052ae:	lea    ecx,[rax+r12*1]
  4052b2:	mov    DWORD PTR [rsp+0x1c],ecx
  4052b6:	mov    ecx,DWORD PTR [rbx+0x100]
  4052bc:	test   ecx,ecx
  4052be:	je     4052ea <flatcc_builder_embed_buffer@@Base+0xca>
  4052c0:	lea    rcx,[rsp+0x1c]
  4052c5:	mov    QWORD PTR [rsp+0x20],0x4
  4052ce:	mov    QWORD PTR [rsp+0x38],0x4
  4052d7:	mov    DWORD PTR [rsp+0x28],0x1
  4052df:	mov    r8d,0x4
  4052e5:	mov    QWORD PTR [rsp+0x30],rcx
  4052ea:	test   r12,r12
  4052ed:	je     405314 <flatcc_builder_embed_buffer@@Base+0xf4>
  4052ef:	movsxd rsi,DWORD PTR [rsp+0x28]
  4052f4:	add    r8,r12
  4052f7:	mov    QWORD PTR [rsp+0x20],r8
  4052fc:	mov    rcx,rsi
  4052ff:	shl    rsi,0x4
  405303:	add    ecx,0x1
  405306:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  40530b:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  405310:	mov    DWORD PTR [rsp+0x28],ecx
  405314:	test   eax,eax
  405316:	jne    405380 <flatcc_builder_embed_buffer@@Base+0x160>
  405318:	mov    ebp,edx
  40531a:	sub    ebp,r8d
  40531d:	cmp    edx,ebp
  40531f:	jle    4053bc <flatcc_builder_embed_buffer@@Base+0x19c>
  405325:	movabs rax,0x10000000f
  40532f:	cmp    r8,rax
  405332:	ja     4053bc <flatcc_builder_embed_buffer@@Base+0x19c>
  405338:	lea    rsi,[rsp+0x30]
  40533d:	mov    rdi,QWORD PTR [rbx+0x38]
  405341:	mov    ecx,ebp
  405343:	mov    edx,DWORD PTR [rsp+0x28]
  405347:	call   QWORD PTR [rbx+0x48]
  40534a:	test   eax,eax
  40534c:	jne    4053e0 <flatcc_builder_embed_buffer@@Base+0x1c0>
  405352:	mov    DWORD PTR [rbx+0xf0],ebp
  405358:	mov    rdi,QWORD PTR [rsp+0xb8]
  405360:	xor    rdi,QWORD PTR fs:0x28
  405369:	mov    eax,ebp
  40536b:	jne    4053db <flatcc_builder_embed_buffer@@Base+0x1bb>
  40536d:	add    rsp,0xc8
  405374:	pop    rbx
  405375:	pop    rbp
  405376:	pop    r12
  405378:	pop    r13
  40537a:	ret    
  40537b:	nop    DWORD PTR [rax+rax*1+0x0]
  405380:	movsxd rsi,DWORD PTR [rsp+0x28]
  405385:	mov    rdi,0x40de40
  40538c:	add    r8,rax
  40538f:	mov    QWORD PTR [rsp+0x20],r8
  405394:	mov    rcx,rsi
  405397:	shl    rsi,0x4
  40539b:	add    ecx,0x1
  40539e:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4053a3:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4053a8:	mov    DWORD PTR [rsp+0x28],ecx
  4053ac:	jmp    405318 <flatcc_builder_embed_buffer@@Base+0xf8>
  4053b1:	nop    DWORD PTR [rax+0x0]
  4053b8:	xor    ebp,ebp
  4053ba:	jmp    405358 <flatcc_builder_embed_buffer@@Base+0x138>
  4053bc:	lea    rcx,[rip+0x89cd]        # 40dd90 <g_data@@Base+0xcd0>
  4053c3:	lea    rsi,[rip+0x7f7e]        # 40d348 <g_data@@Base+0x288>
  4053ca:	lea    rdi,[rip+0x830e]        # 40d6df <g_data@@Base+0x61f>
  4053d1:	mov    edx,0x287
  4053d6:	call   403070 <__assert_fail@plt>
  4053db:	call   403060 <__stack_chk_fail@plt>
  4053e0:	call   403146 <posix_memalign@plt+0x56>
  4053e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004053f0 <flatcc_builder_create_buffer@@Base>:
  4053f0:	push   r14
  4053f2:	push   r13
  4053f4:	mov    r13d,r9d
  4053f7:	push   r12
  4053f9:	push   rbp
  4053fa:	and    r13d,0x1
  4053fe:	push   rbx
  4053ff:	mov    r14,rsi
  405402:	mov    r12d,ecx
  405405:	movzx  edx,dx
  405408:	mov    ecx,r13d
  40540b:	mov    rbp,rdi
  40540e:	sub    rsp,0xc0
  405415:	mov    ebx,r9d
  405418:	lea    rsi,[rsp+0xc]
  40541d:	mov    WORD PTR [rsp+0xc],r8w
  405423:	mov    DWORD PTR [rsp+0x1c],0x0
  40542b:	mov    rax,QWORD PTR fs:0x28
  405434:	mov    QWORD PTR [rsp+0xb8],rax
  40543c:	xor    eax,eax
  40543e:	call   404860 <flatcc_builder_default_alloc@@Base+0x120>
  405443:	test   eax,eax
  405445:	jne    405600 <flatcc_builder_create_buffer@@Base+0x210>
  40544b:	movzx  ecx,WORD PTR [rsp+0xc]
  405450:	cmp    cx,WORD PTR [rbp+0xe8]
  405457:	ja     4055f0 <flatcc_builder_create_buffer@@Base+0x200>
  40545d:	test   r14,r14
  405460:	mov    eax,DWORD PTR [rsp+0x1c]
  405464:	je     40546d <flatcc_builder_create_buffer@@Base+0x7d>
  405466:	mov    eax,DWORD PTR [r14]
  405469:	mov    DWORD PTR [rsp+0x1c],eax
  40546d:	xor    r10d,r10d
  405470:	test   eax,eax
  405472:	mov    edi,ebx
  405474:	setne  r10b
  405478:	and    edi,0x1
  40547b:	mov    edx,DWORD PTR [rbp+0xf0]
  405481:	shl    r10d,0x2
  405485:	and    ebx,0x2
  405488:	jne    4055b8 <flatcc_builder_create_buffer@@Base+0x1c8>
  40548e:	lea    eax,[rdx-0x4]
  405491:	sub    ecx,0x1
  405494:	sub    eax,r10d
  405497:	and    eax,ecx
  405499:	test   dil,dil
  40549c:	jne    4055c3 <flatcc_builder_create_buffer@@Base+0x1d3>
  4054a2:	mov    ecx,0x1
  4054a7:	mov    r8d,0x4
  4054ad:	movsxd rsi,ebx
  4054b0:	lea    r9,[rsp+0x14]
  4054b5:	mov    QWORD PTR [rsp+0x20],r8
  4054ba:	shl    rsi,0x4
  4054be:	test   r10d,r10d
  4054c1:	mov    DWORD PTR [rsp+0x28],ecx
  4054c5:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  4054ca:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  4054d3:	je     4054f7 <flatcc_builder_create_buffer@@Base+0x107>
  4054d5:	lea    rsi,[rsp+0x1c]
  4054da:	shl    rcx,0x4
  4054de:	add    r8,r10
  4054e1:	add    ebx,0x2
  4054e4:	mov    QWORD PTR [rsp+0x20],r8
  4054e9:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  4054ee:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  4054f3:	mov    DWORD PTR [rsp+0x28],ebx
  4054f7:	test   eax,eax
  4054f9:	je     405527 <flatcc_builder_create_buffer@@Base+0x137>
  4054fb:	movsxd rsi,DWORD PTR [rsp+0x28]
  405500:	mov    r9,0x40de40
  405507:	add    r8,rax
  40550a:	mov    QWORD PTR [rsp+0x20],r8
  40550f:	mov    rcx,rsi
  405512:	shl    rsi,0x4
  405516:	add    ecx,0x1
  405519:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  40551e:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  405523:	mov    DWORD PTR [rsp+0x28],ecx
  405527:	mov    eax,edx
  405529:	sub    eax,r8d
  40552c:	test   dil,dil
  40552f:	je     405608 <flatcc_builder_create_buffer@@Base+0x218>
  405535:	add    eax,0x4
  405538:	test   r13d,r13d
  40553b:	je     405608 <flatcc_builder_create_buffer@@Base+0x218>
  405541:	mov    ecx,DWORD PTR [rbp+0xf8]
  405547:	sub    ecx,eax
  405549:	mov    DWORD PTR [rsp+0x18],ecx
  40554d:	mov    ebx,edx
  40554f:	sub    r12d,eax
  405552:	sub    ebx,r8d
  405555:	mov    DWORD PTR [rsp+0x14],r12d
  40555a:	cmp    ebx,edx
  40555c:	jge    405619 <flatcc_builder_create_buffer@@Base+0x229>
  405562:	lea    rsi,[rsp+0x30]
  405567:	mov    rdi,QWORD PTR [rbp+0x38]
  40556b:	mov    ecx,ebx
  40556d:	mov    edx,DWORD PTR [rsp+0x28]
  405571:	call   QWORD PTR [rbp+0x48]
  405574:	test   eax,eax
  405576:	jne    40563d <flatcc_builder_create_buffer@@Base+0x24d>
  40557c:	test   ebx,ebx
  40557e:	mov    DWORD PTR [rbp+0xf0],ebx
  405584:	je     405642 <flatcc_builder_create_buffer@@Base+0x252>
  40558a:	mov    rdi,QWORD PTR [rsp+0xb8]
  405592:	xor    rdi,QWORD PTR fs:0x28
  40559b:	mov    eax,ebx
  40559d:	jne    405638 <flatcc_builder_create_buffer@@Base+0x248>
  4055a3:	add    rsp,0xc0
  4055aa:	pop    rbx
  4055ab:	pop    rbp
  4055ac:	pop    r12
  4055ae:	pop    r13
  4055b0:	pop    r14
  4055b2:	ret    
  4055b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4055b8:	lea    eax,[rdx-0x8]
  4055bb:	sub    ecx,0x1
  4055be:	sub    eax,r10d
  4055c1:	and    eax,ecx
  4055c3:	lea    rcx,[rsp+0x18]
  4055c8:	mov    QWORD PTR [rsp+0x38],0x4
  4055d1:	mov    ebx,0x1
  4055d6:	mov    r8d,0x8
  4055dc:	mov    edi,0x1
  4055e1:	mov    QWORD PTR [rsp+0x30],rcx
  4055e6:	mov    ecx,0x2
  4055eb:	jmp    4054ad <flatcc_builder_create_buffer@@Base+0xbd>
  4055f0:	mov    WORD PTR [rbp+0xe8],cx
  4055f7:	jmp    40545d <flatcc_builder_create_buffer@@Base+0x6d>
  4055fc:	nop    DWORD PTR [rax+0x0]
  405600:	xor    ebx,ebx
  405602:	jmp    40558a <flatcc_builder_create_buffer@@Base+0x19a>
  405604:	nop    DWORD PTR [rax+0x0]
  405608:	mov    ecx,DWORD PTR [rbp+0xf4]
  40560e:	sub    ecx,eax
  405610:	mov    DWORD PTR [rsp+0x18],ecx
  405614:	jmp    40554d <flatcc_builder_create_buffer@@Base+0x15d>
  405619:	lea    rcx,[rip+0x8770]        # 40dd90 <g_data@@Base+0xcd0>
  405620:	lea    rsi,[rip+0x7d21]        # 40d348 <g_data@@Base+0x288>
  405627:	lea    rdi,[rip+0x80b1]        # 40d6df <g_data@@Base+0x61f>
  40562e:	mov    edx,0x287
  405633:	call   403070 <__assert_fail@plt>
  405638:	call   403060 <__stack_chk_fail@plt>
  40563d:	call   403146 <posix_memalign@plt+0x56>
  405642:	lea    rcx,[rip+0x8727]        # 40dd70 <g_data@@Base+0xcb0>
  405649:	lea    rsi,[rip+0x7cf8]        # 40d348 <g_data@@Base+0x288>
  405650:	lea    rdi,[rip+0x8088]        # 40d6df <g_data@@Base+0x61f>
  405657:	mov    edx,0x304
  40565c:	call   403070 <__assert_fail@plt>
  405661:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40566c:	nop    DWORD PTR [rax+0x0]

0000000000405670 <flatcc_builder_create_struct@@Base>:
  405670:	push   rbp
  405671:	push   rbx
  405672:	sub    rsp,0xa8
  405679:	mov    rax,QWORD PTR fs:0x28
  405682:	mov    QWORD PTR [rsp+0x98],rax
  40568a:	xor    eax,eax
  40568c:	test   cx,cx
  40568f:	je     40579f <flatcc_builder_create_struct@@Base+0x12f>
  405695:	mov    rbx,rdi
  405698:	mov    r8,rdx
  40569b:	movzx  edi,cx
  40569e:	cmp    cx,WORD PTR [rbx+0xe8]
  4056a5:	jbe    4056ae <flatcc_builder_create_struct@@Base+0x3e>
  4056a7:	mov    WORD PTR [rbx+0xe8],cx
  4056ae:	mov    edx,DWORD PTR [rbx+0xf0]
  4056b4:	lea    ecx,[rdi-0x1]
  4056b7:	mov    QWORD PTR [rsp],0x0
  4056bf:	mov    DWORD PTR [rsp+0x8],0x0
  4056c7:	mov    eax,edx
  4056c9:	sub    eax,r8d
  4056cc:	and    eax,ecx
  4056ce:	test   r8,r8
  4056d1:	jne    405760 <flatcc_builder_create_struct@@Base+0xf0>
  4056d7:	test   eax,eax
  4056d9:	je     405706 <flatcc_builder_create_struct@@Base+0x96>
  4056db:	movsxd rsi,DWORD PTR [rsp+0x8]
  4056e0:	mov    rdi,0x40de40
  4056e7:	add    r8,rax
  4056ea:	mov    QWORD PTR [rsp],r8
  4056ee:	mov    rcx,rsi
  4056f1:	shl    rsi,0x4
  4056f5:	add    ecx,0x1
  4056f8:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  4056fd:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  405702:	mov    DWORD PTR [rsp+0x8],ecx
  405706:	mov    ebp,edx
  405708:	movabs rax,0x10000000f
  405712:	sub    ebp,r8d
  405715:	cmp    r8,rax
  405718:	ja     40577b <flatcc_builder_create_struct@@Base+0x10b>
  40571a:	cmp    edx,ebp
  40571c:	jle    40577b <flatcc_builder_create_struct@@Base+0x10b>
  40571e:	lea    rsi,[rsp+0x10]
  405723:	mov    rdi,QWORD PTR [rbx+0x38]
  405727:	mov    ecx,ebp
  405729:	mov    edx,DWORD PTR [rsp+0x8]
  40572d:	call   QWORD PTR [rbx+0x48]
  405730:	test   eax,eax
  405732:	jne    40579a <flatcc_builder_create_struct@@Base+0x12a>
  405734:	mov    rdx,QWORD PTR [rsp+0x98]
  40573c:	xor    rdx,QWORD PTR fs:0x28
  405745:	mov    DWORD PTR [rbx+0xf0],ebp
  40574b:	mov    eax,ebp
  40574d:	jne    4057be <flatcc_builder_create_struct@@Base+0x14e>
  40574f:	add    rsp,0xa8
  405756:	pop    rbx
  405757:	pop    rbp
  405758:	ret    
  405759:	nop    DWORD PTR [rax+0x0]
  405760:	mov    QWORD PTR [rsp],r8
  405764:	mov    QWORD PTR [rsp+0x10],rsi
  405769:	mov    QWORD PTR [rsp+0x18],r8
  40576e:	mov    DWORD PTR [rsp+0x8],0x1
  405776:	jmp    4056d7 <flatcc_builder_create_struct@@Base+0x67>
  40577b:	lea    rcx,[rip+0x860e]        # 40dd90 <g_data@@Base+0xcd0>
  405782:	lea    rsi,[rip+0x7bbf]        # 40d348 <g_data@@Base+0x288>
  405789:	lea    rdi,[rip+0x7f4f]        # 40d6df <g_data@@Base+0x61f>
  405790:	mov    edx,0x287
  405795:	call   403070 <__assert_fail@plt>
  40579a:	call   403146 <posix_memalign@plt+0x56>
  40579f:	lea    rcx,[rip+0x85aa]        # 40dd50 <g_data@@Base+0xc90>
  4057a6:	lea    rsi,[rip+0x7b9b]        # 40d348 <g_data@@Base+0x288>
  4057ad:	lea    rdi,[rip+0x7f66]        # 40d71a <g_data@@Base+0x65a>
  4057b4:	mov    edx,0x30f
  4057b9:	call   403070 <__assert_fail@plt>
  4057be:	call   403060 <__stack_chk_fail@plt>
  4057c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4057ce:	xchg   ax,ax

00000000004057d0 <flatcc_builder_start_buffer@@Base>:
  4057d0:	push   r13
  4057d2:	push   r12
  4057d4:	mov    r13d,edx
  4057d7:	push   rbp
  4057d8:	push   rbx
  4057d9:	mov    rbp,rsi
  4057dc:	mov    rbx,rdi
  4057df:	mov    r12d,ecx
  4057e2:	sub    rsp,0x8
  4057e6:	movzx  esi,WORD PTR [rdi+0xe8]
  4057ed:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  4057f2:	test   eax,eax
  4057f4:	jne    4058a0 <flatcc_builder_start_buffer@@Base+0xd0>
  4057fa:	movzx  edx,WORD PTR [rbx+0xec]
  405801:	mov    rdi,QWORD PTR [rbx+0x30]
  405805:	mov    ecx,0x1
  40580a:	mov    WORD PTR [rbx+0xe8],cx
  405811:	test   rbp,rbp
  405814:	mov    rsi,rbp
  405817:	mov    WORD PTR [rdi+0x22],dx
  40581b:	movzx  edx,WORD PTR [rbx+0x10c]
  405822:	mov    WORD PTR [rbx+0xec],r13w
  40582a:	mov    WORD PTR [rdi+0x20],dx
  40582e:	mov    edx,DWORD PTR [rbx+0xf8]
  405834:	mov    WORD PTR [rbx+0x10c],r12w
  40583c:	mov    DWORD PTR [rdi+0x14],edx
  40583f:	mov    edx,DWORD PTR [rbx+0x100]
  405845:	mov    DWORD PTR [rdi+0x1c],edx
  405848:	mov    edx,DWORD PTR [rbx+0xf0]
  40584e:	mov    DWORD PTR [rbx+0xf8],edx
  405854:	mov    edx,DWORD PTR [rbx+0xfc]
  40585a:	lea    ecx,[rdx+0x1]
  40585d:	mov    DWORD PTR [rbx+0x100],edx
  405863:	mov    edx,DWORD PTR [rbx+0x110]
  405869:	mov    DWORD PTR [rbx+0xfc],ecx
  40586f:	mov    DWORD PTR [rdi+0x10],edx
  405872:	je     405890 <flatcc_builder_start_buffer@@Base+0xc0>
  405874:	mov    edx,DWORD PTR [rsi]
  405876:	mov    DWORD PTR [rbx+0x110],edx
  40587c:	mov    edx,0x1
  405881:	mov    WORD PTR [rdi+0xe],dx
  405885:	add    rsp,0x8
  405889:	pop    rbx
  40588a:	pop    rbp
  40588b:	pop    r12
  40588d:	pop    r13
  40588f:	ret    
  405890:	mov    rsi,0x40de40
  405897:	jmp    405874 <flatcc_builder_start_buffer@@Base+0xa4>
  405899:	nop    DWORD PTR [rax+0x0]
  4058a0:	mov    eax,0xffffffff
  4058a5:	jmp    405885 <flatcc_builder_start_buffer@@Base+0xb5>
  4058a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004058b0 <flatcc_builder_end_buffer@@Base>:
  4058b0:	push   rbp
  4058b1:	push   rbx
  4058b2:	xor    eax,eax
  4058b4:	sub    rsp,0x8
  4058b8:	movzx  r9d,WORD PTR [rdi+0x10c]
  4058c0:	mov    edx,DWORD PTR [rdi+0x100]
  4058c6:	and    r9d,0x2
  4058ca:	test   edx,edx
  4058cc:	setne  al
  4058cf:	or     r9d,eax
  4058d2:	mov    rax,QWORD PTR [rdi+0x30]
  4058d6:	cmp    WORD PTR [rax+0xe],0x1
  4058db:	jne    4059d1 <flatcc_builder_end_buffer@@Base+0x121>
  4058e1:	movzx  edx,WORD PTR [rdi+0xec]
  4058e8:	movzx  r8d,WORD PTR [rdi+0xe8]
  4058f0:	mov    rbx,rdi
  4058f3:	mov    ecx,esi
  4058f5:	cmp    dx,r8w
  4058f9:	ja     405920 <flatcc_builder_end_buffer@@Base+0x70>
  4058fb:	lea    rsi,[rbx+0x110]
  405902:	mov    rdi,rbx
  405905:	call   4053f0 <flatcc_builder_create_buffer@@Base>
  40590a:	test   eax,eax
  40590c:	mov    ebp,eax
  40590e:	jne    405930 <flatcc_builder_end_buffer@@Base+0x80>
  405910:	add    rsp,0x8
  405914:	mov    eax,ebp
  405916:	pop    rbx
  405917:	pop    rbp
  405918:	ret    
  405919:	nop    DWORD PTR [rax+0x0]
  405920:	mov    WORD PTR [rbx+0xe8],dx
  405927:	mov    r8d,edx
  40592a:	jmp    4058fb <flatcc_builder_end_buffer@@Base+0x4b>
  40592c:	nop    DWORD PTR [rax+0x0]
  405930:	mov    rax,QWORD PTR [rbx+0x30]
  405934:	mov    rdi,QWORD PTR [rbx+0x18]
  405938:	xor    esi,esi
  40593a:	mov    edx,DWORD PTR [rax+0x14]
  40593d:	mov    DWORD PTR [rbx+0xf8],edx
  405943:	mov    edx,DWORD PTR [rax+0x1c]
  405946:	mov    DWORD PTR [rbx+0x100],edx
  40594c:	mov    edx,DWORD PTR [rax+0x10]
  40594f:	mov    DWORD PTR [rbx+0x110],edx
  405955:	movzx  eax,WORD PTR [rax+0x20]
  405959:	mov    edx,DWORD PTR [rbx+0x20]
  40595c:	mov    WORD PTR [rbx+0x10c],ax
  405963:	call   403080 <memset@plt>
  405968:	mov    rax,QWORD PTR [rbx+0x30]
  40596c:	mov    edi,DWORD PTR [rbx+0x70]
  40596f:	mov    esi,DWORD PTR [rax]
  405971:	mov    edx,DWORD PTR [rax+0x8]
  405974:	mov    ecx,DWORD PTR [rax+0x4]
  405977:	mov    DWORD PTR [rbx+0x20],edx
  40597a:	mov    rdx,rsi
  40597d:	mov    DWORD PTR [rbx+0x28],esi
  405980:	add    rsi,QWORD PTR [rbx+0x68]
  405984:	sub    edi,edx
  405986:	cmp    ecx,edi
  405988:	mov    edx,edi
  40598a:	cmovb  edx,ecx
  40598d:	mov    DWORD PTR [rbx+0x24],edx
  405990:	movzx  edx,WORD PTR [rbx+0xea]
  405997:	cmp    dx,WORD PTR [rbx+0xe8]
  40599e:	mov    QWORD PTR [rbx+0x18],rsi
  4059a2:	mov    DWORD PTR [rax+0x4],ecx
  4059a5:	jbe    4059ae <flatcc_builder_end_buffer@@Base+0xfe>
  4059a7:	mov    WORD PTR [rbx+0xe8],dx
  4059ae:	movzx  edx,WORD PTR [rax+0xc]
  4059b2:	sub    rax,0x24
  4059b6:	sub    DWORD PTR [rbx+0x104],0x1
  4059bd:	mov    QWORD PTR [rbx+0x30],rax
  4059c1:	mov    eax,ebp
  4059c3:	mov    WORD PTR [rbx+0xea],dx
  4059ca:	add    rsp,0x8
  4059ce:	pop    rbx
  4059cf:	pop    rbp
  4059d0:	ret    
  4059d1:	lea    rcx,[rip+0x8358]        # 40dd30 <g_data@@Base+0xc70>
  4059d8:	lea    rsi,[rip+0x7969]        # 40d348 <g_data@@Base+0x288>
  4059df:	lea    rdi,[rip+0x79e2]        # 40d3c8 <g_data@@Base+0x308>
  4059e6:	mov    edx,0x346
  4059eb:	call   403070 <__assert_fail@plt>

00000000004059f0 <flatcc_builder_start_struct@@Base>:
  4059f0:	push   r12
  4059f2:	push   rbp
  4059f3:	mov    rbp,rsi
  4059f6:	push   rbx
  4059f7:	movzx  esi,dx
  4059fa:	mov    rbx,rdi
  4059fd:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  405a02:	test   eax,eax
  405a04:	jne    405a80 <flatcc_builder_start_struct@@Base+0x90>
  405a06:	mov    rcx,QWORD PTR [rbx+0x30]
  405a0a:	mov    eax,0x2
  405a0f:	mov    edi,DWORD PTR [rbx+0x70]
  405a12:	mov    WORD PTR [rcx+0xe],ax
  405a16:	mov    eax,DWORD PTR [rbx+0x28]
  405a19:	mov    rdx,rax
  405a1c:	add    rax,QWORD PTR [rbx+0x68]
  405a20:	sub    edi,edx
  405a22:	cmp    edi,0xfffffffc
  405a25:	mov    edx,edi
  405a27:	mov    QWORD PTR [rbx+0x18],rax
  405a2b:	ja     405a50 <flatcc_builder_start_struct@@Base+0x60>
  405a2d:	mov    DWORD PTR [rbx+0x24],edi
  405a30:	mov    r12d,DWORD PTR [rbx+0x20]
  405a34:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405a3b:	mov    rsi,r12
  405a3e:	add    esi,ebp
  405a40:	cmp    esi,edx
  405a42:	mov    DWORD PTR [rbx+0x20],esi
  405a45:	jae    405a60 <flatcc_builder_start_struct@@Base+0x70>
  405a47:	add    rax,r12
  405a4a:	pop    rbx
  405a4b:	pop    rbp
  405a4c:	pop    r12
  405a4e:	ret    
  405a4f:	nop
  405a50:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405a57:	mov    edx,0xfffffffc
  405a5c:	jmp    405a30 <flatcc_builder_start_struct@@Base+0x40>
  405a5e:	xchg   ax,ax
  405a60:	add    esi,0x1
  405a63:	mov    edx,0xfffffffc
  405a68:	mov    rdi,rbx
  405a6b:	call   4046e0 <test@@Base+0x13c0>
  405a70:	test   eax,eax
  405a72:	jne    405a80 <flatcc_builder_start_struct@@Base+0x90>
  405a74:	mov    rax,QWORD PTR [rbx+0x18]
  405a78:	jmp    405a47 <flatcc_builder_start_struct@@Base+0x57>
  405a7a:	nop    WORD PTR [rax+rax*1+0x0]
  405a80:	pop    rbx
  405a81:	xor    eax,eax
  405a83:	pop    rbp
  405a84:	pop    r12
  405a86:	ret    
  405a87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a90 <flatcc_builder_struct_edit@@Base>:
  405a90:	mov    rax,QWORD PTR [rdi+0x18]
  405a94:	ret    
  405a95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405aa0 <flatcc_builder_end_struct@@Base>:
  405aa0:	push   rbp
  405aa1:	push   rbx
  405aa2:	sub    rsp,0x8
  405aa6:	mov    rax,QWORD PTR [rdi+0x30]
  405aaa:	cmp    WORD PTR [rax+0xe],0x2
  405aaf:	jne    405b57 <flatcc_builder_end_struct@@Base+0xb7>
  405ab5:	movzx  ecx,WORD PTR [rdi+0xea]
  405abc:	mov    edx,DWORD PTR [rdi+0x20]
  405abf:	mov    rbx,rdi
  405ac2:	mov    rsi,QWORD PTR [rdi+0x18]
  405ac6:	call   405670 <flatcc_builder_create_struct@@Base>
  405acb:	test   eax,eax
  405acd:	mov    ebp,eax
  405acf:	jne    405ae0 <flatcc_builder_end_struct@@Base+0x40>
  405ad1:	add    rsp,0x8
  405ad5:	mov    eax,ebp
  405ad7:	pop    rbx
  405ad8:	pop    rbp
  405ad9:	ret    
  405ada:	nop    WORD PTR [rax+rax*1+0x0]
  405ae0:	mov    edx,DWORD PTR [rbx+0x20]
  405ae3:	mov    rdi,QWORD PTR [rbx+0x18]
  405ae7:	xor    esi,esi
  405ae9:	call   403080 <memset@plt>
  405aee:	mov    rax,QWORD PTR [rbx+0x30]
  405af2:	mov    edi,DWORD PTR [rbx+0x70]
  405af5:	mov    esi,DWORD PTR [rax]
  405af7:	mov    edx,DWORD PTR [rax+0x8]
  405afa:	mov    ecx,DWORD PTR [rax+0x4]
  405afd:	mov    DWORD PTR [rbx+0x20],edx
  405b00:	mov    rdx,rsi
  405b03:	mov    DWORD PTR [rbx+0x28],esi
  405b06:	add    rsi,QWORD PTR [rbx+0x68]
  405b0a:	sub    edi,edx
  405b0c:	cmp    ecx,edi
  405b0e:	mov    edx,edi
  405b10:	cmovb  edx,ecx
  405b13:	mov    DWORD PTR [rbx+0x24],edx
  405b16:	movzx  edx,WORD PTR [rbx+0xea]
  405b1d:	cmp    dx,WORD PTR [rbx+0xe8]
  405b24:	mov    QWORD PTR [rbx+0x18],rsi
  405b28:	mov    DWORD PTR [rax+0x4],ecx
  405b2b:	jbe    405b34 <flatcc_builder_end_struct@@Base+0x94>
  405b2d:	mov    WORD PTR [rbx+0xe8],dx
  405b34:	movzx  edx,WORD PTR [rax+0xc]
  405b38:	sub    rax,0x24
  405b3c:	sub    DWORD PTR [rbx+0x104],0x1
  405b43:	mov    QWORD PTR [rbx+0x30],rax
  405b47:	mov    eax,ebp
  405b49:	mov    WORD PTR [rbx+0xea],dx
  405b50:	add    rsp,0x8
  405b54:	pop    rbx
  405b55:	pop    rbp
  405b56:	ret    
  405b57:	lea    rcx,[rip+0x81b2]        # 40dd10 <g_data@@Base+0xc50>
  405b5e:	lea    rsi,[rip+0x77e3]        # 40d348 <g_data@@Base+0x288>
  405b65:	lea    rdi,[rip+0x788c]        # 40d3f8 <g_data@@Base+0x338>
  405b6c:	mov    edx,0x368
  405b71:	call   403070 <__assert_fail@plt>
  405b76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000405b80 <flatcc_builder_extend_vector@@Base>:
  405b80:	push   rbp
  405b81:	push   rbx
  405b82:	mov    eax,esi
  405b84:	sub    rsp,0x8
  405b88:	mov    rdx,QWORD PTR [rdi+0x30]
  405b8c:	add    eax,DWORD PTR [rdx+0x14]
  405b8f:	setb   cl
  405b92:	cmp    DWORD PTR [rdx+0x18],eax
  405b95:	jb     405bdd <flatcc_builder_extend_vector@@Base+0x5d>
  405b97:	movzx  ecx,cl
  405b9a:	test   ecx,ecx
  405b9c:	jne    405bdd <flatcc_builder_extend_vector@@Base+0x5d>
  405b9e:	imul   esi,DWORD PTR [rdx+0x10]
  405ba2:	mov    DWORD PTR [rdx+0x14],eax
  405ba5:	mov    ebp,DWORD PTR [rdi+0x20]
  405ba8:	mov    rbx,rdi
  405bab:	add    esi,ebp
  405bad:	cmp    esi,DWORD PTR [rdi+0x24]
  405bb0:	mov    DWORD PTR [rdi+0x20],esi
  405bb3:	jae    405bc8 <flatcc_builder_extend_vector@@Base+0x48>
  405bb5:	mov    rax,rbp
  405bb8:	add    rax,QWORD PTR [rbx+0x18]
  405bbc:	add    rsp,0x8
  405bc0:	pop    rbx
  405bc1:	pop    rbp
  405bc2:	ret    
  405bc3:	nop    DWORD PTR [rax+rax*1+0x0]
  405bc8:	add    esi,0x1
  405bcb:	mov    edx,0xfffffffc
  405bd0:	call   4046e0 <test@@Base+0x13c0>
  405bd5:	test   eax,eax
  405bd7:	je     405bb5 <flatcc_builder_extend_vector@@Base+0x35>
  405bd9:	xor    eax,eax
  405bdb:	jmp    405bbc <flatcc_builder_extend_vector@@Base+0x3c>
  405bdd:	call   403169 <posix_memalign@plt+0x79>
  405be2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405bed:	nop    DWORD PTR [rax]

0000000000405bf0 <flatcc_builder_vector_push@@Base>:
  405bf0:	push   r13
  405bf2:	push   r12
  405bf4:	push   rbp
  405bf5:	push   rbx
  405bf6:	sub    rsp,0x8
  405bfa:	mov    rax,QWORD PTR [rdi+0x30]
  405bfe:	cmp    WORD PTR [rax+0xe],0x4
  405c03:	jne    405c84 <flatcc_builder_vector_push@@Base+0x94>
  405c05:	mov    edx,DWORD PTR [rax+0x14]
  405c08:	cmp    edx,DWORD PTR [rax+0x18]
  405c0b:	ja     405c65 <flatcc_builder_vector_push@@Base+0x75>
  405c0d:	add    edx,0x1
  405c10:	mov    r12d,DWORD PTR [rax+0x10]
  405c14:	mov    rbx,rdi
  405c17:	mov    DWORD PTR [rax+0x14],edx
  405c1a:	mov    ebp,DWORD PTR [rdi+0x20]
  405c1d:	mov    r13,rsi
  405c20:	mov    rcx,rbp
  405c23:	add    ecx,r12d
  405c26:	cmp    ecx,DWORD PTR [rdi+0x24]
  405c29:	mov    DWORD PTR [rdi+0x20],ecx
  405c2c:	jae    405c50 <flatcc_builder_vector_push@@Base+0x60>
  405c2e:	add    rbp,QWORD PTR [rbx+0x18]
  405c32:	je     405c42 <flatcc_builder_vector_push@@Base+0x52>
  405c34:	mov    edx,r12d
  405c37:	mov    rsi,r13
  405c3a:	mov    rdi,rbp
  405c3d:	call   4030b0 <memcpy@plt>
  405c42:	add    rsp,0x8
  405c46:	mov    rax,rbp
  405c49:	pop    rbx
  405c4a:	pop    rbp
  405c4b:	pop    r12
  405c4d:	pop    r13
  405c4f:	ret    
  405c50:	lea    esi,[rcx+0x1]
  405c53:	mov    edx,0xfffffffc
  405c58:	call   4046e0 <test@@Base+0x13c0>
  405c5d:	test   eax,eax
  405c5f:	je     405c2e <flatcc_builder_vector_push@@Base+0x3e>
  405c61:	xor    ebp,ebp
  405c63:	jmp    405c42 <flatcc_builder_vector_push@@Base+0x52>
  405c65:	lea    rcx,[rip+0x8064]        # 40dcd0 <g_data@@Base+0xc10>
  405c6c:	lea    rsi,[rip+0x76d5]        # 40d348 <g_data@@Base+0x288>
  405c73:	lea    rdi,[rip+0x77de]        # 40d458 <g_data@@Base+0x398>
  405c7a:	mov    edx,0x38c
  405c7f:	call   403070 <__assert_fail@plt>
  405c84:	lea    rcx,[rip+0x8045]        # 40dcd0 <g_data@@Base+0xc10>
  405c8b:	lea    rsi,[rip+0x76b6]        # 40d348 <g_data@@Base+0x288>
  405c92:	lea    rdi,[rip+0x778f]        # 40d428 <g_data@@Base+0x368>
  405c99:	mov    edx,0x38b
  405c9e:	call   403070 <__assert_fail@plt>
  405ca3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405cae:	xchg   ax,ax

0000000000405cb0 <flatcc_builder_append_vector@@Base>:
  405cb0:	push   r13
  405cb2:	push   r12
  405cb4:	push   rbp
  405cb5:	push   rbx
  405cb6:	sub    rsp,0x8
  405cba:	mov    rax,QWORD PTR [rdi+0x30]
  405cbe:	cmp    WORD PTR [rax+0xe],0x4
  405cc3:	jne    405d3b <flatcc_builder_append_vector@@Base+0x8b>
  405cc5:	mov    r13,rsi
  405cc8:	mov    ecx,edx
  405cca:	xor    esi,esi
  405ccc:	add    ecx,DWORD PTR [rax+0x14]
  405ccf:	setb   sil
  405cd3:	cmp    DWORD PTR [rax+0x18],ecx
  405cd6:	jb     405d36 <flatcc_builder_append_vector@@Base+0x86>
  405cd8:	test   esi,esi
  405cda:	jne    405d36 <flatcc_builder_append_vector@@Base+0x86>
  405cdc:	mov    ebx,DWORD PTR [rax+0x10]
  405cdf:	mov    DWORD PTR [rax+0x14],ecx
  405ce2:	mov    rbp,rdi
  405ce5:	mov    r12d,DWORD PTR [rdi+0x20]
  405ce9:	imul   ebx,edx
  405cec:	mov    rdx,r12
  405cef:	add    edx,ebx
  405cf1:	cmp    edx,DWORD PTR [rdi+0x24]
  405cf4:	mov    DWORD PTR [rdi+0x20],edx
  405cf7:	jae    405d20 <flatcc_builder_append_vector@@Base+0x70>
  405cf9:	add    r12,QWORD PTR [rbp+0x18]
  405cfd:	je     405d0c <flatcc_builder_append_vector@@Base+0x5c>
  405cff:	mov    edx,ebx
  405d01:	mov    rsi,r13
  405d04:	mov    rdi,r12
  405d07:	call   4030b0 <memcpy@plt>
  405d0c:	add    rsp,0x8
  405d10:	mov    rax,r12
  405d13:	pop    rbx
  405d14:	pop    rbp
  405d15:	pop    r12
  405d17:	pop    r13
  405d19:	ret    
  405d1a:	nop    WORD PTR [rax+rax*1+0x0]
  405d20:	lea    esi,[rdx+0x1]
  405d23:	mov    edx,0xfffffffc
  405d28:	call   4046e0 <test@@Base+0x13c0>
  405d2d:	test   eax,eax
  405d2f:	je     405cf9 <flatcc_builder_append_vector@@Base+0x49>
  405d31:	xor    r12d,r12d
  405d34:	jmp    405d0c <flatcc_builder_append_vector@@Base+0x5c>
  405d36:	call   403169 <posix_memalign@plt+0x79>
  405d3b:	lea    rcx,[rip+0x7f6e]        # 40dcb0 <g_data@@Base+0xbf0>
  405d42:	lea    rsi,[rip+0x75ff]        # 40d348 <g_data@@Base+0x288>
  405d49:	lea    rdi,[rip+0x76d8]        # 40d428 <g_data@@Base+0x368>
  405d50:	mov    edx,0x393
  405d55:	call   403070 <__assert_fail@plt>
  405d5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405d60 <flatcc_builder_extend_offset_vector@@Base>:
  405d60:	push   rbp
  405d61:	push   rbx
  405d62:	xor    edx,edx
  405d64:	mov    ecx,esi
  405d66:	sub    rsp,0x8
  405d6a:	mov    rax,QWORD PTR [rdi+0x30]
  405d6e:	add    ecx,DWORD PTR [rax+0x14]
  405d71:	setb   dl
  405d74:	test   edx,edx
  405d76:	jne    405dbd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405d78:	cmp    ecx,0x3fffffff
  405d7e:	ja     405dbd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405d80:	mov    DWORD PTR [rax+0x14],ecx
  405d83:	mov    ebp,DWORD PTR [rdi+0x20]
  405d86:	mov    rbx,rdi
  405d89:	lea    eax,[rbp+rsi*4+0x0]
  405d8d:	cmp    eax,DWORD PTR [rdi+0x24]
  405d90:	mov    DWORD PTR [rdi+0x20],eax
  405d93:	jae    405da8 <flatcc_builder_extend_offset_vector@@Base+0x48>
  405d95:	mov    rax,rbp
  405d98:	add    rax,QWORD PTR [rbx+0x18]
  405d9c:	add    rsp,0x8
  405da0:	pop    rbx
  405da1:	pop    rbp
  405da2:	ret    
  405da3:	nop    DWORD PTR [rax+rax*1+0x0]
  405da8:	lea    esi,[rax+0x1]
  405dab:	mov    edx,0xfffffffc
  405db0:	call   4046e0 <test@@Base+0x13c0>
  405db5:	test   eax,eax
  405db7:	je     405d95 <flatcc_builder_extend_offset_vector@@Base+0x35>
  405db9:	xor    eax,eax
  405dbb:	jmp    405d9c <flatcc_builder_extend_offset_vector@@Base+0x3c>
  405dbd:	call   403169 <posix_memalign@plt+0x79>
  405dc2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405dcd:	nop    DWORD PTR [rax]

0000000000405dd0 <flatcc_builder_offset_vector_push@@Base>:
  405dd0:	push   r12
  405dd2:	push   rbp
  405dd3:	push   rbx
  405dd4:	mov    rdx,QWORD PTR [rdi+0x30]
  405dd8:	cmp    WORD PTR [rdx+0xe],0x5
  405ddd:	jne    405e30 <flatcc_builder_offset_vector_push@@Base+0x60>
  405ddf:	mov    eax,DWORD PTR [rdx+0x14]
  405de2:	cmp    eax,0x3fffffff
  405de7:	je     405e29 <flatcc_builder_offset_vector_push@@Base+0x59>
  405de9:	add    eax,0x1
  405dec:	mov    rbp,rdi
  405def:	mov    r12d,esi
  405df2:	mov    DWORD PTR [rdx+0x14],eax
  405df5:	mov    ebx,DWORD PTR [rdi+0x20]
  405df8:	lea    edx,[rbx+0x4]
  405dfb:	cmp    edx,DWORD PTR [rdi+0x24]
  405dfe:	mov    DWORD PTR [rdi+0x20],edx
  405e01:	jae    405e18 <flatcc_builder_offset_vector_push@@Base+0x48>
  405e03:	mov    rax,rbx
  405e06:	add    rax,QWORD PTR [rbp+0x18]
  405e0a:	je     405e29 <flatcc_builder_offset_vector_push@@Base+0x59>
  405e0c:	mov    DWORD PTR [rax],r12d
  405e0f:	pop    rbx
  405e10:	pop    rbp
  405e11:	pop    r12
  405e13:	ret    
  405e14:	nop    DWORD PTR [rax+0x0]
  405e18:	lea    esi,[rbx+0x5]
  405e1b:	mov    edx,0xfffffffc
  405e20:	call   4046e0 <test@@Base+0x13c0>
  405e25:	test   eax,eax
  405e27:	je     405e03 <flatcc_builder_offset_vector_push@@Base+0x33>
  405e29:	pop    rbx
  405e2a:	xor    eax,eax
  405e2c:	pop    rbp
  405e2d:	pop    r12
  405e2f:	ret    
  405e30:	lea    rcx,[rip+0x7e49]        # 40dc80 <g_data@@Base+0xbc0>
  405e37:	lea    rsi,[rip+0x750a]        # 40d348 <g_data@@Base+0x288>
  405e3e:	lea    rdi,[rip+0x7653]        # 40d498 <g_data@@Base+0x3d8>
  405e45:	mov    edx,0x3a6
  405e4a:	call   403070 <__assert_fail@plt>
  405e4f:	nop

0000000000405e50 <flatcc_builder_append_offset_vector@@Base>:
  405e50:	push   r13
  405e52:	push   r12
  405e54:	push   rbp
  405e55:	push   rbx
  405e56:	sub    rsp,0x8
  405e5a:	mov    rax,QWORD PTR [rdi+0x30]
  405e5e:	cmp    WORD PTR [rax+0xe],0x5
  405e63:	jne    405edb <flatcc_builder_append_offset_vector@@Base+0x8b>
  405e65:	mov    r13,rsi
  405e68:	mov    ecx,edx
  405e6a:	xor    esi,esi
  405e6c:	add    ecx,DWORD PTR [rax+0x14]
  405e6f:	setb   sil
  405e73:	test   esi,esi
  405e75:	jne    405ed6 <flatcc_builder_append_offset_vector@@Base+0x86>
  405e77:	cmp    ecx,0x3fffffff
  405e7d:	ja     405ed6 <flatcc_builder_append_offset_vector@@Base+0x86>
  405e7f:	mov    DWORD PTR [rax+0x14],ecx
  405e82:	mov    r12d,DWORD PTR [rdi+0x20]
  405e86:	lea    ebx,[rdx*4+0x0]
  405e8d:	mov    rbp,rdi
  405e90:	mov    rdx,r12
  405e93:	add    edx,ebx
  405e95:	cmp    edx,DWORD PTR [rdi+0x24]
  405e98:	mov    DWORD PTR [rdi+0x20],edx
  405e9b:	jae    405ec0 <flatcc_builder_append_offset_vector@@Base+0x70>
  405e9d:	add    r12,QWORD PTR [rbp+0x18]
  405ea1:	je     405eb0 <flatcc_builder_append_offset_vector@@Base+0x60>
  405ea3:	mov    edx,ebx
  405ea5:	mov    rsi,r13
  405ea8:	mov    rdi,r12
  405eab:	call   4030b0 <memcpy@plt>
  405eb0:	add    rsp,0x8
  405eb4:	mov    rax,r12
  405eb7:	pop    rbx
  405eb8:	pop    rbp
  405eb9:	pop    r12
  405ebb:	pop    r13
  405ebd:	ret    
  405ebe:	xchg   ax,ax
  405ec0:	lea    esi,[rdx+0x1]
  405ec3:	mov    edx,0xfffffffc
  405ec8:	call   4046e0 <test@@Base+0x13c0>
  405ecd:	test   eax,eax
  405ecf:	je     405e9d <flatcc_builder_append_offset_vector@@Base+0x4d>
  405ed1:	xor    r12d,r12d
  405ed4:	jmp    405eb0 <flatcc_builder_append_offset_vector@@Base+0x60>
  405ed6:	call   403169 <posix_memalign@plt+0x79>
  405edb:	lea    rcx,[rip+0x7d5e]        # 40dc40 <g_data@@Base+0xb80>
  405ee2:	lea    rsi,[rip+0x745f]        # 40d348 <g_data@@Base+0x288>
  405ee9:	lea    rdi,[rip+0x75a8]        # 40d498 <g_data@@Base+0x3d8>
  405ef0:	mov    edx,0x3b4
  405ef5:	call   403070 <__assert_fail@plt>
  405efa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f00 <flatcc_builder_extend_string@@Base>:
  405f00:	push   rbp
  405f01:	push   rbx
  405f02:	sub    rsp,0x8
  405f06:	mov    rax,QWORD PTR [rdi+0x30]
  405f0a:	cmp    WORD PTR [rax+0xe],0x6
  405f0f:	jne    405f5a <flatcc_builder_extend_string@@Base+0x5a>
  405f11:	mov    edx,esi
  405f13:	add    edx,DWORD PTR [rax+0x14]
  405f16:	jb     405f55 <flatcc_builder_extend_string@@Base+0x55>
  405f18:	mov    DWORD PTR [rax+0x14],edx
  405f1b:	mov    ebp,DWORD PTR [rdi+0x20]
  405f1e:	mov    rbx,rdi
  405f21:	add    esi,ebp
  405f23:	cmp    esi,DWORD PTR [rdi+0x24]
  405f26:	mov    DWORD PTR [rdi+0x20],esi
  405f29:	jae    405f40 <flatcc_builder_extend_string@@Base+0x40>
  405f2b:	mov    rax,rbp
  405f2e:	add    rax,QWORD PTR [rbx+0x18]
  405f32:	add    rsp,0x8
  405f36:	pop    rbx
  405f37:	pop    rbp
  405f38:	ret    
  405f39:	nop    DWORD PTR [rax+0x0]
  405f40:	add    esi,0x1
  405f43:	mov    edx,0xfffffffc
  405f48:	call   4046e0 <test@@Base+0x13c0>
  405f4d:	test   eax,eax
  405f4f:	je     405f2b <flatcc_builder_extend_string@@Base+0x2b>
  405f51:	xor    eax,eax
  405f53:	jmp    405f32 <flatcc_builder_extend_string@@Base+0x32>
  405f55:	call   403169 <posix_memalign@plt+0x79>
  405f5a:	lea    rcx,[rip+0x7caf]        # 40dc10 <g_data@@Base+0xb50>
  405f61:	lea    rsi,[rip+0x73e0]        # 40d348 <g_data@@Base+0x288>
  405f68:	lea    rdi,[rip+0x7561]        # 40d4d0 <g_data@@Base+0x410>
  405f6f:	mov    edx,0x3bd
  405f74:	call   403070 <__assert_fail@plt>
  405f79:	nop    DWORD PTR [rax+0x0]

0000000000405f80 <flatcc_builder_append_string@@Base>:
  405f80:	push   r13
  405f82:	push   r12
  405f84:	push   rbp
  405f85:	push   rbx
  405f86:	sub    rsp,0x8
  405f8a:	mov    rax,QWORD PTR [rdi+0x30]
  405f8e:	cmp    WORD PTR [rax+0xe],0x6
  405f93:	jne    405ffb <flatcc_builder_append_string@@Base+0x7b>
  405f95:	mov    rbp,rdx
  405f98:	add    edx,DWORD PTR [rax+0x14]
  405f9b:	jb     405ff6 <flatcc_builder_append_string@@Base+0x76>
  405f9d:	mov    DWORD PTR [rax+0x14],edx
  405fa0:	mov    r12d,DWORD PTR [rdi+0x20]
  405fa4:	mov    rbx,rdi
  405fa7:	mov    r13,rsi
  405faa:	mov    rdx,r12
  405fad:	add    edx,ebp
  405faf:	cmp    edx,DWORD PTR [rdi+0x24]
  405fb2:	mov    DWORD PTR [rdi+0x20],edx
  405fb5:	jae    405fe0 <flatcc_builder_append_string@@Base+0x60>
  405fb7:	add    r12,QWORD PTR [rbx+0x18]
  405fbb:	je     405fca <flatcc_builder_append_string@@Base+0x4a>
  405fbd:	mov    edx,ebp
  405fbf:	mov    rsi,r13
  405fc2:	mov    rdi,r12
  405fc5:	call   4030b0 <memcpy@plt>
  405fca:	add    rsp,0x8
  405fce:	mov    rax,r12
  405fd1:	pop    rbx
  405fd2:	pop    rbp
  405fd3:	pop    r12
  405fd5:	pop    r13
  405fd7:	ret    
  405fd8:	nop    DWORD PTR [rax+rax*1+0x0]
  405fe0:	lea    esi,[rdx+0x1]
  405fe3:	mov    edx,0xfffffffc
  405fe8:	call   4046e0 <test@@Base+0x13c0>
  405fed:	test   eax,eax
  405fef:	je     405fb7 <flatcc_builder_append_string@@Base+0x37>
  405ff1:	xor    r12d,r12d
  405ff4:	jmp    405fca <flatcc_builder_append_string@@Base+0x4a>
  405ff6:	call   403169 <posix_memalign@plt+0x79>
  405ffb:	lea    rcx,[rip+0x7bee]        # 40dbf0 <g_data@@Base+0xb30>
  406002:	lea    rsi,[rip+0x733f]        # 40d348 <g_data@@Base+0x288>
  406009:	lea    rdi,[rip+0x74c0]        # 40d4d0 <g_data@@Base+0x410>
  406010:	mov    edx,0x3c6
  406015:	call   403070 <__assert_fail@plt>
  40601a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406020 <flatcc_builder_append_string_str@@Base>:
  406020:	push   rbp
  406021:	push   rbx
  406022:	mov    rbp,rdi
  406025:	mov    rdi,rsi
  406028:	mov    rbx,rsi
  40602b:	sub    rsp,0x8
  40602f:	call   403050 <strlen@plt>
  406034:	add    rsp,0x8
  406038:	mov    rsi,rbx
  40603b:	mov    rdi,rbp
  40603e:	pop    rbx
  40603f:	pop    rbp
  406040:	mov    rdx,rax
  406043:	jmp    405f80 <flatcc_builder_append_string@@Base>
  406048:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406050 <flatcc_builder_append_string_strn@@Base>:
  406050:	push   r12
  406052:	push   rbp
  406053:	mov    rbp,rsi
  406056:	push   rbx
  406057:	mov    r12,rdi
  40605a:	xor    esi,esi
  40605c:	mov    rdi,rbp
  40605f:	mov    rbx,rdx
  406062:	call   403090 <memchr@plt>
  406067:	mov    rdx,rax
  40606a:	mov    rsi,rbp
  40606d:	mov    rdi,r12
  406070:	sub    rdx,rbp
  406073:	test   rax,rax
  406076:	cmovne rbx,rdx
  40607a:	mov    rdx,rbx
  40607d:	pop    rbx
  40607e:	pop    rbp
  40607f:	pop    r12
  406081:	jmp    405f80 <flatcc_builder_append_string@@Base>
  406086:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406090 <flatcc_builder_truncate_vector@@Base>:
  406090:	sub    rsp,0x8
  406094:	mov    rax,QWORD PTR [rdi+0x30]
  406098:	cmp    WORD PTR [rax+0xe],0x4
  40609d:	jne    4060d3 <flatcc_builder_truncate_vector@@Base+0x43>
  40609f:	mov    ecx,DWORD PTR [rax+0x14]
  4060a2:	cmp    rcx,rsi
  4060a5:	mov    rdx,rcx
  4060a8:	jb     4060f2 <flatcc_builder_truncate_vector@@Base+0x62>
  4060aa:	sub    edx,esi
  4060ac:	imul   esi,DWORD PTR [rax+0x10]
  4060b0:	mov    DWORD PTR [rax+0x14],edx
  4060b3:	mov    eax,DWORD PTR [rdi+0x20]
  4060b6:	mov    rcx,QWORD PTR [rdi+0x18]
  4060ba:	sub    eax,esi
  4060bc:	mov    edx,esi
  4060be:	xor    esi,esi
  4060c0:	mov    DWORD PTR [rdi+0x20],eax
  4060c3:	lea    rdi,[rcx+rax*1]
  4060c7:	call   403080 <memset@plt>
  4060cc:	xor    eax,eax
  4060ce:	add    rsp,0x8
  4060d2:	ret    
  4060d3:	lea    rcx,[rip+0x7af6]        # 40dbd0 <g_data@@Base+0xb10>
  4060da:	lea    rsi,[rip+0x7267]        # 40d348 <g_data@@Base+0x288>
  4060e1:	lea    rdi,[rip+0x7340]        # 40d428 <g_data@@Base+0x368>
  4060e8:	mov    edx,0x3d9
  4060ed:	call   403070 <__assert_fail@plt>
  4060f2:	lea    rcx,[rip+0x7ad7]        # 40dbd0 <g_data@@Base+0xb10>
  4060f9:	lea    rsi,[rip+0x7248]        # 40d348 <g_data@@Base+0x288>
  406100:	lea    rdi,[rip+0x73f9]        # 40d500 <g_data@@Base+0x440>
  406107:	mov    edx,0x3da
  40610c:	call   403070 <__assert_fail@plt>
  406111:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40611c:	nop    DWORD PTR [rax+0x0]

0000000000406120 <flatcc_builder_truncate_offset_vector@@Base>:
  406120:	sub    rsp,0x8
  406124:	mov    rax,QWORD PTR [rdi+0x30]
  406128:	cmp    WORD PTR [rax+0xe],0x5
  40612d:	jne    40615f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  40612f:	mov    edx,DWORD PTR [rax+0x14]
  406132:	cmp    edx,esi
  406134:	jb     40617e <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  406136:	sub    edx,esi
  406138:	imul   esi,DWORD PTR [rax+0x10]
  40613c:	mov    DWORD PTR [rax+0x14],edx
  40613f:	mov    eax,DWORD PTR [rdi+0x20]
  406142:	mov    rcx,QWORD PTR [rdi+0x18]
  406146:	sub    eax,esi
  406148:	mov    edx,esi
  40614a:	xor    esi,esi
  40614c:	mov    DWORD PTR [rdi+0x20],eax
  40614f:	lea    rdi,[rcx+rax*1]
  406153:	call   403080 <memset@plt>
  406158:	xor    eax,eax
  40615a:	add    rsp,0x8
  40615e:	ret    
  40615f:	lea    rcx,[rip+0x7a3a]        # 40dba0 <g_data@@Base+0xae0>
  406166:	lea    rsi,[rip+0x71db]        # 40d348 <g_data@@Base+0x288>
  40616d:	lea    rdi,[rip+0x7324]        # 40d498 <g_data@@Base+0x3d8>
  406174:	mov    edx,0x3e2
  406179:	call   403070 <__assert_fail@plt>
  40617e:	lea    rcx,[rip+0x7a1b]        # 40dba0 <g_data@@Base+0xae0>
  406185:	lea    rsi,[rip+0x71bc]        # 40d348 <g_data@@Base+0x288>
  40618c:	lea    rdi,[rip+0x7395]        # 40d528 <g_data@@Base+0x468>
  406193:	mov    edx,0x3e3
  406198:	call   403070 <__assert_fail@plt>
  40619d:	nop    DWORD PTR [rax]

00000000004061a0 <flatcc_builder_truncate_string@@Base>:
  4061a0:	sub    rsp,0x8
  4061a4:	mov    rdx,QWORD PTR [rdi+0x30]
  4061a8:	cmp    WORD PTR [rdx+0xe],0x6
  4061ad:	jne    4061e0 <flatcc_builder_truncate_string@@Base+0x40>
  4061af:	mov    ecx,DWORD PTR [rdx+0x14]
  4061b2:	cmp    rcx,rsi
  4061b5:	mov    rax,rcx
  4061b8:	jb     4061ff <flatcc_builder_truncate_string@@Base+0x5f>
  4061ba:	sub    eax,esi
  4061bc:	mov    DWORD PTR [rdx+0x14],eax
  4061bf:	mov    eax,DWORD PTR [rdi+0x20]
  4061c2:	mov    rdx,QWORD PTR [rdi+0x18]
  4061c6:	sub    eax,esi
  4061c8:	mov    DWORD PTR [rdi+0x20],eax
  4061cb:	lea    rdi,[rdx+rax*1]
  4061cf:	mov    rdx,rsi
  4061d2:	xor    esi,esi
  4061d4:	call   403080 <memset@plt>
  4061d9:	xor    eax,eax
  4061db:	add    rsp,0x8
  4061df:	ret    
  4061e0:	lea    rcx,[rip+0x7999]        # 40db80 <g_data@@Base+0xac0>
  4061e7:	lea    rsi,[rip+0x715a]        # 40d348 <g_data@@Base+0x288>
  4061ee:	lea    rdi,[rip+0x72db]        # 40d4d0 <g_data@@Base+0x410>
  4061f5:	mov    edx,0x3eb
  4061fa:	call   403070 <__assert_fail@plt>
  4061ff:	lea    rcx,[rip+0x797a]        # 40db80 <g_data@@Base+0xac0>
  406206:	lea    rsi,[rip+0x713b]        # 40d348 <g_data@@Base+0x288>
  40620d:	lea    rdi,[rip+0x7354]        # 40d568 <g_data@@Base+0x4a8>
  406214:	mov    edx,0x3ec
  406219:	call   403070 <__assert_fail@plt>
  40621e:	xchg   ax,ax

0000000000406220 <flatcc_builder_start_vector@@Base>:
  406220:	push   r12
  406222:	cmp    dx,0x4
  406226:	push   rbp
  406227:	mov    rbp,rsi
  40622a:	mov    esi,0x4
  40622f:	push   rbx
  406230:	cmovb  edx,esi
  406233:	mov    rbx,rdi
  406236:	mov    r12,rcx
  406239:	movzx  esi,dx
  40623c:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  406241:	test   eax,eax
  406243:	jne    406290 <flatcc_builder_start_vector@@Base+0x70>
  406245:	mov    rsi,QWORD PTR [rbx+0x30]
  406249:	mov    edx,0x4
  40624e:	mov    DWORD PTR [rsi+0x10],ebp
  406251:	mov    DWORD PTR [rsi+0x14],0x0
  406258:	mov    DWORD PTR [rsi+0x18],r12d
  40625c:	mov    WORD PTR [rsi+0xe],dx
  406260:	mov    edx,DWORD PTR [rbx+0x28]
  406263:	mov    rcx,rdx
  406266:	add    rdx,QWORD PTR [rbx+0x68]
  40626a:	mov    QWORD PTR [rbx+0x18],rdx
  40626e:	mov    edx,DWORD PTR [rbx+0x70]
  406271:	sub    edx,ecx
  406273:	mov    ecx,0xfffffffc
  406278:	cmp    edx,ecx
  40627a:	cmova  edx,ecx
  40627d:	mov    DWORD PTR [rbx+0x24],edx
  406280:	mov    DWORD PTR [rsi+0x4],ecx
  406283:	pop    rbx
  406284:	pop    rbp
  406285:	pop    r12
  406287:	ret    
  406288:	nop    DWORD PTR [rax+rax*1+0x0]
  406290:	mov    eax,0xffffffff
  406295:	jmp    406283 <flatcc_builder_start_vector@@Base+0x63>
  406297:	nop    WORD PTR [rax+rax*1+0x0]

00000000004062a0 <flatcc_builder_start_offset_vector@@Base>:
  4062a0:	push   rbx
  4062a1:	mov    esi,0x4
  4062a6:	mov    rbx,rdi
  4062a9:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  4062ae:	test   eax,eax
  4062b0:	jne    4062f8 <flatcc_builder_start_offset_vector@@Base+0x58>
  4062b2:	mov    rcx,QWORD PTR [rbx+0x30]
  4062b6:	mov    edx,0x5
  4062bb:	mov    DWORD PTR [rcx+0x10],0x4
  4062c2:	mov    DWORD PTR [rcx+0x14],0x0
  4062c9:	mov    WORD PTR [rcx+0xe],dx
  4062cd:	mov    edx,DWORD PTR [rbx+0x28]
  4062d0:	mov    rsi,rdx
  4062d3:	add    rdx,QWORD PTR [rbx+0x68]
  4062d7:	mov    QWORD PTR [rbx+0x18],rdx
  4062db:	mov    edx,DWORD PTR [rbx+0x70]
  4062de:	sub    edx,esi
  4062e0:	mov    esi,0xfffffffc
  4062e5:	cmp    edx,esi
  4062e7:	cmova  edx,esi
  4062ea:	mov    DWORD PTR [rbx+0x24],edx
  4062ed:	mov    DWORD PTR [rcx+0x4],esi
  4062f0:	pop    rbx
  4062f1:	ret    
  4062f2:	nop    WORD PTR [rax+rax*1+0x0]
  4062f8:	mov    eax,0xffffffff
  4062fd:	pop    rbx
  4062fe:	ret    
  4062ff:	nop

0000000000406300 <flatcc_builder_start_string@@Base>:
  406300:	push   rbx
  406301:	mov    esi,0x1
  406306:	mov    rbx,rdi
  406309:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  40630e:	test   eax,eax
  406310:	jne    406358 <flatcc_builder_start_string@@Base+0x58>
  406312:	mov    rcx,QWORD PTR [rbx+0x30]
  406316:	mov    edx,0x6
  40631b:	mov    DWORD PTR [rcx+0x10],0x1
  406322:	mov    DWORD PTR [rcx+0x14],0x0
  406329:	mov    WORD PTR [rcx+0xe],dx
  40632d:	mov    edx,DWORD PTR [rbx+0x28]
  406330:	mov    rsi,rdx
  406333:	add    rdx,QWORD PTR [rbx+0x68]
  406337:	mov    QWORD PTR [rbx+0x18],rdx
  40633b:	mov    edx,DWORD PTR [rbx+0x70]
  40633e:	sub    edx,esi
  406340:	mov    esi,0xfffffffc
  406345:	cmp    edx,esi
  406347:	cmova  edx,esi
  40634a:	mov    DWORD PTR [rbx+0x24],edx
  40634d:	mov    DWORD PTR [rcx+0x4],esi
  406350:	pop    rbx
  406351:	ret    
  406352:	nop    WORD PTR [rax+rax*1+0x0]
  406358:	mov    eax,0xffffffff
  40635d:	pop    rbx
  40635e:	ret    
  40635f:	nop

0000000000406360 <flatcc_builder_reserve_table@@Base>:
  406360:	test   esi,esi
  406362:	push   r12
  406364:	push   rbp
  406365:	push   rbx
  406366:	js     40641f <flatcc_builder_reserve_table@@Base+0xbf>
  40636c:	mov    rax,QWORD PTR [rdi+0x30]
  406370:	lea    r12d,[rsi+rsi*1+0x4]
  406375:	mov    rbx,rdi
  406378:	movzx  edx,WORD PTR [rax+0x1c]
  40637c:	mov    eax,DWORD PTR [rax+0x10]
  40637f:	lea    ebp,[rax+rdx*2]
  406382:	mov    edx,r12d
  406385:	add    rdx,rbp
  406388:	cmp    rdx,QWORD PTR [rdi+0x60]
  40638c:	ja     4063d0 <flatcc_builder_reserve_table@@Base+0x70>
  40638e:	add    rbp,QWORD PTR [rbx+0x58]
  406392:	je     406410 <flatcc_builder_reserve_table@@Base+0xb0>
  406394:	mov    rax,QWORD PTR [rbx+0x30]
  406398:	add    rbp,0x4
  40639c:	lea    edx,[r12-0x3]
  4063a1:	mov    QWORD PTR [rbx+0x8],rbp
  4063a5:	mov    ebp,DWORD PTR [rax+0x14]
  4063a8:	add    rdx,rbp
  4063ab:	cmp    rdx,QWORD PTR [rbx+0x90]
  4063b2:	ja     4063f0 <flatcc_builder_reserve_table@@Base+0x90>
  4063b4:	add    rbp,QWORD PTR [rbx+0x88]
  4063bb:	xor    eax,eax
  4063bd:	test   rbp,rbp
  4063c0:	mov    QWORD PTR [rbx],rbp
  4063c3:	sete   al
  4063c6:	neg    eax
  4063c8:	pop    rbx
  4063c9:	pop    rbp
  4063ca:	pop    r12
  4063cc:	ret    
  4063cd:	nop    DWORD PTR [rax]
  4063d0:	lea    rsi,[rdi+0x58]
  4063d4:	xor    r8d,r8d
  4063d7:	mov    rdi,QWORD PTR [rdi+0x40]
  4063db:	mov    ecx,0x1
  4063e0:	call   QWORD PTR [rbx+0x50]
  4063e3:	test   eax,eax
  4063e5:	je     40638e <flatcc_builder_reserve_table@@Base+0x2e>
  4063e7:	call   403100 <posix_memalign@plt+0x10>
  4063ec:	nop    DWORD PTR [rax+0x0]
  4063f0:	xor    ecx,ecx
  4063f2:	lea    rsi,[rbx+0x88]
  4063f9:	mov    rdi,QWORD PTR [rbx+0x40]
  4063fd:	mov    r8d,0x3
  406403:	call   QWORD PTR [rbx+0x50]
  406406:	test   eax,eax
  406408:	je     4063b4 <flatcc_builder_reserve_table@@Base+0x54>
  40640a:	jmp    4063e7 <flatcc_builder_reserve_table@@Base+0x87>
  40640c:	nop    DWORD PTR [rax+0x0]
  406410:	mov    QWORD PTR [rbx+0x8],0x0
  406418:	mov    eax,0xffffffff
  40641d:	jmp    4063c8 <flatcc_builder_reserve_table@@Base+0x68>
  40641f:	lea    rcx,[rip+0x773a]        # 40db60 <g_data@@Base+0xaa0>
  406426:	lea    rsi,[rip+0x6f1b]        # 40d348 <g_data@@Base+0x288>
  40642d:	lea    rdi,[rip+0x7307]        # 40d73b <g_data@@Base+0x67b>
  406434:	mov    edx,0x429
  406439:	call   403070 <__assert_fail@plt>
  40643e:	xchg   ax,ax

0000000000406440 <flatcc_builder_start_table@@Base>:
  406440:	push   r13
  406442:	push   r12
  406444:	mov    r12d,esi
  406447:	push   rbp
  406448:	push   rbx
  406449:	mov    esi,0x4
  40644e:	mov    rbx,rdi
  406451:	sub    rsp,0x8
  406455:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  40645a:	test   eax,eax
  40645c:	jne    406590 <flatcc_builder_start_table@@Base+0x150>
  406462:	mov    rcx,QWORD PTR [rbx+0x8]
  406466:	mov    ebp,eax
  406468:	mov    rax,QWORD PTR [rbx+0x58]
  40646c:	mov    rdx,QWORD PTR [rbx+0x30]
  406470:	xor    edi,edi
  406472:	mov    r8d,0x3
  406478:	sub    rcx,rax
  40647b:	mov    DWORD PTR [rdx+0x10],ecx
  40647e:	mov    rsi,QWORD PTR [rbx]
  406481:	sub    rsi,QWORD PTR [rbx+0x88]
  406488:	mov    DWORD PTR [rdx+0x14],esi
  40648b:	mov    esi,DWORD PTR [rbx+0x14]
  40648e:	mov    DWORD PTR [rdx+0x18],esi
  406491:	movzx  esi,WORD PTR [rbx+0x10]
  406495:	mov    WORD PTR [rdx+0x1c],si
  406499:	lea    r13d,[rcx+rsi*2]
  40649d:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4064a4:	mov    WORD PTR [rbx+0x10],di
  4064a8:	mov    WORD PTR [rdx+0xe],r8w
  4064ad:	lea    edx,[r12+r12*1+0x4]
  4064b2:	add    rdx,r13
  4064b5:	cmp    rdx,QWORD PTR [rbx+0x60]
  4064b9:	ja     406538 <flatcc_builder_start_table@@Base+0xf8>
  4064bb:	add    rax,r13
  4064be:	je     406588 <flatcc_builder_start_table@@Base+0x148>
  4064c4:	add    rax,0x4
  4064c8:	lea    edx,[r12+r12*1+0x1]
  4064cd:	mov    QWORD PTR [rbx+0x8],rax
  4064d1:	mov    rax,QWORD PTR [rbx+0x30]
  4064d5:	mov    r13d,DWORD PTR [rax+0x14]
  4064d9:	add    rdx,r13
  4064dc:	cmp    rdx,QWORD PTR [rbx+0x90]
  4064e3:	ja     406560 <flatcc_builder_start_table@@Base+0x120>
  4064e5:	add    r13,QWORD PTR [rbx+0x88]
  4064ec:	test   r13,r13
  4064ef:	mov    QWORD PTR [rbx],r13
  4064f2:	je     406590 <flatcc_builder_start_table@@Base+0x150>
  4064f8:	mov    eax,DWORD PTR [rbx+0x28]
  4064fb:	mov    rdx,rax
  4064fe:	add    rax,QWORD PTR [rbx+0x68]
  406502:	mov    QWORD PTR [rbx+0x18],rax
  406506:	mov    eax,DWORD PTR [rbx+0x70]
  406509:	sub    eax,edx
  40650b:	mov    edx,0xfffc
  406510:	cmp    eax,0xfffc
  406515:	cmova  eax,edx
  406518:	mov    DWORD PTR [rbx+0x24],eax
  40651b:	mov    rax,QWORD PTR [rbx+0x30]
  40651f:	mov    DWORD PTR [rax+0x4],0xfffc
  406526:	add    rsp,0x8
  40652a:	mov    eax,ebp
  40652c:	pop    rbx
  40652d:	pop    rbp
  40652e:	pop    r12
  406530:	pop    r13
  406532:	ret    
  406533:	nop    DWORD PTR [rax+rax*1+0x0]
  406538:	xor    r8d,r8d
  40653b:	lea    rsi,[rbx+0x58]
  40653f:	mov    rdi,QWORD PTR [rbx+0x40]
  406543:	mov    ecx,0x1
  406548:	call   QWORD PTR [rbx+0x50]
  40654b:	test   eax,eax
  40654d:	jne    40657e <flatcc_builder_start_table@@Base+0x13e>
  40654f:	mov    rax,QWORD PTR [rbx+0x58]
  406553:	jmp    4064bb <flatcc_builder_start_table@@Base+0x7b>
  406558:	nop    DWORD PTR [rax+rax*1+0x0]
  406560:	xor    ecx,ecx
  406562:	lea    rsi,[rbx+0x88]
  406569:	mov    rdi,QWORD PTR [rbx+0x40]
  40656d:	mov    r8d,0x3
  406573:	call   QWORD PTR [rbx+0x50]
  406576:	test   eax,eax
  406578:	je     4064e5 <flatcc_builder_start_table@@Base+0xa5>
  40657e:	call   403100 <posix_memalign@plt+0x10>
  406583:	nop    DWORD PTR [rax+rax*1+0x0]
  406588:	mov    QWORD PTR [rbx+0x8],0x0
  406590:	add    rsp,0x8
  406594:	mov    ebp,0xffffffff
  406599:	pop    rbx
  40659a:	mov    eax,ebp
  40659c:	pop    rbp
  40659d:	pop    r12
  40659f:	pop    r13
  4065a1:	ret    
  4065a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4065ad:	nop    DWORD PTR [rax]

00000000004065b0 <flatcc_builder_create_vtable@@Base>:
  4065b0:	push   rbp
  4065b1:	push   rbx
  4065b2:	mov    rbp,rdi
  4065b5:	sub    rsp,0xa8
  4065bc:	mov    rax,QWORD PTR fs:0x28
  4065c5:	mov    QWORD PTR [rsp+0x98],rax
  4065cd:	xor    eax,eax
  4065cf:	test   dx,dx
  4065d2:	mov    QWORD PTR [rsp],0x0
  4065da:	mov    DWORD PTR [rsp+0x8],0x0
  4065e2:	je     406670 <flatcc_builder_create_vtable@@Base+0xc0>
  4065e8:	mov    QWORD PTR [rsp+0x10],rsi
  4065ed:	mov    esi,DWORD PTR [rdi+0x100]
  4065f3:	movzx  r8d,dx
  4065f7:	mov    QWORD PTR [rsp],r8
  4065fb:	mov    QWORD PTR [rsp+0x18],r8
  406600:	movzx  edx,dx
  406603:	mov    DWORD PTR [rsp+0x8],0x1
  40660b:	test   esi,esi
  40660d:	je     4066a8 <flatcc_builder_create_vtable@@Base+0xf8>
  406613:	mov    eax,DWORD PTR [rbp+0xf0]
  406619:	mov    ebx,eax
  40661b:	sub    ebx,edx
  40661d:	cmp    eax,ebx
  40661f:	jle    406684 <flatcc_builder_create_vtable@@Base+0xd4>
  406621:	lea    rsi,[rsp+0x10]
  406626:	mov    rdi,QWORD PTR [rbp+0x38]
  40662a:	mov    ecx,ebx
  40662c:	mov    edx,DWORD PTR [rsp+0x8]
  406630:	call   QWORD PTR [rbp+0x48]
  406633:	test   eax,eax
  406635:	jne    406700 <flatcc_builder_create_vtable@@Base+0x150>
  40663b:	cmp    ebx,0x1
  40663e:	mov    DWORD PTR [rbp+0xf0],ebx
  406644:	sbb    ebx,0xffffffff
  406647:	mov    rcx,QWORD PTR [rsp+0x98]
  40664f:	xor    rcx,QWORD PTR fs:0x28
  406658:	mov    eax,ebx
  40665a:	jne    4066fb <flatcc_builder_create_vtable@@Base+0x14b>
  406660:	add    rsp,0xa8
  406667:	pop    rbx
  406668:	pop    rbp
  406669:	ret    
  40666a:	nop    WORD PTR [rax+rax*1+0x0]
  406670:	mov    edx,DWORD PTR [rdi+0x100]
  406676:	test   edx,edx
  406678:	jne    406684 <flatcc_builder_create_vtable@@Base+0xd4>
  40667a:	mov    eax,DWORD PTR [rdi+0x124]
  406680:	test   eax,eax
  406682:	je     4066f0 <flatcc_builder_create_vtable@@Base+0x140>
  406684:	lea    rcx,[rip+0x7705]        # 40dd90 <g_data@@Base+0xcd0>
  40668b:	lea    rsi,[rip+0x6cb6]        # 40d348 <g_data@@Base+0x288>
  406692:	lea    rdi,[rip+0x7046]        # 40d6df <g_data@@Base+0x61f>
  406699:	mov    edx,0x287
  40669e:	call   403070 <__assert_fail@plt>
  4066a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4066a8:	mov    ecx,DWORD PTR [rdi+0x124]
  4066ae:	test   ecx,ecx
  4066b0:	jne    406613 <flatcc_builder_create_vtable@@Base+0x63>
  4066b6:	mov    ebx,DWORD PTR [rdi+0xf4]
  4066bc:	add    edx,ebx
  4066be:	cmp    ebx,edx
  4066c0:	mov    DWORD PTR [rdi+0xf4],edx
  4066c6:	jg     406724 <flatcc_builder_create_vtable@@Base+0x174>
  4066c8:	lea    rsi,[rsp+0x10]
  4066cd:	mov    rdi,QWORD PTR [rbp+0x38]
  4066d1:	mov    ecx,ebx
  4066d3:	mov    edx,DWORD PTR [rsp+0x8]
  4066d7:	call   QWORD PTR [rbp+0x48]
  4066da:	test   eax,eax
  4066dc:	jne    406705 <flatcc_builder_create_vtable@@Base+0x155>
  4066de:	add    ebx,0x1
  4066e1:	jmp    406647 <flatcc_builder_create_vtable@@Base+0x97>
  4066e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4066f0:	mov    ebx,DWORD PTR [rbp+0xf4]
  4066f6:	xor    r8d,r8d
  4066f9:	jmp    4066c8 <flatcc_builder_create_vtable@@Base+0x118>
  4066fb:	call   403060 <__stack_chk_fail@plt>
  406700:	call   403146 <posix_memalign@plt+0x56>
  406705:	lea    rcx,[rip+0x7694]        # 40dda0 <g_data@@Base+0xce0>
  40670c:	lea    rsi,[rip+0x6c35]        # 40d348 <g_data@@Base+0x288>
  406713:	lea    rdi,[rip+0x6fc5]        # 40d6df <g_data@@Base+0x61f>
  40671a:	mov    edx,0x2a5
  40671f:	call   403070 <__assert_fail@plt>
  406724:	call   403123 <posix_memalign@plt+0x33>
  406729:	nop    DWORD PTR [rax+0x0]

0000000000406730 <flatcc_builder_create_cached_vtable@@Base>:
  406730:	push   r15
  406732:	push   r14
  406734:	mov    r15,rdi
  406737:	push   r13
  406739:	push   r12
  40673b:	movzx  r14d,dx
  40673f:	push   rbp
  406740:	push   rbx
  406741:	mov    ebp,ecx
  406743:	sub    rsp,0x38
  406747:	mov    rbx,QWORD PTR [rdi+0xd8]
  40674e:	mov    QWORD PTR [rsp+0x10],rsi
  406753:	mov    DWORD PTR [rsp+0x2c],edx
  406757:	test   rbx,rbx
  40675a:	je     4068e8 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  406760:	mov    eax,0x20
  406765:	sub    eax,ebx
  406767:	shrx   ebp,ebp,eax
  40676c:	mov    rax,QWORD PTR [r15+0xa8]
  406773:	lea    r12,[rax+rbp*4]
  406777:	test   r12,r12
  40677a:	je     4068d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  406780:	mov    ebp,DWORD PTR [r12]
  406784:	test   ebp,ebp
  406786:	je     4069f0 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  40678c:	movzx  eax,r14w
  406790:	mov    r11,QWORD PTR [r15+0xb8]
  406797:	mov    r8,QWORD PTR [r15+0x78]
  40679b:	mov    r13,r12
  40679e:	mov    QWORD PTR [rsp+0x20],0x0
  4067a7:	mov    QWORD PTR [rsp+0x18],rax
  4067ac:	jmp    4067bb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  4067ae:	xchg   ax,ax
  4067b0:	mov    ebp,DWORD PTR [rbx+0xc]
  4067b3:	lea    r13,[rbx+0xc]
  4067b7:	test   ebp,ebp
  4067b9:	je     406818 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  4067bb:	mov    ebx,ebp
  4067bd:	add    rbx,r11
  4067c0:	mov    esi,DWORD PTR [rbx+0x8]
  4067c3:	add    rsi,r8
  4067c6:	cmp    WORD PTR [rsi],r14w
  4067ca:	jne    4067b0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4067cc:	mov    rdx,QWORD PTR [rsp+0x18]
  4067d1:	mov    rdi,QWORD PTR [rsp+0x10]
  4067d6:	mov    QWORD PTR [rsp+0x8],r8
  4067db:	mov    QWORD PTR [rsp],r11
  4067df:	call   4030a0 <memcmp@plt>
  4067e4:	test   eax,eax
  4067e6:	mov    r11,QWORD PTR [rsp]
  4067ea:	mov    r8,QWORD PTR [rsp+0x8]
  4067ef:	jne    4067b0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4067f1:	mov    eax,DWORD PTR [r15+0x100]
  4067f8:	cmp    DWORD PTR [rbx+0x4],eax
  4067fb:	je     4068a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  406801:	mov    ebp,DWORD PTR [rbx+0xc]
  406804:	lea    r13,[rbx+0xc]
  406808:	mov    QWORD PTR [rsp+0x20],rbx
  40680d:	test   ebp,ebp
  40680f:	jne    4067bb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  406811:	nop    DWORD PTR [rax+0x0]
  406818:	mov    ebx,DWORD PTR [r15+0xe4]
  40681f:	lea    rdx,[rbx+0x10]
  406823:	cmp    rdx,QWORD PTR [r15+0xc0]
  40682a:	ja     4069c8 <flatcc_builder_create_cached_vtable@@Base+0x298>
  406830:	add    rbx,QWORD PTR [r15+0xb8]
  406837:	je     4068d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  40683d:	mov    eax,DWORD PTR [r15+0xe4]
  406844:	movzx  ebp,WORD PTR [rsp+0x2c]
  406849:	mov    rdi,r15
  40684c:	mov    rsi,QWORD PTR [rsp+0x10]
  406851:	lea    edx,[rax+0x10]
  406854:	mov    DWORD PTR [r15+0xe4],edx
  40685b:	mov    edx,DWORD PTR [r15+0x100]
  406862:	mov    DWORD PTR [rbx+0x4],edx
  406865:	mov    edx,DWORD PTR [r12]
  406869:	mov    DWORD PTR [rbx+0xc],edx
  40686c:	mov    DWORD PTR [r12],eax
  406870:	mov    edx,ebp
  406872:	call   4065b0 <flatcc_builder_create_vtable@@Base>
  406877:	test   eax,eax
  406879:	mov    DWORD PTR [rbx],eax
  40687b:	je     4068d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  40687d:	mov    rdi,QWORD PTR [rsp+0x20]
  406882:	test   rdi,rdi
  406885:	je     4069fe <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  40688b:	mov    edx,DWORD PTR [rdi+0x8]
  40688e:	mov    DWORD PTR [rbx+0x8],edx
  406891:	add    rsp,0x38
  406895:	pop    rbx
  406896:	pop    rbp
  406897:	pop    r12
  406899:	pop    r13
  40689b:	pop    r14
  40689d:	pop    r15
  40689f:	ret    
  4068a0:	cmp    r12,r13
  4068a3:	je     4068b7 <flatcc_builder_create_cached_vtable@@Base+0x187>
  4068a5:	mov    eax,DWORD PTR [rbx+0xc]
  4068a8:	mov    DWORD PTR [r13+0x0],eax
  4068ac:	mov    eax,DWORD PTR [r12]
  4068b0:	mov    DWORD PTR [rbx+0xc],eax
  4068b3:	mov    DWORD PTR [r12],ebp
  4068b7:	mov    eax,DWORD PTR [rbx]
  4068b9:	add    rsp,0x38
  4068bd:	pop    rbx
  4068be:	pop    rbp
  4068bf:	pop    r12
  4068c1:	pop    r13
  4068c3:	pop    r14
  4068c5:	pop    r15
  4068c7:	ret    
  4068c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4068d0:	add    rsp,0x38
  4068d4:	xor    eax,eax
  4068d6:	pop    rbx
  4068d7:	pop    rbp
  4068d8:	pop    r12
  4068da:	pop    r13
  4068dc:	pop    r14
  4068de:	pop    r15
  4068e0:	ret    
  4068e1:	nop    DWORD PTR [rax+0x0]
  4068e8:	mov    eax,DWORD PTR [rdi+0xe4]
  4068ee:	lea    r12,[rdi+0xa8]
  4068f5:	test   eax,eax
  4068f7:	jne    406a8f <flatcc_builder_create_cached_vtable@@Base+0x35f>
  4068fd:	cmp    QWORD PTR [rdi+0xc0],0xf
  406905:	jbe    406998 <flatcc_builder_create_cached_vtable@@Base+0x268>
  40690b:	cmp    QWORD PTR [r15+0xb8],0x0
  406913:	je     4068d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  406915:	mov    DWORD PTR [r15+0xe4],0x10
  406920:	mov    rdi,QWORD PTR [r15+0x40]
  406924:	mov    r8d,0x5
  40692a:	mov    ecx,0x1
  40692f:	mov    edx,0x100
  406934:	mov    rsi,r12
  406937:	call   QWORD PTR [r15+0x50]
  40693b:	test   eax,eax
  40693d:	jne    4068d0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  40693f:	mov    rcx,QWORD PTR [r15+0xb0]
  406946:	mov    eax,0x100
  40694b:	jmp    406953 <flatcc_builder_create_cached_vtable@@Base+0x223>
  40694d:	nop    DWORD PTR [rax]
  406950:	mov    rax,rdx
  406953:	lea    rdx,[rax+rax*1]
  406957:	cmp    rdx,rcx
  40695a:	jbe    406950 <flatcc_builder_create_cached_vtable@@Base+0x220>
  40695c:	shr    rax,0x2
  406960:	cmp    rax,0x1
  406964:	jbe    406a58 <flatcc_builder_create_cached_vtable@@Base+0x328>
  40696a:	mov    esi,0x1
  40696f:	nop
  406970:	add    rbx,0x1
  406974:	shlx   rdx,rsi,rbx
  406979:	cmp    rax,rdx
  40697c:	ja     406970 <flatcc_builder_create_cached_vtable@@Base+0x240>
  40697e:	mov    eax,0x20
  406983:	sub    eax,ebx
  406985:	mov    QWORD PTR [r15+0xd8],rbx
  40698c:	jmp    406767 <flatcc_builder_create_cached_vtable@@Base+0x37>
  406991:	nop    DWORD PTR [rax+0x0]
  406998:	lea    rsi,[rdi+0xb8]
  40699f:	xor    ecx,ecx
  4069a1:	mov    rdi,QWORD PTR [rdi+0x40]
  4069a5:	mov    r8d,0x6
  4069ab:	mov    edx,0x10
  4069b0:	call   QWORD PTR [r15+0x50]
  4069b4:	test   eax,eax
  4069b6:	je     40690b <flatcc_builder_create_cached_vtable@@Base+0x1db>
  4069bc:	jmp    406a7a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  4069c1:	nop    DWORD PTR [rax+0x0]
  4069c8:	xor    ecx,ecx
  4069ca:	lea    rsi,[r15+0xb8]
  4069d1:	mov    rdi,QWORD PTR [r15+0x40]
  4069d5:	mov    r8d,0x6
  4069db:	call   QWORD PTR [r15+0x50]
  4069df:	test   eax,eax
  4069e1:	je     406830 <flatcc_builder_create_cached_vtable@@Base+0x100>
  4069e7:	jmp    406a7a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  4069ec:	nop    DWORD PTR [rax+0x0]
  4069f0:	mov    QWORD PTR [rsp+0x20],0x0
  4069f9:	jmp    406818 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  4069fe:	mov    rax,QWORD PTR [r15+0x118]
  406a05:	mov    r12d,DWORD PTR [r15+0xe0]
  406a0c:	test   rax,rax
  406a0f:	je     406a1b <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  406a11:	lea    edx,[rbp+r12*1+0x0]
  406a16:	cmp    rax,rdx
  406a19:	jb     406a80 <flatcc_builder_create_cached_vtable@@Base+0x350>
  406a1b:	lea    rdx,[r14+r12*1]
  406a1f:	cmp    rdx,QWORD PTR [r15+0x80]
  406a26:	ja     406a62 <flatcc_builder_create_cached_vtable@@Base+0x332>
  406a28:	mov    rdi,r12
  406a2b:	add    rdi,QWORD PTR [r15+0x78]
  406a2f:	je     406aae <flatcc_builder_create_cached_vtable@@Base+0x37e>
  406a31:	mov    eax,DWORD PTR [r15+0xe0]
  406a38:	mov    rsi,QWORD PTR [rsp+0x10]
  406a3d:	mov    rdx,r14
  406a40:	add    ebp,eax
  406a42:	mov    DWORD PTR [rbx+0x8],eax
  406a45:	mov    DWORD PTR [r15+0xe0],ebp
  406a4c:	call   4030b0 <memcpy@plt>
  406a51:	mov    eax,DWORD PTR [rbx]
  406a53:	jmp    406891 <flatcc_builder_create_cached_vtable@@Base+0x161>
  406a58:	mov    eax,0x20
  406a5d:	jmp    406985 <flatcc_builder_create_cached_vtable@@Base+0x255>
  406a62:	xor    ecx,ecx
  406a64:	lea    rsi,[r15+0x78]
  406a68:	mov    rdi,QWORD PTR [r15+0x40]
  406a6c:	mov    r8d,0x2
  406a72:	call   QWORD PTR [r15+0x50]
  406a76:	test   eax,eax
  406a78:	je     406a28 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  406a7a:	call   403100 <posix_memalign@plt+0x10>
  406a7f:	nop
  406a80:	mov    rdi,r15
  406a83:	call   404d00 <flatcc_builder_flush_vtable_cache@@Base>
  406a88:	mov    eax,DWORD PTR [rbx]
  406a8a:	jmp    4068b9 <flatcc_builder_create_cached_vtable@@Base+0x189>
  406a8f:	lea    rcx,[rip+0x70ba]        # 40db50 <g_data@@Base+0xa90>
  406a96:	lea    rsi,[rip+0x68ab]        # 40d348 <g_data@@Base+0x288>
  406a9d:	lea    rdi,[rip+0x6c81]        # 40d725 <g_data@@Base+0x665>
  406aa4:	mov    edx,0x156
  406aa9:	call   403070 <__assert_fail@plt>
  406aae:	mov    eax,0xffffffff
  406ab3:	jmp    406891 <flatcc_builder_create_cached_vtable@@Base+0x161>
  406ab8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406ac0 <flatcc_builder_create_table@@Base>:
  406ac0:	push   rbp
  406ac1:	push   rbx
  406ac2:	sub    rsp,0xb8
  406ac9:	mov    rax,QWORD PTR fs:0x28
  406ad2:	mov    QWORD PTR [rsp+0xa8],rax
  406ada:	xor    eax,eax
  406adc:	test   r9d,r9d
  406adf:	mov    r11d,DWORD PTR [rsp+0xd0]
  406ae7:	js     406c8d <flatcc_builder_create_table@@Base+0x1cd>
  406aed:	test   r11b,0x1
  406af1:	je     406c6e <flatcc_builder_create_table@@Base+0x1ae>
  406af7:	cmp    cx,0x4
  406afb:	mov    eax,0x4
  406b00:	mov    rbx,rdi
  406b03:	cmovb  ecx,eax
  406b06:	cmp    WORD PTR [rdi+0xe8],cx
  406b0d:	movzx  eax,cx
  406b10:	jae    406b19 <flatcc_builder_create_table@@Base+0x59>
  406b12:	mov    WORD PTR [rdi+0xe8],cx
  406b19:	mov    ecx,DWORD PTR [rbx+0xf0]
  406b1f:	sub    eax,0x1
  406b22:	mov    edi,0xfffffffc
  406b27:	sub    r11d,0x1
  406b2b:	mov    r10d,ecx
  406b2e:	sub    r10d,edx
  406b31:	and    r10d,eax
  406b34:	mov    eax,edi
  406b36:	sub    eax,edx
  406b38:	add    eax,ecx
  406b3a:	sub    eax,r10d
  406b3d:	mov    ebp,eax
  406b3f:	sub    ebp,r11d
  406b42:	test   r9d,r9d
  406b45:	mov    DWORD PTR [rsp+0xc],ebp
  406b49:	je     406b7d <flatcc_builder_create_table@@Base+0xbd>
  406b4b:	lea    ecx,[r9-0x1]
  406b4f:	sub    edi,eax
  406b51:	lea    r9,[r8+rcx*2+0x2]
  406b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b60:	movzx  ecx,WORD PTR [r8]
  406b64:	mov    r11d,edi
  406b67:	add    r8,0x2
  406b6b:	sub    r11d,ecx
  406b6e:	add    DWORD PTR [rsi+rcx*1],r11d
  406b72:	cmp    r9,r8
  406b75:	jne    406b60 <flatcc_builder_create_table@@Base+0xa0>
  406b77:	mov    ecx,DWORD PTR [rbx+0xf0]
  406b7d:	lea    rax,[rsp+0xc]
  406b82:	test   rdx,rdx
  406b85:	mov    QWORD PTR [rsp+0x10],0x4
  406b8e:	mov    QWORD PTR [rsp+0x28],0x4
  406b97:	mov    DWORD PTR [rsp+0x18],0x1
  406b9f:	mov    r8d,0x4
  406ba5:	mov    QWORD PTR [rsp+0x20],rax
  406baa:	je     406bc7 <flatcc_builder_create_table@@Base+0x107>
  406bac:	lea    r8,[rdx+0x4]
  406bb0:	mov    QWORD PTR [rsp+0x30],rsi
  406bb5:	mov    QWORD PTR [rsp+0x38],rdx
  406bba:	mov    DWORD PTR [rsp+0x18],0x2
  406bc2:	mov    QWORD PTR [rsp+0x10],r8
  406bc7:	test   r10d,r10d
  406bca:	je     406bf8 <flatcc_builder_create_table@@Base+0x138>
  406bcc:	movsxd rdx,DWORD PTR [rsp+0x18]
  406bd1:	mov    rsi,0x40de40
  406bd8:	add    r8,r10
  406bdb:	mov    QWORD PTR [rsp+0x10],r8
  406be0:	mov    rax,rdx
  406be3:	shl    rdx,0x4
  406be7:	add    eax,0x1
  406bea:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  406bef:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  406bf4:	mov    DWORD PTR [rsp+0x18],eax
  406bf8:	mov    ebp,ecx
  406bfa:	movabs rax,0x10000000f
  406c04:	sub    ebp,r8d
  406c07:	cmp    r8,rax
  406c0a:	ja     406c4f <flatcc_builder_create_table@@Base+0x18f>
  406c0c:	cmp    ebp,ecx
  406c0e:	jge    406c4f <flatcc_builder_create_table@@Base+0x18f>
  406c10:	lea    rsi,[rsp+0x20]
  406c15:	mov    rdi,QWORD PTR [rbx+0x38]
  406c19:	mov    ecx,ebp
  406c1b:	mov    edx,DWORD PTR [rsp+0x18]
  406c1f:	call   QWORD PTR [rbx+0x48]
  406c22:	test   eax,eax
  406c24:	jne    406cb1 <flatcc_builder_create_table@@Base+0x1f1>
  406c2a:	mov    DWORD PTR [rbx+0xf0],ebp
  406c30:	mov    eax,ebp
  406c32:	mov    rbx,QWORD PTR [rsp+0xa8]
  406c3a:	xor    rbx,QWORD PTR fs:0x28
  406c43:	jne    406cac <flatcc_builder_create_table@@Base+0x1ec>
  406c45:	add    rsp,0xb8
  406c4c:	pop    rbx
  406c4d:	pop    rbp
  406c4e:	ret    
  406c4f:	lea    rcx,[rip+0x713a]        # 40dd90 <g_data@@Base+0xcd0>
  406c56:	lea    rsi,[rip+0x66eb]        # 40d348 <g_data@@Base+0x288>
  406c5d:	lea    rdi,[rip+0x6a7b]        # 40d6df <g_data@@Base+0x61f>
  406c64:	mov    edx,0x287
  406c69:	call   403070 <__assert_fail@plt>
  406c6e:	lea    rcx,[rip+0x6ebb]        # 40db30 <g_data@@Base+0xa70>
  406c75:	lea    rsi,[rip+0x66cc]        # 40d348 <g_data@@Base+0x288>
  406c7c:	lea    rdi,[rip+0x6ac3]        # 40d746 <g_data@@Base+0x686>
  406c83:	mov    edx,0x4db
  406c88:	call   403070 <__assert_fail@plt>
  406c8d:	lea    rcx,[rip+0x6e9c]        # 40db30 <g_data@@Base+0xa70>
  406c94:	lea    rsi,[rip+0x66ad]        # 40d348 <g_data@@Base+0x288>
  406c9b:	lea    rdi,[rip+0x6a92]        # 40d734 <g_data@@Base+0x674>
  406ca2:	mov    edx,0x4d5
  406ca7:	call   403070 <__assert_fail@plt>
  406cac:	call   403060 <__stack_chk_fail@plt>
  406cb1:	call   403146 <posix_memalign@plt+0x56>
  406cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406cc0 <flatcc_builder_check_required_field@@Base>:
  406cc0:	mov    rax,QWORD PTR [rdi+0x30]
  406cc4:	cmp    WORD PTR [rax+0xe],0x3
  406cc9:	jne    406ce6 <flatcc_builder_check_required_field@@Base+0x26>
  406ccb:	xor    eax,eax
  406ccd:	cmp    WORD PTR [rdi+0x10],si
  406cd1:	jbe    406ce2 <flatcc_builder_check_required_field@@Base+0x22>
  406cd3:	mov    rax,QWORD PTR [rdi+0x8]
  406cd7:	movzx  edx,si
  406cda:	cmp    WORD PTR [rax+rdx*2],0x0
  406cdf:	setne  al
  406ce2:	movzx  eax,al
  406ce5:	ret    
  406ce6:	lea    rcx,[rip+0x6e13]        # 40db00 <g_data@@Base+0xa40>
  406ced:	lea    rsi,[rip+0x6654]        # 40d348 <g_data@@Base+0x288>
  406cf4:	lea    rdi,[rip+0x6895]        # 40d590 <g_data@@Base+0x4d0>
  406cfb:	sub    rsp,0x8
  406cff:	mov    edx,0x4f8
  406d04:	call   403070 <__assert_fail@plt>
  406d09:	nop    DWORD PTR [rax+0x0]

0000000000406d10 <flatcc_builder_check_union_field@@Base>:
  406d10:	mov    rax,QWORD PTR [rdi+0x30]
  406d14:	cmp    WORD PTR [rax+0xe],0x3
  406d19:	jne    406d5b <flatcc_builder_check_union_field@@Base+0x4b>
  406d1b:	xor    eax,eax
  406d1d:	test   si,si
  406d20:	je     406d4d <flatcc_builder_check_union_field@@Base+0x3d>
  406d22:	cmp    si,WORD PTR [rdi+0x10]
  406d26:	jae    406d4d <flatcc_builder_check_union_field@@Base+0x3d>
  406d28:	mov    rcx,QWORD PTR [rdi+0x8]
  406d2c:	movzx  edx,si
  406d2f:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406d34:	test   ax,ax
  406d37:	je     406d43 <flatcc_builder_check_union_field@@Base+0x33>
  406d39:	mov    rsi,QWORD PTR [rdi+0x18]
  406d3d:	cmp    BYTE PTR [rsi+rax*1],0x0
  406d41:	jne    406d50 <flatcc_builder_check_union_field@@Base+0x40>
  406d43:	xor    eax,eax
  406d45:	cmp    WORD PTR [rcx+rdx*2],0x0
  406d4a:	sete   al
  406d4d:	repz ret 
  406d4f:	nop
  406d50:	xor    eax,eax
  406d52:	cmp    WORD PTR [rcx+rdx*2],0x0
  406d57:	setne  al
  406d5a:	ret    
  406d5b:	lea    rcx,[rip+0x6d5e]        # 40dac0 <g_data@@Base+0xa00>
  406d62:	lea    rsi,[rip+0x65df]        # 40d348 <g_data@@Base+0x288>
  406d69:	lea    rdi,[rip+0x6820]        # 40d590 <g_data@@Base+0x4d0>
  406d70:	sub    rsp,0x8
  406d74:	mov    edx,0x4ff
  406d79:	call   403070 <__assert_fail@plt>
  406d7e:	xchg   ax,ax

0000000000406d80 <flatcc_builder_check_required@@Base>:
  406d80:	mov    rax,QWORD PTR [rdi+0x30]
  406d84:	cmp    WORD PTR [rax+0xe],0x3
  406d89:	jne    406ddb <flatcc_builder_check_required@@Base+0x5b>
  406d8b:	movzx  ecx,WORD PTR [rdi+0x10]
  406d8f:	xor    eax,eax
  406d91:	cmp    ecx,edx
  406d93:	jl     406dd0 <flatcc_builder_check_required@@Base+0x50>
  406d95:	test   edx,edx
  406d97:	jle    406dcb <flatcc_builder_check_required@@Base+0x4b>
  406d99:	mov    rcx,QWORD PTR [rdi+0x8]
  406d9d:	movzx  edi,WORD PTR [rsi]
  406da0:	cmp    WORD PTR [rcx+rdi*2],0x0
  406da5:	je     406dd0 <flatcc_builder_check_required@@Base+0x50>
  406da7:	sub    edx,0x1
  406daa:	lea    rax,[rsi+0x2]
  406dae:	lea    rsi,[rsi+rdx*2+0x2]
  406db3:	jmp    406dc6 <flatcc_builder_check_required@@Base+0x46>
  406db5:	nop    DWORD PTR [rax]
  406db8:	movzx  edx,WORD PTR [rax]
  406dbb:	add    rax,0x2
  406dbf:	cmp    WORD PTR [rcx+rdx*2],0x0
  406dc4:	je     406dd8 <flatcc_builder_check_required@@Base+0x58>
  406dc6:	cmp    rax,rsi
  406dc9:	jne    406db8 <flatcc_builder_check_required@@Base+0x38>
  406dcb:	mov    eax,0x1
  406dd0:	repz ret 
  406dd2:	nop    WORD PTR [rax+rax*1+0x0]
  406dd8:	xor    eax,eax
  406dda:	ret    
  406ddb:	lea    rcx,[rip+0x6cae]        # 40da90 <g_data@@Base+0x9d0>
  406de2:	lea    rsi,[rip+0x655f]        # 40d348 <g_data@@Base+0x288>
  406de9:	lea    rdi,[rip+0x67a0]        # 40d590 <g_data@@Base+0x4d0>
  406df0:	sub    rsp,0x8
  406df4:	mov    edx,0x511
  406df9:	call   403070 <__assert_fail@plt>
  406dfe:	xchg   ax,ax

0000000000406e00 <flatcc_builder_end_table@@Base>:
  406e00:	push   r13
  406e02:	push   r12
  406e04:	push   rbp
  406e05:	push   rbx
  406e06:	sub    rsp,0x8
  406e0a:	mov    rax,QWORD PTR [rdi+0x30]
  406e0e:	cmp    WORD PTR [rax+0xe],0x3
  406e13:	jne    406f6e <flatcc_builder_end_table@@Base+0x16e>
  406e19:	movzx  ebp,WORD PTR [rdi+0x10]
  406e1d:	movzx  eax,WORD PTR [rdi+0x20]
  406e21:	mov    rbx,rdi
  406e24:	mov    rcx,QWORD PTR [rdi+0x8]
  406e28:	add    ebp,0x2
  406e2b:	add    eax,0x4
  406e2e:	lea    r12,[rcx-0x4]
  406e32:	add    ebp,ebp
  406e34:	mov    WORD PTR [rcx-0x2],ax
  406e38:	movzx  eax,ax
  406e3b:	mov    WORD PTR [rcx-0x4],bp
  406e3f:	mov    ecx,DWORD PTR [rdi+0x14]
  406e42:	movzx  edx,bp
  406e45:	mov    rsi,r12
  406e48:	xor    ecx,edx
  406e4a:	imul   ecx,ecx,0x9e3779b1
  406e50:	xor    ecx,eax
  406e52:	imul   ecx,ecx,0x9e3779b1
  406e58:	mov    DWORD PTR [rdi+0x14],ecx
  406e5b:	call   406730 <flatcc_builder_create_cached_vtable@@Base>
  406e60:	test   eax,eax
  406e62:	mov    r13d,eax
  406e65:	jne    406e80 <flatcc_builder_end_table@@Base+0x80>
  406e67:	add    rsp,0x8
  406e6b:	xor    ebp,ebp
  406e6d:	pop    rbx
  406e6e:	mov    eax,ebp
  406e70:	pop    rbp
  406e71:	pop    r12
  406e73:	pop    r13
  406e75:	ret    
  406e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e80:	movzx  edx,bp
  406e83:	xor    esi,esi
  406e85:	mov    rdi,r12
  406e88:	call   403080 <memset@plt>
  406e8d:	mov    rax,QWORD PTR [rbx+0x30]
  406e91:	mov    r9,QWORD PTR [rbx]
  406e94:	sub    rsp,0x8
  406e98:	mov    edx,DWORD PTR [rbx+0x20]
  406e9b:	movzx  ecx,WORD PTR [rbx+0xea]
  406ea2:	mov    rdi,rbx
  406ea5:	mov    rsi,QWORD PTR [rbx+0x18]
  406ea9:	mov    r8d,DWORD PTR [rax+0x14]
  406ead:	add    r8,QWORD PTR [rbx+0x88]
  406eb4:	push   r13
  406eb6:	sub    r9,r8
  406eb9:	shr    r9,1
  406ebc:	call   406ac0 <flatcc_builder_create_table@@Base>
  406ec1:	mov    ebp,eax
  406ec3:	test   ebp,ebp
  406ec5:	pop    rax
  406ec6:	pop    rdx
  406ec7:	je     406e67 <flatcc_builder_end_table@@Base+0x67>
  406ec9:	mov    rax,QWORD PTR [rbx+0x30]
  406ecd:	mov    rdi,QWORD PTR [rbx+0x18]
  406ed1:	xor    esi,esi
  406ed3:	mov    edx,DWORD PTR [rax+0x18]
  406ed6:	mov    DWORD PTR [rbx+0x14],edx
  406ed9:	movzx  edx,WORD PTR [rax+0x1c]
  406edd:	mov    WORD PTR [rbx+0x10],dx
  406ee1:	mov    edx,DWORD PTR [rax+0x10]
  406ee4:	add    rdx,QWORD PTR [rbx+0x58]
  406ee8:	mov    QWORD PTR [rbx+0x8],rdx
  406eec:	mov    eax,DWORD PTR [rax+0x14]
  406eef:	add    rax,QWORD PTR [rbx+0x88]
  406ef6:	mov    edx,DWORD PTR [rbx+0x20]
  406ef9:	mov    QWORD PTR [rbx],rax
  406efc:	call   403080 <memset@plt>
  406f01:	mov    rax,QWORD PTR [rbx+0x30]
  406f05:	mov    edi,DWORD PTR [rbx+0x70]
  406f08:	mov    esi,DWORD PTR [rax]
  406f0a:	mov    edx,DWORD PTR [rax+0x8]
  406f0d:	mov    ecx,DWORD PTR [rax+0x4]
  406f10:	mov    DWORD PTR [rbx+0x20],edx
  406f13:	mov    rdx,rsi
  406f16:	mov    DWORD PTR [rbx+0x28],esi
  406f19:	add    rsi,QWORD PTR [rbx+0x68]
  406f1d:	sub    edi,edx
  406f1f:	cmp    ecx,edi
  406f21:	mov    edx,edi
  406f23:	cmovb  edx,ecx
  406f26:	mov    DWORD PTR [rbx+0x24],edx
  406f29:	movzx  edx,WORD PTR [rbx+0xea]
  406f30:	cmp    dx,WORD PTR [rbx+0xe8]
  406f37:	mov    QWORD PTR [rbx+0x18],rsi
  406f3b:	mov    DWORD PTR [rax+0x4],ecx
  406f3e:	jbe    406f47 <flatcc_builder_end_table@@Base+0x147>
  406f40:	mov    WORD PTR [rbx+0xe8],dx
  406f47:	movzx  edx,WORD PTR [rax+0xc]
  406f4b:	sub    rax,0x24
  406f4f:	sub    DWORD PTR [rbx+0x104],0x1
  406f56:	mov    QWORD PTR [rbx+0x30],rax
  406f5a:	mov    eax,ebp
  406f5c:	mov    WORD PTR [rbx+0xea],dx
  406f63:	add    rsp,0x8
  406f67:	pop    rbx
  406f68:	pop    rbp
  406f69:	pop    r12
  406f6b:	pop    r13
  406f6d:	ret    
  406f6e:	lea    rcx,[rip+0x6afb]        # 40da70 <g_data@@Base+0x9b0>
  406f75:	lea    rsi,[rip+0x63cc]        # 40d348 <g_data@@Base+0x288>
  406f7c:	lea    rdi,[rip+0x660d]        # 40d590 <g_data@@Base+0x4d0>
  406f83:	mov    edx,0x525
  406f88:	call   403070 <__assert_fail@plt>
  406f8d:	nop    DWORD PTR [rax]

0000000000406f90 <flatcc_builder_create_vector@@Base>:
  406f90:	push   rbp
  406f91:	push   rbx
  406f92:	sub    rsp,0xb8
  406f99:	mov    rax,QWORD PTR fs:0x28
  406fa2:	mov    QWORD PTR [rsp+0xa8],rax
  406faa:	xor    eax,eax
  406fac:	cmp    rdx,r9
  406faf:	ja     4070f4 <flatcc_builder_create_vector@@Base+0x164>
  406fb5:	mov    rbx,rdi
  406fb8:	cmp    r8w,0x4
  406fbd:	mov    eax,0x4
  406fc2:	cmovb  r8d,eax
  406fc6:	cmp    r8w,WORD PTR [rbx+0xe8]
  406fce:	movzx  edi,r8w
  406fd2:	jbe    406fdc <flatcc_builder_create_vector@@Base+0x4c>
  406fd4:	mov    WORD PTR [rbx+0xe8],r8w
  406fdc:	imul   ecx,edx
  406fdf:	mov    DWORD PTR [rsp+0xc],edx
  406fe3:	mov    edx,DWORD PTR [rbx+0xf0]
  406fe9:	sub    edi,0x1
  406fec:	mov    QWORD PTR [rsp+0x10],0x4
  406ff5:	mov    QWORD PTR [rsp+0x28],0x4
  406ffe:	mov    DWORD PTR [rsp+0x18],0x1
  407006:	mov    r8d,0x4
  40700c:	mov    eax,edx
  40700e:	sub    eax,ecx
  407010:	and    eax,edi
  407012:	lea    rdi,[rsp+0xc]
  407017:	test   ecx,ecx
  407019:	mov    QWORD PTR [rsp+0x20],rdi
  40701e:	jne    4070b0 <flatcc_builder_create_vector@@Base+0x120>
  407024:	test   eax,eax
  407026:	je     407054 <flatcc_builder_create_vector@@Base+0xc4>
  407028:	movsxd rsi,DWORD PTR [rsp+0x18]
  40702d:	mov    rdi,0x40de40
  407034:	add    r8,rax
  407037:	mov    QWORD PTR [rsp+0x10],r8
  40703c:	mov    rcx,rsi
  40703f:	shl    rsi,0x4
  407043:	add    ecx,0x1
  407046:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  40704b:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  407050:	mov    DWORD PTR [rsp+0x18],ecx
  407054:	mov    ebp,edx
  407056:	movabs rax,0x10000000f
  407060:	sub    ebp,r8d
  407063:	cmp    r8,rax
  407066:	ja     4070d0 <flatcc_builder_create_vector@@Base+0x140>
  407068:	cmp    edx,ebp
  40706a:	jle    4070d0 <flatcc_builder_create_vector@@Base+0x140>
  40706c:	lea    rsi,[rsp+0x20]
  407071:	mov    rdi,QWORD PTR [rbx+0x38]
  407075:	mov    ecx,ebp
  407077:	mov    edx,DWORD PTR [rsp+0x18]
  40707b:	call   QWORD PTR [rbx+0x48]
  40707e:	test   eax,eax
  407080:	jne    4070ef <flatcc_builder_create_vector@@Base+0x15f>
  407082:	mov    DWORD PTR [rbx+0xf0],ebp
  407088:	mov    eax,ebp
  40708a:	mov    rbx,QWORD PTR [rsp+0xa8]
  407092:	xor    rbx,QWORD PTR fs:0x28
  40709b:	jne    407113 <flatcc_builder_create_vector@@Base+0x183>
  40709d:	add    rsp,0xb8
  4070a4:	pop    rbx
  4070a5:	pop    rbp
  4070a6:	ret    
  4070a7:	nop    WORD PTR [rax+rax*1+0x0]
  4070b0:	lea    r8,[rcx+0x4]
  4070b4:	mov    QWORD PTR [rsp+0x30],rsi
  4070b9:	mov    QWORD PTR [rsp+0x38],rcx
  4070be:	mov    DWORD PTR [rsp+0x18],0x2
  4070c6:	mov    QWORD PTR [rsp+0x10],r8
  4070cb:	jmp    407024 <flatcc_builder_create_vector@@Base+0x94>
  4070d0:	lea    rcx,[rip+0x6cb9]        # 40dd90 <g_data@@Base+0xcd0>
  4070d7:	lea    rsi,[rip+0x626a]        # 40d348 <g_data@@Base+0x288>
  4070de:	lea    rdi,[rip+0x65fa]        # 40d6df <g_data@@Base+0x61f>
  4070e5:	mov    edx,0x287
  4070ea:	call   403070 <__assert_fail@plt>
  4070ef:	call   403146 <posix_memalign@plt+0x56>
  4070f4:	lea    rcx,[rip+0x6955]        # 40da50 <g_data@@Base+0x990>
  4070fb:	lea    rsi,[rip+0x6246]        # 40d348 <g_data@@Base+0x288>
  407102:	lea    rdi,[rip+0x6648]        # 40d751 <g_data@@Base+0x691>
  407109:	mov    edx,0x555
  40710e:	call   403070 <__assert_fail@plt>
  407113:	call   403060 <__stack_chk_fail@plt>
  407118:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407120 <flatcc_builder_end_vector@@Base>:
  407120:	push   rbp
  407121:	push   rbx
  407122:	sub    rsp,0x8
  407126:	mov    rax,QWORD PTR [rdi+0x30]
  40712a:	cmp    WORD PTR [rax+0xe],0x4
  40712f:	jne    4071df <flatcc_builder_end_vector@@Base+0xbf>
  407135:	mov    ecx,DWORD PTR [rax+0x10]
  407138:	mov    edx,DWORD PTR [rax+0x14]
  40713b:	mov    rbx,rdi
  40713e:	mov    r9d,DWORD PTR [rax+0x18]
  407142:	movzx  r8d,WORD PTR [rdi+0xea]
  40714a:	mov    rsi,QWORD PTR [rdi+0x18]
  40714e:	call   406f90 <flatcc_builder_create_vector@@Base>
  407153:	test   eax,eax
  407155:	mov    ebp,eax
  407157:	jne    407168 <flatcc_builder_end_vector@@Base+0x48>
  407159:	add    rsp,0x8
  40715d:	mov    eax,ebp
  40715f:	pop    rbx
  407160:	pop    rbp
  407161:	ret    
  407162:	nop    WORD PTR [rax+rax*1+0x0]
  407168:	mov    edx,DWORD PTR [rbx+0x20]
  40716b:	mov    rdi,QWORD PTR [rbx+0x18]
  40716f:	xor    esi,esi
  407171:	call   403080 <memset@plt>
  407176:	mov    rax,QWORD PTR [rbx+0x30]
  40717a:	mov    edi,DWORD PTR [rbx+0x70]
  40717d:	mov    esi,DWORD PTR [rax]
  40717f:	mov    edx,DWORD PTR [rax+0x8]
  407182:	mov    ecx,DWORD PTR [rax+0x4]
  407185:	mov    DWORD PTR [rbx+0x20],edx
  407188:	mov    rdx,rsi
  40718b:	mov    DWORD PTR [rbx+0x28],esi
  40718e:	add    rsi,QWORD PTR [rbx+0x68]
  407192:	sub    edi,edx
  407194:	cmp    ecx,edi
  407196:	mov    edx,edi
  407198:	cmovb  edx,ecx
  40719b:	mov    DWORD PTR [rbx+0x24],edx
  40719e:	movzx  edx,WORD PTR [rbx+0xea]
  4071a5:	cmp    dx,WORD PTR [rbx+0xe8]
  4071ac:	mov    QWORD PTR [rbx+0x18],rsi
  4071b0:	mov    DWORD PTR [rax+0x4],ecx
  4071b3:	jbe    4071bc <flatcc_builder_end_vector@@Base+0x9c>
  4071b5:	mov    WORD PTR [rbx+0xe8],dx
  4071bc:	movzx  edx,WORD PTR [rax+0xc]
  4071c0:	sub    rax,0x24
  4071c4:	sub    DWORD PTR [rbx+0x104],0x1
  4071cb:	mov    QWORD PTR [rbx+0x30],rax
  4071cf:	mov    eax,ebp
  4071d1:	mov    WORD PTR [rbx+0xea],dx
  4071d8:	add    rsp,0x8
  4071dc:	pop    rbx
  4071dd:	pop    rbp
  4071de:	ret    
  4071df:	lea    rcx,[rip+0x684a]        # 40da30 <g_data@@Base+0x970>
  4071e6:	lea    rsi,[rip+0x615b]        # 40d348 <g_data@@Base+0x288>
  4071ed:	lea    rdi,[rip+0x6234]        # 40d428 <g_data@@Base+0x368>
  4071f4:	mov    edx,0x578
  4071f9:	call   403070 <__assert_fail@plt>
  4071fe:	xchg   ax,ax

0000000000407200 <flatcc_builder_vector_count@@Base>:
  407200:	mov    rax,QWORD PTR [rdi+0x30]
  407204:	mov    eax,DWORD PTR [rax+0x14]
  407207:	ret    
  407208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407210 <flatcc_builder_vector_edit@@Base>:
  407210:	mov    rax,QWORD PTR [rdi+0x18]
  407214:	ret    
  407215:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407220 <flatcc_builder_create_offset_vector_direct@@Base>:
  407220:	xor    ecx,ecx
  407222:	jmp    404ad0 <flatcc_builder_default_alloc@@Base+0x390>
  407227:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407230 <flatcc_builder_end_offset_vector@@Base>:
  407230:	push   rbp
  407231:	push   rbx
  407232:	sub    rsp,0x8
  407236:	mov    rax,QWORD PTR [rdi+0x30]
  40723a:	cmp    WORD PTR [rax+0xe],0x5
  40723f:	jne    4072df <flatcc_builder_end_offset_vector@@Base+0xaf>
  407245:	mov    edx,DWORD PTR [rax+0x14]
  407248:	mov    rsi,QWORD PTR [rdi+0x18]
  40724c:	mov    rbx,rdi
  40724f:	call   407220 <flatcc_builder_create_offset_vector_direct@@Base>
  407254:	test   eax,eax
  407256:	mov    ebp,eax
  407258:	jne    407268 <flatcc_builder_end_offset_vector@@Base+0x38>
  40725a:	add    rsp,0x8
  40725e:	mov    eax,ebp
  407260:	pop    rbx
  407261:	pop    rbp
  407262:	ret    
  407263:	nop    DWORD PTR [rax+rax*1+0x0]
  407268:	mov    edx,DWORD PTR [rbx+0x20]
  40726b:	mov    rdi,QWORD PTR [rbx+0x18]
  40726f:	xor    esi,esi
  407271:	call   403080 <memset@plt>
  407276:	mov    rax,QWORD PTR [rbx+0x30]
  40727a:	mov    edi,DWORD PTR [rbx+0x70]
  40727d:	mov    esi,DWORD PTR [rax]
  40727f:	mov    edx,DWORD PTR [rax+0x8]
  407282:	mov    ecx,DWORD PTR [rax+0x4]
  407285:	mov    DWORD PTR [rbx+0x20],edx
  407288:	mov    rdx,rsi
  40728b:	mov    DWORD PTR [rbx+0x28],esi
  40728e:	add    rsi,QWORD PTR [rbx+0x68]
  407292:	sub    edi,edx
  407294:	cmp    ecx,edi
  407296:	mov    edx,edi
  407298:	cmovb  edx,ecx
  40729b:	mov    DWORD PTR [rbx+0x24],edx
  40729e:	movzx  edx,WORD PTR [rbx+0xea]
  4072a5:	cmp    dx,WORD PTR [rbx+0xe8]
  4072ac:	mov    QWORD PTR [rbx+0x18],rsi
  4072b0:	mov    DWORD PTR [rax+0x4],ecx
  4072b3:	jbe    4072bc <flatcc_builder_end_offset_vector@@Base+0x8c>
  4072b5:	mov    WORD PTR [rbx+0xe8],dx
  4072bc:	movzx  edx,WORD PTR [rax+0xc]
  4072c0:	sub    rax,0x24
  4072c4:	sub    DWORD PTR [rbx+0x104],0x1
  4072cb:	mov    QWORD PTR [rbx+0x30],rax
  4072cf:	mov    eax,ebp
  4072d1:	mov    WORD PTR [rbx+0xea],dx
  4072d8:	add    rsp,0x8
  4072dc:	pop    rbx
  4072dd:	pop    rbp
  4072de:	ret    
  4072df:	lea    rcx,[rip+0x66fa]        # 40d9e0 <g_data@@Base+0x920>
  4072e6:	lea    rsi,[rip+0x605b]        # 40d348 <g_data@@Base+0x288>
  4072ed:	lea    rdi,[rip+0x61a4]        # 40d498 <g_data@@Base+0x3d8>
  4072f4:	mov    edx,0x5c8
  4072f9:	call   403070 <__assert_fail@plt>
  4072fe:	xchg   ax,ax

0000000000407300 <flatcc_builder_create_offset_vector@@Base>:
  407300:	push   r12
  407302:	push   rbp
  407303:	mov    r12,rsi
  407306:	push   rbx
  407307:	mov    rbp,rdx
  40730a:	mov    rbx,rdi
  40730d:	call   4062a0 <flatcc_builder_start_offset_vector@@Base>
  407312:	test   eax,eax
  407314:	je     407320 <flatcc_builder_create_offset_vector@@Base+0x20>
  407316:	pop    rbx
  407317:	xor    eax,eax
  407319:	pop    rbp
  40731a:	pop    r12
  40731c:	ret    
  40731d:	nop    DWORD PTR [rax]
  407320:	mov    rsi,rbp
  407323:	mov    rdi,rbx
  407326:	call   405d60 <flatcc_builder_extend_offset_vector@@Base>
  40732b:	test   rax,rax
  40732e:	je     407316 <flatcc_builder_create_offset_vector@@Base+0x16>
  407330:	lea    rdx,[rbp*4+0x0]
  407338:	mov    rsi,r12
  40733b:	mov    rdi,rax
  40733e:	call   4030b0 <memcpy@plt>
  407343:	mov    rdi,rbx
  407346:	pop    rbx
  407347:	pop    rbp
  407348:	pop    r12
  40734a:	jmp    407230 <flatcc_builder_end_offset_vector@@Base>
  40734f:	nop

0000000000407350 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  407350:	push   rbp
  407351:	push   rbx
  407352:	sub    rsp,0x8
  407356:	mov    rax,QWORD PTR [rdi+0x30]
  40735a:	cmp    WORD PTR [rax+0xe],0x5
  40735f:	jne    407407 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  407365:	mov    edx,DWORD PTR [rax+0x14]
  407368:	mov    rcx,rsi
  40736b:	mov    rsi,QWORD PTR [rdi+0x18]
  40736f:	mov    rbx,rdi
  407372:	call   404ad0 <flatcc_builder_default_alloc@@Base+0x390>
  407377:	test   eax,eax
  407379:	mov    ebp,eax
  40737b:	jne    407390 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  40737d:	add    rsp,0x8
  407381:	mov    eax,ebp
  407383:	pop    rbx
  407384:	pop    rbp
  407385:	ret    
  407386:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407390:	mov    edx,DWORD PTR [rbx+0x20]
  407393:	mov    rdi,QWORD PTR [rbx+0x18]
  407397:	xor    esi,esi
  407399:	call   403080 <memset@plt>
  40739e:	mov    rax,QWORD PTR [rbx+0x30]
  4073a2:	mov    edi,DWORD PTR [rbx+0x70]
  4073a5:	mov    esi,DWORD PTR [rax]
  4073a7:	mov    edx,DWORD PTR [rax+0x8]
  4073aa:	mov    ecx,DWORD PTR [rax+0x4]
  4073ad:	mov    DWORD PTR [rbx+0x20],edx
  4073b0:	mov    rdx,rsi
  4073b3:	mov    DWORD PTR [rbx+0x28],esi
  4073b6:	add    rsi,QWORD PTR [rbx+0x68]
  4073ba:	sub    edi,edx
  4073bc:	cmp    ecx,edi
  4073be:	mov    edx,edi
  4073c0:	cmovb  edx,ecx
  4073c3:	mov    DWORD PTR [rbx+0x24],edx
  4073c6:	movzx  edx,WORD PTR [rbx+0xea]
  4073cd:	cmp    dx,WORD PTR [rbx+0xe8]
  4073d4:	mov    QWORD PTR [rbx+0x18],rsi
  4073d8:	mov    DWORD PTR [rax+0x4],ecx
  4073db:	jbe    4073e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  4073dd:	mov    WORD PTR [rbx+0xe8],dx
  4073e4:	movzx  edx,WORD PTR [rax+0xc]
  4073e8:	sub    rax,0x24
  4073ec:	sub    DWORD PTR [rbx+0x104],0x1
  4073f3:	mov    QWORD PTR [rbx+0x30],rax
  4073f7:	mov    eax,ebp
  4073f9:	mov    WORD PTR [rbx+0xea],dx
  407400:	add    rsp,0x8
  407404:	pop    rbx
  407405:	pop    rbp
  407406:	ret    
  407407:	lea    rcx,[rip+0x6592]        # 40d9a0 <g_data@@Base+0x8e0>
  40740e:	lea    rsi,[rip+0x5f33]        # 40d348 <g_data@@Base+0x288>
  407415:	lea    rdi,[rip+0x607c]        # 40d498 <g_data@@Base+0x3d8>
  40741c:	mov    edx,0x5d5
  407421:	call   403070 <__assert_fail@plt>
  407426:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407430 <flatcc_builder_offset_vector_edit@@Base>:
  407430:	mov    rax,QWORD PTR [rdi+0x18]
  407434:	ret    
  407435:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407440 <flatcc_builder_offset_vector_count@@Base>:
  407440:	mov    rax,QWORD PTR [rdi+0x30]
  407444:	mov    eax,DWORD PTR [rax+0x14]
  407447:	ret    
  407448:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407450 <flatcc_builder_create_union_vector_direct@@Base>:
  407450:	push   r13
  407452:	push   r12
  407454:	mov    r13,rcx
  407457:	push   rbp
  407458:	push   rbx
  407459:	mov    r12,rsi
  40745c:	mov    rcx,r12
  40745f:	mov    rsi,rdx
  407462:	mov    rdx,r13
  407465:	sub    rsp,0x8
  407469:	mov    rbp,rdi
  40746c:	call   404ad0 <flatcc_builder_default_alloc@@Base+0x390>
  407471:	test   eax,eax
  407473:	jne    407488 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  407475:	add    rsp,0x8
  407479:	xor    eax,eax
  40747b:	pop    rbx
  40747c:	pop    rbp
  40747d:	pop    r12
  40747f:	pop    r13
  407481:	ret    
  407482:	nop    WORD PTR [rax+rax*1+0x0]
  407488:	mov    ebx,eax
  40748a:	mov    rdx,r13
  40748d:	mov    ecx,0x1
  407492:	mov    rsi,r12
  407495:	mov    rdi,rbp
  407498:	mov    r9d,0xffffffff
  40749e:	mov    r8d,0x1
  4074a4:	call   406f90 <flatcc_builder_create_vector@@Base>
  4074a9:	mov    rcx,rbx
  4074ac:	mov    edx,eax
  4074ae:	shl    rcx,0x20
  4074b2:	mov    rbx,rcx
  4074b5:	or     rbx,rdx
  4074b8:	test   eax,eax
  4074ba:	mov    rax,rcx
  4074bd:	cmovne rax,rbx
  4074c1:	add    rsp,0x8
  4074c5:	pop    rbx
  4074c6:	pop    rbp
  4074c7:	pop    r12
  4074c9:	pop    r13
  4074cb:	ret    
  4074cc:	nop    DWORD PTR [rax+0x0]

00000000004074d0 <flatcc_builder_create_union_vector@@Base>:
  4074d0:	push   r13
  4074d2:	push   r12
  4074d4:	mov    r12,rdx
  4074d7:	push   rbp
  4074d8:	push   rbx
  4074d9:	mov    rbp,rsi
  4074dc:	mov    rbx,rdi
  4074df:	sub    rsp,0x8
  4074e3:	call   4062a0 <flatcc_builder_start_offset_vector@@Base>
  4074e8:	test   eax,eax
  4074ea:	je     407500 <flatcc_builder_create_union_vector@@Base+0x30>
  4074ec:	add    rsp,0x8
  4074f0:	xor    eax,eax
  4074f2:	pop    rbx
  4074f3:	pop    rbp
  4074f4:	pop    r12
  4074f6:	pop    r13
  4074f8:	ret    
  4074f9:	nop    DWORD PTR [rax+0x0]
  407500:	mov    rsi,r12
  407503:	mov    rdi,rbx
  407506:	call   405d60 <flatcc_builder_extend_offset_vector@@Base>
  40750b:	test   rax,rax
  40750e:	je     4074ec <flatcc_builder_create_union_vector@@Base+0x1c>
  407510:	mov    r13d,DWORD PTR [rbx+0x20]
  407514:	mov    rax,r13
  407517:	add    eax,r12d
  40751a:	cmp    eax,DWORD PTR [rbx+0x24]
  40751d:	mov    DWORD PTR [rbx+0x20],eax
  407520:	jae    407600 <flatcc_builder_create_union_vector@@Base+0x130>
  407526:	add    r13,QWORD PTR [rbx+0x18]
  40752a:	je     4074ec <flatcc_builder_create_union_vector@@Base+0x1c>
  40752c:	mov    rdi,rbx
  40752f:	call   407430 <flatcc_builder_offset_vector_edit@@Base>
  407534:	xor    edi,edi
  407536:	test   r12,r12
  407539:	je     40755d <flatcc_builder_create_union_vector@@Base+0x8d>
  40753b:	nop    DWORD PTR [rax+rax*1+0x0]
  407540:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  407546:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  40754b:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  407550:	mov    DWORD PTR [rax+rdi*4],r8d
  407554:	add    rdi,0x1
  407558:	cmp    r12,rdi
  40755b:	jne    407540 <flatcc_builder_create_union_vector@@Base+0x70>
  40755d:	mov    rcx,r12
  407560:	mov    rdx,rax
  407563:	mov    rsi,r13
  407566:	mov    rdi,rbx
  407569:	call   407450 <flatcc_builder_create_union_vector_direct@@Base>
  40756e:	mov    edx,DWORD PTR [rbx+0x20]
  407571:	mov    rdi,QWORD PTR [rbx+0x18]
  407575:	xor    esi,esi
  407577:	mov    r12,rax
  40757a:	mov    rbp,rax
  40757d:	sar    r12,0x20
  407581:	call   403080 <memset@plt>
  407586:	mov    rax,QWORD PTR [rbx+0x30]
  40758a:	mov    esi,DWORD PTR [rax]
  40758c:	mov    edx,DWORD PTR [rax+0x8]
  40758f:	mov    ecx,DWORD PTR [rax+0x4]
  407592:	mov    DWORD PTR [rbx+0x20],edx
  407595:	mov    DWORD PTR [rbx+0x28],esi
  407598:	mov    rdx,rsi
  40759b:	add    rsi,QWORD PTR [rbx+0x68]
  40759f:	mov    QWORD PTR [rbx+0x18],rsi
  4075a3:	mov    esi,DWORD PTR [rbx+0x70]
  4075a6:	sub    esi,edx
  4075a8:	cmp    ecx,esi
  4075aa:	mov    edx,esi
  4075ac:	cmovb  edx,ecx
  4075af:	mov    DWORD PTR [rbx+0x24],edx
  4075b2:	movzx  edx,WORD PTR [rbx+0xea]
  4075b9:	cmp    dx,WORD PTR [rbx+0xe8]
  4075c0:	mov    DWORD PTR [rax+0x4],ecx
  4075c3:	jbe    4075cc <flatcc_builder_create_union_vector@@Base+0xfc>
  4075c5:	mov    WORD PTR [rbx+0xe8],dx
  4075cc:	movzx  edx,WORD PTR [rax+0xc]
  4075d0:	sub    rax,0x24
  4075d4:	sub    DWORD PTR [rbx+0x104],0x1
  4075db:	mov    QWORD PTR [rbx+0x30],rax
  4075df:	shl    r12,0x20
  4075e3:	mov    eax,ebp
  4075e5:	or     rax,r12
  4075e8:	mov    WORD PTR [rbx+0xea],dx
  4075ef:	add    rsp,0x8
  4075f3:	pop    rbx
  4075f4:	pop    rbp
  4075f5:	pop    r12
  4075f7:	pop    r13
  4075f9:	ret    
  4075fa:	nop    WORD PTR [rax+rax*1+0x0]
  407600:	lea    esi,[rax+0x1]
  407603:	mov    edx,0xfffffffc
  407608:	mov    rdi,rbx
  40760b:	call   4046e0 <test@@Base+0x13c0>
  407610:	test   eax,eax
  407612:	je     407526 <flatcc_builder_create_union_vector@@Base+0x56>
  407618:	jmp    4074ec <flatcc_builder_create_union_vector@@Base+0x1c>
  40761d:	nop    DWORD PTR [rax]

0000000000407620 <flatcc_builder_start_union_vector@@Base>:
  407620:	push   rbx
  407621:	mov    esi,0x4
  407626:	mov    rbx,rdi
  407629:	call   4049a0 <flatcc_builder_default_alloc@@Base+0x260>
  40762e:	test   eax,eax
  407630:	jne    407678 <flatcc_builder_start_union_vector@@Base+0x58>
  407632:	mov    rcx,QWORD PTR [rbx+0x30]
  407636:	mov    edx,0x7
  40763b:	mov    DWORD PTR [rcx+0x10],0x8
  407642:	mov    DWORD PTR [rcx+0x14],0x0
  407649:	mov    WORD PTR [rcx+0xe],dx
  40764d:	mov    edx,DWORD PTR [rbx+0x28]
  407650:	mov    rsi,rdx
  407653:	add    rdx,QWORD PTR [rbx+0x68]
  407657:	mov    QWORD PTR [rbx+0x18],rdx
  40765b:	mov    edx,DWORD PTR [rbx+0x70]
  40765e:	sub    edx,esi
  407660:	mov    esi,0xfffffffc
  407665:	cmp    edx,esi
  407667:	cmova  edx,esi
  40766a:	mov    DWORD PTR [rbx+0x24],edx
  40766d:	mov    DWORD PTR [rcx+0x4],esi
  407670:	pop    rbx
  407671:	ret    
  407672:	nop    WORD PTR [rax+rax*1+0x0]
  407678:	mov    eax,0xffffffff
  40767d:	pop    rbx
  40767e:	ret    
  40767f:	nop

0000000000407680 <flatcc_builder_union_vector_edit@@Base>:
  407680:	mov    rax,QWORD PTR [rdi+0x18]
  407684:	ret    
  407685:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407690 <flatcc_builder_union_vector_count@@Base>:
  407690:	mov    rax,QWORD PTR [rdi+0x30]
  407694:	mov    eax,DWORD PTR [rax+0x14]
  407697:	ret    
  407698:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004076a0 <flatcc_builder_end_union_vector@@Base>:
  4076a0:	push   r13
  4076a2:	push   r12
  4076a4:	push   rbp
  4076a5:	push   rbx
  4076a6:	sub    rsp,0x8
  4076aa:	mov    rax,QWORD PTR [rdi+0x30]
  4076ae:	cmp    WORD PTR [rax+0xe],0x7
  4076b3:	jne    4077e5 <flatcc_builder_end_union_vector@@Base+0x145>
  4076b9:	mov    rbx,rdi
  4076bc:	call   407690 <flatcc_builder_union_vector_count@@Base>
  4076c1:	mov    ebp,DWORD PTR [rbx+0x20]
  4076c4:	mov    r12,rax
  4076c7:	lea    eax,[rax+rax*4]
  4076ca:	add    eax,ebp
  4076cc:	cmp    eax,DWORD PTR [rbx+0x24]
  4076cf:	mov    DWORD PTR [rbx+0x20],eax
  4076d2:	jae    4077c0 <flatcc_builder_end_union_vector@@Base+0x120>
  4076d8:	add    rbp,QWORD PTR [rbx+0x18]
  4076dc:	je     4077d8 <flatcc_builder_end_union_vector@@Base+0x138>
  4076e2:	mov    rdi,rbx
  4076e5:	lea    r13,[rbp+r12*4+0x0]
  4076ea:	call   407680 <flatcc_builder_union_vector_edit@@Base>
  4076ef:	xor    edi,edi
  4076f1:	test   r12,r12
  4076f4:	je     40771d <flatcc_builder_end_union_vector@@Base+0x7d>
  4076f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407700:	movzx  r8d,BYTE PTR [rax+rdi*8]
  407705:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  40770a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  40770f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  407714:	add    rdi,0x1
  407718:	cmp    r12,rdi
  40771b:	jne    407700 <flatcc_builder_end_union_vector@@Base+0x60>
  40771d:	mov    rcx,r12
  407720:	mov    rdx,rbp
  407723:	mov    rsi,r13
  407726:	mov    rdi,rbx
  407729:	call   407450 <flatcc_builder_create_union_vector_direct@@Base>
  40772e:	mov    edx,DWORD PTR [rbx+0x20]
  407731:	mov    rdi,QWORD PTR [rbx+0x18]
  407735:	xor    esi,esi
  407737:	mov    r12,rax
  40773a:	mov    rbp,rax
  40773d:	sar    r12,0x20
  407741:	call   403080 <memset@plt>
  407746:	mov    rax,QWORD PTR [rbx+0x30]
  40774a:	mov    esi,DWORD PTR [rax]
  40774c:	mov    edx,DWORD PTR [rax+0x8]
  40774f:	mov    ecx,DWORD PTR [rax+0x4]
  407752:	mov    DWORD PTR [rbx+0x20],edx
  407755:	mov    DWORD PTR [rbx+0x28],esi
  407758:	mov    rdx,rsi
  40775b:	add    rsi,QWORD PTR [rbx+0x68]
  40775f:	mov    QWORD PTR [rbx+0x18],rsi
  407763:	mov    esi,DWORD PTR [rbx+0x70]
  407766:	sub    esi,edx
  407768:	cmp    ecx,esi
  40776a:	mov    edx,esi
  40776c:	cmovb  edx,ecx
  40776f:	mov    DWORD PTR [rbx+0x24],edx
  407772:	movzx  edx,WORD PTR [rbx+0xea]
  407779:	cmp    dx,WORD PTR [rbx+0xe8]
  407780:	mov    DWORD PTR [rax+0x4],ecx
  407783:	jbe    40778c <flatcc_builder_end_union_vector@@Base+0xec>
  407785:	mov    WORD PTR [rbx+0xe8],dx
  40778c:	movzx  edx,WORD PTR [rax+0xc]
  407790:	sub    rax,0x24
  407794:	sub    DWORD PTR [rbx+0x104],0x1
  40779b:	mov    QWORD PTR [rbx+0x30],rax
  40779f:	shl    r12,0x20
  4077a3:	mov    eax,ebp
  4077a5:	or     rax,r12
  4077a8:	mov    WORD PTR [rbx+0xea],dx
  4077af:	add    rsp,0x8
  4077b3:	pop    rbx
  4077b4:	pop    rbp
  4077b5:	pop    r12
  4077b7:	pop    r13
  4077b9:	ret    
  4077ba:	nop    WORD PTR [rax+rax*1+0x0]
  4077c0:	lea    esi,[rax+0x1]
  4077c3:	mov    edx,0xfffffffc
  4077c8:	mov    rdi,rbx
  4077cb:	call   4046e0 <test@@Base+0x13c0>
  4077d0:	test   eax,eax
  4077d2:	je     4076d8 <flatcc_builder_end_union_vector@@Base+0x38>
  4077d8:	add    rsp,0x8
  4077dc:	xor    eax,eax
  4077de:	pop    rbx
  4077df:	pop    rbp
  4077e0:	pop    r12
  4077e2:	pop    r13
  4077e4:	ret    
  4077e5:	lea    rcx,[rip+0x6134]        # 40d920 <g_data@@Base+0x860>
  4077ec:	lea    rsi,[rip+0x5b55]        # 40d348 <g_data@@Base+0x288>
  4077f3:	lea    rdi,[rip+0x5dc6]        # 40d5c0 <g_data@@Base+0x500>
  4077fa:	mov    edx,0x651
  4077ff:	call   403070 <__assert_fail@plt>
  407804:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40780f:	nop

0000000000407810 <flatcc_builder_extend_union_vector@@Base>:
  407810:	push   rbp
  407811:	push   rbx
  407812:	xor    edx,edx
  407814:	mov    ecx,esi
  407816:	sub    rsp,0x8
  40781a:	mov    rax,QWORD PTR [rdi+0x30]
  40781e:	add    ecx,DWORD PTR [rax+0x14]
  407821:	setb   dl
  407824:	test   edx,edx
  407826:	jne    40786d <flatcc_builder_extend_union_vector@@Base+0x5d>
  407828:	cmp    ecx,0x1fffffff
  40782e:	ja     40786d <flatcc_builder_extend_union_vector@@Base+0x5d>
  407830:	mov    DWORD PTR [rax+0x14],ecx
  407833:	mov    ebp,DWORD PTR [rdi+0x20]
  407836:	mov    rbx,rdi
  407839:	lea    eax,[rbp+rsi*8+0x0]
  40783d:	cmp    eax,DWORD PTR [rdi+0x24]
  407840:	mov    DWORD PTR [rdi+0x20],eax
  407843:	jae    407858 <flatcc_builder_extend_union_vector@@Base+0x48>
  407845:	mov    rax,rbp
  407848:	add    rax,QWORD PTR [rbx+0x18]
  40784c:	add    rsp,0x8
  407850:	pop    rbx
  407851:	pop    rbp
  407852:	ret    
  407853:	nop    DWORD PTR [rax+rax*1+0x0]
  407858:	lea    esi,[rax+0x1]
  40785b:	mov    edx,0xfffffffc
  407860:	call   4046e0 <test@@Base+0x13c0>
  407865:	test   eax,eax
  407867:	je     407845 <flatcc_builder_extend_union_vector@@Base+0x35>
  407869:	xor    eax,eax
  40786b:	jmp    40784c <flatcc_builder_extend_union_vector@@Base+0x3c>
  40786d:	call   403169 <posix_memalign@plt+0x79>
  407872:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40787d:	nop    DWORD PTR [rax]

0000000000407880 <flatcc_builder_truncate_union_vector@@Base>:
  407880:	sub    rsp,0x8
  407884:	mov    rax,QWORD PTR [rdi+0x30]
  407888:	cmp    WORD PTR [rax+0xe],0x7
  40788d:	jne    4078bf <flatcc_builder_truncate_union_vector@@Base+0x3f>
  40788f:	mov    edx,DWORD PTR [rax+0x14]
  407892:	cmp    edx,esi
  407894:	jb     4078de <flatcc_builder_truncate_union_vector@@Base+0x5e>
  407896:	sub    edx,esi
  407898:	imul   esi,DWORD PTR [rax+0x10]
  40789c:	mov    DWORD PTR [rax+0x14],edx
  40789f:	mov    eax,DWORD PTR [rdi+0x20]
  4078a2:	mov    rcx,QWORD PTR [rdi+0x18]
  4078a6:	sub    eax,esi
  4078a8:	mov    edx,esi
  4078aa:	xor    esi,esi
  4078ac:	mov    DWORD PTR [rdi+0x20],eax
  4078af:	lea    rdi,[rcx+rax*1]
  4078b3:	call   403080 <memset@plt>
  4078b8:	xor    eax,eax
  4078ba:	add    rsp,0x8
  4078be:	ret    
  4078bf:	lea    rcx,[rip+0x601a]        # 40d8e0 <g_data@@Base+0x820>
  4078c6:	lea    rsi,[rip+0x5a7b]        # 40d348 <g_data@@Base+0x288>
  4078cd:	lea    rdi,[rip+0x5cec]        # 40d5c0 <g_data@@Base+0x500>
  4078d4:	mov    edx,0x681
  4078d9:	call   403070 <__assert_fail@plt>
  4078de:	lea    rcx,[rip+0x5ffb]        # 40d8e0 <g_data@@Base+0x820>
  4078e5:	lea    rsi,[rip+0x5a5c]        # 40d348 <g_data@@Base+0x288>
  4078ec:	lea    rdi,[rip+0x5c35]        # 40d528 <g_data@@Base+0x468>
  4078f3:	mov    edx,0x682
  4078f8:	call   403070 <__assert_fail@plt>
  4078fd:	nop    DWORD PTR [rax]

0000000000407900 <flatcc_builder_union_vector_push@@Base>:
  407900:	push   r12
  407902:	push   rbp
  407903:	push   rbx
  407904:	mov    rdx,QWORD PTR [rdi+0x30]
  407908:	cmp    WORD PTR [rdx+0xe],0x7
  40790d:	jne    407960 <flatcc_builder_union_vector_push@@Base+0x60>
  40790f:	mov    eax,DWORD PTR [rdx+0x14]
  407912:	cmp    eax,0x1fffffff
  407917:	je     407959 <flatcc_builder_union_vector_push@@Base+0x59>
  407919:	add    eax,0x1
  40791c:	mov    rbp,rdi
  40791f:	mov    r12,rsi
  407922:	mov    DWORD PTR [rdx+0x14],eax
  407925:	mov    ebx,DWORD PTR [rdi+0x20]
  407928:	lea    edx,[rbx+0x8]
  40792b:	cmp    edx,DWORD PTR [rdi+0x24]
  40792e:	mov    DWORD PTR [rdi+0x20],edx
  407931:	jae    407948 <flatcc_builder_union_vector_push@@Base+0x48>
  407933:	mov    rax,rbx
  407936:	add    rax,QWORD PTR [rbp+0x18]
  40793a:	je     407959 <flatcc_builder_union_vector_push@@Base+0x59>
  40793c:	mov    QWORD PTR [rax],r12
  40793f:	pop    rbx
  407940:	pop    rbp
  407941:	pop    r12
  407943:	ret    
  407944:	nop    DWORD PTR [rax+0x0]
  407948:	lea    esi,[rbx+0x9]
  40794b:	mov    edx,0xfffffffc
  407950:	call   4046e0 <test@@Base+0x13c0>
  407955:	test   eax,eax
  407957:	je     407933 <flatcc_builder_union_vector_push@@Base+0x33>
  407959:	pop    rbx
  40795a:	xor    eax,eax
  40795c:	pop    rbp
  40795d:	pop    r12
  40795f:	ret    
  407960:	lea    rcx,[rip+0x5f39]        # 40d8a0 <g_data@@Base+0x7e0>
  407967:	lea    rsi,[rip+0x59da]        # 40d348 <g_data@@Base+0x288>
  40796e:	lea    rdi,[rip+0x5c4b]        # 40d5c0 <g_data@@Base+0x500>
  407975:	mov    edx,0x68d
  40797a:	call   403070 <__assert_fail@plt>
  40797f:	nop

0000000000407980 <flatcc_builder_append_union_vector@@Base>:
  407980:	push   r13
  407982:	push   r12
  407984:	push   rbp
  407985:	push   rbx
  407986:	sub    rsp,0x8
  40798a:	mov    rax,QWORD PTR [rdi+0x30]
  40798e:	cmp    WORD PTR [rax+0xe],0x7
  407993:	jne    407a0b <flatcc_builder_append_union_vector@@Base+0x8b>
  407995:	mov    r13,rsi
  407998:	mov    ecx,edx
  40799a:	xor    esi,esi
  40799c:	add    ecx,DWORD PTR [rax+0x14]
  40799f:	setb   sil
  4079a3:	test   esi,esi
  4079a5:	jne    407a06 <flatcc_builder_append_union_vector@@Base+0x86>
  4079a7:	cmp    ecx,0x1fffffff
  4079ad:	ja     407a06 <flatcc_builder_append_union_vector@@Base+0x86>
  4079af:	mov    DWORD PTR [rax+0x14],ecx
  4079b2:	mov    r12d,DWORD PTR [rdi+0x20]
  4079b6:	lea    ebx,[rdx*8+0x0]
  4079bd:	mov    rbp,rdi
  4079c0:	mov    rdx,r12
  4079c3:	add    edx,ebx
  4079c5:	cmp    edx,DWORD PTR [rdi+0x24]
  4079c8:	mov    DWORD PTR [rdi+0x20],edx
  4079cb:	jae    4079f0 <flatcc_builder_append_union_vector@@Base+0x70>
  4079cd:	add    r12,QWORD PTR [rbp+0x18]
  4079d1:	je     4079e0 <flatcc_builder_append_union_vector@@Base+0x60>
  4079d3:	mov    edx,ebx
  4079d5:	mov    rsi,r13
  4079d8:	mov    rdi,r12
  4079db:	call   4030b0 <memcpy@plt>
  4079e0:	add    rsp,0x8
  4079e4:	mov    rax,r12
  4079e7:	pop    rbx
  4079e8:	pop    rbp
  4079e9:	pop    r12
  4079eb:	pop    r13
  4079ed:	ret    
  4079ee:	xchg   ax,ax
  4079f0:	lea    esi,[rdx+0x1]
  4079f3:	mov    edx,0xfffffffc
  4079f8:	call   4046e0 <test@@Base+0x13c0>
  4079fd:	test   eax,eax
  4079ff:	je     4079cd <flatcc_builder_append_union_vector@@Base+0x4d>
  407a01:	xor    r12d,r12d
  407a04:	jmp    4079e0 <flatcc_builder_append_union_vector@@Base+0x60>
  407a06:	call   403169 <posix_memalign@plt+0x79>
  407a0b:	lea    rcx,[rip+0x5e4e]        # 40d860 <g_data@@Base+0x7a0>
  407a12:	lea    rsi,[rip+0x592f]        # 40d348 <g_data@@Base+0x288>
  407a19:	lea    rdi,[rip+0x5ba0]        # 40d5c0 <g_data@@Base+0x500>
  407a20:	mov    edx,0x69c
  407a25:	call   403070 <__assert_fail@plt>
  407a2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a30 <flatcc_builder_create_string@@Base>:
  407a30:	push   rbp
  407a31:	push   rbx
  407a32:	sub    rsp,0xb8
  407a39:	mov    rax,QWORD PTR fs:0x28
  407a42:	mov    QWORD PTR [rsp+0xa8],rax
  407a4a:	xor    eax,eax
  407a4c:	mov    eax,0xffffffff
  407a51:	cmp    rdx,rax
  407a54:	ja     407b20 <flatcc_builder_create_string@@Base+0xf0>
  407a5a:	mov    rbx,rdi
  407a5d:	mov    edi,DWORD PTR [rdi+0xf0]
  407a63:	lea    rcx,[rsp+0xc]
  407a68:	mov    DWORD PTR [rsp+0xc],edx
  407a6c:	mov    QWORD PTR [rsp+0x28],0x4
  407a75:	mov    QWORD PTR [rsp+0x20],rcx
  407a7a:	lea    eax,[rdi-0x1]
  407a7d:	sub    eax,edx
  407a7f:	and    eax,0x3
  407a82:	add    eax,0x1
  407a85:	test   rdx,rdx
  407a88:	jne    407b00 <flatcc_builder_create_string@@Base+0xd0>
  407a8a:	mov    edx,0x2
  407a8f:	mov    ecx,0x1
  407a94:	mov    r8d,0x4
  407a9a:	add    r8,rax
  407a9d:	mov    rsi,0x40de40
  407aa4:	mov    ebp,edi
  407aa6:	sub    ebp,r8d
  407aa9:	shl    rcx,0x4
  407aad:	mov    QWORD PTR [rsp+0x10],r8
  407ab2:	cmp    edi,ebp
  407ab4:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  407ab9:	mov    DWORD PTR [rsp+0x18],edx
  407abd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  407ac2:	jle    407b24 <flatcc_builder_create_string@@Base+0xf4>
  407ac4:	lea    rsi,[rsp+0x20]
  407ac9:	mov    rdi,QWORD PTR [rbx+0x38]
  407acd:	mov    ecx,ebp
  407acf:	call   QWORD PTR [rbx+0x48]
  407ad2:	test   eax,eax
  407ad4:	jne    407b48 <flatcc_builder_create_string@@Base+0x118>
  407ad6:	mov    DWORD PTR [rbx+0xf0],ebp
  407adc:	mov    rbx,QWORD PTR [rsp+0xa8]
  407ae4:	xor    rbx,QWORD PTR fs:0x28
  407aed:	mov    eax,ebp
  407aef:	jne    407b43 <flatcc_builder_create_string@@Base+0x113>
  407af1:	add    rsp,0xb8
  407af8:	pop    rbx
  407af9:	pop    rbp
  407afa:	ret    
  407afb:	nop    DWORD PTR [rax+rax*1+0x0]
  407b00:	lea    r8,[rdx+0x4]
  407b04:	mov    QWORD PTR [rsp+0x38],rdx
  407b09:	mov    QWORD PTR [rsp+0x30],rsi
  407b0e:	mov    edx,0x3
  407b13:	mov    ecx,0x2
  407b18:	jmp    407a9a <flatcc_builder_create_string@@Base+0x6a>
  407b1d:	nop    DWORD PTR [rax]
  407b20:	xor    ebp,ebp
  407b22:	jmp    407adc <flatcc_builder_create_string@@Base+0xac>
  407b24:	lea    rcx,[rip+0x6265]        # 40dd90 <g_data@@Base+0xcd0>
  407b2b:	lea    rsi,[rip+0x5816]        # 40d348 <g_data@@Base+0x288>
  407b32:	lea    rdi,[rip+0x5ba6]        # 40d6df <g_data@@Base+0x61f>
  407b39:	mov    edx,0x287
  407b3e:	call   403070 <__assert_fail@plt>
  407b43:	call   403060 <__stack_chk_fail@plt>
  407b48:	call   403146 <posix_memalign@plt+0x56>
  407b4d:	nop    DWORD PTR [rax]

0000000000407b50 <flatcc_builder_create_string_str@@Base>:
  407b50:	push   rbp
  407b51:	push   rbx
  407b52:	mov    rbp,rdi
  407b55:	mov    rdi,rsi
  407b58:	mov    rbx,rsi
  407b5b:	sub    rsp,0x8
  407b5f:	call   403050 <strlen@plt>
  407b64:	add    rsp,0x8
  407b68:	mov    rsi,rbx
  407b6b:	mov    rdi,rbp
  407b6e:	pop    rbx
  407b6f:	pop    rbp
  407b70:	mov    rdx,rax
  407b73:	jmp    407a30 <flatcc_builder_create_string@@Base>
  407b78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407b80 <flatcc_builder_create_string_strn@@Base>:
  407b80:	push   r12
  407b82:	push   rbp
  407b83:	mov    rbp,rsi
  407b86:	push   rbx
  407b87:	mov    r12,rdi
  407b8a:	xor    esi,esi
  407b8c:	mov    rdi,rbp
  407b8f:	mov    rbx,rdx
  407b92:	call   403090 <memchr@plt>
  407b97:	mov    rdx,rax
  407b9a:	mov    rsi,rbp
  407b9d:	mov    rdi,r12
  407ba0:	sub    rdx,rbp
  407ba3:	test   rax,rax
  407ba6:	cmovne rbx,rdx
  407baa:	mov    rdx,rbx
  407bad:	pop    rbx
  407bae:	pop    rbp
  407baf:	pop    r12
  407bb1:	jmp    407a30 <flatcc_builder_create_string@@Base>
  407bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407bc0 <flatcc_builder_end_string@@Base>:
  407bc0:	push   rbp
  407bc1:	push   rbx
  407bc2:	sub    rsp,0x8
  407bc6:	mov    rax,QWORD PTR [rdi+0x30]
  407bca:	cmp    WORD PTR [rax+0xe],0x6
  407bcf:	jne    407c96 <flatcc_builder_end_string@@Base+0xd6>
  407bd5:	mov    edx,DWORD PTR [rax+0x14]
  407bd8:	mov    rbx,rdi
  407bdb:	cmp    edx,DWORD PTR [rdi+0x20]
  407bde:	jne    407c77 <flatcc_builder_end_string@@Base+0xb7>
  407be4:	mov    rsi,QWORD PTR [rdi+0x18]
  407be8:	call   407a30 <flatcc_builder_create_string@@Base>
  407bed:	test   eax,eax
  407bef:	mov    ebp,eax
  407bf1:	jne    407c00 <flatcc_builder_end_string@@Base+0x40>
  407bf3:	add    rsp,0x8
  407bf7:	mov    eax,ebp
  407bf9:	pop    rbx
  407bfa:	pop    rbp
  407bfb:	ret    
  407bfc:	nop    DWORD PTR [rax+0x0]
  407c00:	mov    edx,DWORD PTR [rbx+0x20]
  407c03:	mov    rdi,QWORD PTR [rbx+0x18]
  407c07:	xor    esi,esi
  407c09:	call   403080 <memset@plt>
  407c0e:	mov    rax,QWORD PTR [rbx+0x30]
  407c12:	mov    edi,DWORD PTR [rbx+0x70]
  407c15:	mov    esi,DWORD PTR [rax]
  407c17:	mov    edx,DWORD PTR [rax+0x8]
  407c1a:	mov    ecx,DWORD PTR [rax+0x4]
  407c1d:	mov    DWORD PTR [rbx+0x20],edx
  407c20:	mov    rdx,rsi
  407c23:	mov    DWORD PTR [rbx+0x28],esi
  407c26:	add    rsi,QWORD PTR [rbx+0x68]
  407c2a:	sub    edi,edx
  407c2c:	cmp    ecx,edi
  407c2e:	mov    edx,edi
  407c30:	cmovb  edx,ecx
  407c33:	mov    DWORD PTR [rbx+0x24],edx
  407c36:	movzx  edx,WORD PTR [rbx+0xea]
  407c3d:	cmp    dx,WORD PTR [rbx+0xe8]
  407c44:	mov    QWORD PTR [rbx+0x18],rsi
  407c48:	mov    DWORD PTR [rax+0x4],ecx
  407c4b:	jbe    407c54 <flatcc_builder_end_string@@Base+0x94>
  407c4d:	mov    WORD PTR [rbx+0xe8],dx
  407c54:	movzx  edx,WORD PTR [rax+0xc]
  407c58:	sub    rax,0x24
  407c5c:	sub    DWORD PTR [rbx+0x104],0x1
  407c63:	mov    QWORD PTR [rbx+0x30],rax
  407c67:	mov    eax,ebp
  407c69:	mov    WORD PTR [rbx+0xea],dx
  407c70:	add    rsp,0x8
  407c74:	pop    rbx
  407c75:	pop    rbp
  407c76:	ret    
  407c77:	lea    rcx,[rip+0x5bc2]        # 40d840 <g_data@@Base+0x780>
  407c7e:	lea    rsi,[rip+0x56c3]        # 40d348 <g_data@@Base+0x288>
  407c85:	lea    rdi,[rip+0x596c]        # 40d5f8 <g_data@@Base+0x538>
  407c8c:	mov    edx,0x6c5
  407c91:	call   403070 <__assert_fail@plt>
  407c96:	lea    rcx,[rip+0x5ba3]        # 40d840 <g_data@@Base+0x780>
  407c9d:	lea    rsi,[rip+0x56a4]        # 40d348 <g_data@@Base+0x288>
  407ca4:	lea    rdi,[rip+0x5825]        # 40d4d0 <g_data@@Base+0x410>
  407cab:	mov    edx,0x6c4
  407cb0:	call   403070 <__assert_fail@plt>
  407cb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407cc0 <flatcc_builder_string_edit@@Base>:
  407cc0:	mov    rax,QWORD PTR [rdi+0x18]
  407cc4:	ret    
  407cc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407cd0 <flatcc_builder_string_len@@Base>:
  407cd0:	mov    rax,QWORD PTR [rdi+0x30]
  407cd4:	mov    eax,DWORD PTR [rax+0x14]
  407cd7:	ret    
  407cd8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ce0 <flatcc_builder_table_add@@Base>:
  407ce0:	push   r13
  407ce2:	push   r12
  407ce4:	push   rbp
  407ce5:	push   rbx
  407ce6:	sub    rsp,0x8
  407cea:	mov    rax,QWORD PTR [rdi+0x30]
  407cee:	cmp    WORD PTR [rax+0xe],0x3
  407cf3:	jne    407e02 <flatcc_builder_table_add@@Base+0x122>
  407cf9:	cmp    esi,0x7ffc
  407cff:	mov    r12d,esi
  407d02:	ja     407de3 <flatcc_builder_table_add@@Base+0x103>
  407d08:	cmp    WORD PTR [rdi+0xea],cx
  407d0f:	mov    rbx,rdi
  407d12:	jb     407d80 <flatcc_builder_table_add@@Base+0xa0>
  407d14:	movsxd r13,r12d
  407d17:	add    r13,r13
  407d1a:	mov    rsi,r13
  407d1d:	add    rsi,QWORD PTR [rbx+0x8]
  407d21:	cmp    WORD PTR [rsi],0x0
  407d25:	jne    407dc4 <flatcc_builder_table_add@@Base+0xe4>
  407d2b:	mov    eax,DWORD PTR [rbx+0x14]
  407d2e:	movzx  ecx,cx
  407d31:	xor    eax,r12d
  407d34:	imul   eax,eax,0x9e3779b1
  407d3a:	xor    eax,edx
  407d3c:	imul   eax,eax,0x9e3779b1
  407d42:	mov    DWORD PTR [rbx+0x14],eax
  407d45:	mov    eax,DWORD PTR [rbx+0x20]
  407d48:	lea    ebp,[rcx+rax*1-0x1]
  407d4c:	neg    ecx
  407d4e:	and    ebp,ecx
  407d50:	add    edx,ebp
  407d52:	cmp    edx,DWORD PTR [rbx+0x24]
  407d55:	mov    DWORD PTR [rbx+0x20],edx
  407d58:	jae    407da0 <flatcc_builder_table_add@@Base+0xc0>
  407d5a:	lea    eax,[rbp+0x4]
  407d5d:	mov    WORD PTR [rsi],ax
  407d60:	cmp    r12w,WORD PTR [rbx+0x10]
  407d65:	jae    407d90 <flatcc_builder_table_add@@Base+0xb0>
  407d67:	mov    eax,ebp
  407d69:	add    rax,QWORD PTR [rbx+0x18]
  407d6d:	add    rsp,0x8
  407d71:	pop    rbx
  407d72:	pop    rbp
  407d73:	pop    r12
  407d75:	pop    r13
  407d77:	ret    
  407d78:	nop    DWORD PTR [rax+rax*1+0x0]
  407d80:	mov    WORD PTR [rdi+0xea],cx
  407d87:	jmp    407d14 <flatcc_builder_table_add@@Base+0x34>
  407d89:	nop    DWORD PTR [rax+0x0]
  407d90:	add    r12d,0x1
  407d94:	mov    WORD PTR [rbx+0x10],r12w
  407d99:	jmp    407d67 <flatcc_builder_table_add@@Base+0x87>
  407d9b:	nop    DWORD PTR [rax+rax*1+0x0]
  407da0:	lea    esi,[rdx+0x1]
  407da3:	mov    rdi,rbx
  407da6:	mov    edx,0xfffc
  407dab:	call   4046e0 <test@@Base+0x13c0>
  407db0:	test   eax,eax
  407db2:	jne    407dc0 <flatcc_builder_table_add@@Base+0xe0>
  407db4:	mov    rsi,r13
  407db7:	add    rsi,QWORD PTR [rbx+0x8]
  407dbb:	jmp    407d5a <flatcc_builder_table_add@@Base+0x7a>
  407dbd:	nop    DWORD PTR [rax]
  407dc0:	xor    eax,eax
  407dc2:	jmp    407d6d <flatcc_builder_table_add@@Base+0x8d>
  407dc4:	lea    rcx,[rip+0x5a55]        # 40d820 <g_data@@Base+0x760>
  407dcb:	lea    rsi,[rip+0x5576]        # 40d348 <g_data@@Base+0x288>
  407dd2:	lea    rdi,[rip+0x5906]        # 40d6df <g_data@@Base+0x61f>
  407dd9:	mov    edx,0x6f8
  407dde:	call   403070 <__assert_fail@plt>
  407de3:	lea    rcx,[rip+0x5a36]        # 40d820 <g_data@@Base+0x760>
  407dea:	lea    rsi,[rip+0x5557]        # 40d348 <g_data@@Base+0x288>
  407df1:	lea    rdi,[rip+0x5828]        # 40d620 <g_data@@Base+0x560>
  407df8:	mov    edx,0x6ee
  407dfd:	call   403070 <__assert_fail@plt>
  407e02:	lea    rcx,[rip+0x5a17]        # 40d820 <g_data@@Base+0x760>
  407e09:	lea    rsi,[rip+0x5538]        # 40d348 <g_data@@Base+0x288>
  407e10:	lea    rdi,[rip+0x5779]        # 40d590 <g_data@@Base+0x4d0>
  407e17:	mov    edx,0x6ed
  407e1c:	call   403070 <__assert_fail@plt>
  407e21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407e2c:	nop    DWORD PTR [rax+0x0]

0000000000407e30 <flatcc_builder_table_edit@@Base>:
  407e30:	mov    rax,QWORD PTR [rdi+0x30]
  407e34:	cmp    WORD PTR [rax+0xe],0x3
  407e39:	jne    407e46 <flatcc_builder_table_edit@@Base+0x16>
  407e3b:	mov    eax,DWORD PTR [rdi+0x20]
  407e3e:	sub    rax,rsi
  407e41:	add    rax,QWORD PTR [rdi+0x18]
  407e45:	ret    
  407e46:	lea    rcx,[rip+0x59b3]        # 40d800 <g_data@@Base+0x740>
  407e4d:	lea    rsi,[rip+0x54f4]        # 40d348 <g_data@@Base+0x288>
  407e54:	lea    rdi,[rip+0x5735]        # 40d590 <g_data@@Base+0x4d0>
  407e5b:	sub    rsp,0x8
  407e5f:	mov    edx,0x702
  407e64:	call   403070 <__assert_fail@plt>
  407e69:	nop    DWORD PTR [rax+0x0]

0000000000407e70 <flatcc_builder_table_add_copy@@Base>:
  407e70:	push   rbp
  407e71:	push   rbx
  407e72:	mov    rbx,rcx
  407e75:	mov    rbp,rdx
  407e78:	movzx  ecx,r8w
  407e7c:	mov    rdx,rbx
  407e7f:	sub    rsp,0x8
  407e83:	call   407ce0 <flatcc_builder_table_add@@Base>
  407e88:	test   rax,rax
  407e8b:	mov    rcx,rax
  407e8e:	je     407ea1 <flatcc_builder_table_add_copy@@Base+0x31>
  407e90:	mov    rdx,rbx
  407e93:	mov    rsi,rbp
  407e96:	mov    rdi,rax
  407e99:	call   4030b0 <memcpy@plt>
  407e9e:	mov    rcx,rax
  407ea1:	add    rsp,0x8
  407ea5:	mov    rax,rcx
  407ea8:	pop    rbx
  407ea9:	pop    rbp
  407eaa:	ret    
  407eab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407eb0 <flatcc_builder_table_add_offset@@Base>:
  407eb0:	push   r13
  407eb2:	push   r12
  407eb4:	push   rbp
  407eb5:	push   rbx
  407eb6:	sub    rsp,0x8
  407eba:	mov    rax,QWORD PTR [rdi+0x30]
  407ebe:	cmp    WORD PTR [rax+0xe],0x3
  407ec3:	jne    407fc2 <flatcc_builder_table_add_offset@@Base+0x112>
  407ec9:	cmp    esi,0x7ffc
  407ecf:	mov    r12d,esi
  407ed2:	ja     407fa3 <flatcc_builder_table_add_offset@@Base+0xf3>
  407ed8:	movsxd r13,esi
  407edb:	mov    rbx,rdi
  407ede:	add    r13,r13
  407ee1:	mov    rdx,r13
  407ee4:	add    rdx,QWORD PTR [rdi+0x8]
  407ee8:	cmp    WORD PTR [rdx],0x0
  407eec:	jne    407f84 <flatcc_builder_table_add_offset@@Base+0xd4>
  407ef2:	mov    eax,DWORD PTR [rdi+0x14]
  407ef5:	xor    eax,esi
  407ef7:	imul   eax,eax,0x9e3779b1
  407efd:	xor    eax,0x4
  407f00:	imul   eax,eax,0x9e3779b1
  407f06:	mov    DWORD PTR [rdi+0x14],eax
  407f09:	mov    eax,DWORD PTR [rdi+0x20]
  407f0c:	lea    ebp,[rax+0x3]
  407f0f:	and    ebp,0xfffffffc
  407f12:	lea    esi,[rbp+0x4]
  407f15:	cmp    esi,DWORD PTR [rdi+0x24]
  407f18:	mov    DWORD PTR [rdi+0x20],esi
  407f1b:	ja     407f60 <flatcc_builder_table_add_offset@@Base+0xb0>
  407f1d:	lea    eax,[rbp+0x4]
  407f20:	mov    WORD PTR [rdx],ax
  407f23:	cmp    r12w,WORD PTR [rbx+0x10]
  407f28:	jae    407f50 <flatcc_builder_table_add_offset@@Base+0xa0>
  407f2a:	mov    rax,QWORD PTR [rbx]
  407f2d:	lea    rdx,[rax+0x2]
  407f31:	mov    QWORD PTR [rbx],rdx
  407f34:	mov    WORD PTR [rax],bp
  407f37:	mov    eax,ebp
  407f39:	add    rax,QWORD PTR [rbx+0x18]
  407f3d:	add    rsp,0x8
  407f41:	pop    rbx
  407f42:	pop    rbp
  407f43:	pop    r12
  407f45:	pop    r13
  407f47:	ret    
  407f48:	nop    DWORD PTR [rax+rax*1+0x0]
  407f50:	lea    esi,[r12+0x1]
  407f55:	mov    WORD PTR [rbx+0x10],si
  407f59:	jmp    407f2a <flatcc_builder_table_add_offset@@Base+0x7a>
  407f5b:	nop    DWORD PTR [rax+rax*1+0x0]
  407f60:	mov    edx,0xfffc
  407f65:	call   4046e0 <test@@Base+0x13c0>
  407f6a:	test   eax,eax
  407f6c:	jne    407f80 <flatcc_builder_table_add_offset@@Base+0xd0>
  407f6e:	mov    rdx,r13
  407f71:	add    rdx,QWORD PTR [rbx+0x8]
  407f75:	jmp    407f1d <flatcc_builder_table_add_offset@@Base+0x6d>
  407f77:	nop    WORD PTR [rax+rax*1+0x0]
  407f80:	xor    eax,eax
  407f82:	jmp    407f3d <flatcc_builder_table_add_offset@@Base+0x8d>
  407f84:	lea    rcx,[rip+0x5855]        # 40d7e0 <g_data@@Base+0x720>
  407f8b:	lea    rsi,[rip+0x53b6]        # 40d348 <g_data@@Base+0x288>
  407f92:	lea    rdi,[rip+0x5746]        # 40d6df <g_data@@Base+0x61f>
  407f99:	mov    edx,0x71b
  407f9e:	call   403070 <__assert_fail@plt>
  407fa3:	lea    rcx,[rip+0x5836]        # 40d7e0 <g_data@@Base+0x720>
  407faa:	lea    rsi,[rip+0x5397]        # 40d348 <g_data@@Base+0x288>
  407fb1:	lea    rdi,[rip+0x5668]        # 40d620 <g_data@@Base+0x560>
  407fb8:	mov    edx,0x714
  407fbd:	call   403070 <__assert_fail@plt>
  407fc2:	lea    rcx,[rip+0x5817]        # 40d7e0 <g_data@@Base+0x720>
  407fc9:	lea    rsi,[rip+0x5378]        # 40d348 <g_data@@Base+0x288>
  407fd0:	lea    rdi,[rip+0x55b9]        # 40d590 <g_data@@Base+0x4d0>
  407fd7:	mov    edx,0x713
  407fdc:	call   403070 <__assert_fail@plt>
  407fe1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407fec:	nop    DWORD PTR [rax+0x0]

0000000000407ff0 <flatcc_builder_table_add_union@@Base>:
  407ff0:	push   r13
  407ff2:	push   r12
  407ff4:	mov    r13,rdx
  407ff7:	push   rbp
  407ff8:	push   rbx
  407ff9:	sar    r13,0x20
  407ffd:	sub    rsp,0x8
  408001:	mov    rax,QWORD PTR [rdi+0x30]
  408005:	cmp    WORD PTR [rax+0xe],0x3
  40800a:	jne    408084 <flatcc_builder_table_add_union@@Base+0x94>
  40800c:	test   dl,dl
  40800e:	mov    r12,rdi
  408011:	mov    ebx,esi
  408013:	mov    rbp,rdx
  408016:	je     408060 <flatcc_builder_table_add_union@@Base+0x70>
  408018:	test   r13d,r13d
  40801b:	je     40802e <flatcc_builder_table_add_union@@Base+0x3e>
  40801d:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  408022:	test   rax,rax
  408025:	je     4080c2 <flatcc_builder_table_add_union@@Base+0xd2>
  40802b:	mov    DWORD PTR [rax],r13d
  40802e:	lea    esi,[rbx-0x1]
  408031:	mov    ecx,0x1
  408036:	mov    edx,0x1
  40803b:	mov    rdi,r12
  40803e:	call   407ce0 <flatcc_builder_table_add@@Base>
  408043:	test   rax,rax
  408046:	je     4080a3 <flatcc_builder_table_add_union@@Base+0xb3>
  408048:	mov    BYTE PTR [rax],bpl
  40804b:	add    rsp,0x8
  40804f:	xor    eax,eax
  408051:	pop    rbx
  408052:	pop    rbp
  408053:	pop    r12
  408055:	pop    r13
  408057:	ret    
  408058:	nop    DWORD PTR [rax+rax*1+0x0]
  408060:	test   r13d,r13d
  408063:	je     40802e <flatcc_builder_table_add_union@@Base+0x3e>
  408065:	lea    rcx,[rip+0x5904]        # 40d970 <g_data@@Base+0x8b0>
  40806c:	lea    rsi,[rip+0x52d5]        # 40d348 <g_data@@Base+0x288>
  408073:	lea    rdi,[rip+0x55ee]        # 40d668 <g_data@@Base+0x5a8>
  40807a:	mov    edx,0x5ef
  40807f:	call   403070 <__assert_fail@plt>
  408084:	lea    rcx,[rip+0x58e5]        # 40d970 <g_data@@Base+0x8b0>
  40808b:	lea    rsi,[rip+0x52b6]        # 40d348 <g_data@@Base+0x288>
  408092:	lea    rdi,[rip+0x54f7]        # 40d590 <g_data@@Base+0x4d0>
  408099:	mov    edx,0x5ee
  40809e:	call   403070 <__assert_fail@plt>
  4080a3:	lea    rcx,[rip+0x58c6]        # 40d970 <g_data@@Base+0x8b0>
  4080aa:	lea    rsi,[rip+0x5297]        # 40d348 <g_data@@Base+0x288>
  4080b1:	lea    rdi,[rip+0x56b6]        # 40d76e <g_data@@Base+0x6ae>
  4080b8:	mov    edx,0x5f6
  4080bd:	call   403070 <__assert_fail@plt>
  4080c2:	lea    rcx,[rip+0x58a7]        # 40d970 <g_data@@Base+0x8b0>
  4080c9:	lea    rsi,[rip+0x5278]        # 40d348 <g_data@@Base+0x288>
  4080d0:	lea    rdi,[rip+0x568d]        # 40d764 <g_data@@Base+0x6a4>
  4080d7:	mov    edx,0x5f2
  4080dc:	call   403070 <__assert_fail@plt>
  4080e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4080ec:	nop    DWORD PTR [rax+0x0]

00000000004080f0 <flatcc_builder_table_add_union_vector@@Base>:
  4080f0:	push   r13
  4080f2:	push   r12
  4080f4:	push   rbp
  4080f5:	push   rbx
  4080f6:	mov    rbp,rdx
  4080f9:	sar    rbp,0x20
  4080fd:	sub    rsp,0x18
  408101:	mov    rax,QWORD PTR [rdi+0x30]
  408105:	cmp    WORD PTR [rax+0xe],0x3
  40810a:	jne    408186 <flatcc_builder_table_add_union_vector@@Base+0x96>
  40810c:	test   ebp,ebp
  40810e:	sete   al
  408111:	test   edx,edx
  408113:	sete   cl
  408116:	cmp    cl,al
  408118:	je     408140 <flatcc_builder_table_add_union_vector@@Base+0x50>
  40811a:	test   edx,edx
  40811c:	setne  dl
  40811f:	cmp    al,dl
  408121:	je     4081a5 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  408127:	mov    r12d,0xffffffff
  40812d:	add    rsp,0x18
  408131:	mov    eax,r12d
  408134:	pop    rbx
  408135:	pop    rbp
  408136:	pop    r12
  408138:	pop    r13
  40813a:	ret    
  40813b:	nop    DWORD PTR [rax+rax*1+0x0]
  408140:	xor    r12d,r12d
  408143:	test   edx,edx
  408145:	je     40812d <flatcc_builder_table_add_union_vector@@Base+0x3d>
  408147:	mov    r13d,esi
  40814a:	lea    esi,[rsi-0x1]
  40814d:	mov    QWORD PTR [rsp+0x8],rdx
  408152:	mov    rbx,rdi
  408155:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  40815a:	test   rax,rax
  40815d:	mov    rdx,QWORD PTR [rsp+0x8]
  408162:	je     4081e3 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  408164:	mov    DWORD PTR [rax],edx
  408166:	mov    esi,r13d
  408169:	mov    rdi,rbx
  40816c:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  408171:	test   rax,rax
  408174:	je     4081c4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  408176:	mov    DWORD PTR [rax],ebp
  408178:	add    rsp,0x18
  40817c:	mov    eax,r12d
  40817f:	pop    rbx
  408180:	pop    rbp
  408181:	pop    r12
  408183:	pop    r13
  408185:	ret    
  408186:	lea    rcx,[rip+0x57b3]        # 40d940 <g_data@@Base+0x880>
  40818d:	lea    rsi,[rip+0x51b4]        # 40d348 <g_data@@Base+0x288>
  408194:	lea    rdi,[rip+0x53f5]        # 40d590 <g_data@@Base+0x4d0>
  40819b:	mov    edx,0x600
  4081a0:	call   403070 <__assert_fail@plt>
  4081a5:	lea    rcx,[rip+0x5794]        # 40d940 <g_data@@Base+0x880>
  4081ac:	lea    rsi,[rip+0x5195]        # 40d348 <g_data@@Base+0x288>
  4081b3:	lea    rdi,[rip+0x54d6]        # 40d690 <g_data@@Base+0x5d0>
  4081ba:	mov    edx,0x601
  4081bf:	call   403070 <__assert_fail@plt>
  4081c4:	lea    rcx,[rip+0x5775]        # 40d940 <g_data@@Base+0x880>
  4081cb:	lea    rsi,[rip+0x5176]        # 40d348 <g_data@@Base+0x288>
  4081d2:	lea    rdi,[rip+0x558b]        # 40d764 <g_data@@Base+0x6a4>
  4081d9:	mov    edx,0x608
  4081de:	call   403070 <__assert_fail@plt>
  4081e3:	lea    rcx,[rip+0x5756]        # 40d940 <g_data@@Base+0x880>
  4081ea:	lea    rsi,[rip+0x5157]        # 40d348 <g_data@@Base+0x288>
  4081f1:	lea    rdi,[rip+0x556c]        # 40d764 <g_data@@Base+0x6a4>
  4081f8:	mov    edx,0x604
  4081fd:	call   403070 <__assert_fail@plt>
  408202:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40820d:	nop    DWORD PTR [rax]

0000000000408210 <flatcc_builder_push_buffer_alignment@@Base>:
  408210:	mov    edx,0x4
  408215:	movzx  eax,WORD PTR [rdi+0xe8]
  40821c:	mov    WORD PTR [rdi+0xe8],dx
  408223:	ret    
  408224:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40822f:	nop

0000000000408230 <flatcc_builder_pop_buffer_alignment@@Base>:
  408230:	cmp    si,WORD PTR [rdi+0xe8]
  408237:	jbe    408240 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408239:	mov    WORD PTR [rdi+0xe8],si
  408240:	repz ret 
  408242:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40824d:	nop    DWORD PTR [rax]

0000000000408250 <flatcc_builder_get_buffer_alignment@@Base>:
  408250:	movzx  eax,WORD PTR [rdi+0xe8]
  408257:	ret    
  408258:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408260 <flatcc_builder_set_vtable_clustering@@Base>:
  408260:	xor    eax,eax
  408262:	test   esi,esi
  408264:	sete   al
  408267:	mov    DWORD PTR [rdi+0x124],eax
  40826d:	ret    
  40826e:	xchg   ax,ax

0000000000408270 <flatcc_builder_set_block_align@@Base>:
  408270:	mov    WORD PTR [rdi+0xec],si
  408277:	ret    
  408278:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408280 <flatcc_builder_get_level@@Base>:
  408280:	mov    eax,DWORD PTR [rdi+0x104]
  408286:	ret    
  408287:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408290 <flatcc_builder_set_max_level@@Base>:
  408290:	cmp    esi,DWORD PTR [rdi+0x108]
  408296:	mov    DWORD PTR [rdi+0x120],esi
  40829c:	jle    4082a4 <flatcc_builder_set_max_level@@Base+0x14>
  40829e:	mov    DWORD PTR [rdi+0x108],esi
  4082a4:	repz ret 
  4082a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004082b0 <flatcc_builder_get_buffer_size@@Base>:
  4082b0:	mov    eax,DWORD PTR [rdi+0xf4]
  4082b6:	sub    eax,DWORD PTR [rdi+0xf0]
  4082bc:	cdqe   
  4082be:	ret    
  4082bf:	nop

00000000004082c0 <flatcc_builder_get_buffer_start@@Base>:
  4082c0:	mov    eax,DWORD PTR [rdi+0xf0]
  4082c6:	ret    
  4082c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082d0 <flatcc_builder_get_buffer_end@@Base>:
  4082d0:	mov    eax,DWORD PTR [rdi+0xf4]
  4082d6:	ret    
  4082d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004082e0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4082e0:	mov    QWORD PTR [rdi+0x118],rsi
  4082e7:	ret    
  4082e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004082f0 <flatcc_builder_set_identifier@@Base>:
  4082f0:	test   rsi,rsi
  4082f3:	je     408300 <flatcc_builder_set_identifier@@Base+0x10>
  4082f5:	mov    eax,DWORD PTR [rsi]
  4082f7:	mov    DWORD PTR [rdi+0x110],eax
  4082fd:	ret    
  4082fe:	xchg   ax,ax
  408300:	mov    rsi,0x40de40
  408307:	mov    eax,DWORD PTR [rsi]
  408309:	mov    DWORD PTR [rdi+0x110],eax
  40830f:	ret    

0000000000408310 <flatcc_builder_get_type@@Base>:
  408310:	mov    rax,QWORD PTR [rdi+0x30]
  408314:	test   rax,rax
  408317:	je     408320 <flatcc_builder_get_type@@Base+0x10>
  408319:	movzx  eax,WORD PTR [rax+0xe]
  40831d:	ret    
  40831e:	xchg   ax,ax
  408320:	xor    eax,eax
  408322:	ret    
  408323:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40832e:	xchg   ax,ax

0000000000408330 <flatcc_builder_get_type_at@@Base>:
  408330:	test   esi,esi
  408332:	jle    408360 <flatcc_builder_get_type_at@@Base+0x30>
  408334:	mov    edx,DWORD PTR [rdi+0x104]
  40833a:	xor    eax,eax
  40833c:	cmp    esi,edx
  40833e:	jg     408362 <flatcc_builder_get_type_at@@Base+0x32>
  408340:	sub    esi,edx
  408342:	mov    rdx,QWORD PTR [rdi+0x30]
  408346:	movsxd rsi,esi
  408349:	lea    rax,[rsi+rsi*8]
  40834d:	lea    rax,[rdx+rax*4]
  408351:	movzx  eax,WORD PTR [rax+0xe]
  408355:	ret    
  408356:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408360:	xor    eax,eax
  408362:	repz ret 
  408364:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40836f:	nop

0000000000408370 <flatcc_builder_get_direct_buffer@@Base>:
  408370:	mov    eax,DWORD PTR [rdi+0x128]
  408376:	test   eax,eax
  408378:	je     40838a <flatcc_builder_get_direct_buffer@@Base+0x1a>
  40837a:	mov    rax,QWORD PTR [rdi+0x138]
  408381:	cmp    QWORD PTR [rdi+0x130],rax
  408388:	je     4083a0 <flatcc_builder_get_direct_buffer@@Base+0x30>
  40838a:	test   rsi,rsi
  40838d:	jne    408392 <flatcc_builder_get_direct_buffer@@Base+0x22>
  40838f:	xor    eax,eax
  408391:	ret    
  408392:	mov    QWORD PTR [rsi],0x0
  408399:	xor    eax,eax
  40839b:	ret    
  40839c:	nop    DWORD PTR [rax+0x0]
  4083a0:	test   rsi,rsi
  4083a3:	je     4083af <flatcc_builder_get_direct_buffer@@Base+0x3f>
  4083a5:	mov    rax,QWORD PTR [rdi+0x160]
  4083ac:	mov    QWORD PTR [rsi],rax
  4083af:	mov    rax,QWORD PTR [rdi+0x140]
  4083b6:	ret    
  4083b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004083c0 <flatcc_builder_copy_buffer@@Base>:
  4083c0:	mov    eax,DWORD PTR [rdi+0x128]
  4083c6:	test   eax,eax
  4083c8:	je     4083e8 <flatcc_builder_copy_buffer@@Base+0x28>
  4083ca:	sub    rsp,0x8
  4083ce:	add    rdi,0x130
  4083d5:	call   408bc0 <flatcc_emitter_copy_buffer@@Base>
  4083da:	test   rax,rax
  4083dd:	je     4083eb <flatcc_builder_copy_buffer@@Base+0x2b>
  4083df:	add    rsp,0x8
  4083e3:	ret    
  4083e4:	nop    DWORD PTR [rax+0x0]
  4083e8:	xor    eax,eax
  4083ea:	ret    
  4083eb:	lea    rcx,[rip+0x53ce]        # 40d7c0 <g_data@@Base+0x700>
  4083f2:	lea    rsi,[rip+0x4f4f]        # 40d348 <g_data@@Base+0x288>
  4083f9:	lea    rdi,[rip+0x537a]        # 40d77a <g_data@@Base+0x6ba>
  408400:	mov    edx,0x786
  408405:	call   403070 <__assert_fail@plt>
  40840a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408410 <flatcc_builder_finalize_buffer@@Base>:
  408410:	push   r12
  408412:	push   rbp
  408413:	mov    r12,rdi
  408416:	push   rbx
  408417:	mov    rbx,rsi
  40841a:	call   4082b0 <flatcc_builder_get_buffer_size@@Base>
  40841f:	test   rbx,rbx
  408422:	mov    rbp,rax
  408425:	je     40842a <flatcc_builder_finalize_buffer@@Base+0x1a>
  408427:	mov    QWORD PTR [rbx],rax
  40842a:	mov    rdi,rbp
  40842d:	call   4030c0 <malloc@plt>
  408432:	test   rax,rax
  408435:	mov    rbx,rax
  408438:	je     408455 <flatcc_builder_finalize_buffer@@Base+0x45>
  40843a:	mov    rdx,rbp
  40843d:	mov    rsi,rax
  408440:	mov    rdi,r12
  408443:	call   4083c0 <flatcc_builder_copy_buffer@@Base>
  408448:	test   rax,rax
  40844b:	je     408474 <flatcc_builder_finalize_buffer@@Base+0x64>
  40844d:	mov    rax,rbx
  408450:	pop    rbx
  408451:	pop    rbp
  408452:	pop    r12
  408454:	ret    
  408455:	lea    rcx,[rip+0x5344]        # 40d7a0 <g_data@@Base+0x6e0>
  40845c:	lea    rsi,[rip+0x4ee5]        # 40d348 <g_data@@Base+0x288>
  408463:	lea    rdi,[rip+0x5275]        # 40d6df <g_data@@Base+0x61f>
  40846a:	mov    edx,0x798
  40846f:	call   403070 <__assert_fail@plt>
  408474:	lea    rcx,[rip+0x5325]        # 40d7a0 <g_data@@Base+0x6e0>
  40847b:	lea    rsi,[rip+0x4ec6]        # 40d348 <g_data@@Base+0x288>
  408482:	lea    rdi,[rip+0x5256]        # 40d6df <g_data@@Base+0x61f>
  408489:	mov    edx,0x79c
  40848e:	call   403070 <__assert_fail@plt>
  408493:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40849e:	xchg   ax,ax

00000000004084a0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4084a0:	push   r13
  4084a2:	push   r12
  4084a4:	mov    r12,rdi
  4084a7:	push   rbp
  4084a8:	push   rbx
  4084a9:	mov    rbp,rsi
  4084ac:	sub    rsp,0x18
  4084b0:	mov    rax,QWORD PTR fs:0x28
  4084b9:	mov    QWORD PTR [rsp+0x8],rax
  4084be:	xor    eax,eax
  4084c0:	call   4082b0 <flatcc_builder_get_buffer_size@@Base>
  4084c5:	test   rbp,rbp
  4084c8:	mov    rbx,rax
  4084cb:	je     4084d1 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  4084cd:	mov    QWORD PTR [rbp+0x0],rax
  4084d1:	mov    rdi,r12
  4084d4:	call   408250 <flatcc_builder_get_buffer_alignment@@Base>
  4084d9:	movzx  eax,ax
  4084dc:	mov    esi,0x8
  4084e1:	mov    rdi,rsp
  4084e4:	lea    rdx,[rbx+rax*1-0x1]
  4084e9:	mov    rbx,rax
  4084ec:	mov    QWORD PTR [rsp],0x0
  4084f4:	neg    rbx
  4084f7:	and    rbx,rdx
  4084fa:	cmp    rax,0x8
  4084fe:	cmovae rsi,rax
  408502:	mov    rdx,rbx
  408505:	call   4030f0 <posix_memalign@plt>
  40850a:	test   eax,eax
  40850c:	je     408550 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  40850e:	mov    rdi,QWORD PTR [rsp]
  408512:	test   rdi,rdi
  408515:	je     40851c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  408517:	call   403030 <free@plt>
  40851c:	test   rbp,rbp
  40851f:	je     408576 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  408521:	mov    QWORD PTR [rbp+0x0],0x0
  408529:	xor    r13d,r13d
  40852c:	mov    rcx,QWORD PTR [rsp+0x8]
  408531:	xor    rcx,QWORD PTR fs:0x28
  40853a:	mov    rax,r13
  40853d:	jne    408571 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  40853f:	add    rsp,0x18
  408543:	pop    rbx
  408544:	pop    rbp
  408545:	pop    r12
  408547:	pop    r13
  408549:	ret    
  40854a:	nop    WORD PTR [rax+rax*1+0x0]
  408550:	mov    r13,QWORD PTR [rsp]
  408554:	test   r13,r13
  408557:	je     40851c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  408559:	mov    rdx,rbx
  40855c:	mov    rsi,r13
  40855f:	mov    rdi,r12
  408562:	call   4083c0 <flatcc_builder_copy_buffer@@Base>
  408567:	test   rax,rax
  40856a:	jne    40852c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40856c:	mov    rdi,r13
  40856f:	jmp    408517 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  408571:	call   403060 <__stack_chk_fail@plt>
  408576:	xor    r13d,r13d
  408579:	jmp    40852c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40857b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408580 <flatcc_builder_aligned_alloc@@Base>:
  408580:	sub    rsp,0x18
  408584:	mov    rdx,rsi
  408587:	mov    esi,0x8
  40858c:	mov    rax,QWORD PTR fs:0x28
  408595:	mov    QWORD PTR [rsp+0x8],rax
  40859a:	xor    eax,eax
  40859c:	cmp    rdi,0x8
  4085a0:	mov    QWORD PTR [rsp],0x0
  4085a8:	cmovae rsi,rdi
  4085ac:	mov    rdi,rsp
  4085af:	call   4030f0 <posix_memalign@plt>
  4085b4:	test   eax,eax
  4085b6:	mov    rax,QWORD PTR [rsp]
  4085ba:	je     4085cb <flatcc_builder_aligned_alloc@@Base+0x4b>
  4085bc:	test   rax,rax
  4085bf:	je     4085cb <flatcc_builder_aligned_alloc@@Base+0x4b>
  4085c1:	mov    rdi,rax
  4085c4:	call   403030 <free@plt>
  4085c9:	xor    eax,eax
  4085cb:	mov    rcx,QWORD PTR [rsp+0x8]
  4085d0:	xor    rcx,QWORD PTR fs:0x28
  4085d9:	jne    4085e0 <flatcc_builder_aligned_alloc@@Base+0x60>
  4085db:	add    rsp,0x18
  4085df:	ret    
  4085e0:	call   403060 <__stack_chk_fail@plt>
  4085e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004085f0 <flatcc_builder_aligned_free@@Base>:
  4085f0:	jmp    403030 <free@plt>
  4085f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408600 <flatcc_builder_get_emit_context@@Base>:
  408600:	mov    rax,QWORD PTR [rdi+0x38]
  408604:	ret    
  408605:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40860f:	nop

0000000000408610 <flatcc_emitter_recycle_page@@Base>:
  408610:	mov    rax,QWORD PTR [rdi]
  408613:	cmp    rax,rsi
  408616:	je     408670 <flatcc_emitter_recycle_page@@Base+0x60>
  408618:	cmp    rsi,QWORD PTR [rdi+0x8]
  40861c:	je     408670 <flatcc_emitter_recycle_page@@Base+0x60>
  40861e:	mov    rdx,QWORD PTR [rsi+0xb80]
  408625:	mov    rcx,QWORD PTR [rsi+0xb88]
  40862c:	mov    QWORD PTR [rdx+0xb88],rcx
  408633:	mov    rcx,QWORD PTR [rsi+0xb88]
  40863a:	mov    QWORD PTR [rcx+0xb80],rdx
  408641:	mov    rdx,QWORD PTR [rax+0xb88]
  408648:	mov    QWORD PTR [rsi+0xb80],rax
  40864f:	mov    QWORD PTR [rsi+0xb88],rdx
  408656:	mov    QWORD PTR [rdx+0xb80],rsi
  40865d:	mov    rax,QWORD PTR [rsi+0xb80]
  408664:	mov    QWORD PTR [rax+0xb88],rsi
  40866b:	xor    eax,eax
  40866d:	ret    
  40866e:	xchg   ax,ax
  408670:	mov    eax,0xffffffff
  408675:	ret    
  408676:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408680 <flatcc_emitter_reset@@Base>:
  408680:	mov    rax,QWORD PTR [rdi]
  408683:	test   rax,rax
  408686:	je     40874d <flatcc_emitter_reset@@Base+0xcd>
  40868c:	lea    rdx,[rax+0x5c0]
  408693:	mov    QWORD PTR [rdi+0x8],rax
  408697:	mov    QWORD PTR [rdi+0x18],0x5c0
  40869f:	mov    QWORD PTR [rdi+0x28],0x5c0
  4086a7:	mov    rcx,QWORD PTR [rdi+0x30]
  4086ab:	mov    QWORD PTR [rdi+0x10],rdx
  4086af:	mov    QWORD PTR [rdi+0x20],rdx
  4086b3:	mov    rdx,QWORD PTR [rdi+0x40]
  4086b7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4086c1:	test   rdx,rdx
  4086c4:	je     408750 <flatcc_emitter_reset@@Base+0xd0>
  4086ca:	lea    rdx,[rdx+rdx*2]
  4086ce:	shr    rcx,0x2
  4086d2:	mov    QWORD PTR [rdi+0x30],0x0
  4086da:	shr    rdx,0x2
  4086de:	add    rdx,rcx
  4086e1:	mov    QWORD PTR [rdi+0x40],rdx
  4086e5:	add    rdx,rdx
  4086e8:	cmp    QWORD PTR [rdi+0x38],rdx
  4086ec:	jbe    40874d <flatcc_emitter_reset@@Base+0xcd>
  4086ee:	push   rbx
  4086ef:	mov    rbx,rdi
  4086f2:	mov    rdi,QWORD PTR [rax+0xb80]
  4086f9:	cmp    rax,rdi
  4086fc:	jne    408710 <flatcc_emitter_reset@@Base+0x90>
  4086fe:	jmp    40874c <flatcc_emitter_reset@@Base+0xcc>
  408700:	mov    rax,QWORD PTR [rbx+0x8]
  408704:	mov    rdi,QWORD PTR [rax+0xb80]
  40870b:	cmp    rdi,QWORD PTR [rbx]
  40870e:	je     40874c <flatcc_emitter_reset@@Base+0xcc>
  408710:	mov    rdx,QWORD PTR [rdi+0xb80]
  408717:	mov    QWORD PTR [rax+0xb80],rdx
  40871e:	mov    rdx,QWORD PTR [rdi+0xb80]
  408725:	mov    QWORD PTR [rdx+0xb88],rax
  40872c:	call   403030 <free@plt>
  408731:	mov    rsi,QWORD PTR [rbx+0x40]
  408735:	mov    rax,QWORD PTR [rbx+0x38]
  408739:	lea    rdx,[rsi+rsi*1]
  40873d:	sub    rax,0xb80
  408743:	mov    QWORD PTR [rbx+0x38],rax
  408747:	cmp    rdx,rax
  40874a:	jb     408700 <flatcc_emitter_reset@@Base+0x80>
  40874c:	pop    rbx
  40874d:	repz ret 
  40874f:	nop
  408750:	mov    rdx,rcx
  408753:	jmp    4086ca <flatcc_emitter_reset@@Base+0x4a>
  408758:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408760 <flatcc_emitter_clear@@Base>:
  408760:	mov    rax,QWORD PTR [rdi]
  408763:	test   rax,rax
  408766:	je     4087e7 <flatcc_emitter_clear@@Base+0x87>
  408768:	push   rbp
  408769:	push   rbx
  40876a:	mov    rbp,rdi
  40876d:	sub    rsp,0x8
  408771:	mov    rdx,QWORD PTR [rax+0xb88]
  408778:	mov    QWORD PTR [rdx+0xb80],0x0
  408783:	mov    rbx,QWORD PTR [rax+0xb80]
  40878a:	test   rbx,rbx
  40878d:	jne    40879b <flatcc_emitter_clear@@Base+0x3b>
  40878f:	jmp    4087e9 <flatcc_emitter_clear@@Base+0x89>
  408791:	nop    DWORD PTR [rax+0x0]
  408798:	mov    rbx,rax
  40879b:	mov    rdi,QWORD PTR [rbx+0xb88]
  4087a2:	call   403030 <free@plt>
  4087a7:	mov    rax,QWORD PTR [rbx+0xb80]
  4087ae:	test   rax,rax
  4087b1:	jne    408798 <flatcc_emitter_clear@@Base+0x38>
  4087b3:	mov    rdi,rbx
  4087b6:	call   403030 <free@plt>
  4087bb:	lea    rdi,[rbp+0x8]
  4087bf:	mov    QWORD PTR [rbp+0x0],0x0
  4087c7:	mov    QWORD PTR [rbp+0x40],0x0
  4087cf:	xor    eax,eax
  4087d1:	and    rdi,0xfffffffffffffff8
  4087d5:	sub    rbp,rdi
  4087d8:	lea    ecx,[rbp+0x48]
  4087db:	shr    ecx,0x3
  4087de:	rep stos QWORD PTR es:[rdi],rax
  4087e1:	add    rsp,0x8
  4087e5:	pop    rbx
  4087e6:	pop    rbp
  4087e7:	repz ret 
  4087e9:	mov    rbx,rax
  4087ec:	jmp    4087b3 <flatcc_emitter_clear@@Base+0x53>
  4087ee:	xchg   ax,ax

00000000004087f0 <flatcc_emitter@@Base>:
  4087f0:	push   r15
  4087f2:	push   r14
  4087f4:	mov    r14,rsi
  4087f7:	push   r13
  4087f9:	push   r12
  4087fb:	push   rbp
  4087fc:	push   rbx
  4087fd:	mov    rbx,rdi
  408800:	sub    rsp,0x18
  408804:	add    QWORD PTR [rdi+0x30],r8
  408808:	test   ecx,ecx
  40880a:	js     4089fe <flatcc_emitter@@Base+0x20e>
  408810:	mov    rax,QWORD PTR [rdi+0x28]
  408814:	cmp    r8,rax
  408817:	jbe    4088a4 <flatcc_emitter@@Base+0xb4>
  40881d:	test   edx,edx
  40881f:	je     408893 <flatcc_emitter@@Base+0xa3>
  408821:	lea    r15d,[rdx-0x1]
  408825:	add    r15,0x1
  408829:	shl    r15,0x4
  40882d:	lea    rax,[rsi+r15*1]
  408831:	mov    QWORD PTR [rsp+0x8],rax
  408836:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408840:	mov    r12,QWORD PTR [r14+0x8]
  408844:	mov    r13,QWORD PTR [r14]
  408847:	test   r12,r12
  40884a:	je     408888 <flatcc_emitter@@Base+0x98>
  40884c:	nop    DWORD PTR [rax+0x0]
  408850:	mov    rbp,QWORD PTR [rbx+0x28]
  408854:	cmp    rbp,r12
  408857:	jae    4088f8 <flatcc_emitter@@Base+0x108>
  40885d:	test   rbp,rbp
  408860:	je     408908 <flatcc_emitter@@Base+0x118>
  408866:	sub    r12,rbp
  408869:	mov    rdi,QWORD PTR [rbx+0x20]
  40886d:	mov    rsi,r13
  408870:	mov    rdx,rbp
  408873:	add    r13,rbp
  408876:	call   4030b0 <memcpy@plt>
  40887b:	add    QWORD PTR [rbx+0x20],rbp
  40887f:	sub    QWORD PTR [rbx+0x28],rbp
  408883:	test   r12,r12
  408886:	jne    408850 <flatcc_emitter@@Base+0x60>
  408888:	add    r14,0x10
  40888c:	cmp    r14,QWORD PTR [rsp+0x8]
  408891:	jne    408840 <flatcc_emitter@@Base+0x50>
  408893:	add    rsp,0x18
  408897:	xor    eax,eax
  408899:	pop    rbx
  40889a:	pop    rbp
  40889b:	pop    r12
  40889d:	pop    r13
  40889f:	pop    r14
  4088a1:	pop    r15
  4088a3:	ret    
  4088a4:	mov    rcx,QWORD PTR [rdi+0x20]
  4088a8:	sub    rax,r8
  4088ab:	mov    QWORD PTR [rdi+0x28],rax
  4088af:	lea    rsi,[rcx+r8*1]
  4088b3:	mov    QWORD PTR [rdi+0x20],rsi
  4088b7:	test   edx,edx
  4088b9:	je     408893 <flatcc_emitter@@Base+0xa3>
  4088bb:	lea    ebx,[rdx-0x1]
  4088be:	add    rbx,0x1
  4088c2:	shl    rbx,0x4
  4088c6:	add    rbx,r14
  4088c9:	nop    DWORD PTR [rax+0x0]
  4088d0:	mov    rsi,QWORD PTR [r14]
  4088d3:	mov    rdx,QWORD PTR [r14+0x8]
  4088d7:	mov    rdi,rcx
  4088da:	add    r14,0x10
  4088de:	call   4030b0 <memcpy@plt>
  4088e3:	mov    rcx,rax
  4088e6:	add    rcx,QWORD PTR [r14-0x8]
  4088ea:	cmp    rbx,r14
  4088ed:	jne    4088d0 <flatcc_emitter@@Base+0xe0>
  4088ef:	jmp    408893 <flatcc_emitter@@Base+0xa3>
  4088f1:	nop    DWORD PTR [rax+0x0]
  4088f8:	mov    rbp,r12
  4088fb:	xor    r12d,r12d
  4088fe:	jmp    408869 <flatcc_emitter@@Base+0x79>
  408903:	nop    DWORD PTR [rax+rax*1+0x0]
  408908:	mov    r15,QWORD PTR [rbx+0x8]
  40890c:	test   r15,r15
  40890f:	je     408990 <flatcc_emitter@@Base+0x1a0>
  408911:	mov    rbp,QWORD PTR [r15+0xb80]
  408918:	cmp    rbp,QWORD PTR [rbx]
  40891b:	je     408950 <flatcc_emitter@@Base+0x160>
  40891d:	mov    QWORD PTR [rbx+0x8],rbp
  408921:	mov    rax,QWORD PTR [rbp+0xb88]
  408928:	mov    QWORD PTR [rbx+0x20],rbp
  40892c:	mov    QWORD PTR [rbx+0x28],0xb80
  408934:	mov    eax,DWORD PTR [rax+0xb90]
  40893a:	add    eax,0xb80
  40893f:	mov    DWORD PTR [rbp+0xb90],eax
  408945:	jmp    408850 <flatcc_emitter@@Base+0x60>
  40894a:	nop    WORD PTR [rax+rax*1+0x0]
  408950:	mov    edi,0xb98
  408955:	call   4030c0 <malloc@plt>
  40895a:	test   rax,rax
  40895d:	je     40899f <flatcc_emitter@@Base+0x1af>
  40895f:	mov    QWORD PTR [rax+0xb80],rbp
  408966:	add    QWORD PTR [rbx+0x38],0xb80
  40896e:	mov    QWORD PTR [rax+0xb88],r15
  408975:	mov    QWORD PTR [rbp+0xb88],rax
  40897c:	mov    rbp,rax
  40897f:	mov    QWORD PTR [r15+0xb80],rax
  408986:	mov    QWORD PTR [rbx+0x8],rax
  40898a:	jmp    408921 <flatcc_emitter@@Base+0x131>
  40898c:	nop    DWORD PTR [rax+0x0]
  408990:	mov    edi,0xb98
  408995:	call   4030c0 <malloc@plt>
  40899a:	test   rax,rax
  40899d:	jne    4089b3 <flatcc_emitter@@Base+0x1c3>
  40899f:	add    rsp,0x18
  4089a3:	mov    eax,0xffffffff
  4089a8:	pop    rbx
  4089a9:	pop    rbp
  4089aa:	pop    r12
  4089ac:	pop    r13
  4089ae:	pop    r14
  4089b0:	pop    r15
  4089b2:	ret    
  4089b3:	lea    rdx,[rax+0x5c0]
  4089ba:	add    QWORD PTR [rbx+0x38],0xb80
  4089c2:	mov    QWORD PTR [rbx],rax
  4089c5:	mov    QWORD PTR [rbx+0x8],rax
  4089c9:	mov    QWORD PTR [rax+0xb80],rax
  4089d0:	mov    QWORD PTR [rax+0xb88],rax
  4089d7:	mov    QWORD PTR [rbx+0x10],rdx
  4089db:	mov    QWORD PTR [rbx+0x20],rdx
  4089df:	mov    QWORD PTR [rbx+0x18],0x5c0
  4089e7:	mov    QWORD PTR [rbx+0x28],0x5c0
  4089ef:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4089f9:	jmp    408850 <flatcc_emitter@@Base+0x60>
  4089fe:	mov    rax,QWORD PTR [rdi+0x18]
  408a02:	cmp    r8,rax
  408a05:	jbe    408a9c <flatcc_emitter@@Base+0x2ac>
  408a0b:	movsxd rax,edx
  408a0e:	shl    rax,0x4
  408a12:	add    r14,rax
  408a15:	mov    eax,edx
  408a17:	shl    rax,0x4
  408a1b:	mov    rcx,r14
  408a1e:	sub    rcx,rax
  408a21:	mov    QWORD PTR [rsp+0x8],rcx
  408a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a30:	cmp    r14,QWORD PTR [rsp+0x8]
  408a35:	je     408893 <flatcc_emitter@@Base+0xa3>
  408a3b:	sub    r14,0x10
  408a3f:	mov    rbp,QWORD PTR [r14+0x8]
  408a43:	mov    r12,rbp
  408a46:	add    r12,QWORD PTR [r14]
  408a49:	test   rbp,rbp
  408a4c:	je     408a30 <flatcc_emitter@@Base+0x240>
  408a4e:	mov    rdx,QWORD PTR [rbx+0x18]
  408a52:	cmp    rdx,rbp
  408a55:	jae    408a8f <flatcc_emitter@@Base+0x29f>
  408a57:	test   rdx,rdx
  408a5a:	je     408ab8 <flatcc_emitter@@Base+0x2c8>
  408a5c:	sub    rbp,rdx
  408a5f:	xor    ecx,ecx
  408a61:	mov    rax,rdx
  408a64:	mov    QWORD PTR [rbx+0x18],rcx
  408a68:	neg    rax
  408a6b:	mov    rdi,rax
  408a6e:	add    rdi,QWORD PTR [rbx+0x10]
  408a72:	add    r12,rax
  408a75:	mov    rsi,r12
  408a78:	mov    QWORD PTR [rbx+0x10],rdi
  408a7c:	call   4030b0 <memcpy@plt>
  408a81:	test   rbp,rbp
  408a84:	je     408a30 <flatcc_emitter@@Base+0x240>
  408a86:	mov    rdx,QWORD PTR [rbx+0x18]
  408a8a:	cmp    rdx,rbp
  408a8d:	jb     408a57 <flatcc_emitter@@Base+0x267>
  408a8f:	mov    rcx,rdx
  408a92:	mov    rdx,rbp
  408a95:	sub    rcx,rbp
  408a98:	xor    ebp,ebp
  408a9a:	jmp    408a61 <flatcc_emitter@@Base+0x271>
  408a9c:	mov    rcx,QWORD PTR [rdi+0x10]
  408aa0:	sub    rax,r8
  408aa3:	mov    QWORD PTR [rdi+0x18],rax
  408aa7:	sub    rcx,r8
  408aaa:	mov    QWORD PTR [rdi+0x10],rcx
  408aae:	jmp    4088b7 <flatcc_emitter@@Base+0xc7>
  408ab3:	nop    DWORD PTR [rax+rax*1+0x0]
  408ab8:	mov    r13,QWORD PTR [rbx]
  408abb:	test   r13,r13
  408abe:	je     408b5f <flatcc_emitter@@Base+0x36f>
  408ac4:	mov    r15,QWORD PTR [r13+0xb88]
  408acb:	cmp    r15,QWORD PTR [rbx+0x8]
  408acf:	je     408b20 <flatcc_emitter@@Base+0x330>
  408ad1:	mov    eax,DWORD PTR [r13+0xb90]
  408ad8:	sub    eax,0xb80
  408add:	mov    DWORD PTR [r15+0xb90],eax
  408ae4:	mov    QWORD PTR [rbx],r15
  408ae7:	lea    rax,[r15+0xb80]
  408aee:	mov    QWORD PTR [rbx+0x18],0xb80
  408af6:	mov    QWORD PTR [rbx+0x10],rax
  408afa:	mov    rax,QWORD PTR [r15+0xb80]
  408b01:	mov    eax,DWORD PTR [rax+0xb90]
  408b07:	sub    eax,0xb80
  408b0c:	mov    DWORD PTR [r15+0xb90],eax
  408b13:	jmp    408a4e <flatcc_emitter@@Base+0x25e>
  408b18:	nop    DWORD PTR [rax+rax*1+0x0]
  408b20:	mov    edi,0xb98
  408b25:	call   4030c0 <malloc@plt>
  408b2a:	test   rax,rax
  408b2d:	je     40899f <flatcc_emitter@@Base+0x1af>
  408b33:	mov    QWORD PTR [rax+0xb88],r15
  408b3a:	add    QWORD PTR [rbx+0x38],0xb80
  408b42:	mov    QWORD PTR [rax+0xb80],r13
  408b49:	mov    QWORD PTR [r13+0xb88],rax
  408b50:	mov    QWORD PTR [r15+0xb80],rax
  408b57:	mov    QWORD PTR [rbx],rax
  408b5a:	mov    r15,rax
  408b5d:	jmp    408ae7 <flatcc_emitter@@Base+0x2f7>
  408b5f:	mov    edi,0xb98
  408b64:	call   4030c0 <malloc@plt>
  408b69:	test   rax,rax
  408b6c:	je     40899f <flatcc_emitter@@Base+0x1af>
  408b72:	lea    rdx,[rax+0x5c0]
  408b79:	add    QWORD PTR [rbx+0x38],0xb80
  408b81:	mov    QWORD PTR [rbx],rax
  408b84:	mov    QWORD PTR [rbx+0x8],rax
  408b88:	mov    QWORD PTR [rax+0xb80],rax
  408b8f:	mov    QWORD PTR [rax+0xb88],rax
  408b96:	mov    QWORD PTR [rbx+0x10],rdx
  408b9a:	mov    QWORD PTR [rbx+0x20],rdx
  408b9e:	mov    QWORD PTR [rbx+0x18],0x5c0
  408ba6:	mov    QWORD PTR [rbx+0x28],0x5c0
  408bae:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408bb8:	jmp    408a4e <flatcc_emitter@@Base+0x25e>
  408bbd:	nop    DWORD PTR [rax]

0000000000408bc0 <flatcc_emitter_copy_buffer@@Base>:
  408bc0:	push   rbp
  408bc1:	push   rbx
  408bc2:	sub    rsp,0x8
  408bc6:	mov    r9,QWORD PTR [rdi+0x30]
  408bca:	cmp    r9,rdx
  408bcd:	ja     408c90 <flatcc_emitter_copy_buffer@@Base+0xd0>
  408bd3:	mov    rax,QWORD PTR [rdi]
  408bd6:	test   rax,rax
  408bd9:	je     408c90 <flatcc_emitter_copy_buffer@@Base+0xd0>
  408bdf:	cmp    rax,QWORD PTR [rdi+0x8]
  408be3:	mov    rcx,rsi
  408be6:	mov    rbx,rdi
  408be9:	je     408ca0 <flatcc_emitter_copy_buffer@@Base+0xe0>
  408bef:	mov    r8d,0xb80
  408bf5:	sub    r8,QWORD PTR [rdi+0x18]
  408bf9:	mov    rsi,QWORD PTR [rdi+0x10]
  408bfd:	mov    rdi,rcx
  408c00:	mov    rbp,r8
  408c03:	mov    rdx,r8
  408c06:	call   4030b0 <memcpy@plt>
  408c0b:	add    rbp,rax
  408c0e:	mov    rax,QWORD PTR [rbx]
  408c11:	mov    rsi,QWORD PTR [rbx+0x8]
  408c15:	mov    rax,QWORD PTR [rax+0xb80]
  408c1c:	cmp    rax,rsi
  408c1f:	je     408c74 <flatcc_emitter_copy_buffer@@Base+0xb4>
  408c21:	nop    DWORD PTR [rax+0x0]
  408c28:	mov    rdx,QWORD PTR [rax]
  408c2b:	lea    rdi,[rbp+0x8]
  408c2f:	mov    rcx,rbp
  408c32:	mov    rsi,rax
  408c35:	add    rbp,0xb80
  408c3c:	and    rdi,0xfffffffffffffff8
  408c40:	mov    QWORD PTR [rbp-0xb80],rdx
  408c47:	mov    rdx,QWORD PTR [rax+0xb78]
  408c4e:	sub    rcx,rdi
  408c51:	sub    rsi,rcx
  408c54:	add    ecx,0xb80
  408c5a:	shr    ecx,0x3
  408c5d:	mov    QWORD PTR [rbp-0x8],rdx
  408c61:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  408c64:	mov    rax,QWORD PTR [rax+0xb80]
  408c6b:	mov    rsi,QWORD PTR [rbx+0x8]
  408c6f:	cmp    rsi,rax
  408c72:	jne    408c28 <flatcc_emitter_copy_buffer@@Base+0x68>
  408c74:	mov    edx,0xb80
  408c79:	sub    rdx,QWORD PTR [rbx+0x28]
  408c7d:	mov    rdi,rbp
  408c80:	call   4030b0 <memcpy@plt>
  408c85:	add    rsp,0x8
  408c89:	mov    rax,rbp
  408c8c:	pop    rbx
  408c8d:	pop    rbp
  408c8e:	ret    
  408c8f:	nop
  408c90:	xor    ebp,ebp
  408c92:	add    rsp,0x8
  408c96:	mov    rax,rbp
  408c99:	pop    rbx
  408c9a:	pop    rbp
  408c9b:	ret    
  408c9c:	nop    DWORD PTR [rax+0x0]
  408ca0:	mov    rsi,QWORD PTR [rdi+0x10]
  408ca4:	mov    rdx,r9
  408ca7:	mov    rdi,rcx
  408caa:	call   4030b0 <memcpy@plt>
  408caf:	mov    rbp,rax
  408cb2:	jmp    408c85 <flatcc_emitter_copy_buffer@@Base+0xc5>
  408cb4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408cbe:	xchg   ax,ax
  408cc0:	mov    r9,rdi
  408cc3:	mov    eax,edx
  408cc5:	mov    edi,edi
  408cc7:	shr    r9,0x20
  408ccb:	mov    r11,rdi
  408cce:	mov    r10,rdx
  408cd1:	imul   rdi,rax
  408cd5:	mov    r8,r9
  408cd8:	shr    r10,0x20
  408cdc:	imul   r8,rax
  408ce0:	mov    QWORD PTR [rsp-0x10],0x0
  408ce9:	imul   r11,r10
  408ced:	mov    rax,rdi
  408cf0:	shr    rax,0x20
  408cf4:	mov    edi,r8d
  408cf7:	add    rax,rdi
  408cfa:	mov    edi,0x80000000
  408cff:	mov    edx,r11d
  408d02:	add    rax,rdi
  408d05:	shr    r11,0x20
  408d09:	imul   r9,r10
  408d0d:	add    rax,rdx
  408d10:	mov    rdx,r8
  408d13:	shr    rdx,0x20
  408d17:	shr    rax,0x20
  408d1b:	add    rdx,r11
  408d1e:	lea    r8,[rdx+r9*1]
  408d22:	add    rax,r8
  408d25:	mov    QWORD PTR [rsp-0x18],rax
  408d2a:	lea    eax,[rsi+rcx*1+0x40]
  408d2e:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  408d34:	vpinsrd xmm0,xmm1,eax,0x2
  408d3a:	vmovaps XMMWORD PTR [rsp-0x18],xmm0
  408d40:	mov    rax,QWORD PTR [rsp-0x18]
  408d45:	mov    rdx,QWORD PTR [rsp-0x10]
  408d4a:	ret    
  408d4b:	nop    DWORD PTR [rax+rax*1+0x0]
  408d50:	sub    rsp,0x18
  408d54:	test   rdi,rdi
  408d57:	mov    QWORD PTR [rsp+0x8],rsi
  408d5c:	mov    QWORD PTR [rsp],rdi
  408d60:	mov    ecx,DWORD PTR [rsp+0x8]
  408d64:	je     408dcc <flatcc_emitter_copy_buffer@@Base+0x20c>
  408d66:	mov    rax,rdi
  408d69:	movabs rdi,0xffc0000000000000
  408d73:	lea    edx,[rcx-0xa]
  408d76:	test   rax,rdi
  408d79:	mov    rsi,rdi
  408d7c:	jne    408d8e <flatcc_emitter_copy_buffer@@Base+0x1ce>
  408d7e:	xchg   ax,ax
  408d80:	shl    rax,0xa
  408d84:	mov    ecx,edx
  408d86:	sub    edx,0xa
  408d89:	test   rax,rsi
  408d8c:	je     408d80 <flatcc_emitter_copy_buffer@@Base+0x1c0>
  408d8e:	test   rax,rax
  408d91:	js     408daa <flatcc_emitter_copy_buffer@@Base+0x1ea>
  408d93:	lea    edx,[rcx-0x1]
  408d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408da0:	mov    ecx,edx
  408da2:	sub    edx,0x1
  408da5:	add    rax,rax
  408da8:	jns    408da0 <flatcc_emitter_copy_buffer@@Base+0x1e0>
  408daa:	mov    QWORD PTR [rsp],rax
  408dae:	vmovdqa xmm1,XMMWORD PTR [rsp]
  408db3:	vpinsrd xmm0,xmm1,ecx,0x2
  408db9:	vmovaps XMMWORD PTR [rsp],xmm0
  408dbe:	mov    rax,QWORD PTR [rsp]
  408dc2:	mov    rdx,QWORD PTR [rsp+0x8]
  408dc7:	add    rsp,0x18
  408dcb:	ret    
  408dcc:	lea    rcx,[rip+0x5c0d]        # 40e9e0 <flatcc_builder_padding_base@@Base+0xba0>
  408dd3:	lea    rsi,[rip+0x5266]        # 40e040 <flatcc_builder_padding_base@@Base+0x200>
  408dda:	lea    rdi,[rip+0x5443]        # 40e224 <flatcc_builder_padding_base@@Base+0x3e4>
  408de1:	mov    edx,0x104
  408de6:	call   403070 <__assert_fail@plt>
  408deb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408df0 <grisu3_diy_fp_encode_double@@Base>:
  408df0:	push   r15
  408df2:	push   r14
  408df4:	mov    eax,0x4
  408df9:	push   r13
  408dfb:	push   r12
  408dfd:	mov    r12d,ecx
  408e00:	push   rbp
  408e01:	push   rbx
  408e02:	mov    r13d,edx
  408e05:	mov    rbx,r8
  408e08:	sub    rsp,0x18
  408e0c:	test   ecx,ecx
  408e0e:	mov    QWORD PTR [rsp+0x8],0x0
  408e17:	mov    QWORD PTR [rsp],rdi
  408e1b:	cmovne r12d,eax
  408e1f:	vmovdqa xmm2,XMMWORD PTR [rsp]
  408e24:	xor    eax,eax
  408e26:	sub    esi,edx
  408e28:	vpinsrd xmm1,xmm2,eax,0x2
  408e2e:	mov    ebp,esi
  408e30:	vmovaps XMMWORD PTR [rsp],xmm1
  408e35:	mov    rsi,QWORD PTR [rsp+0x8]
  408e3a:	mov    rdi,QWORD PTR [rsp]
  408e3e:	call   408d50 <flatcc_emitter_copy_buffer@@Base+0x190>
  408e43:	mov    QWORD PTR [rsp+0x8],rdx
  408e48:	mov    esi,DWORD PTR [rsp+0x8]
  408e4c:	mov    QWORD PTR [rsp],rax
  408e50:	mov    rdi,QWORD PTR [rsp]
  408e54:	mov    ecx,esi
  408e56:	neg    ecx
  408e58:	cmp    ebp,0xfffffea4
  408e5e:	shlx   r12d,r12d,ecx
  408e63:	jl     409150 <grisu3_diy_fp_encode_double@@Base+0x360>
  408e69:	cmp    ebp,0x15b
  408e6f:	jg     409131 <grisu3_diy_fp_encode_double@@Base+0x341>
  408e75:	lea    eax,[rbp+0x15c]
  408e7b:	lea    rdx,[rip+0x5bbe]        # 40ea40 <flatcc_builder_padding_base@@Base+0xc00>
  408e82:	sar    eax,0x3
  408e85:	cdqe   
  408e87:	shl    rax,0x4
  408e8b:	add    rax,rdx
  408e8e:	movsx  edx,WORD PTR [rax+0xa]
  408e92:	mov    r14,QWORD PTR [rax]
  408e95:	movsx  r15d,WORD PTR [rax+0x8]
  408e9a:	cmp    ebp,edx
  408e9c:	jl     409112 <grisu3_diy_fp_encode_double@@Base+0x322>
  408ea2:	lea    eax,[rdx+0x7]
  408ea5:	cmp    ebp,eax
  408ea7:	jg     4090f3 <grisu3_diy_fp_encode_double@@Base+0x303>
  408ead:	cmp    ebp,edx
  408eaf:	je     408f01 <grisu3_diy_fp_encode_double@@Base+0x111>
  408eb1:	sub    ebp,edx
  408eb3:	sub    ebp,0x1
  408eb6:	cmp    ebp,0x6
  408eb9:	ja     4090d4 <grisu3_diy_fp_encode_double@@Base+0x2e4>
  408ebf:	lea    rdx,[rip+0xa1da]        # 4130a0 <__data_start@@Base+0x20>
  408ec6:	movsxd rax,ebp
  408ec9:	mov    rdi,QWORD PTR [rsp]
  408ecd:	shl    rax,0x4
  408ed1:	add    rax,rdx
  408ed4:	mov    ecx,DWORD PTR [rax+0x8]
  408ed7:	mov    rdx,QWORD PTR [rax]
  408eda:	call   408cc0 <flatcc_emitter_copy_buffer@@Base+0x100>
  408edf:	mov    QWORD PTR [rsp+0x8],rdx
  408ee4:	lea    edx,[rbp+r13*1+0x1]
  408ee9:	mov    QWORD PTR [rsp],rax
  408eed:	mov    esi,DWORD PTR [rsp+0x8]
  408ef1:	lea    eax,[r12+0x4]
  408ef6:	mov    rdi,QWORD PTR [rsp]
  408efa:	cmp    edx,0x14
  408efd:	cmovge r12d,eax
  408f01:	mov    ecx,r15d
  408f04:	mov    rdx,r14
  408f07:	call   408cc0 <flatcc_emitter_copy_buffer@@Base+0x100>
  408f0c:	mov    QWORD PTR [rsp],rax
  408f10:	mov    QWORD PTR [rsp+0x8],rdx
  408f15:	xor    eax,eax
  408f17:	mov    rdi,QWORD PTR [rsp]
  408f1b:	mov    rsi,QWORD PTR [rsp+0x8]
  408f20:	test   r12d,r12d
  408f23:	setne  al
  408f26:	mov    ebp,DWORD PTR [rsp+0x8]
  408f2a:	lea    r12d,[r12+rax*1+0x8]
  408f2f:	call   408d50 <flatcc_emitter_copy_buffer@@Base+0x190>
  408f34:	mov    QWORD PTR [rsp+0x8],rdx
  408f39:	mov    edx,DWORD PTR [rsp+0x8]
  408f3d:	mov    QWORD PTR [rsp],rax
  408f41:	mov    rax,QWORD PTR [rsp]
  408f45:	lea    ecx,[rdx+0x40]
  408f48:	sub    ebp,edx
  408f4a:	shlx   edi,r12d,ebp
  408f4f:	cmp    ecx,0xfffffc0e
  408f55:	jl     409040 <grisu3_diy_fp_encode_double@@Base+0x250>
  408f5b:	mov    r8d,0x4
  408f61:	xor    r9d,r9d
  408f64:	xor    ecx,ecx
  408f66:	lea    r10d,[rdi+r8*1]
  408f6a:	add    edx,ecx
  408f6c:	shrx   rax,rax,rcx
  408f71:	cmp    ecx,r10d
  408f74:	jl     408f87 <grisu3_diy_fp_encode_double@@Base+0x197>
  408f76:	add    rax,0x1
  408f7a:	bt     rax,0x35
  408f7f:	jae    408f87 <grisu3_diy_fp_encode_double@@Base+0x197>
  408f81:	shr    rax,1
  408f84:	add    edx,0x1
  408f87:	movabs rcx,0x1fffffffffffff
  408f91:	cmp    rax,rcx
  408f94:	jbe    408fab <grisu3_diy_fp_encode_double@@Base+0x1bb>
  408f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408fa0:	shr    rax,1
  408fa3:	add    edx,0x1
  408fa6:	cmp    rax,rcx
  408fa9:	ja     408fa0 <grisu3_diy_fp_encode_double@@Base+0x1b0>
  408fab:	cmp    edx,0xfffffbce
  408fb1:	vxorpd xmm0,xmm0,xmm0
  408fb5:	jl     40900f <grisu3_diy_fp_encode_double@@Base+0x21f>
  408fb7:	je     408fe9 <grisu3_diy_fp_encode_double@@Base+0x1f9>
  408fb9:	bt     rax,0x34
  408fbe:	movabs rsi,0x10000000000000
  408fc8:	jae    408fdb <grisu3_diy_fp_encode_double@@Base+0x1eb>
  408fca:	jmp    409097 <grisu3_diy_fp_encode_double@@Base+0x2a7>
  408fcf:	nop
  408fd0:	test   rax,rsi
  408fd3:	jne    409080 <grisu3_diy_fp_encode_double@@Base+0x290>
  408fd9:	mov    edx,ecx
  408fdb:	lea    ecx,[rdx-0x1]
  408fde:	add    rax,rax
  408fe1:	cmp    ecx,0xfffffbce
  408fe7:	jne    408fd0 <grisu3_diy_fp_encode_double@@Base+0x1e0>
  408fe9:	movabs rdx,0x10000000000000
  408ff3:	and    rdx,rax
  408ff6:	movabs rcx,0xfffffffffffff
  409000:	and    rax,rcx
  409003:	or     rdx,rax
  409006:	mov    QWORD PTR [rsp],rdx
  40900a:	vmovsd xmm0,QWORD PTR [rsp]
  40900f:	sub    r8d,edi
  409012:	vmovsd QWORD PTR [rbx],xmm0
  409016:	cmp    r8d,r9d
  409019:	setge  al
  40901c:	cmp    r10d,r9d
  40901f:	setle  dl
  409022:	add    rsp,0x18
  409026:	or     eax,edx
  409028:	pop    rbx
  409029:	movzx  eax,al
  40902c:	pop    rbp
  40902d:	pop    r12
  40902f:	pop    r13
  409031:	pop    r14
  409033:	pop    r15
  409035:	ret    
  409036:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409040:	cmp    ecx,0xfffffbcf
  409046:	jl     409090 <grisu3_diy_fp_encode_double@@Base+0x2a0>
  409048:	lea    esi,[rdx+0x472]
  40904e:	mov    ecx,0x40
  409053:	sub    ecx,esi
  409055:	cmp    ecx,0x3c
  409058:	jle    4090a6 <grisu3_diy_fp_encode_double@@Base+0x2b6>
  40905a:	mov    ecx,0x2
  40905f:	sub    ecx,esi
  409061:	sarx   edi,edi,ecx
  409066:	shrx   rax,rax,rcx
  40906b:	add    edx,ecx
  40906d:	add    edi,0x9
  409070:	xor    r9d,r9d
  409073:	xor    r8d,r8d
  409076:	mov    ecx,0x3e
  40907b:	jmp    408f66 <grisu3_diy_fp_encode_double@@Base+0x176>
  409080:	add    edx,0x432
  409086:	shl    rdx,0x34
  40908a:	jmp    408ff6 <grisu3_diy_fp_encode_double@@Base+0x206>
  40908f:	nop
  409090:	mov    ecx,0x2
  409095:	jmp    409061 <grisu3_diy_fp_encode_double@@Base+0x271>
  409097:	add    edx,0x433
  40909d:	shl    rdx,0x34
  4090a1:	jmp    408ff6 <grisu3_diy_fp_encode_double@@Base+0x206>
  4090a6:	mov    r8d,0x3f
  4090ac:	mov    r9d,0x1
  4090b2:	sub    r8d,esi
  4090b5:	mov    esi,r8d
  4090b8:	mov    r8d,0x8
  4090be:	shlx   r9,r9,rsi
  4090c3:	shlx   r8,r8,rsi
  4090c8:	and    r9,rax
  4090cb:	shl    r9d,0x3
  4090cf:	jmp    408f66 <grisu3_diy_fp_encode_double@@Base+0x176>
  4090d4:	lea    rcx,[rip+0x5945]        # 40ea20 <flatcc_builder_padding_base@@Base+0xbe0>
  4090db:	lea    rsi,[rip+0x4fce]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  4090e2:	lea    rdi,[rip+0x516e]        # 40e257 <flatcc_builder_padding_base@@Base+0x417>
  4090e9:	mov    edx,0xb9
  4090ee:	call   403070 <__assert_fail@plt>
  4090f3:	lea    rcx,[rip+0x5906]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  4090fa:	lea    rsi,[rip+0x4faf]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  409101:	lea    rdi,[rip+0x5134]        # 40e23c <flatcc_builder_padding_base@@Base+0x3fc>
  409108:	mov    edx,0x59
  40910d:	call   403070 <__assert_fail@plt>
  409112:	lea    rcx,[rip+0x58e7]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  409119:	lea    rsi,[rip+0x4f90]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  409120:	lea    rdi,[rip+0x5106]        # 40e22d <flatcc_builder_padding_base@@Base+0x3ed>
  409127:	mov    edx,0x58
  40912c:	call   403070 <__assert_fail@plt>
  409131:	lea    rcx,[rip+0x58c8]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  409138:	lea    rsi,[rip+0x4f71]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  40913f:	lea    rdi,[rip+0x5002]        # 40e148 <flatcc_builder_padding_base@@Base+0x308>
  409146:	mov    edx,0x51
  40914b:	call   403070 <__assert_fail@plt>
  409150:	lea    rcx,[rip+0x58a9]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  409157:	lea    rsi,[rip+0x4f52]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  40915e:	lea    rdi,[rip+0x4fc3]        # 40e128 <flatcc_builder_padding_base@@Base+0x2e8>
  409165:	mov    edx,0x50
  40916a:	call   403070 <__assert_fail@plt>
  40916f:	nop
  409170:	push   r13
  409172:	push   r12
  409174:	lea    r8,[rdi+0x3e9]
  40917b:	push   rbp
  40917c:	push   rbx
  40917d:	sub    rsp,0x18
  409181:	mov    QWORD PTR [rdx],0x0
  409188:	mov    rax,QWORD PTR fs:0x28
  409191:	mov    QWORD PTR [rsp+0x8],rax
  409196:	xor    eax,eax
  409198:	movsxd rax,esi
  40919b:	cmp    esi,0x3e8
  4091a1:	lea    rax,[rdi+rax*1+0x1]
  4091a6:	cmovle r8,rax
  4091aa:	cmp    r8,rdi
  4091ad:	je     4095a0 <grisu3_diy_fp_encode_double@@Base+0x7b0>
  4091b3:	movzx  eax,BYTE PTR [rdi]
  4091b6:	xor    r13d,r13d
  4091b9:	mov    r12,rdx
  4091bc:	mov    rbp,rdi
  4091bf:	mov    rdx,rdi
  4091c2:	cmp    al,0x2d
  4091c4:	je     409350 <grisu3_diy_fp_encode_double@@Base+0x560>
  4091ca:	cmp    al,0x30
  4091cc:	je     40936b <grisu3_diy_fp_encode_double@@Base+0x57b>
  4091d2:	lea    ecx,[rax-0x31]
  4091d5:	cmp    cl,0x8
  4091d8:	ja     4092e0 <grisu3_diy_fp_encode_double@@Base+0x4f0>
  4091de:	lea    r9,[rdx+0x1]
  4091e2:	movsx  edi,al
  4091e5:	sub    edi,0x30
  4091e8:	cmp    r8,r9
  4091eb:	movsxd rdi,edi
  4091ee:	je     409957 <grisu3_diy_fp_encode_double@@Base+0xb67>
  4091f4:	movsx  rax,BYTE PTR [rdx+0x1]
  4091f9:	lea    edx,[rax-0x30]
  4091fc:	mov    rbx,r9
  4091ff:	movabs rcx,0x1999999999999998
  409209:	cmp    dl,0x9
  40920c:	jbe    409221 <grisu3_diy_fp_encode_double@@Base+0x431>
  40920e:	jmp    409950 <grisu3_diy_fp_encode_double@@Base+0xb60>
  409213:	nop    DWORD PTR [rax+rax*1+0x0]
  409218:	cmp    rdi,rcx
  40921b:	ja     409310 <grisu3_diy_fp_encode_double@@Base+0x520>
  409221:	add    rbx,0x1
  409225:	lea    rdx,[rdi+rdi*4]
  409229:	cmp    r8,rbx
  40922c:	lea    rdi,[rax+rdx*2-0x30]
  409231:	je     4098ef <grisu3_diy_fp_encode_double@@Base+0xaff>
  409237:	movsx  rax,BYTE PTR [rbx]
  40923b:	lea    edx,[rax-0x30]
  40923e:	cmp    dl,0x9
  409241:	jbe    409218 <grisu3_diy_fp_encode_double@@Base+0x428>
  409243:	mov    edx,ebx
  409245:	sub    edx,r9d
  409248:	lea    r9d,[rax-0x31]
  40924c:	xor    ecx,ecx
  40924e:	xor    esi,esi
  409250:	cmp    r9b,0x8
  409254:	jbe    4093c3 <grisu3_diy_fp_encode_double@@Base+0x5d3>
  40925a:	cmp    al,0x2e
  40925c:	je     409460 <grisu3_diy_fp_encode_double@@Base+0x670>
  409262:	add    esi,edx
  409264:	cmp    r8,rbx
  409267:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  40926d:	or     eax,0x20
  409270:	cmp    al,0x65
  409272:	je     4094e8 <grisu3_diy_fp_encode_double@@Base+0x6f8>
  409278:	test   rdi,rdi
  40927b:	je     409428 <grisu3_diy_fp_encode_double@@Base+0x638>
  409281:	cmp    esi,0xfffffebc
  409287:	jl     409428 <grisu3_diy_fp_encode_double@@Base+0x638>
  40928d:	cmp    esi,0x136
  409293:	jg     409450 <grisu3_diy_fp_encode_double@@Base+0x660>
  409299:	movabs rax,0x1fffffffffffff
  4092a3:	cmp    rdi,rax
  4092a6:	ja     4095c0 <grisu3_diy_fp_encode_double@@Base+0x7d0>
  4092ac:	cmp    esi,0x16
  4092af:	ja     4095c0 <grisu3_diy_fp_encode_double@@Base+0x7d0>
  4092b5:	sub    esi,edx
  4092b7:	vxorpd xmm0,xmm0,xmm0
  4092bb:	lea    eax,[rsi+0x16]
  4092be:	cmp    eax,0x2c
  4092c1:	vcvtsi2sd xmm0,xmm0,rdi
  4092c6:	ja     40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4092cc:	lea    rdx,[rip+0x520d]        # 40e4e0 <flatcc_builder_padding_base@@Base+0x6a0>
  4092d3:	movsxd rax,DWORD PTR [rdx+rax*4]
  4092d7:	add    rax,rdx
  4092da:	jmp    rax
  4092dc:	nop    DWORD PTR [rax+0x0]
  4092e0:	test   r13d,r13d
  4092e3:	mov    ebx,0x0
  4092e8:	cmove  rbx,rbp
  4092ec:	mov    rcx,QWORD PTR [rsp+0x8]
  4092f1:	xor    rcx,QWORD PTR fs:0x28
  4092fa:	mov    rax,rbx
  4092fd:	jne    40996a <grisu3_diy_fp_encode_double@@Base+0xb7a>
  409303:	add    rsp,0x18
  409307:	pop    rbx
  409308:	pop    rbp
  409309:	pop    r12
  40930b:	pop    r13
  40930d:	ret    
  40930e:	xchg   ax,ax
  409310:	xor    edx,edx
  409312:	cmp    al,0x34
  409314:	setg   dl
  409317:	add    rdi,rdx
  40931a:	mov    edx,ebx
  40931c:	sub    edx,r9d
  40931f:	cmp    al,0x30
  409321:	jne    40996f <grisu3_diy_fp_encode_double@@Base+0xb7f>
  409327:	xor    esi,esi
  409329:	jmp    409337 <grisu3_diy_fp_encode_double@@Base+0x547>
  40932b:	nop    DWORD PTR [rax+rax*1+0x0]
  409330:	movzx  eax,BYTE PTR [rbx]
  409333:	cmp    al,0x30
  409335:	jne    4093b0 <grisu3_diy_fp_encode_double@@Base+0x5c0>
  409337:	add    rbx,0x1
  40933b:	add    esi,0x1
  40933e:	cmp    r8,rbx
  409341:	jne    409330 <grisu3_diy_fp_encode_double@@Base+0x540>
  409343:	xor    ebx,ebx
  409345:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  409347:	nop    WORD PTR [rax+rax*1+0x0]
  409350:	lea    rdx,[rdi+0x1]
  409354:	cmp    r8,rdx
  409357:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409359:	movzx  eax,BYTE PTR [rdi+0x1]
  40935d:	mov    r13d,0x1
  409363:	cmp    al,0x30
  409365:	jne    4091d2 <grisu3_diy_fp_encode_double@@Base+0x3e2>
  40936b:	lea    r9,[rdx+0x1]
  40936f:	cmp    r8,r9
  409372:	je     4095b3 <grisu3_diy_fp_encode_double@@Base+0x7c3>
  409378:	movsx  rax,BYTE PTR [rdx+0x1]
  40937d:	mov    edx,eax
  40937f:	or     edx,0x20
  409382:	cmp    dl,0x78
  409385:	je     4095f1 <grisu3_diy_fp_encode_double@@Base+0x801>
  40938b:	cmp    al,0x30
  40938d:	jne    4093a5 <grisu3_diy_fp_encode_double@@Base+0x5b5>
  40938f:	nop
  409390:	add    r9,0x1
  409394:	cmp    r8,r9
  409397:	je     4095b0 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  40939d:	movsx  rax,BYTE PTR [r9]
  4093a1:	cmp    al,0x30
  4093a3:	je     409390 <grisu3_diy_fp_encode_double@@Base+0x5a0>
  4093a5:	xor    edi,edi
  4093a7:	jmp    4091f9 <grisu3_diy_fp_encode_double@@Base+0x409>
  4093ac:	nop    DWORD PTR [rax+0x0]
  4093b0:	mov    ecx,0x1
  4093b5:	lea    r9d,[rax-0x31]
  4093b9:	cmp    r9b,0x8
  4093bd:	ja     40925a <grisu3_diy_fp_encode_double@@Base+0x46a>
  4093c3:	lea    rcx,[rbx+0x1]
  4093c7:	add    esi,0x1
  4093ca:	cmp    r8,rcx
  4093cd:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  4093d3:	movzx  eax,BYTE PTR [rbx+0x1]
  4093d7:	lea    r9d,[rax-0x30]
  4093db:	cmp    r9b,0x9
  4093df:	jbe    409401 <grisu3_diy_fp_encode_double@@Base+0x611>
  4093e1:	jmp    409830 <grisu3_diy_fp_encode_double@@Base+0xa40>
  4093e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4093f0:	movzx  eax,BYTE PTR [rcx]
  4093f3:	lea    r9d,[rax-0x30]
  4093f7:	cmp    r9b,0x9
  4093fb:	ja     409830 <grisu3_diy_fp_encode_double@@Base+0xa40>
  409401:	add    rcx,0x1
  409405:	add    esi,0x1
  409408:	cmp    r8,rcx
  40940b:	jne    4093f0 <grisu3_diy_fp_encode_double@@Base+0x600>
  40940d:	xor    ebx,ebx
  40940f:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  409414:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5ba4]        # 40efc0 <flatcc_builder_padding_base@@Base+0x1180>
  40941c:	vmovsd QWORD PTR [r12],xmm0
  409422:	nop    WORD PTR [rax+rax*1+0x0]
  409428:	test   r13d,r13d
  40942b:	je     4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  409431:	vmovsd xmm0,QWORD PTR [r12]
  409437:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x5c31]        # 40f070 <flatcc_builder_padding_base@@Base+0x1230>
  40943f:	vmovsd QWORD PTR [r12],xmm0
  409445:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  40944a:	nop    WORD PTR [rax+rax*1+0x0]
  409450:	vmovsd xmm1,QWORD PTR [rip+0x5b58]        # 40efb0 <flatcc_builder_padding_base@@Base+0x1170>
  409458:	vmovsd QWORD PTR [r12],xmm1
  40945e:	jmp    409428 <grisu3_diy_fp_encode_double@@Base+0x638>
  409460:	movsx  rax,BYTE PTR [rbx+0x1]
  409465:	lea    r9,[rbx+0x1]
  409469:	lea    r10d,[rax-0x30]
  40946d:	cmp    r10b,0x9
  409471:	ja     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409477:	cmp    r8,r9
  40947a:	je     409963 <grisu3_diy_fp_encode_double@@Base+0xb73>
  409480:	movabs r11,0x1999999999999998
  40948a:	mov    rbx,r9
  40948d:	cmp    rdi,r11
  409490:	jbe    4094bb <grisu3_diy_fp_encode_double@@Base+0x6cb>
  409492:	jmp    40995e <grisu3_diy_fp_encode_double@@Base+0xb6e>
  409497:	nop    WORD PTR [rax+rax*1+0x0]
  4094a0:	movsx  rax,BYTE PTR [rbx]
  4094a4:	lea    r10d,[rax-0x30]
  4094a8:	cmp    r10b,0x9
  4094ac:	ja     40986a <grisu3_diy_fp_encode_double@@Base+0xa7a>
  4094b2:	cmp    rdi,r11
  4094b5:	ja     4098fd <grisu3_diy_fp_encode_double@@Base+0xb0d>
  4094bb:	add    rbx,0x1
  4094bf:	lea    rdi,[rdi+rdi*4]
  4094c3:	sub    esi,0x1
  4094c6:	cmp    r8,rbx
  4094c9:	lea    rdi,[rax+rdi*2-0x30]
  4094ce:	jne    4094a0 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  4094d0:	mov    eax,r8d
  4094d3:	sub    eax,r9d
  4094d6:	mov    r9,r8
  4094d9:	add    edx,eax
  4094db:	add    esi,edx
  4094dd:	jmp    4095bb <grisu3_diy_fp_encode_double@@Base+0x7cb>
  4094e2:	nop    WORD PTR [rax+rax*1+0x0]
  4094e8:	mov    rax,r8
  4094eb:	sub    rax,rbx
  4094ee:	cmp    rax,0x1
  4094f2:	jle    409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  4094f8:	movsx  r9d,BYTE PTR [rbx+0x1]
  4094fd:	cmp    r9b,0x2b
  409501:	je     409850 <grisu3_diy_fp_encode_double@@Base+0xa60>
  409507:	cmp    r9b,0x2d
  40950b:	je     409933 <grisu3_diy_fp_encode_double@@Base+0xb43>
  409511:	lea    rax,[rbx+0x1]
  409515:	xor    r10d,r10d
  409518:	lea    r11d,[r9-0x30]
  40951c:	cmp    r11b,0x9
  409520:	ja     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409526:	lea    rbx,[rax+0x1]
  40952a:	sub    r9d,0x30
  40952e:	cmp    r8,rbx
  409531:	je     40957f <grisu3_diy_fp_encode_double@@Base+0x78f>
  409533:	movsx  eax,BYTE PTR [rax+0x1]
  409537:	lea    r11d,[rax-0x30]
  40953b:	cmp    r11b,0x9
  40953f:	jbe    409561 <grisu3_diy_fp_encode_double@@Base+0x771>
  409541:	jmp    40983d <grisu3_diy_fp_encode_double@@Base+0xa4d>
  409546:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409550:	movsx  eax,BYTE PTR [rbx]
  409553:	lea    r11d,[rax-0x30]
  409557:	cmp    r11b,0x9
  40955b:	ja     40983d <grisu3_diy_fp_encode_double@@Base+0xa4d>
  409561:	cmp    r9d,0x7fff
  409568:	jg     409573 <grisu3_diy_fp_encode_double@@Base+0x783>
  40956a:	lea    r9d,[r9+r9*4]
  40956e:	lea    r9d,[rax+r9*2-0x30]
  409573:	add    rbx,0x1
  409577:	cmp    r8,rbx
  40957a:	jne    409550 <grisu3_diy_fp_encode_double@@Base+0x760>
  40957c:	mov    rbx,r8
  40957f:	test   r10d,r10d
  409582:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409588:	sub    esi,r9d
  40958b:	cmp    r8,rbx
  40958e:	jne    409278 <grisu3_diy_fp_encode_double@@Base+0x488>
  409594:	xor    ebx,ebx
  409596:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  40959b:	nop    DWORD PTR [rax+rax*1+0x0]
  4095a0:	mov    rbx,r8
  4095a3:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4095a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4095b0:	mov    r9,r8
  4095b3:	xor    edx,edx
  4095b5:	xor    edi,edi
  4095b7:	mov    esi,edx
  4095b9:	xor    ecx,ecx
  4095bb:	mov    rbx,r9
  4095be:	jmp    40958b <grisu3_diy_fp_encode_double@@Base+0x79b>
  4095c0:	mov    r8,r12
  4095c3:	call   408df0 <grisu3_diy_fp_encode_double@@Base>
  4095c8:	test   eax,eax
  4095ca:	jne    409428 <grisu3_diy_fp_encode_double@@Base+0x638>
  4095d0:	mov    rsi,rsp
  4095d3:	mov    rdi,rbp
  4095d6:	call   403040 <strtod@plt>
  4095db:	mov    rax,QWORD PTR [rsp]
  4095df:	vmovsd QWORD PTR [r12],xmm0
  4095e5:	cmp    rbx,rax
  4095e8:	cmova  rbx,rax
  4095ec:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4095f1:	mov    rbx,rbp
  4095f4:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4095f9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59c7]        # 40efc8 <flatcc_builder_padding_base@@Base+0x1188>
  409601:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409606:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59c2]        # 40efd0 <flatcc_builder_padding_base@@Base+0x1190>
  40960e:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409613:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59bd]        # 40efd8 <flatcc_builder_padding_base@@Base+0x1198>
  40961b:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409620:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59b8]        # 40efe0 <flatcc_builder_padding_base@@Base+0x11a0>
  409628:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40962d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59b3]        # 40efe8 <flatcc_builder_padding_base@@Base+0x11a8>
  409635:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40963a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59ae]        # 40eff0 <flatcc_builder_padding_base@@Base+0x11b0>
  409642:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409647:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59a9]        # 40eff8 <flatcc_builder_padding_base@@Base+0x11b8>
  40964f:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409654:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x59a4]        # 40f000 <flatcc_builder_padding_base@@Base+0x11c0>
  40965c:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409661:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x599f]        # 40f008 <flatcc_builder_padding_base@@Base+0x11c8>
  409669:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40966e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x599a]        # 40f010 <flatcc_builder_padding_base@@Base+0x11d0>
  409676:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40967b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5995]        # 40f018 <flatcc_builder_padding_base@@Base+0x11d8>
  409683:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409688:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5990]        # 40f020 <flatcc_builder_padding_base@@Base+0x11e0>
  409690:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409695:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x598b]        # 40f028 <flatcc_builder_padding_base@@Base+0x11e8>
  40969d:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096a2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5986]        # 40f030 <flatcc_builder_padding_base@@Base+0x11f0>
  4096aa:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096af:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5981]        # 40f038 <flatcc_builder_padding_base@@Base+0x11f8>
  4096b7:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096bc:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x597c]        # 40f040 <flatcc_builder_padding_base@@Base+0x1200>
  4096c4:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096c9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5977]        # 40f048 <flatcc_builder_padding_base@@Base+0x1208>
  4096d1:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096d6:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5972]        # 40f050 <flatcc_builder_padding_base@@Base+0x1210>
  4096de:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096e3:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x596d]        # 40f058 <flatcc_builder_padding_base@@Base+0x1218>
  4096eb:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096f0:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5968]        # 40f060 <flatcc_builder_padding_base@@Base+0x1220>
  4096f8:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4096fd:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x58b3]        # 40efb8 <flatcc_builder_padding_base@@Base+0x1178>
  409705:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40970a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x594e]        # 40f060 <flatcc_builder_padding_base@@Base+0x1220>
  409712:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409717:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5939]        # 40f058 <flatcc_builder_padding_base@@Base+0x1218>
  40971f:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409724:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5924]        # 40f050 <flatcc_builder_padding_base@@Base+0x1210>
  40972c:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409731:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x590f]        # 40f048 <flatcc_builder_padding_base@@Base+0x1208>
  409739:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40973e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58fa]        # 40f040 <flatcc_builder_padding_base@@Base+0x1200>
  409746:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40974b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58e5]        # 40f038 <flatcc_builder_padding_base@@Base+0x11f8>
  409753:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409758:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58d0]        # 40f030 <flatcc_builder_padding_base@@Base+0x11f0>
  409760:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409765:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58bb]        # 40f028 <flatcc_builder_padding_base@@Base+0x11e8>
  40976d:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409772:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x58a6]        # 40f020 <flatcc_builder_padding_base@@Base+0x11e0>
  40977a:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40977f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5891]        # 40f018 <flatcc_builder_padding_base@@Base+0x11d8>
  409787:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40978c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x587c]        # 40f010 <flatcc_builder_padding_base@@Base+0x11d0>
  409794:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409799:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5867]        # 40f008 <flatcc_builder_padding_base@@Base+0x11c8>
  4097a1:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097a6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5852]        # 40f000 <flatcc_builder_padding_base@@Base+0x11c0>
  4097ae:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097b3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x583d]        # 40eff8 <flatcc_builder_padding_base@@Base+0x11b8>
  4097bb:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097c0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5828]        # 40eff0 <flatcc_builder_padding_base@@Base+0x11b0>
  4097c8:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097cd:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5813]        # 40efe8 <flatcc_builder_padding_base@@Base+0x11a8>
  4097d5:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097da:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x57fe]        # 40efe0 <flatcc_builder_padding_base@@Base+0x11a0>
  4097e2:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097e7:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x57e9]        # 40efd8 <flatcc_builder_padding_base@@Base+0x1198>
  4097ef:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  4097f4:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x57d4]        # 40efd0 <flatcc_builder_padding_base@@Base+0x1190>
  4097fc:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409801:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x57bf]        # 40efc8 <flatcc_builder_padding_base@@Base+0x1188>
  409809:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40980e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x57aa]        # 40efc0 <flatcc_builder_padding_base@@Base+0x1180>
  409816:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  40981b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5795]        # 40efb8 <flatcc_builder_padding_base@@Base+0x1178>
  409823:	jmp    40941c <grisu3_diy_fp_encode_double@@Base+0x62c>
  409828:	nop    DWORD PTR [rax+rax*1+0x0]
  409830:	mov    rbx,rcx
  409833:	mov    ecx,0x1
  409838:	jmp    40925a <grisu3_diy_fp_encode_double@@Base+0x46a>
  40983d:	test   r10d,r10d
  409840:	jne    409588 <grisu3_diy_fp_encode_double@@Base+0x798>
  409846:	add    esi,r9d
  409849:	jmp    409278 <grisu3_diy_fp_encode_double@@Base+0x488>
  40984e:	xchg   ax,ax
  409850:	lea    rax,[rbx+0x2]
  409854:	cmp    r8,rax
  409857:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  40985d:	movsx  r9d,BYTE PTR [rbx+0x2]
  409862:	xor    r10d,r10d
  409865:	jmp    409518 <grisu3_diy_fp_encode_double@@Base+0x728>
  40986a:	mov    rax,rbx
  40986d:	sub    rax,r9
  409870:	add    edx,eax
  409872:	jmp    409888 <grisu3_diy_fp_encode_double@@Base+0xa98>
  409874:	nop    DWORD PTR [rax+0x0]
  409878:	add    rbx,0x1
  40987c:	add    esi,0x1
  40987f:	cmp    r8,rbx
  409882:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409888:	movzx  eax,BYTE PTR [rbx]
  40988b:	cmp    al,0x30
  40988d:	je     409878 <grisu3_diy_fp_encode_double@@Base+0xa88>
  40988f:	lea    r9d,[rax-0x31]
  409893:	cmp    r9b,0x8
  409897:	ja     4098e8 <grisu3_diy_fp_encode_double@@Base+0xaf8>
  409899:	lea    rcx,[rbx+0x1]
  40989d:	cmp    r8,rcx
  4098a0:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  4098a6:	movzx  eax,BYTE PTR [rbx+0x1]
  4098aa:	lea    r9d,[rax-0x30]
  4098ae:	cmp    r9b,0x9
  4098b2:	jbe    4098cd <grisu3_diy_fp_encode_double@@Base+0xadd>
  4098b4:	jmp    4098dd <grisu3_diy_fp_encode_double@@Base+0xaed>
  4098b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4098c0:	movzx  eax,BYTE PTR [rcx]
  4098c3:	lea    r9d,[rax-0x30]
  4098c7:	cmp    r9b,0x9
  4098cb:	ja     4098dd <grisu3_diy_fp_encode_double@@Base+0xaed>
  4098cd:	add    rcx,0x1
  4098d1:	cmp    r8,rcx
  4098d4:	jne    4098c0 <grisu3_diy_fp_encode_double@@Base+0xad0>
  4098d6:	xor    ebx,ebx
  4098d8:	jmp    4092ec <grisu3_diy_fp_encode_double@@Base+0x4fc>
  4098dd:	mov    rbx,rcx
  4098e0:	mov    ecx,0x1
  4098e5:	nop    DWORD PTR [rax]
  4098e8:	add    esi,edx
  4098ea:	jmp    40926d <grisu3_diy_fp_encode_double@@Base+0x47d>
  4098ef:	mov    edx,r8d
  4098f2:	sub    edx,r9d
  4098f5:	mov    r9,r8
  4098f8:	jmp    4095b7 <grisu3_diy_fp_encode_double@@Base+0x7c7>
  4098fd:	mov    r10d,ebx
  409900:	sub    r10d,r9d
  409903:	mov    r9d,r10d
  409906:	test   ecx,ecx
  409908:	je     409912 <grisu3_diy_fp_encode_double@@Base+0xb22>
  40990a:	add    edx,r9d
  40990d:	jmp    409888 <grisu3_diy_fp_encode_double@@Base+0xa98>
  409912:	cmp    al,0x34
  409914:	setg   al
  409917:	add    edx,r9d
  40991a:	movzx  eax,al
  40991d:	add    rdi,rax
  409920:	cmp    r8,rbx
  409923:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409929:	mov    ecx,0x1
  40992e:	jmp    409888 <grisu3_diy_fp_encode_double@@Base+0xa98>
  409933:	lea    rax,[rbx+0x2]
  409937:	cmp    r8,rax
  40993a:	je     409343 <grisu3_diy_fp_encode_double@@Base+0x553>
  409940:	movsx  r9d,BYTE PTR [rbx+0x2]
  409945:	mov    r10d,0x1
  40994b:	jmp    409518 <grisu3_diy_fp_encode_double@@Base+0x728>
  409950:	xor    edx,edx
  409952:	jmp    409248 <grisu3_diy_fp_encode_double@@Base+0x458>
  409957:	xor    edx,edx
  409959:	jmp    4095b7 <grisu3_diy_fp_encode_double@@Base+0x7c7>
  40995e:	xor    r9d,r9d
  409961:	jmp    409906 <grisu3_diy_fp_encode_double@@Base+0xb16>
  409963:	xor    eax,eax
  409965:	jmp    4094d9 <grisu3_diy_fp_encode_double@@Base+0x6e9>
  40996a:	call   403060 <__stack_chk_fail@plt>
  40996f:	mov    ecx,0x1
  409974:	xor    esi,esi
  409976:	jmp    4093b5 <grisu3_diy_fp_encode_double@@Base+0x5c5>
  40997b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409980 <flatcc_json_parser_error_string@@Base>:
  409980:	cmp    edi,0x22
  409983:	ja     409bd0 <flatcc_json_parser_error_string@@Base+0x250>
  409989:	lea    rdx,[rip+0x4c04]        # 40e594 <flatcc_builder_padding_base@@Base+0x754>
  409990:	mov    edi,edi
  409992:	movsxd rax,DWORD PTR [rdx+rdi*4]
  409996:	add    rax,rdx
  409999:	jmp    rax
  40999b:	nop    DWORD PTR [rax+rax*1+0x0]
  4099a0:	lea    rax,[rip+0x48cc]        # 40e273 <flatcc_builder_padding_base@@Base+0x433>
  4099a7:	ret    
  4099a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4099b0:	lea    rax,[rip+0x4aee]        # 40e4a5 <flatcc_builder_padding_base@@Base+0x665>
  4099b7:	ret    
  4099b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4099c0:	lea    rax,[rip+0x4ad0]        # 40e497 <flatcc_builder_padding_base@@Base+0x657>
  4099c7:	ret    
  4099c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4099d0:	lea    rax,[rip+0x4aa6]        # 40e47d <flatcc_builder_padding_base@@Base+0x63d>
  4099d7:	ret    
  4099d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4099e0:	lea    rax,[rip+0x4a7f]        # 40e466 <flatcc_builder_padding_base@@Base+0x626>
  4099e7:	ret    
  4099e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4099f0:	lea    rax,[rip+0x4a52]        # 40e449 <flatcc_builder_padding_base@@Base+0x609>
  4099f7:	ret    
  4099f8:	nop    DWORD PTR [rax+rax*1+0x0]
  409a00:	lea    rax,[rip+0x4a2b]        # 40e432 <flatcc_builder_padding_base@@Base+0x5f2>
  409a07:	ret    
  409a08:	nop    DWORD PTR [rax+rax*1+0x0]
  409a10:	lea    rax,[rip+0x4a01]        # 40e418 <flatcc_builder_padding_base@@Base+0x5d8>
  409a17:	ret    
  409a18:	nop    DWORD PTR [rax+rax*1+0x0]
  409a20:	lea    rax,[rip+0x49d6]        # 40e3fd <flatcc_builder_padding_base@@Base+0x5bd>
  409a27:	ret    
  409a28:	nop    DWORD PTR [rax+rax*1+0x0]
  409a30:	lea    rax,[rip+0x4769]        # 40e1a0 <flatcc_builder_padding_base@@Base+0x360>
  409a37:	ret    
  409a38:	nop    DWORD PTR [rax+rax*1+0x0]
  409a40:	lea    rax,[rip+0x4999]        # 40e3e0 <flatcc_builder_padding_base@@Base+0x5a0>
  409a47:	ret    
  409a48:	nop    DWORD PTR [rax+rax*1+0x0]
  409a50:	lea    rax,[rip+0x4975]        # 40e3cc <flatcc_builder_padding_base@@Base+0x58c>
  409a57:	ret    
  409a58:	nop    DWORD PTR [rax+rax*1+0x0]
  409a60:	lea    rax,[rip+0x4711]        # 40e178 <flatcc_builder_padding_base@@Base+0x338>
  409a67:	ret    
  409a68:	nop    DWORD PTR [rax+rax*1+0x0]
  409a70:	lea    rax,[rip+0x4946]        # 40e3bd <flatcc_builder_padding_base@@Base+0x57d>
  409a77:	ret    
  409a78:	nop    DWORD PTR [rax+rax*1+0x0]
  409a80:	lea    rax,[rip+0x4926]        # 40e3ad <flatcc_builder_padding_base@@Base+0x56d>
  409a87:	ret    
  409a88:	nop    DWORD PTR [rax+rax*1+0x0]
  409a90:	lea    rax,[rip+0x4902]        # 40e399 <flatcc_builder_padding_base@@Base+0x559>
  409a97:	ret    
  409a98:	nop    DWORD PTR [rax+rax*1+0x0]
  409aa0:	lea    rax,[rip+0x48e5]        # 40e38c <flatcc_builder_padding_base@@Base+0x54c>
  409aa7:	ret    
  409aa8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ab0:	lea    rax,[rip+0x48c6]        # 40e37d <flatcc_builder_padding_base@@Base+0x53d>
  409ab7:	ret    
  409ab8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ac0:	lea    rax,[rip+0x48a4]        # 40e36b <flatcc_builder_padding_base@@Base+0x52b>
  409ac7:	ret    
  409ac8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ad0:	lea    rax,[rip+0x4884]        # 40e35b <flatcc_builder_padding_base@@Base+0x51b>
  409ad7:	ret    
  409ad8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ae0:	lea    rax,[rip+0x4861]        # 40e348 <flatcc_builder_padding_base@@Base+0x508>
  409ae7:	ret    
  409ae8:	nop    DWORD PTR [rax+rax*1+0x0]
  409af0:	lea    rax,[rip+0x4838]        # 40e32f <flatcc_builder_padding_base@@Base+0x4ef>
  409af7:	ret    
  409af8:	nop    DWORD PTR [rax+rax*1+0x0]
  409b00:	lea    rax,[rip+0x4819]        # 40e320 <flatcc_builder_padding_base@@Base+0x4e0>
  409b07:	ret    
  409b08:	nop    DWORD PTR [rax+rax*1+0x0]
  409b10:	lea    rax,[rip+0x47f8]        # 40e30f <flatcc_builder_padding_base@@Base+0x4cf>
  409b17:	ret    
  409b18:	nop    DWORD PTR [rax+rax*1+0x0]
  409b20:	lea    rax,[rip+0x47d9]        # 40e300 <flatcc_builder_padding_base@@Base+0x4c0>
  409b27:	ret    
  409b28:	nop    DWORD PTR [rax+rax*1+0x0]
  409b30:	lea    rax,[rip+0x47b7]        # 40e2ee <flatcc_builder_padding_base@@Base+0x4ae>
  409b37:	ret    
  409b38:	nop    DWORD PTR [rax+rax*1+0x0]
  409b40:	lea    rax,[rip+0x4796]        # 40e2dd <flatcc_builder_padding_base@@Base+0x49d>
  409b47:	ret    
  409b48:	nop    DWORD PTR [rax+rax*1+0x0]
  409b50:	lea    rax,[rip+0x477c]        # 40e2d3 <flatcc_builder_padding_base@@Base+0x493>
  409b57:	ret    
  409b58:	nop    DWORD PTR [rax+rax*1+0x0]
  409b60:	lea    rax,[rip+0x4763]        # 40e2ca <flatcc_builder_padding_base@@Base+0x48a>
  409b67:	ret    
  409b68:	nop    DWORD PTR [rax+rax*1+0x0]
  409b70:	lea    rax,[rip+0x4743]        # 40e2ba <flatcc_builder_padding_base@@Base+0x47a>
  409b77:	ret    
  409b78:	nop    DWORD PTR [rax+rax*1+0x0]
  409b80:	lea    rax,[rip+0x471e]        # 40e2a5 <flatcc_builder_padding_base@@Base+0x465>
  409b87:	ret    
  409b88:	nop    DWORD PTR [rax+rax*1+0x0]
  409b90:	lea    rax,[rip+0x46ff]        # 40e296 <flatcc_builder_padding_base@@Base+0x456>
  409b97:	ret    
  409b98:	nop    DWORD PTR [rax+rax*1+0x0]
  409ba0:	lea    rax,[rip+0x46e0]        # 40e287 <flatcc_builder_padding_base@@Base+0x447>
  409ba7:	ret    
  409ba8:	nop    DWORD PTR [rax+rax*1+0x0]
  409bb0:	lea    rax,[rip+0x46c3]        # 40e27a <flatcc_builder_padding_base@@Base+0x43a>
  409bb7:	ret    
  409bb8:	nop    DWORD PTR [rax+rax*1+0x0]
  409bc0:	lea    rax,[rip+0x46af]        # 40e276 <flatcc_builder_padding_base@@Base+0x436>
  409bc7:	ret    
  409bc8:	nop    DWORD PTR [rax+rax*1+0x0]
  409bd0:	lea    rax,[rip+0x48dc]        # 40e4b3 <flatcc_builder_padding_base@@Base+0x673>
  409bd7:	ret    
  409bd8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409be0 <flatcc_json_parser_set_error@@Base>:
  409be0:	mov    rax,rdx
  409be3:	mov    edx,DWORD PTR [rdi+0x20]
  409be6:	test   edx,edx
  409be8:	jne    409bfe <flatcc_json_parser_set_error@@Base+0x1e>
  409bea:	mov    DWORD PTR [rdi+0x20],ecx
  409bed:	mov    rcx,rsi
  409bf0:	sub    rcx,QWORD PTR [rdi+0x8]
  409bf4:	mov    QWORD PTR [rdi+0x38],rsi
  409bf8:	add    ecx,0x1
  409bfb:	mov    DWORD PTR [rdi+0x1c],ecx
  409bfe:	repz ret 

0000000000409c00 <flatcc_json_parser_string_part@@Base>:
  409c00:	cmp    rsi,rdx
  409c03:	mov    r8,rdx
  409c06:	je     409c38 <flatcc_json_parser_string_part@@Base+0x38>
  409c08:	movzx  eax,BYTE PTR [rsi]
  409c0b:	cmp    al,0x22
  409c0d:	je     409c68 <flatcc_json_parser_string_part@@Base+0x68>
  409c0f:	cmp    al,0x5c
  409c11:	je     409c50 <flatcc_json_parser_string_part@@Base+0x50>
  409c13:	cmp    al,0x1f
  409c15:	ja     409c2f <flatcc_json_parser_string_part@@Base+0x2f>
  409c17:	jmp    409c50 <flatcc_json_parser_string_part@@Base+0x50>
  409c19:	nop    DWORD PTR [rax+0x0]
  409c20:	movzx  eax,BYTE PTR [rsi]
  409c23:	cmp    al,0x22
  409c25:	je     409c68 <flatcc_json_parser_string_part@@Base+0x68>
  409c27:	cmp    al,0x1f
  409c29:	jbe    409c50 <flatcc_json_parser_string_part@@Base+0x50>
  409c2b:	cmp    al,0x5c
  409c2d:	je     409c50 <flatcc_json_parser_string_part@@Base+0x50>
  409c2f:	add    rsi,0x1
  409c33:	cmp    r8,rsi
  409c36:	jne    409c20 <flatcc_json_parser_string_part@@Base+0x20>
  409c38:	mov    ecx,0x14
  409c3d:	mov    rdx,r8
  409c40:	mov    rsi,r8
  409c43:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  409c48:	nop    DWORD PTR [rax+rax*1+0x0]
  409c50:	cmp    al,0x1f
  409c52:	jg     409c68 <flatcc_json_parser_string_part@@Base+0x68>
  409c54:	mov    ecx,0x11
  409c59:	mov    rdx,r8
  409c5c:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  409c61:	nop    DWORD PTR [rax+0x0]
  409c68:	mov    rax,rsi
  409c6b:	ret    
  409c6c:	nop    DWORD PTR [rax+0x0]

0000000000409c70 <flatcc_json_parser_space_ext@@Base>:
  409c70:	mov    rax,rdx
  409c73:	sub    rax,rsi
  409c76:	cmp    rax,0xf
  409c7a:	jle    409cb4 <flatcc_json_parser_space_ext@@Base+0x44>
  409c7c:	movzx  ecx,BYTE PTR [rsi]
  409c7f:	cmp    cl,0x20
  409c82:	jg     409d14 <flatcc_json_parser_space_ext@@Base+0xa4>
  409c88:	cmp    WORD PTR [rsi],0x2020
  409c8d:	je     409d30 <flatcc_json_parser_space_ext@@Base+0xc0>
  409c93:	cmp    cl,0x20
  409c96:	je     409d3c <flatcc_json_parser_space_ext@@Base+0xcc>
  409c9c:	cmp    rsi,rdx
  409c9f:	jne    409cc0 <flatcc_json_parser_space_ext@@Base+0x50>
  409ca1:	mov    rax,rdx
  409ca4:	ret    
  409ca5:	nop    DWORD PTR [rax]
  409ca8:	movzx  ecx,BYTE PTR [rsi]
  409cab:	cmp    cl,0x20
  409cae:	jne    409cc0 <flatcc_json_parser_space_ext@@Base+0x50>
  409cb0:	add    rsi,0x1
  409cb4:	cmp    rdx,rsi
  409cb7:	jne    409ca8 <flatcc_json_parser_space_ext@@Base+0x38>
  409cb9:	jmp    409ca1 <flatcc_json_parser_space_ext@@Base+0x31>
  409cbb:	nop    DWORD PTR [rax+rax*1+0x0]
  409cc0:	cmp    cl,0x20
  409cc3:	jg     409d14 <flatcc_json_parser_space_ext@@Base+0xa4>
  409cc5:	cmp    cl,0xa
  409cc8:	je     409cfb <flatcc_json_parser_space_ext@@Base+0x8b>
  409cca:	jle    409d20 <flatcc_json_parser_space_ext@@Base+0xb0>
  409ccc:	cmp    cl,0xd
  409ccf:	je     409ce0 <flatcc_json_parser_space_ext@@Base+0x70>
  409cd1:	cmp    cl,0x20
  409cd4:	je     409c70 <flatcc_json_parser_space_ext@@Base>
  409cd6:	mov    ecx,0x5
  409cdb:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  409ce0:	mov    rcx,rdx
  409ce3:	xor    eax,eax
  409ce5:	sub    rcx,rsi
  409ce8:	cmp    rcx,0x1
  409cec:	jle    409cf5 <flatcc_json_parser_space_ext@@Base+0x85>
  409cee:	cmp    BYTE PTR [rsi+0x1],0xa
  409cf2:	sete   al
  409cf5:	movzx  eax,al
  409cf8:	add    rsi,rax
  409cfb:	add    DWORD PTR [rdi+0x18],0x1
  409cff:	add    rsi,0x1
  409d03:	mov    QWORD PTR [rdi+0x8],rsi
  409d07:	cmp    rdx,rsi
  409d0a:	je     409ca1 <flatcc_json_parser_space_ext@@Base+0x31>
  409d0c:	movzx  ecx,BYTE PTR [rsi]
  409d0f:	cmp    cl,0x20
  409d12:	jle    409cc5 <flatcc_json_parser_space_ext@@Base+0x55>
  409d14:	mov    rdx,rsi
  409d17:	jmp    409ca1 <flatcc_json_parser_space_ext@@Base+0x31>
  409d1c:	nop    DWORD PTR [rax+0x0]
  409d20:	cmp    cl,0x9
  409d23:	jne    409cd6 <flatcc_json_parser_space_ext@@Base+0x66>
  409d25:	add    rsi,0x1
  409d29:	jmp    409d07 <flatcc_json_parser_space_ext@@Base+0x97>
  409d2b:	nop    DWORD PTR [rax+rax*1+0x0]
  409d30:	movzx  eax,BYTE PTR [rsi+0x2]
  409d34:	add    rsi,0x2
  409d38:	cmp    al,0x20
  409d3a:	jne    409d44 <flatcc_json_parser_space_ext@@Base+0xd4>
  409d3c:	movzx  eax,BYTE PTR [rsi+0x1]
  409d40:	add    rsi,0x1
  409d44:	cmp    al,0x20
  409d46:	jle    409cb4 <flatcc_json_parser_space_ext@@Base+0x44>
  409d4c:	jmp    409d14 <flatcc_json_parser_space_ext@@Base+0xa4>
  409d4e:	xchg   ax,ax
  409d50:	push   r15
  409d52:	push   r14
  409d54:	push   r13
  409d56:	push   r12
  409d58:	mov    r12,rdi
  409d5b:	push   rbp
  409d5c:	push   rbx
  409d5d:	mov    rbx,rdx
  409d60:	mov    rbp,rsi
  409d63:	sub    rsp,0x58
  409d67:	mov    BYTE PTR [r8],0x0
  409d6b:	mov    rdx,QWORD PTR fs:0x28
  409d74:	mov    QWORD PTR [rsp+0x48],rdx
  409d79:	xor    edx,edx
  409d7b:	cmp    rsi,rbx
  409d7e:	mov    QWORD PTR [rsp+0x10],rcx
  409d83:	mov    QWORD PTR [rsp+0x20],r8
  409d88:	je     409f10 <flatcc_json_parser_space_ext@@Base+0x2a0>
  409d8e:	movzx  eax,BYTE PTR [rsi]
  409d91:	cmp    al,0x22
  409d93:	je     409ed2 <flatcc_json_parser_space_ext@@Base+0x262>
  409d99:	cmp    al,0x2e
  409d9b:	je     409f20 <flatcc_json_parser_space_ext@@Base+0x2b0>
  409da1:	mov    DWORD PTR [rdi+0x14],0x1
  409da8:	lea    rax,[rsp+0x38]
  409dad:	lea    r15,[rsp+0x3c]
  409db2:	lea    r14,[rsp+0x40]
  409db7:	mov    DWORD PTR [rsp+0x18],0x0
  409dbf:	mov    BYTE PTR [rsp+0x1f],0x0
  409dc4:	mov    QWORD PTR [rsp+0x8],rax
  409dc9:	mov    r13,QWORD PTR [rsp+0x10]
  409dce:	mov    rax,QWORD PTR [r13+0x0]
  409dd2:	jmp    409dee <flatcc_json_parser_space_ext@@Base+0x17e>
  409dd4:	nop    DWORD PTR [rax+0x0]
  409dd8:	cmp    rbp,rax
  409ddb:	jne    409e30 <flatcc_json_parser_space_ext@@Base+0x1c0>
  409ddd:	add    r13,0x8
  409de1:	mov    rax,QWORD PTR [r13+0x0]
  409de5:	test   rax,rax
  409de8:	je     409e90 <flatcc_json_parser_space_ext@@Base+0x220>
  409dee:	mov    r9,r15
  409df1:	mov    r8,r14
  409df4:	mov    rcx,QWORD PTR [rsp+0x8]
  409df9:	mov    rdx,rbx
  409dfc:	mov    rsi,rbp
  409dff:	mov    rdi,r12
  409e02:	call   rax
  409e04:	cmp    rbx,rax
  409e07:	jne    409dd8 <flatcc_json_parser_space_ext@@Base+0x168>
  409e09:	mov    rsi,QWORD PTR [rsp+0x48]
  409e0e:	xor    rsi,QWORD PTR fs:0x28
  409e17:	mov    rax,rbx
  409e1a:	jne    409f71 <flatcc_json_parser_space_ext@@Base+0x301>
  409e20:	add    rsp,0x58
  409e24:	pop    rbx
  409e25:	pop    rbp
  409e26:	pop    r12
  409e28:	pop    r13
  409e2a:	pop    r14
  409e2c:	pop    r15
  409e2e:	ret    
  409e2f:	nop
  409e30:	mov    r8,rax
  409e33:	mov    eax,DWORD PTR [rsp+0x18]
  409e37:	test   eax,eax
  409e39:	je     409e48 <flatcc_json_parser_space_ext@@Base+0x1d8>
  409e3b:	mov    edi,DWORD PTR [r12+0x14]
  409e40:	test   edi,edi
  409e42:	jne    409f56 <flatcc_json_parser_space_ext@@Base+0x2e6>
  409e48:	mov    esi,DWORD PTR [rsp+0x38]
  409e4c:	mov    ecx,0x8
  409e51:	test   esi,esi
  409e53:	jne    409eb0 <flatcc_json_parser_space_ext@@Base+0x240>
  409e55:	mov    rax,QWORD PTR [rsp+0x40]
  409e5a:	cmp    rax,0xff
  409e60:	ja     409eab <flatcc_json_parser_space_ext@@Base+0x23b>
  409e62:	mov    BYTE PTR [rsp+0x1f],al
  409e66:	mov    rax,QWORD PTR [rsp+0x20]
  409e6b:	movzx  ecx,BYTE PTR [rsp+0x1f]
  409e70:	add    DWORD PTR [rsp+0x18],0x1
  409e75:	add    BYTE PTR [rax],cl
  409e77:	mov    ecx,DWORD PTR [rsp+0x3c]
  409e7b:	test   ecx,ecx
  409e7d:	je     409f4e <flatcc_json_parser_space_ext@@Base+0x2de>
  409e83:	mov    rbp,r8
  409e86:	jmp    409dc9 <flatcc_json_parser_space_ext@@Base+0x159>
  409e8b:	nop    DWORD PTR [rax+rax*1+0x0]
  409e90:	mov    rdx,rbx
  409e93:	mov    ecx,0x17
  409e98:	mov    rsi,rbp
  409e9b:	mov    rdi,r12
  409e9e:	call   409be0 <flatcc_json_parser_set_error@@Base>
  409ea3:	mov    rbx,rax
  409ea6:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409eab:	mov    ecx,0x7
  409eb0:	mov    rsi,r8
  409eb3:	mov    rdx,rbx
  409eb6:	mov    rdi,r12
  409eb9:	mov    QWORD PTR [rsp+0x28],r8
  409ebe:	call   409be0 <flatcc_json_parser_set_error@@Base>
  409ec3:	cmp    rbx,rax
  409ec6:	mov    r8,QWORD PTR [rsp+0x28]
  409ecb:	jne    409e66 <flatcc_json_parser_space_ext@@Base+0x1f6>
  409ecd:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409ed2:	add    rbp,0x1
  409ed6:	mov    rax,rbx
  409ed9:	mov    DWORD PTR [rdi+0x14],0x0
  409ee0:	sub    rax,rbp
  409ee3:	cmp    rax,0x1
  409ee7:	jle    409ef1 <flatcc_json_parser_space_ext@@Base+0x281>
  409ee9:	cmp    BYTE PTR [rbp+0x0],0x20
  409eed:	jg     409f02 <flatcc_json_parser_space_ext@@Base+0x292>
  409eef:	je     409f42 <flatcc_json_parser_space_ext@@Base+0x2d2>
  409ef1:	mov    rsi,rbp
  409ef4:	mov    rdx,rbx
  409ef7:	mov    rdi,r12
  409efa:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  409eff:	mov    rbp,rax
  409f02:	cmp    rbx,rbp
  409f05:	jne    409da8 <flatcc_json_parser_space_ext@@Base+0x138>
  409f0b:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409f10:	mov    edx,DWORD PTR [rdi+0x14]
  409f13:	test   edx,edx
  409f15:	je     409ef1 <flatcc_json_parser_space_ext@@Base+0x281>
  409f17:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409f1c:	nop    DWORD PTR [rax+0x0]
  409f20:	mov    ecx,0x5
  409f25:	mov    rdx,rbx
  409f28:	call   409be0 <flatcc_json_parser_set_error@@Base>
  409f2d:	mov    r8d,DWORD PTR [r12+0x14]
  409f32:	mov    rbp,rax
  409f35:	test   r8d,r8d
  409f38:	jne    409f02 <flatcc_json_parser_space_ext@@Base+0x292>
  409f3a:	mov    rax,rbx
  409f3d:	sub    rax,rbp
  409f40:	jmp    409ee3 <flatcc_json_parser_space_ext@@Base+0x273>
  409f42:	cmp    BYTE PTR [rbp+0x1],0x20
  409f46:	jle    409ef1 <flatcc_json_parser_space_ext@@Base+0x281>
  409f48:	add    rbp,0x1
  409f4c:	jmp    409f02 <flatcc_json_parser_space_ext@@Base+0x292>
  409f4e:	mov    rbx,r8
  409f51:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409f56:	mov    rdx,rbx
  409f59:	mov    ecx,0xe
  409f5e:	mov    rsi,r8
  409f61:	mov    rdi,r12
  409f64:	call   409be0 <flatcc_json_parser_set_error@@Base>
  409f69:	mov    rbx,rax
  409f6c:	jmp    409e09 <flatcc_json_parser_space_ext@@Base+0x199>
  409f71:	call   403060 <__stack_chk_fail@plt>
  409f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409f80:	push   r15
  409f82:	push   r14
  409f84:	mov    r14,rsi
  409f87:	push   r13
  409f89:	push   r12
  409f8b:	mov    r12d,r8d
  409f8e:	push   rbp
  409f8f:	push   rbx
  409f90:	mov    rbp,rdi
  409f93:	mov    rbx,rdx
  409f96:	sub    rsp,0x38
  409f9a:	mov    rdi,QWORD PTR [rdi]
  409f9d:	mov    rax,QWORD PTR fs:0x28
  409fa6:	mov    QWORD PTR [rsp+0x28],rax
  409fab:	xor    eax,eax
  409fad:	mov    QWORD PTR [rsp],rcx
  409fb1:	mov    DWORD PTR [rsp+0x1c],r9d
  409fb6:	mov    r15,QWORD PTR [rsp+0x70]
  409fbb:	mov    DWORD PTR [rsp+0x24],0x0
  409fc3:	call   4062a0 <flatcc_builder_start_offset_vector@@Base>
  409fc8:	test   eax,eax
  409fca:	jne    40a020 <flatcc_json_parser_space_ext@@Base+0x3b0>
  409fcc:	cmp    r14,rbx
  409fcf:	je     409fdb <flatcc_json_parser_space_ext@@Base+0x36b>
  409fd1:	cmp    BYTE PTR [r14],0x5b
  409fd5:	je     40a060 <flatcc_json_parser_space_ext@@Base+0x3f0>
  409fdb:	mov    rsi,r14
  409fde:	mov    ecx,0x16
  409fe3:	mov    rdx,rbx
  409fe6:	mov    rdi,rbp
  409fe9:	call   409be0 <flatcc_json_parser_set_error@@Base>
  409fee:	mov    r14,rax
  409ff1:	mov    eax,r12d
  409ff4:	mov    QWORD PTR [rsp+0x8],rax
  409ff9:	xor    eax,eax
  409ffb:	nop    DWORD PTR [rax+rax*1+0x0]
  40a000:	cmp    rax,QWORD PTR [rsp+0x8]
  40a005:	je     40a2d9 <flatcc_json_parser_space_ext@@Base+0x669>
  40a00b:	mov    ecx,0x1e
  40a010:	mov    rdx,rbx
  40a013:	mov    rsi,r14
  40a016:	mov    rdi,rbp
  40a019:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40a01e:	jmp    40a033 <flatcc_json_parser_space_ext@@Base+0x3c3>
  40a020:	mov    ecx,0x21
  40a025:	mov    rdx,rbx
  40a028:	mov    rsi,r14
  40a02b:	mov    rdi,rbp
  40a02e:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40a033:	mov    rcx,QWORD PTR [rsp+0x28]
  40a038:	xor    rcx,QWORD PTR fs:0x28
  40a041:	jne    40a3bb <flatcc_json_parser_space_ext@@Base+0x74b>
  40a047:	add    rsp,0x38
  40a04b:	pop    rbx
  40a04c:	pop    rbp
  40a04d:	pop    r12
  40a04f:	pop    r13
  40a051:	pop    r14
  40a053:	pop    r15
  40a055:	ret    
  40a056:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a060:	lea    r13,[r14+0x1]
  40a064:	mov    rax,rbx
  40a067:	sub    rax,r13
  40a06a:	cmp    rax,0x1
  40a06e:	jle    40a07d <flatcc_json_parser_space_ext@@Base+0x40d>
  40a070:	cmp    BYTE PTR [r14+0x1],0x20
  40a075:	jg     40a08e <flatcc_json_parser_space_ext@@Base+0x41e>
  40a077:	je     40a323 <flatcc_json_parser_space_ext@@Base+0x6b3>
  40a07d:	mov    rsi,r13
  40a080:	mov    rdx,rbx
  40a083:	mov    rdi,rbp
  40a086:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a08b:	mov    r13,rax
  40a08e:	cmp    rbx,r13
  40a091:	je     40a09e <flatcc_json_parser_space_ext@@Base+0x42e>
  40a093:	cmp    BYTE PTR [r13+0x0],0x5d
  40a098:	je     40a36b <flatcc_json_parser_space_ext@@Base+0x6fb>
  40a09e:	mov    eax,r12d
  40a0a1:	test   rax,rax
  40a0a4:	mov    QWORD PTR [rsp+0x8],rax
  40a0a9:	je     40a22d <flatcc_json_parser_space_ext@@Base+0x5bd>
  40a0af:	lea    rax,[rsp+0x24]
  40a0b4:	xor    r12d,r12d
  40a0b7:	mov    QWORD PTR [rsp+0x10],rax
  40a0bc:	nop    DWORD PTR [rax+0x0]
  40a0c0:	mov    rsi,QWORD PTR [rsp]
  40a0c4:	mov    rdi,QWORD PTR [rbp+0x0]
  40a0c8:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40a0cd:	movzx  ecx,BYTE PTR [rax+r12*1]
  40a0d2:	mov    r8,QWORD PTR [rsp+0x10]
  40a0d7:	mov    rdx,rbx
  40a0da:	mov    rsi,r13
  40a0dd:	mov    rdi,rbp
  40a0e0:	call   r15
  40a0e3:	cmp    rbx,rax
  40a0e6:	mov    r14,rax
  40a0e9:	je     40a270 <flatcc_json_parser_space_ext@@Base+0x600>
  40a0ef:	mov    rdi,QWORD PTR [rbp+0x0]
  40a0f3:	mov    esi,0x1
  40a0f8:	call   405d60 <flatcc_builder_extend_offset_vector@@Base>
  40a0fd:	test   rax,rax
  40a100:	je     40a020 <flatcc_json_parser_space_ext@@Base+0x3b0>
  40a106:	mov    edx,DWORD PTR [rsp+0x24]
  40a10a:	mov    DWORD PTR [rax],edx
  40a10c:	mov    rax,rbx
  40a10f:	sub    rax,r14
  40a112:	cmp    rax,0x1
  40a116:	jle    40a126 <flatcc_json_parser_space_ext@@Base+0x4b6>
  40a118:	movzx  eax,BYTE PTR [r14]
  40a11c:	cmp    al,0x20
  40a11e:	jg     40a144 <flatcc_json_parser_space_ext@@Base+0x4d4>
  40a120:	je     40a1b0 <flatcc_json_parser_space_ext@@Base+0x540>
  40a126:	mov    rsi,r14
  40a129:	mov    rdx,rbx
  40a12c:	mov    rdi,rbp
  40a12f:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a134:	mov    r14,rax
  40a137:	cmp    rbx,r14
  40a13a:	je     40a1d0 <flatcc_json_parser_space_ext@@Base+0x560>
  40a140:	movzx  eax,BYTE PTR [r14]
  40a144:	cmp    al,0x2c
  40a146:	je     40a1e0 <flatcc_json_parser_space_ext@@Base+0x570>
  40a14c:	cmp    al,0x5d
  40a14e:	je     40a170 <flatcc_json_parser_space_ext@@Base+0x500>
  40a150:	mov    rsi,r14
  40a153:	mov    ecx,0x9
  40a158:	mov    rdx,rbx
  40a15b:	mov    rdi,rbp
  40a15e:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40a163:	mov    r14,rax
  40a166:	lea    rax,[r12+0x1]
  40a16b:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a170:	lea    rsi,[r14+0x1]
  40a174:	mov    rax,rbx
  40a177:	sub    rax,rsi
  40a17a:	cmp    rax,0x1
  40a17e:	jle    40a191 <flatcc_json_parser_space_ext@@Base+0x521>
  40a180:	cmp    BYTE PTR [r14+0x1],0x20
  40a185:	jg     40a248 <flatcc_json_parser_space_ext@@Base+0x5d8>
  40a18b:	je     40a258 <flatcc_json_parser_space_ext@@Base+0x5e8>
  40a191:	mov    rdx,rbx
  40a194:	mov    rdi,rbp
  40a197:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a19c:	mov    r14,rax
  40a19f:	lea    rax,[r12+0x1]
  40a1a4:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a1a9:	nop    DWORD PTR [rax+0x0]
  40a1b0:	cmp    BYTE PTR [r14+0x1],0x20
  40a1b5:	jle    40a126 <flatcc_json_parser_space_ext@@Base+0x4b6>
  40a1bb:	add    r14,0x1
  40a1bf:	cmp    rbx,r14
  40a1c2:	jne    40a140 <flatcc_json_parser_space_ext@@Base+0x4d0>
  40a1c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40a1d0:	lea    rax,[r12+0x1]
  40a1d5:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a1da:	nop    WORD PTR [rax+rax*1+0x0]
  40a1e0:	lea    r13,[r14+0x1]
  40a1e4:	mov    rax,rbx
  40a1e7:	sub    rax,r13
  40a1ea:	cmp    rax,0x1
  40a1ee:	jle    40a1fd <flatcc_json_parser_space_ext@@Base+0x58d>
  40a1f0:	cmp    BYTE PTR [r14+0x1],0x20
  40a1f5:	jg     40a20e <flatcc_json_parser_space_ext@@Base+0x59e>
  40a1f7:	je     40a280 <flatcc_json_parser_space_ext@@Base+0x610>
  40a1fd:	mov    rsi,r13
  40a200:	mov    rdx,rbx
  40a203:	mov    rdi,rbp
  40a206:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a20b:	mov    r13,rax
  40a20e:	cmp    rbx,r13
  40a211:	je     40a337 <flatcc_json_parser_space_ext@@Base+0x6c7>
  40a217:	cmp    BYTE PTR [r13+0x0],0x5d
  40a21c:	je     40a298 <flatcc_json_parser_space_ext@@Base+0x628>
  40a21e:	add    r12,0x1
  40a222:	cmp    QWORD PTR [rsp+0x8],r12
  40a227:	jne    40a0c0 <flatcc_json_parser_space_ext@@Base+0x450>
  40a22d:	mov    ecx,0x1e
  40a232:	mov    rdx,rbx
  40a235:	mov    rsi,r13
  40a238:	mov    rdi,rbp
  40a23b:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40a240:	jmp    40a033 <flatcc_json_parser_space_ext@@Base+0x3c3>
  40a245:	nop    DWORD PTR [rax]
  40a248:	lea    rax,[r12+0x1]
  40a24d:	mov    r14,rsi
  40a250:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a255:	nop    DWORD PTR [rax]
  40a258:	cmp    BYTE PTR [r14+0x2],0x20
  40a25d:	jle    40a191 <flatcc_json_parser_space_ext@@Base+0x521>
  40a263:	add    r14,0x2
  40a267:	jmp    40a1d0 <flatcc_json_parser_space_ext@@Base+0x560>
  40a26c:	nop    DWORD PTR [rax+0x0]
  40a270:	mov    rax,rbx
  40a273:	jmp    40a033 <flatcc_json_parser_space_ext@@Base+0x3c3>
  40a278:	nop    DWORD PTR [rax+rax*1+0x0]
  40a280:	cmp    BYTE PTR [r14+0x2],0x20
  40a285:	jle    40a1fd <flatcc_json_parser_space_ext@@Base+0x58d>
  40a28b:	lea    r13,[r14+0x2]
  40a28f:	jmp    40a20e <flatcc_json_parser_space_ext@@Base+0x59e>
  40a294:	nop    DWORD PTR [rax+0x0]
  40a298:	lea    r14,[r13+0x1]
  40a29c:	mov    rax,rbx
  40a29f:	sub    rax,r14
  40a2a2:	cmp    rax,0x1
  40a2a6:	jle    40a2be <flatcc_json_parser_space_ext@@Base+0x64e>
  40a2a8:	cmp    BYTE PTR [r13+0x1],0x20
  40a2ad:	lea    rax,[r12+0x1]
  40a2b2:	jg     40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a2b8:	je     40a357 <flatcc_json_parser_space_ext@@Base+0x6e7>
  40a2be:	mov    rsi,r14
  40a2c1:	mov    rdx,rbx
  40a2c4:	mov    rdi,rbp
  40a2c7:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a2cc:	mov    r14,rax
  40a2cf:	lea    rax,[r12+0x1]
  40a2d4:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a2d9:	mov    rsi,QWORD PTR [rsp]
  40a2dd:	mov    rdi,QWORD PTR [rbp+0x0]
  40a2e1:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40a2e6:	mov    rdi,QWORD PTR [rbp+0x0]
  40a2ea:	mov    rsi,rax
  40a2ed:	call   407350 <flatcc_builder_end_offset_vector_for_unions@@Base>
  40a2f2:	test   eax,eax
  40a2f4:	mov    DWORD PTR [rsp+0x24],eax
  40a2f8:	je     40a020 <flatcc_json_parser_space_ext@@Base+0x3b0>
  40a2fe:	movzx  esi,WORD PTR [rsp+0x1c]
  40a303:	mov    rdi,QWORD PTR [rbp+0x0]
  40a307:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  40a30c:	test   rax,rax
  40a30f:	je     40a020 <flatcc_json_parser_space_ext@@Base+0x3b0>
  40a315:	mov    edx,DWORD PTR [rsp+0x24]
  40a319:	mov    DWORD PTR [rax],edx
  40a31b:	mov    rax,r14
  40a31e:	jmp    40a033 <flatcc_json_parser_space_ext@@Base+0x3c3>
  40a323:	cmp    BYTE PTR [r14+0x2],0x20
  40a328:	jle    40a07d <flatcc_json_parser_space_ext@@Base+0x40d>
  40a32e:	lea    r13,[r14+0x2]
  40a332:	jmp    40a08e <flatcc_json_parser_space_ext@@Base+0x41e>
  40a337:	mov    ecx,0x9
  40a33c:	mov    rdx,rbx
  40a33f:	mov    rsi,rbx
  40a342:	mov    rdi,rbp
  40a345:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40a34a:	mov    r14,rax
  40a34d:	lea    rax,[r12+0x1]
  40a352:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a357:	cmp    BYTE PTR [r13+0x2],0x20
  40a35c:	jle    40a2be <flatcc_json_parser_space_ext@@Base+0x64e>
  40a362:	lea    r14,[r13+0x2]
  40a366:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a36b:	lea    r14,[r13+0x1]
  40a36f:	mov    rax,rbx
  40a372:	sub    rax,r14
  40a375:	cmp    rax,0x1
  40a379:	jle    40a392 <flatcc_json_parser_space_ext@@Base+0x722>
  40a37b:	mov    eax,r12d
  40a37e:	mov    QWORD PTR [rsp+0x8],rax
  40a383:	xor    eax,eax
  40a385:	cmp    BYTE PTR [r13+0x1],0x20
  40a38a:	jg     40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a390:	je     40a3b2 <flatcc_json_parser_space_ext@@Base+0x742>
  40a392:	mov    rsi,r14
  40a395:	mov    rdx,rbx
  40a398:	mov    rdi,rbp
  40a39b:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a3a0:	mov    r14,rax
  40a3a3:	mov    eax,r12d
  40a3a6:	mov    QWORD PTR [rsp+0x8],rax
  40a3ab:	xor    eax,eax
  40a3ad:	jmp    40a000 <flatcc_json_parser_space_ext@@Base+0x390>
  40a3b2:	cmp    BYTE PTR [r13+0x2],0x20
  40a3b7:	jle    40a392 <flatcc_json_parser_space_ext@@Base+0x722>
  40a3b9:	jmp    40a362 <flatcc_json_parser_space_ext@@Base+0x6f2>
  40a3bb:	call   403060 <__stack_chk_fail@plt>

000000000040a3c0 <flatcc_json_parser_string_escape@@Base>:
  40a3c0:	mov    r8,rdx
  40a3c3:	sub    r8,rsi
  40a3c6:	cmp    r8,0x1
  40a3ca:	jle    40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a3cc:	cmp    BYTE PTR [rsi],0x5c
  40a3cf:	je     40a3e0 <flatcc_json_parser_string_escape@@Base+0x20>
  40a3d1:	mov    BYTE PTR [rcx],0x0
  40a3d4:	mov    ecx,0x12
  40a3d9:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40a3de:	xchg   ax,ax
  40a3e0:	movzx  eax,BYTE PTR [rsi+0x1]
  40a3e4:	sub    eax,0x22
  40a3e7:	cmp    al,0x56
  40a3e9:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a3eb:	lea    r9,[rip+0x422e]        # 40e620 <flatcc_builder_padding_base@@Base+0x7e0>
  40a3f2:	movzx  eax,al
  40a3f5:	movsxd rax,DWORD PTR [r9+rax*4]
  40a3f9:	add    rax,r9
  40a3fc:	jmp    rax
  40a3fe:	xchg   ax,ax
  40a400:	cmp    r8,0x3
  40a404:	mov    BYTE PTR [rcx],0x1
  40a407:	jle    40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a409:	movzx  eax,BYTE PTR [rsi+0x2]
  40a40d:	lea    r8d,[rax-0x30]
  40a411:	cmp    r8b,0x9
  40a415:	ja     40a550 <flatcc_json_parser_string_escape@@Base+0x190>
  40a41b:	shl    eax,0x4
  40a41e:	movzx  r8d,BYTE PTR [rsi+0x3]
  40a423:	lea    r9d,[r8-0x30]
  40a427:	cmp    r9b,0x9
  40a42b:	ja     40a5b8 <flatcc_json_parser_string_escape@@Base+0x1f8>
  40a431:	or     eax,r9d
  40a434:	mov    BYTE PTR [rcx+0x1],al
  40a437:	lea    rax,[rsi+0x4]
  40a43b:	ret    
  40a43c:	nop    DWORD PTR [rax+0x0]
  40a440:	mov    BYTE PTR [rcx],0x1
  40a443:	mov    BYTE PTR [rcx+0x1],0x22
  40a447:	lea    rax,[rsi+0x2]
  40a44b:	ret    
  40a44c:	nop    DWORD PTR [rax+0x0]
  40a450:	mov    BYTE PTR [rcx],0x1
  40a453:	mov    BYTE PTR [rcx+0x1],0x2f
  40a457:	lea    rax,[rsi+0x2]
  40a45b:	ret    
  40a45c:	nop    DWORD PTR [rax+0x0]
  40a460:	mov    BYTE PTR [rcx],0x1
  40a463:	mov    BYTE PTR [rcx+0x1],0x5c
  40a467:	lea    rax,[rsi+0x2]
  40a46b:	ret    
  40a46c:	nop    DWORD PTR [rax+0x0]
  40a470:	mov    BYTE PTR [rcx],0x1
  40a473:	mov    BYTE PTR [rcx+0x1],0x8
  40a477:	lea    rax,[rsi+0x2]
  40a47b:	ret    
  40a47c:	nop    DWORD PTR [rax+0x0]
  40a480:	mov    BYTE PTR [rcx],0x1
  40a483:	mov    BYTE PTR [rcx+0x1],0xc
  40a487:	lea    rax,[rsi+0x2]
  40a48b:	ret    
  40a48c:	nop    DWORD PTR [rax+0x0]
  40a490:	mov    BYTE PTR [rcx],0x1
  40a493:	mov    BYTE PTR [rcx+0x1],0xa
  40a497:	lea    rax,[rsi+0x2]
  40a49b:	ret    
  40a49c:	nop    DWORD PTR [rax+0x0]
  40a4a0:	mov    BYTE PTR [rcx],0x1
  40a4a3:	mov    BYTE PTR [rcx+0x1],0xd
  40a4a7:	lea    rax,[rsi+0x2]
  40a4ab:	ret    
  40a4ac:	nop    DWORD PTR [rax+0x0]
  40a4b0:	mov    BYTE PTR [rcx],0x1
  40a4b3:	mov    BYTE PTR [rcx+0x1],0x9
  40a4b7:	lea    rax,[rsi+0x2]
  40a4bb:	ret    
  40a4bc:	nop    DWORD PTR [rax+0x0]
  40a4c0:	cmp    r8,0x5
  40a4c4:	jle    40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a4ca:	movzx  eax,BYTE PTR [rsi+0x2]
  40a4ce:	lea    r8d,[rax-0x30]
  40a4d2:	cmp    r8b,0x9
  40a4d6:	ja     40a570 <flatcc_json_parser_string_escape@@Base+0x1b0>
  40a4dc:	shl    eax,0xc
  40a4df:	movzx  r8d,BYTE PTR [rsi+0x3]
  40a4e4:	lea    r9d,[r8-0x30]
  40a4e8:	cmp    r9b,0x9
  40a4ec:	ja     40a590 <flatcc_json_parser_string_escape@@Base+0x1d0>
  40a4f2:	shl    r8d,0x8
  40a4f6:	sub    r8w,0x3000
  40a4fc:	or     eax,r8d
  40a4ff:	movsx  r8w,BYTE PTR [rsi+0x4]
  40a505:	lea    r9d,[r8-0x30]
  40a509:	cmp    r9b,0x9
  40a50d:	ja     40a5d6 <flatcc_json_parser_string_escape@@Base+0x216>
  40a513:	sub    r8d,0x30
  40a517:	shl    r8d,0x4
  40a51b:	or     eax,r8d
  40a51e:	movzx  r8d,BYTE PTR [rsi+0x5]
  40a523:	lea    r9d,[r8-0x30]
  40a527:	cmp    r9b,0x9
  40a52b:	ja     40a5fd <flatcc_json_parser_string_escape@@Base+0x23d>
  40a531:	movsx  dx,r8b
  40a536:	sub    edx,0x30
  40a539:	or     eax,edx
  40a53b:	cmp    ax,0x7f
  40a53f:	ja     40a61f <flatcc_json_parser_string_escape@@Base+0x25f>
  40a545:	mov    BYTE PTR [rcx],0x1
  40a548:	mov    BYTE PTR [rcx+0x1],al
  40a54b:	lea    rax,[rsi+0x6]
  40a54f:	ret    
  40a550:	or     eax,0x20
  40a553:	lea    r8d,[rax-0x61]
  40a557:	cmp    r8b,0x5
  40a55b:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a561:	shl    eax,0x4
  40a564:	sub    eax,0x70
  40a567:	jmp    40a41e <flatcc_json_parser_string_escape@@Base+0x5e>
  40a56c:	nop    DWORD PTR [rax+0x0]
  40a570:	or     eax,0x20
  40a573:	lea    r8d,[rax-0x61]
  40a577:	cmp    r8b,0x5
  40a57b:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a581:	shl    eax,0xc
  40a584:	sub    ax,0x7000
  40a588:	jmp    40a4df <flatcc_json_parser_string_escape@@Base+0x11f>
  40a58d:	nop    DWORD PTR [rax]
  40a590:	or     r8d,0x20
  40a594:	lea    r9d,[r8-0x61]
  40a598:	cmp    r9b,0x5
  40a59c:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a5a2:	shl    r8d,0x8
  40a5a6:	sub    r8w,0x5700
  40a5ac:	or     eax,r8d
  40a5af:	jmp    40a4ff <flatcc_json_parser_string_escape@@Base+0x13f>
  40a5b4:	nop    DWORD PTR [rax+0x0]
  40a5b8:	or     r8d,0x20
  40a5bc:	lea    r9d,[r8-0x61]
  40a5c0:	cmp    r9b,0x5
  40a5c4:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a5ca:	sub    r8d,0x57
  40a5ce:	or     eax,r8d
  40a5d1:	jmp    40a434 <flatcc_json_parser_string_escape@@Base+0x74>
  40a5d6:	or     r8d,0x20
  40a5da:	lea    r9d,[r8-0x61]
  40a5de:	cmp    r9b,0x5
  40a5e2:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a5e8:	movsx  r8w,r8b
  40a5ed:	sub    r8d,0x57
  40a5f1:	shl    r8d,0x4
  40a5f5:	or     eax,r8d
  40a5f8:	jmp    40a51e <flatcc_json_parser_string_escape@@Base+0x15e>
  40a5fd:	or     r8d,0x20
  40a601:	lea    r9d,[r8-0x61]
  40a605:	cmp    r9b,0x5
  40a609:	ja     40a3d1 <flatcc_json_parser_string_escape@@Base+0x11>
  40a60f:	movsx  r8w,r8b
  40a614:	lea    edx,[r8-0x57]
  40a618:	or     eax,edx
  40a61a:	jmp    40a53b <flatcc_json_parser_string_escape@@Base+0x17b>
  40a61f:	cmp    ax,0x7ff
  40a623:	ja     40a642 <flatcc_json_parser_string_escape@@Base+0x282>
  40a625:	mov    edx,eax
  40a627:	and    eax,0x3f
  40a62a:	mov    BYTE PTR [rcx],0x2
  40a62d:	shr    dx,0x6
  40a631:	or     eax,0xffffff80
  40a634:	or     edx,0xffffffc0
  40a637:	mov    BYTE PTR [rcx+0x2],al
  40a63a:	mov    BYTE PTR [rcx+0x1],dl
  40a63d:	jmp    40a54b <flatcc_json_parser_string_escape@@Base+0x18b>
  40a642:	mov    edx,eax
  40a644:	mov    BYTE PTR [rcx],0x3
  40a647:	shr    dx,0xc
  40a64b:	or     edx,0xffffffe0
  40a64e:	mov    BYTE PTR [rcx+0x1],dl
  40a651:	mov    edx,eax
  40a653:	and    eax,0x3f
  40a656:	shr    dx,0x6
  40a65a:	or     eax,0xffffff80
  40a65d:	and    edx,0x3f
  40a660:	mov    BYTE PTR [rcx+0x3],al
  40a663:	or     edx,0xffffff80
  40a666:	mov    BYTE PTR [rcx+0x2],dl
  40a669:	jmp    40a54b <flatcc_json_parser_string_escape@@Base+0x18b>
  40a66e:	xchg   ax,ax

000000000040a670 <flatcc_json_parser_skip_constant@@Base>:
  40a670:	push   r13
  40a672:	push   r12
  40a674:	push   rbp
  40a675:	push   rbx
  40a676:	mov    rbp,rdx
  40a679:	sub    rsp,0x8
  40a67d:	cmp    rsi,rdx
  40a680:	je     40a700 <flatcc_json_parser_skip_constant@@Base+0x90>
  40a682:	mov    r13,rdi
  40a685:	mov    rbx,rsi
  40a688:	movabs r12,0x2000000000ffd
  40a692:	jmp    40a6b1 <flatcc_json_parser_skip_constant@@Base+0x41>
  40a694:	nop    DWORD PTR [rax+0x0]
  40a698:	mov    edx,eax
  40a69a:	or     edx,0x20
  40a69d:	sub    edx,0x61
  40a6a0:	cmp    dl,0x19
  40a6a3:	ja     40a6d3 <flatcc_json_parser_skip_constant@@Base+0x63>
  40a6a5:	nop    DWORD PTR [rax]
  40a6a8:	add    rbx,0x1
  40a6ac:	cmp    rbp,rbx
  40a6af:	je     40a700 <flatcc_json_parser_skip_constant@@Base+0x90>
  40a6b1:	movzx  eax,BYTE PTR [rbx]
  40a6b4:	test   al,al
  40a6b6:	js     40a6a8 <flatcc_json_parser_skip_constant@@Base+0x38>
  40a6b8:	lea    edx,[rax-0x2e]
  40a6bb:	cmp    dl,0x31
  40a6be:	ja     40a698 <flatcc_json_parser_skip_constant@@Base+0x28>
  40a6c0:	bt     r12,rdx
  40a6c4:	jb     40a6a8 <flatcc_json_parser_skip_constant@@Base+0x38>
  40a6c6:	mov    edx,eax
  40a6c8:	or     edx,0x20
  40a6cb:	sub    edx,0x61
  40a6ce:	cmp    dl,0x19
  40a6d1:	jbe    40a6a8 <flatcc_json_parser_skip_constant@@Base+0x38>
  40a6d3:	mov    rdx,rbp
  40a6d6:	sub    rdx,rbx
  40a6d9:	cmp    rdx,0x1
  40a6dd:	jle    40a6e5 <flatcc_json_parser_skip_constant@@Base+0x75>
  40a6df:	cmp    al,0x20
  40a6e1:	jg     40a710 <flatcc_json_parser_skip_constant@@Base+0xa0>
  40a6e3:	je     40a721 <flatcc_json_parser_skip_constant@@Base+0xb1>
  40a6e5:	mov    rdx,rbp
  40a6e8:	mov    rsi,rbx
  40a6eb:	mov    rdi,r13
  40a6ee:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a6f3:	cmp    rbx,rax
  40a6f6:	je     40a710 <flatcc_json_parser_skip_constant@@Base+0xa0>
  40a6f8:	mov    rbx,rax
  40a6fb:	cmp    rbp,rbx
  40a6fe:	jne    40a6b1 <flatcc_json_parser_skip_constant@@Base+0x41>
  40a700:	add    rsp,0x8
  40a704:	mov    rax,rbp
  40a707:	pop    rbx
  40a708:	pop    rbp
  40a709:	pop    r12
  40a70b:	pop    r13
  40a70d:	ret    
  40a70e:	xchg   ax,ax
  40a710:	add    rsp,0x8
  40a714:	mov    rbp,rbx
  40a717:	mov    rax,rbp
  40a71a:	pop    rbx
  40a71b:	pop    rbp
  40a71c:	pop    r12
  40a71e:	pop    r13
  40a720:	ret    
  40a721:	cmp    BYTE PTR [rbx+0x1],0x20
  40a725:	lea    rax,[rbx+0x1]
  40a729:	jle    40a6e5 <flatcc_json_parser_skip_constant@@Base+0x75>
  40a72b:	jmp    40a6f3 <flatcc_json_parser_skip_constant@@Base+0x83>
  40a72d:	nop    DWORD PTR [rax]

000000000040a730 <flatcc_json_parser_match_constant@@Base>:
  40a730:	mov    rax,rdx
  40a733:	movsxd rcx,ecx
  40a736:	sub    rax,rsi
  40a739:	cmp    rax,rcx
  40a73c:	jle    40a798 <flatcc_json_parser_match_constant@@Base+0x68>
  40a73e:	push   r13
  40a740:	push   r12
  40a742:	mov    r13,r8
  40a745:	push   rbp
  40a746:	push   rbx
  40a747:	mov    rbp,rdx
  40a74a:	mov    r12,rsi
  40a74d:	lea    rbx,[rsi+rcx*1]
  40a751:	sub    rsp,0x8
  40a755:	mov    eax,DWORD PTR [rdi+0x14]
  40a758:	test   eax,eax
  40a75a:	jne    40a7a8 <flatcc_json_parser_match_constant@@Base+0x78>
  40a75c:	movzx  eax,BYTE PTR [rbx]
  40a75f:	cmp    al,0x20
  40a761:	je     40a850 <flatcc_json_parser_match_constant@@Base+0x120>
  40a767:	cmp    al,0x22
  40a769:	je     40a890 <flatcc_json_parser_match_constant@@Base+0x160>
  40a76f:	cmp    al,0x5c
  40a771:	mov    DWORD PTR [r8],0x0
  40a778:	jne    40a820 <flatcc_json_parser_match_constant@@Base+0xf0>
  40a77e:	add    rsp,0x8
  40a782:	mov    rsi,rbx
  40a785:	mov    ecx,0x12
  40a78a:	pop    rbx
  40a78b:	pop    rbp
  40a78c:	pop    r12
  40a78e:	pop    r13
  40a790:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40a795:	nop    DWORD PTR [rax]
  40a798:	mov    DWORD PTR [r8],0x0
  40a79f:	mov    rax,rsi
  40a7a2:	ret    
  40a7a3:	nop    DWORD PTR [rax+rax*1+0x0]
  40a7a8:	mov    rax,rdx
  40a7ab:	sub    rax,rbx
  40a7ae:	cmp    rax,0x1
  40a7b2:	jle    40a7c3 <flatcc_json_parser_match_constant@@Base+0x93>
  40a7b4:	cmp    BYTE PTR [rbx],0x20
  40a7b7:	jg     40a8c0 <flatcc_json_parser_match_constant@@Base+0x190>
  40a7bd:	je     40a8e0 <flatcc_json_parser_match_constant@@Base+0x1b0>
  40a7c3:	mov    rdx,rbp
  40a7c6:	mov    rsi,rbx
  40a7c9:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a7ce:	cmp    rbp,rax
  40a7d1:	je     40a879 <flatcc_json_parser_match_constant@@Base+0x149>
  40a7d7:	cmp    rbx,rax
  40a7da:	je     40a7f3 <flatcc_json_parser_match_constant@@Base+0xc3>
  40a7dc:	movzx  edx,BYTE PTR [rax]
  40a7df:	cmp    dl,0x5f
  40a7e2:	je     40a838 <flatcc_json_parser_match_constant@@Base+0x108>
  40a7e4:	test   dl,dl
  40a7e6:	js     40a838 <flatcc_json_parser_match_constant@@Base+0x108>
  40a7e8:	or     edx,0x20
  40a7eb:	sub    edx,0x61
  40a7ee:	cmp    dl,0x19
  40a7f1:	jbe    40a838 <flatcc_json_parser_match_constant@@Base+0x108>
  40a7f3:	mov    DWORD PTR [r13+0x0],0x0
  40a7fb:	movzx  edx,BYTE PTR [rax]
  40a7fe:	mov    ecx,edx
  40a800:	and    ecx,0xffffffdf
  40a803:	cmp    cl,0x5d
  40a806:	je     40a80f <flatcc_json_parser_match_constant@@Base+0xdf>
  40a808:	cmp    dl,0x2c
  40a80b:	cmovne rax,r12
  40a80f:	add    rsp,0x8
  40a813:	pop    rbx
  40a814:	pop    rbp
  40a815:	pop    r12
  40a817:	pop    r13
  40a819:	ret    
  40a81a:	nop    WORD PTR [rax+rax*1+0x0]
  40a820:	add    rsp,0x8
  40a824:	mov    rax,rsi
  40a827:	pop    rbx
  40a828:	pop    rbp
  40a829:	pop    r12
  40a82b:	pop    r13
  40a82d:	ret    
  40a82e:	xchg   ax,ax
  40a830:	cmp    dl,0x22
  40a833:	mov    rbx,rax
  40a836:	je     40a890 <flatcc_json_parser_match_constant@@Base+0x160>
  40a838:	mov    DWORD PTR [r13+0x0],0x1
  40a840:	add    rsp,0x8
  40a844:	pop    rbx
  40a845:	pop    rbp
  40a846:	pop    r12
  40a848:	pop    r13
  40a84a:	ret    
  40a84b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a850:	lea    rax,[rbx+0x1]
  40a854:	cmp    rdx,rax
  40a857:	je     40a879 <flatcc_json_parser_match_constant@@Base+0x149>
  40a859:	movzx  edx,BYTE PTR [rbx+0x1]
  40a85d:	cmp    dl,0x20
  40a860:	je     40a870 <flatcc_json_parser_match_constant@@Base+0x140>
  40a862:	jmp    40a830 <flatcc_json_parser_match_constant@@Base+0x100>
  40a864:	nop    DWORD PTR [rax+0x0]
  40a868:	movzx  edx,BYTE PTR [rax]
  40a86b:	cmp    dl,0x20
  40a86e:	jne    40a830 <flatcc_json_parser_match_constant@@Base+0x100>
  40a870:	add    rax,0x1
  40a874:	cmp    rbp,rax
  40a877:	jne    40a868 <flatcc_json_parser_match_constant@@Base+0x138>
  40a879:	mov    DWORD PTR [r13+0x0],0x0
  40a881:	mov    rax,rbp
  40a884:	jmp    40a80f <flatcc_json_parser_match_constant@@Base+0xdf>
  40a886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a890:	lea    rax,[rbx+0x1]
  40a894:	cmp    rax,0xffffffffffffffff
  40a898:	jge    40a8a2 <flatcc_json_parser_match_constant@@Base+0x172>
  40a89a:	cmp    BYTE PTR [rbx+0x1],0x20
  40a89e:	jg     40a8ac <flatcc_json_parser_match_constant@@Base+0x17c>
  40a8a0:	je     40a8d0 <flatcc_json_parser_match_constant@@Base+0x1a0>
  40a8a2:	xor    edx,edx
  40a8a4:	mov    rsi,rax
  40a8a7:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40a8ac:	mov    DWORD PTR [r13+0x0],0x0
  40a8b4:	add    rsp,0x8
  40a8b8:	pop    rbx
  40a8b9:	pop    rbp
  40a8ba:	pop    r12
  40a8bc:	pop    r13
  40a8be:	ret    
  40a8bf:	nop
  40a8c0:	cmp    rbx,rdx
  40a8c3:	mov    rax,rbx
  40a8c6:	je     40a879 <flatcc_json_parser_match_constant@@Base+0x149>
  40a8c8:	jmp    40a7f3 <flatcc_json_parser_match_constant@@Base+0xc3>
  40a8cd:	nop    DWORD PTR [rax]
  40a8d0:	cmp    BYTE PTR [rbx+0x2],0x20
  40a8d4:	jle    40a8a2 <flatcc_json_parser_match_constant@@Base+0x172>
  40a8d6:	lea    rax,[rbx+0x2]
  40a8da:	jmp    40a8ac <flatcc_json_parser_match_constant@@Base+0x17c>
  40a8dc:	nop    DWORD PTR [rax+0x0]
  40a8e0:	cmp    BYTE PTR [rbx+0x1],0x20
  40a8e4:	lea    rax,[rbx+0x1]
  40a8e8:	jle    40a7c3 <flatcc_json_parser_match_constant@@Base+0x93>
  40a8ee:	jmp    40a7ce <flatcc_json_parser_match_constant@@Base+0x9e>
  40a8f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a8fe:	xchg   ax,ax

000000000040a900 <flatcc_json_parser_double@@Base>:
  40a900:	cmp    rsi,rdx
  40a903:	mov    QWORD PTR [rcx],0x0
  40a90a:	je     40a9d8 <flatcc_json_parser_double@@Base+0xd8>
  40a910:	xor    eax,eax
  40a912:	cmp    BYTE PTR [rsi],0x2d
  40a915:	mov    r8,rdx
  40a918:	sete   al
  40a91b:	add    rax,rsi
  40a91e:	sub    r8,rax
  40a921:	cmp    r8,0x1
  40a925:	jle    40a93f <flatcc_json_parser_double@@Base+0x3f>
  40a927:	movzx  r8d,BYTE PTR [rax]
  40a92b:	cmp    r8b,0x2e
  40a92f:	je     40a9ca <flatcc_json_parser_double@@Base+0xca>
  40a935:	cmp    r8b,0x30
  40a939:	je     40a9c0 <flatcc_json_parser_double@@Base+0xc0>
  40a93f:	push   r13
  40a941:	push   r12
  40a943:	mov    r13,rdi
  40a946:	push   rbp
  40a947:	push   rbx
  40a948:	mov    rbx,rsi
  40a94b:	mov    rsi,rdx
  40a94e:	mov    rbp,rdx
  40a951:	mov    rdi,rbx
  40a954:	sub    rsp,0x8
  40a958:	sub    rsi,rbx
  40a95b:	mov    rdx,rcx
  40a95e:	mov    r12,rcx
  40a961:	call   409170 <grisu3_diy_fp_encode_double@@Base+0x380>
  40a966:	test   rax,rax
  40a969:	je     40a980 <flatcc_json_parser_double@@Base+0x80>
  40a96b:	cmp    rbx,rax
  40a96e:	je     40a980 <flatcc_json_parser_double@@Base+0x80>
  40a970:	add    rsp,0x8
  40a974:	pop    rbx
  40a975:	pop    rbp
  40a976:	pop    r12
  40a978:	pop    r13
  40a97a:	ret    
  40a97b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a980:	vmovsd xmm0,QWORD PTR [r12]
  40a986:	mov    ecx,0x6
  40a98b:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x46ed]        # 40f080 <flatcc_builder_padding_base@@Base+0x1240>
  40a993:	vucomisd xmm0,QWORD PTR [rip+0x46cd]        # 40f068 <flatcc_builder_padding_base@@Base+0x1228>
  40a99b:	jbe    40a9a2 <flatcc_json_parser_double@@Base+0xa2>
  40a99d:	mov    ecx,0x7
  40a9a2:	add    rsp,0x8
  40a9a6:	mov    rdx,rbp
  40a9a9:	mov    rsi,rbx
  40a9ac:	mov    rdi,r13
  40a9af:	pop    rbx
  40a9b0:	pop    rbp
  40a9b1:	pop    r12
  40a9b3:	pop    r13
  40a9b5:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40a9ba:	nop    WORD PTR [rax+rax*1+0x0]
  40a9c0:	cmp    BYTE PTR [rax+0x1],0x30
  40a9c4:	jne    40a93f <flatcc_json_parser_double@@Base+0x3f>
  40a9ca:	mov    ecx,0x6
  40a9cf:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40a9d4:	nop    DWORD PTR [rax+0x0]
  40a9d8:	mov    rax,rsi
  40a9db:	ret    
  40a9dc:	nop    DWORD PTR [rax+0x0]

000000000040a9e0 <flatcc_json_parser_float@@Base>:
  40a9e0:	push   r13
  40a9e2:	push   r12
  40a9e4:	push   rbp
  40a9e5:	push   rbx
  40a9e6:	mov    rbx,rsi
  40a9e9:	sub    rsp,0x18
  40a9ed:	mov    DWORD PTR [rcx],0x0
  40a9f3:	mov    rax,QWORD PTR fs:0x28
  40a9fc:	mov    QWORD PTR [rsp+0x8],rax
  40aa01:	xor    eax,eax
  40aa03:	cmp    rsi,rdx
  40aa06:	je     40ab08 <flatcc_json_parser_float@@Base+0x128>
  40aa0c:	xor    eax,eax
  40aa0e:	cmp    BYTE PTR [rsi],0x2d
  40aa11:	mov    rbp,rdx
  40aa14:	mov    r13,rdi
  40aa17:	mov    r12,rcx
  40aa1a:	sete   al
  40aa1d:	add    rax,rsi
  40aa20:	sub    rdx,rax
  40aa23:	cmp    rdx,0x1
  40aa27:	jle    40aa3e <flatcc_json_parser_float@@Base+0x5e>
  40aa29:	movzx  edx,BYTE PTR [rax]
  40aa2c:	cmp    dl,0x2e
  40aa2f:	je     40aad0 <flatcc_json_parser_float@@Base+0xf0>
  40aa35:	cmp    dl,0x30
  40aa38:	je     40aae8 <flatcc_json_parser_float@@Base+0x108>
  40aa3e:	mov    rsi,rbp
  40aa41:	mov    rdx,rsp
  40aa44:	mov    rdi,rbx
  40aa47:	sub    rsi,rbx
  40aa4a:	call   409170 <grisu3_diy_fp_encode_double@@Base+0x380>
  40aa4f:	vxorps xmm0,xmm0,xmm0
  40aa53:	vmovsd xmm1,QWORD PTR [rsp]
  40aa58:	vcvtsd2ss xmm0,xmm0,xmm1
  40aa5c:	vmovss DWORD PTR [r12],xmm0
  40aa62:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x4626]        # 40f090 <flatcc_builder_padding_base@@Base+0x1250>
  40aa6a:	vucomiss xmm0,DWORD PTR [rip+0x4636]        # 40f0a8 <flatcc_builder_padding_base@@Base+0x1268>
  40aa72:	jbe    40aac0 <flatcc_json_parser_float@@Base+0xe0>
  40aa74:	vxorpd xmm0,xmm0,xmm0
  40aa78:	vucomisd xmm0,xmm1
  40aa7c:	ja     40aaf8 <flatcc_json_parser_float@@Base+0x118>
  40aa7e:	vmovss xmm0,DWORD PTR [rip+0x461e]        # 40f0a4 <flatcc_builder_padding_base@@Base+0x1264>
  40aa86:	vmovss DWORD PTR [r12],xmm0
  40aa8c:	mov    ecx,0x7
  40aa91:	mov    rdx,rbp
  40aa94:	mov    rsi,rbx
  40aa97:	mov    rdi,r13
  40aa9a:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40aa9f:	mov    rcx,QWORD PTR [rsp+0x8]
  40aaa4:	xor    rcx,QWORD PTR fs:0x28
  40aaad:	jne    40ab0d <flatcc_json_parser_float@@Base+0x12d>
  40aaaf:	add    rsp,0x18
  40aab3:	pop    rbx
  40aab4:	pop    rbp
  40aab5:	pop    r12
  40aab7:	pop    r13
  40aab9:	ret    
  40aaba:	nop    WORD PTR [rax+rax*1+0x0]
  40aac0:	test   rax,rax
  40aac3:	je     40aad0 <flatcc_json_parser_float@@Base+0xf0>
  40aac5:	cmp    rbx,rax
  40aac8:	jne    40aa9f <flatcc_json_parser_float@@Base+0xbf>
  40aaca:	nop    WORD PTR [rax+rax*1+0x0]
  40aad0:	mov    ecx,0x6
  40aad5:	mov    rdx,rbp
  40aad8:	mov    rsi,rbx
  40aadb:	mov    rdi,r13
  40aade:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40aae3:	jmp    40aa9f <flatcc_json_parser_float@@Base+0xbf>
  40aae5:	nop    DWORD PTR [rax]
  40aae8:	cmp    BYTE PTR [rax+0x1],0x30
  40aaec:	jne    40aa3e <flatcc_json_parser_float@@Base+0x5e>
  40aaf2:	jmp    40aad0 <flatcc_json_parser_float@@Base+0xf0>
  40aaf4:	nop    DWORD PTR [rax+0x0]
  40aaf8:	vmovss xmm0,DWORD PTR [rip+0x45a0]        # 40f0a0 <flatcc_builder_padding_base@@Base+0x1260>
  40ab00:	jmp    40aa86 <flatcc_json_parser_float@@Base+0xa6>
  40ab02:	nop    WORD PTR [rax+rax*1+0x0]
  40ab08:	mov    rax,rsi
  40ab0b:	jmp    40aa9f <flatcc_json_parser_float@@Base+0xbf>
  40ab0d:	call   403060 <__stack_chk_fail@plt>
  40ab12:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40ab1d:	nop    DWORD PTR [rax]

000000000040ab20 <flatcc_json_parser_generic_json@@Base>:
  40ab20:	push   r15
  40ab22:	push   r14
  40ab24:	mov    r10,rsi
  40ab27:	push   r13
  40ab29:	push   r12
  40ab2b:	push   rbp
  40ab2c:	push   rbx
  40ab2d:	sub    rsp,0x238
  40ab34:	mov    rax,QWORD PTR fs:0x28
  40ab3d:	mov    QWORD PTR [rsp+0x228],rax
  40ab45:	xor    eax,eax
  40ab47:	cmp    rsi,rdx
  40ab4a:	je     40b49d <flatcc_json_parser_generic_json@@Base+0x97d>
  40ab50:	lea    r12,[rsp+0x20]
  40ab55:	mov    r15,rdx
  40ab58:	movzx  edx,BYTE PTR [rsi]
  40ab5b:	lea    r13,[rsp+0x1c]
  40ab60:	mov    rbx,rdi
  40ab63:	lea    rax,[r12+0x200]
  40ab6b:	mov    r14,r12
  40ab6e:	mov    QWORD PTR [rsp],rax
  40ab72:	cmp    r14,r12
  40ab75:	je     40ac04 <flatcc_json_parser_generic_json@@Base+0xe4>
  40ab7b:	cmp    BYTE PTR [r14-0x1],0x7d
  40ab80:	je     40aff0 <flatcc_json_parser_generic_json@@Base+0x4d0>
  40ab86:	cmp    dl,0x39
  40ab89:	jle    40ac10 <flatcc_json_parser_generic_json@@Base+0xf0>
  40ab8f:	cmp    dl,0x5b
  40ab92:	je     40af88 <flatcc_json_parser_generic_json@@Base+0x468>
  40ab98:	cmp    dl,0x7b
  40ab9b:	jne    40acf0 <flatcc_json_parser_generic_json@@Base+0x1d0>
  40aba1:	cmp    r14,QWORD PTR [rsp]
  40aba5:	je     40b4ad <flatcc_json_parser_generic_json@@Base+0x98d>
  40abab:	lea    rsi,[r10+0x1]
  40abaf:	mov    rax,r15
  40abb2:	lea    rbp,[r14+0x1]
  40abb6:	mov    BYTE PTR [r14],0x7d
  40abba:	sub    rax,rsi
  40abbd:	cmp    rax,0x1
  40abc1:	jle    40abd4 <flatcc_json_parser_generic_json@@Base+0xb4>
  40abc3:	cmp    BYTE PTR [r10+0x1],0x20
  40abc8:	jg     40b290 <flatcc_json_parser_generic_json@@Base+0x770>
  40abce:	je     40b135 <flatcc_json_parser_generic_json@@Base+0x615>
  40abd4:	mov    rdx,r15
  40abd7:	mov    rdi,rbx
  40abda:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40abdf:	mov    r10,rax
  40abe2:	cmp    r15,r10
  40abe5:	je     40b298 <flatcc_json_parser_generic_json@@Base+0x778>
  40abeb:	movzx  edx,BYTE PTR [r10]
  40abef:	cmp    dl,0x7d
  40abf2:	je     40afdf <flatcc_json_parser_generic_json@@Base+0x4bf>
  40abf8:	mov    r14,rbp
  40abfb:	cmp    r14,r12
  40abfe:	jne    40ab7b <flatcc_json_parser_generic_json@@Base+0x5b>
  40ac04:	cmp    dl,0x39
  40ac07:	jg     40b100 <flatcc_json_parser_generic_json@@Base+0x5e0>
  40ac0d:	nop    DWORD PTR [rax]
  40ac10:	cmp    dl,0x30
  40ac13:	jge    40ac75 <flatcc_json_parser_generic_json@@Base+0x155>
  40ac15:	cmp    dl,0x22
  40ac18:	jne    40ac70 <flatcc_json_parser_generic_json@@Base+0x150>
  40ac1a:	lea    rax,[r10+0x1]
  40ac1e:	cmp    r15,rax
  40ac21:	jne    40ac62 <flatcc_json_parser_generic_json@@Base+0x142>
  40ac23:	jmp    40b18b <flatcc_json_parser_generic_json@@Base+0x66b>
  40ac28:	nop    DWORD PTR [rax+rax*1+0x0]
  40ac30:	mov    rdx,r15
  40ac33:	mov    rsi,rax
  40ac36:	mov    rdi,rbx
  40ac39:	call   409c00 <flatcc_json_parser_string_part@@Base>
  40ac3e:	cmp    r15,rax
  40ac41:	je     40ac48 <flatcc_json_parser_generic_json@@Base+0x128>
  40ac43:	cmp    BYTE PTR [rax],0x22
  40ac46:	je     40ac67 <flatcc_json_parser_generic_json@@Base+0x147>
  40ac48:	mov    rcx,r13
  40ac4b:	mov    rdx,r15
  40ac4e:	mov    rsi,rax
  40ac51:	mov    rdi,rbx
  40ac54:	call   40a3c0 <flatcc_json_parser_string_escape@@Base>
  40ac59:	cmp    r15,rax
  40ac5c:	je     40b188 <flatcc_json_parser_generic_json@@Base+0x668>
  40ac62:	cmp    BYTE PTR [rax],0x22
  40ac65:	jne    40ac30 <flatcc_json_parser_generic_json@@Base+0x110>
  40ac67:	add    rax,0x1
  40ac6b:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40ac70:	cmp    dl,0x2d
  40ac73:	jne    40acf0 <flatcc_json_parser_generic_json@@Base+0x1d0>
  40ac75:	cmp    r15,r10
  40ac78:	je     40b406 <flatcc_json_parser_generic_json@@Base+0x8e6>
  40ac7e:	cmp    dl,0x2d
  40ac81:	je     40b2a0 <flatcc_json_parser_generic_json@@Base+0x780>
  40ac87:	movzx  eax,BYTE PTR [r10]
  40ac8b:	cmp    al,0x30
  40ac8d:	je     40b1a3 <flatcc_json_parser_generic_json@@Base+0x683>
  40ac93:	sub    eax,0x31
  40ac96:	cmp    al,0x8
  40ac98:	ja     40b364 <flatcc_json_parser_generic_json@@Base+0x844>
  40ac9e:	lea    rax,[r10+0x1]
  40aca2:	cmp    r15,rax
  40aca5:	je     40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40aca7:	movzx  edx,BYTE PTR [r10+0x1]
  40acac:	lea    ecx,[rdx-0x30]
  40acaf:	cmp    cl,0x9
  40acb2:	jbe    40accf <flatcc_json_parser_generic_json@@Base+0x1af>
  40acb4:	jmp    40b1b5 <flatcc_json_parser_generic_json@@Base+0x695>
  40acb9:	nop    DWORD PTR [rax+0x0]
  40acc0:	movzx  edx,BYTE PTR [rax]
  40acc3:	lea    ecx,[rdx-0x30]
  40acc6:	cmp    cl,0x9
  40acc9:	ja     40b1b5 <flatcc_json_parser_generic_json@@Base+0x695>
  40accf:	add    rax,0x1
  40acd3:	cmp    r15,rax
  40acd6:	jne    40acc0 <flatcc_json_parser_generic_json@@Base+0x1a0>
  40acd8:	mov    rax,r15
  40acdb:	mov    ecx,0x6
  40ace0:	mov    rdx,r15
  40ace3:	mov    rsi,rax
  40ace6:	mov    rdi,rbx
  40ace9:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40acee:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40acf0:	mov    rsi,r10
  40acf3:	mov    rdx,r15
  40acf6:	mov    rdi,rbx
  40acf9:	mov    QWORD PTR [rsp+0x8],r10
  40acfe:	call   40a670 <flatcc_json_parser_skip_constant@@Base>
  40ad03:	mov    r10,QWORD PTR [rsp+0x8]
  40ad08:	cmp    rax,r10
  40ad0b:	je     40b4f6 <flatcc_json_parser_generic_json@@Base+0x9d6>
  40ad11:	cmp    r15,rax
  40ad14:	jne    40ad7c <flatcc_json_parser_generic_json@@Base+0x25c>
  40ad16:	jmp    40b406 <flatcc_json_parser_generic_json@@Base+0x8e6>
  40ad1b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ad20:	cmp    rdx,0x1
  40ad24:	jle    40ad31 <flatcc_json_parser_generic_json@@Base+0x211>
  40ad26:	cmp    BYTE PTR [rax],0x20
  40ad29:	jg     40ad3f <flatcc_json_parser_generic_json@@Base+0x21f>
  40ad2b:	je     40ae10 <flatcc_json_parser_generic_json@@Base+0x2f0>
  40ad31:	mov    rdx,r15
  40ad34:	mov    rsi,rax
  40ad37:	mov    rdi,rbx
  40ad3a:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40ad3f:	cmp    r15,rax
  40ad42:	je     40ae30 <flatcc_json_parser_generic_json@@Base+0x310>
  40ad48:	movzx  edx,BYTE PTR [rax]
  40ad4b:	cmp    dl,0x2c
  40ad4e:	je     40ae80 <flatcc_json_parser_generic_json@@Base+0x360>
  40ad54:	cmp    dl,0x7d
  40ad57:	je     40ade0 <flatcc_json_parser_generic_json@@Base+0x2c0>
  40ad5d:	mov    ecx,0xa
  40ad62:	mov    rdx,r15
  40ad65:	mov    rsi,rax
  40ad68:	mov    rdi,rbx
  40ad6b:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40ad70:	cmp    r15,rax
  40ad73:	je     40ae30 <flatcc_json_parser_generic_json@@Base+0x310>
  40ad79:	mov    r14,rbp
  40ad7c:	cmp    r14,r12
  40ad7f:	je     40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40ad85:	mov    rdx,r15
  40ad88:	lea    rbp,[r14-0x1]
  40ad8c:	sub    rdx,rax
  40ad8f:	cmp    BYTE PTR [r14-0x1],0x5d
  40ad94:	jne    40ad20 <flatcc_json_parser_generic_json@@Base+0x200>
  40ad96:	cmp    rdx,0x1
  40ad9a:	jle    40ada7 <flatcc_json_parser_generic_json@@Base+0x287>
  40ad9c:	cmp    BYTE PTR [rax],0x20
  40ad9f:	jg     40adb5 <flatcc_json_parser_generic_json@@Base+0x295>
  40ada1:	je     40af10 <flatcc_json_parser_generic_json@@Base+0x3f0>
  40ada7:	mov    rdx,r15
  40adaa:	mov    rsi,rax
  40adad:	mov    rdi,rbx
  40adb0:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40adb5:	cmp    r15,rax
  40adb8:	je     40ae30 <flatcc_json_parser_generic_json@@Base+0x310>
  40adba:	movzx  edx,BYTE PTR [rax]
  40adbd:	cmp    dl,0x2c
  40adc0:	je     40af28 <flatcc_json_parser_generic_json@@Base+0x408>
  40adc6:	cmp    dl,0x5d
  40adc9:	je     40ade0 <flatcc_json_parser_generic_json@@Base+0x2c0>
  40adcb:	mov    ecx,0x9
  40add0:	mov    rdx,r15
  40add3:	mov    rsi,rax
  40add6:	mov    rdi,rbx
  40add9:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40adde:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40ade0:	lea    rsi,[rax+0x1]
  40ade4:	mov    rdx,r15
  40ade7:	sub    rdx,rsi
  40adea:	cmp    rdx,0x1
  40adee:	jle    40ae00 <flatcc_json_parser_generic_json@@Base+0x2e0>
  40adf0:	cmp    BYTE PTR [rax+0x1],0x20
  40adf4:	jg     40af00 <flatcc_json_parser_generic_json@@Base+0x3e0>
  40adfa:	je     40af70 <flatcc_json_parser_generic_json@@Base+0x450>
  40ae00:	mov    rdx,r15
  40ae03:	mov    rdi,rbx
  40ae06:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40ae0b:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40ae10:	cmp    BYTE PTR [rax+0x1],0x20
  40ae14:	jle    40ad31 <flatcc_json_parser_generic_json@@Base+0x211>
  40ae1a:	add    rax,0x1
  40ae1e:	cmp    r15,rax
  40ae21:	jne    40ad48 <flatcc_json_parser_generic_json@@Base+0x228>
  40ae27:	nop    WORD PTR [rax+rax*1+0x0]
  40ae30:	mov    rax,r15
  40ae33:	cmp    rbp,r12
  40ae36:	je     40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40ae38:	xor    ecx,ecx
  40ae3a:	cmp    BYTE PTR [rbp-0x1],0x5d
  40ae3e:	mov    rdx,r15
  40ae41:	mov    rsi,r15
  40ae44:	mov    rdi,rbx
  40ae47:	setne  cl
  40ae4a:	add    ecx,0x9
  40ae4d:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40ae52:	mov    rcx,QWORD PTR [rsp+0x228]
  40ae5a:	xor    rcx,QWORD PTR fs:0x28
  40ae63:	jne    40b556 <flatcc_json_parser_generic_json@@Base+0xa36>
  40ae69:	add    rsp,0x238
  40ae70:	pop    rbx
  40ae71:	pop    rbp
  40ae72:	pop    r12
  40ae74:	pop    r13
  40ae76:	pop    r14
  40ae78:	pop    r15
  40ae7a:	ret    
  40ae7b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ae80:	lea    r10,[rax+0x1]
  40ae84:	mov    rdx,r15
  40ae87:	sub    rdx,r10
  40ae8a:	cmp    rdx,0x1
  40ae8e:	jle    40ae9c <flatcc_json_parser_generic_json@@Base+0x37c>
  40ae90:	cmp    BYTE PTR [rax+0x1],0x20
  40ae94:	jg     40aead <flatcc_json_parser_generic_json@@Base+0x38d>
  40ae96:	je     40b240 <flatcc_json_parser_generic_json@@Base+0x720>
  40ae9c:	mov    rsi,r10
  40ae9f:	mov    rdx,r15
  40aea2:	mov    rdi,rbx
  40aea5:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40aeaa:	mov    r10,rax
  40aead:	cmp    r15,r10
  40aeb0:	je     40b34c <flatcc_json_parser_generic_json@@Base+0x82c>
  40aeb6:	movzx  edx,BYTE PTR [r10]
  40aeba:	cmp    dl,0x7d
  40aebd:	jne    40ab72 <flatcc_json_parser_generic_json@@Base+0x52>
  40aec3:	lea    rax,[r10+0x1]
  40aec7:	mov    rdx,r15
  40aeca:	sub    rdx,rax
  40aecd:	cmp    rdx,0x1
  40aed1:	jle    40aee4 <flatcc_json_parser_generic_json@@Base+0x3c4>
  40aed3:	cmp    BYTE PTR [r10+0x1],0x20
  40aed8:	jg     40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40aede:	je     40b469 <flatcc_json_parser_generic_json@@Base+0x949>
  40aee4:	mov    rdx,r15
  40aee7:	mov    rsi,rax
  40aeea:	mov    rdi,rbx
  40aeed:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40aef2:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40aef7:	nop    WORD PTR [rax+rax*1+0x0]
  40af00:	mov    rax,rsi
  40af03:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40af08:	nop    DWORD PTR [rax+rax*1+0x0]
  40af10:	cmp    BYTE PTR [rax+0x1],0x20
  40af14:	jle    40ada7 <flatcc_json_parser_generic_json@@Base+0x287>
  40af1a:	add    rax,0x1
  40af1e:	jmp    40adb5 <flatcc_json_parser_generic_json@@Base+0x295>
  40af23:	nop    DWORD PTR [rax+rax*1+0x0]
  40af28:	lea    r10,[rax+0x1]
  40af2c:	mov    rdx,r15
  40af2f:	sub    rdx,r10
  40af32:	cmp    rdx,0x1
  40af36:	jle    40af44 <flatcc_json_parser_generic_json@@Base+0x424>
  40af38:	cmp    BYTE PTR [rax+0x1],0x20
  40af3c:	jg     40af55 <flatcc_json_parser_generic_json@@Base+0x435>
  40af3e:	je     40b10e <flatcc_json_parser_generic_json@@Base+0x5ee>
  40af44:	mov    rsi,r10
  40af47:	mov    rdx,r15
  40af4a:	mov    rdi,rbx
  40af4d:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40af52:	mov    r10,rax
  40af55:	cmp    r15,r10
  40af58:	je     40b47d <flatcc_json_parser_generic_json@@Base+0x95d>
  40af5e:	movzx  edx,BYTE PTR [r10]
  40af62:	cmp    dl,0x5d
  40af65:	jne    40ab72 <flatcc_json_parser_generic_json@@Base+0x52>
  40af6b:	jmp    40aec3 <flatcc_json_parser_generic_json@@Base+0x3a3>
  40af70:	cmp    BYTE PTR [rax+0x2],0x20
  40af74:	jle    40ae00 <flatcc_json_parser_generic_json@@Base+0x2e0>
  40af7a:	add    rax,0x2
  40af7e:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40af83:	nop    DWORD PTR [rax+rax*1+0x0]
  40af88:	cmp    r14,QWORD PTR [rsp]
  40af8c:	je     40b4ad <flatcc_json_parser_generic_json@@Base+0x98d>
  40af92:	lea    rsi,[r10+0x1]
  40af96:	mov    rax,r15
  40af99:	lea    rbp,[r14+0x1]
  40af9d:	mov    BYTE PTR [r14],0x5d
  40afa1:	sub    rax,rsi
  40afa4:	cmp    rax,0x1
  40afa8:	jle    40afbb <flatcc_json_parser_generic_json@@Base+0x49b>
  40afaa:	cmp    BYTE PTR [r10+0x1],0x20
  40afaf:	jg     40b288 <flatcc_json_parser_generic_json@@Base+0x768>
  40afb5:	je     40b121 <flatcc_json_parser_generic_json@@Base+0x601>
  40afbb:	mov    rdx,r15
  40afbe:	mov    rdi,rbx
  40afc1:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40afc6:	mov    r10,rax
  40afc9:	cmp    r15,r10
  40afcc:	je     40b298 <flatcc_json_parser_generic_json@@Base+0x778>
  40afd2:	movzx  edx,BYTE PTR [r10]
  40afd6:	cmp    dl,0x5d
  40afd9:	jne    40abf8 <flatcc_json_parser_generic_json@@Base+0xd8>
  40afdf:	mov    r14,rbp
  40afe2:	mov    rax,r10
  40afe5:	jmp    40ad7c <flatcc_json_parser_generic_json@@Base+0x25c>
  40afea:	nop    WORD PTR [rax+rax*1+0x0]
  40aff0:	cmp    dl,0x22
  40aff3:	je     40b37c <flatcc_json_parser_generic_json@@Base+0x85c>
  40aff9:	cmp    dl,0x2e
  40affc:	je     40b411 <flatcc_json_parser_generic_json@@Base+0x8f1>
  40b002:	mov    DWORD PTR [rbx+0x14],0x1
  40b009:	cmp    r15,r10
  40b00c:	mov    rax,r15
  40b00f:	je     40b071 <flatcc_json_parser_generic_json@@Base+0x551>
  40b011:	movzx  ecx,BYTE PTR [r10]
  40b015:	lea    rdx,[r10+0x1]
  40b019:	cmp    cl,0x20
  40b01c:	jle    40b53e <flatcc_json_parser_generic_json@@Base+0xa1e>
  40b022:	nop    WORD PTR [rax+rax*1+0x0]
  40b028:	lea    esi,[rcx-0x2e]
  40b02b:	lea    rax,[rdx-0x1]
  40b02f:	cmp    sil,0x31
  40b033:	jbe    40b150 <flatcc_json_parser_generic_json@@Base+0x630>
  40b039:	mov    esi,ecx
  40b03b:	or     esi,0x20
  40b03e:	sub    esi,0x61
  40b041:	cmp    sil,0x19
  40b045:	jbe    40b164 <flatcc_json_parser_generic_json@@Base+0x644>
  40b04b:	cmp    cl,0x2e
  40b04e:	je     40b4c5 <flatcc_json_parser_generic_json@@Base+0x9a5>
  40b054:	mov    rdx,r15
  40b057:	sub    rdx,rax
  40b05a:	cmp    rdx,0x1
  40b05e:	jle    40b071 <flatcc_json_parser_generic_json@@Base+0x551>
  40b060:	movzx  ecx,BYTE PTR [rax]
  40b063:	cmp    cl,0x20
  40b066:	jg     40b07f <flatcc_json_parser_generic_json@@Base+0x55f>
  40b068:	cmp    cl,0x20
  40b06b:	je     40b440 <flatcc_json_parser_generic_json@@Base+0x920>
  40b071:	mov    rdx,r15
  40b074:	mov    rsi,rax
  40b077:	mov    rdi,rbx
  40b07a:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40b07f:	cmp    r15,rax
  40b082:	je     40b526 <flatcc_json_parser_generic_json@@Base+0xa06>
  40b088:	cmp    BYTE PTR [rax],0x3a
  40b08b:	jne    40b50e <flatcc_json_parser_generic_json@@Base+0x9ee>
  40b091:	lea    r10,[rax+0x1]
  40b095:	mov    rdx,r15
  40b098:	sub    rdx,r10
  40b09b:	cmp    rdx,0x1
  40b09f:	jle    40b0b0 <flatcc_json_parser_generic_json@@Base+0x590>
  40b0a1:	movzx  edx,BYTE PTR [rax+0x1]
  40b0a5:	cmp    dl,0x20
  40b0a8:	jg     40b0c4 <flatcc_json_parser_generic_json@@Base+0x5a4>
  40b0aa:	je     40b453 <flatcc_json_parser_generic_json@@Base+0x933>
  40b0b0:	mov    rdx,r15
  40b0b3:	mov    rsi,r10
  40b0b6:	mov    rdi,rbx
  40b0b9:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40b0be:	movzx  edx,BYTE PTR [rax]
  40b0c1:	mov    r10,rax
  40b0c4:	cmp    dl,0x39
  40b0c7:	jg     40ab8f <flatcc_json_parser_generic_json@@Base+0x6f>
  40b0cd:	cmp    dl,0x30
  40b0d0:	jge    40ac75 <flatcc_json_parser_generic_json@@Base+0x155>
  40b0d6:	cmp    dl,0x22
  40b0d9:	jne    40ac70 <flatcc_json_parser_generic_json@@Base+0x150>
  40b0df:	cmp    r10,r15
  40b0e2:	jne    40ac1a <flatcc_json_parser_generic_json@@Base+0xfa>
  40b0e8:	mov    ecx,0x10
  40b0ed:	mov    rdx,r15
  40b0f0:	mov    rsi,r15
  40b0f3:	mov    rdi,rbx
  40b0f6:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b0fb:	jmp    40ac1e <flatcc_json_parser_generic_json@@Base+0xfe>
  40b100:	cmp    dl,0x5b
  40b103:	jne    40ab98 <flatcc_json_parser_generic_json@@Base+0x78>
  40b109:	jmp    40af92 <flatcc_json_parser_generic_json@@Base+0x472>
  40b10e:	cmp    BYTE PTR [rax+0x2],0x20
  40b112:	jle    40af44 <flatcc_json_parser_generic_json@@Base+0x424>
  40b118:	lea    r10,[rax+0x2]
  40b11c:	jmp    40af55 <flatcc_json_parser_generic_json@@Base+0x435>
  40b121:	cmp    BYTE PTR [r10+0x2],0x20
  40b126:	jle    40afbb <flatcc_json_parser_generic_json@@Base+0x49b>
  40b12c:	add    r10,0x2
  40b130:	jmp    40afc9 <flatcc_json_parser_generic_json@@Base+0x4a9>
  40b135:	cmp    BYTE PTR [r10+0x2],0x20
  40b13a:	jle    40abd4 <flatcc_json_parser_generic_json@@Base+0xb4>
  40b140:	add    r10,0x2
  40b144:	jmp    40abe2 <flatcc_json_parser_generic_json@@Base+0xc2>
  40b149:	nop    DWORD PTR [rax+0x0]
  40b150:	movabs rdi,0x2000000000ffd
  40b15a:	bt     rdi,rsi
  40b15e:	jae    40b039 <flatcc_json_parser_generic_json@@Base+0x519>
  40b164:	cmp    r15,rdx
  40b167:	mov    rax,rdx
  40b16a:	je     40b495 <flatcc_json_parser_generic_json@@Base+0x975>
  40b170:	movzx  esi,BYTE PTR [rdx]
  40b173:	add    rdx,0x1
  40b177:	cmp    sil,0x20
  40b17b:	jle    40b04b <flatcc_json_parser_generic_json@@Base+0x52b>
  40b181:	mov    ecx,esi
  40b183:	jmp    40b028 <flatcc_json_parser_generic_json@@Base+0x508>
  40b188:	mov    rax,r15
  40b18b:	mov    ecx,0x14
  40b190:	mov    rdx,r15
  40b193:	mov    rsi,rax
  40b196:	mov    rdi,rbx
  40b199:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b19e:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b1a3:	lea    rax,[r10+0x1]
  40b1a7:	cmp    r15,rax
  40b1aa:	je     40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b1b0:	movzx  edx,BYTE PTR [r10+0x1]
  40b1b5:	cmp    dl,0x2e
  40b1b8:	je     40b2fa <flatcc_json_parser_generic_json@@Base+0x7da>
  40b1be:	mov    ecx,edx
  40b1c0:	and    ecx,0xffffffdf
  40b1c3:	cmp    cl,0x45
  40b1c6:	jne    40b253 <flatcc_json_parser_generic_json@@Base+0x733>
  40b1cc:	lea    rsi,[rax+0x1]
  40b1d0:	cmp    r15,rsi
  40b1d3:	je     40b2ad <flatcc_json_parser_generic_json@@Base+0x78d>
  40b1d9:	movzx  edx,BYTE PTR [rax+0x1]
  40b1dd:	lea    ecx,[rdx-0x2b]
  40b1e0:	and    ecx,0xfd
  40b1e6:	jne    40b1f9 <flatcc_json_parser_generic_json@@Base+0x6d9>
  40b1e8:	lea    rsi,[rax+0x2]
  40b1ec:	cmp    r15,rsi
  40b1ef:	je     40b2e5 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40b1f5:	movzx  edx,BYTE PTR [rax+0x2]
  40b1f9:	sub    edx,0x30
  40b1fc:	cmp    dl,0x9
  40b1ff:	ja     40b2e5 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40b205:	lea    rax,[rsi+0x1]
  40b209:	cmp    r15,rax
  40b20c:	je     40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b212:	movzx  edx,BYTE PTR [rsi+0x1]
  40b216:	lea    ecx,[rdx-0x30]
  40b219:	cmp    cl,0x9
  40b21c:	jbe    40b22b <flatcc_json_parser_generic_json@@Base+0x70b>
  40b21e:	jmp    40b253 <flatcc_json_parser_generic_json@@Base+0x733>
  40b220:	movzx  edx,BYTE PTR [rax]
  40b223:	lea    ecx,[rdx-0x30]
  40b226:	cmp    cl,0x9
  40b229:	ja     40b253 <flatcc_json_parser_generic_json@@Base+0x733>
  40b22b:	add    rax,0x1
  40b22f:	cmp    r15,rax
  40b232:	jne    40b220 <flatcc_json_parser_generic_json@@Base+0x700>
  40b234:	jmp    40acd8 <flatcc_json_parser_generic_json@@Base+0x1b8>
  40b239:	nop    DWORD PTR [rax+0x0]
  40b240:	cmp    BYTE PTR [rax+0x2],0x20
  40b244:	jle    40ae9c <flatcc_json_parser_generic_json@@Base+0x37c>
  40b24a:	lea    r10,[rax+0x2]
  40b24e:	jmp    40aead <flatcc_json_parser_generic_json@@Base+0x38d>
  40b253:	cmp    dl,0x20
  40b256:	je     40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b25c:	jle    40b2c5 <flatcc_json_parser_generic_json@@Base+0x7a5>
  40b25e:	cmp    dl,0x3a
  40b261:	je     40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b267:	jle    40b3cc <flatcc_json_parser_generic_json@@Base+0x8ac>
  40b26d:	cmp    dl,0x5d
  40b270:	je     40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b276:	cmp    dl,0x7d
  40b279:	jne    40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b27f:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b284:	nop    DWORD PTR [rax+0x0]
  40b288:	mov    r10,rsi
  40b28b:	jmp    40afc9 <flatcc_json_parser_generic_json@@Base+0x4a9>
  40b290:	mov    r10,rsi
  40b293:	jmp    40abe2 <flatcc_json_parser_generic_json@@Base+0xc2>
  40b298:	mov    rax,r15
  40b29b:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b2a0:	add    r10,0x1
  40b2a4:	cmp    r15,r10
  40b2a7:	jne    40ac87 <flatcc_json_parser_generic_json@@Base+0x167>
  40b2ad:	mov    ecx,0x6
  40b2b2:	mov    rdx,r15
  40b2b5:	mov    rsi,r15
  40b2b8:	mov    rdi,rbx
  40b2bb:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b2c0:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b2c5:	cmp    dl,0x9
  40b2c8:	jl     40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b2ce:	cmp    dl,0xb
  40b2d1:	jle    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b2d7:	cmp    dl,0xd
  40b2da:	jne    40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b2e0:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b2e5:	mov    ecx,0x6
  40b2ea:	mov    rdx,r15
  40b2ed:	mov    rdi,rbx
  40b2f0:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b2f5:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b2fa:	movzx  ecx,BYTE PTR [rax+0x1]
  40b2fe:	lea    edx,[rcx-0x30]
  40b301:	cmp    dl,0x9
  40b304:	ja     40b4dd <flatcc_json_parser_generic_json@@Base+0x9bd>
  40b30a:	lea    rcx,[rax+0x2]
  40b30e:	cmp    r15,rcx
  40b311:	je     40acd8 <flatcc_json_parser_generic_json@@Base+0x1b8>
  40b317:	movzx  edx,BYTE PTR [rax+0x2]
  40b31b:	lea    eax,[rdx-0x30]
  40b31e:	cmp    al,0x9
  40b320:	jbe    40b33e <flatcc_json_parser_generic_json@@Base+0x81e>
  40b322:	jmp    40b4a5 <flatcc_json_parser_generic_json@@Base+0x985>
  40b327:	nop    WORD PTR [rax+rax*1+0x0]
  40b330:	movzx  edx,BYTE PTR [rcx]
  40b333:	lea    eax,[rdx-0x30]
  40b336:	cmp    al,0x9
  40b338:	ja     40b4a5 <flatcc_json_parser_generic_json@@Base+0x985>
  40b33e:	add    rcx,0x1
  40b342:	cmp    r15,rcx
  40b345:	jne    40b330 <flatcc_json_parser_generic_json@@Base+0x810>
  40b347:	jmp    40acd8 <flatcc_json_parser_generic_json@@Base+0x1b8>
  40b34c:	mov    ecx,0xa
  40b351:	mov    rdx,r15
  40b354:	mov    rsi,r15
  40b357:	mov    rdi,rbx
  40b35a:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b35f:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40b364:	mov    ecx,0x6
  40b369:	mov    rdx,r15
  40b36c:	mov    rsi,r10
  40b36f:	mov    rdi,rbx
  40b372:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b377:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b37c:	add    r10,0x1
  40b380:	mov    DWORD PTR [rbx+0x14],0x0
  40b387:	cmp    r15,r10
  40b38a:	je     40b3f8 <flatcc_json_parser_generic_json@@Base+0x8d8>
  40b38c:	movzx  edx,BYTE PTR [r10]
  40b390:	cmp    dl,0x22
  40b393:	jne    40b3b2 <flatcc_json_parser_generic_json@@Base+0x892>
  40b395:	jmp    40b3fd <flatcc_json_parser_generic_json@@Base+0x8dd>
  40b397:	nop    WORD PTR [rax+rax*1+0x0]
  40b3a0:	lea    r10,[rax+0x1]
  40b3a4:	cmp    r15,r10
  40b3a7:	je     40b3f8 <flatcc_json_parser_generic_json@@Base+0x8d8>
  40b3a9:	movzx  edx,BYTE PTR [rax+0x1]
  40b3ad:	cmp    dl,0x22
  40b3b0:	je     40b3fd <flatcc_json_parser_generic_json@@Base+0x8dd>
  40b3b2:	cmp    dl,0x5c
  40b3b5:	mov    rax,r10
  40b3b8:	jne    40b3a0 <flatcc_json_parser_generic_json@@Base+0x880>
  40b3ba:	mov    rdx,r15
  40b3bd:	sub    rdx,r10
  40b3c0:	cmp    rdx,0x1
  40b3c4:	jle    40b3da <flatcc_json_parser_generic_json@@Base+0x8ba>
  40b3c6:	add    rax,0x1
  40b3ca:	jmp    40b3a0 <flatcc_json_parser_generic_json@@Base+0x880>
  40b3cc:	cmp    dl,0x2c
  40b3cf:	jne    40acdb <flatcc_json_parser_generic_json@@Base+0x1bb>
  40b3d5:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b3da:	cmp    BYTE PTR [r10],0x22
  40b3de:	je     40b3fd <flatcc_json_parser_generic_json@@Base+0x8dd>
  40b3e0:	mov    ecx,0x14
  40b3e5:	mov    rdx,r15
  40b3e8:	mov    rsi,r10
  40b3eb:	mov    rdi,rbx
  40b3ee:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b3f3:	jmp    40b054 <flatcc_json_parser_generic_json@@Base+0x534>
  40b3f8:	mov    r10,r15
  40b3fb:	jmp    40b3e0 <flatcc_json_parser_generic_json@@Base+0x8c0>
  40b3fd:	lea    rax,[r10+0x1]
  40b401:	jmp    40b054 <flatcc_json_parser_generic_json@@Base+0x534>
  40b406:	mov    rbp,r14
  40b409:	mov    rax,r15
  40b40c:	jmp    40ae33 <flatcc_json_parser_generic_json@@Base+0x313>
  40b411:	mov    rsi,r10
  40b414:	mov    ecx,0x5
  40b419:	mov    rdx,r15
  40b41c:	mov    rdi,rbx
  40b41f:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b424:	mov    r10,rax
  40b427:	mov    eax,DWORD PTR [rbx+0x14]
  40b42a:	test   eax,eax
  40b42c:	je     40b387 <flatcc_json_parser_generic_json@@Base+0x867>
  40b432:	jmp    40b009 <flatcc_json_parser_generic_json@@Base+0x4e9>
  40b437:	nop    WORD PTR [rax+rax*1+0x0]
  40b440:	cmp    BYTE PTR [rax+0x1],0x20
  40b444:	jle    40b071 <flatcc_json_parser_generic_json@@Base+0x551>
  40b44a:	add    rax,0x1
  40b44e:	jmp    40b07f <flatcc_json_parser_generic_json@@Base+0x55f>
  40b453:	movzx  edx,BYTE PTR [rax+0x2]
  40b457:	cmp    dl,0x20
  40b45a:	jle    40b0b0 <flatcc_json_parser_generic_json@@Base+0x590>
  40b460:	lea    r10,[rax+0x2]
  40b464:	jmp    40b0c4 <flatcc_json_parser_generic_json@@Base+0x5a4>
  40b469:	cmp    BYTE PTR [r10+0x2],0x20
  40b46e:	jle    40aee4 <flatcc_json_parser_generic_json@@Base+0x3c4>
  40b474:	lea    rax,[r10+0x2]
  40b478:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40b47d:	mov    ecx,0x9
  40b482:	mov    rdx,r15
  40b485:	mov    rsi,r15
  40b488:	mov    rdi,rbx
  40b48b:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b490:	jmp    40ad70 <flatcc_json_parser_generic_json@@Base+0x250>
  40b495:	mov    rax,r15
  40b498:	jmp    40b04b <flatcc_json_parser_generic_json@@Base+0x52b>
  40b49d:	mov    rax,rsi
  40b4a0:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b4a5:	mov    rax,rcx
  40b4a8:	jmp    40b1be <flatcc_json_parser_generic_json@@Base+0x69e>
  40b4ad:	mov    ecx,0x2
  40b4b2:	mov    rdx,r15
  40b4b5:	mov    rsi,r10
  40b4b8:	mov    rdi,rbx
  40b4bb:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b4c0:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b4c5:	mov    ecx,0x5
  40b4ca:	mov    rdx,r15
  40b4cd:	mov    rsi,rax
  40b4d0:	mov    rdi,rbx
  40b4d3:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b4d8:	jmp    40b054 <flatcc_json_parser_generic_json@@Base+0x534>
  40b4dd:	lea    rsi,[rax+0x1]
  40b4e1:	mov    ecx,0x6
  40b4e6:	mov    rdx,r15
  40b4e9:	mov    rdi,rbx
  40b4ec:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b4f1:	jmp    40ad11 <flatcc_json_parser_generic_json@@Base+0x1f1>
  40b4f6:	mov    ecx,0x5
  40b4fb:	mov    rdx,r15
  40b4fe:	mov    rsi,r10
  40b501:	mov    rdi,rbx
  40b504:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b509:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b50e:	mov    ecx,0x4
  40b513:	mov    rdx,r15
  40b516:	mov    rsi,rax
  40b519:	mov    rdi,rbx
  40b51c:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b521:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b526:	mov    ecx,0xa
  40b52b:	mov    rdx,r15
  40b52e:	mov    rsi,r15
  40b531:	mov    rdi,rbx
  40b534:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b539:	jmp    40ae52 <flatcc_json_parser_generic_json@@Base+0x332>
  40b53e:	mov    rdx,r15
  40b541:	mov    rax,r10
  40b544:	sub    rdx,r10
  40b547:	cmp    rdx,0x1
  40b54b:	jg     40b068 <flatcc_json_parser_generic_json@@Base+0x548>
  40b551:	jmp    40b071 <flatcc_json_parser_generic_json@@Base+0x551>
  40b556:	call   403060 <__stack_chk_fail@plt>
  40b55b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040b560 <flatcc_json_parser_unmatched_symbol@@Base>:
  40b560:	push   r12
  40b562:	push   rbp
  40b563:	mov    rbp,rdi
  40b566:	push   rbx
  40b567:	test   BYTE PTR [rdi+0x10],0x1
  40b56b:	mov    rbx,rdx
  40b56e:	je     40b618 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
  40b574:	mov    eax,DWORD PTR [rdi+0x14]
  40b577:	test   eax,eax
  40b579:	je     40b630 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
  40b57f:	cmp    rsi,rdx
  40b582:	je     40b5ca <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  40b584:	movzx  ecx,BYTE PTR [rsi]
  40b587:	cmp    cl,0x20
  40b58a:	jle    40b5ca <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  40b58c:	lea    rax,[rsi+0x1]
  40b590:	movabs rdi,0x2000000000ffd
  40b59a:	nop    WORD PTR [rax+rax*1+0x0]
  40b5a0:	lea    edx,[rcx-0x2e]
  40b5a3:	lea    rsi,[rax-0x1]
  40b5a7:	cmp    dl,0x31
  40b5aa:	jbe    40b690 <flatcc_json_parser_unmatched_symbol@@Base+0x130>
  40b5b0:	mov    edx,ecx
  40b5b2:	or     edx,0x20
  40b5b5:	sub    edx,0x61
  40b5b8:	cmp    dl,0x19
  40b5bb:	jbe    40b69a <flatcc_json_parser_unmatched_symbol@@Base+0x13a>
  40b5c1:	cmp    cl,0x2e
  40b5c4:	je     40b748 <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
  40b5ca:	mov    r12,rbx
  40b5cd:	mov    rax,r12
  40b5d0:	sub    rax,rsi
  40b5d3:	cmp    rax,0x1
  40b5d7:	jle    40b5e4 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
  40b5d9:	cmp    BYTE PTR [rsi],0x20
  40b5dc:	jg     40b5f2 <flatcc_json_parser_unmatched_symbol@@Base+0x92>
  40b5de:	je     40b6c0 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
  40b5e4:	mov    rdx,rbx
  40b5e7:	mov    rdi,rbp
  40b5ea:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40b5ef:	mov    rsi,rax
  40b5f2:	cmp    rbx,rsi
  40b5f5:	je     40b600 <flatcc_json_parser_unmatched_symbol@@Base+0xa0>
  40b5f7:	cmp    BYTE PTR [rsi],0x3a
  40b5fa:	je     40b708 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
  40b600:	mov    rdx,rbx
  40b603:	mov    rdi,rbp
  40b606:	mov    ecx,0x4
  40b60b:	pop    rbx
  40b60c:	pop    rbp
  40b60d:	pop    r12
  40b60f:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40b614:	nop    DWORD PTR [rax+0x0]
  40b618:	mov    rdx,rbx
  40b61b:	mov    rdi,rbp
  40b61e:	mov    ecx,0xd
  40b623:	pop    rbx
  40b624:	pop    rbp
  40b625:	pop    r12
  40b627:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40b62c:	nop    DWORD PTR [rax+0x0]
  40b630:	cmp    rsi,rdx
  40b633:	je     40b76c <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
  40b639:	movzx  edx,BYTE PTR [rsi]
  40b63c:	mov    r12,rbx
  40b63f:	cmp    dl,0x22
  40b642:	jne    40b666 <flatcc_json_parser_unmatched_symbol@@Base+0x106>
  40b644:	jmp    40b6f0 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
  40b649:	nop    DWORD PTR [rax+0x0]
  40b650:	lea    rsi,[rax+0x1]
  40b654:	cmp    rbx,rsi
  40b657:	je     40b687 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40b659:	movzx  edx,BYTE PTR [rax+0x1]
  40b65d:	cmp    dl,0x22
  40b660:	je     40b6f8 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
  40b666:	cmp    dl,0x5c
  40b669:	mov    rax,rsi
  40b66c:	jne    40b650 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  40b66e:	mov    rdx,rbx
  40b671:	sub    rdx,rsi
  40b674:	cmp    rdx,0x1
  40b678:	jle    40b6d3 <flatcc_json_parser_unmatched_symbol@@Base+0x173>
  40b67a:	add    rax,0x1
  40b67e:	lea    rsi,[rax+0x1]
  40b682:	cmp    rbx,rsi
  40b685:	jne    40b659 <flatcc_json_parser_unmatched_symbol@@Base+0xf9>
  40b687:	mov    rsi,rbx
  40b68a:	jmp    40b6d8 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
  40b68c:	nop    DWORD PTR [rax+0x0]
  40b690:	bt     rdi,rdx
  40b694:	jae    40b5b0 <flatcc_json_parser_unmatched_symbol@@Base+0x50>
  40b69a:	cmp    rbx,rax
  40b69d:	mov    rsi,rax
  40b6a0:	je     40b740 <flatcc_json_parser_unmatched_symbol@@Base+0x1e0>
  40b6a6:	movzx  edx,BYTE PTR [rax]
  40b6a9:	add    rax,0x1
  40b6ad:	cmp    dl,0x20
  40b6b0:	jle    40b5c1 <flatcc_json_parser_unmatched_symbol@@Base+0x61>
  40b6b6:	mov    ecx,edx
  40b6b8:	jmp    40b5a0 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
  40b6bd:	nop    DWORD PTR [rax]
  40b6c0:	cmp    BYTE PTR [rsi+0x1],0x20
  40b6c4:	jle    40b5e4 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
  40b6ca:	add    rsi,0x1
  40b6ce:	jmp    40b5f2 <flatcc_json_parser_unmatched_symbol@@Base+0x92>
  40b6d3:	cmp    BYTE PTR [rsi],0x22
  40b6d6:	je     40b6f8 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
  40b6d8:	mov    ecx,0x14
  40b6dd:	mov    rdx,rbx
  40b6e0:	mov    rdi,rbp
  40b6e3:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b6e8:	mov    rsi,rax
  40b6eb:	jmp    40b5cd <flatcc_json_parser_unmatched_symbol@@Base+0x6d>
  40b6f0:	mov    r12,rbx
  40b6f3:	nop    DWORD PTR [rax+rax*1+0x0]
  40b6f8:	add    rsi,0x1
  40b6fc:	jmp    40b5cd <flatcc_json_parser_unmatched_symbol@@Base+0x6d>
  40b701:	nop    DWORD PTR [rax+0x0]
  40b708:	lea    rax,[rsi+0x1]
  40b70c:	sub    r12,rax
  40b70f:	cmp    r12,0x1
  40b713:	jle    40b71d <flatcc_json_parser_unmatched_symbol@@Base+0x1bd>
  40b715:	cmp    BYTE PTR [rsi+0x1],0x20
  40b719:	jg     40b72b <flatcc_json_parser_unmatched_symbol@@Base+0x1cb>
  40b71b:	je     40b760 <flatcc_json_parser_unmatched_symbol@@Base+0x200>
  40b71d:	mov    rdx,rbx
  40b720:	mov    rsi,rax
  40b723:	mov    rdi,rbp
  40b726:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40b72b:	mov    rdx,rbx
  40b72e:	mov    rdi,rbp
  40b731:	mov    rsi,rax
  40b734:	pop    rbx
  40b735:	pop    rbp
  40b736:	pop    r12
  40b738:	jmp    40ab20 <flatcc_json_parser_generic_json@@Base>
  40b73d:	nop    DWORD PTR [rax]
  40b740:	mov    rsi,rbx
  40b743:	jmp    40b5c1 <flatcc_json_parser_unmatched_symbol@@Base+0x61>
  40b748:	mov    ecx,0x5
  40b74d:	mov    rdx,rbx
  40b750:	mov    rdi,rbp
  40b753:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b758:	mov    rsi,rax
  40b75b:	jmp    40b5ca <flatcc_json_parser_unmatched_symbol@@Base+0x6a>
  40b760:	cmp    BYTE PTR [rsi+0x2],0x20
  40b764:	jle    40b71d <flatcc_json_parser_unmatched_symbol@@Base+0x1bd>
  40b766:	lea    rax,[rsi+0x2]
  40b76a:	jmp    40b72b <flatcc_json_parser_unmatched_symbol@@Base+0x1cb>
  40b76c:	mov    r12,rsi
  40b76f:	jmp    40b6d8 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
  40b774:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40b77f:	nop

000000000040b780 <flatcc_json_parser_integer@@Base>:
  40b780:	cmp    rsi,rdx
  40b783:	je     40b830 <flatcc_json_parser_integer@@Base+0xb0>
  40b789:	cmp    BYTE PTR [rsi],0x2d
  40b78c:	sete   al
  40b78f:	movzx  r9d,al
  40b793:	movzx  eax,al
  40b796:	add    rax,rsi
  40b799:	mov    DWORD PTR [rcx],r9d
  40b79c:	cmp    rdx,rax
  40b79f:	je     40b836 <flatcc_json_parser_integer@@Base+0xb6>
  40b7a5:	movsx  r9,BYTE PTR [rax]
  40b7a9:	lea    ecx,[r9-0x30]
  40b7ad:	cmp    cl,0x9
  40b7b0:	ja     40b7ef <flatcc_json_parser_integer@@Base+0x6f>
  40b7b2:	sub    r9,0x30
  40b7b6:	jmp    40b7df <flatcc_json_parser_integer@@Base+0x5f>
  40b7b8:	nop    DWORD PTR [rax+rax*1+0x0]
  40b7c0:	movsx  rcx,BYTE PTR [rax]
  40b7c4:	lea    r10d,[rcx-0x30]
  40b7c8:	cmp    r10b,0x9
  40b7cc:	ja     40b7f8 <flatcc_json_parser_integer@@Base+0x78>
  40b7ce:	lea    r10,[r9+r9*4]
  40b7d2:	lea    rcx,[rcx+r10*2-0x30]
  40b7d7:	cmp    rcx,r9
  40b7da:	jb     40b820 <flatcc_json_parser_integer@@Base+0xa0>
  40b7dc:	mov    r9,rcx
  40b7df:	add    rax,0x1
  40b7e3:	cmp    rdx,rax
  40b7e6:	jne    40b7c0 <flatcc_json_parser_integer@@Base+0x40>
  40b7e8:	mov    rax,rdx
  40b7eb:	mov    QWORD PTR [r8],r9
  40b7ee:	ret    
  40b7ef:	xor    r9d,r9d
  40b7f2:	nop    WORD PTR [rax+rax*1+0x0]
  40b7f8:	cmp    rsi,rax
  40b7fb:	je     40b834 <flatcc_json_parser_integer@@Base+0xb4>
  40b7fd:	movzx  ecx,BYTE PTR [rax]
  40b800:	mov    esi,ecx
  40b802:	and    esi,0xffffffdf
  40b805:	cmp    sil,0x45
  40b809:	je     40b810 <flatcc_json_parser_integer@@Base+0x90>
  40b80b:	cmp    cl,0x2e
  40b80e:	jne    40b7eb <flatcc_json_parser_integer@@Base+0x6b>
  40b810:	mov    ecx,0xc
  40b815:	mov    rsi,rax
  40b818:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40b81d:	nop    DWORD PTR [rax]
  40b820:	mov    ecx,0x8
  40b825:	mov    rsi,rax
  40b828:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40b82d:	nop    DWORD PTR [rax]
  40b830:	mov    rax,rsi
  40b833:	ret    
  40b834:	repz ret 
  40b836:	xor    r9d,r9d
  40b839:	jmp    40b7e8 <flatcc_json_parser_integer@@Base+0x68>
  40b83b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040b840 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  40b840:	push   r15
  40b842:	push   r14
  40b844:	mov    r14,rdx
  40b847:	push   r13
  40b849:	push   r12
  40b84b:	mov    r13,rcx
  40b84e:	push   rbp
  40b84f:	push   rbx
  40b850:	mov    r12d,r8d
  40b853:	mov    rbx,rdi
  40b856:	sub    rsp,0x38
  40b85a:	mov    rax,QWORD PTR fs:0x28
  40b863:	mov    QWORD PTR [rsp+0x28],rax
  40b868:	xor    eax,eax
  40b86a:	test   r8d,r8d
  40b86d:	setne  BYTE PTR [rsp+0x8]
  40b872:	cmp    rsi,rdx
  40b875:	je     40b880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
  40b877:	cmp    BYTE PTR [rsi],0x22
  40b87a:	lea    rbp,[rsi+0x1]
  40b87e:	je     40b893 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x53>
  40b880:	mov    ecx,0x10
  40b885:	mov    rdx,r14
  40b888:	mov    rdi,rbx
  40b88b:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40b890:	mov    rbp,rax
  40b893:	mov    rdx,r14
  40b896:	mov    rsi,rbp
  40b899:	mov    rdi,rbx
  40b89c:	call   409c00 <flatcc_json_parser_string_part@@Base>
  40b8a1:	cmp    r14,rax
  40b8a4:	mov    r15,rax
  40b8a7:	je     40b8ae <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  40b8a9:	cmp    BYTE PTR [rax],0x22
  40b8ac:	je     40b8f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xb8>
  40b8ae:	xor    ecx,ecx
  40b8b0:	test   r12d,r12d
  40b8b3:	mov    DWORD PTR [r13+0x0],0x0
  40b8bb:	setne  cl
  40b8be:	add    ecx,0x1f
  40b8c1:	mov    rax,QWORD PTR [rsp+0x28]
  40b8c6:	xor    rax,QWORD PTR fs:0x28
  40b8cf:	jne    40bc38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  40b8d5:	add    rsp,0x38
  40b8d9:	mov    rdx,r14
  40b8dc:	mov    rsi,r15
  40b8df:	mov    rdi,rbx
  40b8e2:	pop    rbx
  40b8e3:	pop    rbp
  40b8e4:	pop    r12
  40b8e6:	pop    r13
  40b8e8:	pop    r14
  40b8ea:	pop    r15
  40b8ec:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40b8f1:	nop    DWORD PTR [rax+0x0]
  40b8f8:	sub    rax,rbp
  40b8fb:	mov    rdx,rax
  40b8fe:	mov    QWORD PTR [rsp+0x18],rax
  40b903:	shr    rax,0x2
  40b907:	lea    rax,[rax+rax*2]
  40b90b:	and    edx,0x3
  40b90e:	cmp    rdx,0x2
  40b912:	lea    rdi,[rax+0x1]
  40b916:	mov    QWORD PTR [rsp+0x10],rdi
  40b91b:	je     40b92e <flatcc_json_parser_build_uint8_vector_base64@@Base+0xee>
  40b91d:	lea    rsi,[rax+0x2]
  40b921:	cmp    rdx,0x3
  40b925:	cmove  rax,rsi
  40b929:	mov    QWORD PTR [rsp+0x10],rax
  40b92e:	mov    rdi,QWORD PTR [rbx]
  40b931:	mov    ecx,0xffffffff
  40b936:	mov    edx,0x1
  40b93b:	mov    esi,0x1
  40b940:	call   406220 <flatcc_builder_start_vector@@Base>
  40b945:	test   eax,eax
  40b947:	jne    40ba08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  40b94d:	mov    rsi,QWORD PTR [rsp+0x10]
  40b952:	mov    rdi,QWORD PTR [rbx]
  40b955:	call   405b80 <flatcc_builder_extend_vector@@Base>
  40b95a:	test   rax,rax
  40b95d:	je     40ba08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  40b963:	cmp    BYTE PTR [rsp+0x8],0x1
  40b968:	mov    rcx,QWORD PTR [rsp+0x10]
  40b96d:	lea    rdx,[rip+0x2f6c]        # 40e8e0 <flatcc_builder_padding_base@@Base+0xaa0>
  40b974:	lea    rdi,[rip+0x2e65]        # 40e7e0 <flatcc_builder_padding_base@@Base+0x9a0>
  40b97b:	mov    r9,QWORD PTR [rsp+0x18]
  40b980:	mov    r11,rbp
  40b983:	mov    r8,rax
  40b986:	cmovne rdi,rdx
  40b98a:	test   rcx,rcx
  40b98d:	mov    rdx,0xffffffffffffffff
  40b994:	cmovne rdx,rcx
  40b998:	mov    QWORD PTR [rsp+0x8],rdx
  40b99d:	test   r9,r9
  40b9a0:	je     40bb50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
  40b9a6:	mov    r10,r9
  40b9a9:	xor    edx,edx
  40b9ab:	movzx  ecx,BYTE PTR [r11+rdx*1]
  40b9b0:	movzx  esi,BYTE PTR [rdi+rcx*1]
  40b9b4:	cmp    sil,0x3f
  40b9b8:	mov    BYTE PTR [rsp+rdx*1+0x24],sil
  40b9bd:	jbe    40ba3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
  40b9bf:	cmp    sil,0x41
  40b9c3:	je     40ba30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
  40b9c5:	cmp    sil,0x42
  40b9c9:	mov    rcx,rdx
  40b9cc:	je     40ba60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
  40b9d2:	sub    r10,rcx
  40b9d5:	cmp    rdx,0x2
  40b9d9:	je     40bb20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
  40b9df:	cmp    rdx,0x3
  40b9e3:	je     40bab0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  40b9e9:	test   rdx,rdx
  40b9ec:	je     40bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  40b9f2:	mov    r15,QWORD PTR [rsp+0x18]
  40b9f7:	sub    r15,r9
  40b9fa:	add    r15,rbp
  40b9fd:	jmp    40b8ae <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  40ba02:	nop    WORD PTR [rax+rax*1+0x0]
  40ba08:	mov    rax,QWORD PTR [rsp+0x28]
  40ba0d:	xor    rax,QWORD PTR fs:0x28
  40ba16:	mov    DWORD PTR [r13+0x0],0x0
  40ba1e:	jne    40bc38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  40ba24:	mov    ecx,0x21
  40ba29:	jmp    40b8d5 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x95>
  40ba2e:	xchg   ax,ax
  40ba30:	add    r11,0x1
  40ba34:	sub    r10,0x1
  40ba38:	sub    rdx,0x1
  40ba3c:	add    rdx,0x1
  40ba40:	cmp    rdx,0x3
  40ba44:	ja     40bbae <flatcc_json_parser_build_uint8_vector_base64@@Base+0x36e>
  40ba4a:	cmp    rdx,r10
  40ba4d:	jne    40b9ab <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16b>
  40ba53:	xor    r10d,r10d
  40ba56:	jmp    40b9d5 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x195>
  40ba5b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ba60:	lea    rcx,[rdx+0x1]
  40ba64:	cmp    rcx,0x7
  40ba68:	ja     40b9d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40ba6e:	cmp    r10,rcx
  40ba71:	ja     40ba97 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x257>
  40ba73:	jmp    40b9d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40ba78:	nop    DWORD PTR [rax+rax*1+0x0]
  40ba80:	add    rcx,0x1
  40ba84:	cmp    r10,rcx
  40ba87:	jbe    40b9d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40ba8d:	cmp    rcx,0x7
  40ba91:	ja     40b9d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40ba97:	movzx  esi,BYTE PTR [r11+rcx*1]
  40ba9c:	movzx  esi,BYTE PTR [rdi+rsi*1]
  40baa0:	sub    esi,0x41
  40baa3:	cmp    sil,0x1
  40baa7:	jbe    40ba80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x240>
  40baa9:	jmp    40b9d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40baae:	xchg   ax,ax
  40bab0:	movzx  edx,BYTE PTR [rsp+0x26]
  40bab5:	mov    ecx,edx
  40bab7:	shl    ecx,0x6
  40baba:	and    ecx,0xc0
  40bac0:	jne    40b9f2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  40bac6:	cmp    QWORD PTR [rsp+0x8],0x1
  40bacc:	je     40b9f2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  40bad2:	movzx  ecx,BYTE PTR [rsp+0x25]
  40bad7:	movzx  esi,BYTE PTR [rsp+0x24]
  40badc:	shr    dl,0x2
  40badf:	add    r8,0x2
  40bae3:	lea    edi,[rsi*4+0x0]
  40baea:	mov    esi,ecx
  40baec:	shl    ecx,0x4
  40baef:	shr    sil,0x4
  40baf3:	or     edx,ecx
  40baf5:	or     esi,edi
  40baf7:	mov    BYTE PTR [r8-0x1],dl
  40bafb:	mov    BYTE PTR [r8-0x2],sil
  40baff:	nop
  40bb00:	mov    rdi,QWORD PTR [rsp+0x18]
  40bb05:	mov    rdx,rdi
  40bb08:	sub    rdx,r10
  40bb0b:	cmp    rdi,rdx
  40bb0e:	je     40bb50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
  40bb10:	lea    r15,[rbp+rdx*1+0x0]
  40bb15:	jmp    40b8ae <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6e>
  40bb1a:	nop    WORD PTR [rax+rax*1+0x0]
  40bb20:	movzx  edx,BYTE PTR [rsp+0x25]
  40bb25:	mov    ecx,edx
  40bb27:	shl    ecx,0x4
  40bb2a:	and    ecx,0xf0
  40bb30:	jne    40b9f2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  40bb36:	movzx  ecx,BYTE PTR [rsp+0x24]
  40bb3b:	shr    dl,0x4
  40bb3e:	add    r8,0x1
  40bb42:	shl    ecx,0x2
  40bb45:	or     edx,ecx
  40bb47:	mov    BYTE PTR [r8-0x1],dl
  40bb4b:	jmp    40bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  40bb4d:	nop    DWORD PTR [rax]
  40bb50:	sub    r8,rax
  40bb53:	cmp    QWORD PTR [rsp+0x10],r8
  40bb58:	jbe    40bb72 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x332>
  40bb5a:	mov    rsi,QWORD PTR [rsp+0x10]
  40bb5f:	mov    rdi,QWORD PTR [rbx]
  40bb62:	sub    rsi,r8
  40bb65:	call   406090 <flatcc_builder_truncate_vector@@Base>
  40bb6a:	test   eax,eax
  40bb6c:	jne    40ba08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  40bb72:	mov    rdi,QWORD PTR [rbx]
  40bb75:	call   407120 <flatcc_builder_end_vector@@Base>
  40bb7a:	test   eax,eax
  40bb7c:	mov    DWORD PTR [r13+0x0],eax
  40bb80:	je     40ba08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
  40bb86:	cmp    BYTE PTR [r15],0x22
  40bb8a:	je     40bc15 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d5>
  40bb90:	mov    rax,QWORD PTR [rsp+0x28]
  40bb95:	xor    rax,QWORD PTR fs:0x28
  40bb9e:	jne    40bc38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  40bba4:	mov    ecx,0x14
  40bba9:	jmp    40b8d5 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x95>
  40bbae:	cmp    QWORD PTR [rsp+0x8],0x2
  40bbb4:	jbe    40b9f2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b2>
  40bbba:	movzx  ecx,BYTE PTR [rsp+0x25]
  40bbbf:	movzx  edx,BYTE PTR [rsp+0x24]
  40bbc4:	add    r8,0x3
  40bbc8:	add    r11,0x4
  40bbcc:	lea    r9,[r10-0x4]
  40bbd0:	lea    esi,[rdx*4+0x0]
  40bbd7:	mov    edx,ecx
  40bbd9:	shl    ecx,0x4
  40bbdc:	shr    dl,0x4
  40bbdf:	or     edx,esi
  40bbe1:	mov    BYTE PTR [r8-0x3],dl
  40bbe5:	movzx  edx,BYTE PTR [rsp+0x26]
  40bbea:	mov    esi,edx
  40bbec:	shl    edx,0x6
  40bbef:	or     dl,BYTE PTR [rsp+0x27]
  40bbf3:	shr    sil,0x2
  40bbf7:	or     ecx,esi
  40bbf9:	mov    BYTE PTR [r8-0x2],cl
  40bbfd:	mov    BYTE PTR [r8-0x1],dl
  40bc01:	sub    QWORD PTR [rsp+0x8],0x3
  40bc07:	jne    40b99d <flatcc_json_parser_build_uint8_vector_base64@@Base+0x15d>
  40bc0d:	mov    r10,r9
  40bc10:	jmp    40bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
  40bc15:	mov    rbx,QWORD PTR [rsp+0x28]
  40bc1a:	xor    rbx,QWORD PTR fs:0x28
  40bc23:	lea    rax,[r15+0x1]
  40bc27:	jne    40bc38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
  40bc29:	add    rsp,0x38
  40bc2d:	pop    rbx
  40bc2e:	pop    rbp
  40bc2f:	pop    r12
  40bc31:	pop    r13
  40bc33:	pop    r14
  40bc35:	pop    r15
  40bc37:	ret    
  40bc38:	call   403060 <__stack_chk_fail@plt>
  40bc3d:	nop    DWORD PTR [rax]

000000000040bc40 <flatcc_json_parser_build_string@@Base>:
  40bc40:	push   r15
  40bc42:	push   r14
  40bc44:	push   r13
  40bc46:	push   r12
  40bc48:	push   rbp
  40bc49:	push   rbx
  40bc4a:	mov    rbp,rdx
  40bc4d:	mov    rbx,rdi
  40bc50:	sub    rsp,0x28
  40bc54:	mov    rax,QWORD PTR fs:0x28
  40bc5d:	mov    QWORD PTR [rsp+0x18],rax
  40bc62:	xor    eax,eax
  40bc64:	cmp    rsi,rdx
  40bc67:	mov    QWORD PTR [rsp+0x8],rcx
  40bc6c:	je     40bc77 <flatcc_json_parser_build_string@@Base+0x37>
  40bc6e:	cmp    BYTE PTR [rsi],0x22
  40bc71:	lea    r12,[rsi+0x1]
  40bc75:	je     40bc8a <flatcc_json_parser_build_string@@Base+0x4a>
  40bc77:	mov    ecx,0x10
  40bc7c:	mov    rdx,rbp
  40bc7f:	mov    rdi,rbx
  40bc82:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40bc87:	mov    r12,rax
  40bc8a:	mov    rdx,rbp
  40bc8d:	mov    rsi,r12
  40bc90:	mov    rdi,rbx
  40bc93:	call   409c00 <flatcc_json_parser_string_part@@Base>
  40bc98:	cmp    rbp,rax
  40bc9b:	mov    r15,rax
  40bc9e:	je     40bca9 <flatcc_json_parser_build_string@@Base+0x69>
  40bca0:	cmp    BYTE PTR [rax],0x22
  40bca3:	je     40bdb8 <flatcc_json_parser_build_string@@Base+0x178>
  40bca9:	mov    rdi,QWORD PTR [rbx]
  40bcac:	call   406300 <flatcc_builder_start_string@@Base>
  40bcb1:	test   eax,eax
  40bcb3:	je     40bcf0 <flatcc_json_parser_build_string@@Base+0xb0>
  40bcb5:	mov    rax,QWORD PTR [rsp+0x8]
  40bcba:	mov    DWORD PTR [rax],0x0
  40bcc0:	mov    rcx,QWORD PTR [rsp+0x18]
  40bcc5:	xor    rcx,QWORD PTR fs:0x28
  40bcce:	mov    rax,r15
  40bcd1:	jne    40be00 <flatcc_json_parser_build_string@@Base+0x1c0>
  40bcd7:	add    rsp,0x28
  40bcdb:	pop    rbx
  40bcdc:	pop    rbp
  40bcdd:	pop    r12
  40bcdf:	pop    r13
  40bce1:	pop    r14
  40bce3:	pop    r15
  40bce5:	ret    
  40bce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bcf0:	mov    rdi,QWORD PTR [rbx]
  40bcf3:	mov    rdx,r15
  40bcf6:	mov    rsi,r12
  40bcf9:	sub    rdx,r12
  40bcfc:	call   405f80 <flatcc_builder_append_string@@Base>
  40bd01:	test   rax,rax
  40bd04:	je     40bcb5 <flatcc_json_parser_build_string@@Base+0x75>
  40bd06:	cmp    rbp,r15
  40bd09:	je     40bd88 <flatcc_json_parser_build_string@@Base+0x148>
  40bd0b:	cmp    BYTE PTR [r15],0x22
  40bd0f:	je     40bde0 <flatcc_json_parser_build_string@@Base+0x1a0>
  40bd15:	lea    r13,[rsp+0x14]
  40bd1a:	lea    r14,[r13+0x1]
  40bd1e:	jmp    40bd44 <flatcc_json_parser_build_string@@Base+0x104>
  40bd20:	mov    rdi,QWORD PTR [rbx]
  40bd23:	mov    rdx,rax
  40bd26:	mov    rsi,r12
  40bd29:	sub    rdx,r12
  40bd2c:	call   405f80 <flatcc_builder_append_string@@Base>
  40bd31:	test   rax,rax
  40bd34:	je     40bcb5 <flatcc_json_parser_build_string@@Base+0x75>
  40bd3a:	cmp    BYTE PTR [r15],0x22
  40bd3e:	je     40bde0 <flatcc_json_parser_build_string@@Base+0x1a0>
  40bd44:	mov    rcx,r13
  40bd47:	mov    rdx,rbp
  40bd4a:	mov    rsi,r15
  40bd4d:	mov    rdi,rbx
  40bd50:	call   40a3c0 <flatcc_json_parser_string_escape@@Base>
  40bd55:	movsx  rdx,BYTE PTR [rsp+0x14]
  40bd5b:	mov    rdi,QWORD PTR [rbx]
  40bd5e:	mov    rsi,r14
  40bd61:	mov    r12,rax
  40bd64:	call   405f80 <flatcc_builder_append_string@@Base>
  40bd69:	test   rax,rax
  40bd6c:	je     40bdf8 <flatcc_json_parser_build_string@@Base+0x1b8>
  40bd72:	mov    rdx,rbp
  40bd75:	mov    rsi,r12
  40bd78:	mov    rdi,rbx
  40bd7b:	call   409c00 <flatcc_json_parser_string_part@@Base>
  40bd80:	cmp    rbp,rax
  40bd83:	mov    r15,rax
  40bd86:	jne    40bd20 <flatcc_json_parser_build_string@@Base+0xe0>
  40bd88:	mov    rdi,QWORD PTR [rbx]
  40bd8b:	call   407bc0 <flatcc_builder_end_string@@Base>
  40bd90:	mov    rcx,QWORD PTR [rsp+0x8]
  40bd95:	mov    DWORD PTR [rcx],eax
  40bd97:	mov    rsi,r15
  40bd9a:	mov    ecx,0x14
  40bd9f:	mov    rdx,rbp
  40bda2:	mov    rdi,rbx
  40bda5:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40bdaa:	mov    r15,rax
  40bdad:	jmp    40bcc0 <flatcc_json_parser_build_string@@Base+0x80>
  40bdb2:	nop    WORD PTR [rax+rax*1+0x0]
  40bdb8:	mov    rdi,QWORD PTR [rbx]
  40bdbb:	mov    rdx,rax
  40bdbe:	mov    rsi,r12
  40bdc1:	sub    rdx,r12
  40bdc4:	call   407a30 <flatcc_builder_create_string@@Base>
  40bdc9:	mov    rcx,QWORD PTR [rsp+0x8]
  40bdce:	mov    DWORD PTR [rcx],eax
  40bdd0:	cmp    BYTE PTR [r15],0x22
  40bdd4:	jne    40bd97 <flatcc_json_parser_build_string@@Base+0x157>
  40bdd6:	add    r15,0x1
  40bdda:	jmp    40bcc0 <flatcc_json_parser_build_string@@Base+0x80>
  40bddf:	nop
  40bde0:	mov    rdi,QWORD PTR [rbx]
  40bde3:	call   407bc0 <flatcc_builder_end_string@@Base>
  40bde8:	mov    rcx,QWORD PTR [rsp+0x8]
  40bded:	mov    DWORD PTR [rcx],eax
  40bdef:	jmp    40bdd0 <flatcc_json_parser_build_string@@Base+0x190>
  40bdf1:	nop    DWORD PTR [rax+0x0]
  40bdf8:	mov    r15,r12
  40bdfb:	jmp    40bcb5 <flatcc_json_parser_build_string@@Base+0x75>
  40be00:	call   403060 <__stack_chk_fail@plt>
  40be05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040be10 <flatcc_json_parser_prepare_unions@@Base>:
  40be10:	lea    rax,[rcx+rcx*4]
  40be14:	push   r14
  40be16:	push   r13
  40be18:	push   r12
  40be1a:	push   rbp
  40be1b:	mov    rbp,rdi
  40be1e:	push   rbx
  40be1f:	mov    rdi,QWORD PTR [rdi]
  40be22:	mov    r12,rsi
  40be25:	lea    rsi,[rax*8+0x10]
  40be2d:	mov    r13,r8
  40be30:	mov    r14,rdx
  40be33:	mov    rbx,rcx
  40be36:	call   4050d0 <flatcc_builder_enter_user_frame@@Base>
  40be3b:	test   rax,rax
  40be3e:	mov    QWORD PTR [r13+0x0],rax
  40be42:	je     40be60 <flatcc_json_parser_prepare_unions@@Base+0x50>
  40be44:	mov    rdi,QWORD PTR [rbp+0x0]
  40be48:	mov    rsi,rax
  40be4b:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40be50:	mov    QWORD PTR [rax],rbx
  40be53:	mov    rax,r12
  40be56:	pop    rbx
  40be57:	pop    rbp
  40be58:	pop    r12
  40be5a:	pop    r13
  40be5c:	pop    r14
  40be5e:	ret    
  40be5f:	nop
  40be60:	pop    rbx
  40be61:	mov    rdx,r14
  40be64:	mov    rsi,r12
  40be67:	mov    rdi,rbp
  40be6a:	pop    rbp
  40be6b:	pop    r12
  40be6d:	pop    r13
  40be6f:	pop    r14
  40be71:	mov    ecx,0x21
  40be76:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40be7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040be80 <flatcc_json_parser_finalize_unions@@Base>:
  40be80:	push   r13
  40be82:	push   r12
  40be84:	mov    r12,rsi
  40be87:	push   rbp
  40be88:	push   rbx
  40be89:	mov    rbx,rdi
  40be8c:	mov    rsi,rcx
  40be8f:	mov    r13,rdx
  40be92:	mov    rbp,rcx
  40be95:	sub    rsp,0x8
  40be99:	mov    rdi,QWORD PTR [rdi]
  40be9c:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40bea1:	cmp    QWORD PTR [rax+0x8],0x0
  40bea6:	je     40bebe <flatcc_json_parser_finalize_unions@@Base+0x3e>
  40bea8:	mov    rsi,r12
  40beab:	mov    ecx,0x1b
  40beb0:	mov    rdx,r13
  40beb3:	mov    rdi,rbx
  40beb6:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40bebb:	mov    r12,rax
  40bebe:	mov    rdi,QWORD PTR [rbx]
  40bec1:	mov    rsi,rbp
  40bec4:	call   4051c0 <flatcc_builder_exit_user_frame_at@@Base>
  40bec9:	add    rsp,0x8
  40becd:	mov    rax,r12
  40bed0:	pop    rbx
  40bed1:	pop    rbp
  40bed2:	pop    r12
  40bed4:	pop    r13
  40bed6:	ret    
  40bed7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040bee0 <flatcc_json_parser_union@@Base>:
  40bee0:	push   r15
  40bee2:	push   r14
  40bee4:	mov    r14d,r8d
  40bee7:	push   r13
  40bee9:	push   r12
  40beeb:	mov    r13,rsi
  40beee:	push   rbp
  40beef:	push   rbx
  40bef0:	mov    rbx,rdi
  40bef3:	mov    rbp,rcx
  40bef6:	mov    rsi,r9
  40bef9:	mov    r12,rdx
  40befc:	sub    rsp,0x18
  40bf00:	mov    rdi,QWORD PTR [rdi]
  40bf03:	mov    rax,QWORD PTR fs:0x28
  40bf0c:	mov    QWORD PTR [rsp+0x8],rax
  40bf11:	xor    eax,eax
  40bf13:	mov    r15,QWORD PTR [rsp+0x50]
  40bf18:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40bf1d:	lea    rdx,[rbp+rbp*4+0x0]
  40bf22:	mov    ecx,0x1c
  40bf27:	lea    rdx,[rax+rdx*8]
  40bf2b:	cmp    QWORD PTR [rdx+0x10],0x0
  40bf30:	je     40bf70 <flatcc_json_parser_union@@Base+0x90>
  40bf32:	mov    rdx,r12
  40bf35:	mov    rsi,r13
  40bf38:	mov    rdi,rbx
  40bf3b:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40bf40:	mov    rbp,rax
  40bf43:	mov    rdi,QWORD PTR [rsp+0x8]
  40bf48:	xor    rdi,QWORD PTR fs:0x28
  40bf51:	mov    rax,rbp
  40bf54:	jne    40c00d <flatcc_json_parser_union@@Base+0x12d>
  40bf5a:	add    rsp,0x18
  40bf5e:	pop    rbx
  40bf5f:	pop    rbp
  40bf60:	pop    r12
  40bf62:	pop    r13
  40bf64:	pop    r14
  40bf66:	pop    r15
  40bf68:	ret    
  40bf69:	nop    DWORD PTR [rax+0x0]
  40bf70:	cmp    BYTE PTR [rdx+0x24],0x0
  40bf74:	je     40bfe0 <flatcc_json_parser_union@@Base+0x100>
  40bf76:	movzx  ecx,BYTE PTR [rdx+0x25]
  40bf7a:	test   cl,cl
  40bf7c:	mov    BYTE PTR [rsp],cl
  40bf7f:	je     40bfd0 <flatcc_json_parser_union@@Base+0xf0>
  40bf81:	sub    QWORD PTR [rax+0x8],0x1
  40bf86:	lea    r8,[rsp+0x4]
  40bf8b:	mov    rdx,r12
  40bf8e:	mov    rsi,r13
  40bf91:	mov    rdi,rbx
  40bf94:	call   r15
  40bf97:	cmp    r12,rax
  40bf9a:	mov    rbp,rax
  40bf9d:	je     40bf43 <flatcc_json_parser_union@@Base+0x63>
  40bf9f:	mov    rdx,QWORD PTR [rsp]
  40bfa3:	mov    rdi,QWORD PTR [rbx]
  40bfa6:	movzx  esi,r14w
  40bfaa:	call   407ff0 <flatcc_builder_table_add_union@@Base>
  40bfaf:	test   eax,eax
  40bfb1:	je     40bf43 <flatcc_json_parser_union@@Base+0x63>
  40bfb3:	mov    rsi,rbp
  40bfb6:	mov    ecx,0x1c
  40bfbb:	mov    rdx,r12
  40bfbe:	mov    rdi,rbx
  40bfc1:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40bfc6:	mov    rbp,rax
  40bfc9:	jmp    40bf43 <flatcc_json_parser_union@@Base+0x63>
  40bfce:	xchg   ax,ax
  40bfd0:	mov    ecx,0x19
  40bfd5:	jmp    40bf32 <flatcc_json_parser_union@@Base+0x52>
  40bfda:	nop    WORD PTR [rax+rax*1+0x0]
  40bfe0:	add    QWORD PTR [rax+0x8],0x1
  40bfe5:	mov    eax,DWORD PTR [rbx+0x18]
  40bfe8:	mov    rsi,r13
  40bfeb:	mov    rdi,rbx
  40bfee:	mov    DWORD PTR [rdx+0x20],eax
  40bff1:	mov    rax,QWORD PTR [rbx+0x8]
  40bff5:	mov    QWORD PTR [rdx+0x10],r13
  40bff9:	mov    QWORD PTR [rdx+0x18],rax
  40bffd:	mov    rdx,r12
  40c000:	call   40ab20 <flatcc_json_parser_generic_json@@Base>
  40c005:	mov    rbp,rax
  40c008:	jmp    40bf43 <flatcc_json_parser_union@@Base+0x63>
  40c00d:	call   403060 <__stack_chk_fail@plt>
  40c012:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c01d:	nop    DWORD PTR [rax]

000000000040c020 <flatcc_json_parser_union_type@@Base>:
  40c020:	push   r15
  40c022:	push   r14
  40c024:	push   r13
  40c026:	push   r12
  40c028:	mov    r13,rcx
  40c02b:	push   rbp
  40c02c:	push   rbx
  40c02d:	mov    rbx,rdi
  40c030:	mov    r12,rsi
  40c033:	mov    rsi,r9
  40c036:	mov    rbp,rdx
  40c039:	sub    rsp,0x48
  40c03d:	mov    rdi,QWORD PTR [rdi]
  40c040:	mov    rax,QWORD PTR [rsp+0x80]
  40c048:	mov    DWORD PTR [rsp+0xc],r8d
  40c04d:	mov    r14,QWORD PTR [rsp+0x88]
  40c055:	mov    QWORD PTR [rsp+0x10],rax
  40c05a:	mov    rax,QWORD PTR fs:0x28
  40c063:	mov    QWORD PTR [rsp+0x38],rax
  40c068:	xor    eax,eax
  40c06a:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40c06f:	mov    r15,rax
  40c072:	lea    rax,[r13+r13*4+0x0]
  40c077:	lea    r9,[r15+rax*8+0x10]
  40c07c:	cmp    BYTE PTR [r9+0x14],0x0
  40c081:	jne    40c1a0 <flatcc_json_parser_union_type@@Base+0x180>
  40c087:	cmp    r12,rbp
  40c08a:	mov    BYTE PTR [r9+0x14],0x1
  40c08f:	mov    DWORD PTR [rsp+0x2c],0x0
  40c097:	mov    QWORD PTR [rsp+0x30],0x0
  40c0a0:	mov    BYTE PTR [r9+0x15],0x0
  40c0a5:	je     40c1c0 <flatcc_json_parser_union_type@@Base+0x1a0>
  40c0ab:	lea    rcx,[rsp+0x2c]
  40c0b0:	lea    r8,[rsp+0x30]
  40c0b5:	mov    rdx,rbp
  40c0b8:	mov    rsi,r12
  40c0bb:	mov    rdi,rbx
  40c0be:	mov    QWORD PTR [rsp+0x18],r9
  40c0c3:	call   40b780 <flatcc_json_parser_integer@@Base>
  40c0c8:	cmp    r12,rax
  40c0cb:	mov    r13,rax
  40c0ce:	mov    r9,QWORD PTR [rsp+0x18]
  40c0d3:	je     40c1c3 <flatcc_json_parser_union_type@@Base+0x1a3>
  40c0d9:	mov    eax,DWORD PTR [rsp+0x2c]
  40c0dd:	mov    ecx,0x8
  40c0e2:	test   eax,eax
  40c0e4:	jne    40c1fa <flatcc_json_parser_union_type@@Base+0x1da>
  40c0ea:	mov    rax,QWORD PTR [rsp+0x30]
  40c0ef:	cmp    rax,0xff
  40c0f5:	ja     40c1f0 <flatcc_json_parser_union_type@@Base+0x1d0>
  40c0fb:	mov    BYTE PTR [r9+0x15],al
  40c0ff:	mov    rsi,QWORD PTR [r9]
  40c102:	test   rsi,rsi
  40c105:	je     40c250 <flatcc_json_parser_union_type@@Base+0x230>
  40c10b:	mov    rax,QWORD PTR [r15+0x8]
  40c10f:	test   rax,rax
  40c112:	je     40c268 <flatcc_json_parser_union_type@@Base+0x248>
  40c118:	sub    rax,0x1
  40c11c:	mov    r12,QWORD PTR [rbx+0x8]
  40c120:	lea    r8,[rsp+0x34]
  40c125:	mov    QWORD PTR [r15+0x8],rax
  40c129:	mov    eax,DWORD PTR [r9+0x10]
  40c12d:	mov    rdx,rbp
  40c130:	mov    r15d,DWORD PTR [rbx+0x18]
  40c134:	mov    rdi,rbx
  40c137:	mov    DWORD PTR [rbx+0x18],eax
  40c13a:	mov    rax,QWORD PTR [r9+0x8]
  40c13e:	mov    QWORD PTR [rbx+0x8],rax
  40c142:	movzx  ecx,BYTE PTR [r9+0x15]
  40c147:	mov    BYTE PTR [rsp+0x30],cl
  40c14b:	call   r14
  40c14e:	cmp    rbp,rax
  40c151:	je     40c220 <flatcc_json_parser_union_type@@Base+0x200>
  40c157:	movzx  esi,WORD PTR [rsp+0xc]
  40c15c:	mov    rdx,QWORD PTR [rsp+0x30]
  40c161:	mov    rdi,QWORD PTR [rbx]
  40c164:	call   407ff0 <flatcc_builder_table_add_union@@Base>
  40c169:	test   eax,eax
  40c16b:	jne    40c230 <flatcc_json_parser_union_type@@Base+0x210>
  40c171:	mov    DWORD PTR [rbx+0x18],r15d
  40c175:	mov    QWORD PTR [rbx+0x8],r12
  40c179:	mov    rdx,QWORD PTR [rsp+0x38]
  40c17e:	xor    rdx,QWORD PTR fs:0x28
  40c187:	mov    rax,r13
  40c18a:	jne    40c263 <flatcc_json_parser_union_type@@Base+0x243>
  40c190:	add    rsp,0x48
  40c194:	pop    rbx
  40c195:	pop    rbp
  40c196:	pop    r12
  40c198:	pop    r13
  40c19a:	pop    r14
  40c19c:	pop    r15
  40c19e:	ret    
  40c19f:	nop
  40c1a0:	mov    ecx,0x1c
  40c1a5:	mov    rdx,rbp
  40c1a8:	mov    rsi,r12
  40c1ab:	mov    rdi,rbx
  40c1ae:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c1b3:	mov    r13,rax
  40c1b6:	jmp    40c179 <flatcc_json_parser_union_type@@Base+0x159>
  40c1b8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c1c0:	mov    r13,rbp
  40c1c3:	mov    rcx,QWORD PTR [rsp+0x10]
  40c1c8:	lea    r8,[r9+0x15]
  40c1cc:	mov    rsi,r13
  40c1cf:	mov    rdx,rbp
  40c1d2:	mov    rdi,rbx
  40c1d5:	mov    QWORD PTR [rsp+0x18],r9
  40c1da:	call   409d50 <flatcc_json_parser_space_ext@@Base+0xe0>
  40c1df:	mov    r9,QWORD PTR [rsp+0x18]
  40c1e4:	mov    r13,rax
  40c1e7:	jmp    40c0ff <flatcc_json_parser_union_type@@Base+0xdf>
  40c1ec:	nop    DWORD PTR [rax+0x0]
  40c1f0:	mov    QWORD PTR [rsp+0x18],r9
  40c1f5:	mov    ecx,0x7
  40c1fa:	mov    rsi,r13
  40c1fd:	mov    rdx,rbp
  40c200:	mov    rdi,rbx
  40c203:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c208:	cmp    r12,rax
  40c20b:	mov    r13,rax
  40c20e:	mov    r9,QWORD PTR [rsp+0x18]
  40c213:	jne    40c0ff <flatcc_json_parser_union_type@@Base+0xdf>
  40c219:	jmp    40c1c3 <flatcc_json_parser_union_type@@Base+0x1a3>
  40c21b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c220:	mov    r13,rbp
  40c223:	jmp    40c179 <flatcc_json_parser_union_type@@Base+0x159>
  40c228:	nop    DWORD PTR [rax+rax*1+0x0]
  40c230:	mov    rsi,r13
  40c233:	mov    ecx,0x1c
  40c238:	mov    rdx,rbp
  40c23b:	mov    rdi,rbx
  40c23e:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c243:	mov    r13,rax
  40c246:	jmp    40c179 <flatcc_json_parser_union_type@@Base+0x159>
  40c24b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c250:	xor    eax,eax
  40c252:	cmp    BYTE PTR [r9+0x15],0x0
  40c257:	setne  al
  40c25a:	add    QWORD PTR [r15+0x8],rax
  40c25e:	jmp    40c179 <flatcc_json_parser_union_type@@Base+0x159>
  40c263:	call   403060 <__stack_chk_fail@plt>
  40c268:	lea    rcx,[rip+0x2541]        # 40e7b0 <flatcc_builder_padding_base@@Base+0x970>
  40c26f:	lea    rsi,[rip+0x1f4a]        # 40e1c0 <flatcc_builder_padding_base@@Base+0x380>
  40c276:	lea    rdi,[rip+0x223e]        # 40e4bb <flatcc_builder_padding_base@@Base+0x67b>
  40c27d:	mov    edx,0x3c5
  40c282:	call   403070 <__assert_fail@plt>
  40c287:	nop    WORD PTR [rax+rax*1+0x0]

000000000040c290 <flatcc_json_parser_union_vector@@Base>:
  40c290:	push   r15
  40c292:	push   r14
  40c294:	mov    r15d,r8d
  40c297:	push   r13
  40c299:	push   r12
  40c29b:	mov    r12,rsi
  40c29e:	push   rbp
  40c29f:	push   rbx
  40c2a0:	mov    rbx,rdi
  40c2a3:	mov    rbp,rcx
  40c2a6:	mov    rsi,r9
  40c2a9:	mov    r13,rdx
  40c2ac:	sub    rsp,0x8
  40c2b0:	mov    rdi,QWORD PTR [rdi]
  40c2b3:	mov    r14,QWORD PTR [rsp+0x40]
  40c2b8:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40c2bd:	lea    rdx,[rbp+rbp*4+0x0]
  40c2c2:	lea    rcx,[rax+rdx*8+0x10]
  40c2c7:	cmp    QWORD PTR [rcx],0x0
  40c2cb:	je     40c2f0 <flatcc_json_parser_union_vector@@Base+0x60>
  40c2cd:	add    rsp,0x8
  40c2d1:	mov    rdx,r13
  40c2d4:	mov    rsi,r12
  40c2d7:	mov    rdi,rbx
  40c2da:	mov    ecx,0x1c
  40c2df:	pop    rbx
  40c2e0:	pop    rbp
  40c2e1:	pop    r12
  40c2e3:	pop    r13
  40c2e5:	pop    r14
  40c2e7:	pop    r15
  40c2e9:	jmp    409be0 <flatcc_json_parser_set_error@@Base>
  40c2ee:	xchg   ax,ax
  40c2f0:	cmp    BYTE PTR [rcx+0x14],0x0
  40c2f4:	je     40c330 <flatcc_json_parser_union_vector@@Base+0xa0>
  40c2f6:	sub    QWORD PTR [rax+0x8],0x1
  40c2fb:	mov    r8d,DWORD PTR [rcx+0x18]
  40c2ff:	movzx  r9d,r15w
  40c303:	mov    rcx,QWORD PTR [rcx+0x20]
  40c307:	mov    QWORD PTR [rsp+0x40],r14
  40c30c:	add    rsp,0x8
  40c310:	mov    rdx,r13
  40c313:	mov    rsi,r12
  40c316:	mov    rdi,rbx
  40c319:	pop    rbx
  40c31a:	pop    rbp
  40c31b:	pop    r12
  40c31d:	pop    r13
  40c31f:	pop    r14
  40c321:	pop    r15
  40c323:	jmp    409f80 <flatcc_json_parser_space_ext@@Base+0x310>
  40c328:	nop    DWORD PTR [rax+rax*1+0x0]
  40c330:	add    QWORD PTR [rax+0x8],0x1
  40c335:	mov    eax,DWORD PTR [rbx+0x18]
  40c338:	mov    rdx,r13
  40c33b:	mov    rsi,r12
  40c33e:	mov    rdi,rbx
  40c341:	mov    DWORD PTR [rcx+0x10],eax
  40c344:	mov    rax,QWORD PTR [rbx+0x8]
  40c348:	mov    QWORD PTR [rcx],r12
  40c34b:	mov    QWORD PTR [rcx+0x8],rax
  40c34f:	add    rsp,0x8
  40c353:	pop    rbx
  40c354:	pop    rbp
  40c355:	pop    r12
  40c357:	pop    r13
  40c359:	pop    r14
  40c35b:	pop    r15
  40c35d:	jmp    40ab20 <flatcc_json_parser_generic_json@@Base>
  40c362:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c36d:	nop    DWORD PTR [rax]

000000000040c370 <flatcc_json_parser_union_type_vector@@Base>:
  40c370:	push   r15
  40c372:	push   r14
  40c374:	push   r13
  40c376:	push   r12
  40c378:	mov    r12,rdi
  40c37b:	push   rbp
  40c37c:	push   rbx
  40c37d:	mov    r13,rcx
  40c380:	mov    rbp,rsi
  40c383:	mov    rsi,r9
  40c386:	mov    rbx,rdx
  40c389:	sub    rsp,0x78
  40c38d:	mov    rdi,QWORD PTR [rdi]
  40c390:	mov    rax,QWORD PTR [rsp+0xb0]
  40c398:	mov    DWORD PTR [rsp+0x2c],r8d
  40c39d:	mov    QWORD PTR [rsp+0x30],r9
  40c3a2:	mov    r14,QWORD PTR [rsp+0xc0]
  40c3aa:	mov    QWORD PTR [rsp+0x20],rax
  40c3af:	mov    rax,QWORD PTR [rsp+0xb8]
  40c3b7:	mov    QWORD PTR [rsp+0x38],rax
  40c3bc:	mov    rax,QWORD PTR fs:0x28
  40c3c5:	mov    QWORD PTR [rsp+0x68],rax
  40c3ca:	xor    eax,eax
  40c3cc:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40c3d1:	lea    rdx,[r13+r13*4+0x0]
  40c3d6:	lea    rcx,[rdx*8+0x0]
  40c3de:	lea    rax,[rax+rcx*1+0x10]
  40c3e3:	mov    QWORD PTR [rsp+0x40],rcx
  40c3e8:	cmp    BYTE PTR [rax+0x14],0x0
  40c3ec:	mov    QWORD PTR [rsp+0x18],rax
  40c3f1:	jne    40c4f0 <flatcc_json_parser_union_type_vector@@Base+0x180>
  40c3f7:	mov    rax,QWORD PTR [rsp+0x18]
  40c3fc:	mov    ecx,0xffffffff
  40c401:	mov    edx,0x1
  40c406:	mov    esi,0x1
  40c40b:	mov    BYTE PTR [rax+0x14],0x1
  40c40f:	mov    rdi,QWORD PTR [r12]
  40c413:	call   406220 <flatcc_builder_start_vector@@Base>
  40c418:	test   eax,eax
  40c41a:	jne    40c4b0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  40c420:	cmp    rbp,rbx
  40c423:	je     40c42f <flatcc_json_parser_union_type_vector@@Base+0xbf>
  40c425:	cmp    BYTE PTR [rbp+0x0],0x5b
  40c429:	je     40c508 <flatcc_json_parser_union_type_vector@@Base+0x198>
  40c42f:	mov    rsi,rbp
  40c432:	mov    ecx,0x16
  40c437:	mov    rdx,rbx
  40c43a:	mov    rdi,r12
  40c43d:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c442:	mov    rbp,rax
  40c445:	nop    DWORD PTR [rax]
  40c448:	mov    rdi,QWORD PTR [r12]
  40c44c:	call   407200 <flatcc_builder_vector_count@@Base>
  40c451:	mov    r14,rax
  40c454:	mov    rax,QWORD PTR [rsp+0x18]
  40c459:	mov    rdi,QWORD PTR [r12]
  40c45d:	mov    r15d,r14d
  40c460:	mov    rsi,r15
  40c463:	mov    DWORD PTR [rax+0x18],r14d
  40c467:	call   4050d0 <flatcc_builder_enter_user_frame@@Base>
  40c46c:	mov    rdi,QWORD PTR [r12]
  40c470:	mov    rsi,rax
  40c473:	mov    QWORD PTR [rsp+0x8],rax
  40c478:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40c47d:	mov    rdi,QWORD PTR [r12]
  40c481:	mov    r13,rax
  40c484:	call   407210 <flatcc_builder_vector_edit@@Base>
  40c489:	mov    rdx,r15
  40c48c:	mov    rsi,rax
  40c48f:	mov    rdi,r13
  40c492:	call   4030b0 <memcpy@plt>
  40c497:	mov    rdi,QWORD PTR [r12]
  40c49b:	call   407120 <flatcc_builder_end_vector@@Base>
  40c4a0:	test   eax,eax
  40c4a2:	mov    r15d,eax
  40c4a5:	jne    40c671 <flatcc_json_parser_union_type_vector@@Base+0x301>
  40c4ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40c4b0:	mov    ecx,0x21
  40c4b5:	mov    rdx,rbx
  40c4b8:	mov    rsi,rbp
  40c4bb:	mov    rdi,r12
  40c4be:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c4c3:	mov    rdx,QWORD PTR [rsp+0x68]
  40c4c8:	xor    rdx,QWORD PTR fs:0x28
  40c4d1:	jne    40c916 <flatcc_json_parser_union_type_vector@@Base+0x5a6>
  40c4d7:	add    rsp,0x78
  40c4db:	pop    rbx
  40c4dc:	pop    rbp
  40c4dd:	pop    r12
  40c4df:	pop    r13
  40c4e1:	pop    r14
  40c4e3:	pop    r15
  40c4e5:	ret    
  40c4e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c4f0:	mov    ecx,0x1c
  40c4f5:	mov    rdx,rbx
  40c4f8:	mov    rsi,rbp
  40c4fb:	mov    rdi,r12
  40c4fe:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c503:	jmp    40c4c3 <flatcc_json_parser_union_type_vector@@Base+0x153>
  40c505:	nop    DWORD PTR [rax]
  40c508:	lea    rsi,[rbp+0x1]
  40c50c:	mov    rax,rbx
  40c50f:	sub    rax,rsi
  40c512:	cmp    rax,0x1
  40c516:	jle    40c528 <flatcc_json_parser_union_type_vector@@Base+0x1b8>
  40c518:	cmp    BYTE PTR [rbp+0x1],0x20
  40c51c:	jg     40c732 <flatcc_json_parser_union_type_vector@@Base+0x3c2>
  40c522:	je     40c8e3 <flatcc_json_parser_union_type_vector@@Base+0x573>
  40c528:	mov    rdx,rbx
  40c52b:	mov    rdi,r12
  40c52e:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40c533:	mov    rbp,rax
  40c536:	cmp    rbx,rbp
  40c539:	je     40c545 <flatcc_json_parser_union_type_vector@@Base+0x1d5>
  40c53b:	cmp    BYTE PTR [rbp+0x0],0x5d
  40c53f:	je     40c84d <flatcc_json_parser_union_type_vector@@Base+0x4dd>
  40c545:	lea    rax,[rsp+0x5b]
  40c54a:	mov    QWORD PTR [rsp+0x48],rax
  40c54f:	lea    rax,[rsp+0x60]
  40c554:	mov    QWORD PTR [rsp+0x8],rax
  40c559:	lea    rax,[rsp+0x5c]
  40c55e:	mov    QWORD PTR [rsp+0x10],rax
  40c563:	nop    DWORD PTR [rax+rax*1+0x0]
  40c568:	mov    rdi,QWORD PTR [r12]
  40c56c:	mov    esi,0x1
  40c571:	call   405b80 <flatcc_builder_extend_vector@@Base>
  40c576:	test   rax,rax
  40c579:	mov    r13,rax
  40c57c:	je     40c4b0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  40c582:	cmp    rbx,rbp
  40c585:	mov    QWORD PTR [rsp+0x60],0x0
  40c58e:	mov    DWORD PTR [rsp+0x5c],0x0
  40c596:	mov    BYTE PTR [rsp+0x5b],0x0
  40c59b:	je     40c7b0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  40c5a1:	mov    r8,QWORD PTR [rsp+0x8]
  40c5a6:	mov    rcx,QWORD PTR [rsp+0x10]
  40c5ab:	mov    rdx,rbx
  40c5ae:	mov    rsi,rbp
  40c5b1:	mov    rdi,r12
  40c5b4:	call   40b780 <flatcc_json_parser_integer@@Base>
  40c5b9:	cmp    rax,rbp
  40c5bc:	mov    r15,rax
  40c5bf:	je     40c7b0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  40c5c5:	mov    esi,DWORD PTR [rsp+0x5c]
  40c5c9:	mov    ecx,0x8
  40c5ce:	test   esi,esi
  40c5d0:	jne    40c755 <flatcc_json_parser_union_type_vector@@Base+0x3e5>
  40c5d6:	mov    rax,QWORD PTR [rsp+0x60]
  40c5db:	cmp    rax,0xff
  40c5e1:	ja     40c750 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  40c5e7:	movzx  edi,al
  40c5ea:	mov    BYTE PTR [rsp+0x5b],al
  40c5ee:	call   r14
  40c5f1:	test   eax,eax
  40c5f3:	jne    40c740 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  40c5f9:	test   BYTE PTR [r12+0x10],0x1
  40c5ff:	je     40c8a8 <flatcc_json_parser_union_type_vector@@Base+0x538>
  40c605:	mov    BYTE PTR [rsp+0x5b],0x0
  40c60a:	xor    eax,eax
  40c60c:	mov    BYTE PTR [r13+0x0],al
  40c610:	mov    rax,rbx
  40c613:	sub    rax,r15
  40c616:	cmp    rax,0x1
  40c61a:	jle    40c628 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
  40c61c:	cmp    BYTE PTR [r15],0x20
  40c620:	jg     40c639 <flatcc_json_parser_union_type_vector@@Base+0x2c9>
  40c622:	je     40c7e0 <flatcc_json_parser_union_type_vector@@Base+0x470>
  40c628:	mov    rsi,r15
  40c62b:	mov    rdx,rbx
  40c62e:	mov    rdi,r12
  40c631:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40c636:	mov    r15,rax
  40c639:	cmp    rbx,r15
  40c63c:	je     40c800 <flatcc_json_parser_union_type_vector@@Base+0x490>
  40c642:	movzx  eax,BYTE PTR [r15]
  40c646:	cmp    al,0x2c
  40c648:	je     40c810 <flatcc_json_parser_union_type_vector@@Base+0x4a0>
  40c64e:	cmp    al,0x5d
  40c650:	je     40c778 <flatcc_json_parser_union_type_vector@@Base+0x408>
  40c656:	mov    ecx,0x9
  40c65b:	mov    rdx,rbx
  40c65e:	mov    rsi,r15
  40c661:	mov    rdi,r12
  40c664:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c669:	mov    rbp,rax
  40c66c:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c671:	movzx  r13d,WORD PTR [rsp+0x2c]
  40c677:	mov    rdi,QWORD PTR [r12]
  40c67b:	lea    esi,[r13-0x1]
  40c67f:	call   407eb0 <flatcc_builder_table_add_offset@@Base>
  40c684:	test   rax,rax
  40c687:	je     40c4b0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  40c68d:	mov    rsi,QWORD PTR [rsp+0x30]
  40c692:	mov    rdi,QWORD PTR [r12]
  40c696:	mov    DWORD PTR [rax],r15d
  40c699:	call   405210 <flatcc_builder_get_user_frame_ptr@@Base>
  40c69e:	mov    rdx,QWORD PTR [rsp+0x40]
  40c6a3:	mov    rcx,QWORD PTR [rsp+0x8]
  40c6a8:	lea    rdx,[rax+rdx*1+0x10]
  40c6ad:	mov    rsi,QWORD PTR [rdx]
  40c6b0:	mov    QWORD PTR [rdx+0x20],rcx
  40c6b4:	test   rsi,rsi
  40c6b7:	je     40c909 <flatcc_json_parser_union_type_vector@@Base+0x599>
  40c6bd:	mov    rcx,QWORD PTR [rax+0x8]
  40c6c1:	test   rcx,rcx
  40c6c4:	je     40c91b <flatcc_json_parser_union_type_vector@@Base+0x5ab>
  40c6ca:	sub    rcx,0x1
  40c6ce:	sub    rsp,0x8
  40c6d2:	mov    r15d,DWORD PTR [r12+0x18]
  40c6d7:	mov    QWORD PTR [rax+0x8],rcx
  40c6db:	mov    rax,QWORD PTR [r12+0x8]
  40c6e0:	mov    r9d,r13d
  40c6e3:	mov    r8d,r14d
  40c6e6:	mov    rdi,r12
  40c6e9:	mov    QWORD PTR [rsp+0x18],rax
  40c6ee:	mov    eax,DWORD PTR [rdx+0x10]
  40c6f1:	mov    DWORD PTR [r12+0x18],eax
  40c6f6:	mov    rax,QWORD PTR [rdx+0x8]
  40c6fa:	mov    rdx,rbx
  40c6fd:	push   QWORD PTR [rsp+0x40]
  40c701:	mov    rcx,QWORD PTR [rsp+0x18]
  40c706:	mov    QWORD PTR [r12+0x8],rax
  40c70b:	call   409f80 <flatcc_json_parser_space_ext@@Base+0x310>
  40c710:	cmp    rbx,rax
  40c713:	pop    rdx
  40c714:	pop    rcx
  40c715:	je     40c4c3 <flatcc_json_parser_union_type_vector@@Base+0x153>
  40c71b:	mov    rax,QWORD PTR [rsp+0x10]
  40c720:	mov    DWORD PTR [r12+0x18],r15d
  40c725:	mov    QWORD PTR [r12+0x8],rax
  40c72a:	mov    rax,rbp
  40c72d:	jmp    40c4c3 <flatcc_json_parser_union_type_vector@@Base+0x153>
  40c732:	mov    rbp,rsi
  40c735:	jmp    40c536 <flatcc_json_parser_union_type_vector@@Base+0x1c6>
  40c73a:	nop    WORD PTR [rax+rax*1+0x0]
  40c740:	movzx  eax,BYTE PTR [rsp+0x5b]
  40c745:	jmp    40c60c <flatcc_json_parser_union_type_vector@@Base+0x29c>
  40c74a:	nop    WORD PTR [rax+rax*1+0x0]
  40c750:	mov    ecx,0x7
  40c755:	mov    rsi,r15
  40c758:	mov    rdx,rbx
  40c75b:	mov    rdi,r12
  40c75e:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c763:	cmp    rax,rbp
  40c766:	mov    r15,rax
  40c769:	je     40c7b0 <flatcc_json_parser_union_type_vector@@Base+0x440>
  40c76b:	movzx  edi,BYTE PTR [rsp+0x5b]
  40c770:	jmp    40c5ee <flatcc_json_parser_union_type_vector@@Base+0x27e>
  40c775:	nop    DWORD PTR [rax]
  40c778:	lea    rbp,[r15+0x1]
  40c77c:	mov    rax,rbx
  40c77f:	sub    rax,rbp
  40c782:	cmp    rax,0x1
  40c786:	jle    40c799 <flatcc_json_parser_union_type_vector@@Base+0x429>
  40c788:	cmp    BYTE PTR [r15+0x1],0x20
  40c78d:	jg     40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c793:	je     40c880 <flatcc_json_parser_union_type_vector@@Base+0x510>
  40c799:	mov    rsi,rbp
  40c79c:	mov    rdx,rbx
  40c79f:	mov    rdi,r12
  40c7a2:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40c7a7:	mov    rbp,rax
  40c7aa:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c7af:	nop
  40c7b0:	mov    r8,QWORD PTR [rsp+0x48]
  40c7b5:	mov    rcx,QWORD PTR [rsp+0x20]
  40c7ba:	mov    rdx,rbx
  40c7bd:	mov    rsi,rbp
  40c7c0:	mov    rdi,r12
  40c7c3:	call   409d50 <flatcc_json_parser_space_ext@@Base+0xe0>
  40c7c8:	cmp    rax,rbp
  40c7cb:	mov    r15,rax
  40c7ce:	je     40c7d5 <flatcc_json_parser_union_type_vector@@Base+0x465>
  40c7d0:	cmp    rbx,rax
  40c7d3:	jne    40c76b <flatcc_json_parser_union_type_vector@@Base+0x3fb>
  40c7d5:	mov    rbp,r15
  40c7d8:	jmp    40c4b0 <flatcc_json_parser_union_type_vector@@Base+0x140>
  40c7dd:	nop    DWORD PTR [rax]
  40c7e0:	cmp    BYTE PTR [r15+0x1],0x20
  40c7e5:	jle    40c628 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
  40c7eb:	add    r15,0x1
  40c7ef:	cmp    rbx,r15
  40c7f2:	jne    40c642 <flatcc_json_parser_union_type_vector@@Base+0x2d2>
  40c7f8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c800:	mov    rbp,rbx
  40c803:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c808:	nop    DWORD PTR [rax+rax*1+0x0]
  40c810:	lea    rbp,[r15+0x1]
  40c814:	mov    rax,rbx
  40c817:	sub    rax,rbp
  40c81a:	cmp    rax,0x1
  40c81e:	jle    40c829 <flatcc_json_parser_union_type_vector@@Base+0x4b9>
  40c820:	cmp    BYTE PTR [r15+0x1],0x20
  40c825:	jg     40c83a <flatcc_json_parser_union_type_vector@@Base+0x4ca>
  40c827:	je     40c898 <flatcc_json_parser_union_type_vector@@Base+0x528>
  40c829:	mov    rsi,rbp
  40c82c:	mov    rdx,rbx
  40c82f:	mov    rdi,r12
  40c832:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40c837:	mov    rbp,rax
  40c83a:	cmp    rbx,rbp
  40c83d:	je     40c8c0 <flatcc_json_parser_union_type_vector@@Base+0x550>
  40c843:	cmp    BYTE PTR [rbp+0x0],0x5d
  40c847:	jne    40c568 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
  40c84d:	lea    rsi,[rbp+0x1]
  40c851:	mov    rax,rbx
  40c854:	sub    rax,rsi
  40c857:	cmp    rax,0x1
  40c85b:	jle    40c869 <flatcc_json_parser_union_type_vector@@Base+0x4f9>
  40c85d:	cmp    BYTE PTR [rbp+0x1],0x20
  40c861:	jg     40c8db <flatcc_json_parser_union_type_vector@@Base+0x56b>
  40c863:	je     40c8f6 <flatcc_json_parser_union_type_vector@@Base+0x586>
  40c869:	mov    rdx,rbx
  40c86c:	mov    rdi,r12
  40c86f:	call   409c70 <flatcc_json_parser_space_ext@@Base>
  40c874:	mov    rbp,rax
  40c877:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c87c:	nop    DWORD PTR [rax+0x0]
  40c880:	cmp    BYTE PTR [r15+0x2],0x20
  40c885:	jle    40c799 <flatcc_json_parser_union_type_vector@@Base+0x429>
  40c88b:	lea    rbp,[r15+0x2]
  40c88f:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c894:	nop    DWORD PTR [rax+0x0]
  40c898:	cmp    BYTE PTR [r15+0x2],0x20
  40c89d:	jle    40c829 <flatcc_json_parser_union_type_vector@@Base+0x4b9>
  40c89f:	lea    rbp,[r15+0x2]
  40c8a3:	jmp    40c83a <flatcc_json_parser_union_type_vector@@Base+0x4ca>
  40c8a5:	nop    DWORD PTR [rax]
  40c8a8:	mov    ecx,0xf
  40c8ad:	mov    rdx,rbx
  40c8b0:	mov    rsi,r15
  40c8b3:	mov    rdi,r12
  40c8b6:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c8bb:	jmp    40c4c3 <flatcc_json_parser_union_type_vector@@Base+0x153>
  40c8c0:	mov    ecx,0x9
  40c8c5:	mov    rdx,rbx
  40c8c8:	mov    rsi,rbx
  40c8cb:	mov    rdi,r12
  40c8ce:	call   409be0 <flatcc_json_parser_set_error@@Base>
  40c8d3:	mov    rbp,rax
  40c8d6:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c8db:	mov    rbp,rsi
  40c8de:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c8e3:	cmp    BYTE PTR [rbp+0x2],0x20
  40c8e7:	jle    40c528 <flatcc_json_parser_union_type_vector@@Base+0x1b8>
  40c8ed:	add    rbp,0x2
  40c8f1:	jmp    40c536 <flatcc_json_parser_union_type_vector@@Base+0x1c6>
  40c8f6:	cmp    BYTE PTR [rbp+0x2],0x20
  40c8fa:	jle    40c869 <flatcc_json_parser_union_type_vector@@Base+0x4f9>
  40c900:	add    rbp,0x2
  40c904:	jmp    40c448 <flatcc_json_parser_union_type_vector@@Base+0xd8>
  40c909:	add    QWORD PTR [rax+0x8],0x1
  40c90e:	mov    rax,rbp
  40c911:	jmp    40c4c3 <flatcc_json_parser_union_type_vector@@Base+0x153>
  40c916:	call   403060 <__stack_chk_fail@plt>
  40c91b:	lea    rcx,[rip+0x1e5e]        # 40e780 <flatcc_builder_padding_base@@Base+0x940>
  40c922:	lea    rsi,[rip+0x1897]        # 40e1c0 <flatcc_builder_padding_base@@Base+0x380>
  40c929:	lea    rdi,[rip+0x1b8b]        # 40e4bb <flatcc_builder_padding_base@@Base+0x67b>
  40c930:	mov    edx,0x462
  40c935:	call   403070 <__assert_fail@plt>
  40c93a:	nop    WORD PTR [rax+rax*1+0x0]

000000000040c940 <flatcc_json_parser_struct_as_root@@Base>:
  40c940:	push   r14
  40c942:	push   r13
  40c944:	mov    r13,rdx
  40c947:	push   r12
  40c949:	push   rbp
  40c94a:	mov    edx,r8d
  40c94d:	push   rbx
  40c94e:	mov    rbx,rsi
  40c951:	mov    rbp,rdi
  40c954:	lea    r14,[r13+rcx*1+0x0]
  40c959:	sub    rsp,0x60
  40c95d:	mov    rax,QWORD PTR fs:0x28
  40c966:	mov    QWORD PTR [rsp+0x58],rax
  40c96b:	xor    eax,eax
  40c96d:	and    edx,0x4
  40c970:	mov    eax,0x2
  40c975:	mov    r12,QWORD PTR [rsp+0x90]
  40c97d:	cmovne edx,eax
  40c980:	lea    rax,[rsp+0x10]
  40c985:	test   rsi,rsi
  40c988:	mov    rsi,r9
  40c98b:	cmove  rbx,rax
  40c98f:	xor    eax,eax
  40c991:	lea    rdi,[rbx+0x8]
  40c995:	mov    rcx,rbx
  40c998:	mov    QWORD PTR [rbx+0x40],0x0
  40c9a0:	and    rdi,0xfffffffffffffff8
  40c9a4:	sub    rcx,rdi
  40c9a7:	add    ecx,0x48
  40c9aa:	shr    ecx,0x3
  40c9ad:	rep stos QWORD PTR es:[rdi],rax
  40c9b0:	mov    ecx,edx
  40c9b2:	mov    QWORD PTR [rbx],rbp
  40c9b5:	xor    edx,edx
  40c9b7:	mov    QWORD PTR [rbx+0x8],r13
  40c9bb:	mov    DWORD PTR [rbx+0x18],0x1
  40c9c2:	mov    rdi,rbp
  40c9c5:	mov    DWORD PTR [rbx+0x10],r8d
  40c9c9:	mov    QWORD PTR [rbx+0x28],r13
  40c9cd:	mov    QWORD PTR [rbx+0x30],r14
  40c9d1:	mov    QWORD PTR [rbx+0x38],r13
  40c9d5:	call   4057d0 <flatcc_builder_start_buffer@@Base>
  40c9da:	test   eax,eax
  40c9dc:	jne    40ca40 <flatcc_json_parser_struct_as_root@@Base+0x100>
  40c9de:	lea    rcx,[rsp+0xc]
  40c9e3:	mov    rdx,r14
  40c9e6:	mov    rsi,r13
  40c9e9:	mov    rdi,rbx
  40c9ec:	call   r12
  40c9ef:	mov    r12d,DWORD PTR [rbx+0x20]
  40c9f3:	test   r12d,r12d
  40c9f6:	je     40ca20 <flatcc_json_parser_struct_as_root@@Base+0xe0>
  40c9f8:	mov    rsi,QWORD PTR [rsp+0x58]
  40c9fd:	xor    rsi,QWORD PTR fs:0x28
  40ca06:	mov    eax,r12d
  40ca09:	jne    40ca48 <flatcc_json_parser_struct_as_root@@Base+0x108>
  40ca0b:	add    rsp,0x60
  40ca0f:	pop    rbx
  40ca10:	pop    rbp
  40ca11:	pop    r12
  40ca13:	pop    r13
  40ca15:	pop    r14
  40ca17:	ret    
  40ca18:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca20:	mov    esi,DWORD PTR [rsp+0xc]
  40ca24:	mov    rdi,rbp
  40ca27:	call   4058b0 <flatcc_builder_end_buffer@@Base>
  40ca2c:	test   eax,eax
  40ca2e:	je     40ca40 <flatcc_json_parser_struct_as_root@@Base+0x100>
  40ca30:	mov    QWORD PTR [rbx+0x40],r13
  40ca34:	jmp    40c9f8 <flatcc_json_parser_struct_as_root@@Base+0xb8>
  40ca36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ca40:	mov    r12d,0xffffffff
  40ca46:	jmp    40c9f8 <flatcc_json_parser_struct_as_root@@Base+0xb8>
  40ca48:	call   403060 <__stack_chk_fail@plt>
  40ca4d:	nop    DWORD PTR [rax]

000000000040ca50 <flatcc_json_parser_table_as_root@@Base>:
  40ca50:	jmp    40c940 <flatcc_json_parser_struct_as_root@@Base>
  40ca55:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ca5f:	nop

000000000040ca60 <__libc_csu_init@@Base>:
  40ca60:	endbr64 
  40ca64:	push   r15
  40ca66:	lea    r15,[rip+0x6393]        # 412e00 <flatcc_builder_padding_base@@Base+0x4fc0>
  40ca6d:	push   r14
  40ca6f:	mov    r14,rdx
  40ca72:	push   r13
  40ca74:	mov    r13,rsi
  40ca77:	push   r12
  40ca79:	mov    r12d,edi
  40ca7c:	push   rbp
  40ca7d:	lea    rbp,[rip+0x6384]        # 412e08 <flatcc_builder_padding_base@@Base+0x4fc8>
  40ca84:	push   rbx
  40ca85:	sub    rbp,r15
  40ca88:	sub    rsp,0x8
  40ca8c:	call   403000 <free@plt-0x30>
  40ca91:	sar    rbp,0x3
  40ca95:	je     40cab6 <__libc_csu_init@@Base+0x56>
  40ca97:	xor    ebx,ebx
  40ca99:	nop    DWORD PTR [rax+0x0]
  40caa0:	mov    rdx,r14
  40caa3:	mov    rsi,r13
  40caa6:	mov    edi,r12d
  40caa9:	call   QWORD PTR [r15+rbx*8]
  40caad:	add    rbx,0x1
  40cab1:	cmp    rbp,rbx
  40cab4:	jne    40caa0 <__libc_csu_init@@Base+0x40>
  40cab6:	add    rsp,0x8
  40caba:	pop    rbx
  40cabb:	pop    rbp
  40cabc:	pop    r12
  40cabe:	pop    r13
  40cac0:	pop    r14
  40cac2:	pop    r15
  40cac4:	ret    
  40cac5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040cad0 <__libc_csu_fini@@Base>:
  40cad0:	endbr64 
  40cad4:	ret    

Disassembly of section .fini:

000000000040cad8 <.fini>:
  40cad8:	endbr64 
  40cadc:	sub    rsp,0x8
  40cae0:	add    rsp,0x8
  40cae4:	ret    
